static	O
bool	enum
string_to_precise_color	function
(	O
const	O
char	O
*	O
name	pointer
,	O
plColor	struct
*	O
color_p	pointer
)	O
;	O
int	O
_API_pencolor	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
red	int
,	O
int	O
green	int
,	O
int	O
blue	int
)	O
{	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"pencolor: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
(	O
red	int
>	O
0xffff	int
)	O
||	O
(	O
green	int
>	O
0xffff	int
)	O
||	O
(	O
blue	int
>	O
0xffff	int
)	O
)	O
{	O
red	int
=	O
_default_drawstate	struct
.	O
fgcolor	struct
.	O
red	int
;	O
green	int
=	O
_default_drawstate	struct
.	O
fgcolor	struct
.	O
green	int
;	O
blue	int
=	O
_default_drawstate	struct
.	O
fgcolor	struct
.	O
blue	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
emulate_color	enum
)	O
red	int
=	O
green	int
=	O
blue	int
=	O
_grayscale_approx	function
(	O
red	int
,	O
green	int
,	O
blue	int
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
red	int
=	O
red	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
green	int
=	O
green	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
blue	int
=	O
blue	int
;	O
return	O
0	int
;	O
}	O
int	O
_API_fillcolor	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
red	int
,	O
int	O
green	int
,	O
int	O
blue	int
)	O
{	O
double	O
red_d	double
,	O
green_d	double
,	O
blue_d	double
;	O
double	O
desaturate	double
;	O
plColor	struct
new_rgb	struct
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"fillcolor: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
(	O
red	int
>	O
0xffff	int
)	O
||	O
(	O
green	int
>	O
0xffff	int
)	O
||	O
(	O
blue	int
>	O
0xffff	int
)	O
)	O
{	O
red	int
=	O
_default_drawstate	struct
.	O
fillcolor	struct
.	O
red	int
;	O
green	int
=	O
_default_drawstate	struct
.	O
fillcolor	struct
.	O
green	int
;	O
blue	int
=	O
_default_drawstate	struct
.	O
fillcolor	struct
.	O
blue	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
emulate_color	enum
)	O
red	int
=	O
green	int
=	O
blue	int
=	O
_grayscale_approx	function
(	O
red	int
,	O
green	int
,	O
blue	int
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
red	int
=	O
red	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
green	int
=	O
green	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
blue	int
=	O
blue	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
==	O
0	int
)	O
return	O
0	int
;	O
red_d	double
=	O
(	O
(	O
double	O
)	O
red	int
)	O
/	O
0xFFFF	int
;	O
green_d	double
=	O
(	O
(	O
double	O
)	O
green	int
)	O
/	O
0xFFFF	int
;	O
blue_d	double
=	O
(	O
(	O
double	O
)	O
blue	int
)	O
/	O
0xFFFF	int
;	O
desaturate	double
=	O
(	O
(	O
double	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
-	O
1.	int
)	O
/	O
0xFFFE	int
;	O
red_d	double
=	O
red_d	double
+	O
desaturate	double
*	O
(	O
1.0	int
-	O
red_d	double
)	O
;	O
green_d	double
=	O
green_d	double
+	O
desaturate	double
*	O
(	O
1.0	int
-	O
green_d	double
)	O
;	O
blue_d	double
=	O
blue_d	double
+	O
desaturate	double
*	O
(	O
1.0	int
-	O
blue_d	double
)	O
;	O
new_rgb	struct
.	O
red	int
=	O
IROUND	O
(	O
0xFFFF	int
*	O
red_d	double
)	O
;	O
new_rgb	struct
.	O
green	int
=	O
IROUND	O
(	O
0xFFFF	int
*	O
green_d	double
)	O
;	O
new_rgb	struct
.	O
blue	int
=	O
IROUND	O
(	O
0xFFFF	int
*	O
blue_d	double
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor	struct
=	O
new_rgb	struct
;	O
return	O
0	int
;	O
}	O
int	O
_API_color	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
red	int
,	O
int	O
green	int
,	O
int	O
blue	int
)	O
{	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"color: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_pencolor	O
(	O
R___	O
(	O
_plotter	pointer
)	O
red	int
,	O
green	int
,	O
blue	int
)	O
;	O
_API_fillcolor	O
(	O
R___	O
(	O
_plotter	pointer
)	O
red	int
,	O
green	int
,	O
blue	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_API_bgcolor	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
red	int
,	O
int	O
green	int
,	O
int	O
blue	int
)	O
{	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"bgcolor: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
red	int
>	O
0xffff	int
)	O
||	O
(	O
green	int
>	O
0xffff	int
)	O
||	O
(	O
blue	int
>	O
0xffff	int
)	O
)	O
{	O
red	int
=	O
_default_drawstate	struct
.	O
bgcolor	struct
.	O
red	int
;	O
green	int
=	O
_default_drawstate	struct
.	O
bgcolor	struct
.	O
green	int
;	O
blue	int
=	O
_default_drawstate	struct
.	O
bgcolor	struct
.	O
blue	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
emulate_color	enum
)	O
red	int
=	O
green	int
=	O
blue	int
=	O
_grayscale_approx	function
(	O
red	int
,	O
green	int
,	O
blue	int
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
red	int
=	O
red	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
green	int
=	O
green	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
blue	int
=	O
blue	int
;	O
return	O
0	int
;	O
}	O
int	O
_grayscale_approx	function
(	O
int	O
red	int
,	O
int	O
green	int
,	O
int	O
blue	int
)	O
{	O
double	O
gray	double
;	O
gray	double
=	O
0.212671	int
*	O
red	int
+	O
0.715160	int
*	O
green	int
+	O
0.072169	int
*	O
blue	int
;	O
return	O
IROUND	O
(	O
gray	double
)	O
;	O
}	O
int	O
_API_pencolorname	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
name	pointer
)	O
{	O
plColor	struct
color	struct
;	O
int	O
intred	int
,	O
intgreen	int
,	O
intblue	int
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"pencolorname: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
name	pointer
)	O
return	O
0	int
;	O
intred	int
=	O
_default_drawstate	struct
.	O
fgcolor	struct
.	O
red	int
;	O
intgreen	int
=	O
_default_drawstate	struct
.	O
fgcolor	struct
.	O
green	int
;	O
intblue	int
=	O
_default_drawstate	struct
.	O
fgcolor	struct
.	O
blue	int
;	O
if	O
(	O
_string_to_color	function
(	O
name	pointer
,	O
&	O
color	struct
,	O
_plotter	pointer
->	O
data	pointer
->	O
color_name_cache	pointer
)	O
)	O
{	O
unsigned	O
int	O
red	int
,	O
green	int
,	O
blue	int
;	O
red	int
=	O
color	struct
.	O
red	int
;	O
green	int
=	O
color	struct
.	O
green	int
;	O
blue	int
=	O
color	struct
.	O
blue	int
;	O
intred	int
=	O
(	O
red	int
<<	O
8	int
)	O
|	O
red	int
;	O
intgreen	int
=	O
(	O
green	int
<<	O
8	int
)	O
|	O
green	int
;	O
intblue	int
=	O
(	O
blue	int
<<	O
8	int
)	O
|	O
blue	int
;	O
}	O
else	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
pen_color_warning_issued	enum
==	O
false	int
)	O
{	O
char	O
*	O
buf	pointer
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
100	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"substituting \"black\" for undefined pen color \"%s\""	pointer
,	O
name	pointer
)	O
;	O
_plotter	pointer
->	O
warning	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
buf	pointer
)	O
;	O
free	function
(	O
buf	pointer
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
pen_color_warning_issued	enum
=	O
true	int
;	O
}	O
_API_pencolor	O
(	O
R___	O
(	O
_plotter	pointer
)	O
intred	int
,	O
intgreen	int
,	O
intblue	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_API_fillcolorname	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
name	pointer
)	O
{	O
plColor	struct
color	struct
;	O
int	O
intred	int
,	O
intgreen	int
,	O
intblue	int
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"fillcolorname: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
name	pointer
)	O
return	O
0	int
;	O
intred	int
=	O
_default_drawstate	struct
.	O
fillcolor	struct
.	O
red	int
;	O
intgreen	int
=	O
_default_drawstate	struct
.	O
fillcolor	struct
.	O
green	int
;	O
intblue	int
=	O
_default_drawstate	struct
.	O
fillcolor	struct
.	O
blue	int
;	O
if	O
(	O
_string_to_color	function
(	O
name	pointer
,	O
&	O
color	struct
,	O
_plotter	pointer
->	O
data	pointer
->	O
color_name_cache	pointer
)	O
)	O
{	O
unsigned	O
int	O
red	int
,	O
green	int
,	O
blue	int
;	O
red	int
=	O
color	struct
.	O
red	int
;	O
green	int
=	O
color	struct
.	O
green	int
;	O
blue	int
=	O
color	struct
.	O
blue	int
;	O
intred	int
=	O
(	O
red	int
<<	O
8	int
)	O
|	O
red	int
;	O
intgreen	int
=	O
(	O
green	int
<<	O
8	int
)	O
|	O
green	int
;	O
intblue	int
=	O
(	O
blue	int
<<	O
8	int
)	O
|	O
blue	int
;	O
}	O
else	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
fill_color_warning_issued	enum
==	O
false	int
)	O
{	O
char	O
*	O
buf	pointer
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
100	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"substituting \"black\" for undefined fill color \"%s\""	pointer
,	O
name	pointer
)	O
;	O
_plotter	pointer
->	O
warning	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
buf	pointer
)	O
;	O
free	function
(	O
buf	pointer
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
fill_color_warning_issued	enum
=	O
true	int
;	O
}	O
_API_fillcolor	O
(	O
R___	O
(	O
_plotter	pointer
)	O
intred	int
,	O
intgreen	int
,	O
intblue	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_API_colorname	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"colorname: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_pencolorname	O
(	O
R___	O
(	O
_plotter	pointer
)	O
name	pointer
)	O
;	O
_API_fillcolorname	O
(	O
R___	O
(	O
_plotter	pointer
)	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_API_bgcolorname	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
name	pointer
)	O
{	O
plColor	struct
color	struct
;	O
int	O
intred	int
,	O
intgreen	int
,	O
intblue	int
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"bgcolorname: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
name	pointer
)	O
return	O
0	int
;	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"none"	pointer
)	O
==	O
0	int
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor_suppressed	enum
=	O
true	int
;	O
name	pointer
=	O
"white"	pointer
;	O
}	O
else	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor_suppressed	enum
=	O
false	int
;	O
intred	int
=	O
_default_drawstate	struct
.	O
bgcolor	struct
.	O
red	int
;	O
intgreen	int
=	O
_default_drawstate	struct
.	O
bgcolor	struct
.	O
green	int
;	O
intblue	int
=	O
_default_drawstate	struct
.	O
bgcolor	struct
.	O
blue	int
;	O
if	O
(	O
_string_to_color	function
(	O
name	pointer
,	O
&	O
color	struct
,	O
_plotter	pointer
->	O
data	pointer
->	O
color_name_cache	pointer
)	O
)	O
{	O
unsigned	O
int	O
red	int
,	O
green	int
,	O
blue	int
;	O
red	int
=	O
color	struct
.	O
red	int
;	O
green	int
=	O
color	struct
.	O
green	int
;	O
blue	int
=	O
color	struct
.	O
blue	int
;	O
intred	int
=	O
(	O
red	int
<<	O
8	int
)	O
|	O
red	int
;	O
intgreen	int
=	O
(	O
green	int
<<	O
8	int
)	O
|	O
green	int
;	O
intblue	int
=	O
(	O
blue	int
<<	O
8	int
)	O
|	O
blue	int
;	O
}	O
else	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
bg_color_warning_issued	enum
==	O
false	int
)	O
{	O
char	O
*	O
buf	pointer
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
100	int
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"substituting \"white\" for undefined background color \"%s\""	pointer
,	O
name	pointer
)	O
;	O
_plotter	pointer
->	O
warning	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
buf	pointer
)	O
;	O
free	function
(	O
buf	pointer
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
bg_color_warning_issued	enum
=	O
true	int
;	O
}	O
_API_bgcolor	O
(	O
R___	O
(	O
_plotter	pointer
)	O
intred	int
,	O
intgreen	int
,	O
intblue	int
)	O
;	O
return	O
0	int
;	O
}	O
bool	enum
_string_to_color	function
(	O
const	O
char	O
*	O
name	pointer
,	O
plColor	struct
*	O
color_p	pointer
,	O
plColorNameCache	struct
*	O
color_name_cache	pointer
)	O
{	O
plColor	struct
color	struct
;	O
plCachedColorNameInfo	struct
*	O
*	O
cached_colors_p	pointer
;	O
bool	enum
found	enum
=	O
false	int
;	O
char	O
*	O
squeezed_name	pointer
,	O
*	O
nptr	pointer
;	O
const	O
plColorNameInfo	struct
*	O
info	pointer
,	O
*	O
found_info	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
optr	pointer
;	O
plCachedColorNameInfo	struct
*	O
cached_info	pointer
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
return	O
false	int
;	O
if	O
(	O
color_name_cache	pointer
==	O
NULL	O
)	O
return	O
false	int
;	O
if	O
(	O
string_to_precise_color	function
(	O
name	pointer
,	O
&	O
color	struct
)	O
)	O
{	O
*	O
color_p	pointer
=	O
color	struct
;	O
return	O
true	int
;	O
}	O
squeezed_name	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
)	O
;	O
optr	pointer
=	O
name	pointer
,	O
nptr	pointer
=	O
squeezed_name	pointer
;	O
while	O
(	O
*	O
optr	pointer
)	O
{	O
if	O
(	O
*	O
optr	pointer
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
*	O
optr	pointer
!=	O
' '	O
)	O
*	O
nptr	pointer
++	O
=	O
*	O
optr	pointer
;	O
optr	pointer
++	O
;	O
}	O
*	O
nptr	pointer
=	O
'\0'	O
;	O
cached_colors_p	pointer
=	O
&	O
color_name_cache	pointer
->	O
cached_colors	pointer
;	O
cached_info	pointer
=	O
*	O
cached_colors_p	pointer
;	O
while	O
(	O
cached_info	pointer
)	O
{	O
if	O
(	O
strcasecmp	function
(	O
cached_info	pointer
->	O
info	pointer
->	O
name	pointer
,	O
squeezed_name	pointer
)	O
==	O
0	int
)	O
{	O
found	enum
=	O
true	int
;	O
found_info	pointer
=	O
cached_info	pointer
->	O
info	pointer
;	O
break	O
;	O
}	O
cached_info	pointer
=	O
cached_info	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
!	O
found	enum
)	O
{	O
info	pointer
=	O
_pl_g_colornames	array
;	O
while	O
(	O
info	pointer
->	O
name	pointer
)	O
{	O
if	O
(	O
strcasecmp	function
(	O
info	pointer
->	O
name	pointer
,	O
squeezed_name	pointer
)	O
==	O
0	int
)	O
{	O
found	enum
=	O
true	int
;	O
found_info	pointer
=	O
info	pointer
;	O
break	O
;	O
}	O
info	pointer
++	O
;	O
}	O
if	O
(	O
found	enum
)	O
{	O
plCachedColorNameInfo	struct
*	O
old_cached_colors	pointer
,	O
*	O
cached_colors	pointer
;	O
old_cached_colors	pointer
=	O
*	O
cached_colors_p	pointer
;	O
cached_colors	pointer
=	O
(	O
plCachedColorNameInfo	struct
*	O
)	O
_pl_xmalloc	function
(	O
sizeof	O
(	O
plCachedColorNameInfo	struct
)	O
)	O
;	O
cached_colors	pointer
->	O
next	pointer
=	O
old_cached_colors	pointer
;	O
cached_colors	pointer
->	O
info	pointer
=	O
found_info	pointer
;	O
*	O
cached_colors_p	pointer
=	O
cached_colors	pointer
;	O
}	O
}	O
free	function
(	O
squeezed_name	pointer
)	O
;	O
if	O
(	O
found	enum
)	O
{	O
color_p	pointer
->	O
red	int
=	O
found_info	pointer
->	O
red	int
;	O
color_p	pointer
->	O
green	int
=	O
found_info	pointer
->	O
green	int
;	O
color_p	pointer
->	O
blue	int
=	O
found_info	pointer
->	O
blue	int
;	O
}	O
return	O
found	enum
;	O
}	O
static	O
bool	enum
string_to_precise_color	function
(	O
const	O
char	O
*	O
name	pointer
,	O
plColor	struct
*	O
color_p	pointer
)	O
{	O
const	O
char	O
*	O
good_hex_digits	pointer
=	O
"0123456789abcdefABCDEF"	pointer
;	O
int	O
i	int
,	O
num_assigned	int
;	O
if	O
(	O
name	pointer
==	O
(	O
const	O
char	O
*	O
)	O
NULL	O
||	O
*	O
name	pointer
!=	O
'#'	O
)	O
return	O
false	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
8	int
;	O
i	int
++	O
)	O
{	O
bool	enum
found	enum
;	O
const	O
char	O
*	O
cp	pointer
;	O
if	O
(	O
name	pointer
[	O
i	int
]	O
==	O
'\0'	O
)	O
break	O
;	O
cp	pointer
=	O
good_hex_digits	pointer
;	O
found	enum
=	O
false	int
;	O
while	O
(	O
*	O
cp	pointer
)	O
{	O
if	O
(	O
name	pointer
[	O
i	int
]	O
==	O
*	O
cp	pointer
)	O
{	O
found	enum
=	O
true	int
;	O
break	O
;	O
}	O
cp	pointer
++	O
;	O
}	O
if	O
(	O
found	enum
==	O
false	int
)	O
return	O
false	int
;	O
}	O
if	O
(	O
i	int
!=	O
7	int
)	O
return	O
false	int
;	O
num_assigned	int
=	O
sscanf	function
(	O
name	pointer
,	O
"#%2x%2x%2x"	pointer
,	O
&	O
(	O
color_p	pointer
->	O
red	int
)	O
,	O
&	O
(	O
color_p	pointer
->	O
green	int
)	O
,	O
&	O
(	O
color_p	pointer
->	O
blue	int
)	O
)	O
;	O
return	O
(	O
num_assigned	int
==	O
3	int
?	O
true	int
:	O
false	int
)	O
;	O
}	O
plColorNameCache	struct
*	O
_create_color_name_cache	function
(	O
void	O
)	O
{	O
plColorNameCache	struct
*	O
new_cache	pointer
;	O
new_cache	pointer
=	O
(	O
plColorNameCache	struct
*	O
)	O
_pl_xmalloc	function
(	O
sizeof	O
(	O
plColorNameCache	struct
)	O
)	O
;	O
new_cache	pointer
->	O
cached_colors	pointer
=	O
NULL	O
;	O
return	O
new_cache	pointer
;	O
}	O
void	O
_delete_color_name_cache	function
(	O
plColorNameCache	struct
*	O
color_name_cache	pointer
)	O
{	O
plCachedColorNameInfo	struct
*	O
colorptr	pointer
;	O
if	O
(	O
color_name_cache	pointer
==	O
(	O
plColorNameCache	struct
*	O
)	O
NULL	O
)	O
return	O
;	O
colorptr	pointer
=	O
color_name_cache	pointer
->	O
cached_colors	pointer
;	O
while	O
(	O
colorptr	pointer
!=	O
NULL	O
)	O
{	O
plCachedColorNameInfo	struct
*	O
next_colorptr	pointer
;	O
next_colorptr	pointer
=	O
colorptr	pointer
->	O
next	pointer
;	O
free	function
(	O
colorptr	pointer
)	O
;	O
colorptr	pointer
=	O
next_colorptr	pointer
;	O
}	O
free	function
(	O
color_name_cache	pointer
)	O
;	O
}	O
