static	O
char	O
rcsid	array
[	O
]	O
=	O
"$Id: rpc_svcout.c,v 1.1.1.1 2005/10/28 14:46:46 k0ro Exp $"	pointer
;	O
static	O
char	O
RQSTP	array
[	O
]	O
=	O
"rqstp"	pointer
;	O
static	O
char	O
TRANSP	array
[	O
]	O
=	O
"transp"	pointer
;	O
static	O
char	O
ARG	array
[	O
]	O
=	O
"argument"	pointer
;	O
static	O
char	O
RESULT	array
[	O
]	O
=	O
"result"	pointer
;	O
static	O
char	O
ROUTINE	array
[	O
]	O
=	O
"local"	pointer
;	O
static	O
void	O
write_program	function
(	O
)	O
,	O
printerr	function
(	O
)	O
,	O
printif	function
(	O
)	O
;	O
extern	O
int	O
nullproc	function
(	O
proc_list	struct
*	O
proc	pointer
)	O
;	O
void	O
write_most	function
(	O
)	O
{	O
list	struct
*	O
l	pointer
;	O
definition	struct
*	O
def	union
;	O
version_list	struct
*	O
vp	pointer
;	O
for	O
(	O
l	pointer
=	O
defined	pointer
;	O
l	pointer
!=	O
NULL	O
;	O
l	pointer
=	O
l	pointer
->	O
next	pointer
)	O
{	O
def	union
=	O
(	O
definition	struct
*	O
)	O
l	pointer
->	O
val	pointer
;	O
if	O
(	O
def	union
->	O
def_kind	enum
==	O
DEF_PROGRAM	int
)	O
{	O
for	O
(	O
vp	pointer
=	O
def	union
->	O
def	union
.	O
pr	struct
.	O
versions	pointer
;	O
vp	pointer
!=	O
NULL	O
;	O
vp	pointer
=	O
vp	pointer
->	O
next	pointer
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\nstatic void "	pointer
)	O
;	O
pvname	function
(	O
def	union
->	O
def_name	pointer
,	O
vp	pointer
->	O
vers_num	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"();"	pointer
)	O
;	O
}	O
}	O
}	O
f_print	O
(	O
fout	pointer
,	O
"\n\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"main()\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"{\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tSVCXPRT *%s;\n"	pointer
,	O
TRANSP	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\n"	pointer
)	O
;	O
for	O
(	O
l	pointer
=	O
defined	pointer
;	O
l	pointer
!=	O
NULL	O
;	O
l	pointer
=	O
l	pointer
->	O
next	pointer
)	O
{	O
def	union
=	O
(	O
definition	struct
*	O
)	O
l	pointer
->	O
val	pointer
;	O
if	O
(	O
def	union
->	O
def_kind	enum
!=	O
DEF_PROGRAM	int
)	O
{	O
continue	O
;	O
}	O
for	O
(	O
vp	pointer
=	O
def	union
->	O
def	union
.	O
pr	struct
.	O
versions	pointer
;	O
vp	pointer
!=	O
NULL	O
;	O
vp	pointer
=	O
vp	pointer
->	O
next	pointer
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\t(void)pmap_unset(%s, %s);\n"	pointer
,	O
def	union
->	O
def_name	pointer
,	O
vp	pointer
->	O
vers_name	pointer
)	O
;	O
}	O
}	O
}	O
void	O
write_register	function
(	O
transp	pointer
)	O
char	O
*	O
transp	pointer
;	O
{	O
list	struct
*	O
l	pointer
;	O
definition	struct
*	O
def	union
;	O
version_list	struct
*	O
vp	pointer
;	O
f_print	O
(	O
fout	pointer
,	O
"\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t%s = svc%s_create(RPC_ANYSOCK"	pointer
,	O
TRANSP	array
,	O
transp	pointer
)	O
;	O
if	O
(	O
streq	function
(	O
transp	pointer
,	O
"tcp"	pointer
)	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
", 0, 0"	pointer
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
");\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tif (%s == NULL) {\n"	pointer
,	O
TRANSP	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\t(void)fprintf(stderr, \"cannot create %s service.\\n\");\n"	pointer
,	O
transp	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\texit(1);\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t}\n"	pointer
)	O
;	O
for	O
(	O
l	pointer
=	O
defined	pointer
;	O
l	pointer
!=	O
NULL	O
;	O
l	pointer
=	O
l	pointer
->	O
next	pointer
)	O
{	O
def	union
=	O
(	O
definition	struct
*	O
)	O
l	pointer
->	O
val	pointer
;	O
if	O
(	O
def	union
->	O
def_kind	enum
!=	O
DEF_PROGRAM	int
)	O
{	O
continue	O
;	O
}	O
for	O
(	O
vp	pointer
=	O
def	union
->	O
def	union
.	O
pr	struct
.	O
versions	pointer
;	O
vp	pointer
!=	O
NULL	O
;	O
vp	pointer
=	O
vp	pointer
->	O
next	pointer
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\tif (!svc_register(%s, %s, %s, "	pointer
,	O
TRANSP	array
,	O
def	union
->	O
def_name	pointer
,	O
vp	pointer
->	O
vers_name	pointer
)	O
;	O
pvname	function
(	O
def	union
->	O
def_name	pointer
,	O
vp	pointer
->	O
vers_num	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
", IPPROTO_%s)) {\n"	pointer
,	O
streq	function
(	O
transp	pointer
,	O
"udp"	pointer
)	O
?	O
"UDP"	pointer
:	O
"TCP"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\t(void)fprintf(stderr, \"unable to register (%s, %s, %s).\\n\");\n"	pointer
,	O
def	union
->	O
def_name	pointer
,	O
vp	pointer
->	O
vers_name	pointer
,	O
transp	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\texit(1);\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t}\n"	pointer
)	O
;	O
}	O
}	O
}	O
void	O
write_rest	function
(	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\tsvc_run();\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t(void)fprintf(stderr, \"svc_run returned\\n\");\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\texit(1);\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"}\n"	pointer
)	O
;	O
}	O
void	O
write_programs	function
(	O
storage	int
)	O
char	O
*	O
storage	int
;	O
{	O
list	struct
*	O
l	pointer
;	O
definition	struct
*	O
def	union
;	O
for	O
(	O
l	pointer
=	O
defined	pointer
;	O
l	pointer
!=	O
NULL	O
;	O
l	pointer
=	O
l	pointer
->	O
next	pointer
)	O
{	O
def	union
=	O
(	O
definition	struct
*	O
)	O
l	pointer
->	O
val	pointer
;	O
if	O
(	O
def	union
->	O
def_kind	enum
==	O
DEF_PROGRAM	int
)	O
{	O
write_program	function
(	O
def	union
,	O
storage	int
)	O
;	O
}	O
}	O
}	O
static	O
void	O
write_program	function
(	O
def	union
,	O
storage	int
)	O
definition	struct
*	O
def	union
;	O
char	O
*	O
storage	int
;	O
{	O
version_list	struct
*	O
vp	pointer
;	O
proc_list	struct
*	O
proc	pointer
;	O
int	O
filled	int
;	O
for	O
(	O
vp	pointer
=	O
def	union
->	O
def	union
.	O
pr	struct
.	O
versions	pointer
;	O
vp	pointer
!=	O
NULL	O
;	O
vp	pointer
=	O
vp	pointer
->	O
next	pointer
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\n"	pointer
)	O
;	O
if	O
(	O
storage	int
!=	O
NULL	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"%s "	pointer
,	O
storage	int
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"void\n"	pointer
)	O
;	O
pvname	function
(	O
def	union
->	O
def_name	pointer
,	O
vp	pointer
->	O
vers_num	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"(%s, %s)\n"	pointer
,	O
RQSTP	array
,	O
TRANSP	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"	struct svc_req *%s;\n"	pointer
,	O
RQSTP	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"	SVCXPRT *%s;\n"	pointer
,	O
TRANSP	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"{\n"	pointer
)	O
;	O
filled	int
=	O
0	int
;	O
f_print	O
(	O
fout	pointer
,	O
"\tunion {\n"	pointer
)	O
;	O
for	O
(	O
proc	pointer
=	O
vp	pointer
->	O
procs	pointer
;	O
proc	pointer
!=	O
NULL	O
;	O
proc	pointer
=	O
proc	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
streq	function
(	O
proc	pointer
->	O
arg_type	pointer
,	O
"void"	pointer
)	O
)	O
{	O
continue	O
;	O
}	O
filled	int
=	O
1	int
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\t"	pointer
)	O
;	O
ptype	function
(	O
proc	pointer
->	O
arg_prefix	pointer
,	O
proc	pointer
->	O
arg_type	pointer
,	O
0	int
)	O
;	O
pvname	function
(	O
proc	pointer
->	O
proc_name	pointer
,	O
vp	pointer
->	O
vers_num	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"_arg;\n"	pointer
)	O
;	O
}	O
if	O
(	O
!	O
filled	int
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\t\tint fill;\n"	pointer
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"\t} %s;\n"	pointer
,	O
ARG	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tchar *%s;\n"	pointer
,	O
RESULT	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tbool_t (*xdr_%s)(), (*xdr_%s)();\n"	pointer
,	O
ARG	array
,	O
RESULT	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tchar *(*%s)();\n"	pointer
,	O
ROUTINE	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tswitch (%s->rq_proc) {\n"	pointer
,	O
RQSTP	array
)	O
;	O
if	O
(	O
!	O
nullproc	function
(	O
vp	pointer
->	O
procs	pointer
)	O
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\tcase NULLPROC:\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\t(void)svc_sendreply(%s, xdr_void, (char *)NULL);\n"	pointer
,	O
TRANSP	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\treturn;\n\n"	pointer
)	O
;	O
}	O
for	O
(	O
proc	pointer
=	O
vp	pointer
->	O
procs	pointer
;	O
proc	pointer
!=	O
NULL	O
;	O
proc	pointer
=	O
proc	pointer
->	O
next	pointer
)	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\tcase %s:\n"	pointer
,	O
proc	pointer
->	O
proc_name	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\txdr_%s = xdr_%s;\n"	pointer
,	O
ARG	array
,	O
stringfix	function
(	O
proc	pointer
->	O
arg_type	pointer
)	O
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\txdr_%s = xdr_%s;\n"	pointer
,	O
RESULT	array
,	O
stringfix	function
(	O
proc	pointer
->	O
res_type	pointer
)	O
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\t%s = (char *(*)()) "	pointer
,	O
ROUTINE	array
)	O
;	O
pvname	function
(	O
proc	pointer
->	O
proc_name	pointer
,	O
vp	pointer
->	O
vers_num	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
";\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\tbreak;\n\n"	pointer
)	O
;	O
}	O
f_print	O
(	O
fout	pointer
,	O
"\tdefault:\n"	pointer
)	O
;	O
printerr	function
(	O
"noproc"	pointer
,	O
TRANSP	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\treturn;\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t}\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tbzero((char *)&%s, sizeof(%s));\n"	pointer
,	O
ARG	array
,	O
ARG	array
)	O
;	O
printif	function
(	O
"getargs"	pointer
,	O
TRANSP	array
,	O
"&"	pointer
,	O
ARG	array
)	O
;	O
printerr	function
(	O
"decode"	pointer
,	O
TRANSP	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\treturn;\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t}\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t%s = (*%s)(&%s, %s);\n"	pointer
,	O
RESULT	array
,	O
ROUTINE	array
,	O
ARG	array
,	O
RQSTP	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\tif (%s != NULL && !svc_sendreply(%s, xdr_%s, %s)) {\n"	pointer
,	O
RESULT	array
,	O
TRANSP	array
,	O
RESULT	array
,	O
RESULT	array
)	O
;	O
printerr	function
(	O
"systemerr"	pointer
,	O
TRANSP	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t}\n"	pointer
)	O
;	O
printif	function
(	O
"freeargs"	pointer
,	O
TRANSP	array
,	O
"&"	pointer
,	O
ARG	array
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\t(void)fprintf(stderr, \"unable to free arguments\\n\");\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t\texit(1);\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"\t}\n"	pointer
)	O
;	O
f_print	O
(	O
fout	pointer
,	O
"}\n\n"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
printerr	function
(	O
err	pointer
,	O
transp	pointer
)	O
char	O
*	O
err	pointer
;	O
char	O
*	O
transp	pointer
;	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\t\tsvcerr_%s(%s);\n"	pointer
,	O
err	pointer
,	O
transp	pointer
)	O
;	O
}	O
static	O
void	O
printif	function
(	O
proc	pointer
,	O
transp	pointer
,	O
prefix	pointer
,	O
arg	pointer
)	O
char	O
*	O
proc	pointer
;	O
char	O
*	O
transp	pointer
;	O
char	O
*	O
prefix	pointer
;	O
char	O
*	O
arg	pointer
;	O
{	O
f_print	O
(	O
fout	pointer
,	O
"\tif (!svc_%s(%s, xdr_%s, %s%s)) {\n"	pointer
,	O
proc	pointer
,	O
transp	pointer
,	O
arg	pointer
,	O
prefix	pointer
,	O
arg	pointer
)	O
;	O
}	O
int	O
nullproc	function
(	O
proc	pointer
)	O
proc_list	struct
*	O
proc	pointer
;	O
{	O
for	O
(	O
;	O
proc	pointer
!=	O
NULL	O
;	O
proc	pointer
=	O
proc	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
streq	function
(	O
proc	pointer
->	O
proc_num	pointer
,	O
"0"	pointer
)	O
)	O
{	O
return	O
(	O
1	int
)	O
;	O
}	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
