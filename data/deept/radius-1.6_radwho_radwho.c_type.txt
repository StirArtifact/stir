void	O
local_who	function
(	O
)	O
;	O
void	O
radius_who	function
(	O
)	O
;	O
void	O
print_header	function
(	O
)	O
;	O
int	O
want_rad_record	function
(	O
struct	O
radutmp	struct
*	O
rt	pointer
)	O
;	O
int	O
fingerd	int
;	O
int	O
secure	int
;	O
int	O
showlocal	int
;	O
int	O
display_header	int
=	O
1	int
;	O
int	O
showall	int
;	O
char	O
*	O
username	pointer
=	O
NULL	O
;	O
char	O
*	O
filename	pointer
=	O
NULL	O
;	O
char	O
*	O
eol	pointer
=	O
"\n"	pointer
;	O
static	O
struct	O
{	O
char	O
*	O
name	pointer
;	O
char	O
*	O
fmt	pointer
;	O
}	O
fmtdef	array
[	O
]	O
=	O
{	O
{	O
"default"	pointer
,	O
"(login 10 Login) (gecos 17 Name) (protocol 5 Proto) (nas-port 5 TTY) (time 9 When) (nas-address 9 From) (framed-address 16 Location)"	pointer
}	O
,	O
{	O
"sid"	pointer
,	O
"(login 10 Login) (session-id 17 SID) (protocol 5 Proto) (nas-port 5 TTY) (time 9 When) (nas-address 9 From) (framed-address 16 Location)"	pointer
}	O
,	O
{	O
"clid"	pointer
,	O
"(login 10 Login) (clid 17 CLID) (protocol 5 Proto) (nas-port 5 TTY) (time 9 When) (nas-address 9 From) (framed-address 16 Location)"	pointer
}	O
,	O
{	O
"long"	pointer
,	O
"(login 32 Login) (session-id 32 SID) (protocol 5 Proto) (nas-port 5 Port) (time 27 Date) (nas-address 32 NAS) (clid 17 CLID) (duration 7 Duration) (framed-address 16 Location) (realm 16 Realm)"	pointer
}	O
,	O
{	O
"gnu"	pointer
,	O
"User: (login)(newline)In real life: (gecos)(newline)Logged in: (time :format %c)(newline)NAS: (nas-address)(newline)Port: (nas-port)(newline)CLID: (clid)(newline)Protocol: (protocol)(newline)Session ID: (session-id)(newline)Uptime: (duration)(newline)Assigned IP: (framed-address)(newline)Realm: (realm)(newline)"	pointer
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
char	O
*	O
lookup_format	function
(	O
char	O
*	O
name	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
fmtdef	array
[	O
i	int
]	O
.	O
name	pointer
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
fmtdef	array
[	O
i	int
]	O
.	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
fmtdef	array
[	O
i	int
]	O
.	O
fmt	pointer
;	O
return	O
name	pointer
;	O
}	O
char	O
*	O
fmtspec	pointer
=	O
NULL	O
;	O
format_data_t	struct
*	O
form	pointer
;	O
const	O
char	O
*	O
argp_program_version	pointer
=	O
"radwho ("	pointer
PACKAGE	pointer
") "	pointer
VERSION	pointer
;	O
static	O
char	O
doc	pointer
[	O
]	O
=	O
N_	O
(	O
"display who is logged on by Radius"	pointer
)	O
;	O
static	O
struct	O
argp_option	struct
options	pointer
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"radwho specific switches:"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"all"	pointer
,	O
'A'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"print all entries, not only active ones"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"calling-id"	pointer
,	O
'c'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"display CLID in second column"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"date-format"	pointer
,	O
'D'	O
,	O
N_	O
(	O
"DATEFMT"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"change date representation format"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"empty"	pointer
,	O
'e'	O
,	O
N_	O
(	O
"STRING"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"print STRING instead of an empty column"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"file"	pointer
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"Use FILE instead of /var/log/radutmp"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"finger"	pointer
,	O
'F'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"act as a finger daemon"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"no-header"	pointer
,	O
'H'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"do not display header line"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"session-id"	pointer
,	O
'i'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"display session ID in the second column"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"ip-strip-domain"	pointer
,	O
'I'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"display hostnames without domain part"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"long"	pointer
,	O
'l'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Long output. All fields will be printed."	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"local-also"	pointer
,	O
'u'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"display also local users"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"no-resolve"	pointer
,	O
'n'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"do not resolve hostnames."	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"format"	pointer
,	O
'o'	O
,	O
N_	O
(	O
"FORMAT"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"change output format"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"secure"	pointer
,	O
's'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"secure mode: requires that the username be specified"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'A'	O
:	O
showall	int
++	O
;	O
break	O
;	O
case	O
'c'	O
:	O
fmtspec	pointer
=	O
lookup_format	function
(	O
"clid"	pointer
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
grad_printutmp_date_format	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'e'	O
:	O
grad_printutmp_empty_string	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'f'	O
:	O
filename	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'F'	O
:	O
fingerd	int
++	O
;	O
break	O
;	O
case	O
'H'	O
:	O
display_header	int
=	O
0	int
;	O
break	O
;	O
case	O
'i'	O
:	O
fmtspec	pointer
=	O
lookup_format	function
(	O
"sid"	pointer
)	O
;	O
break	O
;	O
case	O
'I'	O
:	O
break	O
;	O
case	O
'l'	O
:	O
fmtspec	pointer
=	O
lookup_format	function
(	O
"long"	pointer
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
grad_resolve_hostnames	int
=	O
0	int
;	O
break	O
;	O
case	O
'o'	O
:	O
fmtspec	pointer
=	O
lookup_format	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
secure	int
++	O
;	O
break	O
;	O
case	O
'u'	O
:	O
showlocal	int
++	O
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
options	pointer
,	O
parse_opt	function
,	O
NULL	O
,	O
doc	pointer
,	O
grad_common_argp_child	array
,	O
NULL	O
,	O
NULL	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
inbuf	array
[	O
128	int
]	O
;	O
char	O
*	O
path	pointer
;	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
int	O
index	function
;	O
grad_app_setup	function
(	O
)	O
;	O
if	O
(	O
grad_argp_parse	function
(	O
&	O
argp	struct
,	O
&	O
argc	int
,	O
&	O
argv	pointer
,	O
0	int
,	O
&	O
index	function
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
fmtspec	pointer
)	O
fmtspec	pointer
=	O
getenv	function
(	O
"RADWHO_FORMAT"	pointer
)	O
;	O
if	O
(	O
!	O
fmtspec	pointer
)	O
fmtspec	pointer
=	O
lookup_format	function
(	O
"default"	pointer
)	O
;	O
form	pointer
=	O
grad_utent_compile_form	function
(	O
fmtspec	pointer
)	O
;	O
if	O
(	O
!	O
form	pointer
)	O
exit	function
(	O
1	int
)	O
;	O
if	O
(	O
!	O
filename	pointer
)	O
filename	pointer
=	O
grad_utmp_file	pointer
;	O
grad_dict_init	function
(	O
)	O
;	O
path	pointer
=	O
grad_mkfilename	function
(	O
grad_config_dir	pointer
,	O
RADIUS_NASLIST	pointer
)	O
;	O
if	O
(	O
grad_nas_read_file	function
(	O
path	pointer
)	O
)	O
exit	function
(	O
1	int
)	O
;	O
grad_free	function
(	O
path	pointer
)	O
;	O
path	pointer
=	O
grad_mkfilename	function
(	O
grad_config_dir	pointer
,	O
RADIUS_REALMS	pointer
)	O
;	O
grad_read_realms	function
(	O
path	pointer
,	O
0	int
,	O
0	int
,	O
NULL	O
)	O
;	O
grad_free	function
(	O
path	pointer
)	O
;	O
if	O
(	O
strstr	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"fingerd"	pointer
)	O
)	O
fingerd	int
++	O
;	O
if	O
(	O
fingerd	int
)	O
{	O
eol	pointer
=	O
"\r\n"	pointer
;	O
fgets	function
(	O
inbuf	array
,	O
sizeof	O
(	O
inbuf	array
)	O
,	O
stdin	pointer
)	O
;	O
p	pointer
=	O
inbuf	array
;	O
while	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
)	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'/'	O
&&	O
*	O
(	O
p	pointer
+	O
1	int
)	O
)	O
p	pointer
+=	O
2	int
;	O
while	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
)	O
p	pointer
++	O
;	O
for	O
(	O
q	pointer
=	O
p	pointer
;	O
*	O
q	pointer
&&	O
*	O
q	pointer
!=	O
'\r'	O
&&	O
*	O
q	pointer
!=	O
'\n'	O
;	O
q	pointer
++	O
)	O
;	O
*	O
q	pointer
=	O
0	int
;	O
if	O
(	O
*	O
p	pointer
)	O
username	pointer
=	O
p	pointer
;	O
if	O
(	O
secure	int
&&	O
username	pointer
==	O
0	int
)	O
{	O
printf	function
(	O
_	O
(	O
"must provide username\n"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
showlocal	int
)	O
local_who	function
(	O
)	O
;	O
radius_who	function
(	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
tty_to_port	function
(	O
struct	O
radutmp	struct
*	O
rt	pointer
,	O
char	O
*	O
tty	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
tty	pointer
+	O
strlen	function
(	O
tty	pointer
)	O
-	O
1	int
;	O
while	O
(	O
p	pointer
>=	O
tty	pointer
&&	O
isdigit	function
(	O
*	O
p	pointer
)	O
)	O
p	pointer
--	O
;	O
rt	pointer
->	O
nas_port	int
=	O
atoi	function
(	O
p	pointer
+	O
1	int
)	O
;	O
rt	pointer
->	O
porttype	int
=	O
0	int
;	O
}	O
void	O
local_who	function
(	O
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
struct	O
utmp	struct
ut	pointer
;	O
struct	O
radutmp	struct
rt	pointer
;	O
if	O
(	O
(	O
fp	pointer
=	O
fopen	function
(	O
UTMP_FILE	O
,	O
"r"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"can't open file: %s"	pointer
)	O
,	O
UTMP_FILE	O
)	O
;	O
return	O
;	O
}	O
print_header	function
(	O
)	O
;	O
memset	function
(	O
&	O
rt	pointer
,	O
0	int
,	O
sizeof	O
(	O
rt	pointer
)	O
)	O
;	O
rt	pointer
.	O
nas_address	int
=	O
rt	pointer
.	O
framed_address	int
=	O
htonl	function
(	O
INADDR_LOOPBACK	O
)	O
;	O
while	O
(	O
fread	function
(	O
&	O
ut	pointer
,	O
sizeof	O
(	O
ut	pointer
)	O
,	O
1	int
,	O
fp	pointer
)	O
==	O
1	int
)	O
{	O
if	O
(	O
ut	pointer
.	O
ut_user	array
[	O
0	int
]	O
&&	O
ut	pointer
.	O
ut_line	array
[	O
0	int
]	O
&&	O
ut	pointer
.	O
ut_type	short
==	O
USER_PROCESS	int
)	O
{	O
rt	pointer
.	O
type	int
=	O
P_CONSOLE	O
;	O
strncpy	function
(	O
rt	pointer
.	O
login	array
,	O
ut	pointer
.	O
ut_name	O
,	O
RUT_NAMESIZE	int
)	O
;	O
strncpy	function
(	O
rt	pointer
.	O
orig_login	array
,	O
ut	pointer
.	O
ut_host	array
,	O
RUT_NAMESIZE	int
)	O
;	O
rt	pointer
.	O
time	struct
=	O
ut	pointer
.	O
ut_time	O
;	O
tty_to_port	function
(	O
&	O
rt	pointer
,	O
ut	pointer
.	O
ut_line	array
)	O
;	O
if	O
(	O
want_rad_record	function
(	O
&	O
rt	pointer
)	O
)	O
grad_utent_print	function
(	O
form	pointer
,	O
&	O
rt	pointer
,	O
1	int
)	O
;	O
}	O
}	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
void	O
radius_who	function
(	O
)	O
{	O
radut_file_t	pointer
file	pointer
;	O
struct	O
radutmp	struct
*	O
up	pointer
;	O
print_header	function
(	O
)	O
;	O
if	O
(	O
(	O
file	pointer
=	O
grad_ut_setent	function
(	O
filename	pointer
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
return	O
;	O
while	O
(	O
up	pointer
=	O
grad_ut_getent	function
(	O
file	pointer
)	O
)	O
{	O
if	O
(	O
up	pointer
->	O
type	int
==	O
P_ACCT_DISABLED	int
)	O
printf	function
(	O
_	O
(	O
"System accounting is disabled\n"	pointer
)	O
)	O
;	O
else	O
if	O
(	O
want_rad_record	function
(	O
up	pointer
)	O
)	O
grad_utent_print	function
(	O
form	pointer
,	O
up	pointer
,	O
1	int
)	O
;	O
}	O
grad_ut_endent	function
(	O
file	pointer
)	O
;	O
}	O
void	O
print_header	function
(	O
)	O
{	O
if	O
(	O
display_header	int
)	O
{	O
grad_utent_print_header	function
(	O
form	pointer
)	O
;	O
display_header	int
=	O
0	int
;	O
}	O
}	O
int	O
want_rad_record	function
(	O
struct	O
radutmp	struct
*	O
rt	pointer
)	O
{	O
if	O
(	O
(	O
username	pointer
&&	O
strcmp	function
(	O
rt	pointer
->	O
login	array
,	O
username	pointer
)	O
)	O
||	O
rt	pointer
->	O
type	int
==	O
P_ACCT_ENABLED	int
)	O
return	O
0	int
;	O
switch	O
(	O
showall	int
)	O
{	O
case	O
0	int
:	O
return	O
rt	pointer
->	O
type	int
!=	O
P_IDLE	int
;	O
case	O
1	int
:	O
return	O
rt	pointer
->	O
login	array
[	O
0	int
]	O
!=	O
0	int
;	O
case	O
2	int
:	O
default	O
:	O
return	O
(	O
rt	pointer
->	O
type	int
==	O
P_IDLE	int
&&	O
rt	pointer
->	O
login	array
[	O
0	int
]	O
!=	O
0	int
)	O
;	O
}	O
}	O
