unsigned	O
short	O
*	O
_pl_g_controlify	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
char	O
*	O
src	pointer
)	O
{	O
unsigned	O
short	O
*	O
dest	pointer
;	O
unsigned	O
char	O
c	char
,	O
d	char
;	O
unsigned	O
char	O
esc	array
[	O
3	int
]	O
;	O
int	O
j	int
=	O
0	int
;	O
int	O
raw_fontnum	int
,	O
raw_symbol_fontnum	int
;	O
int	O
previous_raw_fontnum	int
;	O
unsigned	O
short	O
fontword	short
,	O
symbol_fontword	short
;	O
dest	pointer
=	O
(	O
unsigned	O
short	O
*	O
)	O
_pl_xmalloc	function
(	O
(	O
6	int
*	O
strlen	function
(	O
(	O
char	O
*	O
)	O
src	pointer
)	O
+	O
1	int
)	O
*	O
sizeof	O
(	O
unsigned	O
short	O
)	O
)	O
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
)	O
{	O
case	O
PL_F_POSTSCRIPT	int
:	O
default	O
:	O
raw_fontnum	int
=	O
_pl_g_ps_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
raw_symbol_fontnum	int
=	O
_pl_g_ps_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
0	int
]	O
;	O
break	O
;	O
case	O
PL_F_PCL	int
:	O
raw_fontnum	int
=	O
_pl_g_pcl_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
raw_symbol_fontnum	int
=	O
_pl_g_pcl_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
0	int
]	O
;	O
break	O
;	O
case	O
PL_F_STICK	int
:	O
raw_fontnum	int
=	O
_pl_g_stick_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
raw_symbol_fontnum	int
=	O
_pl_g_stick_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
0	int
]	O
;	O
break	O
;	O
case	O
PL_F_HERSHEY	int
:	O
raw_fontnum	int
=	O
_pl_g_hershey_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
raw_symbol_fontnum	int
=	O
_pl_g_hershey_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
0	int
]	O
;	O
break	O
;	O
case	O
PL_F_OTHER	int
:	O
raw_fontnum	int
=	O
1	int
;	O
raw_symbol_fontnum	int
=	O
0	int
;	O
break	O
;	O
}	O
fontword	short
=	O
(	O
(	O
unsigned	O
short	O
)	O
raw_fontnum	int
)	O
<<	O
FONT_SHIFT	int
;	O
symbol_fontword	short
=	O
(	O
(	O
unsigned	O
short	O
)	O
raw_symbol_fontnum	int
)	O
<<	O
FONT_SHIFT	int
;	O
previous_raw_fontnum	int
=	O
raw_fontnum	int
;	O
while	O
(	O
*	O
src	pointer
!=	O
(	O
unsigned	O
char	O
)	O
'\0'	O
)	O
{	O
if	O
(	O
(	O
raw_fontnum	int
==	O
PL_HERSHEY_EUC	int
)	O
&&	O
(	O
*	O
src	pointer
&	O
0x80	int
)	O
&&	O
(	O
*	O
(	O
src	pointer
+	O
1	int
)	O
&	O
0x80	int
)	O
)	O
{	O
unsigned	O
char	O
jis_row	char
=	O
*	O
src	pointer
&	O
~	O
(	O
0x80	int
)	O
;	O
unsigned	O
char	O
jis_col	char
=	O
*	O
(	O
src	pointer
+	O
1	int
)	O
&	O
~	O
(	O
0x80	int
)	O
;	O
if	O
(	O
GOOD_JIS_INDEX	O
(	O
jis_row	char
,	O
jis_col	char
)	O
)	O
{	O
int	O
jis_glyphindex	int
=	O
256	int
*	O
jis_row	char
+	O
jis_col	char
;	O
if	O
(	O
jis_glyphindex	int
>=	O
BEGINNING_OF_KANJI	int
)	O
{	O
const	O
struct	O
kanjipair	struct
*	O
kanji	pointer
=	O
_builtin_kanji_glyphs	array
;	O
bool	enum
matched	enum
=	O
false	int
;	O
while	O
(	O
kanji	pointer
->	O
jis	int
!=	O
0	int
)	O
{	O
if	O
(	O
jis_glyphindex	int
==	O
kanji	pointer
->	O
jis	int
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
kanji	pointer
++	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
RAW_ORIENTAL_HERSHEY_GLYPH	int
|	O
(	O
kanji	pointer
->	O
nelson	int
)	O
;	O
src	pointer
+=	O
2	int
;	O
continue	O
;	O
}	O
else	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
RAW_HERSHEY_GLYPH	int
|	O
UNDE	int
;	O
src	pointer
+=	O
2	int
;	O
continue	O
;	O
}	O
}	O
else	O
{	O
const	O
struct	O
jis_entry	struct
*	O
char_mapping	pointer
=	O
_builtin_jis_chars	array
;	O
bool	enum
matched	enum
=	O
false	int
;	O
while	O
(	O
char_mapping	pointer
->	O
jis	int
!=	O
0	int
)	O
{	O
if	O
(	O
jis_glyphindex	int
==	O
char_mapping	pointer
->	O
jis	int
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
char_mapping	pointer
++	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
int	O
fontnum	int
=	O
char_mapping	pointer
->	O
font	int
;	O
unsigned	O
short	O
charnum	short
=	O
char_mapping	pointer
->	O
charnum	short
;	O
if	O
(	O
charnum	short
&	O
RAW_HERSHEY_GLYPH	int
)	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
RAW_HERSHEY_GLYPH	int
|	O
charnum	short
;	O
else	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
(	O
(	O
unsigned	O
short	O
)	O
fontnum	int
)	O
<<	O
FONT_SHIFT	int
)	O
|	O
charnum	short
;	O
src	pointer
+=	O
2	int
;	O
continue	O
;	O
}	O
else	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
RAW_HERSHEY_GLYPH	int
|	O
UNDE	int
;	O
src	pointer
+=	O
2	int
;	O
continue	O
;	O
}	O
}	O
}	O
else	O
{	O
src	pointer
+=	O
2	int
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
)	O
{	O
int	O
i	int
;	O
bool	enum
matched	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_LIGATURES	int
;	O
i	int
++	O
)	O
if	O
(	O
(	O
_ligature_tbl	array
[	O
i	int
]	O
.	O
font	int
==	O
raw_fontnum	int
)	O
&&	O
(	O
strncmp	function
(	O
(	O
char	O
*	O
)	O
src	pointer
,	O
_ligature_tbl	array
[	O
i	int
]	O
.	O
from	char
,	O
strlen	function
(	O
_ligature_tbl	array
[	O
i	int
]	O
.	O
from	char
)	O
)	O
==	O
0	int
)	O
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
_ligature_tbl	array
[	O
i	int
]	O
.	O
byte	char
;	O
src	pointer
+=	O
strlen	function
(	O
_ligature_tbl	array
[	O
i	int
]	O
.	O
from	char
)	O
;	O
continue	O
;	O
}	O
}	O
c	char
=	O
*	O
(	O
src	pointer
++	O
)	O
;	O
if	O
(	O
c	char
!=	O
(	O
unsigned	O
char	O
)	O
'\\'	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
&&	O
_pl_g_hershey_font_info	array
[	O
raw_fontnum	int
]	O
.	O
iso8859_1	enum
)	O
{	O
int	O
i	int
;	O
bool	enum
matched	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_RAISED_CHARS	int
;	O
i	int
++	O
)	O
if	O
(	O
c	char
==	O
_raised_char_tbl	array
[	O
i	int
]	O
.	O
from	char
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
(	O
CONTROL_CODE	int
|	O
C_BEGIN_SUPERSCRIPT	int
)	O
;	O
if	O
(	O
_raised_char_tbl	array
[	O
i	int
]	O
.	O
underscored	enum
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
(	O
CONTROL_CODE	int
|	O
C_PUSH_LOCATION	int
)	O
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
_raised_char_tbl	array
[	O
i	int
]	O
.	O
to	char
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
(	O
CONTROL_CODE	int
|	O
C_POP_LOCATION	int
)	O
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
symbol_fontword	short
|	O
(	O
unsigned	O
short	O
)	O
VECTOR_SYMBOL_FONT_UNDERSCORE	int
;	O
}	O
else	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
_raised_char_tbl	array
[	O
i	int
]	O
.	O
to	char
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
(	O
CONTROL_CODE	int
|	O
C_END_SUPERSCRIPT	int
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_DELIGATURED_CHARS	int
;	O
i	int
++	O
)	O
if	O
(	O
c	char
==	O
_deligature_char_tbl	array
[	O
i	int
]	O
.	O
from	char
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
if	O
(	O
_deligature_char_tbl	array
[	O
i	int
]	O
.	O
except_font	int
!=	O
raw_fontnum	int
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
_deligature_char_tbl	array
[	O
i	int
]	O
.	O
to	char
[	O
0	int
]	O
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
_deligature_char_tbl	array
[	O
i	int
]	O
.	O
to	char
[	O
1	int
]	O
;	O
continue	O
;	O
}	O
}	O
}	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
c	char
;	O
continue	O
;	O
}	O
else	O
{	O
c	char
=	O
*	O
(	O
src	pointer
++	O
)	O
;	O
if	O
(	O
c	char
==	O
(	O
unsigned	O
char	O
)	O
'\0'	O
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
'\\'	O
;	O
break	O
;	O
}	O
if	O
(	O
c	char
==	O
(	O
unsigned	O
char	O
)	O
'\\'	O
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
'\\'	O
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
'\\'	O
;	O
continue	O
;	O
}	O
d	char
=	O
*	O
(	O
src	pointer
++	O
)	O
;	O
if	O
(	O
d	char
==	O
(	O
unsigned	O
char	O
)	O
'\0'	O
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
'\\'	O
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
c	char
;	O
break	O
;	O
}	O
esc	array
[	O
0	int
]	O
=	O
c	char
;	O
esc	array
[	O
1	int
]	O
=	O
d	char
;	O
esc	array
[	O
2	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
'\0'	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
&&	O
esc	array
[	O
0	int
]	O
==	O
'#'	O
&&	O
esc	array
[	O
1	int
]	O
==	O
'H'	O
&&	O
src	pointer
[	O
0	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
0	int
]	O
<=	O
'9'	O
&&	O
src	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
1	int
]	O
<=	O
'9'	O
&&	O
src	pointer
[	O
2	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
2	int
]	O
<=	O
'9'	O
&&	O
src	pointer
[	O
3	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
3	int
]	O
<=	O
'9'	O
)	O
{	O
int	O
glyphindex	int
;	O
glyphindex	int
=	O
(	O
src	pointer
[	O
3	int
]	O
-	O
'0'	O
)	O
+	O
10	int
*	O
(	O
src	pointer
[	O
2	int
]	O
-	O
'0'	O
)	O
+	O
100	int
*	O
(	O
src	pointer
[	O
1	int
]	O
-	O
'0'	O
)	O
+	O
1000	int
*	O
(	O
src	pointer
[	O
0	int
]	O
-	O
'0'	O
)	O
;	O
if	O
(	O
glyphindex	int
<	O
NUM_OCCIDENTAL_HERSHEY_GLYPHS	int
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
RAW_HERSHEY_GLYPH	int
|	O
glyphindex	int
;	O
src	pointer
+=	O
4	int
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
&&	O
esc	array
[	O
0	int
]	O
==	O
'#'	O
&&	O
esc	array
[	O
1	int
]	O
==	O
'N'	O
&&	O
src	pointer
[	O
0	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
0	int
]	O
<=	O
'9'	O
&&	O
src	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
1	int
]	O
<=	O
'9'	O
&&	O
src	pointer
[	O
2	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
2	int
]	O
<=	O
'9'	O
&&	O
src	pointer
[	O
3	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
3	int
]	O
<=	O
'9'	O
)	O
{	O
int	O
glyphindex	int
;	O
glyphindex	int
=	O
(	O
src	pointer
[	O
3	int
]	O
-	O
'0'	O
)	O
+	O
10	int
*	O
(	O
src	pointer
[	O
2	int
]	O
-	O
'0'	O
)	O
+	O
100	int
*	O
(	O
src	pointer
[	O
1	int
]	O
-	O
'0'	O
)	O
+	O
1000	int
*	O
(	O
src	pointer
[	O
0	int
]	O
-	O
'0'	O
)	O
;	O
if	O
(	O
glyphindex	int
<	O
NUM_ORIENTAL_HERSHEY_GLYPHS	int
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
RAW_ORIENTAL_HERSHEY_GLYPH	int
|	O
glyphindex	int
;	O
src	pointer
+=	O
4	int
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
&&	O
esc	array
[	O
0	int
]	O
==	O
'#'	O
&&	O
esc	array
[	O
1	int
]	O
==	O
'J'	O
&&	O
(	O
(	O
src	pointer
[	O
0	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
0	int
]	O
<=	O
'9'	O
)	O
||	O
(	O
src	pointer
[	O
0	int
]	O
>=	O
'a'	O
&&	O
src	pointer
[	O
0	int
]	O
<=	O
'f'	O
)	O
||	O
(	O
src	pointer
[	O
0	int
]	O
>=	O
'A'	O
&&	O
src	pointer
[	O
0	int
]	O
<=	O
'F'	O
)	O
)	O
&&	O
(	O
(	O
src	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
1	int
]	O
<=	O
'9'	O
)	O
||	O
(	O
src	pointer
[	O
1	int
]	O
>=	O
'a'	O
&&	O
src	pointer
[	O
1	int
]	O
<=	O
'f'	O
)	O
||	O
(	O
src	pointer
[	O
1	int
]	O
>=	O
'A'	O
&&	O
src	pointer
[	O
1	int
]	O
<=	O
'F'	O
)	O
)	O
&&	O
(	O
(	O
src	pointer
[	O
2	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
2	int
]	O
<=	O
'9'	O
)	O
||	O
(	O
src	pointer
[	O
2	int
]	O
>=	O
'a'	O
&&	O
src	pointer
[	O
2	int
]	O
<=	O
'f'	O
)	O
||	O
(	O
src	pointer
[	O
2	int
]	O
>=	O
'A'	O
&&	O
src	pointer
[	O
2	int
]	O
<=	O
'F'	O
)	O
)	O
&&	O
(	O
(	O
src	pointer
[	O
3	int
]	O
>=	O
'0'	O
&&	O
src	pointer
[	O
3	int
]	O
<=	O
'9'	O
)	O
||	O
(	O
src	pointer
[	O
3	int
]	O
>=	O
'a'	O
&&	O
src	pointer
[	O
3	int
]	O
<=	O
'f'	O
)	O
||	O
(	O
src	pointer
[	O
3	int
]	O
>=	O
'A'	O
&&	O
src	pointer
[	O
3	int
]	O
<=	O
'F'	O
)	O
)	O
)	O
{	O
int	O
jis_glyphindex	int
;	O
int	O
i	int
,	O
hexnum	array
[	O
4	int
]	O
;	O
int	O
jis_row	char
,	O
jis_col	char
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
if	O
(	O
src	pointer
[	O
i	int
]	O
>=	O
'a'	O
&&	O
src	pointer
[	O
i	int
]	O
<=	O
'f'	O
)	O
hexnum	array
[	O
i	int
]	O
=	O
10	int
+	O
src	pointer
[	O
i	int
]	O
-	O
'a'	O
;	O
else	O
if	O
(	O
src	pointer
[	O
i	int
]	O
>=	O
'A'	O
&&	O
src	pointer
[	O
i	int
]	O
<=	O
'F'	O
)	O
hexnum	array
[	O
i	int
]	O
=	O
10	int
+	O
src	pointer
[	O
i	int
]	O
-	O
'A'	O
;	O
else	O
hexnum	array
[	O
i	int
]	O
=	O
src	pointer
[	O
i	int
]	O
-	O
'0'	O
;	O
jis_glyphindex	int
=	O
(	O
hexnum	array
[	O
3	int
]	O
+	O
16	int
*	O
hexnum	array
[	O
2	int
]	O
+	O
256	int
*	O
hexnum	array
[	O
1	int
]	O
+	O
4096	int
*	O
hexnum	array
[	O
0	int
]	O
)	O
;	O
jis_row	char
=	O
hexnum	array
[	O
1	int
]	O
+	O
16	int
*	O
hexnum	array
[	O
0	int
]	O
;	O
jis_col	char
=	O
hexnum	array
[	O
3	int
]	O
+	O
16	int
*	O
hexnum	array
[	O
2	int
]	O
;	O
if	O
(	O
GOOD_JIS_INDEX	O
(	O
jis_row	char
,	O
jis_col	char
)	O
)	O
{	O
if	O
(	O
jis_glyphindex	int
>=	O
BEGINNING_OF_KANJI	int
)	O
{	O
const	O
struct	O
kanjipair	struct
*	O
kanji	pointer
=	O
_builtin_kanji_glyphs	array
;	O
bool	enum
matched	enum
=	O
false	int
;	O
while	O
(	O
kanji	pointer
->	O
jis	int
!=	O
0	int
)	O
{	O
if	O
(	O
jis_glyphindex	int
==	O
kanji	pointer
->	O
jis	int
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
kanji	pointer
++	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
RAW_ORIENTAL_HERSHEY_GLYPH	int
|	O
(	O
kanji	pointer
->	O
nelson	int
)	O
;	O
src	pointer
+=	O
4	int
;	O
continue	O
;	O
}	O
else	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
RAW_HERSHEY_GLYPH	int
|	O
UNDE	int
;	O
src	pointer
+=	O
4	int
;	O
continue	O
;	O
}	O
}	O
else	O
{	O
const	O
struct	O
jis_entry	struct
*	O
char_mapping	pointer
=	O
_builtin_jis_chars	array
;	O
bool	enum
matched	enum
=	O
false	int
;	O
while	O
(	O
char_mapping	pointer
->	O
jis	int
!=	O
0	int
)	O
{	O
if	O
(	O
jis_glyphindex	int
==	O
char_mapping	pointer
->	O
jis	int
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
char_mapping	pointer
++	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
int	O
fontnum	int
=	O
char_mapping	pointer
->	O
font	int
;	O
unsigned	O
short	O
charnum	short
=	O
char_mapping	pointer
->	O
charnum	short
;	O
if	O
(	O
charnum	short
&	O
RAW_HERSHEY_GLYPH	int
)	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
RAW_HERSHEY_GLYPH	int
|	O
charnum	short
;	O
else	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
(	O
(	O
unsigned	O
short	O
)	O
fontnum	int
)	O
<<	O
FONT_SHIFT	int
)	O
|	O
charnum	short
;	O
src	pointer
+=	O
4	int
;	O
continue	O
;	O
}	O
else	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
RAW_HERSHEY_GLYPH	int
|	O
UNDE	int
;	O
src	pointer
+=	O
4	int
;	O
continue	O
;	O
}	O
}	O
}	O
}	O
{	O
int	O
i	int
;	O
bool	enum
matched	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_CONTROLS	int
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
(	O
char	O
*	O
)	O
esc	array
,	O
_control_tbl	array
[	O
i	int
]	O
)	O
==	O
0	int
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
CONTROL_CODE	int
|	O
i	int
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
&&	O
_pl_g_hershey_font_info	array
[	O
raw_fontnum	int
]	O
.	O
iso8859_1	enum
)	O
{	O
int	O
i	int
;	O
bool	enum
matched	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_DELIGATURED_ESCAPES	int
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
(	O
char	O
*	O
)	O
esc	array
,	O
_deligature_escape_tbl	array
[	O
i	int
]	O
.	O
from	char
)	O
==	O
0	int
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
if	O
(	O
_deligature_escape_tbl	array
[	O
i	int
]	O
.	O
except_font	int
!=	O
raw_fontnum	int
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
_deligature_escape_tbl	array
[	O
i	int
]	O
.	O
to	char
[	O
0	int
]	O
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
_deligature_escape_tbl	array
[	O
i	int
]	O
.	O
to	char
[	O
1	int
]	O
;	O
continue	O
;	O
}	O
}	O
}	O
if	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_POSTSCRIPT	int
&&	O
_pl_g_ps_font_info	array
[	O
raw_fontnum	int
]	O
.	O
iso8859_1	enum
)	O
||	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
&&	O
_pl_g_hershey_font_info	array
[	O
raw_fontnum	int
]	O
.	O
iso8859_1	enum
)	O
||	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_PCL	int
&&	O
_pl_g_pcl_font_info	array
[	O
raw_fontnum	int
]	O
.	O
iso8859_1	enum
)	O
||	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_STICK	int
&&	O
_pl_g_stick_font_info	array
[	O
raw_fontnum	int
]	O
.	O
iso8859_1	enum
)	O
||	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_OTHER	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_is_iso8859_1	enum
&&	O
raw_fontnum	int
==	O
1	int
)	O
)	O
{	O
int	O
i	int
;	O
bool	enum
matched	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_ISO_ESCAPES	int
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
(	O
char	O
*	O
)	O
esc	array
,	O
_iso_escape_tbl	array
[	O
i	int
]	O
.	O
string	pointer
)	O
==	O
0	int
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
)	O
{	O
int	O
k	int
;	O
bool	enum
matched2	enum
=	O
false	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
NUM_RAISED_CHARS	int
;	O
k	int
++	O
)	O
if	O
(	O
_iso_escape_tbl	array
[	O
i	int
]	O
.	O
byte	char
==	O
_raised_char_tbl	array
[	O
k	int
]	O
.	O
from	char
)	O
{	O
matched2	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
matched2	enum
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
(	O
CONTROL_CODE	int
|	O
C_BEGIN_SUPERSCRIPT	int
)	O
;	O
if	O
(	O
_raised_char_tbl	array
[	O
k	int
]	O
.	O
underscored	enum
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
(	O
CONTROL_CODE	int
|	O
C_PUSH_LOCATION	int
)	O
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
_raised_char_tbl	array
[	O
k	int
]	O
.	O
to	char
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
(	O
CONTROL_CODE	int
|	O
C_POP_LOCATION	int
)	O
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
symbol_fontword	short
|	O
(	O
unsigned	O
short	O
)	O
VECTOR_SYMBOL_FONT_UNDERSCORE	int
;	O
}	O
else	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
_raised_char_tbl	array
[	O
k	int
]	O
.	O
to	char
;	O
}	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
(	O
CONTROL_CODE	int
|	O
C_END_SUPERSCRIPT	int
)	O
;	O
continue	O
;	O
}	O
}	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
(	O
_iso_escape_tbl	array
[	O
i	int
]	O
.	O
byte	char
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
)	O
{	O
int	O
i	int
;	O
bool	enum
matched	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_SPECIAL_ESCAPES	int
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
(	O
char	O
*	O
)	O
esc	array
,	O
_special_escape_tbl	array
[	O
i	int
]	O
.	O
string	pointer
)	O
==	O
0	int
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
if	O
(	O
_special_escape_tbl	array
[	O
i	int
]	O
.	O
byte	char
==	O
FINAL_LOWERCASE_S	int
)	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
(	O
_special_escape_tbl	array
[	O
i	int
]	O
.	O
byte	char
)	O
;	O
else	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
symbol_fontword	short
|	O
(	O
unsigned	O
short	O
)	O
(	O
_special_escape_tbl	array
[	O
i	int
]	O
.	O
byte	char
)	O
;	O
continue	O
;	O
}	O
}	O
{	O
int	O
i	int
;	O
bool	enum
matched	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_SYMBOL_ESCAPES	int
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
_symbol_escape_tbl	array
[	O
i	int
]	O
.	O
string	pointer
,	O
"NO_ABBREV"	pointer
)	O
!=	O
0	int
&&	O
strcmp	function
(	O
(	O
char	O
*	O
)	O
esc	array
,	O
_symbol_escape_tbl	array
[	O
i	int
]	O
.	O
string	pointer
)	O
==	O
0	int
)	O
{	O
matched	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
matched	enum
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
symbol_fontword	short
|	O
(	O
unsigned	O
short	O
)	O
(	O
_symbol_escape_tbl	array
[	O
i	int
]	O
.	O
byte	char
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
strcmp	function
(	O
(	O
char	O
*	O
)	O
esc	array
,	O
"rn"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_POSTSCRIPT	int
||	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_PCL	int
)	O
{	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
(	O
CONTROL_CODE	int
|	O
C_LEFT_RADICAL_SHIFT	int
)	O
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
symbol_fontword	short
|	O
(	O
unsigned	O
short	O
)	O
RADICALEX	int
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
(	O
CONTROL_CODE	int
|	O
C_RIGHT_RADICAL_SHIFT	int
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
esc	array
[	O
0	int
]	O
==	O
'f'	O
&&	O
(	O
(	O
esc	array
[	O
1	int
]	O
>=	O
'0'	O
&&	O
esc	array
[	O
1	int
]	O
<=	O
'9'	O
)	O
||	O
esc	array
[	O
1	int
]	O
==	O
'P'	O
||	O
esc	array
[	O
1	int
]	O
==	O
'R'	O
||	O
esc	array
[	O
1	int
]	O
==	O
'I'	O
||	O
esc	array
[	O
1	int
]	O
==	O
'B'	O
)	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_OTHER	int
&&	O
(	O
(	O
esc	array
[	O
1	int
]	O
>=	O
'2'	O
&&	O
esc	array
[	O
1	int
]	O
<=	O
'9'	O
)	O
||	O
esc	array
[	O
1	int
]	O
==	O
'I'	O
||	O
esc	array
[	O
1	int
]	O
==	O
'B'	O
)	O
)	O
esc	array
[	O
1	int
]	O
=	O
'1'	O
;	O
if	O
(	O
esc	array
[	O
1	int
]	O
==	O
'R'	O
)	O
esc	array
[	O
1	int
]	O
=	O
'1'	O
;	O
else	O
if	O
(	O
esc	array
[	O
1	int
]	O
==	O
'I'	O
)	O
esc	array
[	O
1	int
]	O
=	O
'2'	O
;	O
else	O
if	O
(	O
esc	array
[	O
1	int
]	O
==	O
'B'	O
)	O
esc	array
[	O
1	int
]	O
=	O
'3'	O
;	O
if	O
(	O
esc	array
[	O
1	int
]	O
==	O
'P'	O
)	O
raw_fontnum	int
=	O
previous_raw_fontnum	int
;	O
else	O
{	O
int	O
new_font_index	int
=	O
esc	array
[	O
1	int
]	O
-	O
'0'	O
;	O
previous_raw_fontnum	int
=	O
raw_fontnum	int
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
)	O
{	O
case	O
PL_F_HERSHEY	int
:	O
if	O
(	O
(	O
new_font_index	int
>=	O
_pl_g_hershey_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
numfonts	int
)	O
||	O
new_font_index	int
<	O
0	int
)	O
new_font_index	int
=	O
1	int
;	O
raw_fontnum	int
=	O
_pl_g_hershey_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
new_font_index	int
]	O
;	O
break	O
;	O
case	O
PL_F_PCL	int
:	O
if	O
(	O
(	O
new_font_index	int
>=	O
_pl_g_pcl_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
numfonts	int
)	O
||	O
new_font_index	int
<	O
0	int
)	O
new_font_index	int
=	O
1	int
;	O
raw_fontnum	int
=	O
_pl_g_pcl_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
new_font_index	int
]	O
;	O
break	O
;	O
case	O
PL_F_STICK	int
:	O
if	O
(	O
(	O
new_font_index	int
>=	O
_pl_g_stick_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
numfonts	int
)	O
||	O
new_font_index	int
<	O
0	int
)	O
new_font_index	int
=	O
1	int
;	O
raw_fontnum	int
=	O
_pl_g_stick_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
new_font_index	int
]	O
;	O
break	O
;	O
case	O
PL_F_POSTSCRIPT	int
:	O
default	O
:	O
if	O
(	O
(	O
new_font_index	int
>=	O
_pl_g_ps_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
numfonts	int
)	O
||	O
new_font_index	int
<	O
0	int
)	O
new_font_index	int
=	O
1	int
;	O
raw_fontnum	int
=	O
_pl_g_ps_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
[	O
new_font_index	int
]	O
;	O
break	O
;	O
case	O
PL_F_OTHER	int
:	O
if	O
(	O
new_font_index	int
!=	O
0	int
&&	O
new_font_index	int
!=	O
1	int
)	O
new_font_index	int
=	O
1	int
;	O
raw_fontnum	int
=	O
new_font_index	int
;	O
break	O
;	O
}	O
}	O
fontword	short
=	O
(	O
(	O
unsigned	O
short	O
)	O
raw_fontnum	int
)	O
<<	O
FONT_SHIFT	int
;	O
continue	O
;	O
}	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
'\\'	O
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
c	char
;	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
fontword	short
|	O
(	O
unsigned	O
short	O
)	O
d	char
;	O
}	O
}	O
dest	pointer
[	O
j	int
]	O
=	O
(	O
unsigned	O
short	O
)	O
'\0'	O
;	O
return	O
dest	pointer
;	O
}	O
int	O
_codestring_len	function
(	O
const	O
unsigned	O
short	O
*	O
codestring	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
*	O
codestring	pointer
)	O
{	O
i	int
++	O
;	O
codestring	pointer
++	O
;	O
}	O
return	O
i	int
;	O
}	O
