static	O
void	O
print_ed_hunk	function
(	O
struct	O
change	struct
*	O
)	O
;	O
static	O
void	O
print_rcs_hunk	function
(	O
struct	O
change	struct
*	O
)	O
;	O
static	O
void	O
pr_forward_ed_hunk	function
(	O
struct	O
change	struct
*	O
)	O
;	O
void	O
print_ed_script	function
(	O
struct	O
change	struct
*	O
script	pointer
)	O
{	O
print_script	function
(	O
script	pointer
,	O
find_reverse_change	function
,	O
print_ed_hunk	function
)	O
;	O
}	O
static	O
void	O
print_ed_hunk	function
(	O
struct	O
change	struct
*	O
hunk	pointer
)	O
{	O
lin	long
f0	long
,	O
l0	long
,	O
f1	long
,	O
l1	long
;	O
enum	O
changes	enum
changes	enum
;	O
changes	enum
=	O
analyze_hunk	function
(	O
hunk	pointer
,	O
&	O
f0	long
,	O
&	O
l0	long
,	O
&	O
f1	long
,	O
&	O
l1	long
)	O
;	O
if	O
(	O
!	O
changes	enum
)	O
return	O
;	O
begin_output	function
(	O
)	O
;	O
print_number_range	function
(	O
','	O
,	O
&	O
files	array
[	O
0	int
]	O
,	O
f0	long
,	O
l0	long
)	O
;	O
fputc	function
(	O
change_letter	array
[	O
changes	enum
]	O
,	O
outfile	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
outfile	pointer
)	O
;	O
if	O
(	O
changes	enum
!=	O
OLD	int
)	O
{	O
lin	long
i	long
;	O
bool	bool
insert_mode	bool
=	O
true	int
;	O
for	O
(	O
i	long
=	O
f1	long
;	O
i	long
<=	O
l1	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
!	O
insert_mode	bool
)	O
{	O
fputs	function
(	O
"a\n"	pointer
,	O
outfile	pointer
)	O
;	O
insert_mode	bool
=	O
true	int
;	O
}	O
if	O
(	O
files	array
[	O
1	int
]	O
.	O
linbuf	pointer
[	O
i	long
]	O
[	O
0	int
]	O
==	O
'.'	O
&&	O
files	array
[	O
1	int
]	O
.	O
linbuf	pointer
[	O
i	long
]	O
[	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
fputs	function
(	O
"..\n.\ns/.//\n"	pointer
,	O
outfile	pointer
)	O
;	O
insert_mode	bool
=	O
false	int
;	O
}	O
else	O
print_1_line	function
(	O
""	pointer
,	O
&	O
files	array
[	O
1	int
]	O
.	O
linbuf	pointer
[	O
i	long
]	O
)	O
;	O
}	O
if	O
(	O
insert_mode	bool
)	O
fputs	function
(	O
".\n"	pointer
,	O
outfile	pointer
)	O
;	O
}	O
}	O
void	O
pr_forward_ed_script	function
(	O
struct	O
change	struct
*	O
script	pointer
)	O
{	O
print_script	function
(	O
script	pointer
,	O
find_change	function
,	O
pr_forward_ed_hunk	function
)	O
;	O
}	O
static	O
void	O
pr_forward_ed_hunk	function
(	O
struct	O
change	struct
*	O
hunk	pointer
)	O
{	O
lin	long
i	long
,	O
f0	long
,	O
l0	long
,	O
f1	long
,	O
l1	long
;	O
enum	O
changes	enum
changes	enum
=	O
analyze_hunk	function
(	O
hunk	pointer
,	O
&	O
f0	long
,	O
&	O
l0	long
,	O
&	O
f1	long
,	O
&	O
l1	long
)	O
;	O
if	O
(	O
!	O
changes	enum
)	O
return	O
;	O
begin_output	function
(	O
)	O
;	O
fputc	function
(	O
change_letter	array
[	O
changes	enum
]	O
,	O
outfile	pointer
)	O
;	O
print_number_range	function
(	O
' '	O
,	O
files	array
,	O
f0	long
,	O
l0	long
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
outfile	pointer
)	O
;	O
if	O
(	O
changes	enum
==	O
OLD	int
)	O
return	O
;	O
for	O
(	O
i	long
=	O
f1	long
;	O
i	long
<=	O
l1	long
;	O
i	long
++	O
)	O
print_1_line	function
(	O
""	pointer
,	O
&	O
files	array
[	O
1	int
]	O
.	O
linbuf	pointer
[	O
i	long
]	O
)	O
;	O
fputs	function
(	O
".\n"	pointer
,	O
outfile	pointer
)	O
;	O
}	O
void	O
print_rcs_script	function
(	O
struct	O
change	struct
*	O
script	pointer
)	O
{	O
print_script	function
(	O
script	pointer
,	O
find_change	function
,	O
print_rcs_hunk	function
)	O
;	O
}	O
static	O
void	O
print_rcs_hunk	function
(	O
struct	O
change	struct
*	O
hunk	pointer
)	O
{	O
lin	long
i	long
,	O
f0	long
,	O
l0	long
,	O
f1	long
,	O
l1	long
;	O
long	O
int	O
tf0	long
,	O
tl0	long
,	O
tf1	long
,	O
tl1	long
;	O
enum	O
changes	enum
changes	enum
=	O
analyze_hunk	function
(	O
hunk	pointer
,	O
&	O
f0	long
,	O
&	O
l0	long
,	O
&	O
f1	long
,	O
&	O
l1	long
)	O
;	O
if	O
(	O
!	O
changes	enum
)	O
return	O
;	O
begin_output	function
(	O
)	O
;	O
translate_range	function
(	O
&	O
files	array
[	O
0	int
]	O
,	O
f0	long
,	O
l0	long
,	O
&	O
tf0	long
,	O
&	O
tl0	long
)	O
;	O
if	O
(	O
changes	enum
&	O
OLD	int
)	O
{	O
fprintf	function
(	O
outfile	pointer
,	O
"d%ld %ld\n"	pointer
,	O
tf0	long
,	O
tf0	long
<=	O
tl0	long
?	O
tl0	long
-	O
tf0	long
+	O
1	int
:	O
1	int
)	O
;	O
}	O
if	O
(	O
changes	enum
&	O
NEW	int
)	O
{	O
translate_range	function
(	O
&	O
files	array
[	O
1	int
]	O
,	O
f1	long
,	O
l1	long
,	O
&	O
tf1	long
,	O
&	O
tl1	long
)	O
;	O
fprintf	function
(	O
outfile	pointer
,	O
"a%ld %ld\n"	pointer
,	O
tl0	long
,	O
tf1	long
<=	O
tl1	long
?	O
tl1	long
-	O
tf1	long
+	O
1	int
:	O
1	int
)	O
;	O
for	O
(	O
i	long
=	O
f1	long
;	O
i	long
<=	O
l1	long
;	O
i	long
++	O
)	O
print_1_line	function
(	O
""	pointer
,	O
&	O
files	array
[	O
1	int
]	O
.	O
linbuf	pointer
[	O
i	long
]	O
)	O
;	O
}	O
}	O
