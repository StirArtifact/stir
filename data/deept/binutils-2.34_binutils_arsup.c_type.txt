static	O
void	O
map_over_list	function
(	O
bfd	struct
*	O
,	O
void	O
(	O
*	O
function	pointer
)	O
(	O
bfd	struct
*	O
,	O
bfd	struct
*	O
)	O
,	O
struct	O
list	struct
*	O
)	O
;	O
static	O
void	O
ar_directory_doer	function
(	O
bfd	struct
*	O
,	O
bfd	struct
*	O
)	O
;	O
static	O
void	O
ar_addlib_doer	function
(	O
bfd	struct
*	O
,	O
bfd	struct
*	O
)	O
;	O
extern	O
int	O
verbose	int
;	O
extern	O
int	O
deterministic	int
;	O
static	O
bfd	struct
*	O
obfd	pointer
;	O
static	O
char	O
*	O
real_name	pointer
;	O
static	O
FILE	struct
*	O
outfile	pointer
;	O
static	O
void	O
map_over_list	function
(	O
bfd	struct
*	O
arch	enum
,	O
void	O
(	O
*	O
function	pointer
)	O
(	O
bfd	struct
*	O
,	O
bfd	struct
*	O
)	O
,	O
struct	O
list	struct
*	O
list	struct
)	O
{	O
bfd	struct
*	O
head	pointer
;	O
if	O
(	O
list	struct
==	O
NULL	O
)	O
{	O
bfd	struct
*	O
next	pointer
;	O
head	pointer
=	O
arch	enum
->	O
archive_next	pointer
;	O
while	O
(	O
head	pointer
!=	O
NULL	O
)	O
{	O
next	pointer
=	O
head	pointer
->	O
archive_next	pointer
;	O
function	pointer
(	O
head	pointer
,	O
(	O
bfd	struct
*	O
)	O
NULL	O
)	O
;	O
head	pointer
=	O
next	pointer
;	O
}	O
}	O
else	O
{	O
struct	O
list	struct
*	O
ptr	pointer
;	O
for	O
(	O
ptr	pointer
=	O
list	struct
;	O
ptr	pointer
;	O
ptr	pointer
=	O
ptr	pointer
->	O
next	pointer
)	O
{	O
bfd_boolean	int
found	int
=	O
FALSE	int
;	O
bfd	struct
*	O
prev	pointer
=	O
arch	enum
;	O
for	O
(	O
head	pointer
=	O
arch	enum
->	O
archive_next	pointer
;	O
head	pointer
;	O
head	pointer
=	O
head	pointer
->	O
archive_next	pointer
)	O
{	O
if	O
(	O
head	pointer
->	O
filename	pointer
!=	O
NULL	O
&&	O
FILENAME_CMP	O
(	O
ptr	pointer
->	O
name	pointer
,	O
head	pointer
->	O
filename	pointer
)	O
==	O
0	int
)	O
{	O
found	int
=	O
TRUE	int
;	O
function	pointer
(	O
head	pointer
,	O
prev	pointer
)	O
;	O
}	O
prev	pointer
=	O
head	pointer
;	O
}	O
if	O
(	O
!	O
found	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"No entry %s in archive.\n"	pointer
)	O
,	O
ptr	pointer
->	O
name	pointer
)	O
;	O
}	O
}	O
}	O
static	O
void	O
ar_directory_doer	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd	struct
*	O
ignore	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
print_arelt_descr	function
(	O
outfile	pointer
,	O
abfd	pointer
,	O
verbose	int
,	O
FALSE	int
)	O
;	O
}	O
void	O
ar_directory	function
(	O
char	O
*	O
ar_name	pointer
,	O
struct	O
list	struct
*	O
list	struct
,	O
char	O
*	O
output	pointer
)	O
{	O
bfd	struct
*	O
arch	enum
;	O
arch	enum
=	O
open_inarch	function
(	O
ar_name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
output	pointer
)	O
{	O
outfile	pointer
=	O
fopen	function
(	O
output	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
outfile	pointer
==	O
0	int
)	O
{	O
outfile	pointer
=	O
stdout	pointer
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Can't open file %s\n"	pointer
)	O
,	O
output	pointer
)	O
;	O
output	pointer
=	O
0	int
;	O
}	O
}	O
else	O
outfile	pointer
=	O
stdout	pointer
;	O
map_over_list	function
(	O
arch	enum
,	O
ar_directory_doer	function
,	O
list	struct
)	O
;	O
bfd_close	function
(	O
arch	enum
)	O
;	O
if	O
(	O
output	pointer
)	O
fclose	function
(	O
outfile	pointer
)	O
;	O
}	O
void	O
prompt	function
(	O
void	O
)	O
{	O
extern	O
int	O
interactive	int
;	O
if	O
(	O
interactive	int
)	O
{	O
printf	function
(	O
"AR >"	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
}	O
void	O
maybequit	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
interactive	int
)	O
xexit	function
(	O
9	int
)	O
;	O
}	O
void	O
ar_open	function
(	O
char	O
*	O
name	pointer
,	O
int	O
t	int
)	O
{	O
char	O
*	O
tname	pointer
;	O
const	O
char	O
*	O
bname	pointer
=	O
lbasename	function
(	O
name	pointer
)	O
;	O
real_name	pointer
=	O
name	pointer
;	O
if	O
(	O
asprintf	function
(	O
&	O
tname	pointer
,	O
"%.*stmp-%s"	pointer
,	O
(	O
int	O
)	O
(	O
bname	pointer
-	O
name	pointer
)	O
,	O
name	pointer
,	O
bname	pointer
)	O
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: Can't allocate memory for temp name (%s)\n"	pointer
)	O
,	O
program_name	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
maybequit	function
(	O
)	O
;	O
return	O
;	O
}	O
obfd	pointer
=	O
bfd_openw	function
(	O
tname	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
obfd	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: Can't open output archive %s\n"	pointer
)	O
,	O
program_name	pointer
,	O
tname	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
t	int
)	O
{	O
bfd	struct
*	O
*	O
ptr	pointer
;	O
bfd	struct
*	O
element	pointer
;	O
bfd	struct
*	O
ibfd	pointer
;	O
ibfd	pointer
=	O
bfd_openr	function
(	O
name	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
ibfd	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: Can't open input archive %s\n"	pointer
)	O
,	O
program_name	pointer
,	O
name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
bfd_check_format	function
(	O
ibfd	pointer
,	O
bfd_archive	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: file %s is not an archive\n"	pointer
)	O
,	O
program_name	pointer
,	O
name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
return	O
;	O
}	O
ptr	pointer
=	O
&	O
(	O
obfd	pointer
->	O
archive_head	pointer
)	O
;	O
element	pointer
=	O
bfd_openr_next_archived_file	function
(	O
ibfd	pointer
,	O
NULL	O
)	O
;	O
while	O
(	O
element	pointer
)	O
{	O
*	O
ptr	pointer
=	O
element	pointer
;	O
ptr	pointer
=	O
&	O
element	pointer
->	O
archive_next	pointer
;	O
element	pointer
=	O
bfd_openr_next_archived_file	function
(	O
ibfd	pointer
,	O
element	pointer
)	O
;	O
}	O
}	O
bfd_set_format	function
(	O
obfd	pointer
,	O
bfd_archive	int
)	O
;	O
obfd	pointer
->	O
has_armap	int
=	O
1	int
;	O
obfd	pointer
->	O
is_thin_archive	int
=	O
0	int
;	O
}	O
}	O
static	O
void	O
ar_addlib_doer	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd	struct
*	O
prev	pointer
)	O
{	O
if	O
(	O
prev	pointer
!=	O
NULL	O
)	O
prev	pointer
->	O
archive_next	pointer
=	O
abfd	pointer
->	O
archive_next	pointer
;	O
abfd	pointer
->	O
archive_next	pointer
=	O
obfd	pointer
->	O
archive_head	pointer
;	O
obfd	pointer
->	O
archive_head	pointer
=	O
abfd	pointer
;	O
}	O
void	O
ar_addlib	function
(	O
char	O
*	O
name	pointer
,	O
struct	O
list	struct
*	O
list	struct
)	O
{	O
if	O
(	O
obfd	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: no output archive specified yet\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
else	O
{	O
bfd	struct
*	O
arch	enum
;	O
arch	enum
=	O
open_inarch	function
(	O
name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
arch	enum
!=	O
NULL	O
)	O
map_over_list	function
(	O
arch	enum
,	O
ar_addlib_doer	function
,	O
list	struct
)	O
;	O
}	O
}	O
void	O
ar_addmod	function
(	O
struct	O
list	struct
*	O
list	struct
)	O
{	O
if	O
(	O
!	O
obfd	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: no open output archive\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
list	struct
)	O
{	O
bfd	struct
*	O
abfd	pointer
;	O
abfd	pointer
=	O
bfd_openr	function
(	O
list	struct
->	O
name	pointer
,	O
"plugin"	pointer
)	O
;	O
if	O
(	O
!	O
abfd	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: can't open file %s\n"	pointer
)	O
,	O
program_name	pointer
,	O
list	struct
->	O
name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
else	O
{	O
abfd	pointer
->	O
archive_next	pointer
=	O
obfd	pointer
->	O
archive_head	pointer
;	O
obfd	pointer
->	O
archive_head	pointer
=	O
abfd	pointer
;	O
}	O
list	struct
=	O
list	struct
->	O
next	pointer
;	O
}	O
}	O
}	O
void	O
ar_clear	function
(	O
void	O
)	O
{	O
if	O
(	O
obfd	pointer
)	O
obfd	pointer
->	O
archive_head	pointer
=	O
0	int
;	O
}	O
void	O
ar_delete	function
(	O
struct	O
list	struct
*	O
list	struct
)	O
{	O
if	O
(	O
!	O
obfd	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: no open output archive\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
list	struct
)	O
{	O
bfd	struct
*	O
member	pointer
=	O
obfd	pointer
->	O
archive_head	pointer
;	O
bfd	struct
*	O
*	O
prev	pointer
=	O
&	O
(	O
obfd	pointer
->	O
archive_head	pointer
)	O
;	O
int	O
found	int
=	O
0	int
;	O
while	O
(	O
member	pointer
)	O
{	O
if	O
(	O
FILENAME_CMP	O
(	O
member	pointer
->	O
filename	pointer
,	O
list	struct
->	O
name	pointer
)	O
==	O
0	int
)	O
{	O
*	O
prev	pointer
=	O
member	pointer
->	O
archive_next	pointer
;	O
found	int
=	O
1	int
;	O
}	O
else	O
prev	pointer
=	O
&	O
(	O
member	pointer
->	O
archive_next	pointer
)	O
;	O
member	pointer
=	O
member	pointer
->	O
archive_next	pointer
;	O
}	O
if	O
(	O
!	O
found	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: can't find module file %s\n"	pointer
)	O
,	O
program_name	pointer
,	O
list	struct
->	O
name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
list	struct
=	O
list	struct
->	O
next	pointer
;	O
}	O
}	O
}	O
void	O
ar_save	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
obfd	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: no open output archive\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
else	O
{	O
char	O
*	O
ofilename	pointer
=	O
xstrdup	function
(	O
bfd_get_filename	function
(	O
obfd	pointer
)	O
)	O
;	O
if	O
(	O
deterministic	int
>	O
0	int
)	O
obfd	pointer
->	O
flags	int
|=	O
BFD_DETERMINISTIC_OUTPUT	int
;	O
bfd_close	function
(	O
obfd	pointer
)	O
;	O
smart_rename	function
(	O
ofilename	pointer
,	O
real_name	pointer
,	O
0	int
)	O
;	O
obfd	pointer
=	O
0	int
;	O
free	function
(	O
ofilename	pointer
)	O
;	O
}	O
}	O
void	O
ar_replace	function
(	O
struct	O
list	struct
*	O
list	struct
)	O
{	O
if	O
(	O
!	O
obfd	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: no open output archive\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
list	struct
)	O
{	O
bfd	struct
*	O
member	pointer
=	O
obfd	pointer
->	O
archive_head	pointer
;	O
bfd	struct
*	O
*	O
prev	pointer
=	O
&	O
(	O
obfd	pointer
->	O
archive_head	pointer
)	O
;	O
int	O
found	int
=	O
0	int
;	O
while	O
(	O
member	pointer
)	O
{	O
if	O
(	O
FILENAME_CMP	O
(	O
member	pointer
->	O
filename	pointer
,	O
list	struct
->	O
name	pointer
)	O
==	O
0	int
)	O
{	O
bfd	struct
*	O
abfd	pointer
=	O
bfd_openr	function
(	O
list	struct
->	O
name	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
abfd	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: can't open file %s\n"	pointer
)	O
,	O
program_name	pointer
,	O
list	struct
->	O
name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
else	O
{	O
*	O
prev	pointer
=	O
abfd	pointer
;	O
abfd	pointer
->	O
archive_next	pointer
=	O
member	pointer
->	O
archive_next	pointer
;	O
found	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
prev	pointer
=	O
&	O
(	O
member	pointer
->	O
archive_next	pointer
)	O
;	O
}	O
member	pointer
=	O
member	pointer
->	O
archive_next	pointer
;	O
}	O
if	O
(	O
!	O
found	int
)	O
{	O
bfd	struct
*	O
abfd	pointer
=	O
bfd_openr	function
(	O
list	struct
->	O
name	pointer
,	O
NULL	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: can't find module file %s\n"	pointer
)	O
,	O
program_name	pointer
,	O
list	struct
->	O
name	pointer
)	O
;	O
if	O
(	O
!	O
abfd	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: can't open file %s\n"	pointer
)	O
,	O
program_name	pointer
,	O
list	struct
->	O
name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
else	O
*	O
prev	pointer
=	O
abfd	pointer
;	O
}	O
list	struct
=	O
list	struct
->	O
next	pointer
;	O
}	O
}	O
}	O
void	O
ar_list	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
obfd	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: no open output archive\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
else	O
{	O
bfd	struct
*	O
abfd	pointer
;	O
outfile	pointer
=	O
stdout	pointer
;	O
verbose	int
=	O
1	int
;	O
printf	function
(	O
_	O
(	O
"Current open archive is %s\n"	pointer
)	O
,	O
bfd_get_filename	function
(	O
obfd	pointer
)	O
)	O
;	O
for	O
(	O
abfd	pointer
=	O
obfd	pointer
->	O
archive_head	pointer
;	O
abfd	pointer
!=	O
(	O
bfd	struct
*	O
)	O
NULL	O
;	O
abfd	pointer
=	O
abfd	pointer
->	O
archive_next	pointer
)	O
ar_directory_doer	function
(	O
abfd	pointer
,	O
(	O
bfd	struct
*	O
)	O
NULL	O
)	O
;	O
}	O
}	O
void	O
ar_end	function
(	O
void	O
)	O
{	O
if	O
(	O
obfd	pointer
)	O
{	O
bfd_cache_close	function
(	O
obfd	pointer
)	O
;	O
unlink	function
(	O
bfd_get_filename	function
(	O
obfd	pointer
)	O
)	O
;	O
}	O
}	O
void	O
ar_extract	function
(	O
struct	O
list	struct
*	O
list	struct
)	O
{	O
if	O
(	O
!	O
obfd	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: no open archive\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
maybequit	function
(	O
)	O
;	O
}	O
else	O
{	O
while	O
(	O
list	struct
)	O
{	O
bfd	struct
*	O
member	pointer
=	O
obfd	pointer
->	O
archive_head	pointer
;	O
int	O
found	int
=	O
0	int
;	O
while	O
(	O
member	pointer
&&	O
!	O
found	int
)	O
{	O
if	O
(	O
FILENAME_CMP	O
(	O
member	pointer
->	O
filename	pointer
,	O
list	struct
->	O
name	pointer
)	O
==	O
0	int
)	O
{	O
extract_file	function
(	O
member	pointer
)	O
;	O
found	int
=	O
1	int
;	O
}	O
member	pointer
=	O
member	pointer
->	O
archive_next	pointer
;	O
}	O
if	O
(	O
!	O
found	int
)	O
{	O
bfd_openr	function
(	O
list	struct
->	O
name	pointer
,	O
NULL	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: can't find module file %s\n"	pointer
)	O
,	O
program_name	pointer
,	O
list	struct
->	O
name	pointer
)	O
;	O
}	O
list	struct
=	O
list	struct
->	O
next	pointer
;	O
}	O
}	O
}	O
