GB	struct
*	O
gb_create	function
(	O
void	O
)	O
{	O
GB	struct
*	O
gb	pointer
;	O
gb	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
GB	struct
)	O
)	O
;	O
gb_init	function
(	O
gb	pointer
)	O
;	O
return	O
gb	pointer
;	O
}	O
void	O
gb_delete	function
(	O
GB	struct
*	O
G	pointer
)	O
{	O
return	O
;	O
}	O
void	O
gb_init	function
(	O
GB	struct
*	O
G	pointer
)	O
{	O
int	O
i	int
;	O
G	pointer
->	O
g_stdout_testfd	int
=	O
-	O
1	int
;	O
G	pointer
->	O
g_fail_loudly	int
=	O
-	O
1	int
;	O
G	pointer
->	O
g_verbose_threshold	int
=	O
SWC_VERBOSE_4	int
;	O
G	pointer
->	O
g_verboseG	int
=	O
1	int
;	O
G	pointer
->	O
g_signal_flag	int
=	O
0	int
;	O
G	pointer
->	O
g_t_efd	int
=	O
-	O
1	int
;	O
G	pointer
->	O
g_s_efd	int
=	O
-	O
1	int
;	O
G	pointer
->	O
g_logger_pid	int
=	O
0	int
;	O
G	pointer
->	O
g_swevent_fd	int
=	O
-	O
1	int
;	O
G	pointer
->	O
g_vstderr	pointer
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SWC_PID_ARRAY_LEN	int
+	O
SWC_PID_ARRAY_LEN	int
;	O
i	int
++	O
)	O
{	O
G	pointer
->	O
g_pid_array	array
[	O
i	int
]	O
=	O
0	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SWC_PID_ARRAY_LEN	int
;	O
i	int
++	O
)	O
{	O
G	pointer
->	O
g_status_array	array
[	O
i	int
]	O
=	O
0	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SWC_TARGET_FD_ARRAY_LEN	int
;	O
i	int
++	O
)	O
{	O
G	pointer
->	O
g_targetfd_array	array
[	O
i	int
]	O
=	O
-	O
1	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SWC_TARGET_FD_ARRAY_LEN	int
;	O
i	int
++	O
)	O
{	O
G	pointer
->	O
g_selectfd_array	array
[	O
i	int
]	O
=	O
-	O
1	int
;	O
}	O
G	pointer
->	O
g_io_req	struct
.	O
tv_sec	long
=	O
0	int
;	O
G	pointer
->	O
g_io_req	struct
.	O
tv_nsec	long
=	O
0	int
;	O
G	pointer
->	O
g_target_kmd	pointer
=	O
(	O
SHCMD	struct
*	O
)	O
NULL	O
;	O
G	pointer
->	O
g_source_kmd	pointer
=	O
(	O
SHCMD	struct
*	O
)	O
NULL	O
;	O
G	pointer
->	O
g_killcmd	pointer
=	O
(	O
SHCMD	struct
*	O
)	O
NULL	O
;	O
G	pointer
->	O
g_pid_array_len	int
=	O
0	int
;	O
G	pointer
->	O
g_nullfd	int
=	O
open	function
(	O
"/dev/null"	pointer
,	O
O_RDWR	int
,	O
0	int
)	O
;	O
if	O
(	O
G	pointer
->	O
g_nullfd	int
<	O
0	int
)	O
{	O
swlib_doif_writef	O
(	O
G	pointer
->	O
g_verboseG	int
,	O
G	pointer
->	O
g_fail_loudly	int
,	O
&	O
G	pointer
->	O
g_logspec	pointer
,	O
swc_get_stderr_fd	function
(	O
G	pointer
)	O
,	O
"Can't open /dev/null\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
G	pointer
->	O
g_stderr_fd	int
=	O
-	O
1	int
;	O
G	pointer
->	O
g_target_fdar	pointer
=	O
(	O
int	O
*	O
)	O
(	O
NULL	O
)	O
;	O
G	pointer
->	O
g_source_fdar	pointer
=	O
(	O
int	O
*	O
)	O
(	O
NULL	O
)	O
;	O
G	pointer
->	O
g_save_fdar	pointer
=	O
(	O
int	O
*	O
)	O
(	O
NULL	O
)	O
;	O
G	pointer
->	O
g_fork_pty	pointer
=	O
SWFORK_PTY	pointer
;	O
G	pointer
->	O
g_fork_pty2	pointer
=	O
SWFORK_PTY2	pointer
;	O
G	pointer
->	O
g_fork_pty_none	pointer
=	O
SWFORK_NO_PTY	pointer
;	O
sigemptyset	function
(	O
&	O
(	O
G	pointer
->	O
g_fork_defaultmask	struct
)	O
)	O
;	O
sigemptyset	function
(	O
&	O
(	O
G	pointer
->	O
g_fork_blockmask	struct
)	O
)	O
;	O
sigemptyset	function
(	O
&	O
(	O
G	pointer
->	O
g_ssh_fork_blockmask	struct
)	O
)	O
;	O
sigemptyset	function
(	O
&	O
(	O
G	pointer
->	O
g_currentmask	struct
)	O
)	O
;	O
G	pointer
->	O
g_do_progressmeter	int
=	O
0	int
;	O
G	pointer
->	O
g_logspec	pointer
.	O
logfdM	int
=	O
-	O
1	int
;	O
G	pointer
->	O
g_logspec	pointer
.	O
loglevelM	int
=	O
0	int
;	O
G	pointer
->	O
g_logspec	pointer
.	O
fail_loudlyM	int
=	O
-	O
1	int
;	O
G	pointer
->	O
g_loglevel	int
=	O
0	int
;	O
G	pointer
->	O
g_meter_fd	int
=	O
STDOUT_FILENO	int
;	O
G	pointer
->	O
g_xformat	pointer
=	O
NULL	O
;	O
G	pointer
->	O
g_swi_event_fd	int
=	O
-	O
1	int
;	O
G	pointer
->	O
g_swlog	pointer
=	O
NULL	O
;	O
G	pointer
->	O
g_pax_read_commands	pointer
=	O
g_pax_read_commands	pointer
;	O
G	pointer
->	O
g_pax_write_commands	pointer
=	O
g_pax_write_commands	pointer
;	O
G	pointer
->	O
g_pax_remove_commands	pointer
=	O
g_pax_remove_commands	pointer
;	O
G	pointer
->	O
g_source_script_name	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
G	pointer
->	O
g_target_script_name	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
G	pointer
->	O
g_swi_debug_name	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
G	pointer
->	O
g_is_seekable	int
=	O
0	int
;	O
G	pointer
->	O
g_do_debug_events	int
=	O
0	int
;	O
G	pointer
->	O
g_target_terminal_host	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
G	pointer
->	O
g_source_terminal_host	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
G	pointer
->	O
g_sh_dash_s	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
G	pointer
->	O
g_opt_alt_catalog_root	int
=	O
0	int
;	O
G	pointer
->	O
optaM	pointer
=	O
(	O
struct	O
extendedOptions	struct
*	O
)	O
NULL	O
;	O
G	pointer
->	O
g_do_task_shell_debug	int
=	O
0	int
;	O
G	pointer
->	O
g_do_distribution	int
=	O
0	int
;	O
G	pointer
->	O
g_do_installed_software	int
=	O
0	int
;	O
G	pointer
->	O
g_master_alarm	int
=	O
0	int
;	O
G	pointer
->	O
g_noscripts	int
=	O
0	int
;	O
G	pointer
->	O
g_swi	pointer
=	O
NULL	O
;	O
G	pointer
->	O
e_in_control_scriptM	int
=	O
0	int
;	O
G	pointer
->	O
devel_verboseM	int
=	O
0	int
;	O
G	pointer
->	O
g_to_stdout	int
=	O
0	int
;	O
G	pointer
->	O
g_force	int
=	O
0	int
;	O
G	pointer
->	O
g_force_locks	int
=	O
0	int
;	O
G	pointer
->	O
in_shls_looperM	int
=	O
0	int
;	O
G	pointer
->	O
g_swicolM	pointer
=	O
NULL	O
;	O
G	pointer
->	O
g_main_sig_handler	pointer
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
;	O
G	pointer
->	O
g_safe_sig_handler	pointer
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
;	O
G	pointer
->	O
g_psignalM	int
=	O
0	int
;	O
G	pointer
->	O
g_running_signalsetM	int
=	O
0	int
;	O
G	pointer
->	O
g_running_signalusr1M	int
=	O
0	int
;	O
G	pointer
->	O
g_target_did_abortM	int
=	O
0	int
;	O
G	pointer
->	O
g_save_stderr_fdM	int
=	O
0	int
;	O
G	pointer
->	O
g_opt_previewM	int
=	O
0	int
;	O
G	pointer
->	O
g_do_cleanshM	int
=	O
0	int
;	O
G	pointer
->	O
g_gpuflagM	int
=	O
0	int
;	O
G	pointer
->	O
g_do_createM	int
=	O
0	int
;	O
G	pointer
->	O
g_do_extractM	int
=	O
0	int
;	O
G	pointer
->	O
g_sourcepath_listM	pointer
=	O
NULL	O
;	O
G	pointer
->	O
g_no_extractM	int
=	O
0	int
;	O
G	pointer
->	O
g_do_show_linesM	int
=	O
0	int
;	O
G	pointer
->	O
g_catalog_info_nameM	pointer
=	O
NULL	O
;	O
G	pointer
->	O
g_system_info_nameM	pointer
=	O
NULL	O
;	O
G	pointer
->	O
g_justdbM	int
=	O
0	int
;	O
G	pointer
->	O
g_do_dereferenceM	int
=	O
0	int
;	O
G	pointer
->	O
g_do_hard_dereferenceM	int
=	O
0	int
;	O
G	pointer
->	O
g_ignore_slack_installM	int
=	O
0	int
;	O
*	O
(	O
G	pointer
->	O
g_gpufieldM	array
)	O
=	O
'\0'	O
;	O
G	pointer
->	O
g_do_unconfigM	int
=	O
0	int
;	O
G	pointer
->	O
g_config_postinstallM	int
=	O
0	int
;	O
G	pointer
->	O
g_send_envM	int
=	O
0	int
;	O
G	pointer
->	O
g_no_summary_reportM	int
=	O
0	int
;	O
G	pointer
->	O
g_no_prelinkM	int
=	O
0	int
;	O
G	pointer
->	O
g_output_formM	int
=	O
0	int
;	O
G	pointer
->	O
g_cl_target_targetM	pointer
=	O
NULL	O
;	O
G	pointer
->	O
g_no_script_chdirM	int
=	O
0	int
;	O
G	pointer
->	O
g_prelink_fdM	int
=	O
-	O
1	int
;	O
G	pointer
->	O
g_prelink_fd_memM	pointer
=	O
NULL	O
;	O
}	O
