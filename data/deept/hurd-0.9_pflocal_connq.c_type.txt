struct	O
connq	struct
{	O
struct	O
connq_request	struct
*	O
head	pointer
;	O
struct	O
connq_request	struct
*	O
*	O
tail	pointer
;	O
unsigned	O
count	int
;	O
unsigned	O
max	int
;	O
pthread_cond_t	union
listeners	union
;	O
unsigned	O
num_listeners	int
;	O
pthread_cond_t	union
connectors	union
;	O
unsigned	O
num_connectors	int
;	O
pthread_mutex_t	union
lock	union
;	O
}	O
;	O
struct	O
connq_request	struct
{	O
struct	O
connq_request	struct
*	O
next	pointer
;	O
struct	O
sock	pointer
*	O
sock	pointer
;	O
}	O
;	O
static	O
inline	O
void	O
connq_request_init	function
(	O
struct	O
connq_request	struct
*	O
req	pointer
,	O
struct	O
sock	pointer
*	O
sock	pointer
)	O
{	O
req	pointer
->	O
sock	pointer
=	O
sock	pointer
;	O
}	O
static	O
void	O
connq_request_enqueue	function
(	O
struct	O
connq	struct
*	O
cq	pointer
,	O
struct	O
connq_request	struct
*	O
req	pointer
)	O
{	O
assert	O
(	O
pthread_mutex_trylock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
)	O
;	O
req	pointer
->	O
next	pointer
=	O
NULL	O
;	O
*	O
cq	pointer
->	O
tail	pointer
=	O
req	pointer
;	O
cq	pointer
->	O
tail	pointer
=	O
&	O
req	pointer
->	O
next	pointer
;	O
cq	pointer
->	O
count	int
++	O
;	O
}	O
static	O
struct	O
connq_request	struct
*	O
connq_request_dequeue	function
(	O
struct	O
connq	struct
*	O
cq	pointer
)	O
{	O
struct	O
connq_request	struct
*	O
req	pointer
;	O
assert	O
(	O
pthread_mutex_trylock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
)	O
;	O
assert	O
(	O
cq	pointer
->	O
head	pointer
)	O
;	O
req	pointer
=	O
cq	pointer
->	O
head	pointer
;	O
cq	pointer
->	O
head	pointer
=	O
req	pointer
->	O
next	pointer
;	O
if	O
(	O
!	O
cq	pointer
->	O
head	pointer
)	O
cq	pointer
->	O
tail	pointer
=	O
&	O
cq	pointer
->	O
head	pointer
;	O
cq	pointer
->	O
count	int
--	O
;	O
return	O
req	pointer
;	O
}	O
error_t	int
connq_create	function
(	O
struct	O
connq	struct
*	O
*	O
cq	pointer
)	O
{	O
struct	O
connq	struct
*	O
new	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
connq	struct
)	O
)	O
;	O
if	O
(	O
!	O
new	pointer
)	O
return	O
ENOBUFS	int
;	O
new	pointer
->	O
head	pointer
=	O
NULL	O
;	O
new	pointer
->	O
tail	pointer
=	O
&	O
new	pointer
->	O
head	pointer
;	O
new	pointer
->	O
count	int
=	O
0	int
;	O
new	pointer
->	O
max	int
=	O
0	int
;	O
new	pointer
->	O
num_listeners	int
=	O
0	int
;	O
new	pointer
->	O
num_connectors	int
=	O
0	int
;	O
pthread_mutex_init	function
(	O
&	O
new	pointer
->	O
lock	union
,	O
NULL	O
)	O
;	O
pthread_cond_init	function
(	O
&	O
new	pointer
->	O
listeners	union
,	O
NULL	O
)	O
;	O
pthread_cond_init	function
(	O
&	O
new	pointer
->	O
connectors	union
,	O
NULL	O
)	O
;	O
*	O
cq	pointer
=	O
new	pointer
;	O
return	O
0	int
;	O
}	O
void	O
connq_destroy	function
(	O
struct	O
connq	struct
*	O
cq	pointer
)	O
{	O
assert	O
(	O
!	O
cq	pointer
->	O
head	pointer
)	O
;	O
assert	O
(	O
cq	pointer
->	O
count	int
==	O
0	int
)	O
;	O
free	function
(	O
cq	pointer
)	O
;	O
}	O
error_t	int
connq_listen	function
(	O
struct	O
connq	struct
*	O
cq	pointer
,	O
struct	O
timespec	struct
*	O
tsp	pointer
,	O
struct	O
sock	pointer
*	O
*	O
sock	pointer
)	O
{	O
error_t	int
err	int
=	O
0	int
;	O
pthread_mutex_lock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
if	O
(	O
tsp	pointer
&&	O
tsp	pointer
->	O
tv_sec	long
==	O
0	int
&&	O
tsp	pointer
->	O
tv_nsec	long
==	O
0	int
&&	O
cq	pointer
->	O
count	int
==	O
0	int
&&	O
cq	pointer
->	O
num_connectors	int
==	O
0	int
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
return	O
EWOULDBLOCK	O
;	O
}	O
if	O
(	O
!	O
sock	pointer
&&	O
(	O
cq	pointer
->	O
count	int
>	O
0	int
||	O
cq	pointer
->	O
num_connectors	int
>	O
0	int
)	O
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
return	O
0	int
;	O
}	O
cq	pointer
->	O
num_listeners	int
++	O
;	O
if	O
(	O
cq	pointer
->	O
count	int
==	O
0	int
)	O
{	O
assert	O
(	O
!	O
cq	pointer
->	O
head	pointer
)	O
;	O
if	O
(	O
cq	pointer
->	O
num_connectors	int
>	O
0	int
)	O
pthread_cond_signal	function
(	O
&	O
cq	pointer
->	O
connectors	union
)	O
;	O
do	O
{	O
err	int
=	O
pthread_hurd_cond_timedwait_np	function
(	O
&	O
cq	pointer
->	O
listeners	union
,	O
&	O
cq	pointer
->	O
lock	union
,	O
tsp	pointer
)	O
;	O
if	O
(	O
err	int
)	O
{	O
cq	pointer
->	O
num_listeners	int
--	O
;	O
goto	O
out	O
;	O
}	O
}	O
while	O
(	O
cq	pointer
->	O
count	int
==	O
0	int
)	O
;	O
}	O
assert	O
(	O
cq	pointer
->	O
head	pointer
)	O
;	O
if	O
(	O
sock	pointer
)	O
{	O
struct	O
connq_request	struct
*	O
req	pointer
=	O
connq_request_dequeue	function
(	O
cq	pointer
)	O
;	O
*	O
sock	pointer
=	O
req	pointer
->	O
sock	pointer
;	O
free	function
(	O
req	pointer
)	O
;	O
}	O
else	O
if	O
(	O
cq	pointer
->	O
num_listeners	int
>	O
0	int
)	O
pthread_cond_signal	function
(	O
&	O
cq	pointer
->	O
listeners	union
)	O
;	O
else	O
{	O
}	O
out	O
:	O
pthread_mutex_unlock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
return	O
err	int
;	O
}	O
error_t	int
connq_connect	function
(	O
struct	O
connq	struct
*	O
cq	pointer
,	O
int	O
noblock	int
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
if	O
(	O
noblock	int
&&	O
cq	pointer
->	O
count	int
+	O
cq	pointer
->	O
num_connectors	int
>=	O
cq	pointer
->	O
max	int
+	O
cq	pointer
->	O
num_listeners	int
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
return	O
EWOULDBLOCK	O
;	O
}	O
cq	pointer
->	O
num_connectors	int
++	O
;	O
while	O
(	O
cq	pointer
->	O
count	int
+	O
cq	pointer
->	O
num_connectors	int
>	O
cq	pointer
->	O
max	int
+	O
cq	pointer
->	O
num_listeners	int
)	O
if	O
(	O
pthread_hurd_cond_wait_np	function
(	O
&	O
cq	pointer
->	O
connectors	union
,	O
&	O
cq	pointer
->	O
lock	union
)	O
)	O
{	O
cq	pointer
->	O
num_connectors	int
--	O
;	O
pthread_mutex_unlock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
return	O
EINTR	int
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
return	O
0	int
;	O
}	O
void	O
connq_connect_complete	function
(	O
struct	O
connq	struct
*	O
cq	pointer
,	O
struct	O
sock	pointer
*	O
sock	pointer
)	O
{	O
struct	O
connq_request	struct
*	O
req	pointer
;	O
req	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
connq_request	struct
)	O
)	O
;	O
if	O
(	O
!	O
req	pointer
)	O
abort	function
(	O
)	O
;	O
connq_request_init	function
(	O
req	pointer
,	O
sock	pointer
)	O
;	O
pthread_mutex_lock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
assert	O
(	O
cq	pointer
->	O
num_connectors	int
>	O
0	int
)	O
;	O
cq	pointer
->	O
num_connectors	int
--	O
;	O
connq_request_enqueue	function
(	O
cq	pointer
,	O
req	pointer
)	O
;	O
if	O
(	O
cq	pointer
->	O
num_listeners	int
>	O
0	int
)	O
{	O
cq	pointer
->	O
num_listeners	int
--	O
;	O
pthread_cond_signal	function
(	O
&	O
cq	pointer
->	O
listeners	union
)	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
}	O
void	O
connq_connect_cancel	function
(	O
struct	O
connq	struct
*	O
cq	pointer
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
assert	O
(	O
cq	pointer
->	O
num_connectors	int
>	O
0	int
)	O
;	O
cq	pointer
->	O
num_connectors	int
--	O
;	O
if	O
(	O
cq	pointer
->	O
count	int
+	O
cq	pointer
->	O
num_connectors	int
>=	O
cq	pointer
->	O
max	int
+	O
cq	pointer
->	O
num_listeners	int
)	O
pthread_cond_signal	function
(	O
&	O
cq	pointer
->	O
connectors	union
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
}	O
error_t	int
connq_set_length	function
(	O
struct	O
connq	struct
*	O
cq	pointer
,	O
int	O
max	int
)	O
{	O
int	O
omax	int
;	O
pthread_mutex_lock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
omax	int
=	O
cq	pointer
->	O
max	int
;	O
cq	pointer
->	O
max	int
=	O
max	int
;	O
if	O
(	O
max	int
>	O
omax	int
&&	O
cq	pointer
->	O
count	int
>=	O
omax	int
&&	O
cq	pointer
->	O
count	int
<	O
max	int
&&	O
cq	pointer
->	O
num_connectors	int
>=	O
cq	pointer
->	O
num_listeners	int
)	O
pthread_cond_broadcast	function
(	O
&	O
cq	pointer
->	O
listeners	union
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
cq	pointer
->	O
lock	union
)	O
;	O
return	O
0	int
;	O
}	O
