typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
p	int
;	O
gsl_vector	struct
*	O
z	double
;	O
gsl_vector	struct
*	O
r	pointer
;	O
gsl_vector	struct
*	O
d	pointer
;	O
gsl_vector	struct
*	O
workp	pointer
;	O
gsl_vector	struct
*	O
workn	pointer
;	O
double	O
norm_g	double
;	O
double	O
cgtol	double
;	O
size_t	long
cgmaxit	long
;	O
}	O
cgst_state_t	struct
;	O
static	O
void	O
*	O
cgst_alloc	function
(	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
cgst_free	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
cgst_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
cgst_preloop	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
cgst_step	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
cgst_preduction	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
gsl_vector	struct
*	O
dx	pointer
,	O
double	O
*	O
pred	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
double	O
cgst_calc_tau	function
(	O
const	O
gsl_vector	struct
*	O
p	int
,	O
const	O
gsl_vector	struct
*	O
d	pointer
,	O
const	O
double	O
delta	double
)	O
;	O
static	O
void	O
*	O
cgst_alloc	function
(	O
const	O
void	O
*	O
params	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
const	O
gsl_multilarge_nlinear_parameters	struct
*	O
par	pointer
=	O
(	O
const	O
gsl_multilarge_nlinear_parameters	struct
*	O
)	O
params	pointer
;	O
cgst_state_t	struct
*	O
state	pointer
;	O
state	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
cgst_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate st state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
z	double
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
z	double
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for z"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
r	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
r	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for r"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
d	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
d	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for d"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workp	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workp"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workn	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workn	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workn"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
n	int
=	O
n	int
;	O
state	pointer
->	O
p	int
=	O
p	int
;	O
state	pointer
->	O
cgmaxit	long
=	O
par	pointer
->	O
max_iter	long
;	O
if	O
(	O
state	pointer
->	O
cgmaxit	long
==	O
0	int
)	O
state	pointer
->	O
cgmaxit	long
=	O
n	int
;	O
state	pointer
->	O
cgtol	double
=	O
par	pointer
->	O
tol	double
;	O
return	O
state	pointer
;	O
}	O
static	O
void	O
cgst_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
cgst_state_t	struct
*	O
state	pointer
=	O
(	O
cgst_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
z	double
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
if	O
(	O
state	pointer
->	O
r	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
r	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
d	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
d	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workp	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
workn	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workn	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
cgst_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
(	O
void	O
)	O
vtrust_state	pointer
;	O
(	O
void	O
)	O
vstate	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
cgst_preloop	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
(	O
void	O
)	O
vtrust_state	pointer
;	O
(	O
void	O
)	O
vstate	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
cgst_step	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
cgst_state_t	struct
*	O
state	pointer
=	O
(	O
cgst_state_t	struct
*	O
)	O
vstate	pointer
;	O
const	O
gsl_vector	struct
*	O
x	double
=	O
trust_state	pointer
->	O
x	double
;	O
const	O
gsl_vector	struct
*	O
f	pointer
=	O
trust_state	pointer
->	O
f	pointer
;	O
const	O
gsl_vector	struct
*	O
swts	pointer
=	O
trust_state	pointer
->	O
sqrt_wts	pointer
;	O
const	O
gsl_vector	struct
*	O
diag	pointer
=	O
trust_state	pointer
->	O
diag	pointer
;	O
const	O
gsl_multilarge_nlinear_parameters	struct
*	O
params	pointer
=	O
trust_state	pointer
->	O
params	pointer
;	O
gsl_multilarge_nlinear_fdf	struct
*	O
fdf	pointer
=	O
trust_state	pointer
->	O
fdf	pointer
;	O
double	O
alpha	long double
,	O
beta	long double
,	O
u	pointer
;	O
double	O
norm_Jd	double
;	O
double	O
norm_r	double
;	O
double	O
norm_rp1	double
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
state	pointer
->	O
p	int
;	O
++	O
i	long
)	O
{	O
double	O
gi	double
=	O
gsl_vector_get	function
(	O
trust_state	pointer
->	O
g	pointer
,	O
i	long
)	O
;	O
double	O
di	double
=	O
gsl_vector_get	function
(	O
trust_state	pointer
->	O
diag	pointer
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
state	pointer
->	O
z	double
,	O
i	long
,	O
0.0	int
)	O
;	O
gsl_vector_set	function
(	O
state	pointer
->	O
r	pointer
,	O
i	long
,	O
-	O
gi	double
/	O
di	double
)	O
;	O
gsl_vector_set	function
(	O
state	pointer
->	O
d	pointer
,	O
i	long
,	O
-	O
gi	double
/	O
di	double
)	O
;	O
gsl_vector_set	function
(	O
state	pointer
->	O
workp	pointer
,	O
i	long
,	O
gi	double
/	O
di	double
)	O
;	O
}	O
state	pointer
->	O
norm_g	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
workp	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
state	pointer
->	O
cgmaxit	long
;	O
++	O
i	long
)	O
{	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
workp	pointer
,	O
state	pointer
->	O
d	pointer
)	O
;	O
gsl_vector_div	function
(	O
state	pointer
->	O
workp	pointer
,	O
trust_state	pointer
->	O
diag	pointer
)	O
;	O
status	int
=	O
gsl_multilarge_nlinear_eval_df	function
(	O
CblasNoTrans	int
,	O
x	double
,	O
f	pointer
,	O
state	pointer
->	O
workp	pointer
,	O
swts	pointer
,	O
params	pointer
->	O
h_df	double
,	O
params	pointer
->	O
fdtype	enum
,	O
fdf	pointer
,	O
state	pointer
->	O
workn	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
norm_Jd	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
workn	pointer
)	O
;	O
if	O
(	O
norm_Jd	double
==	O
0.0	int
)	O
{	O
double	O
tau	double
=	O
cgst_calc_tau	function
(	O
state	pointer
->	O
z	double
,	O
state	pointer
->	O
d	pointer
,	O
delta	double
)	O
;	O
scaled_addition	function
(	O
1.0	int
,	O
state	pointer
->	O
z	double
,	O
tau	double
,	O
state	pointer
->	O
d	pointer
,	O
dx	pointer
)	O
;	O
gsl_vector_div	function
(	O
dx	pointer
,	O
diag	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
norm_r	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
r	pointer
)	O
;	O
u	pointer
=	O
norm_r	double
/	O
norm_Jd	double
;	O
alpha	long double
=	O
u	pointer
*	O
u	pointer
;	O
scaled_addition	function
(	O
1.0	int
,	O
state	pointer
->	O
z	double
,	O
alpha	long double
,	O
state	pointer
->	O
d	pointer
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
u	pointer
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
workp	pointer
)	O
;	O
if	O
(	O
u	pointer
>=	O
delta	double
)	O
{	O
double	O
tau	double
=	O
cgst_calc_tau	function
(	O
state	pointer
->	O
z	double
,	O
state	pointer
->	O
d	pointer
,	O
delta	double
)	O
;	O
scaled_addition	function
(	O
1.0	int
,	O
state	pointer
->	O
z	double
,	O
tau	double
,	O
state	pointer
->	O
d	pointer
,	O
dx	pointer
)	O
;	O
gsl_vector_div	function
(	O
dx	pointer
,	O
diag	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
z	double
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
status	int
=	O
gsl_multilarge_nlinear_eval_df	function
(	O
CblasTrans	int
,	O
x	double
,	O
f	pointer
,	O
state	pointer
->	O
workn	pointer
,	O
swts	pointer
,	O
params	pointer
->	O
h_df	double
,	O
params	pointer
->	O
fdtype	enum
,	O
fdf	pointer
,	O
state	pointer
->	O
workp	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_vector_div	function
(	O
state	pointer
->	O
workp	pointer
,	O
trust_state	pointer
->	O
diag	pointer
)	O
;	O
gsl_vector_scale	function
(	O
state	pointer
->	O
workp	pointer
,	O
alpha	long double
)	O
;	O
gsl_vector_sub	function
(	O
state	pointer
->	O
r	pointer
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
norm_rp1	double
=	O
gsl_blas_dnrm2	function
(	O
state	pointer
->	O
r	pointer
)	O
;	O
u	pointer
=	O
norm_rp1	double
/	O
state	pointer
->	O
norm_g	double
;	O
if	O
(	O
u	pointer
<	O
state	pointer
->	O
cgtol	double
)	O
{	O
gsl_vector_memcpy	function
(	O
dx	pointer
,	O
state	pointer
->	O
z	double
)	O
;	O
gsl_vector_div	function
(	O
dx	pointer
,	O
diag	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
u	pointer
=	O
norm_rp1	double
/	O
norm_r	double
;	O
beta	long double
=	O
u	pointer
*	O
u	pointer
;	O
scaled_addition	function
(	O
1.0	int
,	O
state	pointer
->	O
r	pointer
,	O
beta	long double
,	O
state	pointer
->	O
d	pointer
,	O
state	pointer
->	O
d	pointer
)	O
;	O
}	O
gsl_vector_memcpy	function
(	O
dx	pointer
,	O
state	pointer
->	O
z	double
)	O
;	O
gsl_vector_div	function
(	O
dx	pointer
,	O
diag	pointer
)	O
;	O
return	O
GSL_EMAXITER	int
;	O
}	O
static	O
int	O
cgst_preduction	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
const	O
gsl_vector	struct
*	O
dx	pointer
,	O
double	O
*	O
pred	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multilarge_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
cgst_state_t	struct
*	O
state	pointer
=	O
(	O
cgst_state_t	struct
*	O
)	O
vstate	pointer
;	O
*	O
pred	pointer
=	O
quadratic_preduction	function
(	O
trust_state	pointer
,	O
dx	pointer
,	O
state	pointer
->	O
workn	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
cgst_calc_tau	function
(	O
const	O
gsl_vector	struct
*	O
p	int
,	O
const	O
gsl_vector	struct
*	O
d	pointer
,	O
const	O
double	O
delta	double
)	O
{	O
double	O
norm_p	double
,	O
norm_d	double
,	O
u	pointer
;	O
double	O
t1	double
,	O
t2	double
,	O
tau	double
;	O
norm_p	double
=	O
gsl_blas_dnrm2	function
(	O
p	int
)	O
;	O
norm_d	double
=	O
gsl_blas_dnrm2	function
(	O
d	pointer
)	O
;	O
gsl_blas_ddot	function
(	O
p	int
,	O
d	pointer
,	O
&	O
u	pointer
)	O
;	O
t1	double
=	O
u	pointer
/	O
(	O
norm_d	double
*	O
norm_d	double
)	O
;	O
t2	double
=	O
t1	double
*	O
u	pointer
+	O
(	O
delta	double
+	O
norm_p	double
)	O
*	O
(	O
delta	double
-	O
norm_p	double
)	O
;	O
tau	double
=	O
-	O
t1	double
+	O
sqrt	function
(	O
t2	double
)	O
/	O
norm_d	double
;	O
return	O
tau	double
;	O
}	O
static	O
const	O
gsl_multilarge_nlinear_trs	struct
cgst_type	struct
=	O
{	O
"steihaug-toint"	pointer
,	O
cgst_alloc	function
,	O
cgst_init	function
,	O
cgst_preloop	function
,	O
cgst_step	function
,	O
cgst_preduction	function
,	O
cgst_free	function
}	O
;	O
const	O
gsl_multilarge_nlinear_trs	struct
*	O
gsl_multilarge_nlinear_trs_cgst	pointer
=	O
&	O
cgst_type	struct
;	O
