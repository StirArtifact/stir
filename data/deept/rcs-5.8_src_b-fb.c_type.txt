int	O
change_mode	function
(	O
int	O
fd	int
,	O
mode_t	int
mode	int
)	O
{	O
return	O
fchmod	function
(	O
fd	int
,	O
mode	int
)	O
;	O
}	O
void	O
Ierror	function
(	O
void	O
)	O
{	O
fatal_sys	function
(	O
"input error"	pointer
)	O
;	O
}	O
void	O
testIerror	function
(	O
FILE	struct
*	O
f	pointer
)	O
{	O
if	O
(	O
ferror	function
(	O
f	pointer
)	O
)	O
Ierror	function
(	O
)	O
;	O
}	O
void	O
Oerror	function
(	O
void	O
)	O
{	O
if	O
(	O
BE	O
(	O
Oerrloop	bool
)	O
)	O
PROGRAM	O
(	O
exiterr	pointer
)	O
(	O
)	O
;	O
BE	O
(	O
Oerrloop	bool
)	O
=	O
true	int
;	O
fatal_sys	function
(	O
"output error"	pointer
)	O
;	O
}	O
void	O
testOerror	function
(	O
FILE	struct
*	O
o	pointer
)	O
{	O
if	O
(	O
ferror	function
(	O
o	pointer
)	O
)	O
Oerror	function
(	O
)	O
;	O
}	O
FILE	struct
*	O
fopen_safer	function
(	O
char	O
const	O
*	O
filename	pointer
,	O
char	O
const	O
*	O
type	pointer
)	O
{	O
FILE	struct
*	O
stream	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
type	pointer
)	O
;	O
if	O
(	O
stream	pointer
)	O
{	O
int	O
fd	int
=	O
fileno	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
STDIN_FILENO	int
<=	O
fd	int
&&	O
fd	int
<=	O
STDERR_FILENO	int
)	O
{	O
int	O
f	pointer
=	O
dup_safer	function
(	O
fd	int
)	O
;	O
if	O
(	O
PROB	O
(	O
f	pointer
)	O
)	O
{	O
int	O
e	pointer
=	O
errno	O
;	O
fclose	function
(	O
stream	pointer
)	O
;	O
errno	O
=	O
e	pointer
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
PROB	O
(	O
fclose	function
(	O
stream	pointer
)	O
)	O
)	O
{	O
int	O
e	pointer
=	O
errno	O
;	O
close	pointer
(	O
f	pointer
)	O
;	O
errno	O
=	O
e	pointer
;	O
return	O
NULL	O
;	O
}	O
stream	pointer
=	O
fdopen	function
(	O
f	pointer
,	O
type	pointer
)	O
;	O
}	O
}	O
return	O
stream	pointer
;	O
}	O
void	O
Ozclose	function
(	O
FILE	struct
*	O
*	O
p	pointer
)	O
{	O
if	O
(	O
*	O
p	pointer
&&	O
EOF	O
==	O
fclose	function
(	O
*	O
p	pointer
)	O
)	O
Oerror	function
(	O
)	O
;	O
*	O
p	pointer
=	O
NULL	O
;	O
}	O
void	O
aflush	function
(	O
FILE	struct
*	O
f	pointer
)	O
{	O
if	O
(	O
PROB	O
(	O
fflush	function
(	O
f	pointer
)	O
)	O
)	O
Oerror	function
(	O
)	O
;	O
}	O
void	O
oflush	function
(	O
void	O
)	O
{	O
FILE	struct
*	O
mstdout	pointer
=	O
MANI	O
(	O
standard_output	pointer
)	O
;	O
if	O
(	O
PROB	O
(	O
fflush	function
(	O
mstdout	pointer
?	O
mstdout	pointer
:	O
stdout	pointer
)	O
)	O
&&	O
!	O
BE	O
(	O
Oerrloop	bool
)	O
)	O
Oerror	function
(	O
)	O
;	O
}	O
void	O
afputc	function
(	O
int	O
c	int
,	O
register	O
FILE	struct
*	O
f	pointer
)	O
{	O
aputc	O
(	O
c	int
,	O
f	pointer
)	O
;	O
}	O
void	O
aputs	function
(	O
char	O
const	O
*	O
s	pointer
,	O
FILE	struct
*	O
iop	pointer
)	O
{	O
if	O
(	O
PROB	O
(	O
fputs	function
(	O
s	pointer
,	O
iop	pointer
)	O
)	O
)	O
Oerror	function
(	O
)	O
;	O
}	O
void	O
aprintf	function
(	O
FILE	struct
*	O
iop	pointer
,	O
char	O
const	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
if	O
(	O
PROB	O
(	O
vfprintf	function
(	O
iop	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
)	O
)	O
Oerror	function
(	O
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
