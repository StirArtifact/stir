static	O
char	O
bigrams	array
[	O
257	int
]	O
=	O
{	O
0	int
}	O
;	O
static	O
int	O
strindex	function
(	O
char	O
*	O
string	pointer
,	O
char	O
*	O
pattern	pointer
)	O
{	O
register	O
char	O
*	O
s	long
;	O
for	O
(	O
s	long
=	O
string	pointer
;	O
*	O
s	long
!=	O
'\0'	O
;	O
s	long
++	O
)	O
if	O
(	O
*	O
s	long
==	O
*	O
pattern	pointer
)	O
{	O
register	O
char	O
*	O
p2	pointer
=	O
pattern	pointer
+	O
1	int
,	O
*	O
s2	pointer
=	O
s	long
+	O
1	int
;	O
while	O
(	O
*	O
p2	pointer
!=	O
'\0'	O
&&	O
*	O
p2	pointer
==	O
*	O
s2	pointer
)	O
p2	pointer
++	O
,	O
s2	pointer
++	O
;	O
if	O
(	O
*	O
p2	pointer
==	O
'\0'	O
)	O
return	O
s2	pointer
-	O
strlen	function
(	O
pattern	pointer
)	O
-	O
string	pointer
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
prefix_length	function
(	O
char	O
*	O
s1	pointer
,	O
char	O
*	O
s2	pointer
)	O
{	O
register	O
char	O
*	O
start	pointer
;	O
for	O
(	O
start	pointer
=	O
s1	pointer
;	O
*	O
s1	pointer
==	O
*	O
s2	pointer
&&	O
*	O
s1	pointer
!=	O
'\0'	O
;	O
s1	pointer
++	O
,	O
s2	pointer
++	O
)	O
;	O
return	O
s1	pointer
-	O
start	pointer
;	O
}	O
extern	O
char	O
*	O
version_string	pointer
;	O
static	O
void	O
usage	function
(	O
FILE	struct
*	O
stream	pointer
)	O
{	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"Usage: %s [--version | --help]\nor     %s most_common_bigrams < file-list > locate-database\n"	pointer
)	O
,	O
program_name	pointer
,	O
program_name	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"\nReport bugs to <bug-findutils@gnu.org>.\n"	pointer
)	O
,	O
stream	pointer
)	O
;	O
}	O
static	O
void	O
inerr	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
ATTRIBUTE_NORETURN	O
;	O
static	O
void	O
outerr	function
(	O
void	O
)	O
ATTRIBUTE_NORETURN	O
;	O
static	O
void	O
inerr	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"%s"	pointer
,	O
filename	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
static	O
void	O
outerr	function
(	O
void	O
)	O
{	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"write error"	pointer
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
path	pointer
;	O
char	O
*	O
oldpath	pointer
;	O
size_t	long
pathsize	long
,	O
oldpathsize	long
;	O
int	O
count	int
,	O
oldcount	int
,	O
diffcount	int
;	O
char	O
bigram	array
[	O
3	int
]	O
;	O
int	O
code	int
;	O
FILE	struct
*	O
fp	pointer
;	O
int	O
line_len	int
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
atexit	function
(	O
close_stdout	function
)	O
)	O
{	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"The atexit library function failed"	pointer
)	O
)	O
;	O
}	O
bigram	array
[	O
2	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
usage	function
(	O
stderr	pointer
)	O
;	O
return	O
2	int
;	O
}	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"--help"	pointer
)	O
)	O
{	O
usage	function
(	O
stdout	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"--version"	pointer
)	O
)	O
{	O
display_findutils_version	function
(	O
"code"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
fp	pointer
=	O
fopen	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
perror	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
pathsize	long
=	O
oldpathsize	long
=	O
1026	int
;	O
path	pointer
=	O
xmalloc	function
(	O
pathsize	long
)	O
;	O
oldpath	pointer
=	O
xmalloc	function
(	O
oldpathsize	long
)	O
;	O
oldpath	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
oldcount	int
=	O
0	int
;	O
if	O
(	O
NULL	O
==	O
fgets	function
(	O
bigrams	array
,	O
257	int
,	O
fp	pointer
)	O
)	O
inerr	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
256	int
!=	O
fwrite	function
(	O
bigrams	array
,	O
1	int
,	O
256	int
,	O
stdout	pointer
)	O
)	O
outerr	function
(	O
)	O
;	O
if	O
(	O
EOF	O
==	O
fclose	function
(	O
fp	pointer
)	O
)	O
inerr	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
while	O
(	O
(	O
line_len	int
=	O
getline	function
(	O
&	O
path	pointer
,	O
&	O
pathsize	long
,	O
stdin	pointer
)	O
)	O
>	O
0	int
)	O
{	O
char	O
*	O
pp	pointer
;	O
path	pointer
[	O
line_len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
pp	pointer
=	O
path	pointer
;	O
*	O
pp	pointer
!=	O
'\0'	O
;	O
pp	pointer
++	O
)	O
{	O
if	O
(	O
!	O
(	O
*	O
pp	pointer
>=	O
040	int
&&	O
*	O
pp	pointer
<	O
0177	int
)	O
)	O
*	O
pp	pointer
=	O
'?'	O
;	O
}	O
count	int
=	O
prefix_length	function
(	O
oldpath	pointer
,	O
path	pointer
)	O
;	O
diffcount	int
=	O
count	int
-	O
oldcount	int
;	O
oldcount	int
=	O
count	int
;	O
if	O
(	O
diffcount	int
<	O
-	O
LOCATEDB_OLD_OFFSET	int
||	O
diffcount	int
>	O
LOCATEDB_OLD_OFFSET	int
)	O
{	O
if	O
(	O
EOF	O
==	O
-	O
putc	function
(	O
LOCATEDB_OLD_ESCAPE	int
,	O
stdout	pointer
)	O
)	O
outerr	function
(	O
)	O
;	O
if	O
(	O
!	O
putword	function
(	O
stdout	pointer
,	O
diffcount	int
+	O
LOCATEDB_OLD_OFFSET	int
,	O
GetwordEndianStateNative	int
)	O
)	O
outerr	function
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
EOF	O
==	O
putc	function
(	O
diffcount	int
+	O
LOCATEDB_OLD_OFFSET	int
,	O
stdout	pointer
)	O
)	O
outerr	function
(	O
)	O
;	O
}	O
for	O
(	O
pp	pointer
=	O
path	pointer
+	O
count	int
;	O
*	O
pp	pointer
!=	O
'\0'	O
;	O
pp	pointer
+=	O
2	int
)	O
{	O
if	O
(	O
pp	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
{	O
putchar	function
(	O
*	O
pp	pointer
)	O
;	O
break	O
;	O
}	O
bigram	array
[	O
0	int
]	O
=	O
*	O
pp	pointer
;	O
bigram	array
[	O
1	int
]	O
=	O
pp	pointer
[	O
1	int
]	O
;	O
code	int
=	O
strindex	function
(	O
bigrams	array
,	O
bigram	array
)	O
;	O
if	O
(	O
code	int
%	O
2	int
==	O
0	int
)	O
putchar	function
(	O
(	O
code	int
/	O
2	int
)	O
|	O
0200	int
)	O
;	O
else	O
fputs	function
(	O
bigram	array
,	O
stdout	pointer
)	O
;	O
}	O
{	O
char	O
*	O
tmppath	pointer
=	O
oldpath	pointer
;	O
size_t	long
tmppathsize	long
=	O
oldpathsize	long
;	O
oldpath	pointer
=	O
path	pointer
;	O
oldpathsize	long
=	O
pathsize	long
;	O
path	pointer
=	O
tmppath	pointer
;	O
pathsize	long
=	O
tmppathsize	long
;	O
}	O
}	O
free	function
(	O
path	pointer
)	O
;	O
free	function
(	O
oldpath	pointer
)	O
;	O
return	O
0	int
;	O
}	O
