int	O
get_addrs	function
(	O
char	O
*	O
my_machine_name	pointer
,	O
char	O
*	O
his_machine_name	pointer
)	O
{	O
struct	O
hostent	struct
*	O
hp	pointer
;	O
struct	O
servent	struct
*	O
sp	pointer
;	O
msg	struct
.	O
pid	int
=	O
htonl	function
(	O
getpid	function
(	O
)	O
)	O
;	O
hp	pointer
=	O
gethostbyname	function
(	O
my_machine_name	pointer
)	O
;	O
if	O
(	O
hp	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"talk: %s: "	pointer
,	O
my_machine_name	pointer
)	O
;	O
herror	function
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
memmove	function
(	O
&	O
my_machine_addr	struct
,	O
hp	pointer
->	O
h_addr	O
,	O
hp	pointer
->	O
h_length	int
)	O
;	O
if	O
(	O
strcmp	function
(	O
his_machine_name	pointer
,	O
my_machine_name	pointer
)	O
)	O
{	O
hp	pointer
=	O
gethostbyname	function
(	O
his_machine_name	pointer
)	O
;	O
if	O
(	O
hp	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"talk: %s: "	pointer
,	O
his_machine_name	pointer
)	O
;	O
herror	function
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
memmove	function
(	O
&	O
his_machine_addr	struct
,	O
hp	pointer
->	O
h_addr	O
,	O
hp	pointer
->	O
h_length	int
)	O
;	O
}	O
else	O
his_machine_addr	struct
=	O
my_machine_addr	struct
;	O
sp	pointer
=	O
getservbyname	function
(	O
"ntalk"	pointer
,	O
"udp"	pointer
)	O
;	O
if	O
(	O
sp	pointer
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"talk: %s/%s: service is not registered.\n"	pointer
,	O
"ntalk"	pointer
,	O
"udp"	pointer
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
daemon_port	short
=	O
sp	pointer
->	O
s_port	int
;	O
return	O
0	int
;	O
}	O
