static	O
double	O
cholesky_norm1	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
;	O
static	O
int	O
cholesky_Ainv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
;	O
static	O
int	O
cholesky_decomp_L2	function
(	O
gsl_matrix	struct
*	O
A	pointer
)	O
;	O
static	O
int	O
cholesky_decomp_L3	function
(	O
gsl_matrix	struct
*	O
A	pointer
)	O
;	O
int	O
gsl_linalg_cholesky_decomp	function
(	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_decomp1	function
(	O
A	pointer
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
{	O
gsl_matrix_transpose_tricpy	function
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
A	pointer
,	O
A	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
gsl_linalg_cholesky_decomp1	function
(	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Cholesky decomposition requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_transpose_tricpy	function
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
A	pointer
,	O
A	pointer
)	O
;	O
return	O
cholesky_decomp_L3	function
(	O
A	pointer
)	O
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_solve	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
LLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
status	int
=	O
gsl_linalg_cholesky_svx	function
(	O
LLT	pointer
,	O
x	double
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_svx	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
LLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
LLT	pointer
,	O
x	double
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
LLT	pointer
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_solve_mat	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
const	O
gsl_matrix	struct
*	O
B	pointer
,	O
gsl_matrix	struct
*	O
X	pointer
)	O
{	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
LLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
B	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match B size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size2	long
!=	O
X	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_matrix_memcpy	function
(	O
X	pointer
,	O
B	pointer
)	O
;	O
status	int
=	O
gsl_linalg_cholesky_svx_mat	function
(	O
LLT	pointer
,	O
X	pointer
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_svx_mat	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
gsl_matrix	struct
*	O
X	pointer
)	O
{	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
LLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size2	long
!=	O
X	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_blas_dtrsm	function
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
LLT	pointer
,	O
X	pointer
)	O
;	O
gsl_blas_dtrsm	function
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
LLT	pointer
,	O
X	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_invert	function
(	O
gsl_matrix	struct
*	O
LLT	pointer
)	O
{	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
LLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_linalg_tri_invert	function
(	O
CblasLower	int
,	O
CblasNonUnit	int
,	O
LLT	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_tri_LTL	function
(	O
LLT	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_matrix_transpose_tricpy	function
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
LLT	pointer
,	O
LLT	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_decomp_unit	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
D	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
size_t	long
i	long
,	O
j	long
;	O
int	O
stat_chol	int
=	O
gsl_linalg_cholesky_decomp1	function
(	O
A	pointer
)	O
;	O
if	O
(	O
stat_chol	int
==	O
GSL_SUCCESS	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
const	O
double	O
C_ii	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
D	pointer
,	O
i	long
,	O
C_ii	double
*	O
C_ii	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
j	long
,	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
/	O
sqrt	function
(	O
gsl_vector_get	function
(	O
D	pointer
,	O
j	long
)	O
)	O
)	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
j	long
,	O
gsl_matrix_get	function
(	O
A	pointer
,	O
j	long
,	O
i	long
)	O
)	O
;	O
}	O
return	O
stat_chol	int
;	O
}	O
int	O
gsl_linalg_cholesky_scale	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
S	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"A is not a square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
S	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"S must have length N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
Aii	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
i	long
)	O
;	O
if	O
(	O
Aii	double
<=	O
0.0	int
)	O
gsl_vector_set	function
(	O
S	pointer
,	O
i	long
,	O
1.0	int
)	O
;	O
else	O
gsl_vector_set	function
(	O
S	pointer
,	O
i	long
,	O
1.0	int
/	O
sqrt	function
(	O
Aii	double
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_scale_apply	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
const	O
gsl_vector	struct
*	O
S	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"A is not a square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
S	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"S must have length N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
double	O
sj	double
=	O
gsl_vector_get	function
(	O
S	pointer
,	O
j	long
)	O
;	O
for	O
(	O
i	long
=	O
j	long
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
si	double
=	O
gsl_vector_get	function
(	O
S	pointer
,	O
i	long
)	O
;	O
double	O
*	O
Aij	pointer
=	O
gsl_matrix_ptr	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
*	O
Aij	pointer
*=	O
si	double
*	O
sj	double
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_decomp2	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
S	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"cholesky decomposition requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
S	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"S must have length N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_scale	function
(	O
A	pointer
,	O
S	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_scale_apply	function
(	O
A	pointer
,	O
S	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_decomp1	function
(	O
A	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_svx2	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
const	O
gsl_vector	struct
*	O
S	pointer
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
LLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size2	long
!=	O
S	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match S"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_mul	function
(	O
x	double
,	O
S	pointer
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
LLT	pointer
,	O
x	double
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
LLT	pointer
,	O
x	double
)	O
;	O
gsl_vector_mul	function
(	O
x	double
,	O
S	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_solve2	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
const	O
gsl_vector	struct
*	O
S	pointer
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
LLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
S	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match S size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
status	int
=	O
gsl_linalg_cholesky_svx2	function
(	O
LLT	pointer
,	O
S	pointer
,	O
x	double
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_rcond	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
double	O
*	O
rcond	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
LLT	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
LLT	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
3	int
*	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"work vector must have length 3*N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
double	O
Anorm	double
=	O
cholesky_norm1	function
(	O
LLT	pointer
,	O
work	pointer
)	O
;	O
double	O
Ainvnorm	pointer
;	O
*	O
rcond	pointer
=	O
0.0	int
;	O
if	O
(	O
Anorm	double
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
status	int
=	O
gsl_linalg_invnorm1	function
(	O
N	int
,	O
cholesky_Ainv	function
,	O
(	O
void	O
*	O
)	O
LLT	pointer
,	O
&	O
Ainvnorm	pointer
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Ainvnorm	pointer
!=	O
0.0	int
)	O
*	O
rcond	pointer
=	O
(	O
1.0	int
/	O
Anorm	double
)	O
/	O
Ainvnorm	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
double	O
cholesky_norm1	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
LLT	pointer
->	O
size1	long
;	O
double	O
max	double
=	O
0.0	int
;	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
double	O
sum	double
=	O
0.0	int
;	O
gsl_vector_const_view	struct
lj	struct
=	O
gsl_matrix_const_subrow	function
(	O
LLT	pointer
,	O
j	long
,	O
0	int
,	O
j	long
+	O
1	int
)	O
;	O
double	O
Ajj	double
;	O
gsl_blas_ddot	function
(	O
&	O
lj	struct
.	O
vector	struct
,	O
&	O
lj	struct
.	O
vector	struct
,	O
&	O
Ajj	double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
j	long
;	O
++	O
i	long
)	O
{	O
double	O
*	O
wi	pointer
=	O
gsl_vector_ptr	function
(	O
work	pointer
,	O
i	long
)	O
;	O
double	O
Aij	pointer
=	O
gsl_matrix_get	function
(	O
LLT	pointer
,	O
i	long
,	O
j	long
)	O
;	O
double	O
absAij	double
=	O
fabs	function
(	O
Aij	pointer
)	O
;	O
sum	double
+=	O
absAij	double
;	O
*	O
wi	pointer
+=	O
absAij	double
;	O
}	O
gsl_vector_set	function
(	O
work	pointer
,	O
j	long
,	O
sum	double
+	O
fabs	function
(	O
Ajj	double
)	O
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
wi	pointer
=	O
gsl_vector_get	function
(	O
work	pointer
,	O
i	long
)	O
;	O
max	double
=	O
GSL_MAX	O
(	O
max	double
,	O
wi	pointer
)	O
;	O
}	O
return	O
max	double
;	O
}	O
static	O
int	O
cholesky_Ainv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
{	O
int	O
status	int
;	O
gsl_matrix	struct
*	O
A	pointer
=	O
(	O
gsl_matrix	struct
*	O
)	O
params	pointer
;	O
(	O
void	O
)	O
TransA	enum
;	O
status	int
=	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
A	pointer
,	O
x	double
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
A	pointer
,	O
x	double
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
cholesky_decomp_L2	function
(	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Cholesky decomposition requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
double	O
ajj	double
;	O
gsl_vector_view	struct
v	pointer
=	O
gsl_matrix_subcolumn	function
(	O
A	pointer
,	O
j	long
,	O
j	long
,	O
N	int
-	O
j	long
)	O
;	O
if	O
(	O
j	long
>	O
0	int
)	O
{	O
gsl_vector_view	struct
w	pointer
=	O
gsl_matrix_subrow	function
(	O
A	pointer
,	O
j	long
,	O
0	int
,	O
j	long
)	O
;	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
j	long
,	O
0	int
,	O
N	int
-	O
j	long
,	O
j	long
)	O
;	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
&	O
m	pointer
.	O
matrix	struct
,	O
&	O
w	pointer
.	O
vector	struct
,	O
1.0	int
,	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
}	O
ajj	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
j	long
,	O
j	long
)	O
;	O
if	O
(	O
ajj	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix is not positive definite"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
ajj	double
=	O
sqrt	function
(	O
ajj	double
)	O
;	O
gsl_vector_scale	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
1.0	int
/	O
ajj	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
cholesky_decomp_L3	function
(	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Cholesky decomposition requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<=	O
CROSSOVER_CHOLESKY	O
)	O
{	O
return	O
cholesky_decomp_L2	function
(	O
A	pointer
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_LINALG_SPLIT	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_view	struct
A11	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct
A21	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct
A22	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
status	int
=	O
cholesky_decomp_L3	function
(	O
&	O
A11	struct
.	O
matrix	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_blas_dtrsm	function
(	O
CblasRight	int
,	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
&	O
A11	struct
.	O
matrix	struct
,	O
&	O
A21	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_dsyrk	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
&	O
A21	struct
.	O
matrix	struct
,	O
1.0	int
,	O
&	O
A22	struct
.	O
matrix	struct
)	O
;	O
status	int
=	O
cholesky_decomp_L3	function
(	O
&	O
A22	struct
.	O
matrix	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
