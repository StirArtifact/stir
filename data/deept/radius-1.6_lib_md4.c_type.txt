static	O
grad_uint32_t	int
A	int
,	O
B	int
,	O
C	int
,	O
D	int
;	O
static	O
grad_uint32_t	int
F	function
(	O
grad_uint32_t	int
X	int
,	O
grad_uint32_t	int
Y	int
,	O
grad_uint32_t	int
Z	int
)	O
{	O
return	O
(	O
X	int
&	O
Y	int
)	O
|	O
(	O
(	O
~	O
X	int
)	O
&	O
Z	int
)	O
;	O
}	O
static	O
grad_uint32_t	int
G	function
(	O
grad_uint32_t	int
X	int
,	O
grad_uint32_t	int
Y	int
,	O
grad_uint32_t	int
Z	int
)	O
{	O
return	O
(	O
X	int
&	O
Y	int
)	O
|	O
(	O
X	int
&	O
Z	int
)	O
|	O
(	O
Y	int
&	O
Z	int
)	O
;	O
}	O
static	O
grad_uint32_t	int
H	function
(	O
grad_uint32_t	int
X	int
,	O
grad_uint32_t	int
Y	int
,	O
grad_uint32_t	int
Z	int
)	O
{	O
return	O
X	int
^	O
Y	int
^	O
Z	int
;	O
}	O
static	O
grad_uint32_t	int
lshift	function
(	O
grad_uint32_t	int
x	int
,	O
int	O
s	int
)	O
{	O
x	int
&=	O
0xFFFFFFFF	int
;	O
return	O
(	O
(	O
x	int
<<	O
s	int
)	O
&	O
0xFFFFFFFF	int
)	O
|	O
(	O
x	int
>>	O
(	O
32	int
-	O
s	int
)	O
)	O
;	O
}	O
static	O
void	O
mdfour64	function
(	O
grad_uint32_t	int
*	O
M	pointer
)	O
{	O
int	O
j	int
;	O
grad_uint32_t	int
AA	int
,	O
BB	int
,	O
CC	int
,	O
DD	int
;	O
grad_uint32_t	int
X	int
[	O
16	int
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
16	int
;	O
j	int
++	O
)	O
X	int
[	O
j	int
]	O
=	O
M	pointer
[	O
j	int
]	O
;	O
AA	int
=	O
A	int
;	O
BB	int
=	O
B	int
;	O
CC	int
=	O
C	int
;	O
DD	int
=	O
D	int
;	O
ROUND1	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
0	int
,	O
3	int
)	O
;	O
ROUND1	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
1	int
,	O
7	int
)	O
;	O
ROUND1	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
2	int
,	O
11	int
)	O
;	O
ROUND1	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
3	int
,	O
19	int
)	O
;	O
ROUND1	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
4	int
,	O
3	int
)	O
;	O
ROUND1	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
5	int
,	O
7	int
)	O
;	O
ROUND1	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
6	int
,	O
11	int
)	O
;	O
ROUND1	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
7	int
,	O
19	int
)	O
;	O
ROUND1	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
8	int
,	O
3	int
)	O
;	O
ROUND1	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
9	int
,	O
7	int
)	O
;	O
ROUND1	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
10	int
,	O
11	int
)	O
;	O
ROUND1	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
11	int
,	O
19	int
)	O
;	O
ROUND1	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
12	int
,	O
3	int
)	O
;	O
ROUND1	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
13	int
,	O
7	int
)	O
;	O
ROUND1	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
14	int
,	O
11	int
)	O
;	O
ROUND1	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
15	int
,	O
19	int
)	O
;	O
ROUND2	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
0	int
,	O
3	int
)	O
;	O
ROUND2	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
4	int
,	O
5	int
)	O
;	O
ROUND2	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
8	int
,	O
9	int
)	O
;	O
ROUND2	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
12	int
,	O
13	int
)	O
;	O
ROUND2	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
1	int
,	O
3	int
)	O
;	O
ROUND2	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
5	int
,	O
5	int
)	O
;	O
ROUND2	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
9	int
,	O
9	int
)	O
;	O
ROUND2	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
13	int
,	O
13	int
)	O
;	O
ROUND2	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
2	int
,	O
3	int
)	O
;	O
ROUND2	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
6	int
,	O
5	int
)	O
;	O
ROUND2	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
10	int
,	O
9	int
)	O
;	O
ROUND2	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
14	int
,	O
13	int
)	O
;	O
ROUND2	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
3	int
,	O
3	int
)	O
;	O
ROUND2	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
7	int
,	O
5	int
)	O
;	O
ROUND2	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
11	int
,	O
9	int
)	O
;	O
ROUND2	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
15	int
,	O
13	int
)	O
;	O
ROUND3	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
0	int
,	O
3	int
)	O
;	O
ROUND3	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
8	int
,	O
9	int
)	O
;	O
ROUND3	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
4	int
,	O
11	int
)	O
;	O
ROUND3	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
12	int
,	O
15	int
)	O
;	O
ROUND3	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
2	int
,	O
3	int
)	O
;	O
ROUND3	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
10	int
,	O
9	int
)	O
;	O
ROUND3	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
6	int
,	O
11	int
)	O
;	O
ROUND3	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
14	int
,	O
15	int
)	O
;	O
ROUND3	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
1	int
,	O
3	int
)	O
;	O
ROUND3	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
9	int
,	O
9	int
)	O
;	O
ROUND3	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
5	int
,	O
11	int
)	O
;	O
ROUND3	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
13	int
,	O
15	int
)	O
;	O
ROUND3	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
3	int
,	O
3	int
)	O
;	O
ROUND3	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
11	int
,	O
9	int
)	O
;	O
ROUND3	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
7	int
,	O
11	int
)	O
;	O
ROUND3	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
15	int
,	O
15	int
)	O
;	O
A	int
+=	O
AA	int
;	O
B	int
+=	O
BB	int
;	O
C	int
+=	O
CC	int
;	O
D	int
+=	O
DD	int
;	O
A	int
&=	O
0xFFFFFFFF	int
;	O
B	int
&=	O
0xFFFFFFFF	int
;	O
C	int
&=	O
0xFFFFFFFF	int
;	O
D	int
&=	O
0xFFFFFFFF	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
16	int
;	O
j	int
++	O
)	O
X	int
[	O
j	int
]	O
=	O
0	int
;	O
}	O
static	O
void	O
copy64	function
(	O
grad_uint32_t	int
*	O
M	pointer
,	O
unsigned	O
char	O
const	O
*	O
in	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
16	int
;	O
i	int
++	O
)	O
M	pointer
[	O
i	int
]	O
=	O
(	O
in	pointer
[	O
i	int
*	O
4	int
+	O
3	int
]	O
<<	O
24	int
)	O
|	O
(	O
in	pointer
[	O
i	int
*	O
4	int
+	O
2	int
]	O
<<	O
16	int
)	O
|	O
(	O
in	pointer
[	O
i	int
*	O
4	int
+	O
1	int
]	O
<<	O
8	int
)	O
|	O
(	O
in	pointer
[	O
i	int
*	O
4	int
+	O
0	int
]	O
<<	O
0	int
)	O
;	O
}	O
static	O
void	O
copy4	function
(	O
unsigned	O
char	O
*	O
out	pointer
,	O
grad_uint32_t	int
x	int
)	O
{	O
out	pointer
[	O
0	int
]	O
=	O
x	int
&	O
0xFF	int
;	O
out	pointer
[	O
1	int
]	O
=	O
(	O
x	int
>>	O
8	int
)	O
&	O
0xFF	int
;	O
out	pointer
[	O
2	int
]	O
=	O
(	O
x	int
>>	O
16	int
)	O
&	O
0xFF	int
;	O
out	pointer
[	O
3	int
]	O
=	O
(	O
x	int
>>	O
24	int
)	O
&	O
0xFF	int
;	O
}	O
void	O
grad_md4_calc	function
(	O
unsigned	O
char	O
*	O
out	pointer
,	O
unsigned	O
char	O
const	O
*	O
in	pointer
,	O
int	O
n	int
)	O
{	O
unsigned	O
char	O
buf	array
[	O
128	int
]	O
;	O
grad_uint32_t	int
M	pointer
[	O
16	int
]	O
;	O
grad_uint32_t	int
b	int
=	O
n	int
*	O
8	int
;	O
int	O
i	int
;	O
A	int
=	O
0x67452301	int
;	O
B	int
=	O
0xefcdab89	int
;	O
C	int
=	O
0x98badcfe	int
;	O
D	int
=	O
0x10325476	int
;	O
while	O
(	O
n	int
>	O
64	int
)	O
{	O
copy64	function
(	O
M	pointer
,	O
in	pointer
)	O
;	O
mdfour64	function
(	O
M	pointer
)	O
;	O
in	pointer
+=	O
64	int
;	O
n	int
-=	O
64	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
128	int
;	O
i	int
++	O
)	O
buf	array
[	O
i	int
]	O
=	O
0	int
;	O
memcpy	function
(	O
buf	array
,	O
in	pointer
,	O
n	int
)	O
;	O
buf	array
[	O
n	int
]	O
=	O
0x80	int
;	O
if	O
(	O
n	int
<=	O
55	int
)	O
{	O
copy4	function
(	O
buf	array
+	O
56	int
,	O
b	int
)	O
;	O
copy64	function
(	O
M	pointer
,	O
buf	array
)	O
;	O
mdfour64	function
(	O
M	pointer
)	O
;	O
}	O
else	O
{	O
copy4	function
(	O
buf	array
+	O
120	int
,	O
b	int
)	O
;	O
copy64	function
(	O
M	pointer
,	O
buf	array
)	O
;	O
mdfour64	function
(	O
M	pointer
)	O
;	O
copy64	function
(	O
M	pointer
,	O
buf	array
+	O
64	int
)	O
;	O
mdfour64	function
(	O
M	pointer
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
128	int
;	O
i	int
++	O
)	O
buf	array
[	O
i	int
]	O
=	O
0	int
;	O
copy64	function
(	O
M	pointer
,	O
buf	array
)	O
;	O
copy4	function
(	O
out	pointer
,	O
A	int
)	O
;	O
copy4	function
(	O
out	pointer
+	O
4	int
,	O
B	int
)	O
;	O
copy4	function
(	O
out	pointer
+	O
8	int
,	O
C	int
)	O
;	O
copy4	function
(	O
out	pointer
+	O
12	int
,	O
D	int
)	O
;	O
A	int
=	O
B	int
=	O
C	int
=	O
D	int
=	O
0	int
;	O
}	O
