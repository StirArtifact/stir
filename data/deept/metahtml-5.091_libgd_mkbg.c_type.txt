static	O
void	O
parse_rgb	function
(	O
char	O
*	O
string	pointer
,	O
int	O
*	O
rp	pointer
,	O
int	O
*	O
gp	pointer
,	O
int	O
*	O
bp	pointer
)	O
;	O
static	O
void	O
usage	function
(	O
void	O
)	O
;	O
static	O
void	O
cleanup	function
(	O
char	O
*	O
string	pointer
)	O
;	O
static	O
int	O
parse_hex_pair	function
(	O
char	O
*	O
pair_start	pointer
)	O
;	O
static	O
char	O
*	O
*	O
args_passed	pointer
=	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
static	O
int	O
args_passed_len	int
=	O
0	int
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
gdImagePtr	pointer
image	pointer
;	O
int	O
total_width	int
=	O
1000	int
;	O
char	O
*	O
left_rgb	pointer
=	O
"000000"	pointer
,	O
*	O
right_rgb	pointer
=	O
"FFFFFF"	pointer
;	O
char	O
*	O
separator_rgb	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
,	O
*	O
page_rgb	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
int	O
left_width	int
=	O
80	int
,	O
page_width	int
=	O
0	int
,	O
right_width	int
=	O
1200	int
;	O
char	O
*	O
webargs	pointer
=	O
getenv	function
(	O
"QUERY_STRING"	pointer
)	O
;	O
int	O
height	int
=	O
4	int
;	O
int	O
right_trans	int
=	O
0	int
;	O
int	O
left_trans	int
=	O
0	int
;	O
char	O
*	O
temp	pointer
;	O
int	O
r	int
,	O
g	int
,	O
b	int
,	O
bg	int
,	O
fg	int
;	O
args_passed	pointer
=	O
argv	array
;	O
args_passed_len	int
=	O
argc	int
;	O
if	O
(	O
webargs	pointer
)	O
{	O
register	O
int	O
i	int
;	O
webargs	pointer
=	O
strdup	function
(	O
webargs	pointer
)	O
;	O
cleanup	function
(	O
webargs	pointer
)	O
;	O
temp	pointer
=	O
strstr	function
(	O
webargs	pointer
,	O
"TOTAL-WIDTH="	pointer
)	O
;	O
if	O
(	O
temp	pointer
)	O
total_width	int
=	O
atoi	function
(	O
temp	pointer
+	O
12	int
)	O
;	O
temp	pointer
=	O
strstr	function
(	O
webargs	pointer
,	O
"LEFT-WIDTH="	pointer
)	O
;	O
if	O
(	O
temp	pointer
)	O
left_width	int
=	O
atoi	function
(	O
temp	pointer
+	O
11	int
)	O
;	O
temp	pointer
=	O
strstr	function
(	O
webargs	pointer
,	O
"RIGHT-WIDTH="	pointer
)	O
;	O
if	O
(	O
temp	pointer
)	O
right_width	int
=	O
atoi	function
(	O
temp	pointer
+	O
12	int
)	O
;	O
temp	pointer
=	O
strstr	function
(	O
webargs	pointer
,	O
"LEFT-RGB="	pointer
)	O
;	O
if	O
(	O
temp	pointer
)	O
{	O
if	O
(	O
temp	pointer
[	O
9	int
]	O
==	O
'#'	O
)	O
temp	pointer
++	O
;	O
temp	pointer
=	O
strdup	function
(	O
temp	pointer
+	O
9	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
temp	pointer
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
temp	pointer
[	O
i	int
]	O
!=	O
'\0'	O
;	O
i	int
++	O
)	O
;	O
temp	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
left_rgb	pointer
=	O
temp	pointer
;	O
}	O
temp	pointer
=	O
strstr	function
(	O
webargs	pointer
,	O
"RIGHT-RGB="	pointer
)	O
;	O
if	O
(	O
temp	pointer
)	O
{	O
if	O
(	O
temp	pointer
[	O
10	int
]	O
==	O
'#'	O
)	O
temp	pointer
++	O
;	O
temp	pointer
=	O
strdup	function
(	O
temp	pointer
+	O
10	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
temp	pointer
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
temp	pointer
[	O
i	int
]	O
!=	O
'\0'	O
;	O
i	int
++	O
)	O
;	O
temp	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
right_rgb	pointer
=	O
temp	pointer
;	O
}	O
temp	pointer
=	O
strstr	function
(	O
webargs	pointer
,	O
"LEFT-TRANS="	pointer
)	O
;	O
if	O
(	O
temp	pointer
)	O
left_trans	int
=	O
1	int
;	O
temp	pointer
=	O
strstr	function
(	O
webargs	pointer
,	O
"RIGHT-TRANS="	pointer
)	O
;	O
if	O
(	O
temp	pointer
)	O
right_trans	int
=	O
1	int
;	O
temp	pointer
=	O
strstr	function
(	O
webargs	pointer
,	O
"SEPARATOR-RGB="	pointer
)	O
;	O
if	O
(	O
temp	pointer
)	O
{	O
if	O
(	O
temp	pointer
[	O
10	int
]	O
==	O
'#'	O
)	O
temp	pointer
++	O
;	O
temp	pointer
=	O
strdup	function
(	O
temp	pointer
+	O
10	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
temp	pointer
[	O
i	int
]	O
!=	O
'\0'	O
&&	O
temp	pointer
[	O
i	int
]	O
!=	O
'\0'	O
;	O
i	int
++	O
)	O
;	O
temp	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
separator_rgb	pointer
=	O
temp	pointer
;	O
}	O
}	O
else	O
{	O
int	O
arg_index	int
=	O
1	int
;	O
while	O
(	O
arg_index	int
<	O
argc	int
)	O
{	O
char	O
*	O
arg	pointer
=	O
argv	array
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-lw"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--left-width"	pointer
)	O
==	O
0	int
)	O
)	O
left_width	int
=	O
atoi	function
(	O
argv	array
[	O
arg_index	int
++	O
]	O
)	O
;	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-rw"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--right-width"	pointer
)	O
==	O
0	int
)	O
)	O
right_width	int
=	O
atoi	function
(	O
argv	array
[	O
arg_index	int
++	O
]	O
)	O
;	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-pw"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--page-width"	pointer
)	O
==	O
0	int
)	O
)	O
page_width	int
=	O
atoi	function
(	O
argv	array
[	O
arg_index	int
++	O
]	O
)	O
;	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-lt"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--left-trans"	pointer
)	O
==	O
0	int
)	O
)	O
left_trans	int
=	O
1	int
;	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-rt"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--right-trans"	pointer
)	O
==	O
0	int
)	O
)	O
right_trans	int
=	O
1	int
;	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-rrgb"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--right-rgb"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
temp	pointer
=	O
argv	array
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
*	O
temp	pointer
==	O
'#'	O
)	O
temp	pointer
++	O
;	O
right_rgb	pointer
=	O
strdup	function
(	O
temp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-lrgb"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--left-rgb"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
temp	pointer
=	O
argv	array
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
*	O
temp	pointer
==	O
'#'	O
)	O
temp	pointer
++	O
;	O
left_rgb	pointer
=	O
strdup	function
(	O
temp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-prgb"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--page-rgb"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
temp	pointer
=	O
argv	array
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
*	O
temp	pointer
==	O
'#'	O
)	O
temp	pointer
++	O
;	O
page_rgb	pointer
=	O
strdup	function
(	O
temp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-srgb"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--separator-rgb"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
temp	pointer
=	O
argv	array
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
*	O
temp	pointer
==	O
'#'	O
)	O
temp	pointer
++	O
;	O
separator_rgb	pointer
=	O
strdup	function
(	O
temp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-h"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--height"	pointer
)	O
==	O
0	int
)	O
)	O
height	int
=	O
atoi	function
(	O
argv	array
[	O
arg_index	int
++	O
]	O
)	O
;	O
else	O
usage	function
(	O
)	O
;	O
}	O
}	O
image	pointer
=	O
gdImageCreate	function
(	O
left_width	int
+	O
page_width	int
+	O
right_width	int
,	O
height	int
)	O
;	O
parse_rgb	function
(	O
left_rgb	pointer
,	O
&	O
r	int
,	O
&	O
g	int
,	O
&	O
b	int
)	O
;	O
bg	int
=	O
gdImageColorAllocate	function
(	O
image	pointer
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
parse_rgb	function
(	O
right_rgb	pointer
,	O
&	O
r	int
,	O
&	O
g	int
,	O
&	O
b	int
)	O
;	O
fg	int
=	O
gdImageColorAllocate	function
(	O
image	pointer
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageFilledRectangle	function
(	O
image	pointer
,	O
0	int
,	O
0	int
,	O
left_width	int
,	O
height	int
,	O
bg	int
)	O
;	O
gdImageFilledRectangle	function
(	O
image	pointer
,	O
left_width	int
,	O
0	int
,	O
left_width	int
+	O
page_width	int
+	O
right_width	int
,	O
height	int
,	O
fg	int
)	O
;	O
if	O
(	O
separator_rgb	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
int	O
separator	int
;	O
parse_rgb	function
(	O
separator_rgb	pointer
,	O
&	O
r	int
,	O
&	O
g	int
,	O
&	O
b	int
)	O
;	O
separator	int
=	O
gdImageColorAllocate	function
(	O
image	pointer
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageFilledRectangle	function
(	O
image	pointer
,	O
left_width	int
-	O
4	int
,	O
0	int
,	O
left_width	int
,	O
height	int
,	O
separator	int
)	O
;	O
}	O
if	O
(	O
page_width	int
!=	O
0	int
)	O
{	O
if	O
(	O
page_rgb	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
int	O
pagecol	int
;	O
parse_rgb	function
(	O
page_rgb	pointer
,	O
&	O
r	int
,	O
&	O
g	int
,	O
&	O
b	int
)	O
;	O
pagecol	int
=	O
gdImageColorAllocate	function
(	O
image	pointer
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageFilledRectangle	function
(	O
image	pointer
,	O
left_width	int
,	O
0	int
,	O
(	O
left_width	int
+	O
page_width	int
-	O
4	int
)	O
,	O
height	int
,	O
pagecol	int
)	O
;	O
}	O
if	O
(	O
separator_rgb	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
int	O
separator	int
;	O
parse_rgb	function
(	O
separator_rgb	pointer
,	O
&	O
r	int
,	O
&	O
g	int
,	O
&	O
b	int
)	O
;	O
separator	int
=	O
gdImageColorAllocate	function
(	O
image	pointer
,	O
r	int
,	O
g	int
,	O
b	int
)	O
;	O
gdImageFilledRectangle	function
(	O
image	pointer
,	O
left_width	int
+	O
page_width	int
-	O
4	int
,	O
0	int
,	O
left_width	int
+	O
page_width	int
,	O
height	int
,	O
separator	int
)	O
;	O
}	O
}	O
if	O
(	O
left_trans	int
)	O
gdImageColorTransparent	function
(	O
image	pointer
,	O
bg	int
)	O
;	O
else	O
if	O
(	O
right_trans	int
)	O
gdImageColorTransparent	function
(	O
image	pointer
,	O
fg	int
)	O
;	O
if	O
(	O
webargs	pointer
)	O
fprintf	function
(	O
stdout	pointer
,	O
"Content-Type: image/gif\n\n"	pointer
)	O
;	O
gdImageGif	function
(	O
image	pointer
,	O
stdout	pointer
)	O
;	O
gdImageDestroy	function
(	O
image	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
void	O
)	O
{	O
register	O
int	O
i	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: mkbg --left-width 80 --right-width 920 --left-rgb '#000000' --right-rgb '#FFFFFF'\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Args you passed: "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
args_passed_len	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s "	pointer
,	O
args_passed	pointer
[	O
i	int
]	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
static	O
int	O
hex_value	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
islower	function
(	O
c	int
)	O
)	O
c	int
=	O
toupper	function
(	O
c	int
)	O
;	O
c	int
=	O
c	int
-	O
'0'	O
;	O
if	O
(	O
c	int
>	O
9	int
)	O
c	int
=	O
10	int
+	O
(	O
(	O
c	int
+	O
'0'	O
)	O
-	O
'A'	O
)	O
;	O
return	O
(	O
c	int
)	O
;	O
}	O
static	O
void	O
parse_rgb	function
(	O
char	O
*	O
string	pointer
,	O
int	O
*	O
rp	pointer
,	O
int	O
*	O
gp	pointer
,	O
int	O
*	O
bp	pointer
)	O
{	O
register	O
int	O
i	int
;	O
*	O
rp	pointer
=	O
*	O
gp	pointer
=	O
*	O
bp	pointer
=	O
0	int
;	O
if	O
(	O
strchr	function
(	O
string	pointer
,	O
','	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
sscanf	function
(	O
string	pointer
,	O
"%d,%d,%d"	pointer
,	O
rp	pointer
,	O
gp	pointer
,	O
bp	pointer
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
&&	O
string	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
i	int
)	O
{	O
case	O
0	int
:	O
*	O
rp	pointer
=	O
16	int
*	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
1	int
:	O
*	O
rp	pointer
|=	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
*	O
gp	pointer
=	O
16	int
*	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
*	O
gp	pointer
|=	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
4	int
:	O
*	O
bp	pointer
=	O
16	int
*	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
5	int
:	O
*	O
bp	pointer
|=	O
hex_value	function
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
cleanup	function
(	O
char	O
*	O
string	pointer
)	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
len	int
;	O
char	O
*	O
dest	pointer
;	O
len	int
=	O
strlen	function
(	O
string	pointer
)	O
;	O
dest	pointer
=	O
(	O
char	O
*	O
)	O
alloca	function
(	O
1	int
+	O
len	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
j	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
string	pointer
[	O
i	int
]	O
)	O
{	O
case	O
'%'	O
:	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
parse_hex_pair	function
(	O
string	pointer
+	O
i	int
+	O
1	int
)	O
;	O
i	int
+=	O
2	int
;	O
break	O
;	O
case	O
'+'	O
:	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
' '	O
;	O
break	O
;	O
default	O
:	O
dest	pointer
[	O
j	int
++	O
]	O
=	O
string	pointer
[	O
i	int
]	O
;	O
}	O
}	O
dest	pointer
[	O
j	int
]	O
=	O
'\0'	O
;	O
strcpy	function
(	O
string	pointer
,	O
dest	pointer
)	O
;	O
}	O
static	O
int	O
parse_hex_pair	function
(	O
char	O
*	O
pair_start	pointer
)	O
{	O
int	O
value	int
=	O
0	int
;	O
int	O
char1	int
,	O
char2	int
;	O
char1	int
=	O
char2	int
=	O
0	int
;	O
char1	int
=	O
*	O
pair_start	pointer
;	O
if	O
(	O
char1	int
)	O
char2	int
=	O
(	O
pair_start	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
isupper	function
(	O
char1	int
)	O
)	O
char1	int
=	O
tolower	function
(	O
char1	int
)	O
;	O
if	O
(	O
isupper	function
(	O
char2	int
)	O
)	O
char2	int
=	O
tolower	function
(	O
char2	int
)	O
;	O
if	O
(	O
isdigit	function
(	O
char1	int
)	O
)	O
value	int
=	O
char1	int
-	O
'0'	O
;	O
else	O
if	O
(	O
(	O
char1	int
<=	O
'f'	O
)	O
&&	O
(	O
char1	int
>=	O
'a'	O
)	O
)	O
value	int
=	O
10	int
+	O
(	O
char1	int
-	O
'a'	O
)	O
;	O
if	O
(	O
isdigit	function
(	O
char2	int
)	O
)	O
value	int
=	O
(	O
value	int
*	O
16	int
)	O
+	O
(	O
char2	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
(	O
char2	int
<=	O
'f'	O
)	O
&&	O
(	O
char2	int
>=	O
'a'	O
)	O
)	O
value	int
=	O
(	O
value	int
*	O
16	int
)	O
+	O
(	O
10	int
+	O
(	O
char2	int
-	O
'a'	O
)	O
)	O
;	O
return	O
(	O
value	int
)	O
;	O
}	O
