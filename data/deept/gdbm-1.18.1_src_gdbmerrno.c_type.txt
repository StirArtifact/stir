static	O
GDBM_THREAD_LOCAL	O
gdbm_error	int
gdbm_errno_storage	int
=	O
GDBM_NO_ERROR	int
;	O
int	O
*	O
gdbm_errno_location	function
(	O
void	O
)	O
{	O
return	O
&	O
gdbm_errno_storage	int
;	O
}	O
void	O
gdbm_set_errno	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
gdbm_error	int
ec	int
,	O
int	O
fatal	int
)	O
{	O
if	O
(	O
dbf	pointer
)	O
{	O
free	function
(	O
dbf	pointer
->	O
last_errstr	pointer
)	O
;	O
dbf	pointer
->	O
last_errstr	pointer
=	O
NULL	O
;	O
dbf	pointer
->	O
last_error	int
=	O
ec	int
;	O
if	O
(	O
gdbm_syserr	array
[	O
ec	int
]	O
)	O
dbf	pointer
->	O
last_syserror	int
=	O
errno	O
;	O
else	O
dbf	pointer
->	O
last_syserror	int
=	O
0	int
;	O
dbf	pointer
->	O
need_recovery	int
=	O
fatal	int
;	O
}	O
gdbm_errno	O
=	O
ec	int
;	O
}	O
gdbm_error	int
gdbm_last_errno	function
(	O
GDBM_FILE	pointer
dbf	pointer
)	O
{	O
if	O
(	O
!	O
dbf	pointer
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
dbf	pointer
->	O
last_error	int
;	O
}	O
int	O
gdbm_last_syserr	function
(	O
GDBM_FILE	pointer
dbf	pointer
)	O
{	O
if	O
(	O
!	O
dbf	pointer
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
dbf	pointer
->	O
last_syserror	int
;	O
}	O
int	O
gdbm_needs_recovery	function
(	O
GDBM_FILE	pointer
dbf	pointer
)	O
{	O
if	O
(	O
!	O
dbf	pointer
)	O
return	O
0	int
;	O
return	O
dbf	pointer
->	O
need_recovery	int
;	O
}	O
void	O
gdbm_clear_error	function
(	O
GDBM_FILE	pointer
dbf	pointer
)	O
{	O
if	O
(	O
dbf	pointer
)	O
{	O
dbf	pointer
->	O
last_error	int
=	O
GDBM_NO_ERROR	int
;	O
dbf	pointer
->	O
last_syserror	int
=	O
0	int
;	O
free	function
(	O
dbf	pointer
->	O
last_errstr	pointer
)	O
;	O
dbf	pointer
->	O
last_errstr	pointer
=	O
NULL	O
;	O
}	O
}	O
const	O
char	O
*	O
const	O
gdbm_errlist	array
[	O
_GDBM_MAX_ERRNO	O
+	O
1	int
]	O
=	O
{	O
[	O
GDBM_NO_ERROR	int
]	O
=	O
N_	O
(	O
"No error"	pointer
)	O
,	O
[	O
GDBM_MALLOC_ERROR	int
]	O
=	O
N_	O
(	O
"Malloc error"	pointer
)	O
,	O
[	O
GDBM_BLOCK_SIZE_ERROR	int
]	O
=	O
N_	O
(	O
"Block size error"	pointer
)	O
,	O
[	O
GDBM_FILE_OPEN_ERROR	int
]	O
=	O
N_	O
(	O
"File open error"	pointer
)	O
,	O
[	O
GDBM_FILE_WRITE_ERROR	int
]	O
=	O
N_	O
(	O
"File write error"	pointer
)	O
,	O
[	O
GDBM_FILE_SEEK_ERROR	int
]	O
=	O
N_	O
(	O
"File seek error"	pointer
)	O
,	O
[	O
GDBM_FILE_READ_ERROR	int
]	O
=	O
N_	O
(	O
"File read error"	pointer
)	O
,	O
[	O
GDBM_BAD_MAGIC_NUMBER	int
]	O
=	O
N_	O
(	O
"Bad magic number"	pointer
)	O
,	O
[	O
GDBM_EMPTY_DATABASE	int
]	O
=	O
N_	O
(	O
"Empty database"	pointer
)	O
,	O
[	O
GDBM_CANT_BE_READER	int
]	O
=	O
N_	O
(	O
"Can't be reader"	pointer
)	O
,	O
[	O
GDBM_CANT_BE_WRITER	int
]	O
=	O
N_	O
(	O
"Can't be writer"	pointer
)	O
,	O
[	O
GDBM_READER_CANT_DELETE	int
]	O
=	O
N_	O
(	O
"Reader can't delete"	pointer
)	O
,	O
[	O
GDBM_READER_CANT_STORE	int
]	O
=	O
N_	O
(	O
"Reader can't store"	pointer
)	O
,	O
[	O
GDBM_READER_CANT_REORGANIZE	int
]	O
=	O
N_	O
(	O
"Reader can't reorganize"	pointer
)	O
,	O
[	O
GDBM_UNKNOWN_ERROR	int
]	O
=	O
N_	O
(	O
"Should not happen: unused error code"	pointer
)	O
,	O
[	O
GDBM_ITEM_NOT_FOUND	int
]	O
=	O
N_	O
(	O
"Item not found"	pointer
)	O
,	O
[	O
GDBM_REORGANIZE_FAILED	int
]	O
=	O
N_	O
(	O
"Reorganize failed"	pointer
)	O
,	O
[	O
GDBM_CANNOT_REPLACE	int
]	O
=	O
N_	O
(	O
"Cannot replace"	pointer
)	O
,	O
[	O
GDBM_ILLEGAL_DATA	int
]	O
=	O
N_	O
(	O
"Illegal data"	pointer
)	O
,	O
[	O
GDBM_OPT_ALREADY_SET	int
]	O
=	O
N_	O
(	O
"Option already set"	pointer
)	O
,	O
[	O
GDBM_OPT_ILLEGAL	int
]	O
=	O
N_	O
(	O
"Illegal option"	pointer
)	O
,	O
[	O
GDBM_BYTE_SWAPPED	int
]	O
=	O
N_	O
(	O
"Byte-swapped file"	pointer
)	O
,	O
[	O
GDBM_BAD_FILE_OFFSET	int
]	O
=	O
N_	O
(	O
"File header assumes wrong off_t size"	pointer
)	O
,	O
[	O
GDBM_BAD_OPEN_FLAGS	int
]	O
=	O
N_	O
(	O
"Bad file flags"	pointer
)	O
,	O
[	O
GDBM_FILE_STAT_ERROR	int
]	O
=	O
N_	O
(	O
"Cannot stat file"	pointer
)	O
,	O
[	O
GDBM_FILE_EOF	int
]	O
=	O
N_	O
(	O
"Unexpected end of file"	pointer
)	O
,	O
[	O
GDBM_NO_DBNAME	int
]	O
=	O
N_	O
(	O
"Database name not given"	pointer
)	O
,	O
[	O
GDBM_ERR_FILE_OWNER	int
]	O
=	O
N_	O
(	O
"Failed to restore file owner"	pointer
)	O
,	O
[	O
GDBM_ERR_FILE_MODE	int
]	O
=	O
N_	O
(	O
"Failed to restore file mode"	pointer
)	O
,	O
[	O
GDBM_NEED_RECOVERY	int
]	O
=	O
N_	O
(	O
"Database needs recovery"	pointer
)	O
,	O
[	O
GDBM_BACKUP_FAILED	int
]	O
=	O
N_	O
(	O
"Failed to create backup copy"	pointer
)	O
,	O
[	O
GDBM_DIR_OVERFLOW	int
]	O
=	O
N_	O
(	O
"Bucket directory overflow"	pointer
)	O
,	O
[	O
GDBM_BAD_BUCKET	int
]	O
=	O
N_	O
(	O
"Malformed bucket header"	pointer
)	O
,	O
[	O
GDBM_BAD_HEADER	int
]	O
=	O
N_	O
(	O
"Malformed database file header"	pointer
)	O
,	O
[	O
GDBM_BAD_AVAIL	int
]	O
=	O
N_	O
(	O
"Malformed avail_block"	pointer
)	O
,	O
[	O
GDBM_BAD_HASH_TABLE	int
]	O
=	O
N_	O
(	O
"Malformed hash table"	pointer
)	O
,	O
[	O
GDBM_BAD_DIR_ENTRY	int
]	O
=	O
N_	O
(	O
"Invalid directory entry"	pointer
)	O
,	O
[	O
GDBM_FILE_CLOSE_ERROR	int
]	O
=	O
N_	O
(	O
"Error closing file"	pointer
)	O
,	O
[	O
GDBM_FILE_SYNC_ERROR	int
]	O
=	O
N_	O
(	O
"Error synchronizing file"	pointer
)	O
,	O
[	O
GDBM_FILE_TRUNCATE_ERROR	int
]	O
=	O
N_	O
(	O
"Error truncating file"	pointer
)	O
}	O
;	O
const	O
char	O
*	O
gdbm_strerror	function
(	O
gdbm_error	int
error	int
)	O
{	O
if	O
(	O
error	int
<	O
_GDBM_MIN_ERRNO	int
||	O
error	int
>	O
_GDBM_MAX_ERRNO	O
)	O
error	int
=	O
GDBM_UNKNOWN_ERROR	int
;	O
return	O
gettext	function
(	O
gdbm_errlist	array
[	O
error	int
]	O
)	O
;	O
}	O
char	O
const	O
*	O
gdbm_db_strerror	function
(	O
GDBM_FILE	pointer
dbf	pointer
)	O
{	O
if	O
(	O
!	O
dbf	pointer
->	O
last_errstr	pointer
)	O
{	O
char	O
const	O
*	O
errstr	pointer
=	O
gdbm_strerror	function
(	O
dbf	pointer
->	O
last_error	int
)	O
;	O
if	O
(	O
dbf	pointer
->	O
last_syserror	int
)	O
{	O
char	O
const	O
*	O
syserrstr	pointer
=	O
strerror	function
(	O
dbf	pointer
->	O
last_syserror	int
)	O
;	O
size_t	long
len	long
=	O
strlen	function
(	O
errstr	pointer
)	O
+	O
strlen	function
(	O
syserrstr	pointer
)	O
+	O
2	int
;	O
dbf	pointer
->	O
last_errstr	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
dbf	pointer
->	O
last_errstr	pointer
)	O
return	O
errstr	pointer
;	O
strcpy	function
(	O
dbf	pointer
->	O
last_errstr	pointer
,	O
errstr	pointer
)	O
;	O
strcat	function
(	O
dbf	pointer
->	O
last_errstr	pointer
,	O
": "	pointer
)	O
;	O
strcat	function
(	O
dbf	pointer
->	O
last_errstr	pointer
,	O
syserrstr	pointer
)	O
;	O
}	O
else	O
return	O
errstr	pointer
;	O
}	O
return	O
dbf	pointer
->	O
last_errstr	pointer
;	O
}	O
int	O
const	O
gdbm_syserr	array
[	O
_GDBM_MAX_ERRNO	O
+	O
1	int
]	O
=	O
{	O
[	O
GDBM_FILE_OPEN_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_WRITE_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_SEEK_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_READ_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_STAT_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_BACKUP_FAILED	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_CLOSE_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_SYNC_ERROR	int
]	O
=	O
1	int
,	O
[	O
GDBM_FILE_TRUNCATE_ERROR	int
]	O
=	O
1	int
}	O
;	O
int	O
gdbm_check_syserr	function
(	O
gdbm_error	int
n	int
)	O
{	O
if	O
(	O
n	int
>=	O
_GDBM_MIN_ERRNO	int
&&	O
n	int
<=	O
_GDBM_MAX_ERRNO	O
)	O
return	O
gdbm_syserr	array
[	O
n	int
]	O
;	O
return	O
0	int
;	O
}	O
