static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: db_method.c,v 1.6 2014/04/17 20:27:27 sebdiaz Exp $"	pointer
;	O
static	O
int	O
__db_get_byteswapped	function
__P	O
(	O
(	O
DB	struct
*	O
)	O
)	O
;	O
static	O
DBTYPE	enum
__db_get_type	function
__P	O
(	O
(	O
DB	struct
*	O
)	O
)	O
;	O
static	O
int	O
__db_init	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
u_int32_t	int
)	O
)	O
;	O
static	O
int	O
__db_key_range	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
DB_TXN	struct
*	O
,	O
DBT	struct
*	O
,	O
DB_KEY_RANGE	struct
*	O
,	O
u_int32_t	int
)	O
)	O
;	O
static	O
int	O
__db_set_cachesize	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
u_int32_t	int
,	O
u_int32_t	int
,	O
int	O
)	O
)	O
;	O
static	O
int	O
__db_set_dup_compare	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
int	O
(	O
*	O
)	O
(	O
const	O
DBT	struct
*	O
,	O
const	O
DBT	struct
*	O
)	O
)	O
)	O
;	O
static	O
void	O
__db_set_errcall	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
void	O
(	O
*	O
)	O
(	O
const	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
)	O
;	O
static	O
void	O
__db_set_errfile	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
FILE	struct
*	O
)	O
)	O
;	O
static	O
int	O
__db_set_feedback	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
void	O
(	O
*	O
)	O
(	O
DB	struct
*	O
,	O
int	O
,	O
int	O
)	O
)	O
)	O
;	O
static	O
int	O
__db_set_flags	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
u_int32_t	int
)	O
)	O
;	O
static	O
int	O
__db_set_lorder	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
__db_set_malloc	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
void	O
*	O
(	O
*	O
)	O
(	O
size_t	long
)	O
)	O
)	O
;	O
static	O
int	O
__db_set_pagesize	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
u_int32_t	int
)	O
)	O
;	O
static	O
int	O
__db_set_realloc	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
void	O
*	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
size_t	long
)	O
)	O
)	O
;	O
static	O
void	O
__db_set_errpfx	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
const	O
char	O
*	O
)	O
)	O
;	O
static	O
int	O
__db_set_paniccall	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
void	O
(	O
*	O
)	O
(	O
DB_ENV	struct
*	O
,	O
int	O
)	O
)	O
)	O
;	O
static	O
void	O
__dbh_err	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
int	O
,	O
const	O
char	O
*	O
,	O
...	O
)	O
)	O
;	O
static	O
void	O
__dbh_errx	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
const	O
char	O
*	O
,	O
...	O
)	O
)	O
;	O
int	O
CDB_db_create	function
(	O
dbpp	pointer
,	O
dbenv	pointer
,	O
flags	int
)	O
DB	struct
*	O
*	O
dbpp	pointer
;	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
DB	struct
*	O
dbp	pointer
;	O
int	O
ret	int
;	O
switch	O
(	O
flags	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
DB_XA_CREATE	int
:	O
if	O
(	O
dbenv	pointer
!=	O
NULL	O
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"XA applications may not specify an environment to CDB_db_create"	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
dbenv	pointer
=	O
TAILQ_FIRST	O
(	O
&	O
DB_GLOBAL	O
(	O
db_envq	struct
)	O
)	O
;	O
break	O
;	O
default	O
:	O
return	O
(	O
CDB___db_ferr	function
(	O
dbenv	pointer
,	O
"CDB_db_create"	pointer
,	O
0	int
)	O
)	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_calloc	function
(	O
dbenv	pointer
,	O
1	int
,	O
sizeof	O
(	O
*	O
dbp	pointer
)	O
,	O
&	O
dbp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
ret	int
=	O
__db_init	function
(	O
dbp	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
CDB___os_free	function
(	O
dbp	pointer
,	O
sizeof	O
(	O
*	O
dbp	pointer
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
dbenv	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_db_env_create	function
(	O
&	O
dbenv	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___os_free	function
(	O
dbp	pointer
,	O
sizeof	O
(	O
*	O
dbp	pointer
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
dbenv	pointer
->	O
dblocal_ref	int
=	O
0	int
;	O
F_SET	O
(	O
dbenv	pointer
,	O
DB_ENV_DBLOCAL	int
)	O
;	O
}	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_DBLOCAL	int
)	O
)	O
++	O
dbenv	pointer
->	O
dblocal_ref	int
;	O
dbp	pointer
->	O
dbenv	pointer
=	O
dbenv	pointer
;	O
*	O
dbpp	pointer
=	O
dbp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__db_init	function
(	O
dbp	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
int	O
ret	int
;	O
dbp	pointer
->	O
log_fileid	int
=	O
DB_LOGFILEID_INVALID	O
;	O
TAILQ_INIT	O
(	O
&	O
dbp	pointer
->	O
free_queue	struct
)	O
;	O
TAILQ_INIT	O
(	O
&	O
dbp	pointer
->	O
active_queue	struct
)	O
;	O
TAILQ_INIT	O
(	O
&	O
dbp	pointer
->	O
join_queue	struct
)	O
;	O
FLD_SET	O
(	O
dbp	pointer
->	O
am_ok	int
,	O
DB_OK_BTREE	int
|	O
DB_OK_HASH	int
|	O
DB_OK_QUEUE	int
|	O
DB_OK_RECNO	int
)	O
;	O
dbp	pointer
->	O
close	pointer
=	O
CDB___db_close	function
;	O
dbp	pointer
->	O
cursor	pointer
=	O
CDB___db_cursor	function
;	O
dbp	pointer
->	O
del	pointer
=	O
NULL	O
;	O
dbp	pointer
->	O
err	pointer
=	O
__dbh_err	function
;	O
dbp	pointer
->	O
errx	pointer
=	O
__dbh_errx	function
;	O
dbp	pointer
->	O
fd	pointer
=	O
CDB___db_fd	function
;	O
dbp	pointer
->	O
get	pointer
=	O
CDB___db_get	function
;	O
dbp	pointer
->	O
get_byteswapped	pointer
=	O
__db_get_byteswapped	function
;	O
dbp	pointer
->	O
get_type	pointer
=	O
__db_get_type	function
;	O
dbp	pointer
->	O
join	pointer
=	O
CDB___db_join	function
;	O
dbp	pointer
->	O
key_range	pointer
=	O
__db_key_range	function
;	O
dbp	pointer
->	O
open	pointer
=	O
CDB___db_open	function
;	O
dbp	pointer
->	O
put	pointer
=	O
CDB___db_put	function
;	O
dbp	pointer
->	O
remove	function
=	O
CDB___db_remove	function
;	O
dbp	pointer
->	O
rename	function
=	O
CDB___db_rename	function
;	O
dbp	pointer
->	O
set_cachesize	pointer
=	O
__db_set_cachesize	function
;	O
dbp	pointer
->	O
set_dup_compare	pointer
=	O
__db_set_dup_compare	function
;	O
dbp	pointer
->	O
set_errcall	pointer
=	O
__db_set_errcall	function
;	O
dbp	pointer
->	O
set_errfile	pointer
=	O
__db_set_errfile	function
;	O
dbp	pointer
->	O
set_errpfx	pointer
=	O
__db_set_errpfx	function
;	O
dbp	pointer
->	O
set_feedback	pointer
=	O
__db_set_feedback	function
;	O
dbp	pointer
->	O
set_flags	pointer
=	O
__db_set_flags	function
;	O
dbp	pointer
->	O
set_lorder	pointer
=	O
__db_set_lorder	function
;	O
dbp	pointer
->	O
set_malloc	pointer
=	O
__db_set_malloc	function
;	O
dbp	pointer
->	O
set_pagesize	pointer
=	O
__db_set_pagesize	function
;	O
dbp	pointer
->	O
set_paniccall	pointer
=	O
__db_set_paniccall	function
;	O
dbp	pointer
->	O
set_realloc	pointer
=	O
__db_set_realloc	function
;	O
dbp	pointer
->	O
stat	pointer
=	O
NULL	O
;	O
dbp	pointer
->	O
sync	pointer
=	O
CDB___db_sync	function
;	O
dbp	pointer
->	O
tags	char
=	O
0	int
;	O
dbp	pointer
->	O
upgrade	pointer
=	O
CDB___db_upgrade	function
;	O
dbp	pointer
->	O
verify	pointer
=	O
CDB___db_verify	function
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_db_create	function
(	O
dbp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_db_create	function
(	O
dbp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___qam_db_create	function
(	O
dbp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
LF_ISSET	O
(	O
DB_XA_CREATE	int
)	O
&&	O
(	O
ret	int
=	O
CDB___db_xa_create	function
(	O
dbp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___dbh_am_chk	function
(	O
dbp	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
if	O
(	O
(	O
LF_ISSET	O
(	O
DB_OK_BTREE	int
)	O
&&	O
FLD_ISSET	O
(	O
dbp	pointer
->	O
am_ok	int
,	O
DB_OK_BTREE	int
)	O
)	O
||	O
(	O
LF_ISSET	O
(	O
DB_OK_HASH	int
)	O
&&	O
FLD_ISSET	O
(	O
dbp	pointer
->	O
am_ok	int
,	O
DB_OK_HASH	int
)	O
)	O
||	O
(	O
LF_ISSET	O
(	O
DB_OK_QUEUE	int
)	O
&&	O
FLD_ISSET	O
(	O
dbp	pointer
->	O
am_ok	int
,	O
DB_OK_QUEUE	int
)	O
)	O
||	O
(	O
LF_ISSET	O
(	O
DB_OK_RECNO	int
)	O
&&	O
FLD_ISSET	O
(	O
dbp	pointer
->	O
am_ok	int
,	O
DB_OK_RECNO	int
)	O
)	O
)	O
{	O
FLD_CLR	O
(	O
dbp	pointer
->	O
am_ok	int
,	O
~	O
flags	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
CDB___db_err	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"call implies an access method which is inconsistent with previous calls"	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
static	O
void	O
__dbh_err	function
(	O
DB	struct
*	O
dbp	pointer
,	O
int	O
error	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
CDB___db_real_err	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
error	int
,	O
1	int
,	O
1	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
static	O
void	O
__dbh_errx	function
(	O
DB	struct
*	O
dbp	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
CDB___db_real_err	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
0	int
,	O
0	int
,	O
1	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
static	O
int	O
__db_get_byteswapped	function
(	O
dbp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
{	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"get_byteswapped"	pointer
)	O
;	O
return	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_SWAP	int
)	O
?	O
1	int
:	O
0	int
)	O
;	O
}	O
static	O
DBTYPE	enum
__db_get_type	function
(	O
dbp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
{	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"get_type"	pointer
)	O
;	O
return	O
(	O
dbp	pointer
->	O
type	enum
)	O
;	O
}	O
static	O
int	O
__db_key_range	function
(	O
dbp	pointer
,	O
txn	pointer
,	O
key	struct
,	O
kr	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
DB_TXN	struct
*	O
txn	pointer
;	O
DBT	struct
*	O
key	struct
;	O
DB_KEY_RANGE	struct
*	O
kr	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
if	O
(	O
txn	pointer
||	O
key	struct
||	O
kr	pointer
||	O
flags	int
)	O
{	O
}	O
COMPQUIET	O
(	O
txn	pointer
,	O
NULL	O
)	O
;	O
COMPQUIET	O
(	O
key	struct
,	O
NULL	O
)	O
;	O
COMPQUIET	O
(	O
kr	pointer
,	O
NULL	O
)	O
;	O
COMPQUIET	O
(	O
flags	int
,	O
0	int
)	O
;	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"key_range"	pointer
)	O
;	O
DB_ILLEGAL_METHOD	O
(	O
dbp	pointer
,	O
DB_OK_BTREE	int
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
static	O
int	O
__db_set_cachesize	function
(	O
dbp	pointer
,	O
cache_gbytes	int
,	O
cache_bytes	int
,	O
ncache	int
)	O
DB	struct
*	O
dbp	pointer
;	O
u_int32_t	int
cache_gbytes	int
,	O
cache_bytes	int
;	O
int	O
ncache	int
;	O
{	O
DB_ILLEGAL_IN_ENV	O
(	O
dbp	pointer
,	O
"set_cachesize"	pointer
)	O
;	O
DB_ILLEGAL_AFTER_OPEN	O
(	O
dbp	pointer
,	O
"set_cachesize"	pointer
)	O
;	O
return	O
(	O
dbp	pointer
->	O
dbenv	pointer
->	O
set_cachesize	pointer
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
cache_gbytes	int
,	O
cache_bytes	int
,	O
ncache	int
)	O
)	O
;	O
}	O
static	O
int	O
__db_set_dup_compare	function
(	O
dbp	pointer
,	O
func	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
int	O
(	O
*	O
func	pointer
)	O
__P	O
(	O
(	O
const	O
DBT	struct
*	O
,	O
const	O
DBT	struct
*	O
)	O
)	O
;	O
{	O
DB_ILLEGAL_AFTER_OPEN	O
(	O
dbp	pointer
,	O
"dup_compare"	pointer
)	O
;	O
DB_ILLEGAL_METHOD	O
(	O
dbp	pointer
,	O
DB_OK_BTREE	int
|	O
DB_OK_HASH	int
)	O
;	O
dbp	pointer
->	O
dup_compare	pointer
=	O
func	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
__db_set_errcall	function
(	O
dbp	pointer
,	O
errcall	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
void	O
(	O
*	O
errcall	pointer
)	O
__P	O
(	O
(	O
const	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
;	O
{	O
dbp	pointer
->	O
dbenv	pointer
->	O
set_errcall	pointer
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
errcall	pointer
)	O
;	O
}	O
static	O
void	O
__db_set_errfile	function
(	O
dbp	pointer
,	O
errfile	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
FILE	struct
*	O
errfile	pointer
;	O
{	O
dbp	pointer
->	O
dbenv	pointer
->	O
set_errfile	pointer
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
errfile	pointer
)	O
;	O
}	O
static	O
void	O
__db_set_errpfx	function
(	O
dbp	pointer
,	O
errpfx	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
const	O
char	O
*	O
errpfx	pointer
;	O
{	O
dbp	pointer
->	O
dbenv	pointer
->	O
set_errpfx	pointer
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
errpfx	pointer
)	O
;	O
}	O
static	O
int	O
__db_set_feedback	function
(	O
dbp	pointer
,	O
feedback	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
void	O
(	O
*	O
feedback	pointer
)	O
__P	O
(	O
(	O
DB	struct
*	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
{	O
dbp	pointer
->	O
db_feedback	pointer
=	O
feedback	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__db_set_flags	function
(	O
dbp	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_set_flags	function
(	O
dbp	pointer
,	O
&	O
flags	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ram_set_flags	function
(	O
dbp	pointer
,	O
&	O
flags	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
flags	int
==	O
0	int
?	O
0	int
:	O
CDB___db_ferr	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"DB->set_flags"	pointer
,	O
0	int
)	O
)	O
;	O
}	O
static	O
int	O
__db_set_lorder	function
(	O
dbp	pointer
,	O
db_lorder	int
)	O
DB	struct
*	O
dbp	pointer
;	O
int	O
db_lorder	int
;	O
{	O
int	O
ret	int
;	O
DB_ILLEGAL_AFTER_OPEN	O
(	O
dbp	pointer
,	O
"set_lorder"	pointer
)	O
;	O
switch	O
(	O
ret	int
=	O
CDB___db_byteorder	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
db_lorder	int
)	O
)	O
{	O
case	O
0	int
:	O
F_CLR	O
(	O
dbp	pointer
,	O
DB_AM_SWAP	int
)	O
;	O
break	O
;	O
case	O
DB_SWAPBYTES	O
:	O
F_SET	O
(	O
dbp	pointer
,	O
DB_AM_SWAP	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
(	O
ret	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__db_set_malloc	function
(	O
dbp	pointer
,	O
func	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
void	O
*	O
(	O
*	O
func	pointer
)	O
__P	O
(	O
(	O
size_t	long
)	O
)	O
;	O
{	O
DB_ILLEGAL_AFTER_OPEN	O
(	O
dbp	pointer
,	O
"set_malloc"	pointer
)	O
;	O
dbp	pointer
->	O
db_malloc	pointer
=	O
func	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__db_set_pagesize	function
(	O
dbp	pointer
,	O
db_pagesize	long
)	O
DB	struct
*	O
dbp	pointer
;	O
u_int32_t	int
db_pagesize	long
;	O
{	O
DB_ILLEGAL_AFTER_OPEN	O
(	O
dbp	pointer
,	O
"set_pagesize"	pointer
)	O
;	O
if	O
(	O
db_pagesize	long
<	O
DB_MIN_PGSIZE	int
)	O
{	O
CDB___db_err	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"page sizes may not be smaller than %lu"	pointer
,	O
(	O
u_long	long
)	O
DB_MIN_PGSIZE	int
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
if	O
(	O
db_pagesize	long
>	O
DB_MAX_PGSIZE	int
)	O
{	O
CDB___db_err	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"page sizes may not be larger than %lu"	pointer
,	O
(	O
u_long	long
)	O
DB_MAX_PGSIZE	int
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
if	O
(	O
(	O
u_int32_t	int
)	O
1	int
<<	O
CDB___db_log2	function
(	O
db_pagesize	long
)	O
!=	O
db_pagesize	long
)	O
{	O
CDB___db_err	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"page sizes must be a power-of-2"	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
dbp	pointer
->	O
pgsize	int
=	O
db_pagesize	long
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__db_set_realloc	function
(	O
dbp	pointer
,	O
func	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
void	O
*	O
(	O
*	O
func	pointer
)	O
__P	O
(	O
(	O
void	O
*	O
,	O
size_t	long
)	O
)	O
;	O
{	O
DB_ILLEGAL_AFTER_OPEN	O
(	O
dbp	pointer
,	O
"set_realloc"	pointer
)	O
;	O
dbp	pointer
->	O
db_realloc	pointer
=	O
func	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__db_set_paniccall	function
(	O
dbp	pointer
,	O
paniccall	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
void	O
(	O
*	O
paniccall	pointer
)	O
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
int	O
)	O
)	O
;	O
{	O
return	O
(	O
dbp	pointer
->	O
dbenv	pointer
->	O
set_paniccall	pointer
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
paniccall	pointer
)	O
)	O
;	O
}	O
