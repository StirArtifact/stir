int	O
_pager_page_errors	array
[	O
]	O
=	O
{	O
KERN_SUCCESS	O
,	O
ENOSPC	O
,	O
EIO	O
,	O
EDQUOT	O
}	O
;	O
void	O
_pager_mark_next_request_error	function
(	O
struct	O
pager	struct
*	O
pager	struct
,	O
vm_address_t	int
offset	int
,	O
vm_size_t	int
length	int
,	O
error_t	int
error	int
)	O
{	O
int	O
page_error	int
;	O
short	O
*	O
p	pointer
;	O
offset	int
/=	O
__vm_page_size	O
;	O
length	int
/=	O
__vm_page_size	O
;	O
switch	O
(	O
error	int
)	O
{	O
case	O
0	int
:	O
page_error	int
=	O
PAGE_NOERR	int
;	O
break	O
;	O
case	O
ENOSPC	O
:	O
page_error	int
=	O
PAGE_ENOSPC	int
;	O
break	O
;	O
case	O
EIO	O
:	O
default	O
:	O
page_error	int
=	O
PAGE_EIO	int
;	O
break	O
;	O
case	O
EDQUOT	O
:	O
page_error	int
=	O
PAGE_EDQUOT	int
;	O
break	O
;	O
}	O
for	O
(	O
p	pointer
=	O
pager	struct
->	O
pagemap	pointer
+	O
offset	int
;	O
p	pointer
<	O
pager	struct
->	O
pagemap	pointer
+	O
offset	int
+	O
length	int
;	O
p	pointer
++	O
)	O
*	O
p	pointer
=	O
SET_PM_NEXTERROR	O
(	O
*	O
p	pointer
,	O
page_error	int
)	O
;	O
}	O
void	O
_pager_mark_object_error	function
(	O
struct	O
pager	struct
*	O
pager	struct
,	O
vm_address_t	int
offset	int
,	O
vm_size_t	int
length	int
,	O
error_t	int
error	int
)	O
{	O
int	O
page_error	int
=	O
0	int
;	O
short	O
*	O
p	pointer
;	O
offset	int
/=	O
__vm_page_size	O
;	O
length	int
/=	O
__vm_page_size	O
;	O
switch	O
(	O
error	int
)	O
{	O
case	O
0	int
:	O
page_error	int
=	O
PAGE_NOERR	int
;	O
break	O
;	O
case	O
ENOSPC	O
:	O
page_error	int
=	O
PAGE_ENOSPC	int
;	O
break	O
;	O
case	O
EIO	O
:	O
default	O
:	O
page_error	int
=	O
PAGE_EIO	int
;	O
break	O
;	O
case	O
EDQUOT	O
:	O
page_error	int
=	O
PAGE_EDQUOT	int
;	O
break	O
;	O
}	O
for	O
(	O
p	pointer
=	O
pager	struct
->	O
pagemap	pointer
+	O
offset	int
;	O
p	pointer
<	O
pager	struct
->	O
pagemap	pointer
+	O
offset	int
+	O
length	int
;	O
p	pointer
++	O
)	O
*	O
p	pointer
=	O
SET_PM_ERROR	O
(	O
*	O
p	pointer
,	O
page_error	int
)	O
;	O
}	O
error_t	int
pager_get_error	function
(	O
struct	O
pager	struct
*	O
p	pointer
,	O
vm_address_t	int
addr	int
)	O
{	O
error_t	int
err	O
;	O
pthread_mutex_lock	function
(	O
&	O
p	pointer
->	O
interlock	int
)	O
;	O
addr	int
/=	O
vm_page_size	O
;	O
err	O
=	O
_pager_pagemap_resize	function
(	O
p	pointer
,	O
addr	int
)	O
;	O
if	O
(	O
!	O
err	O
)	O
err	O
=	O
_pager_page_errors	array
[	O
PM_ERROR	O
(	O
p	pointer
->	O
pagemap	pointer
[	O
addr	int
]	O
)	O
]	O
;	O
pthread_mutex_unlock	function
(	O
&	O
p	pointer
->	O
interlock	int
)	O
;	O
return	O
err	O
;	O
}	O
