void	O
chacha_poly1305_set_key	O
(	O
struct	O
chacha_poly1305_ctx	struct
*	O
ctx	pointer
,	O
const	O
uint8_t	char
*	O
key	pointer
)	O
{	O
chacha_set_key	O
(	O
&	O
ctx	pointer
->	O
chacha	struct
,	O
key	pointer
)	O
;	O
}	O
void	O
chacha_poly1305_set_nonce	O
(	O
struct	O
chacha_poly1305_ctx	struct
*	O
ctx	pointer
,	O
const	O
uint8_t	char
*	O
nonce	pointer
)	O
{	O
union	O
{	O
uint32_t	int
x	array
[	O
_CHACHA_STATE_LENGTH	int
]	O
;	O
uint8_t	char
subkey	array
[	O
32	int
]	O
;	O
}	O
u	union
;	O
chacha_set_nonce96	O
(	O
&	O
ctx	pointer
->	O
chacha	struct
,	O
nonce	pointer
)	O
;	O
_chacha_core	O
(	O
u	union
.	O
x	array
,	O
ctx	pointer
->	O
chacha	struct
.	O
state	array
,	O
CHACHA_ROUNDS	int
)	O
;	O
poly1305_set_key	O
(	O
&	O
ctx	pointer
->	O
poly1305	struct
,	O
u	union
.	O
subkey	array
)	O
;	O
memcpy	function
(	O
ctx	pointer
->	O
s	pointer
.	O
b	array
,	O
u	union
.	O
subkey	array
+	O
16	int
,	O
16	int
)	O
;	O
ctx	pointer
->	O
chacha	struct
.	O
state	array
[	O
12	int
]	O
=	O
1	int
;	O
ctx	pointer
->	O
auth_size	long
=	O
ctx	pointer
->	O
data_size	long
=	O
ctx	pointer
->	O
index	function
=	O
0	int
;	O
}	O
static	O
void	O
poly1305_update	function
(	O
struct	O
chacha_poly1305_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	pointer
)	O
{	O
MD_UPDATE	O
(	O
ctx	pointer
,	O
length	long
,	O
data	pointer
,	O
COMPRESS	O
,	O
(	O
void	O
)	O
0	int
)	O
;	O
}	O
static	O
void	O
poly1305_pad	function
(	O
struct	O
chacha_poly1305_ctx	struct
*	O
ctx	pointer
)	O
{	O
if	O
(	O
ctx	pointer
->	O
index	function
)	O
{	O
memset	function
(	O
ctx	pointer
->	O
block	array
+	O
ctx	pointer
->	O
index	function
,	O
0	int
,	O
POLY1305_BLOCK_SIZE	int
-	O
ctx	pointer
->	O
index	function
)	O
;	O
_poly1305_block	O
(	O
&	O
ctx	pointer
->	O
poly1305	struct
,	O
ctx	pointer
->	O
block	array
,	O
1	int
)	O
;	O
ctx	pointer
->	O
index	function
=	O
0	int
;	O
}	O
}	O
void	O
chacha_poly1305_update	O
(	O
struct	O
chacha_poly1305_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	pointer
)	O
{	O
assert	O
(	O
ctx	pointer
->	O
data_size	long
==	O
0	int
)	O
;	O
poly1305_update	function
(	O
ctx	pointer
,	O
length	long
,	O
data	pointer
)	O
;	O
ctx	pointer
->	O
auth_size	long
+=	O
length	long
;	O
}	O
void	O
chacha_poly1305_encrypt	O
(	O
struct	O
chacha_poly1305_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
if	O
(	O
!	O
length	long
)	O
return	O
;	O
assert	O
(	O
ctx	pointer
->	O
data_size	long
%	O
CHACHA_POLY1305_BLOCK_SIZE	int
==	O
0	int
)	O
;	O
poly1305_pad	function
(	O
ctx	pointer
)	O
;	O
chacha_crypt	O
(	O
&	O
ctx	pointer
->	O
chacha	struct
,	O
length	long
,	O
dst	pointer
,	O
src	pointer
)	O
;	O
poly1305_update	function
(	O
ctx	pointer
,	O
length	long
,	O
dst	pointer
)	O
;	O
ctx	pointer
->	O
data_size	long
+=	O
length	long
;	O
}	O
void	O
chacha_poly1305_decrypt	O
(	O
struct	O
chacha_poly1305_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	pointer
,	O
const	O
uint8_t	char
*	O
src	pointer
)	O
{	O
if	O
(	O
!	O
length	long
)	O
return	O
;	O
assert	O
(	O
ctx	pointer
->	O
data_size	long
%	O
CHACHA_POLY1305_BLOCK_SIZE	int
==	O
0	int
)	O
;	O
poly1305_pad	function
(	O
ctx	pointer
)	O
;	O
poly1305_update	function
(	O
ctx	pointer
,	O
length	long
,	O
src	pointer
)	O
;	O
chacha_crypt	O
(	O
&	O
ctx	pointer
->	O
chacha	struct
,	O
length	long
,	O
dst	pointer
,	O
src	pointer
)	O
;	O
ctx	pointer
->	O
data_size	long
+=	O
length	long
;	O
}	O
void	O
chacha_poly1305_digest	O
(	O
struct	O
chacha_poly1305_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	pointer
)	O
{	O
uint8_t	char
buf	array
[	O
16	int
]	O
;	O
poly1305_pad	function
(	O
ctx	pointer
)	O
;	O
LE_WRITE_UINT64	O
(	O
buf	array
,	O
ctx	pointer
->	O
auth_size	long
)	O
;	O
LE_WRITE_UINT64	O
(	O
buf	array
+	O
8	int
,	O
ctx	pointer
->	O
data_size	long
)	O
;	O
_poly1305_block	O
(	O
&	O
ctx	pointer
->	O
poly1305	struct
,	O
buf	array
,	O
1	int
)	O
;	O
poly1305_digest	O
(	O
&	O
ctx	pointer
->	O
poly1305	struct
,	O
&	O
ctx	pointer
->	O
s	pointer
)	O
;	O
memcpy	function
(	O
digest	pointer
,	O
&	O
ctx	pointer
->	O
s	pointer
.	O
b	array
,	O
length	long
)	O
;	O
}	O
