typedef	O
enum	O
{	O
cmd_ack	int
,	O
cmd_deny	int
,	O
cmd_reset	int
,	O
cmd_query	int
,	O
cmd_respond	int
,	O
cmd_move	int
,	O
cmd_undo	int
}	O
Command	enum
;	O
typedef	O
enum	O
{	O
query_game	int
,	O
query_bufSize	int
,	O
query_protocol	int
,	O
query_stones	int
,	O
query_bTime	int
,	O
query_wTime	int
,	O
query_charSet	int
,	O
query_rules	int
,	O
query_handicap	int
,	O
query_boardSize	int
,	O
query_timeLimit	int
,	O
query_color	int
,	O
query_who	int
,	O
query_max	int
}	O
Query	enum
;	O
typedef	O
struct	O
Gmp_struct	struct
{	O
int	O
inFile	int
,	O
outFile	int
;	O
int	O
boardSize	int
,	O
sizeVerified	int
;	O
int	O
handicap	int
,	O
handicapVerified	int
;	O
float	O
komi	float
;	O
int	O
komiVerified	int
;	O
int	O
chineseRules	int
,	O
rulesVerified	int
;	O
int	O
iAmWhite	int
,	O
colorVerified	int
;	O
Query	enum
lastQuerySent	enum
;	O
int	O
recvSoFar	int
,	O
sendsQueued	int
;	O
int	O
sendFailures	int
,	O
noResponseSecs	int
;	O
int	O
waitingHighAck	int
;	O
time_t	long
lastSendTime	long
;	O
int	O
myLastSeq	int
,	O
hisLastSeq	int
;	O
unsigned	O
char	O
recvData	array
[	O
4	int
]	O
;	O
unsigned	O
char	O
sendData	array
[	O
4	int
]	O
;	O
struct	O
{	O
int	O
cmd	int
,	O
val	int
;	O
}	O
sendsPending	array
[	O
GMP_MAXSENDSQUEUED	int
]	O
;	O
int	O
earlyMovePresent	int
;	O
int	O
earlyMoveX	int
,	O
earlyMoveY	int
;	O
int	O
simplified	int
;	O
}	O
Gmp	struct
;	O
int	O
gmp_debug	int
=	O
0	int
;	O
static	O
const	O
char	O
*	O
commandNames	array
[	O
]	O
=	O
{	O
"ACK"	pointer
,	O
"DENY"	pointer
,	O
"RESET"	pointer
,	O
"QUERY"	pointer
,	O
"RESPOND"	pointer
,	O
"MOVE"	pointer
,	O
"UNDO"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
queryNames	array
[	O
]	O
=	O
{	O
"GAME"	pointer
,	O
"BUFFER SIZE"	pointer
,	O
"PROTOCOL"	pointer
,	O
"STONES"	pointer
,	O
"BLACK TIME"	pointer
,	O
"WHITE TIME"	pointer
,	O
"CHAR SET"	pointer
,	O
"RULES"	pointer
,	O
"HANDICAP"	pointer
,	O
"BOARD SIZE"	pointer
,	O
"TIME LIMIT"	pointer
,	O
"COLOR"	pointer
,	O
"WHO"	pointer
}	O
;	O
static	O
unsigned	O
char	O
checksum	function
(	O
unsigned	O
char	O
p	array
[	O
4	int
]	O
)	O
;	O
static	O
GmpResult	enum
gotQueryResponse	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
int	O
val	int
,	O
const	O
char	O
*	O
*	O
err	pointer
)	O
;	O
static	O
void	O
putCommand	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
Command	enum
cmd	int
,	O
int	O
val	int
)	O
;	O
static	O
GmpResult	enum
respond	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
Query	enum
query	enum
)	O
;	O
static	O
void	O
askQuery	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
;	O
static	O
int	O
heartbeat	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
;	O
static	O
GmpResult	enum
getPacket	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
int	O
*	O
out1	pointer
,	O
int	O
*	O
out2	pointer
,	O
const	O
char	O
*	O
*	O
error	pointer
)	O
;	O
static	O
GmpResult	enum
parsePacket	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
int	O
*	O
out1	pointer
,	O
int	O
*	O
out2	pointer
,	O
const	O
char	O
*	O
*	O
error	pointer
)	O
;	O
static	O
GmpResult	enum
processCommand	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
Command	enum
command	enum
,	O
int	O
val	int
,	O
int	O
*	O
out1	pointer
,	O
int	O
*	O
out2	pointer
,	O
const	O
char	O
*	O
*	O
error	pointer
)	O
;	O
static	O
void	O
processQ	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
;	O
Gmp	struct
*	O
gmp_create	function
(	O
int	O
inFile	int
,	O
int	O
outFile	int
)	O
{	O
Gmp	struct
*	O
ge	pointer
;	O
ge	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
Gmp	struct
)	O
)	O
;	O
ge	pointer
->	O
inFile	int
=	O
inFile	int
;	O
ge	pointer
->	O
outFile	int
=	O
outFile	int
;	O
ge	pointer
->	O
boardSize	int
=	O
-	O
1	int
;	O
ge	pointer
->	O
sizeVerified	int
=	O
0	int
;	O
ge	pointer
->	O
handicap	int
=	O
-	O
1	int
;	O
ge	pointer
->	O
handicapVerified	int
=	O
0	int
;	O
ge	pointer
->	O
komi	float
=	O
0.0	int
;	O
ge	pointer
->	O
chineseRules	int
=	O
-	O
1	int
;	O
ge	pointer
->	O
rulesVerified	int
=	O
0	int
;	O
ge	pointer
->	O
iAmWhite	int
=	O
-	O
1	int
;	O
ge	pointer
->	O
colorVerified	int
=	O
0	int
;	O
ge	pointer
->	O
lastQuerySent	enum
=	O
0	int
;	O
ge	pointer
->	O
recvSoFar	int
=	O
0	int
;	O
ge	pointer
->	O
sendsQueued	int
=	O
0	int
;	O
ge	pointer
->	O
sendFailures	int
=	O
0	int
;	O
ge	pointer
->	O
noResponseSecs	int
=	O
0	int
;	O
ge	pointer
->	O
waitingHighAck	int
=	O
0	int
;	O
ge	pointer
->	O
lastSendTime	long
=	O
0	int
;	O
ge	pointer
->	O
myLastSeq	int
=	O
0	int
;	O
ge	pointer
->	O
hisLastSeq	int
=	O
0	int
;	O
ge	pointer
->	O
earlyMovePresent	int
=	O
0	int
;	O
return	O
(	O
ge	pointer
)	O
;	O
}	O
void	O
gmp_destroy	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
{	O
free	function
(	O
ge	pointer
)	O
;	O
}	O
GmpResult	enum
gmp_check	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
int	O
gsleep	int
,	O
int	O
*	O
out1	pointer
,	O
int	O
*	O
out2	pointer
,	O
const	O
char	O
*	O
*	O
error	pointer
)	O
{	O
fd_set	struct
readReady	struct
;	O
struct	O
timeval	struct
noTime	struct
;	O
int	O
intDummy	int
;	O
const	O
char	O
*	O
charPtrDummy	pointer
;	O
GmpResult	enum
result	enum
;	O
if	O
(	O
out1	pointer
==	O
NULL	O
)	O
out1	pointer
=	O
&	O
intDummy	int
;	O
if	O
(	O
out2	pointer
==	O
NULL	O
)	O
out2	pointer
=	O
&	O
intDummy	int
;	O
if	O
(	O
error	pointer
==	O
NULL	O
)	O
error	pointer
=	O
&	O
charPtrDummy	pointer
;	O
if	O
(	O
gmp_verified	O
(	O
ge	pointer
)	O
&&	O
ge	pointer
->	O
earlyMovePresent	int
)	O
{	O
*	O
out1	pointer
=	O
ge	pointer
->	O
earlyMoveX	int
;	O
*	O
out2	pointer
=	O
ge	pointer
->	O
earlyMoveY	int
;	O
ge	pointer
->	O
earlyMovePresent	int
=	O
0	int
;	O
if	O
(	O
gmp_debug	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Returning early move.\n"	pointer
)	O
;	O
}	O
return	O
(	O
gmp_move	int
)	O
;	O
}	O
*	O
out1	pointer
=	O
0	int
;	O
*	O
out2	pointer
=	O
0	int
;	O
*	O
error	pointer
=	O
NULL	O
;	O
do	O
{	O
if	O
(	O
time	function
(	O
NULL	O
)	O
!=	O
ge	pointer
->	O
lastSendTime	long
)	O
{	O
if	O
(	O
!	O
heartbeat	function
(	O
ge	pointer
)	O
)	O
{	O
*	O
error	pointer
=	O
"GMP Timeout"	pointer
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
}	O
FD_ZERO	O
(	O
&	O
readReady	struct
)	O
;	O
FD_SET	O
(	O
ge	pointer
->	O
inFile	int
,	O
&	O
readReady	struct
)	O
;	O
noTime	struct
.	O
tv_usec	long
=	O
0	int
;	O
if	O
(	O
gsleep	int
)	O
noTime	struct
.	O
tv_sec	long
=	O
1	int
;	O
else	O
noTime	struct
.	O
tv_sec	long
=	O
0	int
;	O
select	function
(	O
ge	pointer
->	O
inFile	int
+	O
1	int
,	O
&	O
readReady	struct
,	O
NULL	O
,	O
NULL	O
,	O
&	O
noTime	struct
)	O
;	O
if	O
(	O
!	O
gsleep	int
&&	O
!	O
FD_ISSET	O
(	O
ge	pointer
->	O
inFile	int
,	O
&	O
readReady	struct
)	O
)	O
return	O
(	O
gmp_nothing	int
)	O
;	O
result	enum
=	O
getPacket	function
(	O
ge	pointer
,	O
out1	pointer
,	O
out2	pointer
,	O
error	pointer
)	O
;	O
}	O
while	O
(	O
result	enum
==	O
gmp_nothing	int
)	O
;	O
return	O
(	O
result	enum
)	O
;	O
}	O
static	O
GmpResult	enum
getPacket	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
int	O
*	O
out1	pointer
,	O
int	O
*	O
out2	pointer
,	O
const	O
char	O
*	O
*	O
error	pointer
)	O
{	O
unsigned	O
char	O
charsIn	array
[	O
4	int
]	O
,	O
c	char
;	O
int	O
count	int
=	O
0	int
,	O
cNum	int
;	O
static	O
char	O
errOut	array
[	O
200	int
]	O
;	O
count	int
=	O
read	function
(	O
ge	pointer
->	O
inFile	int
,	O
charsIn	array
,	O
4	int
-	O
ge	pointer
->	O
recvSoFar	int
)	O
;	O
if	O
(	O
count	int
<=	O
0	int
)	O
{	O
sprintf	function
(	O
errOut	array
,	O
"System error."	pointer
)	O
;	O
*	O
error	pointer
=	O
errOut	array
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
for	O
(	O
cNum	int
=	O
0	int
;	O
cNum	int
<	O
count	int
;	O
++	O
cNum	int
)	O
{	O
c	char
=	O
charsIn	array
[	O
cNum	int
]	O
;	O
if	O
(	O
!	O
ge	pointer
->	O
recvSoFar	int
)	O
{	O
if	O
(	O
(	O
c	char
&	O
0xfc	int
)	O
==	O
0	int
)	O
{	O
ge	pointer
->	O
recvData	array
[	O
0	int
]	O
=	O
c	char
;	O
ge	pointer
->	O
recvSoFar	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Received invalid packet.\n"	pointer
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
c	char
&	O
0x80	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Received invalid packet.\n"	pointer
)	O
;	O
}	O
ge	pointer
->	O
recvSoFar	int
=	O
0	int
;	O
if	O
(	O
(	O
c	char
&	O
0xfc	int
)	O
==	O
0	int
)	O
{	O
ge	pointer
->	O
recvData	array
[	O
ge	pointer
->	O
recvSoFar	int
++	O
]	O
=	O
c	char
;	O
}	O
}	O
else	O
{	O
ge	pointer
->	O
recvData	array
[	O
ge	pointer
->	O
recvSoFar	int
++	O
]	O
=	O
c	char
;	O
if	O
(	O
ge	pointer
->	O
recvSoFar	int
==	O
4	int
)	O
{	O
assert	O
(	O
cNum	int
+	O
1	int
==	O
count	int
)	O
;	O
ge	pointer
->	O
recvSoFar	int
=	O
0	int
;	O
if	O
(	O
checksum	function
(	O
ge	pointer
->	O
recvData	array
)	O
==	O
ge	pointer
->	O
recvData	array
[	O
1	int
]	O
)	O
return	O
(	O
parsePacket	function
(	O
ge	pointer
,	O
out1	pointer
,	O
out2	pointer
,	O
error	pointer
)	O
)	O
;	O
}	O
}	O
}	O
}	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
static	O
unsigned	O
char	O
checksum	function
(	O
unsigned	O
char	O
p	array
[	O
4	int
]	O
)	O
{	O
unsigned	O
char	O
sum	char
;	O
sum	char
=	O
p	array
[	O
0	int
]	O
+	O
p	array
[	O
2	int
]	O
+	O
p	array
[	O
3	int
]	O
;	O
sum	char
|=	O
0x80	int
;	O
return	O
(	O
sum	char
)	O
;	O
}	O
static	O
GmpResult	enum
parsePacket	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
int	O
*	O
out1	pointer
,	O
int	O
*	O
out2	pointer
,	O
const	O
char	O
*	O
*	O
error	pointer
)	O
{	O
int	O
seq	int
,	O
ack	int
,	O
val	int
;	O
Command	enum
command	enum
;	O
GmpResult	enum
result	enum
;	O
seq	int
=	O
ge	pointer
->	O
recvData	array
[	O
0	int
]	O
&	O
1	int
;	O
ack	int
=	O
(	O
ge	pointer
->	O
recvData	array
[	O
0	int
]	O
&	O
2	int
)	O
>>	O
1	int
;	O
if	O
(	O
ge	pointer
->	O
recvData	array
[	O
2	int
]	O
&	O
0x08	int
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Unknown command byte 0x%x received.\n"	pointer
,	O
(	O
unsigned	O
int	O
)	O
ge	pointer
->	O
recvData	array
[	O
2	int
]	O
)	O
;	O
}	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
command	enum
=	O
(	O
ge	pointer
->	O
recvData	array
[	O
2	int
]	O
>>	O
4	int
)	O
&	O
7	int
;	O
val	int
=	O
(	O
(	O
ge	pointer
->	O
recvData	array
[	O
2	int
]	O
&	O
7	int
)	O
<<	O
7	int
)	O
|	O
(	O
ge	pointer
->	O
recvData	array
[	O
3	int
]	O
&	O
0x7f	int
)	O
;	O
if	O
(	O
gmp_debug	int
)	O
{	O
if	O
(	O
command	enum
==	O
cmd_query	int
)	O
{	O
if	O
(	O
val	int
>=	O
query_max	int
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Read in command: %s unkown value %d\n"	pointer
,	O
commandNames	array
[	O
command	enum
]	O
,	O
val	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Read in command: %s %s\n"	pointer
,	O
commandNames	array
[	O
command	enum
]	O
,	O
queryNames	array
[	O
val	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Read in command: %s\n"	pointer
,	O
commandNames	array
[	O
command	enum
]	O
)	O
;	O
}	O
}	O
if	O
(	O
!	O
ge	pointer
->	O
waitingHighAck	int
)	O
{	O
if	O
(	O
(	O
command	enum
==	O
cmd_ack	int
)	O
||	O
(	O
ack	int
!=	O
ge	pointer
->	O
myLastSeq	int
)	O
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Unexpected ACK.\n"	pointer
)	O
;	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
else	O
if	O
(	O
seq	int
==	O
ge	pointer
->	O
hisLastSeq	int
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Received repeated message.\n"	pointer
)	O
;	O
putCommand	function
(	O
ge	pointer
,	O
cmd_ack	int
,	O
~	O
0	int
)	O
;	O
}	O
else	O
{	O
ge	pointer
->	O
hisLastSeq	int
=	O
seq	int
;	O
ge	pointer
->	O
sendFailures	int
=	O
0	int
;	O
ge	pointer
->	O
noResponseSecs	int
=	O
0	int
;	O
return	O
(	O
processCommand	function
(	O
ge	pointer
,	O
command	enum
,	O
val	int
,	O
out1	pointer
,	O
out2	pointer
,	O
error	pointer
)	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
command	enum
==	O
cmd_ack	int
)	O
{	O
if	O
(	O
(	O
ack	int
!=	O
ge	pointer
->	O
myLastSeq	int
)	O
||	O
(	O
seq	int
!=	O
ge	pointer
->	O
hisLastSeq	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Sequence error.\n"	pointer
)	O
;	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
ge	pointer
->	O
sendFailures	int
=	O
0	int
;	O
ge	pointer
->	O
noResponseSecs	int
=	O
0	int
;	O
ge	pointer
->	O
waitingHighAck	int
=	O
0	int
;	O
if	O
(	O
!	O
gmp_verified	O
(	O
ge	pointer
)	O
)	O
{	O
askQuery	function
(	O
ge	pointer
)	O
;	O
}	O
processQ	function
(	O
ge	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
command	enum
==	O
cmd_reset	int
)	O
&&	O
(	O
ge	pointer
->	O
iAmWhite	int
==	O
-	O
1	int
)	O
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"gmp/his last seq = %d\n"	pointer
,	O
seq	int
)	O
;	O
ge	pointer
->	O
hisLastSeq	int
=	O
seq	int
;	O
ge	pointer
->	O
waitingHighAck	int
=	O
0	int
;	O
return	O
(	O
processCommand	function
(	O
ge	pointer
,	O
command	enum
,	O
val	int
,	O
out1	pointer
,	O
out2	pointer
,	O
error	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
seq	int
==	O
ge	pointer
->	O
hisLastSeq	int
)	O
{	O
}	O
else	O
if	O
(	O
ack	int
==	O
ge	pointer
->	O
myLastSeq	int
)	O
{	O
ge	pointer
->	O
sendFailures	int
=	O
0	int
;	O
ge	pointer
->	O
noResponseSecs	int
=	O
0	int
;	O
ge	pointer
->	O
waitingHighAck	int
=	O
0	int
;	O
ge	pointer
->	O
hisLastSeq	int
=	O
seq	int
;	O
result	enum
=	O
processCommand	function
(	O
ge	pointer
,	O
command	enum
,	O
val	int
,	O
out1	pointer
,	O
out2	pointer
,	O
error	pointer
)	O
;	O
processQ	function
(	O
ge	pointer
)	O
;	O
return	O
(	O
result	enum
)	O
;	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Sending conflict.\n"	pointer
)	O
;	O
ge	pointer
->	O
myLastSeq	int
=	O
1	int
-	O
ge	pointer
->	O
myLastSeq	int
;	O
ge	pointer
->	O
waitingHighAck	int
=	O
0	int
;	O
processQ	function
(	O
ge	pointer
)	O
;	O
}	O
}	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
static	O
GmpResult	enum
processCommand	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
Command	enum
command	enum
,	O
int	O
val	int
,	O
int	O
*	O
out1	pointer
,	O
int	O
*	O
out2	pointer
,	O
const	O
char	O
*	O
*	O
error	pointer
)	O
{	O
int	O
s	int
,	O
x	int
,	O
y	int
;	O
switch	O
(	O
command	enum
)	O
{	O
case	O
cmd_deny	int
:	O
putCommand	function
(	O
ge	pointer
,	O
cmd_ack	int
,	O
~	O
0	int
)	O
;	O
break	O
;	O
case	O
cmd_query	int
:	O
return	O
(	O
respond	function
(	O
ge	pointer
,	O
val	int
)	O
)	O
;	O
break	O
;	O
case	O
cmd_reset	int
:	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Resetted.  New game.\n"	pointer
)	O
;	O
askQuery	function
(	O
ge	pointer
)	O
;	O
return	O
(	O
gmp_reset	int
)	O
;	O
break	O
;	O
case	O
cmd_undo	int
:	O
putCommand	function
(	O
ge	pointer
,	O
cmd_ack	int
,	O
~	O
0	int
)	O
;	O
*	O
out1	pointer
=	O
val	int
;	O
return	O
(	O
gmp_undo	int
)	O
;	O
break	O
;	O
case	O
cmd_move	int
:	O
s	int
=	O
val	int
&	O
0x1ff	int
;	O
if	O
(	O
s	int
==	O
0	int
)	O
{	O
x	int
=	O
-	O
1	int
;	O
y	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
s	int
==	O
0x1ff	int
)	O
{	O
x	int
=	O
-	O
2	int
;	O
y	int
=	O
0	int
;	O
}	O
else	O
{	O
--	O
s	int
;	O
x	int
=	O
(	O
s	int
%	O
ge	pointer
->	O
boardSize	int
)	O
;	O
y	int
=	O
ge	pointer
->	O
boardSize	int
-	O
1	int
-	O
(	O
s	int
/	O
ge	pointer
->	O
boardSize	int
)	O
;	O
}	O
putCommand	function
(	O
ge	pointer
,	O
cmd_ack	int
,	O
~	O
0	int
)	O
;	O
if	O
(	O
x	int
==	O
-	O
1	int
)	O
return	O
(	O
gmp_pass	int
)	O
;	O
else	O
{	O
if	O
(	O
gmp_verified	O
(	O
ge	pointer
)	O
)	O
{	O
*	O
out1	pointer
=	O
x	int
;	O
*	O
out2	pointer
=	O
y	int
;	O
return	O
(	O
gmp_move	int
)	O
;	O
}	O
else	O
{	O
assert	O
(	O
ge	pointer
->	O
earlyMovePresent	int
==	O
0	int
)	O
;	O
ge	pointer
->	O
earlyMovePresent	int
=	O
1	int
;	O
ge	pointer
->	O
earlyMoveX	int
=	O
x	int
;	O
ge	pointer
->	O
earlyMoveY	int
=	O
y	int
;	O
askQuery	function
(	O
ge	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
cmd_respond	int
:	O
return	O
(	O
gotQueryResponse	function
(	O
ge	pointer
,	O
val	int
,	O
error	pointer
)	O
)	O
;	O
break	O
;	O
default	O
:	O
putCommand	function
(	O
ge	pointer
,	O
cmd_deny	int
,	O
0	int
)	O
;	O
break	O
;	O
}	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
static	O
void	O
putCommand	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
Command	enum
cmd	int
,	O
int	O
val	int
)	O
{	O
if	O
(	O
ge	pointer
->	O
waitingHighAck	int
&&	O
(	O
cmd	int
!=	O
cmd_ack	int
)	O
&&	O
(	O
cmd	int
!=	O
cmd_respond	int
)	O
&&	O
(	O
cmd	int
!=	O
cmd_deny	int
)	O
)	O
{	O
if	O
(	O
ge	pointer
->	O
sendsQueued	int
<	O
1024	int
)	O
{	O
ge	pointer
->	O
sendsPending	array
[	O
ge	pointer
->	O
sendsQueued	int
]	O
.	O
cmd	int
=	O
cmd	int
;	O
ge	pointer
->	O
sendsPending	array
[	O
ge	pointer
->	O
sendsQueued	int
]	O
.	O
val	int
=	O
val	int
;	O
++	O
ge	pointer
->	O
sendsQueued	int
;	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Send buffer full.  Catastrophic error."	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
return	O
;	O
}	O
if	O
(	O
(	O
cmd	int
==	O
cmd_ack	int
)	O
&&	O
(	O
ge	pointer
->	O
sendsQueued	int
)	O
)	O
{	O
ge	pointer
->	O
waitingHighAck	int
=	O
0	int
;	O
processQ	function
(	O
ge	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
cmd	int
!=	O
cmd_ack	int
)	O
ge	pointer
->	O
myLastSeq	int
^=	O
1	int
;	O
ge	pointer
->	O
sendData	array
[	O
0	int
]	O
=	O
ge	pointer
->	O
myLastSeq	int
|	O
(	O
ge	pointer
->	O
hisLastSeq	int
<<	O
1	int
)	O
;	O
ge	pointer
->	O
sendData	array
[	O
2	int
]	O
=	O
0x80	int
|	O
(	O
cmd	int
<<	O
4	int
)	O
|	O
(	O
(	O
val	int
>>	O
7	int
)	O
&	O
7	int
)	O
;	O
ge	pointer
->	O
sendData	array
[	O
3	int
]	O
=	O
0x80	int
|	O
val	int
;	O
ge	pointer
->	O
sendData	array
[	O
1	int
]	O
=	O
checksum	function
(	O
ge	pointer
->	O
sendData	array
)	O
;	O
ge	pointer
->	O
lastSendTime	long
=	O
time	function
(	O
NULL	O
)	O
;	O
if	O
(	O
gmp_debug	int
)	O
{	O
if	O
(	O
cmd	int
==	O
cmd_query	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Sending command: %s %s\n"	pointer
,	O
commandNames	array
[	O
cmd	int
]	O
,	O
queryNames	array
[	O
val	int
]	O
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Sending command: %s\n"	pointer
,	O
commandNames	array
[	O
cmd	int
]	O
)	O
;	O
}	O
write	function
(	O
ge	pointer
->	O
outFile	int
,	O
ge	pointer
->	O
sendData	array
,	O
4	int
)	O
;	O
ge	pointer
->	O
waitingHighAck	int
=	O
(	O
cmd	int
!=	O
cmd_ack	int
)	O
;	O
return	O
;	O
}	O
static	O
GmpResult	enum
respond	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
Query	enum
query	enum
)	O
{	O
int	O
response	int
;	O
int	O
wasVerified	int
;	O
wasVerified	int
=	O
gmp_verified	O
(	O
ge	pointer
)	O
;	O
if	O
(	O
query	enum
&	O
0x200	int
)	O
{	O
response	int
=	O
0	int
;	O
}	O
else	O
{	O
ge	pointer
->	O
waitingHighAck	int
=	O
1	int
;	O
switch	O
(	O
query	enum
)	O
{	O
case	O
query_game	int
:	O
response	int
=	O
1	int
;	O
break	O
;	O
case	O
query_rules	int
:	O
if	O
(	O
ge	pointer
->	O
chineseRules	int
==	O
-	O
1	int
)	O
{	O
response	int
=	O
0	int
;	O
}	O
else	O
{	O
ge	pointer
->	O
rulesVerified	int
=	O
1	int
;	O
if	O
(	O
ge	pointer
->	O
chineseRules	int
==	O
1	int
)	O
response	int
=	O
2	int
;	O
else	O
response	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
query_handicap	int
:	O
if	O
(	O
ge	pointer
->	O
handicap	int
==	O
-	O
1	int
)	O
response	int
=	O
0	int
;	O
else	O
{	O
ge	pointer
->	O
handicapVerified	int
=	O
1	int
;	O
response	int
=	O
ge	pointer
->	O
handicap	int
;	O
if	O
(	O
response	int
==	O
0	int
)	O
response	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
query_boardSize	int
:	O
if	O
(	O
ge	pointer
->	O
boardSize	int
==	O
-	O
1	int
)	O
{	O
response	int
=	O
0	int
;	O
}	O
else	O
{	O
response	int
=	O
ge	pointer
->	O
boardSize	int
;	O
ge	pointer
->	O
sizeVerified	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
query_color	int
:	O
if	O
(	O
ge	pointer
->	O
iAmWhite	int
==	O
-	O
1	int
)	O
{	O
response	int
=	O
0	int
;	O
}	O
else	O
{	O
ge	pointer
->	O
colorVerified	int
=	O
1	int
;	O
if	O
(	O
ge	pointer
->	O
iAmWhite	int
)	O
response	int
=	O
1	int
;	O
else	O
response	int
=	O
2	int
;	O
}	O
break	O
;	O
default	O
:	O
response	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
putCommand	function
(	O
ge	pointer
,	O
cmd_respond	int
,	O
response	int
)	O
;	O
if	O
(	O
!	O
wasVerified	int
&&	O
gmp_verified	O
(	O
ge	pointer
)	O
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: New game ready.\n"	pointer
)	O
;	O
return	O
(	O
gmp_newGame	int
)	O
;	O
}	O
else	O
{	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
}	O
static	O
void	O
askQuery	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
{	O
if	O
(	O
!	O
ge	pointer
->	O
simplified	int
)	O
{	O
if	O
(	O
!	O
ge	pointer
->	O
rulesVerified	int
)	O
{	O
ge	pointer
->	O
lastQuerySent	enum
=	O
query_rules	int
;	O
}	O
else	O
if	O
(	O
!	O
ge	pointer
->	O
sizeVerified	int
)	O
{	O
ge	pointer
->	O
lastQuerySent	enum
=	O
query_boardSize	int
;	O
}	O
else	O
if	O
(	O
!	O
ge	pointer
->	O
handicapVerified	int
)	O
{	O
ge	pointer
->	O
lastQuerySent	enum
=	O
query_handicap	int
;	O
}	O
else	O
{	O
assert	O
(	O
!	O
ge	pointer
->	O
colorVerified	int
)	O
;	O
ge	pointer
->	O
lastQuerySent	enum
=	O
query_color	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
ge	pointer
->	O
colorVerified	int
)	O
ge	pointer
->	O
lastQuerySent	enum
=	O
query_color	int
;	O
else	O
if	O
(	O
!	O
ge	pointer
->	O
handicapVerified	int
)	O
ge	pointer
->	O
lastQuerySent	enum
=	O
query_handicap	int
;	O
}	O
putCommand	function
(	O
ge	pointer
,	O
cmd_query	int
,	O
ge	pointer
->	O
lastQuerySent	enum
)	O
;	O
}	O
static	O
GmpResult	enum
gotQueryResponse	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
int	O
val	int
,	O
const	O
char	O
*	O
*	O
err	pointer
)	O
{	O
static	O
const	O
char	O
*	O
ruleNames	array
[	O
]	O
=	O
{	O
"Japanese"	pointer
,	O
"Chinese"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
colorNames	array
[	O
]	O
=	O
{	O
"Black"	pointer
,	O
"White"	pointer
}	O
;	O
static	O
char	O
errOut	array
[	O
200	int
]	O
;	O
switch	O
(	O
ge	pointer
->	O
lastQuerySent	enum
)	O
{	O
case	O
query_handicap	int
:	O
if	O
(	O
val	int
<=	O
1	int
)	O
--	O
val	int
;	O
if	O
(	O
ge	pointer
->	O
handicap	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
val	int
==	O
-	O
1	int
)	O
{	O
sprintf	function
(	O
errOut	array
,	O
"Neither player knows what the handicap should be."	pointer
)	O
;	O
*	O
err	pointer
=	O
errOut	array
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
else	O
{	O
ge	pointer
->	O
handicap	int
=	O
val	int
;	O
ge	pointer
->	O
handicapVerified	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
ge	pointer
->	O
handicapVerified	int
=	O
1	int
;	O
if	O
(	O
(	O
val	int
!=	O
-	O
1	int
)	O
&&	O
(	O
val	int
!=	O
ge	pointer
->	O
handicap	int
)	O
)	O
{	O
sprintf	function
(	O
errOut	array
,	O
"Handicaps do not agree; I want %d, he wants %d."	pointer
,	O
ge	pointer
->	O
handicap	int
,	O
val	int
)	O
;	O
*	O
err	pointer
=	O
errOut	array
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
}	O
break	O
;	O
case	O
query_boardSize	int
:	O
if	O
(	O
ge	pointer
->	O
boardSize	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
val	int
==	O
0	int
)	O
{	O
sprintf	function
(	O
errOut	array
,	O
"Neither player knows what the board size should be."	pointer
)	O
;	O
*	O
err	pointer
=	O
errOut	array
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
else	O
{	O
ge	pointer
->	O
boardSize	int
=	O
val	int
;	O
ge	pointer
->	O
sizeVerified	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
ge	pointer
->	O
sizeVerified	int
=	O
1	int
;	O
if	O
(	O
(	O
val	int
!=	O
0	int
)	O
&&	O
(	O
val	int
!=	O
ge	pointer
->	O
boardSize	int
)	O
)	O
{	O
sprintf	function
(	O
errOut	array
,	O
"Board sizes do not agree; I want %d, he wants %d."	pointer
,	O
ge	pointer
->	O
boardSize	int
,	O
val	int
)	O
;	O
*	O
err	pointer
=	O
errOut	array
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
}	O
break	O
;	O
case	O
query_rules	int
:	O
if	O
(	O
ge	pointer
->	O
chineseRules	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
val	int
==	O
0	int
)	O
{	O
sprintf	function
(	O
errOut	array
,	O
"Neither player knows what rule set to use."	pointer
)	O
;	O
*	O
err	pointer
=	O
errOut	array
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
else	O
{	O
ge	pointer
->	O
chineseRules	int
=	O
val	int
-	O
1	int
;	O
ge	pointer
->	O
rulesVerified	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
ge	pointer
->	O
rulesVerified	int
=	O
1	int
;	O
if	O
(	O
val	int
!=	O
0	int
)	O
{	O
if	O
(	O
ge	pointer
->	O
chineseRules	int
!=	O
(	O
val	int
==	O
2	int
)	O
)	O
{	O
sprintf	function
(	O
errOut	array
,	O
"Rule sets do not agree; I want %s, he wants %s."	pointer
,	O
ruleNames	array
[	O
ge	pointer
->	O
chineseRules	int
]	O
,	O
ruleNames	array
[	O
val	int
==	O
2	int
]	O
)	O
;	O
*	O
err	pointer
=	O
errOut	array
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
query_color	int
:	O
if	O
(	O
ge	pointer
->	O
iAmWhite	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
val	int
==	O
0	int
)	O
{	O
sprintf	function
(	O
errOut	array
,	O
"Neither player knows who is which color."	pointer
)	O
;	O
*	O
err	pointer
=	O
errOut	array
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
else	O
{	O
ge	pointer
->	O
iAmWhite	int
=	O
!	O
(	O
val	int
==	O
1	int
)	O
;	O
ge	pointer
->	O
colorVerified	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
ge	pointer
->	O
colorVerified	int
=	O
1	int
;	O
if	O
(	O
val	int
!=	O
0	int
)	O
{	O
if	O
(	O
ge	pointer
->	O
iAmWhite	int
==	O
(	O
val	int
==	O
1	int
)	O
)	O
{	O
sprintf	function
(	O
errOut	array
,	O
"Colors do not agree; we both want to be %s."	pointer
,	O
colorNames	array
[	O
ge	pointer
->	O
iAmWhite	int
]	O
)	O
;	O
*	O
err	pointer
=	O
errOut	array
;	O
return	O
(	O
gmp_err	int
)	O
;	O
}	O
}	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
!	O
gmp_verified	O
(	O
ge	pointer
)	O
)	O
{	O
askQuery	function
(	O
ge	pointer
)	O
;	O
return	O
(	O
gmp_nothing	int
)	O
;	O
}	O
else	O
{	O
putCommand	function
(	O
ge	pointer
,	O
cmd_ack	int
,	O
~	O
0	int
)	O
;	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: New game ready.\n"	pointer
)	O
;	O
return	O
(	O
gmp_newGame	int
)	O
;	O
}	O
}	O
static	O
int	O
heartbeat	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
{	O
Command	enum
cmd	int
;	O
if	O
(	O
ge	pointer
->	O
waitingHighAck	int
)	O
{	O
if	O
(	O
++	O
ge	pointer
->	O
noResponseSecs	int
>	O
(	O
ge	pointer
->	O
simplified	int
?	O
SGMP_RETRYSECS	int
:	O
GMP_RETRYSECS	int
)	O
)	O
{	O
if	O
(	O
++	O
ge	pointer
->	O
sendFailures	int
>	O
(	O
ge	pointer
->	O
simplified	int
?	O
SGMP_TIMEOUTRETRIES	int
:	O
GMP_TIMEOUTRETRIES	int
)	O
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
gmp_debug	int
)	O
{	O
cmd	int
=	O
(	O
ge	pointer
->	O
sendData	array
[	O
2	int
]	O
>>	O
4	int
)	O
&	O
7	int
;	O
if	O
(	O
cmd	int
==	O
cmd_query	int
)	O
{	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Sending command: %s %s (retry)\n"	pointer
,	O
commandNames	array
[	O
cmd	int
]	O
,	O
queryNames	array
[	O
ge	pointer
->	O
sendData	array
[	O
3	int
]	O
&	O
0x7f	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
gmp_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GMP: Sending command: %s (retry)\n"	pointer
,	O
commandNames	array
[	O
cmd	int
]	O
)	O
;	O
}	O
write	function
(	O
ge	pointer
->	O
outFile	int
,	O
ge	pointer
->	O
sendData	array
,	O
4	int
)	O
;	O
}	O
}	O
}	O
return	O
(	O
1	int
)	O
;	O
}	O
void	O
gmp_startGame	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
int	O
size	int
,	O
int	O
handicap	int
,	O
float	O
komi	float
,	O
int	O
chineseRules	int
,	O
int	O
iAmWhite	int
,	O
int	O
simplified	int
)	O
{	O
assert	O
(	O
(	O
size	int
==	O
-	O
1	int
)	O
||	O
(	O
(	O
size	int
>	O
1	int
)	O
&&	O
(	O
size	int
<=	O
22	int
)	O
)	O
)	O
;	O
assert	O
(	O
(	O
handicap	int
>=	O
-	O
1	int
)	O
&&	O
(	O
handicap	int
<=	O
27	int
)	O
)	O
;	O
assert	O
(	O
(	O
chineseRules	int
>=	O
-	O
1	int
)	O
&&	O
(	O
chineseRules	int
<=	O
1	int
)	O
)	O
;	O
assert	O
(	O
(	O
iAmWhite	int
>=	O
-	O
1	int
)	O
&&	O
(	O
iAmWhite	int
<=	O
1	int
)	O
)	O
;	O
ge	pointer
->	O
boardSize	int
=	O
size	int
;	O
ge	pointer
->	O
sizeVerified	int
=	O
simplified	int
;	O
ge	pointer
->	O
handicap	int
=	O
handicap	int
;	O
ge	pointer
->	O
handicapVerified	int
=	O
0	int
;	O
ge	pointer
->	O
komi	float
=	O
komi	float
;	O
ge	pointer
->	O
chineseRules	int
=	O
chineseRules	int
;	O
ge	pointer
->	O
rulesVerified	int
=	O
simplified	int
;	O
ge	pointer
->	O
iAmWhite	int
=	O
iAmWhite	int
;	O
ge	pointer
->	O
colorVerified	int
=	O
0	int
;	O
ge	pointer
->	O
earlyMovePresent	int
=	O
0	int
;	O
ge	pointer
->	O
simplified	int
=	O
simplified	int
;	O
if	O
(	O
iAmWhite	int
!=	O
1	int
)	O
{	O
putCommand	function
(	O
ge	pointer
,	O
cmd_reset	int
,	O
0	int
)	O
;	O
}	O
}	O
void	O
gmp_sendPass	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
{	O
int	O
arg	int
;	O
if	O
(	O
ge	pointer
->	O
iAmWhite	int
)	O
arg	int
=	O
0x200	int
;	O
else	O
arg	int
=	O
0	int
;	O
putCommand	function
(	O
ge	pointer
,	O
cmd_move	int
,	O
arg	int
)	O
;	O
}	O
void	O
gmp_sendMove	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
int	O
x	int
,	O
int	O
y	int
)	O
{	O
int	O
val	int
;	O
val	int
=	O
x	int
+	O
ge	pointer
->	O
boardSize	int
*	O
(	O
ge	pointer
->	O
boardSize	int
-	O
1	int
-	O
y	int
)	O
+	O
1	int
;	O
if	O
(	O
ge	pointer
->	O
iAmWhite	int
)	O
val	int
|=	O
0x200	int
;	O
putCommand	function
(	O
ge	pointer
,	O
cmd_move	int
,	O
val	int
)	O
;	O
}	O
void	O
gmp_sendUndo	function
(	O
Gmp	struct
*	O
ge	pointer
,	O
int	O
numUndos	int
)	O
{	O
putCommand	function
(	O
ge	pointer
,	O
cmd_undo	int
,	O
numUndos	int
)	O
;	O
}	O
const	O
char	O
*	O
gmp_resultString	function
(	O
GmpResult	enum
result	enum
)	O
{	O
static	O
const	O
char	O
*	O
names	array
[	O
]	O
=	O
{	O
"Nothing"	pointer
,	O
"Move"	pointer
,	O
"Pass"	pointer
,	O
"Reset"	pointer
,	O
"New game"	pointer
,	O
"Undo"	pointer
,	O
"Error"	pointer
}	O
;	O
assert	O
(	O
result	enum
<=	O
gmp_err	int
)	O
;	O
return	O
(	O
names	array
[	O
result	enum
]	O
)	O
;	O
}	O
int	O
gmp_size	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
{	O
return	O
(	O
ge	pointer
->	O
boardSize	int
)	O
;	O
}	O
int	O
gmp_handicap	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
{	O
return	O
(	O
ge	pointer
->	O
handicap	int
)	O
;	O
}	O
float	O
gmp_komi	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
{	O
return	O
(	O
ge	pointer
->	O
komi	float
)	O
;	O
}	O
int	O
gmp_chineseRules	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
{	O
return	O
(	O
ge	pointer
->	O
chineseRules	int
)	O
;	O
}	O
int	O
gmp_iAmWhite	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
{	O
return	O
(	O
ge	pointer
->	O
iAmWhite	int
)	O
;	O
}	O
static	O
void	O
processQ	function
(	O
Gmp	struct
*	O
ge	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
!	O
ge	pointer
->	O
waitingHighAck	int
&&	O
ge	pointer
->	O
sendsQueued	int
)	O
{	O
putCommand	function
(	O
ge	pointer
,	O
ge	pointer
->	O
sendsPending	array
[	O
0	int
]	O
.	O
cmd	int
,	O
ge	pointer
->	O
sendsPending	array
[	O
0	int
]	O
.	O
val	int
)	O
;	O
--	O
ge	pointer
->	O
sendsQueued	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ge	pointer
->	O
sendsQueued	int
;	O
++	O
i	int
)	O
{	O
ge	pointer
->	O
sendsPending	array
[	O
i	int
]	O
=	O
ge	pointer
->	O
sendsPending	array
[	O
i	int
+	O
1	int
]	O
;	O
}	O
}	O
}	O
