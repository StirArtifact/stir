struct	O
dico_pcre_flag	struct
{	O
int	O
c	int
;	O
int	O
flag	int
;	O
}	O
;	O
static	O
struct	O
dico_pcre_flag	struct
flagtab	array
[	O
]	O
=	O
{	O
{	O
'a'	O
,	O
PCRE_ANCHORED	int
}	O
,	O
{	O
'e'	O
,	O
PCRE_EXTENDED	int
}	O
,	O
{	O
'i'	O
,	O
PCRE_CASELESS	int
}	O
,	O
{	O
'G'	O
,	O
PCRE_UNGREEDY	int
}	O
,	O
{	O
0	int
}	O
,	O
}	O
;	O
static	O
int	O
pcre_flag	function
(	O
int	O
c	int
,	O
int	O
*	O
pflags	pointer
)	O
{	O
struct	O
dico_pcre_flag	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
flagtab	array
;	O
p	pointer
->	O
c	int
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
c	int
==	O
c	int
)	O
{	O
*	O
pflags	pointer
|=	O
p	pointer
->	O
flag	int
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
p	pointer
->	O
c	int
==	O
tolower	function
(	O
c	int
)	O
||	O
p	pointer
->	O
c	int
==	O
toupper	function
(	O
c	int
)	O
)	O
{	O
*	O
pflags	pointer
&=	O
~	O
p	pointer
->	O
flag	int
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
pcre	struct
*	O
compile_pattern	function
(	O
const	O
char	O
*	O
pattern	pointer
)	O
{	O
int	O
cflags	int
=	O
PCRE_UTF8	int
|	O
PCRE_NEWLINE_ANY	int
;	O
const	O
char	O
*	O
error	pointer
;	O
int	O
error_offset	int
;	O
char	O
*	O
tmp	pointer
=	O
NULL	O
;	O
pcre	struct
*	O
pre	pointer
;	O
if	O
(	O
pattern	pointer
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
size_t	long
len	int
;	O
char	O
*	O
p	pointer
;	O
pattern	pointer
++	O
;	O
p	pointer
=	O
strrchr	function
(	O
pattern	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"PCRE missing terminating /: %s"	pointer
)	O
,	O
pattern	pointer
-	O
1	int
)	O
;	O
return	O
NULL	O
;	O
}	O
len	int
=	O
p	pointer
-	O
pattern	pointer
;	O
while	O
(	O
*	O
++	O
p	pointer
)	O
{	O
if	O
(	O
pcre_flag	function
(	O
*	O
p	pointer
,	O
&	O
cflags	int
)	O
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"PCRE error: invalid flag %c"	pointer
)	O
,	O
*	O
p	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
tmp	pointer
=	O
malloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
NULL	O
;	O
memcpy	function
(	O
tmp	pointer
,	O
pattern	pointer
,	O
len	int
)	O
;	O
tmp	pointer
[	O
len	int
]	O
=	O
0	int
;	O
pattern	pointer
=	O
tmp	pointer
;	O
}	O
pre	pointer
=	O
pcre_compile	function
(	O
pattern	pointer
,	O
cflags	int
,	O
&	O
error	pointer
,	O
&	O
error_offset	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
pre	pointer
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"pcre_compile(\"%s\") failed at offset %d: %s"	pointer
)	O
,	O
pattern	pointer
,	O
error_offset	int
,	O
error	pointer
)	O
;	O
}	O
free	function
(	O
tmp	pointer
)	O
;	O
return	O
pre	pointer
;	O
}	O
static	O
int	O
pcre_sel	function
(	O
int	O
cmd	int
,	O
dico_key_t	pointer
key	pointer
,	O
const	O
char	O
*	O
dict_word	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
char	O
const	O
*	O
word	pointer
=	O
key	pointer
->	O
word	pointer
;	O
pcre	struct
*	O
pre	pointer
=	O
key	pointer
->	O
call_data	pointer
;	O
switch	O
(	O
cmd	int
)	O
{	O
case	O
DICO_SELECT_BEGIN	int
:	O
pre	pointer
=	O
compile_pattern	function
(	O
word	pointer
)	O
;	O
if	O
(	O
!	O
pre	pointer
)	O
return	O
1	int
;	O
key	pointer
->	O
call_data	pointer
=	O
pre	pointer
;	O
break	O
;	O
case	O
DICO_SELECT_RUN	int
:	O
rc	int
=	O
pcre_exec	function
(	O
pre	pointer
,	O
0	int
,	O
dict_word	pointer
,	O
strlen	function
(	O
dict_word	pointer
)	O
,	O
0	int
,	O
0	int
,	O
NULL	O
,	O
0	int
)	O
>=	O
0	int
;	O
break	O
;	O
case	O
DICO_SELECT_END	int
:	O
pcre_free	pointer
(	O
pre	pointer
)	O
;	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
struct	O
dico_strategy	struct
pcre_strat	struct
=	O
{	O
"pcre"	pointer
,	O
"Match using Perl-compatible regular expressions"	pointer
,	O
pcre_sel	function
}	O
;	O
static	O
int	O
pcre_init	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
dico_strategy_add	function
(	O
&	O
pcre_strat	struct
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
dico_database_module	struct
DICO_EXPORT	O
(	O
pcre	struct
,	O
module	O
)	O
=	O
{	O
DICO_MODULE_VERSION	int
,	O
DICO_CAPA_NODB	int
,	O
pcre_init	function
,	O
}	O
;	O
