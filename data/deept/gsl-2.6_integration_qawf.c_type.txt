int	O
gsl_integration_qawf	function
(	O
gsl_function	struct
*	O
f	pointer
,	O
const	O
double	O
a	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
size_t	long
limit	long
,	O
gsl_integration_workspace	struct
*	O
workspace	pointer
,	O
gsl_integration_workspace	struct
*	O
cycle_workspace	pointer
,	O
gsl_integration_qawo_table	struct
*	O
wf	pointer
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
)	O
{	O
double	O
area	double
,	O
errsum	double
;	O
double	O
res_ext	double
,	O
err_ext	double
;	O
double	O
correc	double
,	O
total_error	double
=	O
0.0	int
,	O
truncation_error	double
;	O
size_t	long
ktmin	long
=	O
0	int
;	O
size_t	long
iteration	long
=	O
0	int
;	O
struct	O
extrapolation_table	struct
table	pointer
;	O
double	O
cycle	double
;	O
double	O
omega	double
=	O
wf	pointer
->	O
omega	double
;	O
const	O
double	O
p	double
=	O
0.9	int
;	O
double	O
factor	double
=	O
1	int
;	O
double	O
initial_eps	double
,	O
eps	double
;	O
int	O
error_type	int
=	O
0	int
;	O
initialise	function
(	O
workspace	pointer
,	O
a	double
,	O
a	double
)	O
;	O
*	O
result	pointer
=	O
0	int
;	O
*	O
abserr	pointer
=	O
0	int
;	O
if	O
(	O
limit	long
>	O
workspace	pointer
->	O
limit	long
)	O
{	O
GSL_ERROR	O
(	O
"iteration limit exceeds available workspace"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
epsabs	double
<=	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"absolute tolerance epsabs must be positive"	pointer
,	O
GSL_EBADTOL	int
)	O
;	O
}	O
if	O
(	O
omega	double
==	O
0.0	int
)	O
{	O
if	O
(	O
wf	pointer
->	O
sine	enum
==	O
GSL_INTEG_SINE	int
)	O
{	O
*	O
result	pointer
=	O
0	int
;	O
*	O
abserr	pointer
=	O
0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
status	int
=	O
gsl_integration_qagiu	function
(	O
f	pointer
,	O
a	double
,	O
epsabs	double
,	O
0.0	int
,	O
cycle_workspace	pointer
->	O
limit	long
,	O
cycle_workspace	pointer
,	O
result	pointer
,	O
abserr	pointer
)	O
;	O
return	O
status	int
;	O
}	O
}	O
if	O
(	O
epsabs	double
>	O
GSL_DBL_MIN	int
/	O
(	O
1	int
-	O
p	double
)	O
)	O
{	O
eps	double
=	O
epsabs	double
*	O
(	O
1	int
-	O
p	double
)	O
;	O
}	O
else	O
{	O
eps	double
=	O
epsabs	double
;	O
}	O
initial_eps	double
=	O
eps	double
;	O
area	double
=	O
0	int
;	O
errsum	double
=	O
0	int
;	O
res_ext	double
=	O
0	int
;	O
err_ext	double
=	O
GSL_DBL_MAX	int
;	O
correc	double
=	O
0	int
;	O
cycle	double
=	O
(	O
2	int
*	O
floor	function
(	O
fabs	function
(	O
omega	double
)	O
)	O
+	O
1	int
)	O
*	O
M_PI	int
/	O
fabs	function
(	O
omega	double
)	O
;	O
gsl_integration_qawo_table_set_length	function
(	O
wf	pointer
,	O
cycle	double
)	O
;	O
initialise_table	function
(	O
&	O
table	pointer
)	O
;	O
for	O
(	O
iteration	long
=	O
0	int
;	O
iteration	long
<	O
limit	long
;	O
iteration	long
++	O
)	O
{	O
double	O
area1	double
,	O
error1	double
,	O
reseps	double
,	O
erreps	double
;	O
double	O
a1	double
=	O
a	double
+	O
iteration	long
*	O
cycle	double
;	O
double	O
b1	double
=	O
a1	double
+	O
cycle	double
;	O
double	O
epsabs1	double
=	O
eps	double
*	O
factor	double
;	O
int	O
status	int
=	O
gsl_integration_qawo	function
(	O
f	pointer
,	O
a1	double
,	O
epsabs1	double
,	O
0.0	int
,	O
limit	long
,	O
cycle_workspace	pointer
,	O
wf	pointer
,	O
&	O
area1	double
,	O
&	O
error1	double
)	O
;	O
append_interval	function
(	O
workspace	pointer
,	O
a1	double
,	O
b1	double
,	O
area1	double
,	O
error1	double
)	O
;	O
factor	double
*=	O
p	double
;	O
area	double
=	O
area	double
+	O
area1	double
;	O
errsum	double
=	O
errsum	double
+	O
error1	double
;	O
truncation_error	double
=	O
50	int
*	O
fabs	function
(	O
area1	double
)	O
;	O
total_error	double
=	O
errsum	double
+	O
truncation_error	double
;	O
if	O
(	O
total_error	double
<	O
epsabs	double
&&	O
iteration	long
>	O
4	int
)	O
{	O
goto	O
compute_result	O
;	O
}	O
if	O
(	O
error1	double
>	O
correc	double
)	O
{	O
correc	double
=	O
error1	double
;	O
}	O
if	O
(	O
status	int
)	O
{	O
eps	double
=	O
GSL_MAX_DBL	function
(	O
initial_eps	double
,	O
correc	double
*	O
(	O
1.0	int
-	O
p	double
)	O
)	O
;	O
}	O
if	O
(	O
status	int
&&	O
total_error	double
<	O
10	int
*	O
correc	double
&&	O
iteration	long
>	O
3	int
)	O
{	O
goto	O
compute_result	O
;	O
}	O
append_table	function
(	O
&	O
table	pointer
,	O
area	double
)	O
;	O
if	O
(	O
table	pointer
.	O
n	int
<	O
2	int
)	O
{	O
continue	O
;	O
}	O
qelg	function
(	O
&	O
table	pointer
,	O
&	O
reseps	double
,	O
&	O
erreps	double
)	O
;	O
ktmin	long
++	O
;	O
if	O
(	O
ktmin	long
>=	O
15	int
&&	O
err_ext	double
<	O
0.001	int
*	O
total_error	double
)	O
{	O
error_type	int
=	O
4	int
;	O
}	O
if	O
(	O
erreps	double
<	O
err_ext	double
)	O
{	O
ktmin	long
=	O
0	int
;	O
err_ext	double
=	O
erreps	double
;	O
res_ext	double
=	O
reseps	double
;	O
if	O
(	O
err_ext	double
+	O
10	int
*	O
correc	double
<=	O
epsabs	double
)	O
break	O
;	O
if	O
(	O
err_ext	double
<=	O
epsabs	double
&&	O
10	int
*	O
correc	double
>=	O
epsabs	double
)	O
break	O
;	O
}	O
}	O
if	O
(	O
iteration	long
==	O
limit	long
)	O
error_type	int
=	O
1	int
;	O
if	O
(	O
err_ext	double
==	O
GSL_DBL_MAX	int
)	O
goto	O
compute_result	O
;	O
err_ext	double
=	O
err_ext	double
+	O
10	int
*	O
correc	double
;	O
*	O
result	pointer
=	O
res_ext	double
;	O
*	O
abserr	pointer
=	O
err_ext	double
;	O
if	O
(	O
error_type	int
==	O
0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
res_ext	double
!=	O
0.0	int
&&	O
area	double
!=	O
0.0	int
)	O
{	O
if	O
(	O
err_ext	double
/	O
fabs	function
(	O
res_ext	double
)	O
>	O
errsum	double
/	O
fabs	function
(	O
area	double
)	O
)	O
goto	O
compute_result	O
;	O
}	O
else	O
if	O
(	O
err_ext	double
>	O
errsum	double
)	O
{	O
goto	O
compute_result	O
;	O
}	O
else	O
if	O
(	O
area	double
==	O
0.0	int
)	O
{	O
goto	O
return_error	O
;	O
}	O
if	O
(	O
error_type	int
==	O
4	int
)	O
{	O
err_ext	double
=	O
err_ext	double
+	O
truncation_error	double
;	O
}	O
goto	O
return_error	O
;	O
compute_result	O
:	O
*	O
result	pointer
=	O
area	double
;	O
*	O
abserr	pointer
=	O
total_error	double
;	O
return_error	O
:	O
if	O
(	O
error_type	int
>	O
2	int
)	O
error_type	int
--	O
;	O
if	O
(	O
error_type	int
==	O
0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
1	int
)	O
{	O
GSL_ERROR	O
(	O
"number of iterations was insufficient"	pointer
,	O
GSL_EMAXITER	int
)	O
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
2	int
)	O
{	O
GSL_ERROR	O
(	O
"cannot reach tolerance because of roundoff error"	pointer
,	O
GSL_EROUND	int
)	O
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
3	int
)	O
{	O
GSL_ERROR	O
(	O
"bad integrand behavior found in the integration interval"	pointer
,	O
GSL_ESING	int
)	O
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
4	int
)	O
{	O
GSL_ERROR	O
(	O
"roundoff error detected in the extrapolation table"	pointer
,	O
GSL_EROUND	int
)	O
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
5	int
)	O
{	O
GSL_ERROR	O
(	O
"integral is divergent, or slowly convergent"	pointer
,	O
GSL_EDIVERGE	int
)	O
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"could not integrate function"	pointer
,	O
GSL_EFAILED	int
)	O
;	O
}	O
}	O
