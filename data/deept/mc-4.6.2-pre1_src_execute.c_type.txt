static	O
void	O
edition_post_exec	function
(	O
void	O
)	O
{	O
do_enter_ca_mode	function
(	O
)	O
;	O
reset_prog_mode	O
(	O
)	O
;	O
flushinp	O
(	O
)	O
;	O
keypad	O
(	O
stdscr	O
,	O
TRUE	O
)	O
;	O
mc_raw_mode	function
(	O
)	O
;	O
channels_up	function
(	O
)	O
;	O
enable_mouse	function
(	O
)	O
;	O
if	O
(	O
alternate_plus_minus	int
)	O
application_keypad_mode	function
(	O
)	O
;	O
}	O
static	O
void	O
edition_pre_exec	function
(	O
void	O
)	O
{	O
if	O
(	O
clear_before_exec	int
)	O
clr_scr	function
(	O
)	O
;	O
else	O
{	O
if	O
(	O
!	O
(	O
console_flag	char
||	O
xterm_flag	int
)	O
)	O
printf	function
(	O
"\n\n"	pointer
)	O
;	O
}	O
channels_down	function
(	O
)	O
;	O
disable_mouse	function
(	O
)	O
;	O
reset_shell_mode	O
(	O
)	O
;	O
keypad	O
(	O
stdscr	O
,	O
FALSE	O
)	O
;	O
endwin	O
(	O
)	O
;	O
numeric_keypad_mode	function
(	O
)	O
;	O
do_exit_ca_mode	function
(	O
)	O
;	O
}	O
static	O
void	O
pre_exec	function
(	O
void	O
)	O
{	O
use_dash	function
(	O
0	int
)	O
;	O
edition_pre_exec	function
(	O
)	O
;	O
}	O
static	O
void	O
do_execute	function
(	O
const	O
char	O
*	O
shell	pointer
,	O
const	O
char	O
*	O
command	pointer
,	O
int	O
flags	enum
)	O
{	O
char	O
*	O
new_dir	pointer
=	O
NULL	O
;	O
char	O
*	O
old_vfs_dir	pointer
=	O
0	int
;	O
if	O
(	O
!	O
vfs_current_is_local	function
(	O
)	O
)	O
old_vfs_dir	pointer
=	O
g_strdup	function
(	O
vfs_get_current_dir	function
(	O
)	O
)	O
;	O
save_cwds_stat	function
(	O
)	O
;	O
pre_exec	function
(	O
)	O
;	O
if	O
(	O
console_flag	char
)	O
handle_console	function
(	O
CONSOLE_RESTORE	int
)	O
;	O
if	O
(	O
!	O
use_subshell	int
&&	O
command	pointer
&&	O
!	O
(	O
flags	enum
&	O
EXECUTE_INTERNAL	O
)	O
)	O
{	O
printf	function
(	O
"%s%s\n"	pointer
,	O
prompt	pointer
,	O
command	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
if	O
(	O
use_subshell	int
&&	O
!	O
(	O
flags	enum
&	O
EXECUTE_INTERNAL	O
)	O
)	O
{	O
do_update_prompt	function
(	O
)	O
;	O
invoke_subshell	function
(	O
command	pointer
,	O
VISIBLY	int
,	O
old_vfs_dir	pointer
?	O
0	int
:	O
&	O
new_dir	pointer
)	O
;	O
}	O
else	O
my_system	function
(	O
flags	enum
,	O
shell	pointer
,	O
command	pointer
)	O
;	O
if	O
(	O
!	O
(	O
flags	enum
&	O
EXECUTE_INTERNAL	O
)	O
)	O
{	O
if	O
(	O
(	O
pause_after_run	int
==	O
pause_always	int
||	O
(	O
pause_after_run	int
==	O
pause_on_dumb_terminals	int
&&	O
!	O
xterm_flag	int
&&	O
!	O
console_flag	char
)	O
)	O
&&	O
!	O
quit	int
&&	O
subshell_state	enum
!=	O
RUNNING_COMMAND	int
)	O
{	O
printf	function
(	O
_	O
(	O
"Press any key to continue..."	pointer
)	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
mc_raw_mode	function
(	O
)	O
;	O
get_key_code	function
(	O
0	int
)	O
;	O
printf	function
(	O
"\r\n"	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
if	O
(	O
console_flag	char
)	O
{	O
if	O
(	O
output_lines	int
&&	O
keybar_visible	int
)	O
{	O
putchar	function
(	O
'\n'	O
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
console_flag	char
)	O
handle_console	function
(	O
CONSOLE_SAVE	int
)	O
;	O
edition_post_exec	function
(	O
)	O
;	O
if	O
(	O
new_dir	pointer
)	O
do_possible_cd	function
(	O
new_dir	pointer
)	O
;	O
if	O
(	O
old_vfs_dir	pointer
)	O
{	O
mc_chdir	function
(	O
old_vfs_dir	pointer
)	O
;	O
g_free	function
(	O
old_vfs_dir	pointer
)	O
;	O
}	O
update_panels	function
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
update_xterm_title_path	function
(	O
)	O
;	O
do_refresh	function
(	O
)	O
;	O
use_dash	function
(	O
TRUE	O
)	O
;	O
}	O
void	O
shell_execute	function
(	O
const	O
char	O
*	O
command	pointer
,	O
int	O
flags	enum
)	O
{	O
char	O
*	O
cmd	pointer
=	O
NULL	O
;	O
if	O
(	O
flags	enum
&	O
EXECUTE_HIDE	O
)	O
{	O
cmd	pointer
=	O
g_strconcat	function
(	O
" "	pointer
,	O
command	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
flags	enum
^=	O
EXECUTE_HIDE	O
;	O
}	O
if	O
(	O
use_subshell	int
)	O
if	O
(	O
subshell_state	enum
==	O
INACTIVE	int
)	O
do_execute	function
(	O
shell	pointer
,	O
cmd	pointer
?	O
cmd	pointer
:	O
command	pointer
,	O
flags	enum
|	O
EXECUTE_AS_SHELL	O
)	O
;	O
else	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" The shell is already running a command "	pointer
)	O
)	O
;	O
else	O
do_execute	function
(	O
shell	pointer
,	O
cmd	pointer
?	O
cmd	pointer
:	O
command	pointer
,	O
flags	enum
|	O
EXECUTE_AS_SHELL	O
)	O
;	O
g_free	function
(	O
cmd	pointer
)	O
;	O
}	O
void	O
exec_shell	function
(	O
void	O
)	O
{	O
do_execute	function
(	O
shell	pointer
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
toggle_panels	function
(	O
void	O
)	O
{	O
char	O
*	O
new_dir	pointer
=	O
NULL	O
;	O
char	O
*	O
*	O
new_dir_p	pointer
;	O
channels_down	function
(	O
)	O
;	O
disable_mouse	function
(	O
)	O
;	O
if	O
(	O
clear_before_exec	int
)	O
clr_scr	function
(	O
)	O
;	O
if	O
(	O
alternate_plus_minus	int
)	O
numeric_keypad_mode	function
(	O
)	O
;	O
keypad	O
(	O
stdscr	O
,	O
FALSE	O
)	O
;	O
endwin	O
(	O
)	O
;	O
do_exit_ca_mode	function
(	O
)	O
;	O
mc_raw_mode	function
(	O
)	O
;	O
if	O
(	O
console_flag	char
)	O
handle_console	function
(	O
CONSOLE_RESTORE	int
)	O
;	O
if	O
(	O
use_subshell	int
)	O
{	O
new_dir_p	pointer
=	O
vfs_current_is_local	function
(	O
)	O
?	O
&	O
new_dir	pointer
:	O
NULL	O
;	O
if	O
(	O
invoke_subshell	function
(	O
NULL	O
,	O
VISIBLY	int
,	O
new_dir_p	pointer
)	O
)	O
quiet_quit_cmd	function
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
output_starts_shell	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Type `exit' to return to the Midnight Commander"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n\r\n\r"	pointer
)	O
;	O
my_system	function
(	O
EXECUTE_INTERNAL	O
,	O
shell	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
get_key_code	function
(	O
0	int
)	O
;	O
}	O
if	O
(	O
console_flag	char
)	O
handle_console	function
(	O
CONSOLE_SAVE	int
)	O
;	O
do_enter_ca_mode	function
(	O
)	O
;	O
reset_prog_mode	O
(	O
)	O
;	O
keypad	O
(	O
stdscr	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
quit	int
)	O
return	O
;	O
enable_mouse	function
(	O
)	O
;	O
channels_up	function
(	O
)	O
;	O
if	O
(	O
alternate_plus_minus	int
)	O
application_keypad_mode	function
(	O
)	O
;	O
if	O
(	O
use_subshell	int
)	O
{	O
load_prompt	function
(	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
new_dir	pointer
)	O
do_possible_cd	function
(	O
new_dir	pointer
)	O
;	O
if	O
(	O
console_flag	char
&&	O
output_lines	int
)	O
show_console_contents	function
(	O
output_start_y	int
,	O
LINES	O
-	O
keybar_visible	int
-	O
output_lines	int
-	O
1	int
,	O
LINES	O
-	O
keybar_visible	int
-	O
1	int
)	O
;	O
}	O
update_panels	function
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
update_xterm_title_path	function
(	O
)	O
;	O
do_refresh	function
(	O
)	O
;	O
}	O
static	O
void	O
do_suspend_cmd	function
(	O
void	O
)	O
{	O
pre_exec	function
(	O
)	O
;	O
if	O
(	O
console_flag	char
&&	O
!	O
use_subshell	int
)	O
handle_console	function
(	O
CONSOLE_RESTORE	int
)	O
;	O
{	O
struct	O
sigaction	struct
sigtstp_action	struct
;	O
sigaction	struct
(	O
SIGTSTP	int
,	O
&	O
startup_handler	struct
,	O
&	O
sigtstp_action	struct
)	O
;	O
kill	function
(	O
getpid	function
(	O
)	O
,	O
SIGTSTP	int
)	O
;	O
sigaction	struct
(	O
SIGTSTP	int
,	O
&	O
sigtstp_action	struct
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
console_flag	char
&&	O
!	O
use_subshell	int
)	O
handle_console	function
(	O
CONSOLE_SAVE	int
)	O
;	O
edition_post_exec	function
(	O
)	O
;	O
}	O
void	O
suspend_cmd	function
(	O
void	O
)	O
{	O
save_cwds_stat	function
(	O
)	O
;	O
do_suspend_cmd	function
(	O
)	O
;	O
update_panels	function
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
do_refresh	function
(	O
)	O
;	O
}	O
void	O
execute_with_vfs_arg	function
(	O
const	O
char	O
*	O
command	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
char	O
*	O
localcopy	pointer
;	O
char	O
*	O
fn	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
time_t	long
mtime	long
;	O
if	O
(	O
!	O
filename	pointer
||	O
vfs_file_is_local	function
(	O
filename	pointer
)	O
)	O
{	O
do_execute	function
(	O
command	pointer
,	O
filename	pointer
,	O
EXECUTE_INTERNAL	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
*	O
filename	pointer
)	O
return	O
;	O
localcopy	pointer
=	O
mc_getlocalcopy	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
localcopy	pointer
==	O
NULL	O
)	O
{	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot fetch a local copy of %s "	pointer
)	O
,	O
filename	pointer
)	O
;	O
return	O
;	O
}	O
fn	pointer
=	O
g_strdup	function
(	O
filename	pointer
)	O
;	O
mc_stat	function
(	O
localcopy	pointer
,	O
&	O
st	pointer
)	O
;	O
mtime	long
=	O
st	pointer
.	O
st_mtime	O
;	O
do_execute	function
(	O
command	pointer
,	O
localcopy	pointer
,	O
EXECUTE_INTERNAL	O
)	O
;	O
mc_stat	function
(	O
localcopy	pointer
,	O
&	O
st	pointer
)	O
;	O
mc_ungetlocalcopy	function
(	O
fn	pointer
,	O
localcopy	pointer
,	O
mtime	long
!=	O
st	pointer
.	O
st_mtime	O
)	O
;	O
g_free	function
(	O
localcopy	pointer
)	O
;	O
g_free	function
(	O
fn	pointer
)	O
;	O
}	O
