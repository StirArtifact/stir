signed	O
char	O
console_flag	char
=	O
0	int
;	O
int	O
cons_saver_pid	int
=	O
1	int
;	O
static	O
int	O
pipefd1	array
[	O
2	int
]	O
=	O
{	O
-	O
1	int
,	O
-	O
1	int
}	O
;	O
static	O
int	O
pipefd2	array
[	O
2	int
]	O
=	O
{	O
-	O
1	int
,	O
-	O
1	int
}	O
;	O
static	O
void	O
show_console_contents_linux	function
(	O
int	O
starty	int
,	O
unsigned	O
char	O
begin_line	char
,	O
unsigned	O
char	O
end_line	char
)	O
{	O
unsigned	O
char	O
message	pointer
=	O
0	int
;	O
unsigned	O
short	O
bytes	pointer
=	O
0	int
;	O
int	O
i	array
;	O
if	O
(	O
!	O
console_flag	char
)	O
return	O
;	O
if	O
(	O
cons_saver_pid	int
<	O
1	int
||	O
kill	function
(	O
cons_saver_pid	int
,	O
SIGCONT	int
)	O
)	O
{	O
cons_saver_pid	int
=	O
0	int
;	O
console_flag	char
=	O
0	int
;	O
return	O
;	O
}	O
message	pointer
=	O
CONSOLE_CONTENTS	int
;	O
write	pointer
(	O
pipefd1	array
[	O
1	int
]	O
,	O
&	O
message	pointer
,	O
1	int
)	O
;	O
read	pointer
(	O
pipefd2	array
[	O
0	int
]	O
,	O
&	O
message	pointer
,	O
1	int
)	O
;	O
if	O
(	O
message	pointer
!=	O
CONSOLE_CONTENTS	int
)	O
return	O
;	O
write	pointer
(	O
pipefd1	array
[	O
1	int
]	O
,	O
&	O
begin_line	char
,	O
1	int
)	O
;	O
write	pointer
(	O
pipefd1	array
[	O
1	int
]	O
,	O
&	O
end_line	char
,	O
1	int
)	O
;	O
read	pointer
(	O
pipefd2	array
[	O
0	int
]	O
,	O
&	O
bytes	pointer
,	O
2	int
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
bytes	pointer
;	O
i	array
++	O
)	O
{	O
if	O
(	O
(	O
i	array
%	O
COLS	O
)	O
==	O
0	int
)	O
move	O
(	O
starty	int
+	O
(	O
i	array
/	O
COLS	O
)	O
,	O
0	int
)	O
;	O
read	pointer
(	O
pipefd2	array
[	O
0	int
]	O
,	O
&	O
message	pointer
,	O
1	int
)	O
;	O
addch	O
(	O
message	pointer
)	O
;	O
}	O
read	pointer
(	O
pipefd2	array
[	O
0	int
]	O
,	O
&	O
message	pointer
,	O
1	int
)	O
;	O
}	O
static	O
void	O
handle_console_linux	function
(	O
unsigned	O
char	O
action	char
)	O
{	O
char	O
*	O
tty_name	pointer
;	O
char	O
*	O
mc_conssaver	pointer
;	O
int	O
status	int
;	O
switch	O
(	O
action	char
)	O
{	O
case	O
CONSOLE_INIT	int
:	O
close	pointer
(	O
pipefd1	array
[	O
1	int
]	O
)	O
;	O
close	pointer
(	O
pipefd2	array
[	O
0	int
]	O
)	O
;	O
pipe	function
(	O
pipefd1	array
)	O
;	O
pipe	function
(	O
pipefd2	array
)	O
;	O
cons_saver_pid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
cons_saver_pid	int
<	O
0	int
)	O
{	O
close	pointer
(	O
pipefd1	array
[	O
1	int
]	O
)	O
;	O
close	pointer
(	O
pipefd1	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
pipefd2	array
[	O
1	int
]	O
)	O
;	O
close	pointer
(	O
pipefd2	array
[	O
0	int
]	O
)	O
;	O
console_flag	char
=	O
0	int
;	O
}	O
else	O
if	O
(	O
cons_saver_pid	int
>	O
0	int
)	O
{	O
close	pointer
(	O
pipefd1	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
pipefd2	array
[	O
1	int
]	O
)	O
;	O
read	pointer
(	O
pipefd2	array
[	O
0	int
]	O
,	O
&	O
console_flag	char
,	O
1	int
)	O
;	O
if	O
(	O
!	O
console_flag	char
)	O
{	O
close	pointer
(	O
pipefd1	array
[	O
1	int
]	O
)	O
;	O
close	pointer
(	O
pipefd2	array
[	O
0	int
]	O
)	O
;	O
waitpid	function
(	O
cons_saver_pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
}	O
}	O
else	O
{	O
close	pointer
(	O
pipefd1	array
[	O
1	int
]	O
)	O
;	O
close	pointer
(	O
pipefd2	array
[	O
0	int
]	O
)	O
;	O
tty_name	pointer
=	O
ttyname	function
(	O
0	int
)	O
;	O
close	pointer
(	O
0	int
)	O
;	O
dup	function
(	O
pipefd1	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
pipefd1	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
1	int
)	O
;	O
dup	function
(	O
pipefd2	array
[	O
1	int
]	O
)	O
;	O
close	pointer
(	O
pipefd2	array
[	O
1	int
]	O
)	O
;	O
close	pointer
(	O
2	int
)	O
;	O
open	function
(	O
"/dev/null"	pointer
,	O
O_WRONLY	int
)	O
;	O
if	O
(	O
tty_name	pointer
)	O
{	O
mc_conssaver	pointer
=	O
concat_dir_and_file	function
(	O
SAVERDIR	O
,	O
"cons.saver"	pointer
)	O
;	O
execl	function
(	O
mc_conssaver	pointer
,	O
"cons.saver"	pointer
,	O
tty_name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
console_flag	char
=	O
0	int
;	O
write	pointer
(	O
1	int
,	O
&	O
console_flag	char
,	O
1	int
)	O
;	O
_exit	function
(	O
3	int
)	O
;	O
}	O
break	O
;	O
case	O
CONSOLE_DONE	int
:	O
case	O
CONSOLE_SAVE	int
:	O
case	O
CONSOLE_RESTORE	int
:	O
if	O
(	O
!	O
console_flag	char
)	O
return	O
;	O
if	O
(	O
cons_saver_pid	int
<	O
1	int
||	O
kill	function
(	O
cons_saver_pid	int
,	O
SIGCONT	int
)	O
)	O
{	O
cons_saver_pid	int
=	O
0	int
;	O
console_flag	char
=	O
0	int
;	O
return	O
;	O
}	O
write	pointer
(	O
pipefd1	array
[	O
1	int
]	O
,	O
&	O
action	char
,	O
1	int
)	O
;	O
if	O
(	O
action	char
!=	O
CONSOLE_DONE	int
)	O
{	O
read	pointer
(	O
pipefd2	array
[	O
0	int
]	O
,	O
&	O
console_flag	char
,	O
1	int
)	O
;	O
}	O
if	O
(	O
action	char
==	O
CONSOLE_DONE	int
||	O
!	O
console_flag	char
)	O
{	O
close	pointer
(	O
pipefd1	array
[	O
1	int
]	O
)	O
;	O
close	pointer
(	O
pipefd2	array
[	O
0	int
]	O
)	O
;	O
waitpid	function
(	O
cons_saver_pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
console_flag	char
=	O
0	int
;	O
}	O
break	O
;	O
}	O
}	O
void	O
show_console_contents	function
(	O
int	O
starty	int
,	O
unsigned	O
char	O
begin_line	char
,	O
unsigned	O
char	O
end_line	char
)	O
{	O
standend	O
(	O
)	O
;	O
if	O
(	O
look_for_rxvt_extensions	function
(	O
)	O
)	O
{	O
show_rxvt_contents	function
(	O
starty	int
,	O
begin_line	char
,	O
end_line	char
)	O
;	O
return	O
;	O
}	O
show_console_contents_linux	function
(	O
starty	int
,	O
begin_line	char
,	O
end_line	char
)	O
;	O
}	O
void	O
handle_console	function
(	O
unsigned	O
char	O
action	char
)	O
{	O
(	O
void	O
)	O
action	char
;	O
if	O
(	O
look_for_rxvt_extensions	function
(	O
)	O
)	O
return	O
;	O
handle_console_linux	function
(	O
action	char
)	O
;	O
}	O
