double	O
gsl_linalg_householder_transform	function
(	O
gsl_vector	struct
*	O
v	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
v	pointer
->	O
size	long
;	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
return	O
0.0	int
;	O
}	O
else	O
{	O
double	O
alpha	long double
,	O
beta	long double
,	O
tau	double
;	O
gsl_vector_view	struct
x	double
=	O
gsl_vector_subvector	function
(	O
v	pointer
,	O
1	int
,	O
n	int
-	O
1	int
)	O
;	O
double	O
xnorm	double
=	O
gsl_blas_dnrm2	function
(	O
&	O
x	double
.	O
vector	struct
)	O
;	O
if	O
(	O
xnorm	double
==	O
0	int
)	O
{	O
return	O
0.0	int
;	O
}	O
alpha	long double
=	O
gsl_vector_get	function
(	O
v	pointer
,	O
0	int
)	O
;	O
beta	long double
=	O
-	O
GSL_SIGN	O
(	O
alpha	long double
)	O
*	O
hypot	function
(	O
alpha	long double
,	O
xnorm	double
)	O
;	O
tau	double
=	O
(	O
beta	long double
-	O
alpha	long double
)	O
/	O
beta	long double
;	O
{	O
double	O
s	pointer
=	O
(	O
alpha	long double
-	O
beta	long double
)	O
;	O
if	O
(	O
fabs	function
(	O
s	pointer
)	O
>	O
GSL_DBL_MIN	int
)	O
{	O
gsl_blas_dscal	function
(	O
1.0	int
/	O
s	pointer
,	O
&	O
x	double
.	O
vector	struct
)	O
;	O
gsl_vector_set	function
(	O
v	pointer
,	O
0	int
,	O
beta	long double
)	O
;	O
}	O
else	O
{	O
gsl_blas_dscal	function
(	O
GSL_DBL_EPSILON	int
/	O
s	pointer
,	O
&	O
x	double
.	O
vector	struct
)	O
;	O
gsl_blas_dscal	function
(	O
1.0	int
/	O
GSL_DBL_EPSILON	int
,	O
&	O
x	double
.	O
vector	struct
)	O
;	O
gsl_vector_set	function
(	O
v	pointer
,	O
0	int
,	O
beta	long double
)	O
;	O
}	O
}	O
return	O
tau	double
;	O
}	O
}	O
int	O
gsl_linalg_householder_hm	function
(	O
double	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
v	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
if	O
(	O
tau	double
==	O
0.0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
{	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
A	pointer
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
double	O
wj	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
0	int
,	O
j	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
A	pointer
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
wj	double
+=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
*	O
gsl_vector_get	function
(	O
v	pointer
,	O
i	long
)	O
;	O
}	O
{	O
double	O
A0j	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
0	int
,	O
j	long
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
0	int
,	O
j	long
,	O
A0j	double
-	O
tau	double
*	O
wj	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
A	pointer
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
double	O
Aij	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
double	O
vi	double
=	O
gsl_vector_get	function
(	O
v	pointer
,	O
i	long
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
j	long
,	O
Aij	double
-	O
tau	double
*	O
vi	double
*	O
wj	double
)	O
;	O
}	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_linalg_householder_mh	function
(	O
double	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
v	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
if	O
(	O
tau	double
==	O
0	int
)	O
return	O
GSL_SUCCESS	int
;	O
{	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
A	pointer
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
double	O
wi	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
0	int
)	O
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<	O
A	pointer
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
wi	double
+=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
*	O
gsl_vector_get	function
(	O
v	pointer
,	O
j	long
)	O
;	O
}	O
{	O
double	O
Ai0	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
0	int
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
0	int
,	O
Ai0	double
-	O
tau	double
*	O
wi	double
)	O
;	O
}	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<	O
A	pointer
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
double	O
vj	double
=	O
gsl_vector_get	function
(	O
v	pointer
,	O
j	long
)	O
;	O
double	O
Aij	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
j	long
,	O
Aij	double
-	O
tau	double
*	O
wi	double
*	O
vj	double
)	O
;	O
}	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_linalg_householder_hv	function
(	O
double	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
v	pointer
,	O
gsl_vector	struct
*	O
w	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
v	pointer
->	O
size	long
;	O
if	O
(	O
tau	double
==	O
0	int
)	O
return	O
GSL_SUCCESS	int
;	O
{	O
double	O
w0	double
=	O
gsl_vector_get	function
(	O
w	pointer
,	O
0	int
)	O
;	O
double	O
d1	pointer
,	O
d	double
;	O
gsl_vector_const_view	struct
v1	struct
=	O
gsl_vector_const_subvector	function
(	O
v	pointer
,	O
1	int
,	O
N	int
-	O
1	int
)	O
;	O
gsl_vector_view	struct
w1	struct
=	O
gsl_vector_subvector	function
(	O
w	pointer
,	O
1	int
,	O
N	int
-	O
1	int
)	O
;	O
gsl_blas_ddot	function
(	O
&	O
v1	struct
.	O
vector	struct
,	O
&	O
w1	struct
.	O
vector	struct
,	O
&	O
d1	pointer
)	O
;	O
d	double
=	O
w0	double
+	O
d1	pointer
;	O
gsl_vector_set	function
(	O
w	pointer
,	O
0	int
,	O
w0	double
-	O
tau	double
*	O
d	double
)	O
;	O
gsl_blas_daxpy	function
(	O
-	O
tau	double
*	O
d	double
,	O
&	O
v1	struct
.	O
vector	struct
,	O
&	O
w1	struct
.	O
vector	struct
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_linalg_householder_left	function
(	O
const	O
double	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
v	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
v	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must match Householder vector dimensions"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"workspace must match matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
double	O
v0	double
;	O
if	O
(	O
tau	double
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
v0	double
=	O
gsl_vector_get	function
(	O
v	pointer
,	O
0	int
)	O
;	O
v	pointer
->	O
data	pointer
[	O
0	int
]	O
=	O
1.0	int
;	O
gsl_blas_dgemv	function
(	O
CblasTrans	int
,	O
1.0	int
,	O
A	pointer
,	O
v	pointer
,	O
0.0	int
,	O
work	pointer
)	O
;	O
gsl_blas_dger	function
(	O
-	O
tau	double
,	O
v	pointer
,	O
work	pointer
,	O
A	pointer
)	O
;	O
v	pointer
->	O
data	pointer
[	O
0	int
]	O
=	O
v0	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_householder_right	function
(	O
const	O
double	O
tau	double
,	O
const	O
gsl_vector	struct
*	O
v	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
v	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must match Householder vector dimensions"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"workspace must match matrix"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
double	O
v0	double
;	O
if	O
(	O
tau	double
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
v0	double
=	O
gsl_vector_get	function
(	O
v	pointer
,	O
0	int
)	O
;	O
v	pointer
->	O
data	pointer
[	O
0	int
]	O
=	O
1.0	int
;	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
A	pointer
,	O
v	pointer
,	O
0.0	int
,	O
work	pointer
)	O
;	O
gsl_blas_dger	function
(	O
-	O
tau	double
,	O
work	pointer
,	O
v	pointer
,	O
A	pointer
)	O
;	O
v	pointer
->	O
data	pointer
[	O
0	int
]	O
=	O
v0	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_householder_hm1	function
(	O
double	O
tau	double
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
if	O
(	O
tau	double
==	O
0	int
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
1.0	int
)	O
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<	O
A	pointer
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
gsl_matrix_set	function
(	O
A	pointer
,	O
0	int
,	O
j	long
,	O
0.0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
A	pointer
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
0	int
,	O
0.0	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
{	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<	O
A	pointer
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
double	O
wj	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
A	pointer
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
double	O
vi	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
0	int
)	O
;	O
wj	double
+=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
*	O
vi	double
;	O
}	O
gsl_matrix_set	function
(	O
A	pointer
,	O
0	int
,	O
j	long
,	O
-	O
tau	double
*	O
wj	double
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
A	pointer
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
double	O
vi	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
0	int
)	O
;	O
double	O
Aij	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
j	long
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
j	long
,	O
Aij	double
-	O
tau	double
*	O
vi	double
*	O
wj	double
)	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
A	pointer
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
double	O
vi	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
i	long
,	O
0	int
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
i	long
,	O
0	int
,	O
-	O
tau	double
*	O
vi	double
)	O
;	O
}	O
gsl_matrix_set	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
1.0	int
-	O
tau	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
