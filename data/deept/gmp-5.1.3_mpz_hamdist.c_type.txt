mp_bitcnt_t	long
mpz_hamdist	O
(	O
mpz_srcptr	pointer
u	array
,	O
mpz_srcptr	pointer
v	pointer
)	O
__GMP_NOTHROW	O
{	O
mp_srcptr	pointer
up	pointer
,	O
vp	pointer
;	O
mp_size_t	long
usize	pointer
,	O
vsize	long
;	O
mp_bitcnt_t	long
count	long
;	O
usize	pointer
=	O
SIZ	O
(	O
u	array
)	O
;	O
vsize	long
=	O
SIZ	O
(	O
v	pointer
)	O
;	O
up	pointer
=	O
PTR	O
(	O
u	array
)	O
;	O
vp	pointer
=	O
PTR	O
(	O
v	pointer
)	O
;	O
if	O
(	O
usize	pointer
>=	O
0	int
)	O
{	O
if	O
(	O
vsize	long
<	O
0	int
)	O
return	O
~	O
(	O
mp_bitcnt_t	long
)	O
0	int
;	O
if	O
(	O
usize	pointer
<	O
vsize	long
)	O
MPN_SRCPTR_SWAP	O
(	O
up	pointer
,	O
usize	pointer
,	O
vp	pointer
,	O
vsize	long
)	O
;	O
count	long
=	O
0	int
;	O
if	O
(	O
vsize	long
!=	O
0	int
)	O
count	long
=	O
mpn_hamdist	O
(	O
up	pointer
,	O
vp	pointer
,	O
vsize	long
)	O
;	O
usize	pointer
-=	O
vsize	long
;	O
if	O
(	O
usize	pointer
!=	O
0	int
)	O
count	long
+=	O
mpn_popcount	O
(	O
up	pointer
+	O
vsize	long
,	O
usize	pointer
)	O
;	O
return	O
count	long
;	O
}	O
else	O
{	O
mp_limb_t	long
ulimb	long
,	O
vlimb	long
;	O
mp_size_t	long
old_vsize	long
,	O
step	pointer
;	O
if	O
(	O
vsize	long
>=	O
0	int
)	O
return	O
~	O
(	O
mp_bitcnt_t	long
)	O
0	int
;	O
usize	pointer
=	O
-	O
usize	pointer
;	O
vsize	long
=	O
-	O
vsize	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
ASSERT	O
(	O
usize	pointer
>	O
0	int
)	O
;	O
ASSERT	O
(	O
vsize	long
>	O
0	int
)	O
;	O
usize	pointer
--	O
;	O
vsize	long
--	O
;	O
ulimb	long
=	O
*	O
up	pointer
++	O
;	O
vlimb	long
=	O
*	O
vp	pointer
++	O
;	O
if	O
(	O
ulimb	long
!=	O
0	int
)	O
break	O
;	O
if	O
(	O
vlimb	long
!=	O
0	int
)	O
{	O
MPN_SRCPTR_SWAP	O
(	O
up	pointer
,	O
usize	pointer
,	O
vp	pointer
,	O
vsize	long
)	O
;	O
ulimb	long
=	O
vlimb	long
;	O
vlimb	long
=	O
0	int
;	O
break	O
;	O
}	O
}	O
ulimb	long
=	O
-	O
ulimb	long
;	O
vlimb	long
=	O
-	O
vlimb	long
;	O
popc_limb	O
(	O
count	long
,	O
(	O
ulimb	long
^	O
vlimb	long
)	O
&	O
GMP_NUMB_MASK	O
)	O
;	O
if	O
(	O
vlimb	long
==	O
0	int
)	O
{	O
mp_bitcnt_t	long
twoscount	long
;	O
old_vsize	long
=	O
vsize	long
;	O
do	O
{	O
ASSERT	O
(	O
vsize	long
>	O
0	int
)	O
;	O
vsize	long
--	O
;	O
vlimb	long
=	O
*	O
vp	pointer
++	O
;	O
}	O
while	O
(	O
vlimb	long
==	O
0	int
)	O
;	O
step	pointer
=	O
old_vsize	long
-	O
vsize	long
-	O
1	int
;	O
count	long
+=	O
step	pointer
*	O
GMP_NUMB_BITS	O
;	O
step	pointer
=	O
MIN	O
(	O
step	pointer
,	O
usize	pointer
)	O
;	O
if	O
(	O
step	pointer
!=	O
0	int
)	O
{	O
count	long
-=	O
mpn_popcount	O
(	O
up	pointer
,	O
step	pointer
)	O
;	O
usize	pointer
-=	O
step	pointer
;	O
up	pointer
+=	O
step	pointer
;	O
}	O
vlimb	long
--	O
;	O
if	O
(	O
usize	pointer
!=	O
0	int
)	O
{	O
usize	pointer
--	O
;	O
vlimb	long
^=	O
*	O
up	pointer
++	O
;	O
}	O
popc_limb	O
(	O
twoscount	long
,	O
vlimb	long
)	O
;	O
count	long
+=	O
twoscount	long
;	O
}	O
step	pointer
=	O
MIN	O
(	O
usize	pointer
,	O
vsize	long
)	O
;	O
if	O
(	O
step	pointer
!=	O
0	int
)	O
{	O
count	long
+=	O
mpn_hamdist	O
(	O
up	pointer
,	O
vp	pointer
,	O
step	pointer
)	O
;	O
usize	pointer
-=	O
step	pointer
;	O
vsize	long
-=	O
step	pointer
;	O
up	pointer
+=	O
step	pointer
;	O
vp	pointer
+=	O
step	pointer
;	O
}	O
if	O
(	O
usize	pointer
!=	O
0	int
)	O
{	O
remaining	O
:	O
count	long
+=	O
mpn_popcount	O
(	O
up	pointer
,	O
usize	pointer
)	O
;	O
}	O
else	O
if	O
(	O
vsize	long
!=	O
0	int
)	O
{	O
up	pointer
=	O
vp	pointer
;	O
usize	pointer
=	O
vsize	long
;	O
goto	O
remaining	O
;	O
}	O
return	O
count	long
;	O
}	O
}	O
