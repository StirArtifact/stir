static	O
int	O
fd_read	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	pointer
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
str	pointer
;	O
ssize_t	long
n	int
=	O
read	function
(	O
fstr	pointer
->	O
fd	int
,	O
buf	pointer
,	O
size	long
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
*	O
pret	pointer
=	O
n	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
fd_write	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	pointer
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
str	pointer
;	O
ssize_t	long
n	int
=	O
write	function
(	O
fstr	pointer
->	O
fd	int
,	O
(	O
char	O
*	O
)	O
buf	pointer
,	O
size	long
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
*	O
pret	pointer
=	O
n	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
fd_close	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
str	pointer
;	O
if	O
(	O
fstr	pointer
->	O
fd	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
!	O
(	O
fstr	pointer
->	O
flags	int
&	O
_MU_FILE_STREAM_FD_BORROWED	int
)	O
&&	O
close	function
(	O
fstr	pointer
->	O
fd	int
)	O
)	O
return	O
errno	O
;	O
fstr	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
fd_open	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
str	pointer
;	O
int	O
oflg	int
;	O
int	O
fd	int
;	O
if	O
(	O
!	O
fstr	pointer
->	O
filename	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
fstr	pointer
->	O
fd	int
!=	O
-	O
1	int
)	O
fd_close	function
(	O
str	pointer
)	O
;	O
if	O
(	O
(	O
fstr	pointer
->	O
stream	pointer
.	O
flags	int
&	O
MU_STREAM_RDWR	O
)	O
==	O
MU_STREAM_RDWR	O
)	O
oflg	int
=	O
O_RDWR	int
;	O
else	O
if	O
(	O
(	O
fstr	pointer
->	O
stream	pointer
.	O
flags	int
&	O
(	O
MU_STREAM_READ	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
==	O
(	O
MU_STREAM_READ	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
oflg	int
=	O
O_RDWR	int
;	O
else	O
if	O
(	O
fstr	pointer
->	O
stream	pointer
.	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
oflg	int
=	O
O_WRONLY	int
;	O
else	O
oflg	int
=	O
O_RDONLY	int
;	O
if	O
(	O
fstr	pointer
->	O
stream	pointer
.	O
flags	int
&	O
MU_STREAM_APPEND	int
)	O
oflg	int
|=	O
O_APPEND	int
;	O
if	O
(	O
fstr	pointer
->	O
stream	pointer
.	O
flags	int
&	O
MU_STREAM_CREAT	int
)	O
{	O
fd	int
=	O
open	function
(	O
fstr	pointer
->	O
filename	pointer
,	O
oflg	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
!=	O
ENOENT	int
)	O
return	O
errno	O
;	O
fd	int
=	O
open	function
(	O
fstr	pointer
->	O
filename	pointer
,	O
oflg	int
|	O
O_CREAT	int
|	O
O_EXCL	int
,	O
0600	int
|	O
mu_stream_flags_to_mode	function
(	O
fstr	pointer
->	O
stream	pointer
.	O
flags	int
,	O
0	int
)	O
)	O
;	O
}	O
}	O
else	O
fd	int
=	O
open	function
(	O
fstr	pointer
->	O
filename	pointer
,	O
oflg	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
if	O
(	O
lseek	function
(	O
fd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
==	O
-	O
1	int
)	O
str	pointer
->	O
flags	int
&=	O
~	O
MU_STREAM_SEEK	int
;	O
fstr	pointer
->	O
flags	int
&=	O
~	O
_MU_FILE_STREAM_FD_BORROWED	int
;	O
fstr	pointer
->	O
fd	int
=	O
fd	int
;	O
return	O
0	int
;	O
}	O
int	O
fd_seek	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
mu_off_t	long
off	long
,	O
mu_off_t	long
*	O
presult	pointer
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
str	pointer
;	O
off	long
=	O
lseek	function
(	O
fstr	pointer
->	O
fd	int
,	O
off	long
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
off	long
<	O
0	int
)	O
return	O
errno	O
;	O
*	O
presult	pointer
=	O
off	long
;	O
return	O
0	int
;	O
}	O
int	O
fd_size	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
str	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
if	O
(	O
fstat	function
(	O
fstr	pointer
->	O
fd	int
,	O
&	O
st	pointer
)	O
)	O
return	O
errno	O
;	O
*	O
psize	pointer
=	O
st	pointer
.	O
st_size	long
;	O
return	O
0	int
;	O
}	O
void	O
fd_done	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
str	pointer
;	O
if	O
(	O
fstr	pointer
->	O
fd	int
!=	O
-	O
1	int
)	O
fd_close	function
(	O
str	pointer
)	O
;	O
if	O
(	O
fstr	pointer
->	O
filename	pointer
&&	O
!	O
(	O
fstr	pointer
->	O
flags	int
&	O
_MU_FILE_STREAM_STATIC_FILENAME	int
)	O
)	O
free	function
(	O
fstr	pointer
->	O
filename	pointer
)	O
;	O
if	O
(	O
fstr	pointer
->	O
echo_state	pointer
)	O
free	function
(	O
fstr	pointer
->	O
echo_state	pointer
)	O
;	O
}	O
static	O
int	O
fd_ioctl	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
code	int
,	O
int	O
opcode	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
str	pointer
;	O
mu_transport_t	pointer
*	O
ptrans	pointer
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
MU_IOCTL_TRANSPORT	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
ptrans	pointer
=	O
ptr	pointer
;	O
ptrans	pointer
[	O
0	int
]	O
=	O
(	O
mu_transport_t	pointer
)	O
(	O
intptr_t	long
)	O
fstr	pointer
->	O
fd	int
;	O
ptrans	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
ptrans	pointer
=	O
ptr	pointer
;	O
fstr	pointer
->	O
fd	int
=	O
(	O
int	O
)	O
(	O
intptr_t	long
)	O
ptrans	pointer
[	O
0	int
]	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
MU_IOCTL_TRANSPORT_BUFFER	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
struct	O
mu_buffer_query	struct
*	O
qp	pointer
=	O
ptr	pointer
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
return	O
mu_stream_get_buffer	function
(	O
str	pointer
,	O
qp	pointer
)	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
return	O
mu_stream_set_buffer	function
(	O
str	pointer
,	O
qp	pointer
->	O
buftype	enum
,	O
qp	pointer
->	O
bufsize	long
)	O
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_ECHO	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
*	O
(	O
int	O
*	O
)	O
ptr	pointer
=	O
fstr	pointer
->	O
flags	int
&	O
_MU_FILE_STREAM_ECHO_OFF	int
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
{	O
int	O
status	int
;	O
struct	O
termios	struct
t	struct
;	O
int	O
state	pointer
=	O
*	O
(	O
int	O
*	O
)	O
ptr	pointer
;	O
if	O
(	O
state	pointer
==	O
0	int
)	O
{	O
if	O
(	O
fstr	pointer
->	O
flags	int
&	O
_MU_FILE_STREAM_ECHO_OFF	int
)	O
return	O
0	int
;	O
status	int
=	O
tcgetattr	function
(	O
fstr	pointer
->	O
fd	int
,	O
&	O
t	struct
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
fstr	pointer
->	O
echo_state	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
t	struct
)	O
)	O
;	O
if	O
(	O
!	O
fstr	pointer
->	O
echo_state	pointer
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
fstr	pointer
->	O
echo_state	pointer
,	O
&	O
t	struct
,	O
sizeof	O
(	O
t	struct
)	O
)	O
;	O
t	struct
.	O
c_lflag	int
&=	O
~	O
(	O
ECHO	int
|	O
ISIG	int
)	O
;	O
status	int
=	O
tcsetattr	function
(	O
fstr	pointer
->	O
fd	int
,	O
TCSAFLUSH	int
|	O
TCSASOFT	int
,	O
&	O
t	struct
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
fstr	pointer
->	O
flags	int
|=	O
_MU_FILE_STREAM_ECHO_OFF	int
;	O
}	O
if	O
(	O
status	int
)	O
{	O
status	int
=	O
errno	O
;	O
if	O
(	O
fstr	pointer
->	O
echo_state	pointer
)	O
{	O
free	function
(	O
fstr	pointer
->	O
echo_state	pointer
)	O
;	O
fstr	pointer
->	O
echo_state	pointer
=	O
NULL	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
fstr	pointer
->	O
flags	int
&	O
_MU_FILE_STREAM_ECHO_OFF	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
tcsetattr	function
(	O
fstr	pointer
->	O
fd	int
,	O
TCSAFLUSH	int
|	O
TCSASOFT	int
,	O
fstr	pointer
->	O
echo_state	pointer
)	O
)	O
status	int
=	O
errno	O
;	O
else	O
{	O
status	int
=	O
0	int
;	O
free	function
(	O
fstr	pointer
->	O
echo_state	pointer
)	O
;	O
fstr	pointer
->	O
echo_state	pointer
=	O
NULL	O
;	O
fstr	pointer
->	O
flags	int
&=	O
~	O
_MU_FILE_STREAM_ECHO_OFF	int
;	O
}	O
}	O
return	O
status	int
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_FD	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_FD_GET_BORROW	int
:	O
*	O
(	O
int	O
*	O
)	O
ptr	pointer
=	O
!	O
!	O
(	O
fstr	pointer
->	O
flags	int
&	O
_MU_FILE_STREAM_FD_BORROWED	int
)	O
;	O
break	O
;	O
case	O
MU_IOCTL_FD_SET_BORROW	int
:	O
if	O
(	O
*	O
(	O
int	O
*	O
)	O
ptr	pointer
)	O
fstr	pointer
->	O
flags	int
|=	O
_MU_FILE_STREAM_FD_BORROWED	int
;	O
else	O
fstr	pointer
->	O
flags	int
&=	O
~	O
_MU_FILE_STREAM_FD_BORROWED	int
;	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
fd_wait	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
*	O
pflags	pointer
,	O
struct	O
timeval	struct
*	O
tvp	pointer
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
stream	pointer
;	O
if	O
(	O
fstr	pointer
->	O
fd	int
==	O
-	O
1	int
)	O
return	O
EINVAL	int
;	O
return	O
mu_fd_wait	function
(	O
fstr	pointer
->	O
fd	int
,	O
pflags	pointer
,	O
tvp	pointer
)	O
;	O
}	O
int	O
fd_truncate	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_off_t	long
size	long
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
stream	pointer
;	O
if	O
(	O
ftruncate	function
(	O
fstr	pointer
->	O
fd	int
,	O
size	long
)	O
)	O
return	O
errno	O
;	O
return	O
0	int
;	O
}	O
void	O
_mu_file_stream_setup	function
(	O
struct	O
_mu_file_stream	struct
*	O
str	pointer
)	O
{	O
str	pointer
->	O
stream	pointer
.	O
read	function
=	O
fd_read	function
;	O
str	pointer
->	O
stream	pointer
.	O
write	function
=	O
fd_write	function
;	O
str	pointer
->	O
stream	pointer
.	O
open	function
=	O
fd_open	function
;	O
str	pointer
->	O
stream	pointer
.	O
close	function
=	O
fd_close	function
;	O
str	pointer
->	O
stream	pointer
.	O
done	pointer
=	O
fd_done	function
;	O
str	pointer
->	O
stream	pointer
.	O
seek	pointer
=	O
fd_seek	function
;	O
str	pointer
->	O
stream	pointer
.	O
size	long
=	O
fd_size	function
;	O
str	pointer
->	O
stream	pointer
.	O
ctl	pointer
=	O
fd_ioctl	function
;	O
str	pointer
->	O
stream	pointer
.	O
wait	pointer
=	O
fd_wait	function
;	O
str	pointer
->	O
stream	pointer
.	O
truncate	function
=	O
fd_truncate	function
;	O
}	O
int	O
_mu_file_stream_create	function
(	O
struct	O
_mu_file_stream	struct
*	O
*	O
pstream	pointer
,	O
size_t	long
size	long
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
fd	int
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
str	pointer
=	O
(	O
struct	O
_mu_file_stream	struct
*	O
)	O
_mu_stream_create	function
(	O
size	long
,	O
flags	int
)	O
;	O
if	O
(	O
!	O
str	pointer
)	O
return	O
ENOMEM	int
;	O
_mu_file_stream_setup	function
(	O
str	pointer
)	O
;	O
if	O
(	O
filename	pointer
)	O
str	pointer
->	O
filename	pointer
=	O
mu_strdup	function
(	O
filename	pointer
)	O
;	O
else	O
str	pointer
->	O
filename	pointer
=	O
NULL	O
;	O
str	pointer
->	O
fd	int
=	O
fd	int
;	O
str	pointer
->	O
flags	int
=	O
0	int
;	O
*	O
pstream	pointer
=	O
str	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_file_stream_create	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
;	O
int	O
rc	int
=	O
_mu_file_stream_create	function
(	O
&	O
fstr	pointer
,	O
sizeof	O
(	O
struct	O
_mu_file_stream	struct
)	O
,	O
filename	pointer
,	O
-	O
1	int
,	O
flags	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_stream_t	pointer
stream	pointer
=	O
(	O
mu_stream_t	pointer
)	O
fstr	pointer
;	O
mu_stream_set_buffer	function
(	O
stream	pointer
,	O
mu_buffer_full	int
,	O
0	int
)	O
;	O
rc	int
=	O
mu_stream_open	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
else	O
*	O
pstream	pointer
=	O
stream	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_fd_stream_create	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
char	O
*	O
filename	pointer
,	O
int	O
fd	int
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_file_stream	struct
*	O
fstr	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_SEEK	int
)	O
{	O
if	O
(	O
lseek	function
(	O
fd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
)	O
return	O
errno	O
;	O
}	O
rc	int
=	O
_mu_file_stream_create	function
(	O
&	O
fstr	pointer
,	O
sizeof	O
(	O
struct	O
_mu_file_stream	struct
)	O
,	O
filename	pointer
,	O
fd	int
,	O
flags	int
|	O
_MU_STR_OPEN	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_stream_t	pointer
stream	pointer
=	O
(	O
mu_stream_t	pointer
)	O
fstr	pointer
;	O
mu_stream_set_buffer	function
(	O
stream	pointer
,	O
mu_buffer_full	int
,	O
0	int
)	O
;	O
*	O
pstream	pointer
=	O
stream	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
