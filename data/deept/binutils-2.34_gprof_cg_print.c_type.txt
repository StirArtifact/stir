static	O
void	O
print_header	function
(	O
void	O
)	O
;	O
static	O
void	O
print_cycle	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
int	O
cmp_member	function
(	O
Sym	struct
*	O
,	O
Sym	struct
*	O
)	O
;	O
static	O
void	O
sort_members	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
void	O
print_members	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
int	O
cmp_arc	function
(	O
Arc	struct
*	O
,	O
Arc	struct
*	O
)	O
;	O
static	O
void	O
sort_parents	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
void	O
print_parents	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
void	O
sort_children	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
void	O
print_children	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
void	O
print_line	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
int	O
cmp_name	function
(	O
const	O
PTR	O
,	O
const	O
PTR	O
)	O
;	O
static	O
int	O
cmp_arc_count	function
(	O
const	O
PTR	O
,	O
const	O
PTR	O
)	O
;	O
static	O
int	O
cmp_fun_nuses	function
(	O
const	O
PTR	O
,	O
const	O
PTR	O
)	O
;	O
static	O
void	O
order_and_dump_functions_by_arcs	function
(	O
Arc	struct
*	O
*	O
,	O
unsigned	O
long	O
,	O
int	O
,	O
Arc	struct
*	O
*	O
,	O
unsigned	O
long	O
*	O
)	O
;	O
extern	O
void	O
bsd_callg_blurb	function
(	O
FILE	struct
*	O
fp	pointer
)	O
;	O
extern	O
void	O
fsf_callg_blurb	function
(	O
FILE	struct
*	O
fp	pointer
)	O
;	O
double	O
print_time	double
=	O
0.0	int
;	O
static	O
void	O
print_header	function
(	O
void	O
)	O
{	O
if	O
(	O
first_output	int
)	O
first_output	int
=	O
FALSE	int
;	O
else	O
printf	function
(	O
"\f\n"	pointer
)	O
;	O
if	O
(	O
!	O
bsd_style_output	int
)	O
{	O
if	O
(	O
print_descriptions	int
)	O
printf	function
(	O
_	O
(	O
"\t\t     Call graph (explanation follows)\n\n"	pointer
)	O
)	O
;	O
else	O
printf	function
(	O
_	O
(	O
"\t\t\tCall graph\n\n"	pointer
)	O
)	O
;	O
}	O
printf	function
(	O
_	O
(	O
"\ngranularity: each sample hit covers %ld byte(s)"	pointer
)	O
,	O
(	O
long	O
)	O
hist_scale	double
*	O
(	O
long	O
)	O
sizeof	O
(	O
UNIT	array
)	O
)	O
;	O
if	O
(	O
print_time	double
>	O
0.0	int
)	O
printf	function
(	O
_	O
(	O
" for %.2f%% of %.2f seconds\n\n"	pointer
)	O
,	O
100.0	int
/	O
print_time	double
,	O
print_time	double
/	O
hz	long
)	O
;	O
else	O
{	O
printf	function
(	O
_	O
(	O
" no time propagated\n\n"	pointer
)	O
)	O
;	O
print_time	double
=	O
1.0	int
;	O
}	O
if	O
(	O
bsd_style_output	int
)	O
{	O
printf	function
(	O
"%6.6s %5.5s %7.7s %11.11s %7.7s/%-7.7s     %-8.8s\n"	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
,	O
_	O
(	O
"called"	pointer
)	O
,	O
_	O
(	O
"total"	pointer
)	O
,	O
_	O
(	O
"parents"	pointer
)	O
)	O
;	O
printf	function
(	O
"%-6.6s %5.5s %7.7s %11.11s %7.7s+%-7.7s %-8.8s\t%5.5s\n"	pointer
,	O
_	O
(	O
"index"	pointer
)	O
,	O
_	O
(	O
"%time"	pointer
)	O
,	O
_	O
(	O
"self"	pointer
)	O
,	O
_	O
(	O
"descendants"	pointer
)	O
,	O
_	O
(	O
"called"	pointer
)	O
,	O
_	O
(	O
"self"	pointer
)	O
,	O
_	O
(	O
"name"	pointer
)	O
,	O
_	O
(	O
"index"	pointer
)	O
)	O
;	O
printf	function
(	O
"%6.6s %5.5s %7.7s %11.11s %7.7s/%-7.7s     %-8.8s\n"	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
,	O
_	O
(	O
"called"	pointer
)	O
,	O
_	O
(	O
"total"	pointer
)	O
,	O
_	O
(	O
"children"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
_	O
(	O
"index %% time    self  children    called     name\n"	pointer
)	O
)	O
;	O
}	O
}	O
static	O
void	O
print_cycle	function
(	O
Sym	struct
*	O
cyc	struct
)	O
{	O
char	O
buf	pointer
[	O
BUFSIZ	int
]	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"[%d]"	pointer
,	O
cyc	struct
->	O
cg	struct
.	O
index	function
)	O
;	O
printf	function
(	O
bsd_style_output	int
?	O
"%-6.6s %5.1f %7.2f %11.2f %7lu"	pointer
:	O
"%-6.6s %5.1f %7.2f %7.2f %7lu"	pointer
,	O
buf	pointer
,	O
100	int
*	O
(	O
cyc	struct
->	O
cg	struct
.	O
prop	struct
.	O
self	double
+	O
cyc	struct
->	O
cg	struct
.	O
prop	struct
.	O
child	double
)	O
/	O
print_time	double
,	O
cyc	struct
->	O
cg	struct
.	O
prop	struct
.	O
self	double
/	O
hz	long
,	O
cyc	struct
->	O
cg	struct
.	O
prop	struct
.	O
child	double
/	O
hz	long
,	O
cyc	struct
->	O
ncalls	long
)	O
;	O
if	O
(	O
cyc	struct
->	O
cg	struct
.	O
self_calls	long
!=	O
0	int
)	O
printf	function
(	O
"+%-7lu"	pointer
,	O
cyc	struct
->	O
cg	struct
.	O
self_calls	long
)	O
;	O
else	O
printf	function
(	O
" %7.7s"	pointer
,	O
""	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
" <cycle %d as a whole> [%d]\n"	pointer
)	O
,	O
cyc	struct
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
,	O
cyc	struct
->	O
cg	struct
.	O
index	function
)	O
;	O
}	O
static	O
int	O
cmp_member	function
(	O
Sym	struct
*	O
left	pointer
,	O
Sym	struct
*	O
right	pointer
)	O
{	O
double	O
left_time	double
=	O
left	pointer
->	O
cg	struct
.	O
prop	struct
.	O
self	double
+	O
left	pointer
->	O
cg	struct
.	O
prop	struct
.	O
child	double
;	O
double	O
right_time	double
=	O
right	pointer
->	O
cg	struct
.	O
prop	struct
.	O
self	double
+	O
right	pointer
->	O
cg	struct
.	O
prop	struct
.	O
child	double
;	O
unsigned	O
long	O
left_calls	long
=	O
left	pointer
->	O
ncalls	long
+	O
left	pointer
->	O
cg	struct
.	O
self_calls	long
;	O
unsigned	O
long	O
right_calls	long
=	O
right	pointer
->	O
ncalls	long
+	O
right	pointer
->	O
cg	struct
.	O
self_calls	long
;	O
if	O
(	O
left_time	double
>	O
right_time	double
)	O
return	O
GREATERTHAN	int
;	O
if	O
(	O
left_time	double
<	O
right_time	double
)	O
return	O
LESSTHAN	O
;	O
if	O
(	O
left_calls	long
>	O
right_calls	long
)	O
return	O
GREATERTHAN	int
;	O
if	O
(	O
left_calls	long
<	O
right_calls	long
)	O
return	O
LESSTHAN	O
;	O
return	O
EQUALTO	int
;	O
}	O
static	O
void	O
sort_members	function
(	O
Sym	struct
*	O
cyc	struct
)	O
{	O
Sym	struct
*	O
todo	pointer
,	O
*	O
doing	pointer
,	O
*	O
prev	pointer
;	O
todo	pointer
=	O
cyc	struct
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
;	O
cyc	struct
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
=	O
0	int
;	O
for	O
(	O
doing	pointer
=	O
todo	pointer
;	O
doing	pointer
!=	O
NULL	O
;	O
doing	pointer
=	O
todo	pointer
)	O
{	O
todo	pointer
=	O
doing	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
;	O
for	O
(	O
prev	pointer
=	O
cyc	struct
;	O
prev	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
;	O
prev	pointer
=	O
prev	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
)	O
{	O
if	O
(	O
cmp_member	function
(	O
doing	pointer
,	O
prev	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
)	O
==	O
GREATERTHAN	int
)	O
break	O
;	O
}	O
doing	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
=	O
prev	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
;	O
prev	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
=	O
doing	pointer
;	O
}	O
}	O
static	O
void	O
print_members	function
(	O
Sym	struct
*	O
cyc	struct
)	O
{	O
Sym	struct
*	O
member	pointer
;	O
sort_members	function
(	O
cyc	struct
)	O
;	O
for	O
(	O
member	pointer
=	O
cyc	struct
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
;	O
member	pointer
;	O
member	pointer
=	O
member	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
)	O
{	O
printf	function
(	O
bsd_style_output	int
?	O
"%6.6s %5.5s %7.2f %11.2f %7lu"	pointer
:	O
"%6.6s %5.5s %7.2f %7.2f %7lu"	pointer
,	O
""	pointer
,	O
""	pointer
,	O
member	pointer
->	O
cg	struct
.	O
prop	struct
.	O
self	double
/	O
hz	long
,	O
member	pointer
->	O
cg	struct
.	O
prop	struct
.	O
child	double
/	O
hz	long
,	O
member	pointer
->	O
ncalls	long
)	O
;	O
if	O
(	O
member	pointer
->	O
cg	struct
.	O
self_calls	long
!=	O
0	int
)	O
printf	function
(	O
"+%-7lu"	pointer
,	O
member	pointer
->	O
cg	struct
.	O
self_calls	long
)	O
;	O
else	O
printf	function
(	O
" %7.7s"	pointer
,	O
""	pointer
)	O
;	O
printf	function
(	O
"     "	pointer
)	O
;	O
print_name	function
(	O
member	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
}	O
static	O
int	O
cmp_arc	function
(	O
Arc	struct
*	O
left	pointer
,	O
Arc	struct
*	O
right	pointer
)	O
{	O
Sym	struct
*	O
left_parent	pointer
=	O
left	pointer
->	O
parent	pointer
;	O
Sym	struct
*	O
left_child	pointer
=	O
left	pointer
->	O
child	double
;	O
Sym	struct
*	O
right_parent	pointer
=	O
right	pointer
->	O
parent	pointer
;	O
Sym	struct
*	O
right_child	pointer
=	O
right	pointer
->	O
child	double
;	O
double	O
left_time	double
,	O
right_time	double
;	O
DBG	O
(	O
TIMEDEBUG	O
,	O
printf	function
(	O
"[cmp_arc] "	pointer
)	O
;	O
print_name	function
(	O
left_parent	pointer
)	O
;	O
printf	function
(	O
" calls "	pointer
)	O
;	O
print_name	function
(	O
left_child	pointer
)	O
;	O
printf	function
(	O
" %f + %f %lu/%lu\n"	pointer
,	O
left	pointer
->	O
time	struct
,	O
left	pointer
->	O
child_time	double
,	O
left	pointer
->	O
count	int
,	O
left_child	pointer
->	O
ncalls	long
)	O
;	O
printf	function
(	O
"[cmp_arc] "	pointer
)	O
;	O
print_name	function
(	O
right_parent	pointer
)	O
;	O
printf	function
(	O
" calls "	pointer
)	O
;	O
print_name	function
(	O
right_child	pointer
)	O
;	O
printf	function
(	O
" %f + %f %lu/%lu\n"	pointer
,	O
right	pointer
->	O
time	struct
,	O
right	pointer
->	O
child_time	double
,	O
right	pointer
->	O
count	int
,	O
right_child	pointer
->	O
ncalls	long
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
)	O
;	O
if	O
(	O
left_parent	pointer
==	O
left_child	pointer
)	O
return	O
LESSTHAN	O
;	O
if	O
(	O
right_parent	pointer
==	O
right_child	pointer
)	O
return	O
GREATERTHAN	int
;	O
if	O
(	O
left_parent	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
!=	O
0	int
&&	O
left_child	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
!=	O
0	int
&&	O
left_parent	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
==	O
left_child	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
)	O
{	O
if	O
(	O
right_parent	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
!=	O
0	int
&&	O
right_child	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
!=	O
0	int
&&	O
right_parent	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
==	O
right_child	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
)	O
{	O
if	O
(	O
left	pointer
->	O
count	int
<	O
right	pointer
->	O
count	int
)	O
return	O
LESSTHAN	O
;	O
if	O
(	O
left	pointer
->	O
count	int
>	O
right	pointer
->	O
count	int
)	O
return	O
GREATERTHAN	int
;	O
return	O
EQUALTO	int
;	O
}	O
else	O
{	O
return	O
LESSTHAN	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
right_parent	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
!=	O
0	int
&&	O
right_child	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
!=	O
0	int
&&	O
right_parent	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
==	O
right_child	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
)	O
{	O
return	O
GREATERTHAN	int
;	O
}	O
else	O
{	O
left_time	double
=	O
left	pointer
->	O
time	struct
+	O
left	pointer
->	O
child_time	double
;	O
right_time	double
=	O
right	pointer
->	O
time	struct
+	O
right	pointer
->	O
child_time	double
;	O
if	O
(	O
left_time	double
<	O
right_time	double
)	O
return	O
LESSTHAN	O
;	O
if	O
(	O
left_time	double
>	O
right_time	double
)	O
return	O
GREATERTHAN	int
;	O
if	O
(	O
left	pointer
->	O
count	int
<	O
right	pointer
->	O
count	int
)	O
return	O
LESSTHAN	O
;	O
if	O
(	O
left	pointer
->	O
count	int
>	O
right	pointer
->	O
count	int
)	O
return	O
GREATERTHAN	int
;	O
return	O
EQUALTO	int
;	O
}	O
}	O
}	O
static	O
void	O
sort_parents	function
(	O
Sym	struct
*	O
child	double
)	O
{	O
Arc	struct
*	O
arc	struct
,	O
*	O
detached	pointer
,	O
sorted	struct
,	O
*	O
prev	pointer
;	O
sorted	struct
.	O
next_parent	pointer
=	O
0	int
;	O
for	O
(	O
arc	struct
=	O
child	double
->	O
cg	struct
.	O
parents	pointer
;	O
arc	struct
;	O
arc	struct
=	O
detached	pointer
)	O
{	O
detached	pointer
=	O
arc	struct
->	O
next_parent	pointer
;	O
for	O
(	O
prev	pointer
=	O
&	O
sorted	struct
;	O
prev	pointer
->	O
next_parent	pointer
;	O
prev	pointer
=	O
prev	pointer
->	O
next_parent	pointer
)	O
{	O
if	O
(	O
cmp_arc	function
(	O
arc	struct
,	O
prev	pointer
->	O
next_parent	pointer
)	O
!=	O
GREATERTHAN	int
)	O
break	O
;	O
}	O
arc	struct
->	O
next_parent	pointer
=	O
prev	pointer
->	O
next_parent	pointer
;	O
prev	pointer
->	O
next_parent	pointer
=	O
arc	struct
;	O
}	O
child	double
->	O
cg	struct
.	O
parents	pointer
=	O
sorted	struct
.	O
next_parent	pointer
;	O
}	O
static	O
void	O
print_parents	function
(	O
Sym	struct
*	O
child	double
)	O
{	O
Sym	struct
*	O
parent	pointer
;	O
Arc	struct
*	O
arc	struct
;	O
Sym	struct
*	O
cycle_head	pointer
;	O
if	O
(	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
!=	O
0	int
)	O
cycle_head	pointer
=	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
;	O
else	O
cycle_head	pointer
=	O
child	double
;	O
if	O
(	O
!	O
child	double
->	O
cg	struct
.	O
parents	pointer
)	O
{	O
printf	function
(	O
bsd_style_output	int
?	O
_	O
(	O
"%6.6s %5.5s %7.7s %11.11s %7.7s %7.7s     <spontaneous>\n"	pointer
)	O
:	O
_	O
(	O
"%6.6s %5.5s %7.7s %7.7s %7.7s %7.7s     <spontaneous>\n"	pointer
)	O
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
)	O
;	O
return	O
;	O
}	O
sort_parents	function
(	O
child	double
)	O
;	O
for	O
(	O
arc	struct
=	O
child	double
->	O
cg	struct
.	O
parents	pointer
;	O
arc	struct
;	O
arc	struct
=	O
arc	struct
->	O
next_parent	pointer
)	O
{	O
parent	pointer
=	O
arc	struct
->	O
parent	pointer
;	O
if	O
(	O
child	double
==	O
parent	pointer
||	O
(	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
!=	O
0	int
&&	O
parent	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
==	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
)	O
)	O
{	O
printf	function
(	O
bsd_style_output	int
?	O
"%6.6s %5.5s %7.7s %11.11s %7lu %7.7s     "	pointer
:	O
"%6.6s %5.5s %7.7s %7.7s %7lu %7.7s     "	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
,	O
arc	struct
->	O
count	int
,	O
""	pointer
)	O
;	O
print_name	function
(	O
parent	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
bsd_style_output	int
?	O
"%6.6s %5.5s %7.2f %11.2f %7lu/%-7lu     "	pointer
:	O
"%6.6s %5.5s %7.2f %7.2f %7lu/%-7lu     "	pointer
,	O
""	pointer
,	O
""	pointer
,	O
arc	struct
->	O
time	struct
/	O
hz	long
,	O
arc	struct
->	O
child_time	double
/	O
hz	long
,	O
arc	struct
->	O
count	int
,	O
cycle_head	pointer
->	O
ncalls	long
)	O
;	O
print_name	function
(	O
parent	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
}	O
}	O
static	O
void	O
sort_children	function
(	O
Sym	struct
*	O
parent	pointer
)	O
{	O
Arc	struct
*	O
arc	struct
,	O
*	O
detached	pointer
,	O
sorted	struct
,	O
*	O
prev	pointer
;	O
sorted	struct
.	O
next_child	pointer
=	O
0	int
;	O
for	O
(	O
arc	struct
=	O
parent	pointer
->	O
cg	struct
.	O
children	pointer
;	O
arc	struct
;	O
arc	struct
=	O
detached	pointer
)	O
{	O
detached	pointer
=	O
arc	struct
->	O
next_child	pointer
;	O
for	O
(	O
prev	pointer
=	O
&	O
sorted	struct
;	O
prev	pointer
->	O
next_child	pointer
;	O
prev	pointer
=	O
prev	pointer
->	O
next_child	pointer
)	O
{	O
if	O
(	O
cmp_arc	function
(	O
arc	struct
,	O
prev	pointer
->	O
next_child	pointer
)	O
!=	O
LESSTHAN	O
)	O
break	O
;	O
}	O
arc	struct
->	O
next_child	pointer
=	O
prev	pointer
->	O
next_child	pointer
;	O
prev	pointer
->	O
next_child	pointer
=	O
arc	struct
;	O
}	O
parent	pointer
->	O
cg	struct
.	O
children	pointer
=	O
sorted	struct
.	O
next_child	pointer
;	O
}	O
static	O
void	O
print_children	function
(	O
Sym	struct
*	O
parent	pointer
)	O
{	O
Sym	struct
*	O
child	double
;	O
Arc	struct
*	O
arc	struct
;	O
sort_children	function
(	O
parent	pointer
)	O
;	O
arc	struct
=	O
parent	pointer
->	O
cg	struct
.	O
children	pointer
;	O
for	O
(	O
arc	struct
=	O
parent	pointer
->	O
cg	struct
.	O
children	pointer
;	O
arc	struct
;	O
arc	struct
=	O
arc	struct
->	O
next_child	pointer
)	O
{	O
child	double
=	O
arc	struct
->	O
child	double
;	O
if	O
(	O
child	double
==	O
parent	pointer
||	O
(	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
!=	O
0	int
&&	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
==	O
parent	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
)	O
)	O
{	O
printf	function
(	O
bsd_style_output	int
?	O
"%6.6s %5.5s %7.7s %11.11s %7lu %7.7s     "	pointer
:	O
"%6.6s %5.5s %7.7s %7.7s %7lu %7.7s     "	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
,	O
""	pointer
,	O
arc	struct
->	O
count	int
,	O
""	pointer
)	O
;	O
print_name	function
(	O
child	double
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
bsd_style_output	int
?	O
"%6.6s %5.5s %7.2f %11.2f %7lu/%-7lu     "	pointer
:	O
"%6.6s %5.5s %7.2f %7.2f %7lu/%-7lu     "	pointer
,	O
""	pointer
,	O
""	pointer
,	O
arc	struct
->	O
time	struct
/	O
hz	long
,	O
arc	struct
->	O
child_time	double
/	O
hz	long
,	O
arc	struct
->	O
count	int
,	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
->	O
ncalls	long
)	O
;	O
print_name	function
(	O
child	double
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
}	O
}	O
static	O
void	O
print_line	function
(	O
Sym	struct
*	O
np	pointer
)	O
{	O
char	O
buf	pointer
[	O
BUFSIZ	int
]	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"[%d]"	pointer
,	O
np	pointer
->	O
cg	struct
.	O
index	function
)	O
;	O
printf	function
(	O
bsd_style_output	int
?	O
"%-6.6s %5.1f %7.2f %11.2f"	pointer
:	O
"%-6.6s %5.1f %7.2f %7.2f"	pointer
,	O
buf	pointer
,	O
100	int
*	O
(	O
np	pointer
->	O
cg	struct
.	O
prop	struct
.	O
self	double
+	O
np	pointer
->	O
cg	struct
.	O
prop	struct
.	O
child	double
)	O
/	O
print_time	double
,	O
np	pointer
->	O
cg	struct
.	O
prop	struct
.	O
self	double
/	O
hz	long
,	O
np	pointer
->	O
cg	struct
.	O
prop	struct
.	O
child	double
/	O
hz	long
)	O
;	O
if	O
(	O
(	O
np	pointer
->	O
ncalls	long
+	O
np	pointer
->	O
cg	struct
.	O
self_calls	long
)	O
!=	O
0	int
)	O
{	O
printf	function
(	O
" %7lu"	pointer
,	O
np	pointer
->	O
ncalls	long
)	O
;	O
if	O
(	O
np	pointer
->	O
cg	struct
.	O
self_calls	long
!=	O
0	int
)	O
printf	function
(	O
"+%-7lu "	pointer
,	O
np	pointer
->	O
cg	struct
.	O
self_calls	long
)	O
;	O
else	O
printf	function
(	O
" %7.7s "	pointer
,	O
""	pointer
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
" %7.7s %7.7s "	pointer
,	O
""	pointer
,	O
""	pointer
)	O
;	O
}	O
print_name	function
(	O
np	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
void	O
cg_print	function
(	O
Sym	struct
*	O
*	O
timesortsym	pointer
)	O
{	O
unsigned	O
int	O
sym_index	int
;	O
Sym	struct
*	O
parent	pointer
;	O
if	O
(	O
print_descriptions	int
&&	O
bsd_style_output	int
)	O
bsd_callg_blurb	function
(	O
stdout	pointer
)	O
;	O
print_header	function
(	O
)	O
;	O
for	O
(	O
sym_index	int
=	O
0	int
;	O
sym_index	int
<	O
symtab	struct
.	O
len	long
+	O
num_cycles	int
;	O
++	O
sym_index	int
)	O
{	O
parent	pointer
=	O
timesortsym	pointer
[	O
sym_index	int
]	O
;	O
if	O
(	O
(	O
ignore_zeros	int
&&	O
parent	pointer
->	O
ncalls	long
==	O
0	int
&&	O
parent	pointer
->	O
cg	struct
.	O
self_calls	long
==	O
0	int
&&	O
parent	pointer
->	O
cg	struct
.	O
prop	struct
.	O
self	double
==	O
0	int
&&	O
parent	pointer
->	O
cg	struct
.	O
prop	struct
.	O
child	double
==	O
0	int
)	O
||	O
!	O
parent	pointer
->	O
cg	struct
.	O
print_flag	int
||	O
(	O
line_granularity	int
&&	O
!	O
parent	pointer
->	O
is_func	int
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
parent	pointer
->	O
name	pointer
&&	O
parent	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
!=	O
0	int
)	O
{	O
print_cycle	function
(	O
parent	pointer
)	O
;	O
print_members	function
(	O
parent	pointer
)	O
;	O
}	O
else	O
{	O
print_parents	function
(	O
parent	pointer
)	O
;	O
print_line	function
(	O
parent	pointer
)	O
;	O
print_children	function
(	O
parent	pointer
)	O
;	O
}	O
if	O
(	O
bsd_style_output	int
)	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"-----------------------------------------------\n"	pointer
)	O
;	O
if	O
(	O
bsd_style_output	int
)	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
free	function
(	O
timesortsym	pointer
)	O
;	O
if	O
(	O
print_descriptions	int
&&	O
!	O
bsd_style_output	int
)	O
fsf_callg_blurb	function
(	O
stdout	pointer
)	O
;	O
}	O
static	O
int	O
cmp_name	function
(	O
const	O
PTR	O
left	pointer
,	O
const	O
PTR	O
right	pointer
)	O
{	O
const	O
Sym	struct
*	O
*	O
npp1	pointer
=	O
(	O
const	O
Sym	struct
*	O
*	O
)	O
left	pointer
;	O
const	O
Sym	struct
*	O
*	O
npp2	pointer
=	O
(	O
const	O
Sym	struct
*	O
*	O
)	O
right	pointer
;	O
return	O
strcmp	function
(	O
(	O
*	O
npp1	pointer
)	O
->	O
name	pointer
,	O
(	O
*	O
npp2	pointer
)	O
->	O
name	pointer
)	O
;	O
}	O
void	O
cg_print_index	function
(	O
void	O
)	O
{	O
unsigned	O
int	O
sym_index	int
;	O
unsigned	O
int	O
nnames	int
,	O
todo	pointer
,	O
i	pointer
,	O
j	int
;	O
int	O
col	int
,	O
starting_col	int
;	O
Sym	struct
*	O
*	O
name_sorted_syms	pointer
,	O
*	O
sym	pointer
;	O
const	O
char	O
*	O
filename	pointer
;	O
char	O
buf	pointer
[	O
20	int
]	O
;	O
int	O
column_width	int
=	O
(	O
output_width	int
-	O
1	int
)	O
/	O
3	int
;	O
name_sorted_syms	pointer
=	O
(	O
Sym	struct
*	O
*	O
)	O
xmalloc	function
(	O
(	O
symtab	struct
.	O
len	long
+	O
num_cycles	int
)	O
*	O
sizeof	O
(	O
Sym	struct
*	O
)	O
)	O
;	O
for	O
(	O
sym_index	int
=	O
0	int
,	O
nnames	int
=	O
0	int
;	O
sym_index	int
<	O
symtab	struct
.	O
len	long
;	O
sym_index	int
++	O
)	O
{	O
if	O
(	O
ignore_zeros	int
&&	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
.	O
ncalls	long
==	O
0	int
&&	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
.	O
hist	struct
.	O
time	struct
==	O
0	int
)	O
continue	O
;	O
name_sorted_syms	pointer
[	O
nnames	int
++	O
]	O
=	O
&	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
;	O
}	O
qsort	function
(	O
name_sorted_syms	pointer
,	O
nnames	int
,	O
sizeof	O
(	O
Sym	struct
*	O
)	O
,	O
cmp_name	function
)	O
;	O
for	O
(	O
sym_index	int
=	O
1	int
,	O
todo	pointer
=	O
nnames	int
;	O
sym_index	int
<=	O
num_cycles	int
;	O
sym_index	int
++	O
)	O
name_sorted_syms	pointer
[	O
todo	pointer
++	O
]	O
=	O
&	O
cycle_header	pointer
[	O
sym_index	int
]	O
;	O
printf	function
(	O
"\f\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Index by function name\n\n"	pointer
)	O
)	O
;	O
sym_index	int
=	O
(	O
todo	pointer
+	O
2	int
)	O
/	O
3	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
sym_index	int
;	O
i	pointer
++	O
)	O
{	O
col	int
=	O
0	int
;	O
starting_col	int
=	O
0	int
;	O
for	O
(	O
j	int
=	O
i	pointer
;	O
j	int
<	O
todo	pointer
;	O
j	int
+=	O
sym_index	int
)	O
{	O
sym	pointer
=	O
name_sorted_syms	pointer
[	O
j	int
]	O
;	O
if	O
(	O
sym	pointer
->	O
cg	struct
.	O
print_flag	int
)	O
sprintf	function
(	O
buf	pointer
,	O
"[%d]"	pointer
,	O
sym	pointer
->	O
cg	struct
.	O
index	function
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
,	O
"(%d)"	pointer
,	O
sym	pointer
->	O
cg	struct
.	O
index	function
)	O
;	O
if	O
(	O
j	int
<	O
nnames	int
)	O
{	O
if	O
(	O
bsd_style_output	int
)	O
{	O
printf	function
(	O
"%6.6s %-19.19s"	pointer
,	O
buf	pointer
,	O
sym	pointer
->	O
name	pointer
)	O
;	O
}	O
else	O
{	O
col	int
+=	O
strlen	function
(	O
buf	pointer
)	O
;	O
for	O
(	O
;	O
col	int
<	O
starting_col	int
+	O
5	int
;	O
++	O
col	int
)	O
putchar	function
(	O
' '	O
)	O
;	O
printf	function
(	O
" %s "	pointer
,	O
buf	pointer
)	O
;	O
col	int
+=	O
print_name_only	function
(	O
sym	pointer
)	O
;	O
if	O
(	O
!	O
line_granularity	int
&&	O
sym	pointer
->	O
is_static	int
&&	O
sym	pointer
->	O
file	pointer
)	O
{	O
filename	pointer
=	O
sym	pointer
->	O
file	pointer
->	O
name	pointer
;	O
if	O
(	O
!	O
print_path	int
)	O
{	O
filename	pointer
=	O
strrchr	function
(	O
filename	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
filename	pointer
)	O
++	O
filename	pointer
;	O
else	O
filename	pointer
=	O
sym	pointer
->	O
file	pointer
->	O
name	pointer
;	O
}	O
printf	function
(	O
" (%s)"	pointer
,	O
filename	pointer
)	O
;	O
col	int
+=	O
strlen	function
(	O
filename	pointer
)	O
+	O
3	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
bsd_style_output	int
)	O
{	O
printf	function
(	O
"%6.6s "	pointer
,	O
buf	pointer
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
_	O
(	O
"<cycle %d>"	pointer
)	O
,	O
sym	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
)	O
;	O
printf	function
(	O
"%-19.19s"	pointer
,	O
buf	pointer
)	O
;	O
}	O
else	O
{	O
col	int
+=	O
strlen	function
(	O
buf	pointer
)	O
;	O
for	O
(	O
;	O
col	int
<	O
starting_col	int
+	O
5	int
;	O
++	O
col	int
)	O
putchar	function
(	O
' '	O
)	O
;	O
printf	function
(	O
" %s "	pointer
,	O
buf	pointer
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
_	O
(	O
"<cycle %d>"	pointer
)	O
,	O
sym	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
num	int
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
buf	pointer
)	O
;	O
col	int
+=	O
strlen	function
(	O
buf	pointer
)	O
;	O
}	O
}	O
starting_col	int
+=	O
column_width	int
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
free	function
(	O
name_sorted_syms	pointer
)	O
;	O
}	O
static	O
int	O
cmp_arc_count	function
(	O
const	O
PTR	O
left	pointer
,	O
const	O
PTR	O
right	pointer
)	O
{	O
const	O
Arc	struct
*	O
*	O
npp1	pointer
=	O
(	O
const	O
Arc	struct
*	O
*	O
)	O
left	pointer
;	O
const	O
Arc	struct
*	O
*	O
npp2	pointer
=	O
(	O
const	O
Arc	struct
*	O
*	O
)	O
right	pointer
;	O
if	O
(	O
(	O
*	O
npp1	pointer
)	O
->	O
count	int
>	O
(	O
*	O
npp2	pointer
)	O
->	O
count	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
(	O
*	O
npp1	pointer
)	O
->	O
count	int
<	O
(	O
*	O
npp2	pointer
)	O
->	O
count	int
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
static	O
int	O
cmp_fun_nuses	function
(	O
const	O
PTR	O
left	pointer
,	O
const	O
PTR	O
right	pointer
)	O
{	O
const	O
Sym	struct
*	O
*	O
npp1	pointer
=	O
(	O
const	O
Sym	struct
*	O
*	O
)	O
left	pointer
;	O
const	O
Sym	struct
*	O
*	O
npp2	pointer
=	O
(	O
const	O
Sym	struct
*	O
*	O
)	O
right	pointer
;	O
if	O
(	O
(	O
*	O
npp1	pointer
)	O
->	O
nuses	int
>	O
(	O
*	O
npp2	pointer
)	O
->	O
nuses	int
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
(	O
*	O
npp1	pointer
)	O
->	O
nuses	int
<	O
(	O
*	O
npp2	pointer
)	O
->	O
nuses	int
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
void	O
cg_print_function_ordering	function
(	O
void	O
)	O
{	O
unsigned	O
long	O
sym_index	int
;	O
unsigned	O
long	O
arc_index	long
;	O
unsigned	O
long	O
used	long
,	O
unused	long
,	O
scratch_index	long
;	O
unsigned	O
long	O
unplaced_arc_count	long
,	O
high_arc_count	long
,	O
scratch_arc_count	long
;	O
unsigned	O
long	O
long	O
total_arcs	long long
,	O
tmp_arcs_count	long long
;	O
Sym	struct
*	O
*	O
unused_syms	pointer
,	O
*	O
*	O
used_syms	pointer
,	O
*	O
*	O
scratch_syms	pointer
;	O
Arc	struct
*	O
*	O
unplaced_arcs	pointer
,	O
*	O
*	O
high_arcs	pointer
,	O
*	O
*	O
scratch_arcs	pointer
;	O
sym_index	int
=	O
0	int
;	O
used	long
=	O
0	int
;	O
unused	long
=	O
0	int
;	O
scratch_index	long
=	O
0	int
;	O
unplaced_arc_count	long
=	O
0	int
;	O
high_arc_count	long
=	O
0	int
;	O
scratch_arc_count	long
=	O
0	int
;	O
unused_syms	pointer
=	O
(	O
Sym	struct
*	O
*	O
)	O
xmalloc	function
(	O
symtab	struct
.	O
len	long
*	O
sizeof	O
(	O
Sym	struct
*	O
)	O
)	O
;	O
used_syms	pointer
=	O
(	O
Sym	struct
*	O
*	O
)	O
xmalloc	function
(	O
symtab	struct
.	O
len	long
*	O
sizeof	O
(	O
Sym	struct
*	O
)	O
)	O
;	O
scratch_syms	pointer
=	O
(	O
Sym	struct
*	O
*	O
)	O
xmalloc	function
(	O
symtab	struct
.	O
len	long
*	O
sizeof	O
(	O
Sym	struct
*	O
)	O
)	O
;	O
high_arcs	pointer
=	O
(	O
Arc	struct
*	O
*	O
)	O
xmalloc	function
(	O
numarcs	int
*	O
sizeof	O
(	O
Arc	struct
*	O
)	O
)	O
;	O
scratch_arcs	pointer
=	O
(	O
Arc	struct
*	O
*	O
)	O
xmalloc	function
(	O
numarcs	int
*	O
sizeof	O
(	O
Arc	struct
*	O
)	O
)	O
;	O
unplaced_arcs	pointer
=	O
(	O
Arc	struct
*	O
*	O
)	O
xmalloc	function
(	O
numarcs	int
*	O
sizeof	O
(	O
Arc	struct
*	O
)	O
)	O
;	O
for	O
(	O
sym_index	int
=	O
0	int
,	O
used	long
=	O
0	int
,	O
unused	long
=	O
0	int
;	O
sym_index	int
<	O
symtab	struct
.	O
len	long
;	O
sym_index	int
++	O
)	O
{	O
if	O
(	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
.	O
ncalls	long
==	O
0	int
)	O
{	O
unused_syms	pointer
[	O
unused	long
++	O
]	O
=	O
&	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
;	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
.	O
has_been_placed	int
=	O
1	int
;	O
}	O
else	O
{	O
used_syms	pointer
[	O
used	long
++	O
]	O
=	O
&	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
;	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
.	O
has_been_placed	int
=	O
0	int
;	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
.	O
next	pointer
=	O
0	int
;	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
.	O
prev	pointer
=	O
0	int
;	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
.	O
nuses	int
=	O
0	int
;	O
}	O
}	O
qsort	function
(	O
arcs	pointer
,	O
numarcs	int
,	O
sizeof	O
(	O
Arc	struct
*	O
)	O
,	O
cmp_arc_count	function
)	O
;	O
total_arcs	long long
=	O
0	int
;	O
for	O
(	O
arc_index	long
=	O
0	int
;	O
arc_index	long
<	O
numarcs	int
;	O
arc_index	long
++	O
)	O
{	O
total_arcs	long long
+=	O
arcs	pointer
[	O
arc_index	long
]	O
->	O
count	int
;	O
arcs	pointer
[	O
arc_index	long
]	O
->	O
has_been_placed	int
=	O
0	int
;	O
}	O
tmp_arcs_count	long long
=	O
0	int
;	O
for	O
(	O
arc_index	long
=	O
0	int
;	O
arc_index	long
<	O
numarcs	int
;	O
arc_index	long
++	O
)	O
{	O
tmp_arcs_count	long long
+=	O
arcs	pointer
[	O
arc_index	long
]	O
->	O
count	int
;	O
if	O
(	O
(	O
double	O
)	O
tmp_arcs_count	long long
/	O
(	O
double	O
)	O
total_arcs	long long
>	O
0.90	int
)	O
break	O
;	O
arcs	pointer
[	O
arc_index	long
]	O
->	O
child	double
->	O
nuses	int
++	O
;	O
}	O
memcpy	function
(	O
scratch_syms	pointer
,	O
used_syms	pointer
,	O
used	long
*	O
sizeof	O
(	O
Sym	struct
*	O
)	O
)	O
;	O
qsort	function
(	O
scratch_syms	pointer
,	O
used	long
,	O
sizeof	O
(	O
Sym	struct
*	O
)	O
,	O
cmp_fun_nuses	function
)	O
;	O
for	O
(	O
sym_index	int
=	O
0	int
;	O
sym_index	int
<	O
used	long
/	O
80	int
;	O
sym_index	int
++	O
)	O
{	O
Sym	struct
*	O
sym	pointer
=	O
scratch_syms	pointer
[	O
sym_index	int
]	O
;	O
Arc	struct
*	O
arc	struct
;	O
if	O
(	O
sym	pointer
->	O
nuses	int
==	O
5	int
)	O
break	O
;	O
arc	struct
=	O
sym	pointer
->	O
cg	struct
.	O
children	pointer
;	O
while	O
(	O
arc	struct
)	O
{	O
if	O
(	O
arc	struct
->	O
parent	pointer
!=	O
arc	struct
->	O
child	double
)	O
scratch_arcs	pointer
[	O
scratch_arc_count	long
++	O
]	O
=	O
arc	struct
;	O
arc	struct
->	O
has_been_placed	int
=	O
1	int
;	O
arc	struct
=	O
arc	struct
->	O
next_child	pointer
;	O
}	O
arc	struct
=	O
sym	pointer
->	O
cg	struct
.	O
parents	pointer
;	O
while	O
(	O
arc	struct
)	O
{	O
if	O
(	O
arc	struct
->	O
parent	pointer
!=	O
arc	struct
->	O
child	double
)	O
scratch_arcs	pointer
[	O
scratch_arc_count	long
++	O
]	O
=	O
arc	struct
;	O
arc	struct
->	O
has_been_placed	int
=	O
1	int
;	O
arc	struct
=	O
arc	struct
->	O
next_parent	pointer
;	O
}	O
scratch_index	long
=	O
sym_index	int
;	O
sym	pointer
->	O
has_been_placed	int
=	O
1	int
;	O
}	O
for	O
(	O
arc_index	long
=	O
0	int
;	O
arc_index	long
<	O
scratch_arc_count	long
;	O
arc_index	long
++	O
)	O
{	O
Arc	struct
*	O
arc	struct
=	O
scratch_arcs	pointer
[	O
arc_index	long
]	O
;	O
if	O
(	O
arc	struct
->	O
child	double
->	O
has_been_placed	int
&&	O
arc	struct
->	O
parent	pointer
->	O
has_been_placed	int
)	O
{	O
high_arcs	pointer
[	O
high_arc_count	long
++	O
]	O
=	O
scratch_arcs	pointer
[	O
arc_index	long
]	O
;	O
arc	struct
->	O
child	double
->	O
has_been_placed	int
=	O
0	int
;	O
arc	struct
->	O
parent	pointer
->	O
has_been_placed	int
=	O
0	int
;	O
}	O
}	O
for	O
(	O
sym_index	int
=	O
0	int
;	O
sym_index	int
<	O
scratch_index	long
;	O
sym_index	int
++	O
)	O
{	O
if	O
(	O
scratch_syms	pointer
[	O
sym_index	int
]	O
->	O
has_been_placed	int
)	O
printf	function
(	O
"%s\n"	pointer
,	O
scratch_syms	pointer
[	O
sym_index	int
]	O
->	O
name	pointer
)	O
;	O
}	O
qsort	function
(	O
high_arcs	pointer
,	O
high_arc_count	long
,	O
sizeof	O
(	O
Arc	struct
*	O
)	O
,	O
cmp_arc_count	function
)	O
;	O
order_and_dump_functions_by_arcs	function
(	O
high_arcs	pointer
,	O
high_arc_count	long
,	O
1	int
,	O
unplaced_arcs	pointer
,	O
&	O
unplaced_arc_count	long
)	O
;	O
order_and_dump_functions_by_arcs	function
(	O
arcs	pointer
,	O
numarcs	int
,	O
0	int
,	O
unplaced_arcs	pointer
,	O
&	O
unplaced_arc_count	long
)	O
;	O
order_and_dump_functions_by_arcs	function
(	O
unplaced_arcs	pointer
,	O
unplaced_arc_count	long
,	O
1	int
,	O
scratch_arcs	pointer
,	O
&	O
scratch_arc_count	long
)	O
;	O
for	O
(	O
sym_index	int
=	O
0	int
;	O
sym_index	int
<	O
used	long
;	O
sym_index	int
++	O
)	O
if	O
(	O
used_syms	pointer
[	O
sym_index	int
]	O
->	O
has_been_placed	int
==	O
0	int
)	O
printf	function
(	O
"%s\n"	pointer
,	O
used_syms	pointer
[	O
sym_index	int
]	O
->	O
name	pointer
)	O
;	O
for	O
(	O
sym_index	int
=	O
0	int
;	O
sym_index	int
<	O
unused	long
;	O
sym_index	int
++	O
)	O
printf	function
(	O
"%s\n"	pointer
,	O
unused_syms	pointer
[	O
sym_index	int
]	O
->	O
name	pointer
)	O
;	O
unused_syms	pointer
=	O
(	O
Sym	struct
*	O
*	O
)	O
xmalloc	function
(	O
symtab	struct
.	O
len	long
*	O
sizeof	O
(	O
Sym	struct
*	O
)	O
)	O
;	O
used_syms	pointer
=	O
(	O
Sym	struct
*	O
*	O
)	O
xmalloc	function
(	O
symtab	struct
.	O
len	long
*	O
sizeof	O
(	O
Sym	struct
*	O
)	O
)	O
;	O
scratch_syms	pointer
=	O
(	O
Sym	struct
*	O
*	O
)	O
xmalloc	function
(	O
symtab	struct
.	O
len	long
*	O
sizeof	O
(	O
Sym	struct
*	O
)	O
)	O
;	O
high_arcs	pointer
=	O
(	O
Arc	struct
*	O
*	O
)	O
xmalloc	function
(	O
numarcs	int
*	O
sizeof	O
(	O
Arc	struct
*	O
)	O
)	O
;	O
scratch_arcs	pointer
=	O
(	O
Arc	struct
*	O
*	O
)	O
xmalloc	function
(	O
numarcs	int
*	O
sizeof	O
(	O
Arc	struct
*	O
)	O
)	O
;	O
unplaced_arcs	pointer
=	O
(	O
Arc	struct
*	O
*	O
)	O
xmalloc	function
(	O
numarcs	int
*	O
sizeof	O
(	O
Arc	struct
*	O
)	O
)	O
;	O
free	function
(	O
unused_syms	pointer
)	O
;	O
free	function
(	O
used_syms	pointer
)	O
;	O
free	function
(	O
scratch_syms	pointer
)	O
;	O
free	function
(	O
high_arcs	pointer
)	O
;	O
free	function
(	O
scratch_arcs	pointer
)	O
;	O
free	function
(	O
unplaced_arcs	pointer
)	O
;	O
}	O
static	O
void	O
order_and_dump_functions_by_arcs	function
(	O
Arc	struct
*	O
*	O
the_arcs	pointer
,	O
unsigned	O
long	O
arc_count	long
,	O
int	O
all	int
,	O
Arc	struct
*	O
*	O
unplaced_arcs	pointer
,	O
unsigned	O
long	O
*	O
unplaced_arc_count	long
)	O
{	O
unsigned	O
long	O
long	O
tmp_arcs	long long
,	O
total_arcs	long long
;	O
unsigned	O
int	O
arc_index	long
;	O
if	O
(	O
!	O
all	int
)	O
{	O
total_arcs	long long
=	O
0	int
;	O
for	O
(	O
arc_index	long
=	O
0	int
;	O
arc_index	long
<	O
arc_count	long
;	O
arc_index	long
++	O
)	O
total_arcs	long long
+=	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
count	int
;	O
}	O
else	O
total_arcs	long long
=	O
0	int
;	O
tmp_arcs	long long
=	O
0	int
;	O
for	O
(	O
arc_index	long
=	O
0	int
;	O
arc_index	long
<	O
arc_count	long
;	O
arc_index	long
++	O
)	O
{	O
Sym	struct
*	O
sym1	pointer
,	O
*	O
sym2	pointer
;	O
Sym	struct
*	O
child	double
,	O
*	O
parent	pointer
;	O
tmp_arcs	long long
+=	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
count	int
;	O
if	O
(	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
has_been_placed	int
)	O
continue	O
;	O
child	double
=	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
child	double
;	O
parent	pointer
=	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
parent	pointer
;	O
if	O
(	O
(	O
!	O
all	int
&&	O
(	O
double	O
)	O
tmp_arcs	long long
/	O
(	O
double	O
)	O
total_arcs	long long
>	O
MOST	int
)	O
||	O
child	double
->	O
has_been_placed	int
||	O
parent	pointer
->	O
has_been_placed	int
)	O
{	O
unplaced_arcs	pointer
[	O
(	O
*	O
unplaced_arc_count	long
)	O
++	O
]	O
=	O
the_arcs	pointer
[	O
arc_index	long
]	O
;	O
continue	O
;	O
}	O
if	O
(	O
parent	pointer
->	O
next	pointer
&&	O
parent	pointer
->	O
prev	pointer
&&	O
child	double
->	O
next	pointer
&&	O
child	double
->	O
prev	pointer
)	O
{	O
unplaced_arcs	pointer
[	O
(	O
*	O
unplaced_arc_count	long
)	O
++	O
]	O
=	O
the_arcs	pointer
[	O
arc_index	long
]	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
parent	pointer
->	O
next	pointer
&&	O
!	O
parent	pointer
->	O
prev	pointer
)	O
{	O
int	O
next_count	int
=	O
0	int
;	O
int	O
prev_count	int
=	O
0	int
;	O
Sym	struct
*	O
prev	pointer
=	O
child	double
;	O
Sym	struct
*	O
next	pointer
=	O
child	double
;	O
while	O
(	O
next	pointer
->	O
next	pointer
)	O
{	O
next	pointer
=	O
next	pointer
->	O
next	pointer
;	O
next_count	int
++	O
;	O
}	O
while	O
(	O
prev	pointer
->	O
prev	pointer
)	O
{	O
prev	pointer
=	O
prev	pointer
->	O
prev	pointer
;	O
prev_count	int
++	O
;	O
}	O
child	double
=	O
next_count	int
<	O
prev_count	int
?	O
next	pointer
:	O
prev	pointer
;	O
}	O
else	O
if	O
(	O
!	O
child	double
->	O
next	pointer
&&	O
!	O
child	double
->	O
prev	pointer
)	O
{	O
int	O
next_count	int
=	O
0	int
;	O
int	O
prev_count	int
=	O
0	int
;	O
Sym	struct
*	O
prev	pointer
=	O
parent	pointer
;	O
Sym	struct
*	O
next	pointer
=	O
parent	pointer
;	O
while	O
(	O
next	pointer
->	O
next	pointer
)	O
{	O
next	pointer
=	O
next	pointer
->	O
next	pointer
;	O
next_count	int
++	O
;	O
}	O
while	O
(	O
prev	pointer
->	O
prev	pointer
)	O
{	O
prev	pointer
=	O
prev	pointer
->	O
prev	pointer
;	O
prev_count	int
++	O
;	O
}	O
parent	pointer
=	O
prev_count	int
<	O
next_count	int
?	O
prev	pointer
:	O
next	pointer
;	O
}	O
else	O
{	O
unplaced_arcs	pointer
[	O
(	O
*	O
unplaced_arc_count	long
)	O
++	O
]	O
=	O
the_arcs	pointer
[	O
arc_index	long
]	O
;	O
continue	O
;	O
}	O
sym1	pointer
=	O
parent	pointer
;	O
if	O
(	O
sym1	pointer
->	O
next	pointer
)	O
while	O
(	O
sym1	pointer
->	O
next	pointer
)	O
sym1	pointer
=	O
sym1	pointer
->	O
next	pointer
;	O
else	O
while	O
(	O
sym1	pointer
->	O
prev	pointer
)	O
sym1	pointer
=	O
sym1	pointer
->	O
prev	pointer
;	O
sym2	pointer
=	O
child	double
;	O
if	O
(	O
sym2	pointer
->	O
next	pointer
)	O
while	O
(	O
sym2	pointer
->	O
next	pointer
)	O
sym2	pointer
=	O
sym2	pointer
->	O
next	pointer
;	O
else	O
while	O
(	O
sym2	pointer
->	O
prev	pointer
)	O
sym2	pointer
=	O
sym2	pointer
->	O
prev	pointer
;	O
if	O
(	O
sym1	pointer
==	O
child	double
&&	O
sym2	pointer
==	O
parent	pointer
)	O
{	O
unplaced_arcs	pointer
[	O
(	O
*	O
unplaced_arc_count	long
)	O
++	O
]	O
=	O
the_arcs	pointer
[	O
arc_index	long
]	O
;	O
continue	O
;	O
}	O
if	O
(	O
parent	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
!	O
child	double
->	O
next	pointer
)	O
{	O
parent	pointer
->	O
prev	pointer
=	O
child	double
;	O
child	double
->	O
next	pointer
=	O
parent	pointer
;	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
has_been_placed	int
=	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
parent	pointer
->	O
prev	pointer
)	O
{	O
if	O
(	O
!	O
child	double
->	O
prev	pointer
)	O
{	O
parent	pointer
->	O
next	pointer
=	O
child	double
;	O
child	double
->	O
prev	pointer
=	O
parent	pointer
;	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
has_been_placed	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
child	double
->	O
prev	pointer
)	O
{	O
parent	pointer
->	O
prev	pointer
=	O
child	double
;	O
child	double
->	O
next	pointer
=	O
parent	pointer
;	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
has_been_placed	int
=	O
1	int
;	O
}	O
else	O
{	O
parent	pointer
->	O
next	pointer
=	O
child	double
;	O
child	double
->	O
prev	pointer
=	O
parent	pointer
;	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
has_been_placed	int
=	O
1	int
;	O
}	O
}	O
}	O
for	O
(	O
arc_index	long
=	O
0	int
;	O
arc_index	long
<	O
arc_count	long
;	O
arc_index	long
++	O
)	O
{	O
Sym	struct
*	O
sym	pointer
;	O
if	O
(	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
parent	pointer
->	O
has_been_placed	int
||	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
child	double
->	O
has_been_placed	int
)	O
continue	O
;	O
sym	pointer
=	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
parent	pointer
;	O
if	O
(	O
sym	pointer
->	O
next	pointer
==	O
NULL	O
&&	O
sym	pointer
->	O
prev	pointer
==	O
NULL	O
)	O
continue	O
;	O
while	O
(	O
sym	pointer
->	O
prev	pointer
)	O
sym	pointer
=	O
sym	pointer
->	O
prev	pointer
;	O
while	O
(	O
sym	pointer
)	O
{	O
sym	pointer
->	O
has_been_placed	int
=	O
1	int
;	O
printf	function
(	O
"%s\n"	pointer
,	O
sym	pointer
->	O
name	pointer
)	O
;	O
sym	pointer
=	O
sym	pointer
->	O
next	pointer
;	O
}	O
}	O
if	O
(	O
all	int
)	O
for	O
(	O
arc_index	long
=	O
0	int
;	O
arc_index	long
<	O
arc_count	long
;	O
arc_index	long
++	O
)	O
{	O
Sym	struct
*	O
sym	pointer
;	O
if	O
(	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
parent	pointer
->	O
has_been_placed	int
||	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
child	double
->	O
has_been_placed	int
)	O
continue	O
;	O
sym	pointer
=	O
the_arcs	pointer
[	O
arc_index	long
]	O
->	O
parent	pointer
;	O
sym	pointer
->	O
has_been_placed	int
=	O
1	int
;	O
printf	function
(	O
"%s\n"	pointer
,	O
sym	pointer
->	O
name	pointer
)	O
;	O
}	O
}	O
static	O
int	O
cmp_symbol_map	function
(	O
const	O
void	O
*	O
l	pointer
,	O
const	O
void	O
*	O
r	pointer
)	O
{	O
return	O
filename_cmp	function
(	O
(	O
(	O
struct	O
function_map	struct
*	O
)	O
l	pointer
)	O
->	O
file_name	pointer
,	O
(	O
(	O
struct	O
function_map	struct
*	O
)	O
r	pointer
)	O
->	O
file_name	pointer
)	O
;	O
}	O
void	O
cg_print_file_ordering	function
(	O
void	O
)	O
{	O
unsigned	O
long	O
scratch_arc_count	long
;	O
unsigned	O
long	O
arc_index	long
;	O
unsigned	O
long	O
sym_index	int
;	O
Arc	struct
*	O
*	O
scratch_arcs	pointer
;	O
char	O
*	O
last	pointer
;	O
scratch_arc_count	long
=	O
0	int
;	O
scratch_arcs	pointer
=	O
(	O
Arc	struct
*	O
*	O
)	O
xmalloc	function
(	O
numarcs	int
*	O
sizeof	O
(	O
Arc	struct
*	O
)	O
)	O
;	O
for	O
(	O
arc_index	long
=	O
0	int
;	O
arc_index	long
<	O
numarcs	int
;	O
arc_index	long
++	O
)	O
{	O
if	O
(	O
!	O
arcs	pointer
[	O
arc_index	long
]	O
->	O
parent	pointer
->	O
mapped	int
||	O
!	O
arcs	pointer
[	O
arc_index	long
]	O
->	O
child	double
->	O
mapped	int
)	O
arcs	pointer
[	O
arc_index	long
]	O
->	O
has_been_placed	int
=	O
1	int
;	O
}	O
order_and_dump_functions_by_arcs	function
(	O
arcs	pointer
,	O
numarcs	int
,	O
0	int
,	O
scratch_arcs	pointer
,	O
&	O
scratch_arc_count	long
)	O
;	O
for	O
(	O
sym_index	int
=	O
0	int
;	O
sym_index	int
<	O
symtab	struct
.	O
len	long
;	O
sym_index	int
++	O
)	O
{	O
if	O
(	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
.	O
mapped	int
&&	O
!	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
.	O
has_been_placed	int
)	O
printf	function
(	O
"%s\n"	pointer
,	O
symtab	struct
.	O
base	int
[	O
sym_index	int
]	O
.	O
name	pointer
)	O
;	O
}	O
qsort	function
(	O
symbol_map	pointer
,	O
symbol_map_count	int
,	O
sizeof	O
(	O
struct	O
function_map	struct
)	O
,	O
cmp_symbol_map	function
)	O
;	O
last	pointer
=	O
NULL	O
;	O
for	O
(	O
sym_index	int
=	O
0	int
;	O
sym_index	int
<	O
symbol_map_count	int
;	O
sym_index	int
++	O
)	O
{	O
unsigned	O
int	O
index2	int
;	O
if	O
(	O
last	pointer
&&	O
!	O
filename_cmp	function
(	O
last	pointer
,	O
symbol_map	pointer
[	O
sym_index	int
]	O
.	O
file_name	pointer
)	O
)	O
continue	O
;	O
for	O
(	O
index2	int
=	O
0	int
;	O
index2	int
<	O
symtab	struct
.	O
len	long
;	O
index2	int
++	O
)	O
{	O
if	O
(	O
!	O
symtab	struct
.	O
base	int
[	O
index2	int
]	O
.	O
mapped	int
)	O
continue	O
;	O
if	O
(	O
!	O
filename_cmp	function
(	O
symtab	struct
.	O
base	int
[	O
index2	int
]	O
.	O
name	pointer
,	O
symbol_map	pointer
[	O
sym_index	int
]	O
.	O
file_name	pointer
)	O
)	O
break	O
;	O
}	O
if	O
(	O
index2	int
==	O
symtab	struct
.	O
len	long
)	O
printf	function
(	O
"%s\n"	pointer
,	O
symbol_map	pointer
[	O
sym_index	int
]	O
.	O
file_name	pointer
)	O
;	O
last	pointer
=	O
symbol_map	pointer
[	O
sym_index	int
]	O
.	O
file_name	pointer
;	O
}	O
}	O
