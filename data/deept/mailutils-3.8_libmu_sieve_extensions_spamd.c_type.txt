static	O
int	O
spamd_connect_tcp	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_stream_t	pointer
*	O
stream	pointer
,	O
char	O
*	O
host	pointer
,	O
int	O
port	int
)	O
{	O
int	O
rc	int
=	O
mu_tcp_stream_create	function
(	O
stream	pointer
,	O
host	pointer
,	O
port	int
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"mu_tcp_stream_create: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
spamd_connect_socket	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_stream_t	pointer
*	O
stream	pointer
,	O
char	O
*	O
path	pointer
)	O
{	O
int	O
rc	int
=	O
mu_socket_stream_create	function
(	O
stream	pointer
,	O
path	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"mu_socket_stream_create: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
void	O
spamd_destroy	function
(	O
mu_stream_t	pointer
*	O
stream	pointer
)	O
{	O
mu_stream_close	function
(	O
*	O
stream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
stream	pointer
)	O
;	O
}	O
static	O
void	O
spamd_send_command	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
char	O
buf	pointer
[	O
512	int
]	O
;	O
size_t	long
n	pointer
;	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
n	pointer
=	O
vsnprintf	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
mu_stream_writeline	function
(	O
stream	pointer
,	O
buf	pointer
,	O
n	pointer
)	O
;	O
}	O
static	O
int	O
spamd_send_message	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
int	O
dbg	int
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
mstr	pointer
,	O
flt	pointer
;	O
struct	O
mu_buffer_query	struct
newbuf	struct
,	O
oldbuf	struct
;	O
int	O
bufchg	int
=	O
0	int
;	O
mu_debug_handle_t	int
dlev	int
;	O
int	O
xlev	int
;	O
int	O
xlevchg	int
=	O
0	int
;	O
rc	int
=	O
mu_message_get_streamref	function
(	O
msg	pointer
,	O
&	O
mstr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_filter_create	function
(	O
&	O
flt	pointer
,	O
mstr	pointer
,	O
"CRLF"	pointer
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_destroy	function
(	O
&	O
mstr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
mu_stream_ioctl	function
(	O
stream	pointer
,	O
MU_IOCTL_TRANSPORT_BUFFER	int
,	O
MU_IOCTL_OP_GET	int
,	O
&	O
oldbuf	struct
)	O
==	O
0	int
)	O
{	O
newbuf	struct
.	O
type	int
=	O
MU_TRANSPORT_OUTPUT	int
;	O
newbuf	struct
.	O
buftype	enum
=	O
mu_buffer_full	int
;	O
newbuf	struct
.	O
bufsize	long
=	O
64	int
*	O
1024	int
;	O
mu_stream_ioctl	function
(	O
stream	pointer
,	O
MU_IOCTL_TRANSPORT_BUFFER	int
,	O
MU_IOCTL_OP_SET	int
,	O
&	O
newbuf	struct
)	O
;	O
bufchg	int
=	O
1	int
;	O
}	O
if	O
(	O
dbg	int
&&	O
mu_debug_category_level	function
(	O
"sieve"	pointer
,	O
5	int
,	O
&	O
dlev	int
)	O
==	O
0	int
&&	O
!	O
(	O
dlev	int
&	O
MU_DEBUG_LEVEL_MASK	O
(	O
MU_DEBUG_TRACE9	int
)	O
)	O
)	O
{	O
xlev	int
=	O
MU_XSCRIPT_PAYLOAD	int
;	O
if	O
(	O
mu_stream_ioctl	function
(	O
stream	pointer
,	O
MU_IOCTL_XSCRIPTSTREAM	int
,	O
MU_IOCTL_XSCRIPTSTREAM_LEVEL	int
,	O
&	O
xlev	int
)	O
==	O
0	int
)	O
xlevchg	int
=	O
1	int
;	O
}	O
rc	int
=	O
mu_stream_copy	function
(	O
stream	pointer
,	O
flt	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
bufchg	int
)	O
mu_stream_ioctl	function
(	O
stream	pointer
,	O
MU_IOCTL_TRANSPORT_BUFFER	int
,	O
MU_IOCTL_OP_SET	int
,	O
&	O
oldbuf	struct
)	O
;	O
if	O
(	O
xlevchg	int
)	O
mu_stream_ioctl	function
(	O
stream	pointer
,	O
MU_IOCTL_XSCRIPTSTREAM	int
,	O
MU_IOCTL_XSCRIPTSTREAM_LEVEL	int
,	O
&	O
xlev	int
)	O
;	O
mu_stream_destroy	function
(	O
&	O
mstr	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
flt	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
void	O
decode_float	function
(	O
long	O
*	O
vn	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
int	O
digits	pointer
,	O
char	O
*	O
*	O
endp	pointer
)	O
{	O
long	O
v	array
;	O
size_t	long
frac	long
=	O
0	int
;	O
size_t	long
base	long
=	O
1	int
;	O
int	O
i	long
;	O
int	O
negative	int
=	O
0	int
;	O
char	O
*	O
end	struct
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
digits	pointer
;	O
i	long
++	O
)	O
base	long
*=	O
10	int
;	O
v	array
=	O
strtol	function
(	O
str	pointer
,	O
&	O
end	struct
,	O
10	int
)	O
;	O
str	pointer
=	O
end	struct
;	O
if	O
(	O
v	array
<	O
0	int
)	O
{	O
negative	int
=	O
1	int
;	O
v	array
=	O
-	O
v	array
;	O
}	O
v	array
*=	O
base	long
;	O
if	O
(	O
*	O
str	pointer
==	O
'.'	O
)	O
{	O
for	O
(	O
str	pointer
++	O
,	O
i	long
=	O
0	int
;	O
*	O
str	pointer
&&	O
mu_isdigit	O
(	O
*	O
str	pointer
)	O
&&	O
i	long
<	O
digits	pointer
;	O
i	long
++	O
,	O
str	pointer
++	O
)	O
frac	long
=	O
frac	long
*	O
10	int
+	O
char_to_num	O
(	O
*	O
str	pointer
)	O
;	O
if	O
(	O
*	O
str	pointer
&&	O
mu_isdigit	O
(	O
*	O
str	pointer
)	O
)	O
{	O
if	O
(	O
char_to_num	O
(	O
*	O
str	pointer
)	O
>=	O
5	int
)	O
frac	long
++	O
;	O
if	O
(	O
endp	pointer
)	O
while	O
(	O
*	O
str	pointer
&&	O
mu_isdigit	O
(	O
*	O
str	pointer
)	O
)	O
str	pointer
++	O
;	O
}	O
else	O
for	O
(	O
;	O
i	long
<	O
digits	pointer
;	O
i	long
++	O
)	O
frac	long
*=	O
10	int
;	O
}	O
*	O
vn	pointer
=	O
v	array
+	O
frac	long
;	O
if	O
(	O
negative	int
)	O
*	O
vn	pointer
=	O
-	O
*	O
vn	pointer
;	O
if	O
(	O
endp	pointer
)	O
*	O
endp	pointer
=	O
(	O
char	O
*	O
)	O
str	pointer
;	O
}	O
static	O
int	O
decode_boolean	function
(	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
mu_c_strcasecmp	function
(	O
str	pointer
,	O
"true"	pointer
)	O
==	O
0	int
)	O
return	O
1	int
;	O
else	O
if	O
(	O
mu_c_strcasecmp	function
(	O
str	pointer
,	O
"false"	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
return	O
0	int
;	O
}	O
typedef	O
RETSIGTYPE	void
(	O
*	O
signal_handler	pointer
)	O
(	O
int	O
)	O
;	O
static	O
signal_handler	pointer
set_signal_handler	function
(	O
int	O
sig	int
,	O
signal_handler	pointer
h	pointer
)	O
{	O
struct	O
sigaction	struct
act	enum
,	O
oldact	struct
;	O
act	enum
.	O
sa_handler	pointer
=	O
h	pointer
;	O
sigemptyset	function
(	O
&	O
act	enum
.	O
sa_mask	struct
)	O
;	O
act	enum
.	O
sa_flags	int
=	O
0	int
;	O
sigaction	struct
(	O
sig	int
,	O
&	O
act	enum
,	O
&	O
oldact	struct
)	O
;	O
return	O
oldact	struct
.	O
sa_handler	pointer
;	O
}	O
void	O
spamd_abort	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_stream_t	pointer
*	O
stream	pointer
,	O
signal_handler	pointer
handler	array
)	O
{	O
spamd_destroy	function
(	O
stream	pointer
)	O
;	O
set_signal_handler	function
(	O
SIGPIPE	int
,	O
handler	array
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
static	O
int	O
got_sigpipe	int
;	O
static	O
signal_handler	pointer
handler	array
;	O
static	O
RETSIGTYPE	void
sigpipe_handler	function
(	O
int	O
sig	int
MU_ARG_UNUSED	O
)	O
{	O
got_sigpipe	int
=	O
1	int
;	O
}	O
static	O
void	O
spamd_read_line	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
*	O
pbuffer	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
size_t	long
n	pointer
;	O
int	O
rc	int
=	O
mu_stream_getline	function
(	O
stream	pointer
,	O
pbuffer	pointer
,	O
psize	pointer
,	O
&	O
n	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mu_rtrim_class	function
(	O
*	O
pbuffer	pointer
,	O
MU_CTYPE_ENDLN	int
)	O
;	O
else	O
{	O
free	function
(	O
pbuffer	pointer
)	O
;	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"read error: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
spamd_abort	function
(	O
mach	pointer
,	O
&	O
stream	pointer
,	O
handler	array
)	O
;	O
}	O
}	O
static	O
int	O
parse_response_line	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
const	O
char	O
*	O
buffer	pointer
)	O
{	O
const	O
char	O
*	O
str	pointer
;	O
char	O
*	O
end	struct
;	O
long	O
version	long
;	O
unsigned	O
long	O
resp	long
;	O
str	pointer
=	O
buffer	pointer
;	O
if	O
(	O
strncmp	function
(	O
str	pointer
,	O
"SPAMD/"	pointer
,	O
6	int
)	O
)	O
return	O
MU_ERR_BADREPLY	O
;	O
str	pointer
+=	O
6	int
;	O
decode_float	function
(	O
&	O
version	long
,	O
str	pointer
,	O
1	int
,	O
&	O
end	struct
)	O
;	O
if	O
(	O
version	long
<	O
10	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"unsupported SPAMD version: %s"	pointer
)	O
,	O
str	pointer
)	O
;	O
return	O
MU_ERR_BADREPLY	O
;	O
}	O
str	pointer
=	O
mu_str_skip_class	function
(	O
end	struct
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
!	O
*	O
str	pointer
||	O
!	O
mu_isdigit	O
(	O
*	O
str	pointer
)	O
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"malformed spamd response: %s"	pointer
)	O
,	O
buffer	pointer
)	O
;	O
return	O
MU_ERR_BADREPLY	O
;	O
}	O
resp	long
=	O
strtoul	function
(	O
str	pointer
,	O
&	O
end	struct
,	O
10	int
)	O
;	O
if	O
(	O
resp	long
!=	O
0	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"spamd failure: %lu %s"	pointer
)	O
,	O
resp	long
,	O
end	struct
)	O
;	O
return	O
MU_ERR_REPLY	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
get_real_message_size	function
(	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
mu_stream_t	pointer
null	pointer
;	O
mu_stream_stat_buffer	array
stat	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_nullstream_create	function
(	O
&	O
null	pointer
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_stream_set_stat	function
(	O
null	pointer
,	O
MU_STREAM_STAT_MASK	O
(	O
MU_STREAM_STAT_OUT	int
)	O
,	O
stat	pointer
)	O
;	O
rc	int
=	O
spamd_send_message	function
(	O
null	pointer
,	O
msg	pointer
,	O
0	int
)	O
;	O
mu_stream_destroy	function
(	O
&	O
null	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
psize	pointer
=	O
stat	pointer
[	O
MU_STREAM_STAT_OUT	int
]	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
spamd_test	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
char	O
*	O
buffer	pointer
=	O
NULL	O
;	O
size_t	long
size	long
;	O
char	O
spam_str	array
[	O
6	int
]	O
,	O
score_str	array
[	O
21	int
]	O
,	O
threshold_str	array
[	O
21	int
]	O
;	O
int	O
rc	int
;	O
int	O
result	pointer
;	O
long	O
score	long
,	O
threshold	long
,	O
limit	long
;	O
mu_stream_t	pointer
stream	pointer
=	O
NULL	O
,	O
null	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
char	O
*	O
host	pointer
;	O
size_t	long
num	long
;	O
char	O
*	O
str	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
mu_debug_handle_t	int
lev	int
=	O
0	int
;	O
if	O
(	O
mu_sieve_is_dry_run	function
(	O
mach	pointer
)	O
)	O
return	O
0	int
;	O
msg	pointer
=	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
;	O
rc	int
=	O
get_real_message_size	function
(	O
msg	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot get real message size: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
if	O
(	O
!	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"host"	pointer
,	O
SVT_STRING	int
,	O
&	O
host	pointer
)	O
)	O
host	pointer
=	O
"127.0.0.1"	pointer
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"port"	pointer
,	O
SVT_NUMBER	int
,	O
&	O
num	long
)	O
)	O
result	pointer
=	O
spamd_connect_tcp	function
(	O
mach	pointer
,	O
&	O
stream	pointer
,	O
host	pointer
,	O
num	long
)	O
;	O
else	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"socket"	pointer
,	O
SVT_STRING	int
,	O
&	O
str	pointer
)	O
)	O
result	pointer
=	O
spamd_connect_socket	function
(	O
mach	pointer
,	O
&	O
stream	pointer
,	O
str	pointer
)	O
;	O
else	O
result	pointer
=	O
spamd_connect_tcp	function
(	O
mach	pointer
,	O
&	O
stream	pointer
,	O
host	pointer
,	O
DEFAULT_SPAMD_PORT	int
)	O
;	O
if	O
(	O
result	pointer
)	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
mu_stream_set_buffer	function
(	O
stream	pointer
,	O
mu_buffer_line	int
,	O
0	int
)	O
;	O
if	O
(	O
mu_debug_category_level	function
(	O
"sieve"	pointer
,	O
5	int
,	O
&	O
lev	int
)	O
==	O
0	int
&&	O
(	O
lev	int
&	O
MU_DEBUG_LEVEL_MASK	O
(	O
MU_DEBUG_PROT	int
)	O
)	O
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
dstr	pointer
,	O
xstr	pointer
;	O
rc	int
=	O
mu_dbgstream_create	function
(	O
&	O
dstr	pointer
,	O
MU_DIAG_DEBUG	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot create debug stream; transcript disabled: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
{	O
rc	int
=	O
mu_xscript_stream_create	function
(	O
&	O
xstr	pointer
,	O
stream	pointer
,	O
dstr	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot create transcript stream: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
{	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
stream	pointer
=	O
xstr	pointer
;	O
}	O
}	O
}	O
spamd_send_command	function
(	O
stream	pointer
,	O
"SYMBOLS SPAMC/1.2"	pointer
)	O
;	O
spamd_send_command	function
(	O
stream	pointer
,	O
"Content-length: %lu"	pointer
,	O
(	O
u_long	long
)	O
size	long
)	O
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"user"	pointer
,	O
SVT_STRING	int
,	O
&	O
str	pointer
)	O
)	O
spamd_send_command	function
(	O
stream	pointer
,	O
"User: %s"	pointer
,	O
str	pointer
)	O
;	O
else	O
{	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
=	O
mu_get_auth_by_uid	function
(	O
geteuid	function
(	O
)	O
)	O
;	O
spamd_send_command	function
(	O
stream	pointer
,	O
"User: %s"	pointer
,	O
auth	pointer
?	O
auth	pointer
->	O
name	pointer
:	O
"root"	pointer
)	O
;	O
mu_auth_data_free	function
(	O
auth	pointer
)	O
;	O
}	O
got_sigpipe	int
=	O
0	int
;	O
handler	array
=	O
set_signal_handler	function
(	O
SIGPIPE	int
,	O
sigpipe_handler	function
)	O
;	O
spamd_send_command	function
(	O
stream	pointer
,	O
""	pointer
)	O
;	O
spamd_send_message	function
(	O
stream	pointer
,	O
msg	pointer
,	O
1	int
)	O
;	O
mu_stream_shutdown	function
(	O
stream	pointer
,	O
MU_STREAM_WRITE	int
)	O
;	O
spamd_read_line	function
(	O
mach	pointer
,	O
stream	pointer
,	O
&	O
buffer	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
got_sigpipe	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"remote side has closed connection"	pointer
)	O
)	O
;	O
spamd_abort	function
(	O
mach	pointer
,	O
&	O
stream	pointer
,	O
handler	array
)	O
;	O
}	O
if	O
(	O
parse_response_line	function
(	O
mach	pointer
,	O
buffer	pointer
)	O
)	O
spamd_abort	function
(	O
mach	pointer
,	O
&	O
stream	pointer
,	O
handler	array
)	O
;	O
spamd_read_line	function
(	O
mach	pointer
,	O
stream	pointer
,	O
&	O
buffer	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
sscanf	function
(	O
buffer	pointer
,	O
"Spam: %5s ; %20s / %20s"	pointer
,	O
spam_str	array
,	O
score_str	array
,	O
threshold_str	array
)	O
!=	O
3	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"spamd responded with bad Spam header '%s'"	pointer
)	O
,	O
buffer	pointer
)	O
;	O
spamd_abort	function
(	O
mach	pointer
,	O
&	O
stream	pointer
,	O
handler	array
)	O
;	O
}	O
result	pointer
=	O
decode_boolean	function
(	O
spam_str	array
)	O
;	O
score	long
=	O
strtoul	function
(	O
score_str	array
,	O
NULL	O
,	O
10	int
)	O
;	O
decode_float	function
(	O
&	O
score	long
,	O
score_str	array
,	O
3	int
,	O
NULL	O
)	O
;	O
decode_float	function
(	O
&	O
threshold	long
,	O
threshold_str	array
,	O
3	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
result	pointer
)	O
{	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"over"	pointer
,	O
SVT_STRING	int
,	O
&	O
str	pointer
)	O
)	O
{	O
decode_float	function
(	O
&	O
limit	long
,	O
str	pointer
,	O
3	int
,	O
NULL	O
)	O
;	O
result	pointer
=	O
score	long
>=	O
limit	long
;	O
}	O
else	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"under"	pointer
,	O
SVT_STRING	int
,	O
&	O
str	pointer
)	O
)	O
{	O
decode_float	function
(	O
&	O
limit	long
,	O
str	pointer
,	O
3	int
,	O
NULL	O
)	O
;	O
result	pointer
=	O
score	long
<=	O
limit	long
;	O
}	O
}	O
spamd_read_line	function
(	O
mach	pointer
,	O
stream	pointer
,	O
&	O
buffer	pointer
,	O
&	O
size	long
)	O
;	O
spamd_read_line	function
(	O
mach	pointer
,	O
stream	pointer
,	O
&	O
buffer	pointer
,	O
&	O
size	long
)	O
;	O
rc	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot get message header: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
spamd_abort	function
(	O
mach	pointer
,	O
&	O
stream	pointer
,	O
handler	array
)	O
;	O
}	O
mu_header_append	function
(	O
hdr	pointer
,	O
"X-Spamd-Status"	pointer
,	O
spam_str	array
)	O
;	O
mu_header_append	function
(	O
hdr	pointer
,	O
"X-Spamd-Score"	pointer
,	O
score_str	array
)	O
;	O
mu_header_append	function
(	O
hdr	pointer
,	O
"X-Spamd-Threshold"	pointer
,	O
threshold_str	array
)	O
;	O
mu_header_append	function
(	O
hdr	pointer
,	O
"X-Spamd-Keywords"	pointer
,	O
buffer	pointer
)	O
;	O
free	function
(	O
buffer	pointer
)	O
;	O
mu_nullstream_create	function
(	O
&	O
null	pointer
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
!	O
(	O
lev	int
&	O
MU_DEBUG_LEVEL_MASK	O
(	O
MU_DEBUG_TRACE9	int
)	O
)	O
)	O
{	O
int	O
xlev	int
=	O
MU_XSCRIPT_PAYLOAD	int
;	O
mu_stream_ioctl	function
(	O
stream	pointer
,	O
MU_IOCTL_XSCRIPTSTREAM	int
,	O
MU_IOCTL_XSCRIPTSTREAM_LEVEL	int
,	O
&	O
xlev	int
)	O
;	O
}	O
mu_stream_copy	function
(	O
null	pointer
,	O
stream	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
null	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
set_signal_handler	function
(	O
SIGPIPE	int
,	O
handler	array
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
mu_sieve_data_type	enum
spamd_req_args	array
[	O
]	O
=	O
{	O
SVT_VOID	int
}	O
;	O
static	O
mu_sieve_tag_def_t	struct
spamd_tags	array
[	O
]	O
=	O
{	O
{	O
"host"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"port"	pointer
,	O
SVT_NUMBER	int
}	O
,	O
{	O
"socket"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"user"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"over"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"under"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
spamd_tag_groups	array
[	O
]	O
=	O
{	O
{	O
spamd_tags	array
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
SIEVE_EXPORT	O
(	O
spamd	O
,	O
init	O
)	O
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_register_test	function
(	O
mach	pointer
,	O
"spamd"	pointer
,	O
spamd_test	function
,	O
spamd_req_args	array
,	O
spamd_tag_groups	array
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
