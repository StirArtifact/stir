dwg_inthash	struct
*	O
hash_new	function
(	O
uint32_t	int
size	int
)	O
{	O
dwg_inthash	struct
*	O
hash	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
dwg_inthash	struct
)	O
)	O
;	O
uint32_t	int
cap	int
;	O
if	O
(	O
!	O
hash	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
size	int
)	O
size	int
=	O
15	int
;	O
cap	int
=	O
(	O
uint32_t	int
)	O
(	O
size	int
*	O
100.0	int
/	O
HASH_LOAD	int
)	O
;	O
while	O
(	O
size	int
<=	O
cap	int
)	O
size	int
<<=	O
1U	int
;	O
hash	pointer
->	O
array	pointer
=	O
calloc	function
(	O
size	int
,	O
sizeof	O
(	O
struct	O
_hashbucket	struct
)	O
)	O
;	O
hash	pointer
->	O
elems	int
=	O
0	int
;	O
hash	pointer
->	O
size	int
=	O
size	int
;	O
return	O
hash	pointer
;	O
}	O
static	O
inline	O
int	O
hash_need_resize	function
(	O
dwg_inthash	struct
*	O
hash	pointer
)	O
{	O
return	O
(	O
uint32_t	int
)	O
(	O
hash	pointer
->	O
elems	int
*	O
100.0	int
/	O
HASH_LOAD	int
)	O
>	O
hash	pointer
->	O
size	int
;	O
}	O
static	O
void	O
hash_resize	function
(	O
dwg_inthash	struct
*	O
hash	pointer
)	O
{	O
dwg_inthash	struct
oldhash	struct
=	O
*	O
hash	pointer
;	O
uint32_t	int
size	int
=	O
hash	pointer
->	O
size	int
*	O
2	int
;	O
uint32_t	int
i	int
;	O
hash	pointer
->	O
array	pointer
=	O
calloc	function
(	O
size	int
,	O
sizeof	O
(	O
struct	O
_hashbucket	struct
)	O
)	O
;	O
if	O
(	O
!	O
hash	pointer
->	O
array	pointer
)	O
{	O
*	O
hash	pointer
=	O
oldhash	struct
;	O
return	O
;	O
}	O
hash	pointer
->	O
elems	int
=	O
0	int
;	O
hash	pointer
->	O
size	int
=	O
size	int
;	O
memset	function
(	O
hash	pointer
->	O
array	pointer
,	O
0	int
,	O
size	int
*	O
sizeof	O
(	O
struct	O
_hashbucket	struct
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
oldhash	struct
.	O
size	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
oldhash	struct
.	O
array	pointer
[	O
i	int
]	O
.	O
key	int
)	O
hash_set	function
(	O
hash	pointer
,	O
oldhash	struct
.	O
array	pointer
[	O
i	int
]	O
.	O
key	int
,	O
oldhash	struct
.	O
array	pointer
[	O
i	int
]	O
.	O
value	int
)	O
;	O
}	O
free	function
(	O
oldhash	struct
.	O
array	pointer
)	O
;	O
return	O
;	O
}	O
static	O
inline	O
uint32_t	int
hash_func	function
(	O
uint32_t	int
key	int
)	O
{	O
key	int
=	O
(	O
(	O
key	int
>>	O
16	int
)	O
^	O
key	int
)	O
*	O
0x45d9f3b	int
;	O
key	int
=	O
(	O
(	O
key	int
>>	O
16	int
)	O
^	O
key	int
)	O
*	O
0x45d9f3b	int
;	O
key	int
=	O
(	O
key	int
>>	O
16	int
)	O
^	O
key	int
;	O
return	O
key	int
;	O
}	O
uint32_t	int
hash_get	function
(	O
dwg_inthash	struct
*	O
hash	pointer
,	O
uint32_t	int
key	int
)	O
{	O
uint32_t	int
i	int
=	O
hash_func	function
(	O
key	int
)	O
%	O
hash	pointer
->	O
size	int
;	O
uint32_t	int
j	int
=	O
i	int
;	O
while	O
(	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
key	int
&&	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
key	int
!=	O
key	int
)	O
{	O
i	int
++	O
;	O
if	O
(	O
i	int
==	O
hash	pointer
->	O
size	int
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
j	int
)	O
return	O
HASH_NOT_FOUND	O
;	O
}	O
if	O
(	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
key	int
)	O
return	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
value	int
;	O
else	O
return	O
HASH_NOT_FOUND	O
;	O
}	O
void	O
hash_set	function
(	O
dwg_inthash	struct
*	O
hash	pointer
,	O
uint32_t	int
key	int
,	O
uint32_t	int
value	int
)	O
{	O
uint32_t	int
i	int
=	O
hash_func	function
(	O
key	int
)	O
%	O
hash	pointer
->	O
size	int
;	O
uint32_t	int
j	int
=	O
i	int
;	O
if	O
(	O
key	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"forbidden 0 key\n"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
key	int
)	O
{	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
key	int
=	O
key	int
;	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
value	int
=	O
value	int
;	O
hash	pointer
->	O
elems	int
++	O
;	O
return	O
;	O
}	O
while	O
(	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
key	int
)	O
{	O
if	O
(	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
key	int
==	O
key	int
)	O
{	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
value	int
=	O
value	int
;	O
return	O
;	O
}	O
i	int
++	O
;	O
if	O
(	O
i	int
==	O
hash	pointer
->	O
size	int
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
j	int
)	O
{	O
if	O
(	O
hash_need_resize	function
(	O
hash	pointer
)	O
)	O
{	O
hash_resize	function
(	O
hash	pointer
)	O
;	O
return	O
hash_set	function
(	O
hash	pointer
,	O
key	int
,	O
value	int
)	O
;	O
}	O
while	O
(	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
key	int
)	O
{	O
i	int
++	O
;	O
if	O
(	O
i	int
==	O
hash	pointer
->	O
size	int
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
j	int
)	O
{	O
hash_resize	function
(	O
hash	pointer
)	O
;	O
hash_set	function
(	O
hash	pointer
,	O
key	int
,	O
value	int
)	O
;	O
return	O
;	O
}	O
else	O
{	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
key	int
=	O
key	int
;	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
value	int
=	O
value	int
;	O
hash	pointer
->	O
elems	int
++	O
;	O
return	O
;	O
}	O
}	O
}	O
}	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
key	int
=	O
key	int
;	O
hash	pointer
->	O
array	pointer
[	O
i	int
]	O
.	O
value	int
=	O
value	int
;	O
hash	pointer
->	O
elems	int
++	O
;	O
return	O
;	O
}	O
void	O
hash_free	function
(	O
dwg_inthash	struct
*	O
hash	pointer
)	O
{	O
free	function
(	O
hash	pointer
->	O
array	pointer
)	O
;	O
hash	pointer
->	O
array	pointer
=	O
NULL	O
;	O
hash	pointer
->	O
size	int
=	O
0	int
;	O
hash	pointer
->	O
elems	int
=	O
0	int
;	O
free	function
(	O
hash	pointer
)	O
;	O
}	O
