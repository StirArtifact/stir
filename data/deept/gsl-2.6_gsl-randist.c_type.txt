void	O
error	function
(	O
const	O
char	O
*	O
s	pointer
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
size_t	long
n	long
=	O
0	int
;	O
double	O
mu	double
=	O
0	int
,	O
nu	double
=	O
0	int
,	O
nu1	double
=	O
0	int
,	O
nu2	double
=	O
0	int
,	O
sigma	double
=	O
0	int
,	O
a	pointer
=	O
0	int
,	O
b	pointer
=	O
0	int
,	O
c	pointer
=	O
0	int
;	O
double	O
zeta	double
=	O
0	int
,	O
sigmax	double
=	O
0	int
,	O
sigmay	double
=	O
0	int
,	O
rho	double
=	O
0	int
;	O
double	O
p	int
=	O
0	int
;	O
double	O
x	double
=	O
0	int
,	O
y	pointer
=	O
0	int
,	O
z	struct
=	O
0	int
;	O
unsigned	O
int	O
N	int
=	O
0	int
,	O
t	int
=	O
0	int
,	O
n1	long
=	O
0	int
,	O
n2	long
=	O
0	int
;	O
unsigned	O
long	O
int	O
seed	long
=	O
0	int
;	O
const	O
char	O
*	O
name	pointer
;	O
gsl_rng	struct
*	O
r	pointer
;	O
if	O
(	O
argc	int
<	O
4	int
)	O
{	O
printf	function
(	O
"Usage: gsl-randist seed n DIST param1 param2 ...\n"	pointer
"Generates n samples from the distribution DIST with parameters param1,\n"	pointer
"param2, etc. Valid distributions are,\n\n"	pointer
)	O
;	O
printf	function
(	O
"  beta\n"	pointer
"  binomial\n"	pointer
"  bivariate-gaussian\n"	pointer
"  cauchy\n"	pointer
"  chisq\n"	pointer
"  dir-2d\n"	pointer
"  dir-3d\n"	pointer
"  dir-nd\n"	pointer
"  erlang\n"	pointer
"  exponential\n"	pointer
"  exppow\n"	pointer
"  fdist\n"	pointer
"  flat\n"	pointer
"  gamma\n"	pointer
"  gaussian-tail\n"	pointer
"  gaussian\n"	pointer
"  geometric\n"	pointer
"  gumbel1\n"	pointer
"  gumbel2\n"	pointer
"  hypergeometric\n"	pointer
"  laplace\n"	pointer
"  landau\n"	pointer
"  levy\n"	pointer
"  levy-skew\n"	pointer
"  logarithmic\n"	pointer
"  logistic\n"	pointer
"  lognormal\n"	pointer
"  negative-binomial\n"	pointer
"  pareto\n"	pointer
"  pascal\n"	pointer
"  poisson\n"	pointer
"  rayleigh-tail\n"	pointer
"  rayleigh\n"	pointer
"  tdist\n"	pointer
"  ugaussian-tail\n"	pointer
"  ugaussian\n"	pointer
"  weibull\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
argv	array
++	O
;	O
seed	long
=	O
atol	function
(	O
argv	array
[	O
0	int
]	O
)	O
;	O
argc	int
--	O
;	O
argv	array
++	O
;	O
n	long
=	O
atol	function
(	O
argv	array
[	O
0	int
]	O
)	O
;	O
argc	int
--	O
;	O
argv	array
++	O
;	O
name	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
argc	int
--	O
;	O
argc	int
--	O
;	O
gsl_rng_env_setup	function
(	O
)	O
;	O
if	O
(	O
gsl_rng_default_seed	long
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"overriding GSL_RNG_SEED with command line value, seed = %ld\n"	pointer
,	O
seed	long
)	O
;	O
}	O
gsl_rng_default_seed	long
=	O
seed	long
;	O
r	pointer
=	O
gsl_rng_alloc	function
(	O
gsl_rng_default	pointer
)	O
;	O
if	O
(	O
NAME	O
(	O
"bernoulli"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"p = probability of success"	pointer
)	O
;	O
DBL_ARG	O
(	O
p	int
)	O
INT_OUTPUT	O
(	O
gsl_ran_bernoulli	function
(	O
r	pointer
,	O
p	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"beta"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"a,b = shape parameters"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
DBL_ARG	O
(	O
b	pointer
)	O
OUTPUT	O
(	O
gsl_ran_beta	function
(	O
r	pointer
,	O
a	pointer
,	O
b	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"binomial"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"p = probability, N = number of trials"	pointer
)	O
;	O
DBL_ARG	O
(	O
p	int
)	O
INT_ARG	O
(	O
N	int
)	O
INT_OUTPUT	O
(	O
gsl_ran_binomial	function
(	O
r	pointer
,	O
p	int
,	O
N	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"cauchy"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"a = scale parameter"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
OUTPUT	O
(	O
gsl_ran_cauchy	function
(	O
r	pointer
,	O
a	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"chisq"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"nu = degrees of freedom"	pointer
)	O
;	O
DBL_ARG	O
(	O
nu	double
)	O
OUTPUT	O
(	O
gsl_ran_chisq	function
(	O
r	pointer
,	O
nu	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"erlang"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"a = scale parameter, b = order"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
DBL_ARG	O
(	O
b	pointer
)	O
OUTPUT	O
(	O
gsl_ran_erlang	function
(	O
r	pointer
,	O
a	pointer
,	O
b	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"exponential"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"mu = mean value"	pointer
)	O
;	O
DBL_ARG	O
(	O
mu	double
)	O
;	O
OUTPUT	O
(	O
gsl_ran_exponential	function
(	O
r	pointer
,	O
mu	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"exppow"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"a = scale parameter, b = power (1=exponential, 2=gaussian)"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
DBL_ARG	O
(	O
b	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_exppow	function
(	O
r	pointer
,	O
a	pointer
,	O
b	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"fdist"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"nu1, nu2 = degrees of freedom parameters"	pointer
)	O
;	O
DBL_ARG	O
(	O
nu1	double
)	O
;	O
DBL_ARG	O
(	O
nu2	double
)	O
;	O
OUTPUT	O
(	O
gsl_ran_fdist	function
(	O
r	pointer
,	O
nu1	double
,	O
nu2	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"flat"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"a = lower limit, b = upper limit"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
DBL_ARG	O
(	O
b	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_flat	function
(	O
r	pointer
,	O
a	pointer
,	O
b	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"gamma"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"a = order, b = scale"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
DBL_ARG	O
(	O
b	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_gamma	function
(	O
r	pointer
,	O
a	pointer
,	O
b	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"gaussian"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"sigma = standard deviation"	pointer
)	O
;	O
DBL_ARG	O
(	O
sigma	double
)	O
;	O
OUTPUT	O
(	O
gsl_ran_gaussian	function
(	O
r	pointer
,	O
sigma	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"gaussian-tail"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"a = lower limit, sigma = standard deviation"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
DBL_ARG	O
(	O
sigma	double
)	O
;	O
OUTPUT	O
(	O
gsl_ran_gaussian_tail	function
(	O
r	pointer
,	O
a	pointer
,	O
sigma	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"ugaussian"	pointer
)	O
)	O
{	O
ARGS	O
(	O
0	int
,	O
"unit gaussian, no parameters required"	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_ugaussian	function
(	O
r	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"ugaussian-tail"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"a = lower limit"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_ugaussian_tail	function
(	O
r	pointer
,	O
a	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"bivariate-gaussian"	pointer
)	O
)	O
{	O
ARGS	O
(	O
3	int
,	O
"sigmax = x std.dev., sigmay = y std.dev., rho = correlation"	pointer
)	O
;	O
DBL_ARG	O
(	O
sigmax	double
)	O
;	O
DBL_ARG	O
(	O
sigmay	double
)	O
;	O
DBL_ARG	O
(	O
rho	double
)	O
;	O
OUTPUT2	O
(	O
gsl_ran_bivariate_gaussian	function
(	O
r	pointer
,	O
sigmax	double
,	O
sigmay	double
,	O
rho	double
,	O
&	O
x	double
,	O
&	O
y	pointer
)	O
,	O
x	double
,	O
y	pointer
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"dir-2d"	pointer
)	O
)	O
{	O
OUTPUT2	O
(	O
gsl_ran_dir_2d	function
(	O
r	pointer
,	O
&	O
x	double
,	O
&	O
y	pointer
)	O
,	O
x	double
,	O
y	pointer
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"dir-3d"	pointer
)	O
)	O
{	O
OUTPUT3	O
(	O
gsl_ran_dir_3d	function
(	O
r	pointer
,	O
&	O
x	double
,	O
&	O
y	pointer
,	O
&	O
z	struct
)	O
,	O
x	double
,	O
y	pointer
,	O
z	struct
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"dir-nd"	pointer
)	O
)	O
{	O
double	O
*	O
xarr	pointer
;	O
ARGS	O
(	O
1	int
,	O
"n1 = number of dimensions of hypersphere"	pointer
)	O
;	O
INT_ARG	O
(	O
n1	long
)	O
;	O
xarr	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
n1	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
{	O
gsl_ran_dir_nd	function
(	O
r	pointer
,	O
n1	long
,	O
xarr	pointer
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n1	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
j	long
)	O
putchar	function
(	O
' '	O
)	O
;	O
printf	function
(	O
"%g"	pointer
,	O
xarr	pointer
[	O
j	long
]	O
)	O
;	O
}	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
;	O
free	function
(	O
xarr	pointer
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"geometric"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"p = bernoulli trial probability of success"	pointer
)	O
;	O
DBL_ARG	O
(	O
p	int
)	O
;	O
INT_OUTPUT	O
(	O
gsl_ran_geometric	function
(	O
r	pointer
,	O
p	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"gumbel1"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"a = order, b = scale parameter"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
DBL_ARG	O
(	O
b	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_gumbel1	function
(	O
r	pointer
,	O
a	pointer
,	O
b	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"gumbel2"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"a = order, b = scale parameter"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
DBL_ARG	O
(	O
b	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_gumbel2	function
(	O
r	pointer
,	O
a	pointer
,	O
b	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"hypergeometric"	pointer
)	O
)	O
{	O
ARGS	O
(	O
3	int
,	O
"n1 = tagged population, n2 = untagged population, t = number of trials"	pointer
)	O
;	O
INT_ARG	O
(	O
n1	long
)	O
;	O
INT_ARG	O
(	O
n2	long
)	O
;	O
INT_ARG	O
(	O
t	int
)	O
;	O
INT_OUTPUT	O
(	O
gsl_ran_hypergeometric	function
(	O
r	pointer
,	O
n1	long
,	O
n2	long
,	O
t	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"laplace"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"a = scale parameter"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_laplace	function
(	O
r	pointer
,	O
a	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"landau"	pointer
)	O
)	O
{	O
ARGS	O
(	O
0	int
,	O
"no arguments required"	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_landau	function
(	O
r	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"levy"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"c = scale, a = power (1=cauchy, 2=gaussian)"	pointer
)	O
;	O
DBL_ARG	O
(	O
c	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_levy	function
(	O
r	pointer
,	O
c	pointer
,	O
a	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"levy-skew"	pointer
)	O
)	O
{	O
ARGS	O
(	O
3	int
,	O
"c = scale, a = power (1=cauchy, 2=gaussian), b = skew"	pointer
)	O
;	O
DBL_ARG	O
(	O
c	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
DBL_ARG	O
(	O
b	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_levy_skew	function
(	O
r	pointer
,	O
c	pointer
,	O
a	pointer
,	O
b	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"logarithmic"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"p = probability"	pointer
)	O
;	O
DBL_ARG	O
(	O
p	int
)	O
;	O
INT_OUTPUT	O
(	O
gsl_ran_logarithmic	function
(	O
r	pointer
,	O
p	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"logistic"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"a = scale parameter"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_logistic	function
(	O
r	pointer
,	O
a	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"lognormal"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"zeta = location parameter, sigma = scale parameter"	pointer
)	O
;	O
DBL_ARG	O
(	O
zeta	double
)	O
;	O
DBL_ARG	O
(	O
sigma	double
)	O
;	O
OUTPUT	O
(	O
gsl_ran_lognormal	function
(	O
r	pointer
,	O
zeta	double
,	O
sigma	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"negative-binomial"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"p = probability, a = order"	pointer
)	O
;	O
DBL_ARG	O
(	O
p	int
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
INT_OUTPUT	O
(	O
gsl_ran_negative_binomial	function
(	O
r	pointer
,	O
p	int
,	O
a	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"pareto"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"a = power, b = scale parameter"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
DBL_ARG	O
(	O
b	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_pareto	function
(	O
r	pointer
,	O
a	pointer
,	O
b	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"pascal"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"p = probability, n = order (integer)"	pointer
)	O
;	O
DBL_ARG	O
(	O
p	int
)	O
;	O
INT_ARG	O
(	O
N	int
)	O
;	O
INT_OUTPUT	O
(	O
gsl_ran_pascal	function
(	O
r	pointer
,	O
p	int
,	O
N	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"poisson"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"mu = scale parameter"	pointer
)	O
;	O
DBL_ARG	O
(	O
mu	double
)	O
;	O
INT_OUTPUT	O
(	O
gsl_ran_poisson	function
(	O
r	pointer
,	O
mu	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"rayleigh"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"sigma = scale parameter"	pointer
)	O
;	O
DBL_ARG	O
(	O
sigma	double
)	O
;	O
OUTPUT	O
(	O
gsl_ran_rayleigh	function
(	O
r	pointer
,	O
sigma	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"rayleigh-tail"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"a = lower limit, sigma = scale parameter"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
DBL_ARG	O
(	O
sigma	double
)	O
;	O
OUTPUT	O
(	O
gsl_ran_rayleigh_tail	function
(	O
r	pointer
,	O
a	pointer
,	O
sigma	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"tdist"	pointer
)	O
)	O
{	O
ARGS	O
(	O
1	int
,	O
"nu = degrees of freedom"	pointer
)	O
;	O
DBL_ARG	O
(	O
nu	double
)	O
;	O
OUTPUT	O
(	O
gsl_ran_tdist	function
(	O
r	pointer
,	O
nu	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
NAME	O
(	O
"weibull"	pointer
)	O
)	O
{	O
ARGS	O
(	O
2	int
,	O
"a = scale parameter, b = exponent"	pointer
)	O
;	O
DBL_ARG	O
(	O
a	pointer
)	O
;	O
DBL_ARG	O
(	O
b	pointer
)	O
;	O
OUTPUT	O
(	O
gsl_ran_weibull	function
(	O
r	pointer
,	O
a	pointer
,	O
b	pointer
)	O
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error: unrecognized distribution: %s\n"	pointer
,	O
name	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
error	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error: arguments should be %s\n"	pointer
,	O
s	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
