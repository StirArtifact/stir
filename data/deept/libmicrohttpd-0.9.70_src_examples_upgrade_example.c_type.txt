static	O
void	O
make_blocking	function
(	O
MHD_socket	int
fd	int
)	O
{	O
int	O
flags	int
;	O
flags	int
=	O
fcntl	function
(	O
fd	int
,	O
F_GETFL	int
)	O
;	O
if	O
(	O
-	O
1	int
==	O
flags	int
)	O
return	O
;	O
if	O
(	O
(	O
flags	int
&	O
~	O
O_NONBLOCK	int
)	O
!=	O
flags	int
)	O
if	O
(	O
-	O
1	int
==	O
fcntl	function
(	O
fd	int
,	O
F_SETFL	int
,	O
flags	int
&	O
~	O
O_NONBLOCK	int
)	O
)	O
abort	function
(	O
)	O
;	O
}	O
static	O
void	O
send_all	function
(	O
MHD_socket	int
sock	int
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	long
)	O
{	O
ssize_t	long
ret	long
;	O
size_t	long
off	long
;	O
make_blocking	function
(	O
sock	int
)	O
;	O
for	O
(	O
off	long
=	O
0	int
;	O
off	long
<	O
len	long
;	O
off	long
+=	O
ret	long
)	O
{	O
ret	long
=	O
send	function
(	O
sock	int
,	O
&	O
buf	pointer
[	O
off	long
]	O
,	O
len	long
-	O
off	long
,	O
0	int
)	O
;	O
if	O
(	O
0	int
>	O
ret	long
)	O
{	O
if	O
(	O
EAGAIN	int
==	O
errno	O
)	O
{	O
ret	long
=	O
0	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
0	int
==	O
ret	long
)	O
break	O
;	O
}	O
}	O
struct	O
MyData	struct
{	O
struct	O
MHD_UpgradeResponseHandle	O
*	O
urh	pointer
;	O
char	O
*	O
extra_in	pointer
;	O
size_t	long
extra_in_size	long
;	O
MHD_socket	int
sock	int
;	O
}	O
;	O
static	O
void	O
*	O
run_usock	function
(	O
void	O
*	O
cls	pointer
)	O
{	O
struct	O
MyData	struct
*	O
md	pointer
=	O
cls	pointer
;	O
struct	O
MHD_UpgradeResponseHandle	O
*	O
urh	pointer
=	O
md	pointer
->	O
urh	pointer
;	O
char	O
buf	pointer
[	O
128	int
]	O
;	O
ssize_t	long
got	long
;	O
make_blocking	function
(	O
md	pointer
->	O
sock	int
)	O
;	O
if	O
(	O
0	int
!=	O
md	pointer
->	O
extra_in_size	long
)	O
{	O
send_all	function
(	O
md	pointer
->	O
sock	int
,	O
md	pointer
->	O
extra_in	pointer
,	O
md	pointer
->	O
extra_in_size	long
)	O
;	O
free	function
(	O
md	pointer
->	O
extra_in	pointer
)	O
;	O
}	O
while	O
(	O
1	int
)	O
{	O
got	long
=	O
recv	function
(	O
md	pointer
->	O
sock	int
,	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
0	int
)	O
;	O
if	O
(	O
0	int
>=	O
got	long
)	O
break	O
;	O
send_all	function
(	O
md	pointer
->	O
sock	int
,	O
buf	pointer
,	O
got	long
)	O
;	O
}	O
free	function
(	O
md	pointer
)	O
;	O
MHD_upgrade_action	function
(	O
urh	pointer
,	O
MHD_UPGRADE_ACTION_CLOSE	int
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
uh_cb	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
void	O
*	O
con_cls	pointer
,	O
const	O
char	O
*	O
extra_in	pointer
,	O
size_t	long
extra_in_size	long
,	O
MHD_socket	int
sock	int
,	O
struct	O
MHD_UpgradeResponseHandle	O
*	O
urh	pointer
)	O
{	O
struct	O
MyData	struct
*	O
md	pointer
;	O
pthread_t	long
pt	long
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
connection	pointer
;	O
(	O
void	O
)	O
con_cls	pointer
;	O
md	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
MyData	struct
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
md	pointer
)	O
abort	function
(	O
)	O
;	O
memset	function
(	O
md	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
MyData	struct
)	O
)	O
;	O
if	O
(	O
0	int
!=	O
extra_in_size	long
)	O
{	O
md	pointer
->	O
extra_in	pointer
=	O
malloc	function
(	O
extra_in_size	long
)	O
;	O
if	O
(	O
NULL	O
==	O
md	pointer
->	O
extra_in	pointer
)	O
abort	function
(	O
)	O
;	O
memcpy	function
(	O
md	pointer
->	O
extra_in	pointer
,	O
extra_in	pointer
,	O
extra_in_size	long
)	O
;	O
}	O
md	pointer
->	O
extra_in_size	long
=	O
extra_in_size	long
;	O
md	pointer
->	O
sock	int
=	O
sock	int
;	O
md	pointer
->	O
urh	pointer
=	O
urh	pointer
;	O
if	O
(	O
0	int
!=	O
pthread_create	function
(	O
&	O
pt	long
,	O
NULL	O
,	O
&	O
run_usock	function
,	O
md	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
pthread_detach	function
(	O
pt	long
)	O
;	O
}	O
static	O
int	O
ahc_echo	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	long
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
static	O
int	O
aptr	int
;	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
int	O
ret	long
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
url	pointer
;	O
(	O
void	O
)	O
version	pointer
;	O
(	O
void	O
)	O
upload_data	pointer
;	O
(	O
void	O
)	O
upload_data_size	pointer
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
method	pointer
,	O
"GET"	pointer
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
&	O
aptr	int
!=	O
*	O
ptr	pointer
)	O
{	O
*	O
ptr	pointer
=	O
&	O
aptr	int
;	O
return	O
MHD_YES	int
;	O
}	O
*	O
ptr	pointer
=	O
NULL	O
;	O
response	pointer
=	O
MHD_create_response_for_upgrade	function
(	O
&	O
uh_cb	function
,	O
NULL	O
)	O
;	O
MHD_add_response_header	function
(	O
response	pointer
,	O
MHD_HTTP_HEADER_UPGRADE	pointer
,	O
"Echo Server"	pointer
)	O
;	O
ret	long
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_SWITCHING_PROTOCOLS	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	long
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	pointer
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	function
(	O
"%s PORT\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	pointer
=	O
MHD_start_daemon	function
(	O
MHD_ALLOW_UPGRADE	int
|	O
MHD_USE_AUTO	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_ERROR_LOG	int
,	O
atoi	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	function
,	O
NULL	O
,	O
MHD_OPTION_CONNECTION_TIMEOUT	int
,	O
(	O
unsigned	O
int	O
)	O
120	int
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
d	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getc	function
(	O
stdin	pointer
)	O
;	O
MHD_stop_daemon	function
(	O
d	pointer
)	O
;	O
return	O
0	int
;	O
}	O
