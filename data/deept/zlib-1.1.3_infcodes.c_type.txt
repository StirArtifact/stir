typedef	O
enum	O
{	O
START	int
,	O
LEN	int
,	O
LENEXT	int
,	O
DIST	int
,	O
DISTEXT	int
,	O
COPY	int
,	O
LIT	int
,	O
WASH	int
,	O
END	int
,	O
BADCODE	int
}	O
inflate_codes_mode	enum
;	O
struct	O
inflate_codes_state	struct
{	O
inflate_codes_mode	enum
mode	pointer
;	O
uInt	int
len	int
;	O
union	O
{	O
struct	O
{	O
inflate_huft	struct
*	O
tree	pointer
;	O
uInt	int
need	int
;	O
}	O
code	struct
;	O
uInt	int
lit	int
;	O
struct	O
{	O
uInt	int
get	int
;	O
uInt	int
dist	int
;	O
}	O
copy	struct
;	O
}	O
sub	union
;	O
Byte	char
lbits	char
;	O
Byte	char
dbits	char
;	O
inflate_huft	struct
*	O
ltree	pointer
;	O
inflate_huft	struct
*	O
dtree	pointer
;	O
}	O
;	O
inflate_codes_statef	struct
*	O
inflate_codes_new	function
(	O
bl	int
,	O
bd	int
,	O
tl	pointer
,	O
td	pointer
,	O
z	pointer
)	O
uInt	int
bl	int
,	O
bd	int
;	O
inflate_huft	struct
*	O
tl	pointer
;	O
inflate_huft	struct
*	O
td	pointer
;	O
z_streamp	pointer
z	pointer
;	O
{	O
inflate_codes_statef	struct
*	O
c	int
;	O
if	O
(	O
(	O
c	int
=	O
(	O
inflate_codes_statef	struct
*	O
)	O
ZALLOC	O
(	O
z	pointer
,	O
1	int
,	O
sizeof	O
(	O
struct	O
inflate_codes_state	struct
)	O
)	O
)	O
!=	O
Z_NULL	int
)	O
{	O
c	int
->	O
mode	pointer
=	O
START	int
;	O
c	int
->	O
lbits	char
=	O
(	O
Byte	char
)	O
bl	int
;	O
c	int
->	O
dbits	char
=	O
(	O
Byte	char
)	O
bd	int
;	O
c	int
->	O
ltree	pointer
=	O
tl	pointer
;	O
c	int
->	O
dtree	pointer
=	O
td	pointer
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       codes new\n"	pointer
)	O
)	O
;	O
}	O
return	O
c	int
;	O
}	O
int	O
inflate_codes	function
(	O
s	pointer
,	O
z	pointer
,	O
r	int
)	O
inflate_blocks_statef	struct
*	O
s	pointer
;	O
z_streamp	pointer
z	pointer
;	O
int	O
r	int
;	O
{	O
uInt	int
j	int
;	O
inflate_huft	struct
*	O
t	pointer
;	O
uInt	int
e	int
;	O
uLong	long
b	long
;	O
uInt	int
k	int
;	O
Bytef	char
*	O
p	pointer
;	O
uInt	int
n	int
;	O
Bytef	char
*	O
q	pointer
;	O
uInt	int
m	int
;	O
Bytef	char
*	O
f	pointer
;	O
inflate_codes_statef	struct
*	O
c	int
=	O
s	pointer
->	O
sub	union
.	O
decode	struct
.	O
codes	pointer
;	O
LOAD	O
while	O
(	O
1	int
)	O
switch	O
(	O
c	int
->	O
mode	pointer
)	O
{	O
case	O
START	int
:	O
if	O
(	O
m	int
>=	O
258	int
&&	O
n	int
>=	O
10	int
)	O
{	O
UPDATE	O
r	int
=	O
inflate_fast	function
(	O
c	int
->	O
lbits	char
,	O
c	int
->	O
dbits	char
,	O
c	int
->	O
ltree	pointer
,	O
c	int
->	O
dtree	pointer
,	O
s	pointer
,	O
z	pointer
)	O
;	O
LOAD	O
if	O
(	O
r	int
!=	O
Z_OK	int
)	O
{	O
c	int
->	O
mode	pointer
=	O
r	int
==	O
Z_STREAM_END	int
?	O
WASH	int
:	O
BADCODE	int
;	O
break	O
;	O
}	O
}	O
c	int
->	O
sub	union
.	O
code	struct
.	O
need	int
=	O
c	int
->	O
lbits	char
;	O
c	int
->	O
sub	union
.	O
code	struct
.	O
tree	pointer
=	O
c	int
->	O
ltree	pointer
;	O
c	int
->	O
mode	pointer
=	O
LEN	int
;	O
case	O
LEN	int
:	O
j	int
=	O
c	int
->	O
sub	union
.	O
code	struct
.	O
need	int
;	O
NEEDBITS	O
(	O
j	int
)	O
t	pointer
=	O
c	int
->	O
sub	union
.	O
code	struct
.	O
tree	pointer
+	O
(	O
(	O
uInt	int
)	O
b	long
&	O
inflate_mask	array
[	O
j	int
]	O
)	O
;	O
DUMPBITS	O
(	O
t	pointer
->	O
bits	O
)	O
e	int
=	O
(	O
uInt	int
)	O
(	O
t	pointer
->	O
exop	O
)	O
;	O
if	O
(	O
e	int
==	O
0	int
)	O
{	O
c	int
->	O
sub	union
.	O
lit	int
=	O
t	pointer
->	O
base	int
;	O
Tracevv	O
(	O
(	O
stderr	O
,	O
t	pointer
->	O
base	int
>=	O
0x20	int
&&	O
t	pointer
->	O
base	int
<	O
0x7f	int
?	O
"inflate:         literal '%c'\n"	pointer
:	O
"inflate:         literal 0x%02x\n"	pointer
,	O
t	pointer
->	O
base	int
)	O
)	O
;	O
c	int
->	O
mode	pointer
=	O
LIT	int
;	O
break	O
;	O
}	O
if	O
(	O
e	int
&	O
16	int
)	O
{	O
c	int
->	O
sub	union
.	O
copy	struct
.	O
get	int
=	O
e	int
&	O
15	int
;	O
c	int
->	O
len	int
=	O
t	pointer
->	O
base	int
;	O
c	int
->	O
mode	pointer
=	O
LENEXT	int
;	O
break	O
;	O
}	O
if	O
(	O
(	O
e	int
&	O
64	int
)	O
==	O
0	int
)	O
{	O
c	int
->	O
sub	union
.	O
code	struct
.	O
need	int
=	O
e	int
;	O
c	int
->	O
sub	union
.	O
code	struct
.	O
tree	pointer
=	O
t	pointer
+	O
t	pointer
->	O
base	int
;	O
break	O
;	O
}	O
if	O
(	O
e	int
&	O
32	int
)	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         end of block\n"	pointer
)	O
)	O
;	O
c	int
->	O
mode	pointer
=	O
WASH	int
;	O
break	O
;	O
}	O
c	int
->	O
mode	pointer
=	O
BADCODE	int
;	O
z	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid literal/length code"	pointer
;	O
r	int
=	O
Z_DATA_ERROR	O
;	O
LEAVE	O
case	O
LENEXT	int
:	O
j	int
=	O
c	int
->	O
sub	union
.	O
copy	struct
.	O
get	int
;	O
NEEDBITS	O
(	O
j	int
)	O
c	int
->	O
len	int
+=	O
(	O
uInt	int
)	O
b	long
&	O
inflate_mask	array
[	O
j	int
]	O
;	O
DUMPBITS	O
(	O
j	int
)	O
c	int
->	O
sub	union
.	O
code	struct
.	O
need	int
=	O
c	int
->	O
dbits	char
;	O
c	int
->	O
sub	union
.	O
code	struct
.	O
tree	pointer
=	O
c	int
->	O
dtree	pointer
;	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         length %u\n"	pointer
,	O
c	int
->	O
len	int
)	O
)	O
;	O
c	int
->	O
mode	pointer
=	O
DIST	int
;	O
case	O
DIST	int
:	O
j	int
=	O
c	int
->	O
sub	union
.	O
code	struct
.	O
need	int
;	O
NEEDBITS	O
(	O
j	int
)	O
t	pointer
=	O
c	int
->	O
sub	union
.	O
code	struct
.	O
tree	pointer
+	O
(	O
(	O
uInt	int
)	O
b	long
&	O
inflate_mask	array
[	O
j	int
]	O
)	O
;	O
DUMPBITS	O
(	O
t	pointer
->	O
bits	O
)	O
e	int
=	O
(	O
uInt	int
)	O
(	O
t	pointer
->	O
exop	O
)	O
;	O
if	O
(	O
e	int
&	O
16	int
)	O
{	O
c	int
->	O
sub	union
.	O
copy	struct
.	O
get	int
=	O
e	int
&	O
15	int
;	O
c	int
->	O
sub	union
.	O
copy	struct
.	O
dist	int
=	O
t	pointer
->	O
base	int
;	O
c	int
->	O
mode	pointer
=	O
DISTEXT	int
;	O
break	O
;	O
}	O
if	O
(	O
(	O
e	int
&	O
64	int
)	O
==	O
0	int
)	O
{	O
c	int
->	O
sub	union
.	O
code	struct
.	O
need	int
=	O
e	int
;	O
c	int
->	O
sub	union
.	O
code	struct
.	O
tree	pointer
=	O
t	pointer
+	O
t	pointer
->	O
base	int
;	O
break	O
;	O
}	O
c	int
->	O
mode	pointer
=	O
BADCODE	int
;	O
z	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid distance code"	pointer
;	O
r	int
=	O
Z_DATA_ERROR	O
;	O
LEAVE	O
case	O
DISTEXT	int
:	O
j	int
=	O
c	int
->	O
sub	union
.	O
copy	struct
.	O
get	int
;	O
NEEDBITS	O
(	O
j	int
)	O
c	int
->	O
sub	union
.	O
copy	struct
.	O
dist	int
+=	O
(	O
uInt	int
)	O
b	long
&	O
inflate_mask	array
[	O
j	int
]	O
;	O
DUMPBITS	O
(	O
j	int
)	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         distance %u\n"	pointer
,	O
c	int
->	O
sub	union
.	O
copy	struct
.	O
dist	int
)	O
)	O
;	O
c	int
->	O
mode	pointer
=	O
COPY	int
;	O
case	O
COPY	int
:	O
f	pointer
=	O
(	O
uInt	int
)	O
(	O
q	pointer
-	O
s	pointer
->	O
window	pointer
)	O
<	O
c	int
->	O
sub	union
.	O
copy	struct
.	O
dist	int
?	O
s	pointer
->	O
end	pointer
-	O
(	O
c	int
->	O
sub	union
.	O
copy	struct
.	O
dist	int
-	O
(	O
q	pointer
-	O
s	pointer
->	O
window	pointer
)	O
)	O
:	O
q	pointer
-	O
c	int
->	O
sub	union
.	O
copy	struct
.	O
dist	int
;	O
while	O
(	O
c	int
->	O
len	int
)	O
{	O
NEEDOUT	O
OUTBYTE	O
(	O
*	O
f	pointer
++	O
)	O
if	O
(	O
f	pointer
==	O
s	pointer
->	O
end	pointer
)	O
f	pointer
=	O
s	pointer
->	O
window	pointer
;	O
c	int
->	O
len	int
--	O
;	O
}	O
c	int
->	O
mode	pointer
=	O
START	int
;	O
break	O
;	O
case	O
LIT	int
:	O
NEEDOUT	O
OUTBYTE	O
(	O
c	int
->	O
sub	union
.	O
lit	int
)	O
c	int
->	O
mode	pointer
=	O
START	int
;	O
break	O
;	O
case	O
WASH	int
:	O
if	O
(	O
k	int
>	O
7	int
)	O
{	O
Assert	O
(	O
k	int
<	O
16	int
,	O
"inflate_codes grabbed too many bytes"	pointer
)	O
k	int
-=	O
8	int
;	O
n	int
++	O
;	O
p	pointer
--	O
;	O
}	O
FLUSH	O
if	O
(	O
s	pointer
->	O
read	function
!=	O
s	pointer
->	O
write	function
)	O
LEAVE	O
c	int
->	O
mode	pointer
=	O
END	int
;	O
case	O
END	int
:	O
r	int
=	O
Z_STREAM_END	int
;	O
LEAVE	O
case	O
BADCODE	int
:	O
r	int
=	O
Z_DATA_ERROR	O
;	O
LEAVE	O
default	O
:	O
r	int
=	O
Z_STREAM_ERROR	O
;	O
LEAVE	O
}	O
}	O
void	O
inflate_codes_free	function
(	O
c	int
,	O
z	pointer
)	O
inflate_codes_statef	struct
*	O
c	int
;	O
z_streamp	pointer
z	pointer
;	O
{	O
ZFREE	O
(	O
z	pointer
,	O
c	int
)	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       codes free\n"	pointer
)	O
)	O
;	O
}	O
