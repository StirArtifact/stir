struct	O
locals	struct
{	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
;	O
}	O
;	O
static	O
bool	bool
execute_and_read_po_output	function
(	O
const	O
char	O
*	O
progname	pointer
,	O
const	O
char	O
*	O
prog_path	pointer
,	O
char	O
*	O
*	O
prog_argv	pointer
,	O
void	O
*	O
private_data	pointer
)	O
{	O
struct	O
locals	struct
*	O
l	pointer
=	O
(	O
struct	O
locals	struct
*	O
)	O
private_data	pointer
;	O
pid_t	int
child	int
;	O
int	O
fd	array
[	O
1	int
]	O
;	O
FILE	struct
*	O
fp	pointer
;	O
int	O
exitstatus	int
;	O
child	int
=	O
create_pipe_in	function
(	O
progname	pointer
,	O
prog_path	pointer
,	O
prog_argv	pointer
,	O
NULL	O
,	O
false	int
,	O
true	int
,	O
true	int
,	O
fd	array
)	O
;	O
fp	pointer
=	O
fdopen	function
(	O
fd	array
[	O
0	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"fdopen() failed"	pointer
)	O
)	O
;	O
l	pointer
->	O
mdlp	pointer
=	O
read_catalog_stream	function
(	O
fp	pointer
,	O
"(pipe)"	pointer
,	O
"(pipe)"	pointer
,	O
&	O
input_format_po	struct
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
exitstatus	int
=	O
wait_subprocess	function
(	O
child	int
,	O
progname	pointer
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s subprocess failed with exit code %d"	pointer
)	O
,	O
progname	pointer
,	O
exitstatus	int
)	O
;	O
return	O
false	int
;	O
}	O
void	O
read_resources_file	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
const	O
char	O
*	O
args	pointer
[	O
2	int
]	O
;	O
const	O
char	O
*	O
gettextexedir	pointer
;	O
const	O
char	O
*	O
gettextlibdir	pointer
;	O
char	O
*	O
assembly_path	pointer
;	O
const	O
char	O
*	O
libdirs	pointer
[	O
1	int
]	O
;	O
struct	O
locals	struct
locals	struct
;	O
args	pointer
[	O
0	int
]	O
=	O
filename	pointer
;	O
args	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
gettextexedir	pointer
=	O
getenv	function
(	O
"GETTEXTCSHARPEXEDIR"	pointer
)	O
;	O
if	O
(	O
gettextexedir	pointer
==	O
NULL	O
||	O
gettextexedir	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
gettextexedir	pointer
=	O
relocate	O
(	O
LIBDIR	O
"/gettext"	pointer
)	O
;	O
gettextlibdir	pointer
=	O
getenv	function
(	O
"GETTEXTCSHARPLIBDIR"	pointer
)	O
;	O
if	O
(	O
gettextlibdir	pointer
==	O
NULL	O
||	O
gettextlibdir	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
gettextlibdir	pointer
=	O
relocate	O
(	O
LIBDIR	O
)	O
;	O
assembly_path	pointer
=	O
xconcatenated_filename	function
(	O
gettextexedir	pointer
,	O
"msgunfmt.net"	pointer
,	O
".exe"	pointer
)	O
;	O
libdirs	pointer
[	O
0	int
]	O
=	O
gettextlibdir	pointer
;	O
if	O
(	O
execute_csharp_program	function
(	O
assembly_path	pointer
,	O
libdirs	pointer
,	O
1	int
,	O
args	pointer
,	O
verbose	bool
,	O
false	int
,	O
execute_and_read_po_output	function
,	O
&	O
locals	struct
)	O
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
{	O
message_list_ty	struct
*	O
read_mlp	pointer
=	O
locals	struct
.	O
mdlp	pointer
->	O
item	pointer
[	O
0	int
]	O
->	O
messages	pointer
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
read_mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
message_list_append	function
(	O
mlp	pointer
,	O
read_mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
}	O
free	function
(	O
assembly_path	pointer
)	O
;	O
}	O
