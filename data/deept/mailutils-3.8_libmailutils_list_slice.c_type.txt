struct	O
slice_info	struct
{	O
size_t	long
cur	long
;	O
size_t	long
*	O
posv	pointer
;	O
size_t	long
posc	long
;	O
size_t	long
idx	long
;	O
int	O
(	O
*	O
dup_item	pointer
)	O
(	O
void	O
*	O
*	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
;	O
void	O
*	O
dup_data	pointer
;	O
int	O
err	int
;	O
}	O
;	O
static	O
int	O
_slice_mapper	function
(	O
void	O
*	O
*	O
itmv	pointer
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	pointer
)	O
{	O
struct	O
slice_info	struct
*	O
si	pointer
=	O
call_data	pointer
;	O
size_t	long
cur	long
=	O
si	pointer
->	O
cur	long
++	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
cur	long
<	O
si	pointer
->	O
posv	pointer
[	O
si	pointer
->	O
idx	long
]	O
)	O
return	O
MU_LIST_MAP_SKIP	int
;	O
if	O
(	O
si	pointer
->	O
idx	long
+	O
1	int
<	O
si	pointer
->	O
posc	long
&&	O
cur	long
>	O
si	pointer
->	O
posv	pointer
[	O
si	pointer
->	O
idx	long
+	O
1	int
]	O
)	O
{	O
si	pointer
->	O
idx	long
+=	O
2	int
;	O
if	O
(	O
si	pointer
->	O
idx	long
>=	O
si	pointer
->	O
posc	long
)	O
return	O
MU_LIST_MAP_STOP	int
|	O
MU_LIST_MAP_SKIP	int
;	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
si	pointer
->	O
dup_item	pointer
&&	O
itmv	pointer
[	O
0	int
]	O
)	O
{	O
void	O
*	O
p	pointer
;	O
int	O
rc	int
=	O
si	pointer
->	O
dup_item	pointer
(	O
&	O
p	pointer
,	O
itmv	pointer
[	O
0	int
]	O
,	O
si	pointer
->	O
dup_data	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
si	pointer
->	O
err	int
=	O
rc	int
;	O
return	O
MU_LIST_MAP_STOP	int
|	O
MU_LIST_MAP_SKIP	int
;	O
}	O
itmv	pointer
[	O
0	int
]	O
=	O
p	pointer
;	O
}	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
static	O
int	O
poscmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
size_t	long
posa	long
=	O
*	O
(	O
size_t	long
*	O
)	O
a	pointer
;	O
size_t	long
posb	long
=	O
*	O
(	O
size_t	long
*	O
)	O
b	pointer
;	O
if	O
(	O
posa	long
<	O
posb	long
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
posa	long
>	O
posb	long
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_list_slice_dup	function
(	O
mu_list_t	pointer
*	O
pdest	pointer
,	O
mu_list_t	pointer
list	pointer
,	O
size_t	long
*	O
posv	pointer
,	O
size_t	long
posc	long
,	O
int	O
(	O
*	O
dup_item	pointer
)	O
(	O
void	O
*	O
*	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
dup_data	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
slice_info	struct
si	pointer
;	O
mu_list_t	pointer
dest	pointer
;	O
si	pointer
.	O
cur	long
=	O
0	int
;	O
si	pointer
.	O
idx	long
=	O
0	int
;	O
si	pointer
.	O
posv	pointer
=	O
posv	pointer
;	O
si	pointer
.	O
posc	long
=	O
posc	long
;	O
si	pointer
.	O
dup_item	pointer
=	O
dup_item	pointer
;	O
si	pointer
.	O
dup_data	pointer
=	O
dup_data	pointer
;	O
si	pointer
.	O
err	int
=	O
0	int
;	O
qsort	function
(	O
posv	pointer
,	O
posc	long
,	O
sizeof	O
(	O
posv	pointer
[	O
0	int
]	O
)	O
,	O
poscmp	function
)	O
;	O
rc	int
=	O
mu_list_map	function
(	O
list	pointer
,	O
_slice_mapper	function
,	O
&	O
si	pointer
,	O
1	int
,	O
&	O
dest	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
si	pointer
.	O
err	int
)	O
{	O
mu_list_destroy	function
(	O
&	O
dest	pointer
)	O
;	O
rc	int
=	O
si	pointer
.	O
err	int
;	O
}	O
else	O
{	O
if	O
(	O
dup_item	pointer
)	O
mu_list_set_destroy_item	function
(	O
dest	pointer
,	O
list	pointer
->	O
destroy_item	pointer
)	O
;	O
*	O
pdest	pointer
=	O
dest	pointer
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_list_slice	function
(	O
mu_list_t	pointer
*	O
pdest	pointer
,	O
mu_list_t	pointer
list	pointer
,	O
size_t	long
*	O
posv	pointer
,	O
size_t	long
posc	long
)	O
{	O
return	O
mu_list_slice_dup	function
(	O
pdest	pointer
,	O
list	pointer
,	O
posv	pointer
,	O
posc	long
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
