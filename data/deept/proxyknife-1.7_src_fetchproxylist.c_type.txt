char	O
*	O
td	function
(	O
char	O
*	O
q	pointer
,	O
char	O
*	O
*	O
data	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
len	int
;	O
p	pointer
=	O
strstr	function
(	O
q	pointer
,	O
"<td"	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
q	pointer
=	O
strstr	function
(	O
p	pointer
,	O
">"	pointer
)	O
+	O
1	int
;	O
if	O
(	O
q	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
p	pointer
=	O
strstr	function
(	O
q	pointer
,	O
"</td>"	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
len	int
=	O
p	pointer
-	O
q	pointer
;	O
*	O
data	pointer
=	O
xmalloc	function
(	O
len	int
+	O
1	int
)	O
;	O
memmove	function
(	O
*	O
data	pointer
,	O
q	pointer
,	O
len	int
)	O
;	O
(	O
*	O
data	pointer
)	O
[	O
len	int
]	O
=	O
'\x0'	O
;	O
q	pointer
=	O
p	pointer
+	O
strlen	function
(	O
"</td>"	pointer
)	O
;	O
return	O
q	pointer
;	O
}	O
void	O
fetchproxylist	function
(	O
char	O
*	O
proxyknife_in	pointer
)	O
{	O
int	O
ret	int
;	O
int	O
sockfd	int
;	O
int	O
n	long
,	O
numbytes	int
,	O
total	int
;	O
char	O
*	O
host	pointer
,	O
*	O
path	pointer
,	O
*	O
buf	pointer
;	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
char	O
*	O
data	pointer
;	O
struct	O
sockaddr_in	struct
addr	pointer
;	O
char	O
*	O
url	pointer
;	O
char	O
*	O
proxylist	pointer
;	O
struct	O
hostent	struct
*	O
h	pointer
;	O
url	pointer
=	O
proxyknife_in	pointer
;	O
p	pointer
=	O
strchr	function
(	O
url	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
n	long
=	O
strlen	function
(	O
url	pointer
)	O
;	O
host	pointer
=	O
xmalloc	function
(	O
n	long
+	O
1	int
)	O
;	O
memmove	function
(	O
host	pointer
,	O
url	pointer
,	O
n	long
)	O
;	O
host	pointer
[	O
n	long
]	O
=	O
'\x0'	O
;	O
path	pointer
=	O
xmalloc	function
(	O
2	int
)	O
;	O
path	pointer
[	O
0	int
]	O
=	O
'/'	O
;	O
path	pointer
[	O
1	int
]	O
=	O
'\x0'	O
;	O
}	O
else	O
{	O
n	long
=	O
p	pointer
-	O
url	pointer
;	O
host	pointer
=	O
xmalloc	function
(	O
n	long
+	O
1	int
)	O
;	O
memmove	function
(	O
host	pointer
,	O
url	pointer
,	O
n	long
)	O
;	O
host	pointer
[	O
n	long
]	O
=	O
'\x0'	O
;	O
n	long
=	O
strlen	function
(	O
p	pointer
)	O
;	O
path	pointer
=	O
xmalloc	function
(	O
n	long
+	O
1	int
)	O
;	O
memmove	function
(	O
path	pointer
,	O
p	pointer
,	O
n	long
)	O
;	O
path	pointer
[	O
n	long
]	O
=	O
'\x0'	O
;	O
}	O
if	O
(	O
debug	int
)	O
printf	function
(	O
"Connect to host %s to fetch %s\n"	pointer
,	O
host	pointer
,	O
path	pointer
)	O
;	O
sockfd	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
sockfd	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"socket"	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
MY_CONNECT	function
(	O
sockfd	int
,	O
host	pointer
,	O
"80"	pointer
)	O
;	O
n	long
=	O
strlen	function
(	O
"GET "	pointer
" HTTP/1.0"	pointer
"\r\n"	pointer
"Host: "	pointer
"\r\n"	pointer
"\r\n"	pointer
)	O
;	O
n	long
+=	O
strlen	function
(	O
path	pointer
)	O
;	O
n	long
+=	O
strlen	function
(	O
host	pointer
)	O
;	O
buf	pointer
=	O
xmalloc	function
(	O
n	long
+	O
1	int
)	O
;	O
snprintf	function
(	O
buf	pointer
,	O
n	long
+	O
1	int
,	O
"GET %s HTTP/1.0\r\nHost: %s\r\n\r\n"	pointer
,	O
path	pointer
,	O
host	pointer
)	O
;	O
if	O
(	O
write	pointer
(	O
sockfd	int
,	O
buf	pointer
,	O
n	long
)	O
!=	O
n	long
)	O
{	O
perror	function
(	O
__FILE__	O
"write"	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
buf	pointer
)	O
;	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
host	pointer
)	O
;	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
path	pointer
)	O
;	O
n	long
=	O
1024	int
;	O
buf	pointer
=	O
xmalloc	function
(	O
n	long
)	O
;	O
total	int
=	O
0	int
;	O
do	O
{	O
numbytes	int
=	O
read	pointer
(	O
sockfd	int
,	O
buf	pointer
+	O
total	int
,	O
n	long
)	O
;	O
if	O
(	O
numbytes	int
>	O
0	int
)	O
total	int
+=	O
numbytes	int
;	O
else	O
break	O
;	O
buf	pointer
=	O
xrealloc	function
(	O
buf	pointer
,	O
total	int
+	O
n	long
)	O
;	O
}	O
while	O
(	O
1	int
)	O
;	O
if	O
(	O
numbytes	int
<	O
0	int
)	O
{	O
if	O
(	O
debug	int
)	O
{	O
perror	function
(	O
"read"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
__FILE__	O
": fetchproxylist: error above!\n"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
total	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
__FILE__	O
": fetchproxylist: No response!\n"	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
buf	pointer
=	O
xrealloc	function
(	O
buf	pointer
,	O
total	int
)	O
;	O
if	O
(	O
debug	int
)	O
{	O
write	pointer
(	O
1	int
,	O
buf	pointer
,	O
total	int
)	O
;	O
write	pointer
(	O
1	int
,	O
"\n"	pointer
,	O
1	int
)	O
;	O
}	O
q	pointer
=	O
buf	pointer
;	O
proxylist	pointer
=	O
xmalloc	function
(	O
2	int
)	O
;	O
total	int
=	O
0	int
;	O
if	O
(	O
!	O
strncmp	function
(	O
proxyknife_in	pointer
,	O
PROXYKNIFE_DEFAULT_LISTSITE	pointer
,	O
strlen	function
(	O
PROXYKNIFE_DEFAULT_LISTSITE	pointer
)	O
)	O
)	O
{	O
q	pointer
=	O
strstr	function
(	O
q	pointer
,	O
"<pre>"	pointer
)	O
;	O
if	O
(	O
q	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
__FILE__	O
": fetchproxylist: no <pre> on "	pointer
PROXYKNIFE_DEFAULT_LISTSITE	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
q	pointer
+=	O
strlen	function
(	O
"<pre>"	pointer
)	O
;	O
p	pointer
=	O
strstr	function
(	O
q	pointer
,	O
"</pre>"	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
__FILE__	O
": fetchproxylist: no </pre> after </pre> on "	pointer
PROXYKNIFE_DEFAULT_LISTSITE	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
total	int
=	O
p	pointer
-	O
q	pointer
;	O
proxylist	pointer
=	O
xrealloc	function
(	O
proxylist	pointer
,	O
total	int
)	O
;	O
memmove	function
(	O
proxylist	pointer
,	O
q	pointer
,	O
total	int
)	O
;	O
}	O
else	O
{	O
while	O
(	O
1	int
)	O
{	O
q	pointer
=	O
td	function
(	O
q	pointer
,	O
&	O
data	pointer
)	O
;	O
if	O
(	O
q	pointer
==	O
NULL	O
)	O
break	O
;	O
p	pointer
=	O
strstr	function
(	O
data	pointer
,	O
"&nbsp;"	pointer
)	O
;	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
data	pointer
)	O
;	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
{	O
q	pointer
=	O
td	function
(	O
q	pointer
,	O
&	O
data	pointer
)	O
;	O
if	O
(	O
q	pointer
==	O
NULL	O
)	O
break	O
;	O
else	O
{	O
if	O
(	O
debug	int
)	O
printf	function
(	O
"Host: %s\n"	pointer
,	O
data	pointer
)	O
;	O
n	long
=	O
strlen	function
(	O
data	pointer
)	O
;	O
proxylist	pointer
=	O
xrealloc	function
(	O
proxylist	pointer
,	O
total	int
+	O
n	long
)	O
;	O
if	O
(	O
proxylist	pointer
==	O
NULL	O
)	O
{	O
perror	function
(	O
"proxylist ralloc"	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
memmove	function
(	O
proxylist	pointer
+	O
total	int
,	O
data	pointer
,	O
n	long
)	O
;	O
total	int
+=	O
n	long
;	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
data	pointer
)	O
;	O
}	O
q	pointer
=	O
td	function
(	O
q	pointer
,	O
&	O
data	pointer
)	O
;	O
if	O
(	O
q	pointer
==	O
NULL	O
)	O
break	O
;	O
else	O
{	O
if	O
(	O
debug	int
)	O
printf	function
(	O
"Port: %s\n"	pointer
,	O
data	pointer
)	O
;	O
n	long
=	O
strlen	function
(	O
data	pointer
)	O
;	O
proxylist	pointer
=	O
xrealloc	function
(	O
proxylist	pointer
,	O
total	int
+	O
n	long
+	O
1	int
+	O
1	int
)	O
;	O
proxylist	pointer
[	O
total	int
]	O
=	O
':'	O
;	O
total	int
++	O
;	O
memmove	function
(	O
proxylist	pointer
+	O
total	int
,	O
data	pointer
,	O
n	long
)	O
;	O
total	int
+=	O
n	long
;	O
proxylist	pointer
[	O
total	int
]	O
=	O
'\n'	O
;	O
total	int
++	O
;	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
data	pointer
)	O
;	O
}	O
q	pointer
=	O
td	function
(	O
q	pointer
,	O
&	O
data	pointer
)	O
;	O
if	O
(	O
q	pointer
==	O
NULL	O
)	O
break	O
;	O
else	O
{	O
if	O
(	O
debug	int
)	O
printf	function
(	O
"Timeout: %s\n"	pointer
,	O
data	pointer
)	O
;	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
data	pointer
)	O
;	O
}	O
}	O
}	O
}	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
buf	pointer
)	O
;	O
if	O
(	O
total	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
__FILE__	O
": fetchproxylist: No list found,dump:\n"	pointer
)	O
;	O
if	O
(	O
proxylist	pointer
)	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
proxylist	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
proxyknife_in_buffer	pointer
=	O
proxylist	pointer
;	O
proxyknife_in_buffer	pointer
=	O
xrealloc	function
(	O
proxyknife_in_buffer	pointer
,	O
total	int
+	O
1	int
)	O
;	O
proxyknife_in_buffer	pointer
[	O
total	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
debug	int
)	O
{	O
printf	function
(	O
"OK!Get proxylist in %d bytes from %s\n"	pointer
,	O
total	int
,	O
proxyknife_in	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
proxyknife_in_buffer	pointer
)	O
;	O
}	O
}	O
char	O
*	O
sgetaline	function
(	O
char	O
*	O
s	pointer
,	O
struct	O
thread_mem	struct
*	O
thread_mem	struct
)	O
{	O
int	O
len	int
;	O
char	O
*	O
p	pointer
;	O
len	int
=	O
strlen	function
(	O
s	pointer
)	O
;	O
p	pointer
=	O
strchr	function
(	O
s	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
__FILE__	O
": sgetaline: End of buffer\n"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
p	pointer
++	O
;	O
len	int
=	O
p	pointer
-	O
s	pointer
;	O
thread_mem	struct
->	O
line	pointer
=	O
pmalloc	function
(	O
len	int
+	O
1	int
,	O
thread_mem	struct
)	O
;	O
if	O
(	O
thread_mem	struct
->	O
line	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
__FILE__	O
": sgetaline:memory error"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	function
(	O
thread_mem	struct
->	O
line	pointer
,	O
s	pointer
,	O
len	int
)	O
;	O
thread_mem	struct
->	O
line	pointer
[	O
len	int
]	O
=	O
'\x0'	O
;	O
return	O
p	pointer
;	O
}	O
