struct	O
top	struct
*	O
top	struct
;	O
static	O
char	O
const	O
quietarg	array
[	O
]	O
=	O
"-q"	pointer
;	O
static	O
char	O
const	O
*	O
expandarg	pointer
,	O
*	O
suffixarg	pointer
,	O
*	O
versionarg	pointer
,	O
*	O
zonearg	pointer
;	O
static	O
char	O
const	O
*	O
*	O
joinlist	pointer
;	O
static	O
FILE	struct
*	O
neworkptr	pointer
;	O
static	O
int	O
exitstatus	int
;	O
static	O
bool	bool
forceflag	bool
;	O
static	O
int	O
lastjoin	int
;	O
struct	O
jstuff	struct
{	O
struct	O
divvy	struct
*	O
jstuff	struct
;	O
struct	O
link	struct
head	pointer
,	O
*	O
tp	pointer
;	O
struct	O
symdef	struct
*	O
merge	function
;	O
}	O
;	O
static	O
struct	O
jstuff	struct
jstuff	struct
;	O
static	O
int	O
lockflag	bool
;	O
static	O
bool	bool
mtimeflag	bool
;	O
static	O
struct	O
delta	struct
*	O
targetdelta	pointer
;	O
static	O
struct	O
stat	struct
workstat	struct
;	O
static	O
void	O
cleanup	function
(	O
void	O
)	O
{	O
FILE	struct
*	O
mstdout	pointer
=	O
MANI	O
(	O
standard_output	pointer
)	O
;	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exitstatus	int
=	O
EXIT_FAILURE	int
;	O
fro_zclose	function
(	O
&	O
FLOW	O
(	O
from	pointer
)	O
)	O
;	O
ORCSclose	function
(	O
)	O
;	O
if	O
(	O
FLOW	O
(	O
from	pointer
)	O
&&	O
STDIO_P	O
(	O
FLOW	O
(	O
from	pointer
)	O
)	O
&&	O
FLOW	O
(	O
res	pointer
)	O
&&	O
FLOW	O
(	O
res	pointer
)	O
!=	O
mstdout	pointer
)	O
Ozclose	function
(	O
&	O
FLOW	O
(	O
res	pointer
)	O
)	O
;	O
if	O
(	O
neworkptr	pointer
!=	O
mstdout	pointer
)	O
Ozclose	function
(	O
&	O
neworkptr	pointer
)	O
;	O
dirtempunlink	function
(	O
)	O
;	O
}	O
static	O
exiting	O
void	O
exiterr	pointer
(	O
void	O
)	O
{	O
ORCSerror	function
(	O
)	O
;	O
dirtempunlink	function
(	O
)	O
;	O
tempunlink	function
(	O
)	O
;	O
exit_failurefully	function
(	O
)	O
;	O
}	O
static	O
bool	bool
rmworkfile	function
(	O
void	O
)	O
{	O
if	O
(	O
workstat	struct
.	O
st_mode	int
&	O
(	O
S_IWUSR	O
|	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
&&	O
!	O
forceflag	bool
)	O
{	O
char	O
const	O
*	O
mani_filename	pointer
=	O
MANI	O
(	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
yesorno	function
(	O
false	int
,	O
"writable %s exists%s; remove it? [ny](n): "	pointer
,	O
mani_filename	pointer
,	O
(	O
stat_mine_p	function
(	O
&	O
workstat	struct
)	O
?	O
""	pointer
:	O
", and you do not own it"	pointer
)	O
)	O
)	O
{	O
if	O
(	O
!	O
BE	O
(	O
quiet	bool
)	O
&&	O
ttystdin	function
(	O
)	O
)	O
PERR	O
(	O
"checkout aborted"	pointer
)	O
;	O
else	O
PERR	O
(	O
"writable %s exists; checkout aborted"	pointer
,	O
mani_filename	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
return	O
true	int
;	O
}	O
static	O
int	O
rmlock	function
(	O
struct	O
delta	struct
const	O
*	O
delta	struct
)	O
{	O
struct	O
link	struct
box	pointer
,	O
*	O
tp	pointer
;	O
struct	O
rcslock	struct
const	O
*	O
rl	pointer
;	O
box	pointer
.	O
next	pointer
=	O
GROK	O
(	O
locks	pointer
)	O
;	O
if	O
(	O
!	O
(	O
tp	pointer
=	O
lock_delta_memq	O
(	O
&	O
box	pointer
,	O
delta	struct
)	O
)	O
)	O
return	O
0	int
;	O
rl	pointer
=	O
tp	pointer
->	O
next	pointer
->	O
entry	pointer
;	O
if	O
(	O
!	O
caller_login_p	function
(	O
rl	pointer
->	O
login	pointer
)	O
)	O
{	O
RERR	O
(	O
"revision %s locked by %s; use co -r or rcs -u"	pointer
,	O
delta	struct
->	O
num	pointer
,	O
rl	pointer
->	O
login	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
lock_drop	function
(	O
&	O
box	pointer
,	O
tp	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
void	O
jpush	function
(	O
char	O
const	O
*	O
rev	pointer
)	O
{	O
jstuff	struct
.	O
tp	pointer
=	O
extend	function
(	O
jstuff	struct
.	O
tp	pointer
,	O
rev	pointer
,	O
jstuff	struct
.	O
jstuff	struct
)	O
;	O
lastjoin	int
++	O
;	O
}	O
static	O
char	O
*	O
addjoin	function
(	O
char	O
*	O
joinrev	pointer
)	O
{	O
register	O
char	O
*	O
j	pointer
;	O
register	O
struct	O
delta	struct
*	O
d	pointer
;	O
char	O
terminator	char
;	O
struct	O
cbuf	struct
numrev	struct
;	O
j	pointer
=	O
joinrev	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
*	O
j	pointer
++	O
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
0	int
:	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
case	O
'\n'	O
:	O
case	O
':'	O
:	O
case	O
','	O
:	O
case	O
';'	O
:	O
break	O
;	O
}	O
break	O
;	O
}	O
terminator	char
=	O
*	O
--	O
j	pointer
;	O
*	O
j	pointer
=	O
'\0'	O
;	O
d	pointer
=	O
NULL	O
;	O
if	O
(	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct
,	O
joinrev	pointer
)	O
)	O
d	pointer
=	O
delta_from_ref	function
(	O
numrev	struct
.	O
string	pointer
)	O
;	O
*	O
j	pointer
=	O
terminator	char
;	O
if	O
(	O
d	pointer
)	O
{	O
jpush	function
(	O
d	pointer
->	O
num	pointer
)	O
;	O
return	O
j	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
char	O
const	O
*	O
getancestor	function
(	O
char	O
const	O
*	O
r1	pointer
,	O
char	O
const	O
*	O
r2	pointer
)	O
{	O
char	O
const	O
*	O
t1	pointer
,	O
*	O
t2	pointer
;	O
int	O
l1	int
,	O
l2	int
,	O
l3	int
;	O
char	O
const	O
*	O
r	pointer
;	O
l1	int
=	O
countnumflds	function
(	O
r1	pointer
)	O
;	O
l2	int
=	O
countnumflds	function
(	O
r2	pointer
)	O
;	O
if	O
(	O
(	O
2	int
<	O
l1	int
||	O
2	int
<	O
l2	int
)	O
&&	O
!	O
NUM_EQ	O
(	O
r1	pointer
,	O
r2	pointer
)	O
)	O
{	O
l3	int
=	O
0	int
;	O
while	O
(	O
NUMF_EQ	O
(	O
1	int
+	O
l3	int
,	O
r1	pointer
,	O
r2	pointer
)	O
&&	O
NUMF_EQ	O
(	O
2	int
+	O
l3	int
,	O
r1	pointer
,	O
r2	pointer
)	O
)	O
l3	int
+=	O
2	int
;	O
if	O
(	O
l3	int
==	O
0	int
)	O
{	O
t1	pointer
=	O
TAKE	O
(	O
l1	int
>	O
2	int
?	O
2	int
:	O
l1	int
,	O
r1	pointer
)	O
;	O
t2	pointer
=	O
TAKE	O
(	O
l2	int
>	O
2	int
?	O
2	int
:	O
l2	int
,	O
r2	pointer
)	O
;	O
r	pointer
=	O
NUM_LT	O
(	O
t1	pointer
,	O
t2	pointer
)	O
?	O
t1	pointer
:	O
t2	pointer
;	O
if	O
(	O
!	O
NUM_EQ	O
(	O
r	pointer
,	O
r1	pointer
)	O
&&	O
!	O
NUM_EQ	O
(	O
r	pointer
,	O
r2	pointer
)	O
)	O
return	O
str_save	function
(	O
r	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
NUMF_EQ	O
(	O
1	int
+	O
l3	int
,	O
r1	pointer
,	O
r2	pointer
)	O
)	O
return	O
str_save	function
(	O
TAKE	O
(	O
l3	int
,	O
r1	pointer
)	O
)	O
;	O
}	O
RERR	O
(	O
"common ancestor of %s and %s undefined"	pointer
,	O
r1	pointer
,	O
r2	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
bool	bool
preparejoin	function
(	O
register	O
char	O
*	O
j	pointer
)	O
{	O
bool	bool
rv	bool
=	O
true	int
;	O
jstuff	struct
.	O
jstuff	struct
=	O
make_space	function
(	O
"jstuff"	pointer
)	O
;	O
jstuff	struct
.	O
head	pointer
.	O
next	pointer
=	O
NULL	O
;	O
jstuff	struct
.	O
tp	pointer
=	O
&	O
jstuff	struct
.	O
head	pointer
;	O
if	O
(	O
!	O
jstuff	struct
.	O
merge	function
)	O
{	O
jstuff	struct
.	O
merge	function
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
symdef	struct
)	O
;	O
jstuff	struct
.	O
merge	function
->	O
meaningful	pointer
=	O
"merge"	pointer
;	O
}	O
lastjoin	int
=	O
-	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
while	O
(	O
(	O
*	O
j	pointer
==	O
' '	O
)	O
||	O
(	O
*	O
j	pointer
==	O
'\t'	O
)	O
||	O
(	O
*	O
j	pointer
==	O
','	O
)	O
)	O
j	pointer
++	O
;	O
if	O
(	O
*	O
j	pointer
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
j	pointer
=	O
addjoin	function
(	O
j	pointer
)	O
)	O
)	O
return	O
false	int
;	O
while	O
(	O
(	O
*	O
j	pointer
==	O
' '	O
)	O
||	O
(	O
*	O
j	pointer
==	O
'\t'	O
)	O
)	O
j	pointer
++	O
;	O
if	O
(	O
*	O
j	pointer
==	O
':'	O
)	O
{	O
j	pointer
++	O
;	O
while	O
(	O
(	O
*	O
j	pointer
==	O
' '	O
)	O
||	O
(	O
*	O
j	pointer
==	O
'\t'	O
)	O
)	O
j	pointer
++	O
;	O
if	O
(	O
*	O
j	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
!	O
(	O
j	pointer
=	O
addjoin	function
(	O
j	pointer
)	O
)	O
)	O
return	O
false	int
;	O
}	O
else	O
{	O
RFATAL	O
(	O
"join pair incomplete"	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
lastjoin	int
==	O
0	int
)	O
{	O
char	O
const	O
*	O
two	pointer
=	O
jstuff	struct
.	O
tp	pointer
->	O
entry	pointer
;	O
if	O
(	O
!	O
(	O
jstuff	struct
.	O
tp	pointer
->	O
entry	pointer
=	O
getancestor	function
(	O
targetdelta	pointer
->	O
num	pointer
,	O
two	pointer
)	O
)	O
)	O
{	O
rv	bool
=	O
false	int
;	O
goto	O
done	bool
;	O
}	O
jpush	function
(	O
two	pointer
)	O
;	O
}	O
else	O
{	O
RFATAL	O
(	O
"join pair incomplete"	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
lastjoin	int
<	O
1	int
)	O
RFATAL	O
(	O
"empty join"	pointer
)	O
;	O
done	bool
:	O
joinlist	pointer
=	O
pointer_array	function
(	O
PLEXUS	O
,	O
1	int
+	O
lastjoin	int
)	O
;	O
jstuff	struct
.	O
tp	pointer
=	O
jstuff	struct
.	O
head	pointer
.	O
next	pointer
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<=	O
lastjoin	int
;	O
i	int
++	O
,	O
jstuff	struct
.	O
tp	pointer
=	O
jstuff	struct
.	O
tp	pointer
->	O
next	pointer
)	O
joinlist	pointer
[	O
i	int
]	O
=	O
jstuff	struct
.	O
tp	pointer
->	O
entry	pointer
;	O
close_space	function
(	O
jstuff	struct
.	O
jstuff	struct
)	O
;	O
jstuff	struct
.	O
jstuff	struct
=	O
NULL	O
;	O
return	O
rv	bool
;	O
}	O
static	O
bool	bool
buildjoin	function
(	O
char	O
const	O
*	O
initialfile	pointer
)	O
{	O
char	O
const	O
*	O
rev2	pointer
,	O
*	O
rev3	pointer
;	O
int	O
i	int
;	O
char	O
const	O
*	O
cov	array
[	O
10	int
]	O
,	O
*	O
mergev	array
[	O
11	int
]	O
;	O
char	O
const	O
*	O
*	O
p	pointer
;	O
size_t	long
len	char
;	O
char	O
const	O
*	O
subs	pointer
=	O
NULL	O
;	O
rev2	pointer
=	O
maketemp	function
(	O
0	int
)	O
;	O
rev3	pointer
=	O
maketemp	function
(	O
3	int
)	O
;	O
cov	array
[	O
1	int
]	O
=	O
PEER_CO	O
(	O
)	O
;	O
p	pointer
=	O
&	O
cov	array
[	O
3	int
]	O
;	O
if	O
(	O
expandarg	pointer
)	O
*	O
p	pointer
++	O
=	O
expandarg	pointer
;	O
if	O
(	O
suffixarg	pointer
)	O
*	O
p	pointer
++	O
=	O
suffixarg	pointer
;	O
if	O
(	O
versionarg	pointer
)	O
*	O
p	pointer
++	O
=	O
versionarg	pointer
;	O
if	O
(	O
zonearg	pointer
)	O
*	O
p	pointer
++	O
=	O
zonearg	pointer
;	O
*	O
p	pointer
++	O
=	O
quietarg	array
;	O
*	O
p	pointer
++	O
=	O
REPO	O
(	O
filename	pointer
)	O
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
mergev	array
[	O
1	int
]	O
=	O
find_peer_prog	function
(	O
jstuff	struct
.	O
merge	function
)	O
;	O
mergev	array
[	O
2	int
]	O
=	O
mergev	array
[	O
4	int
]	O
=	O
"-L"	pointer
;	O
i	int
=	O
0	int
;	O
while	O
(	O
i	int
<	O
lastjoin	int
)	O
{	O
if	O
(	O
i	int
==	O
0	int
)	O
subs	pointer
=	O
targetdelta	pointer
->	O
num	pointer
;	O
else	O
{	O
ACCF	O
(	O
"%s,%s:%s"	pointer
,	O
subs	pointer
,	O
joinlist	pointer
[	O
i	int
-	O
2	int
]	O
,	O
joinlist	pointer
[	O
i	int
-	O
1	int
]	O
)	O
;	O
subs	pointer
=	O
finish_string	function
(	O
SINGLE	O
,	O
&	O
len	char
)	O
;	O
}	O
diagnose	function
(	O
"revision %s"	pointer
,	O
joinlist	pointer
[	O
i	int
]	O
)	O
;	O
ACCF	O
(	O
"-p%s"	pointer
,	O
joinlist	pointer
[	O
i	int
]	O
)	O
;	O
cov	array
[	O
2	int
]	O
=	O
finish_string	function
(	O
SINGLE	O
,	O
&	O
len	char
)	O
;	O
if	O
(	O
runv	function
(	O
-	O
1	int
,	O
rev2	pointer
,	O
cov	array
)	O
)	O
goto	O
badmerge	O
;	O
diagnose	function
(	O
"revision %s"	pointer
,	O
joinlist	pointer
[	O
i	int
+	O
1	int
]	O
)	O
;	O
ACCF	O
(	O
"-p%s"	pointer
,	O
joinlist	pointer
[	O
i	int
+	O
1	int
]	O
)	O
;	O
cov	array
[	O
2	int
]	O
=	O
finish_string	function
(	O
SINGLE	O
,	O
&	O
len	char
)	O
;	O
if	O
(	O
runv	function
(	O
-	O
1	int
,	O
rev3	pointer
,	O
cov	array
)	O
)	O
goto	O
badmerge	O
;	O
diagnose	function
(	O
"merging..."	pointer
)	O
;	O
mergev	array
[	O
3	int
]	O
=	O
subs	pointer
;	O
mergev	array
[	O
5	int
]	O
=	O
joinlist	pointer
[	O
i	int
+	O
1	int
]	O
;	O
p	pointer
=	O
&	O
mergev	array
[	O
6	int
]	O
;	O
if	O
(	O
BE	O
(	O
quiet	bool
)	O
)	O
*	O
p	pointer
++	O
=	O
quietarg	array
;	O
if	O
(	O
lastjoin	int
<=	O
i	int
+	O
2	int
&&	O
MANI	O
(	O
standard_output	pointer
)	O
)	O
*	O
p	pointer
++	O
=	O
"-p"	pointer
;	O
*	O
p	pointer
++	O
=	O
initialfile	pointer
;	O
*	O
p	pointer
++	O
=	O
rev2	pointer
;	O
*	O
p	pointer
++	O
=	O
rev3	pointer
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
if	O
(	O
DIFF_TROUBLE	int
==	O
runv	function
(	O
-	O
1	int
,	O
NULL	O
,	O
mergev	array
)	O
)	O
goto	O
badmerge	O
;	O
i	int
=	O
i	int
+	O
2	int
;	O
}	O
return	O
true	int
;	O
badmerge	O
:	O
FLOW	O
(	O
erroneousp	bool
)	O
=	O
true	int
;	O
return	O
false	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
a	pointer
,	O
*	O
joinflag	pointer
,	O
*	O
*	O
newargv	pointer
;	O
char	O
const	O
*	O
author	pointer
,	O
*	O
date	pointer
,	O
*	O
rev	pointer
,	O
*	O
state	pointer
;	O
char	O
const	O
*	O
joinname	pointer
,	O
*	O
newdate	pointer
,	O
*	O
neworkname	pointer
;	O
int	O
changelock	int
;	O
int	O
expmode	int
,	O
r	pointer
,	O
workstatstat	int
;	O
bool	bool
tostdout	bool
,	O
Ttimeflag	bool
;	O
char	O
finaldate	array
[	O
datesize	O
]	O
;	O
struct	O
wlink	struct
*	O
deltas	pointer
;	O
const	O
struct	O
program	struct
program	struct
=	O
{	O
.	O
invoke	pointer
=	O
argv	pointer
[	O
0	int
]	O
,	O
.	O
name	pointer
=	O
"co"	pointer
,	O
.	O
help	pointer
=	O
help	pointer
,	O
.	O
exiterr	pointer
=	O
exiterr	pointer
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	function
(	O
&	O
program	struct
)	O
;	O
setrid	function
(	O
)	O
;	O
author	pointer
=	O
date	pointer
=	O
rev	pointer
=	O
state	pointer
=	O
NULL	O
;	O
joinflag	pointer
=	O
NULL	O
;	O
expmode	int
=	O
-	O
1	int
;	O
BE	O
(	O
pe	pointer
)	O
=	O
X_DEFAULT	pointer
;	O
tostdout	bool
=	O
false	int
;	O
Ttimeflag	bool
=	O
false	int
;	O
argc	int
=	O
getRCSINIT	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
newargv	pointer
)	O
;	O
argv	pointer
=	O
newargv	pointer
;	O
while	O
(	O
a	pointer
=	O
*	O
++	O
argv	pointer
,	O
0	int
<	O
--	O
argc	int
&&	O
*	O
a	pointer
++	O
==	O
'-'	O
)	O
{	O
switch	O
(	O
*	O
a	pointer
++	O
)	O
{	O
case	O
'r'	O
:	O
revno	pointer
:	O
if	O
(	O
*	O
a	pointer
)	O
{	O
if	O
(	O
rev	pointer
)	O
PWARN	O
(	O
"redefinition of %s"	pointer
,	O
ks_revno	array
)	O
;	O
rev	pointer
=	O
a	pointer
;	O
}	O
break	O
;	O
case	O
'f'	O
:	O
forceflag	bool
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
'l'	O
:	O
if	O
(	O
lockflag	bool
<	O
0	int
)	O
{	O
PWARN	O
(	O
"-u overridden by -l."	pointer
)	O
;	O
}	O
lockflag	bool
=	O
1	int
;	O
goto	O
revno	pointer
;	O
case	O
'u'	O
:	O
if	O
(	O
0	int
<	O
lockflag	bool
)	O
{	O
PWARN	O
(	O
"-l overridden by -u."	pointer
)	O
;	O
}	O
lockflag	bool
=	O
-	O
1	int
;	O
goto	O
revno	pointer
;	O
case	O
'p'	O
:	O
tostdout	bool
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
'I'	O
:	O
BE	O
(	O
interactive	bool
)	O
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
'd'	O
:	O
if	O
(	O
date	pointer
)	O
redefined	function
(	O
'd'	O
)	O
;	O
str2date	function
(	O
a	pointer
,	O
finaldate	array
)	O
;	O
date	pointer
=	O
finaldate	array
;	O
break	O
;	O
case	O
'j'	O
:	O
if	O
(	O
*	O
a	pointer
)	O
{	O
if	O
(	O
joinflag	pointer
)	O
redefined	function
(	O
'j'	O
)	O
;	O
joinflag	pointer
=	O
a	pointer
;	O
}	O
break	O
;	O
case	O
'M'	O
:	O
mtimeflag	bool
=	O
true	int
;	O
goto	O
revno	pointer
;	O
case	O
's'	O
:	O
if	O
(	O
*	O
a	pointer
)	O
{	O
if	O
(	O
state	pointer
)	O
redefined	function
(	O
's'	O
)	O
;	O
state	pointer
=	O
a	pointer
;	O
}	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
*	O
a	pointer
)	O
goto	O
unknown	O
;	O
Ttimeflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'w'	O
:	O
if	O
(	O
author	pointer
)	O
redefined	function
(	O
'w'	O
)	O
;	O
if	O
(	O
*	O
a	pointer
)	O
author	pointer
=	O
a	pointer
;	O
else	O
author	pointer
=	O
getcaller	function
(	O
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
suffixarg	pointer
=	O
*	O
argv	pointer
;	O
BE	O
(	O
pe	pointer
)	O
=	O
a	pointer
;	O
break	O
;	O
case	O
'V'	O
:	O
versionarg	pointer
=	O
*	O
argv	pointer
;	O
setRCSversion	function
(	O
versionarg	pointer
)	O
;	O
break	O
;	O
case	O
'z'	O
:	O
zonearg	pointer
=	O
*	O
argv	pointer
;	O
zone_set	function
(	O
a	pointer
)	O
;	O
break	O
;	O
case	O
'k'	O
:	O
expandarg	pointer
=	O
*	O
argv	pointer
;	O
if	O
(	O
0	int
<=	O
expmode	int
)	O
redefined	function
(	O
'k'	O
)	O
;	O
if	O
(	O
0	int
<=	O
(	O
expmode	int
=	O
str2expmode	function
(	O
a	pointer
)	O
)	O
)	O
break	O
;	O
default	O
:	O
unknown	O
:	O
bad_option	function
(	O
*	O
argv	pointer
)	O
;	O
}	O
;	O
}	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
cleanup	function
(	O
)	O
;	O
else	O
if	O
(	O
argc	int
<	O
1	int
)	O
PFATAL	O
(	O
"no input file"	pointer
)	O
;	O
else	O
for	O
(	O
;	O
0	int
<	O
argc	int
;	O
cleanup	function
(	O
)	O
,	O
++	O
argv	pointer
,	O
--	O
argc	int
)	O
{	O
struct	O
stat	struct
*	O
repo_stat	pointer
;	O
char	O
const	O
*	O
mani_filename	pointer
;	O
int	O
kws	int
;	O
ffree	function
(	O
)	O
;	O
if	O
(	O
pairnames	function
(	O
argc	int
,	O
argv	pointer
,	O
lockflag	bool
?	O
rcswriteopen	function
:	O
rcsreadopen	function
,	O
true	int
,	O
false	int
)	O
<=	O
0	int
)	O
continue	O
;	O
repo_stat	pointer
=	O
&	O
REPO	O
(	O
stat	struct
)	O
;	O
mani_filename	pointer
=	O
MANI	O
(	O
filename	pointer
)	O
;	O
kws	int
=	O
BE	O
(	O
kws	int
)	O
;	O
diagnose	function
(	O
"%s  -->  %s"	pointer
,	O
REPO	O
(	O
filename	pointer
)	O
,	O
tostdout	bool
?	O
"standard output"	pointer
:	O
mani_filename	pointer
)	O
;	O
workstatstat	int
=	O
-	O
1	int
;	O
if	O
(	O
tostdout	bool
)	O
{	O
neworkname	pointer
=	O
NULL	O
;	O
neworkptr	pointer
=	O
MANI	O
(	O
standard_output	pointer
)	O
=	O
stdout	pointer
;	O
}	O
else	O
{	O
workstatstat	int
=	O
stat	struct
(	O
mani_filename	pointer
,	O
&	O
workstat	struct
)	O
;	O
if	O
(	O
!	O
PROB	O
(	O
workstatstat	int
)	O
&&	O
SAME_INODE	O
(	O
REPO	O
(	O
stat	struct
)	O
,	O
workstat	struct
)	O
)	O
{	O
RERR	O
(	O
"RCS file is the same as working file %s."	pointer
,	O
mani_filename	pointer
)	O
;	O
continue	O
;	O
}	O
neworkname	pointer
=	O
makedirtemp	function
(	O
true	int
)	O
;	O
if	O
(	O
!	O
(	O
neworkptr	pointer
=	O
fopen_safer	function
(	O
neworkname	pointer
,	O
FOPEN_W_WORK	pointer
)	O
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
EACCES	int
)	O
MERR	O
(	O
"permission denied on parent directory"	pointer
)	O
;	O
else	O
syserror_errno	O
(	O
neworkname	pointer
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
!	O
REPO	O
(	O
tip	pointer
)	O
)	O
{	O
diagnose	function
(	O
"no revisions present; generating empty revision 0.0"	pointer
)	O
;	O
if	O
(	O
lockflag	bool
)	O
PWARN	O
(	O
"no revisions, so nothing can be %slocked"	pointer
,	O
lockflag	bool
<	O
0	int
?	O
"un"	pointer
:	O
""	pointer
)	O
;	O
Ozclose	function
(	O
&	O
FLOW	O
(	O
res	pointer
)	O
)	O
;	O
if	O
(	O
!	O
PROB	O
(	O
workstatstat	int
)	O
)	O
if	O
(	O
!	O
rmworkfile	function
(	O
)	O
)	O
continue	O
;	O
changelock	int
=	O
0	int
;	O
newdate	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
struct	O
cbuf	struct
numericrev	struct
;	O
int	O
locks	pointer
=	O
lockflag	bool
?	O
findlock	function
(	O
false	int
,	O
&	O
targetdelta	pointer
)	O
:	O
0	int
;	O
struct	O
fro	struct
*	O
from	pointer
=	O
FLOW	O
(	O
from	pointer
)	O
;	O
if	O
(	O
rev	pointer
)	O
{	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
numericrev	struct
,	O
rev	pointer
)	O
)	O
continue	O
;	O
}	O
else	O
{	O
switch	O
(	O
locks	pointer
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
0	int
:	O
numericrev	struct
.	O
string	pointer
=	O
GROK	O
(	O
branch	pointer
)	O
?	O
GROK	O
(	O
branch	pointer
)	O
:	O
""	pointer
;	O
break	O
;	O
case	O
1	int
:	O
numericrev	struct
.	O
string	pointer
=	O
str_save	function
(	O
targetdelta	pointer
->	O
num	pointer
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
(	O
targetdelta	pointer
=	O
genrevs	function
(	O
numericrev	struct
.	O
string	pointer
,	O
date	pointer
,	O
author	pointer
,	O
state	pointer
,	O
&	O
deltas	pointer
)	O
)	O
)	O
continue	O
;	O
changelock	int
=	O
lockflag	bool
<	O
0	int
?	O
rmlock	function
(	O
targetdelta	pointer
)	O
:	O
lockflag	bool
==	O
0	int
?	O
0	int
:	O
addlock	function
(	O
targetdelta	pointer
,	O
true	int
)	O
;	O
if	O
(	O
changelock	int
<	O
0	int
||	O
(	O
changelock	int
&&	O
!	O
checkaccesslist	function
(	O
)	O
)	O
||	O
PROB	O
(	O
dorewrite	function
(	O
lockflag	bool
,	O
changelock	int
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
0	int
<=	O
expmode	int
)	O
kws	int
=	O
BE	O
(	O
kws	int
)	O
=	O
expmode	int
;	O
if	O
(	O
0	int
<	O
lockflag	bool
&&	O
kws	int
==	O
kwsub_v	int
)	O
{	O
RERR	O
(	O
"cannot combine -kv and -l"	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
joinflag	pointer
&&	O
!	O
preparejoin	function
(	O
joinflag	pointer
)	O
)	O
continue	O
;	O
diagnose	function
(	O
"revision %s%s"	pointer
,	O
targetdelta	pointer
->	O
num	pointer
,	O
0	int
<	O
lockflag	bool
?	O
" (locked)"	pointer
:	O
lockflag	bool
<	O
0	int
?	O
" (unlocked)"	pointer
:	O
""	pointer
)	O
;	O
SAME_AFTER	O
(	O
from	pointer
,	O
targetdelta	pointer
->	O
text	pointer
)	O
;	O
if	O
(	O
!	O
PROB	O
(	O
workstatstat	int
)	O
)	O
if	O
(	O
!	O
rmworkfile	function
(	O
)	O
)	O
continue	O
;	O
write_desc_maybe	function
(	O
FLOW	O
(	O
to	pointer
)	O
)	O
;	O
BE	O
(	O
inclusive_of_Locker_in_Id_val	bool
)	O
=	O
0	int
<	O
lockflag	bool
;	O
targetdelta	pointer
->	O
name	pointer
=	O
namedrev	function
(	O
rev	pointer
,	O
targetdelta	pointer
)	O
;	O
joinname	pointer
=	O
buildrevision	function
(	O
deltas	pointer
,	O
targetdelta	pointer
,	O
joinflag	pointer
&&	O
tostdout	bool
?	O
NULL	O
:	O
neworkptr	pointer
,	O
kws	int
<	O
MIN_UNEXPAND	O
)	O
;	O
if	O
(	O
FLOW	O
(	O
res	pointer
)	O
==	O
neworkptr	pointer
)	O
FLOW	O
(	O
res	pointer
)	O
=	O
NULL	O
;	O
if	O
(	O
changelock	int
&&	O
deltas	pointer
->	O
entry	pointer
!=	O
targetdelta	pointer
)	O
fro_trundling	function
(	O
true	int
,	O
from	pointer
)	O
;	O
if	O
(	O
PROB	O
(	O
donerewrite	function
(	O
changelock	int
,	O
Ttimeflag	bool
?	O
repo_stat	pointer
->	O
st_mtime	O
:	O
(	O
time_t	long
)	O
-	O
1	int
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
changelock	int
)	O
{	O
locks	pointer
+=	O
lockflag	bool
;	O
if	O
(	O
1	int
<	O
locks	pointer
)	O
RWARN	O
(	O
"You now have %d locks."	pointer
,	O
locks	pointer
)	O
;	O
}	O
newdate	pointer
=	O
targetdelta	pointer
->	O
date	pointer
;	O
if	O
(	O
joinflag	pointer
)	O
{	O
newdate	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
joinname	pointer
)	O
{	O
aflush	function
(	O
neworkptr	pointer
)	O
;	O
joinname	pointer
=	O
neworkname	pointer
;	O
}	O
if	O
(	O
kws	int
==	O
kwsub_b	int
)	O
MERR	O
(	O
"merging binary files"	pointer
)	O
;	O
if	O
(	O
!	O
buildjoin	function
(	O
joinname	pointer
)	O
)	O
continue	O
;	O
}	O
}	O
if	O
(	O
!	O
tostdout	bool
)	O
{	O
mode_t	int
m	pointer
=	O
WORKMODE	O
(	O
repo_stat	pointer
->	O
st_mode	int
,	O
!	O
(	O
kws	int
==	O
kwsub_v	int
||	O
(	O
lockflag	bool
<=	O
0	int
&&	O
BE	O
(	O
strictly_locking	bool
)	O
)	O
)	O
)	O
;	O
time_t	long
t	long
=	O
mtimeflag	bool
&&	O
newdate	pointer
?	O
date2time	function
(	O
newdate	pointer
)	O
:	O
(	O
time_t	long
)	O
-	O
1	int
;	O
aflush	function
(	O
neworkptr	pointer
)	O
;	O
IGNOREINTS	O
(	O
)	O
;	O
r	pointer
=	O
chnamemod	function
(	O
&	O
neworkptr	pointer
,	O
neworkname	pointer
,	O
mani_filename	pointer
,	O
1	int
,	O
m	pointer
,	O
t	long
)	O
;	O
keepdirtemp	function
(	O
neworkname	pointer
)	O
;	O
RESTOREINTS	O
(	O
)	O
;	O
if	O
(	O
PROB	O
(	O
r	pointer
)	O
)	O
{	O
syserror_errno	O
(	O
mani_filename	pointer
)	O
;	O
PERR	O
(	O
"see %s"	pointer
,	O
neworkname	pointer
)	O
;	O
continue	O
;	O
}	O
diagnose	function
(	O
"done"	pointer
)	O
;	O
}	O
}	O
tempunlink	function
(	O
)	O
;	O
Ozclose	function
(	O
&	O
MANI	O
(	O
standard_output	pointer
)	O
)	O
;	O
gnurcs_goodbye	function
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
