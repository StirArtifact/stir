void	O
watchpoint_ref	function
(	O
struct	O
watchpoint	struct
*	O
wpt	pointer
)	O
{	O
++	O
wpt	pointer
->	O
refcnt	long
;	O
}	O
void	O
watchpoint_unref	function
(	O
struct	O
watchpoint	struct
*	O
wpt	pointer
)	O
{	O
if	O
(	O
--	O
wpt	pointer
->	O
refcnt	long
)	O
return	O
;	O
free	function
(	O
wpt	pointer
->	O
dirname	pointer
)	O
;	O
handler_list_unref	function
(	O
wpt	pointer
->	O
handler_list	pointer
)	O
;	O
free	function
(	O
wpt	pointer
)	O
;	O
}	O
struct	O
wpref	struct
{	O
int	O
used	int
;	O
struct	O
watchpoint	struct
*	O
wpt	pointer
;	O
}	O
;	O
static	O
unsigned	O
wpref_hash	function
(	O
void	O
*	O
data	pointer
,	O
unsigned	O
long	O
hashsize	long
)	O
{	O
struct	O
wpref	struct
*	O
sym	pointer
=	O
data	pointer
;	O
return	O
grecs_hash_string	function
(	O
sym	pointer
->	O
wpt	pointer
->	O
dirname	pointer
,	O
hashsize	long
)	O
;	O
}	O
static	O
int	O
wpref_cmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
wpref	struct
const	O
*	O
syma	pointer
=	O
a	pointer
;	O
struct	O
wpref	struct
const	O
*	O
symb	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
syma	pointer
->	O
wpt	pointer
->	O
dirname	pointer
,	O
symb	pointer
->	O
wpt	pointer
->	O
dirname	pointer
)	O
;	O
}	O
static	O
int	O
wpref_copy	function
(	O
void	O
*	O
a	pointer
,	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
wpref	struct
*	O
syma	pointer
=	O
a	pointer
;	O
struct	O
wpref	struct
*	O
symb	pointer
=	O
b	pointer
;	O
syma	pointer
->	O
used	int
=	O
1	int
;	O
syma	pointer
->	O
wpt	pointer
=	O
symb	pointer
->	O
wpt	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
wpref_free	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
wpref	struct
*	O
wpref	struct
=	O
p	pointer
;	O
watchpoint_unref	function
(	O
wpref	struct
->	O
wpt	pointer
)	O
;	O
free	function
(	O
wpref	struct
)	O
;	O
}	O
struct	O
grecs_symtab	O
*	O
nametab	pointer
;	O
struct	O
watchpoint	struct
*	O
watchpoint_install	function
(	O
const	O
char	O
*	O
path	array
,	O
int	O
*	O
pnew	pointer
)	O
{	O
struct	O
watchpoint	struct
wpkey	struct
;	O
struct	O
wpref	struct
key	pointer
;	O
struct	O
wpref	struct
*	O
ent	pointer
;	O
int	O
install	pointer
=	O
1	int
;	O
if	O
(	O
!	O
nametab	pointer
)	O
{	O
nametab	pointer
=	O
grecs_symtab_create	function
(	O
sizeof	O
(	O
struct	O
wpref	struct
)	O
,	O
wpref_hash	function
,	O
wpref_cmp	function
,	O
wpref_copy	function
,	O
NULL	O
,	O
wpref_free	function
)	O
;	O
if	O
(	O
!	O
nametab	pointer
)	O
{	O
diag	function
(	O
LOG_CRIT	int
,	O
_	O
(	O
"not enough memory"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
wpkey	struct
.	O
dirname	pointer
=	O
(	O
char	O
*	O
)	O
path	array
;	O
key	pointer
.	O
wpt	pointer
=	O
&	O
wpkey	struct
;	O
ent	pointer
=	O
grecs_symtab_lookup_or_install	function
(	O
nametab	pointer
,	O
&	O
key	pointer
,	O
&	O
install	pointer
)	O
;	O
if	O
(	O
install	pointer
)	O
{	O
struct	O
watchpoint	struct
*	O
wpt	pointer
=	O
ecalloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
wpt	pointer
)	O
)	O
;	O
wpt	pointer
->	O
dirname	pointer
=	O
estrdup	function
(	O
path	array
)	O
;	O
wpt	pointer
->	O
wd	int
=	O
-	O
1	int
;	O
wpt	pointer
->	O
handler_list	pointer
=	O
handler_list_create	function
(	O
)	O
;	O
wpt	pointer
->	O
refcnt	long
=	O
0	int
;	O
ent	pointer
->	O
wpt	pointer
=	O
wpt	pointer
;	O
}	O
if	O
(	O
!	O
ent	pointer
)	O
abort	function
(	O
)	O
;	O
watchpoint_ref	function
(	O
ent	pointer
->	O
wpt	pointer
)	O
;	O
if	O
(	O
pnew	pointer
)	O
*	O
pnew	pointer
=	O
install	pointer
;	O
return	O
ent	pointer
->	O
wpt	pointer
;	O
}	O
struct	O
watchpoint	struct
*	O
watchpoint_install_ptr	function
(	O
struct	O
watchpoint	struct
*	O
wpt	pointer
)	O
{	O
struct	O
wpref	struct
key	pointer
;	O
int	O
install	pointer
=	O
1	int
;	O
key	pointer
.	O
wpt	pointer
=	O
wpt	pointer
;	O
if	O
(	O
!	O
grecs_symtab_lookup_or_install	function
(	O
nametab	pointer
,	O
&	O
key	pointer
,	O
&	O
install	pointer
)	O
)	O
{	O
diag	function
(	O
LOG_CRIT	int
,	O
_	O
(	O
"not enough memory"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
watchpoint_ref	function
(	O
wpt	pointer
)	O
;	O
return	O
wpt	pointer
;	O
}	O
static	O
void	O
wpref_destroy	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
watchpoint	struct
*	O
wpt	pointer
=	O
data	pointer
;	O
watchpoint_destroy	function
(	O
wpt	pointer
)	O
;	O
}	O
static	O
grecs_list_ptr_t	pointer
watchpoint_gc_list	pointer
;	O
void	O
watchpoint_gc	function
(	O
void	O
)	O
{	O
if	O
(	O
watchpoint_gc_list	pointer
)	O
{	O
grecs_list_free	function
(	O
watchpoint_gc_list	pointer
)	O
;	O
watchpoint_gc_list	pointer
=	O
NULL	O
;	O
}	O
}	O
struct	O
watchpoint	struct
*	O
watchpoint_lookup	function
(	O
const	O
char	O
*	O
dirname	pointer
)	O
{	O
struct	O
watchpoint	struct
wpkey	struct
;	O
struct	O
wpref	struct
key	pointer
;	O
struct	O
wpref	struct
*	O
ent	pointer
;	O
if	O
(	O
!	O
nametab	pointer
)	O
return	O
NULL	O
;	O
wpkey	struct
.	O
dirname	pointer
=	O
(	O
char	O
*	O
)	O
dirname	pointer
;	O
key	pointer
.	O
wpt	pointer
=	O
&	O
wpkey	struct
;	O
ent	pointer
=	O
grecs_symtab_lookup_or_install	function
(	O
nametab	pointer
,	O
&	O
key	pointer
,	O
NULL	O
)	O
;	O
return	O
ent	pointer
?	O
ent	pointer
->	O
wpt	pointer
:	O
NULL	O
;	O
}	O
static	O
void	O
watchpoint_remove	function
(	O
const	O
char	O
*	O
dirname	pointer
)	O
{	O
struct	O
watchpoint	struct
wpkey	struct
;	O
struct	O
wpref	struct
key	pointer
;	O
if	O
(	O
!	O
nametab	pointer
)	O
return	O
;	O
wpkey	struct
.	O
dirname	pointer
=	O
(	O
char	O
*	O
)	O
dirname	pointer
;	O
key	pointer
.	O
wpt	pointer
=	O
&	O
wpkey	struct
;	O
grecs_symtab_remove	function
(	O
nametab	pointer
,	O
&	O
key	pointer
)	O
;	O
}	O
void	O
watchpoint_destroy	function
(	O
struct	O
watchpoint	struct
*	O
wpt	pointer
)	O
{	O
debug	O
(	O
1	int
,	O
(	O
_	O
(	O
"removing watcher %s"	pointer
)	O
,	O
wpt	pointer
->	O
dirname	pointer
)	O
)	O
;	O
sysev_rm_watch	function
(	O
wpt	pointer
)	O
;	O
watchpoint_remove	function
(	O
wpt	pointer
->	O
dirname	pointer
)	O
;	O
}	O
void	O
watchpoint_suspend	function
(	O
struct	O
watchpoint	struct
*	O
wpt	pointer
)	O
{	O
if	O
(	O
!	O
wpt	pointer
->	O
parent	pointer
)	O
watchpoint_install_sentinel	function
(	O
wpt	pointer
)	O
;	O
watchpoint_destroy	function
(	O
wpt	pointer
)	O
;	O
if	O
(	O
grecs_symtab_count	function
(	O
nametab	pointer
)	O
==	O
0	int
)	O
{	O
diag	function
(	O
LOG_CRIT	int
,	O
_	O
(	O
"no watchers left; exiting now"	pointer
)	O
)	O
;	O
stop	int
=	O
1	int
;	O
}	O
}	O
struct	O
sentinel	struct
{	O
struct	O
handler	struct
*	O
hp	pointer
;	O
struct	O
watchpoint	struct
*	O
watchpoint	struct
;	O
}	O
;	O
static	O
int	O
sentinel_handler_run	function
(	O
struct	O
watchpoint	struct
*	O
wp	pointer
,	O
event_mask	struct
*	O
event	pointer
,	O
const	O
char	O
*	O
dirname	pointer
,	O
const	O
char	O
*	O
file	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
sentinel	struct
*	O
sentinel	struct
=	O
data	pointer
;	O
struct	O
watchpoint	struct
*	O
wpt	pointer
=	O
sentinel	struct
->	O
watchpoint	struct
;	O
watchpoint_init	function
(	O
wpt	pointer
)	O
;	O
watchpoint_install_ptr	function
(	O
wpt	pointer
)	O
;	O
deliver_ev_create	function
(	O
wpt	pointer
,	O
dirname	pointer
,	O
file	pointer
)	O
;	O
if	O
(	O
handler_list_remove	function
(	O
wp	pointer
->	O
handler_list	pointer
,	O
sentinel	struct
->	O
hp	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
watchpoint_gc_list	pointer
)	O
{	O
watchpoint_gc_list	pointer
=	O
grecs_list_create	function
(	O
)	O
;	O
watchpoint_gc_list	pointer
->	O
free_entry	pointer
=	O
wpref_destroy	function
;	O
}	O
grecs_list_append	function
(	O
watchpoint_gc_list	pointer
,	O
wp	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
sentinel_handler_free	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
sentinel	struct
*	O
sentinel	struct
=	O
ptr	pointer
;	O
watchpoint_unref	function
(	O
sentinel	struct
->	O
watchpoint	struct
)	O
;	O
free	function
(	O
sentinel	struct
)	O
;	O
}	O
int	O
watchpoint_install_sentinel	function
(	O
struct	O
watchpoint	struct
*	O
wpt	pointer
)	O
{	O
struct	O
watchpoint	struct
*	O
sent	pointer
;	O
char	O
*	O
dirname	pointer
;	O
char	O
*	O
filename	pointer
;	O
struct	O
handler	struct
*	O
hp	pointer
;	O
event_mask	struct
ev_mask	struct
;	O
struct	O
sentinel	struct
*	O
sentinel	struct
;	O
filename	pointer
=	O
split_pathname	function
(	O
wpt	pointer
,	O
&	O
dirname	pointer
)	O
;	O
sent	pointer
=	O
watchpoint_install	function
(	O
dirname	pointer
,	O
NULL	O
)	O
;	O
getevt	function
(	O
"create"	pointer
,	O
&	O
ev_mask	struct
)	O
;	O
hp	pointer
=	O
handler_alloc	function
(	O
ev_mask	struct
)	O
;	O
hp	pointer
->	O
run	pointer
=	O
sentinel_handler_run	function
;	O
hp	pointer
->	O
free	function
=	O
sentinel_handler_free	function
;	O
sentinel	struct
=	O
emalloc	function
(	O
sizeof	O
(	O
*	O
sentinel	struct
)	O
)	O
;	O
sentinel	struct
->	O
watchpoint	struct
=	O
wpt	pointer
;	O
sentinel	struct
->	O
hp	pointer
=	O
hp	pointer
;	O
watchpoint_ref	function
(	O
wpt	pointer
)	O
;	O
hp	pointer
->	O
data	pointer
=	O
sentinel	struct
;	O
filpatlist_add_exact	function
(	O
&	O
hp	pointer
->	O
fnames	pointer
,	O
filename	pointer
)	O
;	O
handler_list_append	function
(	O
sent	pointer
->	O
handler_list	pointer
,	O
hp	pointer
)	O
;	O
unsplit_pathname	function
(	O
wpt	pointer
)	O
;	O
diag	function
(	O
LOG_NOTICE	int
,	O
_	O
(	O
"installing CREATE sentinel for %s"	pointer
)	O
,	O
wpt	pointer
->	O
dirname	pointer
)	O
;	O
return	O
watchpoint_init	function
(	O
sent	pointer
)	O
;	O
}	O
int	O
watchpoint_init	function
(	O
struct	O
watchpoint	struct
*	O
wpt	pointer
)	O
{	O
struct	O
stat	struct
st	pointer
;	O
event_mask	struct
mask	struct
=	O
{	O
0	int
,	O
0	int
}	O
;	O
struct	O
handler	struct
*	O
hp	pointer
;	O
handler_iterator_t	pointer
itr	pointer
;	O
int	O
wd	int
;	O
debug	O
(	O
1	int
,	O
(	O
_	O
(	O
"creating watcher %s"	pointer
)	O
,	O
wpt	pointer
->	O
dirname	pointer
)	O
)	O
;	O
if	O
(	O
stat	struct
(	O
wpt	pointer
->	O
dirname	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
return	O
watchpoint_install_sentinel	function
(	O
wpt	pointer
)	O
;	O
}	O
else	O
{	O
diag	function
(	O
LOG_ERR	int
,	O
_	O
(	O
"cannot set watcher on %s: %s"	pointer
)	O
,	O
wpt	pointer
->	O
dirname	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
wpt	pointer
->	O
isdir	int
=	O
S_ISDIR	O
(	O
st	pointer
.	O
st_mode	int
)	O
;	O
for_each_handler	O
(	O
wpt	pointer
,	O
itr	pointer
,	O
hp	pointer
)	O
{	O
mask	struct
.	O
sys_mask	int
|=	O
hp	pointer
->	O
ev_mask	struct
.	O
sys_mask	int
;	O
mask	struct
.	O
gen_mask	int
|=	O
hp	pointer
->	O
ev_mask	struct
.	O
gen_mask	int
;	O
}	O
wd	int
=	O
sysev_add_watch	function
(	O
wpt	pointer
,	O
mask	struct
)	O
;	O
if	O
(	O
wd	int
==	O
-	O
1	int
)	O
{	O
diag	function
(	O
LOG_ERR	int
,	O
_	O
(	O
"cannot set watcher on %s: %s"	pointer
)	O
,	O
wpt	pointer
->	O
dirname	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
wpt	pointer
->	O
wd	int
=	O
wd	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
watch_subdirs	function
(	O
struct	O
watchpoint	struct
*	O
parent	pointer
,	O
int	O
notify	int
)	O
;	O
int	O
subwatcher_create	function
(	O
struct	O
watchpoint	struct
*	O
parent	pointer
,	O
const	O
char	O
*	O
dirname	pointer
,	O
int	O
notify	int
)	O
{	O
struct	O
watchpoint	struct
*	O
wpt	pointer
;	O
int	O
inst	int
;	O
wpt	pointer
=	O
watchpoint_install	function
(	O
dirname	pointer
,	O
&	O
inst	int
)	O
;	O
if	O
(	O
!	O
inst	int
)	O
return	O
-	O
1	int
;	O
wpt	pointer
->	O
handler_list	pointer
=	O
handler_list_copy	function
(	O
parent	pointer
->	O
handler_list	pointer
)	O
;	O
wpt	pointer
->	O
parent	pointer
=	O
parent	pointer
;	O
if	O
(	O
parent	pointer
->	O
depth	int
==	O
-	O
1	int
)	O
wpt	pointer
->	O
depth	int
=	O
parent	pointer
->	O
depth	int
;	O
else	O
if	O
(	O
parent	pointer
->	O
depth	int
)	O
wpt	pointer
->	O
depth	int
=	O
parent	pointer
->	O
depth	int
-	O
1	int
;	O
else	O
wpt	pointer
->	O
depth	int
=	O
0	int
;	O
if	O
(	O
watchpoint_init	function
(	O
wpt	pointer
)	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
return	O
1	int
+	O
watch_subdirs	function
(	O
wpt	pointer
,	O
notify	int
)	O
;	O
}	O
void	O
deliver_ev_create	function
(	O
struct	O
watchpoint	struct
*	O
wp	pointer
,	O
const	O
char	O
*	O
dirname	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
event_mask	struct
m	pointer
=	O
{	O
GENEV_CREATE	int
,	O
0	int
}	O
;	O
struct	O
handler	struct
*	O
hp	pointer
;	O
handler_iterator_t	pointer
itr	pointer
;	O
for_each_handler	O
(	O
wp	pointer
,	O
itr	pointer
,	O
hp	pointer
)	O
{	O
if	O
(	O
handler_matches_event	O
(	O
hp	pointer
,	O
gen	O
,	O
GENEV_CREATE	int
,	O
name	pointer
)	O
)	O
hp	pointer
->	O
run	pointer
(	O
wp	pointer
,	O
&	O
m	pointer
,	O
dirname	pointer
,	O
name	pointer
,	O
hp	pointer
->	O
data	pointer
)	O
;	O
}	O
}	O
int	O
check_new_watcher	function
(	O
const	O
char	O
*	O
dir	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
fname	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
struct	O
watchpoint	struct
*	O
parent	pointer
;	O
parent	pointer
=	O
watchpoint_lookup	function
(	O
dir	pointer
)	O
;	O
if	O
(	O
!	O
parent	pointer
||	O
!	O
parent	pointer
->	O
depth	int
)	O
return	O
0	int
;	O
fname	pointer
=	O
mkfilename	function
(	O
dir	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
!	O
fname	pointer
)	O
{	O
diag	function
(	O
LOG_ERR	int
,	O
_	O
(	O
"cannot create watcher %s/%s: not enough memory"	pointer
)	O
,	O
dir	pointer
,	O
name	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
stat	struct
(	O
fname	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
diag	function
(	O
LOG_ERR	int
,	O
_	O
(	O
"cannot create watcher %s/%s, stat failed: %s"	pointer
)	O
,	O
dir	pointer
,	O
name	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
rc	int
=	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
S_ISDIR	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
deliver_ev_create	function
(	O
parent	pointer
,	O
parent	pointer
->	O
dirname	pointer
,	O
name	pointer
)	O
;	O
rc	int
=	O
subwatcher_create	function
(	O
parent	pointer
,	O
fname	pointer
,	O
1	int
)	O
;	O
}	O
else	O
rc	int
=	O
0	int
;	O
free	function
(	O
fname	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
watchpoint_pattern_match	function
(	O
struct	O
watchpoint	struct
*	O
wpt	pointer
,	O
const	O
char	O
*	O
file_name	pointer
)	O
{	O
struct	O
handler	struct
*	O
hp	pointer
;	O
handler_iterator_t	pointer
itr	pointer
;	O
for_each_handler	O
(	O
wpt	pointer
,	O
itr	pointer
,	O
hp	pointer
)	O
{	O
if	O
(	O
filpatlist_match	function
(	O
hp	pointer
->	O
fnames	pointer
,	O
file_name	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
watch_subdirs	function
(	O
struct	O
watchpoint	struct
*	O
parent	pointer
,	O
int	O
notify	int
)	O
{	O
DIR	struct
*	O
dir	pointer
;	O
struct	O
dirent	struct
*	O
ent	pointer
;	O
int	O
filemask	int
;	O
int	O
total	int
=	O
0	int
;	O
if	O
(	O
!	O
parent	pointer
->	O
isdir	int
)	O
return	O
0	int
;	O
filemask	int
=	O
sysev_filemask	function
(	O
parent	pointer
)	O
;	O
if	O
(	O
parent	pointer
->	O
depth	int
)	O
filemask	int
|=	O
S_IFDIR	O
;	O
if	O
(	O
!	O
filemask	int
)	O
return	O
0	int
;	O
dir	pointer
=	O
opendir	function
(	O
parent	pointer
->	O
dirname	pointer
)	O
;	O
if	O
(	O
!	O
dir	pointer
)	O
{	O
diag	function
(	O
LOG_ERR	int
,	O
_	O
(	O
"cannot open directory %s: %s"	pointer
)	O
,	O
parent	pointer
->	O
dirname	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
while	O
(	O
ent	pointer
=	O
readdir	function
(	O
dir	pointer
)	O
)	O
{	O
struct	O
stat	struct
st	pointer
;	O
char	O
*	O
dirname	pointer
;	O
if	O
(	O
ent	pointer
->	O
d_name	array
[	O
0	int
]	O
==	O
'.'	O
&&	O
(	O
ent	pointer
->	O
d_name	array
[	O
1	int
]	O
==	O
0	int
||	O
(	O
ent	pointer
->	O
d_name	array
[	O
1	int
]	O
==	O
'.'	O
&&	O
ent	pointer
->	O
d_name	array
[	O
2	int
]	O
==	O
0	int
)	O
)	O
)	O
continue	O
;	O
dirname	pointer
=	O
mkfilename	function
(	O
parent	pointer
->	O
dirname	pointer
,	O
ent	pointer
->	O
d_name	array
)	O
;	O
if	O
(	O
!	O
dirname	pointer
)	O
{	O
diag	function
(	O
LOG_ERR	int
,	O
_	O
(	O
"cannot stat %s/%s: not enough memory"	pointer
)	O
,	O
parent	pointer
->	O
dirname	pointer
,	O
ent	pointer
->	O
d_name	array
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
stat	struct
(	O
dirname	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
diag	function
(	O
LOG_ERR	int
,	O
_	O
(	O
"cannot stat %s: %s"	pointer
)	O
,	O
dirname	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
watchpoint_pattern_match	function
(	O
parent	pointer
,	O
ent	pointer
->	O
d_name	array
)	O
==	O
0	int
)	O
{	O
if	O
(	O
notify	int
)	O
deliver_ev_create	function
(	O
parent	pointer
,	O
parent	pointer
->	O
dirname	pointer
,	O
ent	pointer
->	O
d_name	array
)	O
;	O
if	O
(	O
st	pointer
.	O
st_mode	int
&	O
filemask	int
)	O
{	O
int	O
rc	int
=	O
subwatcher_create	function
(	O
parent	pointer
,	O
dirname	pointer
,	O
notify	int
)	O
;	O
if	O
(	O
rc	int
>	O
0	int
)	O
total	int
+=	O
rc	int
;	O
}	O
}	O
free	function
(	O
dirname	pointer
)	O
;	O
}	O
closedir	function
(	O
dir	pointer
)	O
;	O
return	O
total	int
;	O
}	O
static	O
int	O
setwatcher	function
(	O
void	O
*	O
ent	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
wpref	struct
*	O
wpref	struct
=	O
(	O
struct	O
wpref	struct
*	O
)	O
ent	pointer
;	O
struct	O
watchpoint	struct
*	O
wpt	pointer
=	O
wpref	struct
->	O
wpt	pointer
;	O
if	O
(	O
wpt	pointer
->	O
wd	int
==	O
-	O
1	int
&&	O
watchpoint_init	function
(	O
wpt	pointer
)	O
==	O
0	int
)	O
watch_subdirs	function
(	O
wpt	pointer
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
checkwatcher	function
(	O
void	O
*	O
ent	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
wpref	struct
*	O
wpref	struct
=	O
(	O
struct	O
wpref	struct
*	O
)	O
ent	pointer
;	O
struct	O
watchpoint	struct
*	O
wpt	pointer
=	O
wpref	struct
->	O
wpt	pointer
;	O
return	O
wpt	pointer
->	O
wd	int
>=	O
0	int
;	O
}	O
void	O
setup_watchers	function
(	O
void	O
)	O
{	O
sysev_init	function
(	O
)	O
;	O
if	O
(	O
grecs_symtab_count	function
(	O
nametab	pointer
)	O
==	O
0	int
)	O
{	O
diag	function
(	O
LOG_CRIT	int
,	O
_	O
(	O
"no event handlers configured"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
grecs_symtab_foreach	function
(	O
nametab	pointer
,	O
setwatcher	function
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
grecs_symtab_foreach	function
(	O
nametab	pointer
,	O
checkwatcher	function
,	O
NULL	O
)	O
)	O
{	O
diag	function
(	O
LOG_CRIT	int
,	O
_	O
(	O
"no event handlers installed"	pointer
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
}	O
static	O
int	O
stopwatcher	function
(	O
void	O
*	O
ent	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
wpref	struct
*	O
wpref	struct
=	O
(	O
struct	O
wpref	struct
*	O
)	O
ent	pointer
;	O
struct	O
watchpoint	struct
*	O
wpt	pointer
=	O
wpref	struct
->	O
wpt	pointer
;	O
if	O
(	O
wpt	pointer
->	O
wd	int
!=	O
-	O
1	int
)	O
{	O
debug	O
(	O
1	int
,	O
(	O
_	O
(	O
"removing watcher %s"	pointer
)	O
,	O
wpt	pointer
->	O
dirname	pointer
)	O
)	O
;	O
sysev_rm_watch	function
(	O
wpt	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
shutdown_watchers	function
(	O
void	O
)	O
{	O
grecs_symtab_foreach	function
(	O
nametab	pointer
,	O
stopwatcher	function
,	O
NULL	O
)	O
;	O
grecs_symtab_clear	function
(	O
nametab	pointer
)	O
;	O
}	O
char	O
*	O
split_pathname	function
(	O
struct	O
watchpoint	struct
*	O
dp	pointer
,	O
char	O
*	O
*	O
dirname	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
strrchr	function
(	O
dp	pointer
->	O
dirname	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
dp	pointer
->	O
split_p	pointer
=	O
p	pointer
;	O
*	O
p	pointer
++	O
=	O
0	int
;	O
*	O
dirname	pointer
=	O
dp	pointer
->	O
dirname	pointer
;	O
}	O
else	O
{	O
p	pointer
=	O
dp	pointer
->	O
dirname	pointer
;	O
*	O
dirname	pointer
=	O
"."	pointer
;	O
}	O
return	O
p	pointer
;	O
}	O
void	O
unsplit_pathname	function
(	O
struct	O
watchpoint	struct
*	O
dp	pointer
)	O
{	O
if	O
(	O
dp	pointer
->	O
split_p	pointer
)	O
{	O
*	O
dp	pointer
->	O
split_p	pointer
=	O
'/'	O
;	O
dp	pointer
->	O
split_p	pointer
=	O
NULL	O
;	O
}	O
}	O
