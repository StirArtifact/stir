int	O
gsl_linalg_hermtd_decomp	function
(	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_vector_complex	struct
*	O
tau	double
)	O
{	O
if	O
(	O
A	pointer
->	O
size1	long
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"hermitian tridiagonal decomposition requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
tau	double
->	O
size	long
+	O
1	int
!=	O
A	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be (matrix size - 1)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
size_t	long
i	long
;	O
const	O
gsl_complex	struct
zero	struct
=	O
gsl_complex_rect	function
(	O
0.0	int
,	O
0.0	int
)	O
;	O
const	O
gsl_complex	struct
one	struct
=	O
gsl_complex_rect	function
(	O
1.0	int
,	O
0.0	int
)	O
;	O
const	O
gsl_complex	struct
neg_one	struct
=	O
gsl_complex_rect	function
(	O
-	O
1.0	int
,	O
0.0	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
gsl_vector_complex_view	struct
c	pointer
=	O
gsl_matrix_complex_column	function
(	O
A	pointer
,	O
i	long
)	O
;	O
gsl_vector_complex_view	struct
v	pointer
=	O
gsl_vector_complex_subvector	function
(	O
&	O
c	pointer
.	O
vector	struct
,	O
i	long
+	O
1	int
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
gsl_complex	struct
tau_i	struct
=	O
gsl_linalg_complex_householder_transform	function
(	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
if	O
(	O
(	O
i	long
+	O
1	int
)	O
<	O
(	O
N	int
-	O
1	int
)	O
&&	O
!	O
(	O
GSL_REAL	O
(	O
tau_i	struct
)	O
==	O
0.0	int
&&	O
GSL_IMAG	O
(	O
tau_i	struct
)	O
==	O
0.0	int
)	O
)	O
{	O
gsl_matrix_complex_view	struct
m	pointer
=	O
gsl_matrix_complex_submatrix	function
(	O
A	pointer
,	O
i	long
+	O
1	int
,	O
i	long
+	O
1	int
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
gsl_complex	struct
ei	struct
=	O
gsl_vector_complex_get	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
0	int
)	O
;	O
gsl_vector_complex_view	struct
x	double
=	O
gsl_vector_complex_subvector	function
(	O
tau	double
,	O
i	long
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
gsl_vector_complex_set	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
0	int
,	O
one	struct
)	O
;	O
gsl_blas_zhemv	function
(	O
CblasLower	int
,	O
tau_i	struct
,	O
&	O
m	pointer
.	O
matrix	struct
,	O
&	O
v	pointer
.	O
vector	struct
,	O
zero	struct
,	O
&	O
x	double
.	O
vector	struct
)	O
;	O
{	O
gsl_complex	struct
xv	struct
,	O
txv	struct
,	O
alpha	long double
;	O
gsl_blas_zdotc	function
(	O
&	O
x	double
.	O
vector	struct
,	O
&	O
v	pointer
.	O
vector	struct
,	O
&	O
xv	struct
)	O
;	O
txv	struct
=	O
gsl_complex_mul	function
(	O
tau_i	struct
,	O
xv	struct
)	O
;	O
alpha	long double
=	O
gsl_complex_mul_real	function
(	O
txv	struct
,	O
-	O
0.5	int
)	O
;	O
gsl_blas_zaxpy	function
(	O
alpha	long double
,	O
&	O
v	pointer
.	O
vector	struct
,	O
&	O
x	double
.	O
vector	struct
)	O
;	O
}	O
gsl_blas_zher2	function
(	O
CblasLower	int
,	O
neg_one	struct
,	O
&	O
v	pointer
.	O
vector	struct
,	O
&	O
x	double
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
gsl_vector_complex_set	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
0	int
,	O
ei	struct
)	O
;	O
}	O
gsl_vector_complex_set	function
(	O
tau	double
,	O
i	long
,	O
tau_i	struct
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_hermtd_unpack	function
(	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_vector_complex	struct
*	O
tau	double
,	O
gsl_matrix_complex	struct
*	O
U	pointer
,	O
gsl_vector	struct
*	O
diag	pointer
,	O
gsl_vector	struct
*	O
sdiag	pointer
)	O
{	O
if	O
(	O
A	pointer
->	O
size1	long
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be sqaure"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
tau	double
->	O
size	long
+	O
1	int
!=	O
A	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of tau must be (matrix size - 1)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
U	pointer
->	O
size1	long
!=	O
A	pointer
->	O
size1	long
||	O
U	pointer
->	O
size2	long
!=	O
A	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of U must match size of A"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
diag	pointer
->	O
size	long
!=	O
A	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of diagonal must match size of A"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
sdiag	pointer
->	O
size	long
+	O
1	int
!=	O
A	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of subdiagonal must be (matrix size - 1)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
gsl_vector_complex_const_view	struct
zd	struct
=	O
gsl_matrix_complex_const_diagonal	function
(	O
A	pointer
)	O
;	O
gsl_vector_complex_const_view	struct
zsd	struct
=	O
gsl_matrix_complex_const_subdiagonal	function
(	O
A	pointer
,	O
1	int
)	O
;	O
gsl_vector_const_view	struct
d	struct
=	O
gsl_vector_complex_const_real	function
(	O
&	O
zd	struct
.	O
vector	struct
)	O
;	O
gsl_vector_const_view	struct
sd	struct
=	O
gsl_vector_complex_const_real	function
(	O
&	O
zsd	struct
.	O
vector	struct
)	O
;	O
gsl_vector_complex	struct
*	O
work	pointer
=	O
gsl_vector_complex_alloc	function
(	O
N	int
)	O
;	O
size_t	long
i	long
;	O
gsl_matrix_complex_set_identity	function
(	O
U	pointer
)	O
;	O
for	O
(	O
i	long
=	O
N	int
-	O
1	int
;	O
i	long
--	O
>	O
0	int
;	O
)	O
{	O
gsl_complex	struct
ti	struct
=	O
gsl_vector_complex_get	function
(	O
tau	double
,	O
i	long
)	O
;	O
gsl_vector_complex_const_view	struct
h	pointer
=	O
gsl_matrix_complex_const_subcolumn	function
(	O
A	pointer
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_matrix_complex_view	struct
m	pointer
=	O
gsl_matrix_complex_submatrix	function
(	O
U	pointer
,	O
i	long
+	O
1	int
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_vector_complex_view	struct
w	pointer
=	O
gsl_vector_complex_subvector	function
(	O
work	pointer
,	O
0	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_linalg_complex_householder_left	function
(	O
ti	struct
,	O
&	O
h	pointer
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
,	O
&	O
w	pointer
.	O
vector	struct
)	O
;	O
}	O
gsl_vector_memcpy	function
(	O
diag	pointer
,	O
&	O
d	struct
.	O
vector	struct
)	O
;	O
gsl_vector_memcpy	function
(	O
sdiag	pointer
,	O
&	O
sd	struct
.	O
vector	struct
)	O
;	O
gsl_vector_complex_free	function
(	O
work	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_hermtd_unpack_T	function
(	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
diag	pointer
,	O
gsl_vector	struct
*	O
sdiag	pointer
)	O
{	O
if	O
(	O
A	pointer
->	O
size1	long
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be sqaure"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
diag	pointer
->	O
size	long
!=	O
A	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of diagonal must match size of A"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
sdiag	pointer
->	O
size	long
+	O
1	int
!=	O
A	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"size of subdiagonal must be (matrix size - 1)"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
gsl_vector_complex_const_view	struct
zd	struct
=	O
gsl_matrix_complex_const_diagonal	function
(	O
A	pointer
)	O
;	O
gsl_vector_complex_const_view	struct
zsd	struct
=	O
gsl_matrix_complex_const_subdiagonal	function
(	O
A	pointer
,	O
1	int
)	O
;	O
gsl_vector_const_view	struct
d	struct
=	O
gsl_vector_complex_const_real	function
(	O
&	O
zd	struct
.	O
vector	struct
)	O
;	O
gsl_vector_const_view	struct
sd	struct
=	O
gsl_vector_complex_const_real	function
(	O
&	O
zsd	struct
.	O
vector	struct
)	O
;	O
gsl_vector_memcpy	function
(	O
diag	pointer
,	O
&	O
d	struct
.	O
vector	struct
)	O
;	O
gsl_vector_memcpy	function
(	O
sdiag	pointer
,	O
&	O
sd	struct
.	O
vector	struct
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
