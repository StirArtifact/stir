__BEGIN_DECLARATIONS	O
static	O
void	O
usage_msg	function
__P_	O
(	O
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
prgr_name	pointer
,	O
int	O
exit_status	int
)	O
)	O
;	O
static	O
void	O
version_msg	function
__P_	O
(	O
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
prgr_name	pointer
,	O
int	O
exit_status	int
)	O
)	O
;	O
static	O
VOID_PTR	O
my_malloc	function
__P_	O
(	O
(	O
const	O
int	O
amount	int
,	O
const	O
int	O
exit_status	int
,	O
const	O
char	O
*	O
module_name	pointer
,	O
const	O
long	O
module_line	long
,	O
const	O
char	O
*	O
var_name	pointer
,	O
const	O
int	O
var_contents	int
)	O
)	O
;	O
static	O
VOID_PTR	O
my_realloc	function
__P_	O
(	O
(	O
VOID_PTR	O
ptr_memblock	pointer
,	O
const	O
int	O
amount	int
,	O
const	O
int	O
exit_status	int
,	O
const	O
char	O
*	O
module_name	pointer
,	O
const	O
long	O
module_line	long
,	O
const	O
char	O
*	O
var_name	pointer
,	O
const	O
int	O
var_contents	int
)	O
)	O
;	O
static	O
void	O
my_error	function
__P_	O
(	O
(	O
const	O
int	O
exit_status	int
,	O
const	O
char	O
*	O
module_name	pointer
,	O
const	O
long	O
module_line	long
,	O
const	O
char	O
*	O
var_name	pointer
,	O
const	O
int	O
var_contents	int
)	O
)	O
;	O
static	O
RETSIGTYPE	void
handle_signal	function
__P_	O
(	O
(	O
int	O
the_signal	int
)	O
)	O
;	O
static	O
char	O
*	O
decode_format	function
__P_	O
(	O
(	O
FILE	struct
*	O
fp	pointer
,	O
Bool	int
*	O
is_eof	pointer
,	O
int	O
*	O
flen	pointer
,	O
int	O
*	O
fwidth	pointer
,	O
int	O
*	O
ch	pointer
)	O
)	O
;	O
__END_DECLARATIONS	O
static	O
Uint	int
testval	int
=	O
(	O
Uint	int
)	O
0	int
;	O
static	O
Uint	int
maxlen_max	int
=	O
MAXLEN_MAX	int
;	O
static	O
char	O
*	O
prgr_name	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
char	O
*	O
help_option_name	pointer
=	O
"help"	pointer
;	O
static	O
char	O
*	O
version_option_name	pointer
=	O
"version"	pointer
;	O
static	O
void	O
usage_msg	function
(	O
fp	pointer
,	O
prgr_name	pointer
,	O
exit_status	int
)	O
FILE	struct
*	O
fp	pointer
;	O
const	O
char	O
*	O
prgr_name	pointer
;	O
int	O
exit_status	int
;	O
{	O
fprintf	function
(	O
fp	pointer
,	O
_	O
(	O
"Usage:  %s  [--%s | --%s] | [RESOURCE-FILE | -]\n"	pointer
)	O
,	O
prgr_name	pointer
,	O
help_option_name	pointer
,	O
version_option_name	pointer
)	O
;	O
if	O
(	O
exit_status	int
==	O
EXIT_SUCCESS	int
)	O
{	O
S_NEWLINE	O
(	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
_	O
(	O
"Email bug reports to <%s>"	pointer
)	O
,	O
BUG_REPORT_ADR1	pointer
)	O
;	O
S_NEWLINE	O
(	O
fp	pointer
)	O
;	O
}	O
exit	function
(	O
exit_status	int
)	O
;	O
}	O
static	O
void	O
version_msg	function
(	O
fp	pointer
,	O
prgr_name	pointer
,	O
exit_status	int
)	O
FILE	struct
*	O
fp	pointer
;	O
const	O
char	O
*	O
prgr_name	pointer
;	O
int	O
exit_status	int
;	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"%s (GNU cal %s)\n"	pointer
,	O
prgr_name	pointer
,	O
PACKAGE_VERSION	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"%s\n"	pointer
,	O
COPYRIGHT_TXT	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
_	O
(	O
"This is free software; see the source for copying conditions."	pointer
)	O
)	O
;	O
S_NEWLINE	O
(	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
_	O
(	O
"There is NO warranty, without even the implied warranty of"	pointer
)	O
)	O
;	O
S_NEWLINE	O
(	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
_	O
(	O
"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."	pointer
)	O
)	O
;	O
S_NEWLINE	O
(	O
fp	pointer
)	O
;	O
exit	function
(	O
exit_status	int
)	O
;	O
}	O
static	O
VOID_PTR	O
my_malloc	function
(	O
amount	int
,	O
exit_status	int
,	O
module_name	pointer
,	O
module_line	long
,	O
var_name	pointer
,	O
var_contents	int
)	O
const	O
int	O
amount	int
;	O
const	O
int	O
exit_status	int
;	O
const	O
char	O
*	O
module_name	pointer
;	O
const	O
long	O
module_line	long
;	O
const	O
char	O
*	O
var_name	pointer
;	O
const	O
int	O
var_contents	int
;	O
{	O
auto	O
VOID_PTR	O
ptr_memblock	pointer
;	O
if	O
(	O
(	O
Uint	int
)	O
amount	int
>	O
testval	int
)	O
my_error	function
(	O
ERR_INTERNAL_TABLE_CRASH	int
,	O
module_name	pointer
,	O
module_line	long
,	O
var_name	pointer
,	O
(	O
int	O
)	O
testval	int
)	O
;	O
ptr_memblock	pointer
=	O
(	O
VOID_PTR	O
)	O
malloc	function
(	O
(	O
int	O
)	O
amount	int
)	O
;	O
if	O
(	O
ptr_memblock	pointer
==	O
(	O
VOID_PTR	O
)	O
NULL	O
)	O
my_error	function
(	O
exit_status	int
,	O
module_name	pointer
,	O
module_line	long
,	O
var_name	pointer
,	O
var_contents	int
)	O
;	O
return	O
(	O
ptr_memblock	pointer
)	O
;	O
}	O
static	O
VOID_PTR	O
my_realloc	function
(	O
ptr_memblock	pointer
,	O
amount	int
,	O
exit_status	int
,	O
module_name	pointer
,	O
module_line	long
,	O
var_name	pointer
,	O
var_contents	int
)	O
VOID_PTR	O
ptr_memblock	pointer
;	O
const	O
int	O
amount	int
;	O
const	O
int	O
exit_status	int
;	O
const	O
char	O
*	O
module_name	pointer
;	O
const	O
long	O
module_line	long
;	O
const	O
char	O
*	O
var_name	pointer
;	O
const	O
int	O
var_contents	int
;	O
{	O
if	O
(	O
(	O
Uint	int
)	O
amount	int
>	O
testval	int
)	O
my_error	function
(	O
ERR_INTERNAL_TABLE_CRASH	int
,	O
module_name	pointer
,	O
module_line	long
,	O
var_name	pointer
,	O
(	O
int	O
)	O
testval	int
)	O
;	O
if	O
(	O
ptr_memblock	pointer
==	O
(	O
VOID_PTR	O
)	O
NULL	O
)	O
return	O
(	O
my_malloc	function
(	O
amount	int
,	O
exit_status	int
,	O
module_name	pointer
,	O
module_line	long
,	O
var_name	pointer
,	O
var_contents	int
)	O
)	O
;	O
ptr_memblock	pointer
=	O
(	O
VOID_PTR	O
)	O
realloc	function
(	O
ptr_memblock	pointer
,	O
(	O
int	O
)	O
amount	int
)	O
;	O
if	O
(	O
ptr_memblock	pointer
==	O
(	O
VOID_PTR	O
)	O
NULL	O
)	O
my_error	function
(	O
exit_status	int
,	O
module_name	pointer
,	O
module_line	long
,	O
var_name	pointer
,	O
var_contents	int
)	O
;	O
return	O
(	O
ptr_memblock	pointer
)	O
;	O
}	O
static	O
void	O
my_error	function
(	O
exit_status	int
,	O
module_name	pointer
,	O
module_line	long
,	O
var_name	pointer
,	O
var_contents	int
)	O
const	O
int	O
exit_status	int
;	O
const	O
char	O
*	O
module_name	pointer
;	O
const	O
long	O
module_line	long
;	O
const	O
char	O
*	O
var_name	pointer
;	O
const	O
int	O
var_contents	int
;	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"\n%s: abort, "	pointer
)	O
,	O
prgr_name	pointer
)	O
;	O
switch	O
(	O
exit_status	int
)	O
{	O
case	O
ERR_NO_MEMORY_AVAILABLE	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"`%s' line %ld: virtual memory exhausted (%s=%d)"	pointer
)	O
,	O
module_name	pointer
,	O
module_line	long
,	O
var_name	pointer
,	O
var_contents	int
)	O
;	O
break	O
;	O
case	O
ERR_INTERNAL_TABLE_CRASH	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"`%s' line %ld: (`%s') invalid value for table size `sizeof %s>%d'"	pointer
)	O
,	O
module_name	pointer
,	O
module_line	long
,	O
_	O
(	O
"internal"	pointer
)	O
,	O
var_name	pointer
,	O
var_contents	int
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"`%s' line %ld: (`%s') unmanaged error (%d)"	pointer
)	O
,	O
module_name	pointer
,	O
module_line	long
,	O
_	O
(	O
"internal"	pointer
)	O
,	O
exit_status	int
)	O
;	O
}	O
S_NEWLINE	O
(	O
stderr	pointer
)	O
;	O
exit	function
(	O
exit_status	int
)	O
;	O
}	O
static	O
RETSIGTYPE	void
handle_signal	function
(	O
the_signal	int
)	O
int	O
the_signal	int
;	O
{	O
fflush	function
(	O
stdout	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"\n%s: program aborted by signal %d\n"	pointer
)	O
,	O
prgr_name	pointer
,	O
the_signal	int
)	O
;	O
exit	function
(	O
ERR_TERMINATION_BY_SIGNAL	int
)	O
;	O
}	O
static	O
char	O
*	O
decode_format	function
(	O
fp	pointer
,	O
is_eof	pointer
,	O
flen	pointer
,	O
fwidth	pointer
,	O
ch	pointer
)	O
FILE	struct
*	O
fp	pointer
;	O
Bool	int
*	O
is_eof	pointer
;	O
int	O
*	O
flen	pointer
;	O
int	O
*	O
fwidth	pointer
;	O
int	O
*	O
ch	pointer
;	O
{	O
static	O
int	O
the_len	int
=	O
0	int
;	O
static	O
char	O
*	O
format_txt	pointer
;	O
auto	O
char	O
*	O
ptr_char	pointer
;	O
static	O
Bool	int
is_allocated	int
=	O
FALSE	O
;	O
*	O
is_eof	pointer
=	O
FALSE	O
;	O
*	O
flen	pointer
=	O
0	int
;	O
*	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
if	O
(	O
!	O
is_allocated	int
)	O
{	O
is_allocated	int
=	O
TRUE	O
;	O
*	O
ch	pointer
=	O
FWIDTH_MAX	int
;	O
while	O
(	O
*	O
ch	pointer
)	O
{	O
the_len	int
++	O
;	O
*	O
ch	pointer
/=	O
10	int
;	O
}	O
format_txt	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
the_len	int
+	O
8	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"format_txt"	pointer
,	O
0	int
)	O
;	O
}	O
ptr_char	pointer
=	O
format_txt	pointer
;	O
*	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
;	O
*	O
ptr_char	pointer
++	O
=	O
(	O
char	O
)	O
*	O
ch	pointer
;	O
(	O
*	O
flen	pointer
)	O
++	O
;	O
switch	O
(	O
*	O
ch	pointer
)	O
{	O
case	O
FLEFT_CHAR	char
:	O
case	O
FCENTER_CHAR	char
:	O
case	O
FRIGHT_CHAR	char
:	O
if	O
(	O
(	O
*	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
*	O
is_eof	pointer
=	O
TRUE	O
;	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
return	O
(	O
format_txt	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
return	O
(	O
format_txt	pointer
)	O
;	O
}	O
if	O
(	O
*	O
ch	pointer
==	O
FSIGN_CHAR	char
)	O
{	O
*	O
ptr_char	pointer
++	O
=	O
(	O
char	O
)	O
*	O
ch	pointer
;	O
(	O
*	O
flen	pointer
)	O
++	O
;	O
if	O
(	O
(	O
*	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
*	O
is_eof	pointer
=	O
TRUE	O
;	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
return	O
(	O
format_txt	pointer
)	O
;	O
}	O
}	O
if	O
(	O
*	O
ch	pointer
==	O
FLZERO_CHAR	char
)	O
{	O
*	O
ptr_char	pointer
++	O
=	O
(	O
char	O
)	O
*	O
ch	pointer
;	O
(	O
*	O
flen	pointer
)	O
++	O
;	O
if	O
(	O
(	O
*	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
*	O
is_eof	pointer
=	O
TRUE	O
;	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
return	O
(	O
format_txt	pointer
)	O
;	O
}	O
}	O
if	O
(	O
isdigit	function
(	O
*	O
ch	pointer
)	O
)	O
{	O
if	O
(	O
*	O
ch	pointer
!=	O
FLZERO_CHAR	char
)	O
{	O
register	O
int	O
len	int
=	O
the_len	int
;	O
LOOP	O
{	O
if	O
(	O
isdigit	function
(	O
*	O
ch	pointer
)	O
)	O
{	O
*	O
ptr_char	pointer
++	O
=	O
(	O
char	O
)	O
*	O
ch	pointer
;	O
(	O
*	O
flen	pointer
)	O
++	O
;	O
if	O
(	O
!	O
--	O
len	int
)	O
{	O
if	O
(	O
(	O
*	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
*	O
is_eof	pointer
=	O
TRUE	O
;	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
return	O
(	O
format_txt	pointer
)	O
;	O
}	O
break	O
;	O
}	O
}	O
else	O
break	O
;	O
if	O
(	O
(	O
*	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
*	O
is_eof	pointer
=	O
TRUE	O
;	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
return	O
(	O
format_txt	pointer
)	O
;	O
}	O
}	O
*	O
fwidth	pointer
=	O
0	int
;	O
if	O
(	O
toupper	function
(	O
*	O
ch	pointer
)	O
==	O
toupper	function
(	O
FUPPER_CHAR	char
)	O
||	O
toupper	function
(	O
*	O
ch	pointer
)	O
==	O
toupper	function
(	O
FLOWER_CHAR	char
)	O
||	O
toupper	function
(	O
*	O
ch	pointer
)	O
==	O
toupper	function
(	O
FWORD_CHAR	char
)	O
)	O
{	O
*	O
ptr_char	pointer
++	O
=	O
(	O
char	O
)	O
*	O
ch	pointer
;	O
(	O
*	O
flen	pointer
)	O
++	O
;	O
if	O
(	O
(	O
*	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
*	O
is_eof	pointer
=	O
TRUE	O
;	O
*	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
return	O
(	O
format_txt	pointer
)	O
;	O
}	O
}	O
if	O
(	O
*	O
ch	pointer
==	O
FSUFFIX_CHAR	char
)	O
{	O
*	O
ptr_char	pointer
++	O
=	O
(	O
char	O
)	O
*	O
ch	pointer
;	O
(	O
*	O
flen	pointer
)	O
++	O
;	O
if	O
(	O
(	O
*	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
*	O
is_eof	pointer
=	O
TRUE	O
;	O
*	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
return	O
(	O
format_txt	pointer
)	O
;	O
}	O
}	O
switch	O
(	O
*	O
ch	pointer
)	O
{	O
case	O
FFIX_CHAR	char
:	O
case	O
FVAR_CHAR	char
:	O
*	O
ptr_char	pointer
++	O
=	O
(	O
char	O
)	O
*	O
ch	pointer
;	O
(	O
*	O
flen	pointer
)	O
++	O
;	O
if	O
(	O
(	O
*	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
*	O
is_eof	pointer
=	O
TRUE	O
;	O
*	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
}	O
*	O
ptr_char	pointer
++	O
=	O
(	O
char	O
)	O
*	O
ch	pointer
;	O
(	O
*	O
flen	pointer
)	O
++	O
;	O
break	O
;	O
default	O
:	O
*	O
ptr_char	pointer
++	O
=	O
(	O
char	O
)	O
*	O
ch	pointer
;	O
(	O
*	O
flen	pointer
)	O
++	O
;	O
*	O
fwidth	pointer
=	O
SPECIAL_VALUE	O
;	O
}	O
}	O
else	O
{	O
*	O
ptr_char	pointer
++	O
=	O
(	O
char	O
)	O
*	O
ch	pointer
;	O
(	O
*	O
flen	pointer
)	O
++	O
;	O
}	O
}	O
*	O
ptr_char	pointer
=	O
'\0'	O
;	O
return	O
(	O
format_txt	pointer
)	O
;	O
}	O
int	O
main	function
(	O
argc	int
,	O
argv	array
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array
[	O
]	O
;	O
{	O
auto	O
FILE	struct
*	O
fp	pointer
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
register	O
int	O
i	int
;	O
register	O
int	O
ch	pointer
;	O
register	O
int	O
ch2	int
;	O
register	O
int	O
ch3	int
;	O
auto	O
int	O
flen	pointer
;	O
auto	O
int	O
fwidth	pointer
;	O
auto	O
int	O
last_char	int
=	O
'\0'	O
;	O
auto	O
char	O
*	O
s1	pointer
;	O
auto	O
char	O
*	O
ptr_char	pointer
;	O
auto	O
Bool	int
got_quote	int
=	O
FALSE	O
;	O
auto	O
Bool	int
had_quote	int
=	O
FALSE	O
;	O
auto	O
Bool	int
is_eof	pointer
=	O
FALSE	O
;	O
auto	O
Bool	int
is_regular_file	int
=	O
TRUE	O
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
testval	int
=	O
~	O
0	int
;	O
testval	int
>>=	O
1	int
;	O
assert	O
(	O
MAXLEN_MAX	int
>=	O
1024	int
)	O
;	O
assert	O
(	O
(	O
Uint	int
)	O
MAXLEN_MAX	int
<=	O
testval	int
)	O
;	O
assert	O
(	O
strlen	function
(	O
PACKAGE_VERSION	pointer
)	O
>	O
0	int
)	O
;	O
s1	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
MAXLEN_MAX	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"s1"	pointer
,	O
0	int
)	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
*	O
argv	array
)	O
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
s1	pointer
=	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
s1	pointer
,	O
i	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"s1"	pointer
,	O
i	int
+	O
1	int
)	O
;	O
strcpy	function
(	O
s1	pointer
,	O
*	O
argv	array
)	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s1	pointer
)	O
;	O
ptr_char	pointer
=	O
strrchr	function
(	O
s1	pointer
,	O
*	O
DIR_SEP	pointer
)	O
;	O
if	O
(	O
ptr_char	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
ptr_char	pointer
++	O
;	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
ptr_char	pointer
)	O
;	O
}	O
else	O
ptr_char	pointer
=	O
s1	pointer
;	O
if	O
(	O
tolower	function
(	O
'A'	O
)	O
==	O
'a'	O
)	O
{	O
auto	O
char	O
*	O
buf_ptr_char	pointer
=	O
ptr_char	pointer
;	O
for	O
(	O
;	O
*	O
ptr_char	pointer
;	O
ptr_char	pointer
++	O
)	O
*	O
ptr_char	pointer
=	O
(	O
char	O
)	O
tolower	function
(	O
*	O
ptr_char	pointer
)	O
;	O
ptr_char	pointer
=	O
buf_ptr_char	pointer
;	O
}	O
if	O
(	O
(	O
i	int
>	O
4	int
)	O
&&	O
!	O
strcmp	function
(	O
ptr_char	pointer
+	O
i	int
-	O
4	int
,	O
".exe"	pointer
)	O
)	O
{	O
i	int
-=	O
4	int
;	O
*	O
(	O
ptr_char	pointer
+	O
i	int
)	O
=	O
'\0'	O
;	O
}	O
prgr_name	pointer
=	O
(	O
char	O
*	O
)	O
my_malloc	function
(	O
i	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
1L	int
,	O
"prgr_name"	pointer
,	O
0	int
)	O
;	O
strcpy	function
(	O
prgr_name	pointer
,	O
ptr_char	pointer
)	O
;	O
if	O
(	O
signal	function
(	O
SIGINT	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
(	O
void	O
)	O
signal	function
(	O
SIGINT	int
,	O
(	O
Sig_type	pointer
)	O
handle_signal	function
)	O
;	O
if	O
(	O
signal	function
(	O
SIGTERM	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
(	O
void	O
)	O
signal	function
(	O
SIGTERM	int
,	O
(	O
Sig_type	pointer
)	O
handle_signal	function
)	O
;	O
if	O
(	O
signal	function
(	O
SIGHUP	int
,	O
SIG_IGN	O
)	O
!=	O
SIG_IGN	O
)	O
(	O
void	O
)	O
signal	function
(	O
SIGHUP	int
,	O
(	O
Sig_type	pointer
)	O
handle_signal	function
)	O
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
if	O
(	O
(	O
strlen	function
(	O
argv	array
[	O
1	int
]	O
)	O
==	O
1	int
)	O
&&	O
(	O
*	O
argv	array
[	O
1	int
]	O
==	O
*	O
SWITCH	pointer
)	O
)	O
fp	pointer
=	O
stdin	pointer
;	O
else	O
{	O
if	O
(	O
(	O
strlen	function
(	O
argv	array
[	O
1	int
]	O
)	O
>	O
2	int
)	O
&&	O
(	O
*	O
argv	array
[	O
1	int
]	O
==	O
*	O
SWITCH	pointer
)	O
&&	O
(	O
*	O
(	O
argv	array
[	O
1	int
]	O
+	O
1	int
)	O
==	O
*	O
SWITCH	pointer
)	O
)	O
{	O
if	O
(	O
!	O
strncasecmp	function
(	O
argv	array
[	O
1	int
]	O
+	O
2	int
,	O
help_option_name	pointer
,	O
strlen	function
(	O
argv	array
[	O
1	int
]	O
+	O
2	int
)	O
)	O
)	O
usage_msg	function
(	O
stdout	pointer
,	O
prgr_name	pointer
,	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
!	O
strncasecmp	function
(	O
argv	array
[	O
1	int
]	O
+	O
2	int
,	O
version_option_name	pointer
,	O
strlen	function
(	O
argv	array
[	O
1	int
]	O
+	O
2	int
)	O
)	O
)	O
version_msg	function
(	O
stdout	pointer
,	O
prgr_name	pointer
,	O
EXIT_SUCCESS	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: unrecognized option `%s'"	pointer
)	O
,	O
prgr_name	pointer
,	O
argv	array
[	O
1	int
]	O
)	O
;	O
S_NEWLINE	O
(	O
stderr	pointer
)	O
;	O
usage_msg	function
(	O
stderr	pointer
,	O
prgr_name	pointer
,	O
ERR_INVALID_OPTION	int
)	O
;	O
}	O
else	O
{	O
auto	O
struct	O
stat	struct
statbuf	struct
;	O
if	O
(	O
!	O
stat	struct
(	O
argv	array
[	O
1	int
]	O
,	O
&	O
statbuf	struct
)	O
)	O
{	O
if	O
(	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IFMT	O
)	O
==	O
S_IFREG	O
)	O
fp	pointer
=	O
fopen	function
(	O
argv	array
[	O
1	int
]	O
,	O
"r"	pointer
)	O
;	O
else	O
is_regular_file	int
=	O
FALSE	O
;	O
}	O
}	O
}	O
}	O
else	O
fp	pointer
=	O
stdin	pointer
;	O
if	O
(	O
fp	pointer
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
{	O
i	int
=	O
(	O
int	O
)	O
strlen	function
(	O
prgr_name	pointer
)	O
+	O
strlen	function
(	O
argv	array
[	O
1	int
]	O
)	O
+	O
5	int
;	O
if	O
(	O
(	O
Uint	int
)	O
i	int
>=	O
maxlen_max	int
)	O
s1	pointer
=	O
(	O
char	O
*	O
)	O
my_realloc	function
(	O
(	O
VOID_PTR	O
)	O
s1	pointer
,	O
i	int
+	O
1	int
,	O
ERR_NO_MEMORY_AVAILABLE	int
,	O
__FILE__	O
,	O
(	O
(	O
long	O
)	O
__LINE__	O
)	O
-	O
2L	int
,	O
"s1"	pointer
,	O
0	int
)	O
;	O
sprintf	function
(	O
s1	pointer
,	O
"%s: `%s' "	pointer
,	O
prgr_name	pointer
,	O
argv	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
!	O
is_regular_file	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: no regular file\n"	pointer
)	O
,	O
s1	pointer
)	O
;	O
else	O
perror	function
(	O
s1	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
while	O
(	O
(	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
!=	O
EOF	O
)	O
if	O
(	O
isspace	function
(	O
ch	pointer
)	O
)	O
{	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
ch	pointer
!=	O
EOF	O
)	O
{	O
if	O
(	O
ch	pointer
!=	O
QUOTE_CHAR	char
)	O
ungetc	function
(	O
ch	pointer
,	O
fp	pointer
)	O
;	O
else	O
got_quote	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
ch	pointer
!=	O
EOF	O
)	O
while	O
(	O
(	O
ch	pointer
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
ch	pointer
)	O
{	O
case	O
RC_NL_CHAR	char
:	O
case	O
RC_NL2_CHAR	char
:	O
ch2	int
=	O
fgetc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
ch2	int
!=	O
EOF	O
)	O
switch	O
(	O
ch2	int
)	O
{	O
case	O
QUOTE_CHAR	char
:	O
ch3	int
=	O
fgetc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
ch3	int
!=	O
EOF	O
)	O
switch	O
(	O
ch3	int
)	O
{	O
case	O
'\n'	O
:	O
fputc	function
(	O
ch3	int
,	O
stdout	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stdout	pointer
,	O
"%c%c%c"	pointer
,	O
ch	pointer
,	O
ch2	int
,	O
ch3	int
)	O
;	O
}	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"%c%c"	pointer
,	O
ch	pointer
,	O
ch2	int
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stdout	pointer
,	O
"%c%c"	pointer
,	O
ch	pointer
,	O
ch2	int
)	O
;	O
}	O
else	O
fputc	function
(	O
ch	pointer
,	O
stdout	pointer
)	O
;	O
had_quote	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
QUOTE_CHAR	char
:	O
if	O
(	O
got_quote	int
)	O
fputc	function
(	O
ch	pointer
,	O
stdout	pointer
)	O
;	O
ch2	int
=	O
fgetc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
ch2	int
!=	O
EOF	O
)	O
switch	O
(	O
ch2	int
)	O
{	O
case	O
RC_TVAR_CHAR	char
:	O
ptr_char	pointer
=	O
decode_format	function
(	O
fp	pointer
,	O
&	O
is_eof	pointer
,	O
&	O
flen	pointer
,	O
&	O
fwidth	pointer
,	O
&	O
last_char	int
)	O
;	O
if	O
(	O
!	O
is_eof	pointer
)	O
{	O
ch3	int
=	O
*	O
(	O
ptr_char	pointer
+	O
flen	pointer
-	O
1	int
)	O
;	O
if	O
(	O
isalpha	function
(	O
ch3	int
)	O
&&	O
(	O
fwidth	pointer
!=	O
SPECIAL_VALUE	O
||	O
*	O
ptr_char	pointer
==	O
ch3	int
)	O
)	O
{	O
if	O
(	O
had_quote	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"%c%c%s"	pointer
,	O
ch	pointer
,	O
ch2	int
,	O
ptr_char	pointer
)	O
;	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"%c%s"	pointer
,	O
ch2	int
,	O
ptr_char	pointer
)	O
;	O
}	O
had_quote	int
=	O
FALSE	O
;	O
break	O
;	O
}	O
else	O
fputc	function
(	O
ch	pointer
,	O
stdout	pointer
)	O
;	O
case	O
'\n'	O
:	O
case	O
RC_NL_CHAR	char
:	O
case	O
RC_NL2_CHAR	char
:	O
fputc	function
(	O
ch2	int
,	O
stdout	pointer
)	O
;	O
had_quote	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
RC_SPECIAL_TEXT_CHAR	O
:	O
ptr_char	pointer
=	O
decode_format	function
(	O
fp	pointer
,	O
&	O
is_eof	pointer
,	O
&	O
flen	pointer
,	O
&	O
fwidth	pointer
,	O
&	O
last_char	int
)	O
;	O
if	O
(	O
!	O
is_eof	pointer
)	O
{	O
ch3	int
=	O
*	O
(	O
ptr_char	pointer
+	O
flen	pointer
-	O
1	int
)	O
;	O
switch	O
(	O
ch3	int
)	O
{	O
case	O
RC_SHELL_ESC_CHAR	char
:	O
case	O
RC_ENV_VAR_CHAR	char
:	O
case	O
RC_EX_LHDY_CHAR	char
:	O
case	O
RC_EX_NLHDY_CHAR	char
:	O
case	O
RC_EX_AHDY_CHAR	char
:	O
case	O
RC_EX_NAHDY_CHAR	char
:	O
case	O
RC_EX_MON_CHAR	char
:	O
case	O
RC_EX_NMON_CHAR	char
:	O
case	O
RC_EX_TUE_CHAR	char
:	O
case	O
RC_EX_NTUE_CHAR	char
:	O
case	O
RC_EX_WED_CHAR	char
:	O
case	O
RC_EX_NWED_CHAR	char
:	O
case	O
RC_EX_THU_CHAR	char
:	O
case	O
RC_EX_NTHU_CHAR	char
:	O
case	O
RC_EX_FRI_CHAR	char
:	O
case	O
RC_EX_NFRI_CHAR	char
:	O
case	O
RC_EX_SAT_CHAR	char
:	O
case	O
RC_EX_NSAT_CHAR	char
:	O
case	O
RC_EX_SUN_CHAR	char
:	O
case	O
RC_EX_NSUN_CHAR	char
:	O
case	O
RC_EX_MON_2_THU_CHAR	char
:	O
case	O
RC_EX_NMON_2_THU_CHAR	char
:	O
case	O
RC_EX_MON_2_FRI_CHAR	char
:	O
case	O
RC_EX_NMON_2_FRI_CHAR	char
:	O
case	O
RC_IDATE_CHAR	char
:	O
case	O
RC_EDATE_CHAR	char
:	O
case	O
RC_WDNAME_CHAR	O
:	O
case	O
RC_WDNR_M1_2_S7_CHAR	char
:	O
case	O
RC_WDNR_M0_2_S6_CHAR	char
:	O
case	O
RC_WDNR_S1_2_S7_CHAR	char
:	O
case	O
RC_WDNR_S0_2_S6_CHAR	char
:	O
case	O
RC_WDNR_X1_2_X7_CHAR	char
:	O
case	O
RC_WDNR_X0_2_X6_CHAR	char
:	O
case	O
RC_DOYNR_CHAR	char
:	O
case	O
RC_DAYNR_CHAR	O
:	O
case	O
RC_MONTHNAME_CHAR	O
:	O
case	O
RC_MONTHNR_CHAR	O
:	O
case	O
RC_YEARNR_CHAR	O
:	O
case	O
RC_WEEKNR_CHAR	char
:	O
case	O
RC_BYEAR_CHAR	char
:	O
case	O
RC_MOON_CHAR	char
:	O
case	O
RC_MOON_IMAGE_CHAR	char
:	O
case	O
RC_BIO_CHAR	char
:	O
case	O
RC_BIO_BAR_CHAR	char
:	O
case	O
RC_TDATE_CHAR	char
:	O
case	O
RC_JDAYS_CHAR	char
:	O
case	O
RC_TIME_CHAR	char
:	O
case	O
RC_TIME_TMI_CHAR	char
:	O
case	O
RC_TIME_HR_CHAR	char
:	O
case	O
RC_TIME_MI_CHAR	char
:	O
case	O
RC_TIME_AMPM_CHAR	char
:	O
case	O
RC_GMTIME_CHAR	char
:	O
case	O
RC_GMTIME_TMI_CHAR	char
:	O
case	O
RC_GMTIME_HR_CHAR	char
:	O
case	O
RC_GMTIME_MI_CHAR	char
:	O
case	O
RC_GMTIME_AMPM_CHAR	char
:	O
case	O
RC_LT_ZONE_OFFS_CHAR	char
:	O
case	O
RC_UT_ZONE_OFFS_CHAR	char
:	O
case	O
RC_DISTANCE_CHAR	char
:	O
case	O
RC_SUN_RISE_CHAR	char
:	O
case	O
RC_SUN_SET_CHAR	char
:	O
case	O
RC_SUN_DAY_CHAR	char
:	O
case	O
RC_SUN_NIGHT_CHAR	char
:	O
case	O
RC_MOON_RISE_CHAR	char
:	O
case	O
RC_MOON_SET_CHAR	char
:	O
case	O
RC_MOON_DAY_CHAR	char
:	O
case	O
RC_MOON_NIGHT_CHAR	char
:	O
case	O
RC_DAY_DIFF_CHAR	char
:	O
case	O
RC_WEEK_DIFF_CHAR	char
:	O
case	O
RC_MONTH_DIFF_CHAR	char
:	O
case	O
RC_YEAR_DIFF_CHAR	char
:	O
case	O
RC_HLS1S_CHAR	O
:	O
case	O
RC_HLS1E_CHAR	O
:	O
case	O
RC_HLS2S_CHAR	char
:	O
case	O
RC_HLS2E_CHAR	char
:	O
case	O
RC_HLS3S_CHAR	char
:	O
case	O
RC_HLS3E_CHAR	char
:	O
case	O
RC_HLS4S_CHAR	char
:	O
case	O
RC_HLS4E_CHAR	char
:	O
case	O
RC_HLS5S_CHAR	char
:	O
case	O
RC_HLS5E_CHAR	char
:	O
if	O
(	O
had_quote	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"%c%c%s"	pointer
,	O
ch	pointer
,	O
ch2	int
,	O
ptr_char	pointer
)	O
;	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"%c%s"	pointer
,	O
ch2	int
,	O
ptr_char	pointer
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
ch3	int
==	O
RC_TVAR_CHAR	char
||	O
ch3	int
==	O
RC_SPECIAL_TEXT_CHAR	O
||	O
ch3	int
==	O
QUOTE_CHAR	char
||	O
ch3	int
==	O
RC_NL_CHAR	char
||	O
ch3	int
==	O
RC_NL2_CHAR	char
)	O
{	O
*	O
(	O
ptr_char	pointer
+	O
flen	pointer
-	O
1	int
)	O
=	O
'\0'	O
;	O
ungetc	function
(	O
ch3	int
,	O
fp	pointer
)	O
;	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"%c%c%s"	pointer
,	O
ch	pointer
,	O
ch2	int
,	O
ptr_char	pointer
)	O
;	O
}	O
}	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"%c%c"	pointer
,	O
ch	pointer
,	O
ch2	int
)	O
;	O
had_quote	int
=	O
FALSE	O
;	O
break	O
;	O
default	O
:	O
fputc	function
(	O
ch	pointer
,	O
stdout	pointer
)	O
;	O
if	O
(	O
ch2	int
==	O
QUOTE_CHAR	char
)	O
{	O
if	O
(	O
had_quote	int
)	O
fputc	function
(	O
ch2	int
,	O
stdout	pointer
)	O
;	O
ch3	int
=	O
fgetc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
ch3	int
!=	O
EOF	O
)	O
switch	O
(	O
ch3	int
)	O
{	O
case	O
QUOTE_CHAR	char
:	O
fputc	function
(	O
ch3	int
,	O
stdout	pointer
)	O
;	O
had_quote	int
=	O
TRUE	O
;	O
break	O
;	O
default	O
:	O
had_quote	int
=	O
FALSE	O
;	O
ungetc	function
(	O
ch3	int
,	O
fp	pointer
)	O
;	O
}	O
else	O
{	O
fputc	function
(	O
ch2	int
,	O
stdout	pointer
)	O
;	O
had_quote	int
=	O
FALSE	O
;	O
}	O
}	O
else	O
{	O
ungetc	function
(	O
ch2	int
,	O
fp	pointer
)	O
;	O
had_quote	int
=	O
FALSE	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
fputc	function
(	O
ch	pointer
,	O
stdout	pointer
)	O
;	O
had_quote	int
=	O
FALSE	O
;	O
}	O
if	O
(	O
is_eof	pointer
)	O
break	O
;	O
got_quote	int
=	O
FALSE	O
;	O
}	O
(	O
void	O
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
