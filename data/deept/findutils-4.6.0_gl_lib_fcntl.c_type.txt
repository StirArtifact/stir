int	O
rpl_fcntl	function
(	O
int	O
fd	int
,	O
int	O
action	int
,	O
...	O
)	O
{	O
va_list	array
arg	array
;	O
int	O
result	int
=	O
-	O
1	int
;	O
va_start	O
(	O
arg	array
,	O
action	int
)	O
;	O
switch	O
(	O
action	int
)	O
{	O
case	O
F_DUPFD	int
:	O
{	O
int	O
target	int
=	O
va_arg	O
(	O
arg	array
,	O
int	O
)	O
;	O
if	O
(	O
target	int
<	O
0	int
||	O
getdtablesize	function
(	O
)	O
<=	O
target	int
)	O
errno	O
=	O
EINVAL	int
;	O
else	O
{	O
int	O
flags	int
=	O
fcntl	function
(	O
fd	int
,	O
F_GETFD	int
)	O
;	O
if	O
(	O
flags	int
<	O
0	int
)	O
{	O
result	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
result	int
=	O
fcntl	function
(	O
fd	int
,	O
action	int
,	O
target	int
)	O
;	O
if	O
(	O
0	int
<=	O
result	int
&&	O
fcntl	function
(	O
fd	int
,	O
F_SETFD	int
,	O
flags	int
)	O
==	O
-	O
1	int
)	O
{	O
int	O
saved_errno	int
=	O
errno	O
;	O
close	function
(	O
result	int
)	O
;	O
result	int
=	O
-	O
1	int
;	O
errno	O
=	O
saved_errno	int
;	O
}	O
}	O
break	O
;	O
}	O
case	O
F_DUPFD_CLOEXEC	int
:	O
{	O
int	O
target	int
=	O
va_arg	O
(	O
arg	array
,	O
int	O
)	O
;	O
static	O
int	O
have_dupfd_cloexec	int
=	O
GNULIB_defined_F_DUPFD_CLOEXEC	int
?	O
-	O
1	int
:	O
0	int
;	O
if	O
(	O
0	int
<=	O
have_dupfd_cloexec	int
)	O
{	O
result	int
=	O
fcntl	function
(	O
fd	int
,	O
action	int
,	O
target	int
)	O
;	O
if	O
(	O
0	int
<=	O
result	int
||	O
errno	O
!=	O
EINVAL	int
)	O
{	O
have_dupfd_cloexec	int
=	O
1	int
;	O
}	O
else	O
{	O
result	int
=	O
rpl_fcntl	function
(	O
fd	int
,	O
F_DUPFD	int
,	O
target	int
)	O
;	O
if	O
(	O
result	int
<	O
0	int
)	O
break	O
;	O
have_dupfd_cloexec	int
=	O
-	O
1	int
;	O
}	O
}	O
else	O
result	int
=	O
rpl_fcntl	function
(	O
fd	int
,	O
F_DUPFD	int
,	O
target	int
)	O
;	O
if	O
(	O
0	int
<=	O
result	int
&&	O
have_dupfd_cloexec	int
==	O
-	O
1	int
)	O
{	O
int	O
flags	int
=	O
fcntl	function
(	O
result	int
,	O
F_GETFD	int
)	O
;	O
if	O
(	O
flags	int
<	O
0	int
||	O
fcntl	function
(	O
result	int
,	O
F_SETFD	int
,	O
flags	int
|	O
FD_CLOEXEC	int
)	O
==	O
-	O
1	int
)	O
{	O
int	O
saved_errno	int
=	O
errno	O
;	O
close	function
(	O
result	int
)	O
;	O
errno	O
=	O
saved_errno	int
;	O
result	int
=	O
-	O
1	int
;	O
}	O
}	O
break	O
;	O
}	O
default	O
:	O
{	O
void	O
*	O
p	pointer
=	O
va_arg	O
(	O
arg	array
,	O
void	O
*	O
)	O
;	O
result	int
=	O
fcntl	function
(	O
fd	int
,	O
action	int
,	O
p	pointer
)	O
;	O
break	O
;	O
}	O
}	O
va_end	O
(	O
arg	array
)	O
;	O
return	O
result	int
;	O
}	O
