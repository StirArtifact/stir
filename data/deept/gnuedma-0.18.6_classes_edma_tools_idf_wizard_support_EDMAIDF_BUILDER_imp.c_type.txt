typedef	O
struct	O
{	O
EPChar	pointer
FileName	pointer
;	O
EUint32	long
h	long
;	O
}	O
DtEDMAIDF_BUILDER	struct
;	O
ESint32	int
EDMAPROC	O
EDMAIDF_BUILDERbuildU32Z	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
,	O
EPChar	pointer
filename	pointer
)	O
{	O
DtEDMAIDF_BUILDER	struct
*	O
m	pointer
;	O
FILE	struct
*	O
f	pointer
;	O
EChar	char
temp	array
[	O
256	int
]	O
,	O
temp1	array
[	O
256	int
]	O
,	O
temp2	array
[	O
256	int
]	O
;	O
EUint32	long
i	int
,	O
j	long
,	O
n	long
;	O
EUint32	long
m_virtual	long
,	O
m_abstract	long
,	O
m_static	long
;	O
ESint32	int
aux	int
;	O
m	pointer
=	O
(	O
DtEDMAIDF_BUILDER	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Opening file %s"	pointer
,	O
filename	pointer
)	O
;	O
f	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"wt"	pointer
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't open file %s for writting"	pointer
,	O
filename	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
fprintf	function
(	O
f	pointer
,	O
";\n"	pointer
";   Copyright (C) YEAR\n"	pointer
";             by Author\n"	pointer
";\n"	pointer
";   This program is free software: you can redistribute it and/or modify\n"	pointer
";   it under the terms of the GNU General Public License as published by\n"	pointer
";   the Free Software Foundation, either version 3 of the License, or\n"	pointer
";   (at your option) any later version.\n"	pointer
";\n"	pointer
";   This program is distributed in the hope that it will be useful,\n"	pointer
";   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"	pointer
";   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"	pointer
";   GNU General Public License for more details.\n"	pointer
";\n"	pointer
";   You should have received a copy of the GNU General Public License\n"	pointer
";   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"	pointer
";\n"	pointer
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Writting General Section"	pointer
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"[General]"	pointer
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Ready to read ClassName"	pointer
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"ClassName"	pointer
,	O
temp	array
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"ClassName: %s"	pointer
,	O
temp	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nName=%s"	pointer
,	O
temp	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\n[SYS_DEF]"	pointer
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"ModuleName"	pointer
,	O
temp	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nModuleName=%s"	pointer
,	O
temp	array
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"NameSpace"	pointer
,	O
temp	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nNameSpace=%s"	pointer
,	O
temp	array
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"MajorVersion"	pointer
,	O
&	O
aux	int
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nMajorVer=%ld"	pointer
,	O
aux	int
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"MinorVersion"	pointer
,	O
&	O
aux	int
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nMinorVer=%ld"	pointer
,	O
aux	int
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\n[Definition]"	pointer
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"nProp"	pointer
,	O
&	O
n	long
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nPropertiesNum=%ld"	pointer
,	O
n	long
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"nMet"	pointer
,	O
&	O
n	long
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nMethodsNum=%ld"	pointer
,	O
n	long
)	O
;	O
edma_rprop3	function
(	O
id	int
,	O
"nSC"	pointer
,	O
&	O
n	long
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Processing %d Superclasses"	pointer
,	O
n	long
)	O
;	O
if	O
(	O
n	long
)	O
{	O
fprintf	function
(	O
f	pointer
,	O
"\nSCList="	pointer
)	O
;	O
if	O
(	O
n	long
>	O
0	int
)	O
{	O
edma_met3	function
(	O
id	int
,	O
"GetSC"	pointer
,	O
0	int
,	O
temp	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"%s"	pointer
,	O
temp	array
)	O
;	O
}	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
{	O
edma_met3	function
(	O
id	int
,	O
"GetSC"	pointer
,	O
i	int
,	O
temp	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
",%s"	pointer
,	O
temp	array
)	O
;	O
}	O
}	O
edma_rprop3	function
(	O
id	int
,	O
"nProp"	pointer
,	O
&	O
n	long
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Processing %d properties"	pointer
,	O
n	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
{	O
fprintf	function
(	O
f	pointer
,	O
"\n[Prop%ld]"	pointer
,	O
i	int
)	O
;	O
edma_met3	function
(	O
id	int
,	O
"GetProp"	pointer
,	O
i	int
,	O
temp	array
,	O
temp1	array
,	O
temp2	array
,	O
&	O
j	long
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Writing Prop %d: %s|%s|%s|%d"	pointer
,	O
i	int
,	O
temp	array
,	O
temp1	array
,	O
temp2	array
,	O
j	long
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nName=%s"	pointer
,	O
temp	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nType=%s"	pointer
,	O
temp1	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nAccess=%s"	pointer
,	O
temp2	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nArrayElems="	pointer
)	O
;	O
if	O
(	O
j	long
)	O
fprintf	function
(	O
f	pointer
,	O
"%ld"	pointer
,	O
j	long
)	O
;	O
}	O
edma_rprop3	function
(	O
id	int
,	O
"nMet"	pointer
,	O
&	O
n	long
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Processing %d Methods"	pointer
,	O
n	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
{	O
fprintf	function
(	O
f	pointer
,	O
"\n[Met%ld]"	pointer
,	O
i	int
)	O
;	O
edma_met3	function
(	O
id	int
,	O
"GetMet"	pointer
,	O
i	int
,	O
temp	array
,	O
temp1	array
,	O
&	O
m_virtual	long
,	O
&	O
m_abstract	long
,	O
&	O
m_static	long
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Method %d: %s|%s|%d\%d\%d"	pointer
,	O
i	int
,	O
temp	array
,	O
temp1	array
,	O
m_virtual	long
,	O
m_abstract	long
,	O
m_static	long
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nName=%s"	pointer
,	O
temp	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nSignature=%s"	pointer
,	O
temp1	array
)	O
;	O
fprintf	function
(	O
f	pointer
,	O
"\nVirtual=%ld"	pointer
,	O
m_virtual	long
)	O
;	O
if	O
(	O
m_abstract	long
)	O
fprintf	function
(	O
f	pointer
,	O
"\nAbstract=%ld"	pointer
,	O
m_abstract	long
)	O
;	O
if	O
(	O
m_static	long
)	O
fprintf	function
(	O
f	pointer
,	O
"\nStatic=%ld"	pointer
,	O
m_static	long
)	O
;	O
}	O
fprintf	function
(	O
f	pointer
,	O
"\n[]\n"	pointer
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
0	int
;	O
}	O
