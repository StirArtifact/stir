struct	O
passwd	struct
*	O
pass	pointer
;	O
char	O
*	O
prime_ver	pointer
=	O
"2.0"	pointer
;	O
char	O
*	O
nulldev	pointer
=	O
"/dev/null"	pointer
;	O
char	O
*	O
copyright_notice	pointer
=	O
"Copyright Mohammed Isam, 2013, 2014, 2015, 2016, 2017, 2018\n"	pointer
"Prime is a GNU software, part of the GnuDOS package\n"	pointer
"Prime is a file manager for the GNU/Linux console/xterm.\n"	pointer
"It was developed with ease of use and simplicity in mind.\n"	pointer
;	O
extern	O
int	O
NEW_GNU_DOS_LEVEL	int
;	O
extern	O
int	O
write_config_file_defaults	function
(	O
)	O
;	O
char	O
*	O
config_file_name	pointer
;	O
FILE	struct
*	O
config_file	pointer
;	O
int	O
GNU_DOS_LEVEL	int
;	O
void	O
parse_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
return	O
;	O
}	O
int	O
c	int
;	O
static	O
int	O
EXPORT_FLAG	int
=	O
0	int
;	O
char	O
*	O
EXPORT_DIR	pointer
=	O
NULL	O
,	O
*	O
EXPORT_FILE	pointer
=	O
NULL	O
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"reset-config"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'r'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'h'	O
}	O
,	O
{	O
"level"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'l'	O
}	O
,	O
{	O
"export"	pointer
,	O
required_argument	int
,	O
&	O
EXPORT_FLAG	int
,	O
'e'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'v'	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"vhl:e:r"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
'r'	O
:	O
if	O
(	O
!	O
write_config_file_defaults	function
(	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error writing default config file: .prime.conf.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
printf	function
(	O
"Configuration has been reset. Changes were written to ~/.prime.conf\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
EXPORT_DIR	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
EXPORT_DIR	pointer
)	O
goto	O
memerr	O
;	O
strcpy	function
(	O
EXPORT_DIR	pointer
,	O
optarg	pointer
)	O
;	O
EXPORT_FLAG	int
=	O
1	int
;	O
break	O
;	O
case	O
'l'	O
:	O
c	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
c	int
<	O
1	int
||	O
c	int
>	O
6	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Unrecognised level. See 'man prime' or "	pointer
"'info prime' for information about possible levels.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
NEW_GNU_DOS_LEVEL	int
=	O
c	int
;	O
break	O
;	O
case	O
'v'	O
:	O
printf	function
(	O
"%s\n"	pointer
,	O
prime_ver	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
printf	function
(	O
"Prime File Manager, Version %s\n"	pointer
"%s\nUsage: %s [options] [dir-name]\n"	pointer
"\nOptions:\n"	pointer
"  [-e, --export] dir file:\n"	pointer
"  \texport directory tree of 'dir' into 'file'\n"	pointer
"  [-h, --help]:\n"	pointer
"  \tshow this help\n"	pointer
"  [-l,--level] GNU DOS level:\n"	pointer
"  \tthe GNU DOS level of experience to be used\n"	pointer
"  [-r, --reset-config]:\n"	pointer
"  \treset the configuration file to it's defaults\n"	pointer
"  [-v, --version]:\n"	pointer
"  \tprint software version and exit\n"	pointer
"  dir-name: is the name of directory to load into Prime at startup\n\n"	pointer
,	O
prime_ver	pointer
,	O
copyright_notice	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'?'	O
:	O
exit	function
(	O
1	int
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
>=	O
argc	int
&&	O
EXPORT_FLAG	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error: Missing argument: export-filename\n"	pointer
"Try %s -h or %s --help\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
while	O
(	O
optind	int
<	O
argc	int
)	O
{	O
if	O
(	O
EXPORT_FLAG	int
)	O
{	O
EXPORT_FILE	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
argv	pointer
[	O
optind	int
]	O
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
EXPORT_FILE	pointer
)	O
goto	O
memerr	O
;	O
strcpy	function
(	O
EXPORT_FILE	pointer
,	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
exportTreeFromCommandLine	function
(	O
EXPORT_DIR	pointer
,	O
EXPORT_FILE	pointer
)	O
;	O
EXPORT_FLAG	int
=	O
0	int
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
char	O
*	O
tmp	array
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
argv	pointer
[	O
optind	int
]	O
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
tmp	array
)	O
goto	O
memerr	O
;	O
strcpy	function
(	O
tmp	array
,	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
struct	O
stat	struct
st	struct
;	O
if	O
(	O
stat	struct
(	O
tmp	array
,	O
&	O
st	struct
)	O
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Directory '%s' doesn't exist.\n"	pointer
,	O
tmp	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Starting prime from current working directory.\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Press any key.."	pointer
)	O
;	O
getchar	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
S_ISDIR	O
(	O
st	struct
.	O
st_mode	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error: '%s' is not a directory.\n"	pointer
,	O
tmp	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Starting prime from current working directory.\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Press any key.."	pointer
)	O
;	O
getchar	function
(	O
)	O
;	O
}	O
else	O
{	O
int	O
z	int
=	O
chdir	function
(	O
tmp	array
)	O
;	O
if	O
(	O
z	int
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error changing directory to '%s'\n"	pointer
,	O
tmp	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
free	function
(	O
tmp	array
)	O
;	O
break	O
;	O
}	O
return	O
;	O
memerr	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"Insufficient memory\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
