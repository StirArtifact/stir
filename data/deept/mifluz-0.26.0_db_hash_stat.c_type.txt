static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: hash_stat.c,v 1.4 2000/06/28 16:47:01 loic Exp $"	pointer
;	O
static	O
int	O
__ham_stat_callback	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
PAGE	struct
*	O
,	O
void	O
*	O
,	O
int	O
*	O
)	O
)	O
;	O
int	O
CDB___ham_stat	function
(	O
dbp	pointer
,	O
spp	pointer
,	O
db_malloc	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
void	O
*	O
spp	pointer
,	O
*	O
(	O
*	O
db_malloc	pointer
)	O
__P	O
(	O
(	O
size_t	long
)	O
)	O
;	O
u_int32_t	int
flags	int
;	O
{	O
DB_HASH_STAT	struct
*	O
sp	pointer
;	O
HASH_CURSOR	struct
*	O
hcp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
PAGE	struct
*	O
h	pointer
;	O
db_pgno_t	int
pgno	int
;	O
int	O
ret	int
;	O
PANIC_CHECK	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
;	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"DB->stat"	pointer
)	O
;	O
sp	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_statchk	function
(	O
dbp	pointer
,	O
flags	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
cursor	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
&	O
dbc	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
hcp	pointer
=	O
(	O
HASH_CURSOR	struct
*	O
)	O
dbc	pointer
->	O
internal	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_get_meta	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
sizeof	O
(	O
*	O
sp	pointer
)	O
,	O
db_malloc	pointer
,	O
&	O
sp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
memset	function
(	O
sp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
sp	pointer
)	O
)	O
;	O
if	O
(	O
flags	int
==	O
DB_CACHED_COUNTS	int
)	O
{	O
sp	pointer
->	O
hash_nkeys	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
key_count	int
;	O
sp	pointer
->	O
hash_ndata	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
record_count	int
;	O
goto	O
done	O
;	O
}	O
sp	pointer
->	O
hash_pagesize	int
=	O
dbp	pointer
->	O
pgsize	int
;	O
sp	pointer
->	O
hash_buckets	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
max_bucket	int
+	O
1	int
;	O
sp	pointer
->	O
hash_magic	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
magic	int
;	O
sp	pointer
->	O
hash_version	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
version	int
;	O
sp	pointer
->	O
hash_metaflags	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
flags	int
;	O
sp	pointer
->	O
hash_nelem	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
nelem	int
;	O
sp	pointer
->	O
hash_ffactor	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
ffactor	int
;	O
for	O
(	O
sp	pointer
->	O
hash_free	int
=	O
0	int
,	O
pgno	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
free	int
;	O
pgno	int
!=	O
PGNO_INVALID	int
;	O
)	O
{	O
++	O
sp	pointer
->	O
hash_free	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
h	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
pgno	int
=	O
h	pointer
->	O
next_pgno	int
;	O
(	O
void	O
)	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
h	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_traverse	function
(	O
dbp	pointer
,	O
dbc	pointer
,	O
DB_LOCK_READ	int
,	O
__ham_stat_callback	function
,	O
sp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
!	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_dirty_meta	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
key_count	int
=	O
sp	pointer
->	O
hash_nkeys	int
;	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
record_count	int
=	O
sp	pointer
->	O
hash_ndata	int
;	O
}	O
done	O
:	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_release_meta	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
dbc	pointer
->	O
c_close	pointer
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
*	O
(	O
DB_HASH_STAT	struct
*	O
*	O
)	O
spp	pointer
=	O
sp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
err	pointer
:	O
if	O
(	O
sp	pointer
!=	O
NULL	O
)	O
CDB___os_free	function
(	O
sp	pointer
,	O
sizeof	O
(	O
*	O
sp	pointer
)	O
)	O
;	O
if	O
(	O
hcp	pointer
->	O
hdr	struct
!=	O
NULL	O
)	O
(	O
void	O
)	O
CDB___ham_release_meta	function
(	O
dbc	pointer
)	O
;	O
(	O
void	O
)	O
dbc	pointer
->	O
c_close	pointer
(	O
dbc	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___ham_traverse	function
(	O
dbp	pointer
,	O
dbc	pointer
,	O
mode	enum
,	O
callback	pointer
,	O
cookie	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
db_lockmode_t	enum
mode	enum
;	O
int	O
(	O
*	O
callback	pointer
)	O
__P	O
(	O
(	O
DB	struct
*	O
,	O
PAGE	struct
*	O
,	O
void	O
*	O
,	O
int	O
*	O
)	O
)	O
;	O
void	O
*	O
cookie	pointer
;	O
{	O
HASH_CURSOR	struct
*	O
hcp	pointer
;	O
HKEYDATA	struct
*	O
hk	pointer
;	O
DBC	struct
*	O
opd	pointer
;	O
db_pgno_t	int
pgno	int
,	O
opgno	int
;	O
u_int32_t	int
bucket	int
;	O
int	O
did_put	int
,	O
i	int
,	O
ret	int
,	O
t_ret	int
;	O
hcp	pointer
=	O
(	O
HASH_CURSOR	struct
*	O
)	O
dbc	pointer
->	O
internal	pointer
;	O
opd	pointer
=	O
NULL	O
;	O
ret	int
=	O
0	int
;	O
for	O
(	O
bucket	int
=	O
0	int
;	O
bucket	int
<=	O
hcp	pointer
->	O
hdr	struct
->	O
max_bucket	int
;	O
bucket	int
++	O
)	O
{	O
hcp	pointer
->	O
bucket	int
=	O
bucket	int
;	O
hcp	pointer
->	O
pgno	int
=	O
pgno	int
=	O
BUCKET_TO_PAGE	O
(	O
hcp	pointer
,	O
bucket	int
)	O
;	O
for	O
(	O
ret	int
=	O
CDB___ham_get_cpage	function
(	O
dbc	pointer
,	O
mode	enum
)	O
;	O
ret	int
==	O
0	int
;	O
ret	int
=	O
CDB___ham_next_cpage	function
(	O
dbc	pointer
,	O
pgno	int
,	O
0	int
)	O
)	O
{	O
pgno	int
=	O
NEXT_PGNO	O
(	O
hcp	pointer
->	O
page	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_ENT	O
(	O
hcp	pointer
->	O
page	pointer
)	O
;	O
i	int
++	O
)	O
{	O
hk	pointer
=	O
(	O
HKEYDATA	struct
*	O
)	O
P_ENTRY	O
(	O
hcp	pointer
->	O
page	pointer
,	O
i	int
)	O
;	O
switch	O
(	O
HPAGE_PTYPE	O
(	O
hk	pointer
)	O
)	O
{	O
case	O
H_OFFDUP	int
:	O
memcpy	function
(	O
&	O
opgno	int
,	O
HOFFDUP_PGNO	O
(	O
hk	pointer
)	O
,	O
sizeof	O
(	O
db_pgno_t	int
)	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_icursor	function
(	O
dbp	pointer
,	O
dbc	pointer
->	O
txn	pointer
,	O
dbp	pointer
->	O
dup_compare	pointer
==	O
NULL	O
?	O
DB_RECNO	int
:	O
DB_BTREE	int
,	O
opgno	int
,	O
1	int
,	O
&	O
opd	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_traverse	function
(	O
opd	pointer
,	O
DB_LOCK_READ	int
,	O
opgno	int
,	O
__ham_stat_callback	function
,	O
cookie	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
opd	pointer
->	O
c_close	pointer
(	O
opd	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
opd	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
H_OFFPAGE	int
:	O
memcpy	function
(	O
&	O
opgno	int
,	O
HOFFPAGE_PGNO	O
(	O
hk	pointer
)	O
,	O
sizeof	O
(	O
db_pgno_t	int
)	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_traverse_big	function
(	O
dbp	pointer
,	O
opgno	int
,	O
callback	pointer
,	O
cookie	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
break	O
;	O
case	O
H_KEYDATA	int
:	O
break	O
;	O
}	O
}	O
if	O
(	O
(	O
ret	int
=	O
callback	pointer
(	O
dbp	pointer
,	O
hcp	pointer
->	O
page	pointer
,	O
cookie	pointer
,	O
&	O
did_put	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
did_put	int
)	O
hcp	pointer
->	O
page	pointer
=	O
NULL	O
;	O
if	O
(	O
pgno	int
==	O
PGNO_INVALID	int
)	O
break	O
;	O
}	O
if	O
(	O
ret	int
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
STD_LOCKING	O
(	O
dbc	pointer
)	O
)	O
(	O
void	O
)	O
CDB_lock_put	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
&	O
hcp	pointer
->	O
lock	struct
)	O
;	O
if	O
(	O
hcp	pointer
->	O
page	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
dbc	pointer
->	O
dbp	pointer
,	O
hcp	pointer
->	O
page	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
hcp	pointer
->	O
page	pointer
=	O
NULL	O
;	O
}	O
}	O
err	pointer
:	O
if	O
(	O
opd	pointer
!=	O
NULL	O
&&	O
(	O
t_ret	int
=	O
opd	pointer
->	O
c_close	pointer
(	O
opd	pointer
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
__ham_stat_callback	function
(	O
dbp	pointer
,	O
pagep	pointer
,	O
cookie	pointer
,	O
putp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
void	O
*	O
cookie	pointer
;	O
int	O
*	O
putp	pointer
;	O
{	O
DB_HASH_STAT	struct
*	O
sp	pointer
;	O
DB_BTREE_STAT	struct
bstat	struct
;	O
db_indx_t	short
indx	short
,	O
len	short
,	O
off	long
,	O
tlen	int
,	O
top	short
;	O
u_int8_t	char
*	O
hk	pointer
;	O
*	O
putp	pointer
=	O
0	int
;	O
sp	pointer
=	O
cookie	pointer
;	O
switch	O
(	O
TYPE	O
(	O
pagep	pointer
)	O
)	O
{	O
case	O
P_INVALID	int
:	O
break	O
;	O
case	O
P_HASH	int
:	O
if	O
(	O
PREV_PGNO	O
(	O
pagep	pointer
)	O
==	O
PGNO_INVALID	int
)	O
sp	pointer
->	O
hash_bfree	int
+=	O
P_FREESPACE	O
(	O
pagep	pointer
)	O
;	O
else	O
{	O
sp	pointer
->	O
hash_overflows	int
++	O
;	O
sp	pointer
->	O
hash_ovfl_free	int
+=	O
P_FREESPACE	O
(	O
pagep	pointer
)	O
;	O
}	O
top	short
=	O
NUM_ENT	O
(	O
pagep	pointer
)	O
;	O
for	O
(	O
indx	short
=	O
0	int
;	O
indx	short
<	O
top	short
;	O
indx	short
+=	O
P_INDX	int
)	O
{	O
switch	O
(	O
*	O
H_PAIRDATA	O
(	O
pagep	pointer
,	O
indx	short
)	O
)	O
{	O
case	O
H_OFFDUP	int
:	O
case	O
H_OFFPAGE	int
:	O
break	O
;	O
case	O
H_KEYDATA	int
:	O
sp	pointer
->	O
hash_ndata	int
++	O
;	O
break	O
;	O
case	O
H_DUPLICATE	int
:	O
tlen	int
=	O
LEN_HDATA	O
(	O
pagep	pointer
,	O
0	int
,	O
indx	short
)	O
;	O
hk	pointer
=	O
H_PAIRDATA	O
(	O
pagep	pointer
,	O
indx	short
)	O
;	O
for	O
(	O
off	long
=	O
0	int
;	O
off	long
<	O
tlen	int
;	O
off	long
+=	O
len	short
+	O
2	int
*	O
sizeof	O
(	O
db_indx_t	short
)	O
)	O
{	O
sp	pointer
->	O
hash_ndata	int
++	O
;	O
memcpy	function
(	O
&	O
len	short
,	O
HKEYDATA_DATA	O
(	O
hk	pointer
)	O
+	O
off	long
,	O
sizeof	O
(	O
db_indx_t	short
)	O
)	O
;	O
}	O
}	O
}	O
sp	pointer
->	O
hash_nkeys	int
+=	O
H_NUMPAIRS	O
(	O
pagep	pointer
)	O
;	O
break	O
;	O
case	O
P_IBTREE	int
:	O
case	O
P_IRECNO	int
:	O
case	O
P_LBTREE	int
:	O
case	O
P_LRECNO	int
:	O
case	O
P_LDUP	int
:	O
memset	function
(	O
&	O
bstat	struct
,	O
0	int
,	O
sizeof	O
(	O
bstat	struct
)	O
)	O
;	O
bstat	struct
.	O
bt_dup_pgfree	int
=	O
0	int
;	O
bstat	struct
.	O
bt_int_pgfree	int
=	O
0	int
;	O
bstat	struct
.	O
bt_leaf_pgfree	int
=	O
0	int
;	O
bstat	struct
.	O
bt_ndata	int
=	O
0	int
;	O
CDB___bam_stat_callback	function
(	O
dbp	pointer
,	O
pagep	pointer
,	O
&	O
bstat	struct
,	O
putp	pointer
)	O
;	O
sp	pointer
->	O
hash_dup	int
++	O
;	O
sp	pointer
->	O
hash_dup_free	int
+=	O
bstat	struct
.	O
bt_leaf_pgfree	int
+	O
bstat	struct
.	O
bt_dup_pgfree	int
+	O
bstat	struct
.	O
bt_int_pgfree	int
;	O
sp	pointer
->	O
hash_ndata	int
+=	O
bstat	struct
.	O
bt_ndata	int
;	O
break	O
;	O
case	O
P_OVERFLOW	int
:	O
sp	pointer
->	O
hash_bigpages	int
++	O
;	O
sp	pointer
->	O
hash_big_bfree	int
+=	O
P_OVFLSPACE	O
(	O
dbp	pointer
->	O
pgsize	int
,	O
pagep	pointer
)	O
;	O
break	O
;	O
default	O
:	O
return	O
(	O
CDB___db_unknown_type	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"__ham_stat_callback"	pointer
,	O
TYPE	O
(	O
pagep	pointer
)	O
)	O
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
