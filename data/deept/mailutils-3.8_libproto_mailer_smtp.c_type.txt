static	O
int	O
_mailer_smtp_init	function
(	O
mu_mailer_t	pointer
)	O
;	O
static	O
int	O
_url_smtp_init	function
(	O
mu_url_t	pointer
url	pointer
)	O
{	O
if	O
(	O
url	pointer
->	O
port	int
==	O
0	int
)	O
url	pointer
->	O
port	int
=	O
MU_SMTP_PORT	int
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_record	struct
_smtp_record	struct
=	O
{	O
MU_SMTP_PRIO	int
,	O
MU_SMTP_SCHEME	pointer
,	O
MU_RECORD_DEFAULT	int
,	O
MU_URL_SCHEME	int
|	O
MU_URL_CRED	O
|	O
MU_URL_INET	O
|	O
MU_URL_PARAM	int
,	O
MU_URL_HOST	int
,	O
_url_smtp_init	function
,	O
_mu_mailer_mailbox_init	function
,	O
_mailer_smtp_init	function
,	O
_mu_mailer_folder_init	function
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
mu_record_t	pointer
mu_smtp_record	pointer
=	O
&	O
_smtp_record	struct
;	O
struct	O
_smtp_mailer	struct
{	O
mu_mailer_t	pointer
mailer	pointer
;	O
mu_smtp_t	pointer
smtp	pointer
;	O
mu_address_t	pointer
rcpt_to	pointer
;	O
mu_address_t	pointer
rcpt_bcc	pointer
;	O
}	O
;	O
static	O
void	O
smtp_mailer_add_auth_mech	function
(	O
struct	O
_smtp_mailer	struct
*	O
smtp_mailer	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
","	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
str	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
)	O
)	O
mu_error	function
(	O
_	O
(	O
"cannot split line `%s': %s"	pointer
)	O
,	O
str	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	long
++	O
)	O
mu_smtp_add_auth_mech	function
(	O
smtp_mailer	pointer
->	O
smtp	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
)	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
}	O
static	O
int	O
smtp_open	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
int	O
flags	int
)	O
{	O
const	O
char	O
*	O
auth	pointer
,	O
*	O
scheme	pointer
;	O
struct	O
_smtp_mailer	struct
*	O
smtp_mailer	pointer
=	O
mailer	pointer
->	O
data	pointer
;	O
int	O
rc	int
;	O
size_t	long
parmc	long
=	O
0	int
;	O
char	O
*	O
*	O
parmv	pointer
=	O
NULL	O
;	O
int	O
tls	int
=	O
0	int
;	O
int	O
nostarttls	int
=	O
0	int
;	O
int	O
noauth	int
=	O
DFLNOAUTH	int
;	O
rc	int
=	O
mu_url_sget_scheme	function
(	O
mailer	pointer
->	O
url	pointer
,	O
&	O
scheme	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
tls	int
=	O
strcmp	function
(	O
scheme	pointer
,	O
"smtps"	pointer
)	O
==	O
0	int
;	O
rc	int
=	O
mu_smtp_create	function
(	O
&	O
smtp_mailer	pointer
->	O
smtp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_debug_level_p	function
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_PROT	int
)	O
)	O
mu_smtp_trace	function
(	O
smtp_mailer	pointer
->	O
smtp	pointer
,	O
MU_SMTP_TRACE_SET	int
)	O
;	O
if	O
(	O
mu_debug_level_p	function
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE6	int
)	O
)	O
mu_smtp_trace_mask	function
(	O
smtp_mailer	pointer
->	O
smtp	pointer
,	O
MU_SMTP_TRACE_SET	int
,	O
MU_XSCRIPT_SECURE	int
)	O
;	O
if	O
(	O
mu_debug_level_p	function
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE7	int
)	O
)	O
mu_smtp_trace_mask	function
(	O
smtp_mailer	pointer
->	O
smtp	pointer
,	O
MU_SMTP_TRACE_SET	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
mu_smtp_set_url	function
(	O
smtp_mailer	pointer
->	O
smtp	pointer
,	O
mailer	pointer
->	O
url	pointer
)	O
;	O
if	O
(	O
mu_url_sget_auth	function
(	O
mailer	pointer
->	O
url	pointer
,	O
&	O
auth	pointer
)	O
==	O
0	int
)	O
smtp_mailer_add_auth_mech	function
(	O
smtp_mailer	pointer
,	O
auth	pointer
)	O
;	O
if	O
(	O
mu_url_sget_fvpairs	function
(	O
mailer	pointer
->	O
url	pointer
,	O
&	O
parmc	long
,	O
&	O
parmv	pointer
)	O
==	O
0	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
parmc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
parmv	pointer
[	O
i	long
]	O
,	O
"notls"	pointer
)	O
==	O
0	int
)	O
nostarttls	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
parmv	pointer
[	O
i	long
]	O
,	O
"noauth"	pointer
)	O
==	O
0	int
)	O
noauth	int
=	O
1	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
parmv	pointer
[	O
i	long
]	O
,	O
"auth="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
smtp_mailer_add_auth_mech	function
(	O
smtp_mailer	pointer
,	O
parmv	pointer
[	O
i	long
]	O
+	O
5	int
)	O
;	O
}	O
}	O
if	O
(	O
mailer	pointer
->	O
stream	pointer
==	O
NULL	O
)	O
{	O
struct	O
mu_sockaddr	struct
*	O
sa	pointer
;	O
struct	O
mu_sockaddr_hints	struct
hints	pointer
;	O
mu_stream_t	pointer
transport	pointer
;	O
memset	function
(	O
&	O
hints	pointer
,	O
0	int
,	O
sizeof	O
(	O
hints	pointer
)	O
)	O
;	O
hints	pointer
.	O
flags	int
=	O
MU_AH_DETECT_FAMILY	int
;	O
hints	pointer
.	O
port	int
=	O
tls	int
?	O
MU_SMTPS_PORT	int
:	O
MU_SMTP_PORT	int
;	O
hints	pointer
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	pointer
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
rc	int
=	O
mu_sockaddr_from_url	function
(	O
&	O
sa	pointer
,	O
mailer	pointer
->	O
url	pointer
,	O
&	O
hints	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_tcp_stream_create_from_sa	function
(	O
&	O
transport	pointer
,	O
sa	pointer
,	O
NULL	O
,	O
mailer	pointer
->	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sockaddr_free	function
(	O
sa	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mailer	pointer
->	O
stream	pointer
=	O
transport	pointer
;	O
mu_stream_set_buffer	function
(	O
mailer	pointer
->	O
stream	pointer
,	O
mu_buffer_line	int
,	O
0	int
)	O
;	O
}	O
mu_smtp_set_carrier	function
(	O
smtp_mailer	pointer
->	O
smtp	pointer
,	O
mailer	pointer
->	O
stream	pointer
)	O
;	O
rc	int
=	O
mu_smtp_open	function
(	O
smtp_mailer	pointer
->	O
smtp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_smtp_ehlo	function
(	O
smtp_mailer	pointer
->	O
smtp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
noauth	int
&&	O
mu_smtp_capa_test	function
(	O
smtp_mailer	pointer
->	O
smtp	pointer
,	O
"AUTH"	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
mu_smtp_auth	function
(	O
smtp_mailer	pointer
->	O
smtp	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
rc	int
=	O
mu_smtp_ehlo	function
(	O
smtp_mailer	pointer
->	O
smtp	pointer
)	O
;	O
break	O
;	O
case	O
ENOSYS	int
:	O
case	O
MU_ERR_AUTH_NO_CRED	O
:	O
mu_diag_output	function
(	O
MU_DIAG_NOTICE	O
,	O
"authentication disabled: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
rc	int
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
smtp_destroy	function
(	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
struct	O
_smtp_mailer	struct
*	O
smp	pointer
=	O
mailer	pointer
->	O
data	pointer
;	O
mu_address_destroy	function
(	O
&	O
smp	pointer
->	O
rcpt_to	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
smp	pointer
->	O
rcpt_bcc	pointer
)	O
;	O
mu_smtp_destroy	function
(	O
&	O
smp	pointer
->	O
smtp	pointer
)	O
;	O
free	function
(	O
smp	pointer
)	O
;	O
mailer	pointer
->	O
data	pointer
=	O
NULL	O
;	O
}	O
static	O
int	O
smtp_close	function
(	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
struct	O
_smtp_mailer	struct
*	O
smp	pointer
=	O
mailer	pointer
->	O
data	pointer
;	O
return	O
mu_smtp_quit	function
(	O
smp	pointer
->	O
smtp	pointer
)	O
;	O
}	O
int	O
smtp_address_add	function
(	O
mu_address_t	pointer
*	O
paddr	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
status	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
value	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_address_union	function
(	O
paddr	pointer
,	O
addr	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
_smtp_property_is_set	function
(	O
struct	O
_smtp_mailer	struct
*	O
smp	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
mu_property_t	pointer
property	pointer
=	O
NULL	O
;	O
mu_mailer_get_property	function
(	O
smp	pointer
->	O
mailer	pointer
,	O
&	O
property	pointer
)	O
;	O
return	O
mu_property_is_set	function
(	O
property	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
int	O
_smtp_set_rcpt	function
(	O
struct	O
_smtp_mailer	struct
*	O
smp	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
mu_address_t	pointer
to	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
to	pointer
)	O
{	O
if	O
(	O
(	O
status	int
=	O
mu_mailer_check_to	function
(	O
to	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_mailer_send_message(): explicit to not valid"	pointer
)	O
)	O
;	O
return	O
status	int
;	O
}	O
smp	pointer
->	O
rcpt_to	pointer
=	O
mu_address_dup	function
(	O
to	pointer
)	O
;	O
if	O
(	O
!	O
smp	pointer
->	O
rcpt_to	pointer
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
if	O
(	O
!	O
to	pointer
||	O
_smtp_property_is_set	function
(	O
smp	pointer
,	O
"READ_RECIPIENTS"	pointer
)	O
)	O
{	O
mu_header_t	pointer
header	pointer
;	O
if	O
(	O
(	O
status	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
header	pointer
)	O
)	O
)	O
return	O
status	int
;	O
do	O
{	O
const	O
char	O
*	O
value	pointer
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_TO	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
smtp_address_add	function
(	O
&	O
smp	pointer
->	O
rcpt_to	pointer
,	O
value	pointer
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_CC	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
smtp_address_add	function
(	O
&	O
smp	pointer
->	O
rcpt_to	pointer
,	O
value	pointer
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_BCC	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
smtp_address_add	function
(	O
&	O
smp	pointer
->	O
rcpt_bcc	pointer
,	O
value	pointer
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
break	O
;	O
if	O
(	O
smp	pointer
->	O
rcpt_to	pointer
&&	O
(	O
status	int
=	O
mu_mailer_check_to	function
(	O
smp	pointer
->	O
rcpt_to	pointer
)	O
)	O
)	O
break	O
;	O
if	O
(	O
smp	pointer
->	O
rcpt_bcc	pointer
&&	O
(	O
status	int
=	O
mu_mailer_check_to	function
(	O
smp	pointer
->	O
rcpt_bcc	pointer
)	O
)	O
)	O
break	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
status	int
)	O
{	O
mu_address_destroy	function
(	O
&	O
smp	pointer
->	O
rcpt_to	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
smp	pointer
->	O
rcpt_bcc	pointer
)	O
;	O
}	O
else	O
{	O
size_t	long
rcpt_cnt	long
,	O
bcc_cnt	long
;	O
if	O
(	O
smp	pointer
->	O
rcpt_to	pointer
)	O
mu_address_get_count	function
(	O
smp	pointer
->	O
rcpt_to	pointer
,	O
&	O
rcpt_cnt	long
)	O
;	O
if	O
(	O
smp	pointer
->	O
rcpt_bcc	pointer
)	O
mu_address_get_count	function
(	O
smp	pointer
->	O
rcpt_bcc	pointer
,	O
&	O
bcc_cnt	long
)	O
;	O
if	O
(	O
rcpt_cnt	long
+	O
bcc_cnt	long
==	O
0	int
)	O
status	int
=	O
MU_ERR_MAILER_NO_RCPT_TO	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
_rcpt_to_addr	function
(	O
mu_smtp_t	pointer
smtp	pointer
,	O
mu_address_t	pointer
addr	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
size_t	long
i	long
,	O
count	pointer
,	O
rcpt_cnt	long
=	O
0	int
;	O
int	O
status	int
;	O
status	int
=	O
mu_address_get_count	function
(	O
addr	pointer
,	O
&	O
count	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	pointer
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
to	pointer
=	O
NULL	O
;	O
status	int
=	O
mu_address_sget_email	function
(	O
addr	pointer
,	O
i	long
,	O
&	O
to	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
&&	O
to	pointer
)	O
{	O
status	int
=	O
mu_smtp_rcpt_basic	function
(	O
smtp	pointer
,	O
to	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
rcpt_cnt	long
++	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_REPLY	O
)	O
break	O
;	O
}	O
}	O
*	O
pcount	pointer
=	O
rcpt_cnt	long
;	O
return	O
status	int
;	O
}	O
static	O
int	O
smtp_send_message	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
mu_address_t	pointer
argfrom	pointer
,	O
mu_address_t	pointer
argto	pointer
)	O
{	O
struct	O
_smtp_mailer	struct
*	O
smp	pointer
;	O
mu_smtp_t	pointer
smtp	pointer
;	O
int	O
status	int
;	O
size_t	long
size	long
,	O
lines	long
,	O
count	pointer
;	O
const	O
char	O
*	O
mail_from	pointer
,	O
*	O
size_str	pointer
;	O
mu_header_t	pointer
header	pointer
;	O
if	O
(	O
mailer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
smp	pointer
=	O
mailer	pointer
->	O
data	pointer
;	O
if	O
(	O
!	O
smp	pointer
)	O
return	O
EINVAL	int
;	O
smtp	pointer
=	O
smp	pointer
->	O
smtp	pointer
;	O
if	O
(	O
(	O
status	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
header	pointer
)	O
)	O
)	O
return	O
status	int
;	O
status	int
=	O
_smtp_set_rcpt	function
(	O
smp	pointer
,	O
msg	pointer
,	O
argto	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_address_sget_email	function
(	O
argfrom	pointer
,	O
1	int
,	O
&	O
mail_from	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
!	O
mail_from	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
mu_smtp_capa_test	function
(	O
smtp	pointer
,	O
"SIZE"	pointer
,	O
&	O
size_str	pointer
)	O
==	O
0	int
&&	O
mu_message_size	function
(	O
msg	pointer
,	O
&	O
size	long
)	O
==	O
0	int
&&	O
mu_message_lines	function
(	O
msg	pointer
,	O
&	O
lines	long
)	O
==	O
0	int
)	O
{	O
size_t	long
msgsize	long
=	O
size	long
+	O
lines	long
;	O
if	O
(	O
strncmp	function
(	O
size_str	pointer
,	O
"SIZE "	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
size_t	long
maxsize	long
=	O
strtoul	function
(	O
size_str	pointer
+	O
5	int
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
msgsize	long
&&	O
maxsize	long
&&	O
msgsize	long
>	O
maxsize	long
)	O
return	O
EFBIG	int
;	O
}	O
status	int
=	O
mu_smtp_mail_basic	function
(	O
smtp	pointer
,	O
mail_from	pointer
,	O
"SIZE=%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
msgsize	long
)	O
;	O
}	O
else	O
status	int
=	O
mu_smtp_mail_basic	function
(	O
smtp	pointer
,	O
mail_from	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
if	O
(	O
status	int
==	O
MU_ERR_REPLY	O
)	O
mu_smtp_rset	function
(	O
smtp	pointer
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
_rcpt_to_addr	function
(	O
smtp	pointer
,	O
smp	pointer
->	O
rcpt_to	pointer
,	O
&	O
count	pointer
)	O
;	O
if	O
(	O
status	int
&&	O
count	pointer
==	O
0	int
)	O
{	O
if	O
(	O
status	int
==	O
MU_ERR_REPLY	O
)	O
mu_smtp_rset	function
(	O
smtp	pointer
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
_rcpt_to_addr	function
(	O
smtp	pointer
,	O
smp	pointer
->	O
rcpt_bcc	pointer
,	O
&	O
count	pointer
)	O
;	O
if	O
(	O
status	int
&&	O
count	pointer
==	O
0	int
)	O
{	O
if	O
(	O
status	int
==	O
MU_ERR_REPLY	O
)	O
mu_smtp_rset	function
(	O
smtp	pointer
)	O
;	O
return	O
status	int
;	O
}	O
if	O
(	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_BCC	pointer
,	O
NULL	O
)	O
==	O
0	int
||	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_FCC	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
mu_stream_t	pointer
ostr	pointer
,	O
bstr	pointer
;	O
status	int
=	O
mu_smtp_data	function
(	O
smtp	pointer
,	O
&	O
ostr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
if	O
(	O
status	int
==	O
MU_ERR_REPLY	O
)	O
mu_smtp_rset	function
(	O
smtp	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_header_get_iterator	function
(	O
header	pointer
,	O
&	O
itr	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
void	O
*	O
value	pointer
;	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
)	O
&	O
name	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
name	pointer
,	O
MU_HEADER_BCC	pointer
)	O
==	O
0	int
||	O
mu_c_strcasecmp	function
(	O
name	pointer
,	O
MU_HEADER_FCC	pointer
)	O
==	O
0	int
)	O
continue	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%s: %s\n"	pointer
,	O
name	pointer
,	O
(	O
char	O
*	O
)	O
value	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
mu_stream_write	function
(	O
ostr	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
;	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
bstr	pointer
)	O
;	O
status	int
=	O
mu_stream_copy	function
(	O
ostr	pointer
,	O
bstr	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
bstr	pointer
)	O
;	O
mu_stream_close	function
(	O
ostr	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
ostr	pointer
)	O
;	O
}	O
else	O
{	O
mu_stream_t	pointer
str	pointer
;	O
mu_message_get_streamref	function
(	O
msg	pointer
,	O
&	O
str	pointer
)	O
;	O
status	int
=	O
mu_smtp_send_stream	function
(	O
smtp	pointer
,	O
str	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
}	O
mu_address_destroy	function
(	O
&	O
smp	pointer
->	O
rcpt_to	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
smp	pointer
->	O
rcpt_bcc	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_smtp_dot	function
(	O
smtp	pointer
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_REPLY	O
)	O
mu_smtp_rset	function
(	O
smtp	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
_mailer_smtp_init	function
(	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
struct	O
_smtp_mailer	struct
*	O
smp	pointer
;	O
smp	pointer
=	O
mailer	pointer
->	O
data	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
smp	pointer
)	O
)	O
;	O
if	O
(	O
mailer	pointer
->	O
data	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
smp	pointer
->	O
mailer	pointer
=	O
mailer	pointer
;	O
mailer	pointer
->	O
_destroy	pointer
=	O
smtp_destroy	function
;	O
mailer	pointer
->	O
_open	pointer
=	O
smtp_open	function
;	O
mailer	pointer
->	O
_close	pointer
=	O
smtp_close	function
;	O
mailer	pointer
->	O
_send_message	pointer
=	O
smtp_send_message	function
;	O
{	O
mu_property_t	pointer
property	pointer
=	O
NULL	O
;	O
mu_mailer_get_property	function
(	O
mailer	pointer
,	O
&	O
property	pointer
)	O
;	O
mu_property_set_value	function
(	O
property	pointer
,	O
"TYPE"	pointer
,	O
"SMTP"	pointer
,	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
