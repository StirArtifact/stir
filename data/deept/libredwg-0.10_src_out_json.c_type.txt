static	O
unsigned	O
int	O
cur_ver	int
=	O
0	int
;	O
static	O
void	O
print_wcquote	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
dwg_wchar_t	short
*	O
restrict	O
wstr	pointer
)	O
;	O
static	O
void	O
_prefix	function
(	O
Bit_Chain	struct
*	O
dat	pointer
)	O
;	O
static	O
void	O
field_cmc	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
char	O
*	O
restrict	O
key	pointer
,	O
const	O
Dwg_Color	struct
*	O
restrict	O
color	short
)	O
{	O
if	O
(	O
dat	pointer
->	O
version	short
>=	O
R_2004	int
)	O
{	O
PREFIX	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\"%s\": {\n"	pointer
,	O
key	pointer
)	O
;	O
dat	pointer
->	O
bit	char
++	O
;	O
if	O
(	O
color	short
->	O
index	short
)	O
{	O
PREFIX	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\"index\": %d,\n"	pointer
,	O
color	short
->	O
index	short
)	O
;	O
}	O
PREFIX	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\"rgb\": \"%06x\",\n"	pointer
,	O
(	O
unsigned	O
)	O
color	short
->	O
rgb	int
)	O
;	O
if	O
(	O
color	short
->	O
flag	short
)	O
{	O
PREFIX	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\"flag\": %d,\n"	pointer
,	O
color	short
->	O
flag	short
)	O
;	O
}	O
if	O
(	O
color	short
->	O
flag	short
>	O
0	int
&&	O
color	short
->	O
flag	short
<	O
8	int
)	O
{	O
if	O
(	O
color	short
->	O
flag	short
&	O
1	int
)	O
_FIELD_TV_ALPHA	O
(	O
name	pointer
,	O
color	short
->	O
name	pointer
)	O
if	O
(	O
color	short
->	O
flag	short
&	O
2	int
)	O
_FIELD_TV_ALPHA	O
(	O
book_name	pointer
,	O
color	short
->	O
book_name	pointer
)	O
}	O
ENDRECORD	O
(	O
)	O
;	O
}	O
else	O
{	O
PREFIX	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\"%s\": %d,\n"	pointer
,	O
key	pointer
,	O
color	short
->	O
index	short
)	O
;	O
}	O
}	O
static	O
void	O
_prefix	function
(	O
Bit_Chain	struct
*	O
dat	pointer
)	O
{	O
for	O
(	O
int	O
_i	int
=	O
0	int
;	O
_i	int
<	O
dat	pointer
->	O
bit	char
;	O
_i	int
++	O
)	O
{	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"  "	pointer
)	O
;	O
}	O
}	O
static	O
int	O
json_common_entity_data	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
)	O
{	O
Dwg_Object_Entity	struct
*	O
ent	pointer
;	O
Dwg_Object_Entity	struct
*	O
_obj	pointer
;	O
int	O
error	int
=	O
0	int
;	O
BITCODE_BL	int
vcount	int
=	O
0	int
;	O
ent	pointer
=	O
obj	pointer
->	O
tio	union
.	O
entity	long
;	O
_obj	pointer
=	O
ent	pointer
;	O
return	O
error	int
;	O
}	O
static	O
void	O
print_wcquote	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
dwg_wchar_t	short
*	O
restrict	O
wstr	pointer
)	O
{	O
BITCODE_TU	pointer
ws	pointer
=	O
(	O
BITCODE_TU	pointer
)	O
wstr	pointer
;	O
uint16_t	short
c	short
;	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\""	pointer
)	O
;	O
if	O
(	O
ws	pointer
)	O
{	O
while	O
(	O
(	O
c	short
=	O
*	O
ws	pointer
++	O
)	O
)	O
{	O
if	O
(	O
c	short
==	O
L'"'	O
)	O
{	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\\\""	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	short
==	O
L'\\'	O
)	O
{	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\\\\"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	short
==	O
L'\n'	O
)	O
{	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\\n"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	short
==	O
L'\r'	O
)	O
{	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\\r"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	short
<	O
0x1f	int
||	O
c	short
>	O
0xff	int
)	O
{	O
if	O
(	O
c	short
>=	O
0xd800	int
&&	O
c	short
<	O
0xdc00	int
)	O
{	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\\u%04x"	pointer
,	O
c	short
-	O
0x1000	int
)	O
;	O
}	O
else	O
if	O
(	O
c	short
>=	O
0xdc00	int
&&	O
c	short
<	O
0xe000	int
)	O
;	O
else	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\\u%04x"	pointer
,	O
c	short
)	O
;	O
}	O
else	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"%c"	pointer
,	O
(	O
char	O
)	O
(	O
c	short
&	O
0xff	int
)	O
)	O
;	O
}	O
}	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\",\n"	pointer
)	O
;	O
}	O
char	O
*	O
json_cquote	function
(	O
char	O
*	O
restrict	O
dest	pointer
,	O
const	O
char	O
*	O
restrict	O
src	pointer
,	O
const	O
int	O
len	long
)	O
{	O
unsigned	O
char	O
c	short
;	O
unsigned	O
char	O
*	O
s	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
src	pointer
;	O
const	O
char	O
*	O
endp	pointer
=	O
dest	pointer
+	O
len	long
;	O
char	O
*	O
d	pointer
=	O
dest	pointer
;	O
while	O
(	O
(	O
c	short
=	O
*	O
s	pointer
++	O
)	O
)	O
{	O
if	O
(	O
dest	pointer
>=	O
endp	pointer
)	O
{	O
*	O
dest	pointer
=	O
0	int
;	O
return	O
d	pointer
;	O
}	O
if	O
(	O
c	short
==	O
'"'	O
&&	O
dest	pointer
+	O
1	int
<	O
endp	pointer
)	O
{	O
*	O
dest	pointer
++	O
=	O
'\\'	O
;	O
*	O
dest	pointer
++	O
=	O
c	short
;	O
}	O
else	O
if	O
(	O
c	short
==	O
'\\'	O
&&	O
dest	pointer
+	O
1	int
<	O
endp	pointer
)	O
{	O
*	O
dest	pointer
++	O
=	O
'\\'	O
;	O
*	O
dest	pointer
++	O
=	O
c	short
;	O
}	O
else	O
if	O
(	O
c	short
==	O
'\n'	O
&&	O
dest	pointer
+	O
1	int
<	O
endp	pointer
)	O
{	O
*	O
dest	pointer
++	O
=	O
'\\'	O
;	O
*	O
dest	pointer
++	O
=	O
'n'	O
;	O
}	O
else	O
if	O
(	O
c	short
==	O
'\r'	O
&&	O
dest	pointer
+	O
1	int
<	O
endp	pointer
)	O
{	O
*	O
dest	pointer
++	O
=	O
'\\'	O
;	O
*	O
dest	pointer
++	O
=	O
'r'	O
;	O
}	O
else	O
if	O
(	O
c	short
<	O
0x1f	int
&&	O
dest	pointer
+	O
5	int
<	O
endp	pointer
)	O
{	O
*	O
dest	pointer
++	O
=	O
'\\'	O
;	O
*	O
dest	pointer
++	O
=	O
'u'	O
;	O
*	O
dest	pointer
++	O
=	O
'0'	O
;	O
*	O
dest	pointer
++	O
=	O
'0'	O
;	O
*	O
dest	pointer
++	O
=	O
c	short
<	O
0x10	int
?	O
'0'	O
:	O
'1'	O
;	O
*	O
dest	pointer
++	O
=	O
(	O
c	short
%	O
16	int
)	O
>	O
10	int
?	O
'a'	O
+	O
(	O
c	short
%	O
16	int
)	O
-	O
10	int
:	O
'0'	O
+	O
(	O
c	short
%	O
16	int
)	O
;	O
}	O
else	O
*	O
dest	pointer
++	O
=	O
c	short
;	O
}	O
*	O
dest	pointer
=	O
0	int
;	O
return	O
d	pointer
;	O
}	O
static	O
int	O
dwg_json_variable_type	function
(	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
,	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
)	O
{	O
int	O
i	int
;	O
Dwg_Class	struct
*	O
klass	pointer
;	O
int	O
is_entity	int
;	O
i	int
=	O
obj	pointer
->	O
type	short
-	O
500	int
;	O
if	O
(	O
i	int
<	O
0	int
||	O
i	int
>=	O
(	O
int	O
)	O
dwg	pointer
->	O
num_classes	short
)	O
return	O
DWG_ERR_INVALIDTYPE	int
;	O
klass	pointer
=	O
&	O
dwg	pointer
->	O
dwg_class	pointer
[	O
i	int
]	O
;	O
if	O
(	O
!	O
klass	pointer
||	O
!	O
klass	pointer
->	O
dxfname	pointer
)	O
return	O
DWG_ERR_INTERNALERROR	int
;	O
is_entity	int
=	O
dwg_class_is_entity	function
(	O
klass	pointer
)	O
;	O
return	O
DWG_ERR_UNHANDLEDCLASS	int
;	O
}	O
static	O
int	O
dwg_json_object	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
)	O
{	O
switch	O
(	O
obj	pointer
->	O
type	short
)	O
{	O
case	O
DWG_TYPE_TEXT	int
:	O
return	O
dwg_json_TEXT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_ATTRIB	int
:	O
return	O
dwg_json_ATTRIB	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_ATTDEF	int
:	O
return	O
dwg_json_ATTDEF	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_BLOCK	int
:	O
return	O
dwg_json_BLOCK	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_ENDBLK	int
:	O
return	O
dwg_json_ENDBLK	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_SEQEND	int
:	O
return	O
dwg_json_SEQEND	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_INSERT	int
:	O
return	O
dwg_json_INSERT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_MINSERT	int
:	O
return	O
dwg_json_MINSERT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VERTEX_2D	int
:	O
return	O
dwg_json_VERTEX_2D	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VERTEX_3D	int
:	O
return	O
dwg_json_VERTEX_3D	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VERTEX_MESH	int
:	O
return	O
dwg_json_VERTEX_MESH	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VERTEX_PFACE	int
:	O
return	O
dwg_json_VERTEX_PFACE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VERTEX_PFACE_FACE	int
:	O
return	O
dwg_json_VERTEX_PFACE_FACE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_POLYLINE_2D	int
:	O
return	O
dwg_json_POLYLINE_2D	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_POLYLINE_3D	int
:	O
return	O
dwg_json_POLYLINE_3D	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_ARC	int
:	O
return	O
dwg_json_ARC	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_CIRCLE	int
:	O
return	O
dwg_json_CIRCLE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_LINE	int
:	O
return	O
dwg_json_LINE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_ORDINATE	int
:	O
return	O
dwg_json_DIMENSION_ORDINATE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_LINEAR	int
:	O
return	O
dwg_json_DIMENSION_LINEAR	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_ALIGNED	int
:	O
return	O
dwg_json_DIMENSION_ALIGNED	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_ANG3PT	int
:	O
return	O
dwg_json_DIMENSION_ANG3PT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_ANG2LN	int
:	O
return	O
dwg_json_DIMENSION_ANG2LN	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_RADIUS	int
:	O
return	O
dwg_json_DIMENSION_RADIUS	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_DIAMETER	int
:	O
return	O
dwg_json_DIMENSION_DIAMETER	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_POINT	int
:	O
return	O
dwg_json_POINT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE__3DFACE	int
:	O
return	O
dwg_json__3DFACE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_POLYLINE_PFACE	int
:	O
return	O
dwg_json_POLYLINE_PFACE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_POLYLINE_MESH	int
:	O
return	O
dwg_json_POLYLINE_MESH	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_SOLID	int
:	O
return	O
dwg_json_SOLID	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_TRACE	int
:	O
return	O
dwg_json_TRACE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_SHAPE	int
:	O
return	O
dwg_json_SHAPE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VIEWPORT	int
:	O
return	O
dwg_json_VIEWPORT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_ELLIPSE	int
:	O
return	O
dwg_json_ELLIPSE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_SPLINE	int
:	O
return	O
dwg_json_SPLINE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_REGION	int
:	O
return	O
dwg_json_REGION	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE__3DSOLID	int
:	O
return	O
dwg_json__3DSOLID	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_BODY	int
:	O
return	O
dwg_json_BODY	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_RAY	int
:	O
return	O
dwg_json_RAY	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_XLINE	int
:	O
return	O
dwg_json_XLINE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DICTIONARY	int
:	O
return	O
dwg_json_DICTIONARY	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_MTEXT	int
:	O
return	O
dwg_json_MTEXT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_LEADER	int
:	O
return	O
dwg_json_LEADER	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_TOLERANCE	int
:	O
return	O
dwg_json_TOLERANCE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_MLINE	int
:	O
return	O
dwg_json_MLINE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_BLOCK_CONTROL	int
:	O
return	O
dwg_json_BLOCK_CONTROL	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_BLOCK_HEADER	int
:	O
return	O
dwg_json_BLOCK_HEADER	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_LAYER_CONTROL	int
:	O
return	O
dwg_json_LAYER_CONTROL	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_LAYER	int
:	O
return	O
dwg_json_LAYER	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_STYLE_CONTROL	int
:	O
return	O
dwg_json_STYLE_CONTROL	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_STYLE	int
:	O
return	O
dwg_json_STYLE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_LTYPE_CONTROL	int
:	O
return	O
dwg_json_LTYPE_CONTROL	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_LTYPE	int
:	O
return	O
dwg_json_LTYPE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VIEW_CONTROL	int
:	O
return	O
dwg_json_VIEW_CONTROL	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VIEW	int
:	O
return	O
dwg_json_VIEW	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_UCS_CONTROL	int
:	O
return	O
dwg_json_UCS_CONTROL	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_UCS	int
:	O
return	O
dwg_json_UCS	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VPORT_CONTROL	int
:	O
return	O
dwg_json_VPORT_CONTROL	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VPORT	int
:	O
return	O
dwg_json_VPORT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_APPID_CONTROL	int
:	O
return	O
dwg_json_APPID_CONTROL	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_APPID	int
:	O
return	O
dwg_json_APPID	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMSTYLE_CONTROL	int
:	O
return	O
dwg_json_DIMSTYLE_CONTROL	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMSTYLE	int
:	O
return	O
dwg_json_DIMSTYLE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VPORT_ENTITY_CONTROL	int
:	O
return	O
dwg_json_VPORT_ENTITY_CONTROL	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VPORT_ENTITY_HEADER	int
:	O
return	O
dwg_json_VPORT_ENTITY_HEADER	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_GROUP	int
:	O
return	O
dwg_json_GROUP	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_MLINESTYLE	int
:	O
return	O
dwg_json_MLINESTYLE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_OLE2FRAME	int
:	O
return	O
dwg_json_OLE2FRAME	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DUMMY	int
:	O
return	O
dwg_json_DUMMY	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_LONG_TRANSACTION	int
:	O
return	O
dwg_json_LONG_TRANSACTION	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_LWPOLYLINE	int
:	O
return	O
dwg_json_LWPOLYLINE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_HATCH	int
:	O
return	O
dwg_json_HATCH	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_XRECORD	int
:	O
return	O
dwg_json_XRECORD	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_PLACEHOLDER	int
:	O
return	O
dwg_json_PLACEHOLDER	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_PROXY_ENTITY	int
:	O
return	O
dwg_json_PROXY_ENTITY	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_OLEFRAME	int
:	O
return	O
dwg_json_OLEFRAME	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VBA_PROJECT	int
:	O
LOG_ERROR	O
(	O
"Unhandled Object VBA_PROJECT. Has its own section\n"	pointer
)	O
;	O
break	O
;	O
case	O
DWG_TYPE_LAYOUT	int
:	O
return	O
dwg_json_LAYOUT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
default	O
:	O
if	O
(	O
obj	pointer
->	O
type	short
!=	O
0	int
&&	O
obj	pointer
->	O
type	short
==	O
obj	pointer
->	O
parent	pointer
->	O
layout_type	int
)	O
{	O
return	O
dwg_json_LAYOUT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
else	O
if	O
(	O
DWG_ERR_UNHANDLEDCLASS	int
&	O
dwg_json_variable_type	function
(	O
obj	pointer
->	O
parent	pointer
,	O
dat	pointer
,	O
obj	pointer
)	O
)	O
{	O
Dwg_Data	struct
*	O
dwg	pointer
=	O
obj	pointer
->	O
parent	pointer
;	O
int	O
is_entity	int
;	O
int	O
i	int
=	O
obj	pointer
->	O
type	short
-	O
500	int
;	O
Dwg_Class	struct
*	O
klass	pointer
=	O
NULL	O
;	O
if	O
(	O
i	int
>=	O
0	int
&&	O
i	int
<	O
(	O
int	O
)	O
dwg	pointer
->	O
num_classes	short
)	O
{	O
klass	pointer
=	O
&	O
dwg	pointer
->	O
dwg_class	pointer
[	O
i	int
]	O
;	O
is_entity	int
=	O
dwg_class_is_entity	function
(	O
klass	pointer
)	O
;	O
}	O
if	O
(	O
klass	pointer
&&	O
!	O
is_entity	int
)	O
{	O
return	O
dwg_json_UNKNOWN_OBJ	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
else	O
if	O
(	O
klass	pointer
)	O
{	O
return	O
dwg_json_UNKNOWN_ENT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
else	O
{	O
LOG_WARN	O
(	O
"Unknown object, skipping eed/reactors/xdic"	pointer
)	O
;	O
SINCE	O
(	O
R_2000	int
)	O
{	O
LOG_INFO	O
(	O
"Object bitsize: %u\n"	pointer
,	O
obj	pointer
->	O
bitsize	int
)	O
}	O
LOG_INFO	O
(	O
"Object handle: "	pointer
FORMAT_H	pointer
"\n"	pointer
,	O
ARGS_H	O
(	O
obj	pointer
->	O
handle	pointer
)	O
)	O
;	O
}	O
}	O
}	O
return	O
DWG_ERR_INVALIDTYPE	int
;	O
}	O
static	O
int	O
json_fileheader_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
struct	O
Dwg_Header	struct
*	O
_obj	pointer
=	O
&	O
dwg	pointer
->	O
header	struct
;	O
Dwg_Object	struct
*	O
obj	pointer
=	O
NULL	O
;	O
int	O
i	int
;	O
RECORD	O
(	O
FILEHEADER	O
)	O
;	O
KEY	O
(	O
version	short
)	O
;	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\"%s\",\n"	pointer
,	O
version_codes	array
[	O
dwg	pointer
->	O
header	struct
.	O
version	short
]	O
)	O
;	O
ENDRECORD	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
json_header_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
Dwg_Header_Variables	struct
*	O
_obj	pointer
=	O
&	O
dwg	pointer
->	O
header_vars	struct
;	O
Dwg_Object	struct
*	O
obj	pointer
=	O
NULL	O
;	O
char	O
buf	array
[	O
4096	int
]	O
;	O
double	O
ms	int
;	O
const	O
char	O
*	O
codepage	int
=	O
(	O
dwg	pointer
->	O
header	struct
.	O
codepage	int
==	O
30	int
||	O
dwg	pointer
->	O
header	struct
.	O
codepage	int
==	O
0	int
)	O
?	O
"ANSI_1252"	pointer
:	O
(	O
dwg	pointer
->	O
header	struct
.	O
version	short
>=	O
R_2007	int
)	O
?	O
"UTF-8"	pointer
:	O
"ANSI_1252"	pointer
;	O
RECORD	O
(	O
HEADER	O
)	O
;	O
ENDRECORD	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
json_classes_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
BITCODE_BL	int
i	int
;	O
SECTION	O
(	O
CLASSES	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dwg	pointer
->	O
num_classes	short
;	O
i	int
++	O
)	O
{	O
Dwg_Class	struct
*	O
_obj	pointer
=	O
&	O
dwg	pointer
->	O
dwg_class	pointer
[	O
i	int
]	O
;	O
HASH	O
;	O
FIELD_BS	O
(	O
number	short
,	O
0	int
)	O
;	O
FIELD_TV	O
(	O
dxfname	pointer
,	O
1	int
)	O
;	O
FIELD_T	O
(	O
cppname	pointer
,	O
2	int
)	O
;	O
FIELD_T	O
(	O
appname	pointer
,	O
3	int
)	O
;	O
FIELD_BS	O
(	O
proxyflag	short
,	O
90	int
)	O
;	O
FIELD_BL	O
(	O
num_instances	int
,	O
91	int
)	O
;	O
FIELD_B	O
(	O
is_zombie	char
,	O
280	int
)	O
;	O
FIELD_BS	O
(	O
item_class_id	short
,	O
281	int
)	O
;	O
NOCOMMA	O
;	O
ENDHASH	O
;	O
}	O
NOCOMMA	O
;	O
ENDSEC	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
json_objects_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
BITCODE_BL	int
i	int
;	O
SECTION	O
(	O
OBJECTS	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dwg	pointer
->	O
num_objects	int
;	O
i	int
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
i	int
]	O
;	O
HASH	O
;	O
dwg_json_object	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
NOCOMMA	O
;	O
ENDHASH	O
;	O
}	O
NOCOMMA	O
;	O
ENDSEC	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
json_handles_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
BITCODE_BL	int
j	long
;	O
SECTION	O
(	O
HANDLES	O
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dwg	pointer
->	O
num_objects	int
;	O
j	long
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
j	long
]	O
;	O
PREFIX	O
;	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"[ %lu, %lu ],\n"	pointer
,	O
obj	pointer
->	O
handle	pointer
.	O
value	double
,	O
obj	pointer
->	O
address	long
)	O
;	O
}	O
NOCOMMA	O
;	O
ENDSEC	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
json_thumbnail_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
Bit_Chain	struct
*	O
_obj	pointer
=	O
(	O
Bit_Chain	struct
*	O
)	O
&	O
dwg	pointer
->	O
thumbnail	struct
;	O
if	O
(	O
_obj	pointer
->	O
chain	pointer
&&	O
_obj	pointer
->	O
size	char
&&	O
_obj	pointer
->	O
size	char
>	O
10	int
)	O
{	O
KEY	O
(	O
THUMBNAILIMAGE	O
)	O
;	O
HASH	O
;	O
PREFIX	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"\"size\": %lu,\n"	pointer
,	O
_obj	pointer
->	O
size	char
)	O
;	O
FIELD_BINARY	O
(	O
chain	pointer
,	O
_obj	pointer
->	O
size	char
,	O
310	int
)	O
;	O
NOCOMMA	O
;	O
ENDHASH	O
;	O
}	O
return	O
0	int
;	O
}	O
EXPORT	O
int	O
dwg_write_json	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
const	O
int	O
minimal	int
=	O
dwg	pointer
->	O
opts	int
&	O
DWG_OPTS_MINIMAL	int
;	O
struct	O
Dwg_Header	struct
*	O
obj	pointer
=	O
&	O
dwg	pointer
->	O
header	struct
;	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"{\n"	pointer
"  \"created_by\": \"%s\",\n"	pointer
,	O
PACKAGE_STRING	pointer
)	O
;	O
dat	pointer
->	O
bit	char
++	O
;	O
if	O
(	O
!	O
minimal	int
)	O
{	O
json_fileheader_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
;	O
}	O
json_header_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
;	O
if	O
(	O
!	O
minimal	int
&&	O
dat	pointer
->	O
version	short
>=	O
R_13	int
)	O
{	O
if	O
(	O
json_classes_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
>=	O
DWG_ERR_CRITICAL	O
)	O
goto	O
fail	O
;	O
}	O
if	O
(	O
json_objects_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
>=	O
DWG_ERR_CRITICAL	O
)	O
goto	O
fail	O
;	O
if	O
(	O
!	O
minimal	int
&&	O
dat	pointer
->	O
version	short
>=	O
R_2000	int
)	O
{	O
if	O
(	O
json_thumbnail_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
>=	O
DWG_ERR_CRITICAL	O
)	O
goto	O
fail	O
;	O
}	O
if	O
(	O
!	O
minimal	int
&&	O
dat	pointer
->	O
version	short
>=	O
R_13	int
)	O
{	O
if	O
(	O
json_handles_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
>=	O
DWG_ERR_CRITICAL	O
)	O
goto	O
fail	O
;	O
}	O
NOCOMMA	O
;	O
dat	pointer
->	O
bit	char
--	O
;	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"}\n"	pointer
)	O
;	O
return	O
0	int
;	O
fail	O
:	O
return	O
1	int
;	O
}	O
