void	O
mu_message_ref	function
(	O
mu_message_t	pointer
msg	pointer
)	O
{	O
if	O
(	O
msg	pointer
)	O
{	O
mu_monitor_wrlock	function
(	O
msg	pointer
->	O
monitor	pointer
)	O
;	O
msg	pointer
->	O
ref_count	int
++	O
;	O
mu_monitor_unlock	function
(	O
msg	pointer
->	O
monitor	pointer
)	O
;	O
}	O
}	O
static	O
void	O
_mu_message_free	function
(	O
mu_message_t	pointer
msg	pointer
)	O
{	O
if	O
(	O
msg	pointer
->	O
observable	pointer
)	O
{	O
mu_observable_notify	function
(	O
msg	pointer
->	O
observable	pointer
,	O
MU_EVT_MESSAGE_DESTROY	int
,	O
msg	pointer
)	O
;	O
mu_observable_destroy	function
(	O
&	O
msg	pointer
->	O
observable	pointer
,	O
msg	pointer
)	O
;	O
}	O
mu_envelope_destroy	function
(	O
&	O
msg	pointer
->	O
envelope	pointer
,	O
msg	pointer
)	O
;	O
mu_header_destroy	function
(	O
&	O
msg	pointer
->	O
header	pointer
)	O
;	O
mu_body_destroy	function
(	O
&	O
msg	pointer
->	O
body	pointer
,	O
msg	pointer
)	O
;	O
mu_attribute_destroy	function
(	O
&	O
msg	pointer
->	O
attribute	pointer
,	O
msg	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
msg	pointer
->	O
rawstream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
msg	pointer
->	O
outstream	pointer
)	O
;	O
mu_mime_destroy	function
(	O
&	O
msg	pointer
->	O
mime	pointer
)	O
;	O
msg	pointer
->	O
owner	pointer
=	O
NULL	O
;	O
free	function
(	O
msg	pointer
)	O
;	O
}	O
void	O
mu_message_unref	function
(	O
mu_message_t	pointer
msg	pointer
)	O
{	O
if	O
(	O
msg	pointer
)	O
{	O
mu_monitor_t	pointer
monitor	pointer
=	O
msg	pointer
->	O
monitor	pointer
;	O
mu_monitor_wrlock	function
(	O
monitor	pointer
)	O
;	O
if	O
(	O
msg	pointer
->	O
ref_count	int
>	O
0	int
)	O
msg	pointer
->	O
ref_count	int
--	O
;	O
if	O
(	O
msg	pointer
->	O
ref_count	int
==	O
0	int
)	O
{	O
_mu_message_free	function
(	O
msg	pointer
)	O
;	O
mu_monitor_unlock	function
(	O
monitor	pointer
)	O
;	O
mu_monitor_destroy	function
(	O
&	O
monitor	pointer
,	O
msg	pointer
)	O
;	O
}	O
else	O
mu_monitor_unlock	function
(	O
monitor	pointer
)	O
;	O
}	O
}	O
void	O
mu_message_destroy	function
(	O
mu_message_t	pointer
*	O
pmsg	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
pmsg	pointer
&&	O
*	O
pmsg	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
*	O
pmsg	pointer
;	O
mu_monitor_t	pointer
monitor	pointer
=	O
msg	pointer
->	O
monitor	pointer
;	O
mu_monitor_wrlock	function
(	O
monitor	pointer
)	O
;	O
if	O
(	O
msg	pointer
->	O
owner	pointer
&&	O
msg	pointer
->	O
owner	pointer
==	O
owner	pointer
)	O
{	O
_mu_message_free	function
(	O
msg	pointer
)	O
;	O
mu_monitor_unlock	function
(	O
monitor	pointer
)	O
;	O
mu_monitor_destroy	function
(	O
&	O
monitor	pointer
,	O
msg	pointer
)	O
;	O
*	O
pmsg	pointer
=	O
NULL	O
;	O
return	O
;	O
}	O
mu_monitor_unlock	function
(	O
monitor	pointer
)	O
;	O
}	O
}	O
