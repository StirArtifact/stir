static	O
char	O
*	O
get_syscall_name	function
(	O
int	O
num	int
)	O
{	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
get_rpc_name	function
(	O
mach_msg_id_t	O
it	int
)	O
{	O
return	O
0	int
;	O
}	O
typedef	O
void	O
(	O
*	O
vf	pointer
)	O
(	O
)	O
;	O
static	O
int	O
ps_get_pid	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_pid	function
(	O
ps	pointer
)	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_pid_getter	struct
=	O
{	O
"pid"	pointer
,	O
PSTAT_PID	O
,	O
(	O
vf	pointer
)	O
ps_get_pid	function
}	O
;	O
static	O
int	O
ps_get_thread_index	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_thread_index	function
(	O
ps	pointer
)	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_thread_index_getter	struct
=	O
{	O
"thread_index"	pointer
,	O
PSTAT_THREAD	O
,	O
(	O
vf	pointer
)	O
ps_get_thread_index	function
}	O
;	O
static	O
struct	O
ps_user	O
*	O
ps_get_owner	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_owner	function
(	O
ps	pointer
)	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_owner_getter	struct
=	O
{	O
"owner"	pointer
,	O
PSTAT_OWNER	O
,	O
(	O
vf	pointer
)	O
ps_get_owner	function
}	O
;	O
static	O
int	O
ps_get_owner_uid	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_owner_uid	function
(	O
ps	pointer
)	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_owner_uid_getter	struct
=	O
{	O
"uid"	pointer
,	O
PSTAT_OWNER_UID	O
,	O
(	O
vf	pointer
)	O
ps_get_owner_uid	function
}	O
;	O
static	O
int	O
ps_get_ppid	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_proc_info	function
(	O
ps	pointer
)	O
->	O
ppid	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_ppid_getter	struct
=	O
{	O
"ppid"	pointer
,	O
PSTAT_PROC_INFO	O
,	O
(	O
vf	pointer
)	O
ps_get_ppid	function
}	O
;	O
static	O
int	O
ps_get_pgrp	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_proc_info	function
(	O
ps	pointer
)	O
->	O
pgrp	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_pgrp_getter	struct
=	O
{	O
"pgrp"	pointer
,	O
PSTAT_PROC_INFO	O
,	O
(	O
vf	pointer
)	O
ps_get_pgrp	function
}	O
;	O
static	O
int	O
ps_get_session	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_proc_info	function
(	O
ps	pointer
)	O
->	O
session	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_session_getter	struct
=	O
{	O
"session"	pointer
,	O
PSTAT_PROC_INFO	O
,	O
(	O
vf	pointer
)	O
ps_get_session	function
}	O
;	O
static	O
int	O
ps_get_login_col	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_proc_info	function
(	O
ps	pointer
)	O
->	O
logincollection	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_login_col_getter	struct
=	O
{	O
"login_col"	pointer
,	O
PSTAT_PROC_INFO	O
,	O
(	O
vf	pointer
)	O
ps_get_login_col	function
}	O
;	O
static	O
int	O
ps_get_num_threads	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_num_threads	function
(	O
ps	pointer
)	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_num_threads_getter	struct
=	O
{	O
"num_threads"	pointer
,	O
PSTAT_NUM_THREADS	O
,	O
(	O
vf	pointer
)	O
ps_get_num_threads	function
}	O
;	O
static	O
void	O
ps_get_args	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
char	O
*	O
*	O
args_p	pointer
,	O
int	O
*	O
args_len_p	pointer
)	O
{	O
*	O
args_p	pointer
=	O
proc_stat_args	function
(	O
ps	pointer
)	O
;	O
*	O
args_len_p	pointer
=	O
proc_stat_args_len	function
(	O
ps	pointer
)	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_args_getter	struct
=	O
{	O
"args"	pointer
,	O
PSTAT_ARGS	O
,	O
ps_get_args	function
}	O
;	O
static	O
void	O
ps_get_env	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
char	O
*	O
*	O
env_p	pointer
,	O
int	O
*	O
env_len_p	pointer
)	O
{	O
*	O
env_p	pointer
=	O
proc_stat_env	function
(	O
ps	pointer
)	O
;	O
*	O
env_len_p	pointer
=	O
proc_stat_env_len	function
(	O
ps	pointer
)	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_env_getter	struct
=	O
{	O
"env"	pointer
,	O
PSTAT_ENV	O
,	O
ps_get_env	function
}	O
;	O
static	O
int	O
ps_get_state	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_state	function
(	O
ps	pointer
)	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_state_getter	struct
=	O
{	O
"state"	pointer
,	O
PSTAT_STATE	O
,	O
(	O
vf	pointer
)	O
ps_get_state	function
}	O
;	O
static	O
void	O
ps_get_wait	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
char	O
*	O
*	O
wait	pointer
,	O
int	O
*	O
rpc	pointer
)	O
{	O
*	O
wait	pointer
=	O
ps	pointer
->	O
thread_wait	O
;	O
*	O
rpc	pointer
=	O
ps	pointer
->	O
thread_rpc	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_wait_getter	struct
=	O
{	O
"wait"	pointer
,	O
PSTAT_THREAD_WAIT	O
,	O
ps_get_wait	function
}	O
;	O
static	O
size_t	long
ps_get_vsize	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_task_basic_info	function
(	O
ps	pointer
)	O
->	O
virtual_size	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_vsize_getter	struct
=	O
{	O
"vsize"	pointer
,	O
PSTAT_TASK_BASIC	O
,	O
(	O
vf	pointer
)	O
ps_get_vsize	function
}	O
;	O
static	O
size_t	long
ps_get_rsize	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_task_basic_info	function
(	O
ps	pointer
)	O
->	O
resident_size	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_rsize_getter	struct
=	O
{	O
"rsize"	pointer
,	O
PSTAT_TASK_BASIC	O
,	O
(	O
vf	pointer
)	O
ps_get_rsize	function
}	O
;	O
static	O
int	O
ps_get_cur_priority	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_thread_basic_info	function
(	O
ps	pointer
)	O
->	O
cur_priority	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_cur_priority_getter	struct
=	O
{	O
"cur_priority"	pointer
,	O
PSTAT_THREAD_BASIC	O
,	O
(	O
vf	pointer
)	O
ps_get_cur_priority	function
}	O
;	O
static	O
int	O
ps_get_base_priority	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_thread_basic_info	function
(	O
ps	pointer
)	O
->	O
base_priority	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_base_priority_getter	struct
=	O
{	O
"base_priority"	pointer
,	O
PSTAT_THREAD_BASIC	O
,	O
(	O
vf	pointer
)	O
ps_get_base_priority	function
}	O
;	O
static	O
int	O
ps_get_max_priority	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_thread_sched_info	function
(	O
ps	pointer
)	O
->	O
max_priority	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_max_priority_getter	struct
=	O
{	O
"max_priority"	pointer
,	O
PSTAT_THREAD_SCHED	O
,	O
(	O
vf	pointer
)	O
ps_get_max_priority	function
}	O
;	O
static	O
void	O
ps_get_usr_time	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
timeval	O
*	O
tv	pointer
)	O
{	O
time_value_t	O
tvt	O
=	O
proc_stat_thread_basic_info	function
(	O
ps	pointer
)	O
->	O
user_time	O
;	O
tv	pointer
->	O
tv_sec	O
=	O
tvt	O
.	O
seconds	O
;	O
tv	pointer
->	O
tv_usec	O
=	O
tvt	O
.	O
microseconds	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_usr_time_getter	struct
=	O
{	O
"usr_time"	pointer
,	O
PSTAT_TIMES	O
,	O
ps_get_usr_time	function
}	O
;	O
static	O
void	O
ps_get_sys_time	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
timeval	O
*	O
tv	pointer
)	O
{	O
time_value_t	O
tvt	O
=	O
proc_stat_thread_basic_info	function
(	O
ps	pointer
)	O
->	O
system_time	O
;	O
tv	pointer
->	O
tv_sec	O
=	O
tvt	O
.	O
seconds	O
;	O
tv	pointer
->	O
tv_usec	O
=	O
tvt	O
.	O
microseconds	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_sys_time_getter	struct
=	O
{	O
"sys_time"	pointer
,	O
PSTAT_TIMES	O
,	O
ps_get_sys_time	function
}	O
;	O
static	O
void	O
ps_get_tot_time	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
timeval	O
*	O
tv	pointer
)	O
{	O
time_value_t	O
tvt	O
=	O
proc_stat_thread_basic_info	function
(	O
ps	pointer
)	O
->	O
user_time	O
;	O
time_value_add	function
(	O
&	O
tvt	O
,	O
&	O
proc_stat_thread_basic_info	function
(	O
ps	pointer
)	O
->	O
system_time	O
)	O
;	O
tv	pointer
->	O
tv_sec	O
=	O
tvt	O
.	O
seconds	O
;	O
tv	pointer
->	O
tv_usec	O
=	O
tvt	O
.	O
microseconds	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_tot_time_getter	struct
=	O
{	O
"tot_time"	pointer
,	O
PSTAT_TIMES	O
,	O
ps_get_tot_time	function
}	O
;	O
static	O
void	O
ps_get_start_time	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
timeval	O
*	O
tv	pointer
)	O
{	O
time_value_t	O
*	O
const	O
tvt	O
=	O
&	O
proc_stat_task_basic_info	function
(	O
ps	pointer
)	O
->	O
creation_time	O
;	O
tv	pointer
->	O
tv_sec	O
=	O
tvt	O
->	O
seconds	O
;	O
tv	pointer
->	O
tv_usec	O
=	O
tvt	O
->	O
microseconds	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_start_time_getter	struct
=	O
{	O
"start_time"	pointer
,	O
PSTAT_TASK_BASIC	O
,	O
ps_get_start_time	function
}	O
;	O
static	O
float	O
ps_get_rmem_frac	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
static	O
size_t	long
mem_size	long
=	O
0	int
;	O
if	O
(	O
mem_size	long
==	O
0	int
)	O
{	O
host_basic_info_t	O
info	O
;	O
error_t	O
err	O
=	O
ps_host_basic_info	O
(	O
&	O
info	O
)	O
;	O
if	O
(	O
err	O
==	O
0	int
)	O
mem_size	long
=	O
info	O
->	O
memory_size	O
;	O
}	O
if	O
(	O
mem_size	long
>	O
0	int
)	O
return	O
(	O
float	O
)	O
proc_stat_task_basic_info	function
(	O
ps	pointer
)	O
->	O
resident_size	O
/	O
(	O
float	O
)	O
mem_size	long
;	O
else	O
return	O
0.0	int
;	O
}	O
const	O
struct	O
ps_getter	O
ps_rmem_frac_getter	struct
=	O
{	O
"rmem_frac"	pointer
,	O
PSTAT_TASK_BASIC	O
,	O
(	O
vf	pointer
)	O
ps_get_rmem_frac	function
}	O
;	O
static	O
float	O
ps_get_cpu_frac	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
(	O
float	O
)	O
proc_stat_thread_basic_info	function
(	O
ps	pointer
)	O
->	O
cpu_usage	O
/	O
(	O
float	O
)	O
TH_USAGE_SCALE	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_cpu_frac_getter	struct
=	O
{	O
"cpu_frac"	pointer
,	O
PSTAT_THREAD_BASIC	O
,	O
(	O
vf	pointer
)	O
ps_get_cpu_frac	function
}	O
;	O
static	O
int	O
ps_get_sleep	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_thread_basic_info	function
(	O
ps	pointer
)	O
->	O
sleep_time	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_sleep_getter	struct
=	O
{	O
"sleep"	pointer
,	O
PSTAT_THREAD_BASIC	O
,	O
(	O
vf	pointer
)	O
ps_get_sleep	function
}	O
;	O
static	O
int	O
ps_get_susp_count	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_suspend_count	function
(	O
ps	pointer
)	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_susp_count_getter	struct
=	O
{	O
"susp_count"	pointer
,	O
PSTAT_SUSPEND_COUNT	O
,	O
(	O
vf	pointer
)	O
ps_get_susp_count	function
}	O
;	O
static	O
int	O
ps_get_proc_susp_count	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_task_basic_info	function
(	O
ps	pointer
)	O
->	O
suspend_count	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_proc_susp_count_getter	struct
=	O
{	O
"proc_susp_count"	pointer
,	O
PSTAT_TASK_BASIC	O
,	O
(	O
vf	pointer
)	O
ps_get_proc_susp_count	function
}	O
;	O
static	O
int	O
ps_get_thread_susp_count	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_thread_basic_info	function
(	O
ps	pointer
)	O
->	O
suspend_count	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_thread_susp_count_getter	struct
=	O
{	O
"thread_susp_count"	pointer
,	O
PSTAT_SUSPEND_COUNT	O
,	O
(	O
vf	pointer
)	O
ps_get_thread_susp_count	function
}	O
;	O
static	O
struct	O
ps_tty	O
*	O
ps_get_tty	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_tty	function
(	O
ps	pointer
)	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_tty_getter	struct
=	O
{	O
"tty"	pointer
,	O
PSTAT_TTY	O
,	O
(	O
vf	pointer
)	O
ps_get_tty	function
}	O
;	O
static	O
int	O
ps_get_page_faults	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_task_events_info	function
(	O
ps	pointer
)	O
->	O
faults	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_page_faults_getter	struct
=	O
{	O
"page_faults"	pointer
,	O
PSTAT_TASK_EVENTS	O
,	O
(	O
vf	pointer
)	O
ps_get_page_faults	function
}	O
;	O
static	O
int	O
ps_get_cow_faults	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_task_events_info	function
(	O
ps	pointer
)	O
->	O
cow_faults	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_cow_faults_getter	struct
=	O
{	O
"cow_faults"	pointer
,	O
PSTAT_TASK_EVENTS	O
,	O
(	O
vf	pointer
)	O
ps_get_cow_faults	function
}	O
;	O
static	O
int	O
ps_get_pageins	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_task_events_info	function
(	O
ps	pointer
)	O
->	O
pageins	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_pageins_getter	struct
=	O
{	O
"pageins"	pointer
,	O
PSTAT_TASK_EVENTS	O
,	O
(	O
vf	pointer
)	O
ps_get_pageins	function
}	O
;	O
static	O
int	O
ps_get_msgs_sent	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_task_events_info	function
(	O
ps	pointer
)	O
->	O
messages_sent	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_msgs_sent_getter	struct
=	O
{	O
"msgs_sent"	pointer
,	O
PSTAT_TASK_EVENTS	O
,	O
(	O
vf	pointer
)	O
ps_get_msgs_sent	function
}	O
;	O
static	O
int	O
ps_get_msgs_rcvd	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_task_events_info	function
(	O
ps	pointer
)	O
->	O
messages_received	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_msgs_rcvd_getter	struct
=	O
{	O
"msgs_rcvd"	pointer
,	O
PSTAT_TASK_EVENTS	O
,	O
(	O
vf	pointer
)	O
ps_get_msgs_rcvd	function
}	O
;	O
static	O
int	O
ps_get_zero_fills	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_task_events_info	function
(	O
ps	pointer
)	O
->	O
zero_fills	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_zero_fills_getter	struct
=	O
{	O
"zero_fills"	pointer
,	O
PSTAT_TASK_EVENTS	O
,	O
(	O
vf	pointer
)	O
ps_get_zero_fills	function
}	O
;	O
static	O
int	O
ps_get_num_ports	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
)	O
{	O
return	O
proc_stat_num_ports	function
(	O
ps	pointer
)	O
;	O
}	O
const	O
struct	O
ps_getter	O
ps_num_ports_getter	struct
=	O
{	O
"num_ports"	pointer
,	O
PSTAT_NUM_PORTS	O
,	O
(	O
vf	pointer
)	O
ps_get_num_ports	function
}	O
;	O
error_t	O
ps_emit_int	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
return	O
ps_stream_write_int_field	function
(	O
stream	pointer
,	O
FG	O
(	O
field	pointer
,	O
int	O
)	O
(	O
ps	pointer
)	O
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_nz_int	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
int	O
value	int
=	O
FG	O
(	O
field	pointer
,	O
int	O
)	O
(	O
ps	pointer
)	O
;	O
if	O
(	O
value	int
)	O
return	O
ps_stream_write_int_field	function
(	O
stream	pointer
,	O
value	int
,	O
field	pointer
->	O
width	int
)	O
;	O
else	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
"-"	pointer
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_priority	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
return	O
ps_stream_write_int_field	function
(	O
stream	pointer
,	O
MACH_PRIORITY_TO_NICE	function
(	O
FG	O
(	O
field	pointer
,	O
int	O
)	O
(	O
ps	pointer
)	O
)	O
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_num_blocks	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
char	O
buf	array
[	O
20	int
]	O
;	O
sprintf	function
(	O
buf	array
,	O
"%d"	pointer
,	O
FG	O
(	O
field	pointer
,	O
int	O
)	O
(	O
ps	pointer
)	O
/	O
1024	int
)	O
;	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
buf	array
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
size_t	long
sprint_frac_value	function
(	O
char	O
*	O
buf	array
,	O
size_t	long
value	int
,	O
int	O
min_value_len	int
,	O
size_t	long
frac	long
,	O
int	O
frac_scale	int
,	O
int	O
width	int
)	O
{	O
int	O
value_len	int
=	O
0	int
;	O
int	O
frac_len	int
=	O
0	int
;	O
if	O
(	O
value	int
>=	O
1000	int
)	O
value_len	int
=	O
4	int
;	O
else	O
if	O
(	O
value	int
>=	O
100	int
)	O
value_len	int
=	O
3	int
;	O
else	O
if	O
(	O
value	int
>=	O
10	int
)	O
value_len	int
=	O
2	int
;	O
else	O
value_len	int
=	O
1	int
;	O
while	O
(	O
value_len	int
<	O
min_value_len	int
--	O
)	O
*	O
buf	array
++	O
=	O
'0'	O
;	O
for	O
(	O
frac_len	int
=	O
frac_scale	int
;	O
frac_len	int
>	O
0	int
&&	O
(	O
width	int
<	O
value_len	int
+	O
1	int
+	O
frac_len	int
||	O
frac	long
%	O
10	int
==	O
0	int
)	O
;	O
frac_len	int
--	O
)	O
frac	long
/=	O
10	int
;	O
if	O
(	O
frac_len	int
>	O
0	int
)	O
sprintf	function
(	O
buf	array
,	O
"%zd.%0*zd"	pointer
,	O
value	int
,	O
frac_len	int
,	O
frac	long
)	O
;	O
else	O
sprintf	function
(	O
buf	array
,	O
"%zd"	pointer
,	O
value	int
)	O
;	O
return	O
strlen	O
(	O
buf	array
)	O
;	O
}	O
error_t	O
ps_emit_percent	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
char	O
buf	array
[	O
20	int
]	O
;	O
int	O
width	int
=	O
field	pointer
->	O
width	int
;	O
float	O
perc	float
=	O
FG	O
(	O
field	pointer
,	O
float	O
)	O
(	O
ps	pointer
)	O
*	O
100	int
;	O
if	O
(	O
width	int
==	O
0	int
)	O
sprintf	function
(	O
buf	array
,	O
"%g"	pointer
,	O
perc	float
)	O
;	O
else	O
if	O
(	O
ABS	function
(	O
width	int
)	O
>	O
3	int
)	O
sprintf	function
(	O
buf	array
,	O
"%.*f"	pointer
,	O
ABS	function
(	O
width	int
)	O
-	O
3	int
,	O
perc	float
)	O
;	O
else	O
sprintf	function
(	O
buf	array
,	O
"%d"	pointer
,	O
(	O
int	O
)	O
perc	float
)	O
;	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
buf	array
,	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_nice_size_t	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
char	O
buf	array
[	O
20	int
]	O
;	O
size_t	long
value	int
=	O
FG	O
(	O
field	pointer
,	O
size_t	long
)	O
(	O
ps	pointer
)	O
;	O
char	O
*	O
sfx	pointer
=	O
" KMG"	pointer
;	O
size_t	long
frac	long
=	O
0	int
;	O
while	O
(	O
value	int
>=	O
1024	int
)	O
{	O
frac	long
=	O
(	O
(	O
value	int
&	O
0x3FF	int
)	O
*	O
1000	int
)	O
>>	O
10	int
;	O
value	int
>>=	O
10	int
;	O
sfx	pointer
++	O
;	O
}	O
sprintf	function
(	O
buf	array
+	O
sprint_frac_value	function
(	O
buf	array
,	O
value	int
,	O
1	int
,	O
frac	long
,	O
3	int
,	O
ABS	function
(	O
field	pointer
->	O
width	int
)	O
-	O
1	int
)	O
,	O
"%c"	pointer
,	O
*	O
sfx	pointer
)	O
;	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
buf	array
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_seconds	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
char	O
buf	array
[	O
20	int
]	O
;	O
struct	O
timeval	O
tv	pointer
;	O
int	O
width	int
=	O
field	pointer
->	O
width	int
,	O
prec	int
=	O
field	pointer
->	O
precision	O
;	O
FG	O
(	O
field	pointer
,	O
void	O
)	O
(	O
ps	pointer
,	O
&	O
tv	pointer
)	O
;	O
if	O
(	O
(	O
field	pointer
->	O
flags	O
&	O
PS_FMT_FIELD_COLON_MOD	O
)	O
&&	O
tv	pointer
.	O
tv_sec	O
==	O
0	int
)	O
strcpy	O
(	O
buf	array
,	O
"-"	pointer
)	O
;	O
else	O
fmt_seconds	function
(	O
&	O
tv	pointer
,	O
!	O
(	O
field	pointer
->	O
flags	O
&	O
PS_FMT_FIELD_AT_MOD	O
)	O
,	O
prec	int
,	O
ABS	function
(	O
width	int
)	O
,	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
)	O
;	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
buf	array
,	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_minutes	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
char	O
buf	array
[	O
20	int
]	O
;	O
struct	O
timeval	O
tv	pointer
;	O
int	O
width	int
=	O
field	pointer
->	O
width	int
;	O
FG	O
(	O
field	pointer
,	O
void	O
)	O
(	O
ps	pointer
,	O
&	O
tv	pointer
)	O
;	O
if	O
(	O
(	O
field	pointer
->	O
flags	O
&	O
PS_FMT_FIELD_COLON_MOD	O
)	O
&&	O
tv	pointer
.	O
tv_sec	O
<	O
60	int
)	O
strcpy	O
(	O
buf	array
,	O
"-"	pointer
)	O
;	O
else	O
fmt_minutes	function
(	O
&	O
tv	pointer
,	O
!	O
(	O
field	pointer
->	O
flags	O
&	O
PS_FMT_FIELD_AT_MOD	O
)	O
,	O
ABS	function
(	O
width	int
)	O
,	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
)	O
;	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
buf	array
,	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_past_time	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
static	O
struct	O
timeval	O
now	struct
;	O
char	O
buf	array
[	O
20	int
]	O
;	O
struct	O
timeval	O
tv	pointer
;	O
int	O
width	int
=	O
field	pointer
->	O
width	int
;	O
FG	O
(	O
field	pointer
,	O
void	O
)	O
(	O
ps	pointer
,	O
&	O
tv	pointer
)	O
;	O
if	O
(	O
now	struct
.	O
tv_sec	O
==	O
0	int
&&	O
gettimeofday	function
(	O
&	O
now	struct
,	O
0	int
)	O
<	O
0	int
)	O
return	O
errno	O
;	O
fmt_past_time	function
(	O
&	O
tv	pointer
,	O
&	O
now	struct
,	O
ABS	function
(	O
width	int
)	O
,	O
buf	array
,	O
sizeof	O
buf	array
)	O
;	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
buf	array
,	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_uid	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
int	O
uid	int
=	O
FG	O
(	O
field	pointer
,	O
int	O
)	O
(	O
ps	pointer
)	O
;	O
if	O
(	O
uid	int
<	O
0	int
)	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
"-"	pointer
,	O
field	pointer
->	O
width	int
)	O
;	O
else	O
return	O
ps_stream_write_int_field	function
(	O
stream	pointer
,	O
uid	int
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_uname	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
int	O
width	int
=	O
field	pointer
->	O
width	int
;	O
struct	O
ps_user	O
*	O
u	pointer
=	O
FG	O
(	O
field	pointer
,	O
struct	O
ps_user	O
*	O
)	O
(	O
ps	pointer
)	O
;	O
if	O
(	O
u	pointer
)	O
{	O
struct	O
passwd	O
*	O
pw	pointer
=	O
ps_user_passwd	function
(	O
u	pointer
)	O
;	O
if	O
(	O
pw	pointer
==	O
NULL	O
)	O
return	O
ps_stream_write_int_field	function
(	O
stream	pointer
,	O
ps_user_uid	function
(	O
u	pointer
)	O
,	O
width	int
)	O
;	O
else	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
pw	pointer
->	O
pw_name	O
,	O
width	int
)	O
;	O
}	O
else	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
"-"	pointer
,	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_user_name	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
int	O
width	int
=	O
field	pointer
->	O
width	int
;	O
struct	O
ps_user	O
*	O
u	pointer
=	O
FG	O
(	O
field	pointer
,	O
struct	O
ps_user	O
*	O
)	O
(	O
ps	pointer
)	O
;	O
if	O
(	O
u	pointer
)	O
{	O
struct	O
passwd	O
*	O
pw	pointer
=	O
ps_user_passwd	function
(	O
u	pointer
)	O
;	O
if	O
(	O
pw	pointer
==	O
NULL	O
)	O
{	O
char	O
buf	array
[	O
20	int
]	O
;	O
sprintf	function
(	O
buf	array
,	O
"(UID %d)"	pointer
,	O
u	pointer
->	O
uid	int
)	O
;	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
buf	array
,	O
width	int
)	O
;	O
}	O
else	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
pw	pointer
->	O
pw_gecos	O
,	O
width	int
)	O
;	O
}	O
else	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
"-"	pointer
,	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_args	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
char	O
*	O
s0	pointer
,	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
int	O
s0len	int
;	O
int	O
width	int
=	O
field	pointer
->	O
width	int
;	O
int	O
fwidth	int
=	O
ABS	function
(	O
width	int
)	O
;	O
char	O
static_buf	array
[	O
200	int
]	O
;	O
char	O
*	O
buf	array
=	O
static_buf	array
;	O
FG	O
(	O
field	pointer
,	O
void	O
)	O
(	O
ps	pointer
,	O
&	O
s0	pointer
,	O
&	O
s0len	int
)	O
;	O
if	O
(	O
!	O
s0	pointer
||	O
s0len	int
==	O
0	int
)	O
strcpy	O
(	O
buf	array
,	O
"-"	pointer
)	O
;	O
else	O
{	O
if	O
(	O
s0len	int
>	O
sizeof	O
static_buf	array
)	O
{	O
buf	array
=	O
malloc	O
(	O
s0len	int
+	O
1	int
)	O
;	O
if	O
(	O
buf	array
==	O
NULL	O
)	O
return	O
ENOMEM	O
;	O
}	O
if	O
(	O
fwidth	int
==	O
0	int
||	O
fwidth	int
>	O
s0len	int
)	O
fwidth	int
=	O
s0len	int
;	O
for	O
(	O
p	pointer
=	O
buf	array
,	O
q	pointer
=	O
s0	pointer
;	O
fwidth	int
--	O
>	O
0	int
;	O
p	pointer
++	O
,	O
q	pointer
++	O
)	O
{	O
int	O
ch	int
=	O
*	O
q	pointer
;	O
*	O
p	pointer
=	O
(	O
ch	int
==	O
'\0'	O
?	O
' '	O
:	O
ch	int
)	O
;	O
}	O
if	O
(	O
q	pointer
>	O
s0	pointer
&&	O
*	O
(	O
q	pointer
-	O
1	int
)	O
==	O
'\0'	O
)	O
*	O
--	O
p	pointer
=	O
'\0'	O
;	O
else	O
*	O
p	pointer
=	O
'\0'	O
;	O
}	O
{	O
error_t	O
err	O
=	O
ps_stream_write_trunc_field	function
(	O
stream	pointer
,	O
buf	array
,	O
width	int
)	O
;	O
if	O
(	O
buf	array
!=	O
static_buf	array
)	O
free	function
(	O
buf	array
)	O
;	O
return	O
err	O
;	O
}	O
}	O
error_t	O
ps_emit_string	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
char	O
*	O
str	pointer
;	O
int	O
len	int
;	O
FG	O
(	O
field	pointer
,	O
void	O
)	O
(	O
ps	pointer
,	O
&	O
str	pointer
,	O
&	O
len	int
)	O
;	O
if	O
(	O
!	O
str	pointer
||	O
len	int
==	O
0	int
)	O
str	pointer
=	O
"-"	pointer
;	O
return	O
ps_stream_write_trunc_field	function
(	O
stream	pointer
,	O
str	pointer
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_tty_name	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
const	O
char	O
*	O
name	pointer
=	O
"-"	pointer
;	O
struct	O
ps_tty	O
*	O
tty	pointer
=	O
FG	O
(	O
field	pointer
,	O
struct	O
ps_tty	O
*	O
)	O
(	O
ps	pointer
)	O
;	O
if	O
(	O
tty	pointer
)	O
{	O
name	pointer
=	O
ps_tty_short_name	function
(	O
tty	pointer
)	O
;	O
if	O
(	O
name	pointer
==	O
NULL	O
||	O
*	O
name	pointer
==	O
'\0'	O
)	O
name	pointer
=	O
"?"	pointer
;	O
}	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
name	pointer
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
struct	O
state_shadow	struct
{	O
int	O
states	int
;	O
int	O
shadow	int
;	O
}	O
;	O
static	O
const	O
struct	O
state_shadow	struct
state_shadows	array
[	O
]	O
=	O
{	O
{	O
PSTAT_STATE_P_NOPARENT	O
,	O
(	O
PSTAT_STATE_P_ATTRS	O
&	O
~	O
PSTAT_STATE_P_NOPARENT	O
)	O
}	O
,	O
{	O
PSTAT_STATE_T_RUN	O
|	O
PSTAT_STATE_P_STOP	O
,	O
PSTAT_STATE_T_SLEEP	O
|	O
PSTAT_STATE_T_IDLE	O
|	O
PSTAT_STATE_T_WAIT	O
}	O
,	O
{	O
PSTAT_STATE_T_IDLE	O
,	O
PSTAT_STATE_T_SLEEP	O
|	O
PSTAT_STATE_T_WAIT	O
}	O
,	O
{	O
PSTAT_STATE_T_SLEEP	O
,	O
PSTAT_STATE_T_WAIT	O
}	O
,	O
{	O
PSTAT_STATE_T_STATES	O
&	O
~	O
PSTAT_STATE_T_HALT	O
,	O
PSTAT_STATE_T_HALT	O
|	O
PSTAT_STATE_T_UNCLEAN	O
}	O
,	O
{	O
0	int
}	O
}	O
;	O
error_t	O
ps_emit_state	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
char	O
*	O
tags	pointer
;	O
int	O
raw_state	int
=	O
FG	O
(	O
field	pointer
,	O
int	O
)	O
(	O
ps	pointer
)	O
;	O
int	O
state	int
=	O
raw_state	int
;	O
char	O
buf	array
[	O
20	int
]	O
,	O
*	O
p	pointer
=	O
buf	array
;	O
const	O
struct	O
state_shadow	struct
*	O
shadow	int
=	O
state_shadows	array
;	O
while	O
(	O
shadow	int
->	O
states	int
)	O
{	O
if	O
(	O
raw_state	int
&	O
shadow	int
->	O
states	int
)	O
state	int
&=	O
~	O
shadow	int
->	O
shadow	int
;	O
shadow	int
++	O
;	O
}	O
for	O
(	O
tags	pointer
=	O
proc_stat_state_tags	O
;	O
state	int
!=	O
0	int
&&	O
*	O
tags	pointer
!=	O
'\0'	O
;	O
state	int
>>=	O
1	int
,	O
tags	pointer
++	O
)	O
if	O
(	O
state	int
&	O
1	int
)	O
*	O
p	pointer
++	O
=	O
*	O
tags	pointer
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
buf	array
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
error_t	O
ps_emit_wait	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
struct	O
ps_fmt_field	O
*	O
field	pointer
,	O
struct	O
ps_stream	O
*	O
stream	pointer
)	O
{	O
int	O
rpc	pointer
;	O
char	O
*	O
wait	pointer
;	O
char	O
buf	array
[	O
80	int
]	O
;	O
FG	O
(	O
field	pointer
,	O
void	O
)	O
(	O
ps	pointer
,	O
&	O
wait	pointer
,	O
&	O
rpc	pointer
)	O
;	O
if	O
(	O
wait	pointer
==	O
0	int
)	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
"?"	pointer
,	O
field	pointer
->	O
width	int
)	O
;	O
else	O
if	O
(	O
*	O
wait	pointer
==	O
0	int
)	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
"-"	pointer
,	O
field	pointer
->	O
width	int
)	O
;	O
else	O
if	O
(	O
strcmp	O
(	O
wait	pointer
,	O
"kernel"	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
name	pointer
=	O
get_syscall_name	function
(	O
rpc	pointer
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
{	O
sprintf	function
(	O
buf	array
,	O
"syscall:%d"	pointer
,	O
-	O
rpc	pointer
)	O
;	O
name	pointer
=	O
buf	array
;	O
}	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
name	pointer
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
else	O
if	O
(	O
rpc	pointer
)	O
{	O
char	O
port_name_buf	array
[	O
20	int
]	O
;	O
char	O
*	O
name	pointer
=	O
get_rpc_name	function
(	O
rpc	pointer
)	O
;	O
if	O
(	O
strcmp	O
(	O
wait	pointer
,	O
"init#0"	pointer
)	O
==	O
0	int
)	O
wait	pointer
=	O
"cwd"	pointer
;	O
else	O
if	O
(	O
strcmp	O
(	O
wait	pointer
,	O
"init#1"	pointer
)	O
==	O
0	int
)	O
wait	pointer
=	O
"root"	pointer
;	O
else	O
if	O
(	O
strcmp	O
(	O
wait	pointer
,	O
"init#2"	pointer
)	O
==	O
0	int
)	O
wait	pointer
=	O
"auth"	pointer
;	O
else	O
if	O
(	O
strcmp	O
(	O
wait	pointer
,	O
"init#3"	pointer
)	O
==	O
0	int
)	O
wait	pointer
=	O
"proc"	pointer
;	O
else	O
if	O
(	O
strcmp	O
(	O
wait	pointer
,	O
"init#4"	pointer
)	O
==	O
0	int
)	O
wait	pointer
=	O
"cttyid"	pointer
;	O
else	O
if	O
(	O
strcmp	O
(	O
wait	pointer
,	O
"init#5"	pointer
)	O
==	O
0	int
)	O
wait	pointer
=	O
"boot"	pointer
;	O
else	O
{	O
char	O
*	O
abbrev	pointer
=	O
0	int
,	O
*	O
num	int
=	O
0	int
;	O
if	O
(	O
strncmp	O
(	O
wait	pointer
,	O
"fd#"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
abbrev	pointer
=	O
"fd"	pointer
,	O
num	int
=	O
wait	pointer
+	O
3	int
;	O
else	O
if	O
(	O
strncmp	O
(	O
wait	pointer
,	O
"bgfd#"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
abbrev	pointer
=	O
"bg"	pointer
,	O
num	int
=	O
wait	pointer
+	O
5	int
;	O
else	O
if	O
(	O
strncmp	O
(	O
wait	pointer
,	O
"port#"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
abbrev	pointer
=	O
""	pointer
,	O
num	int
=	O
wait	pointer
+	O
5	int
;	O
if	O
(	O
abbrev	pointer
)	O
{	O
snprintf	function
(	O
port_name_buf	array
,	O
sizeof	O
port_name_buf	array
,	O
"%s%s"	pointer
,	O
abbrev	pointer
,	O
num	int
)	O
;	O
wait	pointer
=	O
port_name_buf	array
;	O
}	O
}	O
if	O
(	O
name	pointer
)	O
snprintf	function
(	O
buf	array
,	O
sizeof	O
buf	array
,	O
"%s:%s"	pointer
,	O
wait	pointer
,	O
name	pointer
)	O
;	O
else	O
snprintf	function
(	O
buf	array
,	O
sizeof	O
buf	array
,	O
"%s:%d"	pointer
,	O
wait	pointer
,	O
rpc	pointer
)	O
;	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
buf	array
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
else	O
return	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
wait	pointer
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
int	O
ps_cmp_ints	function
(	O
struct	O
proc_stat	O
*	O
ps1	pointer
,	O
struct	O
proc_stat	O
*	O
ps2	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
int	O
(	O
*	O
gf	pointer
)	O
(	O
)	O
=	O
G	O
(	O
getter	pointer
,	O
int	O
)	O
;	O
int	O
v1	int
=	O
gf	pointer
(	O
ps1	pointer
)	O
,	O
v2	int
=	O
gf	pointer
(	O
ps2	pointer
)	O
;	O
return	O
v1	int
==	O
v2	int
?	O
0	int
:	O
v1	int
<	O
v2	int
?	O
-	O
1	int
:	O
1	int
;	O
}	O
int	O
ps_cmp_floats	function
(	O
struct	O
proc_stat	O
*	O
ps1	pointer
,	O
struct	O
proc_stat	O
*	O
ps2	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
float	O
(	O
*	O
gf	pointer
)	O
(	O
)	O
=	O
G	O
(	O
getter	pointer
,	O
float	O
)	O
;	O
float	O
v1	int
=	O
gf	pointer
(	O
ps1	pointer
)	O
,	O
v2	int
=	O
gf	pointer
(	O
ps2	pointer
)	O
;	O
return	O
v1	int
==	O
v2	int
?	O
0	int
:	O
v1	int
<	O
v2	int
?	O
-	O
1	int
:	O
1	int
;	O
}	O
int	O
ps_cmp_size_ts	function
(	O
struct	O
proc_stat	O
*	O
ps1	pointer
,	O
struct	O
proc_stat	O
*	O
ps2	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
size_t	long
(	O
*	O
gf	pointer
)	O
(	O
)	O
=	O
G	O
(	O
getter	pointer
,	O
size_t	long
)	O
;	O
size_t	long
v1	int
=	O
gf	pointer
(	O
ps1	pointer
)	O
,	O
v2	int
=	O
gf	pointer
(	O
ps2	pointer
)	O
;	O
return	O
v1	int
==	O
v2	int
?	O
0	int
:	O
v1	int
<	O
v2	int
?	O
-	O
1	int
:	O
1	int
;	O
}	O
int	O
ps_cmp_uids	function
(	O
struct	O
proc_stat	O
*	O
ps1	pointer
,	O
struct	O
proc_stat	O
*	O
ps2	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
struct	O
ps_user	O
*	O
(	O
*	O
gf	pointer
)	O
(	O
)	O
=	O
G	O
(	O
getter	pointer
,	O
struct	O
ps_user	O
*	O
)	O
;	O
struct	O
ps_user	O
*	O
u1	pointer
=	O
gf	pointer
(	O
ps1	pointer
)	O
,	O
*	O
u2	pointer
=	O
gf	pointer
(	O
ps2	pointer
)	O
;	O
return	O
(	O
u1	pointer
?	O
ps_user_uid	function
(	O
u1	pointer
)	O
:	O
-	O
1	int
)	O
-	O
(	O
u2	pointer
?	O
ps_user_uid	function
(	O
u2	pointer
)	O
:	O
-	O
1	int
)	O
;	O
}	O
int	O
ps_cmp_unames	function
(	O
struct	O
proc_stat	O
*	O
ps1	pointer
,	O
struct	O
proc_stat	O
*	O
ps2	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
struct	O
ps_user	O
*	O
(	O
*	O
gf	pointer
)	O
(	O
)	O
=	O
G	O
(	O
getter	pointer
,	O
struct	O
ps_user	O
*	O
)	O
;	O
struct	O
ps_user	O
*	O
u1	pointer
=	O
gf	pointer
(	O
ps1	pointer
)	O
,	O
*	O
u2	pointer
=	O
gf	pointer
(	O
ps2	pointer
)	O
;	O
struct	O
passwd	O
*	O
pw1	pointer
=	O
u1	pointer
?	O
ps_user_passwd	function
(	O
u1	pointer
)	O
:	O
0	int
;	O
struct	O
passwd	O
*	O
pw2	pointer
=	O
u2	pointer
?	O
ps_user_passwd	function
(	O
u2	pointer
)	O
:	O
0	int
;	O
return	O
GUARDED_CMP	O
(	O
pw1	pointer
,	O
pw2	pointer
,	O
strcmp	O
(	O
pw1	pointer
->	O
pw_name	O
,	O
pw2	pointer
->	O
pw_name	O
)	O
)	O
;	O
}	O
int	O
ps_cmp_strings	function
(	O
struct	O
proc_stat	O
*	O
ps1	pointer
,	O
struct	O
proc_stat	O
*	O
ps2	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
void	O
(	O
*	O
gf	pointer
)	O
(	O
)	O
=	O
G	O
(	O
getter	pointer
,	O
void	O
)	O
;	O
char	O
*	O
s1	pointer
,	O
*	O
s2	pointer
;	O
int	O
s1len	int
,	O
s2len	int
;	O
gf	pointer
(	O
ps1	pointer
,	O
&	O
s1	pointer
,	O
&	O
s1len	int
)	O
;	O
gf	pointer
(	O
ps2	pointer
,	O
&	O
s2	pointer
,	O
&	O
s2len	int
)	O
;	O
return	O
GUARDED_CMP	O
(	O
s1	pointer
,	O
s2	pointer
,	O
strncmp	O
(	O
s1	pointer
,	O
s2	pointer
,	O
MIN	function
(	O
s1len	int
,	O
s2len	int
)	O
)	O
)	O
;	O
}	O
int	O
ps_cmp_times	function
(	O
struct	O
proc_stat	O
*	O
ps1	pointer
,	O
struct	O
proc_stat	O
*	O
ps2	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
void	O
(	O
*	O
g	pointer
)	O
(	O
)	O
=	O
G	O
(	O
getter	pointer
,	O
void	O
)	O
;	O
struct	O
timeval	O
tv1	struct
,	O
tv2	struct
;	O
g	pointer
(	O
ps1	pointer
,	O
&	O
tv1	struct
)	O
;	O
g	pointer
(	O
ps2	pointer
,	O
&	O
tv2	struct
)	O
;	O
return	O
tv1	struct
.	O
tv_sec	O
>	O
tv2	struct
.	O
tv_sec	O
?	O
1	int
:	O
tv1	struct
.	O
tv_sec	O
<	O
tv2	struct
.	O
tv_sec	O
?	O
-	O
1	int
:	O
tv1	struct
.	O
tv_usec	O
>	O
tv2	struct
.	O
tv_usec	O
?	O
1	int
:	O
tv2	struct
.	O
tv_usec	O
<	O
tv2	struct
.	O
tv_usec	O
?	O
-	O
1	int
:	O
0	int
;	O
}	O
int	O
ps_nominal_zint	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
return	O
G	O
(	O
getter	pointer
,	O
int	O
)	O
(	O
ps	pointer
)	O
==	O
0	int
;	O
}	O
int	O
ps_nominal_string	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
char	O
*	O
str	pointer
;	O
size_t	long
len	int
;	O
G	O
(	O
getter	pointer
,	O
char	O
*	O
)	O
(	O
ps	pointer
,	O
&	O
str	pointer
,	O
&	O
len	int
)	O
;	O
return	O
!	O
str	pointer
||	O
len	int
==	O
0	int
||	O
(	O
len	int
==	O
1	int
&&	O
*	O
str	pointer
==	O
'-'	O
)	O
;	O
}	O
int	O
ps_nominal_pri	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
return	O
MACH_PRIORITY_TO_NICE	function
(	O
G	O
(	O
getter	pointer
,	O
int	O
)	O
(	O
ps	pointer
)	O
)	O
==	O
0	int
;	O
}	O
int	O
ps_nominal_nth	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
return	O
G	O
(	O
getter	pointer
,	O
int	O
)	O
(	O
ps	pointer
)	O
==	O
2	int
;	O
}	O
static	O
int	O
own_uid	int
=	O
-	O
2	int
;	O
int	O
ps_nominal_user	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
struct	O
ps_user	O
*	O
u	pointer
=	O
G	O
(	O
getter	pointer
,	O
struct	O
ps_user	O
*	O
)	O
(	O
ps	pointer
)	O
;	O
if	O
(	O
own_uid	int
==	O
-	O
2	int
)	O
own_uid	int
=	O
getuid	function
(	O
)	O
;	O
return	O
own_uid	int
>=	O
0	int
&&	O
u	pointer
&&	O
u	pointer
->	O
uid	int
==	O
own_uid	int
;	O
}	O
int	O
ps_nominal_uid	function
(	O
struct	O
proc_stat	O
*	O
ps	pointer
,	O
const	O
struct	O
ps_getter	O
*	O
getter	pointer
)	O
{	O
uid_t	O
uid	int
=	O
G	O
(	O
getter	pointer
,	O
uid_t	O
)	O
(	O
ps	pointer
)	O
;	O
if	O
(	O
own_uid	int
==	O
-	O
2	int
)	O
own_uid	int
=	O
getuid	function
(	O
)	O
;	O
return	O
own_uid	int
>=	O
0	int
&&	O
uid	int
==	O
own_uid	int
;	O
}	O
static	O
const	O
struct	O
ps_fmt_spec	O
*	O
specv_find	function
(	O
const	O
struct	O
ps_fmt_spec	O
*	O
specs	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
*	O
aliased_to	pointer
)	O
{	O
while	O
(	O
!	O
ps_fmt_spec_is_end	function
(	O
specs	pointer
)	O
)	O
{	O
char	O
*	O
alias	pointer
=	O
index	O
(	O
specs	pointer
->	O
name	pointer
,	O
'='	O
)	O
;	O
if	O
(	O
alias	pointer
)	O
{	O
unsigned	O
name_len	int
=	O
strlen	O
(	O
name	pointer
)	O
;	O
if	O
(	O
name_len	int
==	O
alias	pointer
-	O
specs	pointer
->	O
name	pointer
&&	O
strncasecmp	O
(	O
name	pointer
,	O
specs	pointer
->	O
name	pointer
,	O
name_len	int
)	O
==	O
0	int
)	O
{	O
*	O
aliased_to	pointer
=	O
alias	pointer
+	O
1	int
;	O
return	O
specs	pointer
;	O
}	O
}	O
else	O
if	O
(	O
strcasecmp	O
(	O
specs	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
specs	pointer
;	O
specs	pointer
++	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
ps_fmt_spec_block	struct
{	O
struct	O
ps_fmt_spec_block	struct
*	O
next	pointer
;	O
struct	O
ps_fmt_spec	O
specs	pointer
[	O
EXP_BLOCK_SIZE	int
]	O
;	O
}	O
;	O
struct	O
ps_fmt_spec	O
*	O
specs_add_alias	function
(	O
struct	O
ps_fmt_specs	O
*	O
specs	pointer
,	O
const	O
struct	O
ps_fmt_spec	O
*	O
alias	pointer
,	O
const	O
struct	O
ps_fmt_spec	O
*	O
src	pointer
)	O
{	O
struct	O
ps_fmt_spec	O
*	O
exp	pointer
;	O
struct	O
ps_fmt_spec_block	struct
*	O
block	pointer
;	O
char	O
*	O
name_end	pointer
=	O
index	O
(	O
alias	pointer
->	O
name	pointer
,	O
'='	O
)	O
;	O
size_t	long
name_len	int
=	O
name_end	pointer
?	O
name_end	pointer
-	O
alias	pointer
->	O
name	pointer
:	O
strlen	O
(	O
alias	pointer
->	O
name	pointer
)	O
;	O
for	O
(	O
block	pointer
=	O
specs	pointer
->	O
expansions	O
;	O
block	pointer
;	O
block	pointer
=	O
block	pointer
->	O
next	pointer
)	O
{	O
exp	pointer
=	O
block	pointer
->	O
specs	pointer
;	O
while	O
(	O
!	O
ps_fmt_spec_is_end	function
(	O
exp	pointer
)	O
)	O
exp	pointer
++	O
;	O
if	O
(	O
exp	pointer
+	O
1	int
<	O
block	pointer
->	O
specs	pointer
+	O
EXP_BLOCK_SIZE	int
)	O
break	O
;	O
}	O
if	O
(	O
!	O
block	pointer
)	O
{	O
block	pointer
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
ps_fmt_spec_block	struct
)	O
)	O
;	O
if	O
(	O
!	O
block	pointer
)	O
return	O
0	int
;	O
block	pointer
->	O
next	pointer
=	O
specs	pointer
->	O
expansions	O
;	O
specs	pointer
->	O
expansions	O
=	O
block	pointer
;	O
exp	pointer
=	O
block	pointer
->	O
specs	pointer
;	O
}	O
exp	pointer
->	O
name	pointer
=	O
malloc	O
(	O
name_len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
exp	pointer
->	O
name	pointer
)	O
return	O
0	int
;	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
alias	pointer
->	O
name	pointer
,	O
(	O
char	O
*	O
)	O
exp	pointer
->	O
name	pointer
,	O
name_len	int
)	O
;	O
(	O
(	O
char	O
*	O
)	O
exp	pointer
->	O
name	pointer
)	O
[	O
name_len	int
]	O
=	O
'\0'	O
;	O
exp	pointer
->	O
title	O
=	O
alias	pointer
->	O
title	O
?	O
:	O
src	pointer
->	O
title	O
;	O
exp	pointer
->	O
width	int
=	O
alias	pointer
->	O
width	int
?	O
:	O
src	pointer
->	O
width	int
;	O
exp	pointer
->	O
precision	O
=	O
alias	pointer
->	O
precision	O
>=	O
0	int
?	O
alias	pointer
->	O
precision	O
:	O
src	pointer
->	O
precision	O
;	O
exp	pointer
->	O
flags	O
=	O
src	pointer
->	O
flags	O
^	O
alias	pointer
->	O
flags	O
;	O
exp	pointer
->	O
getter	pointer
=	O
alias	pointer
->	O
getter	pointer
?	O
:	O
src	pointer
->	O
getter	pointer
;	O
exp	pointer
->	O
output_fn	O
=	O
alias	pointer
->	O
output_fn	O
?	O
:	O
src	pointer
->	O
output_fn	O
;	O
exp	pointer
->	O
cmp_fn	O
=	O
alias	pointer
->	O
cmp_fn	O
?	O
:	O
src	pointer
->	O
cmp_fn	O
;	O
exp	pointer
->	O
nominal_fn	O
=	O
alias	pointer
->	O
nominal_fn	O
?	O
:	O
src	pointer
->	O
nominal_fn	O
;	O
memset	O
(	O
exp	pointer
+	O
1	int
,	O
0	int
,	O
sizeof	O
(	O
*	O
exp	pointer
)	O
)	O
;	O
return	O
exp	pointer
;	O
}	O
const	O
struct	O
ps_fmt_spec	O
*	O
ps_fmt_specs_find	function
(	O
struct	O
ps_fmt_specs	O
*	O
specs	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
specs	pointer
)	O
{	O
struct	O
ps_fmt_spec_block	struct
*	O
block	pointer
;	O
char	O
*	O
aliased_to	pointer
=	O
0	int
;	O
const	O
struct	O
ps_fmt_spec	O
*	O
s	pointer
=	O
0	int
;	O
for	O
(	O
block	pointer
=	O
specs	pointer
->	O
expansions	O
;	O
block	pointer
&&	O
!	O
s	pointer
;	O
block	pointer
=	O
block	pointer
->	O
next	pointer
)	O
s	pointer
=	O
specv_find	function
(	O
block	pointer
->	O
specs	pointer
,	O
name	pointer
,	O
&	O
aliased_to	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
s	pointer
=	O
specv_find	function
(	O
specs	pointer
->	O
specs	pointer
,	O
name	pointer
,	O
&	O
aliased_to	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
{	O
if	O
(	O
aliased_to	pointer
)	O
{	O
const	O
struct	O
ps_fmt_spec	O
*	O
src	pointer
;	O
if	O
(	O
strcasecmp	O
(	O
name	pointer
,	O
aliased_to	pointer
)	O
==	O
0	int
)	O
src	pointer
=	O
ps_fmt_specs_find	function
(	O
specs	pointer
->	O
parent	O
,	O
aliased_to	pointer
)	O
;	O
else	O
src	pointer
=	O
ps_fmt_specs_find	function
(	O
specs	pointer
,	O
aliased_to	pointer
)	O
;	O
if	O
(	O
!	O
src	pointer
)	O
return	O
0	int
;	O
s	pointer
=	O
specs_add_alias	function
(	O
specs	pointer
,	O
s	pointer
,	O
src	pointer
)	O
;	O
}	O
}	O
else	O
s	pointer
=	O
ps_fmt_specs_find	function
(	O
specs	pointer
->	O
parent	O
,	O
name	pointer
)	O
;	O
return	O
s	pointer
;	O
}	O
else	O
return	O
0	int
;	O
}	O
static	O
const	O
struct	O
ps_fmt_spec	O
specs	pointer
[	O
]	O
=	O
{	O
{	O
"PID"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_pid_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
0	int
}	O
,	O
{	O
"TH"	pointer
,	O
"TH#"	pointer
,	O
-	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_thread_index_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
0	int
}	O
,	O
{	O
"PPID"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_ppid_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
0	int
}	O
,	O
{	O
"UID"	pointer
,	O
0	int
,	O
-	O
4	int
,	O
-	O
1	int
,	O
PS_FMT_FIELD_KEEP	O
,	O
&	O
ps_owner_uid_getter	struct
,	O
ps_emit_uid	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_uid	function
}	O
,	O
{	O
"User"	pointer
,	O
0	int
,	O
8	int
,	O
-	O
1	int
,	O
PS_FMT_FIELD_KEEP	O
,	O
&	O
ps_owner_getter	struct
,	O
ps_emit_uname	function
,	O
ps_cmp_unames	function
,	O
ps_nominal_user	function
}	O
,	O
{	O
"NTh"	pointer
,	O
0	int
,	O
-	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_num_threads_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_nth	function
}	O
,	O
{	O
"PGrp"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_pgrp_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
0	int
}	O
,	O
{	O
"Sess"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_session_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
0	int
}	O
,	O
{	O
"LColl"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_login_col_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
0	int
}	O
,	O
{	O
"Args"	pointer
,	O
0	int
,	O
0	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_args_getter	struct
,	O
ps_emit_args	function
,	O
ps_cmp_strings	function
,	O
ps_nominal_string	function
}	O
,	O
{	O
"Arg0"	pointer
,	O
0	int
,	O
0	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_args_getter	struct
,	O
ps_emit_string	function
,	O
ps_cmp_strings	function
,	O
ps_nominal_string	function
}	O
,	O
{	O
"Env"	pointer
,	O
0	int
,	O
0	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_env_getter	struct
,	O
ps_emit_args	function
,	O
ps_cmp_strings	function
,	O
ps_nominal_string	function
}	O
,	O
{	O
"Start"	pointer
,	O
0	int
,	O
-	O
7	int
,	O
1	int
,	O
0	int
,	O
&	O
ps_start_time_getter	struct
,	O
ps_emit_past_time	function
,	O
ps_cmp_times	function
,	O
0	int
}	O
,	O
{	O
"Time"	pointer
,	O
0	int
,	O
-	O
8	int
,	O
2	int
,	O
0	int
,	O
&	O
ps_tot_time_getter	struct
,	O
ps_emit_seconds	function
,	O
ps_cmp_times	function
,	O
0	int
}	O
,	O
{	O
"UTime"	pointer
,	O
0	int
,	O
-	O
8	int
,	O
2	int
,	O
0	int
,	O
&	O
ps_usr_time_getter	struct
,	O
ps_emit_seconds	function
,	O
ps_cmp_times	function
,	O
0	int
}	O
,	O
{	O
"STime"	pointer
,	O
0	int
,	O
-	O
8	int
,	O
2	int
,	O
0	int
,	O
&	O
ps_sys_time_getter	struct
,	O
ps_emit_seconds	function
,	O
ps_cmp_times	function
,	O
0	int
}	O
,	O
{	O
"VSize"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_vsize_getter	struct
,	O
ps_emit_nice_size_t	function
,	O
ps_cmp_size_ts	function
,	O
0	int
}	O
,	O
{	O
"RSize"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_rsize_getter	struct
,	O
ps_emit_nice_size_t	function
,	O
ps_cmp_size_ts	function
,	O
0	int
}	O
,	O
{	O
"Pri"	pointer
,	O
0	int
,	O
-	O
3	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_cur_priority_getter	struct
,	O
ps_emit_priority	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_pri	function
}	O
,	O
{	O
"BPri"	pointer
,	O
0	int
,	O
-	O
3	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_base_priority_getter	struct
,	O
ps_emit_priority	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_pri	function
}	O
,	O
{	O
"MPri"	pointer
,	O
0	int
,	O
-	O
3	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_max_priority_getter	struct
,	O
ps_emit_priority	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_pri	function
}	O
,	O
{	O
"Mem"	pointer
,	O
"%Mem"	pointer
,	O
-	O
4	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_rmem_frac_getter	struct
,	O
ps_emit_percent	function
,	O
ps_cmp_floats	function
,	O
0	int
}	O
,	O
{	O
"CPU"	pointer
,	O
"%CPU"	pointer
,	O
-	O
4	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_cpu_frac_getter	struct
,	O
ps_emit_percent	function
,	O
ps_cmp_floats	function
,	O
0	int
}	O
,	O
{	O
"State"	pointer
,	O
0	int
,	O
4	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_state_getter	struct
,	O
ps_emit_state	function
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"Wait"	pointer
,	O
0	int
,	O
10	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_wait_getter	struct
,	O
ps_emit_wait	function
,	O
0	int
,	O
0	int
}	O
,	O
{	O
"Sleep"	pointer
,	O
0	int
,	O
-	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_sleep_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_zint	function
}	O
,	O
{	O
"Susp"	pointer
,	O
0	int
,	O
-	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_susp_count_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_zint	function
}	O
,	O
{	O
"PSusp"	pointer
,	O
0	int
,	O
-	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_proc_susp_count_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_zint	function
}	O
,	O
{	O
"TSusp"	pointer
,	O
0	int
,	O
-	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_thread_susp_count_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_zint	function
}	O
,	O
{	O
"TTY"	pointer
,	O
0	int
,	O
-	O
2	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_tty_getter	struct
,	O
ps_emit_tty_name	function
,	O
ps_cmp_strings	function
,	O
0	int
}	O
,	O
{	O
"PgFlts"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_page_faults_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_zint	function
}	O
,	O
{	O
"COWFlts"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_cow_faults_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_zint	function
}	O
,	O
{	O
"PgIns"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_pageins_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_zint	function
}	O
,	O
{	O
"MsgIn"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_msgs_rcvd_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_zint	function
}	O
,	O
{	O
"MsgOut"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_msgs_sent_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_zint	function
}	O
,	O
{	O
"ZFills"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_zero_fills_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
ps_nominal_zint	function
}	O
,	O
{	O
"Ports"	pointer
,	O
0	int
,	O
-	O
5	int
,	O
-	O
1	int
,	O
0	int
,	O
&	O
ps_num_ports_getter	struct
,	O
ps_emit_int	function
,	O
ps_cmp_ints	function
,	O
0	int
}	O
,	O
{	O
0	int
}	O
}	O
;	O
struct	O
ps_fmt_specs	O
ps_std_fmt_specs	struct
=	O
{	O
specs	pointer
,	O
0	int
}	O
;	O
