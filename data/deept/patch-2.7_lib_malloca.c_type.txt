struct	O
preliminary_header	struct
{	O
void	O
*	O
next	pointer
;	O
char	O
room	array
[	O
MAGIC_SIZE	O
]	O
;	O
}	O
;	O
struct	O
header	struct
{	O
void	O
*	O
next	pointer
;	O
char	O
room	array
[	O
HEADER_SIZE	O
-	O
sizeof	O
(	O
struct	O
preliminary_header	struct
)	O
+	O
MAGIC_SIZE	O
]	O
;	O
}	O
;	O
verify	O
(	O
HEADER_SIZE	O
==	O
sizeof	O
(	O
struct	O
header	struct
)	O
)	O
;	O
static	O
void	O
*	O
mmalloca_results	array
[	O
HASH_TABLE_SIZE	int
]	O
;	O
void	O
*	O
mmalloca	function
(	O
size_t	long
n	long
)	O
{	O
size_t	long
nplus	long
=	O
n	long
+	O
HEADER_SIZE	O
;	O
if	O
(	O
nplus	long
>=	O
n	long
)	O
{	O
char	O
*	O
p	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
nplus	long
)	O
;	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
slot	long
;	O
p	pointer
+=	O
HEADER_SIZE	O
;	O
(	O
(	O
int	O
*	O
)	O
p	pointer
)	O
[	O
-	O
1	int
]	O
=	O
MAGIC_NUMBER	int
;	O
slot	long
=	O
(	O
uintptr_t	long
)	O
p	pointer
%	O
HASH_TABLE_SIZE	int
;	O
(	O
(	O
struct	O
header	struct
*	O
)	O
(	O
p	pointer
-	O
HEADER_SIZE	O
)	O
)	O
->	O
next	pointer
=	O
mmalloca_results	array
[	O
slot	long
]	O
;	O
mmalloca_results	array
[	O
slot	long
]	O
=	O
p	pointer
;	O
return	O
p	pointer
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
void	O
freea	function
(	O
void	O
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
(	O
(	O
int	O
*	O
)	O
p	pointer
)	O
[	O
-	O
1	int
]	O
==	O
MAGIC_NUMBER	int
)	O
{	O
size_t	long
slot	long
=	O
(	O
uintptr_t	long
)	O
p	pointer
%	O
HASH_TABLE_SIZE	int
;	O
void	O
*	O
*	O
chain	pointer
=	O
&	O
mmalloca_results	array
[	O
slot	long
]	O
;	O
for	O
(	O
;	O
*	O
chain	pointer
!=	O
NULL	O
;	O
)	O
{	O
if	O
(	O
*	O
chain	pointer
==	O
p	pointer
)	O
{	O
char	O
*	O
p_begin	pointer
=	O
(	O
char	O
*	O
)	O
p	pointer
-	O
HEADER_SIZE	O
;	O
*	O
chain	pointer
=	O
(	O
(	O
struct	O
header	struct
*	O
)	O
p_begin	pointer
)	O
->	O
next	pointer
;	O
free	function
(	O
p_begin	pointer
)	O
;	O
return	O
;	O
}	O
chain	pointer
=	O
&	O
(	O
(	O
struct	O
header	struct
*	O
)	O
(	O
(	O
char	O
*	O
)	O
*	O
chain	pointer
-	O
HEADER_SIZE	O
)	O
)	O
->	O
next	pointer
;	O
}	O
}	O
}	O
}	O
