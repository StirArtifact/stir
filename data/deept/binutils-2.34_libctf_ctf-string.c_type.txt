const	O
char	O
*	O
ctf_strraw_explicit	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
uint32_t	int
name	pointer
,	O
ctf_strs_t	struct
*	O
strtab	pointer
)	O
{	O
ctf_strs_t	struct
*	O
ctsp	pointer
=	O
&	O
fp	pointer
->	O
ctf_str	array
[	O
CTF_NAME_STID	O
(	O
name	pointer
)	O
]	O
;	O
if	O
(	O
(	O
CTF_NAME_STID	O
(	O
name	pointer
)	O
==	O
CTF_STRTAB_0	int
)	O
&&	O
(	O
strtab	pointer
!=	O
NULL	O
)	O
)	O
ctsp	pointer
=	O
strtab	pointer
;	O
if	O
(	O
CTF_NAME_STID	O
(	O
name	pointer
)	O
==	O
CTF_STRTAB_1	int
&&	O
fp	pointer
->	O
ctf_syn_ext_strtab	pointer
!=	O
NULL	O
)	O
return	O
ctf_dynhash_lookup	function
(	O
fp	pointer
->	O
ctf_syn_ext_strtab	pointer
,	O
(	O
void	O
*	O
)	O
(	O
uintptr_t	long
)	O
name	pointer
)	O
;	O
if	O
(	O
CTF_NAME_STID	O
(	O
name	pointer
)	O
==	O
CTF_STRTAB_0	int
&&	O
name	pointer
>=	O
ctsp	pointer
->	O
cts_len	long
&&	O
name	pointer
<	O
fp	pointer
->	O
ctf_str_prov_offset	int
)	O
return	O
ctf_dynhash_lookup	function
(	O
fp	pointer
->	O
ctf_prov_strtab	pointer
,	O
(	O
void	O
*	O
)	O
(	O
uintptr_t	long
)	O
name	pointer
)	O
;	O
if	O
(	O
ctsp	pointer
->	O
cts_strs	pointer
!=	O
NULL	O
&&	O
CTF_NAME_OFFSET	O
(	O
name	pointer
)	O
<	O
ctsp	pointer
->	O
cts_len	long
)	O
return	O
(	O
ctsp	pointer
->	O
cts_strs	pointer
+	O
CTF_NAME_OFFSET	O
(	O
name	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
ctf_strraw	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
uint32_t	int
name	pointer
)	O
{	O
return	O
ctf_strraw_explicit	function
(	O
fp	pointer
,	O
name	pointer
,	O
NULL	O
)	O
;	O
}	O
const	O
char	O
*	O
ctf_strptr	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
uint32_t	int
name	pointer
)	O
{	O
const	O
char	O
*	O
s	pointer
=	O
ctf_strraw	function
(	O
fp	pointer
,	O
name	pointer
)	O
;	O
return	O
(	O
s	pointer
!=	O
NULL	O
?	O
s	pointer
:	O
"(?)"	pointer
)	O
;	O
}	O
static	O
void	O
ctf_str_purge_atom_refs	function
(	O
ctf_str_atom_t	struct
*	O
atom	pointer
)	O
{	O
ctf_str_atom_ref_t	struct
*	O
ref	pointer
,	O
*	O
next	pointer
;	O
for	O
(	O
ref	pointer
=	O
ctf_list_next	O
(	O
&	O
atom	pointer
->	O
csa_refs	struct
)	O
;	O
ref	pointer
!=	O
NULL	O
;	O
ref	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
ctf_list_next	O
(	O
ref	pointer
)	O
;	O
ctf_list_delete	function
(	O
&	O
atom	pointer
->	O
csa_refs	struct
,	O
ref	pointer
)	O
;	O
free	function
(	O
ref	pointer
)	O
;	O
}	O
}	O
static	O
void	O
ctf_str_free_atom	function
(	O
void	O
*	O
a	pointer
)	O
{	O
ctf_str_atom_t	struct
*	O
atom	pointer
=	O
a	pointer
;	O
ctf_str_purge_atom_refs	function
(	O
atom	pointer
)	O
;	O
free	function
(	O
atom	pointer
)	O
;	O
}	O
int	O
ctf_str_create_atoms	function
(	O
ctf_file_t	struct
*	O
fp	pointer
)	O
{	O
fp	pointer
->	O
ctf_str_atoms	pointer
=	O
ctf_dynhash_create	function
(	O
ctf_hash_string	function
,	O
ctf_hash_eq_string	function
,	O
free	function
,	O
ctf_str_free_atom	function
)	O
;	O
if	O
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
==	O
NULL	O
)	O
return	O
-	O
ENOMEM	int
;	O
if	O
(	O
!	O
fp	pointer
->	O
ctf_prov_strtab	pointer
)	O
fp	pointer
->	O
ctf_prov_strtab	pointer
=	O
ctf_dynhash_create	function
(	O
ctf_hash_integer	function
,	O
ctf_hash_eq_integer	function
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
fp	pointer
->	O
ctf_prov_strtab	pointer
)	O
goto	O
oom_prov_strtab	O
;	O
errno	O
=	O
0	int
;	O
ctf_str_add	function
(	O
fp	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
goto	O
oom_str_add	O
;	O
return	O
0	int
;	O
oom_str_add	O
:	O
ctf_dynhash_destroy	function
(	O
fp	pointer
->	O
ctf_prov_strtab	pointer
)	O
;	O
fp	pointer
->	O
ctf_prov_strtab	pointer
=	O
NULL	O
;	O
oom_prov_strtab	O
:	O
ctf_dynhash_destroy	function
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
)	O
;	O
fp	pointer
->	O
ctf_str_atoms	pointer
=	O
NULL	O
;	O
return	O
-	O
ENOMEM	int
;	O
}	O
void	O
ctf_str_free_atoms	function
(	O
ctf_file_t	struct
*	O
fp	pointer
)	O
{	O
ctf_dynhash_destroy	function
(	O
fp	pointer
->	O
ctf_prov_strtab	pointer
)	O
;	O
ctf_dynhash_destroy	function
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
)	O
;	O
}	O
static	O
ctf_str_atom_t	struct
*	O
ctf_str_add_ref_internal	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
int	O
add_ref	int
,	O
int	O
make_provisional	int
,	O
uint32_t	int
*	O
ref	pointer
)	O
{	O
char	O
*	O
newstr	pointer
=	O
NULL	O
;	O
ctf_str_atom_t	struct
*	O
atom	pointer
=	O
NULL	O
;	O
ctf_str_atom_ref_t	struct
*	O
aref	pointer
=	O
NULL	O
;	O
atom	pointer
=	O
ctf_dynhash_lookup	function
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
,	O
str	pointer
)	O
;	O
if	O
(	O
add_ref	int
)	O
{	O
if	O
(	O
(	O
aref	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
ctf_str_atom_ref	struct
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
aref	pointer
->	O
caf_ref	pointer
=	O
ref	pointer
;	O
}	O
if	O
(	O
atom	pointer
)	O
{	O
if	O
(	O
add_ref	int
)	O
{	O
ctf_list_append	function
(	O
&	O
atom	pointer
->	O
csa_refs	struct
,	O
aref	pointer
)	O
;	O
fp	pointer
->	O
ctf_str_num_refs	long
++	O
;	O
}	O
return	O
atom	pointer
;	O
}	O
if	O
(	O
(	O
atom	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
ctf_str_atom	struct
)	O
)	O
)	O
==	O
NULL	O
)	O
goto	O
oom	O
;	O
memset	function
(	O
atom	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
ctf_str_atom	struct
)	O
)	O
;	O
if	O
(	O
(	O
newstr	pointer
=	O
strdup	function
(	O
str	pointer
)	O
)	O
==	O
NULL	O
)	O
goto	O
oom	O
;	O
if	O
(	O
ctf_dynhash_insert	function
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
,	O
newstr	pointer
,	O
atom	pointer
)	O
<	O
0	int
)	O
goto	O
oom	O
;	O
atom	pointer
->	O
csa_str	pointer
=	O
newstr	pointer
;	O
atom	pointer
->	O
csa_snapshot_id	long
=	O
fp	pointer
->	O
ctf_snapshots	long
;	O
if	O
(	O
make_provisional	int
)	O
{	O
atom	pointer
->	O
csa_offset	int
=	O
fp	pointer
->	O
ctf_str_prov_offset	int
;	O
if	O
(	O
ctf_dynhash_insert	function
(	O
fp	pointer
->	O
ctf_prov_strtab	pointer
,	O
(	O
void	O
*	O
)	O
(	O
uintptr_t	long
)	O
atom	pointer
->	O
csa_offset	int
,	O
(	O
void	O
*	O
)	O
atom	pointer
->	O
csa_str	pointer
)	O
<	O
0	int
)	O
goto	O
oom	O
;	O
fp	pointer
->	O
ctf_str_prov_offset	int
+=	O
strlen	function
(	O
atom	pointer
->	O
csa_str	pointer
)	O
+	O
1	int
;	O
}	O
if	O
(	O
add_ref	int
)	O
{	O
ctf_list_append	function
(	O
&	O
atom	pointer
->	O
csa_refs	struct
,	O
aref	pointer
)	O
;	O
fp	pointer
->	O
ctf_str_num_refs	long
++	O
;	O
}	O
return	O
atom	pointer
;	O
oom	O
:	O
if	O
(	O
newstr	pointer
)	O
ctf_dynhash_remove	function
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
,	O
newstr	pointer
)	O
;	O
free	function
(	O
atom	pointer
)	O
;	O
free	function
(	O
aref	pointer
)	O
;	O
free	function
(	O
newstr	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
uint32_t	int
ctf_str_add	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
ctf_str_atom_t	struct
*	O
atom	pointer
;	O
if	O
(	O
!	O
str	pointer
)	O
return	O
0	int
;	O
atom	pointer
=	O
ctf_str_add_ref_internal	function
(	O
fp	pointer
,	O
str	pointer
,	O
FALSE	int
,	O
TRUE	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
atom	pointer
)	O
return	O
0	int
;	O
return	O
atom	pointer
->	O
csa_offset	int
;	O
}	O
uint32_t	int
ctf_str_add_ref	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
uint32_t	int
*	O
ref	pointer
)	O
{	O
ctf_str_atom_t	struct
*	O
atom	pointer
;	O
if	O
(	O
!	O
str	pointer
)	O
return	O
0	int
;	O
atom	pointer
=	O
ctf_str_add_ref_internal	function
(	O
fp	pointer
,	O
str	pointer
,	O
TRUE	int
,	O
TRUE	int
,	O
ref	pointer
)	O
;	O
if	O
(	O
!	O
atom	pointer
)	O
return	O
0	int
;	O
return	O
atom	pointer
->	O
csa_offset	int
;	O
}	O
int	O
ctf_str_add_external	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
uint32_t	int
offset	long
)	O
{	O
ctf_str_atom_t	struct
*	O
atom	pointer
;	O
if	O
(	O
!	O
str	pointer
)	O
return	O
0	int
;	O
atom	pointer
=	O
ctf_str_add_ref_internal	function
(	O
fp	pointer
,	O
str	pointer
,	O
FALSE	int
,	O
FALSE	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
atom	pointer
)	O
return	O
0	int
;	O
atom	pointer
->	O
csa_external_offset	int
=	O
CTF_SET_STID	O
(	O
offset	long
,	O
CTF_STRTAB_1	int
)	O
;	O
return	O
1	int
;	O
}	O
void	O
ctf_str_remove_ref	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
uint32_t	int
*	O
ref	pointer
)	O
{	O
ctf_str_atom_ref_t	struct
*	O
aref	pointer
,	O
*	O
anext	pointer
;	O
ctf_str_atom_t	struct
*	O
atom	pointer
=	O
NULL	O
;	O
atom	pointer
=	O
ctf_dynhash_lookup	function
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
,	O
str	pointer
)	O
;	O
if	O
(	O
!	O
atom	pointer
)	O
return	O
;	O
for	O
(	O
aref	pointer
=	O
ctf_list_next	O
(	O
&	O
atom	pointer
->	O
csa_refs	struct
)	O
;	O
aref	pointer
!=	O
NULL	O
;	O
aref	pointer
=	O
anext	pointer
)	O
{	O
anext	pointer
=	O
ctf_list_next	O
(	O
aref	pointer
)	O
;	O
if	O
(	O
aref	pointer
->	O
caf_ref	pointer
==	O
ref	pointer
)	O
{	O
ctf_list_delete	function
(	O
&	O
atom	pointer
->	O
csa_refs	struct
,	O
aref	pointer
)	O
;	O
free	function
(	O
aref	pointer
)	O
;	O
}	O
}	O
}	O
static	O
int	O
ctf_str_rollback_atom	function
(	O
void	O
*	O
key	pointer
_libctf_unused_	O
,	O
void	O
*	O
value	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
ctf_str_atom_t	struct
*	O
atom	pointer
=	O
(	O
ctf_str_atom_t	struct
*	O
)	O
value	int
;	O
ctf_snapshot_id_t	struct
*	O
id	int
=	O
(	O
ctf_snapshot_id_t	struct
*	O
)	O
arg	pointer
;	O
return	O
(	O
atom	pointer
->	O
csa_snapshot_id	long
>	O
id	int
->	O
snapshot_id	long
)	O
;	O
}	O
void	O
ctf_str_rollback	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_snapshot_id_t	struct
id	int
)	O
{	O
ctf_dynhash_iter_remove	function
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
,	O
ctf_str_rollback_atom	function
,	O
&	O
id	int
)	O
;	O
}	O
static	O
void	O
ctf_str_purge_one_atom_refs	function
(	O
void	O
*	O
key	pointer
_libctf_unused_	O
,	O
void	O
*	O
value	int
,	O
void	O
*	O
arg	pointer
_libctf_unused_	O
)	O
{	O
ctf_str_atom_t	struct
*	O
atom	pointer
=	O
(	O
ctf_str_atom_t	struct
*	O
)	O
value	int
;	O
ctf_str_purge_atom_refs	function
(	O
atom	pointer
)	O
;	O
}	O
void	O
ctf_str_purge_refs	function
(	O
ctf_file_t	struct
*	O
fp	pointer
)	O
{	O
if	O
(	O
fp	pointer
->	O
ctf_str_num_refs	long
>	O
0	int
)	O
ctf_dynhash_iter	function
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
,	O
ctf_str_purge_one_atom_refs	function
,	O
NULL	O
)	O
;	O
fp	pointer
->	O
ctf_str_num_refs	long
=	O
0	int
;	O
}	O
static	O
void	O
ctf_str_update_refs	function
(	O
ctf_str_atom_t	struct
*	O
refs	pointer
,	O
uint32_t	int
value	int
)	O
{	O
ctf_str_atom_ref_t	struct
*	O
ref	pointer
;	O
for	O
(	O
ref	pointer
=	O
ctf_list_next	O
(	O
&	O
refs	pointer
->	O
csa_refs	struct
)	O
;	O
ref	pointer
!=	O
NULL	O
;	O
ref	pointer
=	O
ctf_list_next	O
(	O
ref	pointer
)	O
)	O
*	O
(	O
ref	pointer
->	O
caf_ref	pointer
)	O
=	O
value	int
;	O
}	O
typedef	O
struct	O
ctf_strtab_write_state	struct
{	O
ctf_strs_writable_t	struct
*	O
strtab	pointer
;	O
size_t	long
strtab_count	long
;	O
ctf_str_atom_t	struct
*	O
*	O
sorttab	pointer
;	O
size_t	long
i	pointer
;	O
ctf_str_atom_t	struct
*	O
nullstr	pointer
;	O
}	O
ctf_strtab_write_state_t	struct
;	O
static	O
void	O
ctf_str_count_strtab	function
(	O
void	O
*	O
key	pointer
_libctf_unused_	O
,	O
void	O
*	O
value	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
ctf_str_atom_t	struct
*	O
atom	pointer
=	O
(	O
ctf_str_atom_t	struct
*	O
)	O
value	int
;	O
ctf_strtab_write_state_t	struct
*	O
s	pointer
=	O
(	O
ctf_strtab_write_state_t	struct
*	O
)	O
arg	pointer
;	O
if	O
(	O
s	pointer
->	O
nullstr	pointer
==	O
atom	pointer
)	O
{	O
s	pointer
->	O
strtab_count	long
++	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
ctf_list_empty_p	function
(	O
&	O
atom	pointer
->	O
csa_refs	struct
)	O
)	O
{	O
if	O
(	O
!	O
atom	pointer
->	O
csa_external_offset	int
)	O
s	pointer
->	O
strtab	pointer
->	O
cts_len	long
+=	O
strlen	function
(	O
atom	pointer
->	O
csa_str	pointer
)	O
+	O
1	int
;	O
s	pointer
->	O
strtab_count	long
++	O
;	O
}	O
}	O
static	O
void	O
ctf_str_populate_sorttab	function
(	O
void	O
*	O
key	pointer
_libctf_unused_	O
,	O
void	O
*	O
value	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
ctf_str_atom_t	struct
*	O
atom	pointer
=	O
(	O
ctf_str_atom_t	struct
*	O
)	O
value	int
;	O
ctf_strtab_write_state_t	struct
*	O
s	pointer
=	O
(	O
ctf_strtab_write_state_t	struct
*	O
)	O
arg	pointer
;	O
if	O
(	O
s	pointer
->	O
nullstr	pointer
==	O
atom	pointer
)	O
return	O
;	O
if	O
(	O
!	O
ctf_list_empty_p	function
(	O
&	O
atom	pointer
->	O
csa_refs	struct
)	O
)	O
s	pointer
->	O
sorttab	pointer
[	O
s	pointer
->	O
i	pointer
++	O
]	O
=	O
atom	pointer
;	O
}	O
static	O
int	O
ctf_str_sort_strtab	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
ctf_str_atom_t	struct
*	O
*	O
one	pointer
=	O
(	O
ctf_str_atom_t	struct
*	O
*	O
)	O
a	pointer
;	O
ctf_str_atom_t	struct
*	O
*	O
two	pointer
=	O
(	O
ctf_str_atom_t	struct
*	O
*	O
)	O
b	pointer
;	O
return	O
(	O
strcmp	function
(	O
(	O
*	O
one	pointer
)	O
->	O
csa_str	pointer
,	O
(	O
*	O
two	pointer
)	O
->	O
csa_str	pointer
)	O
)	O
;	O
}	O
ctf_strs_writable_t	struct
ctf_str_write_strtab	function
(	O
ctf_file_t	struct
*	O
fp	pointer
)	O
{	O
ctf_strs_writable_t	struct
strtab	pointer
;	O
ctf_str_atom_t	struct
*	O
nullstr	pointer
;	O
uint32_t	int
cur_stroff	int
=	O
0	int
;	O
ctf_strtab_write_state_t	struct
s	pointer
;	O
ctf_str_atom_t	struct
*	O
*	O
sorttab	pointer
;	O
size_t	long
i	pointer
;	O
int	O
any_external	int
=	O
0	int
;	O
memset	function
(	O
&	O
strtab	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
ctf_strs_writable	struct
)	O
)	O
;	O
memset	function
(	O
&	O
s	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
ctf_strtab_write_state	struct
)	O
)	O
;	O
s	pointer
.	O
strtab	pointer
=	O
&	O
strtab	pointer
;	O
nullstr	pointer
=	O
ctf_dynhash_lookup	function
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
!	O
nullstr	pointer
)	O
{	O
ctf_dprintf	function
(	O
"Internal error: null string not found in strtab.\n"	pointer
)	O
;	O
strtab	pointer
.	O
cts_strs	pointer
=	O
NULL	O
;	O
return	O
strtab	pointer
;	O
}	O
s	pointer
.	O
nullstr	pointer
=	O
nullstr	pointer
;	O
ctf_dynhash_iter	function
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
,	O
ctf_str_count_strtab	function
,	O
&	O
s	pointer
)	O
;	O
strtab	pointer
.	O
cts_len	long
++	O
;	O
ctf_dprintf	function
(	O
"%lu bytes of strings in strtab.\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
strtab	pointer
.	O
cts_len	long
)	O
;	O
sorttab	pointer
=	O
calloc	function
(	O
s	pointer
.	O
strtab_count	long
,	O
sizeof	O
(	O
ctf_str_atom_t	struct
*	O
)	O
)	O
;	O
if	O
(	O
!	O
sorttab	pointer
)	O
goto	O
oom	O
;	O
sorttab	pointer
[	O
0	int
]	O
=	O
nullstr	pointer
;	O
s	pointer
.	O
i	pointer
=	O
1	int
;	O
s	pointer
.	O
sorttab	pointer
=	O
sorttab	pointer
;	O
ctf_dynhash_iter	function
(	O
fp	pointer
->	O
ctf_str_atoms	pointer
,	O
ctf_str_populate_sorttab	function
,	O
&	O
s	pointer
)	O
;	O
qsort	function
(	O
&	O
sorttab	pointer
[	O
1	int
]	O
,	O
s	pointer
.	O
strtab_count	long
-	O
1	int
,	O
sizeof	O
(	O
ctf_str_atom_t	struct
*	O
)	O
,	O
ctf_str_sort_strtab	function
)	O
;	O
if	O
(	O
(	O
strtab	pointer
.	O
cts_strs	pointer
=	O
malloc	function
(	O
strtab	pointer
.	O
cts_len	long
)	O
)	O
==	O
NULL	O
)	O
goto	O
oom_sorttab	O
;	O
if	O
(	O
!	O
fp	pointer
->	O
ctf_syn_ext_strtab	pointer
)	O
fp	pointer
->	O
ctf_syn_ext_strtab	pointer
=	O
ctf_dynhash_create	function
(	O
ctf_hash_integer	function
,	O
ctf_hash_eq_integer	function
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
fp	pointer
->	O
ctf_syn_ext_strtab	pointer
)	O
goto	O
oom_strtab	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
s	pointer
.	O
strtab_count	long
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
sorttab	pointer
[	O
i	pointer
]	O
->	O
csa_external_offset	int
)	O
{	O
any_external	int
=	O
1	int
;	O
ctf_str_update_refs	function
(	O
sorttab	pointer
[	O
i	pointer
]	O
,	O
sorttab	pointer
[	O
i	pointer
]	O
->	O
csa_external_offset	int
)	O
;	O
if	O
(	O
ctf_dynhash_insert	function
(	O
fp	pointer
->	O
ctf_syn_ext_strtab	pointer
,	O
(	O
void	O
*	O
)	O
(	O
uintptr_t	long
)	O
sorttab	pointer
[	O
i	pointer
]	O
->	O
csa_external_offset	int
,	O
(	O
void	O
*	O
)	O
sorttab	pointer
[	O
i	pointer
]	O
->	O
csa_str	pointer
)	O
<	O
0	int
)	O
goto	O
oom_strtab	O
;	O
sorttab	pointer
[	O
i	pointer
]	O
->	O
csa_offset	int
=	O
sorttab	pointer
[	O
i	pointer
]	O
->	O
csa_external_offset	int
;	O
}	O
else	O
{	O
ctf_str_update_refs	function
(	O
sorttab	pointer
[	O
i	pointer
]	O
,	O
cur_stroff	int
)	O
;	O
sorttab	pointer
[	O
i	pointer
]	O
->	O
csa_offset	int
=	O
cur_stroff	int
;	O
strcpy	function
(	O
&	O
strtab	pointer
.	O
cts_strs	pointer
[	O
cur_stroff	int
]	O
,	O
sorttab	pointer
[	O
i	pointer
]	O
->	O
csa_str	pointer
)	O
;	O
cur_stroff	int
+=	O
strlen	function
(	O
sorttab	pointer
[	O
i	pointer
]	O
->	O
csa_str	pointer
)	O
+	O
1	int
;	O
}	O
}	O
free	function
(	O
sorttab	pointer
)	O
;	O
if	O
(	O
!	O
any_external	int
)	O
{	O
ctf_dynhash_destroy	function
(	O
fp	pointer
->	O
ctf_syn_ext_strtab	pointer
)	O
;	O
fp	pointer
->	O
ctf_syn_ext_strtab	pointer
=	O
NULL	O
;	O
}	O
ctf_dynhash_empty	function
(	O
fp	pointer
->	O
ctf_prov_strtab	pointer
)	O
;	O
fp	pointer
->	O
ctf_str_prov_offset	int
=	O
strtab	pointer
.	O
cts_len	long
+	O
1	int
;	O
return	O
strtab	pointer
;	O
oom_strtab	O
:	O
free	function
(	O
strtab	pointer
.	O
cts_strs	pointer
)	O
;	O
strtab	pointer
.	O
cts_strs	pointer
=	O
NULL	O
;	O
oom_sorttab	O
:	O
free	function
(	O
sorttab	pointer
)	O
;	O
oom	O
:	O
return	O
strtab	pointer
;	O
}	O
