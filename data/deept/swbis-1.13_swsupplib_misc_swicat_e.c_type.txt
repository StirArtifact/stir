static	O
int	O
show_nopen	function
(	O
void	O
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
open	function
(	O
"/dev/null"	pointer
,	O
O_RDWR	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"fcntl error: %s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
close	pointer
(	O
ret	int
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
fix_offset	function
(	O
SWICAT_E	struct
*	O
e	pointer
)	O
{	O
int	O
ret	int
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
uxfio_fcntl	function
(	O
e	pointer
->	O
entry_fdM	int
,	O
UXFIO_F_GET_VEOF	O
,	O
0	int
)	O
;	O
E_DEBUG2	O
(	O
"ret=%d"	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
ret	int
=	O
uxfio_lseek	function
(	O
e	pointer
->	O
entry_fdM	int
,	O
(	O
off_t	long
)	O
(	O
0	int
)	O
,	O
SEEK_CUR	int
)	O
;	O
E_DEBUG2	O
(	O
"ret=%d"	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
e	pointer
->	O
restore_offsetM	int
=	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
E_DEBUG2	O
(	O
"setting restore_offsetM to %d"	pointer
,	O
ret	int
)	O
;	O
e	pointer
->	O
restore_offsetM	int
=	O
ret	int
;	O
ret	int
=	O
uxfio_lseek	function
(	O
e	pointer
->	O
entry_fdM	int
,	O
(	O
off_t	long
)	O
(	O
e	pointer
->	O
start_offsetM	int
)	O
,	O
SEEK_SET	int
)	O
;	O
E_DEBUG2	O
(	O
"ret=%d"	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
"setting initial position"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
ret	int
=	O
uxfio_fcntl	function
(	O
e	pointer
->	O
entry_fdM	int
,	O
UXFIO_F_SET_VEOF	O
,	O
(	O
int	O
)	O
(	O
e	pointer
->	O
end_offsetM	int
)	O
)	O
;	O
E_DEBUG2	O
(	O
"ret=%d"	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
"setting veof"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
ret	int
!=	O
(	O
int	O
)	O
(	O
e	pointer
->	O
end_offsetM	int
)	O
)	O
{	O
SWLIB_ERROR	O
(	O
"INTERNAL ERROR"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
ret	int
=	O
uxfio_lseek	function
(	O
e	pointer
->	O
entry_fdM	int
,	O
(	O
off_t	long
)	O
(	O
0	int
)	O
,	O
UXFIO_SEEK_VSET	int
)	O
;	O
E_DEBUG2	O
(	O
"ret=%d"	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
"error setting UXFIO_SEEK_VSET with offset 0"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
unfix_offset	function
(	O
SWICAT_E	struct
*	O
e	pointer
)	O
{	O
int	O
ret	int
;	O
uxfio_fcntl	function
(	O
e	pointer
->	O
entry_fdM	int
,	O
UXFIO_F_SET_VEOF	O
,	O
-	O
1	int
)	O
;	O
ret	int
=	O
uxfio_lseek	function
(	O
e	pointer
->	O
entry_fdM	int
,	O
(	O
off_t	long
)	O
(	O
e	pointer
->	O
restore_offsetM	int
)	O
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
"setting veof"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
set_entry_fd	function
(	O
SWICAT_E	struct
*	O
e	pointer
)	O
{	O
if	O
(	O
e	pointer
->	O
xformatM	pointer
)	O
xformat_set_ifd	function
(	O
e	pointer
->	O
xformatM	pointer
,	O
e	pointer
->	O
entry_fdM	int
)	O
;	O
if	O
(	O
e	pointer
->	O
xformatM	pointer
->	O
swvarfsM	pointer
)	O
e	pointer
->	O
xformatM	pointer
->	O
swvarfsM	pointer
->	O
fdM	int
=	O
e	pointer
->	O
entry_fdM	int
;	O
}	O
static	O
int	O
init_catalog_entry	function
(	O
SWICAT_E	struct
*	O
e	pointer
,	O
SWVARFS	struct
*	O
swvarfs	pointer
,	O
char	O
*	O
fpath	pointer
)	O
{	O
char	O
*	O
path	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
int	O
cfd	int
;	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
cfd	int
=	O
e	pointer
->	O
entry_fdM	int
;	O
if	O
(	O
fpath	pointer
==	O
NULL	O
)	O
path	pointer
=	O
swvarfs_get_next_dirent	function
(	O
swvarfs	pointer
,	O
&	O
st	pointer
)	O
;	O
else	O
path	pointer
=	O
fpath	pointer
;	O
if	O
(	O
path	pointer
==	O
NULL	O
||	O
strlen	function
(	O
path	pointer
)	O
==	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
E_DEBUG2	O
(	O
"new entry: %s"	pointer
,	O
path	pointer
)	O
;	O
e	pointer
->	O
entry_prefixM	pointer
=	O
strdup	function
(	O
path	pointer
)	O
;	O
e	pointer
->	O
start_offsetM	int
=	O
uxfio_lseek	function
(	O
swvarfs	pointer
->	O
fdM	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
e	pointer
->	O
end_offsetM	int
=	O
-	O
1	int
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
while	O
(	O
(	O
path	pointer
=	O
swvarfs_get_next_dirent	function
(	O
swvarfs	pointer
,	O
&	O
st	pointer
)	O
)	O
!=	O
NULL	O
&&	O
swvarfs	pointer
->	O
eoaM	int
==	O
0	int
&&	O
strlen	function
(	O
path	pointer
)	O
&&	O
strstr	function
(	O
path	pointer
,	O
e	pointer
->	O
entry_prefixM	pointer
)	O
==	O
path	pointer
)	O
{	O
E_DEBUG2	O
(	O
"    entry: %s"	pointer
,	O
path	pointer
)	O
;	O
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
e	pointer
->	O
end_offsetM	int
=	O
uxfio_lseek	function
(	O
swvarfs	pointer
->	O
fdM	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
initialize_file_conflicts_fd	function
(	O
SWI	struct
*	O
swi	pointer
,	O
SWHEADER	struct
*	O
swheader	pointer
)	O
{	O
char	O
*	O
line	pointer
;	O
char	O
*	O
next_line	pointer
;	O
char	O
*	O
tag	pointer
;	O
char	O
*	O
number	pointer
;	O
char	O
*	O
value	pointer
;	O
char	O
*	O
keyword	pointer
;	O
int	O
retval	int
;	O
int	O
ix	int
;	O
int	O
ex_memfd	int
;	O
int	O
re_memfd	int
;	O
SWHEADER_STATE	struct
state1	struct
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
ex_memfd	int
=	O
-	O
1	int
;	O
re_memfd	int
=	O
-	O
1	int
;	O
retval	int
=	O
0	int
;	O
swheader_store_state	function
(	O
swheader	pointer
,	O
&	O
state1	struct
)	O
;	O
swheader_reset	function
(	O
swheader	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
while	O
(	O
(	O
next_line	pointer
=	O
swheader_get_next_object	function
(	O
swheader	pointer
,	O
(	O
int	O
)	O
UCHAR_MAX	O
,	O
(	O
int	O
)	O
UCHAR_MAX	O
)	O
)	O
)	O
{	O
E_DEBUG2	O
(	O
"next_line=%s\n"	pointer
,	O
next_line	pointer
)	O
;	O
if	O
(	O
swheaderline_get_type	function
(	O
next_line	pointer
)	O
!=	O
SWPARSE_MD_TYPE_OBJ	char
)	O
{	O
return	O
-	O
1	int
;	O
SWBIS_IMPL_ERROR_DIE	O
(	O
1	int
)	O
;	O
}	O
keyword	pointer
=	O
swheaderline_get_keyword	function
(	O
next_line	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_product	pointer
)	O
==	O
0	int
)	O
{	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_fileset	pointer
)	O
==	O
0	int
)	O
{	O
while	O
(	O
(	O
line	pointer
=	O
swheader_get_next_attribute	function
(	O
swheader	pointer
)	O
)	O
)	O
{	O
keyword	pointer
=	O
swheaderline_get_keyword	function
(	O
line	pointer
)	O
;	O
value	pointer
=	O
swheaderline_get_value	function
(	O
line	pointer
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_excluded_from_install	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
ex_memfd	int
<	O
0	int
)	O
ex_memfd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
uxfio_write	function
(	O
ex_memfd	int
,	O
value	pointer
,	O
strlen	function
(	O
value	pointer
)	O
)	O
;	O
uxfio_write	function
(	O
ex_memfd	int
,	O
"\n"	pointer
,	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
keyword	pointer
,	O
SW_A_replaced_by_install	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
re_memfd	int
<	O
0	int
)	O
re_memfd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
uxfio_write	function
(	O
re_memfd	int
,	O
value	pointer
,	O
strlen	function
(	O
value	pointer
)	O
)	O
;	O
uxfio_write	function
(	O
re_memfd	int
,	O
"\n"	pointer
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
ex_memfd	int
>	O
0	int
)	O
uxfio_write	function
(	O
ex_memfd	int
,	O
"\0"	pointer
,	O
1	int
)	O
;	O
if	O
(	O
re_memfd	int
>	O
0	int
)	O
uxfio_write	function
(	O
re_memfd	int
,	O
"\0"	pointer
,	O
1	int
)	O
;	O
break	O
;	O
}	O
}	O
swheader_restore_state	function
(	O
swheader	pointer
,	O
&	O
state1	struct
)	O
;	O
swi	pointer
->	O
excluded_file_conflicts_fdM	int
=	O
ex_memfd	int
;	O
swi	pointer
->	O
replaced_file_conflicts_fdM	int
=	O
re_memfd	int
;	O
return	O
0	int
;	O
}	O
SWICAT_E	struct
*	O
swicat_e_create	function
(	O
void	O
)	O
{	O
SWICAT_E	struct
*	O
swicat_e	pointer
;	O
swicat_e	pointer
=	O
(	O
SWICAT_E	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
SWICAT_E	struct
)	O
)	O
;	O
SWLIB_ASSERT	O
(	O
swicat_e	pointer
!=	O
NULL	O
)	O
;	O
swicat_e	pointer
->	O
entry_fdM	int
=	O
-	O
1	int
;	O
swicat_e	pointer
->	O
start_offsetM	int
=	O
-	O
1	int
;	O
swicat_e	pointer
->	O
end_offsetM	int
=	O
-	O
1	int
;	O
swicat_e	pointer
->	O
entry_prefixM	pointer
=	O
NULL	O
;	O
swicat_e	pointer
->	O
xformatM	pointer
=	O
NULL	O
;	O
swicat_e	pointer
->	O
taruM	pointer
=	O
NULL	O
;	O
swicat_e	pointer
->	O
swiM	pointer
=	O
NULL	O
;	O
swicat_e	pointer
->	O
tmp_fdM	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
swicat_e	pointer
->	O
restore_offsetM	int
=	O
-	O
1	int
;	O
swicat_e	pointer
->	O
xformat_close_on_e_deleteM	int
=	O
0	int
;	O
swicat_e	pointer
->	O
taru_close_on_e_deleteM	int
=	O
0	int
;	O
swicat_e	pointer
->	O
swi_close_on_e_deleteM	int
=	O
0	int
;	O
return	O
swicat_e	pointer
;	O
}	O
void	O
swicat_e_delete	function
(	O
SWICAT_E	struct
*	O
swicat_e	pointer
)	O
{	O
if	O
(	O
swicat_e	pointer
->	O
entry_prefixM	pointer
)	O
free	function
(	O
swicat_e	pointer
->	O
entry_prefixM	pointer
)	O
;	O
if	O
(	O
swicat_e	pointer
->	O
xformat_close_on_e_deleteM	int
)	O
if	O
(	O
swicat_e	pointer
->	O
xformatM	pointer
)	O
xformat_close	function
(	O
swicat_e	pointer
->	O
xformatM	pointer
)	O
;	O
if	O
(	O
swicat_e	pointer
->	O
swi_close_on_e_deleteM	int
)	O
if	O
(	O
swicat_e	pointer
->	O
swiM	pointer
)	O
swi_delete	function
(	O
swicat_e	pointer
->	O
swiM	pointer
)	O
;	O
if	O
(	O
swicat_e	pointer
->	O
taru_close_on_e_deleteM	int
)	O
if	O
(	O
swicat_e	pointer
->	O
taruM	pointer
)	O
taru_delete	function
(	O
swicat_e	pointer
->	O
taruM	pointer
)	O
;	O
if	O
(	O
swicat_e	pointer
->	O
entry_fdM	int
>=	O
0	int
)	O
uxfio_close	function
(	O
swicat_e	pointer
->	O
entry_fdM	int
)	O
;	O
if	O
(	O
swicat_e	pointer
->	O
tmp_fdM	int
>=	O
0	int
)	O
uxfio_close	function
(	O
swicat_e	pointer
->	O
tmp_fdM	int
)	O
;	O
free	function
(	O
swicat_e	pointer
)	O
;	O
}	O
int	O
swicat_e_reset_fd	function
(	O
SWICAT_E	struct
*	O
e	pointer
)	O
{	O
fix_offset	function
(	O
e	pointer
)	O
;	O
return	O
fix_offset	function
(	O
e	pointer
)	O
;	O
}	O
int	O
swicat_e_open_entry_tarball	function
(	O
SWICAT_E	struct
*	O
swicat_e	pointer
,	O
int	O
ifd	int
)	O
{	O
int	O
retval	int
;	O
int	O
ret	int
;	O
intmax_t	long
len	int
;	O
int	O
mem_fd	int
;	O
int	O
nullarchive	int
;	O
char	O
*	O
b	pointer
;	O
TARU	struct
*	O
taru	pointer
;	O
char	O
*	O
zerobuf	pointer
;	O
char	O
*	O
readbuf	pointer
;	O
XFORMAT	struct
*	O
xformat	pointer
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
retval	int
=	O
0	int
;	O
mem_fd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
SWLIB_ASSERT	O
(	O
mem_fd	int
>=	O
0	int
)	O
;	O
taru	pointer
=	O
taru_create	function
(	O
)	O
;	O
SWLIB_ASSERT	O
(	O
taru	pointer
!=	O
NULL	O
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
taru_process_copy_out	function
(	O
taru	pointer
,	O
ifd	int
,	O
mem_fd	int
,	O
NULL	O
,	O
NULL	O
,	O
arf_ustar	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
&	O
len	int
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
taru_delete	function
(	O
taru	pointer
)	O
;	O
uxfio_close	function
(	O
mem_fd	int
)	O
;	O
SWLIB_ERROR2	O
(	O
"taru_process_copy_out returned %d"	pointer
,	O
ret	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
uxfio_lseek	function
(	O
mem_fd	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
taru_delete	function
(	O
taru	pointer
)	O
;	O
uxfio_close	function
(	O
mem_fd	int
)	O
;	O
return	O
-	O
2	int
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
nullarchive	int
=	O
0	int
;	O
zerobuf	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
TARRECORDSIZE	int
)	O
;	O
readbuf	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
TARRECORDSIZE	int
)	O
;	O
memset	function
(	O
zerobuf	pointer
,	O
'\0'	O
,	O
TARRECORDSIZE	int
)	O
;	O
uxfio_read	function
(	O
mem_fd	int
,	O
readbuf	pointer
,	O
TARRECORDSIZE	int
)	O
;	O
if	O
(	O
memcmp	function
(	O
zerobuf	pointer
,	O
readbuf	pointer
,	O
TARRECORDSIZE	int
)	O
==	O
0	int
)	O
{	O
uxfio_read	function
(	O
mem_fd	int
,	O
readbuf	pointer
,	O
TARRECORDSIZE	int
)	O
;	O
if	O
(	O
memcmp	function
(	O
zerobuf	pointer
,	O
readbuf	pointer
,	O
TARRECORDSIZE	int
)	O
==	O
0	int
)	O
{	O
nullarchive	int
=	O
1	int
;	O
}	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
free	function
(	O
zerobuf	pointer
)	O
;	O
free	function
(	O
readbuf	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
uxfio_lseek	function
(	O
mem_fd	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
taru_delete	function
(	O
taru	pointer
)	O
;	O
uxfio_close	function
(	O
mem_fd	int
)	O
;	O
return	O
-	O
2	int
;	O
}	O
xformat	pointer
=	O
xformat_open	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
arf_ustar	int
)	O
;	O
SWLIB_ASSERT	O
(	O
xformat	pointer
!=	O
NULL	O
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
nullarchive	int
==	O
0	int
)	O
{	O
ret	int
=	O
xformat_open_archive_by_fd	function
(	O
xformat	pointer
,	O
mem_fd	int
,	O
UINFILE_DETECT_NATIVE	O
,	O
0	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"error, returning -3"	pointer
)	O
;	O
uxfio_close	function
(	O
mem_fd	int
)	O
;	O
taru_delete	function
(	O
taru	pointer
)	O
;	O
xformat_close	function
(	O
xformat	pointer
)	O
;	O
return	O
-	O
3	int
;	O
}	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swicat_e	pointer
->	O
xformatM	pointer
=	O
xformat	pointer
;	O
swicat_e	pointer
->	O
taruM	pointer
=	O
taru	pointer
;	O
swicat_e	pointer
->	O
taru_close_on_e_deleteM	int
=	O
1	int
;	O
swicat_e	pointer
->	O
start_offsetM	int
=	O
0	int
;	O
swicat_e	pointer
->	O
end_offsetM	int
=	O
(	O
int	O
)	O
len	int
;	O
swicat_e	pointer
->	O
entry_fdM	int
=	O
mem_fd	int
;	O
swicat_e	pointer
->	O
entry_prefixM	pointer
=	O
NULL	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
uxfio_lseek	function
(	O
mem_fd	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_END	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
""	pointer
)	O
;	O
return	O
-	O
4	int
;	O
}	O
if	O
(	O
ret	int
!=	O
(	O
int	O
)	O
len	int
)	O
{	O
SWLIB_ERROR3	O
(	O
"sanity check failed ret=%d, len=%d"	pointer
,	O
ret	int
,	O
(	O
int	O
)	O
len	int
)	O
;	O
return	O
-	O
5	int
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
uxfio_lseek	function
(	O
mem_fd	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
nullarchive	int
==	O
0	int
)	O
{	O
ret	int
=	O
init_catalog_entry	function
(	O
swicat_e	pointer
,	O
swicat_e	pointer
->	O
xformatM	pointer
->	O
swvarfsM	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
"init_catalog_entry failed"	pointer
)	O
;	O
return	O
-	O
6	int
;	O
}	O
retval	int
=	O
0	int
;	O
}	O
else	O
{	O
retval	int
=	O
SWICAT_RETVAL_NULLARCHIVE	int
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
uxfio_lseek	function
(	O
mem_fd	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
;	O
E_DEBUG2	O
(	O
"retval = %d"	pointer
,	O
retval	int
)	O
;	O
return	O
retval	int
;	O
}	O
VPLOB	union
*	O
swicat_e_open_catalog_tarball	function
(	O
int	O
cfd	int
)	O
{	O
SWVARFS	struct
*	O
swvarfs	pointer
;	O
VPLOB	union
*	O
list	pointer
;	O
SWICAT_E	struct
*	O
e	pointer
;	O
int	O
ret	int
;	O
char	O
*	O
path	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
list	pointer
=	O
vplob_open	function
(	O
)	O
;	O
if	O
(	O
list	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
uxfio_lseek	function
(	O
cfd	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
;	O
swvarfs	pointer
=	O
swvarfs_opendup	function
(	O
cfd	int
,	O
UINFILE_DETECT_NATIVE	O
,	O
(	O
mode_t	int
)	O
0	int
)	O
;	O
E_DEBUG2	O
(	O
"swvarfs=%p"	pointer
,	O
(	O
void	O
*	O
)	O
swvarfs	pointer
)	O
;	O
if	O
(	O
swvarfs	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
while	O
(	O
(	O
path	pointer
=	O
swvarfs_get_next_dirent	function
(	O
swvarfs	pointer
,	O
&	O
st	pointer
)	O
)	O
!=	O
NULL	O
&&	O
strlen	function
(	O
path	pointer
)	O
&&	O
strcmp	function
(	O
CPIO_INBAND_EOA_FILENAME	pointer
,	O
path	pointer
)	O
)	O
{	O
E_DEBUG2	O
(	O
"new entry: %s"	pointer
,	O
path	pointer
)	O
;	O
e	pointer
=	O
swicat_e_create	function
(	O
)	O
;	O
vplob_add	function
(	O
list	pointer
,	O
e	pointer
)	O
;	O
e	pointer
->	O
entry_fdM	int
=	O
cfd	int
;	O
ret	int
=	O
init_catalog_entry	function
(	O
e	pointer
,	O
swvarfs	pointer
,	O
path	pointer
)	O
;	O
}	O
swvarfs_close	function
(	O
swvarfs	pointer
)	O
;	O
E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
list	pointer
;	O
}	O
int	O
swicat_e_find_attribute_file	function
(	O
SWICAT_E	struct
*	O
swicat_e	pointer
,	O
char	O
*	O
attribute	pointer
,	O
STROB	struct
*	O
pbuf	pointer
,	O
AHS	struct
*	O
ahs	pointer
)	O
{	O
int	O
retval	int
;	O
int	O
ret	int
;	O
int	O
memfd	int
;	O
int	O
ufd	int
;	O
char	O
*	O
name	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
XFORMAT	struct
*	O
xformat	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
strob_strcpy	function
(	O
pbuf	pointer
,	O
""	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
fix_offset	function
(	O
swicat_e	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
memfd	int
=	O
swicat_e	pointer
->	O
entry_fdM	int
;	O
xformat	pointer
=	O
swicat_e	pointer
->	O
xformatM	pointer
;	O
set_entry_fd	function
(	O
swicat_e	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
tmp	pointer
,	O
"*/"	pointer
)	O
;	O
strob_strcat	function
(	O
tmp	pointer
,	O
attribute	pointer
)	O
;	O
retval	int
=	O
1	int
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
while	O
(	O
(	O
name	pointer
=	O
xformat_get_next_dirent	function
(	O
xformat	pointer
,	O
&	O
st	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
E_DEBUG2	O
(	O
"name=%s"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
fnmatch	function
(	O
strob_str	function
(	O
tmp	pointer
)	O
,	O
name	pointer
,	O
0	int
)	O
==	O
0	int
)	O
{	O
ufd	int
=	O
xformat_u_open_file	function
(	O
xformat	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
ufd	int
<	O
0	int
)	O
{	O
retval	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
ahs	pointer
)	O
{	O
ahs_copy	function
(	O
ahs	pointer
,	O
swvarfs_get_ahs	function
(	O
xformat	pointer
->	O
swvarfsM	pointer
)	O
)	O
;	O
}	O
ret	int
=	O
swlib_ascii_text_fd_to_buf	function
(	O
pbuf	pointer
,	O
ufd	int
)	O
;	O
E_DEBUG2	O
(	O
"swlib_ascii_text_fd_to_buf returned %d"	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
retval	int
=	O
-	O
2	int
;	O
}	O
else	O
{	O
retval	int
=	O
0	int
;	O
}	O
ret	int
=	O
xformat_u_close_file	function
(	O
xformat	pointer
,	O
ufd	int
)	O
;	O
}	O
}	O
if	O
(	O
retval	int
!=	O
0	int
)	O
{	O
if	O
(	O
retval	int
<	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
"need default value"	pointer
)	O
;	O
}	O
}	O
swlib_squash_all_trailing_vnewline	function
(	O
strob_str	function
(	O
pbuf	pointer
)	O
)	O
;	O
unfix_offset	function
(	O
swicat_e	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
E_DEBUG3	O
(	O
"name=%s  value=[%s]"	pointer
,	O
attribute	pointer
,	O
strob_str	function
(	O
pbuf	pointer
)	O
)	O
;	O
E_DEBUG2	O
(	O
"retval=%d"	pointer
,	O
retval	int
)	O
;	O
return	O
retval	int
;	O
}	O
SWHEADER	struct
*	O
swicat_e_isf_parse	function
(	O
SWICAT_E	struct
*	O
e	pointer
,	O
int	O
*	O
pstatus	pointer
,	O
AHS	struct
*	O
ahs	pointer
)	O
{	O
STROB	struct
*	O
tmp	pointer
;	O
SWHEADER	struct
*	O
swheader	pointer
;	O
int	O
ifd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
int	O
ofd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
char	O
*	O
img	pointer
;	O
char	O
*	O
img2	pointer
;	O
int	O
datalen	pointer
;	O
int	O
ret	int
;	O
E_DEBUG	O
(	O
"BEGIN"	pointer
)	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
12	int
)	O
;	O
if	O
(	O
pstatus	pointer
)	O
*	O
pstatus	pointer
=	O
0	int
;	O
ret	int
=	O
swicat_e_find_attribute_file	function
(	O
e	pointer
,	O
SW_A_INSTALLED	pointer
,	O
tmp	pointer
,	O
ahs	pointer
)	O
;	O
E_DEBUG2	O
(	O
"swicat_e_find_attribute_file ret=[%d]"	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"ret != 0"	pointer
)	O
;	O
SWLIB_ERROR	O
(	O
""	pointer
)	O
;	O
if	O
(	O
pstatus	pointer
)	O
*	O
pstatus	pointer
=	O
1	int
;	O
E_DEBUG	O
(	O
"returning NULL"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
uxfio_write	function
(	O
ifd	int
,	O
strob_str	function
(	O
tmp	pointer
)	O
,	O
strob_strlen	function
(	O
tmp	pointer
)	O
)	O
;	O
uxfio_write	function
(	O
ifd	int
,	O
"\n\n\n"	pointer
,	O
2	int
)	O
;	O
uxfio_lseek	function
(	O
ifd	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
;	O
E_DEBUG2	O
(	O
"running sw_yyparse on fd=%d"	pointer
,	O
ofd	int
)	O
;	O
ret	int
=	O
sw_yyparse	function
(	O
ifd	int
,	O
ofd	int
,	O
SW_A_INSTALLED	pointer
,	O
0	int
,	O
SWPARSE_FORM_MKUP_LEN	O
)	O
;	O
E_DEBUG2	O
(	O
"sw_yyparse: ret=[%d]"	pointer
,	O
ret	int
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error parsing %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
SW_A_INSTALLED	pointer
)	O
;	O
if	O
(	O
pstatus	pointer
)	O
*	O
pstatus	pointer
=	O
2	int
;	O
return	O
NULL	O
;	O
}	O
uxfio_lseek	function
(	O
ofd	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
;	O
img	pointer
=	O
swi_com_get_fd_mem	function
(	O
ofd	int
,	O
&	O
datalen	pointer
)	O
;	O
img2	pointer
=	O
malloc	function
(	O
(	O
size_t	long
)	O
datalen	pointer
+	O
1	int
)	O
;	O
memcpy	function
(	O
img2	pointer
,	O
img	pointer
,	O
datalen	pointer
)	O
;	O
img2	pointer
[	O
datalen	pointer
]	O
=	O
'\0'	O
;	O
swheader	pointer
=	O
swheader_open	function
(	O
(	O
char	O
*	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
int	O
*	O
,	O
int	O
)	O
)	O
(	O
NULL	O
)	O
,	O
NULL	O
)	O
;	O
swheader_set_image_head	function
(	O
swheader	pointer
,	O
img2	pointer
)	O
;	O
uxfio_close	function
(	O
ifd	int
)	O
;	O
uxfio_close	function
(	O
ofd	int
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
swheader	pointer
;	O
}	O
SWI_FILELIST	union
*	O
swicat_e_make_file_list	function
(	O
SWICAT_E	struct
*	O
e	pointer
,	O
SWUTS	struct
*	O
swuts	pointer
,	O
SWI	struct
*	O
swi	pointer
)	O
{	O
int	O
ret	int
;	O
STROB	struct
*	O
tmp	pointer
;	O
SWI_FILELIST	union
*	O
flist	pointer
;	O
char	O
*	O
location	pointer
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
flist	pointer
=	O
NULL	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
12	int
)	O
;	O
if	O
(	O
swi	pointer
==	O
NULL	O
)	O
{	O
SWLIB_ERROR	O
(	O
""	pointer
)	O
;	O
goto	O
out	O
;	O
}	O
if	O
(	O
fix_offset	function
(	O
e	pointer
)	O
<	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
""	pointer
)	O
;	O
goto	O
out	O
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
swicat_e_find_attribute_file	function
(	O
e	pointer
,	O
SW_A_location	pointer
,	O
tmp	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
""	pointer
)	O
;	O
goto	O
out	O
;	O
}	O
else	O
if	O
(	O
ret	int
>	O
0	int
)	O
{	O
strob_strcpy	function
(	O
tmp	pointer
,	O
"/"	pointer
)	O
;	O
}	O
location	pointer
=	O
strdup	function
(	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
flist	pointer
=	O
swi_make_file_list	function
(	O
swi	pointer
,	O
swuts	pointer
,	O
location	pointer
,	O
SW_FALSE	int
)	O
;	O
out	O
:	O
unfix_offset	function
(	O
e	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
flist	pointer
;	O
}	O
int	O
swicat_e_verify_gpg_signature	function
(	O
SWICAT_E	struct
*	O
e	pointer
,	O
SWGPG_VALIDATE	struct
*	O
swgpg	pointer
)	O
{	O
int	O
i	int
;	O
int	O
retval	int
;	O
int	O
ret	int
;	O
char	O
*	O
sig	pointer
;	O
STROB	struct
*	O
gpg_status	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
STROB	struct
*	O
sig_buf	pointer
;	O
char	O
*	O
name	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
int	O
catalog_tar_fd	int
;	O
int	O
sig_fd	int
;	O
retval	int
=	O
0	int
;	O
swgpg_reset	function
(	O
swgpg	pointer
)	O
;	O
gpg_status	pointer
=	O
strob_open	function
(	O
12	int
)	O
;	O
sig_buf	pointer
=	O
strob_open	function
(	O
12	int
)	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
12	int
)	O
;	O
E_DEBUG	O
(	O
"BEGIN"	pointer
)	O
;	O
ret	int
=	O
fix_offset	function
(	O
e	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
""	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
while	O
(	O
(	O
name	pointer
=	O
xformat_get_next_dirent	function
(	O
e	pointer
->	O
xformatM	pointer
,	O
&	O
st	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
xformat_is_end_of_archive	function
(	O
e	pointer
->	O
xformatM	pointer
)	O
)	O
{	O
break	O
;	O
}	O
E_DEBUG2	O
(	O
"2name=%s"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
fnmatch	function
(	O
"*/export/catalog.tar.sig"	pointer
,	O
name	pointer
,	O
0	int
)	O
==	O
0	int
||	O
fnmatch	function
(	O
"*/export/catalog.tar.sig*"	pointer
,	O
name	pointer
,	O
0	int
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
sig_fd	int
=	O
xformat_u_open_file	function
(	O
e	pointer
->	O
xformatM	pointer
,	O
name	pointer
)	O
;	O
SWLIB_ASSERT	O
(	O
sig_fd	int
>=	O
0	int
)	O
;	O
ret	int
=	O
swlib_ascii_text_fd_to_buf	function
(	O
tmp	pointer
,	O
sig_fd	int
)	O
;	O
SWLIB_ASSERT	O
(	O
ret	int
==	O
0	int
)	O
;	O
strar_add	function
(	O
swgpg	pointer
->	O
list_of_sig_namesM	pointer
,	O
name	pointer
)	O
;	O
strar_add	function
(	O
swgpg	pointer
->	O
list_of_sigsM	pointer
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
xformat_u_close_file	function
(	O
e	pointer
->	O
xformatM	pointer
,	O
sig_fd	int
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
}	O
}	O
ret	int
=	O
fix_offset	function
(	O
e	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
""	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
catalog_tar_fd	int
=	O
-	O
1	int
;	O
while	O
(	O
(	O
name	pointer
=	O
xformat_get_next_dirent	function
(	O
e	pointer
->	O
xformatM	pointer
,	O
&	O
st	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
fnmatch	function
(	O
"*/export/catalog.tar"	pointer
,	O
name	pointer
,	O
0	int
)	O
==	O
0	int
)	O
{	O
catalog_tar_fd	int
=	O
xformat_u_open_file	function
(	O
e	pointer
->	O
xformatM	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
catalog_tar_fd	int
<	O
0	int
)	O
{	O
retval	int
=	O
-	O
1	int
;	O
goto	O
error_out	O
;	O
}	O
uxfio_lseek	function
(	O
catalog_tar_fd	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
sig	pointer
=	O
strar_get	function
(	O
swgpg	pointer
->	O
list_of_sigsM	pointer
,	O
i	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
name	pointer
=	O
strar_get	function
(	O
swgpg	pointer
->	O
list_of_sig_namesM	pointer
,	O
i	int
)	O
;	O
E_DEBUG2	O
(	O
"signame=%s"	pointer
,	O
name	pointer
)	O
;	O
E_DEBUG2	O
(	O
"sig=%s"	pointer
,	O
sig	pointer
)	O
;	O
ret	int
=	O
uxfio_lseek	function
(	O
catalog_tar_fd	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
;	O
SWLIB_ASSERT	O
(	O
ret	int
>=	O
0	int
)	O
;	O
ret	int
=	O
swgpg_run_gpg_verify	function
(	O
swgpg	pointer
,	O
catalog_tar_fd	int
,	O
sig	pointer
,	O
2	int
,	O
gpg_status	pointer
)	O
;	O
swgpg_disentangle_status_lines	function
(	O
swgpg	pointer
,	O
strob_str	function
(	O
gpg_status	pointer
)	O
)	O
;	O
i	int
++	O
;	O
}	O
xformat_u_close_file	function
(	O
e	pointer
->	O
xformatM	pointer
,	O
catalog_tar_fd	int
)	O
;	O
swgpg_set_status_array	function
(	O
swgpg	pointer
)	O
;	O
error_out	O
:	O
unfix_offset	function
(	O
e	pointer
)	O
;	O
strob_close	function
(	O
gpg_status	pointer
)	O
;	O
strob_close	function
(	O
sig_buf	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
retval	int
;	O
}	O
SWI	struct
*	O
swicat_e_open_swi	function
(	O
SWICAT_E	struct
*	O
e	pointer
)	O
{	O
SWI	struct
*	O
swi	pointer
;	O
int	O
ret	int
;	O
int	O
isf_status	int
;	O
int	O
ifd	int
;	O
int	O
newfd	pointer
;	O
int	O
newfd2	int
;	O
int	O
catalog_tar_fd	int
;	O
char	O
*	O
name	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
XFORMAT	struct
*	O
xformat	pointer
;	O
SWVARFS	struct
*	O
swvarfs	pointer
;	O
SWPATH	struct
*	O
swpath	pointer
;	O
UINFORMAT	struct
*	O
uinformat	pointer
;	O
SWHEADER	struct
*	O
installed_header	pointer
;	O
E_DEBUG	O
(	O
"BEGIN"	pointer
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST ENTERING AA swicat_e_open_swi FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
ret	int
=	O
fix_offset	function
(	O
e	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
""	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
newfd	pointer
=	O
swlib_open_memfd	function
(	O
)	O
;	O
ifd	int
=	O
e	pointer
->	O
entry_fdM	int
;	O
ret	int
=	O
swlib_pipe_pump	function
(	O
newfd	pointer
,	O
ifd	int
)	O
;	O
E_DEBUG2	O
(	O
"swlib_pipe_pump returned %d"	pointer
,	O
ret	int
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
uxfio_lseek	function
(	O
newfd	pointer
,	O
(	O
off_t	long
)	O
(	O
0	int
)	O
,	O
SEEK_SET	int
)	O
;	O
E_DEBUG2	O
(	O
"CALLING swvarfs_opendup(%d"	pointer
,	O
newfd	pointer
)	O
;	O
swvarfs	pointer
=	O
swvarfs_opendup	function
(	O
newfd	pointer
,	O
UINFILE_DETECT_NATIVE	O
,	O
(	O
mode_t	int
)	O
0	int
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST AFTER swvarfs_opendup FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
if	O
(	O
swvarfs	pointer
==	O
NULL	O
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
swvarfs	pointer
->	O
did_dupM	int
=	O
1	int
;	O
E_DEBUG	O
(	O
"searching: START"	pointer
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST BEFORE swvarfs_get_next_dirent FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
catalog_tar_fd	int
=	O
-	O
1	int
;	O
while	O
(	O
(	O
name	pointer
=	O
swvarfs_get_next_dirent	function
(	O
swvarfs	pointer
,	O
&	O
st	pointer
)	O
)	O
!=	O
NULL	O
&&	O
strlen	function
(	O
name	pointer
)	O
)	O
{	O
E_DEBUG2	O
(	O
"searching: name=%s"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
fnmatch	function
(	O
"*/export/catalog.tar"	pointer
,	O
name	pointer
,	O
0	int
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"found catalog.tar"	pointer
)	O
;	O
catalog_tar_fd	int
=	O
swvarfs_u_open	function
(	O
swvarfs	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
}	O
}	O
E_DEBUG2	O
(	O
"LOWEST AFTER swvarfs_get_next_dirent FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
E_DEBUG	O
(	O
"searching: END"	pointer
)	O
;	O
E_DEBUG2	O
(	O
"catalog_tar_fd=%d"	pointer
,	O
catalog_tar_fd	int
)	O
;	O
if	O
(	O
catalog_tar_fd	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
unfix_offset	function
(	O
e	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
E_DEBUG2	O
(	O
"UXFIO fd: %s"	pointer
,	O
(	O
uxfio_show_all_open_fd	function
(	O
stderr	pointer
)	O
,	O
""	pointer
)	O
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
E_DEBUG2	O
(	O
"UXFIO fd: %s"	pointer
,	O
(	O
uxfio_show_all_open_fd	function
(	O
stderr	pointer
)	O
,	O
""	pointer
)	O
)	O
;	O
newfd2	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
E_DEBUG2	O
(	O
"UXFIO fd: %s"	pointer
,	O
(	O
uxfio_show_all_open_fd	function
(	O
stderr	pointer
)	O
,	O
""	pointer
)	O
)	O
;	O
ret	int
=	O
swlib_pipe_pump	function
(	O
newfd2	int
,	O
catalog_tar_fd	int
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
E_DEBUG2	O
(	O
"UXFIO fd: %s"	pointer
,	O
(	O
uxfio_show_all_open_fd	function
(	O
stderr	pointer
)	O
,	O
""	pointer
)	O
)	O
;	O
uxfio_lseek	function
(	O
newfd2	int
,	O
(	O
off_t	long
)	O
(	O
0	int
)	O
,	O
SEEK_SET	int
)	O
;	O
E_DEBUG2	O
(	O
"catalog_tar_fd is %d"	pointer
,	O
catalog_tar_fd	int
)	O
;	O
E_DEBUG2	O
(	O
"UXFIO fd: %s"	pointer
,	O
(	O
uxfio_show_all_open_fd	function
(	O
stderr	pointer
)	O
,	O
""	pointer
)	O
)	O
;	O
swvarfs_u_close	function
(	O
swvarfs	pointer
,	O
catalog_tar_fd	int
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
E_DEBUG2	O
(	O
"UXFIO fd: %s"	pointer
,	O
(	O
uxfio_show_all_open_fd	function
(	O
stderr	pointer
)	O
,	O
""	pointer
)	O
)	O
;	O
swvarfs_close	function
(	O
swvarfs	pointer
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
E_DEBUG2	O
(	O
"UXFIO fd: %s"	pointer
,	O
(	O
uxfio_show_all_open_fd	function
(	O
stderr	pointer
)	O
,	O
""	pointer
)	O
)	O
;	O
ifd	int
=	O
newfd2	int
;	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
swi	pointer
=	O
swi_create	function
(	O
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
xformat	pointer
=	O
xformat_open	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
arf_ustar	int
)	O
;	O
E_DEBUG2	O
(	O
"entry_fdM = %d"	pointer
,	O
e	pointer
->	O
entry_fdM	int
)	O
;	O
ret	int
=	O
xformat_open_archive_by_fd	function
(	O
xformat	pointer
,	O
ifd	int
,	O
UINFILE_DETECT_IEEE	O
,	O
(	O
mode_t	int
)	O
(	O
0	int
)	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
unfix_offset	function
(	O
e	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
swi	pointer
->	O
xformatM	pointer
=	O
xformat	pointer
;	O
swi	pointer
->	O
xformat_close_on_deleteM	int
=	O
1	int
;	O
if	O
(	O
e	pointer
->	O
xformatM	pointer
)	O
xformat_close	function
(	O
e	pointer
->	O
xformatM	pointer
)	O
;	O
e	pointer
->	O
xformatM	pointer
=	O
xformat	pointer
;	O
swi	pointer
->	O
swvarfsM	pointer
=	O
xformat	pointer
->	O
swvarfsM	pointer
;	O
xformat	pointer
->	O
swvarfs_is_externalM	int
=	O
1	int
;	O
swi	pointer
->	O
swvarfs_close_on_deleteM	int
=	O
1	int
;	O
swi	pointer
->	O
uinformatM	pointer
=	O
swvarfs_get_uinformat	function
(	O
swi	pointer
->	O
swvarfsM	pointer
)	O
;	O
uinformat	pointer
=	O
swvarfs_get_uinformat	function
(	O
swi	pointer
->	O
swvarfsM	pointer
)	O
;	O
swi	pointer
->	O
swvarfsM	pointer
->	O
uinformat_close_on_deleteM	int
=	O
0	int
;	O
swi	pointer
->	O
uinformat_close_on_deleteM	int
=	O
1	int
;	O
swpath	pointer
=	O
uinfile_get_swpath	function
(	O
uinformat	pointer
)	O
;	O
swpath_reset	function
(	O
swpath	pointer
)	O
;	O
xformat_set_tarheader_flag	function
(	O
xformat	pointer
,	O
TARU_TAR_FRAGILE_FORMAT	O
,	O
1	int
)	O
;	O
xformat_set_tarheader_flag	function
(	O
xformat	pointer
,	O
TARU_TAR_RETAIN_HEADER_IDS	O
,	O
1	int
)	O
;	O
swi	pointer
->	O
uinformatM	pointer
=	O
uinformat	pointer
;	O
swi	pointer
->	O
swpathM	pointer
=	O
swpath	pointer
;	O
swi	pointer
->	O
swi_pkgM	pointer
->	O
target_hostM	pointer
=	O
strdup	function
(	O
"localhost"	pointer
)	O
;	O
xformat_set_ifd	function
(	O
swi	pointer
->	O
xformatM	pointer
,	O
ifd	int
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
ret	int
=	O
swi_decode_catalog	function
(	O
swi	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
unfix_offset	function
(	O
e	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
uxfio_close	function
(	O
ifd	int
)	O
;	O
unfix_offset	function
(	O
e	pointer
)	O
;	O
set_entry_fd	function
(	O
e	pointer
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
E_DEBUG2	O
(	O
"swi=%p"	pointer
,	O
(	O
void	O
*	O
)	O
swi	pointer
)	O
;	O
E_DEBUG2	O
(	O
"LOWEST LEAVING AA swicat_e_open_swi FD=%d"	pointer
,	O
show_nopen	function
(	O
)	O
)	O
;	O
installed_header	pointer
=	O
swicat_e_isf_parse	function
(	O
e	pointer
,	O
&	O
isf_status	int
,	O
(	O
AHS	struct
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
!	O
installed_header	pointer
)	O
return	O
NULL	O
;	O
initialize_file_conflicts_fd	function
(	O
swi	pointer
,	O
installed_header	pointer
)	O
;	O
return	O
swi	pointer
;	O
}	O
char	O
*	O
swicat_e_form_catalog_path	function
(	O
SWICAT_E	struct
*	O
e	pointer
,	O
STROB	struct
*	O
buf	pointer
,	O
char	O
*	O
isc_path	pointer
,	O
int	O
active_name	int
)	O
{	O
char	O
*	O
p	pointer
;	O
char	O
*	O
risc	pointer
;	O
p	pointer
=	O
e	pointer
->	O
entry_prefixM	pointer
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
swlib_check_clean_path	function
(	O
p	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
isc_path	pointer
)	O
{	O
strob_strcpy	function
(	O
buf	pointer
,	O
isc_path	pointer
)	O
;	O
}	O
else	O
{	O
strob_strcpy	function
(	O
buf	pointer
,	O
""	pointer
)	O
;	O
}	O
if	O
(	O
active_name	int
==	O
SWICAT_ACTIVE_ENTRY	int
)	O
{	O
swlib_unix_dircat	function
(	O
buf	pointer
,	O
p	pointer
)	O
;	O
p	pointer
=	O
strob_str	function
(	O
buf	pointer
)	O
;	O
swlib_squash_trailing_slash	function
(	O
p	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
else	O
if	O
(	O
active_name	int
==	O
SWICAT_DEACTIVE_ENTRY	int
)	O
{	O
char	O
*	O
seq	pointer
;	O
swlib_unix_dircat	function
(	O
buf	pointer
,	O
p	pointer
)	O
;	O
p	pointer
=	O
strob_str	function
(	O
buf	pointer
)	O
;	O
swlib_squash_trailing_slash	function
(	O
p	pointer
)	O
;	O
seq	pointer
=	O
strrchr	function
(	O
p	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
seq	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
seq	pointer
==	O
p	pointer
)	O
return	O
NULL	O
;	O
seq	pointer
++	O
;	O
if	O
(	O
*	O
seq	pointer
==	O
'\0'	O
||	O
isdigit	function
(	O
*	O
seq	pointer
)	O
==	O
0	int
)	O
{	O
SWLIB_ERROR	O
(	O
"badly formed catalog entry path"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
strob_set_length	function
(	O
buf	pointer
,	O
strlen	function
(	O
p	pointer
)	O
+	O
1	int
)	O
;	O
memmove	function
(	O
seq	pointer
+	O
1	int
,	O
seq	pointer
,	O
strlen	function
(	O
seq	pointer
)	O
+	O
1	int
)	O
;	O
*	O
seq	pointer
=	O
'_'	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
