struct	O
spec	struct
{	O
void	O
*	O
base	pointer
;	O
}	O
;	O
struct	O
char_range	struct
{	O
ucs4_t	int
start	pointer
;	O
ucs4_t	int
end	pointer
;	O
}	O
;	O
static	O
const	O
struct	O
char_range	struct
name_chars1	array
[	O
]	O
=	O
{	O
{	O
':'	O
,	O
':'	O
}	O
,	O
{	O
'A'	O
,	O
'Z'	O
}	O
,	O
{	O
'_'	O
,	O
'_'	O
}	O
,	O
{	O
'a'	O
,	O
'z'	O
}	O
,	O
{	O
0xC0	int
,	O
0xD6	int
}	O
,	O
{	O
0xD8	int
,	O
0xF6	int
}	O
,	O
{	O
0xF8	int
,	O
0x2FF	int
}	O
,	O
{	O
0x370	int
,	O
0x37D	int
}	O
,	O
{	O
0x37F	int
,	O
0x1FFF	int
}	O
,	O
{	O
0x200C	int
,	O
0x200D	int
}	O
,	O
{	O
0x2070	int
,	O
0x218F	int
}	O
,	O
{	O
0x2C00	int
,	O
0x2FEF	int
}	O
,	O
{	O
0x3001	int
,	O
0xD7FF	int
}	O
,	O
{	O
0xF900	int
,	O
0xFDCF	int
}	O
,	O
{	O
0xFDF0	int
,	O
0xFFFD	int
}	O
,	O
{	O
0x10000	int
,	O
0xEFFFF	int
}	O
}	O
;	O
static	O
const	O
struct	O
char_range	struct
name_chars2	array
[	O
]	O
=	O
{	O
{	O
'-'	O
,	O
'-'	O
}	O
,	O
{	O
'.'	O
,	O
'.'	O
}	O
,	O
{	O
'0'	O
,	O
'9'	O
}	O
,	O
{	O
0xB7	int
,	O
0xB7	int
}	O
,	O
{	O
0x0300	int
,	O
0x036F	int
}	O
,	O
{	O
0x203F	int
,	O
0x2040	int
}	O
}	O
;	O
static	O
bool	bool
is_reference	function
(	O
const	O
char	O
*	O
input	pointer
)	O
{	O
const	O
char	O
*	O
str	pointer
=	O
input	pointer
;	O
const	O
char	O
*	O
str_limit	pointer
=	O
str	pointer
+	O
strlen	function
(	O
input	pointer
)	O
;	O
ucs4_t	int
uc	int
;	O
int	O
i	long
;	O
str	pointer
+=	O
u8_mbtouc	function
(	O
&	O
uc	int
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	pointer
,	O
str_limit	pointer
-	O
str	pointer
)	O
;	O
assert	O
(	O
uc	int
==	O
'&'	O
)	O
;	O
str	pointer
+=	O
u8_mbtouc	function
(	O
&	O
uc	int
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	pointer
,	O
str_limit	pointer
-	O
str	pointer
)	O
;	O
if	O
(	O
uc	int
==	O
'#'	O
)	O
{	O
str	pointer
+=	O
u8_mbtouc	function
(	O
&	O
uc	int
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	pointer
,	O
str_limit	pointer
-	O
str	pointer
)	O
;	O
if	O
(	O
uc	int
==	O
'x'	O
)	O
{	O
while	O
(	O
str	pointer
<	O
str_limit	pointer
)	O
{	O
str	pointer
+=	O
u8_mbtouc	function
(	O
&	O
uc	int
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	pointer
,	O
str_limit	pointer
-	O
str	pointer
)	O
;	O
if	O
(	O
!	O
(	O
(	O
'0'	O
<=	O
uc	int
&&	O
uc	int
<=	O
'9'	O
)	O
||	O
(	O
'A'	O
<=	O
uc	int
&&	O
uc	int
<=	O
'F'	O
)	O
||	O
(	O
'a'	O
<=	O
uc	int
&&	O
uc	int
<=	O
'f'	O
)	O
)	O
)	O
break	O
;	O
}	O
return	O
uc	int
==	O
';'	O
;	O
}	O
else	O
if	O
(	O
'0'	O
<=	O
uc	int
&&	O
uc	int
<=	O
'9'	O
)	O
{	O
while	O
(	O
str	pointer
<	O
str_limit	pointer
)	O
{	O
str	pointer
+=	O
u8_mbtouc	function
(	O
&	O
uc	int
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	pointer
,	O
str_limit	pointer
-	O
str	pointer
)	O
;	O
if	O
(	O
!	O
(	O
'0'	O
<=	O
uc	int
&&	O
uc	int
<=	O
'9'	O
)	O
)	O
break	O
;	O
}	O
return	O
uc	int
==	O
';'	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
SIZEOF	O
(	O
name_chars1	array
)	O
;	O
i	long
++	O
)	O
if	O
(	O
name_chars1	array
[	O
i	long
]	O
.	O
start	pointer
<=	O
uc	int
&&	O
uc	int
<=	O
name_chars1	array
[	O
i	long
]	O
.	O
end	pointer
)	O
break	O
;	O
if	O
(	O
i	long
==	O
SIZEOF	O
(	O
name_chars1	array
)	O
)	O
return	O
false	int
;	O
while	O
(	O
str	pointer
<	O
str_limit	pointer
)	O
{	O
str	pointer
+=	O
u8_mbtouc	function
(	O
&	O
uc	int
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	pointer
,	O
str_limit	pointer
-	O
str	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
SIZEOF	O
(	O
name_chars1	array
)	O
;	O
i	long
++	O
)	O
if	O
(	O
name_chars1	array
[	O
i	long
]	O
.	O
start	pointer
<=	O
uc	int
&&	O
uc	int
<=	O
name_chars1	array
[	O
i	long
]	O
.	O
end	pointer
)	O
break	O
;	O
if	O
(	O
i	long
==	O
SIZEOF	O
(	O
name_chars1	array
)	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
SIZEOF	O
(	O
name_chars2	array
)	O
;	O
i	long
++	O
)	O
if	O
(	O
name_chars2	array
[	O
i	long
]	O
.	O
start	pointer
<=	O
uc	int
&&	O
uc	int
<=	O
name_chars2	array
[	O
i	long
]	O
.	O
end	pointer
)	O
break	O
;	O
if	O
(	O
i	long
==	O
SIZEOF	O
(	O
name_chars2	array
)	O
)	O
return	O
false	int
;	O
}	O
}	O
return	O
uc	int
==	O
';'	O
;	O
}	O
return	O
false	int
;	O
}	O
static	O
void	O
*	O
format_parse	function
(	O
const	O
char	O
*	O
format	pointer
,	O
bool	bool
translated	bool
,	O
char	O
*	O
fdi	pointer
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
{	O
struct	O
spec	struct
spec	struct
;	O
struct	O
spec	struct
*	O
result	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
const	O
char	O
*	O
str_limit	pointer
;	O
size_t	long
amp_count	long
;	O
char	O
*	O
buffer	pointer
,	O
*	O
bp	pointer
;	O
spec	struct
.	O
base	pointer
=	O
NULL	O
;	O
str	pointer
=	O
format	pointer
;	O
str_limit	pointer
=	O
str	pointer
+	O
strlen	function
(	O
format	pointer
)	O
;	O
for	O
(	O
amp_count	long
=	O
0	int
;	O
str	pointer
<	O
str_limit	pointer
;	O
amp_count	long
++	O
)	O
{	O
const	O
char	O
*	O
amp	pointer
=	O
strchrnul	function
(	O
str	pointer
,	O
'&'	O
)	O
;	O
if	O
(	O
*	O
amp	pointer
!=	O
'&'	O
)	O
break	O
;	O
str	pointer
=	O
amp	pointer
+	O
1	int
;	O
}	O
buffer	pointer
=	O
xmalloc	function
(	O
amp_count	long
*	O
4	int
+	O
strlen	function
(	O
format	pointer
)	O
+	O
strlen	function
(	O
"<gt:kuit xmlns:gt=\""	pointer
XML_NS	pointer
"\"></gt:kuit>"	pointer
)	O
+	O
1	int
)	O
;	O
*	O
buffer	pointer
=	O
'\0'	O
;	O
bp	pointer
=	O
buffer	pointer
;	O
bp	pointer
=	O
stpcpy	function
(	O
bp	pointer
,	O
"<gt:kuit xmlns:gt=\""	pointer
XML_NS	pointer
"\">"	pointer
)	O
;	O
str	pointer
=	O
format	pointer
;	O
while	O
(	O
str	pointer
<	O
str_limit	pointer
)	O
{	O
const	O
char	O
*	O
amp	pointer
=	O
strchrnul	function
(	O
str	pointer
,	O
'&'	O
)	O
;	O
bp	pointer
=	O
stpncpy	function
(	O
bp	pointer
,	O
str	pointer
,	O
amp	pointer
-	O
str	pointer
)	O
;	O
if	O
(	O
*	O
amp	pointer
!=	O
'&'	O
)	O
break	O
;	O
bp	pointer
=	O
stpcpy	function
(	O
bp	pointer
,	O
is_reference	function
(	O
amp	pointer
)	O
?	O
"&"	pointer
:	O
"&amp;"	pointer
)	O
;	O
str	pointer
=	O
amp	pointer
+	O
1	int
;	O
}	O
stpcpy	function
(	O
bp	pointer
,	O
"</gt:kuit>"	pointer
)	O
;	O
{	O
xmlDocPtr	pointer
doc	pointer
;	O
doc	pointer
=	O
xmlReadMemory	function
(	O
buffer	pointer
,	O
strlen	function
(	O
buffer	pointer
)	O
,	O
""	pointer
,	O
NULL	O
,	O
XML_PARSE_NONET	int
|	O
XML_PARSE_NOWARNING	int
|	O
XML_PARSE_NOERROR	int
|	O
XML_PARSE_NOBLANKS	int
)	O
;	O
if	O
(	O
doc	pointer
==	O
NULL	O
)	O
{	O
xmlError	struct
*	O
err	pointer
=	O
xmlGetLastError	function
(	O
)	O
;	O
*	O
invalid_reason	pointer
=	O
xasprintf	function
(	O
_	O
(	O
"error while parsing: %s"	pointer
)	O
,	O
err	pointer
->	O
message	pointer
)	O
;	O
free	function
(	O
buffer	pointer
)	O
;	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
free	function
(	O
buffer	pointer
)	O
;	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
}	O
spec	struct
.	O
base	pointer
=	O
formatstring_kde	struct
.	O
parse	pointer
(	O
format	pointer
,	O
translated	bool
,	O
fdi	pointer
,	O
invalid_reason	pointer
)	O
;	O
if	O
(	O
spec	struct
.	O
base	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
spec	struct
)	O
;	O
*	O
result	pointer
=	O
spec	struct
;	O
return	O
result	pointer
;	O
}	O
static	O
void	O
format_free	function
(	O
void	O
*	O
descr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec	struct
=	O
descr	pointer
;	O
formatstring_kde	struct
.	O
free	function
(	O
spec	struct
->	O
base	pointer
)	O
;	O
free	function
(	O
spec	struct
)	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	function
(	O
void	O
*	O
descr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec	struct
=	O
descr	pointer
;	O
return	O
formatstring_kde	struct
.	O
get_number_of_directives	pointer
(	O
spec	struct
->	O
base	pointer
)	O
;	O
}	O
static	O
bool	bool
format_check	function
(	O
void	O
*	O
msgid_descr	pointer
,	O
void	O
*	O
msgstr_descr	pointer
,	O
bool	bool
equality	bool
,	O
formatstring_error_logger_t	pointer
error_logger	pointer
,	O
const	O
char	O
*	O
pretty_msgid	pointer
,	O
const	O
char	O
*	O
pretty_msgstr	pointer
)	O
{	O
struct	O
spec	struct
*	O
msgid_spec	pointer
=	O
msgid_descr	pointer
;	O
struct	O
spec	struct
*	O
msgstr_spec	pointer
=	O
msgstr_descr	pointer
;	O
return	O
formatstring_kde	struct
.	O
check	pointer
(	O
msgid_spec	pointer
->	O
base	pointer
,	O
msgstr_spec	pointer
->	O
base	pointer
,	O
equality	bool
,	O
error_logger	pointer
,	O
pretty_msgid	pointer
,	O
pretty_msgstr	pointer
)	O
;	O
}	O
struct	O
formatstring_parser	struct
formatstring_kde_kuit	struct
=	O
{	O
format_parse	function
,	O
format_free	function
,	O
format_get_number_of_directives	function
,	O
NULL	O
,	O
format_check	function
}	O
;	O
