enum	O
rtcase	enum
{	O
case_upcase	int
,	O
case_downcase	int
,	O
case_preserve	int
,	O
case_invert	int
}	O
;	O
static	O
enum	O
rtcase	enum
readtable_case	enum
=	O
case_upcase	int
;	O
static	O
int	O
read_base	int
=	O
10	int
;	O
static	O
bool	bool
read_preserve_whitespace	bool
=	O
true	int
;	O
static	O
bool	bool
extract_all	bool
=	O
false	int
;	O
static	O
hash_table	struct
keywords	struct
;	O
static	O
bool	bool
default_keywords	bool
=	O
true	int
;	O
void	O
x_lisp_extract_all	function
(	O
)	O
{	O
extract_all	bool
=	O
true	int
;	O
}	O
void	O
x_lisp_keyword	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
default_keywords	bool
=	O
false	int
;	O
else	O
{	O
const	O
char	O
*	O
end	pointer
;	O
struct	O
callshape	struct
shape	pointer
;	O
const	O
char	O
*	O
colon	pointer
;	O
size_t	long
len	long
;	O
char	O
*	O
symname	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
keywords	struct
.	O
table	pointer
==	O
NULL	O
)	O
hash_init	function
(	O
&	O
keywords	struct
,	O
100	int
)	O
;	O
split_keywordspec	function
(	O
name	pointer
,	O
&	O
end	pointer
,	O
&	O
shape	pointer
)	O
;	O
colon	pointer
=	O
strchr	function
(	O
name	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
colon	pointer
!=	O
NULL	O
&&	O
colon	pointer
<	O
end	pointer
)	O
{	O
name	pointer
=	O
colon	pointer
+	O
1	int
;	O
if	O
(	O
name	pointer
<	O
end	pointer
&&	O
*	O
name	pointer
==	O
':'	O
)	O
name	pointer
++	O
;	O
colon	pointer
=	O
strchr	function
(	O
name	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
colon	pointer
!=	O
NULL	O
&&	O
colon	pointer
<	O
end	pointer
)	O
return	O
;	O
}	O
len	long
=	O
end	pointer
-	O
name	pointer
;	O
symname	pointer
=	O
XNMALLOC	O
(	O
len	long
,	O
char	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
symname	pointer
[	O
i	long
]	O
=	O
(	O
name	pointer
[	O
i	long
]	O
>=	O
'a'	O
&&	O
name	pointer
[	O
i	long
]	O
<=	O
'z'	O
?	O
name	pointer
[	O
i	long
]	O
-	O
'a'	O
+	O
'A'	O
:	O
name	pointer
[	O
i	long
]	O
)	O
;	O
insert_keyword_callshape	function
(	O
&	O
keywords	struct
,	O
symname	pointer
,	O
len	long
,	O
&	O
shape	pointer
)	O
;	O
}	O
}	O
static	O
void	O
init_keywords	function
(	O
)	O
{	O
if	O
(	O
default_keywords	bool
)	O
{	O
x_lisp_keyword	function
(	O
"gettext"	pointer
)	O
;	O
x_lisp_keyword	function
(	O
"ngettext:1,2"	pointer
)	O
;	O
x_lisp_keyword	function
(	O
"gettext-noop"	pointer
)	O
;	O
default_keywords	bool
=	O
false	int
;	O
}	O
}	O
void	O
init_flag_table_lisp	function
(	O
)	O
{	O
xgettext_record_flag	function
(	O
"gettext:1:pass-lisp-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"ngettext:1:pass-lisp-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"ngettext:2:pass-lisp-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"gettext-noop:1:pass-lisp-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"format:2:lisp-format"	pointer
)	O
;	O
}	O
static	O
FILE	struct
*	O
fp	pointer
;	O
static	O
int	O
do_getc	function
(	O
)	O
{	O
int	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	pointer
)	O
,	O
real_file_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
++	O
;	O
return	O
c	int
;	O
}	O
static	O
void	O
do_ungetc	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
--	O
;	O
ungetc	function
(	O
c	int
,	O
fp	pointer
)	O
;	O
}	O
enum	O
syntax_code	enum
{	O
syntax_illegal	int
,	O
syntax_single_esc	int
,	O
syntax_multi_esc	int
,	O
syntax_constituent	int
,	O
syntax_whitespace	int
,	O
syntax_eof	int
,	O
syntax_t_macro	int
,	O
syntax_nt_macro	int
}	O
;	O
static	O
enum	O
syntax_code	enum
syntax_code_of	function
(	O
unsigned	O
char	O
c	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\\'	O
:	O
return	O
syntax_single_esc	int
;	O
case	O
'|'	O
:	O
return	O
syntax_multi_esc	int
;	O
case	O
'\t'	O
:	O
case	O
'\n'	O
:	O
case	O
'\f'	O
:	O
case	O
'\r'	O
:	O
case	O
' '	O
:	O
return	O
syntax_whitespace	int
;	O
case	O
'('	O
:	O
case	O
')'	O
:	O
case	O
'\''	O
:	O
case	O
'"'	O
:	O
case	O
','	O
:	O
case	O
';'	O
:	O
case	O
'`'	O
:	O
return	O
syntax_t_macro	int
;	O
case	O
'#'	O
:	O
return	O
syntax_nt_macro	int
;	O
default	O
:	O
if	O
(	O
c	int
<	O
' '	O
&&	O
c	int
!=	O
'\b'	O
)	O
return	O
syntax_illegal	int
;	O
else	O
return	O
syntax_constituent	int
;	O
}	O
}	O
struct	O
char_syntax	struct
{	O
int	O
ch	int
;	O
enum	O
syntax_code	enum
scode	enum
;	O
}	O
;	O
static	O
void	O
read_char_syntax	function
(	O
struct	O
char_syntax	struct
*	O
p	pointer
)	O
{	O
int	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
p	pointer
->	O
ch	int
=	O
c	int
;	O
p	pointer
->	O
scode	enum
=	O
(	O
c	int
==	O
EOF	O
?	O
syntax_eof	int
:	O
syntax_code_of	function
(	O
c	int
)	O
)	O
;	O
}	O
enum	O
attribute	enum
{	O
a_illg	int
,	O
a_pack_m	int
,	O
a_alpha	int
,	O
a_escaped	int
,	O
a_ratio	int
,	O
a_dot	int
,	O
a_sign	int
,	O
a_extens	int
,	O
a_digit	int
,	O
a_letterdigit	int
,	O
a_expodigit	int
,	O
a_letter	int
,	O
a_expo	int
}	O
;	O
static	O
enum	O
attribute	enum
attribute_of	function
(	O
unsigned	O
char	O
c	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
':'	O
:	O
return	O
a_pack_m	int
;	O
case	O
'/'	O
:	O
return	O
a_ratio	int
;	O
case	O
'.'	O
:	O
return	O
a_dot	int
;	O
case	O
'+'	O
:	O
case	O
'-'	O
:	O
return	O
a_sign	int
;	O
case	O
'_'	O
:	O
case	O
'^'	O
:	O
return	O
a_extens	int
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
return	O
a_digit	int
;	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'R'	O
:	O
case	O
'T'	O
:	O
case	O
'U'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
return	O
a_letter	int
;	O
case	O
'e'	O
:	O
case	O
's'	O
:	O
case	O
'd'	O
:	O
case	O
'f'	O
:	O
case	O
'l'	O
:	O
case	O
'E'	O
:	O
case	O
'S'	O
:	O
case	O
'D'	O
:	O
case	O
'F'	O
:	O
case	O
'L'	O
:	O
return	O
a_expo	int
;	O
default	O
:	O
return	O
a_alpha	int
;	O
}	O
}	O
struct	O
token_char	struct
{	O
unsigned	O
char	O
ch	int
;	O
unsigned	O
char	O
attribute	enum
;	O
}	O
;	O
struct	O
token	struct
{	O
int	O
allocated	int
;	O
int	O
charcount	int
;	O
struct	O
token_char	struct
*	O
chars	pointer
;	O
bool	bool
with_escape	bool
;	O
}	O
;	O
static	O
inline	O
void	O
init_token	function
(	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
tp	pointer
->	O
allocated	int
=	O
10	int
;	O
tp	pointer
->	O
chars	pointer
=	O
XNMALLOC	O
(	O
tp	pointer
->	O
allocated	int
,	O
struct	O
token_char	struct
)	O
;	O
tp	pointer
->	O
charcount	int
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
free_token	function
(	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
free	function
(	O
tp	pointer
->	O
chars	pointer
)	O
;	O
}	O
static	O
inline	O
void	O
grow_token	function
(	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
charcount	int
==	O
tp	pointer
->	O
allocated	int
)	O
{	O
tp	pointer
->	O
allocated	int
*=	O
2	int
;	O
tp	pointer
->	O
chars	pointer
=	O
(	O
struct	O
token_char	struct
*	O
)	O
xrealloc	function
(	O
tp	pointer
->	O
chars	pointer
,	O
tp	pointer
->	O
allocated	int
*	O
sizeof	O
(	O
struct	O
token_char	struct
)	O
)	O
;	O
}	O
}	O
static	O
void	O
read_token	function
(	O
struct	O
token	struct
*	O
tp	pointer
,	O
const	O
struct	O
char_syntax	struct
*	O
first	pointer
)	O
{	O
bool	bool
multiple_escape_flag	bool
;	O
struct	O
char_syntax	struct
curr	struct
;	O
init_token	function
(	O
tp	pointer
)	O
;	O
tp	pointer
->	O
with_escape	bool
=	O
false	int
;	O
multiple_escape_flag	bool
=	O
false	int
;	O
if	O
(	O
first	pointer
)	O
curr	struct
=	O
*	O
first	pointer
;	O
else	O
read_char_syntax	function
(	O
&	O
curr	struct
)	O
;	O
for	O
(	O
;	O
;	O
read_char_syntax	function
(	O
&	O
curr	struct
)	O
)	O
{	O
switch	O
(	O
curr	struct
.	O
scode	enum
)	O
{	O
case	O
syntax_illegal	int
:	O
do_ungetc	function
(	O
curr	struct
.	O
ch	int
)	O
;	O
return	O
;	O
case	O
syntax_single_esc	int
:	O
tp	pointer
->	O
with_escape	bool
=	O
true	int
;	O
read_char_syntax	function
(	O
&	O
curr	struct
)	O
;	O
if	O
(	O
curr	struct
.	O
scode	enum
==	O
syntax_eof	int
)	O
return	O
;	O
grow_token	function
(	O
tp	pointer
)	O
;	O
tp	pointer
->	O
chars	pointer
[	O
tp	pointer
->	O
charcount	int
]	O
.	O
ch	int
=	O
curr	struct
.	O
ch	int
;	O
tp	pointer
->	O
chars	pointer
[	O
tp	pointer
->	O
charcount	int
]	O
.	O
attribute	enum
=	O
a_escaped	int
;	O
tp	pointer
->	O
charcount	int
++	O
;	O
break	O
;	O
case	O
syntax_multi_esc	int
:	O
multiple_escape_flag	bool
=	O
!	O
multiple_escape_flag	bool
;	O
tp	pointer
->	O
with_escape	bool
=	O
true	int
;	O
break	O
;	O
case	O
syntax_constituent	int
:	O
case	O
syntax_nt_macro	int
:	O
grow_token	function
(	O
tp	pointer
)	O
;	O
if	O
(	O
multiple_escape_flag	bool
)	O
{	O
tp	pointer
->	O
chars	pointer
[	O
tp	pointer
->	O
charcount	int
]	O
.	O
ch	int
=	O
curr	struct
.	O
ch	int
;	O
tp	pointer
->	O
chars	pointer
[	O
tp	pointer
->	O
charcount	int
]	O
.	O
attribute	enum
=	O
a_escaped	int
;	O
tp	pointer
->	O
charcount	int
++	O
;	O
}	O
else	O
{	O
tp	pointer
->	O
chars	pointer
[	O
tp	pointer
->	O
charcount	int
]	O
.	O
ch	int
=	O
curr	struct
.	O
ch	int
;	O
tp	pointer
->	O
chars	pointer
[	O
tp	pointer
->	O
charcount	int
]	O
.	O
attribute	enum
=	O
attribute_of	function
(	O
curr	struct
.	O
ch	int
)	O
;	O
tp	pointer
->	O
charcount	int
++	O
;	O
}	O
break	O
;	O
case	O
syntax_whitespace	int
:	O
case	O
syntax_t_macro	int
:	O
if	O
(	O
multiple_escape_flag	bool
)	O
{	O
grow_token	function
(	O
tp	pointer
)	O
;	O
tp	pointer
->	O
chars	pointer
[	O
tp	pointer
->	O
charcount	int
]	O
.	O
ch	int
=	O
curr	struct
.	O
ch	int
;	O
tp	pointer
->	O
chars	pointer
[	O
tp	pointer
->	O
charcount	int
]	O
.	O
attribute	enum
=	O
a_escaped	int
;	O
tp	pointer
->	O
charcount	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
curr	struct
.	O
scode	enum
!=	O
syntax_whitespace	int
||	O
read_preserve_whitespace	bool
)	O
do_ungetc	function
(	O
curr	struct
.	O
ch	int
)	O
;	O
return	O
;	O
}	O
break	O
;	O
case	O
syntax_eof	int
:	O
if	O
(	O
multiple_escape_flag	bool
)	O
;	O
return	O
;	O
}	O
}	O
}	O
static	O
inline	O
bool	bool
has_a_dot	function
(	O
const	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
int	O
n	long
=	O
tp	pointer
->	O
charcount	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
attribute	enum
==	O
a_dot	int
)	O
return	O
true	int
;	O
return	O
false	int
;	O
}	O
static	O
inline	O
bool	bool
all_a_number	function
(	O
const	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
int	O
n	long
=	O
tp	pointer
->	O
charcount	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
!	O
is_number_attribute	O
(	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
attribute	enum
)	O
)	O
return	O
false	int
;	O
return	O
true	int
;	O
}	O
static	O
inline	O
void	O
a_letter_to_digit	function
(	O
const	O
struct	O
token	struct
*	O
tp	pointer
,	O
int	O
base	int
)	O
{	O
int	O
n	long
=	O
tp	pointer
->	O
charcount	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
is_letter_attribute	O
(	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
attribute	enum
)	O
)	O
{	O
int	O
c	int
=	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
ch	int
;	O
if	O
(	O
c	int
>=	O
'a'	O
)	O
c	int
-=	O
'a'	O
-	O
'A'	O
;	O
if	O
(	O
c	int
-	O
'A'	O
+	O
10	int
<	O
base	int
)	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
attribute	enum
-=	O
2	int
;	O
}	O
}	O
static	O
inline	O
bool	bool
has_a_digit	function
(	O
const	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
int	O
n	long
=	O
tp	pointer
->	O
charcount	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
attribute	enum
==	O
a_digit	int
||	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
attribute	enum
==	O
a_letterdigit	int
||	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
attribute	enum
==	O
a_expodigit	int
)	O
return	O
true	int
;	O
return	O
false	int
;	O
}	O
static	O
inline	O
bool	bool
has_adjacent_letters	function
(	O
const	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
int	O
n	long
=	O
tp	pointer
->	O
charcount	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
is_letter_attribute	O
(	O
tp	pointer
->	O
chars	pointer
[	O
i	long
-	O
1	int
]	O
.	O
attribute	enum
)	O
&&	O
is_letter_attribute	O
(	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
attribute	enum
)	O
)	O
return	O
true	int
;	O
return	O
false	int
;	O
}	O
static	O
bool	bool
is_potential_number	function
(	O
const	O
struct	O
token	struct
*	O
tp	pointer
,	O
int	O
*	O
basep	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
with_escape	bool
)	O
return	O
false	int
;	O
if	O
(	O
has_a_dot	function
(	O
tp	pointer
)	O
)	O
*	O
basep	pointer
=	O
10	int
;	O
if	O
(	O
!	O
all_a_number	function
(	O
tp	pointer
)	O
)	O
return	O
false	int
;	O
a_letter_to_digit	function
(	O
tp	pointer
,	O
*	O
basep	pointer
)	O
;	O
if	O
(	O
!	O
has_a_digit	function
(	O
tp	pointer
)	O
)	O
return	O
false	int
;	O
if	O
(	O
has_adjacent_letters	function
(	O
tp	pointer
)	O
)	O
return	O
false	int
;	O
if	O
(	O
!	O
(	O
tp	pointer
->	O
chars	pointer
[	O
0	int
]	O
.	O
attribute	enum
>=	O
a_dot	int
&&	O
tp	pointer
->	O
chars	pointer
[	O
0	int
]	O
.	O
attribute	enum
<=	O
a_expodigit	int
)	O
)	O
return	O
false	int
;	O
if	O
(	O
tp	pointer
->	O
chars	pointer
[	O
tp	pointer
->	O
charcount	int
-	O
1	int
]	O
.	O
attribute	enum
==	O
a_sign	int
)	O
return	O
false	int
;	O
return	O
true	int
;	O
}	O
enum	O
number_type	enum
{	O
n_none	int
,	O
n_integer	int
,	O
n_ratio	int
,	O
n_float	int
}	O
;	O
static	O
enum	O
number_type	enum
is_number	function
(	O
const	O
struct	O
token	struct
*	O
tp	pointer
,	O
int	O
*	O
basep	pointer
)	O
{	O
struct	O
token_char	struct
*	O
ptr_limit	pointer
;	O
struct	O
token_char	struct
*	O
ptr1	pointer
;	O
if	O
(	O
!	O
is_potential_number	function
(	O
tp	pointer
,	O
basep	pointer
)	O
)	O
return	O
n_none	int
;	O
ptr1	pointer
=	O
&	O
tp	pointer
->	O
chars	pointer
[	O
0	int
]	O
;	O
ptr_limit	pointer
=	O
&	O
tp	pointer
->	O
chars	pointer
[	O
tp	pointer
->	O
charcount	int
]	O
;	O
if	O
(	O
ptr1	pointer
->	O
attribute	enum
==	O
a_sign	int
)	O
ptr1	pointer
++	O
;	O
{	O
bool	bool
seen_a_ratio	bool
=	O
false	int
;	O
bool	bool
seen_a_digit	bool
=	O
false	int
;	O
struct	O
token_char	struct
*	O
ptr	pointer
;	O
for	O
(	O
ptr	pointer
=	O
ptr1	pointer
;	O
;	O
ptr	pointer
++	O
)	O
{	O
if	O
(	O
ptr	pointer
>=	O
ptr_limit	pointer
)	O
{	O
if	O
(	O
!	O
seen_a_digit	bool
)	O
break	O
;	O
if	O
(	O
seen_a_ratio	bool
)	O
return	O
n_ratio	int
;	O
else	O
return	O
n_integer	int
;	O
}	O
if	O
(	O
ptr	pointer
->	O
attribute	enum
==	O
a_digit	int
||	O
ptr	pointer
->	O
attribute	enum
==	O
a_letterdigit	int
||	O
ptr	pointer
->	O
attribute	enum
==	O
a_expodigit	int
)	O
{	O
int	O
c	int
=	O
ptr	pointer
->	O
ch	int
;	O
c	int
=	O
(	O
c	int
<	O
'A'	O
?	O
c	int
-	O
'0'	O
:	O
c	int
<	O
'a'	O
?	O
c	int
-	O
'A'	O
+	O
10	int
:	O
c	int
-	O
'a'	O
+	O
10	int
)	O
;	O
if	O
(	O
c	int
>=	O
*	O
basep	pointer
)	O
break	O
;	O
seen_a_digit	bool
=	O
true	int
;	O
}	O
else	O
if	O
(	O
ptr	pointer
->	O
attribute	enum
==	O
a_ratio	int
)	O
{	O
if	O
(	O
seen_a_ratio	bool
||	O
!	O
seen_a_digit	bool
)	O
break	O
;	O
seen_a_ratio	bool
=	O
true	int
;	O
seen_a_digit	bool
=	O
false	int
;	O
}	O
else	O
break	O
;	O
}	O
}	O
*	O
basep	pointer
=	O
10	int
;	O
{	O
bool	bool
seen_a_dot	bool
=	O
false	int
;	O
bool	bool
seen_a_dot_with_leading_digits	bool
=	O
false	int
;	O
bool	bool
seen_a_digit	bool
=	O
false	int
;	O
struct	O
token_char	struct
*	O
ptr	pointer
;	O
for	O
(	O
ptr	pointer
=	O
ptr1	pointer
;	O
;	O
ptr	pointer
++	O
)	O
{	O
if	O
(	O
ptr	pointer
>=	O
ptr_limit	pointer
)	O
{	O
if	O
(	O
!	O
seen_a_dot	bool
)	O
return	O
n_none	int
;	O
if	O
(	O
seen_a_digit	bool
)	O
return	O
n_float	int
;	O
if	O
(	O
seen_a_dot_with_leading_digits	bool
)	O
return	O
n_integer	int
;	O
else	O
return	O
n_none	int
;	O
}	O
if	O
(	O
ptr	pointer
->	O
attribute	enum
==	O
a_digit	int
)	O
{	O
seen_a_digit	bool
=	O
true	int
;	O
}	O
else	O
if	O
(	O
ptr	pointer
->	O
attribute	enum
==	O
a_dot	int
)	O
{	O
if	O
(	O
seen_a_dot	bool
)	O
return	O
n_none	int
;	O
seen_a_dot	bool
=	O
true	int
;	O
if	O
(	O
seen_a_digit	bool
)	O
seen_a_dot_with_leading_digits	bool
=	O
true	int
;	O
seen_a_digit	bool
=	O
false	int
;	O
}	O
else	O
if	O
(	O
ptr	pointer
->	O
attribute	enum
==	O
a_expo	int
||	O
ptr	pointer
->	O
attribute	enum
==	O
a_expodigit	int
)	O
break	O
;	O
else	O
return	O
n_none	int
;	O
}	O
ptr	pointer
++	O
;	O
if	O
(	O
!	O
seen_a_dot_with_leading_digits	bool
||	O
!	O
seen_a_digit	bool
)	O
return	O
n_none	int
;	O
if	O
(	O
ptr	pointer
>=	O
ptr_limit	pointer
)	O
return	O
n_none	int
;	O
if	O
(	O
ptr	pointer
->	O
attribute	enum
==	O
a_sign	int
)	O
ptr	pointer
++	O
;	O
seen_a_digit	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
ptr	pointer
++	O
)	O
{	O
if	O
(	O
ptr	pointer
>=	O
ptr_limit	pointer
)	O
break	O
;	O
if	O
(	O
ptr	pointer
->	O
attribute	enum
!=	O
a_digit	int
)	O
return	O
n_none	int
;	O
seen_a_digit	bool
=	O
true	int
;	O
}	O
if	O
(	O
!	O
seen_a_digit	bool
)	O
return	O
n_none	int
;	O
return	O
n_float	int
;	O
}	O
}	O
static	O
void	O
upcase_token	function
(	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
int	O
n	long
=	O
tp	pointer
->	O
charcount	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
attribute	enum
!=	O
a_escaped	int
)	O
{	O
unsigned	O
char	O
c	int
=	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
ch	int
;	O
if	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
ch	int
=	O
c	int
-	O
'a'	O
+	O
'A'	O
;	O
}	O
}	O
static	O
void	O
downcase_token	function
(	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
int	O
n	long
=	O
tp	pointer
->	O
charcount	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
attribute	enum
!=	O
a_escaped	int
)	O
{	O
unsigned	O
char	O
c	int
=	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
ch	int
;	O
if	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
ch	int
=	O
c	int
-	O
'A'	O
+	O
'a'	O
;	O
}	O
}	O
static	O
void	O
case_convert_token	function
(	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
int	O
n	long
=	O
tp	pointer
->	O
charcount	int
;	O
int	O
i	long
;	O
switch	O
(	O
readtable_case	enum
)	O
{	O
case	O
case_upcase	int
:	O
upcase_token	function
(	O
tp	pointer
)	O
;	O
break	O
;	O
case	O
case_downcase	int
:	O
downcase_token	function
(	O
tp	pointer
)	O
;	O
break	O
;	O
case	O
case_preserve	int
:	O
break	O
;	O
case	O
case_invert	int
:	O
{	O
bool	bool
seen_uppercase	bool
=	O
false	int
;	O
bool	bool
seen_lowercase	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
attribute	enum
!=	O
a_escaped	int
)	O
{	O
unsigned	O
char	O
c	int
=	O
tp	pointer
->	O
chars	pointer
[	O
i	long
]	O
.	O
ch	int
;	O
if	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
seen_lowercase	bool
=	O
true	int
;	O
if	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
seen_uppercase	bool
=	O
true	int
;	O
}	O
if	O
(	O
seen_uppercase	bool
)	O
{	O
if	O
(	O
!	O
seen_lowercase	bool
)	O
downcase_token	function
(	O
tp	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
seen_lowercase	bool
)	O
upcase_token	function
(	O
tp	pointer
)	O
;	O
}	O
}	O
break	O
;	O
}	O
}	O
static	O
char	O
*	O
buffer	pointer
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
static	O
inline	O
void	O
comment_start	function
(	O
)	O
{	O
buflen	long
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
comment_add	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
buffer	pointer
[	O
buflen	long
++	O
]	O
=	O
c	int
;	O
}	O
static	O
inline	O
void	O
comment_line_end	function
(	O
size_t	long
chars_to_remove	long
)	O
{	O
buflen	long
-=	O
chars_to_remove	long
;	O
while	O
(	O
buflen	long
>=	O
1	int
&&	O
(	O
buffer	pointer
[	O
buflen	long
-	O
1	int
]	O
==	O
' '	O
||	O
buffer	pointer
[	O
buflen	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
buflen	long
;	O
if	O
(	O
chars_to_remove	long
==	O
0	int
&&	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
buffer	pointer
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
savable_comment_add	function
(	O
buffer	pointer
)	O
;	O
}	O
static	O
int	O
last_comment_line	int
;	O
static	O
int	O
last_non_comment_line	int
;	O
static	O
message_list_ty	struct
*	O
mlp	pointer
;	O
enum	O
object_type	enum
{	O
t_symbol	int
,	O
t_string	int
,	O
t_other	int
,	O
t_dot	int
,	O
t_close	int
,	O
t_eof	int
}	O
;	O
struct	O
object	struct
{	O
enum	O
object_type	enum
type	char
;	O
struct	O
token	struct
*	O
token	struct
;	O
int	O
line_number_at_start	int
;	O
}	O
;	O
static	O
inline	O
void	O
free_object	function
(	O
struct	O
object	struct
*	O
op	pointer
)	O
{	O
if	O
(	O
op	pointer
->	O
type	char
==	O
t_symbol	int
||	O
op	pointer
->	O
type	char
==	O
t_string	int
)	O
{	O
free_token	function
(	O
op	pointer
->	O
token	struct
)	O
;	O
free	function
(	O
op	pointer
->	O
token	struct
)	O
;	O
}	O
}	O
static	O
char	O
*	O
string_of_object	function
(	O
const	O
struct	O
object	struct
*	O
op	pointer
)	O
{	O
char	O
*	O
str	pointer
;	O
const	O
struct	O
token_char	struct
*	O
p	pointer
;	O
char	O
*	O
q	pointer
;	O
int	O
n	long
;	O
if	O
(	O
!	O
(	O
op	pointer
->	O
type	char
==	O
t_symbol	int
||	O
op	pointer
->	O
type	char
==	O
t_string	int
)	O
)	O
abort	function
(	O
)	O
;	O
n	long
=	O
op	pointer
->	O
token	struct
->	O
charcount	int
;	O
str	pointer
=	O
XNMALLOC	O
(	O
n	long
+	O
1	int
,	O
char	O
)	O
;	O
q	pointer
=	O
str	pointer
;	O
for	O
(	O
p	pointer
=	O
op	pointer
->	O
token	struct
->	O
chars	pointer
;	O
n	long
>	O
0	int
;	O
p	pointer
++	O
,	O
n	long
--	O
)	O
*	O
q	pointer
++	O
=	O
p	pointer
->	O
ch	int
;	O
*	O
q	pointer
=	O
'\0'	O
;	O
return	O
str	pointer
;	O
}	O
static	O
flag_context_list_table_ty	struct
*	O
flag_context_list_table	pointer
;	O
static	O
void	O
read_object	function
(	O
struct	O
object	struct
*	O
op	pointer
,	O
flag_context_ty	struct
outer_context	struct
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
struct	O
char_syntax	struct
curr	struct
;	O
read_char_syntax	function
(	O
&	O
curr	struct
)	O
;	O
switch	O
(	O
curr	struct
.	O
scode	enum
)	O
{	O
case	O
syntax_eof	int
:	O
op	pointer
->	O
type	char
=	O
t_eof	int
;	O
return	O
;	O
case	O
syntax_whitespace	int
:	O
if	O
(	O
curr	struct
.	O
ch	int
==	O
'\n'	O
)	O
if	O
(	O
last_non_comment_line	int
>	O
last_comment_line	int
)	O
savable_comment_reset	function
(	O
)	O
;	O
continue	O
;	O
case	O
syntax_illegal	int
:	O
op	pointer
->	O
type	char
=	O
t_other	int
;	O
return	O
;	O
case	O
syntax_single_esc	int
:	O
case	O
syntax_multi_esc	int
:	O
case	O
syntax_constituent	int
:	O
op	pointer
->	O
token	struct
=	O
XMALLOC	O
(	O
struct	O
token	struct
)	O
;	O
read_token	function
(	O
op	pointer
->	O
token	struct
,	O
&	O
curr	struct
)	O
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
if	O
(	O
!	O
op	pointer
->	O
token	struct
->	O
with_escape	bool
&&	O
op	pointer
->	O
token	struct
->	O
charcount	int
==	O
1	int
&&	O
op	pointer
->	O
token	struct
->	O
chars	pointer
[	O
0	int
]	O
.	O
attribute	enum
==	O
a_dot	int
)	O
{	O
free_token	function
(	O
op	pointer
->	O
token	struct
)	O
;	O
free	function
(	O
op	pointer
->	O
token	struct
)	O
;	O
op	pointer
->	O
type	char
=	O
t_dot	int
;	O
return	O
;	O
}	O
{	O
int	O
base	int
=	O
read_base	int
;	O
if	O
(	O
is_number	function
(	O
op	pointer
->	O
token	struct
,	O
&	O
base	int
)	O
!=	O
n_none	int
)	O
{	O
free_token	function
(	O
op	pointer
->	O
token	struct
)	O
;	O
free	function
(	O
op	pointer
->	O
token	struct
)	O
;	O
op	pointer
->	O
type	char
=	O
t_other	int
;	O
return	O
;	O
}	O
}	O
case_convert_token	function
(	O
op	pointer
->	O
token	struct
)	O
;	O
op	pointer
->	O
type	char
=	O
t_symbol	int
;	O
return	O
;	O
case	O
syntax_t_macro	int
:	O
case	O
syntax_nt_macro	int
:	O
switch	O
(	O
curr	struct
.	O
ch	int
)	O
{	O
case	O
'('	O
:	O
{	O
int	O
arg	int
=	O
0	int
;	O
flag_context_list_iterator_ty	struct
context_iter	struct
;	O
const	O
struct	O
callshapes	struct
*	O
shapes	array
=	O
NULL	O
;	O
struct	O
arglist_parser	struct
*	O
argparser	pointer
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
arg	int
++	O
)	O
{	O
struct	O
object	struct
inner	struct
;	O
flag_context_ty	struct
inner_context	struct
;	O
if	O
(	O
arg	int
==	O
0	int
)	O
inner_context	struct
=	O
null_context	struct
;	O
else	O
inner_context	struct
=	O
inherited_context	function
(	O
outer_context	struct
,	O
flag_context_list_iterator_advance	function
(	O
&	O
context_iter	struct
)	O
)	O
;	O
read_object	function
(	O
&	O
inner	struct
,	O
inner_context	struct
)	O
;	O
if	O
(	O
inner	struct
.	O
type	char
==	O
t_close	int
)	O
{	O
op	pointer
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
if	O
(	O
argparser	pointer
!=	O
NULL	O
)	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
inner	struct
.	O
type	char
==	O
t_eof	int
)	O
break	O
;	O
if	O
(	O
arg	int
==	O
0	int
)	O
{	O
if	O
(	O
inner	struct
.	O
type	char
==	O
t_symbol	int
)	O
{	O
char	O
*	O
symbol_name	pointer
=	O
string_of_object	function
(	O
&	O
inner	struct
)	O
;	O
int	O
i	long
;	O
int	O
prefix_len	int
;	O
void	O
*	O
keyword_value	pointer
;	O
i	long
=	O
inner	struct
.	O
token	struct
->	O
charcount	int
;	O
while	O
(	O
i	long
>	O
0	int
&&	O
inner	struct
.	O
token	struct
->	O
chars	pointer
[	O
i	long
-	O
1	int
]	O
.	O
attribute	enum
!=	O
a_pack_m	int
)	O
i	long
--	O
;	O
prefix_len	int
=	O
i	long
;	O
if	O
(	O
hash_find_entry	function
(	O
&	O
keywords	struct
,	O
symbol_name	pointer
+	O
prefix_len	int
,	O
strlen	function
(	O
symbol_name	pointer
+	O
prefix_len	int
)	O
,	O
&	O
keyword_value	pointer
)	O
==	O
0	int
)	O
shapes	array
=	O
(	O
const	O
struct	O
callshapes	struct
*	O
)	O
keyword_value	pointer
;	O
argparser	pointer
=	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
shapes	array
)	O
;	O
context_iter	struct
=	O
flag_context_list_iterator	function
(	O
flag_context_list_table_lookup	function
(	O
flag_context_list_table	pointer
,	O
symbol_name	pointer
,	O
strlen	function
(	O
symbol_name	pointer
)	O
)	O
)	O
;	O
free	function
(	O
symbol_name	pointer
)	O
;	O
}	O
else	O
context_iter	struct
=	O
null_context_list_iterator	struct
;	O
}	O
else	O
{	O
if	O
(	O
argparser	pointer
!=	O
NULL	O
&&	O
inner	struct
.	O
type	char
==	O
t_string	int
)	O
{	O
char	O
*	O
s	pointer
=	O
string_of_object	function
(	O
&	O
inner	struct
)	O
;	O
mixed_string_ty	struct
*	O
ms	pointer
=	O
mixed_string_alloc_simple	function
(	O
s	pointer
,	O
lc_string	int
,	O
logical_file_name	pointer
,	O
inner	struct
.	O
line_number_at_start	int
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
arglist_parser_remember	function
(	O
argparser	pointer
,	O
arg	int
,	O
ms	pointer
,	O
inner_context	struct
,	O
logical_file_name	pointer
,	O
inner	struct
.	O
line_number_at_start	int
,	O
savable_comment	pointer
,	O
false	int
)	O
;	O
}	O
}	O
free_object	function
(	O
&	O
inner	struct
)	O
;	O
}	O
if	O
(	O
argparser	pointer
!=	O
NULL	O
)	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
}	O
op	pointer
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
case	O
')'	O
:	O
op	pointer
->	O
type	char
=	O
t_close	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
case	O
','	O
:	O
{	O
int	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
&&	O
c	int
!=	O
'@'	O
&&	O
c	int
!=	O
'.'	O
)	O
do_ungetc	function
(	O
c	int
)	O
;	O
}	O
case	O
'\''	O
:	O
case	O
'`'	O
:	O
{	O
struct	O
object	struct
inner	struct
;	O
read_object	function
(	O
&	O
inner	struct
,	O
null_context	struct
)	O
;	O
free_object	function
(	O
&	O
inner	struct
)	O
;	O
op	pointer
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
case	O
';'	O
:	O
{	O
bool	bool
all_semicolons	bool
=	O
true	int
;	O
last_comment_line	int
=	O
line_number	long
;	O
comment_start	function
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
if	O
(	O
c	int
!=	O
';'	O
)	O
all_semicolons	bool
=	O
false	int
;	O
if	O
(	O
!	O
all_semicolons	bool
)	O
{	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	function
(	O
c	int
)	O
;	O
}	O
}	O
comment_line_end	function
(	O
0	int
)	O
;	O
continue	O
;	O
}	O
case	O
'"'	O
:	O
{	O
op	pointer
->	O
token	struct
=	O
XMALLOC	O
(	O
struct	O
token	struct
)	O
;	O
init_token	function
(	O
op	pointer
->	O
token	struct
)	O
;	O
op	pointer
->	O
line_number_at_start	int
=	O
line_number	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'"'	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
}	O
grow_token	function
(	O
op	pointer
->	O
token	struct
)	O
;	O
op	pointer
->	O
token	struct
->	O
chars	pointer
[	O
op	pointer
->	O
token	struct
->	O
charcount	int
++	O
]	O
.	O
ch	int
=	O
c	int
;	O
}	O
op	pointer
->	O
type	char
=	O
t_string	int
;	O
if	O
(	O
extract_all	bool
)	O
{	O
lex_pos_ty	struct
pos	struct
;	O
pos	struct
.	O
file_name	pointer
=	O
logical_file_name	pointer
;	O
pos	struct
.	O
line_number	long
=	O
op	pointer
->	O
line_number_at_start	int
;	O
remember_a_message	function
(	O
mlp	pointer
,	O
NULL	O
,	O
string_of_object	function
(	O
op	pointer
)	O
,	O
false	int
,	O
null_context	struct
,	O
&	O
pos	struct
,	O
NULL	O
,	O
savable_comment	pointer
,	O
false	int
)	O
;	O
}	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
case	O
'#'	O
:	O
{	O
int	O
c	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
op	pointer
->	O
type	char
=	O
t_other	int
;	O
return	O
;	O
}	O
if	O
(	O
!	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
)	O
break	O
;	O
}	O
switch	O
(	O
c	int
)	O
{	O
case	O
'('	O
:	O
case	O
'"'	O
:	O
do_ungetc	function
(	O
c	int
)	O
;	O
case	O
'\''	O
:	O
case	O
':'	O
:	O
case	O
'.'	O
:	O
case	O
','	O
:	O
case	O
'A'	O
:	O
case	O
'a'	O
:	O
case	O
'C'	O
:	O
case	O
'c'	O
:	O
case	O
'P'	O
:	O
case	O
'p'	O
:	O
case	O
'S'	O
:	O
case	O
's'	O
:	O
{	O
struct	O
object	struct
inner	struct
;	O
read_object	function
(	O
&	O
inner	struct
,	O
null_context	struct
)	O
;	O
free_object	function
(	O
&	O
inner	struct
)	O
;	O
op	pointer
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
case	O
'|'	O
:	O
{	O
int	O
depth	int
=	O
0	int
;	O
int	O
c	int
;	O
comment_start	function
(	O
)	O
;	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'|'	O
)	O
{	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
if	O
(	O
depth	int
==	O
0	int
)	O
{	O
comment_line_end	function
(	O
0	int
)	O
;	O
break	O
;	O
}	O
depth	int
--	O
;	O
comment_add	function
(	O
'|'	O
)	O
;	O
comment_add	function
(	O
'#'	O
)	O
;	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
}	O
else	O
comment_add	function
(	O
'|'	O
)	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
comment_add	function
(	O
'#'	O
)	O
;	O
if	O
(	O
c	int
==	O
'|'	O
)	O
{	O
depth	int
++	O
;	O
comment_add	function
(	O
'|'	O
)	O
;	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	function
(	O
c	int
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
comment_line_end	function
(	O
1	int
)	O
;	O
comment_start	function
(	O
)	O
;	O
}	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
op	pointer
->	O
type	char
=	O
t_eof	int
;	O
return	O
;	O
}	O
last_comment_line	int
=	O
line_number	long
;	O
continue	O
;	O
}	O
case	O
'\\'	O
:	O
{	O
struct	O
token	struct
token	struct
;	O
struct	O
char_syntax	struct
first	pointer
;	O
first	pointer
.	O
ch	int
=	O
'\\'	O
;	O
first	pointer
.	O
scode	enum
=	O
syntax_single_esc	int
;	O
read_token	function
(	O
&	O
token	struct
,	O
&	O
first	pointer
)	O
;	O
free_token	function
(	O
&	O
token	struct
)	O
;	O
op	pointer
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
case	O
'B'	O
:	O
case	O
'b'	O
:	O
case	O
'O'	O
:	O
case	O
'o'	O
:	O
case	O
'X'	O
:	O
case	O
'x'	O
:	O
case	O
'R'	O
:	O
case	O
'r'	O
:	O
case	O
'*'	O
:	O
{	O
struct	O
token	struct
token	struct
;	O
read_token	function
(	O
&	O
token	struct
,	O
NULL	O
)	O
;	O
free_token	function
(	O
&	O
token	struct
)	O
;	O
op	pointer
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
case	O
'='	O
:	O
continue	O
;	O
case	O
'#'	O
:	O
op	pointer
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
case	O
'+'	O
:	O
case	O
'-'	O
:	O
{	O
struct	O
object	struct
inner	struct
;	O
read_object	function
(	O
&	O
inner	struct
,	O
null_context	struct
)	O
;	O
free_object	function
(	O
&	O
inner	struct
)	O
;	O
continue	O
;	O
}	O
default	O
:	O
op	pointer
->	O
type	char
=	O
t_other	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
abort	function
(	O
)	O
;	O
}	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
void	O
extract_lisp	function
(	O
FILE	struct
*	O
f	pointer
,	O
const	O
char	O
*	O
real_filename	pointer
,	O
const	O
char	O
*	O
logical_filename	pointer
,	O
flag_context_list_table_ty	struct
*	O
flag_table	pointer
,	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
0	int
]	O
->	O
messages	pointer
;	O
fp	pointer
=	O
f	pointer
;	O
real_file_name	pointer
=	O
real_filename	pointer
;	O
logical_file_name	pointer
=	O
xstrdup	function
(	O
logical_filename	pointer
)	O
;	O
line_number	long
=	O
1	int
;	O
last_comment_line	int
=	O
-	O
1	int
;	O
last_non_comment_line	int
=	O
-	O
1	int
;	O
flag_context_list_table	pointer
=	O
flag_table	pointer
;	O
init_keywords	function
(	O
)	O
;	O
do	O
{	O
struct	O
object	struct
toplevel_object	struct
;	O
read_object	function
(	O
&	O
toplevel_object	struct
,	O
null_context	struct
)	O
;	O
if	O
(	O
toplevel_object	struct
.	O
type	char
==	O
t_eof	int
)	O
break	O
;	O
free_object	function
(	O
&	O
toplevel_object	struct
)	O
;	O
}	O
while	O
(	O
!	O
feof	function
(	O
fp	pointer
)	O
)	O
;	O
fp	pointer
=	O
NULL	O
;	O
real_file_name	pointer
=	O
NULL	O
;	O
logical_file_name	pointer
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
}	O
