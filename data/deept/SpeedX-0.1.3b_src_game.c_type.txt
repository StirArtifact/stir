extern	O
World	O
*	O
world	pointer
;	O
extern	O
int	O
factor	short
;	O
extern	O
int	O
bpp	int
;	O
extern	O
void	O
load_sprites	function
(	O
int	O
*	O
,	O
int	O
*	O
)	O
;	O
extern	O
int	O
CompletionType	int
;	O
extern	O
int	O
drawing	int
;	O
extern	O
int	O
player	int
;	O
void	O
refresh	function
(	O
char	O
*	O
buffer	pointer
,	O
char	O
*	O
sky	pointer
,	O
int	O
inv_radius	int
,	O
int	O
view	int
)	O
{	O
int	O
j	int
;	O
static	O
int	O
boo	int
=	O
1	int
;	O
static	O
int	O
road_dx	int
;	O
static	O
int	O
road_dy	int
;	O
static	O
int	O
depart_dx	int
;	O
static	O
int	O
depart_dy	int
;	O
static	O
int	O
angle	array
[	O
2	int
]	O
=	O
{	O
256	int
,	O
256	int
}	O
;	O
if	O
(	O
boo	int
==	O
1	int
)	O
{	O
boo	int
=	O
0	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Sprites and Road Loading ..\n"	pointer
)	O
;	O
load_sprites	function
(	O
&	O
dx	int
,	O
&	O
dy	int
)	O
;	O
Read_PNG	function
(	O
&	O
depart	pointer
,	O
"./road/depart.png"	pointer
,	O
depth	int
,	O
&	O
depart_dx	int
,	O
&	O
depart_dy	int
)	O
;	O
Read_PNG	function
(	O
&	O
border	pointer
,	O
"./road/border.png"	pointer
,	O
depth	int
,	O
&	O
road_dx	int
,	O
&	O
road_dy	int
)	O
;	O
switch	O
(	O
Road_type	int
)	O
{	O
case	O
0	int
:	O
Read_PNG	function
(	O
&	O
road	pointer
,	O
"./road/road1.png"	pointer
,	O
depth	int
,	O
&	O
road_dx	int
,	O
&	O
road_dy	int
)	O
;	O
break	O
;	O
case	O
1	int
:	O
Read_PNG	function
(	O
&	O
road	pointer
,	O
"./road/road2.png"	pointer
,	O
depth	int
,	O
&	O
road_dx	int
,	O
&	O
road_dy	int
)	O
;	O
world	pointer
->	O
omega	O
[	O
0	int
]	O
--	O
;	O
world	pointer
->	O
omega	O
[	O
1	int
]	O
--	O
;	O
world	pointer
->	O
omega	O
[	O
2	int
]	O
--	O
;	O
world	pointer
->	O
vrmax	O
[	O
0	int
]	O
+=	O
5	int
;	O
world	pointer
->	O
vrmax	O
[	O
1	int
]	O
+=	O
5	int
;	O
world	pointer
->	O
vrmax	O
[	O
2	int
]	O
+=	O
5	int
;	O
break	O
;	O
case	O
2	int
:	O
Read_PNG	function
(	O
&	O
road	pointer
,	O
"./road/road3.png"	pointer
,	O
depth	int
,	O
&	O
road_dx	int
,	O
&	O
road_dy	int
)	O
;	O
dep_alea	int
=	O
1	int
;	O
world	pointer
->	O
accel	O
[	O
0	int
]	O
++	O
;	O
world	pointer
->	O
accel	O
[	O
1	int
]	O
++	O
;	O
world	pointer
->	O
accel	O
[	O
2	int
]	O
++	O
;	O
break	O
;	O
}	O
}	O
angle	array
[	O
view	int
]	O
+=	O
(	O
inv_radius	int
*	O
world	pointer
->	O
Sorting	O
[	O
view	int
]	O
.	O
yvit	int
>>	O
(	O
SKY_TURN	int
+	O
ACCEL	int
)	O
)	O
;	O
while	O
(	O
angle	array
[	O
view	int
]	O
<	O
0	int
)	O
{	O
angle	array
[	O
view	int
]	O
+=	O
3	int
*	O
WIDTH	int
;	O
}	O
while	O
(	O
angle	array
[	O
view	int
]	O
>=	O
3	int
*	O
WIDTH	int
)	O
{	O
angle	array
[	O
view	int
]	O
-=	O
3	int
*	O
WIDTH	int
;	O
}	O
{	O
char	O
*	O
_buffer	pointer
;	O
char	O
*	O
_sky	pointer
;	O
_buffer	pointer
=	O
buffer	pointer
;	O
_sky	pointer
=	O
sky	pointer
;	O
_sky	pointer
+=	O
angle	array
[	O
view	int
]	O
*	O
factor	short
;	O
{	O
int	O
derive	int
=	O
0	int
;	O
derive	int
=	O
(	O
world	pointer
->	O
Sorting	O
[	O
view	int
]	O
.	O
ypos	int
>>	O
6	int
)	O
;	O
derive	int
=	O
derive	int
%	O
(	O
64	int
*	O
LENGTH	int
)	O
;	O
derive	int
=	O
world	pointer
->	O
curve	O
[	O
derive	int
]	O
;	O
_sky	pointer
+=	O
6	int
*	O
(	O
HVISION	int
/	O
2	int
+	O
derive	int
)	O
*	O
factor	short
*	O
WIDTH	int
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
HEIGHT	int
-	O
HVISION	int
+	O
1	int
;	O
j	int
++	O
)	O
{	O
memcpy	O
(	O
(	O
char	O
*	O
)	O
_buffer	pointer
,	O
(	O
char	O
*	O
)	O
(	O
_sky	pointer
)	O
,	O
factor	short
*	O
WIDTH	int
)	O
;	O
_buffer	pointer
+=	O
factor	short
*	O
WIDTH	int
;	O
_sky	pointer
+=	O
6	int
*	O
factor	short
*	O
WIDTH	int
;	O
}	O
}	O
Draw_road	function
(	O
buffer	pointer
,	O
view	int
,	O
world	pointer
->	O
Sorting	O
[	O
view	int
]	O
.	O
xpos	int
>>	O
2	int
)	O
;	O
{	O
int	O
ii	int
,	O
jj	int
;	O
char	O
*	O
_im_	pointer
;	O
{	O
unsigned	O
int	O
color	int
;	O
unsigned	O
ofs1	int
,	O
ofs2	int
,	O
ofs3	int
,	O
ofs4	int
;	O
color	int
=	O
rgb	function
(	O
255	int
,	O
0	int
,	O
0	int
)	O
;	O
ofs1	int
=	O
factor	short
*	O
(	O
1	int
+	O
WIDTH	int
)	O
;	O
ofs2	int
=	O
ofs1	int
+	O
factor	short
*	O
WIDTH	int
;	O
ofs3	int
=	O
ofs2	int
+	O
factor	short
*	O
WIDTH	int
;	O
ofs4	int
=	O
ofs3	int
+	O
factor	short
*	O
WIDTH	int
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
(	O
world	pointer
->	O
Sorting	O
[	O
view	int
]	O
.	O
yvit	int
>>	O
(	O
ACCEL	int
)	O
)	O
+	O
20	int
;	O
ii	int
++	O
)	O
{	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs1	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs2	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs3	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs4	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
ofs1	int
+=	O
factor	short
;	O
ofs2	int
+=	O
factor	short
;	O
ofs3	int
+=	O
factor	short
;	O
ofs4	int
+=	O
factor	short
;	O
}	O
color	int
=	O
rgb	function
(	O
192	int
+	O
world	pointer
->	O
Sorting	O
[	O
view	int
]	O
.	O
turn	int
*	O
8	int
,	O
0	int
,	O
0	int
)	O
;	O
ofs1	int
=	O
factor	short
*	O
(	O
1	int
+	O
5	int
*	O
WIDTH	int
)	O
;	O
ofs2	int
=	O
ofs1	int
+	O
factor	short
*	O
WIDTH	int
;	O
ofs3	int
=	O
ofs2	int
+	O
factor	short
*	O
WIDTH	int
;	O
ofs4	int
=	O
ofs3	int
+	O
factor	short
*	O
WIDTH	int
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
(	O
world	pointer
->	O
Sorting	O
[	O
view	int
]	O
.	O
ypos	int
>>	O
10	int
)	O
%	O
(	O
64	int
*	O
LENGTH	int
)	O
;	O
ii	int
++	O
)	O
{	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs1	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs2	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs3	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs4	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
ofs1	int
+=	O
factor	short
;	O
ofs2	int
+=	O
factor	short
;	O
ofs3	int
+=	O
factor	short
;	O
ofs4	int
+=	O
factor	short
;	O
}	O
color	int
=	O
rgb	function
(	O
128	int
,	O
0	int
,	O
0	int
)	O
;	O
ofs1	int
=	O
factor	short
*	O
(	O
1	int
+	O
9	int
*	O
WIDTH	int
)	O
;	O
ofs2	int
=	O
ofs1	int
+	O
factor	short
*	O
WIDTH	int
;	O
ofs3	int
=	O
ofs2	int
+	O
factor	short
*	O
WIDTH	int
;	O
ofs4	int
=	O
ofs3	int
+	O
factor	short
*	O
WIDTH	int
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
(	O
world	pointer
->	O
Sorting	O
[	O
1	int
]	O
.	O
ypos	int
>>	O
10	int
)	O
%	O
(	O
64	int
*	O
LENGTH	int
)	O
;	O
ii	int
++	O
)	O
{	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs1	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs2	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs3	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
ofs4	int
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
ofs1	int
+=	O
factor	short
;	O
ofs2	int
+=	O
factor	short
;	O
ofs3	int
+=	O
factor	short
;	O
ofs4	int
+=	O
factor	short
;	O
}	O
}	O
_im_	pointer
=	O
number	int
[	O
(	O
world	pointer
->	O
Sorting	O
[	O
view	int
]	O
.	O
position	short
+	O
1	int
)	O
%	O
10	int
]	O
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
num_l	int
;	O
ii	int
++	O
)	O
{	O
for	O
(	O
jj	int
=	O
0	int
;	O
jj	int
<	O
num_v	int
;	O
jj	int
++	O
)	O
{	O
unsigned	O
int	O
color	int
=	O
0	int
;	O
unsigned	O
int	O
alpha	int
;	O
memcpy	O
(	O
&	O
color	int
,	O
&	O
_im_	pointer
[	O
factor	short
*	O
(	O
jj	int
+	O
ii	int
*	O
num_v	int
)	O
]	O
,	O
factor	short
)	O
;	O
alpha	int
=	O
grey	function
(	O
color	int
)	O
;	O
if	O
(	O
alpha	int
>	O
64	int
)	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
factor	short
*	O
(	O
jj	int
+	O
(	O
3	int
*	O
WIDTH	int
)	O
/	O
4	int
+	O
ii	int
*	O
WIDTH	int
)	O
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
}	O
}	O
if	O
(	O
world	pointer
->	O
Sorting	O
[	O
player	int
]	O
.	O
position	short
+	O
1	int
>=	O
10	int
)	O
{	O
_im_	pointer
=	O
number	int
[	O
(	O
world	pointer
->	O
Sorting	O
[	O
player	int
]	O
.	O
position	short
+	O
1	int
)	O
/	O
10	int
]	O
;	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
num_l	int
;	O
ii	int
++	O
)	O
{	O
for	O
(	O
jj	int
=	O
0	int
;	O
jj	int
<	O
num_v	int
;	O
jj	int
++	O
)	O
{	O
unsigned	O
int	O
color	int
=	O
0	int
;	O
unsigned	O
int	O
alpha	int
;	O
memcpy	O
(	O
&	O
color	int
,	O
&	O
_im_	pointer
[	O
factor	short
*	O
(	O
jj	int
+	O
ii	int
*	O
num_v	int
)	O
]	O
,	O
factor	short
)	O
;	O
alpha	int
=	O
grey	function
(	O
color	int
)	O
;	O
if	O
(	O
alpha	int
>	O
64	int
)	O
memcpy	O
(	O
&	O
buffer	pointer
[	O
factor	short
*	O
(	O
jj	int
+	O
WIDTH	int
/	O
2	int
+	O
WIDTH	int
/	O
10	int
+	O
ii	int
*	O
WIDTH	int
)	O
]	O
,	O
&	O
color	int
,	O
factor	short
)	O
;	O
}	O
}	O
}	O
}	O
}	O
int	O
event_x	function
(	O
XEvent	union
*	O
XEv	pointer
)	O
{	O
int	O
pressure	int
=	O
0	int
;	O
while	O
(	O
XPending	function
(	O
display	pointer
)	O
)	O
XNextEvent	function
(	O
display	pointer
,	O
XEv	pointer
)	O
;	O
pressure	int
=	O
1	int
;	O
return	O
pressure	int
;	O
}	O
void	O
aff	function
(	O
Window	long
w	long
)	O
{	O
if	O
(	O
xim	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
mit_shm	int
)	O
XShmPutImage	function
(	O
display	pointer
,	O
w	long
,	O
gc	pointer
,	O
xim	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
WIDTH	int
,	O
HEIGHT	int
,	O
True	int
)	O
;	O
else	O
XPutImage	function
(	O
display	pointer
,	O
w	long
,	O
gc	pointer
,	O
xim	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
WIDTH	int
,	O
HEIGHT	int
)	O
;	O
}	O
else	O
{	O
}	O
}	O
void	O
aff2	function
(	O
Window	long
w	long
)	O
{	O
int	O
i	int
,	O
j	int
;	O
int	O
tmp	int
,	O
tmp1	int
,	O
tmp2	int
,	O
tmp3	int
,	O
tmp4	int
;	O
tmp	int
=	O
0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
HEIGHT	int
;	O
j	int
++	O
)	O
{	O
tmp1	int
=	O
factor	short
*	O
(	O
j	int
<<	O
1	int
)	O
*	O
(	O
WIDTH	int
*	O
2	int
)	O
;	O
tmp2	int
=	O
tmp1	int
+	O
factor	short
;	O
tmp3	int
=	O
tmp1	int
+	O
(	O
factor	short
*	O
(	O
WIDTH	int
*	O
2	int
)	O
)	O
;	O
tmp4	int
=	O
tmp3	int
+	O
factor	short
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
WIDTH	int
;	O
i	int
++	O
)	O
{	O
S_memcpy	function
(	O
&	O
screen_buffer2	pointer
[	O
tmp1	int
]	O
,	O
&	O
screen_buffer	pointer
[	O
tmp	int
]	O
,	O
factor	short
)	O
;	O
S_memcpy	function
(	O
&	O
screen_buffer2	pointer
[	O
tmp2	int
]	O
,	O
&	O
screen_buffer	pointer
[	O
tmp	int
]	O
,	O
factor	short
)	O
;	O
S_memcpy	function
(	O
&	O
screen_buffer2	pointer
[	O
tmp3	int
]	O
,	O
&	O
screen_buffer	pointer
[	O
tmp	int
]	O
,	O
factor	short
)	O
;	O
S_memcpy	function
(	O
&	O
screen_buffer2	pointer
[	O
tmp4	int
]	O
,	O
&	O
screen_buffer	pointer
[	O
tmp	int
]	O
,	O
factor	short
)	O
;	O
tmp	int
+=	O
factor	short
;	O
tmp1	int
+=	O
2	int
*	O
factor	short
;	O
tmp2	int
+=	O
2	int
*	O
factor	short
;	O
tmp3	int
+=	O
2	int
*	O
factor	short
;	O
tmp4	int
+=	O
2	int
*	O
factor	short
;	O
}	O
}	O
if	O
(	O
1	int
)	O
{	O
if	O
(	O
xim	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
mit_shm	int
)	O
{	O
XShmPutImage	function
(	O
display	pointer
,	O
w	long
,	O
gc	pointer
,	O
xim	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
WIDTH	int
*	O
2	int
,	O
HEIGHT	int
*	O
2	int
,	O
True	int
)	O
;	O
}	O
else	O
XPutImage	function
(	O
display	pointer
,	O
w	long
,	O
gc	pointer
,	O
xim	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
WIDTH	int
*	O
2	int
,	O
HEIGHT	int
*	O
2	int
)	O
;	O
}	O
}	O
}	O
void	O
liberation	function
(	O
void	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
10	int
;	O
i	int
++	O
)	O
free	function
(	O
number	int
[	O
i	int
]	O
)	O
;	O
}	O
