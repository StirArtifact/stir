static	O
void	O
mpn_bc_sqrmod_bnm1	function
(	O
mp_ptr	pointer
rp	pointer
,	O
mp_srcptr	pointer
ap	pointer
,	O
mp_size_t	long
rn	long
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_limb_t	long
cy	long
;	O
ASSERT	O
(	O
0	int
<	O
rn	long
)	O
;	O
mpn_sqr	O
(	O
tp	pointer
,	O
ap	pointer
,	O
rn	long
)	O
;	O
cy	long
=	O
mpn_add_n	O
(	O
rp	pointer
,	O
tp	pointer
,	O
tp	pointer
+	O
rn	long
,	O
rn	long
)	O
;	O
MPN_INCR_U	O
(	O
rp	pointer
,	O
rn	long
,	O
cy	long
)	O
;	O
}	O
static	O
void	O
mpn_bc_sqrmod_bnp1	function
(	O
mp_ptr	pointer
rp	pointer
,	O
mp_srcptr	pointer
ap	pointer
,	O
mp_size_t	long
rn	long
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_limb_t	long
cy	long
;	O
ASSERT	O
(	O
0	int
<	O
rn	long
)	O
;	O
mpn_sqr	O
(	O
tp	pointer
,	O
ap	pointer
,	O
rn	long
+	O
1	int
)	O
;	O
ASSERT	O
(	O
tp	pointer
[	O
2	int
*	O
rn	long
+	O
1	int
]	O
==	O
0	int
)	O
;	O
ASSERT	O
(	O
tp	pointer
[	O
2	int
*	O
rn	long
]	O
<	O
GMP_NUMB_MAX	O
)	O
;	O
cy	long
=	O
tp	pointer
[	O
2	int
*	O
rn	long
]	O
+	O
mpn_sub_n	O
(	O
rp	pointer
,	O
tp	pointer
,	O
tp	pointer
+	O
rn	long
,	O
rn	long
)	O
;	O
rp	pointer
[	O
rn	long
]	O
=	O
0	int
;	O
MPN_INCR_U	O
(	O
rp	pointer
,	O
rn	long
+	O
1	int
,	O
cy	long
)	O
;	O
}	O
void	O
mpn_sqrmod_bnm1	O
(	O
mp_ptr	pointer
rp	pointer
,	O
mp_size_t	long
rn	long
,	O
mp_srcptr	pointer
ap	pointer
,	O
mp_size_t	long
an	long
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
ASSERT	O
(	O
0	int
<	O
an	long
)	O
;	O
ASSERT	O
(	O
an	long
<=	O
rn	long
)	O
;	O
if	O
(	O
(	O
rn	long
&	O
1	int
)	O
!=	O
0	int
||	O
BELOW_THRESHOLD	O
(	O
rn	long
,	O
SQRMOD_BNM1_THRESHOLD	int
)	O
)	O
{	O
if	O
(	O
UNLIKELY	O
(	O
an	long
<	O
rn	long
)	O
)	O
{	O
if	O
(	O
UNLIKELY	O
(	O
2	int
*	O
an	long
<=	O
rn	long
)	O
)	O
{	O
mpn_sqr	O
(	O
rp	pointer
,	O
ap	pointer
,	O
an	long
)	O
;	O
}	O
else	O
{	O
mp_limb_t	long
cy	long
;	O
mpn_sqr	O
(	O
tp	pointer
,	O
ap	pointer
,	O
an	long
)	O
;	O
cy	long
=	O
mpn_add	O
(	O
rp	pointer
,	O
tp	pointer
,	O
rn	long
,	O
tp	pointer
+	O
rn	long
,	O
2	int
*	O
an	long
-	O
rn	long
)	O
;	O
MPN_INCR_U	O
(	O
rp	pointer
,	O
rn	long
,	O
cy	long
)	O
;	O
}	O
}	O
else	O
mpn_bc_sqrmod_bnm1	function
(	O
rp	pointer
,	O
ap	pointer
,	O
rn	long
,	O
tp	pointer
)	O
;	O
}	O
else	O
{	O
mp_size_t	long
n	long
;	O
mp_limb_t	long
cy	long
;	O
mp_limb_t	long
hi	long
;	O
n	long
=	O
rn	long
>>	O
1	int
;	O
ASSERT	O
(	O
2	int
*	O
an	long
>	O
n	long
)	O
;	O
{	O
mp_srcptr	pointer
am1	pointer
;	O
mp_size_t	long
anm	long
;	O
mp_ptr	pointer
so	pointer
;	O
if	O
(	O
LIKELY	O
(	O
an	long
>	O
n	long
)	O
)	O
{	O
so	pointer
=	O
xp	O
+	O
n	long
;	O
am1	pointer
=	O
xp	O
;	O
cy	long
=	O
mpn_add	O
(	O
xp	O
,	O
a0	O
,	O
n	long
,	O
a1	O
,	O
an	long
-	O
n	long
)	O
;	O
MPN_INCR_U	O
(	O
xp	O
,	O
n	long
,	O
cy	long
)	O
;	O
anm	long
=	O
n	long
;	O
}	O
else	O
{	O
so	pointer
=	O
xp	O
;	O
am1	pointer
=	O
a0	O
;	O
anm	long
=	O
an	long
;	O
}	O
mpn_sqrmod_bnm1	O
(	O
rp	pointer
,	O
n	long
,	O
am1	pointer
,	O
anm	long
,	O
so	pointer
)	O
;	O
}	O
{	O
int	O
k	int
;	O
mp_srcptr	pointer
ap1	pointer
;	O
mp_size_t	long
anp	long
;	O
if	O
(	O
LIKELY	O
(	O
an	long
>	O
n	long
)	O
)	O
{	O
ap1	pointer
=	O
sp1	O
;	O
cy	long
=	O
mpn_sub	O
(	O
sp1	O
,	O
a0	O
,	O
n	long
,	O
a1	O
,	O
an	long
-	O
n	long
)	O
;	O
sp1	O
[	O
n	long
]	O
=	O
0	int
;	O
MPN_INCR_U	O
(	O
sp1	O
,	O
n	long
+	O
1	int
,	O
cy	long
)	O
;	O
anp	long
=	O
n	long
+	O
ap1	pointer
[	O
n	long
]	O
;	O
}	O
else	O
{	O
ap1	pointer
=	O
a0	O
;	O
anp	long
=	O
an	long
;	O
}	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
MUL_FFT_MODF_THRESHOLD	int
)	O
)	O
k	int
=	O
0	int
;	O
else	O
{	O
int	O
mask	int
;	O
k	int
=	O
mpn_fft_best_k	O
(	O
n	long
,	O
1	int
)	O
;	O
mask	int
=	O
(	O
1	int
<<	O
k	int
)	O
-	O
1	int
;	O
while	O
(	O
n	long
&	O
mask	int
)	O
{	O
k	int
--	O
;	O
mask	int
>>=	O
1	int
;	O
}	O
;	O
}	O
if	O
(	O
k	int
>=	O
FFT_FIRST_K	int
)	O
xp	O
[	O
n	long
]	O
=	O
mpn_mul_fft	O
(	O
xp	O
,	O
n	long
,	O
ap1	pointer
,	O
anp	long
,	O
ap1	pointer
,	O
anp	long
,	O
k	int
)	O
;	O
else	O
if	O
(	O
UNLIKELY	O
(	O
ap1	pointer
==	O
a0	O
)	O
)	O
{	O
ASSERT	O
(	O
anp	long
<=	O
n	long
)	O
;	O
ASSERT	O
(	O
2	int
*	O
anp	long
>	O
n	long
)	O
;	O
mpn_sqr	O
(	O
xp	O
,	O
a0	O
,	O
an	long
)	O
;	O
anp	long
=	O
2	int
*	O
an	long
-	O
n	long
;	O
cy	long
=	O
mpn_sub	O
(	O
xp	O
,	O
xp	O
,	O
n	long
,	O
xp	O
+	O
n	long
,	O
anp	long
)	O
;	O
xp	O
[	O
n	long
]	O
=	O
0	int
;	O
MPN_INCR_U	O
(	O
xp	O
,	O
n	long
+	O
1	int
,	O
cy	long
)	O
;	O
}	O
else	O
mpn_bc_sqrmod_bnp1	function
(	O
xp	O
,	O
ap1	pointer
,	O
n	long
,	O
xp	O
)	O
;	O
}	O
cy	long
=	O
mpn_rsh1add_nc	O
(	O
rp	pointer
,	O
rp	pointer
,	O
xp	O
,	O
n	long
,	O
xp	O
[	O
n	long
]	O
)	O
;	O
hi	long
=	O
cy	long
<<	O
(	O
GMP_NUMB_BITS	O
-	O
1	int
)	O
;	O
cy	long
=	O
0	int
;	O
add_ssaaaa	O
(	O
cy	long
,	O
rp	pointer
[	O
n	long
-	O
1	int
]	O
,	O
cy	long
,	O
rp	pointer
[	O
n	long
-	O
1	int
]	O
,	O
0	int
,	O
hi	long
)	O
;	O
ASSERT	O
(	O
cy	long
<=	O
1	int
)	O
;	O
ASSERT	O
(	O
(	O
cy	long
==	O
0	int
)	O
||	O
(	O
(	O
rp	pointer
[	O
n	long
-	O
1	int
]	O
&	O
GMP_NUMB_HIGHBIT	O
)	O
==	O
0	int
)	O
)	O
;	O
MPN_INCR_U	O
(	O
rp	pointer
,	O
n	long
,	O
cy	long
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
2	int
*	O
an	long
<	O
rn	long
)	O
)	O
{	O
cy	long
=	O
mpn_sub_n	O
(	O
rp	pointer
+	O
n	long
,	O
rp	pointer
,	O
xp	O
,	O
2	int
*	O
an	long
-	O
n	long
)	O
;	O
cy	long
=	O
xp	O
[	O
n	long
]	O
+	O
mpn_sub_nc	O
(	O
xp	O
+	O
2	int
*	O
an	long
-	O
n	long
,	O
rp	pointer
+	O
2	int
*	O
an	long
-	O
n	long
,	O
xp	O
+	O
2	int
*	O
an	long
-	O
n	long
,	O
rn	long
-	O
2	int
*	O
an	long
,	O
cy	long
)	O
;	O
ASSERT	O
(	O
mpn_zero_p	function
(	O
xp	O
+	O
2	int
*	O
an	long
-	O
n	long
+	O
1	int
,	O
rn	long
-	O
1	int
-	O
2	int
*	O
an	long
)	O
)	O
;	O
cy	long
=	O
mpn_sub_1	O
(	O
rp	pointer
,	O
rp	pointer
,	O
2	int
*	O
an	long
,	O
cy	long
)	O
;	O
ASSERT	O
(	O
cy	long
==	O
(	O
xp	O
+	O
2	int
*	O
an	long
-	O
n	long
)	O
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
cy	long
=	O
xp	O
[	O
n	long
]	O
+	O
mpn_sub_n	O
(	O
rp	pointer
+	O
n	long
,	O
rp	pointer
,	O
xp	O
,	O
n	long
)	O
;	O
MPN_DECR_U	O
(	O
rp	pointer
,	O
2	int
*	O
n	long
,	O
cy	long
)	O
;	O
}	O
}	O
}	O
mp_size_t	long
mpn_sqrmod_bnm1_next_size	O
(	O
mp_size_t	long
n	long
)	O
{	O
mp_size_t	long
nh	long
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
SQRMOD_BNM1_THRESHOLD	int
)	O
)	O
return	O
n	long
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
4	int
*	O
(	O
SQRMOD_BNM1_THRESHOLD	int
-	O
1	int
)	O
+	O
1	int
)	O
)	O
return	O
(	O
n	long
+	O
(	O
2	int
-	O
1	int
)	O
)	O
&	O
(	O
-	O
2	int
)	O
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
8	int
*	O
(	O
SQRMOD_BNM1_THRESHOLD	int
-	O
1	int
)	O
+	O
1	int
)	O
)	O
return	O
(	O
n	long
+	O
(	O
4	int
-	O
1	int
)	O
)	O
&	O
(	O
-	O
4	int
)	O
;	O
nh	long
=	O
(	O
n	long
+	O
1	int
)	O
>>	O
1	int
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
nh	long
,	O
SQR_FFT_MODF_THRESHOLD	int
)	O
)	O
return	O
(	O
n	long
+	O
(	O
8	int
-	O
1	int
)	O
)	O
&	O
(	O
-	O
8	int
)	O
;	O
return	O
2	int
*	O
mpn_fft_next_size	O
(	O
nh	long
,	O
mpn_fft_best_k	O
(	O
nh	long
,	O
1	int
)	O
)	O
;	O
}	O
