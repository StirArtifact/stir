int	O
eight	int
=	O
0	int
,	O
rem	int
;	O
int	O
dflag	int
=	O
0	int
;	O
int	O
noescape	int
;	O
char	O
*	O
host	pointer
=	O
NULL	O
;	O
char	O
*	O
user	pointer
=	O
NULL	O
;	O
unsigned	O
char	O
escapechar	char
=	O
'~'	O
;	O
struct	O
winsize	struct
winsize	struct
;	O
void	O
catch_child	function
(	O
int	O
)	O
;	O
void	O
copytochild	function
(	O
int	O
)	O
;	O
void	O
doit	function
(	O
sigset_t	struct
*	O
)	O
;	O
void	O
done	function
(	O
int	O
)	O
;	O
void	O
echo	function
(	O
char	O
)	O
;	O
u_int	int
getescape	function
(	O
char	O
*	O
)	O
;	O
void	O
lostpeer	function
(	O
int	O
)	O
;	O
void	O
mode	function
(	O
int	O
)	O
;	O
void	O
oob	function
(	O
int	O
)	O
;	O
int	O
reader	function
(	O
sigset_t	struct
*	O
)	O
;	O
void	O
sendwindow	function
(	O
void	O
)	O
;	O
void	O
setsignal	function
(	O
int	O
)	O
;	O
int	O
speed	function
(	O
int	O
)	O
;	O
unsigned	O
int	O
speed_translate	function
(	O
unsigned	O
int	O
)	O
;	O
void	O
sigwinch	function
(	O
int	O
)	O
;	O
void	O
stop	function
(	O
char	O
)	O
;	O
void	O
writer	function
(	O
void	O
)	O
;	O
void	O
writeroob	function
(	O
int	O
)	O
;	O
extern	O
sighandler_t	pointer
setsig	function
(	O
int	O
,	O
sighandler_t	pointer
)	O
;	O
const	O
char	O
args_doc	pointer
[	O
]	O
=	O
"HOST"	pointer
;	O
const	O
char	O
doc	pointer
[	O
]	O
=	O
"Starts a terminal session on a remote host."	pointer
;	O
static	O
struct	O
argp_option	struct
argp_options	array
[	O
]	O
=	O
{	O
{	O
"8-bit"	pointer
,	O
'8'	O
,	O
NULL	O
,	O
0	int
,	O
"allows an eight-bit input data path at all times"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"debug"	pointer
,	O
'd'	O
,	O
NULL	O
,	O
0	int
,	O
"set the SO_DEBUG option"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"escape"	pointer
,	O
'e'	O
,	O
"CHAR"	pointer
,	O
0	int
,	O
"allows user specification of the escape "	pointer
"character, which is ``~'' by default"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"no-escape"	pointer
,	O
'E'	O
,	O
NULL	O
,	O
0	int
,	O
"stops any character from being recognized as "	pointer
"an escape character"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"user"	pointer
,	O
'l'	O
,	O
"USER"	pointer
,	O
0	int
,	O
"run as USER on the remote system"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'8'	O
:	O
eight	int
=	O
1	int
;	O
break	O
;	O
case	O
'd'	O
:	O
dflag	int
=	O
1	int
;	O
break	O
;	O
case	O
'e'	O
:	O
noescape	int
=	O
0	int
;	O
escapechar	char
=	O
getescape	function
(	O
arg	pointer
)	O
;	O
if	O
(	O
escapechar	char
==	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"illegal option value -- e"	pointer
)	O
;	O
break	O
;	O
case	O
'E'	O
:	O
noescape	int
=	O
1	int
;	O
break	O
;	O
case	O
'l'	O
:	O
user	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
ARGP_KEY_NO_ARGS	int
:	O
if	O
(	O
host	pointer
==	O
NULL	O
)	O
argp_error	function
(	O
state	pointer
,	O
"missing host operand"	pointer
)	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
argp_options	array
,	O
parse_opt	function
,	O
args_doc	pointer
,	O
doc	pointer
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
struct	O
passwd	struct
*	O
pw	pointer
;	O
struct	O
servent	struct
*	O
sp	pointer
;	O
sigset_t	struct
smask	struct
,	O
osmask	struct
;	O
uid_t	int
uid	int
;	O
int	O
index	function
;	O
int	O
term_speed	int
;	O
char	O
term	array
[	O
1024	int
]	O
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
{	O
char	O
*	O
p	pointer
=	O
strrchr	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
++	O
p	pointer
;	O
else	O
p	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
if	O
(	O
strcmp	function
(	O
p	pointer
,	O
"rlogin"	pointer
)	O
!=	O
0	int
)	O
host	pointer
=	O
p	pointer
;	O
}	O
iu_argp_init	O
(	O
"rlogin"	pointer
,	O
default_program_authors	array
)	O
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
&	O
index	function
,	O
NULL	O
)	O
;	O
if	O
(	O
index	function
<	O
argc	int
)	O
host	pointer
=	O
argv	pointer
[	O
index	function
++	O
]	O
;	O
argc	int
-=	O
index	function
;	O
if	O
(	O
geteuid	function
(	O
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"must be setuid root.\n"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
pw	pointer
=	O
getpwuid	function
(	O
uid	int
=	O
getuid	function
(	O
)	O
)	O
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown user id."	pointer
)	O
;	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
host	pointer
,	O
'@'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
*	O
p	pointer
=	O
'\0'	O
;	O
if	O
(	O
!	O
user	pointer
&&	O
p	pointer
>	O
host	pointer
)	O
user	pointer
=	O
host	pointer
;	O
host	pointer
=	O
p	pointer
+	O
1	int
;	O
if	O
(	O
*	O
host	pointer
==	O
'\0'	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"invalid host operand"	pointer
)	O
;	O
}	O
}	O
sp	pointer
=	O
NULL	O
;	O
if	O
(	O
sp	pointer
==	O
NULL	O
)	O
sp	pointer
=	O
getservbyname	function
(	O
"login"	pointer
,	O
"tcp"	pointer
)	O
;	O
if	O
(	O
sp	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"login/tcp: unknown service."	pointer
)	O
;	O
term_speed	int
=	O
speed	function
(	O
0	int
)	O
;	O
if	O
(	O
term_speed	int
==	O
SPEED_NOTATTY	O
)	O
{	O
char	O
*	O
p	pointer
;	O
snprintf	function
(	O
term	array
,	O
sizeof	O
term	array
,	O
"%s"	pointer
,	O
(	O
(	O
p	pointer
=	O
getenv	function
(	O
"TERM"	pointer
)	O
)	O
?	O
p	pointer
:	O
"network"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
char	O
*	O
p	pointer
;	O
snprintf	function
(	O
term	array
,	O
sizeof	O
term	array
,	O
"%s/%d"	pointer
,	O
(	O
(	O
p	pointer
=	O
getenv	function
(	O
"TERM"	pointer
)	O
)	O
?	O
p	pointer
:	O
"network"	pointer
)	O
,	O
term_speed	int
)	O
;	O
}	O
get_window_size	O
(	O
0	int
,	O
&	O
winsize	struct
)	O
;	O
setsig	function
(	O
SIGPIPE	int
,	O
lostpeer	function
)	O
;	O
sigemptyset	function
(	O
&	O
smask	struct
)	O
;	O
sigemptyset	function
(	O
&	O
osmask	struct
)	O
;	O
sigaddset	function
(	O
&	O
smask	struct
,	O
SIGURG	int
)	O
;	O
sigaddset	function
(	O
&	O
smask	struct
,	O
SIGUSR1	int
)	O
;	O
sigprocmask	function
(	O
SIG_SETMASK	int
,	O
&	O
smask	struct
,	O
&	O
osmask	struct
)	O
;	O
setsig	function
(	O
SIGURG	int
,	O
copytochild	function
)	O
;	O
setsig	function
(	O
SIGUSR1	int
,	O
writeroob	function
)	O
;	O
if	O
(	O
!	O
user	pointer
)	O
user	pointer
=	O
pw	pointer
->	O
pw_name	pointer
;	O
rem	int
=	O
rcmd	function
(	O
&	O
host	pointer
,	O
sp	pointer
->	O
s_port	int
,	O
pw	pointer
->	O
pw_name	pointer
,	O
user	pointer
,	O
term	array
,	O
0	int
)	O
;	O
if	O
(	O
rem	int
<	O
0	int
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
{	O
int	O
one	int
=	O
1	int
;	O
if	O
(	O
dflag	int
&&	O
setsockopt	function
(	O
rem	int
,	O
SOL_SOCKET	int
,	O
SO_DEBUG	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
,	O
sizeof	O
one	int
)	O
<	O
0	int
)	O
error	function
(	O
0	int
,	O
errno	O
,	O
"setsockopt DEBUG (ignored)"	pointer
)	O
;	O
}	O
{	O
int	O
one	int
=	O
IPTOS_LOWDELAY	int
;	O
if	O
(	O
setsockopt	function
(	O
rem	int
,	O
IPPROTO_IP	int
,	O
IP_TOS	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
,	O
sizeof	O
(	O
int	O
)	O
)	O
<	O
0	int
)	O
error	function
(	O
0	int
,	O
errno	O
,	O
"setsockopt TOS (ignored)"	pointer
)	O
;	O
}	O
seteuid	function
(	O
uid	int
)	O
;	O
setuid	function
(	O
uid	int
)	O
;	O
doit	function
(	O
&	O
osmask	struct
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
termspeeds	struct
{	O
unsigned	O
int	O
speed	function
;	O
unsigned	O
int	O
sym	int
;	O
}	O
termspeeds	struct
[	O
]	O
=	O
{	O
{	O
0	int
,	O
B0	int
}	O
,	O
{	O
50	int
,	O
B50	int
}	O
,	O
{	O
75	int
,	O
B75	int
}	O
,	O
{	O
110	int
,	O
B110	int
}	O
,	O
{	O
134	int
,	O
B134	int
}	O
,	O
{	O
150	int
,	O
B150	int
}	O
,	O
{	O
200	int
,	O
B200	int
}	O
,	O
{	O
300	int
,	O
B300	int
}	O
,	O
{	O
600	int
,	O
B600	int
}	O
,	O
{	O
1200	int
,	O
B1200	int
}	O
,	O
{	O
1800	int
,	O
B1800	int
}	O
,	O
{	O
2400	int
,	O
B2400	int
}	O
,	O
{	O
4800	int
,	O
B4800	int
}	O
,	O
{	O
7200	int
,	O
B7200	O
}	O
,	O
{	O
9600	int
,	O
B9600	int
}	O
,	O
{	O
14400	int
,	O
B14400	O
}	O
,	O
{	O
19200	int
,	O
B19200	int
}	O
,	O
{	O
28800	int
,	O
B28800	O
}	O
,	O
{	O
38400	int
,	O
B38400	int
}	O
,	O
{	O
57600	int
,	O
B57600	int
}	O
,	O
{	O
115200	int
,	O
B115200	int
}	O
,	O
{	O
230400	int
,	O
B230400	int
}	O
,	O
{	O
-	O
1	int
,	O
B230400	int
}	O
}	O
;	O
unsigned	O
int	O
speed_translate	function
(	O
unsigned	O
int	O
sym	int
)	O
{	O
unsigned	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
sizeof	O
(	O
termspeeds	struct
)	O
/	O
sizeof	O
(	O
*	O
termspeeds	struct
)	O
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
termspeeds	struct
[	O
i	int
]	O
.	O
sym	int
==	O
sym	int
)	O
return	O
termspeeds	struct
[	O
i	int
]	O
.	O
speed	function
;	O
}	O
return	O
0	int
;	O
}	O
int	O
speed	function
(	O
int	O
fd	int
)	O
{	O
struct	O
termios	struct
tt	struct
;	O
if	O
(	O
tcgetattr	function
(	O
fd	int
,	O
&	O
tt	struct
)	O
==	O
0	int
)	O
{	O
unsigned	O
int	O
sp	pointer
=	O
cfgetispeed	function
(	O
&	O
tt	struct
)	O
;	O
return	O
speed_translate	function
(	O
sp	pointer
)	O
;	O
}	O
return	O
SPEED_NOTATTY	O
;	O
}	O
pid_t	int
child	int
;	O
struct	O
termios	struct
deftt	struct
;	O
struct	O
termios	struct
ixon_state	struct
;	O
struct	O
termios	struct
nott	struct
;	O
void	O
doit	function
(	O
sigset_t	struct
*	O
smask	struct
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NCCS	int
;	O
i	int
++	O
)	O
nott	struct
.	O
c_cc	array
[	O
i	int
]	O
=	O
_POSIX_VDISABLE	char
;	O
tcgetattr	function
(	O
0	int
,	O
&	O
deftt	struct
)	O
;	O
nott	struct
.	O
c_cc	array
[	O
VSTART	int
]	O
=	O
deftt	struct
.	O
c_cc	array
[	O
VSTART	int
]	O
;	O
nott	struct
.	O
c_cc	array
[	O
VSTOP	int
]	O
=	O
deftt	struct
.	O
c_cc	array
[	O
VSTOP	int
]	O
;	O
setsig	function
(	O
SIGINT	int
,	O
SIG_IGN	O
)	O
;	O
setsignal	function
(	O
SIGHUP	int
)	O
;	O
setsignal	function
(	O
SIGQUIT	int
)	O
;	O
child	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
child	int
==	O
-	O
1	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"fork"	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
child	int
==	O
0	int
)	O
{	O
mode	function
(	O
1	int
)	O
;	O
if	O
(	O
reader	function
(	O
smask	struct
)	O
==	O
0	int
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
"Connection to %s closed normally.\r"	pointer
,	O
host	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
sleep	function
(	O
1	int
)	O
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"\007Connection to %s closed with error.\r"	pointer
,	O
host	pointer
)	O
;	O
}	O
sigprocmask	function
(	O
SIG_SETMASK	int
,	O
smask	struct
,	O
(	O
sigset_t	struct
*	O
)	O
0	int
)	O
;	O
setsig	function
(	O
SIGCHLD	int
,	O
catch_child	function
)	O
;	O
writer	function
(	O
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
"Connection to %s aborted.\r"	pointer
,	O
host	pointer
)	O
;	O
done	function
(	O
0	int
)	O
;	O
}	O
void	O
setsignal	function
(	O
int	O
sig	int
)	O
{	O
sighandler_t	pointer
handler	pointer
;	O
sigset_t	struct
sigs	struct
,	O
osigs	struct
;	O
sigemptyset	function
(	O
&	O
sigs	struct
)	O
;	O
sigemptyset	function
(	O
&	O
osigs	struct
)	O
;	O
sigaddset	function
(	O
&	O
sigs	struct
,	O
sig	int
)	O
;	O
sigprocmask	function
(	O
SIG_BLOCK	int
,	O
&	O
sigs	struct
,	O
&	O
osigs	struct
)	O
;	O
handler	pointer
=	O
setsig	function
(	O
sig	int
,	O
exit	function
)	O
;	O
if	O
(	O
handler	pointer
==	O
SIG_IGN	O
)	O
setsig	function
(	O
sig	int
,	O
handler	pointer
)	O
;	O
sigprocmask	function
(	O
SIG_SETMASK	int
,	O
&	O
osigs	struct
,	O
(	O
sigset_t	struct
*	O
)	O
0	int
)	O
;	O
}	O
void	O
done	function
(	O
int	O
status	int
)	O
{	O
pid_t	int
w	int
;	O
int	O
wstatus	int
;	O
mode	function
(	O
0	int
)	O
;	O
if	O
(	O
child	int
>	O
0	int
)	O
{	O
setsig	function
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
;	O
if	O
(	O
kill	function
(	O
child	int
,	O
SIGKILL	int
)	O
>=	O
0	int
)	O
while	O
(	O
(	O
w	int
=	O
waitpid	function
(	O
-	O
1	int
,	O
&	O
wstatus	int
,	O
WNOHANG	int
)	O
)	O
>	O
0	int
&&	O
w	int
!=	O
child	int
)	O
continue	O
;	O
}	O
exit	function
(	O
status	int
)	O
;	O
}	O
int	O
dosigwinch	int
;	O
void	O
writeroob	function
(	O
int	O
signo	int
_GL_UNUSED_PARAMETER	O
)	O
{	O
if	O
(	O
dosigwinch	int
==	O
0	int
)	O
{	O
sendwindow	function
(	O
)	O
;	O
setsig	function
(	O
SIGWINCH	int
,	O
sigwinch	function
)	O
;	O
}	O
dosigwinch	int
=	O
1	int
;	O
}	O
void	O
catch_child	function
(	O
int	O
signo	int
_GL_UNUSED_PARAMETER	O
)	O
{	O
int	O
status	int
;	O
pid_t	int
pid	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
pid	int
=	O
waitpid	function
(	O
-	O
1	int
,	O
&	O
status	int
,	O
WNOHANG	int
|	O
WUNTRACED	int
)	O
;	O
if	O
(	O
pid	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
pid	int
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
if	O
(	O
pid	int
<	O
0	int
||	O
(	O
pid	int
==	O
child	int
&&	O
!	O
WIFSTOPPED	O
(	O
status	int
)	O
)	O
)	O
done	function
(	O
WEXITSTATUS	O
(	O
status	int
)	O
|	O
WTERMSIG	O
(	O
status	int
)	O
)	O
;	O
}	O
}	O
void	O
writer	function
(	O
void	O
)	O
{	O
register	O
int	O
bol	int
,	O
local	int
,	O
n	int
;	O
char	O
c	char
;	O
bol	int
=	O
1	int
;	O
local	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
n	int
=	O
read	pointer
(	O
STDIN_FILENO	int
,	O
&	O
c	char
,	O
1	int
)	O
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
{	O
if	O
(	O
n	int
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
break	O
;	O
}	O
if	O
(	O
bol	int
)	O
{	O
bol	int
=	O
0	int
;	O
if	O
(	O
!	O
noescape	int
&&	O
c	char
==	O
escapechar	char
)	O
{	O
local	int
=	O
1	int
;	O
continue	O
;	O
}	O
}	O
else	O
if	O
(	O
local	int
)	O
{	O
local	int
=	O
0	int
;	O
if	O
(	O
c	char
==	O
'.'	O
||	O
c	char
==	O
deftt	struct
.	O
c_cc	array
[	O
VEOF	int
]	O
)	O
{	O
echo	function
(	O
c	char
)	O
;	O
break	O
;	O
}	O
if	O
(	O
c	char
==	O
deftt	struct
.	O
c_cc	array
[	O
VSUSP	int
]	O
)	O
{	O
bol	int
=	O
1	int
;	O
echo	function
(	O
c	char
)	O
;	O
stop	function
(	O
c	char
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
c	char
!=	O
escapechar	char
)	O
write	pointer
(	O
rem	int
,	O
&	O
escapechar	char
,	O
1	int
)	O
;	O
}	O
if	O
(	O
write	pointer
(	O
rem	int
,	O
&	O
c	char
,	O
1	int
)	O
==	O
0	int
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
"line gone"	pointer
)	O
;	O
break	O
;	O
}	O
bol	int
=	O
c	char
==	O
deftt	struct
.	O
c_cc	array
[	O
VKILL	int
]	O
||	O
c	char
==	O
deftt	struct
.	O
c_cc	array
[	O
VEOF	int
]	O
||	O
c	char
==	O
deftt	struct
.	O
c_cc	array
[	O
VINTR	int
]	O
||	O
c	char
==	O
deftt	struct
.	O
c_cc	array
[	O
VSUSP	int
]	O
||	O
c	char
==	O
'\r'	O
||	O
c	char
==	O
'\n'	O
;	O
}	O
}	O
void	O
echo	function
(	O
register	O
char	O
c	char
)	O
{	O
register	O
char	O
*	O
p	pointer
;	O
char	O
buf	array
[	O
8	int
]	O
;	O
p	pointer
=	O
buf	array
;	O
c	char
&=	O
0177	int
;	O
*	O
p	pointer
++	O
=	O
escapechar	char
;	O
if	O
(	O
c	char
<	O
' '	O
)	O
{	O
*	O
p	pointer
++	O
=	O
'^'	O
;	O
*	O
p	pointer
++	O
=	O
c	char
+	O
'@'	O
;	O
}	O
else	O
if	O
(	O
c	char
==	O
0177	int
)	O
{	O
*	O
p	pointer
++	O
=	O
'^'	O
;	O
*	O
p	pointer
++	O
=	O
'?'	O
;	O
}	O
else	O
*	O
p	pointer
++	O
=	O
c	char
;	O
*	O
p	pointer
++	O
=	O
'\r'	O
;	O
*	O
p	pointer
++	O
=	O
'\n'	O
;	O
write	pointer
(	O
STDOUT_FILENO	int
,	O
buf	array
,	O
p	pointer
-	O
buf	array
)	O
;	O
}	O
void	O
stop	function
(	O
char	O
cmdc	char
)	O
{	O
mode	function
(	O
0	int
)	O
;	O
setsig	function
(	O
SIGCHLD	int
,	O
SIG_IGN	O
)	O
;	O
kill	function
(	O
cmdc	char
==	O
deftt	struct
.	O
c_cc	array
[	O
VSUSP	int
]	O
?	O
0	int
:	O
getpid	function
(	O
)	O
,	O
SIGTSTP	int
)	O
;	O
setsig	function
(	O
SIGCHLD	int
,	O
catch_child	function
)	O
;	O
mode	function
(	O
1	int
)	O
;	O
sigwinch	function
(	O
0	int
)	O
;	O
}	O
void	O
sigwinch	function
(	O
int	O
signo	int
_GL_UNUSED_PARAMETER	O
)	O
{	O
struct	O
winsize	struct
ws	struct
;	O
if	O
(	O
dosigwinch	int
&&	O
get_window_size	O
(	O
0	int
,	O
&	O
ws	struct
)	O
==	O
0	int
&&	O
memcmp	function
(	O
&	O
ws	struct
,	O
&	O
winsize	struct
,	O
sizeof	O
ws	struct
)	O
)	O
{	O
winsize	struct
=	O
ws	struct
;	O
sendwindow	function
(	O
)	O
;	O
}	O
}	O
void	O
sendwindow	function
(	O
void	O
)	O
{	O
struct	O
winsize	struct
*	O
wp	pointer
;	O
char	O
obuf	array
[	O
4	int
+	O
sizeof	O
(	O
struct	O
winsize	struct
)	O
]	O
;	O
wp	pointer
=	O
(	O
struct	O
winsize	struct
*	O
)	O
(	O
obuf	array
+	O
4	int
)	O
;	O
obuf	array
[	O
0	int
]	O
=	O
0377	int
;	O
obuf	array
[	O
1	int
]	O
=	O
0377	int
;	O
obuf	array
[	O
2	int
]	O
=	O
's'	O
;	O
obuf	array
[	O
3	int
]	O
=	O
's'	O
;	O
wp	pointer
->	O
ws_row	short
=	O
htons	function
(	O
winsize	struct
.	O
ws_row	short
)	O
;	O
wp	pointer
->	O
ws_col	short
=	O
htons	function
(	O
winsize	struct
.	O
ws_col	short
)	O
;	O
wp	pointer
->	O
ws_xpixel	short
=	O
htons	function
(	O
winsize	struct
.	O
ws_xpixel	short
)	O
;	O
wp	pointer
->	O
ws_ypixel	short
=	O
htons	function
(	O
winsize	struct
.	O
ws_ypixel	short
)	O
;	O
write	pointer
(	O
rem	int
,	O
obuf	array
,	O
sizeof	O
obuf	array
)	O
;	O
}	O
jmp_buf	array
rcvtop	array
;	O
pid_t	int
ppid	int
;	O
int	O
rcvcnt	int
,	O
rcvstate	int
;	O
char	O
rcvbuf	array
[	O
8	int
*	O
1024	int
]	O
;	O
void	O
oob	function
(	O
int	O
signo	int
_GL_UNUSED_PARAMETER	O
)	O
{	O
char	O
mark	char
;	O
struct	O
termios	struct
tt	struct
;	O
int	O
atmark	int
,	O
n	int
,	O
out	int
,	O
rcvd	int
;	O
char	O
waste	array
[	O
BUFSIZ	int
]	O
;	O
out	int
=	O
O_RDWR	int
;	O
rcvd	int
=	O
0	int
;	O
while	O
(	O
recv	function
(	O
rem	int
,	O
&	O
mark	char
,	O
1	int
,	O
MSG_OOB	int
)	O
<	O
0	int
)	O
{	O
switch	O
(	O
errno	O
)	O
{	O
case	O
EWOULDBLOCK	O
:	O
if	O
(	O
(	O
size_t	long
)	O
rcvcnt	int
<	O
sizeof	O
rcvbuf	array
)	O
{	O
n	int
=	O
read	pointer
(	O
rem	int
,	O
rcvbuf	array
+	O
rcvcnt	int
,	O
sizeof	O
(	O
rcvbuf	array
)	O
-	O
rcvcnt	int
)	O
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
return	O
;	O
rcvd	int
+=	O
n	int
;	O
}	O
else	O
{	O
n	int
=	O
read	pointer
(	O
rem	int
,	O
waste	array
,	O
sizeof	O
waste	array
)	O
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
return	O
;	O
}	O
continue	O
;	O
default	O
:	O
return	O
;	O
}	O
}	O
if	O
(	O
mark	char
&	O
TIOCPKT_WINDOW	int
)	O
{	O
kill	function
(	O
ppid	int
,	O
SIGUSR1	int
)	O
;	O
}	O
if	O
(	O
!	O
eight	int
&&	O
(	O
mark	char
&	O
TIOCPKT_NOSTOP	int
)	O
)	O
{	O
tcgetattr	function
(	O
0	int
,	O
&	O
tt	struct
)	O
;	O
tt	struct
.	O
c_iflag	short
&=	O
~	O
(	O
IXON	int
|	O
IXOFF	int
)	O
;	O
tt	struct
.	O
c_cc	array
[	O
VSTOP	int
]	O
=	O
_POSIX_VDISABLE	char
;	O
tt	struct
.	O
c_cc	array
[	O
VSTART	int
]	O
=	O
_POSIX_VDISABLE	char
;	O
tcsetattr	function
(	O
0	int
,	O
TCSANOW	int
,	O
&	O
tt	struct
)	O
;	O
}	O
if	O
(	O
!	O
eight	int
&&	O
(	O
mark	char
&	O
TIOCPKT_DOSTOP	int
)	O
)	O
{	O
tcgetattr	function
(	O
0	int
,	O
&	O
tt	struct
)	O
;	O
tt	struct
.	O
c_iflag	short
|=	O
(	O
IXON	int
|	O
IXOFF	int
)	O
;	O
tt	struct
.	O
c_cc	array
[	O
VSTOP	int
]	O
=	O
deftt	struct
.	O
c_cc	array
[	O
VSTOP	int
]	O
;	O
tt	struct
.	O
c_cc	array
[	O
VSTART	int
]	O
=	O
deftt	struct
.	O
c_cc	array
[	O
VSTART	int
]	O
;	O
tcsetattr	function
(	O
0	int
,	O
TCSANOW	int
,	O
&	O
tt	struct
)	O
;	O
}	O
if	O
(	O
mark	char
&	O
TIOCPKT_FLUSHWRITE	int
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
rem	int
,	O
SIOCATMARK	int
,	O
&	O
atmark	int
)	O
<	O
0	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"ioctl SIOCATMARK (ignored)"	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
atmark	int
)	O
break	O
;	O
n	int
=	O
read	pointer
(	O
rem	int
,	O
waste	array
,	O
sizeof	O
waste	array
)	O
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
break	O
;	O
}	O
rcvcnt	int
=	O
0	int
;	O
longjmp	function
(	O
rcvtop	array
,	O
1	int
)	O
;	O
}	O
if	O
(	O
rcvd	int
&&	O
rcvstate	int
==	O
READING	int
)	O
longjmp	function
(	O
rcvtop	array
,	O
1	int
)	O
;	O
}	O
int	O
reader	function
(	O
sigset_t	struct
*	O
smask	struct
)	O
{	O
pid_t	int
pid	int
;	O
int	O
n	int
,	O
remaining	int
;	O
char	O
*	O
bufp	pointer
;	O
pid	int
=	O
-	O
getpid	function
(	O
)	O
;	O
setsig	function
(	O
SIGTTOU	int
,	O
SIG_IGN	O
)	O
;	O
setsig	function
(	O
SIGURG	int
,	O
oob	function
)	O
;	O
ppid	int
=	O
getppid	function
(	O
)	O
;	O
fcntl	function
(	O
rem	int
,	O
F_SETOWN	O
,	O
pid	int
)	O
;	O
setjmp	function
(	O
rcvtop	array
)	O
;	O
sigprocmask	function
(	O
SIG_SETMASK	int
,	O
smask	struct
,	O
(	O
sigset_t	struct
*	O
)	O
0	int
)	O
;	O
bufp	pointer
=	O
rcvbuf	array
;	O
for	O
(	O
;	O
;	O
)	O
{	O
while	O
(	O
(	O
remaining	int
=	O
rcvcnt	int
-	O
(	O
bufp	pointer
-	O
rcvbuf	array
)	O
)	O
>	O
0	int
)	O
{	O
rcvstate	int
=	O
WRITING	int
;	O
n	int
=	O
write	pointer
(	O
STDOUT_FILENO	int
,	O
bufp	pointer
,	O
remaining	int
)	O
;	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
return	O
-	O
1	int
;	O
continue	O
;	O
}	O
bufp	pointer
+=	O
n	int
;	O
}	O
bufp	pointer
=	O
rcvbuf	array
;	O
rcvcnt	int
=	O
0	int
;	O
rcvstate	int
=	O
READING	int
;	O
rcvcnt	int
=	O
read	pointer
(	O
rem	int
,	O
rcvbuf	array
,	O
sizeof	O
rcvbuf	array
)	O
;	O
if	O
(	O
rcvcnt	int
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
rcvcnt	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
error	function
(	O
0	int
,	O
errno	O
,	O
"read"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
void	O
mode	function
(	O
int	O
f	int
)	O
{	O
struct	O
termios	struct
tt	struct
;	O
switch	O
(	O
f	int
)	O
{	O
case	O
0	int
:	O
tcgetattr	function
(	O
0	int
,	O
&	O
ixon_state	struct
)	O
;	O
tcsetattr	function
(	O
0	int
,	O
TCSADRAIN	int
,	O
&	O
deftt	struct
)	O
;	O
break	O
;	O
case	O
1	int
:	O
tt	struct
=	O
deftt	struct
;	O
tt	struct
.	O
c_oflag	short
&=	O
~	O
(	O
OPOST	int
)	O
;	O
tt	struct
.	O
c_lflag	short
&=	O
~	O
(	O
ECHO	int
|	O
ICANON	int
|	O
IEXTEN	int
|	O
ISIG	int
)	O
;	O
tt	struct
.	O
c_iflag	short
&=	O
~	O
(	O
ICRNL	int
)	O
;	O
tt	struct
.	O
c_cc	array
[	O
VMIN	int
]	O
=	O
1	int
;	O
tt	struct
.	O
c_cc	array
[	O
VTIME	int
]	O
=	O
0	int
;	O
if	O
(	O
eight	int
)	O
{	O
tt	struct
.	O
c_iflag	short
&=	O
~	O
(	O
IXON	int
|	O
IXOFF	int
|	O
ISTRIP	int
)	O
;	O
tt	struct
.	O
c_cc	array
[	O
VSTOP	int
]	O
=	O
_POSIX_VDISABLE	char
;	O
tt	struct
.	O
c_cc	array
[	O
VSTART	int
]	O
=	O
_POSIX_VDISABLE	char
;	O
}	O
if	O
(	O
(	O
ixon_state	struct
.	O
c_iflag	short
&	O
IXON	int
)	O
&&	O
!	O
eight	int
)	O
tt	struct
.	O
c_iflag	short
|=	O
IXON	int
;	O
else	O
tt	struct
.	O
c_iflag	short
&=	O
~	O
IXON	int
;	O
tcsetattr	function
(	O
0	int
,	O
TCSADRAIN	int
,	O
&	O
tt	struct
)	O
;	O
break	O
;	O
default	O
:	O
return	O
;	O
}	O
}	O
void	O
lostpeer	function
(	O
int	O
signo	int
_GL_UNUSED_PARAMETER	O
)	O
{	O
setsig	function
(	O
SIGPIPE	int
,	O
SIG_IGN	O
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
"\007Connection to %s lost.\r"	pointer
,	O
host	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
void	O
copytochild	function
(	O
int	O
signo	int
_GL_UNUSED_PARAMETER	O
)	O
{	O
kill	function
(	O
child	int
,	O
SIGURG	int
)	O
;	O
}	O
u_int	int
getescape	function
(	O
register	O
char	O
*	O
p	pointer
)	O
{	O
long	O
val	array
;	O
int	O
len	char
;	O
if	O
(	O
(	O
len	char
=	O
strlen	function
(	O
p	pointer
)	O
)	O
==	O
1	int
)	O
return	O
(	O
(	O
u_int	int
)	O
*	O
p	pointer
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
&&	O
len	char
>=	O
2	int
&&	O
len	char
<=	O
4	int
)	O
{	O
val	array
=	O
strtol	function
(	O
++	O
p	pointer
,	O
NULL	O
,	O
8	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
*	O
++	O
p	pointer
)	O
return	O
(	O
(	O
u_int	int
)	O
val	array
)	O
;	O
if	O
(	O
*	O
p	pointer
<	O
'0'	O
||	O
*	O
p	pointer
>	O
'8'	O
)	O
break	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
