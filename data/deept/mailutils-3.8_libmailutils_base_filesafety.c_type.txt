struct	O
file_check_buffer	struct
{	O
struct	O
stat	struct
filst	struct
;	O
struct	O
stat	struct
dirst	struct
;	O
int	O
cdir	int
;	O
}	O
;	O
static	O
int	O
_check_linkwrdir	function
(	O
struct	O
file_check_buffer	struct
*	O
fb	pointer
)	O
{	O
return	O
(	O
(	O
(	O
(	O
fb	pointer
->	O
filst	struct
.	O
st_mode	int
&	O
S_IFMT	O
)	O
==	O
S_IFLNK	O
)	O
||	O
fb	pointer
->	O
filst	struct
.	O
st_nlink	long
>	O
1	int
)	O
&&	O
(	O
fb	pointer
->	O
dirst	struct
.	O
st_mode	int
&	O
(	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
)	O
)	O
;	O
}	O
static	O
int	O
_check_gwrdir	function
(	O
struct	O
file_check_buffer	struct
*	O
fb	pointer
)	O
{	O
return	O
fb	pointer
->	O
dirst	struct
.	O
st_mode	int
&	O
S_IWGRP	O
;	O
}	O
static	O
int	O
_check_awrdir	function
(	O
struct	O
file_check_buffer	struct
*	O
fb	pointer
)	O
{	O
return	O
fb	pointer
->	O
dirst	struct
.	O
st_mode	int
&	O
S_IWOTH	O
;	O
}	O
struct	O
safety_checker	struct
{	O
char	O
*	O
name	pointer
;	O
int	O
flag	int
;	O
int	O
err	int
;	O
int	O
mode	int
;	O
int	O
cdir	int
;	O
int	O
(	O
*	O
fun	pointer
)	O
(	O
struct	O
file_check_buffer	struct
*	O
fb	pointer
)	O
;	O
}	O
;	O
static	O
struct	O
safety_checker	struct
file_safety_check_tab	array
[	O
]	O
=	O
{	O
{	O
"grdfil"	pointer
,	O
MU_FILE_SAFETY_GROUP_READABLE	int
,	O
MU_ERR_PERM_GROUP_READABLE	O
,	O
S_IRGRP	O
}	O
,	O
{	O
"ardfil"	pointer
,	O
MU_FILE_SAFETY_WORLD_READABLE	int
,	O
MU_ERR_PERM_WORLD_READABLE	O
,	O
S_IROTH	O
}	O
,	O
{	O
"gwrfil"	pointer
,	O
MU_FILE_SAFETY_GROUP_WRITABLE	int
,	O
MU_ERR_PERM_GROUP_WRITABLE	O
,	O
S_IWGRP	O
}	O
,	O
{	O
"awrfil"	pointer
,	O
MU_FILE_SAFETY_WORLD_WRITABLE	int
,	O
MU_ERR_PERM_WORLD_WRITABLE	O
,	O
S_IWOTH	O
}	O
,	O
{	O
"linkwrdir"	pointer
,	O
MU_FILE_SAFETY_LINKED_WRDIR	int
,	O
MU_ERR_PERM_LINKED_WRDIR	O
,	O
0	int
,	O
1	int
,	O
_check_linkwrdir	function
}	O
,	O
{	O
"gwrdir"	pointer
,	O
MU_FILE_SAFETY_DIR_IWGRP	int
,	O
MU_ERR_PERM_DIR_IWGRP	O
,	O
0	int
,	O
1	int
,	O
_check_gwrdir	function
}	O
,	O
{	O
"awrdir"	pointer
,	O
MU_FILE_SAFETY_DIR_IWOTH	int
,	O
MU_ERR_PERM_DIR_IWOTH	O
,	O
0	int
,	O
1	int
,	O
_check_awrdir	function
}	O
,	O
{	O
0	int
}	O
}	O
;	O
struct	O
file_id	struct
{	O
dev_t	long
dev	long
;	O
ino_t	long
inode	long
;	O
}	O
;	O
static	O
int	O
file_id_cmp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
data	pointer
)	O
{	O
const	O
struct	O
file_id	struct
*	O
a	pointer
=	O
item	pointer
;	O
const	O
struct	O
file_id	struct
*	O
b	pointer
=	O
data	pointer
;	O
if	O
(	O
a	pointer
->	O
dev	long
!=	O
b	pointer
->	O
dev	long
)	O
return	O
1	int
;	O
if	O
(	O
a	pointer
->	O
inode	long
!=	O
b	pointer
->	O
inode	long
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
file_id_lookup	function
(	O
mu_list_t	pointer
idlist	pointer
,	O
dev_t	long
dev	long
,	O
ino_t	long
ino	long
)	O
{	O
struct	O
file_id	struct
id	struct
;	O
id	struct
.	O
dev	long
=	O
dev	long
;	O
id	struct
.	O
inode	long
=	O
ino	long
;	O
return	O
mu_list_locate	function
(	O
idlist	pointer
,	O
&	O
id	struct
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
file_id_remember	function
(	O
mu_list_t	pointer
idlist	pointer
,	O
dev_t	long
dev	long
,	O
ino_t	long
ino	long
)	O
{	O
struct	O
file_id	struct
*	O
id	struct
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
id	struct
)	O
)	O
;	O
if	O
(	O
!	O
id	struct
)	O
{	O
mu_error	function
(	O
"%s"	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
id	struct
->	O
dev	long
=	O
dev	long
;	O
id	struct
->	O
inode	long
=	O
ino	long
;	O
return	O
mu_list_append	function
(	O
idlist	pointer
,	O
id	struct
)	O
;	O
}	O
static	O
struct	O
safety_checker	struct
*	O
_find_safety_checker	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
safety_checker	struct
*	O
pck	pointer
;	O
for	O
(	O
pck	pointer
=	O
file_safety_check_tab	array
;	O
pck	pointer
->	O
flag	int
;	O
pck	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
pck	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
pck	pointer
;	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
mu_file_safety_code_to_name	function
(	O
int	O
code	int
)	O
{	O
struct	O
safety_checker	struct
*	O
pck	pointer
;	O
for	O
(	O
pck	pointer
=	O
file_safety_check_tab	array
;	O
pck	pointer
->	O
flag	int
;	O
pck	pointer
++	O
)	O
{	O
if	O
(	O
pck	pointer
->	O
flag	int
==	O
code	int
)	O
return	O
pck	pointer
->	O
name	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
int	O
mu_file_safety_name_to_code	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
pcode	pointer
)	O
{	O
struct	O
safety_checker	struct
*	O
pck	pointer
=	O
_find_safety_checker	function
(	O
name	pointer
)	O
;	O
if	O
(	O
pck	pointer
)	O
{	O
*	O
pcode	pointer
=	O
pck	pointer
->	O
flag	int
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
int	O
mu_file_safety_name_to_error	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
pcode	pointer
)	O
{	O
struct	O
safety_checker	struct
*	O
pck	pointer
=	O
_find_safety_checker	function
(	O
name	pointer
)	O
;	O
if	O
(	O
pck	pointer
)	O
{	O
*	O
pcode	pointer
=	O
pck	pointer
->	O
err	int
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
int	O
mu_file_safety_check	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
mode	int
,	O
uid_t	int
uid	int
,	O
mu_list_t	pointer
idlist	pointer
)	O
{	O
struct	O
file_check_buffer	struct
buf	array
;	O
if	O
(	O
!	O
filename	pointer
)	O
return	O
EFAULT	int
;	O
memset	function
(	O
&	O
buf	array
,	O
0	int
,	O
sizeof	O
(	O
buf	array
)	O
)	O
;	O
if	O
(	O
lstat	function
(	O
filename	pointer
,	O
&	O
buf	array
.	O
filst	struct
)	O
==	O
0	int
)	O
{	O
struct	O
safety_checker	struct
*	O
pck	pointer
;	O
if	O
(	O
idlist	pointer
)	O
{	O
mu_list_set_destroy_item	function
(	O
idlist	pointer
,	O
mu_list_free_item	function
)	O
;	O
mu_list_set_comparator	function
(	O
idlist	pointer
,	O
file_id_cmp	function
)	O
;	O
if	O
(	O
file_id_lookup	function
(	O
idlist	pointer
,	O
buf	array
.	O
filst	struct
.	O
st_dev	long
,	O
buf	array
.	O
filst	struct
.	O
st_ino	long
)	O
==	O
0	int
)	O
return	O
MU_ERR_EXISTS	O
;	O
}	O
if	O
(	O
(	O
mode	int
&	O
MU_FILE_SAFETY_OWNER_MISMATCH	int
)	O
&&	O
uid	int
!=	O
buf	array
.	O
filst	struct
.	O
st_uid	int
)	O
return	O
MU_ERR_PERM_OWNER_MISMATCH	O
;	O
for	O
(	O
pck	pointer
=	O
file_safety_check_tab	array
;	O
pck	pointer
->	O
flag	int
;	O
pck	pointer
++	O
)	O
if	O
(	O
mode	int
&	O
pck	pointer
->	O
flag	int
)	O
{	O
if	O
(	O
pck	pointer
->	O
cdir	int
&&	O
!	O
buf	array
.	O
cdir	int
)	O
{	O
char	O
*	O
dirname	pointer
,	O
*	O
p	pointer
;	O
p	pointer
=	O
strrchr	function
(	O
filename	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
dirname	pointer
=	O
strdup	function
(	O
"."	pointer
)	O
;	O
else	O
if	O
(	O
p	pointer
==	O
filename	pointer
)	O
dirname	pointer
=	O
strdup	function
(	O
"/"	pointer
)	O
;	O
else	O
{	O
size_t	long
len	int
=	O
p	pointer
-	O
filename	pointer
;	O
dirname	pointer
=	O
malloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
dirname	pointer
)	O
{	O
memcpy	function
(	O
dirname	pointer
,	O
filename	pointer
,	O
len	int
)	O
;	O
dirname	pointer
[	O
len	int
]	O
=	O
0	int
;	O
}	O
}	O
if	O
(	O
!	O
dirname	pointer
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
stat	struct
(	O
dirname	pointer
,	O
&	O
buf	array
.	O
dirst	struct
)	O
)	O
return	O
errno	O
;	O
buf	array
.	O
cdir	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
pck	pointer
->	O
fun	pointer
&&	O
pck	pointer
->	O
fun	pointer
(	O
&	O
buf	array
)	O
)	O
||	O
(	O
buf	array
.	O
filst	struct
.	O
st_mode	int
&	O
pck	pointer
->	O
mode	int
)	O
)	O
return	O
pck	pointer
->	O
err	int
;	O
}	O
if	O
(	O
idlist	pointer
)	O
file_id_remember	function
(	O
idlist	pointer
,	O
buf	array
.	O
filst	struct
.	O
st_dev	long
,	O
buf	array
.	O
filst	struct
.	O
st_ino	long
)	O
;	O
return	O
0	int
;	O
}	O
return	O
errno	O
;	O
}	O
int	O
mu_file_mode_to_safety_criteria	function
(	O
int	O
mode	int
)	O
{	O
int	O
fl	int
=	O
0	int
;	O
struct	O
safety_checker	struct
*	O
pck	pointer
;	O
for	O
(	O
pck	pointer
=	O
file_safety_check_tab	array
;	O
pck	pointer
->	O
name	pointer
;	O
pck	pointer
++	O
)	O
if	O
(	O
!	O
(	O
mode	int
&	O
pck	pointer
->	O
mode	int
)	O
)	O
fl	int
|=	O
pck	pointer
->	O
flag	int
;	O
return	O
fl	int
;	O
}	O
int	O
mu_safety_criteria_to_file_mode	function
(	O
int	O
crit	int
)	O
{	O
int	O
mode	int
=	O
0666	int
;	O
struct	O
safety_checker	struct
*	O
pck	pointer
;	O
for	O
(	O
pck	pointer
=	O
file_safety_check_tab	array
;	O
pck	pointer
->	O
name	pointer
;	O
pck	pointer
++	O
)	O
if	O
(	O
pck	pointer
->	O
flag	int
&&	O
(	O
crit	int
&	O
pck	pointer
->	O
flag	int
)	O
)	O
mode	int
&=	O
~	O
pck	pointer
->	O
mode	int
;	O
return	O
mode	int
;	O
}	O
