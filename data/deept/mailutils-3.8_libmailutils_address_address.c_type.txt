int	O
mu_address_create_null	function
(	O
mu_address_t	pointer
*	O
pa	pointer
)	O
{	O
mu_address_t	pointer
a	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
a	pointer
)	O
)	O
;	O
if	O
(	O
!	O
a	pointer
)	O
return	O
ENOMEM	int
;	O
*	O
pa	pointer
=	O
a	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_create_hint	function
(	O
mu_address_t	pointer
*	O
a	pointer
,	O
const	O
char	O
*	O
s	pointer
,	O
mu_address_t	pointer
hint	pointer
,	O
int	O
hflags	int
)	O
{	O
int	O
status	int
;	O
if	O
(	O
!	O
a	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
EINVAL	int
;	O
*	O
a	pointer
=	O
NULL	O
;	O
status	int
=	O
mu_parse822_address_list	function
(	O
a	pointer
,	O
s	pointer
,	O
hint	pointer
,	O
hflags	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
!	O
*	O
a	pointer
)	O
return	O
MU_ERR_EMPTY_ADDRESS	O
;	O
(	O
*	O
a	pointer
)	O
->	O
printable	pointer
=	O
strdup	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
(	O
*	O
a	pointer
)	O
->	O
printable	pointer
)	O
{	O
mu_address_destroy	function
(	O
a	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_address_create	function
(	O
mu_address_t	pointer
*	O
a	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
struct	O
mu_address	struct
hint	pointer
;	O
const	O
char	O
*	O
d	pointer
;	O
mu_get_user_email_domain	function
(	O
&	O
d	pointer
)	O
;	O
hint	pointer
.	O
domain	pointer
=	O
(	O
char	O
*	O
)	O
d	pointer
;	O
return	O
mu_address_create_hint	function
(	O
a	pointer
,	O
s	pointer
,	O
&	O
hint	pointer
,	O
MU_ADDR_HINT_DOMAIN	int
)	O
;	O
}	O
int	O
mu_address_createv	function
(	O
mu_address_t	pointer
*	O
a	pointer
,	O
const	O
char	O
*	O
sv	array
[	O
]	O
,	O
size_t	long
len	int
)	O
{	O
int	O
status	int
=	O
0	int
;	O
size_t	long
buflen	long
=	O
0	int
;	O
char	O
*	O
buf	pointer
=	O
0	int
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
a	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
!	O
sv	array
)	O
return	O
EINVAL	int
;	O
if	O
(	O
len	int
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
{	O
const	O
char	O
*	O
*	O
vp	pointer
=	O
sv	array
;	O
len	int
=	O
0	int
;	O
for	O
(	O
len	int
=	O
0	int
;	O
*	O
vp	pointer
;	O
vp	pointer
++	O
,	O
len	int
++	O
)	O
;	O
}	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
EINVAL	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
sv	array
[	O
i	long
]	O
)	O
buflen	long
+=	O
strlen	function
(	O
sv	array
[	O
i	long
]	O
)	O
;	O
}	O
buflen	long
+=	O
(	O
len	int
-	O
1	int
)	O
*	O
strlen	function
(	O
", "	pointer
)	O
;	O
buflen	long
+=	O
1	int
;	O
buf	pointer
=	O
malloc	function
(	O
buflen	long
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
ENOMEM	int
;	O
for	O
(	O
i	long
=	O
0	int
,	O
buf	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
i	long
<	O
len	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
!=	O
0	int
)	O
strcat	function
(	O
buf	pointer
,	O
", "	pointer
)	O
;	O
if	O
(	O
sv	array
[	O
i	long
]	O
)	O
strcat	function
(	O
buf	pointer
,	O
sv	array
[	O
i	long
]	O
)	O
;	O
}	O
status	int
=	O
mu_address_create	function
(	O
a	pointer
,	O
buf	pointer
)	O
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
void	O
_address_free	function
(	O
mu_address_t	pointer
address	array
)	O
{	O
free	function
(	O
address	array
->	O
printable	pointer
)	O
;	O
free	function
(	O
address	array
->	O
comments	pointer
)	O
;	O
free	function
(	O
address	array
->	O
personal	pointer
)	O
;	O
free	function
(	O
address	array
->	O
email	pointer
)	O
;	O
free	function
(	O
address	array
->	O
local_part	pointer
)	O
;	O
free	function
(	O
address	array
->	O
domain	pointer
)	O
;	O
free	function
(	O
address	array
->	O
route	pointer
)	O
;	O
}	O
void	O
mu_address_destroy	function
(	O
mu_address_t	pointer
*	O
paddress	pointer
)	O
{	O
if	O
(	O
paddress	pointer
&&	O
*	O
paddress	pointer
)	O
{	O
mu_address_t	pointer
address	array
=	O
*	O
paddress	pointer
;	O
mu_address_t	pointer
current	pointer
;	O
for	O
(	O
;	O
address	array
;	O
address	array
=	O
current	pointer
)	O
{	O
current	pointer
=	O
address	array
->	O
next	pointer
;	O
_address_free	function
(	O
address	array
)	O
;	O
free	function
(	O
address	array
)	O
;	O
}	O
*	O
paddress	pointer
=	O
NULL	O
;	O
}	O
}	O
int	O
mu_address_concatenate	function
(	O
mu_address_t	pointer
to	pointer
,	O
mu_address_t	pointer
*	O
from	pointer
)	O
{	O
if	O
(	O
!	O
to	pointer
||	O
!	O
from	pointer
||	O
!	O
*	O
from	pointer
)	O
return	O
EINVAL	int
;	O
while	O
(	O
to	pointer
->	O
next	pointer
)	O
to	pointer
=	O
to	pointer
->	O
next	pointer
;	O
assert	O
(	O
to	pointer
&&	O
!	O
to	pointer
->	O
next	pointer
)	O
;	O
to	pointer
->	O
next	pointer
=	O
*	O
from	pointer
;	O
*	O
from	pointer
=	O
NULL	O
;	O
if	O
(	O
to	pointer
->	O
printable	pointer
)	O
{	O
free	function
(	O
to	pointer
->	O
printable	pointer
)	O
;	O
to	pointer
->	O
printable	pointer
=	O
NULL	O
;	O
}	O
to	pointer
=	O
to	pointer
->	O
next	pointer
;	O
if	O
(	O
to	pointer
->	O
printable	pointer
)	O
{	O
free	function
(	O
to	pointer
->	O
printable	pointer
)	O
;	O
to	pointer
->	O
printable	pointer
=	O
NULL	O
;	O
}	O
return	O
0	int
;	O
}	O
mu_address_t	pointer
_address_get_nth	function
(	O
mu_address_t	pointer
addr	pointer
,	O
size_t	long
no	long
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
addr	pointer
;	O
addr	pointer
=	O
addr	pointer
->	O
next	pointer
,	O
i	long
++	O
)	O
if	O
(	O
i	long
==	O
no	long
)	O
break	O
;	O
return	O
addr	pointer
;	O
}	O
int	O
mu_address_get_nth	function
(	O
mu_address_t	pointer
addr	pointer
,	O
size_t	long
no	long
,	O
mu_address_t	pointer
*	O
pret	pointer
)	O
{	O
mu_address_t	pointer
subaddr	pointer
=	O
_address_get_nth	function
(	O
addr	pointer
,	O
no	long
)	O
;	O
if	O
(	O
!	O
subaddr	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
*	O
pret	pointer
=	O
mu_address_dup	function
(	O
subaddr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
DECL_ACCESSORS	O
(	O
personal	pointer
)	O
DECL_ACCESSORS	O
(	O
comments	pointer
)	O
DECL_ACCESSORS_EI	O
(	O
local_part	pointer
)	O
DECL_ACCESSORS_EI	O
(	O
domain	pointer
)	O
DECL_ACCESSORS	O
(	O
route	pointer
)	O
int	O
mu_address_set_email	function
(	O
mu_address_t	pointer
addr	pointer
,	O
size_t	long
no	long
,	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
mu_address_t	pointer
subaddr	pointer
;	O
if	O
(	O
addr	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
subaddr	pointer
=	O
_address_get_nth	function
(	O
addr	pointer
,	O
no	long
)	O
;	O
if	O
(	O
!	O
subaddr	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
buf	pointer
)	O
{	O
s	pointer
=	O
strdup	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
errno	O
;	O
}	O
else	O
s	pointer
=	O
(	O
char	O
*	O
)	O
buf	pointer
;	O
free	function
(	O
subaddr	pointer
->	O
email	pointer
)	O
;	O
subaddr	pointer
->	O
email	pointer
=	O
s	pointer
;	O
free	function
(	O
subaddr	pointer
->	O
local_part	pointer
)	O
;	O
free	function
(	O
subaddr	pointer
->	O
domain	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
subaddr	pointer
->	O
email	pointer
,	O
'@'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
size_t	long
len	int
=	O
p	pointer
-	O
subaddr	pointer
->	O
email	pointer
;	O
subaddr	pointer
->	O
local_part	pointer
=	O
malloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
subaddr	pointer
->	O
local_part	pointer
)	O
{	O
memcpy	function
(	O
subaddr	pointer
->	O
local_part	pointer
,	O
p	pointer
,	O
len	int
)	O
;	O
subaddr	pointer
->	O
local_part	pointer
[	O
len	int
]	O
=	O
0	int
;	O
}	O
subaddr	pointer
->	O
domain	pointer
=	O
strdup	function
(	O
p	pointer
+	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
subaddr	pointer
->	O
local_part	pointer
=	O
NULL	O
;	O
subaddr	pointer
->	O
domain	pointer
=	O
NULL	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_validate_email	function
(	O
mu_address_t	pointer
subaddr	pointer
)	O
{	O
if	O
(	O
!	O
subaddr	pointer
->	O
email	pointer
)	O
{	O
if	O
(	O
subaddr	pointer
->	O
local_part	pointer
)	O
{	O
const	O
char	O
*	O
domain	pointer
;	O
if	O
(	O
subaddr	pointer
->	O
domain	pointer
)	O
domain	pointer
=	O
subaddr	pointer
->	O
domain	pointer
;	O
else	O
mu_get_user_email_domain	function
(	O
&	O
domain	pointer
)	O
;	O
if	O
(	O
domain	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
subaddr	pointer
->	O
email	pointer
=	O
malloc	function
(	O
strlen	function
(	O
subaddr	pointer
->	O
local_part	pointer
)	O
+	O
strlen	function
(	O
domain	pointer
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
subaddr	pointer
->	O
email	pointer
)	O
return	O
ENOMEM	int
;	O
p	pointer
=	O
mu_stpcpy	function
(	O
subaddr	pointer
->	O
email	pointer
,	O
subaddr	pointer
->	O
local_part	pointer
)	O
;	O
*	O
p	pointer
++	O
=	O
'@'	O
;	O
mu_stpcpy	function
(	O
p	pointer
,	O
(	O
char	O
*	O
)	O
domain	pointer
)	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_address_sget_email	function
(	O
mu_address_t	pointer
addr	pointer
,	O
size_t	long
no	long
,	O
char	O
const	O
*	O
*	O
sptr	pointer
)	O
{	O
mu_address_t	pointer
subaddr	pointer
;	O
if	O
(	O
addr	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
subaddr	pointer
=	O
_address_get_nth	function
(	O
addr	pointer
,	O
no	long
)	O
;	O
if	O
(	O
!	O
subaddr	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
mu_validate_email	function
(	O
subaddr	pointer
)	O
;	O
*	O
sptr	pointer
=	O
subaddr	pointer
->	O
email	pointer
;	O
return	O
0	int
;	O
}	O
DECL_GET	O
(	O
email	pointer
)	O
DECL_AGET	O
(	O
email	pointer
)	O
size_t	long
mu_address_format_string	function
(	O
mu_address_t	pointer
addr	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
buflen	long
)	O
{	O
mu_stream_t	pointer
str	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
buf	pointer
)	O
rc	int
=	O
mu_nullstream_create	function
(	O
&	O
str	pointer
,	O
MU_STREAM_WRITE	int
)	O
;	O
else	O
rc	int
=	O
mu_fixed_memory_stream_create	function
(	O
&	O
str	pointer
,	O
buf	pointer
,	O
buflen	long
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
size	long
;	O
mu_stream_stat_buffer	array
statbuf	array
;	O
mu_stream_set_stat	function
(	O
str	pointer
,	O
MU_STREAM_STAT_MASK	O
(	O
MU_STREAM_STAT_OUT	int
)	O
,	O
statbuf	array
)	O
;	O
rc	int
=	O
mu_stream_format_address	function
(	O
str	pointer
,	O
addr	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
0	int
;	O
size	long
=	O
statbuf	array
[	O
MU_STREAM_STAT_OUT	int
]	O
;	O
if	O
(	O
buf	pointer
)	O
{	O
if	O
(	O
size	long
+	O
1	int
>=	O
buflen	long
)	O
size	long
=	O
buflen	long
-	O
1	int
;	O
buf	pointer
[	O
size	long
]	O
=	O
0	int
;	O
}	O
return	O
size	long
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_address_is_group	function
(	O
mu_address_t	pointer
addr	pointer
)	O
{	O
if	O
(	O
addr	pointer
->	O
personal	pointer
&&	O
!	O
addr	pointer
->	O
local_part	pointer
&&	O
!	O
addr	pointer
->	O
domain	pointer
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_address_is_email	function
(	O
mu_address_t	pointer
addr	pointer
)	O
{	O
if	O
(	O
addr	pointer
->	O
email	pointer
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_address_is_unix_mailbox	function
(	O
mu_address_t	pointer
addr	pointer
)	O
{	O
if	O
(	O
addr	pointer
->	O
local_part	pointer
&&	O
!	O
addr	pointer
->	O
email	pointer
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_is_group	function
(	O
mu_address_t	pointer
addr	pointer
,	O
size_t	long
no	long
,	O
int	O
*	O
yes	pointer
)	O
{	O
mu_address_t	pointer
subaddr	pointer
;	O
if	O
(	O
addr	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
subaddr	pointer
=	O
_address_get_nth	function
(	O
addr	pointer
,	O
no	long
)	O
;	O
if	O
(	O
!	O
subaddr	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
yes	pointer
)	O
*	O
yes	pointer
=	O
_address_is_group	function
(	O
subaddr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_sget_printable	function
(	O
mu_address_t	pointer
addr	pointer
,	O
const	O
char	O
*	O
*	O
sptr	pointer
)	O
{	O
if	O
(	O
addr	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
sptr	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
!	O
addr	pointer
->	O
printable	pointer
)	O
{	O
mu_stream_t	pointer
str	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_memory_stream_create	function
(	O
&	O
str	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_format_address	function
(	O
str	pointer
,	O
addr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_off_t	long
size	long
;	O
mu_stream_size	function
(	O
str	pointer
,	O
&	O
size	long
)	O
;	O
addr	pointer
->	O
printable	pointer
=	O
malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
addr	pointer
->	O
printable	pointer
)	O
rc	int
=	O
ENOMEM	int
;	O
else	O
{	O
mu_stream_seek	function
(	O
str	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_read	function
(	O
str	pointer
,	O
addr	pointer
->	O
printable	pointer
,	O
size	long
,	O
NULL	O
)	O
;	O
addr	pointer
->	O
printable	pointer
[	O
size	long
]	O
=	O
0	int
;	O
}	O
}	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
*	O
sptr	pointer
=	O
addr	pointer
->	O
printable	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_aget_printable	function
(	O
mu_address_t	pointer
addr	pointer
,	O
char	O
*	O
*	O
presult	pointer
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
s	pointer
;	O
if	O
(	O
addr	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
presult	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
rc	int
=	O
mu_address_sget_printable	function
(	O
addr	pointer
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
*	O
result	pointer
=	O
strdup	function
(	O
s	pointer
)	O
;	O
if	O
(	O
result	pointer
)	O
*	O
presult	pointer
=	O
result	pointer
;	O
else	O
rc	int
=	O
ENOMEM	int
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_address_get_printable	function
(	O
mu_address_t	pointer
addr	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	int
,	O
size_t	long
*	O
n	long
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_address_sget_printable	function
(	O
addr	pointer
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
i	long
;	O
i	long
=	O
mu_cpystr	function
(	O
buf	pointer
,	O
addr	pointer
->	O
printable	pointer
,	O
len	int
)	O
;	O
if	O
(	O
n	long
)	O
*	O
n	long
=	O
i	long
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_address_to_string	function
(	O
mu_address_t	pointer
addr	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	int
,	O
size_t	long
*	O
n	long
)	O
{	O
return	O
mu_address_get_printable	function
(	O
addr	pointer
,	O
buf	pointer
,	O
len	int
,	O
n	long
)	O
;	O
}	O
int	O
mu_address_get_count	function
(	O
mu_address_t	pointer
addr	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
size_t	long
i	long
,	O
count	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
addr	pointer
;	O
addr	pointer
=	O
addr	pointer
->	O
next	pointer
,	O
i	long
++	O
)	O
{	O
mu_validate_email	function
(	O
addr	pointer
)	O
;	O
if	O
(	O
addr	pointer
->	O
email	pointer
)	O
++	O
count	long
;	O
}	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
count	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_get_group_count	function
(	O
mu_address_t	pointer
addr	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
addr	pointer
;	O
addr	pointer
=	O
addr	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
_address_is_group	function
(	O
addr	pointer
)	O
)	O
j	long
++	O
;	O
}	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
j	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_get_email_count	function
(	O
mu_address_t	pointer
addr	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
addr	pointer
;	O
addr	pointer
=	O
addr	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
_address_is_email	function
(	O
addr	pointer
)	O
)	O
j	long
++	O
;	O
}	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
j	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_get_unix_mailbox_count	function
(	O
mu_address_t	pointer
addr	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
addr	pointer
;	O
addr	pointer
=	O
addr	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
_address_is_unix_mailbox	function
(	O
addr	pointer
)	O
)	O
j	long
++	O
;	O
}	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
j	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_contains_email	function
(	O
mu_address_t	pointer
addr	pointer
,	O
const	O
char	O
*	O
email	pointer
)	O
{	O
for	O
(	O
;	O
addr	pointer
;	O
addr	pointer
=	O
addr	pointer
->	O
next	pointer
)	O
{	O
mu_validate_email	function
(	O
addr	pointer
)	O
;	O
if	O
(	O
!	O
addr	pointer
->	O
email	pointer
)	O
break	O
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
addr	pointer
->	O
email	pointer
,	O
email	pointer
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
mu_list_copy	function
(	O
mu_address_t	pointer
dst	pointer
,	O
mu_address_t	pointer
src	pointer
)	O
{	O
if	O
(	O
src	pointer
->	O
comments	pointer
&&	O
!	O
(	O
dst	pointer
->	O
comments	pointer
=	O
strdup	function
(	O
src	pointer
->	O
comments	pointer
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
personal	pointer
&&	O
!	O
(	O
dst	pointer
->	O
personal	pointer
=	O
strdup	function
(	O
src	pointer
->	O
personal	pointer
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
email	pointer
&&	O
!	O
(	O
dst	pointer
->	O
email	pointer
=	O
strdup	function
(	O
src	pointer
->	O
email	pointer
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
local_part	pointer
&&	O
!	O
(	O
dst	pointer
->	O
local_part	pointer
=	O
strdup	function
(	O
src	pointer
->	O
local_part	pointer
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
domain	pointer
&&	O
!	O
(	O
dst	pointer
->	O
domain	pointer
=	O
strdup	function
(	O
src	pointer
->	O
domain	pointer
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	pointer
->	O
route	pointer
&&	O
!	O
(	O
dst	pointer
->	O
route	pointer
=	O
strdup	function
(	O
src	pointer
->	O
route	pointer
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
mu_address_t	pointer
mu_address_dup	function
(	O
mu_address_t	pointer
src	pointer
)	O
{	O
mu_address_t	pointer
dst	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
dst	pointer
)	O
)	O
;	O
if	O
(	O
!	O
dst	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
mu_list_copy	function
(	O
dst	pointer
,	O
src	pointer
)	O
)	O
mu_address_destroy	function
(	O
&	O
dst	pointer
)	O
;	O
return	O
dst	pointer
;	O
}	O
int	O
mu_address_union	function
(	O
mu_address_t	pointer
*	O
a	pointer
,	O
mu_address_t	pointer
b	pointer
)	O
{	O
mu_address_t	pointer
last	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
a	pointer
||	O
!	O
b	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
*	O
a	pointer
)	O
{	O
*	O
a	pointer
=	O
mu_address_dup	function
(	O
b	pointer
)	O
;	O
if	O
(	O
!	O
*	O
a	pointer
)	O
return	O
ENOMEM	int
;	O
last	pointer
=	O
*	O
a	pointer
;	O
b	pointer
=	O
b	pointer
->	O
next	pointer
;	O
}	O
else	O
{	O
if	O
(	O
(	O
*	O
a	pointer
)	O
->	O
printable	pointer
)	O
{	O
free	function
(	O
(	O
*	O
a	pointer
)	O
->	O
printable	pointer
)	O
;	O
(	O
*	O
a	pointer
)	O
->	O
printable	pointer
=	O
NULL	O
;	O
}	O
for	O
(	O
last	pointer
=	O
*	O
a	pointer
;	O
last	pointer
->	O
next	pointer
;	O
last	pointer
=	O
last	pointer
->	O
next	pointer
)	O
;	O
}	O
for	O
(	O
;	O
b	pointer
;	O
b	pointer
=	O
b	pointer
->	O
next	pointer
)	O
if	O
(	O
!	O
mu_address_contains_email	function
(	O
*	O
a	pointer
,	O
b	pointer
->	O
email	pointer
)	O
)	O
{	O
if	O
(	O
last	pointer
->	O
email	pointer
)	O
{	O
mu_address_t	pointer
next	pointer
=	O
mu_address_dup	function
(	O
b	pointer
)	O
;	O
if	O
(	O
!	O
next	pointer
)	O
return	O
ENOMEM	int
;	O
last	pointer
->	O
next	pointer
=	O
next	pointer
;	O
last	pointer
=	O
next	pointer
;	O
}	O
else	O
{	O
int	O
rc	int
=	O
mu_list_copy	function
(	O
last	pointer
,	O
b	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
_address_free	function
(	O
last	pointer
)	O
;	O
memset	function
(	O
last	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
last	pointer
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
