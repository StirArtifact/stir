struct	O
mu_tls_config	struct
global_tls_conf	struct
;	O
int	O
global_tls_mode	int
;	O
int	O
global_conf_status	int
=	O
-	O
1	int
;	O
static	O
struct	O
pop3d_command	struct
command_table	array
[	O
]	O
=	O
{	O
{	O
"STLS"	pointer
,	O
pop3d_stls	function
}	O
,	O
{	O
"RETR"	pointer
,	O
pop3d_retr	function
}	O
,	O
{	O
"DELE"	pointer
,	O
pop3d_dele	function
}	O
,	O
{	O
"USER"	pointer
,	O
pop3d_user	function
}	O
,	O
{	O
"QUIT"	pointer
,	O
pop3d_quit	function
}	O
,	O
{	O
"APOP"	pointer
,	O
pop3d_apop	function
}	O
,	O
{	O
"AUTH"	pointer
,	O
pop3d_auth	function
}	O
,	O
{	O
"STAT"	pointer
,	O
pop3d_stat	function
}	O
,	O
{	O
"LIST"	pointer
,	O
pop3d_list	function
}	O
,	O
{	O
"NOOP"	pointer
,	O
pop3d_noop	function
}	O
,	O
{	O
"RSET"	pointer
,	O
pop3d_rset	function
}	O
,	O
{	O
"TOP"	pointer
,	O
pop3d_top	function
}	O
,	O
{	O
"UIDL"	pointer
,	O
pop3d_uidl	function
}	O
,	O
{	O
"CAPA"	pointer
,	O
pop3d_capa	struct
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
pop3d_command_handler_t	pointer
pop3d_find_command	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
pop3d_command	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
command_table	array
;	O
p	pointer
->	O
name	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
mu_c_strcasecmp	function
(	O
name	pointer
,	O
p	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
return	O
p	pointer
->	O
handler	pointer
;	O
}	O
return	O
p	pointer
->	O
handler	pointer
;	O
}	O
int	O
stls_server_check	function
(	O
struct	O
pop3d_srv_config	struct
*	O
cfg	pointer
,	O
char	O
const	O
*	O
srvid	pointer
)	O
{	O
int	O
result	int
;	O
switch	O
(	O
cfg	pointer
->	O
tls_mode	enum
)	O
{	O
case	O
tls_unspecified	int
:	O
if	O
(	O
global_tls_mode	int
!=	O
tls_unspecified	int
)	O
cfg	pointer
->	O
tls_mode	enum
=	O
global_tls_mode	int
;	O
else	O
if	O
(	O
cfg	pointer
->	O
tls_conf	pointer
.	O
cert_file	pointer
)	O
cfg	pointer
->	O
tls_mode	enum
=	O
tls_ondemand	int
;	O
else	O
{	O
cfg	pointer
->	O
tls_mode	enum
=	O
tls_no	int
;	O
return	O
MU_TLS_CONFIG_NULL	int
;	O
}	O
break	O
;	O
case	O
tls_no	int
:	O
return	O
MU_TLS_CONFIG_NULL	int
;	O
default	O
:	O
break	O
;	O
}	O
result	int
=	O
mu_tls_config_check	function
(	O
&	O
cfg	pointer
->	O
tls_conf	pointer
,	O
1	int
)	O
;	O
switch	O
(	O
result	int
)	O
{	O
case	O
MU_TLS_CONFIG_OK	int
:	O
if	O
(	O
!	O
cfg	pointer
->	O
tls_conf	pointer
.	O
cert_file	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"server %s: no certificate set"	pointer
)	O
,	O
srvid	pointer
)	O
;	O
result	int
=	O
MU_TLS_CONFIG_FAIL	int
;	O
}	O
break	O
;	O
case	O
MU_TLS_CONFIG_NULL	int
:	O
if	O
(	O
global_conf_status	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
global_tls_conf	struct
.	O
cert_file	pointer
)	O
global_conf_status	int
=	O
mu_tls_config_check	function
(	O
&	O
global_tls_conf	struct
,	O
1	int
)	O
;	O
else	O
global_conf_status	int
=	O
MU_TLS_CONFIG_NULL	int
;	O
}	O
if	O
(	O
global_conf_status	int
!=	O
MU_TLS_CONFIG_NULL	int
)	O
{	O
cfg	pointer
->	O
tls_conf	pointer
=	O
global_tls_conf	struct
;	O
result	int
=	O
MU_TLS_CONFIG_OK	int
;	O
}	O
else	O
{	O
mu_error	function
(	O
_	O
(	O
"server %s: no certificate set"	pointer
)	O
,	O
srvid	pointer
)	O
;	O
result	int
=	O
MU_TLS_CONFIG_FAIL	int
;	O
}	O
break	O
;	O
default	O
:	O
mu_error	function
(	O
_	O
(	O
"server %s: TLS configuration failed"	pointer
)	O
,	O
srvid	pointer
)	O
;	O
}	O
return	O
result	int
;	O
}	O
int	O
stls_preflight	function
(	O
mu_m_server_t	pointer
msrv	pointer
)	O
{	O
mu_list_t	pointer
srvlist	pointer
;	O
mu_iterator_t	pointer
itr	pointer
;	O
int	O
errors	int
=	O
0	int
;	O
int	O
tls_ok	int
=	O
mu_init_tls_libs	function
(	O
)	O
;	O
int	O
tls_requested	int
=	O
0	int
;	O
mu_m_server_get_srvlist	function
(	O
msrv	pointer
,	O
&	O
srvlist	pointer
)	O
;	O
mu_list_get_iterator	function
(	O
srvlist	pointer
,	O
&	O
itr	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_ip_server_t	pointer
ipsrv	pointer
;	O
struct	O
pop3d_srv_config	struct
*	O
cfg	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
ipsrv	pointer
)	O
;	O
cfg	pointer
=	O
mu_ip_server_get_data	function
(	O
ipsrv	pointer
)	O
;	O
switch	O
(	O
stls_server_check	function
(	O
cfg	pointer
,	O
mu_ip_server_addrstr	function
(	O
ipsrv	pointer
)	O
)	O
)	O
{	O
case	O
MU_TLS_CONFIG_NULL	int
:	O
continue	O
;	O
case	O
MU_TLS_CONFIG_OK	int
:	O
break	O
;	O
default	O
:	O
errors	int
=	O
1	int
;	O
}	O
tls_requested	int
=	O
1	int
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
global_tls_mode	int
==	O
tls_unspecified	int
)	O
global_tls_mode	int
=	O
tls_no	int
;	O
if	O
(	O
tls_requested	int
&&	O
!	O
tls_ok	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"TLS is not configured, but requested in the "	pointer
"configuration"	pointer
)	O
)	O
;	O
errors	int
=	O
1	int
;	O
}	O
if	O
(	O
errors	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
error_table	array
[	O
]	O
=	O
{	O
[	O
ERR_WRONG_STATE	int
]	O
=	O
"Incorrect state"	pointer
,	O
[	O
ERR_BAD_ARGS	int
]	O
=	O
"Invalid arguments"	pointer
,	O
[	O
ERR_BAD_LOGIN	int
]	O
=	O
"[AUTH] Bad login"	pointer
,	O
[	O
ERR_NO_MESG	int
]	O
=	O
"No such message"	pointer
,	O
[	O
ERR_MESG_DELE	int
]	O
=	O
"Message has been deleted"	pointer
,	O
[	O
ERR_NOT_IMPL	int
]	O
=	O
"Not implemented"	pointer
,	O
[	O
ERR_BAD_CMD	int
]	O
=	O
"Invalid command"	pointer
,	O
[	O
ERR_MBOX_LOCK	int
]	O
=	O
"[IN-USE] Mailbox in use"	pointer
,	O
[	O
ERR_TOO_LONG	int
]	O
=	O
"Argument too long"	pointer
,	O
[	O
ERR_NO_MEM	int
]	O
=	O
"Out of memory] =quitting"	pointer
,	O
[	O
ERR_SIGNAL	int
]	O
=	O
"Quitting on signal"	pointer
,	O
[	O
ERR_FILE	int
]	O
=	O
"Some deleted messages not removed"	pointer
,	O
[	O
ERR_NO_IFILE	int
]	O
=	O
"No input stream"	pointer
,	O
[	O
ERR_NO_OFILE	int
]	O
=	O
"No output stream"	pointer
,	O
[	O
ERR_IO	int
]	O
=	O
"I/O error"	pointer
,	O
[	O
ERR_PROTO	int
]	O
=	O
"Remote protocol error"	pointer
,	O
[	O
ERR_TIMEOUT	int
]	O
=	O
"Session timed out"	pointer
,	O
[	O
ERR_UNKNOWN	int
]	O
=	O
"Unknown error"	pointer
,	O
[	O
ERR_MBOX_SYNC	int
]	O
=	O
"Mailbox was updated by other process"	pointer
,	O
[	O
ERR_TLS_IO	int
]	O
=	O
"TLS I/O error"	pointer
,	O
[	O
ERR_LOGIN_DELAY	int
]	O
=	O
"[LOGIN-DELAY] Attempt to log in within the minimum login delay interval"	pointer
,	O
[	O
ERR_TERMINATE	int
]	O
=	O
"Terminating on request"	pointer
,	O
[	O
ERR_SYS_LOGIN	int
]	O
=	O
"[SYS/PERM] Cannot authenticate"	pointer
,	O
}	O
;	O
const	O
char	O
*	O
pop3d_error_string	function
(	O
int	O
code	int
)	O
{	O
if	O
(	O
code	int
>=	O
0	int
&&	O
code	int
<	O
MU_ARRAY_SIZE	O
(	O
error_table	array
)	O
&&	O
error_table	array
[	O
code	int
]	O
)	O
return	O
error_table	array
[	O
code	int
]	O
;	O
return	O
"unknown error"	pointer
;	O
}	O
