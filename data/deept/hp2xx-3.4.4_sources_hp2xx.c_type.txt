mode_list	struct
ModeList	array
[	O
]	O
=	O
{	O
{	O
XX_CAD	int
,	O
"cad"	pointer
}	O
,	O
{	O
XX_DXF	int
,	O
"dxf"	pointer
}	O
,	O
{	O
XX_EM	int
,	O
"em"	pointer
}	O
,	O
{	O
XX_EPIC	int
,	O
"epic"	pointer
}	O
,	O
{	O
XX_EPS	int
,	O
"eps"	pointer
}	O
,	O
{	O
XX_ESC2	int
,	O
"esc2"	pointer
}	O
,	O
{	O
XX_FIG	int
,	O
"fig"	pointer
}	O
,	O
{	O
XX_GPT	int
,	O
"gpt"	pointer
}	O
,	O
{	O
XX_HPGL	int
,	O
"hpgl"	pointer
}	O
,	O
{	O
XX_IMG	int
,	O
"img"	pointer
}	O
,	O
{	O
XX_JPG	int
,	O
"jpg"	pointer
}	O
,	O
{	O
XX_MF	int
,	O
"mf"	pointer
}	O
,	O
{	O
XX_NC	int
,	O
"nc"	pointer
}	O
,	O
{	O
XX_PBM	int
,	O
"pbm"	pointer
}	O
,	O
{	O
XX_PCL	int
,	O
"pcl"	pointer
}	O
,	O
{	O
XX_PCX	int
,	O
"pcx"	pointer
}	O
,	O
{	O
XX_PNG	int
,	O
"png"	pointer
}	O
,	O
{	O
XX_PRE	int
,	O
"pre"	pointer
}	O
,	O
{	O
XX_RGIP	int
,	O
"rgip"	pointer
}	O
,	O
{	O
XX_SVG	int
,	O
"svg"	pointer
}	O
,	O
{	O
XX_TIFF	int
,	O
"tiff"	pointer
}	O
,	O
{	O
XX_TERM	int
,	O
""	pointer
}	O
}	O
;	O
void	O
print_supported_modes	function
(	O
void	O
)	O
{	O
int	O
i	int
;	O
Eprintf	function
(	O
"%s"	pointer
,	O
ModeList	array
[	O
0	int
]	O
.	O
modestr	pointer
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
ModeList	array
[	O
i	int
]	O
.	O
mode	enum
!=	O
XX_TERM	int
;	O
i	int
++	O
)	O
Eprintf	function
(	O
",%s"	pointer
,	O
ModeList	array
[	O
i	int
]	O
.	O
modestr	pointer
)	O
;	O
Eprintf	function
(	O
"\n"	pointer
)	O
;	O
}	O
void	O
Send_version	function
(	O
void	O
)	O
{	O
Eprintf	function
(	O
"\n%s\n%s\n%s\n%s\n%s\n"	pointer
,	O
"hp2xx is free software and you are welcome to distribute copies of it"	pointer
,	O
"  under certain conditions. There is absolutely no warranty for hp2xx!"	pointer
,	O
"For full details, read file COPYING (shipped along with this package),"	pointer
,	O
"  or write to:\t\tFree Software Foundation, Inc."	pointer
,	O
"\t\t\t675 Mass Ave, Cambridge, MA 02139, USA"	pointer
)	O
;	O
Eprintf	function
(	O
"\n%s\tV %s  (%s)   %s\n%s"	pointer
,	O
"HP2xx:\tA HPGL converter (xx = mf, eps, pcl, pcx, img ...)\n"	pointer
,	O
VERS_NO	pointer
,	O
VERS_DATE	pointer
,	O
VERS_COPYRIGHT	pointer
,	O
VERS_ADDITIONS	pointer
)	O
;	O
}	O
void	O
usage_msg	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
const	O
IN_PAR	struct
*	O
pi	pointer
,	O
const	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
if	O
(	O
pg	pointer
->	O
quiet	int
)	O
return	O
;	O
Send_version	function
(	O
)	O
;	O
Eprintf	function
(	O
"Usage:\thp2xx [options] [file1 [file2 ...]]\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\tUnix: Filter usage (.. | hp2xx -q -f- [options] | ..) ok\n"	pointer
)	O
;	O
NormalWait	function
(	O
)	O
;	O
Eprintf	function
(	O
"\nOpt fmt   defaults\tComment:\n"	pointer
)	O
;	O
Eprintf	function
(	O
"---------------------------------------------------------------------------\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-m strg   %s\t\tMode. Valid mode strings for this particular binary are:\n\t\t\t"	pointer
,	O
pg	pointer
->	O
mode	enum
)	O
;	O
print_supported_modes	function
(	O
)	O
;	O
Eprintf	function
(	O
"-n        %s\t\tno filling of polygons (ignore FP commands)\n"	pointer
,	O
FLAGSTATE	O
(	O
pg	pointer
->	O
nofill	int
)	O
)	O
;	O
Eprintf	function
(	O
"-N        %s\t\tno honoring of papersize (PS) requests\n\t\t\t (plotsize calculated from data instead)\n"	pointer
,	O
FLAGSTATE	O
(	O
pg	pointer
->	O
no_ps	int
)	O
)	O
;	O
Eprintf	function
(	O
"-M int	\t\tremap all drawing commands using pen 0 to this pen\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-f strg   (auto gen.)\tName of output file ('-' = to stdout)\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-l strg   (stderr)\tName of log file\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-p strg   %1d%1d%1d%1d%1d%1d%1d%1d\tPensize(s) of pen 1 to 8 (in 1/10 mm).\n"	pointer
,	O
(	O
unsigned	O
)	O
(	O
10	int
*	O
pt	struct
.	O
width	array
[	O
1	int
]	O
)	O
,	O
(	O
unsigned	O
)	O
(	O
10	int
*	O
pt	struct
.	O
width	array
[	O
2	int
]	O
)	O
,	O
(	O
unsigned	O
)	O
(	O
10	int
*	O
pt	struct
.	O
width	array
[	O
3	int
]	O
)	O
,	O
(	O
unsigned	O
)	O
(	O
10	int
*	O
pt	struct
.	O
width	array
[	O
4	int
]	O
)	O
,	O
(	O
unsigned	O
)	O
(	O
10	int
*	O
pt	struct
.	O
width	array
[	O
5	int
]	O
)	O
,	O
(	O
unsigned	O
)	O
(	O
10	int
*	O
pt	struct
.	O
width	array
[	O
6	int
]	O
)	O
,	O
(	O
unsigned	O
)	O
(	O
10	int
*	O
pt	struct
.	O
width	array
[	O
7	int
]	O
)	O
,	O
(	O
unsigned	O
)	O
(	O
10	int
*	O
pt	struct
.	O
width	array
[	O
8	int
]	O
)	O
)	O
;	O
Eprintf	function
(	O
"\t\t\t\"strg\" must consist of 1 to 8 digits '0'-'9'\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\t\t\tfirst digit = pen1 ... last digit = pen 8\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\t\t\t(default settings shown)\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-c strg   %1d%1d%1d%1d%1d%1d%1d%1d\tPen color(s) (default settings shown).\n"	pointer
,	O
pt	struct
.	O
color	array
[	O
1	int
]	O
,	O
pt	struct
.	O
color	array
[	O
2	int
]	O
,	O
pt	struct
.	O
color	array
[	O
3	int
]	O
,	O
pt	struct
.	O
color	array
[	O
4	int
]	O
,	O
pt	struct
.	O
color	array
[	O
5	int
]	O
,	O
pt	struct
.	O
color	array
[	O
6	int
]	O
,	O
pt	struct
.	O
color	array
[	O
7	int
]	O
,	O
pt	struct
.	O
color	array
[	O
8	int
]	O
)	O
;	O
Eprintf	function
(	O
"\t\t\t0 = off, 1 = black, 2 = red, 3 = green, 4 = blue,\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\t\t\t5 = cyan, 6 = magenta, 7 = yellow\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-P n:n    %d:%d\t\tPage range (0:0 = all pages).\n"	pointer
,	O
pi	pointer
->	O
first_page	int
,	O
pi	pointer
->	O
last_page	int
)	O
;	O
Eprintf	function
(	O
"-q        %s\t\tQuiet mode (no diagnostics)\n"	pointer
,	O
FLAGSTATE	O
(	O
pg	pointer
->	O
quiet	int
)	O
)	O
;	O
Eprintf	function
(	O
"-r float%5.1f\t\tRotation angle [deg]. -r90 = landscape\n"	pointer
,	O
pi	pointer
->	O
rotation	double
)	O
;	O
Eprintf	function
(	O
"-s strg   %s\tName of swap file\n"	pointer
,	O
pg	pointer
->	O
swapfile	pointer
)	O
;	O
NormalWait	function
(	O
)	O
;	O
Eprintf	function
(	O
"\nBitmap controls:\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-d int    %d\t\tDPI value for x or x&y, if -D unused.\n"	pointer
,	O
po	pointer
->	O
dpi_x	int
)	O
;	O
Eprintf	function
(	O
"-D int    %d\t\tDPI value for y ONLY\n"	pointer
,	O
po	pointer
->	O
dpi_x	int
)	O
;	O
Eprintf	function
(	O
"-e int    %d\t\tExtra clipping space\n"	pointer
,	O
pg	pointer
->	O
extraclip	int
)	O
;	O
Eprintf	function
(	O
"\nPCL-exclusive options:\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-i         %s\tPre-initialize printer\n"	pointer
,	O
FLAGSTATE	O
(	O
po	pointer
->	O
init_p	int
)	O
)	O
;	O
Eprintf	function
(	O
"-I         %s\tInitialize using PCL3GUI commands\n"	pointer
,	O
FLAGSTATE	O
(	O
po	pointer
->	O
init_p3gui	int
)	O
)	O
;	O
Eprintf	function
(	O
"-F         %s\tSend a FormFeed at end\n"	pointer
,	O
FLAGSTATE	O
(	O
po	pointer
->	O
formfeed	int
)	O
)	O
;	O
Eprintf	function
(	O
"-S int     %d\tUse Deskjet special commands (0=off, 1=B/W, 3=CMY, 4=CMYK)\n"	pointer
,	O
po	pointer
->	O
specials	int
)	O
;	O
Eprintf	function
(	O
"NOTE:    \tOnly valid for -d: 300/150/100/75; -D invalid!\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\nPCL / PostScript / Preview options:\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-o float %5.1f\tX offset [mm] of picture\n"	pointer
,	O
pi	pointer
->	O
xoff	double
)	O
;	O
Eprintf	function
(	O
"-O float %5.1f\tY offset [mm] of picture\n"	pointer
,	O
pi	pointer
->	O
yoff	double
)	O
;	O
Eprintf	function
(	O
"-C           \tFit picture into center of (-a/-h/-w) rectangle\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\nTiff-exclusive options:\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-S int     %d\tUse Tiff Compression Format (0/1=None, 2=RLE, 3=G3Fax, 4=G4Fax, 5=LZW, 6=OJpeg, 7=Jpeg, 8=Deflate)\n"	pointer
,	O
po	pointer
->	O
specials	int
)	O
;	O
NormalWait	function
(	O
)	O
;	O
Eprintf	function
(	O
"\nDXF-exclusive options:\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-S int     %d\tMap pens to DXF colors (0=No mapping, 1=use pen no., 2=use width*10 , 3=map widths <0.2 to 1, <0.3 to 2,0.4 to 3 , above 0.4 to 4 )\n"	pointer
,	O
po	pointer
->	O
specials	int
)	O
;	O
Eprintf	function
(	O
"\nSize controls:\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-a float %5.1f\tAspect factor (x/y correction). Valid: > 0.0\n"	pointer
,	O
pi	pointer
->	O
aspectfactor	double
)	O
;	O
Eprintf	function
(	O
"-h float %5.1f\tHeight [mm] of picture\n"	pointer
,	O
pi	pointer
->	O
height	double
)	O
;	O
Eprintf	function
(	O
"-w float %5.1f\tWidth  [mm] of picture\n"	pointer
,	O
pi	pointer
->	O
width	array
)	O
;	O
Eprintf	function
(	O
"-t         %s\tShow true HPGL size. Disables -a -h -w !\n"	pointer
,	O
FLAGSTATE	O
(	O
pi	pointer
->	O
truesize	int
)	O
)	O
;	O
Eprintf	function
(	O
"-H float %5.1f\tHardware X range [1/40 mm] of device\n"	pointer
,	O
pi	pointer
->	O
hwlimit	struct
.	O
x	int
)	O
;	O
Eprintf	function
(	O
"-W float %5.1f\tHardware Y range [1/40 mm] of device\n"	pointer
,	O
pi	pointer
->	O
hwlimit	struct
.	O
y	int
)	O
;	O
Eprintf	function
(	O
"-x float   -\tManual HPGL-coord range presetting: x0\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-X float   -\tManual HPGL-coord range presetting: x1\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-y float   -\tManual HPGL-coord range presetting: y0\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-Y float   -\tManual HPGL-coord range presetting: y1\n"	pointer
)	O
;	O
Eprintf	function
(	O
"-z float %5.1f\t(3d nc output only) Z engage depth\n"	pointer
,	O
po	pointer
->	O
zengage	double
)	O
;	O
Eprintf	function
(	O
"-Z float %5.1f\t(3d nc output only) Z retract depth\n"	pointer
,	O
po	pointer
->	O
zretract	double
)	O
;	O
NormalWait	function
(	O
)	O
;	O
Eprintf	function
(	O
"Corresponding long options:\n\n"	pointer
)	O
;	O
Eprintf	function
(	O
"hp2xx   [--mode] [--colors] [--pensizes] [--pages] [--quiet]\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\t[--nofill] [--no_ps] [--mapzero]\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\t[--width] [--height] [--aspectfactor] [--truesize]\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\t[--x0] [--x1] [--y0] [--y1]\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\t[--xoffset] [--yoffset] [--center]\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\t[--DPI] [--DPI_x] [--DPI_y] [--extraclip]\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\t[--outfile] [--logfile] [--swapfile]\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\t[--PCL_formfeed] [--PCL_init] [--PCL_Deskjet] [--PCL_PCL3GUI]\n"	pointer
)	O
;	O
Eprintf	function
(	O
"\t[--help] [--version]\n"	pointer
)	O
;	O
}	O
void	O
reset_par	function
(	O
IN_PAR	struct
*	O
pi	pointer
)	O
{	O
pi	pointer
->	O
x0	double
=	O
1e10	int
;	O
pi	pointer
->	O
x1	double
=	O
-	O
1e10	int
;	O
pi	pointer
->	O
y0	double
=	O
1e10	int
;	O
pi	pointer
->	O
y1	double
=	O
-	O
1e10	int
;	O
}	O
void	O
preset_par	function
(	O
GEN_PAR	struct
*	O
pg	pointer
,	O
IN_PAR	struct
*	O
pi	pointer
,	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
int	O
i	int
;	O
pi	pointer
->	O
aspectfactor	double
=	O
1.0	int
;	O
pi	pointer
->	O
center_mode	int
=	O
FALSE	int
;	O
pi	pointer
->	O
height	double
=	O
200.0	int
;	O
pi	pointer
->	O
width	array
=	O
200.0	int
;	O
pi	pointer
->	O
xoff	double
=	O
0.0	int
;	O
pi	pointer
->	O
yoff	double
=	O
0.0	int
;	O
pi	pointer
->	O
truesize	int
=	O
FALSE	int
;	O
pi	pointer
->	O
hwcolor	int
=	O
FALSE	int
;	O
pi	pointer
->	O
hwsize	int
=	O
FALSE	int
;	O
pi	pointer
->	O
rotation	double
=	O
0.0	int
;	O
pi	pointer
->	O
in_file	pointer
=	O
""	pointer
;	O
pi	pointer
->	O
hd	pointer
=	O
NULL	O
;	O
pi	pointer
->	O
first_page	int
=	O
0	int
;	O
pi	pointer
->	O
last_page	int
=	O
0	int
;	O
pi	pointer
->	O
hwlimit	struct
.	O
x	int
=	O
33600.	int
;	O
pi	pointer
->	O
hwlimit	struct
.	O
y	int
=	O
47520.	int
;	O
po	pointer
->	O
init_p	int
=	O
FALSE	int
;	O
po	pointer
->	O
init_p3gui	int
=	O
FALSE	int
;	O
po	pointer
->	O
formfeed	int
=	O
FALSE	int
;	O
po	pointer
->	O
specials	int
=	O
0	int
;	O
po	pointer
->	O
dpi_x	int
=	O
75	int
;	O
po	pointer
->	O
dpi_y	int
=	O
0	int
;	O
po	pointer
->	O
vga_mode	char
=	O
18	int
;	O
po	pointer
->	O
picbuf	pointer
=	O
NULL	O
;	O
po	pointer
->	O
outfile	pointer
=	O
""	pointer
;	O
po	pointer
->	O
zengage	double
=	O
-	O
1.	int
;	O
po	pointer
->	O
zretract	double
=	O
1.	int
;	O
pg	pointer
->	O
logfile	pointer
=	O
""	pointer
;	O
pg	pointer
->	O
swapfile	pointer
=	O
"hp2xx.swp"	pointer
;	O
pg	pointer
->	O
mode	enum
=	O
"pre"	pointer
;	O
pg	pointer
->	O
td	pointer
=	O
NULL	O
;	O
pg	pointer
->	O
xx_mode	enum
=	O
XX_PRE	int
;	O
pg	pointer
->	O
nofill	int
=	O
FALSE	int
;	O
pg	pointer
->	O
no_ps	int
=	O
FALSE	int
;	O
pg	pointer
->	O
quiet	int
=	O
FALSE	int
;	O
pg	pointer
->	O
extraclip	int
=	O
0	int
;	O
pg	pointer
->	O
maxpensize	float
=	O
0.1	int
;	O
pg	pointer
->	O
maxcolor	int
=	O
1	int
;	O
pg	pointer
->	O
maxpens	int
=	O
8	int
;	O
pg	pointer
->	O
is_color	int
=	O
FALSE	int
;	O
pg	pointer
->	O
mapzero	int
=	O
-	O
1	int
;	O
pt	struct
.	O
width	array
[	O
0	int
]	O
=	O
0.0	int
;	O
pt	struct
.	O
color	array
[	O
0	int
]	O
=	O
xxBackground	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
NUMPENS	int
;	O
i	int
++	O
)	O
{	O
pt	struct
.	O
width	array
[	O
i	int
]	O
=	O
0.1	int
;	O
pt	struct
.	O
color	array
[	O
i	int
]	O
=	O
xxForeground	int
;	O
}	O
pt	struct
.	O
color	array
[	O
1	int
]	O
=	O
xxForeground	int
;	O
pt	struct
.	O
color	array
[	O
2	int
]	O
=	O
xxRed	int
;	O
pt	struct
.	O
color	array
[	O
3	int
]	O
=	O
xxGreen	int
;	O
pt	struct
.	O
color	array
[	O
4	int
]	O
=	O
xxBlue	int
;	O
pt	struct
.	O
color	array
[	O
5	int
]	O
=	O
xxCyan	int
;	O
pt	struct
.	O
color	array
[	O
6	int
]	O
=	O
xxMagenta	int
;	O
pt	struct
.	O
color	array
[	O
7	int
]	O
=	O
xxYellow	int
;	O
set_color_rgb	function
(	O
xxBackground	int
,	O
255	int
,	O
255	int
,	O
255	int
)	O
;	O
set_color_rgb	function
(	O
xxForeground	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
set_color_rgb	function
(	O
xxRed	int
,	O
255	int
,	O
0	int
,	O
0	int
)	O
;	O
set_color_rgb	function
(	O
xxGreen	int
,	O
0	int
,	O
255	int
,	O
0	int
)	O
;	O
set_color_rgb	function
(	O
xxBlue	int
,	O
0	int
,	O
0	int
,	O
255	int
)	O
;	O
set_color_rgb	function
(	O
xxCyan	int
,	O
0	int
,	O
255	int
,	O
255	int
)	O
;	O
set_color_rgb	function
(	O
xxMagenta	int
,	O
255	int
,	O
0	int
,	O
255	int
)	O
;	O
set_color_rgb	function
(	O
xxYellow	int
,	O
255	int
,	O
255	int
,	O
0	int
)	O
;	O
reset_par	function
(	O
pi	pointer
)	O
;	O
}	O
void	O
Send_Copyright	function
(	O
void	O
)	O
{	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
void	O
autoset_outfile_name	function
(	O
const	O
char	O
*	O
mode	enum
,	O
const	O
char	O
*	O
in_name	pointer
,	O
char	O
*	O
*	O
outfile	pointer
)	O
{	O
int	O
len	int
,	O
i	int
;	O
if	O
(	O
*	O
*	O
outfile	pointer
==	O
'-'	O
)	O
return	O
;	O
if	O
(	O
isascii	function
(	O
*	O
*	O
outfile	pointer
)	O
&&	O
strlen	function
(	O
*	O
outfile	pointer
)	O
>	O
0	int
)	O
{	O
return	O
;	O
}	O
if	O
(	O
*	O
in_name	pointer
==	O
'-'	O
)	O
len	int
=	O
0	int
;	O
else	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
in_name	pointer
)	O
;	O
if	O
(	O
len	int
==	O
0	int
)	O
{	O
*	O
outfile	pointer
=	O
"hp2xx.out"	pointer
;	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
len	int
-	O
1	int
;	O
i	int
;	O
i	int
--	O
)	O
if	O
(	O
in_name	pointer
[	O
i	int
]	O
==	O
'.'	O
)	O
break	O
;	O
i	int
++	O
;	O
if	O
(	O
(	O
*	O
outfile	pointer
=	O
realloc	function
(	O
*	O
outfile	pointer
,	O
len	int
+	O
2	int
+	O
strlen	function
(	O
mode	enum
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
Eprintf	function
(	O
"Error: No mem for output file name!\n"	pointer
)	O
;	O
PError	function
(	O
"autoset_outfile_name"	pointer
)	O
;	O
exit	function
(	O
ERROR	O
)	O
;	O
}	O
strcpy	function
(	O
*	O
outfile	pointer
,	O
in_name	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
mode	enum
,	O
"pre"	pointer
)	O
==	O
0	int
)	O
return	O
;	O
if	O
(	O
i	int
==	O
1	int
||	O
len	int
-	O
i	int
>	O
3	int
)	O
{	O
strcat	function
(	O
*	O
outfile	pointer
,	O
"."	pointer
)	O
;	O
strcat	function
(	O
*	O
outfile	pointer
,	O
mode	enum
)	O
;	O
}	O
else	O
strcpy	function
(	O
*	O
outfile	pointer
+	O
i	int
,	O
mode	enum
)	O
;	O
}	O
void	O
cleanup_g	function
(	O
GEN_PAR	struct
*	O
pg	pointer
)	O
{	O
if	O
(	O
pg	pointer
!=	O
NULL	O
&&	O
pg	pointer
->	O
td	pointer
!=	O
NULL	O
)	O
{	O
fclose	function
(	O
pg	pointer
->	O
td	pointer
)	O
;	O
pg	pointer
->	O
td	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
cleanup_i	function
(	O
IN_PAR	struct
*	O
pi	pointer
)	O
{	O
if	O
(	O
pi	pointer
!=	O
NULL	O
&&	O
pi	pointer
->	O
hd	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
pi	pointer
->	O
hd	pointer
!=	O
stdin	pointer
)	O
fclose	function
(	O
pi	pointer
->	O
hd	pointer
)	O
;	O
pi	pointer
->	O
hd	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
cleanup_o	function
(	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
if	O
(	O
po	pointer
!=	O
NULL	O
&&	O
po	pointer
->	O
picbuf	pointer
!=	O
NULL	O
)	O
{	O
free_PicBuf	function
(	O
po	pointer
->	O
picbuf	pointer
)	O
;	O
po	pointer
->	O
picbuf	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
cleanup	function
(	O
GEN_PAR	struct
*	O
pg	pointer
,	O
IN_PAR	struct
*	O
pi	pointer
,	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
cleanup_g	function
(	O
pg	pointer
)	O
;	O
cleanup_i	function
(	O
pi	pointer
)	O
;	O
cleanup_o	function
(	O
po	pointer
)	O
;	O
}	O
int	O
HPGL_to_TMP	function
(	O
GEN_PAR	struct
*	O
pg	pointer
,	O
IN_PAR	struct
*	O
pi	pointer
)	O
{	O
cleanup_g	function
(	O
pg	pointer
)	O
;	O
if	O
(	O
*	O
pi	pointer
->	O
in_file	pointer
==	O
'-'	O
)	O
pi	pointer
->	O
hd	pointer
=	O
stdin	pointer
;	O
else	O
if	O
(	O
pi	pointer
->	O
hd	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
pi	pointer
->	O
hd	pointer
=	O
fopen	function
(	O
pi	pointer
->	O
in_file	pointer
,	O
READ_BIN	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
PError	function
(	O
"hp2xx (while opening HPGL file)"	pointer
)	O
;	O
return	O
ERROR	O
;	O
}	O
}	O
if	O
(	O
(	O
pg	pointer
->	O
td	pointer
=	O
tmpfile	function
(	O
)	O
)	O
==	O
NULL	O
)	O
{	O
PError	function
(	O
"hp2xx -- opening temporary file"	pointer
)	O
;	O
return	O
ERROR	O
;	O
}	O
n_commands	long
=	O
0	int
;	O
read_HPGL	function
(	O
pg	pointer
,	O
pi	pointer
)	O
;	O
if	O
(	O
n_commands	long
<=	O
1	int
&&	O
n_commands	long
>=	O
0	int
)	O
{	O
if	O
(	O
pi	pointer
->	O
hd	pointer
!=	O
stdin	pointer
)	O
{	O
fclose	function
(	O
pi	pointer
->	O
hd	pointer
)	O
;	O
pi	pointer
->	O
hd	pointer
=	O
NULL	O
;	O
}	O
return	O
ERROR	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
TMP_to_VEC	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
const	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
if	O
(	O
pg	pointer
->	O
td	pointer
==	O
NULL	O
)	O
return	O
ERROR	O
;	O
rewind	function
(	O
pg	pointer
->	O
td	pointer
)	O
;	O
if	O
(	O
n_commands	long
<	O
0	int
)	O
return	O
0	int
;	O
switch	O
(	O
pg	pointer
->	O
xx_mode	enum
)	O
{	O
case	O
XX_MF	int
:	O
to_mftex	function
(	O
pg	pointer
,	O
po	pointer
,	O
0	int
)	O
;	O
return	O
0	int
;	O
case	O
XX_EM	int
:	O
to_mftex	function
(	O
pg	pointer
,	O
po	pointer
,	O
1	int
)	O
;	O
return	O
0	int
;	O
case	O
XX_EPIC	int
:	O
to_mftex	function
(	O
pg	pointer
,	O
po	pointer
,	O
2	int
)	O
;	O
return	O
0	int
;	O
case	O
XX_CAD	int
:	O
to_mftex	function
(	O
pg	pointer
,	O
po	pointer
,	O
3	int
)	O
;	O
return	O
0	int
;	O
case	O
XX_GPT	int
:	O
to_mftex	function
(	O
pg	pointer
,	O
po	pointer
,	O
6	int
)	O
;	O
return	O
0	int
;	O
case	O
XX_HPGL	int
:	O
to_mftex	function
(	O
pg	pointer
,	O
po	pointer
,	O
5	int
)	O
;	O
return	O
0	int
;	O
case	O
XX_DXF	int
:	O
to_mftex	function
(	O
pg	pointer
,	O
po	pointer
,	O
7	int
)	O
;	O
return	O
0	int
;	O
case	O
XX_SVG	int
:	O
to_mftex	function
(	O
pg	pointer
,	O
po	pointer
,	O
8	int
)	O
;	O
return	O
0	int
;	O
case	O
XX_EPS	int
:	O
to_eps	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
return	O
0	int
;	O
case	O
XX_RGIP	int
:	O
to_rgip	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
return	O
0	int
;	O
case	O
XX_FIG	int
:	O
to_fig	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
return	O
0	int
;	O
case	O
XX_NC	int
:	O
to_mftex	function
(	O
pg	pointer
,	O
po	pointer
,	O
9	int
)	O
;	O
return	O
0	int
;	O
default	O
:	O
return	O
1	int
;	O
}	O
}	O
int	O
TMP_to_BUF	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
int	O
n_rows	int
,	O
n_cols	int
;	O
if	O
(	O
pg	pointer
->	O
td	pointer
==	O
NULL	O
)	O
return	O
ERROR	O
;	O
if	O
(	O
n_commands	long
<	O
0	int
)	O
return	O
0	int
;	O
rewind	function
(	O
pg	pointer
->	O
td	pointer
)	O
;	O
cleanup_o	function
(	O
po	pointer
)	O
;	O
size_PicBuf	function
(	O
pg	pointer
,	O
po	pointer
,	O
&	O
n_rows	int
,	O
&	O
n_cols	int
)	O
;	O
if	O
(	O
(	O
po	pointer
->	O
picbuf	pointer
=	O
allocate_PicBuf	function
(	O
pg	pointer
,	O
n_rows	int
,	O
n_cols	int
)	O
)	O
==	O
NULL	O
)	O
{	O
Eprintf	function
(	O
"Fatal error: cannot allocate %d*%d picture buffer\n"	pointer
,	O
n_rows	int
,	O
n_cols	int
)	O
;	O
return	O
ERROR	O
;	O
}	O
tmpfile_to_PicBuf	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
BUF_to_RAS	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
if	O
(	O
po	pointer
->	O
picbuf	pointer
==	O
NULL	O
)	O
return	O
ERROR	O
;	O
if	O
(	O
n_commands	long
<	O
0	int
)	O
return	O
0	int
;	O
switch	O
(	O
pg	pointer
->	O
xx_mode	enum
)	O
{	O
case	O
XX_PCL	int
:	O
return	O
PicBuf_to_PCL	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
case	O
XX_PCX	int
:	O
return	O
PicBuf_to_PCX	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
case	O
XX_IMG	int
:	O
return	O
PicBuf_to_IMG	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
case	O
XX_JPG	int
:	O
return	O
PicBuf_to_JPG	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
case	O
XX_PBM	int
:	O
return	O
PicBuf_to_PBM	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
case	O
XX_PNG	int
:	O
return	O
PicBuf_to_PNG	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
case	O
XX_TIFF	int
:	O
return	O
PicBuf_to_TIF	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
case	O
XX_ESC2	int
:	O
return	O
PicBuf_to_ESCP2	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
case	O
XX_PRE	int
:	O
return	O
PicBuf_to_X11	function
(	O
pg	pointer
,	O
po	pointer
)	O
;	O
default	O
:	O
return	O
1	int
;	O
}	O
}	O
