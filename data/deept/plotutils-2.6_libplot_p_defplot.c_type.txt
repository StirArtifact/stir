const	O
Plotter	struct
_pl_p_default_plotter	struct
=	O
{	O
_pl_p_initialize	function
,	O
_pl_p_terminate	function
,	O
_pl_p_begin_page	function
,	O
_pl_p_erase_page	function
,	O
_pl_p_end_page	function
,	O
_pl_g_push_state	function
,	O
_pl_g_pop_state	function
,	O
_pl_p_paint_path	function
,	O
_pl_p_paint_paths	function
,	O
_pl_g_path_is_flushable	function
,	O
_pl_g_maybe_prepaint_segments	function
,	O
_pl_g_paint_marker	function
,	O
_pl_p_paint_point	function
,	O
_pl_g_paint_text_string_with_escapes	function
,	O
_pl_p_paint_text_string	function
,	O
_pl_g_get_text_width	function
,	O
_pl_g_retrieve_font	function
,	O
_pl_g_flush_output	function
,	O
_pl_g_warning	function
,	O
_pl_g_error	function
,	O
}	O
;	O
void	O
_pl_p_initialize	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
_pl_g_initialize	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
type	enum
=	O
PL_PS	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
output_model	enum
=	O
PL_OUTPUT_PAGES_ALL_AT_ONCE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_wide_lines	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_dash_array	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_solid_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_odd_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_nonzero_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_settable_bg	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_escaped_string_support	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_ps_fonts	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_pcl_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_stick_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_extra_stick_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_other_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
default_font_type	int
=	O
PL_F_POSTSCRIPT	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
pcl_before_ps	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_horizontal_justification	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_vertical_justification	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
issue_font_warning	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_mixed_paths	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_arc_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellarc_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_quad_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_cubic_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_box_scaling	enum
=	O
AS_ANY	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_circle_scaling	enum
=	O
AS_ANY	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellipse_scaling	enum
=	O
AS_ANY	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
emulate_color	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
display_model_type	int
=	O
(	O
int	O
)	O
DISP_MODEL_PHYSICAL	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
display_coors_type	int
=	O
(	O
int	O
)	O
DISP_DEVICE_COORS_REAL	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
flipped_y	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
imin	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
imax	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
jmin	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
jmax	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmin	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmax	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymin	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymax	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
=	O
(	O
plPageData	struct
*	O
)	O
NULL	O
;	O
{	O
_set_page_type	function
(	O
_plotter	pointer
->	O
data	pointer
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmin	double
=	O
72	int
*	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xorigin	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xoffset	double
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmax	double
=	O
72	int
*	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xorigin	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xoffset	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_xsize	double
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymin	double
=	O
72	int
*	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_yorigin	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_yoffset	double
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymax	double
=	O
72	int
*	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_yorigin	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_yoffset	double
+	O
_plotter	pointer
->	O
data	pointer
->	O
viewport_ysize	double
)	O
;	O
}	O
_compute_ndc_to_device_map	function
(	O
_plotter	pointer
->	O
data	pointer
)	O
;	O
}	O
void	O
_pl_p_terminate	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
double	O
x_min	double
,	O
x_max	double
,	O
y_min	double
,	O
y_max	double
;	O
int	O
i	int
,	O
n	array
;	O
time_t	long
clock	function
;	O
plOutbuf	struct
*	O
doc_header	pointer
,	O
*	O
doc_trailer	pointer
,	O
*	O
current_page	pointer
;	O
bool	enum
ps_font_used_in_doc	array
[	O
PL_NUM_PS_FONTS	int
]	O
;	O
char	O
*	O
time_string	pointer
,	O
time_string_buffer	array
[	O
32	int
]	O
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
outfp	pointer
)	O
{	O
int	O
num_pages	int
=	O
_plotter	pointer
->	O
data	pointer
->	O
page_number	int
;	O
doc_header	pointer
=	O
_new_outbuf	function
(	O
)	O
;	O
if	O
(	O
num_pages	int
==	O
1	int
)	O
sprintf	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%!PS-Adobe-3.0 EPSF-3.0\n"	pointer
)	O
;	O
else	O
sprintf	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%!PS-Adobe-3.0\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
time	function
(	O
&	O
clock	function
)	O
;	O
time_string	pointer
=	O
ctime	function
(	O
&	O
clock	function
)	O
;	O
sprintf	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%%%Creator: GNU libplot drawing library %s\n%%%%Title: PostScript plot\n%%%%CreationDate: %s%%%%DocumentData: Clean7Bit\n%%%%LanguageLevel: 1\n%%%%Pages: %d\n%%%%PageOrder: Ascend\n%%%%Orientation: Portrait\n"	pointer
,	O
PL_LIBPLOT_VER_STRING	pointer
,	O
time_string	pointer
,	O
num_pages	int
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
_bbox_of_outbufs	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
first_page	pointer
,	O
&	O
x_min	double
,	O
&	O
x_max	double
,	O
&	O
y_min	double
,	O
&	O
y_max	double
)	O
;	O
if	O
(	O
x_min	double
>	O
x_max	double
||	O
y_min	double
>	O
y_max	double
)	O
sprintf	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%%%BoundingBox: 0 0 0 0\n"	pointer
)	O
;	O
else	O
sprintf	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%%%BoundingBox: %d %d %d %d\n"	pointer
,	O
IROUND	O
(	O
x_min	double
-	O
0.5	int
)	O
,	O
IROUND	O
(	O
y_min	double
-	O
0.5	int
)	O
,	O
IROUND	O
(	O
x_max	double
+	O
0.5	int
)	O
,	O
IROUND	O
(	O
y_max	double
+	O
0.5	int
)	O
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
{	O
current_page	pointer
=	O
_plotter	pointer
->	O
data	pointer
->	O
first_page	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_PS_FONTS	int
;	O
i	int
++	O
)	O
ps_font_used_in_doc	array
[	O
i	int
]	O
=	O
false	int
;	O
while	O
(	O
current_page	pointer
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_PS_FONTS	int
;	O
i	int
++	O
)	O
if	O
(	O
current_page	pointer
->	O
ps_font_used	array
[	O
i	int
]	O
)	O
ps_font_used_in_doc	array
[	O
i	int
]	O
=	O
true	int
;	O
current_page	pointer
=	O
current_page	pointer
->	O
next	pointer
;	O
}	O
}	O
{	O
bool	enum
first_font	enum
=	O
true	int
;	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%DocumentNeededResources: "	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_PS_FONTS	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
ps_font_used_in_doc	array
[	O
i	int
]	O
)	O
{	O
if	O
(	O
first_font	enum
==	O
false	int
)	O
{	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%+ "	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"font "	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
_pl_g_ps_font_info	array
[	O
i	int
]	O
.	O
ps_name	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
first_font	enum
=	O
false	int
;	O
}	O
}	O
if	O
(	O
first_font	enum
)	O
{	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
}	O
if	O
(	O
num_pages	int
>	O
0	int
)	O
{	O
sprintf	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%%%DocumentSuppliedResources: procset %s %s 0\n"	pointer
,	O
PS_PROCSET_NAME	pointer
,	O
PS_PROCSET_VERSION	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%EndComments\n\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
{	O
bool	enum
first_font	enum
=	O
true	int
;	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%BeginDefaults\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%PageResources: "	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_PS_FONTS	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
ps_font_used_in_doc	array
[	O
i	int
]	O
)	O
{	O
if	O
(	O
first_font	enum
==	O
false	int
)	O
{	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%+ "	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"font "	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
_pl_g_ps_font_info	array
[	O
i	int
]	O
.	O
ps_name	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
first_font	enum
=	O
false	int
;	O
}	O
}	O
if	O
(	O
first_font	enum
)	O
{	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%EndDefaults\n\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%BeginProlog\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
if	O
(	O
num_pages	int
>	O
1	int
)	O
{	O
sprintf	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%%%BeginResource: procset %s %s 0\n"	pointer
,	O
PS_PROCSET_NAME	pointer
,	O
PS_PROCSET_VERSION	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
_ps_procset	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
_ps_procset	array
[	O
i	int
]	O
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%EndResource\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%EndProlog\n\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%BeginSetup\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_PS_FONTS	int
;	O
i	int
++	O
)	O
if	O
(	O
ps_font_used_in_doc	array
[	O
i	int
]	O
)	O
{	O
sprintf	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%%%IncludeResource: font %s\n"	pointer
,	O
_pl_g_ps_font_info	array
[	O
i	int
]	O
.	O
ps_name	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"/DrawDict 50 dict def\nDrawDict begin\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
{	O
bool	enum
need_to_reencode	enum
=	O
false	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_PS_FONTS	int
;	O
i	int
++	O
)	O
if	O
(	O
ps_font_used_in_doc	array
[	O
i	int
]	O
&&	O
_pl_g_ps_font_info	array
[	O
i	int
]	O
.	O
iso8859_1	enum
)	O
{	O
need_to_reencode	enum
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
need_to_reencode	enum
)	O
{	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
_ps_fontproc	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_PS_FONTS	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
ps_font_used_in_doc	array
[	O
i	int
]	O
&&	O
_pl_g_ps_font_info	array
[	O
i	int
]	O
.	O
iso8859_1	enum
)	O
{	O
sprintf	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"/%s reencodeISO def\n"	pointer
,	O
_pl_g_ps_font_info	array
[	O
i	int
]	O
.	O
ps_name	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
num_pages	int
==	O
1	int
)	O
{	O
sprintf	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%%%BeginResource: procset %s %s 0\n"	pointer
,	O
PS_PROCSET_NAME	pointer
,	O
PS_PROCSET_VERSION	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
_ps_procset	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
_ps_procset	array
[	O
i	int
]	O
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%EndResource\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
}	O
strcpy	function
(	O
doc_header	pointer
->	O
point	pointer
,	O
"%%EndSetup\n\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_header	pointer
)	O
;	O
doc_trailer	pointer
=	O
_new_outbuf	function
(	O
)	O
;	O
strcpy	function
(	O
doc_trailer	pointer
->	O
point	pointer
,	O
"%%Trailer\nend\n%%EOF\n"	pointer
)	O
;	O
_update_buffer	function
(	O
doc_trailer	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
doc_header	pointer
->	O
base	pointer
)	O
;	O
_delete_outbuf	function
(	O
doc_header	pointer
)	O
;	O
if	O
(	O
num_pages	int
>	O
0	int
)	O
{	O
for	O
(	O
current_page	pointer
=	O
_plotter	pointer
->	O
data	pointer
->	O
first_page	pointer
,	O
n	array
=	O
1	int
;	O
current_page	pointer
;	O
current_page	pointer
=	O
current_page	pointer
->	O
next	pointer
,	O
n	array
++	O
)	O
{	O
plOutbuf	struct
*	O
page_header	pointer
,	O
*	O
page_trailer	pointer
;	O
page_header	pointer
=	O
_new_outbuf	function
(	O
)	O
;	O
sprintf	function
(	O
page_header	pointer
->	O
point	pointer
,	O
"%%%%Page: %d %d\n"	pointer
,	O
n	array
,	O
n	array
)	O
;	O
_update_buffer	function
(	O
page_header	pointer
)	O
;	O
{	O
bool	enum
first_font	enum
=	O
true	int
;	O
strcpy	function
(	O
page_header	pointer
->	O
point	pointer
,	O
"%%PageResources: "	pointer
)	O
;	O
_update_buffer	function
(	O
page_header	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_PS_FONTS	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
current_page	pointer
->	O
ps_font_used	array
[	O
i	int
]	O
)	O
{	O
if	O
(	O
first_font	enum
==	O
false	int
)	O
{	O
strcpy	function
(	O
page_header	pointer
->	O
point	pointer
,	O
"%%+ "	pointer
)	O
;	O
_update_buffer	function
(	O
page_header	pointer
)	O
;	O
}	O
strcpy	function
(	O
page_header	pointer
->	O
point	pointer
,	O
"font "	pointer
)	O
;	O
_update_buffer	function
(	O
page_header	pointer
)	O
;	O
strcpy	function
(	O
page_header	pointer
->	O
point	pointer
,	O
_pl_g_ps_font_info	array
[	O
i	int
]	O
.	O
ps_name	pointer
)	O
;	O
_update_buffer	function
(	O
page_header	pointer
)	O
;	O
strcpy	function
(	O
page_header	pointer
->	O
point	pointer
,	O
"\n"	pointer
)	O
;	O
_update_buffer	function
(	O
page_header	pointer
)	O
;	O
first_font	enum
=	O
false	int
;	O
}	O
}	O
if	O
(	O
first_font	enum
)	O
{	O
strcpy	function
(	O
page_header	pointer
->	O
point	pointer
,	O
"\n"	pointer
)	O
;	O
_update_buffer	function
(	O
page_header	pointer
)	O
;	O
}	O
}	O
_bbox_of_outbuf	function
(	O
current_page	pointer
,	O
&	O
x_min	double
,	O
&	O
x_max	double
,	O
&	O
y_min	double
,	O
&	O
y_max	double
)	O
;	O
if	O
(	O
x_min	double
>	O
x_max	double
||	O
y_min	double
>	O
y_max	double
)	O
sprintf	function
(	O
page_header	pointer
->	O
point	pointer
,	O
"%%%%PageBoundingBox: 0 0 0 0\n"	pointer
)	O
;	O
else	O
sprintf	function
(	O
page_header	pointer
->	O
point	pointer
,	O
"%%%%PageBoundingBox: %d %d %d %d\n"	pointer
,	O
IROUND	O
(	O
x_min	double
-	O
0.5	int
)	O
,	O
IROUND	O
(	O
y_min	double
-	O
0.5	int
)	O
,	O
IROUND	O
(	O
x_max	double
+	O
0.5	int
)	O
,	O
IROUND	O
(	O
y_max	double
+	O
0.5	int
)	O
)	O
;	O
_update_buffer	function
(	O
page_header	pointer
)	O
;	O
strcpy	function
(	O
page_header	pointer
->	O
point	pointer
,	O
"%%BeginPageSetup\n"	pointer
)	O
;	O
_update_buffer	function
(	O
page_header	pointer
)	O
;	O
strcpy	function
(	O
page_header	pointer
->	O
point	pointer
,	O
"%I Idraw 8\n\nBegin\n%I b u\n%I cfg u\n%I cbg u\n%I f u\n%I p u\n%I t\n[ 1 0 0 1 0 0 ] concat\n/originalCTM matrix currentmatrix def\n/trueoriginalCTM matrix currentmatrix def\n"	pointer
)	O
;	O
_update_buffer	function
(	O
page_header	pointer
)	O
;	O
strcpy	function
(	O
page_header	pointer
->	O
point	pointer
,	O
"%%EndPageSetup\n\n"	pointer
)	O
;	O
_update_buffer	function
(	O
page_header	pointer
)	O
;	O
page_trailer	pointer
=	O
_new_outbuf	function
(	O
)	O
;	O
strcpy	function
(	O
page_trailer	pointer
->	O
point	pointer
,	O
"%%PageTrailer\nEnd %I eop\nshowpage\n\n"	pointer
)	O
;	O
_update_buffer	function
(	O
page_trailer	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
page_header	pointer
->	O
base	pointer
)	O
;	O
if	O
(	O
current_page	pointer
->	O
len	long
>	O
0	int
)	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
current_page	pointer
->	O
base	pointer
)	O
;	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
page_trailer	pointer
->	O
base	pointer
)	O
;	O
_delete_outbuf	function
(	O
page_trailer	pointer
)	O
;	O
_delete_outbuf	function
(	O
page_header	pointer
)	O
;	O
}	O
}	O
_write_string	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
doc_trailer	pointer
->	O
base	pointer
)	O
;	O
_delete_outbuf	function
(	O
doc_trailer	pointer
)	O
;	O
}	O
current_page	pointer
=	O
_plotter	pointer
->	O
data	pointer
->	O
first_page	pointer
;	O
while	O
(	O
current_page	pointer
)	O
{	O
plOutbuf	struct
*	O
next_page	pointer
;	O
next_page	pointer
=	O
current_page	pointer
->	O
next	pointer
;	O
_delete_outbuf	function
(	O
current_page	pointer
)	O
;	O
current_page	pointer
=	O
next_page	pointer
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
outfp	pointer
)	O
{	O
if	O
(	O
fflush	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
outfp	pointer
)	O
<	O
0	int
)	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"the output stream is jammed"	pointer
)	O
;	O
}	O
_pl_g_terminate	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
