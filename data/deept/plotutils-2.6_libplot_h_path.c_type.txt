void	O
_pl_h_paint_path	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
==	O
0	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
==	O
0	int
)	O
return	O
;	O
switch	O
(	O
(	O
int	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
type	enum
)	O
{	O
case	O
(	O
int	O
)	O
PATH_SEGMENT_LIST	int
:	O
{	O
plIntPathSegment	struct
*	O
xarray	pointer
;	O
plPoint	struct
p0	struct
,	O
pp1	struct
,	O
pc	struct
,	O
savedpoint	struct
;	O
bool	enum
closed	enum
,	O
use_polygon_buffer	enum
;	O
double	O
last_x	double
,	O
last_y	double
;	O
int	O
i	int
,	O
polyline_len	int
;	O
bool	enum
identical_user_coordinates	enum
=	O
true	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
==	O
1	int
)	O
break	O
;	O
if	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
>=	O
3	int
)	O
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
-	O
1	int
]	O
.	O
p	struct
.	O
x	double
==	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
x	double
)	O
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
-	O
1	int
]	O
.	O
p	struct
.	O
y	double
==	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
y	double
)	O
)	O
closed	enum
=	O
true	int
;	O
else	O
closed	enum
=	O
false	int
;	O
xarray	pointer
=	O
(	O
plIntPathSegment	struct
*	O
)	O
_pl_xmalloc	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
*	O
sizeof	O
(	O
plIntPathSegment	struct
)	O
)	O
;	O
xarray	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
x	double
=	O
IROUND	O
(	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
y	double
)	O
)	O
;	O
xarray	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
y	double
=	O
IROUND	O
(	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
y	double
)	O
)	O
;	O
polyline_len	int
=	O
1	int
;	O
last_x	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
x	double
;	O
last_y	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
y	double
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
;	O
i	int
++	O
)	O
{	O
plPathSegment	struct
datapoint	struct
;	O
double	O
xuser	double
,	O
yuser	double
,	O
xdev	double
,	O
ydev	double
;	O
int	O
device_x	int
,	O
device_y	int
;	O
datapoint	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
i	int
]	O
;	O
xuser	double
=	O
datapoint	struct
.	O
p	struct
.	O
x	double
;	O
yuser	double
=	O
datapoint	struct
.	O
p	struct
.	O
y	double
;	O
if	O
(	O
xuser	double
!=	O
last_x	double
||	O
yuser	double
!=	O
last_y	double
)	O
identical_user_coordinates	enum
=	O
false	int
;	O
xdev	double
=	O
XD	O
(	O
xuser	double
,	O
yuser	double
)	O
;	O
ydev	double
=	O
YD	O
(	O
xuser	double
,	O
yuser	double
)	O
;	O
device_x	int
=	O
IROUND	O
(	O
xdev	double
)	O
;	O
device_y	int
=	O
IROUND	O
(	O
ydev	double
)	O
;	O
if	O
(	O
device_x	int
!=	O
xarray	pointer
[	O
polyline_len	int
-	O
1	int
]	O
.	O
p	struct
.	O
x	double
||	O
device_y	int
!=	O
xarray	pointer
[	O
polyline_len	int
-	O
1	int
]	O
.	O
p	struct
.	O
y	double
)	O
{	O
plPathSegmentType	enum
element_type	enum
;	O
int	O
device_xc	int
,	O
device_yc	int
;	O
xarray	pointer
[	O
polyline_len	int
]	O
.	O
p	struct
.	O
x	double
=	O
device_x	int
;	O
xarray	pointer
[	O
polyline_len	int
]	O
.	O
p	struct
.	O
y	double
=	O
device_y	int
;	O
element_type	enum
=	O
datapoint	struct
.	O
type	enum
;	O
xarray	pointer
[	O
polyline_len	int
]	O
.	O
type	enum
=	O
element_type	enum
;	O
if	O
(	O
element_type	enum
==	O
S_ARC	int
)	O
{	O
double	O
angle	double
;	O
device_xc	int
=	O
IROUND	O
(	O
XD	O
(	O
datapoint	struct
.	O
pc	struct
.	O
x	double
,	O
datapoint	struct
.	O
pc	struct
.	O
y	double
)	O
)	O
;	O
device_yc	int
=	O
IROUND	O
(	O
YD	O
(	O
datapoint	struct
.	O
pc	struct
.	O
x	double
,	O
datapoint	struct
.	O
pc	struct
.	O
y	double
)	O
)	O
;	O
xarray	pointer
[	O
polyline_len	int
]	O
.	O
pc	struct
.	O
x	double
=	O
device_xc	int
;	O
xarray	pointer
[	O
polyline_len	int
]	O
.	O
pc	struct
.	O
y	double
=	O
device_yc	int
;	O
p0	struct
.	O
x	double
=	O
last_x	double
;	O
p0	struct
.	O
y	double
=	O
last_y	double
;	O
pp1	struct
=	O
datapoint	struct
.	O
p	struct
;	O
pc	struct
=	O
datapoint	struct
.	O
pc	struct
;	O
angle	double
=	O
_angle_of_arc	function
(	O
p0	struct
,	O
pp1	struct
,	O
pc	struct
)	O
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
nonreflection	enum
)	O
angle	double
=	O
-	O
angle	double
;	O
xarray	pointer
[	O
polyline_len	int
]	O
.	O
angle	double
=	O
angle	double
;	O
}	O
else	O
if	O
(	O
element_type	enum
==	O
S_CUBIC	int
)	O
{	O
xarray	pointer
[	O
polyline_len	int
]	O
.	O
pc	struct
.	O
x	double
=	O
IROUND	O
(	O
XD	O
(	O
datapoint	struct
.	O
pc	struct
.	O
x	double
,	O
datapoint	struct
.	O
pc	struct
.	O
y	double
)	O
)	O
;	O
xarray	pointer
[	O
polyline_len	int
]	O
.	O
pc	struct
.	O
y	double
=	O
IROUND	O
(	O
YD	O
(	O
datapoint	struct
.	O
pc	struct
.	O
x	double
,	O
datapoint	struct
.	O
pc	struct
.	O
y	double
)	O
)	O
;	O
xarray	pointer
[	O
polyline_len	int
]	O
.	O
pd	struct
.	O
x	double
=	O
IROUND	O
(	O
XD	O
(	O
datapoint	struct
.	O
pd	struct
.	O
x	double
,	O
datapoint	struct
.	O
pd	struct
.	O
y	double
)	O
)	O
;	O
xarray	pointer
[	O
polyline_len	int
]	O
.	O
pd	struct
.	O
y	double
=	O
IROUND	O
(	O
YD	O
(	O
datapoint	struct
.	O
pd	struct
.	O
x	double
,	O
datapoint	struct
.	O
pd	struct
.	O
y	double
)	O
)	O
;	O
}	O
last_x	double
=	O
datapoint	struct
.	O
p	struct
.	O
x	double
;	O
last_y	double
=	O
datapoint	struct
.	O
p	struct
.	O
y	double
;	O
polyline_len	int
++	O
;	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
num_segments	int
>	O
1	int
&&	O
polyline_len	int
==	O
1	int
)	O
{	O
if	O
(	O
identical_user_coordinates	enum
==	O
false	int
||	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
==	O
PL_CAP_ROUND	int
)	O
{	O
double	O
r	int
=	O
0.5	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width	double
;	O
double	O
device_frame_radius	double
;	O
savedpoint	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
;	O
_pl_h_set_position	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
=	O
savedpoint	struct
;	O
{	O
_pl_h_set_fill_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
true	int
)	O
;	O
_pl_h_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
device_frame_radius	double
=	O
sqrt	function
(	O
XDV	O
(	O
r	int
,	O
0	int
)	O
*	O
XDV	O
(	O
r	int
,	O
0	int
)	O
+	O
YDV	O
(	O
r	int
,	O
0	int
)	O
*	O
YDV	O
(	O
r	int
,	O
0	int
)	O
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
==	O
false	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"WG%d,0,360;"	pointer
,	O
IROUND	O
(	O
device_frame_radius	double
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
<	O
2	int
)	O
_pl_h_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
free	function
(	O
xarray	pointer
)	O
;	O
break	O
;	O
}	O
use_polygon_buffer	enum
=	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
||	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
1	int
&&	O
(	O
polyline_len	int
>	O
2	int
||	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
)	O
)	O
?	O
true	int
:	O
false	int
)	O
;	O
_pl_h_set_pen_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
HPGL_OBJECT_PATH	int
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
&&	O
_plotter	pointer
->	O
hpgl_version	int
==	O
1	int
)	O
{	O
free	function
(	O
xarray	pointer
)	O
;	O
break	O
;	O
}	O
_pl_h_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
savedpoint	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
;	O
_pl_h_set_position	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
=	O
savedpoint	struct
;	O
if	O
(	O
use_polygon_buffer	enum
)	O
{	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"PM0;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
if	O
(	O
use_polygon_buffer	enum
||	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
hpgl_pendown	enum
==	O
false	int
)	O
{	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"PD;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_pendown	enum
=	O
true	int
;	O
}	O
i	int
=	O
1	int
;	O
while	O
(	O
i	int
<	O
polyline_len	int
)	O
{	O
switch	O
(	O
(	O
int	O
)	O
xarray	pointer
[	O
i	int
]	O
.	O
type	enum
)	O
{	O
case	O
(	O
int	O
)	O
S_LINE	int
:	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"PA"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"%d,%d"	pointer
,	O
xarray	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
i	int
++	O
;	O
while	O
(	O
i	int
<	O
polyline_len	int
&&	O
xarray	pointer
[	O
i	int
]	O
.	O
type	enum
==	O
S_LINE	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
",%d,%d"	pointer
,	O
xarray	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
i	int
++	O
;	O
}	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
";"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
S_CUBIC	int
:	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"BZ"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"%d,%d,%d,%d,%d,%d"	pointer
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
x	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
y	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
x	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
y	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
i	int
++	O
;	O
while	O
(	O
i	int
<	O
polyline_len	int
&&	O
xarray	pointer
[	O
i	int
]	O
.	O
type	enum
==	O
S_CUBIC	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
",%d,%d,%d,%d,%d,%d"	pointer
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
x	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
y	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
x	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pd	struct
.	O
y	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
x	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
p	struct
.	O
y	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
i	int
++	O
;	O
}	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
";"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
S_ARC	int
:	O
{	O
double	O
degrees	double
;	O
int	O
int_degrees	int
;	O
degrees	double
=	O
180.0	int
*	O
xarray	pointer
[	O
i	int
]	O
.	O
angle	double
/	O
M_PI	int
;	O
int_degrees	int
=	O
IROUND	O
(	O
degrees	double
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
>	O
0	int
)	O
{	O
if	O
(	O
degrees	double
==	O
(	O
double	O
)	O
int_degrees	int
)	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"AA%d,%d,%d;"	pointer
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
x	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
y	double
,	O
int_degrees	int
)	O
;	O
else	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"AA%d,%d,%.3f;"	pointer
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
x	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
y	double
,	O
degrees	double
)	O
;	O
}	O
else	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"AA%d,%d,%d;"	pointer
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
x	double
,	O
xarray	pointer
[	O
i	int
]	O
.	O
pc	struct
.	O
y	double
,	O
int_degrees	int
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
i	int
++	O
;	O
}	O
break	O
;	O
default	O
:	O
i	int
++	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
use_polygon_buffer	enum
)	O
{	O
if	O
(	O
!	O
closed	enum
)	O
{	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"PU;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_pendown	enum
=	O
false	int
;	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"PM2;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
else	O
{	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"PM2;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"PU;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_pendown	enum
=	O
false	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
)	O
{	O
_pl_h_set_fill_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
==	O
false	int
)	O
{	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_rule_type	int
)	O
{	O
case	O
PL_FILL_ODD_WINDING	int
:	O
default	O
:	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"FP;"	pointer
)	O
;	O
break	O
;	O
case	O
PL_FILL_NONZERO_WINDING	int
:	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
)	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"FP1;"	pointer
)	O
;	O
else	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"FP;"	pointer
)	O
;	O
break	O
;	O
}	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
<	O
2	int
)	O
_pl_h_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
)	O
{	O
_pl_h_set_pen_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
HPGL_OBJECT_PATH	int
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
==	O
false	int
)	O
{	O
_pl_h_set_pen_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
HPGL_OBJECT_PATH	int
)	O
;	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"EP;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
}	O
}	O
_plotter	pointer
->	O
hpgl_position_is_unknown	enum
=	O
true	int
;	O
free	function
(	O
xarray	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
PATH_BOX	int
:	O
{	O
plPoint	struct
p0	struct
,	O
p1	struct
,	O
savedpoint	struct
;	O
p0	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
p0	struct
;	O
p1	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
p1	struct
;	O
_pl_h_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
savedpoint	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
=	O
p0	struct
;	O
_pl_h_set_position	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
=	O
savedpoint	struct
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
)	O
{	O
_pl_h_set_fill_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
==	O
false	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"RA%d,%d;"	pointer
,	O
IROUND	O
(	O
XD	O
(	O
p1	struct
.	O
x	double
,	O
p1	struct
.	O
y	double
)	O
)	O
,	O
IROUND	O
(	O
YD	O
(	O
p1	struct
.	O
x	double
,	O
p1	struct
.	O
y	double
)	O
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
<	O
2	int
)	O
_pl_h_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
)	O
{	O
_pl_h_set_pen_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
HPGL_OBJECT_PATH	int
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
==	O
false	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"EA%d,%d;"	pointer
,	O
IROUND	O
(	O
XD	O
(	O
p1	struct
.	O
x	double
,	O
p1	struct
.	O
y	double
)	O
)	O
,	O
IROUND	O
(	O
YD	O
(	O
p1	struct
.	O
x	double
,	O
p1	struct
.	O
y	double
)	O
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
PATH_CIRCLE	int
:	O
{	O
plPoint	struct
pc	struct
,	O
savedpoint	struct
;	O
double	O
r	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
radius	double
;	O
double	O
radius	double
=	O
sqrt	function
(	O
XDV	O
(	O
r	int
,	O
0	int
)	O
*	O
XDV	O
(	O
r	int
,	O
0	int
)	O
+	O
YDV	O
(	O
r	int
,	O
0	int
)	O
*	O
YDV	O
(	O
r	int
,	O
0	int
)	O
)	O
;	O
pc	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
->	O
pc	struct
;	O
_pl_h_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
savedpoint	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
=	O
pc	struct
;	O
_pl_h_set_position	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
=	O
savedpoint	struct
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
)	O
{	O
_pl_h_set_fill_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
false	int
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
==	O
false	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"WG%d,0,360;"	pointer
,	O
IROUND	O
(	O
radius	double
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
<	O
2	int
)	O
_pl_h_set_attributes	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
)	O
{	O
_pl_h_set_pen_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
HPGL_OBJECT_PATH	int
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
==	O
false	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"CI%d;"	pointer
,	O
IROUND	O
(	O
radius	double
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
}	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
void	O
_pl_h_set_position	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
xnew	int
,	O
ynew	int
;	O
xnew	int
=	O
IROUND	O
(	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
)	O
)	O
;	O
ynew	int
=	O
IROUND	O
(	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
)	O
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_position_is_unknown	enum
==	O
true	int
||	O
xnew	int
!=	O
_plotter	pointer
->	O
hpgl_pos	struct
.	O
x	double
||	O
ynew	int
!=	O
_plotter	pointer
->	O
hpgl_pos	struct
.	O
y	double
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
hpgl_pendown	enum
==	O
true	int
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"PU;PA%d,%d;"	pointer
,	O
xnew	int
,	O
ynew	int
)	O
;	O
_plotter	pointer
->	O
hpgl_pendown	enum
=	O
false	int
;	O
}	O
else	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"PA%d,%d;"	pointer
,	O
xnew	int
,	O
ynew	int
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_position_is_unknown	enum
=	O
false	int
;	O
_plotter	pointer
->	O
hpgl_pos	struct
.	O
x	double
=	O
xnew	int
;	O
_plotter	pointer
->	O
hpgl_pos	struct
.	O
y	double
=	O
ynew	int
;	O
}	O
}	O
bool	enum
_pl_h_paint_paths	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
return	O
false	int
;	O
}	O
