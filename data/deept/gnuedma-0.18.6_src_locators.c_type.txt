ESint32	long
EDMAPROC	O
_edma_look4_met_single	function
(	O
POBJ	pointer
IdObj	long
,	O
EPChar	pointer
MetName	pointer
,	O
EPChar	pointer
Signature	pointer
)	O
;	O
ESint32	long
EDMAPROC	O
_edma_look4_met_ext_down	function
(	O
POBJ	pointer
*	O
Obj1	pointer
,	O
POBJ	pointer
ObjFrom	pointer
,	O
EPChar	pointer
MetName	pointer
,	O
EPChar	pointer
Signature	pointer
)	O
;	O
ESint32	long
EDMAPROC	O
_edma_look4_closer_met_up	function
(	O
POBJ	pointer
*	O
Obj1	pointer
,	O
POBJ	pointer
ObjFrom	pointer
,	O
EPChar	pointer
MetName	pointer
,	O
EPChar	pointer
Signature	pointer
,	O
ESint32	long
down	long
)	O
;	O
ESint32	long
EDMAPROC	O
_edma_look4_closer_met_down	function
(	O
POBJ	pointer
*	O
Obj1	pointer
,	O
POBJ	pointer
ObjFrom	pointer
,	O
EPChar	pointer
MetName	pointer
,	O
EPChar	pointer
Signature	pointer
)	O
;	O
ESint32	long
EDMAPROC	O
_edma_look4_prop_single	function
(	O
POBJ	pointer
IdObj	long
,	O
EPChar	pointer
PropName	pointer
)	O
;	O
ESint32	long
EDMAPROC	O
_edma_look4_prop_ext_down	function
(	O
POBJ	pointer
*	O
Obj1	pointer
,	O
POBJ	pointer
ObjFrom	pointer
,	O
EPChar	pointer
MetName	pointer
)	O
;	O
ESint32	long
EDMAPROC	O
_edma_look4_closer_prop_up	function
(	O
POBJ	pointer
*	O
Obj1	pointer
,	O
POBJ	pointer
ObjFrom	pointer
,	O
EPChar	pointer
MetName	pointer
,	O
ESint32	long
down	long
)	O
;	O
ESint32	long
EDMAPROC	O
_edma_look4_closer_prop_down	function
(	O
POBJ	pointer
*	O
Obj1	pointer
,	O
POBJ	pointer
ObjFrom	pointer
,	O
EPChar	pointer
MetName	pointer
)	O
;	O
ESint32	long
EDMAPROC	O
_edma_look4_met_single	function
(	O
POBJ	pointer
pObj	pointer
,	O
EPChar	pointer
MetName	pointer
,	O
EPChar	pointer
Signature	pointer
)	O
{	O
ESint32	long
indx	long
,	O
key	long
;	O
key	long
=	O
-	O
1	int
;	O
indx	long
=	O
edma_dict_get_next_index	function
(	O
pClass	pointer
[	O
pObj	pointer
->	O
IdClass	long
]	O
->	O
met_dict	pointer
,	O
MetName	pointer
,	O
&	O
key	long
)	O
;	O
if	O
(	O
Signature	pointer
)	O
do	O
{	O
if	O
(	O
(	O
strncmp	function
(	O
pClass	pointer
[	O
pObj	pointer
->	O
IdClass	long
]	O
->	O
Met	pointer
[	O
indx	long
]	O
.	O
Sign	array
,	O
Signature	pointer
,	O
EDMA_MET_SIG_LEN	int
)	O
)	O
==	O
0	int
)	O
break	O
;	O
indx	long
=	O
edma_dict_get_next_index	function
(	O
pClass	pointer
[	O
pObj	pointer
->	O
IdClass	long
]	O
->	O
met_dict	pointer
,	O
MetName	pointer
,	O
&	O
key	long
)	O
;	O
}	O
while	O
(	O
indx	long
>=	O
0	int
)	O
;	O
return	O
indx	long
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_look4_prop_single	function
(	O
POBJ	pointer
pObj	pointer
,	O
EPChar	pointer
PropName	pointer
)	O
{	O
return	O
edma_dict_get_index	function
(	O
pClass	pointer
[	O
pObj	pointer
->	O
IdClass	long
]	O
->	O
prop_dict	pointer
,	O
PropName	pointer
)	O
;	O
}	O
ESint32	long
EDMAPROC	O
edma_look4_met	function
(	O
POBJ	pointer
*	O
pObj1	pointer
,	O
EPChar	pointer
MetName1	pointer
,	O
EPChar	pointer
Signature	pointer
)	O
{	O
EPChar	pointer
MetName	pointer
;	O
ESint32	long
indx	long
;	O
POBJ	pointer
orig	pointer
;	O
if	O
(	O
MetName1	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
MetName	pointer
=	O
MetName1	pointer
+	O
1	int
;	O
indx	long
=	O
_edma_look4_closer_met_down	function
(	O
pObj1	pointer
,	O
NULL	O
,	O
MetName	pointer
,	O
Signature	pointer
)	O
;	O
if	O
(	O
indx	long
==	O
-	O
1	int
)	O
{	O
indx	long
=	O
_edma_look4_closer_met_up	function
(	O
pObj1	pointer
,	O
NULL	O
,	O
MetName	pointer
,	O
Signature	pointer
,	O
1	int
)	O
;	O
}	O
return	O
indx	long
;	O
}	O
else	O
{	O
orig	pointer
=	O
*	O
pObj1	pointer
;	O
indx	long
=	O
_edma_look4_met_single	function
(	O
orig	pointer
,	O
MetName1	pointer
,	O
Signature	pointer
)	O
;	O
if	O
(	O
indx	long
==	O
-	O
1	int
)	O
indx	long
=	O
_edma_look4_closer_met_up	function
(	O
pObj1	pointer
,	O
orig	pointer
,	O
MetName1	pointer
,	O
Signature	pointer
,	O
0	int
)	O
;	O
return	O
indx	long
;	O
}	O
}	O
ESint32	long
EDMAPROC	O
edma_look4_met_ext	function
(	O
POBJ	pointer
*	O
pObj	pointer
,	O
EPChar	pointer
MetName1	pointer
,	O
EPChar	pointer
Signature	pointer
)	O
{	O
EPChar	pointer
MetName	pointer
;	O
ESint32	long
indx	long
;	O
POBJ	pointer
orig	pointer
;	O
if	O
(	O
MetName1	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
MetName	pointer
=	O
MetName1	pointer
+	O
1	int
;	O
indx	long
=	O
_edma_look4_closer_met_down	function
(	O
pObj	pointer
,	O
NULL	O
,	O
MetName	pointer
,	O
Signature	pointer
)	O
;	O
if	O
(	O
indx	long
==	O
-	O
1	int
)	O
{	O
indx	long
=	O
_edma_look4_closer_met_up	function
(	O
pObj	pointer
,	O
NULL	O
,	O
MetName	pointer
,	O
Signature	pointer
,	O
1	int
)	O
;	O
}	O
return	O
indx	long
;	O
}	O
else	O
{	O
orig	pointer
=	O
*	O
pObj	pointer
;	O
indx	long
=	O
_edma_look4_met_ext_down	function
(	O
pObj	pointer
,	O
NULL	O
,	O
MetName1	pointer
,	O
Signature	pointer
)	O
;	O
if	O
(	O
indx	long
==	O
-	O
1	int
)	O
{	O
indx	long
=	O
_edma_look4_closer_met_up	function
(	O
pObj	pointer
,	O
orig	pointer
,	O
MetName1	pointer
,	O
Signature	pointer
,	O
1	int
)	O
;	O
}	O
return	O
indx	long
;	O
}	O
}	O
ESint32	long
EDMAPROC	O
_edma_look4_met_ext_down	function
(	O
POBJ	pointer
*	O
pObj1	pointer
,	O
POBJ	pointer
pObjFrom	pointer
,	O
EPChar	pointer
MetName	pointer
,	O
EPChar	pointer
Signature	pointer
)	O
{	O
EUint32	long
j	long
,	O
n	long
;	O
ESint32	long
Flag	char
;	O
POBJ	pointer
pObj	pointer
,	O
pObj_temp	pointer
;	O
SC_ID	struct
*	O
down	long
;	O
pObj	pointer
=	O
*	O
pObj1	pointer
;	O
n	long
=	O
pObj	pointer
->	O
nDownTable	long
;	O
if	O
(	O
n	long
)	O
{	O
down	long
=	O
pObj	pointer
->	O
DownTable	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	long
;	O
j	long
++	O
)	O
{	O
pObj_temp	pointer
=	O
gObj	O
[	O
down	long
[	O
j	long
]	O
.	O
Obj	long
]	O
;	O
if	O
(	O
pObj_temp	pointer
==	O
pObjFrom	pointer
)	O
continue	O
;	O
Flag	char
=	O
_edma_look4_met_ext_down	function
(	O
&	O
pObj_temp	pointer
,	O
pObj	pointer
,	O
MetName	pointer
,	O
Signature	pointer
)	O
;	O
if	O
(	O
Flag	char
!=	O
-	O
1	int
)	O
{	O
*	O
pObj1	pointer
=	O
pObj_temp	pointer
;	O
return	O
Flag	char
;	O
}	O
}	O
}	O
return	O
_edma_look4_met_single	function
(	O
pObj	pointer
,	O
MetName	pointer
,	O
Signature	pointer
)	O
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_look4_closer_met_up	function
(	O
POBJ	pointer
*	O
pObj1	pointer
,	O
POBJ	pointer
pObjFrom	pointer
,	O
EPChar	pointer
MetName	pointer
,	O
EPChar	pointer
Signature	pointer
,	O
ESint32	long
down	long
)	O
{	O
EUint32	long
j	long
,	O
n	long
;	O
ESint32	long
indx	long
=	O
-	O
1	int
;	O
ESint32	long
Flag	char
;	O
POBJ	pointer
pObj	pointer
;	O
SC_ID	struct
*	O
up	pointer
;	O
pObj	pointer
=	O
*	O
pObj1	pointer
;	O
n	long
=	O
pObj	pointer
->	O
nUpTable	long
;	O
if	O
(	O
n	long
)	O
{	O
up	pointer
=	O
pObj	pointer
->	O
UpTable	pointer
;	O
indx	long
=	O
-	O
1	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	long
;	O
j	long
++	O
)	O
{	O
*	O
pObj1	pointer
=	O
gObj	O
[	O
up	pointer
[	O
j	long
]	O
.	O
Obj	long
]	O
;	O
if	O
(	O
*	O
pObj1	pointer
==	O
pObjFrom	pointer
)	O
continue	O
;	O
indx	long
=	O
_edma_look4_met_single	function
(	O
*	O
pObj1	pointer
,	O
MetName	pointer
,	O
Signature	pointer
)	O
;	O
if	O
(	O
indx	long
!=	O
-	O
1	int
)	O
return	O
indx	long
;	O
Flag	char
=	O
_edma_look4_closer_met_up	function
(	O
pObj1	pointer
,	O
pObjFrom	pointer
,	O
MetName	pointer
,	O
Signature	pointer
,	O
down	long
)	O
;	O
if	O
(	O
Flag	char
!=	O
-	O
1	int
)	O
{	O
return	O
Flag	char
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
down	long
==	O
1	int
)	O
return	O
_edma_look4_met_ext_down	function
(	O
pObj1	pointer
,	O
pObjFrom	pointer
,	O
MetName	pointer
,	O
Signature	pointer
)	O
;	O
}	O
return	O
indx	long
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_look4_closer_met_down	function
(	O
POBJ	pointer
*	O
pObj1	pointer
,	O
POBJ	pointer
pObjFrom	pointer
,	O
EPChar	pointer
MetName	pointer
,	O
EPChar	pointer
Signature	pointer
)	O
{	O
EUint32	long
j	long
,	O
n	long
;	O
ESint32	long
Flag	char
,	O
indx	long
;	O
POBJ	pointer
pObj	pointer
;	O
SC_ID	struct
*	O
down	long
;	O
pObj	pointer
=	O
*	O
pObj1	pointer
;	O
indx	long
=	O
_edma_look4_met_single	function
(	O
pObj	pointer
,	O
MetName	pointer
,	O
Signature	pointer
)	O
;	O
if	O
(	O
indx	long
==	O
-	O
1	int
)	O
{	O
n	long
=	O
pObj	pointer
->	O
nDownTable	long
;	O
down	long
=	O
pObj	pointer
->	O
DownTable	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	long
;	O
j	long
++	O
)	O
{	O
*	O
pObj1	pointer
=	O
gObj	O
[	O
down	long
[	O
j	long
]	O
.	O
Obj	long
]	O
;	O
if	O
(	O
*	O
pObj1	pointer
==	O
pObjFrom	pointer
)	O
continue	O
;	O
Flag	char
=	O
_edma_look4_closer_met_down	function
(	O
pObj1	pointer
,	O
pObj	pointer
,	O
MetName	pointer
,	O
Signature	pointer
)	O
;	O
if	O
(	O
Flag	char
!=	O
-	O
1	int
)	O
{	O
return	O
Flag	char
;	O
}	O
}	O
}	O
return	O
indx	long
;	O
}	O
ESint32	long
EDMAPROC	O
edma_look4_prop	function
(	O
POBJ	pointer
*	O
pObj1	pointer
,	O
EPChar	pointer
PropName1	pointer
)	O
{	O
EPChar	pointer
PropName	pointer
;	O
ESint32	long
indx	long
;	O
POBJ	pointer
orig	pointer
;	O
if	O
(	O
PropName1	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
PropName	pointer
=	O
PropName1	pointer
+	O
1	int
;	O
indx	long
=	O
_edma_look4_closer_prop_down	function
(	O
pObj1	pointer
,	O
NULL	O
,	O
PropName	pointer
)	O
;	O
if	O
(	O
indx	long
==	O
-	O
1	int
)	O
{	O
indx	long
=	O
_edma_look4_closer_prop_up	function
(	O
pObj1	pointer
,	O
NULL	O
,	O
PropName	pointer
,	O
1	int
)	O
;	O
}	O
return	O
indx	long
;	O
}	O
else	O
{	O
orig	pointer
=	O
*	O
pObj1	pointer
;	O
indx	long
=	O
_edma_look4_prop_single	function
(	O
orig	pointer
,	O
PropName1	pointer
)	O
;	O
if	O
(	O
indx	long
==	O
-	O
1	int
)	O
indx	long
=	O
_edma_look4_closer_prop_up	function
(	O
pObj1	pointer
,	O
orig	pointer
,	O
PropName1	pointer
,	O
0	int
)	O
;	O
return	O
indx	long
;	O
}	O
}	O
ESint32	long
EDMAPROC	O
edma_look4_prop_ext	function
(	O
POBJ	pointer
*	O
pObj	pointer
,	O
EPChar	pointer
PropName1	pointer
)	O
{	O
EPChar	pointer
PropName	pointer
;	O
ESint32	long
indx	long
;	O
POBJ	pointer
orig	pointer
;	O
if	O
(	O
PropName1	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
PropName	pointer
=	O
PropName1	pointer
+	O
1	int
;	O
indx	long
=	O
_edma_look4_closer_prop_down	function
(	O
pObj	pointer
,	O
NULL	O
,	O
PropName	pointer
)	O
;	O
if	O
(	O
indx	long
==	O
-	O
1	int
)	O
{	O
indx	long
=	O
_edma_look4_closer_prop_up	function
(	O
pObj	pointer
,	O
NULL	O
,	O
PropName	pointer
,	O
1	int
)	O
;	O
}	O
return	O
indx	long
;	O
}	O
else	O
{	O
orig	pointer
=	O
*	O
pObj	pointer
;	O
indx	long
=	O
_edma_look4_prop_ext_down	function
(	O
pObj	pointer
,	O
NULL	O
,	O
PropName1	pointer
)	O
;	O
if	O
(	O
indx	long
==	O
-	O
1	int
)	O
{	O
indx	long
=	O
_edma_look4_closer_prop_up	function
(	O
pObj	pointer
,	O
orig	pointer
,	O
PropName1	pointer
,	O
1	int
)	O
;	O
}	O
return	O
indx	long
;	O
}	O
}	O
ESint32	long
EDMAPROC	O
_edma_look4_prop_ext_down	function
(	O
POBJ	pointer
*	O
pObj1	pointer
,	O
POBJ	pointer
pObjFrom	pointer
,	O
EPChar	pointer
PropName	pointer
)	O
{	O
EUint32	long
j	long
,	O
n	long
;	O
ESint32	long
Flag	char
;	O
POBJ	pointer
pObj	pointer
,	O
pObj_temp	pointer
;	O
SC_ID	struct
*	O
down	long
;	O
pObj	pointer
=	O
*	O
pObj1	pointer
;	O
n	long
=	O
pObj	pointer
->	O
nDownTable	long
;	O
if	O
(	O
n	long
)	O
{	O
down	long
=	O
pObj	pointer
->	O
DownTable	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	long
;	O
j	long
++	O
)	O
{	O
pObj_temp	pointer
=	O
gObj	O
[	O
down	long
[	O
j	long
]	O
.	O
Obj	long
]	O
;	O
if	O
(	O
pObj_temp	pointer
==	O
pObjFrom	pointer
)	O
continue	O
;	O
Flag	char
=	O
_edma_look4_prop_ext_down	function
(	O
&	O
pObj_temp	pointer
,	O
pObj	pointer
,	O
PropName	pointer
)	O
;	O
if	O
(	O
Flag	char
!=	O
-	O
1	int
)	O
{	O
*	O
pObj1	pointer
=	O
pObj_temp	pointer
;	O
return	O
Flag	char
;	O
}	O
}	O
}	O
return	O
_edma_look4_prop_single	function
(	O
pObj	pointer
,	O
PropName	pointer
)	O
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_look4_closer_prop_up	function
(	O
POBJ	pointer
*	O
pObj1	pointer
,	O
POBJ	pointer
pObjFrom	pointer
,	O
EPChar	pointer
PropName	pointer
,	O
ESint32	long
down	long
)	O
{	O
EUint32	long
j	long
,	O
n	long
;	O
ESint32	long
indx	long
=	O
-	O
1	int
;	O
ESint32	long
Flag	char
;	O
POBJ	pointer
pObj	pointer
;	O
SC_ID	struct
*	O
up	pointer
;	O
pObj	pointer
=	O
*	O
pObj1	pointer
;	O
n	long
=	O
pObj	pointer
->	O
nUpTable	long
;	O
if	O
(	O
n	long
)	O
{	O
up	pointer
=	O
pObj	pointer
->	O
UpTable	pointer
;	O
indx	long
=	O
-	O
1	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	long
;	O
j	long
++	O
)	O
{	O
*	O
pObj1	pointer
=	O
gObj	O
[	O
up	pointer
[	O
j	long
]	O
.	O
Obj	long
]	O
;	O
if	O
(	O
*	O
pObj1	pointer
==	O
pObjFrom	pointer
)	O
continue	O
;	O
indx	long
=	O
_edma_look4_prop_single	function
(	O
*	O
pObj1	pointer
,	O
PropName	pointer
)	O
;	O
if	O
(	O
indx	long
!=	O
-	O
1	int
)	O
return	O
indx	long
;	O
Flag	char
=	O
_edma_look4_closer_prop_up	function
(	O
pObj1	pointer
,	O
pObjFrom	pointer
,	O
PropName	pointer
,	O
down	long
)	O
;	O
if	O
(	O
Flag	char
!=	O
-	O
1	int
)	O
{	O
return	O
Flag	char
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
down	long
==	O
1	int
)	O
return	O
_edma_look4_prop_ext_down	function
(	O
pObj1	pointer
,	O
pObjFrom	pointer
,	O
PropName	pointer
)	O
;	O
}	O
return	O
indx	long
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_look4_closer_prop_down	function
(	O
POBJ	pointer
*	O
pObj1	pointer
,	O
POBJ	pointer
pObjFrom	pointer
,	O
EPChar	pointer
PropName	pointer
)	O
{	O
EUint32	long
j	long
,	O
n	long
;	O
ESint32	long
Flag	char
,	O
indx	long
;	O
POBJ	pointer
pObj	pointer
;	O
SC_ID	struct
*	O
down	long
;	O
pObj	pointer
=	O
*	O
pObj1	pointer
;	O
indx	long
=	O
_edma_look4_prop_single	function
(	O
pObj	pointer
,	O
PropName	pointer
)	O
;	O
if	O
(	O
indx	long
==	O
-	O
1	int
)	O
{	O
n	long
=	O
pObj	pointer
->	O
nDownTable	long
;	O
down	long
=	O
pObj	pointer
->	O
DownTable	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	long
;	O
j	long
++	O
)	O
{	O
*	O
pObj1	pointer
=	O
gObj	O
[	O
down	long
[	O
j	long
]	O
.	O
Obj	long
]	O
;	O
if	O
(	O
*	O
pObj1	pointer
==	O
pObjFrom	pointer
)	O
continue	O
;	O
Flag	char
=	O
_edma_look4_closer_prop_down	function
(	O
pObj1	pointer
,	O
pObj	pointer
,	O
PropName	pointer
)	O
;	O
if	O
(	O
Flag	char
!=	O
-	O
1	int
)	O
{	O
return	O
Flag	char
;	O
}	O
}	O
}	O
return	O
indx	long
;	O
}	O
OBJID	long
EDMAPROC	O
_edma_locate_method	function
(	O
OBJID	long
IdObj	long
,	O
EPChar	pointer
Id1	pointer
,	O
EPChar	pointer
Signature	pointer
,	O
EPSint32	pointer
has_cp	pointer
,	O
EPSint32	pointer
met_indx	pointer
)	O
{	O
EPChar	pointer
MetName	pointer
;	O
OBJID	long
aux_obj	long
;	O
POBJ	pointer
pObj	pointer
;	O
ESint32	long
pos	long
;	O
pos	long
=	O
strlen	function
(	O
Id1	pointer
)	O
;	O
while	O
(	O
(	O
Id1	pointer
[	O
pos	long
]	O
!=	O
'>'	O
)	O
&&	O
(	O
Id1	pointer
[	O
pos	long
]	O
!=	O
'<'	O
)	O
&&	O
(	O
pos	long
>	O
0	int
)	O
)	O
--	O
pos	long
;	O
if	O
(	O
pos	long
!=	O
0	int
)	O
{	O
MetName	pointer
=	O
Id1	pointer
+	O
pos	long
+	O
1	int
;	O
aux_obj	long
=	O
edma_parse_classpath	function
(	O
IdObj	long
,	O
Id1	pointer
,	O
pos	long
,	O
1	int
)	O
;	O
if	O
(	O
aux_obj	long
!=	O
-	O
1	int
)	O
{	O
pObj	pointer
=	O
gObj	O
[	O
aux_obj	long
]	O
;	O
if	O
(	O
(	O
*	O
met_indx	pointer
=	O
edma_look4_met	function
(	O
&	O
pObj	pointer
,	O
MetName	pointer
,	O
Signature	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_err	function
(	O
"[%s] Method '%s' not Found from classpath '%s'"	pointer
,	O
__FUNCTION__	O
,	O
MetName	pointer
,	O
Id1	pointer
)	O
;	O
}	O
}	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
pObj	pointer
=	O
gObj	O
[	O
IdObj	long
]	O
;	O
if	O
(	O
(	O
(	O
*	O
met_indx	pointer
=	O
edma_look4_met_ext	function
(	O
&	O
pObj	pointer
,	O
Id1	pointer
,	O
Signature	pointer
)	O
)	O
==	O
-	O
1	int
)	O
&&	O
(	O
gObj	O
[	O
IdObj	long
]	O
->	O
IdSIU	long
==	O
-	O
1	int
)	O
)	O
{	O
return	O
_edma_system_exception	function
(	O
"[_edma_locate_method] Method '%s' "	pointer
"not found in object '%ld' "	pointer
"through classpath: '%s'"	pointer
,	O
Id1	pointer
,	O
IdObj	long
,	O
Id1	pointer
)	O
;	O
}	O
}	O
*	O
has_cp	pointer
=	O
pos	long
;	O
return	O
pObj	pointer
->	O
IdObj	long
;	O
}	O
OBJID	long
EDMAPROC	O
_edma_locate_property	function
(	O
OBJID	long
IdObj	long
,	O
EPChar	pointer
Id1	pointer
,	O
EPSint32	pointer
has_cp	pointer
,	O
EPSint32	pointer
prop_indx	pointer
)	O
{	O
EPChar	pointer
PropName	pointer
;	O
OBJID	long
aux_obj	long
;	O
POBJ	pointer
pObj	pointer
;	O
ESint32	long
pos	long
;	O
pos	long
=	O
strlen	function
(	O
Id1	pointer
)	O
;	O
while	O
(	O
(	O
Id1	pointer
[	O
pos	long
]	O
!=	O
'>'	O
)	O
&&	O
(	O
Id1	pointer
[	O
pos	long
]	O
!=	O
'<'	O
)	O
&&	O
(	O
pos	long
>	O
0	int
)	O
)	O
--	O
pos	long
;	O
if	O
(	O
pos	long
!=	O
0	int
)	O
{	O
PropName	pointer
=	O
Id1	pointer
+	O
pos	long
+	O
1	int
;	O
aux_obj	long
=	O
edma_parse_classpath	function
(	O
IdObj	long
,	O
Id1	pointer
,	O
pos	long
,	O
1	int
)	O
;	O
if	O
(	O
aux_obj	long
!=	O
-	O
1	int
)	O
{	O
pObj	pointer
=	O
gObj	O
[	O
aux_obj	long
]	O
;	O
if	O
(	O
(	O
*	O
prop_indx	pointer
=	O
edma_look4_prop	function
(	O
&	O
pObj	pointer
,	O
PropName	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_err	function
(	O
"[%s] Property '%s' not Found from classpath '%s'"	pointer
,	O
__FUNCTION__	O
,	O
PropName	pointer
,	O
Id1	pointer
)	O
;	O
}	O
}	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
pObj	pointer
=	O
gObj	O
[	O
IdObj	long
]	O
;	O
if	O
(	O
(	O
(	O
*	O
prop_indx	pointer
=	O
edma_look4_prop_ext	function
(	O
&	O
pObj	pointer
,	O
Id1	pointer
)	O
)	O
==	O
-	O
1	int
)	O
&&	O
(	O
gObj	O
[	O
IdObj	long
]	O
->	O
IdSIU	long
==	O
-	O
1	int
)	O
)	O
{	O
return	O
_edma_system_exception	function
(	O
"[_edma_locate_property] "	pointer
"Property '%s' "	pointer
"not found in object '%ld' "	pointer
"through classpath: '%s'"	pointer
,	O
Id1	pointer
,	O
IdObj	long
,	O
Id1	pointer
)	O
;	O
}	O
}	O
*	O
has_cp	pointer
=	O
pos	long
;	O
return	O
pObj	pointer
->	O
IdObj	long
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_locate_uplink_by_name	function
(	O
OBJID	long
IdObj	long
,	O
EPChar	pointer
anchor_point	pointer
)	O
{	O
POBJ	pointer
pObj	pointer
;	O
ESint32	long
i	long
,	O
n	long
;	O
pObj	pointer
=	O
gObj	O
[	O
IdObj	long
]	O
;	O
n	long
=	O
pObj	pointer
->	O
nUpTable	long
;	O
if	O
(	O
n	long
==	O
0	int
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
strncmp	function
(	O
pObj	pointer
->	O
UpTable	pointer
[	O
i	long
]	O
.	O
Id	long
,	O
anchor_point	pointer
,	O
EDMA_GENERAL_ID_LEN	int
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
i	long
==	O
n	long
)	O
return	O
-	O
1	int
;	O
return	O
i	long
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_locate_downlink_by_name	function
(	O
OBJID	long
IdObj	long
,	O
EPChar	pointer
anchor_point	pointer
)	O
{	O
POBJ	pointer
pObj	pointer
;	O
ESint32	long
i	long
,	O
n	long
;	O
pObj	pointer
=	O
gObj	O
[	O
IdObj	long
]	O
;	O
n	long
=	O
pObj	pointer
->	O
nDownTable	long
;	O
if	O
(	O
n	long
==	O
0	int
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
strncmp	function
(	O
pObj	pointer
->	O
DownTable	pointer
[	O
i	long
]	O
.	O
Id	long
,	O
anchor_point	pointer
,	O
EDMA_GENERAL_ID_LEN	int
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
i	long
==	O
n	long
)	O
return	O
-	O
1	int
;	O
return	O
i	long
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_locate_uplink_by_pobj	function
(	O
POBJ	pointer
pObj_father	pointer
,	O
POBJ	pointer
pObj	pointer
)	O
{	O
ESint32	long
i	long
,	O
n	long
;	O
n	long
=	O
pObj_father	pointer
->	O
nUpTable	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
gObj	O
[	O
pObj_father	pointer
->	O
UpTable	pointer
[	O
i	long
]	O
.	O
Obj	long
]	O
==	O
pObj	pointer
)	O
break	O
;	O
if	O
(	O
i	long
==	O
n	long
)	O
return	O
-	O
1	int
;	O
return	O
i	long
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_locate_downlink_by_pobj	function
(	O
POBJ	pointer
pObj_father	pointer
,	O
POBJ	pointer
pObj	pointer
)	O
{	O
ESint32	long
i	long
,	O
n	long
;	O
n	long
=	O
pObj_father	pointer
->	O
nDownTable	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
gObj	O
[	O
pObj_father	pointer
->	O
DownTable	pointer
[	O
i	long
]	O
.	O
Obj	long
]	O
==	O
pObj	pointer
)	O
break	O
;	O
if	O
(	O
i	long
==	O
n	long
)	O
return	O
-	O
1	int
;	O
return	O
i	long
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_locate_uplink_by_obj	function
(	O
OBJID	long
id	pointer
,	O
OBJID	long
Obj	long
)	O
{	O
ESint32	long
i	long
,	O
n	long
;	O
POBJ	pointer
pObj	pointer
;	O
pObj	pointer
=	O
gObj	O
[	O
id	pointer
]	O
;	O
n	long
=	O
pObj	pointer
->	O
nUpTable	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
pObj	pointer
->	O
UpTable	pointer
[	O
i	long
]	O
.	O
Obj	long
==	O
Obj	long
)	O
break	O
;	O
if	O
(	O
i	long
==	O
n	long
)	O
return	O
-	O
1	int
;	O
return	O
i	long
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_locate_downlink_by_obj	function
(	O
OBJID	long
id	pointer
,	O
OBJID	long
Obj	long
)	O
{	O
ESint32	long
i	long
,	O
n	long
;	O
POBJ	pointer
pObj	pointer
;	O
pObj	pointer
=	O
gObj	O
[	O
id	pointer
]	O
;	O
n	long
=	O
pObj	pointer
->	O
nDownTable	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
if	O
(	O
pObj	pointer
->	O
DownTable	pointer
[	O
i	long
]	O
.	O
Obj	long
==	O
Obj	long
)	O
break	O
;	O
if	O
(	O
i	long
==	O
n	long
)	O
return	O
-	O
1	int
;	O
return	O
i	long
;	O
}	O
