static	O
const	O
unsigned	O
char	O
fillbuf	array
[	O
64	int
]	O
=	O
{	O
0x80	int
,	O
0	int
}	O
;	O
void	O
md5_init_ctx	function
(	O
struct	O
md5_ctx	struct
*	O
ctx	pointer
)	O
{	O
ctx	pointer
->	O
A	int
=	O
0x67452301	int
;	O
ctx	pointer
->	O
B	int
=	O
0xefcdab89	int
;	O
ctx	pointer
->	O
C	int
=	O
0x98badcfe	int
;	O
ctx	pointer
->	O
D	int
=	O
0x10325476	int
;	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
=	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
=	O
0	int
;	O
ctx	pointer
->	O
buflen	int
=	O
0	int
;	O
}	O
static	O
void	O
set_uint32	function
(	O
char	O
*	O
cp	pointer
,	O
uint32_t	int
v	int
)	O
{	O
memcpy	function
(	O
cp	pointer
,	O
&	O
v	int
,	O
sizeof	O
v	int
)	O
;	O
}	O
void	O
*	O
md5_read_ctx	function
(	O
const	O
struct	O
md5_ctx	struct
*	O
ctx	pointer
,	O
void	O
*	O
resbuf	pointer
)	O
{	O
char	O
*	O
r	pointer
=	O
resbuf	pointer
;	O
set_uint32	function
(	O
r	pointer
+	O
0	int
*	O
sizeof	O
ctx	pointer
->	O
A	int
,	O
SWAP	O
(	O
ctx	pointer
->	O
A	int
)	O
)	O
;	O
set_uint32	function
(	O
r	pointer
+	O
1	int
*	O
sizeof	O
ctx	pointer
->	O
B	int
,	O
SWAP	O
(	O
ctx	pointer
->	O
B	int
)	O
)	O
;	O
set_uint32	function
(	O
r	pointer
+	O
2	int
*	O
sizeof	O
ctx	pointer
->	O
C	int
,	O
SWAP	O
(	O
ctx	pointer
->	O
C	int
)	O
)	O
;	O
set_uint32	function
(	O
r	pointer
+	O
3	int
*	O
sizeof	O
ctx	pointer
->	O
D	int
,	O
SWAP	O
(	O
ctx	pointer
->	O
D	int
)	O
)	O
;	O
return	O
resbuf	pointer
;	O
}	O
void	O
*	O
md5_finish_ctx	function
(	O
struct	O
md5_ctx	struct
*	O
ctx	pointer
,	O
void	O
*	O
resbuf	pointer
)	O
{	O
uint32_t	int
bytes	int
=	O
ctx	pointer
->	O
buflen	int
;	O
size_t	long
size	long
=	O
(	O
bytes	int
<	O
56	int
)	O
?	O
64	int
/	O
4	int
:	O
64	int
*	O
2	int
/	O
4	int
;	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
+=	O
bytes	int
;	O
if	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
<	O
bytes	int
)	O
++	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
;	O
ctx	pointer
->	O
buffer	array
[	O
size	long
-	O
2	int
]	O
=	O
SWAP	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
<<	O
3	int
)	O
;	O
ctx	pointer
->	O
buffer	array
[	O
size	long
-	O
1	int
]	O
=	O
SWAP	O
(	O
(	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
<<	O
3	int
)	O
|	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
>>	O
29	int
)	O
)	O
;	O
memcpy	function
(	O
&	O
(	O
(	O
char	O
*	O
)	O
ctx	pointer
->	O
buffer	array
)	O
[	O
bytes	int
]	O
,	O
fillbuf	array
,	O
(	O
size	long
-	O
2	int
)	O
*	O
4	int
-	O
bytes	int
)	O
;	O
md5_process_block	function
(	O
ctx	pointer
->	O
buffer	array
,	O
size	long
*	O
4	int
,	O
ctx	pointer
)	O
;	O
return	O
md5_read_ctx	function
(	O
ctx	pointer
,	O
resbuf	pointer
)	O
;	O
}	O
int	O
md5_stream	function
(	O
FILE	struct
*	O
stream	pointer
,	O
void	O
*	O
resblock	pointer
)	O
{	O
struct	O
md5_ctx	struct
ctx	pointer
;	O
size_t	long
sum	long
;	O
char	O
*	O
buffer	array
=	O
malloc	function
(	O
BLOCKSIZE	int
+	O
72	int
)	O
;	O
if	O
(	O
!	O
buffer	array
)	O
return	O
1	int
;	O
md5_init_ctx	function
(	O
&	O
ctx	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
size_t	long
n	long
;	O
sum	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
n	long
=	O
fread	function
(	O
buffer	array
+	O
sum	long
,	O
1	int
,	O
BLOCKSIZE	int
-	O
sum	long
,	O
stream	pointer
)	O
;	O
sum	long
+=	O
n	long
;	O
if	O
(	O
sum	long
==	O
BLOCKSIZE	int
)	O
break	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
if	O
(	O
ferror	function
(	O
stream	pointer
)	O
)	O
{	O
free	function
(	O
buffer	array
)	O
;	O
return	O
1	int
;	O
}	O
goto	O
process_partial_block	O
;	O
}	O
if	O
(	O
feof	function
(	O
stream	pointer
)	O
)	O
goto	O
process_partial_block	O
;	O
}	O
md5_process_block	function
(	O
buffer	array
,	O
BLOCKSIZE	int
,	O
&	O
ctx	pointer
)	O
;	O
}	O
process_partial_block	O
:	O
if	O
(	O
sum	long
>	O
0	int
)	O
md5_process_bytes	function
(	O
buffer	array
,	O
sum	long
,	O
&	O
ctx	pointer
)	O
;	O
md5_finish_ctx	function
(	O
&	O
ctx	pointer
,	O
resblock	pointer
)	O
;	O
free	function
(	O
buffer	array
)	O
;	O
return	O
0	int
;	O
}	O
void	O
*	O
md5_buffer	function
(	O
const	O
char	O
*	O
buffer	array
,	O
size_t	long
len	long
,	O
void	O
*	O
resblock	pointer
)	O
{	O
struct	O
md5_ctx	struct
ctx	pointer
;	O
md5_init_ctx	function
(	O
&	O
ctx	pointer
)	O
;	O
md5_process_bytes	function
(	O
buffer	array
,	O
len	long
,	O
&	O
ctx	pointer
)	O
;	O
return	O
md5_finish_ctx	function
(	O
&	O
ctx	pointer
,	O
resblock	pointer
)	O
;	O
}	O
void	O
md5_process_bytes	function
(	O
const	O
void	O
*	O
buffer	array
,	O
size_t	long
len	long
,	O
struct	O
md5_ctx	struct
*	O
ctx	pointer
)	O
{	O
if	O
(	O
ctx	pointer
->	O
buflen	int
!=	O
0	int
)	O
{	O
size_t	long
left_over	long
=	O
ctx	pointer
->	O
buflen	int
;	O
size_t	long
add	long
=	O
128	int
-	O
left_over	long
>	O
len	long
?	O
len	long
:	O
128	int
-	O
left_over	long
;	O
memcpy	function
(	O
&	O
(	O
(	O
char	O
*	O
)	O
ctx	pointer
->	O
buffer	array
)	O
[	O
left_over	long
]	O
,	O
buffer	array
,	O
add	long
)	O
;	O
ctx	pointer
->	O
buflen	int
+=	O
add	long
;	O
if	O
(	O
ctx	pointer
->	O
buflen	int
>	O
64	int
)	O
{	O
md5_process_block	function
(	O
ctx	pointer
->	O
buffer	array
,	O
ctx	pointer
->	O
buflen	int
&	O
~	O
63	int
,	O
ctx	pointer
)	O
;	O
ctx	pointer
->	O
buflen	int
&=	O
63	int
;	O
memcpy	function
(	O
ctx	pointer
->	O
buffer	array
,	O
&	O
(	O
(	O
char	O
*	O
)	O
ctx	pointer
->	O
buffer	array
)	O
[	O
(	O
left_over	long
+	O
add	long
)	O
&	O
~	O
63	int
]	O
,	O
ctx	pointer
->	O
buflen	int
)	O
;	O
}	O
buffer	array
=	O
(	O
const	O
char	O
*	O
)	O
buffer	array
+	O
add	long
;	O
len	long
-=	O
add	long
;	O
}	O
if	O
(	O
len	long
>=	O
64	int
)	O
{	O
if	O
(	O
UNALIGNED_P	O
(	O
buffer	array
)	O
)	O
while	O
(	O
len	long
>	O
64	int
)	O
{	O
md5_process_block	function
(	O
memcpy	function
(	O
ctx	pointer
->	O
buffer	array
,	O
buffer	array
,	O
64	int
)	O
,	O
64	int
,	O
ctx	pointer
)	O
;	O
buffer	array
=	O
(	O
const	O
char	O
*	O
)	O
buffer	array
+	O
64	int
;	O
len	long
-=	O
64	int
;	O
}	O
else	O
{	O
md5_process_block	function
(	O
buffer	array
,	O
len	long
&	O
~	O
63	int
,	O
ctx	pointer
)	O
;	O
buffer	array
=	O
(	O
const	O
char	O
*	O
)	O
buffer	array
+	O
(	O
len	long
&	O
~	O
63	int
)	O
;	O
len	long
&=	O
63	int
;	O
}	O
}	O
if	O
(	O
len	long
>	O
0	int
)	O
{	O
size_t	long
left_over	long
=	O
ctx	pointer
->	O
buflen	int
;	O
memcpy	function
(	O
&	O
(	O
(	O
char	O
*	O
)	O
ctx	pointer
->	O
buffer	array
)	O
[	O
left_over	long
]	O
,	O
buffer	array
,	O
len	long
)	O
;	O
left_over	long
+=	O
len	long
;	O
if	O
(	O
left_over	long
>=	O
64	int
)	O
{	O
md5_process_block	function
(	O
ctx	pointer
->	O
buffer	array
,	O
64	int
,	O
ctx	pointer
)	O
;	O
left_over	long
-=	O
64	int
;	O
memcpy	function
(	O
ctx	pointer
->	O
buffer	array
,	O
&	O
ctx	pointer
->	O
buffer	array
[	O
16	int
]	O
,	O
left_over	long
)	O
;	O
}	O
ctx	pointer
->	O
buflen	int
=	O
left_over	long
;	O
}	O
}	O
void	O
md5_process_block	function
(	O
const	O
void	O
*	O
buffer	array
,	O
size_t	long
len	long
,	O
struct	O
md5_ctx	struct
*	O
ctx	pointer
)	O
{	O
uint32_t	int
correct_words	array
[	O
16	int
]	O
;	O
const	O
uint32_t	int
*	O
words	pointer
=	O
buffer	array
;	O
size_t	long
nwords	long
=	O
len	long
/	O
sizeof	O
(	O
uint32_t	int
)	O
;	O
const	O
uint32_t	int
*	O
endp	pointer
=	O
words	pointer
+	O
nwords	long
;	O
uint32_t	int
A	int
=	O
ctx	pointer
->	O
A	int
;	O
uint32_t	int
B	int
=	O
ctx	pointer
->	O
B	int
;	O
uint32_t	int
C	int
=	O
ctx	pointer
->	O
C	int
;	O
uint32_t	int
D	int
=	O
ctx	pointer
->	O
D	int
;	O
uint32_t	int
lolen	int
=	O
len	long
;	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
+=	O
lolen	int
;	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
+=	O
(	O
len	long
>>	O
31	int
>>	O
1	int
)	O
+	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
<	O
lolen	int
)	O
;	O
while	O
(	O
words	pointer
<	O
endp	pointer
)	O
{	O
uint32_t	int
*	O
cwp	pointer
=	O
correct_words	array
;	O
uint32_t	int
A_save	int
=	O
A	int
;	O
uint32_t	int
B_save	int
=	O
B	int
;	O
uint32_t	int
C_save	int
=	O
C	int
;	O
uint32_t	int
D_save	int
=	O
D	int
;	O
OP	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
7	int
,	O
0xd76aa478	int
)	O
;	O
OP	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
12	int
,	O
0xe8c7b756	int
)	O
;	O
OP	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
17	int
,	O
0x242070db	int
)	O
;	O
OP	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
22	int
,	O
0xc1bdceee	int
)	O
;	O
OP	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
7	int
,	O
0xf57c0faf	int
)	O
;	O
OP	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
12	int
,	O
0x4787c62a	int
)	O
;	O
OP	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
17	int
,	O
0xa8304613	int
)	O
;	O
OP	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
22	int
,	O
0xfd469501	int
)	O
;	O
OP	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
7	int
,	O
0x698098d8	int
)	O
;	O
OP	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
12	int
,	O
0x8b44f7af	int
)	O
;	O
OP	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
17	int
,	O
0xffff5bb1	int
)	O
;	O
OP	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
22	int
,	O
0x895cd7be	int
)	O
;	O
OP	O
(	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
7	int
,	O
0x6b901122	int
)	O
;	O
OP	O
(	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
12	int
,	O
0xfd987193	int
)	O
;	O
OP	O
(	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
17	int
,	O
0xa679438e	int
)	O
;	O
OP	O
(	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
22	int
,	O
0x49b40821	int
)	O
;	O
OP	O
(	O
FG	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
1	int
,	O
5	int
,	O
0xf61e2562	int
)	O
;	O
OP	O
(	O
FG	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
6	int
,	O
9	int
,	O
0xc040b340	int
)	O
;	O
OP	O
(	O
FG	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
11	int
,	O
14	int
,	O
0x265e5a51	int
)	O
;	O
OP	O
(	O
FG	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
0	int
,	O
20	int
,	O
0xe9b6c7aa	int
)	O
;	O
OP	O
(	O
FG	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
5	int
,	O
5	int
,	O
0xd62f105d	int
)	O
;	O
OP	O
(	O
FG	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
10	int
,	O
9	int
,	O
0x02441453	int
)	O
;	O
OP	O
(	O
FG	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
15	int
,	O
14	int
,	O
0xd8a1e681	int
)	O
;	O
OP	O
(	O
FG	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
4	int
,	O
20	int
,	O
0xe7d3fbc8	int
)	O
;	O
OP	O
(	O
FG	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
9	int
,	O
5	int
,	O
0x21e1cde6	int
)	O
;	O
OP	O
(	O
FG	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
14	int
,	O
9	int
,	O
0xc33707d6	int
)	O
;	O
OP	O
(	O
FG	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
3	int
,	O
14	int
,	O
0xf4d50d87	int
)	O
;	O
OP	O
(	O
FG	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
8	int
,	O
20	int
,	O
0x455a14ed	int
)	O
;	O
OP	O
(	O
FG	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
13	int
,	O
5	int
,	O
0xa9e3e905	int
)	O
;	O
OP	O
(	O
FG	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
2	int
,	O
9	int
,	O
0xfcefa3f8	int
)	O
;	O
OP	O
(	O
FG	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
7	int
,	O
14	int
,	O
0x676f02d9	int
)	O
;	O
OP	O
(	O
FG	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
12	int
,	O
20	int
,	O
0x8d2a4c8a	int
)	O
;	O
OP	O
(	O
FH	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
5	int
,	O
4	int
,	O
0xfffa3942	int
)	O
;	O
OP	O
(	O
FH	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
8	int
,	O
11	int
,	O
0x8771f681	int
)	O
;	O
OP	O
(	O
FH	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
11	int
,	O
16	int
,	O
0x6d9d6122	int
)	O
;	O
OP	O
(	O
FH	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
14	int
,	O
23	int
,	O
0xfde5380c	int
)	O
;	O
OP	O
(	O
FH	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
1	int
,	O
4	int
,	O
0xa4beea44	int
)	O
;	O
OP	O
(	O
FH	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
4	int
,	O
11	int
,	O
0x4bdecfa9	int
)	O
;	O
OP	O
(	O
FH	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
7	int
,	O
16	int
,	O
0xf6bb4b60	int
)	O
;	O
OP	O
(	O
FH	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
10	int
,	O
23	int
,	O
0xbebfbc70	int
)	O
;	O
OP	O
(	O
FH	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
13	int
,	O
4	int
,	O
0x289b7ec6	int
)	O
;	O
OP	O
(	O
FH	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
0	int
,	O
11	int
,	O
0xeaa127fa	int
)	O
;	O
OP	O
(	O
FH	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
3	int
,	O
16	int
,	O
0xd4ef3085	int
)	O
;	O
OP	O
(	O
FH	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
6	int
,	O
23	int
,	O
0x04881d05	int
)	O
;	O
OP	O
(	O
FH	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
9	int
,	O
4	int
,	O
0xd9d4d039	int
)	O
;	O
OP	O
(	O
FH	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
12	int
,	O
11	int
,	O
0xe6db99e5	int
)	O
;	O
OP	O
(	O
FH	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
15	int
,	O
16	int
,	O
0x1fa27cf8	int
)	O
;	O
OP	O
(	O
FH	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
2	int
,	O
23	int
,	O
0xc4ac5665	int
)	O
;	O
OP	O
(	O
FI	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
0	int
,	O
6	int
,	O
0xf4292244	int
)	O
;	O
OP	O
(	O
FI	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
7	int
,	O
10	int
,	O
0x432aff97	int
)	O
;	O
OP	O
(	O
FI	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
14	int
,	O
15	int
,	O
0xab9423a7	int
)	O
;	O
OP	O
(	O
FI	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
5	int
,	O
21	int
,	O
0xfc93a039	int
)	O
;	O
OP	O
(	O
FI	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
12	int
,	O
6	int
,	O
0x655b59c3	int
)	O
;	O
OP	O
(	O
FI	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
3	int
,	O
10	int
,	O
0x8f0ccc92	int
)	O
;	O
OP	O
(	O
FI	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
10	int
,	O
15	int
,	O
0xffeff47d	int
)	O
;	O
OP	O
(	O
FI	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
1	int
,	O
21	int
,	O
0x85845dd1	int
)	O
;	O
OP	O
(	O
FI	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
8	int
,	O
6	int
,	O
0x6fa87e4f	int
)	O
;	O
OP	O
(	O
FI	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
15	int
,	O
10	int
,	O
0xfe2ce6e0	int
)	O
;	O
OP	O
(	O
FI	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
6	int
,	O
15	int
,	O
0xa3014314	int
)	O
;	O
OP	O
(	O
FI	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
13	int
,	O
21	int
,	O
0x4e0811a1	int
)	O
;	O
OP	O
(	O
FI	O
,	O
A	int
,	O
B	int
,	O
C	int
,	O
D	int
,	O
4	int
,	O
6	int
,	O
0xf7537e82	int
)	O
;	O
OP	O
(	O
FI	O
,	O
D	int
,	O
A	int
,	O
B	int
,	O
C	int
,	O
11	int
,	O
10	int
,	O
0xbd3af235	int
)	O
;	O
OP	O
(	O
FI	O
,	O
C	int
,	O
D	int
,	O
A	int
,	O
B	int
,	O
2	int
,	O
15	int
,	O
0x2ad7d2bb	int
)	O
;	O
OP	O
(	O
FI	O
,	O
B	int
,	O
C	int
,	O
D	int
,	O
A	int
,	O
9	int
,	O
21	int
,	O
0xeb86d391	int
)	O
;	O
A	int
+=	O
A_save	int
;	O
B	int
+=	O
B_save	int
;	O
C	int
+=	O
C_save	int
;	O
D	int
+=	O
D_save	int
;	O
}	O
ctx	pointer
->	O
A	int
=	O
A	int
;	O
ctx	pointer
->	O
B	int
=	O
B	int
;	O
ctx	pointer
->	O
C	int
=	O
C	int
;	O
ctx	pointer
->	O
D	int
=	O
D	int
;	O
}	O
