static	O
char	O
g_redir1	array
[	O
]	O
=	O
""	pointer
;	O
static	O
char	O
g_redir2	array
[	O
]	O
=	O
"1>&2"	pointer
;	O
static	O
char	O
g_redirnull	array
[	O
]	O
=	O
"1>/dev/null"	pointer
;	O
static	O
int	O
s_verboseM	int
=	O
SWC_VERBOSE_4	int
;	O
static	O
VPLOB	union
*	O
s_arrM	pointer
=	O
NULL	O
;	O
static	O
int	O
s_arr_indexM	int
=	O
0	int
;	O
static	O
struct	O
swEvents	struct
eventsArray	array
[	O
]	O
=	O
{	O
{	O
""	pointer
,	O
0	int
,	O
0	int
,	O
""	pointer
,	O
0	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_ILLEGAL_STATE_TRANSITION"	pointer
,	O
1	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_BAD_SESSION_CONTEXT"	pointer
,	O
2	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_ILLEGAL_OPTION"	pointer
,	O
3	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_ACCESS_DENIED"	pointer
,	O
4	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_MEMORY_ERROR"	pointer
,	O
5	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
-	O
SW_ERROR	int
}	O
,	O
{	O
"SW_RESOURCE_ERROR"	pointer
,	O
6	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
-	O
SW_ERROR	int
}	O
,	O
{	O
"SW_INTERNAL_ERROR"	pointer
,	O
7	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
-	O
SW_ERROR	int
}	O
,	O
{	O
"SW_IO_ERROR"	pointer
,	O
8	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
-	O
SW_ERROR	int
}	O
,	O
{	O
"SW_AGENT_INITIALIZATION_FAILED"	pointer
,	O
10	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
-	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SERVICE_NOT_AVALIABLE"	pointer
,	O
11	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
-	O
SW_ERROR	int
}	O
,	O
{	O
"SW_OTHER_SESSIONS_IN_PROGRESS"	pointer
,	O
12	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_WARNING	int
}	O
,	O
{	O
"SW_SESSION_BEGINS"	pointer
,	O
28	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_SESSION_ENDS"	pointer
,	O
29	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_CONNECTION_LIMIT_EXCEEDED"	pointer
,	O
30	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
-	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SOC_DOES_NOT_EXIST"	pointer
,	O
31	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
-	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SOC_IS_CORRUPT"	pointer
,	O
32	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SOC_CREATED"	pointer
,	O
34	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_CONFLICTING_SESSION_IN_PROGRESS"	pointer
,	O
35	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SOC_LOCK_FAILURE"	pointer
,	O
36	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SOC_IS_READ_ONLY"	pointer
,	O
37	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SOC_IS_REMOTE"	pointer
,	O
38	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_SOC_IS_SERIAL"	pointer
,	O
40	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_SOC_INCORRECT_TYPE"	pointer
,	O
41	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_CANNOT_OPEN_LOGFILE"	pointer
,	O
42	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SOC_AMBIGUOUS_TYPE"	pointer
,	O
49	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
-	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_ANALYSIS_BEGINS"	pointer
,	O
52	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_ANALYSIS_ENDS"	pointer
,	O
53	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_EXREQUISITE_EXCLUDE"	pointer
,	O
56	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_CHECK_SCRIPT_EXCLUDE"	pointer
,	O
57	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_CONFIGURE_EXCLUDE"	pointer
,	O
58	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_SELECTION_IS_CORRUPT"	pointer
,	O
59	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SOURCE_ACCESS_ERROR"	pointer
,	O
60	int
,	O
SWEVENT_LV	O
,	O
": File not found."	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SELECTION_NOT_FOUND"	pointer
,	O
62	int
,	O
SWEVENT_LV1	int
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SELECTION_NOT_FOUND_RELATED"	pointer
,	O
63	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SELECTION_NOT_FOUND_AMBIG"	pointer
,	O
64	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_FILESYSTEMS_NOT_MOUNTED"	pointer
,	O
65	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_FILESYSTEMS_MORE_MOUNTED"	pointer
,	O
66	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_HIGHER_REVISION_INSTALLED"	pointer
,	O
67	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_NEW_MULTIPLE_VERSION"	pointer
,	O
68	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_EXISTING_MULTIPLE_VERSION"	pointer
,	O
69	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_DEPENDENCY_NOT_MET"	pointer
,	O
70	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_NOT_COMPATIBLE"	pointer
,	O
71	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_CHECK_SCRIPT_WARNING"	pointer
,	O
72	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_WARNING	int
}	O
,	O
{	O
"SW_CHECK_SCRIPT_ERROR"	pointer
,	O
73	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
-	O
SW_ERROR	int
}	O
,	O
{	O
"SW_DSA_OVER_LIMIT"	pointer
,	O
75	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_DSA_FAILED_TO_RUN"	pointer
,	O
76	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_ALREADY_CONFIGURED"	pointer
,	O
78	int
,	O
SWEVENT_LV1	int
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_SKIPPED_GLOBAL_ERROR"	pointer
,	O
80	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_FILE_WARNING"	pointer
,	O
84	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_WARNING	int
}	O
,	O
{	O
"SW_FILE_ERROR"	pointer
,	O
85	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
-	O
SW_ERROR	int
}	O
,	O
{	O
"SW_NOT_LOCATABLE"	pointer
,	O
86	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SAME_REVISION_SKIPPED"	pointer
,	O
87	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_EXECUTION_BEGINS"	pointer
,	O
88	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_EXECUTION_ENDS"	pointer
,	O
89	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_PRE_SCRIPT_WARNING"	pointer
,	O
95	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_WARNING	int
}	O
,	O
{	O
"SW_PRE_SCRIPT_ERROR"	pointer
,	O
96	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_FILESET_WARNING"	pointer
,	O
97	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_WARNING	int
}	O
,	O
{	O
"SW_FILESET_ERROR"	pointer
,	O
98	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_POST_SCRIPT_WARNING"	pointer
,	O
99	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_WARNING	int
}	O
,	O
{	O
"SW_POST_SCRIPT_ERROR"	pointer
,	O
100	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_CONFIGURE_WARNING"	pointer
,	O
103	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_WARNING	int
}	O
,	O
{	O
"SW_CONFIGURE_ERROR"	pointer
,	O
104	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_DATABASE_UPDATE_ERROR"	pointer
,	O
105	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
-	O
SW_ERROR	int
}	O
,	O
{	O
"SW_FILESET_BEGINS"	pointer
,	O
117	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_CONTROL_SCRIPT_BEGINS"	pointer
,	O
118	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_CONTROL_SCRIPT_NOT_FOUND"	pointer
,	O
119	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_SOURCE_ACCESS_BEGINS"	pointer
,	O
260	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_SOURCE_ACCESS_ENDS"	pointer
,	O
261	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_CONTROL_SCRIPT_ENDS"	pointer
,	O
262	int
,	O
SWEVENT_LV2	int
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_SOC_LOCK_CREATED"	pointer
,	O
263	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SOC_LOCK_REMOVED"	pointer
,	O
264	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SELECTION_EXECUTION_BEGINS"	pointer
,	O
265	int
,	O
SWEVENT_LV2	int
,	O
""	pointer
,	O
0	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_SELECTION_EXECUTION_ENDS"	pointer
,	O
266	int
,	O
SWEVENT_LV2	int
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_ISC_INTEGRITY_CONFIRMED"	pointer
,	O
267	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SW_ISC_INTEGRITY_NOT_CONFIRMED"	pointer
,	O
268	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SPECIAL_MODE_BEGINS"	pointer
,	O
269	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SOC_INTEGRITY_CONFIRMED"	pointer
,	O
270	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_SOC_INTEGRITY_NOT_CONFIRMED"	pointer
,	O
271	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_ABORT_SIGNAL_RECEIVED"	pointer
,	O
272	int
,	O
SWEVENT_LV1	int
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SW_FILE_EXISTS"	pointer
,	O
273	int
,	O
SWEVENT_LV1	int
,	O
""	pointer
,	O
0	int
,	O
SW_WARNING	int
}	O
,	O
{	O
"SWI_PRODUCT_SCRIPT_ENDS"	pointer
,	O
280	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWI_FILESET_SCRIPT_ENDS"	pointer
,	O
281	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWI_CATALOG_UNPACK_BEGINS"	pointer
,	O
302	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWI_CATALOG_UNPACK_ENDS"	pointer
,	O
303	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SWI_TASK_BEGINS"	pointer
,	O
304	int
,	O
SWEVENT_LV6	int
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWI_TASK_ENDS"	pointer
,	O
305	int
,	O
SWEVENT_LV6	int
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SWI_SWICOL_ERROR"	pointer
,	O
306	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SWI_CATALOG_ANALYSIS_BEGINS"	pointer
,	O
307	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWI_CATALOG_ANALYSIS_ENDS"	pointer
,	O
308	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SWBIS_TARGET_BEGINS"	pointer
,	O
309	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWBIS_TARGET_ENDS"	pointer
,	O
310	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SWI_NORMAL_EXIT"	pointer
,	O
311	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SWI_SELECTION_BEGINS"	pointer
,	O
312	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWI_SELECTION_ENDS"	pointer
,	O
313	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
0	int
,	O
SW_ERROR	int
}	O
,	O
{	O
"SWI_MSG"	pointer
,	O
314	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWI_ATTRIBUTE"	pointer
,	O
315	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWI_GROUP_BEGINS"	pointer
,	O
316	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWI_GROUP_ENDS"	pointer
,	O
317	int
,	O
SWEVENT_LV	O
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWI_TASK_CTS"	pointer
,	O
318	int
,	O
SWEVENT_LV6	int
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"SWI_MAIN_SCRIPT_ENDS"	pointer
,	O
319	int
,	O
SWEVENT_LV6	int
,	O
""	pointer
,	O
1	int
,	O
SW_NOTICE	int
}	O
,	O
{	O
"<_nil_>"	pointer
,	O
-	O
1	int
,	O
0	int
,	O
""	pointer
,	O
0	int
,	O
SW_NOTICE	int
}	O
}	O
;	O
static	O
void	O
*	O
arr_get_p	function
(	O
void	O
)	O
{	O
void	O
*	O
s	pointer
;	O
if	O
(	O
s_arrM	pointer
==	O
NULL	O
)	O
s_arrM	pointer
=	O
vplob_open	function
(	O
)	O
;	O
s	pointer
=	O
vplob_val	function
(	O
s_arrM	pointer
,	O
s_arr_indexM	int
)	O
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
{	O
s	pointer
=	O
(	O
void	O
*	O
)	O
strob_open	function
(	O
80	int
)	O
;	O
vplob_add	function
(	O
s_arrM	pointer
,	O
s	pointer
)	O
;	O
}	O
else	O
{	O
strob_strcpy	function
(	O
(	O
STROB	struct
*	O
)	O
s	pointer
,	O
""	pointer
)	O
;	O
}	O
s_arr_indexM	int
++	O
;	O
return	O
s	pointer
;	O
}	O
static	O
struct	O
swEvents	struct
*	O
get_struct_by_message	function
(	O
char	O
*	O
line	pointer
,	O
struct	O
swEvents	struct
*	O
evnt	pointer
)	O
{	O
char	O
*	O
ws	pointer
;	O
char	O
*	O
event_code	pointer
;	O
static	O
char	O
buf	pointer
[	O
100	int
]	O
;	O
struct	O
swEvents	struct
*	O
eop	pointer
;	O
strncpy	function
(	O
buf	pointer
,	O
line	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
-	O
1	int
)	O
;	O
buf	pointer
[	O
sizeof	O
(	O
buf	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
event_code	pointer
=	O
strstr	function
(	O
buf	pointer
,	O
"SW"	pointer
)	O
;	O
if	O
(	O
event_code	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
ws	pointer
=	O
strpbrk	function
(	O
event_code	pointer
,	O
": \r\n"	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
else	O
*	O
ws	pointer
=	O
'\0'	O
;	O
eop	pointer
=	O
evnt	pointer
;	O
while	O
(	O
eop	pointer
->	O
valueM	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
eop	pointer
->	O
codeM	pointer
,	O
event_code	pointer
)	O
==	O
0	int
)	O
{	O
return	O
eop	pointer
;	O
}	O
eop	pointer
++	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
struct	O
swEvents	struct
*	O
get_struct_by_value	function
(	O
int	O
value	int
,	O
struct	O
swEvents	struct
*	O
evnt	pointer
)	O
{	O
struct	O
swEvents	struct
*	O
eop	pointer
;	O
eop	pointer
=	O
evnt	pointer
;	O
while	O
(	O
eop	pointer
->	O
valueM	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
eop	pointer
->	O
valueM	int
==	O
value	int
)	O
{	O
return	O
eop	pointer
;	O
}	O
eop	pointer
++	O
;	O
}	O
return	O
NULL	O
;	O
}	O
char	O
*	O
swevent_code	function
(	O
int	O
value	int
)	O
{	O
struct	O
swEvents	struct
*	O
eop	pointer
;	O
eop	pointer
=	O
swevent_get_events_array	function
(	O
)	O
;	O
while	O
(	O
eop	pointer
->	O
valueM	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
eop	pointer
->	O
valueM	int
==	O
value	int
)	O
{	O
return	O
eop	pointer
->	O
codeM	pointer
;	O
}	O
eop	pointer
++	O
;	O
}	O
return	O
eop	pointer
->	O
codeM	pointer
;	O
}	O
static	O
int	O
get_event_status	function
(	O
char	O
*	O
line	pointer
,	O
int	O
*	O
statusp	pointer
,	O
char	O
*	O
*	O
message	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
char	O
*	O
s1	pointer
;	O
*	O
message	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
*	O
statusp	pointer
=	O
-	O
1	int
;	O
if	O
(	O
strstr	function
(	O
line	pointer
,	O
": SW_"	pointer
)	O
||	O
strstr	function
(	O
line	pointer
,	O
": SWI_"	pointer
)	O
||	O
strstr	function
(	O
line	pointer
,	O
": SWBIS_"	pointer
)	O
)	O
{	O
if	O
(	O
strstr	function
(	O
line	pointer
,	O
SWEVENT_STATUS_PFX	O
)	O
)	O
{	O
if	O
(	O
swevent_is_error	function
(	O
line	pointer
,	O
statusp	pointer
)	O
<	O
0	int
&&	O
*	O
statusp	pointer
==	O
0	int
)	O
{	O
*	O
statusp	pointer
=	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
swevent_is_error	function
(	O
line	pointer
,	O
statusp	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"error from swevent_is_error\n"	pointer
)	O
;	O
*	O
statusp	pointer
=	O
-	O
1	int
;	O
}	O
}	O
s	pointer
=	O
strrchr	function
(	O
line	pointer
,	O
':'	O
)	O
;	O
s1	pointer
=	O
strchr	function
(	O
line	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
s1	pointer
)	O
s1	pointer
=	O
strchr	function
(	O
s1	pointer
+	O
1	int
,	O
':'	O
)	O
;	O
if	O
(	O
strstr	function
(	O
line	pointer
,	O
"SWI_ATTRIBUTE"	pointer
)	O
&&	O
s1	pointer
&&	O
s	pointer
!=	O
s1	pointer
)	O
{	O
s	pointer
=	O
s1	pointer
;	O
E_DEBUG2	O
(	O
"s=[%s]"	pointer
,	O
s	pointer
)	O
;	O
E_DEBUG2	O
(	O
"s1=[%s]"	pointer
,	O
s1	pointer
)	O
;	O
}	O
if	O
(	O
s	pointer
)	O
{	O
s	pointer
++	O
;	O
while	O
(	O
s	pointer
&&	O
*	O
s	pointer
==	O
' '	O
)	O
s	pointer
++	O
;	O
*	O
message	pointer
=	O
s	pointer
;	O
}	O
return	O
0	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
char	O
*	O
swevent_message	function
(	O
struct	O
swEvents	struct
*	O
evnt	pointer
,	O
STROB	struct
*	O
buf	pointer
,	O
int	O
value	int
,	O
char	O
*	O
host	pointer
,	O
char	O
*	O
loc	pointer
,	O
char	O
*	O
msg	pointer
,	O
int	O
verbose_level	int
)	O
{	O
if	O
(	O
verbose_level	int
>=	O
s_verboseM	int
)	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s: %s on %s host `hostname` at line $LINENO: %s"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
swevent_code	function
(	O
value	int
)	O
,	O
loc	pointer
,	O
msg	pointer
)	O
;	O
else	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"%s: %s on %s host `hostname`: %s"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
swevent_code	function
(	O
value	int
)	O
,	O
loc	pointer
,	O
msg	pointer
)	O
;	O
return	O
strob_str	function
(	O
buf	pointer
)	O
;	O
}	O
void	O
swevent_set_verbose	function
(	O
int	O
v	int
)	O
{	O
s_verboseM	int
=	O
v	int
;	O
}	O
char	O
*	O
swevent_shell_echo	function
(	O
int	O
to_fd	int
,	O
int	O
verbose_level	int
,	O
char	O
*	O
loc	pointer
,	O
int	O
value	int
,	O
char	O
*	O
host	pointer
,	O
char	O
*	O
msg	pointer
)	O
{	O
char	O
*	O
ret	pointer
;	O
STROB	struct
*	O
buf	pointer
;	O
STROB	struct
*	O
sbuf	pointer
;	O
struct	O
swEvents	struct
*	O
eop	pointer
;	O
char	O
*	O
redir	pointer
=	O
g_redirnull	array
;	O
struct	O
swEvents	struct
*	O
evnt	pointer
;	O
sbuf	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
buf	pointer
=	O
(	O
STROB	struct
*	O
)	O
arr_get_p	function
(	O
)	O
;	O
evnt	pointer
=	O
swevent_get_events_array	function
(	O
)	O
;	O
eop	pointer
=	O
get_struct_by_value	function
(	O
value	int
,	O
evnt	pointer
)	O
;	O
if	O
(	O
!	O
eop	pointer
)	O
{	O
return	O
strdup	function
(	O
"echo \"\" 1>/dev/null"	pointer
)	O
;	O
}	O
if	O
(	O
1	int
||	O
eop	pointer
->	O
is_swi_eventM	int
||	O
verbose_level	int
>=	O
eop	pointer
->	O
verbose_threshholdM	int
||	O
verbose_level	int
<	O
0	int
)	O
{	O
if	O
(	O
to_fd	int
==	O
2	int
||	O
eop	pointer
->	O
is_swi_eventM	int
)	O
{	O
redir	pointer
=	O
g_redir2	array
;	O
}	O
if	O
(	O
to_fd	int
==	O
1	int
)	O
redir	pointer
=	O
g_redir1	array
;	O
if	O
(	O
to_fd	int
==	O
0	int
)	O
redir	pointer
=	O
g_redirnull	array
;	O
}	O
else	O
{	O
redir	pointer
=	O
g_redirnull	array
;	O
}	O
strob_sprintf	function
(	O
buf	pointer
,	O
0	int
,	O
"echo \""	pointer
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"%s"	pointer
,	O
swevent_message	function
(	O
evnt	pointer
,	O
sbuf	pointer
,	O
value	int
,	O
host	pointer
,	O
loc	pointer
,	O
msg	pointer
,	O
verbose_level	int
)	O
)	O
;	O
strob_sprintf	function
(	O
buf	pointer
,	O
1	int
,	O
"\" %s"	pointer
,	O
redir	pointer
)	O
;	O
strob_close	function
(	O
sbuf	pointer
)	O
;	O
ret	pointer
=	O
strob_str	function
(	O
buf	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
int	O
swevent_get_value	function
(	O
struct	O
swEvents	struct
*	O
evnt	pointer
,	O
char	O
*	O
msg	pointer
)	O
{	O
struct	O
swEvents	struct
*	O
eop	pointer
;	O
eop	pointer
=	O
evnt	pointer
;	O
while	O
(	O
eop	pointer
->	O
valueM	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
strlen	function
(	O
eop	pointer
->	O
codeM	pointer
)	O
&&	O
strstr	function
(	O
msg	pointer
,	O
eop	pointer
->	O
codeM	pointer
)	O
)	O
{	O
return	O
eop	pointer
->	O
valueM	int
;	O
}	O
eop	pointer
++	O
;	O
}	O
return	O
eop	pointer
->	O
valueM	int
;	O
}	O
int	O
swevent_is_error	function
(	O
char	O
*	O
line	pointer
,	O
int	O
*	O
statusp	pointer
)	O
{	O
int	O
n	long
=	O
0	int
;	O
int	O
does_have_status	int
=	O
0	int
;	O
struct	O
swEvents	struct
*	O
evnts	pointer
=	O
eventsArray	array
;	O
struct	O
swEvents	struct
*	O
ev	pointer
;	O
char	O
*	O
s	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
(	O
s	pointer
=	O
strstr	function
(	O
line	pointer
,	O
SWEVENT_STATUS_PFX	O
)	O
)	O
)	O
{	O
s	pointer
+=	O
strlen	function
(	O
SWEVENT_STATUS_PFX	O
)	O
;	O
n	long
=	O
atoi	function
(	O
s	pointer
)	O
;	O
if	O
(	O
n	long
==	O
INT_MAX	O
||	O
n	long
==	O
INT_MIN	O
)	O
{	O
does_have_status	int
=	O
0	int
;	O
}	O
else	O
{	O
does_have_status	int
=	O
1	int
;	O
}	O
}	O
*	O
statusp	pointer
=	O
n	long
;	O
ev	pointer
=	O
get_struct_by_message	function
(	O
line	pointer
,	O
evnts	pointer
)	O
;	O
if	O
(	O
!	O
ev	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"get_struct_by_message returned null\n"	pointer
)	O
;	O
*	O
statusp	pointer
=	O
n	long
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
*	O
statusp	pointer
==	O
SW_ERROR	int
||	O
(	O
ev	pointer
->	O
default_statusM	int
==	O
SW_ERROR	int
&&	O
!	O
does_have_status	int
)	O
||	O
(	O
ev	pointer
->	O
default_statusM	int
==	O
-	O
(	O
SW_ERROR	int
)	O
)	O
)	O
{	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
ssize_t	long
swevent_write_rpsh_event	function
(	O
int	O
fd	int
,	O
char	O
*	O
event_line	pointer
,	O
int	O
len	int
)	O
{	O
char	O
*	O
msg	pointer
;	O
struct	O
swEvents	struct
*	O
evnt	pointer
=	O
eventsArray	array
;	O
struct	O
swEvents	struct
*	O
this_evnt	pointer
;	O
int	O
ret	pointer
=	O
0	int
;	O
int	O
status	int
;	O
int	O
event_value	int
;	O
STROB	struct
*	O
tmp	pointer
;	O
tmp	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
event_value	int
=	O
swevent_get_value	function
(	O
evnt	pointer
,	O
event_line	pointer
)	O
;	O
if	O
(	O
event_value	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"swevent_write_rpsh_event: event line not found [%s]\n"	pointer
,	O
event_line	pointer
)	O
;	O
return	O
-	O
10	int
;	O
}	O
this_evnt	pointer
=	O
get_struct_by_value	function
(	O
event_value	int
,	O
evnt	pointer
)	O
;	O
if	O
(	O
!	O
this_evnt	pointer
)	O
return	O
-	O
20	int
;	O
if	O
(	O
this_evnt	pointer
->	O
is_swi_eventM	int
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
E_DEBUG2	O
(	O
"event line=[%s]"	pointer
,	O
event_line	pointer
)	O
;	O
get_event_status	function
(	O
event_line	pointer
,	O
&	O
status	int
,	O
&	O
msg	pointer
)	O
;	O
strob_strcpy	function
(	O
tmp	pointer
,	O
""	pointer
)	O
;	O
if	O
(	O
msg	pointer
&&	O
strstr	function
(	O
msg	pointer
,	O
SWEVENT_STATUS_PFX	O
)	O
!=	O
msg	pointer
)	O
{	O
if	O
(	O
msg	pointer
)	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"%d:%s"	pointer
,	O
event_value	int
,	O
msg	pointer
)	O
;	O
else	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"%d:"	pointer
,	O
event_value	int
)	O
;	O
swlib_squash_trailing_vnewline	function
(	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
tmp	pointer
,	O
1	int
,	O
"\n"	pointer
)	O
;	O
}	O
else	O
{	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"%d:%d\n"	pointer
,	O
event_value	int
,	O
status	int
)	O
;	O
}	O
ret	pointer
=	O
uxfio_unix_safe_write	function
(	O
fd	int
,	O
strob_str	function
(	O
tmp	pointer
)	O
,	O
strob_strlen	function
(	O
tmp	pointer
)	O
)	O
;	O
if	O
(	O
ret	pointer
<	O
0	int
||	O
ret	pointer
!=	O
(	O
int	O
)	O
strob_strlen	function
(	O
tmp	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"swevent_write_rpsh_event: error: write: ret=%d fd=%d %s\n"	pointer
,	O
ret	pointer
,	O
fd	int
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
ret	pointer
=	O
-	O
1	int
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
int	O
swevent_parse_attribute_event	function
(	O
char	O
*	O
line	pointer
,	O
char	O
*	O
*	O
attribute	pointer
,	O
char	O
*	O
*	O
value	int
)	O
{	O
char	O
*	O
s	pointer
;	O
char	O
*	O
s1	pointer
;	O
const	O
char	O
attribute_event	array
[	O
]	O
=	O
"315:"	pointer
;	O
s	pointer
=	O
strstr	function
(	O
line	pointer
,	O
attribute_event	array
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
-	O
1	int
;	O
s	pointer
+=	O
strlen	function
(	O
attribute_event	array
)	O
;	O
s1	pointer
=	O
s	pointer
;	O
while	O
(	O
*	O
s1	pointer
&&	O
*	O
s1	pointer
!=	O
'='	O
)	O
s1	pointer
++	O
;	O
if	O
(	O
s1	pointer
==	O
s	pointer
)	O
return	O
-	O
2	int
;	O
if	O
(	O
!	O
(	O
*	O
s1	pointer
)	O
)	O
return	O
-	O
3	int
;	O
*	O
s1	pointer
=	O
'\0'	O
;	O
s1	pointer
++	O
;	O
*	O
attribute	pointer
=	O
s	pointer
;	O
*	O
value	int
=	O
s1	pointer
;	O
return	O
0	int
;	O
}	O
struct	O
swEvents	struct
*	O
swevent_get_events_array	function
(	O
void	O
)	O
{	O
return	O
eventsArray	array
;	O
}	O
struct	O
swEvents	struct
*	O
swevents_get_struct_by_message	function
(	O
char	O
*	O
line	pointer
,	O
struct	O
swEvents	struct
*	O
evnt	pointer
)	O
{	O
return	O
get_struct_by_message	function
(	O
line	pointer
,	O
evnt	pointer
)	O
;	O
}	O
void	O
swevent_s_arr_reset	function
(	O
void	O
)	O
{	O
s_arr_indexM	int
=	O
0	int
;	O
}	O
void	O
swevent_s_arr_delete	function
(	O
void	O
)	O
{	O
void	O
*	O
s	pointer
;	O
int	O
i	int
;	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
s	pointer
=	O
vplob_val	function
(	O
s_arrM	pointer
,	O
i	int
++	O
)	O
)	O
!=	O
NULL	O
)	O
strob_close	function
(	O
(	O
STROB	struct
*	O
)	O
s	pointer
)	O
;	O
vplob_close	function
(	O
s_arrM	pointer
)	O
;	O
}	O
