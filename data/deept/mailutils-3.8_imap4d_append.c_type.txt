struct	O
_temp_envelope	struct
{	O
struct	O
tm	struct
tm	struct
;	O
struct	O
mu_timezone	struct
tz	pointer
;	O
char	O
*	O
sender	pointer
;	O
}	O
;	O
static	O
int	O
_temp_envelope_date	function
(	O
mu_envelope_t	pointer
envelope	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	long
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
struct	O
_temp_envelope	struct
*	O
tenv	pointer
=	O
mu_envelope_get_owner	function
(	O
envelope	pointer
)	O
;	O
int	O
rc	int
;	O
mu_stream_t	pointer
str	pointer
;	O
mu_stream_stat_buffer	array
stat	struct
;	O
if	O
(	O
!	O
buf	pointer
)	O
{	O
if	O
(	O
!	O
pnwrite	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
rc	int
=	O
mu_nullstream_create	function
(	O
&	O
str	pointer
,	O
MU_STREAM_WRITE	int
)	O
;	O
}	O
else	O
rc	int
=	O
mu_fixed_memory_stream_create	function
(	O
&	O
str	pointer
,	O
buf	pointer
,	O
len	long
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_stream_set_stat	function
(	O
str	pointer
,	O
MU_STREAM_STAT_MASK	O
(	O
MU_STREAM_STAT_OUT	int
)	O
,	O
stat	struct
)	O
;	O
rc	int
=	O
mu_c_streamftime	function
(	O
str	pointer
,	O
MU_DATETIME_FROM	pointer
,	O
&	O
tenv	pointer
->	O
tm	struct
,	O
&	O
tenv	pointer
->	O
tz	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_stream_flush	function
(	O
str	pointer
)	O
;	O
if	O
(	O
pnwrite	pointer
)	O
*	O
pnwrite	pointer
=	O
stat	struct
[	O
MU_STREAM_STAT_OUT	int
]	O
;	O
rc	int
=	O
mu_stream_write	function
(	O
str	pointer
,	O
""	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
mu_stream_unref	function
(	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_temp_envelope_sender	function
(	O
mu_envelope_t	pointer
envelope	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	long
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
struct	O
_temp_envelope	struct
*	O
tenv	pointer
=	O
mu_envelope_get_owner	function
(	O
envelope	pointer
)	O
;	O
size_t	long
n	pointer
=	O
mu_cpystr	function
(	O
buf	pointer
,	O
tenv	pointer
->	O
sender	pointer
,	O
len	long
)	O
;	O
if	O
(	O
pnwrite	pointer
)	O
*	O
pnwrite	pointer
=	O
n	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_temp_envelope_destroy	function
(	O
mu_envelope_t	pointer
envelope	pointer
)	O
{	O
struct	O
_temp_envelope	struct
*	O
tenv	pointer
=	O
mu_envelope_get_owner	function
(	O
envelope	pointer
)	O
;	O
free	function
(	O
tenv	pointer
->	O
sender	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
imap4d_append0	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
flags	int
,	O
char	O
*	O
date_time	pointer
,	O
char	O
*	O
text	pointer
,	O
char	O
*	O
*	O
err_text	pointer
)	O
{	O
mu_stream_t	pointer
stream	pointer
;	O
int	O
rc	int
=	O
0	int
;	O
mu_message_t	pointer
msg	pointer
=	O
0	int
;	O
mu_envelope_t	pointer
env	pointer
=	O
NULL	O
;	O
size_t	long
size	pointer
;	O
struct	O
_temp_envelope	struct
tenv	pointer
;	O
memset	function
(	O
&	O
tenv	pointer
,	O
0	int
,	O
sizeof	O
(	O
tenv	pointer
)	O
)	O
;	O
text	pointer
=	O
mu_str_skip_class	function
(	O
text	pointer
,	O
MU_CTYPE_BLANK	int
)	O
;	O
size	pointer
=	O
strlen	function
(	O
text	pointer
)	O
;	O
rc	int
=	O
quota_check	function
(	O
size	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
RESP_OK	int
)	O
{	O
*	O
err_text	pointer
=	O
rc	int
==	O
RESP_NO	int
?	O
"Mailbox quota exceeded"	pointer
:	O
"Operation failed"	pointer
;	O
return	O
1	int
;	O
}	O
if	O
(	O
date_time	pointer
)	O
{	O
if	O
(	O
mu_scan_datetime	function
(	O
date_time	pointer
,	O
MU_DATETIME_INTERNALDATE	pointer
,	O
&	O
tenv	pointer
.	O
tm	struct
,	O
&	O
tenv	pointer
.	O
tz	pointer
,	O
NULL	O
)	O
)	O
{	O
*	O
err_text	pointer
=	O
"Invalid date/time format"	pointer
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_envelope_create	function
(	O
&	O
env	pointer
,	O
&	O
tenv	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_envelope_set_date	function
(	O
env	pointer
,	O
_temp_envelope_date	function
,	O
&	O
tenv	pointer
)	O
;	O
mu_envelope_set_sender	function
(	O
env	pointer
,	O
_temp_envelope_sender	function
,	O
&	O
tenv	pointer
)	O
;	O
mu_envelope_set_destroy	function
(	O
env	pointer
,	O
_temp_envelope_destroy	function
,	O
&	O
tenv	pointer
)	O
;	O
}	O
if	O
(	O
mu_static_memory_stream_create	function
(	O
&	O
stream	pointer
,	O
text	pointer
,	O
size	pointer
)	O
)	O
{	O
if	O
(	O
env	pointer
)	O
mu_envelope_destroy	function
(	O
&	O
env	pointer
,	O
mu_envelope_get_owner	function
(	O
env	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_message_from_stream_with_envelope	function
(	O
&	O
msg	pointer
,	O
stream	pointer
,	O
env	pointer
)	O
;	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
env	pointer
)	O
mu_envelope_destroy	function
(	O
&	O
env	pointer
,	O
mu_envelope_get_owner	function
(	O
env	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
env	pointer
)	O
{	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
char	O
*	O
val	array
;	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_ENV_SENDER	pointer
,	O
&	O
val	array
)	O
==	O
0	int
||	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_SENDER	pointer
,	O
&	O
val	array
)	O
==	O
0	int
||	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_FROM	pointer
,	O
&	O
val	array
)	O
==	O
0	int
)	O
{	O
mu_address_t	pointer
addr	pointer
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
val	array
)	O
;	O
free	function
(	O
val	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_address_aget_email	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
tenv	pointer
.	O
sender	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
}	O
if	O
(	O
!	O
tenv	pointer
.	O
sender	pointer
)	O
tenv	pointer
.	O
sender	pointer
=	O
mu_strdup	function
(	O
"GNU-imap4d"	pointer
)	O
;	O
}	O
imap4d_enter_critical	function
(	O
)	O
;	O
rc	int
=	O
mu_mailbox_append_message	function
(	O
mbox	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
flags	int
)	O
{	O
size_t	long
num	long
=	O
0	int
;	O
mu_attribute_t	pointer
attr	pointer
=	O
NULL	O
;	O
mu_message_t	pointer
temp	pointer
;	O
mu_mailbox_messages_count	function
(	O
mbox	pointer
,	O
&	O
num	long
)	O
;	O
mu_mailbox_get_message	function
(	O
mbox	pointer
,	O
num	long
,	O
&	O
temp	pointer
)	O
;	O
mu_message_get_attribute	function
(	O
temp	pointer
,	O
&	O
attr	pointer
)	O
;	O
mu_attribute_set_flags	function
(	O
attr	pointer
,	O
flags	int
)	O
;	O
}	O
quota_update	function
(	O
size	pointer
)	O
;	O
}	O
imap4d_leave_critical	function
(	O
)	O
;	O
mu_message_unref	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
env	pointer
)	O
mu_envelope_destroy	function
(	O
&	O
env	pointer
,	O
mu_envelope_get_owner	function
(	O
env	pointer
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
imap4d_append	function
(	O
struct	O
imap4d_session	struct
*	O
session	pointer
,	O
struct	O
imap4d_command	struct
*	O
command	pointer
,	O
imap4d_tokbuf_t	pointer
tok	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
mboxname	pointer
;	O
mu_record_t	pointer
record	pointer
;	O
int	O
flags	int
=	O
0	int
;	O
mu_mailbox_t	pointer
dest_mbox	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
int	O
argc	int
=	O
imap4d_tokbuf_argc	function
(	O
tok	pointer
)	O
;	O
char	O
*	O
date_time	pointer
;	O
char	O
*	O
msg_text	pointer
;	O
char	O
*	O
err_text	pointer
=	O
"[TRYCREATE] failed"	pointer
;	O
if	O
(	O
argc	int
<	O
4	int
)	O
return	O
io_completion_response	function
(	O
command	pointer
,	O
RESP_BAD	int
,	O
"Too few arguments"	pointer
)	O
;	O
mboxname	pointer
=	O
imap4d_tokbuf_getarg	function
(	O
tok	pointer
,	O
IMAP4_ARG_1	int
)	O
;	O
if	O
(	O
!	O
mboxname	pointer
)	O
return	O
io_completion_response	function
(	O
command	pointer
,	O
RESP_BAD	int
,	O
"Too few arguments"	pointer
)	O
;	O
i	int
=	O
IMAP4_ARG_2	int
;	O
if	O
(	O
imap4d_tokbuf_getarg	function
(	O
tok	pointer
,	O
i	int
)	O
[	O
0	int
]	O
==	O
'('	O
)	O
{	O
while	O
(	O
++	O
i	int
<	O
argc	int
)	O
{	O
char	O
*	O
arg	pointer
=	O
imap4d_tokbuf_getarg	function
(	O
tok	pointer
,	O
i	int
)	O
;	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
')'	O
)	O
break	O
;	O
if	O
(	O
mu_imap_flag_to_attribute	function
(	O
arg	pointer
,	O
&	O
flags	int
)	O
)	O
return	O
io_completion_response	function
(	O
command	pointer
,	O
RESP_BAD	int
,	O
"Unrecognized flag"	pointer
)	O
;	O
}	O
if	O
(	O
i	int
==	O
argc	int
)	O
return	O
io_completion_response	function
(	O
command	pointer
,	O
RESP_BAD	int
,	O
"Missing closing parenthesis"	pointer
)	O
;	O
i	int
++	O
;	O
}	O
switch	O
(	O
argc	int
-	O
i	int
)	O
{	O
case	O
2	int
:	O
date_time	pointer
=	O
imap4d_tokbuf_getarg	function
(	O
tok	pointer
,	O
i	int
)	O
;	O
i	int
++	O
;	O
break	O
;	O
case	O
1	int
:	O
date_time	pointer
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
return	O
io_completion_response	function
(	O
command	pointer
,	O
RESP_BAD	int
,	O
"Too many arguments"	pointer
)	O
;	O
}	O
msg_text	pointer
=	O
imap4d_tokbuf_getarg	function
(	O
tok	pointer
,	O
i	int
)	O
;	O
mboxname	pointer
=	O
namespace_get_name	function
(	O
mboxname	pointer
,	O
&	O
record	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
mboxname	pointer
)	O
return	O
io_completion_response	function
(	O
command	pointer
,	O
RESP_NO	int
,	O
"Couldn't open mailbox"	pointer
)	O
;	O
status	int
=	O
mu_mailbox_create_from_record	function
(	O
&	O
dest_mbox	pointer
,	O
record	pointer
,	O
mboxname	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_mailbox_open	function
(	O
dest_mbox	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
imap4d_append0	function
(	O
dest_mbox	pointer
,	O
flags	int
,	O
date_time	pointer
,	O
msg_text	pointer
,	O
&	O
err_text	pointer
)	O
;	O
mu_mailbox_close	function
(	O
dest_mbox	pointer
)	O
;	O
}	O
mu_mailbox_destroy	function
(	O
&	O
dest_mbox	pointer
)	O
;	O
}	O
free	function
(	O
mboxname	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
return	O
io_completion_response	function
(	O
command	pointer
,	O
RESP_OK	int
,	O
"Completed"	pointer
)	O
;	O
return	O
io_completion_response	function
(	O
command	pointer
,	O
RESP_NO	int
,	O
"%s"	pointer
,	O
err_text	pointer
)	O
;	O
}	O
