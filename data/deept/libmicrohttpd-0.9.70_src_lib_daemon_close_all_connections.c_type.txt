static	O
void	O
close_connection	function
(	O
struct	O
MHD_Connection	struct
*	O
pos	long
)	O
{	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
=	O
pos	long
->	O
daemon	function
;	O
if	O
(	O
MHD_TM_THREAD_PER_CONNECTION	int
==	O
daemon	function
->	O
threading_mode	enum
)	O
{	O
MHD_connection_mark_closed_	function
(	O
pos	long
)	O
;	O
return	O
;	O
}	O
MHD_connection_close_	function
(	O
pos	long
,	O
MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN	int
)	O
;	O
MHD_mutex_lock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
mhd_assert	O
(	O
!	O
pos	long
->	O
suspended	enum
)	O
;	O
mhd_assert	O
(	O
!	O
pos	long
->	O
resuming	bool
)	O
;	O
if	O
(	O
pos	long
->	O
connection_timeout	int
==	O
pos	long
->	O
daemon	function
->	O
connection_default_timeout	long
)	O
XDLL_remove	O
(	O
daemon	function
->	O
normal_timeout_head	pointer
,	O
daemon	function
->	O
normal_timeout_tail	pointer
,	O
pos	long
)	O
;	O
else	O
XDLL_remove	O
(	O
daemon	function
->	O
manual_timeout_head	pointer
,	O
daemon	function
->	O
manual_timeout_tail	pointer
,	O
pos	long
)	O
;	O
DLL_remove	O
(	O
daemon	function
->	O
connections_head	pointer
,	O
daemon	function
->	O
connections_tail	pointer
,	O
pos	long
)	O
;	O
DLL_insert	O
(	O
daemon	function
->	O
cleanup_head	pointer
,	O
daemon	function
->	O
cleanup_tail	pointer
,	O
pos	long
)	O
;	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
}	O
void	O
MHD_daemon_close_all_connections_	function
(	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
)	O
{	O
struct	O
MHD_Connection	struct
*	O
pos	long
;	O
const	O
bool	bool
used_thr_p_c	bool
=	O
(	O
MHD_TM_THREAD_PER_CONNECTION	int
==	O
daemon	function
->	O
threading_mode	enum
)	O
;	O
const	O
bool	bool
upg_allowed	bool
=	O
(	O
!	O
daemon	function
->	O
disallow_upgrade	bool
)	O
;	O
if	O
(	O
!	O
daemon	function
->	O
disallow_suspend_resume	bool
)	O
{	O
daemon	function
->	O
resuming	bool
=	O
true	int
;	O
MHD_resume_suspended_connections_	function
(	O
daemon	function
)	O
;	O
}	O
MHD_mutex_lock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
if	O
(	O
upg_allowed	bool
)	O
{	O
struct	O
MHD_Connection	struct
*	O
susp	pointer
;	O
susp	pointer
=	O
daemon	function
->	O
suspended_connections_tail	pointer
;	O
while	O
(	O
NULL	O
!=	O
susp	pointer
)	O
{	O
if	O
(	O
NULL	O
==	O
susp	pointer
->	O
request	pointer
.	O
urh	pointer
)	O
MHD_PANIC	O
(	O
_	O
(	O
"MHD_stop_daemon() called while we have suspended connections.\n"	pointer
)	O
)	O
;	O
else	O
{	O
if	O
(	O
!	O
susp	pointer
->	O
request	pointer
.	O
urh	pointer
->	O
was_closed	bool
)	O
MHD_DLOG	function
(	O
daemon	function
,	O
MHD_SC_SHUTDOWN_WITH_OPEN_UPGRADED_CONNECTION	int
,	O
_	O
(	O
"Initiated daemon shutdown while \"upgraded\" connection was not closed.\n"	pointer
)	O
)	O
;	O
susp	pointer
->	O
request	pointer
.	O
urh	pointer
->	O
was_closed	bool
=	O
true	int
;	O
if	O
(	O
!	O
used_thr_p_c	bool
)	O
MHD_connection_finish_forward_	function
(	O
susp	pointer
)	O
;	O
susp	pointer
->	O
resuming	bool
=	O
true	int
;	O
daemon	function
->	O
resuming	bool
=	O
true	int
;	O
}	O
susp	pointer
=	O
susp	pointer
->	O
prev	pointer
;	O
}	O
}	O
else	O
if	O
(	O
NULL	O
!=	O
daemon	function
->	O
suspended_connections_head	pointer
)	O
MHD_PANIC	O
(	O
_	O
(	O
"MHD_stop_daemon() called while we have suspended connections.\n"	pointer
)	O
)	O
;	O
for	O
(	O
pos	long
=	O
daemon	function
->	O
connections_tail	pointer
;	O
NULL	O
!=	O
pos	long
;	O
pos	long
=	O
pos	long
->	O
prev	pointer
)	O
{	O
shutdown	function
(	O
pos	long
->	O
socket_fd	int
,	O
SHUT_RDWR	int
)	O
;	O
}	O
if	O
(	O
used_thr_p_c	bool
)	O
{	O
pos	long
=	O
daemon	function
->	O
connections_tail	pointer
;	O
while	O
(	O
NULL	O
!=	O
pos	long
)	O
{	O
if	O
(	O
!	O
pos	long
->	O
thread_joined	bool
)	O
{	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
if	O
(	O
!	O
MHD_join_thread_	O
(	O
pos	long
->	O
pid	int
.	O
handle	long
)	O
)	O
MHD_PANIC	O
(	O
_	O
(	O
"Failed to join a thread\n"	pointer
)	O
)	O
;	O
MHD_mutex_lock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
pos	long
->	O
thread_joined	bool
=	O
true	int
;	O
pos	long
=	O
daemon	function
->	O
connections_tail	pointer
;	O
continue	O
;	O
}	O
pos	long
=	O
pos	long
->	O
prev	pointer
;	O
}	O
}	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
if	O
(	O
upg_allowed	bool
)	O
{	O
daemon	function
->	O
resuming	bool
=	O
true	int
;	O
MHD_resume_suspended_connections_	function
(	O
daemon	function
)	O
;	O
}	O
while	O
(	O
NULL	O
!=	O
(	O
pos	long
=	O
daemon	function
->	O
connections_tail	pointer
)	O
)	O
{	O
if	O
(	O
(	O
used_thr_p_c	bool
)	O
&&	O
(	O
!	O
pos	long
->	O
thread_joined	bool
)	O
)	O
MHD_PANIC	O
(	O
_	O
(	O
"Failed to join a thread\n"	pointer
)	O
)	O
;	O
close_connection	function
(	O
pos	long
)	O
;	O
}	O
MHD_connection_cleanup_	function
(	O
daemon	function
)	O
;	O
}	O
