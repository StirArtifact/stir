RCSTAG_CC	O
(	O
"$GNU$"	pointer
)	O
;	O
char	O
*	O
labbuf	pointer
=	O
NULL	O
;	O
char	O
*	O
s_lab	pointer
=	O
NULL	O
;	O
char	O
*	O
e_lab	pointer
=	O
NULL	O
;	O
char	O
*	O
l_lab	pointer
=	O
NULL	O
;	O
char	O
*	O
codebuf	pointer
=	O
NULL	O
;	O
char	O
*	O
s_code	pointer
=	O
NULL	O
;	O
char	O
*	O
e_code	pointer
=	O
NULL	O
;	O
char	O
*	O
l_code	pointer
=	O
NULL	O
;	O
char	O
*	O
combuf	pointer
=	O
NULL	O
;	O
char	O
*	O
s_com	pointer
=	O
NULL	O
;	O
char	O
*	O
e_com	pointer
=	O
NULL	O
;	O
char	O
*	O
l_com	pointer
=	O
NULL	O
;	O
char	O
*	O
s_code_corresponds_to	pointer
=	O
NULL	O
;	O
buf_ty	struct
save_com	struct
;	O
char	O
*	O
bp_save	pointer
=	O
NULL	O
;	O
char	O
*	O
be_save	pointer
=	O
NULL	O
;	O
int	O
code_lines	int
=	O
0	int
;	O
int	O
line_no	int
=	O
0	int
;	O
int	O
break_comma	int
=	O
0	int
;	O
int	O
n_real_blanklines	int
=	O
0	int
;	O
int	O
prefix_blankline_requested	int
=	O
0	int
;	O
codes_ty	enum
prefix_blankline_requested_code	enum
;	O
int	O
postfix_blankline_requested	int
=	O
0	int
;	O
codes_ty	enum
postfix_blankline_requested_code	enum
;	O
char	O
*	O
in_name	pointer
=	O
0	int
;	O
file_buffer_ty	struct
*	O
current_input	pointer
=	O
0	int
;	O
int	O
embedded_comment_on_line	int
=	O
0	int
;	O
int	O
else_or_endif	int
=	O
0	int
;	O
int	O
*	O
di_stack	pointer
=	O
NULL	O
;	O
int	O
di_stack_alloc	int
=	O
0	int
;	O
int	O
squest	int
=	O
0	int
;	O
unsigned	O
long	O
in_prog_size	long
=	O
0U	int
;	O
char	O
*	O
in_prog	pointer
=	O
NULL	O
;	O
int	O
paren_target	int
=	O
0	int
;	O
static	O
void	O
sw_buffer	function
(	O
void	O
)	O
{	O
parser_state_tos	pointer
->	O
search_brace	int
=	O
false	int
;	O
bp_save	pointer
=	O
buf_ptr	pointer
;	O
be_save	pointer
=	O
buf_end	pointer
;	O
buf_ptr	pointer
=	O
save_com	struct
.	O
ptr	pointer
;	O
need_chars	function
(	O
&	O
save_com	struct
,	O
1	int
)	O
;	O
buf_end	pointer
=	O
save_com	struct
.	O
end	pointer
;	O
save_com	struct
.	O
end	pointer
=	O
save_com	struct
.	O
ptr	pointer
;	O
}	O
static	O
BOOLEAN	char
search_brace	int
(	O
codes_ty	enum
*	O
type_code	enum
,	O
BOOLEAN	char
*	O
force_nl	int
,	O
BOOLEAN	char
*	O
flushed_nl	pointer
,	O
BOOLEAN	char
*	O
last_else	pointer
,	O
BOOLEAN	char
*	O
is_procname_definition	char
,	O
BOOLEAN	char
*	O
pbreak_line	pointer
)	O
{	O
int	O
cur_token	int
;	O
while	O
(	O
parser_state_tos	pointer
->	O
search_brace	int
)	O
{	O
cur_token	int
=	O
*	O
type_code	enum
;	O
switch	O
(	O
cur_token	int
)	O
{	O
case	O
newline	int
:	O
++	O
line_no	int
;	O
*	O
flushed_nl	pointer
=	O
true	int
;	O
break	O
;	O
case	O
form_feed	int
:	O
break	O
;	O
case	O
lbrace	int
:	O
if	O
(	O
save_com	struct
.	O
end	pointer
==	O
save_com	struct
.	O
ptr	pointer
)	O
{	O
parser_state_tos	pointer
->	O
search_brace	int
=	O
false	int
;	O
return	O
true	int
;	O
}	O
if	O
(	O
settings	struct
.	O
btype_2	int
&&	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
!=	O
rbrace	int
)	O
)	O
{	O
save_com	struct
.	O
ptr	pointer
[	O
0	int
]	O
=	O
'{'	O
;	O
save_com	struct
.	O
len	int
=	O
1	int
;	O
save_com	struct
.	O
column	int
=	O
current_column	function
(	O
)	O
;	O
}	O
else	O
{	O
*	O
save_com	struct
.	O
end	pointer
++	O
=	O
EOL	char
;	O
*	O
save_com	struct
.	O
end	pointer
++	O
=	O
'{'	O
;	O
save_com	struct
.	O
len	int
+=	O
2	int
;	O
sw_buffer	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
comment	int
:	O
if	O
(	O
!	O
*	O
flushed_nl	pointer
||	O
(	O
save_com	struct
.	O
end	pointer
!=	O
save_com	struct
.	O
ptr	pointer
)	O
)	O
{	O
need_chars	function
(	O
&	O
save_com	struct
,	O
10	int
)	O
;	O
if	O
(	O
save_com	struct
.	O
end	pointer
==	O
save_com	struct
.	O
ptr	pointer
)	O
{	O
save_com	struct
.	O
start_column	int
=	O
current_column	function
(	O
)	O
;	O
save_com	struct
.	O
ptr	pointer
[	O
0	int
]	O
=	O
save_com	struct
.	O
ptr	pointer
[	O
1	int
]	O
=	O
' '	O
;	O
save_com	struct
.	O
end	pointer
=	O
save_com	struct
.	O
ptr	pointer
+	O
2	int
;	O
save_com	struct
.	O
len	int
=	O
2	int
;	O
save_com	struct
.	O
column	int
=	O
current_column	function
(	O
)	O
;	O
}	O
else	O
{	O
*	O
save_com	struct
.	O
end	pointer
++	O
=	O
EOL	char
;	O
*	O
save_com	struct
.	O
end	pointer
++	O
=	O
' '	O
;	O
save_com	struct
.	O
len	int
+=	O
2	int
;	O
--	O
line_no	int
;	O
}	O
*	O
save_com	struct
.	O
end	pointer
++	O
=	O
'/'	O
;	O
*	O
save_com	struct
.	O
end	pointer
++	O
=	O
'*'	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
need_chars	function
(	O
&	O
save_com	struct
,	O
2	int
)	O
;	O
*	O
save_com	struct
.	O
end	pointer
=	O
*	O
buf_ptr	pointer
++	O
;	O
save_com	struct
.	O
len	int
++	O
;	O
if	O
(	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
if	O
(	O
had_eof	char
)	O
{	O
ERROR	O
(	O
_	O
(	O
"EOF encountered in comment"	pointer
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
return	O
indent_punt	int
;	O
}	O
}	O
if	O
(	O
*	O
save_com	struct
.	O
end	pointer
++	O
==	O
'*'	O
&&	O
*	O
buf_ptr	pointer
==	O
'/'	O
)	O
{	O
break	O
;	O
}	O
}	O
*	O
save_com	struct
.	O
end	pointer
++	O
=	O
'/'	O
;	O
save_com	struct
.	O
len	int
++	O
;	O
if	O
(	O
++	O
buf_ptr	pointer
>=	O
buf_end	pointer
)	O
{	O
fill_buffer	function
(	O
)	O
;	O
}	O
break	O
;	O
}	O
default	O
:	O
if	O
(	O
(	O
(	O
*	O
type_code	enum
==	O
sp_paren	int
)	O
&&	O
(	O
*	O
token	pointer
==	O
'i'	O
)	O
&&	O
*	O
last_else	pointer
)	O
||	O
(	O
(	O
*	O
type_code	enum
==	O
sp_else	int
)	O
&&	O
(	O
e_code	pointer
!=	O
s_code	pointer
)	O
&&	O
(	O
e_code	pointer
[	O
-	O
1	int
]	O
==	O
'}'	O
)	O
&&	O
(	O
save_com	struct
.	O
end	pointer
==	O
save_com	struct
.	O
ptr	pointer
)	O
)	O
)	O
{	O
*	O
force_nl	int
=	O
false	int
;	O
}	O
else	O
if	O
(	O
*	O
flushed_nl	pointer
)	O
{	O
*	O
force_nl	int
=	O
true	int
;	O
}	O
else	O
{	O
}	O
if	O
(	O
save_com	struct
.	O
end	pointer
==	O
save_com	struct
.	O
ptr	pointer
)	O
{	O
parser_state_tos	pointer
->	O
search_brace	int
=	O
false	int
;	O
return	O
true	int
;	O
}	O
if	O
(	O
*	O
force_nl	int
)	O
{	O
*	O
force_nl	int
=	O
false	int
;	O
--	O
line_no	int
;	O
need_chars	function
(	O
&	O
save_com	struct
,	O
2	int
)	O
;	O
*	O
save_com	struct
.	O
end	pointer
++	O
=	O
EOL	char
;	O
save_com	struct
.	O
len	int
++	O
;	O
if	O
(	O
settings	struct
.	O
verbose	int
&&	O
!	O
*	O
flushed_nl	pointer
)	O
{	O
WARNING	O
(	O
_	O
(	O
"Line broken"	pointer
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
*	O
flushed_nl	pointer
=	O
false	int
;	O
}	O
*	O
save_com	struct
.	O
end	pointer
++	O
=	O
' '	O
;	O
save_com	struct
.	O
len	int
++	O
;	O
buf_ptr	pointer
=	O
token	pointer
;	O
parser_state_tos	pointer
->	O
procname	pointer
=	O
"\0"	pointer
;	O
parser_state_tos	pointer
->	O
procname_end	pointer
=	O
"\0"	pointer
;	O
parser_state_tos	pointer
->	O
classname	pointer
=	O
"\0"	pointer
;	O
parser_state_tos	pointer
->	O
classname_end	pointer
=	O
"\0"	pointer
;	O
sw_buffer	function
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
*	O
type_code	enum
!=	O
code_eof	int
)	O
{	O
*	O
type_code	enum
=	O
lexi	function
(	O
)	O
;	O
if	O
(	O
cur_token	int
==	O
newline	int
&&	O
(	O
*	O
type_code	enum
==	O
newline	int
||	O
*	O
type_code	enum
==	O
comment	int
)	O
&&	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
rbrace	int
)	O
{	O
if	O
(	O
!	O
save_com	struct
.	O
len	int
)	O
{	O
dump_line	function
(	O
true	int
,	O
&	O
paren_target	int
,	O
pbreak_line	pointer
)	O
;	O
*	O
flushed_nl	pointer
=	O
true	int
;	O
}	O
else	O
if	O
(	O
*	O
type_code	enum
==	O
newline	int
)	O
{	O
*	O
save_com	struct
.	O
end	pointer
++	O
=	O
EOL	char
;	O
save_com	struct
.	O
len	int
++	O
;	O
}	O
}	O
*	O
is_procname_definition	char
=	O
(	O
(	O
parser_state_tos	pointer
->	O
procname	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
&&	O
parser_state_tos	pointer
->	O
in_parameter_declaration	int
)	O
;	O
}	O
if	O
(	O
(	O
*	O
type_code	enum
==	O
ident	int
)	O
&&	O
*	O
flushed_nl	pointer
&&	O
!	O
settings	struct
.	O
procnames_start_line	int
&&	O
parser_state_tos	pointer
->	O
in_decl	char
&&	O
(	O
parser_state_tos	pointer
->	O
procname	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
)	O
{	O
*	O
flushed_nl	pointer
=	O
0	int
;	O
}	O
}	O
*	O
last_else	pointer
=	O
0	int
;	O
return	O
true	int
;	O
}	O
static	O
exit_values_ty	enum
indent_main_loop	function
(	O
BOOLEAN	char
*	O
pbreak_line	pointer
)	O
{	O
codes_ty	enum
hd_type	pointer
=	O
code_eof	int
;	O
char	O
*	O
t_ptr	pointer
=	O
NULL	O
;	O
codes_ty	enum
type_code	enum
=	O
start_token	int
;	O
exit_values_ty	enum
file_exit_value	pointer
=	O
total_success	int
;	O
int	O
dec_ind	pointer
=	O
0	int
;	O
BOOLEAN	char
scase	pointer
=	O
false	int
;	O
BOOLEAN	char
flushed_nl	pointer
;	O
BOOLEAN	char
sp_sw	pointer
=	O
false	int
;	O
BOOLEAN	char
force_nl	int
=	O
false	int
;	O
BOOLEAN	char
last_token_ends_sp	pointer
=	O
false	int
;	O
BOOLEAN	char
last_else	pointer
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
BOOLEAN	char
is_procname_definition	char
;	O
bb_code_ty	enum
can_break	enum
=	O
bb_none	int
;	O
if	O
(	O
type_code	enum
!=	O
newline	int
)	O
{	O
can_break	enum
=	O
parser_state_tos	pointer
->	O
can_break	enum
;	O
}	O
parser_state_tos	pointer
->	O
last_saw_nl	int
=	O
false	int
;	O
parser_state_tos	pointer
->	O
can_break	enum
=	O
bb_none	int
;	O
type_code	enum
=	O
lexi	function
(	O
)	O
;	O
if	O
(	O
(	O
settings	struct
.	O
max_col	int
>	O
0	int
)	O
&&	O
(	O
buf_break	pointer
!=	O
NULL	O
)	O
&&	O
(	O
(	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
ident	int
)	O
&&	O
(	O
type_code	enum
!=	O
comma	int
)	O
&&	O
(	O
type_code	enum
!=	O
semicolon	int
)	O
&&	O
(	O
type_code	enum
!=	O
newline	int
)	O
&&	O
(	O
type_code	enum
!=	O
form_feed	int
)	O
&&	O
(	O
type_code	enum
!=	O
rparen	int
)	O
&&	O
(	O
type_code	enum
!=	O
struct_delim	int
)	O
)	O
||	O
(	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
rparen	int
)	O
&&	O
(	O
type_code	enum
!=	O
comma	int
)	O
&&	O
(	O
type_code	enum
!=	O
rparen	int
)	O
)	O
)	O
&&	O
(	O
output_line_length	function
(	O
)	O
>	O
settings	struct
.	O
max_col	int
)	O
)	O
{	O
*	O
pbreak_line	pointer
=	O
true	int
;	O
}	O
if	O
(	O
last_token_ends_sp	pointer
>	O
0	int
)	O
{	O
last_token_ends_sp	pointer
--	O
;	O
}	O
is_procname_definition	char
=	O
(	O
(	O
(	O
parser_state_tos	pointer
->	O
procname	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
&&	O
parser_state_tos	pointer
->	O
in_parameter_declaration	int
)	O
||	O
(	O
parser_state_tos	pointer
->	O
classname	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
)	O
;	O
flushed_nl	pointer
=	O
false	int
;	O
if	O
(	O
settings	struct
.	O
allow_single_line_conditionals	int
&&	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
rparen	int
||	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
sp_else	int
)	O
)	O
force_nl	int
=	O
false	int
;	O
if	O
(	O
parser_state_tos	pointer
->	O
block_init	int
&&	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
rbrace	int
&&	O
*	O
token	pointer
==	O
','	O
)	O
force_nl	int
=	O
false	int
;	O
if	O
(	O
!	O
search_brace	int
(	O
&	O
type_code	enum
,	O
&	O
force_nl	int
,	O
&	O
flushed_nl	pointer
,	O
&	O
last_else	pointer
,	O
&	O
is_procname_definition	char
,	O
pbreak_line	pointer
)	O
)	O
{	O
return	O
indent_punt	int
;	O
}	O
if	O
(	O
type_code	enum
==	O
code_eof	int
)	O
{	O
if	O
(	O
s_lab	pointer
!=	O
e_lab	pointer
||	O
s_code	pointer
!=	O
e_code	pointer
||	O
s_com	pointer
!=	O
e_com	pointer
)	O
{	O
dump_line	function
(	O
true	int
,	O
&	O
paren_target	int
,	O
pbreak_line	pointer
)	O
;	O
}	O
if	O
(	O
parser_state_tos	pointer
->	O
tos	int
>	O
1	int
)	O
{	O
ERROR	O
(	O
_	O
(	O
"Unexpected end of file"	pointer
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
file_exit_value	pointer
=	O
indent_error	int
;	O
}	O
if	O
(	O
settings	struct
.	O
verbose	int
)	O
{	O
printf	function
(	O
_	O
(	O
"There were %d non-blank output lines and %d comments\n"	pointer
)	O
,	O
(	O
int	O
)	O
out_lines	int
,	O
(	O
int	O
)	O
com_lines	int
)	O
;	O
if	O
(	O
com_lines	int
>	O
0	int
&&	O
code_lines	int
>	O
0	int
)	O
{	O
printf	function
(	O
_	O
(	O
"(Lines with comments)/(Lines with code): %6.3f\n"	pointer
)	O
,	O
(	O
1.0	int
*	O
com_lines	int
)	O
/	O
code_lines	int
)	O
;	O
}	O
}	O
flush_output	function
(	O
)	O
;	O
return	O
file_exit_value	pointer
;	O
}	O
if	O
(	O
(	O
type_code	enum
!=	O
comment	int
)	O
&&	O
(	O
type_code	enum
!=	O
cplus_comment	int
)	O
&&	O
(	O
type_code	enum
!=	O
newline	int
)	O
&&	O
(	O
type_code	enum
!=	O
preesc	int
)	O
&&	O
(	O
type_code	enum
!=	O
form_feed	int
)	O
)	O
{	O
if	O
(	O
force_nl	int
&&	O
(	O
type_code	enum
!=	O
semicolon	int
)	O
&&	O
(	O
(	O
type_code	enum
!=	O
lbrace	int
)	O
||	O
(	O
!	O
parser_state_tos	pointer
->	O
in_decl	char
&&	O
!	O
settings	struct
.	O
btype_2	int
)	O
||	O
(	O
parser_state_tos	pointer
->	O
in_decl	char
&&	O
!	O
settings	struct
.	O
braces_on_struct_decl_line	int
)	O
||	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
rbrace	int
)	O
)	O
)	O
{	O
if	O
(	O
settings	struct
.	O
verbose	int
&&	O
!	O
flushed_nl	pointer
)	O
{	O
WARNING	O
(	O
_	O
(	O
"Line broken 2"	pointer
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
flushed_nl	pointer
=	O
false	int
;	O
dump_line	function
(	O
true	int
,	O
&	O
paren_target	int
,	O
pbreak_line	pointer
)	O
;	O
parser_state_tos	pointer
->	O
want_blank	int
=	O
false	int
;	O
force_nl	int
=	O
false	int
;	O
}	O
parser_state_tos	pointer
->	O
in_stmt	int
=	O
true	int
;	O
if	O
(	O
s_com	pointer
!=	O
e_com	pointer
)	O
{	O
if	O
(	O
e_code	pointer
!=	O
s_code	pointer
)	O
{	O
set_buf_break	function
(	O
bb_embedded_comment_start	int
,	O
paren_target	int
)	O
;	O
*	O
e_code	pointer
++	O
=	O
' '	O
;	O
embedded_comment_on_line	int
=	O
2	int
;	O
}	O
else	O
{	O
embedded_comment_on_line	int
=	O
1	int
;	O
}	O
for	O
(	O
t_ptr	pointer
=	O
s_com	pointer
;	O
*	O
t_ptr	pointer
;	O
++	O
t_ptr	pointer
)	O
{	O
check_code_size	function
(	O
)	O
;	O
*	O
e_code	pointer
++	O
=	O
*	O
t_ptr	pointer
;	O
}	O
set_buf_break	function
(	O
bb_embedded_comment_end	int
,	O
paren_target	int
)	O
;	O
*	O
e_code	pointer
++	O
=	O
' '	O
;	O
*	O
e_code	pointer
=	O
'\0'	O
;	O
parser_state_tos	pointer
->	O
want_blank	int
=	O
false	int
;	O
e_com	pointer
=	O
s_com	pointer
;	O
}	O
}	O
else	O
if	O
(	O
(	O
type_code	enum
!=	O
comment	int
)	O
&&	O
(	O
type_code	enum
!=	O
cplus_comment	int
)	O
&&	O
!	O
(	O
settings	struct
.	O
break_function_decl_args	int
&&	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
comma	int
)	O
)	O
&&	O
!	O
(	O
(	O
parser_state_tos	pointer
->	O
last_token	enum
==	O
comma	int
)	O
&&	O
!	O
settings	struct
.	O
leave_comma	int
)	O
)	O
{	O
force_nl	int
=	O
false	int
;	O
}	O
else	O
{	O
}	O
check_code_size	function
(	O
)	O
;	O
handle_the_token	function
(	O
type_code	enum
,	O
&	O
scase	pointer
,	O
&	O
force_nl	int
,	O
&	O
sp_sw	pointer
,	O
&	O
flushed_nl	pointer
,	O
&	O
hd_type	pointer
,	O
&	O
dec_ind	pointer
,	O
&	O
last_token_ends_sp	pointer
,	O
&	O
file_exit_value	pointer
,	O
can_break	enum
,	O
&	O
last_else	pointer
,	O
is_procname_definition	char
,	O
pbreak_line	pointer
)	O
;	O
*	O
e_code	pointer
=	O
'\0'	O
;	O
if	O
(	O
(	O
type_code	enum
!=	O
comment	int
)	O
&&	O
(	O
type_code	enum
!=	O
cplus_comment	int
)	O
&&	O
(	O
type_code	enum
!=	O
newline	int
)	O
&&	O
(	O
type_code	enum
!=	O
preesc	int
)	O
&&	O
(	O
type_code	enum
!=	O
form_feed	int
)	O
)	O
{	O
parser_state_tos	pointer
->	O
last_token	enum
=	O
type_code	enum
;	O
}	O
if	O
(	O
(	O
settings	struct
.	O
max_col	int
>	O
0	int
)	O
&&	O
(	O
buf_break	pointer
!=	O
NULL	O
)	O
)	O
{	O
if	O
(	O
(	O
(	O
type_code	enum
==	O
binary_op	int
)	O
||	O
(	O
type_code	enum
==	O
postop	int
)	O
||	O
(	O
type_code	enum
==	O
question	int
)	O
||	O
(	O
(	O
type_code	enum
==	O
colon	int
)	O
&&	O
(	O
scase	pointer
||	O
(	O
squest	int
<=	O
0	int
)	O
)	O
)	O
||	O
(	O
type_code	enum
==	O
semicolon	int
)	O
||	O
(	O
type_code	enum
==	O
sp_nparen	int
)	O
||	O
(	O
type_code	enum
==	O
sp_else	int
)	O
||	O
(	O
(	O
type_code	enum
==	O
ident	int
)	O
&&	O
(	O
*	O
token	pointer
==	O
'\"'	O
)	O
)	O
||	O
(	O
type_code	enum
==	O
struct_delim	int
)	O
||	O
(	O
type_code	enum
==	O
comma	int
)	O
)	O
&&	O
(	O
output_line_length	function
(	O
)	O
>	O
settings	struct
.	O
max_col	int
)	O
)	O
{	O
*	O
pbreak_line	pointer
=	O
true	int
;	O
}	O
}	O
}	O
}	O
static	O
exit_values_ty	enum
indent	function
(	O
file_buffer_ty	struct
*	O
this_file	pointer
)	O
{	O
BOOLEAN	char
break_line	pointer
=	O
false	int
;	O
in_prog	pointer
=	O
this_file	pointer
->	O
data	pointer
;	O
in_prog_pos	pointer
=	O
this_file	pointer
->	O
data	pointer
;	O
in_prog_size	long
=	O
this_file	pointer
->	O
size	long
;	O
squest	int
=	O
false	int
;	O
n_real_blanklines	int
=	O
0	int
;	O
postfix_blankline_requested	int
=	O
0	int
;	O
clear_buf_break_list	function
(	O
&	O
break_line	pointer
)	O
;	O
if	O
(	O
settings	struct
.	O
decl_com_ind	int
<=	O
0	int
)	O
{	O
settings	struct
.	O
decl_com_ind	int
=	O
settings	struct
.	O
ljust_decl	int
?	O
(	O
settings	struct
.	O
com_ind	int
<=	O
10	int
?	O
2	int
:	O
settings	struct
.	O
com_ind	int
-	O
8	int
)	O
:	O
settings	struct
.	O
com_ind	int
;	O
}	O
if	O
(	O
settings	struct
.	O
continuation_indent	int
==	O
0	int
)	O
{	O
settings	struct
.	O
continuation_indent	int
=	O
settings	struct
.	O
ind_size	int
;	O
}	O
if	O
(	O
settings	struct
.	O
paren_indent	int
==	O
-	O
1	int
)	O
{	O
settings	struct
.	O
paren_indent	int
=	O
settings	struct
.	O
continuation_indent	int
;	O
}	O
if	O
(	O
settings	struct
.	O
case_brace_indent	int
==	O
-	O
1	int
)	O
{	O
settings	struct
.	O
case_brace_indent	int
=	O
settings	struct
.	O
ind_size	int
;	O
}	O
fill_buffer	function
(	O
)	O
;	O
return	O
indent_main_loop	function
(	O
&	O
break_line	pointer
)	O
;	O
}	O
static	O
char	O
*	O
handle_profile	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
i	int
;	O
char	O
*	O
profile_pathname	pointer
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-npro"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"--ignore-profile"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"+ignore-profile"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
break	O
;	O
}	O
}	O
if	O
(	O
i	int
>=	O
argc	int
)	O
{	O
profile_pathname	pointer
=	O
set_profile	function
(	O
)	O
;	O
}	O
return	O
profile_pathname	pointer
;	O
}	O
static	O
char	O
*	O
out_name	pointer
=	O
0	int
;	O
static	O
int	O
input_files	int
=	O
0	int
;	O
static	O
char	O
*	O
*	O
in_file_names	pointer
=	O
NULL	O
;	O
static	O
int	O
max_input_files	int
=	O
128	int
;	O
static	O
exit_values_ty	enum
process_args	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
,	O
BOOLEAN	char
*	O
using_stdin	pointer
)	O
{	O
int	O
i	int
;	O
exit_values_ty	enum
exit_status	enum
=	O
total_success	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
(	O
*	O
argv	array
[	O
i	int
]	O
!=	O
'-'	O
)	O
&&	O
(	O
*	O
argv	array
[	O
i	int
]	O
!=	O
'+'	O
)	O
)	O
{	O
if	O
(	O
settings	struct
.	O
expect_output_file	int
==	O
true	int
)	O
{	O
if	O
(	O
out_name	pointer
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"indent: only one output file (2nd was %s)\n"	pointer
)	O
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
exit_status	enum
=	O
invocation_error	int
;	O
break	O
;	O
}	O
if	O
(	O
input_files	int
>	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"indent: only one input file when output file is specified\n"	pointer
)	O
)	O
;	O
exit_status	enum
=	O
invocation_error	int
;	O
break	O
;	O
}	O
out_name	pointer
=	O
argv	array
[	O
i	int
]	O
;	O
settings	struct
.	O
expect_output_file	int
=	O
false	int
;	O
continue	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
using_stdin	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"indent: can't have filenames when specifying standard input\n"	pointer
)	O
)	O
;	O
exit_status	enum
=	O
invocation_error	int
;	O
break	O
;	O
}	O
input_files	int
++	O
;	O
if	O
(	O
input_files	int
>	O
1	int
)	O
{	O
if	O
(	O
out_name	pointer
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"indent: only one input file when output file is specified\n"	pointer
)	O
)	O
;	O
exit_status	enum
=	O
invocation_error	int
;	O
break	O
;	O
}	O
if	O
(	O
settings	struct
.	O
use_stdout	int
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"indent: only one input file when stdout is used\n"	pointer
)	O
)	O
;	O
exit_status	enum
=	O
invocation_error	int
;	O
break	O
;	O
}	O
if	O
(	O
input_files	int
>	O
max_input_files	int
)	O
{	O
max_input_files	int
=	O
2	int
*	O
max_input_files	int
;	O
in_file_names	pointer
=	O
xrealloc	function
(	O
in_file_names	pointer
,	O
(	O
max_input_files	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
)	O
;	O
}	O
}	O
in_file_names	pointer
[	O
input_files	int
-	O
1	int
]	O
=	O
argv	array
[	O
i	int
]	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
input_files	int
>	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"indent: can't have filenames when specifying standard input\n"	pointer
)	O
)	O
;	O
exit_status	enum
=	O
invocation_error	int
;	O
break	O
;	O
}	O
*	O
using_stdin	pointer
=	O
true	int
;	O
}	O
else	O
{	O
i	int
+=	O
set_option	function
(	O
argv	array
[	O
i	int
]	O
,	O
(	O
i	int
<	O
argc	int
?	O
argv	array
[	O
i	int
+	O
1	int
]	O
:	O
0	int
)	O
,	O
1	int
,	O
_	O
(	O
"command line"	pointer
)	O
)	O
;	O
}	O
}	O
}	O
return	O
exit_status	enum
;	O
}	O
static	O
exit_values_ty	enum
indent_multiple_files	function
(	O
void	O
)	O
{	O
exit_values_ty	enum
exit_status	enum
=	O
total_success	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
input_files	int
;	O
i	int
++	O
,	O
input_files	int
--	O
)	O
{	O
exit_values_ty	enum
status	int
;	O
struct	O
stat	struct
file_stats	pointer
;	O
in_name	pointer
=	O
in_file_names	pointer
[	O
i	int
]	O
;	O
out_name	pointer
=	O
in_file_names	pointer
[	O
i	int
]	O
;	O
current_input	pointer
=	O
read_file	function
(	O
in_file_names	pointer
[	O
i	int
]	O
,	O
&	O
file_stats	pointer
)	O
;	O
open_output	function
(	O
out_name	pointer
,	O
"r+"	pointer
)	O
;	O
make_backup	function
(	O
current_input	pointer
,	O
&	O
file_stats	pointer
)	O
;	O
reopen_output_trunc	function
(	O
out_name	pointer
)	O
;	O
reset_parser	function
(	O
)	O
;	O
status	int
=	O
indent	function
(	O
current_input	pointer
)	O
;	O
if	O
(	O
status	int
>	O
exit_status	enum
)	O
{	O
exit_status	enum
=	O
status	int
;	O
}	O
if	O
(	O
settings	struct
.	O
preserve_mtime	int
)	O
{	O
close_output	function
(	O
&	O
file_stats	pointer
,	O
out_name	pointer
)	O
;	O
}	O
else	O
{	O
close_output	function
(	O
NULL	O
,	O
out_name	pointer
)	O
;	O
}	O
}	O
return	O
exit_status	enum
;	O
}	O
static	O
exit_values_ty	enum
indent_single_file	function
(	O
BOOLEAN	char
using_stdin	pointer
)	O
{	O
int	O
is_stdin	int
=	O
false	int
;	O
exit_values_ty	enum
exit_status	enum
=	O
total_success	int
;	O
struct	O
stat	struct
file_stats	pointer
;	O
if	O
(	O
(	O
input_files	int
==	O
0	int
)	O
||	O
using_stdin	pointer
)	O
{	O
input_files	int
=	O
1	int
;	O
in_file_names	pointer
[	O
0	int
]	O
=	O
"Standard input"	pointer
;	O
in_name	pointer
=	O
in_file_names	pointer
[	O
0	int
]	O
;	O
current_input	pointer
=	O
read_stdin	function
(	O
)	O
;	O
is_stdin	int
=	O
true	int
;	O
}	O
else	O
{	O
in_name	pointer
=	O
in_file_names	pointer
[	O
0	int
]	O
;	O
current_input	pointer
=	O
read_file	function
(	O
in_file_names	pointer
[	O
0	int
]	O
,	O
&	O
file_stats	pointer
)	O
;	O
if	O
(	O
!	O
out_name	pointer
&&	O
!	O
settings	struct
.	O
use_stdout	int
)	O
{	O
out_name	pointer
=	O
in_file_names	pointer
[	O
0	int
]	O
;	O
make_backup	function
(	O
current_input	pointer
,	O
&	O
file_stats	pointer
)	O
;	O
}	O
}	O
if	O
(	O
settings	struct
.	O
use_stdout	int
||	O
!	O
out_name	pointer
)	O
{	O
open_output	function
(	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
open_output	function
(	O
out_name	pointer
,	O
"w"	pointer
)	O
;	O
}	O
reset_parser	function
(	O
)	O
;	O
exit_status	enum
=	O
indent	function
(	O
current_input	pointer
)	O
;	O
if	O
(	O
input_files	int
>	O
0	int
&&	O
!	O
using_stdin	pointer
&&	O
settings	struct
.	O
preserve_mtime	int
)	O
{	O
close_output	function
(	O
&	O
file_stats	pointer
,	O
out_name	pointer
)	O
;	O
}	O
else	O
{	O
close_output	function
(	O
NULL	O
,	O
out_name	pointer
)	O
;	O
}	O
if	O
(	O
current_input	pointer
)	O
{	O
if	O
(	O
!	O
is_stdin	int
&&	O
current_input	pointer
->	O
name	pointer
)	O
xfree	function
(	O
current_input	pointer
->	O
name	pointer
)	O
;	O
xfree	function
(	O
current_input	pointer
->	O
data	pointer
)	O
;	O
}	O
return	O
exit_status	enum
;	O
}	O
static	O
exit_values_ty	enum
indent_all	function
(	O
BOOLEAN	char
using_stdin	pointer
)	O
{	O
exit_values_ty	enum
exit_status	enum
=	O
total_success	int
;	O
if	O
(	O
input_files	int
>	O
1	int
)	O
{	O
exit_status	enum
=	O
indent_multiple_files	function
(	O
)	O
;	O
}	O
else	O
{	O
exit_status	enum
=	O
indent_single_file	function
(	O
using_stdin	pointer
)	O
;	O
}	O
return	O
exit_status	enum
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	array
)	O
{	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
profile_pathname	pointer
=	O
0	int
;	O
BOOLEAN	char
using_stdin	pointer
=	O
false	int
;	O
exit_values_ty	enum
exit_status	enum
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
memset	function
(	O
&	O
settings	struct
,	O
0	int
,	O
sizeof	O
(	O
settings	struct
)	O
)	O
;	O
tmp	pointer
=	O
xmalloc	function
(	O
7	int
)	O
;	O
memcpy	function
(	O
tmp	pointer
,	O
"size_t"	pointer
,	O
7	int
)	O
;	O
addkey	function
(	O
tmp	pointer
,	O
rw_decl	int
)	O
;	O
tmp	pointer
=	O
xmalloc	function
(	O
8	int
)	O
;	O
memcpy	function
(	O
tmp	pointer
,	O
"wchar_t"	pointer
,	O
8	int
)	O
;	O
addkey	function
(	O
tmp	pointer
,	O
rw_decl	int
)	O
;	O
tmp	pointer
=	O
xmalloc	function
(	O
10	int
)	O
;	O
memcpy	function
(	O
tmp	pointer
,	O
"ptrdiff_t"	pointer
,	O
10	int
)	O
;	O
addkey	function
(	O
tmp	pointer
,	O
rw_decl	int
)	O
;	O
init_parser	function
(	O
)	O
;	O
initialize_backups	function
(	O
)	O
;	O
exit_status	enum
=	O
total_success	int
;	O
input_files	int
=	O
0	int
;	O
in_file_names	pointer
=	O
xmalloc	function
(	O
max_input_files	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
set_defaults	function
(	O
)	O
;	O
profile_pathname	pointer
=	O
handle_profile	function
(	O
argc	int
,	O
argv	array
)	O
;	O
exit_status	enum
=	O
process_args	function
(	O
argc	int
,	O
argv	array
,	O
&	O
using_stdin	pointer
)	O
;	O
if	O
(	O
exit_status	enum
==	O
total_success	int
)	O
{	O
if	O
(	O
settings	struct
.	O
verbose	int
&&	O
profile_pathname	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Read profile %s\n"	pointer
)	O
,	O
profile_pathname	pointer
)	O
;	O
}	O
set_defaults_after	function
(	O
)	O
;	O
exit_status	enum
=	O
indent_all	function
(	O
using_stdin	pointer
)	O
;	O
}	O
if	O
(	O
profile_pathname	pointer
)	O
xfree	function
(	O
profile_pathname	pointer
)	O
;	O
xfree	function
(	O
in_file_names	pointer
)	O
;	O
uninit_parser	function
(	O
)	O
;	O
cleanup_user_specials	function
(	O
)	O
;	O
return	O
exit_status	enum
;	O
}	O
