void	O
_matrix_product	function
(	O
const	O
double	O
m	array
[	O
6	int
]	O
,	O
const	O
double	O
n	array
[	O
6	int
]	O
,	O
double	O
product	array
[	O
6	int
]	O
)	O
{	O
double	O
local_product	array
[	O
6	int
]	O
;	O
local_product	array
[	O
0	int
]	O
=	O
m	array
[	O
0	int
]	O
*	O
n	array
[	O
0	int
]	O
+	O
m	array
[	O
1	int
]	O
*	O
n	array
[	O
2	int
]	O
;	O
local_product	array
[	O
1	int
]	O
=	O
m	array
[	O
0	int
]	O
*	O
n	array
[	O
1	int
]	O
+	O
m	array
[	O
1	int
]	O
*	O
n	array
[	O
3	int
]	O
;	O
local_product	array
[	O
2	int
]	O
=	O
m	array
[	O
2	int
]	O
*	O
n	array
[	O
0	int
]	O
+	O
m	array
[	O
3	int
]	O
*	O
n	array
[	O
2	int
]	O
;	O
local_product	array
[	O
3	int
]	O
=	O
m	array
[	O
2	int
]	O
*	O
n	array
[	O
1	int
]	O
+	O
m	array
[	O
3	int
]	O
*	O
n	array
[	O
3	int
]	O
;	O
local_product	array
[	O
4	int
]	O
=	O
m	array
[	O
4	int
]	O
*	O
n	array
[	O
0	int
]	O
+	O
m	array
[	O
5	int
]	O
*	O
n	array
[	O
2	int
]	O
+	O
n	array
[	O
4	int
]	O
;	O
local_product	array
[	O
5	int
]	O
=	O
m	array
[	O
4	int
]	O
*	O
n	array
[	O
1	int
]	O
+	O
m	array
[	O
5	int
]	O
*	O
n	array
[	O
3	int
]	O
+	O
n	array
[	O
5	int
]	O
;	O
memcpy	function
(	O
product	array
,	O
local_product	array
,	O
6	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
return	O
;	O
}	O
void	O
_matrix_inverse	function
(	O
const	O
double	O
m	array
[	O
6	int
]	O
,	O
double	O
inverse	array
[	O
6	int
]	O
)	O
{	O
double	O
det	double
=	O
m	array
[	O
0	int
]	O
*	O
m	array
[	O
3	int
]	O
-	O
m	array
[	O
1	int
]	O
*	O
m	array
[	O
2	int
]	O
;	O
if	O
(	O
det	double
==	O
0.0	int
)	O
inverse	array
[	O
0	int
]	O
=	O
inverse	array
[	O
1	int
]	O
=	O
inverse	array
[	O
2	int
]	O
=	O
inverse	array
[	O
3	int
]	O
=	O
inverse	array
[	O
4	int
]	O
=	O
inverse	array
[	O
5	int
]	O
=	O
0.0	int
;	O
else	O
{	O
double	O
invdet	double
=	O
1.0	int
/	O
det	double
;	O
inverse	array
[	O
0	int
]	O
=	O
invdet	double
*	O
m	array
[	O
3	int
]	O
;	O
inverse	array
[	O
1	int
]	O
=	O
-	O
invdet	double
*	O
m	array
[	O
1	int
]	O
;	O
inverse	array
[	O
2	int
]	O
=	O
-	O
invdet	double
*	O
m	array
[	O
2	int
]	O
;	O
inverse	array
[	O
3	int
]	O
=	O
invdet	double
*	O
m	array
[	O
0	int
]	O
;	O
inverse	array
[	O
4	int
]	O
=	O
invdet	double
*	O
(	O
m	array
[	O
2	int
]	O
*	O
m	array
[	O
5	int
]	O
-	O
m	array
[	O
3	int
]	O
*	O
m	array
[	O
4	int
]	O
)	O
;	O
inverse	array
[	O
5	int
]	O
=	O
invdet	double
*	O
(	O
m	array
[	O
1	int
]	O
*	O
m	array
[	O
4	int
]	O
-	O
m	array
[	O
0	int
]	O
*	O
m	array
[	O
5	int
]	O
)	O
;	O
}	O
}	O
double	O
_matrix_norm	function
(	O
const	O
double	O
m	array
[	O
6	int
]	O
)	O
{	O
double	O
mt	array
[	O
4	int
]	O
,	O
pm	array
[	O
4	int
]	O
;	O
double	O
norm1	double
,	O
norm2	double
;	O
double	O
a	array
[	O
4	int
]	O
;	O
int	O
i	int
;	O
mt	array
[	O
0	int
]	O
=	O
m	array
[	O
0	int
]	O
;	O
mt	array
[	O
1	int
]	O
=	O
m	array
[	O
2	int
]	O
;	O
mt	array
[	O
2	int
]	O
=	O
m	array
[	O
1	int
]	O
;	O
mt	array
[	O
3	int
]	O
=	O
m	array
[	O
3	int
]	O
;	O
pm	array
[	O
0	int
]	O
=	O
m	array
[	O
0	int
]	O
*	O
mt	array
[	O
0	int
]	O
+	O
m	array
[	O
1	int
]	O
*	O
mt	array
[	O
2	int
]	O
;	O
pm	array
[	O
1	int
]	O
=	O
m	array
[	O
0	int
]	O
*	O
mt	array
[	O
1	int
]	O
+	O
m	array
[	O
1	int
]	O
*	O
mt	array
[	O
3	int
]	O
;	O
pm	array
[	O
2	int
]	O
=	O
m	array
[	O
2	int
]	O
*	O
mt	array
[	O
0	int
]	O
+	O
m	array
[	O
3	int
]	O
*	O
mt	array
[	O
2	int
]	O
;	O
pm	array
[	O
3	int
]	O
=	O
m	array
[	O
2	int
]	O
*	O
mt	array
[	O
1	int
]	O
+	O
m	array
[	O
3	int
]	O
*	O
mt	array
[	O
3	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
a	array
[	O
i	int
]	O
=	O
fabs	function
(	O
pm	array
[	O
i	int
]	O
)	O
;	O
norm1	double
=	O
DMAX	O
(	O
a	array
[	O
0	int
]	O
+	O
a	array
[	O
1	int
]	O
,	O
a	array
[	O
2	int
]	O
+	O
a	array
[	O
3	int
]	O
)	O
;	O
norm2	double
=	O
DMAX	O
(	O
a	array
[	O
0	int
]	O
+	O
a	array
[	O
2	int
]	O
,	O
a	array
[	O
1	int
]	O
+	O
a	array
[	O
3	int
]	O
)	O
;	O
return	O
sqrt	function
(	O
sqrt	function
(	O
norm1	double
*	O
norm2	double
)	O
)	O
;	O
}	O
void	O
_matrix_sing_vals	function
(	O
const	O
double	O
m	array
[	O
6	int
]	O
,	O
double	O
*	O
min_sing_val	pointer
,	O
double	O
*	O
max_sing_val	pointer
)	O
{	O
double	O
mt	array
[	O
4	int
]	O
,	O
pm	array
[	O
4	int
]	O
;	O
double	O
trace	double
,	O
det	double
,	O
disc	double
,	O
sqrtdisc	double
;	O
double	O
s1	double
,	O
s2	double
;	O
mt	array
[	O
0	int
]	O
=	O
m	array
[	O
0	int
]	O
;	O
mt	array
[	O
1	int
]	O
=	O
m	array
[	O
2	int
]	O
;	O
mt	array
[	O
2	int
]	O
=	O
m	array
[	O
1	int
]	O
;	O
mt	array
[	O
3	int
]	O
=	O
m	array
[	O
3	int
]	O
;	O
pm	array
[	O
0	int
]	O
=	O
m	array
[	O
0	int
]	O
*	O
mt	array
[	O
0	int
]	O
+	O
m	array
[	O
1	int
]	O
*	O
mt	array
[	O
2	int
]	O
;	O
pm	array
[	O
1	int
]	O
=	O
m	array
[	O
0	int
]	O
*	O
mt	array
[	O
1	int
]	O
+	O
m	array
[	O
1	int
]	O
*	O
mt	array
[	O
3	int
]	O
;	O
pm	array
[	O
2	int
]	O
=	O
m	array
[	O
2	int
]	O
*	O
mt	array
[	O
0	int
]	O
+	O
m	array
[	O
3	int
]	O
*	O
mt	array
[	O
2	int
]	O
;	O
pm	array
[	O
3	int
]	O
=	O
m	array
[	O
2	int
]	O
*	O
mt	array
[	O
1	int
]	O
+	O
m	array
[	O
3	int
]	O
*	O
mt	array
[	O
3	int
]	O
;	O
trace	double
=	O
pm	array
[	O
0	int
]	O
+	O
pm	array
[	O
3	int
]	O
;	O
det	double
=	O
pm	array
[	O
0	int
]	O
*	O
pm	array
[	O
3	int
]	O
-	O
pm	array
[	O
1	int
]	O
*	O
pm	array
[	O
2	int
]	O
;	O
disc	double
=	O
trace	double
*	O
trace	double
-	O
4.0	int
*	O
det	double
;	O
disc	double
=	O
DMAX	O
(	O
0.0	int
,	O
disc	double
)	O
;	O
sqrtdisc	double
=	O
sqrt	function
(	O
disc	double
)	O
;	O
s1	double
=	O
0.5	int
*	O
(	O
trace	double
-	O
sqrtdisc	double
)	O
;	O
s2	double
=	O
0.5	int
*	O
(	O
trace	double
+	O
sqrtdisc	double
)	O
;	O
s1	double
=	O
DMAX	O
(	O
0.0	int
,	O
s1	double
)	O
;	O
s2	double
=	O
DMAX	O
(	O
0.0	int
,	O
s2	double
)	O
;	O
*	O
min_sing_val	pointer
=	O
sqrt	function
(	O
s1	double
)	O
;	O
*	O
max_sing_val	pointer
=	O
sqrt	function
(	O
s2	double
)	O
;	O
}	O
