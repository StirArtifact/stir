extern	O
unsigned	O
var	int
;	O
extern	O
void	O
*	O
label	pointer
;	O
intptr_t	long
v1	array
[	O
100	int
]	O
;	O
static	O
intptr_t	long
v2	array
[	O
100	int
]	O
;	O
extern	O
intptr_t	long
v3	array
[	O
100	int
]	O
;	O
void	O
foo	function
(	O
)	O
;	O
void	O
foo1	function
(	O
)	O
;	O
void	O
pl_call1	function
(	O
)	O
;	O
int	O
x	int
,	O
y	int
;	O
extern	O
intptr_t	long
pl_foreign_long	array
[	O
]	O
;	O
extern	O
double	O
pl_foreign_double	array
[	O
]	O
;	O
void	O
Dummy	function
(	O
)	O
;	O
void	O
Save_CP	function
(	O
)	O
;	O
void	O
foooo	function
(	O
)	O
;	O
void	O
TRANS_code_start_global	function
(	O
)	O
{	O
Dummy	function
(	O
)	O
;	O
Save_CP	function
(	O
)	O
;	O
foooo	function
(	O
1	int
,	O
2	int
,	O
3	int
)	O
;	O
}	O
static	O
void	O
TRANS_code_start_non_global	function
(	O
)	O
{	O
}	O
void	O
TRANS_pl_jump	function
(	O
)	O
{	O
M_Direct_Goto	O
(	O
foo1	function
)	O
;	O
_foo1	O
:	O
;	O
}	O
void	O
check	function
(	O
)	O
{	O
CodePtr	pointer
adr	pointer
=	O
(	O
CodePtr	pointer
)	O
&&	O
cont	O
;	O
bar	function
(	O
adr	pointer
)	O
;	O
cont	O
:	O
baz	function
(	O
CP	O
)	O
;	O
}	O
void	O
TRANS_pl_call	function
(	O
)	O
{	O
CP	O
=	O
(	O
CodePtr	pointer
)	O
&&	O
cont	O
;	O
M_Direct_Goto	O
(	O
foo	function
)	O
;	O
cont	O
:	O
dummy	function
(	O
CP	O
)	O
;	O
}	O
void	O
TRANS_pl_call_another	function
(	O
)	O
{	O
CP	O
=	O
(	O
CodePtr	pointer
)	O
&&	O
cont	O
;	O
foo	function
(	O
)	O
;	O
cont	O
:	O
CP	O
=	O
(	O
CodePtr	pointer
)	O
&	O
var	int
;	O
dummy	function
(	O
CP	O
)	O
;	O
cont2	O
:	O
CP	O
=	O
(	O
CodePtr	pointer
)	O
&&	O
cont2	O
;	O
dummy	function
(	O
var	int
)	O
;	O
}	O
void	O
TRANS_pl_fail	function
(	O
)	O
{	O
M_Indirect_Goto	O
(	O
ALTB	O
(	O
B	pointer
)	O
)	O
;	O
}	O
void	O
TRANS_pl_ret	function
(	O
)	O
{	O
M_Indirect_Goto	O
(	O
CP	O
)	O
;	O
}	O
void	O
TRANS_prep_cp_here_cp	function
(	O
)	O
{	O
CP	O
=	O
&&	O
a	O
;	O
if	O
(	O
x	int
<	O
3	int
)	O
{	O
bar	function
(	O
x	int
)	O
;	O
}	O
a	O
:	O
;	O
}	O
void	O
TRANS_jump	function
(	O
)	O
{	O
if	O
(	O
x	int
<	O
3	int
)	O
{	O
bar	function
(	O
x	int
)	O
;	O
goto	O
a	O
;	O
}	O
x	int
++	O
;	O
a	O
:	O
;	O
}	O
void	O
TRANS_move_x_to_x	function
(	O
)	O
{	O
X	O
(	O
3	int
)	O
=	O
X	O
(	O
5	int
)	O
;	O
}	O
void	O
TRANS_move_x_to_y	function
(	O
)	O
{	O
YY	O
(	O
10	int
)	O
=	O
X	O
(	O
2	int
)	O
;	O
}	O
void	O
TRANS_move_y_to_x	function
(	O
)	O
{	O
X	O
(	O
0	int
)	O
=	O
YY	O
(	O
3	int
)	O
;	O
}	O
void	O
TRANS_move_y_to_y	function
(	O
)	O
{	O
YY	O
(	O
2	int
)	O
=	O
YY	O
(	O
4	int
)	O
;	O
}	O
void	O
TRANS_call_c	function
(	O
void	O
)	O
{	O
dummy	function
(	O
)	O
;	O
bar	function
(	O
foo	function
,	O
var	int
,	O
12	int
,	O
4098	int
,	O
-	O
4095	int
,	O
(	O
double	O
)	O
1.20e-10	int
,	O
"this is a string"	pointer
,	O
"a\14b"	pointer
)	O
;	O
bar1	function
(	O
v1	array
[	O
2	int
]	O
,	O
v1	array
[	O
0	int
]	O
,	O
&	O
v1	array
[	O
12	int
]	O
,	O
v2	array
[	O
2	int
]	O
,	O
v2	array
[	O
0	int
]	O
,	O
&	O
v2	array
[	O
4	int
]	O
)	O
;	O
bar1	function
(	O
v3	array
[	O
4	int
]	O
,	O
&	O
v3	array
[	O
2	int
]	O
,	O
v3	array
[	O
0	int
]	O
)	O
;	O
bar2	function
(	O
X	O
(	O
0	int
)	O
,	O
&	O
X	O
(	O
4	int
)	O
,	O
YY	O
(	O
0	int
)	O
,	O
&	O
YY	O
(	O
12	int
)	O
)	O
;	O
}	O
void	O
TRANS_call_c_lot_of_args	function
(	O
void	O
)	O
{	O
bar	function
(	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
foo	function
,	O
var	int
,	O
12	int
,	O
4098	int
,	O
-	O
4095	int
,	O
(	O
double	O
)	O
1.20e-10	int
,	O
"this is a string"	pointer
,	O
"a\14b"	pointer
)	O
;	O
bar1	function
(	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
X	O
(	O
2	int
)	O
,	O
&	O
X	O
(	O
4	int
)	O
,	O
YY	O
(	O
0	int
)	O
,	O
&	O
YY	O
(	O
12	int
)	O
)	O
;	O
}	O
void	O
TRANS_call_c_foreign	function
(	O
void	O
)	O
{	O
bar	function
(	O
pl_foreign_long	array
[	O
0	int
]	O
,	O
pl_foreign_long	array
[	O
4	int
]	O
,	O
&	O
pl_foreign_long	array
[	O
0	int
]	O
,	O
&	O
pl_foreign_long	array
[	O
8	int
]	O
)	O
;	O
bar	function
(	O
pl_foreign_double	array
[	O
0	int
]	O
,	O
pl_foreign_double	array
[	O
4	int
]	O
,	O
&	O
pl_foreign_double	array
[	O
0	int
]	O
,	O
&	O
pl_foreign_double	array
[	O
8	int
]	O
)	O
;	O
}	O
void	O
TRANS_jump_ret	function
(	O
)	O
{	O
goto	O
*	O
bar	function
(	O
12	int
,	O
"toto"	pointer
)	O
;	O
}	O
void	O
TRANS_fail_ret	function
(	O
)	O
{	O
if	O
(	O
test	function
(	O
1	int
,	O
2	int
,	O
3	int
)	O
==	O
0	int
)	O
goto	O
a	O
;	O
x	int
++	O
;	O
a	O
:	O
;	O
}	O
void	O
TRANS_move_ret_to_mem	function
(	O
)	O
{	O
var	int
=	O
bar	function
(	O
3	int
)	O
;	O
v1	array
[	O
4120	int
]	O
=	O
bar	function
(	O
15	int
)	O
;	O
}	O
void	O
TRANS_move_ret_to_reg_x	function
(	O
)	O
{	O
X	O
(	O
4	int
)	O
=	O
bar	function
(	O
3	int
)	O
;	O
}	O
void	O
TRANS_move_ret_to_reg_y	function
(	O
)	O
{	O
YY	O
(	O
2	int
)	O
=	O
bar	function
(	O
3	int
)	O
;	O
}	O
void	O
TRANS_move_ret_to_pl_foreign_l	function
(	O
)	O
{	O
pl_foreign_long	array
[	O
123	int
]	O
=	O
bar	function
(	O
3	int
)	O
;	O
}	O
void	O
TRANS_move_ret_to_pl_foreign_d	function
(	O
)	O
{	O
double	O
bard	function
(	O
void	O
)	O
;	O
pl_foreign_double	array
[	O
123	int
]	O
=	O
bard	function
(	O
)	O
;	O
}	O
void	O
TRANS_cmp_ret_and_int	function
(	O
)	O
{	O
if	O
(	O
bar	function
(	O
foo	function
)	O
==	O
0	int
)	O
goto	O
a	O
;	O
if	O
(	O
bar	function
(	O
foo	function
)	O
==	O
12345678	int
)	O
goto	O
a	O
;	O
x	int
++	O
;	O
a	O
:	O
;	O
}	O
void	O
TRANS_jump_if_equal	function
(	O
)	O
{	O
if	O
(	O
x	int
==	O
y	int
)	O
goto	O
a	O
;	O
x	int
++	O
;	O
a	O
:	O
;	O
}	O
void	O
TRANS_jump_if_greater	function
(	O
)	O
{	O
if	O
(	O
x	int
>	O
12	int
)	O
goto	O
a	O
;	O
if	O
(	O
y	int
>	O
x	int
)	O
goto	O
a	O
;	O
x	int
++	O
;	O
a	O
:	O
foo	function
(	O
1	int
)	O
;	O
}	O
void	O
TRANS_c_ret	function
(	O
)	O
{	O
}	O
void	O
TRANS_dico_string	function
(	O
)	O
{	O
bar	function
(	O
"str1"	pointer
,	O
"str2"	pointer
,	O
"str3"	pointer
,	O
"str\r\tend\n"	pointer
,	O
"str\019toto"	pointer
)	O
;	O
}	O
static	O
intptr_t	long
var_long_static_uninit	long
;	O
static	O
intptr_t	long
var_long_static_init0	long
;	O
static	O
intptr_t	long
var_long_static_init100	long
=	O
100	int
;	O
intptr_t	long
var_long_common_unint	long
;	O
intptr_t	long
var_long_common_init128	long
=	O
128	int
;	O
intptr_t	long
ma_array	array
[	O
5000	int
]	O
;	O
intptr_t	long
ma_global_var1	long
;	O
intptr_t	long
ma_global_var2	long
=	O
12345	int
;	O
uint64_t	long
ma_global_var2bis	long
=	O
12345	int
;	O
static	O
intptr_t	long
ma_local_var1	long
;	O
static	O
intptr_t	long
ma_local_var2	long
=	O
128	int
;	O
static	O
intptr_t	long
var_array_static128	array
[	O
128	int
]	O
;	O
intptr_t	long
var_array_common128	array
[	O
128	int
]	O
;	O
static	O
void	O
initializer_fct	function
(	O
)	O
{	O
printf	function
(	O
"%p %p\n"	pointer
,	O
&	O
ma_local_var1	long
,	O
&	O
ma_local_var2	long
)	O
;	O
printf	function
(	O
"%ld %ld %ld %p\n"	pointer
,	O
var_long_static_uninit	long
,	O
var_long_static_init0	long
,	O
var_long_static_init100	long
,	O
var_array_static128	array
)	O
;	O
dummy	function
(	O
12	int
)	O
;	O
}	O
