bool	enum
_pl_c_paint_marker	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
type	enum
,	O
double	O
size	double
)	O
{	O
int	O
desired_marker_type	int
,	O
desired_marker_size	int
;	O
double	O
xd	double
,	O
yd	double
,	O
size_d	double
;	O
int	O
i_x	int
,	O
i_y	int
;	O
switch	O
(	O
type	enum
)	O
{	O
case	O
M_DOT	int
:	O
desired_marker_type	int
=	O
CGM_M_DOT	int
;	O
break	O
;	O
case	O
M_PLUS	int
:	O
desired_marker_type	int
=	O
CGM_M_PLUS	int
;	O
break	O
;	O
case	O
M_ASTERISK	int
:	O
desired_marker_type	int
=	O
CGM_M_ASTERISK	int
;	O
break	O
;	O
case	O
M_CIRCLE	int
:	O
desired_marker_type	int
=	O
CGM_M_CIRCLE	int
;	O
break	O
;	O
case	O
M_CROSS	int
:	O
desired_marker_type	int
=	O
CGM_M_CROSS	int
;	O
break	O
;	O
default	O
:	O
return	O
false	int
;	O
break	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
!=	O
0	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
cgm_marker_type	int
!=	O
desired_marker_type	int
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
2	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
6	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"MARKERTYPE"	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_marker_type	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_marker_type	int
=	O
desired_marker_type	int
;	O
}	O
size_d	double
=	O
sqrt	function
(	O
XDV	O
(	O
size	double
,	O
0	int
)	O
*	O
XDV	O
(	O
size	double
,	O
0	int
)	O
+	O
YDV	O
(	O
size	double
,	O
0	int
)	O
*	O
YDV	O
(	O
size	double
,	O
0	int
)	O
)	O
;	O
desired_marker_size	int
=	O
IROUND	O
(	O
MAXIMUM_MARKER_DIMENSION	O
*	O
size_d	double
)	O
;	O
if	O
(	O
desired_marker_type	int
!=	O
CGM_M_DOT	int
&&	O
_plotter	pointer
->	O
cgm_marker_size	int
!=	O
desired_marker_size	int
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
CGM_BINARY_BYTES_PER_INTEGER	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
7	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"MARKERSIZE"	pointer
)	O
;	O
_cgm_emit_integer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_marker_size	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_marker_size	int
=	O
desired_marker_size	int
;	O
}	O
_pl_c_set_pen_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
CGM_OBJECT_MARKER	int
)	O
;	O
xd	double
=	O
XD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
)	O
;	O
yd	double
=	O
YD	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
)	O
;	O
i_x	int
=	O
IROUND	O
(	O
xd	double
)	O
;	O
i_y	int
=	O
IROUND	O
(	O
yd	double
)	O
;	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
1	int
*	O
2	int
*	O
CGM_BINARY_BYTES_PER_INTEGER	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_GRAPHICAL_PRIMITIVE_ELEMENT	int
,	O
3	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"MARKER"	pointer
)	O
;	O
_cgm_emit_point	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
i_x	int
,	O
i_y	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
}	O
}	O
return	O
true	int
;	O
}	O
