enum	O
{	O
WILD_FALSE	int
=	O
0	int
,	O
WILD_TRUE	int
,	O
WILD_ABORT	int
}	O
;	O
static	O
int	O
match_char_class	function
(	O
char	O
const	O
*	O
*	O
pexpr	pointer
,	O
char	O
c	int
)	O
{	O
int	O
res	int
;	O
int	O
rc	int
;	O
char	O
const	O
*	O
expr	pointer
=	O
*	O
pexpr	pointer
;	O
expr	pointer
++	O
;	O
if	O
(	O
*	O
expr	pointer
==	O
'^'	O
)	O
{	O
res	int
=	O
0	int
;	O
expr	pointer
++	O
;	O
}	O
else	O
res	int
=	O
1	int
;	O
if	O
(	O
*	O
expr	pointer
==	O
'-'	O
||	O
*	O
expr	pointer
==	O
']'	O
)	O
rc	int
=	O
c	int
==	O
*	O
expr	pointer
++	O
;	O
else	O
rc	int
=	O
!	O
res	int
;	O
for	O
(	O
;	O
*	O
expr	pointer
&&	O
*	O
expr	pointer
!=	O
']'	O
;	O
expr	pointer
++	O
)	O
{	O
if	O
(	O
rc	int
==	O
res	int
)	O
{	O
if	O
(	O
*	O
expr	pointer
==	O
'\\'	O
&&	O
expr	pointer
[	O
1	int
]	O
==	O
']'	O
)	O
expr	pointer
++	O
;	O
}	O
else	O
if	O
(	O
expr	pointer
[	O
1	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
*	O
expr	pointer
==	O
'\\'	O
)	O
rc	int
=	O
*	O
++	O
expr	pointer
==	O
c	int
;	O
else	O
{	O
rc	int
=	O
*	O
expr	pointer
<=	O
c	int
&&	O
c	int
<=	O
expr	pointer
[	O
2	int
]	O
;	O
expr	pointer
+=	O
2	int
;	O
}	O
}	O
else	O
if	O
(	O
*	O
expr	pointer
==	O
'\\'	O
&&	O
expr	pointer
[	O
1	int
]	O
==	O
']'	O
)	O
rc	int
=	O
*	O
++	O
expr	pointer
==	O
c	int
;	O
else	O
rc	int
=	O
*	O
expr	pointer
==	O
c	int
;	O
}	O
*	O
pexpr	pointer
=	O
*	O
expr	pointer
?	O
expr	pointer
+	O
1	int
:	O
expr	pointer
;	O
return	O
rc	int
==	O
res	int
;	O
}	O
int	O
wilder_match	function
(	O
char	O
const	O
*	O
expr	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
size_t	long
len	long
)	O
{	O
int	O
c	int
;	O
while	O
(	O
expr	pointer
&&	O
*	O
expr	pointer
)	O
{	O
if	O
(	O
END_OF_NAME	O
(	O
name	pointer
,	O
len	long
)	O
&&	O
*	O
expr	pointer
!=	O
'*'	O
)	O
return	O
WILD_ABORT	int
;	O
switch	O
(	O
*	O
expr	pointer
)	O
{	O
case	O
'*'	O
:	O
while	O
(	O
*	O
++	O
expr	pointer
==	O
'*'	O
)	O
;	O
if	O
(	O
*	O
expr	pointer
==	O
0	int
)	O
return	O
WILD_TRUE	int
;	O
while	O
(	O
!	O
END_OF_NAME	O
(	O
name	pointer
,	O
len	long
)	O
)	O
{	O
int	O
res	int
;	O
res	int
=	O
wilder_match	function
(	O
expr	pointer
,	O
name	pointer
,	O
len	long
)	O
;	O
if	O
(	O
res	int
!=	O
WILD_FALSE	int
)	O
return	O
res	int
;	O
NEXT_CHAR	O
(	O
name	pointer
,	O
len	long
)	O
;	O
}	O
return	O
WILD_ABORT	int
;	O
case	O
'?'	O
:	O
expr	pointer
++	O
;	O
NEXT_CHAR	O
(	O
name	pointer
,	O
len	long
)	O
;	O
break	O
;	O
case	O
'['	O
:	O
if	O
(	O
!	O
match_char_class	function
(	O
&	O
expr	pointer
,	O
*	O
name	pointer
)	O
)	O
return	O
WILD_FALSE	int
;	O
NEXT_CHAR	O
(	O
name	pointer
,	O
len	long
)	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
expr	pointer
[	O
1	int
]	O
)	O
{	O
c	int
=	O
*	O
++	O
expr	pointer
;	O
expr	pointer
++	O
;	O
if	O
(	O
*	O
name	pointer
!=	O
wordsplit_c_unquote_char	function
(	O
c	int
)	O
)	O
return	O
WILD_FALSE	int
;	O
NEXT_CHAR	O
(	O
name	pointer
,	O
len	long
)	O
;	O
break	O
;	O
}	O
default	O
:	O
if	O
(	O
*	O
expr	pointer
!=	O
*	O
name	pointer
)	O
return	O
WILD_FALSE	int
;	O
expr	pointer
++	O
;	O
NEXT_CHAR	O
(	O
name	pointer
,	O
len	long
)	O
;	O
}	O
}	O
return	O
END_OF_NAME	O
(	O
name	pointer
,	O
len	long
)	O
?	O
WILD_TRUE	int
:	O
WILD_FALSE	int
;	O
}	O
int	O
wildmatch	function
(	O
char	O
const	O
*	O
expr	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
size_t	long
len	long
)	O
{	O
return	O
wilder_match	function
(	O
expr	pointer
,	O
name	pointer
,	O
len	long
)	O
!=	O
WILD_TRUE	int
;	O
}	O
