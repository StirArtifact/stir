void	O
mpn_div_q	O
(	O
mp_ptr	pointer
qp	pointer
,	O
mp_srcptr	pointer
np	pointer
,	O
mp_size_t	long
nn	long
,	O
mp_srcptr	pointer
dp	pointer
,	O
mp_size_t	long
dn	long
,	O
mp_ptr	pointer
scratch	pointer
)	O
{	O
mp_ptr	pointer
new_dp	pointer
,	O
new_np	pointer
,	O
tp	pointer
,	O
rp	pointer
;	O
mp_limb_t	long
cy	long
,	O
dh	long
,	O
qh	long
;	O
mp_size_t	long
new_nn	long
,	O
qn	long
;	O
gmp_pi1_t	struct
dinv	struct
;	O
int	O
cnt	int
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
ASSERT	O
(	O
nn	long
>=	O
dn	long
)	O
;	O
ASSERT	O
(	O
dn	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
dp	pointer
[	O
dn	long
-	O
1	int
]	O
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
qp	pointer
,	O
nn	long
-	O
dn	long
+	O
1	int
,	O
np	pointer
,	O
nn	long
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
qp	pointer
,	O
nn	long
-	O
dn	long
+	O
1	int
,	O
dp	pointer
,	O
dn	long
)	O
)	O
;	O
ASSERT	O
(	O
MPN_SAME_OR_SEPARATE_P	O
(	O
np	pointer
,	O
scratch	pointer
,	O
nn	long
)	O
)	O
;	O
ASSERT_ALWAYS	O
(	O
FUDGE	int
>=	O
2	int
)	O
;	O
if	O
(	O
dn	long
==	O
1	int
)	O
{	O
mpn_divrem_1	O
(	O
qp	pointer
,	O
0L	int
,	O
np	pointer
,	O
nn	long
,	O
dp	pointer
[	O
dn	long
-	O
1	int
]	O
)	O
;	O
return	O
;	O
}	O
qn	long
=	O
nn	long
-	O
dn	long
+	O
1	int
;	O
if	O
(	O
qn	long
+	O
FUDGE	int
>=	O
dn	long
)	O
{	O
new_np	pointer
=	O
scratch	pointer
;	O
dh	long
=	O
dp	pointer
[	O
dn	long
-	O
1	int
]	O
;	O
if	O
(	O
LIKELY	O
(	O
(	O
dh	long
&	O
GMP_NUMB_HIGHBIT	O
)	O
==	O
0	int
)	O
)	O
{	O
count_leading_zeros	O
(	O
cnt	int
,	O
dh	long
)	O
;	O
cy	long
=	O
mpn_lshift	O
(	O
new_np	pointer
,	O
np	pointer
,	O
nn	long
,	O
cnt	int
)	O
;	O
new_np	pointer
[	O
nn	long
]	O
=	O
cy	long
;	O
new_nn	long
=	O
nn	long
+	O
(	O
cy	long
!=	O
0	int
)	O
;	O
new_dp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
dn	long
)	O
;	O
mpn_lshift	O
(	O
new_dp	pointer
,	O
dp	pointer
,	O
dn	long
,	O
cnt	int
)	O
;	O
if	O
(	O
dn	long
==	O
2	int
)	O
{	O
qh	long
=	O
mpn_divrem_2	O
(	O
qp	pointer
,	O
0L	int
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
dn	long
,	O
DC_DIV_Q_THRESHOLD	O
)	O
||	O
BELOW_THRESHOLD	O
(	O
new_nn	long
-	O
dn	long
,	O
DC_DIV_Q_THRESHOLD	O
)	O
)	O
{	O
invert_pi1	O
(	O
dinv	struct
,	O
new_dp	pointer
[	O
dn	long
-	O
1	int
]	O
,	O
new_dp	pointer
[	O
dn	long
-	O
2	int
]	O
)	O
;	O
qh	long
=	O
mpn_sbpi1_div_q	O
(	O
qp	pointer
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
,	O
dn	long
,	O
dinv	struct
.	O
inv32	long
)	O
;	O
}	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
dn	long
,	O
MUPI_DIV_Q_THRESHOLD	O
)	O
||	O
BELOW_THRESHOLD	O
(	O
nn	long
,	O
2	int
*	O
MU_DIV_Q_THRESHOLD	O
)	O
||	O
(	O
double	O
)	O
(	O
2	int
*	O
(	O
MU_DIV_Q_THRESHOLD	O
-	O
MUPI_DIV_Q_THRESHOLD	O
)	O
)	O
*	O
dn	long
+	O
(	O
double	O
)	O
MUPI_DIV_Q_THRESHOLD	O
*	O
nn	long
>	O
(	O
double	O
)	O
dn	long
*	O
nn	long
)	O
{	O
invert_pi1	O
(	O
dinv	struct
,	O
new_dp	pointer
[	O
dn	long
-	O
1	int
]	O
,	O
new_dp	pointer
[	O
dn	long
-	O
2	int
]	O
)	O
;	O
qh	long
=	O
mpn_dcpi1_div_q	O
(	O
qp	pointer
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
,	O
dn	long
,	O
&	O
dinv	struct
)	O
;	O
}	O
else	O
{	O
mp_size_t	long
itch	long
=	O
mpn_mu_div_q_itch	O
(	O
new_nn	long
,	O
dn	long
,	O
0	int
)	O
;	O
mp_ptr	pointer
scratch	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
itch	long
)	O
;	O
qh	long
=	O
mpn_mu_div_q	O
(	O
qp	pointer
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
,	O
dn	long
,	O
scratch	pointer
)	O
;	O
}	O
if	O
(	O
cy	long
==	O
0	int
)	O
qp	pointer
[	O
qn	long
-	O
1	int
]	O
=	O
qh	long
;	O
else	O
if	O
(	O
UNLIKELY	O
(	O
qh	long
!=	O
0	int
)	O
)	O
{	O
mp_size_t	long
i	long
,	O
n	long
;	O
n	long
=	O
new_nn	long
-	O
dn	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
qp	pointer
[	O
i	long
]	O
=	O
GMP_NUMB_MAX	O
;	O
qh	long
=	O
0	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
new_np	pointer
!=	O
np	pointer
)	O
MPN_COPY	O
(	O
new_np	pointer
,	O
np	pointer
,	O
nn	long
)	O
;	O
if	O
(	O
dn	long
==	O
2	int
)	O
{	O
qh	long
=	O
mpn_divrem_2	O
(	O
qp	pointer
,	O
0L	int
,	O
new_np	pointer
,	O
nn	long
,	O
dp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
dn	long
,	O
DC_DIV_Q_THRESHOLD	O
)	O
||	O
BELOW_THRESHOLD	O
(	O
nn	long
-	O
dn	long
,	O
DC_DIV_Q_THRESHOLD	O
)	O
)	O
{	O
invert_pi1	O
(	O
dinv	struct
,	O
dh	long
,	O
dp	pointer
[	O
dn	long
-	O
2	int
]	O
)	O
;	O
qh	long
=	O
mpn_sbpi1_div_q	O
(	O
qp	pointer
,	O
new_np	pointer
,	O
nn	long
,	O
dp	pointer
,	O
dn	long
,	O
dinv	struct
.	O
inv32	long
)	O
;	O
}	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
dn	long
,	O
MUPI_DIV_Q_THRESHOLD	O
)	O
||	O
BELOW_THRESHOLD	O
(	O
nn	long
,	O
2	int
*	O
MU_DIV_Q_THRESHOLD	O
)	O
||	O
(	O
double	O
)	O
(	O
2	int
*	O
(	O
MU_DIV_Q_THRESHOLD	O
-	O
MUPI_DIV_Q_THRESHOLD	O
)	O
)	O
*	O
dn	long
+	O
(	O
double	O
)	O
MUPI_DIV_Q_THRESHOLD	O
*	O
nn	long
>	O
(	O
double	O
)	O
dn	long
*	O
nn	long
)	O
{	O
invert_pi1	O
(	O
dinv	struct
,	O
dh	long
,	O
dp	pointer
[	O
dn	long
-	O
2	int
]	O
)	O
;	O
qh	long
=	O
mpn_dcpi1_div_q	O
(	O
qp	pointer
,	O
new_np	pointer
,	O
nn	long
,	O
dp	pointer
,	O
dn	long
,	O
&	O
dinv	struct
)	O
;	O
}	O
else	O
{	O
mp_size_t	long
itch	long
=	O
mpn_mu_div_q_itch	O
(	O
nn	long
,	O
dn	long
,	O
0	int
)	O
;	O
mp_ptr	pointer
scratch	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
itch	long
)	O
;	O
qh	long
=	O
mpn_mu_div_q	O
(	O
qp	pointer
,	O
np	pointer
,	O
nn	long
,	O
dp	pointer
,	O
dn	long
,	O
scratch	pointer
)	O
;	O
}	O
qp	pointer
[	O
nn	long
-	O
dn	long
]	O
=	O
qh	long
;	O
}	O
}	O
else	O
{	O
tp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
qn	long
+	O
1	int
)	O
;	O
new_np	pointer
=	O
scratch	pointer
;	O
new_nn	long
=	O
2	int
*	O
qn	long
+	O
1	int
;	O
if	O
(	O
new_np	pointer
==	O
np	pointer
)	O
new_np	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
new_nn	long
+	O
1	int
)	O
;	O
dh	long
=	O
dp	pointer
[	O
dn	long
-	O
1	int
]	O
;	O
if	O
(	O
LIKELY	O
(	O
(	O
dh	long
&	O
GMP_NUMB_HIGHBIT	O
)	O
==	O
0	int
)	O
)	O
{	O
count_leading_zeros	O
(	O
cnt	int
,	O
dh	long
)	O
;	O
cy	long
=	O
mpn_lshift	O
(	O
new_np	pointer
,	O
np	pointer
+	O
nn	long
-	O
new_nn	long
,	O
new_nn	long
,	O
cnt	int
)	O
;	O
new_np	pointer
[	O
new_nn	long
]	O
=	O
cy	long
;	O
new_nn	long
+=	O
(	O
cy	long
!=	O
0	int
)	O
;	O
new_dp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
qn	long
+	O
1	int
)	O
;	O
mpn_lshift	O
(	O
new_dp	pointer
,	O
dp	pointer
+	O
dn	long
-	O
(	O
qn	long
+	O
1	int
)	O
,	O
qn	long
+	O
1	int
,	O
cnt	int
)	O
;	O
new_dp	pointer
[	O
0	int
]	O
|=	O
dp	pointer
[	O
dn	long
-	O
(	O
qn	long
+	O
1	int
)	O
-	O
1	int
]	O
>>	O
(	O
GMP_NUMB_BITS	O
-	O
cnt	int
)	O
;	O
if	O
(	O
qn	long
+	O
1	int
==	O
2	int
)	O
{	O
qh	long
=	O
mpn_divrem_2	O
(	O
tp	pointer
,	O
0L	int
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
qn	long
,	O
DC_DIVAPPR_Q_THRESHOLD	int
-	O
1	int
)	O
)	O
{	O
invert_pi1	O
(	O
dinv	struct
,	O
new_dp	pointer
[	O
qn	long
]	O
,	O
new_dp	pointer
[	O
qn	long
-	O
1	int
]	O
)	O
;	O
qh	long
=	O
mpn_sbpi1_divappr_q	O
(	O
tp	pointer
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
,	O
qn	long
+	O
1	int
,	O
dinv	struct
.	O
inv32	long
)	O
;	O
}	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
qn	long
,	O
MU_DIVAPPR_Q_THRESHOLD	int
-	O
1	int
)	O
)	O
{	O
invert_pi1	O
(	O
dinv	struct
,	O
new_dp	pointer
[	O
qn	long
]	O
,	O
new_dp	pointer
[	O
qn	long
-	O
1	int
]	O
)	O
;	O
qh	long
=	O
mpn_dcpi1_divappr_q	O
(	O
tp	pointer
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
,	O
qn	long
+	O
1	int
,	O
&	O
dinv	struct
)	O
;	O
}	O
else	O
{	O
mp_size_t	long
itch	long
=	O
mpn_mu_divappr_q_itch	O
(	O
new_nn	long
,	O
qn	long
+	O
1	int
,	O
0	int
)	O
;	O
mp_ptr	pointer
scratch	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
itch	long
)	O
;	O
qh	long
=	O
mpn_mu_divappr_q	O
(	O
tp	pointer
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
,	O
qn	long
+	O
1	int
,	O
scratch	pointer
)	O
;	O
}	O
if	O
(	O
cy	long
==	O
0	int
)	O
tp	pointer
[	O
qn	long
]	O
=	O
qh	long
;	O
else	O
if	O
(	O
UNLIKELY	O
(	O
qh	long
!=	O
0	int
)	O
)	O
{	O
mp_size_t	long
i	long
,	O
n	long
;	O
n	long
=	O
new_nn	long
-	O
(	O
qn	long
+	O
1	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
tp	pointer
[	O
i	long
]	O
=	O
GMP_NUMB_MAX	O
;	O
qh	long
=	O
0	int
;	O
}	O
}	O
else	O
{	O
MPN_COPY	O
(	O
new_np	pointer
,	O
np	pointer
+	O
nn	long
-	O
new_nn	long
,	O
new_nn	long
)	O
;	O
new_dp	pointer
=	O
(	O
mp_ptr	pointer
)	O
dp	pointer
+	O
dn	long
-	O
(	O
qn	long
+	O
1	int
)	O
;	O
if	O
(	O
qn	long
==	O
2	int
-	O
1	int
)	O
{	O
qh	long
=	O
mpn_divrem_2	O
(	O
tp	pointer
,	O
0L	int
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
qn	long
,	O
DC_DIVAPPR_Q_THRESHOLD	int
-	O
1	int
)	O
)	O
{	O
invert_pi1	O
(	O
dinv	struct
,	O
dh	long
,	O
new_dp	pointer
[	O
qn	long
-	O
1	int
]	O
)	O
;	O
qh	long
=	O
mpn_sbpi1_divappr_q	O
(	O
tp	pointer
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
,	O
qn	long
+	O
1	int
,	O
dinv	struct
.	O
inv32	long
)	O
;	O
}	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
qn	long
,	O
MU_DIVAPPR_Q_THRESHOLD	int
-	O
1	int
)	O
)	O
{	O
invert_pi1	O
(	O
dinv	struct
,	O
dh	long
,	O
new_dp	pointer
[	O
qn	long
-	O
1	int
]	O
)	O
;	O
qh	long
=	O
mpn_dcpi1_divappr_q	O
(	O
tp	pointer
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
,	O
qn	long
+	O
1	int
,	O
&	O
dinv	struct
)	O
;	O
}	O
else	O
{	O
mp_size_t	long
itch	long
=	O
mpn_mu_divappr_q_itch	O
(	O
new_nn	long
,	O
qn	long
+	O
1	int
,	O
0	int
)	O
;	O
mp_ptr	pointer
scratch	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
itch	long
)	O
;	O
qh	long
=	O
mpn_mu_divappr_q	O
(	O
tp	pointer
,	O
new_np	pointer
,	O
new_nn	long
,	O
new_dp	pointer
,	O
qn	long
+	O
1	int
,	O
scratch	pointer
)	O
;	O
}	O
tp	pointer
[	O
qn	long
]	O
=	O
qh	long
;	O
}	O
MPN_COPY	O
(	O
qp	pointer
,	O
tp	pointer
+	O
1	int
,	O
qn	long
)	O
;	O
if	O
(	O
tp	pointer
[	O
0	int
]	O
<=	O
4	int
)	O
{	O
mp_size_t	long
rn	long
;	O
rp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
dn	long
+	O
qn	long
)	O
;	O
mpn_mul	O
(	O
rp	pointer
,	O
dp	pointer
,	O
dn	long
,	O
tp	pointer
+	O
1	int
,	O
qn	long
)	O
;	O
rn	long
=	O
dn	long
+	O
qn	long
;	O
rn	long
-=	O
rp	pointer
[	O
rn	long
-	O
1	int
]	O
==	O
0	int
;	O
if	O
(	O
rn	long
>	O
nn	long
||	O
mpn_cmp	O
(	O
np	pointer
,	O
rp	pointer
,	O
nn	long
)	O
<	O
0	int
)	O
mpn_decr_u	O
(	O
qp	pointer
,	O
1	int
)	O
;	O
}	O
}	O
TMP_FREE	O
;	O
}	O
