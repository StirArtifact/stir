const	O
char	O
protj_rcsid	array
[	O
]	O
=	O
"$Id: protj.c,v 1.9 2002/03/05 19:10:41 ian Rel $"	pointer
;	O
static	O
char	O
*	O
zJavoid	pointer
;	O
static	O
size_t	long
cJavoid	long
;	O
static	O
char	O
*	O
zJbuf	pointer
;	O
static	O
int	O
iJrecend	int
;	O
static	O
boolean	int
fjsend_data	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
const	O
char	O
*	O
zsend	pointer
,	O
size_t	long
csend	long
,	O
boolean	int
fdoread	int
)	O
)	O
;	O
static	O
boolean	int
fjreceive_data	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
size_t	long
cneed	long
,	O
size_t	long
*	O
pcrec	pointer
,	O
int	O
ctimeout	int
,	O
boolean	int
freport	int
)	O
)	O
;	O
static	O
boolean	int
fjprocess_data	function
P	O
(	O
(	O
size_t	long
*	O
pcneed	pointer
)	O
)	O
;	O
boolean	int
fjstart	function
(	O
qdaemon	pointer
,	O
pzlog	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
char	O
*	O
*	O
pzlog	pointer
;	O
{	O
size_t	long
clen	long
;	O
char	O
*	O
zsend	pointer
;	O
int	O
b	int
;	O
size_t	long
cbuf	long
,	O
cgot	long
;	O
char	O
*	O
zbuf	pointer
;	O
size_t	long
i	long
;	O
clen	long
=	O
strlen	function
(	O
zJavoid_parameter	pointer
)	O
;	O
zsend	pointer
=	O
zbufalc	function
(	O
clen	long
+	O
3	int
)	O
;	O
zsend	pointer
[	O
0	int
]	O
=	O
FIRST	char
;	O
memcpy	function
(	O
zsend	pointer
+	O
1	int
,	O
zJavoid_parameter	pointer
,	O
clen	long
)	O
;	O
zsend	pointer
[	O
clen	long
+	O
1	int
]	O
=	O
TRAILER	char
;	O
zsend	pointer
[	O
clen	long
+	O
2	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
fsend_data	function
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
zsend	pointer
,	O
clen	long
+	O
2	int
,	O
TRUE	O
)	O
)	O
{	O
ubuffree	function
(	O
zsend	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
ubuffree	function
(	O
zsend	pointer
)	O
;	O
while	O
(	O
(	O
b	int
=	O
breceive_char	function
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
cIsync_timeout	int
,	O
TRUE	O
)	O
)	O
!=	O
FIRST	char
)	O
{	O
if	O
(	O
b	int
<	O
0	int
)	O
{	O
if	O
(	O
b	int
==	O
-	O
1	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Timed out in 'j' protocol startup"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
cbuf	long
=	O
20	int
;	O
zbuf	pointer
=	O
zbufalc	function
(	O
cbuf	long
)	O
;	O
cgot	long
=	O
0	int
;	O
while	O
(	O
(	O
b	int
=	O
breceive_char	function
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
cIsync_timeout	int
,	O
TRUE	O
)	O
)	O
!=	O
TRAILER	char
)	O
{	O
if	O
(	O
b	int
<	O
0	int
)	O
{	O
ubuffree	function
(	O
zbuf	pointer
)	O
;	O
if	O
(	O
b	int
==	O
-	O
1	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Timed out in 'j' protocol startup"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
cgot	long
+	O
1	int
>=	O
cbuf	long
)	O
{	O
char	O
*	O
znew	pointer
;	O
cbuf	long
+=	O
20	int
;	O
znew	pointer
=	O
zbufalc	function
(	O
cbuf	long
)	O
;	O
memcpy	function
(	O
znew	pointer
,	O
zbuf	pointer
,	O
cgot	long
)	O
;	O
ubuffree	function
(	O
zbuf	pointer
)	O
;	O
zbuf	pointer
=	O
znew	pointer
;	O
}	O
zbuf	pointer
[	O
cgot	long
]	O
=	O
b	int
;	O
++	O
cgot	long
;	O
}	O
zbuf	pointer
[	O
cgot	long
]	O
=	O
'\0'	O
;	O
cgot	long
=	O
cescape	function
(	O
zbuf	pointer
)	O
;	O
clen	long
=	O
strlen	function
(	O
zJavoid_parameter	pointer
)	O
;	O
zJavoid	pointer
=	O
zbufalc	function
(	O
clen	long
+	O
cgot	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
zJavoid	pointer
,	O
zJavoid_parameter	pointer
,	O
clen	long
+	O
1	int
)	O
;	O
cJavoid	long
=	O
cescape	function
(	O
zJavoid	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
cgot	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
memchr	function
(	O
zJavoid	pointer
,	O
zbuf	pointer
[	O
i	long
]	O
,	O
cJavoid	long
)	O
==	O
NULL	O
)	O
{	O
zJavoid	pointer
[	O
cJavoid	long
]	O
=	O
zbuf	pointer
[	O
i	long
]	O
;	O
++	O
cJavoid	long
;	O
}	O
}	O
ubuffree	function
(	O
zbuf	pointer
)	O
;	O
if	O
(	O
cJavoid	long
==	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"No characters to avoid in 'j' protocol"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
cJavoid	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
zJavoid	pointer
[	O
i	long
]	O
>=	O
32	int
&&	O
zJavoid	pointer
[	O
i	long
]	O
<=	O
126	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"'j' protocol can't avoid character '\\%03o'"	pointer
,	O
zJavoid	pointer
[	O
i	long
]	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
memchr	function
(	O
zJavoid	pointer
,	O
'\021'	O
,	O
cJavoid	long
)	O
!=	O
NULL	O
&&	O
memchr	function
(	O
zJavoid	pointer
,	O
'\023'	O
,	O
cJavoid	long
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
fconn_set	function
(	O
qdaemon	pointer
->	O
qconn	pointer
,	O
PARITYSETTING_NONE	int
,	O
STRIPSETTING_EIGHTBITS	int
,	O
XONXOFF_ON	int
)	O
)	O
return	O
FALSE	O
;	O
}	O
usysdep_sleep	function
(	O
2	int
)	O
;	O
zJbuf	pointer
=	O
zbufalc	function
(	O
CHDRLEN	O
+	O
IMAXPACKSIZE	O
*	O
3	int
+	O
1	int
)	O
;	O
zJbuf	pointer
[	O
0	int
]	O
=	O
FIRST	char
;	O
zJbuf	pointer
[	O
3	int
]	O
=	O
FOURTH	char
;	O
zJbuf	pointer
[	O
6	int
]	O
=	O
SEVENTH	char
;	O
iJrecend	int
=	O
iPrecend	int
;	O
iPrecend	int
=	O
iPrecstart	int
;	O
return	O
fijstart	function
(	O
qdaemon	pointer
,	O
pzlog	pointer
,	O
IMAXPACKSIZE	O
,	O
fjsend_data	function
,	O
fjreceive_data	function
)	O
;	O
}	O
boolean	int
fjshutdown	function
(	O
qdaemon	pointer
)	O
struct	O
sdaemon	struct
*	O
qdaemon	pointer
;	O
{	O
boolean	int
fret	int
;	O
fret	int
=	O
fishutdown	function
(	O
qdaemon	pointer
)	O
;	O
ubuffree	function
(	O
zJavoid	pointer
)	O
;	O
ubuffree	function
(	O
zJbuf	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
static	O
boolean	int
fjsend_data	function
(	O
qconn	pointer
,	O
zsend	pointer
,	O
csend	long
,	O
fdoread	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
const	O
char	O
*	O
zsend	pointer
;	O
size_t	long
csend	long
;	O
boolean	int
fdoread	int
;	O
{	O
char	O
*	O
zput	pointer
,	O
*	O
zindex	pointer
;	O
const	O
char	O
*	O
zfrom	pointer
,	O
*	O
zend	pointer
;	O
char	O
bfirst	char
,	O
bsecond	char
;	O
int	O
iprecendhold	int
;	O
boolean	int
fret	int
;	O
zput	pointer
=	O
zJbuf	pointer
+	O
CHDRLEN	O
;	O
zindex	pointer
=	O
zput	pointer
+	O
csend	long
;	O
zfrom	pointer
=	O
zsend	pointer
;	O
zend	pointer
=	O
zsend	pointer
+	O
csend	long
;	O
bfirst	char
=	O
zJavoid	pointer
[	O
0	int
]	O
;	O
if	O
(	O
cJavoid	long
<=	O
1	int
)	O
bsecond	char
=	O
bfirst	char
;	O
else	O
bsecond	char
=	O
zJavoid	pointer
[	O
1	int
]	O
;	O
while	O
(	O
zfrom	pointer
<	O
zend	pointer
)	O
{	O
char	O
b	int
;	O
boolean	int
f128	int
,	O
f32	int
;	O
int	O
i	long
,	O
ihigh	int
,	O
ilow	int
;	O
b	int
=	O
*	O
zfrom	pointer
++	O
;	O
if	O
(	O
b	int
!=	O
bfirst	char
&&	O
b	int
!=	O
bsecond	char
)	O
{	O
int	O
ca	int
;	O
char	O
*	O
za	pointer
;	O
if	O
(	O
cJavoid	long
<=	O
2	int
)	O
{	O
*	O
zput	pointer
++	O
=	O
b	int
;	O
continue	O
;	O
}	O
ca	int
=	O
cJavoid	long
-	O
2	int
;	O
za	pointer
=	O
zJavoid	pointer
+	O
2	int
;	O
while	O
(	O
ca	int
--	O
!=	O
0	int
)	O
if	O
(	O
*	O
za	pointer
++	O
==	O
b	int
)	O
break	O
;	O
if	O
(	O
ca	int
<	O
0	int
)	O
{	O
*	O
zput	pointer
++	O
=	O
b	int
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
(	O
b	int
&	O
0x80	int
)	O
==	O
0	int
)	O
f128	int
=	O
FALSE	O
;	O
else	O
{	O
b	int
&=	O
~	O
0x80	int
;	O
f128	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
b	int
>=	O
32	int
&&	O
b	int
!=	O
127	int
)	O
f32	int
=	O
FALSE	O
;	O
else	O
{	O
b	int
^=	O
0x20	int
;	O
f32	int
=	O
TRUE	O
;	O
}	O
i	long
=	O
zput	pointer
-	O
(	O
zJbuf	pointer
+	O
CHDRLEN	O
)	O
;	O
ihigh	int
=	O
i	long
/	O
INDEX_MAX_LOW	O
;	O
ilow	int
=	O
i	long
%	O
INDEX_MAX_LOW	O
;	O
if	O
(	O
f128	int
&&	O
!	O
f32	int
)	O
;	O
else	O
if	O
(	O
f32	int
&&	O
!	O
f128	int
)	O
ilow	int
+=	O
INDEX_MAX_LOW	O
;	O
else	O
{	O
if	O
(	O
ilow	int
!=	O
INDEX_MAX_LOW	O
-	O
1	int
)	O
ilow	int
+=	O
2	int
*	O
INDEX_MAX_LOW	O
;	O
else	O
{	O
ilow	int
=	O
ihigh	int
;	O
ihigh	int
=	O
INDEX_MAX_HIGH	O
;	O
}	O
}	O
*	O
zindex	pointer
++	O
=	O
ihigh	int
+	O
INDEX_OFFSET	O
;	O
*	O
zindex	pointer
++	O
=	O
ilow	int
+	O
INDEX_OFFSET	O
;	O
*	O
zput	pointer
++	O
=	O
b	int
;	O
}	O
*	O
zindex	pointer
++	O
=	O
TRAILER	char
;	O
zJbuf	pointer
[	O
1	int
]	O
=	O
ISETLENGTH_FIRST	O
(	O
zindex	pointer
-	O
zJbuf	pointer
)	O
;	O
zJbuf	pointer
[	O
2	int
]	O
=	O
ISETLENGTH_SECOND	O
(	O
zindex	pointer
-	O
zJbuf	pointer
)	O
;	O
zJbuf	pointer
[	O
4	int
]	O
=	O
ISETLENGTH_FIRST	O
(	O
csend	long
)	O
;	O
zJbuf	pointer
[	O
5	int
]	O
=	O
ISETLENGTH_SECOND	O
(	O
csend	long
)	O
;	O
iprecendhold	int
=	O
iPrecend	int
;	O
iPrecend	int
=	O
iJrecend	int
;	O
fret	int
=	O
fsend_data	function
(	O
qconn	pointer
,	O
zJbuf	pointer
,	O
(	O
size_t	long
)	O
(	O
zindex	pointer
-	O
zJbuf	pointer
)	O
,	O
fdoread	int
)	O
;	O
iJrecend	int
=	O
iPrecend	int
;	O
iPrecend	int
=	O
iprecendhold	int
;	O
if	O
(	O
fret	int
&&	O
iPrecend	int
!=	O
iJrecend	int
)	O
{	O
if	O
(	O
!	O
fjprocess_data	function
(	O
(	O
size_t	long
*	O
)	O
NULL	O
)	O
)	O
return	O
FALSE	O
;	O
}	O
return	O
fret	int
;	O
}	O
static	O
boolean	int
fjreceive_data	function
(	O
qconn	pointer
,	O
cineed	long
,	O
pcrec	pointer
,	O
ctimeout	int
,	O
freport	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
size_t	long
cineed	long
;	O
size_t	long
*	O
pcrec	pointer
;	O
int	O
ctimeout	int
;	O
boolean	int
freport	int
;	O
{	O
int	O
iprecendstart	int
;	O
size_t	long
cjneed	long
;	O
size_t	long
crec	long
;	O
int	O
cnew	int
;	O
iprecendstart	int
=	O
iPrecend	int
;	O
if	O
(	O
!	O
fjprocess_data	function
(	O
&	O
cjneed	long
)	O
)	O
return	O
FALSE	O
;	O
do	O
{	O
int	O
iprecendhold	int
;	O
size_t	long
cneed	long
;	O
if	O
(	O
cjneed	long
>	O
cineed	long
)	O
cneed	long
=	O
cjneed	long
;	O
else	O
cneed	long
=	O
cineed	long
;	O
iprecendhold	int
=	O
iPrecend	int
;	O
iPrecend	int
=	O
iJrecend	int
;	O
if	O
(	O
!	O
freceive_data	function
(	O
qconn	pointer
,	O
cneed	long
,	O
&	O
crec	long
,	O
ctimeout	int
,	O
freport	int
)	O
)	O
return	O
FALSE	O
;	O
iJrecend	int
=	O
iPrecend	int
;	O
iPrecend	int
=	O
iprecendhold	int
;	O
if	O
(	O
!	O
fjprocess_data	function
(	O
&	O
cjneed	long
)	O
)	O
return	O
FALSE	O
;	O
cnew	int
=	O
iPrecend	int
-	O
iprecendstart	int
;	O
if	O
(	O
cnew	int
<	O
0	int
)	O
cnew	int
+=	O
CRECBUFLEN	O
;	O
if	O
(	O
(	O
size_t	long
)	O
cnew	int
>	O
cineed	long
)	O
cineed	long
=	O
0	int
;	O
else	O
cineed	long
-=	O
cnew	int
;	O
--	O
ctimeout	int
;	O
}	O
while	O
(	O
cnew	int
==	O
0	int
&&	O
crec	long
>	O
0	int
&&	O
ctimeout	int
>	O
0	int
)	O
;	O
DEBUG_MESSAGE1	O
(	O
DEBUG_PROTO	O
,	O
"fjreceive_data: Got %d decoded bytes"	pointer
,	O
cnew	int
)	O
;	O
*	O
pcrec	pointer
=	O
cnew	int
;	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
fjprocess_data	function
(	O
pcneed	pointer
)	O
size_t	long
*	O
pcneed	pointer
;	O
{	O
int	O
istart	int
;	O
istart	int
=	O
iPrecend	int
;	O
while	O
(	O
istart	int
!=	O
iJrecend	int
)	O
{	O
int	O
i	long
,	O
iget	int
;	O
char	O
ab	array
[	O
CHDRLEN	O
]	O
;	O
int	O
cpacket	int
,	O
cdata	long
,	O
chave	int
;	O
int	O
iindex	int
,	O
iendindex	int
;	O
if	O
(	O
abPrecbuf	array
[	O
istart	int
]	O
!=	O
FIRST	char
)	O
{	O
int	O
cintro	int
;	O
char	O
*	O
zintro	pointer
;	O
size_t	long
cskipped	long
;	O
cintro	int
=	O
iJrecend	int
-	O
istart	int
;	O
if	O
(	O
cintro	int
<	O
0	int
)	O
cintro	int
=	O
CRECBUFLEN	O
-	O
istart	int
;	O
zintro	pointer
=	O
memchr	function
(	O
abPrecbuf	array
+	O
istart	int
,	O
FIRST	char
,	O
(	O
size_t	long
)	O
cintro	int
)	O
;	O
if	O
(	O
zintro	pointer
==	O
NULL	O
)	O
{	O
bzero	function
(	O
abPrecbuf	array
+	O
istart	int
,	O
(	O
size_t	long
)	O
cintro	int
)	O
;	O
istart	int
=	O
(	O
istart	int
+	O
cintro	int
)	O
%	O
CRECBUFLEN	O
;	O
iPrecend	int
=	O
istart	int
;	O
continue	O
;	O
}	O
cskipped	long
=	O
zintro	pointer
-	O
(	O
abPrecbuf	array
+	O
istart	int
)	O
;	O
bzero	function
(	O
abPrecbuf	array
+	O
istart	int
,	O
cskipped	long
)	O
;	O
istart	int
+=	O
cskipped	long
;	O
iPrecend	int
=	O
istart	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
,	O
iget	int
=	O
istart	int
;	O
i	long
<	O
CHDRLEN	O
&&	O
iget	int
!=	O
iJrecend	int
;	O
++	O
i	long
,	O
iget	int
=	O
(	O
iget	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
)	O
ab	array
[	O
i	long
]	O
=	O
abPrecbuf	array
[	O
iget	int
]	O
;	O
if	O
(	O
i	long
<	O
CHDRLEN	O
)	O
{	O
if	O
(	O
pcneed	pointer
!=	O
NULL	O
)	O
*	O
pcneed	pointer
=	O
CHDRLEN	O
-	O
i	long
;	O
return	O
TRUE	O
;	O
}	O
cpacket	int
=	O
CGETLENGTH	O
(	O
ab	array
[	O
1	int
]	O
,	O
ab	array
[	O
2	int
]	O
)	O
;	O
cdata	long
=	O
CGETLENGTH	O
(	O
ab	array
[	O
4	int
]	O
,	O
ab	array
[	O
5	int
]	O
)	O
;	O
if	O
(	O
ab	array
[	O
3	int
]	O
!=	O
FOURTH	char
||	O
ab	array
[	O
6	int
]	O
!=	O
SEVENTH	char
||	O
cdata	long
>	O
cpacket	int
-	O
CHDRLEN	O
-	O
1	int
||	O
(	O
cpacket	int
-	O
cdata	long
-	O
CHDRLEN	O
-	O
1	int
)	O
%	O
2	int
==	O
1	int
)	O
{	O
istart	int
=	O
(	O
istart	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
;	O
continue	O
;	O
}	O
chave	int
=	O
iJrecend	int
-	O
istart	int
;	O
if	O
(	O
chave	int
<	O
0	int
)	O
chave	int
+=	O
CRECBUFLEN	O
;	O
if	O
(	O
chave	int
<	O
cpacket	int
)	O
{	O
if	O
(	O
pcneed	pointer
!=	O
NULL	O
)	O
*	O
pcneed	pointer
=	O
cpacket	int
-	O
chave	int
;	O
return	O
TRUE	O
;	O
}	O
iindex	int
=	O
(	O
istart	int
+	O
CHDRLEN	O
+	O
cdata	long
)	O
%	O
CRECBUFLEN	O
;	O
iendindex	int
=	O
(	O
istart	int
+	O
cpacket	int
-	O
1	int
)	O
%	O
CRECBUFLEN	O
;	O
if	O
(	O
abPrecbuf	array
[	O
iendindex	int
]	O
!=	O
TRAILER	char
)	O
{	O
istart	int
=	O
(	O
istart	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
;	O
continue	O
;	O
}	O
while	O
(	O
iindex	int
!=	O
iendindex	int
)	O
{	O
int	O
ihigh	int
,	O
ilow	int
;	O
boolean	int
f32	int
,	O
f128	int
;	O
int	O
iset	int
;	O
ihigh	int
=	O
abPrecbuf	array
[	O
iindex	int
]	O
-	O
INDEX_OFFSET	O
;	O
abPrecbuf	array
[	O
iindex	int
]	O
=	O
0	int
;	O
iindex	int
=	O
(	O
iindex	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
;	O
ilow	int
=	O
abPrecbuf	array
[	O
iindex	int
]	O
-	O
INDEX_OFFSET	O
;	O
abPrecbuf	array
[	O
iindex	int
]	O
=	O
0	int
;	O
iindex	int
=	O
(	O
iindex	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
;	O
f128	int
=	O
TRUE	O
;	O
f32	int
=	O
TRUE	O
;	O
if	O
(	O
ihigh	int
==	O
INDEX_MAX_HIGH	O
)	O
iset	int
=	O
ilow	int
*	O
INDEX_MAX_LOW	O
+	O
INDEX_MAX_LOW	O
-	O
1	int
;	O
else	O
{	O
iset	int
=	O
ihigh	int
*	O
INDEX_MAX_LOW	O
+	O
ilow	int
%	O
INDEX_MAX_LOW	O
;	O
if	O
(	O
ilow	int
<	O
INDEX_MAX_LOW	O
)	O
f32	int
=	O
FALSE	O
;	O
else	O
if	O
(	O
ilow	int
<	O
2	int
*	O
INDEX_MAX_LOW	O
)	O
f128	int
=	O
FALSE	O
;	O
}	O
iset	int
=	O
(	O
istart	int
+	O
CHDRLEN	O
+	O
iset	int
)	O
%	O
CRECBUFLEN	O
;	O
if	O
(	O
f128	int
)	O
abPrecbuf	array
[	O
iset	int
]	O
|=	O
0x80	int
;	O
if	O
(	O
f32	int
)	O
abPrecbuf	array
[	O
iset	int
]	O
^=	O
0x20	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
,	O
iget	int
=	O
istart	int
;	O
i	long
<	O
CHDRLEN	O
&&	O
iget	int
!=	O
iJrecend	int
;	O
++	O
i	long
,	O
iget	int
=	O
(	O
iget	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
)	O
abPrecbuf	array
[	O
iget	int
]	O
=	O
0	int
;	O
abPrecbuf	array
[	O
iendindex	int
]	O
=	O
0	int
;	O
iPrecend	int
=	O
(	O
iendindex	int
+	O
1	int
)	O
%	O
CRECBUFLEN	O
;	O
istart	int
=	O
iPrecend	int
;	O
}	O
if	O
(	O
pcneed	pointer
!=	O
NULL	O
)	O
*	O
pcneed	pointer
=	O
CHDRLEN	O
+	O
1	int
;	O
return	O
TRUE	O
;	O
}	O
