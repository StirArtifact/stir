static	O
struct	O
file_rd_info	struct
*	O
pacct_info	pointer
=	O
NULL	O
;	O
extern	O
int	O
ahz	int
;	O
char	O
*	O
dev_gnu_name	function
(	O
long	O
)	O
;	O
static	O
int	O
convert_acct_record_read	function
(	O
struct	O
acct	struct
*	O
rec_in	pointer
,	O
struct	O
acct	struct
*	O
rec_out	pointer
)	O
;	O
void	O
pacct_init	function
(	O
int	O
backwards	int
)	O
{	O
pacct_info	pointer
=	O
file_reader_init	function
(	O
sizeof	O
(	O
struct	O
acct_v0	struct
)	O
,	O
BUFFERED_RECS	int
,	O
backwards	int
)	O
;	O
}	O
void	O
add_pacct_file	function
(	O
char	O
*	O
name	pointer
)	O
{	O
file_reader_add_file	function
(	O
pacct_info	pointer
,	O
name	pointer
)	O
;	O
}	O
struct	O
acct	struct
*	O
pacct_get_entry	function
(	O
void	O
)	O
{	O
struct	O
acct	struct
*	O
entry	pointer
;	O
static	O
struct	O
acct	struct
buf	struct
;	O
do	O
{	O
entry	pointer
=	O
(	O
struct	O
acct	struct
*	O
)	O
file_reader_get_entry	function
(	O
pacct_info	pointer
)	O
;	O
if	O
(	O
entry	pointer
==	O
(	O
struct	O
acct	struct
*	O
)	O
0	int
)	O
return	O
entry	pointer
;	O
}	O
while	O
(	O
convert_acct_record_read	function
(	O
entry	pointer
,	O
&	O
buf	struct
)	O
!=	O
0	int
)	O
;	O
return	O
&	O
buf	struct
;	O
}	O
void	O
print_pacct_record	function
(	O
struct	O
acct	struct
*	O
rec	pointer
,	O
FILE	struct
*	O
out	pointer
)	O
{	O
time_t	long
btime	long
=	O
(	O
time_t	long
)	O
rec	pointer
->	O
ac_btime	int
;	O
char	O
*	O
this_dev	pointer
=	O
dev_gnu_name	function
(	O
(	O
long	O
)	O
rec	pointer
->	O
ac_tty	short
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%-*.*s|"	pointer
,	O
COMM_LEN	O
,	O
COMM_LEN	O
,	O
rec	pointer
->	O
ac_comm	array
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
"v%1d|"	pointer
,	O
rec	pointer
->	O
ac_version	char
&	O
0x7f	int
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
NUM_FORMAT	pointer
"|"	pointer
,	O
ACUTIME_2_DOUBLE	O
(	O
rec	pointer
->	O
ac_utime	short
)	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
NUM_FORMAT	pointer
"|"	pointer
,	O
ACSTIME_2_DOUBLE	O
(	O
rec	pointer
->	O
ac_stime	short
)	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
NUM_FORMAT	pointer
"|"	pointer
,	O
ACETIME_2_DOUBLE	O
(	O
rec	pointer
->	O
ac_etime	float
)	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%6lu|%6lu|"	pointer
,	O
(	O
unsigned	O
long	O
)	O
rec	pointer
->	O
ac_uid	int
,	O
(	O
unsigned	O
long	O
)	O
rec	pointer
->	O
ac_gid	int
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
NUM_FORMAT	pointer
"|"	pointer
,	O
ACMEM_2_DOUBLE	O
(	O
rec	pointer
->	O
ac_mem	short
)	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
NUM_FORMAT	pointer
"|"	pointer
,	O
ACIO_2_DOUBLE	O
(	O
rec	pointer
->	O
ac_io	short
)	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%8d|%8d|"	pointer
,	O
rec	pointer
->	O
ac_pid	int
,	O
rec	pointer
->	O
ac_ppid	int
)	O
;	O
if	O
(	O
rec	pointer
->	O
ac_flag	char
&	O
ASU	int
)	O
(	O
void	O
)	O
putchar	function
(	O
'S'	O
)	O
;	O
else	O
(	O
void	O
)	O
putchar	function
(	O
' '	O
)	O
;	O
if	O
(	O
rec	pointer
->	O
ac_flag	char
&	O
AFORK	int
)	O
(	O
void	O
)	O
putchar	function
(	O
'F'	O
)	O
;	O
else	O
(	O
void	O
)	O
putchar	function
(	O
' '	O
)	O
;	O
if	O
(	O
rec	pointer
->	O
ac_flag	char
&	O
ACOMPAT	int
)	O
(	O
void	O
)	O
putchar	function
(	O
'C'	O
)	O
;	O
else	O
(	O
void	O
)	O
putchar	function
(	O
' '	O
)	O
;	O
if	O
(	O
rec	pointer
->	O
ac_flag	char
&	O
ACORE	int
)	O
(	O
void	O
)	O
putchar	function
(	O
'D'	O
)	O
;	O
else	O
(	O
void	O
)	O
putchar	function
(	O
' '	O
)	O
;	O
if	O
(	O
rec	pointer
->	O
ac_flag	char
&	O
AXSIG	int
)	O
(	O
void	O
)	O
putchar	function
(	O
'X'	O
)	O
;	O
else	O
(	O
void	O
)	O
putchar	function
(	O
' '	O
)	O
;	O
(	O
void	O
)	O
putchar	function
(	O
'|'	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%8d|"	pointer
,	O
(	O
rec	pointer
->	O
ac_exitcode	int
>>	O
8	int
)	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%-8.8s|"	pointer
,	O
this_dev	pointer
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%s"	pointer
,	O
ctime	function
(	O
&	O
btime	long
)	O
)	O
;	O
}	O
void	O
pacct_print_file_and_line	function
(	O
FILE	struct
*	O
out	pointer
)	O
{	O
file_reader_print_file_and_line	function
(	O
out	pointer
,	O
pacct_info	pointer
)	O
;	O
}	O
double	O
comp_t_2_double	function
(	O
comp_t	short
c_num	short
)	O
{	O
unsigned	O
long	O
in	long
=	O
0	int
;	O
in	long
=	O
c_num	short
&	O
017777	int
;	O
c_num	short
>>=	O
13	int
;	O
while	O
(	O
c_num	short
)	O
{	O
c_num	short
--	O
;	O
in	long
<<=	O
3	int
;	O
}	O
return	O
(	O
double	O
)	O
in	long
;	O
}	O
double	O
comp2_t_2_double	function
(	O
comp2_t	int
val	array
)	O
{	O
unsigned	O
long	O
tmp	long
=	O
val	array
&	O
(	O
MAXFRACT2	O
>>	O
1	int
)	O
,	O
exp	function
=	O
val	array
>>	O
(	O
MANTSIZE2	int
-	O
1	int
)	O
,	O
shift	int
=	O
1	int
;	O
if	O
(	O
exp	function
!=	O
0	int
)	O
{	O
tmp	long
|=	O
1	int
<<	O
(	O
MANTSIZE2	int
-	O
1	int
)	O
;	O
shift	int
<<=	O
(	O
exp	function
-	O
1	int
)	O
;	O
}	O
return	O
(	O
double	O
)	O
tmp	long
*	O
shift	int
;	O
}	O
static	O
comp_t	short
double_2_comp_t	function
(	O
double	O
value	double
)	O
{	O
double	O
mantissa	double
;	O
int	O
exponent	int
,	O
exp	function
;	O
comp_t	short
mant	short
;	O
mantissa	double
=	O
frexp	function
(	O
value	double
,	O
&	O
exponent	int
)	O
;	O
if	O
(	O
exponent	int
<	O
MANTSIZE	int
)	O
{	O
exp	function
=	O
0	int
;	O
}	O
else	O
{	O
exp	function
=	O
(	O
exponent	int
-	O
MANTSIZE	int
+	O
(	O
EXPBASE	int
-	O
1	int
)	O
)	O
/	O
EXPBASE	int
;	O
}	O
mant	short
=	O
(	O
comp_t	short
)	O
(	O
ldexp	function
(	O
mantissa	double
,	O
exponent	int
-	O
exp	function
*	O
EXPBASE	int
)	O
+	O
0.5	int
)	O
;	O
if	O
(	O
mant	short
>	O
MAXMANT	O
)	O
{	O
mant	short
>>=	O
EXPBASE	int
;	O
exp	function
++	O
;	O
}	O
if	O
(	O
exp	function
>	O
MAXEXP	O
)	O
{	O
return	O
MAXCOMP_T	O
;	O
}	O
return	O
mant	short
|	O
(	O
exp	function
<<	O
MANTSIZE	int
)	O
;	O
}	O
static	O
comp2_t	int
double_2_comp2_t	function
(	O
double	O
value	double
)	O
{	O
double	O
mantissa	double
;	O
int	O
exponent	int
,	O
exp	function
;	O
comp2_t	int
mant	short
;	O
mantissa	double
=	O
frexp	function
(	O
value	double
,	O
&	O
exponent	int
)	O
;	O
if	O
(	O
exponent	int
<=	O
MANTSIZE2	int
)	O
{	O
exp	function
=	O
0	int
;	O
}	O
else	O
{	O
exp	function
=	O
exponent	int
-	O
MANTSIZE2	int
;	O
}	O
mant	short
=	O
(	O
comp2_t	int
)	O
(	O
ldexp	function
(	O
mantissa	double
,	O
exponent	int
-	O
exp	function
)	O
+	O
0.5	int
)	O
;	O
if	O
(	O
mant	short
>	O
MAXMANT2	O
)	O
{	O
mant	short
>>=	O
EXPBASE2	int
;	O
exp	function
++	O
;	O
}	O
if	O
(	O
exp	function
>=	O
MAXEXP2	O
)	O
{	O
return	O
MAXCOMP2_T	O
;	O
}	O
if	O
(	O
mant	short
>	O
(	O
MAXMANT2	O
/	O
2	int
)	O
)	O
{	O
mant	short
&=	O
(	O
MAXMANT2	O
>>	O
1	int
)	O
;	O
exp	function
++	O
;	O
}	O
return	O
(	O
mant	short
|	O
(	O
exp	function
<<	O
(	O
MANTSIZE2	int
-	O
1	int
)	O
)	O
)	O
;	O
}	O
static	O
signed	O
char	O
permute	array
[	O
76	int
]	O
[	O
5	int
]	O
=	O
{	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
{	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
}	O
,	O
{	O
2	int
,	O
3	int
,	O
6	int
,	O
6	int
,	O
2	int
}	O
,	O
{	O
3	int
,	O
2	int
,	O
7	int
,	O
7	int
,	O
3	int
}	O
,	O
{	O
4	int
,	O
7	int
,	O
30	int
,	O
32	int
,	O
4	int
}	O
,	O
{	O
5	int
,	O
6	int
,	O
31	int
,	O
33	int
,	O
5	int
}	O
,	O
{	O
6	int
,	O
5	int
,	O
32	int
,	O
34	int
,	O
6	int
}	O
,	O
{	O
7	int
,	O
4	int
,	O
33	int
,	O
35	int
,	O
7	int
}	O
,	O
{	O
8	int
,	O
11	int
,	O
54	int
,	O
56	int
,	O
8	int
}	O
,	O
{	O
9	int
,	O
10	int
,	O
55	int
,	O
57	int
,	O
9	int
}	O
,	O
{	O
10	int
,	O
9	int
,	O
56	int
,	O
58	int
,	O
10	int
}	O
,	O
{	O
11	int
,	O
8	int
,	O
57	int
,	O
59	int
,	O
11	int
}	O
,	O
{	O
12	int
,	O
15	int
,	O
58	int
,	O
60	int
,	O
12	int
}	O
,	O
{	O
13	int
,	O
14	int
,	O
59	int
,	O
61	int
,	O
13	int
}	O
,	O
{	O
14	int
,	O
13	int
,	O
60	int
,	O
62	int
,	O
14	int
}	O
,	O
{	O
15	int
,	O
12	int
,	O
61	int
,	O
63	int
,	O
15	int
}	O
,	O
{	O
16	int
,	O
19	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
16	int
}	O
,	O
{	O
17	int
,	O
18	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
17	int
}	O
,	O
{	O
18	int
,	O
17	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
18	int
}	O
,	O
{	O
19	int
,	O
16	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
19	int
}	O
,	O
{	O
20	int
,	O
23	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
20	int
}	O
,	O
{	O
21	int
,	O
22	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
21	int
}	O
,	O
{	O
22	int
,	O
21	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
22	int
}	O
,	O
{	O
23	int
,	O
20	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
23	int
}	O
,	O
{	O
24	int
,	O
27	int
,	O
8	int
,	O
8	int
,	O
24	int
}	O
,	O
{	O
25	int
,	O
26	int
,	O
9	int
,	O
9	int
,	O
25	int
}	O
,	O
{	O
26	int
,	O
25	int
,	O
10	int
,	O
10	int
,	O
26	int
}	O
,	O
{	O
27	int
,	O
24	int
,	O
11	int
,	O
11	int
,	O
27	int
}	O
,	O
{	O
28	int
,	O
31	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
28	int
}	O
,	O
{	O
29	int
,	O
30	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
29	int
}	O
,	O
{	O
30	int
,	O
29	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
30	int
}	O
,	O
{	O
31	int
,	O
28	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
31	int
}	O
,	O
{	O
32	int
,	O
33	int
,	O
12	int
,	O
12	int
,	O
32	int
}	O
,	O
{	O
33	int
,	O
32	int
,	O
13	int
,	O
13	int
,	O
33	int
}	O
,	O
{	O
34	int
,	O
35	int
,	O
14	int
,	O
14	int
,	O
34	int
}	O
,	O
{	O
35	int
,	O
34	int
,	O
15	int
,	O
15	int
,	O
35	int
}	O
,	O
{	O
36	int
,	O
37	int
,	O
18	int
,	O
18	int
,	O
36	int
}	O
,	O
{	O
37	int
,	O
36	int
,	O
19	int
,	O
19	int
,	O
37	int
}	O
,	O
{	O
38	int
,	O
39	int
,	O
20	int
,	O
20	int
,	O
38	int
}	O
,	O
{	O
39	int
,	O
38	int
,	O
21	int
,	O
21	int
,	O
39	int
}	O
,	O
{	O
40	int
,	O
41	int
,	O
22	int
,	O
22	int
,	O
40	int
}	O
,	O
{	O
41	int
,	O
40	int
,	O
23	int
,	O
23	int
,	O
41	int
}	O
,	O
{	O
42	int
,	O
43	int
,	O
24	int
,	O
24	int
,	O
42	int
}	O
,	O
{	O
43	int
,	O
42	int
,	O
25	int
,	O
25	int
,	O
43	int
}	O
,	O
{	O
44	int
,	O
45	int
,	O
26	int
,	O
26	int
,	O
44	int
}	O
,	O
{	O
45	int
,	O
44	int
,	O
27	int
,	O
27	int
,	O
45	int
}	O
,	O
{	O
46	int
,	O
47	int
,	O
28	int
,	O
28	int
,	O
46	int
}	O
,	O
{	O
47	int
,	O
46	int
,	O
29	int
,	O
29	int
,	O
47	int
}	O
,	O
{	O
48	int
,	O
48	int
,	O
34	int
,	O
36	int
,	O
48	int
}	O
,	O
{	O
49	int
,	O
49	int
,	O
35	int
,	O
37	int
,	O
49	int
}	O
,	O
{	O
50	int
,	O
50	int
,	O
36	int
,	O
38	int
,	O
50	int
}	O
,	O
{	O
51	int
,	O
51	int
,	O
37	int
,	O
39	int
,	O
51	int
}	O
,	O
{	O
52	int
,	O
52	int
,	O
38	int
,	O
40	int
,	O
52	int
}	O
,	O
{	O
53	int
,	O
53	int
,	O
39	int
,	O
41	int
,	O
53	int
}	O
,	O
{	O
54	int
,	O
54	int
,	O
40	int
,	O
42	int
,	O
54	int
}	O
,	O
{	O
55	int
,	O
55	int
,	O
41	int
,	O
43	int
,	O
55	int
}	O
,	O
{	O
56	int
,	O
56	int
,	O
42	int
,	O
44	int
,	O
56	int
}	O
,	O
{	O
57	int
,	O
57	int
,	O
43	int
,	O
45	int
,	O
57	int
}	O
,	O
{	O
58	int
,	O
58	int
,	O
44	int
,	O
46	int
,	O
58	int
}	O
,	O
{	O
59	int
,	O
59	int
,	O
45	int
,	O
47	int
,	O
59	int
}	O
,	O
{	O
60	int
,	O
60	int
,	O
46	int
,	O
48	int
,	O
60	int
}	O
,	O
{	O
61	int
,	O
61	int
,	O
47	int
,	O
49	int
,	O
61	int
}	O
,	O
{	O
62	int
,	O
62	int
,	O
48	int
,	O
50	int
,	O
62	int
}	O
,	O
{	O
63	int
,	O
63	int
,	O
49	int
,	O
51	int
,	O
63	int
}	O
,	O
{	O
64	int
,	O
65	int
,	O
-	O
1	int
,	O
30	int
,	O
-	O
1	int
}	O
,	O
{	O
65	int
,	O
64	int
,	O
-	O
1	int
,	O
31	int
,	O
-	O
1	int
}	O
,	O
{	O
66	int
,	O
67	int
,	O
2	int
,	O
2	int
,	O
-	O
1	int
}	O
,	O
{	O
67	int
,	O
66	int
,	O
3	int
,	O
3	int
,	O
-	O
1	int
}	O
,	O
{	O
68	int
,	O
69	int
,	O
4	int
,	O
4	int
,	O
-	O
1	int
}	O
,	O
{	O
69	int
,	O
68	int
,	O
5	int
,	O
5	int
,	O
-	O
1	int
}	O
,	O
{	O
70	int
,	O
71	int
,	O
16	int
,	O
16	int
,	O
-	O
1	int
}	O
,	O
{	O
71	int
,	O
70	int
,	O
17	int
,	O
17	int
,	O
-	O
1	int
}	O
,	O
{	O
72	int
,	O
73	int
,	O
52	int
,	O
54	int
,	O
-	O
1	int
}	O
,	O
{	O
73	int
,	O
72	int
,	O
53	int
,	O
55	int
,	O
-	O
1	int
}	O
,	O
{	O
74	int
,	O
74	int
,	O
51	int
,	O
53	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
}	O
;	O
static	O
int	O
convert_acct_record_read	function
(	O
struct	O
acct	struct
*	O
rec_in	pointer
,	O
struct	O
acct	struct
*	O
rec_out	pointer
)	O
{	O
int	O
byteswap	int
=	O
0	int
;	O
int	O
perm	int
;	O
unsigned	O
int	O
i	int
;	O
int	O
j	int
;	O
if	O
(	O
rec_in	pointer
->	O
ac_version	char
!=	O
0	int
&&	O
(	O
(	O
rec_in	pointer
->	O
ac_version	char
^	O
BYTEORDER	int
)	O
&	O
0x80	int
)	O
!=	O
0	int
)	O
byteswap	int
=	O
1	int
;	O
switch	O
(	O
rec_in	pointer
->	O
ac_version	char
&	O
0x7f	int
)	O
{	O
case	O
0	int
:	O
perm	int
=	O
3	int
;	O
break	O
;	O
case	O
1	int
:	O
perm	int
=	O
2	int
;	O
break	O
;	O
case	O
2	int
:	O
perm	int
=	O
3	int
;	O
break	O
;	O
case	O
3	int
:	O
case	O
4	int
:	O
perm	int
=	O
4	int
;	O
break	O
;	O
case	O
5	int
:	O
return	O
1	int
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"ERROR: unknown acct file format\n"	pointer
)	O
;	O
return	O
2	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sizeof	O
(	O
struct	O
acct	struct
)	O
;	O
i	int
++	O
)	O
{	O
j	int
=	O
permute	array
[	O
i	int
]	O
[	O
byteswap	int
]	O
;	O
j	int
=	O
permute	array
[	O
j	int
]	O
[	O
perm	int
]	O
;	O
if	O
(	O
j	int
>=	O
0	int
)	O
{	O
(	O
(	O
char	O
*	O
)	O
rec_out	pointer
)	O
[	O
i	int
]	O
=	O
(	O
(	O
char	O
*	O
)	O
rec_in	pointer
)	O
[	O
j	int
]	O
;	O
}	O
else	O
{	O
(	O
(	O
char	O
*	O
)	O
rec_out	pointer
)	O
[	O
i	int
]	O
=	O
0	int
;	O
}	O
}	O
if	O
(	O
rec_out	pointer
->	O
ac_ahz	short
==	O
0	int
)	O
{	O
if	O
(	O
(	O
rec_in	pointer
->	O
ac_version	char
&	O
0x7f	int
)	O
==	O
3	int
)	O
rec_out	pointer
->	O
ac_ahz	short
=	O
AHZ	int
;	O
else	O
rec_out	pointer
->	O
ac_ahz	short
=	O
ahz	int
;	O
}	O
switch	O
(	O
rec_out	pointer
->	O
ac_version	char
&	O
0x7f	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
rec_out	pointer
->	O
ac_uid16	short
!=	O
(	O
__u16	short
)	O
rec_out	pointer
->	O
ac_uid	int
||	O
rec_out	pointer
->	O
ac_gid16	short
!=	O
(	O
__u16	short
)	O
rec_out	pointer
->	O
ac_gid	int
)	O
{	O
rec_out	pointer
->	O
ac_uid	int
=	O
rec_out	pointer
->	O
ac_uid16	short
;	O
rec_out	pointer
->	O
ac_gid	int
=	O
rec_out	pointer
->	O
ac_gid16	short
;	O
}	O
case	O
1	int
:	O
rec_out	pointer
->	O
ac_etime	float
=	O
(	O
float	O
)	O
comp_t_2_double	function
(	O
rec_out	pointer
->	O
ac_etime_16	short
)	O
;	O
break	O
;	O
case	O
2	int
:	O
rec_out	pointer
->	O
ac_etime	float
=	O
(	O
float	O
)	O
comp2_t_2_double	function
(	O
rec_out	pointer
->	O
ac_etime_lo	short
|	O
rec_out	pointer
->	O
ac_etime_hi	char
<<	O
16	int
)	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
size_t	long
convert_acct_record_write	function
(	O
struct	O
acct	struct
*	O
rec_in	pointer
,	O
struct	O
acct	struct
*	O
rec_out	pointer
,	O
int	O
version	int
,	O
int	O
byteswap	int
)	O
{	O
int	O
perm	int
;	O
static	O
int	O
warned	int
=	O
0	int
;	O
unsigned	O
int	O
i	int
;	O
int	O
j	int
;	O
size_t	long
size	long
=	O
64	int
;	O
comp2_t	int
etime	int
;	O
double	O
factor	double
;	O
if	O
(	O
version	int
<	O
0	int
)	O
version	int
=	O
rec_in	pointer
->	O
ac_version	char
&	O
0x7f	int
;	O
switch	O
(	O
version	int
)	O
{	O
case	O
0	int
:	O
perm	int
=	O
3	int
;	O
break	O
;	O
case	O
1	int
:	O
perm	int
=	O
2	int
;	O
size	long
=	O
62	int
;	O
break	O
;	O
case	O
2	int
:	O
perm	int
=	O
3	int
;	O
break	O
;	O
case	O
3	int
:	O
perm	int
=	O
4	int
;	O
break	O
;	O
case	O
4	int
:	O
if	O
(	O
!	O
warned	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"WARNING: v4 file format not supported for writing. "	pointer
"Using v3 file format instead.\n"	pointer
)	O
;	O
warned	int
=	O
1	int
;	O
}	O
perm	int
=	O
4	int
;	O
version	int
=	O
3	int
;	O
break	O
;	O
case	O
5	int
:	O
default	O
:	O
if	O
(	O
!	O
warned	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"WARNING: unknown file format requested. "	pointer
"Using v2 file format instead.\n"	pointer
)	O
;	O
warned	int
=	O
1	int
;	O
}	O
perm	int
=	O
3	int
;	O
version	int
=	O
2	int
;	O
}	O
if	O
(	O
version	int
==	O
0	int
)	O
{	O
if	O
(	O
(	O
rec_in	pointer
->	O
ac_uid	int
&	O
0xffff0000	int
)	O
!=	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"WARNING: uid %lu truncated to %u\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
(	O
rec_in	pointer
->	O
ac_uid	int
)	O
,	O
(	O
unsigned	O
int	O
)	O
(	O
rec_in	pointer
->	O
ac_uid	int
&	O
0xffff	int
)	O
)	O
;	O
if	O
(	O
(	O
rec_in	pointer
->	O
ac_gid	int
&	O
0xffff0000	int
)	O
!=	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"WARNING: gid %lu truncated to %u\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
(	O
rec_in	pointer
->	O
ac_gid	int
)	O
,	O
(	O
unsigned	O
int	O
)	O
(	O
rec_in	pointer
->	O
ac_gid	int
&	O
0xffff	int
)	O
)	O
;	O
}	O
if	O
(	O
(	O
(	O
version	int
==	O
1	int
||	O
version	int
==	O
3	int
)	O
&&	O
rec_in	pointer
->	O
ac_ahz	short
!=	O
AHZ	int
)	O
||	O
(	O
(	O
version	int
==	O
0	int
||	O
version	int
==	O
2	int
)	O
&&	O
rec_in	pointer
->	O
ac_ahz	short
!=	O
ahz	int
)	O
)	O
{	O
if	O
(	O
version	int
==	O
0	int
||	O
version	int
==	O
2	int
)	O
factor	double
=	O
ahz	int
/	O
(	O
double	O
)	O
rec_in	pointer
->	O
ac_ahz	short
;	O
else	O
factor	double
=	O
AHZ	int
/	O
(	O
double	O
)	O
rec_in	pointer
->	O
ac_ahz	short
;	O
rec_in	pointer
->	O
ac_utime	short
=	O
double_2_comp_t	function
(	O
factor	double
*	O
comp_t_2_double	function
(	O
rec_in	pointer
->	O
ac_utime	short
)	O
)	O
;	O
rec_in	pointer
->	O
ac_stime	short
=	O
double_2_comp_t	function
(	O
factor	double
*	O
comp_t_2_double	function
(	O
rec_in	pointer
->	O
ac_stime	short
)	O
)	O
;	O
rec_in	pointer
->	O
ac_etime	float
*=	O
factor	double
;	O
rec_in	pointer
->	O
ac_ahz	short
=	O
AHZ	int
;	O
}	O
if	O
(	O
version	int
==	O
0	int
||	O
version	int
==	O
1	int
||	O
version	int
==	O
2	int
)	O
{	O
rec_in	pointer
->	O
ac_etime_16	short
=	O
double_2_comp_t	function
(	O
rec_in	pointer
->	O
ac_etime	float
)	O
;	O
etime	int
=	O
double_2_comp2_t	function
(	O
rec_in	pointer
->	O
ac_etime	float
)	O
;	O
rec_in	pointer
->	O
ac_etime_hi	char
=	O
etime	int
>>	O
16	int
;	O
rec_in	pointer
->	O
ac_etime_lo	short
=	O
(	O
__u16	short
)	O
etime	int
;	O
rec_in	pointer
->	O
ac_uid16	short
=	O
(	O
__u16	short
)	O
rec_in	pointer
->	O
ac_uid	int
;	O
rec_in	pointer
->	O
ac_gid16	short
=	O
(	O
__u16	short
)	O
rec_in	pointer
->	O
ac_gid	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
size	long
;	O
i	int
++	O
)	O
(	O
(	O
char	O
*	O
)	O
rec_out	pointer
)	O
[	O
i	int
]	O
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sizeof	O
(	O
struct	O
acct	struct
)	O
;	O
i	int
++	O
)	O
{	O
j	int
=	O
permute	array
[	O
i	int
]	O
[	O
byteswap	int
]	O
;	O
j	int
=	O
permute	array
[	O
j	int
]	O
[	O
perm	int
]	O
;	O
if	O
(	O
j	int
>=	O
0	int
)	O
(	O
(	O
char	O
*	O
)	O
rec_out	pointer
)	O
[	O
j	int
]	O
=	O
(	O
(	O
char	O
*	O
)	O
rec_in	pointer
)	O
[	O
i	int
]	O
;	O
}	O
if	O
(	O
byteswap	int
!=	O
0	int
)	O
byteswap	int
=	O
0x80	int
;	O
rec_out	pointer
->	O
ac_version	char
=	O
version	int
|	O
(	O
BYTEORDER	int
^	O
byteswap	int
)	O
;	O
return	O
size	long
;	O
}	O
