gsl_siman_params_t	struct
params	pointer
=	O
{	O
N_TRIES	int
,	O
ITERS_FIXED_T	int
,	O
STEP_SIZE	int
,	O
K	int
,	O
T_INITIAL	int
,	O
MU_T	int
,	O
T_MIN	int
}	O
;	O
struct	O
s_tsp_city	struct
{	O
const	O
char	O
*	O
name	pointer
;	O
double	O
lat	double
,	O
longitude	double
;	O
}	O
;	O
typedef	O
struct	O
s_tsp_city	struct
Stsp_city	struct
;	O
void	O
prepare_distance_matrix	function
(	O
void	O
)	O
;	O
void	O
exhaustive_search	function
(	O
void	O
)	O
;	O
void	O
print_distance_matrix	function
(	O
void	O
)	O
;	O
double	O
city_distance	function
(	O
Stsp_city	struct
c1	struct
,	O
Stsp_city	struct
c2	struct
)	O
;	O
double	O
Etsp	function
(	O
void	O
*	O
xp	pointer
)	O
;	O
double	O
Mtsp	function
(	O
void	O
*	O
xp	pointer
,	O
void	O
*	O
yp	pointer
)	O
;	O
void	O
Stsp	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
void	O
*	O
xp	pointer
,	O
double	O
step_size	double
)	O
;	O
void	O
Ptsp	function
(	O
void	O
*	O
xp	pointer
)	O
;	O
Stsp_city	struct
cities	array
[	O
]	O
=	O
{	O
{	O
"Santa Fe"	pointer
,	O
35.68	int
,	O
105.95	int
}	O
,	O
{	O
"Phoenix"	pointer
,	O
33.54	int
,	O
112.07	int
}	O
,	O
{	O
"Albuquerque"	pointer
,	O
35.12	int
,	O
106.62	int
}	O
,	O
{	O
"Clovis"	pointer
,	O
34.41	int
,	O
103.20	int
}	O
,	O
{	O
"Durango"	pointer
,	O
37.29	int
,	O
107.87	int
}	O
,	O
{	O
"Dallas"	pointer
,	O
32.79	int
,	O
96.77	int
}	O
,	O
{	O
"Tesuque"	pointer
,	O
35.77	int
,	O
105.92	int
}	O
,	O
{	O
"Grants"	pointer
,	O
35.15	int
,	O
107.84	int
}	O
,	O
{	O
"Los Alamos"	pointer
,	O
35.89	int
,	O
106.28	int
}	O
,	O
{	O
"Las Cruces"	pointer
,	O
32.34	int
,	O
106.76	int
}	O
,	O
{	O
"Cortez"	pointer
,	O
37.35	int
,	O
108.58	int
}	O
,	O
{	O
"Gallup"	pointer
,	O
35.52	int
,	O
108.74	int
}	O
}	O
;	O
double	O
distance_matrix	array
[	O
N_CITIES	O
]	O
[	O
N_CITIES	O
]	O
;	O
double	O
city_distance	function
(	O
Stsp_city	struct
c1	struct
,	O
Stsp_city	struct
c2	struct
)	O
{	O
const	O
double	O
earth_radius	double
=	O
6375.000	int
;	O
double	O
sla1	double
=	O
sin	function
(	O
c1	struct
.	O
lat	double
*	O
M_PI	int
/	O
180	int
)	O
,	O
cla1	double
=	O
cos	function
(	O
c1	struct
.	O
lat	double
*	O
M_PI	int
/	O
180	int
)	O
,	O
slo1	double
=	O
sin	function
(	O
c1	struct
.	O
longitude	double
*	O
M_PI	int
/	O
180	int
)	O
,	O
clo1	double
=	O
cos	function
(	O
c1	struct
.	O
longitude	double
*	O
M_PI	int
/	O
180	int
)	O
;	O
double	O
sla2	double
=	O
sin	function
(	O
c2	struct
.	O
lat	double
*	O
M_PI	int
/	O
180	int
)	O
,	O
cla2	double
=	O
cos	function
(	O
c2	struct
.	O
lat	double
*	O
M_PI	int
/	O
180	int
)	O
,	O
slo2	double
=	O
sin	function
(	O
c2	struct
.	O
longitude	double
*	O
M_PI	int
/	O
180	int
)	O
,	O
clo2	double
=	O
cos	function
(	O
c2	struct
.	O
longitude	double
*	O
M_PI	int
/	O
180	int
)	O
;	O
double	O
x1	double
=	O
cla1	double
*	O
clo1	double
;	O
double	O
x2	double
=	O
cla2	double
*	O
clo2	double
;	O
double	O
y1	function
=	O
cla1	double
*	O
slo1	double
;	O
double	O
y2	double
=	O
cla2	double
*	O
slo2	double
;	O
double	O
z1	double
=	O
sla1	double
;	O
double	O
z2	double
=	O
sla2	double
;	O
double	O
dot_product	double
=	O
x1	double
*	O
x2	double
+	O
y1	function
*	O
y2	double
+	O
z1	double
*	O
z2	double
;	O
double	O
angle	double
=	O
acos	function
(	O
dot_product	double
)	O
;	O
return	O
angle	double
*	O
earth_radius	double
;	O
}	O
double	O
Etsp	function
(	O
void	O
*	O
xp	pointer
)	O
{	O
int	O
*	O
route	pointer
=	O
(	O
int	O
*	O
)	O
xp	pointer
;	O
double	O
E	double
=	O
0	int
;	O
unsigned	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
N_CITIES	O
;	O
++	O
i	int
)	O
{	O
E	double
+=	O
distance_matrix	array
[	O
route	pointer
[	O
i	int
]	O
]	O
[	O
route	pointer
[	O
(	O
i	int
+	O
1	int
)	O
%	O
N_CITIES	O
]	O
]	O
;	O
}	O
return	O
E	double
;	O
}	O
double	O
Mtsp	function
(	O
void	O
*	O
xp	pointer
,	O
void	O
*	O
yp	pointer
)	O
{	O
int	O
*	O
route1	pointer
=	O
(	O
int	O
*	O
)	O
xp	pointer
,	O
*	O
route2	pointer
=	O
(	O
int	O
*	O
)	O
yp	pointer
;	O
double	O
distance	pointer
=	O
0	int
;	O
unsigned	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
N_CITIES	O
;	O
++	O
i	int
)	O
{	O
distance	pointer
+=	O
(	O
(	O
route1	pointer
[	O
i	int
]	O
==	O
route2	pointer
[	O
i	int
]	O
)	O
?	O
0	int
:	O
1	int
)	O
;	O
}	O
return	O
distance	pointer
;	O
}	O
void	O
Stsp	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
void	O
*	O
xp	pointer
,	O
double	O
step_size	double
)	O
{	O
int	O
x1	double
,	O
x2	double
,	O
dummy	int
;	O
int	O
*	O
route	pointer
=	O
(	O
int	O
*	O
)	O
xp	pointer
;	O
step_size	double
=	O
0	int
;	O
x1	double
=	O
(	O
gsl_rng_get	function
(	O
r	pointer
)	O
%	O
(	O
N_CITIES	O
-	O
1	int
)	O
)	O
+	O
1	int
;	O
do	O
{	O
x2	double
=	O
(	O
gsl_rng_get	function
(	O
r	pointer
)	O
%	O
(	O
N_CITIES	O
-	O
1	int
)	O
)	O
+	O
1	int
;	O
}	O
while	O
(	O
x2	double
==	O
x1	double
)	O
;	O
dummy	int
=	O
route	pointer
[	O
x1	double
]	O
;	O
route	pointer
[	O
x1	double
]	O
=	O
route	pointer
[	O
x2	double
]	O
;	O
route	pointer
[	O
x2	double
]	O
=	O
dummy	int
;	O
}	O
void	O
Ptsp	function
(	O
void	O
*	O
xp	pointer
)	O
{	O
unsigned	O
int	O
i	int
;	O
int	O
*	O
route	pointer
=	O
(	O
int	O
*	O
)	O
xp	pointer
;	O
printf	function
(	O
"  ["	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
N_CITIES	O
;	O
++	O
i	int
)	O
{	O
printf	function
(	O
" %d "	pointer
,	O
route	pointer
[	O
i	int
]	O
)	O
;	O
}	O
printf	function
(	O
"]  "	pointer
)	O
;	O
}	O
int	O
main	function
(	O
void	O
)	O
{	O
int	O
x_initial	array
[	O
N_CITIES	O
]	O
;	O
unsigned	O
int	O
i	int
;	O
const	O
gsl_rng	struct
*	O
r	pointer
=	O
gsl_rng_alloc	function
(	O
gsl_rng_env_setup	function
(	O
)	O
)	O
;	O
gsl_ieee_env_setup	function
(	O
)	O
;	O
prepare_distance_matrix	function
(	O
)	O
;	O
printf	function
(	O
"# initial order of cities:\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
N_CITIES	O
;	O
++	O
i	int
)	O
{	O
printf	function
(	O
"# \"%s\"\n"	pointer
,	O
cities	array
[	O
i	int
]	O
.	O
name	pointer
)	O
;	O
x_initial	array
[	O
i	int
]	O
=	O
i	int
;	O
}	O
printf	function
(	O
"# distance matrix is:\n"	pointer
)	O
;	O
print_distance_matrix	function
(	O
)	O
;	O
printf	function
(	O
"# initial coordinates of cities (longitude and latitude)\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
N_CITIES	O
+	O
1	int
;	O
++	O
i	int
)	O
{	O
printf	function
(	O
"###initial_city_coord: %g %g \"%s\"\n"	pointer
,	O
-	O
cities	array
[	O
x_initial	array
[	O
i	int
%	O
N_CITIES	O
]	O
]	O
.	O
longitude	double
,	O
cities	array
[	O
x_initial	array
[	O
i	int
%	O
N_CITIES	O
]	O
]	O
.	O
lat	double
,	O
cities	array
[	O
x_initial	array
[	O
i	int
%	O
N_CITIES	O
]	O
]	O
.	O
name	pointer
)	O
;	O
}	O
gsl_siman_solve	function
(	O
r	pointer
,	O
x_initial	array
,	O
Etsp	function
,	O
Stsp	function
,	O
Mtsp	function
,	O
Ptsp	function
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
N_CITIES	O
*	O
sizeof	O
(	O
int	O
)	O
,	O
params	pointer
)	O
;	O
printf	function
(	O
"# final order of cities:\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
N_CITIES	O
;	O
++	O
i	int
)	O
{	O
printf	function
(	O
"# \"%s\"\n"	pointer
,	O
cities	array
[	O
x_initial	array
[	O
i	int
]	O
]	O
.	O
name	pointer
)	O
;	O
}	O
printf	function
(	O
"# final coordinates of cities (longitude and latitude)\n"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
N_CITIES	O
+	O
1	int
;	O
++	O
i	int
)	O
{	O
printf	function
(	O
"###final_city_coord: %g %g %s\n"	pointer
,	O
-	O
cities	array
[	O
x_initial	array
[	O
i	int
%	O
N_CITIES	O
]	O
]	O
.	O
longitude	double
,	O
cities	array
[	O
x_initial	array
[	O
i	int
%	O
N_CITIES	O
]	O
]	O
.	O
lat	double
,	O
cities	array
[	O
x_initial	array
[	O
i	int
%	O
N_CITIES	O
]	O
]	O
.	O
name	pointer
)	O
;	O
}	O
printf	function
(	O
"# "	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
prepare_distance_matrix	function
(	O
)	O
{	O
unsigned	O
int	O
i	int
,	O
j	int
;	O
double	O
dist	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
N_CITIES	O
;	O
++	O
i	int
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
N_CITIES	O
;	O
++	O
j	int
)	O
{	O
if	O
(	O
i	int
==	O
j	int
)	O
{	O
dist	double
=	O
0	int
;	O
}	O
else	O
{	O
dist	double
=	O
city_distance	function
(	O
cities	array
[	O
i	int
]	O
,	O
cities	array
[	O
j	int
]	O
)	O
;	O
}	O
distance_matrix	array
[	O
i	int
]	O
[	O
j	int
]	O
=	O
dist	double
;	O
}	O
}	O
}	O
void	O
print_distance_matrix	function
(	O
)	O
{	O
unsigned	O
int	O
i	int
,	O
j	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
N_CITIES	O
;	O
++	O
i	int
)	O
{	O
printf	function
(	O
"# "	pointer
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
N_CITIES	O
;	O
++	O
j	int
)	O
{	O
printf	function
(	O
"%15.8f   "	pointer
,	O
distance_matrix	array
[	O
i	int
]	O
[	O
j	int
]	O
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
}	O
static	O
double	O
best_E	double
=	O
1.0e100	int
,	O
second_E	double
=	O
1.0e100	int
,	O
third_E	double
=	O
1.0e100	int
;	O
static	O
int	O
best_route	array
[	O
N_CITIES	O
]	O
;	O
static	O
int	O
second_route	array
[	O
N_CITIES	O
]	O
;	O
static	O
int	O
third_route	array
[	O
N_CITIES	O
]	O
;	O
static	O
void	O
do_all_perms	function
(	O
int	O
*	O
route	pointer
,	O
int	O
n	int
)	O
;	O
void	O
exhaustive_search	function
(	O
)	O
{	O
static	O
int	O
initial_route	array
[	O
N_CITIES	O
]	O
=	O
{	O
0	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
}	O
;	O
printf	function
(	O
"\n# "	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
do_all_perms	function
(	O
initial_route	array
,	O
1	int
)	O
;	O
printf	function
(	O
"\n# "	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
printf	function
(	O
"# exhaustive best route: "	pointer
)	O
;	O
Ptsp	function
(	O
best_route	array
)	O
;	O
printf	function
(	O
"\n# its energy is: %g\n"	pointer
,	O
best_E	double
)	O
;	O
printf	function
(	O
"# exhaustive second_best route: "	pointer
)	O
;	O
Ptsp	function
(	O
second_route	array
)	O
;	O
printf	function
(	O
"\n# its energy is: %g\n"	pointer
,	O
second_E	double
)	O
;	O
printf	function
(	O
"# exhaustive third_best route: "	pointer
)	O
;	O
Ptsp	function
(	O
third_route	array
)	O
;	O
printf	function
(	O
"\n# its energy is: %g\n"	pointer
,	O
third_E	double
)	O
;	O
}	O
static	O
void	O
do_all_perms	function
(	O
int	O
*	O
route	pointer
,	O
int	O
n	int
)	O
{	O
if	O
(	O
n	int
==	O
(	O
N_CITIES	O
-	O
1	int
)	O
)	O
{	O
double	O
E	double
;	O
E	double
=	O
Etsp	function
(	O
route	pointer
)	O
;	O
if	O
(	O
E	double
<	O
best_E	double
)	O
{	O
third_E	double
=	O
second_E	double
;	O
memcpy	function
(	O
third_route	array
,	O
second_route	array
,	O
N_CITIES	O
*	O
sizeof	O
(	O
*	O
route	pointer
)	O
)	O
;	O
second_E	double
=	O
best_E	double
;	O
memcpy	function
(	O
second_route	array
,	O
best_route	array
,	O
N_CITIES	O
*	O
sizeof	O
(	O
*	O
route	pointer
)	O
)	O
;	O
best_E	double
=	O
E	double
;	O
memcpy	function
(	O
best_route	array
,	O
route	pointer
,	O
N_CITIES	O
*	O
sizeof	O
(	O
*	O
route	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
E	double
<	O
second_E	double
)	O
{	O
third_E	double
=	O
second_E	double
;	O
memcpy	function
(	O
third_route	array
,	O
second_route	array
,	O
N_CITIES	O
*	O
sizeof	O
(	O
*	O
route	pointer
)	O
)	O
;	O
second_E	double
=	O
E	double
;	O
memcpy	function
(	O
second_route	array
,	O
route	pointer
,	O
N_CITIES	O
*	O
sizeof	O
(	O
*	O
route	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
E	double
<	O
third_E	double
)	O
{	O
third_E	double
=	O
E	double
;	O
memcpy	function
(	O
route	pointer
,	O
third_route	array
,	O
N_CITIES	O
*	O
sizeof	O
(	O
*	O
route	pointer
)	O
)	O
;	O
}	O
}	O
else	O
{	O
int	O
new_route	array
[	O
N_CITIES	O
]	O
;	O
unsigned	O
int	O
j	int
;	O
int	O
swap_tmp	int
;	O
memcpy	function
(	O
new_route	array
,	O
route	pointer
,	O
N_CITIES	O
*	O
sizeof	O
(	O
*	O
route	pointer
)	O
)	O
;	O
for	O
(	O
j	int
=	O
n	int
;	O
j	int
<	O
N_CITIES	O
;	O
++	O
j	int
)	O
{	O
swap_tmp	int
=	O
new_route	array
[	O
j	int
]	O
;	O
new_route	array
[	O
j	int
]	O
=	O
new_route	array
[	O
n	int
]	O
;	O
new_route	array
[	O
n	int
]	O
=	O
swap_tmp	int
;	O
do_all_perms	function
(	O
new_route	array
,	O
n	int
+	O
1	int
)	O
;	O
}	O
}	O
}	O
