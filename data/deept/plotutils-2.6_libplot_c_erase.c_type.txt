bool	enum
_pl_c_erase_page	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
PL_NUM_PS_FONTS	int
;	O
i	int
++	O
)	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
ps_font_used	array
[	O
i	int
]	O
=	O
false	int
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
extra	pointer
)	O
{	O
plCGMCustomLineType	struct
*	O
linetype_ptr	pointer
=	O
(	O
plCGMCustomLineType	struct
*	O
)	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
extra	pointer
;	O
plCGMCustomLineType	struct
*	O
old_linetype_ptr	pointer
;	O
while	O
(	O
linetype_ptr	pointer
)	O
{	O
if	O
(	O
linetype_ptr	pointer
->	O
dash_array_len	int
>	O
0	int
&&	O
linetype_ptr	pointer
->	O
dashes	pointer
)	O
free	function
(	O
linetype_ptr	pointer
->	O
dashes	pointer
)	O
;	O
old_linetype_ptr	pointer
=	O
linetype_ptr	pointer
;	O
linetype_ptr	pointer
=	O
linetype_ptr	pointer
->	O
next	pointer
;	O
free	function
(	O
old_linetype_ptr	pointer
)	O
;	O
}	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
extra	pointer
=	O
(	O
void	O
*	O
)	O
NULL	O
;	O
}	O
_plotter	pointer
->	O
cgm_page_version	int
=	O
1	int
;	O
_plotter	pointer
->	O
cgm_page_profile	int
=	O
CGM_PROFILE_WEB	int
;	O
_plotter	pointer
->	O
cgm_page_need_color	enum
=	O
false	int
;	O
_plotter	pointer
->	O
cgm_line_color	struct
.	O
red	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_line_color	struct
.	O
green	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_line_color	struct
.	O
blue	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_edge_color	struct
.	O
red	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_edge_color	struct
.	O
green	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_edge_color	struct
.	O
blue	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_fillcolor	struct
.	O
red	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_fillcolor	struct
.	O
green	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_fillcolor	struct
.	O
blue	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_marker_color	struct
.	O
red	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_marker_color	struct
.	O
green	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_marker_color	struct
.	O
blue	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_text_color	struct
.	O
red	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_text_color	struct
.	O
green	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_text_color	struct
.	O
blue	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_bgcolor	struct
.	O
red	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_bgcolor	struct
.	O
green	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_bgcolor	struct
.	O
blue	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_line_type	int
=	O
CGM_L_SOLID	int
;	O
_plotter	pointer
->	O
cgm_dash_offset	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
cgm_join_style	int
=	O
CGM_JOIN_UNSPEC	int
;	O
_plotter	pointer
->	O
cgm_cap_style	int
=	O
CGM_CAP_UNSPEC	int
;	O
_plotter	pointer
->	O
cgm_dash_cap_style	int
=	O
CGM_CAP_UNSPEC	int
;	O
_plotter	pointer
->	O
cgm_line_width	int
=	O
(	O
1	int
<<	O
(	O
8	int
*	O
CGM_BINARY_BYTES_PER_INTEGER	int
-	O
3	int
)	O
)	O
/	O
500	int
;	O
_plotter	pointer
->	O
cgm_interior_style	int
=	O
CGM_INT_STYLE_HOLLOW	int
;	O
_plotter	pointer
->	O
cgm_edge_type	int
=	O
CGM_L_SOLID	int
;	O
_plotter	pointer
->	O
cgm_edge_dash_offset	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
cgm_edge_join_style	int
=	O
CGM_JOIN_UNSPEC	int
;	O
_plotter	pointer
->	O
cgm_edge_cap_style	int
=	O
CGM_CAP_UNSPEC	int
;	O
_plotter	pointer
->	O
cgm_edge_dash_cap_style	int
=	O
CGM_CAP_UNSPEC	int
;	O
_plotter	pointer
->	O
cgm_edge_width	int
=	O
(	O
1	int
<<	O
(	O
8	int
*	O
CGM_BINARY_BYTES_PER_INTEGER	int
-	O
3	int
)	O
)	O
/	O
500	int
;	O
_plotter	pointer
->	O
cgm_edge_is_visible	enum
=	O
false	int
;	O
_plotter	pointer
->	O
cgm_miter_limit	double
=	O
32767.0	int
;	O
_plotter	pointer
->	O
cgm_marker_type	int
=	O
CGM_M_ASTERISK	int
;	O
_plotter	pointer
->	O
cgm_marker_size	int
=	O
(	O
1	int
<<	O
(	O
8	int
*	O
CGM_BINARY_BYTES_PER_INTEGER	int
-	O
3	int
)	O
)	O
/	O
500	int
;	O
_plotter	pointer
->	O
cgm_char_height	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_char_base_vector_x	int
=	O
1	int
;	O
_plotter	pointer
->	O
cgm_char_base_vector_y	int
=	O
0	int
;	O
_plotter	pointer
->	O
cgm_char_up_vector_x	int
=	O
0	int
;	O
_plotter	pointer
->	O
cgm_char_up_vector_y	int
=	O
1	int
;	O
_plotter	pointer
->	O
cgm_horizontal_text_alignment	int
=	O
CGM_ALIGN_NORMAL_HORIZONTAL	int
;	O
_plotter	pointer
->	O
cgm_vertical_text_alignment	int
=	O
CGM_ALIGN_NORMAL_VERTICAL	int
;	O
_plotter	pointer
->	O
cgm_font_id	int
=	O
-	O
1	int
;	O
_plotter	pointer
->	O
cgm_charset_lower	int
=	O
0	int
;	O
_plotter	pointer
->	O
cgm_charset_upper	int
=	O
0	int
;	O
_plotter	pointer
->	O
cgm_restricted_text_type	int
=	O
CGM_RESTRICTED_TEXT_TYPE_BASIC	int
;	O
_pl_c_set_bg_color	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
return	O
true	int
;	O
}	O
