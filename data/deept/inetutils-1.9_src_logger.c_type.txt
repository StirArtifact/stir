static	O
char	O
*	O
tag	pointer
=	O
NULL	O
;	O
static	O
int	O
logflags	int
=	O
0	int
;	O
static	O
int	O
pri	int
=	O
MAKE_PRI	O
(	O
LOG_USER	O
,	O
LOG_NOTICE	int
)	O
;	O
static	O
char	O
*	O
host	pointer
=	O
PATH_LOG	O
;	O
static	O
char	O
*	O
source	pointer
;	O
static	O
char	O
*	O
pidstr	pointer
;	O
static	O
int	O
host_family	int
=	O
AF_UNSPEC	O
;	O
int	O
decode	function
(	O
char	O
*	O
name	pointer
,	O
CODE	struct
*	O
codetab	pointer
,	O
const	O
char	O
*	O
what	pointer
)	O
{	O
CODE	struct
*	O
cp	pointer
;	O
if	O
(	O
isdigit	function
(	O
*	O
name	pointer
)	O
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
c	int
;	O
unsigned	O
long	O
n	long
=	O
strtoul	function
(	O
name	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
||	O
(	O
c	int
=	O
n	long
)	O
!=	O
n	long
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"%s: invalid %s number"	pointer
,	O
what	pointer
,	O
name	pointer
)	O
;	O
return	O
c	int
;	O
}	O
for	O
(	O
cp	pointer
=	O
codetab	pointer
;	O
cp	pointer
->	O
c_name	pointer
;	O
cp	pointer
++	O
)	O
{	O
if	O
(	O
strcasecmp	function
(	O
name	pointer
,	O
cp	pointer
->	O
c_name	pointer
)	O
==	O
0	int
)	O
return	O
cp	pointer
->	O
c_val	int
;	O
}	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown %s name: %s"	pointer
,	O
what	pointer
,	O
name	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
parse_level	function
(	O
char	O
*	O
str	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
fac	int
,	O
pri	int
=	O
0	int
;	O
p	pointer
=	O
strchr	function
(	O
str	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
*	O
p	pointer
++	O
=	O
0	int
;	O
fac	int
=	O
decode	function
(	O
str	pointer
,	O
facilitynames	array
,	O
"facility"	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
pri	int
=	O
decode	function
(	O
p	pointer
,	O
prioritynames	array
,	O
"priority"	pointer
)	O
;	O
return	O
MAKE_PRI	O
(	O
fac	int
,	O
pri	int
)	O
;	O
}	O
union	O
logger_sockaddr	union
{	O
struct	O
sockaddr	struct
sa	struct
;	O
struct	O
sockaddr_in	struct
sinet	struct
;	O
struct	O
sockaddr_in6	struct
sinet6	struct
;	O
struct	O
sockaddr_un	struct
sunix	struct
;	O
}	O
;	O
int	O
fd	int
;	O
static	O
void	O
open_socket	function
(	O
void	O
)	O
{	O
union	O
logger_sockaddr	union
sockaddr	struct
;	O
socklen_t	int
socklen	int
;	O
int	O
family	int
;	O
int	O
ret	int
;	O
if	O
(	O
host	pointer
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
host	pointer
)	O
;	O
if	O
(	O
len	long
>=	O
sizeof	O
sockaddr	struct
.	O
sunix	struct
.	O
sun_path	array
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"UNIX socket name too long"	pointer
)	O
;	O
strcpy	function
(	O
sockaddr	struct
.	O
sunix	struct
.	O
sun_path	array
,	O
host	pointer
)	O
;	O
sockaddr	struct
.	O
sunix	struct
.	O
sun_family	short
=	O
AF_UNIX	O
;	O
family	int
=	O
PF_UNIX	O
;	O
socklen	int
=	O
sizeof	O
(	O
sockaddr	struct
.	O
sunix	struct
)	O
;	O
}	O
else	O
{	O
struct	O
addrinfo	struct
hints	struct
,	O
*	O
ai	pointer
,	O
*	O
res	pointer
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
*	O
host	pointer
==	O
'['	O
)	O
{	O
++	O
host	pointer
;	O
p	pointer
=	O
strchr	function
(	O
host	pointer
,	O
']'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
*	O
p	pointer
++	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
p	pointer
==	O
':'	O
)	O
++	O
p	pointer
;	O
else	O
p	pointer
=	O
NULL	O
;	O
}	O
}	O
else	O
{	O
p	pointer
=	O
strrchr	function
(	O
host	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
*	O
p	pointer
++	O
=	O
0	int
;	O
}	O
if	O
(	O
!	O
p	pointer
)	O
p	pointer
=	O
"syslog"	pointer
;	O
memset	function
(	O
&	O
hints	struct
,	O
0	int
,	O
sizeof	O
(	O
hints	struct
)	O
)	O
;	O
hints	struct
.	O
ai_socktype	int
=	O
SOCK_DGRAM	int
;	O
hints	struct
.	O
ai_family	int
=	O
host_family	int
;	O
hints	struct
.	O
ai_flags	int
=	O
AI_ADDRCONFIG	int
;	O
ret	int
=	O
getaddrinfo	function
(	O
host	pointer
,	O
p	pointer
,	O
&	O
hints	struct
,	O
&	O
res	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"%s:%s, %s"	pointer
,	O
host	pointer
,	O
p	pointer
,	O
gai_strerror	function
(	O
ret	int
)	O
)	O
;	O
for	O
(	O
ai	pointer
=	O
res	pointer
;	O
ai	pointer
;	O
ai	pointer
=	O
ai	pointer
->	O
ai_next	pointer
)	O
{	O
fd	int
=	O
socket	function
(	O
ai	pointer
->	O
ai_family	int
,	O
ai	pointer
->	O
ai_socktype	int
,	O
ai	pointer
->	O
ai_protocol	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
continue	O
;	O
if	O
(	O
source	pointer
)	O
{	O
int	O
ret	int
;	O
struct	O
addrinfo	struct
tips	struct
,	O
*	O
a	pointer
;	O
memset	function
(	O
&	O
tips	struct
,	O
0	int
,	O
sizeof	O
(	O
tips	struct
)	O
)	O
;	O
tips	struct
.	O
ai_family	int
=	O
ai	pointer
->	O
ai_family	int
;	O
tips	struct
.	O
ai_flags	int
=	O
AI_NUMERICHOST	int
;	O
ret	int
=	O
getaddrinfo	function
(	O
source	pointer
,	O
NULL	O
,	O
&	O
tips	struct
,	O
&	O
a	pointer
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
close	function
(	O
fd	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
bind	function
(	O
fd	int
,	O
a	pointer
->	O
ai_addr	pointer
,	O
a	pointer
->	O
ai_addrlen	int
)	O
)	O
{	O
freeaddrinfo	function
(	O
a	pointer
)	O
;	O
close	function
(	O
fd	int
)	O
;	O
continue	O
;	O
}	O
freeaddrinfo	function
(	O
a	pointer
)	O
;	O
}	O
if	O
(	O
connect	function
(	O
fd	int
,	O
ai	pointer
->	O
ai_addr	pointer
,	O
ai	pointer
->	O
ai_addrlen	int
)	O
)	O
{	O
close	function
(	O
fd	int
)	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
res	pointer
)	O
freeaddrinfo	function
(	O
res	pointer
)	O
;	O
if	O
(	O
ai	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
EADDRNOTAVAIL	int
,	O
"%s:%s"	pointer
,	O
host	pointer
,	O
p	pointer
)	O
;	O
return	O
;	O
socklen	int
=	O
sizeof	O
(	O
sockaddr	struct
.	O
sinet	struct
)	O
;	O
}	O
fd	int
=	O
socket	function
(	O
family	int
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot create socket"	pointer
)	O
;	O
if	O
(	O
family	int
==	O
PF_INET	int
)	O
{	O
struct	O
sockaddr_in	struct
s	long
;	O
s	long
.	O
sin_family	short
=	O
AF_INET	O
;	O
if	O
(	O
source	pointer
)	O
{	O
if	O
(	O
inet_aton	function
(	O
source	pointer
,	O
(	O
struct	O
in_addr	struct
*	O
)	O
&	O
s	long
.	O
sin_addr	struct
)	O
!=	O
1	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"invalid source address"	pointer
)	O
;	O
}	O
else	O
s	long
.	O
sin_addr	struct
.	O
s_addr	int
=	O
INADDR_ANY	O
;	O
s	long
.	O
sin_port	short
=	O
0	int
;	O
if	O
(	O
bind	function
(	O
fd	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
s	long
,	O
sizeof	O
(	O
s	long
)	O
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot bind to source address"	pointer
)	O
;	O
}	O
if	O
(	O
connect	function
(	O
fd	int
,	O
&	O
sockaddr	struct
.	O
sa	struct
,	O
socklen	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot connect"	pointer
)	O
;	O
}	O
static	O
void	O
send_to_syslog	function
(	O
const	O
char	O
*	O
msg	pointer
)	O
{	O
char	O
*	O
pbuf	pointer
;	O
time_t	long
now	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
size_t	long
len	long
;	O
ssize_t	long
rc	long
;	O
if	O
(	O
logflags	int
&	O
LOG_PID	int
)	O
rc	long
=	O
asprintf	function
(	O
&	O
pbuf	pointer
,	O
"<%d>%.15s %s[%s]: %s"	pointer
,	O
pri	int
,	O
ctime	function
(	O
&	O
now	long
)	O
+	O
4	int
,	O
tag	pointer
,	O
pidstr	pointer
,	O
msg	pointer
)	O
;	O
else	O
rc	long
=	O
asprintf	function
(	O
&	O
pbuf	pointer
,	O
"<%d>%.15s %s: %s"	pointer
,	O
pri	int
,	O
ctime	function
(	O
&	O
now	long
)	O
+	O
4	int
,	O
tag	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
rc	long
==	O
-	O
1	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot format message"	pointer
)	O
;	O
len	long
=	O
strlen	function
(	O
pbuf	pointer
)	O
;	O
if	O
(	O
logflags	int
&	O
LOG_PERROR	int
)	O
{	O
struct	O
iovec	struct
iov	array
[	O
2	int
]	O
,	O
*	O
ioptr	pointer
;	O
size_t	long
msglen	long
=	O
strlen	function
(	O
msg	pointer
)	O
;	O
ioptr	pointer
=	O
iov	array
;	O
ioptr	pointer
->	O
iov_base	pointer
=	O
(	O
char	O
*	O
)	O
msg	pointer
;	O
ioptr	pointer
->	O
iov_len	long
=	O
msglen	long
;	O
if	O
(	O
msg	pointer
[	O
msglen	long
-	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
ioptr	pointer
++	O
;	O
ioptr	pointer
->	O
iov_base	pointer
=	O
(	O
char	O
*	O
)	O
"\n"	pointer
;	O
ioptr	pointer
->	O
iov_len	long
=	O
1	int
;	O
}	O
writev	function
(	O
fileno	function
(	O
stderr	pointer
)	O
,	O
iov	array
,	O
ioptr	pointer
-	O
iov	array
+	O
1	int
)	O
;	O
}	O
rc	long
=	O
send	function
(	O
fd	int
,	O
pbuf	pointer
,	O
len	long
,	O
0	int
)	O
;	O
free	function
(	O
pbuf	pointer
)	O
;	O
if	O
(	O
rc	long
==	O
-	O
1	int
)	O
error	function
(	O
0	int
,	O
errno	O
,	O
"send failed"	pointer
)	O
;	O
else	O
if	O
(	O
rc	long
!=	O
len	long
)	O
error	function
(	O
0	int
,	O
errno	O
,	O
"sent less bytes than expected (%lu vs. %lu)"	pointer
,	O
(	O
unsigned	O
long	O
)	O
rc	long
,	O
(	O
unsigned	O
long	O
)	O
len	long
)	O
;	O
}	O
const	O
char	O
args_doc	pointer
[	O
]	O
=	O
"[MESSAGE]"	pointer
;	O
const	O
char	O
doc	pointer
[	O
]	O
=	O
"Send messages to syslog"	pointer
;	O
static	O
struct	O
argp_option	struct
argp_options	array
[	O
]	O
=	O
{	O
{	O
"ipv4"	pointer
,	O
'4'	O
,	O
NULL	O
,	O
0	int
,	O
"use IPv4 for logging to host"	pointer
}	O
,	O
{	O
"ipv6"	pointer
,	O
'6'	O
,	O
NULL	O
,	O
0	int
,	O
"use IPv6 with a host target"	pointer
}	O
,	O
{	O
"host"	pointer
,	O
'h'	O
,	O
"HOST"	pointer
,	O
0	int
,	O
"log to host instead of the default "	pointer
PATH_LOG	O
}	O
,	O
{	O
"source"	pointer
,	O
'S'	O
,	O
"IP"	pointer
,	O
0	int
,	O
"set source IP address"	pointer
}	O
,	O
{	O
"id"	pointer
,	O
'i'	O
,	O
"PID"	pointer
,	O
OPTION_ARG_OPTIONAL	int
,	O
"log the process id with every line"	pointer
}	O
,	O
{	O
"stderr"	pointer
,	O
's'	O
,	O
NULL	O
,	O
0	int
,	O
"copy the message to stderr"	pointer
}	O
,	O
{	O
"file"	pointer
,	O
'f'	O
,	O
"FILE"	pointer
,	O
0	int
,	O
"log the content of FILE"	pointer
}	O
,	O
{	O
"priority"	pointer
,	O
'p'	O
,	O
"PRI"	pointer
,	O
0	int
,	O
"log with priority PRI"	pointer
}	O
,	O
{	O
"tag"	pointer
,	O
't'	O
,	O
"TAG"	pointer
,	O
0	int
,	O
"prepend every line with TAG"	pointer
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'4'	O
:	O
host_family	int
=	O
AF_INET	O
;	O
break	O
;	O
case	O
'6'	O
:	O
host_family	int
=	O
AF_INET6	O
;	O
break	O
;	O
case	O
'h'	O
:	O
host	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'S'	O
:	O
source	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'i'	O
:	O
logflags	int
|=	O
LOG_PID	int
;	O
if	O
(	O
arg	pointer
)	O
pidstr	pointer
=	O
arg	pointer
;	O
else	O
{	O
char	O
buf	array
[	O
INT_BUFSIZE_BOUND	O
(	O
uintmax_t	long
)	O
]	O
;	O
arg	pointer
=	O
umaxtostr	function
(	O
getpid	function
(	O
)	O
,	O
buf	array
)	O
;	O
pidstr	pointer
=	O
xstrdup	function
(	O
arg	pointer
)	O
;	O
}	O
break	O
;	O
case	O
's'	O
:	O
logflags	int
|=	O
LOG_PERROR	int
;	O
break	O
;	O
case	O
'f'	O
:	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-"	pointer
)	O
&&	O
freopen	function
(	O
arg	pointer
,	O
"r"	pointer
,	O
stdin	pointer
)	O
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"%s"	pointer
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'p'	O
:	O
pri	int
=	O
parse_level	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
tag	pointer
=	O
arg	pointer
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
argp_options	array
,	O
parse_opt	function
,	O
args_doc	pointer
,	O
doc	pointer
}	O
;	O
const	O
char	O
*	O
program_authors	array
[	O
]	O
=	O
{	O
"Sergey Poznyakoff"	pointer
,	O
NULL	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
index	function
;	O
char	O
*	O
buf	array
=	O
NULL	O
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"logger"	pointer
,	O
program_authors	array
)	O
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
&	O
index	function
,	O
NULL	O
)	O
;	O
argc	int
-=	O
index	function
;	O
argv	pointer
+=	O
index	function
;	O
if	O
(	O
!	O
tag	pointer
)	O
{	O
tag	pointer
=	O
getenv	function
(	O
"USER"	pointer
)	O
;	O
if	O
(	O
!	O
tag	pointer
)	O
{	O
struct	O
passwd	struct
*	O
pw	pointer
=	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
if	O
(	O
pw	pointer
)	O
tag	pointer
=	O
xstrdup	function
(	O
pw	pointer
->	O
pw_name	pointer
)	O
;	O
else	O
tag	pointer
=	O
xstrdup	function
(	O
"none"	pointer
)	O
;	O
}	O
}	O
open_socket	function
(	O
)	O
;	O
if	O
(	O
argc	int
>	O
0	int
)	O
{	O
int	O
i	int
;	O
size_t	long
len	long
=	O
0	int
;	O
char	O
*	O
p	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
len	long
+=	O
strlen	function
(	O
argv	pointer
[	O
i	int
]	O
)	O
+	O
1	int
;	O
buf	array
=	O
xmalloc	function
(	O
len	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
p	pointer
=	O
buf	array
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
len	long
=	O
strlen	function
(	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
argv	pointer
[	O
i	int
]	O
,	O
len	long
)	O
;	O
p	pointer
+=	O
len	long
;	O
*	O
p	pointer
++	O
=	O
' '	O
;	O
}	O
p	pointer
[	O
-	O
1	int
]	O
=	O
0	int
;	O
send_to_syslog	function
(	O
buf	array
)	O
;	O
}	O
else	O
{	O
size_t	long
size	long
=	O
0	int
;	O
while	O
(	O
getline	function
(	O
&	O
buf	array
,	O
&	O
size	long
,	O
stdin	pointer
)	O
>	O
0	int
)	O
send_to_syslog	function
(	O
buf	array
)	O
;	O
}	O
free	function
(	O
buf	array
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
