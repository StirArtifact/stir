extern	O
char	O
sbstmp	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
extern	O
int	O
sbslineno	int
;	O
void	O
glmtrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
int	O
sincr	int
;	O
static	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
modelstart	int
;	O
static	O
char	O
response	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
resplen	int
;	O
int	O
e	int
;	O
int	O
lsmeans	int
;	O
static	O
char	O
test	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
level	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
term	int
;	O
int	O
nomatch	int
;	O
int	O
classstart	int
;	O
int	O
nbyvars	int
;	O
int	O
classvar	int
;	O
int	O
c	int
;	O
static	O
char	O
classname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
unsigned	O
int	O
contrastterm	int
;	O
int	O
*	O
coeff	pointer
;	O
int	O
ncoeff	int
;	O
int	O
minus	int
;	O
int	O
coeffsum	int
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
if	O
(	O
(	O
modelstart	int
=	O
findstatement	function
(	O
step	pointer
,	O
"model"	pointer
)	O
)	O
)	O
resplen	int
=	O
linecpy	function
(	O
response	array
,	O
step	pointer
+	O
modelstart	int
)	O
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing model statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
(	O
classstart	int
=	O
findstatement	function
(	O
step	pointer
,	O
"class"	pointer
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing class statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"by"	pointer
)	O
)	O
)	O
{	O
for	O
(	O
nbyvars	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
nbyvars	int
++	O
)	O
s	int
+=	O
linecpy	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
}	O
else	O
nbyvars	int
=	O
0	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"sort(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"class"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"means(\"%s.srt\", \"%s\", \"N MEAN VAR\", \""	pointer
,	O
setname	pointer
,	O
response	array
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"class"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"effects(\"%s.srt.mns\", \"%s "	pointer
,	O
setname	pointer
,	O
response	array
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"class"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
=	O
modelstart	int
+	O
resplen	int
+	O
1	int
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
'='	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing = in model statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
s	int
+=	O
2	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'/'	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'\n'	O
)	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
else	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
(	O
lsmeans	int
=	O
findstatement	function
(	O
step	pointer
,	O
"lsmeans"	pointer
)	O
)	O
)	O
{	O
if	O
(	O
getoption	function
(	O
step	pointer
+	O
lsmeans	int
,	O
"e"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
1	int
)	O
)	O
lsmeans	int
=	O
0	int
;	O
else	O
{	O
for	O
(	O
s	int
=	O
lsmeans	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'/'	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
;	O
test	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'/'	O
)	O
{	O
for	O
(	O
s	int
+=	O
2	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
test	array
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
upper	function
(	O
test	array
)	O
;	O
if	O
(	O
strcmp	function
(	O
test	array
,	O
"DUNNETT"	pointer
)	O
&&	O
strcmp	function
(	O
test	array
,	O
"TUKEY"	pointer
)	O
&&	O
strcmp	function
(	O
test	array
,	O
"LSD"	pointer
)	O
)	O
test	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
if	O
(	O
!	O
test	array
[	O
0	int
]	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: no test specified in lsmeans statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
+	O
lsmeans	int
,	O
"alpha"	pointer
,	O
level	array
,	O
1	int
)	O
)	O
strcpy	function
(	O
level	array
,	O
"0.05"	pointer
)	O
;	O
}	O
}	O
e	int
=	O
modelstart	int
+	O
resplen	int
+	O
3	int
;	O
while	O
(	O
step	pointer
[	O
e	int
]	O
&&	O
step	pointer
[	O
e	int
]	O
!=	O
'/'	O
&&	O
step	pointer
[	O
e	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"ftest(\"%s.srt.mns.con\", \"%s "	pointer
,	O
setname	pointer
,	O
response	array
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"class"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
term	int
=	O
e	int
;	O
while	O
(	O
step	pointer
[	O
e	int
]	O
&&	O
step	pointer
[	O
e	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
e	int
]	O
,	O
dapfile	pointer
)	O
;	O
e	int
++	O
;	O
if	O
(	O
step	pointer
[	O
e	int
]	O
==	O
'\n'	O
&&	O
step	pointer
[	O
e	int
+	O
1	int
]	O
==	O
'*'	O
)	O
{	O
putc	function
(	O
'*'	O
,	O
dapfile	pointer
)	O
;	O
e	int
+=	O
3	int
;	O
term	int
=	O
0	int
;	O
}	O
}	O
fputs	function
(	O
"\", \"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
e	int
++	O
;	O
if	O
(	O
lsmeans	int
&&	O
term	int
)	O
{	O
for	O
(	O
s	int
=	O
lsmeans	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'/'	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
&&	O
(	O
nomatch	int
=	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
step	pointer
+	O
term	int
)	O
)	O
;	O
s	int
+=	O
linecpy	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
nomatch	int
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"lsmeans(\"%s.srt.mns.tst\", \"%s\", %s, \"%s "	pointer
,	O
setname	pointer
,	O
test	array
,	O
level	array
,	O
response	array
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"class"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
s	int
=	O
term	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
;	O
s	int
++	O
)	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \"s12\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
}	O
}	O
for	O
(	O
s	int
=	O
0	int
;	O
(	O
sincr	int
=	O
findstatement	function
(	O
step	pointer
+	O
s	int
,	O
"test"	pointer
)	O
)	O
;	O
)	O
{	O
s	int
+=	O
sincr	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"ftest(\"%s.srt.mns.con\", \"%s "	pointer
,	O
setname	pointer
,	O
response	array
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"class"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
!	O
step	pointer
[	O
s	int
]	O
||	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"h"	pointer
)	O
||	O
linecmp	function
(	O
step	pointer
+	O
s	int
+	O
2	int
,	O
"="	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing h= in test statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
s	int
+=	O
4	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
(	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"e"	pointer
)	O
||	O
(	O
step	pointer
[	O
s	int
+	O
2	int
]	O
&&	O
linecmp	function
(	O
step	pointer
+	O
s	int
+	O
2	int
,	O
"="	pointer
)	O
)	O
)	O
;	O
s	int
++	O
)	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
!	O
step	pointer
[	O
s	int
]	O
||	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"e"	pointer
)	O
||	O
linecmp	function
(	O
step	pointer
+	O
s	int
+	O
2	int
,	O
"="	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing e= in test statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
4	int
;	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
';'	O
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: extra characters after e=<effect> in test statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
coeff	pointer
=	O
(	O
int	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
int	O
)	O
*	O
strlen	function
(	O
step	pointer
)	O
/	O
2	int
)	O
;	O
for	O
(	O
s	int
=	O
0	int
;	O
(	O
sincr	int
=	O
findstatement	function
(	O
step	pointer
+	O
s	int
,	O
"contrast"	pointer
)	O
)	O
;	O
)	O
{	O
s	int
+=	O
sincr	int
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
'"'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing \"LABEL\" in contrast statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"title(\""	pointer
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
s	int
++	O
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'"'	O
;	O
s	int
++	O
)	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
'"'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: no terminating \" in contrast statement label in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
2	int
;	O
for	O
(	O
contrastterm	int
=	O
0x1	int
,	O
e	int
=	O
classstart	int
,	O
classvar	int
=	O
0	int
;	O
step	pointer
[	O
e	int
]	O
&&	O
step	pointer
[	O
e	int
]	O
!=	O
';'	O
;	O
contrastterm	int
=	O
(	O
contrastterm	int
<<	O
1	int
)	O
,	O
classvar	int
++	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
step	pointer
+	O
e	int
)	O
)	O
break	O
;	O
else	O
e	int
+=	O
linecpy	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
step	pointer
+	O
e	int
)	O
+	O
1	int
;	O
}	O
classvar	int
++	O
;	O
s	int
+=	O
linecpy	function
(	O
classname	array
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
for	O
(	O
ncoeff	int
=	O
0	int
,	O
coeffsum	int
=	O
0	int
;	O
num	function
(	O
step	pointer
[	O
s	int
]	O
)	O
||	O
step	pointer
[	O
s	int
]	O
==	O
'+'	O
||	O
step	pointer
[	O
s	int
]	O
==	O
'-'	O
;	O
ncoeff	int
++	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'+'	O
||	O
step	pointer
[	O
s	int
]	O
==	O
'-'	O
)	O
{	O
minus	int
=	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'-'	O
)	O
;	O
s	int
+=	O
2	int
;	O
}	O
else	O
minus	int
=	O
0	int
;	O
if	O
(	O
sscanf	function
(	O
step	pointer
+	O
s	int
,	O
"%d"	pointer
,	O
coeff	pointer
+	O
ncoeff	int
)	O
!=	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: invalid coefficient in contrast statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
minus	int
)	O
coeff	pointer
[	O
ncoeff	int
]	O
=	O
-	O
coeff	pointer
[	O
ncoeff	int
]	O
;	O
coeffsum	int
+=	O
coeff	pointer
[	O
ncoeff	int
]	O
;	O
s	int
+=	O
linecpy	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
}	O
if	O
(	O
coeffsum	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: coefficients sum to nonzero in contrast statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'/'	O
)	O
s	int
+=	O
2	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"inset(\"%s.srt.mns.con\")\n{\n"	pointer
,	O
setname	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"char _type_[9];\ndouble %s;\nint _n_, _term_;\n"	pointer
,	O
response	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"int _partv_[%d];\n"	pointer
,	O
nbyvars	int
+	O
classvar	int
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"int _c_, _more_, _contr1_;\ndouble _coeff_[%d];\n"	pointer
,	O
ncoeff	int
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"outset(\"%s.srt.mns.con.con\", \"\");\n"	pointer
,	O
setname	pointer
)	O
;	O
fputs	function
(	O
"dap_list(\""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
e	int
=	O
classstart	int
,	O
c	int
=	O
0	int
;	O
c	int
<	O
classvar	int
;	O
c	int
++	O
)	O
e	int
+=	O
putlines	function
(	O
step	pointer
+	O
e	int
,	O
dapfile	pointer
,	O
'\n'	O
)	O
+	O
1	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"\", _partv_, %d);\n"	pointer
,	O
nbyvars	int
+	O
classvar	int
)	O
;	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
ncoeff	int
;	O
c	int
++	O
)	O
fprintf	function
(	O
dapfile	pointer
,	O
"_coeff_[%d] = %d.0;\n"	pointer
,	O
c	int
,	O
coeff	pointer
[	O
c	int
]	O
)	O
;	O
fputs	function
(	O
"for (_c_ = 0, _contr1_ = 1, _more_ = step(); _more_; )\n{\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"if (dap_newpart(_partv_, %d))\n_c_ = 0;\n"	pointer
,	O
nbyvars	int
+	O
classvar	int
-	O
1	int
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"else if (dap_newpart(_partv_, %d))\n_c_++;\n"	pointer
,	O
nbyvars	int
+	O
classvar	int
)	O
;	O
fputs	function
(	O
"output();\nstep();\noutput();\nstep();\noutput();\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"while ((_more_ = step()))\n{\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"if (!strcmp(_type_, \"ERROR\"))\noutput();\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"else if (!strcmp(_type_, \"CONTR\"))\n{\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"if (_term_ == %d)\n{\n"	pointer
,	O
contrastterm	int
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"if (_contr1_)\n{\n_contr1_ = 0;\n_term_ = %d;\n"	pointer
,	O
contrastterm	int
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"if (_c_ < %d)\n"	pointer
,	O
ncoeff	int
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"%s = _coeff_[_c_];\nelse\n%s = 0.0;\n"	pointer
,	O
response	array
,	O
response	array
)	O
;	O
fputs	function
(	O
"output();\n}\n}\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"else\noutput();\n}\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"else if (!strcmp(_type_, \"LSMEAN\"))\noutput();\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"else\n\{\n_contr1_ = 1;\nbreak;\n}\n}\n}\n}\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"ftest(\"%s.srt.mns.con.con\", \"%s "	pointer
,	O
setname	pointer
,	O
response	array
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"class"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"\", \"%s\", \""	pointer
,	O
classname	array
)	O
;	O
if	O
(	O
(	O
sincr	int
=	O
getoption	function
(	O
step	pointer
+	O
s	int
,	O
"e"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
1	int
)	O
)	O
)	O
{	O
s	int
+=	O
sincr	int
;	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
';'	O
)	O
;	O
}	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
";"	pointer
)	O
)	O
s	int
+=	O
2	int
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; at end of contrast statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\ntitle(NULL);\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
free	function
(	O
coeff	pointer
)	O
;	O
while	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
+	O
lsmeans	int
,	O
"lsmeans"	pointer
)	O
)	O
)	O
{	O
lsmeans	int
+=	O
s	int
;	O
e	int
=	O
lsmeans	int
+	O
getoption	function
(	O
step	pointer
+	O
lsmeans	int
,	O
"e"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
+	O
lsmeans	int
,	O
"alpha"	pointer
,	O
level	array
,	O
1	int
)	O
)	O
strcpy	function
(	O
level	array
,	O
"0.05"	pointer
)	O
;	O
test	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
s	int
=	O
lsmeans	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'/'	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'/'	O
)	O
{	O
for	O
(	O
s	int
+=	O
2	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
test	array
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
upper	function
(	O
test	array
)	O
;	O
if	O
(	O
strcmp	function
(	O
test	array
,	O
"DUNNETT"	pointer
)	O
&&	O
strcmp	function
(	O
test	array
,	O
"TUKEY"	pointer
)	O
&&	O
strcmp	function
(	O
test	array
,	O
"LSD"	pointer
)	O
)	O
test	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
if	O
(	O
!	O
test	array
[	O
0	int
]	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: no test specified in lsmeans statement in proc glm\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
upper	function
(	O
test	array
)	O
;	O
for	O
(	O
s	int
=	O
lsmeans	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'/'	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"ftest(\"%s.srt.mns.con\", \"%s "	pointer
,	O
setname	pointer
,	O
response	array
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"class"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
term	int
=	O
s	int
;	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
'\n'	O
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
e	int
>	O
lsmeans	int
)	O
{	O
for	O
(	O
s	int
=	O
e	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
&&	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"alpha"	pointer
)	O
&&	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"dunnett"	pointer
)	O
&&	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"tukey"	pointer
)	O
&&	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"lsd"	pointer
)	O
;	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
'\n'	O
)	O
+	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"lsmeans(\"%s.srt.mns.tst\", \"%s\", %s, \"%s "	pointer
,	O
setname	pointer
,	O
test	array
,	O
level	array
,	O
response	array
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"class"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
=	O
term	int
+	O
putlines	function
(	O
step	pointer
+	O
term	int
,	O
dapfile	pointer
,	O
'\n'	O
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \"s12\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
}	O
}	O
void	O
logistictrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
char	O
outname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"logreg(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"model"	pointer
)	O
)	O
)	O
{	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
'\n'	O
)	O
+	O
1	int
;	O
putc	function
(	O
'/'	O
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'/'	O
)	O
{	O
s	int
+=	O
2	int
;	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
'\n'	O
)	O
+	O
1	int
;	O
}	O
else	O
putc	function
(	O
'1'	O
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'='	O
)	O
{	O
fputs	function
(	O
"\", \"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
2	int
;	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
';'	O
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", NULL, 0.95);\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing = in model statement in proc logistic.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing model statement in proc logistic.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
getoption	function
(	O
step	pointer
,	O
"outest"	pointer
,	O
outname	array
,	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"dataset(\"%s.cov\", \"%s\", \"RENAME\");\n"	pointer
,	O
setname	pointer
,	O
outname	array
)	O
;	O
strcpy	function
(	O
sbstmp	array
,	O
outname	array
)	O
;	O
}	O
}	O
void	O
npar1waytrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
char	O
classname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"class"	pointer
)	O
)	O
)	O
linecpy	function
(	O
classname	array
,	O
step	pointer
+	O
s	int
)	O
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing class statement in proc npar1way.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"var"	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"nonparam(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
fprintf	function
(	O
dapfile	pointer
,	O
" %s\", \""	pointer
,	O
classname	array
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; at end of proc npar1way.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing var statement in proc npar1way.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
void	O
regtrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
char	O
outname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
isadd	int
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
if	O
(	O
findstatement	function
(	O
step	pointer
,	O
"plot"	pointer
)	O
)	O
{	O
if	O
(	O
isby	function
(	O
step	pointer
)	O
>=	O
0	int
)	O
countparts	function
(	O
step	pointer
,	O
setname	pointer
,	O
dapfile	pointer
)	O
;	O
else	O
fputs	function
(	O
"_sbspictcnt_[_sbsnpicts_] = 1;\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"_sbspict_[_sbsnpicts_] = plotlinreg(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"model"	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
s	int
++	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'='	O
)	O
{	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
s	int
+=	O
2	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
;	O
s	int
++	O
)	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
+	O
1	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: only one explanatory variable allowed in model statement in proc reg with plotting\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"\", \"==\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", _sbspictcnt_[_sbsnpicts_], 0.95);\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"_sbspictpage_[_sbsnpicts_++] = 4;\n"	pointer
,	O
dapfile	pointer
)	O
;	O
sbshaspicts	int
=	O
1	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: only one response variable allowed in model statement in proc reg with plotting\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing model statement in proc reg.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"linreg(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"model"	pointer
)	O
)	O
)	O
{	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
'='	O
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'='	O
)	O
{	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
!	O
(	O
isadd	int
=	O
findstatement	function
(	O
step	pointer
,	O
"add"	pointer
)	O
)	O
)	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
2	int
;	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
';'	O
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
isadd	int
)	O
{	O
copylist	function
(	O
step	pointer
,	O
"add"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", NULL, 0.95);\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing = in model statement in proc reg.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing model statement in proc reg.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
getoption	function
(	O
step	pointer
,	O
"outest"	pointer
,	O
outname	array
,	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"dataset(\"%s.cov\", \"%s\", \"RENAME\");\n"	pointer
,	O
setname	pointer
,	O
outname	array
)	O
;	O
strcpy	function
(	O
sbstmp	array
,	O
outname	array
)	O
;	O
}	O
}	O
void	O
daptrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
int	O
brace	int
;	O
s	int
=	O
0	int
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: no options allowed for proc dap\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'{'	O
)	O
{	O
fputs	function
(	O
"{\n"	pointer
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
s	int
+=	O
2	int
,	O
brace	int
=	O
1	int
;	O
brace	int
&&	O
step	pointer
[	O
s	int
]	O
;	O
s	int
++	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'\n'	O
)	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
else	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
';'	O
||	O
step	pointer
[	O
s	int
]	O
==	O
'{'	O
||	O
step	pointer
[	O
s	int
]	O
==	O
'}'	O
)	O
putc	function
(	O
'\n'	O
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'{'	O
)	O
brace	int
++	O
;	O
else	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'}'	O
)	O
--	O
brace	int
;	O
}	O
if	O
(	O
brace	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing } in proc dap\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
putc	function
(	O
'\n'	O
,	O
dapfile	pointer
)	O
;	O
}	O
else	O
{	O
s	int
+=	O
putlines	function
(	O
step	pointer
+	O
s	int
,	O
dapfile	pointer
,	O
';'	O
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; in proc dap\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
";\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
}	O
void	O
importtrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
int	O
brace	int
;	O
int	O
start	int
;	O
int	O
resplen	int
;	O
int	O
replace	int
=	O
0	int
;	O
static	O
char	O
delimiter	char
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
datafile	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
dbms	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
strreplace	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
getnames	array
[	O
4	int
]	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"out"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"datafile"	pointer
,	O
datafile	array
,	O
1	int
)	O
)	O
strcpy	function
(	O
datafile	array
,	O
sbstmp	array
)	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"dbms"	pointer
,	O
dbms	array
,	O
1	int
)	O
)	O
strcpy	function
(	O
dbms	array
,	O
sbstmp	array
)	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"delimiter"	pointer
,	O
delimiter	char
,	O
1	int
)	O
)	O
strcpy	function
(	O
delimiter	char
,	O
""	pointer
)	O
;	O
else	O
{	O
if	O
(	O
delimiter	char
[	O
0	int
]	O
==	O
'\''	O
)	O
delimiter	char
[	O
0	int
]	O
=	O
'"'	O
;	O
if	O
(	O
delimiter	char
[	O
strlen	function
(	O
delimiter	char
)	O
-	O
1	int
]	O
==	O
'\''	O
)	O
delimiter	char
[	O
strlen	function
(	O
delimiter	char
)	O
-	O
1	int
]	O
=	O
'"'	O
;	O
}	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"getnames"	pointer
)	O
)	O
)	O
{	O
int	O
i	int
=	O
8	int
;	O
while	O
(	O
step	pointer
[	O
s	int
+	O
i	int
]	O
!=	O
'n'	O
&&	O
step	pointer
[	O
s	int
+	O
i	int
]	O
!=	O
'y'	O
&&	O
step	pointer
[	O
s	int
+	O
i	int
]	O
!=	O
';'	O
&&	O
step	pointer
[	O
s	int
+	O
i	int
]	O
!=	O
'\0'	O
)	O
i	int
++	O
;	O
if	O
(	O
step	pointer
[	O
s	int
+	O
i	int
]	O
==	O
'n'	O
||	O
step	pointer
[	O
s	int
+	O
i	int
]	O
==	O
'N'	O
)	O
strcpy	function
(	O
getnames	array
,	O
"no"	pointer
)	O
;	O
else	O
strcpy	function
(	O
getnames	array
,	O
"yes"	pointer
)	O
;	O
}	O
int	O
getnam	int
=	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
getnames	array
,	O
"no"	pointer
)	O
==	O
0	int
)	O
getnam	int
=	O
0	int
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"replace"	pointer
,	O
strreplace	array
,	O
0	int
)	O
)	O
replace	int
=	O
1	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"import(\"%s\", %s , \"%s\",%s, %i,%i);\n"	pointer
,	O
setname	pointer
,	O
datafile	array
,	O
dbms	array
,	O
delimiter	char
,	O
replace	int
,	O
getnam	int
)	O
;	O
}	O
void	O
surveyselecttrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
int	O
brace	int
;	O
int	O
start	int
;	O
int	O
resplen	int
;	O
int	O
replace	int
=	O
0	int
;	O
static	O
char	O
nbtirage	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
datafile	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
method	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
strreplace	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
static	O
char	O
getnames	array
[	O
4	int
]	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"out"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
datafile	array
,	O
1	int
)	O
)	O
strcpy	function
(	O
datafile	array
,	O
sbstmp	array
)	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"method"	pointer
,	O
method	array
,	O
1	int
)	O
)	O
strcpy	function
(	O
method	array
,	O
sbstmp	array
)	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"n"	pointer
,	O
nbtirage	array
,	O
1	int
)	O
)	O
strcpy	function
(	O
nbtirage	array
,	O
"1"	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
" surveyselect(\"%s\", \"%s\" , \"%s\",%s);\n"	pointer
,	O
datafile	array
,	O
setname	pointer
,	O
method	array
,	O
nbtirage	array
)	O
;	O
}	O
