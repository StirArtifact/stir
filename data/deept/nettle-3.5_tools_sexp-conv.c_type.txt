static	O
void	O
sexp_convert_item	function
(	O
struct	O
sexp_parser	struct
*	O
parser	pointer
,	O
struct	O
sexp_compound_token	struct
*	O
token	enum
,	O
struct	O
sexp_output	struct
*	O
output	pointer
,	O
enum	O
sexp_mode	enum
mode_out	enum
,	O
unsigned	O
indent	int
)	O
{	O
if	O
(	O
mode_out	enum
==	O
SEXP_TRANSPORT	int
)	O
{	O
sexp_put_char	function
(	O
output	pointer
,	O
'{'	O
)	O
;	O
sexp_put_code_start	function
(	O
output	pointer
,	O
&	O
nettle_base64	struct
)	O
;	O
sexp_convert_item	function
(	O
parser	pointer
,	O
token	enum
,	O
output	pointer
,	O
SEXP_CANONICAL	int
,	O
0	int
)	O
;	O
sexp_put_code_end	function
(	O
output	pointer
)	O
;	O
sexp_put_char	function
(	O
output	pointer
,	O
'}'	O
)	O
;	O
}	O
else	O
switch	O
(	O
token	enum
->	O
type	enum
)	O
{	O
case	O
SEXP_LIST_END	int
:	O
die	function
(	O
"Unmatched end of list.\n"	pointer
)	O
;	O
case	O
SEXP_EOF	int
:	O
die	function
(	O
"Unexpected end of file.\n"	pointer
)	O
;	O
case	O
SEXP_CODING_END	int
:	O
die	function
(	O
"Unexpected end of coding.\n"	pointer
)	O
;	O
case	O
SEXP_LIST_START	int
:	O
{	O
unsigned	O
item	int
;	O
sexp_put_char	function
(	O
output	pointer
,	O
'('	O
)	O
;	O
for	O
(	O
item	int
=	O
0	int
;	O
sexp_parse	function
(	O
parser	pointer
,	O
token	enum
)	O
,	O
token	enum
->	O
type	enum
!=	O
SEXP_LIST_END	int
;	O
item	int
++	O
)	O
{	O
if	O
(	O
mode_out	enum
==	O
SEXP_ADVANCED	int
)	O
{	O
switch	O
(	O
item	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
token	enum
->	O
type	enum
==	O
SEXP_COMMENT	int
)	O
{	O
indent	int
=	O
output	pointer
->	O
pos	int
;	O
item	int
++	O
;	O
}	O
break	O
;	O
case	O
1	int
:	O
sexp_put_char	function
(	O
output	pointer
,	O
' '	O
)	O
;	O
indent	int
=	O
output	pointer
->	O
pos	int
;	O
break	O
;	O
default	O
:	O
sexp_put_newline	function
(	O
output	pointer
,	O
indent	int
)	O
;	O
break	O
;	O
}	O
}	O
sexp_convert_item	function
(	O
parser	pointer
,	O
token	enum
,	O
output	pointer
,	O
mode_out	enum
,	O
indent	int
)	O
;	O
}	O
sexp_put_char	function
(	O
output	pointer
,	O
')'	O
)	O
;	O
break	O
;	O
}	O
case	O
SEXP_STRING	int
:	O
sexp_put_string	function
(	O
output	pointer
,	O
mode_out	enum
,	O
&	O
token	enum
->	O
string	pointer
)	O
;	O
break	O
;	O
case	O
SEXP_DISPLAY	int
:	O
sexp_put_char	function
(	O
output	pointer
,	O
'['	O
)	O
;	O
sexp_put_string	function
(	O
output	pointer
,	O
mode_out	enum
,	O
&	O
token	enum
->	O
display	struct
)	O
;	O
sexp_put_char	function
(	O
output	pointer
,	O
']'	O
)	O
;	O
sexp_put_string	function
(	O
output	pointer
,	O
mode_out	enum
,	O
&	O
token	enum
->	O
string	pointer
)	O
;	O
break	O
;	O
case	O
SEXP_COMMENT	int
:	O
if	O
(	O
mode_out	enum
==	O
SEXP_ADVANCED	int
)	O
{	O
sexp_put_data	function
(	O
output	pointer
,	O
token	enum
->	O
string	pointer
.	O
size	long
,	O
token	enum
->	O
string	pointer
.	O
contents	pointer
)	O
;	O
sexp_put_soft_newline	function
(	O
output	pointer
,	O
indent	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
struct	O
conv_options	struct
{	O
enum	O
sexp_mode	enum
mode	enum
;	O
int	O
prefer_hex	int
;	O
int	O
once	int
;	O
int	O
lock	int
;	O
unsigned	O
width	int
;	O
const	O
struct	O
nettle_hash	struct
*	O
hash	pointer
;	O
}	O
;	O
enum	O
{	O
OPT_ONCE	int
=	O
300	int
,	O
OPT_HASH	int
,	O
OPT_LOCK	int
,	O
OPT_HELP	int
}	O
;	O
static	O
int	O
match_argument	function
(	O
const	O
char	O
*	O
given	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
!	O
strcmp	function
(	O
given	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
void	O
parse_options	function
(	O
struct	O
conv_options	struct
*	O
o	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
o	pointer
->	O
mode	enum
=	O
SEXP_ADVANCED	int
;	O
o	pointer
->	O
prefer_hex	int
=	O
0	int
;	O
o	pointer
->	O
once	int
=	O
0	int
;	O
o	pointer
->	O
lock	int
=	O
0	int
;	O
o	pointer
->	O
hash	pointer
=	O
NULL	O
;	O
o	pointer
->	O
width	int
=	O
72	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
static	O
const	O
struct	O
nettle_hash	struct
*	O
hashes	array
[	O
]	O
=	O
{	O
&	O
nettle_md5	struct
,	O
&	O
nettle_sha1	struct
,	O
&	O
nettle_sha256	struct
,	O
NULL	O
}	O
;	O
static	O
const	O
struct	O
option	struct
options	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
OPT_HELP	int
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"once"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
OPT_ONCE	int
}	O
,	O
{	O
"syntax"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"hash"	pointer
,	O
optional_argument	int
,	O
NULL	O
,	O
OPT_HASH	int
}	O
,	O
{	O
"raw-hash"	pointer
,	O
optional_argument	int
,	O
NULL	O
,	O
OPT_HASH	int
}	O
,	O
{	O
"width"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'w'	O
}	O
,	O
{	O
"lock"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
OPT_LOCK	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
int	O
c	int
;	O
int	O
option_index	int
=	O
0	int
;	O
unsigned	O
i	int
;	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"Vs:w:"	pointer
,	O
options	array
,	O
&	O
option_index	int
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
abort	function
(	O
)	O
;	O
case	O
-	O
1	int
:	O
if	O
(	O
optind	int
!=	O
argc	int
)	O
die	function
(	O
"sexp-conv: Command line takes no arguments, only options.\n"	pointer
)	O
;	O
return	O
;	O
case	O
'?'	O
:	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
case	O
'w'	O
:	O
{	O
char	O
*	O
end	pointer
;	O
int	O
width	int
=	O
strtol	function
(	O
optarg	pointer
,	O
&	O
end	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
*	O
optarg	pointer
||	O
*	O
end	pointer
||	O
width	int
<	O
0	int
)	O
die	function
(	O
"sexp-conv: Invalid width `%s'.\n"	pointer
,	O
optarg	pointer
)	O
;	O
o	pointer
->	O
width	int
=	O
width	int
;	O
break	O
;	O
}	O
case	O
's'	O
:	O
if	O
(	O
o	pointer
->	O
hash	pointer
)	O
werror	function
(	O
"sexp-conv: Combining --hash and -s usually makes no sense.\n"	pointer
)	O
;	O
if	O
(	O
match_argument	function
(	O
optarg	pointer
,	O
"advanced"	pointer
)	O
)	O
o	pointer
->	O
mode	enum
=	O
SEXP_ADVANCED	int
;	O
else	O
if	O
(	O
match_argument	function
(	O
optarg	pointer
,	O
"transport"	pointer
)	O
)	O
o	pointer
->	O
mode	enum
=	O
SEXP_TRANSPORT	int
;	O
else	O
if	O
(	O
match_argument	function
(	O
optarg	pointer
,	O
"canonical"	pointer
)	O
)	O
o	pointer
->	O
mode	enum
=	O
SEXP_CANONICAL	int
;	O
else	O
if	O
(	O
match_argument	function
(	O
optarg	pointer
,	O
"hex"	pointer
)	O
)	O
{	O
o	pointer
->	O
mode	enum
=	O
SEXP_ADVANCED	int
;	O
o	pointer
->	O
prefer_hex	int
=	O
1	int
;	O
}	O
else	O
die	function
(	O
"Available syntax variants: advanced, transport, canonical\n"	pointer
)	O
;	O
break	O
;	O
case	O
OPT_ONCE	int
:	O
o	pointer
->	O
once	int
=	O
1	int
;	O
break	O
;	O
case	O
OPT_HASH	int
:	O
o	pointer
->	O
mode	enum
=	O
SEXP_CANONICAL	int
;	O
if	O
(	O
!	O
optarg	pointer
)	O
o	pointer
->	O
hash	pointer
=	O
&	O
nettle_sha1	struct
;	O
else	O
for	O
(	O
i	int
=	O
0	int
;	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
hashes	array
[	O
i	int
]	O
)	O
die	function
(	O
"sexp_conv: Unknown hash algorithm `%s'\n"	pointer
,	O
optarg	pointer
)	O
;	O
if	O
(	O
match_argument	function
(	O
optarg	pointer
,	O
hashes	array
[	O
i	int
]	O
->	O
name	pointer
)	O
)	O
{	O
o	pointer
->	O
hash	pointer
=	O
hashes	array
[	O
i	int
]	O
;	O
break	O
;	O
}	O
}	O
break	O
;	O
case	O
OPT_LOCK	int
:	O
o	pointer
->	O
lock	int
=	O
1	int
;	O
break	O
;	O
case	O
OPT_HELP	int
:	O
printf	function
(	O
"Usage: sexp-conv [OPTION...]\n"	pointer
"  Conversion:     sexp-conv [OPTION...] <INPUT-SEXP\n"	pointer
"  Fingerprinting: sexp-conv --hash=HASH <INPUT-SEXP\n\n"	pointer
"Reads an s-expression on stdin, and outputs the same\n"	pointer
"sexp on stdout, possibly with a different syntax.\n\n"	pointer
"       --hash[=ALGORITHM]   Outputs only the hash of the expression.\n"	pointer
"                            Available hash algorithms:\n"	pointer
"                            "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
hashes	array
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
)	O
printf	function
(	O
", "	pointer
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
hashes	array
[	O
i	int
]	O
->	O
name	pointer
)	O
;	O
}	O
printf	function
(	O
" (default is sha1).\n"	pointer
"   -s, --syntax=SYNTAX      The syntax used for the output. Available\n"	pointer
"                            variants: advanced, hex, transport, canonical\n"	pointer
"       --once               Process only the first s-expression.\n"	pointer
"   -w, --width=WIDTH        Linewidth for base64 encoded data.\n"	pointer
"                            Zero means no limit.\n"	pointer
"       --lock               Lock output file.\n"	pointer
"       --raw-hash           Alias for --hash, for compatibility\n"	pointer
"                            with lsh-1.x.\n\n"	pointer
"Report bugs to "	pointer
BUG_ADDRESS	pointer
".\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
'V'	O
:	O
printf	function
(	O
"sexp-conv ("	pointer
PACKAGE_STRING	pointer
")\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
conv_options	struct
options	array
;	O
struct	O
sexp_input	struct
input	pointer
;	O
struct	O
sexp_parser	struct
parser	pointer
;	O
struct	O
sexp_compound_token	struct
token	enum
;	O
struct	O
sexp_output	struct
output	pointer
;	O
parse_options	function
(	O
&	O
options	array
,	O
argc	int
,	O
argv	pointer
)	O
;	O
sexp_input_init	function
(	O
&	O
input	pointer
,	O
stdin	pointer
)	O
;	O
sexp_parse_init	function
(	O
&	O
parser	pointer
,	O
&	O
input	pointer
,	O
SEXP_ADVANCED	int
)	O
;	O
sexp_compound_token_init	function
(	O
&	O
token	enum
)	O
;	O
sexp_output_init	function
(	O
&	O
output	pointer
,	O
stdout	pointer
,	O
options	array
.	O
width	int
,	O
options	array
.	O
prefer_hex	int
)	O
;	O
if	O
(	O
options	array
.	O
lock	int
)	O
{	O
struct	O
flock	struct
fl	struct
;	O
memset	function
(	O
&	O
fl	struct
,	O
0	int
,	O
sizeof	O
(	O
fl	struct
)	O
)	O
;	O
fl	struct
.	O
l_type	short
=	O
F_WRLCK	int
;	O
fl	struct
.	O
l_whence	short
=	O
SEEK_SET	int
;	O
fl	struct
.	O
l_start	long
=	O
0	int
;	O
fl	struct
.	O
l_len	long
=	O
0	int
;	O
if	O
(	O
fcntl	function
(	O
STDOUT_FILENO	int
,	O
F_SETLKW	int
,	O
&	O
fl	struct
)	O
==	O
-	O
1	int
)	O
die	function
(	O
"Locking output file failed: %s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
if	O
(	O
options	array
.	O
hash	pointer
)	O
{	O
void	O
*	O
ctx	pointer
=	O
xalloc	function
(	O
options	array
.	O
hash	pointer
->	O
context_size	int
)	O
;	O
sexp_output_hash_init	function
(	O
&	O
output	pointer
,	O
options	array
.	O
hash	pointer
,	O
ctx	pointer
)	O
;	O
}	O
sexp_get_char	function
(	O
&	O
input	pointer
)	O
;	O
sexp_parse	function
(	O
&	O
parser	pointer
,	O
&	O
token	enum
)	O
;	O
if	O
(	O
token	enum
.	O
type	enum
==	O
SEXP_EOF	int
)	O
{	O
if	O
(	O
options	array
.	O
once	int
)	O
die	function
(	O
"sexp-conv: No input expression.\n"	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
do	O
{	O
sexp_convert_item	function
(	O
&	O
parser	pointer
,	O
&	O
token	enum
,	O
&	O
output	pointer
,	O
options	array
.	O
mode	enum
,	O
0	int
)	O
;	O
if	O
(	O
options	array
.	O
hash	pointer
)	O
{	O
sexp_put_digest	function
(	O
&	O
output	pointer
)	O
;	O
sexp_put_newline	function
(	O
&	O
output	pointer
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
options	array
.	O
mode	enum
!=	O
SEXP_CANONICAL	int
)	O
sexp_put_newline	function
(	O
&	O
output	pointer
,	O
0	int
)	O
;	O
sexp_parse	function
(	O
&	O
parser	pointer
,	O
&	O
token	enum
)	O
;	O
}	O
while	O
(	O
!	O
options	array
.	O
once	int
&&	O
token	enum
.	O
type	enum
!=	O
SEXP_EOF	int
)	O
;	O
sexp_compound_token_clear	function
(	O
&	O
token	enum
)	O
;	O
if	O
(	O
fflush	function
(	O
output	pointer
.	O
f	pointer
)	O
<	O
0	int
)	O
die	function
(	O
"Final fflush failed: %s.\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
