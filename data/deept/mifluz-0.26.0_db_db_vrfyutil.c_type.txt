static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: db_vrfyutil.c,v 1.1 2000/06/28 16:47:01 loic Exp $"	pointer
;	O
static	O
int	O
__db_vrfy_pgset_iinc	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
db_pgno_t	int
,	O
int	O
)	O
)	O
;	O
int	O
CDB___db_vrfy_dbinfo_create	function
(	O
dbenv	pointer
,	O
pgsize	int
,	O
vdpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
u_int32_t	int
pgsize	int
;	O
VRFY_DBINFO	struct
*	O
*	O
vdpp	pointer
;	O
{	O
DB	struct
*	O
cdbp	pointer
,	O
*	O
pgdbp	pointer
,	O
*	O
pgset	pointer
;	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
int	O
ret	int
;	O
vdp	pointer
=	O
NULL	O
;	O
cdbp	pointer
=	O
pgdbp	pointer
=	O
pgset	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_calloc	function
(	O
NULL	O
,	O
1	int
,	O
sizeof	O
(	O
VRFY_DBINFO	struct
)	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
vdp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_db_create	function
(	O
&	O
cdbp	pointer
,	O
dbenv	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
cdbp	pointer
->	O
set_flags	pointer
(	O
cdbp	pointer
,	O
DB_DUP	int
|	O
DB_DUPSORT	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
cdbp	pointer
->	O
set_pagesize	pointer
(	O
cdbp	pointer
,	O
pgsize	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
cdbp	pointer
->	O
open	pointer
(	O
cdbp	pointer
,	O
NULL	O
,	O
NULL	O
,	O
DB_BTREE	int
,	O
DB_CREATE	int
,	O
0600	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_db_create	function
(	O
&	O
pgdbp	pointer
,	O
dbenv	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
pgdbp	pointer
->	O
set_pagesize	pointer
(	O
pgdbp	pointer
,	O
pgsize	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
pgdbp	pointer
->	O
open	pointer
(	O
pgdbp	pointer
,	O
NULL	O
,	O
NULL	O
,	O
DB_BTREE	int
,	O
DB_CREATE	int
,	O
0600	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_vrfy_pgset	function
(	O
dbenv	pointer
,	O
pgsize	int
,	O
&	O
pgset	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
LIST_INIT	O
(	O
&	O
vdp	pointer
->	O
subdbs	struct
)	O
;	O
LIST_INIT	O
(	O
&	O
vdp	pointer
->	O
activepips	struct
)	O
;	O
vdp	pointer
->	O
cdbp	pointer
=	O
cdbp	pointer
;	O
vdp	pointer
->	O
pgdbp	pointer
=	O
pgdbp	pointer
;	O
vdp	pointer
->	O
pgset	pointer
=	O
pgset	pointer
;	O
*	O
vdpp	pointer
=	O
vdp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
err	pointer
:	O
if	O
(	O
cdbp	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cdbp	pointer
->	O
close	pointer
(	O
cdbp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
pgdbp	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
pgdbp	pointer
->	O
close	pointer
(	O
pgdbp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
vdp	pointer
!=	O
NULL	O
)	O
CDB___os_free	function
(	O
vdp	pointer
,	O
sizeof	O
(	O
VRFY_DBINFO	struct
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_vrfy_dbinfo_destroy	function
(	O
vdp	pointer
)	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
{	O
VRFY_CHILDINFO	struct
*	O
c	pointer
,	O
*	O
d	pointer
;	O
int	O
t_ret	int
,	O
ret	int
;	O
ret	int
=	O
0	int
;	O
for	O
(	O
c	pointer
=	O
LIST_FIRST	O
(	O
&	O
vdp	pointer
->	O
subdbs	struct
)	O
;	O
c	pointer
!=	O
NULL	O
;	O
c	pointer
=	O
d	pointer
)	O
{	O
d	pointer
=	O
LIST_NEXT	O
(	O
c	pointer
,	O
links	struct
)	O
;	O
CDB___os_free	function
(	O
c	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
(	O
t_ret	int
=	O
vdp	pointer
->	O
pgdbp	pointer
->	O
close	pointer
(	O
vdp	pointer
->	O
pgdbp	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
if	O
(	O
(	O
t_ret	int
=	O
vdp	pointer
->	O
cdbp	pointer
->	O
close	pointer
(	O
vdp	pointer
->	O
cdbp	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
if	O
(	O
(	O
t_ret	int
=	O
vdp	pointer
->	O
pgset	pointer
->	O
close	pointer
(	O
vdp	pointer
->	O
pgset	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
DB_ASSERT	O
(	O
LIST_FIRST	O
(	O
&	O
vdp	pointer
->	O
activepips	struct
)	O
==	O
NULL	O
)	O
;	O
CDB___os_free	function
(	O
vdp	pointer
,	O
sizeof	O
(	O
VRFY_DBINFO	struct
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_vrfy_getpageinfo	function
(	O
vdp	pointer
,	O
pgno	int
,	O
pipp	pointer
)	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
VRFY_PAGEINFO	struct
*	O
*	O
pipp	pointer
;	O
{	O
DBT	struct
key	struct
,	O
data	pointer
;	O
DB	struct
*	O
pgdbp	pointer
;	O
VRFY_PAGEINFO	struct
*	O
pip	pointer
;	O
int	O
ret	int
;	O
for	O
(	O
pip	pointer
=	O
LIST_FIRST	O
(	O
&	O
vdp	pointer
->	O
activepips	struct
)	O
;	O
pip	pointer
!=	O
NULL	O
;	O
pip	pointer
=	O
LIST_NEXT	O
(	O
pip	pointer
,	O
links	struct
)	O
)	O
if	O
(	O
pip	pointer
->	O
pgno	int
==	O
pgno	int
)	O
goto	O
found	O
;	O
pgdbp	pointer
=	O
vdp	pointer
->	O
pgdbp	pointer
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
F_SET	O
(	O
&	O
data	pointer
,	O
DB_DBT_MALLOC	int
)	O
;	O
key	struct
.	O
data	pointer
=	O
&	O
pgno	int
;	O
key	struct
.	O
size	int
=	O
sizeof	O
(	O
db_pgno_t	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
pgdbp	pointer
->	O
get	pointer
(	O
pgdbp	pointer
,	O
NULL	O
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
0	int
)	O
)	O
==	O
0	int
)	O
{	O
DB_ASSERT	O
(	O
data	pointer
.	O
size	int
=	O
sizeof	O
(	O
VRFY_PAGEINFO	struct
)	O
)	O
;	O
pip	pointer
=	O
data	pointer
.	O
data	pointer
;	O
DB_ASSERT	O
(	O
pip	pointer
->	O
pi_refcount	int
==	O
0	int
)	O
;	O
LIST_INSERT_HEAD	O
(	O
&	O
vdp	pointer
->	O
activepips	struct
,	O
pip	pointer
,	O
links	struct
)	O
;	O
goto	O
found	O
;	O
}	O
else	O
if	O
(	O
ret	int
!=	O
DB_NOTFOUND	O
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_vrfy_pageinfo_create	function
(	O
&	O
pip	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
LIST_INSERT_HEAD	O
(	O
&	O
vdp	pointer
->	O
activepips	struct
,	O
pip	pointer
,	O
links	struct
)	O
;	O
found	O
:	O
pip	pointer
->	O
pi_refcount	int
++	O
;	O
*	O
pipp	pointer
=	O
pip	pointer
;	O
DB_ASSERT	O
(	O
pip	pointer
->	O
pi_refcount	int
>	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_vrfy_putpageinfo	function
(	O
vdp	pointer
,	O
pip	pointer
)	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
VRFY_PAGEINFO	struct
*	O
pip	pointer
;	O
{	O
DBT	struct
key	struct
,	O
data	pointer
;	O
DB	struct
*	O
pgdbp	pointer
;	O
VRFY_PAGEINFO	struct
*	O
p	pointer
;	O
int	O
ret	int
;	O
if	O
(	O
--	O
pip	pointer
->	O
pi_refcount	int
>	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
pgdbp	pointer
=	O
vdp	pointer
->	O
pgdbp	pointer
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
key	struct
.	O
data	pointer
=	O
&	O
pip	pointer
->	O
pgno	int
;	O
key	struct
.	O
size	int
=	O
sizeof	O
(	O
db_pgno_t	int
)	O
;	O
data	pointer
.	O
data	pointer
=	O
pip	pointer
;	O
data	pointer
.	O
size	int
=	O
sizeof	O
(	O
VRFY_PAGEINFO	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
pgdbp	pointer
->	O
put	pointer
(	O
pgdbp	pointer
,	O
NULL	O
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
for	O
(	O
p	pointer
=	O
LIST_FIRST	O
(	O
&	O
vdp	pointer
->	O
activepips	struct
)	O
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
LIST_NEXT	O
(	O
p	pointer
,	O
links	struct
)	O
)	O
if	O
(	O
p	pointer
==	O
pip	pointer
)	O
{	O
DB_ASSERT	O
(	O
p	pointer
->	O
pi_refcount	int
==	O
0	int
)	O
;	O
LIST_REMOVE	O
(	O
p	pointer
,	O
links	struct
)	O
;	O
break	O
;	O
}	O
DB_ASSERT	O
(	O
pip	pointer
->	O
pi_refcount	int
==	O
0	int
)	O
;	O
CDB___os_free	function
(	O
pip	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_vrfy_pgset	function
(	O
dbenv	pointer
,	O
pgsize	int
,	O
dbpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
u_int32_t	int
pgsize	int
;	O
DB	struct
*	O
*	O
dbpp	pointer
;	O
{	O
DB	struct
*	O
dbp	pointer
;	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_db_create	function
(	O
&	O
dbp	pointer
,	O
dbenv	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
set_pagesize	pointer
(	O
dbp	pointer
,	O
pgsize	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
open	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
NULL	O
,	O
DB_BTREE	int
,	O
DB_CREATE	int
,	O
0600	int
)	O
)	O
==	O
0	int
)	O
*	O
dbpp	pointer
=	O
dbp	pointer
;	O
else	O
err	pointer
:	O
(	O
void	O
)	O
dbp	pointer
->	O
close	pointer
(	O
dbp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_vrfy_pgset_get	function
(	O
dbp	pointer
,	O
pgno	int
,	O
valp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
int	O
*	O
valp	pointer
;	O
{	O
DBT	struct
key	struct
,	O
data	pointer
;	O
int	O
ret	int
,	O
val	int
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
key	struct
.	O
data	pointer
=	O
&	O
pgno	int
;	O
key	struct
.	O
size	int
=	O
sizeof	O
(	O
db_pgno_t	int
)	O
;	O
data	pointer
.	O
data	pointer
=	O
&	O
val	int
;	O
data	pointer
.	O
ulen	int
=	O
sizeof	O
(	O
int	O
)	O
;	O
F_SET	O
(	O
&	O
data	pointer
,	O
DB_DBT_USERMEM	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
get	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
0	int
)	O
)	O
==	O
0	int
)	O
{	O
DB_ASSERT	O
(	O
data	pointer
.	O
size	int
=	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
memcpy	function
(	O
&	O
val	int
,	O
data	pointer
.	O
data	pointer
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
ret	int
==	O
DB_NOTFOUND	O
)	O
val	int
=	O
0	int
;	O
else	O
return	O
(	O
ret	int
)	O
;	O
*	O
valp	pointer
=	O
val	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_vrfy_pgset_inc	function
(	O
dbp	pointer
,	O
pgno	int
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
{	O
return	O
(	O
__db_vrfy_pgset_iinc	function
(	O
dbp	pointer
,	O
pgno	int
,	O
1	int
)	O
)	O
;	O
}	O
int	O
CDB___db_vrfy_pgset_dec	function
(	O
dbp	pointer
,	O
pgno	int
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
{	O
return	O
(	O
__db_vrfy_pgset_iinc	function
(	O
dbp	pointer
,	O
pgno	int
,	O
-	O
1	int
)	O
)	O
;	O
}	O
static	O
int	O
__db_vrfy_pgset_iinc	function
(	O
dbp	pointer
,	O
pgno	int
,	O
i	int
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
int	O
i	int
;	O
{	O
DBT	struct
key	struct
,	O
data	pointer
;	O
int	O
ret	int
;	O
int	O
val	int
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
val	int
=	O
0	int
;	O
key	struct
.	O
data	pointer
=	O
&	O
pgno	int
;	O
key	struct
.	O
size	int
=	O
sizeof	O
(	O
db_pgno_t	int
)	O
;	O
data	pointer
.	O
data	pointer
=	O
&	O
val	int
;	O
data	pointer
.	O
ulen	int
=	O
sizeof	O
(	O
int	O
)	O
;	O
F_SET	O
(	O
&	O
data	pointer
,	O
DB_DBT_USERMEM	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
get	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
0	int
)	O
)	O
==	O
0	int
)	O
{	O
DB_ASSERT	O
(	O
data	pointer
.	O
size	int
=	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
memcpy	function
(	O
&	O
val	int
,	O
data	pointer
.	O
data	pointer
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
ret	int
!=	O
DB_NOTFOUND	O
)	O
return	O
(	O
ret	int
)	O
;	O
data	pointer
.	O
size	int
=	O
sizeof	O
(	O
int	O
)	O
;	O
val	int
+=	O
i	int
;	O
return	O
(	O
dbp	pointer
->	O
put	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
0	int
)	O
)	O
;	O
}	O
int	O
CDB___db_vrfy_pgset_next	function
(	O
dbc	pointer
,	O
pgnop	pointer
)	O
DBC	struct
*	O
dbc	pointer
;	O
db_pgno_t	int
*	O
pgnop	pointer
;	O
{	O
DBT	struct
key	struct
,	O
data	pointer
;	O
db_pgno_t	int
pgno	int
;	O
int	O
ret	int
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
F_SET	O
(	O
&	O
data	pointer
,	O
DB_DBT_USERMEM	int
|	O
DB_DBT_PARTIAL	int
)	O
;	O
F_SET	O
(	O
&	O
key	struct
,	O
DB_DBT_USERMEM	int
)	O
;	O
key	struct
.	O
data	pointer
=	O
&	O
pgno	int
;	O
key	struct
.	O
ulen	int
=	O
sizeof	O
(	O
db_pgno_t	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbc	pointer
->	O
c_get	pointer
(	O
dbc	pointer
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
DB_NEXT	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
DB_ASSERT	O
(	O
key	struct
.	O
size	int
==	O
sizeof	O
(	O
db_pgno_t	int
)	O
)	O
;	O
*	O
pgnop	pointer
=	O
pgno	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_vrfy_childcursor	function
(	O
vdp	pointer
,	O
dbcp	pointer
)	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
DBC	struct
*	O
*	O
dbcp	pointer
;	O
{	O
DB	struct
*	O
cdbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
int	O
ret	int
;	O
cdbp	pointer
=	O
vdp	pointer
->	O
cdbp	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
cdbp	pointer
->	O
cursor	pointer
(	O
cdbp	pointer
,	O
NULL	O
,	O
&	O
dbc	pointer
,	O
0	int
)	O
)	O
==	O
0	int
)	O
*	O
dbcp	pointer
=	O
dbc	pointer
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_vrfy_childput	function
(	O
vdp	pointer
,	O
pgno	int
,	O
cip	pointer
)	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
VRFY_CHILDINFO	struct
*	O
cip	pointer
;	O
{	O
DBT	struct
key	struct
,	O
data	pointer
;	O
DB	struct
*	O
cdbp	pointer
;	O
int	O
ret	int
;	O
cdbp	pointer
=	O
vdp	pointer
->	O
cdbp	pointer
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
key	struct
.	O
data	pointer
=	O
&	O
pgno	int
;	O
key	struct
.	O
size	int
=	O
sizeof	O
(	O
db_pgno_t	int
)	O
;	O
data	pointer
.	O
data	pointer
=	O
cip	pointer
;	O
data	pointer
.	O
size	int
=	O
sizeof	O
(	O
VRFY_CHILDINFO	struct
)	O
;	O
ret	int
=	O
cdbp	pointer
->	O
put	pointer
(	O
cdbp	pointer
,	O
NULL	O
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
DB_NODUPDATA	int
)	O
;	O
return	O
(	O
ret	int
==	O
DB_KEYEXIST	O
?	O
0	int
:	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_vrfy_ccset	function
(	O
dbc	pointer
,	O
pgno	int
,	O
cipp	pointer
)	O
DBC	struct
*	O
dbc	pointer
;	O
db_pgno_t	int
pgno	int
;	O
VRFY_CHILDINFO	struct
*	O
*	O
cipp	pointer
;	O
{	O
DBT	struct
key	struct
,	O
data	pointer
;	O
int	O
ret	int
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
key	struct
.	O
data	pointer
=	O
&	O
pgno	int
;	O
key	struct
.	O
size	int
=	O
sizeof	O
(	O
db_pgno_t	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbc	pointer
->	O
c_get	pointer
(	O
dbc	pointer
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
DB_SET	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
DB_ASSERT	O
(	O
data	pointer
.	O
size	int
==	O
sizeof	O
(	O
VRFY_CHILDINFO	struct
)	O
)	O
;	O
*	O
cipp	pointer
=	O
(	O
VRFY_CHILDINFO	struct
*	O
)	O
data	pointer
.	O
data	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_vrfy_ccnext	function
(	O
dbc	pointer
,	O
cipp	pointer
)	O
DBC	struct
*	O
dbc	pointer
;	O
VRFY_CHILDINFO	struct
*	O
*	O
cipp	pointer
;	O
{	O
DBT	struct
key	struct
,	O
data	pointer
;	O
int	O
ret	int
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbc	pointer
->	O
c_get	pointer
(	O
dbc	pointer
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
DB_NEXT_DUP	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
DB_ASSERT	O
(	O
data	pointer
.	O
size	int
==	O
sizeof	O
(	O
VRFY_CHILDINFO	struct
)	O
)	O
;	O
*	O
cipp	pointer
=	O
(	O
VRFY_CHILDINFO	struct
*	O
)	O
data	pointer
.	O
data	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_vrfy_ccclose	function
(	O
dbc	pointer
)	O
DBC	struct
*	O
dbc	pointer
;	O
{	O
return	O
(	O
dbc	pointer
->	O
c_close	pointer
(	O
dbc	pointer
)	O
)	O
;	O
}	O
int	O
CDB___db_vrfy_pageinfo_create	function
(	O
pgipp	pointer
)	O
VRFY_PAGEINFO	struct
*	O
*	O
pgipp	pointer
;	O
{	O
VRFY_PAGEINFO	struct
*	O
pgip	pointer
;	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_calloc	function
(	O
NULL	O
,	O
1	int
,	O
sizeof	O
(	O
VRFY_PAGEINFO	struct
)	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
pgip	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
DB_ASSERT	O
(	O
pgip	pointer
->	O
pi_refcount	int
==	O
0	int
)	O
;	O
*	O
pgipp	pointer
=	O
pgip	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_salvage_init	function
(	O
vdp	pointer
)	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
{	O
DB	struct
*	O
dbp	pointer
;	O
int	O
ret	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_db_create	function
(	O
&	O
dbp	pointer
,	O
NULL	O
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
set_pagesize	pointer
(	O
dbp	pointer
,	O
1024	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
open	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
NULL	O
,	O
DB_BTREE	int
,	O
DB_CREATE	int
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
vdp	pointer
->	O
salvage_pages	pointer
=	O
dbp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
err	pointer
:	O
(	O
void	O
)	O
dbp	pointer
->	O
close	pointer
(	O
dbp	pointer
,	O
0	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
void	O
CDB___db_salvage_destroy	function
(	O
vdp	pointer
)	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
{	O
(	O
void	O
)	O
vdp	pointer
->	O
salvage_pages	pointer
->	O
close	pointer
(	O
vdp	pointer
->	O
salvage_pages	pointer
,	O
0	int
)	O
;	O
}	O
int	O
CDB___db_salvage_getnext	function
(	O
vdp	pointer
,	O
pgnop	pointer
,	O
pgtypep	pointer
)	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
db_pgno_t	int
*	O
pgnop	pointer
;	O
u_int32_t	int
*	O
pgtypep	pointer
;	O
{	O
DB	struct
*	O
dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DBT	struct
key	struct
,	O
data	pointer
;	O
int	O
ret	int
;	O
u_int32_t	int
pgtype	int
;	O
dbp	pointer
=	O
vdp	pointer
->	O
salvage_pages	pointer
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
cursor	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
&	O
dbc	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
while	O
(	O
(	O
ret	int
=	O
dbc	pointer
->	O
c_get	pointer
(	O
dbc	pointer
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
DB_NEXT	int
)	O
)	O
==	O
0	int
)	O
{	O
DB_ASSERT	O
(	O
data	pointer
.	O
size	int
==	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
memcpy	function
(	O
&	O
pgtype	int
,	O
data	pointer
.	O
data	pointer
,	O
sizeof	O
(	O
pgtype	int
)	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbc	pointer
->	O
c_del	pointer
(	O
dbc	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
pgtype	int
!=	O
SALVAGE_IGNORE	int
)	O
goto	O
found	O
;	O
}	O
if	O
(	O
0	int
)	O
{	O
found	O
:	O
DB_ASSERT	O
(	O
key	struct
.	O
size	int
==	O
sizeof	O
(	O
db_pgno_t	int
)	O
)	O
;	O
DB_ASSERT	O
(	O
data	pointer
.	O
size	int
==	O
sizeof	O
(	O
u_int32_t	int
)	O
)	O
;	O
*	O
pgnop	pointer
=	O
*	O
(	O
db_pgno_t	int
*	O
)	O
key	struct
.	O
data	pointer
;	O
*	O
pgtypep	pointer
=	O
*	O
(	O
u_int32_t	int
*	O
)	O
data	pointer
.	O
data	pointer
;	O
}	O
err	pointer
:	O
(	O
void	O
)	O
dbc	pointer
->	O
c_close	pointer
(	O
dbc	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_salvage_isdone	function
(	O
vdp	pointer
,	O
pgno	int
)	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
{	O
DBT	struct
key	struct
,	O
data	pointer
;	O
DB	struct
*	O
dbp	pointer
;	O
int	O
ret	int
;	O
u_int32_t	int
currtype	int
;	O
dbp	pointer
=	O
vdp	pointer
->	O
salvage_pages	pointer
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
currtype	int
=	O
SALVAGE_INVALID	int
;	O
data	pointer
.	O
data	pointer
=	O
&	O
currtype	int
;	O
data	pointer
.	O
ulen	int
=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
data	pointer
.	O
flags	int
=	O
DB_DBT_USERMEM	int
;	O
key	struct
.	O
data	pointer
=	O
&	O
pgno	int
;	O
key	struct
.	O
size	int
=	O
sizeof	O
(	O
db_pgno_t	int
)	O
;	O
ret	int
=	O
dbp	pointer
->	O
get	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
0	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
if	O
(	O
currtype	int
==	O
SALVAGE_IGNORE	int
)	O
return	O
(	O
DB_KEYEXIST	O
)	O
;	O
else	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ret	int
!=	O
DB_NOTFOUND	O
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_salvage_markdone	function
(	O
vdp	pointer
,	O
pgno	int
)	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
{	O
DBT	struct
key	struct
,	O
data	pointer
;	O
DB	struct
*	O
dbp	pointer
;	O
int	O
pgtype	int
,	O
ret	int
;	O
u_int32_t	int
currtype	int
;	O
pgtype	int
=	O
SALVAGE_IGNORE	int
;	O
dbp	pointer
=	O
vdp	pointer
->	O
salvage_pages	pointer
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
currtype	int
=	O
SALVAGE_INVALID	int
;	O
data	pointer
.	O
data	pointer
=	O
&	O
currtype	int
;	O
data	pointer
.	O
ulen	int
=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
data	pointer
.	O
flags	int
=	O
DB_DBT_USERMEM	int
;	O
key	struct
.	O
data	pointer
=	O
&	O
pgno	int
;	O
key	struct
.	O
size	int
=	O
sizeof	O
(	O
db_pgno_t	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_salvage_isdone	function
(	O
vdp	pointer
,	O
pgno	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
data	pointer
.	O
size	int
=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
data	pointer
.	O
data	pointer
=	O
&	O
pgtype	int
;	O
return	O
(	O
dbp	pointer
->	O
put	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
0	int
)	O
)	O
;	O
}	O
int	O
CDB___db_salvage_markneeded	function
(	O
vdp	pointer
,	O
pgno	int
,	O
pgtype	int
)	O
VRFY_DBINFO	struct
*	O
vdp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
u_int32_t	int
pgtype	int
;	O
{	O
DB	struct
*	O
dbp	pointer
;	O
DBT	struct
key	struct
,	O
data	pointer
;	O
int	O
ret	int
;	O
dbp	pointer
=	O
vdp	pointer
->	O
salvage_pages	pointer
;	O
memset	function
(	O
&	O
key	struct
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
DBT	struct
)	O
)	O
;	O
key	struct
.	O
data	pointer
=	O
&	O
pgno	int
;	O
key	struct
.	O
size	int
=	O
sizeof	O
(	O
db_pgno_t	int
)	O
;	O
data	pointer
.	O
data	pointer
=	O
&	O
pgtype	int
;	O
data	pointer
.	O
size	int
=	O
sizeof	O
(	O
u_int32_t	int
)	O
;	O
ret	int
=	O
dbp	pointer
->	O
put	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
&	O
key	struct
,	O
&	O
data	pointer
,	O
DB_NOOVERWRITE	int
)	O
;	O
return	O
(	O
ret	int
==	O
DB_KEYEXIST	O
?	O
0	int
:	O
ret	int
)	O
;	O
}	O
