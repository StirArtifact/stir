struct	O
safety_check_closure	struct
{	O
int	O
defval	int
;	O
int	O
*	O
data	pointer
;	O
}	O
;	O
static	O
int	O
cb_safety_checks	function
(	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
safety_check_closure	struct
*	O
cp	pointer
=	O
data	pointer
;	O
if	O
(	O
mu_file_safety_compose	function
(	O
cp	pointer
->	O
data	pointer
,	O
name	pointer
,	O
cp	pointer
->	O
defval	int
)	O
)	O
mu_error	function
(	O
_	O
(	O
"unknown keyword: %s"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_cert_safety_checks	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
arg	pointer
)	O
{	O
struct	O
safety_check_closure	struct
clos	struct
;	O
clos	struct
.	O
defval	int
=	O
MU_TLS_CERT_FILE_CHECKS	O
;	O
clos	struct
.	O
data	pointer
=	O
data	pointer
;	O
return	O
mu_cfg_string_value_cb	function
(	O
arg	pointer
,	O
cb_safety_checks	function
,	O
&	O
clos	struct
)	O
;	O
}	O
static	O
int	O
cb_key_safety_checks	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
arg	pointer
)	O
{	O
struct	O
safety_check_closure	struct
clos	struct
;	O
clos	struct
.	O
defval	int
=	O
MU_TLS_KEY_FILE_CHECKS	O
;	O
clos	struct
.	O
data	pointer
=	O
data	pointer
;	O
return	O
mu_cfg_string_value_cb	function
(	O
arg	pointer
,	O
cb_safety_checks	function
,	O
&	O
clos	struct
)	O
;	O
}	O
static	O
int	O
cb_ca_safety_checks	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
arg	pointer
)	O
{	O
struct	O
safety_check_closure	struct
clos	struct
;	O
clos	struct
.	O
defval	int
=	O
MU_TLS_CA_FILE_CHECKS	O
;	O
clos	struct
.	O
data	pointer
=	O
data	pointer
;	O
return	O
mu_cfg_string_value_cb	function
(	O
arg	pointer
,	O
cb_safety_checks	function
,	O
&	O
clos	struct
)	O
;	O
}	O
static	O
struct	O
mu_cfg_param	struct
mu_tls_global_param	array
[	O
]	O
=	O
{	O
{	O
"key-file"	pointer
,	O
mu_cfg_callback	int
,	O
&	O
mu_tls_key_file_checks	int
,	O
0	int
,	O
cb_key_safety_checks	function
,	O
N_	O
(	O
"Configure safety checks for SSL key file.  Argument is a list or "	pointer
"sequence of check names optionally prefixed with '+' to enable or "	pointer
"'-' to disable the corresponding check.  Valid check names are:\n"	pointer
"\n"	pointer
"  none          disable all checks\n"	pointer
"  all           enable all checks\n"	pointer
"  gwrfil        forbid group writable files\n"	pointer
"  awrfil        forbid world writable files\n"	pointer
"  grdfil        forbid group readable files\n"	pointer
"  ardfil        forbid world writable files\n"	pointer
"  linkwrdir     forbid symbolic links in group or world writable directories\n"	pointer
"  gwrdir        forbid files in group writable directories\n"	pointer
"  awrdir        forbid files in world writable directories\n"	pointer
)	O
,	O
N_	O
(	O
"arg: list"	pointer
)	O
}	O
,	O
{	O
"cert-file"	pointer
,	O
mu_cfg_callback	int
,	O
&	O
mu_tls_cert_file_checks	int
,	O
0	int
,	O
cb_cert_safety_checks	function
,	O
N_	O
(	O
"Configure safety checks for SSL certificate.  See above for a description of <arg>."	pointer
)	O
,	O
N_	O
(	O
"arg: list"	pointer
)	O
}	O
,	O
{	O
"ca-file"	pointer
,	O
mu_cfg_callback	int
,	O
&	O
mu_tls_ca_file_checks	int
,	O
0	int
,	O
cb_ca_safety_checks	function
,	O
N_	O
(	O
"Configure safety checks for SSL certificate authority file.  See above for a description of <arg>."	pointer
)	O
,	O
N_	O
(	O
"arg: list"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
mu_cfg_param	struct
tls_canned_param	array
[	O
]	O
=	O
{	O
{	O
"ssl-certificate-file"	pointer
,	O
mu_c_string	int
,	O
NULL	O
,	O
mu_offsetof	O
(	O
struct	O
mu_tls_config	struct
,	O
cert_file	pointer
)	O
,	O
NULL	O
,	O
N_	O
(	O
"Specify SSL certificate file."	pointer
)	O
,	O
N_	O
(	O
"file"	pointer
)	O
}	O
,	O
{	O
"ssl-key-file"	pointer
,	O
mu_c_string	int
,	O
NULL	O
,	O
mu_offsetof	O
(	O
struct	O
mu_tls_config	struct
,	O
key_file	pointer
)	O
,	O
NULL	O
,	O
N_	O
(	O
"Specify SSL certificate key file."	pointer
)	O
,	O
N_	O
(	O
"file"	pointer
)	O
}	O
,	O
{	O
"ssl-ca-file"	pointer
,	O
mu_c_string	int
,	O
NULL	O
,	O
mu_offsetof	O
(	O
struct	O
mu_tls_config	struct
,	O
ca_file	pointer
)	O
,	O
NULL	O
,	O
N_	O
(	O
"Specify trusted CAs file."	pointer
)	O
,	O
N_	O
(	O
"file"	pointer
)	O
}	O
,	O
{	O
"ssl-priorities"	pointer
,	O
mu_c_string	int
,	O
NULL	O
,	O
mu_offsetof	O
(	O
struct	O
mu_tls_config	struct
,	O
priorities	pointer
)	O
,	O
NULL	O
,	O
N_	O
(	O
"Set the priorities to use on the ciphers, key exchange methods, "	pointer
"macs and compression methods."	pointer
)	O
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
void	O
mu_tls_cfg_init	function
(	O
void	O
)	O
{	O
struct	O
mu_cfg_section	int
*	O
section	struct
;	O
if	O
(	O
mu_create_canned_section	function
(	O
"tls"	pointer
,	O
&	O
section	struct
)	O
)	O
abort	function
(	O
)	O
;	O
section	struct
->	O
docstring	pointer
=	O
N_	O
(	O
"Configure TLS"	pointer
)	O
;	O
section	struct
->	O
label	pointer
=	O
NULL	O
;	O
mu_cfg_section_add_params	function
(	O
section	struct
,	O
tls_canned_param	array
)	O
;	O
}	O
struct	O
mu_auth_module	struct
mu_auth_tls_module	struct
=	O
{	O
.	O
name	pointer
=	O
"tls-file-checks"	pointer
,	O
.	O
cfg	pointer
=	O
mu_tls_global_param	array
,	O
}	O
;	O
