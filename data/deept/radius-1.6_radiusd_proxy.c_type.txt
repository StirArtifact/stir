static	O
void	O
passwd_recode	function
(	O
grad_avp_t	struct
*	O
pass_pair	pointer
,	O
char	O
*	O
new_secret	pointer
,	O
char	O
*	O
new_authenticator	pointer
,	O
radiusd_request_t	struct
*	O
req	pointer
)	O
{	O
char	O
password	pointer
[	O
GRAD_STRING_LENGTH	int
+	O
1	int
]	O
;	O
req_decrypt_password	function
(	O
password	pointer
,	O
req	pointer
->	O
request	pointer
,	O
pass_pair	pointer
)	O
;	O
grad_free	function
(	O
pass_pair	pointer
->	O
avp_strvalue	O
)	O
;	O
grad_encrypt_password	function
(	O
pass_pair	pointer
,	O
password	pointer
,	O
new_authenticator	pointer
,	O
new_secret	pointer
)	O
;	O
memset	function
(	O
password	pointer
,	O
0	int
,	O
GRAD_STRING_LENGTH	int
)	O
;	O
}	O
static	O
void	O
tunnel_passwd_recode	function
(	O
grad_avp_t	struct
*	O
pass_pair	pointer
,	O
char	O
*	O
new_secret	pointer
,	O
char	O
*	O
new_authenticator	pointer
,	O
radiusd_request_t	struct
*	O
req	pointer
)	O
{	O
char	O
password	pointer
[	O
GRAD_STRING_LENGTH	int
+	O
1	int
]	O
;	O
u_char	char
tag	char
;	O
grad_decrypt_tunnel_password	function
(	O
password	pointer
,	O
&	O
tag	char
,	O
pass_pair	pointer
,	O
req	pointer
->	O
request	pointer
->	O
authenticator	array
,	O
req	pointer
->	O
request	pointer
->	O
secret	pointer
)	O
;	O
grad_free	function
(	O
pass_pair	pointer
->	O
avp_strvalue	O
)	O
;	O
grad_encrypt_tunnel_password	function
(	O
pass_pair	pointer
,	O
tag	char
,	O
password	pointer
,	O
new_authenticator	pointer
,	O
new_secret	pointer
)	O
;	O
memset	function
(	O
password	pointer
,	O
0	int
,	O
GRAD_STRING_LENGTH	int
)	O
;	O
}	O
grad_avp_t	struct
*	O
proxy_request_recode	function
(	O
radiusd_request_t	struct
*	O
radreq	pointer
,	O
grad_avp_t	struct
*	O
plist	pointer
,	O
u_char	char
*	O
secret	pointer
,	O
u_char	char
*	O
authenticator	array
)	O
{	O
grad_avp_t	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
plist	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
prop	int
&	O
GRAD_AP_ENCRYPT_RFC2138	int
)	O
passwd_recode	function
(	O
p	pointer
,	O
secret	pointer
,	O
authenticator	array
,	O
radreq	pointer
)	O
;	O
else	O
if	O
(	O
p	pointer
->	O
prop	int
&	O
GRAD_AP_ENCRYPT_RFC2868	int
)	O
tunnel_passwd_recode	function
(	O
p	pointer
,	O
secret	pointer
,	O
authenticator	array
,	O
radreq	pointer
)	O
;	O
}	O
return	O
plist	pointer
;	O
}	O
int	O
proxy_cmp	function
(	O
radiusd_request_t	struct
*	O
qr	pointer
,	O
radiusd_request_t	struct
*	O
r	pointer
)	O
{	O
grad_avp_t	struct
*	O
p	pointer
,	O
*	O
proxy_state_pair	pointer
=	O
NULL	O
;	O
grad_server_t	struct
*	O
server	pointer
;	O
if	O
(	O
!	O
qr	pointer
->	O
realm	array
)	O
{	O
GRAD_DEBUG	O
(	O
100	int
,	O
"no proxy realm"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
server	pointer
=	O
grad_list_item	function
(	O
qr	pointer
->	O
realm	array
->	O
queue	pointer
->	O
servers	pointer
,	O
qr	pointer
->	O
server_no	int
)	O
;	O
if	O
(	O
!	O
server	pointer
)	O
{	O
GRAD_DEBUG	O
(	O
100	int
,	O
"no proxy server"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
p	pointer
=	O
r	pointer
->	O
request	pointer
->	O
avlist	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
attribute	int
==	O
DA_PROXY_STATE	int
)	O
proxy_state_pair	pointer
=	O
p	pointer
;	O
}	O
if	O
(	O
proxy_state_pair	pointer
&&	O
proxy_state_pair	pointer
->	O
avp_strlength	O
==	O
sizeof	O
(	O
PROXY_STATE	struct
)	O
)	O
{	O
PROXY_STATE	struct
*	O
state	pointer
;	O
state	pointer
=	O
(	O
PROXY_STATE	struct
*	O
)	O
proxy_state_pair	pointer
->	O
avp_strvalue	O
;	O
GRAD_DEBUG4	O
(	O
1	int
,	O
"state: ipaddr %08x, id %u, proxy_id %u, remote_ip %08x"	pointer
,	O
state	pointer
->	O
client_ip	int
,	O
state	pointer
->	O
id	char
,	O
state	pointer
->	O
proxy_id	int
,	O
state	pointer
->	O
remote_ip	int
)	O
;	O
if	O
(	O
state	pointer
->	O
ref_ip	int
==	O
ref_ip	int
&&	O
state	pointer
->	O
proxy_id	int
==	O
r	pointer
->	O
request	pointer
->	O
id	char
&&	O
state	pointer
->	O
remote_ip	int
==	O
r	pointer
->	O
request	pointer
->	O
ipaddr	int
)	O
{	O
GRAD_DEBUG8	O
(	O
10	int
,	O
"(old=data) id %d %d, ipaddr %#8x %#8x, "	pointer
"proxy_id %d %d, server_addr %#8x %#8x"	pointer
,	O
qr	pointer
->	O
request	pointer
->	O
id	char
,	O
state	pointer
->	O
id	char
,	O
qr	pointer
->	O
request	pointer
->	O
ipaddr	int
,	O
state	pointer
->	O
client_ip	int
,	O
qr	pointer
->	O
server_id	int
,	O
state	pointer
->	O
proxy_id	int
,	O
server	pointer
->	O
addr	int
,	O
state	pointer
->	O
remote_ip	int
)	O
;	O
if	O
(	O
state	pointer
->	O
client_ip	int
==	O
qr	pointer
->	O
request	pointer
->	O
ipaddr	int
&&	O
state	pointer
->	O
id	char
==	O
qr	pointer
->	O
request	pointer
->	O
id	char
&&	O
state	pointer
->	O
proxy_id	int
==	O
qr	pointer
->	O
server_id	int
&&	O
state	pointer
->	O
remote_ip	int
==	O
server	pointer
->	O
addr	int
)	O
{	O
GRAD_DEBUG	O
(	O
1	int
,	O
"EQUAL!!!"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
proxy_send_pdu	function
(	O
int	O
fd	int
,	O
grad_server_t	struct
*	O
server	pointer
,	O
radiusd_request_t	struct
*	O
radreq	pointer
,	O
void	O
*	O
pdu	pointer
,	O
size_t	long
size	int
)	O
{	O
struct	O
sockaddr_in	struct
sin	struct
;	O
memset	function
(	O
&	O
sin	struct
,	O
0	int
,	O
sizeof	O
(	O
sin	struct
)	O
)	O
;	O
sin	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
sin	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
htonl	function
(	O
server	pointer
->	O
addr	int
)	O
;	O
sin	struct
.	O
sin_port	short
=	O
htons	function
(	O
(	O
radreq	pointer
->	O
request	pointer
->	O
code	char
==	O
RT_ACCESS_REQUEST	int
)	O
?	O
server	pointer
->	O
port	array
[	O
GRAD_PORT_AUTH	int
]	O
:	O
server	pointer
->	O
port	array
[	O
GRAD_PORT_ACCT	int
]	O
)	O
;	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"Proxying id %d to %lx"	pointer
,	O
radreq	pointer
->	O
request	pointer
->	O
id	char
,	O
(	O
u_long	long
)	O
server	pointer
->	O
addr	int
)	O
;	O
return	O
sendto	function
(	O
fd	int
,	O
pdu	pointer
,	O
size	int
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
sin	struct
,	O
sizeof	O
(	O
sin	struct
)	O
)	O
;	O
}	O
int	O
proxy_send_request	function
(	O
int	O
fd	int
,	O
radiusd_request_t	struct
*	O
radreq	pointer
)	O
{	O
grad_avp_t	struct
*	O
plist	pointer
,	O
*	O
p	pointer
;	O
void	O
*	O
pdu	pointer
;	O
size_t	long
size	int
;	O
grad_server_t	struct
*	O
server	pointer
;	O
int	O
rc	int
;	O
PROXY_STATE	struct
*	O
proxy_state	struct
;	O
if	O
(	O
radreq	pointer
->	O
attempt_no	int
>=	O
radreq	pointer
->	O
realm	array
->	O
queue	pointer
->	O
retries	int
)	O
{	O
radreq	pointer
->	O
server_no	int
++	O
;	O
radreq	pointer
->	O
attempt_no	int
=	O
0	int
;	O
}	O
server	pointer
=	O
grad_list_item	function
(	O
radreq	pointer
->	O
realm	array
->	O
queue	pointer
->	O
servers	pointer
,	O
radreq	pointer
->	O
server_no	int
)	O
;	O
if	O
(	O
!	O
server	pointer
)	O
{	O
grad_log_req	function
(	O
GRAD_LOG_NOTICE	int
,	O
radreq	pointer
->	O
request	pointer
,	O
_	O
(	O
"couldn't send request to realm %s"	pointer
)	O
,	O
radreq	pointer
->	O
realm	array
->	O
realm	array
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
radreq	pointer
->	O
attempt_no	int
==	O
0	int
)	O
radreq	pointer
->	O
server_id	int
=	O
grad_client_message_id	function
(	O
server	pointer
)	O
;	O
radreq	pointer
->	O
attempt_no	int
++	O
;	O
grad_client_random_authenticator	function
(	O
radreq	pointer
->	O
remote_auth	array
)	O
;	O
plist	pointer
=	O
proxy_request_recode	function
(	O
radreq	pointer
,	O
grad_avl_dup	function
(	O
radreq	pointer
->	O
request	pointer
->	O
avlist	pointer
)	O
,	O
server	pointer
->	O
secret	pointer
,	O
radreq	pointer
->	O
remote_auth	array
)	O
;	O
p	pointer
=	O
grad_avp_alloc	function
(	O
)	O
;	O
p	pointer
->	O
name	pointer
=	O
"Proxy-State"	pointer
;	O
p	pointer
->	O
attribute	int
=	O
DA_PROXY_STATE	int
;	O
p	pointer
->	O
type	int
=	O
GRAD_TYPE_STRING	int
;	O
p	pointer
->	O
avp_strlength	O
=	O
sizeof	O
(	O
PROXY_STATE	struct
)	O
;	O
p	pointer
->	O
avp_strvalue	O
=	O
grad_emalloc	function
(	O
p	pointer
->	O
avp_strlength	O
)	O
;	O
proxy_state	struct
=	O
(	O
PROXY_STATE	struct
*	O
)	O
p	pointer
->	O
avp_strvalue	O
;	O
proxy_state	struct
->	O
ref_ip	int
=	O
ref_ip	int
;	O
proxy_state	struct
->	O
client_ip	int
=	O
radreq	pointer
->	O
request	pointer
->	O
ipaddr	int
;	O
proxy_state	struct
->	O
id	char
=	O
radreq	pointer
->	O
request	pointer
->	O
id	char
;	O
proxy_state	struct
->	O
proxy_id	int
=	O
radreq	pointer
->	O
server_id	int
;	O
proxy_state	struct
->	O
remote_ip	int
=	O
server	pointer
->	O
addr	int
;	O
grad_avl_add_pair	function
(	O
&	O
plist	pointer
,	O
p	pointer
)	O
;	O
size	int
=	O
grad_create_pdu	function
(	O
&	O
pdu	pointer
,	O
radreq	pointer
->	O
request	pointer
->	O
code	char
,	O
radreq	pointer
->	O
server_id	int
,	O
radreq	pointer
->	O
remote_auth	array
,	O
server	pointer
->	O
secret	pointer
,	O
plist	pointer
,	O
NULL	O
)	O
;	O
grad_avl_free	function
(	O
plist	pointer
)	O
;	O
if	O
(	O
!	O
radiusd_master	function
(	O
)	O
)	O
{	O
RADIUS_UPDATE	struct
*	O
upd	pointer
;	O
size_t	long
size	int
;	O
size	int
=	O
sizeof	O
(	O
*	O
upd	pointer
)	O
+	O
strlen	function
(	O
radreq	pointer
->	O
realm	array
->	O
realm	array
)	O
+	O
1	int
;	O
upd	pointer
=	O
grad_emalloc	function
(	O
size	int
)	O
;	O
upd	pointer
->	O
id	char
=	O
radreq	pointer
->	O
request	pointer
->	O
id	char
;	O
upd	pointer
->	O
proxy_id	int
=	O
radreq	pointer
->	O
server_id	int
;	O
upd	pointer
->	O
server_no	int
=	O
radreq	pointer
->	O
server_no	int
;	O
strcpy	function
(	O
upd	pointer
->	O
realmname	array
,	O
radreq	pointer
->	O
realm	array
->	O
realm	array
)	O
;	O
GRAD_DEBUG4	O
(	O
100	int
,	O
"Update id=%d, proxy_id=%d, realm=%s, server_no=%d"	pointer
,	O
upd	pointer
->	O
id	char
,	O
upd	pointer
->	O
proxy_id	int
,	O
upd	pointer
->	O
realmname	array
,	O
upd	pointer
->	O
server_no	int
)	O
;	O
rpp_update	function
(	O
upd	pointer
,	O
size	int
)	O
;	O
grad_free	function
(	O
upd	pointer
)	O
;	O
}	O
rc	int
=	O
proxy_send_pdu	function
(	O
fd	int
,	O
server	pointer
,	O
radreq	pointer
,	O
pdu	pointer
,	O
size	int
)	O
;	O
grad_free	function
(	O
pdu	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
grad_realm_t	struct
*	O
proxy_lookup_realm	function
(	O
radiusd_request_t	struct
*	O
req	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
grad_realm_t	struct
*	O
realm	array
=	O
grad_realm_lookup_name	function
(	O
name	pointer
)	O
;	O
static	O
char	O
*	O
var	array
[	O
]	O
=	O
{	O
"auth"	pointer
,	O
"acct"	pointer
}	O
;	O
int	O
t	long
;	O
if	O
(	O
realm	array
)	O
{	O
int	O
rc	int
;	O
switch	O
(	O
req	pointer
->	O
request	pointer
->	O
code	char
)	O
{	O
case	O
RT_ACCESS_REQUEST	int
:	O
t	long
=	O
R_AUTH	int
;	O
break	O
;	O
case	O
RT_ACCOUNTING_REQUEST	int
:	O
t	long
=	O
R_ACCT	int
;	O
break	O
;	O
default	O
:	O
grad_insist_fail	O
(	O
"unexpected request code"	pointer
)	O
;	O
}	O
rc	int
=	O
grad_envar_lookup_int	function
(	O
realm	array
->	O
args	pointer
,	O
var	array
[	O
t	long
]	O
,	O
-	O
1	int
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
{	O
rc	int
=	O
!	O
grad_envar_lookup_int	function
(	O
realm	array
->	O
args	pointer
,	O
var	array
[	O
!	O
t	long
]	O
,	O
0	int
)	O
;	O
}	O
if	O
(	O
!	O
rc	int
)	O
realm	array
=	O
NULL	O
;	O
}	O
return	O
realm	array
;	O
}	O
int	O
proxy_send	function
(	O
REQUEST	struct
*	O
req	pointer
)	O
{	O
radiusd_request_t	struct
*	O
radreq	pointer
=	O
req	pointer
->	O
data	pointer
;	O
char	O
*	O
username	pointer
;	O
grad_avp_t	struct
*	O
namepair	pointer
;	O
grad_avp_t	struct
*	O
vp	pointer
;	O
char	O
*	O
realmname	array
;	O
grad_realm_t	struct
*	O
realm	array
;	O
namepair	pointer
=	O
grad_avl_find	function
(	O
radreq	pointer
->	O
request	pointer
->	O
avlist	pointer
,	O
DA_USER_NAME	int
)	O
;	O
if	O
(	O
grad_avp_null_string_p	function
(	O
namepair	pointer
)	O
)	O
return	O
0	int
;	O
username	pointer
=	O
namepair	pointer
->	O
avp_strvalue	O
;	O
if	O
(	O
(	O
realmname	array
=	O
strrchr	function
(	O
username	pointer
,	O
'@'	O
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
realm	array
=	O
grad_realm_lookup_name	function
(	O
"NOREALM"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
return	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
(	O
realm	array
=	O
proxy_lookup_realm	function
(	O
radreq	pointer
,	O
realmname	array
+	O
1	int
)	O
)	O
==	O
NULL	O
)	O
{	O
return	O
0	int
;	O
}	O
if	O
(	O
realmname	array
&&	O
grad_realm_strip_p	function
(	O
realm	array
)	O
)	O
{	O
*	O
realmname	array
=	O
0	int
;	O
namepair	pointer
->	O
avp_strlength	O
=	O
strlen	function
(	O
namepair	pointer
->	O
avp_strvalue	O
)	O
;	O
}	O
if	O
(	O
realm	array
->	O
queue	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
radreq	pointer
->	O
realm	array
=	O
realm	array
;	O
radreq	pointer
->	O
server_no	int
=	O
0	int
;	O
radreq	pointer
->	O
attempt_no	int
=	O
0	int
;	O
radreq	pointer
->	O
remote_user	pointer
=	O
grad_estrdup	function
(	O
username	pointer
)	O
;	O
grad_avl_add_pair	function
(	O
&	O
radreq	pointer
->	O
request	pointer
->	O
avlist	pointer
,	O
grad_avp_create_string	function
(	O
DA_REALM_NAME	int
,	O
realm	array
->	O
realm	array
)	O
)	O
;	O
proxy_send_request	function
(	O
req	pointer
->	O
fd	int
,	O
radreq	pointer
)	O
;	O
return	O
1	int
;	O
}	O
void	O
proxy_retry	function
(	O
radiusd_request_t	struct
*	O
req	pointer
,	O
int	O
fd	int
)	O
{	O
grad_avp_t	struct
*	O
namepair	pointer
;	O
char	O
*	O
saved_username	pointer
;	O
namepair	pointer
=	O
grad_avl_find	function
(	O
req	pointer
->	O
request	pointer
->	O
avlist	pointer
,	O
DA_USER_NAME	int
)	O
;	O
if	O
(	O
namepair	pointer
==	O
NULL	O
)	O
return	O
;	O
saved_username	pointer
=	O
namepair	pointer
->	O
avp_strvalue	O
;	O
namepair	pointer
->	O
avp_strvalue	O
=	O
req	pointer
->	O
remote_user	pointer
;	O
namepair	pointer
->	O
avp_strlength	O
=	O
strlen	function
(	O
namepair	pointer
->	O
avp_strvalue	O
)	O
;	O
proxy_send_request	function
(	O
fd	int
,	O
req	pointer
)	O
;	O
namepair	pointer
->	O
avp_strvalue	O
=	O
saved_username	pointer
;	O
namepair	pointer
->	O
avp_strlength	O
=	O
strlen	function
(	O
namepair	pointer
->	O
avp_strvalue	O
)	O
;	O
}	O
static	O
int	O
select_propagated	function
(	O
void	O
*	O
null	pointer
ARG_UNUSED	O
,	O
grad_avp_t	struct
*	O
pair	pointer
)	O
{	O
return	O
pair	pointer
->	O
prop	int
&	O
GRAD_AP_PROPAGATE	int
;	O
}	O
int	O
proxy_receive	function
(	O
radiusd_request_t	struct
*	O
radreq	pointer
,	O
radiusd_request_t	struct
*	O
oldreq	pointer
,	O
int	O
fd	int
)	O
{	O
grad_avp_t	struct
*	O
vp	pointer
,	O
*	O
proxy_state_pair	pointer
,	O
*	O
prev	pointer
,	O
*	O
x	pointer
;	O
grad_avp_t	struct
*	O
allowed_pairs	pointer
;	O
proxy_state_pair	pointer
=	O
x	pointer
=	O
prev	pointer
=	O
NULL	O
;	O
for	O
(	O
vp	pointer
=	O
radreq	pointer
->	O
request	pointer
->	O
avlist	pointer
;	O
vp	pointer
;	O
vp	pointer
=	O
vp	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
vp	pointer
->	O
attribute	int
==	O
DA_PROXY_STATE	int
)	O
{	O
prev	pointer
=	O
x	pointer
;	O
proxy_state_pair	pointer
=	O
vp	pointer
;	O
}	O
x	pointer
=	O
vp	pointer
;	O
}	O
if	O
(	O
proxy_state_pair	pointer
)	O
{	O
if	O
(	O
prev	pointer
)	O
prev	pointer
->	O
next	pointer
=	O
proxy_state_pair	pointer
->	O
next	pointer
;	O
else	O
radreq	pointer
->	O
request	pointer
->	O
avlist	pointer
=	O
proxy_state_pair	pointer
->	O
next	pointer
;	O
grad_avp_free	function
(	O
proxy_state_pair	pointer
)	O
;	O
}	O
allowed_pairs	pointer
=	O
NULL	O
;	O
grad_avl_move_pairs	function
(	O
&	O
allowed_pairs	pointer
,	O
&	O
radreq	pointer
->	O
request	pointer
->	O
avlist	pointer
,	O
select_propagated	function
,	O
NULL	O
)	O
;	O
grad_avl_free	function
(	O
radreq	pointer
->	O
request	pointer
->	O
avlist	pointer
)	O
;	O
memcpy	function
(	O
radreq	pointer
->	O
request	pointer
->	O
authenticator	array
,	O
oldreq	pointer
->	O
remote_auth	array
,	O
sizeof	O
radreq	pointer
->	O
request	pointer
->	O
authenticator	array
)	O
;	O
radreq	pointer
->	O
server_reply	pointer
=	O
proxy_request_recode	function
(	O
radreq	pointer
,	O
allowed_pairs	pointer
,	O
oldreq	pointer
->	O
request	pointer
->	O
secret	pointer
,	O
oldreq	pointer
->	O
request	pointer
->	O
authenticator	array
)	O
;	O
radreq	pointer
->	O
validated	int
=	O
1	int
;	O
radreq	pointer
->	O
server_code	int
=	O
radreq	pointer
->	O
request	pointer
->	O
code	char
;	O
radreq	pointer
->	O
request	pointer
->	O
code	char
=	O
oldreq	pointer
->	O
request	pointer
->	O
code	char
;	O
radreq	pointer
->	O
request	pointer
->	O
ipaddr	int
=	O
oldreq	pointer
->	O
request	pointer
->	O
ipaddr	int
;	O
radreq	pointer
->	O
request	pointer
->	O
udp_port	short
=	O
oldreq	pointer
->	O
request	pointer
->	O
udp_port	short
;	O
radreq	pointer
->	O
request	pointer
->	O
id	char
=	O
oldreq	pointer
->	O
request	pointer
->	O
id	char
;	O
memcpy	function
(	O
radreq	pointer
->	O
request	pointer
->	O
authenticator	array
,	O
oldreq	pointer
->	O
request	pointer
->	O
authenticator	array
,	O
sizeof	O
radreq	pointer
->	O
request	pointer
->	O
authenticator	array
)	O
;	O
radreq	pointer
->	O
request	pointer
->	O
secret	pointer
=	O
oldreq	pointer
->	O
request	pointer
->	O
secret	pointer
;	O
radreq	pointer
->	O
request	pointer
->	O
avlist	pointer
=	O
grad_avl_dup	function
(	O
oldreq	pointer
->	O
request	pointer
->	O
avlist	pointer
)	O
;	O
radreq	pointer
->	O
realm	array
=	O
oldreq	pointer
->	O
realm	array
;	O
radreq	pointer
->	O
server_no	int
=	O
oldreq	pointer
->	O
server_no	int
;	O
radreq	pointer
->	O
server_id	int
=	O
oldreq	pointer
->	O
server_id	int
;	O
return	O
0	int
;	O
}	O
