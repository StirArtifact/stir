struct	O
_mu_progmailer	struct
{	O
int	O
fd	int
;	O
pid_t	int
pid	int
;	O
RETSIGTYPE	void
(	O
*	O
sighandler	pointer
)	O
(	O
)	O
;	O
char	O
*	O
command	pointer
;	O
}	O
;	O
int	O
mu_progmailer_create	function
(	O
struct	O
_mu_progmailer	struct
*	O
*	O
ppm	pointer
)	O
{	O
struct	O
_mu_progmailer	struct
*	O
pm	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
pm	pointer
)	O
)	O
;	O
if	O
(	O
!	O
pm	pointer
)	O
return	O
ENOMEM	int
;	O
pm	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
pm	pointer
->	O
pid	int
=	O
-	O
1	int
;	O
pm	pointer
->	O
sighandler	pointer
=	O
SIG_ERR	O
;	O
pm	pointer
->	O
command	pointer
=	O
NULL	O
;	O
*	O
ppm	pointer
=	O
pm	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_progmailer_set_command	function
(	O
mu_progmailer_t	pointer
pm	pointer
,	O
const	O
char	O
*	O
command	pointer
)	O
{	O
if	O
(	O
!	O
pm	pointer
)	O
return	O
EINVAL	int
;	O
free	function
(	O
pm	pointer
->	O
command	pointer
)	O
;	O
if	O
(	O
command	pointer
)	O
{	O
pm	pointer
->	O
command	pointer
=	O
strdup	function
(	O
command	pointer
)	O
;	O
if	O
(	O
!	O
pm	pointer
->	O
command	pointer
)	O
return	O
EINVAL	int
;	O
}	O
else	O
pm	pointer
->	O
command	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_progmailer_sget_command	function
(	O
mu_progmailer_t	pointer
pm	pointer
,	O
const	O
char	O
*	O
*	O
command	pointer
)	O
{	O
if	O
(	O
!	O
pm	pointer
)	O
return	O
EINVAL	int
;	O
*	O
command	pointer
=	O
pm	pointer
->	O
command	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_progmailer_destroy	function
(	O
struct	O
_mu_progmailer	struct
*	O
*	O
ppm	pointer
)	O
{	O
if	O
(	O
*	O
ppm	pointer
)	O
{	O
free	function
(	O
(	O
*	O
ppm	pointer
)	O
->	O
command	pointer
)	O
;	O
free	function
(	O
*	O
ppm	pointer
)	O
;	O
*	O
ppm	pointer
=	O
NULL	O
;	O
}	O
}	O
int	O
mu_progmailer_open	function
(	O
struct	O
_mu_progmailer	struct
*	O
pm	pointer
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
tunnel	array
[	O
2	int
]	O
;	O
int	O
status	int
=	O
0	int
;	O
int	O
i	int
;	O
if	O
(	O
!	O
pm	pointer
||	O
!	O
argv	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
(	O
pm	pointer
->	O
sighandler	pointer
=	O
signal	function
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
)	O
==	O
SIG_ERR	O
)	O
{	O
status	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"setting SIGCHLD failed: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
if	O
(	O
pipe	function
(	O
tunnel	array
)	O
==	O
0	int
)	O
{	O
pm	pointer
->	O
fd	int
=	O
tunnel	array
[	O
1	int
]	O
;	O
pm	pointer
->	O
pid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
pm	pointer
->	O
pid	int
==	O
0	int
)	O
{	O
SCLOSE	O
(	O
STDIN_FILENO	int
,	O
tunnel	array
)	O
;	O
SCLOSE	O
(	O
STDOUT_FILENO	int
,	O
tunnel	array
)	O
;	O
SCLOSE	O
(	O
STDERR_FILENO	int
,	O
tunnel	array
)	O
;	O
close	pointer
(	O
tunnel	array
[	O
1	int
]	O
)	O
;	O
dup2	function
(	O
tunnel	array
[	O
0	int
]	O
,	O
STDIN_FILENO	int
)	O
;	O
execv	function
(	O
pm	pointer
->	O
command	pointer
?	O
pm	pointer
->	O
command	pointer
:	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
)	O
;	O
exit	function
(	O
errno	O
?	O
EX_CANTCREAT	int
:	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
pm	pointer
->	O
pid	int
==	O
-	O
1	int
)	O
{	O
status	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"fork failed: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
}	O
}	O
else	O
{	O
status	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"pipe() failed: %s\n"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
}	O
if	O
(	O
mu_debug_level_p	function
(	O
MU_DEBCAT_MAILER	int
,	O
10	int
)	O
)	O
{	O
mu_debug_log_begin	function
(	O
"exec %s argv:"	pointer
,	O
pm	pointer
->	O
command	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
argv	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
mu_debug_log_cont	function
(	O
" %s"	pointer
,	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
mu_debug_log_nl	function
(	O
)	O
;	O
}	O
close	pointer
(	O
tunnel	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
close	pointer
(	O
pm	pointer
->	O
fd	int
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_progmailer_send	function
(	O
struct	O
_mu_progmailer	struct
*	O
pm	pointer
,	O
mu_message_t	pointer
msg	pointer
)	O
{	O
int	O
status	int
;	O
mu_stream_t	pointer
stream	pointer
=	O
NULL	O
;	O
char	O
buffer	pointer
[	O
512	int
]	O
;	O
size_t	long
len	int
=	O
0	int
;	O
int	O
rc	int
;	O
mu_header_t	pointer
hdr	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
int	O
found_nl	int
=	O
0	int
;	O
int	O
exit_status	int
;	O
if	O
(	O
!	O
pm	pointer
||	O
!	O
msg	pointer
)	O
return	O
EINVAL	int
;	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
status	int
=	O
mu_header_get_streamref	function
(	O
hdr	pointer
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot get header stream: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"Sending headers..."	pointer
)	O
)	O
;	O
mu_stream_seek	function
(	O
stream	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
while	O
(	O
(	O
status	int
=	O
mu_stream_readline	function
(	O
stream	pointer
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
&	O
len	int
)	O
)	O
==	O
0	int
&&	O
len	int
!=	O
0	int
)	O
{	O
if	O
(	O
mu_c_strncasecmp	function
(	O
buffer	pointer
,	O
MU_HEADER_FCC	pointer
,	O
sizeof	O
(	O
MU_HEADER_FCC	pointer
)	O
-	O
1	int
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_PROT	int
,	O
(	O
"Header: %s"	pointer
,	O
buffer	pointer
)	O
)	O
;	O
if	O
(	O
write	pointer
(	O
pm	pointer
->	O
fd	int
,	O
buffer	pointer
,	O
len	int
)	O
==	O
-	O
1	int
)	O
{	O
status	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"write failed: %s"	pointer
,	O
strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
break	O
;	O
}	O
}	O
found_nl	int
=	O
(	O
len	int
==	O
1	int
&&	O
buffer	pointer
[	O
0	int
]	O
==	O
'\n'	O
)	O
;	O
}	O
if	O
(	O
!	O
found_nl	int
)	O
{	O
if	O
(	O
write	pointer
(	O
pm	pointer
->	O
fd	int
,	O
"\n"	pointer
,	O
1	int
)	O
==	O
-	O
1	int
)	O
{	O
status	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"write failed: %s"	pointer
,	O
strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
}	O
}	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"Sending body..."	pointer
)	O
)	O
;	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
;	O
status	int
=	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot get body stream: %s\n"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
mu_stream_seek	function
(	O
stream	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
while	O
(	O
(	O
status	int
=	O
mu_stream_read	function
(	O
stream	pointer
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
&	O
len	int
)	O
)	O
==	O
0	int
&&	O
len	int
!=	O
0	int
)	O
{	O
if	O
(	O
write	pointer
(	O
pm	pointer
->	O
fd	int
,	O
buffer	pointer
,	O
len	int
)	O
==	O
-	O
1	int
)	O
{	O
status	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"write failed: %s\n"	pointer
,	O
strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
break	O
;	O
}	O
}	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
stream	pointer
)	O
;	O
close	pointer
(	O
pm	pointer
->	O
fd	int
)	O
;	O
rc	int
=	O
waitpid	function
(	O
pm	pointer
->	O
pid	int
,	O
&	O
exit_status	int
,	O
0	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
rc	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ECHILD	int
)	O
status	int
=	O
0	int
;	O
else	O
{	O
status	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"waitpid(%lu) failed: %s\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
pm	pointer
->	O
pid	int
,	O
strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
WIFEXITED	O
(	O
exit_status	int
)	O
)	O
{	O
exit_status	int
=	O
WEXITSTATUS	O
(	O
exit_status	int
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"%s exited with: %d\n"	pointer
,	O
pm	pointer
->	O
command	pointer
,	O
exit_status	int
)	O
)	O
;	O
status	int
=	O
(	O
exit_status	int
==	O
0	int
)	O
?	O
0	int
:	O
MU_ERR_PROCESS_EXITED	O
;	O
}	O
else	O
if	O
(	O
WIFSIGNALED	O
(	O
exit_status	int
)	O
)	O
status	int
=	O
MU_ERR_PROCESS_SIGNALED	O
;	O
else	O
status	int
=	O
MU_ERR_PROCESS_UNKNOWN_FAILURE	O
;	O
}	O
pm	pointer
->	O
pid	int
=	O
-	O
1	int
;	O
return	O
status	int
;	O
}	O
int	O
mu_progmailer_close	function
(	O
struct	O
_mu_progmailer	struct
*	O
pm	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
!	O
pm	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pm	pointer
->	O
pid	int
>	O
0	int
)	O
{	O
kill	function
(	O
SIGTERM	int
,	O
pm	pointer
->	O
pid	int
)	O
;	O
pm	pointer
->	O
pid	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
pm	pointer
->	O
sighandler	pointer
!=	O
SIG_ERR	O
&&	O
signal	function
(	O
SIGCHLD	int
,	O
pm	pointer
->	O
sighandler	pointer
)	O
==	O
SIG_ERR	O
)	O
{	O
status	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"resetting SIGCHLD failed: %s\n"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
}	O
pm	pointer
->	O
sighandler	pointer
=	O
SIG_ERR	O
;	O
return	O
status	int
;	O
}	O
