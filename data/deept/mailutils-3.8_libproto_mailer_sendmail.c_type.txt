static	O
void	O
sendmail_destroy	function
(	O
mu_mailer_t	pointer
)	O
;	O
static	O
int	O
sendmail_open	function
(	O
mu_mailer_t	pointer
,	O
int	O
)	O
;	O
static	O
int	O
sendmail_close	function
(	O
mu_mailer_t	pointer
)	O
;	O
static	O
int	O
sendmail_send_message	function
(	O
mu_mailer_t	pointer
,	O
mu_message_t	pointer
,	O
mu_address_t	pointer
,	O
mu_address_t	pointer
)	O
;	O
static	O
int	O
_url_sendmail_init	function
(	O
mu_url_t	pointer
url	pointer
)	O
{	O
if	O
(	O
url	pointer
->	O
path	pointer
==	O
NULL	O
)	O
if	O
(	O
(	O
url	pointer
->	O
path	pointer
=	O
strdup	function
(	O
PATH_SENDMAIL	O
)	O
)	O
==	O
0	int
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
int	O
_mu_mailer_sendmail_init	function
(	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
int	O
status	int
;	O
mu_progmailer_t	pointer
pm	pointer
;	O
status	int
=	O
mu_progmailer_create	function
(	O
&	O
pm	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mailer	pointer
->	O
data	pointer
=	O
pm	pointer
;	O
mailer	pointer
->	O
_destroy	pointer
=	O
sendmail_destroy	function
;	O
mailer	pointer
->	O
_open	pointer
=	O
sendmail_open	function
;	O
mailer	pointer
->	O
_close	pointer
=	O
sendmail_close	function
;	O
mailer	pointer
->	O
_send_message	pointer
=	O
sendmail_send_message	function
;	O
{	O
mu_property_t	pointer
property	pointer
=	O
NULL	O
;	O
mu_mailer_get_property	function
(	O
mailer	pointer
,	O
&	O
property	pointer
)	O
;	O
mu_property_set_value	function
(	O
property	pointer
,	O
"TYPE"	pointer
,	O
"SENDMAIL"	pointer
,	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
sendmail_destroy	function
(	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
mu_progmailer_destroy	function
(	O
(	O
mu_progmailer_t	pointer
*	O
)	O
&	O
mailer	pointer
->	O
data	pointer
)	O
;	O
}	O
static	O
int	O
sendmail_open	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
int	O
flags	int
)	O
{	O
mu_progmailer_t	pointer
pm	pointer
=	O
mailer	pointer
->	O
data	pointer
;	O
int	O
status	int
;	O
const	O
char	O
*	O
path	pointer
;	O
if	O
(	O
pm	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mailer	pointer
->	O
flags	int
=	O
flags	int
;	O
if	O
(	O
(	O
status	int
=	O
mu_url_sget_path	function
(	O
mailer	pointer
->	O
url	pointer
,	O
&	O
path	pointer
)	O
)	O
)	O
return	O
status	int
;	O
if	O
(	O
access	function
(	O
path	pointer
,	O
X_OK	int
)	O
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
status	int
=	O
mu_progmailer_set_command	function
(	O
pm	pointer
,	O
path	pointer
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"sendmail binary: %s"	pointer
,	O
path	pointer
)	O
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
sendmail_close	function
(	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
return	O
mu_progmailer_close	function
(	O
mailer	pointer
->	O
data	pointer
)	O
;	O
}	O
static	O
int	O
mailer_property_is_set	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
mu_property_t	pointer
property	pointer
=	O
NULL	O
;	O
mu_mailer_get_property	function
(	O
mailer	pointer
,	O
&	O
property	pointer
)	O
;	O
return	O
mu_property_is_set	function
(	O
property	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
int	O
sendmail_send_message	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
mu_address_t	pointer
from	pointer
,	O
mu_address_t	pointer
to	pointer
)	O
{	O
mu_progmailer_t	pointer
pm	pointer
=	O
mailer	pointer
->	O
data	pointer
;	O
int	O
argc	int
=	O
0	int
;	O
const	O
char	O
*	O
*	O
argvec	pointer
=	O
NULL	O
;	O
size_t	long
tocount	long
=	O
0	int
;	O
const	O
char	O
*	O
emailfrom	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
if	O
(	O
!	O
pm	pointer
)	O
return	O
EINVAL	int
;	O
argc	int
++	O
;	O
argc	int
++	O
;	O
argc	int
++	O
;	O
if	O
(	O
from	pointer
)	O
{	O
if	O
(	O
(	O
status	int
=	O
mu_address_sget_email	function
(	O
from	pointer
,	O
1	int
,	O
&	O
emailfrom	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot get recipient email: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
if	O
(	O
!	O
emailfrom	pointer
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"envelope from (%s) not fully qualifed\n"	pointer
,	O
emailfrom	pointer
)	O
)	O
;	O
return	O
MU_ERR_INVALID_EMAIL	O
;	O
}	O
argc	int
+=	O
2	int
;	O
}	O
if	O
(	O
to	pointer
)	O
{	O
status	int
=	O
mu_address_get_email_count	function
(	O
to	pointer
,	O
&	O
tocount	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
tocount	long
==	O
0	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"missing recipients"	pointer
)	O
)	O
;	O
return	O
MU_ERR_NOENT	O
;	O
}	O
argc	int
+=	O
tocount	long
;	O
}	O
argc	int
++	O
;	O
if	O
(	O
(	O
argvec	pointer
=	O
calloc	function
(	O
argc	int
,	O
sizeof	O
(	O
*	O
argvec	pointer
)	O
)	O
)	O
==	O
0	int
)	O
return	O
ENOMEM	int
;	O
argc	int
=	O
0	int
;	O
if	O
(	O
mu_progmailer_sget_command	function
(	O
pm	pointer
,	O
&	O
argvec	pointer
[	O
argc	int
]	O
)	O
||	O
argvec	pointer
[	O
argc	int
]	O
==	O
NULL	O
)	O
{	O
free	function
(	O
argvec	pointer
)	O
;	O
return	O
EINVAL	int
;	O
}	O
argc	int
++	O
;	O
argvec	pointer
[	O
argc	int
++	O
]	O
=	O
"-oi"	pointer
;	O
if	O
(	O
from	pointer
)	O
{	O
argvec	pointer
[	O
argc	int
++	O
]	O
=	O
"-f"	pointer
;	O
argvec	pointer
[	O
argc	int
++	O
]	O
=	O
emailfrom	pointer
;	O
}	O
if	O
(	O
!	O
to	pointer
||	O
mailer_property_is_set	function
(	O
mailer	pointer
,	O
"READ_RECIPIENTS"	pointer
)	O
)	O
{	O
argvec	pointer
[	O
argc	int
++	O
]	O
=	O
"-t"	pointer
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
size_t	long
count	long
=	O
0	int
;	O
mu_address_get_count	function
(	O
to	pointer
,	O
&	O
count	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	long
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
email	pointer
;	O
if	O
(	O
(	O
status	int
=	O
mu_address_sget_email	function
(	O
to	pointer
,	O
i	long
,	O
&	O
email	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
free	function
(	O
argvec	pointer
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot get email of recipient #%lu: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
i	long
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
if	O
(	O
!	O
email	pointer
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"envelope to (%s) not fully qualifed"	pointer
,	O
email	pointer
)	O
)	O
;	O
free	function
(	O
argvec	pointer
)	O
;	O
return	O
MU_ERR_INVALID_EMAIL	O
;	O
}	O
argvec	pointer
[	O
argc	int
++	O
]	O
=	O
email	pointer
;	O
}	O
}	O
argvec	pointer
[	O
argc	int
]	O
=	O
NULL	O
;	O
status	int
=	O
mu_progmailer_open	function
(	O
pm	pointer
,	O
(	O
char	O
*	O
*	O
)	O
argvec	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_progmailer_send	function
(	O
pm	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_observable_notify	function
(	O
mailer	pointer
->	O
observable	pointer
,	O
MU_EVT_MAILER_MESSAGE_SENT	int
,	O
msg	pointer
)	O
;	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"progmailer error: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
)	O
;	O
}	O
free	function
(	O
argvec	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
struct	O
_mu_record	struct
_sendmail_record	struct
=	O
{	O
MU_SENDMAIL_PRIO	int
,	O
MU_SENDMAIL_SCHEME	pointer
,	O
MU_RECORD_DEFAULT	int
,	O
MU_URL_SCHEME	int
|	O
MU_URL_PATH	int
,	O
MU_URL_SCHEME	int
,	O
_url_sendmail_init	function
,	O
_mu_mailer_mailbox_init	function
,	O
_mu_mailer_sendmail_init	function
,	O
_mu_mailer_folder_init	function
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
mu_record_t	pointer
mu_sendmail_record	pointer
=	O
&	O
_sendmail_record	struct
;	O
