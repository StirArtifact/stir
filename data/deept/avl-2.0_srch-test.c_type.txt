int	O
seq_search	function
(	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
if	O
(	O
array	array
[	O
i	int
]	O
==	O
key	int
)	O
return	O
i	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
seq_sentinel_search	function
(	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
*	O
p	pointer
;	O
array	array
[	O
n	int
]	O
=	O
key	int
;	O
for	O
(	O
p	pointer
=	O
array	array
;	O
*	O
p	pointer
!=	O
key	int
;	O
p	pointer
++	O
)	O
;	O
return	O
p	pointer
-	O
array	array
<	O
n	int
?	O
p	pointer
-	O
array	array
:	O
-	O
1	int
;	O
}	O
int	O
seq_sorted_search	function
(	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
if	O
(	O
key	int
<=	O
array	array
[	O
i	int
]	O
)	O
return	O
key	int
==	O
array	array
[	O
i	int
]	O
?	O
i	int
:	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
seq_sorted_sentinel_search	function
(	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
*	O
p	pointer
;	O
array	array
[	O
n	int
]	O
=	O
key	int
;	O
for	O
(	O
p	pointer
=	O
array	array
;	O
*	O
p	pointer
<	O
key	int
;	O
p	pointer
++	O
)	O
;	O
return	O
p	pointer
-	O
array	array
<	O
n	int
&&	O
*	O
p	pointer
==	O
key	int
?	O
p	pointer
-	O
array	array
:	O
-	O
1	int
;	O
}	O
int	O
seq_sorted_sentinel_search_2	function
(	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
*	O
p	pointer
;	O
array	array
[	O
n	int
]	O
=	O
INT_MAX	O
;	O
for	O
(	O
p	pointer
=	O
array	array
;	O
*	O
p	pointer
<	O
key	int
;	O
p	pointer
++	O
)	O
;	O
return	O
p	pointer
-	O
array	array
<	O
n	int
&&	O
*	O
p	pointer
==	O
key	int
?	O
p	pointer
-	O
array	array
:	O
-	O
1	int
;	O
}	O
int	O
binary_search	function
(	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
min	int
=	O
0	int
;	O
int	O
max	int
=	O
n	int
-	O
1	int
;	O
while	O
(	O
max	int
>=	O
min	int
)	O
{	O
int	O
i	int
=	O
(	O
min	int
+	O
max	int
)	O
/	O
2	int
;	O
if	O
(	O
key	int
<	O
array	array
[	O
i	int
]	O
)	O
max	int
=	O
i	int
-	O
1	int
;	O
else	O
if	O
(	O
key	int
>	O
array	array
[	O
i	int
]	O
)	O
min	int
=	O
i	int
+	O
1	int
;	O
else	O
return	O
i	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
uniform_binary_search	function
(	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
i	int
=	O
(	O
n	int
+	O
1	int
)	O
/	O
2	int
-	O
1	int
;	O
int	O
m	int
=	O
n	int
/	O
2	int
;	O
array	array
[	O
-	O
1	int
]	O
=	O
INT_MIN	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
key	int
<	O
array	array
[	O
i	int
]	O
)	O
{	O
if	O
(	O
m	int
==	O
0	int
)	O
return	O
-	O
1	int
;	O
i	int
-=	O
(	O
m	int
+	O
1	int
)	O
/	O
2	int
;	O
m	int
/=	O
2	int
;	O
}	O
else	O
if	O
(	O
key	int
>	O
array	array
[	O
i	int
]	O
)	O
{	O
if	O
(	O
m	int
==	O
0	int
)	O
return	O
-	O
1	int
;	O
i	int
+=	O
(	O
m	int
+	O
1	int
)	O
/	O
2	int
;	O
m	int
/=	O
2	int
;	O
}	O
else	O
return	O
i	int
>=	O
0	int
?	O
i	int
:	O
-	O
1	int
;	O
}	O
}	O
static	O
void	O
*	O
blp_bsearch	function
(	O
const	O
void	O
*	O
key	int
,	O
const	O
void	O
*	O
array	array
,	O
size_t	long
count	long
,	O
size_t	long
size	long
,	O
int	O
(	O
*	O
compare	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
)	O
{	O
int	O
min	int
=	O
0	int
;	O
int	O
max	int
=	O
count	long
;	O
while	O
(	O
max	int
>=	O
min	int
)	O
{	O
int	O
i	int
=	O
(	O
min	int
+	O
max	int
)	O
/	O
2	int
;	O
void	O
*	O
item	pointer
=	O
(	O
(	O
char	O
*	O
)	O
array	array
)	O
+	O
size	long
*	O
i	int
;	O
int	O
cmp	int
=	O
compare	pointer
(	O
key	int
,	O
item	pointer
)	O
;	O
if	O
(	O
cmp	int
<	O
0	int
)	O
max	int
=	O
i	int
-	O
1	int
;	O
else	O
if	O
(	O
cmp	int
>	O
0	int
)	O
min	int
=	O
i	int
+	O
1	int
;	O
else	O
return	O
item	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
int	O
compare_ints	function
(	O
const	O
void	O
*	O
pa	pointer
,	O
const	O
void	O
*	O
pb	pointer
)	O
{	O
const	O
int	O
*	O
a	pointer
=	O
pa	pointer
;	O
const	O
int	O
*	O
b	pointer
=	O
pb	pointer
;	O
if	O
(	O
*	O
a	pointer
>	O
*	O
b	pointer
)	O
return	O
1	int
;	O
else	O
if	O
(	O
*	O
a	pointer
<	O
*	O
b	pointer
)	O
return	O
-	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
static	O
int	O
binary_search_bsearch	function
(	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
*	O
p	pointer
=	O
blp_bsearch	function
(	O
&	O
key	int
,	O
array	array
,	O
n	int
,	O
sizeof	O
*	O
array	array
,	O
compare_ints	function
)	O
;	O
return	O
p	pointer
!=	O
NULL	O
?	O
p	pointer
-	O
array	array
:	O
-	O
1	int
;	O
}	O
int	O
cheat_search	function
(	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
return	O
key	int
>=	O
0	int
&&	O
key	int
<	O
n	int
?	O
key	int
:	O
-	O
1	int
;	O
}	O
struct	O
search_func	struct
{	O
const	O
char	O
*	O
name	pointer
;	O
int	O
(	O
*	O
search	pointer
)	O
(	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
;	O
}	O
;	O
struct	O
search_func	struct
search_func_tab	array
[	O
]	O
=	O
{	O
{	O
"seq_search()"	pointer
,	O
seq_search	function
}	O
,	O
{	O
"seq_sentinel_search()"	pointer
,	O
seq_sentinel_search	function
}	O
,	O
{	O
"seq_sorted_search()"	pointer
,	O
seq_sorted_search	function
}	O
,	O
{	O
"seq_sorted_sentinel_search()"	pointer
,	O
seq_sorted_sentinel_search	function
}	O
,	O
{	O
"seq_sorted_sentinel_search_2()"	pointer
,	O
seq_sorted_sentinel_search_2	function
}	O
,	O
{	O
"binary_search()"	pointer
,	O
binary_search	function
}	O
,	O
{	O
"uniform_binary_search()"	pointer
,	O
uniform_binary_search	function
}	O
,	O
{	O
"binary_search_bsearch()"	pointer
,	O
binary_search_bsearch	function
}	O
,	O
{	O
"cheat_search()"	pointer
,	O
cheat_search	function
}	O
,	O
}	O
;	O
const	O
size_t	long
n_search_func	long
=	O
sizeof	O
search_func_tab	array
/	O
sizeof	O
*	O
search_func_tab	array
;	O
static	O
void	O
start_timer	function
(	O
clock_t	long
*	O
t	pointer
)	O
{	O
clock_t	long
now	long
=	O
clock	function
(	O
)	O
;	O
while	O
(	O
now	long
==	O
clock	function
(	O
)	O
)	O
;	O
*	O
t	pointer
=	O
clock	function
(	O
)	O
;	O
}	O
static	O
void	O
stop_timer	function
(	O
clock_t	long
start	long
)	O
{	O
clock_t	long
end	long
=	O
clock	function
(	O
)	O
;	O
printf	function
(	O
"%.2f seconds\n"	pointer
,	O
(	O
(	O
double	O
)	O
(	O
end	long
-	O
start	long
)	O
)	O
/	O
CLOCKS_PER_SEC	O
)	O
;	O
}	O
static	O
void	O
test_search_func_at	function
(	O
struct	O
search_func	struct
*	O
f	pointer
,	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
,	O
int	O
expect	int
)	O
{	O
int	O
result	int
=	O
f	pointer
->	O
search	pointer
(	O
array	array
,	O
n	int
,	O
key	int
)	O
;	O
if	O
(	O
result	int
!=	O
expect	int
)	O
printf	function
(	O
"%s returned %d looking for %d - expected %d\n"	pointer
,	O
f	pointer
->	O
name	pointer
,	O
result	int
,	O
key	int
,	O
expect	int
)	O
;	O
}	O
static	O
void	O
test_search_func	function
(	O
struct	O
search_func	struct
*	O
f	pointer
,	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
)	O
{	O
static	O
const	O
int	O
shouldnt_find	array
[	O
]	O
=	O
{	O
INT_MIN	O
,	O
-	O
20	int
,	O
-	O
1	int
,	O
INT_MAX	O
}	O
;	O
int	O
i	int
;	O
printf	function
(	O
"Testing integrity of %s...  "	pointer
,	O
f	pointer
->	O
name	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
test_search_func_at	function
(	O
f	pointer
,	O
array	array
,	O
n	int
,	O
i	int
,	O
i	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
(	O
sizeof	O
shouldnt_find	array
/	O
sizeof	O
*	O
shouldnt_find	array
)	O
;	O
i	int
++	O
)	O
test_search_func_at	function
(	O
f	pointer
,	O
array	array
,	O
n	int
,	O
shouldnt_find	array
[	O
i	int
]	O
,	O
-	O
1	int
)	O
;	O
printf	function
(	O
"done\n"	pointer
)	O
;	O
}	O
static	O
void	O
time_successful_search	function
(	O
struct	O
search_func	struct
*	O
f	pointer
,	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
n_iter	int
)	O
{	O
clock_t	long
timer	long
;	O
printf	function
(	O
"Timing %d sets of successful searches...  "	pointer
,	O
n_iter	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
start_timer	function
(	O
&	O
timer	long
)	O
;	O
while	O
(	O
n_iter	int
--	O
>	O
0	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
f	pointer
->	O
search	pointer
(	O
array	array
,	O
n	int
,	O
i	int
)	O
;	O
}	O
stop_timer	function
(	O
timer	long
)	O
;	O
}	O
static	O
void	O
time_unsuccessful_search	function
(	O
struct	O
search_func	struct
*	O
f	pointer
,	O
int	O
array	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
n_iter	int
)	O
{	O
clock_t	long
timer	long
;	O
printf	function
(	O
"Timing %d sets of unsuccessful searches...  "	pointer
,	O
n_iter	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
start_timer	function
(	O
&	O
timer	long
)	O
;	O
while	O
(	O
n_iter	int
--	O
>	O
0	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
f	pointer
->	O
search	pointer
(	O
array	array
,	O
n	int
,	O
-	O
i	int
)	O
;	O
}	O
stop_timer	function
(	O
timer	long
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
void	O
)	O
{	O
size_t	long
i	int
;	O
fputs	function
(	O
"usage: srch-test <algorithm> <array-size> <n-iterations>\n"	pointer
"where <algorithm> is one of the following:\n"	pointer
,	O
stdout	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_search_func	long
;	O
i	int
++	O
)	O
printf	function
(	O
"        %u for %s\n"	pointer
,	O
(	O
unsigned	O
)	O
i	int
+	O
1	int
,	O
search_func_tab	array
[	O
i	int
]	O
.	O
name	pointer
)	O
;	O
fputs	function
(	O
"      <array-size> is the size of the array to search, and\n"	pointer
"      <n-iterations> is the number of times to iterate.\n"	pointer
,	O
stdout	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
int	O
stoi	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
long	O
x	long
=	O
strtol	function
(	O
s	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
return	O
x	long
>=	O
INT_MIN	O
&&	O
x	long
<=	O
INT_MAX	O
?	O
x	long
:	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
struct	O
search_func	struct
*	O
f	pointer
;	O
int	O
*	O
array	array
,	O
n	int
;	O
int	O
n_iter	int
;	O
if	O
(	O
argc	int
!=	O
4	int
)	O
usage	function
(	O
)	O
;	O
{	O
long	O
algorithm	long
=	O
stoi	function
(	O
argv	array
[	O
1	int
]	O
)	O
-	O
1	int
;	O
if	O
(	O
algorithm	long
<	O
0	int
||	O
algorithm	long
>	O
(	O
long	O
)	O
n_search_func	long
)	O
usage	function
(	O
)	O
;	O
f	pointer
=	O
&	O
search_func_tab	array
[	O
algorithm	long
]	O
;	O
}	O
n	int
=	O
stoi	function
(	O
argv	array
[	O
2	int
]	O
)	O
;	O
n_iter	int
=	O
stoi	function
(	O
argv	array
[	O
3	int
]	O
)	O
;	O
if	O
(	O
n	int
<	O
1	int
||	O
n_iter	int
<	O
1	int
)	O
usage	function
(	O
)	O
;	O
array	array
=	O
malloc	function
(	O
(	O
n	int
+	O
2	int
)	O
*	O
sizeof	O
*	O
array	array
)	O
;	O
if	O
(	O
array	array
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"out of memory\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
array	array
++	O
;	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
array	array
[	O
i	int
]	O
=	O
i	int
;	O
}	O
test_search_func	function
(	O
f	pointer
,	O
array	array
,	O
n	int
)	O
;	O
time_successful_search	function
(	O
f	pointer
,	O
array	array
,	O
n	int
,	O
n_iter	int
)	O
;	O
time_unsuccessful_search	function
(	O
f	pointer
,	O
array	array
,	O
n	int
,	O
n_iter	int
)	O
;	O
free	function
(	O
array	array
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
