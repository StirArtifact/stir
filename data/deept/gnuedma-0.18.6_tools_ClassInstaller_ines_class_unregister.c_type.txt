typedef	O
EChar	char
my_string	array
[	O
80	int
]	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
i	int
,	O
n	int
,	O
id	int
,	O
n_depend	int
;	O
int	O
v1	int
,	O
v2	int
;	O
my_string	array
aux	array
;	O
my_string	array
aux1	array
;	O
my_string	array
module_name	array
;	O
EChar	char
*	O
idf_name	pointer
;	O
EChar	char
*	O
impl_name	pointer
;	O
EChar	char
class_name	array
[	O
1024	int
]	O
;	O
EPChar	pointer
the_path	pointer
;	O
printf	function
(	O
"%s"	pointer
,	O
"\nINES (INstall EDMA System) Class Unregister"	pointer
)	O
;	O
printf	function
(	O
"\nVersion %s"	pointer
,	O
THIS_VERSION	pointer
)	O
;	O
printf	function
(	O
"\n%s\n"	pointer
,	O
COPYRIGHT	pointer
)	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
"\nWrong parameter number"	pointer
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
"\nUsage: ines_uninstaller [-version] version "	pointer
"EDMA_CLASS_NAME\n\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
EDMAInit	function
(	O
)	O
;	O
if	O
(	O
strcasecmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"--version"	pointer
)	O
==	O
0	int
)	O
{	O
sscanf	function
(	O
argv	array
[	O
2	int
]	O
,	O
"%d.%d"	pointer
,	O
&	O
v1	int
,	O
&	O
v2	int
)	O
;	O
strcpy	function
(	O
class_name	array
,	O
argv	array
[	O
3	int
]	O
)	O
;	O
}	O
else	O
{	O
v1	int
=	O
v2	int
=	O
-	O
1	int
;	O
strcpy	function
(	O
class_name	array
,	O
argv	array
[	O
1	int
]	O
)	O
;	O
}	O
printf	function
(	O
"--------------------------------------\n"	pointer
)	O
;	O
printf	function
(	O
"Unregistering class '%s'\n"	pointer
,	O
class_name	array
)	O
;	O
if	O
(	O
v1	int
!=	O
-	O
1	int
)	O
{	O
printf	function
(	O
"+ Looking for class version %d.%d..."	pointer
,	O
v1	int
,	O
v2	int
)	O
;	O
id	int
=	O
edma_get_class_id_with_version	function
(	O
class_name	array
,	O
v1	int
,	O
v2	int
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
"+ Looking for latest class version..."	pointer
)	O
;	O
id	int
=	O
edma_get_class_id	function
(	O
class_name	array
)	O
;	O
v1	int
=	O
edma_get_class_major_version	function
(	O
id	int
)	O
;	O
v2	int
=	O
edma_get_class_minor_version	function
(	O
id	int
)	O
;	O
}	O
if	O
(	O
id	int
==	O
-	O
1	int
)	O
{	O
printf	function
(	O
"FAIL!\n"	pointer
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
"- Can't locate class. Aborting\n"	pointer
)	O
;	O
EDMAEnd	function
(	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
printf	function
(	O
"FOUND\n"	pointer
)	O
;	O
printf	function
(	O
"  > Located class       : '%s' v%d.%d with Id:%d\n"	pointer
,	O
class_name	array
,	O
v1	int
,	O
v2	int
,	O
id	int
)	O
;	O
i	int
=	O
edma_get_class_module	function
(	O
id	int
,	O
module_name	array
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
"- Cannot find class Module Name. Aborting\n"	pointer
)	O
;	O
EDMAEnd	function
(	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
the_path	pointer
=	O
edma_get_system_path	function
(	O
)	O
;	O
idf_name	pointer
=	O
edma_get_idf_file_path	function
(	O
id	int
)	O
;	O
impl_name	pointer
=	O
edma_get_impl_file_path	function
(	O
id	int
)	O
;	O
printf	function
(	O
"  > Interface file      : %s\n"	pointer
,	O
idf_name	pointer
)	O
;	O
printf	function
(	O
"  > Implementation file : %s\n"	pointer
,	O
impl_name	pointer
)	O
;	O
n	int
=	O
edma_get_num_reg_classes	function
(	O
)	O
;	O
printf	function
(	O
"+ Looking for Module Dependences : (%s)\n"	pointer
,	O
module_name	array
)	O
;	O
printf	function
(	O
"  > Looking in %d classes\n"	pointer
,	O
n	int
)	O
;	O
n_depend	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
id	int
==	O
i	int
)	O
continue	O
;	O
edma_get_class_module	function
(	O
i	int
,	O
aux	array
)	O
;	O
edma_get_class_name	function
(	O
i	int
,	O
aux1	array
)	O
;	O
if	O
(	O
strcmp	function
(	O
aux	array
,	O
module_name	array
)	O
==	O
0	int
)	O
{	O
printf	function
(	O
"    * Class %s depends on module %s\n"	pointer
,	O
aux1	array
,	O
module_name	array
)	O
;	O
n_depend	int
++	O
;	O
}	O
}	O
if	O
(	O
edma_get_class_repo_type	function
(	O
id	int
)	O
==	O
EDMA_LOCAL_REPO	int
)	O
{	O
printf	function
(	O
"  > Class is in a local repository.\n"	pointer
)	O
;	O
printf	function
(	O
"    Other applications using the class will not notice the change\n"	pointer
)	O
;	O
printf	function
(	O
"    until restarted. Related files will not be deleted\n"	pointer
)	O
;	O
n_depend	int
=	O
2	int
;	O
}	O
if	O
(	O
n_depend	int
<=	O
1	int
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
"+ No dependences found... "	pointer
"Uninstall implementation file is safe\n"	pointer
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
"+ %d dependencies found... "	pointer
"Uninstall implementation file is NOT SAFE\n"	pointer
,	O
n_depend	int
)	O
;	O
}	O
printf	function
(	O
"+ Testing if related files exist...\n"	pointer
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
"  > Testing Interface file existence ........"	pointer
)	O
;	O
if	O
(	O
(	O
ESint32	int
)	O
edma_smet3	function
(	O
"FILESYSTEM"	pointer
,	O
"TestFile"	pointer
,	O
idf_name	pointer
)	O
!=	O
1	int
)	O
{	O
printf	function
(	O
"FAIL!\n"	pointer
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
"     - Can't find IDF file... \n"	pointer
)	O
;	O
}	O
printf	function
(	O
"%s"	pointer
,	O
" OK\n"	pointer
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
"  > Testing Implementation file existence ..."	pointer
)	O
;	O
if	O
(	O
(	O
ESint32	int
)	O
edma_smet3	function
(	O
"FILESYSTEM"	pointer
,	O
"TestFile"	pointer
,	O
impl_name	pointer
)	O
!=	O
1	int
)	O
{	O
printf	function
(	O
"FAIL!\n"	pointer
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
"     - Can't find Implementation file... \n"	pointer
)	O
;	O
}	O
printf	function
(	O
"%s"	pointer
,	O
" OK\n"	pointer
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
"+ Freeing Class from EDMA register .........."	pointer
)	O
;	O
i	int
=	O
0	int
;	O
i	int
=	O
edma_del_stock_class_id	function
(	O
id	int
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
{	O
printf	function
(	O
"FAIL!\n"	pointer
)	O
;	O
printf	function
(	O
"\n   - Error deleting class"	pointer
)	O
;	O
EDMAEnd	function
(	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
printf	function
(	O
" OK\n"	pointer
)	O
;	O
printf	function
(	O
"\n+ Class %s Successfully unregistered\n\n"	pointer
,	O
class_name	array
)	O
;	O
printf	function
(	O
"****************************************************\n"	pointer
)	O
;	O
printf	function
(	O
"*** To completely wipe out the class from your system:\n"	pointer
)	O
;	O
printf	function
(	O
"*** Delete IDF file : %s\n"	pointer
,	O
idf_name	pointer
)	O
;	O
printf	function
(	O
"*** Shared lib: %s\n"	pointer
,	O
impl_name	pointer
)	O
;	O
printf	function
(	O
"****************************************************\n"	pointer
)	O
;	O
free	function
(	O
the_path	pointer
)	O
;	O
EDMAEnd	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
