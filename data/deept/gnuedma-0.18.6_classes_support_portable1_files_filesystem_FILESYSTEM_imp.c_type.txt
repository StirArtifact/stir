ESint32	int
EDMAPROC	O
FILESYSTEMCopyFileZZS32rS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
source	pointer
,	O
EPChar	pointer
target	pointer
,	O
ESint32	int
flags	int
)	O
{	O
edma_printf	function
(	O
"%s"	pointer
,	O
"Still Not Implemented"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMDeleteFileZS32rS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
,	O
ESint32	int
flags	int
)	O
{	O
return	O
unlink	function
(	O
name	pointer
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMFreeSpaceZrS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
)	O
{	O
struct	O
statfs	struct
buf	pointer
;	O
long	O
bs	long
,	O
ba	long
;	O
if	O
(	O
statfs	struct
(	O
name	pointer
,	O
&	O
buf	pointer
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	function
(	O
"%s"	pointer
,	O
"[FILESYSTEM::FreeSpace] Can't get filesystem info"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
bs	long
=	O
buf	pointer
.	O
f_bsize	int
;	O
ba	long
=	O
buf	pointer
.	O
f_bavail	long
/	O
1024L	int
;	O
ba	long
*=	O
bs	long
;	O
return	O
ba	long
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMGetDrivessArS32	function
(	O
CLASSID	int
id	int
,	O
EDMAT_BUFFER	struct
*	O
buf	pointer
)	O
{	O
FILE	struct
*	O
f	pointer
;	O
char	O
dev	array
[	O
80	int
]	O
;	O
char	O
mpoint	array
[	O
80	int
]	O
;	O
char	O
fstype	array
[	O
80	int
]	O
;	O
char	O
access	function
[	O
80	int
]	O
;	O
int	O
a	int
,	O
b	int
;	O
char	O
result	array
[	O
1024	int
]	O
;	O
edma_buffer_alloc	function
(	O
buf	pointer
,	O
1024	int
)	O
;	O
if	O
(	O
(	O
f	pointer
=	O
fopen	function
(	O
"/proc/mounts"	pointer
,	O
"rt"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
"Can't open /proc/mounts\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
while	O
(	O
!	O
feof	function
(	O
f	pointer
)	O
)	O
{	O
fscanf	function
(	O
f	pointer
,	O
"%s %s %s %s %d %d"	pointer
,	O
dev	array
,	O
mpoint	array
,	O
fstype	array
,	O
access	function
,	O
&	O
a	int
,	O
&	O
b	int
)	O
;	O
if	O
(	O
strstr	function
(	O
"ext2vfatnfs"	pointer
,	O
fstype	array
)	O
!=	O
0	int
)	O
{	O
sprintf	function
(	O
result	array
,	O
"%s\n"	pointer
,	O
mpoint	array
)	O
;	O
strcat	function
(	O
(	O
EPChar	pointer
)	O
buf	pointer
->	O
dat	pointer
,	O
result	array
)	O
;	O
}	O
}	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMGetFileSizeZrS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
)	O
{	O
struct	O
stat	struct
buf	pointer
;	O
if	O
(	O
(	O
stat	struct
(	O
name	pointer
,	O
&	O
buf	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	function
(	O
"%s"	pointer
,	O
"Can't get file size"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
buf	pointer
.	O
st_size	long
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMGetFileOwnerZsZrS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
)	O
{	O
struct	O
stat	struct
buf	pointer
;	O
if	O
(	O
(	O
stat	struct
(	O
name	pointer
,	O
&	O
buf	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	function
(	O
"%s"	pointer
,	O
"Can't get file owner"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
buf	pointer
.	O
st_uid	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMTestFileZZrS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
,	O
EPChar	pointer
flags	int
)	O
{	O
struct	O
stat	struct
buf	pointer
;	O
if	O
(	O
(	O
stat	struct
(	O
name	pointer
,	O
&	O
buf	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
edma_printf	function
(	O
"File %s doesn't exist"	pointer
,	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
edma_printf	function
(	O
"%s"	pointer
,	O
"Can't get file info"	pointer
)	O
;	O
perror	function
(	O
"[FILESYSTEM](TestFile):"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
1	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMCreateDirectoryZrS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
)	O
{	O
int	O
r	int
;	O
r	int
=	O
mkdir	function
(	O
name	pointer
,	O
0777	int
)	O
;	O
return	O
r	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMDeleteDirectoryZrS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
)	O
{	O
return	O
rmdir	function
(	O
name	pointer
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMChangeDirectoryZrS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
)	O
{	O
return	O
chdir	function
(	O
name	pointer
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMReadRAWDirectoryZsArS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
dir_name	pointer
,	O
EDMAT_BUFFER	struct
*	O
buf	pointer
)	O
{	O
struct	O
dirent	struct
*	O
*	O
namelist	pointer
;	O
ESint32	int
i	int
,	O
n	int
;	O
EPChar	pointer
*	O
aux	pointer
;	O
n	int
=	O
scandir	function
(	O
dir_name	pointer
,	O
&	O
namelist	pointer
,	O
0	int
,	O
alphasort	function
)	O
;	O
if	O
(	O
n	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
i	int
=	O
n	int
;	O
edma_buffer_alloc	function
(	O
buf	pointer
,	O
(	O
n	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
EPChar	pointer
)	O
)	O
;	O
aux	pointer
=	O
(	O
EPChar	pointer
*	O
)	O
buf	pointer
->	O
dat	pointer
;	O
while	O
(	O
n	int
--	O
)	O
{	O
edma_printf	function
(	O
"[FILESYSTEM] Dir entry : %s"	pointer
,	O
namelist	pointer
[	O
n	int
]	O
->	O
d_name	array
)	O
;	O
aux	pointer
[	O
n	int
]	O
=	O
strdup	function
(	O
namelist	pointer
[	O
n	int
]	O
->	O
d_name	array
)	O
;	O
free	function
(	O
namelist	pointer
[	O
n	int
]	O
)	O
;	O
}	O
aux	pointer
[	O
i	int
]	O
=	O
NULL	O
;	O
free	function
(	O
namelist	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMFreeDirectoryDatasArS32	function
(	O
CLASSID	int
id	int
,	O
EDMAT_BUFFER	struct
*	O
buf	pointer
)	O
{	O
EPChar	pointer
*	O
aux	pointer
;	O
aux	pointer
=	O
(	O
EPChar	pointer
*	O
)	O
buf	pointer
->	O
dat	pointer
;	O
while	O
(	O
*	O
aux	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
*	O
aux	pointer
)	O
;	O
aux	pointer
++	O
;	O
}	O
edma_buffer_free	function
(	O
buf	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMReadDirectoryZsOrS32	function
(	O
CLASSID	int
id	int
,	O
OBJID	int
*	O
IdObj	int
)	O
{	O
edma_printf	function
(	O
"%s"	pointer
,	O
"ReadDirectory still not implemented"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMGetFileTimeZsS32sS32sS32rS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
,	O
ESint32	int
*	O
at	pointer
,	O
ESint32	int
*	O
mt	pointer
,	O
ESint32	int
*	O
ct	pointer
)	O
{	O
struct	O
stat	struct
buf	pointer
;	O
if	O
(	O
(	O
stat	struct
(	O
name	pointer
,	O
&	O
buf	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	function
(	O
"%s"	pointer
,	O
"Can't get file time info"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
*	O
at	pointer
=	O
buf	pointer
.	O
st_atime	O
;	O
*	O
mt	pointer
=	O
buf	pointer
.	O
st_mtime	O
;	O
*	O
ct	pointer
=	O
buf	pointer
.	O
st_ctime	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMIsDirectoryZrS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
)	O
{	O
struct	O
stat	struct
buf	pointer
;	O
if	O
(	O
(	O
stat	struct
(	O
name	pointer
,	O
&	O
buf	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"IsDirectort"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
buf	pointer
.	O
st_mode	int
)	O
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMIsFileZrS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
)	O
{	O
struct	O
stat	struct
buf	pointer
;	O
if	O
(	O
(	O
stat	struct
(	O
name	pointer
,	O
&	O
buf	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"IsDirectort"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
S_ISREG	O
(	O
buf	pointer
.	O
st_mode	int
)	O
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
FILESYSTEMIsLinkZrS32	function
(	O
CLASSID	int
id	int
,	O
EPChar	pointer
name	pointer
)	O
{	O
struct	O
stat	struct
buf	pointer
;	O
if	O
(	O
(	O
lstat	function
(	O
name	pointer
,	O
&	O
buf	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"IsDirectort"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
S_ISLNK	O
(	O
buf	pointer
.	O
st_mode	int
)	O
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
