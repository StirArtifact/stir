enum	O
{	O
base	int
=	O
36	int
,	O
tmin	int
=	O
1	int
,	O
tmax	int
=	O
26	int
,	O
skew	int
=	O
38	int
,	O
damp	int
=	O
700	int
,	O
initial_bias	int
=	O
72	int
,	O
initial_n	int
=	O
0x80	int
,	O
delimiter	int
=	O
0x2D	int
}	O
;	O
static	O
unsigned	O
decode_digit	function
(	O
int	O
cp	int
)	O
{	O
if	O
(	O
cp	int
>=	O
'a'	O
&&	O
cp	int
<=	O
'z'	O
)	O
return	O
cp	int
-	O
'a'	O
;	O
if	O
(	O
cp	int
>=	O
'0'	O
&&	O
cp	int
<=	O
'9'	O
)	O
return	O
cp	int
-	O
'0'	O
+	O
26	int
;	O
if	O
(	O
cp	int
>=	O
'A'	O
&&	O
cp	int
<=	O
'Z'	O
)	O
return	O
cp	int
-	O
'A'	O
;	O
return	O
0	int
;	O
}	O
static	O
const	O
punycode_uint	O
maxint	int
=	O
-	O
1	int
;	O
static	O
punycode_uint	O
adapt	function
(	O
punycode_uint	O
delta	int
,	O
punycode_uint	O
numpoints	int
,	O
int	O
firsttime	int
)	O
_GL_ATTRIBUTE_CONST	O
;	O
static	O
punycode_uint	O
adapt	function
(	O
punycode_uint	O
delta	int
,	O
punycode_uint	O
numpoints	int
,	O
int	O
firsttime	int
)	O
{	O
punycode_uint	O
k	int
;	O
delta	int
=	O
firsttime	int
?	O
delta	int
/	O
damp	int
:	O
delta	int
>>	O
1	int
;	O
delta	int
+=	O
delta	int
/	O
numpoints	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
delta	int
>	O
(	O
(	O
base	int
-	O
tmin	int
)	O
*	O
tmax	int
)	O
/	O
2	int
;	O
k	int
+=	O
base	int
)	O
{	O
delta	int
/=	O
base	int
-	O
tmin	int
;	O
}	O
return	O
k	int
+	O
(	O
base	int
-	O
tmin	int
+	O
1	int
)	O
*	O
delta	int
/	O
(	O
delta	int
+	O
skew	int
)	O
;	O
}	O
int	O
punycode_decode	O
(	O
size_t	long
input_length	long
,	O
const	O
char	O
input	pointer
[	O
]	O
,	O
size_t	long
*	O
output_length	pointer
,	O
punycode_uint	O
output	pointer
[	O
]	O
)	O
{	O
punycode_uint	O
n	int
,	O
out	pointer
=	O
0	int
,	O
i	int
,	O
max_out	int
,	O
bias	int
,	O
oldi	int
,	O
w	int
,	O
k	int
,	O
digit	int
,	O
t	int
;	O
size_t	long
b	long
=	O
0	int
,	O
j	long
,	O
in	pointer
;	O
if	O
(	O
!	O
input_length	long
)	O
return	O
punycode_bad_input	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
input_length	long
;	O
++	O
j	long
)	O
{	O
if	O
(	O
!	O
basic	O
(	O
input	pointer
[	O
j	long
]	O
)	O
)	O
return	O
punycode_bad_input	O
;	O
if	O
(	O
input	pointer
[	O
j	long
]	O
==	O
delimiter	int
)	O
b	long
=	O
j	long
;	O
}	O
max_out	int
=	O
*	O
output_length	pointer
>	O
maxint	int
?	O
maxint	int
:	O
(	O
punycode_uint	O
)	O
*	O
output_length	pointer
;	O
if	O
(	O
input	pointer
[	O
b	long
]	O
==	O
delimiter	int
)	O
{	O
if	O
(	O
!	O
b	long
||	O
b	long
==	O
input_length	long
-	O
1	int
)	O
return	O
punycode_bad_input	O
;	O
if	O
(	O
b	long
>=	O
max_out	int
)	O
return	O
punycode_big_output	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
b	long
;	O
j	long
++	O
)	O
output	pointer
[	O
out	pointer
++	O
]	O
=	O
input	pointer
[	O
j	long
]	O
;	O
b	long
+=	O
1	int
;	O
}	O
n	int
=	O
initial_n	int
;	O
i	int
=	O
0	int
;	O
bias	int
=	O
initial_bias	int
;	O
for	O
(	O
in	pointer
=	O
b	long
;	O
in	pointer
<	O
input_length	long
;	O
++	O
out	pointer
)	O
{	O
for	O
(	O
oldi	int
=	O
i	int
,	O
w	int
=	O
1	int
,	O
k	int
=	O
base	int
;	O
;	O
k	int
+=	O
base	int
)	O
{	O
if	O
(	O
in	pointer
>=	O
input_length	long
)	O
return	O
punycode_bad_input	O
;	O
digit	int
=	O
decode_digit	function
(	O
input	pointer
[	O
in	pointer
++	O
]	O
)	O
;	O
if	O
(	O
digit	int
>=	O
base	int
)	O
return	O
punycode_bad_input	O
;	O
if	O
(	O
digit	int
>	O
(	O
maxint	int
-	O
i	int
)	O
/	O
w	int
)	O
return	O
punycode_overflow	O
;	O
i	int
+=	O
digit	int
*	O
w	int
;	O
t	int
=	O
k	int
<=	O
bias	int
?	O
tmin	int
:	O
k	int
>=	O
bias	int
+	O
tmax	int
?	O
tmax	int
:	O
k	int
-	O
bias	int
;	O
if	O
(	O
digit	int
<	O
t	int
)	O
break	O
;	O
if	O
(	O
w	int
>	O
maxint	int
/	O
(	O
base	int
-	O
t	int
)	O
)	O
return	O
punycode_overflow	O
;	O
w	int
*=	O
(	O
base	int
-	O
t	int
)	O
;	O
}	O
bias	int
=	O
adapt	function
(	O
i	int
-	O
oldi	int
,	O
out	pointer
+	O
1	int
,	O
oldi	int
==	O
0	int
)	O
;	O
if	O
(	O
i	int
/	O
(	O
out	pointer
+	O
1	int
)	O
>	O
maxint	int
-	O
n	int
)	O
return	O
punycode_overflow	O
;	O
n	int
+=	O
i	int
/	O
(	O
out	pointer
+	O
1	int
)	O
;	O
if	O
(	O
n	int
>	O
0x10FFFF	int
||	O
(	O
n	int
>=	O
0xD800	int
&&	O
n	int
<=	O
0xDBFF	int
)	O
)	O
return	O
punycode_bad_input	O
;	O
i	int
%=	O
(	O
out	pointer
+	O
1	int
)	O
;	O
if	O
(	O
out	pointer
>=	O
max_out	int
)	O
return	O
punycode_big_output	O
;	O
memmove	function
(	O
output	pointer
+	O
i	int
+	O
1	int
,	O
output	pointer
+	O
i	int
,	O
(	O
out	pointer
-	O
i	int
)	O
*	O
sizeof	O
*	O
output	pointer
)	O
;	O
output	pointer
[	O
i	int
++	O
]	O
=	O
n	int
;	O
}	O
*	O
output_length	pointer
=	O
(	O
size_t	long
)	O
out	pointer
;	O
return	O
punycode_success	O
;	O
}	O
__typeof__	O
(	O
_idn2_punycode_decode_internal	function
)	O
_idn2_punycode_decode	O
__attribute__	O
(	O
(	O
visibility	O
(	O
"default"	pointer
)	O
,	O
alias	O
(	O
"_idn2_punycode_decode_internal"	pointer
)	O
)	O
)	O
;	O
__asm__	O
(	O
".symver _idn2_punycode_decode, _idn2_punycode_decode@IDN2_0.0.0"	pointer
)	O
;	O
