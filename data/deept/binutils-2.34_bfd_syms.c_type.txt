bfd_boolean	int
bfd_is_local_label	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
sym	pointer
)	O
{	O
if	O
(	O
(	O
sym	pointer
->	O
flags	int
&	O
(	O
BSF_GLOBAL	O
|	O
BSF_WEAK	O
|	O
BSF_FILE	O
|	O
BSF_SECTION_SYM	O
)	O
)	O
!=	O
0	int
)	O
return	O
FALSE	int
;	O
if	O
(	O
sym	pointer
->	O
name	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
return	O
bfd_is_local_label_name	function
(	O
abfd	pointer
,	O
sym	pointer
->	O
name	pointer
)	O
;	O
}	O
bfd_boolean	int
bfd_set_symtab	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
*	O
location	pointer
,	O
unsigned	O
int	O
symcount	int
)	O
{	O
if	O
(	O
abfd	pointer
->	O
format	enum
!=	O
bfd_object	int
||	O
bfd_read_p	O
(	O
abfd	pointer
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
abfd	pointer
->	O
outsymbols	pointer
=	O
location	pointer
;	O
abfd	pointer
->	O
symcount	int
=	O
symcount	int
;	O
return	O
TRUE	int
;	O
}	O
void	O
bfd_print_symbol_vandf	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
arg	pointer
,	O
asymbol	struct
*	O
symbol	pointer
)	O
{	O
FILE	struct
*	O
file	pointer
=	O
(	O
FILE	struct
*	O
)	O
arg	pointer
;	O
flagword	int
type	enum
=	O
symbol	pointer
->	O
flags	int
;	O
if	O
(	O
symbol	pointer
->	O
section	pointer
!=	O
NULL	O
)	O
bfd_fprintf_vma	function
(	O
abfd	pointer
,	O
file	pointer
,	O
symbol	pointer
->	O
value	long
+	O
symbol	pointer
->	O
section	pointer
->	O
vma	long
)	O
;	O
else	O
bfd_fprintf_vma	function
(	O
abfd	pointer
,	O
file	pointer
,	O
symbol	pointer
->	O
value	long
)	O
;	O
fprintf	function
(	O
file	pointer
,	O
" %c%c%c%c%c%c%c"	pointer
,	O
(	O
(	O
type	enum
&	O
BSF_LOCAL	O
)	O
?	O
(	O
type	enum
&	O
BSF_GLOBAL	O
)	O
?	O
'!'	O
:	O
'l'	O
:	O
(	O
type	enum
&	O
BSF_GLOBAL	O
)	O
?	O
'g'	O
:	O
(	O
type	enum
&	O
BSF_GNU_UNIQUE	O
)	O
?	O
'u'	O
:	O
' '	O
)	O
,	O
(	O
type	enum
&	O
BSF_WEAK	O
)	O
?	O
'w'	O
:	O
' '	O
,	O
(	O
type	enum
&	O
BSF_CONSTRUCTOR	O
)	O
?	O
'C'	O
:	O
' '	O
,	O
(	O
type	enum
&	O
BSF_WARNING	O
)	O
?	O
'W'	O
:	O
' '	O
,	O
(	O
type	enum
&	O
BSF_INDIRECT	O
)	O
?	O
'I'	O
:	O
(	O
type	enum
&	O
BSF_GNU_INDIRECT_FUNCTION	O
)	O
?	O
'i'	O
:	O
' '	O
,	O
(	O
type	enum
&	O
BSF_DEBUGGING	O
)	O
?	O
'd'	O
:	O
(	O
type	enum
&	O
BSF_DYNAMIC	O
)	O
?	O
'D'	O
:	O
' '	O
,	O
(	O
(	O
type	enum
&	O
BSF_FUNCTION	O
)	O
?	O
'F'	O
:	O
(	O
(	O
type	enum
&	O
BSF_FILE	O
)	O
?	O
'f'	O
:	O
(	O
(	O
type	enum
&	O
BSF_OBJECT	O
)	O
?	O
'O'	O
:	O
' '	O
)	O
)	O
)	O
)	O
;	O
}	O
asymbol	struct
*	O
_bfd_generic_make_empty_symbol	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
bfd_size_type	long
amt	long
=	O
sizeof	O
(	O
asymbol	struct
)	O
;	O
asymbol	struct
*	O
new_symbol	pointer
=	O
(	O
asymbol	struct
*	O
)	O
bfd_zalloc	function
(	O
abfd	pointer
,	O
amt	long
)	O
;	O
if	O
(	O
new_symbol	pointer
)	O
new_symbol	pointer
->	O
the_bfd	pointer
=	O
abfd	pointer
;	O
return	O
new_symbol	pointer
;	O
}	O
struct	O
section_to_type	struct
{	O
const	O
char	O
*	O
section	pointer
;	O
char	O
type	enum
;	O
}	O
;	O
static	O
const	O
struct	O
section_to_type	struct
stt	array
[	O
]	O
=	O
{	O
{	O
".bss"	pointer
,	O
'b'	O
}	O
,	O
{	O
"code"	pointer
,	O
't'	O
}	O
,	O
{	O
".data"	pointer
,	O
'd'	O
}	O
,	O
{	O
"*DEBUG*"	pointer
,	O
'N'	O
}	O
,	O
{	O
".debug"	pointer
,	O
'N'	O
}	O
,	O
{	O
".drectve"	pointer
,	O
'i'	O
}	O
,	O
{	O
".edata"	pointer
,	O
'e'	O
}	O
,	O
{	O
".fini"	pointer
,	O
't'	O
}	O
,	O
{	O
".idata"	pointer
,	O
'i'	O
}	O
,	O
{	O
".init"	pointer
,	O
't'	O
}	O
,	O
{	O
".pdata"	pointer
,	O
'p'	O
}	O
,	O
{	O
".rdata"	pointer
,	O
'r'	O
}	O
,	O
{	O
".rodata"	pointer
,	O
'r'	O
}	O
,	O
{	O
".sbss"	pointer
,	O
's'	O
}	O
,	O
{	O
".scommon"	pointer
,	O
'c'	O
}	O
,	O
{	O
".sdata"	pointer
,	O
'g'	O
}	O
,	O
{	O
".text"	pointer
,	O
't'	O
}	O
,	O
{	O
"vars"	pointer
,	O
'd'	O
}	O
,	O
{	O
"zerovars"	pointer
,	O
'b'	O
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
char	O
coff_section_type	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
const	O
struct	O
section_to_type	struct
*	O
t	pointer
;	O
for	O
(	O
t	pointer
=	O
&	O
stt	array
[	O
0	int
]	O
;	O
t	pointer
->	O
section	pointer
;	O
t	pointer
++	O
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
t	pointer
->	O
section	pointer
)	O
;	O
if	O
(	O
strncmp	function
(	O
s	pointer
,	O
t	pointer
->	O
section	pointer
,	O
len	long
)	O
==	O
0	int
&&	O
memchr	function
(	O
".$0123456789"	pointer
,	O
s	pointer
[	O
len	long
]	O
,	O
13	int
)	O
!=	O
0	int
)	O
return	O
t	pointer
->	O
type	enum
;	O
}	O
return	O
'?'	O
;	O
}	O
static	O
char	O
decode_section_type	function
(	O
const	O
struct	O
bfd_section	struct
*	O
section	pointer
)	O
{	O
if	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_CODE	int
)	O
return	O
't'	O
;	O
if	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_DATA	int
)	O
{	O
if	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_READONLY	int
)	O
return	O
'r'	O
;	O
else	O
if	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_SMALL_DATA	int
)	O
return	O
'g'	O
;	O
else	O
return	O
'd'	O
;	O
}	O
if	O
(	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_HAS_CONTENTS	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_SMALL_DATA	int
)	O
return	O
's'	O
;	O
else	O
return	O
'b'	O
;	O
}	O
if	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_DEBUGGING	int
)	O
return	O
'N'	O
;	O
if	O
(	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_HAS_CONTENTS	int
)	O
&&	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_READONLY	int
)	O
)	O
return	O
'n'	O
;	O
return	O
'?'	O
;	O
}	O
int	O
bfd_decode_symclass	function
(	O
asymbol	struct
*	O
symbol	pointer
)	O
{	O
char	O
c	struct
;	O
if	O
(	O
symbol	pointer
->	O
section	pointer
&&	O
bfd_is_com_section	function
(	O
symbol	pointer
->	O
section	pointer
)	O
)	O
return	O
'C'	O
;	O
if	O
(	O
bfd_is_und_section	function
(	O
symbol	pointer
->	O
section	pointer
)	O
)	O
{	O
if	O
(	O
symbol	pointer
->	O
flags	int
&	O
BSF_WEAK	O
)	O
{	O
if	O
(	O
symbol	pointer
->	O
flags	int
&	O
BSF_OBJECT	O
)	O
return	O
'v'	O
;	O
else	O
return	O
'w'	O
;	O
}	O
else	O
return	O
'U'	O
;	O
}	O
if	O
(	O
bfd_is_ind_section	function
(	O
symbol	pointer
->	O
section	pointer
)	O
)	O
return	O
'I'	O
;	O
if	O
(	O
symbol	pointer
->	O
flags	int
&	O
BSF_GNU_INDIRECT_FUNCTION	O
)	O
return	O
'i'	O
;	O
if	O
(	O
symbol	pointer
->	O
flags	int
&	O
BSF_WEAK	O
)	O
{	O
if	O
(	O
symbol	pointer
->	O
flags	int
&	O
BSF_OBJECT	O
)	O
return	O
'V'	O
;	O
else	O
return	O
'W'	O
;	O
}	O
if	O
(	O
symbol	pointer
->	O
flags	int
&	O
BSF_GNU_UNIQUE	O
)	O
return	O
'u'	O
;	O
if	O
(	O
!	O
(	O
symbol	pointer
->	O
flags	int
&	O
(	O
BSF_GLOBAL	O
|	O
BSF_LOCAL	O
)	O
)	O
)	O
return	O
'?'	O
;	O
if	O
(	O
bfd_is_abs_section	function
(	O
symbol	pointer
->	O
section	pointer
)	O
)	O
c	struct
=	O
'a'	O
;	O
else	O
if	O
(	O
symbol	pointer
->	O
section	pointer
)	O
{	O
c	struct
=	O
decode_section_type	function
(	O
symbol	pointer
->	O
section	pointer
)	O
;	O
if	O
(	O
c	struct
==	O
'?'	O
)	O
c	struct
=	O
coff_section_type	function
(	O
symbol	pointer
->	O
section	pointer
->	O
name	pointer
)	O
;	O
}	O
else	O
return	O
'?'	O
;	O
if	O
(	O
symbol	pointer
->	O
flags	int
&	O
BSF_GLOBAL	O
)	O
c	struct
=	O
TOUPPER	O
(	O
c	struct
)	O
;	O
return	O
c	struct
;	O
}	O
bfd_boolean	int
bfd_is_undefined_symclass	function
(	O
int	O
symclass	int
)	O
{	O
return	O
symclass	int
==	O
'U'	O
||	O
symclass	int
==	O
'w'	O
||	O
symclass	int
==	O
'v'	O
;	O
}	O
void	O
bfd_symbol_info	function
(	O
asymbol	struct
*	O
symbol	pointer
,	O
symbol_info	struct
*	O
ret	pointer
)	O
{	O
ret	pointer
->	O
type	enum
=	O
bfd_decode_symclass	function
(	O
symbol	pointer
)	O
;	O
if	O
(	O
bfd_is_undefined_symclass	function
(	O
ret	pointer
->	O
type	enum
)	O
)	O
ret	pointer
->	O
value	long
=	O
0	int
;	O
else	O
ret	pointer
->	O
value	long
=	O
symbol	pointer
->	O
value	long
+	O
symbol	pointer
->	O
section	pointer
->	O
vma	long
;	O
ret	pointer
->	O
name	pointer
=	O
symbol	pointer
->	O
name	pointer
;	O
}	O
long	O
_bfd_generic_read_minisymbols	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_boolean	int
dynamic	int
,	O
void	O
*	O
*	O
minisymsp	pointer
,	O
unsigned	O
int	O
*	O
sizep	pointer
)	O
{	O
long	O
storage	long
;	O
asymbol	struct
*	O
*	O
syms	pointer
=	O
NULL	O
;	O
long	O
symcount	int
;	O
if	O
(	O
dynamic	int
)	O
storage	long
=	O
bfd_get_dynamic_symtab_upper_bound	O
(	O
abfd	pointer
)	O
;	O
else	O
storage	long
=	O
bfd_get_symtab_upper_bound	O
(	O
abfd	pointer
)	O
;	O
if	O
(	O
storage	long
<	O
0	int
)	O
goto	O
error_return	O
;	O
if	O
(	O
storage	long
==	O
0	int
)	O
return	O
0	int
;	O
syms	pointer
=	O
(	O
asymbol	struct
*	O
*	O
)	O
bfd_malloc	function
(	O
storage	long
)	O
;	O
if	O
(	O
syms	pointer
==	O
NULL	O
)	O
goto	O
error_return	O
;	O
if	O
(	O
dynamic	int
)	O
symcount	int
=	O
bfd_canonicalize_dynamic_symtab	O
(	O
abfd	pointer
,	O
syms	pointer
)	O
;	O
else	O
symcount	int
=	O
bfd_canonicalize_symtab	O
(	O
abfd	pointer
,	O
syms	pointer
)	O
;	O
if	O
(	O
symcount	int
<	O
0	int
)	O
goto	O
error_return	O
;	O
if	O
(	O
symcount	int
==	O
0	int
)	O
free	function
(	O
syms	pointer
)	O
;	O
else	O
{	O
*	O
minisymsp	pointer
=	O
syms	pointer
;	O
*	O
sizep	pointer
=	O
sizeof	O
(	O
asymbol	struct
*	O
)	O
;	O
}	O
return	O
symcount	int
;	O
error_return	O
:	O
bfd_set_error	function
(	O
bfd_error_no_symbols	int
)	O
;	O
if	O
(	O
syms	pointer
!=	O
NULL	O
)	O
free	function
(	O
syms	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
asymbol	struct
*	O
_bfd_generic_minisymbol_to_symbol	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd_boolean	int
dynamic	int
ATTRIBUTE_UNUSED	O
,	O
const	O
void	O
*	O
minisym	pointer
,	O
asymbol	struct
*	O
sym	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
*	O
(	O
asymbol	struct
*	O
*	O
)	O
minisym	pointer
;	O
}	O
struct	O
indexentry	struct
{	O
bfd_vma	long
val	array
;	O
bfd_byte	char
*	O
stab	pointer
;	O
bfd_byte	char
*	O
str	pointer
;	O
char	O
*	O
directory_name	pointer
;	O
char	O
*	O
file_name	pointer
;	O
char	O
*	O
function_name	pointer
;	O
int	O
idx	int
;	O
}	O
;	O
static	O
int	O
cmpindexentry	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
const	O
struct	O
indexentry	struct
*	O
contestantA	pointer
=	O
(	O
const	O
struct	O
indexentry	struct
*	O
)	O
a	pointer
;	O
const	O
struct	O
indexentry	struct
*	O
contestantB	pointer
=	O
(	O
const	O
struct	O
indexentry	struct
*	O
)	O
b	pointer
;	O
if	O
(	O
contestantA	pointer
->	O
val	array
<	O
contestantB	pointer
->	O
val	array
)	O
return	O
-	O
1	int
;	O
if	O
(	O
contestantA	pointer
->	O
val	array
>	O
contestantB	pointer
->	O
val	array
)	O
return	O
1	int
;	O
return	O
contestantA	pointer
->	O
idx	int
-	O
contestantB	pointer
->	O
idx	int
;	O
}	O
struct	O
stab_find_info	struct
{	O
asection	struct
*	O
stabsec	pointer
;	O
asection	struct
*	O
strsec	pointer
;	O
bfd_byte	char
*	O
stabs	pointer
;	O
bfd_byte	char
*	O
strs	pointer
;	O
struct	O
indexentry	struct
*	O
indextable	pointer
;	O
int	O
indextablesize	int
;	O
struct	O
indexentry	struct
*	O
cached_indexentry	pointer
;	O
bfd_vma	long
cached_offset	long
;	O
bfd_byte	char
*	O
cached_stab	pointer
;	O
char	O
*	O
cached_file_name	pointer
;	O
char	O
*	O
filename	pointer
;	O
}	O
;	O
bfd_boolean	int
_bfd_stab_section_find_nearest_line	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
*	O
symbols	pointer
,	O
asection	struct
*	O
section	pointer
,	O
bfd_vma	long
offset	long
,	O
bfd_boolean	int
*	O
pfound	pointer
,	O
const	O
char	O
*	O
*	O
pfilename	pointer
,	O
const	O
char	O
*	O
*	O
pfnname	pointer
,	O
unsigned	O
int	O
*	O
pline	pointer
,	O
void	O
*	O
*	O
pinfo	pointer
)	O
{	O
struct	O
stab_find_info	struct
*	O
info	pointer
;	O
bfd_size_type	long
stabsize	long
,	O
strsize	long
;	O
bfd_byte	char
*	O
stab	pointer
,	O
*	O
str	pointer
;	O
bfd_byte	char
*	O
nul_fun	pointer
,	O
*	O
nul_str	pointer
;	O
bfd_size_type	long
stroff	long
;	O
struct	O
indexentry	struct
*	O
indexentry	struct
;	O
char	O
*	O
file_name	pointer
;	O
char	O
*	O
directory_name	pointer
;	O
bfd_boolean	int
saw_line	int
,	O
saw_func	int
;	O
*	O
pfound	pointer
=	O
FALSE	int
;	O
*	O
pfilename	pointer
=	O
bfd_get_filename	function
(	O
abfd	pointer
)	O
;	O
*	O
pfnname	pointer
=	O
NULL	O
;	O
*	O
pline	pointer
=	O
0	int
;	O
info	pointer
=	O
(	O
struct	O
stab_find_info	struct
*	O
)	O
*	O
pinfo	pointer
;	O
if	O
(	O
info	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
info	pointer
->	O
stabsec	pointer
==	O
NULL	O
||	O
info	pointer
->	O
strsec	pointer
==	O
NULL	O
)	O
{	O
return	O
TRUE	int
;	O
}	O
stabsize	long
=	O
(	O
info	pointer
->	O
stabsec	pointer
->	O
rawsize	long
?	O
info	pointer
->	O
stabsec	pointer
->	O
rawsize	long
:	O
info	pointer
->	O
stabsec	pointer
->	O
size	long
)	O
;	O
strsize	long
=	O
(	O
info	pointer
->	O
strsec	pointer
->	O
rawsize	long
?	O
info	pointer
->	O
strsec	pointer
->	O
rawsize	long
:	O
info	pointer
->	O
strsec	pointer
->	O
size	long
)	O
;	O
}	O
else	O
{	O
long	O
reloc_size	long
,	O
reloc_count	int
;	O
arelent	struct
*	O
*	O
reloc_vector	pointer
;	O
int	O
i	pointer
;	O
char	O
*	O
function_name	pointer
;	O
bfd_size_type	long
amt	long
=	O
sizeof	O
*	O
info	pointer
;	O
info	pointer
=	O
(	O
struct	O
stab_find_info	struct
*	O
)	O
bfd_zalloc	function
(	O
abfd	pointer
,	O
amt	long
)	O
;	O
if	O
(	O
info	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
stabsec	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
".stab"	pointer
)	O
;	O
info	pointer
->	O
strsec	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
".stabstr"	pointer
)	O
;	O
if	O
(	O
info	pointer
->	O
stabsec	pointer
==	O
NULL	O
||	O
info	pointer
->	O
strsec	pointer
==	O
NULL	O
)	O
{	O
info	pointer
->	O
stabsec	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
"$GDB_SYMBOLS$"	pointer
)	O
;	O
info	pointer
->	O
strsec	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
"$GDB_STRINGS$"	pointer
)	O
;	O
if	O
(	O
info	pointer
->	O
stabsec	pointer
==	O
NULL	O
||	O
info	pointer
->	O
strsec	pointer
==	O
NULL	O
)	O
{	O
*	O
pinfo	pointer
=	O
info	pointer
;	O
return	O
TRUE	int
;	O
}	O
}	O
stabsize	long
=	O
(	O
info	pointer
->	O
stabsec	pointer
->	O
rawsize	long
?	O
info	pointer
->	O
stabsec	pointer
->	O
rawsize	long
:	O
info	pointer
->	O
stabsec	pointer
->	O
size	long
)	O
;	O
stabsize	long
=	O
(	O
stabsize	long
/	O
STABSIZE	O
)	O
*	O
STABSIZE	O
;	O
strsize	long
=	O
(	O
info	pointer
->	O
strsec	pointer
->	O
rawsize	long
?	O
info	pointer
->	O
strsec	pointer
->	O
rawsize	long
:	O
info	pointer
->	O
strsec	pointer
->	O
size	long
)	O
;	O
info	pointer
->	O
stabs	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
stabsize	long
)	O
;	O
info	pointer
->	O
strs	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
strsize	long
)	O
;	O
if	O
(	O
info	pointer
->	O
stabs	pointer
==	O
NULL	O
||	O
info	pointer
->	O
strs	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
bfd_get_section_contents	function
(	O
abfd	pointer
,	O
info	pointer
->	O
stabsec	pointer
,	O
info	pointer
->	O
stabs	pointer
,	O
0	int
,	O
stabsize	long
)	O
||	O
!	O
bfd_get_section_contents	function
(	O
abfd	pointer
,	O
info	pointer
->	O
strsec	pointer
,	O
info	pointer
->	O
strs	pointer
,	O
0	int
,	O
strsize	long
)	O
)	O
return	O
FALSE	int
;	O
info	pointer
->	O
strs	pointer
[	O
strsize	long
-	O
1	int
]	O
=	O
0	int
;	O
reloc_size	long
=	O
bfd_get_reloc_upper_bound	function
(	O
abfd	pointer
,	O
info	pointer
->	O
stabsec	pointer
)	O
;	O
if	O
(	O
reloc_size	long
<	O
0	int
)	O
return	O
FALSE	int
;	O
reloc_vector	pointer
=	O
(	O
arelent	struct
*	O
*	O
)	O
bfd_malloc	function
(	O
reloc_size	long
)	O
;	O
if	O
(	O
reloc_vector	pointer
==	O
NULL	O
&&	O
reloc_size	long
!=	O
0	int
)	O
return	O
FALSE	int
;	O
reloc_count	int
=	O
bfd_canonicalize_reloc	function
(	O
abfd	pointer
,	O
info	pointer
->	O
stabsec	pointer
,	O
reloc_vector	pointer
,	O
symbols	pointer
)	O
;	O
if	O
(	O
reloc_count	int
<	O
0	int
)	O
{	O
if	O
(	O
reloc_vector	pointer
!=	O
NULL	O
)	O
free	function
(	O
reloc_vector	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
reloc_count	int
>	O
0	int
)	O
{	O
arelent	struct
*	O
*	O
pr	pointer
;	O
for	O
(	O
pr	pointer
=	O
reloc_vector	pointer
;	O
*	O
pr	pointer
!=	O
NULL	O
;	O
pr	pointer
++	O
)	O
{	O
arelent	struct
*	O
r	pointer
;	O
unsigned	O
long	O
val	array
;	O
asymbol	struct
*	O
sym	pointer
;	O
bfd_size_type	long
octets	long
;	O
r	pointer
=	O
*	O
pr	pointer
;	O
if	O
(	O
r	pointer
->	O
howto	pointer
->	O
dst_mask	long
==	O
0	int
)	O
continue	O
;	O
octets	long
=	O
r	pointer
->	O
address	long
*	O
bfd_octets_per_byte	function
(	O
abfd	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
r	pointer
->	O
howto	pointer
->	O
rightshift	int
!=	O
0	int
||	O
r	pointer
->	O
howto	pointer
->	O
size	long
!=	O
2	int
||	O
r	pointer
->	O
howto	pointer
->	O
bitsize	int
!=	O
32	int
||	O
r	pointer
->	O
howto	pointer
->	O
pc_relative	int
||	O
r	pointer
->	O
howto	pointer
->	O
bitpos	int
!=	O
0	int
||	O
r	pointer
->	O
howto	pointer
->	O
dst_mask	long
!=	O
0xffffffff	int
||	O
octets	long
+	O
4	int
>	O
stabsize	long
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"unsupported .stab relocation"	pointer
)	O
)	O
;	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
if	O
(	O
reloc_vector	pointer
!=	O
NULL	O
)	O
free	function
(	O
reloc_vector	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
val	array
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
info	pointer
->	O
stabs	pointer
+	O
octets	long
)	O
;	O
val	array
&=	O
r	pointer
->	O
howto	pointer
->	O
src_mask	long
;	O
sym	pointer
=	O
*	O
r	pointer
->	O
sym_ptr_ptr	pointer
;	O
val	array
+=	O
sym	pointer
->	O
value	long
+	O
sym	pointer
->	O
section	pointer
->	O
vma	long
+	O
r	pointer
->	O
addend	long
;	O
bfd_put_32	O
(	O
abfd	pointer
,	O
(	O
bfd_vma	long
)	O
val	array
,	O
info	pointer
->	O
stabs	pointer
+	O
octets	long
)	O
;	O
}	O
}	O
if	O
(	O
reloc_vector	pointer
!=	O
NULL	O
)	O
free	function
(	O
reloc_vector	pointer
)	O
;	O
info	pointer
->	O
indextablesize	int
=	O
0	int
;	O
nul_fun	pointer
=	O
NULL	O
;	O
for	O
(	O
stab	pointer
=	O
info	pointer
->	O
stabs	pointer
;	O
stab	pointer
<	O
info	pointer
->	O
stabs	pointer
+	O
stabsize	long
;	O
stab	pointer
+=	O
STABSIZE	O
)	O
{	O
if	O
(	O
stab	pointer
[	O
TYPEOFF	O
]	O
==	O
(	O
bfd_byte	char
)	O
N_SO	int
)	O
{	O
if	O
(	O
nul_fun	pointer
!=	O
NULL	O
)	O
++	O
info	pointer
->	O
indextablesize	int
;	O
if	O
(	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
STRDXOFF	O
)	O
==	O
0	int
)	O
nul_fun	pointer
=	O
NULL	O
;	O
else	O
{	O
nul_fun	pointer
=	O
stab	pointer
;	O
if	O
(	O
stab	pointer
+	O
STABSIZE	O
+	O
TYPEOFF	O
<	O
info	pointer
->	O
stabs	pointer
+	O
stabsize	long
&&	O
*	O
(	O
stab	pointer
+	O
STABSIZE	O
+	O
TYPEOFF	O
)	O
==	O
(	O
bfd_byte	char
)	O
N_SO	int
)	O
stab	pointer
+=	O
STABSIZE	O
;	O
}	O
}	O
else	O
if	O
(	O
stab	pointer
[	O
TYPEOFF	O
]	O
==	O
(	O
bfd_byte	char
)	O
N_FUN	int
&&	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
STRDXOFF	O
)	O
!=	O
0	int
)	O
{	O
nul_fun	pointer
=	O
NULL	O
;	O
++	O
info	pointer
->	O
indextablesize	int
;	O
}	O
}	O
if	O
(	O
nul_fun	pointer
!=	O
NULL	O
)	O
++	O
info	pointer
->	O
indextablesize	int
;	O
if	O
(	O
info	pointer
->	O
indextablesize	int
==	O
0	int
)	O
return	O
TRUE	int
;	O
++	O
info	pointer
->	O
indextablesize	int
;	O
amt	long
=	O
info	pointer
->	O
indextablesize	int
;	O
amt	long
*=	O
sizeof	O
(	O
struct	O
indexentry	struct
)	O
;	O
info	pointer
->	O
indextable	pointer
=	O
(	O
struct	O
indexentry	struct
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
amt	long
)	O
;	O
if	O
(	O
info	pointer
->	O
indextable	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
file_name	pointer
=	O
NULL	O
;	O
directory_name	pointer
=	O
NULL	O
;	O
nul_fun	pointer
=	O
NULL	O
;	O
stroff	long
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
,	O
stab	pointer
=	O
info	pointer
->	O
stabs	pointer
,	O
nul_str	pointer
=	O
str	pointer
=	O
info	pointer
->	O
strs	pointer
;	O
i	pointer
<	O
info	pointer
->	O
indextablesize	int
&&	O
stab	pointer
<	O
info	pointer
->	O
stabs	pointer
+	O
stabsize	long
;	O
stab	pointer
+=	O
STABSIZE	O
)	O
{	O
switch	O
(	O
stab	pointer
[	O
TYPEOFF	O
]	O
)	O
{	O
case	O
0	int
:	O
if	O
(	O
(	O
bfd_size_type	long
)	O
(	O
(	O
info	pointer
->	O
strs	pointer
+	O
strsize	long
)	O
-	O
str	pointer
)	O
<	O
stroff	long
)	O
break	O
;	O
str	pointer
+=	O
stroff	long
;	O
stroff	long
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
VALOFF	O
)	O
;	O
break	O
;	O
case	O
N_SO	int
:	O
if	O
(	O
nul_fun	pointer
!=	O
NULL	O
)	O
{	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
val	array
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
nul_fun	pointer
+	O
VALOFF	O
)	O
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
stab	pointer
=	O
nul_fun	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
str	pointer
=	O
nul_str	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
directory_name	pointer
=	O
directory_name	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
file_name	pointer
=	O
file_name	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
function_name	pointer
=	O
NULL	O
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
idx	int
=	O
i	pointer
;	O
++	O
i	pointer
;	O
}	O
directory_name	pointer
=	O
NULL	O
;	O
file_name	pointer
=	O
(	O
char	O
*	O
)	O
str	pointer
+	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
STRDXOFF	O
)	O
;	O
if	O
(	O
file_name	pointer
==	O
(	O
char	O
*	O
)	O
str	pointer
)	O
{	O
file_name	pointer
=	O
NULL	O
;	O
nul_fun	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
nul_fun	pointer
=	O
stab	pointer
;	O
nul_str	pointer
=	O
str	pointer
;	O
if	O
(	O
file_name	pointer
>=	O
(	O
char	O
*	O
)	O
info	pointer
->	O
strs	pointer
+	O
strsize	long
||	O
file_name	pointer
<	O
(	O
char	O
*	O
)	O
str	pointer
)	O
file_name	pointer
=	O
NULL	O
;	O
if	O
(	O
stab	pointer
+	O
STABSIZE	O
+	O
TYPEOFF	O
<	O
info	pointer
->	O
stabs	pointer
+	O
stabsize	long
&&	O
*	O
(	O
stab	pointer
+	O
STABSIZE	O
+	O
TYPEOFF	O
)	O
==	O
(	O
bfd_byte	char
)	O
N_SO	int
)	O
{	O
stab	pointer
+=	O
STABSIZE	O
;	O
directory_name	pointer
=	O
file_name	pointer
;	O
file_name	pointer
=	O
(	O
(	O
char	O
*	O
)	O
str	pointer
+	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
STRDXOFF	O
)	O
)	O
;	O
if	O
(	O
file_name	pointer
>=	O
(	O
char	O
*	O
)	O
info	pointer
->	O
strs	pointer
+	O
strsize	long
||	O
file_name	pointer
<	O
(	O
char	O
*	O
)	O
str	pointer
)	O
file_name	pointer
=	O
NULL	O
;	O
}	O
}	O
break	O
;	O
case	O
N_SOL	int
:	O
file_name	pointer
=	O
(	O
char	O
*	O
)	O
str	pointer
+	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
STRDXOFF	O
)	O
;	O
if	O
(	O
file_name	pointer
>=	O
(	O
char	O
*	O
)	O
info	pointer
->	O
strs	pointer
+	O
strsize	long
||	O
file_name	pointer
<	O
(	O
char	O
*	O
)	O
str	pointer
)	O
file_name	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
N_FUN	int
:	O
function_name	pointer
=	O
(	O
char	O
*	O
)	O
str	pointer
+	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
STRDXOFF	O
)	O
;	O
if	O
(	O
function_name	pointer
==	O
(	O
char	O
*	O
)	O
str	pointer
)	O
continue	O
;	O
if	O
(	O
function_name	pointer
>=	O
(	O
char	O
*	O
)	O
info	pointer
->	O
strs	pointer
+	O
strsize	long
||	O
function_name	pointer
<	O
(	O
char	O
*	O
)	O
str	pointer
)	O
function_name	pointer
=	O
NULL	O
;	O
nul_fun	pointer
=	O
NULL	O
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
val	array
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
VALOFF	O
)	O
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
stab	pointer
=	O
stab	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
str	pointer
=	O
str	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
directory_name	pointer
=	O
directory_name	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
file_name	pointer
=	O
file_name	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
function_name	pointer
=	O
function_name	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
idx	int
=	O
i	pointer
;	O
++	O
i	pointer
;	O
break	O
;	O
}	O
}	O
if	O
(	O
nul_fun	pointer
!=	O
NULL	O
)	O
{	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
val	array
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
nul_fun	pointer
+	O
VALOFF	O
)	O
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
stab	pointer
=	O
nul_fun	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
str	pointer
=	O
nul_str	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
directory_name	pointer
=	O
directory_name	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
file_name	pointer
=	O
file_name	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
function_name	pointer
=	O
NULL	O
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
idx	int
=	O
i	pointer
;	O
++	O
i	pointer
;	O
}	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
val	array
=	O
(	O
bfd_vma	long
)	O
-	O
1	int
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
stab	pointer
=	O
info	pointer
->	O
stabs	pointer
+	O
stabsize	long
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
str	pointer
=	O
str	pointer
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
directory_name	pointer
=	O
NULL	O
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
file_name	pointer
=	O
NULL	O
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
function_name	pointer
=	O
NULL	O
;	O
info	pointer
->	O
indextable	pointer
[	O
i	pointer
]	O
.	O
idx	int
=	O
i	pointer
;	O
++	O
i	pointer
;	O
info	pointer
->	O
indextablesize	int
=	O
i	pointer
;	O
qsort	function
(	O
info	pointer
->	O
indextable	pointer
,	O
(	O
size_t	long
)	O
i	pointer
,	O
sizeof	O
(	O
struct	O
indexentry	struct
)	O
,	O
cmpindexentry	function
)	O
;	O
*	O
pinfo	pointer
=	O
info	pointer
;	O
}	O
offset	long
+=	O
bfd_section_vma	function
(	O
section	pointer
)	O
;	O
if	O
(	O
info	pointer
->	O
cached_indexentry	pointer
!=	O
NULL	O
&&	O
offset	long
>=	O
info	pointer
->	O
cached_offset	long
&&	O
offset	long
<	O
(	O
info	pointer
->	O
cached_indexentry	pointer
+	O
1	int
)	O
->	O
val	array
)	O
{	O
stab	pointer
=	O
info	pointer
->	O
cached_stab	pointer
;	O
indexentry	struct
=	O
info	pointer
->	O
cached_indexentry	pointer
;	O
file_name	pointer
=	O
info	pointer
->	O
cached_file_name	pointer
;	O
}	O
else	O
{	O
long	O
low	long
,	O
high	long
;	O
long	O
mid	long
=	O
-	O
1	int
;	O
indexentry	struct
=	O
NULL	O
;	O
low	long
=	O
0	int
;	O
high	long
=	O
info	pointer
->	O
indextablesize	int
-	O
1	int
;	O
while	O
(	O
low	long
!=	O
high	long
)	O
{	O
mid	long
=	O
(	O
high	long
+	O
low	long
)	O
/	O
2	int
;	O
if	O
(	O
offset	long
>=	O
info	pointer
->	O
indextable	pointer
[	O
mid	long
]	O
.	O
val	array
&&	O
offset	long
<	O
info	pointer
->	O
indextable	pointer
[	O
mid	long
+	O
1	int
]	O
.	O
val	array
)	O
{	O
indexentry	struct
=	O
&	O
info	pointer
->	O
indextable	pointer
[	O
mid	long
]	O
;	O
break	O
;	O
}	O
if	O
(	O
info	pointer
->	O
indextable	pointer
[	O
mid	long
]	O
.	O
val	array
>	O
offset	long
)	O
high	long
=	O
mid	long
;	O
else	O
low	long
=	O
mid	long
+	O
1	int
;	O
}	O
if	O
(	O
indexentry	struct
==	O
NULL	O
)	O
return	O
TRUE	int
;	O
stab	pointer
=	O
indexentry	struct
->	O
stab	pointer
+	O
STABSIZE	O
;	O
file_name	pointer
=	O
indexentry	struct
->	O
file_name	pointer
;	O
}	O
directory_name	pointer
=	O
indexentry	struct
->	O
directory_name	pointer
;	O
str	pointer
=	O
indexentry	struct
->	O
str	pointer
;	O
saw_line	int
=	O
FALSE	int
;	O
saw_func	int
=	O
FALSE	int
;	O
for	O
(	O
;	O
stab	pointer
<	O
(	O
indexentry	struct
+	O
1	int
)	O
->	O
stab	pointer
;	O
stab	pointer
+=	O
STABSIZE	O
)	O
{	O
bfd_boolean	int
done	int
;	O
bfd_vma	long
val	array
;	O
done	int
=	O
FALSE	int
;	O
switch	O
(	O
stab	pointer
[	O
TYPEOFF	O
]	O
)	O
{	O
case	O
N_SOL	int
:	O
val	array
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
VALOFF	O
)	O
;	O
if	O
(	O
val	array
<=	O
offset	long
)	O
{	O
file_name	pointer
=	O
(	O
char	O
*	O
)	O
str	pointer
+	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
STRDXOFF	O
)	O
;	O
if	O
(	O
file_name	pointer
>=	O
(	O
char	O
*	O
)	O
info	pointer
->	O
strs	pointer
+	O
strsize	long
||	O
file_name	pointer
<	O
(	O
char	O
*	O
)	O
str	pointer
)	O
file_name	pointer
=	O
NULL	O
;	O
*	O
pline	pointer
=	O
0	int
;	O
}	O
break	O
;	O
case	O
N_SLINE	int
:	O
case	O
N_DSLINE	int
:	O
case	O
N_BSLINE	int
:	O
val	array
=	O
(	O
(	O
indexentry	struct
->	O
function_name	pointer
?	O
indexentry	struct
->	O
val	array
:	O
0	int
)	O
+	O
bfd_get_32	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
VALOFF	O
)	O
)	O
;	O
if	O
(	O
!	O
saw_line	int
||	O
val	array
<=	O
offset	long
)	O
{	O
*	O
pline	pointer
=	O
bfd_get_16	O
(	O
abfd	pointer
,	O
stab	pointer
+	O
DESCOFF	O
)	O
;	O
info	pointer
->	O
cached_stab	pointer
=	O
stab	pointer
;	O
info	pointer
->	O
cached_offset	long
=	O
val	array
;	O
info	pointer
->	O
cached_file_name	pointer
=	O
file_name	pointer
;	O
info	pointer
->	O
cached_indexentry	pointer
=	O
indexentry	struct
;	O
}	O
if	O
(	O
val	array
>	O
offset	long
)	O
done	int
=	O
TRUE	int
;	O
saw_line	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
N_FUN	int
:	O
case	O
N_SO	int
:	O
if	O
(	O
saw_func	int
||	O
saw_line	int
)	O
done	int
=	O
TRUE	int
;	O
saw_func	int
=	O
TRUE	int
;	O
break	O
;	O
}	O
if	O
(	O
done	int
)	O
break	O
;	O
}	O
*	O
pfound	pointer
=	O
TRUE	int
;	O
if	O
(	O
file_name	pointer
==	O
NULL	O
||	O
IS_ABSOLUTE_PATH	O
(	O
file_name	pointer
)	O
||	O
directory_name	pointer
==	O
NULL	O
)	O
*	O
pfilename	pointer
=	O
file_name	pointer
;	O
else	O
{	O
size_t	long
dirlen	long
;	O
dirlen	long
=	O
strlen	function
(	O
directory_name	pointer
)	O
;	O
if	O
(	O
info	pointer
->	O
filename	pointer
==	O
NULL	O
||	O
filename_ncmp	function
(	O
info	pointer
->	O
filename	pointer
,	O
directory_name	pointer
,	O
dirlen	long
)	O
!=	O
0	int
||	O
filename_cmp	function
(	O
info	pointer
->	O
filename	pointer
+	O
dirlen	long
,	O
file_name	pointer
)	O
!=	O
0	int
)	O
{	O
size_t	long
len	long
;	O
len	long
=	O
strlen	function
(	O
file_name	pointer
)	O
+	O
1	int
;	O
info	pointer
->	O
filename	pointer
=	O
(	O
char	O
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
dirlen	long
+	O
len	long
)	O
;	O
if	O
(	O
info	pointer
->	O
filename	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
memcpy	function
(	O
info	pointer
->	O
filename	pointer
,	O
directory_name	pointer
,	O
dirlen	long
)	O
;	O
memcpy	function
(	O
info	pointer
->	O
filename	pointer
+	O
dirlen	long
,	O
file_name	pointer
,	O
len	long
)	O
;	O
}	O
*	O
pfilename	pointer
=	O
info	pointer
->	O
filename	pointer
;	O
}	O
if	O
(	O
indexentry	struct
->	O
function_name	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
s	pointer
;	O
s	pointer
=	O
strchr	function
(	O
indexentry	struct
->	O
function_name	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
s	pointer
!=	O
NULL	O
)	O
*	O
s	pointer
=	O
'\0'	O
;	O
*	O
pfnname	pointer
=	O
indexentry	struct
->	O
function_name	pointer
;	O
}	O
return	O
TRUE	int
;	O
}	O
long	O
_bfd_nosymbols_canonicalize_symtab	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
*	O
location	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
0	int
;	O
}	O
void	O
_bfd_nosymbols_print_symbol	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
afile	pointer
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
symbol	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd_print_symbol_type	enum
how	enum
ATTRIBUTE_UNUSED	O
)	O
{	O
}	O
void	O
_bfd_nosymbols_get_symbol_info	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
sym	pointer
ATTRIBUTE_UNUSED	O
,	O
symbol_info	struct
*	O
ret	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
}	O
const	O
char	O
*	O
_bfd_nosymbols_get_symbol_version_string	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
symbol	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd_boolean	int
*	O
hidden	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
(	O
const	O
char	O
*	O
)	O
_bfd_ptr_bfd_null_error	function
(	O
abfd	pointer
)	O
;	O
}	O
bfd_boolean	int
_bfd_nosymbols_bfd_is_local_label_name	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
char	O
*	O
name	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
FALSE	int
;	O
}	O
alent	struct
*	O
_bfd_nosymbols_get_lineno	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
sym	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
(	O
alent	struct
*	O
)	O
_bfd_ptr_bfd_null_error	function
(	O
abfd	pointer
)	O
;	O
}	O
bfd_boolean	int
_bfd_nosymbols_find_nearest_line	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
*	O
symbols	pointer
ATTRIBUTE_UNUSED	O
,	O
asection	struct
*	O
section	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd_vma	long
offset	long
ATTRIBUTE_UNUSED	O
,	O
const	O
char	O
*	O
*	O
filename_ptr	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
char	O
*	O
*	O
functionname_ptr	pointer
ATTRIBUTE_UNUSED	O
,	O
unsigned	O
int	O
*	O
line_ptr	pointer
ATTRIBUTE_UNUSED	O
,	O
unsigned	O
int	O
*	O
discriminator_ptr	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
_bfd_bool_bfd_false_error	function
(	O
abfd	pointer
)	O
;	O
}	O
bfd_boolean	int
_bfd_nosymbols_find_line	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
*	O
symbols	pointer
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
symbol	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
char	O
*	O
*	O
filename_ptr	pointer
ATTRIBUTE_UNUSED	O
,	O
unsigned	O
int	O
*	O
line_ptr	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
_bfd_bool_bfd_false_error	function
(	O
abfd	pointer
)	O
;	O
}	O
bfd_boolean	int
_bfd_nosymbols_find_inliner_info	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
*	O
filename_ptr	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
char	O
*	O
*	O
functionname_ptr	pointer
ATTRIBUTE_UNUSED	O
,	O
unsigned	O
int	O
*	O
line_ptr	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
_bfd_bool_bfd_false_error	function
(	O
abfd	pointer
)	O
;	O
}	O
asymbol	struct
*	O
_bfd_nosymbols_bfd_make_debug_symbol	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
ptr	pointer
ATTRIBUTE_UNUSED	O
,	O
unsigned	O
long	O
sz	long
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
(	O
asymbol	struct
*	O
)	O
_bfd_ptr_bfd_null_error	function
(	O
abfd	pointer
)	O
;	O
}	O
long	O
_bfd_nosymbols_read_minisymbols	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_boolean	int
dynamic	int
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
*	O
minisymsp	pointer
ATTRIBUTE_UNUSED	O
,	O
unsigned	O
int	O
*	O
sizep	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
_bfd_long_bfd_n1_error	function
(	O
abfd	pointer
)	O
;	O
}	O
asymbol	struct
*	O
_bfd_nosymbols_minisymbol_to_symbol	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_boolean	int
dynamic	int
ATTRIBUTE_UNUSED	O
,	O
const	O
void	O
*	O
minisym	pointer
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
sym	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
(	O
asymbol	struct
*	O
)	O
_bfd_ptr_bfd_null_error	function
(	O
abfd	pointer
)	O
;	O
}	O
long	O
_bfd_nodynamic_get_synthetic_symtab	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
long	O
symcount	int
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
*	O
syms	pointer
ATTRIBUTE_UNUSED	O
,	O
long	O
dynsymcount	int
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
*	O
dynsyms	pointer
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
*	O
ret	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
_bfd_long_bfd_n1_error	function
(	O
abfd	pointer
)	O
;	O
}	O
