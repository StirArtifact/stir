static	O
int	O
osip_body_parse_header	function
(	O
osip_body_t	struct
*	O
body	pointer
,	O
const	O
char	O
*	O
start_of_osip_body_header	pointer
,	O
const	O
char	O
*	O
*	O
next_body	pointer
)	O
;	O
int	O
osip_body_init	function
(	O
osip_body_t	struct
*	O
*	O
body	pointer
)	O
{	O
*	O
body	pointer
=	O
(	O
osip_body_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_body_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
body	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
body	pointer
)	O
->	O
body	pointer
=	O
NULL	O
;	O
(	O
*	O
body	pointer
)	O
->	O
content_type	pointer
=	O
NULL	O
;	O
(	O
*	O
body	pointer
)	O
->	O
length	long
=	O
0	int
;	O
(	O
*	O
body	pointer
)	O
->	O
headers	pointer
=	O
(	O
osip_list_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_list_t	struct
)	O
)	O
;	O
if	O
(	O
(	O
*	O
body	pointer
)	O
->	O
headers	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
*	O
body	pointer
)	O
;	O
*	O
body	pointer
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_list_init	function
(	O
(	O
*	O
body	pointer
)	O
->	O
headers	pointer
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_set_body	function
(	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
length	long
)	O
{	O
osip_body_t	struct
*	O
body	pointer
;	O
int	O
i	int
;	O
i	int
=	O
osip_body_init	function
(	O
&	O
body	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_body_parse	function
(	O
body	pointer
,	O
buf	pointer
,	O
length	long
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_body_free	function
(	O
body	pointer
)	O
;	O
return	O
i	int
;	O
}	O
sip	pointer
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	function
(	O
&	O
sip	pointer
->	O
bodies	struct
,	O
body	pointer
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_body_clone	function
(	O
const	O
osip_body_t	struct
*	O
body	pointer
,	O
osip_body_t	struct
*	O
*	O
dest	pointer
)	O
{	O
int	O
i	int
;	O
osip_body_t	struct
*	O
copy	pointer
;	O
if	O
(	O
body	pointer
==	O
NULL	O
||	O
body	pointer
->	O
length	long
<=	O
0	int
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_body_init	function
(	O
&	O
copy	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
copy	pointer
->	O
body	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
body	pointer
->	O
length	long
+	O
2	int
)	O
;	O
if	O
(	O
copy	pointer
->	O
body	pointer
==	O
NULL	O
)	O
{	O
osip_body_free	function
(	O
copy	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
copy	pointer
->	O
length	long
=	O
body	pointer
->	O
length	long
;	O
memcpy	function
(	O
copy	pointer
->	O
body	pointer
,	O
body	pointer
->	O
body	pointer
,	O
body	pointer
->	O
length	long
)	O
;	O
copy	pointer
->	O
body	pointer
[	O
body	pointer
->	O
length	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
body	pointer
->	O
content_type	pointer
!=	O
NULL	O
)	O
{	O
i	int
=	O
osip_content_type_clone	function
(	O
body	pointer
->	O
content_type	pointer
,	O
&	O
(	O
copy	pointer
->	O
content_type	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_body_free	function
(	O
copy	pointer
)	O
;	O
return	O
i	int
;	O
}	O
}	O
i	int
=	O
osip_list_clone	function
(	O
body	pointer
->	O
headers	pointer
,	O
copy	pointer
->	O
headers	pointer
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
&	O
osip_header_clone	function
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_body_free	function
(	O
copy	pointer
)	O
;	O
return	O
i	int
;	O
}	O
*	O
dest	pointer
=	O
copy	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_get_body	function
(	O
const	O
osip_message_t	struct
*	O
sip	pointer
,	O
int	O
pos	int
,	O
osip_body_t	struct
*	O
*	O
dest	pointer
)	O
{	O
osip_body_t	struct
*	O
body	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
osip_list_size	function
(	O
&	O
sip	pointer
->	O
bodies	struct
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
body	pointer
=	O
(	O
osip_body_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sip	pointer
->	O
bodies	struct
,	O
pos	int
)	O
;	O
*	O
dest	pointer
=	O
body	pointer
;	O
return	O
pos	int
;	O
}	O
int	O
osip_body_set_contenttype	function
(	O
osip_body_t	struct
*	O
body	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
body	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
hvalue	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_content_type_init	function
(	O
&	O
(	O
body	pointer
->	O
content_type	pointer
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_content_type_parse	function
(	O
body	pointer
->	O
content_type	pointer
,	O
hvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_content_type_free	function
(	O
body	pointer
->	O
content_type	pointer
)	O
;	O
body	pointer
->	O
content_type	pointer
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_body_set_header	function
(	O
osip_body_t	struct
*	O
body	pointer
,	O
const	O
char	O
*	O
hname	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
osip_header_t	struct
*	O
h	pointer
;	O
int	O
i	int
;	O
if	O
(	O
body	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
hname	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
hvalue	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_header_init	function
(	O
&	O
h	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
h	pointer
->	O
hname	pointer
=	O
osip_strdup	function
(	O
hname	pointer
)	O
;	O
if	O
(	O
h	pointer
->	O
hname	pointer
==	O
NULL	O
)	O
{	O
osip_header_free	function
(	O
h	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
h	pointer
->	O
hvalue	pointer
=	O
osip_strdup	function
(	O
hvalue	pointer
)	O
;	O
if	O
(	O
h	pointer
->	O
hvalue	pointer
==	O
NULL	O
)	O
{	O
osip_header_free	function
(	O
h	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_list_add	function
(	O
body	pointer
->	O
headers	pointer
,	O
h	pointer
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_set_body_mime	function
(	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
length	long
)	O
{	O
osip_body_t	struct
*	O
body	pointer
;	O
int	O
i	int
;	O
if	O
(	O
sip	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_body_init	function
(	O
&	O
body	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_body_parse_mime	function
(	O
body	pointer
,	O
buf	pointer
,	O
length	long
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_body_free	function
(	O
body	pointer
)	O
;	O
return	O
i	int
;	O
}	O
sip	pointer
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	function
(	O
&	O
sip	pointer
->	O
bodies	struct
,	O
body	pointer
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
osip_body_parse_header	function
(	O
osip_body_t	struct
*	O
body	pointer
,	O
const	O
char	O
*	O
start_of_osip_body_header	pointer
,	O
const	O
char	O
*	O
*	O
next_body	pointer
)	O
{	O
const	O
char	O
*	O
start_of_line	pointer
;	O
const	O
char	O
*	O
end_of_line	pointer
;	O
const	O
char	O
*	O
colon_index	pointer
;	O
char	O
*	O
hname	pointer
;	O
char	O
*	O
hvalue	pointer
;	O
int	O
i	int
;	O
*	O
next_body	pointer
=	O
NULL	O
;	O
start_of_line	pointer
=	O
start_of_osip_body_header	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
i	int
=	O
__osip_find_next_crlf	function
(	O
start_of_line	pointer
,	O
&	O
end_of_line	pointer
)	O
;	O
if	O
(	O
i	int
==	O
-	O
2	int
)	O
{	O
}	O
else	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
colon_index	pointer
=	O
strchr	function
(	O
start_of_line	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
colon_index	pointer
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
colon_index	pointer
-	O
start_of_line	pointer
+	O
1	int
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
hname	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
colon_index	pointer
-	O
start_of_line	pointer
+	O
1	int
)	O
;	O
if	O
(	O
hname	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	function
(	O
hname	pointer
,	O
start_of_line	pointer
,	O
colon_index	pointer
-	O
start_of_line	pointer
)	O
;	O
if	O
(	O
(	O
end_of_line	pointer
-	O
2	int
)	O
-	O
colon_index	pointer
<	O
2	int
)	O
{	O
osip_free	O
(	O
hname	pointer
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
hvalue	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
(	O
end_of_line	pointer
-	O
2	int
)	O
-	O
colon_index	pointer
)	O
;	O
if	O
(	O
hvalue	pointer
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
hname	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	function
(	O
hvalue	pointer
,	O
colon_index	pointer
+	O
1	int
,	O
(	O
end_of_line	pointer
-	O
2	int
)	O
-	O
colon_index	pointer
-	O
1	int
)	O
;	O
if	O
(	O
osip_strncasecmp	function
(	O
hname	pointer
,	O
"content-type"	pointer
,	O
12	int
)	O
==	O
0	int
)	O
i	int
=	O
osip_body_set_contenttype	function
(	O
body	pointer
,	O
hvalue	pointer
)	O
;	O
else	O
i	int
=	O
osip_body_set_header	function
(	O
body	pointer
,	O
hname	pointer
,	O
hvalue	pointer
)	O
;	O
osip_free	O
(	O
hname	pointer
)	O
;	O
osip_free	O
(	O
hvalue	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
strncmp	function
(	O
end_of_line	pointer
,	O
OSIP_CRLF	pointer
,	O
2	int
)	O
==	O
0	int
||	O
strncmp	function
(	O
end_of_line	pointer
,	O
"\n"	pointer
,	O
1	int
)	O
==	O
0	int
||	O
strncmp	function
(	O
end_of_line	pointer
,	O
"\r"	pointer
,	O
1	int
)	O
==	O
0	int
)	O
{	O
*	O
next_body	pointer
=	O
end_of_line	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
start_of_line	pointer
=	O
end_of_line	pointer
;	O
}	O
}	O
int	O
osip_body_parse	function
(	O
osip_body_t	struct
*	O
body	pointer
,	O
const	O
char	O
*	O
start_of_body	pointer
,	O
size_t	long
length	long
)	O
{	O
if	O
(	O
body	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
start_of_body	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
body	pointer
->	O
headers	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
body	pointer
->	O
body	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
length	long
+	O
1	int
)	O
;	O
if	O
(	O
body	pointer
->	O
body	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
memcpy	function
(	O
body	pointer
->	O
body	pointer
,	O
start_of_body	pointer
,	O
length	long
)	O
;	O
body	pointer
->	O
body	pointer
[	O
length	long
]	O
=	O
'\0'	O
;	O
body	pointer
->	O
length	long
=	O
length	long
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_body_parse_mime	function
(	O
osip_body_t	struct
*	O
body	pointer
,	O
const	O
char	O
*	O
start_of_body	pointer
,	O
size_t	long
length	long
)	O
{	O
const	O
char	O
*	O
end_of_osip_body_header	pointer
;	O
const	O
char	O
*	O
start_of_osip_body_header	pointer
;	O
int	O
i	int
;	O
if	O
(	O
body	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
start_of_body	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
body	pointer
->	O
headers	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
start_of_osip_body_header	pointer
=	O
start_of_body	pointer
;	O
i	int
=	O
osip_body_parse_header	function
(	O
body	pointer
,	O
start_of_osip_body_header	pointer
,	O
&	O
end_of_osip_body_header	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
start_of_osip_body_header	pointer
=	O
end_of_osip_body_header	pointer
;	O
if	O
(	O
strncmp	function
(	O
start_of_osip_body_header	pointer
,	O
OSIP_CRLF	pointer
,	O
2	int
)	O
==	O
0	int
)	O
start_of_osip_body_header	pointer
=	O
start_of_osip_body_header	pointer
+	O
2	int
;	O
else	O
{	O
if	O
(	O
(	O
strncmp	function
(	O
start_of_osip_body_header	pointer
,	O
"\n"	pointer
,	O
1	int
)	O
==	O
0	int
)	O
||	O
(	O
strncmp	function
(	O
start_of_osip_body_header	pointer
,	O
"\r"	pointer
,	O
1	int
)	O
==	O
0	int
)	O
)	O
start_of_osip_body_header	pointer
=	O
start_of_osip_body_header	pointer
+	O
1	int
;	O
else	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
end_of_osip_body_header	pointer
=	O
start_of_body	pointer
+	O
length	long
;	O
if	O
(	O
end_of_osip_body_header	pointer
-	O
start_of_osip_body_header	pointer
<=	O
0	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
body	pointer
->	O
body	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
end_of_osip_body_header	pointer
-	O
start_of_osip_body_header	pointer
+	O
1	int
)	O
;	O
if	O
(	O
body	pointer
->	O
body	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
memcpy	function
(	O
body	pointer
->	O
body	pointer
,	O
start_of_osip_body_header	pointer
,	O
end_of_osip_body_header	pointer
-	O
start_of_osip_body_header	pointer
)	O
;	O
body	pointer
->	O
length	long
=	O
end_of_osip_body_header	pointer
-	O
start_of_osip_body_header	pointer
;	O
body	pointer
->	O
body	pointer
[	O
body	pointer
->	O
length	long
]	O
=	O
'\0'	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_body_to_str	function
(	O
const	O
osip_body_t	struct
*	O
body	pointer
,	O
char	O
*	O
*	O
dest	pointer
,	O
size_t	long
*	O
str_length	pointer
)	O
{	O
char	O
*	O
tmp_body	pointer
;	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
ptr	pointer
;	O
int	O
i	int
;	O
size_t	long
length	long
;	O
if	O
(	O
dest	pointer
)	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
str_length	pointer
)	O
*	O
str_length	pointer
=	O
0	int
;	O
if	O
(	O
body	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
body	pointer
->	O
body	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
body	pointer
->	O
headers	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
body	pointer
->	O
length	long
<=	O
0	int
)	O
return	O
OSIP_BADPARAMETER	O
;	O
length	long
=	O
15	int
+	O
body	pointer
->	O
length	long
+	O
(	O
osip_list_size	function
(	O
body	pointer
->	O
headers	pointer
)	O
*	O
40	int
)	O
;	O
tmp_body	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
length	long
)	O
;	O
if	O
(	O
tmp_body	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
ptr	pointer
=	O
tmp_body	pointer
;	O
if	O
(	O
body	pointer
->	O
content_type	pointer
!=	O
NULL	O
)	O
{	O
tmp_body	pointer
=	O
osip_strn_append	function
(	O
tmp_body	pointer
,	O
"content-type: "	pointer
,	O
14	int
)	O
;	O
i	int
=	O
osip_content_type_to_str	function
(	O
body	pointer
->	O
content_type	pointer
,	O
&	O
tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
ptr	pointer
)	O
;	O
return	O
i	int
;	O
}	O
if	O
(	O
length	long
<	O
tmp_body	pointer
-	O
ptr	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
+	O
4	int
)	O
{	O
size_t	long
len	long
;	O
len	long
=	O
tmp_body	pointer
-	O
ptr	pointer
;	O
length	long
=	O
length	long
+	O
strlen	function
(	O
tmp	pointer
)	O
+	O
4	int
;	O
ptr	pointer
=	O
osip_realloc	O
(	O
ptr	pointer
,	O
length	long
)	O
;	O
tmp_body	pointer
=	O
ptr	pointer
+	O
len	long
;	O
}	O
tmp_body	pointer
=	O
osip_str_append	function
(	O
tmp_body	pointer
,	O
tmp	pointer
)	O
;	O
osip_free	O
(	O
tmp	pointer
)	O
;	O
tmp_body	pointer
=	O
osip_strn_append	function
(	O
tmp_body	pointer
,	O
OSIP_CRLF	pointer
,	O
2	int
)	O
;	O
}	O
{	O
osip_list_iterator_t	struct
it	pointer
;	O
osip_header_t	struct
*	O
header	pointer
=	O
(	O
osip_header_t	struct
*	O
)	O
osip_list_get_first	function
(	O
body	pointer
->	O
headers	pointer
,	O
&	O
it	pointer
)	O
;	O
while	O
(	O
header	pointer
!=	O
OSIP_SUCCESS	int
)	O
{	O
i	int
=	O
osip_header_to_str	function
(	O
header	pointer
,	O
&	O
tmp	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
ptr	pointer
)	O
;	O
return	O
i	int
;	O
}	O
if	O
(	O
length	long
<	O
tmp_body	pointer
-	O
ptr	pointer
+	O
strlen	function
(	O
tmp	pointer
)	O
+	O
4	int
)	O
{	O
size_t	long
len	long
;	O
len	long
=	O
tmp_body	pointer
-	O
ptr	pointer
;	O
length	long
=	O
length	long
+	O
strlen	function
(	O
tmp	pointer
)	O
+	O
4	int
;	O
ptr	pointer
=	O
osip_realloc	O
(	O
ptr	pointer
,	O
length	long
)	O
;	O
tmp_body	pointer
=	O
ptr	pointer
+	O
len	long
;	O
}	O
tmp_body	pointer
=	O
osip_str_append	function
(	O
tmp_body	pointer
,	O
tmp	pointer
)	O
;	O
osip_free	O
(	O
tmp	pointer
)	O
;	O
tmp_body	pointer
=	O
osip_strn_append	function
(	O
tmp_body	pointer
,	O
OSIP_CRLF	pointer
,	O
2	int
)	O
;	O
header	pointer
=	O
(	O
osip_header_t	struct
*	O
)	O
osip_list_get_next	function
(	O
&	O
it	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
osip_list_size	function
(	O
body	pointer
->	O
headers	pointer
)	O
>	O
0	int
)	O
||	O
(	O
body	pointer
->	O
content_type	pointer
!=	O
NULL	O
)	O
)	O
{	O
if	O
(	O
length	long
<	O
(	O
size_t	long
)	O
(	O
tmp_body	pointer
-	O
ptr	pointer
+	O
3	int
)	O
)	O
{	O
size_t	long
len	long
;	O
len	long
=	O
tmp_body	pointer
-	O
ptr	pointer
;	O
length	long
=	O
length	long
+	O
3	int
+	O
body	pointer
->	O
length	long
;	O
ptr	pointer
=	O
osip_realloc	O
(	O
ptr	pointer
,	O
length	long
)	O
;	O
tmp_body	pointer
=	O
ptr	pointer
+	O
len	long
;	O
}	O
tmp_body	pointer
=	O
osip_strn_append	function
(	O
tmp_body	pointer
,	O
OSIP_CRLF	pointer
,	O
2	int
)	O
;	O
}	O
if	O
(	O
length	long
<	O
tmp_body	pointer
-	O
ptr	pointer
+	O
body	pointer
->	O
length	long
+	O
4	int
)	O
{	O
size_t	long
len	long
;	O
len	long
=	O
tmp_body	pointer
-	O
ptr	pointer
;	O
length	long
=	O
length	long
+	O
body	pointer
->	O
length	long
+	O
4	int
;	O
ptr	pointer
=	O
osip_realloc	O
(	O
ptr	pointer
,	O
length	long
)	O
;	O
tmp_body	pointer
=	O
ptr	pointer
+	O
len	long
;	O
}	O
memcpy	function
(	O
tmp_body	pointer
,	O
body	pointer
->	O
body	pointer
,	O
body	pointer
->	O
length	long
)	O
;	O
tmp_body	pointer
=	O
tmp_body	pointer
+	O
body	pointer
->	O
length	long
;	O
if	O
(	O
str_length	pointer
!=	O
NULL	O
)	O
*	O
str_length	pointer
=	O
tmp_body	pointer
-	O
ptr	pointer
;	O
*	O
dest	pointer
=	O
ptr	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_body_free	function
(	O
osip_body_t	struct
*	O
body	pointer
)	O
{	O
if	O
(	O
body	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
body	pointer
->	O
body	pointer
)	O
;	O
if	O
(	O
body	pointer
->	O
content_type	pointer
!=	O
NULL	O
)	O
{	O
osip_content_type_free	function
(	O
body	pointer
->	O
content_type	pointer
)	O
;	O
}	O
osip_list_special_free	function
(	O
body	pointer
->	O
headers	pointer
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
osip_header_free	function
)	O
;	O
osip_free	O
(	O
body	pointer
->	O
headers	pointer
)	O
;	O
osip_free	O
(	O
body	pointer
)	O
;	O
}	O
