extern	O
struct	O
layer	struct
*	O
flayer	pointer
;	O
extern	O
struct	O
display	struct
*	O
display	struct
,	O
*	O
displays	pointer
;	O
extern	O
char	O
*	O
wlisttit	pointer
;	O
extern	O
char	O
*	O
wliststr	pointer
;	O
extern	O
struct	O
mchar	struct
mchar_blank	struct
,	O
mchar_so	struct
;	O
extern	O
int	O
renditions	array
[	O
]	O
;	O
extern	O
struct	O
win	struct
*	O
*	O
wtab	pointer
,	O
*	O
windows	pointer
,	O
*	O
fore	pointer
;	O
extern	O
int	O
maxwin	int
;	O
extern	O
char	O
*	O
noargs	array
[	O
]	O
;	O
static	O
char	O
ListID	array
[	O
]	O
=	O
"window"	pointer
;	O
struct	O
gl_Window_Data	struct
{	O
struct	O
win	struct
*	O
group	pointer
;	O
int	O
order	int
;	O
int	O
onblank	int
;	O
int	O
nested	int
;	O
struct	O
win	struct
*	O
fore	pointer
;	O
}	O
;	O
static	O
int	O
window_ancestor	function
(	O
struct	O
win	struct
*	O
a	pointer
,	O
struct	O
win	struct
*	O
d	int
)	O
{	O
if	O
(	O
!	O
a	pointer
)	O
return	O
1	int
;	O
for	O
(	O
;	O
d	int
;	O
d	int
=	O
d	int
->	O
w_group	pointer
)	O
if	O
(	O
d	int
->	O
w_group	pointer
==	O
a	pointer
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
window_kill_confirm	function
(	O
char	O
*	O
buf	pointer
,	O
int	O
len	int
,	O
char	O
*	O
data	pointer
)	O
{	O
struct	O
win	struct
*	O
w	pointer
=	O
windows	pointer
;	O
struct	O
action	struct
act	pointer
;	O
if	O
(	O
len	int
||	O
(	O
*	O
buf	pointer
!=	O
'y'	O
&&	O
*	O
buf	pointer
!=	O
'Y'	O
)	O
)	O
{	O
memset	function
(	O
buf	pointer
,	O
0	int
,	O
len	int
)	O
;	O
return	O
;	O
}	O
for	O
(	O
;	O
w	pointer
;	O
w	pointer
=	O
w	pointer
->	O
w_next	pointer
)	O
if	O
(	O
w	pointer
==	O
(	O
struct	O
win	struct
*	O
)	O
data	pointer
)	O
break	O
;	O
if	O
(	O
!	O
w	pointer
)	O
return	O
;	O
fore	pointer
=	O
w	pointer
;	O
act	pointer
.	O
nr	int
=	O
RC_KILL	int
;	O
act	pointer
.	O
args	pointer
=	O
noargs	array
;	O
act	pointer
.	O
argl	pointer
=	O
0	int
;	O
act	pointer
.	O
quiet	int
=	O
0	int
;	O
DoAction	function
(	O
&	O
act	pointer
,	O
-	O
1	int
)	O
;	O
}	O
static	O
struct	O
ListRow	struct
*	O
gl_Window_add_group	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
struct	O
ListRow	struct
*	O
row	pointer
)	O
{	O
struct	O
gl_Window_Data	struct
*	O
wdata	pointer
=	O
ldata	pointer
->	O
data	pointer
;	O
struct	O
win	struct
*	O
group	pointer
=	O
row	pointer
->	O
data	pointer
,	O
*	O
w	pointer
;	O
struct	O
ListRow	struct
*	O
cur	pointer
=	O
row	pointer
;	O
ASSERT	O
(	O
wdata	pointer
->	O
nested	int
)	O
;	O
FOR_EACH_WINDOW	O
(	O
wdata	pointer
,	O
w	pointer
,	O
if	O
(	O
w	pointer
->	O
w_group	pointer
!=	O
group	pointer
)	O
continue	O
;	O
cur	pointer
=	O
glist_add_row	function
(	O
ldata	pointer
,	O
w	pointer
,	O
cur	pointer
)	O
;	O
if	O
(	O
w	pointer
==	O
wdata	pointer
->	O
fore	pointer
)	O
ldata	pointer
->	O
selected	pointer
=	O
cur	pointer
;	O
if	O
(	O
w	pointer
->	O
w_type	int
==	O
W_TYPE_GROUP	int
)	O
cur	pointer
=	O
gl_Window_add_group	function
(	O
ldata	pointer
,	O
cur	pointer
)	O
;	O
)	O
;	O
return	O
cur	pointer
;	O
}	O
static	O
void	O
gl_Window_rebuild	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
)	O
{	O
struct	O
ListRow	struct
*	O
row	pointer
=	O
NULL	O
;	O
struct	O
gl_Window_Data	struct
*	O
wdata	pointer
=	O
ldata	pointer
->	O
data	pointer
;	O
struct	O
win	struct
*	O
w	pointer
;	O
FOR_EACH_WINDOW	O
(	O
wdata	pointer
,	O
w	pointer
,	O
if	O
(	O
w	pointer
->	O
w_group	pointer
!=	O
wdata	pointer
->	O
group	pointer
)	O
continue	O
;	O
row	pointer
=	O
glist_add_row	function
(	O
ldata	pointer
,	O
w	pointer
,	O
row	pointer
)	O
;	O
if	O
(	O
w	pointer
==	O
wdata	pointer
->	O
fore	pointer
)	O
ldata	pointer
->	O
selected	pointer
=	O
row	pointer
;	O
if	O
(	O
w	pointer
->	O
w_type	int
==	O
W_TYPE_GROUP	int
&&	O
wdata	pointer
->	O
nested	int
)	O
row	pointer
=	O
gl_Window_add_group	function
(	O
ldata	pointer
,	O
row	pointer
)	O
;	O
)	O
;	O
glist_display_all	function
(	O
ldata	pointer
)	O
;	O
}	O
static	O
struct	O
ListRow	struct
*	O
gl_Window_findrow	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
struct	O
win	struct
*	O
p	pointer
)	O
{	O
struct	O
ListRow	struct
*	O
row	pointer
=	O
ldata	pointer
->	O
root	pointer
;	O
for	O
(	O
;	O
row	pointer
;	O
row	pointer
=	O
row	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
row	pointer
->	O
data	pointer
==	O
p	pointer
)	O
break	O
;	O
}	O
return	O
row	pointer
;	O
}	O
static	O
int	O
gl_Window_remove	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
struct	O
win	struct
*	O
p	pointer
)	O
{	O
struct	O
ListRow	struct
*	O
row	pointer
=	O
gl_Window_findrow	function
(	O
ldata	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
!	O
row	pointer
)	O
return	O
0	int
;	O
if	O
(	O
row	pointer
->	O
next	pointer
)	O
row	pointer
->	O
next	pointer
->	O
prev	pointer
=	O
row	pointer
->	O
prev	pointer
;	O
if	O
(	O
row	pointer
->	O
prev	pointer
)	O
row	pointer
->	O
prev	pointer
->	O
next	pointer
=	O
row	pointer
->	O
next	pointer
;	O
if	O
(	O
ldata	pointer
->	O
selected	pointer
==	O
row	pointer
)	O
ldata	pointer
->	O
selected	pointer
=	O
row	pointer
->	O
prev	pointer
?	O
row	pointer
->	O
prev	pointer
:	O
row	pointer
->	O
next	pointer
;	O
if	O
(	O
ldata	pointer
->	O
top	int
==	O
row	pointer
)	O
ldata	pointer
->	O
top	int
=	O
row	pointer
->	O
prev	pointer
?	O
row	pointer
->	O
prev	pointer
:	O
row	pointer
->	O
next	pointer
;	O
if	O
(	O
ldata	pointer
->	O
root	pointer
==	O
row	pointer
)	O
ldata	pointer
->	O
root	pointer
=	O
row	pointer
->	O
next	pointer
;	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_freerow	pointer
(	O
ldata	pointer
,	O
row	pointer
)	O
;	O
free	function
(	O
row	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
gl_Window_header	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
)	O
{	O
char	O
*	O
str	pointer
;	O
struct	O
gl_Window_Data	struct
*	O
wdata	pointer
=	O
ldata	pointer
->	O
data	pointer
;	O
int	O
g	int
;	O
if	O
(	O
(	O
g	int
=	O
(	O
wdata	pointer
->	O
group	pointer
!=	O
NULL	O
)	O
)	O
)	O
{	O
LPutWinMsg	function
(	O
flayer	pointer
,	O
"Group: "	pointer
,	O
7	int
,	O
&	O
mchar_blank	struct
,	O
0	int
,	O
0	int
)	O
;	O
LPutWinMsg	function
(	O
flayer	pointer
,	O
wdata	pointer
->	O
group	pointer
->	O
w_title	pointer
,	O
strlen	function
(	O
wdata	pointer
->	O
group	pointer
->	O
w_title	pointer
)	O
,	O
&	O
mchar_blank	struct
,	O
7	int
,	O
0	int
)	O
;	O
}	O
str	pointer
=	O
MakeWinMsgEv	function
(	O
wlisttit	pointer
,	O
(	O
struct	O
win	struct
*	O
)	O
0	int
,	O
'%'	O
,	O
flayer	pointer
->	O
l_width	int
,	O
(	O
struct	O
event	struct
*	O
)	O
0	int
,	O
0	int
)	O
;	O
LPutWinMsg	function
(	O
flayer	pointer
,	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
,	O
&	O
mchar_blank	struct
,	O
0	int
,	O
g	int
)	O
;	O
return	O
2	int
+	O
g	int
;	O
}	O
static	O
int	O
gl_Window_footer	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
gl_Window_row	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
struct	O
ListRow	struct
*	O
lrow	pointer
)	O
{	O
char	O
*	O
str	pointer
;	O
struct	O
win	struct
*	O
w	pointer
,	O
*	O
g	int
;	O
int	O
xoff	int
;	O
struct	O
mchar	struct
*	O
mchar	struct
;	O
struct	O
mchar	struct
mchar_rend	struct
=	O
mchar_blank	struct
;	O
struct	O
gl_Window_Data	struct
*	O
wdata	pointer
=	O
ldata	pointer
->	O
data	pointer
;	O
w	pointer
=	O
lrow	pointer
->	O
data	pointer
;	O
for	O
(	O
xoff	int
=	O
0	int
,	O
g	int
=	O
w	pointer
->	O
w_group	pointer
;	O
g	int
!=	O
wdata	pointer
->	O
group	pointer
;	O
g	int
=	O
g	int
->	O
w_group	pointer
)	O
xoff	int
+=	O
2	int
;	O
str	pointer
=	O
MakeWinMsgEv	function
(	O
wliststr	pointer
,	O
w	pointer
,	O
'%'	O
,	O
flayer	pointer
->	O
l_width	int
-	O
xoff	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
ldata	pointer
->	O
selected	pointer
==	O
lrow	pointer
)	O
mchar	struct
=	O
&	O
mchar_so	struct
;	O
else	O
if	O
(	O
w	pointer
->	O
w_monitor	int
==	O
MON_DONE	int
&&	O
renditions	array
[	O
REND_MONITOR	int
]	O
!=	O
-	O
1	int
)	O
{	O
mchar	struct
=	O
&	O
mchar_rend	struct
;	O
ApplyAttrColor	function
(	O
renditions	array
[	O
REND_MONITOR	int
]	O
,	O
mchar	struct
)	O
;	O
}	O
else	O
if	O
(	O
(	O
w	pointer
->	O
w_bell	int
==	O
BELL_DONE	int
||	O
w	pointer
->	O
w_bell	int
==	O
BELL_FOUND	int
)	O
&&	O
renditions	array
[	O
REND_BELL	int
]	O
!=	O
-	O
1	int
)	O
{	O
mchar	struct
=	O
&	O
mchar_rend	struct
;	O
ApplyAttrColor	function
(	O
renditions	array
[	O
REND_BELL	int
]	O
,	O
mchar	struct
)	O
;	O
}	O
else	O
if	O
(	O
(	O
w	pointer
->	O
w_silence	int
==	O
SILENCE_FOUND	int
||	O
w	pointer
->	O
w_silence	int
==	O
SILENCE_DONE	int
)	O
&&	O
renditions	array
[	O
REND_SILENCE	int
]	O
!=	O
-	O
1	int
)	O
{	O
mchar	struct
=	O
&	O
mchar_rend	struct
;	O
ApplyAttrColor	function
(	O
renditions	array
[	O
REND_SILENCE	int
]	O
,	O
mchar	struct
)	O
;	O
}	O
else	O
mchar	struct
=	O
&	O
mchar_blank	struct
;	O
LPutWinMsg	function
(	O
flayer	pointer
,	O
str	pointer
,	O
flayer	pointer
->	O
l_width	int
,	O
mchar	struct
,	O
xoff	int
,	O
lrow	pointer
->	O
y	int
)	O
;	O
if	O
(	O
xoff	int
)	O
LPutWinMsg	function
(	O
flayer	pointer
,	O
""	pointer
,	O
xoff	int
,	O
mchar	struct
,	O
0	int
,	O
lrow	pointer
->	O
y	int
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
gl_Window_input	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
char	O
*	O
*	O
inp	pointer
,	O
int	O
*	O
len	int
)	O
{	O
struct	O
win	struct
*	O
win	struct
;	O
unsigned	O
char	O
ch	char
;	O
struct	O
display	struct
*	O
cd	pointer
=	O
display	struct
;	O
struct	O
gl_Window_Data	struct
*	O
wdata	pointer
=	O
ldata	pointer
->	O
data	pointer
;	O
if	O
(	O
!	O
ldata	pointer
->	O
selected	pointer
)	O
return	O
0	int
;	O
ch	char
=	O
(	O
unsigned	O
char	O
)	O
*	O
*	O
inp	pointer
;	O
++	O
*	O
inp	pointer
;	O
--	O
*	O
len	int
;	O
win	struct
=	O
ldata	pointer
->	O
selected	pointer
->	O
data	pointer
;	O
switch	O
(	O
ch	char
)	O
{	O
case	O
' '	O
:	O
case	O
'\n'	O
:	O
case	O
'\r'	O
:	O
if	O
(	O
!	O
win	struct
)	O
break	O
;	O
if	O
(	O
display	struct
&&	O
AclCheckPermWin	function
(	O
D_user	O
,	O
ACL_READ	int
,	O
win	struct
)	O
)	O
return	O
0	int
;	O
if	O
(	O
WLIST_FOR_GROUP	O
(	O
wdata	pointer
)	O
)	O
SwitchWindow	function
(	O
win	struct
->	O
w_number	int
)	O
;	O
else	O
{	O
glist_abort	function
(	O
)	O
;	O
display	struct
=	O
cd	pointer
;	O
if	O
(	O
D_fore	O
!=	O
win	struct
)	O
SwitchWindow	function
(	O
win	struct
->	O
w_number	int
)	O
;	O
}	O
*	O
len	int
=	O
0	int
;	O
break	O
;	O
case	O
'm'	O
:	O
wdata	pointer
->	O
order	int
=	O
wdata	pointer
->	O
order	int
==	O
WLIST_MRU	int
?	O
WLIST_NUM	int
:	O
WLIST_MRU	int
;	O
glist_remove_rows	function
(	O
ldata	pointer
)	O
;	O
gl_Window_rebuild	function
(	O
ldata	pointer
)	O
;	O
break	O
;	O
case	O
'g'	O
:	O
wdata	pointer
->	O
nested	int
=	O
!	O
wdata	pointer
->	O
nested	int
;	O
glist_remove_rows	function
(	O
ldata	pointer
)	O
;	O
gl_Window_rebuild	function
(	O
ldata	pointer
)	O
;	O
break	O
;	O
case	O
'a'	O
:	O
if	O
(	O
wdata	pointer
->	O
group	pointer
)	O
{	O
int	O
order	int
=	O
wdata	pointer
->	O
order	int
|	O
(	O
wdata	pointer
->	O
nested	int
?	O
WLIST_NESTED	int
:	O
0	int
)	O
;	O
glist_abort	function
(	O
)	O
;	O
display	struct
=	O
cd	pointer
;	O
display_windows	function
(	O
1	int
,	O
order	int
,	O
NULL	O
)	O
;	O
*	O
len	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
wdata	pointer
->	O
nested	int
)	O
{	O
wdata	pointer
->	O
nested	int
=	O
1	int
;	O
glist_remove_rows	function
(	O
ldata	pointer
)	O
;	O
gl_Window_rebuild	function
(	O
ldata	pointer
)	O
;	O
}	O
break	O
;	O
case	O
010	int
:	O
case	O
0177	int
:	O
if	O
(	O
!	O
wdata	pointer
->	O
group	pointer
)	O
break	O
;	O
if	O
(	O
wdata	pointer
->	O
group	pointer
->	O
w_group	pointer
)	O
{	O
struct	O
win	struct
*	O
g	int
=	O
wdata	pointer
->	O
group	pointer
->	O
w_group	pointer
;	O
glist_abort	function
(	O
)	O
;	O
display	struct
=	O
cd	pointer
;	O
SetForeWindow	function
(	O
g	int
)	O
;	O
*	O
len	int
=	O
0	int
;	O
}	O
else	O
{	O
int	O
order	int
=	O
wdata	pointer
->	O
order	int
|	O
(	O
wdata	pointer
->	O
nested	int
?	O
WLIST_NESTED	int
:	O
0	int
)	O
;	O
glist_abort	function
(	O
)	O
;	O
display	struct
=	O
cd	pointer
;	O
display_windows	function
(	O
1	int
,	O
order	int
,	O
NULL	O
)	O
;	O
*	O
len	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
','	O
:	O
if	O
(	O
wdata	pointer
->	O
order	int
==	O
WLIST_NUM	int
&&	O
ldata	pointer
->	O
selected	pointer
->	O
prev	pointer
)	O
{	O
struct	O
win	struct
*	O
pw	pointer
=	O
ldata	pointer
->	O
selected	pointer
->	O
prev	pointer
->	O
data	pointer
;	O
if	O
(	O
win	struct
->	O
w_group	pointer
!=	O
pw	pointer
->	O
w_group	pointer
)	O
break	O
;	O
wdata	pointer
->	O
fore	pointer
=	O
win	struct
;	O
WindowChangeNumber	function
(	O
win	struct
->	O
w_number	int
,	O
pw	pointer
->	O
w_number	int
)	O
;	O
}	O
break	O
;	O
case	O
'.'	O
:	O
if	O
(	O
wdata	pointer
->	O
order	int
==	O
WLIST_NUM	int
&&	O
ldata	pointer
->	O
selected	pointer
->	O
next	pointer
)	O
{	O
struct	O
win	struct
*	O
nw	pointer
=	O
ldata	pointer
->	O
selected	pointer
->	O
next	pointer
->	O
data	pointer
;	O
if	O
(	O
win	struct
->	O
w_group	pointer
!=	O
nw	pointer
->	O
w_group	pointer
)	O
break	O
;	O
wdata	pointer
->	O
fore	pointer
=	O
win	struct
;	O
WindowChangeNumber	function
(	O
win	struct
->	O
w_number	int
,	O
nw	pointer
->	O
w_number	int
)	O
;	O
}	O
break	O
;	O
case	O
'K'	O
:	O
{	O
char	O
str	pointer
[	O
MAXSTR	int
]	O
;	O
snprintf	function
(	O
str	pointer
,	O
sizeof	O
(	O
str	pointer
)	O
-	O
1	int
,	O
"Really kill window %d (%s) [y/n]"	pointer
,	O
win	struct
->	O
w_number	int
,	O
win	struct
->	O
w_title	pointer
)	O
;	O
Input	function
(	O
str	pointer
,	O
1	int
,	O
INP_RAW	int
,	O
window_kill_confirm	function
,	O
(	O
char	O
*	O
)	O
win	struct
,	O
0	int
)	O
;	O
}	O
break	O
;	O
case	O
033	int
:	O
case	O
007	int
:	O
if	O
(	O
!	O
WLIST_FOR_GROUP	O
(	O
wdata	pointer
)	O
)	O
{	O
int	O
fnumber	int
=	O
wdata	pointer
->	O
onblank	int
?	O
wdata	pointer
->	O
fore	pointer
->	O
w_number	int
:	O
-	O
1	int
;	O
glist_abort	function
(	O
)	O
;	O
display	struct
=	O
cd	pointer
;	O
if	O
(	O
fnumber	int
>=	O
0	int
)	O
SwitchWindow	function
(	O
fnumber	int
)	O
;	O
*	O
len	int
=	O
0	int
;	O
}	O
break	O
;	O
default	O
:	O
if	O
(	O
ch	char
>=	O
'0'	O
&&	O
ch	char
<=	O
'9'	O
)	O
{	O
struct	O
ListRow	struct
*	O
row	pointer
=	O
ldata	pointer
->	O
root	pointer
;	O
for	O
(	O
;	O
row	pointer
;	O
row	pointer
=	O
row	pointer
->	O
next	pointer
)	O
{	O
struct	O
win	struct
*	O
w	pointer
=	O
row	pointer
->	O
data	pointer
;	O
if	O
(	O
w	pointer
->	O
w_number	int
==	O
ch	char
-	O
'0'	O
)	O
{	O
struct	O
ListRow	struct
*	O
old	pointer
=	O
ldata	pointer
->	O
selected	pointer
;	O
if	O
(	O
old	pointer
==	O
row	pointer
)	O
break	O
;	O
ldata	pointer
->	O
selected	pointer
=	O
row	pointer
;	O
if	O
(	O
ldata	pointer
->	O
selected	pointer
->	O
y	int
==	O
-	O
1	int
)	O
{	O
ldata	pointer
->	O
top	int
=	O
row	pointer
;	O
glist_display_all	function
(	O
ldata	pointer
)	O
;	O
}	O
else	O
{	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_printrow	pointer
(	O
ldata	pointer
,	O
old	pointer
)	O
;	O
ldata	pointer
->	O
list_fn	pointer
->	O
gl_printrow	pointer
(	O
ldata	pointer
,	O
ldata	pointer
->	O
selected	pointer
)	O
;	O
flayer	pointer
->	O
l_y	int
=	O
ldata	pointer
->	O
selected	pointer
->	O
y	int
;	O
LaySetCursor	O
(	O
)	O
;	O
}	O
break	O
;	O
}	O
}	O
break	O
;	O
}	O
--	O
*	O
inp	pointer
;	O
++	O
*	O
len	int
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
gl_Window_freerow	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
struct	O
ListRow	struct
*	O
row	pointer
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
gl_Window_free	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
)	O
{	O
Free	O
(	O
ldata	pointer
->	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
gl_Window_match	function
(	O
struct	O
ListData	struct
*	O
ldata	pointer
,	O
struct	O
ListRow	struct
*	O
row	pointer
,	O
const	O
char	O
*	O
needle	pointer
)	O
{	O
struct	O
win	struct
*	O
w	pointer
=	O
row	pointer
->	O
data	pointer
;	O
if	O
(	O
InStr	function
(	O
w	pointer
->	O
w_title	pointer
,	O
needle	pointer
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
GenericList	struct
gl_Window	struct
=	O
{	O
gl_Window_header	function
,	O
gl_Window_footer	function
,	O
gl_Window_row	function
,	O
gl_Window_input	function
,	O
gl_Window_freerow	function
,	O
gl_Window_free	function
,	O
gl_Window_match	function
}	O
;	O
void	O
display_windows	function
(	O
int	O
onblank	int
,	O
int	O
order	int
,	O
struct	O
win	struct
*	O
group	pointer
)	O
{	O
struct	O
win	struct
*	O
p	pointer
;	O
struct	O
ListData	struct
*	O
ldata	pointer
;	O
struct	O
gl_Window_Data	struct
*	O
wdata	pointer
;	O
if	O
(	O
flayer	pointer
->	O
l_width	int
<	O
10	int
||	O
flayer	pointer
->	O
l_height	int
<	O
6	int
)	O
{	O
LMsg	function
(	O
0	int
,	O
"Window size too small for window list page"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
group	pointer
)	O
onblank	int
=	O
0	int
;	O
if	O
(	O
onblank	int
)	O
{	O
debug3	O
(	O
"flayer %x %d %x\n"	pointer
,	O
flayer	pointer
,	O
flayer	pointer
->	O
l_width	int
,	O
flayer	pointer
->	O
l_height	int
)	O
;	O
if	O
(	O
!	O
display	struct
)	O
{	O
LMsg	function
(	O
0	int
,	O
"windowlist -b: display required"	pointer
)	O
;	O
return	O
;	O
}	O
p	pointer
=	O
D_fore	O
;	O
if	O
(	O
p	pointer
)	O
{	O
SetForeWindow	function
(	O
(	O
struct	O
win	struct
*	O
)	O
0	int
)	O
;	O
if	O
(	O
p	pointer
->	O
w_group	pointer
)	O
{	O
D_fore	O
=	O
p	pointer
->	O
w_group	pointer
;	O
flayer	pointer
->	O
l_data	pointer
=	O
(	O
char	O
*	O
)	O
p	pointer
->	O
w_group	pointer
;	O
}	O
Activate	function
(	O
0	int
)	O
;	O
}	O
if	O
(	O
flayer	pointer
->	O
l_width	int
<	O
10	int
||	O
flayer	pointer
->	O
l_height	int
<	O
6	int
)	O
{	O
LMsg	function
(	O
0	int
,	O
"Window size too small for window list page"	pointer
)	O
;	O
return	O
;	O
}	O
}	O
else	O
p	pointer
=	O
Layer2Window	O
(	O
flayer	pointer
)	O
;	O
if	O
(	O
!	O
group	pointer
&&	O
p	pointer
)	O
group	pointer
=	O
p	pointer
->	O
w_group	pointer
;	O
ldata	pointer
=	O
glist_display	function
(	O
&	O
gl_Window	struct
,	O
ListID	array
)	O
;	O
if	O
(	O
!	O
ldata	pointer
)	O
{	O
if	O
(	O
onblank	int
&&	O
p	pointer
)	O
{	O
SetForeWindow	function
(	O
p	pointer
)	O
;	O
Activate	function
(	O
1	int
)	O
;	O
}	O
return	O
;	O
}	O
wdata	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
gl_Window_Data	struct
)	O
)	O
;	O
wdata	pointer
->	O
group	pointer
=	O
group	pointer
;	O
wdata	pointer
->	O
order	int
=	O
(	O
order	int
&	O
~	O
WLIST_NESTED	int
)	O
;	O
wdata	pointer
->	O
nested	int
=	O
!	O
!	O
(	O
order	int
&	O
WLIST_NESTED	int
)	O
;	O
wdata	pointer
->	O
onblank	int
=	O
onblank	int
;	O
wdata	pointer
->	O
fore	pointer
=	O
windows	pointer
;	O
while	O
(	O
wdata	pointer
->	O
fore	pointer
&&	O
wdata	pointer
->	O
fore	pointer
->	O
w_group	pointer
!=	O
group	pointer
)	O
wdata	pointer
->	O
fore	pointer
=	O
wdata	pointer
->	O
fore	pointer
->	O
w_next	pointer
;	O
ldata	pointer
->	O
data	pointer
=	O
wdata	pointer
;	O
gl_Window_rebuild	function
(	O
ldata	pointer
)	O
;	O
}	O
static	O
void	O
WListUpdate	function
(	O
struct	O
win	struct
*	O
p	pointer
,	O
struct	O
ListData	struct
*	O
ldata	pointer
)	O
{	O
struct	O
gl_Window_Data	struct
*	O
wdata	pointer
=	O
ldata	pointer
->	O
data	pointer
;	O
struct	O
ListRow	struct
*	O
row	pointer
,	O
*	O
rbefore	pointer
;	O
struct	O
win	struct
*	O
before	pointer
;	O
int	O
d	int
=	O
0	int
,	O
sel	int
=	O
0	int
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
if	O
(	O
ldata	pointer
->	O
selected	pointer
)	O
wdata	pointer
->	O
fore	pointer
=	O
ldata	pointer
->	O
selected	pointer
->	O
data	pointer
;	O
glist_remove_rows	function
(	O
ldata	pointer
)	O
;	O
gl_Window_rebuild	function
(	O
ldata	pointer
)	O
;	O
return	O
;	O
}	O
d	int
=	O
1	int
;	O
if	O
(	O
wdata	pointer
->	O
order	int
==	O
WLIST_NUM	int
||	O
wdata	pointer
->	O
order	int
==	O
WLIST_MRU	int
)	O
{	O
if	O
(	O
p	pointer
->	O
w_group	pointer
!=	O
wdata	pointer
->	O
group	pointer
)	O
{	O
if	O
(	O
!	O
wdata	pointer
->	O
nested	int
)	O
d	int
=	O
0	int
;	O
else	O
d	int
=	O
window_ancestor	function
(	O
wdata	pointer
->	O
group	pointer
,	O
p	pointer
)	O
;	O
}	O
}	O
if	O
(	O
!	O
d	int
)	O
{	O
if	O
(	O
gl_Window_remove	function
(	O
ldata	pointer
,	O
p	pointer
)	O
)	O
glist_display_all	function
(	O
ldata	pointer
)	O
;	O
return	O
;	O
}	O
before	pointer
=	O
NULL	O
;	O
if	O
(	O
wdata	pointer
->	O
order	int
==	O
WLIST_MRU	int
)	O
{	O
if	O
(	O
windows	pointer
!=	O
p	pointer
)	O
for	O
(	O
before	pointer
=	O
windows	pointer
;	O
before	pointer
;	O
before	pointer
=	O
before	pointer
->	O
w_next	pointer
)	O
if	O
(	O
before	pointer
->	O
w_next	pointer
==	O
p	pointer
)	O
break	O
;	O
}	O
else	O
if	O
(	O
wdata	pointer
->	O
order	int
==	O
WLIST_NUM	int
)	O
{	O
if	O
(	O
p	pointer
->	O
w_number	int
!=	O
0	int
)	O
{	O
struct	O
win	struct
*	O
*	O
w	pointer
=	O
wtab	pointer
+	O
p	pointer
->	O
w_number	int
-	O
1	int
;	O
for	O
(	O
;	O
w	pointer
>=	O
wtab	pointer
;	O
w	pointer
--	O
)	O
{	O
if	O
(	O
*	O
w	pointer
&&	O
(	O
*	O
w	pointer
)	O
->	O
w_group	pointer
==	O
wdata	pointer
->	O
group	pointer
)	O
{	O
before	pointer
=	O
*	O
w	pointer
;	O
break	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
before	pointer
)	O
rbefore	pointer
=	O
gl_Window_findrow	function
(	O
ldata	pointer
,	O
before	pointer
)	O
;	O
else	O
if	O
(	O
wdata	pointer
->	O
nested	int
&&	O
p	pointer
->	O
w_group	pointer
)	O
rbefore	pointer
=	O
gl_Window_findrow	function
(	O
ldata	pointer
,	O
p	pointer
->	O
w_group	pointer
)	O
;	O
else	O
rbefore	pointer
=	O
NULL	O
;	O
row	pointer
=	O
gl_Window_findrow	function
(	O
ldata	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
row	pointer
)	O
{	O
if	O
(	O
row	pointer
->	O
prev	pointer
!=	O
rbefore	pointer
)	O
{	O
sel	int
=	O
ldata	pointer
->	O
selected	pointer
->	O
data	pointer
==	O
p	pointer
;	O
gl_Window_remove	function
(	O
ldata	pointer
,	O
p	pointer
)	O
;	O
}	O
else	O
p	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
p	pointer
)	O
{	O
row	pointer
=	O
glist_add_row	function
(	O
ldata	pointer
,	O
p	pointer
,	O
rbefore	pointer
)	O
;	O
if	O
(	O
sel	int
)	O
ldata	pointer
->	O
selected	pointer
=	O
row	pointer
;	O
}	O
glist_display_all	function
(	O
ldata	pointer
)	O
;	O
}	O
void	O
WListUpdatecv	function
(	O
cv	pointer
,	O
p	pointer
)	O
struct	O
canvas	struct
*	O
cv	pointer
;	O
struct	O
win	struct
*	O
p	pointer
;	O
{	O
struct	O
ListData	struct
*	O
ldata	pointer
;	O
struct	O
gl_Window_Data	struct
*	O
wdata	pointer
;	O
if	O
(	O
cv	pointer
->	O
c_layer	pointer
->	O
l_layfn	pointer
!=	O
&	O
ListLf	struct
)	O
return	O
;	O
ldata	pointer
=	O
cv	pointer
->	O
c_layer	pointer
->	O
l_data	pointer
;	O
if	O
(	O
ldata	pointer
->	O
name	pointer
!=	O
ListID	array
)	O
return	O
;	O
wdata	pointer
=	O
ldata	pointer
->	O
data	pointer
;	O
CV_CALL	O
(	O
cv	pointer
,	O
WListUpdate	function
(	O
p	pointer
,	O
ldata	pointer
)	O
)	O
;	O
}	O
void	O
WListLinkChanged	function
(	O
)	O
{	O
struct	O
display	struct
*	O
olddisplay	pointer
=	O
display	struct
;	O
struct	O
canvas	struct
*	O
cv	pointer
;	O
struct	O
ListData	struct
*	O
ldata	pointer
;	O
struct	O
gl_Window_Data	struct
*	O
wdata	pointer
;	O
for	O
(	O
display	struct
=	O
displays	pointer
;	O
display	struct
;	O
display	struct
=	O
display	struct
->	O
d_next	pointer
)	O
for	O
(	O
cv	pointer
=	O
D_cvlist	O
;	O
cv	pointer
;	O
cv	pointer
=	O
cv	pointer
->	O
c_next	pointer
)	O
{	O
if	O
(	O
!	O
cv	pointer
->	O
c_layer	pointer
||	O
cv	pointer
->	O
c_layer	pointer
->	O
l_layfn	pointer
!=	O
&	O
ListLf	struct
)	O
continue	O
;	O
ldata	pointer
=	O
cv	pointer
->	O
c_layer	pointer
->	O
l_data	pointer
;	O
if	O
(	O
ldata	pointer
->	O
name	pointer
!=	O
ListID	array
)	O
continue	O
;	O
wdata	pointer
=	O
ldata	pointer
->	O
data	pointer
;	O
if	O
(	O
!	O
(	O
wdata	pointer
->	O
order	int
&	O
WLIST_MRU	int
)	O
)	O
continue	O
;	O
CV_CALL	O
(	O
cv	pointer
,	O
WListUpdate	function
(	O
0	int
,	O
ldata	pointer
)	O
)	O
;	O
}	O
display	struct
=	O
olddisplay	pointer
;	O
}	O
