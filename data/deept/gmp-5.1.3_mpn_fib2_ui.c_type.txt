mp_size_t	long
mpn_fib2_ui	O
(	O
mp_ptr	pointer
fp	pointer
,	O
mp_ptr	pointer
f1p	pointer
,	O
unsigned	O
long	O
int	O
n	long
)	O
{	O
mp_size_t	long
size	long
;	O
unsigned	O
long	O
nfirst	long
,	O
mask	long
;	O
TRACE	O
(	O
printf	function
(	O
"mpn_fib2_ui n=%lu\n"	pointer
,	O
n	long
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
fp	pointer
,	O
MPN_FIB2_SIZE	O
(	O
n	long
)	O
,	O
f1p	pointer
,	O
MPN_FIB2_SIZE	O
(	O
n	long
)	O
)	O
)	O
;	O
mask	long
=	O
1	int
;	O
for	O
(	O
nfirst	long
=	O
n	long
;	O
nfirst	long
>	O
FIB_TABLE_LIMIT	int
;	O
nfirst	long
/=	O
2	int
)	O
mask	long
<<=	O
1	int
;	O
TRACE	O
(	O
printf	function
(	O
"nfirst=%lu mask=0x%lX\n"	pointer
,	O
nfirst	long
,	O
mask	long
)	O
)	O
;	O
f1p	pointer
[	O
0	int
]	O
=	O
FIB_TABLE	O
(	O
(	O
int	O
)	O
nfirst	long
-	O
1	int
)	O
;	O
fp	pointer
[	O
0	int
]	O
=	O
FIB_TABLE	O
(	O
nfirst	long
)	O
;	O
size	long
=	O
1	int
;	O
if	O
(	O
mask	long
!=	O
1	int
)	O
{	O
mp_size_t	long
alloc	long
;	O
mp_ptr	pointer
xp	pointer
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
alloc	long
=	O
MPN_FIB2_SIZE	O
(	O
n	long
)	O
;	O
xp	pointer
=	O
TMP_ALLOC_LIMBS	O
(	O
alloc	long
)	O
;	O
do	O
{	O
TRACE	O
(	O
printf	function
(	O
"k=%lu mask=0x%lX size=%ld alloc=%ld\n"	pointer
,	O
n	long
>>	O
refmpn_count_trailing_zeros	O
(	O
mask	long
)	O
,	O
mask	long
,	O
size	long
,	O
alloc	long
)	O
;	O
mpn_trace	O
(	O
"fp "	pointer
,	O
fp	pointer
,	O
size	long
)	O
;	O
mpn_trace	O
(	O
"f1p"	pointer
,	O
f1p	pointer
,	O
size	long
)	O
)	O
;	O
ASSERT	O
(	O
fp	pointer
[	O
size	long
-	O
1	int
]	O
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
f1p	pointer
[	O
size	long
-	O
1	int
]	O
!=	O
0	int
||	O
f1p	pointer
[	O
size	long
-	O
2	int
]	O
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
alloc	long
>=	O
2	int
*	O
size	long
)	O
;	O
mpn_sqr	O
(	O
xp	pointer
,	O
fp	pointer
,	O
size	long
)	O
;	O
mpn_sqr	O
(	O
fp	pointer
,	O
f1p	pointer
,	O
size	long
)	O
;	O
size	long
*=	O
2	int
;	O
ASSERT	O
(	O
xp	pointer
[	O
size	long
-	O
1	int
]	O
!=	O
0	int
||	O
fp	pointer
[	O
size	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
size	long
-=	O
(	O
xp	pointer
[	O
size	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
ASSERT	O
(	O
xp	pointer
[	O
size	long
-	O
1	int
]	O
!=	O
0	int
)	O
;	O
f1p	pointer
[	O
size	long
]	O
=	O
mpn_add_n	O
(	O
f1p	pointer
,	O
xp	pointer
,	O
fp	pointer
,	O
size	long
)	O
;	O
fp	pointer
[	O
size	long
]	O
=	O
mpn_rsblsh2_n	O
(	O
fp	pointer
,	O
fp	pointer
,	O
xp	pointer
,	O
size	long
)	O
;	O
if	O
(	O
(	O
n	long
&	O
mask	long
)	O
==	O
0	int
)	O
MPN_INCR_U	O
(	O
fp	pointer
,	O
size	long
+	O
1	int
,	O
2	int
)	O
;	O
else	O
{	O
ASSERT	O
(	O
fp	pointer
[	O
0	int
]	O
>=	O
2	int
)	O
;	O
fp	pointer
[	O
0	int
]	O
-=	O
2	int
;	O
}	O
ASSERT	O
(	O
alloc	long
>=	O
size	long
+	O
1	int
)	O
;	O
size	long
+=	O
(	O
fp	pointer
[	O
size	long
]	O
!=	O
0	int
)	O
;	O
mask	long
>>=	O
1	int
;	O
if	O
(	O
n	long
&	O
mask	long
)	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
f1p	pointer
,	O
fp	pointer
,	O
f1p	pointer
,	O
size	long
)	O
)	O
;	O
else	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
fp	pointer
,	O
fp	pointer
,	O
f1p	pointer
,	O
size	long
)	O
)	O
;	O
ASSERT	O
(	O
fp	pointer
[	O
size	long
-	O
1	int
]	O
!=	O
0	int
||	O
f1p	pointer
[	O
size	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
size	long
-=	O
(	O
fp	pointer
[	O
size	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
}	O
}	O
while	O
(	O
mask	long
!=	O
1	int
)	O
;	O
TMP_FREE	O
;	O
}	O
TRACE	O
(	O
printf	function
(	O
"done size=%ld\n"	pointer
,	O
size	long
)	O
;	O
mpn_trace	O
(	O
"fp "	pointer
,	O
fp	pointer
,	O
size	long
)	O
;	O
mpn_trace	O
(	O
"f1p"	pointer
,	O
f1p	pointer
,	O
size	long
)	O
)	O
;	O
return	O
size	long
;	O
}	O
