extern	O
int	O
spawn_flag	int
;	O
struct	O
request_class	struct
request_class	struct
[	O
]	O
=	O
{	O
{	O
"AUTH"	pointer
,	O
0	int
,	O
MAX_REQUEST_TIME	int
,	O
CLEANUP_DELAY	int
,	O
radius_auth_req_decode	function
,	O
radius_respond	function
,	O
radius_req_xmit	function
,	O
radius_req_cmp	function
,	O
radius_req_free	function
,	O
radius_req_drop	function
,	O
radiusd_sql_cleanup	O
,	O
radius_req_failure	function
,	O
radius_req_update	function
,	O
}	O
,	O
{	O
"ACCT"	pointer
,	O
0	int
,	O
MAX_REQUEST_TIME	int
,	O
CLEANUP_DELAY	int
,	O
radius_acct_req_decode	function
,	O
radius_respond	function
,	O
radius_req_xmit	function
,	O
radius_req_cmp	function
,	O
radius_req_free	function
,	O
radius_req_drop	function
,	O
radiusd_sql_cleanup	O
,	O
radius_req_failure	function
,	O
radius_req_update	function
,	O
}	O
,	O
{	O
NULL	O
,	O
}	O
}	O
;	O
static	O
grad_list_t	struct
*	O
request_list	pointer
;	O
REQUEST	struct
*	O
request_create	function
(	O
int	O
type	int
,	O
int	O
fd	int
,	O
const	O
struct	O
sockaddr_in	struct
*	O
srv_sa	pointer
,	O
const	O
struct	O
sockaddr_in	struct
*	O
clt_sa	pointer
,	O
u_char	char
*	O
buf	pointer
,	O
size_t	long
bufsize	long
)	O
{	O
void	O
*	O
data	pointer
;	O
REQUEST	struct
*	O
req	pointer
;	O
if	O
(	O
request_class	struct
[	O
type	int
]	O
.	O
decode	pointer
(	O
srv_sa	pointer
,	O
clt_sa	pointer
,	O
buf	pointer
,	O
bufsize	long
,	O
&	O
data	pointer
)	O
)	O
return	O
NULL	O
;	O
req	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
*	O
req	pointer
)	O
;	O
req	pointer
->	O
data	pointer
=	O
data	pointer
;	O
time	struct
(	O
&	O
req	pointer
->	O
timestamp	long
)	O
;	O
req	pointer
->	O
type	int
=	O
type	int
;	O
req	pointer
->	O
srv_addr	struct
=	O
*	O
srv_sa	pointer
;	O
req	pointer
->	O
addr	int
=	O
*	O
clt_sa	pointer
;	O
req	pointer
->	O
rawdata	pointer
=	O
grad_emalloc	function
(	O
bufsize	long
)	O
;	O
memcpy	function
(	O
req	pointer
->	O
rawdata	pointer
,	O
buf	pointer
,	O
bufsize	long
)	O
;	O
req	pointer
->	O
rawsize	long
=	O
bufsize	long
;	O
req	pointer
->	O
child_id	int
=	O
0	int
;	O
req	pointer
->	O
status	int
=	O
RS_WAITING	int
;	O
req	pointer
->	O
fd	int
=	O
fd	int
;	O
return	O
req	pointer
;	O
}	O
void	O
request_free	function
(	O
REQUEST	struct
*	O
req	pointer
)	O
{	O
if	O
(	O
req	pointer
)	O
{	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
free	pointer
(	O
req	pointer
->	O
data	pointer
)	O
;	O
grad_free	function
(	O
req	pointer
->	O
rawdata	pointer
)	O
;	O
grad_free	function
(	O
req	pointer
)	O
;	O
}	O
}	O
void	O
request_drop	function
(	O
int	O
type	int
,	O
void	O
*	O
data	pointer
,	O
void	O
*	O
orig_data	pointer
,	O
int	O
fd	int
,	O
const	O
char	O
*	O
status_str	pointer
)	O
{	O
request_class	struct
[	O
type	int
]	O
.	O
drop	pointer
(	O
type	int
,	O
data	pointer
,	O
orig_data	pointer
,	O
fd	int
,	O
status_str	pointer
)	O
;	O
}	O
int	O
request_respond	function
(	O
REQUEST	struct
*	O
req	pointer
)	O
{	O
int	O
rc	int
=	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
respond	pointer
(	O
req	pointer
)	O
;	O
req	pointer
->	O
status	int
=	O
RS_COMPLETED	int
;	O
return	O
rc	int
;	O
}	O
void	O
request_xmit	function
(	O
REQUEST	struct
*	O
req	pointer
)	O
{	O
if	O
(	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
xmit	pointer
)	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
xmit	pointer
(	O
req	pointer
)	O
;	O
}	O
int	O
request_cmp	function
(	O
REQUEST	struct
*	O
req	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
return	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
comp	pointer
(	O
req	pointer
->	O
data	pointer
,	O
ptr	pointer
)	O
;	O
}	O
void	O
request_cleanup	function
(	O
REQUEST	struct
*	O
req	pointer
)	O
{	O
if	O
(	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
cleanup	pointer
)	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
cleanup	pointer
(	O
req	pointer
->	O
type	int
,	O
req	pointer
->	O
data	pointer
)	O
;	O
}	O
int	O
request_forward	function
(	O
REQUEST	struct
*	O
req	pointer
)	O
{	O
if	O
(	O
spawn_flag	int
&&	O
radiusd_master	function
(	O
)	O
)	O
{	O
if	O
(	O
rpp_ready	function
(	O
req	pointer
->	O
child_id	int
)	O
)	O
{	O
rpp_forward_request	function
(	O
req	pointer
)	O
;	O
req	pointer
->	O
status	int
=	O
RS_COMPLETED	int
;	O
return	O
0	int
;	O
}	O
else	O
{	O
req	pointer
->	O
status	int
=	O
RS_XMIT	int
;	O
return	O
1	int
;	O
}	O
}	O
else	O
request_xmit	function
(	O
req	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
request_retransmit	function
(	O
REQUEST	struct
*	O
req	pointer
,	O
void	O
*	O
rawdata	pointer
,	O
size_t	long
rawsize	long
)	O
{	O
grad_free	function
(	O
req	pointer
->	O
rawdata	pointer
)	O
;	O
req	pointer
->	O
rawdata	pointer
=	O
grad_emalloc	function
(	O
rawsize	long
)	O
;	O
memcpy	function
(	O
req	pointer
->	O
rawdata	pointer
,	O
rawdata	pointer
,	O
rawsize	long
)	O
;	O
req	pointer
->	O
rawsize	long
=	O
rawsize	long
;	O
return	O
request_forward	function
(	O
req	pointer
)	O
;	O
}	O
struct	O
request_closure	struct
{	O
int	O
type	int
;	O
void	O
*	O
data	pointer
;	O
void	O
*	O
rawdata	pointer
;	O
size_t	long
rawsize	long
;	O
time_t	long
curtime	long
;	O
int	O
(	O
*	O
handler	pointer
)	O
(	O
REQUEST	struct
*	O
)	O
;	O
int	O
state	pointer
;	O
REQUEST	struct
*	O
orig	pointer
;	O
REQUEST	struct
*	O
lru	pointer
;	O
size_t	long
request_count	long
;	O
size_t	long
request_type_count	long
;	O
}	O
;	O
int	O
request_call_handler	function
(	O
int	O
(	O
*	O
handler	pointer
)	O
(	O
REQUEST	struct
*	O
)	O
,	O
REQUEST	struct
*	O
req	pointer
)	O
{	O
int	O
rc	int
=	O
(	O
*	O
handler	pointer
)	O
(	O
req	pointer
)	O
;	O
request_cleanup	function
(	O
req	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_request_iterator	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
clos	pointer
)	O
{	O
REQUEST	struct
*	O
req	pointer
=	O
item	pointer
;	O
struct	O
request_closure	struct
*	O
rp	pointer
=	O
clos	pointer
;	O
if	O
(	O
req	pointer
->	O
status	int
==	O
RS_COMPLETED	int
)	O
{	O
if	O
(	O
req	pointer
->	O
timestamp	long
+	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
cleanup_delay	int
<=	O
rp	pointer
->	O
curtime	long
)	O
{	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"deleting completed %s request"	pointer
,	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
name	pointer
)	O
;	O
grad_list_remove	function
(	O
request_list	pointer
,	O
req	pointer
,	O
NULL	O
)	O
;	O
request_free	function
(	O
req	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
req	pointer
->	O
type	int
==	O
rp	pointer
->	O
type	int
&&	O
(	O
rp	pointer
->	O
lru	pointer
==	O
NULL	O
||	O
rp	pointer
->	O
lru	pointer
->	O
timestamp	long
>	O
req	pointer
->	O
timestamp	long
)	O
)	O
rp	pointer
->	O
lru	pointer
=	O
req	pointer
;	O
}	O
else	O
if	O
(	O
req	pointer
->	O
status	int
==	O
RS_PROXY	int
)	O
{	O
if	O
(	O
!	O
spawn_flag	int
||	O
rpp_ready	function
(	O
req	pointer
->	O
child_id	int
)	O
)	O
{	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"%s proxy reply. Process %lu"	pointer
,	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
name	pointer
,	O
(	O
u_long	long
)	O
req	pointer
->	O
child_id	int
)	O
;	O
request_call_handler	function
(	O
rp	pointer
->	O
handler	pointer
,	O
req	pointer
)	O
;	O
grad_list_remove	function
(	O
request_list	pointer
,	O
req	pointer
,	O
NULL	O
)	O
;	O
request_free	function
(	O
req	pointer
)	O
;	O
}	O
else	O
if	O
(	O
req	pointer
->	O
timestamp	long
+	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
ttl	int
<=	O
rp	pointer
->	O
curtime	long
)	O
{	O
grad_log	function
(	O
GRAD_LOG_NOTICE	int
,	O
_	O
(	O
"Proxy %s request expired in queue"	pointer
)	O
,	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
name	pointer
)	O
;	O
grad_list_remove	function
(	O
request_list	pointer
,	O
req	pointer
,	O
NULL	O
)	O
;	O
request_free	function
(	O
req	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
req	pointer
->	O
status	int
==	O
RS_XMIT	int
&&	O
request_forward	function
(	O
req	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
req	pointer
->	O
timestamp	long
+	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
ttl	int
<=	O
rp	pointer
->	O
curtime	long
)	O
{	O
if	O
(	O
req	pointer
->	O
status	int
==	O
RS_XMIT	int
)	O
req	pointer
->	O
status	int
=	O
RS_COMPLETED	int
;	O
else	O
if	O
(	O
req	pointer
->	O
status	int
==	O
RS_TERMINATED	int
)	O
{	O
pid_t	int
pid	int
=	O
rpp_check_pid	function
(	O
req	pointer
->	O
child_id	int
)	O
;	O
if	O
(	O
pid	int
==	O
req	pointer
->	O
child_id	int
)	O
{	O
if	O
(	O
rpp_kill	function
(	O
req	pointer
->	O
child_id	int
,	O
SIGKILL	int
)	O
==	O
0	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_NOTICE	int
,	O
_	O
(	O
"Killing unresponsive %s child %lu"	pointer
)	O
,	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
name	pointer
,	O
(	O
unsigned	O
long	O
)	O
req	pointer
->	O
child_id	int
)	O
;	O
}	O
else	O
{	O
grad_log	function
(	O
GRAD_LOG_CRIT	int
,	O
_	O
(	O
"Cannot terminate child %lu. Attempting to kill inexisting process?"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
req	pointer
->	O
child_id	int
)	O
;	O
}	O
}	O
grad_list_remove	function
(	O
request_list	pointer
,	O
req	pointer
,	O
NULL	O
)	O
;	O
request_free	function
(	O
req	pointer
)	O
;	O
}	O
else	O
{	O
int	O
rc	int
=	O
rpp_kill	function
(	O
req	pointer
->	O
child_id	int
,	O
SIGTERM	int
)	O
;	O
grad_log	function
(	O
GRAD_LOG_NOTICE	int
,	O
_	O
(	O
"Terminating unresponsive %s child %lu, status: %s"	pointer
)	O
,	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
name	pointer
,	O
(	O
unsigned	O
long	O
)	O
req	pointer
->	O
child_id	int
,	O
rc	int
==	O
0	int
?	O
_	O
(	O
"OK"	pointer
)	O
:	O
_	O
(	O
"FAILURE"	pointer
)	O
)	O
;	O
req	pointer
->	O
status	int
=	O
RS_TERMINATED	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
if	O
(	O
req	pointer
->	O
type	int
==	O
rp	pointer
->	O
type	int
)	O
rp	pointer
->	O
request_type_count	long
++	O
;	O
rp	pointer
->	O
request_count	long
++	O
;	O
if	O
(	O
rp	pointer
->	O
state	pointer
!=	O
RCMP_NE	int
)	O
return	O
0	int
;	O
if	O
(	O
req	pointer
->	O
type	int
==	O
rp	pointer
->	O
type	int
)	O
{	O
rp	pointer
->	O
state	pointer
=	O
request_cmp	function
(	O
req	pointer
,	O
rp	pointer
->	O
data	pointer
)	O
;	O
switch	O
(	O
rp	pointer
->	O
state	pointer
)	O
{	O
case	O
RCMP_EQ	int
:	O
if	O
(	O
req	pointer
->	O
status	int
==	O
RS_COMPLETED	int
&&	O
request_retransmit	function
(	O
req	pointer
,	O
rp	pointer
->	O
rawdata	pointer
,	O
rp	pointer
->	O
rawsize	long
)	O
==	O
0	int
)	O
break	O
;	O
else	O
request_drop	function
(	O
req	pointer
->	O
type	int
,	O
rp	pointer
->	O
data	pointer
,	O
req	pointer
->	O
data	pointer
,	O
req	pointer
->	O
fd	int
,	O
_	O
(	O
"duplicate request"	pointer
)	O
)	O
;	O
break	O
;	O
case	O
RCMP_PROXY	int
:	O
rp	pointer
->	O
orig	pointer
=	O
req	pointer
;	O
break	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
request_handle	function
(	O
REQUEST	struct
*	O
req	pointer
,	O
int	O
(	O
*	O
handler	pointer
)	O
(	O
REQUEST	struct
*	O
)	O
)	O
{	O
struct	O
request_closure	struct
rc	int
;	O
int	O
status	int
;	O
if	O
(	O
!	O
req	pointer
)	O
return	O
1	int
;	O
rc	int
.	O
type	int
=	O
req	pointer
->	O
type	int
;	O
rc	int
.	O
data	pointer
=	O
req	pointer
->	O
data	pointer
;	O
rc	int
.	O
rawdata	pointer
=	O
req	pointer
->	O
rawdata	pointer
;	O
rc	int
.	O
rawsize	long
=	O
req	pointer
->	O
rawsize	long
;	O
rc	int
.	O
orig	pointer
=	O
NULL	O
;	O
rc	int
.	O
lru	pointer
=	O
NULL	O
;	O
rc	int
.	O
state	pointer
=	O
RCMP_NE	int
;	O
rc	int
.	O
handler	pointer
=	O
handler	pointer
;	O
time	struct
(	O
&	O
rc	int
.	O
curtime	long
)	O
;	O
rc	int
.	O
request_count	long
=	O
rc	int
.	O
request_type_count	long
=	O
0	int
;	O
if	O
(	O
!	O
request_list	pointer
)	O
request_list	pointer
=	O
grad_list_create	function
(	O
)	O
;	O
else	O
grad_list_iterate	function
(	O
request_list	pointer
,	O
_request_iterator	function
,	O
&	O
rc	int
)	O
;	O
switch	O
(	O
rc	int
.	O
state	pointer
)	O
{	O
case	O
RCMP_EQ	int
:	O
return	O
1	int
;	O
case	O
RCMP_PROXY	int
:	O
req	pointer
->	O
orig	pointer
=	O
rc	int
.	O
orig	pointer
;	O
req	pointer
->	O
child_id	int
=	O
rc	int
.	O
orig	pointer
->	O
child_id	int
;	O
if	O
(	O
!	O
radiusd_master	function
(	O
)	O
)	O
{	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"%s proxy reply. Process %lu"	pointer
,	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
name	pointer
,	O
(	O
u_long	long
)	O
req	pointer
->	O
child_id	int
)	O
;	O
request_call_handler	function
(	O
handler	pointer
,	O
req	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
spawn_flag	int
||	O
rpp_ready	function
(	O
req	pointer
->	O
child_id	int
)	O
)	O
{	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"%s proxy reply. Process %lu"	pointer
,	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
name	pointer
,	O
(	O
u_long	long
)	O
req	pointer
->	O
child_id	int
)	O
;	O
request_call_handler	function
(	O
handler	pointer
,	O
req	pointer
)	O
;	O
}	O
else	O
{	O
req	pointer
->	O
status	int
=	O
RS_PROXY	int
;	O
GRAD_DEBUG3	O
(	O
1	int
,	O
"Proxy %s request %lu added to the "	pointer
"list. %d requests held."	pointer
,	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
name	pointer
,	O
(	O
u_long	long
)	O
req	pointer
->	O
child_id	int
,	O
rc	int
.	O
request_count	long
+	O
1	int
)	O
;	O
grad_list_append	function
(	O
request_list	pointer
,	O
req	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
if	O
(	O
rc	int
.	O
request_count	long
>=	O
max_requests	int
)	O
{	O
if	O
(	O
!	O
rc	int
.	O
lru	pointer
)	O
{	O
request_drop	function
(	O
req	pointer
->	O
type	int
,	O
req	pointer
->	O
data	pointer
,	O
NULL	O
,	O
req	pointer
->	O
fd	int
,	O
_	O
(	O
"too many requests in queue"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
max_requests	int
&&	O
rc	int
.	O
request_type_count	long
>=	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
max_requests	int
)	O
{	O
if	O
(	O
!	O
rc	int
.	O
lru	pointer
)	O
{	O
request_drop	function
(	O
req	pointer
->	O
type	int
,	O
req	pointer
->	O
data	pointer
,	O
NULL	O
,	O
req	pointer
->	O
fd	int
,	O
_	O
(	O
"too many requests of this type"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
rc	int
.	O
lru	pointer
=	O
NULL	O
;	O
if	O
(	O
radiusd_master	function
(	O
)	O
&&	O
spawn_flag	int
&&	O
!	O
rpp_ready	function
(	O
0	int
)	O
)	O
{	O
request_drop	function
(	O
req	pointer
->	O
type	int
,	O
req	pointer
->	O
data	pointer
,	O
NULL	O
,	O
req	pointer
->	O
fd	int
,	O
_	O
(	O
"Maximum number of children active"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
rc	int
.	O
lru	pointer
)	O
{	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"replacing request dated %s"	pointer
,	O
ctime	function
(	O
&	O
rc	int
.	O
lru	pointer
->	O
timestamp	long
)	O
)	O
;	O
grad_list_remove	function
(	O
request_list	pointer
,	O
rc	int
.	O
lru	pointer
,	O
NULL	O
)	O
;	O
request_free	function
(	O
rc	int
.	O
lru	pointer
)	O
;	O
rc	int
.	O
request_count	long
--	O
;	O
}	O
GRAD_DEBUG3	O
(	O
1	int
,	O
"%s request %lu added to the list. %d requests held."	pointer
,	O
request_class	struct
[	O
req	pointer
->	O
type	int
]	O
.	O
name	pointer
,	O
(	O
u_long	long
)	O
req	pointer
->	O
child_id	int
,	O
rc	int
.	O
request_count	long
+	O
1	int
)	O
;	O
status	int
=	O
request_call_handler	function
(	O
handler	pointer
,	O
req	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
grad_list_append	function
(	O
request_list	pointer
,	O
req	pointer
)	O
;	O
return	O
status	int
;	O
}	O
void	O
request_update	function
(	O
pid_t	int
pid	int
,	O
int	O
status	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
REQUEST	struct
*	O
p	pointer
;	O
grad_iterator_t	struct
*	O
itr	pointer
;	O
GRAD_DEBUG2	O
(	O
100	int
,	O
"enter, pid=%lu, ptr = %p"	pointer
,	O
(	O
unsigned	O
long	O
)	O
pid	int
,	O
ptr	pointer
)	O
;	O
itr	pointer
=	O
grad_iterator_create	function
(	O
request_list	pointer
)	O
;	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
;	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	function
(	O
itr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
grad_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
child_id	int
==	O
pid	int
)	O
{	O
p	pointer
->	O
status	int
=	O
status	int
;	O
if	O
(	O
ptr	pointer
&&	O
request_class	struct
[	O
p	pointer
->	O
type	int
]	O
.	O
update	pointer
)	O
request_class	struct
[	O
p	pointer
->	O
type	int
]	O
.	O
update	pointer
(	O
p	pointer
->	O
data	pointer
,	O
ptr	pointer
)	O
;	O
}	O
}	O
grad_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
GRAD_DEBUG	O
(	O
100	int
,	O
"exit"	pointer
)	O
;	O
}	O
void	O
request_fail	function
(	O
int	O
type	int
,	O
struct	O
sockaddr_in	struct
*	O
addr	int
)	O
{	O
if	O
(	O
request_class	struct
[	O
type	int
]	O
.	O
failure	pointer
)	O
request_class	struct
[	O
type	int
]	O
.	O
failure	pointer
(	O
type	int
,	O
addr	int
)	O
;	O
}	O
static	O
int	O
_destroy_request	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
request_free	function
(	O
(	O
REQUEST	struct
*	O
)	O
item	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
request_init_queue	function
(	O
)	O
{	O
grad_list_destroy	function
(	O
&	O
request_list	pointer
,	O
_destroy_request	function
,	O
NULL	O
)	O
;	O
}	O
void	O
*	O
request_scan_list	function
(	O
int	O
type	int
,	O
list_iterator_t	pointer
fn	pointer
,	O
void	O
*	O
closure	pointer
)	O
{	O
REQUEST	struct
*	O
p	pointer
;	O
grad_iterator_t	struct
*	O
itr	pointer
;	O
itr	pointer
=	O
grad_iterator_create	function
(	O
request_list	pointer
)	O
;	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
NULL	O
;	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	function
(	O
itr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
grad_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
type	int
==	O
type	int
&&	O
fn	pointer
(	O
p	pointer
->	O
data	pointer
,	O
closure	pointer
)	O
==	O
0	int
)	O
break	O
;	O
}	O
grad_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
p	pointer
?	O
p	pointer
->	O
data	pointer
:	O
NULL	O
;	O
}	O
static	O
int	O
_count_stat	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
REQUEST	struct
*	O
req	pointer
=	O
item	pointer
;	O
QUEUE_STAT	array
*	O
stat	array
=	O
data	pointer
;	O
switch	O
(	O
req	pointer
->	O
status	int
)	O
{	O
case	O
RS_COMPLETED	int
:	O
(	O
*	O
stat	array
)	O
[	O
req	pointer
->	O
type	int
]	O
.	O
completed	long
++	O
;	O
break	O
;	O
case	O
RS_PROXY	int
:	O
(	O
*	O
stat	array
)	O
[	O
req	pointer
->	O
type	int
]	O
.	O
pending	long
++	O
;	O
break	O
;	O
case	O
RS_WAITING	int
:	O
(	O
*	O
stat	array
)	O
[	O
req	pointer
->	O
type	int
]	O
.	O
waiting	long
++	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
request_stat_list	function
(	O
QUEUE_STAT	array
stat	array
)	O
{	O
memset	function
(	O
stat	array
,	O
0	int
,	O
sizeof	O
(	O
QUEUE_STAT	array
)	O
)	O
;	O
grad_list_iterate	function
(	O
request_list	pointer
,	O
_count_stat	function
,	O
&	O
stat	array
)	O
;	O
return	O
0	int
;	O
}	O
