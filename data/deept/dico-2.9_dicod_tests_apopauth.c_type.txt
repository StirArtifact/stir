dico_stream_t	pointer
iostr	pointer
;	O
char	O
*	O
in_buffer	pointer
;	O
size_t	long
in_bufsize	long
;	O
size_t	long
in_level	long
;	O
char	O
*	O
msgid	pointer
;	O
int	O
dict_status_p	function
(	O
const	O
char	O
*	O
status	pointer
)	O
{	O
return	O
in_level	long
>	O
3	int
&&	O
memcmp	function
(	O
in_buffer	pointer
,	O
status	pointer
,	O
3	int
)	O
==	O
0	int
&&	O
(	O
in_buffer	pointer
[	O
3	int
]	O
==	O
' '	O
||	O
(	O
in_level	long
==	O
5	int
&&	O
memcmp	function
(	O
in_buffer	pointer
+	O
3	int
,	O
"\r\n"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
)	O
;	O
}	O
void	O
assert_status	function
(	O
const	O
char	O
*	O
status	pointer
)	O
{	O
if	O
(	O
!	O
dict_status_p	function
(	O
status	pointer
)	O
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"expected status %s but got %s"	pointer
,	O
status	pointer
,	O
in_buffer	pointer
)	O
;	O
exit	function
(	O
3	int
)	O
;	O
}	O
}	O
static	O
void	O
dict_read_reply	function
(	O
void	O
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
in_buffer	pointer
)	O
in_buffer	pointer
[	O
0	int
]	O
=	O
0	int
;	O
rc	int
=	O
dico_stream_getline	function
(	O
iostr	pointer
,	O
&	O
in_buffer	pointer
,	O
&	O
in_bufsize	long
,	O
&	O
in_level	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
in_level	long
=	O
dico_trim_nl	function
(	O
in_buffer	pointer
)	O
;	O
else	O
{	O
rc	int
=	O
dico_stream_last_error	function
(	O
iostr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
EIO	int
&&	O
in_level	long
==	O
0	int
)	O
exit	function
(	O
0	int
)	O
;	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"error reading input: %s"	pointer
,	O
dico_stream_strerror	function
(	O
iostr	pointer
,	O
rc	int
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
}	O
static	O
void	O
get_msgid	function
(	O
void	O
)	O
{	O
if	O
(	O
in_buffer	pointer
[	O
in_level	long
-	O
1	int
]	O
==	O
'>'	O
)	O
{	O
char	O
*	O
p	pointer
=	O
strrchr	function
(	O
in_buffer	pointer
,	O
'<'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
msgid	pointer
=	O
xstrdup	function
(	O
p	pointer
)	O
;	O
return	O
;	O
}	O
}	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"server does not support authentication"	pointer
)	O
;	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"last reply was: %s"	pointer
,	O
in_buffer	pointer
)	O
;	O
}	O
static	O
void	O
apop_auth	function
(	O
const	O
char	O
*	O
user	pointer
,	O
const	O
char	O
*	O
pass	pointer
)	O
{	O
int	O
i	int
;	O
struct	O
md5_ctx	struct
md5context	struct
;	O
unsigned	O
char	O
md5digest	array
[	O
16	int
]	O
;	O
char	O
buf	pointer
[	O
sizeof	O
(	O
md5digest	array
)	O
*	O
2	int
+	O
1	int
]	O
;	O
char	O
*	O
p	pointer
;	O
md5_init_ctx	function
(	O
&	O
md5context	struct
)	O
;	O
md5_process_bytes	function
(	O
msgid	pointer
,	O
strlen	function
(	O
msgid	pointer
)	O
,	O
&	O
md5context	struct
)	O
;	O
md5_process_bytes	function
(	O
pass	pointer
,	O
strlen	function
(	O
pass	pointer
)	O
,	O
&	O
md5context	struct
)	O
;	O
md5_finish_ctx	function
(	O
&	O
md5context	struct
,	O
md5digest	array
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
p	pointer
=	O
buf	pointer
;	O
i	int
<	O
16	int
;	O
i	int
++	O
,	O
p	pointer
+=	O
2	int
)	O
sprintf	function
(	O
p	pointer
,	O
"%02x"	pointer
,	O
md5digest	array
[	O
i	int
]	O
)	O
;	O
*	O
p	pointer
=	O
0	int
;	O
stream_printf	function
(	O
iostr	pointer
,	O
"AUTH %s %s\r\n"	pointer
,	O
user	pointer
,	O
buf	pointer
)	O
;	O
dict_read_reply	function
(	O
)	O
;	O
assert_status	function
(	O
"230"	pointer
)	O
;	O
}	O
dico_stream_t	pointer
run_command	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
pid_t	int
*	O
ppid	pointer
)	O
{	O
pid_t	int
pid	int
;	O
int	O
oup	array
[	O
2	int
]	O
,	O
inp	array
[	O
2	int
]	O
;	O
assert	O
(	O
pipe	function
(	O
oup	array
)	O
==	O
0	int
)	O
;	O
assert	O
(	O
pipe	function
(	O
inp	array
)	O
==	O
0	int
)	O
;	O
pid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
(	O
pid_t	int
)	O
-	O
1	int
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"fork"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
assert	O
(	O
dup2	function
(	O
oup	array
[	O
0	int
]	O
,	O
0	int
)	O
>=	O
0	int
)	O
;	O
close	pointer
(	O
oup	array
[	O
1	int
]	O
)	O
;	O
assert	O
(	O
dup2	function
(	O
inp	array
[	O
1	int
]	O
,	O
1	int
)	O
>=	O
0	int
)	O
;	O
close	pointer
(	O
inp	array
[	O
0	int
]	O
)	O
;	O
execvp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
)	O
;	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"failed to run command"	pointer
)	O
;	O
exit	function
(	O
127	int
)	O
;	O
}	O
close	pointer
(	O
oup	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
inp	array
[	O
1	int
]	O
)	O
;	O
*	O
ppid	pointer
=	O
pid	int
;	O
return	O
dico_fd_io_stream_create	function
(	O
inp	array
[	O
0	int
]	O
,	O
oup	array
[	O
1	int
]	O
)	O
;	O
}	O
void	O
printer	function
(	O
void	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
dict_read_reply	function
(	O
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
in_buffer	pointer
)	O
;	O
}	O
}	O
void	O
writer	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
pid_t	int
pid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
(	O
pid_t	int
)	O
-	O
1	int
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"fork"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
char	O
buf	pointer
[	O
512	int
]	O
;	O
size_t	long
n	long
;	O
while	O
(	O
(	O
n	long
=	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
fp	pointer
)	O
)	O
>	O
0	int
)	O
dico_stream_write	function
(	O
iostr	pointer
,	O
buf	pointer
,	O
n	long
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
user	pointer
,	O
*	O
pass	pointer
;	O
pid_t	int
pid	int
;	O
char	O
*	O
script	pointer
=	O
NULL	O
;	O
dico_set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
arg	pointer
=	O
*	O
++	O
argv	pointer
;	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-script="	pointer
,	O
8	int
)	O
==	O
0	int
)	O
script	pointer
=	O
arg	pointer
+	O
8	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--"	pointer
)	O
==	O
0	int
)	O
{	O
--	O
argc	int
;	O
++	O
argv	pointer
;	O
break	O
;	O
}	O
else	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"unknown option %s"	pointer
,	O
arg	pointer
)	O
;	O
return	O
1	int
;	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
argc	int
<	O
3	int
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"usage: %s user pass command [args...]"	pointer
,	O
dico_program_name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
user	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
pass	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
argc	int
-=	O
2	int
;	O
argv	pointer
+=	O
2	int
;	O
iostr	pointer
=	O
run_command	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
pid	int
)	O
;	O
if	O
(	O
!	O
iostr	pointer
)	O
return	O
1	int
;	O
dico_stream_set_buffer	function
(	O
iostr	pointer
,	O
dico_buffer_line	int
,	O
DICO_MAX_BUFFER	int
)	O
;	O
dict_read_reply	function
(	O
)	O
;	O
assert_status	function
(	O
"220"	pointer
)	O
;	O
get_msgid	function
(	O
)	O
;	O
apop_auth	function
(	O
user	pointer
,	O
pass	pointer
)	O
;	O
if	O
(	O
script	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
=	O
fopen	function
(	O
script	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"cannot open %s"	pointer
,	O
script	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
writer	function
(	O
fp	pointer
)	O
;	O
printer	function
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
