static	O
bfd_vma	long
unw_rlen	long
=	O
0	int
;	O
static	O
void	O
unw_print_brmask	function
(	O
char	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
void	O
unw_print_grmask	function
(	O
char	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
void	O
unw_print_frmask	function
(	O
char	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
void	O
unw_print_abreg	function
(	O
char	O
*	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
void	O
unw_print_xyreg	function
(	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
unsigned	O
int	O
)	O
;	O
static	O
void	O
unw_print_brmask	function
(	O
char	O
*	O
cp	pointer
,	O
unsigned	O
int	O
mask	int
)	O
{	O
int	O
sep	int
=	O
0	int
;	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
mask	int
&&	O
(	O
i	pointer
<	O
5	int
)	O
;	O
++	O
i	pointer
)	O
{	O
if	O
(	O
mask	int
&	O
1	int
)	O
{	O
if	O
(	O
sep	int
)	O
*	O
cp	pointer
++	O
=	O
','	O
;	O
*	O
cp	pointer
++	O
=	O
'b'	O
;	O
*	O
cp	pointer
++	O
=	O
i	pointer
+	O
1	int
+	O
'0'	O
;	O
sep	int
=	O
1	int
;	O
}	O
mask	int
>>=	O
1	int
;	O
}	O
*	O
cp	pointer
=	O
'\0'	O
;	O
}	O
static	O
void	O
unw_print_grmask	function
(	O
char	O
*	O
cp	pointer
,	O
unsigned	O
int	O
mask	int
)	O
{	O
int	O
sep	int
=	O
0	int
;	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
4	int
;	O
++	O
i	pointer
)	O
{	O
if	O
(	O
mask	int
&	O
1	int
)	O
{	O
if	O
(	O
sep	int
)	O
*	O
cp	pointer
++	O
=	O
','	O
;	O
*	O
cp	pointer
++	O
=	O
'r'	O
;	O
*	O
cp	pointer
++	O
=	O
i	pointer
+	O
4	int
+	O
'0'	O
;	O
sep	int
=	O
1	int
;	O
}	O
mask	int
>>=	O
1	int
;	O
}	O
*	O
cp	pointer
=	O
'\0'	O
;	O
}	O
static	O
void	O
unw_print_frmask	function
(	O
char	O
*	O
cp	pointer
,	O
unsigned	O
int	O
mask	int
)	O
{	O
int	O
sep	int
=	O
0	int
;	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
20	int
;	O
++	O
i	pointer
)	O
{	O
if	O
(	O
mask	int
&	O
1	int
)	O
{	O
if	O
(	O
sep	int
)	O
*	O
cp	pointer
++	O
=	O
','	O
;	O
*	O
cp	pointer
++	O
=	O
'f'	O
;	O
if	O
(	O
i	pointer
<	O
4	int
)	O
*	O
cp	pointer
++	O
=	O
i	pointer
+	O
2	int
+	O
'0'	O
;	O
else	O
{	O
*	O
cp	pointer
++	O
=	O
(	O
i	pointer
+	O
2	int
)	O
/	O
10	int
+	O
1	int
+	O
'0'	O
;	O
*	O
cp	pointer
++	O
=	O
(	O
i	pointer
+	O
2	int
)	O
%	O
10	int
+	O
'0'	O
;	O
}	O
sep	int
=	O
1	int
;	O
}	O
mask	int
>>=	O
1	int
;	O
}	O
*	O
cp	pointer
=	O
'\0'	O
;	O
}	O
static	O
void	O
unw_print_abreg	function
(	O
char	O
*	O
cp	pointer
,	O
unsigned	O
int	O
abreg	int
)	O
{	O
static	O
const	O
char	O
*	O
const	O
special_reg	array
[	O
16	int
]	O
=	O
{	O
"pr"	pointer
,	O
"psp"	pointer
,	O
"@priunat"	pointer
,	O
"rp"	pointer
,	O
"ar.bsp"	pointer
,	O
"ar.bspstore"	pointer
,	O
"ar.rnat"	pointer
,	O
"ar.unat"	pointer
,	O
"ar.fpsr"	pointer
,	O
"ar.pfs"	pointer
,	O
"ar.lc"	pointer
,	O
"Unknown11"	pointer
,	O
"Unknown12"	pointer
,	O
"Unknown13"	pointer
,	O
"Unknown14"	pointer
,	O
"Unknown15"	pointer
}	O
;	O
switch	O
(	O
(	O
abreg	int
>>	O
5	int
)	O
&	O
0x3	int
)	O
{	O
case	O
0	int
:	O
sprintf	function
(	O
cp	pointer
,	O
"r%u"	pointer
,	O
(	O
abreg	int
&	O
0x1f	int
)	O
)	O
;	O
break	O
;	O
case	O
1	int
:	O
sprintf	function
(	O
cp	pointer
,	O
"f%u"	pointer
,	O
(	O
abreg	int
&	O
0x1f	int
)	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
sprintf	function
(	O
cp	pointer
,	O
"b%u"	pointer
,	O
(	O
abreg	int
&	O
0x1f	int
)	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
strcpy	function
(	O
cp	pointer
,	O
special_reg	array
[	O
abreg	int
&	O
0xf	int
]	O
)	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
unw_print_xyreg	function
(	O
char	O
*	O
cp	pointer
,	O
unsigned	O
int	O
x	int
,	O
unsigned	O
int	O
ytreg	int
)	O
{	O
switch	O
(	O
(	O
x	int
<<	O
1	int
)	O
|	O
(	O
(	O
ytreg	int
>>	O
7	int
)	O
&	O
1	int
)	O
)	O
{	O
case	O
0	int
:	O
sprintf	function
(	O
cp	pointer
,	O
"r%u"	pointer
,	O
(	O
ytreg	int
&	O
0x1f	int
)	O
)	O
;	O
break	O
;	O
case	O
1	int
:	O
sprintf	function
(	O
cp	pointer
,	O
"f%u"	pointer
,	O
(	O
ytreg	int
&	O
0x1f	int
)	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
sprintf	function
(	O
cp	pointer
,	O
"b%u"	pointer
,	O
(	O
ytreg	int
&	O
0x1f	int
)	O
)	O
;	O
break	O
;	O
}	O
}	O
typedef	O
bfd_vma	long
unw_word	long
;	O
static	O
unw_word	long
unw_decode_uleb128	function
(	O
const	O
unsigned	O
char	O
*	O
*	O
dpp	pointer
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
unsigned	O
shift	int
=	O
0	int
;	O
unw_word	long
byte	long
,	O
result	long
=	O
0	int
;	O
const	O
unsigned	O
char	O
*	O
bp	pointer
=	O
*	O
dpp	pointer
;	O
while	O
(	O
bp	pointer
<	O
end	pointer
)	O
{	O
byte	long
=	O
*	O
bp	pointer
++	O
;	O
result	long
|=	O
(	O
byte	long
&	O
0x7f	int
)	O
<<	O
shift	int
;	O
if	O
(	O
(	O
byte	long
&	O
0x80	int
)	O
==	O
0	int
)	O
break	O
;	O
shift	int
+=	O
7	int
;	O
}	O
*	O
dpp	pointer
=	O
bp	pointer
;	O
return	O
result	long
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_x1	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
arg	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
unsigned	O
char	O
byte1	char
,	O
abreg	int
;	O
unw_word	long
t	long
,	O
off	long
;	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
3	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt X1>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
byte1	char
=	O
*	O
dp	pointer
++	O
;	O
t	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
off	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
abreg	int
=	O
(	O
byte1	char
&	O
0x7f	int
)	O
;	O
if	O
(	O
byte1	char
&	O
0x80	int
)	O
UNW_DEC_SPILL_SPREL	O
(	O
"X1"	pointer
,	O
t	long
,	O
abreg	int
,	O
off	long
,	O
arg	pointer
)	O
;	O
else	O
UNW_DEC_SPILL_PSPREL	O
(	O
"X1"	pointer
,	O
t	long
,	O
abreg	int
,	O
off	long
,	O
arg	pointer
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_x2	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
arg	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
unsigned	O
char	O
byte1	char
,	O
byte2	char
,	O
abreg	int
,	O
x	int
,	O
ytreg	int
;	O
unw_word	long
t	long
;	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
3	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt X2>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
byte1	char
=	O
*	O
dp	pointer
++	O
;	O
byte2	char
=	O
*	O
dp	pointer
++	O
;	O
t	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
abreg	int
=	O
(	O
byte1	char
&	O
0x7f	int
)	O
;	O
ytreg	int
=	O
byte2	char
;	O
x	int
=	O
(	O
byte1	char
>>	O
7	int
)	O
&	O
1	int
;	O
if	O
(	O
(	O
byte1	char
&	O
0x80	int
)	O
==	O
0	int
&&	O
ytreg	int
==	O
0	int
)	O
UNW_DEC_RESTORE	O
(	O
"X2"	pointer
,	O
t	long
,	O
abreg	int
,	O
arg	pointer
)	O
;	O
else	O
UNW_DEC_SPILL_REG	O
(	O
"X2"	pointer
,	O
t	long
,	O
abreg	int
,	O
x	int
,	O
ytreg	int
,	O
arg	pointer
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_x3	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
arg	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
unsigned	O
char	O
byte1	char
,	O
byte2	char
,	O
abreg	int
,	O
qp	char
;	O
unw_word	long
t	long
,	O
off	long
;	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
4	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt X3>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
byte1	char
=	O
*	O
dp	pointer
++	O
;	O
byte2	char
=	O
*	O
dp	pointer
++	O
;	O
t	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
off	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
qp	char
=	O
(	O
byte1	char
&	O
0x3f	int
)	O
;	O
abreg	int
=	O
(	O
byte2	char
&	O
0x7f	int
)	O
;	O
if	O
(	O
byte1	char
&	O
0x80	int
)	O
UNW_DEC_SPILL_SPREL_P	O
(	O
"X3"	pointer
,	O
qp	char
,	O
t	long
,	O
abreg	int
,	O
off	long
,	O
arg	pointer
)	O
;	O
else	O
UNW_DEC_SPILL_PSPREL_P	O
(	O
"X3"	pointer
,	O
qp	char
,	O
t	long
,	O
abreg	int
,	O
off	long
,	O
arg	pointer
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_x4	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
arg	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
unsigned	O
char	O
byte1	char
,	O
byte2	char
,	O
byte3	char
,	O
qp	char
,	O
abreg	int
,	O
x	int
,	O
ytreg	int
;	O
unw_word	long
t	long
;	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
4	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt X4>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
byte1	char
=	O
*	O
dp	pointer
++	O
;	O
byte2	char
=	O
*	O
dp	pointer
++	O
;	O
byte3	char
=	O
*	O
dp	pointer
++	O
;	O
t	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
qp	char
=	O
(	O
byte1	char
&	O
0x3f	int
)	O
;	O
abreg	int
=	O
(	O
byte2	char
&	O
0x7f	int
)	O
;	O
x	int
=	O
(	O
byte2	char
>>	O
7	int
)	O
&	O
1	int
;	O
ytreg	int
=	O
byte3	char
;	O
if	O
(	O
(	O
byte2	char
&	O
0x80	int
)	O
==	O
0	int
&&	O
byte3	char
==	O
0	int
)	O
UNW_DEC_RESTORE_P	O
(	O
"X4"	pointer
,	O
qp	char
,	O
t	long
,	O
abreg	int
,	O
arg	pointer
)	O
;	O
else	O
UNW_DEC_SPILL_REG_P	O
(	O
"X4"	pointer
,	O
qp	char
,	O
t	long
,	O
abreg	int
,	O
x	int
,	O
ytreg	int
,	O
arg	pointer
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_r1	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
,	O
void	O
*	O
arg	pointer
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
body	int
=	O
(	O
code	int
&	O
0x20	int
)	O
!=	O
0	int
;	O
unw_word	long
rlen	long
;	O
rlen	long
=	O
(	O
code	int
&	O
0x1f	int
)	O
;	O
UNW_DEC_PROLOGUE	O
(	O
"R1"	pointer
,	O
body	int
,	O
rlen	long
,	O
arg	pointer
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_r2	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
,	O
void	O
*	O
arg	pointer
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
unsigned	O
char	O
byte1	char
,	O
mask	int
,	O
grsave	char
;	O
unw_word	long
rlen	long
;	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
2	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt R2>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
byte1	char
=	O
*	O
dp	pointer
++	O
;	O
mask	int
=	O
(	O
(	O
code	int
&	O
0x7	int
)	O
<<	O
1	int
)	O
|	O
(	O
(	O
byte1	char
>>	O
7	int
)	O
&	O
1	int
)	O
;	O
grsave	char
=	O
(	O
byte1	char
&	O
0x7f	int
)	O
;	O
rlen	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
UNW_DEC_PROLOGUE_GR	O
(	O
"R2"	pointer
,	O
rlen	long
,	O
mask	int
,	O
grsave	char
,	O
arg	pointer
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_r3	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
,	O
void	O
*	O
arg	pointer
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
unw_word	long
rlen	long
;	O
rlen	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
UNW_DEC_PROLOGUE	O
(	O
"R3"	pointer
,	O
(	O
(	O
code	int
&	O
0x3	int
)	O
==	O
1	int
)	O
,	O
rlen	long
,	O
arg	pointer
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_p1	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
,	O
void	O
*	O
arg	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
unsigned	O
char	O
brmask	char
=	O
(	O
code	int
&	O
0x1f	int
)	O
;	O
UNW_DEC_BR_MEM	O
(	O
"P1"	pointer
,	O
brmask	char
,	O
arg	pointer
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_p2_p5	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
,	O
void	O
*	O
arg	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
if	O
(	O
(	O
code	int
&	O
0x10	int
)	O
==	O
0	int
)	O
{	O
unsigned	O
char	O
byte1	char
;	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
1	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt P2>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
byte1	char
=	O
*	O
dp	pointer
++	O
;	O
UNW_DEC_BR_GR	O
(	O
"P2"	pointer
,	O
(	O
(	O
code	int
&	O
0xf	int
)	O
<<	O
1	int
)	O
|	O
(	O
(	O
byte1	char
>>	O
7	int
)	O
&	O
1	int
)	O
,	O
(	O
byte1	char
&	O
0x7f	int
)	O
,	O
arg	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
code	int
&	O
0x08	int
)	O
==	O
0	int
)	O
{	O
unsigned	O
char	O
byte1	char
,	O
r	char
,	O
dst	char
;	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
1	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt P3>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
byte1	char
=	O
*	O
dp	pointer
++	O
;	O
r	char
=	O
(	O
(	O
code	int
&	O
0x7	int
)	O
<<	O
1	int
)	O
|	O
(	O
(	O
byte1	char
>>	O
7	int
)	O
&	O
1	int
)	O
;	O
dst	char
=	O
(	O
byte1	char
&	O
0x7f	int
)	O
;	O
switch	O
(	O
r	char
)	O
{	O
case	O
0	int
:	O
UNW_DEC_REG_GR	O
(	O
"P3"	pointer
,	O
UNW_REG_PSP	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
1	int
:	O
UNW_DEC_REG_GR	O
(	O
"P3"	pointer
,	O
UNW_REG_RP	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
2	int
:	O
UNW_DEC_REG_GR	O
(	O
"P3"	pointer
,	O
UNW_REG_PFS	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
3	int
:	O
UNW_DEC_REG_GR	O
(	O
"P3"	pointer
,	O
UNW_REG_PR	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
4	int
:	O
UNW_DEC_REG_GR	O
(	O
"P3"	pointer
,	O
UNW_REG_UNAT	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
5	int
:	O
UNW_DEC_REG_GR	O
(	O
"P3"	pointer
,	O
UNW_REG_LC	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
6	int
:	O
UNW_DEC_RP_BR	O
(	O
"P3"	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
7	int
:	O
UNW_DEC_REG_GR	O
(	O
"P3"	pointer
,	O
UNW_REG_RNAT	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
8	int
:	O
UNW_DEC_REG_GR	O
(	O
"P3"	pointer
,	O
UNW_REG_BSP	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
9	int
:	O
UNW_DEC_REG_GR	O
(	O
"P3"	pointer
,	O
UNW_REG_BSPSTORE	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
10	int
:	O
UNW_DEC_REG_GR	O
(	O
"P3"	pointer
,	O
UNW_REG_FPSR	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
11	int
:	O
UNW_DEC_PRIUNAT_GR	O
(	O
"P3"	pointer
,	O
dst	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
default	O
:	O
UNW_DEC_BAD_CODE	O
(	O
r	char
)	O
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
code	int
&	O
0x7	int
)	O
==	O
0	int
)	O
UNW_DEC_SPILL_MASK	O
(	O
"P4"	pointer
,	O
dp	pointer
,	O
arg	pointer
,	O
end	pointer
)	O
;	O
else	O
if	O
(	O
(	O
code	int
&	O
0x7	int
)	O
==	O
1	int
)	O
{	O
unw_word	long
grmask	long
,	O
frmask	long
,	O
byte1	char
,	O
byte2	char
,	O
byte3	char
;	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
3	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt P5>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
byte1	char
=	O
*	O
dp	pointer
++	O
;	O
byte2	char
=	O
*	O
dp	pointer
++	O
;	O
byte3	char
=	O
*	O
dp	pointer
++	O
;	O
grmask	long
=	O
(	O
(	O
byte1	char
>>	O
4	int
)	O
&	O
0xf	int
)	O
;	O
frmask	long
=	O
(	O
(	O
byte1	char
&	O
0xf	int
)	O
<<	O
16	int
)	O
|	O
(	O
byte2	char
<<	O
8	int
)	O
|	O
byte3	char
;	O
UNW_DEC_FRGR_MEM	O
(	O
"P5"	pointer
,	O
grmask	long
,	O
frmask	long
,	O
arg	pointer
)	O
;	O
}	O
else	O
UNW_DEC_BAD_CODE	O
(	O
code	int
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_p6	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
,	O
void	O
*	O
arg	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
gregs	int
=	O
(	O
code	int
&	O
0x10	int
)	O
!=	O
0	int
;	O
unsigned	O
char	O
mask	int
=	O
(	O
code	int
&	O
0x0f	int
)	O
;	O
if	O
(	O
gregs	int
)	O
UNW_DEC_GR_MEM	O
(	O
"P6"	pointer
,	O
mask	int
,	O
arg	pointer
)	O
;	O
else	O
UNW_DEC_FR_MEM	O
(	O
"P6"	pointer
,	O
mask	int
,	O
arg	pointer
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_p7_p10	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
,	O
void	O
*	O
arg	pointer
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
unsigned	O
char	O
r	char
,	O
byte1	char
,	O
byte2	char
;	O
unw_word	long
t	long
,	O
size	int
;	O
if	O
(	O
(	O
code	int
&	O
0x10	int
)	O
==	O
0	int
)	O
{	O
r	char
=	O
(	O
code	int
&	O
0xf	int
)	O
;	O
t	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
switch	O
(	O
r	char
)	O
{	O
case	O
0	int
:	O
size	int
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
UNW_DEC_MEM_STACK_F	O
(	O
"P7"	pointer
,	O
t	long
,	O
size	int
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
1	int
:	O
UNW_DEC_MEM_STACK_V	O
(	O
"P7"	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
2	int
:	O
UNW_DEC_SPILL_BASE	O
(	O
"P7"	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
3	int
:	O
UNW_DEC_REG_SPREL	O
(	O
"P7"	pointer
,	O
UNW_REG_PSP	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
4	int
:	O
UNW_DEC_REG_WHEN	O
(	O
"P7"	pointer
,	O
UNW_REG_RP	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
5	int
:	O
UNW_DEC_REG_PSPREL	O
(	O
"P7"	pointer
,	O
UNW_REG_RP	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
6	int
:	O
UNW_DEC_REG_WHEN	O
(	O
"P7"	pointer
,	O
UNW_REG_PFS	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
7	int
:	O
UNW_DEC_REG_PSPREL	O
(	O
"P7"	pointer
,	O
UNW_REG_PFS	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
8	int
:	O
UNW_DEC_REG_WHEN	O
(	O
"P7"	pointer
,	O
UNW_REG_PR	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
9	int
:	O
UNW_DEC_REG_PSPREL	O
(	O
"P7"	pointer
,	O
UNW_REG_PR	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
10	int
:	O
UNW_DEC_REG_WHEN	O
(	O
"P7"	pointer
,	O
UNW_REG_LC	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
11	int
:	O
UNW_DEC_REG_PSPREL	O
(	O
"P7"	pointer
,	O
UNW_REG_LC	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
12	int
:	O
UNW_DEC_REG_WHEN	O
(	O
"P7"	pointer
,	O
UNW_REG_UNAT	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
13	int
:	O
UNW_DEC_REG_PSPREL	O
(	O
"P7"	pointer
,	O
UNW_REG_UNAT	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
14	int
:	O
UNW_DEC_REG_WHEN	O
(	O
"P7"	pointer
,	O
UNW_REG_FPSR	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
15	int
:	O
UNW_DEC_REG_PSPREL	O
(	O
"P7"	pointer
,	O
UNW_REG_FPSR	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
default	O
:	O
UNW_DEC_BAD_CODE	O
(	O
r	char
)	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
code	int
&	O
0xf	int
)	O
{	O
case	O
0x0	int
:	O
{	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
2	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt P8>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
r	char
=	O
*	O
dp	pointer
++	O
;	O
t	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
switch	O
(	O
r	char
)	O
{	O
case	O
1	int
:	O
UNW_DEC_REG_SPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_RP	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
2	int
:	O
UNW_DEC_REG_SPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_PFS	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
3	int
:	O
UNW_DEC_REG_SPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_PR	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
4	int
:	O
UNW_DEC_REG_SPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_LC	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
5	int
:	O
UNW_DEC_REG_SPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_UNAT	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
6	int
:	O
UNW_DEC_REG_SPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_FPSR	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
7	int
:	O
UNW_DEC_REG_WHEN	O
(	O
"P8"	pointer
,	O
UNW_REG_BSP	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
8	int
:	O
UNW_DEC_REG_PSPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_BSP	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
9	int
:	O
UNW_DEC_REG_SPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_BSP	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
10	int
:	O
UNW_DEC_REG_WHEN	O
(	O
"P8"	pointer
,	O
UNW_REG_BSPSTORE	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
11	int
:	O
UNW_DEC_REG_PSPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_BSPSTORE	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
12	int
:	O
UNW_DEC_REG_SPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_BSPSTORE	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
13	int
:	O
UNW_DEC_REG_WHEN	O
(	O
"P8"	pointer
,	O
UNW_REG_RNAT	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
14	int
:	O
UNW_DEC_REG_PSPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_RNAT	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
15	int
:	O
UNW_DEC_REG_SPREL	O
(	O
"P8"	pointer
,	O
UNW_REG_RNAT	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
16	int
:	O
UNW_DEC_PRIUNAT_WHEN_GR	O
(	O
"P8"	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
17	int
:	O
UNW_DEC_PRIUNAT_PSPREL	O
(	O
"P8"	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
18	int
:	O
UNW_DEC_PRIUNAT_SPREL	O
(	O
"P8"	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
19	int
:	O
UNW_DEC_PRIUNAT_WHEN_MEM	O
(	O
"P8"	pointer
,	O
t	long
,	O
arg	pointer
)	O
;	O
break	O
;	O
default	O
:	O
UNW_DEC_BAD_CODE	O
(	O
r	char
)	O
;	O
break	O
;	O
}	O
}	O
break	O
;	O
case	O
0x1	int
:	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
2	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt P9>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
byte1	char
=	O
*	O
dp	pointer
++	O
;	O
byte2	char
=	O
*	O
dp	pointer
++	O
;	O
UNW_DEC_GR_GR	O
(	O
"P9"	pointer
,	O
(	O
byte1	char
&	O
0xf	int
)	O
,	O
(	O
byte2	char
&	O
0x7f	int
)	O
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
0xf	int
:	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
2	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt P10>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
byte1	char
=	O
*	O
dp	pointer
++	O
;	O
byte2	char
=	O
*	O
dp	pointer
++	O
;	O
UNW_DEC_ABI	O
(	O
"P10"	pointer
,	O
byte1	char
,	O
byte2	char
,	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
0x9	int
:	O
return	O
unw_decode_x1	function
(	O
dp	pointer
,	O
code	int
,	O
arg	pointer
,	O
end	pointer
)	O
;	O
case	O
0xa	int
:	O
return	O
unw_decode_x2	function
(	O
dp	pointer
,	O
code	int
,	O
arg	pointer
,	O
end	pointer
)	O
;	O
case	O
0xb	int
:	O
return	O
unw_decode_x3	function
(	O
dp	pointer
,	O
code	int
,	O
arg	pointer
,	O
end	pointer
)	O
;	O
case	O
0xc	int
:	O
return	O
unw_decode_x4	function
(	O
dp	pointer
,	O
code	int
,	O
arg	pointer
,	O
end	pointer
)	O
;	O
default	O
:	O
UNW_DEC_BAD_CODE	O
(	O
code	int
)	O
;	O
break	O
;	O
}	O
}	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_b1	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
,	O
void	O
*	O
arg	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
unw_word	long
label	long
=	O
(	O
code	int
&	O
0x1f	int
)	O
;	O
if	O
(	O
(	O
code	int
&	O
0x20	int
)	O
!=	O
0	int
)	O
UNW_DEC_COPY_STATE	O
(	O
"B1"	pointer
,	O
label	long
,	O
arg	pointer
)	O
;	O
else	O
UNW_DEC_LABEL_STATE	O
(	O
"B1"	pointer
,	O
label	long
,	O
arg	pointer
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_b2	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
,	O
void	O
*	O
arg	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
unw_word	long
t	long
;	O
t	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
UNW_DEC_EPILOGUE	O
(	O
"B2"	pointer
,	O
t	long
,	O
(	O
code	int
&	O
0x1f	int
)	O
,	O
arg	pointer
)	O
;	O
return	O
dp	pointer
;	O
}	O
static	O
const	O
unsigned	O
char	O
*	O
unw_decode_b3_x4	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
unsigned	O
int	O
code	int
,	O
void	O
*	O
arg	pointer
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
unw_word	long
t	long
,	O
ecount	long
,	O
label	long
;	O
if	O
(	O
(	O
code	int
&	O
0x10	int
)	O
==	O
0	int
)	O
{	O
t	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
ecount	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
UNW_DEC_EPILOGUE	O
(	O
"B3"	pointer
,	O
t	long
,	O
ecount	long
,	O
arg	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
code	int
&	O
0x07	int
)	O
==	O
0	int
)	O
{	O
label	long
=	O
unw_decode_uleb128	function
(	O
&	O
dp	pointer
,	O
end	pointer
)	O
;	O
if	O
(	O
(	O
code	int
&	O
0x08	int
)	O
!=	O
0	int
)	O
UNW_DEC_COPY_STATE	O
(	O
"B4"	pointer
,	O
label	long
,	O
arg	pointer
)	O
;	O
else	O
UNW_DEC_LABEL_STATE	O
(	O
"B4"	pointer
,	O
label	long
,	O
arg	pointer
)	O
;	O
}	O
else	O
switch	O
(	O
code	int
&	O
0x7	int
)	O
{	O
case	O
1	int
:	O
return	O
unw_decode_x1	function
(	O
dp	pointer
,	O
code	int
,	O
arg	pointer
,	O
end	pointer
)	O
;	O
case	O
2	int
:	O
return	O
unw_decode_x2	function
(	O
dp	pointer
,	O
code	int
,	O
arg	pointer
,	O
end	pointer
)	O
;	O
case	O
3	int
:	O
return	O
unw_decode_x3	function
(	O
dp	pointer
,	O
code	int
,	O
arg	pointer
,	O
end	pointer
)	O
;	O
case	O
4	int
:	O
return	O
unw_decode_x4	function
(	O
dp	pointer
,	O
code	int
,	O
arg	pointer
,	O
end	pointer
)	O
;	O
default	O
:	O
UNW_DEC_BAD_CODE	O
(	O
code	int
)	O
;	O
break	O
;	O
}	O
return	O
dp	pointer
;	O
}	O
typedef	O
const	O
unsigned	O
char	O
*	O
(	O
*	O
unw_decoder	pointer
)	O
(	O
const	O
unsigned	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
void	O
*	O
,	O
const	O
unsigned	O
char	O
*	O
)	O
;	O
static	O
const	O
unw_decoder	pointer
unw_decode_table	array
[	O
2	int
]	O
[	O
8	int
]	O
=	O
{	O
{	O
unw_decode_r1	function
,	O
unw_decode_r1	function
,	O
unw_decode_r2	function
,	O
unw_decode_r3	function
,	O
unw_decode_p1	function
,	O
unw_decode_p2_p5	function
,	O
unw_decode_p6	function
,	O
unw_decode_p7_p10	function
}	O
,	O
{	O
unw_decode_r1	function
,	O
unw_decode_r1	function
,	O
unw_decode_r2	function
,	O
unw_decode_r3	function
,	O
unw_decode_b1	function
,	O
unw_decode_b1	function
,	O
unw_decode_b2	function
,	O
unw_decode_b3_x4	function
}	O
}	O
;	O
const	O
unsigned	O
char	O
*	O
unw_decode	function
(	O
const	O
unsigned	O
char	O
*	O
dp	pointer
,	O
int	O
inside_body	int
,	O
void	O
*	O
ptr_inside_body	pointer
,	O
const	O
unsigned	O
char	O
*	O
end	pointer
)	O
{	O
unw_decoder	pointer
decoder	pointer
;	O
unsigned	O
char	O
code	int
;	O
if	O
(	O
(	O
end	pointer
-	O
dp	pointer
)	O
<	O
1	int
)	O
{	O
printf	function
(	O
_	O
(	O
"\t<corrupt IA64 descriptor>\n"	pointer
)	O
)	O
;	O
return	O
end	pointer
;	O
}	O
code	int
=	O
*	O
dp	pointer
++	O
;	O
decoder	pointer
=	O
unw_decode_table	array
[	O
inside_body	int
]	O
[	O
code	int
>>	O
5	int
]	O
;	O
return	O
(	O
*	O
decoder	pointer
)	O
(	O
dp	pointer
,	O
code	int
,	O
ptr_inside_body	pointer
,	O
end	pointer
)	O
;	O
}	O
