static	O
process_t	O
_proc_server	int
=	O
MACH_PORT_NULL	O
;	O
static	O
inline	O
process_t	O
proc_server	function
(	O
)	O
{	O
if	O
(	O
_proc_server	int
==	O
MACH_PORT_NULL	O
)	O
_proc_server	int
=	O
getproc	function
(	O
)	O
;	O
return	O
_proc_server	int
;	O
}	O
error_t	int
add_fn_pids	function
(	O
pid_t	int
*	O
*	O
pids	pointer
,	O
size_t	long
*	O
num_pids	pointer
,	O
unsigned	O
id	int
,	O
error_t	int
(	O
*	O
pids_fn	pointer
)	O
(	O
process_t	O
proc	int
,	O
pid_t	int
id	int
,	O
pid_t	int
*	O
*	O
pids	pointer
,	O
size_t	long
*	O
num_pids	pointer
)	O
)	O
{	O
size_t	long
num_new_pids	long
=	O
25	int
;	O
pid_t	int
_new_pids	O
[	O
num_new_pids	long
]	O
,	O
*	O
new_pids	pointer
=	O
_new_pids	O
;	O
error_t	int
err	int
=	O
(	O
*	O
pids_fn	pointer
)	O
(	O
proc_server	function
(	O
)	O
,	O
id	int
,	O
&	O
new_pids	pointer
,	O
&	O
num_new_pids	long
)	O
;	O
if	O
(	O
!	O
err	int
)	O
{	O
size_t	long
new_sz	long
=	O
*	O
num_pids	pointer
+	O
num_new_pids	long
;	O
pid_t	int
*	O
new	pointer
=	O
realloc	function
(	O
*	O
pids	pointer
,	O
new_sz	long
*	O
sizeof	O
(	O
pid_t	int
)	O
)	O
;	O
if	O
(	O
new	pointer
)	O
{	O
bcopy	function
(	O
new_pids	pointer
,	O
new	pointer
+	O
(	O
*	O
num_pids	pointer
*	O
sizeof	O
(	O
pid_t	int
)	O
)	O
,	O
num_new_pids	long
*	O
sizeof	O
(	O
pid_t	int
)	O
)	O
;	O
*	O
pids	pointer
=	O
new	pointer
;	O
*	O
num_pids	pointer
=	O
new_sz	long
;	O
}	O
else	O
err	int
=	O
ENOMEM	int
;	O
if	O
(	O
new_pids	pointer
!=	O
_new_pids	O
)	O
munmap	function
(	O
new_pids	pointer
,	O
num_new_pids	long
*	O
sizeof	O
(	O
pid_t	int
)	O
)	O
;	O
}	O
return	O
err	int
;	O
}	O
error_t	int
add_pid	function
(	O
pid_t	int
*	O
*	O
pids	pointer
,	O
size_t	long
*	O
num_pids	pointer
,	O
pid_t	int
pid	int
)	O
{	O
size_t	long
new_sz	long
=	O
*	O
num_pids	pointer
+	O
1	int
;	O
pid_t	int
*	O
new	pointer
=	O
realloc	function
(	O
*	O
pids	pointer
,	O
new_sz	long
*	O
sizeof	O
(	O
pid_t	int
)	O
)	O
;	O
if	O
(	O
new	pointer
)	O
{	O
new	pointer
[	O
new_sz	long
-	O
1	int
]	O
=	O
pid	int
;	O
*	O
pids	pointer
=	O
new	pointer
;	O
*	O
num_pids	pointer
=	O
new_sz	long
;	O
return	O
0	int
;	O
}	O
else	O
return	O
ENOMEM	int
;	O
}	O
struct	O
pids_parse_state	struct
{	O
struct	O
pids_argp_params	O
*	O
params	pointer
;	O
struct	O
argp_state	struct
*	O
state	pointer
;	O
}	O
;	O
static	O
pid_t	int
current_sid	function
(	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
pid_t	int
sid	int
=	O
-	O
1	int
;	O
error_t	int
err	int
=	O
proc_getsid	function
(	O
proc_server	function
(	O
)	O
,	O
getpid	function
(	O
)	O
,	O
&	O
sid	int
)	O
;	O
if	O
(	O
err	int
)	O
argp_failure	function
(	O
state	pointer
,	O
2	int
,	O
err	int
,	O
"Couldn't get current session id"	pointer
)	O
;	O
return	O
sid	int
;	O
}	O
static	O
pid_t	int
current_lid	function
(	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
pid_t	int
lid	int
=	O
-	O
1	int
;	O
error_t	int
err	int
=	O
proc_getloginid	function
(	O
proc_server	function
(	O
)	O
,	O
getpid	function
(	O
)	O
,	O
&	O
lid	int
)	O
;	O
if	O
(	O
err	int
)	O
argp_failure	function
(	O
state	pointer
,	O
2	int
,	O
err	int
,	O
"Couldn't get current login collection"	pointer
)	O
;	O
return	O
lid	int
;	O
}	O
static	O
error_t	int
parse_pid	function
(	O
unsigned	O
pid	int
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
struct	O
pids_argp_params	O
*	O
params	pointer
=	O
state	pointer
->	O
input	pointer
;	O
error_t	int
err	int
=	O
add_pid	function
(	O
params	pointer
->	O
pids	pointer
,	O
params	pointer
->	O
num_pids	pointer
,	O
pid	int
)	O
;	O
if	O
(	O
err	int
)	O
argp_failure	function
(	O
state	pointer
,	O
2	int
,	O
err	int
,	O
"%d: Cannot add process"	pointer
,	O
pid	int
)	O
;	O
return	O
err	int
;	O
}	O
static	O
error_t	int
parse_sid	function
(	O
unsigned	O
sid	int
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
struct	O
pids_argp_params	O
*	O
params	pointer
=	O
state	pointer
->	O
input	pointer
;	O
error_t	int
err	int
=	O
add_fn_pids	function
(	O
params	pointer
->	O
pids	pointer
,	O
params	pointer
->	O
num_pids	pointer
,	O
sid	int
,	O
proc_getsessionpids	O
)	O
;	O
if	O
(	O
err	int
)	O
argp_failure	function
(	O
state	pointer
,	O
2	int
,	O
err	int
,	O
"%d: Cannot add session"	pointer
,	O
sid	int
)	O
;	O
return	O
err	int
;	O
}	O
static	O
error_t	int
parse_lid	function
(	O
unsigned	O
lid	int
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
struct	O
pids_argp_params	O
*	O
params	pointer
=	O
state	pointer
->	O
input	pointer
;	O
error_t	int
err	int
=	O
add_fn_pids	function
(	O
params	pointer
->	O
pids	pointer
,	O
params	pointer
->	O
num_pids	pointer
,	O
lid	int
,	O
proc_getloginpids	O
)	O
;	O
if	O
(	O
err	int
)	O
argp_failure	function
(	O
state	pointer
,	O
2	int
,	O
err	int
,	O
"%d: Cannot add login collection"	pointer
,	O
lid	int
)	O
;	O
return	O
err	int
;	O
}	O
static	O
error_t	int
parse_pgrp	function
(	O
unsigned	O
pgrp	int
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
struct	O
pids_argp_params	O
*	O
params	pointer
=	O
state	pointer
->	O
input	pointer
;	O
error_t	int
err	int
=	O
add_fn_pids	function
(	O
params	pointer
->	O
pids	pointer
,	O
params	pointer
->	O
num_pids	pointer
,	O
pgrp	int
,	O
proc_getpgrppids	O
)	O
;	O
if	O
(	O
err	int
)	O
argp_failure	function
(	O
state	pointer
,	O
2	int
,	O
err	int
,	O
"%d: Cannot add process group"	pointer
,	O
pgrp	int
)	O
;	O
return	O
err	int
;	O
}	O
static	O
const	O
struct	O
argp_option	struct
options	pointer
[	O
]	O
=	O
{	O
{	O
"login"	pointer
,	O
'L'	O
,	O
"LID"	pointer
,	O
OA	O
,	O
"Processes from the login"	pointer
" collection LID (which defaults that of"	pointer
" the current process)"	pointer
}	O
,	O
{	O
"lid"	pointer
,	O
0	int
,	O
0	int
,	O
OPTION_ALIAS	int
|	O
OPTION_HIDDEN	int
}	O
,	O
{	O
"pid"	pointer
,	O
'p'	O
,	O
"PID"	pointer
,	O
0	int
,	O
"The process PID"	pointer
}	O
,	O
{	O
"pgrp"	pointer
,	O
'P'	O
,	O
"PGRP"	pointer
,	O
0	int
,	O
"Processes in process group PGRP"	pointer
}	O
,	O
{	O
"session"	pointer
,	O
'S'	O
,	O
"SID"	pointer
,	O
OA	O
,	O
"Processes from the session SID"	pointer
" (which defaults to that of the"	pointer
" current process)"	pointer
}	O
,	O
{	O
"sid"	pointer
,	O
0	int
,	O
0	int
,	O
OPTION_ALIAS	int
|	O
OPTION_HIDDEN	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
struct	O
pids_argp_params	O
*	O
params	pointer
=	O
state	pointer
->	O
input	pointer
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'p'	O
:	O
return	O
parse_numlist	function
(	O
arg	pointer
,	O
parse_pid	function
,	O
NULL	O
,	O
NULL	O
,	O
"process id"	pointer
,	O
state	pointer
)	O
;	O
case	O
'S'	O
:	O
return	O
parse_numlist	function
(	O
arg	pointer
,	O
parse_sid	function
,	O
current_sid	function
,	O
NULL	O
,	O
"session id"	pointer
,	O
state	pointer
)	O
;	O
case	O
'L'	O
:	O
return	O
parse_numlist	function
(	O
arg	pointer
,	O
parse_lid	function
,	O
current_lid	function
,	O
NULL	O
,	O
"login collection"	pointer
,	O
state	pointer
)	O
;	O
case	O
'P'	O
:	O
return	O
parse_numlist	function
(	O
arg	pointer
,	O
parse_pgrp	function
,	O
NULL	O
,	O
NULL	O
,	O
"process group"	pointer
,	O
state	pointer
)	O
;	O
case	O
ARGP_KEY_ARG	int
:	O
if	O
(	O
params	pointer
->	O
parse_pid_args	O
)	O
return	O
parse_numlist	function
(	O
arg	pointer
,	O
parse_pid	function
,	O
NULL	O
,	O
NULL	O
,	O
"process id"	pointer
,	O
state	pointer
)	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
}	O
static	O
char	O
*	O
help_filter	pointer
(	O
int	O
key	int
,	O
const	O
char	O
*	O
text	pointer
,	O
void	O
*	O
input	pointer
)	O
{	O
struct	O
pids_argp_params	O
*	O
params	pointer
=	O
input	pointer
;	O
if	O
(	O
key	int
==	O
ARGP_KEY_HELP_ARGS_DOC	int
&&	O
params	pointer
->	O
parse_pid_args	O
)	O
return	O
strdup	function
(	O
"[PID...]"	pointer
)	O
;	O
return	O
(	O
char	O
*	O
)	O
text	pointer
;	O
}	O
struct	O
argp	struct
pids_argp	struct
=	O
{	O
options	pointer
,	O
parse_opt	function
,	O
0	int
,	O
0	int
,	O
0	int
,	O
help_filter	pointer
}	O
;	O
