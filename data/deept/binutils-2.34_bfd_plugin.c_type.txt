static	O
enum	O
ld_plugin_status	enum
message	pointer
(	O
int	O
level	int
ATTRIBUTE_UNUSED	O
,	O
const	O
char	O
*	O
format	enum
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
format	enum
)	O
;	O
printf	function
(	O
"bfd plugin: "	pointer
)	O
;	O
vprintf	function
(	O
format	enum
,	O
args	array
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
return	O
LDPS_OK	int
;	O
}	O
static	O
ld_plugin_claim_file_handler	pointer
claim_file	pointer
=	O
NULL	O
;	O
static	O
enum	O
ld_plugin_status	enum
register_claim_file	function
(	O
ld_plugin_claim_file_handler	pointer
handler	pointer
)	O
{	O
claim_file	pointer
=	O
handler	pointer
;	O
return	O
LDPS_OK	int
;	O
}	O
static	O
enum	O
ld_plugin_status	enum
add_symbols	function
(	O
void	O
*	O
handle	pointer
,	O
int	O
nsyms	int
,	O
const	O
struct	O
ld_plugin_symbol	struct
*	O
syms	pointer
)	O
{	O
bfd	struct
*	O
abfd	pointer
=	O
handle	pointer
;	O
struct	O
plugin_data_struct	struct
*	O
plugin_data	pointer
=	O
bfd_alloc	function
(	O
abfd	pointer
,	O
sizeof	O
(	O
plugin_data_struct	struct
)	O
)	O
;	O
plugin_data	pointer
->	O
nsyms	int
=	O
nsyms	int
;	O
plugin_data	pointer
->	O
syms	pointer
=	O
syms	pointer
;	O
if	O
(	O
nsyms	int
!=	O
0	int
)	O
abfd	pointer
->	O
flags	int
|=	O
HAS_SYMS	int
;	O
abfd	pointer
->	O
tdata	union
.	O
plugin_data	pointer
=	O
plugin_data	pointer
;	O
return	O
LDPS_OK	int
;	O
}	O
static	O
const	O
char	O
*	O
plugin_program_name	pointer
;	O
void	O
bfd_plugin_set_program_name	function
(	O
const	O
char	O
*	O
program_name	pointer
)	O
{	O
plugin_program_name	pointer
=	O
program_name	pointer
;	O
}	O
int	O
bfd_plugin_open_input	function
(	O
bfd	struct
*	O
ibfd	pointer
,	O
struct	O
ld_plugin_input_file	struct
*	O
file	pointer
)	O
{	O
bfd	struct
*	O
iobfd	pointer
;	O
iobfd	pointer
=	O
ibfd	pointer
;	O
while	O
(	O
iobfd	pointer
->	O
my_archive	pointer
&&	O
!	O
bfd_is_thin_archive	function
(	O
iobfd	pointer
->	O
my_archive	pointer
)	O
)	O
iobfd	pointer
=	O
iobfd	pointer
->	O
my_archive	pointer
;	O
file	pointer
->	O
name	pointer
=	O
iobfd	pointer
->	O
filename	pointer
;	O
if	O
(	O
!	O
iobfd	pointer
->	O
iostream	pointer
&&	O
!	O
bfd_open_file	function
(	O
iobfd	pointer
)	O
)	O
return	O
0	int
;	O
file	pointer
->	O
fd	int
=	O
open	function
(	O
file	pointer
->	O
name	pointer
,	O
O_RDONLY	int
|	O
O_BINARY	int
)	O
;	O
if	O
(	O
file	pointer
->	O
fd	int
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
iobfd	pointer
==	O
ibfd	pointer
)	O
{	O
struct	O
stat	struct
stat_buf	struct
;	O
if	O
(	O
fstat	function
(	O
file	pointer
->	O
fd	int
,	O
&	O
stat_buf	struct
)	O
)	O
{	O
close	pointer
(	O
file	pointer
->	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
file	pointer
->	O
offset	long
=	O
0	int
;	O
file	pointer
->	O
filesize	long
=	O
stat_buf	struct
.	O
st_size	long
;	O
}	O
else	O
{	O
file	pointer
->	O
offset	long
=	O
ibfd	pointer
->	O
origin	long
;	O
file	pointer
->	O
filesize	long
=	O
arelt_size	O
(	O
ibfd	pointer
)	O
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
try_claim	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
int	O
claimed	pointer
=	O
0	int
;	O
struct	O
ld_plugin_input_file	struct
file	pointer
;	O
file	pointer
.	O
handle	pointer
=	O
abfd	pointer
;	O
if	O
(	O
!	O
bfd_plugin_open_input	function
(	O
abfd	pointer
,	O
&	O
file	pointer
)	O
)	O
return	O
0	int
;	O
if	O
(	O
claim_file	pointer
)	O
claim_file	pointer
(	O
&	O
file	pointer
,	O
&	O
claimed	pointer
)	O
;	O
close	pointer
(	O
file	pointer
.	O
fd	int
)	O
;	O
return	O
claimed	pointer
;	O
}	O
struct	O
plugin_list_entry	struct
{	O
void	O
*	O
handle	pointer
;	O
ld_plugin_claim_file_handler	pointer
claim_file	pointer
;	O
struct	O
plugin_list_entry	struct
*	O
next	pointer
;	O
}	O
;	O
static	O
struct	O
plugin_list_entry	struct
*	O
plugin_list	pointer
=	O
NULL	O
;	O
static	O
int	O
try_load_plugin	function
(	O
const	O
char	O
*	O
pname	pointer
,	O
bfd	struct
*	O
abfd	pointer
,	O
int	O
*	O
has_plugin_p	pointer
)	O
{	O
void	O
*	O
plugin_handle	pointer
=	O
NULL	O
;	O
struct	O
ld_plugin_tv	struct
tv	pointer
[	O
4	int
]	O
;	O
int	O
i	pointer
;	O
ld_plugin_onload	pointer
onload	pointer
;	O
enum	O
ld_plugin_status	enum
status	int
;	O
struct	O
plugin_list_entry	struct
*	O
plugin_list_iter	pointer
;	O
*	O
has_plugin_p	pointer
=	O
0	int
;	O
plugin_handle	pointer
=	O
dlopen	function
(	O
pname	pointer
,	O
RTLD_NOW	int
)	O
;	O
if	O
(	O
!	O
plugin_handle	pointer
)	O
{	O
_bfd_error_handler	function
(	O
"%s\n"	pointer
,	O
dlerror	function
(	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
for	O
(	O
plugin_list_iter	pointer
=	O
plugin_list	pointer
;	O
plugin_list_iter	pointer
;	O
plugin_list_iter	pointer
=	O
plugin_list_iter	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
plugin_handle	pointer
==	O
plugin_list_iter	pointer
->	O
handle	pointer
)	O
{	O
dlclose	function
(	O
plugin_handle	pointer
)	O
;	O
if	O
(	O
!	O
plugin_list_iter	pointer
->	O
claim_file	pointer
)	O
return	O
0	int
;	O
register_claim_file	function
(	O
plugin_list_iter	pointer
->	O
claim_file	pointer
)	O
;	O
goto	O
have_claim_file	O
;	O
}	O
}	O
plugin_list_iter	pointer
=	O
bfd_malloc	function
(	O
sizeof	O
*	O
plugin_list_iter	pointer
)	O
;	O
if	O
(	O
plugin_list_iter	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
plugin_list_iter	pointer
->	O
handle	pointer
=	O
plugin_handle	pointer
;	O
plugin_list_iter	pointer
->	O
claim_file	pointer
=	O
NULL	O
;	O
plugin_list_iter	pointer
->	O
next	pointer
=	O
plugin_list	pointer
;	O
plugin_list	pointer
=	O
plugin_list_iter	pointer
;	O
onload	pointer
=	O
dlsym	function
(	O
plugin_handle	pointer
,	O
"onload"	pointer
)	O
;	O
if	O
(	O
!	O
onload	pointer
)	O
return	O
0	int
;	O
i	pointer
=	O
0	int
;	O
tv	pointer
[	O
i	pointer
]	O
.	O
tv_tag	enum
=	O
LDPT_MESSAGE	int
;	O
tv	pointer
[	O
i	pointer
]	O
.	O
tv_u	union
.	O
tv_message	pointer
=	O
message	pointer
;	O
++	O
i	pointer
;	O
tv	pointer
[	O
i	pointer
]	O
.	O
tv_tag	enum
=	O
LDPT_REGISTER_CLAIM_FILE_HOOK	int
;	O
tv	pointer
[	O
i	pointer
]	O
.	O
tv_u	union
.	O
tv_register_claim_file	pointer
=	O
register_claim_file	function
;	O
++	O
i	pointer
;	O
tv	pointer
[	O
i	pointer
]	O
.	O
tv_tag	enum
=	O
LDPT_ADD_SYMBOLS	int
;	O
tv	pointer
[	O
i	pointer
]	O
.	O
tv_u	union
.	O
tv_add_symbols	pointer
=	O
add_symbols	function
;	O
++	O
i	pointer
;	O
tv	pointer
[	O
i	pointer
]	O
.	O
tv_tag	enum
=	O
LDPT_NULL	int
;	O
tv	pointer
[	O
i	pointer
]	O
.	O
tv_u	union
.	O
tv_val	int
=	O
0	int
;	O
status	int
=	O
(	O
*	O
onload	pointer
)	O
(	O
tv	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
LDPS_OK	int
)	O
return	O
0	int
;	O
plugin_list_iter	pointer
->	O
claim_file	pointer
=	O
claim_file	pointer
;	O
have_claim_file	O
:	O
*	O
has_plugin_p	pointer
=	O
1	int
;	O
abfd	pointer
->	O
plugin_format	enum
=	O
bfd_plugin_no	int
;	O
if	O
(	O
!	O
claim_file	pointer
)	O
return	O
0	int
;	O
if	O
(	O
!	O
try_claim	function
(	O
abfd	pointer
)	O
)	O
return	O
0	int
;	O
abfd	pointer
->	O
plugin_format	enum
=	O
bfd_plugin_yes	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
has_plugin	int
=	O
-	O
1	int
;	O
static	O
const	O
bfd_target	struct
*	O
(	O
*	O
ld_plugin_object_p	pointer
)	O
(	O
bfd	struct
*	O
)	O
;	O
static	O
const	O
char	O
*	O
plugin_name	pointer
;	O
void	O
bfd_plugin_set_plugin	function
(	O
const	O
char	O
*	O
p	pointer
)	O
{	O
plugin_name	pointer
=	O
p	pointer
;	O
has_plugin	int
=	O
p	pointer
!=	O
NULL	O
;	O
}	O
bfd_boolean	int
bfd_plugin_specified_p	function
(	O
void	O
)	O
{	O
return	O
has_plugin	int
>	O
0	int
;	O
}	O
bfd_boolean	int
bfd_link_plugin_object_p	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
if	O
(	O
ld_plugin_object_p	pointer
)	O
return	O
ld_plugin_object_p	pointer
(	O
abfd	pointer
)	O
!=	O
NULL	O
;	O
return	O
FALSE	int
;	O
}	O
extern	O
const	O
bfd_target	struct
plugin_vec	struct
;	O
bfd_boolean	int
bfd_plugin_target_p	function
(	O
const	O
bfd_target	struct
*	O
target	pointer
)	O
{	O
return	O
target	pointer
==	O
&	O
plugin_vec	struct
;	O
}	O
void	O
register_ld_plugin_object_p	function
(	O
const	O
bfd_target	struct
*	O
(	O
*	O
object_p	pointer
)	O
(	O
bfd	struct
*	O
)	O
)	O
{	O
ld_plugin_object_p	pointer
=	O
object_p	pointer
;	O
}	O
static	O
int	O
load_plugin	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
static	O
const	O
char	O
*	O
path	pointer
[	O
]	O
=	O
{	O
LIBDIR	O
"/bfd-plugins"	pointer
,	O
BINDIR	O
"/../lib/bfd-plugins"	pointer
}	O
;	O
struct	O
stat	struct
last_st	struct
;	O
int	O
found	int
=	O
0	int
;	O
unsigned	O
int	O
i	pointer
;	O
if	O
(	O
!	O
has_plugin	int
)	O
return	O
found	int
;	O
if	O
(	O
plugin_name	pointer
)	O
return	O
try_load_plugin	function
(	O
plugin_name	pointer
,	O
abfd	pointer
,	O
&	O
has_plugin	int
)	O
;	O
if	O
(	O
plugin_program_name	pointer
==	O
NULL	O
)	O
return	O
found	int
;	O
last_st	struct
.	O
st_dev	long
=	O
0	int
;	O
last_st	struct
.	O
st_ino	long
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
sizeof	O
(	O
path	pointer
)	O
/	O
sizeof	O
(	O
path	pointer
[	O
0	int
]	O
)	O
;	O
i	pointer
++	O
)	O
{	O
char	O
*	O
plugin_dir	pointer
=	O
make_relative_prefix	function
(	O
plugin_program_name	pointer
,	O
BINDIR	O
,	O
path	pointer
[	O
i	pointer
]	O
)	O
;	O
if	O
(	O
plugin_dir	pointer
)	O
{	O
struct	O
stat	struct
st	struct
;	O
DIR	struct
*	O
d	pointer
;	O
if	O
(	O
stat	struct
(	O
plugin_dir	pointer
,	O
&	O
st	struct
)	O
==	O
0	int
&&	O
S_ISDIR	O
(	O
st	struct
.	O
st_mode	int
)	O
&&	O
!	O
(	O
last_st	struct
.	O
st_dev	long
==	O
st	struct
.	O
st_dev	long
&&	O
last_st	struct
.	O
st_ino	long
==	O
st	struct
.	O
st_ino	long
&&	O
st	struct
.	O
st_ino	long
!=	O
0	int
)	O
&&	O
(	O
d	pointer
=	O
opendir	function
(	O
plugin_dir	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
struct	O
dirent	struct
*	O
ent	pointer
;	O
last_st	struct
.	O
st_dev	long
=	O
st	struct
.	O
st_dev	long
;	O
last_st	struct
.	O
st_ino	long
=	O
st	struct
.	O
st_ino	long
;	O
while	O
(	O
(	O
ent	pointer
=	O
readdir	function
(	O
d	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
char	O
*	O
full_name	pointer
;	O
full_name	pointer
=	O
concat	function
(	O
plugin_dir	pointer
,	O
"/"	pointer
,	O
ent	pointer
->	O
d_name	array
,	O
NULL	O
)	O
;	O
if	O
(	O
stat	struct
(	O
full_name	pointer
,	O
&	O
st	struct
)	O
==	O
0	int
&&	O
S_ISREG	O
(	O
st	struct
.	O
st_mode	int
)	O
)	O
{	O
int	O
valid_plugin	int
;	O
found	int
=	O
try_load_plugin	function
(	O
full_name	pointer
,	O
abfd	pointer
,	O
&	O
valid_plugin	int
)	O
;	O
if	O
(	O
has_plugin	int
<=	O
0	int
)	O
has_plugin	int
=	O
valid_plugin	int
;	O
}	O
free	function
(	O
full_name	pointer
)	O
;	O
if	O
(	O
found	int
)	O
break	O
;	O
}	O
closedir	function
(	O
d	pointer
)	O
;	O
}	O
free	function
(	O
plugin_dir	pointer
)	O
;	O
}	O
if	O
(	O
found	int
)	O
break	O
;	O
}	O
return	O
found	int
;	O
}	O
static	O
const	O
bfd_target	struct
*	O
bfd_plugin_object_p	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
if	O
(	O
ld_plugin_object_p	pointer
)	O
return	O
ld_plugin_object_p	pointer
(	O
abfd	pointer
)	O
;	O
if	O
(	O
abfd	pointer
->	O
plugin_format	enum
==	O
bfd_plugin_unknown	int
&&	O
!	O
load_plugin	function
(	O
abfd	pointer
)	O
)	O
return	O
NULL	O
;	O
return	O
abfd	pointer
->	O
plugin_format	enum
==	O
bfd_plugin_yes	int
?	O
abfd	pointer
->	O
xvec	pointer
:	O
NULL	O
;	O
}	O
static	O
bfd_boolean	int
bfd_plugin_bfd_copy_private_bfd_data	function
(	O
bfd	struct
*	O
ibfd	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd	struct
*	O
obfd	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
BFD_ASSERT	O
(	O
0	int
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
bfd_plugin_bfd_copy_private_section_data	function
(	O
bfd	struct
*	O
ibfd	pointer
ATTRIBUTE_UNUSED	O
,	O
asection	struct
*	O
isection	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd	struct
*	O
obfd	pointer
ATTRIBUTE_UNUSED	O
,	O
asection	struct
*	O
osection	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
BFD_ASSERT	O
(	O
0	int
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
bfd_plugin_bfd_copy_private_symbol_data	function
(	O
bfd	struct
*	O
ibfd	pointer
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
isymbol	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd	struct
*	O
obfd	pointer
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
osymbol	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
BFD_ASSERT	O
(	O
0	int
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
bfd_plugin_bfd_print_private_bfd_data	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
PTR	O
ptr	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
BFD_ASSERT	O
(	O
0	int
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
char	O
*	O
bfd_plugin_core_file_failing_command	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
BFD_ASSERT	O
(	O
0	int
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
bfd_plugin_core_file_failing_signal	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
BFD_ASSERT	O
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
bfd_plugin_core_file_pid	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
BFD_ASSERT	O
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
long	O
bfd_plugin_get_symtab_upper_bound	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
struct	O
plugin_data_struct	struct
*	O
plugin_data	pointer
=	O
abfd	pointer
->	O
tdata	union
.	O
plugin_data	pointer
;	O
long	O
nsyms	int
=	O
plugin_data	pointer
->	O
nsyms	int
;	O
BFD_ASSERT	O
(	O
nsyms	int
>=	O
0	int
)	O
;	O
return	O
(	O
(	O
nsyms	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
asymbol	struct
*	O
)	O
)	O
;	O
}	O
static	O
flagword	int
convert_flags	function
(	O
const	O
struct	O
ld_plugin_symbol	struct
*	O
sym	pointer
)	O
{	O
switch	O
(	O
sym	pointer
->	O
def	int
)	O
{	O
case	O
LDPK_DEF	int
:	O
case	O
LDPK_COMMON	int
:	O
case	O
LDPK_UNDEF	int
:	O
return	O
BSF_GLOBAL	O
;	O
case	O
LDPK_WEAKUNDEF	int
:	O
case	O
LDPK_WEAKDEF	int
:	O
return	O
BSF_GLOBAL	O
|	O
BSF_WEAK	O
;	O
default	O
:	O
BFD_ASSERT	O
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
static	O
long	O
bfd_plugin_canonicalize_symtab	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asymbol	struct
*	O
*	O
alocation	pointer
)	O
{	O
struct	O
plugin_data_struct	struct
*	O
plugin_data	pointer
=	O
abfd	pointer
->	O
tdata	union
.	O
plugin_data	pointer
;	O
long	O
nsyms	int
=	O
plugin_data	pointer
->	O
nsyms	int
;	O
const	O
struct	O
ld_plugin_symbol	struct
*	O
syms	pointer
=	O
plugin_data	pointer
->	O
syms	pointer
;	O
static	O
asection	struct
fake_section	struct
=	O
BFD_FAKE_SECTION	O
(	O
fake_section	struct
,	O
NULL	O
,	O
"plug"	pointer
,	O
0	int
,	O
SEC_ALLOC	int
|	O
SEC_LOAD	int
|	O
SEC_CODE	int
|	O
SEC_HAS_CONTENTS	int
)	O
;	O
static	O
asection	struct
fake_common_section	struct
=	O
BFD_FAKE_SECTION	O
(	O
fake_common_section	struct
,	O
NULL	O
,	O
"plug"	pointer
,	O
0	int
,	O
SEC_IS_COMMON	int
)	O
;	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
nsyms	int
;	O
i	pointer
++	O
)	O
{	O
asymbol	struct
*	O
s	pointer
=	O
bfd_alloc	function
(	O
abfd	pointer
,	O
sizeof	O
(	O
asymbol	struct
)	O
)	O
;	O
BFD_ASSERT	O
(	O
s	pointer
)	O
;	O
alocation	pointer
[	O
i	pointer
]	O
=	O
s	pointer
;	O
s	pointer
->	O
the_bfd	pointer
=	O
abfd	pointer
;	O
s	pointer
->	O
name	pointer
=	O
syms	pointer
[	O
i	pointer
]	O
.	O
name	pointer
;	O
s	pointer
->	O
value	long
=	O
0	int
;	O
s	pointer
->	O
flags	int
=	O
convert_flags	function
(	O
&	O
syms	pointer
[	O
i	pointer
]	O
)	O
;	O
switch	O
(	O
syms	pointer
[	O
i	pointer
]	O
.	O
def	int
)	O
{	O
case	O
LDPK_COMMON	int
:	O
s	pointer
->	O
section	pointer
=	O
&	O
fake_common_section	struct
;	O
break	O
;	O
case	O
LDPK_UNDEF	int
:	O
case	O
LDPK_WEAKUNDEF	int
:	O
s	pointer
->	O
section	pointer
=	O
bfd_und_section_ptr	O
;	O
break	O
;	O
case	O
LDPK_DEF	int
:	O
case	O
LDPK_WEAKDEF	int
:	O
s	pointer
->	O
section	pointer
=	O
&	O
fake_section	struct
;	O
break	O
;	O
default	O
:	O
BFD_ASSERT	O
(	O
0	int
)	O
;	O
}	O
s	pointer
->	O
udata	union
.	O
p	pointer
=	O
(	O
void	O
*	O
)	O
&	O
syms	pointer
[	O
i	pointer
]	O
;	O
}	O
return	O
nsyms	int
;	O
}	O
static	O
void	O
bfd_plugin_print_symbol	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
PTR	O
afile	pointer
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
symbol	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd_print_symbol_type	enum
how	enum
ATTRIBUTE_UNUSED	O
)	O
{	O
BFD_ASSERT	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
bfd_plugin_get_symbol_info	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
asymbol	struct
*	O
symbol	pointer
,	O
symbol_info	struct
*	O
ret	pointer
)	O
{	O
bfd_symbol_info	function
(	O
symbol	pointer
,	O
ret	pointer
)	O
;	O
}	O
static	O
asymbol	struct
*	O
bfd_plugin_make_empty_symbol	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
asymbol	struct
*	O
new_symbol	pointer
=	O
bfd_zalloc	function
(	O
abfd	pointer
,	O
sizeof	O
(	O
asymbol	struct
)	O
)	O
;	O
if	O
(	O
new_symbol	pointer
==	O
NULL	O
)	O
return	O
new_symbol	pointer
;	O
new_symbol	pointer
->	O
the_bfd	pointer
=	O
abfd	pointer
;	O
return	O
new_symbol	pointer
;	O
}	O
static	O
int	O
bfd_plugin_sizeof_headers	function
(	O
bfd	struct
*	O
a	pointer
ATTRIBUTE_UNUSED	O
,	O
struct	O
bfd_link_info	O
*	O
info	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
BFD_ASSERT	O
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
const	O
bfd_target	struct
plugin_vec	struct
=	O
{	O
"plugin"	pointer
,	O
bfd_target_unknown_flavour	int
,	O
BFD_ENDIAN_LITTLE	int
,	O
BFD_ENDIAN_LITTLE	int
,	O
(	O
HAS_RELOC	int
|	O
EXEC_P	int
|	O
HAS_LINENO	int
|	O
HAS_DEBUG	int
|	O
HAS_SYMS	int
|	O
HAS_LOCALS	int
|	O
DYNAMIC	int
|	O
WP_TEXT	int
|	O
D_PAGED	int
)	O
,	O
(	O
SEC_CODE	int
|	O
SEC_DATA	int
|	O
SEC_ROM	int
|	O
SEC_HAS_CONTENTS	int
|	O
SEC_ALLOC	int
|	O
SEC_LOAD	int
|	O
SEC_RELOC	int
)	O
,	O
0	int
,	O
'/'	O
,	O
15	int
,	O
255	int
,	O
bfd_getl64	function
,	O
bfd_getl_signed_64	function
,	O
bfd_putl64	function
,	O
bfd_getl32	function
,	O
bfd_getl_signed_32	function
,	O
bfd_putl32	function
,	O
bfd_getl16	function
,	O
bfd_getl_signed_16	function
,	O
bfd_putl16	function
,	O
bfd_getl64	function
,	O
bfd_getl_signed_64	function
,	O
bfd_putl64	function
,	O
bfd_getl32	function
,	O
bfd_getl_signed_32	function
,	O
bfd_putl32	function
,	O
bfd_getl16	function
,	O
bfd_getl_signed_16	function
,	O
bfd_putl16	function
,	O
{	O
_bfd_dummy_target	function
,	O
bfd_plugin_object_p	function
,	O
bfd_generic_archive_p	function
,	O
_bfd_dummy_target	function
}	O
,	O
{	O
_bfd_bool_bfd_false_error	function
,	O
_bfd_bool_bfd_false_error	function
,	O
_bfd_generic_mkarchive	function
,	O
_bfd_bool_bfd_false_error	function
,	O
}	O
,	O
{	O
_bfd_bool_bfd_false_error	function
,	O
_bfd_bool_bfd_false_error	function
,	O
_bfd_write_archive_contents	function
,	O
_bfd_bool_bfd_false_error	function
,	O
}	O
,	O
BFD_JUMP_TABLE_GENERIC	O
(	O
bfd_plugin	O
)	O
,	O
BFD_JUMP_TABLE_COPY	O
(	O
bfd_plugin	O
)	O
,	O
BFD_JUMP_TABLE_CORE	O
(	O
bfd_plugin	O
)	O
,	O
BFD_JUMP_TABLE_ARCHIVE	O
(	O
_bfd_archive_coff	O
)	O
,	O
BFD_JUMP_TABLE_SYMBOLS	O
(	O
bfd_plugin	O
)	O
,	O
BFD_JUMP_TABLE_RELOCS	O
(	O
_bfd_norelocs	O
)	O
,	O
BFD_JUMP_TABLE_WRITE	O
(	O
bfd_plugin	O
)	O
,	O
BFD_JUMP_TABLE_LINK	O
(	O
bfd_plugin	O
)	O
,	O
BFD_JUMP_TABLE_DYNAMIC	O
(	O
_bfd_nodynamic	O
)	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
