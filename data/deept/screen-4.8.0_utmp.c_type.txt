extern	O
struct	O
display	struct
*	O
display	struct
;	O
extern	O
struct	O
win	struct
*	O
fore	pointer
;	O
extern	O
char	O
*	O
LoginName	pointer
;	O
extern	O
int	O
real_uid	int
,	O
eff_uid	int
;	O
static	O
slot_t	pointer
TtyNameSlot	function
__P	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
static	O
void	O
makeuser	function
__P	O
(	O
(	O
struct	O
utmp	struct
*	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
int	O
)	O
)	O
;	O
static	O
void	O
makedead	function
__P	O
(	O
(	O
struct	O
utmp	struct
*	O
)	O
)	O
;	O
static	O
int	O
pututslot	function
__P	O
(	O
(	O
slot_t	pointer
,	O
struct	O
utmp	struct
*	O
,	O
char	O
*	O
,	O
struct	O
win	struct
*	O
)	O
)	O
;	O
static	O
struct	O
utmp	struct
*	O
getutslot	function
__P	O
(	O
(	O
slot_t	pointer
)	O
)	O
;	O
static	O
struct	O
utmp	struct
*	O
xpututline	function
__P	O
(	O
(	O
struct	O
utmp	struct
*	O
utmp	struct
)	O
)	O
;	O
static	O
int	O
utmpok	int
;	O
static	O
char	O
UtmpName	array
[	O
]	O
=	O
UTMPFILE	O
;	O
static	O
int	O
utmpfd	int
=	O
-	O
1	int
;	O
extern	O
struct	O
utmp	struct
*	O
getutline	function
(	O
)	O
,	O
*	O
pututline	function
(	O
)	O
;	O
void	O
SlotToggle	function
(	O
how	int
)	O
int	O
how	int
;	O
{	O
debug1	O
(	O
"SlotToggle %d\n"	pointer
,	O
how	int
)	O
;	O
if	O
(	O
fore	pointer
->	O
w_type	int
!=	O
W_TYPE_PTY	int
)	O
{	O
Msg	function
(	O
0	int
,	O
"Can only work with normal windows.\n"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
how	int
)	O
{	O
debug	O
(	O
" try to log in\n"	pointer
)	O
;	O
if	O
(	O
(	O
fore	pointer
->	O
w_slot	pointer
==	O
(	O
slot_t	pointer
)	O
-	O
1	int
)	O
||	O
(	O
fore	pointer
->	O
w_slot	pointer
==	O
(	O
slot_t	pointer
)	O
0	int
)	O
)	O
{	O
if	O
(	O
SetUtmp	function
(	O
fore	pointer
)	O
==	O
0	int
)	O
Msg	function
(	O
0	int
,	O
"This window is now logged in."	pointer
)	O
;	O
else	O
Msg	function
(	O
0	int
,	O
"This window should now be logged in."	pointer
)	O
;	O
WindowChanged	function
(	O
fore	pointer
,	O
'f'	O
)	O
;	O
}	O
else	O
Msg	function
(	O
0	int
,	O
"This window is already logged in."	pointer
)	O
;	O
}	O
else	O
{	O
debug	O
(	O
" try to log out\n"	pointer
)	O
;	O
if	O
(	O
fore	pointer
->	O
w_slot	pointer
==	O
(	O
slot_t	pointer
)	O
-	O
1	int
)	O
Msg	function
(	O
0	int
,	O
"This window is already logged out\n"	pointer
)	O
;	O
else	O
if	O
(	O
fore	pointer
->	O
w_slot	pointer
==	O
(	O
slot_t	pointer
)	O
0	int
)	O
{	O
debug	O
(	O
"What a relief! In fact, it was not logged in\n"	pointer
)	O
;	O
Msg	function
(	O
0	int
,	O
"This window is not logged in."	pointer
)	O
;	O
fore	pointer
->	O
w_slot	pointer
=	O
(	O
slot_t	pointer
)	O
-	O
1	int
;	O
}	O
else	O
{	O
RemoveUtmp	function
(	O
fore	pointer
)	O
;	O
if	O
(	O
fore	pointer
->	O
w_slot	pointer
!=	O
(	O
slot_t	pointer
)	O
-	O
1	int
)	O
Msg	function
(	O
0	int
,	O
"What? Cannot remove Utmp slot?"	pointer
)	O
;	O
else	O
Msg	function
(	O
0	int
,	O
"This window is no longer logged in."	pointer
)	O
;	O
WindowChanged	function
(	O
fore	pointer
,	O
'f'	O
)	O
;	O
}	O
}	O
}	O
void	O
InitUtmp	function
(	O
)	O
{	O
debug1	O
(	O
"InitUtmp testing '%s'...\n"	pointer
,	O
UtmpName	array
)	O
;	O
if	O
(	O
(	O
utmpfd	int
=	O
open	function
(	O
UtmpName	array
,	O
O_RDWR	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EACCES	int
)	O
Msg	function
(	O
errno	O
,	O
"%s"	pointer
,	O
UtmpName	array
)	O
;	O
debug	O
(	O
"InitUtmp failed.\n"	pointer
)	O
;	O
utmpok	int
=	O
0	int
;	O
return	O
;	O
}	O
close	pointer
(	O
utmpfd	int
)	O
;	O
utmpfd	int
=	O
-	O
1	int
;	O
utmpok	int
=	O
1	int
;	O
}	O
void	O
RemoveLoginSlot	function
(	O
)	O
{	O
struct	O
utmp	struct
u	pointer
,	O
*	O
uu	pointer
;	O
ASSERT	O
(	O
display	struct
)	O
;	O
debug	O
(	O
"RemoveLoginSlot: removing your logintty\n"	pointer
)	O
;	O
D_loginslot	O
=	O
TtyNameSlot	function
(	O
D_usertty	O
)	O
;	O
if	O
(	O
D_loginslot	O
==	O
(	O
slot_t	pointer
)	O
0	int
||	O
D_loginslot	O
==	O
(	O
slot_t	pointer
)	O
-	O
1	int
)	O
return	O
;	O
if	O
(	O
!	O
utmpok	int
)	O
{	O
D_loginslot	O
=	O
0	int
;	O
debug	O
(	O
"RemoveLoginSlot: utmpok == 0\n"	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
uu	pointer
=	O
getutslot	function
(	O
D_loginslot	O
)	O
)	O
==	O
0	int
)	O
{	O
debug	O
(	O
"Utmp slot not found -> not removed"	pointer
)	O
;	O
D_loginslot	O
=	O
0	int
;	O
}	O
else	O
{	O
D_utmp_logintty	O
=	O
*	O
uu	pointer
;	O
u	pointer
=	O
*	O
uu	pointer
;	O
makedead	function
(	O
&	O
u	pointer
)	O
;	O
if	O
(	O
pututslot	function
(	O
D_loginslot	O
,	O
&	O
u	pointer
,	O
(	O
char	O
*	O
)	O
0	int
,	O
(	O
struct	O
win	struct
*	O
)	O
0	int
)	O
==	O
0	int
)	O
D_loginslot	O
=	O
0	int
;	O
}	O
UT_CLOSE	O
;	O
}	O
debug1	O
(	O
" slot %d zapped\n"	pointer
,	O
(	O
int	O
)	O
D_loginslot	O
)	O
;	O
if	O
(	O
D_loginslot	O
==	O
(	O
slot_t	pointer
)	O
0	int
)	O
{	O
struct	O
stat	struct
stb	struct
;	O
char	O
*	O
tty	pointer
;	O
debug	O
(	O
"couln't zap slot -> do mesg n\n"	pointer
)	O
;	O
D_loginttymode	O
=	O
0	int
;	O
if	O
(	O
(	O
tty	pointer
=	O
GetPtsPathOrSymlink	function
(	O
D_userfd	O
)	O
)	O
&&	O
stat	struct
(	O
tty	pointer
,	O
&	O
stb	struct
)	O
==	O
0	int
&&	O
(	O
int	O
)	O
stb	struct
.	O
st_uid	int
==	O
real_uid	int
&&	O
!	O
CheckTtyname	function
(	O
tty	pointer
)	O
&&	O
(	O
(	O
int	O
)	O
stb	struct
.	O
st_mode	int
&	O
0777	int
)	O
!=	O
0666	int
)	O
{	O
D_loginttymode	O
=	O
(	O
int	O
)	O
stb	struct
.	O
st_mode	int
&	O
0777	int
;	O
chmod	function
(	O
D_usertty	O
,	O
stb	struct
.	O
st_mode	int
&	O
0600	int
)	O
;	O
}	O
}	O
}	O
void	O
RestoreLoginSlot	function
(	O
)	O
{	O
char	O
*	O
tty	pointer
;	O
debug	O
(	O
"RestoreLoginSlot()\n"	pointer
)	O
;	O
ASSERT	O
(	O
display	struct
)	O
;	O
if	O
(	O
utmpok	int
&&	O
D_loginslot	O
!=	O
(	O
slot_t	pointer
)	O
0	int
&&	O
D_loginslot	O
!=	O
(	O
slot_t	pointer
)	O
-	O
1	int
)	O
{	O
debug1	O
(	O
" logging you in again (slot %#x)\n"	pointer
,	O
(	O
int	O
)	O
D_loginslot	O
)	O
;	O
if	O
(	O
pututslot	function
(	O
D_loginslot	O
,	O
&	O
D_utmp_logintty	O
,	O
D_loginhost	O
,	O
(	O
struct	O
win	struct
*	O
)	O
0	int
)	O
==	O
0	int
)	O
Msg	function
(	O
errno	O
,	O
"Could not write %s"	pointer
,	O
UtmpName	array
)	O
;	O
}	O
UT_CLOSE	O
;	O
D_loginslot	O
=	O
(	O
slot_t	pointer
)	O
0	int
;	O
if	O
(	O
D_loginttymode	O
&&	O
(	O
tty	pointer
=	O
GetPtsPathOrSymlink	function
(	O
D_userfd	O
)	O
)	O
&&	O
!	O
CheckTtyname	function
(	O
tty	pointer
)	O
)	O
chmod	function
(	O
tty	pointer
,	O
D_loginttymode	O
)	O
;	O
}	O
int	O
SetUtmp	function
(	O
wi	pointer
)	O
struct	O
win	struct
*	O
wi	pointer
;	O
{	O
register	O
slot_t	pointer
slot	pointer
;	O
struct	O
utmp	struct
u	pointer
;	O
int	O
saved_ut	int
;	O
char	O
*	O
p	pointer
;	O
char	O
host	array
[	O
sizeof	O
(	O
D_loginhost	O
)	O
+	O
15	int
]	O
;	O
wi	pointer
->	O
w_slot	pointer
=	O
(	O
slot_t	pointer
)	O
0	int
;	O
if	O
(	O
!	O
utmpok	int
||	O
wi	pointer
->	O
w_type	int
!=	O
W_TYPE_PTY	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
slot	pointer
=	O
TtyNameSlot	function
(	O
wi	pointer
->	O
w_tty	array
)	O
)	O
==	O
(	O
slot_t	pointer
)	O
0	int
)	O
{	O
debug1	O
(	O
"SetUtmp failed (tty %s).\n"	pointer
,	O
wi	pointer
->	O
w_tty	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
debug2	O
(	O
"SetUtmp %d will get slot %d...\n"	pointer
,	O
wi	pointer
->	O
w_number	int
,	O
(	O
int	O
)	O
slot	pointer
)	O
;	O
bzero	function
(	O
(	O
char	O
*	O
)	O
&	O
u	pointer
,	O
sizeof	O
(	O
u	pointer
)	O
)	O
;	O
if	O
(	O
(	O
saved_ut	int
=	O
bcmp	function
(	O
(	O
char	O
*	O
)	O
&	O
wi	pointer
->	O
w_savut	struct
,	O
(	O
char	O
*	O
)	O
&	O
u	pointer
,	O
sizeof	O
(	O
u	pointer
)	O
)	O
)	O
)	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
&	O
wi	pointer
->	O
w_savut	struct
,	O
(	O
char	O
*	O
)	O
&	O
u	pointer
,	O
sizeof	O
(	O
u	pointer
)	O
)	O
;	O
if	O
(	O
!	O
saved_ut	int
)	O
makeuser	function
(	O
&	O
u	pointer
,	O
stripdev	function
(	O
wi	pointer
->	O
w_tty	array
)	O
,	O
LoginName	pointer
,	O
wi	pointer
->	O
w_pid	int
)	O
;	O
host	array
[	O
sizeof	O
(	O
host	array
)	O
-	O
15	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
display	struct
)	O
{	O
strncpy	function
(	O
host	array
,	O
D_loginhost	O
,	O
sizeof	O
(	O
host	array
)	O
-	O
15	int
)	O
;	O
if	O
(	O
D_loginslot	O
!=	O
(	O
slot_t	pointer
)	O
0	int
&&	O
D_loginslot	O
!=	O
(	O
slot_t	pointer
)	O
-	O
1	int
&&	O
host	array
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
for	O
(	O
p	pointer
=	O
host	array
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
(	O
*	O
p	pointer
<	O
'0'	O
||	O
*	O
p	pointer
>	O
'9'	O
)	O
&&	O
(	O
*	O
p	pointer
!=	O
'.'	O
)	O
)	O
break	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
host	array
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
||	O
(	O
*	O
p	pointer
==	O
':'	O
&&	O
p	pointer
!=	O
host	array
)	O
)	O
{	O
*	O
p	pointer
=	O
'\0'	O
;	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
strncpy	function
(	O
host	array
+	O
1	int
,	O
stripdev	function
(	O
D_usertty	O
)	O
,	O
sizeof	O
(	O
host	array
)	O
-	O
15	int
-	O
1	int
)	O
;	O
host	array
[	O
0	int
]	O
=	O
':'	O
;	O
}	O
}	O
else	O
strncpy	function
(	O
host	array
,	O
"local"	pointer
,	O
sizeof	O
(	O
host	array
)	O
-	O
15	int
)	O
;	O
sprintf	function
(	O
host	array
+	O
strlen	function
(	O
host	array
)	O
,	O
":S.%d"	pointer
,	O
wi	pointer
->	O
w_number	int
)	O
;	O
debug1	O
(	O
"rlogin hostname: '%s'\n"	pointer
,	O
host	array
)	O
;	O
strncpy	function
(	O
u	pointer
.	O
ut_host	array
,	O
host	array
,	O
sizeof	O
(	O
u	pointer
.	O
ut_host	array
)	O
)	O
;	O
if	O
(	O
pututslot	function
(	O
slot	pointer
,	O
&	O
u	pointer
,	O
host	array
,	O
wi	pointer
)	O
==	O
0	int
)	O
{	O
Msg	function
(	O
errno	O
,	O
"Could not write %s"	pointer
,	O
UtmpName	array
)	O
;	O
UT_CLOSE	O
;	O
return	O
-	O
1	int
;	O
}	O
debug	O
(	O
"SetUtmp successful\n"	pointer
)	O
;	O
wi	pointer
->	O
w_slot	pointer
=	O
slot	pointer
;	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
&	O
u	pointer
,	O
(	O
char	O
*	O
)	O
&	O
wi	pointer
->	O
w_savut	struct
,	O
sizeof	O
(	O
u	pointer
)	O
)	O
;	O
UT_CLOSE	O
;	O
return	O
0	int
;	O
}	O
int	O
RemoveUtmp	function
(	O
wi	pointer
)	O
struct	O
win	struct
*	O
wi	pointer
;	O
{	O
struct	O
utmp	struct
u	pointer
,	O
*	O
uu	pointer
;	O
slot_t	pointer
slot	pointer
;	O
slot	pointer
=	O
wi	pointer
->	O
w_slot	pointer
;	O
debug1	O
(	O
"RemoveUtmp slot=%#x\n"	pointer
,	O
slot	pointer
)	O
;	O
if	O
(	O
!	O
utmpok	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
slot	pointer
==	O
(	O
slot_t	pointer
)	O
0	int
||	O
slot	pointer
==	O
(	O
slot_t	pointer
)	O
-	O
1	int
)	O
{	O
wi	pointer
->	O
w_slot	pointer
=	O
(	O
slot_t	pointer
)	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
bzero	function
(	O
(	O
char	O
*	O
)	O
&	O
u	pointer
,	O
sizeof	O
(	O
u	pointer
)	O
)	O
;	O
if	O
(	O
(	O
uu	pointer
=	O
getutslot	function
(	O
slot	pointer
)	O
)	O
==	O
0	int
)	O
{	O
Msg	function
(	O
0	int
,	O
"Utmp slot not found -> not removed"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
bcopy	function
(	O
(	O
char	O
*	O
)	O
uu	pointer
,	O
(	O
char	O
*	O
)	O
&	O
wi	pointer
->	O
w_savut	struct
,	O
sizeof	O
(	O
wi	pointer
->	O
w_savut	struct
)	O
)	O
;	O
u	pointer
=	O
*	O
uu	pointer
;	O
makedead	function
(	O
&	O
u	pointer
)	O
;	O
if	O
(	O
pututslot	function
(	O
slot	pointer
,	O
&	O
u	pointer
,	O
(	O
char	O
*	O
)	O
0	int
,	O
wi	pointer
)	O
==	O
0	int
)	O
{	O
Msg	function
(	O
errno	O
,	O
"Could not write %s"	pointer
,	O
UtmpName	array
)	O
;	O
UT_CLOSE	O
;	O
return	O
-	O
1	int
;	O
}	O
debug	O
(	O
"RemoveUtmp successfull\n"	pointer
)	O
;	O
wi	pointer
->	O
w_slot	pointer
=	O
(	O
slot_t	pointer
)	O
-	O
1	int
;	O
UT_CLOSE	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
utmp	struct
*	O
getutslot	function
(	O
slot	pointer
)	O
slot_t	pointer
slot	pointer
;	O
{	O
struct	O
utmp	struct
u	pointer
;	O
bzero	function
(	O
(	O
char	O
*	O
)	O
&	O
u	pointer
,	O
sizeof	O
(	O
u	pointer
)	O
)	O
;	O
strncpy	function
(	O
u	pointer
.	O
ut_line	array
,	O
slot	pointer
,	O
sizeof	O
(	O
u	pointer
.	O
ut_line	array
)	O
)	O
;	O
setutent	function
(	O
)	O
;	O
return	O
getutline	function
(	O
&	O
u	pointer
)	O
;	O
}	O
static	O
int	O
pututslot	function
(	O
slot	pointer
,	O
u	pointer
,	O
host	array
,	O
wi	pointer
)	O
slot_t	pointer
slot	pointer
;	O
struct	O
utmp	struct
*	O
u	pointer
;	O
char	O
*	O
host	array
;	O
struct	O
win	struct
*	O
wi	pointer
;	O
{	O
setutent	function
(	O
)	O
;	O
return	O
pututline	function
(	O
u	pointer
)	O
!=	O
0	int
;	O
}	O
static	O
void	O
makedead	function
(	O
u	pointer
)	O
struct	O
utmp	struct
*	O
u	pointer
;	O
{	O
u	pointer
->	O
ut_type	short
=	O
DEAD_PROCESS	int
;	O
u	pointer
->	O
ut_exit	struct
.	O
e_termination	short
=	O
0	int
;	O
u	pointer
->	O
ut_exit	struct
.	O
e_exit	short
=	O
0	int
;	O
u	pointer
->	O
ut_user	array
[	O
0	int
]	O
=	O
0	int
;	O
}	O
static	O
void	O
makeuser	function
(	O
u	pointer
,	O
line	array
,	O
user	pointer
,	O
pid	int
)	O
struct	O
utmp	struct
*	O
u	pointer
;	O
char	O
*	O
line	array
,	O
*	O
user	pointer
;	O
int	O
pid	int
;	O
{	O
time_t	long
now	long
;	O
u	pointer
->	O
ut_type	short
=	O
USER_PROCESS	int
;	O
strncpy	function
(	O
u	pointer
->	O
ut_user	array
,	O
user	pointer
,	O
sizeof	O
(	O
u	pointer
->	O
ut_user	array
)	O
)	O
;	O
strncpy	function
(	O
u	pointer
->	O
ut_id	array
,	O
line	array
+	O
3	int
,	O
sizeof	O
(	O
u	pointer
->	O
ut_id	array
)	O
)	O
;	O
strncpy	function
(	O
u	pointer
->	O
ut_line	array
,	O
line	array
,	O
sizeof	O
(	O
u	pointer
->	O
ut_line	array
)	O
)	O
;	O
u	pointer
->	O
ut_pid	int
=	O
pid	int
;	O
(	O
void	O
)	O
time	struct
(	O
&	O
now	long
)	O
;	O
u	pointer
->	O
ut_time	O
=	O
now	long
;	O
}	O
static	O
slot_t	pointer
TtyNameSlot	function
(	O
nam	pointer
)	O
char	O
*	O
nam	pointer
;	O
{	O
return	O
stripdev	function
(	O
nam	pointer
)	O
;	O
}	O
struct	O
utmp	struct
*	O
xpututline	function
(	O
u	pointer
)	O
struct	O
utmp	struct
*	O
u	pointer
;	O
{	O
struct	O
utmp	struct
*	O
u2	pointer
;	O
pututline	function
(	O
u	pointer
)	O
;	O
setutent	function
(	O
)	O
;	O
u2	pointer
=	O
getutline	function
(	O
u	pointer
)	O
;	O
if	O
(	O
u2	pointer
==	O
0	int
)	O
return	O
u	pointer
->	O
ut_type	short
==	O
DEAD_PROCESS	int
?	O
u	pointer
:	O
0	int
;	O
return	O
u	pointer
->	O
ut_type	short
==	O
u2	pointer
->	O
ut_type	short
?	O
u	pointer
:	O
0	int
;	O
}	O
