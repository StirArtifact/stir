void	O
mpn_toom_interpolate_7pts	O
(	O
mp_ptr	pointer
rp	pointer
,	O
mp_size_t	long
n	long
,	O
enum	O
toom7_flags	enum
flags	enum
,	O
mp_ptr	pointer
w1	pointer
,	O
mp_ptr	pointer
w3	pointer
,	O
mp_ptr	pointer
w4	pointer
,	O
mp_ptr	pointer
w5	pointer
,	O
mp_size_t	long
w6n	long
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_size_t	long
m	long
;	O
mp_limb_t	long
cy	long
;	O
m	long
=	O
2	int
*	O
n	long
+	O
1	int
;	O
ASSERT	O
(	O
w6n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
w6n	long
<=	O
2	int
*	O
n	long
)	O
;	O
mpn_add_n	O
(	O
w5	pointer
,	O
w5	pointer
,	O
w4	pointer
,	O
m	long
)	O
;	O
if	O
(	O
flags	enum
&	O
toom7_w1_neg	int
)	O
{	O
mpn_rsh1add_n	O
(	O
w1	pointer
,	O
w1	pointer
,	O
w4	pointer
,	O
m	long
)	O
;	O
}	O
else	O
{	O
mpn_rsh1sub_n	O
(	O
w1	pointer
,	O
w4	pointer
,	O
w1	pointer
,	O
m	long
)	O
;	O
}	O
mpn_sub	O
(	O
w4	pointer
,	O
w4	pointer
,	O
m	long
,	O
w0	O
,	O
2	int
*	O
n	long
)	O
;	O
mpn_sub_n	O
(	O
w4	pointer
,	O
w4	pointer
,	O
w1	pointer
,	O
m	long
)	O
;	O
ASSERT	O
(	O
!	O
(	O
w4	pointer
[	O
0	int
]	O
&	O
3	int
)	O
)	O
;	O
mpn_rshift	O
(	O
w4	pointer
,	O
w4	pointer
,	O
m	long
,	O
2	int
)	O
;	O
tp	pointer
[	O
w6n	long
]	O
=	O
mpn_lshift	O
(	O
tp	pointer
,	O
w6	O
,	O
w6n	long
,	O
4	int
)	O
;	O
mpn_sub	O
(	O
w4	pointer
,	O
w4	pointer
,	O
m	long
,	O
tp	pointer
,	O
w6n	long
+	O
1	int
)	O
;	O
if	O
(	O
flags	enum
&	O
toom7_w3_neg	int
)	O
{	O
mpn_rsh1add_n	O
(	O
w3	pointer
,	O
w3	pointer
,	O
w2	O
,	O
m	long
)	O
;	O
}	O
else	O
{	O
mpn_rsh1sub_n	O
(	O
w3	pointer
,	O
w2	O
,	O
w3	pointer
,	O
m	long
)	O
;	O
}	O
mpn_sub_n	O
(	O
w2	O
,	O
w2	O
,	O
w3	pointer
,	O
m	long
)	O
;	O
mpn_submul_1	O
(	O
w5	pointer
,	O
w2	O
,	O
m	long
,	O
65	int
)	O
;	O
mpn_sub	O
(	O
w2	O
,	O
w2	O
,	O
m	long
,	O
w6	O
,	O
w6n	long
)	O
;	O
mpn_sub	O
(	O
w2	O
,	O
w2	O
,	O
m	long
,	O
w0	O
,	O
2	int
*	O
n	long
)	O
;	O
mpn_addmul_1	O
(	O
w5	pointer
,	O
w2	O
,	O
m	long
,	O
45	int
)	O
;	O
ASSERT	O
(	O
!	O
(	O
w5	pointer
[	O
0	int
]	O
&	O
1	int
)	O
)	O
;	O
mpn_rshift	O
(	O
w5	pointer
,	O
w5	pointer
,	O
m	long
,	O
1	int
)	O
;	O
mpn_sub_n	O
(	O
w4	pointer
,	O
w4	pointer
,	O
w2	O
,	O
m	long
)	O
;	O
mpn_divexact_by3	O
(	O
w4	pointer
,	O
w4	pointer
,	O
m	long
)	O
;	O
mpn_sub_n	O
(	O
w2	O
,	O
w2	O
,	O
w4	pointer
,	O
m	long
)	O
;	O
mpn_sub_n	O
(	O
w1	pointer
,	O
w5	pointer
,	O
w1	pointer
,	O
m	long
)	O
;	O
mpn_lshift	O
(	O
tp	pointer
,	O
w3	pointer
,	O
m	long
,	O
3	int
)	O
;	O
mpn_sub_n	O
(	O
w5	pointer
,	O
w5	pointer
,	O
tp	pointer
,	O
m	long
)	O
;	O
mpn_divexact_by9	O
(	O
w5	pointer
,	O
w5	pointer
,	O
m	long
)	O
;	O
mpn_sub_n	O
(	O
w3	pointer
,	O
w3	pointer
,	O
w5	pointer
,	O
m	long
)	O
;	O
mpn_divexact_by15	O
(	O
w1	pointer
,	O
w1	pointer
,	O
m	long
)	O
;	O
mpn_add_n	O
(	O
w1	pointer
,	O
w1	pointer
,	O
w5	pointer
,	O
m	long
)	O
;	O
ASSERT	O
(	O
!	O
(	O
w1	pointer
[	O
0	int
]	O
&	O
1	int
)	O
)	O
;	O
mpn_rshift	O
(	O
w1	pointer
,	O
w1	pointer
,	O
m	long
,	O
1	int
)	O
;	O
mpn_sub_n	O
(	O
w5	pointer
,	O
w5	pointer
,	O
w1	pointer
,	O
m	long
)	O
;	O
ASSERT	O
(	O
w1	pointer
[	O
2	int
*	O
n	long
]	O
<	O
2	int
)	O
;	O
ASSERT	O
(	O
w2	O
[	O
2	int
*	O
n	long
]	O
<	O
3	int
)	O
;	O
ASSERT	O
(	O
w3	pointer
[	O
2	int
*	O
n	long
]	O
<	O
4	int
)	O
;	O
ASSERT	O
(	O
w4	pointer
[	O
2	int
*	O
n	long
]	O
<	O
3	int
)	O
;	O
ASSERT	O
(	O
w5	pointer
[	O
2	int
*	O
n	long
]	O
<	O
2	int
)	O
;	O
cy	long
=	O
mpn_add_n	O
(	O
rp	pointer
+	O
n	long
,	O
rp	pointer
+	O
n	long
,	O
w1	pointer
,	O
m	long
)	O
;	O
MPN_INCR_U	O
(	O
w2	O
+	O
n	long
+	O
1	int
,	O
n	long
,	O
cy	long
)	O
;	O
cy	long
=	O
mpn_add_n	O
(	O
rp	pointer
+	O
3	int
*	O
n	long
,	O
rp	pointer
+	O
3	int
*	O
n	long
,	O
w3	pointer
,	O
n	long
)	O
;	O
MPN_INCR_U	O
(	O
w3	pointer
+	O
n	long
,	O
n	long
+	O
1	int
,	O
w2	O
[	O
2	int
*	O
n	long
]	O
+	O
cy	long
)	O
;	O
cy	long
=	O
mpn_add_n	O
(	O
rp	pointer
+	O
4	int
*	O
n	long
,	O
w3	pointer
+	O
n	long
,	O
w4	pointer
,	O
n	long
)	O
;	O
MPN_INCR_U	O
(	O
w4	pointer
+	O
n	long
,	O
n	long
+	O
1	int
,	O
w3	pointer
[	O
2	int
*	O
n	long
]	O
+	O
cy	long
)	O
;	O
cy	long
=	O
mpn_add_n	O
(	O
rp	pointer
+	O
5	int
*	O
n	long
,	O
w4	pointer
+	O
n	long
,	O
w5	pointer
,	O
n	long
)	O
;	O
MPN_INCR_U	O
(	O
w5	pointer
+	O
n	long
,	O
n	long
+	O
1	int
,	O
w4	pointer
[	O
2	int
*	O
n	long
]	O
+	O
cy	long
)	O
;	O
if	O
(	O
w6n	long
>	O
n	long
+	O
1	int
)	O
ASSERT_NOCARRY	O
(	O
mpn_add	O
(	O
rp	pointer
+	O
6	int
*	O
n	long
,	O
rp	pointer
+	O
6	int
*	O
n	long
,	O
w6n	long
,	O
w5	pointer
+	O
n	long
,	O
n	long
+	O
1	int
)	O
)	O
;	O
else	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_add_n	O
(	O
rp	pointer
+	O
6	int
*	O
n	long
,	O
rp	pointer
+	O
6	int
*	O
n	long
,	O
w5	pointer
+	O
n	long
,	O
w6n	long
)	O
)	O
;	O
}	O
}	O
