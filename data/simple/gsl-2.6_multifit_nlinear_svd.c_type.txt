typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
p	int
;	O
gsl_matrix	struct
*	O
U	pointer
;	O
gsl_matrix	struct
*	O
V	pointer
;	O
gsl_vector	struct
*	O
S	pointer
;	O
gsl_vector	struct
*	O
workp	pointer
;	O
double	O
mu	double
;	O
}	O
svd_state_t	struct
;	O
static	O
int	O
svd_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
svd_presolve	function
(	O
const	O
double	O
mu	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
svd_solve	function
(	O
const	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
svd_rcond	function
(	O
double	O
*	O
rcond	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
void	O
*	O
svd_alloc	function
(	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
svd_state_t	struct
*	O
state	pointer
;	O
(	O
void	O
)	O
n	int
;	O
state	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
svd_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate svd state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
U	pointer
=	O
gsl_matrix_alloc	function
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
U	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for U"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
V	pointer
=	O
gsl_matrix_alloc	function
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
V	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for V"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
S	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
S	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for S"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workp	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workp"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
mu	double
=	O
0.0	int
;	O
state	pointer
->	O
n	int
=	O
n	int
;	O
state	pointer
->	O
p	int
=	O
p	int
;	O
return	O
state	pointer
;	O
}	O
static	O
void	O
svd_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
svd_state_t	struct
*	O
state	pointer
=	O
(	O
svd_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
U	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
U	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
V	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
V	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
S	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
S	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workp	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
svd_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
svd_state_t	struct
*	O
state	pointer
=	O
(	O
svd_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
i	long
;	O
gsl_matrix_set_zero	function
(	O
state	pointer
->	O
U	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
state	pointer
->	O
p	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_const_view	struct
Ji	struct
=	O
gsl_matrix_const_column	function
(	O
trust_state	pointer
->	O
J	pointer
,	O
i	long
)	O
;	O
gsl_vector_view	struct
ui	struct
=	O
gsl_matrix_column	function
(	O
state	pointer
->	O
U	pointer
,	O
i	long
)	O
;	O
double	O
di	double
=	O
gsl_vector_get	function
(	O
trust_state	pointer
->	O
diag	pointer
,	O
i	long
)	O
;	O
gsl_blas_daxpy	function
(	O
1.0	int
/	O
di	double
,	O
&	O
Ji	struct
.	O
vector	struct
,	O
&	O
ui	struct
.	O
vector	struct
)	O
;	O
}	O
status	int
=	O
gsl_linalg_SV_decomp	function
(	O
state	pointer
->	O
U	pointer
,	O
state	pointer
->	O
V	pointer
,	O
state	pointer
->	O
S	pointer
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
svd_presolve	function
(	O
const	O
double	O
mu	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
svd_state_t	struct
*	O
state	pointer
=	O
(	O
svd_state_t	struct
*	O
)	O
vstate	pointer
;	O
state	pointer
->	O
mu	double
=	O
mu	double
;	O
(	O
void	O
)	O
vtrust_state	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
svd_solve	function
(	O
const	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
svd_state_t	struct
*	O
state	pointer
=	O
(	O
svd_state_t	struct
*	O
)	O
vstate	pointer
;	O
const	O
size_t	long
p	int
=	O
state	pointer
->	O
p	int
;	O
const	O
double	O
tol	double
=	O
GSL_DBL_EPSILON	int
;	O
const	O
double	O
s0	double
=	O
gsl_vector_get	function
(	O
state	pointer
->	O
S	pointer
,	O
0	int
)	O
;	O
size_t	long
j	long
;	O
gsl_blas_dgemv	function
(	O
CblasTrans	int
,	O
-	O
1.0	int
,	O
state	pointer
->	O
U	pointer
,	O
f	pointer
,	O
0.0	int
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
mu	double
==	O
0.0	int
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
p	int
;	O
++	O
j	long
)	O
{	O
double	O
sj	double
=	O
gsl_vector_get	function
(	O
state	pointer
->	O
S	pointer
,	O
j	long
)	O
;	O
double	O
*	O
ptr	pointer
=	O
gsl_vector_ptr	function
(	O
state	pointer
->	O
workp	pointer
,	O
j	long
)	O
;	O
double	O
alpha	long double
;	O
if	O
(	O
sj	double
<=	O
tol	double
*	O
s0	double
)	O
alpha	long double
=	O
0.0	int
;	O
else	O
alpha	long double
=	O
1.0	int
/	O
sj	double
;	O
*	O
ptr	pointer
*=	O
alpha	long double
;	O
}	O
}	O
else	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
p	int
;	O
++	O
j	long
)	O
{	O
double	O
sj	double
=	O
gsl_vector_get	function
(	O
state	pointer
->	O
S	pointer
,	O
j	long
)	O
;	O
double	O
*	O
ptr	pointer
=	O
gsl_vector_ptr	function
(	O
state	pointer
->	O
workp	pointer
,	O
j	long
)	O
;	O
*	O
ptr	pointer
*=	O
sj	double
/	O
(	O
sj	double
*	O
sj	double
+	O
state	pointer
->	O
mu	double
)	O
;	O
}	O
}	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
state	pointer
->	O
V	pointer
,	O
state	pointer
->	O
workp	pointer
,	O
0.0	int
,	O
x	double
)	O
;	O
gsl_vector_div	function
(	O
x	double
,	O
trust_state	pointer
->	O
diag	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
svd_rcond	function
(	O
double	O
*	O
rcond	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
svd_state_t	struct
*	O
state	pointer
=	O
(	O
svd_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
smax	double
=	O
gsl_vector_get	function
(	O
state	pointer
->	O
S	pointer
,	O
0	int
)	O
;	O
double	O
smin	double
=	O
gsl_vector_get	function
(	O
state	pointer
->	O
S	pointer
,	O
state	pointer
->	O
p	int
-	O
1	int
)	O
;	O
*	O
rcond	pointer
=	O
smin	double
/	O
smax	double
;	O
return	O
status	int
;	O
}	O
static	O
const	O
gsl_multifit_nlinear_solver	struct
svd_type	struct
=	O
{	O
"svd"	pointer
,	O
svd_alloc	function
,	O
svd_init	function
,	O
svd_presolve	function
,	O
svd_solve	function
,	O
svd_rcond	function
,	O
svd_free	function
}	O
;	O
const	O
gsl_multifit_nlinear_solver	struct
*	O
gsl_multifit_nlinear_solver_svd	pointer
=	O
&	O
svd_type	struct
;	O
