char	O
*	O
history_search_delimiter_chars	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
int	O
history_search_internal	function
PARAMS	O
(	O
(	O
const	O
char	O
*	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
history_search_internal	function
(	O
string	pointer
,	O
direction	int
,	O
anchored	int
)	O
const	O
char	O
*	O
string	pointer
;	O
int	O
direction	int
,	O
anchored	int
;	O
{	O
register	O
int	O
i	int
,	O
reverse	int
;	O
register	O
char	O
*	O
line	pointer
;	O
register	O
int	O
line_index	int
;	O
int	O
string_len	int
;	O
HIST_ENTRY	struct
*	O
*	O
the_history	pointer
;	O
i	int
=	O
history_offset	int
;	O
reverse	int
=	O
(	O
direction	int
<	O
0	int
)	O
;	O
if	O
(	O
string	pointer
==	O
0	int
||	O
*	O
string	pointer
==	O
'\0'	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
if	O
(	O
!	O
history_length	int
||	O
(	O
(	O
i	int
>=	O
history_length	int
)	O
&&	O
!	O
reverse	int
)	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
if	O
(	O
reverse	int
&&	O
(	O
i	int
>=	O
history_length	int
)	O
)	O
i	int
=	O
history_length	int
-	O
1	int
;	O
the_history	pointer
=	O
history_list	function
(	O
)	O
;	O
string_len	int
=	O
strlen	function
(	O
string	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
(	O
reverse	int
&&	O
i	int
<	O
0	int
)	O
||	O
(	O
!	O
reverse	int
&&	O
i	int
==	O
history_length	int
)	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
line	pointer
=	O
the_history	pointer
[	O
i	int
]	O
->	O
line	pointer
;	O
line_index	int
=	O
strlen	function
(	O
line	pointer
)	O
;	O
if	O
(	O
string_len	int
>	O
line_index	int
)	O
{	O
NEXT_LINE	O
(	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
anchored	int
==	O
ANCHORED_SEARCH	int
)	O
{	O
if	O
(	O
STREQN	O
(	O
string	pointer
,	O
line	pointer
,	O
string_len	int
)	O
)	O
{	O
history_offset	int
=	O
i	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
NEXT_LINE	O
(	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
reverse	int
)	O
{	O
line_index	int
-=	O
string_len	int
;	O
while	O
(	O
line_index	int
>=	O
0	int
)	O
{	O
if	O
(	O
STREQN	O
(	O
string	pointer
,	O
line	pointer
+	O
line_index	int
,	O
string_len	int
)	O
)	O
{	O
history_offset	int
=	O
i	int
;	O
return	O
(	O
line_index	int
)	O
;	O
}	O
line_index	int
--	O
;	O
}	O
}	O
else	O
{	O
register	O
int	O
limit	int
;	O
limit	int
=	O
line_index	int
-	O
string_len	int
+	O
1	int
;	O
line_index	int
=	O
0	int
;	O
while	O
(	O
line_index	int
<	O
limit	int
)	O
{	O
if	O
(	O
STREQN	O
(	O
string	pointer
,	O
line	pointer
+	O
line_index	int
,	O
string_len	int
)	O
)	O
{	O
history_offset	int
=	O
i	int
;	O
return	O
(	O
line_index	int
)	O
;	O
}	O
line_index	int
++	O
;	O
}	O
}	O
NEXT_LINE	O
(	O
)	O
;	O
}	O
}	O
int	O
history_search	function
(	O
string	pointer
,	O
direction	int
)	O
const	O
char	O
*	O
string	pointer
;	O
int	O
direction	int
;	O
{	O
return	O
(	O
history_search_internal	function
(	O
string	pointer
,	O
direction	int
,	O
NON_ANCHORED_SEARCH	int
)	O
)	O
;	O
}	O
int	O
history_search_prefix	function
(	O
string	pointer
,	O
direction	int
)	O
const	O
char	O
*	O
string	pointer
;	O
int	O
direction	int
;	O
{	O
return	O
(	O
history_search_internal	function
(	O
string	pointer
,	O
direction	int
,	O
ANCHORED_SEARCH	int
)	O
)	O
;	O
}	O
int	O
history_search_pos	function
(	O
string	pointer
,	O
dir	int
,	O
pos	int
)	O
const	O
char	O
*	O
string	pointer
;	O
int	O
dir	int
,	O
pos	int
;	O
{	O
int	O
ret	int
,	O
old	int
;	O
old	int
=	O
where_history	function
(	O
)	O
;	O
history_set_pos	function
(	O
pos	int
)	O
;	O
if	O
(	O
history_search	function
(	O
string	pointer
,	O
dir	int
)	O
==	O
-	O
1	int
)	O
{	O
history_set_pos	function
(	O
old	int
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
ret	int
=	O
where_history	function
(	O
)	O
;	O
history_set_pos	function
(	O
old	int
)	O
;	O
return	O
ret	int
;	O
}	O
