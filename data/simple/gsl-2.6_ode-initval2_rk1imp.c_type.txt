typedef	O
struct	O
{	O
gsl_matrix	struct
*	O
A	pointer
;	O
double	O
*	O
y_onestep	pointer
;	O
double	O
*	O
y_twostep	pointer
;	O
double	O
*	O
ytmp	pointer
;	O
double	O
*	O
y_save	pointer
;	O
double	O
*	O
YZ	array
;	O
double	O
*	O
fYZ	pointer
;	O
gsl_matrix	struct
*	O
dfdy	pointer
;	O
double	O
*	O
dfdt	array
;	O
modnewton1_state_t	struct
*	O
esol	pointer
;	O
double	O
*	O
errlev	pointer
;	O
const	O
gsl_odeiv2_driver	struct
*	O
driver	pointer
;	O
}	O
rk1imp_state_t	struct
;	O
static	O
void	O
*	O
rk1imp_alloc	function
(	O
size_t	long
dim	long
)	O
{	O
rk1imp_state_t	struct
*	O
state	pointer
=	O
(	O
rk1imp_state_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
rk1imp_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for rk1imp_state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
A	pointer
=	O
gsl_matrix_alloc	function
(	O
RK1IMP_STAGE	int
,	O
RK1IMP_STAGE	int
)	O
;	O
if	O
(	O
state	pointer
->	O
A	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for A"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
y_onestep	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
y_onestep	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
state	pointer
->	O
A	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y_onestep"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
y_twostep	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
y_twostep	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
y_onestep	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
A	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y_onestep"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
ytmp	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
ytmp	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
y_twostep	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_onestep	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
A	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ytmp"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
y_save	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
y_save	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_twostep	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_onestep	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
A	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y_save"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
YZ	array
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
RK1IMP_STAGE	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
YZ	array
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
y_save	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_twostep	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_onestep	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
A	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for YZ"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
fYZ	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
RK1IMP_STAGE	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
fYZ	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
YZ	array
)	O
;	O
free	function
(	O
state	pointer
->	O
y_save	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_twostep	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_onestep	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
A	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for fYZ"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
dfdt	array
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
dfdt	array
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
fYZ	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
YZ	array
)	O
;	O
free	function
(	O
state	pointer
->	O
y_save	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_twostep	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_onestep	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
A	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dfdt"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
dfdy	pointer
=	O
gsl_matrix_alloc	function
(	O
dim	long
,	O
dim	long
)	O
;	O
if	O
(	O
state	pointer
->	O
dfdy	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
dfdt	array
)	O
;	O
free	function
(	O
state	pointer
->	O
fYZ	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
YZ	array
)	O
;	O
free	function
(	O
state	pointer
->	O
y_save	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_twostep	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_onestep	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
A	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dfdy"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
esol	pointer
=	O
modnewton1_alloc	function
(	O
dim	long
,	O
RK1IMP_STAGE	int
)	O
;	O
if	O
(	O
state	pointer
->	O
esol	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
state	pointer
->	O
dfdy	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
dfdt	array
)	O
;	O
free	function
(	O
state	pointer
->	O
fYZ	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
YZ	array
)	O
;	O
free	function
(	O
state	pointer
->	O
y_save	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_twostep	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_onestep	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
A	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for esol"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
errlev	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
errlev	pointer
==	O
0	int
)	O
{	O
modnewton1_free	function
(	O
state	pointer
->	O
esol	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
dfdy	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
dfdt	array
)	O
;	O
free	function
(	O
state	pointer
->	O
fYZ	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
YZ	array
)	O
;	O
free	function
(	O
state	pointer
->	O
y_save	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_twostep	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_onestep	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
A	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for errlev"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
driver	pointer
=	O
NULL	O
;	O
return	O
state	pointer
;	O
}	O
static	O
int	O
rk1imp_apply	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
dim	long
,	O
double	O
t	double
,	O
double	O
h	double
,	O
double	O
y	double
[	O
]	O
,	O
double	O
yerr	array
[	O
]	O
,	O
const	O
double	O
dydt_in	array
[	O
]	O
,	O
double	O
dydt_out	array
[	O
]	O
,	O
const	O
gsl_odeiv2_system	struct
*	O
sys	pointer
)	O
{	O
rk1imp_state_t	struct
*	O
state	pointer
=	O
(	O
rk1imp_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
*	O
const	O
y_onestep	pointer
=	O
state	pointer
->	O
y_onestep	pointer
;	O
double	O
*	O
const	O
y_twostep	pointer
=	O
state	pointer
->	O
y_twostep	pointer
;	O
double	O
*	O
const	O
ytmp	pointer
=	O
state	pointer
->	O
ytmp	pointer
;	O
double	O
*	O
const	O
y_save	pointer
=	O
state	pointer
->	O
y_save	pointer
;	O
double	O
*	O
const	O
YZ	array
=	O
state	pointer
->	O
YZ	array
;	O
double	O
*	O
const	O
fYZ	pointer
=	O
state	pointer
->	O
fYZ	pointer
;	O
gsl_matrix	struct
*	O
const	O
dfdy	pointer
=	O
state	pointer
->	O
dfdy	pointer
;	O
double	O
*	O
const	O
dfdt	array
=	O
state	pointer
->	O
dfdt	array
;	O
double	O
*	O
const	O
errlev	pointer
=	O
state	pointer
->	O
errlev	pointer
;	O
const	O
modnewton1_state_t	struct
*	O
esol	pointer
=	O
state	pointer
->	O
esol	pointer
;	O
gsl_matrix	struct
*	O
A	pointer
=	O
state	pointer
->	O
A	pointer
;	O
const	O
double	O
b	double
[	O
]	O
=	O
{	O
1.0	int
}	O
;	O
const	O
double	O
c	pointer
[	O
]	O
=	O
{	O
1.0	int
}	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
1.0	int
)	O
;	O
if	O
(	O
esol	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"no non-linear equation solver speficied"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
state	pointer
->	O
driver	pointer
==	O
NULL	O
)	O
{	O
return	O
GSL_EFAULT	int
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
dydt_in	array
!=	O
NULL	O
)	O
{	O
gsl_odeiv2_control_errlevel	function
(	O
state	pointer
->	O
driver	pointer
->	O
c	pointer
,	O
y	double
[	O
i	long
]	O
,	O
dydt_in	array
[	O
i	long
]	O
,	O
h	double
,	O
i	long
,	O
&	O
errlev	pointer
[	O
i	long
]	O
)	O
;	O
}	O
else	O
{	O
gsl_odeiv2_control_errlevel	function
(	O
state	pointer
->	O
driver	pointer
->	O
c	pointer
,	O
y	double
[	O
i	long
]	O
,	O
0.0	int
,	O
h	double
,	O
i	long
,	O
&	O
errlev	pointer
[	O
i	long
]	O
)	O
;	O
}	O
}	O
}	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_JA_EVAL	O
(	O
sys	pointer
,	O
t	double
,	O
y	double
,	O
dfdy	pointer
->	O
data	pointer
,	O
dfdt	array
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
{	O
int	O
s	pointer
=	O
modnewton1_init	function
(	O
(	O
void	O
*	O
)	O
esol	pointer
,	O
A	pointer
,	O
h	double
,	O
dfdy	pointer
,	O
sys	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
{	O
int	O
s	pointer
=	O
modnewton1_solve	function
(	O
(	O
void	O
*	O
)	O
esol	pointer
,	O
A	pointer
,	O
c	pointer
,	O
t	double
,	O
h	double
,	O
y	double
,	O
sys	pointer
,	O
YZ	array
,	O
errlev	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
c	pointer
[	O
0	int
]	O
*	O
h	double
,	O
YZ	array
,	O
fYZ	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
{	O
int	O
s	pointer
=	O
rksubs	function
(	O
y_onestep	pointer
,	O
h	double
,	O
y	double
,	O
fYZ	pointer
,	O
b	double
,	O
RK1IMP_STAGE	int
,	O
dim	long
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
return	O
s	pointer
;	O
}	O
{	O
int	O
s	pointer
=	O
modnewton1_init	function
(	O
(	O
void	O
*	O
)	O
esol	pointer
,	O
A	pointer
,	O
h	double
/	O
2.0	int
,	O
dfdy	pointer
,	O
sys	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
{	O
int	O
s	pointer
=	O
modnewton1_solve	function
(	O
(	O
void	O
*	O
)	O
esol	pointer
,	O
A	pointer
,	O
c	pointer
,	O
t	double
,	O
h	double
/	O
2.0	int
,	O
y	double
,	O
sys	pointer
,	O
YZ	array
,	O
errlev	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
c	pointer
[	O
0	int
]	O
*	O
h	double
/	O
2.0	int
,	O
YZ	array
,	O
fYZ	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
{	O
int	O
s	pointer
=	O
rksubs	function
(	O
ytmp	pointer
,	O
h	double
/	O
2.0	int
,	O
y	double
,	O
fYZ	pointer
,	O
b	double
,	O
RK1IMP_STAGE	int
,	O
dim	long
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
return	O
s	pointer
;	O
}	O
DBL_MEMCPY	O
(	O
y_save	pointer
,	O
y	double
,	O
dim	long
)	O
;	O
{	O
int	O
s	pointer
=	O
modnewton1_solve	function
(	O
(	O
void	O
*	O
)	O
esol	pointer
,	O
A	pointer
,	O
c	pointer
,	O
t	double
+	O
h	double
/	O
2.0	int
,	O
h	double
/	O
2.0	int
,	O
ytmp	pointer
,	O
sys	pointer
,	O
YZ	array
,	O
errlev	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
h	double
/	O
2.0	int
+	O
c	pointer
[	O
0	int
]	O
*	O
h	double
/	O
2.0	int
,	O
YZ	array
,	O
fYZ	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
{	O
int	O
s	pointer
=	O
rksubs	function
(	O
y_twostep	pointer
,	O
h	double
/	O
2.0	int
,	O
ytmp	pointer
,	O
fYZ	pointer
,	O
b	double
,	O
RK1IMP_STAGE	int
,	O
dim	long
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
y_save	pointer
,	O
dim	long
)	O
;	O
return	O
s	pointer
;	O
}	O
}	O
DBL_MEMCPY	O
(	O
y	double
,	O
y_twostep	pointer
,	O
dim	long
)	O
;	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
yerr	array
[	O
i	long
]	O
=	O
ODEIV_ERR_SAFETY	int
*	O
0.5	int
*	O
fabs	function
(	O
y_twostep	pointer
[	O
i	long
]	O
-	O
y_onestep	pointer
[	O
i	long
]	O
)	O
;	O
}	O
}	O
if	O
(	O
dydt_out	array
!=	O
NULL	O
)	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
h	double
,	O
y	double
,	O
dydt_out	array
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
y_save	pointer
,	O
dim	long
)	O
;	O
return	O
s	pointer
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
rk1imp_set_driver	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_odeiv2_driver	struct
*	O
d	pointer
)	O
{	O
rk1imp_state_t	struct
*	O
state	pointer
=	O
(	O
rk1imp_state_t	struct
*	O
)	O
vstate	pointer
;	O
state	pointer
->	O
driver	pointer
=	O
d	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
rk1imp_reset	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
dim	long
)	O
{	O
rk1imp_state_t	struct
*	O
state	pointer
=	O
(	O
rk1imp_state_t	struct
*	O
)	O
vstate	pointer
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
y_onestep	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
y_twostep	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
ytmp	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
y_save	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
YZ	array
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
fYZ	pointer
,	O
dim	long
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
unsigned	O
int	O
rk1imp_order	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
rk1imp_state_t	struct
*	O
state	pointer
=	O
(	O
rk1imp_state_t	struct
*	O
)	O
vstate	pointer
;	O
state	pointer
=	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
void	O
rk1imp_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
rk1imp_state_t	struct
*	O
state	pointer
=	O
(	O
rk1imp_state_t	struct
*	O
)	O
vstate	pointer
;	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
modnewton1_free	function
(	O
state	pointer
->	O
esol	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
dfdy	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
dfdt	array
)	O
;	O
free	function
(	O
state	pointer
->	O
fYZ	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
YZ	array
)	O
;	O
free	function
(	O
state	pointer
->	O
y_save	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_twostep	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y_onestep	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
A	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
const	O
gsl_odeiv2_step_type	struct
rk1imp_type	struct
=	O
{	O
"rk1imp"	pointer
,	O
1	int
,	O
1	int
,	O
&	O
rk1imp_alloc	function
,	O
&	O
rk1imp_apply	function
,	O
&	O
rk1imp_set_driver	function
,	O
&	O
rk1imp_reset	function
,	O
&	O
rk1imp_order	function
,	O
&	O
rk1imp_free	function
}	O
;	O
const	O
gsl_odeiv2_step_type	struct
*	O
gsl_odeiv2_step_rk1imp	pointer
=	O
&	O
rk1imp_type	struct
;	O
