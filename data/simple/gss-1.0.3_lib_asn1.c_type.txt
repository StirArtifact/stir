static	O
void	O
_gss_asn1_length_der	function
(	O
size_t	long
len	long
,	O
unsigned	O
char	O
*	O
ans	pointer
,	O
size_t	long
*	O
ans_len	pointer
)	O
{	O
size_t	long
k	long
;	O
unsigned	O
char	O
temp	array
[	O
sizeof	O
(	O
len	long
)	O
]	O
;	O
if	O
(	O
len	long
<	O
128	int
)	O
{	O
if	O
(	O
ans	pointer
!=	O
NULL	O
)	O
ans	pointer
[	O
0	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
len	long
;	O
*	O
ans_len	pointer
=	O
1	int
;	O
}	O
else	O
{	O
k	long
=	O
0	int
;	O
while	O
(	O
len	long
)	O
{	O
temp	array
[	O
k	long
++	O
]	O
=	O
len	long
&	O
0xFF	int
;	O
len	long
=	O
len	long
>>	O
8	int
;	O
}	O
*	O
ans_len	pointer
=	O
k	long
+	O
1	int
;	O
if	O
(	O
ans	pointer
!=	O
NULL	O
)	O
{	O
ans	pointer
[	O
0	int
]	O
=	O
(	O
(	O
unsigned	O
char	O
)	O
k	long
&	O
0x7F	int
)	O
+	O
128	int
;	O
while	O
(	O
k	long
--	O
)	O
ans	pointer
[	O
*	O
ans_len	pointer
-	O
1	int
-	O
k	long
]	O
=	O
temp	array
[	O
k	long
]	O
;	O
}	O
}	O
}	O
static	O
size_t	long
_gss_asn1_get_length_der	function
(	O
const	O
char	O
*	O
der	pointer
,	O
size_t	long
der_len	long
,	O
size_t	long
*	O
len	long
)	O
{	O
size_t	long
ans	pointer
;	O
size_t	long
k	long
,	O
punt	long
;	O
*	O
len	long
=	O
0	int
;	O
if	O
(	O
der_len	long
<=	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
!	O
(	O
der	pointer
[	O
0	int
]	O
&	O
128	int
)	O
)	O
{	O
*	O
len	long
=	O
1	int
;	O
return	O
(	O
unsigned	O
char	O
)	O
der	pointer
[	O
0	int
]	O
;	O
}	O
else	O
{	O
k	long
=	O
(	O
unsigned	O
char	O
)	O
der	pointer
[	O
0	int
]	O
&	O
0x7F	int
;	O
punt	long
=	O
1	int
;	O
if	O
(	O
k	long
)	O
{	O
ans	pointer
=	O
0	int
;	O
while	O
(	O
punt	long
<=	O
k	long
&&	O
punt	long
<	O
der_len	long
)	O
{	O
size_t	long
last	long
=	O
ans	pointer
;	O
ans	pointer
=	O
ans	pointer
*	O
256	int
+	O
(	O
unsigned	O
char	O
)	O
der	pointer
[	O
punt	long
++	O
]	O
;	O
if	O
(	O
ans	pointer
<	O
last	long
)	O
return	O
-	O
2	int
;	O
}	O
}	O
else	O
{	O
ans	pointer
=	O
-	O
1	int
;	O
}	O
*	O
len	long
=	O
punt	long
;	O
return	O
ans	pointer
;	O
}	O
}	O
OM_uint32	int
_gss_encapsulate_token_prefix	function
(	O
const	O
char	O
*	O
prefix	pointer
,	O
size_t	long
prefixlen	long
,	O
const	O
char	O
*	O
in	pointer
,	O
size_t	long
inlen	long
,	O
const	O
char	O
*	O
oid	pointer
,	O
OM_uint32	int
oidlen	int
,	O
void	O
*	O
*	O
out	pointer
,	O
size_t	long
*	O
outlen	pointer
)	O
{	O
size_t	long
oidlenlen	long
;	O
size_t	long
asn1len	long
,	O
asn1lenlen	long
;	O
unsigned	O
char	O
*	O
p	pointer
;	O
if	O
(	O
prefix	pointer
==	O
NULL	O
)	O
prefixlen	long
=	O
0	int
;	O
_gss_asn1_length_der	function
(	O
oidlen	int
,	O
NULL	O
,	O
&	O
oidlenlen	long
)	O
;	O
asn1len	long
=	O
1	int
+	O
oidlenlen	long
+	O
oidlen	int
+	O
prefixlen	long
+	O
inlen	long
;	O
_gss_asn1_length_der	function
(	O
asn1len	long
,	O
NULL	O
,	O
&	O
asn1lenlen	long
)	O
;	O
*	O
outlen	pointer
=	O
1	int
+	O
asn1lenlen	long
+	O
asn1len	long
;	O
p	pointer
=	O
*	O
out	pointer
=	O
malloc	function
(	O
*	O
outlen	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
-	O
1	int
;	O
*	O
p	pointer
++	O
=	O
'\x60'	O
;	O
_gss_asn1_length_der	function
(	O
asn1len	long
,	O
p	pointer
,	O
&	O
asn1lenlen	long
)	O
;	O
p	pointer
+=	O
asn1lenlen	long
;	O
*	O
p	pointer
++	O
=	O
'\x06'	O
;	O
_gss_asn1_length_der	function
(	O
oidlen	int
,	O
p	pointer
,	O
&	O
oidlenlen	long
)	O
;	O
p	pointer
+=	O
oidlenlen	long
;	O
memcpy	function
(	O
p	pointer
,	O
oid	pointer
,	O
oidlen	int
)	O
;	O
p	pointer
+=	O
oidlen	int
;	O
if	O
(	O
prefixlen	long
>	O
0	int
)	O
{	O
memcpy	function
(	O
p	pointer
,	O
prefix	pointer
,	O
prefixlen	long
)	O
;	O
p	pointer
+=	O
prefixlen	long
;	O
}	O
memcpy	function
(	O
p	pointer
,	O
in	pointer
,	O
inlen	long
)	O
;	O
return	O
0	int
;	O
}	O
extern	O
OM_uint32	int
gss_encapsulate_token	function
(	O
gss_const_buffer_t	pointer
input_token	pointer
,	O
gss_const_OID	pointer
token_oid	pointer
,	O
gss_buffer_t	pointer
output_token	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
!	O
input_token	pointer
)	O
return	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
if	O
(	O
!	O
token_oid	pointer
)	O
return	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
if	O
(	O
!	O
output_token	pointer
)	O
return	O
GSS_S_CALL_INACCESSIBLE_WRITE	O
;	O
rc	int
=	O
_gss_encapsulate_token_prefix	function
(	O
NULL	O
,	O
0	int
,	O
input_token	pointer
->	O
value	pointer
,	O
input_token	pointer
->	O
length	int
,	O
token_oid	pointer
->	O
elements	pointer
,	O
token_oid	pointer
->	O
length	int
,	O
&	O
output_token	pointer
->	O
value	pointer
,	O
&	O
output_token	pointer
->	O
length	int
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
return	O
GSS_S_FAILURE	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
int	O
_gss_decapsulate_token	function
(	O
const	O
char	O
*	O
in	pointer
,	O
size_t	long
inlen	long
,	O
char	O
*	O
*	O
oid	pointer
,	O
size_t	long
*	O
oidlen	int
,	O
char	O
*	O
*	O
out	pointer
,	O
size_t	long
*	O
outlen	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
asn1lenlen	long
;	O
if	O
(	O
inlen	long
--	O
==	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
*	O
in	pointer
++	O
!=	O
'\x60'	O
)	O
return	O
-	O
1	int
;	O
i	long
=	O
inlen	long
;	O
asn1lenlen	long
=	O
_gss_asn1_get_length_der	function
(	O
in	pointer
,	O
inlen	long
,	O
&	O
i	long
)	O
;	O
if	O
(	O
inlen	long
<	O
i	long
)	O
return	O
-	O
1	int
;	O
inlen	long
-=	O
i	long
;	O
in	pointer
+=	O
i	long
;	O
if	O
(	O
inlen	long
!=	O
asn1lenlen	long
)	O
return	O
-	O
1	int
;	O
if	O
(	O
inlen	long
--	O
==	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
*	O
in	pointer
++	O
!=	O
'\x06'	O
)	O
return	O
-	O
1	int
;	O
i	long
=	O
inlen	long
;	O
asn1lenlen	long
=	O
_gss_asn1_get_length_der	function
(	O
in	pointer
,	O
inlen	long
,	O
&	O
i	long
)	O
;	O
if	O
(	O
inlen	long
<	O
i	long
)	O
return	O
-	O
1	int
;	O
inlen	long
-=	O
i	long
;	O
in	pointer
+=	O
i	long
;	O
if	O
(	O
inlen	long
<	O
asn1lenlen	long
)	O
return	O
-	O
1	int
;	O
*	O
oidlen	int
=	O
asn1lenlen	long
;	O
*	O
oid	pointer
=	O
(	O
char	O
*	O
)	O
in	pointer
;	O
inlen	long
-=	O
asn1lenlen	long
;	O
in	pointer
+=	O
asn1lenlen	long
;	O
if	O
(	O
outlen	pointer
)	O
*	O
outlen	pointer
=	O
inlen	long
;	O
if	O
(	O
out	pointer
)	O
*	O
out	pointer
=	O
(	O
char	O
*	O
)	O
in	pointer
;	O
return	O
0	int
;	O
}	O
OM_uint32	int
gss_decapsulate_token	function
(	O
gss_const_buffer_t	pointer
input_token	pointer
,	O
gss_const_OID	pointer
token_oid	pointer
,	O
gss_buffer_t	pointer
output_token	pointer
)	O
{	O
gss_OID_desc	struct
tmpoid	struct
;	O
char	O
*	O
oid	pointer
=	O
NULL	O
,	O
*	O
out	pointer
=	O
NULL	O
;	O
size_t	long
oidlen	int
=	O
0	int
,	O
outlen	pointer
=	O
0	int
;	O
if	O
(	O
!	O
input_token	pointer
)	O
return	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
if	O
(	O
!	O
token_oid	pointer
)	O
return	O
GSS_S_CALL_INACCESSIBLE_READ	O
;	O
if	O
(	O
!	O
output_token	pointer
)	O
return	O
GSS_S_CALL_INACCESSIBLE_WRITE	O
;	O
if	O
(	O
_gss_decapsulate_token	function
(	O
(	O
char	O
*	O
)	O
input_token	pointer
->	O
value	pointer
,	O
input_token	pointer
->	O
length	int
,	O
&	O
oid	pointer
,	O
&	O
oidlen	int
,	O
&	O
out	pointer
,	O
&	O
outlen	pointer
)	O
!=	O
0	int
)	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
tmpoid	struct
.	O
length	int
=	O
oidlen	int
;	O
tmpoid	struct
.	O
elements	pointer
=	O
oid	pointer
;	O
if	O
(	O
!	O
gss_oid_equal	function
(	O
token_oid	pointer
,	O
&	O
tmpoid	struct
)	O
)	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
output_token	pointer
->	O
length	int
=	O
outlen	pointer
;	O
output_token	pointer
->	O
value	pointer
=	O
malloc	function
(	O
outlen	pointer
)	O
;	O
if	O
(	O
!	O
output_token	pointer
->	O
value	pointer
)	O
return	O
GSS_S_FAILURE	O
;	O
memcpy	function
(	O
output_token	pointer
->	O
value	pointer
,	O
out	pointer
,	O
outlen	pointer
)	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
