extern	O
dev_t	long
curr_dev	long
;	O
extern	O
ino_t	long
curr_ino	long
;	O
typedef	O
POSITION	long
BLOCKNUM	long
;	O
public	O
int	O
ignore_eoi	int
;	O
struct	O
bufnode	struct
{	O
struct	O
bufnode	struct
*	O
next	pointer
,	O
*	O
prev	pointer
;	O
struct	O
bufnode	struct
*	O
hnext	pointer
,	O
*	O
hprev	pointer
;	O
}	O
;	O
struct	O
buf	pointer
{	O
struct	O
bufnode	struct
node	struct
;	O
BLOCKNUM	long
block	long
;	O
unsigned	O
int	O
datasize	int
;	O
unsigned	O
char	O
data	array
[	O
LBUFSIZE	int
]	O
;	O
}	O
;	O
struct	O
filestate	pointer
{	O
struct	O
bufnode	struct
buflist	struct
;	O
struct	O
bufnode	struct
hashtbl	array
[	O
BUFHASH_SIZE	int
]	O
;	O
int	O
file	int
;	O
int	O
flags	int
;	O
POSITION	long
fpos	long
;	O
int	O
nbufs	int
;	O
BLOCKNUM	long
block	long
;	O
unsigned	O
int	O
offset	int
;	O
POSITION	long
fsize	long
;	O
}	O
;	O
static	O
struct	O
filestate	pointer
*	O
thisfile	pointer
;	O
static	O
int	O
ch_ungotchar	int
=	O
-	O
1	int
;	O
static	O
int	O
maxbufs	int
=	O
-	O
1	int
;	O
extern	O
int	O
autobuf	int
;	O
extern	O
int	O
sigs	int
;	O
extern	O
int	O
secure	int
;	O
extern	O
int	O
screen_trashed	int
;	O
extern	O
int	O
follow_mode	int
;	O
extern	O
constant	O
char	O
helpdata	array
[	O
]	O
;	O
extern	O
constant	O
int	O
size_helpdata	int
;	O
extern	O
IFILE	O
curr_ifile	pointer
;	O
extern	O
int	O
logfile	int
;	O
extern	O
char	O
*	O
namelogfile	pointer
;	O
static	O
int	O
ch_addbuf	function
(	O
)	O
;	O
int	O
ch_get	function
(	O
)	O
{	O
struct	O
buf	pointer
*	O
bp	pointer
;	O
struct	O
bufnode	struct
*	O
bn	pointer
;	O
int	O
n	int
;	O
int	O
slept	int
;	O
int	O
h	pointer
;	O
POSITION	long
pos	long
;	O
POSITION	long
len	int
;	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
)	O
return	O
(	O
EOI	O
)	O
;	O
if	O
(	O
ch_bufhead	O
!=	O
END_OF_CHAIN	O
)	O
{	O
bp	pointer
=	O
bufnode_buf	O
(	O
ch_bufhead	O
)	O
;	O
if	O
(	O
ch_block	O
==	O
bp	pointer
->	O
block	long
&&	O
ch_offset	O
<	O
bp	pointer
->	O
datasize	int
)	O
return	O
bp	pointer
->	O
data	array
[	O
ch_offset	O
]	O
;	O
}	O
slept	int
=	O
FALSE	int
;	O
h	pointer
=	O
BUFHASH	O
(	O
ch_block	O
)	O
;	O
FOR_BUFS_IN_CHAIN	O
(	O
h	pointer
,	O
bn	pointer
)	O
{	O
bp	pointer
=	O
bufnode_buf	O
(	O
bn	pointer
)	O
;	O
if	O
(	O
bp	pointer
->	O
block	long
==	O
ch_block	O
)	O
{	O
if	O
(	O
ch_offset	O
>=	O
bp	pointer
->	O
datasize	int
)	O
break	O
;	O
goto	O
found	O
;	O
}	O
}	O
if	O
(	O
bn	pointer
==	O
END_OF_HCHAIN	O
(	O
h	pointer
)	O
)	O
{	O
if	O
(	O
ch_buftail	O
==	O
END_OF_CHAIN	O
||	O
bufnode_buf	O
(	O
ch_buftail	O
)	O
->	O
block	long
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
(	O
autobuf	int
&&	O
!	O
(	O
ch_flags	O
&	O
CH_CANSEEK	int
)	O
)	O
||	O
(	O
maxbufs	int
<	O
0	int
||	O
ch_nbufs	O
<	O
maxbufs	int
)	O
)	O
if	O
(	O
ch_addbuf	function
(	O
)	O
)	O
autobuf	int
=	O
OPT_OFF	int
;	O
}	O
bn	pointer
=	O
ch_buftail	O
;	O
bp	pointer
=	O
bufnode_buf	O
(	O
bn	pointer
)	O
;	O
BUF_HASH_RM	O
(	O
bn	pointer
)	O
;	O
bp	pointer
->	O
block	long
=	O
ch_block	O
;	O
bp	pointer
->	O
datasize	int
=	O
0	int
;	O
BUF_HASH_INS	O
(	O
bn	pointer
,	O
h	pointer
)	O
;	O
}	O
read_more	O
:	O
pos	long
=	O
(	O
ch_block	O
*	O
LBUFSIZE	int
)	O
+	O
bp	pointer
->	O
datasize	int
;	O
if	O
(	O
(	O
len	int
=	O
ch_length	function
(	O
)	O
)	O
!=	O
NULL_POSITION	O
&&	O
pos	long
>=	O
len	int
)	O
return	O
(	O
EOI	O
)	O
;	O
if	O
(	O
pos	long
!=	O
ch_fpos	O
)	O
{	O
if	O
(	O
!	O
(	O
ch_flags	O
&	O
CH_CANSEEK	int
)	O
)	O
return	O
(	O
'?'	O
)	O
;	O
if	O
(	O
lseek	function
(	O
ch_file	O
,	O
(	O
off_t	long
)	O
pos	long
,	O
SEEK_SET	int
)	O
==	O
BAD_LSEEK	O
)	O
{	O
error	function
(	O
"seek error"	pointer
,	O
NULL_PARG	O
)	O
;	O
clear_eol	function
(	O
)	O
;	O
return	O
(	O
EOI	O
)	O
;	O
}	O
ch_fpos	O
=	O
pos	long
;	O
}	O
if	O
(	O
ch_ungotchar	int
!=	O
-	O
1	int
)	O
{	O
bp	pointer
->	O
data	array
[	O
bp	pointer
->	O
datasize	int
]	O
=	O
ch_ungotchar	int
;	O
n	int
=	O
1	int
;	O
ch_ungotchar	int
=	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
ch_flags	O
&	O
CH_HELPFILE	int
)	O
{	O
bp	pointer
->	O
data	array
[	O
bp	pointer
->	O
datasize	int
]	O
=	O
helpdata	array
[	O
ch_fpos	O
]	O
;	O
n	int
=	O
1	int
;	O
}	O
else	O
{	O
n	int
=	O
iread	function
(	O
ch_file	O
,	O
&	O
bp	pointer
->	O
data	array
[	O
bp	pointer
->	O
datasize	int
]	O
,	O
(	O
unsigned	O
int	O
)	O
(	O
LBUFSIZE	int
-	O
bp	pointer
->	O
datasize	int
)	O
)	O
;	O
}	O
if	O
(	O
n	int
==	O
READ_INTR	O
)	O
return	O
(	O
EOI	O
)	O
;	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
{	O
error	function
(	O
"read error"	pointer
,	O
NULL_PARG	O
)	O
;	O
clear_eol	function
(	O
)	O
;	O
}	O
n	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
secure	int
&&	O
logfile	int
>=	O
0	int
&&	O
n	int
>	O
0	int
)	O
write	function
(	O
logfile	int
,	O
(	O
char	O
*	O
)	O
&	O
bp	pointer
->	O
data	array
[	O
bp	pointer
->	O
datasize	int
]	O
,	O
n	int
)	O
;	O
ch_fpos	O
+=	O
n	int
;	O
bp	pointer
->	O
datasize	int
+=	O
n	int
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
ch_fsize	O
=	O
pos	long
;	O
if	O
(	O
ignore_eoi	int
)	O
{	O
if	O
(	O
!	O
slept	int
)	O
{	O
PARG	union
parg	union
;	O
parg	union
.	O
p_string	pointer
=	O
wait_message	function
(	O
)	O
;	O
ierror	function
(	O
"%s"	pointer
,	O
&	O
parg	union
)	O
;	O
}	O
sleep	function
(	O
1	int
)	O
;	O
slept	int
=	O
TRUE	int
;	O
if	O
(	O
follow_mode	int
==	O
FOLLOW_NAME	int
)	O
{	O
struct	O
stat	struct
st	struct
;	O
POSITION	long
curr_pos	long
=	O
ch_tell	function
(	O
)	O
;	O
int	O
r	int
=	O
stat	struct
(	O
get_filename	function
(	O
curr_ifile	pointer
)	O
,	O
&	O
st	struct
)	O
;	O
if	O
(	O
r	int
==	O
0	int
&&	O
(	O
st	struct
.	O
st_ino	long
!=	O
curr_ino	long
||	O
st	struct
.	O
st_dev	long
!=	O
curr_dev	long
||	O
(	O
curr_pos	long
!=	O
NULL_POSITION	O
&&	O
st	struct
.	O
st_size	long
<	O
curr_pos	long
)	O
)	O
)	O
{	O
screen_trashed	int
=	O
2	int
;	O
return	O
(	O
EOI	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
sigs	int
)	O
return	O
(	O
EOI	O
)	O
;	O
}	O
found	O
:	O
if	O
(	O
ch_bufhead	O
!=	O
bn	pointer
)	O
{	O
BUF_RM	O
(	O
bn	pointer
)	O
;	O
BUF_INS_HEAD	O
(	O
bn	pointer
)	O
;	O
BUF_HASH_RM	O
(	O
bn	pointer
)	O
;	O
BUF_HASH_INS	O
(	O
bn	pointer
,	O
h	pointer
)	O
;	O
}	O
if	O
(	O
ch_offset	O
>=	O
bp	pointer
->	O
datasize	int
)	O
goto	O
read_more	O
;	O
return	O
(	O
bp	pointer
->	O
data	array
[	O
ch_offset	O
]	O
)	O
;	O
}	O
public	O
void	O
ch_ungetchar	function
(	O
c	int
)	O
int	O
c	int
;	O
{	O
if	O
(	O
c	int
!=	O
-	O
1	int
&&	O
ch_ungotchar	int
!=	O
-	O
1	int
)	O
error	function
(	O
"ch_ungetchar overrun"	pointer
,	O
NULL_PARG	O
)	O
;	O
ch_ungotchar	int
=	O
c	int
;	O
}	O
public	O
void	O
end_logfile	function
(	O
)	O
{	O
static	O
int	O
tried	int
=	O
FALSE	int
;	O
if	O
(	O
logfile	int
<	O
0	int
)	O
return	O
;	O
if	O
(	O
!	O
tried	int
&&	O
ch_fsize	O
==	O
NULL_POSITION	O
)	O
{	O
tried	int
=	O
TRUE	int
;	O
ierror	function
(	O
"Finishing logfile"	pointer
,	O
NULL_PARG	O
)	O
;	O
while	O
(	O
ch_forw_get	function
(	O
)	O
!=	O
EOI	O
)	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
break	O
;	O
}	O
close	function
(	O
logfile	int
)	O
;	O
logfile	int
=	O
-	O
1	int
;	O
namelogfile	pointer
=	O
NULL	O
;	O
}	O
public	O
void	O
sync_logfile	function
(	O
)	O
{	O
struct	O
buf	pointer
*	O
bp	pointer
;	O
struct	O
bufnode	struct
*	O
bn	pointer
;	O
int	O
warned	int
=	O
FALSE	int
;	O
BLOCKNUM	long
block	long
;	O
BLOCKNUM	long
nblocks	long
;	O
nblocks	long
=	O
(	O
ch_fpos	O
+	O
LBUFSIZE	int
-	O
1	int
)	O
/	O
LBUFSIZE	int
;	O
for	O
(	O
block	long
=	O
0	int
;	O
block	long
<	O
nblocks	long
;	O
block	long
++	O
)	O
{	O
int	O
wrote	int
=	O
FALSE	int
;	O
FOR_BUFS	O
(	O
bn	pointer
)	O
{	O
bp	pointer
=	O
bufnode_buf	O
(	O
bn	pointer
)	O
;	O
if	O
(	O
bp	pointer
->	O
block	long
==	O
block	long
)	O
{	O
write	function
(	O
logfile	int
,	O
(	O
char	O
*	O
)	O
bp	pointer
->	O
data	array
,	O
bp	pointer
->	O
datasize	int
)	O
;	O
wrote	int
=	O
TRUE	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
wrote	int
&&	O
!	O
warned	int
)	O
{	O
error	function
(	O
"Warning: log file is incomplete"	pointer
,	O
NULL_PARG	O
)	O
;	O
warned	int
=	O
TRUE	int
;	O
}	O
}	O
}	O
static	O
int	O
buffered	function
(	O
block	long
)	O
BLOCKNUM	long
block	long
;	O
{	O
struct	O
buf	pointer
*	O
bp	pointer
;	O
struct	O
bufnode	struct
*	O
bn	pointer
;	O
int	O
h	pointer
;	O
h	pointer
=	O
BUFHASH	O
(	O
block	long
)	O
;	O
FOR_BUFS_IN_CHAIN	O
(	O
h	pointer
,	O
bn	pointer
)	O
{	O
bp	pointer
=	O
bufnode_buf	O
(	O
bn	pointer
)	O
;	O
if	O
(	O
bp	pointer
->	O
block	long
==	O
block	long
)	O
return	O
(	O
TRUE	int
)	O
;	O
}	O
return	O
(	O
FALSE	int
)	O
;	O
}	O
public	O
int	O
ch_seek	function
(	O
pos	long
)	O
POSITION	long
pos	long
;	O
{	O
BLOCKNUM	long
new_block	long
;	O
POSITION	long
len	int
;	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
len	int
=	O
ch_length	function
(	O
)	O
;	O
if	O
(	O
pos	long
<	O
ch_zero	O
(	O
)	O
||	O
(	O
len	int
!=	O
NULL_POSITION	O
&&	O
pos	long
>	O
len	int
)	O
)	O
return	O
(	O
1	int
)	O
;	O
new_block	long
=	O
pos	long
/	O
LBUFSIZE	int
;	O
if	O
(	O
!	O
(	O
ch_flags	O
&	O
CH_CANSEEK	int
)	O
&&	O
pos	long
!=	O
ch_fpos	O
&&	O
!	O
buffered	function
(	O
new_block	long
)	O
)	O
{	O
if	O
(	O
ch_fpos	O
>	O
pos	long
)	O
return	O
(	O
1	int
)	O
;	O
while	O
(	O
ch_fpos	O
<	O
pos	long
)	O
{	O
if	O
(	O
ch_forw_get	function
(	O
)	O
==	O
EOI	O
)	O
return	O
(	O
1	int
)	O
;	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
return	O
(	O
1	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
ch_block	O
=	O
new_block	long
;	O
ch_offset	O
=	O
pos	long
%	O
LBUFSIZE	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
public	O
int	O
ch_end_seek	function
(	O
)	O
{	O
POSITION	long
len	int
;	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
ch_flags	O
&	O
CH_CANSEEK	int
)	O
ch_fsize	O
=	O
filesize	function
(	O
ch_file	O
)	O
;	O
len	int
=	O
ch_length	function
(	O
)	O
;	O
if	O
(	O
len	int
!=	O
NULL_POSITION	O
)	O
return	O
(	O
ch_seek	function
(	O
len	int
)	O
)	O
;	O
while	O
(	O
ch_forw_get	function
(	O
)	O
!=	O
EOI	O
)	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
return	O
(	O
1	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
public	O
int	O
ch_end_buffer_seek	function
(	O
)	O
{	O
struct	O
buf	pointer
*	O
bp	pointer
;	O
struct	O
bufnode	struct
*	O
bn	pointer
;	O
POSITION	long
buf_pos	long
;	O
POSITION	long
end_pos	long
;	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
||	O
(	O
ch_flags	O
&	O
CH_CANSEEK	int
)	O
)	O
return	O
(	O
ch_end_seek	function
(	O
)	O
)	O
;	O
end_pos	long
=	O
0	int
;	O
FOR_BUFS	O
(	O
bn	pointer
)	O
{	O
bp	pointer
=	O
bufnode_buf	O
(	O
bn	pointer
)	O
;	O
buf_pos	long
=	O
(	O
bp	pointer
->	O
block	long
*	O
LBUFSIZE	int
)	O
+	O
bp	pointer
->	O
datasize	int
;	O
if	O
(	O
buf_pos	long
>	O
end_pos	long
)	O
end_pos	long
=	O
buf_pos	long
;	O
}	O
return	O
(	O
ch_seek	function
(	O
end_pos	long
)	O
)	O
;	O
}	O
public	O
int	O
ch_beg_seek	function
(	O
)	O
{	O
struct	O
bufnode	struct
*	O
bn	pointer
;	O
struct	O
bufnode	struct
*	O
firstbn	pointer
;	O
if	O
(	O
ch_seek	function
(	O
ch_zero	O
(	O
)	O
)	O
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
firstbn	pointer
=	O
ch_bufhead	O
;	O
if	O
(	O
firstbn	pointer
==	O
END_OF_CHAIN	O
)	O
return	O
(	O
1	int
)	O
;	O
FOR_BUFS	O
(	O
bn	pointer
)	O
{	O
if	O
(	O
bufnode_buf	O
(	O
bn	pointer
)	O
->	O
block	long
<	O
bufnode_buf	O
(	O
firstbn	pointer
)	O
->	O
block	long
)	O
firstbn	pointer
=	O
bn	pointer
;	O
}	O
ch_block	O
=	O
bufnode_buf	O
(	O
firstbn	pointer
)	O
->	O
block	long
;	O
ch_offset	O
=	O
0	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
public	O
POSITION	long
ch_length	function
(	O
)	O
{	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
if	O
(	O
ignore_eoi	int
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
if	O
(	O
ch_flags	O
&	O
CH_HELPFILE	int
)	O
return	O
(	O
size_helpdata	int
)	O
;	O
if	O
(	O
ch_flags	O
&	O
CH_NODATA	int
)	O
return	O
(	O
0	int
)	O
;	O
return	O
(	O
ch_fsize	O
)	O
;	O
}	O
public	O
POSITION	long
ch_tell	function
(	O
)	O
{	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
return	O
(	O
ch_block	O
*	O
LBUFSIZE	int
)	O
+	O
ch_offset	O
;	O
}	O
public	O
int	O
ch_forw_get	function
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
)	O
return	O
(	O
EOI	O
)	O
;	O
c	int
=	O
ch_get	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOI	O
)	O
return	O
(	O
EOI	O
)	O
;	O
if	O
(	O
ch_offset	O
<	O
LBUFSIZE	int
-	O
1	int
)	O
ch_offset	O
++	O
;	O
else	O
{	O
ch_block	O
++	O
;	O
ch_offset	O
=	O
0	int
;	O
}	O
return	O
(	O
c	int
)	O
;	O
}	O
public	O
int	O
ch_back_get	function
(	O
)	O
{	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
)	O
return	O
(	O
EOI	O
)	O
;	O
if	O
(	O
ch_offset	O
>	O
0	int
)	O
ch_offset	O
--	O
;	O
else	O
{	O
if	O
(	O
ch_block	O
<=	O
0	int
)	O
return	O
(	O
EOI	O
)	O
;	O
if	O
(	O
!	O
(	O
ch_flags	O
&	O
CH_CANSEEK	int
)	O
&&	O
!	O
buffered	function
(	O
ch_block	O
-	O
1	int
)	O
)	O
return	O
(	O
EOI	O
)	O
;	O
ch_block	O
--	O
;	O
ch_offset	O
=	O
LBUFSIZE	int
-	O
1	int
;	O
}	O
return	O
(	O
ch_get	function
(	O
)	O
)	O
;	O
}	O
public	O
void	O
ch_setbufspace	function
(	O
bufspace	int
)	O
int	O
bufspace	int
;	O
{	O
if	O
(	O
bufspace	int
<	O
0	int
)	O
maxbufs	int
=	O
-	O
1	int
;	O
else	O
{	O
maxbufs	int
=	O
(	O
(	O
bufspace	int
*	O
1024	int
)	O
+	O
LBUFSIZE	int
-	O
1	int
)	O
/	O
LBUFSIZE	int
;	O
if	O
(	O
maxbufs	int
<	O
1	int
)	O
maxbufs	int
=	O
1	int
;	O
}	O
}	O
public	O
void	O
ch_flush	function
(	O
)	O
{	O
struct	O
bufnode	struct
*	O
bn	pointer
;	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
!	O
(	O
ch_flags	O
&	O
CH_CANSEEK	int
)	O
)	O
{	O
ch_fsize	O
=	O
NULL_POSITION	O
;	O
return	O
;	O
}	O
FOR_BUFS	O
(	O
bn	pointer
)	O
{	O
bufnode_buf	O
(	O
bn	pointer
)	O
->	O
block	long
=	O
-	O
1	int
;	O
}	O
ch_fsize	O
=	O
filesize	function
(	O
ch_file	O
)	O
;	O
ch_fpos	O
=	O
0	int
;	O
ch_block	O
=	O
0	int
;	O
ch_offset	O
=	O
0	int
;	O
if	O
(	O
ch_fsize	O
==	O
0	int
)	O
{	O
ch_fsize	O
=	O
NULL_POSITION	O
;	O
ch_flags	O
&=	O
~	O
CH_CANSEEK	int
;	O
}	O
if	O
(	O
lseek	function
(	O
ch_file	O
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
==	O
BAD_LSEEK	O
)	O
{	O
error	function
(	O
"seek error to 0"	pointer
,	O
NULL_PARG	O
)	O
;	O
}	O
}	O
static	O
int	O
ch_addbuf	function
(	O
)	O
{	O
struct	O
buf	pointer
*	O
bp	pointer
;	O
struct	O
bufnode	struct
*	O
bn	pointer
;	O
bp	pointer
=	O
(	O
struct	O
buf	pointer
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
buf	pointer
)	O
)	O
;	O
if	O
(	O
bp	pointer
==	O
NULL	O
)	O
return	O
(	O
1	int
)	O
;	O
ch_nbufs	O
++	O
;	O
bp	pointer
->	O
block	long
=	O
-	O
1	int
;	O
bn	pointer
=	O
&	O
bp	pointer
->	O
node	struct
;	O
BUF_INS_TAIL	O
(	O
bn	pointer
)	O
;	O
BUF_HASH_INS	O
(	O
bn	pointer
,	O
0	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
init_hashtbl	function
(	O
)	O
{	O
int	O
h	pointer
;	O
for	O
(	O
h	pointer
=	O
0	int
;	O
h	pointer
<	O
BUFHASH_SIZE	int
;	O
h	pointer
++	O
)	O
{	O
thisfile	pointer
->	O
hashtbl	array
[	O
h	pointer
]	O
.	O
hnext	pointer
=	O
END_OF_HCHAIN	O
(	O
h	pointer
)	O
;	O
thisfile	pointer
->	O
hashtbl	array
[	O
h	pointer
]	O
.	O
hprev	pointer
=	O
END_OF_HCHAIN	O
(	O
h	pointer
)	O
;	O
}	O
}	O
static	O
void	O
ch_delbufs	function
(	O
)	O
{	O
struct	O
bufnode	struct
*	O
bn	pointer
;	O
while	O
(	O
ch_bufhead	O
!=	O
END_OF_CHAIN	O
)	O
{	O
bn	pointer
=	O
ch_bufhead	O
;	O
BUF_RM	O
(	O
bn	pointer
)	O
;	O
free	function
(	O
bufnode_buf	O
(	O
bn	pointer
)	O
)	O
;	O
}	O
ch_nbufs	O
=	O
0	int
;	O
init_hashtbl	function
(	O
)	O
;	O
}	O
public	O
int	O
seekable	function
(	O
f	int
)	O
int	O
f	int
;	O
{	O
return	O
(	O
lseek	function
(	O
f	int
,	O
(	O
off_t	long
)	O
1	int
,	O
SEEK_SET	int
)	O
!=	O
BAD_LSEEK	O
)	O
;	O
}	O
public	O
void	O
ch_set_eof	function
(	O
)	O
{	O
ch_fsize	O
=	O
ch_fpos	O
;	O
}	O
public	O
void	O
ch_init	function
(	O
f	int
,	O
flags	int
)	O
int	O
f	int
;	O
int	O
flags	int
;	O
{	O
thisfile	pointer
=	O
(	O
struct	O
filestate	pointer
*	O
)	O
get_filestate	function
(	O
curr_ifile	pointer
)	O
;	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
)	O
{	O
thisfile	pointer
=	O
(	O
struct	O
filestate	pointer
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
filestate	pointer
)	O
)	O
;	O
thisfile	pointer
->	O
buflist	struct
.	O
next	pointer
=	O
thisfile	pointer
->	O
buflist	struct
.	O
prev	pointer
=	O
END_OF_CHAIN	O
;	O
thisfile	pointer
->	O
nbufs	int
=	O
0	int
;	O
thisfile	pointer
->	O
flags	int
=	O
flags	int
;	O
thisfile	pointer
->	O
fpos	long
=	O
0	int
;	O
thisfile	pointer
->	O
block	long
=	O
0	int
;	O
thisfile	pointer
->	O
offset	int
=	O
0	int
;	O
thisfile	pointer
->	O
file	int
=	O
-	O
1	int
;	O
thisfile	pointer
->	O
fsize	long
=	O
NULL_POSITION	O
;	O
init_hashtbl	function
(	O
)	O
;	O
if	O
(	O
(	O
flags	int
&	O
CH_CANSEEK	int
)	O
&&	O
!	O
seekable	function
(	O
f	int
)	O
)	O
ch_flags	O
&=	O
~	O
CH_CANSEEK	int
;	O
set_filestate	function
(	O
curr_ifile	pointer
,	O
(	O
void	O
*	O
)	O
thisfile	pointer
)	O
;	O
}	O
if	O
(	O
thisfile	pointer
->	O
file	int
==	O
-	O
1	int
)	O
thisfile	pointer
->	O
file	int
=	O
f	int
;	O
ch_flush	function
(	O
)	O
;	O
}	O
public	O
void	O
ch_close	function
(	O
)	O
{	O
int	O
keepstate	int
=	O
FALSE	int
;	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
(	O
ch_flags	O
&	O
(	O
CH_CANSEEK	int
|	O
CH_POPENED	int
|	O
CH_HELPFILE	int
)	O
)	O
&&	O
!	O
(	O
ch_flags	O
&	O
CH_KEEPOPEN	int
)	O
)	O
{	O
ch_delbufs	function
(	O
)	O
;	O
}	O
else	O
keepstate	int
=	O
TRUE	int
;	O
if	O
(	O
!	O
(	O
ch_flags	O
&	O
CH_KEEPOPEN	int
)	O
)	O
{	O
if	O
(	O
!	O
(	O
ch_flags	O
&	O
(	O
CH_POPENED	int
|	O
CH_HELPFILE	int
)	O
)	O
)	O
close	function
(	O
ch_file	O
)	O
;	O
ch_file	O
=	O
-	O
1	int
;	O
}	O
else	O
keepstate	int
=	O
TRUE	int
;	O
if	O
(	O
!	O
keepstate	int
)	O
{	O
free	function
(	O
thisfile	pointer
)	O
;	O
thisfile	pointer
=	O
NULL	O
;	O
set_filestate	function
(	O
curr_ifile	pointer
,	O
(	O
void	O
*	O
)	O
NULL	O
)	O
;	O
}	O
}	O
public	O
int	O
ch_getflags	function
(	O
)	O
{	O
if	O
(	O
thisfile	pointer
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
return	O
(	O
ch_flags	O
)	O
;	O
}	O
