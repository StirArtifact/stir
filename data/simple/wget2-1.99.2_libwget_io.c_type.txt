static	O
ssize_t	long
__read	function
(	O
const	O
void	O
*	O
f	pointer
,	O
char	O
*	O
dst	pointer
,	O
size_t	long
len	long
)	O
{	O
FILE	struct
*	O
fp	pointer
=	O
(	O
FILE	struct
*	O
)	O
f	pointer
;	O
ssize_t	long
ret	long
=	O
(	O
ssize_t	long
)	O
fread	function
(	O
dst	pointer
,	O
1	int
,	O
len	long
,	O
fp	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
return	O
-	O
1	int
;	O
return	O
ret	long
;	O
}	O
static	O
ssize_t	long
__readfd	function
(	O
const	O
void	O
*	O
f	pointer
,	O
char	O
*	O
dst	pointer
,	O
size_t	long
len	long
)	O
{	O
int	O
*	O
fd	array
=	O
(	O
int	O
*	O
)	O
f	pointer
;	O
return	O
read	function
(	O
*	O
fd	array
,	O
dst	pointer
,	O
len	long
)	O
;	O
}	O
static	O
ssize_t	long
_getline_internal	function
(	O
char	O
*	O
*	O
buf	pointer
,	O
size_t	long
*	O
bufsize	long
,	O
const	O
void	O
*	O
f	pointer
,	O
ssize_t	long
(	O
*	O
reader	pointer
)	O
(	O
const	O
void	O
*	O
f	pointer
,	O
char	O
*	O
dst	pointer
,	O
size_t	long
len	long
)	O
)	O
{	O
ssize_t	long
nbytes	long
=	O
0	int
;	O
size_t	long
*	O
sizep	pointer
,	O
length	long
=	O
0	int
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
buf	pointer
||	O
!	O
bufsize	long
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
*	O
buf	pointer
||	O
!	O
*	O
bufsize	long
)	O
{	O
if	O
(	O
!	O
(	O
p	pointer
=	O
wget_malloc	function
(	O
10240	int
)	O
)	O
)	O
return	O
WGET_E_MEMORY	int
;	O
*	O
buf	pointer
=	O
p	pointer
;	O
*	O
bufsize	long
=	O
10240	int
;	O
sizep	pointer
=	O
(	O
size_t	long
*	O
)	O
(	O
void	O
*	O
)	O
(	O
*	O
buf	pointer
+	O
*	O
bufsize	long
-	O
2	int
*	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
sizep	pointer
[	O
0	int
]	O
=	O
sizep	pointer
[	O
1	int
]	O
=	O
0	int
;	O
}	O
else	O
{	O
sizep	pointer
=	O
(	O
size_t	long
*	O
)	O
(	O
void	O
*	O
)	O
(	O
*	O
buf	pointer
+	O
*	O
bufsize	long
-	O
2	int
*	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
if	O
(	O
sizep	pointer
[	O
1	int
]	O
)	O
{	O
if	O
(	O
(	O
p	pointer
=	O
memchr	function
(	O
*	O
buf	pointer
+	O
sizep	pointer
[	O
0	int
]	O
,	O
'\n'	O
,	O
sizep	pointer
[	O
1	int
]	O
)	O
)	O
)	O
{	O
*	O
p	pointer
++	O
=	O
0	int
;	O
length	long
=	O
p	pointer
-	O
(	O
*	O
buf	pointer
+	O
sizep	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
sizep	pointer
[	O
0	int
]	O
)	O
memmove	function
(	O
*	O
buf	pointer
,	O
*	O
buf	pointer
+	O
sizep	pointer
[	O
0	int
]	O
,	O
length	long
)	O
;	O
sizep	pointer
[	O
0	int
]	O
+=	O
length	long
;	O
sizep	pointer
[	O
1	int
]	O
-=	O
length	long
;	O
return	O
length	long
-	O
1	int
;	O
}	O
length	long
=	O
sizep	pointer
[	O
1	int
]	O
;	O
memmove	function
(	O
*	O
buf	pointer
,	O
*	O
buf	pointer
+	O
sizep	pointer
[	O
0	int
]	O
,	O
length	long
+	O
1	int
)	O
;	O
sizep	pointer
[	O
0	int
]	O
=	O
sizep	pointer
[	O
1	int
]	O
=	O
0	int
;	O
}	O
else	O
*	O
*	O
buf	pointer
=	O
0	int
;	O
}	O
while	O
(	O
(	O
nbytes	long
=	O
reader	pointer
(	O
f	pointer
,	O
*	O
buf	pointer
+	O
length	long
,	O
*	O
bufsize	long
-	O
2	int
*	O
sizeof	O
(	O
size_t	long
)	O
-	O
length	long
-	O
1	int
)	O
)	O
>	O
0	int
)	O
{	O
length	long
+=	O
nbytes	long
;	O
if	O
(	O
(	O
p	pointer
=	O
memchr	function
(	O
*	O
buf	pointer
+	O
length	long
-	O
nbytes	long
,	O
'\n'	O
,	O
nbytes	long
)	O
)	O
)	O
{	O
*	O
p	pointer
++	O
=	O
0	int
;	O
sizep	pointer
[	O
0	int
]	O
=	O
p	pointer
-	O
*	O
buf	pointer
;	O
sizep	pointer
[	O
1	int
]	O
=	O
length	long
-	O
sizep	pointer
[	O
0	int
]	O
;	O
return	O
sizep	pointer
[	O
0	int
]	O
-	O
1	int
;	O
}	O
if	O
(	O
length	long
>=	O
*	O
bufsize	long
-	O
2	int
*	O
sizeof	O
(	O
size_t	long
)	O
-	O
1	int
)	O
{	O
ptrdiff_t	long
off	float
=	O
(	O
(	O
char	O
*	O
)	O
sizep	pointer
)	O
-	O
*	O
buf	pointer
;	O
size_t	long
*	O
old	pointer
;	O
if	O
(	O
!	O
(	O
p	pointer
=	O
wget_realloc	function
(	O
*	O
buf	pointer
,	O
*	O
bufsize	long
=	O
*	O
bufsize	long
*	O
2	int
)	O
)	O
)	O
return	O
WGET_E_MEMORY	int
;	O
*	O
buf	pointer
=	O
p	pointer
;	O
old	pointer
=	O
(	O
size_t	long
*	O
)	O
(	O
void	O
*	O
)	O
(	O
*	O
buf	pointer
+	O
off	float
)	O
;	O
sizep	pointer
=	O
(	O
size_t	long
*	O
)	O
(	O
void	O
*	O
)	O
(	O
*	O
buf	pointer
+	O
*	O
bufsize	long
-	O
2	int
*	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
sizep	pointer
[	O
0	int
]	O
=	O
old	pointer
[	O
0	int
]	O
;	O
sizep	pointer
[	O
1	int
]	O
=	O
old	pointer
[	O
1	int
]	O
;	O
}	O
}	O
if	O
(	O
nbytes	long
==	O
-	O
1	int
&&	O
errno	O
!=	O
EAGAIN	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EBADF	int
)	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to read, error %d\n"	pointer
)	O
,	O
__func__	O
,	O
errno	O
)	O
;	O
}	O
if	O
(	O
length	long
)	O
{	O
if	O
(	O
(	O
*	O
buf	pointer
)	O
[	O
length	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
(	O
*	O
buf	pointer
)	O
[	O
length	long
-	O
1	int
]	O
=	O
0	int
;	O
else	O
(	O
*	O
buf	pointer
)	O
[	O
length	long
]	O
=	O
0	int
;	O
return	O
length	long
;	O
}	O
else	O
*	O
*	O
buf	pointer
=	O
0	int
;	O
return	O
-	O
1	int
;	O
}	O
ssize_t	long
wget_fdgetline	function
(	O
char	O
*	O
*	O
buf	pointer
,	O
size_t	long
*	O
bufsize	long
,	O
int	O
fd	array
)	O
{	O
return	O
_getline_internal	function
(	O
buf	pointer
,	O
bufsize	long
,	O
(	O
void	O
*	O
)	O
&	O
fd	array
,	O
__readfd	function
)	O
;	O
}	O
ssize_t	long
wget_getline	function
(	O
char	O
*	O
*	O
buf	pointer
,	O
size_t	long
*	O
bufsize	long
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
return	O
_getline_internal	function
(	O
buf	pointer
,	O
bufsize	long
,	O
(	O
void	O
*	O
)	O
fp	pointer
,	O
__read	function
)	O
;	O
}	O
int	O
wget_ready_2_transfer	function
(	O
int	O
fd	array
,	O
int	O
timeout	int
,	O
int	O
mode	int
)	O
{	O
int	O
rc	int
=	O
-	O
1	int
;	O
struct	O
pollfd	struct
pollfd	struct
;	O
pollfd	struct
.	O
fd	array
=	O
fd	array
;	O
pollfd	struct
.	O
events	short
=	O
0	int
;	O
pollfd	struct
.	O
revents	short
=	O
0	int
;	O
if	O
(	O
mode	int
&	O
WGET_IO_READABLE	int
)	O
pollfd	struct
.	O
events	short
|=	O
POLLIN	int
;	O
if	O
(	O
mode	int
&	O
WGET_IO_WRITABLE	int
)	O
pollfd	struct
.	O
events	short
|=	O
POLLOUT	int
;	O
if	O
(	O
(	O
rc	int
=	O
poll	function
(	O
&	O
pollfd	struct
,	O
1	int
,	O
timeout	int
)	O
)	O
>	O
0	int
)	O
{	O
rc	int
=	O
0	int
;	O
if	O
(	O
pollfd	struct
.	O
revents	short
&	O
POLLIN	int
)	O
rc	int
|=	O
WGET_IO_READABLE	int
;	O
if	O
(	O
pollfd	struct
.	O
revents	short
&	O
POLLOUT	int
)	O
rc	int
|=	O
WGET_IO_WRITABLE	int
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
wget_ready_2_read	function
(	O
int	O
fd	array
,	O
int	O
timeout	int
)	O
{	O
return	O
wget_ready_2_transfer	function
(	O
fd	array
,	O
timeout	int
,	O
WGET_IO_READABLE	int
)	O
>	O
0	int
;	O
}	O
int	O
wget_ready_2_write	function
(	O
int	O
fd	array
,	O
int	O
timeout	int
)	O
{	O
return	O
wget_ready_2_transfer	function
(	O
fd	array
,	O
timeout	int
,	O
WGET_IO_WRITABLE	int
)	O
>	O
0	int
;	O
}	O
char	O
*	O
wget_read_file	function
(	O
const	O
char	O
*	O
fname	pointer
,	O
size_t	long
*	O
size	pointer
)	O
{	O
ssize_t	long
nread	long
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
fname	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
strcmp	function
(	O
fname	pointer
,	O
"-"	pointer
)	O
)	O
{	O
int	O
fd	array
;	O
if	O
(	O
(	O
fd	array
=	O
open	function
(	O
fname	pointer
,	O
O_RDONLY	int
|	O
O_BINARY	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
struct	O
stat	struct
st	struct
;	O
if	O
(	O
fstat	function
(	O
fd	array
,	O
&	O
st	struct
)	O
==	O
0	int
)	O
{	O
off_t	long
total	long
=	O
0	int
;	O
if	O
(	O
!	O
(	O
buf	pointer
=	O
wget_malloc	function
(	O
st	struct
.	O
st_size	long
+	O
1	int
)	O
)	O
)	O
{	O
close	function
(	O
fd	array
)	O
;	O
return	O
NULL	O
;	O
}	O
while	O
(	O
total	long
<	O
st	struct
.	O
st_size	long
&&	O
(	O
nread	long
=	O
read	function
(	O
fd	array
,	O
buf	pointer
+	O
total	long
,	O
st	struct
.	O
st_size	long
-	O
total	long
)	O
)	O
>	O
0	int
)	O
{	O
total	long
+=	O
nread	long
;	O
}	O
buf	pointer
[	O
total	long
]	O
=	O
0	int
;	O
if	O
(	O
size	pointer
)	O
*	O
size	pointer
=	O
total	long
;	O
if	O
(	O
total	long
!=	O
st	struct
.	O
st_size	long
)	O
error_printf	O
(	O
_	O
(	O
"WARNING: Size of %s changed from %lld to %lld while reading. This may lead to unwanted results !\n"	pointer
)	O
,	O
fname	pointer
,	O
(	O
long	O
long	O
)	O
st	struct
.	O
st_size	long
,	O
(	O
long	O
long	O
)	O
total	long
)	O
;	O
}	O
else	O
error_printf	O
(	O
_	O
(	O
"Failed to fstat %s\n"	pointer
)	O
,	O
fname	pointer
)	O
;	O
close	function
(	O
fd	array
)	O
;	O
}	O
else	O
error_printf	O
(	O
_	O
(	O
"Failed to open %s\n"	pointer
)	O
,	O
fname	pointer
)	O
;	O
}	O
else	O
{	O
char	O
tmp	array
[	O
4096	int
]	O
;	O
wget_buffer	struct
buffer	struct
;	O
wget_buffer_init	function
(	O
&	O
buffer	struct
,	O
NULL	O
,	O
4096	int
)	O
;	O
while	O
(	O
(	O
nread	long
=	O
read	function
(	O
STDIN_FILENO	int
,	O
tmp	array
,	O
sizeof	O
(	O
tmp	array
)	O
)	O
)	O
>	O
0	int
)	O
{	O
wget_buffer_memcat	function
(	O
&	O
buffer	struct
,	O
tmp	array
,	O
nread	long
)	O
;	O
}	O
if	O
(	O
size	pointer
)	O
*	O
size	pointer
=	O
buffer	struct
.	O
length	long
;	O
buf	pointer
=	O
buffer	struct
.	O
data	pointer
;	O
buffer	struct
.	O
data	pointer
=	O
NULL	O
;	O
wget_buffer_deinit	function
(	O
&	O
buffer	struct
)	O
;	O
}	O
return	O
buf	pointer
;	O
}	O
int	O
wget_update_file	function
(	O
const	O
char	O
*	O
fname	pointer
,	O
wget_update_load_fn	function
*	O
load_func	pointer
,	O
wget_update_load_fn	function
*	O
save_func	pointer
,	O
void	O
*	O
context	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
const	O
char	O
*	O
tmpdir	pointer
,	O
*	O
basename	function
;	O
int	O
lockfd	int
;	O
char	O
tmpfile	function
[	O
strlen	function
(	O
fname	pointer
)	O
+	O
6	int
+	O
1	int
]	O
;	O
wget_snprintf	function
(	O
tmpfile	function
,	O
sizeof	O
(	O
tmpfile	function
)	O
,	O
"%sXXXXXX"	pointer
,	O
fname	pointer
)	O
;	O
if	O
(	O
!	O
(	O
tmpdir	pointer
=	O
getenv	function
(	O
"TMPDIR"	pointer
)	O
)	O
&&	O
!	O
(	O
tmpdir	pointer
=	O
getenv	function
(	O
"TMP"	pointer
)	O
)	O
&&	O
!	O
(	O
tmpdir	pointer
=	O
getenv	function
(	O
"TEMP"	pointer
)	O
)	O
&&	O
!	O
(	O
tmpdir	pointer
=	O
getenv	function
(	O
"TEMPDIR"	pointer
)	O
)	O
)	O
tmpdir	pointer
=	O
"/tmp"	pointer
;	O
basename	function
=	O
base_name	function
(	O
fname	pointer
)	O
;	O
if	O
(	O
!	O
basename	function
)	O
return	O
WGET_E_MEMORY	int
;	O
size_t	long
tmplen	long
=	O
strlen	function
(	O
tmpdir	pointer
)	O
;	O
char	O
*	O
lockfile	pointer
;	O
if	O
(	O
!	O
tmplen	long
)	O
lockfile	pointer
=	O
wget_aprintf	function
(	O
"%s_lck_%u"	pointer
,	O
basename	function
,	O
(	O
unsigned	O
)	O
getuid	function
(	O
)	O
)	O
;	O
else	O
lockfile	pointer
=	O
wget_aprintf	function
(	O
"%s/%s_lck_%u"	pointer
,	O
tmpdir	pointer
,	O
basename	function
,	O
(	O
unsigned	O
)	O
getuid	function
(	O
)	O
)	O
;	O
xfree	O
(	O
basename	function
)	O
;	O
if	O
(	O
!	O
lockfile	pointer
)	O
return	O
WGET_E_MEMORY	int
;	O
if	O
(	O
(	O
lockfd	int
=	O
open	function
(	O
lockfile	pointer
,	O
O_WRONLY	int
|	O
O_CREAT	int
,	O
S_IRUSR	O
|	O
S_IWUSR	O
|	O
S_IRGRP	O
|	O
S_IROTH	O
)	O
)	O
==	O
-	O
1	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to create '%s' (%d)\n"	pointer
)	O
,	O
lockfile	pointer
,	O
errno	O
)	O
;	O
xfree	O
(	O
lockfile	pointer
)	O
;	O
return	O
WGET_E_OPEN	int
;	O
}	O
if	O
(	O
flock	struct
(	O
lockfd	int
,	O
LOCK_EX	int
)	O
==	O
-	O
1	int
)	O
{	O
close	function
(	O
lockfd	int
)	O
;	O
error_printf	O
(	O
_	O
(	O
"Failed to lock '%s' (%d)\n"	pointer
)	O
,	O
lockfile	pointer
,	O
errno	O
)	O
;	O
xfree	O
(	O
lockfile	pointer
)	O
;	O
return	O
WGET_E_IO	int
;	O
}	O
xfree	O
(	O
lockfile	pointer
)	O
;	O
if	O
(	O
load_func	pointer
)	O
{	O
if	O
(	O
!	O
(	O
fp	pointer
=	O
fopen	function
(	O
fname	pointer
,	O
"r"	pointer
)	O
)	O
)	O
{	O
if	O
(	O
errno	O
!=	O
ENOENT	int
)	O
{	O
close	function
(	O
lockfd	int
)	O
;	O
error_printf	O
(	O
_	O
(	O
"Failed to read open '%s' (%d)\n"	pointer
)	O
,	O
fname	pointer
,	O
errno	O
)	O
;	O
return	O
WGET_E_OPEN	int
;	O
}	O
}	O
if	O
(	O
fp	pointer
)	O
{	O
if	O
(	O
load_func	pointer
(	O
context	pointer
,	O
fp	pointer
)	O
)	O
{	O
fclose	function
(	O
fp	pointer
)	O
;	O
close	function
(	O
lockfd	int
)	O
;	O
return	O
WGET_E_UNKNOWN	int
;	O
}	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
}	O
if	O
(	O
save_func	pointer
)	O
{	O
int	O
fd	array
;	O
if	O
(	O
(	O
fd	array
=	O
mkstemp	function
(	O
tmpfile	function
)	O
)	O
==	O
-	O
1	int
)	O
{	O
close	function
(	O
lockfd	int
)	O
;	O
error_printf	O
(	O
_	O
(	O
"Failed to open tmpfile '%s' (%d)\n"	pointer
)	O
,	O
tmpfile	function
,	O
errno	O
)	O
;	O
return	O
WGET_E_OPEN	int
;	O
}	O
if	O
(	O
!	O
(	O
fp	pointer
=	O
fdopen	function
(	O
fd	array
,	O
"w"	pointer
)	O
)	O
)	O
{	O
unlink	function
(	O
tmpfile	function
)	O
;	O
close	function
(	O
fd	array
)	O
;	O
close	function
(	O
lockfd	int
)	O
;	O
error_printf	O
(	O
_	O
(	O
"Failed to write open '%s' (%d)\n"	pointer
)	O
,	O
tmpfile	function
,	O
errno	O
)	O
;	O
return	O
WGET_E_OPEN	int
;	O
}	O
if	O
(	O
save_func	pointer
(	O
context	pointer
,	O
fp	pointer
)	O
)	O
{	O
unlink	function
(	O
tmpfile	function
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
close	function
(	O
lockfd	int
)	O
;	O
return	O
WGET_E_UNKNOWN	int
;	O
}	O
if	O
(	O
fclose	function
(	O
fp	pointer
)	O
)	O
{	O
unlink	function
(	O
tmpfile	function
)	O
;	O
close	function
(	O
lockfd	int
)	O
;	O
error_printf	O
(	O
_	O
(	O
"Failed to write/close '%s' (%d)\n"	pointer
)	O
,	O
tmpfile	function
,	O
errno	O
)	O
;	O
return	O
WGET_E_IO	int
;	O
}	O
if	O
(	O
rename	function
(	O
tmpfile	function
,	O
fname	pointer
)	O
==	O
-	O
1	int
)	O
{	O
close	function
(	O
lockfd	int
)	O
;	O
error_printf	O
(	O
_	O
(	O
"Failed to rename '%s' to '%s' (%d)\n"	pointer
)	O
,	O
tmpfile	function
,	O
fname	pointer
,	O
errno	O
)	O
;	O
error_printf	O
(	O
_	O
(	O
"Take manually care for '%s'\n"	pointer
)	O
,	O
tmpfile	function
)	O
;	O
return	O
WGET_E_IO	int
;	O
}	O
debug_printf	O
(	O
"Successfully updated '%s'.\n"	pointer
,	O
fname	pointer
)	O
;	O
}	O
close	function
(	O
lockfd	int
)	O
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
int	O
wget_truncate	function
(	O
const	O
char	O
*	O
path	pointer
,	O
off_t	long
length	long
)	O
{	O
int	O
fd	array
,	O
rc	int
;	O
if	O
(	O
!	O
path	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
(	O
fd	array
=	O
open	function
(	O
path	pointer
,	O
O_RDWR	int
|	O
O_BINARY	int
)	O
)	O
==	O
-	O
1	int
)	O
return	O
WGET_E_OPEN	int
;	O
rc	int
=	O
ftruncate	function
(	O
fd	array
,	O
length	long
)	O
;	O
close	function
(	O
fd	array
)	O
;	O
return	O
rc	int
?	O
WGET_E_IO	int
:	O
WGET_E_SUCCESS	int
;	O
}	O
