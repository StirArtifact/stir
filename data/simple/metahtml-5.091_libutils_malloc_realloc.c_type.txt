void	O
__malloc_safe_bcopy	function
(	O
afrom	pointer
,	O
ato	pointer
,	O
size	long
)	O
__ptr_t	O
afrom	pointer
;	O
__ptr_t	O
ato	pointer
;	O
__malloc_size_t	O
size	long
;	O
{	O
char	O
*	O
from	pointer
=	O
afrom	pointer
,	O
*	O
to	pointer
=	O
ato	pointer
;	O
if	O
(	O
size	long
<=	O
0	int
||	O
from	pointer
==	O
to	pointer
)	O
return	O
;	O
if	O
(	O
to	pointer
<	O
from	pointer
||	O
from	pointer
+	O
size	long
<=	O
to	pointer
)	O
bcopy	function
(	O
from	pointer
,	O
to	pointer
,	O
size	long
)	O
;	O
else	O
{	O
register	O
char	O
*	O
endf	pointer
=	O
from	pointer
+	O
size	long
;	O
register	O
char	O
*	O
endt	pointer
=	O
to	pointer
+	O
size	long
;	O
if	O
(	O
to	pointer
-	O
from	pointer
<	O
64	int
)	O
{	O
do	O
*	O
--	O
endt	pointer
=	O
*	O
--	O
endf	pointer
;	O
while	O
(	O
endf	pointer
!=	O
from	pointer
)	O
;	O
}	O
else	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
endt	pointer
-=	O
(	O
to	pointer
-	O
from	pointer
)	O
;	O
endf	pointer
-=	O
(	O
to	pointer
-	O
from	pointer
)	O
;	O
if	O
(	O
endt	pointer
<	O
to	pointer
)	O
break	O
;	O
bcopy	function
(	O
endf	pointer
,	O
endt	pointer
,	O
to	pointer
-	O
from	pointer
)	O
;	O
}	O
bcopy	function
(	O
from	pointer
,	O
to	pointer
,	O
endt	pointer
-	O
from	pointer
)	O
;	O
}	O
}	O
}	O
extern	O
void	O
__malloc_safe_bcopy	function
__P	O
(	O
(	O
__ptr_t	O
,	O
__ptr_t	O
,	O
__malloc_size_t	O
)	O
)	O
;	O
__ptr_t	O
(	O
*	O
__realloc_hook	pointer
)	O
__P	O
(	O
(	O
__ptr_t	O
__ptr	pointer
,	O
__malloc_size_t	O
__size	long
)	O
)	O
;	O
__ptr_t	O
_realloc_internal	function
(	O
ptr	pointer
,	O
size	long
)	O
__ptr_t	O
ptr	pointer
;	O
__malloc_size_t	O
size	long
;	O
{	O
__ptr_t	O
result	pointer
;	O
int	O
type	int
;	O
__malloc_size_t	O
block	long
,	O
blocks	long
,	O
oldlimit	long
;	O
if	O
(	O
size	long
==	O
0	int
)	O
{	O
_free_internal	function
(	O
ptr	pointer
)	O
;	O
return	O
_malloc_internal	function
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ptr	pointer
==	O
NULL	O
)	O
return	O
_malloc_internal	function
(	O
size	long
)	O
;	O
block	long
=	O
BLOCK	O
(	O
ptr	pointer
)	O
;	O
type	int
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
type	int
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
size	long
<=	O
BLOCKSIZE	O
/	O
2	int
)	O
{	O
result	pointer
=	O
_malloc_internal	function
(	O
size	long
)	O
;	O
if	O
(	O
result	pointer
!=	O
NULL	O
)	O
{	O
memcpy	O
(	O
result	pointer
,	O
ptr	pointer
,	O
size	long
)	O
;	O
_free_internal	function
(	O
ptr	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
}	O
blocks	long
=	O
BLOCKIFY	O
(	O
size	long
)	O
;	O
if	O
(	O
blocks	long
<	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
)	O
{	O
_heapinfo	pointer
[	O
block	long
+	O
blocks	long
]	O
.	O
busy	struct
.	O
type	int
=	O
0	int
;	O
_heapinfo	pointer
[	O
block	long
+	O
blocks	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
-	O
blocks	long
;	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
=	O
blocks	long
;	O
++	O
_chunks_used	long
;	O
_free_internal	function
(	O
ADDRESS	O
(	O
block	long
+	O
blocks	long
)	O
)	O
;	O
result	pointer
=	O
ptr	pointer
;	O
}	O
else	O
if	O
(	O
blocks	long
==	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
)	O
result	pointer
=	O
ptr	pointer
;	O
else	O
{	O
blocks	long
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
;	O
oldlimit	long
=	O
_heaplimit	long
;	O
_heaplimit	long
=	O
0	int
;	O
_free_internal	function
(	O
ptr	pointer
)	O
;	O
_heaplimit	long
=	O
oldlimit	long
;	O
result	pointer
=	O
_malloc_internal	function
(	O
size	long
)	O
;	O
if	O
(	O
result	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
_heapindex	long
==	O
block	long
)	O
(	O
void	O
)	O
_malloc_internal	function
(	O
blocks	long
*	O
BLOCKSIZE	O
)	O
;	O
else	O
{	O
__ptr_t	O
previous	pointer
=	O
_malloc_internal	function
(	O
(	O
block	long
-	O
_heapindex	long
)	O
*	O
BLOCKSIZE	O
)	O
;	O
(	O
void	O
)	O
_malloc_internal	function
(	O
blocks	long
*	O
BLOCKSIZE	O
)	O
;	O
_free_internal	function
(	O
previous	pointer
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
if	O
(	O
ptr	pointer
!=	O
result	pointer
)	O
memmove	O
(	O
result	pointer
,	O
ptr	pointer
,	O
blocks	long
*	O
BLOCKSIZE	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
if	O
(	O
size	long
>	O
(	O
__malloc_size_t	O
)	O
(	O
1	int
<<	O
(	O
type	int
-	O
1	int
)	O
)	O
&&	O
size	long
<=	O
(	O
__malloc_size_t	O
)	O
(	O
1	int
<<	O
type	int
)	O
)	O
result	pointer
=	O
ptr	pointer
;	O
else	O
{	O
result	pointer
=	O
_malloc_internal	function
(	O
size	long
)	O
;	O
if	O
(	O
result	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memcpy	O
(	O
result	pointer
,	O
ptr	pointer
,	O
min	O
(	O
size	long
,	O
(	O
__malloc_size_t	O
)	O
1	int
<<	O
type	int
)	O
)	O
;	O
_free_internal	function
(	O
ptr	pointer
)	O
;	O
}	O
break	O
;	O
}	O
return	O
result	pointer
;	O
}	O
__ptr_t	O
realloc	function
(	O
ptr	pointer
,	O
size	long
)	O
__ptr_t	O
ptr	pointer
;	O
__malloc_size_t	O
size	long
;	O
{	O
if	O
(	O
!	O
__malloc_initialized	int
&&	O
!	O
__malloc_initialize	function
(	O
)	O
)	O
return	O
NULL	O
;	O
return	O
(	O
__realloc_hook	pointer
!=	O
NULL	O
?	O
*	O
__realloc_hook	pointer
:	O
_realloc_internal	function
)	O
(	O
ptr	pointer
,	O
size	long
)	O
;	O
}	O
