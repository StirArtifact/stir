static	O
void	O
usage	function
(	O
FILE	struct
*	O
,	O
int	O
)	O
ATTRIBUTE_NORETURN	O
;	O
const	O
char	O
*	O
whoami	pointer
;	O
const	O
char	O
*	O
function_mapping_file	pointer
;	O
static	O
const	O
char	O
*	O
external_symbol_table	pointer
;	O
const	O
char	O
*	O
a_out_name	pointer
=	O
A_OUTNAME	pointer
;	O
long	O
hz	long
=	O
HZ_WRONG	int
;	O
int	O
debug_level	int
=	O
0	int
;	O
int	O
output_style	int
=	O
0	int
;	O
int	O
output_width	int
=	O
80	int
;	O
bfd_boolean	int
bsd_style_output	int
=	O
FALSE	int
;	O
bfd_boolean	int
demangle	int
=	O
TRUE	int
;	O
bfd_boolean	int
ignore_direct_calls	int
=	O
FALSE	int
;	O
bfd_boolean	int
ignore_static_funcs	int
=	O
FALSE	int
;	O
bfd_boolean	int
ignore_zeros	int
=	O
TRUE	int
;	O
bfd_boolean	int
line_granularity	int
=	O
FALSE	int
;	O
bfd_boolean	int
print_descriptions	int
=	O
TRUE	int
;	O
bfd_boolean	int
print_path	int
=	O
FALSE	int
;	O
bfd_boolean	int
ignore_non_functions	int
=	O
FALSE	int
;	O
bfd_boolean	int
inline_file_names	int
=	O
FALSE	int
;	O
File_Format	enum
file_format	enum
=	O
FF_AUTO	int
;	O
bfd_boolean	int
first_output	int
=	O
TRUE	int
;	O
char	O
copyright	array
[	O
]	O
=	O
"@(#) Copyright (c) 1983 Regents of the University of California.\n All rights reserved.\n"	pointer
;	O
static	O
char	O
*	O
gmon_name	pointer
=	O
GMONNAME	pointer
;	O
static	O
char	O
*	O
default_excluded_list	array
[	O
]	O
=	O
{	O
"_gprof_mcount"	pointer
,	O
"mcount"	pointer
,	O
"_mcount"	pointer
,	O
"__mcount"	pointer
,	O
"__mcount_internal"	pointer
,	O
"__mcleanup"	pointer
,	O
0	int
}	O
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"line"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'l'	O
}	O
,	O
{	O
"no-static"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'a'	O
}	O
,	O
{	O
"ignore-non-functions"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'D'	O
}	O
,	O
{	O
"external-symbol-table"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'S'	O
}	O
,	O
{	O
"annotated-source"	pointer
,	O
optional_argument	int
,	O
0	int
,	O
'A'	O
}	O
,	O
{	O
"no-annotated-source"	pointer
,	O
optional_argument	int
,	O
0	int
,	O
'J'	O
}	O
,	O
{	O
"flat-profile"	pointer
,	O
optional_argument	int
,	O
0	int
,	O
'p'	O
}	O
,	O
{	O
"no-flat-profile"	pointer
,	O
optional_argument	int
,	O
0	int
,	O
'P'	O
}	O
,	O
{	O
"graph"	pointer
,	O
optional_argument	int
,	O
0	int
,	O
'q'	O
}	O
,	O
{	O
"no-graph"	pointer
,	O
optional_argument	int
,	O
0	int
,	O
'Q'	O
}	O
,	O
{	O
"exec-counts"	pointer
,	O
optional_argument	int
,	O
0	int
,	O
'C'	O
}	O
,	O
{	O
"no-exec-counts"	pointer
,	O
optional_argument	int
,	O
0	int
,	O
'Z'	O
}	O
,	O
{	O
"function-ordering"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'r'	O
}	O
,	O
{	O
"file-ordering"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'R'	O
}	O
,	O
{	O
"file-info"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'i'	O
}	O
,	O
{	O
"sum"	pointer
,	O
no_argument	int
,	O
0	int
,	O
's'	O
}	O
,	O
{	O
"all-lines"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'x'	O
}	O
,	O
{	O
"demangle"	pointer
,	O
optional_argument	int
,	O
0	int
,	O
OPTION_DEMANGLE	O
}	O
,	O
{	O
"no-demangle"	pointer
,	O
no_argument	int
,	O
0	int
,	O
OPTION_NO_DEMANGLE	O
}	O
,	O
{	O
"directory-path"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'I'	O
}	O
,	O
{	O
"display-unused-functions"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'z'	O
}	O
,	O
{	O
"inline-file-names"	pointer
,	O
no_argument	int
,	O
0	int
,	O
OPTION_INLINE_FILE_NAMES	O
}	O
,	O
{	O
"min-count"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'm'	O
}	O
,	O
{	O
"print-path"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'L'	O
}	O
,	O
{	O
"separate-files"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'y'	O
}	O
,	O
{	O
"static-call-graph"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'c'	O
}	O
,	O
{	O
"table-length"	pointer
,	O
required_argument	int
,	O
0	int
,	O
't'	O
}	O
,	O
{	O
"time"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'n'	O
}	O
,	O
{	O
"no-time"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'N'	O
}	O
,	O
{	O
"width"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'w'	O
}	O
,	O
{	O
""	pointer
,	O
required_argument	int
,	O
0	int
,	O
'e'	O
}	O
,	O
{	O
""	pointer
,	O
required_argument	int
,	O
0	int
,	O
'E'	O
}	O
,	O
{	O
""	pointer
,	O
required_argument	int
,	O
0	int
,	O
'f'	O
}	O
,	O
{	O
""	pointer
,	O
required_argument	int
,	O
0	int
,	O
'F'	O
}	O
,	O
{	O
""	pointer
,	O
required_argument	int
,	O
0	int
,	O
'k'	O
}	O
,	O
{	O
"brief"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'b'	O
}	O
,	O
{	O
"debug"	pointer
,	O
optional_argument	int
,	O
0	int
,	O
'd'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'h'	O
}	O
,	O
{	O
"file-format"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'O'	O
}	O
,	O
{	O
"traditional"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'T'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'v'	O
}	O
,	O
{	O
0	int
,	O
no_argument	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
void	O
usage	function
(	O
FILE	struct
*	O
stream	pointer
,	O
int	O
status	int
)	O
{	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"Usage: %s [-[abcDhilLrsTvwxyz]] [-[ACeEfFJnNOpPqQRStZ][name]] [-I dirs]\n	[-d[num]] [-k from/to] [-m min-count] [-t table-length]\n	[--[no-]annotated-source[=name]] [--[no-]exec-counts[=name]]\n	[--[no-]flat-profile[=name]] [--[no-]graph[=name]]\n	[--[no-]time=name] [--all-lines] [--brief] [--debug[=level]]\n	[--function-ordering] [--file-ordering] [--inline-file-names]\n	[--directory-path=dirs] [--display-unused-functions]\n	[--file-format=name] [--file-info] [--help] [--line] [--min-count=n]\n	[--no-static] [--print-path] [--separate-files]\n	[--static-call-graph] [--sum] [--table-length=len] [--traditional]\n	[--version] [--width=n] [--ignore-non-functions]\n	[--demangle[=STYLE]] [--no-demangle] [--external-symbol-table=name] [@FILE]\n	[image-file] [profile-file...]\n"	pointer
)	O
,	O
whoami	pointer
)	O
;	O
if	O
(	O
REPORT_BUGS_TO	pointer
[	O
0	int
]	O
&&	O
status	int
==	O
0	int
)	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"Report bugs to %s\n"	pointer
)	O
,	O
REPORT_BUGS_TO	pointer
)	O
;	O
done	function
(	O
status	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
*	O
sp	pointer
,	O
*	O
str	pointer
;	O
Sym	struct
*	O
*	O
cg	struct
=	O
0	int
;	O
int	O
ch	int
,	O
user_specified	int
=	O
0	int
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
whoami	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
xmalloc_set_program_name	function
(	O
whoami	pointer
)	O
;	O
expandargv	function
(	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
;	O
while	O
(	O
(	O
ch	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"aA::bBcC::d::De:E:f:F:hiI:J::k:lLm:n:N:O:p::P::q::Q::rR:sS:t:Tvw:xyzZ::"	pointer
,	O
long_options	array
,	O
0	int
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
ch	int
)	O
{	O
case	O
'a'	O
:	O
ignore_static_funcs	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'A'	O
:	O
if	O
(	O
optarg	pointer
)	O
{	O
sym_id_add	function
(	O
optarg	pointer
,	O
INCL_ANNO	int
)	O
;	O
}	O
output_style	int
|=	O
STYLE_ANNOTATED_SOURCE	O
;	O
user_specified	int
|=	O
STYLE_ANNOTATED_SOURCE	O
;	O
break	O
;	O
case	O
'b'	O
:	O
print_descriptions	int
=	O
FALSE	int
;	O
break	O
;	O
case	O
'B'	O
:	O
output_style	int
|=	O
STYLE_CALL_GRAPH	O
;	O
user_specified	int
|=	O
STYLE_CALL_GRAPH	O
;	O
break	O
;	O
case	O
'c'	O
:	O
ignore_direct_calls	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'C'	O
:	O
if	O
(	O
optarg	pointer
)	O
{	O
sym_id_add	function
(	O
optarg	pointer
,	O
INCL_EXEC	int
)	O
;	O
}	O
output_style	int
|=	O
STYLE_EXEC_COUNTS	O
;	O
user_specified	int
|=	O
STYLE_EXEC_COUNTS	O
;	O
break	O
;	O
case	O
'd'	O
:	O
if	O
(	O
optarg	pointer
)	O
{	O
debug_level	int
|=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
debug_level	int
|=	O
ANYDEBUG	O
;	O
}	O
else	O
{	O
debug_level	int
=	O
~	O
0	int
;	O
}	O
DBG	O
(	O
ANYDEBUG	O
,	O
printf	function
(	O
"[main] debug-level=0x%x\n"	pointer
,	O
debug_level	int
)	O
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
ignore_non_functions	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'E'	O
:	O
sym_id_add	function
(	O
optarg	pointer
,	O
EXCL_TIME	int
)	O
;	O
case	O
'e'	O
:	O
sym_id_add	function
(	O
optarg	pointer
,	O
EXCL_GRAPH	int
)	O
;	O
break	O
;	O
case	O
'F'	O
:	O
sym_id_add	function
(	O
optarg	pointer
,	O
INCL_TIME	int
)	O
;	O
case	O
'f'	O
:	O
sym_id_add	function
(	O
optarg	pointer
,	O
INCL_GRAPH	int
)	O
;	O
break	O
;	O
case	O
'g'	O
:	O
sym_id_add	function
(	O
optarg	pointer
,	O
EXCL_FLAT	int
)	O
;	O
break	O
;	O
case	O
'G'	O
:	O
sym_id_add	function
(	O
optarg	pointer
,	O
INCL_FLAT	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
stdout	pointer
,	O
0	int
)	O
;	O
case	O
'i'	O
:	O
output_style	int
|=	O
STYLE_GMON_INFO	O
;	O
user_specified	int
|=	O
STYLE_GMON_INFO	O
;	O
break	O
;	O
case	O
'I'	O
:	O
search_list_append	function
(	O
&	O
src_search_list	struct
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'J'	O
:	O
if	O
(	O
optarg	pointer
)	O
{	O
sym_id_add	function
(	O
optarg	pointer
,	O
EXCL_ANNO	int
)	O
;	O
output_style	int
|=	O
STYLE_ANNOTATED_SOURCE	O
;	O
}	O
else	O
{	O
output_style	int
&=	O
~	O
STYLE_ANNOTATED_SOURCE	O
;	O
}	O
user_specified	int
|=	O
STYLE_ANNOTATED_SOURCE	O
;	O
break	O
;	O
case	O
'k'	O
:	O
sym_id_add	function
(	O
optarg	pointer
,	O
EXCL_ARCS	int
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
line_granularity	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'L'	O
:	O
print_path	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'm'	O
:	O
bb_min_calls	long
=	O
(	O
unsigned	O
long	O
)	O
strtoul	function
(	O
optarg	pointer
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
sym_id_add	function
(	O
optarg	pointer
,	O
INCL_TIME	int
)	O
;	O
break	O
;	O
case	O
'N'	O
:	O
sym_id_add	function
(	O
optarg	pointer
,	O
EXCL_TIME	int
)	O
;	O
break	O
;	O
case	O
'O'	O
:	O
switch	O
(	O
optarg	pointer
[	O
0	int
]	O
)	O
{	O
case	O
'a'	O
:	O
file_format	enum
=	O
FF_AUTO	int
;	O
break	O
;	O
case	O
'm'	O
:	O
file_format	enum
=	O
FF_MAGIC	int
;	O
break	O
;	O
case	O
'b'	O
:	O
file_format	enum
=	O
FF_BSD	int
;	O
break	O
;	O
case	O
'4'	O
:	O
file_format	enum
=	O
FF_BSD44	int
;	O
break	O
;	O
case	O
'p'	O
:	O
file_format	enum
=	O
FF_PROF	int
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: unknown file format %s\n"	pointer
)	O
,	O
optarg	pointer
,	O
whoami	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'p'	O
:	O
if	O
(	O
optarg	pointer
)	O
{	O
sym_id_add	function
(	O
optarg	pointer
,	O
INCL_FLAT	int
)	O
;	O
}	O
output_style	int
|=	O
STYLE_FLAT_PROFILE	O
;	O
user_specified	int
|=	O
STYLE_FLAT_PROFILE	O
;	O
break	O
;	O
case	O
'P'	O
:	O
if	O
(	O
optarg	pointer
)	O
{	O
sym_id_add	function
(	O
optarg	pointer
,	O
EXCL_FLAT	int
)	O
;	O
output_style	int
|=	O
STYLE_FLAT_PROFILE	O
;	O
}	O
else	O
{	O
output_style	int
&=	O
~	O
STYLE_FLAT_PROFILE	O
;	O
}	O
user_specified	int
|=	O
STYLE_FLAT_PROFILE	O
;	O
break	O
;	O
case	O
'q'	O
:	O
if	O
(	O
optarg	pointer
)	O
{	O
if	O
(	O
strchr	function
(	O
optarg	pointer
,	O
'/'	O
)	O
)	O
{	O
sym_id_add	function
(	O
optarg	pointer
,	O
INCL_ARCS	int
)	O
;	O
}	O
else	O
{	O
sym_id_add	function
(	O
optarg	pointer
,	O
INCL_GRAPH	int
)	O
;	O
}	O
}	O
output_style	int
|=	O
STYLE_CALL_GRAPH	O
;	O
user_specified	int
|=	O
STYLE_CALL_GRAPH	O
;	O
break	O
;	O
case	O
'r'	O
:	O
output_style	int
|=	O
STYLE_FUNCTION_ORDER	O
;	O
user_specified	int
|=	O
STYLE_FUNCTION_ORDER	O
;	O
break	O
;	O
case	O
'R'	O
:	O
output_style	int
|=	O
STYLE_FILE_ORDER	O
;	O
user_specified	int
|=	O
STYLE_FILE_ORDER	O
;	O
function_mapping_file	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'Q'	O
:	O
if	O
(	O
optarg	pointer
)	O
{	O
if	O
(	O
strchr	function
(	O
optarg	pointer
,	O
'/'	O
)	O
)	O
{	O
sym_id_add	function
(	O
optarg	pointer
,	O
EXCL_ARCS	int
)	O
;	O
}	O
else	O
{	O
sym_id_add	function
(	O
optarg	pointer
,	O
EXCL_GRAPH	int
)	O
;	O
}	O
output_style	int
|=	O
STYLE_CALL_GRAPH	O
;	O
}	O
else	O
{	O
output_style	int
&=	O
~	O
STYLE_CALL_GRAPH	O
;	O
}	O
user_specified	int
|=	O
STYLE_CALL_GRAPH	O
;	O
break	O
;	O
case	O
's'	O
:	O
output_style	int
|=	O
STYLE_SUMMARY_FILE	O
;	O
user_specified	int
|=	O
STYLE_SUMMARY_FILE	O
;	O
break	O
;	O
case	O
'S'	O
:	O
external_symbol_table	pointer
=	O
optarg	pointer
;	O
DBG	O
(	O
AOUTDEBUG	O
,	O
printf	function
(	O
"external-symbol-table: %s\n"	pointer
,	O
optarg	pointer
)	O
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
bb_table_length	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
bb_table_length	int
<	O
0	int
)	O
{	O
bb_table_length	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
'T'	O
:	O
bsd_style_output	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'v'	O
:	O
printf	function
(	O
_	O
(	O
"GNU gprof %s\n"	pointer
)	O
,	O
BFD_VERSION_STRING	O
)	O
;	O
printf	function
(	O
_	O
(	O
"Based on BSD gprof, copyright 1983 Regents of the University of California.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"This program is free software.  This program has absolutely no warranty.\n"	pointer
)	O
)	O
;	O
done	function
(	O
0	int
)	O
;	O
case	O
'w'	O
:	O
output_width	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
output_width	int
<	O
1	int
)	O
{	O
output_width	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
'x'	O
:	O
bb_annotate_all_lines	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'y'	O
:	O
create_annotation_files	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'z'	O
:	O
ignore_zeros	int
=	O
FALSE	int
;	O
break	O
;	O
case	O
'Z'	O
:	O
if	O
(	O
optarg	pointer
)	O
{	O
sym_id_add	function
(	O
optarg	pointer
,	O
EXCL_EXEC	int
)	O
;	O
output_style	int
|=	O
STYLE_EXEC_COUNTS	O
;	O
}	O
else	O
{	O
output_style	int
&=	O
~	O
STYLE_EXEC_COUNTS	O
;	O
}	O
user_specified	int
|=	O
STYLE_EXEC_COUNTS	O
;	O
break	O
;	O
case	O
OPTION_DEMANGLE	O
:	O
demangle	int
=	O
TRUE	int
;	O
if	O
(	O
optarg	pointer
!=	O
NULL	O
)	O
{	O
enum	O
demangling_styles	enum
style	enum
;	O
style	enum
=	O
cplus_demangle_name_to_style	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
style	enum
==	O
unknown_demangling	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: unknown demangling style `%s'\n"	pointer
)	O
,	O
whoami	pointer
,	O
optarg	pointer
)	O
;	O
xexit	function
(	O
1	int
)	O
;	O
}	O
cplus_demangle_set_style	function
(	O
style	enum
)	O
;	O
}	O
break	O
;	O
case	O
OPTION_NO_DEMANGLE	O
:	O
demangle	int
=	O
FALSE	int
;	O
break	O
;	O
case	O
OPTION_INLINE_FILE_NAMES	O
:	O
inline_file_names	int
=	O
TRUE	int
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
(	O
user_specified	int
&	O
STYLE_FUNCTION_ORDER	O
)	O
&&	O
(	O
user_specified	int
&	O
STYLE_FILE_ORDER	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: Only one of --function-ordering and --file-ordering may be specified.\n"	pointer
)	O
,	O
whoami	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
output_style	int
&	O
STYLE_SUMMARY_FILE	O
)	O
line_granularity	int
=	O
1	int
;	O
str	pointer
=	O
(	O
char	O
*	O
)	O
getenv	function
(	O
"GPROF_PATH"	pointer
)	O
;	O
if	O
(	O
str	pointer
)	O
search_list_append	function
(	O
&	O
src_search_list	struct
,	O
str	pointer
)	O
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
a_out_name	pointer
=	O
argv	pointer
[	O
optind	int
++	O
]	O
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
gmon_name	pointer
=	O
argv	pointer
[	O
optind	int
++	O
]	O
;	O
for	O
(	O
sp	pointer
=	O
&	O
default_excluded_list	array
[	O
0	int
]	O
;	O
*	O
sp	pointer
;	O
sp	pointer
++	O
)	O
{	O
sym_id_add	function
(	O
*	O
sp	pointer
,	O
EXCL_TIME	int
)	O
;	O
sym_id_add	function
(	O
*	O
sp	pointer
,	O
EXCL_GRAPH	int
)	O
;	O
sym_id_add	function
(	O
*	O
sp	pointer
,	O
EXCL_FLAT	int
)	O
;	O
}	O
core_init	function
(	O
a_out_name	pointer
)	O
;	O
if	O
(	O
ignore_direct_calls	int
)	O
core_get_text_space	function
(	O
core_bfd	pointer
)	O
;	O
if	O
(	O
external_symbol_table	pointer
)	O
core_create_syms_from	function
(	O
external_symbol_table	pointer
)	O
;	O
else	O
if	O
(	O
line_granularity	int
)	O
core_create_line_syms	function
(	O
)	O
;	O
else	O
core_create_function_syms	function
(	O
)	O
;	O
sym_id_parse	function
(	O
)	O
;	O
if	O
(	O
file_format	enum
==	O
FF_PROF	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: sorry, file format `prof' is not yet supported\n"	pointer
)	O
,	O
whoami	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
else	O
{	O
do	O
{	O
gmon_out_read	function
(	O
gmon_name	pointer
)	O
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
gmon_name	pointer
=	O
argv	pointer
[	O
optind	int
]	O
;	O
}	O
while	O
(	O
optind	int
++	O
<	O
argc	int
)	O
;	O
}	O
if	O
(	O
output_style	int
==	O
0	int
)	O
{	O
if	O
(	O
gmon_input	int
&	O
(	O
INPUT_HISTOGRAM	O
|	O
INPUT_CALL_GRAPH	O
)	O
)	O
{	O
if	O
(	O
gmon_input	int
&	O
INPUT_HISTOGRAM	O
)	O
output_style	int
|=	O
STYLE_FLAT_PROFILE	O
;	O
if	O
(	O
gmon_input	int
&	O
INPUT_CALL_GRAPH	O
)	O
output_style	int
|=	O
STYLE_CALL_GRAPH	O
;	O
}	O
else	O
output_style	int
=	O
STYLE_EXEC_COUNTS	O
;	O
output_style	int
&=	O
~	O
user_specified	int
;	O
}	O
if	O
(	O
output_style	int
&	O
STYLE_SUMMARY_FILE	O
)	O
{	O
gmon_out_write	function
(	O
GMONSUM	pointer
)	O
;	O
}	O
if	O
(	O
gmon_input	int
&	O
INPUT_HISTOGRAM	O
)	O
{	O
hist_assign_samples	function
(	O
)	O
;	O
}	O
if	O
(	O
gmon_input	int
&	O
INPUT_CALL_GRAPH	O
)	O
{	O
cg	struct
=	O
cg_assemble	function
(	O
)	O
;	O
}	O
if	O
(	O
(	O
output_style	int
&	O
STYLE_FLAT_PROFILE	O
)	O
&&	O
!	O
(	O
gmon_input	int
&	O
INPUT_HISTOGRAM	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: gmon.out file is missing histogram\n"	pointer
)	O
,	O
whoami	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
output_style	int
&	O
STYLE_CALL_GRAPH	O
)	O
&&	O
!	O
(	O
gmon_input	int
&	O
INPUT_CALL_GRAPH	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: gmon.out file is missing call-graph data\n"	pointer
)	O
,	O
whoami	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
cg	struct
&&	O
(	O
output_style	int
&	O
STYLE_CALL_GRAPH	O
)	O
&&	O
bsd_style_output	int
)	O
{	O
cg_print	function
(	O
cg	struct
)	O
;	O
}	O
if	O
(	O
output_style	int
&	O
STYLE_FLAT_PROFILE	O
)	O
{	O
hist_print	function
(	O
)	O
;	O
}	O
if	O
(	O
cg	struct
&&	O
(	O
output_style	int
&	O
STYLE_CALL_GRAPH	O
)	O
)	O
{	O
if	O
(	O
!	O
bsd_style_output	int
)	O
{	O
cg_print	function
(	O
cg	struct
)	O
;	O
}	O
cg_print_index	function
(	O
)	O
;	O
}	O
if	O
(	O
output_style	int
&	O
STYLE_EXEC_COUNTS	O
)	O
print_exec_counts	function
(	O
)	O
;	O
if	O
(	O
output_style	int
&	O
STYLE_ANNOTATED_SOURCE	O
)	O
print_annotated_source	function
(	O
)	O
;	O
if	O
(	O
output_style	int
&	O
STYLE_FUNCTION_ORDER	O
)	O
cg_print_function_ordering	function
(	O
)	O
;	O
if	O
(	O
output_style	int
&	O
STYLE_FILE_ORDER	O
)	O
cg_print_file_ordering	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
done	function
(	O
int	O
status	int
)	O
{	O
exit	function
(	O
status	int
)	O
;	O
}	O
