void	O
_pl_m_set_attributes	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
unsigned	O
int	O
mask	int
)	O
{	O
if	O
(	O
mask	int
&	O
PL_ATTR_POSITION	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_pos	struct
.	O
x	double
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
||	O
_plotter	pointer
->	O
meta_pos	struct
.	O
y	double
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FMOVE	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pos	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_TRANSFORMATION_MATRIX	O
)	O
{	O
bool	enum
need_change	enum
=	O
false	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_m_user_to_ndc	array
[	O
i	int
]	O
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
[	O
i	int
]	O
)	O
{	O
need_change	enum
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
need_change	enum
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FSETMATRIX	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
[	O
i	int
]	O
)	O
;	O
_plotter	pointer
->	O
meta_m_user_to_ndc	array
[	O
i	int
]	O
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
[	O
i	int
]	O
;	O
}	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_PEN_COLOR	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_fgcolor	struct
.	O
red	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
red	int
||	O
_plotter	pointer
->	O
meta_fgcolor	struct
.	O
green	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
green	int
||	O
_plotter	pointer
->	O
meta_fgcolor	struct
.	O
blue	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
blue	int
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_PENCOLOR	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
red	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
green	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
blue	int
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_fgcolor	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_FILL_COLOR	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_fillcolor_base	struct
.	O
red	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
red	int
||	O
_plotter	pointer
->	O
meta_fillcolor_base	struct
.	O
green	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
green	int
||	O
_plotter	pointer
->	O
meta_fillcolor_base	struct
.	O
blue	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
blue	int
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FILLCOLOR	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
red	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
green	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
.	O
blue	int
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_fillcolor_base	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fillcolor_base	struct
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_BG_COLOR	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_bgcolor	struct
.	O
red	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
red	int
||	O
_plotter	pointer
->	O
meta_bgcolor	struct
.	O
green	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
green	int
||	O
_plotter	pointer
->	O
meta_bgcolor	struct
.	O
blue	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
blue	int
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_BGCOLOR	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
red	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
green	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
.	O
blue	int
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_bgcolor	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
bgcolor	struct
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_PEN_TYPE	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_pen_type	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_PENTYPE	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_pen_type	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_FILL_TYPE	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_fill_type	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FILLTYPE	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_fill_type	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_LINE_STYLE	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
)	O
{	O
bool	enum
array_ok	enum
=	O
true	int
,	O
offset_ok	enum
=	O
true	int
;	O
int	O
i	int
;	O
if	O
(	O
_plotter	pointer
->	O
meta_dash_array_in_effect	enum
==	O
false	int
||	O
(	O
_plotter	pointer
->	O
meta_dash_array_len	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
)	O
)	O
array_ok	enum
=	O
false	int
;	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
meta_dash_array_len	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_dash_array	pointer
[	O
i	int
]	O
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
i	int
]	O
)	O
{	O
array_ok	enum
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
meta_dash_offset	double
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_offset	double
)	O
offset_ok	enum
=	O
false	int
;	O
if	O
(	O
array_ok	enum
==	O
false	int
||	O
offset_ok	enum
==	O
false	int
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FLINEDASH	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
;	O
i	int
++	O
)	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
i	int
]	O
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_offset	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
array_ok	enum
==	O
false	int
)	O
{	O
double	O
*	O
new_dash_array	pointer
;	O
if	O
(	O
_plotter	pointer
->	O
meta_dash_array	pointer
!=	O
(	O
const	O
double	O
*	O
)	O
NULL	O
)	O
free	function
(	O
(	O
double	O
*	O
)	O
_plotter	pointer
->	O
meta_dash_array	pointer
)	O
;	O
new_dash_array	pointer
=	O
(	O
double	O
*	O
)	O
_pl_xmalloc	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
;	O
i	int
++	O
)	O
new_dash_array	pointer
[	O
i	int
]	O
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
i	int
]	O
;	O
_plotter	pointer
->	O
meta_dash_array	pointer
=	O
new_dash_array	pointer
;	O
_plotter	pointer
->	O
meta_dash_array_len	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
;	O
}	O
if	O
(	O
offset_ok	enum
==	O
false	int
)	O
_plotter	pointer
->	O
meta_dash_offset	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_offset	double
;	O
_plotter	pointer
->	O
meta_dash_array_in_effect	enum
=	O
true	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
points_are_connected	enum
==	O
false	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_dash_array_in_effect	enum
||	O
_plotter	pointer
->	O
meta_points_are_connected	enum
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_LINEMOD	int
)	O
;	O
_pl_m_emit_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
"disconnected"	pointer
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_points_are_connected	enum
=	O
false	int
;	O
_plotter	pointer
->	O
meta_line_type	int
=	O
PL_L_SOLID	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_dash_array_in_effect	enum
||	O
_plotter	pointer
->	O
meta_points_are_connected	enum
==	O
false	int
||	O
(	O
_plotter	pointer
->	O
meta_line_type	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
)	O
)	O
{	O
const	O
char	O
*	O
line_mode	pointer
;	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_LINEMOD	int
)	O
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
)	O
{	O
case	O
PL_L_SOLID	int
:	O
default	O
:	O
line_mode	pointer
=	O
"solid"	pointer
;	O
break	O
;	O
case	O
PL_L_DOTTED	int
:	O
line_mode	pointer
=	O
"dotted"	pointer
;	O
break	O
;	O
case	O
PL_L_DOTDASHED	int
:	O
line_mode	pointer
=	O
"dotdashed"	pointer
;	O
break	O
;	O
case	O
PL_L_SHORTDASHED	int
:	O
line_mode	pointer
=	O
"shortdashed"	pointer
;	O
break	O
;	O
case	O
PL_L_LONGDASHED	int
:	O
line_mode	pointer
=	O
"longdashed"	pointer
;	O
break	O
;	O
case	O
PL_L_DOTDOTDASHED	int
:	O
line_mode	pointer
=	O
"dotdotdashed"	pointer
;	O
break	O
;	O
case	O
PL_L_DOTDOTDOTDASHED	int
:	O
line_mode	pointer
=	O
"dotdotdotdashed"	pointer
;	O
break	O
;	O
}	O
_pl_m_emit_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
line_mode	pointer
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_points_are_connected	enum
=	O
true	int
;	O
_plotter	pointer
->	O
meta_line_type	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
;	O
}	O
}	O
_plotter	pointer
->	O
meta_dash_array_in_effect	enum
=	O
false	int
;	O
if	O
(	O
_plotter	pointer
->	O
meta_dash_array	pointer
!=	O
(	O
const	O
double	O
*	O
)	O
NULL	O
)	O
{	O
free	function
(	O
(	O
double	O
*	O
)	O
_plotter	pointer
->	O
meta_dash_array	pointer
)	O
;	O
_plotter	pointer
->	O
meta_dash_array	pointer
=	O
(	O
const	O
double	O
*	O
)	O
NULL	O
;	O
}	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_LINE_WIDTH	O
)	O
{	O
if	O
(	O
(	O
_plotter	pointer
->	O
meta_line_width_is_default	enum
==	O
false	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width_is_default	enum
==	O
false	int
&&	O
_plotter	pointer
->	O
meta_line_width	double
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width	double
)	O
||	O
(	O
_plotter	pointer
->	O
meta_line_width_is_default	enum
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width_is_default	enum
)	O
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FLINEWIDTH	int
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width_is_default	enum
)	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
-	O
1.0	int
)	O
;	O
else	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_line_width	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width	double
;	O
_plotter	pointer
->	O
meta_line_width_is_default	enum
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width_is_default	enum
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_ORIENTATION	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_orientation	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
orientation	int
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_ORIENTATION	int
)	O
;	O
_pl_m_emit_integer	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
orientation	int
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_orientation	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
orientation	int
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_MITER_LIMIT	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_miter_limit	double
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
miter_limit	double
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FMITERLIMIT	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
miter_limit	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_miter_limit	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
miter_limit	double
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_FILL_RULE	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_fill_rule_type	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_rule_type	int
)	O
{	O
const	O
char	O
*	O
fill_mode	pointer
;	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FILLMOD	int
)	O
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_rule_type	int
)	O
{	O
case	O
PL_FILL_ODD_WINDING	int
:	O
default	O
:	O
fill_mode	pointer
=	O
"even-odd"	pointer
;	O
break	O
;	O
case	O
PL_FILL_NONZERO_WINDING	int
:	O
fill_mode	pointer
=	O
"nonzero-winding"	pointer
;	O
break	O
;	O
}	O
_pl_m_emit_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
fill_mode	pointer
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_fill_rule_type	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_rule_type	int
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_JOIN_STYLE	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_join_type	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
)	O
{	O
const	O
char	O
*	O
join_mode	pointer
;	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_JOINMOD	int
)	O
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
)	O
{	O
case	O
PL_JOIN_MITER	int
:	O
default	O
:	O
join_mode	pointer
=	O
"miter"	pointer
;	O
break	O
;	O
case	O
PL_JOIN_ROUND	int
:	O
join_mode	pointer
=	O
"round"	pointer
;	O
break	O
;	O
case	O
PL_JOIN_BEVEL	int
:	O
join_mode	pointer
=	O
"bevel"	pointer
;	O
break	O
;	O
case	O
PL_JOIN_TRIANGULAR	int
:	O
join_mode	pointer
=	O
"triangular"	pointer
;	O
break	O
;	O
}	O
_pl_m_emit_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
join_mode	pointer
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_join_type	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_CAP_STYLE	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_cap_type	int
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
)	O
{	O
const	O
char	O
*	O
cap_mode	pointer
;	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_CAPMOD	int
)	O
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
)	O
{	O
case	O
PL_CAP_BUTT	int
:	O
default	O
:	O
cap_mode	pointer
=	O
"butt"	pointer
;	O
break	O
;	O
case	O
PL_CAP_ROUND	int
:	O
cap_mode	pointer
=	O
"round"	pointer
;	O
break	O
;	O
case	O
PL_CAP_PROJECT	int
:	O
cap_mode	pointer
=	O
"project"	pointer
;	O
break	O
;	O
case	O
PL_CAP_TRIANGULAR	int
:	O
cap_mode	pointer
=	O
"triangular"	pointer
;	O
break	O
;	O
}	O
_pl_m_emit_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
cap_mode	pointer
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_cap_type	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_FONT_NAME	O
)	O
{	O
const	O
char	O
*	O
font_name	pointer
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
;	O
if	O
(	O
_plotter	pointer
->	O
meta_font_name	pointer
==	O
(	O
const	O
char	O
*	O
)	O
NULL	O
||	O
strcasecmp	function
(	O
_plotter	pointer
->	O
meta_font_name	pointer
,	O
font_name	pointer
)	O
!=	O
0	int
)	O
{	O
char	O
*	O
copied_font_name	pointer
;	O
copied_font_name	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
font_name	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
copied_font_name	pointer
,	O
font_name	pointer
)	O
;	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FONTNAME	int
)	O
;	O
_pl_m_emit_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
copied_font_name	pointer
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
meta_font_name	pointer
!=	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
free	function
(	O
(	O
char	O
*	O
)	O
_plotter	pointer
->	O
meta_font_name	pointer
)	O
;	O
_plotter	pointer
->	O
meta_font_name	pointer
=	O
copied_font_name	pointer
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_FONT_SIZE	O
)	O
{	O
if	O
(	O
(	O
_plotter	pointer
->	O
meta_font_size_is_default	enum
==	O
false	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size_is_default	enum
==	O
false	int
&&	O
_plotter	pointer
->	O
meta_font_size	double
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size	double
)	O
||	O
(	O
_plotter	pointer
->	O
meta_font_size_is_default	enum
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size_is_default	enum
)	O
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FFONTSIZE	int
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size_is_default	enum
)	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
-	O
1.0	int
)	O
;	O
else	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_font_size	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size	double
;	O
_plotter	pointer
->	O
meta_font_size_is_default	enum
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size_is_default	enum
;	O
}	O
}	O
if	O
(	O
mask	int
&	O
PL_ATTR_TEXT_ANGLE	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
meta_text_rotation	double
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
)	O
{	O
_pl_m_emit_op_code	function
(	O
R___	O
(	O
_plotter	pointer
)	O
O_FTEXTANGLE	int
)	O
;	O
_pl_m_emit_float	function
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
)	O
;	O
_pl_m_emit_terminator	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
meta_text_rotation	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
;	O
}	O
}	O
}	O
