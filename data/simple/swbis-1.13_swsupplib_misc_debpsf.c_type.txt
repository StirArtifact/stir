static	O
void	O
normalize_leading_directory	function
(	O
STROB	struct
*	O
b	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
strob_strcpy	function
(	O
b	pointer
,	O
"."	pointer
)	O
;	O
swlib_unix_dircat	function
(	O
b	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
void	O
squash_illegal_tag_chars	function
(	O
char	O
*	O
s	pointer
)	O
{	O
while	O
(	O
*	O
s	pointer
!=	O
(	O
int	O
)	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
s	pointer
==	O
'.'	O
)	O
*	O
s	pointer
=	O
'_'	O
;	O
if	O
(	O
*	O
s	pointer
==	O
','	O
)	O
*	O
s	pointer
=	O
'_'	O
;	O
if	O
(	O
*	O
s	pointer
==	O
':'	O
)	O
*	O
s	pointer
=	O
'_'	O
;	O
s	pointer
++	O
;	O
}	O
}	O
static	O
int	O
parse_version	function
(	O
DEB_ATTRIBUTES	struct
*	O
da	pointer
)	O
{	O
char	O
*	O
s0	pointer
;	O
char	O
*	O
s	pointer
;	O
char	O
*	O
e	pointer
;	O
char	O
*	O
r	pointer
;	O
if	O
(	O
da	pointer
->	O
Version	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Version attribute missing\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
s0	pointer
=	O
strdup	function
(	O
strob_str	function
(	O
da	pointer
->	O
Version	pointer
)	O
)	O
;	O
s	pointer
=	O
s0	pointer
;	O
e	pointer
=	O
strchr	function
(	O
s	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
e	pointer
)	O
{	O
*	O
e	pointer
=	O
'\0'	O
;	O
da	pointer
->	O
Version_epoch	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
strob_strcpy	function
(	O
da	pointer
->	O
Version_epoch	pointer
,	O
s	pointer
)	O
;	O
s	pointer
=	O
e	pointer
+	O
1	int
;	O
}	O
r	pointer
=	O
strrchr	function
(	O
s	pointer
,	O
'-'	O
)	O
;	O
if	O
(	O
r	pointer
)	O
{	O
da	pointer
->	O
Version_release	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
*	O
r	pointer
=	O
'\0'	O
;	O
r	pointer
++	O
;	O
strob_strcpy	function
(	O
da	pointer
->	O
Version_release	pointer
,	O
r	pointer
)	O
;	O
}	O
da	pointer
->	O
Version_revision	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
strob_strcpy	function
(	O
da	pointer
->	O
Version_revision	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s0	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
x_strncasecmp	function
(	O
char	O
*	O
line	pointer
,	O
char	O
*	O
s	pointer
)	O
{	O
return	O
strncasecmp	function
(	O
line	pointer
,	O
s	pointer
,	O
strlen	function
(	O
s	pointer
)	O
)	O
;	O
}	O
static	O
int	O
process_line	function
(	O
STROB	struct
*	O
*	O
attr	pointer
,	O
char	O
*	O
line	pointer
,	O
int	O
do_append	int
)	O
{	O
char	O
*	O
s	pointer
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
w	pointer
;	O
if	O
(	O
do_append	int
==	O
0	int
)	O
{	O
s	pointer
=	O
strchr	function
(	O
line	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
{	O
return	O
-	O
1	int
;	O
}	O
*	O
attr	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
s	pointer
++	O
;	O
while	O
(	O
isspace	function
(	O
*	O
s	pointer
)	O
)	O
s	pointer
++	O
;	O
p	pointer
=	O
line	pointer
;	O
w	pointer
=	O
NULL	O
;	O
while	O
(	O
*	O
p	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
p	pointer
&&	O
isspace	function
(	O
*	O
p	pointer
)	O
)	O
{	O
w	pointer
=	O
p	pointer
;	O
}	O
else	O
if	O
(	O
*	O
p	pointer
)	O
{	O
w	pointer
=	O
NULL	O
;	O
}	O
p	pointer
++	O
;	O
}	O
strob_strncpy	function
(	O
*	O
attr	pointer
,	O
s	pointer
,	O
w	pointer
?	O
(	O
int	O
)	O
(	O
w	pointer
-	O
s	pointer
)	O
:	O
(	O
int	O
)	O
strlen	function
(	O
s	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
p	pointer
=	O
line	pointer
;	O
s	pointer
=	O
line	pointer
;	O
while	O
(	O
isspace	function
(	O
*	O
s	pointer
)	O
)	O
s	pointer
++	O
;	O
p	pointer
=	O
s	pointer
;	O
w	pointer
=	O
NULL	O
;	O
while	O
(	O
*	O
p	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
p	pointer
&&	O
isspace	function
(	O
*	O
p	pointer
)	O
)	O
{	O
w	pointer
=	O
p	pointer
;	O
}	O
else	O
if	O
(	O
*	O
p	pointer
)	O
{	O
w	pointer
=	O
NULL	O
;	O
}	O
p	pointer
++	O
;	O
}	O
if	O
(	O
*	O
s	pointer
==	O
'\0'	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
*	O
s	pointer
==	O
'.'	O
&&	O
s	pointer
+	O
1	int
==	O
w	pointer
)	O
{	O
strob_sprintf	function
(	O
*	O
attr	pointer
,	O
1	int
,	O
"\n"	pointer
)	O
;	O
}	O
else	O
{	O
strob_strcat	function
(	O
*	O
attr	pointer
,	O
"\n"	pointer
)	O
;	O
strob_strncat	function
(	O
*	O
attr	pointer
,	O
s	pointer
,	O
w	pointer
?	O
(	O
int	O
)	O
(	O
w	pointer
-	O
s	pointer
)	O
:	O
(	O
int	O
)	O
strlen	function
(	O
s	pointer
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_control_file	function
(	O
DEB_ATTRIBUTES	struct
*	O
da	pointer
,	O
char	O
*	O
filebuf	pointer
)	O
{	O
int	O
n	long
;	O
int	O
fd	int
;	O
STROB	struct
*	O
tmp	pointer
;	O
STROB	struct
*	O
last_attribute	pointer
;	O
char	O
*	O
line	pointer
;	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
fd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
uxfio_write	function
(	O
fd	int
,	O
filebuf	pointer
,	O
strlen	function
(	O
filebuf	pointer
)	O
)	O
;	O
uxfio_lseek	function
(	O
fd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
last_attribute	pointer
=	O
NULL	O
;	O
while	O
(	O
(	O
n	long
=	O
swgp_read_line	function
(	O
fd	int
,	O
(	O
STROB	struct
*	O
)	O
tmp	pointer
,	O
DO_NOT_APPEND	int
)	O
)	O
>	O
0	int
)	O
{	O
line	pointer
=	O
strob_str	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
isalpha	function
(	O
*	O
line	pointer
)	O
)	O
{	O
if	O
(	O
x_strncasecmp	function
(	O
line	pointer
,	O
DEBPSF_ATTR_Package	pointer
":"	pointer
)	O
==	O
0	int
)	O
{	O
process_line	function
(	O
&	O
(	O
(	O
*	O
da	pointer
)	O
.	O
Package	pointer
)	O
,	O
line	pointer
,	O
0	int
)	O
;	O
last_attribute	pointer
=	O
da	pointer
->	O
Package	pointer
;	O
;	O
}	O
else	O
if	O
(	O
x_strncasecmp	function
(	O
line	pointer
,	O
DEBPSF_ATTR_Version	pointer
":"	pointer
)	O
==	O
0	int
)	O
{	O
process_line	function
(	O
&	O
(	O
da	pointer
->	O
Version	pointer
)	O
,	O
line	pointer
,	O
0	int
)	O
;	O
last_attribute	pointer
=	O
da	pointer
->	O
Version	pointer
;	O
;	O
}	O
else	O
if	O
(	O
x_strncasecmp	function
(	O
line	pointer
,	O
DEBPSF_ATTR_Architecture	pointer
":"	pointer
)	O
==	O
0	int
)	O
{	O
process_line	function
(	O
&	O
(	O
da	pointer
->	O
Architecture	pointer
)	O
,	O
line	pointer
,	O
0	int
)	O
;	O
last_attribute	pointer
=	O
da	pointer
->	O
Architecture	pointer
;	O
;	O
}	O
else	O
if	O
(	O
x_strncasecmp	function
(	O
line	pointer
,	O
DEBPSF_ATTR_Maintainer	pointer
":"	pointer
)	O
==	O
0	int
)	O
{	O
process_line	function
(	O
&	O
(	O
da	pointer
->	O
Maintainer	pointer
)	O
,	O
line	pointer
,	O
0	int
)	O
;	O
last_attribute	pointer
=	O
da	pointer
->	O
Maintainer	pointer
;	O
;	O
}	O
else	O
if	O
(	O
x_strncasecmp	function
(	O
line	pointer
,	O
DEBPSF_ATTR_Description	pointer
":"	pointer
)	O
==	O
0	int
)	O
{	O
process_line	function
(	O
&	O
(	O
da	pointer
->	O
Description	pointer
)	O
,	O
line	pointer
,	O
0	int
)	O
;	O
last_attribute	pointer
=	O
da	pointer
->	O
Description	pointer
;	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: debpsf: attribute not supported at this time: %s"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
line	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
isspace	function
(	O
*	O
line	pointer
)	O
)	O
{	O
if	O
(	O
last_attribute	pointer
==	O
NULL	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
process_line	function
(	O
&	O
(	O
last_attribute	pointer
)	O
,	O
line	pointer
,	O
1	int
)	O
;	O
}	O
else	O
{	O
;	O
}	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
uxfio_close	function
(	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
write_to_buf	function
(	O
XFORMAT	struct
*	O
xformat	pointer
,	O
char	O
*	O
name	pointer
,	O
STROB	struct
*	O
*	O
buf	pointer
)	O
{	O
int	O
ufd	int
;	O
int	O
ret	int
;	O
if	O
(	O
buf	pointer
)	O
*	O
buf	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
ufd	int
=	O
xformat_u_open_file	function
(	O
xformat	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
ufd	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
buf	pointer
)	O
{	O
ret	int
=	O
swlib_ascii_text_fd_to_buf	function
(	O
*	O
buf	pointer
,	O
ufd	int
)	O
;	O
}	O
else	O
{	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
ret	int
=	O
swlib_ascii_text_fd_to_buf	function
(	O
tmp	pointer
,	O
ufd	int
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
ret	int
=	O
0	int
;	O
}	O
xformat_u_close_file	function
(	O
xformat	pointer
,	O
ufd	int
)	O
;	O
return	O
ret	int
;	O
}	O
DEBPSF	struct
*	O
debpsf_create	function
(	O
void	O
)	O
{	O
DEBPSF	struct
*	O
debpsf	pointer
;	O
debpsf	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
DEBPSF	struct
)	O
)	O
;	O
debpsf	pointer
->	O
headM	pointer
=	O
NULL	O
;	O
debpsf	pointer
->	O
topsfM	pointer
=	O
NULL	O
;	O
debpsf	pointer
->	O
header_fdM	int
=	O
-	O
1	int
;	O
debpsf	pointer
->	O
control_fdM	int
=	O
-	O
1	int
;	O
debpsf	pointer
->	O
data_fdM	int
=	O
-	O
1	int
;	O
return	O
debpsf	pointer
;	O
}	O
int	O
debpsf_open	function
(	O
DEBPSF	struct
*	O
dp	pointer
,	O
void	O
*	O
v_topsf	pointer
)	O
{	O
int	O
ret	int
;	O
int	O
fd	int
;	O
TOPSF	struct
*	O
topsf	pointer
=	O
(	O
TOPSF	struct
*	O
)	O
v_topsf	pointer
;	O
dp	pointer
->	O
topsfM	pointer
=	O
topsf	pointer
;	O
if	O
(	O
uinfile_get_type	function
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
!=	O
DEB_FILEFORMAT	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
fd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
return	O
-	O
2	int
;	O
ret	int
=	O
swlib_pipe_pump	function
(	O
fd	int
,	O
topsf	pointer
->	O
fd_	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
-	O
3	int
;	O
dp	pointer
->	O
control_fdM	int
=	O
fd	int
;	O
uxfio_lseek	function
(	O
fd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
ret	int
=	O
uinfile_opendup	function
(	O
topsf	pointer
->	O
format_desc_	pointer
->	O
deb_file_fd_	int
,	O
0	int
,	O
&	O
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
,	O
UINFILE_DETECT_DEB_DATA	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
-	O
4	int
;	O
dp	pointer
->	O
data_fdM	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
dp	pointer
->	O
source_data_fdM	int
=	O
ret	int
;	O
return	O
0	int
;	O
}	O
void	O
debpsf_deb_attributes_init	function
(	O
DEB_ATTRIBUTES	struct
*	O
da	pointer
)	O
{	O
da	pointer
->	O
Package	pointer
=	O
NULL	O
;	O
da	pointer
->	O
Version	pointer
=	O
NULL	O
;	O
da	pointer
->	O
Version_epoch	pointer
=	O
NULL	O
;	O
da	pointer
->	O
Version_revision	pointer
=	O
NULL	O
;	O
da	pointer
->	O
Version_release	pointer
=	O
NULL	O
;	O
da	pointer
->	O
Architecture	pointer
=	O
NULL	O
;	O
da	pointer
->	O
Maintainer	pointer
=	O
NULL	O
;	O
da	pointer
->	O
Description	pointer
=	O
NULL	O
;	O
}	O
int	O
debpsf_close	function
(	O
DEBPSF	struct
*	O
dp	pointer
)	O
{	O
swlib_pipe_pump	function
(	O
dp	pointer
->	O
data_fdM	int
,	O
dp	pointer
->	O
source_data_fdM	int
)	O
;	O
uxfio_close	function
(	O
dp	pointer
->	O
control_fdM	int
)	O
;	O
uxfio_close	function
(	O
dp	pointer
->	O
data_fdM	int
)	O
;	O
dp	pointer
->	O
control_fdM	int
=	O
-	O
1	int
;	O
dp	pointer
->	O
data_fdM	int
=	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
debpsf_write_psf	function
(	O
void	O
*	O
v_topsf	pointer
,	O
int	O
ofd	int
)	O
{	O
int	O
ret	int
;	O
STROB	struct
*	O
psf	pointer
;	O
psf	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
ret	int
=	O
debpsf_write_psf_buf	function
(	O
v_topsf	pointer
,	O
psf	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
ret	int
;	O
ret	int
=	O
uxfio_write	function
(	O
ofd	int
,	O
psf	pointer
->	O
str_	pointer
,	O
strlen	function
(	O
(	O
char	O
*	O
)	O
(	O
psf	pointer
->	O
str_	pointer
)	O
)	O
)	O
;	O
strob_close	function
(	O
psf	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
debpsf_write_psf_buf	function
(	O
void	O
*	O
v_topsf	pointer
,	O
STROB	struct
*	O
psf	pointer
)	O
{	O
int	O
ret	int
;	O
int	O
control_fd	int
;	O
int	O
data_fd	int
;	O
char	O
*	O
name	pointer
;	O
TOPSF	struct
*	O
topsf	pointer
;	O
DEBPSF	struct
*	O
dp	pointer
;	O
XFORMAT	struct
*	O
control_xformat	pointer
;	O
XFORMAT	struct
*	O
data_xformat	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
STROB	struct
*	O
tmp2	pointer
;	O
STROB	struct
*	O
namebuf	pointer
;	O
STROB	struct
*	O
control_buf	pointer
;	O
STROB	struct
*	O
md5sums_buf	pointer
;	O
STROB	struct
*	O
postinstall_buf	pointer
;	O
STROB	struct
*	O
preinstall_buf	pointer
;	O
STROB	struct
*	O
preremove_buf	pointer
;	O
STROB	struct
*	O
postremove_buf	pointer
;	O
STROB	struct
*	O
conffiles_buf	pointer
;	O
STROB	struct
*	O
shlib_buf	pointer
;	O
char	O
*	O
conffile_line	pointer
;	O
struct	O
new_cpio_header	struct
*	O
h	pointer
;	O
AHS	struct
*	O
ahs	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
DEB_ATTRIBUTES	struct
*	O
da	pointer
;	O
namebuf	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
12	int
)	O
;	O
tmp2	pointer
=	O
strob_open	function
(	O
12	int
)	O
;	O
topsf	pointer
=	O
(	O
TOPSF	struct
*	O
)	O
v_topsf	pointer
;	O
dp	pointer
=	O
topsf	pointer
->	O
debpsfM	pointer
;	O
dp	pointer
->	O
daM	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
DEB_ATTRIBUTES	struct
)	O
)	O
;	O
debpsf_deb_attributes_init	function
(	O
dp	pointer
->	O
daM	pointer
)	O
;	O
da	pointer
=	O
dp	pointer
->	O
daM	pointer
;	O
control_buf	pointer
=	O
NULL	O
;	O
md5sums_buf	pointer
=	O
NULL	O
;	O
postinstall_buf	pointer
=	O
NULL	O
;	O
preinstall_buf	pointer
=	O
NULL	O
;	O
preremove_buf	pointer
=	O
NULL	O
;	O
postremove_buf	pointer
=	O
NULL	O
;	O
conffiles_buf	pointer
=	O
NULL	O
;	O
shlib_buf	pointer
=	O
NULL	O
;	O
control_fd	int
=	O
dp	pointer
->	O
control_fdM	int
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
uxfio_lseek	function
(	O
control_fd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
control_xformat	pointer
=	O
xformat_open	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
arf_ustar	int
)	O
;	O
ret	int
=	O
xformat_open_archive_by_fd	function
(	O
control_xformat	pointer
,	O
control_fd	int
,	O
UINFILE_DETECT_OTARFORCE	O
|	O
UINFILE_DETECT_DEB_CONTROL	O
,	O
(	O
mode_t	int
)	O
(	O
0	int
)	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
return	O
-	O
2	int
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
while	O
(	O
(	O
name	pointer
=	O
xformat_get_next_dirent	function
(	O
control_xformat	pointer
,	O
&	O
st	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
DEBPSF_CONTROL_PREFIX	pointer
DEBPSF_FILE_CONTROL	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
DEBPSF_FILE_CONTROL	pointer
)	O
;	O
write_to_buf	function
(	O
control_xformat	pointer
,	O
name	pointer
,	O
&	O
control_buf	pointer
)	O
;	O
parse_control_file	function
(	O
da	pointer
,	O
strob_str	function
(	O
control_buf	pointer
)	O
)	O
;	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
DEBPSF_CONTROL_PREFIX	pointer
DEBPSF_FILE_MD5SUM	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
DEBPSF_FILE_MD5SUM	pointer
)	O
;	O
write_to_buf	function
(	O
control_xformat	pointer
,	O
name	pointer
,	O
&	O
md5sums_buf	pointer
)	O
;	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
DEBPSF_CONTROL_PREFIX	pointer
DEBPSF_FILE_POSTINSTALL	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
DEBPSF_FILE_POSTINSTALL	pointer
)	O
;	O
write_to_buf	function
(	O
control_xformat	pointer
,	O
name	pointer
,	O
&	O
postinstall_buf	pointer
)	O
;	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
DEBPSF_CONTROL_PREFIX	pointer
DEBPSF_FILE_PREINSTALL	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
DEBPSF_FILE_PREINSTALL	pointer
)	O
;	O
write_to_buf	function
(	O
control_xformat	pointer
,	O
name	pointer
,	O
&	O
preinstall_buf	pointer
)	O
;	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
DEBPSF_CONTROL_PREFIX	pointer
DEBPSF_FILE_PREREMOVE	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
DEBPSF_FILE_PREREMOVE	pointer
)	O
;	O
write_to_buf	function
(	O
control_xformat	pointer
,	O
name	pointer
,	O
&	O
preremove_buf	pointer
)	O
;	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
DEBPSF_CONTROL_PREFIX	pointer
DEBPSF_FILE_POSTREMOVE	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
DEBPSF_FILE_POSTREMOVE	pointer
)	O
;	O
write_to_buf	function
(	O
control_xformat	pointer
,	O
name	pointer
,	O
&	O
postremove_buf	pointer
)	O
;	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
DEBPSF_CONTROL_PREFIX	pointer
DEBPSF_FILE_CONFFILES	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
DEBPSF_FILE_CONFFILES	pointer
)	O
;	O
write_to_buf	function
(	O
control_xformat	pointer
,	O
name	pointer
,	O
&	O
conffiles_buf	pointer
)	O
;	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
DEBPSF_CONTROL_PREFIX	pointer
DEBPSF_FILE_SHLIBS	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
DEBPSF_FILE_SHLIBS	pointer
)	O
;	O
write_to_buf	function
(	O
control_xformat	pointer
,	O
name	pointer
,	O
&	O
shlib_buf	pointer
)	O
;	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
DEBPSF_CONTROL_PREFIX	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
;	O
}	O
else	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
write_to_buf	function
(	O
control_xformat	pointer
,	O
name	pointer
,	O
NULL	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unrecognized file in control.tar.gz: %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
name	pointer
)	O
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
xformat_close	function
(	O
control_xformat	pointer
)	O
;	O
parse_version	function
(	O
da	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
1	int
&&	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dp->daM->Package: %s"	pointer
,	O
dp	pointer
->	O
daM	pointer
->	O
Package	pointer
?	O
strob_str	function
(	O
dp	pointer
->	O
daM	pointer
->	O
Package	pointer
)	O
:	O
"(null)"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s"	pointer
,	O
control_buf	pointer
?	O
strob_str	function
(	O
control_buf	pointer
)	O
:	O
"(null)"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"da->Description [%s]\n"	pointer
,	O
da	pointer
->	O
Description	pointer
?	O
strob_str	function
(	O
da	pointer
->	O
Description	pointer
)	O
:	O
"(null)"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"da->Version: Version: [%s]\n"	pointer
,	O
da	pointer
->	O
Version	pointer
?	O
strob_str	function
(	O
da	pointer
->	O
Version	pointer
)	O
:	O
"(null)"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"da->Version_revision: Upstream revision: [%s]\n"	pointer
,	O
da	pointer
->	O
Version_revision	pointer
?	O
strob_str	function
(	O
da	pointer
->	O
Version_revision	pointer
)	O
:	O
"(null)"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"da->Version_release: Debian revision: [%s]\n"	pointer
,	O
da	pointer
->	O
Version_release	pointer
?	O
strob_str	function
(	O
da	pointer
->	O
Version_release	pointer
)	O
:	O
"(null)"	pointer
)	O
;	O
}	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_NO_APPEND	int
,	O
""	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"distribution\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"layout_version 1.0\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"dfiles dfiles\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"pfiles pfiles\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_tag	pointer
" \"%s-%s%s%s\"\n"	pointer
,	O
strob_str	function
(	O
dp	pointer
->	O
daM	pointer
->	O
Package	pointer
)	O
,	O
strob_str	function
(	O
da	pointer
->	O
Version_revision	pointer
)	O
,	O
(	O
da	pointer
->	O
Version_release	pointer
&&	O
strlen	function
(	O
strob_str	function
(	O
da	pointer
->	O
Version_release	pointer
)	O
)	O
)	O
?	O
"-"	pointer
:	O
""	pointer
,	O
da	pointer
->	O
Version_release	pointer
?	O
strob_str	function
(	O
da	pointer
->	O
Version_release	pointer
)	O
:	O
""	pointer
)	O
;	O
if	O
(	O
md5sums_buf	pointer
)	O
{	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"md5sums <"	pointer
DEBPSF_PSF_CONTROL_DIR	pointer
"/md5sums\n"	pointer
)	O
;	O
}	O
if	O
(	O
conffiles_buf	pointer
)	O
{	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"conffiles <"	pointer
DEBPSF_PSF_CONTROL_DIR	pointer
"/conffiles\n"	pointer
)	O
;	O
}	O
if	O
(	O
shlib_buf	pointer
)	O
{	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"shlibs <"	pointer
DEBPSF_PSF_CONTROL_DIR	pointer
"/shlibs\n"	pointer
)	O
;	O
}	O
if	O
(	O
dp	pointer
->	O
daM	pointer
->	O
Version_release	pointer
)	O
{	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"vendor\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"the_term_vendor_is_misleading True\n"	pointer
)	O
;	O
squash_illegal_tag_chars	function
(	O
strob_str	function
(	O
dp	pointer
->	O
daM	pointer
->	O
Version_release	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"tag \"%s\"\n"	pointer
,	O
strob_str	function
(	O
dp	pointer
->	O
daM	pointer
->	O
Version_release	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"title Debian\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"url \"http://www.debian.org\"\n"	pointer
)	O
;	O
}	O
squash_illegal_tag_chars	function
(	O
strob_str	function
(	O
dp	pointer
->	O
daM	pointer
->	O
Package	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_product	pointer
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_tag	pointer
" %s\n"	pointer
,	O
strob_str	function
(	O
dp	pointer
->	O
daM	pointer
->	O
Package	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_revision	pointer
" %s\n"	pointer
,	O
strob_str	function
(	O
dp	pointer
->	O
daM	pointer
->	O
Version_revision	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_control_directory	pointer
" \"\"\n"	pointer
)	O
;	O
if	O
(	O
dp	pointer
->	O
daM	pointer
->	O
Version_release	pointer
)	O
{	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"vendor_tag \"%s\"\n"	pointer
,	O
strob_str	function
(	O
dp	pointer
->	O
daM	pointer
->	O
Version_release	pointer
)	O
)	O
;	O
}	O
if	O
(	O
control_buf	pointer
)	O
{	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_control_file	pointer
" "	pointer
DEBPSF_PSF_CONTROL_DIR	pointer
"/"	pointer
DEBPSF_FILE_CONTROL	pointer
" control\n"	pointer
)	O
;	O
}	O
if	O
(	O
preinstall_buf	pointer
)	O
{	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_preinstall	pointer
" "	pointer
DEBPSF_PSF_CONTROL_DIR	pointer
"/"	pointer
DEBPSF_FILE_PREINSTALL	pointer
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
postinstall_buf	pointer
)	O
{	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_postinstall	pointer
" "	pointer
DEBPSF_PSF_CONTROL_DIR	pointer
"/"	pointer
DEBPSF_FILE_POSTINSTALL	pointer
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
preremove_buf	pointer
)	O
{	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_preremove	pointer
" "	pointer
DEBPSF_PSF_CONTROL_DIR	pointer
"/"	pointer
DEBPSF_FILE_PREREMOVE	pointer
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
postremove_buf	pointer
)	O
{	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_postremove	pointer
" "	pointer
DEBPSF_PSF_CONTROL_DIR	pointer
"/"	pointer
DEBPSF_FILE_POSTREMOVE	pointer
"\n"	pointer
)	O
;	O
}	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_fileset	pointer
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_tag	pointer
" bin\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_control_directory	pointer
" \"\"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_directory	pointer
" .\n"	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
data_xformat	pointer
=	O
xformat_open	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
arf_ustar	int
)	O
;	O
ret	int
=	O
xformat_open_archive_by_fd	function
(	O
data_xformat	pointer
,	O
dp	pointer
->	O
source_data_fdM	int
,	O
UINFILE_DETECT_OTARFORCE	O
|	O
UINFILE_DETECT_DEB_CONTEXT	O
,	O
(	O
mode_t	int
)	O
(	O
0	int
)	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
ret	int
=	O
-	O
2	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: debpsf error [%d]\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
ret	int
)	O
;	O
return	O
ret	int
;	O
}	O
ret	int
=	O
xformat_read_header	function
(	O
data_xformat	pointer
)	O
;	O
if	O
(	O
xformat_is_end_of_archive	function
(	O
data_xformat	pointer
)	O
)	O
{	O
ret	int
=	O
-	O
5	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: empty data archive [%d]\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
ret	int
)	O
;	O
return	O
ret	int
;	O
}	O
if	O
(	O
xformat_get_tar_typeflag	function
(	O
data_xformat	pointer
)	O
!=	O
DIRTYPE	char
)	O
{	O
ret	int
=	O
-	O
6	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: first file not a directory  [%d]\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
ret	int
)	O
;	O
return	O
ret	int
;	O
}	O
ahs	pointer
=	O
xformat_ahs_object	function
(	O
data_xformat	pointer
)	O
;	O
name	pointer
=	O
ahsStaticGetTarFilename	function
(	O
ahs	pointer
->	O
file_hdrM	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"# Note Using file -t d -o XX -g XX ./\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"# instead of file -t d -o XX -g XX /\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"# will be a broken package, this is a bug in swinstall\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
" "	pointer
SW_A_file	pointer
" -t d -o %s -g %s -m %o /\n"	pointer
,	O
ahsStaticGetTarUsername	function
(	O
ahs	pointer
->	O
file_hdrM	pointer
)	O
,	O
ahsStaticGetTarGroupname	function
(	O
ahs	pointer
->	O
file_hdrM	pointer
)	O
,	O
(	O
unsigned	O
int	O
)	O
(	O
ahs_get_perms	function
(	O
ahs	pointer
)	O
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_file	pointer
" *\n"	pointer
)	O
;	O
if	O
(	O
conffiles_buf	pointer
)	O
{	O
conffile_line	pointer
=	O
strob_strtok	function
(	O
tmp2	pointer
,	O
strob_str	function
(	O
conffiles_buf	pointer
)	O
,	O
"\n\r"	pointer
)	O
;	O
while	O
(	O
conffile_line	pointer
)	O
{	O
swlib_is_sh_tainted_string_fatal	function
(	O
conffile_line	pointer
)	O
;	O
normalize_leading_directory	function
(	O
tmp	pointer
,	O
conffile_line	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_file	pointer
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_source	pointer
" %s\n"	pointer
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_is_volatile	pointer
" true\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"\n"	pointer
)	O
;	O
conffile_line	pointer
=	O
strob_strtok	function
(	O
tmp2	pointer
,	O
NULL	O
,	O
"\n\r"	pointer
)	O
;	O
}	O
}	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_exclude	pointer
" control\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_exclude	pointer
" control/*\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_exclude	pointer
" PSF\n"	pointer
)	O
;	O
topsf_add_excludes	function
(	O
topsf	pointer
,	O
psf	pointer
)	O
;	O
xformat_close	function
(	O
data_xformat	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
strob_close	function
(	O
tmp2	pointer
)	O
;	O
strob_close	function
(	O
namebuf	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
