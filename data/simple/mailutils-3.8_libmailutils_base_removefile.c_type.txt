static	O
int	O
removedir	function
(	O
const	O
char	O
*	O
path	pointer
)	O
;	O
int	O
mu_remove_file	function
(	O
const	O
char	O
*	O
path	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
struct	O
stat	struct
st	pointer
;	O
if	O
(	O
stat	struct
(	O
path	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"can't stat file %s: %s"	pointer
)	O
,	O
path	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
return	O
errno	O
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
rc	int
=	O
removedir	function
(	O
path	pointer
)	O
;	O
else	O
if	O
(	O
unlink	function
(	O
path	pointer
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"can't unlink file %s: %s"	pointer
)	O
,	O
path	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
struct	O
nameent	struct
{	O
int	O
isdir	int
;	O
char	O
name	pointer
[	O
1	int
]	O
;	O
}	O
;	O
static	O
int	O
name_add	function
(	O
mu_list_t	pointer
list	pointer
,	O
char	O
const	O
*	O
name	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	long
len	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
struct	O
nameent	struct
*	O
ent	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
ent	pointer
)	O
+	O
len	int
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s"	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
ent	pointer
->	O
isdir	int
=	O
-	O
1	int
;	O
strcpy	function
(	O
ent	pointer
->	O
name	pointer
,	O
name	pointer
)	O
;	O
rc	int
=	O
mu_list_append	function
(	O
list	pointer
,	O
ent	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_list_append: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
free	function
(	O
ent	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
lsdir	function
(	O
const	O
char	O
*	O
path	pointer
,	O
mu_list_t	pointer
list	pointer
)	O
{	O
DIR	struct
*	O
dirp	pointer
;	O
struct	O
dirent	struct
*	O
dp	pointer
;	O
int	O
rc	int
=	O
0	int
;	O
dirp	pointer
=	O
opendir	function
(	O
path	pointer
)	O
;	O
if	O
(	O
dirp	pointer
==	O
NULL	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot open directory %s: %s"	pointer
,	O
path	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
while	O
(	O
(	O
dp	pointer
=	O
readdir	function
(	O
dirp	pointer
)	O
)	O
)	O
{	O
char	O
const	O
*	O
ename	pointer
=	O
dp	pointer
->	O
d_name	array
;	O
char	O
*	O
filename	pointer
;	O
if	O
(	O
ename	pointer
[	O
ename	pointer
[	O
0	int
]	O
!=	O
'.'	O
?	O
0	int
:	O
ename	pointer
[	O
1	int
]	O
!=	O
'.'	O
?	O
1	int
:	O
2	int
]	O
==	O
0	int
)	O
continue	O
;	O
filename	pointer
=	O
mu_make_file_name	O
(	O
path	pointer
,	O
ename	pointer
)	O
;	O
if	O
(	O
!	O
filename	pointer
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s: can't create file name: %s"	pointer
,	O
path	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
break	O
;	O
}	O
rc	int
=	O
name_add	function
(	O
list	pointer
,	O
filename	pointer
)	O
;	O
free	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
closedir	function
(	O
dirp	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
namecmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
nameent	struct
const	O
*	O
enta	pointer
=	O
a	pointer
;	O
struct	O
nameent	struct
const	O
*	O
entb	pointer
=	O
b	pointer
;	O
int	O
d	int
=	O
enta	pointer
->	O
isdir	int
-	O
entb	pointer
->	O
isdir	int
;	O
if	O
(	O
d	int
)	O
return	O
d	int
;	O
return	O
strcmp	function
(	O
entb	pointer
->	O
name	pointer
,	O
enta	pointer
->	O
name	pointer
)	O
;	O
}	O
static	O
int	O
check_parent_access	function
(	O
const	O
char	O
*	O
path	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
name	pointer
,	O
*	O
p	pointer
;	O
name	pointer
=	O
strdup	function
(	O
path	pointer
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
return	O
errno	O
;	O
p	pointer
=	O
strrchr	function
(	O
name	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
*	O
p	pointer
=	O
0	int
;	O
else	O
strcpy	function
(	O
name	pointer
,	O
"."	pointer
)	O
;	O
rc	int
=	O
access	function
(	O
name	pointer
,	O
R_OK	int
|	O
W_OK	int
|	O
X_OK	int
)	O
;	O
free	function
(	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"not enough privileges to remove files from %s"	pointer
)	O
,	O
name	pointer
)	O
)	O
;	O
return	O
EACCES	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
removedir	function
(	O
const	O
char	O
*	O
path	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
stat	struct
st	pointer
;	O
mu_list_t	pointer
namelist	pointer
;	O
mu_iterator_t	pointer
itr	pointer
;	O
struct	O
nameent	struct
*	O
ent	pointer
;	O
rc	int
=	O
check_parent_access	function
(	O
path	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_create	function
(	O
&	O
namelist	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_list_create: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
mu_list_set_destroy_item	function
(	O
namelist	pointer
,	O
mu_list_free_item	function
)	O
;	O
mu_list_set_comparator	function
(	O
namelist	pointer
,	O
namecmp	function
)	O
;	O
rc	int
=	O
name_add	function
(	O
namelist	pointer
,	O
path	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_list_destroy	function
(	O
&	O
namelist	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_list_get_iterator	function
(	O
namelist	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_list_get_iterator: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
mu_list_destroy	function
(	O
&	O
namelist	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
ent	pointer
)	O
;	O
if	O
(	O
lstat	function
(	O
ent	pointer
->	O
name	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
if	O
(	O
rc	int
==	O
ENOENT	int
)	O
continue	O
;	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"can't lstat file %s: %s"	pointer
)	O
,	O
ent	pointer
->	O
name	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
ent	pointer
->	O
isdir	int
=	O
1	int
;	O
if	O
(	O
access	function
(	O
ent	pointer
->	O
name	pointer
,	O
R_OK	int
|	O
W_OK	int
|	O
X_OK	int
)	O
)	O
{	O
rc	int
=	O
EACCES	int
;	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"not enough privileges to remove files from %s"	pointer
)	O
,	O
ent	pointer
->	O
name	pointer
)	O
)	O
;	O
}	O
else	O
rc	int
=	O
lsdir	function
(	O
ent	pointer
->	O
name	pointer
,	O
namelist	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
else	O
ent	pointer
->	O
isdir	int
=	O
0	int
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_list_sort	function
(	O
namelist	pointer
,	O
namecmp	function
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
ent	pointer
)	O
;	O
rc	int
=	O
(	O
ent	pointer
->	O
isdir	int
?	O
rmdir	function
:	O
unlink	function
)	O
(	O
ent	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_STREAM	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"can't remove %s: %s"	pointer
)	O
,	O
ent	pointer
->	O
name	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
namelist	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
