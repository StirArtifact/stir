static	O
void	O
usage	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"usage: %s [-r N] [-l [+-]N] FILE [[-l [+-]N] FILE...]\n"	pointer
,	O
mu_program_name	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  -l N       set left margin\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  -l +N      move left margin N chars to the right from the current position\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  -l -N      move left margin N chars to the left from the current position\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  -r N       set right margin\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  -h, -?     display this help\n"	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
unsigned	O
left	int
=	O
0	int
,	O
right	int
=	O
80	int
;	O
mu_stream_t	pointer
str	pointer
;	O
int	O
i	int
;	O
mu_set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
char	O
*	O
arg	pointer
=	O
argv	pointer
[	O
i	int
]	O
;	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-l"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
arg	pointer
[	O
2	int
]	O
==	O
0	int
)	O
{	O
++	O
i	int
;	O
left	int
=	O
strtoul	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
}	O
else	O
{	O
left	int
=	O
strtoul	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
2	int
,	O
NULL	O
,	O
10	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-r"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
arg	pointer
[	O
2	int
]	O
==	O
0	int
)	O
{	O
++	O
i	int
;	O
right	int
=	O
strtoul	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
NULL	O
,	O
10	int
)	O
;	O
}	O
else	O
{	O
right	int
=	O
strtoul	function
(	O
argv	pointer
[	O
i	int
]	O
+	O
2	int
,	O
NULL	O
,	O
10	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--"	pointer
)	O
==	O
0	int
)	O
{	O
i	int
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
arg	pointer
[	O
1	int
]	O
==	O
0	int
)	O
break	O
;	O
else	O
if	O
(	O
(	O
arg	pointer
[	O
1	int
]	O
==	O
'h'	O
||	O
arg	pointer
[	O
1	int
]	O
==	O
'?'	O
)	O
&&	O
arg	pointer
[	O
2	int
]	O
==	O
0	int
)	O
{	O
usage	function
(	O
stdout	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unrecognized argument %s\n"	pointer
,	O
mu_program_name	pointer
,	O
arg	pointer
)	O
;	O
usage	function
(	O
stderr	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
argc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: no files\n"	pointer
,	O
mu_program_name	pointer
)	O
;	O
usage	function
(	O
stderr	pointer
)	O
;	O
return	O
1	int
;	O
}	O
mu_stdstream_setup	function
(	O
MU_STDSTREAM_RESET_NONE	int
)	O
;	O
MU_ASSERT	O
(	O
mu_wordwrap_stream_create	function
(	O
&	O
str	pointer
,	O
mu_strout	pointer
,	O
left	int
,	O
right	int
)	O
)	O
;	O
for	O
(	O
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
char	O
*	O
arg	pointer
=	O
argv	pointer
[	O
i	int
]	O
;	O
if	O
(	O
strncmp	function
(	O
arg	pointer
,	O
"-l"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
arg	pointer
[	O
2	int
]	O
==	O
0	int
)	O
{	O
++	O
i	int
;	O
arg	pointer
=	O
argv	pointer
[	O
i	int
]	O
;	O
}	O
else	O
arg	pointer
+=	O
2	int
;	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'+'	O
||	O
arg	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
int	O
off	int
=	O
strtol	function
(	O
arg	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_ioctl	function
(	O
str	pointer
,	O
MU_IOCTL_WORDWRAPSTREAM	int
,	O
MU_IOCTL_WORDWRAP_MOVE_MARGIN	int
,	O
&	O
off	int
)	O
)	O
;	O
}	O
else	O
{	O
left	int
=	O
strtoul	function
(	O
arg	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_ioctl	function
(	O
str	pointer
,	O
MU_IOCTL_WORDWRAPSTREAM	int
,	O
MU_IOCTL_WORDWRAP_SET_MARGIN	int
,	O
&	O
left	int
)	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'-'	O
&&	O
arg	pointer
[	O
1	int
]	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_stream_copy	function
(	O
str	pointer
,	O
mu_strin	pointer
,	O
0	int
,	O
NULL	O
)	O
)	O
;	O
mu_stream_close	function
(	O
mu_strin	pointer
)	O
;	O
}	O
else	O
{	O
mu_stream_t	pointer
in	pointer
;	O
MU_ASSERT	O
(	O
mu_file_stream_create	function
(	O
&	O
in	pointer
,	O
arg	pointer
,	O
MU_STREAM_READ	int
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_copy	function
(	O
str	pointer
,	O
in	pointer
,	O
0	int
,	O
NULL	O
)	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
in	pointer
)	O
;	O
}	O
}	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
return	O
0	int
;	O
}	O
