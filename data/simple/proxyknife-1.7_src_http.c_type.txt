int	O
CONVIAHTTP	function
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct
*	O
start	pointer
,	O
struct	O
timeval	struct
*	O
end	pointer
,	O
struct	O
thread_mem	struct
*	O
thread_mem	struct
)	O
;	O
int	O
GET	function
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct
*	O
req	pointer
,	O
struct	O
thread_mem	struct
*	O
thread_mem	struct
)	O
;	O
int	O
PGET	function
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct
*	O
send	function
,	O
struct	O
thread_mem	struct
*	O
thread_mem	struct
)	O
;	O
int	O
PCONGET	function
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct
*	O
start	pointer
,	O
struct	O
timeval	struct
*	O
end	pointer
,	O
struct	O
timeval	struct
*	O
req	pointer
,	O
struct	O
thread_mem	struct
*	O
thread_mem	struct
)	O
;	O
void	O
http_build_auth	function
(	O
void	O
)	O
;	O
void	O
http_build_auth	function
(	O
)	O
{	O
int	O
blen	int
,	O
dlen	int
,	O
slen	int
,	O
elen	int
;	O
blen	int
=	O
strlen	function
(	O
BASIC	pointer
)	O
;	O
slen	int
=	O
strlen	function
(	O
my	struct
.	O
myuser	pointer
)	O
+	O
strlen	function
(	O
my	struct
.	O
mypass	pointer
)	O
+	O
1	int
;	O
my	struct
.	O
myuserpass	pointer
=	O
xmalloc	function
(	O
slen	int
+	O
1	int
)	O
;	O
snprintf	function
(	O
my	struct
.	O
myuserpass	pointer
,	O
slen	int
+	O
1	int
,	O
"%s:%s"	pointer
,	O
my	struct
.	O
myuser	pointer
,	O
my	struct
.	O
mypass	pointer
)	O
;	O
elen	int
=	O
slen	int
/	O
3	int
*	O
4	int
+	O
(	O
(	O
slen	int
%	O
3	int
)	O
?	O
4	int
:	O
0	int
)	O
;	O
my	struct
.	O
header_auth	pointer
=	O
xmalloc	function
(	O
blen	int
+	O
elen	int
+	O
1	int
)	O
;	O
memmove	function
(	O
my	struct
.	O
header_auth	pointer
,	O
BASIC	pointer
,	O
blen	int
)	O
;	O
dlen	int
=	O
base64en	function
(	O
my	struct
.	O
header_auth	pointer
+	O
blen	int
,	O
elen	int
,	O
(	O
unsigned	O
char	O
*	O
)	O
my	struct
.	O
myuserpass	pointer
,	O
slen	int
)	O
;	O
xfree	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
my	struct
.	O
myuserpass	pointer
)	O
)	O
;	O
xfree	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
my	struct
.	O
myuser	pointer
)	O
)	O
;	O
xfree	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
my	struct
.	O
mypass	pointer
)	O
)	O
;	O
if	O
(	O
dlen	int
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: http_build_auth:Error in base64encode\n"	pointer
,	O
progname	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
dlen	int
!=	O
elen	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: http_build_auth:base64en:This error is impossible,good news!\n"	pointer
,	O
progname	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
my	struct
.	O
header_auth	pointer
[	O
blen	int
+	O
dlen	int
]	O
=	O
'\0'	O
;	O
}	O
int	O
CONVIAHTTP_MAIN	function
(	O
int	O
sockfd	int
,	O
char	O
*	O
host	pointer
,	O
char	O
*	O
port	pointer
)	O
{	O
int	O
ret	int
,	O
len	int
,	O
offset	long
;	O
char	O
*	O
p	pointer
;	O
ret	int
=	O
connect	function
(	O
sockfd	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
(	O
my	struct
.	O
myaddr	struct
)	O
,	O
sizeof	O
(	O
struct	O
sockaddr	struct
)	O
)	O
;	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"CONVIAHTTP:connect:Connect to myaddr"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
my	struct
.	O
mytype	int
==	O
HTTP_CONNECT_AUTH	int
)	O
{	O
len	int
=	O
strlen	function
(	O
"CONNECT  HTTP/1.0"	pointer
)	O
+	O
strlen	function
(	O
host	pointer
)	O
+	O
strlen	function
(	O
":"	pointer
)	O
+	O
strlen	function
(	O
port	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
user_agent	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
NOCACHE	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
(	O
const	O
char	O
*	O
)	O
my	struct
.	O
header_auth	pointer
)	O
+	O
2	int
+	O
2	int
;	O
my	struct
.	O
buffer	pointer
=	O
xmalloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
my	struct
.	O
buffer	pointer
==	O
NULL	O
)	O
{	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
snprintf	function
(	O
my	struct
.	O
buffer	pointer
,	O
len	int
+	O
1	int
,	O
"CONNECT %s:%s HTTP/1.0\r\n"	pointer
"%s\r\n"	pointer
"%s\r\n"	pointer
"%s\r\n"	pointer
"\r\n"	pointer
,	O
host	pointer
,	O
port	pointer
,	O
user_agent	pointer
,	O
NOCACHE	pointer
,	O
my	struct
.	O
header_auth	pointer
)	O
;	O
}	O
else	O
{	O
len	int
=	O
strlen	function
(	O
"CONNECT  HTTP/1.0"	pointer
)	O
+	O
strlen	function
(	O
host	pointer
)	O
+	O
strlen	function
(	O
":"	pointer
)	O
+	O
strlen	function
(	O
port	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
user_agent	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
NOCACHE	pointer
)	O
+	O
2	int
+	O
2	int
;	O
my	struct
.	O
buffer	pointer
=	O
xmalloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
my	struct
.	O
buffer	pointer
==	O
NULL	O
)	O
{	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
snprintf	function
(	O
my	struct
.	O
buffer	pointer
,	O
len	int
+	O
1	int
,	O
"CONNECT %s:%s HTTP/1.0\r\n"	pointer
"%s\r\n"	pointer
"%s\r\n"	pointer
"\r\n"	pointer
,	O
host	pointer
,	O
port	pointer
,	O
user_agent	pointer
,	O
NOCACHE	pointer
)	O
;	O
}	O
*	O
(	O
my	struct
.	O
buffer	pointer
+	O
len	int
)	O
=	O
'\0'	O
;	O
ret	int
=	O
write	pointer
(	O
sockfd	int
,	O
my	struct
.	O
buffer	pointer
,	O
strlen	function
(	O
my	struct
.	O
buffer	pointer
)	O
)	O
;	O
if	O
(	O
ret	int
!=	O
strlen	function
(	O
my	struct
.	O
buffer	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: CONVIAHTTP:Fail to write completely\n"	pointer
,	O
progname	pointer
)	O
;	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
perror	function
(	O
"CONVIAHTTP:write:Write to myaddr"	pointer
)	O
;	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
my	struct
.	O
buffer	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
xfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
my	struct
.	O
buffer	pointer
)	O
)	O
;	O
my	struct
.	O
buffer	pointer
=	O
xmalloc	function
(	O
my	struct
.	O
myconreplysize	int
)	O
;	O
if	O
(	O
my	struct
.	O
buffer	pointer
==	O
NULL	O
)	O
{	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
memset	function
(	O
my	struct
.	O
buffer	pointer
,	O
0	int
,	O
my	struct
.	O
myconreplysize	int
)	O
;	O
p	pointer
=	O
my	struct
.	O
buffer	pointer
;	O
offset	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
ret	int
=	O
read	pointer
(	O
sockfd	int
,	O
p	pointer
,	O
my	struct
.	O
myconreplysize	int
-	O
offset	long
-	O
1	int
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
{	O
break	O
;	O
}	O
if	O
(	O
(	O
strstr	function
(	O
my	struct
.	O
buffer	pointer
,	O
CONNECT_SUCCESS0	pointer
)	O
!=	O
NULL	O
)	O
||	O
(	O
strstr	function
(	O
my	struct
.	O
buffer	pointer
,	O
CONNECT_SUCCESS1	pointer
)	O
!=	O
NULL	O
)	O
)	O
{	O
pxfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
my	struct
.	O
buffer	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
p	pointer
+=	O
ret	int
;	O
offset	long
=	O
p	pointer
-	O
my	struct
.	O
buffer	pointer
;	O
if	O
(	O
(	O
offset	long
)	O
>=	O
(	O
my	struct
.	O
myconreplysize	int
-	O
1	int
)	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: CONVIAHTTP:Reply to CONVIAHTTP is wrong:%s\n"	pointer
,	O
progname	pointer
,	O
my	struct
.	O
buffer	pointer
)	O
;	O
pxfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
my	struct
.	O
buffer	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
void	O
build_req_get_via_http_proxy	function
(	O
)	O
{	O
int	O
len	int
;	O
len	int
=	O
strlen	function
(	O
"GET  HTTP/1.0"	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
target	struct
)	O
+	O
2	int
+	O
strlen	function
(	O
"Host: "	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
targethost	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
user_agent	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
NOCACHE	pointer
)	O
+	O
2	int
+	O
2	int
;	O
target	struct
.	O
req_get_via_http_proxy	pointer
=	O
xmalloc	function
(	O
len	int
+	O
1	int
)	O
;	O
snprintf	function
(	O
target	struct
.	O
req_get_via_http_proxy	pointer
,	O
len	int
+	O
1	int
,	O
"GET %s HTTP/1.0\r\n"	pointer
"Host: %s\r\n"	pointer
"%s\r\n%s\r\n"	pointer
"\r\n"	pointer
,	O
target	struct
.	O
target	struct
,	O
target	struct
.	O
targethost	pointer
,	O
user_agent	pointer
,	O
NOCACHE	pointer
)	O
;	O
target	struct
.	O
req_get_via_http_proxy	pointer
[	O
len	int
]	O
=	O
'\0'	O
;	O
}	O
void	O
build_con_via_http_proxy	function
(	O
)	O
{	O
int	O
len	int
;	O
len	int
=	O
strlen	function
(	O
"CONNECT : HTTP/1.0"	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
targethost	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
targetport	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
"Host: "	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
targethost	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
user_agent	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
NOCACHE	pointer
)	O
+	O
2	int
+	O
2	int
;	O
target	struct
.	O
con_via_http_proxy	pointer
=	O
xmalloc	function
(	O
len	int
+	O
1	int
)	O
;	O
snprintf	function
(	O
target	struct
.	O
con_via_http_proxy	pointer
,	O
len	int
+	O
1	int
,	O
"CONNECT %s:%s HTTP/1.0\r\n"	pointer
"Host: %s\r\n"	pointer
"%s\r\n%s\r\n"	pointer
"\r\n"	pointer
,	O
target	struct
.	O
targethost	pointer
,	O
target	struct
.	O
targetport	pointer
,	O
target	struct
.	O
targethost	pointer
,	O
user_agent	pointer
,	O
NOCACHE	pointer
)	O
;	O
target	struct
.	O
con_via_http_proxy	pointer
[	O
len	int
]	O
=	O
'\0'	O
;	O
}	O
void	O
http_build_get	function
(	O
)	O
{	O
int	O
len	int
;	O
len	int
=	O
strlen	function
(	O
"GET  HTTP/1.0"	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
targetpath	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
"Host: "	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
targethost	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
user_agent	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
NOCACHE	pointer
)	O
+	O
2	int
+	O
2	int
;	O
target	struct
.	O
req	pointer
=	O
xmalloc	function
(	O
len	int
+	O
1	int
)	O
;	O
snprintf	function
(	O
target	struct
.	O
req	pointer
,	O
len	int
+	O
1	int
,	O
"GET %s HTTP/1.0\r\n"	pointer
"Host: %s\r\n"	pointer
"%s\r\n%s\r\n"	pointer
"\r\n"	pointer
,	O
target	struct
.	O
targetpath	pointer
,	O
target	struct
.	O
targethost	pointer
,	O
user_agent	pointer
,	O
NOCACHE	pointer
)	O
;	O
target	struct
.	O
req	pointer
[	O
len	int
]	O
=	O
'\0'	O
;	O
}	O
int	O
CONVIAHTTP	function
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct
*	O
start	pointer
,	O
struct	O
timeval	struct
*	O
end	pointer
,	O
struct	O
thread_mem	struct
*	O
thread_mem	struct
)	O
{	O
int	O
ret	int
,	O
len	int
,	O
offset	long
;	O
char	O
*	O
p	pointer
;	O
ret	int
=	O
connect	function
(	O
sockfd	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
(	O
my	struct
.	O
myaddr	struct
)	O
,	O
sizeof	O
(	O
struct	O
sockaddr	struct
)	O
)	O
;	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"CONVIAHTTP:connect:Connect to myaddr"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
my	struct
.	O
mytype	int
==	O
HTTP_CONNECT_AUTH	int
)	O
{	O
len	int
=	O
strlen	function
(	O
"CONNECT  HTTP/1.0"	pointer
)	O
+	O
strlen	function
(	O
thread_mem	struct
->	O
queue	struct
.	O
testproxy	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
user_agent	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
NOCACHE	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
(	O
const	O
char	O
*	O
)	O
my	struct
.	O
header_auth	pointer
)	O
+	O
2	int
+	O
2	int
;	O
thread_mem	struct
->	O
request	pointer
=	O
pmalloc	function
(	O
(	O
len	int
+	O
1	int
)	O
,	O
thread_mem	struct
)	O
;	O
if	O
(	O
thread_mem	struct
->	O
request	pointer
==	O
NULL	O
)	O
{	O
ret	int
=	O
EXIT_FAILURE	int
;	O
x_pthread_exit	function
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct
)	O
;	O
}	O
snprintf	function
(	O
thread_mem	struct
->	O
request	pointer
,	O
len	int
+	O
1	int
,	O
"CONNECT %s HTTP/1.0\r\n"	pointer
"%s\r\n"	pointer
"%s\r\n"	pointer
"%s\r\n"	pointer
"\r\n"	pointer
,	O
thread_mem	struct
->	O
queue	struct
.	O
testproxy	pointer
,	O
user_agent	pointer
,	O
NOCACHE	pointer
,	O
my	struct
.	O
header_auth	pointer
)	O
;	O
}	O
else	O
{	O
len	int
=	O
strlen	function
(	O
"CONNECT  HTTP/1.0"	pointer
)	O
+	O
strlen	function
(	O
thread_mem	struct
->	O
queue	struct
.	O
testproxy	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
user_agent	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
NOCACHE	pointer
)	O
+	O
2	int
+	O
2	int
;	O
thread_mem	struct
->	O
request	pointer
=	O
pmalloc	function
(	O
(	O
len	int
+	O
1	int
)	O
,	O
thread_mem	struct
)	O
;	O
if	O
(	O
thread_mem	struct
->	O
request	pointer
==	O
NULL	O
)	O
{	O
ret	int
=	O
EXIT_FAILURE	int
;	O
x_pthread_exit	function
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct
)	O
;	O
}	O
snprintf	function
(	O
thread_mem	struct
->	O
request	pointer
,	O
len	int
+	O
1	int
,	O
"CONNECT %s HTTP/1.0\r\n"	pointer
"%s\r\n"	pointer
"%s\r\n"	pointer
"\r\n"	pointer
,	O
thread_mem	struct
->	O
queue	struct
.	O
testproxy	pointer
,	O
user_agent	pointer
,	O
NOCACHE	pointer
)	O
;	O
}	O
*	O
(	O
(	O
thread_mem	struct
->	O
request	pointer
)	O
+	O
len	int
)	O
=	O
'\0'	O
;	O
gettimeofday	function
(	O
start	pointer
,	O
NULL	O
)	O
;	O
ret	int
=	O
write	pointer
(	O
sockfd	int
,	O
thread_mem	struct
->	O
request	pointer
,	O
strlen	function
(	O
thread_mem	struct
->	O
request	pointer
)	O
)	O
;	O
if	O
(	O
ret	int
!=	O
strlen	function
(	O
thread_mem	struct
->	O
request	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: CONVIAHTTP:Fail to write completely\n"	pointer
,	O
progname	pointer
)	O
;	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
perror	function
(	O
"CONVIAHTTP:write:Write to myaddr"	pointer
)	O
;	O
pxfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct
->	O
request	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
pxfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct
->	O
request	pointer
)	O
)	O
;	O
thread_mem	struct
->	O
reply	pointer
=	O
pmalloc	function
(	O
my	struct
.	O
myconreplysize	int
,	O
thread_mem	struct
)	O
;	O
if	O
(	O
thread_mem	struct
->	O
reply	pointer
==	O
NULL	O
)	O
{	O
ret	int
=	O
EXIT_FAILURE	int
;	O
x_pthread_exit	function
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct
)	O
;	O
}	O
memset	function
(	O
thread_mem	struct
->	O
reply	pointer
,	O
0	int
,	O
my	struct
.	O
myconreplysize	int
)	O
;	O
p	pointer
=	O
thread_mem	struct
->	O
reply	pointer
;	O
while	O
(	O
1	int
)	O
{	O
offset	long
=	O
p	pointer
-	O
thread_mem	struct
->	O
reply	pointer
;	O
ret	int
=	O
read	pointer
(	O
sockfd	int
,	O
p	pointer
,	O
my	struct
.	O
myconreplysize	int
-	O
offset	long
-	O
1	int
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
{	O
break	O
;	O
}	O
gettimeofday	function
(	O
end	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
(	O
strstr	function
(	O
thread_mem	struct
->	O
reply	pointer
,	O
CONNECT_SUCCESS0	pointer
)	O
!=	O
NULL	O
)	O
||	O
(	O
strstr	function
(	O
thread_mem	struct
->	O
reply	pointer
,	O
CONNECT_SUCCESS1	pointer
)	O
!=	O
NULL	O
)	O
)	O
{	O
pxfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct
->	O
reply	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
p	pointer
+=	O
ret	int
;	O
if	O
(	O
(	O
p	pointer
-	O
thread_mem	struct
->	O
reply	pointer
)	O
>=	O
(	O
my	struct
.	O
myconreplysize	int
-	O
1	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: CONVIAHTTP:Reply to CONVIAHTTP is wrong:%s\n"	pointer
,	O
progname	pointer
,	O
thread_mem	struct
->	O
reply	pointer
)	O
;	O
pxfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct
->	O
reply	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
PGET	function
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct
*	O
send	function
,	O
struct	O
thread_mem	struct
*	O
thread_mem	struct
)	O
{	O
int	O
numbytes	int
,	O
len	int
;	O
int	O
ret	int
;	O
ret	int
=	O
EXIT_FAILURE	int
;	O
if	O
(	O
target	struct
.	O
checkreqin	pointer
!=	O
NULL	O
)	O
{	O
len	int
=	O
strlen	function
(	O
target	struct
.	O
req	pointer
)	O
;	O
gettimeofday	function
(	O
send	function
,	O
NULL	O
)	O
;	O
numbytes	int
=	O
write	pointer
(	O
sockfd	int
,	O
target	struct
.	O
req	pointer
,	O
len	int
)	O
;	O
}	O
else	O
{	O
len	int
=	O
strlen	function
(	O
target	struct
.	O
req_get_via_http_proxy	pointer
)	O
;	O
gettimeofday	function
(	O
send	function
,	O
NULL	O
)	O
;	O
numbytes	int
=	O
write	pointer
(	O
sockfd	int
,	O
target	struct
.	O
req_get_via_http_proxy	pointer
,	O
len	int
)	O
;	O
}	O
if	O
(	O
numbytes	int
!=	O
len	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s %s: PGET: Fail to write completely:\n"	pointer
,	O
progname	pointer
,	O
__FILE__	O
)	O
;	O
if	O
(	O
numbytes	int
<	O
0	int
)	O
perror	function
(	O
"PGET:write:Write to myaddr"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
numbytes	int
;	O
}	O
int	O
GET	function
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct
*	O
req	pointer
,	O
struct	O
thread_mem	struct
*	O
thread_mem	struct
)	O
{	O
int	O
len	int
,	O
numbytes	int
;	O
int	O
ret	int
;	O
ret	int
=	O
EXIT_FAILURE	int
;	O
if	O
(	O
target	struct
.	O
req	pointer
!=	O
NULL	O
)	O
{	O
len	int
=	O
strlen	function
(	O
target	struct
.	O
req	pointer
)	O
;	O
gettimeofday	function
(	O
req	pointer
,	O
NULL	O
)	O
;	O
numbytes	int
=	O
write	pointer
(	O
sockfd	int
,	O
target	struct
.	O
req	pointer
,	O
len	int
)	O
;	O
}	O
else	O
{	O
len	int
=	O
strlen	function
(	O
"GET  HTTP/1.0"	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
targetpath	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
"Host: "	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
targethost	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
user_agent	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
NOCACHE	pointer
)	O
+	O
2	int
+	O
2	int
;	O
thread_mem	struct
->	O
request	pointer
=	O
pmalloc	function
(	O
len	int
+	O
1	int
,	O
thread_mem	struct
)	O
;	O
if	O
(	O
thread_mem	struct
->	O
request	pointer
==	O
NULL	O
)	O
x_pthread_exit	function
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct
)	O
;	O
snprintf	function
(	O
thread_mem	struct
->	O
request	pointer
,	O
len	int
+	O
1	int
,	O
"GET %s HTTP/1.0\r\n"	pointer
"Host: %s\r\n"	pointer
"%s\r\n%s\r\n"	pointer
"\r\n"	pointer
,	O
target	struct
.	O
targetpath	pointer
,	O
target	struct
.	O
targethost	pointer
,	O
user_agent	pointer
,	O
NOCACHE	pointer
)	O
;	O
gettimeofday	function
(	O
req	pointer
,	O
NULL	O
)	O
;	O
numbytes	int
=	O
write	pointer
(	O
sockfd	int
,	O
thread_mem	struct
->	O
request	pointer
,	O
len	int
)	O
;	O
pxfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct
->	O
request	pointer
)	O
)	O
;	O
}	O
if	O
(	O
numbytes	int
!=	O
len	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: GET:Fail to write %d completely!Only %d!\n"	pointer
,	O
progname	pointer
,	O
len	int
,	O
numbytes	int
)	O
;	O
if	O
(	O
numbytes	int
<	O
0	int
)	O
perror	function
(	O
"GET:write:Write to myaddr"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
numbytes	int
;	O
}	O
int	O
PCONGET	function
(	O
int	O
sockfd	int
,	O
struct	O
timeval	struct
*	O
start	pointer
,	O
struct	O
timeval	struct
*	O
end	pointer
,	O
struct	O
timeval	struct
*	O
req	pointer
,	O
struct	O
thread_mem	struct
*	O
thread_mem	struct
)	O
{	O
int	O
numbytes	int
,	O
len	int
;	O
char	O
*	O
p	pointer
;	O
int	O
ret	int
;	O
ret	int
=	O
EXIT_FAILURE	int
;	O
len	int
=	O
strlen	function
(	O
"CONNECT : HTTP/1.0"	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
targethost	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
targetport	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
"Host: "	pointer
)	O
+	O
strlen	function
(	O
target	struct
.	O
targethost	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
user_agent	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
NOCACHE	pointer
)	O
+	O
2	int
+	O
2	int
;	O
thread_mem	struct
->	O
request	pointer
=	O
pmalloc	function
(	O
len	int
+	O
1	int
,	O
thread_mem	struct
)	O
;	O
if	O
(	O
thread_mem	struct
==	O
NULL	O
)	O
x_pthread_exit	function
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct
)	O
;	O
snprintf	function
(	O
thread_mem	struct
->	O
request	pointer
,	O
len	int
+	O
1	int
,	O
"CONNECT %s:%s HTTP/1.0\r\n"	pointer
"Host: %s\r\n"	pointer
"%s\r\n%s\r\n"	pointer
"\r\n"	pointer
,	O
target	struct
.	O
targethost	pointer
,	O
target	struct
.	O
targetport	pointer
,	O
target	struct
.	O
targethost	pointer
,	O
user_agent	pointer
,	O
NOCACHE	pointer
)	O
;	O
thread_mem	struct
->	O
request	pointer
[	O
len	int
]	O
=	O
'\0'	O
;	O
gettimeofday	function
(	O
start	pointer
,	O
NULL	O
)	O
;	O
numbytes	int
=	O
write	pointer
(	O
sockfd	int
,	O
thread_mem	struct
->	O
request	pointer
,	O
strlen	function
(	O
thread_mem	struct
->	O
request	pointer
)	O
)	O
;	O
pxfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct
->	O
request	pointer
)	O
)	O
;	O
if	O
(	O
numbytes	int
!=	O
len	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: PCONGET:write:Fail to write completely!\n"	pointer
,	O
progname	pointer
)	O
;	O
if	O
(	O
numbytes	int
<	O
0	int
)	O
perror	function
(	O
"PCONGET:write:Write to myaddr"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
thread_mem	struct
->	O
reply	pointer
=	O
pmalloc	function
(	O
test	struct
.	O
testconreplysize	int
,	O
thread_mem	struct
)	O
;	O
if	O
(	O
thread_mem	struct
->	O
reply	pointer
==	O
NULL	O
)	O
x_pthread_exit	function
(	O
(	O
void	O
*	O
)	O
&	O
ret	int
,	O
thread_mem	struct
)	O
;	O
memset	function
(	O
thread_mem	struct
->	O
reply	pointer
,	O
0	int
,	O
test	struct
.	O
testconreplysize	int
)	O
;	O
p	pointer
=	O
thread_mem	struct
->	O
reply	pointer
;	O
while	O
(	O
1	int
)	O
{	O
numbytes	int
=	O
read	pointer
(	O
sockfd	int
,	O
p	pointer
,	O
test	struct
.	O
testconreplysize	int
-	O
(	O
p	pointer
-	O
thread_mem	struct
->	O
reply	pointer
)	O
-	O
1	int
)	O
;	O
gettimeofday	function
(	O
end	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
numbytes	int
<=	O
0	int
)	O
{	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: PCONGET:Reply to concon is wrong:%s\n"	pointer
,	O
progname	pointer
,	O
thread_mem	struct
->	O
reply	pointer
)	O
;	O
pxfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct
->	O
reply	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
strstr	function
(	O
thread_mem	struct
->	O
reply	pointer
,	O
CONNECT_SUCCESS0	pointer
)	O
!=	O
NULL	O
)	O
||	O
(	O
strstr	function
(	O
thread_mem	struct
->	O
reply	pointer
,	O
CONNECT_SUCCESS1	pointer
)	O
!=	O
NULL	O
)	O
)	O
break	O
;	O
p	pointer
+=	O
numbytes	int
;	O
if	O
(	O
(	O
p	pointer
-	O
thread_mem	struct
->	O
reply	pointer
)	O
==	O
test	struct
.	O
testconreplysize	int
-	O
1	int
)	O
{	O
thread_mem	struct
->	O
reply	pointer
[	O
test	struct
.	O
testconreplysize	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s %s: PCONGET:Reply to concon is wrong:%s\n"	pointer
,	O
progname	pointer
,	O
__FILE__	O
,	O
thread_mem	struct
->	O
reply	pointer
)	O
;	O
pxfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct
->	O
reply	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
pxfree	function
(	O
(	O
void	O
*	O
*	O
)	O
&	O
(	O
thread_mem	struct
->	O
reply	pointer
)	O
)	O
;	O
return	O
GET	function
(	O
sockfd	int
,	O
req	pointer
,	O
thread_mem	struct
)	O
;	O
}	O
