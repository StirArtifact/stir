bool	bool
execute_java_class	function
(	O
const	O
char	O
*	O
class_name	pointer
,	O
const	O
char	O
*	O
const	O
*	O
classpaths	pointer
,	O
unsigned	O
int	O
classpaths_count	int
,	O
bool	bool
use_minimal_classpath	bool
,	O
const	O
char	O
*	O
exe_dir	pointer
,	O
const	O
char	O
*	O
const	O
*	O
args	pointer
,	O
bool	bool
verbose	bool
,	O
bool	bool
quiet	bool
,	O
execute_fn	function
*	O
executer	pointer
,	O
void	O
*	O
private_data	pointer
)	O
{	O
bool	bool
err	bool
=	O
false	int
;	O
unsigned	O
int	O
nargs	int
;	O
char	O
*	O
old_JAVA_HOME	pointer
;	O
{	O
const	O
char	O
*	O
const	O
*	O
arg	pointer
;	O
for	O
(	O
nargs	int
=	O
0	int
,	O
arg	pointer
=	O
args	pointer
;	O
*	O
arg	pointer
!=	O
NULL	O
;	O
nargs	int
++	O
,	O
arg	pointer
++	O
)	O
;	O
}	O
if	O
(	O
exe_dir	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
exe_pathname	pointer
=	O
xconcatenated_filename	function
(	O
exe_dir	pointer
,	O
class_name	pointer
,	O
EXEEXT	O
)	O
;	O
char	O
*	O
old_classpath	pointer
;	O
char	O
*	O
*	O
argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
1	int
+	O
nargs	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
unsigned	O
int	O
i	int
;	O
old_classpath	pointer
=	O
set_classpath	function
(	O
classpaths	pointer
,	O
classpaths_count	int
,	O
use_minimal_classpath	bool
,	O
verbose	bool
)	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
exe_pathname	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
nargs	int
;	O
i	int
++	O
)	O
argv	pointer
[	O
1	int
+	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
args	pointer
[	O
i	int
]	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	pointer
=	O
shell_quote_argv	function
(	O
argv	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
}	O
err	bool
=	O
executer	pointer
(	O
class_name	pointer
,	O
exe_pathname	pointer
,	O
argv	pointer
,	O
private_data	pointer
)	O
;	O
reset_classpath	function
(	O
old_classpath	pointer
)	O
;	O
freea	function
(	O
argv	pointer
)	O
;	O
goto	O
done1	O
;	O
}	O
{	O
const	O
char	O
*	O
java	pointer
=	O
getenv	function
(	O
"JAVA"	pointer
)	O
;	O
if	O
(	O
java	pointer
!=	O
NULL	O
&&	O
java	pointer
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
char	O
*	O
old_classpath	pointer
;	O
unsigned	O
int	O
command_length	int
;	O
char	O
*	O
command	pointer
;	O
char	O
*	O
argv	pointer
[	O
4	int
]	O
;	O
const	O
char	O
*	O
const	O
*	O
arg	pointer
;	O
char	O
*	O
p	pointer
;	O
old_classpath	pointer
=	O
set_classpath	function
(	O
classpaths	pointer
,	O
classpaths_count	int
,	O
false	int
,	O
verbose	bool
)	O
;	O
command_length	int
=	O
strlen	function
(	O
java	pointer
)	O
;	O
command_length	int
+=	O
1	int
+	O
shell_quote_length	function
(	O
class_name	pointer
)	O
;	O
for	O
(	O
arg	pointer
=	O
args	pointer
;	O
*	O
arg	pointer
!=	O
NULL	O
;	O
arg	pointer
++	O
)	O
command_length	int
+=	O
1	int
+	O
shell_quote_length	function
(	O
*	O
arg	pointer
)	O
;	O
command_length	int
+=	O
1	int
;	O
command	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
command_length	int
)	O
;	O
p	pointer
=	O
command	pointer
;	O
memcpy	function
(	O
p	pointer
,	O
java	pointer
,	O
strlen	function
(	O
java	pointer
)	O
)	O
;	O
p	pointer
+=	O
strlen	function
(	O
java	pointer
)	O
;	O
*	O
p	pointer
++	O
=	O
' '	O
;	O
p	pointer
=	O
shell_quote_copy	function
(	O
p	pointer
,	O
class_name	pointer
)	O
;	O
for	O
(	O
arg	pointer
=	O
args	pointer
;	O
*	O
arg	pointer
!=	O
NULL	O
;	O
arg	pointer
++	O
)	O
{	O
*	O
p	pointer
++	O
=	O
' '	O
;	O
p	pointer
=	O
shell_quote_copy	function
(	O
p	pointer
,	O
*	O
arg	pointer
)	O
;	O
}	O
*	O
p	pointer
++	O
=	O
'\0'	O
;	O
if	O
(	O
p	pointer
-	O
command	pointer
>	O
command_length	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
verbose	bool
)	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
BOURNE_SHELL	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
"-c"	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
command	pointer
;	O
argv	pointer
[	O
3	int
]	O
=	O
NULL	O
;	O
err	bool
=	O
executer	pointer
(	O
java	pointer
,	O
BOURNE_SHELL	pointer
,	O
argv	pointer
,	O
private_data	pointer
)	O
;	O
freea	function
(	O
command	pointer
)	O
;	O
reset_classpath	function
(	O
old_classpath	pointer
)	O
;	O
goto	O
done1	O
;	O
}	O
}	O
old_JAVA_HOME	pointer
=	O
getenv	function
(	O
"JAVA_HOME"	pointer
)	O
;	O
if	O
(	O
old_JAVA_HOME	pointer
!=	O
NULL	O
)	O
{	O
old_JAVA_HOME	pointer
=	O
xstrdup	function
(	O
old_JAVA_HOME	pointer
)	O
;	O
unsetenv	function
(	O
"JAVA_HOME"	pointer
)	O
;	O
}	O
{	O
static	O
bool	bool
gij_tested	bool
;	O
static	O
bool	bool
gij_present	bool
;	O
if	O
(	O
!	O
gij_tested	bool
)	O
{	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	pointer
[	O
0	int
]	O
=	O
"gij"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
"--version"	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	function
(	O
"gij"	pointer
,	O
"gij"	pointer
,	O
argv	pointer
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
gij_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
)	O
;	O
gij_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
gij_present	bool
)	O
{	O
char	O
*	O
old_classpath	pointer
;	O
char	O
*	O
*	O
argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
2	int
+	O
nargs	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
unsigned	O
int	O
i	int
;	O
old_classpath	pointer
=	O
set_classpath	function
(	O
classpaths	pointer
,	O
classpaths_count	int
,	O
use_minimal_classpath	bool
,	O
verbose	bool
)	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
"gij"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
(	O
char	O
*	O
)	O
class_name	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
nargs	int
;	O
i	int
++	O
)	O
argv	pointer
[	O
2	int
+	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
args	pointer
[	O
i	int
]	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	pointer
=	O
shell_quote_argv	function
(	O
argv	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
}	O
err	bool
=	O
executer	pointer
(	O
"gij"	pointer
,	O
"gij"	pointer
,	O
argv	pointer
,	O
private_data	pointer
)	O
;	O
reset_classpath	function
(	O
old_classpath	pointer
)	O
;	O
freea	function
(	O
argv	pointer
)	O
;	O
goto	O
done2	O
;	O
}	O
}	O
{	O
static	O
bool	bool
java_tested	bool
;	O
static	O
bool	bool
java_present	bool
;	O
if	O
(	O
!	O
java_tested	bool
)	O
{	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	pointer
[	O
0	int
]	O
=	O
"java"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
"-version"	pointer
;	O
argv	pointer
[	O
2	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	function
(	O
"java"	pointer
,	O
"java"	pointer
,	O
argv	pointer
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
java_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
)	O
;	O
java_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
java_present	bool
)	O
{	O
char	O
*	O
old_classpath	pointer
;	O
char	O
*	O
*	O
argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
2	int
+	O
nargs	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
unsigned	O
int	O
i	int
;	O
old_classpath	pointer
=	O
set_classpath	function
(	O
classpaths	pointer
,	O
classpaths_count	int
,	O
use_minimal_classpath	bool
,	O
verbose	bool
)	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
"java"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
(	O
char	O
*	O
)	O
class_name	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
nargs	int
;	O
i	int
++	O
)	O
argv	pointer
[	O
2	int
+	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
args	pointer
[	O
i	int
]	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	pointer
=	O
shell_quote_argv	function
(	O
argv	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
}	O
err	bool
=	O
executer	pointer
(	O
"java"	pointer
,	O
"java"	pointer
,	O
argv	pointer
,	O
private_data	pointer
)	O
;	O
reset_classpath	function
(	O
old_classpath	pointer
)	O
;	O
freea	function
(	O
argv	pointer
)	O
;	O
goto	O
done2	O
;	O
}	O
}	O
{	O
static	O
bool	bool
jre_tested	bool
;	O
static	O
bool	bool
jre_present	bool
;	O
if	O
(	O
!	O
jre_tested	bool
)	O
{	O
char	O
*	O
argv	pointer
[	O
2	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	pointer
[	O
0	int
]	O
=	O
"jre"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	function
(	O
"jre"	pointer
,	O
"jre"	pointer
,	O
argv	pointer
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
jre_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
||	O
exitstatus	int
==	O
1	int
)	O
;	O
jre_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
jre_present	bool
)	O
{	O
char	O
*	O
old_classpath	pointer
;	O
char	O
*	O
*	O
argv	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
2	int
+	O
nargs	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
unsigned	O
int	O
i	int
;	O
old_classpath	pointer
=	O
set_classpath	function
(	O
classpaths	pointer
,	O
classpaths_count	int
,	O
use_minimal_classpath	bool
,	O
verbose	bool
)	O
;	O
argv	pointer
[	O
0	int
]	O
=	O
"jre"	pointer
;	O
argv	pointer
[	O
1	int
]	O
=	O
(	O
char	O
*	O
)	O
class_name	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
nargs	int
;	O
i	int
++	O
)	O
argv	pointer
[	O
2	int
+	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
args	pointer
[	O
i	int
]	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	pointer
=	O
shell_quote_argv	function
(	O
argv	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
command	pointer
)	O
;	O
free	function
(	O
command	pointer
)	O
;	O
}	O
err	bool
=	O
executer	pointer
(	O
"jre"	pointer
,	O
"jre"	pointer
,	O
argv	pointer
,	O
private_data	pointer
)	O
;	O
reset_classpath	function
(	O
old_classpath	pointer
)	O
;	O
freea	function
(	O
argv	pointer
)	O
;	O
goto	O
done2	O
;	O
}	O
}	O
if	O
(	O
!	O
quiet	bool
)	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Java virtual machine not found, try installing gij or set $JAVA"	pointer
)	O
)	O
;	O
err	bool
=	O
true	int
;	O
done2	O
:	O
if	O
(	O
old_JAVA_HOME	pointer
!=	O
NULL	O
)	O
{	O
xsetenv	function
(	O
"JAVA_HOME"	pointer
,	O
old_JAVA_HOME	pointer
,	O
1	int
)	O
;	O
free	function
(	O
old_JAVA_HOME	pointer
)	O
;	O
}	O
done1	O
:	O
return	O
err	bool
;	O
}	O
