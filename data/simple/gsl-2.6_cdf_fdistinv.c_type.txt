double	O
gsl_cdf_fdist_Pinv	function
(	O
const	O
double	O
P	double
,	O
const	O
double	O
nu1	double
,	O
const	O
double	O
nu2	double
)	O
{	O
double	O
result	double
;	O
double	O
y	double
;	O
if	O
(	O
P	double
<	O
0.0	int
)	O
{	O
CDF_ERROR	O
(	O
"P < 0.0"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
if	O
(	O
P	double
>	O
1.0	int
)	O
{	O
CDF_ERROR	O
(	O
"P > 1.0"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
if	O
(	O
nu1	double
<	O
1.0	int
)	O
{	O
CDF_ERROR	O
(	O
"nu1 < 1"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
if	O
(	O
nu2	double
<	O
1.0	int
)	O
{	O
CDF_ERROR	O
(	O
"nu2 < 1"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
if	O
(	O
P	double
<	O
0.5	int
)	O
{	O
y	double
=	O
gsl_cdf_beta_Pinv	function
(	O
P	double
,	O
nu1	double
/	O
2.0	int
,	O
nu2	double
/	O
2.0	int
)	O
;	O
result	double
=	O
nu2	double
*	O
y	double
/	O
(	O
nu1	double
*	O
(	O
1.0	int
-	O
y	double
)	O
)	O
;	O
}	O
else	O
{	O
y	double
=	O
gsl_cdf_beta_Qinv	function
(	O
P	double
,	O
nu2	double
/	O
2.0	int
,	O
nu1	double
/	O
2.0	int
)	O
;	O
result	double
=	O
nu2	double
*	O
(	O
1	int
-	O
y	double
)	O
/	O
(	O
nu1	double
*	O
y	double
)	O
;	O
}	O
return	O
result	double
;	O
}	O
double	O
gsl_cdf_fdist_Qinv	function
(	O
const	O
double	O
Q	double
,	O
const	O
double	O
nu1	double
,	O
const	O
double	O
nu2	double
)	O
{	O
double	O
result	double
;	O
double	O
y	double
;	O
if	O
(	O
Q	double
<	O
0.0	int
)	O
{	O
CDF_ERROR	O
(	O
"Q < 0.0"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
if	O
(	O
Q	double
>	O
1.0	int
)	O
{	O
CDF_ERROR	O
(	O
"Q > 1.0"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
if	O
(	O
nu1	double
<	O
1.0	int
)	O
{	O
CDF_ERROR	O
(	O
"nu1 < 1"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
if	O
(	O
nu2	double
<	O
1.0	int
)	O
{	O
CDF_ERROR	O
(	O
"nu2 < 1"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
if	O
(	O
Q	double
>	O
0.5	int
)	O
{	O
y	double
=	O
gsl_cdf_beta_Qinv	function
(	O
Q	double
,	O
nu1	double
/	O
2.0	int
,	O
nu2	double
/	O
2.0	int
)	O
;	O
result	double
=	O
nu2	double
*	O
y	double
/	O
(	O
nu1	double
*	O
(	O
1.0	int
-	O
y	double
)	O
)	O
;	O
}	O
else	O
{	O
y	double
=	O
gsl_cdf_beta_Pinv	function
(	O
Q	double
,	O
nu2	double
/	O
2.0	int
,	O
nu1	double
/	O
2.0	int
)	O
;	O
result	double
=	O
nu2	double
*	O
(	O
1	int
-	O
y	double
)	O
/	O
(	O
nu1	double
*	O
y	double
)	O
;	O
}	O
return	O
result	double
;	O
}	O
