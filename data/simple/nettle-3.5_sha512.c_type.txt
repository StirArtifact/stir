static	O
const	O
uint64_t	long
K	array
[	O
80	int
]	O
=	O
{	O
0x428A2F98D728AE22ULL	int
,	O
0x7137449123EF65CDULL	int
,	O
0xB5C0FBCFEC4D3B2FULL	int
,	O
0xE9B5DBA58189DBBCULL	int
,	O
0x3956C25BF348B538ULL	int
,	O
0x59F111F1B605D019ULL	int
,	O
0x923F82A4AF194F9BULL	int
,	O
0xAB1C5ED5DA6D8118ULL	int
,	O
0xD807AA98A3030242ULL	int
,	O
0x12835B0145706FBEULL	int
,	O
0x243185BE4EE4B28CULL	int
,	O
0x550C7DC3D5FFB4E2ULL	int
,	O
0x72BE5D74F27B896FULL	int
,	O
0x80DEB1FE3B1696B1ULL	int
,	O
0x9BDC06A725C71235ULL	int
,	O
0xC19BF174CF692694ULL	int
,	O
0xE49B69C19EF14AD2ULL	int
,	O
0xEFBE4786384F25E3ULL	int
,	O
0x0FC19DC68B8CD5B5ULL	int
,	O
0x240CA1CC77AC9C65ULL	int
,	O
0x2DE92C6F592B0275ULL	int
,	O
0x4A7484AA6EA6E483ULL	int
,	O
0x5CB0A9DCBD41FBD4ULL	int
,	O
0x76F988DA831153B5ULL	int
,	O
0x983E5152EE66DFABULL	int
,	O
0xA831C66D2DB43210ULL	int
,	O
0xB00327C898FB213FULL	int
,	O
0xBF597FC7BEEF0EE4ULL	int
,	O
0xC6E00BF33DA88FC2ULL	int
,	O
0xD5A79147930AA725ULL	int
,	O
0x06CA6351E003826FULL	int
,	O
0x142929670A0E6E70ULL	int
,	O
0x27B70A8546D22FFCULL	int
,	O
0x2E1B21385C26C926ULL	int
,	O
0x4D2C6DFC5AC42AEDULL	int
,	O
0x53380D139D95B3DFULL	int
,	O
0x650A73548BAF63DEULL	int
,	O
0x766A0ABB3C77B2A8ULL	int
,	O
0x81C2C92E47EDAEE6ULL	int
,	O
0x92722C851482353BULL	int
,	O
0xA2BFE8A14CF10364ULL	int
,	O
0xA81A664BBC423001ULL	int
,	O
0xC24B8B70D0F89791ULL	int
,	O
0xC76C51A30654BE30ULL	int
,	O
0xD192E819D6EF5218ULL	int
,	O
0xD69906245565A910ULL	int
,	O
0xF40E35855771202AULL	int
,	O
0x106AA07032BBD1B8ULL	int
,	O
0x19A4C116B8D2D0C8ULL	int
,	O
0x1E376C085141AB53ULL	int
,	O
0x2748774CDF8EEB99ULL	int
,	O
0x34B0BCB5E19B48A8ULL	int
,	O
0x391C0CB3C5C95A63ULL	int
,	O
0x4ED8AA4AE3418ACBULL	int
,	O
0x5B9CCA4F7763E373ULL	int
,	O
0x682E6FF3D6B2B8A3ULL	int
,	O
0x748F82EE5DEFB2FCULL	int
,	O
0x78A5636F43172F60ULL	int
,	O
0x84C87814A1F0AB72ULL	int
,	O
0x8CC702081A6439ECULL	int
,	O
0x90BEFFFA23631E28ULL	int
,	O
0xA4506CEBDE82BDE9ULL	int
,	O
0xBEF9A3F7B2C67915ULL	int
,	O
0xC67178F2E372532BULL	int
,	O
0xCA273ECEEA26619CULL	int
,	O
0xD186B8C721C0C207ULL	int
,	O
0xEADA7DD6CDE0EB1EULL	int
,	O
0xF57D4F7FEE6ED178ULL	int
,	O
0x06F067AA72176FBAULL	int
,	O
0x0A637DC5A2C898A6ULL	int
,	O
0x113F9804BEF90DAEULL	int
,	O
0x1B710B35131C471BULL	int
,	O
0x28DB77F523047D84ULL	int
,	O
0x32CAAB7B40C72493ULL	int
,	O
0x3C9EBE0A15C9BEBCULL	int
,	O
0x431D67C49C100D4CULL	int
,	O
0x4CC5D4BECB3E42B6ULL	int
,	O
0x597F299CFC657E2AULL	int
,	O
0x5FCB6FAB3AD6FAECULL	int
,	O
0x6C44198C4A475817ULL	int
,	O
}	O
;	O
void	O
sha512_init	O
(	O
struct	O
sha512_ctx	struct
*	O
ctx	pointer
)	O
{	O
static	O
const	O
uint64_t	long
H0	array
[	O
_SHA512_DIGEST_LENGTH	int
]	O
=	O
{	O
0x6A09E667F3BCC908ULL	int
,	O
0xBB67AE8584CAA73BULL	int
,	O
0x3C6EF372FE94F82BULL	int
,	O
0xA54FF53A5F1D36F1ULL	int
,	O
0x510E527FADE682D1ULL	int
,	O
0x9B05688C2B3E6C1FULL	int
,	O
0x1F83D9ABFB41BD6BULL	int
,	O
0x5BE0CD19137E2179ULL	int
,	O
}	O
;	O
memcpy	function
(	O
ctx	pointer
->	O
state	pointer
,	O
H0	array
,	O
sizeof	O
(	O
H0	array
)	O
)	O
;	O
ctx	pointer
->	O
count_low	long
=	O
ctx	pointer
->	O
count_high	long
=	O
0	int
;	O
ctx	pointer
->	O
index	function
=	O
0	int
;	O
}	O
void	O
sha512_update	O
(	O
struct	O
sha512_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	pointer
)	O
{	O
MD_UPDATE	O
(	O
ctx	pointer
,	O
length	long
,	O
data	pointer
,	O
COMPRESS	O
,	O
MD_INCR	O
(	O
ctx	pointer
)	O
)	O
;	O
}	O
static	O
void	O
sha512_write_digest	function
(	O
struct	O
sha512_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	pointer
)	O
{	O
uint64_t	long
high	long
,	O
low	long
;	O
unsigned	O
i	int
;	O
unsigned	O
words	int
;	O
unsigned	O
leftover	int
;	O
assert	O
(	O
length	long
<=	O
SHA512_DIGEST_SIZE	int
)	O
;	O
MD_PAD	O
(	O
ctx	pointer
,	O
16	int
,	O
COMPRESS	O
)	O
;	O
high	long
=	O
(	O
ctx	pointer
->	O
count_high	long
<<	O
10	int
)	O
|	O
(	O
ctx	pointer
->	O
count_low	long
>>	O
54	int
)	O
;	O
low	long
=	O
(	O
ctx	pointer
->	O
count_low	long
<<	O
10	int
)	O
|	O
(	O
ctx	pointer
->	O
index	function
<<	O
3	int
)	O
;	O
WRITE_UINT64	O
(	O
ctx	pointer
->	O
block	array
+	O
(	O
SHA512_BLOCK_SIZE	int
-	O
16	int
)	O
,	O
high	long
)	O
;	O
WRITE_UINT64	O
(	O
ctx	pointer
->	O
block	array
+	O
(	O
SHA512_BLOCK_SIZE	int
-	O
8	int
)	O
,	O
low	long
)	O
;	O
COMPRESS	O
(	O
ctx	pointer
,	O
ctx	pointer
->	O
block	array
)	O
;	O
words	int
=	O
length	long
/	O
8	int
;	O
leftover	int
=	O
length	long
%	O
8	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
words	int
;	O
i	int
++	O
,	O
digest	pointer
+=	O
8	int
)	O
WRITE_UINT64	O
(	O
digest	pointer
,	O
ctx	pointer
->	O
state	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
leftover	int
)	O
{	O
uint64_t	long
word	long
=	O
ctx	pointer
->	O
state	pointer
[	O
i	int
]	O
>>	O
(	O
8	int
*	O
(	O
8	int
-	O
leftover	int
)	O
)	O
;	O
do	O
{	O
digest	pointer
[	O
--	O
leftover	int
]	O
=	O
word	long
&	O
0xff	int
;	O
word	long
>>=	O
8	int
;	O
}	O
while	O
(	O
leftover	int
)	O
;	O
}	O
}	O
void	O
sha512_digest	O
(	O
struct	O
sha512_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	pointer
)	O
{	O
assert	O
(	O
length	long
<=	O
SHA512_DIGEST_SIZE	int
)	O
;	O
sha512_write_digest	function
(	O
ctx	pointer
,	O
length	long
,	O
digest	pointer
)	O
;	O
sha512_init	O
(	O
ctx	pointer
)	O
;	O
}	O
void	O
sha384_init	O
(	O
struct	O
sha512_ctx	struct
*	O
ctx	pointer
)	O
{	O
static	O
const	O
uint64_t	long
H0	array
[	O
_SHA512_DIGEST_LENGTH	int
]	O
=	O
{	O
0xCBBB9D5DC1059ED8ULL	int
,	O
0x629A292A367CD507ULL	int
,	O
0x9159015A3070DD17ULL	int
,	O
0x152FECD8F70E5939ULL	int
,	O
0x67332667FFC00B31ULL	int
,	O
0x8EB44A8768581511ULL	int
,	O
0xDB0C2E0D64F98FA7ULL	int
,	O
0x47B5481DBEFA4FA4ULL	int
,	O
}	O
;	O
memcpy	function
(	O
ctx	pointer
->	O
state	pointer
,	O
H0	array
,	O
sizeof	O
(	O
H0	array
)	O
)	O
;	O
ctx	pointer
->	O
count_low	long
=	O
ctx	pointer
->	O
count_high	long
=	O
0	int
;	O
ctx	pointer
->	O
index	function
=	O
0	int
;	O
}	O
void	O
sha384_digest	O
(	O
struct	O
sha512_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	pointer
)	O
{	O
assert	O
(	O
length	long
<=	O
SHA384_DIGEST_SIZE	int
)	O
;	O
sha512_write_digest	function
(	O
ctx	pointer
,	O
length	long
,	O
digest	pointer
)	O
;	O
sha384_init	O
(	O
ctx	pointer
)	O
;	O
}	O
void	O
sha512_224_init	O
(	O
struct	O
sha512_224_ctx	O
*	O
ctx	pointer
)	O
{	O
static	O
const	O
uint64_t	long
H0	array
[	O
_SHA512_DIGEST_LENGTH	int
]	O
=	O
{	O
0x8c3d37c819544da2ULL	int
,	O
0x73e1996689dcd4d6ULL	int
,	O
0x1dfab7ae32ff9c82ULL	int
,	O
0x679dd514582f9fcfULL	int
,	O
0x0f6d2b697bd44da8ULL	int
,	O
0x77e36f7304c48942ULL	int
,	O
0x3f9d85a86a1d36c8ULL	int
,	O
0x1112e6ad91d692a1ULL	int
,	O
}	O
;	O
memcpy	function
(	O
ctx	pointer
->	O
state	pointer
,	O
H0	array
,	O
sizeof	O
(	O
H0	array
)	O
)	O
;	O
ctx	pointer
->	O
count_low	long
=	O
ctx	pointer
->	O
count_high	long
=	O
0	int
;	O
ctx	pointer
->	O
index	function
=	O
0	int
;	O
}	O
void	O
sha512_224_digest	O
(	O
struct	O
sha512_224_ctx	O
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	pointer
)	O
{	O
assert	O
(	O
length	long
<=	O
SHA224_DIGEST_SIZE	int
)	O
;	O
sha512_write_digest	function
(	O
ctx	pointer
,	O
length	long
,	O
digest	pointer
)	O
;	O
sha512_224_init	O
(	O
ctx	pointer
)	O
;	O
}	O
void	O
sha512_256_init	O
(	O
struct	O
sha512_256_ctx	O
*	O
ctx	pointer
)	O
{	O
static	O
const	O
uint64_t	long
H0	array
[	O
_SHA512_DIGEST_LENGTH	int
]	O
=	O
{	O
0x22312194fc2bf72cULL	int
,	O
0x9f555fa3c84c64c2ULL	int
,	O
0x2393b86b6f53b151ULL	int
,	O
0x963877195940eabdULL	int
,	O
0x96283ee2a88effe3ULL	int
,	O
0xbe5e1e2553863992ULL	int
,	O
0x2b0199fc2c85b8aaULL	int
,	O
0x0eb72ddc81c52ca2ULL	int
,	O
}	O
;	O
memcpy	function
(	O
ctx	pointer
->	O
state	pointer
,	O
H0	array
,	O
sizeof	O
(	O
H0	array
)	O
)	O
;	O
ctx	pointer
->	O
count_low	long
=	O
ctx	pointer
->	O
count_high	long
=	O
0	int
;	O
ctx	pointer
->	O
index	function
=	O
0	int
;	O
}	O
void	O
sha512_256_digest	O
(	O
struct	O
sha512_256_ctx	O
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	pointer
)	O
{	O
assert	O
(	O
length	long
<=	O
SHA256_DIGEST_SIZE	int
)	O
;	O
sha512_write_digest	function
(	O
ctx	pointer
,	O
length	long
,	O
digest	pointer
)	O
;	O
sha512_256_init	O
(	O
ctx	pointer
)	O
;	O
}	O
