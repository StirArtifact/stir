static	O
const	O
int	O
_cgm_join_style	array
[	O
PL_NUM_JOIN_TYPES	int
]	O
=	O
{	O
CGM_JOIN_MITER	int
,	O
CGM_JOIN_ROUND	int
,	O
CGM_JOIN_BEVEL	int
,	O
CGM_JOIN_ROUND	int
}	O
;	O
static	O
const	O
int	O
_cgm_cap_style	array
[	O
PL_NUM_CAP_TYPES	int
]	O
=	O
{	O
CGM_CAP_BUTT	int
,	O
CGM_CAP_ROUND	int
,	O
CGM_CAP_PROJECTING	int
,	O
CGM_CAP_ROUND	int
}	O
;	O
void	O
_pl_c_set_attributes	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
object_type	int
)	O
{	O
int	O
desired_width	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
quantized_device_line_width	int
;	O
int	O
desired_line_type	int
=	O
CGM_L_SOLID	int
;	O
double	O
desired_dash_offset	double
=	O
0.0	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
==	O
0	int
)	O
return	O
;	O
switch	O
(	O
object_type	int
)	O
{	O
case	O
CGM_OBJECT_OPEN	int
:	O
if	O
(	O
_plotter	pointer
->	O
cgm_line_width	int
!=	O
desired_width	int
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
CGM_BINARY_BYTES_PER_INTEGER	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
3	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"LINEWIDTH"	pointer
)	O
;	O
_cgm_emit_integer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_width	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_line_width	int
=	O
desired_width	int
;	O
}	O
break	O
;	O
case	O
CGM_OBJECT_CLOSED	int
:	O
if	O
(	O
_plotter	pointer
->	O
cgm_edge_width	int
!=	O
desired_width	int
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
CGM_BINARY_BYTES_PER_INTEGER	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
28	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"EDGEWIDTH"	pointer
)	O
;	O
_cgm_emit_integer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_width	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_edge_width	int
=	O
desired_width	int
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
have_dash_array	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
)	O
{	O
int	O
num_dashes	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
;	O
int	O
our_num_dashes	int
=	O
num_dashes	int
;	O
if	O
(	O
num_dashes	int
>	O
0	int
)	O
{	O
double	O
min_sing_val	pointer
,	O
max_sing_val	pointer
;	O
int	O
i	int
,	O
*	O
dashbuf	pointer
;	O
plCGMCustomLineType	struct
*	O
line_type_ptr	pointer
,	O
*	O
old_line_type_ptr	pointer
;	O
int	O
line_type	int
;	O
bool	enum
odd_length	enum
,	O
matched_line_type	enum
;	O
_matrix_sing_vals	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
,	O
&	O
min_sing_val	pointer
,	O
&	O
max_sing_val	pointer
)	O
;	O
odd_length	enum
=	O
(	O
num_dashes	int
%	O
2	int
!=	O
0	int
?	O
true	int
:	O
false	int
)	O
;	O
if	O
(	O
odd_length	enum
)	O
our_num_dashes	int
*=	O
2	int
;	O
dashbuf	pointer
=	O
(	O
int	O
*	O
)	O
_pl_xmalloc	function
(	O
our_num_dashes	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_dashes	int
;	O
i	int
++	O
)	O
{	O
double	O
dashlen	double
;	O
int	O
i_dashlen	int
;	O
dashlen	double
=	O
min_sing_val	pointer
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
i	int
]	O
;	O
i_dashlen	int
=	O
IROUND	O
(	O
dashlen	double
)	O
;	O
if	O
(	O
i_dashlen	int
==	O
0	int
&&	O
dashlen	double
>	O
0.0	int
)	O
i_dashlen	int
=	O
1	int
;	O
dashbuf	pointer
[	O
i	int
]	O
=	O
i_dashlen	int
;	O
if	O
(	O
odd_length	enum
)	O
dashbuf	pointer
[	O
i	int
+	O
num_dashes	int
]	O
=	O
i_dashlen	int
;	O
}	O
{	O
int	O
cycle_length	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
our_num_dashes	int
;	O
i	int
++	O
)	O
cycle_length	int
+=	O
dashbuf	pointer
[	O
i	int
]	O
;	O
desired_dash_offset	double
=	O
min_sing_val	pointer
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_offset	double
/	O
cycle_length	int
;	O
desired_dash_offset	double
-=	O
IFLOOR	O
(	O
desired_dash_offset	double
)	O
;	O
if	O
(	O
desired_dash_offset	double
<	O
0.0	int
||	O
desired_dash_offset	double
>=	O
1.0	int
)	O
desired_dash_offset	double
=	O
0.0	int
;	O
}	O
line_type_ptr	pointer
=	O
(	O
plCGMCustomLineType	struct
*	O
)	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
extra	pointer
;	O
old_line_type_ptr	pointer
=	O
(	O
plCGMCustomLineType	struct
*	O
)	O
NULL	O
;	O
line_type	int
=	O
0	int
;	O
matched_line_type	enum
=	O
false	int
;	O
while	O
(	O
line_type_ptr	pointer
!=	O
(	O
plCGMCustomLineType	struct
*	O
)	O
NULL	O
)	O
{	O
line_type	int
--	O
;	O
if	O
(	O
line_type_ptr	pointer
->	O
dash_array_len	int
==	O
our_num_dashes	int
)	O
{	O
bool	enum
foundit	enum
=	O
true	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
our_num_dashes	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
dashbuf	pointer
[	O
i	int
]	O
!=	O
line_type_ptr	pointer
->	O
dashes	pointer
[	O
i	int
]	O
)	O
{	O
foundit	enum
=	O
false	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
foundit	enum
)	O
{	O
matched_line_type	enum
=	O
true	int
;	O
break	O
;	O
}	O
}	O
old_line_type_ptr	pointer
=	O
line_type_ptr	pointer
;	O
line_type_ptr	pointer
=	O
line_type_ptr	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
matched_line_type	enum
)	O
{	O
desired_line_type	int
=	O
line_type	int
;	O
free	function
(	O
dashbuf	pointer
)	O
;	O
}	O
else	O
{	O
plCGMCustomLineType	struct
*	O
newguy	pointer
;	O
newguy	pointer
=	O
(	O
plCGMCustomLineType	struct
*	O
)	O
_pl_xmalloc	function
(	O
sizeof	O
(	O
plCGMCustomLineType	struct
)	O
)	O
;	O
newguy	pointer
->	O
dashes	pointer
=	O
dashbuf	pointer
;	O
newguy	pointer
->	O
dash_array_len	int
=	O
our_num_dashes	int
;	O
newguy	pointer
->	O
next	pointer
=	O
(	O
plCGMCustomLineType	struct
*	O
)	O
NULL	O
;	O
if	O
(	O
old_line_type_ptr	pointer
!=	O
(	O
plCGMCustomLineType	struct
*	O
)	O
NULL	O
)	O
old_line_type_ptr	pointer
->	O
next	pointer
=	O
newguy	pointer
;	O
else	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
extra	pointer
=	O
newguy	pointer
;	O
desired_line_type	int
=	O
line_type	int
-	O
1	int
;	O
}	O
}	O
else	O
{	O
desired_line_type	int
=	O
CGM_L_SOLID	int
;	O
desired_dash_offset	double
=	O
0.0	int
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
)	O
{	O
case	O
PL_L_SOLID	int
:	O
default	O
:	O
desired_line_type	int
=	O
CGM_L_SOLID	int
;	O
break	O
;	O
case	O
PL_L_DOTTED	int
:	O
desired_line_type	int
=	O
CGM_L_DOTTED	int
;	O
break	O
;	O
case	O
PL_L_DOTDASHED	int
:	O
desired_line_type	int
=	O
CGM_L_DOTDASHED	int
;	O
break	O
;	O
case	O
PL_L_SHORTDASHED	int
:	O
desired_line_type	int
=	O
CGM_L_DASHED	int
;	O
break	O
;	O
case	O
PL_L_LONGDASHED	int
:	O
desired_line_type	int
=	O
CGM_L_DASHED	int
;	O
break	O
;	O
case	O
PL_L_DOTDOTDASHED	int
:	O
desired_line_type	int
=	O
CGM_L_DOTDOTDASHED	int
;	O
break	O
;	O
case	O
PL_L_DOTDOTDOTDASHED	int
:	O
desired_line_type	int
=	O
CGM_L_DOTDOTDASHED	int
;	O
break	O
;	O
}	O
desired_dash_offset	double
=	O
0.0	int
;	O
}	O
switch	O
(	O
object_type	int
)	O
{	O
case	O
CGM_OBJECT_OPEN	int
:	O
if	O
(	O
_plotter	pointer
->	O
cgm_line_type	int
!=	O
desired_line_type	int
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
2	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
2	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"LINETYPE"	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_line_type	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_line_type	int
=	O
desired_line_type	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
cgm_max_version	int
>=	O
3	int
&&	O
_plotter	pointer
->	O
cgm_dash_offset	double
!=	O
desired_dash_offset	double
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
4	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
40	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"LINETYPEINITOFFSET"	pointer
)	O
;	O
_cgm_emit_real_fixed_point	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_dash_offset	double
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_dash_offset	double
=	O
desired_dash_offset	double
;	O
_plotter	pointer
->	O
cgm_page_version	int
=	O
IMAX	O
(	O
3	int
,	O
_plotter	pointer
->	O
cgm_page_version	int
)	O
;	O
}	O
break	O
;	O
case	O
CGM_OBJECT_CLOSED	int
:	O
if	O
(	O
_plotter	pointer
->	O
cgm_edge_type	int
!=	O
desired_line_type	int
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
2	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
27	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"EDGETYPE"	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_line_type	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_edge_type	int
=	O
desired_line_type	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
cgm_max_version	int
>=	O
3	int
&&	O
_plotter	pointer
->	O
cgm_edge_dash_offset	double
!=	O
desired_dash_offset	double
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
4	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
47	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"EDGETYPEINITOFFSET"	pointer
)	O
;	O
_cgm_emit_real_fixed_point	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_dash_offset	double
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_edge_dash_offset	double
=	O
desired_dash_offset	double
;	O
_plotter	pointer
->	O
cgm_page_version	int
=	O
IMAX	O
(	O
3	int
,	O
_plotter	pointer
->	O
cgm_page_version	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
cgm_max_version	int
>=	O
3	int
)	O
{	O
int	O
desired_join_style	int
=	O
_cgm_join_style	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
]	O
;	O
int	O
desired_cap_style	int
=	O
_cgm_cap_style	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
]	O
;	O
double	O
desired_miter_limit	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
miter_limit	double
;	O
switch	O
(	O
object_type	int
)	O
{	O
case	O
CGM_OBJECT_OPEN	int
:	O
if	O
(	O
_plotter	pointer
->	O
cgm_cap_style	int
!=	O
desired_cap_style	int
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
2	int
*	O
2	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
37	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"LINECAP"	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_cap_style	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_DASH_CAP_MATCH	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_cap_style	int
=	O
desired_cap_style	int
;	O
_plotter	pointer
->	O
cgm_page_version	int
=	O
IMAX	O
(	O
3	int
,	O
_plotter	pointer
->	O
cgm_page_version	int
)	O
;	O
}	O
break	O
;	O
case	O
CGM_OBJECT_CLOSED	int
:	O
if	O
(	O
_plotter	pointer
->	O
cgm_edge_cap_style	int
!=	O
desired_cap_style	int
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
2	int
*	O
2	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
44	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"EDGECAP"	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_cap_style	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_DASH_CAP_MATCH	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_edge_cap_style	int
=	O
desired_cap_style	int
;	O
_plotter	pointer
->	O
cgm_page_version	int
=	O
IMAX	O
(	O
3	int
,	O
_plotter	pointer
->	O
cgm_page_version	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
switch	O
(	O
object_type	int
)	O
{	O
case	O
CGM_OBJECT_OPEN	int
:	O
if	O
(	O
_plotter	pointer
->	O
cgm_join_style	int
!=	O
desired_join_style	int
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
2	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
38	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"LINEJOIN"	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_join_style	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_join_style	int
=	O
desired_join_style	int
;	O
_plotter	pointer
->	O
cgm_page_version	int
=	O
IMAX	O
(	O
3	int
,	O
_plotter	pointer
->	O
cgm_page_version	int
)	O
;	O
}	O
break	O
;	O
case	O
CGM_OBJECT_CLOSED	int
:	O
if	O
(	O
_plotter	pointer
->	O
cgm_edge_join_style	int
!=	O
desired_join_style	int
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
2	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_ATTRIBUTE_ELEMENT	int
,	O
45	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"EDGEJOIN"	pointer
)	O
;	O
_cgm_emit_index	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_join_style	int
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_edge_join_style	int
=	O
desired_join_style	int
;	O
_plotter	pointer
->	O
cgm_page_version	int
=	O
IMAX	O
(	O
3	int
,	O
_plotter	pointer
->	O
cgm_page_version	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
cgm_miter_limit	double
!=	O
desired_miter_limit	double
)	O
{	O
int	O
byte_count	pointer
,	O
data_byte_count	pointer
,	O
data_len	int
;	O
data_len	int
=	O
4	int
;	O
byte_count	pointer
=	O
data_byte_count	pointer
=	O
0	int
;	O
_cgm_emit_command_header	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
CGM_CONTROL_ELEMENT	int
,	O
19	int
,	O
data_len	int
,	O
&	O
byte_count	pointer
,	O
"MITRELIMIT"	pointer
)	O
;	O
_cgm_emit_real_fixed_point	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
false	int
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
desired_miter_limit	double
,	O
data_len	int
,	O
&	O
data_byte_count	pointer
,	O
&	O
byte_count	pointer
)	O
;	O
_cgm_emit_command_terminator	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
_plotter	pointer
->	O
cgm_encoding	int
,	O
&	O
byte_count	pointer
)	O
;	O
_plotter	pointer
->	O
cgm_miter_limit	double
=	O
desired_miter_limit	double
;	O
_plotter	pointer
->	O
cgm_page_version	int
=	O
IMAX	O
(	O
3	int
,	O
_plotter	pointer
->	O
cgm_page_version	int
)	O
;	O
}	O
}	O
}	O
