static	O
FILE	struct
*	O
Toutputfile	pointer
;	O
void	O
Tshutdown	function
(	O
void	O
)	O
{	O
}	O
static	O
void	O
R_recordtime	function
(	O
void	O
)	O
{	O
int	O
r	int
;	O
struct	O
timeval	struct
tv	pointer
,	O
tvrel	struct
;	O
Tensurerecordfile	function
(	O
)	O
;	O
r	int
=	O
gettimeofday	function
(	O
&	O
tv	pointer
,	O
0	int
)	O
;	O
if	O
(	O
r	int
)	O
Tfailed	function
(	O
"gettimeofday syscallbegin"	pointer
)	O
;	O
tvrel	struct
.	O
tv_sec	long
=	O
tv	pointer
.	O
tv_sec	long
-	O
currenttime	struct
.	O
tv_sec	long
;	O
tvrel	struct
.	O
tv_usec	long
=	O
tv	pointer
.	O
tv_usec	long
-	O
currenttime	struct
.	O
tv_usec	long
;	O
if	O
(	O
tv	pointer
.	O
tv_usec	long
<	O
0	int
)	O
{	O
tvrel	struct
.	O
tv_usec	long
+=	O
1000000	int
;	O
tvrel	struct
.	O
tv_sec	long
--	O
;	O
}	O
Tvbf	function
(	O
"\n +%ld.%06ld"	pointer
,	O
(	O
long	O
)	O
tvrel	struct
.	O
tv_sec	long
,	O
(	O
long	O
)	O
tvrel	struct
.	O
tv_usec	long
)	O
;	O
currenttime	struct
=	O
tv	pointer
;	O
}	O
void	O
Tensurerecordfile	function
(	O
void	O
)	O
{	O
const	O
char	O
*	O
fdstr	pointer
;	O
int	O
fd	int
,	O
r	int
;	O
if	O
(	O
Toutputfile	pointer
)	O
return	O
;	O
Toutputfile	pointer
=	O
stdout	pointer
;	O
fdstr	pointer
=	O
getenv	function
(	O
"ADNS_TEST_OUT_FD"	pointer
)	O
;	O
if	O
(	O
fdstr	pointer
)	O
{	O
fd	int
=	O
atoi	function
(	O
fdstr	pointer
)	O
;	O
Toutputfile	pointer
=	O
fdopen	function
(	O
fd	int
,	O
"a"	pointer
)	O
;	O
if	O
(	O
!	O
Toutputfile	pointer
)	O
Tfailed	function
(	O
"fdopen ADNS_TEST_OUT_FD"	pointer
)	O
;	O
}	O
r	int
=	O
gettimeofday	function
(	O
&	O
currenttime	struct
,	O
0	int
)	O
;	O
if	O
(	O
r	int
)	O
Tfailed	function
(	O
"gettimeofday syscallbegin"	pointer
)	O
;	O
if	O
(	O
fprintf	function
(	O
Toutputfile	pointer
,	O
" start %ld.%06ld\n"	pointer
,	O
(	O
long	O
)	O
currenttime	struct
.	O
tv_sec	long
,	O
(	O
long	O
)	O
currenttime	struct
.	O
tv_usec	long
)	O
==	O
EOF	O
)	O
Toutputerr	function
(	O
)	O
;	O
}	O
void	O
Q_vb	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
adns__vbuf_append	function
(	O
&	O
vb	pointer
,	O
""	pointer
,	O
1	int
)	O
)	O
Tnomem	function
(	O
)	O
;	O
Tensurerecordfile	function
(	O
)	O
;	O
if	O
(	O
fprintf	function
(	O
Toutputfile	pointer
,	O
" %s\n"	pointer
,	O
vb	pointer
.	O
buf	pointer
)	O
==	O
EOF	O
)	O
Toutputerr	function
(	O
)	O
;	O
if	O
(	O
fflush	function
(	O
Toutputfile	pointer
)	O
)	O
Toutputerr	function
(	O
)	O
;	O
}	O
static	O
void	O
R_vb	function
(	O
void	O
)	O
{	O
Q_vb	function
(	O
)	O
;	O
}	O
int	O
Hselect	function
(	O
int	O
max	int
,	O
fd_set	struct
*	O
rfds	pointer
,	O
fd_set	struct
*	O
wfds	pointer
,	O
fd_set	struct
*	O
efds	pointer
,	O
struct	O
timeval	struct
*	O
to	pointer
)	O
{	O
int	O
r	int
,	O
e	int
;	O
Qselect	function
(	O
max	int
,	O
rfds	pointer
,	O
wfds	pointer
,	O
efds	pointer
,	O
to	pointer
)	O
;	O
r	int
=	O
select	function
(	O
max	int
,	O
rfds	pointer
,	O
wfds	pointer
,	O
efds	pointer
,	O
to	pointer
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"select="	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
Tvbf	function
(	O
"%d"	pointer
,	O
r	int
)	O
;	O
Tvba	function
(	O
" rfds="	pointer
)	O
;	O
Tvbfdset	function
(	O
max	int
,	O
rfds	pointer
)	O
;	O
Tvba	function
(	O
" wfds="	pointer
)	O
;	O
Tvbfdset	function
(	O
max	int
,	O
wfds	pointer
)	O
;	O
Tvba	function
(	O
" efds="	pointer
)	O
;	O
Tvbfdset	function
(	O
max	int
,	O
efds	pointer
)	O
;	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
int	O
Hpoll	function
(	O
struct	O
pollfd	struct
*	O
fds	pointer
,	O
int	O
nfds	int
,	O
int	O
timeout	struct
)	O
{	O
int	O
r	int
,	O
e	int
;	O
Qpoll	function
(	O
fds	pointer
,	O
nfds	int
,	O
timeout	struct
)	O
;	O
r	int
=	O
poll	function
(	O
fds	pointer
,	O
nfds	int
,	O
timeout	struct
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"poll="	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
Tvbf	function
(	O
"%d"	pointer
,	O
r	int
)	O
;	O
Tvba	function
(	O
" fds="	pointer
)	O
;	O
Tvbpollfds	function
(	O
fds	pointer
,	O
nfds	int
)	O
;	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
int	O
Hsocket	function
(	O
int	O
domain	int
,	O
int	O
type	enum
,	O
int	O
protocol	int
)	O
{	O
int	O
r	int
,	O
e	int
;	O
Tmust	function
(	O
"socket"	pointer
,	O
"domain"	pointer
,	O
domain	int
==	O
AF_INET	O
)	O
;	O
Tmust	function
(	O
"socket"	pointer
,	O
"type"	pointer
,	O
type	enum
==	O
SOCK_STREAM	int
||	O
type	enum
==	O
SOCK_DGRAM	int
)	O
;	O
Qsocket	function
(	O
type	enum
)	O
;	O
r	int
=	O
socket	function
(	O
domain	int
,	O
type	enum
,	O
protocol	int
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"socket="	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
Tvbf	function
(	O
"%d"	pointer
,	O
r	int
)	O
;	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
int	O
Hfcntl	function
(	O
int	O
fd	int
,	O
int	O
cmd	int
,	O
...	O
)	O
{	O
int	O
r	int
,	O
e	int
;	O
va_list	array
al	array
;	O
long	O
arg	long
;	O
Tmust	function
(	O
"fcntl"	pointer
,	O
"cmd"	pointer
,	O
cmd	int
==	O
F_SETFL	int
||	O
cmd	int
==	O
F_GETFL	int
)	O
;	O
if	O
(	O
cmd	int
==	O
F_SETFL	int
)	O
{	O
va_start	O
(	O
al	array
,	O
cmd	int
)	O
;	O
arg	long
=	O
va_arg	O
(	O
al	array
,	O
long	O
)	O
;	O
va_end	O
(	O
al	array
)	O
;	O
}	O
else	O
{	O
arg	long
=	O
0	int
;	O
}	O
Qfcntl	function
(	O
fd	int
,	O
cmd	int
,	O
arg	long
)	O
;	O
r	int
=	O
fcntl	function
(	O
fd	int
,	O
cmd	int
,	O
arg	long
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"fcntl="	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
if	O
(	O
cmd	int
==	O
F_GETFL	int
)	O
{	O
Tvbf	function
(	O
r	int
&	O
O_NONBLOCK	int
?	O
"O_NONBLOCK|..."	pointer
:	O
"~O_NONBLOCK&..."	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
cmd	int
==	O
F_SETFL	int
)	O
{	O
Tmust	function
(	O
"fcntl"	pointer
,	O
"return"	pointer
,	O
!	O
r	int
)	O
;	O
}	O
else	O
{	O
Tmust	function
(	O
"cmd"	pointer
,	O
"F_GETFL/F_SETFL"	pointer
,	O
0	int
)	O
;	O
}	O
Tvba	function
(	O
"OK"	pointer
)	O
;	O
}	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
int	O
Hconnect	function
(	O
int	O
fd	int
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
addrlen	int
)	O
{	O
int	O
r	int
,	O
e	int
;	O
Qconnect	function
(	O
fd	int
,	O
addr	union
,	O
addrlen	int
)	O
;	O
r	int
=	O
connect	function
(	O
fd	int
,	O
addr	union
,	O
addrlen	int
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"connect="	pointer
)	O
;	O
if	O
(	O
r	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
Tvba	function
(	O
"OK"	pointer
)	O
;	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
int	O
Hbind	function
(	O
int	O
fd	int
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
addrlen	int
)	O
{	O
int	O
r	int
,	O
e	int
;	O
Qbind	function
(	O
fd	int
,	O
addr	union
,	O
addrlen	int
)	O
;	O
r	int
=	O
bind	function
(	O
fd	int
,	O
addr	union
,	O
addrlen	int
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"bind="	pointer
)	O
;	O
if	O
(	O
r	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
Tvba	function
(	O
"OK"	pointer
)	O
;	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
int	O
Hlisten	function
(	O
int	O
fd	int
,	O
int	O
backlog	int
)	O
{	O
int	O
r	int
,	O
e	int
;	O
Qlisten	function
(	O
fd	int
,	O
backlog	int
)	O
;	O
r	int
=	O
listen	function
(	O
fd	int
,	O
backlog	int
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"listen="	pointer
)	O
;	O
if	O
(	O
r	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
Tvba	function
(	O
"OK"	pointer
)	O
;	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
int	O
Hclose	function
(	O
int	O
fd	int
)	O
{	O
int	O
r	int
,	O
e	int
;	O
Qclose	function
(	O
fd	int
)	O
;	O
r	int
=	O
close	function
(	O
fd	int
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"close="	pointer
)	O
;	O
if	O
(	O
r	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
Tvba	function
(	O
"OK"	pointer
)	O
;	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
int	O
Hsendto	function
(	O
int	O
fd	int
,	O
const	O
void	O
*	O
msg	pointer
,	O
int	O
msglen	int
,	O
unsigned	O
int	O
flags	enum
,	O
const	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
addrlen	int
)	O
{	O
int	O
r	int
,	O
e	int
;	O
Tmust	function
(	O
"sendto"	pointer
,	O
"flags"	pointer
,	O
flags	enum
==	O
0	int
)	O
;	O
Qsendto	function
(	O
fd	int
,	O
msg	pointer
,	O
msglen	int
,	O
addr	union
,	O
addrlen	int
)	O
;	O
r	int
=	O
sendto	function
(	O
fd	int
,	O
msg	pointer
,	O
msglen	int
,	O
flags	enum
,	O
addr	union
,	O
addrlen	int
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"sendto="	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
Tvbf	function
(	O
"%d"	pointer
,	O
r	int
)	O
;	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
int	O
Hrecvfrom	function
(	O
int	O
fd	int
,	O
void	O
*	O
buf	pointer
,	O
int	O
buflen	int
,	O
unsigned	O
int	O
flags	enum
,	O
struct	O
sockaddr	struct
*	O
addr	union
,	O
int	O
*	O
addrlen	int
)	O
{	O
int	O
r	int
,	O
e	int
;	O
Tmust	function
(	O
"recvfrom"	pointer
,	O
"flags"	pointer
,	O
flags	enum
==	O
0	int
)	O
;	O
Tmust	function
(	O
"recvfrom"	pointer
,	O
"*addrlen"	pointer
,	O
*	O
addrlen	int
>=	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
;	O
Qrecvfrom	function
(	O
fd	int
,	O
buflen	int
,	O
*	O
addrlen	int
)	O
;	O
r	int
=	O
recvfrom	function
(	O
fd	int
,	O
buf	pointer
,	O
buflen	int
,	O
flags	enum
,	O
addr	union
,	O
addrlen	int
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"recvfrom="	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
Tmust	function
(	O
"recvfrom"	pointer
,	O
"return"	pointer
,	O
r	int
<=	O
buflen	int
)	O
;	O
Tvba	function
(	O
"OK"	pointer
)	O
;	O
Tvba	function
(	O
" addr="	pointer
)	O
;	O
Tvbaddr	function
(	O
addr	union
,	O
*	O
addrlen	int
)	O
;	O
Tvbbytes	function
(	O
buf	pointer
,	O
r	int
)	O
;	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
int	O
Hread	function
(	O
int	O
fd	int
,	O
void	O
*	O
buf	pointer
,	O
size_t	long
buflen	int
)	O
{	O
int	O
r	int
,	O
e	int
;	O
Qread	function
(	O
fd	int
,	O
buflen	int
)	O
;	O
r	int
=	O
read	function
(	O
fd	int
,	O
buf	pointer
,	O
buflen	int
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"read="	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
Tmust	function
(	O
"read"	pointer
,	O
"return"	pointer
,	O
r	int
<=	O
buflen	int
)	O
;	O
Tvba	function
(	O
"OK"	pointer
)	O
;	O
Tvbbytes	function
(	O
buf	pointer
,	O
r	int
)	O
;	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
int	O
Hwrite	function
(	O
int	O
fd	int
,	O
const	O
void	O
*	O
buf	pointer
,	O
size_t	long
len	int
)	O
{	O
int	O
r	int
,	O
e	int
;	O
Qwrite	function
(	O
fd	int
,	O
buf	pointer
,	O
len	int
)	O
;	O
r	int
=	O
write	function
(	O
fd	int
,	O
buf	pointer
,	O
len	int
)	O
;	O
e	int
=	O
errno	O
;	O
vb	pointer
.	O
used	int
=	O
0	int
;	O
Tvba	function
(	O
"write="	pointer
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
{	O
Tvberrno	function
(	O
e	int
)	O
;	O
goto	O
x_error	O
;	O
}	O
Tvbf	function
(	O
"%d"	pointer
,	O
r	int
)	O
;	O
x_error	O
:	O
R_recordtime	function
(	O
)	O
;	O
R_vb	function
(	O
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
r	int
;	O
}	O
