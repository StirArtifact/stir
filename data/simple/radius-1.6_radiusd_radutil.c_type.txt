static	O
void	O
obstack_grow_escaped	function
(	O
struct	O
obstack	struct
*	O
obp	pointer
,	O
char	O
*	O
str	pointer
,	O
int	O
len	int
)	O
{	O
for	O
(	O
;	O
len	int
>	O
0	int
;	O
len	int
--	O
,	O
str	pointer
++	O
)	O
{	O
switch	O
(	O
*	O
str	pointer
)	O
{	O
case	O
'"'	O
:	O
case	O
'\''	O
:	O
case	O
'\\'	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
'\\'	O
)	O
;	O
obstack_1grow	O
(	O
obp	pointer
,	O
*	O
str	pointer
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
isprint	function
(	O
*	O
str	pointer
)	O
)	O
obstack_1grow	O
(	O
obp	pointer
,	O
*	O
str	pointer
)	O
;	O
else	O
{	O
char	O
buf	pointer
[	O
4	int
]	O
;	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"%03o"	pointer
,	O
*	O
(	O
u_char	char
*	O
)	O
str	pointer
)	O
;	O
obstack_1grow	O
(	O
obp	pointer
,	O
'\\'	O
)	O
;	O
obstack_grow	O
(	O
obp	pointer
,	O
buf	pointer
,	O
3	int
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
attr_to_str	function
(	O
struct	O
obstack	struct
*	O
obp	pointer
,	O
grad_request_t	struct
*	O
req	pointer
,	O
grad_avp_t	struct
*	O
pairlist	pointer
,	O
grad_dict_attr_t	struct
*	O
attr	pointer
,	O
char	O
*	O
defval	pointer
,	O
int	O
escape	int
)	O
{	O
grad_avp_t	struct
*	O
pair	pointer
;	O
int	O
len	int
;	O
char	O
tmp	array
[	O
GRAD_STRING_LENGTH	int
+	O
1	int
]	O
;	O
char	O
*	O
str	pointer
;	O
if	O
(	O
!	O
attr	pointer
)	O
{	O
grad_log_req	function
(	O
GRAD_LOG_ERR	int
,	O
req	pointer
,	O
"attribute not found"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
pair	pointer
=	O
grad_avl_find	function
(	O
pairlist	pointer
,	O
attr	pointer
->	O
value	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
defval	pointer
)	O
{	O
if	O
(	O
attr	pointer
->	O
type	int
==	O
GRAD_TYPE_STRING	int
)	O
defval	pointer
=	O
"-"	pointer
;	O
else	O
defval	pointer
=	O
"-0"	pointer
;	O
}	O
switch	O
(	O
*	O
defval	pointer
++	O
)	O
{	O
case	O
'-'	O
:	O
len	int
=	O
strlen	function
(	O
defval	pointer
)	O
;	O
obstack_grow	O
(	O
obp	pointer
,	O
defval	pointer
,	O
len	int
)	O
;	O
break	O
;	O
case	O
'+'	O
:	O
break	O
;	O
case	O
'?'	O
:	O
if	O
(	O
*	O
defval	pointer
==	O
0	int
)	O
defval	pointer
=	O
"Attribute is not present"	pointer
;	O
grad_log_req	function
(	O
GRAD_LOG_ERR	int
,	O
req	pointer
,	O
"%s: %s"	pointer
,	O
attr	pointer
->	O
name	pointer
,	O
defval	pointer
)	O
;	O
break	O
;	O
case	O
'='	O
:	O
if	O
(	O
pairlist	pointer
)	O
{	O
grad_locus_t	struct
loc	struct
;	O
loc	struct
.	O
file	pointer
=	O
__FILE__	O
;	O
loc	struct
.	O
line	long
=	O
__LINE__	O
;	O
pair	pointer
=	O
grad_create_pair	function
(	O
&	O
loc	struct
,	O
attr	pointer
->	O
name	pointer
,	O
grad_operator_equal	int
,	O
defval	pointer
)	O
;	O
if	O
(	O
pair	pointer
)	O
grad_avl_add_list	function
(	O
&	O
pairlist	pointer
,	O
pair	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
if	O
(	O
defval	pointer
)	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"invalid : substitution: %s"	pointer
,	O
defval	pointer
)	O
;	O
else	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"null : substitution"	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
pair	pointer
)	O
return	O
;	O
}	O
else	O
if	O
(	O
defval	pointer
&&	O
*	O
defval	pointer
==	O
'+'	O
)	O
{	O
defval	pointer
++	O
;	O
len	int
=	O
strlen	function
(	O
defval	pointer
)	O
;	O
obstack_grow	O
(	O
obp	pointer
,	O
defval	pointer
,	O
len	int
)	O
;	O
return	O
;	O
}	O
tmp	array
[	O
GRAD_STRING_LENGTH	int
-	O
1	int
]	O
=	O
0	int
;	O
switch	O
(	O
attr	pointer
->	O
type	int
)	O
{	O
case	O
GRAD_TYPE_STRING	int
:	O
if	O
(	O
(	O
attr	pointer
->	O
prop	int
&	O
GRAD_AP_ENCRYPT	O
)	O
&&	O
req	pointer
)	O
{	O
req_decrypt_password	function
(	O
tmp	array
,	O
req	pointer
,	O
pair	pointer
)	O
;	O
str	pointer
=	O
tmp	array
;	O
}	O
else	O
str	pointer
=	O
pair	pointer
->	O
avp_strvalue	O
;	O
if	O
(	O
attr	pointer
->	O
prop	int
&	O
GRAD_AP_BINARY_STRING	int
)	O
len	int
=	O
pair	pointer
->	O
avp_strlength	O
;	O
else	O
len	int
=	O
strlen	function
(	O
str	pointer
)	O
;	O
if	O
(	O
escape	int
)	O
obstack_grow_escaped	function
(	O
obp	pointer
,	O
str	pointer
,	O
len	int
)	O
;	O
else	O
obstack_grow	O
(	O
obp	pointer
,	O
str	pointer
,	O
len	int
)	O
;	O
break	O
;	O
case	O
GRAD_TYPE_INTEGER	int
:	O
{	O
grad_dict_value_t	struct
*	O
dval	pointer
;	O
if	O
(	O
escape	int
&&	O
(	O
pair	pointer
->	O
prop	int
&	O
GRAD_AP_TRANSLATE	int
)	O
)	O
dval	pointer
=	O
grad_value_lookup	function
(	O
pair	pointer
->	O
avp_lvalue	O
,	O
pair	pointer
->	O
name	pointer
)	O
;	O
else	O
dval	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
dval	pointer
)	O
{	O
snprintf	function
(	O
tmp	array
,	O
sizeof	O
(	O
tmp	array
)	O
,	O
"%lu"	pointer
,	O
pair	pointer
->	O
avp_lvalue	O
)	O
;	O
len	int
=	O
strlen	function
(	O
tmp	array
)	O
;	O
obstack_grow	O
(	O
obp	pointer
,	O
tmp	array
,	O
len	int
)	O
;	O
}	O
else	O
obstack_grow	O
(	O
obp	pointer
,	O
dval	pointer
->	O
name	pointer
,	O
strlen	function
(	O
dval	pointer
->	O
name	pointer
)	O
)	O
;	O
break	O
;	O
}	O
case	O
GRAD_TYPE_IPADDR	int
:	O
grad_ip_iptostr	function
(	O
pair	pointer
->	O
avp_lvalue	O
,	O
tmp	array
)	O
;	O
len	int
=	O
strlen	function
(	O
tmp	array
)	O
;	O
obstack_grow	O
(	O
obp	pointer
,	O
tmp	array
,	O
len	int
)	O
;	O
break	O
;	O
case	O
GRAD_TYPE_DATE	int
:	O
snprintf	function
(	O
tmp	array
,	O
sizeof	O
(	O
tmp	array
)	O
,	O
"%ld"	pointer
,	O
pair	pointer
->	O
avp_lvalue	O
)	O
;	O
len	int
=	O
strlen	function
(	O
tmp	array
)	O
;	O
obstack_grow	O
(	O
obp	pointer
,	O
tmp	array
,	O
len	int
)	O
;	O
break	O
;	O
default	O
:	O
grad_log	function
(	O
GRAD_LOG_CRIT	int
,	O
_	O
(	O
"INTERNAL ERROR (%s:%d): attribute %d has bad type (%d)"	pointer
)	O
,	O
__FILE__	O
,	O
__LINE__	O
,	O
attr	pointer
->	O
value	pointer
,	O
attr	pointer
->	O
type	int
)	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
curtime_to_str	function
(	O
struct	O
obstack	struct
*	O
obp	pointer
,	O
grad_avp_t	struct
*	O
request	pointer
,	O
int	O
gmt	int
)	O
{	O
time_t	long
curtime	long
;	O
struct	O
tm	struct
*	O
tm	struct
,	O
tms	struct
;	O
grad_avp_t	struct
*	O
pair	pointer
;	O
char	O
tbuf	array
[	O
GRAD_STRING_LENGTH	int
]	O
;	O
int	O
len	int
;	O
curtime	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
if	O
(	O
pair	pointer
=	O
grad_avl_find	function
(	O
request	pointer
,	O
DA_ACCT_DELAY_TIME	int
)	O
)	O
curtime	long
-=	O
pair	pointer
->	O
avp_lvalue	O
;	O
if	O
(	O
gmt	int
)	O
tm	struct
=	O
gmtime	function
(	O
&	O
curtime	long
)	O
;	O
else	O
tm	struct
=	O
localtime_r	function
(	O
&	O
curtime	long
,	O
&	O
tms	struct
)	O
;	O
len	int
=	O
strftime	function
(	O
tbuf	array
,	O
GRAD_STRING_LENGTH	int
,	O
"%Y-%m-%d %H:%M:%S"	pointer
,	O
tm	struct
)	O
;	O
obstack_grow	O
(	O
obp	pointer
,	O
tbuf	array
,	O
len	int
)	O
;	O
}	O
static	O
void	O
attrno_to_str	function
(	O
struct	O
obstack	struct
*	O
obp	pointer
,	O
grad_request_t	struct
*	O
req	pointer
,	O
grad_avp_t	struct
*	O
pairlist	pointer
,	O
int	O
attr_no	int
,	O
char	O
*	O
defval	pointer
,	O
int	O
escape_str	int
)	O
{	O
attr_to_str	function
(	O
obp	pointer
,	O
req	pointer
,	O
pairlist	pointer
,	O
grad_attr_number_to_dict	function
(	O
attr_no	int
)	O
,	O
defval	pointer
,	O
escape_str	int
)	O
;	O
}	O
static	O
grad_dict_attr_t	struct
*	O
parse_dict_attr	function
(	O
char	O
*	O
p	pointer
,	O
char	O
*	O
*	O
endp	pointer
,	O
char	O
*	O
*	O
defval	pointer
)	O
{	O
char	O
namebuf	array
[	O
GRAD_MAX_DICTNAME	int
]	O
;	O
*	O
defval	pointer
=	O
NULL	O
;	O
if	O
(	O
isdigit	function
(	O
*	O
p	pointer
)	O
)	O
{	O
return	O
grad_attr_number_to_dict	function
(	O
strtol	function
(	O
p	pointer
,	O
endp	pointer
,	O
10	int
)	O
)	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
'{'	O
)	O
{	O
int	O
len	int
,	O
off	long
;	O
p	pointer
++	O
;	O
len	int
=	O
strlen	function
(	O
p	pointer
)	O
;	O
off	long
=	O
strcspn	function
(	O
p	pointer
,	O
":}"	pointer
)	O
;	O
if	O
(	O
off	long
==	O
len	int
||	O
off	long
>=	O
sizeof	O
namebuf	array
)	O
return	O
NULL	O
;	O
strncpy	function
(	O
namebuf	array
,	O
p	pointer
,	O
off	long
)	O
;	O
namebuf	array
[	O
off	long
]	O
=	O
0	int
;	O
p	pointer
+=	O
off	long
;	O
if	O
(	O
*	O
p	pointer
==	O
':'	O
)	O
{	O
int	O
size	int
;	O
char	O
*	O
start	pointer
=	O
p	pointer
+	O
1	int
;	O
for	O
(	O
;	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
'}'	O
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
&&	O
*	O
++	O
p	pointer
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
0	int
)	O
return	O
NULL	O
;	O
size	int
=	O
p	pointer
-	O
start	pointer
+	O
1	int
;	O
*	O
defval	pointer
=	O
grad_emalloc	function
(	O
size	int
)	O
;	O
memcpy	function
(	O
*	O
defval	pointer
,	O
start	pointer
,	O
size	int
-	O
1	int
)	O
;	O
(	O
*	O
defval	pointer
)	O
[	O
size	int
-	O
1	int
]	O
=	O
0	int
;	O
}	O
*	O
endp	pointer
=	O
p	pointer
+	O
1	int
;	O
return	O
grad_attr_name_to_dict	function
(	O
namebuf	array
)	O
;	O
}	O
*	O
endp	pointer
=	O
p	pointer
;	O
return	O
NULL	O
;	O
}	O
void	O
radius_xlate0	function
(	O
struct	O
obstack	struct
*	O
obp	pointer
,	O
char	O
*	O
str	pointer
,	O
grad_request_t	struct
*	O
req	pointer
,	O
grad_avp_t	struct
*	O
reply	pointer
)	O
{	O
int	O
c	pointer
;	O
char	O
*	O
p	pointer
;	O
grad_dict_attr_t	struct
*	O
da	pointer
;	O
char	O
*	O
defval	pointer
;	O
int	O
escape	int
;	O
for	O
(	O
p	pointer
=	O
str	pointer
;	O
*	O
p	pointer
;	O
)	O
{	O
switch	O
(	O
c	pointer
=	O
*	O
p	pointer
++	O
)	O
{	O
default	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
c	pointer
)	O
;	O
break	O
;	O
case	O
0	int
:	O
goto	O
end	pointer
;	O
case	O
'\n'	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
'\r'	O
)	O
;	O
obstack_1grow	O
(	O
obp	pointer
,	O
c	pointer
)	O
;	O
break	O
;	O
case	O
'%'	O
:	O
if	O
(	O
!	O
req	pointer
)	O
{	O
obstack_1grow	O
(	O
obp	pointer
,	O
c	pointer
)	O
;	O
break	O
;	O
}	O
escape	int
=	O
(	O
p	pointer
>	O
str	pointer
+	O
1	int
&&	O
(	O
p	pointer
[	O
-	O
2	int
]	O
==	O
'\''	O
||	O
p	pointer
[	O
-	O
2	int
]	O
==	O
'"'	O
)	O
)	O
;	O
switch	O
(	O
c	pointer
=	O
*	O
p	pointer
++	O
)	O
{	O
case	O
'%'	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
c	pointer
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
curtime_to_str	function
(	O
obp	pointer
,	O
req	pointer
->	O
avlist	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'G'	O
:	O
curtime_to_str	function
(	O
obp	pointer
,	O
req	pointer
->	O
avlist	pointer
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
attrno_to_str	function
(	O
obp	pointer
,	O
NULL	O
,	O
reply	pointer
,	O
DA_FRAMED_IP_ADDRESS	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
attrno_to_str	function
(	O
obp	pointer
,	O
req	pointer
,	O
req	pointer
->	O
avlist	pointer
,	O
DA_NAS_IP_ADDRESS	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
attrno_to_str	function
(	O
obp	pointer
,	O
NULL	O
,	O
reply	pointer
,	O
DA_FRAMED_MTU	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'p'	O
:	O
attrno_to_str	function
(	O
obp	pointer
,	O
req	pointer
,	O
req	pointer
->	O
avlist	pointer
,	O
DA_NAS_PORT_ID	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'u'	O
:	O
attrno_to_str	function
(	O
obp	pointer
,	O
req	pointer
,	O
req	pointer
->	O
avlist	pointer
,	O
DA_USER_NAME	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
attrno_to_str	function
(	O
obp	pointer
,	O
NULL	O
,	O
reply	pointer
,	O
DA_CALLBACK_NUMBER	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
attrno_to_str	function
(	O
obp	pointer
,	O
req	pointer
,	O
req	pointer
->	O
avlist	pointer
,	O
DA_CALLING_STATION_ID	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'a'	O
:	O
attrno_to_str	function
(	O
obp	pointer
,	O
NULL	O
,	O
reply	pointer
,	O
DA_FRAMED_PROTOCOL	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
attrno_to_str	function
(	O
obp	pointer
,	O
req	pointer
,	O
req	pointer
->	O
avlist	pointer
,	O
DA_CONNECT_INFO	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'C'	O
:	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
)	O
{	O
escape	int
=	O
1	int
;	O
p	pointer
++	O
;	O
}	O
da	pointer
=	O
parse_dict_attr	function
(	O
p	pointer
,	O
&	O
p	pointer
,	O
&	O
defval	pointer
)	O
;	O
attr_to_str	function
(	O
obp	pointer
,	O
req	pointer
,	O
req	pointer
->	O
avlist	pointer
,	O
da	pointer
,	O
defval	pointer
,	O
escape	int
)	O
;	O
grad_free	function
(	O
defval	pointer
)	O
;	O
break	O
;	O
case	O
'R'	O
:	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
)	O
{	O
escape	int
=	O
1	int
;	O
p	pointer
++	O
;	O
}	O
da	pointer
=	O
parse_dict_attr	function
(	O
p	pointer
,	O
&	O
p	pointer
,	O
&	O
defval	pointer
)	O
;	O
attr_to_str	function
(	O
obp	pointer
,	O
NULL	O
,	O
reply	pointer
,	O
da	pointer
,	O
defval	pointer
,	O
escape	int
)	O
;	O
break	O
;	O
default	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
'%'	O
)	O
;	O
obstack_1grow	O
(	O
obp	pointer
,	O
c	pointer
)	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
'\\'	O
:	O
switch	O
(	O
c	pointer
=	O
*	O
p	pointer
++	O
)	O
{	O
case	O
'a'	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
'\a'	O
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
'\b'	O
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
'\f'	O
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
'\033'	O
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
'\n'	O
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
'\r'	O
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
'\t'	O
)	O
;	O
break	O
;	O
case	O
0	int
:	O
goto	O
end	pointer
;	O
default	O
:	O
obstack_1grow	O
(	O
obp	pointer
,	O
'\\'	O
)	O
;	O
obstack_1grow	O
(	O
obp	pointer
,	O
c	pointer
)	O
;	O
break	O
;	O
}	O
}	O
}	O
end	pointer
:	O
return	O
;	O
}	O
char	O
*	O
radius_xlate	function
(	O
struct	O
obstack	struct
*	O
obp	pointer
,	O
char	O
*	O
str	pointer
,	O
grad_request_t	struct
*	O
req	pointer
,	O
grad_avp_t	struct
*	O
reply	pointer
)	O
{	O
radius_xlate0	function
(	O
obp	pointer
,	O
str	pointer
,	O
req	pointer
,	O
reply	pointer
)	O
;	O
obstack_1grow	O
(	O
obp	pointer
,	O
0	int
)	O
;	O
return	O
obstack_finish	O
(	O
obp	pointer
)	O
;	O
}	O
char	O
*	O
util_xlate	function
(	O
struct	O
obstack	struct
*	O
sp	pointer
,	O
char	O
*	O
fmt	pointer
,	O
grad_request_t	struct
*	O
radreq	pointer
)	O
{	O
char	O
*	O
str	pointer
;	O
if	O
(	O
fmt	pointer
[	O
0	int
]	O
==	O
'='	O
)	O
{	O
grad_value_t	struct
val	array
;	O
if	O
(	O
rewrite_interpret	function
(	O
fmt	pointer
+	O
1	int
,	O
radreq	pointer
,	O
&	O
val	array
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
val	array
.	O
type	int
!=	O
String	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"%s: %s"	pointer
,	O
fmt	pointer
+	O
1	int
,	O
_	O
(	O
"wrong return type"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
obstack_grow	O
(	O
sp	pointer
,	O
val	array
.	O
datum	union
.	O
sval	struct
.	O
data	pointer
,	O
val	array
.	O
datum	union
.	O
sval	struct
.	O
size	int
+	O
1	int
)	O
;	O
grad_value_free	function
(	O
&	O
val	array
)	O
;	O
str	pointer
=	O
obstack_finish	O
(	O
sp	pointer
)	O
;	O
}	O
else	O
{	O
str	pointer
=	O
radius_xlate	function
(	O
sp	pointer
,	O
fmt	pointer
,	O
radreq	pointer
,	O
NULL	O
)	O
;	O
}	O
return	O
str	pointer
;	O
}	O
static	O
void	O
pair_set_value	function
(	O
grad_avp_t	struct
*	O
p	pointer
,	O
grad_value_t	struct
*	O
val	array
)	O
{	O
char	O
buf	pointer
[	O
64	int
]	O
;	O
char	O
*	O
endp	pointer
;	O
switch	O
(	O
val	array
->	O
type	int
)	O
{	O
case	O
Integer	int
:	O
switch	O
(	O
p	pointer
->	O
type	int
)	O
{	O
case	O
GRAD_TYPE_STRING	int
:	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"%lu"	pointer
,	O
val	array
->	O
datum	union
.	O
ival	int
)	O
;	O
grad_string_replace	function
(	O
&	O
p	pointer
->	O
avp_strvalue	O
,	O
buf	pointer
)	O
;	O
p	pointer
->	O
avp_strlength	O
=	O
strlen	function
(	O
p	pointer
->	O
avp_strvalue	O
)	O
;	O
break	O
;	O
case	O
GRAD_TYPE_INTEGER	int
:	O
case	O
GRAD_TYPE_IPADDR	int
:	O
case	O
GRAD_TYPE_DATE	int
:	O
p	pointer
->	O
avp_lvalue	O
=	O
val	array
->	O
datum	union
.	O
ival	int
;	O
}	O
break	O
;	O
case	O
String	int
:	O
switch	O
(	O
p	pointer
->	O
type	int
)	O
{	O
case	O
GRAD_TYPE_STRING	int
:	O
grad_string_replace	function
(	O
&	O
p	pointer
->	O
avp_strvalue	O
,	O
val	array
->	O
datum	union
.	O
sval	struct
.	O
data	pointer
)	O
;	O
p	pointer
->	O
avp_strlength	O
=	O
strlen	function
(	O
p	pointer
->	O
avp_strvalue	O
)	O
;	O
break	O
;	O
case	O
GRAD_TYPE_INTEGER	int
:	O
case	O
GRAD_TYPE_IPADDR	int
:	O
case	O
GRAD_TYPE_DATE	int
:	O
p	pointer
->	O
avp_lvalue	O
=	O
strtoul	function
(	O
val	array
->	O
datum	union
.	O
sval	struct
.	O
data	pointer
,	O
&	O
endp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
endp	pointer
)	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"cannot convert \"%s\" to integer"	pointer
)	O
,	O
val	array
->	O
datum	union
.	O
sval	struct
)	O
;	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
grad_insist_fail	O
(	O
"bad datatype"	pointer
)	O
;	O
}	O
p	pointer
->	O
eval_type	enum
=	O
grad_eval_const	int
;	O
}	O
int	O
radius_eval_avp	function
(	O
radiusd_request_t	struct
*	O
req	pointer
,	O
grad_avp_t	struct
*	O
p	pointer
,	O
grad_avp_t	struct
*	O
reply	pointer
,	O
int	O
allow_xlate	int
)	O
{	O
grad_value_t	struct
val	array
;	O
switch	O
(	O
p	pointer
->	O
eval_type	enum
)	O
{	O
case	O
grad_eval_const	int
:	O
if	O
(	O
allow_xlate	int
&&	O
strchr	function
(	O
p	pointer
->	O
avp_strvalue	O
,	O
'%'	O
)	O
)	O
{	O
struct	O
obstack	struct
s	pointer
;	O
char	O
*	O
ptr	pointer
;	O
obstack_init	O
(	O
&	O
s	pointer
)	O
;	O
ptr	pointer
=	O
radius_xlate	function
(	O
&	O
s	pointer
,	O
p	pointer
->	O
avp_strvalue	O
,	O
req	pointer
->	O
request	pointer
,	O
reply	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
ptr	pointer
,	O
p	pointer
->	O
avp_strvalue	O
)	O
)	O
{	O
grad_string_replace	function
(	O
&	O
p	pointer
->	O
avp_strvalue	O
,	O
ptr	pointer
)	O
;	O
p	pointer
->	O
avp_strlength	O
=	O
strlen	function
(	O
p	pointer
->	O
avp_strvalue	O
)	O
;	O
}	O
obstack_free	function
(	O
&	O
s	pointer
,	O
NULL	O
)	O
;	O
}	O
break	O
;	O
case	O
grad_eval_interpret	int
:	O
if	O
(	O
rewrite_interpret	function
(	O
p	pointer
->	O
avp_strvalue	O
,	O
req	pointer
->	O
request	pointer
,	O
&	O
val	array
)	O
)	O
return	O
1	int
;	O
pair_set_value	function
(	O
p	pointer
,	O
&	O
val	array
)	O
;	O
grad_value_free	function
(	O
&	O
val	array
)	O
;	O
break	O
;	O
case	O
grad_eval_compiled	int
:	O
if	O
(	O
rewrite_eval	function
(	O
p	pointer
->	O
avp_strvalue	O
,	O
req	pointer
->	O
request	pointer
,	O
&	O
val	array
)	O
)	O
return	O
1	int
;	O
pair_set_value	function
(	O
p	pointer
,	O
&	O
val	array
)	O
;	O
grad_value_free	function
(	O
&	O
val	array
)	O
;	O
break	O
;	O
default	O
:	O
grad_insist_fail	O
(	O
"bad eval_type"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
p	pointer
->	O
eval_type	enum
=	O
grad_eval_const	int
;	O
return	O
0	int
;	O
}	O
int	O
radius_eval_avl	function
(	O
radiusd_request_t	struct
*	O
req	pointer
,	O
grad_avp_t	struct
*	O
p	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
for	O
(	O
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
status	int
|=	O
radius_eval_avp	function
(	O
req	pointer
,	O
p	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
radiusd_request_t	struct
*	O
radiusd_request_alloc	function
(	O
grad_request_t	struct
*	O
req	pointer
)	O
{	O
radiusd_request_t	struct
*	O
ret	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
ret	pointer
)	O
)	O
;	O
ret	pointer
->	O
request	pointer
=	O
req	pointer
;	O
return	O
ret	pointer
;	O
}	O
void	O
radiusd_request_free	function
(	O
radiusd_request_t	struct
*	O
radreq	pointer
)	O
{	O
grad_list_destroy	function
(	O
&	O
radreq	pointer
->	O
locus_list	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
grad_free	function
(	O
radreq	pointer
->	O
remote_user	pointer
)	O
;	O
grad_avl_free	function
(	O
radreq	pointer
->	O
reply_pairs	pointer
)	O
;	O
grad_free	function
(	O
radreq	pointer
->	O
reply_msg	pointer
)	O
;	O
grad_avl_free	function
(	O
radreq	pointer
->	O
server_reply	pointer
)	O
;	O
grad_request_free	function
(	O
radreq	pointer
->	O
request	pointer
)	O
;	O
grad_free	function
(	O
radreq	pointer
)	O
;	O
}	O
