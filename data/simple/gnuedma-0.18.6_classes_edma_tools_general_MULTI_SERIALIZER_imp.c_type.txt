typedef	O
struct	O
{	O
EDMAT_BUFFER	struct
buffer	struct
;	O
EDMAT_BUFFER	struct
vmap	struct
;	O
EUint32	long
cnt	long
;	O
}	O
DtMULTI_SERIALIZER	struct
;	O
typedef	O
struct	O
{	O
ESint32	int
type	long
;	O
ESint32	int
size	int
;	O
unsigned	O
char	O
data	array
[	O
1	int
]	O
;	O
}	O
PROP_RECORD	struct
;	O
typedef	O
struct	O
{	O
OBJID	int
virtual_id	int
;	O
EChar	char
class_name	array
[	O
EDMA_CLASS_NAME_LEN	int
]	O
;	O
ESint32	int
major_version	int
;	O
ESint32	int
minor_version	int
;	O
PROP_RECORD	struct
data	array
[	O
1	int
]	O
;	O
}	O
OBJECT_RECORD	struct
;	O
typedef	O
struct	O
{	O
OBJID	int
real_id	int
;	O
OBJID	int
virtual_id	int
;	O
}	O
VIRTUAL_ID_MAP	struct
;	O
typedef	O
struct	O
{	O
ESint32	int
type	long
;	O
OBJID	int
src	int
;	O
OBJID	int
dst	int
;	O
ESint32	int
size	int
;	O
EChar	char
Id	int
[	O
EDMA_GENERAL_ID_LEN	int
]	O
;	O
}	O
MAPPING_RECORD	struct
;	O
typedef	O
struct	O
{	O
EChar	char
serializer_class	array
[	O
EDMA_CLASS_NAME_LEN	int
]	O
;	O
ESint32	int
major_version	int
;	O
ESint32	int
minor_version	int
;	O
ESint32	int
n_obj	int
;	O
ESint32	int
n_ap	int
;	O
unsigned	O
char	O
data	array
[	O
1	int
]	O
;	O
}	O
DATA_STREAM	struct
;	O
ESint32	int
_marshall_simple_object	function
(	O
EDMAT_BUFFER	struct
*	O
buffer	struct
,	O
OBJID	int
id	int
)	O
;	O
ESint32	int
_marshall_compound_object	function
(	O
OBJID	int
mems	int
,	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
)	O
;	O
ESint32	int
_marshall_anchor_points	function
(	O
OBJID	int
mems	int
,	O
OBJID	int
IdObj	int
)	O
;	O
ESint32	int
_unmarshall_simple_object	function
(	O
OBJID	int
ms	int
,	O
OBJID	int
*	O
id	int
)	O
;	O
ESint32	int
_vmap_locate	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
)	O
;	O
OBJID	int
_vmap_at	function
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
i	int
)	O
;	O
ESint32	int
_vmap_add	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
)	O
;	O
ESint32	int
EDMAPROC	O
MULTI_SERIALIZERmarshallOrS32	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
)	O
{	O
DtMULTI_SERIALIZER	struct
*	O
m	pointer
;	O
CLASSID	int
cid	int
;	O
OBJID	int
ms	int
,	O
n_ap	int
;	O
ESint32	int
len	int
;	O
ESint32	int
size	int
;	O
EDMAT_BUFFER	struct
aux	struct
,	O
aux1	struct
;	O
m	pointer
=	O
(	O
DtMULTI_SERIALIZER	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
m	pointer
->	O
cnt	long
=	O
0	int
;	O
if	O
(	O
(	O
cid	int
=	O
edma_get_obj_class_id	function
(	O
id	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[Marshall] **ERROR** Can't get class id for object %d"	pointer
,	O
id	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
ms	int
=	O
edma_new_obj	function
(	O
"MEMORY_STREAM"	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[Marshall] **ERROR** Can't create MEMORY_STREAM object"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_buffer_alloc	function
(	O
&	O
aux	struct
,	O
sizeof	O
(	O
DATA_STREAM	struct
)	O
)	O
;	O
strcpy	function
(	O
(	O
(	O
DATA_STREAM	struct
*	O
)	O
aux	struct
.	O
dat	pointer
)	O
->	O
serializer_class	array
,	O
"MULTI_SERIALIZER"	pointer
)	O
;	O
(	O
(	O
DATA_STREAM	struct
*	O
)	O
aux	struct
.	O
dat	pointer
)	O
->	O
major_version	int
=	O
0	int
;	O
(	O
(	O
DATA_STREAM	struct
*	O
)	O
aux	struct
.	O
dat	pointer
)	O
->	O
minor_version	int
=	O
0	int
;	O
size	int
=	O
EDMA_CLASS_NAME_LEN	int
+	O
2	int
*	O
sizeof	O
(	O
ESint32	int
)	O
;	O
len	int
=	O
aux	struct
.	O
Size	long
;	O
edma_met3	function
(	O
ms	int
,	O
"write"	pointer
,	O
aux	struct
,	O
&	O
len	int
)	O
;	O
edma_buffer_free	function
(	O
&	O
aux	struct
)	O
;	O
_marshall_compound_object	function
(	O
ms	int
,	O
IdObj	int
,	O
id	int
)	O
;	O
n_ap	int
=	O
_marshall_anchor_points	function
(	O
ms	int
,	O
IdObj	int
)	O
;	O
edma_rprop3	function
(	O
ms	int
,	O
"buf"	pointer
,	O
&	O
aux1	struct
)	O
;	O
(	O
(	O
DATA_STREAM	struct
*	O
)	O
aux1	struct
.	O
dat	pointer
)	O
->	O
n_obj	int
=	O
m	pointer
->	O
cnt	long
;	O
(	O
(	O
DATA_STREAM	struct
*	O
)	O
aux1	struct
.	O
dat	pointer
)	O
->	O
n_ap	int
=	O
n_ap	int
;	O
edma_buffer_alloc	function
(	O
&	O
aux	struct
,	O
aux1	struct
.	O
Size	long
)	O
;	O
memcpy	function
(	O
aux	struct
.	O
dat	pointer
,	O
aux1	struct
.	O
dat	pointer
,	O
aux1	struct
.	O
Size	long
)	O
;	O
edma_wprop3	function
(	O
IdObj	int
,	O
"buffer"	pointer
,	O
aux	struct
)	O
;	O
edma_free_obj	function
(	O
ms	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
_marshall_compound_object	function
(	O
OBJID	int
mems	int
,	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
)	O
{	O
DtMULTI_SERIALIZER	struct
*	O
m	pointer
;	O
ESint32	int
i	int
,	O
len	int
,	O
n	int
;	O
OBJID	int
temp_id	int
;	O
EDMAT_BUFFER	struct
aux	struct
;	O
m	pointer
=	O
(	O
DtMULTI_SERIALIZER	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
_vmap_locate	function
(	O
IdObj	int
,	O
id	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
len	int
=	O
_marshall_simple_object	function
(	O
&	O
aux	struct
,	O
id	int
)	O
;	O
_vmap_add	function
(	O
IdObj	int
,	O
id	int
)	O
;	O
edma_met3	function
(	O
mems	int
,	O
"write"	pointer
,	O
aux	struct
,	O
&	O
len	int
)	O
;	O
edma_buffer_free	function
(	O
&	O
aux	struct
)	O
;	O
}	O
else	O
return	O
-	O
1	int
;	O
n	int
=	O
edma_get_obj_num_superobjects	function
(	O
id	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
temp_id	int
=	O
edma_get_obj_superobject	function
(	O
id	int
,	O
i	int
)	O
;	O
_marshall_compound_object	function
(	O
mems	int
,	O
IdObj	int
,	O
temp_id	int
)	O
;	O
}	O
n	int
=	O
edma_get_obj_num_subobjects	function
(	O
id	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
temp_id	int
=	O
edma_get_obj_subobject	function
(	O
id	int
,	O
i	int
)	O
;	O
_marshall_compound_object	function
(	O
mems	int
,	O
IdObj	int
,	O
temp_id	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	int
_marshall_anchor_points	function
(	O
OBJID	int
mems	int
,	O
OBJID	int
IdObj	int
)	O
{	O
DtMULTI_SERIALIZER	struct
*	O
m	pointer
;	O
ESint32	int
i	int
,	O
j	int
,	O
k	int
,	O
len	int
,	O
n	int
,	O
n_objs	int
,	O
n_items	int
;	O
OBJID	int
temp_id	int
,	O
temp_id1	int
;	O
EDMAT_BUFFER	struct
aux	struct
;	O
VIRTUAL_ID_MAP	struct
*	O
p	pointer
;	O
EChar	char
ap_name	array
[	O
EDMA_GENERAL_ID_LEN	int
]	O
;	O
MAPPING_RECORD	struct
*	O
mr	pointer
;	O
m	pointer
=	O
(	O
DtMULTI_SERIALIZER	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
p	pointer
=	O
(	O
VIRTUAL_ID_MAP	struct
*	O
)	O
m	pointer
->	O
vmap	struct
.	O
dat	pointer
;	O
n_objs	int
=	O
m	pointer
->	O
cnt	long
;	O
n_items	int
=	O
0	int
;	O
aux	struct
.	O
h	long
=	O
(	O
HMEM	long
)	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
n_objs	int
;	O
k	int
++	O
)	O
{	O
j	int
=	O
p	pointer
[	O
k	int
]	O
.	O
real_id	int
;	O
n	int
=	O
edma_get_obj_num_superobjects	function
(	O
j	int
)	O
;	O
if	O
(	O
n	int
)	O
{	O
if	O
(	O
(	O
edma_buffer_realloc	function
(	O
&	O
aux	struct
,	O
sizeof	O
(	O
MAPPING_RECORD	struct
)	O
*	O
(	O
n_items	int
+	O
n	int
)	O
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[%s] **ERROR** Can't realloc buffer"	pointer
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
mr	pointer
=	O
(	O
MAPPING_RECORD	struct
*	O
)	O
aux	struct
.	O
dat	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
temp_id	int
=	O
edma_get_obj_superobject	function
(	O
j	int
,	O
i	int
)	O
;	O
temp_id1	int
=	O
_vmap_locate	function
(	O
IdObj	int
,	O
temp_id	int
)	O
;	O
edma_get_obj_superobject_ap	function
(	O
j	int
,	O
i	int
,	O
ap_name	array
)	O
;	O
mr	pointer
[	O
n_items	int
]	O
.	O
type	long
=	O
SUPER	int
;	O
mr	pointer
[	O
n_items	int
]	O
.	O
src	int
=	O
k	int
;	O
mr	pointer
[	O
n_items	int
]	O
.	O
dst	int
=	O
temp_id1	int
;	O
mr	pointer
[	O
n_items	int
]	O
.	O
size	int
=	O
strlen	function
(	O
ap_name	array
)	O
;	O
strcpy	function
(	O
mr	pointer
[	O
n_items	int
]	O
.	O
Id	int
,	O
ap_name	array
)	O
;	O
n_items	int
++	O
;	O
}	O
n	int
=	O
edma_get_obj_num_subobjects	function
(	O
j	int
)	O
;	O
if	O
(	O
n	int
)	O
{	O
if	O
(	O
(	O
edma_buffer_realloc	function
(	O
&	O
aux	struct
,	O
sizeof	O
(	O
MAPPING_RECORD	struct
)	O
*	O
(	O
n_items	int
+	O
n	int
)	O
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[%s] **ERROR** Can't realloc buffer"	pointer
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
mr	pointer
=	O
(	O
MAPPING_RECORD	struct
*	O
)	O
aux	struct
.	O
dat	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
temp_id	int
=	O
edma_get_obj_subobject	function
(	O
j	int
,	O
i	int
)	O
;	O
temp_id1	int
=	O
_vmap_locate	function
(	O
IdObj	int
,	O
temp_id	int
)	O
;	O
edma_get_obj_subobject_ap	function
(	O
j	int
,	O
i	int
,	O
ap_name	array
)	O
;	O
mr	pointer
[	O
n_items	int
]	O
.	O
type	long
=	O
SUB	int
;	O
mr	pointer
[	O
n_items	int
]	O
.	O
src	int
=	O
k	int
;	O
mr	pointer
[	O
n_items	int
]	O
.	O
dst	int
=	O
temp_id1	int
;	O
mr	pointer
[	O
n_items	int
]	O
.	O
size	int
=	O
strlen	function
(	O
ap_name	array
)	O
;	O
strcpy	function
(	O
mr	pointer
[	O
n_items	int
]	O
.	O
Id	int
,	O
ap_name	array
)	O
;	O
n_items	int
++	O
;	O
}	O
}	O
len	int
=	O
aux	struct
.	O
Size	long
;	O
edma_met3	function
(	O
mems	int
,	O
"write"	pointer
,	O
aux	struct
,	O
&	O
len	int
)	O
;	O
return	O
n_items	int
;	O
}	O
ESint32	int
_marshall_simple_object	function
(	O
EDMAT_BUFFER	struct
*	O
buffer	struct
,	O
OBJID	int
id	int
)	O
{	O
CLASSID	int
cid	int
;	O
ESint32	int
n_prop	int
;	O
unsigned	O
char	O
*	O
data	array
;	O
EUint32	long
type	long
,	O
size	int
,	O
new_size	long
,	O
old_size	long
,	O
i	int
;	O
EChar	char
prop_name	array
[	O
EDMA_PROP_NAME_LEN	O
]	O
;	O
EDMAT_BUFFER	struct
aux	struct
;	O
unsigned	O
char	O
base_type	array
[	O
8	int
]	O
;	O
PROP_RECORD	struct
*	O
item	pointer
;	O
if	O
(	O
(	O
cid	int
=	O
edma_get_obj_class_id	function
(	O
id	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	function
(	O
"[_marshall_simple_object]*ERROR* Can't get class id for object %d"	pointer
,	O
id	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
n_prop	int
=	O
edma_get_prop_num	function
(	O
cid	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	function
(	O
"[_marshall_simple_object]*ERROR* Can't get number of properties "	pointer
"for class id %ld"	pointer
,	O
cid	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_buffer_alloc	function
(	O
buffer	struct
,	O
sizeof	O
(	O
OBJECT_RECORD	struct
)	O
)	O
;	O
edma_get_class_name	function
(	O
cid	int
,	O
(	O
(	O
OBJECT_RECORD	struct
*	O
)	O
buffer	struct
->	O
dat	pointer
)	O
->	O
class_name	array
)	O
;	O
new_size	long
=	O
0	int
;	O
old_size	long
=	O
EDMA_CLASS_NAME_LEN	int
+	O
2	int
*	O
sizeof	O
(	O
ESint32	int
)	O
+	O
sizeof	O
(	O
OBJID	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_prop	int
;	O
i	int
++	O
)	O
{	O
edma_get_prop_name	function
(	O
cid	int
,	O
i	int
,	O
prop_name	array
)	O
;	O
type	long
=	O
edma_get_prop_type_id	function
(	O
cid	int
,	O
i	int
)	O
;	O
size	int
=	O
edma_get_type_size	function
(	O
type	long
)	O
;	O
switch	O
(	O
type	long
)	O
{	O
case	O
DT_EBUFFER	int
:	O
edma_rprop1	function
(	O
id	int
,	O
i	int
,	O
&	O
aux	struct
)	O
;	O
size	int
=	O
aux	struct
.	O
Size	long
;	O
break	O
;	O
case	O
DT_EZSTRING	int
:	O
size	int
=	O
edma_prop1_size	function
(	O
id	int
,	O
i	int
)	O
+	O
1	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
new_size	long
=	O
old_size	long
+	O
sizeof	O
(	O
ESint32	int
)	O
*	O
2	int
+	O
size	int
;	O
edma_buffer_realloc	function
(	O
buffer	struct
,	O
new_size	long
)	O
;	O
item	pointer
=	O
(	O
PROP_RECORD	struct
*	O
)	O
(	O
(	O
EPByte	pointer
)	O
buffer	struct
->	O
dat	pointer
+	O
old_size	long
)	O
;	O
item	pointer
->	O
type	long
=	O
type	long
;	O
item	pointer
->	O
size	int
=	O
size	int
;	O
switch	O
(	O
type	long
)	O
{	O
case	O
DT_EBUFFER	int
:	O
data	array
=	O
(	O
unsigned	O
char	O
*	O
)	O
aux	struct
.	O
dat	pointer
;	O
memcpy	function
(	O
item	pointer
->	O
data	array
,	O
data	array
,	O
size	int
)	O
;	O
break	O
;	O
case	O
DT_EZSTRING	int
:	O
memset	function
(	O
item	pointer
->	O
data	array
,	O
0	int
,	O
item	pointer
->	O
size	int
)	O
;	O
edma_rprop1	function
(	O
id	int
,	O
i	int
,	O
item	pointer
->	O
data	array
)	O
;	O
break	O
;	O
default	O
:	O
edma_rprop1	function
(	O
id	int
,	O
i	int
,	O
&	O
base_type	array
)	O
;	O
data	array
=	O
base_type	array
;	O
memcpy	function
(	O
item	pointer
->	O
data	array
,	O
data	array
,	O
size	int
)	O
;	O
break	O
;	O
}	O
old_size	long
=	O
new_size	long
;	O
}	O
printf	function
(	O
"Total size is: %d\n"	pointer
,	O
old_size	long
)	O
;	O
return	O
old_size	long
;	O
}	O
ESint32	int
EDMAPROC	O
MULTI_SERIALIZERunmarshallsOrS32	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
*	O
id	int
)	O
{	O
DtMULTI_SERIALIZER	struct
*	O
m	pointer
;	O
DATA_STREAM	struct
*	O
header	pointer
;	O
ESint32	int
i	int
,	O
len	int
;	O
OBJID	int
ms	int
,	O
temp_id	int
;	O
OBJID	int
src_id	int
,	O
dst_id	int
;	O
EDMAT_BUFFER	struct
aux	struct
;	O
MAPPING_RECORD	struct
*	O
mr	pointer
;	O
m	pointer
=	O
(	O
DtMULTI_SERIALIZER	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_buffer_free	function
(	O
&	O
m	pointer
->	O
vmap	struct
)	O
;	O
m	pointer
->	O
cnt	long
=	O
0	int
;	O
if	O
(	O
(	O
ms	int
=	O
edma_new_obj	function
(	O
"MEMORY_STREAM"	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[Unmarshall] Can't create memory stream"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_rprop3	function
(	O
IdObj	int
,	O
"buffer"	pointer
,	O
&	O
aux	struct
)	O
;	O
edma_wprop3	function
(	O
ms	int
,	O
"buf"	pointer
,	O
aux	struct
)	O
;	O
len	int
=	O
sizeof	O
(	O
DATA_STREAM	struct
)	O
;	O
edma_buffer_alloc	function
(	O
&	O
aux	struct
,	O
len	int
)	O
;	O
edma_met3	function
(	O
ms	int
,	O
"read"	pointer
,	O
&	O
aux	struct
,	O
&	O
len	int
)	O
;	O
header	pointer
=	O
(	O
DATA_STREAM	struct
*	O
)	O
m	pointer
->	O
buffer	struct
.	O
dat	pointer
;	O
edma_log	function
(	O
IdObj	int
,	O
"Stream serialized using %s v %d.%d"	pointer
,	O
header	pointer
->	O
serializer_class	array
,	O
header	pointer
->	O
major_version	int
,	O
header	pointer
->	O
minor_version	int
)	O
;	O
edma_log	function
(	O
IdObj	int
,	O
"Unmarshalling compound object. %d subobjects and %d ap rules"	pointer
,	O
header	pointer
->	O
n_obj	int
,	O
header	pointer
->	O
n_ap	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
header	pointer
->	O
n_obj	int
;	O
i	int
++	O
)	O
{	O
_unmarshall_simple_object	function
(	O
ms	int
,	O
&	O
temp_id	int
)	O
;	O
_vmap_add	function
(	O
IdObj	int
,	O
temp_id	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
header	pointer
->	O
n_ap	int
;	O
i	int
++	O
)	O
{	O
len	int
=	O
sizeof	O
(	O
MAPPING_RECORD	struct
)	O
;	O
edma_met3	function
(	O
ms	int
,	O
"read"	pointer
,	O
&	O
aux	struct
,	O
&	O
len	int
)	O
;	O
mr	pointer
=	O
(	O
MAPPING_RECORD	struct
*	O
)	O
aux	struct
.	O
dat	pointer
;	O
src_id	int
=	O
_vmap_at	function
(	O
IdObj	int
,	O
mr	pointer
->	O
src	int
)	O
;	O
dst_id	int
=	O
_vmap_at	function
(	O
IdObj	int
,	O
mr	pointer
->	O
dst	int
)	O
;	O
switch	O
(	O
mr	pointer
->	O
type	long
)	O
{	O
case	O
SUPER	int
:	O
edma_add_superobject	function
(	O
src_id	int
,	O
dst_id	int
,	O
mr	pointer
->	O
Id	int
)	O
;	O
break	O
;	O
case	O
SUB	int
:	O
edma_add_subobject	function
(	O
src_id	int
,	O
dst_id	int
,	O
mr	pointer
->	O
Id	int
)	O
;	O
break	O
;	O
}	O
edma_buffer_free	function
(	O
&	O
aux	struct
)	O
;	O
}	O
*	O
id	int
=	O
_vmap_at	function
(	O
IdObj	int
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
_unmarshall_simple_object	function
(	O
OBJID	int
ms	int
,	O
OBJID	int
*	O
id	int
)	O
{	O
CLASSID	int
cid	int
;	O
EDMAT_BUFFER	struct
aux	struct
,	O
data	array
;	O
ESint32	int
i	int
,	O
len	int
,	O
n_prop	int
,	O
type	long
;	O
OBJECT_RECORD	struct
*	O
obj	pointer
;	O
PROP_RECORD	struct
*	O
item	pointer
;	O
EChar	char
cname	array
[	O
1024	int
]	O
;	O
len	int
=	O
sizeof	O
(	O
OBJECT_RECORD	struct
)	O
-	O
sizeof	O
(	O
PROP_RECORD	struct
)	O
;	O
edma_buffer_alloc	function
(	O
&	O
aux	struct
,	O
len	int
)	O
;	O
edma_met3	function
(	O
ms	int
,	O
"read"	pointer
,	O
&	O
aux	struct
,	O
&	O
len	int
)	O
;	O
obj	pointer
=	O
(	O
OBJECT_RECORD	struct
*	O
)	O
aux	struct
.	O
dat	pointer
;	O
if	O
(	O
(	O
cid	int
=	O
edma_get_class_id	function
(	O
obj	pointer
->	O
class_name	array
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	function
(	O
"[%s] Class '%s' doesn't exist"	pointer
,	O
__FUNCTION__	O
,	O
obj	pointer
->	O
class_name	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_load_class_int	function
(	O
cid	int
)	O
;	O
if	O
(	O
(	O
n_prop	int
=	O
edma_get_prop_num	function
(	O
cid	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf	function
(	O
"[%s] ** ERROR ** Can't get number of properties "	pointer
"for class id %ld"	pointer
,	O
__FUNCTION__	O
,	O
cid	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
*	O
id	int
=	O
edma_new_simple_obj	function
(	O
obj	pointer
->	O
class_name	array
,	O
NULL	O
)	O
;	O
edma_printf	function
(	O
"Received class id: %d. Creating objecto of class '%s'"	pointer
,	O
cid	int
,	O
obj	pointer
->	O
class_name	array
)	O
;	O
edma_buffer_free	function
(	O
&	O
aux	struct
)	O
;	O
printf	function
(	O
"Unmarshalling object of class %s (%d props)\n"	pointer
,	O
obj	pointer
->	O
class_name	array
,	O
n_prop	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_prop	int
;	O
i	int
++	O
)	O
{	O
type	long
=	O
edma_get_prop_type_id	function
(	O
cid	int
,	O
i	int
)	O
;	O
len	int
=	O
sizeof	O
(	O
ESint32	int
)	O
*	O
2	int
;	O
edma_buffer_alloc	function
(	O
&	O
aux	struct
,	O
len	int
)	O
;	O
edma_met3	function
(	O
ms	int
,	O
"read"	pointer
,	O
&	O
aux	struct
,	O
&	O
len	int
)	O
;	O
item	pointer
=	O
(	O
PROP_RECORD	struct
*	O
)	O
aux	struct
.	O
dat	pointer
;	O
printf	function
(	O
"++ Property %d %d bytes\n"	pointer
,	O
i	int
,	O
item	pointer
->	O
size	int
)	O
;	O
if	O
(	O
type	long
!=	O
item	pointer
->	O
type	long
)	O
{	O
edma_printf	function
(	O
"[%s] Type missmatch in property %d (received:%d expected:%d)"	pointer
,	O
__FUNCTION__	O
,	O
i	int
,	O
item	pointer
->	O
type	long
,	O
type	long
)	O
;	O
return	O
-	O
1	int
;	O
}	O
len	int
=	O
item	pointer
->	O
size	int
;	O
edma_buffer_alloc	function
(	O
&	O
data	array
,	O
len	int
)	O
;	O
edma_met3	function
(	O
ms	int
,	O
"read"	pointer
,	O
&	O
data	array
,	O
&	O
len	int
)	O
;	O
switch	O
(	O
type	long
)	O
{	O
case	O
DT_EBUFFER	int
:	O
_edma_wprop1_pargs	function
(	O
*	O
id	int
,	O
i	int
,	O
&	O
data	array
)	O
;	O
break	O
;	O
case	O
DT_EZSTRING	int
:	O
edma_wprop1	function
(	O
*	O
id	int
,	O
i	int
,	O
data	array
.	O
dat	pointer
)	O
;	O
break	O
;	O
default	O
:	O
_edma_wprop1_pargs	function
(	O
*	O
id	int
,	O
i	int
,	O
data	array
.	O
dat	pointer
)	O
;	O
edma_buffer_free	function
(	O
&	O
data	array
)	O
;	O
}	O
edma_buffer_free	function
(	O
&	O
aux	struct
)	O
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MULTI_SERIALIZERsaveZrS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
fname	pointer
)	O
{	O
DtMULTI_SERIALIZER	struct
*	O
m	pointer
;	O
OBJID	int
id	int
;	O
ESint32	int
len	int
;	O
m	pointer
=	O
(	O
DtMULTI_SERIALIZER	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
id	int
=	O
edma_new_obj	function
(	O
"NFILE"	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[ERROR] Can't create 'NFILE' object"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
edma_met3	function
(	O
id	int
,	O
"open"	pointer
,	O
fname	pointer
,	O
"wb"	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't open %s file to save data"	pointer
,	O
fname	pointer
)	O
;	O
edma_free_obj	function
(	O
id	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
len	int
=	O
m	pointer
->	O
buffer	struct
.	O
Size	long
;	O
if	O
(	O
(	O
edma_met3	function
(	O
id	int
,	O
"write"	pointer
,	O
m	pointer
->	O
buffer	struct
,	O
&	O
len	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't write data to file"	pointer
)	O
;	O
edma_free_obj	function
(	O
id	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_met3	function
(	O
id	int
,	O
"close"	pointer
)	O
;	O
edma_free_obj	function
(	O
id	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
MULTI_SERIALIZERloadZrS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
fname	pointer
)	O
{	O
DtMULTI_SERIALIZER	struct
*	O
m	pointer
;	O
OBJID	int
id	int
;	O
ESint32	int
len	int
;	O
m	pointer
=	O
(	O
DtMULTI_SERIALIZER	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
id	int
=	O
edma_new_obj	function
(	O
"NFILE"	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[ERROR] Can't create 'NFILE' object"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
edma_met3	function
(	O
id	int
,	O
"open"	pointer
,	O
fname	pointer
,	O
"rb"	pointer
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't open %s file to read data"	pointer
,	O
fname	pointer
)	O
;	O
edma_free_obj	function
(	O
id	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
len	int
=	O
(	O
ESint32	int
)	O
edma_smet3	function
(	O
"FILESYSTEM"	pointer
,	O
"GetFileSize"	pointer
,	O
fname	pointer
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[INFO] About to read %ld bytes from file %s"	pointer
,	O
len	int
,	O
fname	pointer
)	O
;	O
if	O
(	O
m	pointer
->	O
buffer	struct
.	O
dat	pointer
)	O
edma_buffer_free	function
(	O
&	O
m	pointer
->	O
buffer	struct
)	O
;	O
edma_buffer_alloc	function
(	O
&	O
m	pointer
->	O
buffer	struct
,	O
len	int
)	O
;	O
if	O
(	O
(	O
edma_met3	function
(	O
id	int
,	O
"read"	pointer
,	O
&	O
m	pointer
->	O
buffer	struct
,	O
&	O
len	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Can't write data to file"	pointer
)	O
;	O
edma_free_obj	function
(	O
id	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_met3	function
(	O
id	int
,	O
"close"	pointer
)	O
;	O
edma_free_obj	function
(	O
id	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
_vmap_locate	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
)	O
{	O
DtMULTI_SERIALIZER	struct
*	O
m	pointer
;	O
ESint32	int
n	int
,	O
i	int
;	O
VIRTUAL_ID_MAP	struct
*	O
p	pointer
;	O
m	pointer
=	O
(	O
DtMULTI_SERIALIZER	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
p	pointer
=	O
(	O
VIRTUAL_ID_MAP	struct
*	O
)	O
m	pointer
->	O
vmap	struct
.	O
dat	pointer
;	O
n	int
=	O
m	pointer
->	O
cnt	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
if	O
(	O
p	pointer
[	O
i	int
]	O
.	O
real_id	int
==	O
id	int
)	O
{	O
return	O
i	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
OBJID	int
_vmap_at	function
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
i	int
)	O
{	O
DtMULTI_SERIALIZER	struct
*	O
m	pointer
;	O
VIRTUAL_ID_MAP	struct
*	O
p	pointer
;	O
m	pointer
=	O
(	O
DtMULTI_SERIALIZER	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
p	pointer
=	O
(	O
VIRTUAL_ID_MAP	struct
*	O
)	O
m	pointer
->	O
vmap	struct
.	O
dat	pointer
;	O
if	O
(	O
i	int
>=	O
m	pointer
->	O
cnt	long
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"[%s] Index out of range.... Data may be corrupted"	pointer
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
p	pointer
[	O
i	int
]	O
.	O
real_id	int
;	O
}	O
ESint32	int
_vmap_add	function
(	O
OBJID	int
IdObj	int
,	O
OBJID	int
id	int
)	O
{	O
DtMULTI_SERIALIZER	struct
*	O
m	pointer
;	O
ESint32	int
n	int
;	O
VIRTUAL_ID_MAP	struct
*	O
p	pointer
;	O
m	pointer
=	O
(	O
DtMULTI_SERIALIZER	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
n	int
=	O
m	pointer
->	O
cnt	long
;	O
if	O
(	O
(	O
_vmap_locate	function
(	O
IdObj	int
,	O
id	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
(	O
edma_buffer_realloc	function
(	O
&	O
m	pointer
->	O
vmap	struct
,	O
sizeof	O
(	O
VIRTUAL_ID_MAP	struct
)	O
*	O
(	O
m	pointer
->	O
cnt	long
+	O
1	int
)	O
)	O
)	O
==	O
-	O
1	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"(_vmap_add) ** ERROR **. Can't alloc memory"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
p	pointer
=	O
(	O
VIRTUAL_ID_MAP	struct
*	O
)	O
m	pointer
->	O
vmap	struct
.	O
dat	pointer
;	O
p	pointer
[	O
m	pointer
->	O
cnt	long
]	O
.	O
real_id	int
=	O
id	int
;	O
p	pointer
[	O
m	pointer
->	O
cnt	long
]	O
.	O
virtual_id	int
=	O
m	pointer
->	O
cnt	long
;	O
m	pointer
->	O
cnt	long
++	O
;	O
return	O
(	O
m	pointer
->	O
cnt	long
-	O
1	int
)	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
