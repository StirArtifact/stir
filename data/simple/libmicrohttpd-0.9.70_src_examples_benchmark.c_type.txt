static	O
unsigned	O
int	O
small_deltas	array
[	O
SMALL	O
]	O
;	O
static	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
static	O
void	O
completed_callback	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
void	O
*	O
*	O
con_cls	pointer
,	O
enum	O
MHD_RequestTerminationCode	enum
toe	enum
)	O
{	O
struct	O
timeval	struct
*	O
tv	pointer
=	O
*	O
con_cls	pointer
;	O
struct	O
timeval	struct
tve	struct
;	O
uint64_t	long
delta	long
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
connection	pointer
;	O
(	O
void	O
)	O
toe	enum
;	O
if	O
(	O
NULL	O
==	O
tv	pointer
)	O
return	O
;	O
gettimeofday	function
(	O
&	O
tve	struct
,	O
NULL	O
)	O
;	O
delta	long
=	O
0	int
;	O
if	O
(	O
tve	struct
.	O
tv_usec	long
>=	O
tv	pointer
->	O
tv_usec	long
)	O
delta	long
+=	O
(	O
tve	struct
.	O
tv_sec	long
-	O
tv	pointer
->	O
tv_sec	long
)	O
*	O
1000000LL	int
+	O
(	O
tve	struct
.	O
tv_usec	long
-	O
tv	pointer
->	O
tv_usec	long
)	O
;	O
else	O
delta	long
+=	O
(	O
tve	struct
.	O
tv_sec	long
-	O
tv	pointer
->	O
tv_sec	long
)	O
*	O
1000000LL	int
-	O
tv	pointer
->	O
tv_usec	long
+	O
tve	struct
.	O
tv_usec	long
;	O
if	O
(	O
delta	long
<	O
SMALL	O
)	O
small_deltas	array
[	O
delta	long
]	O
++	O
;	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"D: %llu 1\n"	pointer
,	O
(	O
unsigned	O
long	O
long	O
)	O
delta	long
)	O
;	O
free	function
(	O
tv	pointer
)	O
;	O
}	O
static	O
void	O
*	O
uri_logger_cb	function
(	O
void	O
*	O
cls	pointer
,	O
const	O
char	O
*	O
uri	pointer
)	O
{	O
struct	O
timeval	struct
*	O
tv	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
timeval	struct
)	O
)	O
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
uri	pointer
;	O
if	O
(	O
NULL	O
!=	O
tv	pointer
)	O
gettimeofday	function
(	O
tv	pointer
,	O
NULL	O
)	O
;	O
return	O
tv	pointer
;	O
}	O
static	O
int	O
ahc_echo	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	long
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
url	pointer
;	O
(	O
void	O
)	O
version	pointer
;	O
(	O
void	O
)	O
upload_data	pointer
;	O
(	O
void	O
)	O
upload_data_size	pointer
;	O
(	O
void	O
)	O
ptr	pointer
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
method	pointer
,	O
"GET"	pointer
)	O
)	O
return	O
MHD_NO	int
;	O
return	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_OK	int
,	O
response	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	pointer
;	O
unsigned	O
int	O
i	int
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	function
(	O
"%s PORT\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
PAGE	pointer
)	O
,	O
(	O
void	O
*	O
)	O
PAGE	pointer
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
d	pointer
=	O
MHD_start_daemon	function
(	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_SUPPRESS_DATE_NO_CLOCK	int
|	O
MHD_USE_EPOLL	int
|	O
MHD_USE_TURBO	int
,	O
atoi	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	function
,	O
NULL	O
,	O
MHD_OPTION_CONNECTION_TIMEOUT	int
,	O
(	O
unsigned	O
int	O
)	O
120	int
,	O
MHD_OPTION_THREAD_POOL_SIZE	int
,	O
(	O
unsigned	O
int	O
)	O
NUMBER_OF_THREADS	O
,	O
MHD_OPTION_URI_LOG_CALLBACK	int
,	O
&	O
uri_logger_cb	function
,	O
NULL	O
,	O
MHD_OPTION_NOTIFY_COMPLETED	int
,	O
&	O
completed_callback	function
,	O
NULL	O
,	O
MHD_OPTION_CONNECTION_LIMIT	int
,	O
(	O
unsigned	O
int	O
)	O
1000	int
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
d	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getc	function
(	O
stdin	pointer
)	O
;	O
MHD_stop_daemon	function
(	O
d	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SMALL	O
;	O
i	int
++	O
)	O
if	O
(	O
0	int
!=	O
small_deltas	array
[	O
i	int
]	O
)	O
fprintf	function
(	O
stdout	pointer
,	O
"D: %d %u\n"	pointer
,	O
i	int
,	O
small_deltas	array
[	O
i	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
