static	O
const	O
char	O
*	O
const	O
db_output_strings	array
[	O
3	int
]	O
=	O
{	O
DB_PREAMBLE	pointer
,	O
DB_HEADER	pointer
,	O
DB_FOOTER	pointer
}	O
;	O
static	O
const	O
char	O
*	O
const	O
c_output_strings	array
[	O
3	int
]	O
=	O
{	O
C_PREAMBLE	pointer
,	O
C_HEADER	pointer
,	O
C_FOOTER	pointer
}	O
;	O
static	O
int	O
set_boards	function
(	O
char	O
board	pointer
[	O
MAX_BOARD	int
+	O
2	int
]	O
[	O
MAX_BOARD	int
+	O
2	int
]	O
,	O
Intersection	char
board1d	array
[	O
BOARDSIZE	O
]	O
,	O
char	O
*	O
stones	pointer
,	O
char	O
color	int
,	O
int	O
boardsize	int
)	O
{	O
int	O
i	int
=	O
stones	pointer
[	O
1	int
]	O
-	O
'a'	O
+	O
1	int
;	O
int	O
j	int
=	O
stones	pointer
[	O
0	int
]	O
-	O
'a'	O
+	O
1	int
;	O
if	O
(	O
stones	pointer
[	O
0	int
]	O
!=	O
't'	O
)	O
{	O
assert	O
(	O
i	int
>	O
0	int
&&	O
i	int
<	O
boardsize	int
+	O
2	int
)	O
;	O
board	pointer
[	O
i	int
]	O
[	O
j	int
]	O
=	O
color	int
;	O
if	O
(	O
color	int
==	O
'O'	O
)	O
board1d	array
[	O
POS	O
(	O
i	int
-	O
1	int
,	O
j	int
-	O
1	int
)	O
]	O
=	O
WHITE	int
;	O
else	O
if	O
(	O
color	int
==	O
'X'	O
)	O
board1d	array
[	O
POS	O
(	O
i	int
-	O
1	int
,	O
j	int
-	O
1	int
)	O
]	O
=	O
BLACK	int
;	O
return	O
POS	O
(	O
i	int
-	O
1	int
,	O
j	int
-	O
1	int
)	O
;	O
}	O
else	O
return	O
NO_MOVE	O
;	O
}	O
static	O
void	O
write_pattern	function
(	O
char	O
*	O
name	short
,	O
char	O
board	pointer
[	O
MAX_BOARD	int
+	O
2	int
]	O
[	O
MAX_BOARD	int
+	O
2	int
]	O
,	O
int	O
value	pointer
,	O
int	O
boardsize	int
)	O
{	O
int	O
i	int
,	O
j	int
;	O
printf	function
(	O
"Pattern %s\n\n"	pointer
,	O
name	short
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
boardsize	int
+	O
1	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
boardsize	int
+	O
1	int
;	O
j	int
++	O
)	O
printf	function
(	O
"%c"	pointer
,	O
board	pointer
[	O
i	int
]	O
[	O
j	int
]	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
printf	function
(	O
"\n:8,-,value(%d)\n\n\n"	pointer
,	O
value	pointer
)	O
;	O
}	O
static	O
void	O
write_pattern_c_code	function
(	O
char	O
*	O
name	short
,	O
Intersection	char
board1d	array
[	O
BOARDSIZE	O
]	O
,	O
int	O
move_pos	int
,	O
int	O
value	pointer
,	O
int	O
boardsize	int
,	O
int	O
patlen	int
)	O
{	O
int	O
k	int
;	O
Hash_data	struct
pattern_hash	struct
;	O
hashdata_recalc	function
(	O
&	O
pattern_hash	struct
,	O
board1d	array
,	O
NO_MOVE	O
)	O
;	O
printf	function
(	O
"  {{{"	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
NUM_HASHVALUES	O
;	O
k	int
++	O
)	O
{	O
printf	function
(	O
"0x%lx"	pointer
,	O
pattern_hash	struct
.	O
hashval	array
[	O
k	int
]	O
)	O
;	O
if	O
(	O
k	int
<	O
NUM_HASHVALUES	O
-	O
1	int
)	O
printf	function
(	O
","	pointer
)	O
;	O
}	O
if	O
(	O
name	short
)	O
printf	function
(	O
"}},%d,\"%s\",%d,%d},\n"	pointer
,	O
patlen	int
,	O
name	short
,	O
OFFSET	O
(	O
I	O
(	O
move_pos	int
)	O
-	O
(	O
boardsize	int
-	O
1	int
)	O
/	O
2	int
,	O
J	O
(	O
move_pos	int
)	O
-	O
(	O
boardsize	int
-	O
1	int
)	O
/	O
2	int
)	O
,	O
value	pointer
)	O
;	O
else	O
printf	function
(	O
"}},-1,NULL,0,0},\n"	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
const	O
char	O
*	O
filename	pointer
;	O
FILE	struct
*	O
input_FILE	pointer
;	O
const	O
char	O
*	O
const	O
*	O
output_strings	pointer
;	O
int	O
mode	int
;	O
int	O
move_pos	int
;	O
char	O
line	int
[	O
BUFSIZE	int
]	O
;	O
char	O
name	short
[	O
BUFSIZE	int
]	O
;	O
char	O
stones	pointer
[	O
BUFSIZE	int
]	O
;	O
int	O
value	pointer
;	O
char	O
board	pointer
[	O
MAX_BOARD	int
+	O
2	int
]	O
[	O
MAX_BOARD	int
+	O
2	int
]	O
;	O
Intersection	char
board1d	array
[	O
BOARDSIZE	O
]	O
;	O
int	O
boardsize	int
;	O
int	O
i	int
,	O
j	int
,	O
k	int
;	O
int	O
pos	int
;	O
char	O
color	int
;	O
if	O
(	O
argc	int
!=	O
4	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
USAGE	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
boardsize	int
=	O
atoi	function
(	O
argv	array
[	O
1	int
]	O
)	O
;	O
filename	pointer
=	O
argv	array
[	O
2	int
]	O
;	O
if	O
(	O
strncmp	function
(	O
argv	array
[	O
3	int
]	O
,	O
"c"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
mode	int
=	O
C_OUTPUT	int
;	O
output_strings	pointer
=	O
c_output_strings	array
;	O
set_random_seed	function
(	O
HASH_RANDOM_SEED	int
)	O
;	O
hash_init	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	array
[	O
3	int
]	O
,	O
"db"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
{	O
mode	int
=	O
DB_OUTPUT	int
;	O
output_strings	pointer
=	O
db_output_strings	array
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
USAGE	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
assert	O
(	O
boardsize	int
>	O
0	int
)	O
;	O
if	O
(	O
boardsize	int
>	O
MAX_BOARD	int
)	O
{	O
printf	function
(	O
output_strings	pointer
[	O
PREAMBLE	int
]	O
)	O
;	O
printf	function
(	O
output_strings	pointer
[	O
HEADER	int
]	O
,	O
boardsize	int
)	O
;	O
printf	function
(	O
output_strings	pointer
[	O
FOOTER	int
]	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
input_FILE	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
input_FILE	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uncompress_fuseki: Cannot open file %s\n"	pointer
,	O
filename	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
board	pointer
[	O
0	int
]	O
[	O
0	int
]	O
=	O
'+'	O
;	O
board	pointer
[	O
0	int
]	O
[	O
boardsize	int
+	O
1	int
]	O
=	O
'+'	O
;	O
board	pointer
[	O
boardsize	int
+	O
1	int
]	O
[	O
0	int
]	O
=	O
'+'	O
;	O
board	pointer
[	O
boardsize	int
+	O
1	int
]	O
[	O
boardsize	int
+	O
1	int
]	O
=	O
'+'	O
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<=	O
boardsize	int
;	O
k	int
++	O
)	O
{	O
board	pointer
[	O
0	int
]	O
[	O
k	int
]	O
=	O
'-'	O
;	O
board	pointer
[	O
boardsize	int
+	O
1	int
]	O
[	O
k	int
]	O
=	O
'-'	O
;	O
board	pointer
[	O
k	int
]	O
[	O
0	int
]	O
=	O
'|'	O
;	O
board	pointer
[	O
k	int
]	O
[	O
boardsize	int
+	O
1	int
]	O
=	O
'|'	O
;	O
}	O
printf	function
(	O
output_strings	pointer
[	O
PREAMBLE	int
]	O
)	O
;	O
printf	function
(	O
output_strings	pointer
[	O
HEADER	int
]	O
,	O
boardsize	int
)	O
;	O
while	O
(	O
fgets	function
(	O
line	int
,	O
BUFSIZE	int
,	O
input_FILE	pointer
)	O
)	O
{	O
int	O
num_stones	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
boardsize	int
;	O
i	int
++	O
)	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<=	O
boardsize	int
;	O
j	int
++	O
)	O
board	pointer
[	O
i	int
]	O
[	O
j	int
]	O
=	O
'.'	O
;	O
for	O
(	O
pos	int
=	O
0	int
;	O
pos	int
<	O
BOARDSIZE	O
;	O
pos	int
++	O
)	O
if	O
(	O
I	O
(	O
pos	int
)	O
>=	O
0	int
&&	O
I	O
(	O
pos	int
)	O
<	O
boardsize	int
&&	O
J	O
(	O
pos	int
)	O
>=	O
0	int
&&	O
J	O
(	O
pos	int
)	O
<	O
boardsize	int
)	O
board1d	array
[	O
pos	int
]	O
=	O
EMPTY	int
;	O
else	O
board1d	array
[	O
pos	int
]	O
=	O
GRAY	int
;	O
if	O
(	O
sscanf	function
(	O
line	int
,	O
"%s %d %s"	pointer
,	O
name	short
,	O
&	O
value	pointer
,	O
stones	pointer
)	O
!=	O
3	int
)	O
continue	O
;	O
move_pos	int
=	O
set_boards	function
(	O
board	pointer
,	O
board1d	array
,	O
stones	pointer
,	O
'*'	O
,	O
boardsize	int
)	O
;	O
color	int
=	O
'X'	O
;	O
for	O
(	O
k	int
=	O
2	int
;	O
k	int
<	O
(	O
int	O
)	O
strlen	function
(	O
stones	pointer
)	O
;	O
k	int
+=	O
2	int
)	O
{	O
pos	int
=	O
set_boards	function
(	O
board	pointer
,	O
board1d	array
,	O
stones	pointer
+	O
k	int
,	O
color	int
,	O
boardsize	int
)	O
;	O
if	O
(	O
I	O
(	O
pos	int
)	O
>=	O
0	int
&&	O
I	O
(	O
pos	int
)	O
<	O
boardsize	int
&&	O
J	O
(	O
pos	int
)	O
>=	O
0	int
&&	O
J	O
(	O
pos	int
)	O
<	O
boardsize	int
)	O
num_stones	int
++	O
;	O
if	O
(	O
color	int
==	O
'X'	O
)	O
color	int
=	O
'O'	O
;	O
else	O
color	int
=	O
'X'	O
;	O
}	O
if	O
(	O
mode	int
==	O
DB_OUTPUT	int
)	O
write_pattern	function
(	O
name	short
,	O
board	pointer
,	O
value	pointer
,	O
boardsize	int
)	O
;	O
else	O
write_pattern_c_code	function
(	O
name	short
,	O
board1d	array
,	O
move_pos	int
,	O
value	pointer
,	O
boardsize	int
,	O
num_stones	int
)	O
;	O
}	O
if	O
(	O
mode	int
==	O
C_OUTPUT	int
)	O
write_pattern_c_code	function
(	O
NULL	O
,	O
board1d	array
,	O
NO_MOVE	O
,	O
0	int
,	O
boardsize	int
,	O
-	O
1	int
)	O
;	O
printf	function
(	O
output_strings	pointer
[	O
FOOTER	int
]	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
