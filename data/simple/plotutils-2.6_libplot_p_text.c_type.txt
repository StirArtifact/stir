double	O
_pl_p_paint_text_string	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
char	O
*	O
s	pointer
,	O
int	O
h_just	int
,	O
int	O
v_just	int
)	O
{	O
int	O
i	int
,	O
master_font_index	int
;	O
double	O
width	array
;	O
unsigned	O
char	O
*	O
ptr	pointer
;	O
double	O
theta	double
,	O
costheta	double
,	O
sintheta	double
;	O
double	O
norm	double
;	O
double	O
crockshift_x	double
,	O
crockshift_y	double
;	O
double	O
dx0	int
,	O
dy0	int
,	O
dx1	int
,	O
dy1	int
,	O
dx2	int
,	O
dy2	int
,	O
dx3	int
,	O
dy3	int
;	O
double	O
font_ascent	double
,	O
font_descent	double
,	O
up	double
,	O
down	double
;	O
double	O
user_font_size	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
double	O
device_font_size	double
;	O
double	O
user_text_transformation_matrix	array
[	O
6	int
]	O
;	O
double	O
text_transformation_matrix	array
[	O
6	int
]	O
;	O
bool	enum
pcl_font	enum
;	O
if	O
(	O
v_just	int
!=	O
PL_JUST_BASE	int
)	O
return	O
0.0	int
;	O
if	O
(	O
h_just	int
!=	O
PL_JUST_LEFT	int
)	O
return	O
0.0	int
;	O
if	O
(	O
*	O
s	pointer
==	O
(	O
unsigned	O
char	O
)	O
'\0'	O
)	O
return	O
0.0	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
!=	O
PL_F_POSTSCRIPT	int
)	O
return	O
0.0	int
;	O
pcl_font	enum
=	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_PCL	int
?	O
true	int
:	O
false	int
)	O
;	O
if	O
(	O
pcl_font	enum
)	O
master_font_index	int
=	O
(	O
_pl_g_pcl_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
else	O
master_font_index	int
=	O
(	O
_pl_g_ps_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
theta	double
=	O
M_PI	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
/	O
180.0	int
;	O
sintheta	double
=	O
sin	function
(	O
theta	double
)	O
;	O
costheta	double
=	O
cos	function
(	O
theta	double
)	O
;	O
if	O
(	O
pcl_font	enum
)	O
{	O
font_ascent	double
=	O
(	O
double	O
)	O
(	O
(	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
)	O
.	O
font_ascent	double
)	O
;	O
font_descent	double
=	O
(	O
double	O
)	O
(	O
(	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
)	O
.	O
font_descent	double
)	O
;	O
}	O
else	O
{	O
font_ascent	double
=	O
(	O
double	O
)	O
(	O
(	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
)	O
.	O
font_ascent	double
)	O
;	O
font_descent	double
=	O
(	O
double	O
)	O
(	O
(	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
)	O
.	O
font_descent	double
)	O
;	O
}	O
up	double
=	O
user_font_size	double
*	O
font_ascent	double
/	O
1000.0	int
;	O
down	double
=	O
user_font_size	double
*	O
font_descent	double
/	O
1000.0	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
-=	O
(	O
user_font_size	double
-	O
down	double
)	O
*	O
sintheta	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
+=	O
(	O
user_font_size	double
-	O
down	double
)	O
*	O
costheta	double
;	O
{	O
double	O
ctm_norm	double
=	O
_matrix_norm	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
)	O
;	O
crockshift_x	double
=	O
sintheta	double
/	O
ctm_norm	double
;	O
crockshift_y	double
=	O
costheta	double
/	O
ctm_norm	double
;	O
}	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
+=	O
crockshift_x	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
-=	O
crockshift_y	double
;	O
user_text_transformation_matrix	array
[	O
0	int
]	O
=	O
costheta	double
;	O
user_text_transformation_matrix	array
[	O
1	int
]	O
=	O
sintheta	double
;	O
user_text_transformation_matrix	array
[	O
2	int
]	O
=	O
-	O
sintheta	double
;	O
user_text_transformation_matrix	array
[	O
3	int
]	O
=	O
costheta	double
;	O
user_text_transformation_matrix	array
[	O
4	int
]	O
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
;	O
user_text_transformation_matrix	array
[	O
5	int
]	O
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
+=	O
(	O
user_font_size	double
-	O
down	double
)	O
*	O
sintheta	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
-=	O
(	O
user_font_size	double
-	O
down	double
)	O
*	O
costheta	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
-=	O
crockshift_x	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
+=	O
crockshift_y	double
;	O
_matrix_product	function
(	O
user_text_transformation_matrix	array
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
,	O
text_transformation_matrix	array
)	O
;	O
norm	double
=	O
_matrix_norm	function
(	O
text_transformation_matrix	array
)	O
;	O
if	O
(	O
norm	double
==	O
0.0	int
)	O
return	O
0.0	int
;	O
device_font_size	double
=	O
norm	double
*	O
user_font_size	double
;	O
{	O
char	O
charbuf	array
[	O
64	int
]	O
;	O
double	O
emitted_device_font_size	double
;	O
sprintf	function
(	O
charbuf	array
,	O
"%f"	pointer
,	O
device_font_size	double
)	O
;	O
sscanf	function
(	O
charbuf	array
,	O
"%lf"	pointer
,	O
&	O
emitted_device_font_size	double
)	O
;	O
if	O
(	O
emitted_device_font_size	double
==	O
0.0	int
)	O
return	O
0.0	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
text_transformation_matrix	array
[	O
i	int
]	O
/=	O
norm	double
;	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"Begin %I Text\n"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_pl_p_set_pen_color	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"%%I cfg %s\n%g %g %g SetCFg\n"	pointer
,	O
_pl_p_idraw_stdcolornames	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_idraw_fgcolor	int
]	O
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fgcolor_red	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fgcolor_green	double
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
ps_fgcolor_blue	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
if	O
(	O
pcl_font	enum
)	O
{	O
const	O
char	O
*	O
ps_name	pointer
;	O
if	O
(	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
substitute_ps_name	pointer
)	O
ps_name	pointer
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
substitute_ps_name	pointer
;	O
else	O
ps_name	pointer
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
ps_name	pointer
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"%%I f -*-%s-*-%d-*-*-*-*-*-*-*\n"	pointer
,	O
(	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
)	O
.	O
x_name	pointer
,	O
IROUND	O
(	O
device_font_size	double
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"/%s %f SetF\n"	pointer
,	O
ps_name	pointer
,	O
device_font_size	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"%%I f -*-%s-*-%d-*-*-*-*-*-*-*\n"	pointer
,	O
(	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
)	O
.	O
x_name	pointer
,	O
IROUND	O
(	O
device_font_size	double
)	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"/%s %f SetF\n"	pointer
,	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
ps_name	pointer
,	O
device_font_size	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"%I t\n[ "	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"%.7g "	pointer
,	O
text_transformation_matrix	array
[	O
i	int
]	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
width	array
=	O
_plotter	pointer
->	O
get_text_width	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
)	O
;	O
dx0	int
=	O
-	O
sintheta	double
*	O
(	O
-	O
down	double
)	O
;	O
dy0	int
=	O
costheta	double
*	O
(	O
-	O
down	double
)	O
;	O
dx1	int
=	O
-	O
sintheta	double
*	O
up	double
;	O
dy1	int
=	O
costheta	double
*	O
up	double
;	O
dx2	int
=	O
costheta	double
*	O
width	array
-	O
sintheta	double
*	O
(	O
-	O
down	double
)	O
;	O
dy2	int
=	O
sintheta	double
*	O
width	array
+	O
costheta	double
*	O
(	O
-	O
down	double
)	O
;	O
dx3	int
=	O
costheta	double
*	O
width	array
-	O
sintheta	double
*	O
up	double
;	O
dy3	int
=	O
sintheta	double
*	O
width	array
+	O
costheta	double
*	O
up	double
;	O
_update_bbox	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
XD	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+	O
dx0	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+	O
dy0	int
)	O
,	O
YD	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+	O
dx0	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+	O
dy0	int
)	O
)	O
;	O
_update_bbox	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
XD	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+	O
dx1	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+	O
dy1	int
)	O
,	O
YD	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+	O
dx1	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+	O
dy1	int
)	O
)	O
;	O
_update_bbox	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
XD	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+	O
dx2	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+	O
dy2	int
)	O
,	O
YD	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+	O
dx2	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+	O
dy2	int
)	O
)	O
;	O
_update_bbox	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
,	O
XD	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+	O
dx3	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+	O
dy3	int
)	O
,	O
YD	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+	O
dx3	int
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+	O
dy3	int
)	O
)	O
;	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
" ] concat\n%I\n[\n("	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
ptr	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
;	O
while	O
(	O
*	O
s	pointer
)	O
{	O
switch	O
(	O
*	O
s	pointer
)	O
{	O
case	O
'('	O
:	O
case	O
')'	O
:	O
case	O
'\\'	O
:	O
*	O
ptr	pointer
++	O
=	O
(	O
unsigned	O
char	O
)	O
'\\'	O
;	O
*	O
ptr	pointer
++	O
=	O
*	O
s	pointer
++	O
;	O
break	O
;	O
default	O
:	O
if	O
GOOD_PRINTABLE_ASCII	O
(	O
*	O
s	pointer
)	O
*	O
ptr	pointer
++	O
=	O
*	O
s	pointer
++	O
;	O
else	O
{	O
sprintf	function
(	O
(	O
char	O
*	O
)	O
ptr	pointer
,	O
"\\%03o"	pointer
,	O
(	O
unsigned	O
int	O
)	O
*	O
s	pointer
)	O
;	O
ptr	pointer
+=	O
4	int
;	O
s	pointer
++	O
;	O
}	O
break	O
;	O
}	O
}	O
*	O
ptr	pointer
=	O
(	O
unsigned	O
char	O
)	O
'\0'	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
")\n] Text\nEnd\n\n"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
ps_font_used	array
[	O
master_font_index	int
]	O
=	O
true	int
;	O
return	O
width	array
;	O
}	O
