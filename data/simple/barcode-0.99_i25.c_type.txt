static	O
char	O
*	O
codes	array
[	O
]	O
=	O
{	O
"11331"	pointer
,	O
"31113"	pointer
,	O
"13113"	pointer
,	O
"33111"	pointer
,	O
"11313"	pointer
,	O
"31311"	pointer
,	O
"13311"	pointer
,	O
"11133"	pointer
,	O
"31131"	pointer
,	O
"13131"	pointer
}	O
;	O
static	O
char	O
*	O
guard	array
[	O
]	O
=	O
{	O
"a1a1"	pointer
,	O
"c1a"	pointer
}	O
;	O
int	O
Barcode_i25_verify	function
(	O
unsigned	O
char	O
*	O
text	pointer
)	O
{	O
if	O
(	O
!	O
text	pointer
[	O
0	int
]	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
*	O
text	pointer
&&	O
isdigit	function
(	O
*	O
text	pointer
)	O
)	O
text	pointer
++	O
;	O
if	O
(	O
*	O
text	pointer
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_i25_encode	function
(	O
struct	O
Barcode_Item	struct
*	O
bc	pointer
)	O
{	O
char	O
*	O
text	pointer
;	O
char	O
*	O
partial	pointer
;	O
char	O
*	O
textinfo	pointer
;	O
char	O
*	O
textptr	pointer
,	O
*	O
p1	pointer
,	O
*	O
p2	pointer
,	O
*	O
pd	pointer
;	O
int	O
i	int
,	O
len	int
,	O
sum	array
[	O
2	int
]	O
,	O
textpos	int
,	O
usesum	int
=	O
0	int
;	O
if	O
(	O
bc	pointer
->	O
partial	pointer
)	O
free	function
(	O
bc	pointer
->	O
partial	pointer
)	O
;	O
if	O
(	O
bc	pointer
->	O
textinfo	pointer
)	O
free	function
(	O
bc	pointer
->	O
textinfo	pointer
)	O
;	O
bc	pointer
->	O
partial	pointer
=	O
bc	pointer
->	O
textinfo	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
bc	pointer
->	O
encoding	pointer
)	O
bc	pointer
->	O
encoding	pointer
=	O
strdup	function
(	O
"interleaved 2 of 5"	pointer
)	O
;	O
text	pointer
=	O
bc	pointer
->	O
ascii	pointer
;	O
if	O
(	O
!	O
bc	pointer
->	O
ascii	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
bc	pointer
->	O
flags	int
&	O
BARCODE_NO_CHECKSUM	int
)	O
)	O
usesum	int
=	O
0	int
;	O
else	O
usesum	int
=	O
1	int
;	O
text	pointer
=	O
malloc	function
(	O
strlen	function
(	O
bc	pointer
->	O
ascii	pointer
)	O
+	O
3	int
)	O
;	O
if	O
(	O
!	O
text	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
i	int
=	O
strlen	function
(	O
bc	pointer
->	O
ascii	pointer
)	O
+	O
usesum	int
;	O
if	O
(	O
i	int
%	O
2	int
)	O
{	O
text	pointer
[	O
0	int
]	O
=	O
'0'	O
;	O
strcpy	function
(	O
text	pointer
+	O
1	int
,	O
bc	pointer
->	O
ascii	pointer
)	O
;	O
}	O
else	O
{	O
strcpy	function
(	O
text	pointer
,	O
bc	pointer
->	O
ascii	pointer
)	O
;	O
}	O
if	O
(	O
usesum	int
)	O
{	O
sum	array
[	O
0	int
]	O
=	O
sum	array
[	O
1	int
]	O
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
sum	array
[	O
i	int
%	O
2	int
]	O
+=	O
text	pointer
[	O
i	int
]	O
-	O
'0'	O
;	O
i	int
=	O
sum	array
[	O
0	int
]	O
*	O
3	int
+	O
sum	array
[	O
1	int
]	O
;	O
strcat	function
(	O
text	pointer
,	O
"0"	pointer
)	O
;	O
text	pointer
[	O
strlen	function
(	O
text	pointer
)	O
-	O
1	int
]	O
+=	O
(	O
10	int
-	O
(	O
i	int
%	O
10	int
)	O
)	O
%	O
10	int
;	O
}	O
partial	pointer
=	O
malloc	function
(	O
(	O
strlen	function
(	O
text	pointer
)	O
+	O
3	int
)	O
*	O
5	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
partial	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
free	function
(	O
text	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
textinfo	pointer
=	O
malloc	function
(	O
10	int
*	O
(	O
strlen	function
(	O
text	pointer
)	O
+	O
1	int
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	pointer
)	O
{	O
bc	pointer
->	O
error	int
=	O
errno	O
;	O
free	function
(	O
partial	pointer
)	O
;	O
free	function
(	O
text	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	function
(	O
partial	pointer
,	O
"0"	pointer
)	O
;	O
strcat	function
(	O
partial	pointer
,	O
guard	array
[	O
0	int
]	O
)	O
;	O
textpos	int
=	O
4	int
;	O
textptr	pointer
=	O
textinfo	pointer
;	O
len	int
=	O
strlen	function
(	O
text	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
+=	O
2	int
)	O
{	O
if	O
(	O
!	O
isdigit	function
(	O
text	pointer
[	O
i	int
]	O
)	O
||	O
!	O
isdigit	function
(	O
text	pointer
[	O
i	int
+	O
1	int
]	O
)	O
)	O
{	O
bc	pointer
->	O
error	int
=	O
EINVAL	int
;	O
free	function
(	O
partial	pointer
)	O
;	O
free	function
(	O
textinfo	pointer
)	O
;	O
free	function
(	O
text	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
p1	pointer
=	O
codes	array
[	O
text	pointer
[	O
i	int
]	O
-	O
'0'	O
]	O
;	O
p2	pointer
=	O
codes	array
[	O
text	pointer
[	O
i	int
+	O
1	int
]	O
-	O
'0'	O
]	O
;	O
pd	pointer
=	O
partial	pointer
+	O
strlen	function
(	O
partial	pointer
)	O
;	O
while	O
(	O
*	O
p1	pointer
)	O
{	O
*	O
(	O
pd	pointer
++	O
)	O
=	O
*	O
(	O
p1	pointer
++	O
)	O
;	O
*	O
(	O
pd	pointer
++	O
)	O
=	O
*	O
(	O
p2	pointer
++	O
)	O
;	O
}	O
*	O
pd	pointer
=	O
'\0'	O
;	O
if	O
(	O
usesum	int
&&	O
strlen	function
(	O
text	pointer
+	O
i	int
)	O
==	O
2	int
)	O
{	O
sprintf	function
(	O
textptr	pointer
,	O
"%i:12:%c "	pointer
,	O
textpos	int
,	O
text	pointer
[	O
i	int
]	O
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
textptr	pointer
,	O
"%i:12:%c %i:12:%c "	pointer
,	O
textpos	int
,	O
text	pointer
[	O
i	int
]	O
,	O
textpos	int
+	O
9	int
,	O
text	pointer
[	O
i	int
+	O
1	int
]	O
)	O
;	O
}	O
textpos	int
+=	O
18	int
;	O
textptr	pointer
+=	O
strlen	function
(	O
textptr	pointer
)	O
;	O
}	O
strcat	function
(	O
partial	pointer
,	O
guard	array
[	O
1	int
]	O
)	O
;	O
bc	pointer
->	O
partial	pointer
=	O
partial	pointer
;	O
bc	pointer
->	O
textinfo	pointer
=	O
textinfo	pointer
;	O
free	function
(	O
text	pointer
)	O
;	O
return	O
0	int
;	O
}	O
