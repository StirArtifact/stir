static	O
const	O
asymbol	struct
global_syms	array
[	O
]	O
=	O
{	O
GLOBAL_SYM_INIT	O
(	O
BFD_COM_SECTION_NAME	pointer
,	O
bfd_com_section_ptr	O
)	O
,	O
GLOBAL_SYM_INIT	O
(	O
BFD_UND_SECTION_NAME	pointer
,	O
bfd_und_section_ptr	O
)	O
,	O
GLOBAL_SYM_INIT	O
(	O
BFD_ABS_SECTION_NAME	pointer
,	O
bfd_abs_section_ptr	O
)	O
,	O
GLOBAL_SYM_INIT	O
(	O
BFD_IND_SECTION_NAME	pointer
,	O
bfd_ind_section_ptr	O
)	O
}	O
;	O
asection	struct
_bfd_std_section	array
[	O
]	O
=	O
{	O
STD_SECTION	O
(	O
BFD_COM_SECTION_NAME	pointer
,	O
0	int
,	O
SEC_IS_COMMON	int
)	O
,	O
STD_SECTION	O
(	O
BFD_UND_SECTION_NAME	pointer
,	O
1	int
,	O
0	int
)	O
,	O
STD_SECTION	O
(	O
BFD_ABS_SECTION_NAME	pointer
,	O
2	int
,	O
0	int
)	O
,	O
STD_SECTION	O
(	O
BFD_IND_SECTION_NAME	pointer
,	O
3	int
,	O
0	int
)	O
}	O
;	O
struct	O
bfd_hash_entry	struct
*	O
bfd_section_hash_newfunc	function
(	O
struct	O
bfd_hash_entry	struct
*	O
entry	pointer
,	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
)	O
{	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
{	O
entry	pointer
=	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
bfd_hash_allocate	function
(	O
table	pointer
,	O
sizeof	O
(	O
struct	O
section_hash_entry	struct
)	O
)	O
;	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
return	O
entry	pointer
;	O
}	O
entry	pointer
=	O
bfd_hash_newfunc	function
(	O
entry	pointer
,	O
table	pointer
,	O
string	pointer
)	O
;	O
if	O
(	O
entry	pointer
!=	O
NULL	O
)	O
memset	function
(	O
&	O
(	O
(	O
struct	O
section_hash_entry	struct
*	O
)	O
entry	pointer
)	O
->	O
section	pointer
,	O
0	int
,	O
sizeof	O
(	O
asection	struct
)	O
)	O
;	O
return	O
entry	pointer
;	O
}	O
bfd_boolean	int
_bfd_generic_new_section_hook	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
newsect	pointer
)	O
{	O
newsect	pointer
->	O
symbol	pointer
=	O
bfd_make_empty_symbol	O
(	O
abfd	pointer
)	O
;	O
if	O
(	O
newsect	pointer
->	O
symbol	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
newsect	pointer
->	O
symbol	pointer
->	O
name	pointer
=	O
newsect	pointer
->	O
name	pointer
;	O
newsect	pointer
->	O
symbol	pointer
->	O
value	long
=	O
0	int
;	O
newsect	pointer
->	O
symbol	pointer
->	O
section	pointer
=	O
newsect	pointer
;	O
newsect	pointer
->	O
symbol	pointer
->	O
flags	int
=	O
BSF_SECTION_SYM	O
;	O
newsect	pointer
->	O
symbol_ptr_ptr	pointer
=	O
&	O
newsect	pointer
->	O
symbol	pointer
;	O
return	O
TRUE	int
;	O
}	O
unsigned	O
int	O
_bfd_section_id	int
=	O
0x10	int
;	O
static	O
asection	struct
*	O
bfd_section_init	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
newsect	pointer
)	O
{	O
newsect	pointer
->	O
id	int
=	O
_bfd_section_id	int
;	O
newsect	pointer
->	O
index	function
=	O
abfd	pointer
->	O
section_count	int
;	O
newsect	pointer
->	O
owner	pointer
=	O
abfd	pointer
;	O
if	O
(	O
!	O
BFD_SEND	O
(	O
abfd	pointer
,	O
_new_section_hook	pointer
,	O
(	O
abfd	pointer
,	O
newsect	pointer
)	O
)	O
)	O
return	O
NULL	O
;	O
_bfd_section_id	int
++	O
;	O
abfd	pointer
->	O
section_count	int
++	O
;	O
bfd_section_list_append	function
(	O
abfd	pointer
,	O
newsect	pointer
)	O
;	O
return	O
newsect	pointer
;	O
}	O
void	O
bfd_section_list_clear	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
abfd	pointer
->	O
sections	pointer
=	O
NULL	O
;	O
abfd	pointer
->	O
section_last	pointer
=	O
NULL	O
;	O
abfd	pointer
->	O
section_count	int
=	O
0	int
;	O
memset	function
(	O
abfd	pointer
->	O
section_htab	struct
.	O
table	pointer
,	O
0	int
,	O
abfd	pointer
->	O
section_htab	struct
.	O
size	long
*	O
sizeof	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
)	O
;	O
abfd	pointer
->	O
section_htab	struct
.	O
count	int
=	O
0	int
;	O
}	O
asection	struct
*	O
bfd_get_section_by_name	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
section_hash_entry	struct
*	O
sh	pointer
;	O
sh	pointer
=	O
section_hash_lookup	O
(	O
&	O
abfd	pointer
->	O
section_htab	struct
,	O
name	pointer
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
sh	pointer
!=	O
NULL	O
)	O
return	O
&	O
sh	pointer
->	O
section	pointer
;	O
return	O
NULL	O
;	O
}	O
asection	struct
*	O
bfd_get_next_section_by_name	function
(	O
bfd	struct
*	O
ibfd	pointer
,	O
asection	struct
*	O
sec	pointer
)	O
{	O
struct	O
section_hash_entry	struct
*	O
sh	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
unsigned	O
long	O
hash	long
;	O
sh	pointer
=	O
(	O
(	O
struct	O
section_hash_entry	struct
*	O
)	O
(	O
(	O
char	O
*	O
)	O
sec	pointer
-	O
offsetof	O
(	O
struct	O
section_hash_entry	struct
,	O
section	pointer
)	O
)	O
)	O
;	O
hash	long
=	O
sh	pointer
->	O
root	struct
.	O
hash	long
;	O
name	pointer
=	O
sec	pointer
->	O
name	pointer
;	O
for	O
(	O
sh	pointer
=	O
(	O
struct	O
section_hash_entry	struct
*	O
)	O
sh	pointer
->	O
root	struct
.	O
next	pointer
;	O
sh	pointer
!=	O
NULL	O
;	O
sh	pointer
=	O
(	O
struct	O
section_hash_entry	struct
*	O
)	O
sh	pointer
->	O
root	struct
.	O
next	pointer
)	O
if	O
(	O
sh	pointer
->	O
root	struct
.	O
hash	long
==	O
hash	long
&&	O
strcmp	function
(	O
sh	pointer
->	O
root	struct
.	O
string	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
&	O
sh	pointer
->	O
section	pointer
;	O
if	O
(	O
ibfd	pointer
!=	O
NULL	O
)	O
{	O
while	O
(	O
(	O
ibfd	pointer
=	O
ibfd	pointer
->	O
link	function
.	O
next	pointer
)	O
!=	O
NULL	O
)	O
{	O
asection	struct
*	O
s	pointer
=	O
bfd_get_section_by_name	function
(	O
ibfd	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
NULL	O
)	O
return	O
s	pointer
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
asection	struct
*	O
bfd_get_linker_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
asection	struct
*	O
sec	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
name	pointer
)	O
;	O
while	O
(	O
sec	pointer
!=	O
NULL	O
&&	O
(	O
sec	pointer
->	O
flags	int
&	O
SEC_LINKER_CREATED	int
)	O
==	O
0	int
)	O
sec	pointer
=	O
bfd_get_next_section_by_name	function
(	O
NULL	O
,	O
sec	pointer
)	O
;	O
return	O
sec	pointer
;	O
}	O
asection	struct
*	O
bfd_get_section_by_name_if	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
bfd_boolean	int
(	O
*	O
operation	pointer
)	O
(	O
bfd	struct
*	O
,	O
asection	struct
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
user_storage	pointer
)	O
{	O
struct	O
section_hash_entry	struct
*	O
sh	pointer
;	O
unsigned	O
long	O
hash	long
;	O
sh	pointer
=	O
section_hash_lookup	O
(	O
&	O
abfd	pointer
->	O
section_htab	struct
,	O
name	pointer
,	O
FALSE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
sh	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
hash	long
=	O
sh	pointer
->	O
root	struct
.	O
hash	long
;	O
for	O
(	O
;	O
sh	pointer
!=	O
NULL	O
;	O
sh	pointer
=	O
(	O
struct	O
section_hash_entry	struct
*	O
)	O
sh	pointer
->	O
root	struct
.	O
next	pointer
)	O
if	O
(	O
sh	pointer
->	O
root	struct
.	O
hash	long
==	O
hash	long
&&	O
strcmp	function
(	O
sh	pointer
->	O
root	struct
.	O
string	pointer
,	O
name	pointer
)	O
==	O
0	int
&&	O
(	O
*	O
operation	pointer
)	O
(	O
abfd	pointer
,	O
&	O
sh	pointer
->	O
section	pointer
,	O
user_storage	pointer
)	O
)	O
return	O
&	O
sh	pointer
->	O
section	pointer
;	O
return	O
NULL	O
;	O
}	O
char	O
*	O
bfd_get_unique_section_name	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
templat	pointer
,	O
int	O
*	O
count	int
)	O
{	O
int	O
num	int
;	O
unsigned	O
int	O
len	long
;	O
char	O
*	O
sname	pointer
;	O
len	long
=	O
strlen	function
(	O
templat	pointer
)	O
;	O
sname	pointer
=	O
(	O
char	O
*	O
)	O
bfd_malloc	function
(	O
len	long
+	O
8	int
)	O
;	O
if	O
(	O
sname	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memcpy	function
(	O
sname	pointer
,	O
templat	pointer
,	O
len	long
)	O
;	O
num	int
=	O
1	int
;	O
if	O
(	O
count	int
!=	O
NULL	O
)	O
num	int
=	O
*	O
count	int
;	O
do	O
{	O
if	O
(	O
num	int
>	O
999999	int
)	O
abort	function
(	O
)	O
;	O
sprintf	function
(	O
sname	pointer
+	O
len	long
,	O
".%d"	pointer
,	O
num	int
++	O
)	O
;	O
}	O
while	O
(	O
section_hash_lookup	O
(	O
&	O
abfd	pointer
->	O
section_htab	struct
,	O
sname	pointer
,	O
FALSE	int
,	O
FALSE	int
)	O
)	O
;	O
if	O
(	O
count	int
!=	O
NULL	O
)	O
*	O
count	int
=	O
num	int
;	O
return	O
sname	pointer
;	O
}	O
asection	struct
*	O
bfd_make_section_old_way	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
asection	struct
*	O
newsect	pointer
;	O
if	O
(	O
abfd	pointer
->	O
output_has_begun	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
BFD_ABS_SECTION_NAME	pointer
)	O
==	O
0	int
)	O
newsect	pointer
=	O
bfd_abs_section_ptr	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
BFD_COM_SECTION_NAME	pointer
)	O
==	O
0	int
)	O
newsect	pointer
=	O
bfd_com_section_ptr	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
BFD_UND_SECTION_NAME	pointer
)	O
==	O
0	int
)	O
newsect	pointer
=	O
bfd_und_section_ptr	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
BFD_IND_SECTION_NAME	pointer
)	O
==	O
0	int
)	O
newsect	pointer
=	O
bfd_ind_section_ptr	O
;	O
else	O
{	O
struct	O
section_hash_entry	struct
*	O
sh	pointer
;	O
sh	pointer
=	O
section_hash_lookup	O
(	O
&	O
abfd	pointer
->	O
section_htab	struct
,	O
name	pointer
,	O
TRUE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
sh	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
newsect	pointer
=	O
&	O
sh	pointer
->	O
section	pointer
;	O
if	O
(	O
newsect	pointer
->	O
name	pointer
!=	O
NULL	O
)	O
{	O
return	O
newsect	pointer
;	O
}	O
newsect	pointer
->	O
name	pointer
=	O
name	pointer
;	O
return	O
bfd_section_init	function
(	O
abfd	pointer
,	O
newsect	pointer
)	O
;	O
}	O
if	O
(	O
!	O
BFD_SEND	O
(	O
abfd	pointer
,	O
_new_section_hook	pointer
,	O
(	O
abfd	pointer
,	O
newsect	pointer
)	O
)	O
)	O
return	O
NULL	O
;	O
return	O
newsect	pointer
;	O
}	O
sec_ptr	pointer
bfd_make_section_anyway_with_flags	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
flagword	int
flags	int
)	O
{	O
struct	O
section_hash_entry	struct
*	O
sh	pointer
;	O
asection	struct
*	O
newsect	pointer
;	O
if	O
(	O
abfd	pointer
->	O
output_has_begun	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
sh	pointer
=	O
section_hash_lookup	O
(	O
&	O
abfd	pointer
->	O
section_htab	struct
,	O
name	pointer
,	O
TRUE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
sh	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
newsect	pointer
=	O
&	O
sh	pointer
->	O
section	pointer
;	O
if	O
(	O
newsect	pointer
->	O
name	pointer
!=	O
NULL	O
)	O
{	O
struct	O
section_hash_entry	struct
*	O
new_sh	pointer
;	O
new_sh	pointer
=	O
(	O
struct	O
section_hash_entry	struct
*	O
)	O
bfd_section_hash_newfunc	function
(	O
NULL	O
,	O
&	O
abfd	pointer
->	O
section_htab	struct
,	O
name	pointer
)	O
;	O
if	O
(	O
new_sh	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
new_sh	pointer
->	O
root	struct
=	O
sh	pointer
->	O
root	struct
;	O
sh	pointer
->	O
root	struct
.	O
next	pointer
=	O
&	O
new_sh	pointer
->	O
root	struct
;	O
newsect	pointer
=	O
&	O
new_sh	pointer
->	O
section	pointer
;	O
}	O
newsect	pointer
->	O
flags	int
=	O
flags	int
;	O
newsect	pointer
->	O
name	pointer
=	O
name	pointer
;	O
return	O
bfd_section_init	function
(	O
abfd	pointer
,	O
newsect	pointer
)	O
;	O
}	O
sec_ptr	pointer
bfd_make_section_anyway	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
bfd_make_section_anyway_with_flags	function
(	O
abfd	pointer
,	O
name	pointer
,	O
0	int
)	O
;	O
}	O
asection	struct
*	O
bfd_make_section_with_flags	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
flagword	int
flags	int
)	O
{	O
struct	O
section_hash_entry	struct
*	O
sh	pointer
;	O
asection	struct
*	O
newsect	pointer
;	O
if	O
(	O
abfd	pointer
==	O
NULL	O
||	O
name	pointer
==	O
NULL	O
||	O
abfd	pointer
->	O
output_has_begun	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
BFD_ABS_SECTION_NAME	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
name	pointer
,	O
BFD_COM_SECTION_NAME	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
name	pointer
,	O
BFD_UND_SECTION_NAME	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
name	pointer
,	O
BFD_IND_SECTION_NAME	pointer
)	O
==	O
0	int
)	O
return	O
NULL	O
;	O
sh	pointer
=	O
section_hash_lookup	O
(	O
&	O
abfd	pointer
->	O
section_htab	struct
,	O
name	pointer
,	O
TRUE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
sh	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
newsect	pointer
=	O
&	O
sh	pointer
->	O
section	pointer
;	O
if	O
(	O
newsect	pointer
->	O
name	pointer
!=	O
NULL	O
)	O
{	O
return	O
NULL	O
;	O
}	O
newsect	pointer
->	O
name	pointer
=	O
name	pointer
;	O
newsect	pointer
->	O
flags	int
=	O
flags	int
;	O
return	O
bfd_section_init	function
(	O
abfd	pointer
,	O
newsect	pointer
)	O
;	O
}	O
asection	struct
*	O
bfd_make_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
bfd_make_section_with_flags	function
(	O
abfd	pointer
,	O
name	pointer
,	O
0	int
)	O
;	O
}	O
bfd_boolean	int
bfd_set_section_flags	function
(	O
asection	struct
*	O
section	pointer
,	O
flagword	int
flags	int
)	O
{	O
section	pointer
->	O
flags	int
=	O
flags	int
;	O
return	O
TRUE	int
;	O
}	O
void	O
bfd_rename_section	function
(	O
asection	struct
*	O
sec	pointer
,	O
const	O
char	O
*	O
newname	pointer
)	O
{	O
struct	O
section_hash_entry	struct
*	O
sh	pointer
;	O
sh	pointer
=	O
(	O
struct	O
section_hash_entry	struct
*	O
)	O
(	O
(	O
char	O
*	O
)	O
sec	pointer
-	O
offsetof	O
(	O
struct	O
section_hash_entry	struct
,	O
section	pointer
)	O
)	O
;	O
sh	pointer
->	O
section	pointer
.	O
name	pointer
=	O
newname	pointer
;	O
bfd_hash_rename	function
(	O
&	O
sec	pointer
->	O
owner	pointer
->	O
section_htab	struct
,	O
newname	pointer
,	O
&	O
sh	pointer
->	O
root	struct
)	O
;	O
}	O
void	O
bfd_map_over_sections	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
(	O
*	O
operation	pointer
)	O
(	O
bfd	struct
*	O
,	O
asection	struct
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
user_storage	pointer
)	O
{	O
asection	struct
*	O
sect	pointer
;	O
unsigned	O
int	O
i	pointer
=	O
0	int
;	O
for	O
(	O
sect	pointer
=	O
abfd	pointer
->	O
sections	pointer
;	O
sect	pointer
!=	O
NULL	O
;	O
i	pointer
++	O
,	O
sect	pointer
=	O
sect	pointer
->	O
next	pointer
)	O
(	O
*	O
operation	pointer
)	O
(	O
abfd	pointer
,	O
sect	pointer
,	O
user_storage	pointer
)	O
;	O
if	O
(	O
i	pointer
!=	O
abfd	pointer
->	O
section_count	int
)	O
abort	function
(	O
)	O
;	O
}	O
asection	struct
*	O
bfd_sections_find_if	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_boolean	int
(	O
*	O
operation	pointer
)	O
(	O
bfd	struct
*	O
,	O
asection	struct
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
user_storage	pointer
)	O
{	O
asection	struct
*	O
sect	pointer
;	O
for	O
(	O
sect	pointer
=	O
abfd	pointer
->	O
sections	pointer
;	O
sect	pointer
!=	O
NULL	O
;	O
sect	pointer
=	O
sect	pointer
->	O
next	pointer
)	O
if	O
(	O
(	O
*	O
operation	pointer
)	O
(	O
abfd	pointer
,	O
sect	pointer
,	O
user_storage	pointer
)	O
)	O
break	O
;	O
return	O
sect	pointer
;	O
}	O
bfd_boolean	int
bfd_set_section_size	function
(	O
asection	struct
*	O
sec	pointer
,	O
bfd_size_type	long
val	array
)	O
{	O
if	O
(	O
sec	pointer
->	O
owner	pointer
==	O
NULL	O
||	O
sec	pointer
->	O
owner	pointer
->	O
output_has_begun	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
sec	pointer
->	O
size	long
=	O
val	array
;	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
bfd_set_section_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
section	pointer
,	O
const	O
void	O
*	O
location	pointer
,	O
file_ptr	long
offset	long
,	O
bfd_size_type	long
count	int
)	O
{	O
bfd_size_type	long
sz	long
;	O
if	O
(	O
!	O
(	O
bfd_section_flags	function
(	O
section	pointer
)	O
&	O
SEC_HAS_CONTENTS	int
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_contents	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
sz	long
=	O
section	pointer
->	O
size	long
;	O
if	O
(	O
(	O
bfd_size_type	long
)	O
offset	long
>	O
sz	long
||	O
count	int
>	O
sz	long
||	O
offset	long
+	O
count	int
>	O
sz	long
||	O
count	int
!=	O
(	O
size_t	long
)	O
count	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
bfd_write_p	O
(	O
abfd	pointer
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
section	pointer
->	O
contents	pointer
&&	O
location	pointer
!=	O
section	pointer
->	O
contents	pointer
+	O
offset	long
)	O
memcpy	function
(	O
section	pointer
->	O
contents	pointer
+	O
offset	long
,	O
location	pointer
,	O
(	O
size_t	long
)	O
count	int
)	O
;	O
if	O
(	O
BFD_SEND	O
(	O
abfd	pointer
,	O
_bfd_set_section_contents	pointer
,	O
(	O
abfd	pointer
,	O
section	pointer
,	O
location	pointer
,	O
offset	long
,	O
count	int
)	O
)	O
)	O
{	O
abfd	pointer
->	O
output_has_begun	int
=	O
TRUE	int
;	O
return	O
TRUE	int
;	O
}	O
return	O
FALSE	int
;	O
}	O
bfd_boolean	int
bfd_get_section_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
section	pointer
,	O
void	O
*	O
location	pointer
,	O
file_ptr	long
offset	long
,	O
bfd_size_type	long
count	int
)	O
{	O
bfd_size_type	long
sz	long
;	O
if	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_CONSTRUCTOR	int
)	O
{	O
memset	function
(	O
location	pointer
,	O
0	int
,	O
(	O
size_t	long
)	O
count	int
)	O
;	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
abfd	pointer
->	O
direction	enum
!=	O
write_direction	int
&&	O
section	pointer
->	O
rawsize	long
!=	O
0	int
)	O
sz	long
=	O
section	pointer
->	O
rawsize	long
;	O
else	O
sz	long
=	O
section	pointer
->	O
size	long
;	O
if	O
(	O
(	O
bfd_size_type	long
)	O
offset	long
>	O
sz	long
||	O
count	int
>	O
sz	long
||	O
offset	long
+	O
count	int
>	O
sz	long
||	O
count	int
!=	O
(	O
size_t	long
)	O
count	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_bad_value	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
count	int
==	O
0	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_HAS_CONTENTS	int
)	O
==	O
0	int
)	O
{	O
memset	function
(	O
location	pointer
,	O
0	int
,	O
(	O
size_t	long
)	O
count	int
)	O
;	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
(	O
section	pointer
->	O
flags	int
&	O
SEC_IN_MEMORY	int
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
section	pointer
->	O
contents	pointer
==	O
NULL	O
)	O
{	O
section	pointer
->	O
flags	int
&=	O
~	O
SEC_IN_MEMORY	int
;	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
memmove	function
(	O
location	pointer
,	O
section	pointer
->	O
contents	pointer
+	O
offset	long
,	O
(	O
size_t	long
)	O
count	int
)	O
;	O
return	O
TRUE	int
;	O
}	O
return	O
BFD_SEND	O
(	O
abfd	pointer
,	O
_bfd_get_section_contents	pointer
,	O
(	O
abfd	pointer
,	O
section	pointer
,	O
location	pointer
,	O
offset	long
,	O
count	int
)	O
)	O
;	O
}	O
bfd_boolean	int
bfd_malloc_and_get_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
sec	pointer
,	O
bfd_byte	char
*	O
*	O
buf	pointer
)	O
{	O
*	O
buf	pointer
=	O
NULL	O
;	O
return	O
bfd_get_full_section_contents	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
buf	pointer
)	O
;	O
}	O
bfd_boolean	int
bfd_generic_is_group_section	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
asection	struct
*	O
sec	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
FALSE	int
;	O
}	O
const	O
char	O
*	O
bfd_generic_group_name	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
asection	struct
*	O
sec	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
NULL	O
;	O
}	O
bfd_boolean	int
bfd_generic_discard_group	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
asection	struct
*	O
group	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
_bfd_nowrite_set_section_contents	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
sec_ptr	pointer
section	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
void	O
*	O
location	pointer
ATTRIBUTE_UNUSED	O
,	O
file_ptr	long
offset	long
ATTRIBUTE_UNUSED	O
,	O
bfd_size_type	long
count	int
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
_bfd_bool_bfd_false_error	function
(	O
abfd	pointer
)	O
;	O
}	O
