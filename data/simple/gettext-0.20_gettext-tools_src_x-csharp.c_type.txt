static	O
bool	bool
extract_all	bool
=	O
false	int
;	O
static	O
hash_table	struct
keywords	struct
;	O
static	O
bool	bool
default_keywords	bool
=	O
true	int
;	O
void	O
x_csharp_extract_all	function
(	O
)	O
{	O
extract_all	bool
=	O
true	int
;	O
}	O
void	O
x_csharp_keyword	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
default_keywords	bool
=	O
false	int
;	O
else	O
{	O
const	O
char	O
*	O
end	pointer
;	O
struct	O
callshape	struct
shape	pointer
;	O
const	O
char	O
*	O
colon	pointer
;	O
if	O
(	O
keywords	struct
.	O
table	pointer
==	O
NULL	O
)	O
hash_init	function
(	O
&	O
keywords	struct
,	O
100	int
)	O
;	O
split_keywordspec	function
(	O
name	pointer
,	O
&	O
end	pointer
,	O
&	O
shape	pointer
)	O
;	O
colon	pointer
=	O
strchr	function
(	O
name	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
colon	pointer
==	O
NULL	O
||	O
colon	pointer
>=	O
end	pointer
)	O
insert_keyword_callshape	function
(	O
&	O
keywords	struct
,	O
name	pointer
,	O
end	pointer
-	O
name	pointer
,	O
&	O
shape	pointer
)	O
;	O
}	O
}	O
static	O
void	O
init_keywords	function
(	O
)	O
{	O
if	O
(	O
default_keywords	bool
)	O
{	O
x_csharp_keyword	function
(	O
"GetString"	pointer
)	O
;	O
x_csharp_keyword	function
(	O
"GetPluralString:1,2"	pointer
)	O
;	O
x_csharp_keyword	function
(	O
"GetParticularString:1c,2"	pointer
)	O
;	O
x_csharp_keyword	function
(	O
"GetParticularPluralString:1c,2,3"	pointer
)	O
;	O
default_keywords	bool
=	O
false	int
;	O
}	O
}	O
void	O
init_flag_table_csharp	function
(	O
)	O
{	O
xgettext_record_flag	function
(	O
"GetString:1:pass-csharp-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"GetPluralString:1:pass-csharp-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"GetPluralString:2:pass-csharp-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"GetParticularString:2:pass-csharp-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"GetParticularPluralString:2:pass-csharp-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"GetParticularPluralString:3:pass-csharp-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"String.Format:1:csharp-format"	pointer
)	O
;	O
}	O
static	O
FILE	struct
*	O
fp	pointer
;	O
static	O
unsigned	O
char	O
phase1_pushback	array
[	O
MAX_PHASE1_PUSHBACK	int
]	O
;	O
static	O
int	O
phase1_pushback_length	int
;	O
static	O
int	O
phase1_getc	function
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase1_pushback_length	int
)	O
{	O
c	int
=	O
phase1_pushback	array
[	O
--	O
phase1_pushback_length	int
]	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
++	O
line_number	long
;	O
return	O
c	int
;	O
}	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	pointer
)	O
,	O
real_file_name	pointer
)	O
;	O
return	O
EOF	O
;	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
++	O
line_number	long
;	O
return	O
c	int
;	O
}	O
static	O
void	O
phase1_ungetc	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
--	O
line_number	long
;	O
if	O
(	O
phase1_pushback_length	int
==	O
SIZEOF	O
(	O
phase1_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase1_pushback	array
[	O
phase1_pushback_length	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
static	O
lexical_context_ty	enum
lexical_context	enum
;	O
static	O
int	O
phase2_pushback	array
[	O
1	int
]	O
;	O
static	O
int	O
phase2_pushback_length	int
;	O
static	O
int	O
phase2_getc	function
(	O
)	O
{	O
if	O
(	O
phase2_pushback_length	int
)	O
return	O
phase2_pushback	array
[	O
--	O
phase2_pushback_length	int
]	O
;	O
if	O
(	O
xgettext_current_source_encoding	pointer
==	O
po_charset_ascii	pointer
)	O
{	O
int	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
if	O
(	O
!	O
c_isascii	function
(	O
c	int
)	O
)	O
{	O
multiline_error	function
(	O
xstrdup	function
(	O
""	pointer
)	O
,	O
xasprintf	function
(	O
"%s\n%s\n"	pointer
,	O
non_ascii_error_message	function
(	O
lexical_context	enum
,	O
real_file_name	pointer
,	O
line_number	long
)	O
,	O
_	O
(	O
"Please specify the source encoding through --from-code."	pointer
)	O
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
return	O
c	int
;	O
}	O
else	O
if	O
(	O
xgettext_current_source_encoding	pointer
!=	O
po_charset_utf8	pointer
)	O
{	O
unsigned	O
char	O
buf	array
[	O
MAX_PHASE1_PUSHBACK	int
]	O
;	O
size_t	long
bufcount	long
;	O
int	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array
[	O
0	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
bufcount	long
=	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
unsigned	O
char	O
scratchbuf	array
[	O
6	int
]	O
;	O
const	O
char	O
*	O
inptr	pointer
=	O
(	O
const	O
char	O
*	O
)	O
&	O
buf	array
[	O
0	int
]	O
;	O
size_t	long
insize	long
=	O
bufcount	long
;	O
char	O
*	O
outptr	pointer
=	O
(	O
char	O
*	O
)	O
&	O
scratchbuf	array
[	O
0	int
]	O
;	O
size_t	long
outsize	long
=	O
sizeof	O
(	O
scratchbuf	array
)	O
;	O
size_t	long
res	long
=	O
iconv	function
(	O
xgettext_current_source_iconv	pointer
,	O
(	O
ICONV_CONST	O
char	O
*	O
*	O
)	O
&	O
inptr	pointer
,	O
&	O
insize	long
,	O
&	O
outptr	pointer
,	O
&	O
outsize	long
)	O
;	O
if	O
(	O
(	O
insize	long
<	O
bufcount	long
)	O
!=	O
(	O
outsize	long
<	O
sizeof	O
(	O
scratchbuf	array
)	O
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
outsize	long
==	O
sizeof	O
(	O
scratchbuf	array
)	O
)	O
{	O
if	O
(	O
res	long
!=	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
errno	O
==	O
EILSEQ	int
)	O
{	O
multiline_error	function
(	O
xstrdup	function
(	O
""	pointer
)	O
,	O
xasprintf	function
(	O
_	O
(	O
"%s:%d: Invalid multibyte sequence.\nPlease specify the correct source encoding through --from-code.\n"	pointer
)	O
,	O
real_file_name	pointer
,	O
line_number	long
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
if	O
(	O
errno	O
==	O
EINVAL	int
)	O
{	O
int	O
c	int
;	O
if	O
(	O
bufcount	long
==	O
MAX_PHASE1_PUSHBACK	int
)	O
{	O
multiline_error	function
(	O
xstrdup	function
(	O
""	pointer
)	O
,	O
xasprintf	function
(	O
_	O
(	O
"%s:%d: Long incomplete multibyte sequence.\nPlease specify the correct source encoding through --from-code.\n"	pointer
)	O
,	O
real_file_name	pointer
,	O
line_number	long
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
multiline_error	function
(	O
xstrdup	function
(	O
""	pointer
)	O
,	O
xasprintf	function
(	O
_	O
(	O
"%s:%d: Incomplete multibyte sequence at end of file.\nPlease specify the correct source encoding through --from-code.\n"	pointer
)	O
,	O
real_file_name	pointer
,	O
line_number	long
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
multiline_error	function
(	O
xstrdup	function
(	O
""	pointer
)	O
,	O
xasprintf	function
(	O
_	O
(	O
"%s:%d: Incomplete multibyte sequence at end of line.\nPlease specify the correct source encoding through --from-code.\n"	pointer
)	O
,	O
real_file_name	pointer
,	O
line_number	long
-	O
1	int
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
buf	array
[	O
bufcount	long
++	O
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
}	O
else	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"%s:%d: iconv failure"	pointer
)	O
,	O
real_file_name	pointer
,	O
line_number	long
)	O
;	O
}	O
else	O
{	O
size_t	long
outbytes	long
=	O
sizeof	O
(	O
scratchbuf	array
)	O
-	O
outsize	long
;	O
size_t	long
bytes	long
=	O
bufcount	long
-	O
insize	long
;	O
ucs4_t	int
uc	int
;	O
if	O
(	O
bytes	long
==	O
0	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
outbytes	long
==	O
0	int
)	O
abort	function
(	O
)	O
;	O
while	O
(	O
insize	long
>	O
0	int
)	O
phase1_ungetc	function
(	O
buf	array
[	O
--	O
insize	long
]	O
)	O
;	O
if	O
(	O
u8_mbtoucr	function
(	O
&	O
uc	int
,	O
scratchbuf	array
,	O
outbytes	long
)	O
<	O
(	O
int	O
)	O
outbytes	long
)	O
{	O
multiline_error	function
(	O
xstrdup	function
(	O
""	pointer
)	O
,	O
xasprintf	function
(	O
_	O
(	O
"%s:%d: Invalid multibyte sequence.\nPlease specify the source encoding through --from-code.\n"	pointer
)	O
,	O
real_file_name	pointer
,	O
line_number	long
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
return	O
uc	int
;	O
}	O
}	O
}	O
else	O
{	O
unsigned	O
char	O
buf	array
[	O
6	int
]	O
;	O
unsigned	O
int	O
count	int
;	O
int	O
c	int
;	O
ucs4_t	int
uc	int
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array
[	O
0	int
]	O
=	O
c	int
;	O
count	int
=	O
1	int
;	O
if	O
(	O
buf	array
[	O
0	int
]	O
>=	O
0xc0	int
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array
[	O
1	int
]	O
=	O
c	int
;	O
count	int
=	O
2	int
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
>=	O
0xe0	int
&&	O
(	O
(	O
buf	array
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array
[	O
2	int
]	O
=	O
c	int
;	O
count	int
=	O
3	int
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
>=	O
0xf0	int
&&	O
(	O
(	O
buf	array
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	array
[	O
2	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array
[	O
3	int
]	O
=	O
c	int
;	O
count	int
=	O
4	int
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
>=	O
0xf8	int
&&	O
(	O
(	O
buf	array
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	array
[	O
2	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	array
[	O
3	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array
[	O
4	int
]	O
=	O
c	int
;	O
count	int
=	O
5	int
;	O
}	O
if	O
(	O
buf	array
[	O
0	int
]	O
>=	O
0xfc	int
&&	O
(	O
(	O
buf	array
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	array
[	O
2	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	array
[	O
3	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
&&	O
(	O
(	O
buf	array
[	O
4	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
UEOF	O
;	O
buf	array
[	O
5	int
]	O
=	O
c	int
;	O
count	int
=	O
6	int
;	O
}	O
u8_mbtouc	function
(	O
&	O
uc	int
,	O
buf	array
,	O
count	int
)	O
;	O
return	O
uc	int
;	O
}	O
}	O
static	O
void	O
phase2_ungetc	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
UEOF	O
)	O
{	O
if	O
(	O
phase2_pushback_length	int
==	O
SIZEOF	O
(	O
phase2_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase2_pushback	array
[	O
phase2_pushback_length	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
static	O
int	O
logical_line_number	int
;	O
static	O
int	O
phase3_pushback	array
[	O
9	int
]	O
;	O
static	O
int	O
phase3_pushback_length	int
;	O
static	O
int	O
phase3_getc	function
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase3_pushback_length	int
)	O
{	O
c	int
=	O
phase3_pushback	array
[	O
--	O
phase3_pushback_length	int
]	O
;	O
if	O
(	O
c	int
==	O
UNL	int
)	O
++	O
logical_line_number	int
;	O
return	O
c	int
;	O
}	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
0x000d	int
)	O
{	O
int	O
c1	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c1	int
!=	O
UEOF	O
&&	O
c1	int
!=	O
0x000a	int
)	O
phase2_ungetc	function
(	O
c1	int
)	O
;	O
++	O
logical_line_number	int
;	O
return	O
UNL	int
;	O
}	O
if	O
(	O
c	int
==	O
0x0085	int
||	O
c	int
==	O
0x2028	int
||	O
c	int
==	O
0x2029	int
)	O
{	O
++	O
logical_line_number	int
;	O
return	O
UNL	int
;	O
}	O
if	O
(	O
c	int
==	O
0x001a	int
)	O
{	O
int	O
c1	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c1	int
==	O
UEOF	O
)	O
return	O
UEOF	O
;	O
phase2_ungetc	function
(	O
c1	int
)	O
;	O
}	O
if	O
(	O
c	int
==	O
UNL	int
)	O
++	O
logical_line_number	int
;	O
return	O
c	int
;	O
}	O
static	O
void	O
phase3_ungetc	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
UEOF	O
)	O
{	O
if	O
(	O
c	int
==	O
UNL	int
)	O
--	O
logical_line_number	int
;	O
if	O
(	O
phase3_pushback_length	int
==	O
SIZEOF	O
(	O
phase3_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase3_pushback	array
[	O
phase3_pushback_length	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
static	O
struct	O
mixed_string_buffer	struct
comment_buffer	struct
;	O
static	O
inline	O
void	O
comment_start	function
(	O
)	O
{	O
mixed_string_buffer_init	function
(	O
&	O
comment_buffer	struct
,	O
lc_comment	int
,	O
logical_file_name	pointer
,	O
line_number	long
)	O
;	O
}	O
static	O
inline	O
bool	bool
comment_at_start	function
(	O
)	O
{	O
return	O
mixed_string_buffer_is_empty	function
(	O
&	O
comment_buffer	struct
)	O
;	O
}	O
static	O
inline	O
void	O
comment_add	function
(	O
int	O
c	int
)	O
{	O
mixed_string_buffer_append_unicode	function
(	O
&	O
comment_buffer	struct
,	O
c	int
)	O
;	O
}	O
static	O
inline	O
void	O
comment_line_end	function
(	O
size_t	long
chars_to_remove	long
)	O
{	O
char	O
*	O
buffer	pointer
=	O
mixed_string_contents_free1	function
(	O
mixed_string_buffer_result	function
(	O
&	O
comment_buffer	struct
)	O
)	O
;	O
size_t	long
buflen	long
=	O
strlen	function
(	O
buffer	pointer
)	O
;	O
buflen	long
-=	O
chars_to_remove	long
;	O
while	O
(	O
buflen	long
>=	O
1	int
&&	O
(	O
buffer	pointer
[	O
buflen	long
-	O
1	int
]	O
==	O
' '	O
||	O
buffer	pointer
[	O
buflen	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
buflen	long
;	O
buffer	pointer
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
savable_comment_add	function
(	O
buffer	pointer
)	O
;	O
lexical_context	enum
=	O
lc_outside	int
;	O
}	O
static	O
int	O
last_comment_line	int
;	O
static	O
int	O
last_non_comment_line	int
;	O
static	O
int	O
phase4_getc	function
(	O
)	O
{	O
int	O
c0	int
;	O
int	O
c	int
;	O
bool	bool
last_was_star	bool
;	O
c0	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
c0	int
!=	O
'/'	O
)	O
return	O
c0	int
;	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
return	O
c0	int
;	O
case	O
'*'	O
:	O
comment_start	function
(	O
)	O
;	O
last_was_star	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
UEOF	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
comment_at_start	function
(	O
)	O
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	function
(	O
c	int
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
UNL	int
:	O
comment_line_end	function
(	O
1	int
)	O
;	O
comment_start	function
(	O
)	O
;	O
last_was_star	bool
=	O
false	int
;	O
continue	O
;	O
case	O
'*'	O
:	O
last_was_star	bool
=	O
true	int
;	O
continue	O
;	O
case	O
'/'	O
:	O
if	O
(	O
last_was_star	bool
)	O
{	O
comment_line_end	function
(	O
2	int
)	O
;	O
break	O
;	O
}	O
default	O
:	O
last_was_star	bool
=	O
false	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
last_comment_line	int
=	O
logical_line_number	int
;	O
return	O
' '	O
;	O
case	O
'/'	O
:	O
last_comment_line	int
=	O
logical_line_number	int
;	O
comment_start	function
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
UNL	int
||	O
c	int
==	O
UEOF	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
comment_at_start	function
(	O
)	O
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	function
(	O
c	int
)	O
;	O
}	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
comment_line_end	function
(	O
0	int
)	O
;	O
phase3_getc	function
(	O
)	O
;	O
return	O
UNL	int
;	O
}	O
}	O
static	O
void	O
phase4_ungetc	function
(	O
int	O
c	int
)	O
{	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
}	O
static	O
bool	bool
is_whitespace	function
(	O
int	O
c	int
)	O
{	O
switch	O
(	O
c	int
>>	O
8	int
)	O
{	O
case	O
0x00	int
:	O
return	O
(	O
c	int
==	O
0x0020	int
||	O
c	int
==	O
0x00a0	int
)	O
;	O
case	O
0x16	int
:	O
return	O
(	O
c	int
==	O
0x1680	int
)	O
;	O
case	O
0x18	int
:	O
return	O
(	O
c	int
==	O
0x180e	int
)	O
;	O
case	O
0x20	int
:	O
return	O
(	O
(	O
c	int
>=	O
0x2000	int
&&	O
c	int
<=	O
0x200b	int
)	O
||	O
c	int
==	O
0x202f	int
||	O
c	int
==	O
0x205f	int
)	O
;	O
case	O
0x30	int
:	O
return	O
(	O
c	int
==	O
0x3000	int
)	O
;	O
default	O
:	O
return	O
false	int
;	O
}	O
}	O
static	O
inline	O
int	O
bitmap_lookup	function
(	O
const	O
void	O
*	O
table	pointer
,	O
unsigned	O
int	O
uc	int
)	O
{	O
unsigned	O
int	O
index1	int
=	O
uc	int
>>	O
16	int
;	O
if	O
(	O
index1	int
<	O
(	O
(	O
const	O
int	O
*	O
)	O
table	pointer
)	O
[	O
0	int
]	O
)	O
{	O
int	O
lookup1	int
=	O
(	O
(	O
const	O
int	O
*	O
)	O
table	pointer
)	O
[	O
1	int
+	O
index1	int
]	O
;	O
if	O
(	O
lookup1	int
>=	O
0	int
)	O
{	O
unsigned	O
int	O
index2	int
=	O
(	O
uc	int
>>	O
9	int
)	O
&	O
0x7f	int
;	O
int	O
lookup2	int
=	O
(	O
(	O
const	O
int	O
*	O
)	O
table	pointer
)	O
[	O
lookup1	int
+	O
index2	int
]	O
;	O
if	O
(	O
lookup2	int
>=	O
0	int
)	O
{	O
unsigned	O
int	O
index3	int
=	O
(	O
uc	int
>>	O
5	int
)	O
&	O
0xf	int
;	O
unsigned	O
int	O
lookup3	int
=	O
(	O
(	O
const	O
int	O
*	O
)	O
table	pointer
)	O
[	O
lookup2	int
+	O
index3	int
]	O
;	O
return	O
(	O
lookup3	int
>>	O
(	O
uc	int
&	O
0x1f	int
)	O
)	O
&	O
1	int
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
const	O
struct	O
{	O
int	O
header	array
[	O
1	int
]	O
;	O
int	O
level1	array
[	O
3	int
]	O
;	O
int	O
level2	array
[	O
3	int
<<	O
7	int
]	O
;	O
int	O
level3	array
[	O
34	int
<<	O
4	int
]	O
;	O
}	O
table_identifier_start	struct
=	O
{	O
{	O
3	int
}	O
,	O
{	O
4	int
,	O
132	int
,	O
260	int
}	O
,	O
{	O
388	int
,	O
404	int
,	O
420	int
,	O
436	int
,	O
452	int
,	O
468	int
,	O
484	int
,	O
500	int
,	O
516	int
,	O
532	int
,	O
548	int
,	O
564	int
,	O
580	int
,	O
-	O
1	int
,	O
596	int
,	O
612	int
,	O
628	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
644	int
,	O
-	O
1	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
676	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
692	int
,	O
660	int
,	O
660	int
,	O
708	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
724	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
740	int
,	O
756	int
,	O
772	int
,	O
788	int
,	O
804	int
,	O
820	int
,	O
836	int
,	O
-	O
1	int
,	O
852	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
868	int
,	O
884	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
660	int
,	O
900	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
660	int
,	O
916	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
0x00000000	int
,	O
0x00000000	int
,	O
0x87FFFFFE	int
,	O
0x07FFFFFE	int
,	O
0x00000000	int
,	O
0x04200400	int
,	O
0xFF7FFFFF	int
,	O
0xFF7FFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x007FFFFF	int
,	O
0xFFFF0000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0003FFC3	int
,	O
0x0000401F	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x04000000	int
,	O
0xFFFFD740	int
,	O
0xFFFFFFFB	int
,	O
0xFFFF7FFF	int
,	O
0x0FBFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFC03	int
,	O
0xFFFFFFFF	int
,	O
0xFFFF7FFF	int
,	O
0x033FFFFF	int
,	O
0x0000FFFF	int
,	O
0xFFFE0000	int
,	O
0x027FFFFF	int
,	O
0xFFFFFFFE	int
,	O
0x000000FF	int
,	O
0x00000000	int
,	O
0xFFFF0000	int
,	O
0x000707FF	int
,	O
0x00000000	int
,	O
0x07FFFFFE	int
,	O
0x000007FF	int
,	O
0xFFFEC000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x002FFFFF	int
,	O
0x9C00C060	int
,	O
0xFFFD0000	int
,	O
0x0000FFFF	int
,	O
0x0000E000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0x0002003F	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFF0	int
,	O
0x23FFFFFF	int
,	O
0xFF010000	int
,	O
0x00000003	int
,	O
0xFFF99FE0	int
,	O
0x23C5FDFF	int
,	O
0xB0000000	int
,	O
0x00030003	int
,	O
0xFFF987E0	int
,	O
0x036DFDFF	int
,	O
0x5E000000	int
,	O
0x001C0000	int
,	O
0xFFFBBFE0	int
,	O
0x23EDFDFF	int
,	O
0x00010000	int
,	O
0x00000003	int
,	O
0xFFF99FE0	int
,	O
0x23EDFDFF	int
,	O
0xB0000000	int
,	O
0x00020003	int
,	O
0xD63DC7E8	int
,	O
0x03BFC718	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFDDFE0	int
,	O
0x03EFFDFF	int
,	O
0x00000000	int
,	O
0x00000003	int
,	O
0xFFFDDFE0	int
,	O
0x23EFFDFF	int
,	O
0x40000000	int
,	O
0x00000003	int
,	O
0xFFFDDFE0	int
,	O
0x03FFFDFF	int
,	O
0x00000000	int
,	O
0x00000003	int
,	O
0xFC7FFFE0	int
,	O
0x2FFBFFFF	int
,	O
0x0000007F	int
,	O
0x00000000	int
,	O
0xFFFFFFFE	int
,	O
0x000DFFFF	int
,	O
0x0000007F	int
,	O
0x00000000	int
,	O
0xFEF02596	int
,	O
0x200DECAE	int
,	O
0x3000005F	int
,	O
0x00000000	int
,	O
0x00000001	int
,	O
0x00000000	int
,	O
0xFFFFFEFF	int
,	O
0x000007FF	int
,	O
0x00000F00	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0x000006FB	int
,	O
0x003F0000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFF003F	int
,	O
0x01FFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x83FFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFF07	int
,	O
0xFFFFFFFF	int
,	O
0x03FFFFFF	int
,	O
0xFFFFFF7F	int
,	O
0xFFFFFFFF	int
,	O
0x3D7F3D7F	int
,	O
0xFFFFFFFF	int
,	O
0xFFFF3D7F	int
,	O
0x7F3D7FFF	int
,	O
0xFF7F7F3D	int
,	O
0xFFFF7FFF	int
,	O
0x7F3D7FFF	int
,	O
0xFFFFFFFF	int
,	O
0x07FFFF7F	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x001FFFFF	int
,	O
0xFFFFFFFE	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x007F9FFF	int
,	O
0x07FFFFFE	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0001C7FF	int
,	O
0x0003DFFF	int
,	O
0x0003FFFF	int
,	O
0x0003FFFF	int
,	O
0x0001DFFF	int
,	O
0xFFFFFFFF	int
,	O
0x000FFFFF	int
,	O
0x10800000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x00FFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x000001FF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x1FFFFFFF	int
,	O
0x00000000	int
,	O
0xFFFF0000	int
,	O
0x001F3FFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x00000FFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0FFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x03FFFFFF	int
,	O
0x3F3FFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xAAFF3F3F	int
,	O
0x3FFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x5FDFFFFF	int
,	O
0x0FCF1FDC	int
,	O
0x1FDC1FFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x80020000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x3E2FFC84	int
,	O
0xE3FBBD50	int
,	O
0x000003E0	int
,	O
0xFFFFFFFF	int
,	O
0x0000000F	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x000000E0	int
,	O
0x1F3E03FE	int
,	O
0xFFFFFFFE	int
,	O
0xFFFFFFFF	int
,	O
0xE07FFFFF	int
,	O
0xFFFFFFFE	int
,	O
0xFFFFFFFF	int
,	O
0xF7FFFFFF	int
,	O
0xFFFFFFE0	int
,	O
0xFFFE1FFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x00007FFF	int
,	O
0x00FFFFFF	int
,	O
0x00000000	int
,	O
0xFFFF0000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x003FFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0000003F	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x00001FFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0000000F	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFF3FFF	int
,	O
0xFFFFFFFF	int
,	O
0x000007FF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xA0F8007F	int
,	O
0x5F7FFDFF	int
,	O
0xFFFFFFDB	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0003FFFF	int
,	O
0xFFF80000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x3FFFFFFF	int
,	O
0xFFFF0000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFCFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x000000FF	int
,	O
0x0FFF0000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFDF0000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x1FFFFFFF	int
,	O
0x00000000	int
,	O
0x07FFFFFE	int
,	O
0x07FFFFFE	int
,	O
0xFFFFFFC0	int
,	O
0xFFFFFFFF	int
,	O
0x7FFFFFFF	int
,	O
0x1CFCFCFC	int
,	O
0x00000000	int
,	O
0xFFFFEFFF	int
,	O
0xB7FFFF7F	int
,	O
0x3FFF3FFF	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x07FFFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x7FFFFFFF	int
,	O
0xFFFF0000	int
,	O
0x000007FF	int
,	O
0x00000000	int
,	O
0x3FFFFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x3FFFFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFD3F	int
,	O
0x91BFFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFDFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xDFFFFFFF	int
,	O
0xEBFFDE64	int
,	O
0xFFFFFFEF	int
,	O
0xFFFFFFFF	int
,	O
0xDFDFE7BF	int
,	O
0x7BFFFFFF	int
,	O
0xFFFDFC5F	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFF0F	int
,	O
0xF7FFFFFD	int
,	O
0xF7FFFFFF	int
,	O
0xFFDFFFFF	int
,	O
0xFFDFFFFF	int
,	O
0xFFFF7FFF	int
,	O
0xFFFF7FFF	int
,	O
0xFFFFFDFF	int
,	O
0xFFFFFDFF	int
,	O
0x000003F7	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x007FFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x3FFFFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
}	O
}	O
;	O
static	O
const	O
struct	O
{	O
int	O
header	array
[	O
1	int
]	O
;	O
int	O
level1	array
[	O
15	int
]	O
;	O
int	O
level2	array
[	O
4	int
<<	O
7	int
]	O
;	O
int	O
level3	array
[	O
36	int
<<	O
4	int
]	O
;	O
}	O
table_identifier_part	struct
=	O
{	O
{	O
15	int
}	O
,	O
{	O
16	int
,	O
144	int
,	O
272	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
400	int
}	O
,	O
{	O
528	int
,	O
544	int
,	O
560	int
,	O
576	int
,	O
592	int
,	O
608	int
,	O
624	int
,	O
640	int
,	O
656	int
,	O
672	int
,	O
688	int
,	O
704	int
,	O
720	int
,	O
-	O
1	int
,	O
736	int
,	O
752	int
,	O
768	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
784	int
,	O
-	O
1	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
816	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
832	int
,	O
800	int
,	O
800	int
,	O
848	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
864	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
880	int
,	O
896	int
,	O
912	int
,	O
928	int
,	O
944	int
,	O
960	int
,	O
976	int
,	O
-	O
1	int
,	O
992	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
1008	int
,	O
-	O
1	int
,	O
1024	int
,	O
1040	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
800	int
,	O
1056	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
800	int
,	O
1072	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
1088	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
,	O
{	O
0x00000000	int
,	O
0x03FF0000	int
,	O
0x87FFFFFE	int
,	O
0x07FFFFFE	int
,	O
0x00000000	int
,	O
0x04202400	int
,	O
0xFF7FFFFF	int
,	O
0xFF7FFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x007FFFFF	int
,	O
0xFFFF0000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0003FFC3	int
,	O
0x0000401F	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xE0FFFFFF	int
,	O
0x0400FFFF	int
,	O
0xFFFFD740	int
,	O
0xFFFFFFFB	int
,	O
0xFFFF7FFF	int
,	O
0x0FBFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFC7B	int
,	O
0xFFFFFFFF	int
,	O
0xFFFF7FFF	int
,	O
0x033FFFFF	int
,	O
0x0000FFFF	int
,	O
0xFFFE0000	int
,	O
0x027FFFFF	int
,	O
0xFFFFFFFE	int
,	O
0xFFFE00FF	int
,	O
0xBBFFFFFB	int
,	O
0xFFFF0016	int
,	O
0x000707FF	int
,	O
0x003F000F	int
,	O
0x07FFFFFE	int
,	O
0x01FFFFFF	int
,	O
0xFFFFC3FF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xBFEFFFFF	int
,	O
0x9FFFFDFF	int
,	O
0xFFFF8000	int
,	O
0xFFFFFFFF	int
,	O
0x0000E7FF	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0x0003FFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFE	int
,	O
0xF3FFFFFF	int
,	O
0xFF1F3FFF	int
,	O
0x0000FFCF	int
,	O
0xFFF99FEE	int
,	O
0xF3C5FDFF	int
,	O
0xB080399F	int
,	O
0x0003FFCF	int
,	O
0xFFF987EE	int
,	O
0xD36DFDFF	int
,	O
0x5E003987	int
,	O
0x001FFFC0	int
,	O
0xFFFBBFEE	int
,	O
0xF3EDFDFF	int
,	O
0x00013BBF	int
,	O
0x0000FFCF	int
,	O
0xFFF99FEE	int
,	O
0xF3EDFDFF	int
,	O
0xB0C0398F	int
,	O
0x0002FFC3	int
,	O
0xD63DC7EC	int
,	O
0xC3BFC718	int
,	O
0x00803DC7	int
,	O
0x0000FF80	int
,	O
0xFFFDDFEE	int
,	O
0xC3EFFDFF	int
,	O
0x00603DDF	int
,	O
0x0000FFC3	int
,	O
0xFFFDDFEC	int
,	O
0xF3EFFDFF	int
,	O
0x40603DDF	int
,	O
0x0000FFC3	int
,	O
0xFFFDDFEC	int
,	O
0xC3FFFDFF	int
,	O
0x00803DCF	int
,	O
0x0000FFC3	int
,	O
0xFC7FFFEC	int
,	O
0x2FFBFFFF	int
,	O
0xFF5F847F	int
,	O
0x000C0000	int
,	O
0xFFFFFFFE	int
,	O
0x07FFFFFF	int
,	O
0x03FF7FFF	int
,	O
0x00000000	int
,	O
0xFEF02596	int
,	O
0x3BFFECAE	int
,	O
0x33FF3F5F	int
,	O
0x00000000	int
,	O
0x03000001	int
,	O
0xC2A003FF	int
,	O
0xFFFFFEFF	int
,	O
0xFFFE07FF	int
,	O
0xFEFF0FDF	int
,	O
0x1FFFFFFF	int
,	O
0x00000040	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0x03C7F6FB	int
,	O
0x03FF03FF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFF003F	int
,	O
0x01FFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x83FFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFF07	int
,	O
0xFFFFFFFF	int
,	O
0x03FFFFFF	int
,	O
0xFFFFFF7F	int
,	O
0xFFFFFFFF	int
,	O
0x3D7F3D7F	int
,	O
0xFFFFFFFF	int
,	O
0xFFFF3D7F	int
,	O
0x7F3D7FFF	int
,	O
0xFF7F7F3D	int
,	O
0xFFFF7FFF	int
,	O
0x7F3D7FFF	int
,	O
0xFFFFFFFF	int
,	O
0x07FFFF7F	int
,	O
0x0003FE00	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x001FFFFF	int
,	O
0xFFFFFFFE	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x007F9FFF	int
,	O
0x07FFFFFE	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0001C7FF	int
,	O
0x001FDFFF	int
,	O
0x001FFFFF	int
,	O
0x000FFFFF	int
,	O
0x000DDFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x308FFFFF	int
,	O
0x000003FF	int
,	O
0x03FF3800	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x00FFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x000003FF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x1FFFFFFF	int
,	O
0x0FFF0FFF	int
,	O
0xFFFFFFC0	int
,	O
0x001F3FFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x00000FFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0FFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x03FFFFFF	int
,	O
0x3F3FFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xAAFF3F3F	int
,	O
0x3FFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x5FDFFFFF	int
,	O
0x0FCF1FDC	int
,	O
0x1FDC1FFF	int
,	O
0x0000F000	int
,	O
0x80007C00	int
,	O
0x00100001	int
,	O
0x8002FC0F	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x1FFF0000	int
,	O
0x000007E2	int
,	O
0x3E2FFC84	int
,	O
0xE3FBBD50	int
,	O
0x000003E0	int
,	O
0xFFFFFFFF	int
,	O
0x0000000F	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x000000E0	int
,	O
0x1F3EFFFE	int
,	O
0xFFFFFFFE	int
,	O
0xFFFFFFFF	int
,	O
0xE67FFFFF	int
,	O
0xFFFFFFFE	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFE0	int
,	O
0xFFFE1FFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x00007FFF	int
,	O
0x00FFFFFF	int
,	O
0x00000000	int
,	O
0xFFFF0000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x003FFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0000003F	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x00001FFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0000000F	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFF3FFF	int
,	O
0xFFFFFFFF	int
,	O
0x000007FF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xE0F8007F	int
,	O
0x5F7FFDFF	int
,	O
0xFFFFFFDB	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0003FFFF	int
,	O
0xFFF80000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x3FFFFFFF	int
,	O
0xFFFF0000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFCFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x000000FF	int
,	O
0x0FFF0000	int
,	O
0x0000FFFF	int
,	O
0x0018000F	int
,	O
0x0000E000	int
,	O
0xFFDF0000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x9FFFFFFF	int
,	O
0x03FF0000	int
,	O
0x87FFFFFE	int
,	O
0x07FFFFFE	int
,	O
0xFFFFFFE0	int
,	O
0xFFFFFFFF	int
,	O
0x7FFFFFFF	int
,	O
0x1CFCFCFC	int
,	O
0x0E000000	int
,	O
0xFFFFEFFF	int
,	O
0xB7FFFF7F	int
,	O
0x3FFF3FFF	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x07FFFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x7FFFFFFF	int
,	O
0xFFFF0000	int
,	O
0x000007FF	int
,	O
0x00000000	int
,	O
0x3FFFFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x3FFFFFFF	int
,	O
0x000003FF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFD3F	int
,	O
0x91BFFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFE3E0	int
,	O
0x00000FE7	int
,	O
0x00003C00	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFDFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xDFFFFFFF	int
,	O
0xEBFFDE64	int
,	O
0xFFFFFFEF	int
,	O
0xFFFFFFFF	int
,	O
0xDFDFE7BF	int
,	O
0x7BFFFFFF	int
,	O
0xFFFDFC5F	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFF0F	int
,	O
0xF7FFFFFD	int
,	O
0xF7FFFFFF	int
,	O
0xFFDFFFFF	int
,	O
0xFFDFFFFF	int
,	O
0xFFFF7FFF	int
,	O
0xFFFF7FFF	int
,	O
0xFFFFFDFF	int
,	O
0xFFFFFDFF	int
,	O
0xFFFFC3F7	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x007FFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x3FFFFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000002	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0x00000000	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0xFFFFFFFF	int
,	O
0x0000FFFF	int
}	O
}	O
;	O
static	O
bool	bool
is_identifier_start	function
(	O
int	O
c	int
)	O
{	O
return	O
bitmap_lookup	function
(	O
&	O
table_identifier_start	struct
,	O
c	int
)	O
;	O
}	O
static	O
bool	bool
is_identifier_part	function
(	O
int	O
c	int
)	O
{	O
return	O
bitmap_lookup	function
(	O
&	O
table_identifier_part	struct
,	O
c	int
)	O
;	O
}	O
static	O
bool	bool
is_any_character	function
(	O
int	O
c	int
)	O
{	O
return	O
true	int
;	O
}	O
static	O
int	O
phase5_pushback	array
[	O
10	int
]	O
;	O
static	O
int	O
phase5_pushback_length	int
;	O
static	O
int	O
phase5_getc	function
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase5_pushback_length	int
)	O
return	O
phase5_pushback	array
[	O
--	O
phase5_pushback_length	int
]	O
;	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
UNL	int
)	O
return	O
c	int
;	O
do	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
while	O
(	O
c	int
!=	O
UEOF	O
&&	O
is_whitespace	function
(	O
c	int
)	O
)	O
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
do	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
while	O
(	O
c	int
!=	O
UEOF	O
&&	O
c	int
!=	O
UNL	int
)	O
;	O
return	O
c	int
;	O
}	O
else	O
{	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
return	O
UNL	int
;	O
}	O
}	O
enum	O
token_type_ty	enum
{	O
token_type_eof	int
,	O
token_type_lparen	int
,	O
token_type_rparen	int
,	O
token_type_lbrace	int
,	O
token_type_rbrace	int
,	O
token_type_comma	int
,	O
token_type_dot	int
,	O
token_type_string_literal	int
,	O
token_type_number	int
,	O
token_type_symbol	int
,	O
token_type_plus	int
,	O
token_type_other	int
}	O
;	O
typedef	O
enum	O
token_type_ty	enum
token_type_ty	enum
;	O
typedef	O
struct	O
token_ty	struct
token_ty	struct
;	O
struct	O
token_ty	struct
{	O
token_type_ty	enum
type	char
;	O
char	O
*	O
string	pointer
;	O
mixed_string_ty	struct
*	O
mixed_string	struct
;	O
refcounted_string_list_ty	struct
*	O
comment	pointer
;	O
int	O
line_number	long
;	O
int	O
logical_line_number	int
;	O
}	O
;	O
static	O
inline	O
void	O
free_token	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
type	char
==	O
token_type_symbol	int
)	O
free	function
(	O
tp	pointer
->	O
string	pointer
)	O
;	O
if	O
(	O
tp	pointer
->	O
type	char
==	O
token_type_string_literal	int
)	O
{	O
mixed_string_free	function
(	O
tp	pointer
->	O
mixed_string	struct
)	O
;	O
drop_reference	function
(	O
tp	pointer
->	O
comment	pointer
)	O
;	O
}	O
}	O
static	O
int	O
do_getc_unicode_escaped	function
(	O
bool	bool
(	O
*	O
predicate	pointer
)	O
(	O
int	O
)	O
)	O
{	O
int	O
c	int
;	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
UEOF	O
)	O
return	O
'\\'	O
;	O
if	O
(	O
c	int
==	O
'u'	O
||	O
c	int
==	O
'U'	O
)	O
{	O
unsigned	O
char	O
buf	array
[	O
8	int
]	O
;	O
int	O
expect	int
;	O
unsigned	O
int	O
n	long
;	O
int	O
i	long
;	O
expect	int
=	O
(	O
c	int
==	O
'U'	O
?	O
8	int
:	O
4	int
)	O
;	O
n	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
expect	int
;	O
i	long
++	O
)	O
{	O
int	O
c1	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
c1	int
>=	O
'0'	O
&&	O
c1	int
<=	O
'9'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'A'	O
&&	O
c1	int
<=	O
'F'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'a'	O
&&	O
c1	int
<=	O
'f'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'a'	O
+	O
10	int
)	O
;	O
else	O
{	O
phase3_ungetc	function
(	O
c1	int
)	O
;	O
while	O
(	O
--	O
i	long
>=	O
0	int
)	O
phase3_ungetc	function
(	O
buf	array
[	O
i	long
]	O
)	O
;	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
return	O
'\\'	O
;	O
}	O
buf	array
[	O
i	long
]	O
=	O
c1	int
;	O
}	O
if	O
(	O
n	long
>=	O
0x110000	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: invalid Unicode character"	pointer
)	O
,	O
logical_file_name	pointer
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
else	O
if	O
(	O
predicate	pointer
(	O
n	long
)	O
)	O
return	O
n	long
;	O
while	O
(	O
--	O
i	long
>=	O
0	int
)	O
phase3_ungetc	function
(	O
buf	array
[	O
i	long
]	O
)	O
;	O
}	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
return	O
'\\'	O
;	O
}	O
static	O
int	O
do_getc_escaped	function
(	O
)	O
{	O
int	O
c	int
;	O
int	O
n	long
;	O
int	O
i	long
;	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
UEOF	O
)	O
return	O
'\\'	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'a'	O
:	O
return	O
0x0007	int
;	O
case	O
'b'	O
:	O
return	O
0x0008	int
;	O
case	O
't'	O
:	O
return	O
0x0009	int
;	O
case	O
'n'	O
:	O
return	O
0x000a	int
;	O
case	O
'v'	O
:	O
return	O
0x000b	int
;	O
case	O
'f'	O
:	O
return	O
0x000c	int
;	O
case	O
'r'	O
:	O
return	O
0x000d	int
;	O
case	O
'"'	O
:	O
return	O
'"'	O
;	O
case	O
'\''	O
:	O
return	O
'\''	O
;	O
case	O
'\\'	O
:	O
return	O
'\\'	O
;	O
case	O
'0'	O
:	O
return	O
0x0000	int
;	O
case	O
'x'	O
:	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
phase3_ungetc	function
(	O
'x'	O
)	O
;	O
return	O
'\\'	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
break	O
;	O
}	O
n	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
;	O
i	long
++	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
return	O
n	long
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
n	long
=	O
n	long
*	O
16	int
+	O
c	int
-	O
'0'	O
;	O
break	O
;	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
n	long
=	O
n	long
*	O
16	int
+	O
10	int
+	O
c	int
-	O
'A'	O
;	O
break	O
;	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
n	long
=	O
n	long
*	O
16	int
+	O
10	int
+	O
c	int
-	O
'a'	O
;	O
break	O
;	O
}	O
if	O
(	O
i	long
==	O
3	int
)	O
break	O
;	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
}	O
return	O
n	long
;	O
case	O
'u'	O
:	O
case	O
'U'	O
:	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
return	O
do_getc_unicode_escaped	function
(	O
is_any_character	function
)	O
;	O
default	O
:	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
return	O
'\\'	O
;	O
}	O
}	O
static	O
void	O
accumulate_escaped	function
(	O
struct	O
mixed_string_buffer	struct
*	O
literal	pointer
,	O
int	O
delimiter	int
)	O
{	O
int	O
c	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase3_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
UEOF	O
||	O
c	int
==	O
delimiter	int
)	O
break	O
;	O
if	O
(	O
c	int
==	O
UNL	int
)	O
{	O
phase3_ungetc	function
(	O
c	int
)	O
;	O
error_with_progname	bool
=	O
false	int
;	O
if	O
(	O
delimiter	int
==	O
'\''	O
)	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: unterminated character constant"	pointer
)	O
,	O
logical_file_name	pointer
,	O
line_number	long
)	O
;	O
else	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: unterminated string constant"	pointer
)	O
,	O
logical_file_name	pointer
,	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
c	int
=	O
do_getc_escaped	function
(	O
)	O
;	O
if	O
(	O
literal	pointer
)	O
mixed_string_buffer_append_unicode	function
(	O
literal	pointer
,	O
c	int
)	O
;	O
}	O
}	O
static	O
token_ty	struct
phase6_pushback	array
[	O
4	int
]	O
;	O
static	O
int	O
phase6_pushback_length	int
;	O
static	O
void	O
phase6_get	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase6_pushback_length	int
)	O
{	O
*	O
tp	pointer
=	O
phase6_pushback	array
[	O
--	O
phase6_pushback_length	int
]	O
;	O
return	O
;	O
}	O
tp	pointer
->	O
string	pointer
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
tp	pointer
->	O
line_number	long
=	O
line_number	long
;	O
tp	pointer
->	O
logical_line_number	int
=	O
logical_line_number	int
;	O
c	int
=	O
phase5_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
UEOF	O
)	O
{	O
tp	pointer
->	O
type	char
=	O
token_type_eof	int
;	O
return	O
;	O
}	O
switch	O
(	O
c	int
)	O
{	O
case	O
UNL	int
:	O
if	O
(	O
last_non_comment_line	int
>	O
last_comment_line	int
)	O
savable_comment_reset	function
(	O
)	O
;	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
case	O
'\f'	O
:	O
continue	O
;	O
}	O
last_non_comment_line	int
=	O
tp	pointer
->	O
logical_line_number	int
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'('	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_lparen	int
;	O
return	O
;	O
case	O
')'	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_rparen	int
;	O
return	O
;	O
case	O
'{'	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_lbrace	int
;	O
return	O
;	O
case	O
'}'	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_rbrace	int
;	O
return	O
;	O
case	O
','	O
:	O
tp	pointer
->	O
type	char
=	O
token_type_comma	int
;	O
return	O
;	O
case	O
'.'	O
:	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
!	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
)	O
{	O
phase4_ungetc	function
(	O
c	int
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_dot	int
;	O
return	O
;	O
}	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
{	O
bool	bool
hexadecimal	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
continue	O
;	O
if	O
(	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'Z'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'z'	O
)	O
)	O
{	O
if	O
(	O
c	int
==	O
'X'	O
||	O
c	int
==	O
'x'	O
)	O
hexadecimal	bool
=	O
true	int
;	O
if	O
(	O
(	O
c	int
==	O
'E'	O
||	O
c	int
==	O
'e'	O
)	O
&&	O
!	O
hexadecimal	bool
)	O
{	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
!	O
(	O
c	int
==	O
'+'	O
||	O
c	int
==	O
'-'	O
)	O
)	O
phase4_ungetc	function
(	O
c	int
)	O
;	O
}	O
continue	O
;	O
}	O
if	O
(	O
c	int
==	O
'.'	O
)	O
continue	O
;	O
break	O
;	O
}	O
phase4_ungetc	function
(	O
c	int
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_number	int
;	O
return	O
;	O
}	O
case	O
'"'	O
:	O
{	O
struct	O
mixed_string_buffer	struct
literal	pointer
;	O
lexical_context	enum
=	O
lc_string	int
;	O
mixed_string_buffer_init	function
(	O
&	O
literal	pointer
,	O
lexical_context	enum
,	O
logical_file_name	pointer
,	O
logical_line_number	int
)	O
;	O
accumulate_escaped	function
(	O
&	O
literal	pointer
,	O
'"'	O
)	O
;	O
tp	pointer
->	O
mixed_string	struct
=	O
mixed_string_buffer_result	function
(	O
&	O
literal	pointer
)	O
;	O
tp	pointer
->	O
comment	pointer
=	O
add_reference	function
(	O
savable_comment	pointer
)	O
;	O
lexical_context	enum
=	O
lc_outside	int
;	O
tp	pointer
->	O
type	char
=	O
token_type_string_literal	int
;	O
return	O
;	O
}	O
case	O
'\''	O
:	O
{	O
accumulate_escaped	function
(	O
NULL	O
,	O
'\''	O
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
case	O
'+'	O
:	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'+'	O
)	O
tp	pointer
->	O
type	char
=	O
token_type_other	int
;	O
else	O
if	O
(	O
c	int
==	O
'='	O
)	O
tp	pointer
->	O
type	char
=	O
token_type_other	int
;	O
else	O
{	O
phase4_ungetc	function
(	O
c	int
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_plus	int
;	O
}	O
return	O
;	O
case	O
'@'	O
:	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'"'	O
)	O
{	O
struct	O
mixed_string_buffer	struct
literal	pointer
;	O
lexical_context	enum
=	O
lc_string	int
;	O
mixed_string_buffer_init	function
(	O
&	O
literal	pointer
,	O
lexical_context	enum
,	O
logical_file_name	pointer
,	O
logical_line_number	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
UEOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'"'	O
)	O
{	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'"'	O
)	O
{	O
phase2_ungetc	function
(	O
c	int
)	O
;	O
break	O
;	O
}	O
}	O
mixed_string_buffer_append_unicode	function
(	O
&	O
literal	pointer
,	O
c	int
)	O
;	O
}	O
tp	pointer
->	O
mixed_string	struct
=	O
mixed_string_buffer_result	function
(	O
&	O
literal	pointer
)	O
;	O
tp	pointer
->	O
comment	pointer
=	O
add_reference	function
(	O
savable_comment	pointer
)	O
;	O
lexical_context	enum
=	O
lc_outside	int
;	O
tp	pointer
->	O
type	char
=	O
token_type_string_literal	int
;	O
return	O
;	O
}	O
default	O
:	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
c	int
=	O
do_getc_unicode_escaped	function
(	O
is_identifier_start	function
)	O
;	O
if	O
(	O
is_identifier_start	function
(	O
c	int
)	O
)	O
{	O
struct	O
mixed_string_buffer	struct
buffer	pointer
;	O
mixed_string_ty	struct
*	O
mixed_string	struct
;	O
mixed_string_buffer_init	function
(	O
&	O
buffer	pointer
,	O
lexical_context	enum
,	O
logical_file_name	pointer
,	O
logical_line_number	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
mixed_string_buffer_append_unicode	function
(	O
&	O
buffer	pointer
,	O
c	int
)	O
;	O
c	int
=	O
phase4_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
c	int
=	O
do_getc_unicode_escaped	function
(	O
is_identifier_part	function
)	O
;	O
if	O
(	O
!	O
is_identifier_part	function
(	O
c	int
)	O
)	O
break	O
;	O
}	O
phase4_ungetc	function
(	O
c	int
)	O
;	O
mixed_string	struct
=	O
mixed_string_buffer_result	function
(	O
&	O
buffer	pointer
)	O
;	O
tp	pointer
->	O
string	pointer
=	O
mixed_string_contents	function
(	O
mixed_string	struct
)	O
;	O
mixed_string_free	function
(	O
mixed_string	struct
)	O
;	O
tp	pointer
->	O
type	char
=	O
token_type_symbol	int
;	O
return	O
;	O
}	O
else	O
{	O
tp	pointer
->	O
type	char
=	O
token_type_other	int
;	O
return	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
phase6_unget	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
type	char
!=	O
token_type_eof	int
)	O
{	O
if	O
(	O
phase6_pushback_length	int
==	O
SIZEOF	O
(	O
phase6_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase6_pushback	array
[	O
phase6_pushback_length	int
++	O
]	O
=	O
*	O
tp	pointer
;	O
}	O
}	O
static	O
token_ty	struct
phase7_pushback	array
[	O
2	int
]	O
;	O
static	O
int	O
phase7_pushback_length	int
;	O
static	O
void	O
phase7_get	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
phase7_pushback_length	int
)	O
{	O
*	O
tp	pointer
=	O
phase7_pushback	array
[	O
--	O
phase7_pushback_length	int
]	O
;	O
return	O
;	O
}	O
phase6_get	function
(	O
tp	pointer
)	O
;	O
if	O
(	O
tp	pointer
->	O
type	char
==	O
token_type_string_literal	int
)	O
{	O
mixed_string_ty	struct
*	O
sum	pointer
=	O
tp	pointer
->	O
mixed_string	struct
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token2	struct
;	O
phase6_get	function
(	O
&	O
token2	struct
)	O
;	O
if	O
(	O
token2	struct
.	O
type	char
==	O
token_type_plus	int
)	O
{	O
token_ty	struct
token3	struct
;	O
phase6_get	function
(	O
&	O
token3	struct
)	O
;	O
if	O
(	O
token3	struct
.	O
type	char
==	O
token_type_string_literal	int
)	O
{	O
token_ty	struct
token_after	struct
;	O
phase6_get	function
(	O
&	O
token_after	struct
)	O
;	O
if	O
(	O
token_after	struct
.	O
type	char
!=	O
token_type_dot	int
)	O
{	O
sum	pointer
=	O
mixed_string_concat_free1	function
(	O
sum	pointer
,	O
token3	struct
.	O
mixed_string	struct
)	O
;	O
phase6_unget	function
(	O
&	O
token_after	struct
)	O
;	O
free_token	function
(	O
&	O
token3	struct
)	O
;	O
free_token	function
(	O
&	O
token2	struct
)	O
;	O
continue	O
;	O
}	O
phase6_unget	function
(	O
&	O
token_after	struct
)	O
;	O
}	O
phase6_unget	function
(	O
&	O
token3	struct
)	O
;	O
}	O
phase6_unget	function
(	O
&	O
token2	struct
)	O
;	O
break	O
;	O
}	O
tp	pointer
->	O
mixed_string	struct
=	O
sum	pointer
;	O
}	O
}	O
static	O
void	O
phase7_unget	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
type	char
!=	O
token_type_eof	int
)	O
{	O
if	O
(	O
phase7_pushback_length	int
==	O
SIZEOF	O
(	O
phase7_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase7_pushback	array
[	O
phase7_pushback_length	int
++	O
]	O
=	O
*	O
tp	pointer
;	O
}	O
}	O
static	O
void	O
x_csharp_lex	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
phase7_get	function
(	O
tp	pointer
)	O
;	O
}	O
static	O
void	O
x_csharp_unlex	function
(	O
token_ty	struct
*	O
tp	pointer
)	O
{	O
phase7_unget	function
(	O
tp	pointer
)	O
;	O
}	O
static	O
flag_context_list_table_ty	struct
*	O
flag_context_list_table	pointer
;	O
static	O
bool	bool
extract_parenthesized	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
token_type_ty	enum
terminator	char
,	O
flag_context_ty	struct
outer_context	struct
,	O
flag_context_list_iterator_ty	struct
context_iter	struct
,	O
struct	O
arglist_parser	struct
*	O
argparser	pointer
)	O
{	O
int	O
arg	int
=	O
1	int
;	O
int	O
state	pointer
;	O
const	O
struct	O
callshapes	struct
*	O
next_shapes	pointer
=	O
NULL	O
;	O
flag_context_list_iterator_ty	struct
next_context_iter	struct
=	O
passthrough_context_list_iterator	struct
;	O
flag_context_ty	struct
inner_context	struct
=	O
inherited_context	function
(	O
outer_context	struct
,	O
flag_context_list_iterator_advance	function
(	O
&	O
context_iter	struct
)	O
)	O
;	O
state	pointer
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token	struct
;	O
x_csharp_lex	function
(	O
&	O
token	struct
)	O
;	O
switch	O
(	O
token	struct
.	O
type	char
)	O
{	O
case	O
token_type_symbol	int
:	O
{	O
char	O
*	O
sum	pointer
=	O
token	struct
.	O
string	pointer
;	O
size_t	long
sum_len	long
=	O
strlen	function
(	O
sum	pointer
)	O
;	O
const	O
char	O
*	O
dottedname	pointer
;	O
flag_context_list_ty	struct
*	O
context_list	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token2	struct
;	O
x_csharp_lex	function
(	O
&	O
token2	struct
)	O
;	O
if	O
(	O
token2	struct
.	O
type	char
==	O
token_type_dot	int
)	O
{	O
token_ty	struct
token3	struct
;	O
x_csharp_lex	function
(	O
&	O
token3	struct
)	O
;	O
if	O
(	O
token3	struct
.	O
type	char
==	O
token_type_symbol	int
)	O
{	O
char	O
*	O
addend	pointer
=	O
token3	struct
.	O
string	pointer
;	O
size_t	long
addend_len	long
=	O
strlen	function
(	O
addend	pointer
)	O
;	O
sum	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
sum	pointer
,	O
sum_len	long
+	O
1	int
+	O
addend_len	long
+	O
1	int
)	O
;	O
sum	pointer
[	O
sum_len	long
]	O
=	O
'.'	O
;	O
memcpy	function
(	O
sum	pointer
+	O
sum_len	long
+	O
1	int
,	O
addend	pointer
,	O
addend_len	long
+	O
1	int
)	O
;	O
sum_len	long
+=	O
1	int
+	O
addend_len	long
;	O
free_token	function
(	O
&	O
token3	struct
)	O
;	O
free_token	function
(	O
&	O
token2	struct
)	O
;	O
continue	O
;	O
}	O
x_csharp_unlex	function
(	O
&	O
token3	struct
)	O
;	O
}	O
x_csharp_unlex	function
(	O
&	O
token2	struct
)	O
;	O
break	O
;	O
}	O
for	O
(	O
dottedname	pointer
=	O
sum	pointer
;	O
;	O
)	O
{	O
void	O
*	O
keyword_value	pointer
;	O
if	O
(	O
hash_find_entry	function
(	O
&	O
keywords	struct
,	O
dottedname	pointer
,	O
strlen	function
(	O
dottedname	pointer
)	O
,	O
&	O
keyword_value	pointer
)	O
==	O
0	int
)	O
{	O
next_shapes	pointer
=	O
(	O
const	O
struct	O
callshapes	struct
*	O
)	O
keyword_value	pointer
;	O
state	pointer
=	O
1	int
;	O
break	O
;	O
}	O
dottedname	pointer
=	O
strchr	function
(	O
dottedname	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
dottedname	pointer
==	O
NULL	O
)	O
{	O
state	pointer
=	O
0	int
;	O
break	O
;	O
}	O
dottedname	pointer
++	O
;	O
}	O
for	O
(	O
dottedname	pointer
=	O
sum	pointer
;	O
;	O
)	O
{	O
context_list	pointer
=	O
flag_context_list_table_lookup	function
(	O
flag_context_list_table	pointer
,	O
dottedname	pointer
,	O
strlen	function
(	O
dottedname	pointer
)	O
)	O
;	O
if	O
(	O
context_list	pointer
!=	O
NULL	O
)	O
break	O
;	O
dottedname	pointer
=	O
strchr	function
(	O
dottedname	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
dottedname	pointer
==	O
NULL	O
)	O
break	O
;	O
dottedname	pointer
++	O
;	O
}	O
next_context_iter	struct
=	O
flag_context_list_iterator	function
(	O
context_list	pointer
)	O
;	O
free	function
(	O
sum	pointer
)	O
;	O
continue	O
;	O
}	O
case	O
token_type_lparen	int
:	O
if	O
(	O
extract_parenthesized	function
(	O
mlp	pointer
,	O
token_type_rparen	int
,	O
inner_context	struct
,	O
next_context_iter	struct
,	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
state	pointer
?	O
next_shapes	pointer
:	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_rparen	int
:	O
if	O
(	O
terminator	char
==	O
token_type_rparen	int
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
terminator	char
==	O
token_type_rbrace	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: ')' found where '}' was expected"	pointer
)	O
,	O
logical_file_name	pointer
,	O
token	struct
.	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_lbrace	int
:	O
if	O
(	O
extract_parenthesized	function
(	O
mlp	pointer
,	O
token_type_rbrace	int
,	O
null_context	struct
,	O
null_context_list_iterator	struct
,	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
NULL	O
)	O
)	O
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_rbrace	int
:	O
if	O
(	O
terminator	char
==	O
token_type_rbrace	int
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
terminator	char
==	O
token_type_rparen	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: '}' found where ')' was expected"	pointer
)	O
,	O
logical_file_name	pointer
,	O
token	struct
.	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_comma	int
:	O
arg	int
++	O
;	O
inner_context	struct
=	O
inherited_context	function
(	O
outer_context	struct
,	O
flag_context_list_iterator_advance	function
(	O
&	O
context_iter	struct
)	O
)	O
;	O
next_context_iter	struct
=	O
passthrough_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_string_literal	int
:	O
{	O
lex_pos_ty	struct
pos	struct
;	O
pos	struct
.	O
file_name	pointer
=	O
logical_file_name	pointer
;	O
pos	struct
.	O
line_number	long
=	O
token	struct
.	O
line_number	long
;	O
if	O
(	O
extract_all	bool
)	O
{	O
char	O
*	O
string	pointer
=	O
mixed_string_contents	function
(	O
token	struct
.	O
mixed_string	struct
)	O
;	O
mixed_string_free	function
(	O
token	struct
.	O
mixed_string	struct
)	O
;	O
remember_a_message	function
(	O
mlp	pointer
,	O
NULL	O
,	O
string	pointer
,	O
true	int
,	O
inner_context	struct
,	O
&	O
pos	struct
,	O
NULL	O
,	O
token	struct
.	O
comment	pointer
,	O
true	int
)	O
;	O
}	O
else	O
arglist_parser_remember	function
(	O
argparser	pointer
,	O
arg	int
,	O
token	struct
.	O
mixed_string	struct
,	O
inner_context	struct
,	O
pos	struct
.	O
file_name	pointer
,	O
pos	struct
.	O
line_number	long
,	O
token	struct
.	O
comment	pointer
,	O
true	int
)	O
;	O
}	O
drop_reference	function
(	O
token	struct
.	O
comment	pointer
)	O
;	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
case	O
token_type_eof	int
:	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
true	int
;	O
case	O
token_type_dot	int
:	O
case	O
token_type_number	int
:	O
case	O
token_type_plus	int
:	O
case	O
token_type_other	int
:	O
next_context_iter	struct
=	O
null_context_list_iterator	struct
;	O
state	pointer
=	O
0	int
;	O
continue	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
void	O
extract_csharp	function
(	O
FILE	struct
*	O
f	pointer
,	O
const	O
char	O
*	O
real_filename	pointer
,	O
const	O
char	O
*	O
logical_filename	pointer
,	O
flag_context_list_table_ty	struct
*	O
flag_table	pointer
,	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
0	int
]	O
->	O
messages	pointer
;	O
fp	pointer
=	O
f	pointer
;	O
real_file_name	pointer
=	O
real_filename	pointer
;	O
logical_file_name	pointer
=	O
xstrdup	function
(	O
logical_filename	pointer
)	O
;	O
line_number	long
=	O
1	int
;	O
lexical_context	enum
=	O
lc_outside	int
;	O
logical_line_number	int
=	O
1	int
;	O
last_comment_line	int
=	O
-	O
1	int
;	O
last_non_comment_line	int
=	O
-	O
1	int
;	O
flag_context_list_table	pointer
=	O
flag_table	pointer
;	O
init_keywords	function
(	O
)	O
;	O
while	O
(	O
!	O
extract_parenthesized	function
(	O
mlp	pointer
,	O
token_type_eof	int
,	O
null_context	struct
,	O
null_context_list_iterator	struct
,	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
NULL	O
)	O
)	O
)	O
;	O
fp	pointer
=	O
NULL	O
;	O
real_file_name	pointer
=	O
NULL	O
;	O
logical_file_name	pointer
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
}	O
