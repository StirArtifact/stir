char	O
*	O
pop3d_apopuser	function
(	O
const	O
char	O
*	O
user	pointer
)	O
{	O
char	O
*	O
password	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
{	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
size	long
=	O
0	int
,	O
n	long
;	O
size_t	long
ulen	long
;	O
mu_stream_t	pointer
apop_stream	pointer
;	O
rc	int
=	O
mu_file_safety_check	function
(	O
apop_database_name	pointer
,	O
apop_database_safety	int
,	O
apop_database_owner	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_ERROR	O
,	O
_	O
(	O
"APOP file %s fails safety check: %s"	pointer
)	O
,	O
apop_database_name	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
apop_stream	pointer
,	O
apop_database_name	pointer
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"unable to open APOP password file %s: %s"	pointer
)	O
,	O
apop_database_name	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
ulen	long
=	O
strlen	function
(	O
user	pointer
)	O
;	O
while	O
(	O
mu_stream_getline	function
(	O
apop_stream	pointer
,	O
&	O
buf	pointer
,	O
&	O
size	long
,	O
&	O
n	long
)	O
==	O
0	int
&&	O
n	long
>	O
0	int
)	O
{	O
char	O
*	O
p	pointer
,	O
*	O
start	long
=	O
mu_str_stripws	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
!	O
*	O
start	long
||	O
*	O
start	long
==	O
'#'	O
)	O
continue	O
;	O
p	pointer
=	O
strchr	function
(	O
start	long
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
continue	O
;	O
if	O
(	O
p	pointer
-	O
start	long
==	O
ulen	long
&&	O
memcmp	function
(	O
user	pointer
,	O
start	long
,	O
ulen	long
)	O
==	O
0	int
)	O
{	O
p	pointer
=	O
mu_str_skip_class	function
(	O
p	pointer
+	O
1	int
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
password	pointer
=	O
mu_strdup	function
(	O
p	pointer
)	O
;	O
break	O
;	O
}	O
}	O
free	function
(	O
buf	pointer
)	O
;	O
mu_stream_unref	function
(	O
apop_stream	pointer
)	O
;	O
return	O
password	pointer
;	O
}	O
}	O
int	O
pop3d_apop	function
(	O
char	O
*	O
arg	pointer
,	O
struct	O
pop3d_session	struct
*	O
sess	pointer
)	O
{	O
char	O
*	O
p	pointer
,	O
*	O
password	pointer
,	O
*	O
user_digest	pointer
,	O
*	O
user	pointer
;	O
struct	O
mu_md5_ctx	struct
md5context	struct
;	O
unsigned	O
char	O
md5digest	array
[	O
16	int
]	O
;	O
char	O
buf	pointer
[	O
2	int
*	O
16	int
+	O
1	int
]	O
;	O
size_t	long
i	long
;	O
if	O
(	O
state	pointer
!=	O
AUTHORIZATION	int
)	O
return	O
ERR_WRONG_STATE	int
;	O
if	O
(	O
strlen	function
(	O
arg	pointer
)	O
==	O
0	int
)	O
return	O
ERR_BAD_ARGS	int
;	O
pop3d_parse_command	function
(	O
arg	pointer
,	O
&	O
user	pointer
,	O
&	O
user_digest	pointer
)	O
;	O
password	pointer
=	O
pop3d_apopuser	function
(	O
user	pointer
)	O
;	O
if	O
(	O
password	pointer
==	O
NULL	O
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"password for `%s' not found in the database"	pointer
)	O
,	O
user	pointer
)	O
;	O
return	O
ERR_BAD_LOGIN	int
;	O
}	O
mu_md5_init_ctx	function
(	O
&	O
md5context	struct
)	O
;	O
mu_md5_process_bytes	function
(	O
md5shared	pointer
,	O
strlen	function
(	O
md5shared	pointer
)	O
,	O
&	O
md5context	struct
)	O
;	O
mu_md5_process_bytes	function
(	O
password	pointer
,	O
strlen	function
(	O
password	pointer
)	O
,	O
&	O
md5context	struct
)	O
;	O
free	function
(	O
password	pointer
)	O
;	O
mu_md5_finish_ctx	function
(	O
&	O
md5context	struct
,	O
md5digest	array
)	O
;	O
for	O
(	O
i	long
=	O
0	int
,	O
p	pointer
=	O
buf	pointer
;	O
i	long
<	O
16	int
;	O
i	long
++	O
,	O
p	pointer
+=	O
2	int
)	O
sprintf	function
(	O
p	pointer
,	O
"%02x"	pointer
,	O
md5digest	array
[	O
i	long
]	O
)	O
;	O
*	O
p	pointer
=	O
0	int
;	O
if	O
(	O
strcmp	function
(	O
user_digest	pointer
,	O
buf	pointer
)	O
)	O
{	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
_	O
(	O
"APOP failed for `%s'"	pointer
)	O
,	O
user	pointer
)	O
;	O
return	O
ERR_BAD_LOGIN	int
;	O
}	O
auth_data	pointer
=	O
mu_get_auth_by_name	function
(	O
user	pointer
)	O
;	O
if	O
(	O
auth_data	pointer
==	O
NULL	O
)	O
return	O
ERR_BAD_LOGIN	int
;	O
return	O
pop3d_begin_session	function
(	O
)	O
;	O
}	O
