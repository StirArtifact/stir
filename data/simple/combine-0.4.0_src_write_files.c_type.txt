int	O
df_write_output	function
(	O
stream	pointer
,	O
buffer	pointer
,	O
bufferpos	pointer
,	O
buffersiz	pointer
,	O
string	pointer
,	O
record_delimiter	pointer
,	O
end_record	int
,	O
end_file	int
)	O
FILE	struct
*	O
stream	pointer
;	O
unsigned	O
char	O
*	O
*	O
buffer	pointer
;	O
size_t	long
*	O
bufferpos	pointer
;	O
size_t	long
*	O
buffersiz	pointer
;	O
STRINGTYPE	O
*	O
string	pointer
;	O
STRINGTYPE	O
*	O
record_delimiter	pointer
;	O
int	O
end_record	int
;	O
int	O
end_file	int
;	O
{	O
STRINGTYPE	O
temp_string	struct
;	O
STRINGTYPE	O
buffer_desc	struct
;	O
int	O
return_code	int
;	O
if	O
(	O
*	O
buffer	pointer
==	O
NULL	O
)	O
{	O
*	O
buffer	pointer
=	O
malloc	function
(	O
DF_BUFFER_INCREMENT	int
)	O
;	O
if	O
(	O
*	O
buffer	pointer
==	O
NULL	O
)	O
FATAL_ERROR	O
(	O
_	O
(	O
"unable to allocate memory"	pointer
)	O
)	O
;	O
*	O
buffersiz	pointer
=	O
DF_BUFFER_INCREMENT	int
;	O
}	O
if	O
(	O
string	pointer
!=	O
NULL	O
)	O
{	O
temp_string	struct
.	O
string	pointer
=	O
string	pointer
->	O
string	pointer
;	O
temp_string	struct
.	O
length	long
=	O
string	pointer
->	O
length	long
;	O
buffer_desc	struct
.	O
string	pointer
=	O
*	O
buffer	pointer
+	O
*	O
bufferpos	pointer
;	O
buffer_desc	struct
.	O
length	long
=	O
*	O
buffersiz	pointer
-	O
*	O
bufferpos	pointer
;	O
while	O
(	O
*	O
bufferpos	pointer
+	O
temp_string	struct
.	O
length	long
>=	O
*	O
buffersiz	pointer
)	O
{	O
memmove	function
(	O
buffer_desc	struct
.	O
string	pointer
,	O
temp_string	struct
.	O
string	pointer
,	O
buffer_desc	struct
.	O
length	long
)	O
;	O
return_code	int
=	O
fwrite	function
(	O
*	O
buffer	pointer
,	O
1	int
,	O
*	O
buffersiz	pointer
,	O
stream	pointer
)	O
;	O
if	O
(	O
return_code	int
!=	O
*	O
buffersiz	pointer
)	O
FATAL_PERROR	O
(	O
_	O
(	O
"File"	pointer
)	O
)	O
;	O
temp_string	struct
.	O
string	pointer
+=	O
buffer_desc	struct
.	O
length	long
;	O
temp_string	struct
.	O
length	long
-=	O
buffer_desc	struct
.	O
length	long
;	O
*	O
bufferpos	pointer
=	O
0	int
;	O
buffer_desc	struct
.	O
string	pointer
=	O
*	O
buffer	pointer
;	O
buffer_desc	struct
.	O
length	long
=	O
*	O
buffersiz	pointer
;	O
}	O
if	O
(	O
temp_string	struct
.	O
length	long
>	O
0	int
)	O
{	O
memmove	function
(	O
buffer_desc	struct
.	O
string	pointer
,	O
temp_string	struct
.	O
string	pointer
,	O
temp_string	struct
.	O
length	long
)	O
;	O
*	O
bufferpos	pointer
+=	O
temp_string	struct
.	O
length	long
;	O
}	O
}	O
if	O
(	O
end_record	int
&&	O
record_delimiter	pointer
!=	O
NULL	O
)	O
{	O
temp_string	struct
.	O
string	pointer
=	O
record_delimiter	pointer
->	O
string	pointer
;	O
temp_string	struct
.	O
length	long
=	O
record_delimiter	pointer
->	O
length	long
;	O
buffer_desc	struct
.	O
string	pointer
=	O
*	O
buffer	pointer
+	O
*	O
bufferpos	pointer
;	O
buffer_desc	struct
.	O
length	long
=	O
*	O
buffersiz	pointer
-	O
*	O
bufferpos	pointer
;	O
while	O
(	O
*	O
bufferpos	pointer
+	O
temp_string	struct
.	O
length	long
>	O
*	O
buffersiz	pointer
)	O
{	O
memmove	function
(	O
buffer_desc	struct
.	O
string	pointer
,	O
temp_string	struct
.	O
string	pointer
,	O
buffer_desc	struct
.	O
length	long
)	O
;	O
return_code	int
=	O
fwrite	function
(	O
*	O
buffer	pointer
,	O
1	int
,	O
*	O
buffersiz	pointer
,	O
stream	pointer
)	O
;	O
if	O
(	O
return_code	int
!=	O
*	O
buffersiz	pointer
)	O
FATAL_PERROR	O
(	O
_	O
(	O
"File"	pointer
)	O
)	O
;	O
temp_string	struct
.	O
string	pointer
+=	O
buffer_desc	struct
.	O
length	long
;	O
temp_string	struct
.	O
length	long
-=	O
buffer_desc	struct
.	O
length	long
;	O
*	O
bufferpos	pointer
=	O
0	int
;	O
buffer_desc	struct
.	O
string	pointer
=	O
*	O
buffer	pointer
;	O
buffer_desc	struct
.	O
length	long
=	O
*	O
buffersiz	pointer
;	O
}	O
if	O
(	O
temp_string	struct
.	O
length	long
>	O
0	int
)	O
{	O
memmove	function
(	O
buffer_desc	struct
.	O
string	pointer
,	O
temp_string	struct
.	O
string	pointer
,	O
temp_string	struct
.	O
length	long
)	O
;	O
*	O
bufferpos	pointer
+=	O
temp_string	struct
.	O
length	long
;	O
}	O
}	O
if	O
(	O
end_file	int
&&	O
*	O
bufferpos	pointer
>	O
0	int
)	O
{	O
return_code	int
=	O
fwrite	function
(	O
*	O
buffer	pointer
,	O
1	int
,	O
*	O
bufferpos	pointer
,	O
stream	pointer
)	O
;	O
if	O
(	O
return_code	int
!=	O
*	O
bufferpos	pointer
)	O
FATAL_PERROR	O
(	O
_	O
(	O
"File"	pointer
)	O
)	O
;	O
}	O
return	O
EXIT_SUCCESS	int
;	O
}	O
int	O
df_write_field	function
(	O
stream	pointer
,	O
buffer	pointer
,	O
bufferpos	pointer
,	O
buffersiz	pointer
,	O
string	pointer
,	O
field_delimiter	pointer
,	O
first_written	pointer
,	O
substitute_spaces	int
,	O
suppress_empty	int
)	O
FILE	struct
*	O
stream	pointer
;	O
unsigned	O
char	O
*	O
*	O
buffer	pointer
;	O
size_t	long
*	O
bufferpos	pointer
;	O
size_t	long
*	O
buffersiz	pointer
;	O
STRINGTYPE	O
*	O
string	pointer
;	O
STRINGTYPE	O
*	O
field_delimiter	pointer
;	O
int	O
*	O
first_written	pointer
;	O
int	O
substitute_spaces	int
;	O
int	O
suppress_empty	int
;	O
{	O
int	O
return_code	int
;	O
STRINGTYPE	O
spaces	struct
;	O
if	O
(	O
*	O
first_written	pointer
&&	O
field_delimiter	pointer
!=	O
NULL	O
&&	O
(	O
!	O
suppress_empty	int
||	O
string	pointer
->	O
length	long
>	O
0	int
||	O
substitute_spaces	int
>	O
0	int
)	O
)	O
{	O
return_code	int
=	O
df_write_output	function
(	O
stream	pointer
,	O
buffer	pointer
,	O
bufferpos	pointer
,	O
buffersiz	pointer
,	O
field_delimiter	pointer
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
return	O
return_code	int
;	O
}	O
if	O
(	O
substitute_spaces	int
>	O
100	int
)	O
FATAL_ERROR	O
(	O
_	O
(	O
"the programmer was too lazy to substitute spaces for fields longer than 100 bytes"	pointer
)	O
)	O
;	O
if	O
(	O
substitute_spaces	int
==	O
0	int
)	O
{	O
return_code	int
=	O
df_write_output	function
(	O
stream	pointer
,	O
buffer	pointer
,	O
bufferpos	pointer
,	O
buffersiz	pointer
,	O
string	pointer
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
return	O
return_code	int
;	O
}	O
else	O
if	O
(	O
substitute_spaces	int
==	O
-	O
1	int
)	O
return	O
EXIT_SUCCESS	int
;	O
else	O
{	O
spaces	struct
.	O
length	long
=	O
substitute_spaces	int
;	O
spaces	struct
.	O
string	pointer
=	O
"                                                                                           "	pointer
;	O
return_code	int
=	O
df_write_output	function
(	O
stream	pointer
,	O
buffer	pointer
,	O
bufferpos	pointer
,	O
buffersiz	pointer
,	O
&	O
spaces	struct
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
return	O
return_code	int
;	O
}	O
*	O
first_written	pointer
=	O
1	int
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
