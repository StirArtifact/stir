static	O
void	O
compute_directory_size	function
(	O
blksize_t	long
block_size	int
,	O
int	O
*	O
ret_dir_size	pointer
,	O
int	O
*	O
ret_dir_bits	pointer
)	O
{	O
int	O
dir_size	int
=	O
8	int
*	O
sizeof	O
(	O
off_t	long
)	O
;	O
int	O
dir_bits	int
=	O
3	int
;	O
while	O
(	O
dir_size	int
<	O
block_size	int
&&	O
dir_bits	int
<	O
GDBM_HASH_BITS	int
-	O
3	int
)	O
{	O
dir_size	int
<<=	O
1	int
;	O
dir_bits	int
++	O
;	O
}	O
*	O
ret_dir_size	pointer
=	O
dir_size	int
;	O
*	O
ret_dir_bits	pointer
=	O
dir_bits	int
;	O
}	O
static	O
inline	O
int	O
bucket_element_count	function
(	O
size_t	long
bucket_size	int
)	O
{	O
return	O
(	O
bucket_size	int
-	O
sizeof	O
(	O
hash_bucket	struct
)	O
)	O
/	O
sizeof	O
(	O
bucket_element	struct
)	O
+	O
1	int
;	O
}	O
static	O
int	O
avail_comp	function
(	O
void	O
const	O
*	O
a	array
,	O
void	O
const	O
*	O
b	array
)	O
{	O
avail_elem	struct
const	O
*	O
ava	pointer
=	O
a	array
;	O
avail_elem	struct
const	O
*	O
avb	pointer
=	O
b	array
;	O
return	O
ava	pointer
->	O
av_size	int
-	O
avb	pointer
->	O
av_size	int
;	O
}	O
int	O
gdbm_avail_table_valid_p	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
avail_elem	struct
*	O
av	pointer
,	O
int	O
count	int
)	O
{	O
off_t	long
prev	long
=	O
0	int
;	O
int	O
i	int
;	O
int	O
needs_sorting	int
=	O
0	int
;	O
avail_elem	struct
*	O
p	pointer
=	O
av	pointer
;	O
prev	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
count	int
;	O
i	int
++	O
,	O
p	pointer
++	O
)	O
{	O
if	O
(	O
!	O
(	O
p	pointer
->	O
av_adr	long
>=	O
dbf	pointer
->	O
header	pointer
->	O
bucket_size	int
&&	O
p	pointer
->	O
av_adr	long
+	O
p	pointer
->	O
av_size	int
<=	O
dbf	pointer
->	O
header	pointer
->	O
next_block	long
)	O
)	O
return	O
0	int
;	O
if	O
(	O
p	pointer
->	O
av_size	int
<	O
prev	long
)	O
needs_sorting	int
=	O
1	int
;	O
prev	long
=	O
p	pointer
->	O
av_size	int
;	O
}	O
if	O
(	O
needs_sorting	int
&&	O
dbf	pointer
->	O
read_write	int
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
,	O
"%s"	pointer
,	O
"restoring sort order"	pointer
)	O
;	O
qsort	function
(	O
av	pointer
,	O
count	int
,	O
sizeof	O
av	pointer
[	O
0	int
]	O
,	O
avail_comp	function
)	O
;	O
}	O
return	O
1	int
;	O
}	O
int	O
gdbm_avail_block_validate	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
avail_block	struct
*	O
avblk	pointer
)	O
{	O
if	O
(	O
!	O
(	O
gdbm_avail_block_valid_p	function
(	O
avblk	pointer
)	O
&&	O
gdbm_avail_table_valid_p	function
(	O
dbf	pointer
,	O
avblk	pointer
->	O
av_table	array
,	O
avblk	pointer
->	O
count	int
)	O
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_BAD_AVAIL	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
gdbm_bucket_avail_table_validate	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
hash_bucket	struct
*	O
bucket	pointer
)	O
{	O
if	O
(	O
!	O
(	O
bucket	pointer
->	O
av_count	int
>=	O
0	int
&&	O
bucket	pointer
->	O
av_count	int
<=	O
BUCKET_AVAIL	int
&&	O
gdbm_avail_table_valid_p	function
(	O
dbf	pointer
,	O
bucket	pointer
->	O
bucket_avail	array
,	O
bucket	pointer
->	O
av_count	int
)	O
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_BAD_AVAIL	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
validate_header	function
(	O
gdbm_file_header	struct
const	O
*	O
hdr	pointer
,	O
struct	O
stat	struct
const	O
*	O
st	pointer
)	O
{	O
int	O
dir_size	int
,	O
dir_bits	int
;	O
int	O
result	int
=	O
GDBM_NO_ERROR	int
;	O
if	O
(	O
hdr	pointer
->	O
header_magic	int
!=	O
GDBM_MAGIC	O
)	O
{	O
switch	O
(	O
hdr	pointer
->	O
header_magic	int
)	O
{	O
case	O
GDBM_OMAGIC	int
:	O
break	O
;	O
case	O
GDBM_OMAGIC_SWAP	int
:	O
case	O
GDBM_MAGIC32_SWAP	int
:	O
case	O
GDBM_MAGIC64_SWAP	int
:	O
return	O
GDBM_BYTE_SWAPPED	int
;	O
case	O
GDBM_MAGIC32	int
:	O
case	O
GDBM_MAGIC64	int
:	O
return	O
GDBM_BAD_FILE_OFFSET	int
;	O
default	O
:	O
return	O
GDBM_BAD_MAGIC_NUMBER	int
;	O
}	O
}	O
if	O
(	O
!	O
(	O
hdr	pointer
->	O
block_size	int
>	O
0	int
&&	O
hdr	pointer
->	O
block_size	int
>	O
sizeof	O
(	O
gdbm_file_header	struct
)	O
&&	O
hdr	pointer
->	O
block_size	int
-	O
sizeof	O
(	O
gdbm_file_header	struct
)	O
>=	O
sizeof	O
(	O
hdr	pointer
->	O
avail	struct
.	O
av_table	array
[	O
0	int
]	O
)	O
)	O
)	O
{	O
return	O
GDBM_BLOCK_SIZE_ERROR	int
;	O
}	O
if	O
(	O
hdr	pointer
->	O
next_block	long
<	O
st	pointer
->	O
st_size	long
)	O
result	int
=	O
GDBM_NEED_RECOVERY	int
;	O
if	O
(	O
!	O
(	O
hdr	pointer
->	O
dir	long
>	O
0	int
&&	O
hdr	pointer
->	O
dir	long
<	O
st	pointer
->	O
st_size	long
&&	O
hdr	pointer
->	O
dir_size	int
>	O
0	int
&&	O
hdr	pointer
->	O
dir	long
+	O
hdr	pointer
->	O
dir_size	int
<	O
st	pointer
->	O
st_size	long
)	O
)	O
return	O
GDBM_BAD_HEADER	int
;	O
compute_directory_size	function
(	O
hdr	pointer
->	O
block_size	int
,	O
&	O
dir_size	int
,	O
&	O
dir_bits	int
)	O
;	O
if	O
(	O
!	O
(	O
hdr	pointer
->	O
dir_size	int
>=	O
dir_size	int
)	O
)	O
return	O
GDBM_BAD_HEADER	int
;	O
compute_directory_size	function
(	O
hdr	pointer
->	O
dir_size	int
,	O
&	O
dir_size	int
,	O
&	O
dir_bits	int
)	O
;	O
if	O
(	O
hdr	pointer
->	O
dir_bits	int
!=	O
dir_bits	int
)	O
return	O
GDBM_BAD_HEADER	int
;	O
if	O
(	O
!	O
(	O
hdr	pointer
->	O
bucket_size	int
>	O
sizeof	O
(	O
hash_bucket	struct
)	O
)	O
)	O
return	O
GDBM_BAD_HEADER	int
;	O
if	O
(	O
hdr	pointer
->	O
bucket_elems	int
!=	O
bucket_element_count	function
(	O
hdr	pointer
->	O
bucket_size	int
)	O
)	O
return	O
GDBM_BAD_HEADER	int
;	O
if	O
(	O
(	O
(	O
hdr	pointer
->	O
block_size	int
-	O
sizeof	O
(	O
gdbm_file_header	struct
)	O
)	O
/	O
sizeof	O
(	O
avail_elem	struct
)	O
+	O
1	int
)	O
!=	O
hdr	pointer
->	O
avail	struct
.	O
size	int
)	O
return	O
GDBM_BAD_HEADER	int
;	O
return	O
result	int
;	O
}	O
int	O
_gdbm_validate_header	function
(	O
GDBM_FILE	pointer
dbf	pointer
)	O
{	O
struct	O
stat	struct
file_stat	struct
;	O
if	O
(	O
fstat	function
(	O
dbf	pointer
->	O
desc	int
,	O
&	O
file_stat	struct
)	O
)	O
return	O
GDBM_FILE_STAT_ERROR	int
;	O
return	O
validate_header	function
(	O
dbf	pointer
->	O
header	pointer
,	O
&	O
file_stat	struct
)	O
;	O
}	O
static	O
inline	O
int	O
_gdbm_ftruncate	function
(	O
GDBM_FILE	pointer
dbf	pointer
)	O
{	O
return	O
ftruncate	function
(	O
dbf	pointer
->	O
desc	int
,	O
0	int
)	O
;	O
}	O
GDBM_FILE	pointer
gdbm_fd_open	function
(	O
int	O
fd	int
,	O
const	O
char	O
*	O
file_name	pointer
,	O
int	O
block_size	int
,	O
int	O
flags	int
,	O
void	O
(	O
*	O
fatal_func	pointer
)	O
(	O
const	O
char	O
*	O
)	O
)	O
{	O
GDBM_FILE	pointer
dbf	pointer
;	O
struct	O
stat	struct
file_stat	struct
;	O
off_t	long
file_pos	long
;	O
int	O
index	function
;	O
gdbm_set_errno	function
(	O
NULL	O
,	O
GDBM_NO_ERROR	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
fstat	function
(	O
fd	int
,	O
&	O
file_stat	struct
)	O
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
SAVE_ERRNO	O
(	O
close	function
(	O
fd	int
)	O
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_FILE_STAT_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
dbf	pointer
)	O
)	O
;	O
if	O
(	O
dbf	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
SAVE_ERRNO	O
(	O
close	function
(	O
fd	int
)	O
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	pointer
->	O
desc	int
=	O
fd	int
;	O
dbf	pointer
->	O
dir	long
=	O
NULL	O
;	O
dbf	pointer
->	O
bucket	pointer
=	O
NULL	O
;	O
dbf	pointer
->	O
header	pointer
=	O
NULL	O
;	O
dbf	pointer
->	O
bucket_cache	pointer
=	O
NULL	O
;	O
dbf	pointer
->	O
cache_size	long
=	O
0	int
;	O
dbf	pointer
->	O
memory_mapping	int
=	O
FALSE	int
;	O
dbf	pointer
->	O
mapped_size_max	long
=	O
SIZE_T_MAX	O
;	O
dbf	pointer
->	O
mapped_region	pointer
=	O
NULL	O
;	O
dbf	pointer
->	O
mapped_size	long
=	O
0	int
;	O
dbf	pointer
->	O
mapped_pos	long
=	O
0	int
;	O
dbf	pointer
->	O
mapped_off	long
=	O
0	int
;	O
dbf	pointer
->	O
name	pointer
=	O
strdup	function
(	O
file_name	pointer
)	O
;	O
if	O
(	O
dbf	pointer
->	O
name	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
close	function
(	O
fd	int
)	O
;	O
free	function
(	O
dbf	pointer
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	pointer
->	O
fatal_err	pointer
=	O
fatal_func	pointer
;	O
dbf	pointer
->	O
fast_write	int
=	O
TRUE	int
;	O
dbf	pointer
->	O
file_locking	int
=	O
TRUE	int
;	O
dbf	pointer
->	O
central_free	int
=	O
FALSE	int
;	O
dbf	pointer
->	O
coalesce_blocks	int
=	O
FALSE	int
;	O
dbf	pointer
->	O
need_recovery	int
=	O
FALSE	int
;	O
dbf	pointer
->	O
last_error	int
=	O
GDBM_NO_ERROR	int
;	O
dbf	pointer
->	O
last_syserror	int
=	O
0	int
;	O
dbf	pointer
->	O
last_errstr	pointer
=	O
NULL	O
;	O
if	O
(	O
flags	int
&	O
GDBM_SYNC	int
)	O
{	O
dbf	pointer
->	O
fast_write	int
=	O
FALSE	int
;	O
}	O
if	O
(	O
flags	int
&	O
GDBM_NOLOCK	int
)	O
{	O
dbf	pointer
->	O
file_locking	int
=	O
FALSE	int
;	O
}	O
dbf	pointer
->	O
cloexec	int
=	O
!	O
!	O
(	O
flags	int
&	O
GDBM_CLOEXEC	int
)	O
;	O
if	O
(	O
(	O
(	O
flags	int
&	O
GDBM_OPENMASK	int
)	O
==	O
GDBM_READER	int
)	O
&&	O
(	O
file_stat	struct
.	O
st_size	long
==	O
0	int
)	O
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
close	function
(	O
dbf	pointer
->	O
desc	int
)	O
;	O
free	function
(	O
dbf	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
dbf	pointer
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_EMPTY_DATABASE	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	pointer
->	O
read_write	int
=	O
(	O
flags	int
&	O
GDBM_OPENMASK	int
)	O
;	O
if	O
(	O
dbf	pointer
->	O
file_locking	int
)	O
{	O
if	O
(	O
_gdbm_lock_file	function
(	O
dbf	pointer
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
close	function
(	O
dbf	pointer
->	O
desc	int
)	O
;	O
free	function
(	O
dbf	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
dbf	pointer
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
(	O
flags	int
&	O
GDBM_OPENMASK	int
)	O
==	O
GDBM_READER	int
?	O
GDBM_CANT_BE_READER	int
:	O
GDBM_CANT_BE_WRITER	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
(	O
flags	int
&	O
GDBM_OPENMASK	int
)	O
==	O
GDBM_NEWDB	int
&&	O
file_stat	struct
.	O
st_size	long
!=	O
0	int
)	O
{	O
if	O
(	O
_gdbm_ftruncate	function
(	O
dbf	pointer
)	O
)	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	pointer
,	O
GDBM_FILE_TRUNCATE_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
}	O
else	O
if	O
(	O
fstat	function
(	O
dbf	pointer
->	O
desc	int
,	O
&	O
file_stat	struct
)	O
)	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	pointer
,	O
GDBM_FILE_STAT_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
}	O
if	O
(	O
gdbm_last_errno	function
(	O
dbf	pointer
)	O
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
close	function
(	O
dbf	pointer
->	O
desc	int
)	O
;	O
free	function
(	O
dbf	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
dbf	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
file_stat	struct
.	O
st_size	long
==	O
0	int
)	O
{	O
int	O
dir_size	int
,	O
dir_bits	int
;	O
if	O
(	O
block_size	int
<	O
GDBM_MIN_BLOCK_SIZE	int
)	O
{	O
block_size	int
=	O
STATBLKSIZE	O
(	O
file_stat	struct
)	O
;	O
flags	int
&=	O
~	O
GDBM_BSEXACT	int
;	O
}	O
compute_directory_size	function
(	O
block_size	int
,	O
&	O
dir_size	int
,	O
&	O
dir_bits	int
)	O
;	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
,	O
"%s: computed dir_size=%d, dir_bits=%d"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
dir_size	int
,	O
dir_bits	int
)	O
;	O
if	O
(	O
dir_size	int
!=	O
block_size	int
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_BSEXACT	int
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	function
(	O
dbf	pointer
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_BLOCK_SIZE_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
block_size	int
=	O
dir_size	int
;	O
}	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
,	O
"%s: block_size=%d"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
block_size	int
)	O
;	O
dbf	pointer
->	O
header	pointer
=	O
calloc	function
(	O
1	int
,	O
block_size	int
)	O
;	O
if	O
(	O
dbf	pointer
->	O
header	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	function
(	O
dbf	pointer
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	pointer
->	O
header	pointer
->	O
header_magic	int
=	O
GDBM_MAGIC	O
;	O
dbf	pointer
->	O
header	pointer
->	O
block_size	int
=	O
block_size	int
;	O
dbf	pointer
->	O
header	pointer
->	O
dir_size	int
=	O
dir_size	int
;	O
dbf	pointer
->	O
header	pointer
->	O
dir_bits	int
=	O
dir_bits	int
;	O
dbf	pointer
->	O
dir	long
=	O
(	O
off_t	long
*	O
)	O
malloc	function
(	O
dbf	pointer
->	O
header	pointer
->	O
dir_size	int
)	O
;	O
if	O
(	O
dbf	pointer
->	O
dir	long
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	function
(	O
dbf	pointer
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	pointer
->	O
header	pointer
->	O
dir	long
=	O
dbf	pointer
->	O
header	pointer
->	O
block_size	int
;	O
dbf	pointer
->	O
header	pointer
->	O
bucket_elems	int
=	O
bucket_element_count	function
(	O
dbf	pointer
->	O
header	pointer
->	O
block_size	int
)	O
;	O
dbf	pointer
->	O
header	pointer
->	O
bucket_size	int
=	O
dbf	pointer
->	O
header	pointer
->	O
block_size	int
;	O
dbf	pointer
->	O
bucket	pointer
=	O
calloc	function
(	O
1	int
,	O
dbf	pointer
->	O
header	pointer
->	O
bucket_size	int
)	O
;	O
if	O
(	O
dbf	pointer
->	O
bucket	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	function
(	O
dbf	pointer
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
_gdbm_new_bucket	function
(	O
dbf	pointer
,	O
dbf	pointer
->	O
bucket	pointer
,	O
0	int
)	O
;	O
dbf	pointer
->	O
bucket	pointer
->	O
av_count	int
=	O
1	int
;	O
dbf	pointer
->	O
bucket	pointer
->	O
bucket_avail	array
[	O
0	int
]	O
.	O
av_adr	long
=	O
3	int
*	O
dbf	pointer
->	O
header	pointer
->	O
block_size	int
;	O
dbf	pointer
->	O
bucket	pointer
->	O
bucket_avail	array
[	O
0	int
]	O
.	O
av_size	int
=	O
dbf	pointer
->	O
header	pointer
->	O
block_size	int
;	O
for	O
(	O
index	function
=	O
0	int
;	O
index	function
<	O
GDBM_DIR_COUNT	O
(	O
dbf	pointer
)	O
;	O
index	function
++	O
)	O
dbf	pointer
->	O
dir	long
[	O
index	function
]	O
=	O
2	int
*	O
dbf	pointer
->	O
header	pointer
->	O
block_size	int
;	O
dbf	pointer
->	O
header	pointer
->	O
avail	struct
.	O
size	int
=	O
(	O
(	O
dbf	pointer
->	O
header	pointer
->	O
block_size	int
-	O
sizeof	O
(	O
gdbm_file_header	struct
)	O
)	O
/	O
sizeof	O
(	O
avail_elem	struct
)	O
)	O
+	O
1	int
;	O
dbf	pointer
->	O
header	pointer
->	O
avail	struct
.	O
count	int
=	O
0	int
;	O
dbf	pointer
->	O
header	pointer
->	O
avail	struct
.	O
next_block	long
=	O
0	int
;	O
dbf	pointer
->	O
header	pointer
->	O
next_block	long
=	O
4	int
*	O
dbf	pointer
->	O
header	pointer
->	O
block_size	int
;	O
if	O
(	O
_gdbm_full_write	function
(	O
dbf	pointer
,	O
dbf	pointer
->	O
header	pointer
,	O
dbf	pointer
->	O
header	pointer
->	O
block_size	int
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: error writing header: %s"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
gdbm_db_strerror	function
(	O
dbf	pointer
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
_gdbm_full_write	function
(	O
dbf	pointer
,	O
dbf	pointer
->	O
dir	long
,	O
dbf	pointer
->	O
header	pointer
->	O
dir_size	int
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: error writing directory: %s"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
gdbm_db_strerror	function
(	O
dbf	pointer
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
_gdbm_full_write	function
(	O
dbf	pointer
,	O
dbf	pointer
->	O
bucket	pointer
,	O
dbf	pointer
->	O
header	pointer
->	O
bucket_size	int
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: error writing bucket: %s"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
gdbm_db_strerror	function
(	O
dbf	pointer
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
_gdbm_file_extend	function
(	O
dbf	pointer
,	O
dbf	pointer
->	O
header	pointer
->	O
next_block	long
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: error extending file: %s"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
gdbm_db_strerror	function
(	O
dbf	pointer
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
gdbm_file_sync	function
(	O
dbf	pointer
)	O
;	O
free	function
(	O
dbf	pointer
->	O
bucket	pointer
)	O
;	O
}	O
else	O
{	O
gdbm_file_header	struct
partial_header	struct
;	O
int	O
rc	int
;	O
if	O
(	O
_gdbm_full_read	function
(	O
dbf	pointer
,	O
&	O
partial_header	struct
,	O
sizeof	O
(	O
gdbm_file_header	struct
)	O
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
|	O
GDBM_DEBUG_OPEN	O
,	O
"%s: error reading partial header: %s"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
gdbm_db_strerror	function
(	O
dbf	pointer
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
rc	int
=	O
validate_header	function
(	O
&	O
partial_header	struct
,	O
&	O
file_stat	struct
)	O
;	O
if	O
(	O
rc	int
==	O
GDBM_NEED_RECOVERY	int
)	O
{	O
dbf	pointer
->	O
need_recovery	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
rc	int
!=	O
GDBM_NO_ERROR	int
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	function
(	O
dbf	pointer
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
rc	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	pointer
->	O
header	pointer
=	O
malloc	function
(	O
partial_header	struct
.	O
block_size	int
)	O
;	O
if	O
(	O
dbf	pointer
->	O
header	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	function
(	O
dbf	pointer
)	O
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
memcpy	function
(	O
dbf	pointer
->	O
header	pointer
,	O
&	O
partial_header	struct
,	O
sizeof	O
(	O
gdbm_file_header	struct
)	O
)	O
;	O
if	O
(	O
_gdbm_full_read	function
(	O
dbf	pointer
,	O
&	O
dbf	pointer
->	O
header	pointer
->	O
avail	struct
.	O
av_table	array
[	O
1	int
]	O
,	O
dbf	pointer
->	O
header	pointer
->	O
block_size	int
-	O
sizeof	O
(	O
gdbm_file_header	struct
)	O
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
|	O
GDBM_DEBUG_OPEN	O
,	O
"%s: error reading av_table: %s"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
gdbm_db_strerror	function
(	O
dbf	pointer
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
gdbm_avail_block_validate	function
(	O
dbf	pointer
,	O
&	O
dbf	pointer
->	O
header	pointer
->	O
avail	struct
)	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	pointer
->	O
dir	long
=	O
malloc	function
(	O
dbf	pointer
->	O
header	pointer
->	O
dir_size	int
)	O
;	O
if	O
(	O
dbf	pointer
->	O
dir	long
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	function
(	O
dbf	pointer
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
file_pos	long
=	O
gdbm_file_seek	function
(	O
dbf	pointer
,	O
dbf	pointer
->	O
header	pointer
->	O
dir	long
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
file_pos	long
!=	O
dbf	pointer
->	O
header	pointer
->	O
dir	long
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	function
(	O
dbf	pointer
)	O
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_FILE_SEEK_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
_gdbm_full_read	function
(	O
dbf	pointer
,	O
dbf	pointer
->	O
dir	long
,	O
dbf	pointer
->	O
header	pointer
->	O
dir_size	int
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
|	O
GDBM_DEBUG_OPEN	O
,	O
"%s: error reading dir: %s"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
gdbm_db_strerror	function
(	O
dbf	pointer
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_NOMMAP	int
)	O
)	O
{	O
if	O
(	O
_gdbm_mapped_init	function
(	O
dbf	pointer
)	O
==	O
0	int
)	O
dbf	pointer
->	O
memory_mapping	int
=	O
TRUE	int
;	O
else	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
|	O
GDBM_DEBUG_OPEN	O
,	O
"%s: _gdbm_mapped_init failed: %s"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	pointer
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	function
(	O
dbf	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
dbf	pointer
->	O
last_read	long
=	O
-	O
1	int
;	O
dbf	pointer
->	O
bucket	pointer
=	O
NULL	O
;	O
dbf	pointer
->	O
bucket_dir	int
=	O
0	int
;	O
dbf	pointer
->	O
cache_entry	pointer
=	O
NULL	O
;	O
dbf	pointer
->	O
header_changed	int
=	O
FALSE	int
;	O
dbf	pointer
->	O
directory_changed	int
=	O
FALSE	int
;	O
dbf	pointer
->	O
bucket_changed	int
=	O
FALSE	int
;	O
dbf	pointer
->	O
second_changed	int
=	O
FALSE	int
;	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ALL	O
,	O
"%s: opened %s"	pointer
,	O
dbf	pointer
->	O
name	pointer
,	O
dbf	pointer
->	O
need_recovery	int
?	O
"for recovery"	pointer
:	O
"successfully"	pointer
)	O
;	O
return	O
dbf	pointer
;	O
}	O
GDBM_FILE	pointer
gdbm_open	function
(	O
const	O
char	O
*	O
file	pointer
,	O
int	O
block_size	int
,	O
int	O
flags	int
,	O
int	O
mode	int
,	O
void	O
(	O
*	O
fatal_func	pointer
)	O
(	O
const	O
char	O
*	O
)	O
)	O
{	O
int	O
fd	int
;	O
int	O
fbits	int
=	O
0	int
;	O
switch	O
(	O
flags	int
&	O
GDBM_OPENMASK	int
)	O
{	O
case	O
GDBM_READER	int
:	O
fbits	int
=	O
O_RDONLY	int
;	O
break	O
;	O
case	O
GDBM_WRITER	int
:	O
fbits	int
=	O
O_RDWR	int
;	O
break	O
;	O
case	O
GDBM_WRCREAT	int
:	O
case	O
GDBM_NEWDB	int
:	O
fbits	int
=	O
O_RDWR	int
|	O
O_CREAT	int
;	O
break	O
;	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_FILE_OPEN_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
flags	int
&	O
GDBM_CLOEXEC	int
)	O
fbits	int
|=	O
O_CLOEXEC	O
;	O
fd	int
=	O
open	function
(	O
file	pointer
,	O
fbits	int
,	O
mode	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_FILE_OPEN_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
gdbm_fd_open	function
(	O
fd	int
,	O
file	pointer
,	O
block_size	int
,	O
flags	int
|	O
GDBM_CLOERROR	int
,	O
fatal_func	pointer
)	O
;	O
}	O
int	O
_gdbm_init_cache	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
size_t	long
size	int
)	O
{	O
int	O
index	function
;	O
if	O
(	O
dbf	pointer
->	O
bucket_cache	pointer
==	O
NULL	O
)	O
{	O
dbf	pointer
->	O
bucket_cache	pointer
=	O
calloc	function
(	O
size	int
,	O
sizeof	O
(	O
cache_elem	struct
)	O
)	O
;	O
if	O
(	O
dbf	pointer
->	O
bucket_cache	pointer
==	O
NULL	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_MALLOC_ERROR	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
dbf	pointer
->	O
cache_size	long
=	O
size	int
;	O
for	O
(	O
index	function
=	O
0	int
;	O
index	function
<	O
size	int
;	O
index	function
++	O
)	O
{	O
(	O
dbf	pointer
->	O
bucket_cache	pointer
[	O
index	function
]	O
)	O
.	O
ca_bucket	pointer
=	O
malloc	function
(	O
dbf	pointer
->	O
header	pointer
->	O
bucket_size	int
)	O
;	O
if	O
(	O
(	O
dbf	pointer
->	O
bucket_cache	pointer
[	O
index	function
]	O
)	O
.	O
ca_bucket	pointer
==	O
NULL	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_MALLOC_ERROR	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
dbf	pointer
->	O
bucket_cache	pointer
[	O
index	function
]	O
.	O
ca_data	struct
.	O
dptr	pointer
=	O
NULL	O
;	O
dbf	pointer
->	O
bucket_cache	pointer
[	O
index	function
]	O
.	O
ca_data	struct
.	O
dsize	int
=	O
0	int
;	O
_gdbm_cache_entry_invalidate	function
(	O
dbf	pointer
,	O
index	function
)	O
;	O
}	O
dbf	pointer
->	O
bucket	pointer
=	O
dbf	pointer
->	O
bucket_cache	pointer
[	O
0	int
]	O
.	O
ca_bucket	pointer
;	O
dbf	pointer
->	O
cache_entry	pointer
=	O
&	O
dbf	pointer
->	O
bucket_cache	pointer
[	O
0	int
]	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
_gdbm_cache_entry_invalidate	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
int	O
index	function
)	O
{	O
dbf	pointer
->	O
bucket_cache	pointer
[	O
index	function
]	O
.	O
ca_adr	long
=	O
0	int
;	O
dbf	pointer
->	O
bucket_cache	pointer
[	O
index	function
]	O
.	O
ca_changed	char
=	O
FALSE	int
;	O
dbf	pointer
->	O
bucket_cache	pointer
[	O
index	function
]	O
.	O
ca_data	struct
.	O
hash_val	int
=	O
-	O
1	int
;	O
dbf	pointer
->	O
bucket_cache	pointer
[	O
index	function
]	O
.	O
ca_data	struct
.	O
elem_loc	int
=	O
-	O
1	int
;	O
}	O
