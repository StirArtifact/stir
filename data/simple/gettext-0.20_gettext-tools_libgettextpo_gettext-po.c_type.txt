struct	O
po_file	O
{	O
msgdomain_list_ty	O
*	O
mdlp	O
;	O
const	O
char	O
*	O
real_filename	O
;	O
const	O
char	O
*	O
logical_filename	O
;	O
const	O
char	O
*	O
*	O
domains	pointer
;	O
}	O
;	O
struct	O
po_message_iterator	struct
{	O
po_file_t	O
file	int
;	O
char	O
*	O
domain	pointer
;	O
message_list_ty	O
*	O
mlp	pointer
;	O
size_t	int
index	int
;	O
}	O
;	O
int	O
libgettextpo_version	int
=	O
LIBGETTEXTPO_VERSION	O
;	O
po_file_t	O
po_file_create	function
(	O
void	O
)	O
{	O
po_file_t	O
file	int
;	O
file	int
=	O
XMALLOC	function
(	O
struct	O
po_file	O
)	O
;	O
file	int
->	O
mdlp	O
=	O
msgdomain_list_alloc	O
(	O
false	O
)	O
;	O
file	int
->	O
real_filename	O
=	O
_	O
(	O
"<unnamed>"	pointer
)	O
;	O
file	int
->	O
logical_filename	O
=	O
file	int
->	O
real_filename	O
;	O
file	int
->	O
domains	pointer
=	O
NULL	O
;	O
return	O
file	int
;	O
}	O
po_file_t	O
po_file_read	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
po_xerror_handler_t	O
handler	int
)	O
{	O
FILE	O
*	O
fp	O
;	O
po_file_t	O
file	int
;	O
if	O
(	O
strcmp	O
(	O
filename	pointer
,	O
"-"	pointer
)	O
==	O
0	int
||	O
strcmp	O
(	O
filename	pointer
,	O
"/dev/stdin"	pointer
)	O
==	O
0	int
)	O
{	O
filename	pointer
=	O
_	O
(	O
"<stdin>"	pointer
)	O
;	O
fp	O
=	O
stdin	O
;	O
}	O
else	O
{	O
fp	O
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
po_xerror	O
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
handler	int
->	O
xerror	O
;	O
po_xerror2	O
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
handler	int
->	O
xerror2	O
;	O
gram_max_allowed_errors	O
=	O
UINT_MAX	O
;	O
file	int
=	O
XMALLOC	function
(	O
struct	O
po_file	O
)	O
;	O
file	int
->	O
real_filename	O
=	O
filename	pointer
;	O
file	int
->	O
logical_filename	O
=	O
filename	pointer
;	O
file	int
->	O
mdlp	O
=	O
read_catalog_stream	O
(	O
fp	O
,	O
file	int
->	O
real_filename	O
,	O
file	int
->	O
logical_filename	O
,	O
&	O
input_format_po	O
)	O
;	O
file	int
->	O
domains	pointer
=	O
NULL	O
;	O
po_xerror	O
=	O
textmode_xerror	O
;	O
po_xerror2	O
=	O
textmode_xerror2	O
;	O
gram_max_allowed_errors	O
=	O
20	int
;	O
if	O
(	O
fp	O
!=	O
stdin	O
)	O
fclose	function
(	O
fp	O
)	O
;	O
return	O
file	int
;	O
}	O
po_file_t	O
po_file_read_v2	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
po_error_handler_t	O
handler	int
)	O
{	O
FILE	O
*	O
fp	O
;	O
po_file_t	O
file	int
;	O
if	O
(	O
strcmp	O
(	O
filename	pointer
,	O
"-"	pointer
)	O
==	O
0	int
||	O
strcmp	O
(	O
filename	pointer
,	O
"/dev/stdin"	pointer
)	O
==	O
0	int
)	O
{	O
filename	pointer
=	O
_	O
(	O
"<stdin>"	pointer
)	O
;	O
fp	O
=	O
stdin	O
;	O
}	O
else	O
{	O
fp	O
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
po_error	O
=	O
handler	int
->	O
error	function
;	O
po_error_at_line	O
=	O
handler	int
->	O
error_at_line	O
;	O
po_multiline_warning	O
=	O
handler	int
->	O
multiline_warning	O
;	O
po_multiline_error	O
=	O
handler	int
->	O
multiline_error	O
;	O
gram_max_allowed_errors	O
=	O
UINT_MAX	O
;	O
file	int
=	O
XMALLOC	function
(	O
struct	O
po_file	O
)	O
;	O
file	int
->	O
real_filename	O
=	O
filename	pointer
;	O
file	int
->	O
logical_filename	O
=	O
filename	pointer
;	O
file	int
->	O
mdlp	O
=	O
read_catalog_stream	O
(	O
fp	O
,	O
file	int
->	O
real_filename	O
,	O
file	int
->	O
logical_filename	O
,	O
&	O
input_format_po	O
)	O
;	O
file	int
->	O
domains	pointer
=	O
NULL	O
;	O
po_error	O
=	O
error	function
;	O
po_error_at_line	O
=	O
error_at_line	O
;	O
po_multiline_warning	O
=	O
multiline_warning	O
;	O
po_multiline_error	O
=	O
multiline_error	O
;	O
gram_max_allowed_errors	O
=	O
20	int
;	O
if	O
(	O
fp	O
!=	O
stdin	O
)	O
fclose	function
(	O
fp	O
)	O
;	O
return	O
file	int
;	O
}	O
po_file_t	O
po_file_read	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
FILE	O
*	O
fp	O
;	O
po_file_t	O
file	int
;	O
if	O
(	O
strcmp	O
(	O
filename	pointer
,	O
"-"	pointer
)	O
==	O
0	int
||	O
strcmp	O
(	O
filename	pointer
,	O
"/dev/stdin"	pointer
)	O
==	O
0	int
)	O
{	O
filename	pointer
=	O
_	O
(	O
"<stdin>"	pointer
)	O
;	O
fp	O
=	O
stdin	O
;	O
}	O
else	O
{	O
fp	O
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
file	int
=	O
XMALLOC	function
(	O
struct	O
po_file	O
)	O
;	O
file	int
->	O
real_filename	O
=	O
filename	pointer
;	O
file	int
->	O
logical_filename	O
=	O
filename	pointer
;	O
file	int
->	O
mdlp	O
=	O
read_catalog_stream	O
(	O
fp	O
,	O
file	int
->	O
real_filename	O
,	O
file	int
->	O
logical_filename	O
,	O
&	O
input_format_po	O
)	O
;	O
file	int
->	O
domains	pointer
=	O
NULL	O
;	O
if	O
(	O
fp	O
!=	O
stdin	O
)	O
fclose	function
(	O
fp	O
)	O
;	O
return	O
file	int
;	O
}	O
po_file_t	O
po_file_write	function
(	O
po_file_t	O
file	int
,	O
const	O
char	O
*	O
filename	pointer
,	O
po_xerror_handler_t	O
handler	int
)	O
{	O
po_xerror	O
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
handler	int
->	O
xerror	O
;	O
po_xerror2	O
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
handler	int
->	O
xerror2	O
;	O
msgdomain_list_print	O
(	O
file	int
->	O
mdlp	O
,	O
filename	pointer
,	O
&	O
output_format_po	O
,	O
true	O
,	O
false	O
)	O
;	O
po_xerror	O
=	O
textmode_xerror	O
;	O
po_xerror2	O
=	O
textmode_xerror2	O
;	O
return	O
file	int
;	O
}	O
po_file_t	O
po_file_write	function
(	O
po_file_t	O
file	int
,	O
const	O
char	O
*	O
filename	pointer
,	O
po_error_handler_t	O
handler	int
)	O
{	O
po_error	O
=	O
handler	int
->	O
error	function
;	O
po_error_at_line	O
=	O
handler	int
->	O
error_at_line	O
;	O
po_multiline_warning	O
=	O
handler	int
->	O
multiline_warning	O
;	O
po_multiline_error	O
=	O
handler	int
->	O
multiline_error	O
;	O
msgdomain_list_print	O
(	O
file	int
->	O
mdlp	O
,	O
filename	pointer
,	O
&	O
output_format_po	O
,	O
true	O
,	O
false	O
)	O
;	O
po_error	O
=	O
error	function
;	O
po_error_at_line	O
=	O
error_at_line	O
;	O
po_multiline_warning	O
=	O
multiline_warning	O
;	O
po_multiline_error	O
=	O
multiline_error	O
;	O
return	O
file	int
;	O
}	O
void	O
po_file_free	function
(	O
po_file_t	O
file	int
)	O
{	O
msgdomain_list_free	O
(	O
file	int
->	O
mdlp	O
)	O
;	O
if	O
(	O
file	int
->	O
domains	pointer
!=	O
NULL	O
)	O
free	function
(	O
file	int
->	O
domains	pointer
)	O
;	O
free	function
(	O
file	int
)	O
;	O
}	O
const	O
char	O
*	O
const	O
*	O
po_file_domains	function
(	O
po_file_t	O
file	int
)	O
{	O
if	O
(	O
file	int
->	O
domains	pointer
==	O
NULL	O
)	O
{	O
size_t	int
n	O
=	O
file	int
->	O
mdlp	O
->	O
nitems	O
;	O
const	O
char	O
*	O
*	O
domains	pointer
=	O
XNMALLOC	function
(	O
n	O
+	O
1	int
,	O
const	O
char	O
*	O
)	O
;	O
size_t	int
j	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
n	O
;	O
j	O
++	O
)	O
domains	pointer
[	O
j	O
]	O
=	O
file	int
->	O
mdlp	O
->	O
item	O
[	O
j	O
]	O
->	O
domain	pointer
;	O
domains	pointer
[	O
n	O
]	O
=	O
NULL	O
;	O
file	int
->	O
domains	pointer
=	O
domains	pointer
;	O
}	O
return	O
file	int
->	O
domains	pointer
;	O
}	O
const	O
char	O
*	O
po_file_domain_header	function
(	O
po_file_t	O
file	int
,	O
const	O
char	O
*	O
domain	pointer
)	O
{	O
message_list_ty	O
*	O
mlp	pointer
;	O
size_t	int
j	O
;	O
if	O
(	O
domain	pointer
==	O
NULL	O
)	O
domain	pointer
=	O
MESSAGE_DOMAIN_DEFAULT	O
;	O
mlp	pointer
=	O
msgdomain_list_sublist	O
(	O
file	int
->	O
mdlp	O
,	O
domain	pointer
,	O
false	O
)	O
;	O
if	O
(	O
mlp	pointer
!=	O
NULL	O
)	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	pointer
->	O
nitems	O
;	O
j	O
++	O
)	O
if	O
(	O
is_header	function
(	O
mlp	pointer
->	O
item	O
[	O
j	O
]	O
)	O
&&	O
!	O
mlp	pointer
->	O
item	O
[	O
j	O
]	O
->	O
obsolete	int
)	O
{	O
const	O
char	O
*	O
header	pointer
=	O
mlp	pointer
->	O
item	O
[	O
j	O
]	O
->	O
msgstr	pointer
;	O
if	O
(	O
header	pointer
!=	O
NULL	O
)	O
return	O
xstrdup	O
(	O
header	pointer
)	O
;	O
else	O
return	O
NULL	O
;	O
}	O
return	O
NULL	O
;	O
}	O
char	O
*	O
po_header_field	function
(	O
const	O
char	O
*	O
header	pointer
,	O
const	O
char	O
*	O
field	pointer
)	O
{	O
size_t	int
field_len	O
=	O
strlen	O
(	O
field	pointer
)	O
;	O
const	O
char	O
*	O
line	pointer
;	O
for	O
(	O
line	pointer
=	O
header	pointer
;	O
;	O
)	O
{	O
if	O
(	O
strncmp	O
(	O
line	pointer
,	O
field	pointer
,	O
field_len	O
)	O
==	O
0	int
&&	O
line	pointer
[	O
field_len	O
]	O
==	O
':'	O
)	O
{	O
const	O
char	O
*	O
value_start	pointer
;	O
const	O
char	O
*	O
value_end	pointer
;	O
char	O
*	O
value	pointer
;	O
value_start	pointer
=	O
line	pointer
+	O
field_len	O
+	O
1	int
;	O
if	O
(	O
*	O
value_start	pointer
==	O
' '	O
)	O
value_start	pointer
++	O
;	O
value_end	pointer
=	O
strchr	O
(	O
value_start	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
value_end	pointer
==	O
NULL	O
)	O
value_end	pointer
=	O
value_start	pointer
+	O
strlen	O
(	O
value_start	pointer
)	O
;	O
value	pointer
=	O
XNMALLOC	function
(	O
value_end	pointer
-	O
value_start	pointer
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	O
(	O
value	pointer
,	O
value_start	pointer
,	O
value_end	pointer
-	O
value_start	pointer
)	O
;	O
value	pointer
[	O
value_end	pointer
-	O
value_start	pointer
]	O
=	O
'\0'	O
;	O
return	O
value	pointer
;	O
}	O
line	pointer
=	O
strchr	O
(	O
line	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
line	pointer
!=	O
NULL	O
)	O
line	pointer
++	O
;	O
else	O
break	O
;	O
}	O
return	O
NULL	O
;	O
}	O
char	O
*	O
po_header_set_field	function
(	O
const	O
char	O
*	O
header	pointer
,	O
const	O
char	O
*	O
field	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
size_t	int
header_len	O
=	O
strlen	O
(	O
header	pointer
)	O
;	O
size_t	int
field_len	O
=	O
strlen	O
(	O
field	pointer
)	O
;	O
size_t	int
value_len	O
=	O
strlen	O
(	O
value	pointer
)	O
;	O
{	O
const	O
char	O
*	O
line	pointer
;	O
for	O
(	O
line	pointer
=	O
header	pointer
;	O
;	O
)	O
{	O
if	O
(	O
strncmp	O
(	O
line	pointer
,	O
field	pointer
,	O
field_len	O
)	O
==	O
0	int
&&	O
line	pointer
[	O
field_len	O
]	O
==	O
':'	O
)	O
{	O
const	O
char	O
*	O
oldvalue_start	pointer
;	O
const	O
char	O
*	O
oldvalue_end	pointer
;	O
size_t	int
header_part1_len	O
;	O
size_t	int
header_part3_len	O
;	O
size_t	int
result_len	O
;	O
char	O
*	O
result	pointer
;	O
oldvalue_start	pointer
=	O
line	pointer
+	O
field_len	O
+	O
1	int
;	O
if	O
(	O
*	O
oldvalue_start	pointer
==	O
' '	O
)	O
oldvalue_start	pointer
++	O
;	O
oldvalue_end	pointer
=	O
strchr	O
(	O
oldvalue_start	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
oldvalue_end	pointer
==	O
NULL	O
)	O
oldvalue_end	pointer
=	O
oldvalue_start	pointer
+	O
strlen	O
(	O
oldvalue_start	pointer
)	O
;	O
header_part1_len	O
=	O
oldvalue_start	pointer
-	O
header	pointer
;	O
header_part3_len	O
=	O
header	pointer
+	O
header_len	O
-	O
oldvalue_end	pointer
;	O
result_len	O
=	O
header_part1_len	O
+	O
value_len	O
+	O
header_part3_len	O
;	O
result	pointer
=	O
XNMALLOC	function
(	O
result_len	O
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	O
(	O
result	pointer
,	O
header	pointer
,	O
header_part1_len	O
)	O
;	O
memcpy	O
(	O
result	pointer
+	O
header_part1_len	O
,	O
value	pointer
,	O
value_len	O
)	O
;	O
memcpy	O
(	O
result	pointer
+	O
header_part1_len	O
+	O
value_len	O
,	O
oldvalue_end	pointer
,	O
header_part3_len	O
)	O
;	O
*	O
(	O
result	pointer
+	O
result_len	O
)	O
=	O
'\0'	O
;	O
return	O
result	pointer
;	O
}	O
line	pointer
=	O
strchr	O
(	O
line	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
line	pointer
!=	O
NULL	O
)	O
line	pointer
++	O
;	O
else	O
break	O
;	O
}	O
}	O
{	O
size_t	int
newline	pointer
;	O
size_t	int
result_len	O
;	O
char	O
*	O
result	pointer
;	O
newline	pointer
=	O
(	O
header_len	O
>	O
0	int
&&	O
header	pointer
[	O
header_len	O
-	O
1	int
]	O
!=	O
'\n'	O
?	O
1	int
:	O
0	int
)	O
;	O
result_len	O
=	O
header_len	O
+	O
newline	pointer
+	O
field_len	O
+	O
2	int
+	O
value_len	O
+	O
1	int
;	O
result	pointer
=	O
XNMALLOC	function
(	O
result_len	O
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	O
(	O
result	pointer
,	O
header	pointer
,	O
header_len	O
)	O
;	O
if	O
(	O
newline	pointer
)	O
*	O
(	O
result	pointer
+	O
header_len	O
)	O
=	O
'\n'	O
;	O
memcpy	O
(	O
result	pointer
+	O
header_len	O
+	O
newline	pointer
,	O
field	pointer
,	O
field_len	O
)	O
;	O
*	O
(	O
result	pointer
+	O
header_len	O
+	O
newline	pointer
+	O
field_len	O
)	O
=	O
':'	O
;	O
*	O
(	O
result	pointer
+	O
header_len	O
+	O
newline	pointer
+	O
field_len	O
+	O
1	int
)	O
=	O
' '	O
;	O
memcpy	O
(	O
result	pointer
+	O
header_len	O
+	O
newline	pointer
+	O
field_len	O
+	O
2	int
,	O
value	pointer
,	O
value_len	O
)	O
;	O
*	O
(	O
result	pointer
+	O
header_len	O
+	O
newline	pointer
+	O
field_len	O
+	O
2	int
+	O
value_len	O
)	O
=	O
'\n'	O
;	O
*	O
(	O
result	pointer
+	O
result_len	O
)	O
=	O
'\0'	O
;	O
return	O
result	pointer
;	O
}	O
}	O
po_message_iterator_t	O
po_message_iterator	struct
(	O
po_file_t	O
file	int
,	O
const	O
char	O
*	O
domain	pointer
)	O
{	O
po_message_iterator_t	O
iterator	int
;	O
if	O
(	O
domain	pointer
==	O
NULL	O
)	O
domain	pointer
=	O
MESSAGE_DOMAIN_DEFAULT	O
;	O
iterator	int
=	O
XMALLOC	function
(	O
struct	O
po_message_iterator	struct
)	O
;	O
iterator	int
->	O
file	int
=	O
file	int
;	O
iterator	int
->	O
domain	pointer
=	O
xstrdup	O
(	O
domain	pointer
)	O
;	O
iterator	int
->	O
mlp	pointer
=	O
msgdomain_list_sublist	O
(	O
file	int
->	O
mdlp	O
,	O
domain	pointer
,	O
false	O
)	O
;	O
iterator	int
->	O
index	int
=	O
0	int
;	O
return	O
iterator	int
;	O
}	O
void	O
po_message_iterator_free	function
(	O
po_message_iterator_t	O
iterator	int
)	O
{	O
free	function
(	O
iterator	int
->	O
domain	pointer
)	O
;	O
free	function
(	O
iterator	int
)	O
;	O
}	O
po_message_t	O
po_next_message	function
(	O
po_message_iterator_t	O
iterator	int
)	O
{	O
if	O
(	O
iterator	int
->	O
mlp	pointer
!=	O
NULL	O
&&	O
iterator	int
->	O
index	int
<	O
iterator	int
->	O
mlp	pointer
->	O
nitems	O
)	O
return	O
(	O
po_message_t	O
)	O
iterator	int
->	O
mlp	pointer
->	O
item	O
[	O
iterator	int
->	O
index	int
++	O
]	O
;	O
else	O
return	O
NULL	O
;	O
}	O
void	O
po_message_insert	function
(	O
po_message_iterator_t	O
iterator	int
,	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
iterator	int
->	O
mlp	pointer
==	O
NULL	O
)	O
iterator	int
->	O
mlp	pointer
=	O
msgdomain_list_sublist	O
(	O
iterator	int
->	O
file	int
->	O
mdlp	O
,	O
iterator	int
->	O
domain	pointer
,	O
true	O
)	O
;	O
message_list_insert_at	O
(	O
iterator	int
->	O
mlp	pointer
,	O
iterator	int
->	O
index	int
,	O
mp	O
)	O
;	O
iterator	int
->	O
index	int
++	O
;	O
}	O
po_message_t	O
po_message_create	function
(	O
void	O
)	O
{	O
lex_pos_ty	O
pos	O
=	O
{	O
NULL	O
,	O
0	int
}	O
;	O
return	O
(	O
po_message_t	O
)	O
message_alloc	O
(	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
xstrdup	O
(	O
""	pointer
)	O
,	O
1	int
,	O
&	O
pos	O
)	O
;	O
}	O
const	O
char	O
*	O
po_message_msgctxt	function
(	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
return	O
mp	O
->	O
msgctxt	pointer
;	O
}	O
void	O
po_message_set_msgctxt	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
msgctxt	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
msgctxt	pointer
!=	O
mp	O
->	O
msgctxt	pointer
)	O
{	O
char	O
*	O
old_msgctxt	pointer
=	O
(	O
char	O
*	O
)	O
mp	O
->	O
msgctxt	pointer
;	O
mp	O
->	O
msgctxt	pointer
=	O
(	O
msgctxt	pointer
!=	O
NULL	O
?	O
xstrdup	O
(	O
msgctxt	pointer
)	O
:	O
NULL	O
)	O
;	O
if	O
(	O
old_msgctxt	pointer
!=	O
NULL	O
)	O
free	function
(	O
old_msgctxt	pointer
)	O
;	O
}	O
}	O
const	O
char	O
*	O
po_message_msgid	function
(	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
return	O
mp	O
->	O
msgid	pointer
;	O
}	O
void	O
po_message_set_msgid	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
msgid	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
msgid	pointer
!=	O
mp	O
->	O
msgid	pointer
)	O
{	O
char	O
*	O
old_msgid	pointer
=	O
(	O
char	O
*	O
)	O
mp	O
->	O
msgid	pointer
;	O
mp	O
->	O
msgid	pointer
=	O
xstrdup	O
(	O
msgid	pointer
)	O
;	O
if	O
(	O
old_msgid	pointer
!=	O
NULL	O
)	O
free	function
(	O
old_msgid	pointer
)	O
;	O
}	O
}	O
const	O
char	O
*	O
po_message_msgid_plural	function
(	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
return	O
mp	O
->	O
msgid_plural	pointer
;	O
}	O
void	O
po_message_set_msgid_plural	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
msgid_plural	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
msgid_plural	pointer
!=	O
mp	O
->	O
msgid_plural	pointer
)	O
{	O
char	O
*	O
old_msgid_plural	pointer
=	O
(	O
char	O
*	O
)	O
mp	O
->	O
msgid_plural	pointer
;	O
mp	O
->	O
msgid_plural	pointer
=	O
(	O
msgid_plural	pointer
!=	O
NULL	O
?	O
xstrdup	O
(	O
msgid_plural	pointer
)	O
:	O
NULL	O
)	O
;	O
if	O
(	O
old_msgid_plural	pointer
!=	O
NULL	O
)	O
free	function
(	O
old_msgid_plural	pointer
)	O
;	O
}	O
}	O
const	O
char	O
*	O
po_message_msgstr	function
(	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
return	O
mp	O
->	O
msgstr	pointer
;	O
}	O
void	O
po_message_set_msgstr	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
msgstr	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
msgstr	pointer
!=	O
mp	O
->	O
msgstr	pointer
)	O
{	O
char	O
*	O
old_msgstr	pointer
=	O
(	O
char	O
*	O
)	O
mp	O
->	O
msgstr	pointer
;	O
mp	O
->	O
msgstr	pointer
=	O
xstrdup	O
(	O
msgstr	pointer
)	O
;	O
mp	O
->	O
msgstr_len	O
=	O
strlen	O
(	O
mp	O
->	O
msgstr	pointer
)	O
+	O
1	int
;	O
if	O
(	O
old_msgstr	pointer
!=	O
NULL	O
)	O
free	function
(	O
old_msgstr	pointer
)	O
;	O
}	O
}	O
const	O
char	O
*	O
po_message_msgstr_plural	function
(	O
po_message_t	O
message	int
,	O
int	O
index	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
mp	O
->	O
msgid_plural	pointer
!=	O
NULL	O
&&	O
index	int
>=	O
0	int
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
const	O
char	O
*	O
p_end	pointer
=	O
mp	O
->	O
msgstr	pointer
+	O
mp	O
->	O
msgstr_len	O
;	O
for	O
(	O
p	pointer
=	O
mp	O
->	O
msgstr	pointer
;	O
;	O
p	pointer
+=	O
strlen	O
(	O
p	pointer
)	O
+	O
1	int
,	O
index	int
--	O
)	O
{	O
if	O
(	O
p	pointer
>=	O
p_end	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
index	int
==	O
0	int
)	O
break	O
;	O
}	O
return	O
p	pointer
;	O
}	O
else	O
return	O
NULL	O
;	O
}	O
void	O
po_message_set_msgstr_plural	function
(	O
po_message_t	O
message	int
,	O
int	O
index	int
,	O
const	O
char	O
*	O
msgstr	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
mp	O
->	O
msgid_plural	pointer
!=	O
NULL	O
&&	O
index	int
>=	O
0	int
)	O
{	O
char	O
*	O
p	pointer
=	O
(	O
char	O
*	O
)	O
mp	O
->	O
msgstr	pointer
;	O
char	O
*	O
p_end	pointer
=	O
(	O
char	O
*	O
)	O
mp	O
->	O
msgstr	pointer
+	O
mp	O
->	O
msgstr_len	O
;	O
char	O
*	O
copied_msgstr	pointer
;	O
if	O
(	O
msgstr	pointer
>=	O
p	pointer
&&	O
msgstr	pointer
<	O
p_end	pointer
)	O
msgstr	pointer
=	O
copied_msgstr	pointer
=	O
xstrdup	O
(	O
msgstr	pointer
)	O
;	O
else	O
copied_msgstr	pointer
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
p	pointer
+=	O
strlen	O
(	O
p	pointer
)	O
+	O
1	int
,	O
index	int
--	O
)	O
{	O
if	O
(	O
p	pointer
>=	O
p_end	pointer
)	O
{	O
if	O
(	O
msgstr	pointer
!=	O
NULL	O
)	O
{	O
size_t	int
new_msgstr_len	O
=	O
mp	O
->	O
msgstr_len	O
+	O
index	int
+	O
strlen	O
(	O
msgstr	pointer
)	O
+	O
1	int
;	O
mp	O
->	O
msgstr	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	O
(	O
(	O
char	O
*	O
)	O
mp	O
->	O
msgstr	pointer
,	O
new_msgstr_len	O
)	O
;	O
p	pointer
=	O
(	O
char	O
*	O
)	O
mp	O
->	O
msgstr	pointer
+	O
mp	O
->	O
msgstr_len	O
;	O
for	O
(	O
;	O
index	int
>	O
0	int
;	O
index	int
--	O
)	O
*	O
p	pointer
++	O
=	O
'\0'	O
;	O
memcpy	O
(	O
p	pointer
,	O
msgstr	pointer
,	O
strlen	O
(	O
msgstr	pointer
)	O
+	O
1	int
)	O
;	O
mp	O
->	O
msgstr_len	O
=	O
new_msgstr_len	O
;	O
}	O
if	O
(	O
copied_msgstr	pointer
!=	O
NULL	O
)	O
free	function
(	O
copied_msgstr	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
index	int
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
msgstr	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
p	pointer
+	O
strlen	O
(	O
p	pointer
)	O
+	O
1	int
>=	O
p_end	pointer
)	O
{	O
mp	O
->	O
msgstr_len	O
=	O
p	pointer
-	O
mp	O
->	O
msgstr	pointer
;	O
return	O
;	O
}	O
msgstr	pointer
=	O
""	pointer
;	O
}	O
{	O
size_t	int
i1	O
=	O
p	pointer
-	O
mp	O
->	O
msgstr	pointer
;	O
size_t	int
i2before	O
=	O
i1	O
+	O
strlen	O
(	O
p	pointer
)	O
;	O
size_t	int
i2after	O
=	O
i1	O
+	O
strlen	O
(	O
msgstr	pointer
)	O
;	O
size_t	int
new_msgstr_len	O
=	O
mp	O
->	O
msgstr_len	O
-	O
i2before	O
+	O
i2after	O
;	O
if	O
(	O
i2after	O
>	O
i2before	O
)	O
mp	O
->	O
msgstr	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	O
(	O
(	O
char	O
*	O
)	O
mp	O
->	O
msgstr	pointer
,	O
new_msgstr_len	O
)	O
;	O
memmove	O
(	O
(	O
char	O
*	O
)	O
mp	O
->	O
msgstr	pointer
+	O
i2after	O
,	O
mp	O
->	O
msgstr	pointer
+	O
i2before	O
,	O
mp	O
->	O
msgstr_len	O
-	O
i2before	O
)	O
;	O
memcpy	O
(	O
(	O
char	O
*	O
)	O
mp	O
->	O
msgstr	pointer
+	O
i1	O
,	O
msgstr	pointer
,	O
i2after	O
-	O
i1	O
)	O
;	O
mp	O
->	O
msgstr_len	O
=	O
new_msgstr_len	O
;	O
}	O
if	O
(	O
copied_msgstr	pointer
!=	O
NULL	O
)	O
free	function
(	O
copied_msgstr	pointer
)	O
;	O
}	O
}	O
const	O
char	O
*	O
po_message_comments	function
(	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
mp	O
->	O
comment	O
==	O
NULL	O
||	O
mp	O
->	O
comment	O
->	O
nitems	O
==	O
0	int
)	O
return	O
""	pointer
;	O
else	O
return	O
string_list_join	O
(	O
mp	O
->	O
comment	O
,	O
"\n"	pointer
,	O
'\n'	O
,	O
true	O
)	O
;	O
}	O
void	O
po_message_set_comments	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
comments	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
string_list_ty	O
*	O
slp	O
=	O
string_list_alloc	O
(	O
)	O
;	O
{	O
char	O
*	O
copy	pointer
=	O
xstrdup	O
(	O
comments	pointer
)	O
;	O
char	O
*	O
rest	pointer
;	O
rest	pointer
=	O
copy	pointer
;	O
while	O
(	O
*	O
rest	pointer
!=	O
'\0'	O
)	O
{	O
char	O
*	O
newline	pointer
=	O
strchr	O
(	O
rest	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
newline	pointer
!=	O
NULL	O
)	O
{	O
*	O
newline	pointer
=	O
'\0'	O
;	O
string_list_append	O
(	O
slp	O
,	O
rest	pointer
)	O
;	O
rest	pointer
=	O
newline	pointer
+	O
1	int
;	O
}	O
else	O
{	O
string_list_append	O
(	O
slp	O
,	O
rest	pointer
)	O
;	O
break	O
;	O
}	O
}	O
free	function
(	O
copy	pointer
)	O
;	O
}	O
if	O
(	O
mp	O
->	O
comment	O
!=	O
NULL	O
)	O
string_list_free	O
(	O
mp	O
->	O
comment	O
)	O
;	O
mp	O
->	O
comment	O
=	O
slp	O
;	O
}	O
const	O
char	O
*	O
po_message_extracted_comments	function
(	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
mp	O
->	O
comment_dot	O
==	O
NULL	O
||	O
mp	O
->	O
comment_dot	O
->	O
nitems	O
==	O
0	int
)	O
return	O
""	pointer
;	O
else	O
return	O
string_list_join	O
(	O
mp	O
->	O
comment_dot	O
,	O
"\n"	pointer
,	O
'\n'	O
,	O
true	O
)	O
;	O
}	O
void	O
po_message_set_extracted_comments	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
comments	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
string_list_ty	O
*	O
slp	O
=	O
string_list_alloc	O
(	O
)	O
;	O
{	O
char	O
*	O
copy	pointer
=	O
xstrdup	O
(	O
comments	pointer
)	O
;	O
char	O
*	O
rest	pointer
;	O
rest	pointer
=	O
copy	pointer
;	O
while	O
(	O
*	O
rest	pointer
!=	O
'\0'	O
)	O
{	O
char	O
*	O
newline	pointer
=	O
strchr	O
(	O
rest	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
newline	pointer
!=	O
NULL	O
)	O
{	O
*	O
newline	pointer
=	O
'\0'	O
;	O
string_list_append	O
(	O
slp	O
,	O
rest	pointer
)	O
;	O
rest	pointer
=	O
newline	pointer
+	O
1	int
;	O
}	O
else	O
{	O
string_list_append	O
(	O
slp	O
,	O
rest	pointer
)	O
;	O
break	O
;	O
}	O
}	O
free	function
(	O
copy	pointer
)	O
;	O
}	O
if	O
(	O
mp	O
->	O
comment_dot	O
!=	O
NULL	O
)	O
string_list_free	O
(	O
mp	O
->	O
comment_dot	O
)	O
;	O
mp	O
->	O
comment_dot	O
=	O
slp	O
;	O
}	O
po_filepos_t	O
po_message_filepos	function
(	O
po_message_t	O
message	int
,	O
int	O
i	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
i	int
>=	O
0	int
&&	O
(	O
size_t	int
)	O
i	int
<	O
mp	O
->	O
filepos_count	O
)	O
return	O
(	O
po_filepos_t	O
)	O
&	O
mp	O
->	O
filepos	int
[	O
i	int
]	O
;	O
else	O
return	O
NULL	O
;	O
}	O
void	O
po_message_remove_filepos	function
(	O
po_message_t	O
message	int
,	O
int	O
i	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
i	int
>=	O
0	int
)	O
{	O
size_t	int
j	O
=	O
(	O
size_t	int
)	O
i	int
;	O
size_t	int
n	O
=	O
mp	O
->	O
filepos_count	O
;	O
if	O
(	O
j	O
<	O
n	O
)	O
{	O
mp	O
->	O
filepos_count	O
=	O
n	O
=	O
n	O
-	O
1	int
;	O
free	function
(	O
(	O
char	O
*	O
)	O
mp	O
->	O
filepos	int
[	O
j	O
]	O
.	O
file_name	O
)	O
;	O
for	O
(	O
;	O
j	O
<	O
n	O
;	O
j	O
++	O
)	O
mp	O
->	O
filepos	int
[	O
j	O
]	O
=	O
mp	O
->	O
filepos	int
[	O
j	O
+	O
1	int
]	O
;	O
}	O
}	O
}	O
void	O
po_message_add_filepos	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
file	int
,	O
size_t	int
start_line	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
message_comment_filepos	O
(	O
mp	O
,	O
file	int
,	O
start_line	int
)	O
;	O
}	O
const	O
char	O
*	O
po_message_prev_msgctxt	function
(	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
return	O
mp	O
->	O
prev_msgctxt	pointer
;	O
}	O
void	O
po_message_set_prev_msgctxt	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
prev_msgctxt	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
prev_msgctxt	pointer
!=	O
mp	O
->	O
prev_msgctxt	pointer
)	O
{	O
char	O
*	O
old_prev_msgctxt	pointer
=	O
(	O
char	O
*	O
)	O
mp	O
->	O
prev_msgctxt	pointer
;	O
mp	O
->	O
prev_msgctxt	pointer
=	O
(	O
prev_msgctxt	pointer
!=	O
NULL	O
?	O
xstrdup	O
(	O
prev_msgctxt	pointer
)	O
:	O
NULL	O
)	O
;	O
if	O
(	O
old_prev_msgctxt	pointer
!=	O
NULL	O
)	O
free	function
(	O
old_prev_msgctxt	pointer
)	O
;	O
}	O
}	O
const	O
char	O
*	O
po_message_prev_msgid	function
(	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
return	O
mp	O
->	O
prev_msgid	pointer
;	O
}	O
void	O
po_message_set_prev_msgid	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
prev_msgid	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
prev_msgid	pointer
!=	O
mp	O
->	O
prev_msgid	pointer
)	O
{	O
char	O
*	O
old_prev_msgid	pointer
=	O
(	O
char	O
*	O
)	O
mp	O
->	O
prev_msgid	pointer
;	O
mp	O
->	O
prev_msgid	pointer
=	O
(	O
prev_msgid	pointer
!=	O
NULL	O
?	O
xstrdup	O
(	O
prev_msgid	pointer
)	O
:	O
NULL	O
)	O
;	O
if	O
(	O
old_prev_msgid	pointer
!=	O
NULL	O
)	O
free	function
(	O
old_prev_msgid	pointer
)	O
;	O
}	O
}	O
const	O
char	O
*	O
po_message_prev_msgid_plural	function
(	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
return	O
mp	O
->	O
prev_msgid_plural	pointer
;	O
}	O
void	O
po_message_set_prev_msgid_plural	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
prev_msgid_plural	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
prev_msgid_plural	pointer
!=	O
mp	O
->	O
prev_msgid_plural	pointer
)	O
{	O
char	O
*	O
old_prev_msgid_plural	pointer
=	O
(	O
char	O
*	O
)	O
mp	O
->	O
prev_msgid_plural	pointer
;	O
mp	O
->	O
prev_msgid_plural	pointer
=	O
(	O
prev_msgid_plural	pointer
!=	O
NULL	O
?	O
xstrdup	O
(	O
prev_msgid_plural	pointer
)	O
:	O
NULL	O
)	O
;	O
if	O
(	O
old_prev_msgid_plural	pointer
!=	O
NULL	O
)	O
free	function
(	O
old_prev_msgid_plural	pointer
)	O
;	O
}	O
}	O
int	O
po_message_is_obsolete	function
(	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
return	O
(	O
mp	O
->	O
obsolete	int
?	O
1	int
:	O
0	int
)	O
;	O
}	O
void	O
po_message_set_obsolete	function
(	O
po_message_t	O
message	int
,	O
int	O
obsolete	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
mp	O
->	O
obsolete	int
=	O
obsolete	int
;	O
}	O
int	O
po_message_is_fuzzy	function
(	O
po_message_t	O
message	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
return	O
(	O
mp	O
->	O
is_fuzzy	O
?	O
1	int
:	O
0	int
)	O
;	O
}	O
void	O
po_message_set_fuzzy	function
(	O
po_message_t	O
message	int
,	O
int	O
fuzzy	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
mp	O
->	O
is_fuzzy	O
=	O
fuzzy	int
;	O
}	O
int	O
po_message_is_format	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
format_type	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
size_t	int
len	O
=	O
strlen	O
(	O
format_type	pointer
)	O
;	O
size_t	int
i	int
;	O
if	O
(	O
len	O
>=	O
7	int
&&	O
memcmp	O
(	O
format_type	pointer
+	O
len	O
-	O
7	int
,	O
"-format"	pointer
,	O
7	int
)	O
==	O
0	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NFORMATS	O
;	O
i	int
++	O
)	O
if	O
(	O
strlen	O
(	O
format_language	O
[	O
i	int
]	O
)	O
==	O
len	O
-	O
7	int
&&	O
memcmp	O
(	O
format_language	O
[	O
i	int
]	O
,	O
format_type	pointer
,	O
len	O
-	O
7	int
)	O
==	O
0	int
)	O
return	O
(	O
possible_format_p	O
(	O
mp	O
->	O
is_format	O
[	O
i	int
]	O
)	O
?	O
1	int
:	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
po_message_set_format	function
(	O
po_message_t	O
message	int
,	O
const	O
char	O
*	O
format_type	pointer
,	O
int	O
value	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
size_t	int
len	O
=	O
strlen	O
(	O
format_type	pointer
)	O
;	O
size_t	int
i	int
;	O
if	O
(	O
len	O
>=	O
7	int
&&	O
memcmp	O
(	O
format_type	pointer
+	O
len	O
-	O
7	int
,	O
"-format"	pointer
,	O
7	int
)	O
==	O
0	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NFORMATS	O
;	O
i	int
++	O
)	O
if	O
(	O
strlen	O
(	O
format_language	O
[	O
i	int
]	O
)	O
==	O
len	O
-	O
7	int
&&	O
memcmp	O
(	O
format_language	O
[	O
i	int
]	O
,	O
format_type	pointer
,	O
len	O
-	O
7	int
)	O
==	O
0	int
)	O
mp	O
->	O
is_format	O
[	O
i	int
]	O
=	O
(	O
value	pointer
?	O
yes	O
:	O
no	O
)	O
;	O
}	O
int	O
po_message_is_range	function
(	O
po_message_t	O
message	int
,	O
int	O
*	O
minp	pointer
,	O
int	O
*	O
maxp	pointer
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
has_range_p	function
(	O
mp	O
->	O
range	O
)	O
)	O
{	O
*	O
minp	pointer
=	O
mp	O
->	O
range	O
.	O
min	int
;	O
*	O
maxp	pointer
=	O
mp	O
->	O
range	O
.	O
max	int
;	O
return	O
1	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
void	O
po_message_set_range	function
(	O
po_message_t	O
message	int
,	O
int	O
min	int
,	O
int	O
max	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
if	O
(	O
min	int
>=	O
0	int
&&	O
max	int
>=	O
min	int
)	O
{	O
mp	O
->	O
range	O
.	O
min	int
=	O
min	int
;	O
mp	O
->	O
range	O
.	O
max	int
=	O
max	int
;	O
}	O
else	O
if	O
(	O
min	int
<	O
0	int
&&	O
max	int
<	O
0	int
)	O
{	O
mp	O
->	O
range	O
.	O
min	int
=	O
-	O
1	int
;	O
mp	O
->	O
range	O
.	O
max	int
=	O
-	O
1	int
;	O
}	O
}	O
const	O
char	O
*	O
po_filepos_file	function
(	O
po_filepos_t	O
filepos	int
)	O
{	O
lex_pos_ty	O
*	O
pp	O
=	O
(	O
lex_pos_ty	O
*	O
)	O
filepos	int
;	O
return	O
pp	O
->	O
file_name	O
;	O
}	O
size_t	int
po_filepos_start_line	function
(	O
po_filepos_t	O
filepos	int
)	O
{	O
lex_pos_ty	O
*	O
pp	O
=	O
(	O
lex_pos_ty	O
*	O
)	O
filepos	int
;	O
return	O
pp	O
->	O
line_number	O
;	O
}	O
const	O
char	O
*	O
const	O
*	O
po_format_list	function
(	O
void	O
)	O
{	O
static	O
const	O
char	O
*	O
const	O
*	O
whole_list	pointer
;	O
if	O
(	O
whole_list	pointer
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
*	O
list	pointer
=	O
XNMALLOC	function
(	O
NFORMATS	O
+	O
1	int
,	O
const	O
char	O
*	O
)	O
;	O
size_t	int
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NFORMATS	O
;	O
i	int
++	O
)	O
list	pointer
[	O
i	int
]	O
=	O
xasprintf	O
(	O
"%s-format"	pointer
,	O
format_language	O
[	O
i	int
]	O
)	O
;	O
list	pointer
[	O
i	int
]	O
=	O
NULL	O
;	O
whole_list	pointer
=	O
list	pointer
;	O
}	O
return	O
whole_list	pointer
;	O
}	O
const	O
char	O
*	O
po_format_pretty_name	function
(	O
const	O
char	O
*	O
format_type	pointer
)	O
{	O
size_t	int
len	O
=	O
strlen	O
(	O
format_type	pointer
)	O
;	O
size_t	int
i	int
;	O
if	O
(	O
len	O
>=	O
7	int
&&	O
memcmp	O
(	O
format_type	pointer
+	O
len	O
-	O
7	int
,	O
"-format"	pointer
,	O
7	int
)	O
==	O
0	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NFORMATS	O
;	O
i	int
++	O
)	O
if	O
(	O
strlen	O
(	O
format_language	O
[	O
i	int
]	O
)	O
==	O
len	O
-	O
7	int
&&	O
memcmp	O
(	O
format_language	O
[	O
i	int
]	O
,	O
format_type	pointer
,	O
len	O
-	O
7	int
)	O
==	O
0	int
)	O
return	O
format_language_pretty	O
[	O
i	int
]	O
;	O
return	O
NULL	O
;	O
}	O
void	O
po_file_check_all	function
(	O
po_file_t	O
file	int
,	O
po_xerror_handler_t	O
handler	int
)	O
{	O
msgdomain_list_ty	O
*	O
mdlp	O
;	O
size_t	int
k	O
;	O
po_xerror	O
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
handler	int
->	O
xerror	O
;	O
po_xerror2	O
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
handler	int
->	O
xerror2	O
;	O
mdlp	O
=	O
file	int
->	O
mdlp	O
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
mdlp	O
->	O
nitems	O
;	O
k	O
++	O
)	O
check_message_list	O
(	O
mdlp	O
->	O
item	O
[	O
k	O
]	O
->	O
messages	O
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
po_xerror	O
=	O
textmode_xerror	O
;	O
po_xerror2	O
=	O
textmode_xerror2	O
;	O
}	O
void	O
po_message_check_all	function
(	O
po_message_t	O
message	int
,	O
po_message_iterator_t	O
iterator	int
,	O
po_xerror_handler_t	O
handler	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
po_xerror	O
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
handler	int
->	O
xerror	O
;	O
po_xerror2	O
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
handler	int
->	O
xerror2	O
;	O
{	O
message_ty	O
*	O
header	pointer
;	O
{	O
message_list_ty	O
*	O
mlp	pointer
;	O
size_t	int
j	O
;	O
header	pointer
=	O
NULL	O
;	O
mlp	pointer
=	O
msgdomain_list_sublist	O
(	O
iterator	int
->	O
file	int
->	O
mdlp	O
,	O
iterator	int
->	O
domain	pointer
,	O
false	O
)	O
;	O
if	O
(	O
mlp	pointer
!=	O
NULL	O
)	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	pointer
->	O
nitems	O
;	O
j	O
++	O
)	O
if	O
(	O
is_header	function
(	O
mlp	pointer
->	O
item	O
[	O
j	O
]	O
)	O
&&	O
!	O
mlp	pointer
->	O
item	O
[	O
j	O
]	O
->	O
obsolete	int
)	O
{	O
header	pointer
=	O
mlp	pointer
->	O
item	O
[	O
j	O
]	O
;	O
break	O
;	O
}	O
}	O
{	O
message_ty	O
*	O
items	O
[	O
2	int
]	O
;	O
struct	O
message_list_ty	O
ml	struct
;	O
ml	struct
.	O
item	O
=	O
items	O
;	O
ml	struct
.	O
nitems	O
=	O
0	int
;	O
ml	struct
.	O
nitems_max	O
=	O
2	int
;	O
ml	struct
.	O
use_hashtable	O
=	O
false	O
;	O
if	O
(	O
header	pointer
!=	O
NULL	O
)	O
message_list_append	O
(	O
&	O
ml	struct
,	O
header	pointer
)	O
;	O
if	O
(	O
mp	O
!=	O
header	pointer
)	O
message_list_append	O
(	O
&	O
ml	struct
,	O
mp	O
)	O
;	O
check_message_list	O
(	O
&	O
ml	struct
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
}	O
po_xerror	O
=	O
textmode_xerror	O
;	O
po_xerror2	O
=	O
textmode_xerror2	O
;	O
}	O
void	O
po_message_check_format	function
(	O
po_message_t	O
message	int
,	O
po_xerror_handler_t	O
handler	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
po_xerror	O
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
handler	int
->	O
xerror	O
;	O
po_xerror2	O
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
,	O
const	O
message_ty	O
*	O
,	O
const	O
char	O
*	O
,	O
size_t	int
,	O
size_t	int
,	O
int	O
,	O
const	O
char	O
*	O
)	O
)	O
handler	int
->	O
xerror2	O
;	O
if	O
(	O
!	O
mp	O
->	O
obsolete	int
)	O
check_message	O
(	O
mp	O
,	O
&	O
mp	O
->	O
pos	O
,	O
0	int
,	O
1	int
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
po_xerror	O
=	O
textmode_xerror	O
;	O
po_xerror2	O
=	O
textmode_xerror2	O
;	O
}	O
static	O
void	O
po_error_logger	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
__attribute__	O
(	O
(	O
__format__	O
(	O
__printf__	O
,	O
1	int
,	O
2	int
)	O
)	O
)	O
;	O
static	O
void	O
po_error_logger	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	O
args	O
;	O
char	O
*	O
error_message	pointer
;	O
va_start	O
(	O
args	O
,	O
format	pointer
)	O
;	O
if	O
(	O
vasprintf	function
(	O
&	O
error_message	pointer
,	O
format	pointer
,	O
args	O
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	O
,	O
0	int
,	O
_	O
(	O
"memory exhausted"	pointer
)	O
)	O
;	O
va_end	O
(	O
args	O
)	O
;	O
po_error	O
(	O
0	int
,	O
0	int
,	O
"%s"	pointer
,	O
error_message	pointer
)	O
;	O
free	function
(	O
error_message	pointer
)	O
;	O
}	O
void	O
po_message_check_format	function
(	O
po_message_t	O
message	int
,	O
po_error_handler_t	O
handler	int
)	O
{	O
message_ty	O
*	O
mp	O
=	O
(	O
message_ty	O
*	O
)	O
message	int
;	O
po_error	O
=	O
handler	int
->	O
error	function
;	O
check_msgid_msgstr_format	O
(	O
mp	O
->	O
msgid	pointer
,	O
mp	O
->	O
msgid_plural	pointer
,	O
mp	O
->	O
msgstr	pointer
,	O
mp	O
->	O
msgstr_len	O
,	O
mp	O
->	O
is_format	O
,	O
mp	O
->	O
range	O
,	O
NULL	O
,	O
po_error_logger	function
)	O
;	O
po_error	O
=	O
error	function
;	O
}	O
