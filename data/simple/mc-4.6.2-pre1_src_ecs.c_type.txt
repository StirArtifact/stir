extern	O
gboolean	int
ecs_mbstr_to_str	function
(	O
ecs_char	char
*	O
*	O
ret_str	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
*	O
ret_str	pointer
=	O
g_strdup	function
(	O
s	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
extern	O
gboolean	int
ecs_str_to_mbstr	function
(	O
char	O
*	O
*	O
ret_str	pointer
,	O
const	O
ecs_char	char
*	O
s	pointer
)	O
{	O
*	O
ret_str	pointer
=	O
g_strdup	function
(	O
s	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
extern	O
gboolean	int
ecs_isalnum	function
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswalnum	O
,	O
isalnum	function
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isalpha	function
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswalpha	O
,	O
isalpha	function
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_iscntrl	function
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswcntrl	O
,	O
iscntrl	function
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isdigit	function
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswdigit	O
,	O
isdigit	function
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isgraph	function
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswgraph	O
,	O
isgraph	function
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_islower	function
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswlower	O
,	O
islower	function
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isprint	function
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswprint	O
,	O
isprint	function
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_ispunct	function
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswpunct	O
,	O
ispunct	function
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isspace	function
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswspace	O
,	O
isspace	function
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isupper	function
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswupper	O
,	O
isupper	function
,	O
c	int
)	O
;	O
}	O
extern	O
gboolean	int
ecs_isxdigit	function
(	O
ecs_char	char
c	int
)	O
{	O
return	O
ECS_CTYPE	O
(	O
iswxdigit	O
,	O
isxdigit	function
,	O
c	int
)	O
;	O
}	O
int	O
ecs_strcmp	function
(	O
const	O
ecs_char	char
*	O
a	pointer
,	O
const	O
ecs_char	char
*	O
b	pointer
)	O
{	O
size_t	long
i	array
;	O
unsigned	O
long	O
ca	long
,	O
cb	long
;	O
for	O
(	O
i	array
=	O
0	int
;	O
a	pointer
[	O
i	array
]	O
==	O
b	pointer
[	O
i	array
]	O
;	O
i	array
++	O
)	O
{	O
if	O
(	O
a	pointer
[	O
i	array
]	O
==	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
return	O
0	int
;	O
}	O
ca	long
=	O
(	O
unsigned	O
long	O
)	O
a	pointer
[	O
i	array
]	O
;	O
cb	long
=	O
(	O
unsigned	O
long	O
)	O
b	pointer
[	O
i	array
]	O
;	O
return	O
(	O
ca	long
<	O
cb	long
)	O
?	O
-	O
1	int
:	O
(	O
ca	long
>	O
cb	long
)	O
?	O
1	int
:	O
0	int
;	O
}	O
ecs_char	char
*	O
ecs_strchr	function
(	O
const	O
ecs_char	char
*	O
s	pointer
,	O
ecs_char	char
c	int
)	O
{	O
size_t	long
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
s	pointer
[	O
i	array
]	O
!=	O
c	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
s	pointer
[	O
i	array
]	O
==	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
return	O
NULL	O
;	O
}	O
return	O
(	O
ecs_char	char
*	O
)	O
s	pointer
+	O
i	array
;	O
}	O
size_t	long
ecs_strcspn	function
(	O
const	O
ecs_char	char
*	O
haystack	pointer
,	O
const	O
ecs_char	char
*	O
needles	pointer
)	O
{	O
size_t	long
i	array
,	O
j	long
;	O
for	O
(	O
i	array
=	O
0	int
;	O
haystack	pointer
[	O
i	array
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
i	array
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
needles	pointer
[	O
j	long
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
j	long
++	O
)	O
{	O
if	O
(	O
haystack	pointer
[	O
i	array
]	O
==	O
needles	pointer
[	O
j	long
]	O
)	O
return	O
i	array
;	O
}	O
}	O
return	O
i	array
;	O
}	O
ecs_char	char
*	O
ecs_strrchr	function
(	O
const	O
ecs_char	char
*	O
s	pointer
,	O
ecs_char	char
c	int
)	O
{	O
ecs_char	char
*	O
pos	pointer
;	O
size_t	long
i	array
;	O
for	O
(	O
i	array
=	O
0	int
,	O
pos	pointer
=	O
NULL	O
;	O
;	O
i	array
++	O
)	O
{	O
if	O
(	O
s	pointer
[	O
i	array
]	O
==	O
c	int
)	O
pos	pointer
=	O
(	O
ecs_char	char
*	O
)	O
s	pointer
+	O
i	array
;	O
if	O
(	O
s	pointer
[	O
i	array
]	O
==	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
return	O
pos	pointer
;	O
}	O
}	O
size_t	long
ecs_strspn	function
(	O
const	O
ecs_char	char
*	O
s	pointer
,	O
const	O
ecs_char	char
*	O
chars	pointer
)	O
{	O
size_t	long
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
s	pointer
[	O
i	array
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
i	array
++	O
)	O
{	O
if	O
(	O
ecs_strchr	function
(	O
chars	pointer
,	O
s	pointer
[	O
i	array
]	O
)	O
==	O
NULL	O
)	O
break	O
;	O
}	O
return	O
i	array
;	O
}	O
ecs_char	char
*	O
ecs_strstr	function
(	O
const	O
ecs_char	char
*	O
s	pointer
,	O
const	O
ecs_char	char
*	O
sub	pointer
)	O
{	O
size_t	long
i	array
,	O
j	long
;	O
for	O
(	O
i	array
=	O
0	int
;	O
s	pointer
[	O
i	array
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
i	array
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
sub	pointer
[	O
j	long
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
j	long
++	O
)	O
{	O
if	O
(	O
s	pointer
[	O
i	array
+	O
j	long
]	O
!=	O
sub	pointer
[	O
j	long
]	O
)	O
goto	O
next_i	O
;	O
}	O
return	O
(	O
ecs_char	char
*	O
)	O
s	pointer
+	O
i	array
;	O
next_i	O
:	O
continue	O
;	O
}	O
return	O
NULL	O
;	O
}	O
size_t	long
ecs_strlen	function
(	O
const	O
ecs_char	char
*	O
s	pointer
)	O
{	O
size_t	long
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
s	pointer
[	O
i	array
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
i	array
++	O
)	O
continue	O
;	O
return	O
i	array
;	O
}	O
ecs_char	char
*	O
ecs_xstrdup	function
(	O
const	O
ecs_char	char
*	O
s	pointer
)	O
{	O
ecs_char	char
*	O
retval	pointer
;	O
size_t	long
len	int
;	O
len	int
=	O
ecs_strlen	function
(	O
s	pointer
)	O
;	O
retval	pointer
=	O
g_new	O
(	O
ecs_char	char
,	O
len	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
retval	pointer
,	O
s	pointer
,	O
(	O
len	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
ecs_char	char
)	O
)	O
;	O
return	O
retval	pointer
;	O
}	O
size_t	long
ecs_strlcpy	function
(	O
ecs_char	char
*	O
dst	pointer
,	O
const	O
ecs_char	char
*	O
src	pointer
,	O
size_t	long
dstsize	long
)	O
{	O
size_t	long
n	long
=	O
0	int
;	O
if	O
(	O
dstsize	long
>=	O
1	int
)	O
{	O
while	O
(	O
n	long
<	O
dstsize	long
-	O
1	int
&&	O
*	O
src	pointer
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
{	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
++	O
;	O
n	long
++	O
;	O
}	O
*	O
dst	pointer
=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
}	O
while	O
(	O
*	O
src	pointer
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
{	O
n	long
++	O
;	O
src	pointer
++	O
;	O
}	O
return	O
n	long
;	O
}	O
size_t	long
ecs_strlcat	function
(	O
ecs_char	char
*	O
dst	pointer
,	O
const	O
ecs_char	char
*	O
src	pointer
,	O
size_t	long
dstsize	long
)	O
{	O
size_t	long
di	long
=	O
0	int
;	O
while	O
(	O
di	long
<	O
dstsize	long
&&	O
dst	pointer
[	O
di	long
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
)	O
di	long
++	O
;	O
return	O
di	long
+	O
ecs_strlcpy	function
(	O
dst	pointer
+	O
di	long
,	O
src	pointer
,	O
dstsize	long
-	O
di	long
)	O
;	O
}	O
gboolean	int
ecs_strbox	function
(	O
const	O
ecs_char	char
*	O
s	pointer
,	O
size_t	long
*	O
ret_width	pointer
,	O
size_t	long
*	O
ret_height	pointer
)	O
{	O
size_t	long
nlines	long
=	O
0	int
,	O
ncolumns	long
=	O
0	int
,	O
colindex	long
=	O
0	int
,	O
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
s	pointer
[	O
i	array
]	O
!=	O
ECS_CHAR	O
(	O
'\0'	O
)	O
;	O
i	array
++	O
)	O
{	O
if	O
(	O
s	pointer
[	O
i	array
]	O
==	O
ECS_CHAR	O
(	O
'\n'	O
)	O
)	O
{	O
nlines	long
++	O
;	O
colindex	long
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
ecs_isprint	function
(	O
s	pointer
[	O
i	array
]	O
)	O
)	O
return	O
FALSE	O
;	O
colindex	long
++	O
;	O
if	O
(	O
colindex	long
>	O
ncolumns	long
)	O
ncolumns	long
=	O
colindex	long
;	O
}	O
}	O
*	O
ret_width	pointer
=	O
ncolumns	long
;	O
*	O
ret_height	pointer
=	O
nlines	long
;	O
return	O
TRUE	O
;	O
}	O
