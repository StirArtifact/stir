kern_return_t	O
_pager_S_memory_object_lock_completed	function
(	O
struct	O
pager	struct
*	O
p	pointer
,	O
mach_port_t	O
control	int
,	O
vm_offset_t	int
offset	int
,	O
vm_size_t	int
length	int
)	O
{	O
error_t	int
err	O
=	O
0	int
;	O
struct	O
lock_request	struct
*	O
lr	pointer
;	O
if	O
(	O
!	O
p	pointer
||	O
p	pointer
->	O
port	struct
.	O
class	O
!=	O
_pager_class	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
pthread_mutex_lock	function
(	O
&	O
p	pointer
->	O
interlock	int
)	O
;	O
if	O
(	O
control	int
!=	O
p	pointer
->	O
memobjcntl	int
)	O
{	O
printf	O
(	O
"lock_completed: bad control port\n"	pointer
)	O
;	O
err	O
=	O
EPERM	O
;	O
goto	O
out	O
;	O
}	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
control	int
)	O
;	O
for	O
(	O
lr	pointer
=	O
p	pointer
->	O
lock_requests	pointer
;	O
lr	pointer
;	O
lr	pointer
=	O
lr	pointer
->	O
next	pointer
)	O
if	O
(	O
lr	pointer
->	O
start	int
==	O
offset	int
&&	O
lr	pointer
->	O
end	int
==	O
offset	int
+	O
length	int
)	O
{	O
if	O
(	O
lr	pointer
->	O
locks_pending	int
)	O
--	O
lr	pointer
->	O
locks_pending	int
;	O
if	O
(	O
!	O
lr	pointer
->	O
locks_pending	int
&&	O
!	O
lr	pointer
->	O
pending_writes	int
)	O
pthread_cond_broadcast	function
(	O
&	O
p	pointer
->	O
wakeup	int
)	O
;	O
break	O
;	O
}	O
out	O
:	O
pthread_mutex_unlock	function
(	O
&	O
p	pointer
->	O
interlock	int
)	O
;	O
return	O
err	O
;	O
}	O
