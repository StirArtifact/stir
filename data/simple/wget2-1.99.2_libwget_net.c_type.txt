static	O
struct	O
wget_tcp_st	struct
_global_tcp	struct
=	O
{	O
.	O
sockfd	int
=	O
-	O
1	int
,	O
.	O
dns_timeout	int
=	O
-	O
1	int
,	O
.	O
connect_timeout	int
=	O
-	O
1	int
,	O
.	O
timeout	int
=	O
-	O
1	int
,	O
.	O
family	int
=	O
AF_UNSPEC	O
,	O
.	O
tcp_fastopen	int
=	O
1	int
,	O
}	O
;	O
typedef	O
struct	O
{	O
const	O
char	O
*	O
hostname	pointer
,	O
*	O
ip	pointer
;	O
uint16_t	short
port	short
;	O
long	O
long	O
dns_secs	long long
;	O
}	O
_stats_data_t	struct
;	O
int	O
wget_net_init	function
(	O
void	O
)	O
{	O
int	O
rc	int
=	O
gl_sockets_startup	function
(	O
SOCKETS_2_2	int
)	O
;	O
return	O
rc	int
?	O
-	O
1	int
:	O
0	int
;	O
}	O
int	O
wget_net_deinit	function
(	O
void	O
)	O
{	O
int	O
rc	int
=	O
gl_sockets_cleanup	function
(	O
)	O
;	O
return	O
rc	int
?	O
-	O
1	int
:	O
0	int
;	O
}	O
static	O
int	O
WGET_GCC_CONST	O
_value_to_family	function
(	O
int	O
value	pointer
)	O
{	O
switch	O
(	O
value	pointer
)	O
{	O
case	O
WGET_NET_FAMILY_IPV4	int
:	O
return	O
AF_INET	O
;	O
case	O
WGET_NET_FAMILY_IPV6	int
:	O
return	O
AF_INET6	O
;	O
default	O
:	O
return	O
AF_UNSPEC	O
;	O
}	O
}	O
static	O
int	O
WGET_GCC_CONST	O
_family_to_value	function
(	O
int	O
family	int
)	O
{	O
switch	O
(	O
family	int
)	O
{	O
case	O
AF_INET	O
:	O
return	O
WGET_NET_FAMILY_IPV4	int
;	O
case	O
AF_INET6	O
:	O
return	O
WGET_NET_FAMILY_IPV6	int
;	O
default	O
:	O
return	O
WGET_NET_FAMILY_ANY	int
;	O
}	O
}	O
void	O
wget_tcp_set_dns	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
wget_dns	struct
*	O
dns	pointer
)	O
{	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
dns	pointer
=	O
dns	pointer
;	O
}	O
void	O
wget_tcp_set_tcp_fastopen	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
int	O
tcp_fastopen	int
)	O
{	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
tcp_fastopen	int
=	O
!	O
!	O
tcp_fastopen	int
;	O
}	O
char	O
wget_tcp_get_tcp_fastopen	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
return	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
tcp_fastopen	int
;	O
}	O
void	O
wget_tcp_set_tls_false_start	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
int	O
false_start	int
)	O
{	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
tls_false_start	bool
=	O
!	O
!	O
false_start	int
;	O
}	O
char	O
wget_tcp_get_tls_false_start	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
return	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
tls_false_start	bool
;	O
}	O
void	O
wget_tcp_set_protocol	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
int	O
protocol	int
)	O
{	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
protocol	int
=	O
protocol	int
;	O
}	O
int	O
wget_tcp_get_protocol	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
return	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
protocol	int
;	O
}	O
void	O
wget_tcp_set_preferred_family	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
int	O
family	int
)	O
{	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
preferred_family	int
=	O
_value_to_family	function
(	O
family	int
)	O
;	O
}	O
int	O
wget_tcp_get_preferred_family	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
return	O
_family_to_value	function
(	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
preferred_family	int
)	O
;	O
}	O
void	O
wget_tcp_set_family	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
int	O
family	int
)	O
{	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
family	int
=	O
_value_to_family	function
(	O
family	int
)	O
;	O
}	O
int	O
wget_tcp_get_family	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
return	O
_family_to_value	function
(	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
family	int
)	O
;	O
}	O
int	O
wget_tcp_get_local_port	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
if	O
(	O
unlikely	O
(	O
!	O
tcp	pointer
)	O
)	O
return	O
0	int
;	O
struct	O
sockaddr_storage	struct
addr_store	struct
;	O
struct	O
sockaddr	struct
*	O
addr	pointer
=	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr_store	struct
;	O
socklen_t	int
addr_len	int
=	O
sizeof	O
(	O
addr_store	struct
)	O
;	O
if	O
(	O
getsockname	function
(	O
tcp	pointer
->	O
sockfd	int
,	O
addr	pointer
,	O
&	O
addr_len	int
)	O
==	O
0	int
)	O
{	O
char	O
s_port	int
[	O
NI_MAXSERV	int
]	O
;	O
if	O
(	O
getnameinfo	function
(	O
addr	pointer
,	O
addr_len	int
,	O
NULL	O
,	O
0	int
,	O
s_port	int
,	O
sizeof	O
(	O
s_port	int
)	O
,	O
NI_NUMERICSERV	int
)	O
==	O
0	int
)	O
return	O
atoi	function
(	O
s_port	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
wget_tcp_set_connect_timeout	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
int	O
timeout	int
)	O
{	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
connect_timeout	int
=	O
timeout	int
;	O
}	O
void	O
wget_tcp_set_timeout	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
int	O
timeout	int
)	O
{	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
timeout	int
=	O
timeout	int
;	O
}	O
int	O
wget_tcp_get_timeout	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
return	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
timeout	int
;	O
}	O
void	O
wget_tcp_set_bind_address	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
const	O
char	O
*	O
bind_address	pointer
)	O
{	O
if	O
(	O
!	O
tcp	pointer
)	O
tcp	pointer
=	O
&	O
_global_tcp	struct
;	O
wget_dns_freeaddrinfo	function
(	O
tcp	pointer
->	O
dns	pointer
,	O
&	O
tcp	pointer
->	O
bind_addrinfo	pointer
)	O
;	O
if	O
(	O
bind_address	pointer
)	O
{	O
char	O
copy	O
[	O
strlen	function
(	O
bind_address	pointer
)	O
+	O
1	int
]	O
,	O
*	O
s	pointer
=	O
copy	O
;	O
const	O
char	O
*	O
host	pointer
;	O
memcpy	function
(	O
copy	O
,	O
bind_address	pointer
,	O
sizeof	O
(	O
copy	O
)	O
)	O
;	O
if	O
(	O
*	O
s	pointer
==	O
'['	O
)	O
{	O
char	O
*	O
p	pointer
=	O
strrchr	function
(	O
s	pointer
,	O
']'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
host	pointer
=	O
s	pointer
+	O
1	int
;	O
s	pointer
=	O
p	pointer
+	O
1	int
;	O
}	O
else	O
{	O
host	pointer
=	O
s	pointer
+	O
1	int
;	O
while	O
(	O
*	O
s	pointer
)	O
s	pointer
++	O
;	O
}	O
}	O
else	O
{	O
host	pointer
=	O
s	pointer
;	O
while	O
(	O
*	O
s	pointer
&&	O
*	O
s	pointer
!=	O
':'	O
)	O
s	pointer
++	O
;	O
}	O
if	O
(	O
*	O
s	pointer
==	O
':'	O
)	O
{	O
*	O
s	pointer
++	O
=	O
0	int
;	O
if	O
(	O
c_isdigit	function
(	O
*	O
s	pointer
)	O
)	O
tcp	pointer
->	O
bind_addrinfo	pointer
=	O
wget_dns_resolve	function
(	O
tcp	pointer
->	O
dns	pointer
,	O
host	pointer
,	O
(	O
uint16_t	short
)	O
atoi	function
(	O
s	pointer
)	O
,	O
tcp	pointer
->	O
family	int
,	O
tcp	pointer
->	O
preferred_family	int
)	O
;	O
}	O
else	O
{	O
tcp	pointer
->	O
bind_addrinfo	pointer
=	O
wget_dns_resolve	function
(	O
tcp	pointer
->	O
dns	pointer
,	O
host	pointer
,	O
0	int
,	O
tcp	pointer
->	O
family	int
,	O
tcp	pointer
->	O
preferred_family	int
)	O
;	O
}	O
}	O
}	O
void	O
wget_tcp_set_ssl	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
int	O
ssl	int
)	O
{	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
ssl	int
=	O
!	O
!	O
ssl	int
;	O
}	O
int	O
wget_tcp_get_ssl	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
return	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
ssl	int
;	O
}	O
const	O
char	O
*	O
wget_tcp_get_ip	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
return	O
tcp	pointer
?	O
tcp	pointer
->	O
ip	pointer
:	O
NULL	O
;	O
}	O
void	O
wget_tcp_set_ssl_hostname	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
const	O
char	O
*	O
hostname	pointer
)	O
{	O
if	O
(	O
!	O
tcp	pointer
)	O
tcp	pointer
=	O
&	O
_global_tcp	struct
;	O
xfree	O
(	O
tcp	pointer
->	O
ssl_hostname	pointer
)	O
;	O
tcp	pointer
->	O
ssl_hostname	pointer
=	O
wget_strdup	function
(	O
hostname	pointer
)	O
;	O
}	O
const	O
char	O
*	O
wget_tcp_get_ssl_hostname	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
return	O
(	O
tcp	pointer
?	O
tcp	pointer
:	O
&	O
_global_tcp	struct
)	O
->	O
ssl_hostname	pointer
;	O
}	O
wget_tcp	struct
*	O
wget_tcp_init	function
(	O
void	O
)	O
{	O
wget_tcp	struct
*	O
tcp	pointer
=	O
wget_malloc	function
(	O
sizeof	O
(	O
wget_tcp	struct
)	O
)	O
;	O
if	O
(	O
tcp	pointer
)	O
{	O
*	O
tcp	pointer
=	O
_global_tcp	struct
;	O
tcp	pointer
->	O
ssl_hostname	pointer
=	O
wget_strdup	function
(	O
_global_tcp	struct
.	O
ssl_hostname	pointer
)	O
;	O
}	O
return	O
tcp	pointer
;	O
}	O
void	O
wget_tcp_deinit	function
(	O
wget_tcp	struct
*	O
*	O
_tcp	pointer
)	O
{	O
wget_tcp	struct
*	O
tcp	pointer
;	O
if	O
(	O
!	O
_tcp	pointer
)	O
{	O
xfree	O
(	O
_global_tcp	struct
.	O
ssl_hostname	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
tcp	pointer
=	O
*	O
_tcp	pointer
)	O
)	O
{	O
wget_tcp_close	function
(	O
tcp	pointer
)	O
;	O
wget_dns_freeaddrinfo	function
(	O
tcp	pointer
->	O
dns	pointer
,	O
&	O
tcp	pointer
->	O
bind_addrinfo	pointer
)	O
;	O
xfree	O
(	O
tcp	pointer
->	O
ssl_hostname	pointer
)	O
;	O
xfree	O
(	O
tcp	pointer
->	O
ip	pointer
)	O
;	O
xfree	O
(	O
tcp	pointer
)	O
;	O
*	O
_tcp	pointer
=	O
NULL	O
;	O
}	O
}	O
static	O
void	O
_set_async	function
(	O
int	O
fd	array
)	O
{	O
int	O
flags	int
;	O
if	O
(	O
(	O
flags	int
=	O
fcntl	function
(	O
fd	array
,	O
F_GETFL	int
)	O
)	O
<	O
0	int
)	O
error_printf_exit	O
(	O
_	O
(	O
"Failed to get socket flags\n"	pointer
)	O
)	O
;	O
if	O
(	O
fcntl	function
(	O
fd	array
,	O
F_SETFL	int
,	O
flags	int
|	O
O_NONBLOCK	int
)	O
<	O
0	int
)	O
error_printf_exit	O
(	O
_	O
(	O
"Failed to set socket to non-blocking\n"	pointer
)	O
)	O
;	O
}	O
static	O
void	O
_set_socket_options	function
(	O
int	O
fd	array
)	O
{	O
int	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	function
(	O
fd	array
,	O
SOL_SOCKET	int
,	O
SO_REUSEADDR	int
,	O
(	O
void	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
==	O
-	O
1	int
)	O
error_printf	O
(	O
_	O
(	O
"Failed to set socket option REUSEADDR\n"	pointer
)	O
)	O
;	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	function
(	O
fd	array
,	O
IPPROTO_TCP	int
,	O
TCP_NODELAY	int
,	O
(	O
void	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
==	O
-	O
1	int
)	O
error_printf	O
(	O
_	O
(	O
"Failed to set socket option NODELAY\n"	pointer
)	O
)	O
;	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	function
(	O
fd	array
,	O
IPPROTO_TCP	int
,	O
TCP_FASTOPEN_CONNECT	int
,	O
(	O
void	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
==	O
-	O
1	int
)	O
debug_printf	O
(	O
"Failed to set socket option TCP_FASTOPEN_CONNECT\n"	pointer
)	O
;	O
}	O
int	O
wget_tcp_ready_2_transfer	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
likely	O
(	O
tcp	pointer
)	O
)	O
return	O
wget_ready_2_transfer	function
(	O
tcp	pointer
->	O
sockfd	int
,	O
tcp	pointer
->	O
timeout	int
,	O
flags	int
)	O
;	O
else	O
return	O
-	O
1	int
;	O
}	O
int	O
wget_tcp_connect	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
const	O
char	O
*	O
host	pointer
,	O
uint16_t	short
port	short
)	O
{	O
struct	O
addrinfo	struct
*	O
ai	pointer
;	O
int	O
rc	int
,	O
ret	int
=	O
WGET_E_UNKNOWN	int
;	O
char	O
adr	array
[	O
NI_MAXHOST	int
]	O
,	O
s_port	int
[	O
NI_MAXSERV	int
]	O
;	O
int	O
debug	int
=	O
wget_logger_is_active	function
(	O
wget_get_logger	function
(	O
WGET_LOGGER_DEBUG	int
)	O
)	O
;	O
if	O
(	O
unlikely	O
(	O
!	O
tcp	pointer
)	O
)	O
return	O
WGET_E_INVALID	int
;	O
wget_dns_freeaddrinfo	function
(	O
tcp	pointer
->	O
dns	pointer
,	O
&	O
tcp	pointer
->	O
addrinfo	struct
)	O
;	O
tcp	pointer
->	O
addrinfo	struct
=	O
wget_dns_resolve	function
(	O
tcp	pointer
->	O
dns	pointer
,	O
host	pointer
,	O
port	short
,	O
tcp	pointer
->	O
family	int
,	O
tcp	pointer
->	O
preferred_family	int
)	O
;	O
for	O
(	O
ai	pointer
=	O
tcp	pointer
->	O
addrinfo	struct
;	O
ai	pointer
;	O
ai	pointer
=	O
ai	pointer
->	O
ai_next	pointer
)	O
{	O
if	O
(	O
debug	int
)	O
{	O
rc	int
=	O
getnameinfo	function
(	O
ai	pointer
->	O
ai_addr	pointer
,	O
ai	pointer
->	O
ai_addrlen	int
,	O
adr	array
,	O
sizeof	O
(	O
adr	array
)	O
,	O
s_port	int
,	O
sizeof	O
(	O
s_port	int
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
debug_printf	O
(	O
"trying %s:%s...\n"	pointer
,	O
adr	array
,	O
s_port	int
)	O
;	O
else	O
debug_printf	O
(	O
"trying ???:%s (%s)...\n"	pointer
,	O
s_port	int
,	O
gai_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
int	O
sockfd	int
;	O
if	O
(	O
(	O
sockfd	int
=	O
socket	function
(	O
ai	pointer
->	O
ai_family	int
,	O
ai	pointer
->	O
ai_socktype	int
,	O
ai	pointer
->	O
ai_protocol	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
_set_async	function
(	O
sockfd	int
)	O
;	O
_set_socket_options	function
(	O
sockfd	int
)	O
;	O
if	O
(	O
tcp	pointer
->	O
bind_addrinfo	pointer
)	O
{	O
if	O
(	O
debug	int
)	O
{	O
rc	int
=	O
getnameinfo	function
(	O
tcp	pointer
->	O
bind_addrinfo	pointer
->	O
ai_addr	pointer
,	O
tcp	pointer
->	O
bind_addrinfo	pointer
->	O
ai_addrlen	int
,	O
adr	array
,	O
sizeof	O
(	O
adr	array
)	O
,	O
s_port	int
,	O
sizeof	O
(	O
s_port	int
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
debug_printf	O
(	O
"binding to %s:%s...\n"	pointer
,	O
adr	array
,	O
s_port	int
)	O
;	O
else	O
debug_printf	O
(	O
"binding to ???:%s (%s)...\n"	pointer
,	O
s_port	int
,	O
gai_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
if	O
(	O
bind	function
(	O
sockfd	int
,	O
tcp	pointer
->	O
bind_addrinfo	pointer
->	O
ai_addr	pointer
,	O
tcp	pointer
->	O
bind_addrinfo	pointer
->	O
ai_addrlen	int
)	O
!=	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to bind (%d)\n"	pointer
)	O
,	O
errno	O
)	O
;	O
close	pointer
(	O
sockfd	int
)	O
;	O
return	O
WGET_E_UNKNOWN	int
;	O
}	O
}	O
if	O
(	O
tcp	pointer
->	O
tcp_fastopen	int
)	O
{	O
tcp	pointer
->	O
connect_addrinfo	pointer
=	O
ai	pointer
;	O
rc	int
=	O
connect	function
(	O
sockfd	int
,	O
ai	pointer
->	O
ai_addr	pointer
,	O
ai	pointer
->	O
ai_addrlen	int
)	O
;	O
tcp	pointer
->	O
first_send	bool
=	O
0	int
;	O
}	O
else	O
{	O
rc	int
=	O
connect	function
(	O
sockfd	int
,	O
ai	pointer
->	O
ai_addr	pointer
,	O
ai	pointer
->	O
ai_addrlen	int
)	O
;	O
tcp	pointer
->	O
first_send	bool
=	O
0	int
;	O
}	O
if	O
(	O
rc	int
<	O
0	int
&&	O
errno	O
!=	O
EAGAIN	int
&&	O
errno	O
!=	O
EINPROGRESS	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to connect (%d)\n"	pointer
)	O
,	O
errno	O
)	O
;	O
ret	int
=	O
WGET_E_CONNECT	int
;	O
close	pointer
(	O
sockfd	int
)	O
;	O
}	O
else	O
{	O
tcp	pointer
->	O
sockfd	int
=	O
sockfd	int
;	O
if	O
(	O
tcp	pointer
->	O
ssl	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
wget_ssl_open	function
(	O
tcp	pointer
)	O
)	O
)	O
{	O
if	O
(	O
ret	int
==	O
WGET_E_CERTIFICATE	int
)	O
{	O
wget_tcp_close	function
(	O
tcp	pointer
)	O
;	O
break	O
;	O
}	O
struct	O
addrinfo	struct
*	O
ai_tmp	pointer
=	O
tcp	pointer
->	O
addrinfo	struct
;	O
tcp	pointer
->	O
addrinfo	struct
=	O
NULL	O
;	O
wget_tcp_close	function
(	O
tcp	pointer
)	O
;	O
tcp	pointer
->	O
addrinfo	struct
=	O
ai_tmp	pointer
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
(	O
rc	int
=	O
getnameinfo	function
(	O
ai	pointer
->	O
ai_addr	pointer
,	O
ai	pointer
->	O
ai_addrlen	int
,	O
adr	array
,	O
sizeof	O
(	O
adr	array
)	O
,	O
s_port	int
,	O
sizeof	O
(	O
s_port	int
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
)	O
==	O
0	int
)	O
tcp	pointer
->	O
ip	pointer
=	O
wget_strdup	function
(	O
adr	array
)	O
;	O
else	O
tcp	pointer
->	O
ip	pointer
=	O
NULL	O
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
}	O
else	O
error_printf	O
(	O
_	O
(	O
"Failed to create socket (%d)\n"	pointer
)	O
,	O
errno	O
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
wget_tcp_tls_start	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
return	O
wget_ssl_open	function
(	O
tcp	pointer
)	O
;	O
}	O
void	O
wget_tcp_tls_stop	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
if	O
(	O
tcp	pointer
)	O
wget_ssl_close	function
(	O
&	O
tcp	pointer
->	O
ssl_session	pointer
)	O
;	O
}	O
ssize_t	long
wget_tcp_read	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
count	long
)	O
{	O
ssize_t	long
rc	int
;	O
if	O
(	O
unlikely	O
(	O
!	O
tcp	pointer
||	O
!	O
buf	pointer
)	O
)	O
return	O
0	int
;	O
if	O
(	O
tcp	pointer
->	O
ssl_session	pointer
)	O
{	O
rc	int
=	O
wget_ssl_read_timeout	function
(	O
tcp	pointer
->	O
ssl_session	pointer
,	O
buf	pointer
,	O
count	long
,	O
tcp	pointer
->	O
timeout	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
tcp	pointer
->	O
timeout	int
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
wget_ready_2_read	function
(	O
tcp	pointer
->	O
sockfd	int
,	O
tcp	pointer
->	O
timeout	int
)	O
)	O
<=	O
0	int
)	O
return	O
rc	int
;	O
}	O
rc	int
=	O
recvfrom	function
(	O
tcp	pointer
->	O
sockfd	int
,	O
buf	pointer
,	O
count	long
,	O
0	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
rc	int
<	O
0	int
)	O
error_printf	O
(	O
_	O
(	O
"Failed to read %zu bytes (%d)\n"	pointer
)	O
,	O
count	long
,	O
errno	O
)	O
;	O
return	O
rc	int
;	O
}	O
ssize_t	long
wget_tcp_write	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
count	long
)	O
{	O
ssize_t	long
nwritten	long
=	O
0	int
;	O
if	O
(	O
unlikely	O
(	O
!	O
tcp	pointer
||	O
!	O
buf	pointer
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
tcp	pointer
->	O
ssl_session	pointer
)	O
return	O
wget_ssl_write_timeout	function
(	O
tcp	pointer
->	O
ssl_session	pointer
,	O
buf	pointer
,	O
count	long
,	O
tcp	pointer
->	O
timeout	int
)	O
;	O
while	O
(	O
count	long
)	O
{	O
ssize_t	long
n	long
;	O
n	long
=	O
send	function
(	O
tcp	pointer
->	O
sockfd	int
,	O
buf	pointer
,	O
count	long
,	O
0	int
)	O
;	O
if	O
(	O
n	long
>=	O
0	int
)	O
{	O
nwritten	long
+=	O
n	long
;	O
if	O
(	O
(	O
size_t	long
)	O
n	long
>=	O
count	long
)	O
return	O
nwritten	long
;	O
count	long
-=	O
n	long
;	O
buf	pointer
+=	O
n	long
;	O
}	O
else	O
{	O
if	O
(	O
errno	O
!=	O
EAGAIN	int
&&	O
errno	O
!=	O
ENOTCONN	int
&&	O
errno	O
!=	O
EINPROGRESS	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to write %zu bytes (%d: %s)\n"	pointer
)	O
,	O
count	long
,	O
errno	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
tcp	pointer
->	O
timeout	int
)	O
{	O
int	O
rc	int
=	O
wget_ready_2_write	function
(	O
tcp	pointer
->	O
sockfd	int
,	O
tcp	pointer
->	O
timeout	int
)	O
;	O
if	O
(	O
rc	int
<=	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
ssize_t	long
wget_tcp_vprintf	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
args	array
)	O
{	O
char	O
sbuf	array
[	O
4096	int
]	O
;	O
wget_buffer	struct
buf	pointer
;	O
ssize_t	long
len2	long
;	O
wget_buffer_init	function
(	O
&	O
buf	pointer
,	O
sbuf	array
,	O
sizeof	O
(	O
sbuf	array
)	O
)	O
;	O
wget_buffer_vprintf	function
(	O
&	O
buf	pointer
,	O
fmt	pointer
,	O
args	array
)	O
;	O
len2	long
=	O
wget_tcp_write	function
(	O
tcp	pointer
,	O
buf	pointer
.	O
data	pointer
,	O
buf	pointer
.	O
length	int
)	O
;	O
wget_buffer_deinit	function
(	O
&	O
buf	pointer
)	O
;	O
if	O
(	O
len2	long
>	O
0	int
)	O
debug_write	O
(	O
buf	pointer
.	O
data	pointer
,	O
len2	long
)	O
;	O
if	O
(	O
len2	long
>	O
0	int
&&	O
(	O
ssize_t	long
)	O
buf	pointer
.	O
length	int
!=	O
len2	long
)	O
error_printf	O
(	O
_	O
(	O
"%s: internal error: length mismatch %zu != %zd\n"	pointer
)	O
,	O
__func__	O
,	O
buf	pointer
.	O
length	int
,	O
len2	long
)	O
;	O
return	O
len2	long
;	O
}	O
ssize_t	long
wget_tcp_printf	function
(	O
wget_tcp	struct
*	O
tcp	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
fmt	pointer
)	O
;	O
ssize_t	long
len	long
=	O
wget_tcp_vprintf	function
(	O
tcp	pointer
,	O
fmt	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
return	O
len	long
;	O
}	O
void	O
wget_tcp_close	function
(	O
wget_tcp	struct
*	O
tcp	pointer
)	O
{	O
if	O
(	O
likely	O
(	O
tcp	pointer
)	O
)	O
{	O
wget_tcp_tls_stop	function
(	O
tcp	pointer
)	O
;	O
if	O
(	O
tcp	pointer
->	O
sockfd	int
!=	O
-	O
1	int
)	O
{	O
close	pointer
(	O
tcp	pointer
->	O
sockfd	int
)	O
;	O
tcp	pointer
->	O
sockfd	int
=	O
-	O
1	int
;	O
}	O
wget_dns_freeaddrinfo	function
(	O
tcp	pointer
->	O
dns	pointer
,	O
&	O
tcp	pointer
->	O
addrinfo	struct
)	O
;	O
}	O
}	O
