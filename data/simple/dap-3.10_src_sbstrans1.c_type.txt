extern	O
char	O
sbstmp	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
extern	O
int	O
sbslineno	int
;	O
void	O
upper	function
(	O
char	O
*	O
str	pointer
)	O
{	O
while	O
(	O
*	O
str	pointer
)	O
{	O
if	O
(	O
'a'	O
<=	O
*	O
str	pointer
&&	O
*	O
str	pointer
<=	O
'z'	O
)	O
*	O
str	pointer
+=	O
'A'	O
-	O
'a'	O
;	O
str	pointer
++	O
;	O
}	O
}	O
void	O
printtrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
char	O
filename	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
filename	array
,	O
1	int
)	O
)	O
strcpy	function
(	O
filename	array
,	O
sbstmp	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"print(\"%s\", \""	pointer
,	O
filename	array
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"var"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
void	O
meanstrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
char	O
outname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
noprint	int
;	O
int	O
statsreq	int
;	O
int	O
vardf	int
;	O
char	O
stat	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"means(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"var"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
findstatement	function
(	O
step	pointer
,	O
"weight"	pointer
)	O
)	O
{	O
putc	function
(	O
'*'	O
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"weight"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
vardf	int
=	O
0	int
;	O
if	O
(	O
getoption	function
(	O
step	pointer
,	O
"vardf"	pointer
,	O
stat	array
,	O
1	int
)	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
stat	array
,	O
"wdf"	pointer
)	O
)	O
vardf	int
=	O
1	int
;	O
else	O
if	O
(	O
linecmp	function
(	O
stat	array
,	O
"df"	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: invalid option for vardf in proc means\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
for	O
(	O
s	int
=	O
0	int
,	O
noprint	int
=	O
0	int
,	O
statsreq	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"noprint"	pointer
)	O
)	O
{	O
noprint	int
=	O
1	int
;	O
s	int
+=	O
7	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"data"	pointer
)	O
)	O
{	O
for	O
(	O
s	int
+=	O
7	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
;	O
s	int
++	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"vardf"	pointer
)	O
)	O
{	O
s	int
+=	O
8	int
;	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"wdf"	pointer
)	O
)	O
s	int
+=	O
3	int
;	O
else	O
s	int
+=	O
2	int
;	O
}	O
else	O
{	O
statsreq	int
=	O
1	int
;	O
s	int
+=	O
linecpy	function
(	O
stat	array
,	O
step	pointer
+	O
s	int
)	O
;	O
upper	function
(	O
stat	array
)	O
;	O
if	O
(	O
!	O
linecmp	function
(	O
stat	array
,	O
"STD"	pointer
)	O
)	O
strcpy	function
(	O
stat	array
,	O
"SD"	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
stat	array
,	O
"STDERR"	pointer
)	O
)	O
strcpy	function
(	O
stat	array
,	O
"SEM"	pointer
)	O
;	O
if	O
(	O
vardf	int
&&	O
(	O
!	O
linecmp	function
(	O
stat	array
,	O
"SD"	pointer
)	O
||	O
!	O
linecmp	function
(	O
stat	array
,	O
"SEM"	pointer
)	O
||	O
!	O
linecmp	function
(	O
stat	array
,	O
"VAR"	pointer
)	O
)	O
)	O
strcat	function
(	O
stat	array
,	O
"FREQ"	pointer
)	O
;	O
fputs	function
(	O
stat	array
,	O
dapfile	pointer
)	O
;	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
}	O
}	O
if	O
(	O
!	O
statsreq	int
)	O
{	O
if	O
(	O
vardf	int
)	O
fputs	function
(	O
"N MEAN SDFREQ MIN MAX"	pointer
,	O
dapfile	pointer
)	O
;	O
else	O
fputs	function
(	O
"N MEAN SD MIN MAX"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"output"	pointer
)	O
)	O
)	O
{	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
+	O
s	int
,	O
"out"	pointer
,	O
outname	array
,	O
1	int
)	O
)	O
{	O
sprintf	function
(	O
sbstmp	array
,	O
"sbstmp%02d"	pointer
,	O
++	O
sbstempnum	int
)	O
;	O
strcpy	function
(	O
outname	array
,	O
sbstmp	array
)	O
;	O
}	O
}	O
else	O
outname	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
noprint	int
)	O
fprintf	function
(	O
dapfile	pointer
,	O
"print(\"%s.mns\", \"\");\n"	pointer
,	O
setname	pointer
)	O
;	O
if	O
(	O
outname	array
[	O
0	int
]	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"dataset(\"%s.mns\", \"%s\", \"RENAME\");\n"	pointer
,	O
setname	pointer
,	O
outname	array
)	O
;	O
strcpy	function
(	O
sbstmp	array
,	O
outname	array
)	O
;	O
}	O
}	O
void	O
sorttrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
int	O
sin	int
,	O
sout	int
;	O
char	O
inname	array
[	O
TOKENLEN	int
+	O
4	int
+	O
1	int
]	O
;	O
char	O
outname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
optstart	int
;	O
int	O
descend	int
;	O
fputs	function
(	O
"sort(\""	pointer
,	O
dapfile	pointer
)	O
;	O
inname	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
outname	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
(	O
sin	int
=	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
inname	array
,	O
1	int
)	O
)	O
)	O
strcpy	function
(	O
inname	array
,	O
sbstmp	array
)	O
;	O
if	O
(	O
!	O
(	O
sout	int
=	O
getoption	function
(	O
step	pointer
,	O
"out"	pointer
,	O
outname	array
,	O
1	int
)	O
)	O
)	O
strcpy	function
(	O
outname	array
,	O
inname	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"%s\", \""	pointer
,	O
inname	array
)	O
;	O
optstart	int
=	O
sin	int
;	O
if	O
(	O
sout	int
>	O
optstart	int
)	O
optstart	int
=	O
sout	int
;	O
descend	int
=	O
0	int
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"by"	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"descending"	pointer
)	O
)	O
{	O
s	int
+=	O
11	int
;	O
descend	int
=	O
1	int
;	O
}	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing by statement in proc sort.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
optstart	int
,	O
"nodupkey"	pointer
)	O
)	O
putc	function
(	O
'u'	O
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
descend	int
)	O
{	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"by"	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"descending"	pointer
)	O
)	O
{	O
s	int
+=	O
11	int
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
s	int
++	O
;	O
putc	function
(	O
'd'	O
,	O
dapfile	pointer
)	O
;	O
}	O
else	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
s	int
++	O
;	O
putc	function
(	O
'i'	O
,	O
dapfile	pointer
)	O
;	O
}	O
s	int
++	O
;	O
}	O
}	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
!	O
outname	array
[	O
0	int
]	O
)	O
strcpy	function
(	O
outname	array
,	O
inname	array
)	O
;	O
strcat	function
(	O
inname	array
,	O
".srt"	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"dataset(\"%s\", \"%s\", \"RENAME\");\n"	pointer
,	O
inname	array
,	O
outname	array
)	O
;	O
strcpy	function
(	O
sbstmp	array
,	O
outname	array
)	O
;	O
}	O
void	O
datasetstrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
char	O
oldname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
char	O
newname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
s	int
;	O
int	O
t	int
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"append"	pointer
)	O
)	O
)	O
{	O
if	O
(	O
getoption	function
(	O
step	pointer
+	O
s	int
,	O
"base"	pointer
,	O
newname	array
,	O
1	int
)	O
||	O
getoption	function
(	O
step	pointer
+	O
s	int
,	O
"out"	pointer
,	O
newname	array
,	O
1	int
)	O
)	O
{	O
if	O
(	O
!	O
(	O
getoption	function
(	O
step	pointer
+	O
s	int
,	O
"data"	pointer
,	O
oldname	array
,	O
1	int
)	O
||	O
getoption	function
(	O
step	pointer
+	O
s	int
,	O
"new"	pointer
,	O
oldname	array
,	O
1	int
)	O
)	O
)	O
strcpy	function
(	O
oldname	array
,	O
sbstmp	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"dataset(\"%s\", \"%s\", \"APPEND\");\n"	pointer
,	O
oldname	array
,	O
newname	array
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing base or out statement in proc datasets.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"change"	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
oldname	array
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"="	pointer
)	O
)	O
{	O
s	int
+=	O
2	int
;	O
if	O
(	O
(	O
t	int
=	O
linecpy	function
(	O
newname	array
,	O
step	pointer
+	O
s	int
)	O
)	O
&&	O
linecmp	function
(	O
newname	array
,	O
";"	pointer
)	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"dataset(\"%s\", \"%s\", \"RENAME\");\n"	pointer
,	O
oldname	array
,	O
newname	array
)	O
;	O
s	int
+=	O
t	int
+	O
1	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing filename after = in change statement in proc datasets.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing = after filename in change statement in proc datasets.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"delete"	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
oldname	array
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"dataset(\"%s\", \"\", \"REMOVE\");\n"	pointer
,	O
oldname	array
)	O
;	O
}	O
}	O
}	O
void	O
freqtrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
char	O
outname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
tablesstart	int
;	O
int	O
optionsstart	int
;	O
int	O
nstats	int
;	O
char	O
stat	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
nofreq	int
;	O
int	O
nopercent	int
;	O
int	O
norow	int
;	O
int	O
nocol	int
;	O
int	O
noprint	int
;	O
int	O
nvars	int
;	O
int	O
newvar	int
;	O
int	O
varn	int
;	O
noprint	int
=	O
0	int
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"sort(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"tables"	pointer
)	O
)	O
)	O
{	O
tablesstart	int
=	O
s	int
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'/'	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'*'	O
)	O
{	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
else	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing tables statement in proc freq.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"\", \"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'/'	O
)	O
optionsstart	int
=	O
s	int
+	O
2	int
;	O
else	O
optionsstart	int
=	O
0	int
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"freq(\"%s.srt\", \""	pointer
,	O
setname	pointer
)	O
;	O
for	O
(	O
s	int
=	O
tablesstart	int
,	O
newvar	int
=	O
1	int
,	O
nvars	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'/'	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'*'	O
)	O
{	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
newvar	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
if	O
(	O
newvar	int
)	O
{	O
newvar	int
=	O
0	int
;	O
nvars	int
++	O
;	O
}	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
}	O
}	O
if	O
(	O
!	O
nvars	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: no variables in tables statement in proc freq.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"weight"	pointer
)	O
)	O
)	O
{	O
putc	function
(	O
'*'	O
,	O
dapfile	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
s	int
++	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: only one weight variable allowed in proc freq.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
outname	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
nofreq	int
=	O
0	int
;	O
nopercent	int
=	O
0	int
;	O
norow	int
=	O
0	int
;	O
nocol	int
=	O
0	int
;	O
nstats	int
=	O
4	int
;	O
for	O
(	O
s	int
=	O
optionsstart	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"noprint"	pointer
)	O
)	O
{	O
noprint	int
=	O
1	int
;	O
s	int
+=	O
7	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"out"	pointer
)	O
)	O
{	O
s	int
+=	O
4	int
;	O
if	O
(	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"="	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing = after out option in tables statement in proc freq.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
s	int
+=	O
linecpy	function
(	O
outname	array
,	O
step	pointer
+	O
s	int
)	O
;	O
}	O
else	O
{	O
s	int
+=	O
linecpy	function
(	O
stat	array
,	O
step	pointer
+	O
s	int
)	O
;	O
upper	function
(	O
stat	array
)	O
;	O
if	O
(	O
!	O
linecmp	function
(	O
stat	array
,	O
"NOFREQ"	pointer
)	O
)	O
{	O
nofreq	int
=	O
1	int
;	O
--	O
nstats	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
stat	array
,	O
"NOPERCENT"	pointer
)	O
)	O
{	O
nopercent	int
=	O
1	int
;	O
--	O
nstats	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
stat	array
,	O
"NOROW"	pointer
)	O
)	O
{	O
norow	int
=	O
1	int
;	O
--	O
nstats	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
stat	array
,	O
"NOCOL"	pointer
)	O
)	O
{	O
nocol	int
=	O
1	int
;	O
--	O
nstats	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
stat	array
,	O
"EXPECTED"	pointer
)	O
)	O
nstats	int
++	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
stat	array
,	O
"CHISQ"	pointer
)	O
)	O
fputs	function
(	O
" FISHER "	pointer
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
stat	array
,	O
"MEASURES"	pointer
)	O
)	O
{	O
fputs	function
(	O
" ODDSRAT "	pointer
,	O
dapfile	pointer
)	O
;	O
strcpy	function
(	O
stat	array
,	O
"ORDINAL"	pointer
)	O
;	O
}	O
fputs	function
(	O
stat	array
,	O
dapfile	pointer
)	O
;	O
}	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
}	O
}	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing ; at end of tables statement in proc freq.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
noprint	int
)	O
{	O
if	O
(	O
!	O
nofreq	int
)	O
fputs	function
(	O
" COUNT"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
!	O
nopercent	int
)	O
fputs	function
(	O
" PERCENT"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
!	O
norow	int
)	O
fputs	function
(	O
" ROWPERC"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
!	O
nocol	int
)	O
fputs	function
(	O
" COLPERC"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
!	O
noprint	int
&&	O
nstats	int
>	O
0	int
)	O
{	O
if	O
(	O
nvars	int
==	O
1	int
)	O
fprintf	function
(	O
dapfile	pointer
,	O
"print(\"%s.srt.frq\", \"\");\n"	pointer
,	O
setname	pointer
)	O
;	O
else	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"sort(\"%s.srt.frq\", \""	pointer
,	O
setname	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
s	int
=	O
tablesstart	int
,	O
varn	int
=	O
0	int
;	O
varn	int
<	O
nvars	int
-	O
1	int
;	O
varn	int
++	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
3	int
;	O
}	O
fputs	function
(	O
" _type_ "	pointer
,	O
dapfile	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
fputs	function
(	O
"\", \"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"table(\"%s.srt.frq.srt\", \""	pointer
,	O
setname	pointer
)	O
;	O
for	O
(	O
s	int
=	O
tablesstart	int
,	O
varn	int
=	O
0	int
;	O
varn	int
<	O
nvars	int
-	O
2	int
;	O
varn	int
++	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
s	int
++	O
;	O
s	int
+=	O
3	int
;	O
}	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
if	O
(	O
nstats	int
>	O
1	int
)	O
fputs	function
(	O
" _type_"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
s	int
+=	O
3	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
;	O
s	int
++	O
)	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
" _cell_\", \"s12\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
s	int
=	O
tablesstart	int
,	O
varn	int
=	O
0	int
;	O
varn	int
<	O
nvars	int
-	O
2	int
;	O
varn	int
++	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
s	int
+=	O
3	int
;	O
}	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
}	O
if	O
(	O
outname	array
[	O
0	int
]	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"dataset(\"%s.srt.frq\", \"%s\", \"RENAME\");\n"	pointer
,	O
setname	pointer
,	O
outname	array
)	O
;	O
strcpy	function
(	O
sbstmp	array
,	O
outname	array
)	O
;	O
}	O
}	O
void	O
tabulatetrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
char	O
sortname	array
[	O
TOKENLEN	int
+	O
4	int
+	O
1	int
]	O
;	O
char	O
format	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
tablestart	int
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
strcpy	function
(	O
sortname	array
,	O
setname	pointer
)	O
;	O
strcat	function
(	O
sortname	array
,	O
".srt"	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"sort(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
(	O
tablestart	int
=	O
findstatement	function
(	O
step	pointer
,	O
"table"	pointer
)	O
)	O
)	O
{	O
for	O
(	O
s	int
=	O
tablestart	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'*'	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'\n'	O
)	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
','	O
)	O
s	int
++	O
;	O
else	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
}	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
'*'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: no analysis variable in table statement in proc tabulate.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: no table statement in proc tabulate.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"\", \"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"table(\"%s\", \""	pointer
,	O
sortname	array
)	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"format"	pointer
,	O
format	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
format	pointer
,	O
"12"	pointer
)	O
;	O
s	int
=	O
tablestart	int
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
','	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'\n'	O
)	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
else	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
','	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: no column variables in table statement in proc tabulate.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'*'	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'\n'	O
)	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
else	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
'*'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: no analysis variable in table statement in proc tabulate.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
fprintf	function
(	O
dapfile	pointer
,	O
"\", \"%s "	pointer
,	O
format	pointer
)	O
;	O
s	int
++	O
;	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'/'	O
)	O
{	O
s	int
+=	O
2	int
;	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"rtspace"	pointer
)	O
)	O
s	int
+=	O
8	int
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"rts"	pointer
)	O
)	O
s	int
+=	O
4	int
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: bad option in table statement in proc tabulate.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"="	pointer
)	O
)	O
{	O
s	int
+=	O
2	int
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: bad format for rtspace in table statement in proc tabulate.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: extra characters at end of table statement in proc tabulate.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
void	O
corrtrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
char	O
outname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
noprint	int
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"corr(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"var"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
noprint	int
=	O
0	int
;	O
for	O
(	O
s	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"noprint"	pointer
)	O
)	O
{	O
noprint	int
++	O
;	O
break	O
;	O
}	O
else	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
s	int
++	O
;	O
}	O
}	O
if	O
(	O
!	O
noprint	int
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"sort(\"%s.cor\", \""	pointer
,	O
setname	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
" _var1_ _type_ _var2_\", \"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"table(\"%s.cor.srt\", \"_var1_ _type_\", \"_var2_ _corr_\", \"s12\", \""	pointer
,	O
setname	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
if	O
(	O
getoption	function
(	O
step	pointer
,	O
"outp"	pointer
,	O
outname	array
,	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"dataset(\"%s.cor\", \"%s\", \"RENAME\");\n"	pointer
,	O
setname	pointer
,	O
outname	array
)	O
;	O
strcpy	function
(	O
sbstmp	array
,	O
outname	array
)	O
;	O
}	O
}	O
void	O
ranktrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
4	int
+	O
1	int
]	O
;	O
char	O
outname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
char	O
option	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
ngroups	int
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"group(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
ngroups	int
=	O
0	int
;	O
if	O
(	O
getoption	function
(	O
step	pointer
,	O
"groups"	pointer
,	O
option	array
,	O
1	int
)	O
)	O
{	O
if	O
(	O
sscanf	function
(	O
option	array
,	O
"%d"	pointer
,	O
&	O
ngroups	int
)	O
!=	O
1	int
||	O
ngroups	int
<=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: bad number %s of groups in proc rank\n"	pointer
,	O
sbslineno	int
,	O
option	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
for	O
(	O
s	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
option	array
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
if	O
(	O
!	O
linecmp	function
(	O
option	array
,	O
"groups"	pointer
)	O
||	O
!	O
linecmp	function
(	O
option	array
,	O
"data"	pointer
)	O
||	O
!	O
linecmp	function
(	O
option	array
,	O
"out"	pointer
)	O
)	O
{	O
s	int
+=	O
2	int
;	O
while	O
(	O
alphanum	function
(	O
step	pointer
[	O
s	int
]	O
)	O
)	O
s	int
++	O
;	O
s	int
++	O
;	O
}	O
else	O
if	O
(	O
ngroups	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: can't combine %s with groups= in proc rank\n"	pointer
,	O
sbslineno	int
,	O
option	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
option	array
,	O
"fraction"	pointer
)	O
||	O
!	O
linecmp	function
(	O
option	array
,	O
"f"	pointer
)	O
)	O
fputs	function
(	O
"/ "	pointer
,	O
dapfile	pointer
)	O
;	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
option	array
,	O
"percent"	pointer
)	O
||	O
!	O
linecmp	function
(	O
option	array
,	O
"p"	pointer
)	O
)	O
fputs	function
(	O
"% "	pointer
,	O
dapfile	pointer
)	O
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: invalid option %s for proc rank\n"	pointer
,	O
sbslineno	int
,	O
option	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"var"	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
step	pointer
[	O
s	int
]	O
==	O
'\n'	O
)	O
{	O
if	O
(	O
ngroups	int
)	O
fprintf	function
(	O
dapfile	pointer
,	O
" %d# "	pointer
,	O
ngroups	int
)	O
;	O
else	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
}	O
else	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing var statement in proc rank\n"	pointer
,	O
sbslineno	int
,	O
option	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"out"	pointer
,	O
outname	array
,	O
1	int
)	O
)	O
{	O
sprintf	function
(	O
sbstmp	array
,	O
"sbstmp%02d"	pointer
,	O
++	O
sbstempnum	int
)	O
;	O
strcpy	function
(	O
outname	array
,	O
sbstmp	array
)	O
;	O
}	O
fprintf	function
(	O
dapfile	pointer
,	O
"dataset(\"%s.grp\", \"%s\", \"RENAME\");\n"	pointer
,	O
setname	pointer
,	O
outname	array
)	O
;	O
strcpy	function
(	O
sbstmp	array
,	O
outname	array
)	O
;	O
}	O
void	O
univariatetrans	function
(	O
char	O
*	O
step	pointer
,	O
FILE	struct
*	O
dapfile	pointer
)	O
{	O
int	O
s	int
;	O
char	O
setname	pointer
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
char	O
outname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
char	O
varname	array
[	O
TOKENLEN	int
+	O
1	int
]	O
;	O
int	O
noprint	int
;	O
int	O
normal	int
;	O
int	O
plot	int
;	O
int	O
statsreq	int
;	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
,	O
"data"	pointer
,	O
setname	pointer
,	O
1	int
)	O
)	O
strcpy	function
(	O
setname	pointer
,	O
sbstmp	array
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"pctiles(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"var"	pointer
,	O
dapfile	pointer
)	O
;	O
if	O
(	O
findstatement	function
(	O
step	pointer
,	O
"weight"	pointer
)	O
)	O
{	O
putc	function
(	O
'*'	O
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"weight"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
statsreq	int
=	O
0	int
;	O
outname	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"output"	pointer
)	O
)	O
)	O
{	O
if	O
(	O
!	O
getoption	function
(	O
step	pointer
+	O
s	int
,	O
"out"	pointer
,	O
outname	array
,	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: bad option for output in proc univariate.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"out"	pointer
)	O
)	O
{	O
s	int
+=	O
6	int
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
s	int
++	O
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"pctlpts"	pointer
)	O
)	O
{	O
statsreq	int
=	O
1	int
;	O
s	int
+=	O
8	int
;	O
if	O
(	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"="	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: missing = after pctlpts in proc univariate.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
s	int
+=	O
2	int
;	O
while	O
(	O
num	function
(	O
step	pointer
[	O
s	int
]	O
)	O
)	O
{	O
putc	function
(	O
'P'	O
,	O
dapfile	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
--	O
s	int
;	O
}	O
else	O
{	O
statsreq	int
=	O
1	int
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
if	O
(	O
'a'	O
<=	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
<=	O
'z'	O
)	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
+	O
'A'	O
-	O
'a'	O
,	O
dapfile	pointer
)	O
;	O
else	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
putc	function
(	O
' '	O
,	O
dapfile	pointer
)	O
;	O
}	O
s	int
++	O
;	O
}	O
}	O
if	O
(	O
!	O
statsreq	int
)	O
fputs	function
(	O
"MAX MED MIN N P1 P5 P10 P90 P95 P99 Q1 Q3 QRANGE RANGE"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
for	O
(	O
s	int
=	O
0	int
,	O
noprint	int
=	O
0	int
,	O
normal	int
=	O
0	int
,	O
plot	int
=	O
0	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
;	O
s	int
++	O
)	O
{	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"noprint"	pointer
)	O
)	O
{	O
noprint	int
=	O
1	int
;	O
s	int
+=	O
7	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"data"	pointer
)	O
)	O
{	O
for	O
(	O
s	int
+=	O
7	int
;	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
;	O
s	int
++	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"normal"	pointer
)	O
)	O
{	O
normal	int
=	O
1	int
;	O
s	int
+=	O
6	int
;	O
}	O
else	O
if	O
(	O
!	O
linecmp	function
(	O
step	pointer
+	O
s	int
,	O
"plot"	pointer
)	O
)	O
{	O
plot	int
=	O
1	int
;	O
s	int
+=	O
4	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: invalid option for proc univariate.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
noprint	int
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"print(\"%s.pct\", \"\");\n"	pointer
,	O
setname	pointer
)	O
;	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"var"	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"nonparam(\"%s\", \""	pointer
,	O
setname	pointer
)	O
;	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
'\n'	O
)	O
{	O
putc	function
(	O
step	pointer
[	O
s	int
]	O
,	O
dapfile	pointer
)	O
;	O
s	int
++	O
;	O
}	O
s	int
++	O
;	O
fputs	function
(	O
"\", \""	pointer
,	O
dapfile	pointer
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"\");\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
outname	array
[	O
0	int
]	O
)	O
{	O
fprintf	function
(	O
dapfile	pointer
,	O
"dataset(\"%s.pct\", \"%s\", \"RENAME\");\n"	pointer
,	O
setname	pointer
,	O
outname	array
)	O
;	O
strcpy	function
(	O
sbstmp	array
,	O
outname	array
)	O
;	O
}	O
if	O
(	O
normal	int
)	O
{	O
if	O
(	O
(	O
s	int
=	O
findstatement	function
(	O
step	pointer
,	O
"var"	pointer
)	O
)	O
)	O
{	O
while	O
(	O
step	pointer
[	O
s	int
]	O
&&	O
step	pointer
[	O
s	int
]	O
!=	O
';'	O
)	O
{	O
s	int
+=	O
linecpy	function
(	O
varname	array
,	O
step	pointer
+	O
s	int
)	O
+	O
1	int
;	O
if	O
(	O
plot	int
)	O
{	O
if	O
(	O
isby	function
(	O
step	pointer
)	O
>=	O
0	int
)	O
countparts	function
(	O
step	pointer
,	O
setname	pointer
,	O
dapfile	pointer
)	O
;	O
else	O
fputs	function
(	O
"_sbspictcnt_[_sbsnpicts_] = 1;\n"	pointer
,	O
dapfile	pointer
)	O
;	O
fputs	function
(	O
"_sbspict_[_sbsnpicts_] = "	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
fprintf	function
(	O
dapfile	pointer
,	O
"normal(\"%s\", \"%s\", \""	pointer
,	O
setname	pointer
,	O
varname	array
)	O
;	O
copylist	function
(	O
step	pointer
,	O
"by"	pointer
,	O
dapfile	pointer
)	O
;	O
fprintf	function
(	O
dapfile	pointer
,	O
"\", %d);\n"	pointer
,	O
(	O
plot	int
?	O
MAXPICTS	int
:	O
0	int
)	O
)	O
;	O
if	O
(	O
plot	int
)	O
fputs	function
(	O
"_sbspictpage_[_sbsnpicts_++] = 1;\n"	pointer
,	O
dapfile	pointer
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sbstrans: before %d: var statement required for normality testing proc univariate.\n"	pointer
,	O
sbslineno	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
plot	int
)	O
sbshaspicts	int
=	O
1	int
;	O
}	O
}	O
