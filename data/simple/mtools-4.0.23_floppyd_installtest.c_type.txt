static	O
const	O
char	O
*	O
AuthErrors	array
[	O
]	O
=	O
{	O
"Auth success!"	pointer
,	O
"Auth failed: Packet oversized!"	pointer
,	O
"Auth failed: X-Cookie doesn't match!"	pointer
,	O
"Auth failed: Wrong transmission protocol version!"	pointer
,	O
"Auth failed: Device locked!"	pointer
}	O
;	O
static	O
int	O
write_dword	function
(	O
int	O
handle	int
,	O
Dword	int
parm	int
)	O
{	O
Byte	char
val	int
[	O
4	int
]	O
;	O
dword2byte	function
(	O
parm	int
,	O
val	int
)	O
;	O
if	O
(	O
write	pointer
(	O
handle	int
,	O
val	int
,	O
4	int
)	O
<	O
4	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
uint32_t	int
authenticate_to_floppyd	function
(	O
char	O
fullauth	char
,	O
int	O
sock	int
,	O
char	O
*	O
display	pointer
,	O
uint32_t	int
protoversion	int
)	O
{	O
size_t	long
filelen	long
=	O
0	int
;	O
Byte	char
buf	pointer
[	O
16	int
]	O
;	O
const	O
char	O
*	O
command	pointer
[	O
]	O
=	O
{	O
"xauth"	pointer
,	O
"xauth"	pointer
,	O
"extract"	pointer
,	O
"-"	pointer
,	O
0	int
,	O
0	int
}	O
;	O
char	O
*	O
xcookie	pointer
=	O
NULL	O
;	O
Dword	int
errcode	int
;	O
uint32_t	int
bytesRead	int
;	O
uint32_t	int
cap	int
=	O
0	int
;	O
if	O
(	O
fullauth	char
)	O
{	O
command	pointer
[	O
4	int
]	O
=	O
display	pointer
;	O
filelen	long
=	O
strlen	function
(	O
display	pointer
)	O
;	O
filelen	long
+=	O
100	int
;	O
xcookie	pointer
=	O
(	O
char	O
*	O
)	O
safe_malloc	function
(	O
filelen	long
+	O
4	int
)	O
;	O
filelen	long
=	O
safePopenOut	function
(	O
command	pointer
,	O
xcookie	pointer
+	O
4	int
,	O
filelen	long
)	O
;	O
if	O
(	O
filelen	long
<	O
1	int
)	O
return	O
AUTH_AUTHFAILED	int
;	O
}	O
dword2byte	function
(	O
4	int
,	O
buf	pointer
)	O
;	O
dword2byte	function
(	O
protoversion	int
,	O
buf	pointer
+	O
4	int
)	O
;	O
if	O
(	O
write	pointer
(	O
sock	int
,	O
buf	pointer
,	O
8	int
)	O
<	O
8	int
)	O
return	O
AUTH_IO_ERROR	int
;	O
bytesRead	int
=	O
read_dword	function
(	O
sock	int
)	O
;	O
if	O
(	O
bytesRead	int
!=	O
4	int
&&	O
bytesRead	int
!=	O
12	int
)	O
{	O
return	O
AUTH_WRONGVERSION	int
;	O
}	O
errcode	int
=	O
read_dword	function
(	O
sock	int
)	O
;	O
if	O
(	O
errcode	int
!=	O
AUTH_SUCCESS	int
)	O
{	O
return	O
errcode	int
;	O
}	O
protoversion	int
=	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
;	O
if	O
(	O
bytesRead	int
>=	O
12	int
)	O
{	O
protoversion	int
=	O
read_dword	function
(	O
sock	int
)	O
;	O
cap	int
=	O
read_dword	function
(	O
sock	int
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"Protocol Version=%d\n"	pointer
,	O
protoversion	int
)	O
;	O
if	O
(	O
protoversion	int
>=	O
FLOPPYD_PROTOCOL_VERSION	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Capabilities:%s%s\n"	pointer
,	O
(	O
cap	int
&	O
FLOPPYD_CAP_EXPLICIT_OPEN	int
)	O
?	O
" ExplicitOpen"	pointer
:	O
""	pointer
,	O
(	O
cap	int
&	O
FLOPPYD_CAP_LARGE_SEEK	int
)	O
?	O
" LargeFiles"	pointer
:	O
""	pointer
)	O
;	O
}	O
if	O
(	O
fullauth	char
)	O
{	O
dword2byte	function
(	O
filelen	long
,	O
(	O
Byte	char
*	O
)	O
xcookie	pointer
)	O
;	O
if	O
(	O
write	pointer
(	O
sock	int
,	O
xcookie	pointer
,	O
filelen	long
+	O
4	int
)	O
<	O
(	O
ssize_t	long
)	O
(	O
filelen	long
+	O
4	int
)	O
)	O
return	O
AUTH_IO_ERROR	int
;	O
if	O
(	O
read_dword	function
(	O
sock	int
)	O
!=	O
4	int
)	O
{	O
return	O
AUTH_PACKETOVERSIZE	int
;	O
}	O
errcode	int
=	O
read_dword	function
(	O
sock	int
)	O
;	O
}	O
return	O
errcode	int
;	O
}	O
static	O
int	O
get_host_and_port	function
(	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
*	O
hostname	pointer
,	O
char	O
*	O
*	O
display	pointer
,	O
uint16_t	short
*	O
port	pointer
)	O
{	O
char	O
*	O
newname	pointer
=	O
strdup	function
(	O
name	pointer
)	O
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
p2	pointer
;	O
p	pointer
=	O
newname	pointer
;	O
while	O
(	O
*	O
p	pointer
!=	O
'/'	O
&&	O
*	O
p	pointer
)	O
p	pointer
++	O
;	O
p2	pointer
=	O
p	pointer
;	O
if	O
(	O
*	O
p	pointer
)	O
p	pointer
++	O
;	O
*	O
p2	pointer
=	O
0	int
;	O
*	O
port	pointer
=	O
atou16	function
(	O
p	pointer
)	O
;	O
if	O
(	O
*	O
port	pointer
==	O
0	int
)	O
{	O
*	O
port	pointer
=	O
FLOPPYD_DEFAULT_PORT	int
;	O
}	O
*	O
display	pointer
=	O
strdup	function
(	O
newname	pointer
)	O
;	O
p	pointer
=	O
newname	pointer
;	O
while	O
(	O
*	O
p	pointer
!=	O
':'	O
&&	O
*	O
p	pointer
)	O
p	pointer
++	O
;	O
p2	pointer
=	O
p	pointer
;	O
if	O
(	O
*	O
p	pointer
)	O
p	pointer
++	O
;	O
*	O
p2	pointer
=	O
0	int
;	O
*	O
port	pointer
+=	O
atoi	function
(	O
p	pointer
)	O
;	O
if	O
(	O
!	O
*	O
newname	pointer
||	O
strcmp	function
(	O
newname	pointer
,	O
"unix"	pointer
)	O
==	O
0	int
)	O
{	O
free	function
(	O
newname	pointer
)	O
;	O
newname	pointer
=	O
strdup	function
(	O
"localhost"	pointer
)	O
;	O
}	O
*	O
hostname	pointer
=	O
newname	pointer
;	O
return	O
1	int
;	O
}	O
static	O
in_addr_t	int
getipaddress	function
(	O
char	O
*	O
ipaddr	pointer
)	O
{	O
struct	O
hostent	struct
*	O
host	pointer
;	O
in_addr_t	int
ip	int
;	O
if	O
(	O
(	O
(	O
ip	int
=	O
inet_addr	function
(	O
ipaddr	pointer
)	O
)	O
==	O
INADDR_NONE	O
)	O
&&	O
(	O
strcmp	function
(	O
ipaddr	pointer
,	O
"255.255.255.255"	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
if	O
(	O
(	O
host	pointer
=	O
gethostbyname	function
(	O
ipaddr	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
memcpy	function
(	O
&	O
ip	int
,	O
host	pointer
->	O
h_addr	O
,	O
sizeof	O
(	O
ip	int
)	O
)	O
;	O
}	O
endhostent	function
(	O
)	O
;	O
}	O
return	O
(	O
ip	int
)	O
;	O
}	O
static	O
int	O
connect_to_server	function
(	O
in_addr_t	int
ip	int
,	O
uint16_t	short
port	pointer
)	O
{	O
struct	O
sockaddr_in	struct
addr	struct
;	O
int	O
sock	int
;	O
if	O
(	O
(	O
sock	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
{	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
addr	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
port	pointer
)	O
;	O
addr	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
ip	int
;	O
if	O
(	O
connect	function
(	O
sock	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	struct
,	O
sizeof	O
(	O
addr	struct
)	O
)	O
<	O
0	int
)	O
{	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
{	O
int	O
on	int
=	O
1	int
;	O
setsockopt	function
(	O
STDIN_FILENO	int
,	O
SOL_SOCKET	int
,	O
SO_KEEPALIVE	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
;	O
}	O
return	O
(	O
sock	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
hostname	pointer
;	O
char	O
*	O
display	pointer
;	O
char	O
*	O
name	pointer
;	O
uint16_t	short
port	pointer
;	O
int	O
sock	int
;	O
uint32_t	int
reply	int
;	O
int	O
rval	pointer
;	O
uint32_t	int
protoversion	int
;	O
char	O
fullauth	char
=	O
0	int
;	O
Byte	char
opcode	char
=	O
OP_CLOSE	int
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
puts	function
(	O
"Usage: floppyd_installtest [-f] Connect-String\n"	pointer
"-f\tDo full X-Cookie-Authentication"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
name	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"-f"	pointer
)	O
==	O
0	int
)	O
{	O
fullauth	char
=	O
1	int
;	O
name	pointer
=	O
argv	pointer
[	O
2	int
]	O
;	O
}	O
rval	pointer
=	O
get_host_and_port	function
(	O
name	pointer
,	O
&	O
hostname	pointer
,	O
&	O
display	pointer
,	O
&	O
port	pointer
)	O
;	O
if	O
(	O
!	O
rval	pointer
)	O
return	O
-	O
1	int
;	O
sock	int
=	O
connect_to_server	function
(	O
getipaddress	function
(	O
hostname	pointer
)	O
,	O
port	pointer
)	O
;	O
if	O
(	O
sock	int
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Can't connect to floppyd server on %s, port %i!\n"	pointer
,	O
hostname	pointer
,	O
port	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
protoversion	int
=	O
FLOPPYD_PROTOCOL_VERSION	int
;	O
while	O
(	O
1	int
)	O
{	O
reply	int
=	O
authenticate_to_floppyd	function
(	O
fullauth	char
,	O
sock	int
,	O
display	pointer
,	O
protoversion	int
)	O
;	O
if	O
(	O
protoversion	int
==	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
)	O
break	O
;	O
if	O
(	O
reply	int
==	O
AUTH_WRONGVERSION	int
)	O
{	O
protoversion	int
=	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
reply	int
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Connection to floppyd failed:\n"	pointer
"%s\n"	pointer
,	O
AuthErrors	array
[	O
reply	int
]	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
free	function
(	O
hostname	pointer
)	O
;	O
free	function
(	O
display	pointer
)	O
;	O
if	O
(	O
write_dword	function
(	O
sock	int
,	O
1	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Short write to floppyd:\n"	pointer
"%s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
if	O
(	O
write	pointer
(	O
sock	int
,	O
&	O
opcode	char
,	O
1	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Short write to floppyd:\n"	pointer
"%s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
close	pointer
(	O
sock	int
)	O
;	O
return	O
0	int
;	O
}	O
