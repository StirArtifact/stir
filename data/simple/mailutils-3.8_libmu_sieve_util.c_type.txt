size_t	long
mu_sieve_value_create	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_sieve_data_type	enum
type	int
,	O
struct	O
mu_locus_range	struct
const	O
*	O
locus	struct
,	O
void	O
*	O
data	pointer
)	O
{	O
size_t	long
idx	long
;	O
mu_sieve_value_t	struct
*	O
val	pointer
;	O
if	O
(	O
mach	pointer
->	O
valcount	long
==	O
mach	pointer
->	O
valmax	long
)	O
{	O
mu_i_sv_2nrealloc	function
(	O
mach	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mach	pointer
->	O
valspace	pointer
,	O
&	O
mach	pointer
->	O
valmax	long
,	O
sizeof	O
mach	pointer
->	O
valspace	pointer
[	O
0	int
]	O
)	O
;	O
}	O
idx	long
=	O
mach	pointer
->	O
valcount	long
++	O
;	O
val	pointer
=	O
&	O
mach	pointer
->	O
valspace	pointer
[	O
idx	long
]	O
;	O
memset	function
(	O
val	pointer
,	O
0	int
,	O
sizeof	O
*	O
val	pointer
)	O
;	O
val	pointer
->	O
type	int
=	O
type	int
;	O
val	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_file	pointer
=	O
mu_i_sv_id_str	function
(	O
mach	pointer
,	O
mu_i_sv_id_num	function
(	O
mach	pointer
,	O
locus	struct
->	O
beg	struct
.	O
mu_file	pointer
)	O
)	O
;	O
val	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_line	int
=	O
locus	struct
->	O
beg	struct
.	O
mu_line	int
;	O
val	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_col	int
=	O
locus	struct
->	O
beg	struct
.	O
mu_col	int
;	O
val	pointer
->	O
locus	struct
.	O
end	struct
.	O
mu_file	pointer
=	O
mu_i_sv_id_str	function
(	O
mach	pointer
,	O
mu_i_sv_id_num	function
(	O
mach	pointer
,	O
locus	struct
->	O
end	struct
.	O
mu_file	pointer
)	O
)	O
;	O
val	pointer
->	O
locus	struct
.	O
end	struct
.	O
mu_line	int
=	O
locus	struct
->	O
end	struct
.	O
mu_line	int
;	O
val	pointer
->	O
locus	struct
.	O
end	struct
.	O
mu_col	int
=	O
locus	struct
->	O
end	struct
.	O
mu_col	int
;	O
mu_locus_range_init	function
(	O
&	O
val	pointer
->	O
locus	struct
)	O
;	O
mu_locus_range_copy	function
(	O
&	O
val	pointer
->	O
locus	struct
,	O
locus	struct
)	O
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
SVT_NUMBER	int
:	O
val	pointer
->	O
v	array
.	O
number	long
=	O
*	O
(	O
long	O
*	O
)	O
data	pointer
;	O
break	O
;	O
case	O
SVT_STRING	int
:	O
val	pointer
->	O
v	array
.	O
list	pointer
.	O
first	pointer
=	O
mu_i_sv_string_create	function
(	O
mach	pointer
,	O
(	O
char	O
*	O
)	O
data	pointer
)	O
;	O
val	pointer
->	O
v	array
.	O
list	pointer
.	O
count	long
=	O
1	int
;	O
break	O
;	O
case	O
SVT_STRING_LIST	int
:	O
val	pointer
->	O
v	array
.	O
list	pointer
=	O
*	O
(	O
mu_sieve_slice_t	pointer
)	O
data	pointer
;	O
break	O
;	O
case	O
SVT_TAG	int
:	O
val	pointer
->	O
v	array
.	O
string	pointer
=	O
data	pointer
;	O
break	O
;	O
default	O
:	O
mu_error	function
(	O
"%s"	pointer
,	O
_	O
(	O
"invalid data type"	pointer
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
return	O
idx	long
;	O
}	O
mu_sieve_value_t	struct
*	O
mu_sieve_get_arg_untyped	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
size_t	long
index	function
)	O
{	O
if	O
(	O
index	function
>=	O
mach	pointer
->	O
argcount	long
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"INTERNAL ERROR: %s,%zu,%zu,%zu argument index %zu out of range"	pointer
)	O
,	O
mach	pointer
->	O
identifier	pointer
,	O
mach	pointer
->	O
argstart	long
,	O
mach	pointer
->	O
argcount	long
,	O
mach	pointer
->	O
tagcount	long
,	O
index	function
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
return	O
mach	pointer
->	O
valspace	pointer
+	O
mach	pointer
->	O
argstart	long
+	O
index	function
;	O
}	O
mu_sieve_value_t	struct
*	O
mu_sieve_get_arg_optional	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
size_t	long
index	function
)	O
{	O
if	O
(	O
index	function
>=	O
mach	pointer
->	O
argcount	long
)	O
return	O
NULL	O
;	O
return	O
mach	pointer
->	O
valspace	pointer
+	O
mach	pointer
->	O
argstart	long
+	O
index	function
;	O
}	O
void	O
mu_sieve_value_get	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_sieve_value_t	struct
*	O
val	pointer
,	O
mu_sieve_data_type	enum
type	int
,	O
void	O
*	O
ret	pointer
)	O
{	O
if	O
(	O
val	pointer
->	O
type	int
==	O
SVT_STRING	int
&&	O
type	int
==	O
SVT_STRING_LIST	int
)	O
;	O
else	O
if	O
(	O
val	pointer
->	O
type	int
!=	O
type	int
)	O
{	O
if	O
(	O
val	pointer
->	O
tag	pointer
)	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"tag :%s has type %s, instead of expected %s"	pointer
)	O
,	O
val	pointer
->	O
tag	pointer
,	O
mu_sieve_type_str	function
(	O
val	pointer
->	O
type	int
)	O
,	O
mu_sieve_type_str	function
(	O
type	int
)	O
)	O
;	O
else	O
{	O
size_t	long
idx	long
=	O
val	pointer
-	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
0	int
)	O
;	O
if	O
(	O
idx	long
<	O
mach	pointer
->	O
argcount	long
)	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"argument %zu has type %s, instead of expected %s"	pointer
)	O
,	O
idx	long
,	O
mu_sieve_type_str	function
(	O
val	pointer
->	O
type	int
)	O
,	O
mu_sieve_type_str	function
(	O
type	int
)	O
)	O
;	O
else	O
abort	function
(	O
)	O
;	O
}	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
switch	O
(	O
type	int
)	O
{	O
case	O
SVT_VOID	int
:	O
*	O
(	O
void	O
*	O
*	O
)	O
ret	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
SVT_NUMBER	int
:	O
*	O
(	O
size_t	long
*	O
)	O
ret	pointer
=	O
val	pointer
->	O
v	array
.	O
number	long
;	O
break	O
;	O
case	O
SVT_STRING	int
:	O
*	O
(	O
char	O
*	O
*	O
)	O
ret	pointer
=	O
mu_sieve_string	struct
(	O
mach	pointer
,	O
&	O
val	pointer
->	O
v	array
.	O
list	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
SVT_STRING_LIST	int
:	O
*	O
(	O
struct	O
mu_sieve_slice	struct
*	O
)	O
ret	pointer
=	O
val	pointer
->	O
v	array
.	O
list	pointer
;	O
break	O
;	O
case	O
SVT_TAG	int
:	O
*	O
(	O
char	O
*	O
*	O
)	O
ret	pointer
=	O
val	pointer
->	O
v	array
.	O
string	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
void	O
mu_sieve_get_arg	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
size_t	long
index	function
,	O
mu_sieve_data_type	enum
type	int
,	O
void	O
*	O
ret	pointer
)	O
{	O
mu_sieve_value_get	function
(	O
mach	pointer
,	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
index	function
)	O
,	O
type	int
,	O
ret	pointer
)	O
;	O
}	O
mu_sieve_value_t	struct
*	O
mu_sieve_get_tag_untyped	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
name	pointer
)	O
{	O
size_t	long
i	long
;	O
mu_sieve_value_t	struct
*	O
tag	pointer
=	O
mach	pointer
->	O
valspace	pointer
+	O
mach	pointer
->	O
argstart	long
+	O
mach	pointer
->	O
argcount	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
tagcount	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
tag	pointer
[	O
i	long
]	O
.	O
tag	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
&	O
tag	pointer
[	O
i	long
]	O
;	O
}	O
return	O
NULL	O
;	O
}	O
mu_sieve_value_t	struct
*	O
mu_sieve_get_tag_n	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
size_t	long
n	pointer
)	O
{	O
if	O
(	O
n	pointer
>=	O
mach	pointer
->	O
tagcount	long
)	O
abort	function
(	O
)	O
;	O
return	O
&	O
mach	pointer
->	O
valspace	pointer
[	O
mach	pointer
->	O
argstart	long
+	O
mach	pointer
->	O
argcount	long
+	O
n	pointer
]	O
;	O
}	O
int	O
mu_sieve_get_tag	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
*	O
name	pointer
,	O
mu_sieve_data_type	enum
type	int
,	O
void	O
*	O
ret	pointer
)	O
{	O
mu_sieve_value_t	struct
*	O
val	pointer
=	O
mu_sieve_get_tag_untyped	function
(	O
mach	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
val	pointer
)	O
{	O
if	O
(	O
ret	pointer
)	O
mu_sieve_value_get	function
(	O
mach	pointer
,	O
val	pointer
,	O
type	int
,	O
ret	pointer
)	O
;	O
}	O
return	O
val	pointer
!=	O
NULL	O
;	O
}	O
void	O
mu_sieve_error	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
mu_stream_printf	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
"\033s<%d>"	pointer
,	O
MU_LOG_ERROR	int
)	O
;	O
if	O
(	O
mach	pointer
->	O
identifier	pointer
)	O
mu_stream_printf	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
"%s: "	pointer
,	O
mach	pointer
->	O
identifier	pointer
)	O
;	O
mu_stream_vprintf	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
mu_stream_write	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
const	O
char	O
*	O
mu_sieve_type_str	function
(	O
mu_sieve_data_type	enum
type	int
)	O
{	O
switch	O
(	O
type	int
)	O
{	O
case	O
SVT_VOID	int
:	O
return	O
"void"	pointer
;	O
case	O
SVT_NUMBER	int
:	O
return	O
"number"	pointer
;	O
case	O
SVT_STRING	int
:	O
return	O
"string"	pointer
;	O
case	O
SVT_STRING_LIST	int
:	O
return	O
"string-list"	pointer
;	O
case	O
SVT_TAG	int
:	O
return	O
"tag"	pointer
;	O
}	O
return	O
"unknown"	pointer
;	O
}	O
void	O
mu_i_sv_debug	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
size_t	long
pc	long
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
if	O
(	O
mach	pointer
->	O
state_flags	int
&	O
MU_SV_SAVED_DBG_STATE	int
)	O
{	O
unsigned	O
severity	int
=	O
MU_LOG_DEBUG	int
;	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_SEVERITY	int
,	O
&	O
severity	int
)	O
;	O
if	O
(	O
mach	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_file	pointer
)	O
{	O
int	O
mode	int
=	O
mach	pointer
->	O
dbg_mode	int
|	O
MU_LOGMODE_LOCUS	int
;	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_LOCUS_RANGE	int
,	O
&	O
mach	pointer
->	O
locus	struct
)	O
;	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_MODE	int
,	O
&	O
mode	int
)	O
;	O
}	O
}	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
mu_stream_printf	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
"%4zu: "	pointer
,	O
pc	long
)	O
;	O
mu_stream_vprintf	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
mu_stream_write	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
mu_i_sv_debug_command	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
size_t	long
pc	long
,	O
char	O
const	O
*	O
what	pointer
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
mach	pointer
->	O
state_flags	int
&	O
MU_SV_SAVED_DBG_STATE	int
)	O
{	O
unsigned	O
severity	int
=	O
MU_LOG_DEBUG	int
;	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_SEVERITY	int
,	O
&	O
severity	int
)	O
;	O
if	O
(	O
mach	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_file	pointer
)	O
{	O
int	O
mode	int
=	O
mach	pointer
->	O
dbg_mode	int
|	O
MU_LOGMODE_LOCUS	int
;	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_LOCUS_RANGE	int
,	O
&	O
mach	pointer
->	O
locus	struct
)	O
;	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_MODE	int
,	O
&	O
mode	int
)	O
;	O
}	O
}	O
mu_stream_printf	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
"%4zu: %s: %s"	pointer
,	O
pc	long
,	O
what	pointer
,	O
mach	pointer
->	O
identifier	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
argcount	long
;	O
i	long
++	O
)	O
mu_i_sv_valf	function
(	O
mach	pointer
,	O
mach	pointer
->	O
dbgstream	pointer
,	O
&	O
mach	pointer
->	O
valspace	pointer
[	O
mach	pointer
->	O
argstart	long
+	O
i	long
]	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
tagcount	long
;	O
i	long
++	O
)	O
mu_i_sv_valf	function
(	O
mach	pointer
,	O
mach	pointer
->	O
dbgstream	pointer
,	O
mu_sieve_get_tag_n	function
(	O
mach	pointer
,	O
i	long
)	O
)	O
;	O
mu_stream_write	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
void	O
mu_i_sv_trace	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
const	O
char	O
*	O
what	pointer
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
!	O
mu_debug_level_p	function
(	O
mu_sieve_debug_handle	int
,	O
MU_DEBUG_TRACE4	int
)	O
)	O
return	O
;	O
mu_stream_printf	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
"\033s<%d>"	pointer
,	O
MU_LOG_DEBUG	int
)	O
;	O
mu_stream_printf	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
"%zu: %s %s"	pointer
,	O
mach	pointer
->	O
msgno	long
,	O
what	pointer
,	O
mach	pointer
->	O
identifier	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
argcount	long
;	O
i	long
++	O
)	O
mu_i_sv_valf	function
(	O
mach	pointer
,	O
mach	pointer
->	O
errstream	pointer
,	O
mu_sieve_get_arg_untyped	function
(	O
mach	pointer
,	O
i	long
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
tagcount	long
;	O
i	long
++	O
)	O
mu_i_sv_valf	function
(	O
mach	pointer
,	O
mach	pointer
->	O
errstream	pointer
,	O
mu_sieve_get_tag_n	function
(	O
mach	pointer
,	O
i	long
)	O
)	O
;	O
mu_stream_printf	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
void	O
mu_sieve_log_action	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
const	O
char	O
*	O
action	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
if	O
(	O
!	O
mach	pointer
->	O
logger	pointer
)	O
return	O
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
mach	pointer
->	O
logger	pointer
(	O
mach	pointer
,	O
action	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
int	O
mu_sieve_vlist_do	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_sieve_value_t	struct
*	O
val	pointer
,	O
mu_list_action_t	pointer
ac	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
size_t	long
i	long
;	O
switch	O
(	O
val	pointer
->	O
type	int
)	O
{	O
case	O
SVT_STRING_LIST	int
:	O
case	O
SVT_STRING	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
val	pointer
->	O
v	array
.	O
list	pointer
.	O
count	long
;	O
i	long
++	O
)	O
{	O
int	O
rc	int
=	O
ac	pointer
(	O
mu_sieve_string	struct
(	O
mach	pointer
,	O
&	O
val	pointer
->	O
v	array
.	O
list	pointer
,	O
i	long
)	O
,	O
data	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
default	O
:	O
mu_error	function
(	O
"mu_sieve_vlist_do: unexpected list type %d"	pointer
,	O
val	pointer
->	O
type	int
)	O
;	O
return	O
EINVAL	int
;	O
}	O
}	O
int	O
mu_sieve_vlist_compare	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_sieve_value_t	struct
*	O
a	pointer
,	O
mu_sieve_value_t	struct
*	O
b	pointer
,	O
mu_sieve_retrieve_t	pointer
retr	pointer
,	O
mu_list_folder_t	pointer
fold	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
size_t	long
i	long
;	O
mu_sieve_comparator_t	pointer
comp	array
=	O
mu_sieve_get_comparator	function
(	O
mach	pointer
)	O
;	O
mu_sieve_relcmp_t	pointer
test	pointer
=	O
mu_sieve_get_relcmp	function
(	O
mach	pointer
)	O
;	O
char	O
*	O
relcmp	pointer
;	O
mu_list_t	pointer
tmp	pointer
;	O
if	O
(	O
!	O
(	O
a	pointer
->	O
type	int
==	O
SVT_STRING_LIST	int
||	O
a	pointer
->	O
type	int
==	O
SVT_STRING	int
)	O
)	O
abort	function
(	O
)	O
;	O
rc	int
=	O
mu_list_create	function
(	O
&	O
tmp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"mu_list_create: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
mu_list_set_destroy_item	function
(	O
tmp	pointer
,	O
mu_list_free_item	function
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
a	pointer
->	O
v	array
.	O
list	pointer
.	O
count	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
item	pointer
=	O
mu_sieve_string	struct
(	O
mach	pointer
,	O
&	O
a	pointer
->	O
v	array
.	O
list	pointer
,	O
i	long
)	O
;	O
char	O
*	O
sample	pointer
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
(	O
rc	int
=	O
retr	pointer
(	O
item	pointer
,	O
data	pointer
,	O
j	long
,	O
&	O
sample	pointer
)	O
)	O
==	O
0	int
;	O
j	long
++	O
)	O
{	O
if	O
(	O
!	O
sample	pointer
)	O
continue	O
;	O
rc	int
=	O
mu_list_append	function
(	O
tmp	pointer
,	O
sample	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
sample	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
tmp	pointer
)	O
;	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"mu_list_append: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
}	O
if	O
(	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
{	O
mu_list_destroy	function
(	O
&	O
tmp	pointer
)	O
;	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"retriever failure: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
}	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"count"	pointer
,	O
SVT_STRING	int
,	O
&	O
relcmp	pointer
)	O
)	O
{	O
size_t	long
limit	long
;	O
size_t	long
count	long
;	O
mu_sieve_relcmpn_t	pointer
stest	pointer
;	O
struct	O
mu_sieve_slice	struct
slice	pointer
;	O
char	O
*	O
str	pointer
,	O
*	O
p	pointer
;	O
if	O
(	O
fold	pointer
)	O
{	O
count	long
=	O
0	int
;	O
rc	int
=	O
mu_list_fold	function
(	O
tmp	pointer
,	O
fold	pointer
,	O
data	pointer
,	O
&	O
count	long
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"mu_list_fold: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
}	O
else	O
mu_list_count	function
(	O
tmp	pointer
,	O
&	O
count	long
)	O
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
1	int
,	O
SVT_STRING_LIST	int
,	O
&	O
slice	pointer
)	O
;	O
str	pointer
=	O
mu_sieve_string	struct
(	O
mach	pointer
,	O
&	O
slice	pointer
,	O
0	int
)	O
;	O
limit	long
=	O
strtoul	function
(	O
str	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%s: not an integer"	pointer
)	O
,	O
str	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
mu_sieve_str_to_relcmp	function
(	O
relcmp	pointer
,	O
NULL	O
,	O
&	O
stest	pointer
)	O
;	O
rc	int
=	O
stest	pointer
(	O
count	long
,	O
limit	long
)	O
;	O
}	O
else	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
mu_list_get_iterator	function
(	O
tmp	pointer
,	O
&	O
itr	pointer
)	O
;	O
rc	int
=	O
0	int
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
rc	int
==	O
0	int
&&	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
char	O
const	O
*	O
val	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
val	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
b	pointer
->	O
v	array
.	O
list	pointer
.	O
count	long
;	O
i	long
++	O
)	O
{	O
mu_sieve_string_t	struct
*	O
s	pointer
=	O
mu_sieve_string_raw	function
(	O
mach	pointer
,	O
&	O
b	pointer
->	O
v	array
.	O
list	pointer
,	O
i	long
)	O
;	O
rc	int
=	O
test	pointer
(	O
comp	array
(	O
mach	pointer
,	O
s	pointer
,	O
val	pointer
)	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
mu_list_destroy	function
(	O
&	O
tmp	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
void	O
mu_sieve_stream_save	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
if	O
(	O
mach	pointer
->	O
state_flags	int
&	O
MU_SV_SAVED_STATE	int
)	O
return	O
;	O
if	O
(	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_GET_MODE	int
,	O
&	O
mach	pointer
->	O
err_mode	int
)	O
==	O
0	int
&&	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_GET_LOCUS_RANGE	int
,	O
&	O
mach	pointer
->	O
err_locus	struct
)	O
==	O
0	int
)	O
mach	pointer
->	O
state_flags	int
|=	O
MU_SV_SAVED_ERR_STATE	int
;	O
if	O
(	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_GET_MODE	int
,	O
&	O
mach	pointer
->	O
dbg_mode	int
)	O
==	O
0	int
&&	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_GET_LOCUS_RANGE	int
,	O
&	O
mach	pointer
->	O
dbg_locus	struct
)	O
==	O
0	int
)	O
mach	pointer
->	O
state_flags	int
|=	O
MU_SV_SAVED_DBG_STATE	int
;	O
mach	pointer
->	O
state_flags	int
|=	O
MU_SV_SAVED_STATE	int
;	O
}	O
void	O
mu_sieve_stream_restore	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
if	O
(	O
!	O
(	O
mach	pointer
->	O
state_flags	int
&	O
MU_SV_SAVED_STATE	int
)	O
)	O
return	O
;	O
if	O
(	O
mach	pointer
->	O
state_flags	int
&	O
MU_SV_SAVED_ERR_STATE	int
)	O
{	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_MODE	int
,	O
&	O
mach	pointer
->	O
err_mode	int
)	O
;	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_LOCUS_RANGE	int
,	O
&	O
mach	pointer
->	O
err_locus	struct
)	O
;	O
}	O
if	O
(	O
mach	pointer
->	O
dbgstream	pointer
!=	O
mach	pointer
->	O
errstream	pointer
&&	O
(	O
mach	pointer
->	O
state_flags	int
&	O
MU_SV_SAVED_DBG_STATE	int
)	O
)	O
{	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_MODE	int
,	O
&	O
mach	pointer
->	O
dbg_mode	int
)	O
;	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
dbgstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_LOCUS_RANGE	int
,	O
&	O
mach	pointer
->	O
dbg_locus	struct
)	O
;	O
}	O
mach	pointer
->	O
state_flags	int
=	O
0	int
;	O
}	O
