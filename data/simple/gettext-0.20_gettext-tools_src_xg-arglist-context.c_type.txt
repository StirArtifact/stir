flag_context_ty	struct
null_context	struct
=	O
{	O
undecided	int
,	O
false	int
,	O
undecided	int
,	O
false	int
}	O
;	O
flag_context_ty	struct
passthrough_context	struct
=	O
{	O
undecided	int
,	O
true	int
,	O
undecided	int
,	O
true	int
}	O
;	O
flag_context_ty	struct
inherited_context	function
(	O
flag_context_ty	struct
outer_context	struct
,	O
flag_context_ty	struct
modifier_context	struct
)	O
{	O
flag_context_ty	struct
result	pointer
=	O
modifier_context	struct
;	O
if	O
(	O
result	pointer
.	O
pass_format1	int
)	O
{	O
result	pointer
.	O
is_format1	int
=	O
outer_context	struct
.	O
is_format1	int
;	O
result	pointer
.	O
pass_format1	int
=	O
false	int
;	O
}	O
if	O
(	O
result	pointer
.	O
pass_format2	int
)	O
{	O
result	pointer
.	O
is_format2	int
=	O
outer_context	struct
.	O
is_format2	int
;	O
result	pointer
.	O
pass_format2	int
=	O
false	int
;	O
}	O
if	O
(	O
result	pointer
.	O
pass_format3	int
)	O
{	O
result	pointer
.	O
is_format3	int
=	O
outer_context	struct
.	O
is_format3	int
;	O
result	pointer
.	O
pass_format3	int
=	O
false	int
;	O
}	O
return	O
result	pointer
;	O
}	O
flag_context_list_iterator_ty	struct
null_context_list_iterator	struct
=	O
{	O
1	int
,	O
NULL	O
}	O
;	O
static	O
flag_context_list_ty	struct
passthrough_context_circular_list	struct
=	O
{	O
1	int
,	O
{	O
undecided	int
,	O
true	int
,	O
undecided	int
,	O
true	int
}	O
,	O
&	O
passthrough_context_circular_list	struct
}	O
;	O
flag_context_list_iterator_ty	struct
passthrough_context_list_iterator	struct
=	O
{	O
1	int
,	O
&	O
passthrough_context_circular_list	struct
}	O
;	O
flag_context_list_iterator_ty	struct
flag_context_list_iterator	function
(	O
flag_context_list_ty	struct
*	O
list	pointer
)	O
{	O
flag_context_list_iterator_ty	struct
result	pointer
;	O
result	pointer
.	O
argnum	int
=	O
1	int
;	O
result	pointer
.	O
head	pointer
=	O
list	pointer
;	O
return	O
result	pointer
;	O
}	O
flag_context_ty	struct
flag_context_list_iterator_advance	function
(	O
flag_context_list_iterator_ty	struct
*	O
iter	pointer
)	O
{	O
if	O
(	O
iter	pointer
->	O
head	pointer
==	O
NULL	O
)	O
return	O
null_context	struct
;	O
if	O
(	O
iter	pointer
->	O
argnum	int
==	O
iter	pointer
->	O
head	pointer
->	O
argnum	int
)	O
{	O
flag_context_ty	struct
result	pointer
=	O
iter	pointer
->	O
head	pointer
->	O
flags	struct
;	O
if	O
(	O
iter	pointer
->	O
head	pointer
!=	O
iter	pointer
->	O
head	pointer
->	O
next	pointer
)	O
{	O
iter	pointer
->	O
head	pointer
=	O
iter	pointer
->	O
head	pointer
->	O
next	pointer
;	O
iter	pointer
->	O
argnum	int
++	O
;	O
}	O
return	O
result	pointer
;	O
}	O
else	O
{	O
iter	pointer
->	O
argnum	int
++	O
;	O
return	O
null_context	struct
;	O
}	O
}	O
flag_context_list_ty	struct
*	O
flag_context_list_table_lookup	function
(	O
flag_context_list_table_ty	struct
*	O
flag_table	pointer
,	O
const	O
void	O
*	O
key	pointer
,	O
size_t	long
keylen	long
)	O
{	O
void	O
*	O
entry	pointer
;	O
if	O
(	O
flag_table	pointer
->	O
table	pointer
!=	O
NULL	O
&&	O
hash_find_entry	function
(	O
flag_table	pointer
,	O
key	pointer
,	O
keylen	long
,	O
&	O
entry	pointer
)	O
==	O
0	int
)	O
return	O
(	O
flag_context_list_ty	struct
*	O
)	O
entry	pointer
;	O
else	O
return	O
NULL	O
;	O
}	O
void	O
flag_context_list_table_add	function
(	O
flag_context_list_table_ty	struct
*	O
table	pointer
,	O
unsigned	O
int	O
index	function
,	O
const	O
char	O
*	O
name_start	pointer
,	O
const	O
char	O
*	O
name_end	pointer
,	O
int	O
argnum	int
,	O
enum	O
is_format	enum
value	enum
,	O
bool	bool
pass	bool
)	O
{	O
if	O
(	O
table	pointer
->	O
table	pointer
==	O
NULL	O
)	O
hash_init	function
(	O
table	pointer
,	O
100	int
)	O
;	O
{	O
void	O
*	O
entry	pointer
;	O
if	O
(	O
hash_find_entry	function
(	O
table	pointer
,	O
name_start	pointer
,	O
name_end	pointer
-	O
name_start	pointer
,	O
&	O
entry	pointer
)	O
!=	O
0	int
)	O
{	O
flag_context_list_ty	struct
*	O
list	pointer
=	O
XMALLOC	O
(	O
flag_context_list_ty	struct
)	O
;	O
list	pointer
->	O
argnum	int
=	O
argnum	int
;	O
memset	function
(	O
&	O
list	pointer
->	O
flags	struct
,	O
'\0'	O
,	O
sizeof	O
(	O
list	pointer
->	O
flags	struct
)	O
)	O
;	O
switch	O
(	O
index	function
)	O
{	O
case	O
0	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format1	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format1	int
=	O
pass	bool
;	O
break	O
;	O
case	O
1	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format2	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format2	int
=	O
pass	bool
;	O
break	O
;	O
case	O
2	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format3	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format3	int
=	O
pass	bool
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
list	pointer
->	O
next	pointer
=	O
NULL	O
;	O
hash_insert_entry	function
(	O
table	pointer
,	O
name_start	pointer
,	O
name_end	pointer
-	O
name_start	pointer
,	O
list	pointer
)	O
;	O
}	O
else	O
{	O
flag_context_list_ty	struct
*	O
list	pointer
=	O
(	O
flag_context_list_ty	struct
*	O
)	O
entry	pointer
;	O
flag_context_list_ty	struct
*	O
*	O
lastp	pointer
=	O
NULL	O
;	O
while	O
(	O
list	pointer
!=	O
NULL	O
&&	O
list	pointer
->	O
argnum	int
<	O
argnum	int
)	O
{	O
lastp	pointer
=	O
&	O
list	pointer
->	O
next	pointer
;	O
list	pointer
=	O
*	O
lastp	pointer
;	O
}	O
if	O
(	O
list	pointer
!=	O
NULL	O
&&	O
list	pointer
->	O
argnum	int
==	O
argnum	int
)	O
{	O
switch	O
(	O
index	function
)	O
{	O
case	O
0	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format1	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format1	int
=	O
pass	bool
;	O
break	O
;	O
case	O
1	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format2	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format2	int
=	O
pass	bool
;	O
break	O
;	O
case	O
2	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format3	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format3	int
=	O
pass	bool
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
lastp	pointer
!=	O
NULL	O
)	O
{	O
list	pointer
=	O
XMALLOC	O
(	O
flag_context_list_ty	struct
)	O
;	O
list	pointer
->	O
argnum	int
=	O
argnum	int
;	O
memset	function
(	O
&	O
list	pointer
->	O
flags	struct
,	O
'\0'	O
,	O
sizeof	O
(	O
list	pointer
->	O
flags	struct
)	O
)	O
;	O
switch	O
(	O
index	function
)	O
{	O
case	O
0	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format1	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format1	int
=	O
pass	bool
;	O
break	O
;	O
case	O
1	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format2	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format2	int
=	O
pass	bool
;	O
break	O
;	O
case	O
2	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format3	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format3	int
=	O
pass	bool
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
list	pointer
->	O
next	pointer
=	O
*	O
lastp	pointer
;	O
*	O
lastp	pointer
=	O
list	pointer
;	O
}	O
else	O
{	O
flag_context_list_ty	struct
*	O
copy	pointer
=	O
XMALLOC	O
(	O
flag_context_list_ty	struct
)	O
;	O
*	O
copy	pointer
=	O
*	O
list	pointer
;	O
list	pointer
->	O
argnum	int
=	O
argnum	int
;	O
memset	function
(	O
&	O
list	pointer
->	O
flags	struct
,	O
'\0'	O
,	O
sizeof	O
(	O
list	pointer
->	O
flags	struct
)	O
)	O
;	O
switch	O
(	O
index	function
)	O
{	O
case	O
0	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format1	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format1	int
=	O
pass	bool
;	O
break	O
;	O
case	O
1	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format2	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format2	int
=	O
pass	bool
;	O
break	O
;	O
case	O
2	int
:	O
list	pointer
->	O
flags	struct
.	O
is_format3	int
=	O
value	enum
;	O
list	pointer
->	O
flags	struct
.	O
pass_format3	int
=	O
pass	bool
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
list	pointer
->	O
next	pointer
=	O
copy	pointer
;	O
}	O
}	O
}	O
}	O
