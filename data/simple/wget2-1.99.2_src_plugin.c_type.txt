static	O
const	O
char	O
*	O
plugin_list_envvar	pointer
=	O
"WGET2_PLUGINS"	pointer
;	O
static	O
void	O
split_string	function
(	O
const	O
char	O
*	O
str	pointer
,	O
char	O
separator	char
,	O
wget_vector	struct
*	O
v	pointer
)	O
{	O
const	O
char	O
*	O
ptr	pointer
,	O
*	O
pmark	pointer
;	O
for	O
(	O
pmark	pointer
=	O
ptr	pointer
=	O
str	pointer
;	O
*	O
ptr	pointer
;	O
pmark	pointer
=	O
ptr	pointer
+	O
1	int
)	O
{	O
if	O
(	O
(	O
ptr	pointer
=	O
strchrnul	function
(	O
pmark	pointer
,	O
separator	char
)	O
)	O
>	O
pmark	pointer
)	O
wget_vector_add	function
(	O
v	pointer
,	O
wget_strmemdup	function
(	O
pmark	pointer
,	O
ptr	pointer
-	O
pmark	pointer
)	O
)	O
;	O
}	O
}	O
typedef	O
struct	O
{	O
plugin_t	struct
parent	struct
;	O
wget_plugin_finalizer_fn	function
*	O
finalizer	pointer
;	O
wget_plugin_option_callback	function
*	O
argp	pointer
;	O
wget_plugin_url_filter_callback	function
*	O
url_filter	pointer
;	O
wget_plugin_post_processor	function
*	O
post_processor	pointer
;	O
char	O
name_buf	array
[	O
]	O
;	O
}	O
plugin_priv_t	struct
;	O
static	O
int	O
initialized	int
=	O
0	int
;	O
static	O
wget_vector	struct
*	O
search_paths	pointer
;	O
static	O
wget_vector	struct
*	O
plugin_list	pointer
;	O
static	O
wget_stringmap	struct
*	O
plugin_name_index	pointer
;	O
static	O
int	O
plugin_help_forwarded	int
;	O
void	O
plugin_db_add_search_paths	function
(	O
const	O
char	O
*	O
paths	pointer
,	O
char	O
separator	char
)	O
{	O
split_string	function
(	O
paths	pointer
,	O
separator	char
,	O
search_paths	pointer
)	O
;	O
}	O
void	O
plugin_db_clear_search_paths	function
(	O
void	O
)	O
{	O
wget_vector_clear	function
(	O
search_paths	pointer
)	O
;	O
}	O
static	O
void	O
impl_register_finalizer	function
(	O
wget_plugin	struct
*	O
p_plugin	pointer
,	O
wget_plugin_finalizer_fn	function
*	O
fn	pointer
)	O
{	O
plugin_priv_t	struct
*	O
priv	pointer
=	O
(	O
plugin_priv_t	struct
*	O
)	O
p_plugin	pointer
;	O
priv	pointer
->	O
finalizer	pointer
=	O
fn	pointer
;	O
}	O
static	O
const	O
char	O
*	O
impl_get_name	function
(	O
wget_plugin	struct
*	O
p_plugin	pointer
)	O
{	O
plugin_t	struct
*	O
plugin	pointer
=	O
(	O
plugin_t	struct
*	O
)	O
p_plugin	pointer
;	O
return	O
plugin	pointer
->	O
name	pointer
;	O
}	O
static	O
void	O
impl_register_argp	function
(	O
wget_plugin	struct
*	O
p_plugin	pointer
,	O
wget_plugin_option_callback	function
*	O
fn	pointer
)	O
{	O
plugin_priv_t	struct
*	O
priv	pointer
=	O
(	O
plugin_priv_t	struct
*	O
)	O
p_plugin	pointer
;	O
priv	pointer
->	O
argp	pointer
=	O
fn	pointer
;	O
}	O
typedef	O
struct	O
{	O
wget_intercept_action	struct
parent	struct
;	O
struct	O
plugin_db_forward_url_verdict	struct
verdict	pointer
;	O
}	O
intercept_action_t	struct
;	O
static	O
void	O
impl_action_reject	function
(	O
wget_intercept_action	struct
*	O
p_action	pointer
)	O
{	O
intercept_action_t	struct
*	O
action	pointer
=	O
(	O
intercept_action_t	struct
*	O
)	O
p_action	pointer
;	O
action	pointer
->	O
verdict	pointer
.	O
reject	bool
=	O
1	int
;	O
}	O
static	O
void	O
impl_action_accept	function
(	O
wget_intercept_action	struct
*	O
p_action	pointer
)	O
{	O
intercept_action_t	struct
*	O
action	pointer
=	O
(	O
intercept_action_t	struct
*	O
)	O
p_action	pointer
;	O
action	pointer
->	O
verdict	pointer
.	O
accept	bool
=	O
1	int
;	O
}	O
static	O
void	O
impl_action_set_alt_url	function
(	O
wget_intercept_action	struct
*	O
p_action	pointer
,	O
const	O
wget_iri	struct
*	O
iri	pointer
)	O
{	O
intercept_action_t	struct
*	O
action	pointer
=	O
(	O
intercept_action_t	struct
*	O
)	O
p_action	pointer
;	O
if	O
(	O
action	pointer
->	O
verdict	pointer
.	O
alt_iri	pointer
)	O
wget_iri_free	function
(	O
&	O
action	pointer
->	O
verdict	pointer
.	O
alt_iri	pointer
)	O
;	O
action	pointer
->	O
verdict	pointer
.	O
alt_iri	pointer
=	O
wget_iri_clone	function
(	O
iri	pointer
)	O
;	O
}	O
static	O
void	O
impl_action_set_local_filename	function
(	O
wget_intercept_action	struct
*	O
p_action	pointer
,	O
const	O
char	O
*	O
local_filename	pointer
)	O
{	O
intercept_action_t	struct
*	O
action	pointer
=	O
(	O
intercept_action_t	struct
*	O
)	O
p_action	pointer
;	O
if	O
(	O
action	pointer
->	O
verdict	pointer
.	O
alt_local_filename	pointer
)	O
wget_free	pointer
(	O
action	pointer
->	O
verdict	pointer
.	O
alt_local_filename	pointer
)	O
;	O
action	pointer
->	O
verdict	pointer
.	O
alt_local_filename	pointer
=	O
wget_strdup	function
(	O
local_filename	pointer
)	O
;	O
}	O
static	O
void	O
impl_register_url_filter	function
(	O
wget_plugin	struct
*	O
p_plugin	pointer
,	O
wget_plugin_url_filter_callback	function
*	O
fn	pointer
)	O
{	O
plugin_priv_t	struct
*	O
priv	pointer
=	O
(	O
plugin_priv_t	struct
*	O
)	O
p_plugin	pointer
;	O
priv	pointer
->	O
url_filter	pointer
=	O
fn	pointer
;	O
}	O
typedef	O
struct	O
{	O
wget_downloaded_file	struct
parent	struct
;	O
const	O
wget_iri	struct
*	O
iri	pointer
;	O
const	O
char	O
*	O
filename	pointer
;	O
uint64_t	long
size	pointer
;	O
const	O
void	O
*	O
data	pointer
;	O
void	O
*	O
data_buf	pointer
;	O
wget_vector	struct
*	O
recurse_iris	pointer
;	O
}	O
downloaded_file_t	struct
;	O
static	O
const	O
wget_iri	struct
*	O
impl_file_get_source_url	function
(	O
wget_downloaded_file	struct
*	O
p_file	pointer
)	O
{	O
downloaded_file_t	struct
*	O
file	pointer
=	O
(	O
downloaded_file_t	struct
*	O
)	O
p_file	pointer
;	O
return	O
file	pointer
->	O
iri	pointer
;	O
}	O
static	O
const	O
char	O
*	O
impl_file_get_local_filename	function
(	O
wget_downloaded_file	struct
*	O
p_file	pointer
)	O
{	O
downloaded_file_t	struct
*	O
file	pointer
=	O
(	O
downloaded_file_t	struct
*	O
)	O
p_file	pointer
;	O
return	O
file	pointer
->	O
filename	pointer
;	O
}	O
static	O
uint64_t	long
impl_file_get_size	function
(	O
wget_downloaded_file	struct
*	O
p_file	pointer
)	O
{	O
downloaded_file_t	struct
*	O
file	pointer
=	O
(	O
downloaded_file_t	struct
*	O
)	O
p_file	pointer
;	O
return	O
file	pointer
->	O
size	pointer
;	O
}	O
static	O
int	O
impl_file_get_contents	function
(	O
wget_downloaded_file	struct
*	O
p_file	pointer
,	O
const	O
void	O
*	O
*	O
data	pointer
,	O
size_t	long
*	O
size	pointer
)	O
{	O
downloaded_file_t	struct
*	O
file	pointer
=	O
(	O
downloaded_file_t	struct
*	O
)	O
p_file	pointer
;	O
if	O
(	O
(	O
!	O
file	pointer
->	O
data	pointer
)	O
&&	O
file	pointer
->	O
filename	pointer
)	O
{	O
size_t	long
dummy	long
;	O
file	pointer
->	O
data_buf	pointer
=	O
wget_read_file	function
(	O
file	pointer
->	O
filename	pointer
,	O
&	O
dummy	long
)	O
;	O
if	O
(	O
!	O
file	pointer
->	O
data_buf	pointer
)	O
return	O
-	O
1	int
;	O
file	pointer
->	O
data	pointer
=	O
file	pointer
->	O
data_buf	pointer
;	O
}	O
*	O
data	pointer
=	O
file	pointer
->	O
data	pointer
;	O
*	O
size	pointer
=	O
file	pointer
->	O
size	pointer
;	O
return	O
0	int
;	O
}	O
static	O
FILE	struct
*	O
impl_file_open_stream	function
(	O
wget_downloaded_file	struct
*	O
p_file	pointer
)	O
{	O
downloaded_file_t	struct
*	O
file	pointer
=	O
(	O
downloaded_file_t	struct
*	O
)	O
p_file	pointer
;	O
if	O
(	O
file	pointer
->	O
data	pointer
)	O
return	O
fmemopen	function
(	O
(	O
void	O
*	O
)	O
file	pointer
->	O
data	pointer
,	O
file	pointer
->	O
size	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
file	pointer
->	O
filename	pointer
)	O
return	O
fopen	function
(	O
file	pointer
->	O
filename	pointer
,	O
"rb"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
bool	bool
impl_file_get_recurse	function
(	O
wget_downloaded_file	struct
*	O
p_file	pointer
)	O
{	O
downloaded_file_t	struct
*	O
file	pointer
=	O
(	O
downloaded_file_t	struct
*	O
)	O
p_file	pointer
;	O
return	O
file	pointer
->	O
recurse_iris	pointer
?	O
true	int
:	O
false	int
;	O
}	O
static	O
void	O
impl_file_add_recurse_url	function
(	O
wget_downloaded_file	struct
*	O
p_file	pointer
,	O
const	O
wget_iri	struct
*	O
iri	pointer
)	O
{	O
downloaded_file_t	struct
*	O
file	pointer
=	O
(	O
downloaded_file_t	struct
*	O
)	O
p_file	pointer
;	O
if	O
(	O
file	pointer
->	O
recurse_iris	pointer
)	O
wget_vector_add	function
(	O
file	pointer
->	O
recurse_iris	pointer
,	O
wget_iri_clone	function
(	O
iri	pointer
)	O
)	O
;	O
}	O
static	O
void	O
impl_register_post_processor	function
(	O
wget_plugin	struct
*	O
p_plugin	pointer
,	O
wget_plugin_post_processor	function
*	O
fn	pointer
)	O
{	O
plugin_priv_t	struct
*	O
priv	pointer
=	O
(	O
plugin_priv_t	struct
*	O
)	O
p_plugin	pointer
;	O
priv	pointer
->	O
post_processor	pointer
=	O
fn	pointer
;	O
}	O
static	O
struct	O
wget_plugin_vtable	struct
vtable	pointer
=	O
{	O
.	O
get_name	pointer
=	O
impl_get_name	function
,	O
.	O
register_finalizer	pointer
=	O
impl_register_finalizer	function
,	O
.	O
register_argp	pointer
=	O
impl_register_argp	function
,	O
.	O
action_reject	pointer
=	O
impl_action_reject	function
,	O
.	O
action_accept	pointer
=	O
impl_action_accept	function
,	O
.	O
action_set_alt_url	pointer
=	O
impl_action_set_alt_url	function
,	O
.	O
action_set_local_filename	pointer
=	O
impl_action_set_local_filename	function
,	O
.	O
register_url_filter	pointer
=	O
impl_register_url_filter	function
,	O
.	O
file_get_source_url	pointer
=	O
impl_file_get_source_url	function
,	O
.	O
file_get_local_filename	pointer
=	O
impl_file_get_local_filename	function
,	O
.	O
file_get_size	pointer
=	O
impl_file_get_size	function
,	O
.	O
file_get_contents	pointer
=	O
impl_file_get_contents	function
,	O
.	O
file_open_stream	pointer
=	O
impl_file_open_stream	function
,	O
.	O
file_get_recurse	pointer
=	O
impl_file_get_recurse	function
,	O
.	O
file_add_recurse_url	pointer
=	O
impl_file_add_recurse_url	function
,	O
.	O
register_post_processor	pointer
=	O
impl_register_post_processor	function
,	O
}	O
;	O
static	O
void	O
plugin_free	function
(	O
plugin_t	struct
*	O
plugin	pointer
)	O
{	O
dl_file_close	function
(	O
plugin	pointer
->	O
dm	pointer
)	O
;	O
wget_free	pointer
(	O
plugin	pointer
)	O
;	O
}	O
static	O
plugin_t	struct
*	O
_load_plugin	function
(	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
path	pointer
,	O
dl_error_t	struct
*	O
e	pointer
)	O
{	O
size_t	long
name_len	long
;	O
dl_file_t	struct
*	O
dm	pointer
;	O
plugin_t	struct
*	O
plugin	pointer
;	O
plugin_priv_t	struct
*	O
priv	pointer
;	O
wget_plugin_initializer_fn	function
*	O
init_fn	pointer
;	O
name_len	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
dm	pointer
=	O
dl_file_open	function
(	O
path	pointer
,	O
e	pointer
)	O
;	O
if	O
(	O
!	O
dm	pointer
)	O
return	O
NULL	O
;	O
plugin	pointer
=	O
wget_malloc	function
(	O
sizeof	O
(	O
plugin_priv_t	struct
)	O
+	O
name_len	long
+	O
1	int
)	O
;	O
priv	pointer
=	O
(	O
plugin_priv_t	struct
*	O
)	O
plugin	pointer
;	O
priv	pointer
->	O
finalizer	pointer
=	O
NULL	O
;	O
priv	pointer
->	O
argp	pointer
=	O
NULL	O
;	O
priv	pointer
->	O
url_filter	pointer
=	O
NULL	O
;	O
priv	pointer
->	O
post_processor	pointer
=	O
NULL	O
;	O
wget_strscpy	function
(	O
priv	pointer
->	O
name_buf	array
,	O
name	pointer
,	O
name_len	long
+	O
1	int
)	O
;	O
plugin	pointer
->	O
parent	struct
.	O
plugin_data	pointer
=	O
NULL	O
;	O
plugin	pointer
->	O
parent	struct
.	O
vtable	pointer
=	O
&	O
vtable	pointer
;	O
plugin	pointer
->	O
name	pointer
=	O
priv	pointer
->	O
name_buf	array
;	O
plugin	pointer
->	O
dm	pointer
=	O
dm	pointer
;	O
*	O
(	O
(	O
void	O
*	O
*	O
)	O
(	O
&	O
init_fn	pointer
)	O
)	O
=	O
dl_file_lookup	function
(	O
dm	pointer
,	O
"wget_plugin_initializer"	pointer
,	O
e	pointer
)	O
;	O
if	O
(	O
!	O
init_fn	pointer
)	O
{	O
plugin_free	function
(	O
plugin	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
init_fn	pointer
(	O
(	O
wget_plugin	struct
*	O
)	O
plugin	pointer
)	O
!=	O
0	int
)	O
{	O
dl_error_set	function
(	O
e	pointer
,	O
"Plugin failed to initialize"	pointer
)	O
;	O
plugin_free	function
(	O
plugin	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
wget_vector_add	function
(	O
plugin_list	pointer
,	O
plugin	pointer
)	O
;	O
wget_stringmap_put	function
(	O
plugin_name_index	pointer
,	O
plugin	pointer
->	O
name	pointer
,	O
plugin	pointer
)	O
;	O
return	O
plugin	pointer
;	O
}	O
plugin_t	struct
*	O
plugin_db_load_from_path	function
(	O
const	O
char	O
*	O
path	pointer
,	O
dl_error_t	struct
*	O
e	pointer
)	O
{	O
char	O
*	O
name	pointer
=	O
dl_get_name_from_path	function
(	O
path	pointer
,	O
0	int
)	O
;	O
plugin_t	struct
*	O
plugin	pointer
=	O
_load_plugin	function
(	O
name	pointer
,	O
path	pointer
,	O
e	pointer
)	O
;	O
wget_free	pointer
(	O
name	pointer
)	O
;	O
return	O
plugin	pointer
;	O
}	O
plugin_t	struct
*	O
plugin_db_load_from_name	function
(	O
const	O
char	O
*	O
name	pointer
,	O
dl_error_t	struct
*	O
e	pointer
)	O
{	O
plugin_t	struct
*	O
plugin	pointer
;	O
char	O
*	O
filename	pointer
=	O
dl_search	function
(	O
name	pointer
,	O
search_paths	pointer
)	O
;	O
if	O
(	O
!	O
filename	pointer
)	O
{	O
dl_error_set_printf	function
(	O
e	pointer
,	O
"Plugin '%s' not found in any of the plugin search paths."	pointer
,	O
name	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
plugin	pointer
=	O
_load_plugin	function
(	O
name	pointer
,	O
filename	pointer
,	O
e	pointer
)	O
;	O
wget_free	pointer
(	O
filename	pointer
)	O
;	O
return	O
plugin	pointer
;	O
}	O
int	O
plugin_db_load_from_envvar	function
(	O
void	O
)	O
{	O
dl_error_t	struct
e	pointer
[	O
1	int
]	O
;	O
wget_vector	struct
*	O
v	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
int	O
ret	int
=	O
0	int
;	O
str	pointer
=	O
getenv	function
(	O
plugin_list_envvar	pointer
)	O
;	O
if	O
(	O
str	pointer
)	O
{	O
char	O
sep	char
=	O
':'	O
;	O
dl_error_init	function
(	O
e	pointer
)	O
;	O
v	pointer
=	O
wget_vector_create	function
(	O
16	int
,	O
NULL	O
)	O
;	O
split_string	function
(	O
str	pointer
,	O
sep	char
,	O
v	pointer
)	O
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
wget_vector_size	function
(	O
v	pointer
)	O
&&	O
ret	int
==	O
0	int
;	O
i	int
++	O
)	O
{	O
plugin_t	struct
*	O
plugin	pointer
;	O
int	O
local	int
=	O
0	int
;	O
str	pointer
=	O
(	O
const	O
char	O
*	O
)	O
wget_vector_get	function
(	O
v	pointer
,	O
i	int
)	O
;	O
if	O
(	O
strchr	function
(	O
str	pointer
,	O
'/'	O
)	O
)	O
local	int
=	O
1	int
;	O
if	O
(	O
local	int
)	O
plugin	pointer
=	O
plugin_db_load_from_path	function
(	O
str	pointer
,	O
e	pointer
)	O
;	O
else	O
plugin	pointer
=	O
plugin_db_load_from_name	function
(	O
str	pointer
,	O
e	pointer
)	O
;	O
if	O
(	O
!	O
plugin	pointer
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Plugin '%s' failed to load: %s"	pointer
)	O
,	O
str	pointer
,	O
dl_error_get_msg	function
(	O
e	pointer
)	O
)	O
;	O
dl_error_set	function
(	O
e	pointer
,	O
NULL	O
)	O
;	O
ret	int
=	O
-	O
1	int
;	O
}	O
}	O
wget_vector_free	function
(	O
&	O
v	pointer
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
void	O
plugin_db_list	function
(	O
wget_vector	struct
*	O
names_out	pointer
)	O
{	O
dl_list	function
(	O
search_paths	pointer
,	O
names_out	pointer
)	O
;	O
}	O
int	O
plugin_db_forward_option	function
(	O
const	O
char	O
*	O
plugin_option	pointer
,	O
dl_error_t	struct
*	O
e	pointer
)	O
{	O
char	O
*	O
plugin_option_copy	pointer
;	O
char	O
*	O
plugin_name	pointer
,	O
*	O
option	pointer
,	O
*	O
value	pointer
;	O
char	O
*	O
ptr	pointer
;	O
plugin_t	struct
*	O
plugin	pointer
;	O
plugin_priv_t	struct
*	O
priv	pointer
;	O
int	O
op_res	int
;	O
plugin_option_copy	pointer
=	O
wget_strdup	function
(	O
plugin_option	pointer
)	O
;	O
ptr	pointer
=	O
strchr	function
(	O
plugin_option_copy	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
!	O
ptr	pointer
)	O
{	O
dl_error_set_printf	function
(	O
e	pointer
,	O
"'%s': '.' is missing (separates plugin name and option)"	pointer
,	O
plugin_option	pointer
)	O
;	O
wget_free	pointer
(	O
plugin_option_copy	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
ptr	pointer
==	O
plugin_option_copy	pointer
)	O
{	O
dl_error_set_printf	function
(	O
e	pointer
,	O
"'%s': Plugin name is missing."	pointer
,	O
plugin_option	pointer
)	O
;	O
wget_free	pointer
(	O
plugin_option_copy	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
*	O
ptr	pointer
=	O
0	int
;	O
plugin_name	pointer
=	O
plugin_option_copy	pointer
;	O
option	pointer
=	O
ptr	pointer
+	O
1	int
;	O
ptr	pointer
=	O
strchr	function
(	O
option	pointer
,	O
'='	O
)	O
;	O
if	O
(	O
ptr	pointer
)	O
{	O
*	O
ptr	pointer
=	O
0	int
;	O
value	pointer
=	O
ptr	pointer
+	O
1	int
;	O
}	O
else	O
{	O
value	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
*	O
option	pointer
==	O
0	int
)	O
{	O
dl_error_set_printf	function
(	O
e	pointer
,	O
"'%s': An option is required (after '.', and before '=' if present)"	pointer
,	O
plugin_option	pointer
)	O
;	O
wget_free	pointer
(	O
plugin_option_copy	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
option	pointer
,	O
"help"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
value	pointer
)	O
{	O
dl_error_set_printf	function
(	O
e	pointer
,	O
"'help' option does not accept arguments\n"	pointer
)	O
;	O
wget_free	pointer
(	O
plugin_option_copy	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
plugin_help_forwarded	int
=	O
1	int
;	O
}	O
if	O
(	O
!	O
wget_stringmap_get	function
(	O
plugin_name_index	pointer
,	O
plugin_name	pointer
,	O
&	O
plugin	pointer
)	O
)	O
{	O
dl_error_set_printf	function
(	O
e	pointer
,	O
"Plugin '%s' is not loaded."	pointer
,	O
plugin_name	pointer
)	O
;	O
wget_free	pointer
(	O
plugin_option_copy	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
priv	pointer
=	O
(	O
plugin_priv_t	struct
*	O
)	O
plugin	pointer
;	O
if	O
(	O
!	O
priv	pointer
->	O
argp	pointer
)	O
{	O
dl_error_set_printf	function
(	O
e	pointer
,	O
"Plugin '%s' does not accept options."	pointer
,	O
plugin	pointer
->	O
name	pointer
)	O
;	O
wget_free	pointer
(	O
plugin_option_copy	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
op_res	int
=	O
priv	pointer
->	O
argp	pointer
(	O
(	O
wget_plugin	struct
*	O
)	O
plugin	pointer
,	O
option	pointer
,	O
value	pointer
)	O
;	O
if	O
(	O
op_res	int
<	O
0	int
)	O
{	O
dl_error_set_printf	function
(	O
e	pointer
,	O
"Plugin '%s' did not accept option '%s'"	pointer
,	O
plugin	pointer
->	O
name	pointer
,	O
strchrnul	function
(	O
plugin_option	pointer
,	O
'.'	O
)	O
)	O
;	O
wget_free	pointer
(	O
plugin_option_copy	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
wget_free	pointer
(	O
plugin_option_copy	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
plugin_db_show_help	function
(	O
void	O
)	O
{	O
int	O
n_plugins	int
=	O
wget_vector_size	function
(	O
plugin_list	pointer
)	O
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
n_plugins	int
;	O
i	int
++	O
)	O
{	O
plugin_t	struct
*	O
plugin	pointer
=	O
(	O
plugin_t	struct
*	O
)	O
wget_vector_get	function
(	O
plugin_list	pointer
,	O
i	int
)	O
;	O
plugin_priv_t	struct
*	O
priv	pointer
=	O
(	O
plugin_priv_t	struct
*	O
)	O
plugin	pointer
;	O
if	O
(	O
priv	pointer
->	O
argp	pointer
)	O
{	O
printf	function
(	O
_	O
(	O
"Options for %s:\n"	pointer
)	O
,	O
plugin	pointer
->	O
name	pointer
)	O
;	O
priv	pointer
->	O
argp	pointer
(	O
(	O
wget_plugin	struct
*	O
)	O
plugin	pointer
,	O
"help"	pointer
,	O
NULL	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
}	O
plugin_help_forwarded	int
=	O
1	int
;	O
}	O
int	O
plugin_db_help_forwarded	function
(	O
void	O
)	O
{	O
return	O
plugin_help_forwarded	int
;	O
}	O
void	O
plugin_db_forward_url	function
(	O
const	O
wget_iri	struct
*	O
iri	pointer
,	O
struct	O
plugin_db_forward_url_verdict	struct
*	O
verdict	pointer
)	O
{	O
intercept_action_t	struct
action	pointer
=	O
{	O
.	O
parent	struct
.	O
vtable	pointer
=	O
&	O
vtable	pointer
}	O
;	O
int	O
n_plugins	int
=	O
wget_vector_size	function
(	O
plugin_list	pointer
)	O
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
n_plugins	int
;	O
i	int
++	O
)	O
{	O
plugin_t	struct
*	O
plugin	pointer
=	O
(	O
plugin_t	struct
*	O
)	O
wget_vector_get	function
(	O
plugin_list	pointer
,	O
i	int
)	O
;	O
plugin_priv_t	struct
*	O
priv	pointer
=	O
(	O
plugin_priv_t	struct
*	O
)	O
plugin	pointer
;	O
if	O
(	O
priv	pointer
->	O
url_filter	pointer
)	O
{	O
const	O
wget_iri	struct
*	O
cur_iri	pointer
=	O
action	pointer
.	O
verdict	pointer
.	O
alt_iri	pointer
;	O
if	O
(	O
!	O
cur_iri	pointer
)	O
cur_iri	pointer
=	O
iri	pointer
;	O
priv	pointer
->	O
url_filter	pointer
(	O
(	O
wget_plugin	struct
*	O
)	O
plugin	pointer
,	O
cur_iri	pointer
,	O
(	O
wget_intercept_action	struct
*	O
)	O
&	O
action	pointer
)	O
;	O
if	O
(	O
action	pointer
.	O
verdict	pointer
.	O
reject	bool
||	O
action	pointer
.	O
verdict	pointer
.	O
accept	bool
)	O
break	O
;	O
}	O
}	O
*	O
verdict	pointer
=	O
action	pointer
.	O
verdict	pointer
;	O
}	O
void	O
plugin_db_forward_url_verdict_free	function
(	O
struct	O
plugin_db_forward_url_verdict	struct
*	O
verdict	pointer
)	O
{	O
if	O
(	O
verdict	pointer
->	O
alt_iri	pointer
)	O
wget_iri_free	function
(	O
&	O
verdict	pointer
->	O
alt_iri	pointer
)	O
;	O
if	O
(	O
verdict	pointer
->	O
alt_local_filename	pointer
)	O
wget_free	pointer
(	O
verdict	pointer
->	O
alt_local_filename	pointer
)	O
;	O
}	O
int	O
plugin_db_forward_downloaded_file	function
(	O
const	O
wget_iri	struct
*	O
iri	pointer
,	O
uint64_t	long
size	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
void	O
*	O
data	pointer
,	O
wget_vector	struct
*	O
recurse_iris	pointer
)	O
{	O
int	O
ret	int
=	O
1	int
;	O
downloaded_file_t	struct
file	pointer
=	O
{	O
.	O
parent	struct
.	O
vtable	pointer
=	O
&	O
vtable	pointer
,	O
.	O
iri	pointer
=	O
iri	pointer
,	O
.	O
filename	pointer
=	O
filename	pointer
,	O
.	O
size	pointer
=	O
size	pointer
,	O
.	O
data	pointer
=	O
data	pointer
,	O
.	O
data_buf	pointer
=	O
NULL	O
,	O
.	O
recurse_iris	pointer
=	O
recurse_iris	pointer
}	O
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
wget_vector_size	function
(	O
plugin_list	pointer
)	O
;	O
i	int
++	O
)	O
{	O
plugin_t	struct
*	O
plugin	pointer
=	O
(	O
plugin_t	struct
*	O
)	O
wget_vector_get	function
(	O
plugin_list	pointer
,	O
i	int
)	O
;	O
plugin_priv_t	struct
*	O
priv	pointer
=	O
(	O
plugin_priv_t	struct
*	O
)	O
plugin	pointer
;	O
if	O
(	O
priv	pointer
->	O
post_processor	pointer
)	O
{	O
if	O
(	O
priv	pointer
->	O
post_processor	pointer
(	O
(	O
wget_plugin	struct
*	O
)	O
plugin	pointer
,	O
(	O
wget_downloaded_file	struct
*	O
)	O
&	O
file	pointer
)	O
==	O
0	int
)	O
{	O
ret	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
file	pointer
.	O
data_buf	pointer
)	O
wget_free	pointer
(	O
file	pointer
.	O
data_buf	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
void	O
plugin_db_init	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
initialized	int
)	O
{	O
search_paths	pointer
=	O
wget_vector_create	function
(	O
16	int
,	O
NULL	O
)	O
;	O
plugin_list	pointer
=	O
wget_vector_create	function
(	O
16	int
,	O
NULL	O
)	O
;	O
wget_vector_set_destructor	function
(	O
plugin_list	pointer
,	O
(	O
wget_vector_destructor	function
*	O
)	O
plugin_free	function
)	O
;	O
plugin_name_index	pointer
=	O
wget_stringmap_create	function
(	O
16	int
)	O
;	O
wget_stringmap_set_key_destructor	function
(	O
plugin_name_index	pointer
,	O
NULL	O
)	O
;	O
wget_stringmap_set_value_destructor	function
(	O
plugin_name_index	pointer
,	O
NULL	O
)	O
;	O
plugin_help_forwarded	int
=	O
0	int
;	O
initialized	int
=	O
1	int
;	O
}	O
}	O
void	O
plugin_db_finalize	function
(	O
int	O
exitcode	int
)	O
{	O
if	O
(	O
!	O
initialized	int
)	O
return	O
;	O
int	O
n_plugins	int
=	O
wget_vector_size	function
(	O
plugin_list	pointer
)	O
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
n_plugins	int
;	O
i	int
++	O
)	O
{	O
plugin_t	struct
*	O
plugin	pointer
=	O
(	O
plugin_t	struct
*	O
)	O
wget_vector_get	function
(	O
plugin_list	pointer
,	O
i	int
)	O
;	O
plugin_priv_t	struct
*	O
priv	pointer
=	O
(	O
plugin_priv_t	struct
*	O
)	O
plugin	pointer
;	O
if	O
(	O
priv	pointer
->	O
finalizer	pointer
)	O
priv	pointer
->	O
finalizer	pointer
(	O
(	O
wget_plugin	struct
*	O
)	O
plugin	pointer
,	O
exitcode	int
)	O
;	O
}	O
wget_vector_free	function
(	O
&	O
plugin_list	pointer
)	O
;	O
wget_stringmap_free	function
(	O
&	O
plugin_name_index	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
search_paths	pointer
)	O
;	O
initialized	int
=	O
0	int
;	O
}	O
