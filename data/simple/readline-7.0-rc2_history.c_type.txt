static	O
char	O
*	O
hist_inittime	function
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
HIST_ENTRY	struct
*	O
*	O
the_history	pointer
=	O
(	O
HIST_ENTRY	struct
*	O
*	O
)	O
NULL	O
;	O
static	O
int	O
history_stifled	int
;	O
static	O
int	O
history_size	int
;	O
int	O
history_max_entries	int
;	O
int	O
max_input_history	int
;	O
int	O
history_offset	int
;	O
int	O
history_length	int
;	O
int	O
history_base	int
=	O
1	int
;	O
HISTORY_STATE	struct
*	O
history_get_history_state	function
(	O
)	O
{	O
HISTORY_STATE	struct
*	O
state	pointer
;	O
state	pointer
=	O
(	O
HISTORY_STATE	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
HISTORY_STATE	struct
)	O
)	O
;	O
state	pointer
->	O
entries	pointer
=	O
the_history	pointer
;	O
state	pointer
->	O
offset	long
=	O
history_offset	int
;	O
state	pointer
->	O
length	int
=	O
history_length	int
;	O
state	pointer
->	O
size	int
=	O
history_size	int
;	O
state	pointer
->	O
flags	int
=	O
0	int
;	O
if	O
(	O
history_stifled	int
)	O
state	pointer
->	O
flags	int
|=	O
HS_STIFLED	int
;	O
return	O
(	O
state	pointer
)	O
;	O
}	O
void	O
history_set_history_state	function
(	O
state	pointer
)	O
HISTORY_STATE	struct
*	O
state	pointer
;	O
{	O
the_history	pointer
=	O
state	pointer
->	O
entries	pointer
;	O
history_offset	int
=	O
state	pointer
->	O
offset	long
;	O
history_length	int
=	O
state	pointer
->	O
length	int
;	O
history_size	int
=	O
state	pointer
->	O
size	int
;	O
if	O
(	O
state	pointer
->	O
flags	int
&	O
HS_STIFLED	int
)	O
history_stifled	int
=	O
1	int
;	O
}	O
void	O
using_history	function
(	O
)	O
{	O
history_offset	int
=	O
history_length	int
;	O
}	O
int	O
history_total_bytes	function
(	O
)	O
{	O
register	O
int	O
i	int
,	O
result	int
;	O
for	O
(	O
i	int
=	O
result	int
=	O
0	int
;	O
the_history	pointer
&&	O
the_history	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
result	int
+=	O
HISTENT_BYTES	O
(	O
the_history	pointer
[	O
i	int
]	O
)	O
;	O
return	O
(	O
result	int
)	O
;	O
}	O
int	O
where_history	function
(	O
)	O
{	O
return	O
(	O
history_offset	int
)	O
;	O
}	O
int	O
history_set_pos	function
(	O
pos	int
)	O
int	O
pos	int
;	O
{	O
if	O
(	O
pos	int
>	O
history_length	int
||	O
pos	int
<	O
0	int
||	O
!	O
the_history	pointer
)	O
return	O
(	O
0	int
)	O
;	O
history_offset	int
=	O
pos	int
;	O
return	O
(	O
1	int
)	O
;	O
}	O
HIST_ENTRY	struct
*	O
*	O
history_list	function
(	O
)	O
{	O
return	O
(	O
the_history	pointer
)	O
;	O
}	O
HIST_ENTRY	struct
*	O
current_history	function
(	O
)	O
{	O
return	O
(	O
(	O
history_offset	int
==	O
history_length	int
)	O
||	O
the_history	pointer
==	O
0	int
)	O
?	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
:	O
the_history	pointer
[	O
history_offset	int
]	O
;	O
}	O
HIST_ENTRY	struct
*	O
previous_history	function
(	O
)	O
{	O
return	O
history_offset	int
?	O
the_history	pointer
[	O
--	O
history_offset	int
]	O
:	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
;	O
}	O
HIST_ENTRY	struct
*	O
next_history	function
(	O
)	O
{	O
return	O
(	O
history_offset	int
==	O
history_length	int
)	O
?	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
:	O
the_history	pointer
[	O
++	O
history_offset	int
]	O
;	O
}	O
HIST_ENTRY	struct
*	O
history_get	function
(	O
offset	long
)	O
int	O
offset	long
;	O
{	O
int	O
local_index	int
;	O
local_index	int
=	O
offset	long
-	O
history_base	int
;	O
return	O
(	O
local_index	int
>=	O
history_length	int
||	O
local_index	int
<	O
0	int
||	O
the_history	pointer
==	O
0	int
)	O
?	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
:	O
the_history	pointer
[	O
local_index	int
]	O
;	O
}	O
HIST_ENTRY	struct
*	O
alloc_history_entry	function
(	O
string	pointer
,	O
ts	pointer
)	O
char	O
*	O
string	pointer
;	O
char	O
*	O
ts	pointer
;	O
{	O
HIST_ENTRY	struct
*	O
temp	pointer
;	O
temp	pointer
=	O
(	O
HIST_ENTRY	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
HIST_ENTRY	struct
)	O
)	O
;	O
temp	pointer
->	O
line	pointer
=	O
string	pointer
?	O
savestring	O
(	O
string	pointer
)	O
:	O
string	pointer
;	O
temp	pointer
->	O
data	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
temp	pointer
->	O
timestamp	pointer
=	O
ts	pointer
;	O
return	O
temp	pointer
;	O
}	O
time_t	long
history_get_time	function
(	O
hist	pointer
)	O
HIST_ENTRY	struct
*	O
hist	pointer
;	O
{	O
char	O
*	O
ts	pointer
;	O
time_t	long
t	long
;	O
if	O
(	O
hist	pointer
==	O
0	int
||	O
hist	pointer
->	O
timestamp	pointer
==	O
0	int
)	O
return	O
0	int
;	O
ts	pointer
=	O
hist	pointer
->	O
timestamp	pointer
;	O
if	O
(	O
ts	pointer
[	O
0	int
]	O
!=	O
history_comment_char	char
)	O
return	O
0	int
;	O
errno	O
=	O
0	int
;	O
t	long
=	O
(	O
time_t	long
)	O
strtol	function
(	O
ts	pointer
+	O
1	int
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
errno	O
==	O
ERANGE	int
)	O
return	O
(	O
time_t	long
)	O
0	int
;	O
return	O
t	long
;	O
}	O
static	O
char	O
*	O
hist_inittime	function
(	O
)	O
{	O
time_t	long
t	long
;	O
char	O
ts	pointer
[	O
64	int
]	O
,	O
*	O
ret	pointer
;	O
t	long
=	O
(	O
time_t	long
)	O
time	struct
(	O
(	O
time_t	long
*	O
)	O
0	int
)	O
;	O
snprintf	function
(	O
ts	pointer
,	O
sizeof	O
(	O
ts	pointer
)	O
-	O
1	int
,	O
"X%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
t	long
)	O
;	O
ret	pointer
=	O
savestring	O
(	O
ts	pointer
)	O
;	O
ret	pointer
[	O
0	int
]	O
=	O
history_comment_char	char
;	O
return	O
ret	pointer
;	O
}	O
void	O
add_history	function
(	O
string	pointer
)	O
const	O
char	O
*	O
string	pointer
;	O
{	O
HIST_ENTRY	struct
*	O
temp	pointer
;	O
if	O
(	O
history_stifled	int
&&	O
(	O
history_length	int
==	O
history_max_entries	int
)	O
)	O
{	O
register	O
int	O
i	int
;	O
if	O
(	O
history_length	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
the_history	pointer
[	O
0	int
]	O
)	O
(	O
void	O
)	O
free_history_entry	function
(	O
the_history	pointer
[	O
0	int
]	O
)	O
;	O
memmove	function
(	O
the_history	pointer
,	O
the_history	pointer
+	O
1	int
,	O
history_length	int
*	O
sizeof	O
(	O
HIST_ENTRY	struct
*	O
)	O
)	O
;	O
history_base	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
history_size	int
==	O
0	int
)	O
{	O
if	O
(	O
history_stifled	int
&&	O
history_max_entries	int
>	O
0	int
)	O
history_size	int
=	O
history_max_entries	int
+	O
2	int
;	O
else	O
history_size	int
=	O
DEFAULT_HISTORY_INITIAL_SIZE	int
;	O
the_history	pointer
=	O
(	O
HIST_ENTRY	struct
*	O
*	O
)	O
xmalloc	function
(	O
history_size	int
*	O
sizeof	O
(	O
HIST_ENTRY	struct
*	O
)	O
)	O
;	O
history_length	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
history_length	int
==	O
(	O
history_size	int
-	O
1	int
)	O
)	O
{	O
history_size	int
+=	O
DEFAULT_HISTORY_GROW_SIZE	int
;	O
the_history	pointer
=	O
(	O
HIST_ENTRY	struct
*	O
*	O
)	O
xrealloc	function
(	O
the_history	pointer
,	O
history_size	int
*	O
sizeof	O
(	O
HIST_ENTRY	struct
*	O
)	O
)	O
;	O
}	O
history_length	int
++	O
;	O
}	O
}	O
temp	pointer
=	O
alloc_history_entry	function
(	O
(	O
char	O
*	O
)	O
string	pointer
,	O
hist_inittime	function
(	O
)	O
)	O
;	O
the_history	pointer
[	O
history_length	int
]	O
=	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
;	O
the_history	pointer
[	O
history_length	int
-	O
1	int
]	O
=	O
temp	pointer
;	O
}	O
void	O
add_history_time	function
(	O
string	pointer
)	O
const	O
char	O
*	O
string	pointer
;	O
{	O
HIST_ENTRY	struct
*	O
hs	pointer
;	O
if	O
(	O
string	pointer
==	O
0	int
||	O
history_length	int
<	O
1	int
)	O
return	O
;	O
hs	pointer
=	O
the_history	pointer
[	O
history_length	int
-	O
1	int
]	O
;	O
FREE	O
(	O
hs	pointer
->	O
timestamp	pointer
)	O
;	O
hs	pointer
->	O
timestamp	pointer
=	O
savestring	O
(	O
string	pointer
)	O
;	O
}	O
histdata_t	pointer
free_history_entry	function
(	O
hist	pointer
)	O
HIST_ENTRY	struct
*	O
hist	pointer
;	O
{	O
histdata_t	pointer
x	pointer
;	O
if	O
(	O
hist	pointer
==	O
0	int
)	O
return	O
(	O
(	O
histdata_t	pointer
)	O
0	int
)	O
;	O
FREE	O
(	O
hist	pointer
->	O
line	pointer
)	O
;	O
FREE	O
(	O
hist	pointer
->	O
timestamp	pointer
)	O
;	O
x	pointer
=	O
hist	pointer
->	O
data	pointer
;	O
xfree	function
(	O
hist	pointer
)	O
;	O
return	O
(	O
x	pointer
)	O
;	O
}	O
HIST_ENTRY	struct
*	O
copy_history_entry	function
(	O
hist	pointer
)	O
HIST_ENTRY	struct
*	O
hist	pointer
;	O
{	O
HIST_ENTRY	struct
*	O
ret	pointer
;	O
char	O
*	O
ts	pointer
;	O
if	O
(	O
hist	pointer
==	O
0	int
)	O
return	O
hist	pointer
;	O
ret	pointer
=	O
alloc_history_entry	function
(	O
hist	pointer
->	O
line	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
ts	pointer
=	O
hist	pointer
->	O
timestamp	pointer
?	O
savestring	O
(	O
hist	pointer
->	O
timestamp	pointer
)	O
:	O
hist	pointer
->	O
timestamp	pointer
;	O
ret	pointer
->	O
timestamp	pointer
=	O
ts	pointer
;	O
ret	pointer
->	O
data	pointer
=	O
hist	pointer
->	O
data	pointer
;	O
return	O
ret	pointer
;	O
}	O
HIST_ENTRY	struct
*	O
replace_history_entry	function
(	O
which	int
,	O
line	pointer
,	O
data	pointer
)	O
int	O
which	int
;	O
const	O
char	O
*	O
line	pointer
;	O
histdata_t	pointer
data	pointer
;	O
{	O
HIST_ENTRY	struct
*	O
temp	pointer
,	O
*	O
old_value	pointer
;	O
if	O
(	O
which	int
<	O
0	int
||	O
which	int
>=	O
history_length	int
)	O
return	O
(	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
)	O
;	O
temp	pointer
=	O
(	O
HIST_ENTRY	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
HIST_ENTRY	struct
)	O
)	O
;	O
old_value	pointer
=	O
the_history	pointer
[	O
which	int
]	O
;	O
temp	pointer
->	O
line	pointer
=	O
savestring	O
(	O
line	pointer
)	O
;	O
temp	pointer
->	O
data	pointer
=	O
data	pointer
;	O
temp	pointer
->	O
timestamp	pointer
=	O
savestring	O
(	O
old_value	pointer
->	O
timestamp	pointer
)	O
;	O
the_history	pointer
[	O
which	int
]	O
=	O
temp	pointer
;	O
return	O
(	O
old_value	pointer
)	O
;	O
}	O
void	O
_hs_append_history_line	function
(	O
which	int
,	O
line	pointer
)	O
int	O
which	int
;	O
const	O
char	O
*	O
line	pointer
;	O
{	O
HIST_ENTRY	struct
*	O
hent	pointer
;	O
size_t	long
newlen	long
,	O
curlen	long
;	O
char	O
*	O
newline	pointer
;	O
hent	pointer
=	O
the_history	pointer
[	O
which	int
]	O
;	O
curlen	long
=	O
strlen	function
(	O
hent	pointer
->	O
line	pointer
)	O
;	O
newlen	long
=	O
curlen	long
+	O
strlen	function
(	O
line	pointer
)	O
+	O
2	int
;	O
newline	pointer
=	O
realloc	function
(	O
hent	pointer
->	O
line	pointer
,	O
newlen	long
)	O
;	O
if	O
(	O
newline	pointer
)	O
{	O
hent	pointer
->	O
line	pointer
=	O
newline	pointer
;	O
hent	pointer
->	O
line	pointer
[	O
curlen	long
++	O
]	O
=	O
'\n'	O
;	O
strcpy	function
(	O
hent	pointer
->	O
line	pointer
+	O
curlen	long
,	O
line	pointer
)	O
;	O
}	O
}	O
void	O
_hs_replace_history_data	function
(	O
which	int
,	O
old	pointer
,	O
new	pointer
)	O
int	O
which	int
;	O
histdata_t	pointer
*	O
old	pointer
,	O
*	O
new	pointer
;	O
{	O
HIST_ENTRY	struct
*	O
entry	pointer
;	O
register	O
int	O
i	int
,	O
last	int
;	O
if	O
(	O
which	int
<	O
-	O
2	int
||	O
which	int
>=	O
history_length	int
||	O
history_length	int
==	O
0	int
||	O
the_history	pointer
==	O
0	int
)	O
return	O
;	O
if	O
(	O
which	int
>=	O
0	int
)	O
{	O
entry	pointer
=	O
the_history	pointer
[	O
which	int
]	O
;	O
if	O
(	O
entry	pointer
&&	O
entry	pointer
->	O
data	pointer
==	O
old	pointer
)	O
entry	pointer
->	O
data	pointer
=	O
new	pointer
;	O
return	O
;	O
}	O
last	int
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
history_length	int
;	O
i	int
++	O
)	O
{	O
entry	pointer
=	O
the_history	pointer
[	O
i	int
]	O
;	O
if	O
(	O
entry	pointer
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
entry	pointer
->	O
data	pointer
==	O
old	pointer
)	O
{	O
last	int
=	O
i	int
;	O
if	O
(	O
which	int
==	O
-	O
1	int
)	O
entry	pointer
->	O
data	pointer
=	O
new	pointer
;	O
}	O
}	O
if	O
(	O
which	int
==	O
-	O
2	int
&&	O
last	int
>=	O
0	int
)	O
{	O
entry	pointer
=	O
the_history	pointer
[	O
last	int
]	O
;	O
entry	pointer
->	O
data	pointer
=	O
new	pointer
;	O
}	O
}	O
HIST_ENTRY	struct
*	O
remove_history	function
(	O
which	int
)	O
int	O
which	int
;	O
{	O
HIST_ENTRY	struct
*	O
return_value	pointer
;	O
register	O
int	O
i	int
;	O
if	O
(	O
which	int
<	O
0	int
||	O
which	int
>=	O
history_length	int
||	O
history_length	int
==	O
0	int
||	O
the_history	pointer
==	O
0	int
)	O
return	O
(	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
)	O
;	O
return_value	pointer
=	O
the_history	pointer
[	O
which	int
]	O
;	O
for	O
(	O
i	int
=	O
which	int
;	O
i	int
<	O
history_length	int
;	O
i	int
++	O
)	O
the_history	pointer
[	O
i	int
]	O
=	O
the_history	pointer
[	O
i	int
+	O
1	int
]	O
;	O
history_length	int
--	O
;	O
return	O
(	O
return_value	pointer
)	O
;	O
}	O
void	O
stifle_history	function
(	O
max	int
)	O
int	O
max	int
;	O
{	O
register	O
int	O
i	int
,	O
j	int
;	O
if	O
(	O
max	int
<	O
0	int
)	O
max	int
=	O
0	int
;	O
if	O
(	O
history_length	int
>	O
max	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
,	O
j	int
=	O
history_length	int
-	O
max	int
;	O
i	int
<	O
j	int
;	O
i	int
++	O
)	O
free_history_entry	function
(	O
the_history	pointer
[	O
i	int
]	O
)	O
;	O
history_base	int
=	O
i	int
;	O
for	O
(	O
j	int
=	O
0	int
,	O
i	int
=	O
history_length	int
-	O
max	int
;	O
j	int
<	O
max	int
;	O
i	int
++	O
,	O
j	int
++	O
)	O
the_history	pointer
[	O
j	int
]	O
=	O
the_history	pointer
[	O
i	int
]	O
;	O
the_history	pointer
[	O
j	int
]	O
=	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
;	O
history_length	int
=	O
j	int
;	O
}	O
history_stifled	int
=	O
1	int
;	O
max_input_history	int
=	O
history_max_entries	int
=	O
max	int
;	O
}	O
int	O
unstifle_history	function
(	O
)	O
{	O
if	O
(	O
history_stifled	int
)	O
{	O
history_stifled	int
=	O
0	int
;	O
return	O
(	O
history_max_entries	int
)	O
;	O
}	O
else	O
return	O
(	O
-	O
history_max_entries	int
)	O
;	O
}	O
int	O
history_is_stifled	function
(	O
)	O
{	O
return	O
(	O
history_stifled	int
)	O
;	O
}	O
void	O
clear_history	function
(	O
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
history_length	int
;	O
i	int
++	O
)	O
{	O
free_history_entry	function
(	O
the_history	pointer
[	O
i	int
]	O
)	O
;	O
the_history	pointer
[	O
i	int
]	O
=	O
(	O
HIST_ENTRY	struct
*	O
)	O
NULL	O
;	O
}	O
history_offset	int
=	O
history_length	int
=	O
0	int
;	O
}	O
