static	O
int	O
read_boot	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
union	O
bootsector	union
*	O
boot	struct
,	O
int	O
size	array
)	O
{	O
size_t	long
boot_sector_size	long
;	O
if	O
(	O
!	O
size	array
)	O
size	array
=	O
BOOTSIZE	int
;	O
if	O
(	O
size	array
>	O
MAX_BOOT	int
)	O
size	array
=	O
MAX_BOOT	int
;	O
if	O
(	O
force_read	function
(	O
Stream	pointer
,	O
boot	struct
->	O
characters	array
,	O
0	int
,	O
size	array
)	O
!=	O
size	array
)	O
return	O
-	O
1	int
;	O
boot_sector_size	long
=	O
WORD	O
(	O
secsiz	array
)	O
;	O
if	O
(	O
boot_sector_size	long
<	O
sizeof	O
(	O
boot	struct
->	O
bytes	array
)	O
)	O
{	O
memset	function
(	O
boot	struct
->	O
bytes	array
+	O
boot_sector_size	long
,	O
0	int
,	O
sizeof	O
(	O
boot	struct
->	O
bytes	array
)	O
-	O
boot_sector_size	long
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
fs_flush	function
(	O
Stream_t	struct
*	O
Stream	pointer
)	O
{	O
DeclareThis	O
(	O
Fs_t	struct
)	O
;	O
fat_write	function
(	O
This	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
doscp_t	struct
*	O
get_dosConvert	pointer
(	O
Stream_t	struct
*	O
Stream	pointer
)	O
{	O
DeclareThis	O
(	O
Fs_t	struct
)	O
;	O
return	O
This	pointer
->	O
cp	pointer
;	O
}	O
Class_t	struct
FsClass	struct
=	O
{	O
read_pass_through	function
,	O
write_pass_through	function
,	O
fs_flush	function
,	O
fs_free	function
,	O
0	int
,	O
get_data_pass_through	function
,	O
0	int
,	O
get_dosConvert	pointer
,	O
0	int
}	O
;	O
static	O
int	O
get_media_type	function
(	O
Stream_t	struct
*	O
St	pointer
,	O
union	O
bootsector	union
*	O
boot	struct
)	O
{	O
int	O
media	char
;	O
media	char
=	O
boot	struct
->	O
boot	struct
.	O
descr	char
;	O
if	O
(	O
media	char
<	O
0xf0	int
)	O
{	O
char	O
temp	array
[	O
512	int
]	O
;	O
if	O
(	O
force_read	function
(	O
St	pointer
,	O
temp	array
,	O
(	O
mt_off_t	long
)	O
512	int
,	O
512	int
)	O
==	O
512	int
)	O
media	char
=	O
(	O
unsigned	O
char	O
)	O
temp	array
[	O
0	int
]	O
;	O
else	O
media	char
=	O
0	int
;	O
}	O
else	O
media	char
+=	O
0x100	int
;	O
return	O
media	char
;	O
}	O
Stream_t	struct
*	O
GetFs	function
(	O
Stream_t	struct
*	O
Fs	pointer
)	O
{	O
while	O
(	O
Fs	pointer
&&	O
Fs	pointer
->	O
Class	pointer
!=	O
&	O
FsClass	struct
)	O
Fs	pointer
=	O
Fs	pointer
->	O
Next	pointer
;	O
return	O
Fs	pointer
;	O
}	O
Stream_t	struct
*	O
find_device	function
(	O
char	O
drive	char
,	O
int	O
mode	int
,	O
struct	O
device	struct
*	O
out_dev	pointer
,	O
union	O
bootsector	union
*	O
boot	struct
,	O
char	O
*	O
name	pointer
,	O
int	O
*	O
media	char
,	O
mt_size_t	long
*	O
maxSize	pointer
,	O
int	O
*	O
isRop	pointer
)	O
{	O
char	O
errmsg	pointer
[	O
200	int
]	O
;	O
Stream_t	struct
*	O
Stream	pointer
;	O
struct	O
device	struct
*	O
dev	pointer
;	O
int	O
r	int
;	O
int	O
isRo	int
=	O
0	int
;	O
Stream	pointer
=	O
NULL	O
;	O
sprintf	function
(	O
errmsg	pointer
,	O
"Drive '%c:' not supported"	pointer
,	O
drive	char
)	O
;	O
for	O
(	O
dev	pointer
=	O
devices	pointer
;	O
dev	pointer
->	O
name	pointer
;	O
dev	pointer
++	O
)	O
{	O
FREE	O
(	O
&	O
Stream	pointer
)	O
;	O
if	O
(	O
dev	pointer
->	O
drive	char
!=	O
drive	char
)	O
continue	O
;	O
*	O
out_dev	pointer
=	O
*	O
dev	pointer
;	O
expand	function
(	O
dev	pointer
->	O
name	pointer
,	O
name	pointer
)	O
;	O
Stream	pointer
=	O
0	int
;	O
if	O
(	O
out_dev	pointer
->	O
misc_flags	int
&	O
FLOPPYD_FLAG	int
)	O
{	O
Stream	pointer
=	O
0	int
;	O
Stream	pointer
=	O
FloppydOpen	function
(	O
out_dev	pointer
,	O
name	pointer
,	O
mode	int
,	O
errmsg	pointer
,	O
maxSize	pointer
)	O
;	O
}	O
else	O
{	O
Stream	pointer
=	O
XdfOpen	function
(	O
out_dev	pointer
,	O
name	pointer
,	O
mode	int
,	O
errmsg	pointer
,	O
0	int
)	O
;	O
if	O
(	O
Stream	pointer
)	O
{	O
out_dev	pointer
->	O
use_2m	int
=	O
0x7f	int
;	O
if	O
(	O
maxSize	pointer
)	O
*	O
maxSize	pointer
=	O
max_off_t_31	long
;	O
}	O
if	O
(	O
!	O
Stream	pointer
)	O
Stream	pointer
=	O
SimpleFileOpen	function
(	O
out_dev	pointer
,	O
dev	pointer
,	O
name	pointer
,	O
isRop	pointer
?	O
mode	int
|	O
O_RDWR	int
:	O
mode	int
,	O
errmsg	pointer
,	O
0	int
,	O
1	int
,	O
maxSize	pointer
)	O
;	O
if	O
(	O
Stream	pointer
)	O
{	O
isRo	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
isRop	pointer
&&	O
(	O
errno	O
==	O
EPERM	int
||	O
errno	O
==	O
EACCES	int
||	O
errno	O
==	O
EROFS	int
)	O
)	O
{	O
Stream	pointer
=	O
SimpleFileOpen	function
(	O
out_dev	pointer
,	O
dev	pointer
,	O
name	pointer
,	O
mode	int
|	O
O_RDONLY	int
,	O
errmsg	pointer
,	O
0	int
,	O
1	int
,	O
maxSize	pointer
)	O
;	O
if	O
(	O
Stream	pointer
)	O
{	O
isRo	int
=	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
!	O
Stream	pointer
)	O
continue	O
;	O
if	O
(	O
(	O
r	int
=	O
read_boot	function
(	O
Stream	pointer
,	O
boot	struct
,	O
out_dev	pointer
->	O
blocksize	int
)	O
)	O
<	O
0	int
)	O
{	O
sprintf	function
(	O
errmsg	pointer
,	O
"init %c: could not read boot sector"	pointer
,	O
drive	char
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
(	O
*	O
media	char
=	O
get_media_type	function
(	O
Stream	pointer
,	O
boot	struct
)	O
)	O
<=	O
0xf0	int
)	O
{	O
if	O
(	O
boot	struct
->	O
boot	struct
.	O
jump	array
[	O
2	int
]	O
==	O
'L'	O
)	O
sprintf	function
(	O
errmsg	pointer
,	O
"diskette %c: is Linux LILO, not DOS"	pointer
,	O
drive	char
)	O
;	O
else	O
sprintf	function
(	O
errmsg	pointer
,	O
"init %c: non DOS media"	pointer
,	O
drive	char
)	O
;	O
continue	O
;	O
}	O
errno	O
=	O
0	int
;	O
if	O
(	O
SET_GEOM	O
(	O
Stream	pointer
,	O
out_dev	pointer
,	O
dev	pointer
,	O
*	O
media	char
,	O
boot	struct
)	O
)	O
{	O
if	O
(	O
errno	O
)	O
snprintf	function
(	O
errmsg	pointer
,	O
199	int
,	O
"Can't set disk parameters for %c: %s"	pointer
,	O
drive	char
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
else	O
sprintf	function
(	O
errmsg	pointer
,	O
"Can't set disk parameters for %c"	pointer
,	O
drive	char
)	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
dev	pointer
->	O
drive	char
==	O
0	int
)	O
{	O
FREE	O
(	O
&	O
Stream	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
errmsg	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
isRop	pointer
)	O
*	O
isRop	pointer
=	O
isRo	int
;	O
return	O
Stream	pointer
;	O
}	O
Stream_t	struct
*	O
fs_init	function
(	O
char	O
drive	char
,	O
int	O
mode	int
,	O
int	O
*	O
isRop	pointer
)	O
{	O
int	O
blocksize	int
;	O
int	O
media	char
;	O
int	O
disk_size	int
=	O
0	int
;	O
size_t	long
tot_sectors	long
;	O
char	O
name	pointer
[	O
EXPAND_BUF	int
]	O
;	O
int	O
cylinder_size	int
;	O
struct	O
device	struct
dev	pointer
;	O
mt_size_t	long
maxSize	pointer
;	O
union	O
bootsector	union
boot	struct
;	O
Fs_t	struct
*	O
This	pointer
;	O
This	pointer
=	O
New	O
(	O
Fs_t	struct
)	O
;	O
if	O
(	O
!	O
This	pointer
)	O
return	O
NULL	O
;	O
This	pointer
->	O
Direct	pointer
=	O
NULL	O
;	O
This	pointer
->	O
Next	pointer
=	O
NULL	O
;	O
This	pointer
->	O
refs	int
=	O
1	int
;	O
This	pointer
->	O
Buffer	pointer
=	O
0	int
;	O
This	pointer
->	O
Class	pointer
=	O
&	O
FsClass	struct
;	O
This	pointer
->	O
preallocatedClusters	int
=	O
0	int
;	O
This	pointer
->	O
lastFatSectorNr	int
=	O
0	int
;	O
This	pointer
->	O
lastFatAccessMode	enum
=	O
0	int
;	O
This	pointer
->	O
lastFatSectorData	pointer
=	O
0	int
;	O
This	pointer
->	O
drive	char
=	O
drive	char
;	O
This	pointer
->	O
last	int
=	O
0	int
;	O
This	pointer
->	O
Direct	pointer
=	O
find_device	function
(	O
drive	char
,	O
mode	int
,	O
&	O
dev	pointer
,	O
&	O
boot	struct
,	O
name	pointer
,	O
&	O
media	char
,	O
&	O
maxSize	pointer
,	O
isRop	pointer
)	O
;	O
if	O
(	O
!	O
This	pointer
->	O
Direct	pointer
)	O
return	O
NULL	O
;	O
cylinder_size	int
=	O
dev	pointer
.	O
heads	short
*	O
dev	pointer
.	O
sectors	short
;	O
This	pointer
->	O
serialized	int
=	O
0	int
;	O
if	O
(	O
(	O
media	char
&	O
~	O
7	int
)	O
==	O
0xf8	int
)	O
{	O
struct	O
OldDos_t	struct
*	O
params	pointer
=	O
getOldDosByMedia	function
(	O
media	char
)	O
;	O
if	O
(	O
params	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
This	pointer
->	O
cluster_size	int
=	O
params	pointer
->	O
cluster_size	int
;	O
tot_sectors	long
=	O
cylinder_size	int
*	O
params	pointer
->	O
tracks	int
;	O
This	pointer
->	O
fat_start	int
=	O
1	int
;	O
This	pointer
->	O
fat_len	int
=	O
params	pointer
->	O
fat_len	int
;	O
This	pointer
->	O
dir_len	int
=	O
params	pointer
->	O
dir_len	int
;	O
This	pointer
->	O
num_fat	int
=	O
2	int
;	O
This	pointer
->	O
sector_size	int
=	O
512	int
;	O
This	pointer
->	O
sectorShift	int
=	O
9	int
;	O
This	pointer
->	O
sectorMask	int
=	O
511	int
;	O
This	pointer
->	O
fat_bits	int
=	O
12	int
;	O
}	O
else	O
{	O
struct	O
label_blk_t	struct
*	O
labelBlock	struct
;	O
int	O
i	int
;	O
This	pointer
->	O
sector_size	int
=	O
WORD_S	O
(	O
secsiz	array
)	O
;	O
if	O
(	O
This	pointer
->	O
sector_size	int
>	O
MAX_SECTOR	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"init %c: sector size too big\n"	pointer
,	O
drive	char
)	O
;	O
return	O
NULL	O
;	O
}	O
i	int
=	O
log_2	function
(	O
This	pointer
->	O
sector_size	int
)	O
;	O
if	O
(	O
i	int
==	O
24	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"init %c: sector size (%d) not a small power of two\n"	pointer
,	O
drive	char
,	O
This	pointer
->	O
sector_size	int
)	O
;	O
return	O
NULL	O
;	O
}	O
This	pointer
->	O
sectorShift	int
=	O
i	int
;	O
This	pointer
->	O
sectorMask	int
=	O
This	pointer
->	O
sector_size	int
-	O
1	int
;	O
tot_sectors	long
=	O
WORD_S	O
(	O
psect	array
)	O
;	O
if	O
(	O
!	O
tot_sectors	long
)	O
tot_sectors	long
=	O
DWORD_S	O
(	O
bigsect	array
)	O
;	O
This	pointer
->	O
cluster_size	int
=	O
boot	struct
.	O
boot	struct
.	O
clsiz	char
;	O
This	pointer
->	O
fat_start	int
=	O
WORD_S	O
(	O
nrsvsect	array
)	O
;	O
This	pointer
->	O
fat_len	int
=	O
WORD_S	O
(	O
fatlen	array
)	O
;	O
This	pointer
->	O
dir_len	int
=	O
WORD_S	O
(	O
dirents	array
)	O
*	O
MDIR_SIZE	int
/	O
This	pointer
->	O
sector_size	int
;	O
This	pointer
->	O
num_fat	int
=	O
boot	struct
.	O
boot	struct
.	O
nfat	char
;	O
if	O
(	O
This	pointer
->	O
fat_len	int
)	O
{	O
labelBlock	struct
=	O
&	O
boot	struct
.	O
boot	struct
.	O
ext	array
.	O
old	struct
.	O
labelBlock	struct
;	O
}	O
else	O
{	O
labelBlock	struct
=	O
&	O
boot	struct
.	O
boot	struct
.	O
ext	array
.	O
fat32	struct
.	O
labelBlock	struct
;	O
}	O
if	O
(	O
has_BPB4	O
)	O
{	O
This	pointer
->	O
serialized	int
=	O
1	int
;	O
This	pointer
->	O
serial_number	long
=	O
_DWORD	O
(	O
labelBlock	struct
->	O
serial	array
)	O
;	O
}	O
}	O
if	O
(	O
tot_sectors	long
>=	O
(	O
maxSize	pointer
>>	O
This	pointer
->	O
sectorShift	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Big disks not supported on this architecture\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
disk_size	int
=	O
(	O
dev	pointer
.	O
tracks	int
)	O
?	O
cylinder_size	int
:	O
512	int
;	O
disk_size	int
=	O
cylinder_size	int
;	O
if	O
(	O
disk_size	int
>	O
256	int
)	O
{	O
disk_size	int
=	O
dev	pointer
.	O
sectors	short
;	O
if	O
(	O
dev	pointer
.	O
sectors	short
%	O
2	int
)	O
disk_size	int
<<=	O
1	int
;	O
}	O
if	O
(	O
disk_size	int
%	O
2	int
)	O
disk_size	int
*=	O
2	int
;	O
if	O
(	O
!	O
dev	pointer
.	O
blocksize	int
||	O
dev	pointer
.	O
blocksize	int
<	O
This	pointer
->	O
sector_size	int
)	O
blocksize	int
=	O
This	pointer
->	O
sector_size	int
;	O
else	O
blocksize	int
=	O
dev	pointer
.	O
blocksize	int
;	O
if	O
(	O
disk_size	int
)	O
This	pointer
->	O
Next	pointer
=	O
buf_init	function
(	O
This	pointer
->	O
Direct	pointer
,	O
8	int
*	O
disk_size	int
*	O
blocksize	int
,	O
disk_size	int
*	O
blocksize	int
,	O
This	pointer
->	O
sector_size	int
)	O
;	O
else	O
This	pointer
->	O
Next	pointer
=	O
This	pointer
->	O
Direct	pointer
;	O
if	O
(	O
This	pointer
->	O
Next	pointer
==	O
NULL	O
)	O
{	O
perror	function
(	O
"init: allocate buffer"	pointer
)	O
;	O
This	pointer
->	O
Next	pointer
=	O
This	pointer
->	O
Direct	pointer
;	O
}	O
if	O
(	O
fat_read	function
(	O
This	pointer
,	O
&	O
boot	struct
,	O
tot_sectors	long
,	O
dev	pointer
.	O
use_2m	int
&	O
0x7f	int
)	O
)	O
{	O
This	pointer
->	O
num_fat	int
=	O
1	int
;	O
FREE	O
(	O
&	O
This	pointer
->	O
Next	pointer
)	O
;	O
Free	O
(	O
This	pointer
->	O
Next	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
This	pointer
->	O
cp	pointer
=	O
cp_open	function
(	O
dev	pointer
.	O
codepage	int
)	O
;	O
if	O
(	O
This	pointer
->	O
cp	pointer
==	O
NULL	O
)	O
{	O
fs_free	function
(	O
(	O
Stream_t	struct
*	O
)	O
This	pointer
)	O
;	O
FREE	O
(	O
&	O
This	pointer
->	O
Next	pointer
)	O
;	O
Free	O
(	O
This	pointer
->	O
Next	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
(	O
Stream_t	struct
*	O
)	O
This	pointer
;	O
}	O
char	O
getDrive	function
(	O
Stream_t	struct
*	O
Stream	pointer
)	O
{	O
DeclareThis	O
(	O
Fs_t	struct
)	O
;	O
if	O
(	O
This	pointer
->	O
Class	pointer
!=	O
&	O
FsClass	struct
)	O
return	O
getDrive	function
(	O
GetFs	function
(	O
Stream	pointer
)	O
)	O
;	O
else	O
return	O
This	pointer
->	O
drive	char
;	O
}	O
int	O
fsPreallocateClusters	function
(	O
Fs_t	struct
*	O
Fs	pointer
,	O
long	O
size	array
)	O
{	O
if	O
(	O
size	array
>	O
0	int
&&	O
getfreeMinClusters	function
(	O
(	O
Stream_t	struct
*	O
)	O
Fs	pointer
,	O
size	array
)	O
!=	O
1	int
)	O
return	O
-	O
1	int
;	O
Fs	pointer
->	O
preallocatedClusters	int
+=	O
size	array
;	O
return	O
0	int
;	O
}	O
