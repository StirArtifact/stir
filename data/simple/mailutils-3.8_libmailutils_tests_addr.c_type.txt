int	O
parse	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
pcount	long
=	O
0	int
;	O
int	O
status	int
;	O
const	O
char	O
*	O
buf	pointer
;	O
mu_address_t	pointer
address	array
=	O
NULL	O
;	O
struct	O
mu_address	struct
hint	struct
;	O
hint	struct
.	O
domain	pointer
=	O
"localhost"	pointer
;	O
status	int
=	O
mu_address_create_hint	function
(	O
&	O
address	array
,	O
str	pointer
,	O
&	O
hint	struct
,	O
MU_ADDR_HINT_DOMAIN	int
)	O
;	O
mu_address_get_count	function
(	O
address	array
,	O
&	O
pcount	long
)	O
;	O
if	O
(	O
status	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
mu_errname	function
(	O
status	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
else	O
printf	function
(	O
"naddr: %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
pcount	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
pcount	long
;	O
i	long
++	O
)	O
{	O
int	O
isgroup	int
;	O
mu_address_is_group	function
(	O
address	array
,	O
i	long
,	O
&	O
isgroup	int
)	O
;	O
printf	function
(	O
"%lu. "	pointer
,	O
(	O
unsigned	O
long	O
)	O
i	long
)	O
;	O
if	O
(	O
isgroup	int
)	O
{	O
if	O
(	O
mu_address_sget_personal	function
(	O
address	array
,	O
i	long
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
buf	pointer
)	O
printf	function
(	O
"group <%s>:\n"	pointer
,	O
buf	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
mu_address_sget_email	function
(	O
address	array
,	O
i	long
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
buf	pointer
)	O
printf	function
(	O
"email <%s>:\n"	pointer
,	O
buf	pointer
)	O
;	O
}	O
if	O
(	O
mu_address_sget_personal	function
(	O
address	array
,	O
i	long
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
buf	pointer
&&	O
!	O
isgroup	int
)	O
printf	function
(	O
"personal <%s>\n"	pointer
,	O
buf	pointer
)	O
;	O
if	O
(	O
mu_address_sget_comments	function
(	O
address	array
,	O
i	long
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
buf	pointer
)	O
printf	function
(	O
"comments <%s>\n"	pointer
,	O
buf	pointer
)	O
;	O
if	O
(	O
mu_address_sget_local_part	function
(	O
address	array
,	O
i	long
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
buf	pointer
)	O
{	O
printf	function
(	O
"local-part <%s>"	pointer
,	O
buf	pointer
)	O
;	O
if	O
(	O
mu_address_sget_domain	function
(	O
address	array
,	O
i	long
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
buf	pointer
)	O
printf	function
(	O
" domain <%s>"	pointer
,	O
buf	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
mu_address_sget_route	function
(	O
address	array
,	O
i	long
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
buf	pointer
)	O
printf	function
(	O
"route <%s>\n"	pointer
,	O
buf	pointer
)	O
;	O
}	O
mu_address_destroy	function
(	O
&	O
address	array
)	O
;	O
return	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
char	O
buf	pointer
[	O
256	int
]	O
;	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"usage: %s [address]\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
2	int
;	O
}	O
if	O
(	O
argc	int
==	O
2	int
)	O
exit	function
(	O
parse	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
)	O
;	O
while	O
(	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
stdin	pointer
)	O
)	O
{	O
mu_rtrim_class	function
(	O
buf	pointer
,	O
MU_CTYPE_SPACE	int
)	O
;	O
parse	function
(	O
buf	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
