static	O
int	O
put_short	function
(	O
int	O
c	int
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
assert	O
(	O
c	int
<=	O
SHRT_MAX	O
)	O
;	O
assert	O
(	O
c	int
>=	O
SHRT_MIN	O
)	O
;	O
return	O
(	O
putc	function
(	O
c	int
>>	O
8	int
,	O
fp	pointer
)	O
!=	O
EOF	O
)	O
&&	O
(	O
putc	function
(	O
c	int
,	O
fp	pointer
)	O
!=	O
EOF	O
)	O
;	O
}	O
static	O
int	O
prefix_length	function
(	O
char	O
*	O
s1	pointer
,	O
char	O
*	O
s2	pointer
)	O
{	O
register	O
char	O
*	O
start	pointer
;	O
int	O
limit	int
=	O
INT_MAX	O
;	O
for	O
(	O
start	pointer
=	O
s1	pointer
;	O
*	O
s1	pointer
==	O
*	O
s2	pointer
&&	O
*	O
s1	pointer
!=	O
'\0'	O
;	O
s1	pointer
++	O
,	O
s2	pointer
++	O
)	O
{	O
if	O
(	O
0	int
==	O
--	O
limit	int
)	O
break	O
;	O
}	O
return	O
s1	pointer
-	O
start	pointer
;	O
}	O
static	O
struct	O
option	struct
const	O
longopts	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
"null"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'0'	O
}	O
,	O
{	O
NULL	O
,	O
no_argument	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
extern	O
char	O
*	O
version_string	pointer
;	O
static	O
void	O
usage	function
(	O
FILE	struct
*	O
stream	pointer
)	O
{	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"Usage: %s [-0 | --null] [--version] [--help]\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"\nReport bugs to <bug-findutils@gnu.org>.\n"	pointer
)	O
,	O
stream	pointer
)	O
;	O
}	O
static	O
long	O
get_seclevel	function
(	O
char	O
*	O
s	long
)	O
{	O
long	O
result	long
;	O
char	O
*	O
p	pointer
;	O
errno	O
=	O
0	int
;	O
result	long
=	O
strtol	function
(	O
s	long
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
(	O
0	int
==	O
result	long
)	O
&&	O
(	O
p	pointer
==	O
optarg	pointer
)	O
)	O
{	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"You need to specify a security level as a decimal integer."	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
(	O
LONG_MIN	O
==	O
result	long
||	O
LONG_MAX	O
==	O
result	long
)	O
&&	O
errno	O
)	O
{	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"Security level %s is outside the convertible range."	pointer
)	O
,	O
s	long
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
*	O
p	pointer
)	O
{	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"Security level %s has unexpected suffix %s."	pointer
)	O
,	O
s	long
,	O
p	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
return	O
result	long
;	O
}	O
}	O
static	O
void	O
outerr	function
(	O
void	O
)	O
{	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"write error"	pointer
)	O
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
path	pointer
;	O
char	O
*	O
oldpath	pointer
;	O
size_t	long
pathsize	long
,	O
oldpathsize	long
;	O
int	O
count	int
,	O
oldcount	int
,	O
diffcount	int
;	O
int	O
line_len	int
;	O
int	O
delimiter	int
=	O
'\n'	O
;	O
int	O
optc	int
;	O
int	O
slocate_compat	int
=	O
0	int
;	O
long	O
slocate_seclevel	long
=	O
0L	int
;	O
if	O
(	O
argv	pointer
[	O
0	int
]	O
)	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
else	O
set_program_name	function
(	O
"frcode"	pointer
)	O
;	O
if	O
(	O
atexit	function
(	O
close_stdout	function
)	O
)	O
{	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"The atexit library function failed"	pointer
)	O
)	O
;	O
}	O
pathsize	long
=	O
oldpathsize	long
=	O
1026	int
;	O
path	pointer
=	O
xmalloc	function
(	O
pathsize	long
)	O
;	O
oldpath	pointer
=	O
xmalloc	function
(	O
oldpathsize	long
)	O
;	O
oldpath	pointer
[	O
0	int
]	O
=	O
0	int
;	O
oldcount	int
=	O
0	int
;	O
while	O
(	O
(	O
optc	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"hv0S:"	pointer
,	O
longopts	array
,	O
(	O
int	O
*	O
)	O
0	int
)	O
)	O
!=	O
-	O
1	int
)	O
switch	O
(	O
optc	int
)	O
{	O
case	O
'0'	O
:	O
delimiter	int
=	O
0	int
;	O
break	O
;	O
case	O
'S'	O
:	O
slocate_compat	int
=	O
1	int
;	O
slocate_seclevel	long
=	O
get_seclevel	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
slocate_seclevel	long
<	O
0	int
||	O
slocate_seclevel	long
>	O
1	int
)	O
{	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"slocate security level %ld is unsupported."	pointer
)	O
,	O
slocate_seclevel	long
)	O
;	O
}	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
stdout	pointer
)	O
;	O
return	O
0	int
;	O
case	O
'v'	O
:	O
display_findutils_version	function
(	O
"frcode"	pointer
)	O
;	O
return	O
0	int
;	O
default	O
:	O
usage	function
(	O
stderr	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
optind	int
!=	O
argc	int
)	O
{	O
usage	function
(	O
stderr	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
slocate_compat	int
)	O
{	O
fputc	function
(	O
slocate_seclevel	long
?	O
'1'	O
:	O
'0'	O
,	O
stdout	pointer
)	O
;	O
fputc	function
(	O
0	int
,	O
stdout	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
fwrite	function
(	O
LOCATEDB_MAGIC	pointer
,	O
1	int
,	O
sizeof	O
(	O
LOCATEDB_MAGIC	pointer
)	O
,	O
stdout	pointer
)	O
!=	O
sizeof	O
(	O
LOCATEDB_MAGIC	pointer
)	O
)	O
{	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"Failed to write to standard output"	pointer
)	O
)	O
;	O
}	O
}	O
while	O
(	O
(	O
line_len	int
=	O
getdelim	function
(	O
&	O
path	pointer
,	O
&	O
pathsize	long
,	O
delimiter	int
,	O
stdin	pointer
)	O
)	O
>	O
0	int
)	O
{	O
path	pointer
[	O
line_len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
count	int
=	O
prefix_length	function
(	O
oldpath	pointer
,	O
path	pointer
)	O
;	O
diffcount	int
=	O
count	int
-	O
oldcount	int
;	O
if	O
(	O
(	O
diffcount	int
>	O
SHRT_MAX	O
)	O
||	O
(	O
diffcount	int
<	O
SHRT_MIN	O
)	O
)	O
{	O
count	int
=	O
0	int
;	O
diffcount	int
=	O
(	O
-	O
oldcount	int
)	O
;	O
}	O
oldcount	int
=	O
count	int
;	O
if	O
(	O
slocate_compat	int
)	O
{	O
slocate_compat	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
diffcount	int
<	O
LOCATEDB_ONEBYTE_MIN	O
||	O
diffcount	int
>	O
LOCATEDB_ONEBYTE_MAX	O
)	O
{	O
if	O
(	O
EOF	O
==	O
putc	function
(	O
LOCATEDB_ESCAPE	int
,	O
stdout	pointer
)	O
)	O
outerr	function
(	O
)	O
;	O
if	O
(	O
!	O
put_short	function
(	O
diffcount	int
,	O
stdout	pointer
)	O
)	O
outerr	function
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
EOF	O
==	O
putc	function
(	O
diffcount	int
,	O
stdout	pointer
)	O
)	O
outerr	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
(	O
EOF	O
==	O
fputs	function
(	O
path	pointer
+	O
count	int
,	O
stdout	pointer
)	O
)	O
||	O
(	O
EOF	O
==	O
putc	function
(	O
'\0'	O
,	O
stdout	pointer
)	O
)	O
)	O
{	O
outerr	function
(	O
)	O
;	O
}	O
if	O
(	O
1	int
)	O
{	O
char	O
*	O
tmppath	pointer
=	O
oldpath	pointer
;	O
size_t	long
tmppathsize	long
=	O
oldpathsize	long
;	O
oldpath	pointer
=	O
path	pointer
;	O
oldpathsize	long
=	O
pathsize	long
;	O
path	pointer
=	O
tmppath	pointer
;	O
pathsize	long
=	O
tmppathsize	long
;	O
}	O
}	O
free	function
(	O
path	pointer
)	O
;	O
free	function
(	O
oldpath	pointer
)	O
;	O
return	O
0	int
;	O
}	O
