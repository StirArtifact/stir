bool_t	int
xdr_dis_variable_datum	function
(	O
XDR	struct
*	O
xdrs	pointer
,	O
dis_variable_datum	struct
*	O
objp	pointer
)	O
{	O
static	O
char	O
pad	array
[	O
8	int
]	O
;	O
int	O
padbytes	int
;	O
if	O
(	O
!	O
xdr_u_long	function
(	O
xdrs	pointer
,	O
&	O
objp	pointer
->	O
datum_id	long
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
if	O
(	O
!	O
xdr_u_long	function
(	O
xdrs	pointer
,	O
&	O
objp	pointer
->	O
value_length	long
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
switch	O
(	O
objp	pointer
->	O
datum_id	long
)	O
{	O
case	O
DatumGeocentricCoordinatesX	int
:	O
case	O
DatumGeocentricCoordinatesY	int
:	O
case	O
DatumGeocentricCoordinatesZ	int
:	O
if	O
(	O
!	O
xdr_double	function
(	O
xdrs	pointer
,	O
&	O
objp	pointer
->	O
value	int
.	O
double_value	double
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
if	O
(	O
!	O
xdr_vector	function
(	O
xdrs	pointer
,	O
(	O
char	O
*	O
)	O
&	O
objp	pointer
->	O
value	int
.	O
ptr_value	pointer
,	O
(	O
unsigned	O
int	O
)	O
objp	pointer
->	O
value_length	long
/	O
8	int
,	O
sizeof	O
(	O
char	O
)	O
,	O
(	O
xdrproc_t	pointer
)	O
xdr_u_char	function
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
}	O
padbytes	int
=	O
8	int
-	O
(	O
objp	pointer
->	O
value_length	long
%	O
8	int
)	O
;	O
if	O
(	O
padbytes	int
!=	O
0	int
)	O
{	O
if	O
(	O
!	O
xdr_vector	function
(	O
xdrs	pointer
,	O
pad	array
,	O
padbytes	int
,	O
sizeof	O
(	O
char	O
)	O
,	O
(	O
xdrproc_t	pointer
)	O
xdr_char	function
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
}	O
return	O
TRUE	O
;	O
}	O
bool_t	int
xdr_dis_articulation_parm	function
(	O
XDR	struct
*	O
xdrs	pointer
,	O
dis_articulation_parm	struct
*	O
objp	pointer
)	O
{	O
if	O
(	O
!	O
xdr_byte_u_char	function
(	O
xdrs	pointer
,	O
&	O
objp	pointer
->	O
type	int
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
if	O
(	O
!	O
xdr_byte_u_char	function
(	O
xdrs	pointer
,	O
&	O
objp	pointer
->	O
change	char
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
if	O
(	O
!	O
xdr_byte_short	function
(	O
xdrs	pointer
,	O
&	O
objp	pointer
->	O
id	char
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
if	O
(	O
!	O
xdr_byte_long	function
(	O
xdrs	pointer
,	O
(	O
char	O
*	O
)	O
&	O
objp	pointer
->	O
type	int
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
switch	O
(	O
objp	pointer
->	O
type	int
)	O
{	O
default	O
:	O
objp	pointer
->	O
value	int
.	O
l	array
[	O
0	int
]	O
=	O
0	int
;	O
objp	pointer
->	O
value	int
.	O
l	array
[	O
1	int
]	O
=	O
0	int
;	O
}	O
return	O
TRUE	O
;	O
}	O
bool_t	int
xdr_dis_timestamp	function
(	O
XDR	struct
*	O
xdrs	pointer
,	O
dis_timestamp	struct
*	O
objp	pointer
)	O
{	O
if	O
(	O
!	O
xdr_u_long	function
(	O
xdrs	pointer
,	O
(	O
unsigned	O
long	O
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
bool_t	int
xdr_dis_pdu	function
(	O
XDR	struct
*	O
xdrs	pointer
,	O
dis_pdu	union
*	O
objp	pointer
)	O
{	O
u_long	long
pos	struct
;	O
if	O
(	O
xdrs	pointer
->	O
x_op	enum
==	O
XDR_DECODE	int
)	O
{	O
pos	struct
=	O
xdr_getpos	O
(	O
xdrs	pointer
)	O
;	O
if	O
(	O
!	O
xdr_dis_pdu_header	function
(	O
xdrs	pointer
,	O
(	O
dis_pdu_header	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
if	O
(	O
!	O
xdr_setpos	O
(	O
xdrs	pointer
,	O
pos	struct
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
}	O
switch	O
(	O
objp	pointer
->	O
hdr	struct
.	O
pdu_type	char
)	O
{	O
case	O
PDUTypeEntityState	int
:	O
if	O
(	O
!	O
xdr_dis_entity_state_pdu	function
(	O
xdrs	pointer
,	O
(	O
dis_entity_state_pdu	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
case	O
PDUTypeCollision	int
:	O
if	O
(	O
!	O
xdr_dis_collision_pdu	function
(	O
xdrs	pointer
,	O
(	O
dis_collision_pdu	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
case	O
PDUTypeFire	int
:	O
if	O
(	O
!	O
xdr_dis_fire_pdu	function
(	O
xdrs	pointer
,	O
(	O
dis_fire_pdu	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
case	O
PDUTypeDetonation	int
:	O
if	O
(	O
!	O
xdr_dis_detonation_pdu	function
(	O
xdrs	pointer
,	O
(	O
dis_detonation_pdu	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
case	O
PDUTypeCreateEntity	int
:	O
if	O
(	O
!	O
xdr_dis_create_entity_pdu	function
(	O
xdrs	pointer
,	O
(	O
dis_create_entity_pdu	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
case	O
PDUTypeRemoveEntity	int
:	O
if	O
(	O
!	O
xdr_dis_remove_entity_pdu	function
(	O
xdrs	pointer
,	O
(	O
dis_remove_entity_pdu	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
case	O
PDUTypeStopFreeze	int
:	O
if	O
(	O
!	O
xdr_dis_stop_pdu	function
(	O
xdrs	pointer
,	O
(	O
dis_stop_pdu	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
case	O
PDUTypeStartResume	int
:	O
if	O
(	O
!	O
xdr_dis_start_pdu	function
(	O
xdrs	pointer
,	O
(	O
dis_start_pdu	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
case	O
PDUTypeEmission	int
:	O
if	O
(	O
xdrs	pointer
->	O
x_op	enum
==	O
XDR_DECODE	int
)	O
{	O
(	O
(	O
dis_em_emission_pdu	struct
*	O
)	O
objp	pointer
)	O
->	O
system	function
=	O
NULL	O
;	O
}	O
if	O
(	O
!	O
xdr_dis_em_emission_pdu	function
(	O
xdrs	pointer
,	O
(	O
dis_em_emission_pdu	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
case	O
PDUTypeTransferControl	int
:	O
if	O
(	O
!	O
xdr_dis_transfer_control_pdu	function
(	O
xdrs	pointer
,	O
(	O
dis_transfer_control_pdu	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
case	O
PDUTypeAcknowledge	int
:	O
if	O
(	O
!	O
xdr_dis_acknowledge_pdu	function
(	O
xdrs	pointer
,	O
(	O
dis_acknowledge_pdu	struct
*	O
)	O
objp	pointer
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
break	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
