struct	O
wget_vector_st	struct
{	O
wget_vector_compare_fn	function
*	O
cmp	pointer
;	O
wget_vector_destructor	function
*	O
destructor	pointer
;	O
void	O
*	O
*	O
entry	pointer
;	O
int	O
max	int
,	O
cur	int
;	O
bool	bool
sorted	bool
:	O
1	int
;	O
float	O
resize_factor	float
;	O
}	O
;	O
wget_vector	struct
*	O
wget_vector_create	function
(	O
int	O
max	int
,	O
wget_vector_compare_fn	function
*	O
cmp	pointer
)	O
{	O
wget_vector	struct
*	O
v	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_vector	struct
)	O
)	O
;	O
if	O
(	O
!	O
v	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
(	O
v	pointer
->	O
entry	pointer
=	O
wget_malloc	function
(	O
max	int
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
)	O
)	O
{	O
xfree	O
(	O
v	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
v	pointer
->	O
max	int
=	O
max	int
;	O
v	pointer
->	O
resize_factor	float
=	O
2	int
;	O
v	pointer
->	O
cmp	pointer
=	O
cmp	pointer
;	O
v	pointer
->	O
destructor	pointer
=	O
free	function
;	O
return	O
v	pointer
;	O
}	O
void	O
wget_vector_set_resize_factor	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
float	O
factor	float
)	O
{	O
if	O
(	O
v	pointer
)	O
v	pointer
->	O
resize_factor	float
=	O
factor	float
;	O
}	O
static	O
int	O
WGET_GCC_NONNULL	O
(	O
(	O
2	int
)	O
)	O
insert_element	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
const	O
void	O
*	O
elem	pointer
,	O
int	O
pos	int
,	O
int	O
replace	int
)	O
{	O
if	O
(	O
pos	int
<	O
0	int
||	O
!	O
v	pointer
||	O
pos	int
>	O
v	pointer
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
replace	int
)	O
{	O
if	O
(	O
v	pointer
->	O
max	int
==	O
v	pointer
->	O
cur	int
)	O
{	O
int	O
newsize	int
=	O
(	O
int	O
)	O
(	O
v	pointer
->	O
max	int
*	O
v	pointer
->	O
resize_factor	float
)	O
;	O
if	O
(	O
newsize	int
<=	O
v	pointer
->	O
max	int
)	O
return	O
WGET_E_INVALID	int
;	O
void	O
*	O
*	O
tmp	pointer
=	O
wget_realloc	function
(	O
v	pointer
->	O
entry	pointer
,	O
newsize	int
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
WGET_E_MEMORY	int
;	O
v	pointer
->	O
entry	pointer
=	O
tmp	pointer
;	O
v	pointer
->	O
max	int
=	O
newsize	int
;	O
}	O
memmove	function
(	O
&	O
v	pointer
->	O
entry	pointer
[	O
pos	int
+	O
1	int
]	O
,	O
&	O
v	pointer
->	O
entry	pointer
[	O
pos	int
]	O
,	O
(	O
v	pointer
->	O
cur	int
-	O
pos	int
)	O
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
;	O
v	pointer
->	O
cur	int
++	O
;	O
}	O
v	pointer
->	O
entry	pointer
[	O
pos	int
]	O
=	O
(	O
void	O
*	O
)	O
elem	pointer
;	O
if	O
(	O
v	pointer
->	O
cmp	pointer
)	O
{	O
if	O
(	O
v	pointer
->	O
cur	int
==	O
1	int
)	O
v	pointer
->	O
sorted	bool
=	O
1	int
;	O
else	O
if	O
(	O
v	pointer
->	O
cur	int
>	O
1	int
&&	O
v	pointer
->	O
sorted	bool
)	O
{	O
if	O
(	O
pos	int
==	O
0	int
)	O
{	O
if	O
(	O
v	pointer
->	O
cmp	pointer
(	O
elem	pointer
,	O
v	pointer
->	O
entry	pointer
[	O
1	int
]	O
)	O
>	O
0	int
)	O
v	pointer
->	O
sorted	bool
=	O
0	int
;	O
}	O
else	O
if	O
(	O
pos	int
==	O
v	pointer
->	O
cur	int
-	O
1	int
)	O
{	O
if	O
(	O
v	pointer
->	O
cmp	pointer
(	O
elem	pointer
,	O
v	pointer
->	O
entry	pointer
[	O
v	pointer
->	O
cur	int
-	O
2	int
]	O
)	O
<	O
0	int
)	O
v	pointer
->	O
sorted	bool
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
v	pointer
->	O
cmp	pointer
(	O
elem	pointer
,	O
v	pointer
->	O
entry	pointer
[	O
pos	int
-	O
1	int
]	O
)	O
<	O
0	int
||	O
v	pointer
->	O
cmp	pointer
(	O
elem	pointer
,	O
v	pointer
->	O
entry	pointer
[	O
pos	int
+	O
1	int
]	O
)	O
>	O
0	int
)	O
{	O
v	pointer
->	O
sorted	bool
=	O
0	int
;	O
}	O
}	O
}	O
}	O
return	O
pos	int
;	O
}	O
int	O
wget_vector_insert	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
const	O
void	O
*	O
elem	pointer
,	O
int	O
pos	int
)	O
{	O
return	O
insert_element	function
(	O
v	pointer
,	O
elem	pointer
,	O
pos	int
,	O
0	int
)	O
;	O
}	O
int	O
wget_vector_insert_sorted	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
const	O
void	O
*	O
elem	pointer
)	O
{	O
if	O
(	O
!	O
v	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
v	pointer
->	O
cmp	pointer
)	O
return	O
insert_element	function
(	O
v	pointer
,	O
elem	pointer
,	O
v	pointer
->	O
cur	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
v	pointer
->	O
sorted	bool
)	O
wget_vector_sort	function
(	O
v	pointer
)	O
;	O
int	O
l	int
=	O
0	int
,	O
r	int
=	O
v	pointer
->	O
cur	int
-	O
1	int
,	O
m	pointer
=	O
0	int
,	O
res	pointer
=	O
0	int
;	O
while	O
(	O
l	int
<=	O
r	int
)	O
{	O
m	pointer
=	O
(	O
l	int
+	O
r	int
)	O
/	O
2	int
;	O
if	O
(	O
(	O
res	pointer
=	O
v	pointer
->	O
cmp	pointer
(	O
elem	pointer
,	O
v	pointer
->	O
entry	pointer
[	O
m	pointer
]	O
)	O
)	O
>	O
0	int
)	O
l	int
=	O
m	pointer
+	O
1	int
;	O
else	O
if	O
(	O
res	pointer
<	O
0	int
)	O
r	int
=	O
m	pointer
-	O
1	int
;	O
else	O
return	O
insert_element	function
(	O
v	pointer
,	O
elem	pointer
,	O
m	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
res	pointer
>	O
0	int
)	O
m	pointer
++	O
;	O
return	O
insert_element	function
(	O
v	pointer
,	O
elem	pointer
,	O
m	pointer
,	O
0	int
)	O
;	O
}	O
int	O
wget_vector_add_memdup	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
const	O
void	O
*	O
elem	pointer
,	O
size_t	long
size	pointer
)	O
{	O
void	O
*	O
elemp	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
v	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
(	O
elemp	pointer
=	O
wget_memdup	function
(	O
elem	pointer
,	O
size	pointer
)	O
)	O
)	O
return	O
WGET_E_MEMORY	int
;	O
if	O
(	O
(	O
rc	int
=	O
insert_element	function
(	O
v	pointer
,	O
elemp	pointer
,	O
v	pointer
->	O
cur	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
xfree	O
(	O
elemp	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
wget_vector_add	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
const	O
void	O
*	O
elem	pointer
)	O
{	O
return	O
v	pointer
?	O
insert_element	function
(	O
v	pointer
,	O
elem	pointer
,	O
v	pointer
->	O
cur	int
,	O
0	int
)	O
:	O
WGET_E_INVALID	int
;	O
}	O
int	O
wget_vector_add_vprintf	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
args	array
)	O
{	O
if	O
(	O
!	O
v	pointer
||	O
!	O
fmt	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
char	O
*	O
p	pointer
=	O
wget_vaprintf	function
(	O
fmt	pointer
,	O
args	array
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
WGET_E_MEMORY	int
;	O
return	O
insert_element	function
(	O
v	pointer
,	O
p	pointer
,	O
v	pointer
->	O
cur	int
,	O
0	int
)	O
;	O
}	O
int	O
wget_vector_add_printf	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
if	O
(	O
!	O
v	pointer
||	O
!	O
fmt	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
fmt	pointer
)	O
;	O
char	O
*	O
p	pointer
=	O
wget_vaprintf	function
(	O
fmt	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
WGET_E_MEMORY	int
;	O
return	O
insert_element	function
(	O
v	pointer
,	O
p	pointer
,	O
v	pointer
->	O
cur	int
,	O
0	int
)	O
;	O
}	O
int	O
wget_vector_replace	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
const	O
void	O
*	O
elem	pointer
,	O
int	O
pos	int
)	O
{	O
if	O
(	O
!	O
v	pointer
||	O
pos	int
<	O
0	int
||	O
pos	int
>=	O
v	pointer
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
v	pointer
->	O
destructor	pointer
)	O
v	pointer
->	O
destructor	pointer
(	O
v	pointer
->	O
entry	pointer
[	O
pos	int
]	O
)	O
;	O
return	O
insert_element	function
(	O
v	pointer
,	O
elem	pointer
,	O
pos	int
,	O
1	int
)	O
;	O
}	O
static	O
int	O
remove_element	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
int	O
pos	int
,	O
int	O
free_entry	int
)	O
{	O
if	O
(	O
pos	int
<	O
0	int
||	O
!	O
v	pointer
||	O
pos	int
>=	O
v	pointer
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
free_entry	int
)	O
{	O
if	O
(	O
v	pointer
->	O
destructor	pointer
)	O
v	pointer
->	O
destructor	pointer
(	O
v	pointer
->	O
entry	pointer
[	O
pos	int
]	O
)	O
;	O
}	O
memmove	function
(	O
&	O
v	pointer
->	O
entry	pointer
[	O
pos	int
]	O
,	O
&	O
v	pointer
->	O
entry	pointer
[	O
pos	int
+	O
1	int
]	O
,	O
(	O
v	pointer
->	O
cur	int
-	O
pos	int
-	O
1	int
)	O
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
;	O
v	pointer
->	O
cur	int
--	O
;	O
return	O
pos	int
;	O
}	O
int	O
wget_vector_remove	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
int	O
pos	int
)	O
{	O
return	O
remove_element	function
(	O
v	pointer
,	O
pos	int
,	O
1	int
)	O
;	O
}	O
int	O
wget_vector_remove_nofree	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
int	O
pos	int
)	O
{	O
return	O
remove_element	function
(	O
v	pointer
,	O
pos	int
,	O
0	int
)	O
;	O
}	O
int	O
wget_vector_move	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
int	O
old_pos	int
,	O
int	O
new_pos	int
)	O
{	O
if	O
(	O
!	O
v	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
old_pos	int
<	O
0	int
||	O
old_pos	int
>=	O
v	pointer
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
new_pos	int
<	O
0	int
||	O
new_pos	int
>=	O
v	pointer
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
old_pos	int
==	O
new_pos	int
)	O
return	O
new_pos	int
;	O
if	O
(	O
v	pointer
->	O
sorted	bool
&&	O
v	pointer
->	O
cmp	pointer
&&	O
v	pointer
->	O
cmp	pointer
(	O
v	pointer
->	O
entry	pointer
[	O
old_pos	int
]	O
,	O
v	pointer
->	O
entry	pointer
[	O
new_pos	int
]	O
)	O
)	O
v	pointer
->	O
sorted	bool
=	O
0	int
;	O
if	O
(	O
old_pos	int
<	O
new_pos	int
)	O
{	O
void	O
*	O
tmp	pointer
=	O
v	pointer
->	O
entry	pointer
[	O
old_pos	int
]	O
;	O
memmove	function
(	O
&	O
v	pointer
->	O
entry	pointer
[	O
old_pos	int
]	O
,	O
&	O
v	pointer
->	O
entry	pointer
[	O
old_pos	int
+	O
1	int
]	O
,	O
(	O
new_pos	int
-	O
old_pos	int
)	O
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
;	O
v	pointer
->	O
entry	pointer
[	O
new_pos	int
]	O
=	O
tmp	pointer
;	O
}	O
else	O
{	O
void	O
*	O
tmp	pointer
=	O
v	pointer
->	O
entry	pointer
[	O
old_pos	int
]	O
;	O
memmove	function
(	O
&	O
v	pointer
->	O
entry	pointer
[	O
new_pos	int
+	O
1	int
]	O
,	O
&	O
v	pointer
->	O
entry	pointer
[	O
new_pos	int
]	O
,	O
(	O
old_pos	int
-	O
new_pos	int
)	O
*	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
;	O
v	pointer
->	O
entry	pointer
[	O
new_pos	int
]	O
=	O
tmp	pointer
;	O
}	O
return	O
new_pos	int
;	O
}	O
int	O
wget_vector_swap	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
int	O
pos1	int
,	O
int	O
pos2	int
)	O
{	O
if	O
(	O
!	O
v	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
pos1	int
<	O
0	int
||	O
pos1	int
>=	O
v	pointer
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
pos2	int
<	O
0	int
||	O
pos2	int
>=	O
v	pointer
->	O
cur	int
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
pos1	int
==	O
pos2	int
)	O
return	O
pos2	int
;	O
void	O
*	O
tmp	pointer
=	O
v	pointer
->	O
entry	pointer
[	O
pos1	int
]	O
;	O
v	pointer
->	O
entry	pointer
[	O
pos1	int
]	O
=	O
v	pointer
->	O
entry	pointer
[	O
pos2	int
]	O
;	O
v	pointer
->	O
entry	pointer
[	O
pos2	int
]	O
=	O
tmp	pointer
;	O
if	O
(	O
v	pointer
->	O
sorted	bool
&&	O
v	pointer
->	O
cmp	pointer
&&	O
v	pointer
->	O
cmp	pointer
(	O
v	pointer
->	O
entry	pointer
[	O
pos1	int
]	O
,	O
v	pointer
->	O
entry	pointer
[	O
pos2	int
]	O
)	O
)	O
v	pointer
->	O
sorted	bool
=	O
0	int
;	O
return	O
pos2	int
;	O
}	O
void	O
wget_vector_free	function
(	O
wget_vector	struct
*	O
*	O
v	pointer
)	O
{	O
if	O
(	O
v	pointer
&&	O
*	O
v	pointer
)	O
{	O
wget_vector_clear	function
(	O
*	O
v	pointer
)	O
;	O
xfree	O
(	O
(	O
*	O
v	pointer
)	O
->	O
entry	pointer
)	O
;	O
xfree	O
(	O
*	O
v	pointer
)	O
;	O
}	O
}	O
void	O
wget_vector_clear	function
(	O
wget_vector	struct
*	O
v	pointer
)	O
{	O
if	O
(	O
v	pointer
)	O
{	O
if	O
(	O
v	pointer
->	O
destructor	pointer
)	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
v	pointer
->	O
cur	int
;	O
it	int
++	O
)	O
{	O
v	pointer
->	O
destructor	pointer
(	O
v	pointer
->	O
entry	pointer
[	O
it	int
]	O
)	O
;	O
v	pointer
->	O
entry	pointer
[	O
it	int
]	O
=	O
NULL	O
;	O
}	O
}	O
v	pointer
->	O
cur	int
=	O
0	int
;	O
}	O
}	O
void	O
wget_vector_clear_nofree	function
(	O
wget_vector	struct
*	O
v	pointer
)	O
{	O
if	O
(	O
v	pointer
)	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
v	pointer
->	O
cur	int
;	O
it	int
++	O
)	O
v	pointer
->	O
entry	pointer
[	O
it	int
]	O
=	O
NULL	O
;	O
v	pointer
->	O
cur	int
=	O
0	int
;	O
}	O
}	O
int	O
wget_vector_size	function
(	O
const	O
wget_vector	struct
*	O
v	pointer
)	O
{	O
return	O
v	pointer
?	O
v	pointer
->	O
cur	int
:	O
0	int
;	O
}	O
void	O
*	O
wget_vector_get	function
(	O
const	O
wget_vector	struct
*	O
v	pointer
,	O
int	O
pos	int
)	O
{	O
if	O
(	O
pos	int
<	O
0	int
||	O
!	O
v	pointer
||	O
pos	int
>=	O
v	pointer
->	O
cur	int
)	O
return	O
NULL	O
;	O
return	O
v	pointer
->	O
entry	pointer
[	O
pos	int
]	O
;	O
}	O
int	O
wget_vector_browse	function
(	O
const	O
wget_vector	struct
*	O
v	pointer
,	O
wget_vector_browse_fn	function
*	O
browse	pointer
,	O
void	O
*	O
ctx	pointer
)	O
{	O
if	O
(	O
v	pointer
)	O
{	O
for	O
(	O
int	O
ret	int
,	O
it	int
=	O
0	int
;	O
it	int
<	O
v	pointer
->	O
cur	int
;	O
it	int
++	O
)	O
if	O
(	O
(	O
ret	int
=	O
browse	pointer
(	O
ctx	pointer
,	O
v	pointer
->	O
entry	pointer
[	O
it	int
]	O
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
wget_vector_setcmpfunc	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
wget_vector_compare_fn	function
*	O
cmp	pointer
)	O
{	O
if	O
(	O
v	pointer
)	O
{	O
v	pointer
->	O
cmp	pointer
=	O
cmp	pointer
;	O
if	O
(	O
v	pointer
->	O
cur	int
==	O
1	int
)	O
v	pointer
->	O
sorted	bool
=	O
1	int
;	O
else	O
v	pointer
->	O
sorted	bool
=	O
0	int
;	O
}	O
}	O
void	O
wget_vector_set_destructor	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
wget_vector_destructor	function
*	O
destructor	pointer
)	O
{	O
if	O
(	O
v	pointer
)	O
v	pointer
->	O
destructor	pointer
=	O
destructor	pointer
;	O
}	O
WGET_GCC_NONNULL_ALL	O
static	O
int	O
compare_element	function
(	O
const	O
void	O
*	O
p1	pointer
,	O
const	O
void	O
*	O
p2	pointer
,	O
void	O
*	O
v	pointer
)	O
{	O
return	O
(	O
(	O
wget_vector	struct
*	O
)	O
v	pointer
)	O
->	O
cmp	pointer
(	O
*	O
(	O
(	O
void	O
*	O
*	O
)	O
p1	pointer
)	O
,	O
*	O
(	O
(	O
void	O
*	O
*	O
)	O
p2	pointer
)	O
)	O
;	O
}	O
void	O
wget_vector_sort	function
(	O
wget_vector	struct
*	O
v	pointer
)	O
{	O
if	O
(	O
v	pointer
&&	O
v	pointer
->	O
cmp	pointer
)	O
{	O
qsort_r	function
(	O
v	pointer
->	O
entry	pointer
,	O
v	pointer
->	O
cur	int
,	O
sizeof	O
(	O
void	O
*	O
)	O
,	O
compare_element	function
,	O
v	pointer
)	O
;	O
v	pointer
->	O
sorted	bool
=	O
1	int
;	O
}	O
}	O
int	O
wget_vector_find	function
(	O
const	O
wget_vector	struct
*	O
v	pointer
,	O
const	O
void	O
*	O
elem	pointer
)	O
{	O
if	O
(	O
!	O
v	pointer
||	O
!	O
v	pointer
->	O
cmp	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
v	pointer
->	O
cur	int
==	O
1	int
)	O
{	O
if	O
(	O
v	pointer
->	O
cmp	pointer
(	O
elem	pointer
,	O
v	pointer
->	O
entry	pointer
[	O
0	int
]	O
)	O
==	O
0	int
)	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
v	pointer
->	O
sorted	bool
)	O
{	O
for	O
(	O
int	O
l	int
=	O
0	int
,	O
r	int
=	O
v	pointer
->	O
cur	int
-	O
1	int
;	O
l	int
<=	O
r	int
;	O
)	O
{	O
int	O
res	pointer
,	O
m	pointer
=	O
(	O
l	int
+	O
r	int
)	O
/	O
2	int
;	O
if	O
(	O
(	O
res	pointer
=	O
v	pointer
->	O
cmp	pointer
(	O
elem	pointer
,	O
v	pointer
->	O
entry	pointer
[	O
m	pointer
]	O
)	O
)	O
>	O
0	int
)	O
l	int
=	O
m	pointer
+	O
1	int
;	O
else	O
if	O
(	O
res	pointer
<	O
0	int
)	O
r	int
=	O
m	pointer
-	O
1	int
;	O
else	O
return	O
m	pointer
;	O
}	O
}	O
else	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
v	pointer
->	O
cur	int
;	O
it	int
++	O
)	O
if	O
(	O
v	pointer
->	O
cmp	pointer
(	O
elem	pointer
,	O
v	pointer
->	O
entry	pointer
[	O
it	int
]	O
)	O
==	O
0	int
)	O
return	O
it	int
;	O
}	O
return	O
WGET_E_UNKNOWN	int
;	O
}	O
bool	bool
wget_vector_contains	function
(	O
const	O
wget_vector	struct
*	O
v	pointer
,	O
const	O
void	O
*	O
elem	pointer
)	O
{	O
return	O
wget_vector_find	function
(	O
v	pointer
,	O
elem	pointer
)	O
>=	O
0	int
;	O
}	O
int	O
wget_vector_findext	function
(	O
const	O
wget_vector	struct
*	O
v	pointer
,	O
int	O
start	int
,	O
int	O
direction	int
,	O
wget_vector_find_fn	function
*	O
find	pointer
)	O
{	O
if	O
(	O
!	O
v	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
direction	int
)	O
{	O
if	O
(	O
start	int
<	O
v	pointer
->	O
cur	int
)	O
{	O
for	O
(	O
int	O
it	int
=	O
start	int
;	O
it	int
>=	O
0	int
;	O
it	int
--	O
)	O
if	O
(	O
find	pointer
(	O
v	pointer
->	O
entry	pointer
[	O
it	int
]	O
)	O
==	O
0	int
)	O
return	O
it	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
start	int
>=	O
0	int
)	O
{	O
for	O
(	O
int	O
it	int
=	O
start	int
;	O
it	int
<	O
v	pointer
->	O
cur	int
;	O
it	int
++	O
)	O
if	O
(	O
find	pointer
(	O
v	pointer
->	O
entry	pointer
[	O
it	int
]	O
)	O
==	O
0	int
)	O
return	O
it	int
;	O
}	O
}	O
return	O
WGET_E_UNKNOWN	int
;	O
}	O
