typedef	O
struct	O
netdef	struct
netdef_t	struct
;	O
struct	O
netdef	struct
{	O
netdef_t	struct
*	O
next	pointer
;	O
unsigned	O
int	O
ipaddr	int
;	O
unsigned	O
int	O
netmask	int
;	O
}	O
;	O
typedef	O
struct	O
acl	struct
acl_t	struct
;	O
struct	O
acl	struct
{	O
acl_t	struct
*	O
next	pointer
;	O
regex_t	struct
re	struct
;	O
netdef_t	struct
*	O
netlist	pointer
;	O
int	O
action	int
;	O
}	O
;	O
acl_t	struct
*	O
acl_head	pointer
,	O
*	O
acl_tail	pointer
;	O
static	O
int	O
read_address	function
(	O
char	O
*	O
*	O
line_ptr	pointer
,	O
char	O
*	O
ptr	pointer
)	O
{	O
char	O
*	O
startp	pointer
=	O
*	O
line_ptr	pointer
;	O
char	O
*	O
endp	pointer
;	O
int	O
dotcount	int
=	O
0	int
;	O
for	O
(	O
endp	pointer
=	O
startp	pointer
;	O
*	O
endp	pointer
;	O
endp	pointer
++	O
,	O
ptr	pointer
++	O
)	O
if	O
(	O
!	O
(	O
isdigit	function
(	O
*	O
endp	pointer
)	O
||	O
*	O
endp	pointer
==	O
'.'	O
)	O
)	O
break	O
;	O
else	O
if	O
(	O
endp	pointer
<	O
startp	pointer
+	O
DOTTED_QUAD_LEN	int
)	O
{	O
if	O
(	O
*	O
endp	pointer
==	O
'.'	O
)	O
dotcount	int
++	O
;	O
*	O
ptr	pointer
=	O
*	O
endp	pointer
;	O
}	O
else	O
break	O
;	O
*	O
line_ptr	pointer
=	O
endp	pointer
;	O
*	O
ptr	pointer
=	O
0	int
;	O
return	O
dotcount	int
;	O
}	O
static	O
netdef_t	struct
*	O
netdef_parse	function
(	O
char	O
*	O
str	pointer
)	O
{	O
unsigned	O
int	O
ipaddr	int
,	O
netmask	int
;	O
netdef_t	struct
*	O
netdef	struct
;	O
char	O
ipbuf	array
[	O
DOTTED_QUAD_LEN	int
+	O
1	int
]	O
;	O
if	O
(	O
strcmp	function
(	O
str	pointer
,	O
"any"	pointer
)	O
==	O
0	int
)	O
{	O
ipaddr	int
=	O
0	int
;	O
netmask	int
=	O
0	int
;	O
}	O
else	O
{	O
read_address	function
(	O
&	O
str	pointer
,	O
ipbuf	array
)	O
;	O
ipaddr	int
=	O
inet_addr	function
(	O
ipbuf	array
)	O
;	O
if	O
(	O
ipaddr	int
==	O
INADDR_NONE	O
)	O
return	O
NULL	O
;	O
if	O
(	O
*	O
str	pointer
==	O
0	int
)	O
netmask	int
=	O
0xfffffffful	int
;	O
else	O
if	O
(	O
*	O
str	pointer
!=	O
'/'	O
)	O
return	O
NULL	O
;	O
else	O
{	O
str	pointer
++	O
;	O
if	O
(	O
read_address	function
(	O
&	O
str	pointer
,	O
ipbuf	array
)	O
==	O
0	int
)	O
{	O
unsigned	O
int	O
len	int
=	O
strtoul	function
(	O
ipbuf	array
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
len	int
>	O
32	int
)	O
return	O
NULL	O
;	O
netmask	int
=	O
0xfffffffful	int
>>	O
(	O
32	int
-	O
len	int
)	O
;	O
netmask	int
<<=	O
(	O
32	int
-	O
len	int
)	O
;	O
}	O
else	O
netmask	int
=	O
inet_network	function
(	O
ipbuf	array
)	O
;	O
netmask	int
=	O
htonl	function
(	O
netmask	int
)	O
;	O
}	O
}	O
netdef	struct
=	O
malloc	function
(	O
sizeof	O
*	O
netdef	struct
)	O
;	O
if	O
(	O
!	O
netdef	struct
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"out of memory"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
netdef	struct
->	O
next	pointer
=	O
NULL	O
;	O
netdef	struct
->	O
ipaddr	int
=	O
ipaddr	int
;	O
netdef	struct
->	O
netmask	int
=	O
netmask	int
;	O
return	O
netdef	struct
;	O
}	O
void	O
read_acl	function
(	O
char	O
*	O
config_file	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
int	O
line	int
;	O
char	O
buf	array
[	O
128	int
]	O
;	O
char	O
*	O
ptr	pointer
;	O
if	O
(	O
!	O
config_file	pointer
)	O
return	O
;	O
fp	pointer
=	O
fopen	function
(	O
config_file	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"can't open config file %s: %m"	pointer
,	O
config_file	pointer
)	O
;	O
return	O
;	O
}	O
line	int
=	O
0	int
;	O
while	O
(	O
(	O
ptr	pointer
=	O
fgets	function
(	O
buf	array
,	O
sizeof	O
buf	array
,	O
fp	pointer
)	O
)	O
)	O
{	O
int	O
len	int
,	O
i	int
;	O
int	O
argc	pointer
;	O
char	O
*	O
*	O
argv	pointer
;	O
int	O
action	int
;	O
regex_t	struct
re	struct
;	O
netdef_t	struct
*	O
head	pointer
,	O
*	O
tail	pointer
;	O
acl_t	struct
*	O
acl	struct
;	O
line	int
++	O
;	O
len	int
=	O
strlen	function
(	O
ptr	pointer
)	O
;	O
if	O
(	O
len	int
>	O
0	int
&&	O
ptr	pointer
[	O
len	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
ptr	pointer
[	O
--	O
len	int
]	O
=	O
0	int
;	O
while	O
(	O
*	O
ptr	pointer
&&	O
isspace	function
(	O
*	O
ptr	pointer
)	O
)	O
ptr	pointer
++	O
;	O
if	O
(	O
!	O
*	O
ptr	pointer
||	O
*	O
ptr	pointer
==	O
'#'	O
)	O
continue	O
;	O
argcv_get	function
(	O
ptr	pointer
,	O
""	pointer
,	O
&	O
argc	pointer
,	O
&	O
argv	pointer
)	O
;	O
if	O
(	O
argc	pointer
<	O
2	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"%s:%d: too few fields"	pointer
,	O
config_file	pointer
,	O
line	int
)	O
;	O
argcv_free	function
(	O
argc	pointer
,	O
argv	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"allow"	pointer
)	O
==	O
0	int
)	O
action	int
=	O
ACT_ALLOW	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"deny"	pointer
)	O
==	O
0	int
)	O
action	int
=	O
ACT_DENY	int
;	O
else	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"%s:%d: unknown keyword"	pointer
,	O
config_file	pointer
,	O
line	int
)	O
;	O
argcv_free	function
(	O
argc	pointer
,	O
argv	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
regcomp	function
(	O
&	O
re	struct
,	O
argv	pointer
[	O
1	int
]	O
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"%s:%d: bad regexp"	pointer
,	O
config_file	pointer
,	O
line	int
)	O
;	O
argcv_free	function
(	O
argc	pointer
,	O
argv	pointer
)	O
;	O
continue	O
;	O
}	O
head	pointer
=	O
tail	pointer
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
argc	pointer
;	O
i	int
++	O
)	O
{	O
netdef_t	struct
*	O
cur	pointer
=	O
netdef_parse	function
(	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
!	O
cur	pointer
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"%s:%d: can't parse netdef: %s"	pointer
,	O
config_file	pointer
,	O
line	int
,	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
tail	pointer
)	O
head	pointer
=	O
cur	pointer
;	O
else	O
tail	pointer
->	O
next	pointer
=	O
cur	pointer
;	O
tail	pointer
=	O
cur	pointer
;	O
}	O
argcv_free	function
(	O
argc	pointer
,	O
argv	pointer
)	O
;	O
acl	struct
=	O
malloc	function
(	O
sizeof	O
*	O
acl	struct
)	O
;	O
if	O
(	O
!	O
acl	struct
)	O
{	O
syslog	function
(	O
LOG_CRIT	int
,	O
"out of memory"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
acl	struct
->	O
next	pointer
=	O
NULL	O
;	O
acl	struct
->	O
action	int
=	O
action	int
;	O
acl	struct
->	O
netlist	pointer
=	O
head	pointer
;	O
acl	struct
->	O
re	struct
=	O
re	struct
;	O
if	O
(	O
!	O
acl_tail	pointer
)	O
acl_head	pointer
=	O
acl	struct
;	O
else	O
acl_tail	pointer
->	O
next	pointer
=	O
acl	struct
;	O
acl_tail	pointer
=	O
acl	struct
;	O
}	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
static	O
acl_t	struct
*	O
open_users_acl	function
(	O
char	O
*	O
name	pointer
)	O
{	O
char	O
*	O
filename	pointer
;	O
struct	O
passwd	struct
*	O
pw	pointer
;	O
acl_t	struct
*	O
mark	pointer
;	O
pw	pointer
=	O
getpwnam	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
pw	pointer
)	O
return	O
NULL	O
;	O
filename	pointer
=	O
malloc	function
(	O
strlen	function
(	O
pw	pointer
->	O
pw_dir	pointer
)	O
+	O
sizeof	O
(	O
USER_ACL_NAME	pointer
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
filename	pointer
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"out of memory"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
sprintf	function
(	O
filename	pointer
,	O
"%s/%s"	pointer
,	O
pw	pointer
->	O
pw_dir	pointer
,	O
USER_ACL_NAME	pointer
)	O
;	O
mark	pointer
=	O
acl_tail	pointer
;	O
read_acl	function
(	O
filename	pointer
)	O
;	O
free	function
(	O
filename	pointer
)	O
;	O
return	O
mark	pointer
;	O
}	O
static	O
void	O
netdef_free	function
(	O
netdef_t	struct
*	O
netdef	struct
)	O
{	O
netdef_t	struct
*	O
next	pointer
;	O
while	O
(	O
netdef	struct
)	O
{	O
next	pointer
=	O
netdef	struct
->	O
next	pointer
;	O
free	function
(	O
netdef	struct
)	O
;	O
netdef	struct
=	O
next	pointer
;	O
}	O
}	O
static	O
void	O
acl_free	function
(	O
acl_t	struct
*	O
acl	struct
)	O
{	O
acl_t	struct
*	O
next	pointer
;	O
while	O
(	O
acl	struct
)	O
{	O
next	pointer
=	O
acl	struct
->	O
next	pointer
;	O
regfree	function
(	O
&	O
acl	struct
->	O
re	struct
)	O
;	O
netdef_free	function
(	O
acl	struct
->	O
netlist	pointer
)	O
;	O
free	function
(	O
acl	struct
)	O
;	O
acl	struct
=	O
next	pointer
;	O
}	O
}	O
static	O
void	O
discard_acl	function
(	O
acl_t	struct
*	O
mark	pointer
)	O
{	O
if	O
(	O
mark	pointer
)	O
{	O
acl_free	function
(	O
mark	pointer
->	O
next	pointer
)	O
;	O
acl_tail	pointer
=	O
mark	pointer
;	O
acl_tail	pointer
->	O
next	pointer
=	O
NULL	O
;	O
}	O
else	O
acl_head	pointer
=	O
acl_tail	pointer
=	O
NULL	O
;	O
}	O
int	O
acl_match	function
(	O
CTL_MSG	struct
*	O
msg	pointer
,	O
struct	O
sockaddr_in	struct
*	O
sa_in	pointer
)	O
{	O
acl_t	struct
*	O
acl	struct
,	O
*	O
mark	pointer
;	O
unsigned	O
int	O
ip	int
;	O
mark	pointer
=	O
open_users_acl	function
(	O
msg	pointer
->	O
r_name	array
)	O
;	O
ip	int
=	O
sa_in	pointer
->	O
sin_addr	struct
.	O
s_addr	int
;	O
for	O
(	O
acl	struct
=	O
acl_head	pointer
;	O
acl	struct
;	O
acl	struct
=	O
acl	struct
->	O
next	pointer
)	O
{	O
netdef_t	struct
*	O
net	pointer
;	O
for	O
(	O
net	pointer
=	O
acl	struct
->	O
netlist	pointer
;	O
net	pointer
;	O
net	pointer
=	O
net	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
net	pointer
->	O
ipaddr	int
==	O
(	O
ip	int
&	O
net	pointer
->	O
netmask	int
)	O
)	O
{	O
if	O
(	O
regexec	function
(	O
&	O
acl	struct
->	O
re	struct
,	O
msg	pointer
->	O
l_name	array
,	O
0	int
,	O
NULL	O
,	O
0	int
)	O
==	O
0	int
)	O
{	O
discard_acl	function
(	O
mark	pointer
)	O
;	O
return	O
acl	struct
->	O
action	int
;	O
}	O
}	O
}	O
}	O
discard_acl	function
(	O
mark	pointer
)	O
;	O
return	O
ACT_ALLOW	int
;	O
}	O
