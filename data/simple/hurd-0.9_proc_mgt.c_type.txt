static	O
inline	O
struct	O
ids	O
*	O
make_ids	function
(	O
const	O
uid_t	O
*	O
uids	pointer
,	O
size_t	O
nuids	int
)	O
{	O
struct	O
ids	O
*	O
i	pointer
;	O
i	pointer
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
ids	O
)	O
+	O
sizeof	O
(	O
uid_t	O
)	O
*	O
nuids	int
)	O
;	O
;	O
if	O
(	O
!	O
i	pointer
)	O
return	O
NULL	O
;	O
i	pointer
->	O
i_nuids	O
=	O
nuids	int
;	O
i	pointer
->	O
i_refcnt	O
=	O
1	int
;	O
memcpy	O
(	O
&	O
i	pointer
->	O
i_uids	O
,	O
uids	pointer
,	O
sizeof	O
(	O
uid_t	O
)	O
*	O
nuids	int
)	O
;	O
return	O
i	pointer
;	O
}	O
static	O
inline	O
void	O
ids_ref	function
(	O
struct	O
ids	O
*	O
i	pointer
)	O
{	O
i	pointer
->	O
i_refcnt	O
++	O
;	O
}	O
static	O
inline	O
void	O
ids_rele	function
(	O
struct	O
ids	O
*	O
i	pointer
)	O
{	O
i	pointer
->	O
i_refcnt	O
--	O
;	O
if	O
(	O
i	pointer
->	O
i_refcnt	O
==	O
0	int
)	O
free	function
(	O
i	pointer
)	O
;	O
}	O
int	O
check_uid	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
uid_t	O
uid	int
)	O
{	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
p	pointer
->	O
p_id	O
->	O
i_nuids	O
;	O
i	pointer
++	O
)	O
if	O
(	O
p	pointer
->	O
p_id	O
->	O
i_uids	O
[	O
i	pointer
]	O
==	O
uid	int
||	O
p	pointer
->	O
p_id	O
->	O
i_uids	O
[	O
i	pointer
]	O
==	O
0	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_reauthenticate	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
mach_port_t	O
rendport	int
)	O
{	O
error_t	O
err	O
;	O
uid_t	O
gubuf	O
[	O
50	int
]	O
,	O
aubuf	O
[	O
50	int
]	O
,	O
ggbuf	O
[	O
50	int
]	O
,	O
agbuf	O
[	O
50	int
]	O
;	O
uid_t	O
*	O
gen_uids	O
,	O
*	O
aux_uids	O
,	O
*	O
gen_gids	O
,	O
*	O
aux_gids	O
;	O
size_t	O
ngen_uids	O
,	O
naux_uids	O
,	O
ngen_gids	O
,	O
naux_gids	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
gen_uids	O
=	O
gubuf	O
;	O
aux_uids	O
=	O
aubuf	O
;	O
gen_gids	O
=	O
ggbuf	O
;	O
aux_gids	O
=	O
agbuf	O
;	O
ngen_uids	O
=	O
sizeof	O
(	O
gubuf	O
)	O
/	O
sizeof	O
(	O
uid_t	O
)	O
;	O
naux_uids	O
=	O
sizeof	O
(	O
aubuf	O
)	O
/	O
sizeof	O
(	O
uid_t	O
)	O
;	O
ngen_gids	O
=	O
sizeof	O
(	O
ggbuf	O
)	O
/	O
sizeof	O
(	O
uid_t	O
)	O
;	O
naux_gids	O
=	O
sizeof	O
(	O
agbuf	O
)	O
/	O
sizeof	O
(	O
uid_t	O
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
do	O
err	O
=	O
auth_server_authenticate	function
(	O
authserver	O
,	O
rendport	int
,	O
MACH_MSG_TYPE_COPY_SEND	O
,	O
MACH_PORT_NULL	O
,	O
MACH_MSG_TYPE_COPY_SEND	O
,	O
&	O
gen_uids	O
,	O
&	O
ngen_uids	O
,	O
&	O
aux_uids	O
,	O
&	O
naux_uids	O
,	O
&	O
gen_gids	O
,	O
&	O
ngen_gids	O
,	O
&	O
aux_gids	O
,	O
&	O
naux_gids	O
)	O
;	O
while	O
(	O
err	O
==	O
EINTR	O
)	O
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
if	O
(	O
p	pointer
->	O
p_dead	O
)	O
err	O
=	O
EAGAIN	O
;	O
else	O
{	O
ids_rele	function
(	O
p	pointer
->	O
p_id	O
)	O
;	O
p	pointer
->	O
p_id	O
=	O
make_ids	function
(	O
gen_uids	O
,	O
ngen_uids	O
)	O
;	O
if	O
(	O
!	O
p	pointer
->	O
p_id	O
)	O
err	O
=	O
ENOMEM	O
;	O
}	O
if	O
(	O
gen_uids	O
!=	O
gubuf	O
)	O
munmap	function
(	O
gen_uids	O
,	O
ngen_uids	O
*	O
sizeof	O
(	O
uid_t	O
)	O
)	O
;	O
if	O
(	O
aux_uids	O
!=	O
aubuf	O
)	O
munmap	function
(	O
aux_uids	O
,	O
naux_uids	O
*	O
sizeof	O
(	O
uid_t	O
)	O
)	O
;	O
if	O
(	O
gen_gids	O
!=	O
ggbuf	O
)	O
munmap	function
(	O
gen_gids	O
,	O
ngen_gids	O
*	O
sizeof	O
(	O
uid_t	O
)	O
)	O
;	O
if	O
(	O
aux_gids	O
!=	O
agbuf	O
)	O
munmap	function
(	O
aux_gids	O
,	O
naux_gids	O
*	O
sizeof	O
(	O
uid_t	O
)	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
rendport	int
)	O
;	O
return	O
err	O
;	O
}	O
kern_return_t	O
S_proc_child	function
(	O
struct	O
proc	O
*	O
parentp	pointer
,	O
task_t	O
childt	int
)	O
{	O
struct	O
proc	O
*	O
childp	pointer
;	O
if	O
(	O
!	O
parentp	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
childp	pointer
=	O
task_find	function
(	O
childt	int
)	O
;	O
if	O
(	O
!	O
childp	pointer
)	O
return	O
ESRCH	O
;	O
if	O
(	O
childp	pointer
->	O
p_parentset	O
)	O
return	O
EBUSY	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
childt	int
)	O
;	O
if	O
(	O
!	O
--	O
childp	pointer
->	O
p_login	O
->	O
l_refcnt	O
)	O
free	function
(	O
childp	pointer
->	O
p_login	O
)	O
;	O
childp	pointer
->	O
p_login	O
=	O
parentp	pointer
->	O
p_login	O
;	O
childp	pointer
->	O
p_login	O
->	O
l_refcnt	O
++	O
;	O
childp	pointer
->	O
p_owner	O
=	O
parentp	pointer
->	O
p_owner	O
;	O
childp	pointer
->	O
p_noowner	O
=	O
parentp	pointer
->	O
p_noowner	O
;	O
ids_rele	function
(	O
childp	pointer
->	O
p_id	O
)	O
;	O
ids_ref	function
(	O
parentp	pointer
->	O
p_id	O
)	O
;	O
childp	pointer
->	O
p_id	O
=	O
parentp	pointer
->	O
p_id	O
;	O
assert	function
(	O
childp	pointer
->	O
p_parent	O
==	O
init_proc	O
)	O
;	O
if	O
(	O
childp	pointer
->	O
p_sib	O
)	O
childp	pointer
->	O
p_sib	O
->	O
p_prevsib	O
=	O
childp	pointer
->	O
p_prevsib	O
;	O
*	O
childp	pointer
->	O
p_prevsib	O
=	O
childp	pointer
->	O
p_sib	O
;	O
childp	pointer
->	O
p_parent	O
=	O
parentp	pointer
;	O
childp	pointer
->	O
p_sib	O
=	O
parentp	pointer
->	O
p_ochild	O
;	O
childp	pointer
->	O
p_prevsib	O
=	O
&	O
parentp	pointer
->	O
p_ochild	O
;	O
if	O
(	O
parentp	pointer
->	O
p_ochild	O
)	O
parentp	pointer
->	O
p_ochild	O
->	O
p_prevsib	O
=	O
&	O
childp	pointer
->	O
p_sib	O
;	O
parentp	pointer
->	O
p_ochild	O
=	O
childp	pointer
;	O
if	O
(	O
childp	pointer
->	O
p_pgrp	O
!=	O
parentp	pointer
->	O
p_pgrp	O
)	O
{	O
leave_pgrp	function
(	O
childp	pointer
)	O
;	O
childp	pointer
->	O
p_pgrp	O
=	O
parentp	pointer
->	O
p_pgrp	O
;	O
join_pgrp	function
(	O
childp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
childp	pointer
->	O
p_msgport	O
!=	O
MACH_PORT_NULL	O
)	O
nowait_msg_proc_newids	function
(	O
childp	pointer
->	O
p_msgport	O
,	O
childp	pointer
->	O
p_task	O
,	O
childp	pointer
->	O
p_parent	O
->	O
p_pid	O
,	O
childp	pointer
->	O
p_pgrp	O
->	O
pg_pgid	O
,	O
!	O
childp	pointer
->	O
p_pgrp	O
->	O
pg_orphcnt	O
)	O
;	O
childp	pointer
->	O
p_parentset	O
=	O
1	int
;	O
if	O
(	O
!	O
childp	pointer
->	O
start_code	int
&&	O
!	O
childp	pointer
->	O
end_code	int
)	O
{	O
childp	pointer
->	O
start_code	int
=	O
parentp	pointer
->	O
start_code	int
;	O
childp	pointer
->	O
end_code	int
=	O
parentp	pointer
->	O
end_code	int
;	O
}	O
if	O
(	O
MACH_PORT_VALID	function
(	O
parentp	pointer
->	O
p_task_namespace	O
)	O
)	O
{	O
mach_port_mod_refs	function
(	O
mach_task_self	function
(	O
)	O
,	O
parentp	pointer
->	O
p_task_namespace	O
,	O
MACH_PORT_RIGHT_SEND	O
,	O
+	O
1	int
)	O
;	O
childp	pointer
->	O
p_task_namespace	O
=	O
parentp	pointer
->	O
p_task_namespace	O
;	O
}	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_reassign	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
task_t	O
newt	int
)	O
{	O
struct	O
proc	O
*	O
stubp	pointer
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
stubp	pointer
=	O
task_find	function
(	O
newt	int
)	O
;	O
if	O
(	O
!	O
stubp	pointer
)	O
return	O
ESRCH	O
;	O
if	O
(	O
stubp	pointer
==	O
p	pointer
)	O
return	O
EINVAL	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
newt	int
)	O
;	O
remove_proc_from_hash	function
(	O
p	pointer
)	O
;	O
task_terminate	function
(	O
p	pointer
->	O
p_task	O
)	O
;	O
mach_port_destroy	function
(	O
mach_task_self	function
(	O
)	O
,	O
p	pointer
->	O
p_task	O
)	O
;	O
p	pointer
->	O
p_task	O
=	O
stubp	pointer
->	O
p_task	O
;	O
ports_transfer_right	function
(	O
p	pointer
,	O
stubp	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
p_msgport	O
!=	O
MACH_PORT_NULL	O
)	O
{	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
p	pointer
->	O
p_msgport	O
)	O
;	O
p	pointer
->	O
p_msgport	O
=	O
MACH_PORT_NULL	O
;	O
p	pointer
->	O
p_deadmsg	O
=	O
1	int
;	O
}	O
p	pointer
->	O
p_argv	O
=	O
stubp	pointer
->	O
p_argv	O
;	O
p	pointer
->	O
p_envp	O
=	O
stubp	pointer
->	O
p_envp	O
;	O
stubp	pointer
->	O
p_task	O
=	O
MACH_PORT_NULL	O
;	O
process_has_exited	function
(	O
stubp	pointer
)	O
;	O
stubp	pointer
->	O
p_waited	O
=	O
1	int
;	O
complete_exit	function
(	O
stubp	pointer
)	O
;	O
add_proc_to_hash	function
(	O
p	pointer
)	O
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_setowner	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
uid_t	O
owner	int
,	O
int	O
clear	int
)	O
{	O
if	O
(	O
!	O
p	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
if	O
(	O
clear	int
)	O
p	pointer
->	O
p_noowner	O
=	O
1	int
;	O
else	O
{	O
if	O
(	O
!	O
check_uid	function
(	O
p	pointer
,	O
owner	int
)	O
)	O
return	O
EPERM	O
;	O
p	pointer
->	O
p_owner	O
=	O
owner	int
;	O
p	pointer
->	O
p_noowner	O
=	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_getpids	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
pid_t	O
*	O
pid	pointer
,	O
pid_t	O
*	O
ppid	pointer
,	O
int	O
*	O
orphaned	pointer
)	O
{	O
if	O
(	O
!	O
p	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
*	O
pid	pointer
=	O
p	pointer
->	O
p_pid	O
;	O
*	O
ppid	pointer
=	O
p	pointer
->	O
p_parent	O
->	O
p_pid	O
;	O
*	O
orphaned	pointer
=	O
!	O
p	pointer
->	O
p_pgrp	O
->	O
pg_orphcnt	O
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_set_arg_locations	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
vm_address_t	O
argv	int
,	O
vm_address_t	O
envp	int
)	O
{	O
if	O
(	O
!	O
p	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
p	pointer
->	O
p_argv	O
=	O
argv	int
;	O
p	pointer
->	O
p_envp	O
=	O
envp	int
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_get_arg_locations	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
vm_address_t	O
*	O
argv	int
,	O
vm_address_t	O
*	O
envp	int
)	O
{	O
*	O
argv	int
=	O
p	pointer
->	O
p_argv	O
;	O
*	O
envp	int
=	O
p	pointer
->	O
p_envp	O
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_dostop	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
thread_t	O
contthread	int
)	O
{	O
thread_t	O
threadbuf	O
[	O
2	int
]	O
,	O
*	O
threads	O
=	O
threadbuf	O
;	O
size_t	O
nthreads	O
=	O
sizeof	O
(	O
threadbuf	O
)	O
/	O
sizeof	O
(	O
thread_t	O
)	O
;	O
int	O
i	pointer
;	O
error_t	O
err	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
err	O
=	O
task_suspend	function
(	O
p	pointer
->	O
p_task	O
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
err	O
=	O
task_threads	function
(	O
p	pointer
->	O
p_task	O
,	O
&	O
threads	O
,	O
&	O
nthreads	O
)	O
;	O
if	O
(	O
err	O
)	O
{	O
task_resume	function
(	O
p	pointer
->	O
p_task	O
)	O
;	O
return	O
err	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
nthreads	O
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
threads	O
[	O
i	pointer
]	O
!=	O
contthread	int
)	O
thread_suspend	function
(	O
threads	O
[	O
i	pointer
]	O
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
threads	O
[	O
i	pointer
]	O
)	O
;	O
}	O
if	O
(	O
threads	O
!=	O
threadbuf	O
)	O
munmap	function
(	O
threads	O
,	O
nthreads	O
*	O
sizeof	O
(	O
thread_t	O
)	O
)	O
;	O
err	O
=	O
task_resume	function
(	O
p	pointer
->	O
p_task	O
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
contthread	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
exc_clean	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
exc	O
*	O
e	pointer
=	O
arg	pointer
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
e	pointer
->	O
forwardport	int
)	O
;	O
}	O
kern_return_t	O
S_proc_handle_exceptions	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
mach_port_t	O
msgport	int
,	O
mach_port_t	O
forwardport	int
,	O
int	O
flavor	int
,	O
thread_state_t	O
new_state	int
,	O
mach_msg_type_number_t	O
statecnt	int
)	O
{	O
struct	O
exc	O
*	O
e	pointer
;	O
error_t	O
err	O
;	O
err	O
=	O
ports_import_port	function
(	O
exc_class	O
,	O
proc_bucket	O
,	O
msgport	int
,	O
(	O
sizeof	O
(	O
struct	O
exc	O
)	O
+	O
(	O
statecnt	int
*	O
sizeof	O
(	O
natural_t	O
)	O
)	O
)	O
,	O
&	O
e	pointer
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
e	pointer
->	O
forwardport	int
=	O
forwardport	int
;	O
e	pointer
->	O
flavor	int
=	O
flavor	int
;	O
e	pointer
->	O
statecnt	int
=	O
statecnt	int
;	O
memcpy	O
(	O
e	pointer
->	O
thread_state	O
,	O
new_state	int
,	O
statecnt	int
*	O
sizeof	O
(	O
natural_t	O
)	O
)	O
;	O
ports_port_deref	function
(	O
e	pointer
)	O
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_exception_raise	function
(	O
struct	O
exc	O
*	O
e	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
mach_port_t	O
thread	int
,	O
mach_port_t	O
task	int
,	O
integer_t	O
exception	int
,	O
integer_t	O
code	int
,	O
integer_t	O
subcode	int
)	O
{	O
error_t	O
err	O
;	O
struct	O
proc	O
*	O
p	pointer
;	O
if	O
(	O
!	O
e	pointer
||	O
e	pointer
->	O
pi	O
.	O
bucket	O
!=	O
proc_bucket	O
||	O
e	pointer
->	O
pi	O
.	O
class	O
!=	O
exc_class	O
)	O
return	O
EOPNOTSUPP	O
;	O
p	pointer
=	O
task_find	function
(	O
task	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
return	O
EINVAL	O
;	O
}	O
err	O
=	O
proc_exception_raise	function
(	O
e	pointer
->	O
forwardport	int
,	O
reply	int
,	O
reply_type	int
,	O
MACH_SEND_NOTIFY	O
,	O
thread	int
,	O
task	int
,	O
exception	int
,	O
code	int
,	O
subcode	int
)	O
;	O
switch	O
(	O
err	O
)	O
{	O
struct	O
hurd_signal_detail	O
hsd	struct
;	O
int	O
signo	int
;	O
case	O
0	int
:	O
err	O
=	O
thread_set_state	function
(	O
thread	int
,	O
e	pointer
->	O
flavor	int
,	O
e	pointer
->	O
thread_state	O
,	O
e	pointer
->	O
statecnt	int
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
thread	int
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
task	int
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
return	O
MIG_NO_REPLY	O
;	O
default	O
:	O
case	O
MACH_SEND_NOTIFY_IN_PROGRESS	O
:	O
hsd	struct
.	O
exc	O
=	O
exception	int
;	O
hsd	struct
.	O
exc_code	O
=	O
code	int
;	O
hsd	struct
.	O
exc_subcode	O
=	O
subcode	int
;	O
_hurd_exception2signal	function
(	O
&	O
hsd	struct
,	O
&	O
signo	int
)	O
;	O
p	pointer
->	O
p_exiting	O
=	O
1	int
;	O
p	pointer
->	O
p_status	O
=	O
W_EXITCODE	function
(	O
0	int
,	O
signo	int
)	O
;	O
p	pointer
->	O
p_sigcode	O
=	O
hsd	struct
.	O
code	int
;	O
task_terminate	function
(	O
task	int
)	O
;	O
mach_port_destroy	function
(	O
mach_task_self	function
(	O
)	O
,	O
thread	int
)	O
;	O
return	O
MIG_NO_REPLY	O
;	O
}	O
}	O
static	O
void	O
count_up	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
void	O
*	O
counter	pointer
)	O
{	O
++	O
*	O
(	O
int	O
*	O
)	O
counter	pointer
;	O
}	O
static	O
void	O
store_pid	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
void	O
*	O
loc	pointer
)	O
{	O
*	O
(	O
*	O
(	O
pid_t	O
*	O
*	O
)	O
loc	pointer
)	O
++	O
=	O
p	pointer
->	O
p_pid	O
;	O
}	O
kern_return_t	O
S_proc_getallpids	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
pid_t	O
*	O
*	O
pids	pointer
,	O
size_t	O
*	O
pidslen	pointer
)	O
{	O
int	O
nprocs	int
;	O
pid_t	O
*	O
loc	pointer
;	O
add_tasks	function
(	O
0	int
)	O
;	O
nprocs	int
=	O
0	int
;	O
prociterate	function
(	O
count_up	function
,	O
&	O
nprocs	int
)	O
;	O
if	O
(	O
nprocs	int
>	O
*	O
pidslen	pointer
)	O
{	O
*	O
pids	pointer
=	O
mmap	function
(	O
0	int
,	O
nprocs	int
*	O
sizeof	O
(	O
pid_t	O
)	O
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
*	O
pids	pointer
==	O
MAP_FAILED	O
)	O
return	O
ENOMEM	O
;	O
}	O
loc	pointer
=	O
*	O
pids	pointer
;	O
prociterate	function
(	O
store_pid	function
,	O
&	O
loc	pointer
)	O
;	O
*	O
pidslen	pointer
=	O
nprocs	int
;	O
return	O
0	int
;	O
}	O
struct	O
proc	O
*	O
allocate_proc	function
(	O
task_t	O
task	int
)	O
{	O
error_t	O
err	O
;	O
struct	O
proc	O
*	O
p	pointer
;	O
err	O
=	O
ports_create_port	function
(	O
proc_class	O
,	O
proc_bucket	O
,	O
sizeof	O
(	O
struct	O
proc	O
)	O
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
err	O
)	O
return	O
NULL	O
;	O
memset	O
(	O
&	O
p	pointer
->	O
p_pi	O
+	O
1	int
,	O
0	int
,	O
sizeof	O
*	O
p	pointer
-	O
sizeof	O
p	pointer
->	O
p_pi	O
)	O
;	O
p	pointer
->	O
p_task	O
=	O
task	int
;	O
p	pointer
->	O
p_task_namespace	O
=	O
MACH_PORT_NULL	O
;	O
p	pointer
->	O
p_msgport	O
=	O
MACH_PORT_NULL	O
;	O
pthread_cond_init	function
(	O
&	O
p	pointer
->	O
p_wakeup	O
,	O
NULL	O
)	O
;	O
return	O
p	pointer
;	O
}	O
struct	O
proc	O
*	O
create_init_proc	function
(	O
void	O
)	O
{	O
static	O
const	O
uid_t	O
zero	int
;	O
struct	O
proc	O
*	O
p	pointer
;	O
const	O
char	O
*	O
rootsname	pointer
=	O
"root"	pointer
;	O
p	pointer
=	O
allocate_proc	function
(	O
MACH_PORT_NULL	O
)	O
;	O
assert	function
(	O
p	pointer
)	O
;	O
p	pointer
->	O
p_pid	O
=	O
HURD_PID_INIT	O
;	O
p	pointer
->	O
p_parent	O
=	O
p	pointer
;	O
p	pointer
->	O
p_sib	O
=	O
0	int
;	O
p	pointer
->	O
p_prevsib	O
=	O
&	O
p	pointer
->	O
p_ochild	O
;	O
p	pointer
->	O
p_ochild	O
=	O
p	pointer
;	O
p	pointer
->	O
p_parentset	O
=	O
1	int
;	O
p	pointer
->	O
p_deadmsg	O
=	O
1	int
;	O
p	pointer
->	O
p_important	O
=	O
1	int
;	O
p	pointer
->	O
p_noowner	O
=	O
0	int
;	O
p	pointer
->	O
p_id	O
=	O
make_ids	function
(	O
&	O
zero	int
,	O
1	int
)	O
;	O
assert	function
(	O
p	pointer
->	O
p_id	O
)	O
;	O
p	pointer
->	O
p_loginleader	O
=	O
1	int
;	O
p	pointer
->	O
p_login	O
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
login	O
)	O
+	O
strlen	O
(	O
rootsname	pointer
)	O
+	O
1	int
)	O
;	O
assert	function
(	O
p	pointer
->	O
p_login	O
)	O
;	O
p	pointer
->	O
p_login	O
->	O
l_refcnt	O
=	O
1	int
;	O
strcpy	O
(	O
p	pointer
->	O
p_login	O
->	O
l_name	O
,	O
rootsname	pointer
)	O
;	O
boot_setsid	function
(	O
p	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
void	O
proc_death_notify	function
(	O
struct	O
proc	O
*	O
p	pointer
)	O
{	O
error_t	O
err	O
;	O
mach_port_t	O
old	O
;	O
err	O
=	O
mach_port_request_notification	function
(	O
mach_task_self	function
(	O
)	O
,	O
p	pointer
->	O
p_task	O
,	O
MACH_NOTIFY_DEAD_NAME	O
,	O
1	int
,	O
p	pointer
->	O
p_pi	O
.	O
port_right	O
,	O
MACH_MSG_TYPE_MAKE_SEND_ONCE	O
,	O
&	O
old	O
)	O
;	O
assert_perror	function
(	O
err	O
)	O
;	O
if	O
(	O
old	O
!=	O
MACH_PORT_NULL	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
old	O
)	O
;	O
}	O
void	O
complete_proc	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
pid_t	O
pid	pointer
)	O
{	O
static	O
struct	O
login	O
*	O
nulllogin	pointer
;	O
static	O
struct	O
ids	O
nullids	struct
=	O
{	O
i_refcnt	O
:	O
1	int
,	O
i_nuids	O
:	O
0	int
}	O
;	O
const	O
char	O
nullsname	array
[	O
]	O
=	O
"<none>"	pointer
;	O
if	O
(	O
!	O
nulllogin	pointer
)	O
{	O
nulllogin	pointer
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
login	O
)	O
+	O
sizeof	O
(	O
nullsname	array
)	O
+	O
1	int
)	O
;	O
nulllogin	pointer
->	O
l_refcnt	O
=	O
1	int
;	O
strcpy	O
(	O
nulllogin	pointer
->	O
l_name	O
,	O
nullsname	array
)	O
;	O
}	O
p	pointer
->	O
p_pid	O
=	O
pid	pointer
;	O
if	O
(	O
pid	pointer
==	O
HURD_PID_STARTUP	O
)	O
{	O
static	O
const	O
uid_t	O
zero	int
;	O
p	pointer
->	O
p_id	O
=	O
make_ids	function
(	O
&	O
zero	int
,	O
1	int
)	O
;	O
assert	function
(	O
p	pointer
->	O
p_id	O
)	O
;	O
}	O
else	O
{	O
ids_ref	function
(	O
&	O
nullids	struct
)	O
;	O
p	pointer
->	O
p_id	O
=	O
&	O
nullids	struct
;	O
}	O
p	pointer
->	O
p_login	O
=	O
nulllogin	pointer
;	O
p	pointer
->	O
p_login	O
->	O
l_refcnt	O
++	O
;	O
p	pointer
->	O
p_parent	O
=	O
init_proc	O
;	O
p	pointer
->	O
p_sib	O
=	O
init_proc	O
->	O
p_ochild	O
;	O
p	pointer
->	O
p_prevsib	O
=	O
&	O
init_proc	O
->	O
p_ochild	O
;	O
if	O
(	O
p	pointer
->	O
p_sib	O
)	O
p	pointer
->	O
p_sib	O
->	O
p_prevsib	O
=	O
&	O
p	pointer
->	O
p_sib	O
;	O
init_proc	O
->	O
p_ochild	O
=	O
p	pointer
;	O
p	pointer
->	O
p_loginleader	O
=	O
0	int
;	O
p	pointer
->	O
p_ochild	O
=	O
0	int
;	O
p	pointer
->	O
p_parentset	O
=	O
0	int
;	O
p	pointer
->	O
p_noowner	O
=	O
1	int
;	O
p	pointer
->	O
p_pgrp	O
=	O
init_proc	O
->	O
p_pgrp	O
;	O
if	O
(	O
pid	pointer
!=	O
HURD_PID_STARTUP	O
)	O
{	O
proc_death_notify	function
(	O
p	pointer
)	O
;	O
add_proc_to_hash	function
(	O
p	pointer
)	O
;	O
}	O
join_pgrp	function
(	O
p	pointer
)	O
;	O
}	O
static	O
struct	O
proc	O
*	O
new_proc	function
(	O
task_t	O
task	int
)	O
{	O
struct	O
proc	O
*	O
p	pointer
;	O
p	pointer
=	O
allocate_proc	function
(	O
task	int
)	O
;	O
if	O
(	O
p	pointer
)	O
complete_proc	function
(	O
p	pointer
,	O
genpid	function
(	O
)	O
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
void	O
namespace_terminate	function
(	O
struct	O
proc	O
*	O
p	pointer
,	O
void	O
*	O
cookie	pointer
)	O
{	O
mach_port_t	O
*	O
namespacep	O
=	O
cookie	pointer
;	O
if	O
(	O
p	pointer
->	O
p_task_namespace	O
==	O
*	O
namespacep	O
)	O
task_terminate	function
(	O
p	pointer
->	O
p_task	O
)	O
;	O
}	O
void	O
process_has_exited	function
(	O
struct	O
proc	O
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
p_dead	O
)	O
return	O
;	O
p	pointer
->	O
p_waited	O
=	O
0	int
;	O
if	O
(	O
p	pointer
->	O
p_task	O
!=	O
MACH_PORT_NULL	O
)	O
alert_parent	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
p_msgport	O
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
p	pointer
->	O
p_msgport	O
)	O
;	O
p	pointer
->	O
p_msgport	O
=	O
MACH_PORT_NULL	O
;	O
prociterate	function
(	O
(	O
void	O
(	O
*	O
)	O
(	O
struct	O
proc	O
*	O
,	O
void	O
*	O
)	O
)	O
check_message_dying	O
,	O
p	pointer
)	O
;	O
ports_destroy_right	function
(	O
p	pointer
)	O
;	O
if	O
(	O
!	O
--	O
p	pointer
->	O
p_login	O
->	O
l_refcnt	O
)	O
free	function
(	O
p	pointer
->	O
p_login	O
)	O
;	O
ids_rele	function
(	O
p	pointer
->	O
p_id	O
)	O
;	O
if	O
(	O
p	pointer
->	O
p_ochild	O
)	O
{	O
struct	O
proc	O
*	O
reparent_to	pointer
=	O
init_proc	O
;	O
struct	O
proc	O
*	O
tp	pointer
;	O
int	O
isdead	int
=	O
0	int
;	O
if	O
(	O
MACH_PORT_VALID	function
(	O
p	pointer
->	O
p_task_namespace	O
)	O
)	O
{	O
for	O
(	O
tp	pointer
=	O
p	pointer
;	O
MACH_PORT_VALID	function
(	O
tp	pointer
->	O
p_parent	O
->	O
p_task_namespace	O
)	O
;	O
tp	pointer
=	O
tp	pointer
->	O
p_parent	O
)	O
{	O
}	O
if	O
(	O
p	pointer
==	O
tp	pointer
)	O
{	O
prociterate	function
(	O
namespace_terminate	function
,	O
&	O
p	pointer
->	O
p_task_namespace	O
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
p	pointer
->	O
p_task_namespace	O
)	O
;	O
p	pointer
->	O
p_task_namespace	O
=	O
MACH_PORT_NULL	O
;	O
}	O
else	O
reparent_to	pointer
=	O
tp	pointer
;	O
}	O
for	O
(	O
tp	pointer
=	O
p	pointer
->	O
p_ochild	O
;	O
tp	pointer
->	O
p_sib	O
;	O
tp	pointer
=	O
tp	pointer
->	O
p_sib	O
)	O
{	O
if	O
(	O
tp	pointer
->	O
p_msgport	O
!=	O
MACH_PORT_NULL	O
)	O
nowait_msg_proc_newids	function
(	O
tp	pointer
->	O
p_msgport	O
,	O
tp	pointer
->	O
p_task	O
,	O
1	int
,	O
tp	pointer
->	O
p_pgrp	O
->	O
pg_pgid	O
,	O
!	O
tp	pointer
->	O
p_pgrp	O
->	O
pg_orphcnt	O
)	O
;	O
tp	pointer
->	O
p_parent	O
=	O
reparent_to	pointer
;	O
if	O
(	O
tp	pointer
->	O
p_dead	O
)	O
isdead	int
=	O
1	int
;	O
}	O
if	O
(	O
tp	pointer
->	O
p_msgport	O
!=	O
MACH_PORT_NULL	O
)	O
nowait_msg_proc_newids	function
(	O
tp	pointer
->	O
p_msgport	O
,	O
tp	pointer
->	O
p_task	O
,	O
1	int
,	O
tp	pointer
->	O
p_pgrp	O
->	O
pg_pgid	O
,	O
!	O
tp	pointer
->	O
p_pgrp	O
->	O
pg_orphcnt	O
)	O
;	O
tp	pointer
->	O
p_parent	O
=	O
reparent_to	pointer
;	O
tp	pointer
->	O
p_sib	O
=	O
reparent_to	pointer
->	O
p_ochild	O
;	O
if	O
(	O
tp	pointer
->	O
p_sib	O
)	O
tp	pointer
->	O
p_sib	O
->	O
p_prevsib	O
=	O
&	O
tp	pointer
->	O
p_sib	O
;	O
reparent_to	pointer
->	O
p_ochild	O
=	O
p	pointer
->	O
p_ochild	O
;	O
p	pointer
->	O
p_ochild	O
->	O
p_prevsib	O
=	O
&	O
reparent_to	pointer
->	O
p_ochild	O
;	O
if	O
(	O
isdead	int
)	O
alert_parent	function
(	O
reparent_to	pointer
)	O
;	O
}	O
if	O
(	O
p	pointer
->	O
p_waiting	O
||	O
p	pointer
->	O
p_msgportwait	O
)	O
pthread_cond_broadcast	function
(	O
&	O
p	pointer
->	O
p_wakeup	O
)	O
;	O
p	pointer
->	O
p_dead	O
=	O
1	int
;	O
ports_interrupt_rpcs	function
(	O
p	pointer
)	O
;	O
if	O
(	O
MACH_PORT_VALID	function
(	O
p	pointer
->	O
p_task_namespace	O
)	O
)	O
{	O
mach_port_t	O
task	int
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
p	pointer
->	O
p_task_namespace	O
)	O
;	O
p	pointer
->	O
p_waited	O
=	O
1	int
;	O
task	int
=	O
p	pointer
->	O
p_task	O
;	O
p	pointer
->	O
p_task	O
=	O
MACH_PORT_NULL	O
;	O
complete_exit	function
(	O
p	pointer
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
task	int
)	O
;	O
}	O
}	O
void	O
complete_exit	function
(	O
struct	O
proc	O
*	O
p	pointer
)	O
{	O
assert	function
(	O
p	pointer
->	O
p_dead	O
)	O
;	O
assert	function
(	O
p	pointer
->	O
p_waited	O
)	O
;	O
remove_proc_from_hash	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
p_task	O
!=	O
MACH_PORT_NULL	O
)	O
mach_port_destroy	function
(	O
mach_task_self	function
(	O
)	O
,	O
p	pointer
->	O
p_task	O
)	O
;	O
if	O
(	O
p	pointer
->	O
p_sib	O
)	O
p	pointer
->	O
p_sib	O
->	O
p_prevsib	O
=	O
p	pointer
->	O
p_prevsib	O
;	O
*	O
p	pointer
->	O
p_prevsib	O
=	O
p	pointer
->	O
p_sib	O
;	O
leave_pgrp	function
(	O
p	pointer
)	O
;	O
ports_port_deref	function
(	O
p	pointer
)	O
;	O
}	O
struct	O
proc	O
*	O
add_tasks	function
(	O
task_t	O
task	int
)	O
{	O
mach_port_t	O
*	O
psets	O
;	O
size_t	O
npsets	O
;	O
int	O
i	pointer
;	O
struct	O
proc	O
*	O
foundp	pointer
=	O
0	int
;	O
host_processor_sets	function
(	O
mach_host_self	function
(	O
)	O
,	O
&	O
psets	O
,	O
&	O
npsets	O
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
npsets	O
;	O
i	pointer
++	O
)	O
{	O
mach_port_t	O
psetpriv	O
;	O
mach_port_t	O
*	O
tasks	O
;	O
size_t	O
ntasks	O
;	O
int	O
j	int
;	O
if	O
(	O
!	O
foundp	pointer
)	O
{	O
host_processor_set_priv	function
(	O
_hurd_host_priv	O
,	O
psets	O
[	O
i	pointer
]	O
,	O
&	O
psetpriv	O
)	O
;	O
processor_set_tasks	function
(	O
psetpriv	O
,	O
&	O
tasks	O
,	O
&	O
ntasks	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
ntasks	O
;	O
j	int
++	O
)	O
{	O
int	O
set	int
=	O
0	int
;	O
if	O
(	O
!	O
MACH_PORT_VALID	function
(	O
tasks	O
[	O
j	int
]	O
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
foundp	pointer
)	O
{	O
struct	O
proc	O
*	O
p	pointer
=	O
task_find_nocreate	function
(	O
tasks	O
[	O
j	int
]	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
p	pointer
=	O
new_proc	function
(	O
tasks	O
[	O
j	int
]	O
)	O
;	O
set	int
=	O
1	int
;	O
}	O
if	O
(	O
!	O
foundp	pointer
&&	O
tasks	O
[	O
j	int
]	O
==	O
task	int
)	O
foundp	pointer
=	O
p	pointer
;	O
}	O
if	O
(	O
!	O
set	int
)	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
tasks	O
[	O
j	int
]	O
)	O
;	O
}	O
munmap	function
(	O
tasks	O
,	O
ntasks	O
*	O
sizeof	O
(	O
task_t	O
)	O
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
psetpriv	O
)	O
;	O
}	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
psets	O
[	O
i	pointer
]	O
)	O
;	O
}	O
munmap	function
(	O
psets	O
,	O
npsets	O
*	O
sizeof	O
(	O
mach_port_t	O
)	O
)	O
;	O
return	O
foundp	pointer
;	O
}	O
int	O
genpid	function
(	O
)	O
{	O
static	O
int	O
nextpid	int
=	O
1	int
;	O
static	O
int	O
wrap	int
=	O
WRAP_AROUND	int
;	O
while	O
(	O
nextpid	int
<	O
wrap	int
&&	O
!	O
pidfree	function
(	O
nextpid	int
)	O
)	O
++	O
nextpid	int
;	O
if	O
(	O
nextpid	int
>=	O
wrap	int
)	O
{	O
nextpid	int
=	O
START_OVER	int
;	O
while	O
(	O
!	O
pidfree	function
(	O
nextpid	int
)	O
)	O
nextpid	int
++	O
;	O
while	O
(	O
nextpid	int
>	O
wrap	int
)	O
wrap	int
*=	O
2	int
;	O
}	O
return	O
nextpid	int
++	O
;	O
}	O
error_t	O
S_proc_set_init_task	function
(	O
struct	O
proc	O
*	O
callerp	pointer
,	O
task_t	O
task	int
)	O
{	O
if	O
(	O
!	O
callerp	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
if	O
(	O
callerp	pointer
!=	O
startup_proc	O
)	O
return	O
EPERM	O
;	O
init_proc	O
->	O
p_task	O
=	O
task	int
;	O
proc_death_notify	function
(	O
init_proc	O
)	O
;	O
add_proc_to_hash	function
(	O
init_proc	O
)	O
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_mark_important	function
(	O
struct	O
proc	O
*	O
p	pointer
)	O
{	O
if	O
(	O
!	O
p	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
if	O
(	O
!	O
check_uid	function
(	O
p	pointer
,	O
0	int
)	O
&&	O
p	pointer
->	O
p_parent	O
!=	O
startup_proc	O
)	O
return	O
EPERM	O
;	O
p	pointer
->	O
p_important	O
=	O
1	int
;	O
return	O
0	int
;	O
}	O
error_t	O
S_proc_is_important	function
(	O
struct	O
proc	O
*	O
callerp	pointer
,	O
boolean_t	O
*	O
essential	pointer
)	O
{	O
if	O
(	O
!	O
callerp	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
*	O
essential	pointer
=	O
callerp	pointer
->	O
p_important	O
;	O
return	O
0	int
;	O
}	O
error_t	O
S_proc_set_code	function
(	O
struct	O
proc	O
*	O
callerp	pointer
,	O
vm_address_t	O
start_code	int
,	O
vm_address_t	O
end_code	int
)	O
{	O
if	O
(	O
!	O
callerp	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
callerp	pointer
->	O
start_code	int
=	O
start_code	int
;	O
callerp	pointer
->	O
end_code	int
=	O
end_code	int
;	O
return	O
0	int
;	O
}	O
error_t	O
S_proc_get_code	function
(	O
struct	O
proc	O
*	O
callerp	pointer
,	O
vm_address_t	O
*	O
start_code	int
,	O
vm_address_t	O
*	O
end_code	int
)	O
{	O
if	O
(	O
!	O
callerp	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
*	O
start_code	int
=	O
callerp	pointer
->	O
start_code	int
;	O
*	O
end_code	int
=	O
callerp	pointer
->	O
end_code	int
;	O
return	O
0	int
;	O
}	O
error_t	O
S_mach_notify_new_task	function
(	O
struct	O
port_info	O
*	O
notify	pointer
,	O
mach_port_t	O
task	int
,	O
mach_port_t	O
parent	int
)	O
{	O
struct	O
proc	O
*	O
parentp	pointer
,	O
*	O
childp	pointer
;	O
if	O
(	O
!	O
notify	pointer
||	O
notify	pointer
->	O
class	O
!=	O
generic_port_class	O
)	O
return	O
EOPNOTSUPP	O
;	O
parentp	pointer
=	O
task_find_nocreate	function
(	O
parent	int
)	O
;	O
if	O
(	O
!	O
parentp	pointer
)	O
{	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
task	int
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
parent	int
)	O
;	O
return	O
ESRCH	O
;	O
}	O
childp	pointer
=	O
task_find_nocreate	function
(	O
task	int
)	O
;	O
if	O
(	O
!	O
childp	pointer
)	O
{	O
mach_port_mod_refs	function
(	O
mach_task_self	function
(	O
)	O
,	O
task	int
,	O
MACH_PORT_RIGHT_SEND	O
,	O
+	O
1	int
)	O
;	O
childp	pointer
=	O
new_proc	function
(	O
task	int
)	O
;	O
}	O
if	O
(	O
MACH_PORT_VALID	function
(	O
parentp	pointer
->	O
p_task_namespace	O
)	O
)	O
{	O
error_t	O
err	O
;	O
mach_port_mod_refs	function
(	O
mach_task_self	function
(	O
)	O
,	O
task	int
,	O
MACH_PORT_RIGHT_SEND	O
,	O
+	O
1	int
)	O
;	O
err	O
=	O
S_proc_child	function
(	O
parentp	pointer
,	O
task	int
)	O
;	O
assert_perror	function
(	O
err	O
)	O
;	O
return	O
mach_notify_new_task	function
(	O
childp	pointer
->	O
p_task_namespace	O
,	O
task	int
,	O
parent	int
)	O
;	O
}	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
task	int
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
parent	int
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
S_proc_make_task_namespace	function
(	O
struct	O
proc	O
*	O
callerp	pointer
,	O
mach_port_t	O
notify	pointer
)	O
{	O
if	O
(	O
!	O
callerp	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
if	O
(	O
!	O
MACH_PORT_VALID	function
(	O
notify	pointer
)	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
MACH_PORT_VALID	function
(	O
callerp	pointer
->	O
p_task_namespace	O
)	O
)	O
{	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
notify	pointer
)	O
;	O
return	O
EBUSY	O
;	O
}	O
callerp	pointer
->	O
p_task_namespace	O
=	O
notify	pointer
;	O
return	O
0	int
;	O
}	O
