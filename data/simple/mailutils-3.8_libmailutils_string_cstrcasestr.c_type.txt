char	O
*	O
mu_c_strcasestr	function
(	O
const	O
char	O
*	O
a_haystack	pointer
,	O
const	O
char	O
*	O
a_needle	pointer
)	O
{	O
register	O
const	O
unsigned	O
char	O
*	O
haystack	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
a_haystack	pointer
,	O
*	O
needle	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
a_needle	pointer
;	O
register	O
unsigned	O
int	O
b	int
,	O
c	int
;	O
if	O
(	O
(	O
b	int
=	O
U	O
(	O
*	O
needle	pointer
)	O
)	O
)	O
{	O
haystack	pointer
--	O
;	O
do	O
{	O
if	O
(	O
!	O
(	O
c	int
=	O
*	O
++	O
haystack	pointer
)	O
)	O
goto	O
ret0	O
;	O
}	O
while	O
(	O
U	O
(	O
c	int
)	O
!=	O
b	int
)	O
;	O
if	O
(	O
!	O
(	O
c	int
=	O
*	O
++	O
needle	pointer
)	O
)	O
goto	O
foundneedle	O
;	O
c	int
=	O
U	O
(	O
c	int
)	O
;	O
++	O
needle	pointer
;	O
goto	O
jin	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
register	O
unsigned	O
int	O
a	int
;	O
register	O
const	O
unsigned	O
char	O
*	O
rhaystack	pointer
,	O
*	O
rneedle	pointer
;	O
do	O
{	O
if	O
(	O
!	O
(	O
a	int
=	O
*	O
++	O
haystack	pointer
)	O
)	O
goto	O
ret0	O
;	O
if	O
(	O
U	O
(	O
a	int
)	O
==	O
b	int
)	O
break	O
;	O
if	O
(	O
!	O
(	O
a	int
=	O
*	O
++	O
haystack	pointer
)	O
)	O
goto	O
ret0	O
;	O
shloop	O
:	O
;	O
}	O
while	O
(	O
U	O
(	O
a	int
)	O
!=	O
b	int
)	O
;	O
jin	O
:	O
if	O
(	O
!	O
(	O
a	int
=	O
*	O
++	O
haystack	pointer
)	O
)	O
goto	O
ret0	O
;	O
if	O
(	O
U	O
(	O
a	int
)	O
!=	O
c	int
)	O
goto	O
shloop	O
;	O
if	O
(	O
U	O
(	O
*	O
(	O
rhaystack	pointer
=	O
haystack	pointer
--	O
+	O
1	int
)	O
)	O
==	O
(	O
a	int
=	O
U	O
(	O
*	O
(	O
rneedle	pointer
=	O
needle	pointer
)	O
)	O
)	O
)	O
do	O
{	O
if	O
(	O
!	O
a	int
)	O
goto	O
foundneedle	O
;	O
if	O
(	O
U	O
(	O
*	O
++	O
rhaystack	pointer
)	O
!=	O
(	O
a	int
=	O
U	O
(	O
*	O
++	O
needle	pointer
)	O
)	O
)	O
break	O
;	O
if	O
(	O
!	O
a	int
)	O
goto	O
foundneedle	O
;	O
}	O
while	O
(	O
U	O
(	O
*	O
++	O
rhaystack	pointer
)	O
==	O
(	O
a	int
=	O
U	O
(	O
*	O
++	O
needle	pointer
)	O
)	O
)	O
;	O
needle	pointer
=	O
rneedle	pointer
;	O
if	O
(	O
!	O
a	int
)	O
break	O
;	O
}	O
}	O
foundneedle	O
:	O
return	O
(	O
char	O
*	O
)	O
haystack	pointer
;	O
ret0	O
:	O
return	O
NULL	O
;	O
}	O
