gsl_dht	struct
*	O
gsl_dht_alloc	function
(	O
size_t	long
size	long
)	O
{	O
gsl_dht	struct
*	O
t	pointer
;	O
if	O
(	O
size	long
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"size == 0"	pointer
,	O
GSL_EDOM	int
,	O
0	int
)	O
;	O
}	O
t	pointer
=	O
(	O
gsl_dht	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
gsl_dht	struct
)	O
)	O
;	O
if	O
(	O
t	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"out of memory"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
t	pointer
->	O
size	long
=	O
size	long
;	O
t	pointer
->	O
xmax	double
=	O
-	O
1.0	int
;	O
t	pointer
->	O
nu	double
=	O
-	O
1.0	int
;	O
t	pointer
->	O
j	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
(	O
size	long
+	O
2	int
)	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
t	pointer
->	O
j	pointer
==	O
0	int
)	O
{	O
free	function
(	O
t	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"could not allocate memory for j"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
t	pointer
->	O
Jjj	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
size	long
*	O
(	O
size	long
+	O
1	int
)	O
/	O
2	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
t	pointer
->	O
Jjj	pointer
==	O
0	int
)	O
{	O
free	function
(	O
t	pointer
->	O
j	pointer
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"could not allocate memory for Jjj"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
t	pointer
->	O
J2	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
(	O
size	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
t	pointer
->	O
J2	pointer
==	O
0	int
)	O
{	O
free	function
(	O
t	pointer
->	O
Jjj	pointer
)	O
;	O
free	function
(	O
t	pointer
->	O
j	pointer
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"could not allocate memory for J2"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
return	O
t	pointer
;	O
}	O
static	O
int	O
dht_bessel_zeros	function
(	O
gsl_dht	struct
*	O
t	pointer
)	O
{	O
unsigned	O
int	O
s	int
;	O
gsl_sf_result	struct
z	double
;	O
int	O
stat_z	int
=	O
0	int
;	O
t	pointer
->	O
j	pointer
[	O
0	int
]	O
=	O
0.0	int
;	O
for	O
(	O
s	int
=	O
1	int
;	O
s	int
<	O
t	pointer
->	O
size	long
+	O
2	int
;	O
s	int
++	O
)	O
{	O
stat_z	int
+=	O
gsl_sf_bessel_zero_Jnu_e	function
(	O
t	pointer
->	O
nu	double
,	O
s	int
,	O
&	O
z	double
)	O
;	O
t	pointer
->	O
j	pointer
[	O
s	int
]	O
=	O
z	double
.	O
val	double
;	O
}	O
if	O
(	O
stat_z	int
!=	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"could not compute bessel zeroes"	pointer
,	O
GSL_EFAILED	int
)	O
;	O
}	O
else	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
gsl_dht	struct
*	O
gsl_dht_new	function
(	O
size_t	long
size	long
,	O
double	O
nu	double
,	O
double	O
xmax	double
)	O
{	O
int	O
status	int
;	O
gsl_dht	struct
*	O
dht	pointer
=	O
gsl_dht_alloc	function
(	O
size	long
)	O
;	O
if	O
(	O
dht	pointer
==	O
0	int
)	O
return	O
0	int
;	O
status	int
=	O
gsl_dht_init	function
(	O
dht	pointer
,	O
nu	double
,	O
xmax	double
)	O
;	O
if	O
(	O
status	int
)	O
return	O
0	int
;	O
return	O
dht	pointer
;	O
}	O
int	O
gsl_dht_init	function
(	O
gsl_dht	struct
*	O
t	pointer
,	O
double	O
nu	double
,	O
double	O
xmax	double
)	O
{	O
if	O
(	O
xmax	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"xmax is not positive"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
nu	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"nu is negative"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
size_t	long
n	int
,	O
m	long
;	O
int	O
stat_bz	int
=	O
GSL_SUCCESS	int
;	O
int	O
stat_J	int
=	O
0	int
;	O
double	O
jN	double
;	O
if	O
(	O
nu	double
!=	O
t	pointer
->	O
nu	double
)	O
{	O
t	pointer
->	O
nu	double
=	O
nu	double
;	O
stat_bz	int
=	O
dht_bessel_zeros	function
(	O
t	pointer
)	O
;	O
}	O
jN	double
=	O
t	pointer
->	O
j	pointer
[	O
t	pointer
->	O
size	long
+	O
1	int
]	O
;	O
t	pointer
->	O
xmax	double
=	O
xmax	double
;	O
t	pointer
->	O
kmax	double
=	O
jN	double
/	O
xmax	double
;	O
t	pointer
->	O
J2	pointer
[	O
0	int
]	O
=	O
0.0	int
;	O
for	O
(	O
m	long
=	O
1	int
;	O
m	long
<	O
t	pointer
->	O
size	long
+	O
1	int
;	O
m	long
++	O
)	O
{	O
gsl_sf_result	struct
J	struct
;	O
stat_J	int
+=	O
gsl_sf_bessel_Jnu_e	function
(	O
nu	double
+	O
1.0	int
,	O
t	pointer
->	O
j	pointer
[	O
m	long
]	O
,	O
&	O
J	struct
)	O
;	O
t	pointer
->	O
J2	pointer
[	O
m	long
]	O
=	O
J	struct
.	O
val	double
*	O
J	struct
.	O
val	double
;	O
}	O
for	O
(	O
n	int
=	O
1	int
;	O
n	int
<	O
t	pointer
->	O
size	long
+	O
1	int
;	O
n	int
++	O
)	O
{	O
for	O
(	O
m	long
=	O
1	int
;	O
m	long
<=	O
n	int
;	O
m	long
++	O
)	O
{	O
double	O
arg	double
=	O
t	pointer
->	O
j	pointer
[	O
n	int
]	O
*	O
t	pointer
->	O
j	pointer
[	O
m	long
]	O
/	O
jN	double
;	O
gsl_sf_result	struct
J	struct
;	O
stat_J	int
+=	O
gsl_sf_bessel_Jnu_e	function
(	O
nu	double
,	O
arg	double
,	O
&	O
J	struct
)	O
;	O
t	pointer
->	O
Jjj	pointer
[	O
n	int
*	O
(	O
n	int
-	O
1	int
)	O
/	O
2	int
+	O
m	long
-	O
1	int
]	O
=	O
J	struct
.	O
val	double
;	O
}	O
}	O
if	O
(	O
stat_J	int
!=	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"error computing bessel function"	pointer
,	O
GSL_EFAILED	int
)	O
;	O
}	O
else	O
{	O
return	O
stat_bz	int
;	O
}	O
}	O
}	O
double	O
gsl_dht_x_sample	function
(	O
const	O
gsl_dht	struct
*	O
t	pointer
,	O
int	O
n	int
)	O
{	O
return	O
t	pointer
->	O
j	pointer
[	O
n	int
+	O
1	int
]	O
/	O
t	pointer
->	O
j	pointer
[	O
t	pointer
->	O
size	long
+	O
1	int
]	O
*	O
t	pointer
->	O
xmax	double
;	O
}	O
double	O
gsl_dht_k_sample	function
(	O
const	O
gsl_dht	struct
*	O
t	pointer
,	O
int	O
n	int
)	O
{	O
return	O
t	pointer
->	O
j	pointer
[	O
n	int
+	O
1	int
]	O
/	O
t	pointer
->	O
xmax	double
;	O
}	O
void	O
gsl_dht_free	function
(	O
gsl_dht	struct
*	O
t	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
t	pointer
)	O
;	O
free	function
(	O
t	pointer
->	O
J2	pointer
)	O
;	O
free	function
(	O
t	pointer
->	O
Jjj	pointer
)	O
;	O
free	function
(	O
t	pointer
->	O
j	pointer
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
}	O
int	O
gsl_dht_apply	function
(	O
const	O
gsl_dht	struct
*	O
t	pointer
,	O
double	O
*	O
f_in	pointer
,	O
double	O
*	O
f_out	pointer
)	O
{	O
const	O
double	O
jN	double
=	O
t	pointer
->	O
j	pointer
[	O
t	pointer
->	O
size	long
+	O
1	int
]	O
;	O
const	O
double	O
r	pointer
=	O
t	pointer
->	O
xmax	double
/	O
jN	double
;	O
size_t	long
m	long
;	O
size_t	long
i	long
;	O
for	O
(	O
m	long
=	O
0	int
;	O
m	long
<	O
t	pointer
->	O
size	long
;	O
m	long
++	O
)	O
{	O
double	O
sum	double
=	O
0.0	int
;	O
double	O
Y	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
t	pointer
->	O
size	long
;	O
i	long
++	O
)	O
{	O
size_t	long
m_local	long
;	O
size_t	long
n_local	long
;	O
if	O
(	O
i	long
<	O
m	long
)	O
{	O
m_local	long
=	O
i	long
;	O
n_local	long
=	O
m	long
;	O
}	O
else	O
{	O
m_local	long
=	O
m	long
;	O
n_local	long
=	O
i	long
;	O
}	O
Y	double
=	O
t	pointer
->	O
Jjj	pointer
[	O
n_local	long
*	O
(	O
n_local	long
+	O
1	int
)	O
/	O
2	int
+	O
m_local	long
]	O
/	O
t	pointer
->	O
J2	pointer
[	O
i	long
+	O
1	int
]	O
;	O
sum	double
+=	O
Y	double
*	O
f_in	pointer
[	O
i	long
]	O
;	O
}	O
f_out	pointer
[	O
m	long
]	O
=	O
sum	double
*	O
2.0	int
*	O
r	pointer
*	O
r	pointer
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
