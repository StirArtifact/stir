static	O
int	O
pty_read_blocked	int
=	O
0	int
;	O
static	O
pthread_cond_t	O
pty_read_wakeup	int
=	O
PTHREAD_COND_INITIALIZER	O
;	O
static	O
pthread_cond_t	O
pty_select_wakeup	int
=	O
PTHREAD_COND_INITIALIZER	O
;	O
static	O
int	O
dtr_on	int
=	O
0	int
;	O
static	O
int	O
packet_mode	int
=	O
0	int
;	O
static	O
int	O
user_ioctl_mode	int
=	O
0	int
;	O
static	O
char	O
control_byte	char
=	O
0	int
;	O
static	O
int	O
output_stopped	int
=	O
0	int
;	O
static	O
int	O
pktnostop	int
=	O
0	int
;	O
static	O
int	O
ptyopen	int
=	O
0	int
;	O
static	O
int	O
nptyperopens	int
=	O
0	int
;	O
static	O
error_t	O
ptyio_init	function
(	O
void	O
)	O
{	O
pty_select_alert	O
=	O
&	O
pty_select_wakeup	int
;	O
return	O
0	int
;	O
}	O
error_t	O
pty_open_hook	function
(	O
struct	O
trivfs_control	O
*	O
cntl	pointer
,	O
struct	O
iouser	O
*	O
user	pointer
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
(	O
flags	int
&	O
(	O
O_READ	O
|	O
O_WRITE	O
)	O
)	O
==	O
0	int
)	O
return	O
0	int
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
ptyopen	int
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
EBUSY	O
;	O
}	O
ptyopen	int
=	O
1	int
;	O
external_processing	O
=	O
0	int
;	O
packet_mode	int
=	O
0	int
;	O
user_ioctl_mode	int
=	O
0	int
;	O
control_byte	char
=	O
0	int
;	O
pktnostop	int
=	O
0	int
;	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
pty_po_create_hook	function
(	O
struct	O
trivfs_peropen	O
*	O
po	pointer
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
po	pointer
->	O
openmodes	O
&	O
(	O
O_READ	O
|	O
O_WRITE	O
)	O
)	O
{	O
nptyperopens	int
++	O
;	O
report_carrier_on	function
(	O
)	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
pty_po_destroy_hook	function
(	O
struct	O
trivfs_peropen	O
*	O
po	pointer
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
(	O
po	pointer
->	O
openmodes	O
&	O
(	O
O_READ	O
|	O
O_WRITE	O
)	O
)	O
==	O
0	int
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
nptyperopens	int
--	O
;	O
if	O
(	O
!	O
nptyperopens	int
)	O
{	O
ptyopen	int
=	O
0	int
;	O
report_carrier_off	function
(	O
)	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
inline	O
void	O
wake_reader	function
(	O
)	O
{	O
if	O
(	O
pty_read_blocked	int
)	O
{	O
pty_read_blocked	int
=	O
0	int
;	O
pthread_cond_broadcast	function
(	O
&	O
pty_read_wakeup	int
)	O
;	O
pthread_cond_broadcast	function
(	O
&	O
pty_select_wakeup	int
)	O
;	O
}	O
}	O
static	O
error_t	O
ptyio_start_output	function
(	O
)	O
{	O
if	O
(	O
packet_mode	int
&&	O
output_stopped	int
&&	O
(	O
!	O
(	O
termflags	O
&	O
USER_OUTPUT_SUSP	O
)	O
)	O
)	O
{	O
control_byte	char
&=	O
~	O
TIOCPKT_STOP	int
;	O
control_byte	char
|=	O
TIOCPKT_START	int
;	O
output_stopped	int
=	O
0	int
;	O
}	O
wake_reader	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
error_t	O
ptyio_abandon_physical_output	function
(	O
)	O
{	O
if	O
(	O
packet_mode	int
)	O
{	O
control_byte	char
|=	O
TIOCPKT_FLUSHWRITE	int
;	O
wake_reader	function
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
error_t	O
ptyio_suspend_physical_output	function
(	O
)	O
{	O
if	O
(	O
packet_mode	int
)	O
{	O
control_byte	char
&=	O
~	O
TIOCPKT_START	int
;	O
control_byte	char
|=	O
TIOCPKT_STOP	int
;	O
output_stopped	int
=	O
1	int
;	O
wake_reader	function
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
ptyio_pending_output_size	function
(	O
)	O
{	O
return	O
0	int
;	O
}	O
static	O
error_t	O
ptyio_notice_input_flushed	function
(	O
)	O
{	O
if	O
(	O
packet_mode	int
)	O
{	O
control_byte	char
|=	O
TIOCPKT_FLUSHREAD	int
;	O
wake_reader	function
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
error_t	O
ptyio_assert_dtr	function
(	O
)	O
{	O
dtr_on	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
error_t	O
ptyio_desert_dtr	function
(	O
)	O
{	O
dtr_on	int
=	O
0	int
;	O
wake_reader	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
error_t	O
ptyio_set_bits	function
(	O
struct	O
termios	O
*	O
state	pointer
)	O
{	O
if	O
(	O
packet_mode	int
)	O
{	O
int	O
wakeup	int
=	O
0	int
;	O
int	O
stop	int
=	O
(	O
(	O
state	pointer
->	O
c_iflag	short
&	O
IXON	O
)	O
&&	O
CCEQ	function
(	O
state	pointer
->	O
c_cc	array
[	O
VSTOP	O
]	O
,	O
CHAR_DC3	O
)	O
&&	O
CCEQ	function
(	O
state	pointer
->	O
c_cc	array
[	O
VSTART	O
]	O
,	O
CHAR_DC1	O
)	O
)	O
;	O
if	O
(	O
external_processing	O
)	O
{	O
control_byte	char
|=	O
TIOCPKT_IOCTL	int
;	O
wakeup	int
=	O
1	int
;	O
}	O
if	O
(	O
pktnostop	int
&&	O
stop	int
)	O
{	O
pktnostop	int
=	O
0	int
;	O
control_byte	char
|=	O
TIOCPKT_DOSTOP	int
;	O
control_byte	char
&=	O
~	O
TIOCPKT_NOSTOP	int
;	O
wakeup	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
pktnostop	int
&&	O
!	O
stop	int
)	O
{	O
pktnostop	int
=	O
1	int
;	O
control_byte	char
|=	O
TIOCPKT_NOSTOP	int
;	O
control_byte	char
&=	O
~	O
TIOCPKT_DOSTOP	int
;	O
wakeup	int
=	O
1	int
;	O
}	O
if	O
(	O
wakeup	int
)	O
wake_reader	function
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
error_t	O
ptyio_set_break	function
(	O
)	O
{	O
return	O
0	int
;	O
}	O
static	O
error_t	O
ptyio_clear_break	function
(	O
)	O
{	O
return	O
0	int
;	O
}	O
static	O
error_t	O
ptyio_mdmctl	function
(	O
int	O
a	int
,	O
int	O
b	int
)	O
{	O
return	O
0	int
;	O
}	O
static	O
error_t	O
ptyio_mdmstate	function
(	O
int	O
*	O
state	pointer
)	O
{	O
*	O
state	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
const	O
struct	O
bottomhalf	O
ptyio_bottom	struct
=	O
{	O
TERM_ON_MASTERPTY	O
,	O
ptyio_init	function
,	O
NULL	O
,	O
NULL	O
,	O
ptyio_start_output	function
,	O
ptyio_set_break	function
,	O
ptyio_clear_break	function
,	O
ptyio_abandon_physical_output	function
,	O
ptyio_suspend_physical_output	function
,	O
ptyio_pending_output_size	function
,	O
ptyio_notice_input_flushed	function
,	O
ptyio_assert_dtr	function
,	O
ptyio_desert_dtr	function
,	O
ptyio_set_bits	function
,	O
ptyio_mdmctl	function
,	O
ptyio_mdmstate	function
,	O
}	O
;	O
error_t	O
pty_io_read	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
char	O
*	O
*	O
data	pointer
,	O
mach_msg_type_number_t	O
*	O
datalen	pointer
,	O
mach_msg_type_number_t	O
amount	int
)	O
{	O
int	O
size	int
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
(	O
cred	pointer
->	O
po	pointer
->	O
openmodes	O
&	O
O_READ	O
)	O
==	O
0	int
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
EBADF	O
;	O
}	O
while	O
(	O
!	O
control_byte	char
&&	O
(	O
termflags	O
&	O
TTY_OPEN	O
)	O
&&	O
(	O
!	O
qsize	function
(	O
outputq	O
)	O
||	O
(	O
termflags	O
&	O
USER_OUTPUT_SUSP	O
)	O
)	O
)	O
{	O
if	O
(	O
cred	pointer
->	O
po	pointer
->	O
openmodes	O
&	O
O_NONBLOCK	int
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
EWOULDBLOCK	O
;	O
}	O
pty_read_blocked	int
=	O
1	int
;	O
if	O
(	O
pthread_hurd_cond_wait_np	function
(	O
&	O
pty_read_wakeup	int
,	O
&	O
global_lock	O
)	O
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
EINTR	O
;	O
}	O
}	O
if	O
(	O
!	O
(	O
termflags	O
&	O
TTY_OPEN	O
)	O
&&	O
!	O
qsize	function
(	O
outputq	O
)	O
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
EIO	O
;	O
}	O
if	O
(	O
control_byte	char
)	O
{	O
size	int
=	O
1	int
;	O
if	O
(	O
packet_mode	int
&&	O
(	O
control_byte	char
&	O
TIOCPKT_IOCTL	int
)	O
)	O
size	int
+=	O
sizeof	O
(	O
struct	O
termios	O
)	O
;	O
}	O
else	O
{	O
size	int
=	O
qsize	function
(	O
outputq	O
)	O
;	O
if	O
(	O
packet_mode	int
||	O
user_ioctl_mode	int
)	O
size	int
++	O
;	O
}	O
if	O
(	O
size	int
>	O
amount	int
)	O
size	int
=	O
amount	int
;	O
if	O
(	O
size	int
>	O
*	O
datalen	pointer
)	O
*	O
data	pointer
=	O
mmap	function
(	O
0	int
,	O
size	int
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
*	O
datalen	pointer
=	O
size	int
;	O
if	O
(	O
control_byte	char
)	O
{	O
*	O
*	O
data	pointer
=	O
control_byte	char
;	O
if	O
(	O
packet_mode	int
&&	O
(	O
control_byte	char
&	O
TIOCPKT_IOCTL	int
)	O
)	O
memcpy	function
(	O
*	O
data	pointer
+	O
1	int
,	O
&	O
termstate	O
,	O
size	int
-	O
1	int
)	O
;	O
control_byte	char
=	O
0	int
;	O
}	O
else	O
{	O
char	O
*	O
cp	pointer
=	O
*	O
data	pointer
;	O
if	O
(	O
packet_mode	int
||	O
user_ioctl_mode	int
)	O
{	O
*	O
cp	pointer
++	O
=	O
TIOCPKT_DATA	int
;	O
--	O
size	int
;	O
}	O
while	O
(	O
size	int
--	O
)	O
*	O
cp	pointer
++	O
=	O
dequeue	function
(	O
outputq	O
)	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
pty_io_write	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
char	O
*	O
data	pointer
,	O
mach_msg_type_number_t	O
datalen	pointer
,	O
mach_msg_type_number_t	O
*	O
amount	int
)	O
{	O
int	O
i	int
,	O
flush	int
;	O
int	O
cancel	int
=	O
0	int
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
(	O
cred	pointer
->	O
po	pointer
->	O
openmodes	O
&	O
O_WRITE	O
)	O
==	O
0	int
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
EBADF	O
;	O
}	O
if	O
(	O
remote_input_mode	O
)	O
{	O
while	O
(	O
qsize	function
(	O
inputq	O
)	O
&&	O
!	O
cancel	int
)	O
{	O
if	O
(	O
cred	pointer
->	O
po	pointer
->	O
openmodes	O
&	O
O_NONBLOCK	int
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
EWOULDBLOCK	O
;	O
}	O
cancel	int
=	O
pthread_hurd_cond_wait_np	function
(	O
inputq	O
->	O
wait	O
,	O
&	O
global_lock	O
)	O
;	O
}	O
if	O
(	O
cancel	int
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
EINTR	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
datalen	pointer
;	O
i	int
++	O
)	O
enqueue	function
(	O
&	O
inputq	O
,	O
data	pointer
[	O
i	int
]	O
)	O
;	O
enqueue	function
(	O
&	O
inputq	O
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
termstate	O
.	O
c_cflag	short
&	O
CREAD	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
datalen	pointer
;	O
i	int
++	O
)	O
{	O
flush	int
=	O
input_character	function
(	O
data	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
flush	int
)	O
{	O
if	O
(	O
packet_mode	int
)	O
{	O
control_byte	char
|=	O
TIOCPKT_FLUSHREAD	int
;	O
wake_reader	function
(	O
)	O
;	O
}	O
break	O
;	O
}	O
}	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
*	O
amount	int
=	O
datalen	pointer
;	O
return	O
0	int
;	O
}	O
error_t	O
pty_io_readable	function
(	O
size_t	long
*	O
amt	pointer
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
control_byte	char
)	O
{	O
*	O
amt	pointer
=	O
1	int
;	O
if	O
(	O
packet_mode	int
&&	O
(	O
control_byte	char
&	O
TIOCPKT_IOCTL	int
)	O
)	O
*	O
amt	pointer
+=	O
sizeof	O
(	O
struct	O
termios	O
)	O
;	O
}	O
else	O
*	O
amt	pointer
=	O
qsize	function
(	O
outputq	O
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
pty_io_select	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
mach_port_t	O
reply	int
,	O
struct	O
timespec	O
*	O
tsp	pointer
,	O
int	O
*	O
type	enum
)	O
{	O
int	O
avail	int
=	O
0	int
;	O
error_t	O
err	O
;	O
if	O
(	O
*	O
type	enum
==	O
0	int
)	O
return	O
0	int
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
(	O
*	O
type	enum
&	O
SELECT_READ	O
)	O
&&	O
(	O
control_byte	char
||	O
qsize	function
(	O
outputq	O
)	O
||	O
!	O
(	O
termflags	O
&	O
TTY_OPEN	O
)	O
)	O
)	O
avail	int
|=	O
SELECT_READ	O
;	O
if	O
(	O
(	O
*	O
type	enum
&	O
SELECT_URG	O
)	O
&&	O
control_byte	char
)	O
avail	int
|=	O
SELECT_URG	O
;	O
if	O
(	O
(	O
*	O
type	enum
&	O
SELECT_WRITE	O
)	O
&&	O
(	O
!	O
remote_input_mode	O
||	O
!	O
qsize	function
(	O
inputq	O
)	O
)	O
)	O
avail	int
|=	O
SELECT_WRITE	O
;	O
if	O
(	O
avail	int
)	O
{	O
*	O
type	enum
=	O
avail	int
;	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
ports_interrupt_self_on_port_death	function
(	O
cred	pointer
,	O
reply	int
)	O
;	O
pty_read_blocked	int
=	O
1	int
;	O
err	O
=	O
pthread_hurd_cond_timedwait_np	function
(	O
&	O
pty_select_wakeup	int
,	O
&	O
global_lock	O
,	O
tsp	pointer
)	O
;	O
if	O
(	O
err	O
)	O
{	O
*	O
type	enum
=	O
0	int
;	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
err	O
==	O
ETIMEDOUT	O
)	O
err	O
=	O
0	int
;	O
return	O
err	O
;	O
}	O
}	O
}	O
error_t	O
S_tioctl_tiocsig	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
int	O
sig	int
)	O
{	O
if	O
(	O
!	O
cred	pointer
||	O
cred	pointer
->	O
pi	O
.	O
bucket	O
!=	O
term_bucket	O
||	O
cred	pointer
->	O
pi	O
.	O
class	O
!=	O
pty_class	O
)	O
return	O
EOPNOTSUPP	O
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
drop_output	function
(	O
)	O
;	O
clear_queue	function
(	O
inputq	O
)	O
;	O
clear_queue	function
(	O
rawq	O
)	O
;	O
ptyio_notice_input_flushed	function
(	O
)	O
;	O
send_signal	function
(	O
sig	int
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
S_tioctl_tiocpkt	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
int	O
mode	int
)	O
{	O
error_t	O
err	O
;	O
if	O
(	O
!	O
cred	pointer
||	O
cred	pointer
->	O
pi	O
.	O
bucket	O
!=	O
term_bucket	O
||	O
cred	pointer
->	O
pi	O
.	O
class	O
!=	O
pty_class	O
)	O
return	O
EOPNOTSUPP	O
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
!	O
!	O
mode	int
==	O
!	O
!	O
packet_mode	int
)	O
err	O
=	O
0	int
;	O
else	O
if	O
(	O
mode	int
&&	O
user_ioctl_mode	int
)	O
err	O
=	O
EINVAL	O
;	O
else	O
{	O
packet_mode	int
=	O
mode	int
;	O
control_byte	char
=	O
0	int
;	O
err	O
=	O
0	int
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
err	O
;	O
}	O
error_t	O
S_tioctl_tiocucntl	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
int	O
mode	int
)	O
{	O
error_t	O
err	O
;	O
if	O
(	O
!	O
cred	pointer
||	O
cred	pointer
->	O
pi	O
.	O
bucket	O
!=	O
term_bucket	O
||	O
cred	pointer
->	O
pi	O
.	O
class	O
!=	O
pty_class	O
)	O
return	O
EOPNOTSUPP	O
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
!	O
!	O
mode	int
==	O
!	O
!	O
user_ioctl_mode	int
)	O
err	O
=	O
0	int
;	O
else	O
if	O
(	O
mode	int
&&	O
packet_mode	int
)	O
err	O
=	O
EINVAL	O
;	O
else	O
{	O
user_ioctl_mode	int
=	O
mode	int
;	O
control_byte	char
=	O
0	int
;	O
err	O
=	O
0	int
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
err	O
;	O
}	O
error_t	O
S_tioctl_tiocremote	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
int	O
how	int
)	O
{	O
if	O
(	O
!	O
cred	pointer
||	O
cred	pointer
->	O
pi	O
.	O
bucket	O
!=	O
term_bucket	O
||	O
cred	pointer
->	O
pi	O
.	O
class	O
!=	O
pty_class	O
)	O
return	O
EOPNOTSUPP	O
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
remote_input_mode	O
=	O
how	int
;	O
drop_output	function
(	O
)	O
;	O
clear_queue	function
(	O
inputq	O
)	O
;	O
clear_queue	function
(	O
rawq	O
)	O
;	O
ptyio_notice_input_flushed	function
(	O
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
S_tioctl_tiocext	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
int	O
mode	int
)	O
{	O
if	O
(	O
!	O
cred	pointer
||	O
cred	pointer
->	O
pi	O
.	O
bucket	O
!=	O
term_bucket	O
||	O
cred	pointer
->	O
pi	O
.	O
class	O
!=	O
pty_class	O
)	O
return	O
EOPNOTSUPP	O
;	O
pthread_mutex_lock	function
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
mode	int
&&	O
!	O
external_processing	O
)	O
{	O
if	O
(	O
packet_mode	int
)	O
{	O
control_byte	char
|=	O
TIOCPKT_IOCTL	int
;	O
wake_reader	function
(	O
)	O
;	O
}	O
external_processing	O
=	O
1	int
;	O
termstate	O
.	O
c_lflag	short
|=	O
EXTPROC	O
;	O
}	O
else	O
if	O
(	O
!	O
mode	int
&&	O
external_processing	O
)	O
{	O
if	O
(	O
packet_mode	int
)	O
{	O
control_byte	char
|=	O
TIOCPKT_IOCTL	int
;	O
wake_reader	function
(	O
)	O
;	O
}	O
external_processing	O
=	O
0	int
;	O
termstate	O
.	O
c_lflag	short
&=	O
~	O
EXTPROC	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
