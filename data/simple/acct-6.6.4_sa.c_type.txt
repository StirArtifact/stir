struct	O
stats	struct
{	O
unsigned	O
long	O
num_calls	long
;	O
double	O
user_time	double
;	O
double	O
sys_time	double
;	O
double	O
elapsed_time	double
;	O
double	O
mem_usage	double
;	O
double	O
disk_io	double
;	O
double	O
minor_faults	double
;	O
double	O
major_faults	double
;	O
double	O
swap_count	double
;	O
}	O
;	O
struct	O
usracct	struct
{	O
char	O
name	pointer
[	O
NAME_LEN	O
]	O
;	O
struct	O
stats	struct
s	long
;	O
}	O
;	O
char	O
*	O
program_name	pointer
;	O
int	O
debugging_enabled	int
=	O
0	int
;	O
struct	O
hashtab	struct
*	O
user_table	pointer
;	O
struct	O
user_data	struct
{	O
struct	O
stats	struct
s	long
;	O
}	O
;	O
struct	O
hashtab	struct
*	O
command_table	pointer
;	O
struct	O
command_key	struct
{	O
char	O
comm	array
[	O
COMM_LEN	O
]	O
;	O
short	O
fork_flag	short
;	O
}	O
;	O
struct	O
command_data	struct
{	O
struct	O
stats	struct
s	long
;	O
short	O
junked	short
;	O
}	O
;	O
struct	O
savacct	struct
{	O
struct	O
command_key	struct
c	struct
;	O
struct	O
stats	struct
s	long
;	O
}	O
;	O
struct	O
stats	struct
stats_totals	struct
;	O
double	O
system_page_size	double
;	O
char	O
default_acct_file	array
[	O
]	O
=	O
ACCT_FILE_LOC	pointer
;	O
char	O
default_savacct_file	array
[	O
]	O
=	O
SAVACCT_FILE_LOC	pointer
;	O
char	O
default_usracct_file	array
[	O
]	O
=	O
USRACCT_FILE_LOC	pointer
;	O
char	O
*	O
acct_file_name	pointer
=	O
default_acct_file	array
;	O
char	O
*	O
savacct_file_name	pointer
=	O
default_savacct_file	array
;	O
char	O
*	O
usracct_file_name	pointer
=	O
default_usracct_file	array
;	O
int	O
print_seconds	int
=	O
0	int
;	O
int	O
dont_read_summary_files	int
=	O
0	int
;	O
int	O
print_users	int
=	O
0	int
;	O
int	O
percentages	int
=	O
0	int
;	O
int	O
user_summary_flag	int
=	O
0	int
;	O
int	O
group_summary_flag	int
=	O
0	int
;	O
int	O
ahz	int
=	O
AHZ	int
;	O
int	O
separate_times	int
=	O
0	int
;	O
int	O
print_ksec	int
=	O
0	int
;	O
int	O
print_ratio	int
=	O
0	int
;	O
int	O
total_io	int
=	O
0	int
;	O
int	O
show_paging	int
=	O
0	int
;	O
int	O
paging_as_avg	int
=	O
0	int
;	O
enum	O
{	O
sort_num_calls	int
,	O
sort_sys_plus_user	int
,	O
sort_sys_plus_user_div_calls	int
,	O
sort_avio	int
,	O
sort_tio	int
,	O
sort_cpu_mem_average	int
,	O
sort_cpu_storage	int
,	O
sort_real_time	int
}	O
sort_type	enum
=	O
sort_sys_plus_user	int
;	O
int	O
reverse_sort	int
=	O
0	int
;	O
int	O
merge_files	int
;	O
int	O
separate_forks	int
=	O
0	int
;	O
int	O
junk_threshold	int
=	O
0	int
;	O
int	O
print_all_records	int
=	O
0	int
;	O
int	O
always_yes	int
=	O
0	int
;	O
static	O
unsigned	O
int	O
hzval	int
;	O
void	O
write_savacct_file	function
(	O
char	O
*	O
)	O
;	O
void	O
write_usracct_file	function
(	O
char	O
*	O
)	O
;	O
void	O
parse_savacct_entries	function
(	O
char	O
*	O
)	O
;	O
void	O
parse_usracct_entries	function
(	O
char	O
*	O
)	O
;	O
void	O
parse_acct_entries	function
(	O
void	O
)	O
;	O
void	O
init_flags_and_data	function
(	O
void	O
)	O
;	O
unsigned	O
long	O
hash_name	function
(	O
char	O
*	O
)	O
;	O
void	O
update_command_list	function
(	O
char	O
*	O
,	O
struct	O
stats	struct
*	O
,	O
short	O
fork_flag	short
)	O
;	O
void	O
update_user_list	function
(	O
char	O
*	O
,	O
struct	O
stats	struct
*	O
)	O
;	O
int	O
compare_sum_entry	function
(	O
struct	O
hashtab_elem	struct
*	O
*	O
,	O
struct	O
hashtab_elem	struct
*	O
*	O
)	O
;	O
int	O
compare_user_entry	function
(	O
struct	O
hashtab_elem	struct
*	O
*	O
,	O
struct	O
hashtab_elem	struct
*	O
*	O
)	O
;	O
int	O
compare_stats_entry	function
(	O
struct	O
stats	struct
*	O
,	O
struct	O
stats	struct
*	O
)	O
;	O
void	O
print_command_list	function
(	O
void	O
)	O
;	O
void	O
print_user_list	function
(	O
void	O
)	O
;	O
int	O
non_printable	function
(	O
char	O
*	O
,	O
int	O
)	O
;	O
int	O
ask_if_junkable	function
(	O
char	O
*	O
,	O
int	O
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
c	struct
;	O
hzval	int
=	O
sysconf	function
(	O
_SC_CLK_TCK	int
)	O
;	O
program_name	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
system_page_size	double
=	O
(	O
double	O
)	O
getpagesize	function
(	O
)	O
/	O
1024.0	int
;	O
memset	function
(	O
&	O
stats_totals	struct
,	O
0	int
,	O
sizeof	O
(	O
stats_totals	struct
)	O
)	O
;	O
user_table	pointer
=	O
hashtab_init	function
(	O
0	int
)	O
;	O
command_table	pointer
=	O
hashtab_init	function
(	O
sizeof	O
(	O
struct	O
command_key	struct
)	O
)	O
;	O
pacct_init	function
(	O
0	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"debug"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
1	int
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
2	int
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
3	int
}	O
,	O
{	O
"other-acct-file"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
4	int
}	O
,	O
{	O
"print-seconds"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
5	int
}	O
,	O
{	O
"dont-read-summary-files"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
6	int
}	O
,	O
{	O
"list-all-names"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
7	int
}	O
,	O
{	O
"other-savacct-file"	pointer
,	O
1	int
,	O
NULL	O
,	O
9	int
}	O
,	O
{	O
"print-users"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
12	int
}	O
,	O
{	O
"percentages"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
14	int
}	O
,	O
{	O
"not-interactive"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
19	int
}	O
,	O
{	O
"user-summary"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
20	int
}	O
,	O
{	O
"group-summary"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
30	int
}	O
,	O
{	O
"reverse-sort"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
21	int
}	O
,	O
{	O
"merge"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
22	int
}	O
,	O
{	O
"threshold"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
23	int
}	O
,	O
{	O
"separate-forks"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
24	int
}	O
,	O
{	O
"other-usracct-file"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
25	int
}	O
,	O
{	O
"separate-times"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
8	int
}	O
,	O
{	O
"sort-ksec"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
10	int
}	O
,	O
{	O
"print-ratio"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
11	int
}	O
,	O
{	O
"sort-tio"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
13	int
}	O
,	O
{	O
"sort-sys-user-div-calls"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
15	int
}	O
,	O
{	O
"sort-avio"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
16	int
}	O
,	O
{	O
"sort-cpu-avmem"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
17	int
}	O
,	O
{	O
"sort-num-calls"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
18	int
}	O
,	O
{	O
"sort-real-time"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
26	int
}	O
,	O
{	O
"ahz"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
27	int
}	O
,	O
{	O
"show-paging"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
28	int
}	O
,	O
{	O
"show-paging-avg"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
29	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
c	struct
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
"ahV"	pointer
"b"	pointer
"c"	pointer
"d"	pointer
"fi"	pointer
"l"	pointer
"j"	pointer
"k"	pointer
"mMnrs"	pointer
"t"	pointer
"uv:"	pointer
"D"	pointer
"K"	pointer
"pP"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	struct
==	O
EOF	O
)	O
break	O
;	O
switch	O
(	O
c	struct
)	O
{	O
case	O
1	int
:	O
debugging_enabled	int
=	O
1	int
;	O
break	O
;	O
case	O
'V'	O
:	O
case	O
2	int
:	O
(	O
void	O
)	O
printf	function
(	O
"%s: GNU Accounting Utilities (release %s)\n"	pointer
,	O
program_name	pointer
,	O
VERSION_STRING	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
4	int
:	O
acct_file_name	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'j'	O
:	O
case	O
5	int
:	O
print_seconds	int
=	O
1	int
;	O
break	O
;	O
case	O
'i'	O
:	O
case	O
6	int
:	O
dont_read_summary_files	int
=	O
1	int
;	O
break	O
;	O
case	O
'a'	O
:	O
case	O
7	int
:	O
print_all_records	int
=	O
1	int
;	O
break	O
;	O
case	O
'l'	O
:	O
case	O
8	int
:	O
separate_times	int
=	O
1	int
;	O
break	O
;	O
case	O
9	int
:	O
savacct_file_name	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'K'	O
:	O
case	O
10	int
:	O
sort_type	enum
=	O
sort_cpu_storage	int
;	O
print_ksec	int
=	O
1	int
;	O
break	O
;	O
case	O
't'	O
:	O
case	O
11	int
:	O
print_ratio	int
=	O
1	int
;	O
break	O
;	O
case	O
'u'	O
:	O
case	O
12	int
:	O
print_users	int
=	O
1	int
;	O
break	O
;	O
case	O
'D'	O
:	O
case	O
13	int
:	O
sort_type	enum
=	O
sort_tio	int
;	O
total_io	int
=	O
1	int
;	O
break	O
;	O
case	O
'c'	O
:	O
case	O
14	int
:	O
percentages	int
=	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
case	O
15	int
:	O
sort_type	enum
=	O
sort_sys_plus_user_div_calls	int
;	O
break	O
;	O
case	O
'd'	O
:	O
case	O
16	int
:	O
sort_type	enum
=	O
sort_avio	int
;	O
break	O
;	O
case	O
'k'	O
:	O
case	O
17	int
:	O
sort_type	enum
=	O
sort_cpu_mem_average	int
;	O
break	O
;	O
case	O
'n'	O
:	O
case	O
18	int
:	O
sort_type	enum
=	O
sort_num_calls	int
;	O
break	O
;	O
case	O
'f'	O
:	O
case	O
19	int
:	O
always_yes	int
=	O
1	int
;	O
break	O
;	O
case	O
'm'	O
:	O
case	O
20	int
:	O
user_summary_flag	int
=	O
1	int
;	O
break	O
;	O
case	O
'M'	O
:	O
case	O
30	int
:	O
user_summary_flag	int
=	O
1	int
;	O
group_summary_flag	int
=	O
1	int
;	O
break	O
;	O
case	O
'r'	O
:	O
case	O
21	int
:	O
reverse_sort	int
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
case	O
22	int
:	O
merge_files	int
=	O
1	int
;	O
break	O
;	O
case	O
'v'	O
:	O
case	O
23	int
:	O
junk_threshold	int
=	O
strtol	function
(	O
optarg	pointer
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
junk_threshold	int
<	O
1	int
)	O
{	O
(	O
void	O
)	O
printf	function
(	O
"%s: threshold must be one or greater\n"	pointer
,	O
program_name	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
break	O
;	O
case	O
24	int
:	O
separate_forks	int
=	O
1	int
;	O
break	O
;	O
case	O
25	int
:	O
usracct_file_name	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
26	int
:	O
sort_type	enum
=	O
sort_real_time	int
;	O
break	O
;	O
case	O
27	int
:	O
ahz	int
=	O
strtol	function
(	O
optarg	pointer
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
ahz	int
<	O
1	int
)	O
{	O
(	O
void	O
)	O
printf	function
(	O
"%s: AHZ must be one or greater\n"	pointer
,	O
program_name	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
break	O
;	O
case	O
'P'	O
:	O
case	O
29	int
:	O
paging_as_avg	int
=	O
1	int
;	O
case	O
'p'	O
:	O
case	O
28	int
:	O
show_paging	int
=	O
1	int
;	O
break	O
;	O
case	O
'h'	O
:	O
case	O
3	int
:	O
default	O
:	O
give_usage	function
(	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
print_users	int
&&	O
(	O
merge_files	int
||	O
user_summary_flag	int
)	O
)	O
{	O
(	O
void	O
)	O
printf	function
(	O
"%s: can't specify `--merge' or `--user-summary' or `--group-summary' with `--print-users'\n"	pointer
,	O
program_name	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
merge_files	int
&&	O
user_summary_flag	int
)	O
{	O
(	O
void	O
)	O
printf	function
(	O
"%s: can't specify `--user-summary' or `--group-summary' with `--merge'\n"	pointer
,	O
program_name	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
optind	int
==	O
(	O
argc	int
-	O
1	int
)	O
)	O
{	O
acct_file_name	pointer
=	O
argv	array
[	O
optind	int
++	O
]	O
;	O
}	O
else	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
printf	function
(	O
"%s: extra arguments "	pointer
,	O
program_name	pointer
)	O
;	O
while	O
(	O
optind	int
<	O
argc	int
)	O
{	O
printf	function
(	O
"`%s'"	pointer
,	O
argv	array
[	O
optind	int
++	O
]	O
)	O
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
printf	function
(	O
", "	pointer
)	O
;	O
}	O
printf	function
(	O
" -- aborting\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
debugging_enabled	int
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
stddebug	O
,	O
"hzval -> %d\n"	pointer
,	O
hzval	int
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
stddebug	O
,	O
"getpagesize() -> %d\n"	pointer
,	O
getpagesize	function
(	O
)	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
stddebug	O
,	O
"system_page_size == %.2f\n"	pointer
,	O
system_page_size	double
)	O
;	O
}	O
if	O
(	O
!	O
dont_read_summary_files	int
)	O
{	O
struct	O
stat	struct
st	struct
;	O
if	O
(	O
NEED_SAVACCT_INFO	O
)	O
if	O
(	O
stat	struct
(	O
savacct_file_name	pointer
,	O
&	O
st	struct
)	O
==	O
0	int
)	O
parse_savacct_entries	function
(	O
savacct_file_name	pointer
)	O
;	O
if	O
(	O
NEED_USRACCT_INFO	O
)	O
if	O
(	O
stat	struct
(	O
usracct_file_name	pointer
,	O
&	O
st	struct
)	O
==	O
0	int
)	O
parse_usracct_entries	function
(	O
usracct_file_name	pointer
)	O
;	O
}	O
add_pacct_file	function
(	O
acct_file_name	pointer
)	O
;	O
parse_acct_entries	function
(	O
)	O
;	O
if	O
(	O
print_users	int
)	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
merge_files	int
)	O
{	O
write_savacct_file	function
(	O
savacct_file_name	pointer
)	O
;	O
write_usracct_file	function
(	O
usracct_file_name	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
user_summary_flag	int
)	O
print_user_list	function
(	O
)	O
;	O
else	O
print_command_list	function
(	O
)	O
;	O
}	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
void	O
give_usage	function
(	O
void	O
)	O
{	O
(	O
void	O
)	O
printf	function
(	O
"\n                Usage: %s [ options ] [ file ]\n                \n                options: [-a"	pointer
"b"	pointer
"c"	pointer
"d"	pointer
"fi"	pointer
"l"	pointer
"j"	pointer
"k"	pointer
"mn"	pointer
"p"	pointer
"rs"	pointer
"t"	pointer
"u"	pointer
"D"	pointer
"K"	pointer
"P"	pointer
"] [-v <num>] [--version] [--help]\n                [--other-acct-file <name>] [--other-usracct-file <name>]\n                [--print-seconds] [--dont-read-summary-files] [--debug]\n                "	pointer
" [--separate-times]"	pointer
" [--other-savacct-file <name>] [--percentages]\n                "	pointer
" [--print-ratio]"	pointer
" [--print-users] [--merge] [--user-summary] [--group-summary]\n                [--list-all-names] [--not-interactive] [--threshold <num>]\n                "	pointer
" [--sort-ksec]"	pointer
" [--sort-tio]"	pointer
" [--sort-sys-user-div-calls]"	pointer
" [--sort-avio]"	pointer
"\n                "	pointer
" [--sort-cpu-avmem]"	pointer
" [--sort-num-calls]"	pointer
" [--sort-real-time]"	pointer
" [--ahz hz]\n"	pointer
"       [--show-paging] [--show-paging-avg]\n"	pointer
"\n"	pointer
,	O
program_name	pointer
)	O
;	O
print_acct_file_locations	function
(	O
)	O
;	O
}	O
static	O
void	O
add_stats	function
(	O
struct	O
stats	struct
*	O
accum	pointer
,	O
struct	O
stats	struct
*	O
s	long
)	O
{	O
ADDIT	O
(	O
user_time	double
)	O
;	O
ADDIT	O
(	O
sys_time	double
)	O
;	O
ADDIT	O
(	O
elapsed_time	double
)	O
;	O
ADDIT	O
(	O
disk_io	double
)	O
;	O
ADDIT	O
(	O
mem_usage	double
)	O
;	O
ADDIT	O
(	O
minor_faults	double
)	O
;	O
ADDIT	O
(	O
major_faults	double
)	O
;	O
ADDIT	O
(	O
swap_count	double
)	O
;	O
ADDIT	O
(	O
num_calls	long
)	O
;	O
}	O
static	O
void	O
print_stats_raw	function
(	O
struct	O
stats	struct
*	O
s	long
,	O
FILE	struct
*	O
out	pointer
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
out	pointer
,	O
"%10ld"	pointer
" %10.2fu"	pointer
" %10.2fs"	pointer
" %10.2fe"	pointer
" %10.2fio"	pointer
" %10.2fmem"	pointer
"\n"	pointer
,	O
s	long
->	O
num_calls	long
,	O
s	long
->	O
user_time	double
,	O
s	long
->	O
sys_time	double
,	O
s	long
->	O
elapsed_time	double
,	O
s	long
->	O
disk_io	double
,	O
s	long
->	O
mem_usage	double
)	O
;	O
}	O
static	O
void	O
print_stats_nicely	function
(	O
struct	O
stats	struct
*	O
s	long
)	O
{	O
if	O
(	O
debugging_enabled	int
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
stddebug	O
,	O
"raw:"	pointer
)	O
;	O
print_stats_raw	function
(	O
s	long
,	O
stddebug	O
)	O
;	O
}	O
if	O
(	O
NC	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
printf	function
(	O
"%s: ERROR -- print_stats_nicely called with num_calls == 0\n"	pointer
,	O
program_name	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
printf	function
(	O
"%8ld "	pointer
,	O
NC	O
)	O
;	O
if	O
(	O
percentages	int
)	O
printf	function
(	O
"%7.2f%% "	pointer
,	O
(	O
S_NC	O
?	O
(	O
DNC	O
/	O
S_DNC	O
)	O
*	O
100.0	int
:	O
0.0	int
)	O
)	O
;	O
printf	function
(	O
"%10.2fre "	pointer
,	O
(	O
RE	O
/	O
(	O
print_seconds	int
?	O
DNC	O
:	O
60.0	int
)	O
)	O
)	O
;	O
if	O
(	O
percentages	int
)	O
printf	function
(	O
"%7.2f%% "	pointer
,	O
(	O
S_RE	O
?	O
(	O
RE	O
/	O
S_RE	O
)	O
*	O
100.0	int
:	O
0.0	int
)	O
)	O
;	O
if	O
(	O
separate_times	int
)	O
{	O
printf	function
(	O
"%10.2fu "	pointer
,	O
(	O
U	O
/	O
(	O
print_seconds	int
?	O
DNC	O
:	O
60.0	int
)	O
)	O
)	O
;	O
if	O
(	O
percentages	int
)	O
printf	function
(	O
"%7.2f%% "	pointer
,	O
(	O
S_U	O
?	O
(	O
U	O
/	O
S_U	O
)	O
*	O
100.0	int
:	O
0.0	int
)	O
)	O
;	O
printf	function
(	O
"%10.2fs"	pointer
,	O
(	O
S	O
/	O
(	O
print_seconds	int
?	O
DNC	O
:	O
60.0	int
)	O
)	O
)	O
;	O
if	O
(	O
percentages	int
)	O
printf	function
(	O
" %7.2f%%"	pointer
,	O
(	O
S_S	O
?	O
(	O
S	O
/	O
S_S	O
)	O
*	O
100.0	int
:	O
0.0	int
)	O
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
"%10.2fcp"	pointer
,	O
(	O
CP	O
/	O
(	O
print_seconds	int
?	O
DNC	O
:	O
60.0	int
)	O
)	O
)	O
;	O
if	O
(	O
percentages	int
)	O
printf	function
(	O
" %7.2f%%"	pointer
,	O
(	O
S_CP	O
?	O
(	O
CP	O
/	O
S_CP	O
)	O
*	O
100.0	int
:	O
0.0	int
)	O
)	O
;	O
}	O
if	O
(	O
print_ratio	int
)	O
{	O
if	O
(	O
CP	O
==	O
0.0	int
)	O
(	O
void	O
)	O
fputs	function
(	O
"*ignore*"	pointer
,	O
stdout	pointer
)	O
;	O
else	O
printf	function
(	O
"%8.1f"	pointer
,	O
(	O
CP	O
?	O
RE	O
/	O
CP	O
:	O
0.0	int
)	O
)	O
;	O
(	O
void	O
)	O
fputs	function
(	O
"re/cp"	pointer
,	O
stdout	pointer
)	O
;	O
}	O
if	O
(	O
show_paging	int
==	O
0	int
)	O
{	O
if	O
(	O
total_io	int
)	O
printf	function
(	O
"%10.0ftio "	pointer
,	O
IO	O
)	O
;	O
else	O
printf	function
(	O
"%10.0favio "	pointer
,	O
IO	O
/	O
DNC	O
)	O
;	O
if	O
(	O
print_ksec	int
)	O
printf	function
(	O
"%9.0fk*sec"	pointer
,	O
(	O
CP	O
?	O
(	O
(	O
K	O
*	O
CP	O
)	O
/	O
DNC	O
)	O
:	O
K	O
)	O
)	O
;	O
else	O
printf	function
(	O
"%9.0fk"	pointer
,	O
K	O
/	O
DNC	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
paging_as_avg	int
==	O
0	int
)	O
{	O
printf	function
(	O
"%10.0fmin "	pointer
,	O
MIN	O
)	O
;	O
printf	function
(	O
"%10.0fmaj "	pointer
,	O
MAJ	O
)	O
;	O
printf	function
(	O
"%10.0fswp "	pointer
,	O
SWP	O
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
"%5.0fmin/c "	pointer
,	O
(	O
NC	O
==	O
0	int
)	O
?	O
0	int
:	O
MIN	O
/	O
NC	O
)	O
;	O
printf	function
(	O
"%5.0fmaj/c "	pointer
,	O
(	O
NC	O
==	O
0	int
)	O
?	O
0	int
:	O
MAJ	O
/	O
NC	O
)	O
;	O
printf	function
(	O
"%5.0fswp/c "	pointer
,	O
(	O
NC	O
==	O
0	int
)	O
?	O
0	int
:	O
SWP	O
/	O
NC	O
)	O
;	O
}	O
}	O
}	O
void	O
write_savacct_file	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
hashtab_order	struct
ho	pointer
;	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
FILE	struct
*	O
fp	pointer
=	O
NULL	O
;	O
char	O
*	O
s	long
=	O
(	O
char	O
*	O
)	O
alloca	O
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
strlen	function
(	O
filename	pointer
)	O
+	O
2	int
)	O
)	O
;	O
(	O
void	O
)	O
sprintf	function
(	O
s	long
,	O
"%s~"	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
(	O
fp	pointer
=	O
file_open	function
(	O
s	long
,	O
1	int
)	O
)	O
==	O
NULL	O
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
for	O
(	O
he	pointer
=	O
hashtab_first	function
(	O
command_table	pointer
,	O
&	O
ho	pointer
)	O
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
hashtab_next	function
(	O
&	O
ho	pointer
)	O
)	O
{	O
struct	O
command_key	struct
*	O
ck	pointer
=	O
hashtab_get_key	function
(	O
he	pointer
)	O
;	O
struct	O
command_data	struct
*	O
cd	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
struct	O
savacct	struct
sa	struct
;	O
memcpy	function
(	O
&	O
(	O
sa	struct
.	O
c	struct
)	O
,	O
ck	pointer
,	O
sizeof	O
(	O
sa	struct
.	O
c	struct
)	O
)	O
;	O
memcpy	function
(	O
&	O
(	O
sa	struct
.	O
s	long
)	O
,	O
&	O
(	O
cd	pointer
->	O
s	long
)	O
,	O
sizeof	O
(	O
sa	struct
.	O
s	long
)	O
)	O
;	O
if	O
(	O
fwrite	function
(	O
&	O
sa	struct
,	O
sizeof	O
(	O
sa	struct
)	O
,	O
1	int
,	O
fp	pointer
)	O
==	O
0	int
)	O
{	O
printf	function
(	O
"%s (write_savacct_file): probs writing to file `%s'\n"	pointer
,	O
program_name	pointer
,	O
s	long
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
rename	function
(	O
s	long
,	O
filename	pointer
)	O
!=	O
0	int
)	O
{	O
perror	function
(	O
"sa"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
void	O
write_usracct_file	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
hashtab_order	struct
ho	pointer
;	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
FILE	struct
*	O
fp	pointer
=	O
NULL	O
;	O
char	O
*	O
s	long
=	O
(	O
char	O
*	O
)	O
alloca	O
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
strlen	function
(	O
filename	pointer
)	O
+	O
2	int
)	O
)	O
;	O
(	O
void	O
)	O
sprintf	function
(	O
s	long
,	O
"%s~"	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
(	O
fp	pointer
=	O
file_open	function
(	O
s	long
,	O
1	int
)	O
)	O
==	O
NULL	O
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
for	O
(	O
he	pointer
=	O
hashtab_first	function
(	O
user_table	pointer
,	O
&	O
ho	pointer
)	O
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
hashtab_next	function
(	O
&	O
ho	pointer
)	O
)	O
{	O
char	O
*	O
name	pointer
=	O
hashtab_get_key	function
(	O
he	pointer
)	O
;	O
struct	O
user_data	struct
*	O
ud	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
struct	O
usracct	struct
ua	struct
;	O
strncpy	function
(	O
ua	struct
.	O
name	pointer
,	O
name	pointer
,	O
NAME_LEN	O
)	O
;	O
memcpy	function
(	O
&	O
(	O
ua	struct
.	O
s	long
)	O
,	O
&	O
(	O
ud	pointer
->	O
s	long
)	O
,	O
sizeof	O
(	O
ua	struct
.	O
s	long
)	O
)	O
;	O
if	O
(	O
fwrite	function
(	O
&	O
ua	struct
,	O
sizeof	O
(	O
ua	struct
)	O
,	O
1	int
,	O
fp	pointer
)	O
==	O
0	int
)	O
{	O
printf	function
(	O
"%s (write_usracct_file): probs writing to file `%s'\n"	pointer
,	O
program_name	pointer
,	O
s	long
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
rename	function
(	O
s	long
,	O
filename	pointer
)	O
!=	O
0	int
)	O
{	O
perror	function
(	O
"sa"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
static	O
void	O
update_totals	function
(	O
struct	O
stats	struct
*	O
s	long
)	O
{	O
add_stats	function
(	O
&	O
stats_totals	struct
,	O
s	long
)	O
;	O
}	O
void	O
parse_savacct_entries	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
savacct	struct
rec	pointer
;	O
FILE	struct
*	O
fp	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
fp	pointer
=	O
file_open	function
(	O
filename	pointer
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
debugging_enabled	int
)	O
fprintf	function
(	O
stddebug	O
,	O
"             ----------------------------------------------------------------------\n             savacct entries in `%s'\n             ----------------------------------------------------------------------\n             "	pointer
,	O
filename	pointer
)	O
;	O
while	O
(	O
fread	function
(	O
&	O
rec	pointer
,	O
sizeof	O
(	O
struct	O
savacct	struct
)	O
,	O
1	int
,	O
fp	pointer
)	O
)	O
{	O
update_command_list	function
(	O
rec	pointer
.	O
c	struct
.	O
comm	array
,	O
&	O
(	O
rec	pointer
.	O
s	long
)	O
,	O
rec	pointer
.	O
c	struct
.	O
fork_flag	short
)	O
;	O
update_totals	function
(	O
&	O
(	O
rec	pointer
.	O
s	long
)	O
)	O
;	O
}	O
(	O
void	O
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
void	O
parse_usracct_entries	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
struct	O
usracct	struct
rec	pointer
;	O
FILE	struct
*	O
fp	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
fp	pointer
=	O
file_open	function
(	O
filename	pointer
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
debugging_enabled	int
)	O
fprintf	function
(	O
stddebug	O
,	O
"             ----------------------------------------------------------------------\n             usracct entries in `%s'\n             ----------------------------------------------------------------------\n             "	pointer
,	O
filename	pointer
)	O
;	O
while	O
(	O
fread	function
(	O
&	O
rec	pointer
,	O
sizeof	O
(	O
struct	O
usracct	struct
)	O
,	O
1	int
,	O
fp	pointer
)	O
)	O
{	O
update_user_list	function
(	O
rec	pointer
.	O
name	pointer
,	O
&	O
(	O
rec	pointer
.	O
s	long
)	O
)	O
;	O
if	O
(	O
user_summary_flag	int
)	O
update_totals	function
(	O
&	O
(	O
rec	pointer
.	O
s	long
)	O
)	O
;	O
}	O
(	O
void	O
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
void	O
parse_acct_entries	function
(	O
void	O
)	O
{	O
struct	O
acct	function
*	O
rec	pointer
;	O
if	O
(	O
debugging_enabled	int
)	O
fprintf	function
(	O
stddebug	O
,	O
"             ----------------------------------------------------------------------\n             acct entries\n             ----------------------------------------------------------------------\n             "	pointer
)	O
;	O
while	O
(	O
(	O
rec	pointer
=	O
pacct_get_entry	function
(	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
double	O
ut	double
=	O
comp_t_2_double	function
(	O
rec	pointer
->	O
ac_utime	short
)	O
/	O
CURR_AHZ	O
;	O
double	O
st	struct
=	O
comp_t_2_double	function
(	O
rec	pointer
->	O
ac_stime	short
)	O
/	O
CURR_AHZ	O
;	O
double	O
et	double
=	O
ACETIME_2_DOUBLE	O
(	O
rec	pointer
->	O
ac_etime	float
)	O
/	O
CURR_AHZ	O
;	O
double	O
di	double
=	O
comp_t_2_double	function
(	O
rec	pointer
->	O
ac_io	short
)	O
/	O
CURR_AHZ	O
;	O
double	O
mu	double
=	O
PAGES_TO_KB	O
(	O
ACMEM_2_DOUBLE	O
(	O
rec	pointer
->	O
ac_mem	short
)	O
)	O
;	O
double	O
minflt	double
=	O
ACMINFLT_2_DOUBLE	O
(	O
rec	pointer
->	O
ac_minflt	short
)	O
;	O
double	O
majflt	double
=	O
ACMAJFLT_2_DOUBLE	O
(	O
rec	pointer
->	O
ac_majflt	short
)	O
;	O
double	O
swaps	double
=	O
ACSWAPS_2_DOUBLE	O
(	O
rec	pointer
->	O
ac_swaps	short
)	O
;	O
if	O
(	O
print_users	int
)	O
{	O
printf	function
(	O
"%-8.8s"	pointer
" %6.2f cpu"	pointer
" %8.0fk mem"	pointer
" %6.0f io"	pointer
" %-*.*s%s\n"	pointer
,	O
(	O
!	O
group_summary_flag	int
)	O
?	O
uid_name	function
(	O
rec	pointer
->	O
ac_uid	int
)	O
:	O
gid_name	function
(	O
rec	pointer
->	O
ac_gid	int
)	O
,	O
ut	double
+	O
st	struct
,	O
mu	double
,	O
di	double
,	O
COMM_LEN	O
,	O
COMM_LEN	O
,	O
rec	pointer
->	O
ac_comm	array
,	O
(	O
rec	pointer
->	O
ac_flag	char
&	O
AFORK	int
)	O
?	O
"*"	pointer
:	O
""	pointer
)	O
;	O
}	O
else	O
{	O
struct	O
stats	struct
s	long
;	O
s	long
.	O
num_calls	long
=	O
1	int
;	O
s	long
.	O
user_time	double
=	O
ut	double
;	O
s	long
.	O
sys_time	double
=	O
st	struct
;	O
s	long
.	O
elapsed_time	double
=	O
et	double
;	O
s	long
.	O
disk_io	double
=	O
di	double
;	O
s	long
.	O
mem_usage	double
=	O
mu	double
;	O
s	long
.	O
minor_faults	double
=	O
minflt	double
;	O
s	long
.	O
major_faults	double
=	O
majflt	double
;	O
s	long
.	O
swap_count	double
=	O
swaps	double
;	O
if	O
(	O
NEED_SAVACCT_INFO	O
)	O
update_command_list	function
(	O
rec	pointer
->	O
ac_comm	array
,	O
&	O
s	long
,	O
(	O
rec	pointer
->	O
ac_flag	char
&	O
AFORK	int
)	O
)	O
;	O
if	O
(	O
NEED_USRACCT_INFO	O
)	O
update_user_list	function
(	O
(	O
!	O
group_summary_flag	int
)	O
?	O
uid_name	function
(	O
rec	pointer
->	O
ac_uid	int
)	O
:	O
gid_name	function
(	O
rec	pointer
->	O
ac_gid	int
)	O
,	O
&	O
s	long
)	O
;	O
update_totals	function
(	O
&	O
s	long
)	O
;	O
}	O
}	O
}	O
void	O
update_command_list	function
(	O
char	O
*	O
comm	array
,	O
struct	O
stats	struct
*	O
s	long
,	O
short	O
fork_flag	short
)	O
{	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
struct	O
command_key	struct
ck	pointer
;	O
if	O
(	O
debugging_enabled	int
)	O
{	O
fprintf	function
(	O
stddebug	O
,	O
"+:%-*.*s%s "	pointer
,	O
COMM_LEN	O
,	O
COMM_LEN	O
,	O
comm	array
,	O
(	O
fork_flag	short
)	O
?	O
"*"	pointer
:	O
" "	pointer
)	O
;	O
print_stats_raw	function
(	O
s	long
,	O
stddebug	O
)	O
;	O
}	O
memset	function
(	O
&	O
ck	pointer
,	O
0	int
,	O
sizeof	O
(	O
ck	pointer
)	O
)	O
;	O
strncpy	function
(	O
ck	pointer
.	O
comm	array
,	O
comm	array
,	O
COMM_LEN	O
)	O
;	O
ck	pointer
.	O
fork_flag	short
=	O
fork_flag	short
;	O
he	pointer
=	O
hashtab_find	function
(	O
command_table	pointer
,	O
&	O
ck	pointer
,	O
(	O
unsigned	O
int	O
)	O
sizeof	O
(	O
ck	pointer
)	O
)	O
;	O
if	O
(	O
he	pointer
==	O
NULL	O
)	O
{	O
struct	O
command_data	struct
cd	pointer
;	O
memset	function
(	O
&	O
cd	pointer
,	O
0	int
,	O
sizeof	O
(	O
cd	pointer
)	O
)	O
;	O
he	pointer
=	O
hashtab_create	function
(	O
command_table	pointer
,	O
&	O
ck	pointer
,	O
sizeof	O
(	O
ck	pointer
)	O
)	O
;	O
hashtab_set_value	function
(	O
he	pointer
,	O
&	O
cd	pointer
,	O
sizeof	O
(	O
cd	pointer
)	O
)	O
;	O
}	O
{	O
struct	O
command_data	struct
*	O
cd	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
add_stats	function
(	O
&	O
(	O
cd	pointer
->	O
s	long
)	O
,	O
s	long
)	O
;	O
}	O
}	O
void	O
update_user_list	function
(	O
char	O
*	O
name	pointer
,	O
struct	O
stats	struct
*	O
s	long
)	O
{	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
if	O
(	O
debugging_enabled	int
)	O
{	O
fprintf	function
(	O
stddebug	O
,	O
"+u:%*s "	pointer
,	O
NAME_LEN	O
,	O
name	pointer
)	O
;	O
print_stats_raw	function
(	O
s	long
,	O
stddebug	O
)	O
;	O
}	O
he	pointer
=	O
hashtab_find	function
(	O
user_table	pointer
,	O
name	pointer
,	O
(	O
unsigned	O
int	O
)	O
NAME_LEN	O
)	O
;	O
if	O
(	O
he	pointer
==	O
NULL	O
)	O
{	O
struct	O
user_data	struct
ud	pointer
;	O
memset	function
(	O
&	O
ud	pointer
,	O
0	int
,	O
sizeof	O
(	O
ud	pointer
)	O
)	O
;	O
he	pointer
=	O
hashtab_create	function
(	O
user_table	pointer
,	O
name	pointer
,	O
NAME_LEN	O
)	O
;	O
hashtab_set_value	function
(	O
he	pointer
,	O
&	O
ud	pointer
,	O
sizeof	O
(	O
ud	pointer
)	O
)	O
;	O
}	O
{	O
struct	O
user_data	struct
*	O
ud	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
add_stats	function
(	O
&	O
(	O
ud	pointer
->	O
s	long
)	O
,	O
s	long
)	O
;	O
}	O
}	O
int	O
compare_stats_entry	function
(	O
struct	O
stats	struct
*	O
s1	pointer
,	O
struct	O
stats	struct
*	O
s2	pointer
)	O
{	O
double	O
v1	double
=	O
0	int
,	O
v2	double
=	O
0	int
;	O
switch	O
(	O
sort_type	enum
)	O
{	O
case	O
sort_sys_plus_user	int
:	O
v1	double
=	O
s1	pointer
->	O
user_time	double
+	O
s1	pointer
->	O
sys_time	double
;	O
v2	double
=	O
s2	pointer
->	O
user_time	double
+	O
s2	pointer
->	O
sys_time	double
;	O
break	O
;	O
case	O
sort_sys_plus_user_div_calls	int
:	O
v1	double
=	O
(	O
s1	pointer
->	O
user_time	double
+	O
s1	pointer
->	O
sys_time	double
)	O
/	O
(	O
double	O
)	O
s1	pointer
->	O
num_calls	long
;	O
v2	double
=	O
(	O
s2	pointer
->	O
user_time	double
+	O
s2	pointer
->	O
sys_time	double
)	O
/	O
(	O
double	O
)	O
s2	pointer
->	O
num_calls	long
;	O
break	O
;	O
case	O
sort_avio	int
:	O
v1	double
=	O
s1	pointer
->	O
disk_io	double
/	O
(	O
double	O
)	O
s1	pointer
->	O
num_calls	long
;	O
v2	double
=	O
s2	pointer
->	O
disk_io	double
/	O
(	O
double	O
)	O
s2	pointer
->	O
num_calls	long
;	O
break	O
;	O
case	O
sort_tio	int
:	O
v1	double
=	O
s1	pointer
->	O
disk_io	double
;	O
v2	double
=	O
s2	pointer
->	O
disk_io	double
;	O
break	O
;	O
case	O
sort_cpu_mem_average	int
:	O
v1	double
=	O
s1	pointer
->	O
mem_usage	double
/	O
(	O
double	O
)	O
s1	pointer
->	O
num_calls	long
;	O
v2	double
=	O
s2	pointer
->	O
mem_usage	double
/	O
(	O
double	O
)	O
s2	pointer
->	O
num_calls	long
;	O
break	O
;	O
case	O
sort_cpu_storage	int
:	O
v1	double
=	O
(	O
(	O
s1	pointer
->	O
user_time	double
+	O
s1	pointer
->	O
sys_time	double
)	O
?	O
(	O
s1	pointer
->	O
user_time	double
+	O
s1	pointer
->	O
sys_time	double
)	O
*	O
s1	pointer
->	O
mem_usage	double
:	O
s1	pointer
->	O
mem_usage	double
)	O
;	O
v2	double
=	O
(	O
(	O
s2	pointer
->	O
user_time	double
+	O
s2	pointer
->	O
sys_time	double
)	O
?	O
(	O
s2	pointer
->	O
user_time	double
+	O
s2	pointer
->	O
sys_time	double
)	O
*	O
s2	pointer
->	O
mem_usage	double
:	O
s2	pointer
->	O
mem_usage	double
)	O
;	O
break	O
;	O
case	O
sort_real_time	int
:	O
if	O
(	O
print_seconds	int
)	O
{	O
v1	double
=	O
s1	pointer
->	O
elapsed_time	double
/	O
(	O
double	O
)	O
s1	pointer
->	O
num_calls	long
;	O
v2	double
=	O
s2	pointer
->	O
elapsed_time	double
/	O
(	O
double	O
)	O
s2	pointer
->	O
num_calls	long
;	O
}	O
else	O
{	O
v1	double
=	O
s1	pointer
->	O
elapsed_time	double
;	O
v2	double
=	O
s2	pointer
->	O
elapsed_time	double
;	O
}	O
break	O
;	O
case	O
sort_num_calls	int
:	O
v1	double
=	O
(	O
double	O
)	O
s1	pointer
->	O
num_calls	long
;	O
v2	double
=	O
(	O
double	O
)	O
s2	pointer
->	O
num_calls	long
;	O
break	O
;	O
default	O
:	O
fatal	function
(	O
"unknown sort type"	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
v1	double
<	O
v2	double
)	O
return	O
(	O
(	O
reverse_sort	int
)	O
?	O
-	O
1	int
:	O
1	int
)	O
;	O
if	O
(	O
v1	double
>	O
v2	double
)	O
return	O
(	O
(	O
reverse_sort	int
)	O
?	O
1	int
:	O
-	O
1	int
)	O
;	O
compareit	O
(	O
num_calls	long
)	O
;	O
compareit	O
(	O
user_time	double
)	O
;	O
compareit	O
(	O
sys_time	double
)	O
;	O
compareit	O
(	O
elapsed_time	double
)	O
;	O
compareit	O
(	O
disk_io	double
)	O
;	O
compareit	O
(	O
mem_usage	double
)	O
;	O
return	O
0	int
;	O
}	O
int	O
compare_user_entry	function
(	O
struct	O
hashtab_elem	struct
*	O
*	O
s1	pointer
,	O
struct	O
hashtab_elem	struct
*	O
*	O
s2	pointer
)	O
{	O
struct	O
user_data	struct
*	O
ud1	pointer
=	O
hashtab_get_value	function
(	O
*	O
s1	pointer
)	O
;	O
struct	O
user_data	struct
*	O
ud2	pointer
=	O
hashtab_get_value	function
(	O
*	O
s2	pointer
)	O
;	O
return	O
compare_stats_entry	function
(	O
&	O
(	O
ud1	pointer
->	O
s	long
)	O
,	O
&	O
(	O
ud2	pointer
->	O
s	long
)	O
)	O
;	O
}	O
int	O
compare_sum_entry	function
(	O
struct	O
hashtab_elem	struct
*	O
*	O
s1	pointer
,	O
struct	O
hashtab_elem	struct
*	O
*	O
s2	pointer
)	O
{	O
struct	O
command_data	struct
*	O
ud1	pointer
=	O
hashtab_get_value	function
(	O
*	O
s1	pointer
)	O
;	O
struct	O
command_data	struct
*	O
ud2	pointer
=	O
hashtab_get_value	function
(	O
*	O
s2	pointer
)	O
;	O
return	O
compare_stats_entry	function
(	O
&	O
(	O
ud1	pointer
->	O
s	long
)	O
,	O
&	O
(	O
ud2	pointer
->	O
s	long
)	O
)	O
;	O
}	O
void	O
print_user_list	function
(	O
void	O
)	O
{	O
struct	O
hashtab_order	struct
ho	pointer
;	O
struct	O
hashtab_elem	struct
*	O
he	pointer
,	O
*	O
*	O
entry_array	pointer
,	O
user_totals	struct
;	O
struct	O
user_data	struct
user_totals_ud	struct
;	O
long	O
num_users	long
,	O
which	int
,	O
temp	long
;	O
char	O
*	O
const	O
empty_string	pointer
=	O
""	pointer
;	O
user_totals_ud	struct
.	O
s	long
=	O
stats_totals	struct
;	O
user_totals	struct
.	O
key	pointer
=	O
empty_string	pointer
;	O
user_totals	struct
.	O
data	pointer
=	O
&	O
user_totals_ud	struct
;	O
for	O
(	O
he	pointer
=	O
hashtab_first	function
(	O
user_table	pointer
,	O
&	O
ho	pointer
)	O
,	O
num_users	long
=	O
0	int
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
hashtab_next	function
(	O
&	O
ho	pointer
)	O
,	O
num_users	long
++	O
)	O
;	O
num_users	long
++	O
;	O
entry_array	pointer
=	O
(	O
struct	O
hashtab_elem	struct
*	O
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
hashtab_elem	struct
*	O
)	O
*	O
num_users	long
)	O
;	O
which	int
=	O
0	int
;	O
entry_array	pointer
[	O
which	int
++	O
]	O
=	O
&	O
user_totals	struct
;	O
for	O
(	O
he	pointer
=	O
hashtab_first	function
(	O
user_table	pointer
,	O
&	O
ho	pointer
)	O
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
hashtab_next	function
(	O
&	O
ho	pointer
)	O
)	O
{	O
entry_array	pointer
[	O
which	int
++	O
]	O
=	O
he	pointer
;	O
}	O
qsort	function
(	O
entry_array	pointer
+	O
1	int
,	O
(	O
size_t	long
)	O
num_users	long
-	O
1	int
,	O
sizeof	O
(	O
struct	O
hashtab_elem	struct
*	O
)	O
,	O
(	O
int	O
(	O
*	O
)	O
(	O
)	O
)	O
compare_user_entry	function
)	O
;	O
for	O
(	O
temp	long
=	O
0	int
;	O
temp	long
<	O
num_users	long
;	O
temp	long
++	O
)	O
{	O
char	O
*	O
name	pointer
;	O
struct	O
stats	struct
*	O
s	long
;	O
struct	O
user_data	struct
*	O
ud	pointer
;	O
he	pointer
=	O
entry_array	pointer
[	O
temp	long
]	O
;	O
name	pointer
=	O
hashtab_get_key	function
(	O
he	pointer
)	O
;	O
ud	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
s	long
=	O
&	O
(	O
ud	pointer
->	O
s	long
)	O
;	O
if	O
(	O
debugging_enabled	int
)	O
{	O
fprintf	function
(	O
stddebug	O
,	O
"t:%-10.10s "	pointer
,	O
name	pointer
)	O
;	O
print_stats_raw	function
(	O
s	long
,	O
stddebug	O
)	O
;	O
}	O
printf	function
(	O
"%-*.*s "	pointer
,	O
NAME_LEN	O
,	O
NAME_LEN	O
,	O
name	pointer
)	O
;	O
print_stats_nicely	function
(	O
s	long
)	O
;	O
(	O
void	O
)	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
free	function
(	O
entry_array	pointer
)	O
;	O
}	O
int	O
non_printable	function
(	O
char	O
*	O
s	long
,	O
int	O
len	int
)	O
{	O
int	O
a	int
;	O
for	O
(	O
a	int
=	O
0	int
;	O
(	O
a	int
<	O
len	int
)	O
&&	O
(	O
s	long
[	O
a	int
]	O
!=	O
'\0'	O
)	O
;	O
a	int
++	O
)	O
{	O
if	O
(	O
!	O
isprint	function
(	O
s	long
[	O
a	int
]	O
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ask_if_junkable	function
(	O
char	O
*	O
s	long
,	O
int	O
len	int
)	O
{	O
char	O
line	array
[	O
1000	int
]	O
;	O
char	O
word	array
[	O
1000	int
]	O
;	O
if	O
(	O
always_yes	int
)	O
return	O
1	int
;	O
(	O
void	O
)	O
printf	function
(	O
"Junk `%*s'? "	pointer
,	O
len	int
,	O
s	long
)	O
;	O
(	O
void	O
)	O
fflush	function
(	O
stdout	pointer
)	O
;	O
if	O
(	O
fgets	function
(	O
line	array
,	O
1000	int
,	O
stdin	pointer
)	O
&&	O
(	O
sscanf	function
(	O
line	array
,	O
" %s "	pointer
,	O
word	array
)	O
>	O
0	int
)	O
&&	O
(	O
(	O
word	array
[	O
0	int
]	O
==	O
'y'	O
)	O
||	O
(	O
word	array
[	O
0	int
]	O
==	O
'Y'	O
)	O
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
print_command_list	function
(	O
void	O
)	O
{	O
struct	O
hashtab_order	struct
ho	pointer
;	O
struct	O
hashtab_elem	struct
*	O
*	O
entry_array	pointer
,	O
*	O
he	pointer
;	O
struct	O
hashtab_elem	struct
sum_totals	struct
,	O
other_totals	struct
,	O
junk_totals	struct
;	O
struct	O
command_data	struct
sum_totals_cd	struct
,	O
other_totals_cd	struct
,	O
junk_totals_cd	struct
;	O
struct	O
command_key	struct
sum_totals_ck	struct
,	O
other_totals_ck	struct
,	O
junk_totals_ck	struct
;	O
long	O
num_commands	long
,	O
temp	long
,	O
which	int
;	O
int	O
num_in_other_category	int
,	O
num_in_junk_category	int
;	O
memset	function
(	O
&	O
sum_totals_cd	struct
,	O
0	int
,	O
sizeof	O
(	O
sum_totals_cd	struct
)	O
)	O
;	O
memset	function
(	O
&	O
sum_totals_ck	struct
,	O
0	int
,	O
sizeof	O
(	O
sum_totals_ck	struct
)	O
)	O
;	O
sum_totals_cd	struct
.	O
s	long
=	O
stats_totals	struct
;	O
sum_totals	struct
.	O
key	pointer
=	O
&	O
sum_totals_ck	struct
;	O
sum_totals	struct
.	O
data	pointer
=	O
&	O
sum_totals_cd	struct
;	O
(	O
void	O
)	O
memset	function
(	O
&	O
other_totals_cd	struct
,	O
0	int
,	O
sizeof	O
(	O
other_totals_cd	struct
)	O
)	O
;	O
(	O
void	O
)	O
memset	function
(	O
&	O
other_totals_ck	struct
,	O
0	int
,	O
sizeof	O
(	O
other_totals_ck	struct
)	O
)	O
;	O
(	O
void	O
)	O
strcpy	function
(	O
other_totals_ck	struct
.	O
comm	array
,	O
"***other"	pointer
)	O
;	O
other_totals	struct
.	O
key	pointer
=	O
&	O
other_totals_ck	struct
;	O
other_totals	struct
.	O
data	pointer
=	O
&	O
other_totals_cd	struct
;	O
(	O
void	O
)	O
memset	function
(	O
&	O
junk_totals_cd	struct
,	O
0	int
,	O
sizeof	O
(	O
junk_totals_cd	struct
)	O
)	O
;	O
(	O
void	O
)	O
memset	function
(	O
&	O
junk_totals_ck	struct
,	O
0	int
,	O
sizeof	O
(	O
junk_totals_ck	struct
)	O
)	O
;	O
(	O
void	O
)	O
strcpy	function
(	O
junk_totals_ck	struct
.	O
comm	array
,	O
"**junk**"	pointer
)	O
;	O
junk_totals	struct
.	O
key	pointer
=	O
&	O
junk_totals_ck	struct
;	O
junk_totals	struct
.	O
data	pointer
=	O
&	O
junk_totals_cd	struct
;	O
for	O
(	O
he	pointer
=	O
hashtab_first	function
(	O
command_table	pointer
,	O
&	O
ho	pointer
)	O
,	O
num_commands	long
=	O
0	int
,	O
num_in_other_category	int
=	O
0	int
,	O
num_in_junk_category	int
=	O
0	int
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
hashtab_next	function
(	O
&	O
ho	pointer
)	O
)	O
{	O
if	O
(	O
print_all_records	int
)	O
num_commands	long
++	O
;	O
else	O
{	O
struct	O
command_key	struct
*	O
ck	pointer
=	O
hashtab_get_key	function
(	O
he	pointer
)	O
;	O
struct	O
command_data	struct
*	O
cd	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
if	O
(	O
junk_threshold	int
&&	O
(	O
cd	pointer
->	O
s	long
.	O
num_calls	long
<=	O
junk_threshold	int
)	O
&&	O
ask_if_junkable	function
(	O
ck	pointer
->	O
comm	array
,	O
COMM_LEN	O
)	O
)	O
{	O
num_in_junk_category	int
++	O
;	O
cd	pointer
->	O
junked	short
=	O
1	int
;	O
add_stats	function
(	O
&	O
(	O
junk_totals_cd	struct
.	O
s	long
)	O
,	O
&	O
(	O
cd	pointer
->	O
s	long
)	O
)	O
;	O
junk_totals_ck	struct
.	O
fork_flag	short
|=	O
ck	pointer
->	O
fork_flag	short
;	O
}	O
else	O
if	O
(	O
(	O
cd	pointer
->	O
s	long
.	O
num_calls	long
==	O
1	int
)	O
||	O
non_printable	function
(	O
ck	pointer
->	O
comm	array
,	O
COMM_LEN	O
)	O
)	O
{	O
num_in_other_category	int
++	O
;	O
cd	pointer
->	O
junked	short
=	O
1	int
;	O
add_stats	function
(	O
&	O
(	O
other_totals_cd	struct
.	O
s	long
)	O
,	O
&	O
(	O
cd	pointer
->	O
s	long
)	O
)	O
;	O
other_totals_ck	struct
.	O
fork_flag	short
|=	O
ck	pointer
->	O
fork_flag	short
;	O
}	O
else	O
num_commands	long
++	O
;	O
}	O
}	O
if	O
(	O
num_commands	long
==	O
0	int
)	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
num_commands	long
++	O
;	O
if	O
(	O
num_in_other_category	int
)	O
num_commands	long
++	O
;	O
if	O
(	O
num_in_junk_category	int
)	O
num_commands	long
++	O
;	O
entry_array	pointer
=	O
(	O
struct	O
hashtab_elem	struct
*	O
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
hashtab_elem	struct
*	O
)	O
*	O
num_commands	long
)	O
;	O
which	int
=	O
0	int
;	O
entry_array	pointer
[	O
which	int
++	O
]	O
=	O
&	O
sum_totals	struct
;	O
if	O
(	O
num_in_other_category	int
)	O
entry_array	pointer
[	O
which	int
++	O
]	O
=	O
&	O
other_totals	struct
;	O
if	O
(	O
num_in_junk_category	int
)	O
entry_array	pointer
[	O
which	int
++	O
]	O
=	O
&	O
junk_totals	struct
;	O
for	O
(	O
he	pointer
=	O
hashtab_first	function
(	O
command_table	pointer
,	O
&	O
ho	pointer
)	O
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
hashtab_next	function
(	O
&	O
ho	pointer
)	O
)	O
{	O
if	O
(	O
print_all_records	int
)	O
entry_array	pointer
[	O
which	int
++	O
]	O
=	O
he	pointer
;	O
else	O
{	O
struct	O
command_data	struct
*	O
cd	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
if	O
(	O
cd	pointer
->	O
junked	short
)	O
{	O
}	O
else	O
entry_array	pointer
[	O
which	int
++	O
]	O
=	O
he	pointer
;	O
}	O
}	O
qsort	function
(	O
entry_array	pointer
+	O
1	int
,	O
(	O
size_t	long
)	O
num_commands	long
-	O
1	int
,	O
sizeof	O
(	O
struct	O
hashtab_entry	O
*	O
)	O
,	O
(	O
int	O
(	O
*	O
)	O
(	O
)	O
)	O
compare_sum_entry	function
)	O
;	O
for	O
(	O
temp	long
=	O
0	int
;	O
temp	long
<	O
num_commands	long
;	O
temp	long
++	O
)	O
{	O
struct	O
command_data	struct
*	O
cd	pointer
;	O
struct	O
command_key	struct
*	O
ck	pointer
;	O
he	pointer
=	O
entry_array	pointer
[	O
temp	long
]	O
;	O
cd	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
ck	pointer
=	O
hashtab_get_key	function
(	O
he	pointer
)	O
;	O
print_stats_nicely	function
(	O
&	O
(	O
cd	pointer
->	O
s	long
)	O
)	O
;	O
if	O
(	O
ck	pointer
->	O
comm	array
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
printf	function
(	O
"   %-.*s"	pointer
,	O
COMM_LEN	O
,	O
ck	pointer
->	O
comm	array
)	O
;	O
if	O
(	O
ck	pointer
->	O
fork_flag	short
)	O
(	O
void	O
)	O
putchar	function
(	O
'*'	O
)	O
;	O
}	O
(	O
void	O
)	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
free	function
(	O
entry_array	pointer
)	O
;	O
}	O
