struct	O
header_iterator	struct
{	O
mu_header_t	pointer
header	pointer
;	O
size_t	long
index	function
;	O
int	O
backwards	int
;	O
}	O
;	O
static	O
int	O
hdr_first	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
header_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
if	O
(	O
itr	pointer
->	O
backwards	int
)	O
{	O
if	O
(	O
mu_header_get_field_count	function
(	O
itr	pointer
->	O
header	pointer
,	O
&	O
itr	pointer
->	O
index	function
)	O
)	O
return	O
1	int
;	O
}	O
else	O
itr	pointer
->	O
index	function
=	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
hdr_next	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
header_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
if	O
(	O
itr	pointer
->	O
backwards	int
)	O
{	O
if	O
(	O
itr	pointer
->	O
index	function
!=	O
0	int
)	O
itr	pointer
->	O
index	function
--	O
;	O
}	O
else	O
itr	pointer
->	O
index	function
++	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
hdr_getitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
*	O
pret	pointer
,	O
const	O
void	O
*	O
*	O
pkey	pointer
)	O
{	O
struct	O
header_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
int	O
rc	int
;	O
size_t	long
count	pointer
;	O
rc	int
=	O
mu_header_get_field_count	function
(	O
itr	pointer
->	O
header	pointer
,	O
&	O
count	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
itr	pointer
->	O
index	function
<	O
1	int
||	O
itr	pointer
->	O
index	function
>	O
count	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
rc	int
=	O
mu_header_sget_field_value	function
(	O
itr	pointer
->	O
header	pointer
,	O
itr	pointer
->	O
index	function
,	O
(	O
const	O
char	O
*	O
*	O
)	O
pret	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
pkey	pointer
)	O
rc	int
=	O
mu_header_sget_field_name	function
(	O
itr	pointer
->	O
header	pointer
,	O
itr	pointer
->	O
index	function
,	O
(	O
const	O
char	O
*	O
*	O
)	O
pkey	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
hdr_finished_p	function
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
header_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
size_t	long
count	pointer
;	O
if	O
(	O
itr	pointer
->	O
backwards	int
)	O
return	O
itr	pointer
->	O
index	function
<	O
1	int
;	O
if	O
(	O
mu_header_get_field_count	function
(	O
itr	pointer
->	O
header	pointer
,	O
&	O
count	pointer
)	O
)	O
return	O
1	int
;	O
return	O
itr	pointer
->	O
index	function
>	O
count	pointer
;	O
}	O
static	O
int	O
hdr_destroy	function
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
header_iterator	struct
*	O
itr	pointer
=	O
data	pointer
;	O
mu_iterator_detach	function
(	O
&	O
itr	pointer
->	O
header	pointer
->	O
itr	pointer
,	O
iterator	pointer
)	O
;	O
free	function
(	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
hdr_delitem	function
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
header_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
const	O
void	O
*	O
ptr	pointer
;	O
if	O
(	O
mu_header_get_itemptr	function
(	O
itr	pointer
->	O
header	pointer
,	O
itr	pointer
->	O
index	function
,	O
&	O
ptr	pointer
)	O
)	O
return	O
MU_ITR_DELITEM_NOTHING	int
;	O
if	O
(	O
ptr	pointer
==	O
item	pointer
&&	O
!	O
itr	pointer
->	O
backwards	int
)	O
return	O
MU_ITR_DELITEM_ADVANCE	int
;	O
return	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O
static	O
int	O
hdr_data_dup	function
(	O
void	O
*	O
*	O
ptr	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
header_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
*	O
ptr	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
header_iterator	struct
)	O
)	O
;	O
if	O
(	O
*	O
ptr	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
*	O
ptr	pointer
,	O
owner	pointer
,	O
sizeof	O
(	O
struct	O
header_iterator	struct
)	O
)	O
;	O
mu_iterator_attach	function
(	O
&	O
itr	pointer
->	O
header	pointer
->	O
itr	pointer
,	O
*	O
ptr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
hdr_itrctl	function
(	O
void	O
*	O
owner	pointer
,	O
enum	O
mu_itrctl_req	enum
req	enum
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
header_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
switch	O
(	O
req	enum
)	O
{	O
case	O
mu_itrctl_tell	int
:	O
if	O
(	O
hdr_finished_p	function
(	O
owner	pointer
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
*	O
(	O
size_t	long
*	O
)	O
arg	pointer
=	O
itr	pointer
->	O
index	function
;	O
return	O
0	int
;	O
break	O
;	O
case	O
mu_itrctl_delete	int
:	O
if	O
(	O
hdr_finished_p	function
(	O
owner	pointer
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
else	O
return	O
mu_header_remove	function
(	O
itr	pointer
->	O
header	pointer
,	O
NULL	O
,	O
itr	pointer
->	O
index	function
)	O
;	O
break	O
;	O
case	O
mu_itrctl_qry_direction	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
*	O
(	O
int	O
*	O
)	O
arg	pointer
=	O
itr	pointer
->	O
backwards	int
;	O
break	O
;	O
case	O
mu_itrctl_set_direction	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
itr	pointer
->	O
backwards	int
=	O
!	O
!	O
*	O
(	O
int	O
*	O
)	O
arg	pointer
;	O
break	O
;	O
case	O
mu_itrctl_count	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
return	O
mu_header_get_field_count	function
(	O
itr	pointer
->	O
header	pointer
,	O
arg	pointer
)	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_header_get_iterator	function
(	O
mu_header_t	pointer
hdr	pointer
,	O
mu_iterator_t	pointer
*	O
piterator	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
;	O
int	O
status	int
;	O
struct	O
header_iterator	struct
*	O
itr	pointer
;	O
if	O
(	O
!	O
hdr	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
*	O
itr	pointer
)	O
;	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
ENOMEM	int
;	O
itr	pointer
->	O
header	pointer
=	O
hdr	pointer
;	O
itr	pointer
->	O
index	function
=	O
1	int
;	O
status	int
=	O
mu_iterator_create	function
(	O
&	O
iterator	pointer
,	O
itr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
itr	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	function
(	O
iterator	pointer
,	O
hdr_first	function
)	O
;	O
mu_iterator_set_next	function
(	O
iterator	pointer
,	O
hdr_next	function
)	O
;	O
mu_iterator_set_getitem	function
(	O
iterator	pointer
,	O
hdr_getitem	function
)	O
;	O
mu_iterator_set_finished_p	function
(	O
iterator	pointer
,	O
hdr_finished_p	function
)	O
;	O
mu_iterator_set_delitem	function
(	O
iterator	pointer
,	O
hdr_delitem	function
)	O
;	O
mu_iterator_set_destroy	function
(	O
iterator	pointer
,	O
hdr_destroy	function
)	O
;	O
mu_iterator_set_dup	function
(	O
iterator	pointer
,	O
hdr_data_dup	function
)	O
;	O
mu_iterator_set_itrctl	function
(	O
iterator	pointer
,	O
hdr_itrctl	function
)	O
;	O
mu_iterator_attach	function
(	O
&	O
hdr	pointer
->	O
itr	pointer
,	O
iterator	pointer
)	O
;	O
*	O
piterator	pointer
=	O
iterator	pointer
;	O
return	O
0	int
;	O
}	O
