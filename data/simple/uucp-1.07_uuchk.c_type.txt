const	O
char	O
uuchk_rcsid	array
[	O
]	O
=	O
"$Id: uuchk.c,v 1.71 2002/03/05 19:10:42 ian Rel $"	pointer
;	O
static	O
void	O
ukusage	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
ukhelp	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
ukshow_names	function
P	O
(	O
(	O
const	O
char	O
*	O
zheader	pointer
,	O
const	O
char	O
*	O
const	O
*	O
pznames	pointer
)	O
)	O
;	O
static	O
void	O
ukshow	function
P	O
(	O
(	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
,	O
pointer	pointer
puuconf	pointer
)	O
)	O
;	O
static	O
int	O
ikshow_port	function
P	O
(	O
(	O
struct	O
uuconf_port	struct
*	O
qport	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
void	O
ukshow_dialer	function
P	O
(	O
(	O
struct	O
uuconf_dialer	struct
*	O
qdial	pointer
)	O
)	O
;	O
static	O
void	O
ukshow_chat	function
P	O
(	O
(	O
const	O
struct	O
uuconf_chat	struct
*	O
qchat	pointer
,	O
const	O
char	O
*	O
zhdr	pointer
)	O
)	O
;	O
static	O
void	O
ukshow_size	function
P	O
(	O
(	O
struct	O
uuconf_timespan	struct
*	O
q	pointer
,	O
boolean	int
fcall	int
,	O
boolean	int
flocal	int
)	O
)	O
;	O
static	O
void	O
ukshow_reliable	function
P	O
(	O
(	O
int	O
i	int
,	O
const	O
char	O
*	O
zhdr	pointer
)	O
)	O
;	O
static	O
void	O
ukshow_proto_params	function
P	O
(	O
(	O
struct	O
uuconf_proto_param	struct
*	O
pas	pointer
,	O
int	O
cindent	int
)	O
)	O
;	O
static	O
void	O
ukshow_time	function
P	O
(	O
(	O
const	O
struct	O
uuconf_timespan	struct
*	O
)	O
)	O
;	O
static	O
struct	O
uuconf_timespan	struct
*	O
qcompress_span	function
P	O
(	O
(	O
struct	O
uuconf_timespan	struct
*	O
)	O
)	O
;	O
static	O
void	O
ukuuconf_error	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
int	O
iret	int
)	O
)	O
;	O
struct	O
sinfo	struct
{	O
pointer	pointer
puuconf	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
boolean	int
fgot	int
;	O
}	O
;	O
static	O
const	O
char	O
*	O
zKprogram	pointer
;	O
static	O
const	O
struct	O
option	struct
asKlongopts	array
[	O
]	O
=	O
{	O
{	O
"system"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"config"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'I'	O
}	O
,	O
{	O
"debug"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'x'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
int	O
main	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
int	O
iopt	int
;	O
const	O
char	O
*	O
zsystem	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
zconfig	pointer
=	O
NULL	O
;	O
int	O
iret	int
;	O
pointer	pointer
puuconf	pointer
;	O
zKprogram	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
while	O
(	O
(	O
iopt	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"I:s:vx:"	pointer
,	O
asKlongopts	array
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
iopt	int
)	O
{	O
case	O
's'	O
:	O
zsystem	pointer
=	O
optarg	O
;	O
break	O
;	O
case	O
'I'	O
:	O
zconfig	pointer
=	O
optarg	O
;	O
break	O
;	O
case	O
'x'	O
:	O
break	O
;	O
case	O
'v'	O
:	O
printf	function
(	O
"uuchk (Taylor UUCP) %s\n"	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
"Copyright (C) 1991, 92, 93, 94, 1995, 2002 Ian Lance Taylor\n"	pointer
)	O
;	O
printf	function
(	O
"This program is free software; you may redistribute it under the terms of\n"	pointer
)	O
;	O
printf	function
(	O
"the GNU General Public LIcense.  This program has ABSOLUTELY NO WARRANTY.\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
1	int
:	O
ukhelp	function
(	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
ukusage	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
optind	O
!=	O
argc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: too many arguments"	pointer
,	O
zKprogram	pointer
)	O
;	O
ukusage	function
(	O
)	O
;	O
}	O
iret	int
=	O
uuconf_init	function
(	O
&	O
puuconf	pointer
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
zconfig	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
if	O
(	O
zsystem	pointer
!=	O
NULL	O
)	O
{	O
struct	O
uuconf_system	struct
ssys	struct
;	O
iret	int
=	O
uuconf_system_info	function
(	O
puuconf	pointer
,	O
zsystem	pointer
,	O
&	O
ssys	struct
)	O
;	O
if	O
(	O
iret	int
==	O
UUCONF_NOT_FOUND	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: system not found\n"	pointer
,	O
zsystem	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
ukshow	function
(	O
&	O
ssys	struct
,	O
puuconf	pointer
)	O
;	O
(	O
void	O
)	O
uuconf_system_free	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
)	O
;	O
}	O
else	O
{	O
struct	O
uuconf_config_file_names	struct
snames	struct
;	O
const	O
char	O
*	O
zstr	pointer
;	O
int	O
iint	int
;	O
char	O
*	O
*	O
pzsystems	pointer
;	O
iret	int
=	O
uuconf_config_files	function
(	O
puuconf	pointer
,	O
&	O
snames	struct
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
if	O
(	O
snames	struct
.	O
uuconf_ztaylor_config	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"config file: %s\n"	pointer
,	O
snames	struct
.	O
uuconf_ztaylor_config	pointer
)	O
;	O
ukshow_names	function
(	O
"sys file"	pointer
,	O
snames	struct
.	O
uuconf_pztaylor_sys	pointer
)	O
;	O
ukshow_names	function
(	O
"port file"	pointer
,	O
snames	struct
.	O
uuconf_pztaylor_port	pointer
)	O
;	O
ukshow_names	function
(	O
"dial file"	pointer
,	O
snames	struct
.	O
uuconf_pztaylor_dial	pointer
)	O
;	O
ukshow_names	function
(	O
"dialcode file"	pointer
,	O
snames	struct
.	O
uuconf_pzdialcode	pointer
)	O
;	O
ukshow_names	function
(	O
"passwd file"	pointer
,	O
snames	struct
.	O
uuconf_pztaylor_pwd	pointer
)	O
;	O
ukshow_names	function
(	O
"call file"	pointer
,	O
snames	struct
.	O
uuconf_pztaylor_call	pointer
)	O
;	O
if	O
(	O
snames	struct
.	O
uuconf_zv2_systems	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"V2 L.sys file: %s\n"	pointer
,	O
snames	struct
.	O
uuconf_zv2_systems	pointer
)	O
;	O
if	O
(	O
snames	struct
.	O
uuconf_zv2_device	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"V2 L-devices file: %s\n"	pointer
,	O
snames	struct
.	O
uuconf_zv2_device	pointer
)	O
;	O
if	O
(	O
snames	struct
.	O
uuconf_zv2_userfile	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"V2 USERFILE file: %s\n"	pointer
,	O
snames	struct
.	O
uuconf_zv2_userfile	pointer
)	O
;	O
if	O
(	O
snames	struct
.	O
uuconf_zv2_cmds	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"V2 L.cmds file: %s\n"	pointer
,	O
snames	struct
.	O
uuconf_zv2_cmds	pointer
)	O
;	O
ukshow_names	function
(	O
"HDB Systems file"	pointer
,	O
snames	struct
.	O
uuconf_pzhdb_systems	pointer
)	O
;	O
ukshow_names	function
(	O
"HDB Devices file"	pointer
,	O
snames	struct
.	O
uuconf_pzhdb_devices	pointer
)	O
;	O
ukshow_names	function
(	O
"HDB Dialers file"	pointer
,	O
snames	struct
.	O
uuconf_pzhdb_dialers	pointer
)	O
;	O
if	O
(	O
snames	struct
.	O
uuconf_zhdb_permissions	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"HDB Permissions file: %s\n"	pointer
,	O
snames	struct
.	O
uuconf_zhdb_permissions	pointer
)	O
;	O
iret	int
=	O
uuconf_localname	function
(	O
puuconf	pointer
,	O
&	O
zstr	pointer
)	O
;	O
if	O
(	O
iret	int
==	O
UUCONF_SUCCESS	O
)	O
printf	function
(	O
"Local node name %s\n"	pointer
,	O
zstr	pointer
)	O
;	O
else	O
if	O
(	O
iret	int
!=	O
UUCONF_NOT_FOUND	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
iret	int
=	O
uuconf_spooldir	function
(	O
puuconf	pointer
,	O
&	O
zstr	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
printf	function
(	O
"Spool directory %s\n"	pointer
,	O
zstr	pointer
)	O
;	O
iret	int
=	O
uuconf_pubdir	function
(	O
puuconf	pointer
,	O
&	O
zstr	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
printf	function
(	O
"Public directory %s\n"	pointer
,	O
zstr	pointer
)	O
;	O
iret	int
=	O
uuconf_lockdir	function
(	O
puuconf	pointer
,	O
&	O
zstr	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
printf	function
(	O
"Lock directory %s\n"	pointer
,	O
zstr	pointer
)	O
;	O
iret	int
=	O
uuconf_logfile	function
(	O
puuconf	pointer
,	O
&	O
zstr	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
printf	function
(	O
"Log file %s\n"	pointer
,	O
zstr	pointer
)	O
;	O
iret	int
=	O
uuconf_statsfile	function
(	O
puuconf	pointer
,	O
&	O
zstr	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
printf	function
(	O
"Statistics file %s\n"	pointer
,	O
zstr	pointer
)	O
;	O
iret	int
=	O
uuconf_debugfile	function
(	O
puuconf	pointer
,	O
&	O
zstr	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
printf	function
(	O
"Debug file %s\n"	pointer
,	O
zstr	pointer
)	O
;	O
iret	int
=	O
uuconf_debuglevel	function
(	O
puuconf	pointer
,	O
&	O
zstr	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
if	O
(	O
zstr	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"Global debugging level %s\n"	pointer
,	O
zstr	pointer
)	O
;	O
iret	int
=	O
uuconf_strip	function
(	O
puuconf	pointer
,	O
&	O
iint	int
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
printf	function
(	O
"uucico -l will %sstrip login names and passwords\n"	pointer
,	O
(	O
iint	int
&	O
UUCONF_STRIP_LOGIN	O
)	O
!=	O
0	int
?	O
""	pointer
:	O
"not "	pointer
)	O
;	O
printf	function
(	O
"uucico will %sstrip UUCP protocol commands\n"	pointer
,	O
(	O
iint	int
&	O
UUCONF_STRIP_PROTO	O
)	O
!=	O
0	int
?	O
""	pointer
:	O
"not "	pointer
)	O
;	O
iret	int
=	O
uuconf_maxuuxqts	function
(	O
puuconf	pointer
,	O
&	O
iint	int
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
if	O
(	O
iint	int
!=	O
0	int
)	O
printf	function
(	O
"Maximum number of uuxqt processes permitted %d\n"	pointer
,	O
iint	int
)	O
;	O
iret	int
=	O
uuconf_runuuxqt	function
(	O
puuconf	pointer
,	O
&	O
iint	int
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
if	O
(	O
iint	int
>	O
0	int
)	O
printf	function
(	O
"Start uuxqt every %d jobs\n"	pointer
,	O
iint	int
)	O
;	O
else	O
{	O
switch	O
(	O
iint	int
)	O
{	O
case	O
UUCONF_RUNUUXQT_NEVER	O
:	O
printf	function
(	O
"Never start uuxqt\n"	pointer
)	O
;	O
break	O
;	O
case	O
UUCONF_RUNUUXQT_ONCE	O
:	O
printf	function
(	O
"Start uuxqt once per uucico invocation\n"	pointer
)	O
;	O
break	O
;	O
case	O
UUCONF_RUNUUXQT_PERCALL	O
:	O
printf	function
(	O
"Start uuxqt once per call\n"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"Illegal value from uuconf_runuuxqt\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
}	O
}	O
iret	int
=	O
uuconf_system_names	function
(	O
puuconf	pointer
,	O
&	O
pzsystems	pointer
,	O
FALSE	O
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
if	O
(	O
*	O
pzsystems	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: no systems found\n"	pointer
,	O
zKprogram	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
while	O
(	O
*	O
pzsystems	pointer
!=	O
NULL	O
)	O
{	O
struct	O
uuconf_system	struct
ssys	struct
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
iret	int
=	O
uuconf_system_info	function
(	O
puuconf	pointer
,	O
*	O
pzsystems	pointer
,	O
&	O
ssys	struct
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
else	O
ukshow	function
(	O
&	O
ssys	struct
,	O
puuconf	pointer
)	O
;	O
(	O
void	O
)	O
uuconf_system_free	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
)	O
;	O
++	O
pzsystems	pointer
;	O
}	O
}	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
ukusage	function
(	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s [-s system] [-I file]\n"	pointer
,	O
zKprogram	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Use %s --help for help\n"	pointer
,	O
zKprogram	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
void	O
ukhelp	function
(	O
)	O
{	O
printf	function
(	O
"Taylor UUCP %s, copyright (C) 1991, 92, 93, 94, 1995, 2002 Ian Lance Taylor\n"	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
"Usage: %s [-s system] [-I file] [-v]\n"	pointer
,	O
zKprogram	pointer
)	O
;	O
printf	function
(	O
" -s,--system system: Only print configuration for named system\n"	pointer
)	O
;	O
printf	function
(	O
" -I,--config file: Set configuration file to use\n"	pointer
)	O
;	O
printf	function
(	O
" -v,--version: Print version and exit\n"	pointer
)	O
;	O
printf	function
(	O
" --help: Print help and exit\n"	pointer
)	O
;	O
printf	function
(	O
"Report bugs to taylor-uucp@gnu.org\n"	pointer
)	O
;	O
}	O
static	O
void	O
ukshow_names	function
(	O
zheader	pointer
,	O
pznames	pointer
)	O
const	O
char	O
*	O
zheader	pointer
;	O
const	O
char	O
*	O
const	O
*	O
pznames	pointer
;	O
{	O
if	O
(	O
pznames	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
pznames	pointer
[	O
1	int
]	O
==	O
NULL	O
)	O
printf	function
(	O
"%s: %s\n"	pointer
,	O
zheader	pointer
,	O
pznames	pointer
[	O
0	int
]	O
)	O
;	O
else	O
{	O
const	O
char	O
*	O
const	O
*	O
pz	pointer
;	O
printf	function
(	O
"%s:\n"	pointer
,	O
zheader	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
pznames	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
++	O
pz	pointer
)	O
printf	function
(	O
"  %s\n"	pointer
,	O
*	O
pz	pointer
)	O
;	O
}	O
}	O
static	O
void	O
ukshow	function
(	O
qsys	pointer
,	O
puuconf	pointer
)	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
pointer	pointer
puuconf	pointer
;	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
int	O
i	int
;	O
int	O
iret	int
;	O
boolean	int
fanycall	int
;	O
printf	function
(	O
"System: %s"	pointer
,	O
qsys	pointer
->	O
uuconf_zname	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_pzalias	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
" ("	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzalias	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
if	O
(	O
pz	pointer
[	O
1	int
]	O
!=	O
NULL	O
)	O
printf	function
(	O
" "	pointer
)	O
;	O
}	O
printf	function
(	O
")"	pointer
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
fanycall	int
=	O
FALSE	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
qsys	pointer
!=	O
NULL	O
;	O
qsys	pointer
=	O
qsys	pointer
->	O
uuconf_qalternate	pointer
,	O
i	int
++	O
)	O
{	O
boolean	int
fcall	int
,	O
fcalled	int
;	O
struct	O
uuconf_timespan	struct
*	O
qtime	pointer
,	O
*	O
qspan	pointer
;	O
if	O
(	O
i	int
!=	O
0	int
||	O
qsys	pointer
->	O
uuconf_qalternate	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
"Alternate %d"	pointer
,	O
i	int
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zalternate	pointer
!=	O
NULL	O
)	O
printf	function
(	O
" (%s)"	pointer
,	O
qsys	pointer
->	O
uuconf_zalternate	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
fcall	int
=	O
qsys	pointer
->	O
uuconf_fcall	int
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_qtimegrade	pointer
==	O
NULL	O
)	O
fcall	int
=	O
FALSE	O
;	O
fcalled	int
=	O
qsys	pointer
->	O
uuconf_fcalled	int
;	O
if	O
(	O
!	O
fcall	int
&&	O
!	O
fcalled	int
)	O
{	O
printf	function
(	O
" This alternate is never used\n"	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
fcall	int
)	O
fanycall	int
=	O
TRUE	O
;	O
if	O
(	O
fcalled	int
)	O
{	O
if	O
(	O
qsys	pointer
->	O
uuconf_zcalled_login	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
qsys	pointer
->	O
uuconf_zcalled_login	pointer
,	O
"ANY"	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
i	int
==	O
0	int
&&	O
qsys	pointer
->	O
uuconf_qalternate	pointer
==	O
NULL	O
)	O
printf	function
(	O
" Caller must log in as %s\n"	pointer
,	O
qsys	pointer
->	O
uuconf_zcalled_login	pointer
)	O
;	O
else	O
printf	function
(	O
" When called using login name %s\n"	pointer
,	O
qsys	pointer
->	O
uuconf_zcalled_login	pointer
)	O
;	O
}	O
else	O
printf	function
(	O
" When called using any login name\n"	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zlocalname	pointer
!=	O
NULL	O
)	O
printf	function
(	O
" Will use %s as name of local system\n"	pointer
,	O
qsys	pointer
->	O
uuconf_zlocalname	pointer
)	O
;	O
}	O
if	O
(	O
fcalled	int
&&	O
qsys	pointer
->	O
uuconf_fcallback	int
)	O
{	O
printf	function
(	O
" If called, will call back\n"	pointer
)	O
;	O
fcalled	int
=	O
FALSE	O
;	O
}	O
if	O
(	O
fcall	int
)	O
{	O
struct	O
sinfo	struct
si	struct
;	O
if	O
(	O
i	int
==	O
0	int
&&	O
qsys	pointer
->	O
uuconf_qalternate	pointer
==	O
NULL	O
)	O
printf	function
(	O
" Call out"	pointer
)	O
;	O
else	O
printf	function
(	O
" This alternate applies when calling"	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zport	pointer
!=	O
NULL	O
||	O
qsys	pointer
->	O
uuconf_qport	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
" using "	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zport	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"port %s"	pointer
,	O
qsys	pointer
->	O
uuconf_zport	pointer
)	O
;	O
else	O
printf	function
(	O
"a specially defined port"	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_ibaud	long
!=	O
0	int
)	O
{	O
printf	function
(	O
" at speed %ld"	pointer
,	O
qsys	pointer
->	O
uuconf_ibaud	long
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_ihighbaud	long
!=	O
0	int
)	O
printf	function
(	O
" to %ld"	pointer
,	O
qsys	pointer
->	O
uuconf_ihighbaud	long
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
qsys	pointer
->	O
uuconf_ibaud	long
!=	O
0	int
)	O
{	O
printf	function
(	O
" at speed %ld"	pointer
,	O
qsys	pointer
->	O
uuconf_ibaud	long
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_ihighbaud	long
!=	O
0	int
)	O
printf	function
(	O
" to %ld"	pointer
,	O
qsys	pointer
->	O
uuconf_ihighbaud	long
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
else	O
printf	function
(	O
" using any port\n"	pointer
)	O
;	O
si	struct
.	O
puuconf	pointer
=	O
puuconf	pointer
;	O
si	struct
.	O
qsys	pointer
=	O
qsys	pointer
;	O
si	struct
.	O
fgot	int
=	O
FALSE	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_qport	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
" The port is defined as:\n"	pointer
)	O
;	O
(	O
void	O
)	O
ikshow_port	function
(	O
qsys	pointer
->	O
uuconf_qport	pointer
,	O
(	O
pointer	pointer
)	O
&	O
si	struct
)	O
;	O
}	O
else	O
{	O
struct	O
uuconf_port	struct
sdummy	struct
;	O
printf	function
(	O
" The possible ports are:\n"	pointer
)	O
;	O
iret	int
=	O
uuconf_find_port	function
(	O
puuconf	pointer
,	O
qsys	pointer
->	O
uuconf_zport	pointer
,	O
qsys	pointer
->	O
uuconf_ibaud	long
,	O
qsys	pointer
->	O
uuconf_ihighbaud	long
,	O
ikshow_port	function
,	O
(	O
pointer	pointer
)	O
&	O
si	struct
,	O
&	O
sdummy	struct
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_NOT_FOUND	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
if	O
(	O
!	O
si	struct
.	O
fgot	int
)	O
printf	function
(	O
" *** There are no matching ports\n"	pointer
)	O
;	O
}	O
if	O
(	O
qsys	pointer
->	O
uuconf_zphone	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
(	O
qsys	pointer
->	O
uuconf_zport	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
qsys	pointer
->	O
uuconf_zport	pointer
,	O
"TCP"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
qsys	pointer
->	O
uuconf_qport	pointer
!=	O
NULL	O
&&	O
(	O
qsys	pointer
->	O
uuconf_qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_TCP	int
||	O
qsys	pointer
->	O
uuconf_qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_TLI	int
)	O
)	O
)	O
printf	function
(	O
" Remote address %s\n"	pointer
,	O
qsys	pointer
->	O
uuconf_zphone	pointer
)	O
;	O
else	O
printf	function
(	O
" Phone number %s\n"	pointer
,	O
qsys	pointer
->	O
uuconf_zphone	pointer
)	O
;	O
}	O
ukshow_chat	function
(	O
&	O
qsys	pointer
->	O
uuconf_schat	struct
,	O
" Chat"	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zcall_login	pointer
!=	O
NULL	O
||	O
qsys	pointer
->	O
uuconf_zcall_password	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
zlogin	pointer
,	O
*	O
zpass	pointer
;	O
iret	int
=	O
uuconf_callout	function
(	O
puuconf	pointer
,	O
qsys	pointer
,	O
&	O
zlogin	pointer
,	O
&	O
zpass	pointer
)	O
;	O
if	O
(	O
iret	int
==	O
UUCONF_NOT_FOUND	O
)	O
printf	function
(	O
" Can not determine login name or password\n"	pointer
)	O
;	O
else	O
if	O
(	O
UUCONF_ERROR_VALUE	O
(	O
iret	int
)	O
==	O
UUCONF_FOPEN_FAILED	O
)	O
printf	function
(	O
" Can not read call out file\n"	pointer
)	O
;	O
else	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
;	O
else	O
{	O
if	O
(	O
zlogin	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
" Login name %s\n"	pointer
,	O
zlogin	pointer
)	O
;	O
free	function
(	O
(	O
pointer	pointer
)	O
zlogin	pointer
)	O
;	O
}	O
if	O
(	O
zpass	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
" Password %s\n"	pointer
,	O
zpass	pointer
)	O
;	O
free	function
(	O
(	O
pointer	pointer
)	O
zpass	pointer
)	O
;	O
}	O
}	O
}	O
qtime	pointer
=	O
qcompress_span	function
(	O
qsys	pointer
->	O
uuconf_qtimegrade	pointer
)	O
;	O
for	O
(	O
qspan	pointer
=	O
qtime	pointer
;	O
qspan	pointer
!=	O
NULL	O
;	O
qspan	pointer
=	O
qspan	pointer
->	O
uuconf_qnext	pointer
)	O
{	O
printf	function
(	O
" "	pointer
)	O
;	O
ukshow_time	function
(	O
qspan	pointer
)	O
;	O
printf	function
(	O
" may call if "	pointer
)	O
;	O
if	O
(	O
(	O
char	O
)	O
qspan	pointer
->	O
uuconf_ival	long
==	O
UUCONF_GRADE_LOW	O
)	O
printf	function
(	O
"any work"	pointer
)	O
;	O
else	O
printf	function
(	O
"work grade %c or higher"	pointer
,	O
(	O
char	O
)	O
qspan	pointer
->	O
uuconf_ival	long
)	O
;	O
if	O
(	O
qspan	pointer
->	O
uuconf_cretry	int
!=	O
0	int
)	O
printf	function
(	O
" (retry %d)"	pointer
,	O
qspan	pointer
->	O
uuconf_cretry	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
qsys	pointer
->	O
uuconf_cmax_retries	int
>	O
0	int
)	O
printf	function
(	O
" May retry the call up to %d times\n"	pointer
,	O
qsys	pointer
->	O
uuconf_cmax_retries	int
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_qcalltimegrade	pointer
!=	O
NULL	O
)	O
{	O
boolean	int
fprint	int
,	O
fother	int
;	O
qtime	pointer
=	O
qcompress_span	function
(	O
qsys	pointer
->	O
uuconf_qcalltimegrade	pointer
)	O
;	O
fprint	int
=	O
FALSE	O
;	O
fother	int
=	O
FALSE	O
;	O
if	O
(	O
qtime	pointer
->	O
uuconf_istart	int
!=	O
0	int
)	O
fother	int
=	O
TRUE	O
;	O
for	O
(	O
qspan	pointer
=	O
qtime	pointer
;	O
qspan	pointer
!=	O
NULL	O
;	O
qspan	pointer
=	O
qspan	pointer
->	O
uuconf_qnext	pointer
)	O
{	O
if	O
(	O
(	O
char	O
)	O
qspan	pointer
->	O
uuconf_ival	long
==	O
UUCONF_GRADE_LOW	O
)	O
{	O
fother	int
=	O
TRUE	O
;	O
continue	O
;	O
}	O
fprint	int
=	O
TRUE	O
;	O
printf	function
(	O
" "	pointer
)	O
;	O
ukshow_time	function
(	O
qspan	pointer
)	O
;	O
printf	function
(	O
" may accept work grade %c or higher\n"	pointer
,	O
(	O
char	O
)	O
qspan	pointer
->	O
uuconf_ival	long
)	O
;	O
if	O
(	O
qspan	pointer
->	O
uuconf_qnext	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
qspan	pointer
->	O
uuconf_iend	int
!=	O
7	int
*	O
24	int
*	O
60	int
)	O
fother	int
=	O
TRUE	O
;	O
}	O
else	O
{	O
if	O
(	O
qspan	pointer
->	O
uuconf_iend	int
!=	O
qspan	pointer
->	O
uuconf_qnext	pointer
->	O
uuconf_istart	int
)	O
fother	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
fprint	int
&&	O
fother	int
)	O
printf	function
(	O
" (At other times may accept any work)\n"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
fcalled	int
)	O
{	O
if	O
(	O
qsys	pointer
->	O
uuconf_qcalledtimegrade	pointer
!=	O
NULL	O
)	O
{	O
boolean	int
fprint	int
,	O
fother	int
;	O
qtime	pointer
=	O
qcompress_span	function
(	O
qsys	pointer
->	O
uuconf_qcalledtimegrade	pointer
)	O
;	O
fprint	int
=	O
FALSE	O
;	O
fother	int
=	O
FALSE	O
;	O
if	O
(	O
qtime	pointer
->	O
uuconf_istart	int
!=	O
0	int
)	O
fother	int
=	O
TRUE	O
;	O
for	O
(	O
qspan	pointer
=	O
qtime	pointer
;	O
qspan	pointer
!=	O
NULL	O
;	O
qspan	pointer
=	O
qspan	pointer
->	O
uuconf_qnext	pointer
)	O
{	O
if	O
(	O
(	O
char	O
)	O
qspan	pointer
->	O
uuconf_ival	long
==	O
UUCONF_GRADE_LOW	O
)	O
{	O
fother	int
=	O
TRUE	O
;	O
continue	O
;	O
}	O
fprint	int
=	O
TRUE	O
;	O
printf	function
(	O
" "	pointer
)	O
;	O
ukshow_time	function
(	O
qspan	pointer
)	O
;	O
printf	function
(	O
" will send work grade %c or higher\n"	pointer
,	O
(	O
char	O
)	O
qspan	pointer
->	O
uuconf_ival	long
)	O
;	O
if	O
(	O
qspan	pointer
->	O
uuconf_qnext	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
qspan	pointer
->	O
uuconf_iend	int
!=	O
7	int
*	O
24	int
*	O
60	int
)	O
fother	int
=	O
TRUE	O
;	O
}	O
else	O
{	O
if	O
(	O
qspan	pointer
->	O
uuconf_iend	int
!=	O
qspan	pointer
->	O
uuconf_qnext	pointer
->	O
uuconf_istart	int
)	O
fother	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
fprint	int
&&	O
fother	int
)	O
printf	function
(	O
" (At other times will send any work)\n"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
fcall	int
&&	O
qsys	pointer
->	O
uuconf_csuccess_wait	int
!=	O
0	int
)	O
printf	function
(	O
" Will wait %d seconds after a successful call\n"	pointer
,	O
qsys	pointer
->	O
uuconf_csuccess_wait	int
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_fsequence	int
)	O
printf	function
(	O
" Sequence numbers are used\n"	pointer
)	O
;	O
if	O
(	O
fcalled	int
)	O
ukshow_chat	function
(	O
&	O
qsys	pointer
->	O
uuconf_scalled_chat	struct
,	O
" When called, chat"	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zdebug	pointer
!=	O
NULL	O
)	O
printf	function
(	O
" Debugging level %s\n"	pointer
,	O
qsys	pointer
->	O
uuconf_zdebug	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zmax_remote_debug	pointer
!=	O
NULL	O
)	O
printf	function
(	O
" Max remote debugging level %s\n"	pointer
,	O
qsys	pointer
->	O
uuconf_zmax_remote_debug	pointer
)	O
;	O
if	O
(	O
fcall	int
)	O
{	O
ukshow_size	function
(	O
qsys	pointer
->	O
uuconf_qcall_local_size	pointer
,	O
TRUE	O
,	O
TRUE	O
)	O
;	O
ukshow_size	function
(	O
qsys	pointer
->	O
uuconf_qcall_remote_size	pointer
,	O
TRUE	O
,	O
FALSE	O
)	O
;	O
}	O
if	O
(	O
fcalled	int
)	O
{	O
ukshow_size	function
(	O
qsys	pointer
->	O
uuconf_qcalled_local_size	pointer
,	O
FALSE	O
,	O
TRUE	O
)	O
;	O
ukshow_size	function
(	O
qsys	pointer
->	O
uuconf_qcalled_remote_size	pointer
,	O
FALSE	O
,	O
FALSE	O
)	O
;	O
}	O
if	O
(	O
fcall	int
)	O
printf	function
(	O
" May %smake local requests when calling\n"	pointer
,	O
qsys	pointer
->	O
uuconf_fcall_transfer	int
?	O
""	pointer
:	O
"not "	pointer
)	O
;	O
if	O
(	O
fcalled	int
)	O
printf	function
(	O
" May %smake local requests when called\n"	pointer
,	O
qsys	pointer
->	O
uuconf_fcalled_transfer	int
?	O
""	pointer
:	O
"not "	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_fcall_transfer	int
||	O
qsys	pointer
->	O
uuconf_fcalled_transfer	int
)	O
{	O
printf	function
(	O
" May send by local request:"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzlocal_send	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
!	O
qsys	pointer
->	O
uuconf_fsend_request	int
)	O
printf	function
(	O
" May not send files by remote request\n"	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
" May send by remote request:"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzremote_send	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
qsys	pointer
->	O
uuconf_fcall_transfer	int
||	O
qsys	pointer
->	O
uuconf_fcalled_transfer	int
)	O
{	O
printf	function
(	O
" May accept by local request:"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzlocal_receive	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
!	O
qsys	pointer
->	O
uuconf_frec_request	int
)	O
printf	function
(	O
" May not receive files by remote request\n"	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
" May receive by remote request:"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzremote_receive	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
printf	function
(	O
" May execute"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzcmds	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
" Execution path"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzpath	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_cfree_space	long
!=	O
0	int
)	O
printf	function
(	O
" Will leave %ld bytes available\n"	pointer
,	O
qsys	pointer
->	O
uuconf_cfree_space	long
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zpubdir	pointer
!=	O
NULL	O
)	O
printf	function
(	O
" Public directory is %s\n"	pointer
,	O
qsys	pointer
->	O
uuconf_zpubdir	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_pzforward_from	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
" May forward from"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzforward_from	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
qsys	pointer
->	O
uuconf_pzforward_to	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
" May forward to"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qsys	pointer
->	O
uuconf_pzforward_to	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
qsys	pointer
->	O
uuconf_cmax_file_time	long
>	O
0	int
)	O
printf	function
(	O
" Maximum file send time: %ld\n"	pointer
,	O
qsys	pointer
->	O
uuconf_cmax_file_time	long
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
printf	function
(	O
" Will use protocols %s\n"	pointer
,	O
qsys	pointer
->	O
uuconf_zprotocols	pointer
)	O
;	O
else	O
printf	function
(	O
" Will use any known protocol\n"	pointer
)	O
;	O
if	O
(	O
qsys	pointer
->	O
uuconf_qproto_params	pointer
!=	O
NULL	O
)	O
ukshow_proto_params	function
(	O
qsys	pointer
->	O
uuconf_qproto_params	pointer
,	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
fanycall	int
)	O
printf	function
(	O
" Calls will never be placed to this system\n"	pointer
)	O
;	O
}	O
static	O
int	O
ikshow_port	function
(	O
qport	pointer
,	O
pinfo	pointer
)	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
pointer	pointer
pinfo	pointer
;	O
{	O
struct	O
sinfo	struct
*	O
qi	pointer
=	O
(	O
struct	O
sinfo	struct
*	O
)	O
pinfo	pointer
;	O
char	O
*	O
*	O
pz	pointer
;	O
struct	O
uuconf_modem_port	struct
*	O
qmodem	pointer
;	O
struct	O
uuconf_tcp_port	struct
*	O
qtcp	pointer
;	O
struct	O
uuconf_tli_port	struct
*	O
qtli	pointer
;	O
struct	O
uuconf_pipe_port	struct
*	O
qpipe	pointer
;	O
qi	pointer
->	O
fgot	int
=	O
TRUE	O
;	O
printf	function
(	O
"  Port name %s\n"	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
)	O
;	O
switch	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
)	O
{	O
case	O
UUCONF_PORTTYPE_STDIN	int
:	O
printf	function
(	O
"   Port type stdin\n"	pointer
)	O
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_DIRECT	int
:	O
printf	function
(	O
"   Port type direct\n"	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_zdevice	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"   Device %s\n"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_zdevice	pointer
)	O
;	O
else	O
printf	function
(	O
"   Using port name as device name\n"	pointer
)	O
;	O
printf	function
(	O
"   Speed %ld\n"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_ibaud	long
)	O
;	O
printf	function
(	O
"   Carrier %savailable\n"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_fcarrier	int
?	O
""	pointer
:	O
"not "	pointer
)	O
;	O
printf	function
(	O
"   Hardware flow control %savailable\n"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_fhardflow	int
?	O
""	pointer
:	O
"not "	pointer
)	O
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_MODEM	int
:	O
qmodem	pointer
=	O
&	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
;	O
printf	function
(	O
"   Port type modem\n"	pointer
)	O
;	O
if	O
(	O
qmodem	pointer
->	O
uuconf_zdevice	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"   Device %s\n"	pointer
,	O
qmodem	pointer
->	O
uuconf_zdevice	pointer
)	O
;	O
else	O
printf	function
(	O
"   Using port name as device name\n"	pointer
)	O
;	O
if	O
(	O
qmodem	pointer
->	O
uuconf_zdial_device	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"   Dial device %s\n"	pointer
,	O
qmodem	pointer
->	O
uuconf_zdial_device	pointer
)	O
;	O
printf	function
(	O
"   Speed %ld\n"	pointer
,	O
qmodem	pointer
->	O
uuconf_ibaud	long
)	O
;	O
if	O
(	O
qmodem	pointer
->	O
uuconf_ilowbaud	long
!=	O
qmodem	pointer
->	O
uuconf_ihighbaud	long
)	O
printf	function
(	O
"   Speed range %ld to %ld\n"	pointer
,	O
qmodem	pointer
->	O
uuconf_ilowbaud	long
,	O
qmodem	pointer
->	O
uuconf_ihighbaud	long
)	O
;	O
printf	function
(	O
"   Carrier %savailable\n"	pointer
,	O
qmodem	pointer
->	O
uuconf_fcarrier	int
?	O
""	pointer
:	O
"not "	pointer
)	O
;	O
printf	function
(	O
"   Hardware flow control %savailable\n"	pointer
,	O
qmodem	pointer
->	O
uuconf_fhardflow	int
?	O
""	pointer
:	O
"not "	pointer
)	O
;	O
if	O
(	O
qmodem	pointer
->	O
uuconf_qdialer	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
"   Specially defined dialer\n"	pointer
)	O
;	O
ukshow_dialer	function
(	O
qmodem	pointer
->	O
uuconf_qdialer	pointer
)	O
;	O
}	O
else	O
if	O
(	O
qmodem	pointer
->	O
uuconf_pzdialer	pointer
!=	O
NULL	O
&&	O
qmodem	pointer
->	O
uuconf_pzdialer	pointer
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
struct	O
uuconf_dialer	struct
sdial	struct
;	O
int	O
iret	int
;	O
if	O
(	O
qmodem	pointer
->	O
uuconf_pzdialer	pointer
[	O
1	int
]	O
==	O
NULL	O
||	O
qmodem	pointer
->	O
uuconf_pzdialer	pointer
[	O
2	int
]	O
==	O
NULL	O
)	O
{	O
iret	int
=	O
uuconf_dialer_info	function
(	O
qi	pointer
->	O
puuconf	pointer
,	O
qmodem	pointer
->	O
uuconf_pzdialer	pointer
[	O
0	int
]	O
,	O
&	O
sdial	struct
)	O
;	O
if	O
(	O
iret	int
==	O
UUCONF_NOT_FOUND	O
)	O
printf	function
(	O
"   *** No dialer %s\n"	pointer
,	O
qmodem	pointer
->	O
uuconf_pzdialer	pointer
[	O
0	int
]	O
)	O
;	O
else	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
qi	pointer
->	O
puuconf	pointer
,	O
iret	int
)	O
;	O
else	O
{	O
printf	function
(	O
"   Dialer %s\n"	pointer
,	O
qmodem	pointer
->	O
uuconf_pzdialer	pointer
[	O
0	int
]	O
)	O
;	O
ukshow_dialer	function
(	O
&	O
sdial	struct
)	O
;	O
if	O
(	O
qmodem	pointer
->	O
uuconf_pzdialer	pointer
[	O
1	int
]	O
!=	O
NULL	O
)	O
printf	function
(	O
"   Token %s\n"	pointer
,	O
qmodem	pointer
->	O
uuconf_pzdialer	pointer
[	O
1	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
pz	pointer
=	O
qmodem	pointer
->	O
uuconf_pzdialer	pointer
;	O
while	O
(	O
*	O
pz	pointer
!=	O
NULL	O
)	O
{	O
iret	int
=	O
uuconf_dialer_info	function
(	O
qi	pointer
->	O
puuconf	pointer
,	O
*	O
pz	pointer
,	O
&	O
sdial	struct
)	O
;	O
if	O
(	O
iret	int
==	O
UUCONF_NOT_FOUND	O
)	O
printf	function
(	O
"   *** No dialer %s\n"	pointer
,	O
*	O
pz	pointer
)	O
;	O
else	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
ukuuconf_error	function
(	O
qi	pointer
->	O
puuconf	pointer
,	O
iret	int
)	O
;	O
else	O
{	O
printf	function
(	O
"   Dialer %s\n"	pointer
,	O
*	O
pz	pointer
)	O
;	O
ukshow_dialer	function
(	O
&	O
sdial	struct
)	O
;	O
}	O
++	O
pz	pointer
;	O
if	O
(	O
*	O
pz	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
"   Token %s\n"	pointer
,	O
*	O
pz	pointer
)	O
;	O
++	O
pz	pointer
;	O
}	O
}	O
}	O
}	O
else	O
printf	function
(	O
"   *** No dialer information\n"	pointer
)	O
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_TCP	int
:	O
qtcp	pointer
=	O
&	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
;	O
printf	function
(	O
"   Port type tcp\n"	pointer
)	O
;	O
printf	function
(	O
"   TCP service %s\n"	pointer
,	O
qtcp	pointer
->	O
uuconf_zport	pointer
)	O
;	O
if	O
(	O
qtcp	pointer
->	O
uuconf_iversion	int
!=	O
0	int
)	O
printf	function
(	O
"   IP version %d\n"	pointer
,	O
qtcp	pointer
->	O
uuconf_iversion	int
)	O
;	O
if	O
(	O
qtcp	pointer
->	O
uuconf_pzdialer	pointer
!=	O
NULL	O
&&	O
qtcp	pointer
->	O
uuconf_pzdialer	pointer
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
printf	function
(	O
"   Dialer sequence"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qtcp	pointer
->	O
uuconf_pzdialer	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
break	O
;	O
case	O
UUCONF_PORTTYPE_TLI	int
:	O
qtli	pointer
=	O
&	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stli	struct
;	O
printf	function
(	O
"   Port type TLI%s\n"	pointer
,	O
qtli	pointer
->	O
uuconf_fstream	int
?	O
"S"	pointer
:	O
""	pointer
)	O
;	O
if	O
(	O
qtli	pointer
->	O
uuconf_zdevice	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"   Device %s\n"	pointer
,	O
qtli	pointer
->	O
uuconf_zdevice	pointer
)	O
;	O
else	O
printf	function
(	O
"   Using port name as device name\n"	pointer
)	O
;	O
if	O
(	O
qtli	pointer
->	O
uuconf_pzpush	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
"   Push"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qtli	pointer
->	O
uuconf_pzpush	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
qtli	pointer
->	O
uuconf_pzdialer	pointer
!=	O
NULL	O
&&	O
qtli	pointer
->	O
uuconf_pzdialer	pointer
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
printf	function
(	O
"   Dialer sequence"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qtli	pointer
->	O
uuconf_pzdialer	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
qtli	pointer
->	O
uuconf_zservaddr	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"   Server address %s\n"	pointer
,	O
qtli	pointer
->	O
uuconf_zservaddr	pointer
)	O
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_PIPE	int
:	O
qpipe	pointer
=	O
&	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_spipe	struct
;	O
printf	function
(	O
"   Port type pipe\n"	pointer
)	O
;	O
if	O
(	O
qpipe	pointer
->	O
uuconf_pzcmd	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
"   Command"	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qpipe	pointer
->	O
uuconf_pzcmd	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"   CAN'T HAPPEN\n"	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
qport	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"   Will use protocols %s\n"	pointer
,	O
qport	pointer
->	O
uuconf_zprotocols	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_zlockname	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"   Will use lockname %s\n"	pointer
,	O
qport	pointer
->	O
uuconf_zlockname	pointer
)	O
;	O
if	O
(	O
(	O
qport	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_SPECIFIED	O
)	O
!=	O
0	int
)	O
ukshow_reliable	function
(	O
qport	pointer
->	O
uuconf_ireliable	int
,	O
"   "	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_qproto_params	pointer
!=	O
NULL	O
)	O
ukshow_proto_params	function
(	O
qport	pointer
->	O
uuconf_qproto_params	pointer
,	O
3	int
)	O
;	O
return	O
UUCONF_NOT_FOUND	O
;	O
}	O
static	O
void	O
ukshow_dialer	function
(	O
q	pointer
)	O
struct	O
uuconf_dialer	struct
*	O
q	pointer
;	O
{	O
ukshow_chat	function
(	O
&	O
q	pointer
->	O
uuconf_schat	struct
,	O
"    Chat"	pointer
)	O
;	O
printf	function
(	O
"    Wait for dialtone %s\n"	pointer
,	O
q	pointer
->	O
uuconf_zdialtone	pointer
)	O
;	O
printf	function
(	O
"    Pause while dialing %s\n"	pointer
,	O
q	pointer
->	O
uuconf_zpause	pointer
)	O
;	O
printf	function
(	O
"    Carrier %savailable\n"	pointer
,	O
q	pointer
->	O
uuconf_fcarrier	int
?	O
""	pointer
:	O
"not "	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_fcarrier	int
)	O
printf	function
(	O
"    Wait %d seconds for carrier\n"	pointer
,	O
q	pointer
->	O
uuconf_ccarrier_wait	int
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_fdtr_toggle	int
)	O
{	O
printf	function
(	O
"    Toggle DTR"	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_fdtr_toggle_wait	int
)	O
printf	function
(	O
" and wait"	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
ukshow_chat	function
(	O
&	O
q	pointer
->	O
uuconf_scomplete	struct
,	O
"    When complete chat"	pointer
)	O
;	O
ukshow_chat	function
(	O
&	O
q	pointer
->	O
uuconf_sabort	struct
,	O
"    When aborting chat"	pointer
)	O
;	O
if	O
(	O
(	O
q	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_SPECIFIED	O
)	O
!=	O
0	int
)	O
ukshow_reliable	function
(	O
q	pointer
->	O
uuconf_ireliable	int
,	O
"   "	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_qproto_params	pointer
!=	O
NULL	O
)	O
ukshow_proto_params	function
(	O
q	pointer
->	O
uuconf_qproto_params	pointer
,	O
4	int
)	O
;	O
}	O
static	O
void	O
ukshow_chat	function
(	O
qchat	pointer
,	O
zhdr	pointer
)	O
const	O
struct	O
uuconf_chat	struct
*	O
qchat	pointer
;	O
const	O
char	O
*	O
zhdr	pointer
;	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
if	O
(	O
qchat	pointer
->	O
uuconf_pzprogram	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
"%s program"	pointer
,	O
zhdr	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qchat	pointer
->	O
uuconf_pzprogram	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
qchat	pointer
->	O
uuconf_pzchat	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
"%s script"	pointer
,	O
zhdr	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qchat	pointer
->	O
uuconf_pzchat	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
if	O
(	O
(	O
*	O
pz	pointer
)	O
[	O
0	int
]	O
!=	O
'-'	O
||	O
pz	pointer
==	O
qchat	pointer
->	O
uuconf_pzchat	pointer
)	O
printf	function
(	O
" "	pointer
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"%s script timeout %d\n"	pointer
,	O
zhdr	pointer
,	O
qchat	pointer
->	O
uuconf_ctimeout	int
)	O
;	O
if	O
(	O
qchat	pointer
->	O
uuconf_pzfail	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
"%s failure strings"	pointer
,	O
zhdr	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
qchat	pointer
->	O
uuconf_pzfail	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
qchat	pointer
->	O
uuconf_fstrip	int
)	O
printf	function
(	O
"%s script incoming bytes stripped to seven bits\n"	pointer
,	O
zhdr	pointer
)	O
;	O
}	O
}	O
static	O
void	O
ukshow_size	function
(	O
qspan	pointer
,	O
fcall	int
,	O
flocal	int
)	O
struct	O
uuconf_timespan	struct
*	O
qspan	pointer
;	O
boolean	int
fcall	int
;	O
boolean	int
flocal	int
;	O
{	O
struct	O
uuconf_timespan	struct
*	O
q	pointer
;	O
boolean	int
fother	int
;	O
qspan	pointer
=	O
qcompress_span	function
(	O
qspan	pointer
)	O
;	O
if	O
(	O
qspan	pointer
==	O
NULL	O
)	O
return	O
;	O
printf	function
(	O
" If call%s the following applies to a %s request:\n"	pointer
,	O
fcall	int
?	O
"ing"	pointer
:	O
"ed"	pointer
,	O
flocal	int
?	O
"local"	pointer
:	O
"remote"	pointer
)	O
;	O
fother	int
=	O
FALSE	O
;	O
if	O
(	O
qspan	pointer
->	O
uuconf_istart	int
>=	O
60	int
)	O
fother	int
=	O
TRUE	O
;	O
for	O
(	O
q	pointer
=	O
qspan	pointer
;	O
q	pointer
!=	O
NULL	O
;	O
q	pointer
=	O
q	pointer
->	O
uuconf_qnext	pointer
)	O
{	O
printf	function
(	O
"  "	pointer
)	O
;	O
ukshow_time	function
(	O
q	pointer
)	O
;	O
printf	function
(	O
" may transfer files %ld bytes or smaller\n"	pointer
,	O
q	pointer
->	O
uuconf_ival	long
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_qnext	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
q	pointer
->	O
uuconf_iend	int
<=	O
6	int
*	O
24	int
*	O
60	int
+	O
23	int
*	O
60	int
)	O
fother	int
=	O
TRUE	O
;	O
}	O
else	O
{	O
if	O
(	O
q	pointer
->	O
uuconf_iend	int
+	O
60	int
<=	O
q	pointer
->	O
uuconf_qnext	pointer
->	O
uuconf_istart	int
)	O
fother	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
fother	int
)	O
printf	function
(	O
"  (At other times may send files of any size)\n"	pointer
)	O
;	O
}	O
static	O
void	O
ukshow_reliable	function
(	O
i	int
,	O
zhdr	pointer
)	O
int	O
i	int
;	O
const	O
char	O
*	O
zhdr	pointer
;	O
{	O
printf	function
(	O
"%sCharacteristics:"	pointer
,	O
zhdr	pointer
)	O
;	O
if	O
(	O
(	O
i	int
&	O
UUCONF_RELIABLE_EIGHT	O
)	O
!=	O
0	int
)	O
printf	function
(	O
" eight-bit-clean"	pointer
)	O
;	O
else	O
printf	function
(	O
" not-eight-bit-clean"	pointer
)	O
;	O
if	O
(	O
(	O
i	int
&	O
UUCONF_RELIABLE_RELIABLE	O
)	O
!=	O
0	int
)	O
printf	function
(	O
" reliable"	pointer
)	O
;	O
if	O
(	O
(	O
i	int
&	O
UUCONF_RELIABLE_ENDTOEND	O
)	O
!=	O
0	int
)	O
printf	function
(	O
" end-to-end"	pointer
)	O
;	O
if	O
(	O
(	O
i	int
&	O
UUCONF_RELIABLE_FULLDUPLEX	O
)	O
!=	O
0	int
)	O
printf	function
(	O
" fullduplex"	pointer
)	O
;	O
else	O
printf	function
(	O
" halfduplex"	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
ukshow_proto_params	function
(	O
pas	pointer
,	O
cindent	int
)	O
struct	O
uuconf_proto_param	struct
*	O
pas	pointer
;	O
int	O
cindent	int
;	O
{	O
struct	O
uuconf_proto_param	struct
*	O
q	pointer
;	O
for	O
(	O
q	pointer
=	O
pas	pointer
;	O
q	pointer
->	O
uuconf_bproto	int
!=	O
'\0'	O
;	O
q	pointer
++	O
)	O
{	O
int	O
i	int
;	O
struct	O
uuconf_proto_param_entry	struct
*	O
qe	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cindent	int
;	O
i	int
++	O
)	O
printf	function
(	O
" "	pointer
)	O
;	O
printf	function
(	O
"For protocol %c will use the following parameters\n"	pointer
,	O
q	pointer
->	O
uuconf_bproto	int
)	O
;	O
for	O
(	O
qe	pointer
=	O
q	pointer
->	O
uuconf_qentries	pointer
;	O
qe	pointer
->	O
uuconf_cargs	int
>	O
0	int
;	O
qe	pointer
++	O
)	O
{	O
int	O
ia	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cindent	int
;	O
i	int
++	O
)	O
printf	function
(	O
" "	pointer
)	O
;	O
for	O
(	O
ia	int
=	O
0	int
;	O
ia	int
<	O
qe	pointer
->	O
uuconf_cargs	int
;	O
ia	int
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
qe	pointer
->	O
uuconf_pzargs	pointer
[	O
ia	int
]	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
}	O
}	O
static	O
void	O
ukshow_time	function
(	O
q	pointer
)	O
const	O
struct	O
uuconf_timespan	struct
*	O
q	pointer
;	O
{	O
int	O
idaystart	int
,	O
idayend	int
;	O
int	O
ihourstart	int
,	O
ihourend	int
;	O
int	O
iminutestart	int
,	O
iminuteend	int
;	O
const	O
char	O
*	O
const	O
zdays	pointer
=	O
"Sun\0Mon\0Tue\0Wed\0Thu\0Fri\0Sat\0Sun"	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_istart	int
==	O
0	int
&&	O
q	pointer
->	O
uuconf_iend	int
==	O
7	int
*	O
24	int
*	O
60	int
)	O
{	O
printf	function
(	O
"At any time"	pointer
)	O
;	O
return	O
;	O
}	O
idaystart	int
=	O
q	pointer
->	O
uuconf_istart	int
/	O
(	O
24	int
*	O
60	int
)	O
;	O
ihourstart	int
=	O
(	O
q	pointer
->	O
uuconf_istart	int
%	O
(	O
24	int
*	O
60	int
)	O
)	O
/	O
60	int
;	O
iminutestart	int
=	O
q	pointer
->	O
uuconf_istart	int
%	O
60	int
;	O
idayend	int
=	O
q	pointer
->	O
uuconf_iend	int
/	O
(	O
24	int
*	O
60	int
)	O
;	O
ihourend	int
=	O
(	O
q	pointer
->	O
uuconf_iend	int
%	O
(	O
24	int
*	O
60	int
)	O
)	O
/	O
60	int
;	O
iminuteend	int
=	O
q	pointer
->	O
uuconf_iend	int
%	O
60	int
;	O
if	O
(	O
idaystart	int
==	O
idayend	int
)	O
printf	function
(	O
"%s from %02d:%02d to %02d:%02d"	pointer
,	O
zdays	pointer
+	O
idaystart	int
*	O
4	int
,	O
ihourstart	int
,	O
iminutestart	int
,	O
ihourend	int
,	O
iminuteend	int
)	O
;	O
else	O
printf	function
(	O
"From %s %02d:%02d to %s %02d:%02d"	pointer
,	O
zdays	pointer
+	O
idaystart	int
*	O
4	int
,	O
ihourstart	int
,	O
iminutestart	int
,	O
zdays	pointer
+	O
idayend	int
*	O
4	int
,	O
ihourend	int
,	O
iminuteend	int
)	O
;	O
}	O
static	O
struct	O
uuconf_timespan	struct
*	O
qcompress_span	function
(	O
qlist	pointer
)	O
struct	O
uuconf_timespan	struct
*	O
qlist	pointer
;	O
{	O
struct	O
uuconf_timespan	struct
*	O
*	O
pq	pointer
;	O
pq	pointer
=	O
&	O
qlist	pointer
;	O
while	O
(	O
*	O
pq	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_qnext	pointer
!=	O
NULL	O
&&	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_iend	int
==	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_qnext	pointer
->	O
uuconf_istart	int
&&	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_ival	long
==	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_qnext	pointer
->	O
uuconf_ival	long
)	O
{	O
struct	O
uuconf_timespan	struct
*	O
qnext	pointer
;	O
qnext	pointer
=	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_qnext	pointer
;	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_qnext	pointer
=	O
qnext	pointer
->	O
uuconf_qnext	pointer
;	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_iend	int
=	O
qnext	pointer
->	O
uuconf_iend	int
;	O
}	O
else	O
pq	pointer
=	O
&	O
(	O
*	O
pq	pointer
)	O
->	O
uuconf_qnext	pointer
;	O
}	O
return	O
qlist	pointer
;	O
}	O
static	O
void	O
ukuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
pointer	pointer
puuconf	pointer
;	O
int	O
iret	int
;	O
{	O
char	O
ab	array
[	O
512	int
]	O
;	O
(	O
void	O
)	O
uuconf_error_string	function
(	O
puuconf	pointer
,	O
iret	int
,	O
ab	array
,	O
sizeof	O
ab	array
)	O
;	O
if	O
(	O
(	O
iret	int
&	O
UUCONF_ERROR_FILENAME	O
)	O
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s\n"	pointer
,	O
zKprogram	pointer
,	O
ab	array
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s:%s\n"	pointer
,	O
zKprogram	pointer
,	O
ab	array
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
