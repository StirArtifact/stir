static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: bt_open.c,v 1.4 2000/06/28 16:47:00 loic Exp $"	pointer
;	O
int	O
CDB___bam_open	function
(	O
dbp	pointer
,	O
name	pointer
,	O
base_pgno	int
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
db_pgno_t	int
base_pgno	int
;	O
u_int32_t	int
flags	int
;	O
{	O
BTREE	struct
*	O
t	pointer
;	O
t	pointer
=	O
dbp	pointer
->	O
bt_internal	pointer
;	O
dbp	pointer
->	O
del	pointer
=	O
CDB___bam_delete	function
;	O
dbp	pointer
->	O
key_range	pointer
=	O
CDB___bam_key_range	function
;	O
dbp	pointer
->	O
stat	pointer
=	O
CDB___bam_stat	function
;	O
if	O
(	O
t	pointer
->	O
bt_compare	pointer
==	O
CDB___bam_defcmp	function
&&	O
t	pointer
->	O
bt_prefix	pointer
!=	O
CDB___bam_defpfx	function
)	O
{	O
CDB___db_err	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"prefix comparison may not be specified for default comparison routine"	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
return	O
(	O
CDB___bam_read_root	function
(	O
dbp	pointer
,	O
name	pointer
,	O
base_pgno	int
,	O
flags	int
)	O
)	O
;	O
}	O
int	O
CDB___bam_metachk	function
(	O
dbp	pointer
,	O
name	pointer
,	O
btm	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
BTMETA	struct
*	O
btm	pointer
;	O
{	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
u_int32_t	int
vers	int
;	O
int	O
ret	int
;	O
dbenv	pointer
=	O
dbp	pointer
->	O
dbenv	pointer
;	O
vers	int
=	O
btm	pointer
->	O
dbmeta	struct
.	O
version	int
;	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_SWAP	int
)	O
)	O
M_32_SWAP	O
(	O
vers	int
)	O
;	O
switch	O
(	O
vers	int
)	O
{	O
case	O
6	int
:	O
case	O
7	int
:	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: btree version %lu requires a version upgrade"	pointer
,	O
name	pointer
,	O
(	O
u_long	long
)	O
vers	int
)	O
;	O
return	O
(	O
DB_OLD_VERSION	O
)	O
;	O
case	O
8	int
:	O
break	O
;	O
default	O
:	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: unsupported btree version: %lu"	pointer
,	O
name	pointer
,	O
(	O
u_long	long
)	O
vers	int
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_SWAP	int
)	O
&&	O
(	O
ret	int
=	O
CDB___bam_mswap	function
(	O
(	O
PAGE	struct
*	O
)	O
btm	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_fchk	function
(	O
dbenv	pointer
,	O
"DB->open"	pointer
,	O
btm	pointer
->	O
dbmeta	struct
.	O
flags	int
,	O
BTM_MASK	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
&	O
btm	pointer
->	O
dbmeta	struct
,	O
BTM_RECNO	int
)	O
)	O
{	O
if	O
(	O
dbp	pointer
->	O
type	enum
==	O
DB_BTREE	int
)	O
goto	O
wrong_type	O
;	O
dbp	pointer
->	O
type	enum
=	O
DB_RECNO	int
;	O
DB_ILLEGAL_METHOD	O
(	O
dbp	pointer
,	O
DB_OK_RECNO	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
dbp	pointer
->	O
type	enum
==	O
DB_RECNO	int
)	O
goto	O
wrong_type	O
;	O
dbp	pointer
->	O
type	enum
=	O
DB_BTREE	int
;	O
DB_ILLEGAL_METHOD	O
(	O
dbp	pointer
,	O
DB_OK_BTREE	int
)	O
;	O
}	O
if	O
(	O
F_ISSET	O
(	O
&	O
btm	pointer
->	O
dbmeta	struct
,	O
BTM_DUP	int
)	O
)	O
F_SET	O
(	O
dbp	pointer
,	O
DB_AM_DUP	int
)	O
;	O
else	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_DUP	int
)	O
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: DB_DUP specified to open method but not set in database"	pointer
,	O
name	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
if	O
(	O
F_ISSET	O
(	O
&	O
btm	pointer
->	O
dbmeta	struct
,	O
BTM_RECNUM	int
)	O
)	O
{	O
if	O
(	O
dbp	pointer
->	O
type	enum
!=	O
DB_BTREE	int
)	O
goto	O
wrong_type	O
;	O
F_SET	O
(	O
dbp	pointer
,	O
DB_BT_RECNUM	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_fcchk	function
(	O
dbenv	pointer
,	O
"DB->open"	pointer
,	O
dbp	pointer
->	O
flags	int
,	O
DB_AM_DUP	int
,	O
DB_BT_RECNUM	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
else	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_BT_RECNUM	int
)	O
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: DB_RECNUM specified to open method but not set in database"	pointer
,	O
name	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
if	O
(	O
F_ISSET	O
(	O
&	O
btm	pointer
->	O
dbmeta	struct
,	O
BTM_FIXEDLEN	int
)	O
)	O
{	O
if	O
(	O
dbp	pointer
->	O
type	enum
!=	O
DB_RECNO	int
)	O
goto	O
wrong_type	O
;	O
F_SET	O
(	O
dbp	pointer
,	O
DB_RE_FIXEDLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_RE_FIXEDLEN	int
)	O
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: DB_FIXEDLEN specified to open method but not set in database"	pointer
,	O
name	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
if	O
(	O
F_ISSET	O
(	O
&	O
btm	pointer
->	O
dbmeta	struct
,	O
BTM_RENUMBER	int
)	O
)	O
{	O
if	O
(	O
dbp	pointer
->	O
type	enum
!=	O
DB_RECNO	int
)	O
goto	O
wrong_type	O
;	O
F_SET	O
(	O
dbp	pointer
,	O
DB_RE_RENUMBER	int
)	O
;	O
}	O
else	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_RE_RENUMBER	int
)	O
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: DB_RENUMBER specified to open method but not set in database"	pointer
,	O
name	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
if	O
(	O
F_ISSET	O
(	O
&	O
btm	pointer
->	O
dbmeta	struct
,	O
BTM_SUBDB	int
)	O
)	O
F_SET	O
(	O
dbp	pointer
,	O
DB_AM_SUBDB	int
)	O
;	O
else	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_SUBDB	int
)	O
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: multiple databases specified but not supported by file"	pointer
,	O
name	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
if	O
(	O
F_ISSET	O
(	O
&	O
btm	pointer
->	O
dbmeta	struct
,	O
BTM_DUPSORT	int
)	O
)	O
{	O
if	O
(	O
dbp	pointer
->	O
dup_compare	pointer
==	O
NULL	O
)	O
dbp	pointer
->	O
dup_compare	pointer
=	O
CDB___bam_defcmp	function
;	O
F_SET	O
(	O
dbp	pointer
,	O
DB_AM_DUPSORT	int
)	O
;	O
}	O
else	O
if	O
(	O
dbp	pointer
->	O
dup_compare	pointer
!=	O
NULL	O
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: duplicate sort specified but not supported in database"	pointer
,	O
name	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
dbp	pointer
->	O
pgsize	int
=	O
btm	pointer
->	O
dbmeta	struct
.	O
pagesize	long
;	O
memcpy	function
(	O
dbp	pointer
->	O
fileid	array
,	O
btm	pointer
->	O
dbmeta	struct
.	O
uid	array
,	O
DB_FILE_ID_LEN	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
wrong_type	O
:	O
if	O
(	O
dbp	pointer
->	O
type	enum
==	O
DB_BTREE	int
)	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"open method type is Btree, database type is Recno"	pointer
)	O
;	O
else	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"open method type is Recno, database type is Btree"	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
int	O
CDB___bam_read_root	function
(	O
dbp	pointer
,	O
name	pointer
,	O
base_pgno	int
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
db_pgno_t	int
base_pgno	int
;	O
u_int32_t	int
flags	int
;	O
{	O
BTMETA	struct
*	O
meta	pointer
;	O
BTREE	struct
*	O
t	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_LSN	struct
orig_lsn	struct
;	O
DB_LOCK	struct
metalock	struct
;	O
PAGE	struct
*	O
root	int
;	O
int	O
locked	int
,	O
ret	int
,	O
t_ret	int
;	O
ret	int
=	O
0	int
;	O
t	pointer
=	O
dbp	pointer
->	O
bt_internal	pointer
;	O
meta	pointer
=	O
NULL	O
;	O
root	int
=	O
NULL	O
;	O
locked	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
cursor	pointer
(	O
dbp	pointer
,	O
dbp	pointer
->	O
open_txn	pointer
,	O
&	O
dbc	pointer
,	O
LF_ISSET	O
(	O
DB_CREATE	int
)	O
&&	O
LOCKING	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
?	O
DB_WRITECURSOR	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
base_pgno	int
,	O
DB_LOCK_READ	int
,	O
0	int
,	O
&	O
metalock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
base_pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
(	O
PAGE	struct
*	O
*	O
)	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
again	O
:	O
if	O
(	O
meta	pointer
->	O
dbmeta	struct
.	O
magic	int
!=	O
0	int
)	O
{	O
t	pointer
->	O
bt_maxkey	int
=	O
meta	pointer
->	O
maxkey	int
;	O
t	pointer
->	O
bt_minkey	int
=	O
meta	pointer
->	O
minkey	int
;	O
t	pointer
->	O
re_pad	int
=	O
meta	pointer
->	O
re_pad	int
;	O
t	pointer
->	O
re_len	int
=	O
meta	pointer
->	O
re_len	int
;	O
t	pointer
->	O
bt_meta	int
=	O
base_pgno	int
;	O
t	pointer
->	O
bt_root	int
=	O
meta	pointer
->	O
root	int
;	O
(	O
void	O
)	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
meta	pointer
,	O
0	int
)	O
;	O
meta	pointer
=	O
NULL	O
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
IS_RECOVERING	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
)	O
goto	O
done	O
;	O
if	O
(	O
LOCKING	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
)	O
{	O
DB_ASSERT	O
(	O
LF_ISSET	O
(	O
DB_CREATE	int
)	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_lock_get	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
dbc	pointer
->	O
locker	int
,	O
DB_LOCK_UPGRADE	int
,	O
&	O
dbc	pointer
->	O
lock_dbt	struct
,	O
DB_LOCK_WRITE	int
,	O
&	O
dbc	pointer
->	O
mylock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
}	O
if	O
(	O
locked	int
==	O
0	int
&&	O
STD_LOCKING	O
(	O
dbc	pointer
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
__LPUT	O
(	O
dbc	pointer
,	O
metalock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
base_pgno	int
,	O
DB_LOCK_WRITE	int
,	O
0	int
,	O
&	O
metalock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
locked	int
=	O
1	int
;	O
goto	O
again	O
;	O
}	O
orig_lsn	struct
=	O
meta	pointer
->	O
dbmeta	struct
.	O
lsn	struct
;	O
memset	function
(	O
meta	pointer
,	O
0	int
,	O
sizeof	O
(	O
BTMETA	struct
)	O
)	O
;	O
meta	pointer
->	O
dbmeta	struct
.	O
lsn	struct
=	O
orig_lsn	struct
;	O
meta	pointer
->	O
dbmeta	struct
.	O
pgno	int
=	O
base_pgno	int
;	O
meta	pointer
->	O
dbmeta	struct
.	O
magic	int
=	O
DB_BTREEMAGIC	int
;	O
meta	pointer
->	O
dbmeta	struct
.	O
version	int
=	O
DB_BTREEVERSION	int
;	O
meta	pointer
->	O
dbmeta	struct
.	O
pagesize	long
=	O
dbp	pointer
->	O
pgsize	int
;	O
meta	pointer
->	O
dbmeta	struct
.	O
type	enum
=	O
P_BTREEMETA	int
;	O
meta	pointer
->	O
dbmeta	struct
.	O
free	int
=	O
PGNO_INVALID	int
;	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_DUP	int
)	O
)	O
F_SET	O
(	O
&	O
meta	pointer
->	O
dbmeta	struct
,	O
BTM_DUP	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_RE_FIXEDLEN	int
)	O
)	O
F_SET	O
(	O
&	O
meta	pointer
->	O
dbmeta	struct
,	O
BTM_FIXEDLEN	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_BT_RECNUM	int
)	O
)	O
F_SET	O
(	O
&	O
meta	pointer
->	O
dbmeta	struct
,	O
BTM_RECNUM	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_RE_RENUMBER	int
)	O
)	O
F_SET	O
(	O
&	O
meta	pointer
->	O
dbmeta	struct
,	O
BTM_RENUMBER	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_SUBDB	int
)	O
)	O
F_SET	O
(	O
&	O
meta	pointer
->	O
dbmeta	struct
,	O
BTM_SUBDB	int
)	O
;	O
if	O
(	O
dbp	pointer
->	O
dup_compare	pointer
!=	O
NULL	O
)	O
F_SET	O
(	O
&	O
meta	pointer
->	O
dbmeta	struct
,	O
BTM_DUPSORT	int
)	O
;	O
if	O
(	O
dbp	pointer
->	O
type	enum
==	O
DB_RECNO	int
)	O
F_SET	O
(	O
&	O
meta	pointer
->	O
dbmeta	struct
,	O
BTM_RECNO	int
)	O
;	O
memcpy	function
(	O
meta	pointer
->	O
dbmeta	struct
.	O
uid	array
,	O
dbp	pointer
->	O
fileid	array
,	O
DB_FILE_ID_LEN	int
)	O
;	O
meta	pointer
->	O
maxkey	int
=	O
t	pointer
->	O
bt_maxkey	int
;	O
meta	pointer
->	O
minkey	int
=	O
t	pointer
->	O
bt_minkey	int
;	O
meta	pointer
->	O
re_len	int
=	O
t	pointer
->	O
re_len	int
;	O
meta	pointer
->	O
re_pad	int
=	O
t	pointer
->	O
re_pad	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_log_page	function
(	O
dbp	pointer
,	O
name	pointer
,	O
&	O
orig_lsn	struct
,	O
base_pgno	int
,	O
(	O
PAGE	struct
*	O
)	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_new	function
(	O
dbc	pointer
,	O
(	O
(	O
dbp	pointer
->	O
type	enum
==	O
DB_RECNO	int
?	O
P_LRECNO	int
:	O
P_LBTREE	int
)	O
|	O
dbp	pointer
->	O
tags	char
)	O
,	O
&	O
root	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
root	int
->	O
level	char
=	O
LEAFLEVEL	int
;	O
if	O
(	O
dbp	pointer
->	O
open_txn	pointer
!=	O
NULL	O
&&	O
(	O
ret	int
=	O
CDB___bam_root_log	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
dbp	pointer
->	O
open_txn	pointer
,	O
&	O
meta	pointer
->	O
dbmeta	struct
.	O
lsn	struct
,	O
0	int
,	O
dbp	pointer
->	O
log_fileid	int
,	O
meta	pointer
->	O
dbmeta	struct
.	O
pgno	int
,	O
root	int
->	O
pgno	int
,	O
&	O
meta	pointer
->	O
dbmeta	struct
.	O
lsn	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
meta	pointer
->	O
root	int
=	O
root	int
->	O
pgno	int
;	O
DB_TEST_RECOVERY	O
(	O
dbp	pointer
,	O
DB_TEST_POSTLOGMETA	O
,	O
ret	int
,	O
name	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_log_page	function
(	O
dbp	pointer
,	O
name	pointer
,	O
&	O
root	int
->	O
lsn	struct
,	O
root	int
->	O
pgno	int
,	O
root	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
DB_TEST_RECOVERY	O
(	O
dbp	pointer
,	O
DB_TEST_POSTLOG	O
,	O
ret	int
,	O
name	pointer
)	O
;	O
t	pointer
->	O
bt_meta	int
=	O
base_pgno	int
;	O
t	pointer
->	O
bt_root	int
=	O
root	int
->	O
pgno	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
meta	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
meta	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
root	int
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
root	int
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fsync	function
(	O
dbp	pointer
->	O
mpf	pointer
)	O
)	O
==	O
DB_INCOMPLETE	O
)	O
{	O
CDB___db_err	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"Metapage flush failed"	pointer
)	O
;	O
ret	int
=	O
EINVAL	int
;	O
}	O
DB_TEST_RECOVERY	O
(	O
dbp	pointer
,	O
DB_TEST_POSTSYNC	O
,	O
ret	int
,	O
name	pointer
)	O
;	O
done	O
:	O
t	pointer
->	O
bt_lpgno	int
=	O
PGNO_INVALID	int
;	O
err	pointer
:	O
DB_TEST_RECOVERY_LABEL	O
if	O
(	O
meta	pointer
!=	O
NULL	O
)	O
if	O
(	O
(	O
t_ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
meta	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
if	O
(	O
root	int
!=	O
NULL	O
)	O
if	O
(	O
(	O
t_ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
root	int
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
metalock	struct
)	O
;	O
if	O
(	O
(	O
t_ret	int
=	O
dbc	pointer
->	O
c_close	pointer
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
