extern	O
int	O
fprintf	function
(	O
FILE	struct
*	O
,	O
const	O
char	O
*	O
,	O
...	O
)	O
;	O
bool_t	int
xdr_var_array	function
(	O
register	O
XDR	struct
*	O
xdrs	pointer
,	O
caddr_t	pointer
*	O
addrp	pointer
,	O
u_int	int
size	int
,	O
u_int	int
maxsize	int
,	O
u_int	int
elsize	int
,	O
xdrproc_t	pointer
elproc	pointer
)	O
{	O
register	O
u_int	int
i	int
;	O
register	O
caddr_t	pointer
target	pointer
=	O
*	O
addrp	pointer
;	O
register	O
u_int	int
c	int
;	O
register	O
bool_t	int
stat	int
=	O
TRUE	O
;	O
register	O
u_int	int
nodesize	int
;	O
c	int
=	O
size	int
;	O
if	O
(	O
(	O
c	int
>	O
maxsize	int
)	O
&&	O
(	O
xdrs	pointer
->	O
x_op	enum
!=	O
XDR_FREE	int
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
nodesize	int
=	O
c	int
*	O
elsize	int
;	O
if	O
(	O
target	pointer
==	O
NULL	O
||	O
xdrs	pointer
->	O
x_op	enum
==	O
XDR_DECODE	int
)	O
switch	O
(	O
xdrs	pointer
->	O
x_op	enum
)	O
{	O
case	O
XDR_DECODE	int
:	O
if	O
(	O
c	int
==	O
0	int
)	O
return	O
(	O
TRUE	O
)	O
;	O
*	O
addrp	pointer
=	O
target	pointer
=	O
mem_alloc	O
(	O
nodesize	int
)	O
;	O
if	O
(	O
target	pointer
==	O
NULL	O
)	O
{	O
(	O
void	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"xdr_array: out of memory\n"	pointer
)	O
;	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
bzero	O
(	O
target	pointer
,	O
nodesize	int
)	O
;	O
break	O
;	O
case	O
XDR_FREE	int
:	O
return	O
(	O
TRUE	O
)	O
;	O
case	O
XDR_ENCODE	int
:	O
break	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
i	int
<	O
c	int
)	O
&&	O
stat	int
;	O
i	int
++	O
)	O
{	O
stat	int
=	O
(	O
*	O
elproc	pointer
)	O
(	O
xdrs	pointer
,	O
target	pointer
,	O
LASTUNSIGNED	O
)	O
;	O
target	pointer
+=	O
elsize	int
;	O
}	O
if	O
(	O
xdrs	pointer
->	O
x_op	enum
==	O
XDR_FREE	int
)	O
{	O
mem_free	O
(	O
*	O
addrp	pointer
,	O
nodesize	int
)	O
;	O
*	O
addrp	pointer
=	O
NULL	O
;	O
}	O
return	O
(	O
stat	int
)	O
;	O
}	O
