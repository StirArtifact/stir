static	O
int	O
_mech_comp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
data	pointer
)	O
{	O
return	O
mu_c_strcasecmp	function
(	O
(	O
const	O
char	O
*	O
)	O
item	pointer
,	O
(	O
const	O
char	O
*	O
)	O
data	pointer
)	O
;	O
}	O
int	O
mu_smtp_add_auth_mech	function
(	O
mu_smtp_t	pointer
smtp	pointer
,	O
const	O
char	O
*	O
mech	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
smtp	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
smtp	pointer
->	O
authmech	pointer
)	O
{	O
int	O
rc	int
=	O
mu_list_create	function
(	O
&	O
smtp	pointer
->	O
authmech	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_list_set_destroy_item	function
(	O
smtp	pointer
->	O
authmech	pointer
,	O
mu_list_free_item	function
)	O
;	O
mu_list_set_comparator	function
(	O
smtp	pointer
->	O
authmech	pointer
,	O
_mech_comp	function
)	O
;	O
}	O
p	pointer
=	O
strdup	function
(	O
mech	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
mu_strupper	function
(	O
p	pointer
)	O
;	O
return	O
mu_list_append	function
(	O
smtp	pointer
->	O
authmech	pointer
,	O
p	pointer
)	O
;	O
}	O
int	O
mu_smtp_clear_auth_mech	function
(	O
mu_smtp_t	pointer
smtp	pointer
)	O
{	O
if	O
(	O
!	O
smtp	pointer
)	O
return	O
EINVAL	int
;	O
mu_list_clear	function
(	O
smtp	pointer
->	O
authmech	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mech_append	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_smtp_t	pointer
smtp	pointer
=	O
data	pointer
;	O
const	O
char	O
*	O
mech	pointer
=	O
item	pointer
;	O
return	O
mu_smtp_add_auth_mech	function
(	O
smtp	pointer
,	O
mech	pointer
)	O
;	O
}	O
int	O
mu_smtp_add_auth_mech_list	function
(	O
mu_smtp_t	pointer
smtp	pointer
,	O
mu_list_t	pointer
list	pointer
)	O
{	O
if	O
(	O
!	O
smtp	pointer
)	O
return	O
EINVAL	int
;	O
return	O
mu_list_foreach	function
(	O
list	pointer
,	O
_mech_append	function
,	O
smtp	pointer
)	O
;	O
}	O
int	O
_mu_smtp_mech_impl	function
(	O
mu_smtp_t	pointer
smtp	pointer
,	O
mu_list_t	pointer
list	pointer
)	O
{	O
mu_list_destroy	function
(	O
&	O
smtp	pointer
->	O
authimpl	pointer
)	O
;	O
smtp	pointer
->	O
authimpl	pointer
=	O
list	pointer
;	O
mu_list_set_comparator	function
(	O
smtp	pointer
->	O
authimpl	pointer
,	O
_mech_comp	function
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mech_copy	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
const	O
char	O
*	O
mech	pointer
=	O
item	pointer
;	O
mu_list_t	pointer
list	pointer
=	O
data	pointer
;	O
return	O
mu_list_append	function
(	O
list	pointer
,	O
(	O
void	O
*	O
)	O
mech	pointer
)	O
;	O
}	O
int	O
mu_smtp_mech_select	function
(	O
mu_smtp_t	pointer
smtp	pointer
,	O
const	O
char	O
*	O
*	O
pmech	pointer
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
authstr	pointer
;	O
mu_list_t	pointer
alist	pointer
;	O
mu_iterator_t	pointer
itr	pointer
;	O
if	O
(	O
!	O
smtp	pointer
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_smtp_capa_test	function
(	O
smtp	pointer
,	O
"AUTH"	pointer
,	O
&	O
authstr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
smtp	pointer
->	O
authimpl	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
smtp	pointer
->	O
authmech	pointer
)	O
{	O
rc	int
=	O
mu_list_create	function
(	O
&	O
alist	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_list_foreach	function
(	O
smtp	pointer
->	O
authimpl	pointer
,	O
_mech_copy	function
,	O
alist	pointer
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
mu_list_intersect_dup	function
(	O
&	O
alist	pointer
,	O
smtp	pointer
->	O
authmech	pointer
,	O
smtp	pointer
->	O
authimpl	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_get_iterator	function
(	O
alist	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
int	O
res	pointer
=	O
1	int
;	O
rc	int
=	O
MU_ERR_NOENT	O
;	O
authstr	pointer
+=	O
5	int
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
rc	int
&&	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
mech	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mech	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
authstr	pointer
;	O
*	O
p	pointer
;	O
)	O
{	O
char	O
*	O
end	long
;	O
p	pointer
=	O
mu_str_stripws	function
(	O
(	O
char	O
*	O
)	O
p	pointer
)	O
;	O
end	long
=	O
mu_str_skip_class_comp	function
(	O
p	pointer
,	O
MU_CTYPE_SPACE	int
)	O
;	O
res	pointer
=	O
mu_c_strncasecmp	function
(	O
mech	pointer
,	O
p	pointer
,	O
end	long
-	O
p	pointer
)	O
;	O
if	O
(	O
res	pointer
==	O
0	int
)	O
{	O
*	O
pmech	pointer
=	O
mech	pointer
;	O
rc	int
=	O
0	int
;	O
break	O
;	O
}	O
p	pointer
=	O
end	long
;	O
}	O
}	O
}	O
mu_list_destroy	function
(	O
&	O
alist	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
