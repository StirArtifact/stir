void	O
_jit_print	function
(	O
jit_state_t	struct
*	O
_jit	pointer
)	O
{	O
jit_node_t	struct
*	O
node	pointer
;	O
if	O
(	O
(	O
node	pointer
=	O
_jitc	O
->	O
head	pointer
)	O
)	O
{	O
jit_print_node	O
(	O
node	pointer
)	O
;	O
for	O
(	O
node	pointer
=	O
node	pointer
->	O
next	pointer
;	O
node	pointer
;	O
node	pointer
=	O
node	pointer
->	O
next	pointer
)	O
{	O
print_chr	O
(	O
'\n'	O
)	O
;	O
jit_print_node	O
(	O
node	pointer
)	O
;	O
}	O
print_chr	O
(	O
'\n'	O
)	O
;	O
}	O
}	O
void	O
_jit_print_node	function
(	O
jit_state_t	struct
*	O
_jit	pointer
,	O
jit_node_t	struct
*	O
node	pointer
)	O
{	O
jit_block_t	struct
*	O
block	pointer
;	O
jit_int32_t	int
value	int
;	O
jit_int32_t	int
offset	short
;	O
if	O
(	O
node	pointer
->	O
code	pointer
==	O
jit_code_label	int
||	O
node	pointer
->	O
code	pointer
==	O
jit_code_prolog	int
||	O
node	pointer
->	O
code	pointer
==	O
jit_code_epilog	int
)	O
{	O
print_chr	O
(	O
'L'	O
)	O
;	O
print_dec	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
':'	O
)	O
;	O
block	pointer
=	O
_jitc	O
->	O
blocks	struct
.	O
ptr	pointer
+	O
node	pointer
->	O
v	union
.	O
w	long
;	O
for	O
(	O
offset	short
=	O
0	int
;	O
offset	short
<	O
_jitc	O
->	O
reglen	int
;	O
offset	short
++	O
)	O
{	O
if	O
(	O
jit_regset_tstbit	O
(	O
&	O
block	pointer
->	O
reglive	long
,	O
offset	short
)	O
)	O
{	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
offset	short
)	O
;	O
}	O
}	O
if	O
(	O
node	pointer
->	O
code	pointer
==	O
jit_code_prolog	int
||	O
node	pointer
->	O
code	pointer
==	O
jit_code_epilog	int
)	O
{	O
print_str	O
(	O
" /* "	pointer
)	O
;	O
print_str	O
(	O
code_name	array
[	O
node	pointer
->	O
code	pointer
]	O
)	O
;	O
print_str	O
(	O
" */"	pointer
)	O
;	O
}	O
return	O
;	O
}	O
value	int
=	O
jit_classify	O
(	O
node	pointer
->	O
code	pointer
)	O
&	O
(	O
jit_cc_a0_int	int
|	O
jit_cc_a0_flt	int
|	O
jit_cc_a0_dbl	int
|	O
jit_cc_a0_jmp	int
|	O
jit_cc_a0_reg	int
|	O
jit_cc_a0_rlh	int
|	O
jit_cc_a0_arg	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a1_int	int
|	O
jit_cc_a1_flt	int
|	O
jit_cc_a1_dbl	int
|	O
jit_cc_a1_arg	int
|	O
jit_cc_a2_reg	int
|	O
jit_cc_a2_int	int
|	O
jit_cc_a2_flt	int
|	O
jit_cc_a2_dbl	int
)	O
;	O
if	O
(	O
!	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_synth	int
)	O
&&	O
(	O
(	O
value	int
&	O
jit_cc_a0_jmp	int
)	O
||	O
node	pointer
->	O
code	pointer
==	O
jit_code_finishr	int
||	O
node	pointer
->	O
code	pointer
==	O
jit_code_finishi	int
)	O
)	O
print_str	O
(	O
"    "	pointer
)	O
;	O
else	O
print_chr	O
(	O
'\t'	O
)	O
;	O
if	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_synth	int
)	O
print_str	O
(	O
" \\__ "	pointer
)	O
;	O
print_str	O
(	O
code_name	array
[	O
node	pointer
->	O
code	pointer
]	O
)	O
;	O
switch	O
(	O
node	pointer
->	O
code	pointer
)	O
{	O
r	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
return	O
;	O
w	long
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_hex	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
return	O
;	O
f	float
:	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_data	int
)	O
print_flt	O
(	O
*	O
(	O
jit_float32_t	float
*	O
)	O
node	pointer
->	O
u	union
.	O
n	pointer
->	O
u	union
.	O
w	long
)	O
;	O
else	O
print_flt	O
(	O
node	pointer
->	O
u	union
.	O
f	float
)	O
;	O
return	O
;	O
d	double
:	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_data	int
)	O
print_flt	O
(	O
*	O
(	O
jit_float64_t	double
*	O
)	O
node	pointer
->	O
u	union
.	O
n	pointer
->	O
u	union
.	O
w	long
)	O
;	O
else	O
print_flt	O
(	O
node	pointer
->	O
u	union
.	O
d	double
)	O
;	O
return	O
;	O
n	pointer
:	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
!	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_node	int
)	O
)	O
print_ptr	O
(	O
node	pointer
->	O
u	union
.	O
p	pointer
)	O
;	O
else	O
{	O
print_chr	O
(	O
'L'	O
)	O
;	O
print_dec	O
(	O
node	pointer
->	O
u	union
.	O
n	pointer
->	O
v	union
.	O
w	long
)	O
;	O
}	O
return	O
;	O
a	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_arg	O
(	O
node	pointer
)	O
;	O
return	O
;	O
r_r	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
return	O
;	O
r_w	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_hex	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
return	O
;	O
r_f	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_data	int
)	O
print_flt	O
(	O
*	O
(	O
jit_float32_t	float
*	O
)	O
node	pointer
->	O
v	union
.	O
n	pointer
->	O
u	union
.	O
w	long
)	O
;	O
else	O
print_flt	O
(	O
node	pointer
->	O
v	union
.	O
f	float
)	O
;	O
return	O
;	O
r_d	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_data	int
)	O
print_flt	O
(	O
*	O
(	O
jit_float64_t	double
*	O
)	O
node	pointer
->	O
v	union
.	O
n	pointer
->	O
u	union
.	O
w	long
)	O
;	O
else	O
print_flt	O
(	O
node	pointer
->	O
v	union
.	O
d	double
)	O
;	O
return	O
;	O
r_a	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_arg	O
(	O
node	pointer
->	O
v	union
.	O
n	pointer
)	O
;	O
return	O
;	O
w_r	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_hex	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
return	O
;	O
w_w	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_hex	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_hex	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
return	O
;	O
w_a	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_hex	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_arg	O
(	O
node	pointer
->	O
v	union
.	O
n	pointer
)	O
;	O
return	O
;	O
f_a	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_data	int
)	O
print_flt	O
(	O
*	O
(	O
jit_float32_t	float
*	O
)	O
node	pointer
->	O
u	union
.	O
n	pointer
->	O
u	union
.	O
w	long
)	O
;	O
else	O
print_flt	O
(	O
node	pointer
->	O
u	union
.	O
f	float
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_arg	O
(	O
node	pointer
->	O
v	union
.	O
n	pointer
)	O
;	O
return	O
;	O
d_a	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_data	int
)	O
print_flt	O
(	O
*	O
(	O
jit_float64_t	double
*	O
)	O
node	pointer
->	O
u	union
.	O
n	pointer
->	O
u	union
.	O
w	long
)	O
;	O
else	O
print_flt	O
(	O
node	pointer
->	O
u	union
.	O
d	double
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_arg	O
(	O
node	pointer
->	O
v	union
.	O
n	pointer
)	O
;	O
return	O
;	O
r_r_r	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
w	long
.	O
w	long
)	O
;	O
return	O
;	O
r_r_w	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_hex	O
(	O
node	pointer
->	O
w	long
.	O
w	long
)	O
;	O
return	O
;	O
q_r_r	O
:	O
print_str	O
(	O
" ("	pointer
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
q	struct
.	O
l	int
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
q	struct
.	O
h	int
)	O
;	O
print_str	O
(	O
") "	pointer
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
w	long
.	O
w	long
)	O
;	O
return	O
;	O
q_r_w	O
:	O
print_str	O
(	O
" ("	pointer
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
q	struct
.	O
l	int
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
q	struct
.	O
h	int
)	O
;	O
print_str	O
(	O
") "	pointer
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_hex	O
(	O
node	pointer
->	O
w	long
.	O
w	long
)	O
;	O
return	O
;	O
r_r_f	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_data	int
)	O
print_flt	O
(	O
*	O
(	O
jit_float32_t	float
*	O
)	O
node	pointer
->	O
w	long
.	O
n	pointer
->	O
u	union
.	O
w	long
)	O
;	O
else	O
print_flt	O
(	O
node	pointer
->	O
w	long
.	O
f	float
)	O
;	O
return	O
;	O
r_r_d	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_data	int
)	O
print_flt	O
(	O
*	O
(	O
jit_float64_t	double
*	O
)	O
node	pointer
->	O
w	long
.	O
n	pointer
->	O
u	union
.	O
w	long
)	O
;	O
else	O
print_flt	O
(	O
node	pointer
->	O
w	long
.	O
d	double
)	O
;	O
return	O
;	O
w_r_r	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
print_hex	O
(	O
node	pointer
->	O
u	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
w	long
.	O
w	long
)	O
;	O
return	O
;	O
n_r_r	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
!	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_node	int
)	O
)	O
print_ptr	O
(	O
node	pointer
->	O
u	union
.	O
p	pointer
)	O
;	O
else	O
{	O
print_chr	O
(	O
'L'	O
)	O
;	O
print_dec	O
(	O
node	pointer
->	O
u	union
.	O
n	pointer
->	O
v	union
.	O
w	long
)	O
;	O
}	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
w	long
.	O
w	long
)	O
;	O
return	O
;	O
n_r_w	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
!	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_node	int
)	O
)	O
print_ptr	O
(	O
node	pointer
->	O
u	union
.	O
p	pointer
)	O
;	O
else	O
{	O
print_chr	O
(	O
'L'	O
)	O
;	O
print_dec	O
(	O
node	pointer
->	O
u	union
.	O
n	pointer
->	O
v	union
.	O
w	long
)	O
;	O
}	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
print_hex	O
(	O
node	pointer
->	O
w	long
.	O
w	long
)	O
;	O
return	O
;	O
n_r_f	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
!	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_node	int
)	O
)	O
print_ptr	O
(	O
node	pointer
->	O
u	union
.	O
p	pointer
)	O
;	O
else	O
{	O
print_chr	O
(	O
'L'	O
)	O
;	O
print_dec	O
(	O
node	pointer
->	O
u	union
.	O
n	pointer
->	O
v	union
.	O
w	long
)	O
;	O
}	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_data	int
)	O
print_flt	O
(	O
*	O
(	O
jit_float32_t	float
*	O
)	O
node	pointer
->	O
w	long
.	O
n	pointer
->	O
u	union
.	O
w	long
)	O
;	O
else	O
print_flt	O
(	O
node	pointer
->	O
w	long
.	O
f	float
)	O
;	O
return	O
;	O
n_r_d	O
:	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
!	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_node	int
)	O
)	O
print_ptr	O
(	O
node	pointer
->	O
u	union
.	O
p	pointer
)	O
;	O
else	O
{	O
print_chr	O
(	O
'L'	O
)	O
;	O
print_dec	O
(	O
node	pointer
->	O
u	union
.	O
n	pointer
->	O
v	union
.	O
w	long
)	O
;	O
}	O
print_chr	O
(	O
' '	O
)	O
;	O
print_reg	O
(	O
node	pointer
->	O
v	union
.	O
w	long
)	O
;	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
flag	short
&	O
jit_flag_data	int
)	O
print_flt	O
(	O
*	O
(	O
jit_float64_t	double
*	O
)	O
node	pointer
->	O
w	long
.	O
n	pointer
->	O
u	union
.	O
w	long
)	O
;	O
else	O
print_flt	O
(	O
node	pointer
->	O
w	long
.	O
d	double
)	O
;	O
return	O
;	O
case	O
jit_code_name	int
:	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
v	union
.	O
p	pointer
&&	O
_jitc	O
->	O
emit	int
)	O
print_str	O
(	O
node	pointer
->	O
v	union
.	O
n	pointer
->	O
u	union
.	O
p	pointer
)	O
;	O
break	O
;	O
case	O
jit_code_note	int
:	O
print_chr	O
(	O
' '	O
)	O
;	O
if	O
(	O
node	pointer
->	O
v	union
.	O
p	pointer
&&	O
_jitc	O
->	O
emit	int
)	O
print_str	O
(	O
node	pointer
->	O
v	union
.	O
n	pointer
->	O
u	union
.	O
p	pointer
)	O
;	O
if	O
(	O
node	pointer
->	O
v	union
.	O
p	pointer
&&	O
_jitc	O
->	O
emit	int
&&	O
node	pointer
->	O
w	long
.	O
w	long
)	O
print_chr	O
(	O
':'	O
)	O
;	O
if	O
(	O
node	pointer
->	O
w	long
.	O
w	long
)	O
print_dec	O
(	O
node	pointer
->	O
w	long
.	O
w	long
)	O
;	O
break	O
;	O
case	O
jit_code_data	int
:	O
case	O
jit_code_label	int
:	O
case	O
jit_code_ellipsis	int
:	O
case	O
jit_code_prolog	int
:	O
case	O
jit_code_epilog	int
:	O
case	O
jit_code_ret	int
:	O
case	O
jit_code_prepare	int
:	O
break	O
;	O
case	O
jit_code_save	int
:	O
case	O
jit_code_load	int
:	O
goto	O
r	O
;	O
default	O
:	O
switch	O
(	O
value	int
)	O
{	O
case	O
jit_cc_a0_reg	int
:	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a0_chg	int
:	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a0_jmp	int
:	O
goto	O
r	O
;	O
case	O
jit_cc_a0_int	int
:	O
goto	O
w	long
;	O
case	O
jit_cc_a0_flt	int
:	O
goto	O
f	float
;	O
case	O
jit_cc_a0_dbl	int
:	O
goto	O
d	double
;	O
case	O
jit_cc_a0_jmp	int
:	O
goto	O
n	pointer
;	O
case	O
jit_cc_a0_int	int
|	O
jit_cc_a0_arg	int
:	O
goto	O
a	O
;	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a1_reg	int
:	O
goto	O
r_r	O
;	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a1_int	int
:	O
goto	O
r_w	O
;	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a1_flt	int
:	O
goto	O
r_f	O
;	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a1_dbl	int
:	O
goto	O
r_d	O
;	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a1_arg	int
:	O
goto	O
r_a	O
;	O
case	O
jit_cc_a0_int	int
|	O
jit_cc_a1_reg	int
:	O
goto	O
w_r	O
;	O
case	O
jit_cc_a0_int	int
|	O
jit_cc_a1_int	int
:	O
goto	O
w_w	O
;	O
case	O
jit_cc_a0_int	int
|	O
jit_cc_a1_arg	int
:	O
goto	O
w_a	O
;	O
case	O
jit_cc_a0_flt	int
|	O
jit_cc_a1_arg	int
:	O
goto	O
f_a	O
;	O
case	O
jit_cc_a0_dbl	int
|	O
jit_cc_a1_arg	int
:	O
goto	O
d_a	O
;	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a2_reg	int
:	O
goto	O
r_r_r	O
;	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a2_int	int
:	O
goto	O
r_r_w	O
;	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a0_rlh	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a2_reg	int
:	O
goto	O
q_r_r	O
;	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a0_rlh	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a2_int	int
:	O
goto	O
q_r_w	O
;	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a2_flt	int
:	O
goto	O
r_r_f	O
;	O
case	O
jit_cc_a0_reg	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a2_dbl	int
:	O
goto	O
r_r_d	O
;	O
case	O
jit_cc_a0_int	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a2_reg	int
:	O
goto	O
w_r_r	O
;	O
case	O
jit_cc_a0_jmp	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a2_reg	int
:	O
goto	O
n_r_r	O
;	O
case	O
jit_cc_a0_jmp	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a2_int	int
:	O
goto	O
n_r_w	O
;	O
case	O
jit_cc_a0_jmp	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a2_flt	int
:	O
goto	O
n_r_f	O
;	O
case	O
jit_cc_a0_jmp	int
|	O
jit_cc_a1_reg	int
|	O
jit_cc_a2_dbl	int
:	O
goto	O
n_r_d	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
}	O
}	O
