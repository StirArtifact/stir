OutputPersonality	struct
*	O
op_create	function
(	O
)	O
{	O
OutputPersonality	struct
*	O
new_op	pointer
;	O
new_op	pointer
=	O
(	O
OutputPersonality	struct
*	O
)	O
my_malloc	function
(	O
sizeof	O
(	O
OutputPersonality	struct
)	O
)	O
;	O
if	O
(	O
!	O
new_op	pointer
)	O
error_handler	function
(	O
"cannot allocate output personality"	pointer
)	O
;	O
memset	function
(	O
(	O
void	O
*	O
)	O
new_op	pointer
,	O
0	int
,	O
sizeof	O
(	O
OutputPersonality	struct
)	O
)	O
;	O
return	O
new_op	pointer
;	O
}	O
void	O
op_free	function
(	O
OutputPersonality	struct
*	O
op	pointer
)	O
{	O
CHECK_PARAM_NOT_NULL	O
(	O
op	pointer
)	O
;	O
my_free	function
(	O
(	O
void	O
*	O
)	O
op	pointer
)	O
;	O
}	O
char	O
*	O
op_translate_char	function
(	O
OutputPersonality	struct
*	O
op	pointer
,	O
int	O
charset	int
,	O
CodepageInfo	struct
*	O
codepage	pointer
,	O
int	O
ch	int
,	O
int	O
ntable	int
)	O
{	O
short	O
start	short
;	O
char	O
*	O
result	pointer
=	O
NULL	O
;	O
CHECK_PARAM_NOT_NULL	O
(	O
op	pointer
)	O
;	O
if	O
(	O
ntable	int
==	O
FONTSYMBOL_TABLE	int
)	O
{	O
start	short
=	O
op	pointer
->	O
symbol_first_char	short
;	O
if	O
(	O
ch	int
>=	O
start	short
&&	O
ch	int
<=	O
op	pointer
->	O
symbol_last_char	short
)	O
result	pointer
=	O
op	pointer
->	O
symbol_translation_table	pointer
[	O
ch	int
-	O
start	short
]	O
;	O
if	O
(	O
result	pointer
)	O
return	O
result	pointer
;	O
}	O
else	O
if	O
(	O
ntable	int
==	O
FONTGREEK_TABLE	int
)	O
{	O
start	short
=	O
op	pointer
->	O
greek_first_char	short
;	O
if	O
(	O
ch	int
>=	O
start	short
&&	O
ch	int
<=	O
op	pointer
->	O
greek_last_char	short
)	O
result	pointer
=	O
op	pointer
->	O
greek_translation_table	pointer
[	O
ch	int
-	O
start	short
]	O
;	O
if	O
(	O
result	pointer
)	O
return	O
result	pointer
;	O
}	O
if	O
(	O
ch	int
>=	O
0x20	int
&&	O
ch	int
<	O
0x80	int
)	O
{	O
result	pointer
=	O
op	pointer
->	O
ascii_translation_table	pointer
[	O
ch	int
-	O
0x20	int
]	O
;	O
}	O
else	O
if	O
(	O
charset	int
!=	O
CHARSET_ANSI	int
&&	O
charset	int
!=	O
CHARSET_MAC	int
&&	O
charset	int
!=	O
CHARSET_CP437	int
&&	O
charset	int
!=	O
CHARSET_CP850	int
)	O
error_handler	function
(	O
"invalid character set value, cannot translate character"	pointer
)	O
;	O
else	O
switch	O
(	O
charset	int
)	O
{	O
case	O
CHARSET_ANSI	int
:	O
if	O
(	O
codepage	pointer
!=	O
NULL	O
&&	O
op	pointer
->	O
unisymbol_print	pointer
!=	O
NULL	O
&&	O
codepage	pointer
->	O
cp	int
)	O
{	O
if	O
(	O
0	int
)	O
printf	function
(	O
"<CODEPAGE CHAR %d>"	pointer
,	O
codepage	pointer
->	O
chars	array
[	O
ch	int
-	O
0x80	int
]	O
)	O
;	O
if	O
(	O
codepage	pointer
->	O
chars	array
[	O
ch	int
-	O
0x80	int
]	O
)	O
{	O
if	O
(	O
0	int
)	O
printf	function
(	O
"<UNIPRINTING>"	pointer
)	O
;	O
result	pointer
=	O
op	pointer
->	O
unisymbol_print	pointer
(	O
codepage	pointer
->	O
chars	array
[	O
ch	int
-	O
0x80	int
]	O
)	O
;	O
}	O
}	O
if	O
(	O
!	O
result	pointer
)	O
{	O
start	short
=	O
op	pointer
->	O
ansi_first_char	short
;	O
if	O
(	O
ch	int
>=	O
start	short
&&	O
ch	int
<=	O
op	pointer
->	O
ansi_last_char	short
)	O
result	pointer
=	O
op	pointer
->	O
ansi_translation_table	pointer
[	O
ch	int
-	O
start	short
]	O
;	O
}	O
break	O
;	O
case	O
CHARSET_MAC	int
:	O
start	short
=	O
op	pointer
->	O
mac_first_char	short
;	O
if	O
(	O
ch	int
>=	O
start	short
&&	O
ch	int
<=	O
op	pointer
->	O
mac_last_char	short
)	O
result	pointer
=	O
op	pointer
->	O
mac_translation_table	pointer
[	O
ch	int
-	O
start	short
]	O
;	O
break	O
;	O
case	O
CHARSET_CP437	int
:	O
start	short
=	O
op	pointer
->	O
cp437_first_char	short
;	O
if	O
(	O
ch	int
>=	O
start	short
&&	O
ch	int
<=	O
op	pointer
->	O
cp437_last_char	short
)	O
result	pointer
=	O
op	pointer
->	O
cp437_translation_table	pointer
[	O
ch	int
-	O
start	short
]	O
;	O
break	O
;	O
case	O
CHARSET_CP850	int
:	O
start	short
=	O
op	pointer
->	O
cp850_first_char	short
;	O
if	O
(	O
ch	int
>=	O
start	short
&&	O
ch	int
<=	O
op	pointer
->	O
cp850_last_char	short
)	O
result	pointer
=	O
op	pointer
->	O
cp850_translation_table	pointer
[	O
ch	int
-	O
start	short
]	O
;	O
break	O
;	O
}	O
return	O
result	pointer
;	O
}	O
void	O
op_begin_std_fontsize	function
(	O
OutputPersonality	struct
*	O
op	pointer
,	O
int	O
size	int
)	O
{	O
int	O
found_std_expr	int
=	O
FALSE	O
;	O
CHECK_PARAM_NOT_NULL	O
(	O
op	pointer
)	O
;	O
switch	O
(	O
size	int
)	O
{	O
case	O
8	int
:	O
if	O
(	O
op	pointer
->	O
fontsize8_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize8_begin	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
10	int
:	O
if	O
(	O
op	pointer
->	O
fontsize10_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize10_begin	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
12	int
:	O
if	O
(	O
op	pointer
->	O
fontsize12_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize12_begin	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
14	int
:	O
if	O
(	O
op	pointer
->	O
fontsize14_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize14_begin	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
18	int
:	O
if	O
(	O
op	pointer
->	O
fontsize18_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize18_begin	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
24	int
:	O
if	O
(	O
op	pointer
->	O
fontsize24_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize24_begin	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
36	int
:	O
if	O
(	O
op	pointer
->	O
fontsize36_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize36_begin	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
48	int
:	O
if	O
(	O
op	pointer
->	O
fontsize48_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize48_begin	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
!	O
found_std_expr	int
)	O
{	O
if	O
(	O
op	pointer
->	O
fontsize_begin	pointer
)	O
{	O
char	O
expr	array
[	O
16	int
]	O
;	O
sprintf	function
(	O
expr	array
,	O
"%d"	pointer
,	O
size	int
)	O
;	O
printf	function
(	O
op	pointer
->	O
fontsize_begin	pointer
,	O
expr	array
)	O
;	O
}	O
else	O
{	O
if	O
(	O
size	int
<	O
9	int
&&	O
op	pointer
->	O
fontsize8_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize8_begin	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
11	int
&&	O
op	pointer
->	O
fontsize10_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize10_begin	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
13	int
&&	O
op	pointer
->	O
fontsize12_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize12_begin	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
16	int
&&	O
op	pointer
->	O
fontsize14_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize14_begin	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
21	int
&&	O
op	pointer
->	O
fontsize18_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize18_begin	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
30	int
&&	O
op	pointer
->	O
fontsize24_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize24_begin	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
42	int
&&	O
op	pointer
->	O
fontsize36_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize36_begin	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
>	O
40	int
&&	O
op	pointer
->	O
fontsize48_begin	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize48_begin	pointer
)	O
;	O
}	O
else	O
if	O
(	O
op	pointer
->	O
fontsize12_begin	pointer
)	O
printf	function
(	O
op	pointer
->	O
fontsize12_begin	pointer
)	O
;	O
else	O
if	O
(	O
op	pointer
->	O
fontsize14_begin	pointer
)	O
printf	function
(	O
op	pointer
->	O
fontsize14_begin	pointer
)	O
;	O
else	O
if	O
(	O
op	pointer
->	O
fontsize10_begin	pointer
)	O
printf	function
(	O
op	pointer
->	O
fontsize10_begin	pointer
)	O
;	O
else	O
if	O
(	O
op	pointer
->	O
fontsize18_begin	pointer
)	O
printf	function
(	O
op	pointer
->	O
fontsize18_begin	pointer
)	O
;	O
else	O
if	O
(	O
op	pointer
->	O
fontsize8_begin	pointer
)	O
printf	function
(	O
op	pointer
->	O
fontsize8_begin	pointer
)	O
;	O
else	O
error_handler	function
(	O
"output personality lacks sufficient font size change capability"	pointer
)	O
;	O
}	O
}	O
}	O
void	O
op_end_std_fontsize	function
(	O
OutputPersonality	struct
*	O
op	pointer
,	O
int	O
size	int
)	O
{	O
int	O
found_std_expr	int
=	O
FALSE	O
;	O
CHECK_PARAM_NOT_NULL	O
(	O
op	pointer
)	O
;	O
switch	O
(	O
size	int
)	O
{	O
case	O
8	int
:	O
if	O
(	O
op	pointer
->	O
fontsize8_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize8_end	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
10	int
:	O
if	O
(	O
op	pointer
->	O
fontsize10_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize10_end	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
12	int
:	O
if	O
(	O
op	pointer
->	O
fontsize12_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize12_end	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
14	int
:	O
if	O
(	O
op	pointer
->	O
fontsize14_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize14_end	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
18	int
:	O
if	O
(	O
op	pointer
->	O
fontsize18_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize18_end	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
24	int
:	O
if	O
(	O
op	pointer
->	O
fontsize24_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize24_end	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
36	int
:	O
if	O
(	O
op	pointer
->	O
fontsize36_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize36_end	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
case	O
48	int
:	O
if	O
(	O
op	pointer
->	O
fontsize48_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize48_end	pointer
)	O
;	O
found_std_expr	int
=	O
TRUE	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
!	O
found_std_expr	int
)	O
{	O
if	O
(	O
op	pointer
->	O
fontsize_end	pointer
)	O
{	O
char	O
expr	array
[	O
16	int
]	O
;	O
sprintf	function
(	O
expr	array
,	O
"%d"	pointer
,	O
size	int
)	O
;	O
printf	function
(	O
op	pointer
->	O
fontsize_end	pointer
,	O
expr	array
)	O
;	O
}	O
else	O
{	O
if	O
(	O
size	int
<	O
9	int
&&	O
op	pointer
->	O
fontsize8_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize8_end	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
11	int
&&	O
op	pointer
->	O
fontsize10_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize10_end	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
13	int
&&	O
op	pointer
->	O
fontsize12_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize12_end	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
16	int
&&	O
op	pointer
->	O
fontsize14_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize14_end	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
21	int
&&	O
op	pointer
->	O
fontsize18_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize18_end	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
30	int
&&	O
op	pointer
->	O
fontsize24_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize24_end	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
<	O
42	int
&&	O
op	pointer
->	O
fontsize36_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize36_end	pointer
)	O
;	O
}	O
else	O
if	O
(	O
size	int
>	O
40	int
&&	O
op	pointer
->	O
fontsize48_end	pointer
)	O
{	O
printf	function
(	O
op	pointer
->	O
fontsize48_end	pointer
)	O
;	O
}	O
else	O
if	O
(	O
op	pointer
->	O
fontsize12_end	pointer
)	O
printf	function
(	O
op	pointer
->	O
fontsize12_end	pointer
)	O
;	O
else	O
if	O
(	O
op	pointer
->	O
fontsize14_end	pointer
)	O
printf	function
(	O
op	pointer
->	O
fontsize14_end	pointer
)	O
;	O
else	O
if	O
(	O
op	pointer
->	O
fontsize10_end	pointer
)	O
printf	function
(	O
op	pointer
->	O
fontsize10_end	pointer
)	O
;	O
else	O
if	O
(	O
op	pointer
->	O
fontsize18_end	pointer
)	O
printf	function
(	O
op	pointer
->	O
fontsize18_end	pointer
)	O
;	O
else	O
if	O
(	O
op	pointer
->	O
fontsize8_end	pointer
)	O
printf	function
(	O
op	pointer
->	O
fontsize8_end	pointer
)	O
;	O
else	O
error_handler	function
(	O
"output personality lacks sufficient font size change capability"	pointer
)	O
;	O
}	O
}	O
}	O
