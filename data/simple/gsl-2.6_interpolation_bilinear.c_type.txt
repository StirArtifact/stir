static	O
int	O
bilinear_init	function
(	O
void	O
*	O
state	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
const	O
double	O
za	array
[	O
]	O
,	O
size_t	long
xsize	long
,	O
size_t	long
ysize	long
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
bilinear_eval	function
(	O
const	O
void	O
*	O
state	pointer
,	O
const	O
double	O
xarr	array
[	O
]	O
,	O
const	O
double	O
yarr	array
[	O
]	O
,	O
const	O
double	O
zarr	array
[	O
]	O
,	O
size_t	long
xsize	long
,	O
size_t	long
ysize	long
,	O
double	O
x	double
,	O
double	O
y	pointer
,	O
gsl_interp_accel	struct
*	O
xa	array
,	O
gsl_interp_accel	struct
*	O
ya	array
,	O
double	O
*	O
z	pointer
)	O
{	O
double	O
xmin	double
,	O
xmax	double
,	O
ymin	double
,	O
ymax	double
,	O
zminmin	double
,	O
zminmax	double
,	O
zmaxmin	double
,	O
zmaxmax	double
;	O
double	O
dx	double
,	O
dy	double
;	O
double	O
t	double
,	O
u	double
;	O
size_t	long
xi	long
,	O
yi	long
;	O
if	O
(	O
xa	array
!=	O
NULL	O
)	O
xi	long
=	O
gsl_interp_accel_find	function
(	O
xa	array
,	O
xarr	array
,	O
xsize	long
,	O
x	double
)	O
;	O
else	O
xi	long
=	O
gsl_interp_bsearch	function
(	O
xarr	array
,	O
x	double
,	O
0	int
,	O
xsize	long
-	O
1	int
)	O
;	O
if	O
(	O
ya	array
!=	O
NULL	O
)	O
yi	long
=	O
gsl_interp_accel_find	function
(	O
ya	array
,	O
yarr	array
,	O
ysize	long
,	O
y	pointer
)	O
;	O
else	O
yi	long
=	O
gsl_interp_bsearch	function
(	O
yarr	array
,	O
y	pointer
,	O
0	int
,	O
ysize	long
-	O
1	int
)	O
;	O
xmin	double
=	O
xarr	array
[	O
xi	long
]	O
;	O
xmax	double
=	O
xarr	array
[	O
xi	long
+	O
1	int
]	O
;	O
ymin	double
=	O
yarr	array
[	O
yi	long
]	O
;	O
ymax	double
=	O
yarr	array
[	O
yi	long
+	O
1	int
]	O
;	O
zminmin	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
,	O
yi	long
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zminmax	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
,	O
yi	long
+	O
1	int
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zmaxmin	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
+	O
1	int
,	O
yi	long
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zmaxmax	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
+	O
1	int
,	O
yi	long
+	O
1	int
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
dx	double
=	O
xmax	double
-	O
xmin	double
;	O
dy	double
=	O
ymax	double
-	O
ymin	double
;	O
t	double
=	O
(	O
x	double
-	O
xmin	double
)	O
/	O
dx	double
;	O
u	double
=	O
(	O
y	pointer
-	O
ymin	double
)	O
/	O
dy	double
;	O
*	O
z	pointer
=	O
(	O
1.	int
-	O
t	double
)	O
*	O
(	O
1.	int
-	O
u	double
)	O
*	O
zminmin	double
+	O
t	double
*	O
(	O
1.	int
-	O
u	double
)	O
*	O
zmaxmin	double
+	O
(	O
1.	int
-	O
t	double
)	O
*	O
u	double
*	O
zminmax	double
+	O
t	double
*	O
u	double
*	O
zmaxmax	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
bilinear_deriv_x	function
(	O
const	O
void	O
*	O
state	pointer
,	O
const	O
double	O
xarr	array
[	O
]	O
,	O
const	O
double	O
yarr	array
[	O
]	O
,	O
const	O
double	O
zarr	array
[	O
]	O
,	O
size_t	long
xsize	long
,	O
size_t	long
ysize	long
,	O
double	O
x	double
,	O
double	O
y	pointer
,	O
gsl_interp_accel	struct
*	O
xa	array
,	O
gsl_interp_accel	struct
*	O
ya	array
,	O
double	O
*	O
z_p	pointer
)	O
{	O
double	O
xmin	double
,	O
xmax	double
,	O
ymin	double
,	O
ymax	double
,	O
zminmin	double
,	O
zminmax	double
,	O
zmaxmin	double
,	O
zmaxmax	double
;	O
double	O
dx	double
,	O
dy	double
;	O
double	O
dt	double
,	O
u	double
;	O
size_t	long
xi	long
,	O
yi	long
;	O
if	O
(	O
xa	array
!=	O
NULL	O
)	O
xi	long
=	O
gsl_interp_accel_find	function
(	O
xa	array
,	O
xarr	array
,	O
xsize	long
,	O
x	double
)	O
;	O
else	O
xi	long
=	O
gsl_interp_bsearch	function
(	O
xarr	array
,	O
x	double
,	O
0	int
,	O
xsize	long
-	O
1	int
)	O
;	O
if	O
(	O
ya	array
!=	O
NULL	O
)	O
yi	long
=	O
gsl_interp_accel_find	function
(	O
ya	array
,	O
yarr	array
,	O
ysize	long
,	O
y	pointer
)	O
;	O
else	O
yi	long
=	O
gsl_interp_bsearch	function
(	O
yarr	array
,	O
y	pointer
,	O
0	int
,	O
ysize	long
-	O
1	int
)	O
;	O
xmin	double
=	O
xarr	array
[	O
xi	long
]	O
;	O
xmax	double
=	O
xarr	array
[	O
xi	long
+	O
1	int
]	O
;	O
ymin	double
=	O
yarr	array
[	O
yi	long
]	O
;	O
ymax	double
=	O
yarr	array
[	O
yi	long
+	O
1	int
]	O
;	O
zminmin	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
,	O
yi	long
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zminmax	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
,	O
yi	long
+	O
1	int
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zmaxmin	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
+	O
1	int
,	O
yi	long
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zmaxmax	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
+	O
1	int
,	O
yi	long
+	O
1	int
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
dx	double
=	O
xmax	double
-	O
xmin	double
;	O
dy	double
=	O
ymax	double
-	O
ymin	double
;	O
dt	double
=	O
1.	int
/	O
dx	double
;	O
u	double
=	O
(	O
y	pointer
-	O
ymin	double
)	O
/	O
dy	double
;	O
*	O
z_p	pointer
=	O
dt	double
*	O
(	O
-	O
(	O
1.	int
-	O
u	double
)	O
*	O
zminmin	double
+	O
(	O
1.	int
-	O
u	double
)	O
*	O
zmaxmin	double
-	O
u	double
*	O
zminmax	double
+	O
u	double
*	O
zmaxmax	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
bilinear_deriv_y	function
(	O
const	O
void	O
*	O
state	pointer
,	O
const	O
double	O
xarr	array
[	O
]	O
,	O
const	O
double	O
yarr	array
[	O
]	O
,	O
const	O
double	O
zarr	array
[	O
]	O
,	O
size_t	long
xsize	long
,	O
size_t	long
ysize	long
,	O
double	O
x	double
,	O
double	O
y	pointer
,	O
gsl_interp_accel	struct
*	O
xa	array
,	O
gsl_interp_accel	struct
*	O
ya	array
,	O
double	O
*	O
z_p	pointer
)	O
{	O
double	O
xmin	double
,	O
xmax	double
,	O
ymin	double
,	O
ymax	double
,	O
zminmin	double
,	O
zminmax	double
,	O
zmaxmin	double
,	O
zmaxmax	double
;	O
double	O
dx	double
,	O
dy	double
;	O
double	O
t	double
,	O
du	double
;	O
size_t	long
xi	long
,	O
yi	long
;	O
if	O
(	O
xa	array
!=	O
NULL	O
)	O
xi	long
=	O
gsl_interp_accel_find	function
(	O
xa	array
,	O
xarr	array
,	O
xsize	long
,	O
x	double
)	O
;	O
else	O
xi	long
=	O
gsl_interp_bsearch	function
(	O
xarr	array
,	O
x	double
,	O
0	int
,	O
xsize	long
-	O
1	int
)	O
;	O
if	O
(	O
ya	array
!=	O
NULL	O
)	O
yi	long
=	O
gsl_interp_accel_find	function
(	O
ya	array
,	O
yarr	array
,	O
ysize	long
,	O
y	pointer
)	O
;	O
else	O
yi	long
=	O
gsl_interp_bsearch	function
(	O
yarr	array
,	O
y	pointer
,	O
0	int
,	O
ysize	long
-	O
1	int
)	O
;	O
xmin	double
=	O
xarr	array
[	O
xi	long
]	O
;	O
xmax	double
=	O
xarr	array
[	O
xi	long
+	O
1	int
]	O
;	O
ymin	double
=	O
yarr	array
[	O
yi	long
]	O
;	O
ymax	double
=	O
yarr	array
[	O
yi	long
+	O
1	int
]	O
;	O
zminmin	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
,	O
yi	long
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zminmax	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
,	O
yi	long
+	O
1	int
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zmaxmin	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
+	O
1	int
,	O
yi	long
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zmaxmax	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
+	O
1	int
,	O
yi	long
+	O
1	int
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
dx	double
=	O
xmax	double
-	O
xmin	double
;	O
dy	double
=	O
ymax	double
-	O
ymin	double
;	O
t	double
=	O
(	O
x	double
-	O
xmin	double
)	O
/	O
dx	double
;	O
du	double
=	O
1.	int
/	O
dy	double
;	O
*	O
z_p	pointer
=	O
du	double
*	O
(	O
-	O
(	O
1.	int
-	O
t	double
)	O
*	O
zminmin	double
-	O
t	double
*	O
zmaxmin	double
+	O
(	O
1.	int
-	O
t	double
)	O
*	O
zminmax	double
+	O
t	double
*	O
zmaxmax	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
bilinear_deriv2	function
(	O
const	O
void	O
*	O
state	pointer
,	O
const	O
double	O
xarr	array
[	O
]	O
,	O
const	O
double	O
yarr	array
[	O
]	O
,	O
const	O
double	O
zarr	array
[	O
]	O
,	O
size_t	long
xsize	long
,	O
size_t	long
ysize	long
,	O
double	O
x	double
,	O
double	O
y	pointer
,	O
gsl_interp_accel	struct
*	O
xa	array
,	O
gsl_interp_accel	struct
*	O
ya	array
,	O
double	O
*	O
z_pp	pointer
)	O
{	O
*	O
z_pp	pointer
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
bilinear_derivxy	function
(	O
const	O
void	O
*	O
state	pointer
,	O
const	O
double	O
xarr	array
[	O
]	O
,	O
const	O
double	O
yarr	array
[	O
]	O
,	O
const	O
double	O
zarr	array
[	O
]	O
,	O
size_t	long
xsize	long
,	O
size_t	long
ysize	long
,	O
double	O
x	double
,	O
double	O
y	pointer
,	O
gsl_interp_accel	struct
*	O
xa	array
,	O
gsl_interp_accel	struct
*	O
ya	array
,	O
double	O
*	O
z_pp	pointer
)	O
{	O
double	O
xmin	double
,	O
xmax	double
,	O
ymin	double
,	O
ymax	double
,	O
zminmin	double
,	O
zminmax	double
,	O
zmaxmin	double
,	O
zmaxmax	double
;	O
double	O
dx	double
,	O
dy	double
;	O
double	O
dt	double
,	O
du	double
;	O
size_t	long
xi	long
,	O
yi	long
;	O
if	O
(	O
xa	array
!=	O
NULL	O
)	O
xi	long
=	O
gsl_interp_accel_find	function
(	O
xa	array
,	O
xarr	array
,	O
xsize	long
,	O
x	double
)	O
;	O
else	O
xi	long
=	O
gsl_interp_bsearch	function
(	O
xarr	array
,	O
x	double
,	O
0	int
,	O
xsize	long
-	O
1	int
)	O
;	O
if	O
(	O
ya	array
!=	O
NULL	O
)	O
yi	long
=	O
gsl_interp_accel_find	function
(	O
ya	array
,	O
yarr	array
,	O
ysize	long
,	O
y	pointer
)	O
;	O
else	O
yi	long
=	O
gsl_interp_bsearch	function
(	O
yarr	array
,	O
y	pointer
,	O
0	int
,	O
ysize	long
-	O
1	int
)	O
;	O
xmin	double
=	O
xarr	array
[	O
xi	long
]	O
;	O
xmax	double
=	O
xarr	array
[	O
xi	long
+	O
1	int
]	O
;	O
ymin	double
=	O
yarr	array
[	O
yi	long
]	O
;	O
ymax	double
=	O
yarr	array
[	O
yi	long
+	O
1	int
]	O
;	O
zminmin	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
,	O
yi	long
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zminmax	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
,	O
yi	long
+	O
1	int
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zmaxmin	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
+	O
1	int
,	O
yi	long
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
zmaxmax	double
=	O
zarr	array
[	O
IDX2D	O
(	O
xi	long
+	O
1	int
,	O
yi	long
+	O
1	int
,	O
xsize	long
,	O
ysize	long
)	O
]	O
;	O
dx	double
=	O
xmax	double
-	O
xmin	double
;	O
dy	double
=	O
ymax	double
-	O
ymin	double
;	O
dt	double
=	O
1.	int
/	O
dx	double
;	O
du	double
=	O
1.	int
/	O
dy	double
;	O
*	O
z_pp	pointer
=	O
dt	double
*	O
du	double
*	O
(	O
zminmin	double
-	O
zmaxmin	double
-	O
zminmax	double
+	O
zmaxmax	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_interp2d_type	struct
bilinear_type	struct
=	O
{	O
"bilinear"	pointer
,	O
2	int
,	O
NULL	O
,	O
&	O
bilinear_init	function
,	O
&	O
bilinear_eval	function
,	O
&	O
bilinear_deriv_x	function
,	O
&	O
bilinear_deriv_y	function
,	O
&	O
bilinear_deriv2	function
,	O
&	O
bilinear_derivxy	function
,	O
&	O
bilinear_deriv2	function
,	O
NULL	O
}	O
;	O
const	O
gsl_interp2d_type	struct
*	O
gsl_interp2d_bilinear	pointer
=	O
&	O
bilinear_type	struct
;	O
