typedef	O
struct	O
{	O
const	O
char	O
*	O
buf	pointer
,	O
*	O
p	pointer
,	O
*	O
token	pointer
;	O
int	O
hints	int
;	O
size_t	long
token_size	long
,	O
token_len	long
;	O
void	O
*	O
user_ctx	pointer
;	O
wget_xml_callback	function
*	O
callback	pointer
;	O
}	O
_xml_context	struct
;	O
static	O
const	O
char	O
*	O
getToken	function
(	O
_xml_context	struct
*	O
context	pointer
)	O
{	O
int	O
c	char
;	O
const	O
char	O
*	O
p	pointer
;	O
while	O
(	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
&&	O
ascii_isspace	O
(	O
c	char
)	O
)	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
!	O
c	char
)	O
return	O
NULL	O
;	O
context	pointer
->	O
token	pointer
=	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
ascii_isalpha	O
(	O
c	char
)	O
||	O
c	char
==	O
'_'	O
)	O
{	O
while	O
(	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
&&	O
!	O
ascii_isspace	O
(	O
c	char
)	O
&&	O
c	char
!=	O
'>'	O
&&	O
c	char
!=	O
'='	O
)	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
!	O
c	char
)	O
return	O
NULL	O
;	O
context	pointer
->	O
token_len	long
=	O
context	pointer
->	O
p	pointer
-	O
context	pointer
->	O
token	pointer
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
if	O
(	O
c	char
==	O
'/'	O
)	O
{	O
if	O
(	O
!	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
)	O
return	O
NULL	O
;	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
c	char
==	O
'>'	O
)	O
{	O
context	pointer
->	O
token_len	long
=	O
2	int
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
else	O
return	O
NULL	O
;	O
}	O
if	O
(	O
c	char
==	O
'\"'	O
||	O
c	char
==	O
'\''	O
)	O
{	O
int	O
quote	int
=	O
c	char
;	O
context	pointer
->	O
token	pointer
=	O
context	pointer
->	O
p	pointer
;	O
if	O
(	O
!	O
(	O
p	pointer
=	O
strchr	function
(	O
context	pointer
->	O
p	pointer
,	O
quote	int
)	O
)	O
)	O
return	O
NULL	O
;	O
context	pointer
->	O
p	pointer
=	O
p	pointer
+	O
1	int
;	O
context	pointer
->	O
token_len	long
=	O
context	pointer
->	O
p	pointer
-	O
context	pointer
->	O
token	pointer
-	O
1	int
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
if	O
(	O
c	char
==	O
'<'	O
)	O
{	O
if	O
(	O
!	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
)	O
return	O
NULL	O
;	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
c	char
==	O
'?'	O
||	O
c	char
==	O
'/'	O
)	O
{	O
context	pointer
->	O
token_len	long
=	O
2	int
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
if	O
(	O
c	char
==	O
'!'	O
)	O
{	O
if	O
(	O
!	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
c	char
==	O
'-'	O
)	O
{	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
!	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
)	O
return	O
NULL	O
;	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
c	char
==	O
'-'	O
)	O
{	O
context	pointer
->	O
token_len	long
=	O
4	int
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
else	O
{	O
context	pointer
->	O
p	pointer
-=	O
2	int
;	O
context	pointer
->	O
token_len	long
=	O
2	int
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
}	O
else	O
{	O
context	pointer
->	O
token_len	long
=	O
2	int
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
}	O
else	O
{	O
context	pointer
->	O
p	pointer
--	O
;	O
context	pointer
->	O
token_len	long
=	O
1	int
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
}	O
if	O
(	O
c	char
==	O
'>'	O
||	O
c	char
==	O
'='	O
)	O
{	O
context	pointer
->	O
token_len	long
=	O
1	int
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
if	O
(	O
c	char
==	O
'-'	O
)	O
{	O
if	O
(	O
!	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
c	char
!=	O
'-'	O
)	O
{	O
c	char
=	O
'-'	O
;	O
}	O
else	O
{	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
!	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
)	O
return	O
NULL	O
;	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
c	char
!=	O
'>'	O
)	O
{	O
context	pointer
->	O
p	pointer
-=	O
2	int
;	O
c	char
=	O
'-'	O
;	O
}	O
else	O
{	O
context	pointer
->	O
token_len	long
=	O
3	int
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
}	O
}	O
if	O
(	O
c	char
==	O
'?'	O
)	O
{	O
if	O
(	O
!	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
c	char
!=	O
'>'	O
)	O
{	O
}	O
else	O
{	O
context	pointer
->	O
p	pointer
++	O
;	O
context	pointer
->	O
token_len	long
=	O
2	int
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
}	O
while	O
(	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
&&	O
!	O
ascii_isspace	O
(	O
c	char
)	O
)	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
c	char
)	O
{	O
context	pointer
->	O
token_len	long
=	O
context	pointer
->	O
p	pointer
-	O
context	pointer
->	O
token	pointer
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
int	O
getValue	function
(	O
_xml_context	struct
*	O
context	pointer
)	O
{	O
int	O
c	char
;	O
context	pointer
->	O
token_len	long
=	O
0	int
;	O
context	pointer
->	O
token	pointer
=	O
context	pointer
->	O
p	pointer
;	O
while	O
(	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
&&	O
ascii_isspace	O
(	O
c	char
)	O
)	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
!	O
c	char
)	O
return	O
EOF	O
;	O
if	O
(	O
c	char
==	O
'='	O
)	O
{	O
context	pointer
->	O
p	pointer
++	O
;	O
if	O
(	O
!	O
getToken	function
(	O
context	pointer
)	O
)	O
return	O
EOF	O
;	O
else	O
return	O
1	int
;	O
}	O
context	pointer
->	O
token	pointer
=	O
context	pointer
->	O
p	pointer
;	O
return	O
1	int
;	O
}	O
static	O
const	O
char	O
*	O
getScriptContent	function
(	O
_xml_context	struct
*	O
context	pointer
)	O
{	O
int	O
comment	int
=	O
0	int
,	O
length_valid	int
=	O
0	int
;	O
const	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
context	pointer
->	O
token	pointer
=	O
context	pointer
->	O
p	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
comment	int
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'-'	O
&&	O
!	O
strncmp	function
(	O
p	pointer
,	O
"-->"	pointer
,	O
3	int
)	O
)	O
{	O
p	pointer
+=	O
3	int
-	O
1	int
;	O
comment	int
=	O
0	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'<'	O
&&	O
!	O
strncmp	function
(	O
p	pointer
,	O
"<!--"	pointer
,	O
4	int
)	O
)	O
{	O
p	pointer
+=	O
4	int
-	O
1	int
;	O
comment	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
*	O
p	pointer
==	O
'<'	O
&&	O
!	O
wget_strncasecmp_ascii	function
(	O
p	pointer
,	O
"</script"	pointer
,	O
8	int
)	O
)	O
{	O
context	pointer
->	O
token_len	long
=	O
p	pointer
-	O
context	pointer
->	O
token	pointer
;	O
length_valid	int
=	O
1	int
;	O
for	O
(	O
p	pointer
+=	O
8	int
;	O
ascii_isspace	O
(	O
*	O
p	pointer
)	O
;	O
p	pointer
++	O
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'>'	O
)	O
{	O
p	pointer
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
*	O
p	pointer
)	O
break	O
;	O
}	O
}	O
}	O
context	pointer
->	O
p	pointer
=	O
p	pointer
;	O
if	O
(	O
!	O
length_valid	int
)	O
context	pointer
->	O
token_len	long
=	O
p	pointer
-	O
context	pointer
->	O
token	pointer
;	O
if	O
(	O
!	O
*	O
p	pointer
&&	O
!	O
context	pointer
->	O
token_len	long
)	O
return	O
NULL	O
;	O
if	O
(	O
context	pointer
->	O
callback	pointer
)	O
context	pointer
->	O
callback	pointer
(	O
context	pointer
->	O
user_ctx	pointer
,	O
XML_FLG_CONTENT	O
|	O
XML_FLG_END	O
,	O
"script"	pointer
,	O
NULL	O
,	O
context	pointer
->	O
token	pointer
,	O
context	pointer
->	O
token_len	long
,	O
context	pointer
->	O
token	pointer
-	O
context	pointer
->	O
buf	pointer
)	O
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
static	O
const	O
char	O
*	O
getUnparsed	function
(	O
_xml_context	struct
*	O
context	pointer
,	O
int	O
flags	int
,	O
const	O
char	O
*	O
end	pointer
,	O
size_t	long
len	long
,	O
const	O
char	O
*	O
directory	pointer
)	O
{	O
int	O
c	char
;	O
if	O
(	O
len	long
==	O
1	int
)	O
{	O
for	O
(	O
context	pointer
->	O
token	pointer
=	O
context	pointer
->	O
p	pointer
;	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
&&	O
c	char
!=	O
*	O
end	pointer
;	O
context	pointer
->	O
p	pointer
++	O
)	O
;	O
}	O
else	O
{	O
for	O
(	O
context	pointer
->	O
token	pointer
=	O
context	pointer
->	O
p	pointer
;	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
;	O
context	pointer
->	O
p	pointer
++	O
)	O
{	O
if	O
(	O
c	char
==	O
*	O
end	pointer
&&	O
context	pointer
->	O
p	pointer
[	O
1	int
]	O
==	O
end	pointer
[	O
1	int
]	O
&&	O
(	O
len	long
==	O
2	int
||	O
context	pointer
->	O
p	pointer
[	O
2	int
]	O
==	O
end	pointer
[	O
2	int
]	O
)	O
)	O
{	O
break	O
;	O
}	O
}	O
}	O
context	pointer
->	O
token_len	long
=	O
context	pointer
->	O
p	pointer
-	O
context	pointer
->	O
token	pointer
;	O
if	O
(	O
c	char
)	O
context	pointer
->	O
p	pointer
+=	O
len	long
;	O
if	O
(	O
!	O
c	char
&&	O
!	O
context	pointer
->	O
token_len	long
)	O
return	O
NULL	O
;	O
if	O
(	O
context	pointer
->	O
callback	pointer
)	O
context	pointer
->	O
callback	pointer
(	O
context	pointer
->	O
user_ctx	pointer
,	O
flags	int
,	O
directory	pointer
,	O
NULL	O
,	O
context	pointer
->	O
token	pointer
,	O
context	pointer
->	O
token_len	long
,	O
context	pointer
->	O
token	pointer
-	O
context	pointer
->	O
buf	pointer
)	O
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
static	O
const	O
char	O
*	O
getComment	function
(	O
_xml_context	struct
*	O
context	pointer
)	O
{	O
return	O
getUnparsed	function
(	O
context	pointer
,	O
XML_FLG_COMMENT	O
,	O
"-->"	pointer
,	O
3	int
,	O
NULL	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
getProcessing	function
(	O
_xml_context	struct
*	O
context	pointer
)	O
{	O
return	O
getUnparsed	function
(	O
context	pointer
,	O
XML_FLG_PROCESSING	O
,	O
"?>"	pointer
,	O
2	int
,	O
NULL	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
getSpecial	function
(	O
_xml_context	struct
*	O
context	pointer
)	O
{	O
return	O
getUnparsed	function
(	O
context	pointer
,	O
XML_FLG_SPECIAL	O
,	O
">"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
getContent	function
(	O
_xml_context	struct
*	O
context	pointer
,	O
const	O
char	O
*	O
directory	pointer
)	O
{	O
int	O
c	char
;	O
for	O
(	O
context	pointer
->	O
token	pointer
=	O
context	pointer
->	O
p	pointer
;	O
(	O
c	char
=	O
*	O
context	pointer
->	O
p	pointer
)	O
&&	O
c	char
!=	O
'<'	O
;	O
context	pointer
->	O
p	pointer
++	O
)	O
;	O
context	pointer
->	O
token_len	long
=	O
context	pointer
->	O
p	pointer
-	O
context	pointer
->	O
token	pointer
;	O
if	O
(	O
!	O
c	char
&&	O
!	O
context	pointer
->	O
token_len	long
)	O
return	O
NULL	O
;	O
if	O
(	O
context	pointer
->	O
callback	pointer
&&	O
context	pointer
->	O
token_len	long
)	O
context	pointer
->	O
callback	pointer
(	O
context	pointer
->	O
user_ctx	pointer
,	O
XML_FLG_CONTENT	O
,	O
directory	pointer
,	O
NULL	O
,	O
context	pointer
->	O
token	pointer
,	O
context	pointer
->	O
token_len	long
,	O
context	pointer
->	O
token	pointer
-	O
context	pointer
->	O
buf	pointer
)	O
;	O
return	O
context	pointer
->	O
token	pointer
;	O
}	O
static	O
int	O
parseXML	function
(	O
const	O
char	O
*	O
dir	array
,	O
_xml_context	struct
*	O
context	pointer
)	O
{	O
const	O
char	O
*	O
tok	pointer
;	O
char	O
directory	pointer
[	O
256	int
]	O
=	O
""	pointer
;	O
size_t	long
pos	int
=	O
0	int
;	O
if	O
(	O
!	O
(	O
context	pointer
->	O
hints	int
&	O
XML_HINT_HTML	O
)	O
)	O
{	O
pos	int
=	O
wget_strlcpy	function
(	O
directory	pointer
,	O
dir	array
,	O
sizeof	O
(	O
directory	pointer
)	O
)	O
;	O
if	O
(	O
pos	int
>=	O
sizeof	O
(	O
directory	pointer
)	O
)	O
pos	int
=	O
sizeof	O
(	O
directory	pointer
)	O
-	O
1	int
;	O
}	O
do	O
{	O
getContent	function
(	O
context	pointer
,	O
directory	pointer
)	O
;	O
if	O
(	O
context	pointer
->	O
token_len	long
)	O
debug_printf	O
(	O
"%s='%.*s'\n"	pointer
,	O
directory	pointer
,	O
(	O
int	O
)	O
context	pointer
->	O
token_len	long
,	O
context	pointer
->	O
token	pointer
)	O
;	O
if	O
(	O
!	O
(	O
tok	pointer
=	O
getToken	function
(	O
context	pointer
)	O
)	O
)	O
return	O
WGET_E_SUCCESS	int
;	O
if	O
(	O
context	pointer
->	O
token_len	long
==	O
1	int
&&	O
*	O
tok	pointer
==	O
'<'	O
)	O
{	O
int	O
flags	int
=	O
XML_FLG_BEGIN	O
;	O
if	O
(	O
!	O
(	O
tok	pointer
=	O
getToken	function
(	O
context	pointer
)	O
)	O
)	O
return	O
WGET_E_XML_PARSE_ERR	int
;	O
if	O
(	O
!	O
(	O
context	pointer
->	O
hints	int
&	O
XML_HINT_HTML	O
)	O
)	O
{	O
if	O
(	O
!	O
pos	int
||	O
directory	pointer
[	O
pos	int
-	O
1	int
]	O
!=	O
'/'	O
)	O
wget_snprintf	function
(	O
&	O
directory	pointer
[	O
pos	int
]	O
,	O
sizeof	O
(	O
directory	pointer
)	O
-	O
pos	int
,	O
"/%.*s"	pointer
,	O
(	O
int	O
)	O
context	pointer
->	O
token_len	long
,	O
tok	pointer
)	O
;	O
else	O
wget_snprintf	function
(	O
&	O
directory	pointer
[	O
pos	int
]	O
,	O
sizeof	O
(	O
directory	pointer
)	O
-	O
pos	int
,	O
"%.*s"	pointer
,	O
(	O
int	O
)	O
context	pointer
->	O
token_len	long
,	O
tok	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
context	pointer
->	O
token_len	long
<	O
sizeof	O
(	O
directory	pointer
)	O
)	O
{	O
memcpy	function
(	O
directory	pointer
,	O
tok	pointer
,	O
context	pointer
->	O
token_len	long
)	O
;	O
directory	pointer
[	O
context	pointer
->	O
token_len	long
]	O
=	O
0	int
;	O
}	O
else	O
{	O
memcpy	function
(	O
directory	pointer
,	O
tok	pointer
,	O
sizeof	O
(	O
directory	pointer
)	O
-	O
1	int
)	O
;	O
directory	pointer
[	O
sizeof	O
(	O
directory	pointer
)	O
-	O
1	int
]	O
=	O
0	int
;	O
}	O
}	O
while	O
(	O
(	O
tok	pointer
=	O
getToken	function
(	O
context	pointer
)	O
)	O
)	O
{	O
if	O
(	O
context	pointer
->	O
token_len	long
==	O
2	int
&&	O
!	O
strncmp	function
(	O
tok	pointer
,	O
"/>"	pointer
,	O
2	int
)	O
)	O
{	O
if	O
(	O
context	pointer
->	O
callback	pointer
)	O
context	pointer
->	O
callback	pointer
(	O
context	pointer
->	O
user_ctx	pointer
,	O
flags	int
|	O
XML_FLG_END	O
,	O
directory	pointer
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
context	pointer
->	O
token_len	long
==	O
1	int
&&	O
*	O
tok	pointer
==	O
'>'	O
)	O
{	O
if	O
(	O
context	pointer
->	O
callback	pointer
)	O
context	pointer
->	O
callback	pointer
(	O
context	pointer
->	O
user_ctx	pointer
,	O
flags	int
|	O
XML_FLG_CLOSE	O
,	O
directory	pointer
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
context	pointer
->	O
hints	int
&	O
XML_HINT_HTML	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
directory	pointer
,	O
"script"	pointer
)	O
)	O
{	O
debug_printf	O
(	O
"*** need special <script> handling\n"	pointer
)	O
;	O
getScriptContent	function
(	O
context	pointer
)	O
;	O
if	O
(	O
context	pointer
->	O
token_len	long
)	O
debug_printf	O
(	O
"%s=%.*s\n"	pointer
,	O
directory	pointer
,	O
(	O
int	O
)	O
context	pointer
->	O
token_len	long
,	O
context	pointer
->	O
token	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
directory	pointer
,	O
"style"	pointer
)	O
)	O
{	O
getContent	function
(	O
context	pointer
,	O
"style"	pointer
)	O
;	O
if	O
(	O
context	pointer
->	O
token_len	long
)	O
debug_printf	O
(	O
"%s=%.*s\n"	pointer
,	O
directory	pointer
,	O
(	O
int	O
)	O
context	pointer
->	O
token_len	long
,	O
context	pointer
->	O
token	pointer
)	O
;	O
}	O
}	O
else	O
parseXML	function
(	O
directory	pointer
,	O
context	pointer
)	O
;	O
break	O
;	O
}	O
else	O
{	O
char	O
attribute	pointer
[	O
context	pointer
->	O
token_len	long
+	O
1	int
]	O
;	O
memcpy	function
(	O
attribute	pointer
,	O
tok	pointer
,	O
context	pointer
->	O
token_len	long
)	O
;	O
attribute	pointer
[	O
context	pointer
->	O
token_len	long
]	O
=	O
0	int
;	O
if	O
(	O
getValue	function
(	O
context	pointer
)	O
==	O
EOF	O
)	O
return	O
WGET_E_XML_PARSE_ERR	int
;	O
if	O
(	O
context	pointer
->	O
token_len	long
)	O
{	O
debug_printf	O
(	O
"%s/@%s=%.*s\n"	pointer
,	O
directory	pointer
,	O
attribute	pointer
,	O
(	O
int	O
)	O
context	pointer
->	O
token_len	long
,	O
context	pointer
->	O
token	pointer
)	O
;	O
if	O
(	O
context	pointer
->	O
callback	pointer
)	O
context	pointer
->	O
callback	pointer
(	O
context	pointer
->	O
user_ctx	pointer
,	O
flags	int
|	O
XML_FLG_ATTRIBUTE	O
,	O
directory	pointer
,	O
attribute	pointer
,	O
context	pointer
->	O
token	pointer
,	O
context	pointer
->	O
token_len	long
,	O
context	pointer
->	O
token	pointer
-	O
context	pointer
->	O
buf	pointer
)	O
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"%s/@%s\n"	pointer
,	O
directory	pointer
,	O
attribute	pointer
)	O
;	O
if	O
(	O
context	pointer
->	O
callback	pointer
)	O
context	pointer
->	O
callback	pointer
(	O
context	pointer
->	O
user_ctx	pointer
,	O
flags	int
|	O
XML_FLG_ATTRIBUTE	O
,	O
directory	pointer
,	O
attribute	pointer
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
}	O
flags	int
=	O
0	int
;	O
}	O
}	O
directory	pointer
[	O
pos	int
]	O
=	O
0	int
;	O
}	O
else	O
if	O
(	O
context	pointer
->	O
token_len	long
==	O
2	int
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
tok	pointer
,	O
"</"	pointer
,	O
2	int
)	O
)	O
{	O
if	O
(	O
!	O
(	O
tok	pointer
=	O
getToken	function
(	O
context	pointer
)	O
)	O
)	O
return	O
WGET_E_XML_PARSE_ERR	int
;	O
if	O
(	O
context	pointer
->	O
callback	pointer
)	O
{	O
if	O
(	O
!	O
(	O
context	pointer
->	O
hints	int
&	O
XML_HINT_HTML	O
)	O
)	O
context	pointer
->	O
callback	pointer
(	O
context	pointer
->	O
user_ctx	pointer
,	O
XML_FLG_END	O
,	O
directory	pointer
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
else	O
{	O
char	O
tag	O
[	O
context	pointer
->	O
token_len	long
+	O
1	int
]	O
;	O
memcpy	function
(	O
tag	O
,	O
tok	pointer
,	O
context	pointer
->	O
token_len	long
)	O
;	O
tag	O
[	O
context	pointer
->	O
token_len	long
]	O
=	O
0	int
;	O
context	pointer
->	O
callback	pointer
(	O
context	pointer
->	O
user_ctx	pointer
,	O
XML_FLG_END	O
,	O
tag	O
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
(	O
tok	pointer
=	O
getToken	function
(	O
context	pointer
)	O
)	O
)	O
return	O
WGET_E_XML_PARSE_ERR	int
;	O
if	O
(	O
!	O
(	O
context	pointer
->	O
hints	int
&	O
XML_HINT_HTML	O
)	O
)	O
return	O
WGET_E_SUCCESS	int
;	O
else	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
tok	pointer
,	O
"<?"	pointer
,	O
2	int
)	O
)	O
{	O
getProcessing	function
(	O
context	pointer
)	O
;	O
debug_printf	O
(	O
"%s=<?%.*s?>\n"	pointer
,	O
directory	pointer
,	O
(	O
int	O
)	O
context	pointer
->	O
token_len	long
,	O
context	pointer
->	O
token	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
tok	pointer
,	O
"<!"	pointer
,	O
2	int
)	O
)	O
{	O
getSpecial	function
(	O
context	pointer
)	O
;	O
debug_printf	O
(	O
"%s=<!%.*s>\n"	pointer
,	O
directory	pointer
,	O
(	O
int	O
)	O
context	pointer
->	O
token_len	long
,	O
context	pointer
->	O
token	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
context	pointer
->	O
token_len	long
==	O
4	int
&&	O
!	O
strncmp	function
(	O
tok	pointer
,	O
"<!--"	pointer
,	O
4	int
)	O
)	O
{	O
getComment	function
(	O
context	pointer
)	O
;	O
debug_printf	O
(	O
"%s=<!--%.*s-->\n"	pointer
,	O
directory	pointer
,	O
(	O
int	O
)	O
context	pointer
->	O
token_len	long
,	O
context	pointer
->	O
token	pointer
)	O
;	O
continue	O
;	O
}	O
}	O
while	O
(	O
tok	pointer
)	O
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
int	O
wget_xml_parse_buffer	function
(	O
const	O
char	O
*	O
buf	pointer
,	O
wget_xml_callback	function
*	O
callback	pointer
,	O
void	O
*	O
user_ctx	pointer
,	O
int	O
hints	int
)	O
{	O
_xml_context	struct
context	pointer
;	O
context	pointer
.	O
token	pointer
=	O
NULL	O
;	O
context	pointer
.	O
token_size	long
=	O
0	int
;	O
context	pointer
.	O
token_len	long
=	O
0	int
;	O
context	pointer
.	O
buf	pointer
=	O
buf	pointer
;	O
context	pointer
.	O
p	pointer
=	O
buf	pointer
;	O
context	pointer
.	O
user_ctx	pointer
=	O
user_ctx	pointer
;	O
context	pointer
.	O
callback	pointer
=	O
callback	pointer
;	O
context	pointer
.	O
hints	int
=	O
hints	int
;	O
return	O
parseXML	function
(	O
"/"	pointer
,	O
&	O
context	pointer
)	O
;	O
}	O
void	O
wget_html_parse_buffer	function
(	O
const	O
char	O
*	O
buf	pointer
,	O
wget_xml_callback	function
*	O
callback	pointer
,	O
void	O
*	O
user_ctx	pointer
,	O
int	O
hints	int
)	O
{	O
wget_xml_parse_buffer	function
(	O
buf	pointer
,	O
callback	pointer
,	O
user_ctx	pointer
,	O
hints	int
|	O
XML_HINT_HTML	O
)	O
;	O
}	O
void	O
wget_xml_parse_file	function
(	O
const	O
char	O
*	O
fname	pointer
,	O
wget_xml_callback	function
*	O
callback	pointer
,	O
void	O
*	O
user_ctx	pointer
,	O
int	O
hints	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
fname	pointer
,	O
"-"	pointer
)	O
)	O
{	O
int	O
fd	array
;	O
if	O
(	O
(	O
fd	array
=	O
open	function
(	O
fname	pointer
,	O
O_RDONLY	int
|	O
O_BINARY	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
struct	O
stat	struct
st	struct
;	O
if	O
(	O
fstat	function
(	O
fd	array
,	O
&	O
st	struct
)	O
==	O
0	int
)	O
{	O
size_t	long
nread	long
=	O
st	struct
.	O
st_size	long
;	O
char	O
*	O
buf	pointer
=	O
mmap	function
(	O
NULL	O
,	O
nread	long
+	O
1	int
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_PRIVATE	int
,	O
fd	array
,	O
0	int
)	O
;	O
if	O
(	O
nread	long
>	O
0	int
)	O
{	O
buf	pointer
[	O
nread	long
]	O
=	O
0	int
;	O
wget_xml_parse_buffer	function
(	O
buf	pointer
,	O
callback	pointer
,	O
user_ctx	pointer
,	O
hints	int
)	O
;	O
}	O
munmap	function
(	O
buf	pointer
,	O
nread	long
)	O
;	O
}	O
close	function
(	O
fd	array
)	O
;	O
}	O
else	O
error_printf	O
(	O
_	O
(	O
"Failed to open %s\n"	pointer
)	O
,	O
fname	pointer
)	O
;	O
}	O
else	O
{	O
char	O
tmp	array
[	O
4096	int
]	O
;	O
ssize_t	long
nbytes	long
;	O
wget_buffer	struct
buf	pointer
;	O
wget_buffer_init	function
(	O
&	O
buf	pointer
,	O
NULL	O
,	O
4096	int
)	O
;	O
while	O
(	O
(	O
nbytes	long
=	O
read	function
(	O
STDIN_FILENO	int
,	O
tmp	array
,	O
sizeof	O
(	O
tmp	array
)	O
)	O
)	O
>	O
0	int
)	O
{	O
wget_buffer_memcat	function
(	O
&	O
buf	pointer
,	O
tmp	array
,	O
nbytes	long
)	O
;	O
}	O
if	O
(	O
buf	pointer
.	O
length	long
)	O
wget_xml_parse_buffer	function
(	O
buf	pointer
.	O
data	pointer
,	O
callback	pointer
,	O
user_ctx	pointer
,	O
hints	int
)	O
;	O
wget_buffer_deinit	function
(	O
&	O
buf	pointer
)	O
;	O
}	O
}	O
void	O
wget_html_parse_file	function
(	O
const	O
char	O
*	O
fname	pointer
,	O
wget_xml_callback	function
*	O
callback	pointer
,	O
void	O
*	O
user_ctx	pointer
,	O
int	O
hints	int
)	O
{	O
wget_xml_parse_file	function
(	O
fname	pointer
,	O
callback	pointer
,	O
user_ctx	pointer
,	O
hints	int
|	O
XML_HINT_HTML	O
)	O
;	O
}	O
