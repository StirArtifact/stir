error_t	function
ports_destroy_right	function
(	O
void	O
*	O
portstruct	pointer
)	O
{	O
struct	O
port_info	struct
*	O
pi	pointer
=	O
portstruct	pointer
;	O
mach_port_t	O
port_right	int
;	O
int	O
defer	int
=	O
0	int
;	O
error_t	function
err	O
;	O
pthread_mutex_lock	function
(	O
&	O
_ports_lock	union
)	O
;	O
port_right	int
=	O
pi	pointer
->	O
port_right	int
;	O
pi	pointer
->	O
port_right	int
=	O
MACH_PORT_DEAD	O
;	O
if	O
(	O
pi	pointer
->	O
flags	int
&	O
PORT_HAS_SENDRIGHTS	int
)	O
{	O
pi	pointer
->	O
flags	int
&=	O
~	O
PORT_HAS_SENDRIGHTS	int
;	O
defer	int
=	O
1	int
;	O
}	O
if	O
(	O
MACH_PORT_VALID	function
(	O
port_right	int
)	O
)	O
{	O
mach_port_clear_protected_payload	function
(	O
mach_task_self	function
(	O
)	O
,	O
port_right	int
)	O
;	O
pthread_rwlock_wrlock	function
(	O
&	O
_ports_htable_lock	union
)	O
;	O
hurd_ihash_locp_remove	function
(	O
&	O
_ports_htable	struct
,	O
pi	pointer
->	O
ports_htable_entry	int
)	O
;	O
hurd_ihash_locp_remove	function
(	O
&	O
pi	pointer
->	O
bucket	pointer
->	O
htable	struct
,	O
pi	pointer
->	O
hentry	int
)	O
;	O
pthread_rwlock_unlock	function
(	O
&	O
_ports_htable_lock	union
)	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
_ports_lock	union
)	O
;	O
if	O
(	O
MACH_PORT_VALID	function
(	O
port_right	int
)	O
)	O
{	O
err	O
=	O
mach_port_mod_refs	function
(	O
mach_task_self	function
(	O
)	O
,	O
port_right	int
,	O
MACH_PORT_RIGHT_RECEIVE	O
,	O
-	O
1	int
)	O
;	O
assert_perror	function
(	O
err	O
)	O
;	O
}	O
if	O
(	O
defer	int
)	O
_ports_port_deref_deferred	function
(	O
pi	pointer
)	O
;	O
return	O
0	int
;	O
}	O
