struct	O
includes	struct
{	O
struct	O
includes	struct
*	O
next	pointer
;	O
const	O
char	O
*	O
dir	pointer
;	O
int	O
len	int
;	O
}	O
;	O
typedef	O
struct	O
includes	struct
includes	struct
;	O
static	O
includes	struct
*	O
dir_list	pointer
;	O
static	O
includes	struct
*	O
dir_list_end	pointer
;	O
static	O
int	O
dir_max_length	int
;	O
void	O
include_init	function
(	O
void	O
)	O
{	O
dir_list	pointer
=	O
NULL	O
;	O
dir_list_end	pointer
=	O
NULL	O
;	O
dir_max_length	int
=	O
0	int
;	O
}	O
void	O
include_env_init	function
(	O
void	O
)	O
{	O
char	O
*	O
path	pointer
;	O
char	O
*	O
path_end	pointer
;	O
char	O
*	O
env_path	pointer
;	O
if	O
(	O
no_gnu_extensions	int
)	O
return	O
;	O
env_path	pointer
=	O
getenv	function
(	O
"M4PATH"	pointer
)	O
;	O
if	O
(	O
env_path	pointer
==	O
NULL	O
)	O
return	O
;	O
env_path	pointer
=	O
xstrdup	function
(	O
env_path	pointer
)	O
;	O
path	pointer
=	O
env_path	pointer
;	O
do	O
{	O
path_end	pointer
=	O
strchr	function
(	O
path	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
path_end	pointer
)	O
*	O
path_end	pointer
=	O
'\0'	O
;	O
add_include_directory	function
(	O
path	pointer
)	O
;	O
path	pointer
=	O
path_end	pointer
+	O
1	int
;	O
}	O
while	O
(	O
path_end	pointer
)	O
;	O
free	function
(	O
env_path	pointer
)	O
;	O
}	O
void	O
add_include_directory	function
(	O
const	O
char	O
*	O
dir	pointer
)	O
{	O
includes	struct
*	O
incl	pointer
;	O
if	O
(	O
no_gnu_extensions	int
)	O
return	O
;	O
if	O
(	O
*	O
dir	pointer
==	O
'\0'	O
)	O
dir	pointer
=	O
"."	pointer
;	O
incl	pointer
=	O
(	O
includes	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
includes	struct
)	O
)	O
;	O
incl	pointer
->	O
next	pointer
=	O
NULL	O
;	O
incl	pointer
->	O
len	int
=	O
strlen	function
(	O
dir	pointer
)	O
;	O
incl	pointer
->	O
dir	pointer
=	O
xstrdup	function
(	O
dir	pointer
)	O
;	O
if	O
(	O
incl	pointer
->	O
len	int
>	O
dir_max_length	int
)	O
dir_max_length	int
=	O
incl	pointer
->	O
len	int
;	O
if	O
(	O
dir_list_end	pointer
==	O
NULL	O
)	O
dir_list	pointer
=	O
incl	pointer
;	O
else	O
dir_list_end	pointer
->	O
next	pointer
=	O
incl	pointer
;	O
dir_list_end	pointer
=	O
incl	pointer
;	O
}	O
static	O
FILE	struct
*	O
m4_fopen	function
(	O
const	O
char	O
*	O
file	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
=	O
fopen	function
(	O
file	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
)	O
{	O
struct	O
stat	struct
st	struct
;	O
int	O
fd	int
=	O
fileno	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
fstat	function
(	O
fd	int
,	O
&	O
st	struct
)	O
==	O
0	int
&&	O
S_ISDIR	O
(	O
st	struct
.	O
st_mode	int
)	O
)	O
{	O
fclose	function
(	O
fp	pointer
)	O
;	O
errno	O
=	O
EISDIR	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
set_cloexec_flag	function
(	O
fd	int
,	O
true	int
)	O
!=	O
0	int
)	O
M4ERROR	O
(	O
(	O
warning_status	int
,	O
errno	O
,	O
"Warning: cannot protect input file across forks"	pointer
)	O
)	O
;	O
}	O
return	O
fp	pointer
;	O
}	O
FILE	struct
*	O
m4_path_search	function
(	O
const	O
char	O
*	O
file	pointer
,	O
char	O
*	O
*	O
result	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
includes	struct
*	O
incl	pointer
;	O
char	O
*	O
name	pointer
;	O
int	O
e	int
;	O
if	O
(	O
result	pointer
)	O
*	O
result	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
*	O
file	pointer
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
return	O
NULL	O
;	O
}	O
fp	pointer
=	O
m4_fopen	function
(	O
file	pointer
)	O
;	O
if	O
(	O
fp	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
result	pointer
)	O
*	O
result	pointer
=	O
xstrdup	function
(	O
file	pointer
)	O
;	O
return	O
fp	pointer
;	O
}	O
if	O
(	O
IS_ABSOLUTE_FILE_NAME	O
(	O
file	pointer
)	O
||	O
no_gnu_extensions	int
)	O
return	O
NULL	O
;	O
e	int
=	O
errno	O
;	O
for	O
(	O
incl	pointer
=	O
dir_list	pointer
;	O
incl	pointer
!=	O
NULL	O
;	O
incl	pointer
=	O
incl	pointer
->	O
next	pointer
)	O
{	O
name	pointer
=	O
file_name_concat	function
(	O
incl	pointer
->	O
dir	pointer
,	O
file	pointer
,	O
NULL	O
)	O
;	O
fp	pointer
=	O
m4_fopen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
fp	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
debug_level	int
&	O
DEBUG_TRACE_PATH	int
)	O
DEBUG_MESSAGE2	O
(	O
"path search for `%s' found `%s'"	pointer
,	O
file	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
result	pointer
)	O
*	O
result	pointer
=	O
name	pointer
;	O
else	O
free	function
(	O
name	pointer
)	O
;	O
return	O
fp	pointer
;	O
}	O
free	function
(	O
name	pointer
)	O
;	O
}	O
errno	O
=	O
e	int
;	O
return	O
fp	pointer
;	O
}	O
