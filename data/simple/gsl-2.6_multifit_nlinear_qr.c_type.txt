typedef	O
struct	O
{	O
size_t	long
p	int
;	O
gsl_matrix	struct
*	O
QR	pointer
;	O
gsl_vector	struct
*	O
tau_Q	pointer
;	O
gsl_matrix	struct
*	O
T	pointer
;	O
gsl_permutation	struct
*	O
perm	pointer
;	O
size_t	long
rank	long
;	O
gsl_vector	struct
*	O
residual	pointer
;	O
gsl_vector	struct
*	O
qtf	pointer
;	O
gsl_vector	struct
*	O
workn	pointer
;	O
gsl_vector	struct
*	O
workp	pointer
;	O
gsl_vector	struct
*	O
work3p	pointer
;	O
double	O
mu	double
;	O
}	O
qr_state_t	struct
;	O
static	O
int	O
qr_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
qr_presolve	function
(	O
const	O
double	O
mu	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
qr_solve	function
(	O
const	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
qr_rcond	function
(	O
double	O
*	O
rcond	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
void	O
*	O
qr_alloc	function
(	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
qr_state_t	struct
*	O
state	pointer
;	O
(	O
void	O
)	O
n	int
;	O
state	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
qr_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate qr state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
QR	pointer
=	O
gsl_matrix_alloc	function
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
QR	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for QR"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
tau_Q	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
tau_Q	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for tau_Q"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
T	pointer
=	O
gsl_matrix_alloc	function
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
T	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for T"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
qtf	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
qtf	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for qtf"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
residual	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
residual	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for residual"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
perm	pointer
=	O
gsl_permutation_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
perm	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for perm"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workn	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workn	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workn"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workp	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workp"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
work3p	pointer
=	O
gsl_vector_alloc	function
(	O
3	int
*	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
work3p	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for work3p"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
p	int
=	O
p	int
;	O
state	pointer
->	O
mu	double
=	O
0.0	int
;	O
state	pointer
->	O
rank	long
=	O
0	int
;	O
return	O
state	pointer
;	O
}	O
static	O
void	O
qr_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
qr_state_t	struct
*	O
state	pointer
=	O
(	O
qr_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
QR	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
QR	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
tau_Q	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
tau_Q	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
T	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
T	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
qtf	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
qtf	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
residual	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
residual	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
perm	pointer
)	O
gsl_permutation_free	function
(	O
state	pointer
->	O
perm	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
workn	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workn	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workp	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
work3p	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
work3p	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
qr_init	function
(	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
qr_state_t	struct
*	O
state	pointer
=	O
(	O
qr_state_t	struct
*	O
)	O
vstate	pointer
;	O
int	O
signum	pointer
;	O
gsl_matrix_memcpy	function
(	O
state	pointer
->	O
QR	pointer
,	O
trust_state	pointer
->	O
J	pointer
)	O
;	O
gsl_linalg_QRPT_decomp	function
(	O
state	pointer
->	O
QR	pointer
,	O
state	pointer
->	O
tau_Q	pointer
,	O
state	pointer
->	O
perm	pointer
,	O
&	O
signum	pointer
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
qr_presolve	function
(	O
const	O
double	O
mu	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
qr_state_t	struct
*	O
state	pointer
=	O
(	O
qr_state_t	struct
*	O
)	O
vstate	pointer
;	O
state	pointer
->	O
mu	double
=	O
mu	double
;	O
(	O
void	O
)	O
vtrust_state	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
qr_solve	function
(	O
const	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
const	O
void	O
*	O
vtrust_state	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
qr_state_t	struct
*	O
state	pointer
=	O
(	O
qr_state_t	struct
*	O
)	O
vstate	pointer
;	O
int	O
status	int
;	O
if	O
(	O
state	pointer
->	O
mu	double
==	O
0.0	int
)	O
{	O
size_t	long
rank	long
=	O
gsl_linalg_QRPT_rank	function
(	O
state	pointer
->	O
QR	pointer
,	O
-	O
1.0	int
)	O
;	O
status	int
=	O
gsl_linalg_QRPT_lssolve2	function
(	O
state	pointer
->	O
QR	pointer
,	O
state	pointer
->	O
tau_Q	pointer
,	O
state	pointer
->	O
perm	pointer
,	O
f	pointer
,	O
rank	long
,	O
x	double
,	O
state	pointer
->	O
residual	pointer
)	O
;	O
}	O
else	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
trust_state	pointer
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct
*	O
)	O
vtrust_state	pointer
;	O
double	O
sqrt_mu	double
=	O
sqrt	function
(	O
state	pointer
->	O
mu	double
)	O
;	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
qtf	pointer
,	O
f	pointer
)	O
;	O
gsl_linalg_QR_QTvec	function
(	O
state	pointer
->	O
QR	pointer
,	O
state	pointer
->	O
tau_Q	pointer
,	O
state	pointer
->	O
qtf	pointer
)	O
;	O
status	int
=	O
qrsolv	function
(	O
state	pointer
->	O
QR	pointer
,	O
state	pointer
->	O
perm	pointer
,	O
sqrt_mu	double
,	O
trust_state	pointer
->	O
diag	pointer
,	O
state	pointer
->	O
qtf	pointer
,	O
state	pointer
->	O
T	pointer
,	O
x	double
,	O
state	pointer
->	O
workn	pointer
)	O
;	O
}	O
gsl_vector_scale	function
(	O
x	double
,	O
-	O
1.0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
qr_rcond	function
(	O
double	O
*	O
rcond	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
int	O
status	int
;	O
qr_state_t	struct
*	O
state	pointer
=	O
(	O
qr_state_t	struct
*	O
)	O
vstate	pointer
;	O
status	int
=	O
gsl_linalg_QRPT_rcond	function
(	O
state	pointer
->	O
QR	pointer
,	O
rcond	pointer
,	O
state	pointer
->	O
work3p	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
const	O
gsl_multifit_nlinear_solver	struct
qr_type	struct
=	O
{	O
"qr"	pointer
,	O
qr_alloc	function
,	O
qr_init	function
,	O
qr_presolve	function
,	O
qr_solve	function
,	O
qr_rcond	function
,	O
qr_free	function
}	O
;	O
const	O
gsl_multifit_nlinear_solver	struct
*	O
gsl_multifit_nlinear_solver_qr	pointer
=	O
&	O
qr_type	struct
;	O
