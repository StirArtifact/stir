static	O
double	O
scaled_infnorm	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
g	pointer
)	O
;	O
int	O
gsl_multifit_fdfsolver_test	function
(	O
const	O
gsl_multifit_fdfsolver	struct
*	O
s	pointer
,	O
const	O
double	O
xtol	double
,	O
const	O
double	O
gtol	double
,	O
const	O
double	O
ftol	double
,	O
int	O
*	O
info	pointer
)	O
{	O
int	O
status	int
;	O
double	O
gnorm	double
,	O
fnorm	double
,	O
phi	double
;	O
*	O
info	pointer
=	O
0	int
;	O
status	int
=	O
gsl_multifit_test_delta	function
(	O
s	pointer
->	O
dx	pointer
,	O
s	pointer
->	O
x	double
,	O
xtol	double
*	O
xtol	double
,	O
xtol	double
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
{	O
*	O
info	pointer
=	O
1	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
(	O
s	pointer
->	O
type	pointer
->	O
gradient	pointer
)	O
(	O
s	pointer
->	O
state	pointer
,	O
s	pointer
->	O
g	pointer
)	O
;	O
gnorm	double
=	O
scaled_infnorm	function
(	O
s	pointer
->	O
x	double
,	O
s	pointer
->	O
g	pointer
)	O
;	O
fnorm	double
=	O
gsl_blas_dnrm2	function
(	O
s	pointer
->	O
f	pointer
)	O
;	O
phi	double
=	O
0.5	int
*	O
fnorm	double
*	O
fnorm	double
;	O
if	O
(	O
gnorm	double
<=	O
gtol	double
*	O
GSL_MAX	O
(	O
phi	double
,	O
1.0	int
)	O
)	O
{	O
*	O
info	pointer
=	O
2	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
return	O
GSL_CONTINUE	int
;	O
}	O
int	O
gsl_multifit_test_delta	function
(	O
const	O
gsl_vector	struct
*	O
dx	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
double	O
epsabs	double
,	O
double	O
epsrel	double
)	O
{	O
size_t	long
i	long
;	O
int	O
ok	int
=	O
1	int
;	O
const	O
size_t	long
n	int
=	O
x	double
->	O
size	long
;	O
if	O
(	O
epsrel	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"relative tolerance is negative"	pointer
,	O
GSL_EBADTOL	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
xi	double
=	O
gsl_vector_get	function
(	O
x	double
,	O
i	long
)	O
;	O
double	O
dxi	double
=	O
gsl_vector_get	function
(	O
dx	pointer
,	O
i	long
)	O
;	O
double	O
tolerance	double
=	O
epsabs	double
+	O
epsrel	double
*	O
fabs	function
(	O
xi	double
)	O
;	O
if	O
(	O
fabs	function
(	O
dxi	double
)	O
<	O
tolerance	double
)	O
{	O
ok	int
=	O
1	int
;	O
}	O
else	O
{	O
ok	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
ok	int
)	O
return	O
GSL_SUCCESS	int
;	O
return	O
GSL_CONTINUE	int
;	O
}	O
int	O
gsl_multifit_test_gradient	function
(	O
const	O
gsl_vector	struct
*	O
g	pointer
,	O
double	O
epsabs	double
)	O
{	O
size_t	long
i	long
;	O
double	O
residual	double
=	O
0	int
;	O
const	O
size_t	long
n	int
=	O
g	pointer
->	O
size	long
;	O
if	O
(	O
epsabs	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"absolute tolerance is negative"	pointer
,	O
GSL_EBADTOL	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
double	O
gi	double
=	O
gsl_vector_get	function
(	O
g	pointer
,	O
i	long
)	O
;	O
residual	double
+=	O
fabs	function
(	O
gi	double
)	O
;	O
}	O
if	O
(	O
residual	double
<	O
epsabs	double
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
return	O
GSL_CONTINUE	int
;	O
}	O
static	O
double	O
scaled_infnorm	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
g	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
x	double
->	O
size	long
;	O
size_t	long
i	long
;	O
double	O
norm	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
double	O
xi	double
=	O
GSL_MAX	O
(	O
gsl_vector_get	function
(	O
x	double
,	O
i	long
)	O
,	O
1.0	int
)	O
;	O
double	O
gi	double
=	O
gsl_vector_get	function
(	O
g	pointer
,	O
i	long
)	O
;	O
double	O
tmp	double
=	O
fabs	function
(	O
xi	double
*	O
gi	double
)	O
;	O
if	O
(	O
tmp	double
>	O
norm	double
)	O
norm	double
=	O
tmp	double
;	O
}	O
return	O
norm	double
;	O
}	O
