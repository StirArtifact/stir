static	O
int	O
handler	pointer
(	O
int	O
code	int
,	O
void	O
*	O
closure	pointer
,	O
struct	O
sockaddr_in	struct
*	O
dest	pointer
,	O
struct	O
sockaddr_in	struct
*	O
from	pointer
,	O
struct	O
ip	struct
*	O
ip	struct
,	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
int	O
datalen	int
)	O
;	O
int	O
print_echo	function
(	O
int	O
dup	function
,	O
struct	O
ping_stat	struct
*	O
stat	struct
,	O
struct	O
sockaddr_in	struct
*	O
dest	pointer
,	O
struct	O
sockaddr_in	struct
*	O
from	pointer
,	O
struct	O
ip	struct
*	O
ip	struct
,	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
int	O
datalen	int
)	O
;	O
static	O
int	O
echo_finish	function
(	O
void	O
)	O
;	O
void	O
print_icmp_header	function
(	O
struct	O
sockaddr_in	struct
*	O
from	pointer
,	O
struct	O
ip	struct
*	O
ip	struct
,	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
int	O
len	char
)	O
;	O
static	O
void	O
print_ip_opt	function
(	O
struct	O
ip	struct
*	O
ip	struct
,	O
int	O
hlen	int
)	O
;	O
int	O
ping_echo	function
(	O
char	O
*	O
hostname	pointer
)	O
{	O
char	O
rspace	array
[	O
3	int
+	O
4	int
*	O
NROUTES	int
+	O
1	int
]	O
;	O
struct	O
ping_stat	struct
ping_stat	struct
;	O
int	O
status	int
;	O
if	O
(	O
options	int
&	O
OPT_FLOOD	int
&&	O
options	int
&	O
OPT_INTERVAL	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"-f and -i incompatible options"	pointer
)	O
;	O
memset	function
(	O
&	O
ping_stat	struct
,	O
0	int
,	O
sizeof	O
(	O
ping_stat	struct
)	O
)	O
;	O
ping_stat	struct
.	O
tmin	double
=	O
999999999.0	int
;	O
ping_set_type	function
(	O
ping	pointer
,	O
ICMP_ECHO	int
)	O
;	O
ping_set_packetsize	function
(	O
ping	pointer
,	O
data_length	long
)	O
;	O
ping_set_event_handler	function
(	O
ping	pointer
,	O
handler	pointer
,	O
&	O
ping_stat	struct
)	O
;	O
if	O
(	O
ping_set_dest	function
(	O
ping	pointer
,	O
hostname	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown host"	pointer
)	O
;	O
if	O
(	O
options	int
&	O
OPT_RROUTE	int
)	O
{	O
memset	function
(	O
rspace	array
,	O
0	int
,	O
sizeof	O
(	O
rspace	array
)	O
)	O
;	O
rspace	array
[	O
IPOPT_OPTVAL	int
]	O
=	O
IPOPT_RR	int
;	O
rspace	array
[	O
IPOPT_OLEN	int
]	O
=	O
sizeof	O
(	O
rspace	array
)	O
-	O
1	int
;	O
rspace	array
[	O
IPOPT_OFFSET	int
]	O
=	O
IPOPT_MINOFF	int
;	O
if	O
(	O
setsockopt	function
(	O
ping	pointer
->	O
ping_fd	int
,	O
IPPROTO_IP	int
,	O
IP_OPTIONS	int
,	O
rspace	array
,	O
sizeof	O
(	O
rspace	array
)	O
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"setsockopt"	pointer
)	O
;	O
}	O
printf	function
(	O
"PING %s (%s): %d data bytes\n"	pointer
,	O
ping	pointer
->	O
ping_hostname	pointer
,	O
inet_ntoa	function
(	O
ping	pointer
->	O
ping_dest	union
.	O
ping_sockaddr	struct
.	O
sin_addr	struct
)	O
,	O
data_length	long
)	O
;	O
status	int
=	O
ping_run	function
(	O
ping	pointer
,	O
echo_finish	function
)	O
;	O
free	function
(	O
ping	pointer
->	O
ping_hostname	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
handler	pointer
(	O
int	O
code	int
,	O
void	O
*	O
closure	pointer
,	O
struct	O
sockaddr_in	struct
*	O
dest	pointer
,	O
struct	O
sockaddr_in	struct
*	O
from	pointer
,	O
struct	O
ip	struct
*	O
ip	struct
,	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
int	O
datalen	int
)	O
{	O
switch	O
(	O
code	int
)	O
{	O
case	O
PEV_RESPONSE	int
:	O
case	O
PEV_DUPLICATE	int
:	O
print_echo	function
(	O
code	int
==	O
PEV_DUPLICATE	int
,	O
(	O
struct	O
ping_stat	struct
*	O
)	O
closure	pointer
,	O
dest	pointer
,	O
from	pointer
,	O
ip	struct
,	O
icmp	pointer
,	O
datalen	int
)	O
;	O
break	O
;	O
case	O
PEV_NOECHO	int
:	O
;	O
print_icmp_header	function
(	O
from	pointer
,	O
ip	struct
,	O
icmp	pointer
,	O
datalen	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
print_echo	function
(	O
int	O
dupflag	int
,	O
struct	O
ping_stat	struct
*	O
ping_stat	struct
,	O
struct	O
sockaddr_in	struct
*	O
dest	pointer
,	O
struct	O
sockaddr_in	struct
*	O
from	pointer
,	O
struct	O
ip	struct
*	O
ip	struct
,	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
int	O
datalen	int
)	O
{	O
int	O
hlen	int
;	O
struct	O
timeval	struct
tv	struct
;	O
int	O
timing	int
=	O
0	int
;	O
double	O
triptime	double
=	O
0.0	int
;	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
NULL	O
)	O
;	O
hlen	int
=	O
ip	struct
->	O
ip_hl	int
<<	O
2	int
;	O
datalen	int
-=	O
hlen	int
;	O
if	O
(	O
PING_TIMING	O
(	O
datalen	int
-	O
8	int
)	O
)	O
{	O
struct	O
timeval	struct
tv1	struct
,	O
*	O
tp	pointer
;	O
timing	int
++	O
;	O
tp	pointer
=	O
(	O
struct	O
timeval	struct
*	O
)	O
icmp	pointer
->	O
icmp_data	O
;	O
memcpy	function
(	O
&	O
tv1	struct
,	O
tp	pointer
,	O
sizeof	O
(	O
tv1	struct
)	O
)	O
;	O
tvsub	function
(	O
&	O
tv	struct
,	O
&	O
tv1	struct
)	O
;	O
triptime	double
=	O
(	O
(	O
double	O
)	O
tv	struct
.	O
tv_sec	long
)	O
*	O
1000.0	int
+	O
(	O
(	O
double	O
)	O
tv	struct
.	O
tv_usec	long
)	O
/	O
1000.0	int
;	O
ping_stat	struct
->	O
tsum	double
+=	O
triptime	double
;	O
ping_stat	struct
->	O
tsumsq	double
+=	O
triptime	double
*	O
triptime	double
;	O
if	O
(	O
triptime	double
<	O
ping_stat	struct
->	O
tmin	double
)	O
ping_stat	struct
->	O
tmin	double
=	O
triptime	double
;	O
if	O
(	O
triptime	double
>	O
ping_stat	struct
->	O
tmax	double
)	O
ping_stat	struct
->	O
tmax	double
=	O
triptime	double
;	O
}	O
if	O
(	O
options	int
&	O
OPT_QUIET	int
)	O
return	O
0	int
;	O
if	O
(	O
options	int
&	O
OPT_FLOOD	int
)	O
{	O
putchar	function
(	O
'\b'	O
)	O
;	O
return	O
0	int
;	O
}	O
printf	function
(	O
"%d bytes from %s: icmp_seq=%u"	pointer
,	O
datalen	int
,	O
inet_ntoa	function
(	O
*	O
(	O
struct	O
in_addr	struct
*	O
)	O
&	O
from	pointer
->	O
sin_addr	struct
.	O
s_addr	int
)	O
,	O
icmp	pointer
->	O
icmp_seq	O
)	O
;	O
printf	function
(	O
" ttl=%d"	pointer
,	O
ip	struct
->	O
ip_ttl	char
)	O
;	O
if	O
(	O
timing	int
)	O
printf	function
(	O
" time=%.3f ms"	pointer
,	O
triptime	double
)	O
;	O
if	O
(	O
dupflag	int
)	O
printf	function
(	O
" (DUP!)"	pointer
)	O
;	O
print_ip_opt	function
(	O
ip	struct
,	O
hlen	int
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
ipaddr2str	function
(	O
struct	O
in_addr	struct
ina	struct
)	O
{	O
struct	O
hostent	struct
*	O
hp	pointer
;	O
if	O
(	O
options	int
&	O
OPT_NUMERIC	int
||	O
!	O
(	O
hp	pointer
=	O
gethostbyaddr	function
(	O
(	O
char	O
*	O
)	O
&	O
ina	struct
,	O
4	int
,	O
AF_INET	O
)	O
)	O
)	O
return	O
xstrdup	function
(	O
inet_ntoa	function
(	O
ina	struct
)	O
)	O
;	O
else	O
{	O
char	O
*	O
ipstr	pointer
=	O
inet_ntoa	function
(	O
ina	struct
)	O
;	O
int	O
len	char
=	O
strlen	function
(	O
hp	pointer
->	O
h_name	pointer
)	O
+	O
1	int
;	O
char	O
*	O
buf	pointer
;	O
if	O
(	O
ipstr	pointer
)	O
len	char
+=	O
strlen	function
(	O
ipstr	pointer
)	O
+	O
3	int
;	O
buf	pointer
=	O
xmalloc	function
(	O
len	char
)	O
;	O
if	O
(	O
ipstr	pointer
)	O
snprintf	function
(	O
buf	pointer
,	O
len	char
,	O
"%s (%s)"	pointer
,	O
hp	pointer
->	O
h_name	pointer
,	O
ipstr	pointer
)	O
;	O
else	O
snprintf	function
(	O
buf	pointer
,	O
len	char
,	O
"%s"	pointer
,	O
hp	pointer
->	O
h_name	pointer
)	O
;	O
return	O
buf	pointer
;	O
}	O
}	O
struct	O
icmp_diag	struct
{	O
int	O
type	enum
;	O
char	O
*	O
text	pointer
;	O
void	O
(	O
*	O
fun	pointer
)	O
(	O
icmphdr_t	struct
*	O
,	O
void	O
*	O
data	array
)	O
;	O
void	O
*	O
data	array
;	O
}	O
;	O
struct	O
icmp_code_descr	struct
{	O
int	O
code	int
;	O
char	O
*	O
diag	pointer
;	O
}	O
icmp_code_descr	struct
[	O
]	O
=	O
{	O
{	O
ICMP_NET_UNREACH	int
,	O
"Destination Net Unreachable"	pointer
}	O
,	O
{	O
ICMP_HOST_UNREACH	int
,	O
"Destination Host Unreachable"	pointer
}	O
,	O
{	O
ICMP_PROT_UNREACH	int
,	O
"Destination Protocol Unreachable"	pointer
}	O
,	O
{	O
ICMP_PORT_UNREACH	int
,	O
"Destination Port Unreachable"	pointer
}	O
,	O
{	O
ICMP_FRAG_NEEDED	int
,	O
"Fragmentation needed and DF set"	pointer
}	O
,	O
{	O
ICMP_SR_FAILED	int
,	O
"Source Route Failed"	pointer
}	O
,	O
{	O
ICMP_NET_UNKNOWN	int
,	O
"Network Unknown"	pointer
}	O
,	O
{	O
ICMP_HOST_UNKNOWN	int
,	O
"Host Unknown"	pointer
}	O
,	O
{	O
ICMP_HOST_ISOLATED	int
,	O
"Host Isolated"	pointer
}	O
,	O
{	O
ICMP_NET_UNR_TOS	int
,	O
"Destination Network Unreachable At This TOS"	pointer
}	O
,	O
{	O
ICMP_HOST_UNR_TOS	int
,	O
"Destination Host Unreachable At This TOS"	pointer
}	O
,	O
{	O
ICMP_PKT_FILTERED	int
,	O
"Packet Filtered"	pointer
}	O
,	O
{	O
ICMP_PREC_VIOLATION	int
,	O
"Precedence Violation"	pointer
}	O
,	O
{	O
ICMP_PREC_CUTOFF	int
,	O
"Precedence Cutoff"	pointer
}	O
,	O
{	O
ICMP_REDIR_NET	int
,	O
"Redirect Network"	pointer
}	O
,	O
{	O
ICMP_REDIR_HOST	int
,	O
"Redirect Host"	pointer
}	O
,	O
{	O
ICMP_REDIR_NETTOS	int
,	O
"Redirect Type of Service and Network"	pointer
}	O
,	O
{	O
ICMP_REDIR_HOSTTOS	int
,	O
"Redirect Type of Service and Host"	pointer
}	O
,	O
{	O
ICMP_EXC_TTL	int
,	O
"Time to live exceeded"	pointer
}	O
,	O
{	O
ICMP_EXC_FRAGTIME	int
,	O
"Frag reassembly time exceeded"	pointer
}	O
}	O
;	O
static	O
void	O
print_icmp_code	function
(	O
int	O
code	int
,	O
char	O
*	O
prefix	pointer
)	O
{	O
struct	O
icmp_code_descr	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
icmp_code_descr	struct
;	O
p	pointer
<	O
icmp_code_descr	struct
+	O
NITEMS	O
(	O
icmp_code_descr	struct
)	O
;	O
p	pointer
++	O
)	O
if	O
(	O
p	pointer
->	O
code	int
==	O
code	int
)	O
{	O
printf	function
(	O
"%s\n"	pointer
,	O
p	pointer
->	O
diag	pointer
)	O
;	O
return	O
;	O
}	O
printf	function
(	O
"%s, Unknown Code: %d\n"	pointer
,	O
prefix	pointer
,	O
code	int
)	O
;	O
}	O
static	O
void	O
print_ip_header	function
(	O
struct	O
ip	struct
*	O
ip	struct
)	O
{	O
int	O
hlen	int
;	O
unsigned	O
char	O
*	O
cp	pointer
;	O
hlen	int
=	O
ip	struct
->	O
ip_hl	int
<<	O
2	int
;	O
cp	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
ip	struct
+	O
20	int
;	O
printf	function
(	O
"Vr HL TOS  Len   ID Flg  off TTL Pro  cks      Src      Dst Data\n"	pointer
)	O
;	O
printf	function
(	O
" %1x  %1x  %02x %04x %04x"	pointer
,	O
ip	struct
->	O
ip_v	int
,	O
ip	struct
->	O
ip_hl	int
,	O
ip	struct
->	O
ip_tos	char
,	O
ip	struct
->	O
ip_len	short
,	O
ip	struct
->	O
ip_id	short
)	O
;	O
printf	function
(	O
"   %1x %04x"	pointer
,	O
(	O
(	O
ip	struct
->	O
ip_off	short
)	O
&	O
0xe000	int
)	O
>>	O
13	int
,	O
(	O
ip	struct
->	O
ip_off	short
)	O
&	O
0x1fff	int
)	O
;	O
printf	function
(	O
"  %02x  %02x %04x"	pointer
,	O
ip	struct
->	O
ip_ttl	char
,	O
ip	struct
->	O
ip_p	char
,	O
ip	struct
->	O
ip_sum	short
)	O
;	O
printf	function
(	O
" %s "	pointer
,	O
inet_ntoa	function
(	O
*	O
(	O
(	O
struct	O
in_addr	struct
*	O
)	O
&	O
ip	struct
->	O
ip_src	struct
)	O
)	O
)	O
;	O
printf	function
(	O
" %s "	pointer
,	O
inet_ntoa	function
(	O
*	O
(	O
(	O
struct	O
in_addr	struct
*	O
)	O
&	O
ip	struct
->	O
ip_dst	struct
)	O
)	O
)	O
;	O
while	O
(	O
hlen	int
--	O
>	O
20	int
)	O
printf	function
(	O
"%02x"	pointer
,	O
*	O
cp	pointer
++	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
void	O
print_ip_data	function
(	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
void	O
*	O
data	array
)	O
{	O
int	O
hlen	int
;	O
unsigned	O
char	O
*	O
cp	pointer
;	O
struct	O
ip	struct
*	O
ip	struct
=	O
&	O
icmp	pointer
->	O
icmp_ip	O
;	O
print_ip_header	function
(	O
ip	struct
)	O
;	O
hlen	int
=	O
ip	struct
->	O
ip_hl	int
<<	O
2	int
;	O
cp	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
ip	struct
+	O
hlen	int
;	O
if	O
(	O
ip	struct
->	O
ip_p	char
==	O
6	int
)	O
printf	function
(	O
"TCP: from port %u, to port %u (decimal)\n"	pointer
,	O
(	O
*	O
cp	pointer
*	O
256	int
+	O
*	O
(	O
cp	pointer
+	O
1	int
)	O
)	O
,	O
(	O
*	O
(	O
cp	pointer
+	O
2	int
)	O
*	O
256	int
+	O
*	O
(	O
cp	pointer
+	O
3	int
)	O
)	O
)	O
;	O
else	O
if	O
(	O
ip	struct
->	O
ip_p	char
==	O
17	int
)	O
printf	function
(	O
"UDP: from port %u, to port %u (decimal)\n"	pointer
,	O
(	O
*	O
cp	pointer
*	O
256	int
+	O
*	O
(	O
cp	pointer
+	O
1	int
)	O
)	O
,	O
(	O
*	O
(	O
cp	pointer
+	O
2	int
)	O
*	O
256	int
+	O
*	O
(	O
cp	pointer
+	O
3	int
)	O
)	O
)	O
;	O
}	O
static	O
void	O
print_icmp	function
(	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
void	O
*	O
data	array
)	O
{	O
print_icmp_code	function
(	O
icmp	pointer
->	O
icmp_code	char
,	O
data	array
)	O
;	O
print_ip_data	function
(	O
icmp	pointer
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
print_parameterprob	function
(	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
void	O
*	O
data	array
)	O
{	O
printf	function
(	O
"Parameter problem: IP address = %s\n"	pointer
,	O
inet_ntoa	function
(	O
icmp	pointer
->	O
icmp_gwaddr	O
)	O
)	O
;	O
print_ip_data	function
(	O
icmp	pointer
,	O
data	array
)	O
;	O
}	O
struct	O
icmp_diag	struct
icmp_diag	struct
[	O
]	O
=	O
{	O
{	O
ICMP_ECHOREPLY	int
,	O
"Echo Reply"	pointer
,	O
NULL	O
}	O
,	O
{	O
ICMP_DEST_UNREACH	int
,	O
NULL	O
,	O
print_icmp	function
,	O
"Dest Unreachable"	pointer
}	O
,	O
{	O
ICMP_SOURCE_QUENCH	int
,	O
"Source Quench"	pointer
,	O
print_ip_data	function
}	O
,	O
{	O
ICMP_REDIRECT	int
,	O
NULL	O
,	O
print_icmp	function
,	O
"Redirect"	pointer
}	O
,	O
{	O
ICMP_ECHO	int
,	O
"Echo Request"	pointer
,	O
NULL	O
}	O
,	O
{	O
ICMP_TIME_EXCEEDED	int
,	O
NULL	O
,	O
print_icmp	function
,	O
"Time exceeded"	pointer
}	O
,	O
{	O
ICMP_PARAMETERPROB	int
,	O
NULL	O
,	O
print_parameterprob	function
}	O
,	O
{	O
ICMP_TIMESTAMP	int
,	O
"Timestamp"	pointer
,	O
NULL	O
}	O
,	O
{	O
ICMP_TIMESTAMPREPLY	int
,	O
"Timestamp Reply"	pointer
,	O
NULL	O
}	O
,	O
{	O
ICMP_INFO_REQUEST	int
,	O
"Information Request"	pointer
,	O
NULL	O
}	O
,	O
}	O
;	O
void	O
print_icmp_header	function
(	O
struct	O
sockaddr_in	struct
*	O
from	pointer
,	O
struct	O
ip	struct
*	O
ip	struct
,	O
icmphdr_t	struct
*	O
icmp	pointer
,	O
int	O
len	char
)	O
{	O
int	O
hlen	int
;	O
struct	O
ip	struct
*	O
orig_ip	pointer
;	O
char	O
*	O
s	long
;	O
struct	O
icmp_diag	struct
*	O
p	pointer
;	O
hlen	int
=	O
ip	struct
->	O
ip_hl	int
<<	O
2	int
;	O
orig_ip	pointer
=	O
&	O
icmp	pointer
->	O
icmp_ip	O
;	O
if	O
(	O
!	O
(	O
options	int
&	O
OPT_VERBOSE	int
||	O
orig_ip	pointer
->	O
ip_dst	struct
.	O
s_addr	int
==	O
ping	pointer
->	O
ping_dest	union
.	O
ping_sockaddr	struct
.	O
sin_addr	struct
.	O
s_addr	int
)	O
)	O
return	O
;	O
printf	function
(	O
"%d bytes from %s: "	pointer
,	O
len	char
-	O
hlen	int
,	O
s	long
=	O
ipaddr2str	function
(	O
from	pointer
->	O
sin_addr	struct
)	O
)	O
;	O
free	function
(	O
s	long
)	O
;	O
for	O
(	O
p	pointer
=	O
icmp_diag	struct
;	O
p	pointer
<	O
icmp_diag	struct
+	O
NITEMS	O
(	O
icmp_diag	struct
)	O
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
type	enum
==	O
icmp	pointer
->	O
icmp_type	char
)	O
{	O
if	O
(	O
p	pointer
->	O
text	pointer
)	O
printf	function
(	O
"%s\n"	pointer
,	O
p	pointer
->	O
text	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
fun	pointer
)	O
p	pointer
->	O
fun	pointer
(	O
icmp	pointer
,	O
p	pointer
->	O
data	array
)	O
;	O
return	O
;	O
}	O
}	O
printf	function
(	O
"Bad ICMP type: %d\n"	pointer
,	O
icmp	pointer
->	O
icmp_type	char
)	O
;	O
}	O
void	O
print_ip_opt	function
(	O
struct	O
ip	struct
*	O
ip	struct
,	O
int	O
hlen	int
)	O
{	O
unsigned	O
char	O
*	O
cp	pointer
;	O
int	O
i	int
,	O
j	int
,	O
l	int
;	O
static	O
int	O
old_rrlen	int
;	O
static	O
char	O
old_rr	array
[	O
MAX_IPOPTLEN	int
]	O
;	O
cp	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
ip	struct
+	O
1	int
)	O
;	O
for	O
(	O
;	O
hlen	int
>	O
(	O
int	O
)	O
sizeof	O
(	O
struct	O
ip	struct
)	O
;	O
--	O
hlen	int
,	O
++	O
cp	pointer
)	O
switch	O
(	O
*	O
cp	pointer
)	O
{	O
case	O
IPOPT_EOL	int
:	O
hlen	int
=	O
0	int
;	O
break	O
;	O
case	O
IPOPT_LSRR	int
:	O
printf	function
(	O
"\nLSRR: "	pointer
)	O
;	O
hlen	int
-=	O
2	int
;	O
j	int
=	O
*	O
++	O
cp	pointer
;	O
++	O
cp	pointer
;	O
if	O
(	O
j	int
>	O
IPOPT_MINOFF	int
)	O
for	O
(	O
;	O
;	O
)	O
{	O
l	int
=	O
*	O
++	O
cp	pointer
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	pointer
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	pointer
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	pointer
;	O
if	O
(	O
l	int
==	O
0	int
)	O
{	O
printf	function
(	O
"\t0.0.0.0"	pointer
)	O
;	O
}	O
else	O
{	O
struct	O
in_addr	struct
ina	struct
;	O
char	O
*	O
s	long
;	O
ina	struct
.	O
s_addr	int
=	O
ntohl	function
(	O
l	int
)	O
;	O
printf	function
(	O
"\t%s"	pointer
,	O
s	long
=	O
ipaddr2str	function
(	O
ina	struct
)	O
)	O
;	O
free	function
(	O
s	long
)	O
;	O
}	O
hlen	int
-=	O
4	int
;	O
j	int
-=	O
4	int
;	O
if	O
(	O
j	int
<=	O
IPOPT_MINOFF	int
)	O
break	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
break	O
;	O
case	O
IPOPT_RR	int
:	O
j	int
=	O
*	O
++	O
cp	pointer
;	O
i	int
=	O
*	O
++	O
cp	pointer
;	O
hlen	int
-=	O
2	int
;	O
if	O
(	O
i	int
>	O
j	int
)	O
i	int
=	O
j	int
;	O
i	int
-=	O
IPOPT_MINOFF	int
;	O
if	O
(	O
i	int
<=	O
0	int
)	O
continue	O
;	O
if	O
(	O
i	int
==	O
old_rrlen	int
&&	O
cp	pointer
==	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
ip	struct
+	O
1	int
)	O
+	O
2	int
&&	O
!	O
memcmp	function
(	O
(	O
char	O
*	O
)	O
cp	pointer
,	O
old_rr	array
,	O
i	int
)	O
&&	O
!	O
(	O
options	int
&	O
OPT_FLOOD	int
)	O
)	O
{	O
printf	function
(	O
"\t (same route)"	pointer
)	O
;	O
i	int
=	O
(	O
(	O
i	int
+	O
3	int
)	O
/	O
4	int
)	O
*	O
4	int
;	O
hlen	int
-=	O
i	int
;	O
cp	pointer
+=	O
i	int
;	O
break	O
;	O
}	O
if	O
(	O
i	int
<	O
MAX_IPOPTLEN	int
)	O
{	O
old_rrlen	int
=	O
i	int
;	O
memmove	function
(	O
old_rr	array
,	O
cp	pointer
,	O
i	int
)	O
;	O
}	O
else	O
old_rrlen	int
=	O
0	int
;	O
printf	function
(	O
"\nRR: "	pointer
)	O
;	O
j	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
l	int
=	O
*	O
++	O
cp	pointer
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	pointer
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	pointer
;	O
l	int
=	O
(	O
l	int
<<	O
8	int
)	O
+	O
*	O
++	O
cp	pointer
;	O
if	O
(	O
l	int
==	O
0	int
)	O
{	O
printf	function
(	O
"\t0.0.0.0"	pointer
)	O
;	O
}	O
else	O
{	O
struct	O
in_addr	struct
ina	struct
;	O
char	O
*	O
s	long
;	O
ina	struct
.	O
s_addr	int
=	O
ntohl	function
(	O
l	int
)	O
;	O
printf	function
(	O
"\t%s"	pointer
,	O
s	long
=	O
ipaddr2str	function
(	O
ina	struct
)	O
)	O
;	O
free	function
(	O
s	long
)	O
;	O
}	O
hlen	int
-=	O
4	int
;	O
i	int
-=	O
4	int
;	O
j	int
+=	O
4	int
;	O
if	O
(	O
i	int
<=	O
0	int
)	O
break	O
;	O
if	O
(	O
j	int
>=	O
MAX_IPOPTLEN	int
)	O
{	O
printf	function
(	O
"\t (truncated route)"	pointer
)	O
;	O
break	O
;	O
}	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
break	O
;	O
case	O
IPOPT_NOP	int
:	O
printf	function
(	O
"\nNOP"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
printf	function
(	O
"\nunknown option %x"	pointer
,	O
*	O
cp	pointer
)	O
;	O
break	O
;	O
}	O
}	O
int	O
echo_finish	function
(	O
void	O
)	O
{	O
ping_finish	function
(	O
)	O
;	O
if	O
(	O
ping	pointer
->	O
ping_num_recv	long
&&	O
PING_TIMING	O
(	O
data_length	long
)	O
)	O
{	O
struct	O
ping_stat	struct
*	O
ping_stat	struct
=	O
(	O
struct	O
ping_stat	struct
*	O
)	O
ping	pointer
->	O
ping_closure	pointer
;	O
double	O
total	double
=	O
ping	pointer
->	O
ping_num_recv	long
+	O
ping	pointer
->	O
ping_num_rept	long
;	O
double	O
avg	double
=	O
ping_stat	struct
->	O
tsum	double
/	O
total	double
;	O
double	O
vari	double
=	O
ping_stat	struct
->	O
tsumsq	double
/	O
total	double
-	O
avg	double
*	O
avg	double
;	O
printf	function
(	O
"round-trip min/avg/max/stddev = %.3f/%.3f/%.3f/%.3f ms\n"	pointer
,	O
ping_stat	struct
->	O
tmin	double
,	O
avg	double
,	O
ping_stat	struct
->	O
tmax	double
,	O
nsqrt	function
(	O
vari	double
,	O
0.0005	int
)	O
)	O
;	O
}	O
return	O
(	O
ping	pointer
->	O
ping_num_recv	long
==	O
0	int
)	O
;	O
}	O
