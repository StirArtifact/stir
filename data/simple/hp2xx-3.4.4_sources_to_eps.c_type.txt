static	O
int	O
linecount	int
=	O
0	int
;	O
static	O
float	O
xcoord2mm	float
,	O
ycoord2mm	float
;	O
static	O
float	O
xmin	double
,	O
ymin	double
;	O
static	O
PEN_W	float
lastwidth	float
;	O
static	O
int	O
lastcap	int
;	O
static	O
int	O
lastjoin	int
;	O
static	O
int	O
lastlimit	int
;	O
static	O
BYTE	char
lastred	char
,	O
lastgreen	char
,	O
lastblue	char
;	O
void	O
ps_set_linewidth	function
(	O
PEN_W	float
,	O
HPGL_Pt	struct
*	O
,	O
FILE	struct
*	O
)	O
;	O
void	O
ps_set_linecap	function
(	O
LineEnds	enum
type	enum
,	O
PEN_W	float
pensize	float
,	O
HPGL_Pt	struct
*	O
ppt	pointer
,	O
FILE	struct
*	O
fd	pointer
)	O
;	O
void	O
ps_set_linejoin	function
(	O
LineJoins	enum
type	enum
,	O
LineLimit	int
limit	int
,	O
PEN_W	float
pensize	float
,	O
HPGL_Pt	struct
*	O
ppt	pointer
,	O
FILE	struct
*	O
fd	pointer
)	O
;	O
void	O
ps_set_color	function
(	O
PEN_C	short
pencolor	short
,	O
HPGL_Pt	struct
*	O
ppt	pointer
,	O
FILE	struct
*	O
fd	pointer
)	O
;	O
void	O
ps_init	function
(	O
const	O
GEN_PAR	struct
*	O
,	O
const	O
OUT_PAR	struct
*	O
,	O
FILE	struct
*	O
,	O
PEN_W	float
)	O
;	O
void	O
ps_end	function
(	O
FILE	struct
*	O
)	O
;	O
void	O
ps_stroke_and_move_to	function
(	O
HPGL_Pt	struct
*	O
,	O
FILE	struct
*	O
)	O
;	O
void	O
ps_line_to	function
(	O
HPGL_Pt	struct
*	O
,	O
char	O
,	O
FILE	struct
*	O
)	O
;	O
void	O
ps_draw_dot	function
(	O
HPGL_Pt	struct
*	O
ppt	pointer
,	O
double	O
radius	double
,	O
FILE	struct
*	O
fd	pointer
)	O
;	O
char	O
*	O
Getdate	function
(	O
void	O
)	O
;	O
void	O
ps_end	function
(	O
FILE	struct
*	O
fd	pointer
)	O
{	O
fprintf	function
(	O
fd	pointer
,	O
" S\neop\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"@end\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%PageTrailer\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%Trailer\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%EOF\n"	pointer
)	O
;	O
linecount	int
=	O
0	int
;	O
}	O
void	O
ps_stroke_and_move_to	function
(	O
HPGL_Pt	struct
*	O
ppt	pointer
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
fprintf	function
(	O
fd	pointer
,	O
" S\n%6.2f %6.2f M"	pointer
,	O
(	O
ppt	pointer
->	O
x	int
-	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
ppt	pointer
->	O
y	int
-	O
ymin	double
)	O
*	O
ycoord2mm	float
)	O
;	O
linecount	int
=	O
0	int
;	O
}	O
void	O
ps_set_linewidth	function
(	O
PEN_W	float
width	array
,	O
HPGL_Pt	struct
*	O
ppt	pointer
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
if	O
(	O
(	O
fabs	function
(	O
width	array
-	O
lastwidth	float
)	O
>=	O
0.01	int
)	O
&&	O
(	O
width	array
>=	O
0.05	int
)	O
)	O
{	O
ps_stroke_and_move_to	function
(	O
ppt	pointer
,	O
fd	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
" %6.3f W\n"	pointer
,	O
width	array
)	O
;	O
lastwidth	float
=	O
width	array
;	O
}	O
return	O
;	O
}	O
void	O
ps_set_linecap	function
(	O
LineEnds	enum
type	enum
,	O
PEN_W	float
pensize	float
,	O
HPGL_Pt	struct
*	O
ppt	pointer
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
int	O
newcap	int
;	O
if	O
(	O
pensize	float
>	O
0.35	int
)	O
{	O
switch	O
(	O
type	enum
)	O
{	O
case	O
LAE_butt	int
:	O
newcap	int
=	O
0	int
;	O
break	O
;	O
case	O
LAE_triangular	int
:	O
newcap	int
=	O
1	int
;	O
break	O
;	O
case	O
LAE_round	int
:	O
newcap	int
=	O
1	int
;	O
break	O
;	O
case	O
LAE_square	int
:	O
newcap	int
=	O
2	int
;	O
break	O
;	O
default	O
:	O
newcap	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
newcap	int
=	O
1	int
;	O
}	O
if	O
(	O
newcap	int
!=	O
lastcap	int
)	O
{	O
ps_stroke_and_move_to	function
(	O
ppt	pointer
,	O
fd	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
" %d setlinecap\n"	pointer
,	O
newcap	int
)	O
;	O
lastcap	int
=	O
newcap	int
;	O
}	O
return	O
;	O
}	O
void	O
ps_set_linejoin	function
(	O
LineJoins	enum
type	enum
,	O
LineLimit	int
limit	int
,	O
PEN_W	float
pensize	float
,	O
HPGL_Pt	struct
*	O
ppt	pointer
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
int	O
newjoin	int
;	O
int	O
newlimit	int
=	O
lastlimit	int
;	O
if	O
(	O
pensize	float
>	O
0.35	int
)	O
{	O
switch	O
(	O
type	enum
)	O
{	O
case	O
LAJ_plain_miter	int
:	O
newjoin	int
=	O
0	int
;	O
newlimit	int
=	O
5	int
;	O
break	O
;	O
case	O
LAJ_bevel_miter	int
:	O
newjoin	int
=	O
0	int
;	O
newlimit	int
=	O
limit	int
;	O
break	O
;	O
case	O
LAJ_triangular	int
:	O
newjoin	int
=	O
1	int
;	O
break	O
;	O
case	O
LAJ_round	int
:	O
newjoin	int
=	O
1	int
;	O
break	O
;	O
case	O
LAJ_bevelled	int
:	O
newjoin	int
=	O
2	int
;	O
break	O
;	O
case	O
LAJ_nojoin	int
:	O
newjoin	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
newjoin	int
=	O
0	int
;	O
newlimit	int
=	O
5	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
newjoin	int
=	O
1	int
;	O
}	O
if	O
(	O
newjoin	int
!=	O
lastjoin	int
)	O
{	O
ps_stroke_and_move_to	function
(	O
ppt	pointer
,	O
fd	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
" %d setlinejoin\n"	pointer
,	O
newjoin	int
)	O
;	O
lastjoin	int
=	O
newjoin	int
;	O
}	O
if	O
(	O
newlimit	int
!=	O
lastlimit	int
)	O
{	O
ps_stroke_and_move_to	function
(	O
ppt	pointer
,	O
fd	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
" %d setmiterlimit\n"	pointer
,	O
newlimit	int
)	O
;	O
lastlimit	int
=	O
newlimit	int
;	O
}	O
}	O
void	O
ps_set_color	function
(	O
PEN_C	short
pencolor	short
,	O
HPGL_Pt	struct
*	O
ppt	pointer
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
if	O
(	O
(	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
0	int
]	O
!=	O
lastred	char
)	O
||	O
(	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
1	int
]	O
!=	O
lastgreen	char
)	O
||	O
(	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
2	int
]	O
!=	O
lastblue	char
)	O
)	O
{	O
ps_stroke_and_move_to	function
(	O
ppt	pointer
,	O
fd	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
" %6.3f %6.3f %6.3f C\n"	pointer
,	O
(	O
double	O
)	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
0	int
]	O
/	O
255.0	int
,	O
(	O
double	O
)	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
1	int
]	O
/	O
255.0	int
,	O
(	O
double	O
)	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
2	int
]	O
/	O
255.0	int
)	O
;	O
lastred	char
=	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
0	int
]	O
;	O
lastgreen	char
=	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
1	int
]	O
;	O
lastblue	char
=	O
pt	struct
.	O
clut	array
[	O
pencolor	short
]	O
[	O
2	int
]	O
;	O
}	O
else	O
{	O
return	O
;	O
}	O
}	O
void	O
ps_line_to	function
(	O
HPGL_Pt	struct
*	O
ppt	pointer
,	O
char	O
mode	enum
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
if	O
(	O
linecount	int
>	O
3	int
)	O
{	O
putc	function
(	O
'\n'	O
,	O
fd	pointer
)	O
;	O
linecount	int
=	O
0	int
;	O
}	O
else	O
putc	function
(	O
' '	O
,	O
fd	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%6.2f %6.2f %c"	pointer
,	O
(	O
ppt	pointer
->	O
x	int
-	O
xmin	double
)	O
*	O
xcoord2mm	float
,	O
(	O
ppt	pointer
->	O
y	int
-	O
ymin	double
)	O
*	O
ycoord2mm	float
,	O
mode	enum
)	O
;	O
linecount	int
++	O
;	O
}	O
void	O
ps_draw_dot	function
(	O
HPGL_Pt	struct
*	O
ppt	pointer
,	O
double	O
radius	double
,	O
FILE	struct
*	O
fd	pointer
)	O
{	O
fprintf	function
(	O
fd	pointer
,	O
" currentpoint newpath %0.2f 0 360 arc fill\n"	pointer
,	O
radius	double
)	O
;	O
}	O
char	O
*	O
Getdate	function
(	O
void	O
)	O
{	O
int	O
len	int
;	O
time_t	long
t	long
;	O
char	O
*	O
p	struct
;	O
t	long
=	O
time	function
(	O
(	O
time_t	long
*	O
)	O
0	int
)	O
;	O
p	struct
=	O
ctime	function
(	O
&	O
t	long
)	O
;	O
len	int
=	O
(	O
int	O
)	O
strlen	function
(	O
p	struct
)	O
;	O
*	O
(	O
p	struct
+	O
len	int
-	O
1	int
)	O
=	O
'\0'	O
;	O
return	O
p	struct
;	O
}	O
void	O
ps_init	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
const	O
OUT_PAR	struct
*	O
po	pointer
,	O
FILE	struct
*	O
fd	pointer
,	O
PEN_W	float
pensize	float
)	O
{	O
long	O
left	long
,	O
right	long
,	O
low	long
,	O
high	long
;	O
double	O
hmxpenw	double
;	O
lastwidth	float
=	O
-	O
1.0	int
;	O
lastcap	int
=	O
lastjoin	int
=	O
lastlimit	int
=	O
-	O
1	int
;	O
lastred	char
=	O
lastgreen	char
=	O
lastblue	char
=	O
-	O
1	int
;	O
hmxpenw	double
=	O
pg	pointer
->	O
maxpensize	float
/	O
2.0	int
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%!PS-Adobe-2.0 EPSF-2.0\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%Title: %s\n"	pointer
,	O
po	pointer
->	O
outfile	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%Creator: hp2xx %s (c) 1991-1994 by H. Werntges, 1999-2003 by M. Kroeker\n"	pointer
,	O
VERS_NO	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%CreationDate: %s\n"	pointer
,	O
Getdate	function
(	O
)	O
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%Pages: 1\n"	pointer
)	O
;	O
left	long
=	O
(	O
long	O
)	O
floor	function
(	O
fabs	function
(	O
po	pointer
->	O
xoff	double
-	O
hmxpenw	double
)	O
*	O
MM_TO_PS_POINT	int
)	O
;	O
low	long
=	O
(	O
long	O
)	O
floor	function
(	O
fabs	function
(	O
po	pointer
->	O
yoff	double
-	O
hmxpenw	double
)	O
*	O
MM_TO_PS_POINT	int
)	O
;	O
right	long
=	O
(	O
long	O
)	O
ceil	function
(	O
(	O
po	pointer
->	O
xoff	double
+	O
po	pointer
->	O
width	array
+	O
hmxpenw	double
)	O
*	O
MM_TO_PS_POINT	int
)	O
;	O
high	long
=	O
(	O
long	O
)	O
ceil	function
(	O
(	O
po	pointer
->	O
yoff	double
+	O
po	pointer
->	O
height	double
+	O
hmxpenw	double
)	O
*	O
MM_TO_PS_POINT	int
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%BoundingBox: %ld %ld %ld %ld\n"	pointer
,	O
left	long
,	O
low	long
,	O
right	long
,	O
high	long
)	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"Bounding Box: [%ld %ld %ld %ld]\n"	pointer
,	O
left	long
,	O
low	long
,	O
right	long
,	O
high	long
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%EndComments\n\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%BeginProcSet:\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/PSSave save def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/PSDict 200 dict def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"PSDict begin\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/@restore /restore load def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/restore\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   {vmstatus pop\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    dup @VMused lt {pop @VMused} if\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    exch pop exch @restore /@VMused exch def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   } def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/@pri\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   {\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    ( ) print\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    (                                       ) cvs print\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   } def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/@start\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   {\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    vmstatus pop /@VMused exch def pop\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   } def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/@end\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   {"	pointer
)	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
{	O
fprintf	function
(	O
fd	pointer
,	O
"(VM Used: ) print @VMused @pri\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    (. Unused: ) print vmstatus @VMused sub @pri pop pop\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    (\\n) print flush\n"	pointer
)	O
;	O
}	O
fprintf	function
(	O
fd	pointer
,	O
"    end\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    PSSave restore\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   } def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/bop\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   {\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    /SaveImage save def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   } def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/eop\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   {\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    showpage\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    SaveImage restore\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   } def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/@line\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   {\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%    1 setlinejoin      %%%% now set from LA command\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%    1 setmiterlimit    %%%% now set from LA command\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   } def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/@SetPlot\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   {\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    %f %f scale\n"	pointer
,	O
MM_TO_PS_POINT	int
,	O
MM_TO_PS_POINT	int
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    %7.3f %7.3f translate\n"	pointer
,	O
po	pointer
->	O
xoff	double
+	O
hmxpenw	double
,	O
po	pointer
->	O
yoff	double
+	O
hmxpenw	double
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"    %6.3f setlinewidth\n"	pointer
,	O
pensize	float
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"   } def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/C {setrgbcolor} def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/D {lineto} def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/M {moveto} def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/S {stroke} def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/W {setlinewidth} def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/Z {stroke newpath} def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"end\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%EndProcSet\n\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%BeginSetup\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"/#copies 1 def\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%EndSetup\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%Page: 1 1\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%BeginPageSetup\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"PSDict begin\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"@start\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"@line\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"@SetPlot\n\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"bop\n"	pointer
)	O
;	O
fprintf	function
(	O
fd	pointer
,	O
"%%%%EndPageSetup\n"	pointer
)	O
;	O
}	O
int	O
to_eps	function
(	O
const	O
GEN_PAR	struct
*	O
pg	pointer
,	O
const	O
OUT_PAR	struct
*	O
po	pointer
)	O
{	O
PlotCmd	enum
cmd	enum
;	O
HPGL_Pt	struct
pt1	struct
=	O
{	O
0	int
,	O
0	int
}	O
;	O
FILE	struct
*	O
md	pointer
;	O
int	O
pen_no	int
=	O
0	int
,	O
err	int
;	O
PEN_W	float
pensize	float
;	O
err	int
=	O
0	int
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\n\n- Writing EPS code to \"%s\"\n"	pointer
,	O
*	O
po	pointer
->	O
outfile	pointer
==	O
'-'	O
?	O
"stdout"	pointer
:	O
po	pointer
->	O
outfile	pointer
)	O
;	O
if	O
(	O
*	O
po	pointer
->	O
outfile	pointer
!=	O
'-'	O
)	O
{	O
if	O
(	O
(	O
md	pointer
=	O
fopen	function
(	O
po	pointer
->	O
outfile	pointer
,	O
"w"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
PError	function
(	O
"hp2xx (eps)"	pointer
)	O
;	O
return	O
ERROR	O
;	O
}	O
}	O
else	O
md	pointer
=	O
stdout	pointer
;	O
pensize	float
=	O
pt	struct
.	O
width	array
[	O
DEFAULT_PEN_NO	int
]	O
;	O
ps_init	function
(	O
pg	pointer
,	O
po	pointer
,	O
md	pointer
,	O
pensize	float
)	O
;	O
if	O
(	O
pensize	float
>	O
0.05	int
)	O
fprintf	function
(	O
md	pointer
,	O
" %6.3f W\n"	pointer
,	O
pensize	float
)	O
;	O
xcoord2mm	float
=	O
po	pointer
->	O
width	array
/	O
(	O
po	pointer
->	O
xmax	double
-	O
po	pointer
->	O
xmin	double
)	O
;	O
ycoord2mm	float
=	O
po	pointer
->	O
height	double
/	O
(	O
po	pointer
->	O
ymax	double
-	O
po	pointer
->	O
ymin	double
)	O
;	O
xmin	double
=	O
po	pointer
->	O
xmin	double
;	O
ymin	double
=	O
po	pointer
->	O
ymin	double
;	O
while	O
(	O
(	O
cmd	enum
=	O
PlotCmd_from_tmpfile	function
(	O
)	O
)	O
!=	O
CMD_EOF	int
)	O
{	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
NOP	int
:	O
break	O
;	O
case	O
SET_PEN	int
:	O
if	O
(	O
(	O
pen_no	int
=	O
fgetc	function
(	O
pg	pointer
->	O
td	pointer
)	O
)	O
==	O
EOF	O
)	O
{	O
PError	function
(	O
"Unexpected end of temp. file: "	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
EPS_exit	O
;	O
}	O
pensize	float
=	O
pt	struct
.	O
width	array
[	O
pen_no	int
]	O
;	O
break	O
;	O
case	O
DEF_PW	int
:	O
if	O
(	O
!	O
load_pen_width_table	function
(	O
pg	pointer
->	O
td	pointer
)	O
)	O
{	O
PError	function
(	O
"Unexpected end of temp. file"	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
EPS_exit	O
;	O
}	O
pensize	float
=	O
pt	struct
.	O
width	array
[	O
pen_no	int
]	O
;	O
break	O
;	O
case	O
DEF_PC	int
:	O
err	int
=	O
load_pen_color_table	function
(	O
pg	pointer
->	O
td	pointer
)	O
;	O
if	O
(	O
err	int
<	O
0	int
)	O
{	O
PError	function
(	O
"Unexpected end of temp. file"	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
EPS_exit	O
;	O
}	O
break	O
;	O
case	O
DEF_LA	int
:	O
if	O
(	O
load_line_attr	function
(	O
pg	pointer
->	O
td	pointer
)	O
<	O
0	int
)	O
{	O
PError	function
(	O
"Unexpected end of temp. file"	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
EPS_exit	O
;	O
}	O
break	O
;	O
case	O
MOVE_TO	int
:	O
ps_set_linewidth	function
(	O
pensize	float
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
ps_set_linecap	function
(	O
CurrentLineAttr	struct
.	O
End	enum
,	O
pensize	float
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
ps_set_linejoin	function
(	O
CurrentLineAttr	struct
.	O
Join	enum
,	O
CurrentLineAttr	struct
.	O
Limit	int
,	O
pensize	float
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
ps_set_color	function
(	O
pt	struct
.	O
color	array
[	O
pen_no	int
]	O
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
if	O
(	O
pensize	float
>	O
0.05	int
)	O
ps_stroke_and_move_to	function
(	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
break	O
;	O
case	O
DRAW_TO	int
:	O
ps_set_linewidth	function
(	O
pensize	float
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
ps_set_linecap	function
(	O
CurrentLineAttr	struct
.	O
End	enum
,	O
pensize	float
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
ps_set_linejoin	function
(	O
CurrentLineAttr	struct
.	O
Join	enum
,	O
CurrentLineAttr	struct
.	O
Limit	int
,	O
pensize	float
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
ps_set_color	function
(	O
pt	struct
.	O
color	array
[	O
pen_no	int
]	O
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
if	O
(	O
pensize	float
>	O
0.05	int
)	O
ps_line_to	function
(	O
&	O
pt1	struct
,	O
'D'	O
,	O
md	pointer
)	O
;	O
break	O
;	O
case	O
PLOT_AT	int
:	O
ps_set_linewidth	function
(	O
pensize	float
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
ps_set_linecap	function
(	O
CurrentLineAttr	struct
.	O
End	enum
,	O
pensize	float
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
ps_set_linejoin	function
(	O
CurrentLineAttr	struct
.	O
Join	enum
,	O
CurrentLineAttr	struct
.	O
Limit	int
,	O
pensize	float
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
ps_set_color	function
(	O
pt	struct
.	O
color	array
[	O
pen_no	int
]	O
,	O
&	O
pt1	struct
,	O
md	pointer
)	O
;	O
HPGL_Pt_from_tmpfile	function
(	O
&	O
pt1	struct
)	O
;	O
if	O
(	O
pensize	float
>	O
0.05	int
)	O
{	O
ps_line_to	function
(	O
&	O
pt1	struct
,	O
'M'	O
,	O
md	pointer
)	O
;	O
ps_line_to	function
(	O
&	O
pt1	struct
,	O
'D'	O
,	O
md	pointer
)	O
;	O
ps_draw_dot	function
(	O
&	O
pt1	struct
,	O
pensize	float
/	O
2	int
,	O
md	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
Eprintf	function
(	O
"Illegal cmd in temp. file!"	pointer
)	O
;	O
err	int
=	O
ERROR	O
;	O
goto	O
EPS_exit	O
;	O
}	O
}	O
ps_end	function
(	O
md	pointer
)	O
;	O
EPS_exit	O
:	O
if	O
(	O
md	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
md	pointer
)	O
;	O
if	O
(	O
!	O
pg	pointer
->	O
quiet	int
)	O
Eprintf	function
(	O
"\n"	pointer
)	O
;	O
return	O
err	int
;	O
}	O
