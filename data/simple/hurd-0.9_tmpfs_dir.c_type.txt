error_t	O
diskfs_init_dir	function
(	O
struct	O
node	O
*	O
dp	pointer
,	O
struct	O
node	O
*	O
pdp	pointer
,	O
struct	O
protid	O
*	O
cred	pointer
)	O
{	O
dp	pointer
->	O
dn	pointer
->	O
u	union
.	O
dir	struct
.	O
dotdot	pointer
=	O
pdp	pointer
->	O
dn	pointer
;	O
dp	pointer
->	O
dn	pointer
->	O
u	union
.	O
dir	struct
.	O
entries	pointer
=	O
0	int
;	O
pdp	pointer
->	O
dn_stat	O
.	O
st_nlink	O
++	O
;	O
dp	pointer
->	O
dn_stat	O
.	O
st_nlink	O
++	O
;	O
return	O
0	int
;	O
}	O
error_t	O
diskfs_clear_directory	function
(	O
struct	O
node	O
*	O
dp	pointer
,	O
struct	O
node	O
*	O
pdp	pointer
,	O
struct	O
protid	O
*	O
cred	pointer
)	O
{	O
if	O
(	O
dp	pointer
->	O
dn	pointer
->	O
u	union
.	O
dir	struct
.	O
entries	pointer
!=	O
0	int
)	O
return	O
ENOTEMPTY	O
;	O
assert	function
(	O
dp	pointer
->	O
dn_stat	O
.	O
st_size	O
==	O
0	int
)	O
;	O
assert	function
(	O
dp	pointer
->	O
dn	pointer
->	O
u	union
.	O
dir	struct
.	O
dotdot	pointer
==	O
pdp	pointer
->	O
dn	pointer
)	O
;	O
pdp	pointer
->	O
dn_stat	O
.	O
st_nlink	O
--	O
;	O
dp	pointer
->	O
dn_stat	O
.	O
st_nlink	O
--	O
;	O
return	O
0	int
;	O
}	O
int	O
diskfs_dirempty	function
(	O
struct	O
node	O
*	O
dp	pointer
,	O
struct	O
protid	O
*	O
cred	pointer
)	O
{	O
return	O
dp	pointer
->	O
dn	pointer
->	O
u	union
.	O
dir	struct
.	O
entries	pointer
==	O
0	int
;	O
}	O
error_t	O
diskfs_get_directs	function
(	O
struct	O
node	O
*	O
dp	pointer
,	O
int	O
entry	int
,	O
int	O
n	int
,	O
char	O
*	O
*	O
data	pointer
,	O
size_t	long
*	O
datacnt	pointer
,	O
vm_size_t	O
bufsiz	int
,	O
int	O
*	O
amt	pointer
)	O
{	O
struct	O
tmpfs_dirent	struct
*	O
d	pointer
;	O
struct	O
dirent	O
*	O
entp	pointer
;	O
int	O
i	int
;	O
if	O
(	O
bufsiz	int
==	O
0	int
)	O
bufsiz	int
=	O
dp	pointer
->	O
dn_stat	O
.	O
st_size	O
+	O
2	int
*	O
(	O
(	O
offsetof	O
(	O
struct	O
dirent	O
,	O
d_name	O
[	O
3	int
]	O
)	O
+	O
7	int
)	O
&	O
~	O
7	int
)	O
;	O
if	O
(	O
bufsiz	int
>	O
*	O
datacnt	pointer
)	O
{	O
*	O
data	pointer
=	O
mmap	function
(	O
0	int
,	O
bufsiz	int
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
*	O
data	pointer
==	O
MAP_FAILED	O
)	O
return	O
ENOMEM	O
;	O
}	O
entp	pointer
=	O
(	O
struct	O
dirent	O
*	O
)	O
*	O
data	pointer
;	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
++	O
>=	O
entry	int
)	O
{	O
entp	pointer
->	O
d_fileno	O
=	O
dp	pointer
->	O
dn_stat	O
.	O
st_ino	O
;	O
entp	pointer
->	O
d_type	O
=	O
DT_DIR	O
;	O
entp	pointer
->	O
d_namlen	O
=	O
1	int
;	O
entp	pointer
->	O
d_name	O
[	O
0	int
]	O
=	O
'.'	O
;	O
entp	pointer
->	O
d_name	O
[	O
1	int
]	O
=	O
'\0'	O
;	O
entp	pointer
->	O
d_reclen	O
=	O
(	O
&	O
entp	pointer
->	O
d_name	O
[	O
2	int
]	O
-	O
(	O
char	O
*	O
)	O
entp	pointer
+	O
7	int
)	O
&	O
~	O
7	int
;	O
entp	pointer
=	O
(	O
void	O
*	O
)	O
entp	pointer
+	O
entp	pointer
->	O
d_reclen	O
;	O
}	O
if	O
(	O
i	int
++	O
>=	O
entry	int
)	O
{	O
if	O
(	O
dp	pointer
->	O
dn	pointer
->	O
u	union
.	O
dir	struct
.	O
dotdot	pointer
==	O
0	int
)	O
{	O
assert	function
(	O
dp	pointer
==	O
diskfs_root_node	O
)	O
;	O
entp	pointer
->	O
d_fileno	O
=	O
2	int
;	O
}	O
else	O
entp	pointer
->	O
d_fileno	O
=	O
(	O
ino_t	long
)	O
(	O
uintptr_t	O
)	O
dp	pointer
->	O
dn	pointer
->	O
u	union
.	O
dir	struct
.	O
dotdot	pointer
;	O
entp	pointer
->	O
d_type	O
=	O
DT_DIR	O
;	O
entp	pointer
->	O
d_namlen	O
=	O
2	int
;	O
entp	pointer
->	O
d_name	O
[	O
0	int
]	O
=	O
'.'	O
;	O
entp	pointer
->	O
d_name	O
[	O
1	int
]	O
=	O
'.'	O
;	O
entp	pointer
->	O
d_name	O
[	O
2	int
]	O
=	O
'\0'	O
;	O
entp	pointer
->	O
d_reclen	O
=	O
(	O
&	O
entp	pointer
->	O
d_name	O
[	O
3	int
]	O
-	O
(	O
char	O
*	O
)	O
entp	pointer
+	O
7	int
)	O
&	O
~	O
7	int
;	O
entp	pointer
=	O
(	O
void	O
*	O
)	O
entp	pointer
+	O
entp	pointer
->	O
d_reclen	O
;	O
}	O
for	O
(	O
d	pointer
=	O
dp	pointer
->	O
dn	pointer
->	O
u	union
.	O
dir	struct
.	O
entries	pointer
;	O
i	int
<	O
entry	int
&&	O
d	pointer
!=	O
0	int
;	O
d	pointer
=	O
d	pointer
->	O
next	pointer
)	O
++	O
i	int
;	O
if	O
(	O
i	int
<	O
entry	int
)	O
{	O
assert	function
(	O
d	pointer
==	O
0	int
)	O
;	O
*	O
datacnt	pointer
=	O
0	int
;	O
*	O
amt	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
for	O
(	O
;	O
d	pointer
!=	O
0	int
;	O
d	pointer
=	O
d	pointer
->	O
next	pointer
,	O
i	int
++	O
)	O
{	O
size_t	long
rlen	long
=	O
(	O
offsetof	O
(	O
struct	O
dirent	O
,	O
d_name	O
[	O
1	int
]	O
)	O
+	O
d	pointer
->	O
namelen	int
+	O
7	int
)	O
&	O
~	O
7	int
;	O
if	O
(	O
rlen	long
+	O
(	O
char	O
*	O
)	O
entp	pointer
-	O
*	O
data	pointer
>	O
bufsiz	int
||	O
(	O
n	int
>=	O
0	int
&&	O
i	int
>	O
n	int
)	O
)	O
break	O
;	O
entp	pointer
->	O
d_fileno	O
=	O
(	O
ino_t	long
)	O
(	O
uintptr_t	O
)	O
d	pointer
->	O
dn	pointer
;	O
entp	pointer
->	O
d_type	O
=	O
DT_UNKNOWN	O
;	O
entp	pointer
->	O
d_namlen	O
=	O
d	pointer
->	O
namelen	int
;	O
memcpy	O
(	O
entp	pointer
->	O
d_name	O
,	O
d	pointer
->	O
name	array
,	O
d	pointer
->	O
namelen	int
+	O
1	int
)	O
;	O
entp	pointer
->	O
d_reclen	O
=	O
rlen	long
;	O
entp	pointer
=	O
(	O
void	O
*	O
)	O
entp	pointer
+	O
rlen	long
;	O
}	O
*	O
datacnt	pointer
=	O
(	O
char	O
*	O
)	O
entp	pointer
-	O
*	O
data	pointer
;	O
*	O
amt	pointer
=	O
i	int
-	O
entry	int
;	O
return	O
0	int
;	O
}	O
struct	O
dirstat	struct
{	O
struct	O
tmpfs_dirent	struct
*	O
*	O
prevp	pointer
;	O
int	O
dotdot	pointer
;	O
}	O
;	O
const	O
size_t	long
diskfs_dirstat_size	long
=	O
sizeof	O
(	O
struct	O
dirstat	struct
)	O
;	O
void	O
diskfs_null_dirstat	function
(	O
struct	O
dirstat	struct
*	O
ds	pointer
)	O
{	O
ds	pointer
->	O
prevp	pointer
=	O
0	int
;	O
}	O
error_t	O
diskfs_drop_dirstat	function
(	O
struct	O
node	O
*	O
dp	pointer
,	O
struct	O
dirstat	struct
*	O
ds	pointer
)	O
{	O
return	O
0	int
;	O
}	O
error_t	O
diskfs_lookup_hard	function
(	O
struct	O
node	O
*	O
dp	pointer
,	O
const	O
char	O
*	O
name	array
,	O
enum	O
lookup_type	O
type	int
,	O
struct	O
node	O
*	O
*	O
np	pointer
,	O
struct	O
dirstat	struct
*	O
ds	pointer
,	O
struct	O
protid	O
*	O
cred	pointer
)	O
{	O
const	O
size_t	long
namelen	int
=	O
strlen	O
(	O
name	array
)	O
;	O
struct	O
tmpfs_dirent	struct
*	O
d	pointer
,	O
*	O
*	O
prevp	pointer
;	O
if	O
(	O
type	int
==	O
REMOVE	O
||	O
type	int
==	O
RENAME	O
)	O
assert	function
(	O
np	pointer
)	O
;	O
if	O
(	O
ds	pointer
)	O
ds	pointer
->	O
dotdot	pointer
=	O
type	int
&	O
SPEC_DOTDOT	O
;	O
if	O
(	O
namelen	int
==	O
1	int
&&	O
name	array
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
if	O
(	O
np	pointer
!=	O
0	int
)	O
{	O
*	O
np	pointer
=	O
dp	pointer
;	O
diskfs_nref	function
(	O
dp	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
if	O
(	O
namelen	int
==	O
2	int
&&	O
name	array
[	O
0	int
]	O
==	O
'.'	O
&&	O
name	array
[	O
1	int
]	O
==	O
'.'	O
)	O
{	O
struct	O
disknode	struct
*	O
dddn	pointer
=	O
dp	pointer
->	O
dn	pointer
->	O
u	union
.	O
dir	struct
.	O
dotdot	pointer
;	O
error_t	O
err	O
;	O
assert	function
(	O
np	pointer
!=	O
0	int
)	O
;	O
if	O
(	O
dddn	pointer
==	O
0	int
)	O
return	O
EAGAIN	O
;	O
if	O
(	O
type	int
==	O
(	O
REMOVE	O
|	O
SPEC_DOTDOT	O
)	O
||	O
type	int
==	O
(	O
RENAME	O
|	O
SPEC_DOTDOT	O
)	O
)	O
{	O
*	O
np	pointer
=	O
*	O
dddn	pointer
->	O
hprevp	pointer
;	O
assert	function
(	O
*	O
np	pointer
)	O
;	O
assert	function
(	O
(	O
*	O
np	pointer
)	O
->	O
dn	pointer
==	O
dddn	pointer
)	O
;	O
assert	function
(	O
*	O
dddn	pointer
->	O
hprevp	pointer
==	O
*	O
np	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
pthread_mutex_unlock	function
(	O
&	O
dp	pointer
->	O
lock	O
)	O
;	O
err	O
=	O
diskfs_cached_lookup	function
(	O
(	O
ino_t	long
)	O
(	O
intptr_t	long
)	O
dddn	pointer
,	O
np	pointer
)	O
;	O
if	O
(	O
type	int
==	O
(	O
LOOKUP	O
|	O
SPEC_DOTDOT	O
)	O
)	O
diskfs_nrele	function
(	O
dp	pointer
)	O
;	O
else	O
pthread_mutex_lock	function
(	O
&	O
dp	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
err	O
)	O
*	O
np	pointer
=	O
0	int
;	O
return	O
err	O
;	O
}	O
}	O
for	O
(	O
d	pointer
=	O
*	O
(	O
prevp	pointer
=	O
&	O
dp	pointer
->	O
dn	pointer
->	O
u	union
.	O
dir	struct
.	O
entries	pointer
)	O
;	O
d	pointer
!=	O
0	int
;	O
d	pointer
=	O
*	O
(	O
prevp	pointer
=	O
&	O
d	pointer
->	O
next	pointer
)	O
)	O
if	O
(	O
d	pointer
->	O
namelen	int
==	O
namelen	int
&&	O
!	O
memcmp	O
(	O
d	pointer
->	O
name	array
,	O
name	array
,	O
namelen	int
)	O
)	O
{	O
if	O
(	O
ds	pointer
)	O
ds	pointer
->	O
prevp	pointer
=	O
prevp	pointer
;	O
if	O
(	O
np	pointer
)	O
return	O
diskfs_cached_lookup	function
(	O
(	O
ino_t	long
)	O
(	O
uintptr_t	O
)	O
d	pointer
->	O
dn	pointer
,	O
np	pointer
)	O
;	O
else	O
return	O
0	int
;	O
}	O
if	O
(	O
ds	pointer
)	O
ds	pointer
->	O
prevp	pointer
=	O
prevp	pointer
;	O
if	O
(	O
np	pointer
)	O
*	O
np	pointer
=	O
0	int
;	O
return	O
ENOENT	O
;	O
}	O
error_t	O
diskfs_direnter_hard	function
(	O
struct	O
node	O
*	O
dp	pointer
,	O
const	O
char	O
*	O
name	array
,	O
struct	O
node	O
*	O
np	pointer
,	O
struct	O
dirstat	struct
*	O
ds	pointer
,	O
struct	O
protid	O
*	O
cred	pointer
)	O
{	O
const	O
size_t	long
namelen	int
=	O
strlen	O
(	O
name	array
)	O
;	O
const	O
size_t	long
entsize	long
=	O
(	O
offsetof	O
(	O
struct	O
dirent	O
,	O
d_name	O
[	O
1	int
]	O
)	O
+	O
namelen	int
+	O
7	int
)	O
&	O
~	O
7	int
;	O
struct	O
tmpfs_dirent	struct
*	O
new	pointer
;	O
if	O
(	O
round_page	function
(	O
tmpfs_space_used	long
+	O
entsize	long
)	O
/	O
vm_page_size	O
>	O
tmpfs_page_limit	long
)	O
return	O
ENOSPC	O
;	O
new	pointer
=	O
malloc	O
(	O
offsetof	O
(	O
struct	O
tmpfs_dirent	struct
,	O
name	array
)	O
+	O
namelen	int
+	O
1	int
)	O
;	O
if	O
(	O
new	pointer
==	O
0	int
)	O
return	O
ENOSPC	O
;	O
new	pointer
->	O
next	pointer
=	O
0	int
;	O
new	pointer
->	O
dn	pointer
=	O
np	pointer
->	O
dn	pointer
;	O
new	pointer
->	O
namelen	int
=	O
namelen	int
;	O
memcpy	O
(	O
new	pointer
->	O
name	array
,	O
name	array
,	O
namelen	int
+	O
1	int
)	O
;	O
*	O
ds	pointer
->	O
prevp	pointer
=	O
new	pointer
;	O
dp	pointer
->	O
dn_stat	O
.	O
st_size	O
+=	O
entsize	long
;	O
adjust_used	function
(	O
entsize	long
)	O
;	O
dp	pointer
->	O
dn_stat	O
.	O
st_blocks	O
=	O
(	O
(	O
sizeof	O
*	O
dp	pointer
->	O
dn	pointer
+	O
dp	pointer
->	O
dn	pointer
->	O
translen	long
+	O
dp	pointer
->	O
dn_stat	O
.	O
st_size	O
+	O
511	int
)	O
/	O
512	int
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
diskfs_dirrewrite_hard	function
(	O
struct	O
node	O
*	O
dp	pointer
,	O
struct	O
node	O
*	O
np	pointer
,	O
struct	O
dirstat	struct
*	O
ds	pointer
)	O
{	O
if	O
(	O
ds	pointer
->	O
dotdot	pointer
)	O
dp	pointer
->	O
dn	pointer
->	O
u	union
.	O
dir	struct
.	O
dotdot	pointer
=	O
np	pointer
->	O
dn	pointer
;	O
else	O
(	O
*	O
ds	pointer
->	O
prevp	pointer
)	O
->	O
dn	pointer
=	O
np	pointer
->	O
dn	pointer
;	O
return	O
0	int
;	O
}	O
error_t	O
diskfs_dirremove_hard	function
(	O
struct	O
node	O
*	O
dp	pointer
,	O
struct	O
dirstat	struct
*	O
ds	pointer
)	O
{	O
struct	O
tmpfs_dirent	struct
*	O
d	pointer
=	O
*	O
ds	pointer
->	O
prevp	pointer
;	O
const	O
size_t	long
entsize	long
=	O
(	O
offsetof	O
(	O
struct	O
dirent	O
,	O
d_name	O
[	O
1	int
]	O
)	O
+	O
d	pointer
->	O
namelen	int
+	O
7	int
)	O
&	O
~	O
7	int
;	O
*	O
ds	pointer
->	O
prevp	pointer
=	O
d	pointer
->	O
next	pointer
;	O
if	O
(	O
dp	pointer
->	O
dirmod_reqs	O
!=	O
0	int
)	O
diskfs_notice_dirchange	function
(	O
dp	pointer
,	O
DIR_CHANGED_UNLINK	O
,	O
d	pointer
->	O
name	array
)	O
;	O
free	function
(	O
d	pointer
)	O
;	O
adjust_used	function
(	O
-	O
entsize	long
)	O
;	O
dp	pointer
->	O
dn_stat	O
.	O
st_size	O
-=	O
entsize	long
;	O
dp	pointer
->	O
dn_stat	O
.	O
st_blocks	O
=	O
(	O
(	O
sizeof	O
*	O
dp	pointer
->	O
dn	pointer
+	O
dp	pointer
->	O
dn	pointer
->	O
translen	long
+	O
dp	pointer
->	O
dn_stat	O
.	O
st_size	O
+	O
511	int
)	O
/	O
512	int
)	O
;	O
return	O
0	int
;	O
}	O
