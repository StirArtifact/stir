BPRINTF_BUFFER	struct
*	O
bprintf_create_buffer	function
(	O
void	O
)	O
{	O
BPRINTF_BUFFER	struct
*	O
buffer	pointer
;	O
buffer	pointer
=	O
(	O
BPRINTF_BUFFER	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
BPRINTF_BUFFER	struct
)	O
)	O
;	O
memset	function
(	O
buffer	pointer
,	O
0	int
,	O
sizeof	O
(	O
BPRINTF_BUFFER	struct
)	O
)	O
;	O
return	O
(	O
buffer	pointer
)	O
;	O
}	O
void	O
bprintf_free_buffer	function
(	O
BPRINTF_BUFFER	struct
*	O
buffer	pointer
)	O
{	O
if	O
(	O
buffer	pointer
)	O
{	O
if	O
(	O
buffer	pointer
->	O
buffer	pointer
)	O
free	function
(	O
buffer	pointer
->	O
buffer	pointer
)	O
;	O
free	function
(	O
buffer	pointer
)	O
;	O
}	O
}	O
BPRINTF_BUFFER	struct
*	O
bprintf_copy_buffer	function
(	O
BPRINTF_BUFFER	struct
*	O
input	pointer
)	O
{	O
BPRINTF_BUFFER	struct
*	O
copy	pointer
;	O
copy	pointer
=	O
bprintf_create_buffer	function
(	O
)	O
;	O
copy	pointer
->	O
bindex	int
=	O
input	pointer
->	O
bindex	int
;	O
copy	pointer
->	O
bsize	int
=	O
input	pointer
->	O
bsize	int
;	O
if	O
(	O
copy	pointer
->	O
bsize	int
)	O
{	O
copy	pointer
->	O
buffer	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
1	int
+	O
copy	pointer
->	O
bsize	int
)	O
;	O
memcpy	function
(	O
copy	pointer
->	O
buffer	pointer
,	O
input	pointer
->	O
buffer	pointer
,	O
copy	pointer
->	O
bsize	int
)	O
;	O
copy	pointer
->	O
buffer	pointer
[	O
copy	pointer
->	O
bsize	int
]	O
=	O
'\0'	O
;	O
}	O
return	O
(	O
copy	pointer
)	O
;	O
}	O
static	O
void	O
resize_buffer	function
(	O
BPRINTF_BUFFER	struct
*	O
buffer	pointer
,	O
int	O
len	int
)	O
{	O
if	O
(	O
(	O
buffer	pointer
->	O
bindex	int
+	O
len	int
+	O
2	int
)	O
>	O
buffer	pointer
->	O
bsize	int
)	O
buffer	pointer
->	O
buffer	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
buffer	pointer
->	O
buffer	pointer
,	O
(	O
buffer	pointer
->	O
bsize	int
+=	O
(	O
len	int
+	O
100	int
)	O
)	O
)	O
;	O
}	O
static	O
void	O
add_string_to_buffer	function
(	O
char	O
*	O
string	pointer
,	O
BPRINTF_BUFFER	struct
*	O
buffer	pointer
)	O
{	O
if	O
(	O
string	pointer
)	O
{	O
int	O
len	int
=	O
strlen	function
(	O
string	pointer
)	O
;	O
resize_buffer	function
(	O
buffer	pointer
,	O
len	int
)	O
;	O
strcpy	function
(	O
buffer	pointer
->	O
buffer	pointer
+	O
buffer	pointer
->	O
bindex	int
,	O
string	pointer
)	O
;	O
buffer	pointer
->	O
bindex	int
+=	O
len	int
;	O
}	O
}	O
static	O
char	O
*	O
printf_arg_specifiers	pointer
=	O
"diouxXDOUeEfgcspnm%"	pointer
;	O
static	O
char	O
format_buff	array
[	O
FORMAT_BUFF_SIZE	int
]	O
;	O
static	O
int	O
min_field_width	int
=	O
0	int
;	O
static	O
int	O
precision	int
=	O
0	int
;	O
static	O
void	O
parse_field_specifiers	function
(	O
char	O
*	O
spec	pointer
)	O
{	O
register	O
int	O
start	int
,	O
end	int
;	O
int	O
parsing_width	int
=	O
1	int
;	O
char	O
numbuff	array
[	O
20	int
]	O
;	O
min_field_width	int
=	O
0	int
;	O
precision	int
=	O
0	int
;	O
if	O
(	O
strlen	function
(	O
spec	pointer
)	O
==	O
2	int
)	O
return	O
;	O
for	O
(	O
start	int
=	O
0	int
;	O
spec	pointer
[	O
start	int
]	O
!=	O
'\0'	O
&&	O
!	O
isdigit	function
(	O
spec	pointer
[	O
start	int
]	O
)	O
;	O
start	int
++	O
)	O
if	O
(	O
spec	pointer
[	O
start	int
]	O
==	O
'.'	O
)	O
parsing_width	int
=	O
0	int
;	O
if	O
(	O
spec	pointer
[	O
start	int
]	O
==	O
'\0'	O
)	O
return	O
;	O
for	O
(	O
end	int
=	O
start	int
;	O
spec	pointer
[	O
end	int
]	O
!=	O
'\0'	O
&&	O
isdigit	function
(	O
spec	pointer
[	O
end	int
]	O
)	O
;	O
end	int
++	O
)	O
;	O
strncpy	function
(	O
numbuff	array
,	O
spec	pointer
+	O
start	int
,	O
end	int
-	O
start	int
)	O
;	O
numbuff	array
[	O
end	int
-	O
start	int
]	O
=	O
'\0'	O
;	O
sscanf	function
(	O
numbuff	array
,	O
"%d"	pointer
,	O
parsing_width	int
?	O
&	O
min_field_width	int
:	O
&	O
precision	int
)	O
;	O
if	O
(	O
!	O
parsing_width	int
)	O
return	O
;	O
for	O
(	O
start	int
=	O
end	int
;	O
spec	pointer
[	O
start	int
]	O
!=	O
'\0'	O
&&	O
!	O
isdigit	function
(	O
spec	pointer
[	O
start	int
]	O
)	O
;	O
start	int
++	O
)	O
;	O
if	O
(	O
!	O
isdigit	function
(	O
spec	pointer
[	O
start	int
]	O
)	O
)	O
return	O
;	O
for	O
(	O
end	int
=	O
start	int
;	O
spec	pointer
[	O
end	int
]	O
!=	O
'\0'	O
&&	O
isdigit	function
(	O
spec	pointer
[	O
end	int
]	O
)	O
;	O
end	int
++	O
)	O
;	O
strncpy	function
(	O
numbuff	array
,	O
spec	pointer
+	O
start	int
,	O
end	int
-	O
start	int
)	O
;	O
numbuff	array
[	O
end	int
-	O
start	int
]	O
=	O
'\0'	O
;	O
sscanf	function
(	O
numbuff	array
,	O
"%d"	pointer
,	O
&	O
precision	int
)	O
;	O
}	O
static	O
char	O
*	O
format_long	function
(	O
char	O
*	O
spec	pointer
,	O
long	O
value	long
)	O
{	O
sprintf	function
(	O
format_buff	array
,	O
spec	pointer
,	O
value	long
)	O
;	O
return	O
(	O
format_buff	array
)	O
;	O
}	O
static	O
char	O
*	O
format_short	function
(	O
char	O
*	O
spec	pointer
,	O
short	O
value	long
)	O
{	O
sprintf	function
(	O
format_buff	array
,	O
spec	pointer
,	O
value	long
)	O
;	O
return	O
(	O
format_buff	array
)	O
;	O
}	O
static	O
char	O
*	O
format_int	function
(	O
char	O
*	O
spec	pointer
,	O
int	O
value	long
)	O
{	O
sprintf	function
(	O
format_buff	array
,	O
spec	pointer
,	O
value	long
)	O
;	O
return	O
(	O
format_buff	array
)	O
;	O
}	O
static	O
char	O
*	O
format_double	function
(	O
char	O
*	O
spec	pointer
,	O
double	O
value	long
)	O
{	O
sprintf	function
(	O
format_buff	array
,	O
spec	pointer
,	O
value	long
)	O
;	O
return	O
(	O
format_buff	array
)	O
;	O
}	O
static	O
char	O
*	O
format_character	function
(	O
char	O
*	O
spec	pointer
,	O
int	O
character	int
)	O
{	O
format_buff	array
[	O
0	int
]	O
=	O
character	int
;	O
format_buff	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
format_buff	array
)	O
;	O
}	O
static	O
char	O
*	O
format_string	function
(	O
char	O
*	O
spec	pointer
,	O
char	O
*	O
string	pointer
)	O
{	O
parse_field_specifiers	function
(	O
spec	pointer
)	O
;	O
if	O
(	O
!	O
string	pointer
)	O
string	pointer
=	O
NULL_STRING_VALUE	pointer
;	O
if	O
(	O
min_field_width	int
)	O
{	O
if	O
(	O
(	O
min_field_width	int
+	O
strlen	function
(	O
string	pointer
)	O
)	O
<	O
FORMAT_BUFF_SIZE	int
)	O
{	O
sprintf	function
(	O
format_buff	array
,	O
spec	pointer
,	O
string	pointer
)	O
;	O
return	O
(	O
format_buff	array
)	O
;	O
}	O
else	O
{	O
static	O
char	O
*	O
fb	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
fb	pointer
)	O
free	function
(	O
fb	pointer
)	O
;	O
fb	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
20	int
+	O
min_field_width	int
+	O
strlen	function
(	O
string	pointer
)	O
)	O
;	O
sprintf	function
(	O
fb	pointer
,	O
spec	pointer
,	O
string	pointer
)	O
;	O
return	O
(	O
fb	pointer
)	O
;	O
}	O
}	O
return	O
(	O
string	pointer
)	O
;	O
}	O
void	O
bprintf	function
(	O
BPRINTF_BUFFER	struct
*	O
buffer	pointer
,	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
format	pointer
)	O
;	O
vbprintf	function
(	O
buffer	pointer
,	O
format	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
}	O
void	O
vbprintf	function
(	O
BPRINTF_BUFFER	struct
*	O
buffer	pointer
,	O
char	O
*	O
format	pointer
,	O
va_list	array
args	array
)	O
{	O
register	O
int	O
i	int
,	O
c	int
;	O
char	O
*	O
accum	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
int	O
accum_index	int
=	O
0	int
;	O
int	O
accum_size	int
=	O
0	int
;	O
int	O
recent_errno	int
=	O
errno	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
c	int
=	O
format	pointer
[	O
i	int
]	O
)	O
!=	O
'\0'	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
c	int
!=	O
'%'	O
)	O
||	O
(	O
format	pointer
[	O
i	int
+	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
{	O
if	O
(	O
(	O
accum_index	int
+	O
3	int
)	O
>	O
accum_size	int
)	O
accum	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
accum	pointer
,	O
(	O
accum_size	int
+=	O
100	int
)	O
)	O
;	O
accum	pointer
[	O
accum_index	int
++	O
]	O
=	O
c	int
;	O
accum	pointer
[	O
accum_index	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
int	O
start	int
=	O
i	int
;	O
int	O
long_format	int
=	O
0	int
;	O
int	O
short_format	int
=	O
0	int
;	O
char	O
*	O
result	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
char	O
*	O
spec	pointer
;	O
if	O
(	O
accum_index	int
)	O
{	O
add_string_to_buffer	function
(	O
accum	pointer
,	O
buffer	pointer
)	O
;	O
accum_index	int
=	O
0	int
;	O
accum	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
format	pointer
[	O
++	O
i	int
]	O
)	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
c	int
==	O
'l'	O
)	O
long_format	int
++	O
;	O
else	O
if	O
(	O
c	int
==	O
'h'	O
)	O
short_format	int
++	O
;	O
else	O
if	O
(	O
strchr	function
(	O
printf_arg_specifiers	pointer
,	O
c	int
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
break	O
;	O
}	O
spec	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
2	int
+	O
(	O
i	int
-	O
start	int
)	O
)	O
;	O
memcpy	function
(	O
spec	pointer
,	O
format	pointer
+	O
start	int
,	O
(	O
(	O
i	int
-	O
start	int
)	O
+	O
1	int
)	O
)	O
;	O
spec	pointer
[	O
(	O
i	int
-	O
start	int
)	O
+	O
1	int
]	O
=	O
'\0'	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'd'	O
:	O
case	O
'i'	O
:	O
case	O
'o'	O
:	O
case	O
'u'	O
:	O
case	O
'x'	O
:	O
case	O
'X'	O
:	O
{	O
if	O
(	O
long_format	int
)	O
{	O
long	O
value	long
;	O
value	long
=	O
va_arg	O
(	O
args	array
,	O
long	O
)	O
;	O
result	pointer
=	O
format_long	function
(	O
spec	pointer
,	O
value	long
)	O
;	O
}	O
else	O
if	O
(	O
short_format	int
)	O
{	O
short	O
value	long
;	O
value	long
=	O
va_arg	O
(	O
args	array
,	O
short	O
)	O
;	O
result	pointer
=	O
format_short	function
(	O
spec	pointer
,	O
value	long
)	O
;	O
}	O
else	O
{	O
int	O
value	long
;	O
value	long
=	O
va_arg	O
(	O
args	array
,	O
int	O
)	O
;	O
result	pointer
=	O
format_int	function
(	O
spec	pointer
,	O
value	long
)	O
;	O
}	O
}	O
break	O
;	O
case	O
'O'	O
:	O
case	O
'U'	O
:	O
case	O
'p'	O
:	O
{	O
unsigned	O
long	O
value	long
;	O
value	long
=	O
va_arg	O
(	O
args	array
,	O
long	O
)	O
;	O
result	pointer
=	O
format_long	function
(	O
spec	pointer
,	O
value	long
)	O
;	O
}	O
break	O
;	O
case	O
'e'	O
:	O
case	O
'E'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'G'	O
:	O
{	O
double	O
value	long
;	O
value	long
=	O
va_arg	O
(	O
args	array
,	O
double	O
)	O
;	O
result	pointer
=	O
format_double	function
(	O
spec	pointer
,	O
value	long
)	O
;	O
}	O
break	O
;	O
case	O
'c'	O
:	O
{	O
int	O
value	long
;	O
value	long
=	O
va_arg	O
(	O
args	array
,	O
int	O
)	O
;	O
result	pointer
=	O
format_character	function
(	O
spec	pointer
,	O
value	long
)	O
;	O
}	O
break	O
;	O
case	O
's'	O
:	O
{	O
char	O
*	O
value	long
;	O
value	long
=	O
va_arg	O
(	O
args	array
,	O
char	O
*	O
)	O
;	O
result	pointer
=	O
format_string	function
(	O
spec	pointer
,	O
value	long
)	O
;	O
}	O
break	O
;	O
case	O
'%'	O
:	O
result	pointer
=	O
"%"	pointer
;	O
break	O
;	O
case	O
'n'	O
:	O
{	O
int	O
*	O
value	long
;	O
value	long
=	O
va_arg	O
(	O
args	array
,	O
int	O
*	O
)	O
;	O
*	O
value	long
=	O
buffer	pointer
->	O
bindex	int
;	O
}	O
break	O
;	O
case	O
'm'	O
:	O
result	pointer
=	O
(	O
char	O
*	O
)	O
strerror	function
(	O
recent_errno	int
)	O
;	O
break	O
;	O
default	O
:	O
{	O
static	O
char	O
bad_idea	array
[	O
3	int
]	O
;	O
bad_idea	array
[	O
0	int
]	O
=	O
'%'	O
;	O
bad_idea	array
[	O
1	int
]	O
=	O
c	int
;	O
bad_idea	array
[	O
2	int
]	O
=	O
'\0'	O
;	O
result	pointer
=	O
bad_idea	array
;	O
}	O
}	O
if	O
(	O
result	pointer
)	O
add_string_to_buffer	function
(	O
result	pointer
,	O
buffer	pointer
)	O
;	O
free	function
(	O
spec	pointer
)	O
;	O
}	O
}	O
if	O
(	O
accum_index	int
)	O
add_string_to_buffer	function
(	O
accum	pointer
,	O
buffer	pointer
)	O
;	O
if	O
(	O
accum	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
free	function
(	O
accum	pointer
)	O
;	O
}	O
int	O
bprintf_delete_range	function
(	O
BPRINTF_BUFFER	struct
*	O
buffer	pointer
,	O
int	O
start	int
,	O
int	O
end	int
)	O
{	O
if	O
(	O
end	int
<	O
0	int
)	O
end	int
=	O
buffer	pointer
->	O
bindex	int
;	O
if	O
(	O
start	int
<	O
0	int
)	O
start	int
=	O
0	int
;	O
if	O
(	O
end	int
<	O
start	int
)	O
{	O
int	O
temp	int
=	O
start	int
;	O
start	int
=	O
end	int
;	O
end	int
=	O
temp	int
;	O
}	O
if	O
(	O
end	int
>	O
buffer	pointer
->	O
bindex	int
)	O
end	int
=	O
buffer	pointer
->	O
bindex	int
;	O
if	O
(	O
(	O
buffer	pointer
->	O
bindex	int
==	O
0	int
)	O
||	O
(	O
end	int
==	O
start	int
)	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
end	int
!=	O
buffer	pointer
->	O
bindex	int
)	O
memmove	function
(	O
buffer	pointer
->	O
buffer	pointer
+	O
start	int
,	O
buffer	pointer
->	O
buffer	pointer
+	O
end	int
,	O
buffer	pointer
->	O
bindex	int
-	O
end	int
)	O
;	O
buffer	pointer
->	O
bindex	int
-=	O
(	O
end	int
-	O
start	int
)	O
;	O
buffer	pointer
->	O
buffer	pointer
[	O
buffer	pointer
->	O
bindex	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
end	int
-	O
start	int
)	O
;	O
}	O
int	O
bprintf_insert_text	function
(	O
BPRINTF_BUFFER	struct
*	O
buffer	pointer
,	O
int	O
point	int
,	O
char	O
*	O
text	pointer
)	O
{	O
int	O
text_len	int
;	O
if	O
(	O
point	int
>	O
buffer	pointer
->	O
bindex	int
)	O
return	O
(	O
-	O
1	int
)	O
;	O
text_len	int
=	O
text	pointer
?	O
strlen	function
(	O
text	pointer
)	O
:	O
0	int
;	O
if	O
(	O
text_len	int
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
resize_buffer	function
(	O
buffer	pointer
,	O
1	int
+	O
text_len	int
)	O
;	O
memmove	function
(	O
buffer	pointer
->	O
buffer	pointer
+	O
point	int
+	O
text_len	int
,	O
buffer	pointer
->	O
buffer	pointer
+	O
point	int
,	O
(	O
buffer	pointer
->	O
bindex	int
+	O
1	int
)	O
-	O
point	int
)	O
;	O
memmove	function
(	O
buffer	pointer
->	O
buffer	pointer
+	O
point	int
,	O
text	pointer
,	O
text_len	int
)	O
;	O
buffer	pointer
->	O
bindex	int
+=	O
text_len	int
;	O
return	O
(	O
text_len	int
)	O
;	O
}	O
int	O
bprintf_insert	function
(	O
BPRINTF_BUFFER	struct
*	O
buffer	pointer
,	O
int	O
point	int
,	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
BPRINTF_BUFFER	struct
*	O
temp_buffer	pointer
;	O
int	O
result	pointer
;	O
temp_buffer	pointer
=	O
bprintf_create_buffer	function
(	O
)	O
;	O
va_start	O
(	O
args	array
,	O
format	pointer
)	O
;	O
vbprintf	function
(	O
temp_buffer	pointer
,	O
format	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
result	pointer
=	O
bprintf_insert_text	function
(	O
buffer	pointer
,	O
point	int
,	O
temp_buffer	pointer
->	O
buffer	pointer
)	O
;	O
bprintf_free_buffer	function
(	O
temp_buffer	pointer
)	O
;	O
return	O
(	O
result	pointer
)	O
;	O
}	O
void	O
bprintf_insert_binary	function
(	O
BPRINTF_BUFFER	struct
*	O
buffer	pointer
,	O
int	O
point	int
,	O
char	O
*	O
data	pointer
,	O
int	O
len	int
)	O
{	O
if	O
(	O
(	O
len	int
+	O
buffer	pointer
->	O
bindex	int
)	O
>=	O
buffer	pointer
->	O
bsize	int
)	O
buffer	pointer
->	O
buffer	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
buffer	pointer
->	O
buffer	pointer
,	O
(	O
buffer	pointer
->	O
bsize	int
+=	O
(	O
len	int
+	O
100	int
)	O
)	O
)	O
;	O
memmove	function
(	O
buffer	pointer
->	O
buffer	pointer
+	O
point	int
+	O
len	int
,	O
buffer	pointer
->	O
buffer	pointer
+	O
point	int
,	O
(	O
buffer	pointer
->	O
bindex	int
+	O
1	int
)	O
-	O
point	int
)	O
;	O
memcpy	function
(	O
buffer	pointer
->	O
buffer	pointer
+	O
point	int
,	O
data	pointer
,	O
len	int
)	O
;	O
buffer	pointer
->	O
bindex	int
+=	O
len	int
;	O
}	O
void	O
bprintf_word_wrap	function
(	O
BPRINTF_BUFFER	struct
*	O
buffer	pointer
,	O
int	O
width	int
)	O
{	O
register	O
int	O
i	int
;	O
int	O
col	int
=	O
0	int
;	O
int	O
last_space	int
=	O
0	int
;	O
bprintf	function
(	O
buffer	pointer
,	O
" "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
buffer	pointer
->	O
bindex	int
;	O
i	int
++	O
)	O
{	O
col	int
++	O
;	O
if	O
(	O
buffer	pointer
->	O
buffer	pointer
[	O
i	int
]	O
==	O
'\n'	O
)	O
{	O
if	O
(	O
(	O
(	O
i	int
+	O
1	int
)	O
<	O
buffer	pointer
->	O
bindex	int
)	O
&&	O
(	O
buffer	pointer
->	O
buffer	pointer
[	O
i	int
+	O
1	int
]	O
==	O
'\n'	O
)	O
)	O
{	O
col	int
=	O
0	int
;	O
i	int
++	O
;	O
continue	O
;	O
}	O
else	O
buffer	pointer
->	O
buffer	pointer
[	O
i	int
]	O
=	O
' '	O
;	O
}	O
if	O
(	O
buffer	pointer
->	O
buffer	pointer
[	O
i	int
]	O
==	O
' '	O
)	O
{	O
if	O
(	O
col	int
>=	O
width	int
)	O
{	O
int	O
start	int
;	O
if	O
(	O
last_space	int
)	O
i	int
=	O
last_space	int
;	O
buffer	pointer
->	O
buffer	pointer
[	O
i	int
++	O
]	O
=	O
'\n'	O
;	O
start	int
=	O
i	int
;	O
while	O
(	O
whitespace	O
(	O
buffer	pointer
->	O
buffer	pointer
[	O
i	int
]	O
)	O
&&	O
i	int
<	O
buffer	pointer
->	O
bindex	int
)	O
i	int
++	O
;	O
if	O
(	O
start	int
!=	O
i	int
)	O
{	O
bprintf_delete_range	function
(	O
buffer	pointer
,	O
start	int
,	O
i	int
)	O
;	O
i	int
=	O
start	int
-	O
1	int
;	O
}	O
last_space	int
=	O
0	int
;	O
col	int
=	O
0	int
;	O
}	O
else	O
last_space	int
=	O
i	int
;	O
}	O
}	O
}	O
