const	O
char	O
log_rcsid	array
[	O
]	O
=	O
"$Id: log.c,v 1.65 2002/03/05 19:10:41 ian Rel $"	pointer
;	O
__inline__	O
static	O
char	O
*	O
zstpcpy	function
P	O
(	O
(	O
char	O
*	O
zto	pointer
,	O
const	O
char	O
*	O
zfrom	pointer
)	O
)	O
;	O
static	O
const	O
char	O
*	O
zldate_and_time	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
const	O
char	O
*	O
zProgram	pointer
;	O
static	O
const	O
char	O
*	O
zLogfile	pointer
;	O
static	O
void	O
(	O
*	O
pfLfatal	pointer
)	O
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
boolean	int
fLfile	int
;	O
static	O
int	O
iLid	int
;	O
static	O
char	O
*	O
zLuser	pointer
;	O
static	O
char	O
*	O
zLsystem	pointer
;	O
char	O
*	O
zLdevice	pointer
;	O
static	O
FILE	struct
*	O
eLlog	pointer
;	O
static	O
boolean	int
fLlog_tried	int
;	O
static	O
const	O
char	O
*	O
zLdebugfile	pointer
;	O
static	O
FILE	struct
*	O
eLdebug	pointer
;	O
static	O
boolean	int
fLdebug_tried	int
;	O
static	O
const	O
char	O
*	O
zLstatsfile	pointer
;	O
static	O
FILE	struct
*	O
eLstats	pointer
;	O
static	O
boolean	int
fLstats_tried	int
;	O
volatile	O
sig_atomic_t	int
afSignal	array
[	O
INDEXSIG_COUNT	O
]	O
;	O
volatile	O
sig_atomic_t	int
afLog_signal	array
[	O
INDEXSIG_COUNT	O
]	O
;	O
boolean	int
fLog_sighup	int
=	O
TRUE	O
;	O
static	O
const	O
char	O
*	O
const	O
azSignal_names	array
[	O
INDEXSIG_COUNT	O
]	O
=	O
INDEXSIG_NAMES	O
;	O
void	O
(	O
*	O
pfLstart	pointer
)	O
P	O
(	O
(	O
void	O
)	O
)	O
;	O
void	O
(	O
*	O
pfLend	pointer
)	O
P	O
(	O
(	O
void	O
)	O
)	O
;	O
void	O
ulog_fatal_fn	function
(	O
pfn	pointer
)	O
void	O
(	O
*	O
pfn	pointer
)	O
P	O
(	O
(	O
void	O
)	O
)	O
;	O
{	O
pfLfatal	pointer
=	O
pfn	pointer
;	O
}	O
void	O
ulog_to_file	function
(	O
puuconf	pointer
,	O
ffile	int
)	O
pointer	pointer
puuconf	pointer
;	O
boolean	int
ffile	int
;	O
{	O
int	O
iuuconf	int
;	O
iuuconf	int
=	O
uuconf_logfile	function
(	O
puuconf	pointer
,	O
&	O
zLogfile	pointer
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
iuuconf	int
=	O
uuconf_debugfile	function
(	O
puuconf	pointer
,	O
&	O
zLdebugfile	pointer
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
iuuconf	int
=	O
uuconf_statsfile	function
(	O
puuconf	pointer
,	O
&	O
zLstatsfile	pointer
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
fLfile	int
=	O
ffile	int
;	O
}	O
void	O
ulog_id	function
(	O
i	int
)	O
int	O
i	int
;	O
{	O
iLid	int
=	O
i	int
;	O
}	O
void	O
ulog_user	function
(	O
zuser	pointer
)	O
const	O
char	O
*	O
zuser	pointer
;	O
{	O
ubuffree	function
(	O
zLuser	pointer
)	O
;	O
zLuser	pointer
=	O
zbufcpy	function
(	O
zuser	pointer
)	O
;	O
}	O
void	O
ulog_system	function
(	O
zsystem	pointer
)	O
const	O
char	O
*	O
zsystem	pointer
;	O
{	O
if	O
(	O
zsystem	pointer
==	O
NULL	O
||	O
zLsystem	pointer
==	O
NULL	O
||	O
strcmp	function
(	O
zsystem	pointer
,	O
zLsystem	pointer
)	O
!=	O
0	int
)	O
{	O
ubuffree	function
(	O
zLsystem	pointer
)	O
;	O
zLsystem	pointer
=	O
zbufcpy	function
(	O
zsystem	pointer
)	O
;	O
}	O
}	O
void	O
ulog_device	function
(	O
zdevice	pointer
)	O
const	O
char	O
*	O
zdevice	pointer
;	O
{	O
ubuffree	function
(	O
zLdevice	pointer
)	O
;	O
zLdevice	pointer
=	O
zbufcpy	function
(	O
zdevice	pointer
)	O
;	O
}	O
__inline__	O
static	O
char	O
*	O
zstpcpy	function
(	O
zto	pointer
,	O
zfrom	pointer
)	O
char	O
*	O
zto	pointer
;	O
const	O
char	O
*	O
zfrom	pointer
;	O
{	O
while	O
(	O
(	O
*	O
zto	pointer
++	O
=	O
*	O
zfrom	pointer
++	O
)	O
!=	O
'\0'	O
)	O
;	O
return	O
zto	pointer
-	O
1	int
;	O
}	O
void	O
ulog	function
(	O
enum	O
tlog	enum
ttype	enum
,	O
const	O
char	O
*	O
zmsg	pointer
,	O
...	O
)	O
{	O
va_list	array
parg	array
;	O
FILE	struct
*	O
e	pointer
,	O
*	O
edebug	pointer
;	O
boolean	int
fstart	int
,	O
fend	int
;	O
const	O
char	O
*	O
zhdr	pointer
;	O
char	O
*	O
zprefix	pointer
;	O
register	O
char	O
*	O
zset	pointer
;	O
char	O
*	O
zformat	pointer
;	O
char	O
*	O
zfrom	pointer
;	O
{	O
static	O
boolean	int
fdoing_sigs	int
;	O
if	O
(	O
!	O
fdoing_sigs	int
)	O
{	O
int	O
isig	int
;	O
fdoing_sigs	int
=	O
TRUE	O
;	O
for	O
(	O
isig	int
=	O
0	int
;	O
isig	int
<	O
INDEXSIG_COUNT	O
;	O
isig	int
++	O
)	O
{	O
if	O
(	O
afLog_signal	array
[	O
isig	int
]	O
)	O
{	O
afLog_signal	array
[	O
isig	int
]	O
=	O
FALSE	O
;	O
if	O
(	O
(	O
isig	int
!=	O
INDEXSIG_SIGHUP	O
&&	O
isig	int
!=	O
INDEXSIG_SIGINT	O
)	O
||	O
fLog_sighup	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Got %s signal"	pointer
,	O
azSignal_names	array
[	O
isig	int
]	O
)	O
;	O
}	O
}	O
fdoing_sigs	int
=	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
fLfile	int
&&	O
eLdebug	pointer
==	O
NULL	O
&&	O
!	O
fLdebug_tried	int
&&	O
iDebug	int
!=	O
0	int
)	O
{	O
fLdebug_tried	int
=	O
TRUE	O
;	O
eLdebug	pointer
=	O
esysdep_fopen	function
(	O
zLdebugfile	pointer
,	O
FALSE	O
,	O
TRUE	O
,	O
TRUE	O
)	O
;	O
}	O
if	O
(	O
!	O
fLfile	int
)	O
e	pointer
=	O
stderr	pointer
;	O
else	O
if	O
(	O
(	O
int	O
)	O
ttype	enum
>=	O
(	O
int	O
)	O
LOG_DEBUG	int
)	O
{	O
e	pointer
=	O
eLdebug	pointer
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
return	O
;	O
}	O
else	O
{	O
if	O
(	O
eLlog	pointer
==	O
NULL	O
&&	O
!	O
fLlog_tried	int
)	O
{	O
const	O
char	O
*	O
zprint	pointer
=	O
NULL	O
;	O
fLlog_tried	int
=	O
TRUE	O
;	O
eLlog	pointer
=	O
esysdep_fopen	function
(	O
zLogfile	pointer
,	O
TRUE	O
,	O
TRUE	O
,	O
TRUE	O
)	O
;	O
zprint	pointer
=	O
zLogfile	pointer
;	O
if	O
(	O
eLlog	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: can not open log file: %s\n"	pointer
,	O
zProgram	pointer
,	O
zprint	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
pfLfatal	pointer
!=	O
NULL	O
)	O
(	O
*	O
pfLfatal	pointer
)	O
(	O
)	O
;	O
usysdep_exit	function
(	O
FALSE	O
)	O
;	O
}	O
}	O
e	pointer
=	O
eLlog	pointer
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
return	O
;	O
}	O
if	O
(	O
zmsg	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
pfLstart	pointer
!=	O
NULL	O
)	O
(	O
*	O
pfLstart	pointer
)	O
(	O
)	O
;	O
edebug	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
int	O
)	O
ttype	enum
<	O
(	O
int	O
)	O
LOG_DEBUG	int
)	O
edebug	pointer
=	O
eLdebug	pointer
;	O
fstart	int
=	O
TRUE	O
;	O
fend	int
=	O
TRUE	O
;	O
switch	O
(	O
ttype	enum
)	O
{	O
case	O
LOG_NORMAL	int
:	O
zhdr	pointer
=	O
""	pointer
;	O
break	O
;	O
case	O
LOG_ERROR	int
:	O
zhdr	pointer
=	O
"ERROR: "	pointer
;	O
break	O
;	O
case	O
LOG_FATAL	int
:	O
zhdr	pointer
=	O
"FATAL: "	pointer
;	O
break	O
;	O
case	O
LOG_DEBUG	int
:	O
zhdr	pointer
=	O
"DEBUG: "	pointer
;	O
break	O
;	O
case	O
LOG_DEBUG_START	int
:	O
zhdr	pointer
=	O
"DEBUG: "	pointer
;	O
fend	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
LOG_DEBUG_CONTINUE	int
:	O
zhdr	pointer
=	O
NULL	O
;	O
fstart	int
=	O
FALSE	O
;	O
fend	int
=	O
FALSE	O
;	O
break	O
;	O
case	O
LOG_DEBUG_END	int
:	O
zhdr	pointer
=	O
NULL	O
;	O
fstart	int
=	O
FALSE	O
;	O
break	O
;	O
default	O
:	O
zhdr	pointer
=	O
"???: "	pointer
;	O
break	O
;	O
}	O
if	O
(	O
!	O
fstart	int
)	O
zprefix	pointer
=	O
zbufcpy	function
(	O
""	pointer
)	O
;	O
else	O
{	O
if	O
(	O
!	O
fLfile	int
)	O
{	O
zprefix	pointer
=	O
zbufalc	function
(	O
strlen	function
(	O
zProgram	pointer
)	O
+	O
3	int
)	O
;	O
sprintf	function
(	O
zprefix	pointer
,	O
"%s: "	pointer
,	O
zProgram	pointer
)	O
;	O
}	O
else	O
{	O
zprefix	pointer
=	O
zbufalc	function
(	O
strlen	function
(	O
zProgram	pointer
)	O
+	O
(	O
zLsystem	pointer
==	O
NULL	O
?	O
1	int
:	O
strlen	function
(	O
zLsystem	pointer
)	O
)	O
+	O
(	O
zLuser	pointer
==	O
NULL	O
?	O
4	int
:	O
strlen	function
(	O
zLuser	pointer
)	O
)	O
+	O
sizeof	O
"1991-12-31 12:00:00.00"	pointer
+	O
strlen	function
(	O
zhdr	pointer
)	O
+	O
100	int
)	O
;	O
zset	pointer
=	O
zprefix	pointer
;	O
{	O
char	O
*	O
zbase	pointer
;	O
zbase	pointer
=	O
zsysdep_base_name	function
(	O
zProgram	pointer
)	O
;	O
if	O
(	O
zbase	pointer
==	O
NULL	O
)	O
zbase	pointer
=	O
zbufcpy	function
(	O
zProgram	pointer
)	O
;	O
zset	pointer
=	O
zstpcpy	function
(	O
zset	pointer
,	O
zbase	pointer
)	O
;	O
*	O
zset	pointer
++	O
=	O
' '	O
;	O
ubuffree	function
(	O
zbase	pointer
)	O
;	O
}	O
zset	pointer
=	O
zstpcpy	function
(	O
zset	pointer
,	O
zLsystem	pointer
==	O
NULL	O
?	O
"-"	pointer
:	O
zLsystem	pointer
)	O
;	O
*	O
zset	pointer
++	O
=	O
' '	O
;	O
zset	pointer
=	O
zstpcpy	function
(	O
zset	pointer
,	O
zLuser	pointer
==	O
NULL	O
?	O
"-"	pointer
:	O
zLuser	pointer
)	O
;	O
*	O
zset	pointer
++	O
=	O
' '	O
;	O
*	O
zset	pointer
++	O
=	O
'('	O
;	O
zset	pointer
=	O
zstpcpy	function
(	O
zset	pointer
,	O
zldate_and_time	function
(	O
)	O
)	O
;	O
if	O
(	O
iLid	int
!=	O
0	int
)	O
{	O
sprintf	function
(	O
zset	pointer
,	O
" %d"	pointer
,	O
iLid	int
)	O
;	O
zset	pointer
+=	O
strlen	function
(	O
zset	pointer
)	O
;	O
}	O
*	O
zset	pointer
++	O
=	O
')'	O
;	O
*	O
zset	pointer
++	O
=	O
' '	O
;	O
strcpy	function
(	O
zset	pointer
,	O
zhdr	pointer
)	O
;	O
}	O
}	O
zformat	pointer
=	O
zbufalc	function
(	O
2	int
*	O
strlen	function
(	O
zprefix	pointer
)	O
+	O
strlen	function
(	O
zmsg	pointer
)	O
+	O
2	int
)	O
;	O
zset	pointer
=	O
zformat	pointer
;	O
zfrom	pointer
=	O
zprefix	pointer
;	O
while	O
(	O
*	O
zfrom	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
zfrom	pointer
==	O
'%'	O
)	O
*	O
zset	pointer
++	O
=	O
'%'	O
;	O
*	O
zset	pointer
++	O
=	O
*	O
zfrom	pointer
++	O
;	O
}	O
ubuffree	function
(	O
zprefix	pointer
)	O
;	O
zset	pointer
=	O
zstpcpy	function
(	O
zset	pointer
,	O
zmsg	pointer
)	O
;	O
if	O
(	O
fend	int
)	O
{	O
*	O
zset	pointer
++	O
=	O
'\n'	O
;	O
*	O
zset	pointer
=	O
'\0'	O
;	O
}	O
va_start	O
(	O
parg	array
,	O
zmsg	pointer
)	O
;	O
vfprintf	function
(	O
e	pointer
,	O
zformat	pointer
,	O
parg	array
)	O
;	O
va_end	O
(	O
parg	array
)	O
;	O
if	O
(	O
edebug	pointer
!=	O
NULL	O
)	O
{	O
va_start	O
(	O
parg	array
,	O
zmsg	pointer
)	O
;	O
vfprintf	function
(	O
edebug	pointer
,	O
zformat	pointer
,	O
parg	array
)	O
;	O
va_end	O
(	O
parg	array
)	O
;	O
}	O
ubuffree	function
(	O
zformat	pointer
)	O
;	O
(	O
void	O
)	O
fflush	function
(	O
e	pointer
)	O
;	O
if	O
(	O
edebug	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
fflush	function
(	O
edebug	pointer
)	O
;	O
if	O
(	O
pfLend	pointer
!=	O
NULL	O
)	O
(	O
*	O
pfLend	pointer
)	O
(	O
)	O
;	O
if	O
(	O
ttype	enum
==	O
LOG_FATAL	int
)	O
{	O
if	O
(	O
pfLfatal	pointer
!=	O
NULL	O
)	O
(	O
*	O
pfLfatal	pointer
)	O
(	O
)	O
;	O
usysdep_exit	function
(	O
FALSE	O
)	O
;	O
}	O
}	O
void	O
ulog_uuconf	function
(	O
ttype	enum
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
enum	O
tlog	enum
ttype	enum
;	O
pointer	pointer
puuconf	pointer
;	O
int	O
iuuconf	int
;	O
{	O
char	O
ab	array
[	O
512	int
]	O
;	O
(	O
void	O
)	O
uuconf_error_string	function
(	O
puuconf	pointer
,	O
iuuconf	int
,	O
ab	array
,	O
sizeof	O
ab	array
)	O
;	O
ulog	function
(	O
ttype	enum
,	O
"%s"	pointer
,	O
ab	array
)	O
;	O
}	O
void	O
ulog_close	function
(	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
eLlog	pointer
!=	O
NULL	O
)	O
{	O
(	O
void	O
)	O
fclose	function
(	O
eLlog	pointer
)	O
;	O
eLlog	pointer
=	O
NULL	O
;	O
fLlog_tried	int
=	O
FALSE	O
;	O
}	O
if	O
(	O
eLdebug	pointer
!=	O
NULL	O
)	O
{	O
(	O
void	O
)	O
fclose	function
(	O
eLdebug	pointer
)	O
;	O
eLdebug	pointer
=	O
NULL	O
;	O
fLdebug_tried	int
=	O
FALSE	O
;	O
}	O
}	O
void	O
ustats	function
(	O
fsucceeded	int
,	O
zuser	pointer
,	O
zsystem	pointer
,	O
fsent	int
,	O
cbytes	long
,	O
csecs	long
,	O
cmicros	long
,	O
fcaller	int
)	O
boolean	int
fsucceeded	int
;	O
const	O
char	O
*	O
zuser	pointer
;	O
const	O
char	O
*	O
zsystem	pointer
;	O
boolean	int
fsent	int
;	O
long	O
cbytes	long
;	O
long	O
csecs	long
;	O
long	O
cmicros	long
;	O
boolean	int
fcaller	int
ATTRIBUTE_UNUSED	O
;	O
{	O
long	O
cbps	long
;	O
if	O
(	O
cmicros	long
<	O
0	int
)	O
{	O
csecs	long
-=	O
(	O
(	O
-	O
cmicros	long
)	O
/	O
1000000L	int
)	O
+	O
1	int
;	O
cmicros	long
=	O
1000000L	int
-	O
(	O
(	O
-	O
cmicros	long
)	O
%	O
1000000L	int
)	O
;	O
}	O
if	O
(	O
cmicros	long
>=	O
1000000L	int
)	O
{	O
csecs	long
+=	O
cmicros	long
/	O
10000000L	int
;	O
cmicros	long
=	O
cmicros	long
%	O
1000000L	int
;	O
}	O
if	O
(	O
csecs	long
==	O
0	int
&&	O
cmicros	long
<	O
1000	int
)	O
cbps	long
=	O
0	int
;	O
else	O
{	O
long	O
cmillis	long
,	O
cdiv	long
,	O
crem	long
;	O
cmillis	long
=	O
csecs	long
*	O
1000	int
+	O
cmicros	long
/	O
1000	int
;	O
cdiv	long
=	O
(	O
cbytes	long
/	O
cmillis	long
)	O
*	O
1000	int
;	O
crem	long
=	O
(	O
cbytes	long
%	O
cmillis	long
)	O
*	O
1000	int
;	O
cbps	long
=	O
cdiv	long
+	O
(	O
crem	long
/	O
cmillis	long
)	O
;	O
if	O
(	O
cmillis	long
<	O
0	int
||	O
cdiv	long
<	O
0	int
||	O
crem	long
<	O
0	int
||	O
cbps	long
<	O
0	int
)	O
{	O
cbps	long
=	O
cbytes	long
/	O
(	O
csecs	long
+	O
(	O
(	O
cmicros	long
>	O
500000L	int
)	O
?	O
1	int
:	O
0	int
)	O
)	O
;	O
}	O
}	O
if	O
(	O
eLstats	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
fLstats_tried	int
)	O
return	O
;	O
fLstats_tried	int
=	O
TRUE	O
;	O
eLstats	pointer
=	O
esysdep_fopen	function
(	O
zLstatsfile	pointer
,	O
TRUE	O
,	O
TRUE	O
,	O
TRUE	O
)	O
;	O
if	O
(	O
eLstats	pointer
==	O
NULL	O
)	O
return	O
;	O
}	O
fprintf	function
(	O
eLstats	pointer
,	O
"%s %s (%s) %s%s %ld bytes in %ld.%03ld seconds (%ld bytes/sec) on port %s\n"	pointer
,	O
zuser	pointer
,	O
zsystem	pointer
,	O
zldate_and_time	function
(	O
)	O
,	O
fsucceeded	int
?	O
""	pointer
:	O
"failed after "	pointer
,	O
fsent	int
?	O
"sent"	pointer
:	O
"received"	pointer
,	O
cbytes	long
,	O
csecs	long
,	O
cmicros	long
/	O
1000	int
,	O
cbps	long
,	O
zLdevice	pointer
==	O
NULL	O
?	O
"unknown"	pointer
:	O
zLdevice	pointer
)	O
;	O
(	O
void	O
)	O
fflush	function
(	O
eLstats	pointer
)	O
;	O
}	O
void	O
ustats_close	function
(	O
)	O
{	O
if	O
(	O
eLstats	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
fclose	function
(	O
eLstats	pointer
)	O
!=	O
0	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fclose: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
eLstats	pointer
=	O
NULL	O
;	O
fLstats_tried	int
=	O
FALSE	O
;	O
}	O
}	O
static	O
const	O
char	O
*	O
zldate_and_time	function
(	O
)	O
{	O
long	O
isecs	long
,	O
imicros	long
;	O
struct	O
tm	struct
s	struct
;	O
static	O
char	O
ab	array
[	O
sizeof	O
"1991-12-31 12:00:00.00"	pointer
]	O
;	O
isecs	long
=	O
ixsysdep_time	function
(	O
&	O
imicros	long
)	O
;	O
usysdep_localtime	function
(	O
isecs	long
,	O
&	O
s	struct
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%04d-%02d-%02d %02d:%02d:%02d.%02d"	pointer
,	O
s	struct
.	O
tm_year	int
+	O
1900	int
,	O
s	struct
.	O
tm_mon	int
+	O
1	int
,	O
s	struct
.	O
tm_mday	int
,	O
s	struct
.	O
tm_hour	int
,	O
s	struct
.	O
tm_min	int
,	O
s	struct
.	O
tm_sec	int
,	O
(	O
int	O
)	O
(	O
imicros	long
/	O
10000	int
)	O
)	O
;	O
return	O
ab	array
;	O
}	O
