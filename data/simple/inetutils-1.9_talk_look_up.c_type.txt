static	O
int	O
look_for_invite	function
(	O
CTL_RESPONSE	struct
*	O
rp	pointer
)	O
{	O
current_state	pointer
=	O
"Checking for invitation on caller's machine"	pointer
;	O
ctl_transact	function
(	O
his_machine_addr	struct
,	O
msg	struct
,	O
LOOK_UP	int
,	O
rp	pointer
)	O
;	O
switch	O
(	O
rp	pointer
->	O
answer	char
)	O
{	O
case	O
SUCCESS	int
:	O
msg	struct
.	O
id_num	int
=	O
htonl	function
(	O
rp	pointer
->	O
id_num	int
)	O
;	O
return	O
(	O
1	int
)	O
;	O
default	O
:	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
int	O
check_local	function
(	O
void	O
)	O
{	O
CTL_RESPONSE	struct
response	struct
;	O
register	O
CTL_RESPONSE	struct
*	O
rp	pointer
=	O
&	O
response	struct
;	O
msg	struct
.	O
ctl_addr	struct
.	O
sa_family	short
=	O
htons	function
(	O
ctl_addr	struct
.	O
sin_family	short
)	O
;	O
memcpy	function
(	O
msg	struct
.	O
ctl_addr	struct
.	O
sa_data	array
,	O
(	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
ctl_addr	struct
)	O
->	O
sa_data	array
,	O
sizeof	O
(	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
ctl_addr	struct
)	O
->	O
sa_data	array
)	O
;	O
if	O
(	O
!	O
look_for_invite	function
(	O
rp	pointer
)	O
)	O
return	O
(	O
0	int
)	O
;	O
current_state	pointer
=	O
"Waiting to connect with caller"	pointer
;	O
do	O
{	O
if	O
(	O
rp	pointer
->	O
addr	struct
.	O
sa_family	short
!=	O
AF_INET	O
)	O
p_error	function
(	O
"Response uses invalid network address"	pointer
)	O
;	O
errno	O
=	O
0	int
;	O
if	O
(	O
connect	function
(	O
sockt	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
rp	pointer
->	O
addr	struct
,	O
sizeof	O
(	O
rp	pointer
->	O
addr	struct
)	O
)	O
!=	O
-	O
1	int
)	O
return	O
(	O
1	int
)	O
;	O
}	O
while	O
(	O
errno	O
==	O
EINTR	int
)	O
;	O
if	O
(	O
errno	O
==	O
ECONNREFUSED	int
)	O
{	O
ctl_transact	function
(	O
his_machine_addr	struct
,	O
msg	struct
,	O
DELETE	int
,	O
rp	pointer
)	O
;	O
close	function
(	O
sockt	int
)	O
;	O
open_sockt	function
(	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
p_error	function
(	O
"Unable to connect with initiator"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
