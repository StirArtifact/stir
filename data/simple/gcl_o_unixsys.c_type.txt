int	O
msystem	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
int	O
r	int
;	O
r	int
=	O
psystem	function
(	O
s	pointer
)	O
;	O
return	O
r	int
;	O
}	O
static	O
void	O
FFN	function
(	O
Lsystem	int
)	O
(	O
void	O
)	O
{	O
char	O
command	array
[	O
32768	int
]	O
;	O
int	O
i	int
;	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_string	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
vs_base	O
[	O
0	int
]	O
->	O
st	O
.	O
st_fillp	O
>=	O
32768	int
)	O
FEerror	function
(	O
"Too long command line: ~S."	pointer
,	O
1	int
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
vs_base	O
[	O
0	int
]	O
->	O
st	O
.	O
st_fillp	O
;	O
i	int
++	O
)	O
command	array
[	O
i	int
]	O
=	O
vs_base	O
[	O
0	int
]	O
->	O
st	O
.	O
st_self	O
[	O
i	int
]	O
;	O
command	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
{	O
int	O
old	int
=	O
signals_allowed	O
;	O
int	O
res	int
;	O
signals_allowed	O
=	O
sig_at_read	O
;	O
res	int
=	O
msystem	function
(	O
command	array
)	O
;	O
signals_allowed	O
=	O
old	int
;	O
vs_base	O
[	O
0	int
]	O
=	O
make_fixnum	function
(	O
res	int
>>	O
8	int
)	O
;	O
vs_base	O
[	O
1	int
]	O
=	O
make_fixnum	function
(	O
(	O
res	int
&	O
0xff	int
)	O
)	O
;	O
vs_top	O
++	O
;	O
}	O
}	O
DEFUN_NEW	function
(	O
"GETPID"	pointer
,	O
object	O
,	O
fSgetpid	O
,	O
SI	O
,	O
0	int
,	O
0	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
void	O
)	O
,	O
"getpid  returns  the  process  ID  of the current process"	pointer
)	O
{	O
return	O
make_fixnum	function
(	O
getpid	function
(	O
)	O
)	O
;	O
}	O
DEFVAR	function
(	O
"*LOAD-WITH-FREAD*"	pointer
,	O
sSAload_with_freadA	O
,	O
SI	O
,	O
Cnil	O
,	O
""	pointer
)	O
;	O
void	O
*	O
get_mmap	function
(	O
FILE	O
*	O
fp	pointer
,	O
void	O
*	O
*	O
ve	pointer
)	O
{	O
int	O
n	int
;	O
void	O
*	O
v1	pointer
;	O
struct	O
stat	struct
ss	struct
;	O
massert	function
(	O
(	O
n	int
=	O
fileno	function
(	O
fp	pointer
)	O
)	O
>	O
2	int
)	O
;	O
massert	function
(	O
!	O
fstat	function
(	O
n	int
,	O
&	O
ss	struct
)	O
)	O
;	O
if	O
(	O
sSAload_with_freadA	O
->	O
s	pointer
.	O
s_dbind	O
==	O
Cnil	O
)	O
{	O
massert	function
(	O
(	O
v1	pointer
=	O
mmap	function
(	O
0	int
,	O
ss	struct
.	O
st_size	long
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_PRIVATE	O
,	O
n	int
,	O
0	int
)	O
)	O
!=	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
;	O
}	O
else	O
{	O
massert	function
(	O
v1	pointer
=	O
malloc	function
(	O
ss	struct
.	O
st_size	long
)	O
)	O
;	O
massert	function
(	O
fread	function
(	O
v1	pointer
,	O
ss	struct
.	O
st_size	long
,	O
1	int
,	O
fp	pointer
)	O
==	O
1	int
)	O
;	O
}	O
*	O
ve	pointer
=	O
v1	pointer
+	O
ss	struct
.	O
st_size	long
;	O
return	O
v1	pointer
;	O
}	O
int	O
un_mmap	function
(	O
void	O
*	O
v1	pointer
,	O
void	O
*	O
ve	pointer
)	O
{	O
if	O
(	O
sSAload_with_freadA	O
->	O
s	pointer
.	O
s_dbind	O
==	O
Cnil	O
)	O
return	O
munmap	function
(	O
v1	pointer
,	O
ve	pointer
-	O
v1	pointer
)	O
;	O
else	O
{	O
free	function
(	O
v1	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
void	O
gcl_init_unixsys	function
(	O
void	O
)	O
{	O
make_function	function
(	O
"SYSTEM"	pointer
,	O
Lsystem	int
)	O
;	O
}	O
