static	O
unsigned	O
int	O
bfd_id_counter	int
=	O
0	int
;	O
static	O
unsigned	O
int	O
bfd_reserved_id_counter	int
=	O
0	int
;	O
unsigned	O
int	O
bfd_use_reserved_id	int
=	O
0	int
;	O
bfd	struct
*	O
_bfd_new_bfd	function
(	O
void	O
)	O
{	O
bfd	struct
*	O
nbfd	pointer
;	O
nbfd	pointer
=	O
(	O
bfd	struct
*	O
)	O
bfd_zmalloc	function
(	O
sizeof	O
(	O
bfd	struct
)	O
)	O
;	O
if	O
(	O
nbfd	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
bfd_use_reserved_id	int
)	O
{	O
nbfd	pointer
->	O
id	int
=	O
--	O
bfd_reserved_id_counter	int
;	O
--	O
bfd_use_reserved_id	int
;	O
}	O
else	O
nbfd	pointer
->	O
id	int
=	O
bfd_id_counter	int
++	O
;	O
nbfd	pointer
->	O
memory	pointer
=	O
objalloc_create	function
(	O
)	O
;	O
if	O
(	O
nbfd	pointer
->	O
memory	pointer
==	O
NULL	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
free	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	pointer
->	O
arch_info	pointer
=	O
&	O
bfd_default_arch_struct	struct
;	O
if	O
(	O
!	O
bfd_hash_table_init_n	function
(	O
&	O
nbfd	pointer
->	O
section_htab	struct
,	O
bfd_section_hash_newfunc	function
,	O
sizeof	O
(	O
struct	O
section_hash_entry	struct
)	O
,	O
13	int
)	O
)	O
{	O
free	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
nbfd	pointer
;	O
}	O
static	O
const	O
struct	O
bfd_iovec	struct
opncls_iovec	struct
;	O
bfd	struct
*	O
_bfd_new_bfd_contained_in	function
(	O
bfd	struct
*	O
obfd	pointer
)	O
{	O
bfd	struct
*	O
nbfd	pointer
;	O
nbfd	pointer
=	O
_bfd_new_bfd	function
(	O
)	O
;	O
if	O
(	O
nbfd	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
nbfd	pointer
->	O
xvec	pointer
=	O
obfd	pointer
->	O
xvec	pointer
;	O
nbfd	pointer
->	O
iovec	struct
=	O
obfd	pointer
->	O
iovec	struct
;	O
if	O
(	O
obfd	pointer
->	O
iovec	struct
==	O
&	O
opncls_iovec	struct
)	O
nbfd	pointer
->	O
iostream	pointer
=	O
obfd	pointer
->	O
iostream	pointer
;	O
nbfd	pointer
->	O
my_archive	pointer
=	O
obfd	pointer
;	O
nbfd	pointer
->	O
direction	enum
=	O
read_direction	int
;	O
nbfd	pointer
->	O
target_defaulted	int
=	O
obfd	pointer
->	O
target_defaulted	int
;	O
nbfd	pointer
->	O
lto_output	int
=	O
obfd	pointer
->	O
lto_output	int
;	O
nbfd	pointer
->	O
no_export	int
=	O
obfd	pointer
->	O
no_export	int
;	O
return	O
nbfd	pointer
;	O
}	O
static	O
void	O
_bfd_delete_bfd	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
if	O
(	O
abfd	pointer
->	O
memory	pointer
)	O
{	O
bfd_hash_table_free	function
(	O
&	O
abfd	pointer
->	O
section_htab	struct
)	O
;	O
objalloc_free	function
(	O
(	O
struct	O
objalloc	struct
*	O
)	O
abfd	pointer
->	O
memory	pointer
)	O
;	O
}	O
if	O
(	O
abfd	pointer
->	O
filename	pointer
)	O
free	function
(	O
(	O
char	O
*	O
)	O
abfd	pointer
->	O
filename	pointer
)	O
;	O
free	function
(	O
abfd	pointer
->	O
arelt_data	pointer
)	O
;	O
free	function
(	O
abfd	pointer
)	O
;	O
}	O
bfd_boolean	int
_bfd_free_cached_info	pointer
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
if	O
(	O
abfd	pointer
->	O
memory	pointer
)	O
{	O
bfd_hash_table_free	function
(	O
&	O
abfd	pointer
->	O
section_htab	struct
)	O
;	O
objalloc_free	function
(	O
(	O
struct	O
objalloc	struct
*	O
)	O
abfd	pointer
->	O
memory	pointer
)	O
;	O
abfd	pointer
->	O
sections	pointer
=	O
NULL	O
;	O
abfd	pointer
->	O
section_last	pointer
=	O
NULL	O
;	O
abfd	pointer
->	O
outsymbols	pointer
=	O
NULL	O
;	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
=	O
NULL	O
;	O
abfd	pointer
->	O
usrdata	pointer
=	O
NULL	O
;	O
abfd	pointer
->	O
memory	pointer
=	O
NULL	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
bfd	struct
*	O
bfd_fopen	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
target	pointer
,	O
const	O
char	O
*	O
mode	pointer
,	O
int	O
fd	int
)	O
{	O
bfd	struct
*	O
nbfd	pointer
;	O
const	O
bfd_target	struct
*	O
target_vec	pointer
;	O
nbfd	pointer
=	O
_bfd_new_bfd	function
(	O
)	O
;	O
if	O
(	O
nbfd	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
fd	int
!=	O
-	O
1	int
)	O
close	pointer
(	O
fd	int
)	O
;	O
return	O
NULL	O
;	O
}	O
target_vec	pointer
=	O
bfd_find_target	function
(	O
target	pointer
,	O
nbfd	pointer
)	O
;	O
if	O
(	O
target_vec	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
fd	int
!=	O
-	O
1	int
)	O
close	pointer
(	O
fd	int
)	O
;	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
fd	int
!=	O
-	O
1	int
)	O
nbfd	pointer
->	O
iostream	pointer
=	O
fdopen	function
(	O
fd	int
,	O
mode	pointer
)	O
;	O
else	O
nbfd	pointer
->	O
iostream	pointer
=	O
_bfd_real_fopen	function
(	O
filename	pointer
,	O
mode	pointer
)	O
;	O
if	O
(	O
nbfd	pointer
->	O
iostream	pointer
==	O
NULL	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
if	O
(	O
fd	int
!=	O
-	O
1	int
)	O
close	pointer
(	O
fd	int
)	O
;	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	pointer
->	O
filename	pointer
=	O
bfd_strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
nbfd	pointer
->	O
filename	pointer
==	O
NULL	O
)	O
{	O
fclose	function
(	O
nbfd	pointer
->	O
iostream	pointer
)	O
;	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
mode	pointer
[	O
0	int
]	O
==	O
'r'	O
||	O
mode	pointer
[	O
0	int
]	O
==	O
'w'	O
||	O
mode	pointer
[	O
0	int
]	O
==	O
'a'	O
)	O
&&	O
mode	pointer
[	O
1	int
]	O
==	O
'+'	O
)	O
nbfd	pointer
->	O
direction	enum
=	O
both_direction	int
;	O
else	O
if	O
(	O
mode	pointer
[	O
0	int
]	O
==	O
'r'	O
)	O
nbfd	pointer
->	O
direction	enum
=	O
read_direction	int
;	O
else	O
nbfd	pointer
->	O
direction	enum
=	O
write_direction	int
;	O
if	O
(	O
!	O
bfd_cache_init	function
(	O
nbfd	pointer
)	O
)	O
{	O
fclose	function
(	O
nbfd	pointer
->	O
iostream	pointer
)	O
;	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	pointer
->	O
opened_once	int
=	O
TRUE	int
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
(	O
void	O
)	O
bfd_set_cacheable	function
(	O
nbfd	pointer
,	O
TRUE	int
)	O
;	O
return	O
nbfd	pointer
;	O
}	O
bfd	struct
*	O
bfd_openr	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
target	pointer
)	O
{	O
return	O
bfd_fopen	function
(	O
filename	pointer
,	O
target	pointer
,	O
FOPEN_RB	pointer
,	O
-	O
1	int
)	O
;	O
}	O
bfd	struct
*	O
bfd_fdopenr	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
target	pointer
,	O
int	O
fd	int
)	O
{	O
const	O
char	O
*	O
mode	pointer
;	O
int	O
fdflags	int
;	O
fdflags	int
=	O
fcntl	function
(	O
fd	int
,	O
F_GETFL	int
,	O
NULL	O
)	O
;	O
if	O
(	O
fdflags	int
==	O
-	O
1	int
)	O
{	O
int	O
save	int
=	O
errno	O
;	O
close	pointer
(	O
fd	int
)	O
;	O
errno	O
=	O
save	int
;	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
return	O
NULL	O
;	O
}	O
switch	O
(	O
fdflags	int
&	O
(	O
O_ACCMODE	int
)	O
)	O
{	O
case	O
O_RDONLY	int
:	O
mode	pointer
=	O
FOPEN_RB	pointer
;	O
break	O
;	O
case	O
O_WRONLY	int
:	O
mode	pointer
=	O
FOPEN_RUB	pointer
;	O
break	O
;	O
case	O
O_RDWR	int
:	O
mode	pointer
=	O
FOPEN_RUB	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
return	O
bfd_fopen	function
(	O
filename	pointer
,	O
target	pointer
,	O
mode	pointer
,	O
fd	int
)	O
;	O
}	O
bfd	struct
*	O
bfd_openstreamr	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
target	pointer
,	O
void	O
*	O
streamarg	pointer
)	O
{	O
FILE	struct
*	O
stream	pointer
=	O
(	O
FILE	struct
*	O
)	O
streamarg	pointer
;	O
bfd	struct
*	O
nbfd	pointer
;	O
const	O
bfd_target	struct
*	O
target_vec	pointer
;	O
nbfd	pointer
=	O
_bfd_new_bfd	function
(	O
)	O
;	O
if	O
(	O
nbfd	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target_vec	pointer
=	O
bfd_find_target	function
(	O
target	pointer
,	O
nbfd	pointer
)	O
;	O
if	O
(	O
target_vec	pointer
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	pointer
->	O
iostream	pointer
=	O
stream	pointer
;	O
nbfd	pointer
->	O
filename	pointer
=	O
bfd_strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
nbfd	pointer
->	O
filename	pointer
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	pointer
->	O
direction	enum
=	O
read_direction	int
;	O
if	O
(	O
!	O
bfd_cache_init	function
(	O
nbfd	pointer
)	O
)	O
{	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
nbfd	pointer
;	O
}	O
struct	O
opncls	struct
{	O
void	O
*	O
stream	pointer
;	O
file_ptr	long
(	O
*	O
pread	function
)	O
(	O
struct	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
stream	pointer
,	O
void	O
*	O
buf	pointer
,	O
file_ptr	long
nbytes	long
,	O
file_ptr	long
offset	long
)	O
;	O
int	O
(	O
*	O
close	pointer
)	O
(	O
struct	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
stream	pointer
)	O
;	O
int	O
(	O
*	O
stat	struct
)	O
(	O
struct	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
stream	pointer
,	O
struct	O
stat	struct
*	O
sb	pointer
)	O
;	O
file_ptr	long
where	long
;	O
}	O
;	O
static	O
file_ptr	long
opncls_btell	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
struct	O
opncls	struct
*	O
vec	pointer
=	O
(	O
struct	O
opncls	struct
*	O
)	O
abfd	pointer
->	O
iostream	pointer
;	O
return	O
vec	pointer
->	O
where	long
;	O
}	O
static	O
int	O
opncls_bseek	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
,	O
file_ptr	long
offset	long
,	O
int	O
whence	int
)	O
{	O
struct	O
opncls	struct
*	O
vec	pointer
=	O
(	O
struct	O
opncls	struct
*	O
)	O
abfd	pointer
->	O
iostream	pointer
;	O
switch	O
(	O
whence	int
)	O
{	O
case	O
SEEK_SET	int
:	O
vec	pointer
->	O
where	long
=	O
offset	long
;	O
break	O
;	O
case	O
SEEK_CUR	int
:	O
vec	pointer
->	O
where	long
+=	O
offset	long
;	O
break	O
;	O
case	O
SEEK_END	int
:	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
file_ptr	long
opncls_bread	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
buf	pointer
,	O
file_ptr	long
nbytes	long
)	O
{	O
struct	O
opncls	struct
*	O
vec	pointer
=	O
(	O
struct	O
opncls	struct
*	O
)	O
abfd	pointer
->	O
iostream	pointer
;	O
file_ptr	long
nread	long
=	O
(	O
vec	pointer
->	O
pread	function
)	O
(	O
abfd	pointer
,	O
vec	pointer
->	O
stream	pointer
,	O
buf	pointer
,	O
nbytes	long
,	O
vec	pointer
->	O
where	long
)	O
;	O
if	O
(	O
nread	long
<	O
0	int
)	O
return	O
nread	long
;	O
vec	pointer
->	O
where	long
+=	O
nread	long
;	O
return	O
nread	long
;	O
}	O
static	O
file_ptr	long
opncls_bwrite	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
const	O
void	O
*	O
where	long
ATTRIBUTE_UNUSED	O
,	O
file_ptr	long
nbytes	long
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
opncls_bclose	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
struct	O
opncls	struct
*	O
vec	pointer
=	O
(	O
struct	O
opncls	struct
*	O
)	O
abfd	pointer
->	O
iostream	pointer
;	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
vec	pointer
->	O
close	pointer
!=	O
NULL	O
)	O
status	int
=	O
(	O
vec	pointer
->	O
close	pointer
)	O
(	O
abfd	pointer
,	O
vec	pointer
->	O
stream	pointer
)	O
;	O
abfd	pointer
->	O
iostream	pointer
=	O
NULL	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
opncls_bflush	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
opncls_bstat	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
stat	struct
*	O
sb	pointer
)	O
{	O
struct	O
opncls	struct
*	O
vec	pointer
=	O
(	O
struct	O
opncls	struct
*	O
)	O
abfd	pointer
->	O
iostream	pointer
;	O
memset	function
(	O
sb	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
sb	pointer
)	O
)	O
;	O
if	O
(	O
vec	pointer
->	O
stat	struct
==	O
NULL	O
)	O
return	O
0	int
;	O
return	O
(	O
vec	pointer
->	O
stat	struct
)	O
(	O
abfd	pointer
,	O
vec	pointer
->	O
stream	pointer
,	O
sb	pointer
)	O
;	O
}	O
static	O
void	O
*	O
opncls_bmmap	function
(	O
struct	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
addr	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd_size_type	long
len	long
ATTRIBUTE_UNUSED	O
,	O
int	O
prot	int
ATTRIBUTE_UNUSED	O
,	O
int	O
flags	int
ATTRIBUTE_UNUSED	O
,	O
file_ptr	long
offset	long
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
*	O
map_addr	pointer
ATTRIBUTE_UNUSED	O
,	O
bfd_size_type	long
*	O
map_len	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
(	O
void	O
*	O
)	O
-	O
1	int
;	O
}	O
static	O
const	O
struct	O
bfd_iovec	struct
opncls_iovec	struct
=	O
{	O
&	O
opncls_bread	function
,	O
&	O
opncls_bwrite	function
,	O
&	O
opncls_btell	function
,	O
&	O
opncls_bseek	function
,	O
&	O
opncls_bclose	function
,	O
&	O
opncls_bflush	function
,	O
&	O
opncls_bstat	function
,	O
&	O
opncls_bmmap	function
}	O
;	O
bfd	struct
*	O
bfd_openr_iovec	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
target	pointer
,	O
void	O
*	O
(	O
*	O
open_p	pointer
)	O
(	O
struct	O
bfd	struct
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
open_closure	pointer
,	O
file_ptr	long
(	O
*	O
pread_p	pointer
)	O
(	O
struct	O
bfd	struct
*	O
,	O
void	O
*	O
,	O
void	O
*	O
,	O
file_ptr	long
,	O
file_ptr	long
)	O
,	O
int	O
(	O
*	O
close_p	pointer
)	O
(	O
struct	O
bfd	struct
*	O
,	O
void	O
*	O
)	O
,	O
int	O
(	O
*	O
stat_p	pointer
)	O
(	O
struct	O
bfd	struct
*	O
,	O
void	O
*	O
,	O
struct	O
stat	struct
*	O
)	O
)	O
{	O
bfd	struct
*	O
nbfd	pointer
;	O
const	O
bfd_target	struct
*	O
target_vec	pointer
;	O
struct	O
opncls	struct
*	O
vec	pointer
;	O
void	O
*	O
stream	pointer
;	O
nbfd	pointer
=	O
_bfd_new_bfd	function
(	O
)	O
;	O
if	O
(	O
nbfd	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target_vec	pointer
=	O
bfd_find_target	function
(	O
target	pointer
,	O
nbfd	pointer
)	O
;	O
if	O
(	O
target_vec	pointer
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	pointer
->	O
filename	pointer
=	O
bfd_strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
nbfd	pointer
->	O
filename	pointer
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	pointer
->	O
direction	enum
=	O
read_direction	int
;	O
stream	pointer
=	O
(	O
*	O
open_p	pointer
)	O
(	O
nbfd	pointer
,	O
open_closure	pointer
)	O
;	O
if	O
(	O
stream	pointer
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
vec	pointer
=	O
(	O
struct	O
opncls	struct
*	O
)	O
bfd_zalloc	function
(	O
nbfd	pointer
,	O
sizeof	O
(	O
struct	O
opncls	struct
)	O
)	O
;	O
vec	pointer
->	O
stream	pointer
=	O
stream	pointer
;	O
vec	pointer
->	O
pread	function
=	O
pread_p	pointer
;	O
vec	pointer
->	O
close	pointer
=	O
close_p	pointer
;	O
vec	pointer
->	O
stat	struct
=	O
stat_p	pointer
;	O
nbfd	pointer
->	O
iovec	struct
=	O
&	O
opncls_iovec	struct
;	O
nbfd	pointer
->	O
iostream	pointer
=	O
vec	pointer
;	O
return	O
nbfd	pointer
;	O
}	O
bfd	struct
*	O
bfd_openw	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
target	pointer
)	O
{	O
bfd	struct
*	O
nbfd	pointer
;	O
const	O
bfd_target	struct
*	O
target_vec	pointer
;	O
nbfd	pointer
=	O
_bfd_new_bfd	function
(	O
)	O
;	O
if	O
(	O
nbfd	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target_vec	pointer
=	O
bfd_find_target	function
(	O
target	pointer
,	O
nbfd	pointer
)	O
;	O
if	O
(	O
target_vec	pointer
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	pointer
->	O
filename	pointer
=	O
bfd_strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
nbfd	pointer
->	O
filename	pointer
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	pointer
->	O
direction	enum
=	O
write_direction	int
;	O
if	O
(	O
bfd_open_file	function
(	O
nbfd	pointer
)	O
==	O
NULL	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
nbfd	pointer
;	O
}	O
static	O
inline	O
void	O
_maybe_make_executable	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
if	O
(	O
abfd	pointer
->	O
direction	enum
==	O
write_direction	int
&&	O
(	O
abfd	pointer
->	O
flags	int
&	O
(	O
EXEC_P	int
|	O
DYNAMIC	int
)	O
)	O
!=	O
0	int
)	O
{	O
struct	O
stat	struct
buf	pointer
;	O
if	O
(	O
stat	struct
(	O
abfd	pointer
->	O
filename	pointer
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
S_ISREG	O
(	O
buf	pointer
.	O
st_mode	int
)	O
)	O
{	O
unsigned	O
int	O
mask	int
=	O
umask	function
(	O
0	int
)	O
;	O
umask	function
(	O
mask	int
)	O
;	O
chmod	function
(	O
abfd	pointer
->	O
filename	pointer
,	O
(	O
0777	int
&	O
(	O
buf	pointer
.	O
st_mode	int
|	O
(	O
(	O
S_IXUSR	O
|	O
S_IXGRP	O
|	O
S_IXOTH	O
)	O
&	O
~	O
mask	int
)	O
)	O
)	O
)	O
;	O
}	O
}	O
}	O
bfd_boolean	int
bfd_close	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
if	O
(	O
bfd_write_p	O
(	O
abfd	pointer
)	O
)	O
{	O
if	O
(	O
!	O
BFD_SEND_FMT	O
(	O
abfd	pointer
,	O
_bfd_write_contents	array
,	O
(	O
abfd	pointer
)	O
)	O
)	O
return	O
FALSE	int
;	O
}	O
return	O
bfd_close_all_done	function
(	O
abfd	pointer
)	O
;	O
}	O
bfd_boolean	int
bfd_close_all_done	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
bfd_boolean	int
ret	pointer
;	O
if	O
(	O
!	O
BFD_SEND	O
(	O
abfd	pointer
,	O
_close_and_cleanup	pointer
,	O
(	O
abfd	pointer
)	O
)	O
)	O
return	O
FALSE	int
;	O
ret	pointer
=	O
abfd	pointer
->	O
iovec	struct
->	O
bclose	pointer
(	O
abfd	pointer
)	O
==	O
0	int
;	O
if	O
(	O
ret	pointer
)	O
_maybe_make_executable	function
(	O
abfd	pointer
)	O
;	O
_bfd_delete_bfd	function
(	O
abfd	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
bfd	struct
*	O
bfd_create	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
bfd	struct
*	O
templ	pointer
)	O
{	O
bfd	struct
*	O
nbfd	pointer
;	O
nbfd	pointer
=	O
_bfd_new_bfd	function
(	O
)	O
;	O
if	O
(	O
nbfd	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
nbfd	pointer
->	O
filename	pointer
=	O
bfd_strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
nbfd	pointer
->	O
filename	pointer
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	function
(	O
nbfd	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
templ	pointer
)	O
nbfd	pointer
->	O
xvec	pointer
=	O
templ	pointer
->	O
xvec	pointer
;	O
nbfd	pointer
->	O
direction	enum
=	O
no_direction	int
;	O
bfd_set_format	function
(	O
nbfd	pointer
,	O
bfd_object	int
)	O
;	O
return	O
nbfd	pointer
;	O
}	O
bfd_boolean	int
bfd_make_writable	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
struct	O
bfd_in_memory	struct
*	O
bim	pointer
;	O
if	O
(	O
abfd	pointer
->	O
direction	enum
!=	O
no_direction	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
bim	pointer
=	O
(	O
struct	O
bfd_in_memory	struct
*	O
)	O
bfd_malloc	function
(	O
sizeof	O
(	O
struct	O
bfd_in_memory	struct
)	O
)	O
;	O
if	O
(	O
bim	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
abfd	pointer
->	O
iostream	pointer
=	O
bim	pointer
;	O
bim	pointer
->	O
size	long
=	O
0	int
;	O
bim	pointer
->	O
buffer	pointer
=	O
0	int
;	O
abfd	pointer
->	O
flags	int
|=	O
BFD_IN_MEMORY	int
;	O
abfd	pointer
->	O
iovec	struct
=	O
&	O
_bfd_memory_iovec	struct
;	O
abfd	pointer
->	O
origin	long
=	O
0	int
;	O
abfd	pointer
->	O
direction	enum
=	O
write_direction	int
;	O
abfd	pointer
->	O
where	long
=	O
0	int
;	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
bfd_make_readable	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
if	O
(	O
abfd	pointer
->	O
direction	enum
!=	O
write_direction	int
||	O
!	O
(	O
abfd	pointer
->	O
flags	int
&	O
BFD_IN_MEMORY	int
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
!	O
BFD_SEND_FMT	O
(	O
abfd	pointer
,	O
_bfd_write_contents	array
,	O
(	O
abfd	pointer
)	O
)	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
BFD_SEND	O
(	O
abfd	pointer
,	O
_close_and_cleanup	pointer
,	O
(	O
abfd	pointer
)	O
)	O
)	O
return	O
FALSE	int
;	O
abfd	pointer
->	O
arch_info	pointer
=	O
&	O
bfd_default_arch_struct	struct
;	O
abfd	pointer
->	O
where	long
=	O
0	int
;	O
abfd	pointer
->	O
format	enum
=	O
bfd_unknown	int
;	O
abfd	pointer
->	O
my_archive	pointer
=	O
NULL	O
;	O
abfd	pointer
->	O
origin	long
=	O
0	int
;	O
abfd	pointer
->	O
opened_once	int
=	O
FALSE	int
;	O
abfd	pointer
->	O
output_has_begun	int
=	O
FALSE	int
;	O
abfd	pointer
->	O
section_count	int
=	O
0	int
;	O
abfd	pointer
->	O
usrdata	pointer
=	O
NULL	O
;	O
abfd	pointer
->	O
cacheable	int
=	O
FALSE	int
;	O
abfd	pointer
->	O
flags	int
|=	O
BFD_IN_MEMORY	int
;	O
abfd	pointer
->	O
mtime_set	int
=	O
FALSE	int
;	O
abfd	pointer
->	O
target_defaulted	int
=	O
TRUE	int
;	O
abfd	pointer
->	O
direction	enum
=	O
read_direction	int
;	O
abfd	pointer
->	O
sections	pointer
=	O
0	int
;	O
abfd	pointer
->	O
symcount	int
=	O
0	int
;	O
abfd	pointer
->	O
outsymbols	pointer
=	O
0	int
;	O
abfd	pointer
->	O
tdata	union
.	O
any	pointer
=	O
0	int
;	O
bfd_section_list_clear	function
(	O
abfd	pointer
)	O
;	O
bfd_check_format	function
(	O
abfd	pointer
,	O
bfd_object	int
)	O
;	O
return	O
TRUE	int
;	O
}	O
void	O
*	O
bfd_alloc	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_size_type	long
size	long
)	O
{	O
void	O
*	O
ret	pointer
;	O
unsigned	O
long	O
ul_size	long
=	O
(	O
unsigned	O
long	O
)	O
size	long
;	O
if	O
(	O
size	long
!=	O
ul_size	long
||	O
(	O
(	O
signed	O
long	O
)	O
ul_size	long
)	O
<	O
0	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
NULL	O
;	O
}	O
ret	pointer
=	O
objalloc_alloc	O
(	O
(	O
struct	O
objalloc	struct
*	O
)	O
abfd	pointer
->	O
memory	pointer
,	O
ul_size	long
)	O
;	O
if	O
(	O
ret	pointer
==	O
NULL	O
)	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
ret	pointer
;	O
}	O
void	O
*	O
bfd_alloc2	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_size_type	long
nmemb	long
,	O
bfd_size_type	long
size	long
)	O
{	O
if	O
(	O
(	O
nmemb	long
|	O
size	long
)	O
>=	O
HALF_BFD_SIZE_TYPE	O
&&	O
size	long
!=	O
0	int
&&	O
nmemb	long
>	O
~	O
(	O
bfd_size_type	long
)	O
0	int
/	O
size	long
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
bfd_alloc	function
(	O
abfd	pointer
,	O
size	long
*	O
nmemb	long
)	O
;	O
}	O
void	O
*	O
bfd_zalloc	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_size_type	long
size	long
)	O
{	O
void	O
*	O
res	pointer
;	O
res	pointer
=	O
bfd_alloc	function
(	O
abfd	pointer
,	O
size	long
)	O
;	O
if	O
(	O
res	pointer
)	O
memset	function
(	O
res	pointer
,	O
0	int
,	O
(	O
size_t	long
)	O
size	long
)	O
;	O
return	O
res	pointer
;	O
}	O
void	O
*	O
bfd_zalloc2	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_size_type	long
nmemb	long
,	O
bfd_size_type	long
size	long
)	O
{	O
void	O
*	O
res	pointer
;	O
if	O
(	O
(	O
nmemb	long
|	O
size	long
)	O
>=	O
HALF_BFD_SIZE_TYPE	O
&&	O
size	long
!=	O
0	int
&&	O
nmemb	long
>	O
~	O
(	O
bfd_size_type	long
)	O
0	int
/	O
size	long
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
NULL	O
;	O
}	O
size	long
*=	O
nmemb	long
;	O
res	pointer
=	O
bfd_alloc	function
(	O
abfd	pointer
,	O
size	long
)	O
;	O
if	O
(	O
res	pointer
)	O
memset	function
(	O
res	pointer
,	O
0	int
,	O
(	O
size_t	long
)	O
size	long
)	O
;	O
return	O
res	pointer
;	O
}	O
void	O
bfd_release	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
block	pointer
)	O
{	O
objalloc_free_block	function
(	O
(	O
struct	O
objalloc	struct
*	O
)	O
abfd	pointer
->	O
memory	pointer
,	O
block	pointer
)	O
;	O
}	O
unsigned	O
long	O
bfd_calc_gnu_debuglink_crc32	function
(	O
unsigned	O
long	O
crc	long
,	O
const	O
unsigned	O
char	O
*	O
buf	pointer
,	O
bfd_size_type	long
len	long
)	O
{	O
static	O
const	O
unsigned	O
long	O
crc32_table	array
[	O
256	int
]	O
=	O
{	O
0x00000000	int
,	O
0x77073096	int
,	O
0xee0e612c	int
,	O
0x990951ba	int
,	O
0x076dc419	int
,	O
0x706af48f	int
,	O
0xe963a535	int
,	O
0x9e6495a3	int
,	O
0x0edb8832	int
,	O
0x79dcb8a4	int
,	O
0xe0d5e91e	int
,	O
0x97d2d988	int
,	O
0x09b64c2b	int
,	O
0x7eb17cbd	int
,	O
0xe7b82d07	int
,	O
0x90bf1d91	int
,	O
0x1db71064	int
,	O
0x6ab020f2	int
,	O
0xf3b97148	int
,	O
0x84be41de	int
,	O
0x1adad47d	int
,	O
0x6ddde4eb	int
,	O
0xf4d4b551	int
,	O
0x83d385c7	int
,	O
0x136c9856	int
,	O
0x646ba8c0	int
,	O
0xfd62f97a	int
,	O
0x8a65c9ec	int
,	O
0x14015c4f	int
,	O
0x63066cd9	int
,	O
0xfa0f3d63	int
,	O
0x8d080df5	int
,	O
0x3b6e20c8	int
,	O
0x4c69105e	int
,	O
0xd56041e4	int
,	O
0xa2677172	int
,	O
0x3c03e4d1	int
,	O
0x4b04d447	int
,	O
0xd20d85fd	int
,	O
0xa50ab56b	int
,	O
0x35b5a8fa	int
,	O
0x42b2986c	int
,	O
0xdbbbc9d6	int
,	O
0xacbcf940	int
,	O
0x32d86ce3	int
,	O
0x45df5c75	int
,	O
0xdcd60dcf	int
,	O
0xabd13d59	int
,	O
0x26d930ac	int
,	O
0x51de003a	int
,	O
0xc8d75180	int
,	O
0xbfd06116	int
,	O
0x21b4f4b5	int
,	O
0x56b3c423	int
,	O
0xcfba9599	int
,	O
0xb8bda50f	int
,	O
0x2802b89e	int
,	O
0x5f058808	int
,	O
0xc60cd9b2	int
,	O
0xb10be924	int
,	O
0x2f6f7c87	int
,	O
0x58684c11	int
,	O
0xc1611dab	int
,	O
0xb6662d3d	int
,	O
0x76dc4190	int
,	O
0x01db7106	int
,	O
0x98d220bc	int
,	O
0xefd5102a	int
,	O
0x71b18589	int
,	O
0x06b6b51f	int
,	O
0x9fbfe4a5	int
,	O
0xe8b8d433	int
,	O
0x7807c9a2	int
,	O
0x0f00f934	int
,	O
0x9609a88e	int
,	O
0xe10e9818	int
,	O
0x7f6a0dbb	int
,	O
0x086d3d2d	int
,	O
0x91646c97	int
,	O
0xe6635c01	int
,	O
0x6b6b51f4	int
,	O
0x1c6c6162	int
,	O
0x856530d8	int
,	O
0xf262004e	int
,	O
0x6c0695ed	int
,	O
0x1b01a57b	int
,	O
0x8208f4c1	int
,	O
0xf50fc457	int
,	O
0x65b0d9c6	int
,	O
0x12b7e950	int
,	O
0x8bbeb8ea	int
,	O
0xfcb9887c	int
,	O
0x62dd1ddf	int
,	O
0x15da2d49	int
,	O
0x8cd37cf3	int
,	O
0xfbd44c65	int
,	O
0x4db26158	int
,	O
0x3ab551ce	int
,	O
0xa3bc0074	int
,	O
0xd4bb30e2	int
,	O
0x4adfa541	int
,	O
0x3dd895d7	int
,	O
0xa4d1c46d	int
,	O
0xd3d6f4fb	int
,	O
0x4369e96a	int
,	O
0x346ed9fc	int
,	O
0xad678846	int
,	O
0xda60b8d0	int
,	O
0x44042d73	int
,	O
0x33031de5	int
,	O
0xaa0a4c5f	int
,	O
0xdd0d7cc9	int
,	O
0x5005713c	int
,	O
0x270241aa	int
,	O
0xbe0b1010	int
,	O
0xc90c2086	int
,	O
0x5768b525	int
,	O
0x206f85b3	int
,	O
0xb966d409	int
,	O
0xce61e49f	int
,	O
0x5edef90e	int
,	O
0x29d9c998	int
,	O
0xb0d09822	int
,	O
0xc7d7a8b4	int
,	O
0x59b33d17	int
,	O
0x2eb40d81	int
,	O
0xb7bd5c3b	int
,	O
0xc0ba6cad	int
,	O
0xedb88320	int
,	O
0x9abfb3b6	int
,	O
0x03b6e20c	int
,	O
0x74b1d29a	int
,	O
0xead54739	int
,	O
0x9dd277af	int
,	O
0x04db2615	int
,	O
0x73dc1683	int
,	O
0xe3630b12	int
,	O
0x94643b84	int
,	O
0x0d6d6a3e	int
,	O
0x7a6a5aa8	int
,	O
0xe40ecf0b	int
,	O
0x9309ff9d	int
,	O
0x0a00ae27	int
,	O
0x7d079eb1	int
,	O
0xf00f9344	int
,	O
0x8708a3d2	int
,	O
0x1e01f268	int
,	O
0x6906c2fe	int
,	O
0xf762575d	int
,	O
0x806567cb	int
,	O
0x196c3671	int
,	O
0x6e6b06e7	int
,	O
0xfed41b76	int
,	O
0x89d32be0	int
,	O
0x10da7a5a	int
,	O
0x67dd4acc	int
,	O
0xf9b9df6f	int
,	O
0x8ebeeff9	int
,	O
0x17b7be43	int
,	O
0x60b08ed5	int
,	O
0xd6d6a3e8	int
,	O
0xa1d1937e	int
,	O
0x38d8c2c4	int
,	O
0x4fdff252	int
,	O
0xd1bb67f1	int
,	O
0xa6bc5767	int
,	O
0x3fb506dd	int
,	O
0x48b2364b	int
,	O
0xd80d2bda	int
,	O
0xaf0a1b4c	int
,	O
0x36034af6	int
,	O
0x41047a60	int
,	O
0xdf60efc3	int
,	O
0xa867df55	int
,	O
0x316e8eef	int
,	O
0x4669be79	int
,	O
0xcb61b38c	int
,	O
0xbc66831a	int
,	O
0x256fd2a0	int
,	O
0x5268e236	int
,	O
0xcc0c7795	int
,	O
0xbb0b4703	int
,	O
0x220216b9	int
,	O
0x5505262f	int
,	O
0xc5ba3bbe	int
,	O
0xb2bd0b28	int
,	O
0x2bb45a92	int
,	O
0x5cb36a04	int
,	O
0xc2d7ffa7	int
,	O
0xb5d0cf31	int
,	O
0x2cd99e8b	int
,	O
0x5bdeae1d	int
,	O
0x9b64c2b0	int
,	O
0xec63f226	int
,	O
0x756aa39c	int
,	O
0x026d930a	int
,	O
0x9c0906a9	int
,	O
0xeb0e363f	int
,	O
0x72076785	int
,	O
0x05005713	int
,	O
0x95bf4a82	int
,	O
0xe2b87a14	int
,	O
0x7bb12bae	int
,	O
0x0cb61b38	int
,	O
0x92d28e9b	int
,	O
0xe5d5be0d	int
,	O
0x7cdcefb7	int
,	O
0x0bdbdf21	int
,	O
0x86d3d2d4	int
,	O
0xf1d4e242	int
,	O
0x68ddb3f8	int
,	O
0x1fda836e	int
,	O
0x81be16cd	int
,	O
0xf6b9265b	int
,	O
0x6fb077e1	int
,	O
0x18b74777	int
,	O
0x88085ae6	int
,	O
0xff0f6a70	int
,	O
0x66063bca	int
,	O
0x11010b5c	int
,	O
0x8f659eff	int
,	O
0xf862ae69	int
,	O
0x616bffd3	int
,	O
0x166ccf45	int
,	O
0xa00ae278	int
,	O
0xd70dd2ee	int
,	O
0x4e048354	int
,	O
0x3903b3c2	int
,	O
0xa7672661	int
,	O
0xd06016f7	int
,	O
0x4969474d	int
,	O
0x3e6e77db	int
,	O
0xaed16a4a	int
,	O
0xd9d65adc	int
,	O
0x40df0b66	int
,	O
0x37d83bf0	int
,	O
0xa9bcae53	int
,	O
0xdebb9ec5	int
,	O
0x47b2cf7f	int
,	O
0x30b5ffe9	int
,	O
0xbdbdf21c	int
,	O
0xcabac28a	int
,	O
0x53b39330	int
,	O
0x24b4a3a6	int
,	O
0xbad03605	int
,	O
0xcdd70693	int
,	O
0x54de5729	int
,	O
0x23d967bf	int
,	O
0xb3667a2e	int
,	O
0xc4614ab8	int
,	O
0x5d681b02	int
,	O
0x2a6f2b94	int
,	O
0xb40bbe37	int
,	O
0xc30c8ea1	int
,	O
0x5a05df1b	int
,	O
0x2d02ef8d	int
}	O
;	O
const	O
unsigned	O
char	O
*	O
end	pointer
;	O
crc	long
=	O
~	O
crc	long
&	O
0xffffffff	int
;	O
for	O
(	O
end	pointer
=	O
buf	pointer
+	O
len	long
;	O
buf	pointer
<	O
end	pointer
;	O
++	O
buf	pointer
)	O
crc	long
=	O
crc32_table	array
[	O
(	O
crc	long
^	O
*	O
buf	pointer
)	O
&	O
0xff	int
]	O
^	O
(	O
crc	long
>>	O
8	int
)	O
;	O
return	O
~	O
crc	long
&	O
0xffffffff	int
;	O
}	O
static	O
char	O
*	O
bfd_get_debug_link_info_1	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
crc32_out	pointer
)	O
{	O
asection	struct
*	O
sect	pointer
;	O
unsigned	O
long	O
*	O
crc32	pointer
=	O
(	O
unsigned	O
long	O
*	O
)	O
crc32_out	pointer
;	O
bfd_byte	char
*	O
contents	pointer
;	O
unsigned	O
int	O
crc_offset	int
;	O
char	O
*	O
name	pointer
;	O
bfd_size_type	long
size	long
;	O
BFD_ASSERT	O
(	O
abfd	pointer
)	O
;	O
BFD_ASSERT	O
(	O
crc32_out	pointer
)	O
;	O
sect	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
GNU_DEBUGLINK	pointer
)	O
;	O
if	O
(	O
sect	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
size	long
=	O
bfd_section_size	function
(	O
sect	pointer
)	O
;	O
if	O
(	O
size	long
<	O
8	int
||	O
size	long
>=	O
bfd_get_size	function
(	O
abfd	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
bfd_malloc_and_get_section	function
(	O
abfd	pointer
,	O
sect	pointer
,	O
&	O
contents	pointer
)	O
)	O
{	O
if	O
(	O
contents	pointer
!=	O
NULL	O
)	O
free	function
(	O
contents	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
name	pointer
=	O
(	O
char	O
*	O
)	O
contents	pointer
;	O
crc_offset	int
=	O
strnlen	function
(	O
name	pointer
,	O
size	long
)	O
+	O
1	int
;	O
crc_offset	int
=	O
(	O
crc_offset	int
+	O
3	int
)	O
&	O
~	O
3	int
;	O
if	O
(	O
crc_offset	int
+	O
4	int
>	O
size	long
)	O
return	O
NULL	O
;	O
*	O
crc32	pointer
=	O
bfd_get_32	O
(	O
abfd	pointer
,	O
contents	pointer
+	O
crc_offset	int
)	O
;	O
return	O
name	pointer
;	O
}	O
char	O
*	O
bfd_get_debug_link_info	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
unsigned	O
long	O
*	O
crc32_out	pointer
)	O
{	O
return	O
bfd_get_debug_link_info_1	function
(	O
abfd	pointer
,	O
crc32_out	pointer
)	O
;	O
}	O
char	O
*	O
bfd_get_alt_debug_link_info	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_size_type	long
*	O
buildid_len	pointer
,	O
bfd_byte	char
*	O
*	O
buildid_out	pointer
)	O
{	O
asection	struct
*	O
sect	pointer
;	O
bfd_byte	char
*	O
contents	pointer
;	O
unsigned	O
int	O
buildid_offset	int
;	O
char	O
*	O
name	pointer
;	O
bfd_size_type	long
size	long
;	O
BFD_ASSERT	O
(	O
abfd	pointer
)	O
;	O
BFD_ASSERT	O
(	O
buildid_len	pointer
)	O
;	O
BFD_ASSERT	O
(	O
buildid_out	pointer
)	O
;	O
sect	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
GNU_DEBUGALTLINK	pointer
)	O
;	O
if	O
(	O
sect	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
size	long
=	O
bfd_section_size	function
(	O
sect	pointer
)	O
;	O
if	O
(	O
size	long
<	O
8	int
||	O
size	long
>=	O
bfd_get_size	function
(	O
abfd	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
bfd_malloc_and_get_section	function
(	O
abfd	pointer
,	O
sect	pointer
,	O
&	O
contents	pointer
)	O
)	O
{	O
if	O
(	O
contents	pointer
!=	O
NULL	O
)	O
free	function
(	O
contents	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
name	pointer
=	O
(	O
char	O
*	O
)	O
contents	pointer
;	O
buildid_offset	int
=	O
strnlen	function
(	O
name	pointer
,	O
size	long
)	O
+	O
1	int
;	O
if	O
(	O
buildid_offset	int
>=	O
bfd_section_size	function
(	O
sect	pointer
)	O
)	O
return	O
NULL	O
;	O
*	O
buildid_len	pointer
=	O
size	long
-	O
buildid_offset	int
;	O
*	O
buildid_out	pointer
=	O
bfd_malloc	function
(	O
*	O
buildid_len	pointer
)	O
;	O
memcpy	function
(	O
*	O
buildid_out	pointer
,	O
contents	pointer
+	O
buildid_offset	int
,	O
*	O
buildid_len	pointer
)	O
;	O
return	O
name	pointer
;	O
}	O
static	O
bfd_boolean	int
separate_debug_file_exists	function
(	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
crc32_p	pointer
)	O
{	O
static	O
unsigned	O
char	O
buffer	pointer
[	O
8	int
*	O
1024	int
]	O
;	O
unsigned	O
long	O
file_crc	long
=	O
0	int
;	O
FILE	struct
*	O
f	pointer
;	O
bfd_size_type	long
count	int
;	O
unsigned	O
long	O
crc	long
;	O
BFD_ASSERT	O
(	O
name	pointer
)	O
;	O
BFD_ASSERT	O
(	O
crc32_p	pointer
)	O
;	O
crc	long
=	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
crc32_p	pointer
;	O
f	pointer
=	O
_bfd_real_fopen	function
(	O
name	pointer
,	O
FOPEN_RB	pointer
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
while	O
(	O
(	O
count	int
=	O
fread	function
(	O
buffer	pointer
,	O
1	int
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
f	pointer
)	O
)	O
>	O
0	int
)	O
file_crc	long
=	O
bfd_calc_gnu_debuglink_crc32	function
(	O
file_crc	long
,	O
buffer	pointer
,	O
count	int
)	O
;	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
crc	long
==	O
file_crc	long
;	O
}	O
static	O
bfd_boolean	int
separate_alt_debug_file_exists	function
(	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
unused	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
FILE	struct
*	O
f	pointer
;	O
BFD_ASSERT	O
(	O
name	pointer
)	O
;	O
f	pointer
=	O
_bfd_real_fopen	function
(	O
name	pointer
,	O
FOPEN_RB	pointer
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
fclose	function
(	O
f	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
typedef	O
char	O
*	O
(	O
*	O
get_func_type	pointer
)	O
(	O
bfd	struct
*	O
,	O
void	O
*	O
)	O
;	O
typedef	O
bfd_boolean	int
(	O
*	O
check_func_type	pointer
)	O
(	O
const	O
char	O
*	O
,	O
void	O
*	O
)	O
;	O
static	O
char	O
*	O
find_separate_debug_file	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
debug_file_directory	pointer
,	O
bfd_boolean	int
include_dirs	int
,	O
get_func_type	pointer
get_func	pointer
,	O
check_func_type	pointer
check_func	pointer
,	O
void	O
*	O
func_data	pointer
)	O
{	O
char	O
*	O
base	int
;	O
char	O
*	O
dir	pointer
;	O
char	O
*	O
debugfile	pointer
;	O
char	O
*	O
canon_dir	pointer
;	O
size_t	long
dirlen	long
;	O
size_t	long
canon_dirlen	long
;	O
BFD_ASSERT	O
(	O
abfd	pointer
)	O
;	O
if	O
(	O
debug_file_directory	pointer
==	O
NULL	O
)	O
debug_file_directory	pointer
=	O
"."	pointer
;	O
if	O
(	O
abfd	pointer
->	O
filename	pointer
==	O
NULL	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
base	int
=	O
get_func	pointer
(	O
abfd	pointer
,	O
func_data	pointer
)	O
;	O
if	O
(	O
base	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
base	int
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
free	function
(	O
base	int
)	O
;	O
bfd_set_error	function
(	O
bfd_error_no_debug_section	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
include_dirs	int
)	O
{	O
for	O
(	O
dirlen	long
=	O
strlen	function
(	O
abfd	pointer
->	O
filename	pointer
)	O
;	O
dirlen	long
>	O
0	int
;	O
dirlen	long
--	O
)	O
if	O
(	O
IS_DIR_SEPARATOR	O
(	O
abfd	pointer
->	O
filename	pointer
[	O
dirlen	long
-	O
1	int
]	O
)	O
)	O
break	O
;	O
dir	pointer
=	O
(	O
char	O
*	O
)	O
bfd_malloc	function
(	O
dirlen	long
+	O
1	int
)	O
;	O
if	O
(	O
dir	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
base	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memcpy	function
(	O
dir	pointer
,	O
abfd	pointer
->	O
filename	pointer
,	O
dirlen	long
)	O
;	O
dir	pointer
[	O
dirlen	long
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
dir	pointer
=	O
(	O
char	O
*	O
)	O
bfd_malloc	function
(	O
1	int
)	O
;	O
*	O
dir	pointer
=	O
0	int
;	O
dirlen	long
=	O
0	int
;	O
}	O
canon_dir	pointer
=	O
lrealpath	function
(	O
abfd	pointer
->	O
filename	pointer
)	O
;	O
for	O
(	O
canon_dirlen	long
=	O
strlen	function
(	O
canon_dir	pointer
)	O
;	O
canon_dirlen	long
>	O
0	int
;	O
canon_dirlen	long
--	O
)	O
if	O
(	O
IS_DIR_SEPARATOR	O
(	O
canon_dir	pointer
[	O
canon_dirlen	long
-	O
1	int
]	O
)	O
)	O
break	O
;	O
canon_dir	pointer
[	O
canon_dirlen	long
]	O
=	O
'\0'	O
;	O
debugfile	pointer
=	O
(	O
char	O
*	O
)	O
bfd_malloc	function
(	O
strlen	function
(	O
debug_file_directory	pointer
)	O
+	O
1	int
+	O
(	O
canon_dirlen	long
>	O
dirlen	long
?	O
canon_dirlen	long
:	O
dirlen	long
)	O
+	O
strlen	function
(	O
".debug/"	pointer
)	O
+	O
strlen	function
(	O
EXTRA_DEBUG_ROOT1	pointer
)	O
+	O
strlen	function
(	O
EXTRA_DEBUG_ROOT2	pointer
)	O
+	O
strlen	function
(	O
base	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
debugfile	pointer
==	O
NULL	O
)	O
goto	O
found	O
;	O
sprintf	function
(	O
debugfile	pointer
,	O
"%s%s"	pointer
,	O
dir	pointer
,	O
base	int
)	O
;	O
if	O
(	O
check_func	pointer
(	O
debugfile	pointer
,	O
func_data	pointer
)	O
)	O
goto	O
found	O
;	O
sprintf	function
(	O
debugfile	pointer
,	O
"%s.debug/%s"	pointer
,	O
dir	pointer
,	O
base	int
)	O
;	O
if	O
(	O
check_func	pointer
(	O
debugfile	pointer
,	O
func_data	pointer
)	O
)	O
goto	O
found	O
;	O
sprintf	function
(	O
debugfile	pointer
,	O
"%s%s%s"	pointer
,	O
EXTRA_DEBUG_ROOT1	pointer
,	O
include_dirs	int
?	O
canon_dir	pointer
:	O
"/"	pointer
,	O
base	int
)	O
;	O
if	O
(	O
check_func	pointer
(	O
debugfile	pointer
,	O
func_data	pointer
)	O
)	O
goto	O
found	O
;	O
sprintf	function
(	O
debugfile	pointer
,	O
"%s%s%s"	pointer
,	O
EXTRA_DEBUG_ROOT2	pointer
,	O
include_dirs	int
?	O
canon_dir	pointer
:	O
"/"	pointer
,	O
base	int
)	O
;	O
if	O
(	O
check_func	pointer
(	O
debugfile	pointer
,	O
func_data	pointer
)	O
)	O
goto	O
found	O
;	O
strcpy	function
(	O
debugfile	pointer
,	O
debug_file_directory	pointer
)	O
;	O
dirlen	long
=	O
strlen	function
(	O
debug_file_directory	pointer
)	O
-	O
1	int
;	O
if	O
(	O
include_dirs	int
)	O
{	O
if	O
(	O
dirlen	long
>	O
0	int
&&	O
debug_file_directory	pointer
[	O
dirlen	long
]	O
!=	O
'/'	O
&&	O
canon_dir	pointer
[	O
0	int
]	O
!=	O
'/'	O
)	O
strcat	function
(	O
debugfile	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
debugfile	pointer
,	O
canon_dir	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
dirlen	long
>	O
0	int
&&	O
debug_file_directory	pointer
[	O
dirlen	long
]	O
!=	O
'/'	O
)	O
strcat	function
(	O
debugfile	pointer
,	O
"/"	pointer
)	O
;	O
}	O
strcat	function
(	O
debugfile	pointer
,	O
base	int
)	O
;	O
if	O
(	O
check_func	pointer
(	O
debugfile	pointer
,	O
func_data	pointer
)	O
)	O
goto	O
found	O
;	O
free	function
(	O
debugfile	pointer
)	O
;	O
debugfile	pointer
=	O
NULL	O
;	O
found	O
:	O
free	function
(	O
base	int
)	O
;	O
free	function
(	O
dir	pointer
)	O
;	O
free	function
(	O
canon_dir	pointer
)	O
;	O
return	O
debugfile	pointer
;	O
}	O
char	O
*	O
bfd_follow_gnu_debuglink	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
dir	pointer
)	O
{	O
unsigned	O
long	O
crc32	pointer
;	O
return	O
find_separate_debug_file	function
(	O
abfd	pointer
,	O
dir	pointer
,	O
TRUE	int
,	O
bfd_get_debug_link_info_1	function
,	O
separate_debug_file_exists	function
,	O
&	O
crc32	pointer
)	O
;	O
}	O
static	O
char	O
*	O
get_alt_debug_link_info_shim	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
unused	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
bfd_size_type	long
len	long
;	O
bfd_byte	char
*	O
buildid	pointer
=	O
NULL	O
;	O
char	O
*	O
result	pointer
=	O
bfd_get_alt_debug_link_info	function
(	O
abfd	pointer
,	O
&	O
len	long
,	O
&	O
buildid	pointer
)	O
;	O
free	function
(	O
buildid	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
char	O
*	O
bfd_follow_gnu_debugaltlink	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
dir	pointer
)	O
{	O
return	O
find_separate_debug_file	function
(	O
abfd	pointer
,	O
dir	pointer
,	O
TRUE	int
,	O
get_alt_debug_link_info_shim	function
,	O
separate_alt_debug_file_exists	function
,	O
NULL	O
)	O
;	O
}	O
asection	struct
*	O
bfd_create_gnu_debuglink_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
asection	struct
*	O
sect	pointer
;	O
bfd_size_type	long
debuglink_size	long
;	O
flagword	int
flags	int
;	O
if	O
(	O
abfd	pointer
==	O
NULL	O
||	O
filename	pointer
==	O
NULL	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
filename	pointer
=	O
lbasename	function
(	O
filename	pointer
)	O
;	O
sect	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
GNU_DEBUGLINK	pointer
)	O
;	O
if	O
(	O
sect	pointer
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
flags	int
=	O
SEC_HAS_CONTENTS	int
|	O
SEC_READONLY	int
|	O
SEC_DEBUGGING	int
;	O
sect	pointer
=	O
bfd_make_section_with_flags	function
(	O
abfd	pointer
,	O
GNU_DEBUGLINK	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
sect	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
debuglink_size	long
=	O
strlen	function
(	O
filename	pointer
)	O
+	O
1	int
;	O
debuglink_size	long
+=	O
3	int
;	O
debuglink_size	long
&=	O
~	O
3	int
;	O
debuglink_size	long
+=	O
4	int
;	O
if	O
(	O
!	O
bfd_set_section_size	function
(	O
sect	pointer
,	O
debuglink_size	long
)	O
)	O
return	O
NULL	O
;	O
bfd_set_section_alignment	function
(	O
sect	pointer
,	O
2	int
)	O
;	O
return	O
sect	pointer
;	O
}	O
bfd_boolean	int
bfd_fill_in_gnu_debuglink_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
bfd_section	struct
*	O
sect	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
bfd_size_type	long
debuglink_size	long
;	O
unsigned	O
long	O
crc32	pointer
;	O
char	O
*	O
contents	pointer
;	O
bfd_size_type	long
crc_offset	int
;	O
FILE	struct
*	O
handle	pointer
;	O
static	O
unsigned	O
char	O
buffer	pointer
[	O
8	int
*	O
1024	int
]	O
;	O
size_t	long
count	int
;	O
size_t	long
filelen	long
;	O
if	O
(	O
abfd	pointer
==	O
NULL	O
||	O
sect	pointer
==	O
NULL	O
||	O
filename	pointer
==	O
NULL	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
handle	pointer
=	O
_bfd_real_fopen	function
(	O
filename	pointer
,	O
FOPEN_RB	pointer
)	O
;	O
if	O
(	O
handle	pointer
==	O
NULL	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_system_call	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
crc32	pointer
=	O
0	int
;	O
while	O
(	O
(	O
count	int
=	O
fread	function
(	O
buffer	pointer
,	O
1	int
,	O
sizeof	O
buffer	pointer
,	O
handle	pointer
)	O
)	O
>	O
0	int
)	O
crc32	pointer
=	O
bfd_calc_gnu_debuglink_crc32	function
(	O
crc32	pointer
,	O
buffer	pointer
,	O
count	int
)	O
;	O
fclose	function
(	O
handle	pointer
)	O
;	O
filename	pointer
=	O
lbasename	function
(	O
filename	pointer
)	O
;	O
filelen	long
=	O
strlen	function
(	O
filename	pointer
)	O
;	O
debuglink_size	long
=	O
filelen	long
+	O
1	int
;	O
debuglink_size	long
+=	O
3	int
;	O
debuglink_size	long
&=	O
~	O
3	int
;	O
debuglink_size	long
+=	O
4	int
;	O
contents	pointer
=	O
(	O
char	O
*	O
)	O
bfd_malloc	function
(	O
debuglink_size	long
)	O
;	O
if	O
(	O
contents	pointer
==	O
NULL	O
)	O
{	O
return	O
FALSE	int
;	O
}	O
crc_offset	int
=	O
debuglink_size	long
-	O
4	int
;	O
memcpy	function
(	O
contents	pointer
,	O
filename	pointer
,	O
filelen	long
)	O
;	O
memset	function
(	O
contents	pointer
+	O
filelen	long
,	O
0	int
,	O
crc_offset	int
-	O
filelen	long
)	O
;	O
bfd_put_32	O
(	O
abfd	pointer
,	O
crc32	pointer
,	O
contents	pointer
+	O
crc_offset	int
)	O
;	O
if	O
(	O
!	O
bfd_set_section_contents	function
(	O
abfd	pointer
,	O
sect	pointer
,	O
contents	pointer
,	O
0	int
,	O
debuglink_size	long
)	O
)	O
{	O
free	function
(	O
contents	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
struct	O
bfd_build_id	struct
*	O
get_build_id	function
(	O
bfd	struct
*	O
abfd	pointer
)	O
{	O
struct	O
bfd_build_id	struct
*	O
build_id	pointer
;	O
Elf_Internal_Note	struct
inote	struct
;	O
Elf_External_Note	struct
*	O
enote	pointer
;	O
bfd_byte	char
*	O
contents	pointer
;	O
asection	struct
*	O
sect	pointer
;	O
bfd_size_type	long
size	long
;	O
BFD_ASSERT	O
(	O
abfd	pointer
)	O
;	O
if	O
(	O
abfd	pointer
->	O
build_id	pointer
&&	O
abfd	pointer
->	O
build_id	pointer
->	O
size	long
>	O
0	int
)	O
return	O
(	O
struct	O
bfd_build_id	struct
*	O
)	O
abfd	pointer
->	O
build_id	pointer
;	O
sect	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
".note.gnu.build-id"	pointer
)	O
;	O
if	O
(	O
sect	pointer
==	O
NULL	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_debug_section	int
)	O
;	O
return	O
NULL	O
;	O
}	O
size	long
=	O
bfd_section_size	function
(	O
sect	pointer
)	O
;	O
if	O
(	O
size	long
<	O
0x24	int
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
bfd_malloc_and_get_section	function
(	O
abfd	pointer
,	O
sect	pointer
,	O
&	O
contents	pointer
)	O
)	O
{	O
if	O
(	O
contents	pointer
!=	O
NULL	O
)	O
free	function
(	O
contents	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
size	long
=	O
bfd_section_size	function
(	O
sect	pointer
)	O
;	O
if	O
(	O
size	long
<	O
sizeof	O
(	O
Elf_External_Note	struct
)	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
free	function
(	O
contents	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
enote	pointer
=	O
(	O
Elf_External_Note	struct
*	O
)	O
contents	pointer
;	O
inote	struct
.	O
type	enum
=	O
H_GET_32	O
(	O
abfd	pointer
,	O
enote	pointer
->	O
type	enum
)	O
;	O
inote	struct
.	O
namesz	array
=	O
H_GET_32	O
(	O
abfd	pointer
,	O
enote	pointer
->	O
namesz	array
)	O
;	O
inote	struct
.	O
namedata	pointer
=	O
enote	pointer
->	O
name	pointer
;	O
inote	struct
.	O
descsz	array
=	O
H_GET_32	O
(	O
abfd	pointer
,	O
enote	pointer
->	O
descsz	array
)	O
;	O
inote	struct
.	O
descdata	pointer
=	O
inote	struct
.	O
namedata	pointer
+	O
BFD_ALIGN	O
(	O
inote	struct
.	O
namesz	array
,	O
4	int
)	O
;	O
if	O
(	O
inote	struct
.	O
descsz	array
<=	O
0	int
||	O
inote	struct
.	O
type	enum
!=	O
NT_GNU_BUILD_ID	int
||	O
inote	struct
.	O
namesz	array
!=	O
4	int
||	O
strncmp	function
(	O
inote	struct
.	O
namedata	pointer
,	O
"GNU"	pointer
,	O
4	int
)	O
!=	O
0	int
||	O
inote	struct
.	O
descsz	array
>	O
0x7ffffffe	int
||	O
size	long
<	O
(	O
12	int
+	O
BFD_ALIGN	O
(	O
inote	struct
.	O
namesz	array
,	O
4	int
)	O
+	O
inote	struct
.	O
descsz	array
)	O
)	O
{	O
free	function
(	O
contents	pointer
)	O
;	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
build_id	pointer
=	O
bfd_alloc	function
(	O
abfd	pointer
,	O
sizeof	O
(	O
struct	O
bfd_build_id	struct
)	O
+	O
inote	struct
.	O
descsz	array
)	O
;	O
if	O
(	O
build_id	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
contents	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
build_id	pointer
->	O
size	long
=	O
inote	struct
.	O
descsz	array
;	O
memcpy	function
(	O
build_id	pointer
->	O
data	pointer
,	O
inote	struct
.	O
descdata	pointer
,	O
inote	struct
.	O
descsz	array
)	O
;	O
abfd	pointer
->	O
build_id	pointer
=	O
build_id	pointer
;	O
free	function
(	O
contents	pointer
)	O
;	O
return	O
build_id	pointer
;	O
}	O
static	O
char	O
*	O
get_build_id_name	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
void	O
*	O
build_id_out_p	pointer
)	O
{	O
struct	O
bfd_build_id	struct
*	O
*	O
build_id_out	pointer
=	O
build_id_out_p	pointer
;	O
struct	O
bfd_build_id	struct
*	O
build_id	pointer
;	O
char	O
*	O
name	pointer
;	O
char	O
*	O
n	long
;	O
bfd_size_type	long
s	pointer
;	O
bfd_byte	char
*	O
d	double
;	O
if	O
(	O
abfd	pointer
==	O
NULL	O
||	O
abfd	pointer
->	O
filename	pointer
==	O
NULL	O
||	O
build_id_out	pointer
==	O
NULL	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
build_id	pointer
=	O
get_build_id	function
(	O
abfd	pointer
)	O
;	O
if	O
(	O
build_id	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
name	pointer
=	O
bfd_malloc	function
(	O
strlen	function
(	O
".build-id/"	pointer
)	O
+	O
build_id	pointer
->	O
size	long
*	O
2	int
+	O
2	int
+	O
strlen	function
(	O
".debug"	pointer
)	O
)	O
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
NULL	O
;	O
}	O
n	long
=	O
name	pointer
;	O
d	double
=	O
build_id	pointer
->	O
data	pointer
;	O
s	pointer
=	O
build_id	pointer
->	O
size	long
;	O
n	long
+=	O
sprintf	function
(	O
n	long
,	O
".build-id/"	pointer
)	O
;	O
n	long
+=	O
sprintf	function
(	O
n	long
,	O
"%02x"	pointer
,	O
(	O
unsigned	O
)	O
*	O
d	double
++	O
)	O
;	O
s	pointer
--	O
;	O
n	long
+=	O
sprintf	function
(	O
n	long
,	O
"/"	pointer
)	O
;	O
while	O
(	O
s	pointer
--	O
)	O
n	long
+=	O
sprintf	function
(	O
n	long
,	O
"%02x"	pointer
,	O
(	O
unsigned	O
)	O
*	O
d	double
++	O
)	O
;	O
n	long
+=	O
sprintf	function
(	O
n	long
,	O
".debug"	pointer
)	O
;	O
*	O
build_id_out	pointer
=	O
build_id	pointer
;	O
return	O
name	pointer
;	O
}	O
static	O
bfd_boolean	int
check_build_id_file	function
(	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
buildid_p	pointer
)	O
{	O
struct	O
bfd_build_id	struct
*	O
orig_build_id	pointer
;	O
struct	O
bfd_build_id	struct
*	O
build_id	pointer
;	O
bfd	struct
*	O
file	pointer
;	O
bfd_boolean	int
result	pointer
;	O
BFD_ASSERT	O
(	O
name	pointer
)	O
;	O
BFD_ASSERT	O
(	O
buildid_p	pointer
)	O
;	O
file	pointer
=	O
bfd_openr	function
(	O
name	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
if	O
(	O
!	O
bfd_check_format	function
(	O
file	pointer
,	O
bfd_object	int
)	O
)	O
{	O
bfd_close	function
(	O
file	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
build_id	pointer
=	O
get_build_id	function
(	O
file	pointer
)	O
;	O
if	O
(	O
build_id	pointer
==	O
NULL	O
)	O
{	O
bfd_close	function
(	O
file	pointer
)	O
;	O
return	O
FALSE	int
;	O
}	O
orig_build_id	pointer
=	O
*	O
(	O
struct	O
bfd_build_id	struct
*	O
*	O
)	O
buildid_p	pointer
;	O
result	pointer
=	O
build_id	pointer
->	O
size	long
==	O
orig_build_id	pointer
->	O
size	long
&&	O
memcmp	function
(	O
build_id	pointer
->	O
data	pointer
,	O
orig_build_id	pointer
->	O
data	pointer
,	O
build_id	pointer
->	O
size	long
)	O
==	O
0	int
;	O
(	O
void	O
)	O
bfd_close	function
(	O
file	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
char	O
*	O
bfd_follow_build_id_debuglink	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
const	O
char	O
*	O
dir	pointer
)	O
{	O
struct	O
bfd_build_id	struct
*	O
build_id	pointer
;	O
return	O
find_separate_debug_file	function
(	O
abfd	pointer
,	O
dir	pointer
,	O
FALSE	int
,	O
get_build_id_name	function
,	O
check_build_id_file	function
,	O
&	O
build_id	pointer
)	O
;	O
}	O
void	O
bfd_set_filename	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
char	O
*	O
filename	pointer
)	O
{	O
free	function
(	O
(	O
char	O
*	O
)	O
abfd	pointer
->	O
filename	pointer
)	O
;	O
abfd	pointer
->	O
filename	pointer
=	O
filename	pointer
;	O
}	O
