char	O
*	O
fgetline	function
(	O
)	O
;	O
void	O
error	function
(	O
)	O
;	O
extern	O
char	O
*	O
version_string	pointer
;	O
char	O
*	O
program_name	pointer
;	O
static	O
int	O
term_width	int
;	O
static	O
int	O
a_to_i	function
(	O
spec	pointer
,	O
next	pointer
,	O
stop	int
)	O
const	O
char	O
*	O
spec	pointer
;	O
const	O
char	O
*	O
*	O
next	pointer
;	O
int	O
stop	int
;	O
{	O
int	O
acc	int
;	O
acc	int
=	O
0	int
;	O
while	O
(	O
*	O
spec	pointer
&&	O
*	O
spec	pointer
!=	O
stop	int
)	O
{	O
if	O
(	O
*	O
spec	pointer
>=	O
'0'	O
&&	O
*	O
spec	pointer
<=	O
'9'	O
)	O
acc	int
=	O
acc	int
*	O
10	int
+	O
*	O
spec	pointer
++	O
-	O
'0'	O
;	O
else	O
{	O
if	O
(	O
next	pointer
)	O
*	O
next	pointer
=	O
spec	pointer
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
next	pointer
)	O
if	O
(	O
*	O
spec	pointer
)	O
*	O
next	pointer
=	O
spec	pointer
+	O
1	int
;	O
else	O
*	O
next	pointer
=	O
spec	pointer
;	O
return	O
acc	int
;	O
}	O
static	O
char	O
*	O
parse_fspec_line	function
(	O
line	pointer
,	O
first	int
,	O
next	pointer
)	O
char	O
*	O
line	pointer
;	O
int	O
first	int
;	O
char	O
*	O
*	O
next	pointer
;	O
{	O
char	O
*	O
cp	pointer
;	O
int	O
terminated	int
;	O
if	O
(	O
first	int
)	O
{	O
while	O
(	O
*	O
line	pointer
)	O
if	O
(	O
line	pointer
[	O
0	int
]	O
==	O
'<'	O
&&	O
line	pointer
[	O
1	int
]	O
==	O
':'	O
)	O
break	O
;	O
else	O
line	pointer
++	O
;	O
if	O
(	O
*	O
line	pointer
==	O
0	int
)	O
return	O
0	int
;	O
line	pointer
+=	O
2	int
;	O
}	O
do	O
{	O
while	O
(	O
*	O
line	pointer
&&	O
(	O
*	O
line	pointer
==	O
' '	O
||	O
*	O
line	pointer
==	O
'\t'	O
)	O
)	O
line	pointer
++	O
;	O
if	O
(	O
*	O
line	pointer
==	O
0	int
||	O
(	O
*	O
line	pointer
==	O
':'	O
&&	O
(	O
line	pointer
[	O
1	int
]	O
==	O
'>'	O
||	O
line	pointer
[	O
1	int
]	O
==	O
0	int
)	O
)	O
)	O
return	O
0	int
;	O
switch	O
(	O
*	O
line	pointer
)	O
{	O
case	O
'e'	O
:	O
case	O
'd'	O
:	O
case	O
'm'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
terminated	int
=	O
0	int
;	O
for	O
(	O
cp	pointer
=	O
line	pointer
;	O
*	O
cp	pointer
;	O
cp	pointer
++	O
)	O
if	O
(	O
*	O
cp	pointer
==	O
':'	O
&&	O
cp	pointer
[	O
1	int
]	O
==	O
'>'	O
)	O
{	O
if	O
(	O
!	O
terminated	int
)	O
{	O
*	O
cp	pointer
=	O
0	int
;	O
*	O
next	pointer
=	O
0	int
;	O
}	O
return	O
line	pointer
;	O
}	O
else	O
if	O
(	O
!	O
terminated	int
&&	O
(	O
*	O
cp	pointer
==	O
' '	O
||	O
*	O
cp	pointer
==	O
'\t'	O
)	O
)	O
{	O
*	O
cp	pointer
=	O
0	int
;	O
*	O
next	pointer
=	O
cp	pointer
+	O
1	int
;	O
terminated	int
=	O
1	int
;	O
}	O
break	O
;	O
default	O
:	O
while	O
(	O
*	O
line	pointer
&&	O
*	O
line	pointer
!=	O
' '	O
&&	O
*	O
line	pointer
!=	O
'\t'	O
&&	O
!	O
(	O
*	O
line	pointer
==	O
':'	O
&&	O
line	pointer
[	O
1	int
]	O
==	O
'>'	O
)	O
)	O
line	pointer
++	O
;	O
if	O
(	O
*	O
line	pointer
!=	O
' '	O
&&	O
*	O
line	pointer
!=	O
'\t'	O
)	O
return	O
0	int
;	O
}	O
}	O
while	O
(	O
1	int
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
stream	pointer
,	O
status	int
)	O
FILE	struct
*	O
stream	pointer
;	O
int	O
status	int
;	O
{	O
static	O
char	O
*	O
specs	array
[	O
]	O
=	O
{	O
"n1,n2,...   : Set TAB stops at positions n1,n2,..."	pointer
,	O
"-number     : Set TAB stops every number columns"	pointer
,	O
"-C code     : Set TAB stops using canned settings"	pointer
,	O
"-code       : Set TAB stops using canned settings"	pointer
,	O
"-F filename : Set TAB stops according to the first line of the file"	pointer
,	O
"--filename  : Set TAB stops according to the first line of the file"	pointer
,	O
0	int
,	O
}	O
;	O
char	O
*	O
*	O
p	pointer
;	O
struct	O
fspec_table	struct
*	O
fstp	pointer
;	O
int	O
ix	int
;	O
fprintf	function
(	O
stream	pointer
,	O
"Usage: %s [-T termtype] [--terminal=termtype] tabspec\n"	pointer
,	O
program_name	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
specs	array
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
fprintf	function
(	O
stream	pointer
,	O
"  %s\n"	pointer
,	O
*	O
p	pointer
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
"Canned settings are:\n"	pointer
)	O
;	O
for	O
(	O
fstp	pointer
=	O
fspec_table	struct
;	O
fstp	pointer
->	O
code	pointer
;	O
fstp	pointer
++	O
)	O
{	O
fprintf	function
(	O
stream	pointer
,	O
"-%s\t"	pointer
,	O
fstp	pointer
->	O
code	pointer
)	O
;	O
for	O
(	O
ix	int
=	O
0	int
;	O
fstp	pointer
->	O
tabs	pointer
[	O
ix	int
]	O
!=	O
0	int
;	O
ix	int
++	O
)	O
fprintf	function
(	O
stream	pointer
,	O
"%d "	pointer
,	O
fstp	pointer
->	O
tabs	pointer
[	O
ix	int
]	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
"(%s)\n"	pointer
,	O
fstp	pointer
->	O
description	pointer
)	O
;	O
}	O
exit	function
(	O
status	int
)	O
;	O
}	O
static	O
int	O
parse_tabspec	function
(	O
spec	pointer
,	O
tabs	pointer
,	O
tabs_length	int
)	O
const	O
char	O
*	O
spec	pointer
;	O
int	O
*	O
tabs	pointer
;	O
int	O
tabs_length	int
;	O
{	O
const	O
char	O
*	O
ispec	pointer
;	O
int	O
tab	int
,	O
ix	int
,	O
width	int
;	O
ispec	pointer
=	O
spec	pointer
;	O
if	O
(	O
spec	pointer
[	O
0	int
]	O
!=	O
'-'	O
)	O
{	O
for	O
(	O
ix	int
=	O
0	int
;	O
ix	int
<	O
tabs_length	int
&&	O
spec	pointer
[	O
0	int
]	O
!=	O
0	int
;	O
ix	int
++	O
)	O
{	O
if	O
(	O
spec	pointer
[	O
0	int
]	O
==	O
'+'	O
)	O
{	O
if	O
(	O
ix	int
==	O
0	int
)	O
goto	O
bogus	O
;	O
tab	int
=	O
a_to_i	function
(	O
spec	pointer
+	O
1	int
,	O
&	O
spec	pointer
,	O
','	O
)	O
;	O
if	O
(	O
tab	int
<=	O
0	int
)	O
goto	O
bogus	O
;	O
tab	int
=	O
tabs	pointer
[	O
ix	int
-	O
1	int
]	O
+	O
tab	int
;	O
}	O
else	O
tab	int
=	O
a_to_i	function
(	O
spec	pointer
,	O
&	O
spec	pointer
,	O
','	O
)	O
;	O
if	O
(	O
tab	int
<=	O
0	int
||	O
(	O
ix	int
>	O
0	int
&&	O
tab	int
<	O
tabs	pointer
[	O
ix	int
-	O
1	int
]	O
)	O
)	O
goto	O
bogus	O
;	O
tabs	pointer
[	O
ix	int
]	O
=	O
tab	int
;	O
}	O
return	O
ix	int
;	O
}	O
else	O
{	O
if	O
(	O
spec	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
spec	pointer
[	O
1	int
]	O
<=	O
'9'	O
)	O
{	O
width	int
=	O
a_to_i	function
(	O
&	O
spec	pointer
[	O
1	int
]	O
,	O
spec	pointer
,	O
0	int
)	O
;	O
if	O
(	O
width	int
<	O
0	int
)	O
goto	O
bogus	O
;	O
else	O
if	O
(	O
width	int
==	O
0	int
)	O
return	O
0	int
;	O
else	O
{	O
for	O
(	O
tab	int
=	O
1	int
,	O
ix	int
=	O
0	int
;	O
ix	int
<	O
tabs_length	int
&&	O
tab	int
<=	O
term_width	int
;	O
tab	int
+=	O
width	int
,	O
ix	int
++	O
)	O
tabs	pointer
[	O
ix	int
]	O
=	O
tab	int
;	O
return	O
ix	int
;	O
}	O
}	O
else	O
{	O
for	O
(	O
tab	int
=	O
0	int
;	O
fspec_table	struct
[	O
tab	int
]	O
.	O
code	pointer
!=	O
0	int
;	O
tab	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
fspec_table	struct
[	O
tab	int
]	O
.	O
code	pointer
,	O
&	O
spec	pointer
[	O
1	int
]	O
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
fspec_table	struct
[	O
tab	int
]	O
.	O
code	pointer
!=	O
0	int
)	O
{	O
for	O
(	O
ix	int
=	O
0	int
;	O
ix	int
<	O
tabs_length	int
;	O
ix	int
++	O
)	O
{	O
tabs	pointer
[	O
ix	int
]	O
=	O
fspec_table	struct
[	O
tab	int
]	O
.	O
tabs	pointer
[	O
ix	int
]	O
;	O
if	O
(	O
tabs	pointer
[	O
ix	int
]	O
<=	O
0	int
)	O
break	O
;	O
}	O
return	O
ix	int
;	O
}	O
else	O
goto	O
bogus	O
;	O
}	O
}	O
bogus	O
:	O
error	function
(	O
0	int
,	O
0	int
,	O
"invalid tab specification `%s'"	pointer
,	O
ispec	pointer
)	O
;	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
}	O
static	O
int	O
tcputchar	function
(	O
c	char
)	O
char	O
c	char
;	O
{	O
putchar	function
(	O
c	char
)	O
;	O
return	O
c	char
;	O
}	O
static	O
void	O
set_tabstops	function
(	O
term	pointer
,	O
tabs	pointer
,	O
numtabs	int
)	O
char	O
*	O
term	pointer
;	O
int	O
*	O
tabs	pointer
;	O
int	O
numtabs	int
;	O
{	O
char	O
*	O
cr	pointer
,	O
*	O
ct	pointer
,	O
*	O
st	pointer
;	O
int	O
lines	int
,	O
tab	int
,	O
ix	int
,	O
col	int
;	O
char	O
*	O
noclear	pointer
=	O
"cannot clear tabs on terminal %s"	pointer
;	O
char	O
*	O
noset	pointer
=	O
"cannot set nonstandard hardware tabs on terminal %s"	pointer
;	O
ct	pointer
=	O
tgetstr	function
(	O
"ct"	pointer
,	O
0	int
)	O
;	O
lines	int
=	O
tgetnum	function
(	O
"li"	pointer
)	O
;	O
if	O
(	O
lines	int
<	O
0	int
)	O
lines	int
=	O
25	int
;	O
if	O
(	O
numtabs	int
==	O
0	int
)	O
{	O
if	O
(	O
ct	pointer
==	O
0	int
)	O
error	function
(	O
1	int
,	O
0	int
,	O
noclear	pointer
,	O
term	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
ct	pointer
==	O
0	int
)	O
||	O
(	O
st	pointer
=	O
tgetstr	function
(	O
"st"	pointer
,	O
0	int
)	O
)	O
==	O
0	int
)	O
{	O
for	O
(	O
tab	int
=	O
1	int
,	O
ix	int
=	O
0	int
;	O
ix	int
<	O
numtabs	int
;	O
ix	int
++	O
,	O
tab	int
+=	O
8	int
)	O
{	O
if	O
(	O
tabs	pointer
[	O
ix	int
]	O
!=	O
tab	int
)	O
error	function
(	O
1	int
,	O
0	int
,	O
noset	pointer
,	O
term	pointer
)	O
;	O
}	O
return	O
;	O
}	O
}	O
cr	pointer
=	O
tgetstr	function
(	O
"cr"	pointer
,	O
0	int
)	O
;	O
if	O
(	O
cr	pointer
==	O
0	int
)	O
cr	pointer
=	O
"\r"	pointer
;	O
translations_off	function
(	O
)	O
;	O
tputs	function
(	O
cr	pointer
,	O
lines	int
,	O
tcputchar	function
)	O
;	O
tputs	function
(	O
ct	pointer
,	O
lines	int
,	O
tcputchar	function
)	O
;	O
tputs	function
(	O
cr	pointer
,	O
lines	int
,	O
tcputchar	function
)	O
;	O
if	O
(	O
numtabs	int
)	O
{	O
for	O
(	O
ix	int
=	O
0	int
,	O
col	int
=	O
1	int
;	O
ix	int
<	O
numtabs	int
&&	O
col	int
<=	O
term_width	int
;	O
ix	int
++	O
)	O
{	O
while	O
(	O
tabs	pointer
[	O
ix	int
]	O
>	O
col	int
&&	O
col	int
<=	O
term_width	int
)	O
{	O
putchar	function
(	O
' '	O
)	O
;	O
col	int
++	O
;	O
}	O
tputs	function
(	O
st	pointer
,	O
1	int
,	O
tcputchar	function
)	O
;	O
}	O
tputs	function
(	O
cr	pointer
,	O
lines	int
,	O
tcputchar	function
)	O
;	O
}	O
fflush	function
(	O
stdout	pointer
)	O
;	O
restore_translations	function
(	O
)	O
;	O
disable_xtabs	function
(	O
)	O
;	O
}	O
static	O
void	O
prepare_termcap	function
(	O
term	pointer
)	O
char	O
*	O
term	pointer
;	O
{	O
char	O
*	O
tc_pc	pointer
;	O
if	O
(	O
term	pointer
==	O
NULL	O
)	O
error	function
(	O
1	int
,	O
0	int
,	O
"No value for $TERM and no -T specified"	pointer
)	O
;	O
switch	O
(	O
tgetent	function
(	O
0	int
,	O
term	pointer
)	O
)	O
{	O
case	O
0	int
:	O
error	function
(	O
1	int
,	O
0	int
,	O
"Unknown terminal type `%s'"	pointer
,	O
term	pointer
)	O
;	O
case	O
(	O
-	O
1	int
)	O
:	O
error	function
(	O
1	int
,	O
0	int
,	O
"No termcap database"	pointer
)	O
;	O
}	O
tc_pc	pointer
=	O
tgetstr	function
(	O
"pc"	pointer
,	O
0	int
)	O
;	O
PC	char
=	O
tc_pc	pointer
?	O
*	O
tc_pc	pointer
:	O
0	int
;	O
term_width	int
=	O
tgetnum	function
(	O
"co"	pointer
)	O
;	O
if	O
(	O
term_width	int
<=	O
0	int
)	O
term_width	int
=	O
80	int
;	O
}	O
void	O
version	function
(	O
)	O
{	O
printf	function
(	O
"GNU tabs version %s\n"	pointer
,	O
version_string	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
static	O
char	O
*	O
optval	pointer
;	O
enum	O
tabs_args	enum
{	O
arg_termtype	int
,	O
arg_help	int
,	O
arg_version	int
,	O
arg_canned_tabs	int
,	O
arg_file	int
,	O
arg_every_n_column	int
,	O
arg_tablist	int
,	O
arg_bad	int
}	O
;	O
static	O
enum	O
tabs_args	enum
parse_an_arg	function
(	O
arg	pointer
)	O
char	O
*	O
arg	pointer
;	O
{	O
int	O
arglen	int
;	O
switch	O
(	O
arg	pointer
[	O
0	int
]	O
)	O
{	O
case	O
'-'	O
:	O
switch	O
(	O
arg	pointer
[	O
1	int
]	O
)	O
{	O
case	O
'T'	O
:	O
if	O
(	O
arg	pointer
[	O
2	int
]	O
)	O
optval	pointer
=	O
&	O
arg	pointer
[	O
2	int
]	O
;	O
else	O
optval	pointer
=	O
0	int
;	O
return	O
arg_termtype	int
;	O
case	O
'-'	O
:	O
switch	O
(	O
arg	pointer
[	O
2	int
]	O
)	O
{	O
case	O
't'	O
:	O
case	O
'h'	O
:	O
case	O
'v'	O
:	O
case	O
'f'	O
:	O
case	O
'c'	O
:	O
optval	pointer
=	O
strchr	function
(	O
&	O
arg	pointer
[	O
3	int
]	O
,	O
'='	O
)	O
;	O
if	O
(	O
optval	pointer
)	O
{	O
*	O
optval	pointer
++	O
=	O
0	int
;	O
if	O
(	O
strncmp	function
(	O
&	O
arg	pointer
[	O
2	int
]	O
,	O
"terminal"	pointer
,	O
optval	pointer
-	O
&	O
arg	pointer
[	O
3	int
]	O
)	O
==	O
0	int
)	O
return	O
arg_termtype	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
&	O
arg	pointer
[	O
2	int
]	O
,	O
"file"	pointer
,	O
optval	pointer
-	O
&	O
arg	pointer
[	O
3	int
]	O
)	O
==	O
0	int
)	O
return	O
arg_file	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
&	O
arg	pointer
[	O
2	int
]	O
,	O
"code"	pointer
,	O
optval	pointer
-	O
&	O
arg	pointer
[	O
3	int
]	O
)	O
==	O
0	int
)	O
return	O
arg_canned_tabs	int
;	O
optval	pointer
[	O
-	O
1	int
]	O
=	O
'='	O
;	O
}	O
else	O
{	O
optval	pointer
=	O
0	int
;	O
arglen	int
=	O
strlen	function
(	O
&	O
arg	pointer
[	O
2	int
]	O
)	O
;	O
if	O
(	O
strncmp	function
(	O
&	O
arg	pointer
[	O
2	int
]	O
,	O
"terminal"	pointer
,	O
arglen	int
)	O
==	O
0	int
)	O
return	O
arg_termtype	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
&	O
arg	pointer
[	O
2	int
]	O
,	O
"file"	pointer
,	O
arglen	int
)	O
==	O
0	int
)	O
return	O
arg_file	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
&	O
arg	pointer
[	O
2	int
]	O
,	O
"code"	pointer
,	O
arglen	int
)	O
==	O
0	int
)	O
return	O
arg_canned_tabs	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
&	O
arg	pointer
[	O
2	int
]	O
,	O
"version"	pointer
,	O
arglen	int
)	O
==	O
0	int
)	O
return	O
arg_version	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
&	O
arg	pointer
[	O
2	int
]	O
,	O
"help"	pointer
,	O
arglen	int
)	O
==	O
0	int
)	O
return	O
arg_help	int
;	O
}	O
default	O
:	O
optval	pointer
=	O
&	O
arg	pointer
[	O
2	int
]	O
;	O
return	O
arg_file	int
;	O
}	O
break	O
;	O
case	O
'F'	O
:	O
if	O
(	O
arg	pointer
[	O
2	int
]	O
)	O
optval	pointer
=	O
&	O
arg	pointer
[	O
2	int
]	O
;	O
else	O
optval	pointer
=	O
0	int
;	O
return	O
arg_file	int
;	O
case	O
'C'	O
:	O
if	O
(	O
arg	pointer
[	O
2	int
]	O
)	O
optval	pointer
=	O
&	O
arg	pointer
[	O
2	int
]	O
;	O
else	O
optval	pointer
=	O
0	int
;	O
return	O
arg_canned_tabs	int
;	O
case	O
'h'	O
:	O
return	O
arg_help	int
;	O
case	O
'V'	O
:	O
return	O
arg_version	int
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
{	O
char	O
*	O
cp	pointer
;	O
int	O
bad	int
;	O
for	O
(	O
bad	int
=	O
0	int
,	O
cp	pointer
=	O
&	O
arg	pointer
[	O
1	int
]	O
;	O
*	O
cp	pointer
;	O
cp	pointer
++	O
)	O
if	O
(	O
!	O
(	O
*	O
cp	pointer
>=	O
'0'	O
&&	O
*	O
cp	pointer
<=	O
'9'	O
)	O
)	O
{	O
bad	int
++	O
;	O
break	O
;	O
}	O
if	O
(	O
bad	int
==	O
0	int
)	O
{	O
optval	pointer
=	O
&	O
arg	pointer
[	O
1	int
]	O
;	O
return	O
arg_every_n_column	int
;	O
}	O
}	O
default	O
:	O
optval	pointer
=	O
&	O
arg	pointer
[	O
1	int
]	O
;	O
return	O
arg_canned_tabs	int
;	O
}	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
optval	pointer
=	O
arg	pointer
;	O
return	O
arg_tablist	int
;	O
default	O
:	O
return	O
arg_bad	int
;	O
}	O
}	O
int	O
main	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
int	O
*	O
tabs	pointer
;	O
int	O
every	int
;	O
int	O
numtabs	int
;	O
int	O
opt	int
;	O
char	O
*	O
tabspec	pointer
;	O
enum	O
{	O
spec_normal	int
,	O
spec_every	int
,	O
spec_file	int
}	O
tabspec_type	enum
;	O
char	O
*	O
nonunique	pointer
=	O
"More than one tabspec specified"	pointer
;	O
char	O
*	O
term	pointer
;	O
char	O
*	O
required	pointer
=	O
"option requires an argument -- %c"	pointer
;	O
program_name	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
term	pointer
=	O
getenv	function
(	O
"TERM"	pointer
)	O
;	O
tabs	pointer
=	O
0	int
;	O
tabspec	pointer
=	O
0	int
;	O
for	O
(	O
opt	int
=	O
1	int
;	O
opt	int
<	O
argc	int
;	O
opt	int
++	O
)	O
{	O
switch	O
(	O
parse_an_arg	function
(	O
argv	pointer
[	O
opt	int
]	O
)	O
)	O
{	O
case	O
arg_termtype	int
:	O
if	O
(	O
optval	pointer
)	O
term	pointer
=	O
optval	pointer
;	O
else	O
if	O
(	O
opt	int
==	O
argc	int
-	O
1	int
)	O
error	function
(	O
1	int
,	O
0	int
,	O
required	pointer
,	O
'T'	O
)	O
;	O
else	O
term	pointer
=	O
argv	pointer
[	O
++	O
opt	int
]	O
;	O
break	O
;	O
case	O
arg_help	int
:	O
usage	function
(	O
stdout	pointer
,	O
0	int
)	O
;	O
case	O
arg_version	int
:	O
version	function
(	O
)	O
;	O
case	O
arg_every_n_column	int
:	O
if	O
(	O
tabspec	pointer
)	O
error	function
(	O
1	int
,	O
0	int
,	O
nonunique	pointer
)	O
;	O
tabspec	pointer
=	O
optval	pointer
;	O
tabspec_type	enum
=	O
spec_every	int
;	O
break	O
;	O
case	O
arg_canned_tabs	int
:	O
case	O
arg_tablist	int
:	O
if	O
(	O
tabspec	pointer
)	O
error	function
(	O
1	int
,	O
0	int
,	O
nonunique	pointer
)	O
;	O
if	O
(	O
optval	pointer
)	O
tabspec	pointer
=	O
optval	pointer
;	O
else	O
if	O
(	O
opt	int
==	O
argc	int
-	O
1	int
)	O
error	function
(	O
1	int
,	O
0	int
,	O
required	pointer
,	O
'C'	O
)	O
;	O
else	O
tabspec	pointer
=	O
argv	pointer
[	O
++	O
opt	int
]	O
;	O
tabspec_type	enum
=	O
spec_normal	int
;	O
break	O
;	O
case	O
arg_file	int
:	O
if	O
(	O
tabspec	pointer
)	O
error	function
(	O
1	int
,	O
0	int
,	O
nonunique	pointer
)	O
;	O
if	O
(	O
optval	pointer
)	O
tabspec	pointer
=	O
optval	pointer
;	O
else	O
if	O
(	O
opt	int
==	O
argc	int
-	O
1	int
)	O
error	function
(	O
1	int
,	O
0	int
,	O
required	pointer
,	O
'f'	O
)	O
;	O
else	O
tabspec	pointer
=	O
argv	pointer
[	O
++	O
opt	int
]	O
;	O
tabspec_type	enum
=	O
spec_file	int
;	O
break	O
;	O
case	O
arg_bad	int
:	O
default	O
:	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
tabspec	pointer
==	O
0	int
)	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
if	O
(	O
(	O
term	pointer
==	O
0	int
)	O
||	O
(	O
term	pointer
[	O
0	int
]	O
==	O
0	int
)	O
)	O
exit	function
(	O
0	int
)	O
;	O
prepare_termcap	function
(	O
term	pointer
)	O
;	O
tabs	pointer
=	O
(	O
int	O
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
int	O
)	O
*	O
term_width	int
)	O
;	O
switch	O
(	O
tabspec_type	enum
)	O
{	O
case	O
spec_every	int
:	O
every	int
=	O
a_to_i	function
(	O
tabspec	pointer
,	O
0	int
,	O
0	int
)	O
;	O
every_n_column	O
:	O
if	O
(	O
every	int
==	O
0	int
)	O
numtabs	int
=	O
0	int
;	O
else	O
{	O
int	O
col	int
,	O
ix	int
;	O
numtabs	int
=	O
term_width	int
/	O
every	int
;	O
for	O
(	O
ix	int
=	O
0	int
,	O
col	int
=	O
1	int
;	O
col	int
<=	O
term_width	int
;	O
ix	int
++	O
,	O
col	int
+=	O
every	int
)	O
tabs	pointer
[	O
ix	int
]	O
=	O
col	int
;	O
}	O
break	O
;	O
case	O
spec_file	int
:	O
{	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
line	pointer
;	O
fp	pointer
=	O
fopen	function
(	O
tabspec	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"cannot open `%s'"	pointer
,	O
tabspec	pointer
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
line	pointer
=	O
fgetline	function
(	O
fp	pointer
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
line	pointer
==	O
0	int
)	O
{	O
every	int
=	O
8	int
;	O
goto	O
every_n_column	O
;	O
}	O
else	O
{	O
int	O
first	int
;	O
char	O
*	O
next	pointer
;	O
first	int
=	O
1	int
;	O
tabspec	pointer
=	O
line	pointer
;	O
while	O
(	O
(	O
tabspec	pointer
=	O
parse_fspec_line	function
(	O
tabspec	pointer
,	O
first	int
,	O
&	O
next	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
first	int
=	O
0	int
;	O
if	O
(	O
*	O
tabspec	pointer
==	O
't'	O
)	O
{	O
numtabs	int
=	O
parse_tabspec	function
(	O
tabspec	pointer
+	O
1	int
,	O
tabs	pointer
,	O
term_width	int
)	O
;	O
free	function
(	O
line	pointer
)	O
;	O
goto	O
set_tabs	O
;	O
}	O
else	O
tabspec	pointer
=	O
next	pointer
;	O
}	O
free	function
(	O
line	pointer
)	O
;	O
every	int
=	O
8	int
;	O
goto	O
every_n_column	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
numtabs	int
=	O
parse_tabspec	function
(	O
tabspec	pointer
,	O
tabs	pointer
,	O
term_width	int
)	O
;	O
if	O
(	O
numtabs	int
<	O
0	int
)	O
usage	function
(	O
stderr	pointer
,	O
1	int
)	O
;	O
break	O
;	O
}	O
set_tabs	O
:	O
set_tabstops	function
(	O
term	pointer
,	O
tabs	pointer
,	O
numtabs	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
