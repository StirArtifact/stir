void	O
Ldirectory	function
(	O
void	O
)	O
;	O
void	O
coerce_to_filename	function
(	O
object	O
pathname	int
,	O
char	O
*	O
p	pointer
)	O
{	O
object	O
namestring	O
=	O
coerce_to_namestring	O
(	O
pathname	int
)	O
;	O
unsigned	O
e	int
=	O
namestring	O
->	O
st	O
.	O
st_fillp	O
;	O
char	O
*	O
q	pointer
=	O
namestring	O
->	O
st	O
.	O
st_self	O
,	O
*	O
qe	pointer
=	O
q	pointer
+	O
e	int
;	O
;	O
if	O
(	O
pathname	int
==	O
Cnil	O
)	O
FEerror	function
(	O
"NIL argument."	pointer
,	O
1	int
,	O
pathname	int
)	O
;	O
if	O
(	O
*	O
q	pointer
==	O
'~'	O
)	O
{	O
unsigned	O
m	int
=	O
0	int
;	O
char	O
*	O
s	pointer
=	O
++	O
q	pointer
,	O
*	O
c	pointer
;	O
for	O
(	O
;	O
s	pointer
<	O
qe	pointer
&&	O
*	O
s	pointer
!=	O
'/'	O
;	O
s	pointer
++	O
)	O
;	O
if	O
(	O
s	pointer
==	O
q	pointer
&&	O
(	O
c	pointer
=	O
getenv	function
(	O
"HOME"	pointer
)	O
)	O
)	O
pcopy	O
(	O
c	pointer
,	O
p	pointer
,	O
0	int
,	O
m	int
=	O
strlen	function
(	O
c	pointer
)	O
)	O
;	O
else	O
{	O
struct	O
passwd	O
*	O
pwent	pointer
;	O
if	O
(	O
s	pointer
==	O
q	pointer
)	O
pwent	pointer
=	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
else	O
{	O
*	O
s	pointer
=	O
0	int
;	O
pwent	pointer
=	O
getpwnam	function
(	O
q	pointer
)	O
;	O
*	O
s	pointer
=	O
'/'	O
;	O
}	O
if	O
(	O
!	O
pwent	pointer
)	O
FEerror	function
(	O
"Can't expand pathname ~a"	pointer
,	O
1	int
,	O
namestring	O
)	O
;	O
pcopy	O
(	O
pwent	pointer
->	O
pw_dir	O
,	O
p	pointer
,	O
0	int
,	O
m	int
=	O
strlen	function
(	O
pwent	pointer
->	O
pw_dir	O
)	O
)	O
;	O
}	O
pcopy	O
(	O
s	pointer
,	O
p	pointer
,	O
m	int
,	O
qe	pointer
-	O
s	pointer
)	O
;	O
}	O
else	O
pcopy	O
(	O
q	pointer
,	O
p	pointer
,	O
0	int
,	O
e	int
)	O
;	O
}	O
object	O
truename	function
(	O
object	O
pathname	int
)	O
{	O
register	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
char	O
filename	array
[	O
MAXPATHLEN	int
]	O
;	O
char	O
truefilename	array
[	O
MAXPATHLEN	int
]	O
;	O
char	O
current_directory	array
[	O
MAXPATHLEN	int
]	O
;	O
char	O
directory	array
[	O
MAXPATHLEN	int
]	O
;	O
massert	function
(	O
current_directory	array
==	O
getcwd	function
(	O
current_directory	array
,	O
sizeof	O
(	O
current_directory	array
)	O
)	O
)	O
;	O
coerce_to_filename	function
(	O
pathname	int
,	O
filename	array
)	O
;	O
for	O
(	O
p	pointer
=	O
filename	array
,	O
q	pointer
=	O
0	int
;	O
*	O
p	pointer
!=	O
'\0'	O
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
p	pointer
==	O
'/'	O
)	O
q	pointer
=	O
p	pointer
;	O
if	O
(	O
q	pointer
==	O
filename	array
)	O
{	O
q	pointer
++	O
;	O
p	pointer
=	O
"/"	pointer
;	O
}	O
else	O
if	O
(	O
q	pointer
==	O
0	int
)	O
{	O
q	pointer
=	O
filename	array
;	O
p	pointer
=	O
current_directory	array
;	O
}	O
else	O
{	O
*	O
q	pointer
++	O
=	O
'\0'	O
;	O
if	O
(	O
chdir	function
(	O
filename	array
)	O
<	O
0	int
)	O
FEerror	function
(	O
"Cannot get the truename of ~S."	pointer
,	O
1	int
,	O
pathname	int
)	O
;	O
p	pointer
=	O
getcwd	function
(	O
directory	array
,	O
sizeof	O
(	O
directory	array
)	O
)	O
;	O
}	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
'/'	O
&&	O
p	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
q	pointer
,	O
".."	pointer
)	O
==	O
0	int
)	O
strcpy	function
(	O
truefilename	array
,	O
"/."	pointer
)	O
;	O
else	O
sprintf	O
(	O
truefilename	array
,	O
"/%s"	pointer
,	O
q	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
q	pointer
,	O
"."	pointer
)	O
==	O
0	int
)	O
strcpy	function
(	O
truefilename	array
,	O
p	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
q	pointer
,	O
".."	pointer
)	O
==	O
0	int
)	O
{	O
for	O
(	O
q	pointer
=	O
p	pointer
+	O
strlen	function
(	O
p	pointer
)	O
;	O
*	O
--	O
q	pointer
!=	O
'/'	O
;	O
)	O
;	O
if	O
(	O
p	pointer
==	O
q	pointer
)	O
strcpy	function
(	O
truefilename	array
,	O
"/."	pointer
)	O
;	O
else	O
{	O
*	O
q	pointer
=	O
'\0'	O
;	O
strcpy	function
(	O
truefilename	array
,	O
p	pointer
)	O
;	O
*	O
q	pointer
=	O
'/'	O
;	O
}	O
}	O
else	O
sprintf	O
(	O
truefilename	array
,	O
"%s/%s"	pointer
,	O
p	pointer
,	O
q	pointer
)	O
;	O
massert	function
(	O
!	O
chdir	function
(	O
current_directory	array
)	O
)	O
;	O
vs_push	function
(	O
make_simple_string	function
(	O
truefilename	array
)	O
)	O
;	O
pathname	int
=	O
coerce_to_pathname	function
(	O
vs_head	O
)	O
;	O
vs_popp	O
;	O
return	O
(	O
pathname	int
)	O
;	O
}	O
object	O
sSAallow_gzipped_fileA	int
;	O
bool	O
file_exists	function
(	O
object	O
file	int
)	O
{	O
char	O
filename	array
[	O
MAXPATHLEN	int
]	O
;	O
struct	O
stat	function
filestatus	struct
;	O
coerce_to_filename	function
(	O
file	int
,	O
filename	array
)	O
;	O
if	O
(	O
stat	function
(	O
filename	array
,	O
&	O
filestatus	struct
)	O
>=	O
0	int
&&	O
!	O
S_ISDIR	function
(	O
filestatus	struct
.	O
st_mode	O
)	O
)	O
{	O
return	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
sSAallow_gzipped_fileA	int
->	O
s	pointer
.	O
s_dbind	O
!=	O
sLnil	O
&&	O
(	O
strcat	function
(	O
filename	array
,	O
".gz"	pointer
)	O
,	O
stat	function
(	O
filename	array
,	O
&	O
filestatus	struct
)	O
>=	O
0	int
&&	O
!	O
S_ISDIR	function
(	O
filestatus	struct
.	O
st_mode	O
)	O
)	O
)	O
return	O
TRUE	O
;	O
else	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
FILE	O
*	O
fopen_not_dir	function
(	O
char	O
*	O
filename	array
,	O
char	O
*	O
option	pointer
)	O
{	O
struct	O
stat	function
ss	struct
;	O
if	O
(	O
!	O
stat	function
(	O
filename	array
,	O
&	O
ss	struct
)	O
&&	O
S_ISDIR	function
(	O
ss	struct
.	O
st_mode	O
)	O
)	O
return	O
NULL	O
;	O
else	O
return	O
fopen	function
(	O
filename	array
,	O
option	pointer
)	O
;	O
}	O
FILE	O
*	O
backup_fopen	function
(	O
char	O
*	O
filename	array
,	O
char	O
*	O
option	pointer
)	O
{	O
char	O
backupfilename	array
[	O
MAXPATHLEN	int
]	O
;	O
char	O
command	array
[	O
MAXPATHLEN	int
*	O
2	int
]	O
;	O
strcat	function
(	O
strcpy	function
(	O
backupfilename	array
,	O
filename	array
)	O
,	O
".BAK"	pointer
)	O
;	O
sprintf	O
(	O
command	array
,	O
"mv %s %s"	pointer
,	O
filename	array
,	O
backupfilename	array
)	O
;	O
msystem	function
(	O
command	array
)	O
;	O
return	O
(	O
fopen	function
(	O
filename	array
,	O
option	pointer
)	O
)	O
;	O
}	O
int	O
file_len	function
(	O
FILE	O
*	O
fp	pointer
)	O
{	O
struct	O
stat	function
filestatus	struct
;	O
if	O
(	O
fstat	function
(	O
fileno	function
(	O
fp	pointer
)	O
,	O
&	O
filestatus	struct
)	O
==	O
0	int
)	O
return	O
(	O
filestatus	struct
.	O
st_size	O
)	O
;	O
else	O
return	O
0	int
;	O
}	O
LFD	function
(	O
Ltruename	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_or_pathname_string_symbol_stream	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
truename	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
LFD	function
(	O
Lrename_file	int
)	O
(	O
void	O
)	O
{	O
char	O
filename	array
[	O
MAXPATHLEN	int
]	O
;	O
char	O
newfilename	array
[	O
MAXPATHLEN	int
]	O
;	O
check_arg	function
(	O
2	int
)	O
;	O
check_type_or_pathname_string_symbol_stream	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
check_type_or_Pathname_string_symbol	function
(	O
&	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
coerce_to_filename	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
filename	array
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
coerce_to_pathname	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
[	O
1	int
]	O
=	O
coerce_to_pathname	function
(	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
vs_base	O
[	O
1	int
]	O
=	O
merge_pathnames	function
(	O
vs_base	O
[	O
1	int
]	O
,	O
vs_base	O
[	O
0	int
]	O
,	O
Cnil	O
)	O
;	O
coerce_to_filename	function
(	O
vs_base	O
[	O
1	int
]	O
,	O
newfilename	array
)	O
;	O
sprintf	O
(	O
command	array
,	O
"mv %s %s"	pointer
,	O
filename	array
,	O
newfilename	array
)	O
;	O
msystem	function
(	O
command	array
)	O
;	O
vs_push	function
(	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
vs_push	function
(	O
truename	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
)	O
;	O
vs_push	function
(	O
truename	function
(	O
vs_base	O
[	O
1	int
]	O
)	O
)	O
;	O
vs_base	O
+=	O
2	int
;	O
}	O
DEF_ORDINARY	function
(	O
"DIRECTORY"	pointer
,	O
sKdirectory	O
,	O
KEYWORD	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"LINK"	pointer
,	O
sKlink	O
,	O
KEYWORD	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"FILE"	pointer
,	O
sKfile	O
,	O
KEYWORD	O
,	O
""	pointer
)	O
;	O
int	O
gcl_putenv	function
(	O
char	O
*	O
s	pointer
)	O
{	O
return	O
putenv	function
(	O
s	pointer
)	O
;	O
}	O
char	O
*	O
gcl_strncpy	function
(	O
char	O
*	O
d	pointer
,	O
const	O
char	O
*	O
s	pointer
,	O
size_t	long
z	long
)	O
{	O
return	O
strncpy	function
(	O
d	pointer
,	O
s	pointer
,	O
z	long
)	O
;	O
}	O
char	O
*	O
gcl_strncpy_chk	function
(	O
size_t	long
z	long
)	O
{	O
char	O
a	array
[	O
10	int
]	O
,	O
b	array
[	O
10	int
]	O
;	O
return	O
strncpy	function
(	O
a	array
,	O
b	array
,	O
z	long
)	O
;	O
}	O
uid_t	int
gcl_geteuid	function
(	O
void	O
)	O
{	O
return	O
geteuid	function
(	O
)	O
;	O
}	O
uid_t	int
gcl_getegid	function
(	O
void	O
)	O
{	O
return	O
getegid	function
(	O
)	O
;	O
}	O
int	O
gcl_dup2	function
(	O
int	O
o	int
,	O
int	O
n	int
)	O
{	O
return	O
dup2	function
(	O
o	int
,	O
n	int
)	O
;	O
}	O
char	O
*	O
gcl_gets	function
(	O
char	O
*	O
s	pointer
,	O
int	O
z	long
)	O
{	O
return	O
fgets	function
(	O
s	pointer
,	O
z	long
,	O
stdin	O
)	O
;	O
}	O
int	O
gcl_puts	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
int	O
i	int
=	O
fputs	function
(	O
s	pointer
,	O
stdout	O
)	O
;	O
fflush	function
(	O
stdout	O
)	O
;	O
return	O
i	int
;	O
}	O
int	O
gcl_feof	function
(	O
void	O
*	O
v	pointer
)	O
{	O
return	O
feof	function
(	O
(	O
(	O
FILE	O
*	O
)	O
v	pointer
)	O
)	O
;	O
}	O
int	O
gcl_getc	function
(	O
void	O
*	O
v	pointer
)	O
{	O
return	O
getc	function
(	O
(	O
(	O
FILE	O
*	O
)	O
v	pointer
)	O
)	O
;	O
}	O
int	O
gcl_putc	function
(	O
int	O
i	int
,	O
void	O
*	O
v	pointer
)	O
{	O
return	O
putc	function
(	O
i	int
,	O
(	O
(	O
FILE	O
*	O
)	O
v	pointer
)	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"STAT"	pointer
,	O
object	O
,	O
fSstat	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
path	O
)	O
,	O
""	pointer
)	O
{	O
char	O
filename	array
[	O
4096	int
]	O
;	O
struct	O
stat	function
ss	struct
;	O
bzero	function
(	O
filename	array
,	O
sizeof	O
(	O
filename	array
)	O
)	O
;	O
coerce_to_filename	function
(	O
path	O
,	O
filename	array
)	O
;	O
if	O
(	O
lstat	function
(	O
filename	array
,	O
&	O
ss	struct
)	O
)	O
RETURN1	function
(	O
Cnil	O
)	O
;	O
else	O
{	O
RETURN1	function
(	O
list	function
(	O
3	int
,	O
S_ISDIR	function
(	O
ss	struct
.	O
st_mode	O
)	O
?	O
sKdirectory	O
:	O
(	O
S_ISLNK	function
(	O
ss	struct
.	O
st_mode	O
)	O
?	O
sKlink	O
:	O
sKfile	O
)	O
,	O
make_fixnum	function
(	O
ss	struct
.	O
st_size	O
)	O
,	O
make_fixnum	function
(	O
ss	struct
.	O
st_ctime	O
)	O
)	O
)	O
;	O
}	O
}	O
DEFUN_NEW	function
(	O
"SETENV"	pointer
,	O
object	O
,	O
fSsetenv	O
,	O
SI	O
,	O
2	int
,	O
2	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
variable	O
,	O
object	O
value	O
)	O
,	O
"Set environment VARIABLE to VALUE"	pointer
)	O
{	O
int	O
res	int
=	O
-	O
1	int
;	O
RETURN1	function
(	O
(	O
res	int
==	O
0	int
?	O
Ct	O
:	O
Cnil	O
)	O
)	O
;	O
}	O
DEFUNO_NEW	function
(	O
"DELETE-FILE"	pointer
,	O
object	O
,	O
fLdelete_file	O
,	O
LISP	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Ldelete_file	O
,	O
(	O
object	O
path	O
)	O
,	O
""	pointer
)	O
{	O
char	O
filename	array
[	O
MAXPATHLEN	int
]	O
;	O
check_type_or_pathname_string_symbol_stream	function
(	O
&	O
path	O
)	O
;	O
coerce_to_filename	function
(	O
path	O
,	O
filename	array
)	O
;	O
if	O
(	O
unlink	function
(	O
filename	array
)	O
<	O
0	int
&&	O
rmdir	function
(	O
filename	array
)	O
<	O
0	int
)	O
FEerror	function
(	O
"Cannot delete the file ~S: ~s."	pointer
,	O
2	int
,	O
path	O
,	O
make_simple_string	function
(	O
strerror	function
(	O
errno	O
)	O
)	O
)	O
;	O
path	O
=	O
Ct	O
;	O
RETURN1	function
(	O
path	O
)	O
;	O
}	O
LFD	function
(	O
Lprobe_file	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_or_pathname_string_symbol_stream	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
file_exists	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
truename	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
else	O
vs_base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
}	O
LFD	function
(	O
Lfile_write_date	int
)	O
(	O
void	O
)	O
{	O
char	O
filename	array
[	O
MAXPATHLEN	int
]	O
;	O
struct	O
stat	function
filestatus	struct
;	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_or_pathname_string_symbol_stream	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
coerce_to_filename	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
filename	array
)	O
;	O
if	O
(	O
stat	function
(	O
filename	array
,	O
&	O
filestatus	struct
)	O
<	O
0	int
||	O
S_ISDIR	function
(	O
filestatus	struct
.	O
st_mode	O
)	O
)	O
{	O
vs_base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
return	O
;	O
}	O
vs_base	O
[	O
0	int
]	O
=	O
unix_time_to_universal_time	function
(	O
filestatus	struct
.	O
st_mtime	O
)	O
;	O
}	O
LFD	function
(	O
Lfile_author	int
)	O
(	O
void	O
)	O
{	O
char	O
filename	array
[	O
MAXPATHLEN	int
]	O
;	O
struct	O
stat	function
filestatus	struct
;	O
struct	O
passwd	O
*	O
pwent	pointer
;	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_or_pathname_string_symbol_stream	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
coerce_to_filename	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
filename	array
)	O
;	O
if	O
(	O
stat	function
(	O
filename	array
,	O
&	O
filestatus	struct
)	O
<	O
0	int
||	O
S_ISDIR	function
(	O
filestatus	struct
.	O
st_mode	O
)	O
)	O
{	O
vs_base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
return	O
;	O
}	O
pwent	pointer
=	O
getpwuid	function
(	O
filestatus	struct
.	O
st_uid	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
make_simple_string	function
(	O
pwent	pointer
->	O
pw_name	O
)	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Luser_homedir_pathname	int
)	O
(	O
void	O
)	O
{	O
char	O
filename	array
[	O
MAXPATHLEN	int
]	O
;	O
coerce_to_filename	function
(	O
make_simple_string	function
(	O
"~/"	pointer
)	O
,	O
filename	array
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
coerce_to_pathname	function
(	O
make_simple_string	function
(	O
filename	array
)	O
)	O
;	O
vs_top	O
=	O
vs_base	O
+	O
1	int
;	O
}	O
DEFUN_NEW	function
(	O
"OPENDIR"	pointer
,	O
object	O
,	O
fSopendir	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
IO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
x	O
)	O
,	O
""	pointer
)	O
{	O
DIR	O
*	O
d	pointer
;	O
char	O
filename	array
[	O
MAXPATHLEN	int
]	O
;	O
check_type_string	function
(	O
&	O
x	O
)	O
;	O
memcpy	function
(	O
filename	array
,	O
x	O
->	O
st	O
.	O
st_self	O
,	O
x	O
->	O
st	O
.	O
st_fillp	O
)	O
;	O
filename	array
[	O
x	O
->	O
st	O
.	O
st_fillp	O
]	O
=	O
0	int
;	O
d	pointer
=	O
opendir	function
(	O
filename	array
)	O
;	O
return	O
(	O
object	O
)	O
d	pointer
;	O
}	O
DEFUN_NEW	function
(	O
"READDIR"	pointer
,	O
object	O
,	O
fSreaddir	O
,	O
SI	O
,	O
2	int
,	O
2	int
,	O
NONE	O
,	O
OI	O
,	O
IO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
fixnum	O
x	O
,	O
fixnum	O
y	O
)	O
,	O
""	pointer
)	O
{	O
struct	O
dirent	O
*	O
e	int
;	O
object	O
z	long
;	O
if	O
(	O
!	O
x	O
)	O
RETURN1	function
(	O
Cnil	O
)	O
;	O
e	int
=	O
readdir	function
(	O
(	O
DIR	O
*	O
)	O
x	O
)	O
;	O
RETURN1	function
(	O
e	int
?	O
make_simple_string	function
(	O
e	int
->	O
d_name	O
)	O
:	O
Cnil	O
)	O
;	O
if	O
(	O
!	O
e	int
)	O
RETURN1	function
(	O
Cnil	O
)	O
;	O
z	long
=	O
make_simple_string	function
(	O
e	int
->	O
d_name	O
)	O
;	O
RETURN1	function
(	O
z	long
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"CLOSEDIR"	pointer
,	O
object	O
,	O
fSclosedir	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OI	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
fixnum	O
x	O
)	O
,	O
""	pointer
)	O
{	O
closedir	function
(	O
(	O
DIR	O
*	O
)	O
x	O
)	O
;	O
return	O
Cnil	O
;	O
}	O
DEFUN_NEW	function
(	O
"MKDIR"	pointer
,	O
object	O
,	O
fSmkdir	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
x	O
)	O
,	O
""	pointer
)	O
{	O
char	O
filename	array
[	O
MAXPATHLEN	int
]	O
;	O
check_type_string	function
(	O
&	O
x	O
)	O
;	O
memcpy	function
(	O
filename	array
,	O
x	O
->	O
st	O
.	O
st_self	O
,	O
x	O
->	O
st	O
.	O
st_fillp	O
)	O
;	O
filename	array
[	O
x	O
->	O
st	O
.	O
st_fillp	O
]	O
=	O
0	int
;	O
if	O
(	O
mkdir	function
(	O
filename	array
,	O
01777	int
)	O
<	O
0	int
)	O
FEerror	function
(	O
"Cannot make the directory ~S."	pointer
,	O
1	int
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
RETURN1	function
(	O
x	O
)	O
;	O
}	O
static	O
void	O
FFN	function
(	O
siLchdir	int
)	O
(	O
void	O
)	O
{	O
char	O
filename	array
[	O
MAXPATHLEN	int
]	O
;	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_or_pathname_string_symbol_stream	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
coerce_to_filename	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
filename	array
)	O
;	O
if	O
(	O
chdir	function
(	O
filename	array
)	O
<	O
0	int
)	O
FEerror	function
(	O
"Can't change the current directory to ~S."	pointer
,	O
1	int
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
void	O
gcl_init_unixfsys	function
(	O
void	O
)	O
{	O
make_function	function
(	O
"TRUENAME"	pointer
,	O
Ltruename	int
)	O
;	O
make_function	function
(	O
"RENAME-FILE"	pointer
,	O
Lrename_file	int
)	O
;	O
make_function	function
(	O
"DELETE-FILE"	pointer
,	O
Ldelete_file	O
)	O
;	O
make_function	function
(	O
"PROBE-FILE"	pointer
,	O
Lprobe_file	int
)	O
;	O
make_function	function
(	O
"FILE-WRITE-DATE"	pointer
,	O
Lfile_write_date	int
)	O
;	O
make_function	function
(	O
"FILE-AUTHOR"	pointer
,	O
Lfile_author	int
)	O
;	O
make_function	function
(	O
"USER-HOMEDIR-PATHNAME"	pointer
,	O
Luser_homedir_pathname	int
)	O
;	O
make_function	function
(	O
"DIRECTORY"	pointer
,	O
Ldirectory	function
)	O
;	O
make_si_function	function
(	O
"CHDIR"	pointer
,	O
siLchdir	int
)	O
;	O
}	O
