int	O
main	function
(	O
void	O
)	O
{	O
char	O
line	int
[	O
MAXLINE	int
]	O
;	O
int	O
patno	int
=	O
0	int
;	O
int	O
p	int
;	O
char	O
vertex	pointer
[	O
MAXDIMEN	int
]	O
[	O
MAXDIMEN	int
]	O
;	O
signed	O
char	O
marginal	char
[	O
MAXDIMEN	int
]	O
[	O
MAXDIMEN	int
]	O
;	O
signed	O
char	O
edge	char
[	O
MAXDIMEN	int
]	O
[	O
MAXDIMEN	int
]	O
;	O
unsigned	O
char	O
flags	char
[	O
MAXDIMEN	int
]	O
[	O
MAXDIMEN	int
]	O
;	O
int	O
neighbors	int
[	O
MAXSIZE	int
]	O
;	O
int	O
k	int
,	O
l	int
,	O
h	int
;	O
int	O
m	int
=	O
0	int
,	O
n	int
=	O
0	int
;	O
int	O
vi	array
[	O
MAXSIZE	int
]	O
;	O
int	O
vj	array
[	O
MAXSIZE	int
]	O
;	O
int	O
eye_number	array
[	O
MAXPATNO	int
]	O
;	O
int	O
esize	int
[	O
MAXPATNO	int
]	O
;	O
int	O
msize	int
[	O
MAXPATNO	int
]	O
;	O
int	O
value_a	array
[	O
MAXPATNO	int
]	O
;	O
int	O
value_b	array
[	O
MAXPATNO	int
]	O
;	O
int	O
value_c	array
[	O
MAXPATNO	int
]	O
;	O
int	O
value_d	array
[	O
MAXPATNO	int
]	O
;	O
int	O
ends	int
[	O
MAXPATNO	int
]	O
;	O
int	O
two_neighbors	int
[	O
MAXPATNO	int
]	O
;	O
int	O
three_neighbors	int
[	O
MAXPATNO	int
]	O
;	O
int	O
num_attacks	int
=	O
0	int
;	O
int	O
num_defenses	int
=	O
0	int
;	O
int	O
debug	int
=	O
0	int
;	O
int	O
fatal_errors	int
=	O
0	int
;	O
printf	function
(	O
"/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\\n * This is GNU Go, a Go program. Contact gnugo@gnu.org, or see       *\n * http://www.gnu.org/software/gnugo/ for more information.          *\n *                                                                   *\n * Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006 and 2007 *\n * by the Free Software Foundation.                                  *\n *                                                                   *\n * This program is free software; you can redistribute it and/or     *\n * modify it under the terms of the GNU General Public License as    *\n * published by the Free Software Foundation - version 3             *\n * or (at your option) any later version                             *\n *                                                                   *\n * This program is distributed in the hope that it will be useful,   *\n * but WITHOUT ANY WARRANTY; without even the implied warranty of    *\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     *\n * GNU General Public License in file COPYING for more details.      *\n *                                                                   *\n * You should have received a copy of the GNU General Public         *\n * License along with this program; if not, write to the Free        *\n * Software Foundation, Inc., 51 Franklin Street, Fifth Floor,       *\n * Boston, MA 02111, USA.                                            *\n\\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n"	pointer
)	O
;	O
printf	function
(	O
"/* This file is automatically generated by mkeyes. Do not\n"	pointer
)	O
;	O
printf	function
(	O
" * edit it directly. Instead, edit the eye shape database.\n"	pointer
)	O
;	O
printf	function
(	O
" */\n\n"	pointer
)	O
;	O
printf	function
(	O
"#include <stdio.h> /* for NULL */\n"	pointer
)	O
;	O
printf	function
(	O
"#include \"eyes.h\"\n\n"	pointer
)	O
;	O
memset	function
(	O
ends	int
,	O
0	int
,	O
sizeof	O
(	O
ends	int
)	O
)	O
;	O
memset	function
(	O
two_neighbors	int
,	O
0	int
,	O
sizeof	O
(	O
two_neighbors	int
)	O
)	O
;	O
memset	function
(	O
three_neighbors	int
,	O
0	int
,	O
sizeof	O
(	O
three_neighbors	int
)	O
)	O
;	O
memset	function
(	O
esize	int
,	O
0	int
,	O
sizeof	O
(	O
esize	int
)	O
)	O
;	O
while	O
(	O
fgets	function
(	O
line	int
,	O
MAXLINE	int
,	O
stdin	pointer
)	O
&&	O
!	O
fatal_errors	int
)	O
{	O
int	O
last	pointer
=	O
strlen	function
(	O
line	int
)	O
-	O
1	int
;	O
if	O
(	O
line	int
[	O
last	pointer
]	O
!=	O
'\n'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"mkeyes: line truncated: %s\n"	pointer
,	O
line	int
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
last	pointer
--	O
;	O
last	pointer
>=	O
0	int
&&	O
isspace	function
(	O
(	O
int	O
)	O
line	int
[	O
last	pointer
]	O
)	O
;	O
last	pointer
--	O
)	O
{	O
line	int
[	O
last	pointer
]	O
=	O
'\n'	O
;	O
line	int
[	O
last	pointer
+	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
sscanf	function
(	O
line	int
,	O
"Pattern %d"	pointer
,	O
&	O
p	int
)	O
)	O
{	O
eye_number	array
[	O
patno	int
]	O
=	O
p	int
;	O
if	O
(	O
patno	int
>	O
0	int
&&	O
eye_number	array
[	O
patno	int
]	O
<=	O
eye_number	array
[	O
patno	int
-	O
1	int
]	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"mkeyes: Pattern %d out of sequence\n"	pointer
,	O
eye_number	array
[	O
patno	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"parsing pattern %d\n"	pointer
,	O
eye_number	array
[	O
patno	int
]	O
)	O
;	O
memset	function
(	O
vertex	pointer
,	O
0	int
,	O
sizeof	O
(	O
vertex	pointer
)	O
)	O
;	O
memset	function
(	O
marginal	char
,	O
0	int
,	O
sizeof	O
(	O
marginal	char
)	O
)	O
;	O
memset	function
(	O
edge	char
,	O
0	int
,	O
sizeof	O
(	O
edge	char
)	O
)	O
;	O
memset	function
(	O
flags	char
,	O
0	int
,	O
sizeof	O
(	O
flags	char
)	O
)	O
;	O
m	int
=	O
0	int
;	O
esize	int
[	O
patno	int
]	O
=	O
0	int
;	O
msize	int
[	O
patno	int
]	O
=	O
0	int
;	O
num_attacks	int
=	O
0	int
;	O
num_defenses	int
=	O
0	int
;	O
continue	O
;	O
}	O
if	O
(	O
strncmp	function
(	O
"#"	pointer
,	O
line	int
,	O
1	int
)	O
==	O
0	int
||	O
strncmp	function
(	O
"\n"	pointer
,	O
line	int
,	O
1	int
)	O
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
strncmp	function
(	O
":"	pointer
,	O
line	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
MAXDIMEN	int
&&	O
strncmp	function
(	O
"\n"	pointer
,	O
line	int
+	O
n	int
,	O
1	int
)	O
;	O
n	int
++	O
)	O
{	O
if	O
(	O
line	int
[	O
n	int
]	O
==	O
' '	O
||	O
line	int
[	O
n	int
]	O
==	O
'\r'	O
||	O
line	int
[	O
n	int
]	O
==	O
'+'	O
)	O
continue	O
;	O
if	O
(	O
line	int
[	O
n	int
]	O
==	O
'|'	O
)	O
{	O
if	O
(	O
n	int
==	O
0	int
)	O
edge	char
[	O
m	int
]	O
[	O
n	int
+	O
1	int
]	O
++	O
;	O
else	O
edge	char
[	O
m	int
]	O
[	O
n	int
-	O
1	int
]	O
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
line	int
[	O
n	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
m	int
==	O
0	int
)	O
edge	char
[	O
m	int
+	O
1	int
]	O
[	O
n	int
]	O
++	O
;	O
else	O
edge	char
[	O
m	int
-	O
1	int
]	O
[	O
n	int
]	O
++	O
;	O
continue	O
;	O
}	O
vi	array
[	O
esize	int
[	O
patno	int
]	O
]	O
=	O
m	int
;	O
vj	array
[	O
esize	int
[	O
patno	int
]	O
]	O
=	O
n	int
;	O
vertex	pointer
[	O
m	int
]	O
[	O
n	int
]	O
=	O
line	int
[	O
n	int
]	O
;	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%c"	pointer
,	O
line	int
[	O
n	int
]	O
)	O
;	O
switch	O
(	O
line	int
[	O
n	int
]	O
)	O
{	O
case	O
'.'	O
:	O
marginal	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
0	int
;	O
flags	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
CAN_BE_EMPTY	int
;	O
break	O
;	O
case	O
'!'	O
:	O
msize	int
[	O
patno	int
]	O
++	O
;	O
marginal	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
1	int
;	O
flags	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
CAN_BE_EMPTY	int
;	O
break	O
;	O
case	O
'@'	O
:	O
msize	int
[	O
patno	int
]	O
++	O
;	O
marginal	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
1	int
;	O
flags	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
CAN_BE_EMPTY	int
|	O
EYE_DEFENSE_POINT	int
|	O
EYE_ATTACK_POINT	int
;	O
num_attacks	int
++	O
;	O
num_defenses	int
++	O
;	O
break	O
;	O
case	O
'$'	O
:	O
msize	int
[	O
patno	int
]	O
++	O
;	O
marginal	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
1	int
;	O
flags	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
CAN_CONTAIN_STONE	int
;	O
break	O
;	O
case	O
'('	O
:	O
msize	int
[	O
patno	int
]	O
++	O
;	O
marginal	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
1	int
;	O
flags	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
CAN_BE_EMPTY	int
|	O
EYE_ATTACK_POINT	int
;	O
num_attacks	int
++	O
;	O
break	O
;	O
case	O
')'	O
:	O
msize	int
[	O
patno	int
]	O
++	O
;	O
marginal	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
1	int
;	O
flags	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
CAN_BE_EMPTY	int
|	O
EYE_DEFENSE_POINT	int
;	O
num_defenses	int
++	O
;	O
break	O
;	O
case	O
'x'	O
:	O
marginal	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
0	int
;	O
flags	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
CAN_BE_EMPTY	int
|	O
CAN_CONTAIN_STONE	int
;	O
break	O
;	O
case	O
'*'	O
:	O
marginal	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
0	int
;	O
flags	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
CAN_BE_EMPTY	int
|	O
EYE_ATTACK_POINT	int
|	O
EYE_DEFENSE_POINT	int
;	O
num_attacks	int
++	O
;	O
num_defenses	int
++	O
;	O
break	O
;	O
case	O
'<'	O
:	O
marginal	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
0	int
;	O
flags	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
CAN_BE_EMPTY	int
|	O
EYE_ATTACK_POINT	int
;	O
num_attacks	int
++	O
;	O
break	O
;	O
case	O
'>'	O
:	O
marginal	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
0	int
;	O
flags	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
CAN_BE_EMPTY	int
|	O
EYE_DEFENSE_POINT	int
;	O
num_defenses	int
++	O
;	O
break	O
;	O
case	O
'X'	O
:	O
marginal	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
0	int
;	O
flags	char
[	O
m	int
]	O
[	O
n	int
]	O
=	O
CAN_CONTAIN_STONE	int
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"mkeyes: invalid character %c in pattern %d\n"	pointer
,	O
line	int
[	O
n	int
]	O
,	O
eye_number	array
[	O
patno	int
]	O
)	O
;	O
fatal_errors	int
++	O
;	O
break	O
;	O
}	O
esize	int
[	O
patno	int
]	O
++	O
;	O
}	O
m	int
++	O
;	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
else	O
{	O
sscanf	function
(	O
line	int
,	O
":%1d%1d%1d%1d"	pointer
,	O
&	O
value_a	array
[	O
patno	int
]	O
,	O
&	O
value_b	array
[	O
patno	int
]	O
,	O
&	O
value_c	array
[	O
patno	int
]	O
,	O
&	O
value_d	array
[	O
patno	int
]	O
)	O
;	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"value=%d%d%d%d\n"	pointer
,	O
value_a	array
[	O
patno	int
]	O
,	O
value_b	array
[	O
patno	int
]	O
,	O
value_c	array
[	O
patno	int
]	O
,	O
value_d	array
[	O
patno	int
]	O
)	O
;	O
if	O
(	O
value_b	array
[	O
patno	int
]	O
!=	O
value_c	array
[	O
patno	int
]	O
)	O
{	O
if	O
(	O
num_attacks	int
==	O
0	int
||	O
num_defenses	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"mkeyes: missing attack or defense point in pattern %d\n"	pointer
,	O
eye_number	array
[	O
patno	int
]	O
)	O
;	O
fatal_errors	int
++	O
;	O
}	O
}	O
if	O
(	O
value_b	array
[	O
patno	int
]	O
==	O
value_c	array
[	O
patno	int
]	O
)	O
{	O
if	O
(	O
num_attacks	int
>	O
0	int
||	O
num_defenses	int
>	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"mkeyes: attack or defense point in settled pattern %d\n"	pointer
,	O
eye_number	array
[	O
patno	int
]	O
)	O
;	O
fatal_errors	int
++	O
;	O
}	O
}	O
printf	function
(	O
"static struct eye_vertex eye%d[] = {\n"	pointer
,	O
eye_number	array
[	O
patno	int
]	O
)	O
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
esize	int
[	O
patno	int
]	O
;	O
l	int
++	O
)	O
{	O
int	O
ni	array
[	O
4	int
]	O
;	O
int	O
nj	array
[	O
4	int
]	O
;	O
int	O
nb	array
[	O
4	int
]	O
;	O
int	O
mx	array
[	O
MAXDIMEN	int
]	O
[	O
MAXDIMEN	int
]	O
;	O
int	O
count	int
=	O
0	int
;	O
int	O
i	int
=	O
vi	array
[	O
l	int
]	O
;	O
int	O
j	int
=	O
vj	array
[	O
l	int
]	O
;	O
memset	function
(	O
mx	array
,	O
-	O
1	int
,	O
sizeof	O
(	O
mx	array
)	O
)	O
;	O
neighbors	int
[	O
l	int
]	O
=	O
0	int
;	O
for	O
(	O
h	int
=	O
0	int
;	O
h	int
<	O
4	int
;	O
h	int
++	O
)	O
{	O
ni	array
[	O
h	int
]	O
=	O
-	O
1	int
;	O
nj	array
[	O
h	int
]	O
=	O
-	O
1	int
;	O
nb	array
[	O
h	int
]	O
=	O
-	O
1	int
;	O
}	O
mx	array
[	O
i	int
]	O
[	O
j	int
]	O
=	O
0	int
;	O
if	O
(	O
i	int
>	O
0	int
&&	O
vertex	pointer
[	O
i	int
-	O
1	int
]	O
[	O
j	int
]	O
)	O
{	O
ni	array
[	O
neighbors	int
[	O
l	int
]	O
]	O
=	O
i	int
-	O
1	int
;	O
nj	array
[	O
neighbors	int
[	O
l	int
]	O
]	O
=	O
j	int
;	O
neighbors	int
[	O
l	int
]	O
++	O
;	O
count	int
++	O
;	O
mx	array
[	O
i	int
-	O
1	int
]	O
[	O
j	int
]	O
=	O
l	int
;	O
}	O
if	O
(	O
i	int
<	O
MAXDIMEN	int
-	O
1	int
&&	O
vertex	pointer
[	O
i	int
+	O
1	int
]	O
[	O
j	int
]	O
)	O
{	O
ni	array
[	O
neighbors	int
[	O
l	int
]	O
]	O
=	O
i	int
+	O
1	int
;	O
nj	array
[	O
neighbors	int
[	O
l	int
]	O
]	O
=	O
j	int
;	O
neighbors	int
[	O
l	int
]	O
++	O
;	O
count	int
++	O
;	O
mx	array
[	O
i	int
+	O
1	int
]	O
[	O
j	int
]	O
=	O
l	int
;	O
}	O
if	O
(	O
j	int
>	O
0	int
&&	O
vertex	pointer
[	O
i	int
]	O
[	O
j	int
-	O
1	int
]	O
)	O
{	O
ni	array
[	O
neighbors	int
[	O
l	int
]	O
]	O
=	O
i	int
;	O
nj	array
[	O
neighbors	int
[	O
l	int
]	O
]	O
=	O
j	int
-	O
1	int
;	O
neighbors	int
[	O
l	int
]	O
++	O
;	O
mx	array
[	O
i	int
]	O
[	O
j	int
-	O
1	int
]	O
=	O
l	int
;	O
}	O
if	O
(	O
j	int
<	O
MAXDIMEN	int
-	O
1	int
&&	O
vertex	pointer
[	O
i	int
]	O
[	O
j	int
+	O
1	int
]	O
)	O
{	O
ni	array
[	O
neighbors	int
[	O
l	int
]	O
]	O
=	O
i	int
;	O
nj	array
[	O
neighbors	int
[	O
l	int
]	O
]	O
=	O
j	int
+	O
1	int
;	O
neighbors	int
[	O
l	int
]	O
++	O
;	O
mx	array
[	O
i	int
]	O
[	O
j	int
+	O
1	int
]	O
=	O
l	int
;	O
}	O
if	O
(	O
neighbors	int
[	O
l	int
]	O
==	O
1	int
)	O
ends	int
[	O
patno	int
]	O
++	O
;	O
else	O
if	O
(	O
neighbors	int
[	O
l	int
]	O
==	O
2	int
)	O
two_neighbors	int
[	O
patno	int
]	O
++	O
;	O
else	O
if	O
(	O
neighbors	int
[	O
l	int
]	O
==	O
3	int
)	O
three_neighbors	int
[	O
patno	int
]	O
++	O
;	O
for	O
(	O
h	int
=	O
0	int
;	O
h	int
<	O
esize	int
[	O
patno	int
]	O
;	O
h	int
++	O
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
if	O
(	O
ni	array
[	O
k	int
]	O
!=	O
-	O
1	int
&&	O
vi	array
[	O
h	int
]	O
==	O
ni	array
[	O
k	int
]	O
&&	O
vj	array
[	O
h	int
]	O
==	O
nj	array
[	O
k	int
]	O
)	O
nb	array
[	O
k	int
]	O
=	O
h	int
;	O
}	O
printf	function
(	O
"  {%d, %d, %2d, %d, {%2d, %2d, %2d, %2d}}"	pointer
,	O
marginal	char
[	O
i	int
]	O
[	O
j	int
]	O
,	O
(	O
int	O
)	O
edge	char
[	O
i	int
]	O
[	O
j	int
]	O
,	O
(	O
int	O
)	O
flags	char
[	O
i	int
]	O
[	O
j	int
]	O
,	O
neighbors	int
[	O
l	int
]	O
,	O
nb	array
[	O
0	int
]	O
,	O
nb	array
[	O
1	int
]	O
,	O
nb	array
[	O
2	int
]	O
,	O
nb	array
[	O
3	int
]	O
)	O
;	O
if	O
(	O
l	int
<	O
esize	int
[	O
patno	int
]	O
-	O
1	int
)	O
printf	function
(	O
",\n"	pointer
)	O
;	O
else	O
printf	function
(	O
"\n};\n\n"	pointer
)	O
;	O
}	O
patno	int
++	O
;	O
if	O
(	O
patno	int
>=	O
MAXPATNO	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"mkeyes: Too many eye patterns. Increase MAXPATNO in mkeyes.c\n"	pointer
)	O
;	O
fatal_errors	int
++	O
;	O
}	O
}	O
}	O
printf	function
(	O
"\nstruct eye_graph graphs[] = {\n"	pointer
)	O
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
patno	int
;	O
l	int
++	O
)	O
{	O
printf	function
(	O
"  {eye%d, %d, %d, %d, %d, %d, %d, {%d, %d, %d, %d}}"	pointer
,	O
eye_number	array
[	O
l	int
]	O
,	O
eye_number	array
[	O
l	int
]	O
,	O
esize	int
[	O
l	int
]	O
,	O
msize	int
[	O
l	int
]	O
,	O
ends	int
[	O
l	int
]	O
,	O
two_neighbors	int
[	O
l	int
]	O
,	O
three_neighbors	int
[	O
l	int
]	O
,	O
value_a	array
[	O
l	int
]	O
,	O
value_b	array
[	O
l	int
]	O
,	O
value_c	array
[	O
l	int
]	O
,	O
value_d	array
[	O
l	int
]	O
)	O
;	O
if	O
(	O
l	int
<	O
patno	int
-	O
1	int
)	O
printf	function
(	O
",\n"	pointer
)	O
;	O
else	O
printf	function
(	O
",\n  {NULL, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}}\n};\n"	pointer
)	O
;	O
}	O
if	O
(	O
fatal_errors	int
)	O
{	O
printf	function
(	O
"\n\n#error in eye database.  Rebuild.\n\n"	pointer
)	O
;	O
}	O
return	O
fatal_errors	int
;	O
}	O
