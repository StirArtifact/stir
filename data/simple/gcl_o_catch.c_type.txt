static	O
void	O
FFN	function
(	O
Fcatch	int
)	O
(	O
VOL	O
object	int
args	int
)	O
{	O
object	int
*	O
top	O
=	O
vs_top	O
;	O
if	O
(	O
endp	function
(	O
args	int
)	O
)	O
FEtoo_few_argumentsF	function
(	O
args	int
)	O
;	O
eval	function
(	O
MMcar	function
(	O
args	int
)	O
)	O
;	O
vs_top	O
=	O
top	O
;	O
vs_push	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
frs_push	function
(	O
FRS_CATCH	O
,	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
nlj_active	O
)	O
nlj_active	O
=	O
FALSE	O
;	O
else	O
Fprogn	function
(	O
MMcdr	function
(	O
args	int
)	O
)	O
;	O
frs_pop	function
(	O
)	O
;	O
}	O
DEFUNM_NEW	function
(	O
"ERROR-SET"	pointer
,	O
object	int
,	O
fSerror_set	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
volatile	O
object	int
x0	O
)	O
,	O
"Evaluates the FORM in the null environment.  If the evaluation of the FORM has successfully completed, SI:ERROR-SET returns NIL as the first value and the result of the evaluation as the rest of the values.  If, in the course of the evaluation, a non-local jump from the FORM is atempted, SI:ERROR-SET traps the jump and returns the corresponding jump tag as its value."	pointer
)	O
{	O
object	int
*	O
old_lex	O
=	O
lex_env	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
frs_push	function
(	O
FRS_CATCHALL	O
,	O
Cnil	O
)	O
;	O
if	O
(	O
nlj_active	O
)	O
{	O
nlj_active	O
=	O
FALSE	O
;	O
x0	O
=	O
nlj_tag	O
;	O
frs_pop	function
(	O
)	O
;	O
lex_env	O
=	O
old_lex	O
;	O
RETURN1	function
(	O
x0	O
)	O
;	O
}	O
else	O
{	O
lex_env	O
=	O
vs_top	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
x0	O
=	O
Ieval	function
(	O
x0	O
)	O
;	O
}	O
frs_pop	function
(	O
)	O
;	O
lex_env	O
=	O
old_lex	O
;	O
{	O
int	O
i	int
=	O
fcall	O
.	O
nvalues	O
;	O
if	O
(	O
i	int
+	O
1	int
>=	O
sizeof	O
(	O
fcall	O
.	O
values	O
)	O
/	O
sizeof	O
(	O
*	O
fcall	O
.	O
values	O
)	O
)	O
FEerror	function
(	O
"Too many function call values"	pointer
,	O
0	int
)	O
;	O
while	O
(	O
i	int
>	O
0	int
)	O
{	O
fcall	O
.	O
values	O
[	O
i	int
+	O
1	int
]	O
=	O
fcall	O
.	O
values	O
[	O
i	int
]	O
;	O
i	int
--	O
;	O
}	O
fcall	O
.	O
nvalues	O
++	O
;	O
fcall	O
.	O
values	O
[	O
1	int
]	O
=	O
x0	O
;	O
}	O
return	O
Cnil	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Funwind_protect	int
)	O
(	O
VOL	O
object	int
args	int
)	O
{	O
object	int
*	O
top	O
=	O
vs_top	O
;	O
object	int
*	O
value_top	O
;	O
if	O
(	O
endp	function
(	O
args	int
)	O
)	O
FEtoo_few_argumentsF	function
(	O
args	int
)	O
;	O
frs_push	function
(	O
FRS_PROTECT	O
,	O
Cnil	O
)	O
;	O
if	O
(	O
nlj_active	O
)	O
{	O
object	int
tag	O
=	O
nlj_tag	O
;	O
frame_ptr	O
fr	O
=	O
nlj_fr	O
;	O
value_top	O
=	O
vs_top	O
;	O
vs_top	O
=	O
top	O
;	O
while	O
(	O
vs_base	O
<	O
value_top	O
)	O
{	O
vs_push	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
++	O
;	O
}	O
value_top	O
=	O
vs_top	O
;	O
nlj_active	O
=	O
FALSE	O
;	O
frs_pop	function
(	O
)	O
;	O
Fprogn	function
(	O
MMcdr	function
(	O
args	int
)	O
)	O
;	O
vs_base	O
=	O
top	O
;	O
vs_top	O
=	O
value_top	O
;	O
if	O
(	O
vs_top	O
==	O
vs_base	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
unwind	function
(	O
fr	O
,	O
tag	O
)	O
;	O
}	O
else	O
{	O
eval	function
(	O
MMcar	function
(	O
args	int
)	O
)	O
;	O
frs_pop	function
(	O
)	O
;	O
value_top	O
=	O
vs_top	O
;	O
vs_top	O
=	O
top	O
;	O
while	O
(	O
vs_base	O
<	O
value_top	O
)	O
{	O
vs_push	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
++	O
;	O
}	O
value_top	O
=	O
vs_top	O
;	O
Fprogn	function
(	O
MMcdr	function
(	O
args	int
)	O
)	O
;	O
vs_base	O
=	O
top	O
;	O
vs_top	O
=	O
value_top	O
;	O
if	O
(	O
vs_top	O
==	O
vs_base	O
)	O
vs_base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
}	O
}	O
static	O
void	O
FFN	function
(	O
Fthrow	int
)	O
(	O
object	int
args	int
)	O
{	O
object	int
*	O
top	O
=	O
vs_top	O
;	O
object	int
tag	O
;	O
frame_ptr	O
fr	O
;	O
if	O
(	O
endp	function
(	O
args	int
)	O
||	O
endp	function
(	O
MMcdr	function
(	O
args	int
)	O
)	O
)	O
FEtoo_few_argumentsF	function
(	O
args	int
)	O
;	O
if	O
(	O
!	O
endp	function
(	O
MMcddr	function
(	O
args	int
)	O
)	O
)	O
FEtoo_many_argumentsF	function
(	O
args	int
)	O
;	O
eval	function
(	O
MMcar	function
(	O
args	int
)	O
)	O
;	O
vs_top	O
=	O
top	O
;	O
tag	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_push	function
(	O
tag	O
)	O
;	O
fr	O
=	O
frs_sch_catch	function
(	O
tag	O
)	O
;	O
if	O
(	O
fr	O
==	O
NULL	O
)	O
FEerror	function
(	O
"~S is an undefined tag."	pointer
,	O
1	int
,	O
tag	O
)	O
;	O
eval	function
(	O
MMcadr	function
(	O
args	int
)	O
)	O
;	O
unwind	function
(	O
fr	O
,	O
tag	O
)	O
;	O
}	O
void	O
gcl_init_catch	function
(	O
void	O
)	O
{	O
make_special_form	function
(	O
"CATCH"	pointer
,	O
Fcatch	int
)	O
;	O
make_special_form	function
(	O
"UNWIND-PROTECT"	pointer
,	O
Funwind_protect	int
)	O
;	O
make_special_form	function
(	O
"THROW"	pointer
,	O
Fthrow	int
)	O
;	O
}	O
