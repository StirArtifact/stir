void	O
mu_mime_param_free	function
(	O
struct	O
mu_mime_param	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
)	O
{	O
free	function
(	O
p	pointer
->	O
lang	pointer
)	O
;	O
free	function
(	O
p	pointer
->	O
cset	pointer
)	O
;	O
free	function
(	O
p	pointer
->	O
value	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
}	O
static	O
void	O
_mu_mime_param_free_item	function
(	O
void	O
*	O
item	pointer
)	O
{	O
mu_mime_param_free	function
(	O
item	pointer
)	O
;	O
}	O
static	O
int	O
_recode_string	function
(	O
char	O
*	O
text	struct
,	O
const	O
char	O
*	O
ics	pointer
,	O
const	O
char	O
*	O
ocs	pointer
,	O
char	O
*	O
*	O
presult	pointer
)	O
{	O
mu_stream_t	pointer
istr	pointer
,	O
ostr	pointer
,	O
cvt	pointer
;	O
mu_off_t	long
size	long
;	O
char	O
*	O
decoded	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_static_memory_stream_create	function
(	O
&	O
istr	pointer
,	O
text	struct
,	O
strlen	function
(	O
text	struct
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_memory_stream_create	function
(	O
&	O
ostr	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_decode_filter	function
(	O
&	O
cvt	pointer
,	O
istr	pointer
,	O
NULL	O
,	O
ics	pointer
,	O
ocs	pointer
)	O
;	O
mu_stream_unref	function
(	O
istr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_unref	function
(	O
ostr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_stream_copy	function
(	O
ostr	pointer
,	O
cvt	pointer
,	O
0	int
,	O
&	O
size	long
)	O
;	O
mu_stream_unref	function
(	O
cvt	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_unref	function
(	O
ostr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
decoded	pointer
=	O
malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
decoded	pointer
)	O
{	O
mu_stream_unref	function
(	O
ostr	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
mu_stream_seek	function
(	O
ostr	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_read	function
(	O
ostr	pointer
,	O
decoded	pointer
,	O
size	long
,	O
NULL	O
)	O
;	O
mu_stream_unref	function
(	O
ostr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
free	function
(	O
decoded	pointer
)	O
;	O
else	O
{	O
decoded	pointer
[	O
size	long
]	O
=	O
0	int
;	O
*	O
presult	pointer
=	O
decoded	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
struct	O
param_continuation	struct
{	O
char	O
*	O
param_name	pointer
;	O
size_t	long
param_length	long
;	O
mu_stream_t	pointer
param_value	pointer
;	O
int	O
param_cind	int
;	O
const	O
char	O
*	O
param_lang	pointer
;	O
const	O
char	O
*	O
param_cset	pointer
;	O
}	O
;	O
static	O
void	O
free_param_continuation	function
(	O
struct	O
param_continuation	struct
*	O
p	pointer
)	O
{	O
free	function
(	O
p	pointer
->	O
param_name	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
p	pointer
->	O
param_value	pointer
)	O
;	O
memset	function
(	O
p	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
}	O
static	O
int	O
flush_param	function
(	O
struct	O
param_continuation	struct
*	O
cont	pointer
,	O
mu_assoc_t	pointer
assoc	pointer
,	O
int	O
subset	int
,	O
const	O
char	O
*	O
outcharset	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_mime_param	struct
*	O
param	pointer
,	O
*	O
*	O
param_slot	pointer
;	O
mu_off_t	long
size	long
;	O
if	O
(	O
subset	int
)	O
{	O
rc	int
=	O
mu_assoc_lookup_ref	function
(	O
assoc	pointer
,	O
cont	pointer
->	O
param_name	pointer
,	O
&	O
param_slot	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
0	int
;	O
}	O
param	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
*	O
param	pointer
)	O
;	O
if	O
(	O
!	O
param	pointer
)	O
return	O
errno	O
;	O
if	O
(	O
cont	pointer
->	O
param_lang	pointer
)	O
{	O
param	pointer
->	O
lang	pointer
=	O
strdup	function
(	O
cont	pointer
->	O
param_lang	pointer
)	O
;	O
if	O
(	O
!	O
param	pointer
->	O
lang	pointer
)	O
{	O
mu_mime_param_free	function
(	O
param	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
else	O
param	pointer
->	O
lang	pointer
=	O
NULL	O
;	O
if	O
(	O
outcharset	pointer
||	O
cont	pointer
->	O
param_cset	pointer
)	O
{	O
param	pointer
->	O
cset	pointer
=	O
strdup	function
(	O
outcharset	pointer
?	O
outcharset	pointer
:	O
cont	pointer
->	O
param_cset	pointer
)	O
;	O
if	O
(	O
!	O
param	pointer
->	O
cset	pointer
)	O
{	O
mu_mime_param_free	function
(	O
param	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
rc	int
=	O
mu_stream_size	function
(	O
cont	pointer
->	O
param_value	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
param	pointer
->	O
value	pointer
=	O
malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
param	pointer
->	O
value	pointer
)	O
{	O
mu_mime_param_free	function
(	O
param	pointer
)	O
;	O
rc	int
=	O
ENOMEM	int
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_stream_seek	function
(	O
cont	pointer
->	O
param_value	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_stream_read	function
(	O
cont	pointer
->	O
param_value	pointer
,	O
param	pointer
->	O
value	pointer
,	O
size	long
,	O
NULL	O
)	O
;	O
param	pointer
->	O
value	pointer
[	O
size	long
]	O
=	O
0	int
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
mu_mime_param_free	function
(	O
param	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
cont	pointer
->	O
param_cset	pointer
&&	O
outcharset	pointer
&&	O
mu_c_strcasecmp	function
(	O
cont	pointer
->	O
param_cset	pointer
,	O
outcharset	pointer
)	O
)	O
{	O
char	O
*	O
tmp	pointer
;	O
rc	int
=	O
_recode_string	function
(	O
param	pointer
->	O
value	pointer
,	O
cont	pointer
->	O
param_cset	pointer
,	O
outcharset	pointer
,	O
&	O
tmp	pointer
)	O
;	O
free	function
(	O
param	pointer
->	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_mime_param_free	function
(	O
param	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
param	pointer
->	O
value	pointer
=	O
tmp	pointer
;	O
}	O
if	O
(	O
subset	int
)	O
{	O
*	O
param_slot	pointer
=	O
param	pointer
;	O
}	O
else	O
{	O
rc	int
=	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
cont	pointer
->	O
param_name	pointer
,	O
param	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_mime_param_free	function
(	O
param	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_mime_param_assoc_create	function
(	O
mu_assoc_t	pointer
*	O
paramtab	pointer
)	O
{	O
mu_assoc_t	pointer
assoc	pointer
;	O
int	O
rc	int
=	O
mu_assoc_create	function
(	O
&	O
assoc	pointer
,	O
MU_ASSOC_ICASE	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mu_assoc_set_destroy_item	function
(	O
assoc	pointer
,	O
_mu_mime_param_free_item	function
)	O
;	O
*	O
paramtab	pointer
=	O
assoc	pointer
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mime_param_assoc_add	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
name	pointer
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
_mime_header_parse	function
(	O
const	O
char	O
*	O
text	struct
,	O
char	O
*	O
*	O
pvalue	pointer
,	O
mu_assoc_t	pointer
assoc	pointer
,	O
const	O
char	O
*	O
outcharset	pointer
,	O
int	O
subset	int
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
struct	O
param_continuation	struct
cont	pointer
;	O
size_t	long
i	long
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
" \t\r\n;"	pointer
;	O
ws	pointer
.	O
ws_escape	array
[	O
0	int
]	O
=	O
ws	pointer
.	O
ws_escape	array
[	O
1	int
]	O
=	O
"\\\\\"\""	pointer
;	O
ws	pointer
.	O
ws_options	int
=	O
0	int
;	O
MU_WRDSO_ESC_SET	O
(	O
&	O
ws	pointer
,	O
0	int
,	O
MU_WRDSO_BSKEEP	O
)	O
;	O
MU_WRDSO_ESC_SET	O
(	O
&	O
ws	pointer
,	O
1	int
,	O
MU_WRDSO_BSKEEP	O
)	O
;	O
if	O
(	O
mu_wordsplit	struct
(	O
text	struct
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_ESCAPE	O
|	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_NOCMD	O
|	O
MU_WRDSF_DQUOTE	O
|	O
MU_WRDSF_SQUEEZE_DELIMS	O
|	O
MU_WRDSF_RETURN_DELIMS	O
|	O
MU_WRDSF_WS	O
|	O
MU_WRDSF_OPTIONS	O
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MIME	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"wordsplit: %s"	pointer
)	O
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
)	O
;	O
return	O
MU_ERR_PARSE	O
;	O
}	O
if	O
(	O
!	O
assoc	pointer
)	O
{	O
if	O
(	O
!	O
pvalue	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
pvalue	pointer
=	O
strdup	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
if	O
(	O
!	O
*	O
pvalue	pointer
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
memset	function
(	O
&	O
cont	pointer
,	O
0	int
,	O
sizeof	O
(	O
cont	pointer
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	long
++	O
)	O
{	O
size_t	long
klen	long
;	O
char	O
*	O
key	pointer
;	O
char	O
*	O
val	array
;	O
const	O
char	O
*	O
lang	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
cset	pointer
=	O
NULL	O
;	O
char	O
*	O
langp	pointer
=	O
NULL	O
;	O
char	O
*	O
csetp	pointer
=	O
NULL	O
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
decoded	pointer
;	O
int	O
flags	int
=	O
0	int
;	O
struct	O
mu_mime_param	struct
*	O
param	pointer
;	O
key	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
;	O
if	O
(	O
key	pointer
[	O
0	int
]	O
==	O
';'	O
)	O
continue	O
;	O
p	pointer
=	O
strchr	function
(	O
key	pointer
,	O
'='	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
val	array
=	O
""	pointer
;	O
else	O
{	O
*	O
p	pointer
++	O
=	O
0	int
;	O
val	array
=	O
p	pointer
;	O
}	O
klen	long
=	O
strlen	function
(	O
key	pointer
)	O
;	O
if	O
(	O
klen	long
==	O
0	int
)	O
continue	O
;	O
p	pointer
=	O
strchr	function
(	O
key	pointer
,	O
'*'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
klen	long
=	O
p	pointer
-	O
key	pointer
;	O
if	O
(	O
p	pointer
[	O
1	int
]	O
)	O
{	O
if	O
(	O
mu_isdigit	O
(	O
p	pointer
[	O
1	int
]	O
)	O
)	O
{	O
char	O
*	O
q	pointer
;	O
unsigned	O
long	O
n	long
=	O
strtoul	function
(	O
p	pointer
+	O
1	int
,	O
&	O
q	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
q	pointer
&&	O
*	O
q	pointer
!=	O
'*'	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MIME	int
,	O
MU_DEBUG_TRACE0	int
,	O
(	O
_	O
(	O
"malformed parameter name %s: skipping"	pointer
)	O
,	O
key	pointer
)	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
n	long
!=	O
cont	pointer
.	O
param_cind	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MIME	int
,	O
MU_DEBUG_TRACE0	int
,	O
(	O
_	O
(	O
"continuation index out of sequence in %s: "	pointer
"skipping"	pointer
)	O
,	O
key	pointer
)	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
cont	pointer
.	O
param_name	pointer
=	O
malloc	function
(	O
klen	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
cont	pointer
.	O
param_name	pointer
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
cont	pointer
.	O
param_length	long
=	O
klen	long
;	O
memcpy	function
(	O
cont	pointer
.	O
param_name	pointer
,	O
key	pointer
,	O
klen	long
)	O
;	O
cont	pointer
.	O
param_name	pointer
[	O
klen	long
]	O
=	O
0	int
;	O
rc	int
=	O
mu_memory_stream_create	function
(	O
&	O
cont	pointer
.	O
param_value	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
else	O
if	O
(	O
cont	pointer
.	O
param_length	long
!=	O
klen	long
||	O
memcmp	function
(	O
cont	pointer
.	O
param_name	pointer
,	O
key	pointer
,	O
klen	long
)	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MIME	int
,	O
MU_DEBUG_TRACE0	int
,	O
(	O
_	O
(	O
"continuation name mismatch: %s: "	pointer
"skipping"	pointer
)	O
,	O
key	pointer
)	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
*	O
q	pointer
==	O
'*'	O
)	O
flags	int
|=	O
MU_MIMEHDR_CSINFO	int
;	O
cont	pointer
.	O
param_cind	int
++	O
;	O
flags	int
|=	O
MU_MIMEHDR_MULTILINE	int
;	O
}	O
}	O
else	O
{	O
flags	int
|=	O
MU_MIMEHDR_CSINFO	int
;	O
*	O
p	pointer
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
cont	pointer
.	O
param_name	pointer
)	O
{	O
rc	int
=	O
flush_param	function
(	O
&	O
cont	pointer
,	O
assoc	pointer
,	O
subset	int
,	O
outcharset	pointer
)	O
;	O
free_param_continuation	function
(	O
&	O
cont	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
if	O
(	O
flags	int
&	O
MU_MIMEHDR_CSINFO	int
)	O
{	O
p	pointer
=	O
strchr	function
(	O
val	array
,	O
'\''	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
char	O
*	O
q	pointer
=	O
strchr	function
(	O
p	pointer
+	O
1	int
,	O
'\''	O
)	O
;	O
if	O
(	O
q	pointer
)	O
{	O
cset	pointer
=	O
val	array
;	O
*	O
p	pointer
++	O
=	O
0	int
;	O
lang	pointer
=	O
p	pointer
;	O
*	O
q	pointer
++	O
=	O
0	int
;	O
val	array
=	O
q	pointer
;	O
}	O
}	O
if	O
(	O
(	O
flags	int
&	O
MU_MIMEHDR_MULTILINE	int
)	O
&&	O
cont	pointer
.	O
param_cind	int
==	O
1	int
)	O
{	O
cont	pointer
.	O
param_lang	pointer
=	O
lang	pointer
;	O
cont	pointer
.	O
param_cset	pointer
=	O
cset	pointer
;	O
}	O
}	O
if	O
(	O
flags	int
&	O
MU_MIMEHDR_CSINFO	int
)	O
{	O
char	O
*	O
tmp	pointer
;	O
rc	int
=	O
mu_str_url_decode	function
(	O
&	O
tmp	pointer
,	O
val	array
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
MU_MIMEHDR_MULTILINE	int
)	O
)	O
{	O
if	O
(	O
!	O
outcharset	pointer
||	O
mu_c_strcasecmp	function
(	O
cset	pointer
,	O
outcharset	pointer
)	O
==	O
0	int
)	O
decoded	pointer
=	O
tmp	pointer
;	O
else	O
{	O
rc	int
=	O
_recode_string	function
(	O
tmp	pointer
,	O
cset	pointer
,	O
outcharset	pointer
,	O
&	O
decoded	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
else	O
decoded	pointer
=	O
tmp	pointer
;	O
}	O
else	O
{	O
struct	O
mu_mime_param	struct
*	O
param	pointer
;	O
rc	int
=	O
mu_rfc2047_decode_param	function
(	O
outcharset	pointer
,	O
val	array
,	O
&	O
param	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
cset	pointer
=	O
csetp	pointer
=	O
param	pointer
->	O
cset	pointer
;	O
lang	pointer
=	O
langp	pointer
=	O
param	pointer
->	O
lang	pointer
;	O
decoded	pointer
=	O
param	pointer
->	O
value	pointer
;	O
free	function
(	O
param	pointer
)	O
;	O
}	O
val	array
=	O
decoded	pointer
;	O
if	O
(	O
flags	int
&	O
MU_MIMEHDR_MULTILINE	int
)	O
{	O
rc	int
=	O
mu_stream_write	function
(	O
cont	pointer
.	O
param_value	pointer
,	O
val	array
,	O
strlen	function
(	O
val	array
)	O
,	O
NULL	O
)	O
;	O
free	function
(	O
decoded	pointer
)	O
;	O
free	function
(	O
csetp	pointer
)	O
;	O
free	function
(	O
langp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
continue	O
;	O
}	O
param	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
param	pointer
)	O
)	O
;	O
if	O
(	O
!	O
param	pointer
)	O
rc	int
=	O
ENOMEM	int
;	O
else	O
{	O
if	O
(	O
lang	pointer
)	O
{	O
param	pointer
->	O
lang	pointer
=	O
strdup	function
(	O
lang	pointer
)	O
;	O
if	O
(	O
!	O
param	pointer
->	O
lang	pointer
)	O
rc	int
=	O
ENOMEM	int
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
&&	O
cset	pointer
)	O
{	O
param	pointer
->	O
cset	pointer
=	O
strdup	function
(	O
cset	pointer
)	O
;	O
if	O
(	O
!	O
param	pointer
->	O
cset	pointer
)	O
{	O
free	function
(	O
param	pointer
->	O
lang	pointer
)	O
;	O
rc	int
=	O
ENOMEM	int
;	O
}	O
}	O
free	function
(	O
csetp	pointer
)	O
;	O
free	function
(	O
langp	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
decoded	pointer
)	O
;	O
break	O
;	O
}	O
param	pointer
->	O
value	pointer
=	O
strdup	function
(	O
val	array
)	O
;	O
free	function
(	O
decoded	pointer
)	O
;	O
if	O
(	O
!	O
param	pointer
->	O
value	pointer
)	O
{	O
mu_mime_param_free	function
(	O
param	pointer
)	O
;	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
if	O
(	O
subset	int
)	O
{	O
struct	O
mu_mime_param	struct
*	O
*	O
p	pointer
;	O
if	O
(	O
mu_assoc_lookup_ref	function
(	O
assoc	pointer
,	O
key	pointer
,	O
&	O
p	pointer
)	O
==	O
0	int
)	O
*	O
p	pointer
=	O
param	pointer
;	O
else	O
mu_mime_param_free	function
(	O
param	pointer
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
key	pointer
,	O
param	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_mime_param_free	function
(	O
param	pointer
)	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
&&	O
cont	pointer
.	O
param_name	pointer
)	O
rc	int
=	O
flush_param	function
(	O
&	O
cont	pointer
,	O
assoc	pointer
,	O
subset	int
,	O
outcharset	pointer
)	O
;	O
free_param_continuation	function
(	O
&	O
cont	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
pvalue	pointer
)	O
{	O
*	O
pvalue	pointer
=	O
strdup	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
*	O
pvalue	pointer
)	O
rc	int
=	O
ENOMEM	int
;	O
}	O
}	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
if	O
(	O
subset	int
)	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
rc	int
=	O
mu_assoc_get_iterator	function
(	O
assoc	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
struct	O
mu_mime_param	struct
*	O
p	pointer
;	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
name	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
p	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_mime_header_parse_subset	function
(	O
const	O
char	O
*	O
text	struct
,	O
const	O
char	O
*	O
cset	pointer
,	O
char	O
*	O
*	O
pvalue	pointer
,	O
mu_assoc_t	pointer
assoc	pointer
)	O
{	O
return	O
_mime_header_parse	function
(	O
text	struct
,	O
pvalue	pointer
,	O
assoc	pointer
,	O
cset	pointer
,	O
1	int
)	O
;	O
}	O
int	O
mu_mime_header_parse	function
(	O
const	O
char	O
*	O
text	struct
,	O
char	O
const	O
*	O
cset	pointer
,	O
char	O
*	O
*	O
pvalue	pointer
,	O
mu_assoc_t	pointer
*	O
passoc	pointer
)	O
{	O
int	O
rc	int
;	O
mu_assoc_t	pointer
assoc	pointer
;	O
rc	int
=	O
mu_mime_param_assoc_create	function
(	O
&	O
assoc	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
_mime_header_parse	function
(	O
text	struct
,	O
pvalue	pointer
,	O
assoc	pointer
,	O
cset	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
||	O
!	O
passoc	pointer
)	O
mu_assoc_destroy	function
(	O
&	O
assoc	pointer
)	O
;	O
else	O
*	O
passoc	pointer
=	O
assoc	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_mimehdr_get_disp	function
(	O
const	O
char	O
*	O
text	struct
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsz	long
,	O
size_t	long
*	O
retsz	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
value	pointer
;	O
rc	int
=	O
mu_mime_header_parse	function
(	O
text	struct
,	O
NULL	O
,	O
&	O
value	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
size	long
=	O
strlen	function
(	O
value	pointer
)	O
;	O
if	O
(	O
size	long
>	O
bufsz	long
)	O
size	long
=	O
bufsz	long
;	O
if	O
(	O
buf	pointer
)	O
size	long
=	O
mu_cpystr	function
(	O
buf	pointer
,	O
value	pointer
,	O
size	long
)	O
;	O
if	O
(	O
retsz	pointer
)	O
*	O
retsz	pointer
=	O
size	long
;	O
}	O
free	function
(	O
value	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_mimehdr_aget_disp	function
(	O
const	O
char	O
*	O
text	struct
,	O
char	O
*	O
*	O
pvalue	pointer
)	O
{	O
return	O
mu_mime_header_parse	function
(	O
text	struct
,	O
NULL	O
,	O
pvalue	pointer
,	O
NULL	O
)	O
;	O
}	O
int	O
mu_mimehdr_get_param	function
(	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsz	long
,	O
size_t	long
*	O
retsz	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
value	pointer
;	O
rc	int
=	O
mu_mimehdr_aget_param	function
(	O
str	pointer
,	O
name	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
size	long
=	O
strlen	function
(	O
value	pointer
)	O
;	O
if	O
(	O
size	long
>	O
bufsz	long
)	O
size	long
=	O
bufsz	long
;	O
if	O
(	O
buf	pointer
)	O
size	long
=	O
mu_cpystr	function
(	O
buf	pointer
,	O
value	pointer
,	O
size	long
)	O
;	O
if	O
(	O
retsz	pointer
)	O
*	O
retsz	pointer
=	O
size	long
;	O
}	O
free	function
(	O
value	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mimehdr_aget_param	function
(	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
return	O
mu_mimehdr_aget_decoded_param	function
(	O
str	pointer
,	O
name	pointer
,	O
NULL	O
,	O
pval	pointer
,	O
NULL	O
)	O
;	O
}	O
int	O
mu_mimehdr_aget_decoded_param	function
(	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
charset	pointer
,	O
char	O
*	O
*	O
pval	pointer
,	O
char	O
*	O
*	O
plang	pointer
)	O
{	O
mu_assoc_t	pointer
assoc	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_mime_param_assoc_create	function
(	O
&	O
assoc	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_mime_param_assoc_add	function
(	O
assoc	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_mime_header_parse_subset	function
(	O
str	pointer
,	O
charset	pointer
,	O
NULL	O
,	O
assoc	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
struct	O
mu_mime_param	struct
*	O
param	pointer
=	O
mu_assoc_get	function
(	O
assoc	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
!	O
param	pointer
)	O
rc	int
=	O
MU_ERR_NOENT	O
;	O
else	O
{	O
*	O
pval	pointer
=	O
param	pointer
->	O
value	pointer
;	O
if	O
(	O
plang	pointer
)	O
{	O
*	O
plang	pointer
=	O
param	pointer
->	O
lang	pointer
;	O
param	pointer
->	O
lang	pointer
=	O
NULL	O
;	O
}	O
param	pointer
->	O
value	pointer
=	O
NULL	O
;	O
}	O
}	O
}	O
mu_assoc_destroy	function
(	O
&	O
assoc	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_get_attachment_name	function
(	O
mu_message_t	pointer
msg	pointer
,	O
const	O
char	O
*	O
charset	pointer
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
psz	pointer
,	O
char	O
*	O
*	O
plang	pointer
)	O
{	O
int	O
ret	pointer
=	O
EINVAL	int
;	O
mu_header_t	pointer
hdr	pointer
;	O
char	O
*	O
value	pointer
=	O
NULL	O
;	O
mu_assoc_t	pointer
assoc	pointer
;	O
if	O
(	O
!	O
msg	pointer
)	O
return	O
ret	pointer
;	O
if	O
(	O
(	O
ret	pointer
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
ret	pointer
;	O
ret	pointer
=	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_DISPOSITION	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
ret	pointer
!=	O
0	int
&&	O
ret	pointer
!=	O
MU_ERR_NOENT	O
)	O
return	O
ret	pointer
;	O
if	O
(	O
ret	pointer
==	O
0	int
&&	O
value	pointer
!=	O
NULL	O
)	O
{	O
ret	pointer
=	O
mu_mime_param_assoc_create	function
(	O
&	O
assoc	pointer
)	O
;	O
if	O
(	O
ret	pointer
)	O
return	O
ret	pointer
;	O
ret	pointer
=	O
mu_mime_param_assoc_add	function
(	O
assoc	pointer
,	O
"filename"	pointer
)	O
;	O
if	O
(	O
ret	pointer
==	O
0	int
)	O
{	O
char	O
*	O
disp	pointer
;	O
ret	pointer
=	O
mu_mime_header_parse_subset	function
(	O
value	pointer
,	O
charset	pointer
,	O
&	O
disp	pointer
,	O
assoc	pointer
)	O
;	O
if	O
(	O
ret	pointer
==	O
0	int
)	O
{	O
struct	O
mu_mime_param	struct
*	O
param	pointer
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
disp	pointer
,	O
"attachment"	pointer
)	O
==	O
0	int
&&	O
(	O
param	pointer
=	O
mu_assoc_get	function
(	O
assoc	pointer
,	O
"filename"	pointer
)	O
)	O
)	O
{	O
*	O
pbuf	pointer
=	O
param	pointer
->	O
value	pointer
;	O
if	O
(	O
psz	pointer
)	O
*	O
psz	pointer
=	O
strlen	function
(	O
*	O
pbuf	pointer
)	O
;	O
param	pointer
->	O
value	pointer
=	O
NULL	O
;	O
if	O
(	O
plang	pointer
)	O
{	O
*	O
plang	pointer
=	O
param	pointer
->	O
lang	pointer
;	O
param	pointer
->	O
lang	pointer
=	O
NULL	O
;	O
}	O
}	O
else	O
ret	pointer
=	O
MU_ERR_NOENT	O
;	O
free	function
(	O
disp	pointer
)	O
;	O
mu_assoc_destroy	function
(	O
&	O
assoc	pointer
)	O
;	O
}	O
}	O
}	O
free	function
(	O
value	pointer
)	O
;	O
if	O
(	O
ret	pointer
==	O
0	int
)	O
return	O
ret	pointer
;	O
ret	pointer
=	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
ret	pointer
==	O
0	int
)	O
{	O
ret	pointer
=	O
mu_mime_param_assoc_create	function
(	O
&	O
assoc	pointer
)	O
;	O
if	O
(	O
ret	pointer
)	O
return	O
ret	pointer
;	O
ret	pointer
=	O
mu_mime_param_assoc_add	function
(	O
assoc	pointer
,	O
"name"	pointer
)	O
;	O
if	O
(	O
ret	pointer
==	O
0	int
)	O
{	O
ret	pointer
=	O
mu_mime_header_parse_subset	function
(	O
value	pointer
,	O
charset	pointer
,	O
NULL	O
,	O
assoc	pointer
)	O
;	O
if	O
(	O
ret	pointer
==	O
0	int
)	O
{	O
struct	O
mu_mime_param	struct
*	O
param	pointer
;	O
if	O
(	O
(	O
param	pointer
=	O
mu_assoc_get	function
(	O
assoc	pointer
,	O
"name"	pointer
)	O
)	O
)	O
{	O
*	O
pbuf	pointer
=	O
param	pointer
->	O
value	pointer
;	O
if	O
(	O
psz	pointer
)	O
*	O
psz	pointer
=	O
strlen	function
(	O
*	O
pbuf	pointer
)	O
;	O
param	pointer
->	O
value	pointer
=	O
NULL	O
;	O
if	O
(	O
plang	pointer
)	O
{	O
*	O
plang	pointer
=	O
param	pointer
->	O
lang	pointer
;	O
param	pointer
->	O
lang	pointer
=	O
NULL	O
;	O
}	O
}	O
else	O
ret	pointer
=	O
MU_ERR_NOENT	O
;	O
}	O
}	O
free	function
(	O
value	pointer
)	O
;	O
}	O
return	O
ret	pointer
;	O
}	O
int	O
mu_message_aget_attachment_name	function
(	O
mu_message_t	pointer
msg	pointer
,	O
char	O
*	O
*	O
name	pointer
)	O
{	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
return	O
_get_attachment_name	function
(	O
msg	pointer
,	O
NULL	O
,	O
name	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
int	O
mu_message_aget_decoded_attachment_name	function
(	O
mu_message_t	pointer
msg	pointer
,	O
const	O
char	O
*	O
charset	pointer
,	O
char	O
*	O
*	O
pval	pointer
,	O
char	O
*	O
*	O
plang	pointer
)	O
{	O
if	O
(	O
pval	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
return	O
_get_attachment_name	function
(	O
msg	pointer
,	O
charset	pointer
,	O
pval	pointer
,	O
NULL	O
,	O
plang	pointer
)	O
;	O
}	O
int	O
mu_message_get_attachment_name	function
(	O
mu_message_t	pointer
msg	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsz	long
,	O
size_t	long
*	O
sz	pointer
)	O
{	O
char	O
*	O
tmp	pointer
;	O
size_t	long
size	long
;	O
int	O
rc	int
=	O
_get_attachment_name	function
(	O
msg	pointer
,	O
NULL	O
,	O
&	O
tmp	pointer
,	O
&	O
size	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
size	long
>	O
bufsz	long
)	O
size	long
=	O
bufsz	long
;	O
if	O
(	O
buf	pointer
)	O
size	long
=	O
mu_cpystr	function
(	O
buf	pointer
,	O
tmp	pointer
,	O
size	long
)	O
;	O
if	O
(	O
sz	pointer
)	O
*	O
sz	pointer
=	O
size	long
;	O
}	O
free	function
(	O
tmp	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
