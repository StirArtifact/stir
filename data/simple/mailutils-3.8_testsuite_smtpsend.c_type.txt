static	O
char	O
usage_text	array
[	O
]	O
=	O
"usage: %s hostname [port=N] [trace=N] [tls=N] [from=STRING] [rcpt=STRING]\n"	pointer
"                   [family=4|6] [domain=STRING] [user=STRING] [pass=STRING]\n"	pointer
"                   [service=STRING] [realm=STRING] [host=STRING]\n"	pointer
"                   [auth=method[,...]] [url=STRING] [input=FILE] [raw=N]\n"	pointer
"                   [skiphdr=name[,...]]\n"	pointer
;	O
static	O
void	O
usage	function
(	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
usage_text	array
,	O
mu_program_name	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
static	O
int	O
send_rcpt_command	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
char	O
*	O
email	pointer
=	O
item	pointer
;	O
mu_smtp_t	pointer
smtp	pointer
=	O
data	pointer
;	O
MU_ASSERT	O
(	O
mu_smtp_rcpt_basic	function
(	O
smtp	pointer
,	O
email	pointer
,	O
NULL	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
update_list	function
(	O
mu_list_t	pointer
*	O
plist	pointer
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
size_t	long
j	long
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
mu_list_t	pointer
list	pointer
=	O
*	O
plist	pointer
;	O
if	O
(	O
!	O
list	pointer
)	O
{	O
MU_ASSERT	O
(	O
mu_list_create	function
(	O
&	O
list	pointer
)	O
)	O
;	O
*	O
plist	pointer
=	O
list	pointer
;	O
}	O
ws	pointer
.	O
ws_delim	pointer
=	O
","	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
arg	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
)	O
)	O
{	O
mu_error	function
(	O
"mu_wordsplit: %s"	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
ws	pointer
.	O
ws_wordc	long
;	O
j	long
++	O
)	O
MU_ASSERT	O
(	O
mu_list_append	function
(	O
list	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
j	long
]	O
)	O
)	O
;	O
ws	pointer
.	O
ws_wordc	long
=	O
0	int
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
static	O
int	O
headercmp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
data	pointer
)	O
{	O
return	O
mu_c_strcasecmp	function
(	O
item	pointer
,	O
data	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
i	long
;	O
char	O
*	O
host	pointer
=	O
NULL	O
;	O
char	O
*	O
infile	pointer
=	O
NULL	O
;	O
char	O
*	O
port	int
=	O
NULL	O
;	O
int	O
tls	int
=	O
0	int
;	O
int	O
raw	pointer
=	O
1	int
;	O
int	O
flags	int
=	O
0	int
;	O
mu_stream_t	pointer
stream	pointer
;	O
mu_smtp_t	pointer
smtp	pointer
;	O
mu_stream_t	pointer
instr	pointer
;	O
char	O
*	O
from	pointer
=	O
NULL	O
;	O
mu_list_t	pointer
rcpt_list	pointer
=	O
NULL	O
;	O
mu_list_t	pointer
meth_list	pointer
=	O
NULL	O
;	O
mu_list_t	pointer
skiphdr_list	pointer
=	O
NULL	O
;	O
struct	O
mu_sockaddr	struct
*	O
sa	pointer
;	O
struct	O
mu_sockaddr_hints	struct
hints	pointer
;	O
mu_set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
mu_stdstream_setup	function
(	O
MU_STDSTREAM_RESET_NONE	int
)	O
;	O
if	O
(	O
argc	long
<	O
2	int
)	O
usage	function
(	O
)	O
;	O
memset	function
(	O
&	O
hints	pointer
,	O
0	int
,	O
sizeof	O
(	O
hints	pointer
)	O
)	O
;	O
hints	pointer
.	O
flags	int
=	O
MU_AH_DETECT_FAMILY	int
;	O
hints	pointer
.	O
port	int
=	O
25	int
;	O
hints	pointer
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	pointer
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
MU_ASSERT	O
(	O
mu_smtp_create	function
(	O
&	O
smtp	pointer
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"port="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
port	int
=	O
argv	pointer
[	O
i	long
]	O
+	O
5	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"family="	pointer
,	O
7	int
)	O
==	O
0	int
)	O
{	O
hints	pointer
.	O
flags	int
&=	O
~	O
MU_AH_DETECT_FAMILY	int
;	O
switch	O
(	O
argv	pointer
[	O
i	long
]	O
[	O
7	int
]	O
)	O
{	O
case	O
'4'	O
:	O
hints	pointer
.	O
family	int
=	O
AF_INET	O
;	O
break	O
;	O
case	O
'6'	O
:	O
hints	pointer
.	O
family	int
=	O
AF_INET6	O
;	O
break	O
;	O
default	O
:	O
mu_error	function
(	O
"invalid family name: %s"	pointer
,	O
argv	pointer
[	O
i	long
]	O
+	O
7	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"trace="	pointer
,	O
6	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
arg	pointer
=	O
argv	pointer
[	O
i	long
]	O
+	O
6	int
;	O
if	O
(	O
mu_isdigit	O
(	O
arg	pointer
[	O
0	int
]	O
)	O
)	O
mu_smtp_trace	function
(	O
smtp	pointer
,	O
atoi	function
(	O
argv	pointer
[	O
i	long
]	O
+	O
6	int
)	O
?	O
MU_SMTP_TRACE_SET	int
:	O
MU_SMTP_TRACE_CLR	int
)	O
;	O
else	O
{	O
mu_smtp_trace	function
(	O
smtp	pointer
,	O
MU_SMTP_TRACE_SET	int
)	O
;	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"secure"	pointer
)	O
==	O
0	int
)	O
mu_smtp_trace_mask	function
(	O
smtp	pointer
,	O
MU_SMTP_TRACE_SET	int
,	O
MU_XSCRIPT_SECURE	int
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"payload"	pointer
)	O
==	O
0	int
)	O
mu_smtp_trace_mask	function
(	O
smtp	pointer
,	O
MU_SMTP_TRACE_SET	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"tls="	pointer
,	O
4	int
)	O
==	O
0	int
)	O
tls	int
=	O
atoi	function
(	O
argv	pointer
[	O
i	long
]	O
+	O
4	int
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"domain="	pointer
,	O
7	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_DOMAIN	int
,	O
argv	pointer
[	O
i	long
]	O
+	O
7	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"user="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_USERNAME	int
,	O
argv	pointer
[	O
i	long
]	O
+	O
5	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"pass="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_PASSWORD	int
,	O
argv	pointer
[	O
i	long
]	O
+	O
5	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"service="	pointer
,	O
8	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_SERVICE	int
,	O
argv	pointer
[	O
i	long
]	O
+	O
8	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"realm="	pointer
,	O
6	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_REALM	int
,	O
argv	pointer
[	O
i	long
]	O
+	O
6	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"host="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_HOST	int
,	O
argv	pointer
[	O
i	long
]	O
+	O
5	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"url="	pointer
,	O
4	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_URL	int
,	O
argv	pointer
[	O
i	long
]	O
+	O
4	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"input="	pointer
,	O
6	int
)	O
==	O
0	int
)	O
infile	pointer
=	O
argv	pointer
[	O
i	long
]	O
+	O
6	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"raw="	pointer
,	O
4	int
)	O
==	O
0	int
)	O
raw	pointer
=	O
atoi	function
(	O
argv	pointer
[	O
i	long
]	O
+	O
4	int
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"rcpt="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
rcpt_list	pointer
)	O
MU_ASSERT	O
(	O
mu_list_create	function
(	O
&	O
rcpt_list	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_list_append	function
(	O
rcpt_list	pointer
,	O
argv	pointer
[	O
i	long
]	O
+	O
5	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"from="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
from	pointer
=	O
argv	pointer
[	O
i	long
]	O
+	O
5	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"auth="	pointer
,	O
5	int
)	O
==	O
0	int
)	O
update_list	function
(	O
&	O
meth_list	pointer
,	O
argv	pointer
[	O
i	long
]	O
+	O
5	int
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"skiphdr="	pointer
,	O
8	int
)	O
==	O
0	int
)	O
{	O
update_list	function
(	O
&	O
skiphdr_list	pointer
,	O
argv	pointer
[	O
i	long
]	O
+	O
8	int
)	O
;	O
raw	pointer
=	O
0	int
;	O
}	O
else	O
if	O
(	O
host	pointer
)	O
{	O
mu_error	function
(	O
"server name already given: %s, new name %s?"	pointer
,	O
host	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
host	pointer
=	O
argv	pointer
[	O
i	long
]	O
;	O
}	O
if	O
(	O
!	O
host	pointer
)	O
usage	function
(	O
)	O
;	O
if	O
(	O
!	O
raw	pointer
)	O
flags	int
=	O
MU_STREAM_SEEK	int
;	O
if	O
(	O
infile	pointer
)	O
MU_ASSERT	O
(	O
mu_file_stream_create	function
(	O
&	O
instr	pointer
,	O
infile	pointer
,	O
MU_STREAM_READ	int
|	O
flags	int
)	O
)	O
;	O
else	O
MU_ASSERT	O
(	O
mu_stdio_stream_create	function
(	O
&	O
instr	pointer
,	O
MU_STDIN_FD	int
,	O
flags	int
)	O
)	O
;	O
host	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
MU_ASSERT	O
(	O
mu_sockaddr_from_node	function
(	O
&	O
sa	pointer
,	O
host	pointer
,	O
port	int
,	O
&	O
hints	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_tcp_stream_create_from_sa	function
(	O
&	O
stream	pointer
,	O
sa	pointer
,	O
NULL	O
,	O
MU_STREAM_RDWR	O
)	O
)	O
;	O
mu_smtp_set_carrier	function
(	O
smtp	pointer
,	O
stream	pointer
)	O
;	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
!	O
from	pointer
)	O
{	O
from	pointer
=	O
getenv	function
(	O
"USER"	pointer
)	O
;	O
if	O
(	O
!	O
from	pointer
)	O
{	O
mu_error	function
(	O
"cannot determine sender name"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
raw	pointer
&&	O
!	O
rcpt_list	pointer
)	O
{	O
mu_error	function
(	O
"no recipients"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
MU_ASSERT	O
(	O
mu_smtp_open	function
(	O
smtp	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_smtp_ehlo	function
(	O
smtp	pointer
)	O
)	O
;	O
if	O
(	O
tls	int
&&	O
mu_smtp_capa_test	function
(	O
smtp	pointer
,	O
"STARTTLS"	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_smtp_starttls	function
(	O
smtp	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_smtp_ehlo	function
(	O
smtp	pointer
)	O
)	O
;	O
}	O
if	O
(	O
meth_list	pointer
)	O
{	O
int	O
status	int
;	O
MU_ASSERT	O
(	O
mu_smtp_add_auth_mech_list	function
(	O
smtp	pointer
,	O
meth_list	pointer
)	O
)	O
;	O
status	int
=	O
mu_smtp_auth	function
(	O
smtp	pointer
)	O
;	O
switch	O
(	O
status	int
)	O
{	O
case	O
0	int
:	O
MU_ASSERT	O
(	O
mu_smtp_ehlo	function
(	O
smtp	pointer
)	O
)	O
;	O
break	O
;	O
case	O
ENOSYS	int
:	O
case	O
MU_ERR_NOENT	O
:	O
break	O
;	O
default	O
:	O
mu_error	function
(	O
"authentication failed: %s"	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
MU_ASSERT	O
(	O
mu_smtp_mail_basic	function
(	O
smtp	pointer
,	O
from	pointer
,	O
NULL	O
)	O
)	O
;	O
mu_list_foreach	function
(	O
rcpt_list	pointer
,	O
send_rcpt_command	function
,	O
smtp	pointer
)	O
;	O
if	O
(	O
raw	pointer
)	O
{	O
MU_ASSERT	O
(	O
mu_smtp_send_stream	function
(	O
smtp	pointer
,	O
instr	pointer
)	O
)	O
;	O
}	O
else	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_stream_t	pointer
ostr	pointer
,	O
bstr	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
mu_iterator_t	pointer
itr	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
if	O
(	O
skiphdr_list	pointer
)	O
mu_list_set_comparator	function
(	O
skiphdr_list	pointer
,	O
headercmp	function
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_to_message	function
(	O
instr	pointer
,	O
&	O
msg	pointer
)	O
)	O
;	O
mu_stream_unref	function
(	O
instr	pointer
)	O
;	O
MU_ASSERT	O
(	O
mu_smtp_data	function
(	O
smtp	pointer
,	O
&	O
ostr	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_header_get_iterator	function
(	O
hdr	pointer
,	O
&	O
itr	pointer
)	O
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
void	O
*	O
value	pointer
;	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
)	O
&	O
name	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
mu_list_locate	function
(	O
skiphdr_list	pointer
,	O
(	O
void	O
*	O
)	O
name	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
continue	O
;	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"%s: %s\n"	pointer
,	O
name	pointer
,	O
(	O
char	O
*	O
)	O
value	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_write	function
(	O
ostr	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
bstr	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_copy	function
(	O
ostr	pointer
,	O
bstr	pointer
,	O
0	int
,	O
NULL	O
)	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
bstr	pointer
)	O
;	O
mu_stream_close	function
(	O
ostr	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
ostr	pointer
)	O
;	O
}	O
MU_ASSERT	O
(	O
mu_smtp_dot	function
(	O
smtp	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_smtp_quit	function
(	O
smtp	pointer
)	O
)	O
;	O
mu_smtp_destroy	function
(	O
&	O
smtp	pointer
)	O
;	O
mu_stream_close	function
(	O
instr	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
instr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
