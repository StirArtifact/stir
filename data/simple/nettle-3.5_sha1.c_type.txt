void	O
sha1_init	O
(	O
struct	O
sha1_ctx	struct
*	O
ctx	pointer
)	O
{	O
static	O
const	O
uint32_t	int
iv	array
[	O
_SHA1_DIGEST_LENGTH	int
]	O
=	O
{	O
0x67452301L	int
,	O
0xEFCDAB89L	int
,	O
0x98BADCFEL	int
,	O
0x10325476L	int
,	O
0xC3D2E1F0L	int
,	O
}	O
;	O
memcpy	function
(	O
ctx	pointer
->	O
state	pointer
,	O
iv	array
,	O
sizeof	O
(	O
ctx	pointer
->	O
state	pointer
)	O
)	O
;	O
ctx	pointer
->	O
count	long
=	O
0	int
;	O
ctx	pointer
->	O
index	function
=	O
0	int
;	O
}	O
void	O
sha1_update	O
(	O
struct	O
sha1_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	pointer
)	O
{	O
MD_UPDATE	O
(	O
ctx	pointer
,	O
length	long
,	O
data	pointer
,	O
COMPRESS	O
,	O
ctx	pointer
->	O
count	long
++	O
)	O
;	O
}	O
void	O
sha1_digest	O
(	O
struct	O
sha1_ctx	struct
*	O
ctx	pointer
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	pointer
)	O
{	O
uint64_t	long
bit_count	long
;	O
assert	O
(	O
length	long
<=	O
SHA1_DIGEST_SIZE	int
)	O
;	O
MD_PAD	O
(	O
ctx	pointer
,	O
8	int
,	O
COMPRESS	O
)	O
;	O
bit_count	long
=	O
(	O
ctx	pointer
->	O
count	long
<<	O
9	int
)	O
|	O
(	O
ctx	pointer
->	O
index	function
<<	O
3	int
)	O
;	O
WRITE_UINT64	O
(	O
ctx	pointer
->	O
block	array
+	O
(	O
SHA1_BLOCK_SIZE	int
-	O
8	int
)	O
,	O
bit_count	long
)	O
;	O
nettle_sha1_compress	function
(	O
ctx	pointer
->	O
state	pointer
,	O
ctx	pointer
->	O
block	array
)	O
;	O
_nettle_write_be32	function
(	O
length	long
,	O
digest	pointer
,	O
ctx	pointer
->	O
state	pointer
)	O
;	O
sha1_init	O
(	O
ctx	pointer
)	O
;	O
}	O
