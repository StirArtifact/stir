local	O
int	O
gz_load	function
OF	O
(	O
(	O
gz_statep	pointer
,	O
unsigned	O
char	O
*	O
,	O
unsigned	O
,	O
unsigned	O
*	O
)	O
)	O
;	O
local	O
int	O
gz_avail	function
OF	O
(	O
(	O
gz_statep	pointer
)	O
)	O
;	O
local	O
int	O
gz_look	function
OF	O
(	O
(	O
gz_statep	pointer
)	O
)	O
;	O
local	O
int	O
gz_decomp	function
OF	O
(	O
(	O
gz_statep	pointer
)	O
)	O
;	O
local	O
int	O
gz_fetch	function
OF	O
(	O
(	O
gz_statep	pointer
)	O
)	O
;	O
local	O
int	O
gz_skip	function
OF	O
(	O
(	O
gz_statep	pointer
,	O
z_off64_t	O
)	O
)	O
;	O
local	O
z_size_t	long
gz_read	function
OF	O
(	O
(	O
gz_statep	pointer
,	O
voidp	pointer
,	O
z_size_t	long
)	O
)	O
;	O
local	O
int	O
gz_load	function
(	O
state	pointer
,	O
buf	pointer
,	O
len	int
,	O
have	int
)	O
gz_statep	pointer
state	pointer
;	O
unsigned	O
char	O
*	O
buf	pointer
;	O
unsigned	O
len	int
;	O
unsigned	O
*	O
have	int
;	O
{	O
int	O
ret	int
;	O
unsigned	O
get	int
,	O
max	int
=	O
(	O
(	O
unsigned	O
)	O
-	O
1	int
>>	O
2	int
)	O
+	O
1	int
;	O
*	O
have	int
=	O
0	int
;	O
do	O
{	O
get	int
=	O
len	int
-	O
*	O
have	int
;	O
if	O
(	O
get	int
>	O
max	int
)	O
get	int
=	O
max	int
;	O
ret	int
=	O
read	function
(	O
state	pointer
->	O
fd	int
,	O
buf	pointer
+	O
*	O
have	int
,	O
get	int
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
break	O
;	O
*	O
have	int
+=	O
(	O
unsigned	O
)	O
ret	int
;	O
}	O
while	O
(	O
*	O
have	int
<	O
len	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_ERRNO	O
,	O
zstrerror	O
(	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
ret	int
==	O
0	int
)	O
state	pointer
->	O
eof	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
local	O
int	O
gz_avail	function
(	O
state	pointer
)	O
gz_statep	pointer
state	pointer
;	O
{	O
unsigned	O
got	int
;	O
z_streamp	pointer
strm	pointer
=	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
&&	O
state	pointer
->	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	pointer
->	O
eof	int
==	O
0	int
)	O
{	O
if	O
(	O
strm	pointer
->	O
avail_in	int
)	O
{	O
unsigned	O
char	O
*	O
p	pointer
=	O
state	pointer
->	O
in	pointer
;	O
unsigned	O
const	O
char	O
*	O
q	pointer
=	O
strm	pointer
->	O
next_in	pointer
;	O
unsigned	O
n	int
=	O
strm	pointer
->	O
avail_in	int
;	O
do	O
{	O
*	O
p	pointer
++	O
=	O
*	O
q	pointer
++	O
;	O
}	O
while	O
(	O
--	O
n	int
)	O
;	O
}	O
if	O
(	O
gz_load	function
(	O
state	pointer
,	O
state	pointer
->	O
in	pointer
+	O
strm	pointer
->	O
avail_in	int
,	O
state	pointer
->	O
size	int
-	O
strm	pointer
->	O
avail_in	int
,	O
&	O
got	int
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
strm	pointer
->	O
avail_in	int
+=	O
got	int
;	O
strm	pointer
->	O
next_in	pointer
=	O
state	pointer
->	O
in	pointer
;	O
}	O
return	O
0	int
;	O
}	O
local	O
int	O
gz_look	function
(	O
state	pointer
)	O
gz_statep	pointer
state	pointer
;	O
{	O
z_streamp	pointer
strm	pointer
=	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
size	int
==	O
0	int
)	O
{	O
state	pointer
->	O
in	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
malloc	function
(	O
state	pointer
->	O
want	int
)	O
;	O
state	pointer
->	O
out	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
malloc	function
(	O
state	pointer
->	O
want	int
<<	O
1	int
)	O
;	O
if	O
(	O
state	pointer
->	O
in	pointer
==	O
NULL	O
||	O
state	pointer
->	O
out	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
state	pointer
->	O
out	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
in	pointer
)	O
;	O
gz_error	function
(	O
state	pointer
,	O
Z_MEM_ERROR	O
,	O
"out of memory"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
state	pointer
->	O
size	int
=	O
state	pointer
->	O
want	int
;	O
state	pointer
->	O
strm	pointer
.	O
zalloc	pointer
=	O
Z_NULL	int
;	O
state	pointer
->	O
strm	pointer
.	O
zfree	pointer
=	O
Z_NULL	int
;	O
state	pointer
->	O
strm	pointer
.	O
opaque	pointer
=	O
Z_NULL	int
;	O
state	pointer
->	O
strm	pointer
.	O
avail_in	int
=	O
0	int
;	O
state	pointer
->	O
strm	pointer
.	O
next_in	pointer
=	O
Z_NULL	int
;	O
if	O
(	O
inflateInit2	O
(	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
,	O
15	int
+	O
16	int
)	O
!=	O
Z_OK	int
)	O
{	O
free	function
(	O
state	pointer
->	O
out	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
in	pointer
)	O
;	O
state	pointer
->	O
size	int
=	O
0	int
;	O
gz_error	function
(	O
state	pointer
,	O
Z_MEM_ERROR	O
,	O
"out of memory"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
strm	pointer
->	O
avail_in	int
<	O
2	int
)	O
{	O
if	O
(	O
gz_avail	function
(	O
state	pointer
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
strm	pointer
->	O
avail_in	int
==	O
0	int
)	O
return	O
0	int
;	O
}	O
if	O
(	O
strm	pointer
->	O
avail_in	int
>	O
1	int
&&	O
strm	pointer
->	O
next_in	pointer
[	O
0	int
]	O
==	O
31	int
&&	O
strm	pointer
->	O
next_in	pointer
[	O
1	int
]	O
==	O
139	int
)	O
{	O
inflateReset	function
(	O
strm	pointer
)	O
;	O
state	pointer
->	O
how	int
=	O
GZIP	int
;	O
state	pointer
->	O
direct	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
state	pointer
->	O
direct	int
==	O
0	int
)	O
{	O
strm	pointer
->	O
avail_in	int
=	O
0	int
;	O
state	pointer
->	O
eof	int
=	O
1	int
;	O
state	pointer
->	O
x	struct
.	O
have	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
state	pointer
->	O
x	struct
.	O
next	pointer
=	O
state	pointer
->	O
out	pointer
;	O
if	O
(	O
strm	pointer
->	O
avail_in	int
)	O
{	O
memcpy	function
(	O
state	pointer
->	O
x	struct
.	O
next	pointer
,	O
strm	pointer
->	O
next_in	pointer
,	O
strm	pointer
->	O
avail_in	int
)	O
;	O
state	pointer
->	O
x	struct
.	O
have	int
=	O
strm	pointer
->	O
avail_in	int
;	O
strm	pointer
->	O
avail_in	int
=	O
0	int
;	O
}	O
state	pointer
->	O
how	int
=	O
COPY	int
;	O
state	pointer
->	O
direct	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
local	O
int	O
gz_decomp	function
(	O
state	pointer
)	O
gz_statep	pointer
state	pointer
;	O
{	O
int	O
ret	int
=	O
Z_OK	int
;	O
unsigned	O
had	int
;	O
z_streamp	pointer
strm	pointer
=	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
;	O
had	int
=	O
strm	pointer
->	O
avail_out	int
;	O
do	O
{	O
if	O
(	O
strm	pointer
->	O
avail_in	int
==	O
0	int
&&	O
gz_avail	function
(	O
state	pointer
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
strm	pointer
->	O
avail_in	int
==	O
0	int
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_BUF_ERROR	O
,	O
"unexpected end of file"	pointer
)	O
;	O
break	O
;	O
}	O
ret	int
=	O
inflate	function
(	O
strm	pointer
,	O
Z_NO_FLUSH	int
)	O
;	O
if	O
(	O
ret	int
==	O
Z_STREAM_ERROR	O
||	O
ret	int
==	O
Z_NEED_DICT	int
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_STREAM_ERROR	O
,	O
"internal error: inflate stream corrupt"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
ret	int
==	O
Z_MEM_ERROR	O
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_MEM_ERROR	O
,	O
"out of memory"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
ret	int
==	O
Z_DATA_ERROR	O
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_DATA_ERROR	O
,	O
strm	pointer
->	O
msg	pointer
==	O
NULL	O
?	O
"compressed data error"	pointer
:	O
strm	pointer
->	O
msg	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
while	O
(	O
strm	pointer
->	O
avail_out	int
&&	O
ret	int
!=	O
Z_STREAM_END	int
)	O
;	O
state	pointer
->	O
x	struct
.	O
have	int
=	O
had	int
-	O
strm	pointer
->	O
avail_out	int
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
=	O
strm	pointer
->	O
next_out	pointer
-	O
state	pointer
->	O
x	struct
.	O
have	int
;	O
if	O
(	O
ret	int
==	O
Z_STREAM_END	int
)	O
state	pointer
->	O
how	int
=	O
LOOK	int
;	O
return	O
0	int
;	O
}	O
local	O
int	O
gz_fetch	function
(	O
state	pointer
)	O
gz_statep	pointer
state	pointer
;	O
{	O
z_streamp	pointer
strm	pointer
=	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
;	O
do	O
{	O
switch	O
(	O
state	pointer
->	O
how	int
)	O
{	O
case	O
LOOK	int
:	O
if	O
(	O
gz_look	function
(	O
state	pointer
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	pointer
->	O
how	int
==	O
LOOK	int
)	O
return	O
0	int
;	O
break	O
;	O
case	O
COPY	int
:	O
if	O
(	O
gz_load	function
(	O
state	pointer
,	O
state	pointer
->	O
out	pointer
,	O
state	pointer
->	O
size	int
<<	O
1	int
,	O
&	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
)	O
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
=	O
state	pointer
->	O
out	pointer
;	O
return	O
0	int
;	O
case	O
GZIP	int
:	O
strm	pointer
->	O
avail_out	int
=	O
state	pointer
->	O
size	int
<<	O
1	int
;	O
strm	pointer
->	O
next_out	pointer
=	O
state	pointer
->	O
out	pointer
;	O
if	O
(	O
gz_decomp	function
(	O
state	pointer
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
}	O
}	O
while	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
==	O
0	int
&&	O
(	O
!	O
state	pointer
->	O
eof	int
||	O
strm	pointer
->	O
avail_in	int
)	O
)	O
;	O
return	O
0	int
;	O
}	O
local	O
int	O
gz_skip	function
(	O
state	pointer
,	O
len	int
)	O
gz_statep	pointer
state	pointer
;	O
z_off64_t	O
len	int
;	O
{	O
unsigned	O
n	int
;	O
while	O
(	O
len	int
)	O
if	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
)	O
{	O
n	int
=	O
GT_OFF	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
)	O
||	O
(	O
z_off64_t	O
)	O
state	pointer
->	O
x	struct
.	O
have	int
>	O
len	int
?	O
(	O
unsigned	O
)	O
len	int
:	O
state	pointer
->	O
x	struct
.	O
have	int
;	O
state	pointer
->	O
x	struct
.	O
have	int
-=	O
n	int
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
+=	O
n	int
;	O
state	pointer
->	O
x	struct
.	O
pos	long
+=	O
n	int
;	O
len	int
-=	O
n	int
;	O
}	O
else	O
if	O
(	O
state	pointer
->	O
eof	int
&&	O
state	pointer
->	O
strm	pointer
.	O
avail_in	int
==	O
0	int
)	O
break	O
;	O
else	O
{	O
if	O
(	O
gz_fetch	function
(	O
state	pointer
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
local	O
z_size_t	long
gz_read	function
(	O
state	pointer
,	O
buf	pointer
,	O
len	int
)	O
gz_statep	pointer
state	pointer
;	O
voidp	pointer
buf	pointer
;	O
z_size_t	long
len	int
;	O
{	O
z_size_t	long
got	int
;	O
unsigned	O
n	int
;	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
state	pointer
->	O
seek	int
)	O
{	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
if	O
(	O
gz_skip	function
(	O
state	pointer
,	O
state	pointer
->	O
skip	long
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
}	O
got	int
=	O
0	int
;	O
do	O
{	O
n	int
=	O
-	O
1	int
;	O
if	O
(	O
n	int
>	O
len	int
)	O
n	int
=	O
len	int
;	O
if	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
)	O
{	O
if	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
<	O
n	int
)	O
n	int
=	O
state	pointer
->	O
x	struct
.	O
have	int
;	O
memcpy	function
(	O
buf	pointer
,	O
state	pointer
->	O
x	struct
.	O
next	pointer
,	O
n	int
)	O
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
+=	O
n	int
;	O
state	pointer
->	O
x	struct
.	O
have	int
-=	O
n	int
;	O
}	O
else	O
if	O
(	O
state	pointer
->	O
eof	int
&&	O
state	pointer
->	O
strm	pointer
.	O
avail_in	int
==	O
0	int
)	O
{	O
state	pointer
->	O
past	int
=	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
state	pointer
->	O
how	int
==	O
LOOK	int
||	O
n	int
<	O
(	O
state	pointer
->	O
size	int
<<	O
1	int
)	O
)	O
{	O
if	O
(	O
gz_fetch	function
(	O
state	pointer
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
state	pointer
->	O
how	int
==	O
COPY	int
)	O
{	O
if	O
(	O
gz_load	function
(	O
state	pointer
,	O
(	O
unsigned	O
char	O
*	O
)	O
buf	pointer
,	O
n	int
,	O
&	O
n	int
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
}	O
else	O
{	O
state	pointer
->	O
strm	pointer
.	O
avail_out	int
=	O
n	int
;	O
state	pointer
->	O
strm	pointer
.	O
next_out	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
buf	pointer
;	O
if	O
(	O
gz_decomp	function
(	O
state	pointer
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
n	int
=	O
state	pointer
->	O
x	struct
.	O
have	int
;	O
state	pointer
->	O
x	struct
.	O
have	int
=	O
0	int
;	O
}	O
len	int
-=	O
n	int
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
buf	pointer
+	O
n	int
;	O
got	int
+=	O
n	int
;	O
state	pointer
->	O
x	struct
.	O
pos	long
+=	O
n	int
;	O
}	O
while	O
(	O
len	int
)	O
;	O
return	O
got	int
;	O
}	O
int	O
ZEXPORT	O
gzread	function
(	O
file	pointer
,	O
buf	pointer
,	O
len	int
)	O
gzFile	pointer
file	pointer
;	O
voidp	pointer
buf	pointer
;	O
unsigned	O
len	int
;	O
{	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
||	O
(	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
&&	O
state	pointer
->	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
int	O
)	O
len	int
<	O
0	int
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_STREAM_ERROR	O
,	O
"request does not fit in an int"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
len	int
=	O
gz_read	function
(	O
state	pointer
,	O
buf	pointer
,	O
len	int
)	O
;	O
if	O
(	O
len	int
==	O
0	int
&&	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
&&	O
state	pointer
->	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
return	O
-	O
1	int
;	O
return	O
(	O
int	O
)	O
len	int
;	O
}	O
z_size_t	long
ZEXPORT	O
gzfread	function
(	O
buf	pointer
,	O
size	int
,	O
nitems	long
,	O
file	pointer
)	O
voidp	pointer
buf	pointer
;	O
z_size_t	long
size	int
;	O
z_size_t	long
nitems	long
;	O
gzFile	pointer
file	pointer
;	O
{	O
z_size_t	long
len	int
;	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
||	O
(	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
&&	O
state	pointer
->	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
)	O
return	O
0	int
;	O
len	int
=	O
nitems	long
*	O
size	int
;	O
if	O
(	O
size	int
&&	O
len	int
/	O
size	int
!=	O
nitems	long
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_STREAM_ERROR	O
,	O
"request does not fit in a size_t"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
return	O
len	int
?	O
gz_read	function
(	O
state	pointer
,	O
buf	pointer
,	O
len	int
)	O
/	O
size	int
:	O
0	int
;	O
}	O
int	O
ZEXPORT	O
gzgetc	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
int	O
ret	int
;	O
unsigned	O
char	O
buf	pointer
[	O
1	int
]	O
;	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
||	O
(	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
&&	O
state	pointer
->	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
)	O
{	O
state	pointer
->	O
x	struct
.	O
have	int
--	O
;	O
state	pointer
->	O
x	struct
.	O
pos	long
++	O
;	O
return	O
*	O
(	O
state	pointer
->	O
x	struct
.	O
next	pointer
)	O
++	O
;	O
}	O
ret	int
=	O
gz_read	function
(	O
state	pointer
,	O
buf	pointer
,	O
1	int
)	O
;	O
return	O
ret	int
<	O
1	int
?	O
-	O
1	int
:	O
buf	pointer
[	O
0	int
]	O
;	O
}	O
int	O
ZEXPORT	O
gzgetc_	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
return	O
gzgetc	function
(	O
file	pointer
)	O
;	O
}	O
int	O
ZEXPORT	O
gzungetc	function
(	O
c	int
,	O
file	pointer
)	O
int	O
c	int
;	O
gzFile	pointer
file	pointer
;	O
{	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
||	O
(	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
&&	O
state	pointer
->	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	pointer
->	O
seek	int
)	O
{	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
if	O
(	O
gz_skip	function
(	O
state	pointer
,	O
state	pointer
->	O
skip	long
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
c	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
==	O
0	int
)	O
{	O
state	pointer
->	O
x	struct
.	O
have	int
=	O
1	int
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
=	O
state	pointer
->	O
out	pointer
+	O
(	O
state	pointer
->	O
size	int
<<	O
1	int
)	O
-	O
1	int
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
[	O
0	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
state	pointer
->	O
x	struct
.	O
pos	long
--	O
;	O
state	pointer
->	O
past	int
=	O
0	int
;	O
return	O
c	int
;	O
}	O
if	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
==	O
(	O
state	pointer
->	O
size	int
<<	O
1	int
)	O
)	O
{	O
gz_error	function
(	O
state	pointer
,	O
Z_DATA_ERROR	O
,	O
"out of room to push characters"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
state	pointer
->	O
x	struct
.	O
next	pointer
==	O
state	pointer
->	O
out	pointer
)	O
{	O
unsigned	O
char	O
*	O
src	pointer
=	O
state	pointer
->	O
out	pointer
+	O
state	pointer
->	O
x	struct
.	O
have	int
;	O
unsigned	O
char	O
*	O
dest	pointer
=	O
state	pointer
->	O
out	pointer
+	O
(	O
state	pointer
->	O
size	int
<<	O
1	int
)	O
;	O
while	O
(	O
src	pointer
>	O
state	pointer
->	O
out	pointer
)	O
*	O
--	O
dest	pointer
=	O
*	O
--	O
src	pointer
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
=	O
dest	pointer
;	O
}	O
state	pointer
->	O
x	struct
.	O
have	int
++	O
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
--	O
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
[	O
0	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
state	pointer
->	O
x	struct
.	O
pos	long
--	O
;	O
state	pointer
->	O
past	int
=	O
0	int
;	O
return	O
c	int
;	O
}	O
char	O
*	O
ZEXPORT	O
gzgets	function
(	O
file	pointer
,	O
buf	pointer
,	O
len	int
)	O
gzFile	pointer
file	pointer
;	O
char	O
*	O
buf	pointer
;	O
int	O
len	int
;	O
{	O
unsigned	O
left	int
,	O
n	int
;	O
char	O
*	O
str	pointer
;	O
unsigned	O
char	O
*	O
eol	pointer
;	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
||	O
buf	pointer
==	O
NULL	O
||	O
len	int
<	O
1	int
)	O
return	O
NULL	O
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
||	O
(	O
state	pointer
->	O
err	int
!=	O
Z_OK	int
&&	O
state	pointer
->	O
err	int
!=	O
Z_BUF_ERROR	O
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
state	pointer
->	O
seek	int
)	O
{	O
state	pointer
->	O
seek	int
=	O
0	int
;	O
if	O
(	O
gz_skip	function
(	O
state	pointer
,	O
state	pointer
->	O
skip	long
)	O
==	O
-	O
1	int
)	O
return	O
NULL	O
;	O
}	O
str	pointer
=	O
buf	pointer
;	O
left	int
=	O
(	O
unsigned	O
)	O
len	int
-	O
1	int
;	O
if	O
(	O
left	int
)	O
do	O
{	O
if	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
==	O
0	int
&&	O
gz_fetch	function
(	O
state	pointer
)	O
==	O
-	O
1	int
)	O
return	O
NULL	O
;	O
if	O
(	O
state	pointer
->	O
x	struct
.	O
have	int
==	O
0	int
)	O
{	O
state	pointer
->	O
past	int
=	O
1	int
;	O
break	O
;	O
}	O
n	int
=	O
state	pointer
->	O
x	struct
.	O
have	int
>	O
left	int
?	O
left	int
:	O
state	pointer
->	O
x	struct
.	O
have	int
;	O
eol	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
memchr	function
(	O
state	pointer
->	O
x	struct
.	O
next	pointer
,	O
'\n'	O
,	O
n	int
)	O
;	O
if	O
(	O
eol	pointer
!=	O
NULL	O
)	O
n	int
=	O
(	O
unsigned	O
)	O
(	O
eol	pointer
-	O
state	pointer
->	O
x	struct
.	O
next	pointer
)	O
+	O
1	int
;	O
memcpy	function
(	O
buf	pointer
,	O
state	pointer
->	O
x	struct
.	O
next	pointer
,	O
n	int
)	O
;	O
state	pointer
->	O
x	struct
.	O
have	int
-=	O
n	int
;	O
state	pointer
->	O
x	struct
.	O
next	pointer
+=	O
n	int
;	O
state	pointer
->	O
x	struct
.	O
pos	long
+=	O
n	int
;	O
left	int
-=	O
n	int
;	O
buf	pointer
+=	O
n	int
;	O
}	O
while	O
(	O
left	int
&&	O
eol	pointer
==	O
NULL	O
)	O
;	O
if	O
(	O
buf	pointer
==	O
str	pointer
)	O
return	O
NULL	O
;	O
buf	pointer
[	O
0	int
]	O
=	O
0	int
;	O
return	O
str	pointer
;	O
}	O
int	O
ZEXPORT	O
gzdirect	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
==	O
GZ_READ	int
&&	O
state	pointer
->	O
how	int
==	O
LOOK	int
&&	O
state	pointer
->	O
x	struct
.	O
have	int
==	O
0	int
)	O
(	O
void	O
)	O
gz_look	function
(	O
state	pointer
)	O
;	O
return	O
state	pointer
->	O
direct	int
;	O
}	O
int	O
ZEXPORT	O
gzclose_r	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
int	O
ret	int
,	O
err	int
;	O
gz_statep	pointer
state	pointer
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	pointer
=	O
(	O
gz_statep	pointer
)	O
file	pointer
;	O
if	O
(	O
state	pointer
->	O
mode	pointer
!=	O
GZ_READ	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
state	pointer
->	O
size	int
)	O
{	O
inflateEnd	function
(	O
&	O
(	O
state	pointer
->	O
strm	pointer
)	O
)	O
;	O
free	function
(	O
state	pointer
->	O
out	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
in	pointer
)	O
;	O
}	O
err	int
=	O
state	pointer
->	O
err	int
==	O
Z_BUF_ERROR	O
?	O
Z_BUF_ERROR	O
:	O
Z_OK	int
;	O
gz_error	function
(	O
state	pointer
,	O
Z_OK	int
,	O
NULL	O
)	O
;	O
free	function
(	O
state	pointer
->	O
path	pointer
)	O
;	O
ret	int
=	O
close	function
(	O
state	pointer
->	O
fd	int
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
return	O
ret	int
?	O
Z_ERRNO	O
:	O
err	int
;	O
}	O
