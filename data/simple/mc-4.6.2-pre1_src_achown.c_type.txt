static	O
struct	O
Dlg_head	struct
*	O
ch_dlg	pointer
;	O
static	O
struct	O
{	O
int	O
ret_cmd	int
,	O
flags	enum
,	O
y	short
,	O
x	array
;	O
const	O
char	O
*	O
text	pointer
;	O
}	O
chown_advanced_but	array
[	O
BUTTONS	int
]	O
=	O
{	O
{	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
4	int
,	O
53	int
,	O
N_	O
(	O
"&Cancel"	pointer
)	O
}	O
,	O
{	O
B_ENTER	int
,	O
DEFPUSH_BUTTON	int
,	O
4	int
,	O
40	int
,	O
N_	O
(	O
"&Set"	pointer
)	O
}	O
,	O
{	O
B_SKIP	O
,	O
NORMAL_BUTTON	int
,	O
4	int
,	O
23	int
,	O
N_	O
(	O
"S&kip"	pointer
)	O
}	O
,	O
{	O
B_SETALL	O
,	O
NORMAL_BUTTON	int
,	O
4	int
,	O
0	int
,	O
N_	O
(	O
"Set &all"	pointer
)	O
}	O
,	O
{	O
B_ENTER	int
,	O
NARROW_BUTTON	int
,	O
0	int
,	O
47	int
,	O
""	pointer
}	O
,	O
{	O
B_ENTER	int
,	O
NARROW_BUTTON	int
,	O
0	int
,	O
29	int
,	O
""	pointer
}	O
,	O
{	O
B_ENTER	int
,	O
NARROW_BUTTON	int
,	O
0	int
,	O
19	int
,	O
"   "	pointer
}	O
,	O
{	O
B_ENTER	int
,	O
NARROW_BUTTON	int
,	O
0	int
,	O
11	int
,	O
"   "	pointer
}	O
,	O
{	O
B_ENTER	int
,	O
NARROW_BUTTON	int
,	O
0	int
,	O
3	int
,	O
"   "	pointer
}	O
}	O
;	O
static	O
WButton	struct
*	O
b_att	array
[	O
3	int
]	O
;	O
static	O
WButton	struct
*	O
b_user	pointer
,	O
*	O
b_group	pointer
;	O
static	O
int	O
files_on_begin	int
;	O
static	O
int	O
flag_pos	int
;	O
static	O
int	O
x_toggle	int
;	O
static	O
char	O
ch_flags	array
[	O
11	int
]	O
;	O
static	O
const	O
char	O
ch_perm	array
[	O
]	O
=	O
"rwx"	pointer
;	O
static	O
mode_t	int
ch_cmode	int
;	O
static	O
struct	O
stat	struct
*	O
sf_stat	pointer
;	O
static	O
int	O
need_update	int
;	O
static	O
int	O
end_chown	int
;	O
static	O
int	O
current_file	pointer
;	O
static	O
int	O
single_set	int
;	O
static	O
char	O
*	O
fname	pointer
;	O
static	O
void	O
update_ownership	function
(	O
void	O
)	O
{	O
button_set_text	function
(	O
b_user	pointer
,	O
get_owner	function
(	O
sf_stat	pointer
->	O
st_uid	int
)	O
)	O
;	O
button_set_text	function
(	O
b_group	pointer
,	O
get_group	function
(	O
sf_stat	pointer
->	O
st_gid	int
)	O
)	O
;	O
}	O
static	O
cb_ret_t	enum
inc_flag_pos	function
(	O
int	O
f_pos	int
)	O
{	O
if	O
(	O
flag_pos	int
==	O
10	int
)	O
{	O
flag_pos	int
=	O
0	int
;	O
return	O
MSG_NOT_HANDLED	int
;	O
}	O
flag_pos	int
++	O
;	O
if	O
(	O
!	O
(	O
flag_pos	int
%	O
3	int
)	O
||	O
f_pos	int
>	O
2	int
)	O
return	O
MSG_NOT_HANDLED	int
;	O
return	O
MSG_HANDLED	int
;	O
}	O
static	O
cb_ret_t	enum
dec_flag_pos	function
(	O
int	O
f_pos	int
)	O
{	O
if	O
(	O
!	O
flag_pos	int
)	O
{	O
flag_pos	int
=	O
10	int
;	O
return	O
MSG_NOT_HANDLED	int
;	O
}	O
flag_pos	int
--	O
;	O
if	O
(	O
!	O
(	O
(	O
flag_pos	int
+	O
1	int
)	O
%	O
3	int
)	O
||	O
f_pos	int
>	O
2	int
)	O
return	O
MSG_NOT_HANDLED	int
;	O
return	O
MSG_HANDLED	int
;	O
}	O
static	O
void	O
set_perm_by_flags	function
(	O
char	O
*	O
s	pointer
,	O
int	O
f_p	int
)	O
{	O
int	O
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
3	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
ch_flags	array
[	O
f_p	int
+	O
i	array
]	O
==	O
'+'	O
)	O
s	pointer
[	O
i	array
]	O
=	O
ch_perm	array
[	O
i	array
]	O
;	O
else	O
if	O
(	O
ch_flags	array
[	O
f_p	int
+	O
i	array
]	O
==	O
'-'	O
)	O
s	pointer
[	O
i	array
]	O
=	O
'-'	O
;	O
else	O
s	pointer
[	O
i	array
]	O
=	O
(	O
ch_cmode	int
&	O
(	O
1	int
<<	O
(	O
8	int
-	O
f_p	int
-	O
i	array
)	O
)	O
)	O
?	O
ch_perm	array
[	O
i	array
]	O
:	O
'-'	O
;	O
}	O
}	O
static	O
void	O
update_permissions	function
(	O
void	O
)	O
{	O
set_perm_by_flags	function
(	O
b_att	array
[	O
0	int
]	O
->	O
text	pointer
,	O
0	int
)	O
;	O
set_perm_by_flags	function
(	O
b_att	array
[	O
1	int
]	O
->	O
text	pointer
,	O
3	int
)	O
;	O
set_perm_by_flags	function
(	O
b_att	array
[	O
2	int
]	O
->	O
text	pointer
,	O
6	int
)	O
;	O
}	O
static	O
mode_t	int
get_perm	function
(	O
char	O
*	O
s	pointer
,	O
int	O
base	int
)	O
{	O
mode_t	int
m	int
;	O
m	int
=	O
0	int
;	O
m	int
|=	O
(	O
s	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
?	O
0	int
:	O
(	O
(	O
s	pointer
[	O
0	int
]	O
==	O
'+'	O
)	O
?	O
(	O
1	int
<<	O
(	O
base	int
+	O
2	int
)	O
)	O
:	O
(	O
1	int
<<	O
(	O
base	int
+	O
2	int
)	O
)	O
&	O
ch_cmode	int
)	O
;	O
m	int
|=	O
(	O
s	pointer
[	O
1	int
]	O
==	O
'-'	O
)	O
?	O
0	int
:	O
(	O
(	O
s	pointer
[	O
1	int
]	O
==	O
'+'	O
)	O
?	O
(	O
1	int
<<	O
(	O
base	int
+	O
1	int
)	O
)	O
:	O
(	O
1	int
<<	O
(	O
base	int
+	O
1	int
)	O
)	O
&	O
ch_cmode	int
)	O
;	O
m	int
|=	O
(	O
s	pointer
[	O
2	int
]	O
==	O
'-'	O
)	O
?	O
0	int
:	O
(	O
(	O
s	pointer
[	O
2	int
]	O
==	O
'+'	O
)	O
?	O
(	O
1	int
<<	O
base	int
)	O
:	O
(	O
1	int
<<	O
base	int
)	O
&	O
ch_cmode	int
)	O
;	O
return	O
m	int
;	O
}	O
static	O
mode_t	int
get_mode	function
(	O
void	O
)	O
{	O
mode_t	int
m	int
;	O
m	int
=	O
ch_cmode	int
^	O
(	O
ch_cmode	int
&	O
0777	int
)	O
;	O
m	int
|=	O
get_perm	function
(	O
ch_flags	array
,	O
6	int
)	O
;	O
m	int
|=	O
get_perm	function
(	O
ch_flags	array
+	O
3	int
,	O
3	int
)	O
;	O
m	int
|=	O
get_perm	function
(	O
ch_flags	array
+	O
6	int
,	O
0	int
)	O
;	O
return	O
m	int
;	O
}	O
static	O
void	O
print_flags	function
(	O
void	O
)	O
{	O
int	O
i	array
;	O
attrset	function
(	O
COLOR_NORMAL	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
3	int
;	O
i	array
++	O
)	O
{	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
+	O
1	int
,	O
9	int
+	O
i	array
)	O
;	O
addch	O
(	O
ch_flags	array
[	O
i	array
]	O
)	O
;	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
3	int
;	O
i	array
++	O
)	O
{	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
+	O
1	int
,	O
17	int
+	O
i	array
)	O
;	O
addch	O
(	O
ch_flags	array
[	O
i	array
+	O
3	int
]	O
)	O
;	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
3	int
;	O
i	array
++	O
)	O
{	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
+	O
1	int
,	O
25	int
+	O
i	array
)	O
;	O
addch	O
(	O
ch_flags	array
[	O
i	array
+	O
6	int
]	O
)	O
;	O
}	O
update_permissions	function
(	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
15	int
;	O
i	array
++	O
)	O
{	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
+	O
1	int
,	O
35	int
+	O
i	array
)	O
;	O
addch	O
(	O
ch_flags	array
[	O
9	int
]	O
)	O
;	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
15	int
;	O
i	array
++	O
)	O
{	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
+	O
1	int
,	O
53	int
+	O
i	array
)	O
;	O
addch	O
(	O
ch_flags	array
[	O
10	int
]	O
)	O
;	O
}	O
}	O
static	O
void	O
update_mode	function
(	O
Dlg_head	struct
*	O
h	pointer
)	O
{	O
print_flags	function
(	O
)	O
;	O
attrset	function
(	O
COLOR_NORMAL	O
)	O
;	O
dlg_move	O
(	O
h	pointer
,	O
BY	int
+	O
2	int
,	O
9	int
)	O
;	O
tty_printf	function
(	O
"%12o"	pointer
,	O
get_mode	function
(	O
)	O
)	O
;	O
send_message	function
(	O
h	pointer
->	O
current	pointer
,	O
WIDGET_FOCUS	int
,	O
0	int
)	O
;	O
}	O
static	O
cb_ret_t	enum
chl_callback	function
(	O
Dlg_head	struct
*	O
h	pointer
,	O
dlg_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
DLG_KEY	int
:	O
switch	O
(	O
parm	int
)	O
{	O
case	O
KEY_LEFT	int
:	O
case	O
KEY_RIGHT	int
:	O
h	pointer
->	O
ret_value	int
=	O
parm	int
;	O
dlg_stop	function
(	O
h	pointer
)	O
;	O
}	O
default	O
:	O
return	O
default_dlg_callback	function
(	O
h	pointer
,	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
static	O
void	O
do_enter_key	function
(	O
Dlg_head	struct
*	O
h	pointer
,	O
int	O
f_pos	int
)	O
{	O
Dlg_head	struct
*	O
chl_dlg	pointer
;	O
WListbox	struct
*	O
chl_list	pointer
;	O
struct	O
passwd	struct
*	O
chl_pass	pointer
;	O
struct	O
group	struct
*	O
chl_grp	pointer
;	O
WLEntry	struct
*	O
fe	pointer
;	O
int	O
lxx	int
,	O
lyy	int
,	O
chl_end	int
,	O
b_pos	int
;	O
int	O
is_owner	int
;	O
const	O
char	O
*	O
title	pointer
;	O
do	O
{	O
is_owner	int
=	O
(	O
f_pos	int
==	O
3	int
)	O
;	O
title	pointer
=	O
is_owner	int
?	O
_	O
(	O
"owner"	pointer
)	O
:	O
_	O
(	O
"group"	pointer
)	O
;	O
lxx	int
=	O
(	O
COLS	O
-	O
74	int
)	O
/	O
2	int
+	O
(	O
is_owner	int
?	O
35	int
:	O
53	int
)	O
;	O
lyy	int
=	O
(	O
LINES	O
-	O
13	int
)	O
/	O
2	int
;	O
chl_end	int
=	O
0	int
;	O
chl_dlg	pointer
=	O
create_dlg	function
(	O
lyy	int
,	O
lxx	int
,	O
13	int
,	O
17	int
,	O
dialog_colors	array
,	O
chl_callback	function
,	O
"[Advanced Chown]"	pointer
,	O
title	pointer
,	O
DLG_COMPACT	O
|	O
DLG_REVERSE	O
)	O
;	O
chl_list	pointer
=	O
listbox_new	function
(	O
1	int
,	O
1	int
,	O
15	int
,	O
11	int
,	O
NULL	O
)	O
;	O
listbox_add_item	function
(	O
chl_list	pointer
,	O
LISTBOX_APPEND_AT_END	int
,	O
0	int
,	O
"<Unknown>"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
is_owner	int
)	O
{	O
setpwent	function
(	O
)	O
;	O
while	O
(	O
(	O
chl_pass	pointer
=	O
getpwent	function
(	O
)	O
)	O
)	O
{	O
listbox_add_item	function
(	O
chl_list	pointer
,	O
LISTBOX_APPEND_AT_END	int
,	O
0	int
,	O
chl_pass	pointer
->	O
pw_name	pointer
,	O
NULL	O
)	O
;	O
}	O
endpwent	function
(	O
)	O
;	O
fe	pointer
=	O
listbox_search_text	function
(	O
chl_list	pointer
,	O
get_owner	function
(	O
sf_stat	pointer
->	O
st_uid	int
)	O
)	O
;	O
}	O
else	O
{	O
setgrent	function
(	O
)	O
;	O
while	O
(	O
(	O
chl_grp	pointer
=	O
getgrent	function
(	O
)	O
)	O
)	O
{	O
listbox_add_item	function
(	O
chl_list	pointer
,	O
LISTBOX_APPEND_AT_END	int
,	O
0	int
,	O
chl_grp	pointer
->	O
gr_name	pointer
,	O
NULL	O
)	O
;	O
}	O
endgrent	function
(	O
)	O
;	O
fe	pointer
=	O
listbox_search_text	function
(	O
chl_list	pointer
,	O
get_group	function
(	O
sf_stat	pointer
->	O
st_gid	int
)	O
)	O
;	O
}	O
if	O
(	O
fe	pointer
)	O
listbox_select_entry	function
(	O
chl_list	pointer
,	O
fe	pointer
)	O
;	O
b_pos	int
=	O
chl_list	pointer
->	O
pos	pointer
;	O
add_widget	function
(	O
chl_dlg	pointer
,	O
chl_list	pointer
)	O
;	O
run_dlg	function
(	O
chl_dlg	pointer
)	O
;	O
if	O
(	O
b_pos	int
!=	O
chl_list	pointer
->	O
pos	pointer
)	O
{	O
int	O
ok	int
=	O
0	int
;	O
if	O
(	O
is_owner	int
)	O
{	O
chl_pass	pointer
=	O
getpwnam	function
(	O
chl_list	pointer
->	O
current	pointer
->	O
text	pointer
)	O
;	O
if	O
(	O
chl_pass	pointer
)	O
{	O
ok	int
=	O
1	int
;	O
sf_stat	pointer
->	O
st_uid	int
=	O
chl_pass	pointer
->	O
pw_uid	int
;	O
}	O
}	O
else	O
{	O
chl_grp	pointer
=	O
getgrnam	function
(	O
chl_list	pointer
->	O
current	pointer
->	O
text	pointer
)	O
;	O
if	O
(	O
chl_grp	pointer
)	O
{	O
sf_stat	pointer
->	O
st_gid	int
=	O
chl_grp	pointer
->	O
gr_gid	int
;	O
ok	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
ok	int
)	O
{	O
ch_flags	array
[	O
f_pos	int
+	O
6	int
]	O
=	O
'+'	O
;	O
update_ownership	function
(	O
)	O
;	O
}	O
dlg_focus	function
(	O
h	pointer
)	O
;	O
if	O
(	O
ok	int
)	O
print_flags	function
(	O
)	O
;	O
}	O
if	O
(	O
chl_dlg	pointer
->	O
ret_value	int
==	O
KEY_LEFT	int
)	O
{	O
if	O
(	O
!	O
is_owner	int
)	O
chl_end	int
=	O
1	int
;	O
dlg_one_up	function
(	O
ch_dlg	pointer
)	O
;	O
f_pos	int
--	O
;	O
}	O
else	O
if	O
(	O
chl_dlg	pointer
->	O
ret_value	int
==	O
KEY_RIGHT	int
)	O
{	O
if	O
(	O
is_owner	int
)	O
chl_end	int
=	O
1	int
;	O
dlg_one_down	function
(	O
ch_dlg	pointer
)	O
;	O
f_pos	int
++	O
;	O
}	O
destroy_dlg	function
(	O
chl_dlg	pointer
)	O
;	O
}	O
while	O
(	O
chl_end	int
)	O
;	O
}	O
static	O
void	O
chown_refresh	function
(	O
void	O
)	O
{	O
common_dialog_repaint	function
(	O
ch_dlg	pointer
)	O
;	O
attrset	function
(	O
COLOR_NORMAL	O
)	O
;	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
-	O
1	int
,	O
8	int
)	O
;	O
addstr	O
(	O
_	O
(	O
"owner"	pointer
)	O
)	O
;	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
-	O
1	int
,	O
16	int
)	O
;	O
addstr	O
(	O
_	O
(	O
"group"	pointer
)	O
)	O
;	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
-	O
1	int
,	O
24	int
)	O
;	O
addstr	O
(	O
_	O
(	O
"other"	pointer
)	O
)	O
;	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
-	O
1	int
,	O
35	int
)	O
;	O
addstr	O
(	O
_	O
(	O
"owner"	pointer
)	O
)	O
;	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
-	O
1	int
,	O
53	int
)	O
;	O
addstr	O
(	O
_	O
(	O
"group"	pointer
)	O
)	O
;	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
3	int
,	O
4	int
)	O
;	O
addstr	O
(	O
_	O
(	O
"On"	pointer
)	O
)	O
;	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
+	O
1	int
,	O
4	int
)	O
;	O
addstr	O
(	O
_	O
(	O
"Flag"	pointer
)	O
)	O
;	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
+	O
2	int
,	O
4	int
)	O
;	O
addstr	O
(	O
_	O
(	O
"Mode"	pointer
)	O
)	O
;	O
if	O
(	O
!	O
single_set	int
)	O
{	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
3	int
,	O
54	int
)	O
;	O
tty_printf	function
(	O
_	O
(	O
"%6d of %d"	pointer
)	O
,	O
files_on_begin	int
-	O
(	O
current_panel	pointer
->	O
marked	int
)	O
+	O
1	int
,	O
files_on_begin	int
)	O
;	O
}	O
print_flags	function
(	O
)	O
;	O
}	O
static	O
void	O
chown_info_update	function
(	O
void	O
)	O
{	O
attrset	function
(	O
COLOR_NORMAL	O
)	O
;	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
3	int
,	O
8	int
)	O
;	O
tty_printf	function
(	O
"%s"	pointer
,	O
name_trunc	function
(	O
fname	pointer
,	O
45	int
)	O
)	O
;	O
dlg_move	O
(	O
ch_dlg	pointer
,	O
BY	int
+	O
2	int
,	O
9	int
)	O
;	O
tty_printf	function
(	O
"%12o"	pointer
,	O
get_mode	function
(	O
)	O
)	O
;	O
update_permissions	function
(	O
)	O
;	O
}	O
static	O
void	O
b_setpos	function
(	O
int	O
f_pos	int
)	O
{	O
b_att	array
[	O
0	int
]	O
->	O
hotpos	int
=	O
-	O
1	int
;	O
b_att	array
[	O
1	int
]	O
->	O
hotpos	int
=	O
-	O
1	int
;	O
b_att	array
[	O
2	int
]	O
->	O
hotpos	int
=	O
-	O
1	int
;	O
b_att	array
[	O
f_pos	int
]	O
->	O
hotpos	int
=	O
(	O
flag_pos	int
%	O
3	int
)	O
;	O
}	O
static	O
cb_ret_t	enum
advanced_chown_callback	function
(	O
Dlg_head	struct
*	O
h	pointer
,	O
dlg_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
int	O
i	array
=	O
0	int
,	O
f_pos	int
=	O
BUTTONS	int
-	O
h	pointer
->	O
current	pointer
->	O
dlg_id	int
-	O
single_set	int
-	O
1	int
;	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
DLG_DRAW	int
:	O
chown_refresh	function
(	O
)	O
;	O
chown_info_update	function
(	O
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
DLG_POST_KEY	int
:	O
if	O
(	O
f_pos	int
<	O
3	int
)	O
b_setpos	function
(	O
f_pos	int
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
DLG_FOCUS	int
:	O
if	O
(	O
f_pos	int
<	O
3	int
)	O
{	O
if	O
(	O
(	O
flag_pos	int
/	O
3	int
)	O
!=	O
f_pos	int
)	O
flag_pos	int
=	O
f_pos	int
*	O
3	int
;	O
b_setpos	function
(	O
f_pos	int
)	O
;	O
}	O
else	O
if	O
(	O
f_pos	int
<	O
5	int
)	O
flag_pos	int
=	O
f_pos	int
+	O
6	int
;	O
return	O
MSG_HANDLED	int
;	O
case	O
DLG_KEY	int
:	O
switch	O
(	O
parm	int
)	O
{	O
case	O
XCTRL	O
(	O
'b'	O
)	O
:	O
case	O
KEY_LEFT	int
:	O
if	O
(	O
f_pos	int
<	O
5	int
)	O
return	O
(	O
dec_flag_pos	function
(	O
f_pos	int
)	O
)	O
;	O
break	O
;	O
case	O
XCTRL	O
(	O
'f'	O
)	O
:	O
case	O
KEY_RIGHT	int
:	O
if	O
(	O
f_pos	int
<	O
5	int
)	O
return	O
(	O
inc_flag_pos	function
(	O
f_pos	int
)	O
)	O
;	O
break	O
;	O
case	O
' '	O
:	O
if	O
(	O
f_pos	int
<	O
3	int
)	O
return	O
MSG_HANDLED	int
;	O
break	O
;	O
case	O
'\n'	O
:	O
case	O
KEY_ENTER	int
:	O
if	O
(	O
f_pos	int
<=	O
2	int
||	O
f_pos	int
>=	O
5	int
)	O
break	O
;	O
do_enter_key	function
(	O
h	pointer
,	O
f_pos	int
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
ALT	O
(	O
'x'	O
)	O
:	O
i	array
++	O
;	O
case	O
ALT	O
(	O
'w'	O
)	O
:	O
i	array
++	O
;	O
case	O
ALT	O
(	O
'r'	O
)	O
:	O
parm	int
=	O
i	array
+	O
3	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
3	int
;	O
i	array
++	O
)	O
ch_flags	array
[	O
i	array
*	O
3	int
+	O
parm	int
-	O
3	int
]	O
=	O
(	O
x_toggle	int
&	O
(	O
1	int
<<	O
parm	int
)	O
)	O
?	O
'-'	O
:	O
'+'	O
;	O
x_toggle	int
^=	O
(	O
1	int
<<	O
parm	int
)	O
;	O
update_mode	function
(	O
h	pointer
)	O
;	O
dlg_broadcast_msg	function
(	O
h	pointer
,	O
WIDGET_DRAW	int
,	O
0	int
)	O
;	O
send_message	function
(	O
h	pointer
->	O
current	pointer
,	O
WIDGET_FOCUS	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
XCTRL	O
(	O
'x'	O
)	O
:	O
i	array
++	O
;	O
case	O
XCTRL	O
(	O
'w'	O
)	O
:	O
i	array
++	O
;	O
case	O
XCTRL	O
(	O
'r'	O
)	O
:	O
parm	int
=	O
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
3	int
;	O
i	array
++	O
)	O
ch_flags	array
[	O
i	array
*	O
3	int
+	O
parm	int
]	O
=	O
(	O
x_toggle	int
&	O
(	O
1	int
<<	O
parm	int
)	O
)	O
?	O
'-'	O
:	O
'+'	O
;	O
x_toggle	int
^=	O
(	O
1	int
<<	O
parm	int
)	O
;	O
update_mode	function
(	O
h	pointer
)	O
;	O
dlg_broadcast_msg	function
(	O
h	pointer
,	O
WIDGET_DRAW	int
,	O
0	int
)	O
;	O
send_message	function
(	O
h	pointer
->	O
current	pointer
,	O
WIDGET_FOCUS	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
i	array
++	O
;	O
case	O
'w'	O
:	O
i	array
++	O
;	O
case	O
'r'	O
:	O
if	O
(	O
f_pos	int
>	O
2	int
)	O
break	O
;	O
flag_pos	int
=	O
f_pos	int
*	O
3	int
+	O
i	array
;	O
if	O
(	O
(	O
(	O
WButton	struct
*	O
)	O
h	pointer
->	O
current	pointer
)	O
->	O
text	pointer
[	O
(	O
flag_pos	int
%	O
3	int
)	O
]	O
==	O
'-'	O
)	O
ch_flags	array
[	O
flag_pos	int
]	O
=	O
'+'	O
;	O
else	O
ch_flags	array
[	O
flag_pos	int
]	O
=	O
'-'	O
;	O
update_mode	function
(	O
h	pointer
)	O
;	O
break	O
;	O
case	O
'4'	O
:	O
i	array
++	O
;	O
case	O
'2'	O
:	O
i	array
++	O
;	O
case	O
'1'	O
:	O
if	O
(	O
f_pos	int
>	O
2	int
)	O
break	O
;	O
flag_pos	int
=	O
i	array
+	O
f_pos	int
*	O
3	int
;	O
ch_flags	array
[	O
flag_pos	int
]	O
=	O
'='	O
;	O
update_mode	function
(	O
h	pointer
)	O
;	O
break	O
;	O
case	O
'-'	O
:	O
if	O
(	O
f_pos	int
>	O
2	int
)	O
break	O
;	O
case	O
'*'	O
:	O
if	O
(	O
parm	int
==	O
'*'	O
)	O
parm	int
=	O
'='	O
;	O
case	O
'='	O
:	O
case	O
'+'	O
:	O
if	O
(	O
f_pos	int
>	O
4	int
)	O
break	O
;	O
ch_flags	array
[	O
flag_pos	int
]	O
=	O
parm	int
;	O
update_mode	function
(	O
h	pointer
)	O
;	O
advanced_chown_callback	function
(	O
h	pointer
,	O
DLG_KEY	int
,	O
KEY_RIGHT	int
)	O
;	O
if	O
(	O
flag_pos	int
>	O
8	int
||	O
!	O
(	O
flag_pos	int
%	O
3	int
)	O
)	O
dlg_one_down	function
(	O
h	pointer
)	O
;	O
break	O
;	O
}	O
return	O
MSG_NOT_HANDLED	int
;	O
default	O
:	O
return	O
default_dlg_callback	function
(	O
h	pointer
,	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
static	O
void	O
init_chown_advanced	function
(	O
void	O
)	O
{	O
int	O
i	array
;	O
enum	O
{	O
dlg_h	int
=	O
13	int
,	O
dlg_w	int
=	O
74	int
,	O
n_elem	int
=	O
4	int
}	O
;	O
static	O
int	O
i18n_len	int
;	O
if	O
(	O
!	O
i18n_len	int
)	O
{	O
int	O
dx	int
,	O
cx	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
n_elem	int
;	O
i	array
++	O
)	O
{	O
chown_advanced_but	array
[	O
i	array
]	O
.	O
text	pointer
=	O
_	O
(	O
chown_advanced_but	array
[	O
i	array
]	O
.	O
text	pointer
)	O
;	O
i18n_len	int
+=	O
strlen	function
(	O
chown_advanced_but	array
[	O
i	array
]	O
.	O
text	pointer
)	O
+	O
3	int
;	O
if	O
(	O
DEFPUSH_BUTTON	int
==	O
chown_advanced_but	array
[	O
i	array
]	O
.	O
flags	enum
)	O
i18n_len	int
+=	O
2	int
;	O
}	O
cx	int
=	O
dx	int
=	O
(	O
dlg_w	int
-	O
i18n_len	int
-	O
2	int
)	O
/	O
(	O
n_elem	int
+	O
1	int
)	O
;	O
for	O
(	O
i	array
=	O
n_elem	int
-	O
1	int
;	O
i	array
>=	O
0	int
;	O
i	array
--	O
)	O
{	O
chown_advanced_but	array
[	O
i	array
]	O
.	O
x	array
=	O
cx	int
;	O
cx	int
+=	O
strlen	function
(	O
chown_advanced_but	array
[	O
i	array
]	O
.	O
text	pointer
)	O
+	O
3	int
+	O
dx	int
;	O
}	O
}	O
sf_stat	pointer
=	O
g_new	O
(	O
struct	O
stat	struct
,	O
1	int
)	O
;	O
do_refresh	function
(	O
)	O
;	O
end_chown	int
=	O
need_update	int
=	O
current_file	pointer
=	O
0	int
;	O
single_set	int
=	O
(	O
current_panel	pointer
->	O
marked	int
<	O
2	int
)	O
?	O
2	int
:	O
0	int
;	O
memset	function
(	O
ch_flags	array
,	O
'='	O
,	O
11	int
)	O
;	O
flag_pos	int
=	O
0	int
;	O
x_toggle	int
=	O
070	int
;	O
ch_dlg	pointer
=	O
create_dlg	function
(	O
0	int
,	O
0	int
,	O
dlg_h	int
,	O
dlg_w	int
,	O
dialog_colors	array
,	O
advanced_chown_callback	function
,	O
"[Advanced Chown]"	pointer
,	O
_	O
(	O
" Chown advanced command "	pointer
)	O
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
BUTTONS	int
-	O
5	int
;	O
i	array
++	O
)	O
if	O
(	O
!	O
single_set	int
||	O
i	array
<	O
2	int
)	O
add_widget	function
(	O
ch_dlg	pointer
,	O
button_new	function
(	O
XTRACT	O
(	O
i	array
)	O
)	O
)	O
;	O
b_att	array
[	O
0	int
]	O
=	O
button_new	function
(	O
XTRACT	O
(	O
8	int
)	O
)	O
;	O
b_att	array
[	O
1	int
]	O
=	O
button_new	function
(	O
XTRACT	O
(	O
7	int
)	O
)	O
;	O
b_att	array
[	O
2	int
]	O
=	O
button_new	function
(	O
XTRACT	O
(	O
6	int
)	O
)	O
;	O
b_user	pointer
=	O
button_new	function
(	O
XTRACT	O
(	O
5	int
)	O
)	O
;	O
b_group	pointer
=	O
button_new	function
(	O
XTRACT	O
(	O
4	int
)	O
)	O
;	O
add_widget	function
(	O
ch_dlg	pointer
,	O
b_group	pointer
)	O
;	O
add_widget	function
(	O
ch_dlg	pointer
,	O
b_user	pointer
)	O
;	O
add_widget	function
(	O
ch_dlg	pointer
,	O
b_att	array
[	O
2	int
]	O
)	O
;	O
add_widget	function
(	O
ch_dlg	pointer
,	O
b_att	array
[	O
1	int
]	O
)	O
;	O
add_widget	function
(	O
ch_dlg	pointer
,	O
b_att	array
[	O
0	int
]	O
)	O
;	O
}	O
static	O
void	O
chown_advanced_done	function
(	O
void	O
)	O
{	O
g_free	function
(	O
sf_stat	pointer
)	O
;	O
if	O
(	O
need_update	int
)	O
update_panels	function
(	O
UP_OPTIMIZE	int
,	O
UP_KEEPSEL	O
)	O
;	O
repaint_screen	function
(	O
)	O
;	O
}	O
static	O
char	O
*	O
next_file	function
(	O
void	O
)	O
{	O
while	O
(	O
!	O
current_panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
current_file	pointer
]	O
.	O
f	float
.	O
marked	int
)	O
current_file	pointer
++	O
;	O
return	O
current_panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
current_file	pointer
]	O
.	O
fname	pointer
;	O
}	O
static	O
void	O
apply_advanced_chowns	function
(	O
struct	O
stat	struct
*	O
sf	pointer
)	O
{	O
char	O
*	O
fname	pointer
;	O
gid_t	int
a_gid	int
=	O
sf	pointer
->	O
st_gid	int
;	O
uid_t	int
a_uid	int
=	O
sf	pointer
->	O
st_uid	int
;	O
fname	pointer
=	O
current_panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
current_file	pointer
]	O
.	O
fname	pointer
;	O
need_update	int
=	O
end_chown	int
=	O
1	int
;	O
if	O
(	O
mc_chmod	function
(	O
fname	pointer
,	O
get_mode	function
(	O
)	O
)	O
==	O
-	O
1	int
)	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot chmod \"%s\" \n %s "	pointer
)	O
,	O
fname	pointer
,	O
unix_error_string	function
(	O
errno	O
)	O
)	O
;	O
else	O
if	O
(	O
mc_chown	function
(	O
fname	pointer
,	O
(	O
ch_flags	array
[	O
9	int
]	O
==	O
'+'	O
)	O
?	O
sf	pointer
->	O
st_uid	int
:	O
(	O
uid_t	int
)	O
-	O
1	int
,	O
(	O
ch_flags	array
[	O
10	int
]	O
==	O
'+'	O
)	O
?	O
sf	pointer
->	O
st_gid	int
:	O
(	O
gid_t	int
)	O
-	O
1	int
)	O
==	O
-	O
1	int
)	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot chown \"%s\" \n %s "	pointer
)	O
,	O
fname	pointer
,	O
unix_error_string	function
(	O
errno	O
)	O
)	O
;	O
do_file_mark	function
(	O
current_panel	pointer
,	O
current_file	pointer
,	O
0	int
)	O
;	O
do	O
{	O
fname	pointer
=	O
next_file	function
(	O
)	O
;	O
if	O
(	O
mc_stat	function
(	O
fname	pointer
,	O
sf	pointer
)	O
!=	O
0	int
)	O
break	O
;	O
ch_cmode	int
=	O
sf	pointer
->	O
st_mode	int
;	O
if	O
(	O
mc_chmod	function
(	O
fname	pointer
,	O
get_mode	function
(	O
)	O
)	O
==	O
-	O
1	int
)	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot chmod \"%s\" \n %s "	pointer
)	O
,	O
fname	pointer
,	O
unix_error_string	function
(	O
errno	O
)	O
)	O
;	O
else	O
if	O
(	O
mc_chown	function
(	O
fname	pointer
,	O
(	O
ch_flags	array
[	O
9	int
]	O
==	O
'+'	O
)	O
?	O
a_uid	int
:	O
(	O
uid_t	int
)	O
-	O
1	int
,	O
(	O
ch_flags	array
[	O
10	int
]	O
==	O
'+'	O
)	O
?	O
a_gid	int
:	O
(	O
gid_t	int
)	O
-	O
1	int
)	O
==	O
-	O
1	int
)	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot chown \"%s\" \n %s "	pointer
)	O
,	O
fname	pointer
,	O
unix_error_string	function
(	O
errno	O
)	O
)	O
;	O
do_file_mark	function
(	O
current_panel	pointer
,	O
current_file	pointer
,	O
0	int
)	O
;	O
}	O
while	O
(	O
current_panel	pointer
->	O
marked	int
)	O
;	O
}	O
void	O
chown_advanced_cmd	function
(	O
void	O
)	O
{	O
files_on_begin	int
=	O
current_panel	pointer
->	O
marked	int
;	O
do	O
{	O
init_chown_advanced	function
(	O
)	O
;	O
if	O
(	O
current_panel	pointer
->	O
marked	int
)	O
fname	pointer
=	O
next_file	function
(	O
)	O
;	O
else	O
fname	pointer
=	O
selection	O
(	O
current_panel	pointer
)	O
->	O
fname	pointer
;	O
if	O
(	O
mc_stat	function
(	O
fname	pointer
,	O
sf_stat	pointer
)	O
!=	O
0	int
)	O
{	O
destroy_dlg	function
(	O
ch_dlg	pointer
)	O
;	O
break	O
;	O
}	O
ch_cmode	int
=	O
sf_stat	pointer
->	O
st_mode	int
;	O
chown_refresh	function
(	O
)	O
;	O
update_ownership	function
(	O
)	O
;	O
run_dlg	function
(	O
ch_dlg	pointer
)	O
;	O
switch	O
(	O
ch_dlg	pointer
->	O
ret_value	int
)	O
{	O
case	O
B_CANCEL	int
:	O
end_chown	int
=	O
1	int
;	O
break	O
;	O
case	O
B_ENTER	int
:	O
need_update	int
=	O
1	int
;	O
if	O
(	O
mc_chmod	function
(	O
fname	pointer
,	O
get_mode	function
(	O
)	O
)	O
==	O
-	O
1	int
)	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot chmod \"%s\" \n %s "	pointer
)	O
,	O
fname	pointer
,	O
unix_error_string	function
(	O
errno	O
)	O
)	O
;	O
else	O
if	O
(	O
mc_chown	function
(	O
fname	pointer
,	O
(	O
ch_flags	array
[	O
9	int
]	O
==	O
'+'	O
)	O
?	O
sf_stat	pointer
->	O
st_uid	int
:	O
(	O
uid_t	int
)	O
-	O
1	int
,	O
(	O
ch_flags	array
[	O
10	int
]	O
==	O
'+'	O
)	O
?	O
sf_stat	pointer
->	O
st_gid	int
:	O
(	O
gid_t	int
)	O
-	O
1	int
)	O
==	O
-	O
1	int
)	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot chown \"%s\" \n %s "	pointer
)	O
,	O
fname	pointer
,	O
unix_error_string	function
(	O
errno	O
)	O
)	O
;	O
break	O
;	O
case	O
B_SETALL	O
:	O
apply_advanced_chowns	function
(	O
sf_stat	pointer
)	O
;	O
break	O
;	O
case	O
B_SKIP	O
:	O
break	O
;	O
}	O
if	O
(	O
current_panel	pointer
->	O
marked	int
&&	O
ch_dlg	pointer
->	O
ret_value	int
!=	O
B_CANCEL	int
)	O
{	O
do_file_mark	function
(	O
current_panel	pointer
,	O
current_file	pointer
,	O
0	int
)	O
;	O
need_update	int
=	O
1	int
;	O
}	O
destroy_dlg	function
(	O
ch_dlg	pointer
)	O
;	O
}	O
while	O
(	O
current_panel	pointer
->	O
marked	int
&&	O
!	O
end_chown	int
)	O
;	O
chown_advanced_done	function
(	O
)	O
;	O
}	O
