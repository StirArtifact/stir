static	O
inline	O
char	O
*	O
MFB_base_ptr	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
)	O
{	O
return	O
buf	pointer
->	O
base	pointer
;	O
}	O
static	O
inline	O
char	O
*	O
MFB_cur_ptr	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
)	O
{	O
return	O
buf	pointer
->	O
base	pointer
+	O
buf	pointer
->	O
pos	long
;	O
}	O
static	O
inline	O
char	O
*	O
MFB_end_ptr	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
)	O
{	O
return	O
buf	pointer
->	O
base	pointer
+	O
buf	pointer
->	O
level	int
;	O
}	O
static	O
inline	O
size_t	long
MFB_size	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
)	O
{	O
return	O
buf	pointer
->	O
size	long
;	O
}	O
static	O
inline	O
size_t	long
MFB_level	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
)	O
{	O
return	O
buf	pointer
->	O
level	int
;	O
}	O
static	O
inline	O
size_t	long
MFB_pos	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
)	O
{	O
return	O
buf	pointer
->	O
pos	long
;	O
}	O
static	O
inline	O
size_t	long
MFB_rdbytes	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
)	O
{	O
return	O
MFB_level	function
(	O
buf	pointer
)	O
-	O
MFB_pos	function
(	O
buf	pointer
)	O
;	O
}	O
static	O
inline	O
size_t	long
MFB_freesize	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
)	O
{	O
return	O
MFB_size	function
(	O
buf	pointer
)	O
-	O
MFB_level	function
(	O
buf	pointer
)	O
;	O
}	O
static	O
inline	O
void	O
MFB_clear	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
)	O
{	O
buf	pointer
->	O
pos	long
=	O
buf	pointer
->	O
level	int
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
MFB_deallocate	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
)	O
{	O
free	function
(	O
buf	pointer
->	O
base	pointer
)	O
;	O
}	O
static	O
inline	O
void	O
MFB_compact	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
)	O
{	O
if	O
(	O
MFB_pos	function
(	O
buf	pointer
)	O
)	O
{	O
memmove	function
(	O
MFB_base_ptr	function
(	O
buf	pointer
)	O
,	O
MFB_cur_ptr	function
(	O
buf	pointer
)	O
,	O
MFB_rdbytes	function
(	O
buf	pointer
)	O
)	O
;	O
buf	pointer
->	O
level	int
-=	O
buf	pointer
->	O
pos	long
;	O
buf	pointer
->	O
pos	long
=	O
0	int
;	O
}	O
}	O
static	O
int	O
MFB_require	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
size	long
>	O
MFB_freesize	function
(	O
buf	pointer
)	O
)	O
{	O
MFB_compact	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
size	long
>	O
MFB_freesize	function
(	O
buf	pointer
)	O
)	O
{	O
char	O
*	O
p	pointer
;	O
size	long
+=	O
MFB_level	function
(	O
buf	pointer
)	O
;	O
p	pointer
=	O
realloc	function
(	O
buf	pointer
->	O
base	pointer
,	O
size	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
buf	pointer
->	O
size	long
=	O
size	long
;	O
buf	pointer
->	O
base	pointer
=	O
p	pointer
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
inline	O
void	O
MFB_advance_pos	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
,	O
size_t	long
delta	long
)	O
{	O
buf	pointer
->	O
pos	long
+=	O
delta	long
;	O
if	O
(	O
buf	pointer
->	O
pos	long
==	O
buf	pointer
->	O
level	int
)	O
buf	pointer
->	O
pos	long
=	O
buf	pointer
->	O
level	int
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
MFB_advance_level	function
(	O
struct	O
_mu_filter_buffer	struct
*	O
buf	pointer
,	O
size_t	long
delta	long
)	O
{	O
buf	pointer
->	O
level	int
+=	O
delta	long
;	O
}	O
static	O
void	O
init_iobuf	function
(	O
struct	O
mu_filter_io	struct
*	O
io	pointer
,	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
)	O
{	O
io	pointer
->	O
input	pointer
=	O
MFB_cur_ptr	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
;	O
io	pointer
->	O
isize	long
=	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
;	O
if	O
(	O
fs	pointer
->	O
outbuf_size	long
)	O
{	O
if	O
(	O
MFB_freesize	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
<	O
fs	pointer
->	O
outbuf_size	long
)	O
MFB_require	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
,	O
fs	pointer
->	O
outbuf_size	long
)	O
;	O
io	pointer
->	O
osize	long
=	O
fs	pointer
->	O
outbuf_size	long
;	O
}	O
else	O
io	pointer
->	O
osize	long
=	O
MFB_freesize	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
;	O
io	pointer
->	O
output	pointer
=	O
MFB_end_ptr	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
;	O
io	pointer
->	O
errcode	int
=	O
MU_ERR_FAILURE	O
;	O
io	pointer
->	O
eof	int
=	O
0	int
;	O
}	O
static	O
int	O
filter_stream_init	function
(	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
)	O
{	O
if	O
(	O
fs	pointer
->	O
xdata	pointer
)	O
{	O
struct	O
mu_filter_io	struct
iobuf	pointer
;	O
memset	function
(	O
&	O
iobuf	pointer
,	O
0	int
,	O
sizeof	O
(	O
iobuf	pointer
)	O
)	O
;	O
iobuf	pointer
.	O
errcode	int
=	O
MU_ERR_FAILURE	O
;	O
if	O
(	O
fs	pointer
->	O
xcode	pointer
(	O
fs	pointer
->	O
xdata	pointer
,	O
mu_filter_init	int
,	O
&	O
iobuf	pointer
)	O
==	O
mu_filter_failure	int
)	O
return	O
iobuf	pointer
.	O
errcode	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
filter_read	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
struct	O
mu_filter_io	struct
iobuf	pointer
;	O
size_t	long
min_input_level	long
=	O
MU_FILTER_BUF_SIZE	int
;	O
size_t	long
min_output_size	long
=	O
MU_FILTER_BUF_SIZE	int
;	O
enum	O
mu_filter_command	enum
cmd	enum
=	O
mu_filter_xcode	int
;	O
size_t	long
total	long
=	O
0	int
;	O
int	O
stop	int
=	O
0	int
;	O
int	O
again	int
=	O
0	int
;	O
if	O
(	O
fs	pointer
->	O
flag_disabled	int
)	O
return	O
mu_stream_read	function
(	O
fs	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
size	long
,	O
pret	pointer
)	O
;	O
do	O
{	O
size_t	long
rdsize	long
;	O
if	O
(	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
==	O
0	int
)	O
{	O
enum	O
mu_filter_result	enum
res	enum
;	O
int	O
rc	int
;	O
if	O
(	O
fs	pointer
->	O
flag_eof	int
)	O
break	O
;	O
if	O
(	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
<	O
min_input_level	long
&&	O
!	O
again	int
)	O
{	O
rc	int
=	O
MFB_require	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
,	O
min_input_level	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_read	function
(	O
fs	pointer
->	O
transport	pointer
,	O
MFB_end_ptr	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
,	O
MFB_freesize	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
,	O
&	O
rdsize	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
rdsize	long
==	O
0	int
&&	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
==	O
0	int
&&	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
==	O
0	int
)	O
{	O
if	O
(	O
cmd	enum
==	O
mu_filter_lastbuf	int
)	O
break	O
;	O
else	O
cmd	enum
=	O
mu_filter_lastbuf	int
;	O
}	O
MFB_advance_level	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
,	O
rdsize	long
)	O
;	O
}	O
if	O
(	O
min_output_size	long
<	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
)	O
min_output_size	long
=	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
;	O
rc	int
=	O
MFB_require	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
,	O
min_output_size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
init_iobuf	function
(	O
&	O
iobuf	pointer
,	O
fs	pointer
)	O
;	O
if	O
(	O
cmd	enum
!=	O
mu_filter_lastbuf	int
)	O
cmd	enum
=	O
mu_stream_eof	function
(	O
fs	pointer
->	O
transport	pointer
)	O
?	O
mu_filter_lastbuf	int
:	O
mu_filter_xcode	int
;	O
res	enum
=	O
fs	pointer
->	O
xcode	pointer
(	O
fs	pointer
->	O
xdata	pointer
,	O
cmd	enum
,	O
&	O
iobuf	pointer
)	O
;	O
switch	O
(	O
res	enum
)	O
{	O
case	O
mu_filter_again	int
:	O
if	O
(	O
++	O
again	int
>	O
MU_FILTER_MAX_AGAIN	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FILTER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"filter returned `again' too many times"	pointer
)	O
)	O
)	O
;	O
again	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
mu_filter_ok	int
:	O
break	O
;	O
case	O
mu_filter_failure	int
:	O
return	O
iobuf	pointer
.	O
errcode	int
;	O
case	O
mu_filter_moreinput	int
:	O
if	O
(	O
cmd	enum
==	O
mu_filter_lastbuf	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
min_input_level	long
=	O
iobuf	pointer
.	O
isize	long
;	O
continue	O
;	O
case	O
mu_filter_moreoutput	int
:	O
min_output_size	long
=	O
iobuf	pointer
.	O
osize	long
;	O
continue	O
;	O
}	O
if	O
(	O
iobuf	pointer
.	O
isize	long
>	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
||	O
iobuf	pointer
.	O
osize	long
>	O
MFB_freesize	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
)	O
return	O
MU_ERR_BUFSPACE	O
;	O
MFB_advance_level	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
,	O
iobuf	pointer
.	O
osize	long
)	O
;	O
MFB_advance_pos	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
,	O
iobuf	pointer
.	O
isize	long
)	O
;	O
if	O
(	O
res	enum
==	O
mu_filter_ok	int
)	O
{	O
if	O
(	O
iobuf	pointer
.	O
eof	int
)	O
{	O
fs	pointer
->	O
flag_eof	int
=	O
1	int
;	O
stop	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
fs	pointer
->	O
outbuf_size	long
)	O
{	O
if	O
(	O
iobuf	pointer
.	O
osize	long
==	O
0	int
)	O
return	O
MU_ERR_BUFSPACE	O
;	O
stop	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmd	enum
==	O
mu_filter_lastbuf	int
)	O
{	O
if	O
(	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
)	O
{	O
if	O
(	O
++	O
again	int
>	O
MU_FILTER_MAX_AGAIN	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FILTER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"filter returned `again' too many times"	pointer
)	O
)	O
)	O
;	O
stop	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
fs	pointer
->	O
flag_eof	int
=	O
1	int
;	O
stop	int
=	O
1	int
;	O
}	O
}	O
else	O
again	int
=	O
0	int
;	O
}	O
}	O
rdsize	long
=	O
size	long
-	O
total	long
;	O
if	O
(	O
rdsize	long
>	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
)	O
rdsize	long
=	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
;	O
memcpy	function
(	O
buf	pointer
+	O
total	long
,	O
MFB_cur_ptr	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
,	O
rdsize	long
)	O
;	O
MFB_advance_pos	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
,	O
rdsize	long
)	O
;	O
total	long
+=	O
rdsize	long
;	O
}	O
while	O
(	O
!	O
stop	int
&&	O
total	long
<	O
size	long
)	O
;	O
*	O
pret	pointer
=	O
total	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
filter_rd_flush	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
return	O
filter_stream_init	function
(	O
fs	pointer
)	O
;	O
}	O
static	O
int	O
filter_write_internal	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
struct	O
mu_filter_io	struct
iobuf	pointer
;	O
size_t	long
min_input_level	long
=	O
cmd	enum
==	O
mu_filter_xcode	int
?	O
MU_FILTER_BUF_SIZE	int
:	O
0	int
;	O
size_t	long
min_output_size	long
=	O
MU_FILTER_BUF_SIZE	int
;	O
size_t	long
total	long
=	O
0	int
;	O
int	O
rc	int
=	O
0	int
;	O
int	O
again	int
;	O
int	O
stop	int
=	O
0	int
;	O
do	O
{	O
size_t	long
rdsize	long
;	O
enum	O
mu_filter_result	enum
res	enum
;	O
if	O
(	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
<	O
min_input_level	long
)	O
{	O
rdsize	long
=	O
size	long
-	O
total	long
;	O
if	O
(	O
rdsize	long
==	O
0	int
)	O
break	O
;	O
rc	int
=	O
MFB_require	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
,	O
min_input_level	long
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
rdsize	long
>	O
MFB_freesize	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
)	O
rdsize	long
=	O
MFB_freesize	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
;	O
memcpy	function
(	O
MFB_end_ptr	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
,	O
buf	pointer
+	O
total	long
,	O
rdsize	long
)	O
;	O
MFB_advance_level	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
,	O
rdsize	long
)	O
;	O
total	long
+=	O
rdsize	long
;	O
}	O
if	O
(	O
min_output_size	long
<	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
)	O
min_output_size	long
=	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
;	O
rc	int
=	O
MFB_require	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
,	O
min_output_size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
init_iobuf	function
(	O
&	O
iobuf	pointer
,	O
fs	pointer
)	O
;	O
res	enum
=	O
fs	pointer
->	O
xcode	pointer
(	O
fs	pointer
->	O
xdata	pointer
,	O
cmd	enum
,	O
&	O
iobuf	pointer
)	O
;	O
switch	O
(	O
res	enum
)	O
{	O
case	O
mu_filter_again	int
:	O
if	O
(	O
++	O
again	int
>	O
MU_FILTER_MAX_AGAIN	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_FILTER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
_	O
(	O
"filter returned `again' too many times"	pointer
)	O
)	O
)	O
;	O
again	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
mu_filter_ok	int
:	O
again	int
=	O
0	int
;	O
if	O
(	O
cmd	enum
==	O
mu_filter_lastbuf	int
||	O
iobuf	pointer
.	O
eof	int
)	O
{	O
_mu_stream_seteof	function
(	O
stream	pointer
)	O
;	O
stop	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
mu_filter_failure	int
:	O
return	O
iobuf	pointer
.	O
errcode	int
;	O
case	O
mu_filter_moreinput	int
:	O
min_input_level	long
=	O
iobuf	pointer
.	O
isize	long
;	O
continue	O
;	O
case	O
mu_filter_moreoutput	int
:	O
min_output_size	long
=	O
iobuf	pointer
.	O
osize	long
;	O
continue	O
;	O
}	O
if	O
(	O
iobuf	pointer
.	O
isize	long
>	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
||	O
iobuf	pointer
.	O
osize	long
>	O
MFB_freesize	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
)	O
return	O
MU_ERR_BUFSPACE	O
;	O
MFB_advance_level	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
,	O
iobuf	pointer
.	O
osize	long
)	O
;	O
MFB_advance_pos	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
,	O
iobuf	pointer
.	O
isize	long
)	O
;	O
rc	int
=	O
mu_stream_write	function
(	O
fs	pointer
->	O
transport	pointer
,	O
MFB_cur_ptr	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
,	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
,	O
&	O
rdsize	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
MFB_advance_pos	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
,	O
rdsize	long
)	O
;	O
else	O
break	O
;	O
}	O
while	O
(	O
!	O
stop	int
&&	O
(	O
MFB_rdbytes	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
||	O
again	int
)	O
)	O
;	O
if	O
(	O
pret	pointer
)	O
*	O
pret	pointer
=	O
total	long
;	O
else	O
if	O
(	O
total	long
<	O
size	long
&&	O
rc	int
==	O
0	int
)	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
filter_write	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
if	O
(	O
fs	pointer
->	O
flag_disabled	int
)	O
return	O
mu_stream_write	function
(	O
fs	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
size	long
,	O
pret	pointer
)	O
;	O
return	O
filter_write_internal	function
(	O
stream	pointer
,	O
mu_filter_xcode	int
,	O
buf	pointer
,	O
size	long
,	O
pret	pointer
)	O
;	O
}	O
static	O
int	O
filter_wr_flush	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
size_t	long
dummy	long
;	O
int	O
rc	int
=	O
filter_write_internal	function
(	O
stream	pointer
,	O
mu_filter_flush	int
,	O
NULL	O
,	O
0	int
,	O
&	O
dummy	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_stream_flush	function
(	O
fs	pointer
->	O
transport	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
filter_seek	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
mu_off_t	long
off	long
,	O
mu_off_t	long
*	O
ppos	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
int	O
status	int
;	O
status	int
=	O
mu_stream_seek	function
(	O
fs	pointer
->	O
transport	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
stream	pointer
->	O
offset	long
=	O
0	int
;	O
fs	pointer
->	O
flag_eof	int
=	O
0	int
;	O
return	O
mu_stream_skip_input_bytes	function
(	O
stream	pointer
,	O
off	long
,	O
ppos	pointer
)	O
;	O
}	O
static	O
int	O
filter_ctl	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
int	O
code	int
,	O
int	O
opcode	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
int	O
status	int
;	O
size_t	long
dummy	long
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
MU_IOCTL_FILTER	int
:	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_FILTER_SET_DISABLED	int
:	O
status	int
=	O
filter_write_internal	function
(	O
stream	pointer
,	O
mu_filter_flush	int
,	O
NULL	O
,	O
0	int
,	O
&	O
dummy	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
ptr	pointer
&&	O
*	O
(	O
int	O
*	O
)	O
ptr	pointer
)	O
fs	pointer
->	O
flag_disabled	int
=	O
1	int
;	O
else	O
fs	pointer
->	O
flag_disabled	int
=	O
0	int
;	O
break	O
;	O
case	O
MU_IOCTL_FILTER_GET_DISABLED	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
*	O
(	O
int	O
*	O
)	O
ptr	pointer
=	O
fs	pointer
->	O
flag_disabled	int
;	O
break	O
;	O
case	O
MU_IOCTL_FILTER_SET_OUTBUF_SIZE	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
fs	pointer
->	O
outbuf_size	long
=	O
*	O
(	O
size_t	long
*	O
)	O
ptr	pointer
;	O
break	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
break	O
;	O
case	O
MU_IOCTL_SUBSTREAM	int
:	O
if	O
(	O
fs	pointer
->	O
transport	pointer
&&	O
(	O
(	O
status	int
=	O
mu_stream_ioctl	function
(	O
fs	pointer
->	O
transport	pointer
,	O
code	int
,	O
opcode	int
,	O
ptr	pointer
)	O
)	O
==	O
0	int
||	O
status	int
!=	O
ENOSYS	int
)	O
)	O
return	O
status	int
;	O
case	O
MU_IOCTL_TOPSTREAM	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
mu_stream_t	pointer
*	O
pstr	pointer
=	O
ptr	pointer
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
pstr	pointer
[	O
0	int
]	O
=	O
fs	pointer
->	O
transport	pointer
;	O
mu_stream_ref	function
(	O
pstr	pointer
[	O
0	int
]	O
)	O
;	O
pstr	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
mu_stream_unref	function
(	O
fs	pointer
->	O
transport	pointer
)	O
;	O
fs	pointer
->	O
transport	pointer
=	O
pstr	pointer
[	O
0	int
]	O
;	O
mu_stream_ref	function
(	O
fs	pointer
->	O
transport	pointer
)	O
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_TRANSPORT	int
:	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
mu_transport_t	pointer
*	O
ptrans	pointer
=	O
ptr	pointer
;	O
ptrans	pointer
[	O
0	int
]	O
=	O
(	O
mu_transport_t	pointer
)	O
fs	pointer
->	O
transport	pointer
;	O
ptrans	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
break	O
;	O
default	O
:	O
return	O
mu_stream_ioctl	function
(	O
fs	pointer
->	O
transport	pointer
,	O
code	int
,	O
opcode	int
,	O
ptr	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
filter_shutdown	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
how	int
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_shutdown	function
(	O
fs	pointer
->	O
transport	pointer
,	O
how	int
)	O
;	O
}	O
static	O
const	O
char	O
*	O
filter_error_string	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
int	O
rc	int
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
const	O
char	O
*	O
p	pointer
=	O
mu_stream_strerror	function
(	O
fs	pointer
->	O
transport	pointer
,	O
rc	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
p	pointer
=	O
mu_strerror	function
(	O
rc	int
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
void	O
filter_done	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
MFB_deallocate	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
;	O
MFB_deallocate	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
;	O
if	O
(	O
fs	pointer
->	O
xdata	pointer
)	O
{	O
fs	pointer
->	O
xcode	pointer
(	O
fs	pointer
->	O
xdata	pointer
,	O
mu_filter_done	int
,	O
NULL	O
)	O
;	O
free	function
(	O
fs	pointer
->	O
xdata	pointer
)	O
;	O
}	O
mu_stream_destroy	function
(	O
&	O
fs	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
filter_wr_close	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
if	O
(	O
!	O
mu_stream_eof	function
(	O
stream	pointer
)	O
&&	O
!	O
fs	pointer
->	O
flag_eof	int
)	O
{	O
size_t	long
dummy	long
;	O
int	O
rc	int
=	O
filter_write_internal	function
(	O
stream	pointer
,	O
mu_filter_lastbuf	int
,	O
NULL	O
,	O
0	int
,	O
&	O
dummy	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
MFB_clear	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
;	O
MFB_clear	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
;	O
return	O
mu_stream_close	function
(	O
fs	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
filter_rd_close	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
MFB_clear	function
(	O
&	O
fs	pointer
->	O
inbuf	struct
)	O
;	O
MFB_clear	function
(	O
&	O
fs	pointer
->	O
outbuf	struct
)	O
;	O
return	O
mu_stream_close	function
(	O
fs	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
filter_read_through	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	long
,	O
size_t	long
*	O
pnread	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
return	O
mu_stream_read	function
(	O
fs	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
bufsize	long
,	O
pnread	pointer
)	O
;	O
}	O
static	O
int	O
filter_write_through	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	long
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
return	O
mu_stream_write	function
(	O
fs	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
bufsize	long
,	O
pnwrite	pointer
)	O
;	O
}	O
static	O
int	O
filter_wait	function
(	O
struct	O
_mu_stream	struct
*	O
stream	pointer
,	O
int	O
*	O
pflags	pointer
,	O
struct	O
timeval	struct
*	O
tvp	pointer
)	O
{	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
stream	pointer
;	O
return	O
mu_stream_wait	function
(	O
fs	pointer
->	O
transport	pointer
,	O
pflags	pointer
,	O
tvp	pointer
)	O
;	O
}	O
int	O
mu_filter_stream_create	function
(	O
mu_stream_t	pointer
*	O
pflt	pointer
,	O
mu_stream_t	pointer
str	pointer
,	O
int	O
mode	int
,	O
mu_filter_xcode_t	pointer
xcode	pointer
,	O
void	O
*	O
xdata	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
struct	O
_mu_filter_stream	struct
*	O
fs	pointer
;	O
if	O
(	O
(	O
flags	int
&	O
MU_STREAM_RDWR	O
)	O
==	O
MU_STREAM_RDWR	O
||	O
!	O
(	O
flags	int
&	O
MU_STREAM_RDWR	O
)	O
||	O
(	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_SEEK	int
)	O
)	O
==	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_SEEK	int
)	O
||	O
(	O
flags	int
&	O
(	O
MU_STREAM_RDTHRU	int
|	O
MU_STREAM_WRTHRU	int
)	O
)	O
==	O
(	O
MU_STREAM_RDTHRU	int
|	O
MU_STREAM_WRTHRU	int
)	O
||	O
(	O
flags	int
&	O
(	O
MU_STREAM_READ	int
|	O
MU_STREAM_RDTHRU	int
)	O
)	O
==	O
(	O
MU_STREAM_READ	int
|	O
MU_STREAM_RDTHRU	int
)	O
||	O
(	O
flags	int
&	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_WRTHRU	int
)	O
)	O
==	O
(	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_WRTHRU	int
)	O
)	O
return	O
EINVAL	int
;	O
fs	pointer
=	O
(	O
struct	O
_mu_filter_stream	struct
*	O
)	O
_mu_stream_create	function
(	O
sizeof	O
(	O
*	O
fs	pointer
)	O
,	O
flags	int
)	O
;	O
if	O
(	O
!	O
fs	pointer
)	O
return	O
ENOMEM	int
;	O
flags	int
|=	O
_MU_STR_OPEN	int
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_READ	int
)	O
{	O
fs	pointer
->	O
stream	pointer
.	O
read	pointer
=	O
filter_read	function
;	O
fs	pointer
->	O
stream	pointer
.	O
flush	pointer
=	O
filter_rd_flush	function
;	O
fs	pointer
->	O
stream	pointer
.	O
close	pointer
=	O
filter_rd_close	function
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_WRTHRU	int
)	O
{	O
flags	int
|=	O
MU_STREAM_WRITE	int
;	O
fs	pointer
->	O
stream	pointer
.	O
write	pointer
=	O
filter_write_through	function
;	O
}	O
}	O
else	O
{	O
fs	pointer
->	O
stream	pointer
.	O
write	pointer
=	O
filter_write	function
;	O
fs	pointer
->	O
stream	pointer
.	O
flush	pointer
=	O
filter_wr_flush	function
;	O
fs	pointer
->	O
stream	pointer
.	O
close	pointer
=	O
filter_wr_close	function
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_RDTHRU	int
)	O
{	O
flags	int
|=	O
MU_STREAM_READ	int
;	O
fs	pointer
->	O
stream	pointer
.	O
read	pointer
=	O
filter_read_through	function
;	O
}	O
}	O
fs	pointer
->	O
stream	pointer
.	O
done	pointer
=	O
filter_done	function
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_SEEK	int
)	O
fs	pointer
->	O
stream	pointer
.	O
seek	pointer
=	O
filter_seek	function
;	O
fs	pointer
->	O
stream	pointer
.	O
shutdown	pointer
=	O
filter_shutdown	function
;	O
fs	pointer
->	O
stream	pointer
.	O
ctl	pointer
=	O
filter_ctl	function
;	O
fs	pointer
->	O
stream	pointer
.	O
wait	pointer
=	O
filter_wait	function
;	O
fs	pointer
->	O
stream	pointer
.	O
error_string	pointer
=	O
filter_error_string	function
;	O
fs	pointer
->	O
stream	pointer
.	O
flags	int
=	O
flags	int
;	O
mu_stream_ref	function
(	O
str	pointer
)	O
;	O
fs	pointer
->	O
transport	pointer
=	O
str	pointer
;	O
fs	pointer
->	O
xcode	pointer
=	O
xcode	pointer
;	O
fs	pointer
->	O
xdata	pointer
=	O
xdata	pointer
;	O
fs	pointer
->	O
mode	int
=	O
mode	int
;	O
mu_stream_set_buffer	function
(	O
(	O
mu_stream_t	pointer
)	O
fs	pointer
,	O
mu_buffer_full	int
,	O
MU_FILTER_BUF_SIZE	int
)	O
;	O
rc	int
=	O
filter_stream_init	function
(	O
fs	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
fs	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
*	O
pflt	pointer
=	O
(	O
mu_stream_t	pointer
)	O
fs	pointer
;	O
return	O
0	int
;	O
}	O
