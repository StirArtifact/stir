const	O
char	O
_uuconf_rdperm_rcsid	array
[	O
]	O
=	O
"$Id: rdperm.c,v 1.12 2002/03/05 19:10:42 ian Rel $"	pointer
;	O
static	O
int	O
ihcolon	function
P	O
(	O
(	O
pointer	pointer
pglobal	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
pointer	pointer
pvar	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
int	O
ihsendfiles	function
P	O
(	O
(	O
pointer	pointer
pglobal	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
pointer	pointer
pvar	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
int	O
ihunknownperm	function
P	O
(	O
(	O
pointer	pointer
pglobal	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
pointer	pointer
pvar	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
int	O
ihadd_norw	function
P	O
(	O
(	O
struct	O
sglobal	struct
*	O
qglobal	pointer
,	O
char	O
*	O
*	O
*	O
ppz	pointer
,	O
char	O
*	O
*	O
pzno	pointer
)	O
)	O
;	O
static	O
const	O
struct	O
cmdtab_offset	struct
asHperm_cmds	array
[	O
]	O
=	O
{	O
{	O
"NOREAD"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
2	int
,	O
(	O
size_t	long
)	O
-	O
1	int
,	O
ihcolon	function
}	O
,	O
{	O
"NOWRITE"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
2	int
,	O
(	O
size_t	long
)	O
-	O
1	int
,	O
ihcolon	function
}	O
,	O
{	O
"LOGNAME"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
2	int
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
pzlogname	pointer
)	O
,	O
ihcolon	function
}	O
,	O
{	O
"MACHINE"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
2	int
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
pzmachine	pointer
)	O
,	O
ihcolon	function
}	O
,	O
{	O
"REQUEST"	pointer
,	O
UUCONF_CMDTABTYPE_BOOLEAN	O
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
frequest	int
)	O
,	O
NULL	O
}	O
,	O
{	O
"SENDFILES"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
2	int
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
fsendfiles	int
)	O
,	O
ihsendfiles	function
}	O
,	O
{	O
"READ"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
2	int
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
pzread	pointer
)	O
,	O
ihcolon	function
}	O
,	O
{	O
"WRITE"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
2	int
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
pzwrite	pointer
)	O
,	O
ihcolon	function
}	O
,	O
{	O
"CALLBACK"	pointer
,	O
UUCONF_CMDTABTYPE_BOOLEAN	O
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
fcallback	int
)	O
,	O
NULL	O
}	O
,	O
{	O
"COMMANDS"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
2	int
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
pzcommands	pointer
)	O
,	O
ihcolon	function
}	O
,	O
{	O
"VALIDATE"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
2	int
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
pzvalidate	pointer
)	O
,	O
ihcolon	function
}	O
,	O
{	O
"MYNAME"	pointer
,	O
UUCONF_CMDTABTYPE_STRING	O
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
zmyname	pointer
)	O
,	O
NULL	O
}	O
,	O
{	O
"PUBDIR"	pointer
,	O
UUCONF_CMDTABTYPE_STRING	O
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
zpubdir	pointer
)	O
,	O
NULL	O
}	O
,	O
{	O
"ALIAS"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
2	int
,	O
offsetof	O
(	O
struct	O
shpermissions	struct
,	O
pzalias	pointer
)	O
,	O
ihcolon	function
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
}	O
;	O
int	O
_uuconf_ihread_permissions	function
(	O
qglobal	pointer
)	O
struct	O
sglobal	struct
*	O
qglobal	pointer
;	O
{	O
char	O
*	O
zperm	pointer
;	O
FILE	struct
*	O
e	pointer
;	O
int	O
iret	int
;	O
struct	O
uuconf_cmdtab	struct
as	array
[	O
CHPERM_CMDS	O
]	O
;	O
char	O
*	O
*	O
pznoread	pointer
,	O
*	O
*	O
pznowrite	pointer
;	O
struct	O
shpermissions	struct
shperm	struct
;	O
char	O
*	O
zline	pointer
;	O
size_t	long
cline	long
;	O
char	O
*	O
*	O
pzsplit	pointer
;	O
size_t	long
csplit	pointer
;	O
int	O
cchars	int
;	O
struct	O
shpermissions	struct
*	O
qlist	pointer
,	O
*	O
*	O
pq	pointer
;	O
if	O
(	O
qglobal	pointer
->	O
qprocess	pointer
->	O
fhdb_read_permissions	int
)	O
return	O
UUCONF_SUCCESS	O
;	O
zperm	pointer
=	O
(	O
char	O
*	O
)	O
uuconf_malloc	function
(	O
qglobal	pointer
->	O
pblock	pointer
,	O
(	O
sizeof	O
OLDCONFIGLIB	O
+	O
sizeof	O
HDB_PERMISSIONS	pointer
-	O
1	int
)	O
)	O
;	O
if	O
(	O
zperm	pointer
==	O
NULL	O
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
return	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
}	O
memcpy	function
(	O
(	O
pointer	pointer
)	O
zperm	pointer
,	O
(	O
pointer	pointer
)	O
OLDCONFIGLIB	O
,	O
sizeof	O
OLDCONFIGLIB	O
-	O
1	int
)	O
;	O
memcpy	function
(	O
(	O
pointer	pointer
)	O
(	O
zperm	pointer
+	O
sizeof	O
OLDCONFIGLIB	O
-	O
1	int
)	O
,	O
(	O
pointer	pointer
)	O
HDB_PERMISSIONS	pointer
,	O
sizeof	O
HDB_PERMISSIONS	pointer
)	O
;	O
e	pointer
=	O
fopen	function
(	O
zperm	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
{	O
uuconf_free	function
(	O
qglobal	pointer
->	O
pblock	pointer
,	O
zperm	pointer
)	O
;	O
qglobal	pointer
->	O
qprocess	pointer
->	O
fhdb_read_permissions	int
=	O
TRUE	O
;	O
return	O
UUCONF_SUCCESS	O
;	O
}	O
_uuconf_ucmdtab_base	function
(	O
asHperm_cmds	array
,	O
CHPERM_CMDS	O
,	O
(	O
char	O
*	O
)	O
&	O
shperm	struct
,	O
as	array
)	O
;	O
as	array
[	O
0	int
]	O
.	O
uuconf_pvar	pointer
=	O
(	O
pointer	pointer
)	O
&	O
pznoread	pointer
;	O
as	array
[	O
1	int
]	O
.	O
uuconf_pvar	pointer
=	O
(	O
pointer	pointer
)	O
&	O
pznowrite	pointer
;	O
zline	pointer
=	O
NULL	O
;	O
cline	long
=	O
0	int
;	O
pzsplit	pointer
=	O
NULL	O
;	O
csplit	pointer
=	O
0	int
;	O
qlist	pointer
=	O
NULL	O
;	O
pq	pointer
=	O
&	O
qlist	pointer
;	O
qglobal	pointer
->	O
ilineno	int
=	O
0	int
;	O
iret	int
=	O
UUCONF_SUCCESS	O
;	O
while	O
(	O
(	O
cchars	int
=	O
_uuconf_getline	function
(	O
qglobal	pointer
,	O
&	O
zline	pointer
,	O
&	O
cline	long
,	O
e	pointer
)	O
)	O
>	O
0	int
)	O
{	O
int	O
centries	int
;	O
struct	O
shpermissions	struct
*	O
qnew	pointer
;	O
int	O
i	int
;	O
++	O
qglobal	pointer
->	O
ilineno	int
;	O
--	O
cchars	int
;	O
if	O
(	O
zline	pointer
[	O
cchars	int
]	O
==	O
'\n'	O
)	O
zline	pointer
[	O
cchars	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
zline	pointer
[	O
0	int
]	O
==	O
'#'	O
)	O
continue	O
;	O
centries	int
=	O
_uuconf_istrsplit	function
(	O
zline	pointer
,	O
'\0'	O
,	O
&	O
pzsplit	pointer
,	O
&	O
csplit	pointer
)	O
;	O
if	O
(	O
centries	int
<	O
0	int
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
iret	int
=	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
break	O
;	O
}	O
if	O
(	O
centries	int
==	O
0	int
)	O
continue	O
;	O
shperm	struct
.	O
pzlogname	pointer
=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
;	O
shperm	struct
.	O
pzmachine	pointer
=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
;	O
shperm	struct
.	O
frequest	int
=	O
-	O
1	int
;	O
shperm	struct
.	O
fsendfiles	int
=	O
-	O
1	int
;	O
shperm	struct
.	O
pzread	pointer
=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
;	O
shperm	struct
.	O
pzwrite	pointer
=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
;	O
shperm	struct
.	O
fcallback	int
=	O
-	O
1	int
;	O
shperm	struct
.	O
pzcommands	pointer
=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
;	O
shperm	struct
.	O
pzvalidate	pointer
=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
;	O
shperm	struct
.	O
zmyname	pointer
=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
;	O
shperm	struct
.	O
zpubdir	pointer
=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
;	O
shperm	struct
.	O
pzalias	pointer
=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
;	O
pznoread	pointer
=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
;	O
pznowrite	pointer
=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
centries	int
;	O
i	int
++	O
)	O
{	O
char	O
*	O
zeq	pointer
;	O
char	O
*	O
azargs	array
[	O
2	int
]	O
;	O
zeq	pointer
=	O
strchr	function
(	O
pzsplit	pointer
[	O
i	int
]	O
,	O
'='	O
)	O
;	O
if	O
(	O
zeq	pointer
==	O
NULL	O
)	O
{	O
iret	int
=	O
UUCONF_SYNTAX_ERROR	O
;	O
qglobal	pointer
->	O
qprocess	pointer
->	O
fhdb_read_permissions	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
*	O
zeq	pointer
=	O
'\0'	O
;	O
azargs	array
[	O
0	int
]	O
=	O
pzsplit	pointer
[	O
i	int
]	O
;	O
azargs	array
[	O
1	int
]	O
=	O
zeq	pointer
+	O
1	int
;	O
iret	int
=	O
uuconf_cmd_args	function
(	O
qglobal	pointer
,	O
2	int
,	O
azargs	array
,	O
as	array
,	O
(	O
pointer	pointer
)	O
NULL	O
,	O
ihunknownperm	function
,	O
0	int
,	O
qglobal	pointer
->	O
pblock	pointer
)	O
;	O
if	O
(	O
(	O
iret	int
&	O
UUCONF_CMDTABRET_KEEP	O
)	O
!=	O
0	int
)	O
{	O
iret	int
&=	O
~	O
UUCONF_CMDTABRET_KEEP	O
;	O
if	O
(	O
uuconf_add_block	function
(	O
qglobal	pointer
->	O
pblock	pointer
,	O
zline	pointer
)	O
!=	O
0	int
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
iret	int
=	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
break	O
;	O
}	O
zline	pointer
=	O
NULL	O
;	O
cline	long
=	O
0	int
;	O
}	O
if	O
(	O
(	O
iret	int
&	O
UUCONF_CMDTABRET_EXIT	O
)	O
!=	O
0	int
)	O
{	O
iret	int
&=	O
~	O
UUCONF_CMDTABRET_EXIT	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
break	O
;	O
if	O
(	O
shperm	struct
.	O
pzmachine	pointer
==	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
shperm	struct
.	O
pzlogname	pointer
==	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
{	O
iret	int
=	O
UUCONF_SYNTAX_ERROR	O
;	O
qglobal	pointer
->	O
qprocess	pointer
->	O
fhdb_read_permissions	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
if	O
(	O
pznoread	pointer
!=	O
NULL	O
)	O
{	O
iret	int
=	O
ihadd_norw	function
(	O
qglobal	pointer
,	O
&	O
shperm	struct
.	O
pzread	pointer
,	O
pznoread	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
break	O
;	O
uuconf_free	function
(	O
qglobal	pointer
->	O
pblock	pointer
,	O
pznoread	pointer
)	O
;	O
}	O
if	O
(	O
pznowrite	pointer
!=	O
NULL	O
)	O
{	O
iret	int
=	O
ihadd_norw	function
(	O
qglobal	pointer
,	O
&	O
shperm	struct
.	O
pzwrite	pointer
,	O
pznowrite	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
break	O
;	O
uuconf_free	function
(	O
qglobal	pointer
->	O
pblock	pointer
,	O
pznowrite	pointer
)	O
;	O
}	O
qnew	pointer
=	O
(	O
(	O
struct	O
shpermissions	struct
*	O
)	O
uuconf_malloc	function
(	O
qglobal	pointer
->	O
pblock	pointer
,	O
sizeof	O
(	O
struct	O
shpermissions	struct
)	O
)	O
)	O
;	O
if	O
(	O
qnew	pointer
==	O
NULL	O
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
iret	int
=	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
break	O
;	O
}	O
*	O
qnew	pointer
=	O
shperm	struct
;	O
*	O
pq	pointer
=	O
qnew	pointer
;	O
pq	pointer
=	O
&	O
qnew	pointer
->	O
qnext	pointer
;	O
*	O
pq	pointer
=	O
NULL	O
;	O
}	O
(	O
void	O
)	O
fclose	function
(	O
e	pointer
)	O
;	O
if	O
(	O
zline	pointer
!=	O
NULL	O
)	O
free	function
(	O
(	O
pointer	pointer
)	O
zline	pointer
)	O
;	O
if	O
(	O
pzsplit	pointer
!=	O
NULL	O
)	O
free	function
(	O
(	O
pointer	pointer
)	O
pzsplit	pointer
)	O
;	O
if	O
(	O
iret	int
==	O
UUCONF_SUCCESS	O
)	O
{	O
qglobal	pointer
->	O
qprocess	pointer
->	O
qhdb_permissions	pointer
=	O
qlist	pointer
;	O
qglobal	pointer
->	O
qprocess	pointer
->	O
fhdb_read_permissions	int
=	O
TRUE	O
;	O
}	O
else	O
{	O
qglobal	pointer
->	O
zfilename	pointer
=	O
zperm	pointer
;	O
iret	int
|=	O
UUCONF_ERROR_FILENAME	O
|	O
UUCONF_ERROR_LINENO	O
;	O
}	O
return	O
iret	int
;	O
}	O
static	O
int	O
ihcolon	function
(	O
pglobal	pointer
,	O
argc	int
,	O
argv	pointer
,	O
pvar	pointer
,	O
pinfo	pointer
)	O
pointer	pointer
pglobal	pointer
;	O
int	O
argc	int
ATTRIBUTE_UNUSED	O
;	O
char	O
*	O
*	O
argv	pointer
;	O
pointer	pointer
pvar	pointer
;	O
pointer	pointer
pinfo	pointer
ATTRIBUTE_UNUSED	O
;	O
{	O
struct	O
sglobal	struct
*	O
qglobal	pointer
=	O
(	O
struct	O
sglobal	struct
*	O
)	O
pglobal	pointer
;	O
char	O
*	O
*	O
*	O
ppz	pointer
=	O
(	O
char	O
*	O
*	O
*	O
)	O
pvar	pointer
;	O
char	O
*	O
*	O
pzsplit	pointer
;	O
size_t	long
csplit	pointer
;	O
int	O
centries	int
;	O
int	O
i	int
;	O
int	O
iret	int
;	O
*	O
ppz	pointer
=	O
NULL	O
;	O
pzsplit	pointer
=	O
NULL	O
;	O
csplit	pointer
=	O
0	int
;	O
centries	int
=	O
_uuconf_istrsplit	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
':'	O
,	O
&	O
pzsplit	pointer
,	O
&	O
csplit	pointer
)	O
;	O
if	O
(	O
centries	int
<	O
0	int
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
return	O
(	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
|	O
UUCONF_CMDTABRET_EXIT	O
)	O
;	O
}	O
if	O
(	O
centries	int
==	O
0	int
)	O
{	O
if	O
(	O
pzsplit	pointer
!=	O
NULL	O
)	O
free	function
(	O
(	O
pointer	pointer
)	O
pzsplit	pointer
)	O
;	O
return	O
UUCONF_CMDTABRET_CONTINUE	O
;	O
}	O
iret	int
=	O
UUCONF_SUCCESS	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
centries	int
;	O
i	int
++	O
)	O
{	O
iret	int
=	O
_uuconf_iadd_string	function
(	O
qglobal	pointer
,	O
pzsplit	pointer
[	O
i	int
]	O
,	O
FALSE	O
,	O
FALSE	O
,	O
ppz	pointer
,	O
qglobal	pointer
->	O
pblock	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
iret	int
|=	O
UUCONF_CMDTABRET_EXIT	O
;	O
break	O
;	O
}	O
}	O
free	function
(	O
(	O
pointer	pointer
)	O
pzsplit	pointer
)	O
;	O
return	O
UUCONF_CMDTABRET_KEEP	O
;	O
}	O
static	O
int	O
ihsendfiles	function
(	O
pglobal	pointer
,	O
argc	int
,	O
argv	pointer
,	O
pvar	pointer
,	O
pinfo	pointer
)	O
pointer	pointer
pglobal	pointer
ATTRIBUTE_UNUSED	O
;	O
int	O
argc	int
ATTRIBUTE_UNUSED	O
;	O
char	O
*	O
*	O
argv	pointer
;	O
pointer	pointer
pvar	pointer
;	O
pointer	pointer
pinfo	pointer
ATTRIBUTE_UNUSED	O
;	O
{	O
int	O
*	O
pi	pointer
=	O
(	O
int	O
*	O
)	O
pvar	pointer
;	O
switch	O
(	O
argv	pointer
[	O
1	int
]	O
[	O
0	int
]	O
)	O
{	O
case	O
'C'	O
:	O
case	O
'c'	O
:	O
case	O
'N'	O
:	O
case	O
'n'	O
:	O
*	O
pi	pointer
=	O
FALSE	O
;	O
break	O
;	O
case	O
'Y'	O
:	O
case	O
'y'	O
:	O
*	O
pi	pointer
=	O
TRUE	O
;	O
break	O
;	O
default	O
:	O
return	O
UUCONF_SYNTAX_ERROR	O
|	O
UUCONF_CMDTABRET_EXIT	O
;	O
}	O
return	O
UUCONF_CMDTABRET_CONTINUE	O
;	O
}	O
static	O
int	O
ihunknownperm	function
(	O
pglobal	pointer
,	O
argc	int
,	O
argv	pointer
,	O
pvar	pointer
,	O
pinfo	pointer
)	O
pointer	pointer
pglobal	pointer
ATTRIBUTE_UNUSED	O
;	O
int	O
argc	int
ATTRIBUTE_UNUSED	O
;	O
char	O
*	O
*	O
argv	pointer
ATTRIBUTE_UNUSED	O
;	O
pointer	pointer
pvar	pointer
ATTRIBUTE_UNUSED	O
;	O
pointer	pointer
pinfo	pointer
ATTRIBUTE_UNUSED	O
;	O
{	O
return	O
UUCONF_SYNTAX_ERROR	O
|	O
UUCONF_CMDTABRET_EXIT	O
;	O
}	O
static	O
int	O
ihadd_norw	function
(	O
qglobal	pointer
,	O
ppz	pointer
,	O
pzno	pointer
)	O
struct	O
sglobal	struct
*	O
qglobal	pointer
;	O
char	O
*	O
*	O
*	O
ppz	pointer
;	O
char	O
*	O
*	O
pzno	pointer
;	O
{	O
register	O
char	O
*	O
*	O
pz	pointer
;	O
if	O
(	O
pzno	pointer
==	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
return	O
UUCONF_SUCCESS	O
;	O
for	O
(	O
pz	pointer
=	O
pzno	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
size_t	long
csize	long
;	O
char	O
*	O
znew	pointer
;	O
int	O
iret	int
;	O
if	O
(	O
*	O
*	O
pz	pointer
!=	O
'\0'	O
)	O
{	O
csize	long
=	O
strlen	function
(	O
*	O
pz	pointer
)	O
+	O
1	int
;	O
znew	pointer
=	O
(	O
char	O
*	O
)	O
uuconf_malloc	function
(	O
qglobal	pointer
->	O
pblock	pointer
,	O
csize	long
+	O
1	int
)	O
;	O
if	O
(	O
znew	pointer
==	O
NULL	O
)	O
{	O
qglobal	pointer
->	O
ierrno	int
=	O
errno	O
;	O
return	O
UUCONF_MALLOC_FAILED	O
|	O
UUCONF_ERROR_ERRNO	O
;	O
}	O
znew	pointer
[	O
0	int
]	O
=	O
'!'	O
;	O
memcpy	function
(	O
(	O
pointer	pointer
)	O
(	O
znew	pointer
+	O
1	int
)	O
,	O
(	O
pointer	pointer
)	O
*	O
pz	pointer
,	O
csize	long
)	O
;	O
iret	int
=	O
_uuconf_iadd_string	function
(	O
qglobal	pointer
,	O
znew	pointer
,	O
FALSE	O
,	O
FALSE	O
,	O
ppz	pointer
,	O
qglobal	pointer
->	O
pblock	pointer
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
return	O
iret	int
;	O
}	O
}	O
return	O
UUCONF_SUCCESS	O
;	O
}	O
