static	O
void	O
compute_effective_worm_sizes	function
(	O
void	O
)	O
;	O
static	O
void	O
do_compute_effective_worm_sizes	function
(	O
int	O
color	int
,	O
int	O
(	O
*	O
cw	pointer
)	O
[	O
MAX_CLOSE_WORMS	int
]	O
,	O
int	O
*	O
ncw	pointer
,	O
int	O
max_distance	int
)	O
;	O
static	O
void	O
compute_unconditional_status	function
(	O
void	O
)	O
;	O
static	O
void	O
find_worm_attacks_and_defenses	function
(	O
void	O
)	O
;	O
static	O
void	O
find_worm_threats	function
(	O
void	O
)	O
;	O
static	O
int	O
find_lunch	function
(	O
int	O
str	int
,	O
int	O
*	O
lunch	int
)	O
;	O
static	O
void	O
change_tactical_point	function
(	O
int	O
str	int
,	O
int	O
move	pointer
,	O
int	O
code	int
,	O
int	O
points	array
[	O
MAX_TACTICAL_POINTS	int
]	O
,	O
int	O
codes	array
[	O
MAX_TACTICAL_POINTS	int
]	O
)	O
;	O
static	O
void	O
propagate_worm2	function
(	O
int	O
str	int
)	O
;	O
static	O
int	O
genus	pointer
(	O
int	O
str	int
)	O
;	O
static	O
void	O
markcomponent	function
(	O
int	O
str	int
,	O
int	O
pos	int
,	O
int	O
mg	array
[	O
BOARDMAX	O
]	O
)	O
;	O
static	O
int	O
examine_cavity	function
(	O
int	O
pos	int
,	O
int	O
*	O
edge	pointer
)	O
;	O
static	O
void	O
cavity_recurse	function
(	O
int	O
pos	int
,	O
int	O
mx	array
[	O
BOARDMAX	O
]	O
,	O
int	O
*	O
border_color	pointer
,	O
int	O
*	O
edge	pointer
,	O
int	O
str	int
)	O
;	O
static	O
void	O
ping_cave	function
(	O
int	O
str	int
,	O
int	O
*	O
result1	pointer
,	O
int	O
*	O
result2	pointer
,	O
int	O
*	O
result3	pointer
,	O
int	O
*	O
result4	pointer
)	O
;	O
static	O
void	O
ping_recurse	function
(	O
int	O
pos	int
,	O
int	O
*	O
counter	pointer
,	O
int	O
mx	array
[	O
BOARDMAX	O
]	O
,	O
int	O
mr	array
[	O
BOARDMAX	O
]	O
,	O
int	O
color	int
)	O
;	O
static	O
int	O
touching	function
(	O
int	O
pos	int
,	O
int	O
color	int
)	O
;	O
static	O
void	O
find_attack_patterns	function
(	O
void	O
)	O
;	O
static	O
void	O
attack_callback	function
(	O
int	O
anchor	int
,	O
int	O
color	int
,	O
struct	O
pattern	pointer
*	O
pattern	pointer
,	O
int	O
ll	int
,	O
void	O
*	O
data	pointer
)	O
;	O
static	O
void	O
find_defense_patterns	function
(	O
void	O
)	O
;	O
static	O
void	O
defense_callback	function
(	O
int	O
anchor	int
,	O
int	O
color	int
,	O
struct	O
pattern	pointer
*	O
pattern	pointer
,	O
int	O
ll	int
,	O
void	O
*	O
data	pointer
)	O
;	O
static	O
void	O
build_worms	function
(	O
void	O
)	O
;	O
static	O
void	O
report_worm	function
(	O
int	O
pos	int
)	O
;	O
void	O
make_worms	function
(	O
void	O
)	O
{	O
int	O
pos	int
;	O
build_worms	function
(	O
)	O
;	O
if	O
(	O
stones_on_board	function
(	O
BLACK	int
|	O
WHITE	int
)	O
==	O
0	int
)	O
return	O
;	O
compute_effective_worm_sizes	function
(	O
)	O
;	O
compute_unconditional_status	function
(	O
)	O
;	O
find_worm_attacks_and_defenses	function
(	O
)	O
;	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
&&	O
is_worm_origin	function
(	O
pos	int
,	O
pos	int
)	O
)	O
{	O
int	O
lib1	int
,	O
lib2	int
,	O
lib3	int
,	O
lib4	int
;	O
ping_cave	function
(	O
pos	int
,	O
&	O
lib1	int
,	O
&	O
lib2	int
,	O
&	O
lib3	int
,	O
&	O
lib4	int
)	O
;	O
ASSERT1	O
(	O
worm	array
[	O
pos	int
]	O
.	O
liberties	pointer
==	O
lib1	int
,	O
pos	int
)	O
;	O
worm	array
[	O
pos	int
]	O
.	O
liberties2	int
=	O
lib2	int
;	O
worm	array
[	O
pos	int
]	O
.	O
liberties3	int
=	O
lib3	int
;	O
worm	array
[	O
pos	int
]	O
.	O
liberties4	int
=	O
lib4	int
;	O
worm	array
[	O
pos	int
]	O
.	O
cutstone	int
=	O
0	int
;	O
worm	array
[	O
pos	int
]	O
.	O
cutstone2	int
=	O
0	int
;	O
propagate_worm	function
(	O
pos	int
)	O
;	O
}	O
}	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
int	O
w1	int
=	O
NO_MOVE	O
;	O
int	O
w2	int
=	O
NO_MOVE	O
;	O
int	O
k	int
;	O
int	O
pos2	int
;	O
if	O
(	O
!	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
||	O
!	O
is_worm_origin	function
(	O
pos	int
,	O
pos	int
)	O
)	O
continue	O
;	O
for	O
(	O
pos2	int
=	O
BOARDMIN	O
;	O
pos2	int
<	O
BOARDMAX	O
;	O
pos2	int
++	O
)	O
{	O
if	O
(	O
board	pointer
[	O
pos2	int
]	O
!=	O
OTHER_COLOR	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
)	O
continue	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos2	int
+	O
delta	array
[	O
k	int
]	O
)	O
||	O
worm	array
[	O
pos2	int
+	O
delta	array
[	O
k	int
]	O
]	O
.	O
origin	int
!=	O
pos	int
)	O
continue	O
;	O
ASSERT1	O
(	O
board	pointer
[	O
pos2	int
+	O
delta	array
[	O
k	int
]	O
]	O
==	O
board	pointer
[	O
pos	int
]	O
,	O
pos	int
)	O
;	O
if	O
(	O
w1	int
==	O
NO_MOVE	O
)	O
w1	int
=	O
worm	array
[	O
pos2	int
]	O
.	O
origin	int
;	O
else	O
if	O
(	O
!	O
is_same_worm	function
(	O
pos2	int
,	O
w1	int
)	O
)	O
w2	int
=	O
worm	array
[	O
pos2	int
]	O
.	O
origin	int
;	O
}	O
}	O
if	O
(	O
w2	int
!=	O
NO_MOVE	O
)	O
{	O
worm	array
[	O
pos	int
]	O
.	O
cutstone	int
=	O
2	int
;	O
if	O
(	O
count_common_libs	function
(	O
w1	int
,	O
w2	int
)	O
>	O
0	int
)	O
worm	array
[	O
pos	int
]	O
.	O
cutstone	int
=	O
1	int
;	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"Worm at %1m has w1 %1m and w2 %1m, cutstone %d\n"	pointer
,	O
pos	int
,	O
w1	int
,	O
w2	int
,	O
worm	array
[	O
pos	int
]	O
.	O
cutstone	int
)	O
;	O
}	O
}	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
&&	O
is_worm_origin	function
(	O
pos	int
,	O
pos	int
)	O
)	O
{	O
worm	array
[	O
pos	int
]	O
.	O
genus	pointer
=	O
genus	pointer
(	O
pos	int
)	O
;	O
propagate_worm	function
(	O
pos	int
)	O
;	O
}	O
}	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
{	O
int	O
color	int
;	O
int	O
str	int
;	O
int	O
moves_to_try	array
[	O
BOARDMAX	O
]	O
;	O
memset	function
(	O
moves_to_try	array
,	O
0	int
,	O
sizeof	O
(	O
moves_to_try	array
)	O
)	O
;	O
for	O
(	O
str	int
=	O
BOARDMIN	O
;	O
str	int
<	O
BOARDMAX	O
;	O
str	int
++	O
)	O
{	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
str	int
]	O
)	O
&&	O
is_worm_origin	function
(	O
str	int
,	O
str	int
)	O
)	O
{	O
color	int
=	O
board	pointer
[	O
str	int
]	O
;	O
moves_to_try	array
[	O
worm	array
[	O
str	int
]	O
.	O
defense_points	array
[	O
0	int
]	O
]	O
|=	O
color	int
;	O
moves_to_try	array
[	O
worm	array
[	O
str	int
]	O
.	O
attack_points	array
[	O
0	int
]	O
]	O
|=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
}	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
continue	O
;	O
for	O
(	O
color	int
=	O
WHITE	int
;	O
color	int
<=	O
BLACK	int
;	O
color	int
++	O
)	O
{	O
if	O
(	O
!	O
(	O
moves_to_try	array
[	O
pos	int
]	O
&	O
color	int
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
trymove	function
(	O
pos	int
,	O
color	int
,	O
"make_worms"	pointer
,	O
NO_MOVE	O
)	O
)	O
continue	O
;	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"trying %1m\n"	pointer
,	O
pos	int
)	O
;	O
increase_depth_values	function
(	O
)	O
;	O
for	O
(	O
str	int
=	O
BOARDMIN	O
;	O
str	int
<	O
BOARDMAX	O
;	O
str	int
++	O
)	O
{	O
if	O
(	O
!	O
IS_STONE	O
(	O
board	pointer
[	O
str	int
]	O
)	O
||	O
!	O
is_worm_origin	function
(	O
str	int
,	O
str	int
)	O
)	O
continue	O
;	O
if	O
(	O
worm	array
[	O
str	int
]	O
.	O
color	int
==	O
OTHER_COLOR	O
(	O
color	int
)	O
&&	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
&&	O
worm	array
[	O
str	int
]	O
.	O
defense_codes	array
[	O
0	int
]	O
!=	O
0	int
)	O
{	O
int	O
dcode	int
=	O
find_defense	function
(	O
str	int
,	O
NULL	O
)	O
;	O
if	O
(	O
dcode	int
<	O
worm	array
[	O
str	int
]	O
.	O
defense_codes	array
[	O
0	int
]	O
)	O
{	O
int	O
attack_works	int
=	O
1	int
;	O
if	O
(	O
attack	function
(	O
str	int
,	O
NULL	O
)	O
>=	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
)	O
{	O
if	O
(	O
worm	array
[	O
str	int
]	O
.	O
defense_codes	array
[	O
0	int
]	O
!=	O
0	int
&&	O
trymove	function
(	O
worm	array
[	O
str	int
]	O
.	O
defense_points	array
[	O
0	int
]	O
,	O
OTHER_COLOR	O
(	O
color	int
)	O
,	O
"make_worms"	pointer
,	O
0	int
)	O
)	O
{	O
int	O
this_dcode	int
=	O
REVERSE_RESULT	O
(	O
attack	function
(	O
str	int
,	O
NULL	O
)	O
)	O
;	O
if	O
(	O
this_dcode	int
>	O
dcode	int
)	O
{	O
dcode	int
=	O
this_dcode	int
;	O
if	O
(	O
dcode	int
>=	O
worm	array
[	O
str	int
]	O
.	O
defense_codes	array
[	O
0	int
]	O
)	O
attack_works	int
=	O
0	int
;	O
}	O
popgo	function
(	O
)	O
;	O
}	O
}	O
else	O
attack_works	int
=	O
0	int
;	O
if	O
(	O
attack_works	int
)	O
{	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"adding point of attack of %1m at %1m with code %d\n"	pointer
,	O
str	int
,	O
pos	int
,	O
REVERSE_RESULT	O
(	O
dcode	int
)	O
)	O
;	O
change_attack	function
(	O
str	int
,	O
pos	int
,	O
REVERSE_RESULT	O
(	O
dcode	int
)	O
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
worm	array
[	O
str	int
]	O
.	O
color	int
==	O
color	int
&&	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
)	O
{	O
int	O
acode	int
=	O
attack	function
(	O
str	int
,	O
NULL	O
)	O
;	O
if	O
(	O
acode	int
<	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
)	O
{	O
int	O
defense_works	int
=	O
1	int
;	O
if	O
(	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
&&	O
trymove	function
(	O
worm	array
[	O
str	int
]	O
.	O
attack_points	array
[	O
0	int
]	O
,	O
OTHER_COLOR	O
(	O
color	int
)	O
,	O
"make_worms"	pointer
,	O
0	int
)	O
)	O
{	O
int	O
this_acode	int
;	O
if	O
(	O
board	pointer
[	O
str	int
]	O
==	O
EMPTY	int
)	O
this_acode	int
=	O
WIN	int
;	O
else	O
this_acode	int
=	O
REVERSE_RESULT	O
(	O
find_defense	function
(	O
str	int
,	O
NULL	O
)	O
)	O
;	O
if	O
(	O
this_acode	int
>	O
acode	int
)	O
{	O
acode	int
=	O
this_acode	int
;	O
if	O
(	O
acode	int
>=	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
)	O
defense_works	int
=	O
0	int
;	O
}	O
popgo	function
(	O
)	O
;	O
}	O
if	O
(	O
defense_works	int
)	O
{	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"adding point of defense of %1m at %1m with code %d\n"	pointer
,	O
str	int
,	O
pos	int
,	O
REVERSE_RESULT	O
(	O
acode	int
)	O
)	O
;	O
change_defense	function
(	O
str	int
,	O
pos	int
,	O
REVERSE_RESULT	O
(	O
acode	int
)	O
)	O
;	O
}	O
}	O
}	O
}	O
decrease_depth_values	function
(	O
)	O
;	O
popgo	function
(	O
)	O
;	O
}	O
}	O
}	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
&&	O
IS_STONE	O
(	O
board	pointer
[	O
SOUTH	O
(	O
pos	int
)	O
]	O
)	O
&&	O
!	O
is_same_worm	function
(	O
pos	int
,	O
SOUTH	O
(	O
pos	int
)	O
)	O
)	O
{	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
&&	O
worm	array
[	O
SOUTH	O
(	O
pos	int
)	O
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
)	O
{	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_codes	array
[	O
0	int
]	O
==	O
0	int
&&	O
does_defend	function
(	O
worm	array
[	O
SOUTH	O
(	O
pos	int
)	O
]	O
.	O
attack_points	array
[	O
0	int
]	O
,	O
pos	int
)	O
)	O
{	O
change_defense	function
(	O
pos	int
,	O
worm	array
[	O
SOUTH	O
(	O
pos	int
)	O
]	O
.	O
attack_points	array
[	O
0	int
]	O
,	O
WIN	int
)	O
;	O
}	O
if	O
(	O
worm	array
[	O
SOUTH	O
(	O
pos	int
)	O
]	O
.	O
defense_codes	array
[	O
0	int
]	O
==	O
0	int
&&	O
does_defend	function
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_points	array
[	O
0	int
]	O
,	O
SOUTH	O
(	O
pos	int
)	O
)	O
)	O
{	O
change_defense	function
(	O
SOUTH	O
(	O
pos	int
)	O
,	O
worm	array
[	O
pos	int
]	O
.	O
attack_points	array
[	O
0	int
]	O
,	O
WIN	int
)	O
;	O
}	O
}	O
}	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
&&	O
IS_STONE	O
(	O
board	pointer
[	O
EAST	O
(	O
pos	int
)	O
]	O
)	O
&&	O
!	O
is_same_worm	function
(	O
pos	int
,	O
EAST	O
(	O
pos	int
)	O
)	O
)	O
{	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
&&	O
worm	array
[	O
EAST	O
(	O
pos	int
)	O
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
)	O
{	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_codes	array
[	O
0	int
]	O
==	O
0	int
&&	O
does_defend	function
(	O
worm	array
[	O
EAST	O
(	O
pos	int
)	O
]	O
.	O
attack_points	array
[	O
0	int
]	O
,	O
pos	int
)	O
)	O
{	O
change_defense	function
(	O
pos	int
,	O
worm	array
[	O
EAST	O
(	O
pos	int
)	O
]	O
.	O
attack_points	array
[	O
0	int
]	O
,	O
WIN	int
)	O
;	O
}	O
if	O
(	O
worm	array
[	O
EAST	O
(	O
pos	int
)	O
]	O
.	O
defense_codes	array
[	O
0	int
]	O
==	O
0	int
&&	O
does_defend	function
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_points	array
[	O
0	int
]	O
,	O
EAST	O
(	O
pos	int
)	O
)	O
)	O
{	O
change_defense	function
(	O
EAST	O
(	O
pos	int
)	O
,	O
worm	array
[	O
pos	int
]	O
.	O
attack_points	array
[	O
0	int
]	O
,	O
WIN	int
)	O
;	O
}	O
}	O
}	O
}	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
int	O
lunch	int
;	O
if	O
(	O
!	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
||	O
!	O
is_worm_origin	function
(	O
pos	int
,	O
pos	int
)	O
)	O
continue	O
;	O
if	O
(	O
find_lunch	function
(	O
pos	int
,	O
&	O
lunch	int
)	O
&&	O
(	O
worm	array
[	O
lunch	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
==	O
WIN	int
||	O
worm	array
[	O
lunch	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
==	O
KO_A	int
)	O
)	O
{	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"lunch found for %1m at %1m\n"	pointer
,	O
pos	int
,	O
lunch	int
)	O
;	O
worm	array
[	O
pos	int
]	O
.	O
lunch	int
=	O
lunch	int
;	O
}	O
else	O
worm	array
[	O
pos	int
]	O
.	O
lunch	int
=	O
NO_MOVE	O
;	O
propagate_worm	function
(	O
pos	int
)	O
;	O
}	O
if	O
(	O
!	O
disable_threat_computation	int
)	O
find_worm_threats	function
(	O
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
&&	O
worm	array
[	O
pos	int
]	O
.	O
origin	int
==	O
pos	int
&&	O
worm	array
[	O
pos	int
]	O
.	O
genus	pointer
==	O
0	int
&&	O
worm	array
[	O
pos	int
]	O
.	O
liberties2	int
==	O
0	int
&&	O
!	O
worm	array
[	O
pos	int
]	O
.	O
cutstone	int
&&	O
worm	array
[	O
pos	int
]	O
.	O
lunch	int
==	O
NO_MOVE	O
)	O
{	O
int	O
edge	pointer
;	O
int	O
border_color	pointer
=	O
examine_cavity	function
(	O
pos	int
,	O
&	O
edge	pointer
)	O
;	O
if	O
(	O
border_color	pointer
!=	O
GRAY	int
&&	O
edge	pointer
<	O
3	int
)	O
{	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"Worm %1m identified as inessential.\n"	pointer
,	O
pos	int
)	O
;	O
worm	array
[	O
pos	int
]	O
.	O
inessential	int
=	O
1	int
;	O
propagate_worm	function
(	O
pos	int
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
build_worms	function
(	O
)	O
{	O
int	O
pos	int
;	O
memset	function
(	O
worm	array
,	O
0	int
,	O
sizeof	O
(	O
worm	array
)	O
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
worm	array
[	O
pos	int
]	O
.	O
origin	int
=	O
NO_MOVE	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
||	O
worm	array
[	O
pos	int
]	O
.	O
origin	int
!=	O
NO_MOVE	O
)	O
continue	O
;	O
worm	array
[	O
pos	int
]	O
.	O
color	int
=	O
board	pointer
[	O
pos	int
]	O
;	O
worm	array
[	O
pos	int
]	O
.	O
origin	int
=	O
pos	int
;	O
worm	array
[	O
pos	int
]	O
.	O
inessential	int
=	O
0	int
;	O
worm	array
[	O
pos	int
]	O
.	O
invincible	int
=	O
0	int
;	O
worm	array
[	O
pos	int
]	O
.	O
unconditional_status	enum
=	O
UNKNOWN	int
;	O
worm	array
[	O
pos	int
]	O
.	O
effective_size	float
=	O
0.0	int
;	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
)	O
{	O
worm	array
[	O
pos	int
]	O
.	O
liberties	pointer
=	O
countlib	function
(	O
pos	int
)	O
;	O
worm	array
[	O
pos	int
]	O
.	O
size	int
=	O
countstones	function
(	O
pos	int
)	O
;	O
propagate_worm	function
(	O
pos	int
)	O
;	O
}	O
}	O
}	O
static	O
void	O
compute_effective_worm_sizes	function
(	O
)	O
{	O
do_compute_effective_worm_sizes	function
(	O
BLACK	int
|	O
WHITE	int
,	O
close_worms	array
,	O
number_close_worms	array
,	O
3	int
)	O
;	O
do_compute_effective_worm_sizes	function
(	O
BLACK	int
,	O
close_black_worms	array
,	O
number_close_black_worms	array
,	O
5	int
)	O
;	O
do_compute_effective_worm_sizes	function
(	O
WHITE	int
,	O
close_white_worms	array
,	O
number_close_white_worms	array
,	O
5	int
)	O
;	O
}	O
static	O
void	O
do_compute_effective_worm_sizes	function
(	O
int	O
color	int
,	O
int	O
(	O
*	O
cw	pointer
)	O
[	O
MAX_CLOSE_WORMS	int
]	O
,	O
int	O
*	O
ncw	pointer
,	O
int	O
max_distance	int
)	O
{	O
int	O
pos	int
;	O
int	O
distance	array
[	O
BOARDMAX	O
]	O
;	O
static	O
int	O
worms	array
[	O
BOARDMAX	O
]	O
[	O
2	int
*	O
(	O
MAX_BOARD	int
-	O
1	int
)	O
]	O
;	O
int	O
nworms	array
[	O
BOARDMAX	O
]	O
;	O
int	O
found_one	int
;	O
int	O
dist	int
;	O
int	O
k	int
,	O
l	int
;	O
int	O
r	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
continue	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
2	int
*	O
(	O
board_size	int
-	O
1	int
)	O
;	O
k	int
++	O
)	O
worms	array
[	O
pos	int
]	O
[	O
k	int
]	O
=	O
NO_MOVE	O
;	O
nworms	array
[	O
pos	int
]	O
=	O
0	int
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
&	O
color	int
)	O
{	O
distance	array
[	O
pos	int
]	O
=	O
0	int
;	O
worms	array
[	O
pos	int
]	O
[	O
0	int
]	O
=	O
worm	array
[	O
pos	int
]	O
.	O
origin	int
;	O
nworms	array
[	O
pos	int
]	O
++	O
;	O
}	O
else	O
distance	array
[	O
pos	int
]	O
=	O
-	O
1	int
;	O
}	O
dist	int
=	O
0	int
;	O
found_one	int
=	O
1	int
;	O
while	O
(	O
found_one	int
&&	O
dist	int
<=	O
max_distance	int
)	O
{	O
found_one	int
=	O
0	int
;	O
dist	int
++	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
||	O
distance	array
[	O
pos	int
]	O
!=	O
-	O
1	int
)	O
continue	O
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
4	int
;	O
r	int
++	O
)	O
{	O
int	O
pos2	int
=	O
pos	int
+	O
delta	array
[	O
r	int
]	O
;	O
if	O
(	O
ON_BOARD	O
(	O
pos2	int
)	O
&&	O
distance	array
[	O
pos2	int
]	O
==	O
dist	int
-	O
1	int
)	O
{	O
found_one	int
=	O
1	int
;	O
distance	array
[	O
pos	int
]	O
=	O
dist	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
nworms	array
[	O
pos2	int
]	O
;	O
k	int
++	O
)	O
{	O
int	O
already_counted	int
=	O
0	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
nworms	array
[	O
pos	int
]	O
;	O
l	int
++	O
)	O
if	O
(	O
worms	array
[	O
pos	int
]	O
[	O
l	int
]	O
==	O
worms	array
[	O
pos2	int
]	O
[	O
k	int
]	O
)	O
{	O
already_counted	int
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
already_counted	int
)	O
{	O
ASSERT1	O
(	O
nworms	array
[	O
pos	int
]	O
<	O
2	int
*	O
(	O
board_size	int
-	O
1	int
)	O
,	O
pos	int
)	O
;	O
worms	array
[	O
pos	int
]	O
[	O
nworms	array
[	O
pos	int
]	O
]	O
=	O
worms	array
[	O
pos2	int
]	O
[	O
k	int
]	O
;	O
nworms	array
[	O
pos	int
]	O
++	O
;	O
}	O
}	O
}	O
}	O
}	O
}	O
if	O
(	O
color	int
==	O
(	O
BLACK	int
|	O
WHITE	int
)	O
)	O
{	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
continue	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
nworms	array
[	O
pos	int
]	O
;	O
k	int
++	O
)	O
{	O
int	O
w	int
=	O
worms	array
[	O
pos	int
]	O
[	O
k	int
]	O
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
worm	array
[	O
w	int
]	O
.	O
effective_size	float
+=	O
0.5	int
/	O
nworms	array
[	O
pos	int
]	O
;	O
else	O
worm	array
[	O
w	int
]	O
.	O
effective_size	float
+=	O
1.0	int
;	O
}	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
&&	O
is_worm_origin	function
(	O
pos	int
,	O
pos	int
)	O
)	O
propagate_worm	function
(	O
pos	int
)	O
;	O
}	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
)	O
continue	O
;	O
if	O
(	O
nworms	array
[	O
pos	int
]	O
>	O
MAX_CLOSE_WORMS	int
)	O
ncw	pointer
[	O
pos	int
]	O
=	O
0	int
;	O
else	O
ncw	pointer
[	O
pos	int
]	O
=	O
nworms	array
[	O
pos	int
]	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
ncw	pointer
[	O
pos	int
]	O
;	O
k	int
++	O
)	O
cw	pointer
[	O
pos	int
]	O
[	O
k	int
]	O
=	O
worms	array
[	O
pos	int
]	O
[	O
k	int
]	O
;	O
}	O
}	O
static	O
void	O
compute_unconditional_status	function
(	O
)	O
{	O
int	O
unconditional_territory	array
[	O
BOARDMAX	O
]	O
;	O
int	O
pos	int
;	O
int	O
color	int
;	O
for	O
(	O
color	int
=	O
WHITE	int
;	O
color	int
<=	O
BLACK	int
;	O
color	int
++	O
)	O
{	O
unconditional_life	function
(	O
unconditional_territory	array
,	O
color	int
)	O
;	O
if	O
(	O
get_level	function
(	O
)	O
>=	O
10	int
)	O
find_unconditionally_meaningless_moves	function
(	O
unconditional_territory	array
,	O
color	int
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
||	O
!	O
unconditional_territory	array
[	O
pos	int
]	O
)	O
continue	O
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
color	int
)	O
{	O
worm	array
[	O
pos	int
]	O
.	O
unconditional_status	enum
=	O
ALIVE	int
;	O
if	O
(	O
unconditional_territory	array
[	O
pos	int
]	O
==	O
1	int
)	O
worm	array
[	O
pos	int
]	O
.	O
invincible	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
if	O
(	O
color	int
==	O
WHITE	int
)	O
worm	array
[	O
pos	int
]	O
.	O
unconditional_status	enum
=	O
WHITE_TERRITORY	int
;	O
else	O
worm	array
[	O
pos	int
]	O
.	O
unconditional_status	enum
=	O
BLACK_TERRITORY	int
;	O
}	O
else	O
worm	array
[	O
pos	int
]	O
.	O
unconditional_status	enum
=	O
DEAD	int
;	O
}	O
}	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
}	O
static	O
void	O
find_worm_attacks_and_defenses	function
(	O
)	O
{	O
int	O
str	int
;	O
int	O
k	int
;	O
int	O
acode	int
,	O
dcode	int
;	O
int	O
attack_point	pointer
;	O
int	O
defense_point	pointer
;	O
static	O
int	O
libs	pointer
[	O
MAXLIBS	O
]	O
;	O
int	O
liberties	pointer
;	O
int	O
color	int
;	O
int	O
other	int
;	O
for	O
(	O
str	int
=	O
BOARDMIN	O
;	O
str	int
<	O
BOARDMAX	O
;	O
str	int
++	O
)	O
{	O
if	O
(	O
!	O
IS_STONE	O
(	O
board	pointer
[	O
str	int
]	O
)	O
||	O
!	O
is_worm_origin	function
(	O
str	int
,	O
str	int
)	O
)	O
continue	O
;	O
TRACE	O
(	O
"considering attack of %1m\n"	pointer
,	O
str	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
MAX_TACTICAL_POINTS	int
;	O
k	int
++	O
)	O
{	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
k	int
]	O
=	O
0	int
;	O
worm	array
[	O
str	int
]	O
.	O
attack_points	array
[	O
k	int
]	O
=	O
0	int
;	O
worm	array
[	O
str	int
]	O
.	O
defense_codes	array
[	O
k	int
]	O
=	O
0	int
;	O
worm	array
[	O
str	int
]	O
.	O
defense_points	array
[	O
k	int
]	O
=	O
0	int
;	O
}	O
propagate_worm	function
(	O
str	int
)	O
;	O
acode	int
=	O
attack	function
(	O
str	int
,	O
&	O
attack_point	pointer
)	O
;	O
if	O
(	O
acode	int
!=	O
0	int
)	O
{	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"worm at %1m can be attacked at %1m\n"	pointer
,	O
str	int
,	O
attack_point	pointer
)	O
;	O
change_attack	function
(	O
str	int
,	O
attack_point	pointer
,	O
acode	int
)	O
;	O
}	O
}	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
find_attack_patterns	function
(	O
)	O
;	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
for	O
(	O
str	int
=	O
BOARDMIN	O
;	O
str	int
<	O
BOARDMAX	O
;	O
str	int
++	O
)	O
{	O
if	O
(	O
!	O
IS_STONE	O
(	O
board	pointer
[	O
str	int
]	O
)	O
||	O
!	O
is_worm_origin	function
(	O
str	int
,	O
str	int
)	O
)	O
continue	O
;	O
if	O
(	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
)	O
{	O
TRACE	O
(	O
"considering defense of %1m\n"	pointer
,	O
str	int
)	O
;	O
dcode	int
=	O
find_defense	function
(	O
str	int
,	O
&	O
defense_point	pointer
)	O
;	O
if	O
(	O
dcode	int
!=	O
0	int
)	O
{	O
TRACE	O
(	O
"worm at %1m can be defended at %1m\n"	pointer
,	O
str	int
,	O
defense_point	pointer
)	O
;	O
if	O
(	O
defense_point	pointer
!=	O
NO_MOVE	O
)	O
change_defense	function
(	O
str	int
,	O
defense_point	pointer
,	O
dcode	int
)	O
;	O
}	O
else	O
{	O
attack_point	pointer
=	O
worm	array
[	O
str	int
]	O
.	O
attack_points	array
[	O
0	int
]	O
;	O
if	O
(	O
!	O
liberty_of_string	function
(	O
attack_point	pointer
,	O
str	int
)	O
)	O
if	O
(	O
trymove	function
(	O
attack_point	pointer
,	O
worm	array
[	O
str	int
]	O
.	O
color	int
,	O
"make_worms"	pointer
,	O
NO_MOVE	O
)	O
)	O
{	O
int	O
acode	int
=	O
attack	function
(	O
str	int
,	O
NULL	O
)	O
;	O
if	O
(	O
acode	int
!=	O
WIN	int
)	O
{	O
change_defense	function
(	O
str	int
,	O
attack_point	pointer
,	O
REVERSE_RESULT	O
(	O
acode	int
)	O
)	O
;	O
TRACE	O
(	O
"worm at %1m can be defended at %1m with code %d\n"	pointer
,	O
str	int
,	O
attack_point	pointer
,	O
REVERSE_RESULT	O
(	O
acode	int
)	O
)	O
;	O
}	O
popgo	function
(	O
)	O
;	O
}	O
}	O
}	O
}	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
find_defense_patterns	function
(	O
)	O
;	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
for	O
(	O
str	int
=	O
BOARDMIN	O
;	O
str	int
<	O
BOARDMAX	O
;	O
str	int
++	O
)	O
{	O
color	int
=	O
board	pointer
[	O
str	int
]	O
;	O
if	O
(	O
!	O
IS_STONE	O
(	O
color	int
)	O
||	O
!	O
is_worm_origin	function
(	O
str	int
,	O
str	int
)	O
)	O
continue	O
;	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
if	O
(	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
==	O
0	int
)	O
continue	O
;	O
liberties	pointer
=	O
findlib	function
(	O
str	int
,	O
MAXLIBS	O
,	O
libs	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
liberties	pointer
;	O
k	int
++	O
)	O
{	O
int	O
pos	int
=	O
libs	pointer
[	O
k	int
]	O
;	O
if	O
(	O
!	O
attack_move_known	function
(	O
pos	int
,	O
str	int
)	O
)	O
{	O
if	O
(	O
!	O
send_two_return_one	function
(	O
pos	int
,	O
other	int
)	O
&&	O
trymove	function
(	O
pos	int
,	O
other	int
,	O
"make_worms"	pointer
,	O
str	int
)	O
)	O
{	O
if	O
(	O
board	pointer
[	O
str	int
]	O
==	O
EMPTY	int
||	O
attack	function
(	O
str	int
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
board	pointer
[	O
str	int
]	O
==	O
EMPTY	int
)	O
dcode	int
=	O
0	int
;	O
else	O
dcode	int
=	O
find_defense	function
(	O
str	int
,	O
NULL	O
)	O
;	O
if	O
(	O
dcode	int
!=	O
WIN	int
)	O
change_attack	function
(	O
str	int
,	O
pos	int
,	O
REVERSE_RESULT	O
(	O
dcode	int
)	O
)	O
;	O
}	O
popgo	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
!	O
defense_move_known	function
(	O
pos	int
,	O
str	int
)	O
)	O
{	O
if	O
(	O
worm	array
[	O
str	int
]	O
.	O
defense_codes	array
[	O
0	int
]	O
!=	O
0	int
)	O
if	O
(	O
trymove	function
(	O
pos	int
,	O
color	int
,	O
"make_worms"	pointer
,	O
NO_MOVE	O
)	O
)	O
{	O
acode	int
=	O
attack	function
(	O
str	int
,	O
NULL	O
)	O
;	O
if	O
(	O
acode	int
!=	O
WIN	int
)	O
change_defense	function
(	O
str	int
,	O
pos	int
,	O
REVERSE_RESULT	O
(	O
acode	int
)	O
)	O
;	O
popgo	function
(	O
)	O
;	O
}	O
}	O
}	O
}	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
}	O
static	O
void	O
find_worm_threats	function
(	O
)	O
{	O
int	O
str	int
;	O
static	O
int	O
libs	pointer
[	O
MAXLIBS	O
]	O
;	O
int	O
liberties	pointer
;	O
int	O
k	int
;	O
int	O
l	int
;	O
int	O
color	int
;	O
for	O
(	O
str	int
=	O
BOARDMIN	O
;	O
str	int
<	O
BOARDMAX	O
;	O
str	int
++	O
)	O
{	O
color	int
=	O
board	pointer
[	O
str	int
]	O
;	O
if	O
(	O
!	O
IS_STONE	O
(	O
color	int
)	O
||	O
!	O
is_worm_origin	function
(	O
str	int
,	O
str	int
)	O
)	O
continue	O
;	O
if	O
(	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
==	O
0	int
)	O
{	O
attack_threats	function
(	O
str	int
,	O
MAX_TACTICAL_POINTS	int
,	O
worm	array
[	O
str	int
]	O
.	O
attack_threat_points	array
,	O
worm	array
[	O
str	int
]	O
.	O
attack_threat_codes	array
)	O
;	O
}	O
if	O
(	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
&&	O
worm	array
[	O
str	int
]	O
.	O
defense_codes	array
[	O
0	int
]	O
==	O
0	int
)	O
{	O
liberties	pointer
=	O
findlib	function
(	O
str	int
,	O
MAXLIBS	O
,	O
libs	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
liberties	pointer
;	O
k	int
++	O
)	O
{	O
int	O
aa	int
=	O
libs	pointer
[	O
k	int
]	O
;	O
if	O
(	O
trymove	function
(	O
aa	int
,	O
color	int
,	O
"threaten defense"	pointer
,	O
NO_MOVE	O
)	O
)	O
{	O
if	O
(	O
attack	function
(	O
str	int
,	O
NULL	O
)	O
==	O
WIN	int
)	O
{	O
int	O
dcode	int
=	O
find_defense	function
(	O
str	int
,	O
NULL	O
)	O
;	O
if	O
(	O
dcode	int
!=	O
0	int
)	O
change_defense_threat	function
(	O
str	int
,	O
aa	int
,	O
dcode	int
)	O
;	O
}	O
popgo	function
(	O
)	O
;	O
}	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
4	int
;	O
l	int
++	O
)	O
{	O
int	O
bb	int
=	O
libs	pointer
[	O
k	int
]	O
+	O
delta	array
[	O
l	int
]	O
;	O
if	O
(	O
!	O
ON_BOARD	O
(	O
bb	int
)	O
||	O
IS_STONE	O
(	O
board	pointer
[	O
bb	int
]	O
)	O
||	O
liberty_of_string	function
(	O
bb	int
,	O
str	int
)	O
)	O
continue	O
;	O
if	O
(	O
trymove	function
(	O
bb	int
,	O
color	int
,	O
"threaten defense"	pointer
,	O
str	int
)	O
)	O
{	O
if	O
(	O
attack	function
(	O
str	int
,	O
NULL	O
)	O
==	O
WIN	int
)	O
{	O
int	O
dcode	int
=	O
find_defense	function
(	O
str	int
,	O
NULL	O
)	O
;	O
if	O
(	O
dcode	int
!=	O
0	int
)	O
change_defense_threat	function
(	O
str	int
,	O
bb	int
,	O
dcode	int
)	O
;	O
}	O
popgo	function
(	O
)	O
;	O
}	O
}	O
}	O
}	O
}	O
}	O
static	O
int	O
find_lunch	function
(	O
int	O
str	int
,	O
int	O
*	O
lunch	int
)	O
{	O
int	O
pos	int
;	O
int	O
k	int
;	O
ASSERT1	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
str	int
]	O
)	O
,	O
str	int
)	O
;	O
ASSERT1	O
(	O
stackp	int
==	O
0	int
,	O
str	int
)	O
;	O
*	O
lunch	int
=	O
NO_MOVE	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
!=	O
OTHER_COLOR	O
(	O
board	pointer
[	O
str	int
]	O
)	O
)	O
continue	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
8	int
;	O
k	int
++	O
)	O
{	O
int	O
apos	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
ON_BOARD	O
(	O
apos	int
)	O
&&	O
is_same_worm	function
(	O
apos	int
,	O
str	int
)	O
)	O
{	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
!=	O
0	int
&&	O
!	O
is_ko_point	function
(	O
pos	int
)	O
)	O
{	O
if	O
(	O
*	O
lunch	int
==	O
NO_MOVE	O
||	O
worm	array
[	O
pos	int
]	O
.	O
cutstone	int
>	O
worm	array
[	O
*	O
lunch	int
]	O
.	O
cutstone	int
||	O
(	O
worm	array
[	O
pos	int
]	O
.	O
cutstone	int
==	O
worm	array
[	O
*	O
lunch	int
]	O
.	O
cutstone	int
&&	O
worm	array
[	O
pos	int
]	O
.	O
liberties	pointer
<	O
worm	array
[	O
*	O
lunch	int
]	O
.	O
liberties	pointer
)	O
)	O
{	O
*	O
lunch	int
=	O
worm	array
[	O
pos	int
]	O
.	O
origin	int
;	O
}	O
}	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
*	O
lunch	int
!=	O
NO_MOVE	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
is_same_worm	function
(	O
int	O
w1	int
,	O
int	O
w2	int
)	O
{	O
return	O
worm	array
[	O
w1	int
]	O
.	O
origin	int
==	O
worm	array
[	O
w2	int
]	O
.	O
origin	int
;	O
}	O
int	O
is_worm_origin	function
(	O
int	O
w	int
,	O
int	O
pos	int
)	O
{	O
return	O
worm	array
[	O
w	int
]	O
.	O
origin	int
==	O
pos	int
;	O
}	O
void	O
change_defense	function
(	O
int	O
str	int
,	O
int	O
move	pointer
,	O
int	O
dcode	int
)	O
{	O
str	int
=	O
worm	array
[	O
str	int
]	O
.	O
origin	int
;	O
change_tactical_point	function
(	O
str	int
,	O
move	pointer
,	O
dcode	int
,	O
worm	array
[	O
str	int
]	O
.	O
defense_points	array
,	O
worm	array
[	O
str	int
]	O
.	O
defense_codes	array
)	O
;	O
}	O
void	O
change_attack	function
(	O
int	O
str	int
,	O
int	O
move	pointer
,	O
int	O
acode	int
)	O
{	O
str	int
=	O
worm	array
[	O
str	int
]	O
.	O
origin	int
;	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"change_attack: %1m %1m %d\n"	pointer
,	O
str	int
,	O
move	pointer
,	O
acode	int
)	O
;	O
change_tactical_point	function
(	O
str	int
,	O
move	pointer
,	O
acode	int
,	O
worm	array
[	O
str	int
]	O
.	O
attack_points	array
,	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
)	O
;	O
}	O
void	O
change_defense_threat	function
(	O
int	O
str	int
,	O
int	O
move	pointer
,	O
int	O
dcode	int
)	O
{	O
str	int
=	O
worm	array
[	O
str	int
]	O
.	O
origin	int
;	O
change_tactical_point	function
(	O
str	int
,	O
move	pointer
,	O
dcode	int
,	O
worm	array
[	O
str	int
]	O
.	O
defense_threat_points	array
,	O
worm	array
[	O
str	int
]	O
.	O
defense_threat_codes	array
)	O
;	O
}	O
void	O
change_attack_threat	function
(	O
int	O
str	int
,	O
int	O
move	pointer
,	O
int	O
acode	int
)	O
{	O
str	int
=	O
worm	array
[	O
str	int
]	O
.	O
origin	int
;	O
change_tactical_point	function
(	O
str	int
,	O
move	pointer
,	O
acode	int
,	O
worm	array
[	O
str	int
]	O
.	O
attack_threat_points	array
,	O
worm	array
[	O
str	int
]	O
.	O
attack_threat_codes	array
)	O
;	O
}	O
int	O
attack_move_known	function
(	O
int	O
move	pointer
,	O
int	O
str	int
)	O
{	O
return	O
movelist_move_known	function
(	O
move	pointer
,	O
MAX_TACTICAL_POINTS	int
,	O
worm	array
[	O
str	int
]	O
.	O
attack_points	array
,	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
)	O
;	O
}	O
int	O
defense_move_known	function
(	O
int	O
move	pointer
,	O
int	O
str	int
)	O
{	O
return	O
movelist_move_known	function
(	O
move	pointer
,	O
MAX_TACTICAL_POINTS	int
,	O
worm	array
[	O
str	int
]	O
.	O
defense_points	array
,	O
worm	array
[	O
str	int
]	O
.	O
defense_codes	array
)	O
;	O
}	O
int	O
attack_threat_move_known	function
(	O
int	O
move	pointer
,	O
int	O
str	int
)	O
{	O
return	O
movelist_move_known	function
(	O
move	pointer
,	O
MAX_TACTICAL_POINTS	int
,	O
worm	array
[	O
str	int
]	O
.	O
attack_threat_points	array
,	O
worm	array
[	O
str	int
]	O
.	O
attack_threat_codes	array
)	O
;	O
}	O
int	O
defense_threat_move_known	function
(	O
int	O
move	pointer
,	O
int	O
str	int
)	O
{	O
return	O
movelist_move_known	function
(	O
move	pointer
,	O
MAX_TACTICAL_POINTS	int
,	O
worm	array
[	O
str	int
]	O
.	O
defense_threat_points	array
,	O
worm	array
[	O
str	int
]	O
.	O
defense_threat_codes	array
)	O
;	O
}	O
static	O
void	O
change_tactical_point	function
(	O
int	O
str	int
,	O
int	O
move	pointer
,	O
int	O
code	int
,	O
int	O
points	array
[	O
MAX_TACTICAL_POINTS	int
]	O
,	O
int	O
codes	array
[	O
MAX_TACTICAL_POINTS	int
]	O
)	O
{	O
ASSERT_ON_BOARD1	O
(	O
str	int
)	O
;	O
ASSERT1	O
(	O
str	int
==	O
worm	array
[	O
str	int
]	O
.	O
origin	int
,	O
str	int
)	O
;	O
movelist_change_point	function
(	O
move	pointer
,	O
code	int
,	O
MAX_TACTICAL_POINTS	int
,	O
points	array
,	O
codes	array
)	O
;	O
propagate_worm2	function
(	O
str	int
)	O
;	O
}	O
void	O
propagate_worm	function
(	O
int	O
pos	int
)	O
{	O
int	O
k	int
;	O
int	O
num_stones	int
;	O
int	O
stones	pointer
[	O
MAX_BOARD	int
*	O
MAX_BOARD	int
]	O
;	O
gg_assert	O
(	O
stackp	int
==	O
0	int
)	O
;	O
ASSERT1	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
,	O
pos	int
)	O
;	O
num_stones	int
=	O
findstones	function
(	O
pos	int
,	O
MAX_BOARD	int
*	O
MAX_BOARD	int
,	O
stones	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
num_stones	int
;	O
k	int
++	O
)	O
if	O
(	O
stones	pointer
[	O
k	int
]	O
!=	O
pos	int
)	O
worm	array
[	O
stones	pointer
[	O
k	int
]	O
]	O
=	O
worm	array
[	O
pos	int
]	O
;	O
}	O
static	O
void	O
propagate_worm2	function
(	O
int	O
str	int
)	O
{	O
int	O
pos	int
;	O
ASSERT_ON_BOARD1	O
(	O
str	int
)	O
;	O
ASSERT1	O
(	O
IS_STONE	O
(	O
worm	array
[	O
str	int
]	O
.	O
color	int
)	O
,	O
str	int
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
board	pointer
[	O
str	int
]	O
&&	O
is_same_worm	function
(	O
pos	int
,	O
str	int
)	O
&&	O
pos	int
!=	O
str	int
)	O
worm	array
[	O
pos	int
]	O
=	O
worm	array
[	O
str	int
]	O
;	O
}	O
void	O
worm_reasons	function
(	O
int	O
color	int
)	O
{	O
int	O
pos	int
;	O
int	O
k	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
||	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
continue	O
;	O
if	O
(	O
!	O
is_worm_origin	function
(	O
pos	int
,	O
pos	int
)	O
)	O
continue	O
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
MAX_TACTICAL_POINTS	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_codes	array
[	O
k	int
]	O
!=	O
0	int
)	O
add_attack_move	function
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_points	array
[	O
k	int
]	O
,	O
pos	int
,	O
worm	array
[	O
pos	int
]	O
.	O
attack_codes	array
[	O
k	int
]	O
)	O
;	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_threat_codes	array
[	O
k	int
]	O
!=	O
0	int
)	O
add_attack_threat_move	function
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_threat_points	array
[	O
k	int
]	O
,	O
pos	int
,	O
worm	array
[	O
pos	int
]	O
.	O
attack_threat_codes	array
[	O
k	int
]	O
)	O
;	O
}	O
}	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
color	int
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
MAX_TACTICAL_POINTS	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_codes	array
[	O
k	int
]	O
!=	O
0	int
)	O
add_defense_move	function
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_points	array
[	O
k	int
]	O
,	O
pos	int
,	O
worm	array
[	O
pos	int
]	O
.	O
defense_codes	array
[	O
k	int
]	O
)	O
;	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_threat_codes	array
[	O
k	int
]	O
!=	O
0	int
)	O
add_defense_threat_move	function
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_threat_points	array
[	O
k	int
]	O
,	O
pos	int
,	O
worm	array
[	O
pos	int
]	O
.	O
defense_threat_codes	array
[	O
k	int
]	O
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
ping_cave	function
(	O
int	O
str	int
,	O
int	O
*	O
lib1	int
,	O
int	O
*	O
lib2	int
,	O
int	O
*	O
lib3	int
,	O
int	O
*	O
lib4	int
)	O
{	O
int	O
pos	int
;	O
int	O
k	int
;	O
int	O
libs	pointer
[	O
MAXLIBS	O
]	O
;	O
int	O
mrc	array
[	O
BOARDMAX	O
]	O
;	O
int	O
mse	array
[	O
BOARDMAX	O
]	O
;	O
int	O
color	int
=	O
board	pointer
[	O
str	int
]	O
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
memset	function
(	O
mse	array
,	O
0	int
,	O
sizeof	O
(	O
mse	array
)	O
)	O
;	O
*	O
lib1	int
=	O
findlib	function
(	O
str	int
,	O
MAXLIBS	O
,	O
libs	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
*	O
lib1	int
;	O
k	int
++	O
)	O
mse	array
[	O
libs	pointer
[	O
k	int
]	O
]	O
=	O
1	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
mse	array
[	O
pos	int
]	O
&&	O
(	O
(	O
(	O
!	O
ON_BOARD	O
(	O
SOUTH	O
(	O
pos	int
)	O
)	O
||	O
board	pointer
[	O
SOUTH	O
(	O
pos	int
)	O
]	O
==	O
other	int
)	O
&&	O
(	O
!	O
ON_BOARD	O
(	O
NORTH	O
(	O
pos	int
)	O
)	O
||	O
board	pointer
[	O
NORTH	O
(	O
pos	int
)	O
]	O
==	O
other	int
)	O
)	O
||	O
(	O
(	O
!	O
ON_BOARD	O
(	O
WEST	O
(	O
pos	int
)	O
)	O
||	O
board	pointer
[	O
WEST	O
(	O
pos	int
)	O
]	O
==	O
other	int
)	O
&&	O
(	O
!	O
ON_BOARD	O
(	O
EAST	O
(	O
pos	int
)	O
)	O
||	O
board	pointer
[	O
EAST	O
(	O
pos	int
)	O
]	O
==	O
other	int
)	O
)	O
)	O
)	O
mse	array
[	O
pos	int
]	O
=	O
0	int
;	O
*	O
lib2	int
=	O
0	int
;	O
memset	function
(	O
mrc	array
,	O
0	int
,	O
sizeof	O
(	O
mrc	array
)	O
)	O
;	O
ping_recurse	function
(	O
str	int
,	O
lib2	int
,	O
mse	array
,	O
mrc	array
,	O
color	int
)	O
;	O
*	O
lib3	int
=	O
0	int
;	O
memset	function
(	O
mrc	array
,	O
0	int
,	O
sizeof	O
(	O
mrc	array
)	O
)	O
;	O
ping_recurse	function
(	O
str	int
,	O
lib3	int
,	O
mse	array
,	O
mrc	array
,	O
color	int
)	O
;	O
*	O
lib4	int
=	O
0	int
;	O
memset	function
(	O
mrc	array
,	O
0	int
,	O
sizeof	O
(	O
mrc	array
)	O
)	O
;	O
ping_recurse	function
(	O
str	int
,	O
lib4	int
,	O
mse	array
,	O
mrc	array
,	O
color	int
)	O
;	O
}	O
static	O
void	O
ping_recurse	function
(	O
int	O
pos	int
,	O
int	O
*	O
counter	pointer
,	O
int	O
mx	array
[	O
BOARDMAX	O
]	O
,	O
int	O
mr	array
[	O
BOARDMAX	O
]	O
,	O
int	O
color	int
)	O
{	O
int	O
k	int
;	O
mr	array
[	O
pos	int
]	O
=	O
1	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
apos	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
board	pointer
[	O
apos	int
]	O
==	O
EMPTY	int
&&	O
mx	array
[	O
apos	int
]	O
==	O
0	int
&&	O
mr	array
[	O
apos	int
]	O
==	O
0	int
&&	O
!	O
touching	function
(	O
apos	int
,	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
)	O
{	O
(	O
*	O
counter	pointer
)	O
++	O
;	O
mr	array
[	O
apos	int
]	O
=	O
1	int
;	O
mx	array
[	O
apos	int
]	O
=	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
is_ko_point	function
(	O
pos	int
)	O
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
apos	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
ON_BOARD	O
(	O
apos	int
)	O
&&	O
mr	array
[	O
apos	int
]	O
==	O
0	int
&&	O
(	O
mx	array
[	O
apos	int
]	O
==	O
1	int
||	O
board	pointer
[	O
apos	int
]	O
==	O
color	int
)	O
)	O
ping_recurse	function
(	O
apos	int
,	O
counter	pointer
,	O
mx	array
,	O
mr	array
,	O
color	int
)	O
;	O
}	O
}	O
}	O
static	O
int	O
touching	function
(	O
int	O
pos	int
,	O
int	O
color	int
)	O
{	O
return	O
(	O
board	pointer
[	O
SOUTH	O
(	O
pos	int
)	O
]	O
==	O
color	int
||	O
board	pointer
[	O
WEST	O
(	O
pos	int
)	O
]	O
==	O
color	int
||	O
board	pointer
[	O
NORTH	O
(	O
pos	int
)	O
]	O
==	O
color	int
||	O
board	pointer
[	O
EAST	O
(	O
pos	int
)	O
]	O
==	O
color	int
)	O
;	O
}	O
static	O
int	O
genus	pointer
(	O
int	O
str	int
)	O
{	O
int	O
pos	int
;	O
int	O
mg	array
[	O
BOARDMAX	O
]	O
;	O
int	O
gen	int
=	O
-	O
1	int
;	O
memset	function
(	O
mg	array
,	O
0	int
,	O
sizeof	O
(	O
mg	array
)	O
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
!	O
mg	array
[	O
pos	int
]	O
&&	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
||	O
!	O
is_same_worm	function
(	O
pos	int
,	O
str	int
)	O
)	O
)	O
{	O
markcomponent	function
(	O
str	int
,	O
pos	int
,	O
mg	array
)	O
;	O
gen	int
++	O
;	O
}	O
}	O
return	O
gen	int
;	O
}	O
static	O
void	O
markcomponent	function
(	O
int	O
str	int
,	O
int	O
pos	int
,	O
int	O
mg	array
[	O
BOARDMAX	O
]	O
)	O
{	O
int	O
k	int
;	O
mg	array
[	O
pos	int
]	O
=	O
1	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
apos	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
ON_BOARD	O
(	O
apos	int
)	O
&&	O
mg	array
[	O
apos	int
]	O
==	O
0	int
&&	O
(	O
board	pointer
[	O
apos	int
]	O
==	O
EMPTY	int
||	O
!	O
is_same_worm	function
(	O
apos	int
,	O
str	int
)	O
)	O
)	O
markcomponent	function
(	O
str	int
,	O
apos	int
,	O
mg	array
)	O
;	O
}	O
}	O
static	O
int	O
examine_cavity	function
(	O
int	O
pos	int
,	O
int	O
*	O
edge	pointer
)	O
{	O
int	O
border_color	pointer
=	O
EMPTY	int
;	O
int	O
ml	array
[	O
BOARDMAX	O
]	O
;	O
int	O
origin	int
=	O
NO_MOVE	O
;	O
ASSERT_ON_BOARD1	O
(	O
pos	int
)	O
;	O
gg_assert	O
(	O
edge	pointer
!=	O
NULL	O
)	O
;	O
memset	function
(	O
ml	array
,	O
0	int
,	O
sizeof	O
(	O
ml	array
)	O
)	O
;	O
*	O
edge	pointer
=	O
0	int
;	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
)	O
origin	int
=	O
find_origin	function
(	O
pos	int
)	O
;	O
cavity_recurse	function
(	O
pos	int
,	O
ml	array
,	O
&	O
border_color	pointer
,	O
edge	pointer
,	O
origin	int
)	O
;	O
if	O
(	O
border_color	pointer
!=	O
EMPTY	int
)	O
return	O
border_color	pointer
;	O
gg_assert	O
(	O
border_color	pointer
==	O
EMPTY	int
&&	O
(	O
(	O
pos	int
==	O
NO_MOVE	O
&&	O
stones_on_board	function
(	O
BLACK	int
|	O
WHITE	int
)	O
==	O
0	int
)	O
||	O
(	O
pos	int
!=	O
NO_MOVE	O
&&	O
stones_on_board	function
(	O
BLACK	int
|	O
WHITE	int
)	O
==	O
countstones	function
(	O
pos	int
)	O
)	O
)	O
)	O
;	O
return	O
GRAY	int
;	O
}	O
static	O
void	O
cavity_recurse	function
(	O
int	O
pos	int
,	O
int	O
mx	array
[	O
BOARDMAX	O
]	O
,	O
int	O
*	O
border_color	pointer
,	O
int	O
*	O
edge	pointer
,	O
int	O
str	int
)	O
{	O
int	O
k	int
;	O
ASSERT1	O
(	O
mx	array
[	O
pos	int
]	O
==	O
0	int
,	O
pos	int
)	O
;	O
mx	array
[	O
pos	int
]	O
=	O
1	int
;	O
if	O
(	O
is_edge_vertex	function
(	O
pos	int
)	O
&&	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
(	O
*	O
edge	pointer
)	O
++	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
int	O
apos	int
=	O
pos	int
+	O
delta	array
[	O
k	int
]	O
;	O
if	O
(	O
ON_BOARD	O
(	O
apos	int
)	O
&&	O
!	O
mx	array
[	O
apos	int
]	O
)	O
{	O
int	O
neighbor_empty	int
=	O
0	int
;	O
if	O
(	O
board	pointer
[	O
apos	int
]	O
==	O
EMPTY	int
)	O
neighbor_empty	int
=	O
1	int
;	O
else	O
{	O
if	O
(	O
str	int
==	O
find_origin	function
(	O
apos	int
)	O
)	O
neighbor_empty	int
=	O
1	int
;	O
else	O
neighbor_empty	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
neighbor_empty	int
)	O
*	O
border_color	pointer
|=	O
board	pointer
[	O
apos	int
]	O
;	O
else	O
cavity_recurse	function
(	O
apos	int
,	O
mx	array
,	O
border_color	pointer
,	O
edge	pointer
,	O
str	int
)	O
;	O
}	O
}	O
}	O
static	O
void	O
find_attack_patterns	function
(	O
void	O
)	O
{	O
matchpat	function
(	O
attack_callback	function
,	O
ANCHOR_OTHER	int
,	O
&	O
attpat_db	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
attack_callback	function
(	O
int	O
anchor	int
,	O
int	O
color	int
,	O
struct	O
pattern	pointer
*	O
pattern	pointer
,	O
int	O
ll	int
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
move	pointer
;	O
int	O
k	int
;	O
UNUSED	O
(	O
data	pointer
)	O
;	O
move	pointer
=	O
AFFINE_TRANSFORM	O
(	O
pattern	pointer
->	O
move_offset	int
,	O
ll	int
,	O
anchor	int
)	O
;	O
if	O
(	O
pattern	pointer
->	O
autohelper_flag	int
&	O
HAVE_CONSTRAINT	int
)	O
{	O
if	O
(	O
!	O
pattern	pointer
->	O
autohelper	pointer
(	O
ll	int
,	O
move	pointer
,	O
color	int
,	O
0	int
)	O
)	O
return	O
;	O
}	O
if	O
(	O
pattern	pointer
->	O
helper	pointer
)	O
{	O
if	O
(	O
!	O
pattern	pointer
->	O
helper	pointer
(	O
pattern	pointer
,	O
ll	int
,	O
move	pointer
,	O
color	int
)	O
)	O
{	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"Attack pattern %s+%d rejected by helper at %1m\n"	pointer
,	O
pattern	pointer
->	O
name	short
,	O
ll	int
,	O
move	pointer
)	O
;	O
return	O
;	O
}	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
pattern	pointer
->	O
patlen	int
;	O
++	O
k	int
)	O
{	O
if	O
(	O
pattern	pointer
->	O
patn	pointer
[	O
k	int
]	O
.	O
att	char
==	O
ATT_X	int
)	O
{	O
int	O
pos	int
=	O
AFFINE_TRANSFORM	O
(	O
pattern	pointer
->	O
patn	pointer
[	O
k	int
]	O
.	O
offset	short
,	O
ll	int
,	O
anchor	int
)	O
;	O
int	O
str	int
=	O
worm	array
[	O
pos	int
]	O
.	O
origin	int
;	O
if	O
(	O
countlib	function
(	O
str	int
)	O
>	O
4	int
)	O
continue	O
;	O
if	O
(	O
attack_move_known	function
(	O
move	pointer
,	O
str	int
)	O
)	O
continue	O
;	O
if	O
(	O
trymove	function
(	O
move	pointer
,	O
color	int
,	O
"attack_callback"	pointer
,	O
str	int
)	O
)	O
{	O
int	O
dcode	int
;	O
if	O
(	O
!	O
board	pointer
[	O
str	int
]	O
)	O
dcode	int
=	O
0	int
;	O
else	O
if	O
(	O
!	O
attack	function
(	O
str	int
,	O
NULL	O
)	O
)	O
dcode	int
=	O
WIN	int
;	O
else	O
dcode	int
=	O
find_defense	function
(	O
str	int
,	O
NULL	O
)	O
;	O
popgo	function
(	O
)	O
;	O
if	O
(	O
dcode	int
!=	O
WIN	int
&&	O
REVERSE_RESULT	O
(	O
dcode	int
)	O
>=	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
)	O
{	O
change_attack	function
(	O
str	int
,	O
move	pointer
,	O
REVERSE_RESULT	O
(	O
dcode	int
)	O
)	O
;	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"Attack pattern %s+%d found attack on %1m at %1m with code %d\n"	pointer
,	O
pattern	pointer
->	O
name	short
,	O
ll	int
,	O
str	int
,	O
move	pointer
,	O
REVERSE_RESULT	O
(	O
dcode	int
)	O
)	O
;	O
}	O
}	O
}	O
}	O
}	O
static	O
void	O
find_defense_patterns	function
(	O
void	O
)	O
{	O
matchpat	function
(	O
defense_callback	function
,	O
ANCHOR_COLOR	int
,	O
&	O
defpat_db	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
defense_callback	function
(	O
int	O
anchor	int
,	O
int	O
color	int
,	O
struct	O
pattern	pointer
*	O
pattern	pointer
,	O
int	O
ll	int
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
move	pointer
;	O
int	O
k	int
;	O
UNUSED	O
(	O
data	pointer
)	O
;	O
move	pointer
=	O
AFFINE_TRANSFORM	O
(	O
pattern	pointer
->	O
move_offset	int
,	O
ll	int
,	O
anchor	int
)	O
;	O
if	O
(	O
pattern	pointer
->	O
autohelper_flag	int
&	O
HAVE_CONSTRAINT	int
)	O
{	O
if	O
(	O
!	O
pattern	pointer
->	O
autohelper	pointer
(	O
ll	int
,	O
move	pointer
,	O
color	int
,	O
0	int
)	O
)	O
return	O
;	O
}	O
if	O
(	O
pattern	pointer
->	O
helper	pointer
)	O
{	O
if	O
(	O
!	O
pattern	pointer
->	O
helper	pointer
(	O
pattern	pointer
,	O
ll	int
,	O
move	pointer
,	O
color	int
)	O
)	O
{	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"Defense pattern %s+%d rejected by helper at %1m\n"	pointer
,	O
pattern	pointer
->	O
name	short
,	O
ll	int
,	O
move	pointer
)	O
;	O
return	O
;	O
}	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
pattern	pointer
->	O
patlen	int
;	O
++	O
k	int
)	O
{	O
if	O
(	O
pattern	pointer
->	O
patn	pointer
[	O
k	int
]	O
.	O
att	char
==	O
ATT_O	int
)	O
{	O
int	O
pos	int
=	O
AFFINE_TRANSFORM	O
(	O
pattern	pointer
->	O
patn	pointer
[	O
k	int
]	O
.	O
offset	short
,	O
ll	int
,	O
anchor	int
)	O
;	O
int	O
str	int
=	O
worm	array
[	O
pos	int
]	O
.	O
origin	int
;	O
if	O
(	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
==	O
0	int
||	O
defense_move_known	function
(	O
move	pointer
,	O
str	int
)	O
)	O
continue	O
;	O
if	O
(	O
trymove	function
(	O
move	pointer
,	O
color	int
,	O
"defense_callback"	pointer
,	O
str	int
)	O
)	O
{	O
int	O
acode	int
=	O
attack	function
(	O
str	int
,	O
NULL	O
)	O
;	O
popgo	function
(	O
)	O
;	O
if	O
(	O
acode	int
<	O
worm	array
[	O
str	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
)	O
{	O
change_defense	function
(	O
str	int
,	O
move	pointer
,	O
REVERSE_RESULT	O
(	O
acode	int
)	O
)	O
;	O
DEBUG	O
(	O
DEBUG_WORMS	int
,	O
"Defense pattern %s+%d found defense of %1m at %1m with code %d\n"	pointer
,	O
pattern	pointer
->	O
name	short
,	O
ll	int
,	O
str	int
,	O
move	pointer
,	O
REVERSE_RESULT	O
(	O
acode	int
)	O
)	O
;	O
}	O
}	O
}	O
}	O
}	O
void	O
get_lively_stones	function
(	O
int	O
color	int
,	O
signed	O
char	O
safe_stones	array
[	O
BOARDMAX	O
]	O
)	O
{	O
int	O
pos	int
;	O
memset	function
(	O
safe_stones	array
,	O
0	int
,	O
BOARDMAX	O
*	O
sizeof	O
(	O
*	O
safe_stones	array
)	O
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
&&	O
find_origin	function
(	O
pos	int
)	O
==	O
pos	int
)	O
{	O
if	O
(	O
(	O
stackp	int
==	O
0	int
&&	O
worm	array
[	O
pos	int
]	O
.	O
attack_codes	array
[	O
0	int
]	O
==	O
0	int
)	O
||	O
!	O
attack	function
(	O
pos	int
,	O
NULL	O
)	O
||	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
color	int
&&	O
(	O
(	O
stackp	int
==	O
0	int
&&	O
worm	array
[	O
pos	int
]	O
.	O
defense_codes	array
[	O
0	int
]	O
!=	O
0	int
)	O
||	O
find_defense	function
(	O
pos	int
,	O
NULL	O
)	O
)	O
)	O
)	O
mark_string	function
(	O
pos	int
,	O
safe_stones	array
,	O
1	int
)	O
;	O
}	O
}	O
void	O
compute_worm_influence	function
(	O
)	O
{	O
signed	O
char	O
safe_stones	array
[	O
BOARDMAX	O
]	O
;	O
get_lively_stones	function
(	O
BLACK	int
,	O
safe_stones	array
)	O
;	O
compute_influence	function
(	O
BLACK	int
,	O
safe_stones	array
,	O
NULL	O
,	O
&	O
initial_black_influence	struct
,	O
NO_MOVE	O
,	O
"initial black influence"	pointer
)	O
;	O
get_lively_stones	function
(	O
WHITE	int
,	O
safe_stones	array
)	O
;	O
compute_influence	function
(	O
WHITE	int
,	O
safe_stones	array
,	O
NULL	O
,	O
&	O
initial_white_influence	struct
,	O
NO_MOVE	O
,	O
"initial white influence"	pointer
)	O
;	O
}	O
void	O
ascii_report_worm	function
(	O
char	O
*	O
string	int
)	O
{	O
int	O
pos	int
=	O
string_to_location	function
(	O
board_size	int
,	O
string	int
)	O
;	O
report_worm	function
(	O
pos	int
)	O
;	O
}	O
static	O
void	O
report_worm	function
(	O
int	O
pos	int
)	O
{	O
int	O
i	int
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
gprintf	function
(	O
"There is no worm at %1m\n"	pointer
,	O
pos	int
)	O
;	O
return	O
;	O
}	O
gprintf	function
(	O
"*** worm at %1m:\n"	pointer
,	O
pos	int
)	O
;	O
gprintf	function
(	O
"color: %s; origin: %1m; size: %d; effective size: %f\n"	pointer
,	O
(	O
worm	array
[	O
pos	int
]	O
.	O
color	int
==	O
WHITE	int
)	O
?	O
"White"	pointer
:	O
"Black"	pointer
,	O
worm	array
[	O
pos	int
]	O
.	O
origin	int
,	O
worm	array
[	O
pos	int
]	O
.	O
size	int
,	O
worm	array
[	O
pos	int
]	O
.	O
effective_size	float
)	O
;	O
gprintf	function
(	O
"liberties: %d order 2 liberties:%d order 3:%d order 4:%d\n"	pointer
,	O
worm	array
[	O
pos	int
]	O
.	O
liberties	pointer
,	O
worm	array
[	O
pos	int
]	O
.	O
liberties2	int
,	O
worm	array
[	O
pos	int
]	O
.	O
liberties3	int
,	O
worm	array
[	O
pos	int
]	O
.	O
liberties4	int
)	O
;	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_points	array
[	O
0	int
]	O
==	O
NO_MOVE	O
)	O
gprintf	function
(	O
"no attack point, "	pointer
)	O
;	O
else	O
{	O
gprintf	function
(	O
"attack point(s):"	pointer
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_points	array
[	O
i	int
]	O
!=	O
NO_MOVE	O
)	O
{	O
if	O
(	O
i	int
>	O
0	int
)	O
gprintf	function
(	O
","	pointer
)	O
;	O
gprintf	function
(	O
" %1m: %s"	pointer
,	O
worm	array
[	O
pos	int
]	O
.	O
attack_points	array
[	O
i	int
]	O
,	O
result_to_string	function
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_codes	array
[	O
i	int
]	O
)	O
)	O
;	O
i	int
++	O
;	O
}	O
gprintf	function
(	O
"\n;"	pointer
)	O
;	O
}	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_points	array
[	O
0	int
]	O
==	O
NO_MOVE	O
)	O
gprintf	function
(	O
"no defense point, "	pointer
)	O
;	O
else	O
{	O
gprintf	function
(	O
"defense point(s):"	pointer
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_points	array
[	O
i	int
]	O
!=	O
NO_MOVE	O
)	O
{	O
if	O
(	O
i	int
>	O
0	int
)	O
gprintf	function
(	O
","	pointer
)	O
;	O
gprintf	function
(	O
" %1m: %s"	pointer
,	O
worm	array
[	O
pos	int
]	O
.	O
defense_points	array
[	O
i	int
]	O
,	O
result_to_string	function
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_codes	array
[	O
i	int
]	O
)	O
)	O
;	O
i	int
++	O
;	O
}	O
gprintf	function
(	O
"\n;"	pointer
)	O
;	O
}	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_threat_points	array
[	O
0	int
]	O
==	O
NO_MOVE	O
)	O
gprintf	function
(	O
"no attack threat point, "	pointer
)	O
;	O
else	O
{	O
gprintf	function
(	O
"attack threat point(s):"	pointer
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_threat_points	array
[	O
i	int
]	O
!=	O
NO_MOVE	O
)	O
{	O
if	O
(	O
i	int
>	O
0	int
)	O
gprintf	function
(	O
","	pointer
)	O
;	O
gprintf	function
(	O
" %1m: %s"	pointer
,	O
worm	array
[	O
pos	int
]	O
.	O
attack_threat_points	array
[	O
i	int
]	O
,	O
result_to_string	function
(	O
worm	array
[	O
pos	int
]	O
.	O
attack_threat_codes	array
[	O
i	int
]	O
)	O
)	O
;	O
i	int
++	O
;	O
}	O
gprintf	function
(	O
"\n;"	pointer
)	O
;	O
}	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_threat_points	array
[	O
0	int
]	O
==	O
NO_MOVE	O
)	O
gprintf	function
(	O
"no defense threat point, "	pointer
)	O
;	O
else	O
{	O
gprintf	function
(	O
"defense threat point(s):"	pointer
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_threat_points	array
[	O
i	int
]	O
!=	O
NO_MOVE	O
)	O
{	O
if	O
(	O
i	int
>	O
0	int
)	O
gprintf	function
(	O
","	pointer
)	O
;	O
gprintf	function
(	O
" %1m: %s"	pointer
,	O
worm	array
[	O
pos	int
]	O
.	O
defense_threat_points	array
[	O
i	int
]	O
,	O
result_to_string	function
(	O
worm	array
[	O
pos	int
]	O
.	O
defense_threat_codes	array
[	O
i	int
]	O
)	O
)	O
;	O
i	int
++	O
;	O
}	O
gprintf	function
(	O
"\n;"	pointer
)	O
;	O
}	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
lunch	int
!=	O
NO_MOVE	O
)	O
gprintf	function
(	O
"lunch at %1m\n"	pointer
,	O
worm	array
[	O
pos	int
]	O
.	O
lunch	int
)	O
;	O
gprintf	function
(	O
"cutstone: %d, cutstone2: %d\n"	pointer
,	O
worm	array
[	O
pos	int
]	O
.	O
cutstone	int
,	O
worm	array
[	O
pos	int
]	O
.	O
cutstone2	int
)	O
;	O
gprintf	function
(	O
"genus: %d, "	pointer
,	O
worm	array
[	O
pos	int
]	O
.	O
genus	pointer
)	O
;	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
inessential	int
)	O
gprintf	function
(	O
"inessential: YES, "	pointer
)	O
;	O
else	O
gprintf	function
(	O
"inessential: NO, "	pointer
)	O
;	O
if	O
(	O
worm	array
[	O
pos	int
]	O
.	O
invincible	int
)	O
gprintf	function
(	O
"invincible: YES, \n"	pointer
)	O
;	O
else	O
gprintf	function
(	O
"invincible: NO, \n"	pointer
)	O
;	O
gprintf	function
(	O
"unconditional status %s\n"	pointer
,	O
status_to_string	function
(	O
worm	array
[	O
pos	int
]	O
.	O
unconditional_status	enum
)	O
)	O
;	O
}	O
