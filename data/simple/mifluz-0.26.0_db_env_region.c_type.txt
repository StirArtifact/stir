static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: env_region.c,v 1.3 2000/06/28 16:47:01 loic Exp $"	pointer
;	O
static	O
int	O
__db_des_destroy	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
REGION	struct
*	O
)	O
)	O
;	O
static	O
int	O
__db_des_get	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
REGINFO	struct
*	O
,	O
REGINFO	struct
*	O
,	O
REGION	struct
*	O
*	O
)	O
)	O
;	O
static	O
int	O
__db_e_remfile	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
)	O
)	O
;	O
static	O
int	O
__db_faultmem	function
__P	O
(	O
(	O
void	O
*	O
,	O
size_t	long
,	O
int	O
)	O
)	O
;	O
int	O
CDB___db_e_attach	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
REGENV	struct
*	O
renv	pointer
;	O
REGENV_REF	struct
ref	struct
;	O
REGINFO	struct
*	O
infop	pointer
;	O
REGION	struct
*	O
rp	pointer
,	O
tregion	struct
;	O
size_t	long
size	int
;	O
size_t	long
nrw	long
;	O
u_int32_t	int
mbytes	int
,	O
bytes	long
;	O
int	O
retry_cnt	int
,	O
ret	int
,	O
segid	long
;	O
char	O
buf	pointer
[	O
sizeof	O
(	O
DB_REGION_FMT	pointer
)	O
+	O
20	int
]	O
;	O
retry_cnt	int
=	O
0	int
;	O
loop	O
:	O
renv	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_calloc	function
(	O
dbenv	pointer
,	O
1	int
,	O
sizeof	O
(	O
REGINFO	struct
)	O
,	O
&	O
infop	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
infop	pointer
->	O
id	int
=	O
REG_ID_ENV	int
;	O
infop	pointer
->	O
mode	enum
=	O
dbenv	pointer
->	O
db_mode	int
;	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_CREATE	int
)	O
)	O
F_SET	O
(	O
infop	pointer
,	O
REGION_CREATE_OK	int
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_PRIVATE	int
)	O
)	O
goto	O
creation	O
;	O
(	O
void	O
)	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"%s"	pointer
,	O
DB_REGION_ENV	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_appname	function
(	O
dbenv	pointer
,	O
DB_APP_NONE	int
,	O
NULL	O
,	O
buf	pointer
,	O
0	int
,	O
NULL	O
,	O
&	O
infop	pointer
->	O
name	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_CREATE	int
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_open	function
(	O
dbenv	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
DB_OSO_CREATE	int
|	O
DB_OSO_EXCL	int
,	O
dbenv	pointer
->	O
db_mode	int
,	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
)	O
==	O
0	int
)	O
goto	O
creation	O
;	O
if	O
(	O
ret	int
!=	O
EEXIST	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: %s"	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
goto	O
err	pointer
;	O
}	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_open	function
(	O
dbenv	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
0	int
,	O
dbenv	pointer
->	O
db_mode	int
,	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_ioinfo	function
(	O
dbenv	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
dbenv	pointer
->	O
lockfhp	pointer
,	O
&	O
mbytes	int
,	O
&	O
bytes	long
,	O
NULL	O
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: %s"	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
goto	O
err	pointer
;	O
}	O
size	int
=	O
mbytes	int
*	O
MEGABYTE	int
+	O
bytes	long
;	O
if	O
(	O
size	int
<=	O
sizeof	O
(	O
ref	struct
)	O
)	O
{	O
if	O
(	O
size	int
!=	O
sizeof	O
(	O
ref	struct
)	O
)	O
goto	O
retry	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_read	function
(	O
dbenv	pointer
,	O
dbenv	pointer
->	O
lockfhp	pointer
,	O
&	O
ref	struct
,	O
sizeof	O
(	O
ref	struct
)	O
,	O
&	O
nrw	long
)	O
)	O
!=	O
0	int
||	O
nrw	long
<	O
(	O
size_t	long
)	O
sizeof	O
(	O
ref	struct
)	O
)	O
{	O
if	O
(	O
ret	int
==	O
0	int
)	O
ret	int
=	O
EIO	int
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: unable to read system-memory information from: %s"	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
goto	O
err	pointer
;	O
}	O
size	int
=	O
ref	struct
.	O
size	int
;	O
segid	long
=	O
ref	struct
.	O
segid	long
;	O
F_SET	O
(	O
dbenv	pointer
,	O
DB_ENV_SYSTEM_MEM	int
)	O
;	O
}	O
else	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_SYSTEM_MEM	int
)	O
)	O
{	O
ret	int
=	O
EINVAL	int
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: existing environment not created in system memory: %s"	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
goto	O
err	pointer
;	O
}	O
else	O
segid	long
=	O
INVALID_REGION_SEGID	O
;	O
CDB___os_closehandle	function
(	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
memset	function
(	O
&	O
tregion	struct
,	O
0	int
,	O
sizeof	O
(	O
tregion	struct
)	O
)	O
;	O
tregion	struct
.	O
size	int
=	O
size	int
;	O
tregion	struct
.	O
segid	long
=	O
segid	long
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_r_attach	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
&	O
tregion	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
infop	pointer
->	O
primary	int
=	O
R_ADDR	O
(	O
infop	pointer
,	O
0	int
)	O
;	O
infop	pointer
->	O
addr	pointer
=	O
(	O
u_int8_t	char
*	O
)	O
infop	pointer
->	O
addr	pointer
+	O
sizeof	O
(	O
REGENV	struct
)	O
;	O
renv	pointer
=	O
infop	pointer
->	O
primary	int
;	O
if	O
(	O
renv	pointer
->	O
panic	int
)	O
{	O
ret	int
=	O
CDB___db_panic_msg	function
(	O
dbenv	pointer
)	O
;	O
goto	O
err	pointer
;	O
}	O
if	O
(	O
renv	pointer
->	O
magic	int
!=	O
DB_REGION_MAGIC	int
)	O
goto	O
retry	O
;	O
MUTEX_LOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
,	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
if	O
(	O
renv	pointer
->	O
panic	int
)	O
{	O
ret	int
=	O
CDB___db_panic_msg	function
(	O
dbenv	pointer
)	O
;	O
goto	O
err_unlock	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
__db_des_get	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
infop	pointer
,	O
&	O
rp	pointer
)	O
)	O
!=	O
0	int
||	O
rp	pointer
==	O
NULL	O
)	O
{	O
MUTEX_UNLOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
)	O
;	O
goto	O
find_err	O
;	O
}	O
infop	pointer
->	O
rp	pointer
=	O
rp	pointer
;	O
if	O
(	O
rp	pointer
->	O
size	int
!=	O
size	int
)	O
{	O
err_unlock	O
:	O
MUTEX_UNLOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
)	O
;	O
goto	O
retry	O
;	O
}	O
++	O
renv	pointer
->	O
refcnt	int
;	O
MUTEX_UNLOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
)	O
;	O
(	O
void	O
)	O
__db_faultmem	function
(	O
infop	pointer
->	O
primary	int
,	O
rp	pointer
->	O
size	int
,	O
0	int
)	O
;	O
dbenv	pointer
->	O
reginfo	pointer
=	O
infop	pointer
;	O
return	O
(	O
0	int
)	O
;	O
creation	O
:	O
F_SET	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
;	O
memset	function
(	O
&	O
tregion	struct
,	O
0	int
,	O
sizeof	O
(	O
tregion	struct
)	O
)	O
;	O
tregion	struct
.	O
size	int
=	O
50	int
*	O
sizeof	O
(	O
REGION	struct
)	O
+	O
50	int
*	O
sizeof	O
(	O
MUTEX	struct
)	O
+	O
2048	int
;	O
tregion	struct
.	O
segid	long
=	O
INVALID_REGION_SEGID	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_r_attach	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
&	O
tregion	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
(	O
void	O
)	O
__db_faultmem	function
(	O
infop	pointer
->	O
addr	pointer
,	O
tregion	struct
.	O
size	int
,	O
1	int
)	O
;	O
infop	pointer
->	O
primary	int
=	O
R_ADDR	O
(	O
infop	pointer
,	O
0	int
)	O
;	O
infop	pointer
->	O
addr	pointer
=	O
(	O
u_int8_t	char
*	O
)	O
infop	pointer
->	O
addr	pointer
+	O
sizeof	O
(	O
REGENV	struct
)	O
;	O
CDB___db_shalloc_init	function
(	O
infop	pointer
->	O
addr	pointer
,	O
tregion	struct
.	O
size	int
-	O
sizeof	O
(	O
REGENV	struct
)	O
)	O
;	O
renv	pointer
=	O
infop	pointer
->	O
primary	int
;	O
renv	pointer
->	O
panic	int
=	O
0	int
;	O
CDB_db_version	function
(	O
&	O
renv	pointer
->	O
majver	int
,	O
&	O
renv	pointer
->	O
minver	int
,	O
&	O
renv	pointer
->	O
patch	int
)	O
;	O
SH_LIST_INIT	O
(	O
&	O
renv	pointer
->	O
regionq	struct
)	O
;	O
renv	pointer
->	O
refcnt	int
=	O
1	int
;	O
if	O
(	O
(	O
ret	int
=	O
__db_mutex_init	O
(	O
dbenv	pointer
,	O
&	O
renv	pointer
->	O
mutex	union
,	O
DB_FCNTL_OFF_GEN	O
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: unable to initialize environment lock: %s"	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
goto	O
err	pointer
;	O
}	O
if	O
(	O
!	O
F_ISSET	O
(	O
&	O
renv	pointer
->	O
mutex	union
,	O
MUTEX_IGNORE	int
)	O
&&	O
(	O
ret	int
=	O
__db_mutex_lock	O
(	O
&	O
renv	pointer
->	O
mutex	union
,	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: unable to acquire environment lock: %s"	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
goto	O
err	pointer
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
__db_des_get	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
infop	pointer
,	O
&	O
rp	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
find_err	O
:	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: unable to find environment"	pointer
,	O
infop	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
ret	int
=	O
EINVAL	int
;	O
goto	O
err	pointer
;	O
}	O
infop	pointer
->	O
rp	pointer
=	O
rp	pointer
;	O
rp	pointer
->	O
size	int
=	O
tregion	struct
.	O
size	int
;	O
rp	pointer
->	O
segid	long
=	O
tregion	struct
.	O
segid	long
;	O
if	O
(	O
tregion	struct
.	O
segid	long
!=	O
INVALID_REGION_SEGID	O
)	O
{	O
ref	struct
.	O
size	int
=	O
tregion	struct
.	O
size	int
;	O
ref	struct
.	O
segid	long
=	O
tregion	struct
.	O
segid	long
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_write	function
(	O
dbenv	pointer
,	O
dbenv	pointer
->	O
lockfhp	pointer
,	O
&	O
ref	struct
,	O
sizeof	O
(	O
ref	struct
)	O
,	O
&	O
nrw	long
)	O
)	O
!=	O
0	int
||	O
nrw	long
!=	O
sizeof	O
(	O
ref	struct
)	O
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: unable to write out public environment ID: %s"	pointer
,	O
infop	pointer
->	O
name	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
goto	O
err	pointer
;	O
}	O
}	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
->	O
lockfhp	pointer
,	O
DB_FH_VALID	int
)	O
)	O
CDB___os_closehandle	function
(	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
renv	pointer
->	O
magic	int
=	O
DB_REGION_MAGIC	int
;	O
MUTEX_UNLOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
)	O
;	O
dbenv	pointer
->	O
reginfo	pointer
=	O
infop	pointer
;	O
return	O
(	O
0	int
)	O
;	O
err	pointer
:	O
retry	O
:	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
->	O
lockfhp	pointer
,	O
DB_FH_VALID	int
)	O
)	O
(	O
void	O
)	O
CDB___os_closehandle	function
(	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
if	O
(	O
infop	pointer
->	O
addr	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
infop	pointer
->	O
rp	pointer
==	O
NULL	O
)	O
infop	pointer
->	O
rp	pointer
=	O
&	O
tregion	struct
;	O
infop	pointer
->	O
addr	pointer
=	O
infop	pointer
->	O
primary	int
;	O
(	O
void	O
)	O
CDB___os_r_detach	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
F_ISSET	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
)	O
;	O
}	O
if	O
(	O
infop	pointer
->	O
name	pointer
!=	O
NULL	O
)	O
CDB___os_freestr	function
(	O
infop	pointer
->	O
name	pointer
)	O
;	O
CDB___os_free	function
(	O
infop	pointer
,	O
sizeof	O
(	O
REGINFO	struct
)	O
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
if	O
(	O
++	O
retry_cnt	int
>	O
3	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"unable to join the environment"	pointer
)	O
;	O
ret	int
=	O
EAGAIN	int
;	O
}	O
else	O
{	O
CDB___os_sleep	function
(	O
dbenv	pointer
,	O
retry_cnt	int
*	O
3	int
,	O
0	int
)	O
;	O
goto	O
loop	O
;	O
}	O
}	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_e_detach	function
(	O
dbenv	pointer
,	O
destroy	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int	O
destroy	int
;	O
{	O
REGENV	struct
*	O
renv	pointer
;	O
REGINFO	struct
*	O
infop	pointer
;	O
infop	pointer
=	O
dbenv	pointer
->	O
reginfo	pointer
;	O
renv	pointer
=	O
infop	pointer
->	O
primary	int
;	O
MUTEX_LOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
,	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
if	O
(	O
renv	pointer
->	O
refcnt	int
==	O
0	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"region %lu (environment): reference count went negative"	pointer
,	O
infop	pointer
->	O
rp	pointer
->	O
id	int
)	O
;	O
}	O
else	O
--	O
renv	pointer
->	O
refcnt	int
;	O
MUTEX_UNLOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
dbenv	pointer
->	O
lockfhp	pointer
,	O
DB_FH_VALID	int
)	O
)	O
(	O
void	O
)	O
CDB___os_closehandle	function
(	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
infop	pointer
->	O
addr	pointer
=	O
infop	pointer
->	O
primary	int
;	O
(	O
void	O
)	O
CDB___os_r_detach	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
destroy	int
)	O
;	O
if	O
(	O
infop	pointer
->	O
name	pointer
!=	O
NULL	O
)	O
CDB___os_free	function
(	O
infop	pointer
->	O
name	pointer
,	O
0	int
)	O
;	O
CDB___os_free	function
(	O
dbenv	pointer
->	O
reginfo	pointer
,	O
sizeof	O
(	O
REGINFO	struct
)	O
)	O
;	O
dbenv	pointer
->	O
reginfo	pointer
=	O
NULL	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_e_remove	function
(	O
dbenv	pointer
,	O
force	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int	O
force	int
;	O
{	O
REGENV	struct
*	O
renv	pointer
;	O
REGINFO	struct
*	O
infop	pointer
,	O
reginfo	pointer
;	O
REGION	struct
*	O
rp	pointer
;	O
int	O
ret	int
,	O
saved_value	int
;	O
saved_value	int
=	O
DB_GLOBAL	O
(	O
db_mutexlocks	int
)	O
;	O
if	O
(	O
force	int
)	O
DB_GLOBAL	O
(	O
db_mutexlocks	int
)	O
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_e_attach	function
(	O
dbenv	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
ret	int
=	O
0	int
;	O
if	O
(	O
force	int
)	O
goto	O
remfiles	O
;	O
goto	O
err	pointer
;	O
}	O
infop	pointer
=	O
dbenv	pointer
->	O
reginfo	pointer
;	O
renv	pointer
=	O
infop	pointer
->	O
primary	int
;	O
MUTEX_LOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
,	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
if	O
(	O
renv	pointer
->	O
refcnt	int
==	O
1	int
||	O
force	int
)	O
{	O
renv	pointer
->	O
panic	int
=	O
1	int
;	O
renv	pointer
->	O
magic	int
=	O
0	int
;	O
MUTEX_UNLOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
)	O
;	O
memset	function
(	O
&	O
reginfo	pointer
,	O
0	int
,	O
sizeof	O
(	O
reginfo	pointer
)	O
)	O
;	O
restart	O
:	O
for	O
(	O
rp	pointer
=	O
SH_LIST_FIRST	O
(	O
&	O
renv	pointer
->	O
regionq	struct
,	O
__db_region	struct
)	O
;	O
rp	pointer
!=	O
NULL	O
;	O
rp	pointer
=	O
SH_LIST_NEXT	O
(	O
rp	pointer
,	O
q	struct
,	O
__db_region	struct
)	O
)	O
{	O
if	O
(	O
rp	pointer
->	O
id	int
==	O
REG_ID_ENV	int
)	O
continue	O
;	O
reginfo	pointer
.	O
id	int
=	O
rp	pointer
->	O
id	int
;	O
reginfo	pointer
.	O
flags	int
=	O
REGION_CREATE_OK	int
;	O
if	O
(	O
CDB___db_r_attach	function
(	O
dbenv	pointer
,	O
&	O
reginfo	pointer
,	O
0	int
)	O
==	O
0	int
)	O
{	O
R_UNLOCK	O
(	O
dbenv	pointer
,	O
&	O
reginfo	pointer
)	O
;	O
(	O
void	O
)	O
CDB___db_r_detach	function
(	O
dbenv	pointer
,	O
&	O
reginfo	pointer
,	O
1	int
)	O
;	O
}	O
goto	O
restart	O
;	O
}	O
(	O
void	O
)	O
CDB___db_e_detach	function
(	O
dbenv	pointer
,	O
1	int
)	O
;	O
remfiles	O
:	O
(	O
void	O
)	O
__db_e_remfile	function
(	O
dbenv	pointer
)	O
;	O
}	O
else	O
{	O
MUTEX_UNLOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
)	O
;	O
(	O
void	O
)	O
CDB___db_e_detach	function
(	O
dbenv	pointer
,	O
0	int
)	O
;	O
ret	int
=	O
EBUSY	int
;	O
}	O
err	pointer
:	O
if	O
(	O
force	int
)	O
DB_GLOBAL	O
(	O
db_mutexlocks	int
)	O
=	O
saved_value	int
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
__db_e_remfile	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
static	O
char	O
*	O
old_region_names	array
[	O
]	O
=	O
{	O
"__db_lock.share"	pointer
,	O
"__db_log.share"	pointer
,	O
"__db_mpool.share"	pointer
,	O
"__db_txn.share"	pointer
,	O
NULL	O
,	O
}	O
;	O
int	O
cnt	int
,	O
fcnt	int
,	O
lastrm	int
,	O
ret	int
;	O
u_int8_t	char
saved_byte	char
;	O
const	O
char	O
*	O
dir	pointer
;	O
char	O
*	O
p	pointer
,	O
*	O
*	O
names	pointer
,	O
*	O
path	pointer
,	O
buf	pointer
[	O
sizeof	O
(	O
DB_REGION_FMT	pointer
)	O
+	O
20	int
]	O
;	O
(	O
void	O
)	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"%s"	pointer
,	O
DB_REGION_ENV	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_appname	function
(	O
dbenv	pointer
,	O
DB_APP_NONE	int
,	O
NULL	O
,	O
buf	pointer
,	O
0	int
,	O
NULL	O
,	O
&	O
path	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
CDB___db_rpath	function
(	O
path	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
p	pointer
=	O
path	pointer
;	O
saved_byte	char
=	O
*	O
p	pointer
;	O
dir	pointer
=	O
PATH_DOT	pointer
;	O
}	O
else	O
{	O
saved_byte	char
=	O
*	O
p	pointer
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
dir	pointer
=	O
path	pointer
;	O
}	O
ret	int
=	O
CDB___os_dirlist	function
(	O
dbenv	pointer
,	O
dir	pointer
,	O
&	O
names	pointer
,	O
&	O
fcnt	int
)	O
;	O
*	O
p	pointer
=	O
saved_byte	char
;	O
CDB___os_freestr	function
(	O
path	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: %s"	pointer
,	O
dir	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
for	O
(	O
lastrm	int
=	O
-	O
1	int
,	O
cnt	int
=	O
fcnt	int
;	O
--	O
cnt	int
>=	O
0	int
;	O
)	O
{	O
if	O
(	O
strlen	function
(	O
names	pointer
[	O
cnt	int
]	O
)	O
!=	O
DB_REGION_NAME_LENGTH	int
||	O
memcmp	function
(	O
names	pointer
[	O
cnt	int
]	O
,	O
DB_REGION_FMT	pointer
,	O
DB_REGION_NAME_NUM	int
)	O
!=	O
0	int
)	O
continue	O
;	O
if	O
(	O
strcmp	function
(	O
names	pointer
[	O
cnt	int
]	O
,	O
DB_REGION_ENV	pointer
)	O
==	O
0	int
)	O
{	O
lastrm	int
=	O
cnt	int
;	O
continue	O
;	O
}	O
for	O
(	O
p	pointer
=	O
names	pointer
[	O
cnt	int
]	O
+	O
DB_REGION_NAME_NUM	int
;	O
*	O
p	pointer
!=	O
'\0'	O
&&	O
isdigit	function
(	O
(	O
int	O
)	O
*	O
p	pointer
)	O
;	O
++	O
p	pointer
)	O
;	O
if	O
(	O
*	O
p	pointer
!=	O
'\0'	O
)	O
continue	O
;	O
if	O
(	O
CDB___db_appname	function
(	O
dbenv	pointer
,	O
DB_APP_NONE	int
,	O
NULL	O
,	O
names	pointer
[	O
cnt	int
]	O
,	O
0	int
,	O
NULL	O
,	O
&	O
path	pointer
)	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___os_unlink	function
(	O
dbenv	pointer
,	O
path	pointer
)	O
;	O
CDB___os_freestr	function
(	O
path	pointer
)	O
;	O
}	O
}	O
if	O
(	O
lastrm	int
!=	O
-	O
1	int
)	O
if	O
(	O
CDB___db_appname	function
(	O
dbenv	pointer
,	O
DB_APP_NONE	int
,	O
NULL	O
,	O
names	pointer
[	O
lastrm	int
]	O
,	O
0	int
,	O
NULL	O
,	O
&	O
path	pointer
)	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___os_unlink	function
(	O
dbenv	pointer
,	O
path	pointer
)	O
;	O
CDB___os_freestr	function
(	O
path	pointer
)	O
;	O
}	O
CDB___os_dirfree	function
(	O
names	pointer
,	O
fcnt	int
)	O
;	O
for	O
(	O
names	pointer
=	O
(	O
char	O
*	O
*	O
)	O
old_region_names	array
;	O
*	O
names	pointer
!=	O
NULL	O
;	O
++	O
names	pointer
)	O
if	O
(	O
CDB___db_appname	function
(	O
dbenv	pointer
,	O
DB_APP_NONE	int
,	O
NULL	O
,	O
*	O
names	pointer
,	O
0	int
,	O
NULL	O
,	O
&	O
path	pointer
)	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___os_unlink	function
(	O
dbenv	pointer
,	O
path	pointer
)	O
;	O
CDB___os_freestr	function
(	O
path	pointer
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_e_stat	function
(	O
dbenv	pointer
,	O
arg_renv	pointer
,	O
arg_regions	pointer
,	O
arg_regions_cnt	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
REGENV	struct
*	O
arg_renv	pointer
;	O
REGION	struct
*	O
arg_regions	pointer
;	O
int	O
*	O
arg_regions_cnt	pointer
;	O
{	O
REGENV	struct
*	O
renv	pointer
;	O
REGINFO	struct
*	O
infop	pointer
;	O
REGION	struct
*	O
rp	pointer
;	O
int	O
n	int
;	O
infop	pointer
=	O
dbenv	pointer
->	O
reginfo	pointer
;	O
renv	pointer
=	O
infop	pointer
->	O
primary	int
;	O
rp	pointer
=	O
infop	pointer
->	O
rp	pointer
;	O
MUTEX_LOCK	O
(	O
&	O
rp	pointer
->	O
mutex	union
,	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
*	O
arg_renv	pointer
=	O
*	O
renv	pointer
;	O
for	O
(	O
n	int
=	O
0	int
,	O
rp	pointer
=	O
SH_LIST_FIRST	O
(	O
&	O
renv	pointer
->	O
regionq	struct
,	O
__db_region	struct
)	O
;	O
n	int
<	O
*	O
arg_regions_cnt	pointer
&&	O
rp	pointer
!=	O
NULL	O
;	O
++	O
n	int
,	O
rp	pointer
=	O
SH_LIST_NEXT	O
(	O
rp	pointer
,	O
q	struct
,	O
__db_region	struct
)	O
)	O
arg_regions	pointer
[	O
n	int
]	O
=	O
*	O
rp	pointer
;	O
rp	pointer
=	O
infop	pointer
->	O
rp	pointer
;	O
MUTEX_UNLOCK	O
(	O
&	O
rp	pointer
->	O
mutex	union
)	O
;	O
*	O
arg_regions_cnt	pointer
=	O
n	int
==	O
0	int
?	O
n	int
:	O
n	int
-	O
1	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___db_r_attach	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
size	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
REGINFO	struct
*	O
infop	pointer
;	O
size_t	long
size	int
;	O
{	O
REGENV	struct
*	O
renv	pointer
;	O
REGION	struct
*	O
rp	pointer
;	O
int	O
ret	int
;	O
char	O
buf	pointer
[	O
sizeof	O
(	O
DB_REGION_FMT	pointer
)	O
+	O
20	int
]	O
;	O
renv	pointer
=	O
(	O
(	O
REGINFO	struct
*	O
)	O
dbenv	pointer
->	O
reginfo	pointer
)	O
->	O
primary	int
;	O
F_CLR	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
;	O
MUTEX_LOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
,	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__db_des_get	function
(	O
dbenv	pointer
,	O
dbenv	pointer
->	O
reginfo	pointer
,	O
infop	pointer
,	O
&	O
rp	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
MUTEX_UNLOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
infop	pointer
->	O
rp	pointer
=	O
rp	pointer
;	O
infop	pointer
->	O
id	int
=	O
rp	pointer
->	O
id	int
;	O
if	O
(	O
F_ISSET	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
)	O
rp	pointer
->	O
size	int
=	O
size	int
;	O
(	O
void	O
)	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
DB_REGION_FMT	pointer
,	O
infop	pointer
->	O
id	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_appname	function
(	O
dbenv	pointer
,	O
DB_APP_NONE	int
,	O
NULL	O
,	O
buf	pointer
,	O
0	int
,	O
NULL	O
,	O
&	O
infop	pointer
->	O
name	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_r_attach	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
rp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
(	O
void	O
)	O
__db_faultmem	function
(	O
infop	pointer
->	O
addr	pointer
,	O
rp	pointer
->	O
size	int
,	O
F_ISSET	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
)	O
;	O
if	O
(	O
F_ISSET	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
)	O
{	O
(	O
(	O
REGION	struct
*	O
)	O
(	O
infop	pointer
->	O
addr	pointer
)	O
)	O
->	O
magic	int
=	O
DB_REGION_MAGIC	int
;	O
(	O
void	O
)	O
CDB___db_shalloc_init	function
(	O
infop	pointer
->	O
addr	pointer
,	O
rp	pointer
->	O
size	int
)	O
;	O
}	O
if	O
(	O
infop	pointer
->	O
id	int
!=	O
REG_ID_ENV	int
)	O
{	O
MUTEX_LOCK	O
(	O
&	O
rp	pointer
->	O
mutex	union
,	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
MUTEX_UNLOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
err	pointer
:	O
if	O
(	O
infop	pointer
->	O
addr	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
CDB___os_r_detach	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
F_ISSET	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
)	O
;	O
infop	pointer
->	O
rp	pointer
=	O
NULL	O
;	O
infop	pointer
->	O
id	int
=	O
REG_ID_INVALID	int
;	O
if	O
(	O
F_ISSET	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
)	O
(	O
void	O
)	O
__db_des_destroy	function
(	O
dbenv	pointer
,	O
rp	pointer
)	O
;	O
MUTEX_UNLOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___db_r_detach	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
destroy	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
REGINFO	struct
*	O
infop	pointer
;	O
int	O
destroy	int
;	O
{	O
REGENV	struct
*	O
renv	pointer
;	O
REGION	struct
*	O
rp	pointer
;	O
int	O
ret	int
,	O
t_ret	int
;	O
renv	pointer
=	O
(	O
(	O
REGINFO	struct
*	O
)	O
dbenv	pointer
->	O
reginfo	pointer
)	O
->	O
primary	int
;	O
rp	pointer
=	O
infop	pointer
->	O
rp	pointer
;	O
MUTEX_LOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
,	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
MUTEX_LOCK	O
(	O
&	O
rp	pointer
->	O
mutex	union
,	O
dbenv	pointer
->	O
lockfhp	pointer
)	O
;	O
ret	int
=	O
CDB___os_r_detach	function
(	O
dbenv	pointer
,	O
infop	pointer
,	O
destroy	int
)	O
;	O
MUTEX_UNLOCK	O
(	O
&	O
rp	pointer
->	O
mutex	union
)	O
;	O
if	O
(	O
destroy	int
&&	O
(	O
(	O
t_ret	int
=	O
__db_des_destroy	function
(	O
dbenv	pointer
,	O
rp	pointer
)	O
)	O
!=	O
0	int
)	O
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
MUTEX_UNLOCK	O
(	O
&	O
renv	pointer
->	O
mutex	union
)	O
;	O
if	O
(	O
infop	pointer
->	O
name	pointer
!=	O
NULL	O
)	O
CDB___os_freestr	function
(	O
infop	pointer
->	O
name	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
__db_des_get	function
(	O
dbenv	pointer
,	O
env_infop	pointer
,	O
infop	pointer
,	O
rpp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
REGINFO	struct
*	O
env_infop	pointer
,	O
*	O
infop	pointer
;	O
REGION	struct
*	O
*	O
rpp	pointer
;	O
{	O
REGENV	struct
*	O
renv	pointer
;	O
REGION	struct
*	O
rp	pointer
;	O
int	O
maxid	int
,	O
ret	int
;	O
*	O
rpp	pointer
=	O
NULL	O
;	O
renv	pointer
=	O
env_infop	pointer
->	O
primary	int
;	O
maxid	int
=	O
REG_ID_ASSIGN	O
;	O
for	O
(	O
rp	pointer
=	O
SH_LIST_FIRST	O
(	O
&	O
renv	pointer
->	O
regionq	struct
,	O
__db_region	struct
)	O
;	O
rp	pointer
!=	O
NULL	O
;	O
rp	pointer
=	O
SH_LIST_NEXT	O
(	O
rp	pointer
,	O
q	struct
,	O
__db_region	struct
)	O
)	O
{	O
if	O
(	O
rp	pointer
->	O
id	int
==	O
infop	pointer
->	O
id	int
)	O
break	O
;	O
if	O
(	O
rp	pointer
->	O
id	int
>	O
maxid	int
)	O
maxid	int
=	O
rp	pointer
->	O
id	int
;	O
}	O
if	O
(	O
!	O
F_ISSET	O
(	O
infop	pointer
,	O
REGION_CREATE_OK	int
)	O
&&	O
(	O
rp	pointer
==	O
NULL	O
||	O
F_ISSET	O
(	O
rp	pointer
,	O
REG_DEAD	int
)	O
)	O
)	O
return	O
(	O
ENOENT	int
)	O
;	O
if	O
(	O
rp	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_shalloc	function
(	O
env_infop	pointer
->	O
addr	pointer
,	O
sizeof	O
(	O
REGION	struct
)	O
,	O
MUTEX_ALIGN	int
,	O
&	O
rp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
memset	function
(	O
rp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
rp	pointer
)	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__db_mutex_init	O
(	O
dbenv	pointer
,	O
&	O
rp	pointer
->	O
mutex	union
,	O
R_OFFSET	O
(	O
env_infop	pointer
,	O
&	O
rp	pointer
->	O
mutex	union
)	O
+	O
DB_FCNTL_OFF_GEN	O
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___db_shalloc_free	function
(	O
env_infop	pointer
->	O
addr	pointer
,	O
rp	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
rp	pointer
->	O
segid	long
=	O
INVALID_REGION_SEGID	O
;	O
rp	pointer
->	O
id	int
=	O
infop	pointer
->	O
id	int
==	O
REG_ID_INVALID	int
?	O
maxid	int
+	O
1	int
:	O
infop	pointer
->	O
id	int
;	O
SH_LIST_INSERT_HEAD	O
(	O
&	O
renv	pointer
->	O
regionq	struct
,	O
rp	pointer
,	O
q	struct
,	O
__db_region	struct
)	O
;	O
F_SET	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
F_ISSET	O
(	O
rp	pointer
,	O
REG_DEAD	int
)	O
)	O
{	O
rp	pointer
->	O
primary	int
=	O
INVALID_ROFF	int
;	O
F_CLR	O
(	O
rp	pointer
,	O
REG_DEAD	int
)	O
;	O
F_SET	O
(	O
infop	pointer
,	O
REGION_CREATE	int
)	O
;	O
}	O
}	O
*	O
rpp	pointer
=	O
rp	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__db_des_destroy	function
(	O
dbenv	pointer
,	O
rp	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
REGION	struct
*	O
rp	pointer
;	O
{	O
REGINFO	struct
*	O
infop	pointer
;	O
infop	pointer
=	O
dbenv	pointer
->	O
reginfo	pointer
;	O
SH_LIST_REMOVE	O
(	O
rp	pointer
,	O
q	struct
,	O
__db_region	struct
)	O
;	O
CDB___db_shalloc_free	function
(	O
infop	pointer
->	O
addr	pointer
,	O
rp	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__db_faultmem	function
(	O
addr	pointer
,	O
size	int
,	O
created	int
)	O
void	O
*	O
addr	pointer
;	O
size_t	long
size	int
;	O
int	O
created	int
;	O
{	O
int	O
ret	int
;	O
u_int8_t	char
*	O
p	pointer
,	O
*	O
t	pointer
;	O
ret	int
=	O
0	int
;	O
if	O
(	O
DB_GLOBAL	O
(	O
db_region_init	int
)	O
)	O
{	O
if	O
(	O
created	int
)	O
for	O
(	O
p	pointer
=	O
addr	pointer
,	O
t	pointer
=	O
(	O
u_int8_t	char
*	O
)	O
addr	pointer
+	O
size	int
;	O
p	pointer
<	O
t	pointer
;	O
p	pointer
+=	O
OS_VMPAGESIZE	O
)	O
p	pointer
[	O
0	int
]	O
=	O
0xdb	int
;	O
else	O
for	O
(	O
p	pointer
=	O
addr	pointer
,	O
t	pointer
=	O
(	O
u_int8_t	char
*	O
)	O
addr	pointer
+	O
size	int
;	O
p	pointer
<	O
t	pointer
;	O
p	pointer
+=	O
OS_VMPAGESIZE	O
)	O
ret	int
|=	O
p	pointer
[	O
0	int
]	O
;	O
}	O
return	O
(	O
ret	int
)	O
;	O
}	O
