typedef	O
enum	O
{	O
BASH	int
,	O
TCSH	int
}	O
shell_t	enum
;	O
shell_t	enum
shell	enum
=	O
BASH	int
;	O
int	O
quiet_errors	int
=	O
0	int
;	O
int	O
quiet_output	int
=	O
0	int
;	O
int	O
quote	int
=	O
1	int
;	O
int	O
alternative	int
=	O
0	int
;	O
void	O
*	O
our_malloc	function
(	O
size_t	long
size	long
)	O
;	O
void	O
*	O
our_realloc	function
(	O
void	O
*	O
ptr	pointer
,	O
size_t	long
size	long
)	O
;	O
const	O
char	O
*	O
normalize	function
(	O
const	O
char	O
*	O
arg	pointer
)	O
;	O
int	O
generate_output	function
(	O
char	O
*	O
argv	array
[	O
]	O
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
optstr	pointer
,	O
const	O
struct	O
option	struct
*	O
longopts	pointer
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
;	O
void	O
parse_error	function
(	O
const	O
char	O
*	O
message	pointer
)	O
;	O
void	O
add_long_options	function
(	O
char	O
*	O
options	pointer
)	O
;	O
void	O
add_longopt	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
has_arg	int
)	O
;	O
void	O
print_help	function
(	O
void	O
)	O
;	O
void	O
set_shell	function
(	O
const	O
char	O
*	O
new_shell	pointer
)	O
;	O
void	O
set_initial_shell	function
(	O
void	O
)	O
;	O
void	O
*	O
our_malloc	function
(	O
size_t	long
size	long
)	O
{	O
void	O
*	O
ret	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
!	O
ret	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: Out of memory!\n"	pointer
)	O
,	O
"getopt"	pointer
)	O
;	O
exit	function
(	O
3	int
)	O
;	O
}	O
return	O
(	O
ret	pointer
)	O
;	O
}	O
void	O
*	O
our_realloc	function
(	O
void	O
*	O
ptr	pointer
,	O
size_t	long
size	long
)	O
{	O
void	O
*	O
ret	pointer
=	O
realloc	function
(	O
ptr	pointer
,	O
size	long
)	O
;	O
if	O
(	O
!	O
ret	pointer
&&	O
size	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: Out of memory!\n"	pointer
)	O
,	O
"getopt"	pointer
)	O
;	O
exit	function
(	O
3	int
)	O
;	O
}	O
return	O
(	O
ret	pointer
)	O
;	O
}	O
const	O
char	O
*	O
normalize	function
(	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
static	O
char	O
*	O
BUFFER	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
argptr	pointer
=	O
arg	pointer
;	O
char	O
*	O
bufptr	pointer
;	O
if	O
(	O
BUFFER	pointer
!=	O
NULL	O
)	O
free	function
(	O
BUFFER	pointer
)	O
;	O
if	O
(	O
!	O
quote	int
)	O
{	O
BUFFER	pointer
=	O
our_malloc	function
(	O
strlen	function
(	O
arg	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
BUFFER	pointer
,	O
arg	pointer
)	O
;	O
return	O
BUFFER	pointer
;	O
}	O
BUFFER	pointer
=	O
our_malloc	function
(	O
strlen	function
(	O
arg	pointer
)	O
*	O
4	int
+	O
3	int
)	O
;	O
bufptr	pointer
=	O
BUFFER	pointer
;	O
*	O
bufptr	pointer
++	O
=	O
'\''	O
;	O
while	O
(	O
*	O
argptr	pointer
)	O
{	O
if	O
(	O
*	O
argptr	pointer
==	O
'\''	O
)	O
{	O
*	O
bufptr	pointer
++	O
=	O
'\''	O
;	O
*	O
bufptr	pointer
++	O
=	O
'\\'	O
;	O
*	O
bufptr	pointer
++	O
=	O
'\''	O
;	O
*	O
bufptr	pointer
++	O
=	O
'\''	O
;	O
}	O
else	O
if	O
(	O
shell	enum
==	O
TCSH	int
&&	O
*	O
argptr	pointer
==	O
'!'	O
)	O
{	O
*	O
bufptr	pointer
++	O
=	O
'\''	O
;	O
*	O
bufptr	pointer
++	O
=	O
'\\'	O
;	O
*	O
bufptr	pointer
++	O
=	O
'!'	O
;	O
*	O
bufptr	pointer
++	O
=	O
'\''	O
;	O
}	O
else	O
if	O
(	O
shell	enum
==	O
TCSH	int
&&	O
*	O
argptr	pointer
==	O
'\n'	O
)	O
{	O
*	O
bufptr	pointer
++	O
=	O
'\\'	O
;	O
*	O
bufptr	pointer
++	O
=	O
'n'	O
;	O
}	O
else	O
if	O
(	O
shell	enum
==	O
TCSH	int
&&	O
isspace	function
(	O
*	O
argptr	pointer
)	O
)	O
{	O
*	O
bufptr	pointer
++	O
=	O
'\''	O
;	O
*	O
bufptr	pointer
++	O
=	O
'\\'	O
;	O
*	O
bufptr	pointer
++	O
=	O
*	O
argptr	pointer
;	O
*	O
bufptr	pointer
++	O
=	O
'\''	O
;	O
}	O
else	O
*	O
bufptr	pointer
++	O
=	O
*	O
argptr	pointer
;	O
argptr	pointer
++	O
;	O
}	O
*	O
bufptr	pointer
++	O
=	O
'\''	O
;	O
*	O
bufptr	pointer
++	O
=	O
'\0'	O
;	O
return	O
BUFFER	pointer
;	O
}	O
int	O
generate_output	function
(	O
char	O
*	O
argv	array
[	O
]	O
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
optstr	pointer
,	O
const	O
struct	O
option	struct
*	O
longopts	pointer
)	O
{	O
int	O
exit_code	int
=	O
0	int
;	O
int	O
opt	int
;	O
int	O
longindex	int
;	O
const	O
char	O
*	O
charptr	pointer
;	O
if	O
(	O
quiet_errors	int
)	O
opterr	int
=	O
0	int
;	O
optind	int
=	O
0	int
;	O
while	O
(	O
(	O
opt	int
=	O
(	O
alternative	int
?	O
ugetopt_long_only	function
(	O
argc	int
,	O
argv	array
,	O
optstr	pointer
,	O
longopts	pointer
,	O
&	O
longindex	int
)	O
:	O
ugetopt_long	function
(	O
argc	int
,	O
argv	array
,	O
optstr	pointer
,	O
longopts	pointer
,	O
&	O
longindex	int
)	O
)	O
)	O
!=	O
EOF	O
)	O
if	O
(	O
opt	int
==	O
'?'	O
||	O
opt	int
==	O
':'	O
)	O
exit_code	int
=	O
1	int
;	O
else	O
if	O
(	O
!	O
quiet_output	int
)	O
{	O
if	O
(	O
opt	int
==	O
LONG_OPT	int
)	O
{	O
printf	function
(	O
" --%s"	pointer
,	O
longopts	pointer
[	O
longindex	int
]	O
.	O
name	pointer
)	O
;	O
if	O
(	O
longopts	pointer
[	O
longindex	int
]	O
.	O
has_arg	int
)	O
printf	function
(	O
" %s"	pointer
,	O
normalize	function
(	O
optarg	pointer
?	O
optarg	pointer
:	O
""	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
opt	int
==	O
NON_OPT	int
)	O
printf	function
(	O
" %s"	pointer
,	O
normalize	function
(	O
optarg	pointer
)	O
)	O
;	O
else	O
{	O
printf	function
(	O
" -%c"	pointer
,	O
opt	int
)	O
;	O
charptr	pointer
=	O
strchr	function
(	O
optstr	pointer
,	O
opt	int
)	O
;	O
if	O
(	O
charptr	pointer
!=	O
NULL	O
&&	O
*	O
++	O
charptr	pointer
==	O
':'	O
)	O
printf	function
(	O
" %s"	pointer
,	O
normalize	function
(	O
optarg	pointer
?	O
optarg	pointer
:	O
""	pointer
)	O
)	O
;	O
}	O
}	O
if	O
(	O
!	O
quiet_output	int
)	O
{	O
printf	function
(	O
" --"	pointer
)	O
;	O
while	O
(	O
optind	int
<	O
argc	int
)	O
printf	function
(	O
" %s"	pointer
,	O
normalize	function
(	O
argv	array
[	O
optind	int
++	O
]	O
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
return	O
exit_code	int
;	O
}	O
void	O
parse_error	function
(	O
const	O
char	O
*	O
message	pointer
)	O
{	O
if	O
(	O
message	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"getopt: %s\n"	pointer
,	O
message	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Try `getopt --help' for more information.\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
static	O
struct	O
option	struct
*	O
long_options	pointer
=	O
NULL	O
;	O
static	O
int	O
long_options_length	int
=	O
0	int
;	O
static	O
int	O
long_options_nr	int
=	O
0	int
;	O
void	O
add_longopt	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
has_arg	int
)	O
{	O
char	O
*	O
tmp	pointer
;	O
if	O
(	O
!	O
name	pointer
)	O
{	O
free	function
(	O
long_options	pointer
)	O
;	O
long_options	pointer
=	O
NULL	O
;	O
long_options_length	int
=	O
0	int
;	O
long_options_nr	int
=	O
0	int
;	O
}	O
if	O
(	O
long_options_nr	int
==	O
long_options_length	int
)	O
{	O
long_options_length	int
+=	O
LONG_OPTIONS_INCR	int
;	O
long_options	pointer
=	O
our_realloc	function
(	O
long_options	pointer
,	O
sizeof	O
(	O
struct	O
option	struct
)	O
*	O
long_options_length	int
)	O
;	O
}	O
long_options	pointer
[	O
long_options_nr	int
]	O
.	O
name	pointer
=	O
NULL	O
;	O
long_options	pointer
[	O
long_options_nr	int
]	O
.	O
has_arg	int
=	O
0	int
;	O
long_options	pointer
[	O
long_options_nr	int
]	O
.	O
flag	pointer
=	O
NULL	O
;	O
long_options	pointer
[	O
long_options_nr	int
]	O
.	O
val	int
=	O
0	int
;	O
if	O
(	O
long_options_nr	int
)	O
{	O
long_options	pointer
[	O
long_options_nr	int
-	O
1	int
]	O
.	O
has_arg	int
=	O
has_arg	int
;	O
long_options	pointer
[	O
long_options_nr	int
-	O
1	int
]	O
.	O
flag	pointer
=	O
NULL	O
;	O
long_options	pointer
[	O
long_options_nr	int
-	O
1	int
]	O
.	O
val	int
=	O
LONG_OPT	int
;	O
tmp	pointer
=	O
our_malloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
tmp	pointer
,	O
name	pointer
)	O
;	O
long_options	pointer
[	O
long_options_nr	int
-	O
1	int
]	O
.	O
name	pointer
=	O
tmp	pointer
;	O
}	O
long_options_nr	int
++	O
;	O
}	O
void	O
add_long_options	function
(	O
char	O
*	O
options	pointer
)	O
{	O
int	O
arg_opt	int
;	O
char	O
*	O
tokptr	pointer
=	O
strtok	function
(	O
options	pointer
,	O
", \t\n"	pointer
)	O
;	O
while	O
(	O
tokptr	pointer
)	O
{	O
arg_opt	int
=	O
no_argument	int
;	O
if	O
(	O
strlen	function
(	O
tokptr	pointer
)	O
>	O
0	int
)	O
{	O
if	O
(	O
tokptr	pointer
[	O
strlen	function
(	O
tokptr	pointer
)	O
-	O
1	int
]	O
==	O
':'	O
)	O
{	O
if	O
(	O
tokptr	pointer
[	O
strlen	function
(	O
tokptr	pointer
)	O
-	O
2	int
]	O
==	O
':'	O
)	O
{	O
tokptr	pointer
[	O
strlen	function
(	O
tokptr	pointer
)	O
-	O
2	int
]	O
=	O
'\0'	O
;	O
arg_opt	int
=	O
optional_argument	int
;	O
}	O
else	O
{	O
tokptr	pointer
[	O
strlen	function
(	O
tokptr	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
arg_opt	int
=	O
required_argument	int
;	O
}	O
if	O
(	O
strlen	function
(	O
tokptr	pointer
)	O
==	O
0	int
)	O
parse_error	function
(	O
_	O
(	O
"empty long option after "	pointer
"-l or --long argument"	pointer
)	O
)	O
;	O
}	O
add_longopt	function
(	O
tokptr	pointer
,	O
arg_opt	int
)	O
;	O
}	O
tokptr	pointer
=	O
strtok	function
(	O
NULL	O
,	O
", \t\n"	pointer
)	O
;	O
}	O
}	O
void	O
set_shell	function
(	O
const	O
char	O
*	O
new_shell	pointer
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
new_shell	pointer
,	O
"bash"	pointer
)	O
)	O
shell	enum
=	O
BASH	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
new_shell	pointer
,	O
"tcsh"	pointer
)	O
)	O
shell	enum
=	O
TCSH	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
new_shell	pointer
,	O
"sh"	pointer
)	O
)	O
shell	enum
=	O
BASH	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
new_shell	pointer
,	O
"csh"	pointer
)	O
)	O
shell	enum
=	O
TCSH	int
;	O
else	O
parse_error	function
(	O
_	O
(	O
"unknown shell after -s or --shell argument"	pointer
)	O
)	O
;	O
}	O
void	O
print_help	function
(	O
void	O
)	O
{	O
fputs	function
(	O
_	O
(	O
"Usage: getopt optstring parameters\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"       getopt [options] [--] optstring parameters\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"       getopt [options] -o|--options optstring [options] [--]\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"              parameters\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -a, --alternative            Allow long options starting with single -\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -h, --help                   This small usage guide\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -l, --longoptions=longopts   Long options to be recognized\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -n, --name=progname          The name under which errors are reported\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -o, --options=optstring      Short options to be recognized\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -q, --quiet                  Disable error reporting by getopt(3)\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -Q, --quiet-output           No normal output\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -s, --shell=shell            Set shell quoting conventions\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -T, --test                   Test for getopt(1) version\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -u, --unqote                 Do not quote the output\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"  -V, --version                Output version information\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
static	O
struct	O
option	struct
longopts	pointer
[	O
]	O
=	O
{	O
{	O
"options"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"longoptions"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"quiet"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'q'	O
}	O
,	O
{	O
"quiet-output"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'Q'	O
}	O
,	O
{	O
"shell"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"test"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'T'	O
}	O
,	O
{	O
"unquoted"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'u'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"alternative"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'a'	O
}	O
,	O
{	O
"name"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'n'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
const	O
char	O
*	O
shortopts	pointer
=	O
"+ao:l:n:qQs:TuhV"	pointer
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
char	O
*	O
optstr	pointer
=	O
NULL	O
;	O
char	O
*	O
name	pointer
=	O
NULL	O
;	O
int	O
opt	int
;	O
int	O
compatible	int
=	O
0	int
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	O
(	O
PACKAGE	O
,	O
LOCALEDIR	O
)	O
;	O
textdomain	O
(	O
PACKAGE	O
)	O
;	O
init_longopt	O
(	O
)	O
;	O
if	O
(	O
getenv	function
(	O
"GETOPT_COMPATIBLE"	pointer
)	O
)	O
compatible	int
=	O
1	int
;	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
if	O
(	O
compatible	int
)	O
{	O
printf	function
(	O
" --\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
else	O
parse_error	function
(	O
_	O
(	O
"missing optstring argument"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
argv	array
[	O
1	int
]	O
[	O
0	int
]	O
!=	O
'-'	O
||	O
compatible	int
)	O
{	O
quote	int
=	O
0	int
;	O
optstr	pointer
=	O
our_malloc	function
(	O
strlen	function
(	O
argv	array
[	O
1	int
]	O
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
optstr	pointer
,	O
argv	array
[	O
1	int
]	O
+	O
strspn	function
(	O
argv	array
[	O
1	int
]	O
,	O
"-+"	pointer
)	O
)	O
;	O
argv	array
[	O
1	int
]	O
=	O
argv	array
[	O
0	int
]	O
;	O
exit	function
(	O
generate_output	function
(	O
argv	array
+	O
1	int
,	O
argc	int
-	O
1	int
,	O
optstr	pointer
,	O
long_options	pointer
)	O
)	O
;	O
}	O
while	O
(	O
(	O
opt	int
=	O
ugetopt_long	function
(	O
argc	int
,	O
argv	array
,	O
shortopts	pointer
,	O
longopts	pointer
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'a'	O
:	O
alternative	int
=	O
1	int
;	O
break	O
;	O
case	O
'h'	O
:	O
print_help	function
(	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
case	O
'o'	O
:	O
if	O
(	O
optstr	pointer
)	O
free	function
(	O
optstr	pointer
)	O
;	O
optstr	pointer
=	O
our_malloc	function
(	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
optstr	pointer
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
add_long_options	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
name	pointer
)	O
free	function
(	O
name	pointer
)	O
;	O
name	pointer
=	O
our_malloc	function
(	O
strlen	function
(	O
optarg	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
name	pointer
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'q'	O
:	O
quiet_errors	int
=	O
1	int
;	O
break	O
;	O
case	O
'Q'	O
:	O
quiet_output	int
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
set_shell	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'T'	O
:	O
exit	function
(	O
4	int
)	O
;	O
case	O
'u'	O
:	O
quote	int
=	O
0	int
;	O
break	O
;	O
case	O
'V'	O
:	O
printf	function
(	O
_	O
(	O
"getopt (enhanced) 1.1.2\n"	pointer
)	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
case	O
'?'	O
:	O
case	O
':'	O
:	O
parse_error	function
(	O
NULL	O
)	O
;	O
default	O
:	O
parse_error	function
(	O
_	O
(	O
"internal error, contact the author."	pointer
)	O
)	O
;	O
}	O
if	O
(	O
!	O
optstr	pointer
)	O
{	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
parse_error	function
(	O
_	O
(	O
"missing optstring argument"	pointer
)	O
)	O
;	O
else	O
{	O
optstr	pointer
=	O
our_malloc	function
(	O
strlen	function
(	O
argv	array
[	O
optind	int
]	O
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
optstr	pointer
,	O
argv	array
[	O
optind	int
]	O
)	O
;	O
optind	int
++	O
;	O
}	O
}	O
if	O
(	O
name	pointer
)	O
argv	array
[	O
optind	int
-	O
1	int
]	O
=	O
name	pointer
;	O
else	O
argv	array
[	O
optind	int
-	O
1	int
]	O
=	O
argv	array
[	O
0	int
]	O
;	O
exit	function
(	O
generate_output	function
(	O
argv	array
+	O
optind	int
-	O
1	int
,	O
argc	int
-	O
optind	int
+	O
1	int
,	O
optstr	pointer
,	O
long_options	pointer
)	O
)	O
;	O
}	O
