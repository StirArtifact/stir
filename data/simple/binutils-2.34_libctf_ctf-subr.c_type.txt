int	O
_libctf_version	int
=	O
CTF_VERSION	O
;	O
int	O
_libctf_debug	int
=	O
0	int
;	O
_libctf_malloc_	O
void	O
*	O
ctf_mmap	function
(	O
size_t	long
length	long
,	O
size_t	long
offset	long
,	O
int	O
fd	int
)	O
{	O
void	O
*	O
data	pointer
;	O
data	pointer
=	O
mmap	function
(	O
NULL	O
,	O
length	long
,	O
PROT_READ	int
,	O
MAP_PRIVATE	int
,	O
fd	int
,	O
offset	long
)	O
;	O
if	O
(	O
data	pointer
==	O
MAP_FAILED	O
)	O
data	pointer
=	O
NULL	O
;	O
return	O
data	pointer
;	O
}	O
void	O
ctf_munmap	function
(	O
void	O
*	O
buf	pointer
,	O
size_t	long
length	long
_libctf_unused_	O
)	O
{	O
(	O
void	O
)	O
munmap	function
(	O
buf	pointer
,	O
length	long
)	O
;	O
}	O
ssize_t	long
ctf_pread	function
(	O
int	O
fd	int
,	O
void	O
*	O
buf	pointer
,	O
ssize_t	long
count	int
,	O
off_t	long
offset	long
)	O
{	O
ssize_t	long
len	int
;	O
size_t	long
acc	long
=	O
0	int
;	O
char	O
*	O
data	pointer
=	O
(	O
char	O
*	O
)	O
buf	pointer
;	O
while	O
(	O
count	int
>	O
0	int
)	O
{	O
errno	O
=	O
0	int
;	O
if	O
(	O
(	O
(	O
len	int
=	O
pread	function
(	O
fd	int
,	O
data	pointer
,	O
count	int
,	O
offset	long
)	O
)	O
<	O
0	int
)	O
&&	O
errno	O
!=	O
EINTR	int
)	O
return	O
len	int
;	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
acc	long
+=	O
len	int
;	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
acc	long
;	O
count	int
-=	O
len	int
;	O
offset	long
+=	O
len	int
;	O
data	pointer
+=	O
len	int
;	O
}	O
return	O
acc	long
;	O
return	O
acc	long
;	O
}	O
const	O
char	O
*	O
ctf_strerror	function
(	O
int	O
err	long
)	O
{	O
return	O
(	O
const	O
char	O
*	O
)	O
(	O
strerror	function
(	O
err	long
)	O
)	O
;	O
}	O
int	O
ctf_version	function
(	O
int	O
version	pointer
)	O
{	O
if	O
(	O
version	pointer
<	O
0	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
version	pointer
>	O
0	int
)	O
{	O
if	O
(	O
version	pointer
!=	O
CTF_VERSION	O
)	O
{	O
errno	O
=	O
ENOTSUP	O
;	O
return	O
-	O
1	int
;	O
}	O
ctf_dprintf	function
(	O
"ctf_version: client using version %d\n"	pointer
,	O
version	pointer
)	O
;	O
_libctf_version	int
=	O
version	pointer
;	O
}	O
return	O
_libctf_version	int
;	O
}	O
void	O
libctf_init_debug	function
(	O
void	O
)	O
{	O
static	O
int	O
inited	int
;	O
if	O
(	O
!	O
inited	int
)	O
{	O
_libctf_debug	int
=	O
getenv	function
(	O
"LIBCTF_DEBUG"	pointer
)	O
!=	O
NULL	O
;	O
inited	int
=	O
1	int
;	O
}	O
}	O
void	O
ctf_setdebug	function
(	O
int	O
debug	int
)	O
{	O
libctf_init_debug	function
(	O
)	O
;	O
_libctf_debug	int
=	O
debug	int
;	O
ctf_dprintf	function
(	O
"CTF debugging set to %i\n"	pointer
,	O
debug	int
)	O
;	O
}	O
int	O
ctf_getdebug	function
(	O
void	O
)	O
{	O
return	O
_libctf_debug	int
;	O
}	O
_libctf_printflike_	O
(	O
1	int
,	O
2	int
)	O
void	O
ctf_dprintf	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
if	O
(	O
_libctf_debug	int
)	O
{	O
va_list	array
alist	array
;	O
va_start	O
(	O
alist	array
,	O
format	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
(	O
void	O
)	O
fputs	function
(	O
"libctf DEBUG: "	pointer
,	O
stderr	pointer
)	O
;	O
(	O
void	O
)	O
vfprintf	function
(	O
stderr	pointer
,	O
format	pointer
,	O
alist	array
)	O
;	O
va_end	O
(	O
alist	array
)	O
;	O
}	O
}	O
