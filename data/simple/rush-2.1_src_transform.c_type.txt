enum	O
transform_type	enum
{	O
transform_first	int
,	O
transform_global	int
}	O
;	O
enum	O
replace_segm_type	enum
{	O
segm_literal	int
,	O
segm_backref	int
,	O
segm_case_ctl	int
}	O
;	O
enum	O
case_ctl_type	enum
{	O
ctl_stop	int
,	O
ctl_upcase_next	int
,	O
ctl_locase_next	int
,	O
ctl_upcase	int
,	O
ctl_locase	int
}	O
;	O
struct	O
replace_segm	struct
{	O
struct	O
replace_segm	struct
*	O
next	pointer
;	O
enum	O
replace_segm_type	enum
type	enum
;	O
union	O
{	O
struct	O
{	O
char	O
*	O
ptr	pointer
;	O
size_t	long
size	long
;	O
}	O
literal	struct
;	O
size_t	long
ref	long
;	O
enum	O
case_ctl_type	enum
ctl	enum
;	O
}	O
v	union
;	O
}	O
;	O
struct	O
transform	struct
{	O
struct	O
transform	struct
*	O
next	pointer
;	O
enum	O
transform_type	enum
transform_type	enum
;	O
unsigned	O
match_number	int
;	O
regex_t	struct
regex	struct
;	O
struct	O
replace_segm	struct
*	O
repl_head	pointer
,	O
*	O
repl_tail	pointer
;	O
size_t	long
segm_count	long
;	O
}	O
;	O
struct	O
transform_list	struct
{	O
struct	O
transform	struct
*	O
head	pointer
,	O
*	O
tail	pointer
;	O
}	O
;	O
static	O
struct	O
transform	struct
*	O
new_transform	function
(	O
struct	O
transform_list	struct
*	O
tlist	pointer
)	O
{	O
struct	O
transform	struct
*	O
p	pointer
=	O
xzalloc	function
(	O
sizeof	O
*	O
p	pointer
)	O
;	O
if	O
(	O
tlist	pointer
->	O
tail	pointer
)	O
tlist	pointer
->	O
tail	pointer
->	O
next	pointer
=	O
p	pointer
;	O
else	O
tlist	pointer
->	O
head	pointer
=	O
p	pointer
;	O
tlist	pointer
->	O
tail	pointer
=	O
p	pointer
;	O
return	O
p	pointer
;	O
}	O
static	O
struct	O
replace_segm	struct
*	O
add_segment	function
(	O
struct	O
transform	struct
*	O
tf	pointer
)	O
{	O
struct	O
replace_segm	struct
*	O
segm	pointer
=	O
xmalloc	function
(	O
sizeof	O
*	O
segm	pointer
)	O
;	O
segm	pointer
->	O
next	pointer
=	O
NULL	O
;	O
if	O
(	O
tf	pointer
->	O
repl_tail	pointer
)	O
tf	pointer
->	O
repl_tail	pointer
->	O
next	pointer
=	O
segm	pointer
;	O
else	O
tf	pointer
->	O
repl_head	pointer
=	O
segm	pointer
;	O
tf	pointer
->	O
repl_tail	pointer
=	O
segm	pointer
;	O
tf	pointer
->	O
segm_count	long
++	O
;	O
return	O
segm	pointer
;	O
}	O
static	O
void	O
add_literal_segment	function
(	O
struct	O
transform	struct
*	O
tf	pointer
,	O
char	O
*	O
str	pointer
,	O
char	O
*	O
end	pointer
)	O
{	O
size_t	long
len	long
=	O
end	pointer
-	O
str	pointer
;	O
if	O
(	O
len	long
)	O
{	O
struct	O
replace_segm	struct
*	O
segm	pointer
=	O
add_segment	function
(	O
tf	pointer
)	O
;	O
segm	pointer
->	O
type	enum
=	O
segm_literal	int
;	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
ptr	pointer
=	O
xmalloc	function
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
ptr	pointer
,	O
str	pointer
,	O
len	long
)	O
;	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
ptr	pointer
[	O
len	long
]	O
=	O
0	int
;	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
size	long
=	O
len	long
;	O
}	O
}	O
static	O
void	O
add_char_segment	function
(	O
struct	O
transform	struct
*	O
tf	pointer
,	O
int	O
chr	int
)	O
{	O
struct	O
replace_segm	struct
*	O
segm	pointer
=	O
add_segment	function
(	O
tf	pointer
)	O
;	O
segm	pointer
->	O
type	enum
=	O
segm_literal	int
;	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
ptr	pointer
=	O
xmalloc	function
(	O
2	int
)	O
;	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
ptr	pointer
[	O
0	int
]	O
=	O
chr	int
;	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
ptr	pointer
[	O
1	int
]	O
=	O
0	int
;	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
size	long
=	O
1	int
;	O
}	O
static	O
void	O
add_backref_segment	function
(	O
struct	O
transform	struct
*	O
tf	pointer
,	O
size_t	long
ref	long
)	O
{	O
struct	O
replace_segm	struct
*	O
segm	pointer
=	O
add_segment	function
(	O
tf	pointer
)	O
;	O
segm	pointer
->	O
type	enum
=	O
segm_backref	int
;	O
segm	pointer
->	O
v	union
.	O
ref	long
=	O
ref	long
;	O
}	O
static	O
void	O
add_case_ctl_segment	function
(	O
struct	O
transform	struct
*	O
tf	pointer
,	O
enum	O
case_ctl_type	enum
ctl	enum
)	O
{	O
struct	O
replace_segm	struct
*	O
segm	pointer
=	O
add_segment	function
(	O
tf	pointer
)	O
;	O
segm	pointer
->	O
type	enum
=	O
segm_case_ctl	int
;	O
segm	pointer
->	O
v	union
.	O
ctl	enum
=	O
ctl	enum
;	O
}	O
static	O
const	O
char	O
*	O
parse_transform_expr	function
(	O
struct	O
transform_list	struct
*	O
tlist	pointer
,	O
const	O
char	O
*	O
expr	pointer
,	O
int	O
cflags	int
,	O
struct	O
cfloc	O
*	O
loc	pointer
)	O
{	O
int	O
delim	pointer
;	O
int	O
i	int
,	O
j	int
,	O
rc	int
;	O
char	O
*	O
str	pointer
,	O
*	O
beg	pointer
,	O
*	O
cur	pointer
;	O
const	O
char	O
*	O
p	pointer
;	O
struct	O
transform	struct
*	O
tf	pointer
=	O
new_transform	function
(	O
tlist	pointer
)	O
;	O
if	O
(	O
expr	pointer
[	O
0	int
]	O
!=	O
's'	O
)	O
die_usage	function
(	O
loc	pointer
,	O
"%s"	pointer
,	O
_	O
(	O
"Transform expression must start with 's' followed by a punctuation character"	pointer
)	O
)	O
;	O
delim	pointer
=	O
expr	pointer
[	O
1	int
]	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
expr	pointer
[	O
i	int
]	O
&&	O
expr	pointer
[	O
i	int
]	O
!=	O
delim	pointer
;	O
i	int
++	O
)	O
if	O
(	O
expr	pointer
[	O
i	int
]	O
==	O
'\\'	O
&&	O
expr	pointer
[	O
i	int
+	O
1	int
]	O
)	O
i	int
++	O
;	O
if	O
(	O
expr	pointer
[	O
i	int
]	O
!=	O
delim	pointer
)	O
die_usage	function
(	O
loc	pointer
,	O
_	O
(	O
"Missing 2nd delimiter in position %d of expression %s"	pointer
)	O
,	O
i	int
,	O
expr	pointer
)	O
;	O
for	O
(	O
j	int
=	O
i	int
+	O
1	int
;	O
expr	pointer
[	O
j	int
]	O
&&	O
expr	pointer
[	O
j	int
]	O
!=	O
delim	pointer
;	O
j	int
++	O
)	O
if	O
(	O
expr	pointer
[	O
j	int
]	O
==	O
'\\'	O
&&	O
expr	pointer
[	O
j	int
+	O
1	int
]	O
)	O
j	int
++	O
;	O
if	O
(	O
expr	pointer
[	O
j	int
]	O
!=	O
delim	pointer
)	O
die_usage	function
(	O
loc	pointer
,	O
_	O
(	O
"Missing trailing delimiter in position %d of expression %s"	pointer
)	O
,	O
j	int
,	O
expr	pointer
)	O
;	O
tf	pointer
->	O
transform_type	enum
=	O
transform_first	int
;	O
for	O
(	O
p	pointer
=	O
expr	pointer
+	O
j	int
+	O
1	int
;	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
';'	O
;	O
p	pointer
++	O
)	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
'g'	O
:	O
tf	pointer
->	O
transform_type	enum
=	O
transform_global	int
;	O
break	O
;	O
case	O
'i'	O
:	O
cflags	int
|=	O
REG_ICASE	O
;	O
break	O
;	O
case	O
'x'	O
:	O
cflags	int
|=	O
REG_EXTENDED	int
;	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
tf	pointer
->	O
match_number	int
=	O
strtoul	function
(	O
p	pointer
,	O
(	O
char	O
*	O
*	O
)	O
&	O
p	pointer
,	O
0	int
)	O
;	O
p	pointer
--	O
;	O
break	O
;	O
default	O
:	O
die_usage	function
(	O
loc	pointer
,	O
_	O
(	O
"Unknown flag in transform expression: %c"	pointer
)	O
,	O
*	O
p	pointer
)	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
';'	O
)	O
p	pointer
++	O
;	O
str	pointer
=	O
xmalloc	function
(	O
i	int
-	O
1	int
)	O
;	O
memcpy	function
(	O
str	pointer
,	O
expr	pointer
+	O
2	int
,	O
i	int
-	O
2	int
)	O
;	O
str	pointer
[	O
i	int
-	O
2	int
]	O
=	O
0	int
;	O
rc	int
=	O
regcomp	O
(	O
&	O
tf	pointer
->	O
regex	struct
,	O
str	pointer
,	O
cflags	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
char	O
errbuf	array
[	O
512	int
]	O
;	O
regerror	O
(	O
rc	int
,	O
&	O
tf	pointer
->	O
regex	struct
,	O
errbuf	array
,	O
sizeof	O
(	O
errbuf	array
)	O
)	O
;	O
die_usage	function
(	O
loc	pointer
,	O
_	O
(	O
"Invalid transform expression: %s"	pointer
)	O
,	O
errbuf	array
)	O
;	O
}	O
if	O
(	O
str	pointer
[	O
0	int
]	O
==	O
'^'	O
||	O
str	pointer
[	O
strlen	function
(	O
str	pointer
)	O
-	O
1	int
]	O
==	O
'$'	O
)	O
tf	pointer
->	O
transform_type	enum
=	O
transform_first	int
;	O
free	function
(	O
str	pointer
)	O
;	O
i	int
++	O
;	O
str	pointer
=	O
xmalloc	function
(	O
j	int
-	O
i	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
str	pointer
,	O
expr	pointer
+	O
i	int
,	O
j	int
-	O
i	int
)	O
;	O
str	pointer
[	O
j	int
-	O
i	int
]	O
=	O
0	int
;	O
for	O
(	O
cur	pointer
=	O
beg	pointer
=	O
str	pointer
;	O
*	O
cur	pointer
;	O
)	O
{	O
if	O
(	O
*	O
cur	pointer
==	O
'\\'	O
)	O
{	O
size_t	long
n	long
;	O
add_literal_segment	function
(	O
tf	pointer
,	O
beg	pointer
,	O
cur	pointer
)	O
;	O
switch	O
(	O
*	O
++	O
cur	pointer
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
n	long
=	O
strtoul	function
(	O
cur	pointer
,	O
&	O
cur	pointer
,	O
10	int
)	O
;	O
if	O
(	O
n	long
>	O
tf	pointer
->	O
regex	struct
.	O
re_nsub	long
)	O
die_usage	function
(	O
loc	pointer
,	O
_	O
(	O
"Invalid transform replacement: "	pointer
"back reference out of range"	pointer
)	O
)	O
;	O
add_backref_segment	function
(	O
tf	pointer
,	O
n	long
)	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
add_char_segment	function
(	O
tf	pointer
,	O
'\\'	O
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'a'	O
:	O
add_char_segment	function
(	O
tf	pointer
,	O
'\a'	O
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'b'	O
:	O
add_char_segment	function
(	O
tf	pointer
,	O
'\b'	O
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'f'	O
:	O
add_char_segment	function
(	O
tf	pointer
,	O
'\f'	O
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'n'	O
:	O
add_char_segment	function
(	O
tf	pointer
,	O
'\n'	O
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'r'	O
:	O
add_char_segment	function
(	O
tf	pointer
,	O
'\r'	O
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
't'	O
:	O
add_char_segment	function
(	O
tf	pointer
,	O
'\t'	O
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'v'	O
:	O
add_char_segment	function
(	O
tf	pointer
,	O
'\v'	O
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'&'	O
:	O
add_char_segment	function
(	O
tf	pointer
,	O
'&'	O
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'L'	O
:	O
add_case_ctl_segment	function
(	O
tf	pointer
,	O
ctl_locase	int
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'l'	O
:	O
add_case_ctl_segment	function
(	O
tf	pointer
,	O
ctl_locase_next	int
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'U'	O
:	O
add_case_ctl_segment	function
(	O
tf	pointer
,	O
ctl_upcase	int
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'u'	O
:	O
add_case_ctl_segment	function
(	O
tf	pointer
,	O
ctl_upcase_next	int
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
case	O
'E'	O
:	O
add_case_ctl_segment	function
(	O
tf	pointer
,	O
ctl_stop	int
)	O
;	O
cur	pointer
++	O
;	O
break	O
;	O
default	O
:	O
{	O
char	O
buf	array
[	O
2	int
]	O
;	O
buf	array
[	O
0	int
]	O
=	O
'\\'	O
;	O
buf	array
[	O
1	int
]	O
=	O
*	O
cur	pointer
;	O
add_literal_segment	function
(	O
tf	pointer
,	O
buf	array
,	O
buf	array
+	O
2	int
)	O
;	O
}	O
cur	pointer
++	O
;	O
break	O
;	O
}	O
beg	pointer
=	O
cur	pointer
;	O
}	O
else	O
if	O
(	O
*	O
cur	pointer
==	O
'&'	O
)	O
{	O
add_literal_segment	function
(	O
tf	pointer
,	O
beg	pointer
,	O
cur	pointer
)	O
;	O
add_backref_segment	function
(	O
tf	pointer
,	O
0	int
)	O
;	O
beg	pointer
=	O
++	O
cur	pointer
;	O
}	O
else	O
cur	pointer
++	O
;	O
}	O
add_literal_segment	function
(	O
tf	pointer
,	O
beg	pointer
,	O
cur	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
transform_t	pointer
compile_transform_expr	function
(	O
const	O
char	O
*	O
expr	pointer
,	O
int	O
cflags	int
,	O
struct	O
cfloc	O
*	O
loc	pointer
)	O
{	O
struct	O
transform_list	struct
tlist	pointer
=	O
{	O
NULL	O
,	O
NULL	O
}	O
;	O
while	O
(	O
*	O
expr	pointer
)	O
expr	pointer
=	O
parse_transform_expr	function
(	O
&	O
tlist	pointer
,	O
expr	pointer
,	O
cflags	int
,	O
loc	pointer
)	O
;	O
return	O
tlist	pointer
.	O
head	pointer
;	O
}	O
static	O
const	O
char	O
*	O
run_case_conv	function
(	O
enum	O
case_ctl_type	enum
case_ctl	enum
,	O
const	O
char	O
*	O
ptr	pointer
,	O
size_t	long
size	long
)	O
{	O
static	O
char	O
*	O
case_ctl_buffer	pointer
;	O
static	O
size_t	long
case_ctl_bufsize	long
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
case_ctl_bufsize	long
<	O
size	long
)	O
{	O
case_ctl_bufsize	long
=	O
size	long
;	O
case_ctl_buffer	pointer
=	O
xrealloc	function
(	O
case_ctl_buffer	pointer
,	O
case_ctl_bufsize	long
)	O
;	O
}	O
memcpy	function
(	O
case_ctl_buffer	pointer
,	O
ptr	pointer
,	O
size	long
)	O
;	O
switch	O
(	O
case_ctl	enum
)	O
{	O
case	O
ctl_upcase_next	int
:	O
case_ctl_buffer	pointer
[	O
0	int
]	O
=	O
c_toupper	function
(	O
case_ctl_buffer	pointer
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
ctl_locase_next	int
:	O
case_ctl_buffer	pointer
[	O
0	int
]	O
=	O
c_tolower	function
(	O
case_ctl_buffer	pointer
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
ctl_upcase	int
:	O
for	O
(	O
p	pointer
=	O
case_ctl_buffer	pointer
;	O
p	pointer
<	O
case_ctl_buffer	pointer
+	O
size	long
;	O
p	pointer
++	O
)	O
*	O
p	pointer
=	O
c_toupper	function
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
case	O
ctl_locase	int
:	O
for	O
(	O
p	pointer
=	O
case_ctl_buffer	pointer
;	O
p	pointer
<	O
case_ctl_buffer	pointer
+	O
size	long
;	O
p	pointer
++	O
)	O
*	O
p	pointer
=	O
c_tolower	function
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
case	O
ctl_stop	int
:	O
break	O
;	O
}	O
return	O
case_ctl_buffer	pointer
;	O
}	O
void	O
_single_transform_name_to_slist	function
(	O
struct	O
transform	struct
*	O
tf	pointer
,	O
slist_t	pointer
slist	pointer
,	O
const	O
char	O
*	O
input	pointer
)	O
{	O
regmatch_t	struct
*	O
rmp	pointer
;	O
int	O
rc	int
;	O
size_t	long
nmatches	long
=	O
0	int
;	O
enum	O
case_ctl_type	enum
case_ctl	enum
=	O
ctl_stop	int
,	O
save_ctl	enum
=	O
ctl_stop	int
;	O
rmp	pointer
=	O
xmalloc	function
(	O
(	O
tf	pointer
->	O
regex	struct
.	O
re_nsub	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
*	O
rmp	pointer
)	O
)	O
;	O
while	O
(	O
*	O
input	pointer
)	O
{	O
size_t	long
disp	long
;	O
const	O
char	O
*	O
ptr	pointer
;	O
rc	int
=	O
regexec	O
(	O
&	O
tf	pointer
->	O
regex	struct
,	O
input	pointer
,	O
tf	pointer
->	O
regex	struct
.	O
re_nsub	long
+	O
1	int
,	O
rmp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
struct	O
replace_segm	struct
*	O
segm	pointer
;	O
disp	long
=	O
rmp	pointer
[	O
0	int
]	O
.	O
rm_eo	long
;	O
if	O
(	O
rmp	pointer
[	O
0	int
]	O
.	O
rm_so	long
)	O
slist_append	function
(	O
slist	pointer
,	O
input	pointer
,	O
rmp	pointer
[	O
0	int
]	O
.	O
rm_so	long
)	O
;	O
nmatches	long
++	O
;	O
if	O
(	O
tf	pointer
->	O
match_number	int
&&	O
nmatches	long
<	O
tf	pointer
->	O
match_number	int
)	O
{	O
slist_append	function
(	O
slist	pointer
,	O
input	pointer
,	O
disp	long
)	O
;	O
input	pointer
+=	O
disp	long
;	O
continue	O
;	O
}	O
for	O
(	O
segm	pointer
=	O
tf	pointer
->	O
repl_head	pointer
;	O
segm	pointer
;	O
segm	pointer
=	O
segm	pointer
->	O
next	pointer
)	O
{	O
switch	O
(	O
segm	pointer
->	O
type	enum
)	O
{	O
case	O
segm_literal	int
:	O
if	O
(	O
case_ctl	enum
==	O
ctl_stop	int
)	O
ptr	pointer
=	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
ptr	pointer
;	O
else	O
{	O
ptr	pointer
=	O
run_case_conv	function
(	O
case_ctl	enum
,	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
ptr	pointer
,	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
size	long
)	O
;	O
CASE_CTL_RESET	O
(	O
)	O
;	O
}	O
slist_append	function
(	O
slist	pointer
,	O
ptr	pointer
,	O
segm	pointer
->	O
v	union
.	O
literal	struct
.	O
size	long
)	O
;	O
break	O
;	O
case	O
segm_backref	int
:	O
if	O
(	O
rmp	pointer
[	O
segm	pointer
->	O
v	union
.	O
ref	long
]	O
.	O
rm_so	long
!=	O
-	O
1	int
&&	O
rmp	pointer
[	O
segm	pointer
->	O
v	union
.	O
ref	long
]	O
.	O
rm_eo	long
!=	O
-	O
1	int
)	O
{	O
size_t	long
size	long
=	O
rmp	pointer
[	O
segm	pointer
->	O
v	union
.	O
ref	long
]	O
.	O
rm_eo	long
-	O
rmp	pointer
[	O
segm	pointer
->	O
v	union
.	O
ref	long
]	O
.	O
rm_so	long
;	O
ptr	pointer
=	O
input	pointer
+	O
rmp	pointer
[	O
segm	pointer
->	O
v	union
.	O
ref	long
]	O
.	O
rm_so	long
;	O
if	O
(	O
case_ctl	enum
!=	O
ctl_stop	int
)	O
{	O
ptr	pointer
=	O
run_case_conv	function
(	O
case_ctl	enum
,	O
ptr	pointer
,	O
size	long
)	O
;	O
CASE_CTL_RESET	O
(	O
)	O
;	O
}	O
slist_append	function
(	O
slist	pointer
,	O
ptr	pointer
,	O
size	long
)	O
;	O
}	O
break	O
;	O
case	O
segm_case_ctl	int
:	O
switch	O
(	O
segm	pointer
->	O
v	union
.	O
ctl	enum
)	O
{	O
case	O
ctl_upcase_next	int
:	O
case	O
ctl_locase_next	int
:	O
switch	O
(	O
save_ctl	enum
)	O
{	O
case	O
ctl_stop	int
:	O
case	O
ctl_upcase	int
:	O
case	O
ctl_locase	int
:	O
save_ctl	enum
=	O
case_ctl	enum
;	O
default	O
:	O
break	O
;	O
}	O
case	O
ctl_upcase	int
:	O
case	O
ctl_locase	int
:	O
case	O
ctl_stop	int
:	O
case_ctl	enum
=	O
segm	pointer
->	O
v	union
.	O
ctl	enum
;	O
}	O
}	O
}	O
}	O
else	O
{	O
disp	long
=	O
strlen	function
(	O
input	pointer
)	O
;	O
slist_append	function
(	O
slist	pointer
,	O
input	pointer
,	O
disp	long
)	O
;	O
}	O
input	pointer
+=	O
disp	long
;	O
if	O
(	O
tf	pointer
->	O
transform_type	enum
==	O
transform_first	int
)	O
{	O
slist_append	function
(	O
slist	pointer
,	O
input	pointer
,	O
strlen	function
(	O
input	pointer
)	O
)	O
;	O
break	O
;	O
}	O
}	O
free	function
(	O
rmp	pointer
)	O
;	O
}	O
char	O
*	O
transform_string	function
(	O
transform_t	pointer
tf	pointer
,	O
const	O
char	O
*	O
input	pointer
)	O
{	O
if	O
(	O
tf	pointer
)	O
{	O
slist_t	pointer
slist	pointer
=	O
slist_create	function
(	O
)	O
;	O
char	O
*	O
buf	array
=	O
NULL	O
;	O
size_t	long
size	long
=	O
0	int
;	O
for	O
(	O
;	O
tf	pointer
;	O
tf	pointer
=	O
tf	pointer
->	O
next	pointer
)	O
{	O
_single_transform_name_to_slist	function
(	O
tf	pointer
,	O
slist	pointer
,	O
input	pointer
)	O
;	O
input	pointer
=	O
slist_reduce	function
(	O
slist	pointer
,	O
&	O
buf	array
,	O
&	O
size	long
)	O
;	O
}	O
slist_free	function
(	O
slist	pointer
)	O
;	O
}	O
return	O
xstrdup	function
(	O
input	pointer
)	O
;	O
}	O
