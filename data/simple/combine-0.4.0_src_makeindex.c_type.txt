int	O
create_file_index	function
(	O
filename	pointer
,	O
indexname	pointer
,	O
record_delimiter	pointer
,	O
record_length	long long
,	O
field_delimiter	pointer
,	O
field_delimiter_repeat	int
,	O
keys	pointer
,	O
key_count	int
,	O
unique	int
)	O
char	O
*	O
filename	pointer
;	O
char	O
*	O
indexname	pointer
;	O
DStr_string_descriptor	struct
*	O
record_delimiter	pointer
;	O
size_t	long
record_length	long long
;	O
DStr_string_descriptor	struct
*	O
field_delimiter	pointer
;	O
int	O
field_delimiter_repeat	int
;	O
field_range	struct
*	O
*	O
keys	pointer
;	O
int	O
key_count	int
;	O
int	O
unique	int
;	O
{	O
FILE	struct
*	O
input_file	pointer
;	O
FILE	struct
*	O
index_files	array
[	O
2	int
]	O
;	O
DStr_string_descriptor	struct
*	O
input_record	pointer
;	O
DStr_string_descriptor	struct
*	O
*	O
input_fields	pointer
;	O
unsigned	O
char	O
*	O
input_buffer	pointer
;	O
size_t	long
input_buffer_pos	long
;	O
size_t	long
input_buffer_size	long
;	O
int	O
record_count	int
;	O
int	O
return_code	int
;	O
int	O
i	int
;	O
INDEXNUM	O
data_file_position	long long
;	O
INDEXNUM	O
data_record_length	long long
;	O
input_buffer_size	long
=	O
0	int
;	O
input_buffer_pos	long
=	O
0	int
;	O
input_buffer	pointer
=	O
NULL	O
;	O
input_file	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
input_file	pointer
==	O
NULL	O
)	O
return	O
EXIT_FAILURE	int
;	O
return_code	int
=	O
open_index_file	function
(	O
indexname	pointer
,	O
index_files	array
,	O
1	int
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
return	O
EXIT_FAILURE	int
;	O
return_code	int
=	O
initialize_index_file	function
(	O
index_files	array
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
return	O
EXIT_FAILURE	int
;	O
record_count	int
=	O
0	int
;	O
data_file_position	long long
=	O
0	int
;	O
input_record	pointer
=	O
df_get_next_record	function
(	O
input_file	pointer
,	O
&	O
input_buffer	pointer
,	O
&	O
input_buffer_pos	long
,	O
&	O
input_buffer_size	long
,	O
record_delimiter	pointer
,	O
record_length	long long
)	O
;	O
while	O
(	O
input_record	pointer
!=	O
NULL	O
)	O
{	O
record_count	int
++	O
;	O
data_record_length	long long
=	O
input_record	pointer
->	O
length	long
;	O
return_code	int
=	O
a_find_input_ranges	function
(	O
&	O
(	O
input_fields	pointer
)	O
,	O
input_record	pointer
,	O
*	O
keys	pointer
,	O
key_count	int
,	O
0	int
,	O
field_delimiter	pointer
,	O
field_delimiter_repeat	int
,	O
DStr_not_own	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
FATAL_ERROR	O
(	O
_	O
(	O
"unable to allocate memory"	pointer
)	O
)	O
;	O
return_code	int
=	O
add_index_record_entry	function
(	O
input_fields	pointer
,	O
key_count	int
,	O
data_file_position	long long
,	O
data_record_length	long long
,	O
index_files	array
)	O
;	O
if	O
(	O
return_code	int
!=	O
EXIT_SUCCESS	int
)	O
return	O
EXIT_FAILURE	int
;	O
data_file_position	long long
+=	O
data_record_length	long long
;	O
dstrfree	function
(	O
input_record	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
key_count	int
;	O
i	int
++	O
)	O
dstrfree	function
(	O
input_fields	pointer
[	O
i	int
]	O
)	O
;	O
free	function
(	O
input_fields	pointer
)	O
;	O
input_record	pointer
=	O
df_get_next_record	function
(	O
input_file	pointer
,	O
&	O
input_buffer	pointer
,	O
&	O
input_buffer_pos	long
,	O
&	O
input_buffer_size	long
,	O
record_delimiter	pointer
,	O
record_length	long long
)	O
;	O
}	O
fclose	function
(	O
input_file	pointer
)	O
;	O
close_index_file	function
(	O
index_files	array
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
