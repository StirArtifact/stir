static	O
const	O
char	O
*	O
getword	function
(	O
mu_config_value_t	struct
*	O
val	pointer
,	O
int	O
*	O
pn	pointer
)	O
{	O
int	O
n	long
=	O
(	O
*	O
pn	pointer
)	O
++	O
;	O
mu_config_value_t	struct
*	O
v	pointer
;	O
if	O
(	O
n	long
>=	O
val	pointer
->	O
v	pointer
.	O
arg	pointer
.	O
c	char
)	O
{	O
mu_error	function
(	O
_	O
(	O
"not enough arguments"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
v	pointer
=	O
&	O
val	pointer
->	O
v	pointer
.	O
arg	pointer
.	O
v	pointer
[	O
n	long
]	O
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
v	pointer
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
NULL	O
;	O
return	O
v	pointer
->	O
v	pointer
.	O
string	pointer
;	O
}	O
static	O
int	O
parsearg	function
(	O
mu_config_value_t	struct
*	O
val	pointer
,	O
struct	O
mu_cidr	struct
*	O
cidr	pointer
,	O
char	O
*	O
*	O
prest	pointer
)	O
{	O
const	O
char	O
*	O
w	pointer
;	O
int	O
n	long
=	O
0	int
;	O
int	O
rc	int
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	pointer
,	O
MU_CFG_ARRAY	int
)	O
)	O
return	O
1	int
;	O
w	pointer
=	O
getword	function
(	O
val	pointer
,	O
&	O
n	long
)	O
;	O
if	O
(	O
!	O
w	pointer
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
w	pointer
,	O
"from"	pointer
)	O
==	O
0	int
)	O
{	O
w	pointer
=	O
getword	function
(	O
val	pointer
,	O
&	O
n	long
)	O
;	O
if	O
(	O
!	O
w	pointer
)	O
return	O
1	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
w	pointer
,	O
"any"	pointer
)	O
==	O
0	int
)	O
cidr	pointer
->	O
len	int
=	O
0	int
;	O
else	O
{	O
rc	int
=	O
mu_cidr_from_string	function
(	O
cidr	pointer
,	O
w	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"invalid source CIDR: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
prest	pointer
)	O
{	O
if	O
(	O
n	long
==	O
val	pointer
->	O
v	pointer
.	O
arg	pointer
.	O
c	char
)	O
*	O
prest	pointer
=	O
NULL	O
;	O
else	O
{	O
size_t	long
size	long
=	O
0	int
;	O
int	O
i	int
;	O
char	O
*	O
buf	pointer
;	O
for	O
(	O
i	int
=	O
n	long
;	O
i	int
<	O
val	pointer
->	O
v	pointer
.	O
arg	pointer
.	O
c	char
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
&	O
val	pointer
->	O
v	pointer
.	O
arg	pointer
.	O
v	pointer
[	O
i	int
]	O
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
size	long
+=	O
strlen	function
(	O
val	pointer
->	O
v	pointer
.	O
arg	pointer
.	O
v	pointer
[	O
i	int
]	O
.	O
v	pointer
.	O
string	pointer
)	O
+	O
1	int
;	O
}	O
buf	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
{	O
mu_error	function
(	O
"%s"	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
*	O
prest	pointer
=	O
buf	pointer
;	O
for	O
(	O
i	int
=	O
n	long
;	O
i	int
<	O
val	pointer
->	O
v	pointer
.	O
arg	pointer
.	O
c	char
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
>	O
n	long
)	O
*	O
buf	pointer
++	O
=	O
' '	O
;	O
strcpy	function
(	O
buf	pointer
,	O
val	pointer
->	O
v	pointer
.	O
arg	pointer
.	O
v	pointer
[	O
i	int
]	O
.	O
v	pointer
.	O
string	pointer
)	O
;	O
buf	pointer
+=	O
strlen	function
(	O
buf	pointer
)	O
;	O
}	O
*	O
buf	pointer
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
n	long
!=	O
val	pointer
->	O
v	pointer
.	O
arg	pointer
.	O
c	char
)	O
{	O
mu_error	function
(	O
_	O
(	O
"junk after IP address"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_allow	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	pointer
)	O
{	O
int	O
rc	int
;	O
mu_acl_t	pointer
acl	pointer
=	O
*	O
(	O
mu_acl_t	pointer
*	O
)	O
data	pointer
;	O
struct	O
mu_cidr	struct
cidr	pointer
;	O
if	O
(	O
parsearg	function
(	O
val	pointer
,	O
&	O
cidr	pointer
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_acl_append	function
(	O
acl	pointer
,	O
mu_acl_accept	int
,	O
NULL	O
,	O
&	O
cidr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot append acl entry: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
cb_deny	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	pointer
)	O
{	O
int	O
rc	int
;	O
mu_acl_t	pointer
acl	pointer
=	O
*	O
(	O
mu_acl_t	pointer
*	O
)	O
data	pointer
;	O
struct	O
mu_cidr	struct
cidr	pointer
;	O
if	O
(	O
parsearg	function
(	O
val	pointer
,	O
&	O
cidr	pointer
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_acl_append	function
(	O
acl	pointer
,	O
mu_acl_deny	int
,	O
NULL	O
,	O
&	O
cidr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot append acl entry: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
cb_log	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	pointer
)	O
{	O
int	O
rc	int
;	O
mu_acl_t	pointer
acl	pointer
=	O
*	O
(	O
mu_acl_t	pointer
*	O
)	O
data	pointer
;	O
struct	O
mu_cidr	struct
cidr	pointer
;	O
char	O
*	O
rest	pointer
;	O
if	O
(	O
parsearg	function
(	O
val	pointer
,	O
&	O
cidr	pointer
,	O
&	O
rest	pointer
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_acl_append	function
(	O
acl	pointer
,	O
mu_acl_log	int
,	O
rest	pointer
,	O
&	O
cidr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot append acl entry: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
cb_exec	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	pointer
)	O
{	O
int	O
rc	int
;	O
mu_acl_t	pointer
acl	pointer
=	O
*	O
(	O
mu_acl_t	pointer
*	O
)	O
data	pointer
;	O
struct	O
mu_cidr	struct
cidr	pointer
;	O
char	O
*	O
rest	pointer
;	O
if	O
(	O
parsearg	function
(	O
val	pointer
,	O
&	O
cidr	pointer
,	O
&	O
rest	pointer
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_acl_append	function
(	O
acl	pointer
,	O
mu_acl_exec	int
,	O
rest	pointer
,	O
&	O
cidr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot append acl entry: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
cb_ifexec	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	pointer
)	O
{	O
int	O
rc	int
;	O
mu_acl_t	pointer
acl	pointer
=	O
*	O
(	O
mu_acl_t	pointer
*	O
)	O
data	pointer
;	O
struct	O
mu_cidr	struct
cidr	pointer
;	O
char	O
*	O
rest	pointer
;	O
if	O
(	O
parsearg	function
(	O
val	pointer
,	O
&	O
cidr	pointer
,	O
&	O
rest	pointer
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
mu_acl_append	function
(	O
acl	pointer
,	O
mu_acl_ifexec	int
,	O
rest	pointer
,	O
&	O
cidr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot append acl entry: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
struct	O
mu_cfg_param	struct
acl_param	array
[	O
]	O
=	O
{	O
{	O
"allow"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_allow	function
,	O
N_	O
(	O
"Allow connections from this IP address. Optional word `from' is "	pointer
"allowed between it and its argument. The same holds true for other "	pointer
"actions below."	pointer
)	O
,	O
N_	O
(	O
"addr: IP"	pointer
)	O
}	O
,	O
{	O
"deny"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_deny	function
,	O
N_	O
(	O
"Deny connections from this IP address."	pointer
)	O
,	O
N_	O
(	O
"addr: IP"	pointer
)	O
}	O
,	O
{	O
"log"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_log	function
,	O
N_	O
(	O
"Log connections from this IP address."	pointer
)	O
,	O
N_	O
(	O
"addr: IP"	pointer
)	O
}	O
,	O
{	O
"exec"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_exec	function
,	O
N_	O
(	O
"Execute supplied program if a connection from this IP address is "	pointer
"requested.\n\n"	pointer
"The following macros are expanded in <program> before executing:\n"	pointer
"  address  -  Source IP address\n"	pointer
"  port     -  Source port number\n"	pointer
)	O
,	O
N_	O
(	O
"addr: IP> <program: string"	pointer
)	O
}	O
,	O
{	O
"ifexec"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_ifexec	function
,	O
N_	O
(	O
"If a connection from this IP address is requested, execute supplied "	pointer
"program and allow or deny the connection depending on its exit code. "	pointer
"See `exec' for a description of its arguments."	pointer
)	O
,	O
N_	O
(	O
"addr: IP> <program: string"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
acl_section_parser	function
(	O
enum	O
mu_cfg_section_stage	enum
stage	enum
,	O
const	O
mu_cfg_node_t	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
section_label	pointer
,	O
void	O
*	O
*	O
section_data	pointer
,	O
void	O
*	O
call_data	pointer
,	O
mu_cfg_tree_t	struct
*	O
tree	pointer
)	O
{	O
switch	O
(	O
stage	enum
)	O
{	O
case	O
mu_cfg_section_start	int
:	O
{	O
void	O
*	O
data	pointer
=	O
*	O
section_data	pointer
;	O
mu_acl_create	function
(	O
(	O
mu_acl_t	pointer
*	O
)	O
data	pointer
)	O
;	O
}	O
break	O
;	O
case	O
mu_cfg_section_end	int
:	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
mu_acl_cfg_init	function
(	O
void	O
)	O
{	O
struct	O
mu_cfg_section	int
*	O
section	struct
;	O
if	O
(	O
mu_create_canned_section	function
(	O
"acl"	pointer
,	O
&	O
section	struct
)	O
==	O
0	int
)	O
{	O
section	struct
->	O
parser	pointer
=	O
acl_section_parser	function
;	O
mu_cfg_section_add_params	function
(	O
section	struct
,	O
acl_param	array
)	O
;	O
}	O
}	O
