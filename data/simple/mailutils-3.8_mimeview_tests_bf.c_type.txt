typedef	O
int	O
(	O
*	O
ACTION	pointer
)	O
(	O
FILE	struct
*	O
,	O
char	O
*	O
)	O
;	O
int	O
seek_file	function
(	O
FILE	struct
*	O
fp	pointer
,	O
char	O
*	O
arg	pointer
)	O
{	O
long	O
off	long
;	O
int	O
whence	int
;	O
switch	O
(	O
arg	pointer
[	O
0	int
]	O
)	O
{	O
case	O
'+'	O
:	O
whence	int
=	O
SEEK_CUR	int
;	O
arg	pointer
++	O
;	O
break	O
;	O
case	O
'-'	O
:	O
whence	int
=	O
SEEK_CUR	int
;	O
break	O
;	O
case	O
'$'	O
:	O
whence	int
=	O
SEEK_END	int
;	O
arg	pointer
++	O
;	O
break	O
;	O
default	O
:	O
whence	int
=	O
SEEK_SET	int
;	O
}	O
if	O
(	O
sscanf	function
(	O
arg	pointer
,	O
"%ld"	pointer
,	O
&	O
off	long
)	O
!=	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"bad offset: %s\n"	pointer
,	O
arg	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
return	O
fseek	function
(	O
fp	pointer
,	O
off	long
,	O
whence	int
)	O
;	O
}	O
int	O
write_string	function
(	O
FILE	struct
*	O
fp	pointer
,	O
char	O
*	O
arg	pointer
)	O
{	O
size_t	long
n	long
=	O
strlen	function
(	O
arg	pointer
)	O
;	O
return	O
fwrite	function
(	O
arg	pointer
,	O
n	long
,	O
1	int
,	O
fp	pointer
)	O
!=	O
1	int
;	O
}	O
int	O
write_byte	function
(	O
FILE	struct
*	O
fp	pointer
,	O
char	O
*	O
arg	pointer
)	O
{	O
int	O
c	int
;	O
if	O
(	O
strlen	function
(	O
arg	pointer
)	O
==	O
3	int
&&	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'\''	O
||	O
arg	pointer
[	O
0	int
]	O
==	O
'"'	O
)	O
)	O
c	int
=	O
arg	pointer
[	O
1	int
]	O
;	O
else	O
{	O
char	O
*	O
p	pointer
;	O
unsigned	O
long	O
n	long
=	O
strtoul	function
(	O
arg	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
||	O
n	long
>	O
UCHAR_MAX	O
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
c	int
=	O
n	long
;	O
}	O
return	O
fwrite	function
(	O
&	O
c	int
,	O
1	int
,	O
1	int
,	O
fp	pointer
)	O
!=	O
1	int
;	O
}	O
int	O
write_short	function
(	O
FILE	struct
*	O
fp	pointer
,	O
char	O
*	O
arg	pointer
)	O
{	O
uint16_t	short
val	short
;	O
char	O
*	O
p	pointer
;	O
unsigned	O
long	O
n	long
=	O
strtoul	function
(	O
arg	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
||	O
n	long
>	O
UINT16_MAX	O
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
val	short
=	O
n	long
;	O
return	O
fwrite	function
(	O
&	O
val	short
,	O
sizeof	O
(	O
val	short
)	O
,	O
1	int
,	O
fp	pointer
)	O
!=	O
1	int
;	O
}	O
int	O
write_int	function
(	O
FILE	struct
*	O
fp	pointer
,	O
char	O
*	O
arg	pointer
)	O
{	O
uint32_t	int
val	short
;	O
char	O
*	O
p	pointer
;	O
unsigned	O
long	O
n	long
=	O
strtoul	function
(	O
arg	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
||	O
n	long
>	O
UINT32_MAX	O
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
val	short
=	O
n	long
;	O
return	O
fwrite	function
(	O
&	O
val	short
,	O
sizeof	O
(	O
val	short
)	O
,	O
1	int
,	O
fp	pointer
)	O
!=	O
1	int
;	O
}	O
static	O
struct	O
dispatch	struct
{	O
char	O
*	O
opt	pointer
;	O
int	O
(	O
*	O
act	pointer
)	O
(	O
FILE	struct
*	O
,	O
char	O
*	O
)	O
;	O
}	O
dispatch	struct
[	O
]	O
=	O
{	O
{	O
"-seek"	pointer
,	O
seek_file	function
}	O
,	O
{	O
"-string"	pointer
,	O
write_string	function
}	O
,	O
{	O
"-byte"	pointer
,	O
write_byte	function
}	O
,	O
{	O
"-short"	pointer
,	O
write_short	function
}	O
,	O
{	O
"-int"	pointer
,	O
write_int	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
ACTION	pointer
find_action	function
(	O
char	O
const	O
*	O
opt	pointer
)	O
{	O
struct	O
dispatch	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
dispatch	struct
;	O
p	pointer
->	O
opt	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
p	pointer
->	O
opt	pointer
,	O
opt	pointer
)	O
==	O
0	int
)	O
return	O
p	pointer
->	O
act	pointer
;	O
return	O
NULL	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
name	pointer
;	O
FILE	struct
*	O
fp	pointer
;	O
ACTION	pointer
action	pointer
;	O
char	O
*	O
*	O
pp	pointer
;	O
assert	O
(	O
argc	int
>	O
1	int
)	O
;	O
name	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
fp	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
perror	function
(	O
name	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
pp	pointer
=	O
argv	pointer
+	O
2	int
;	O
while	O
(	O
*	O
pp	pointer
)	O
{	O
char	O
*	O
opt	pointer
=	O
*	O
pp	pointer
++	O
,	O
*	O
arg	pointer
;	O
if	O
(	O
opt	pointer
[	O
0	int
]	O
!=	O
'-'	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"not an option: %s\n"	pointer
,	O
opt	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
action	pointer
=	O
find_action	function
(	O
opt	pointer
)	O
;	O
if	O
(	O
!	O
action	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"unknown action: %s\n"	pointer
,	O
opt	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
if	O
(	O
!	O
*	O
pp	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"argument to %s missing\n"	pointer
,	O
opt	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
arg	pointer
=	O
*	O
pp	pointer
++	O
;	O
if	O
(	O
action	pointer
(	O
fp	pointer
,	O
arg	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s %s: %s\n"	pointer
,	O
opt	pointer
,	O
arg	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
}	O
fclose	function
(	O
fp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
