int	O
swlib_arfcopy	function
(	O
XFORMAT	struct
*	O
package	pointer
,	O
SWPATH	struct
*	O
swpath	pointer
,	O
int	O
ofd	int
,	O
char	O
*	O
leadingpath	pointer
,	O
int	O
do_preview	int
,	O
int	O
*	O
deadman	pointer
)	O
{	O
int	O
format	pointer
;	O
int	O
output_format	enum
;	O
char	O
*	O
name	array
;	O
int	O
ifd	int
;	O
int	O
ret	int
;	O
int	O
aret	int
;	O
int	O
parseret	int
;	O
int	O
pathret	int
;	O
int	O
retval	int
=	O
-	O
1	int
;	O
int	O
depth	pointer
;	O
STROB	struct
*	O
resolved_path	pointer
;	O
STROB	struct
*	O
namebuf	pointer
;	O
STROB	struct
*	O
newnamebuf	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
long	O
int	O
bytes	long
=	O
0	int
;	O
int	O
tarheaderflags	int
;	O
int	O
do_gnu_long_link	int
;	O
int	O
namelengthret	int
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
;	O
newnamebuf	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
namebuf	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
resolved_path	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
tarheaderflags	int
=	O
xformat_get_tarheader_flags	function
(	O
package	pointer
)	O
;	O
file_hdr	pointer
=	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
xformat_vfile_hdr	function
(	O
package	pointer
)	O
)	O
;	O
output_format	enum
=	O
xformat_get_output_format	function
(	O
package	pointer
)	O
;	O
format	pointer
=	O
xformat_get_format	function
(	O
package	pointer
)	O
;	O
ifd	int
=	O
xformat_get_ifd	function
(	O
package	pointer
)	O
;	O
if	O
(	O
ifd	int
<	O
0	int
)	O
return	O
-	O
32	int
;	O
xformat_set_ofd	function
(	O
package	pointer
,	O
ofd	int
)	O
;	O
while	O
(	O
(	O
ret	int
=	O
xformat_read_header	function
(	O
package	pointer
)	O
)	O
>	O
0	int
&&	O
(	O
!	O
deadman	pointer
||	O
(	O
deadman	pointer
&&	O
*	O
deadman	pointer
==	O
0	int
)	O
)	O
)	O
{	O
if	O
(	O
xformat_is_end_of_archive	function
(	O
package	pointer
)	O
)	O
{	O
break	O
;	O
}	O
xformat_get_name	function
(	O
package	pointer
,	O
namebuf	pointer
)	O
;	O
name	array
=	O
strob_str	function
(	O
namebuf	pointer
)	O
;	O
strob_strcpy	function
(	O
newnamebuf	pointer
,	O
leadingpath	pointer
)	O
;	O
swlib_unix_dircat	function
(	O
newnamebuf	pointer
,	O
name	array
)	O
;	O
parseret	int
=	O
swpath_parse_path	function
(	O
swpath	pointer
,	O
name	array
)	O
;	O
if	O
(	O
parseret	int
<	O
0	int
)	O
{	O
retval	int
=	O
-	O
3	int
;	O
goto	O
error	O
;	O
}	O
pathret	int
=	O
swlib_vrealpath	function
(	O
""	pointer
,	O
name	array
,	O
&	O
depth	pointer
,	O
resolved_path	pointer
)	O
;	O
if	O
(	O
depth	pointer
<=	O
1	int
&&	O
strstr	function
(	O
name	array
,	O
".."	pointer
)	O
)	O
{	O
retval	int
=	O
-	O
4	int
;	O
goto	O
error	O
;	O
}	O
namelengthret	int
=	O
taru_is_tar_filename_too_long	function
(	O
strob_str	function
(	O
newnamebuf	pointer
)	O
,	O
tarheaderflags	int
,	O
&	O
do_gnu_long_link	int
,	O
1	int
)	O
;	O
if	O
(	O
namelengthret	int
)	O
{	O
retval	int
=	O
-	O
5	int
;	O
goto	O
error	O
;	O
}	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
strob_str	function
(	O
newnamebuf	pointer
)	O
)	O
;	O
aret	int
=	O
xformat_write_header	function
(	O
package	pointer
)	O
;	O
if	O
(	O
aret	int
<=	O
0	int
)	O
goto	O
error	O
;	O
bytes	long
+=	O
aret	int
;	O
aret	int
=	O
xformat_copy_pass	function
(	O
package	pointer
,	O
ofd	int
,	O
ifd	int
)	O
;	O
if	O
(	O
aret	int
<	O
0	int
)	O
goto	O
error	O
;	O
bytes	long
+=	O
aret	int
;	O
}	O
if	O
(	O
deadman	pointer
&&	O
*	O
deadman	pointer
)	O
return	O
-	O
1	int
;	O
aret	int
=	O
taru_write_archive_trailer	function
(	O
package	pointer
->	O
taruM	pointer
,	O
output_format	enum
,	O
ofd	int
,	O
512	int
,	O
(	O
int	O
)	O
bytes	long
,	O
tarheaderflags	int
)	O
;	O
retval	int
=	O
0	int
;	O
if	O
(	O
aret	int
<=	O
0	int
)	O
{	O
retval	int
=	O
-	O
2	int
;	O
}	O
error	O
:	O
strob_close	function
(	O
resolved_path	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
strob_close	function
(	O
namebuf	pointer
)	O
;	O
return	O
retval	int
;	O
}	O
int	O
swlib_audit_distribution	function
(	O
XFORMAT	struct
*	O
xformat	pointer
,	O
int	O
do_re_encode	int
,	O
int	O
ofd	int
,	O
uintmax_t	long
*	O
pstatbytes	pointer
,	O
int	O
*	O
deadman	pointer
,	O
void	O
(	O
*	O
alarm_handler	pointer
)	O
(	O
int	O
)	O
)	O
{	O
int	O
ret	int
;	O
int	O
retval	int
;	O
SWI	struct
*	O
swi	pointer
;	O
SWPATH	struct
*	O
swpath	pointer
;	O
UINFORMAT	struct
*	O
uinformat	pointer
;	O
SWVARFS	struct
*	O
swvarfs	pointer
;	O
int	O
ifd	int
;	O
SWI_DISTDATA	struct
distdataO	struct
;	O
swvarfs	pointer
=	O
xformat_get_swvarfs	function
(	O
xformat	pointer
)	O
;	O
uinformat	pointer
=	O
swvarfs_get_uinformat	function
(	O
swvarfs	pointer
)	O
;	O
swpath	pointer
=	O
uinfile_get_swpath	function
(	O
uinformat	pointer
)	O
;	O
swpath_reset	function
(	O
swpath	pointer
)	O
;	O
xformat_set_tarheader_flag	function
(	O
xformat	pointer
,	O
TARU_TAR_FRAGILE_FORMAT	O
,	O
1	int
)	O
;	O
if	O
(	O
uinfile_get_layout_type	function
(	O
uinformat	pointer
)	O
==	O
UINFILE_FILELAYOUT_IEEE	int
)	O
{	O
swi	pointer
=	O
swi_create	function
(	O
)	O
;	O
swi	pointer
->	O
xformatM	pointer
=	O
xformat	pointer
;	O
swi	pointer
->	O
xformatM	pointer
=	O
xformat	pointer
;	O
swi	pointer
->	O
swvarfsM	pointer
=	O
swvarfs	pointer
;	O
swi	pointer
->	O
uinformatM	pointer
=	O
uinformat	pointer
;	O
swi	pointer
->	O
swpathM	pointer
=	O
swpath	pointer
;	O
ret	int
=	O
swi_decode_catalog	function
(	O
swi	pointer
)	O
;	O
swi_distdata_resolve	function
(	O
swi	pointer
,	O
&	O
distdataO	struct
,	O
0	int
)	O
;	O
swvarfs_uxfio_fcntl	function
(	O
swvarfs	pointer
,	O
UXFIO_F_ARM_AUTO_DISABLE	O
,	O
1	int
)	O
;	O
ifd	int
=	O
xformat_get_ifd	function
(	O
xformat	pointer
)	O
;	O
}	O
else	O
{	O
swvarfs_uxfio_fcntl	function
(	O
swvarfs	pointer
,	O
UXFIO_F_ARM_AUTO_DISABLE	O
,	O
1	int
)	O
;	O
ifd	int
=	O
xformat_get_ifd	function
(	O
xformat	pointer
)	O
;	O
}	O
if	O
(	O
uxfio_lseek	function
(	O
ifd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uxfio_lseek error: %s : %d\n"	pointer
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
swpath_reset	function
(	O
swpath	pointer
)	O
;	O
if	O
(	O
do_re_encode	int
)	O
{	O
swgp_signal_block	function
(	O
SIGALRM	int
,	O
(	O
sigset_t	struct
*	O
)	O
NULL	O
)	O
;	O
retval	int
=	O
swlib_arfcopy	function
(	O
xformat	pointer
,	O
swpath	pointer
,	O
ofd	int
,	O
""	pointer
,	O
0	int
,	O
deadman	pointer
)	O
;	O
swgp_signal_unblock	function
(	O
SIGALRM	int
,	O
(	O
sigset_t	struct
*	O
)	O
NULL	O
)	O
;	O
}	O
else	O
{	O
xformat_set_pass_fd	function
(	O
xformat	pointer
,	O
ofd	int
)	O
;	O
retval	int
=	O
taruib_arfcopy	function
(	O
(	O
void	O
*	O
)	O
xformat	pointer
,	O
(	O
void	O
*	O
)	O
swpath	pointer
,	O
ofd	int
,	O
""	pointer
,	O
0	int
,	O
pstatbytes	pointer
,	O
deadman	pointer
,	O
alarm_handler	pointer
)	O
;	O
}	O
return	O
retval	int
;	O
}	O
