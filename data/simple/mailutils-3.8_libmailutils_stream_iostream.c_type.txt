static	O
int	O
_iostream_read	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	long
,	O
size_t	long
*	O
pnread	pointer
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
str	pointer
;	O
int	O
rc	int
=	O
mu_stream_read	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
,	O
buf	pointer
,	O
bufsize	long
,	O
pnread	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
sp	pointer
->	O
last_err_str	int
=	O
_MU_STREAM_INPUT	int
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_iostream_readdelim	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	long
,	O
int	O
delim	int
,	O
size_t	long
*	O
pnread	pointer
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
str	pointer
;	O
int	O
rc	int
=	O
mu_stream_readdelim	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
,	O
buf	pointer
,	O
bufsize	long
,	O
delim	int
,	O
pnread	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
sp	pointer
->	O
last_err_str	int
=	O
_MU_STREAM_INPUT	int
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_iostream_write	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	long
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
str	pointer
;	O
int	O
rc	int
=	O
mu_stream_write	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
,	O
buf	pointer
,	O
bufsize	long
,	O
pnwrite	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
sp	pointer
->	O
last_err_str	int
=	O
_MU_STREAM_OUTPUT	int
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_iostream_flush	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
str	pointer
;	O
int	O
rc	int
=	O
mu_stream_flush	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
sp	pointer
->	O
last_err_str	int
=	O
_MU_STREAM_INPUT	int
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
!=	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
)	O
{	O
rc	int
=	O
mu_stream_flush	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
sp	pointer
->	O
last_err_str	int
=	O
_MU_STREAM_OUTPUT	int
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_iostream_open	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
str	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_stream_open	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
sp	pointer
->	O
last_err_str	int
=	O
_MU_STREAM_INPUT	int
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
!=	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
)	O
{	O
rc	int
=	O
mu_stream_open	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
sp	pointer
->	O
last_err_str	int
=	O
_MU_STREAM_OUTPUT	int
;	O
mu_stream_close	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
)	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_iostream_close	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
str	pointer
;	O
mu_stream_close	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
)	O
;	O
mu_stream_close	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
_iostream_done	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
str	pointer
;	O
mu_stream_unref	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
)	O
;	O
mu_stream_unref	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
)	O
;	O
}	O
static	O
int	O
_iostream_ctl	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
code	int
,	O
int	O
opcode	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
str	pointer
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
MU_IOCTL_TRANSPORT	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
mu_transport_t	pointer
*	O
ptrans	pointer
=	O
arg	pointer
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
ptrans	pointer
[	O
0	int
]	O
=	O
(	O
mu_transport_t	pointer
)	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
;	O
ptrans	pointer
[	O
1	int
]	O
=	O
(	O
mu_transport_t	pointer
)	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
ptrans	pointer
=	O
arg	pointer
;	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
=	O
(	O
mu_stream_t	pointer
)	O
ptrans	pointer
[	O
0	int
]	O
;	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
=	O
(	O
mu_stream_t	pointer
)	O
ptrans	pointer
[	O
1	int
]	O
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_SUBSTREAM	int
:	O
case	O
MU_IOCTL_TOPSTREAM	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
mu_stream_t	pointer
*	O
pstr	pointer
=	O
arg	pointer
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
pstr	pointer
[	O
0	int
]	O
=	O
sp	pointer
->	O
transport	pointer
[	O
0	int
]	O
;	O
mu_stream_ref	function
(	O
pstr	pointer
[	O
0	int
]	O
)	O
;	O
pstr	pointer
[	O
1	int
]	O
=	O
sp	pointer
->	O
transport	pointer
[	O
1	int
]	O
;	O
mu_stream_ref	function
(	O
pstr	pointer
[	O
1	int
]	O
)	O
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
mu_stream_unref	function
(	O
sp	pointer
->	O
transport	pointer
[	O
0	int
]	O
)	O
;	O
sp	pointer
->	O
transport	pointer
[	O
0	int
]	O
=	O
pstr	pointer
[	O
0	int
]	O
;	O
mu_stream_ref	function
(	O
sp	pointer
->	O
transport	pointer
[	O
0	int
]	O
)	O
;	O
mu_stream_unref	function
(	O
sp	pointer
->	O
transport	pointer
[	O
1	int
]	O
)	O
;	O
sp	pointer
->	O
transport	pointer
[	O
1	int
]	O
=	O
pstr	pointer
[	O
1	int
]	O
;	O
mu_stream_ref	function
(	O
sp	pointer
->	O
transport	pointer
[	O
1	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_TRANSPORT_BUFFER	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
struct	O
mu_buffer_query	struct
*	O
qp	pointer
=	O
arg	pointer
;	O
if	O
(	O
!	O
MU_TRANSPORT_VALID_TYPE	O
(	O
qp	pointer
->	O
type	int
)	O
||	O
!	O
sp	pointer
->	O
transport	pointer
[	O
qp	pointer
->	O
type	int
]	O
)	O
return	O
EINVAL	int
;	O
return	O
mu_stream_ioctl	function
(	O
sp	pointer
->	O
transport	pointer
[	O
qp	pointer
->	O
type	int
]	O
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
;	O
}	O
case	O
MU_IOCTL_TCPSTREAM	int
:	O
return	O
mu_stream_ioctl	function
(	O
sp	pointer
->	O
transport	pointer
[	O
0	int
]	O
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_iostream_wait	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
*	O
pflags	pointer
,	O
struct	O
timeval	struct
*	O
tvp	pointer
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
str	pointer
;	O
int	O
rc	int
=	O
EINVAL	int
;	O
if	O
(	O
*	O
pflags	pointer
==	O
MU_STREAM_READY_RD	int
)	O
{	O
rc	int
=	O
mu_stream_wait	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
,	O
pflags	pointer
,	O
tvp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
sp	pointer
->	O
last_err_str	int
=	O
_MU_STREAM_INPUT	int
;	O
}	O
else	O
if	O
(	O
*	O
pflags	pointer
==	O
MU_STREAM_READY_WR	int
)	O
{	O
rc	int
=	O
mu_stream_wait	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
,	O
pflags	pointer
,	O
tvp	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
sp	pointer
->	O
last_err_str	int
=	O
_MU_STREAM_OUTPUT	int
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
_iostream_shutdown	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
how	int
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
str	pointer
;	O
int	O
rc	int
=	O
EINVAL	int
;	O
switch	O
(	O
how	int
)	O
{	O
case	O
MU_STREAM_READ	int
:	O
rc	int
=	O
mu_stream_shutdown	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
,	O
how	int
)	O
;	O
if	O
(	O
rc	int
)	O
sp	pointer
->	O
last_err_str	int
=	O
_MU_STREAM_INPUT	int
;	O
break	O
;	O
case	O
MU_STREAM_WRITE	int
:	O
rc	int
=	O
mu_stream_shutdown	function
(	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
,	O
how	int
)	O
;	O
if	O
(	O
rc	int
)	O
sp	pointer
->	O
last_err_str	int
=	O
_MU_STREAM_OUTPUT	int
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
const	O
char	O
*	O
_iostream_error_string	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
rc	int
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
str	pointer
;	O
mu_stream_t	pointer
transport	pointer
=	O
sp	pointer
->	O
transport	pointer
[	O
sp	pointer
->	O
last_err_str	int
]	O
;	O
if	O
(	O
transport	pointer
)	O
return	O
mu_stream_strerror	function
(	O
transport	pointer
,	O
rc	int
)	O
;	O
return	O
mu_strerror	function
(	O
rc	int
)	O
;	O
}	O
int	O
mu_iostream_create	function
(	O
mu_stream_t	pointer
*	O
pref	pointer
,	O
mu_stream_t	pointer
in	pointer
,	O
mu_stream_t	pointer
out	pointer
)	O
{	O
struct	O
_mu_iostream	struct
*	O
sp	pointer
;	O
sp	pointer
=	O
(	O
struct	O
_mu_iostream	struct
*	O
)	O
_mu_stream_create	function
(	O
sizeof	O
(	O
*	O
sp	pointer
)	O
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
!	O
sp	pointer
)	O
return	O
ENOMEM	int
;	O
sp	pointer
->	O
stream	pointer
.	O
flags	int
|=	O
_MU_STR_OPEN	int
;	O
sp	pointer
->	O
stream	pointer
.	O
read	pointer
=	O
_iostream_read	function
;	O
if	O
(	O
in	pointer
->	O
readdelim	pointer
)	O
sp	pointer
->	O
stream	pointer
.	O
readdelim	pointer
=	O
_iostream_readdelim	function
;	O
sp	pointer
->	O
stream	pointer
.	O
write	pointer
=	O
_iostream_write	function
;	O
sp	pointer
->	O
stream	pointer
.	O
flush	pointer
=	O
_iostream_flush	function
;	O
sp	pointer
->	O
stream	pointer
.	O
open	pointer
=	O
_iostream_open	function
;	O
sp	pointer
->	O
stream	pointer
.	O
close	pointer
=	O
_iostream_close	function
;	O
sp	pointer
->	O
stream	pointer
.	O
done	pointer
=	O
_iostream_done	function
;	O
sp	pointer
->	O
stream	pointer
.	O
ctl	pointer
=	O
_iostream_ctl	function
;	O
sp	pointer
->	O
stream	pointer
.	O
wait	pointer
=	O
_iostream_wait	function
;	O
sp	pointer
->	O
stream	pointer
.	O
shutdown	pointer
=	O
_iostream_shutdown	function
;	O
sp	pointer
->	O
stream	pointer
.	O
error_string	pointer
=	O
_iostream_error_string	function
;	O
mu_stream_ref	function
(	O
in	pointer
)	O
;	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_INPUT	int
]	O
=	O
in	pointer
;	O
mu_stream_ref	function
(	O
out	pointer
)	O
;	O
sp	pointer
->	O
transport	pointer
[	O
_MU_STREAM_OUTPUT	int
]	O
=	O
out	pointer
;	O
mu_stream_set_buffer	function
(	O
(	O
mu_stream_t	pointer
)	O
sp	pointer
,	O
mu_buffer_line	int
,	O
0	int
)	O
;	O
*	O
pref	pointer
=	O
(	O
mu_stream_t	pointer
)	O
sp	pointer
;	O
return	O
0	int
;	O
}	O
