static	O
const	O
char	O
*	O
file	pointer
;	O
static	O
int	O
unlock	int
;	O
static	O
int	O
flags	int
;	O
static	O
int	O
retries	int
;	O
static	O
unsigned	O
force	int
;	O
static	O
int	O
debug	int
;	O
static	O
void	O
cli_force	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
arg	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
errmsg	pointer
;	O
rc	int
=	O
mu_str_to_c	function
(	O
arg	pointer
,	O
opt	pointer
->	O
opt_type	enum
,	O
opt	pointer
->	O
opt_ptr	pointer
,	O
&	O
errmsg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
opt	pointer
->	O
opt_long	pointer
)	O
mu_parseopt_error	function
(	O
po	pointer
,	O
"--%s: %s"	pointer
,	O
opt	pointer
->	O
opt_long	pointer
,	O
errmsg	pointer
?	O
errmsg	pointer
:	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
mu_parseopt_error	function
(	O
po	pointer
,	O
"-%c: %s"	pointer
,	O
opt	pointer
->	O
opt_short	int
,	O
errmsg	pointer
?	O
errmsg	pointer
:	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
free	function
(	O
errmsg	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
}	O
else	O
*	O
(	O
unsigned	O
*	O
)	O
opt	pointer
->	O
opt_ptr	pointer
=	O
1	int
;	O
}	O
static	O
struct	O
mu_option	struct
dotlock_options	array
[	O
]	O
=	O
{	O
{	O
"unlock"	pointer
,	O
'u'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"unlock"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
unlock	int
}	O
,	O
{	O
"force"	pointer
,	O
'f'	O
,	O
N_	O
(	O
"MINUTES"	pointer
)	O
,	O
MU_OPTION_ARG_OPTIONAL	int
,	O
N_	O
(	O
"forcibly break an existing lock older than a certain time"	pointer
)	O
,	O
mu_c_uint	int
,	O
&	O
force	int
,	O
cli_force	function
}	O
,	O
{	O
"retry"	pointer
,	O
'r'	O
,	O
N_	O
(	O
"RETRIES"	pointer
)	O
,	O
MU_OPTION_ARG_OPTIONAL	int
,	O
N_	O
(	O
"retry the lock a few times"	pointer
)	O
,	O
mu_c_int	int
,	O
&	O
retries	int
}	O
,	O
{	O
"debug"	pointer
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print details of failure reasons to stderr"	pointer
)	O
,	O
mu_c_bool	int
,	O
&	O
debug	int
}	O
,	O
MU_OPTION_END	O
}	O
,	O
*	O
options	array
[	O
]	O
=	O
{	O
dotlock_options	array
,	O
NULL	O
}	O
;	O
struct	O
mu_cfg_param	struct
dotlock_cfg_param	array
[	O
]	O
=	O
{	O
{	O
"force"	pointer
,	O
mu_c_time	int
,	O
&	O
force	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Forcibly break an existing lock older than the specified time."	pointer
)	O
}	O
,	O
{	O
"retry"	pointer
,	O
mu_c_int	int
,	O
&	O
retries	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Number of times to retry acquiring the lock."	pointer
)	O
}	O
,	O
{	O
"debug"	pointer
,	O
mu_c_bool	int
,	O
&	O
debug	int
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Print details of failure reasons to stderr."	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
mu_cli_setup	struct
cli	struct
=	O
{	O
options	array
,	O
dotlock_cfg_param	array
,	O
N_	O
(	O
"GNU dotlock -- lock mail spool files."	pointer
)	O
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
NULL	O
,	O
N_	O
(	O
"Returns 0 on success, 3 if locking the file fails because it's already locked, and 1 if some other kind of error occurred."	pointer
)	O
,	O
MU_DL_EX_ERROR	int
,	O
MU_DL_EX_ERROR	int
}	O
;	O
char	O
*	O
capa	pointer
[	O
]	O
=	O
{	O
"debug"	pointer
,	O
NULL	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
mu_locker_t	pointer
locker	pointer
=	O
0	int
;	O
int	O
err	int
=	O
0	int
;	O
pid_t	int
usergid	int
=	O
getgid	function
(	O
)	O
;	O
pid_t	int
mailgid	int
=	O
getegid	function
(	O
)	O
;	O
MU_APP_INIT_NLS	O
(	O
)	O
;	O
if	O
(	O
setegid	function
(	O
usergid	int
)	O
<	O
0	int
)	O
return	O
MU_DL_EX_ERROR	int
;	O
mu_cli	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
cli	struct
,	O
capa	pointer
,	O
NULL	O
,	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
;	O
switch	O
(	O
argc	int
)	O
{	O
case	O
0	int
:	O
mu_error	function
(	O
_	O
(	O
"FILE must be specified"	pointer
)	O
)	O
;	O
exit	function
(	O
MU_DL_EX_ERROR	int
)	O
;	O
case	O
1	int
:	O
file	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
break	O
;	O
default	O
:	O
mu_error	function
(	O
_	O
(	O
"only one FILE can be specified"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
force	int
)	O
{	O
force	int
*=	O
60	int
;	O
flags	int
|=	O
MU_LOCKER_TIME	int
;	O
}	O
if	O
(	O
retries	int
!=	O
0	int
)	O
flags	int
|=	O
MU_LOCKER_RETRY	int
;	O
if	O
(	O
(	O
err	int
=	O
mu_locker_create	function
(	O
&	O
locker	pointer
,	O
file	pointer
,	O
flags	int
)	O
)	O
)	O
{	O
if	O
(	O
debug	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_locker_create"	pointer
,	O
NULL	O
,	O
err	int
)	O
;	O
return	O
MU_DL_EX_ERROR	int
;	O
}	O
if	O
(	O
force	int
!=	O
0	int
)	O
mu_locker_set_expire_time	function
(	O
locker	pointer
,	O
force	int
)	O
;	O
if	O
(	O
retries	int
!=	O
0	int
)	O
mu_locker_set_retries	function
(	O
locker	pointer
,	O
retries	int
)	O
;	O
if	O
(	O
setegid	function
(	O
mailgid	int
)	O
<	O
0	int
)	O
return	O
MU_DL_EX_ERROR	int
;	O
if	O
(	O
unlock	int
)	O
err	int
=	O
mu_locker_remove_lock	function
(	O
locker	pointer
)	O
;	O
else	O
err	int
=	O
mu_locker_lock	function
(	O
locker	pointer
)	O
;	O
setegid	function
(	O
usergid	int
)	O
;	O
mu_locker_destroy	function
(	O
&	O
locker	pointer
)	O
;	O
if	O
(	O
debug	int
&&	O
err	int
)	O
mu_error	function
(	O
unlock	int
?	O
_	O
(	O
"unlocking the file %s failed: %s"	pointer
)	O
:	O
_	O
(	O
"locking the file %s failed: %s"	pointer
)	O
,	O
file	pointer
,	O
mu_strerror	function
(	O
err	int
)	O
)	O
;	O
switch	O
(	O
err	int
)	O
{	O
case	O
0	int
:	O
err	int
=	O
MU_DL_EX_OK	int
;	O
break	O
;	O
case	O
EPERM	int
:	O
err	int
=	O
MU_DL_EX_PERM	int
;	O
break	O
;	O
case	O
MU_ERR_LOCK_NOT_HELD	O
:	O
err	int
=	O
MU_DL_EX_NEXIST	int
;	O
break	O
;	O
case	O
MU_ERR_LOCK_CONFLICT	O
:	O
err	int
=	O
MU_DL_EX_EXIST	int
;	O
break	O
;	O
default	O
:	O
err	int
=	O
MU_DL_EX_ERROR	int
;	O
break	O
;	O
}	O
return	O
err	int
;	O
}	O
