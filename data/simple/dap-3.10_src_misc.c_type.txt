extern	O
FILE	struct
*	O
dap_err	pointer
;	O
extern	O
FILE	struct
*	O
dap_log	pointer
;	O
static	O
int	O
mdays	array
[	O
]	O
=	O
{	O
0	int
,	O
31	int
,	O
28	int
,	O
31	int
,	O
30	int
,	O
31	int
,	O
30	int
,	O
31	int
,	O
31	int
,	O
30	int
,	O
31	int
,	O
30	int
,	O
31	int
}	O
;	O
int	O
dap_numdate	function
(	O
char	O
date	array
[	O
]	O
)	O
{	O
int	O
d	int
;	O
int	O
dday	int
;	O
int	O
dyr	int
;	O
int	O
mon	int
;	O
int	O
day	int
;	O
int	O
yr	int
;	O
int	O
m	int
;	O
int	O
y	int
;	O
int	O
ndays	int
;	O
for	O
(	O
d	int
=	O
0	int
,	O
mon	int
=	O
0	int
;	O
d	int
<	O
2	int
&&	O
'0'	O
<=	O
date	array
[	O
d	int
]	O
&&	O
date	array
[	O
d	int
]	O
<=	O
'9'	O
;	O
d	int
++	O
)	O
mon	int
=	O
10	int
*	O
mon	int
+	O
date	array
[	O
d	int
]	O
-	O
'0'	O
;	O
if	O
(	O
date	array
[	O
d	int
]	O
==	O
'/'	O
)	O
d	int
++	O
;	O
for	O
(	O
dday	int
=	O
d	int
,	O
day	int
=	O
0	int
;	O
d	int
<	O
dday	int
+	O
2	int
&&	O
'0'	O
<=	O
date	array
[	O
d	int
]	O
&&	O
date	array
[	O
d	int
]	O
<=	O
'9'	O
;	O
d	int
++	O
)	O
day	int
=	O
10	int
*	O
day	int
+	O
date	array
[	O
d	int
]	O
-	O
'0'	O
;	O
if	O
(	O
date	array
[	O
d	int
]	O
==	O
'/'	O
)	O
d	int
++	O
;	O
for	O
(	O
dyr	int
=	O
d	int
,	O
yr	int
=	O
0	int
;	O
d	int
<	O
dyr	int
+	O
4	int
&&	O
'0'	O
<=	O
date	array
[	O
d	int
]	O
&&	O
date	array
[	O
d	int
]	O
<=	O
'9'	O
;	O
d	int
++	O
)	O
yr	int
=	O
10	int
*	O
yr	int
+	O
date	array
[	O
d	int
]	O
-	O
'0'	O
;	O
if	O
(	O
d	int
<	O
dyr	int
+	O
4	int
)	O
return	O
-	O
1	int
;	O
for	O
(	O
m	int
=	O
1	int
,	O
ndays	int
=	O
day	int
;	O
m	int
<	O
mon	int
;	O
m	int
++	O
)	O
ndays	int
+=	O
mdays	array
[	O
m	int
]	O
;	O
if	O
(	O
(	O
mon	int
>	O
2	int
)	O
&&	O
!	O
(	O
yr	int
%	O
4	int
)	O
&&	O
(	O
yr	int
%	O
100	int
)	O
)	O
ndays	int
++	O
;	O
if	O
(	O
yr	int
<	O
1752	int
)	O
return	O
-	O
1	int
;	O
for	O
(	O
y	int
=	O
1752	int
;	O
y	int
<	O
yr	int
;	O
y	int
++	O
)	O
{	O
ndays	int
+=	O
365	int
;	O
if	O
(	O
!	O
(	O
y	int
%	O
4	int
)	O
&&	O
(	O
(	O
y	int
%	O
100	int
)	O
||	O
!	O
(	O
y	int
%	O
400	int
)	O
)	O
)	O
ndays	int
++	O
;	O
}	O
return	O
ndays	int
;	O
}	O
void	O
dap_datenum	function
(	O
int	O
n	int
,	O
char	O
*	O
d	int
)	O
{	O
int	O
mon	int
;	O
int	O
day	int
;	O
int	O
yr	int
;	O
int	O
ndays	int
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
{	O
strcpy	function
(	O
d	int
,	O
"?"	pointer
)	O
;	O
return	O
;	O
}	O
yr	int
=	O
1752	int
;	O
sprintf	function
(	O
d	int
,	O
"0101%4d"	pointer
,	O
yr	int
)	O
;	O
ndays	int
=	O
dap_numdate	function
(	O
d	int
)	O
;	O
while	O
(	O
ndays	int
<=	O
n	int
)	O
{	O
if	O
(	O
yr	int
<	O
10000	int
)	O
{	O
sprintf	function
(	O
d	int
,	O
"0101%4d"	pointer
,	O
++	O
yr	int
)	O
;	O
ndays	int
=	O
dap_numdate	function
(	O
d	int
)	O
;	O
}	O
else	O
{	O
strcpy	function
(	O
d	int
,	O
"?"	pointer
)	O
;	O
return	O
;	O
}	O
}	O
--	O
yr	int
;	O
mon	int
=	O
1	int
;	O
sprintf	function
(	O
d	int
,	O
"%02d01%4d"	pointer
,	O
mon	int
,	O
yr	int
)	O
;	O
ndays	int
=	O
dap_numdate	function
(	O
d	int
)	O
;	O
while	O
(	O
ndays	int
<=	O
n	int
)	O
{	O
sprintf	function
(	O
d	int
,	O
"%02d01%4d"	pointer
,	O
++	O
mon	int
,	O
yr	int
)	O
;	O
if	O
(	O
mon	int
<=	O
12	int
)	O
ndays	int
=	O
dap_numdate	function
(	O
d	int
)	O
;	O
else	O
break	O
;	O
}	O
--	O
mon	int
;	O
day	int
=	O
1	int
;	O
sprintf	function
(	O
d	int
,	O
"%02d%02d%4d"	pointer
,	O
mon	int
,	O
day	int
,	O
yr	int
)	O
;	O
ndays	int
=	O
dap_numdate	function
(	O
d	int
)	O
;	O
while	O
(	O
ndays	int
<	O
n	int
)	O
{	O
sprintf	function
(	O
d	int
,	O
"%02d%02d%4d"	pointer
,	O
mon	int
,	O
++	O
day	int
,	O
yr	int
)	O
;	O
if	O
(	O
day	int
<=	O
mdays	array
[	O
mon	int
]	O
)	O
ndays	int
=	O
dap_numdate	function
(	O
d	int
)	O
;	O
else	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
double	O
dap_bincoeff	function
(	O
double	O
n	int
,	O
double	O
r	double
)	O
{	O
double	O
b	double
;	O
for	O
(	O
b	double
=	O
1.0	int
;	O
r	double
>	O
0.0	int
;	O
r	double
-=	O
1.0	int
,	O
n	int
-=	O
1.0	int
)	O
b	double
*=	O
n	int
/	O
r	double
;	O
return	O
rint	function
(	O
b	double
)	O
;	O
}	O
static	O
void	O
takestep	function
(	O
double	O
*	O
x	array
,	O
double	O
*	O
y	int
,	O
double	O
*	O
d	int
,	O
int	O
n	int
,	O
double	O
step	function
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
x	array
[	O
i	int
]	O
=	O
y	int
[	O
i	int
]	O
+	O
d	int
[	O
i	int
]	O
*	O
step	function
;	O
}	O
static	O
void	O
vcopy	function
(	O
double	O
*	O
x	array
,	O
double	O
*	O
y	int
,	O
int	O
n	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
x	array
[	O
i	int
]	O
=	O
y	int
[	O
i	int
]	O
;	O
}	O
static	O
void	O
vsub	function
(	O
double	O
*	O
x	array
,	O
double	O
*	O
y	int
,	O
int	O
n	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
x	array
[	O
i	int
]	O
-=	O
y	int
[	O
i	int
]	O
;	O
}	O
static	O
double	O
vlen	function
(	O
double	O
*	O
x	array
,	O
int	O
nx	int
)	O
{	O
double	O
len	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
0	int
,	O
len	double
=	O
0.0	int
;	O
n	int
<	O
nx	int
;	O
n	int
++	O
)	O
len	double
+=	O
x	array
[	O
n	int
]	O
*	O
x	array
[	O
n	int
]	O
;	O
return	O
sqrt	function
(	O
len	double
)	O
;	O
}	O
static	O
double	O
dirstep	function
(	O
double	O
(	O
*	O
f	pointer
)	O
(	O
double	O
xx	array
[	O
]	O
)	O
,	O
int	O
nx	int
,	O
double	O
x	array
[	O
]	O
,	O
double	O
x1	array
[	O
]	O
,	O
double	O
f0	double
,	O
double	O
step	function
,	O
double	O
tol	double
)	O
{	O
int	O
n	int
;	O
static	O
double	O
f1	double
,	O
f2	double
,	O
f3	double
;	O
double	O
dstep	double
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
nx	int
;	O
n	int
++	O
)	O
x1	array
[	O
n	int
]	O
=	O
x	array
[	O
n	int
]	O
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
nx	int
;	O
n	int
++	O
)	O
{	O
x1	array
[	O
n	int
]	O
=	O
x	array
[	O
n	int
]	O
-	O
step	function
;	O
f1	double
=	O
(	O
*	O
f	pointer
)	O
(	O
x1	array
)	O
;	O
x1	array
[	O
n	int
]	O
=	O
x	array
[	O
n	int
]	O
+	O
step	function
;	O
f2	double
=	O
(	O
*	O
f	pointer
)	O
(	O
x1	array
)	O
;	O
dstep	double
=	O
step	function
*	O
(	O
f1	double
-	O
f2	double
)	O
/	O
(	O
f1	double
-	O
2.0	int
*	O
f0	double
+	O
f2	double
)	O
/	O
2.0	int
;	O
if	O
(	O
finite	function
(	O
dstep	double
)	O
&&	O
fabs	function
(	O
dstep	double
)	O
>	O
tol	double
&&	O
(	O
(	O
f1	double
<	O
f0	double
&&	O
f0	double
<	O
f2	double
)	O
||	O
(	O
f1	double
>	O
f0	double
&&	O
f0	double
>	O
f2	double
)	O
)	O
)	O
{	O
x1	array
[	O
n	int
]	O
=	O
x	array
[	O
n	int
]	O
+	O
dstep	double
;	O
f3	double
=	O
(	O
*	O
f	pointer
)	O
(	O
x1	array
)	O
;	O
if	O
(	O
finite	function
(	O
f3	double
)	O
&&	O
f3	double
>	O
f1	double
&&	O
f3	double
>	O
f2	double
)	O
f0	double
=	O
f3	double
;	O
else	O
if	O
(	O
f1	double
>	O
f0	double
)	O
{	O
f0	double
=	O
f1	double
;	O
x1	array
[	O
n	int
]	O
=	O
x	array
[	O
n	int
]	O
-	O
step	function
;	O
}	O
else	O
{	O
f0	double
=	O
f2	double
;	O
x1	array
[	O
n	int
]	O
=	O
x	array
[	O
n	int
]	O
+	O
step	function
;	O
}	O
}	O
else	O
x1	array
[	O
n	int
]	O
=	O
x	array
[	O
n	int
]	O
;	O
}	O
return	O
f0	double
;	O
}	O
double	O
dap_maximize	function
(	O
double	O
(	O
*	O
f	pointer
)	O
(	O
double	O
xx	array
[	O
]	O
)	O
,	O
int	O
nx	int
,	O
double	O
x	array
[	O
]	O
,	O
double	O
step	function
,	O
double	O
tol	double
,	O
char	O
*	O
trace	pointer
)	O
{	O
int	O
tr	int
;	O
int	O
ntries	int
;	O
double	O
*	O
x1	array
,	O
*	O
x2	double
;	O
static	O
double	O
f0	double
;	O
static	O
double	O
f1	double
,	O
f2	double
;	O
double	O
*	O
dir	pointer
;	O
double	O
dirlen	double
;	O
double	O
dstep	double
;	O
int	O
n	int
;	O
int	O
d	int
;	O
int	O
traceout	int
;	O
int	O
t	int
;	O
int	O
nsteps	int
;	O
x1	array
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
double	O
)	O
*	O
nx	int
,	O
""	pointer
)	O
;	O
x2	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
double	O
)	O
*	O
nx	int
,	O
""	pointer
)	O
;	O
dir	pointer
=	O
(	O
double	O
*	O
)	O
dap_malloc	function
(	O
sizeof	O
(	O
double	O
)	O
*	O
nx	int
,	O
""	pointer
)	O
;	O
tr	int
=	O
0	int
;	O
if	O
(	O
trace	pointer
&&	O
trace	pointer
[	O
0	int
]	O
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
trace	pointer
,	O
"TRACE"	pointer
,	O
5	int
)	O
||	O
!	O
strncmp	function
(	O
trace	pointer
,	O
"PAUSE"	pointer
,	O
5	int
)	O
)	O
{	O
if	O
(	O
trace	pointer
[	O
0	int
]	O
==	O
'T'	O
)	O
tr	int
=	O
1	int
;	O
else	O
tr	int
=	O
2	int
;	O
for	O
(	O
t	int
=	O
5	int
;	O
trace	pointer
[	O
t	int
]	O
==	O
' '	O
;	O
t	int
++	O
)	O
;	O
for	O
(	O
traceout	int
=	O
0	int
;	O
'0'	O
<=	O
trace	pointer
[	O
t	int
]	O
&&	O
trace	pointer
[	O
t	int
]	O
<=	O
'9'	O
;	O
t	int
++	O
)	O
traceout	int
=	O
10	int
*	O
traceout	int
+	O
trace	pointer
[	O
t	int
]	O
-	O
'0'	O
;	O
while	O
(	O
trace	pointer
[	O
t	int
]	O
==	O
' '	O
)	O
t	int
++	O
;	O
if	O
(	O
trace	pointer
[	O
t	int
]	O
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(dap_maximize) bad trace interval: %s\n"	pointer
,	O
trace	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(dap_maximize) bad tracing option: %s\n"	pointer
,	O
trace	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
tr	int
=	O
0	int
;	O
for	O
(	O
f0	double
=	O
(	O
*	O
f	pointer
)	O
(	O
x	array
)	O
,	O
nsteps	int
=	O
0	int
;	O
;	O
nsteps	int
++	O
)	O
{	O
if	O
(	O
nsteps	int
>	O
dap_maxiter	int
)	O
{	O
fprintf	function
(	O
dap_err	pointer
,	O
"(dap_maximize) stepsize = %g failed to reach tolerance = %g after %d iterations\n"	pointer
,	O
step	function
,	O
tol	double
,	O
nsteps	int
)	O
;	O
break	O
;	O
}	O
f1	double
=	O
dirstep	function
(	O
f	pointer
,	O
nx	int
,	O
x	array
,	O
x1	array
,	O
f0	double
,	O
step	function
,	O
tol	double
)	O
;	O
if	O
(	O
f1	double
>	O
f0	double
)	O
{	O
vcopy	function
(	O
dir	pointer
,	O
x1	array
,	O
nx	int
)	O
;	O
vsub	function
(	O
dir	pointer
,	O
x	array
,	O
nx	int
)	O
;	O
dirlen	double
=	O
vlen	function
(	O
dir	pointer
,	O
nx	int
)	O
;	O
vcopy	function
(	O
x2	double
,	O
x	array
,	O
nx	int
)	O
;	O
vsub	function
(	O
x2	double
,	O
dir	pointer
,	O
nx	int
)	O
;	O
f2	double
=	O
(	O
*	O
f	pointer
)	O
(	O
x2	double
)	O
;	O
dstep	double
=	O
(	O
f2	double
-	O
f1	double
)	O
/	O
(	O
f1	double
-	O
2.0	int
*	O
f0	double
+	O
f2	double
)	O
/	O
2.0	int
;	O
if	O
(	O
finite	function
(	O
dstep	double
)	O
&&	O
dstep	double
>	O
tol	double
/	O
step	function
)	O
{	O
takestep	function
(	O
x2	double
,	O
x	array
,	O
dir	pointer
,	O
nx	int
,	O
dstep	double
)	O
;	O
f2	double
=	O
(	O
*	O
f	pointer
)	O
(	O
x2	double
)	O
;	O
if	O
(	O
finite	function
(	O
f2	double
)	O
&&	O
f2	double
>	O
f1	double
)	O
{	O
vcopy	function
(	O
x1	array
,	O
x2	double
,	O
nx	int
)	O
;	O
f1	double
=	O
f2	double
;	O
}	O
}	O
}	O
if	O
(	O
tr	int
&&	O
(	O
!	O
traceout	int
||	O
!	O
(	O
nsteps	int
%	O
traceout	int
)	O
)	O
)	O
{	O
fprintf	function
(	O
dap_log	pointer
,	O
"(dap_maximize) nsteps = %d, f0 = %.16g, f1 = %.16g, step = %g\ndir = "	pointer
,	O
nsteps	int
,	O
f0	double
,	O
f1	double
,	O
step	function
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"(dap_maximize) nsteps = %d, f0 = %.16g, f1 = %.16g, step = %g\ndir = "	pointer
,	O
nsteps	int
,	O
f0	double
,	O
f1	double
,	O
step	function
)	O
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
nx	int
;	O
n	int
++	O
)	O
{	O
fprintf	function
(	O
dap_log	pointer
,	O
" %g"	pointer
,	O
dir	pointer
[	O
n	int
]	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
" %g"	pointer
,	O
dir	pointer
[	O
n	int
]	O
)	O
;	O
}	O
fputs	function
(	O
"\nx ="	pointer
,	O
dap_log	pointer
)	O
;	O
fputs	function
(	O
"\nx ="	pointer
,	O
stderr	pointer
)	O
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
nx	int
;	O
n	int
++	O
)	O
{	O
fprintf	function
(	O
dap_log	pointer
,	O
" %g"	pointer
,	O
x	array
[	O
n	int
]	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
" %g"	pointer
,	O
x	array
[	O
n	int
]	O
)	O
;	O
}	O
putc	function
(	O
'\n'	O
,	O
dap_log	pointer
)	O
;	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
if	O
(	O
tr	int
==	O
2	int
)	O
getchar	function
(	O
)	O
;	O
}	O
if	O
(	O
f1	double
<=	O
f0	double
)	O
{	O
step	function
/=	O
2.0	int
;	O
if	O
(	O
step	function
<	O
tol	double
)	O
break	O
;	O
}	O
else	O
{	O
f0	double
=	O
f1	double
;	O
vcopy	function
(	O
x	array
,	O
x1	array
,	O
nx	int
)	O
;	O
}	O
}	O
dap_free	function
(	O
x1	array
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
x2	double
,	O
""	pointer
)	O
;	O
dap_free	function
(	O
dir	pointer
,	O
""	pointer
)	O
;	O
return	O
f0	double
;	O
}	O
