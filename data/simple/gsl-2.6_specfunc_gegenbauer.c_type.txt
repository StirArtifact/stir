int	O
gsl_sf_gegenpoly_1_e	function
(	O
double	O
lambda	double
,	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
lambda	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
2.0	int
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
2.0	int
*	O
lambda	double
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_gegenpoly_2_e	function
(	O
double	O
lambda	double
,	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
lambda	double
==	O
0.0	int
)	O
{	O
const	O
double	O
txx	double
=	O
2.0	int
*	O
x	double
*	O
x	double
;	O
result	pointer
->	O
val	double
=	O
-	O
1.0	int
+	O
txx	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
txx	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
lambda	double
*	O
(	O
-	O
1.0	int
+	O
2.0	int
*	O
(	O
1.0	int
+	O
lambda	double
)	O
*	O
x	double
*	O
x	double
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
2.0	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
+	O
fabs	function
(	O
lambda	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_gegenpoly_3_e	function
(	O
double	O
lambda	double
,	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
lambda	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
x	double
*	O
(	O
-	O
2.0	int
+	O
4.0	int
/	O
3.0	int
*	O
x	double
*	O
x	double
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
2.0	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
+	O
fabs	function
(	O
x	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
c	double
=	O
4.0	int
+	O
lambda	double
*	O
(	O
6.0	int
+	O
2.0	int
*	O
lambda	double
)	O
;	O
result	pointer
->	O
val	double
=	O
2.0	int
*	O
lambda	double
*	O
x	double
*	O
(	O
-	O
1.0	int
-	O
lambda	double
+	O
c	double
*	O
x	double
*	O
x	double
/	O
3.0	int
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
2.0	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
+	O
fabs	function
(	O
lambda	double
*	O
x	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_gegenpoly_n_e	function
(	O
int	O
n	int
,	O
double	O
lambda	double
,	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
lambda	double
<=	O
-	O
0.5	int
||	O
n	int
<	O
0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
return	O
gsl_sf_gegenpoly_1_e	function
(	O
lambda	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
n	int
==	O
2	int
)	O
{	O
return	O
gsl_sf_gegenpoly_2_e	function
(	O
lambda	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
n	int
==	O
3	int
)	O
{	O
return	O
gsl_sf_gegenpoly_3_e	function
(	O
lambda	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
lambda	double
==	O
0.0	int
&&	O
(	O
x	double
>=	O
-	O
1.0	int
&&	O
x	double
<=	O
1.0	int
)	O
)	O
{	O
const	O
double	O
z	double
=	O
n	int
*	O
acos	function
(	O
x	double
)	O
;	O
result	pointer
->	O
val	double
=	O
2.0	int
*	O
cos	function
(	O
z	double
)	O
/	O
n	int
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
z	double
*	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
k	int
;	O
gsl_sf_result	struct
g2	struct
;	O
gsl_sf_result	struct
g3	struct
;	O
int	O
stat_g2	int
=	O
gsl_sf_gegenpoly_2_e	function
(	O
lambda	double
,	O
x	double
,	O
&	O
g2	struct
)	O
;	O
int	O
stat_g3	int
=	O
gsl_sf_gegenpoly_3_e	function
(	O
lambda	double
,	O
x	double
,	O
&	O
g3	struct
)	O
;	O
int	O
stat_g	int
=	O
GSL_ERROR_SELECT_2	O
(	O
stat_g2	int
,	O
stat_g3	int
)	O
;	O
double	O
gkm2	double
=	O
g2	struct
.	O
val	double
;	O
double	O
gkm1	double
=	O
g3	struct
.	O
val	double
;	O
double	O
gk	double
=	O
0.0	int
;	O
for	O
(	O
k	int
=	O
4	int
;	O
k	int
<=	O
n	int
;	O
k	int
++	O
)	O
{	O
gk	double
=	O
(	O
2.0	int
*	O
(	O
k	int
+	O
lambda	double
-	O
1.0	int
)	O
*	O
x	double
*	O
gkm1	double
-	O
(	O
k	int
+	O
2.0	int
*	O
lambda	double
-	O
2.0	int
)	O
*	O
gkm2	double
)	O
/	O
k	int
;	O
gkm2	double
=	O
gkm1	double
;	O
gkm1	double
=	O
gk	double
;	O
}	O
result	pointer
->	O
val	double
=	O
gk	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
0.5	int
*	O
n	int
*	O
fabs	function
(	O
gk	double
)	O
;	O
return	O
stat_g	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_gegenpoly_array	function
(	O
int	O
nmax	int
,	O
double	O
lambda	double
,	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
)	O
{	O
int	O
k	int
;	O
if	O
(	O
lambda	double
<=	O
-	O
0.5	int
||	O
nmax	int
<	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"domain error"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
result_array	pointer
[	O
0	int
]	O
=	O
1.0	int
;	O
if	O
(	O
nmax	int
==	O
0	int
)	O
return	O
GSL_SUCCESS	int
;	O
if	O
(	O
lambda	double
==	O
0.0	int
)	O
result_array	pointer
[	O
1	int
]	O
=	O
2.0	int
*	O
x	double
;	O
else	O
result_array	pointer
[	O
1	int
]	O
=	O
2.0	int
*	O
lambda	double
*	O
x	double
;	O
for	O
(	O
k	int
=	O
2	int
;	O
k	int
<=	O
nmax	int
;	O
k	int
++	O
)	O
{	O
double	O
term1	double
=	O
2.0	int
*	O
(	O
k	int
+	O
lambda	double
-	O
1.0	int
)	O
*	O
x	double
*	O
result_array	pointer
[	O
k	int
-	O
1	int
]	O
;	O
double	O
term2	double
=	O
(	O
k	int
+	O
2.0	int
*	O
lambda	double
-	O
2.0	int
)	O
*	O
result_array	pointer
[	O
k	int
-	O
2	int
]	O
;	O
result_array	pointer
[	O
k	int
]	O
=	O
(	O
term1	double
-	O
term2	double
)	O
/	O
k	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
double	O
gsl_sf_gegenpoly_1	function
(	O
double	O
lambda	double
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_gegenpoly_1_e	function
(	O
lambda	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_gegenpoly_2	function
(	O
double	O
lambda	double
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_gegenpoly_2_e	function
(	O
lambda	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_gegenpoly_3	function
(	O
double	O
lambda	double
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_gegenpoly_3_e	function
(	O
lambda	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_gegenpoly_n	function
(	O
int	O
n	int
,	O
double	O
lambda	double
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_gegenpoly_n_e	function
(	O
n	int
,	O
lambda	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
