const	O
char	O
*	O
gengetopt_args_info_purpose	pointer
=	O
"This program generates a C function that uses getopt_long function\nto parse the command line options, validate them and fill a struct."	pointer
;	O
const	O
char	O
*	O
gengetopt_args_info_usage	pointer
=	O
"Usage: gengetopt [OPTIONS]..."	pointer
;	O
const	O
char	O
*	O
gengetopt_args_info_description	pointer
=	O
""	pointer
;	O
const	O
char	O
*	O
gengetopt_args_info_detailed_help	array
[	O
]	O
=	O
{	O
"  -h, --help                    Print help and exit"	pointer
,	O
"      --detailed-help           Print help, including all details and hidden \n                                  options, and exit"	pointer
,	O
"  -V, --version                 Print version and exit"	pointer
,	O
"\nMain options:"	pointer
,	O
""	pointer
,	O
"  -i, --input=filename          input file (default std input)"	pointer
,	O
"  -f, --func-name=name          name of generated function  \n                                  (default=`cmdline_parser')"	pointer
,	O
"  -a, --arg-struct-name=name    name of generated args info struct  \n                                  (default=`gengetopt_args_info')"	pointer
,	O
"  -F, --file-name=name          name of generated file  (default=`cmdline')"	pointer
,	O
"      --output-dir=path         output directory"	pointer
,	O
"  \n  if this option is not specified, the files are generated in the current \n  directory.\n"	pointer
,	O
"  -c, --c-extension=ext         extension of c file  (default=`c')"	pointer
,	O
"  -H, --header-extension=ext    extension of header file  (default=`h')"	pointer
,	O
"  -l, --long-help               long usage line in help"	pointer
,	O
"  \n  The usage line will print all the options, e.g.,\n\n  sample1 -iINT|--int-opt=INT [-h|--help]\n"	pointer
,	O
"      --default-optional        by default, an option is considered optional if \n                                  not specified otherwise"	pointer
,	O
"  -u, --unamed-opts[=STRING]    accept options without names (e.g., file names) \n                                   (default=`FILES')"	pointer
,	O
"\nThe parser generated is thought to be used to parse the command line arguments. \nHowever, you can also generate parsers for configuration files, or strings that \ncontain the arguments to parse, by using the following two options.\n"	pointer
,	O
"  -C, --conf-parser             generate a config file parser"	pointer
,	O
"  -S, --string-parser           generate a string parser (the string contains \n                                  the command line)"	pointer
,	O
"\nAdditional options:"	pointer
,	O
""	pointer
,	O
"  -G, --include-getopt          adds the code for getopt_long in the generated \n                                  C file"	pointer
,	O
"  -n, --no-handle-help          do not handle --help|-h automatically"	pointer
,	O
"  \n  If --no-handle-help is specified, the command line option --help|-h will not \n  be handled automatically, so the programmer will be able to print some other \n  information; then the function for printing the standard help output can be \n  used; this function is called <parser-name>_print_help.\n  \n  Notice that, although the programmer can handle --help|-h manually, the \n  parser will return after finding such option: the other command line options, \n  if any, will be ignored.  In case you want to have full control on --help|-h, \n  you should use --ho-help.\n"	pointer
,	O
"      --no-help                 do not add --help|-h automatically"	pointer
,	O
"  \n  With this option you can disable the automatic addition of options --help|-h. \n  The programmer will then be able to add this option in the input file and \n  handle it as he sees fit.  Notice that --no-help will also disable the \n  automatic options --detailed-help and --full-help.\n\n  The programmer can still define options with short character h as he wants, \n  but he cannot define options help, unless he specifies --no-help (otherwise \n  an error will be printed).\n"	pointer
,	O
"  -N, --no-handle-version       do not handle --version|-V automatically"	pointer
,	O
"      --no-version              do not add --version|-V automatically"	pointer
,	O
"  \n  See above the details about --no-handle-help and --no-help, respectively.\n"	pointer
,	O
"  -e, --no-handle-error         do not exit on errors"	pointer
,	O
"  \n  With this option, if the generated parser encounters an error (e.g., an \n  unknown option) it does not make the main program exit; instead, the parser \n  function returns a value different 0, and the main program can print a help \n  message.\n"	pointer
,	O
"      --show-required[=STRING]  in the output of help will specify which \n                                  options are mandatory, by using the optional \n                                  passed string  (default=`(mandatory)')"	pointer
,	O
"  -g, --gen-version             put gengetopt version in the generated file  \n                                  (default=on)"	pointer
,	O
"      --set-package=STRING      set the package name (override package defined \n                                  in the .ggo file)"	pointer
,	O
"      --set-version=STRING      set the version number (override version \n                                  defined in the .ggo file)"	pointer
,	O
"      --show-help               show the output of --help instead of generating \n                                  code"	pointer
,	O
"      --show-full-help          show the output of --full-help (i.e., including \n                                  hidden options) instead of generating code"	pointer
,	O
"      --show-detailed-help      show the output of --detailed-help (i.e., \n                                  including details and hidden options) instead \n                                  of generating code"	pointer
,	O
"      --show-version            show the output of --version instead of \n                                  generating code"	pointer
,	O
"\nPlease refer to the info manual for further explanations."	pointer
,	O
0	int
}	O
;	O
static	O
void	O
init_help_array	function
(	O
void	O
)	O
{	O
gengetopt_args_info_help	array
[	O
0	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
0	int
]	O
;	O
gengetopt_args_info_help	array
[	O
1	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
1	int
]	O
;	O
gengetopt_args_info_help	array
[	O
2	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
2	int
]	O
;	O
gengetopt_args_info_help	array
[	O
3	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
3	int
]	O
;	O
gengetopt_args_info_help	array
[	O
4	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
4	int
]	O
;	O
gengetopt_args_info_help	array
[	O
5	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
5	int
]	O
;	O
gengetopt_args_info_help	array
[	O
6	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
6	int
]	O
;	O
gengetopt_args_info_help	array
[	O
7	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
7	int
]	O
;	O
gengetopt_args_info_help	array
[	O
8	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
8	int
]	O
;	O
gengetopt_args_info_help	array
[	O
9	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
9	int
]	O
;	O
gengetopt_args_info_help	array
[	O
10	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
11	int
]	O
;	O
gengetopt_args_info_help	array
[	O
11	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
12	int
]	O
;	O
gengetopt_args_info_help	array
[	O
12	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
13	int
]	O
;	O
gengetopt_args_info_help	array
[	O
13	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
15	int
]	O
;	O
gengetopt_args_info_help	array
[	O
14	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
16	int
]	O
;	O
gengetopt_args_info_help	array
[	O
15	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
17	int
]	O
;	O
gengetopt_args_info_help	array
[	O
16	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
18	int
]	O
;	O
gengetopt_args_info_help	array
[	O
17	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
19	int
]	O
;	O
gengetopt_args_info_help	array
[	O
18	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
20	int
]	O
;	O
gengetopt_args_info_help	array
[	O
19	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
21	int
]	O
;	O
gengetopt_args_info_help	array
[	O
20	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
22	int
]	O
;	O
gengetopt_args_info_help	array
[	O
21	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
23	int
]	O
;	O
gengetopt_args_info_help	array
[	O
22	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
25	int
]	O
;	O
gengetopt_args_info_help	array
[	O
23	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
27	int
]	O
;	O
gengetopt_args_info_help	array
[	O
24	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
28	int
]	O
;	O
gengetopt_args_info_help	array
[	O
25	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
30	int
]	O
;	O
gengetopt_args_info_help	array
[	O
26	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
32	int
]	O
;	O
gengetopt_args_info_help	array
[	O
27	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
33	int
]	O
;	O
gengetopt_args_info_help	array
[	O
28	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
34	int
]	O
;	O
gengetopt_args_info_help	array
[	O
29	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
35	int
]	O
;	O
gengetopt_args_info_help	array
[	O
30	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
36	int
]	O
;	O
gengetopt_args_info_help	array
[	O
31	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
37	int
]	O
;	O
gengetopt_args_info_help	array
[	O
32	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
38	int
]	O
;	O
gengetopt_args_info_help	array
[	O
33	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
39	int
]	O
;	O
gengetopt_args_info_help	array
[	O
34	int
]	O
=	O
gengetopt_args_info_detailed_help	array
[	O
40	int
]	O
;	O
gengetopt_args_info_help	array
[	O
35	int
]	O
=	O
0	int
;	O
}	O
const	O
char	O
*	O
gengetopt_args_info_help	array
[	O
36	int
]	O
;	O
typedef	O
enum	O
{	O
ARG_NO	int
,	O
ARG_FLAG	int
,	O
ARG_STRING	int
}	O
cmdline_parser_arg_type	enum
;	O
static	O
void	O
clear_given	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
;	O
static	O
void	O
clear_args	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
;	O
static	O
int	O
cmdline_parser_internal	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
struct	O
cmdline_parser_params	struct
*	O
params	pointer
,	O
const	O
char	O
*	O
additional_error	pointer
)	O
;	O
struct	O
line_list	struct
{	O
char	O
*	O
string_arg	pointer
;	O
struct	O
line_list	struct
*	O
next	pointer
;	O
}	O
;	O
static	O
struct	O
line_list	struct
*	O
cmd_line_list	pointer
=	O
0	int
;	O
static	O
struct	O
line_list	struct
*	O
cmd_line_list_tmp	pointer
=	O
0	int
;	O
static	O
void	O
free_cmd_list	function
(	O
void	O
)	O
{	O
if	O
(	O
cmd_line_list	pointer
)	O
{	O
while	O
(	O
cmd_line_list	pointer
)	O
{	O
cmd_line_list_tmp	pointer
=	O
cmd_line_list	pointer
;	O
cmd_line_list	pointer
=	O
cmd_line_list	pointer
->	O
next	pointer
;	O
free	function
(	O
cmd_line_list_tmp	pointer
->	O
string_arg	pointer
)	O
;	O
free	function
(	O
cmd_line_list_tmp	pointer
)	O
;	O
}	O
}	O
}	O
static	O
char	O
*	O
gengetopt_strdup	function
(	O
const	O
char	O
*	O
s	pointer
)	O
;	O
static	O
void	O
clear_given	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
args_info	pointer
->	O
help_given	int
=	O
0	int
;	O
args_info	pointer
->	O
detailed_help_given	int
=	O
0	int
;	O
args_info	pointer
->	O
version_given	int
=	O
0	int
;	O
args_info	pointer
->	O
input_given	int
=	O
0	int
;	O
args_info	pointer
->	O
func_name_given	int
=	O
0	int
;	O
args_info	pointer
->	O
arg_struct_name_given	int
=	O
0	int
;	O
args_info	pointer
->	O
file_name_given	int
=	O
0	int
;	O
args_info	pointer
->	O
output_dir_given	int
=	O
0	int
;	O
args_info	pointer
->	O
c_extension_given	int
=	O
0	int
;	O
args_info	pointer
->	O
header_extension_given	int
=	O
0	int
;	O
args_info	pointer
->	O
long_help_given	int
=	O
0	int
;	O
args_info	pointer
->	O
default_optional_given	int
=	O
0	int
;	O
args_info	pointer
->	O
unamed_opts_given	int
=	O
0	int
;	O
args_info	pointer
->	O
conf_parser_given	int
=	O
0	int
;	O
args_info	pointer
->	O
string_parser_given	int
=	O
0	int
;	O
args_info	pointer
->	O
include_getopt_given	int
=	O
0	int
;	O
args_info	pointer
->	O
no_handle_help_given	int
=	O
0	int
;	O
args_info	pointer
->	O
no_help_given	int
=	O
0	int
;	O
args_info	pointer
->	O
no_handle_version_given	int
=	O
0	int
;	O
args_info	pointer
->	O
no_version_given	int
=	O
0	int
;	O
args_info	pointer
->	O
no_handle_error_given	int
=	O
0	int
;	O
args_info	pointer
->	O
show_required_given	int
=	O
0	int
;	O
args_info	pointer
->	O
gen_version_given	int
=	O
0	int
;	O
args_info	pointer
->	O
set_package_given	int
=	O
0	int
;	O
args_info	pointer
->	O
set_version_given	int
=	O
0	int
;	O
args_info	pointer
->	O
show_help_given	int
=	O
0	int
;	O
args_info	pointer
->	O
show_full_help_given	int
=	O
0	int
;	O
args_info	pointer
->	O
show_detailed_help_given	int
=	O
0	int
;	O
args_info	pointer
->	O
show_version_given	int
=	O
0	int
;	O
}	O
static	O
void	O
clear_args	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
args_info	pointer
->	O
input_arg	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
input_orig	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
func_name_arg	pointer
=	O
gengetopt_strdup	function
(	O
"cmdline_parser"	pointer
)	O
;	O
args_info	pointer
->	O
func_name_orig	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
arg_struct_name_arg	pointer
=	O
gengetopt_strdup	function
(	O
"gengetopt_args_info"	pointer
)	O
;	O
args_info	pointer
->	O
arg_struct_name_orig	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
file_name_arg	pointer
=	O
gengetopt_strdup	function
(	O
"cmdline"	pointer
)	O
;	O
args_info	pointer
->	O
file_name_orig	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
output_dir_arg	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
output_dir_orig	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
c_extension_arg	pointer
=	O
gengetopt_strdup	function
(	O
"c"	pointer
)	O
;	O
args_info	pointer
->	O
c_extension_orig	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
header_extension_arg	pointer
=	O
gengetopt_strdup	function
(	O
"h"	pointer
)	O
;	O
args_info	pointer
->	O
header_extension_orig	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
unamed_opts_arg	pointer
=	O
gengetopt_strdup	function
(	O
"FILES"	pointer
)	O
;	O
args_info	pointer
->	O
unamed_opts_orig	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
show_required_arg	pointer
=	O
gengetopt_strdup	function
(	O
"(mandatory)"	pointer
)	O
;	O
args_info	pointer
->	O
show_required_orig	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
gen_version_flag	int
=	O
1	int
;	O
args_info	pointer
->	O
set_package_arg	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
set_package_orig	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
set_version_arg	pointer
=	O
NULL	O
;	O
args_info	pointer
->	O
set_version_orig	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
init_args_info	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
init_help_array	function
(	O
)	O
;	O
args_info	pointer
->	O
help_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
0	int
]	O
;	O
args_info	pointer
->	O
detailed_help_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
1	int
]	O
;	O
args_info	pointer
->	O
version_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
2	int
]	O
;	O
args_info	pointer
->	O
input_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
5	int
]	O
;	O
args_info	pointer
->	O
func_name_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
6	int
]	O
;	O
args_info	pointer
->	O
arg_struct_name_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
7	int
]	O
;	O
args_info	pointer
->	O
file_name_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
8	int
]	O
;	O
args_info	pointer
->	O
output_dir_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
9	int
]	O
;	O
args_info	pointer
->	O
c_extension_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
11	int
]	O
;	O
args_info	pointer
->	O
header_extension_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
12	int
]	O
;	O
args_info	pointer
->	O
long_help_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
13	int
]	O
;	O
args_info	pointer
->	O
default_optional_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
15	int
]	O
;	O
args_info	pointer
->	O
unamed_opts_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
16	int
]	O
;	O
args_info	pointer
->	O
conf_parser_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
18	int
]	O
;	O
args_info	pointer
->	O
string_parser_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
19	int
]	O
;	O
args_info	pointer
->	O
include_getopt_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
22	int
]	O
;	O
args_info	pointer
->	O
no_handle_help_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
23	int
]	O
;	O
args_info	pointer
->	O
no_help_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
25	int
]	O
;	O
args_info	pointer
->	O
no_handle_version_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
27	int
]	O
;	O
args_info	pointer
->	O
no_version_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
28	int
]	O
;	O
args_info	pointer
->	O
no_handle_error_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
30	int
]	O
;	O
args_info	pointer
->	O
show_required_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
32	int
]	O
;	O
args_info	pointer
->	O
gen_version_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
33	int
]	O
;	O
args_info	pointer
->	O
set_package_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
34	int
]	O
;	O
args_info	pointer
->	O
set_version_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
35	int
]	O
;	O
args_info	pointer
->	O
show_help_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
36	int
]	O
;	O
args_info	pointer
->	O
show_full_help_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
37	int
]	O
;	O
args_info	pointer
->	O
show_detailed_help_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
38	int
]	O
;	O
args_info	pointer
->	O
show_version_help	pointer
=	O
gengetopt_args_info_detailed_help	array
[	O
39	int
]	O
;	O
}	O
void	O
cmdline_parser_print_version	function
(	O
void	O
)	O
{	O
printf	function
(	O
"%s %s\n"	pointer
,	O
CMDLINE_PARSER_PACKAGE	pointer
,	O
CMDLINE_PARSER_VERSION	O
)	O
;	O
}	O
static	O
void	O
print_help_common	function
(	O
void	O
)	O
{	O
cmdline_parser_print_version	function
(	O
)	O
;	O
if	O
(	O
strlen	function
(	O
gengetopt_args_info_purpose	pointer
)	O
>	O
0	int
)	O
printf	function
(	O
"\n%s\n"	pointer
,	O
gengetopt_args_info_purpose	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
gengetopt_args_info_usage	pointer
)	O
>	O
0	int
)	O
printf	function
(	O
"\n%s\n"	pointer
,	O
gengetopt_args_info_usage	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
gengetopt_args_info_description	pointer
)	O
>	O
0	int
)	O
printf	function
(	O
"%s\n"	pointer
,	O
gengetopt_args_info_description	pointer
)	O
;	O
}	O
void	O
cmdline_parser_print_help	function
(	O
void	O
)	O
{	O
int	O
i	int
=	O
0	int
;	O
print_help_common	function
(	O
)	O
;	O
while	O
(	O
gengetopt_args_info_help	array
[	O
i	int
]	O
)	O
printf	function
(	O
"%s\n"	pointer
,	O
gengetopt_args_info_help	array
[	O
i	int
++	O
]	O
)	O
;	O
}	O
void	O
cmdline_parser_print_detailed_help	function
(	O
void	O
)	O
{	O
int	O
i	int
=	O
0	int
;	O
print_help_common	function
(	O
)	O
;	O
while	O
(	O
gengetopt_args_info_detailed_help	array
[	O
i	int
]	O
)	O
printf	function
(	O
"%s\n"	pointer
,	O
gengetopt_args_info_detailed_help	array
[	O
i	int
++	O
]	O
)	O
;	O
}	O
void	O
cmdline_parser_init	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
clear_given	function
(	O
args_info	pointer
)	O
;	O
clear_args	function
(	O
args_info	pointer
)	O
;	O
init_args_info	function
(	O
args_info	pointer
)	O
;	O
}	O
void	O
cmdline_parser_params_init	function
(	O
struct	O
cmdline_parser_params	struct
*	O
params	pointer
)	O
{	O
if	O
(	O
params	pointer
)	O
{	O
params	pointer
->	O
override	int
=	O
0	int
;	O
params	pointer
->	O
initialize	int
=	O
1	int
;	O
params	pointer
->	O
check_required	int
=	O
1	int
;	O
params	pointer
->	O
check_ambiguity	int
=	O
0	int
;	O
params	pointer
->	O
print_errors	int
=	O
1	int
;	O
}	O
}	O
struct	O
cmdline_parser_params	struct
*	O
cmdline_parser_params_create	function
(	O
void	O
)	O
{	O
struct	O
cmdline_parser_params	struct
*	O
params	pointer
=	O
(	O
struct	O
cmdline_parser_params	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
cmdline_parser_params	struct
)	O
)	O
;	O
cmdline_parser_params_init	function
(	O
params	pointer
)	O
;	O
return	O
params	pointer
;	O
}	O
static	O
void	O
free_string_field	function
(	O
char	O
*	O
*	O
s	pointer
)	O
{	O
if	O
(	O
*	O
s	pointer
)	O
{	O
free	function
(	O
*	O
s	pointer
)	O
;	O
*	O
s	pointer
=	O
0	int
;	O
}	O
}	O
static	O
void	O
cmdline_parser_release	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
input_arg	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
input_orig	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
func_name_arg	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
func_name_orig	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
arg_struct_name_arg	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
arg_struct_name_orig	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
file_name_arg	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
file_name_orig	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
output_dir_arg	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
output_dir_orig	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
c_extension_arg	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
c_extension_orig	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
header_extension_arg	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
header_extension_orig	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
unamed_opts_arg	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
unamed_opts_orig	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
show_required_arg	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
show_required_orig	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
set_package_arg	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
set_package_orig	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
set_version_arg	pointer
)	O
)	O
;	O
free_string_field	function
(	O
&	O
(	O
args_info	pointer
->	O
set_version_orig	pointer
)	O
)	O
;	O
clear_given	function
(	O
args_info	pointer
)	O
;	O
}	O
static	O
void	O
write_into_file	function
(	O
FILE	struct
*	O
outfile	pointer
,	O
const	O
char	O
*	O
opt	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
char	O
*	O
values	array
[	O
]	O
)	O
{	O
if	O
(	O
arg	pointer
)	O
{	O
fprintf	function
(	O
outfile	pointer
,	O
"%s=\"%s\"\n"	pointer
,	O
opt	pointer
,	O
arg	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
outfile	pointer
,	O
"%s\n"	pointer
,	O
opt	pointer
)	O
;	O
}	O
}	O
int	O
cmdline_parser_dump	function
(	O
FILE	struct
*	O
outfile	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
!	O
outfile	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: cannot dump options to stream\n"	pointer
,	O
CMDLINE_PARSER_PACKAGE	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
args_info	pointer
->	O
help_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"help"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
detailed_help_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"detailed-help"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
version_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"version"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
input_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"input"	pointer
,	O
args_info	pointer
->	O
input_orig	pointer
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
func_name_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"func-name"	pointer
,	O
args_info	pointer
->	O
func_name_orig	pointer
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
arg_struct_name_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"arg-struct-name"	pointer
,	O
args_info	pointer
->	O
arg_struct_name_orig	pointer
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
file_name_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"file-name"	pointer
,	O
args_info	pointer
->	O
file_name_orig	pointer
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
output_dir_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"output-dir"	pointer
,	O
args_info	pointer
->	O
output_dir_orig	pointer
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
c_extension_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"c-extension"	pointer
,	O
args_info	pointer
->	O
c_extension_orig	pointer
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
header_extension_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"header-extension"	pointer
,	O
args_info	pointer
->	O
header_extension_orig	pointer
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
long_help_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"long-help"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
default_optional_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"default-optional"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
unamed_opts_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"unamed-opts"	pointer
,	O
args_info	pointer
->	O
unamed_opts_orig	pointer
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
conf_parser_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"conf-parser"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
string_parser_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"string-parser"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
include_getopt_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"include-getopt"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
no_handle_help_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"no-handle-help"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
no_help_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"no-help"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
no_handle_version_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"no-handle-version"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
no_version_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"no-version"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
no_handle_error_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"no-handle-error"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
show_required_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"show-required"	pointer
,	O
args_info	pointer
->	O
show_required_orig	pointer
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
gen_version_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"gen-version"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
set_package_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"set-package"	pointer
,	O
args_info	pointer
->	O
set_package_orig	pointer
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
set_version_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"set-version"	pointer
,	O
args_info	pointer
->	O
set_version_orig	pointer
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
show_help_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"show-help"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
show_full_help_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"show-full-help"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
show_detailed_help_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"show-detailed-help"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
show_version_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"show-version"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
i	int
=	O
EXIT_SUCCESS	int
;	O
return	O
i	int
;	O
}	O
int	O
cmdline_parser_file_save	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
FILE	struct
*	O
outfile	pointer
;	O
int	O
i	int
=	O
0	int
;	O
outfile	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
outfile	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: cannot open file for writing: %s\n"	pointer
,	O
CMDLINE_PARSER_PACKAGE	pointer
,	O
filename	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
i	int
=	O
cmdline_parser_dump	function
(	O
outfile	pointer
,	O
args_info	pointer
)	O
;	O
fclose	function
(	O
outfile	pointer
)	O
;	O
return	O
i	int
;	O
}	O
void	O
cmdline_parser_free	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
cmdline_parser_release	function
(	O
args_info	pointer
)	O
;	O
}	O
char	O
*	O
gengetopt_strdup	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
char	O
*	O
result	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
result	pointer
;	O
result	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
result	pointer
==	O
(	O
char	O
*	O
)	O
0	int
)	O
return	O
(	O
char	O
*	O
)	O
0	int
;	O
strcpy	function
(	O
result	pointer
,	O
s	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
int	O
cmdline_parser	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
return	O
cmdline_parser2	function
(	O
argc	int
,	O
argv	pointer
,	O
args_info	pointer
,	O
0	int
,	O
1	int
,	O
1	int
)	O
;	O
}	O
int	O
cmdline_parser_ext	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
struct	O
cmdline_parser_params	struct
*	O
params	pointer
)	O
{	O
int	O
result	pointer
;	O
result	pointer
=	O
cmdline_parser_internal	function
(	O
argc	int
,	O
argv	pointer
,	O
args_info	pointer
,	O
params	pointer
,	O
NULL	O
)	O
;	O
return	O
result	pointer
;	O
}	O
int	O
cmdline_parser2	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
int	O
override	int
,	O
int	O
initialize	int
,	O
int	O
check_required	int
)	O
{	O
int	O
result	pointer
;	O
struct	O
cmdline_parser_params	struct
params	pointer
;	O
params	pointer
.	O
override	int
=	O
override	int
;	O
params	pointer
.	O
initialize	int
=	O
initialize	int
;	O
params	pointer
.	O
check_required	int
=	O
check_required	int
;	O
params	pointer
.	O
check_ambiguity	int
=	O
0	int
;	O
params	pointer
.	O
print_errors	int
=	O
1	int
;	O
result	pointer
=	O
cmdline_parser_internal	function
(	O
argc	int
,	O
argv	pointer
,	O
args_info	pointer
,	O
&	O
params	pointer
,	O
NULL	O
)	O
;	O
return	O
result	pointer
;	O
}	O
int	O
cmdline_parser_required	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
const	O
char	O
*	O
prog_name	pointer
)	O
{	O
return	O
EXIT_SUCCESS	int
;	O
}	O
static	O
char	O
*	O
package_name	pointer
=	O
0	int
;	O
static	O
int	O
update_arg	function
(	O
void	O
*	O
field	pointer
,	O
char	O
*	O
*	O
orig_field	pointer
,	O
unsigned	O
int	O
*	O
field_given	pointer
,	O
unsigned	O
int	O
*	O
prev_given	pointer
,	O
char	O
*	O
value	pointer
,	O
char	O
*	O
possible_values	array
[	O
]	O
,	O
const	O
char	O
*	O
default_value	pointer
,	O
cmdline_parser_arg_type	enum
arg_type	enum
,	O
short	O
check_ambiguity	int
,	O
short	O
override	int
,	O
short	O
no_free	short
,	O
short	O
multiple_option	short
,	O
const	O
char	O
*	O
long_opt	pointer
,	O
char	O
short_opt	char
,	O
const	O
char	O
*	O
additional_error	pointer
)	O
{	O
char	O
*	O
stop_char	pointer
=	O
0	int
;	O
const	O
char	O
*	O
val	int
=	O
value	pointer
;	O
int	O
found	int
;	O
char	O
*	O
*	O
string_field	pointer
;	O
stop_char	pointer
=	O
0	int
;	O
found	int
=	O
0	int
;	O
if	O
(	O
!	O
multiple_option	short
&&	O
prev_given	pointer
&&	O
(	O
*	O
prev_given	pointer
||	O
(	O
check_ambiguity	int
&&	O
*	O
field_given	pointer
)	O
)	O
)	O
{	O
if	O
(	O
short_opt	char
!=	O
'-'	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: `--%s' (`-%c') option given more than once%s\n"	pointer
,	O
package_name	pointer
,	O
long_opt	pointer
,	O
short_opt	char
,	O
(	O
additional_error	pointer
?	O
additional_error	pointer
:	O
""	pointer
)	O
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: `--%s' option given more than once%s\n"	pointer
,	O
package_name	pointer
,	O
long_opt	pointer
,	O
(	O
additional_error	pointer
?	O
additional_error	pointer
:	O
""	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
field_given	pointer
&&	O
*	O
field_given	pointer
&&	O
!	O
override	int
)	O
return	O
0	int
;	O
if	O
(	O
prev_given	pointer
)	O
(	O
*	O
prev_given	pointer
)	O
++	O
;	O
if	O
(	O
field_given	pointer
)	O
(	O
*	O
field_given	pointer
)	O
++	O
;	O
if	O
(	O
possible_values	array
)	O
val	int
=	O
possible_values	array
[	O
found	int
]	O
;	O
switch	O
(	O
arg_type	enum
)	O
{	O
case	O
ARG_FLAG	int
:	O
*	O
(	O
(	O
int	O
*	O
)	O
field	pointer
)	O
=	O
!	O
*	O
(	O
(	O
int	O
*	O
)	O
field	pointer
)	O
;	O
break	O
;	O
case	O
ARG_STRING	int
:	O
if	O
(	O
val	int
)	O
{	O
string_field	pointer
=	O
(	O
char	O
*	O
*	O
)	O
field	pointer
;	O
if	O
(	O
!	O
no_free	short
&&	O
*	O
string_field	pointer
)	O
free	function
(	O
*	O
string_field	pointer
)	O
;	O
*	O
string_field	pointer
=	O
gengetopt_strdup	function
(	O
val	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
;	O
switch	O
(	O
arg_type	enum
)	O
{	O
case	O
ARG_NO	int
:	O
case	O
ARG_FLAG	int
:	O
break	O
;	O
default	O
:	O
if	O
(	O
value	pointer
&&	O
orig_field	pointer
)	O
{	O
if	O
(	O
no_free	short
)	O
{	O
*	O
orig_field	pointer
=	O
value	pointer
;	O
}	O
else	O
{	O
if	O
(	O
*	O
orig_field	pointer
)	O
free	function
(	O
*	O
orig_field	pointer
)	O
;	O
*	O
orig_field	pointer
=	O
gengetopt_strdup	function
(	O
value	pointer
)	O
;	O
}	O
}	O
}	O
;	O
return	O
0	int
;	O
}	O
int	O
cmdline_parser_internal	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
struct	O
cmdline_parser_params	struct
*	O
params	pointer
,	O
const	O
char	O
*	O
additional_error	pointer
)	O
{	O
int	O
c	int
;	O
int	O
error	int
=	O
0	int
;	O
struct	O
gengetopt_args_info	struct
local_args_info	struct
;	O
int	O
override	int
;	O
int	O
initialize	int
;	O
int	O
check_required	int
;	O
int	O
check_ambiguity	int
;	O
package_name	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
override	int
=	O
params	pointer
->	O
override	int
;	O
initialize	int
=	O
params	pointer
->	O
initialize	int
;	O
check_required	int
=	O
params	pointer
->	O
check_required	int
;	O
check_ambiguity	int
=	O
params	pointer
->	O
check_ambiguity	int
;	O
if	O
(	O
initialize	int
)	O
cmdline_parser_init	function
(	O
args_info	pointer
)	O
;	O
cmdline_parser_init	function
(	O
&	O
local_args_info	struct
)	O
;	O
optarg	pointer
=	O
0	int
;	O
optind	int
=	O
0	int
;	O
opterr	int
=	O
params	pointer
->	O
print_errors	int
;	O
optopt	int
=	O
'?'	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
0	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"detailed-help"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"version"	pointer
,	O
0	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"input"	pointer
,	O
1	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"func-name"	pointer
,	O
1	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"arg-struct-name"	pointer
,	O
1	int
,	O
NULL	O
,	O
'a'	O
}	O
,	O
{	O
"file-name"	pointer
,	O
1	int
,	O
NULL	O
,	O
'F'	O
}	O
,	O
{	O
"output-dir"	pointer
,	O
1	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"c-extension"	pointer
,	O
1	int
,	O
NULL	O
,	O
'c'	O
}	O
,	O
{	O
"header-extension"	pointer
,	O
1	int
,	O
NULL	O
,	O
'H'	O
}	O
,	O
{	O
"long-help"	pointer
,	O
0	int
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"default-optional"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"unamed-opts"	pointer
,	O
2	int
,	O
NULL	O
,	O
'u'	O
}	O
,	O
{	O
"conf-parser"	pointer
,	O
0	int
,	O
NULL	O
,	O
'C'	O
}	O
,	O
{	O
"string-parser"	pointer
,	O
0	int
,	O
NULL	O
,	O
'S'	O
}	O
,	O
{	O
"include-getopt"	pointer
,	O
0	int
,	O
NULL	O
,	O
'G'	O
}	O
,	O
{	O
"no-handle-help"	pointer
,	O
0	int
,	O
NULL	O
,	O
'n'	O
}	O
,	O
{	O
"no-help"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"no-handle-version"	pointer
,	O
0	int
,	O
NULL	O
,	O
'N'	O
}	O
,	O
{	O
"no-version"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"no-handle-error"	pointer
,	O
0	int
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"show-required"	pointer
,	O
2	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"gen-version"	pointer
,	O
0	int
,	O
NULL	O
,	O
'g'	O
}	O
,	O
{	O
"set-package"	pointer
,	O
1	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"set-version"	pointer
,	O
1	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"show-help"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"show-full-help"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"show-detailed-help"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"show-version"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"hVi:f:a:F:c:H:lu::CSGnNeg"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'h'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
help_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
help_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"help"	pointer
,	O
'h'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
cmdline_parser_free	function
(	O
&	O
local_args_info	struct
)	O
;	O
return	O
0	int
;	O
break	O
;	O
case	O
'V'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
version_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
version_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"version"	pointer
,	O
'V'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
cmdline_parser_free	function
(	O
&	O
local_args_info	struct
)	O
;	O
return	O
0	int
;	O
break	O
;	O
case	O
'i'	O
:	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
input_arg	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
input_orig	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
input_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
input_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_STRING	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"input"	pointer
,	O
'i'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'f'	O
:	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
func_name_arg	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
func_name_orig	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
func_name_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
func_name_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
"cmdline_parser"	pointer
,	O
ARG_STRING	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"func-name"	pointer
,	O
'f'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'a'	O
:	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
arg_struct_name_arg	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
arg_struct_name_orig	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
arg_struct_name_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
arg_struct_name_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
"gengetopt_args_info"	pointer
,	O
ARG_STRING	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"arg-struct-name"	pointer
,	O
'a'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'F'	O
:	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
file_name_arg	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
file_name_orig	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
file_name_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
file_name_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
"cmdline"	pointer
,	O
ARG_STRING	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"file-name"	pointer
,	O
'F'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'c'	O
:	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
c_extension_arg	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
c_extension_orig	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
c_extension_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
c_extension_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
"c"	pointer
,	O
ARG_STRING	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"c-extension"	pointer
,	O
'c'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'H'	O
:	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
header_extension_arg	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
header_extension_orig	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
header_extension_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
header_extension_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
"h"	pointer
,	O
ARG_STRING	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"header-extension"	pointer
,	O
'H'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'l'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
long_help_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
long_help_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"long-help"	pointer
,	O
'l'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'u'	O
:	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
unamed_opts_arg	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
unamed_opts_orig	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
unamed_opts_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
unamed_opts_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
"FILES"	pointer
,	O
ARG_STRING	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"unamed-opts"	pointer
,	O
'u'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'C'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
conf_parser_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
conf_parser_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"conf-parser"	pointer
,	O
'C'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'S'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
string_parser_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
string_parser_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"string-parser"	pointer
,	O
'S'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'G'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
include_getopt_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
include_getopt_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"include-getopt"	pointer
,	O
'G'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
no_handle_help_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
no_handle_help_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"no-handle-help"	pointer
,	O
'n'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'N'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
no_handle_version_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
no_handle_version_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"no-handle-version"	pointer
,	O
'N'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'e'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
no_handle_error_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
no_handle_error_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"no-handle-error"	pointer
,	O
'e'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'g'	O
:	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
gen_version_flag	int
)	O
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
gen_version_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
gen_version_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_FLAG	int
,	O
check_ambiguity	int
,	O
override	int
,	O
1	int
,	O
0	int
,	O
"gen-version"	pointer
,	O
'g'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
0	int
:	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"detailed-help"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
detailed_help_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
detailed_help_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"detailed-help"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
cmdline_parser_free	function
(	O
&	O
local_args_info	struct
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"output-dir"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
output_dir_arg	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
output_dir_orig	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
output_dir_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
output_dir_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_STRING	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"output-dir"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"default-optional"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
default_optional_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
default_optional_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"default-optional"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"no-help"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
no_help_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
no_help_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"no-help"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"no-version"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
no_version_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
no_version_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"no-version"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"show-required"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
show_required_arg	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
show_required_orig	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
show_required_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
show_required_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
"(mandatory)"	pointer
,	O
ARG_STRING	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"show-required"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"set-package"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
set_package_arg	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
set_package_orig	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
set_package_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
set_package_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_STRING	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"set-package"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"set-version"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
set_version_arg	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
set_version_orig	pointer
)	O
,	O
&	O
(	O
args_info	pointer
->	O
set_version_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
set_version_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_STRING	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"set-version"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"show-help"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
show_help_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
show_help_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"show-help"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"show-full-help"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
show_full_help_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
show_full_help_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"show-full-help"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"show-detailed-help"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
show_detailed_help_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
show_detailed_help_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"show-detailed-help"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"show-version"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
show_version_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
show_version_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"show-version"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
break	O
;	O
case	O
'?'	O
:	O
goto	O
failure	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: option unknown: %c%s\n"	pointer
,	O
CMDLINE_PARSER_PACKAGE	pointer
,	O
c	int
,	O
(	O
additional_error	pointer
?	O
additional_error	pointer
:	O
""	pointer
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
}	O
cmdline_parser_release	function
(	O
&	O
local_args_info	struct
)	O
;	O
if	O
(	O
error	int
)	O
return	O
(	O
EXIT_FAILURE	int
)	O
;	O
return	O
0	int
;	O
failure	O
:	O
cmdline_parser_release	function
(	O
&	O
local_args_info	struct
)	O
;	O
return	O
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
unsigned	O
int	O
cmdline_parser_create_argv	function
(	O
const	O
char	O
*	O
cmdline_	pointer
,	O
char	O
*	O
*	O
*	O
argv_ptr	pointer
,	O
const	O
char	O
*	O
prog_name	pointer
)	O
{	O
char	O
*	O
cmdline	pointer
,	O
*	O
p	pointer
;	O
size_t	long
n	long
=	O
0	int
,	O
j	long
;	O
int	O
i	int
;	O
if	O
(	O
prog_name	pointer
)	O
{	O
cmd_line_list_tmp	pointer
=	O
(	O
struct	O
line_list	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
line_list	struct
)	O
)	O
;	O
cmd_line_list_tmp	pointer
->	O
next	pointer
=	O
cmd_line_list	pointer
;	O
cmd_line_list	pointer
=	O
cmd_line_list_tmp	pointer
;	O
cmd_line_list	pointer
->	O
string_arg	pointer
=	O
gengetopt_strdup	function
(	O
prog_name	pointer
)	O
;	O
++	O
n	long
;	O
}	O
cmdline	pointer
=	O
gengetopt_strdup	function
(	O
cmdline_	pointer
)	O
;	O
p	pointer
=	O
cmdline	pointer
;	O
while	O
(	O
p	pointer
&&	O
strlen	function
(	O
p	pointer
)	O
)	O
{	O
j	long
=	O
strcspn	function
(	O
p	pointer
,	O
" \t"	pointer
)	O
;	O
++	O
n	long
;	O
if	O
(	O
j	long
&&	O
j	long
<	O
strlen	function
(	O
p	pointer
)	O
)	O
{	O
p	pointer
[	O
j	long
]	O
=	O
'\0'	O
;	O
cmd_line_list_tmp	pointer
=	O
(	O
struct	O
line_list	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
line_list	struct
)	O
)	O
;	O
cmd_line_list_tmp	pointer
->	O
next	pointer
=	O
cmd_line_list	pointer
;	O
cmd_line_list	pointer
=	O
cmd_line_list_tmp	pointer
;	O
cmd_line_list	pointer
->	O
string_arg	pointer
=	O
gengetopt_strdup	function
(	O
p	pointer
)	O
;	O
p	pointer
+=	O
(	O
j	long
+	O
1	int
)	O
;	O
p	pointer
+=	O
strspn	function
(	O
p	pointer
,	O
" \t"	pointer
)	O
;	O
}	O
else	O
{	O
cmd_line_list_tmp	pointer
=	O
(	O
struct	O
line_list	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
line_list	struct
)	O
)	O
;	O
cmd_line_list_tmp	pointer
->	O
next	pointer
=	O
cmd_line_list	pointer
;	O
cmd_line_list	pointer
=	O
cmd_line_list_tmp	pointer
;	O
cmd_line_list	pointer
->	O
string_arg	pointer
=	O
gengetopt_strdup	function
(	O
p	pointer
)	O
;	O
break	O
;	O
}	O
}	O
*	O
argv_ptr	pointer
=	O
(	O
char	O
*	O
*	O
)	O
malloc	function
(	O
(	O
n	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
cmd_line_list_tmp	pointer
=	O
cmd_line_list	pointer
;	O
for	O
(	O
i	int
=	O
(	O
n	long
-	O
1	int
)	O
;	O
i	int
>=	O
0	int
;	O
--	O
i	int
)	O
{	O
(	O
*	O
argv_ptr	pointer
)	O
[	O
i	int
]	O
=	O
cmd_line_list_tmp	pointer
->	O
string_arg	pointer
;	O
cmd_line_list_tmp	pointer
=	O
cmd_line_list_tmp	pointer
->	O
next	pointer
;	O
}	O
(	O
*	O
argv_ptr	pointer
)	O
[	O
n	long
]	O
=	O
NULL	O
;	O
free	function
(	O
cmdline	pointer
)	O
;	O
return	O
n	long
;	O
}	O
int	O
cmdline_parser_string	function
(	O
const	O
char	O
*	O
cmdline	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
const	O
char	O
*	O
prog_name	pointer
)	O
{	O
return	O
cmdline_parser_string2	function
(	O
cmdline	pointer
,	O
args_info	pointer
,	O
prog_name	pointer
,	O
0	int
,	O
1	int
,	O
1	int
)	O
;	O
}	O
int	O
cmdline_parser_string2	function
(	O
const	O
char	O
*	O
cmdline	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
const	O
char	O
*	O
prog_name	pointer
,	O
int	O
override	int
,	O
int	O
initialize	int
,	O
int	O
check_required	int
)	O
{	O
struct	O
cmdline_parser_params	struct
params	pointer
;	O
params	pointer
.	O
override	int
=	O
override	int
;	O
params	pointer
.	O
initialize	int
=	O
initialize	int
;	O
params	pointer
.	O
check_required	int
=	O
check_required	int
;	O
params	pointer
.	O
check_ambiguity	int
=	O
0	int
;	O
params	pointer
.	O
print_errors	int
=	O
1	int
;	O
return	O
cmdline_parser_string_ext	function
(	O
cmdline	pointer
,	O
args_info	pointer
,	O
prog_name	pointer
,	O
&	O
params	pointer
)	O
;	O
}	O
int	O
cmdline_parser_string_ext	function
(	O
const	O
char	O
*	O
cmdline	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
const	O
char	O
*	O
prog_name	pointer
,	O
struct	O
cmdline_parser_params	struct
*	O
params	pointer
)	O
{	O
char	O
*	O
*	O
argv_ptr	pointer
=	O
0	int
;	O
int	O
result	pointer
;	O
unsigned	O
int	O
argc	int
;	O
argc	int
=	O
cmdline_parser_create_argv	function
(	O
cmdline	pointer
,	O
&	O
argv_ptr	pointer
,	O
prog_name	pointer
)	O
;	O
result	pointer
=	O
cmdline_parser_internal	function
(	O
argc	int
,	O
argv_ptr	pointer
,	O
args_info	pointer
,	O
params	pointer
,	O
0	int
)	O
;	O
if	O
(	O
argv_ptr	pointer
)	O
{	O
free	function
(	O
argv_ptr	pointer
)	O
;	O
}	O
free_cmd_list	function
(	O
)	O
;	O
return	O
result	pointer
;	O
}	O
