void	O
mpn_toom43_mul	O
(	O
mp_ptr	pointer
pp	pointer
,	O
mp_srcptr	pointer
ap	pointer
,	O
mp_size_t	long
an	long
,	O
mp_srcptr	pointer
bp	pointer
,	O
mp_size_t	long
bn	long
,	O
mp_ptr	pointer
scratch	pointer
)	O
{	O
mp_size_t	long
n	long
,	O
s	array
,	O
t	long
;	O
enum	O
toom6_flags	enum
flags	enum
;	O
mp_limb_t	long
cy	long
;	O
n	long
=	O
1	int
+	O
(	O
3	int
*	O
an	long
>=	O
4	int
*	O
bn	long
?	O
(	O
an	long
-	O
1	int
)	O
>>	O
2	int
:	O
(	O
bn	long
-	O
1	int
)	O
/	O
(	O
size_t	long
)	O
3	int
)	O
;	O
s	array
=	O
an	long
-	O
3	int
*	O
n	long
;	O
t	long
=	O
bn	long
-	O
2	int
*	O
n	long
;	O
ASSERT	O
(	O
0	int
<	O
s	array
&&	O
s	array
<=	O
n	long
)	O
;	O
ASSERT	O
(	O
0	int
<	O
t	long
&&	O
t	long
<=	O
n	long
)	O
;	O
ASSERT	O
(	O
s	array
+	O
t	long
>=	O
5	int
)	O
;	O
flags	enum
=	O
(	O
enum	O
toom6_flags	enum
)	O
(	O
toom6_vm2_neg	int
&	O
mpn_toom_eval_dgr3_pm2	O
(	O
as2	O
,	O
asm2	O
,	O
ap	pointer
,	O
n	long
,	O
s	array
,	O
a1a3	O
)	O
)	O
;	O
b1d	O
[	O
n	long
]	O
=	O
mpn_lshift	O
(	O
b1d	O
,	O
b1	O
,	O
n	long
,	O
1	int
)	O
;	O
cy	long
=	O
mpn_lshift	O
(	O
b0b2	O
,	O
b2	O
,	O
t	long
,	O
2	int
)	O
;	O
cy	long
+=	O
mpn_add_n	O
(	O
b0b2	O
,	O
b0b2	O
,	O
b0	O
,	O
t	long
)	O
;	O
if	O
(	O
t	long
!=	O
n	long
)	O
cy	long
=	O
mpn_add_1	O
(	O
b0b2	O
+	O
t	long
,	O
b0	O
+	O
t	long
,	O
n	long
-	O
t	long
,	O
cy	long
)	O
;	O
b0b2	O
[	O
n	long
]	O
=	O
cy	long
;	O
mpn_add_n	O
(	O
bs2	O
,	O
b0b2	O
,	O
b1d	O
,	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
mpn_cmp	O
(	O
b0b2	O
,	O
b1d	O
,	O
n	long
+	O
1	int
)	O
<	O
0	int
)	O
{	O
mpn_sub_n	O
(	O
bsm2	O
,	O
b1d	O
,	O
b0b2	O
,	O
n	long
+	O
1	int
)	O
;	O
flags	enum
=	O
(	O
enum	O
toom6_flags	enum
)	O
(	O
flags	enum
^	O
toom6_vm2_neg	int
)	O
;	O
}	O
else	O
{	O
mpn_sub_n	O
(	O
bsm2	O
,	O
b0b2	O
,	O
b1d	O
,	O
n	long
+	O
1	int
)	O
;	O
}	O
flags	enum
=	O
(	O
enum	O
toom6_flags	enum
)	O
(	O
flags	enum
^	O
toom6_vm1_neg	int
&	O
mpn_toom_eval_dgr3_pm1	O
(	O
as1	O
,	O
asm1	O
,	O
ap	pointer
,	O
n	long
,	O
s	array
,	O
a0a2	O
)	O
)	O
;	O
bsm1	O
[	O
n	long
]	O
=	O
mpn_add	O
(	O
bsm1	O
,	O
b0	O
,	O
n	long
,	O
b2	O
,	O
t	long
)	O
;	O
bs1	O
[	O
n	long
]	O
=	O
bsm1	O
[	O
n	long
]	O
+	O
mpn_add_n	O
(	O
bs1	O
,	O
bsm1	O
,	O
b1	O
,	O
n	long
)	O
;	O
if	O
(	O
bsm1	O
[	O
n	long
]	O
==	O
0	int
&&	O
mpn_cmp	O
(	O
bsm1	O
,	O
b1	O
,	O
n	long
)	O
<	O
0	int
)	O
{	O
mpn_sub_n	O
(	O
bsm1	O
,	O
b1	O
,	O
bsm1	O
,	O
n	long
)	O
;	O
flags	enum
=	O
(	O
enum	O
toom6_flags	enum
)	O
(	O
flags	enum
^	O
toom6_vm1_neg	int
)	O
;	O
}	O
else	O
{	O
bsm1	O
[	O
n	long
]	O
-=	O
mpn_sub_n	O
(	O
bsm1	O
,	O
bsm1	O
,	O
b1	O
,	O
n	long
)	O
;	O
}	O
ASSERT	O
(	O
as1	O
[	O
n	long
]	O
<=	O
3	int
)	O
;	O
ASSERT	O
(	O
bs1	O
[	O
n	long
]	O
<=	O
2	int
)	O
;	O
ASSERT	O
(	O
asm1	O
[	O
n	long
]	O
<=	O
1	int
)	O
;	O
ASSERT	O
(	O
bsm1	O
[	O
n	long
]	O
<=	O
1	int
)	O
;	O
ASSERT	O
(	O
as2	O
[	O
n	long
]	O
<=	O
14	int
)	O
;	O
ASSERT	O
(	O
bs2	O
[	O
n	long
]	O
<=	O
6	int
)	O
;	O
ASSERT	O
(	O
asm2	O
[	O
n	long
]	O
<=	O
9	int
)	O
;	O
ASSERT	O
(	O
bsm2	O
[	O
n	long
]	O
<=	O
4	int
)	O
;	O
mpn_mul_n	O
(	O
vm1	O
,	O
asm1	O
,	O
bsm1	O
,	O
n	long
+	O
1	int
)	O
;	O
mpn_mul_n	O
(	O
vm2	O
,	O
asm2	O
,	O
bsm2	O
,	O
n	long
+	O
1	int
)	O
;	O
mpn_mul_n	O
(	O
v2	O
,	O
as2	O
,	O
bs2	O
,	O
n	long
+	O
1	int
)	O
;	O
mpn_mul_n	O
(	O
v1	O
,	O
as1	O
,	O
bs1	O
,	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
s	array
>	O
t	long
)	O
mpn_mul	O
(	O
vinf	O
,	O
a3	O
,	O
s	array
,	O
b2	O
,	O
t	long
)	O
;	O
else	O
mpn_mul	O
(	O
vinf	O
,	O
b2	O
,	O
t	long
,	O
a3	O
,	O
s	array
)	O
;	O
mpn_mul_n	O
(	O
v0	O
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
)	O
;	O
mpn_toom_interpolate_6pts	O
(	O
pp	pointer
,	O
n	long
,	O
flags	enum
,	O
vm1	O
,	O
vm2	O
,	O
v2	O
,	O
t	long
+	O
s	array
)	O
;	O
}	O
