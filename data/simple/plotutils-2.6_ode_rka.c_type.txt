void	O
rka	function
(	O
void	O
)	O
{	O
bool	enum
gdval	enum
=	O
true	int
;	O
int	O
overtime	int
=	O
1	int
;	O
double	O
prevstep	double
=	O
0.0	int
;	O
double	O
t	double
;	O
for	O
(	O
it	long
=	O
0	int
,	O
t	double
=	O
tstart	double
;	O
T_LT_TSTOP	O
||	O
overtime	int
--	O
;	O
)	O
{	O
symtab	pointer
->	O
sy_value	double
=	O
symtab	pointer
->	O
sy_val	array
[	O
0	int
]	O
=	O
t	double
;	O
field	function
(	O
)	O
;	O
for	O
(	O
fsp	pointer
=	O
dqueue	pointer
;	O
fsp	pointer
!=	O
NULL	O
;	O
fsp	pointer
=	O
fsp	pointer
->	O
sy_link	pointer
)	O
{	O
fsp	pointer
->	O
sy_val	array
[	O
0	int
]	O
=	O
fsp	pointer
->	O
sy_value	double
;	O
fsp	pointer
->	O
sy_pri	array
[	O
0	int
]	O
=	O
fsp	pointer
->	O
sy_prime	double
;	O
}	O
if	O
(	O
gdval	enum
)	O
printq	function
(	O
)	O
;	O
if	O
(	O
tstep	double
*	O
(	O
t	double
+	O
tstep	double
-	O
tstop	double
)	O
>	O
0	int
)	O
tstep	double
=	O
tstop	double
-	O
t	double
;	O
for	O
(	O
fsp	pointer
=	O
dqueue	pointer
;	O
fsp	pointer
!=	O
NULL	O
;	O
fsp	pointer
=	O
fsp	pointer
->	O
sy_link	pointer
)	O
{	O
fsp	pointer
->	O
sy_k	array
[	O
0	int
]	O
=	O
tstep	double
*	O
fsp	pointer
->	O
sy_prime	double
;	O
fsp	pointer
->	O
sy_value	double
=	O
fsp	pointer
->	O
sy_val	array
[	O
0	int
]	O
+	O
C20	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
0	int
]	O
;	O
}	O
symtab	pointer
->	O
sy_value	double
=	O
t	double
+	O
C2t	int
*	O
tstep	double
;	O
field	function
(	O
)	O
;	O
for	O
(	O
fsp	pointer
=	O
dqueue	pointer
;	O
fsp	pointer
!=	O
NULL	O
;	O
fsp	pointer
=	O
fsp	pointer
->	O
sy_link	pointer
)	O
{	O
fsp	pointer
->	O
sy_k	array
[	O
1	int
]	O
=	O
tstep	double
*	O
fsp	pointer
->	O
sy_prime	double
;	O
fsp	pointer
->	O
sy_value	double
=	O
fsp	pointer
->	O
sy_val	array
[	O
0	int
]	O
+	O
(	O
C30	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
0	int
]	O
+	O
C31	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
1	int
]	O
)	O
;	O
}	O
symtab	pointer
->	O
sy_value	double
=	O
t	double
+	O
C3t	int
*	O
tstep	double
;	O
field	function
(	O
)	O
;	O
for	O
(	O
fsp	pointer
=	O
dqueue	pointer
;	O
fsp	pointer
!=	O
NULL	O
;	O
fsp	pointer
=	O
fsp	pointer
->	O
sy_link	pointer
)	O
{	O
fsp	pointer
->	O
sy_k	array
[	O
2	int
]	O
=	O
tstep	double
*	O
fsp	pointer
->	O
sy_prime	double
;	O
fsp	pointer
->	O
sy_value	double
=	O
fsp	pointer
->	O
sy_val	array
[	O
0	int
]	O
+	O
(	O
C40	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
0	int
]	O
+	O
C41	O
*	O
fsp	pointer
->	O
sy_k	array
[	O
1	int
]	O
+	O
C42	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
2	int
]	O
)	O
;	O
}	O
symtab	pointer
->	O
sy_value	double
=	O
t	double
+	O
C4t	int
*	O
tstep	double
;	O
field	function
(	O
)	O
;	O
for	O
(	O
fsp	pointer
=	O
dqueue	pointer
;	O
fsp	pointer
!=	O
NULL	O
;	O
fsp	pointer
=	O
fsp	pointer
->	O
sy_link	pointer
)	O
{	O
fsp	pointer
->	O
sy_k	array
[	O
3	int
]	O
=	O
tstep	double
*	O
fsp	pointer
->	O
sy_prime	double
;	O
fsp	pointer
->	O
sy_value	double
=	O
fsp	pointer
->	O
sy_val	array
[	O
0	int
]	O
+	O
(	O
C50	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
0	int
]	O
+	O
C51	O
*	O
fsp	pointer
->	O
sy_k	array
[	O
1	int
]	O
+	O
C52	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
2	int
]	O
+	O
C53	O
*	O
fsp	pointer
->	O
sy_k	array
[	O
3	int
]	O
)	O
;	O
}	O
symtab	pointer
->	O
sy_value	double
=	O
t	double
+	O
tstep	double
;	O
field	function
(	O
)	O
;	O
for	O
(	O
fsp	pointer
=	O
dqueue	pointer
;	O
fsp	pointer
!=	O
NULL	O
;	O
fsp	pointer
=	O
fsp	pointer
->	O
sy_link	pointer
)	O
{	O
fsp	pointer
->	O
sy_k	array
[	O
4	int
]	O
=	O
tstep	double
*	O
fsp	pointer
->	O
sy_prime	double
;	O
fsp	pointer
->	O
sy_value	double
=	O
fsp	pointer
->	O
sy_val	array
[	O
0	int
]	O
+	O
(	O
C60	O
*	O
fsp	pointer
->	O
sy_k	array
[	O
0	int
]	O
+	O
C61	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
1	int
]	O
+	O
C62	O
*	O
fsp	pointer
->	O
sy_k	array
[	O
2	int
]	O
+	O
C63	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
3	int
]	O
+	O
C64	O
*	O
fsp	pointer
->	O
sy_k	array
[	O
4	int
]	O
)	O
;	O
}	O
symtab	pointer
->	O
sy_value	double
=	O
t	double
+	O
C6t	int
*	O
tstep	double
;	O
field	function
(	O
)	O
;	O
for	O
(	O
fsp	pointer
=	O
dqueue	pointer
;	O
fsp	pointer
!=	O
NULL	O
;	O
fsp	pointer
=	O
fsp	pointer
->	O
sy_link	pointer
)	O
fsp	pointer
->	O
sy_k	array
[	O
5	int
]	O
=	O
tstep	double
*	O
fsp	pointer
->	O
sy_prime	double
;	O
for	O
(	O
fsp	pointer
=	O
dqueue	pointer
;	O
fsp	pointer
!=	O
NULL	O
;	O
fsp	pointer
=	O
fsp	pointer
->	O
sy_link	pointer
)	O
{	O
fsp	pointer
->	O
sy_predi	double
=	O
fsp	pointer
->	O
sy_val	array
[	O
0	int
]	O
+	O
(	O
A0	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
0	int
]	O
+	O
A2	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
2	int
]	O
+	O
A3	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
3	int
]	O
+	O
A4	O
*	O
fsp	pointer
->	O
sy_k	array
[	O
4	int
]	O
)	O
;	O
fsp	pointer
->	O
sy_value	double
=	O
fsp	pointer
->	O
sy_val	array
[	O
0	int
]	O
+	O
(	O
B0	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
0	int
]	O
+	O
B2	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
2	int
]	O
+	O
B3	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
3	int
]	O
+	O
B4	O
*	O
fsp	pointer
->	O
sy_k	array
[	O
4	int
]	O
+	O
B5	int
*	O
fsp	pointer
->	O
sy_k	array
[	O
5	int
]	O
)	O
;	O
if	O
(	O
fsp	pointer
->	O
sy_value	double
!=	O
0.0	int
)	O
fsp	pointer
->	O
sy_sserr	double
=	O
fabs	function
(	O
1.0	int
-	O
fsp	pointer
->	O
sy_predi	double
/	O
fsp	pointer
->	O
sy_value	double
)	O
;	O
fsp	pointer
->	O
sy_aberr	double
=	O
fabs	function
(	O
fsp	pointer
->	O
sy_value	double
-	O
fsp	pointer
->	O
sy_predi	double
)	O
;	O
}	O
if	O
(	O
!	O
conflag	enum
&&	O
T_LT_TSTOP	O
)	O
{	O
maxerr	function
(	O
)	O
;	O
if	O
(	O
hierror	function
(	O
)	O
)	O
{	O
tstep	double
*=	O
HALF	O
;	O
for	O
(	O
fsp	pointer
=	O
dqueue	pointer
;	O
fsp	pointer
!=	O
NULL	O
;	O
fsp	pointer
=	O
fsp	pointer
->	O
sy_link	pointer
)	O
fsp	pointer
->	O
sy_value	double
=	O
fsp	pointer
->	O
sy_val	array
[	O
0	int
]	O
;	O
gdval	enum
=	O
false	int
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
lowerror	function
(	O
)	O
&&	O
prevstep	double
!=	O
tstep	double
)	O
{	O
prevstep	double
=	O
tstep	double
;	O
tstep	double
*=	O
TWO	O
;	O
for	O
(	O
fsp	pointer
=	O
dqueue	pointer
;	O
fsp	pointer
!=	O
NULL	O
;	O
fsp	pointer
=	O
fsp	pointer
->	O
sy_link	pointer
)	O
fsp	pointer
->	O
sy_value	double
=	O
fsp	pointer
->	O
sy_val	array
[	O
0	int
]	O
;	O
gdval	enum
=	O
false	int
;	O
continue	O
;	O
}	O
}	O
gdval	enum
=	O
true	int
;	O
prevstep	double
=	O
0.0	int
;	O
++	O
it	long
;	O
t	double
+=	O
tstep	double
;	O
}	O
}	O
