static	O
void	O
set_allocation_functions	function
(	O
void	O
)	O
;	O
static	O
exit_status_t	enum
exit_status	int
;	O
void	O
set_exit_status	function
(	O
exit_status_t	enum
status	int
)	O
{	O
if	O
(	O
exit_status	int
)	O
{	O
if	O
(	O
status	int
<	O
exit_status	int
)	O
{	O
debug_printf	O
(	O
"%s(%d)\n"	pointer
,	O
__func__	O
,	O
(	O
int	O
)	O
status	int
)	O
;	O
exit_status	int
=	O
status	int
;	O
}	O
}	O
else	O
{	O
debug_printf	O
(	O
"%s(%d)\n"	pointer
,	O
__func__	O
,	O
(	O
int	O
)	O
status	int
)	O
;	O
exit_status	int
=	O
status	int
;	O
}	O
}	O
exit_status_t	enum
get_exit_status	function
(	O
void	O
)	O
{	O
return	O
exit_status	int
;	O
}	O
typedef	O
enum	O
{	O
SECTION_STARTUP	int
,	O
SECTION_DOWNLOAD	int
,	O
SECTION_HTTP	int
,	O
SECTION_SSL	int
,	O
SECTION_DIRECTORY	int
,	O
SECTION_PLUGIN	int
,	O
SECTION_END	int
,	O
}	O
help_section_t	enum
;	O
typedef	O
const	O
struct	O
optionw	struct
*	O
option_t	pointer
;	O
struct	O
optionw	struct
{	O
const	O
char	O
*	O
long_name	pointer
;	O
void	O
*	O
var	pointer
;	O
int	O
(	O
*	O
parser	pointer
)	O
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
const	O
char	O
invert	char
)	O
;	O
int	O
args	array
;	O
char	O
short_name	char
;	O
help_section_t	enum
section	enum
;	O
const	O
char	O
*	O
help_str	array
[	O
4	int
]	O
;	O
}	O
;	O
static	O
int	O
print_version	char
(	O
WGET_GCC_UNUSED	O
option_t	pointer
opt	pointer
,	O
WGET_GCC_UNUSED	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
puts	function
(	O
"GNU Wget2 "	pointer
PACKAGE_VERSION	pointer
" - multithreaded metalink/file/website downloader\n"	pointer
)	O
;	O
puts	function
(	O
"+digest"	pointer
" -https"	pointer
" -ssl"	pointer
" +ipv6"	pointer
" +iri"	pointer
" +large-file"	pointer
" +nls"	pointer
" -ntlm"	pointer
" -opie"	pointer
" -psl"	pointer
" -hsts\n"	pointer
"+iconv"	pointer
" -idn"	pointer
" +zlib"	pointer
" -lzma"	pointer
" -brotlidec"	pointer
" -zstd"	pointer
" -bzip2"	pointer
" -http2"	pointer
" -gpgme"	pointer
)	O
;	O
puts	function
(	O
_version_text	array
)	O
;	O
set_exit_status	function
(	O
WG_EXIT_STATUS_NO_ERROR	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
parse_integer	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
val	array
?	O
atoi	function
(	O
val	array
)	O
:	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_uint16	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
int	O
port	short
=	O
val	array
?	O
atoi	function
(	O
val	array
)	O
:	O
0	int
;	O
if	O
(	O
port	short
>=	O
0	int
&&	O
port	short
<=	O
UINT16_MAX	O
)	O
{	O
*	O
(	O
(	O
uint16_t	short
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
(	O
uint16_t	short
)	O
port	short
;	O
return	O
0	int
;	O
}	O
error_printf	O
(	O
_	O
(	O
"Value out of range (0-65535): %s\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
_parse_double_modifier	function
(	O
const	O
char	O
*	O
in	pointer
,	O
double	O
*	O
d	pointer
,	O
char	O
*	O
c	int
)	O
{	O
bool	bool
minus	bool
=	O
false	int
;	O
while	O
(	O
c_isspace	function
(	O
*	O
in	pointer
)	O
)	O
in	pointer
++	O
;	O
if	O
(	O
*	O
in	pointer
==	O
'+'	O
)	O
{	O
in	pointer
++	O
;	O
}	O
else	O
if	O
(	O
*	O
in	pointer
==	O
'-'	O
)	O
{	O
in	pointer
++	O
;	O
minus	bool
=	O
true	int
;	O
}	O
if	O
(	O
!	O
c_isdigit	function
(	O
*	O
in	pointer
)	O
)	O
return	O
0	int
;	O
for	O
(	O
*	O
d	pointer
=	O
0	int
;	O
c_isdigit	function
(	O
*	O
in	pointer
)	O
;	O
in	pointer
++	O
)	O
*	O
d	pointer
=	O
*	O
d	pointer
*	O
10	int
+	O
(	O
*	O
in	pointer
-	O
'0'	O
)	O
;	O
if	O
(	O
*	O
in	pointer
==	O
'.'	O
)	O
{	O
in	pointer
++	O
;	O
for	O
(	O
double	O
q	double
=	O
10	int
;	O
c_isdigit	function
(	O
*	O
in	pointer
)	O
;	O
q	double
*=	O
10	int
,	O
in	pointer
++	O
)	O
*	O
d	pointer
+=	O
(	O
*	O
in	pointer
-	O
'0'	O
)	O
/	O
q	double
;	O
}	O
if	O
(	O
minus	bool
)	O
*	O
d	pointer
=	O
-	O
*	O
d	pointer
;	O
*	O
c	int
=	O
*	O
in	pointer
;	O
return	O
*	O
c	int
?	O
2	int
:	O
1	int
;	O
}	O
static	O
int	O
parse_numbytes	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
val	array
)	O
{	O
char	O
modifier	char
=	O
0	int
,	O
error	bool
=	O
0	int
;	O
double	O
num	double
=	O
0	int
;	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"INF"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"INFINITY"	pointer
)	O
)	O
{	O
*	O
(	O
(	O
long	O
long	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
_parse_double_modifier	function
(	O
val	array
,	O
&	O
num	double
,	O
&	O
modifier	char
)	O
>=	O
1	int
&&	O
num	double
>=	O
0	int
)	O
{	O
if	O
(	O
modifier	char
)	O
{	O
switch	O
(	O
c_tolower	function
(	O
modifier	char
)	O
)	O
{	O
case	O
'k'	O
:	O
num	double
*=	O
1024	int
;	O
break	O
;	O
case	O
'm'	O
:	O
num	double
*=	O
1024	int
*	O
1024	int
;	O
break	O
;	O
case	O
'g'	O
:	O
num	double
*=	O
1024	int
*	O
1024	int
*	O
1024	int
;	O
break	O
;	O
case	O
't'	O
:	O
num	double
*=	O
1024	int
*	O
1024	int
*	O
1024	int
*	O
1024LL	int
;	O
break	O
;	O
default	O
:	O
error	bool
=	O
1	int
;	O
}	O
}	O
}	O
else	O
error	bool
=	O
1	int
;	O
if	O
(	O
error	bool
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Invalid byte specifier: %s\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
*	O
(	O
(	O
long	O
long	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
num	double
>	O
LLONG_MAX	O
?	O
LLONG_MAX	O
:	O
(	O
long	O
long	O
)	O
num	double
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_filename	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
xfree	O
(	O
*	O
(	O
(	O
const	O
char	O
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
)	O
;	O
*	O
(	O
(	O
const	O
char	O
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
val	array
?	O
shell_expand	function
(	O
val	array
)	O
:	O
NULL	O
;	O
debug_printf	O
(	O
"Expanded value = %s\n"	pointer
,	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_string	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
xfree	O
(	O
*	O
(	O
(	O
const	O
char	O
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
)	O
;	O
*	O
(	O
(	O
const	O
char	O
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
wget_strdup	function
(	O
val	array
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_stringset	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
wget_stringmap	struct
*	O
map	pointer
=	O
*	O
(	O
(	O
wget_stringmap	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
;	O
if	O
(	O
val	array
)	O
{	O
const	O
char	O
*	O
s	pointer
,	O
*	O
p	pointer
;	O
wget_stringmap_clear	function
(	O
map	pointer
)	O
;	O
for	O
(	O
s	pointer
=	O
p	pointer
=	O
val	array
;	O
*	O
p	pointer
;	O
s	pointer
=	O
p	pointer
+	O
1	int
)	O
{	O
if	O
(	O
(	O
p	pointer
=	O
strchrnul	function
(	O
s	pointer
,	O
','	O
)	O
)	O
!=	O
s	pointer
)	O
wget_stringmap_put	function
(	O
map	pointer
,	O
wget_strmemdup	function
(	O
s	pointer
,	O
p	pointer
-	O
s	pointer
)	O
,	O
NULL	O
)	O
;	O
}	O
}	O
else	O
{	O
wget_stringmap_clear	function
(	O
map	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
compare_wget_http_param	function
(	O
wget_http_header_param	struct
*	O
a	pointer
,	O
wget_http_header_param	struct
*	O
b	pointer
)	O
{	O
if	O
(	O
wget_strcasecmp_ascii	function
(	O
a	pointer
->	O
name	pointer
,	O
b	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
if	O
(	O
wget_strcasecmp_ascii	function
(	O
a	pointer
->	O
value	pointer
,	O
b	pointer
->	O
value	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
parse_header	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
wget_vector	struct
*	O
v	pointer
=	O
*	O
(	O
(	O
wget_vector	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
;	O
if	O
(	O
val	array
&&	O
*	O
val	array
)	O
{	O
char	O
*	O
value	pointer
,	O
*	O
delim_pos	pointer
;	O
if	O
(	O
!	O
v	pointer
)	O
{	O
v	pointer
=	O
*	O
(	O
(	O
wget_vector	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
wget_vector_create	function
(	O
8	int
,	O
(	O
wget_vector_compare_fn	function
*	O
)	O
compare_wget_http_param	function
)	O
;	O
wget_vector_set_destructor	function
(	O
v	pointer
,	O
(	O
wget_vector_destructor	function
*	O
)	O
wget_http_free_param	function
)	O
;	O
}	O
delim_pos	pointer
=	O
strchr	function
(	O
val	array
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
delim_pos	pointer
||	O
delim_pos	pointer
==	O
val	array
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Ignoring invalid header: %s\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
0	int
;	O
}	O
value	pointer
=	O
delim_pos	pointer
+	O
1	int
;	O
while	O
(	O
*	O
value	pointer
==	O
' '	O
)	O
value	pointer
++	O
;	O
if	O
(	O
*	O
value	pointer
==	O
'\0'	O
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"No value in header (ignoring): %s\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
0	int
;	O
}	O
wget_http_header_param	struct
*	O
param	pointer
=	O
wget_malloc	function
(	O
sizeof	O
(	O
wget_http_header_param	struct
)	O
)	O
;	O
param	pointer
->	O
name	pointer
=	O
wget_strmemdup	function
(	O
val	array
,	O
delim_pos	pointer
-	O
val	array
)	O
;	O
param	pointer
->	O
value	pointer
=	O
wget_strdup	function
(	O
value	pointer
)	O
;	O
if	O
(	O
wget_vector_find	function
(	O
v	pointer
,	O
param	pointer
)	O
<	O
0	int
)	O
wget_vector_add	function
(	O
v	pointer
,	O
param	pointer
)	O
;	O
else	O
wget_http_free_param	function
(	O
param	pointer
)	O
;	O
}	O
else	O
if	O
(	O
val	array
&&	O
*	O
val	array
==	O
'\0'	O
)	O
{	O
wget_vector_clear	function
(	O
v	pointer
)	O
;	O
return	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
_strchrnul_esc	function
(	O
const	O
char	O
*	O
s	pointer
,	O
char	O
c	int
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
s	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
&&	O
(	O
p	pointer
[	O
1	int
]	O
==	O
'\\'	O
||	O
p	pointer
[	O
1	int
]	O
==	O
c	int
)	O
)	O
p	pointer
++	O
;	O
else	O
if	O
(	O
*	O
p	pointer
==	O
c	int
)	O
return	O
p	pointer
;	O
}	O
return	O
p	pointer
;	O
}	O
static	O
char	O
*	O
_strmemdup_esc	function
(	O
const	O
char	O
*	O
s	pointer
,	O
size_t	long
size	pointer
)	O
{	O
const	O
char	O
*	O
p	pointer
,	O
*	O
e	pointer
;	O
size_t	long
newsize	long
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
s	pointer
,	O
e	pointer
=	O
s	pointer
+	O
size	pointer
;	O
p	pointer
<	O
e	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
)	O
{	O
if	O
(	O
p	pointer
<	O
e	pointer
-	O
1	int
)	O
{	O
newsize	long
++	O
;	O
p	pointer
++	O
;	O
}	O
}	O
else	O
newsize	long
++	O
;	O
}	O
char	O
*	O
ret	pointer
=	O
wget_malloc	function
(	O
newsize	long
+	O
1	int
)	O
;	O
char	O
*	O
dst	pointer
=	O
ret	pointer
;	O
for	O
(	O
p	pointer
=	O
s	pointer
,	O
e	pointer
=	O
s	pointer
+	O
size	pointer
;	O
p	pointer
<	O
e	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
)	O
{	O
if	O
(	O
p	pointer
<	O
e	pointer
-	O
1	int
)	O
*	O
dst	pointer
++	O
=	O
*	O
++	O
p	pointer
;	O
}	O
else	O
*	O
dst	pointer
++	O
=	O
*	O
p	pointer
;	O
}	O
*	O
dst	pointer
=	O
0	int
;	O
return	O
ret	pointer
;	O
}	O
static	O
int	O
parse_stringlist_expand	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
int	O
expand	int
,	O
int	O
max_entries	int
)	O
{	O
if	O
(	O
val	array
&&	O
*	O
val	array
)	O
{	O
wget_vector	struct
*	O
v	pointer
=	O
*	O
(	O
(	O
wget_vector	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
;	O
const	O
char	O
*	O
s	pointer
,	O
*	O
p	pointer
;	O
if	O
(	O
!	O
v	pointer
)	O
v	pointer
=	O
*	O
(	O
(	O
wget_vector	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
wget_vector_create	function
(	O
8	int
,	O
(	O
wget_vector_compare_fn	function
*	O
)	O
strcmp	function
)	O
;	O
for	O
(	O
s	pointer
=	O
p	pointer
=	O
val	array
;	O
*	O
p	pointer
;	O
s	pointer
=	O
p	pointer
+	O
1	int
)	O
{	O
if	O
(	O
(	O
p	pointer
=	O
_strchrnul_esc	function
(	O
s	pointer
,	O
','	O
)	O
)	O
!=	O
s	pointer
)	O
{	O
if	O
(	O
wget_vector_size	function
(	O
v	pointer
)	O
>=	O
max_entries	int
)	O
{	O
wget_debug_printf	function
(	O
"%s: More than %d entries, ignoring overflow\n"	pointer
,	O
__func__	O
,	O
max_entries	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
const	O
char	O
*	O
fname	pointer
=	O
_strmemdup_esc	function
(	O
s	pointer
,	O
p	pointer
-	O
s	pointer
)	O
;	O
if	O
(	O
expand	int
&&	O
*	O
s	pointer
==	O
'~'	O
)	O
{	O
wget_vector_add	function
(	O
v	pointer
,	O
shell_expand	function
(	O
fname	pointer
)	O
)	O
;	O
xfree	O
(	O
fname	pointer
)	O
;	O
}	O
else	O
wget_vector_add	function
(	O
v	pointer
,	O
fname	pointer
)	O
;	O
}	O
}	O
}	O
else	O
{	O
wget_vector_free	function
(	O
opt	pointer
->	O
var	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_stringlist	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
return	O
parse_stringlist_expand	function
(	O
opt	pointer
,	O
val	array
,	O
0	int
,	O
1024	int
)	O
;	O
}	O
static	O
char	O
*	O
set_char_prefix	function
(	O
const	O
char	O
*	O
val	array
,	O
char	O
prefix	char
)	O
{	O
if	O
(	O
val	array
&&	O
*	O
val	array
)	O
{	O
char	O
*	O
prefixed_val	pointer
=	O
wget_malloc	function
(	O
strlen	function
(	O
val	array
)	O
*	O
3	int
+	O
1	int
)	O
,	O
*	O
dst	pointer
=	O
prefixed_val	pointer
;	O
*	O
dst	pointer
++	O
=	O
prefix	char
;	O
for	O
(	O
const	O
char	O
*	O
src	pointer
=	O
val	array
;	O
*	O
src	pointer
;	O
src	pointer
++	O
)	O
{	O
if	O
(	O
*	O
src	pointer
==	O
'\\'	O
)	O
{	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
;	O
if	O
(	O
src	pointer
[	O
1	int
]	O
)	O
*	O
dst	pointer
++	O
=	O
*	O
++	O
src	pointer
;	O
}	O
else	O
if	O
(	O
*	O
src	pointer
==	O
','	O
)	O
{	O
while	O
(	O
dst	pointer
[	O
-	O
1	int
]	O
==	O
'/'	O
)	O
dst	pointer
--	O
;	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
;	O
*	O
dst	pointer
++	O
=	O
prefix	char
;	O
}	O
else	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
;	O
}	O
while	O
(	O
dst	pointer
[	O
-	O
1	int
]	O
==	O
'/'	O
)	O
dst	pointer
--	O
;	O
*	O
dst	pointer
=	O
0	int
;	O
return	O
prefixed_val	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
int	O
parse_included_directories	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
char	O
*	O
prefixed_val	pointer
=	O
set_char_prefix	function
(	O
val	array
,	O
INCLUDED_DIRECTORY_PREFIX	char
)	O
;	O
int	O
ret	pointer
=	O
parse_stringlist_expand	function
(	O
opt	pointer
,	O
prefixed_val	pointer
,	O
0	int
,	O
1024	int
)	O
;	O
if	O
(	O
prefixed_val	pointer
)	O
xfree	O
(	O
prefixed_val	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
int	O
parse_excluded_directories	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
char	O
*	O
prefixed_val	pointer
=	O
set_char_prefix	function
(	O
val	array
,	O
EXCLUDED_DIRECTORY_PREFIX	char
)	O
;	O
int	O
ret	pointer
=	O
parse_stringlist_expand	function
(	O
opt	pointer
,	O
prefixed_val	pointer
,	O
0	int
,	O
1024	int
)	O
;	O
if	O
(	O
prefixed_val	pointer
)	O
xfree	O
(	O
prefixed_val	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
int	O
parse_filenames	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
return	O
parse_stringlist_expand	function
(	O
opt	pointer
,	O
val	array
,	O
1	int
,	O
32	int
)	O
;	O
}	O
static	O
void	O
tag_free	function
(	O
void	O
*	O
tag	pointer
)	O
{	O
wget_html_tag	struct
*	O
t	long
=	O
tag	pointer
;	O
if	O
(	O
t	long
)	O
{	O
xfree	O
(	O
t	long
->	O
attribute	pointer
)	O
;	O
xfree	O
(	O
t	long
->	O
name	pointer
)	O
;	O
xfree	O
(	O
t	long
)	O
;	O
}	O
}	O
static	O
void	O
WGET_GCC_NONNULL_ALL	O
_add_tag	function
(	O
wget_vector	struct
*	O
v	pointer
,	O
const	O
char	O
*	O
begin	pointer
,	O
const	O
char	O
*	O
end	pointer
)	O
{	O
wget_html_tag	struct
*	O
tag	pointer
=	O
wget_malloc	function
(	O
sizeof	O
(	O
wget_html_tag	struct
)	O
)	O
;	O
const	O
char	O
*	O
attribute	pointer
;	O
if	O
(	O
(	O
attribute	pointer
=	O
memchr	function
(	O
begin	pointer
,	O
'/'	O
,	O
end	pointer
-	O
begin	pointer
)	O
)	O
)	O
{	O
tag	pointer
->	O
name	pointer
=	O
wget_strmemdup	function
(	O
begin	pointer
,	O
attribute	pointer
-	O
begin	pointer
)	O
;	O
tag	pointer
->	O
attribute	pointer
=	O
wget_strmemdup	function
(	O
attribute	pointer
+	O
1	int
,	O
(	O
end	pointer
-	O
begin	pointer
)	O
-	O
(	O
attribute	pointer
-	O
begin	pointer
)	O
-	O
1	int
)	O
;	O
}	O
else	O
{	O
tag	pointer
->	O
name	pointer
=	O
wget_strmemdup	function
(	O
begin	pointer
,	O
end	pointer
-	O
begin	pointer
)	O
;	O
tag	pointer
->	O
attribute	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
wget_vector_find	function
(	O
v	pointer
,	O
tag	pointer
)	O
<	O
0	int
)	O
wget_vector_insert_sorted	function
(	O
v	pointer
,	O
tag	pointer
)	O
;	O
else	O
tag_free	function
(	O
tag	pointer
)	O
;	O
}	O
static	O
int	O
WGET_GCC_NONNULL_ALL	O
_compare_tag	function
(	O
const	O
wget_html_tag	struct
*	O
t1	pointer
,	O
const	O
wget_html_tag	struct
*	O
t2	pointer
)	O
{	O
int	O
n	long
;	O
if	O
(	O
!	O
(	O
n	long
=	O
wget_strcasecmp_ascii	function
(	O
t1	pointer
->	O
name	pointer
,	O
t2	pointer
->	O
name	pointer
)	O
)	O
)	O
{	O
if	O
(	O
!	O
t1	pointer
->	O
attribute	pointer
)	O
{	O
if	O
(	O
!	O
t2	pointer
->	O
attribute	pointer
)	O
n	long
=	O
0	int
;	O
else	O
n	long
=	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
t2	pointer
->	O
attribute	pointer
)	O
{	O
n	long
=	O
1	int
;	O
}	O
else	O
n	long
=	O
wget_strcasecmp_ascii	function
(	O
t1	pointer
->	O
attribute	pointer
,	O
t2	pointer
->	O
attribute	pointer
)	O
;	O
}	O
return	O
n	long
;	O
}	O
static	O
int	O
parse_taglist	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
val	array
&&	O
*	O
val	array
)	O
{	O
wget_vector	struct
*	O
v	pointer
=	O
*	O
(	O
(	O
wget_vector	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
;	O
const	O
char	O
*	O
s	pointer
,	O
*	O
p	pointer
;	O
if	O
(	O
!	O
v	pointer
)	O
{	O
v	pointer
=	O
*	O
(	O
(	O
wget_vector	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
wget_vector_create	function
(	O
8	int
,	O
(	O
wget_vector_compare_fn	function
*	O
)	O
_compare_tag	function
)	O
;	O
wget_vector_set_destructor	function
(	O
v	pointer
,	O
tag_free	function
)	O
;	O
}	O
for	O
(	O
s	pointer
=	O
p	pointer
=	O
val	array
;	O
*	O
p	pointer
;	O
s	pointer
=	O
p	pointer
+	O
1	int
)	O
{	O
if	O
(	O
(	O
p	pointer
=	O
strchrnul	function
(	O
s	pointer
,	O
','	O
)	O
)	O
!=	O
s	pointer
)	O
_add_tag	function
(	O
v	pointer
,	O
s	pointer
,	O
p	pointer
)	O
;	O
}	O
}	O
else	O
{	O
wget_vector_free	function
(	O
opt	pointer
->	O
var	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_bool	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
opt	pointer
->	O
var	pointer
)	O
{	O
if	O
(	O
!	O
val	array
||	O
!	O
strcmp	function
(	O
val	array
,	O
"1"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"y"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"yes"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"on"	pointer
)	O
)	O
*	O
(	O
(	O
char	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
!	O
invert	char
;	O
else	O
if	O
(	O
!	O
*	O
val	array
||	O
!	O
strcmp	function
(	O
val	array
,	O
"0"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"n"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"no"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"off"	pointer
)	O
)	O
*	O
(	O
(	O
char	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
invert	char
;	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Invalid boolean value '%s'\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_mirror	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
const	O
char	O
invert	char
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
parse_bool	function
(	O
opt	pointer
,	O
val	array
,	O
invert	char
)	O
)	O
<	O
0	int
)	O
return	O
rc	int
;	O
if	O
(	O
config	struct
.	O
mirror	char
)	O
{	O
config	struct
.	O
recursive	char
=	O
1	int
;	O
config	struct
.	O
level	int
=	O
0	int
;	O
config	struct
.	O
timestamping	char
=	O
1	int
;	O
}	O
else	O
{	O
config	struct
.	O
recursive	char
=	O
0	int
;	O
config	struct
.	O
level	int
=	O
5	int
;	O
config	struct
.	O
timestamping	char
=	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_timeout	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
double	O
fval	double
=	O
-	O
1	int
;	O
if	O
(	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"INF"	pointer
)	O
&&	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"INFINITY"	pointer
)	O
)	O
{	O
char	O
modifier	char
=	O
0	int
;	O
if	O
(	O
_parse_double_modifier	function
(	O
val	array
,	O
&	O
fval	double
,	O
&	O
modifier	char
)	O
>=	O
1	int
&&	O
fval	double
>=	O
0	int
)	O
{	O
if	O
(	O
modifier	char
)	O
{	O
switch	O
(	O
c_tolower	function
(	O
modifier	char
)	O
)	O
{	O
case	O
's'	O
:	O
fval	double
*=	O
1000	int
;	O
break	O
;	O
case	O
'm'	O
:	O
fval	double
*=	O
60	int
*	O
1000	int
;	O
break	O
;	O
case	O
'h'	O
:	O
fval	double
*=	O
60	int
*	O
60	int
*	O
1000	int
;	O
break	O
;	O
case	O
'd'	O
:	O
fval	double
*=	O
60	int
*	O
60	int
*	O
24	int
*	O
1000	int
;	O
break	O
;	O
default	O
:	O
error_printf	O
(	O
_	O
(	O
"Invalid time specifier in '%s'\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
fval	double
*=	O
1000	int
;	O
}	O
}	O
if	O
(	O
fval	double
<=	O
0	int
)	O
fval	double
=	O
-	O
1	int
;	O
if	O
(	O
opt	pointer
->	O
var	pointer
)	O
{	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
fval	double
>	O
INT_MAX	O
?	O
INT_MAX	O
:	O
(	O
int	O
)	O
fval	double
;	O
}	O
else	O
{	O
config	struct
.	O
connect_timeout	int
=	O
config	struct
.	O
dns_timeout	int
=	O
config	struct
.	O
read_timeout	int
=	O
fval	double
>	O
INT_MAX	O
?	O
INT_MAX	O
:	O
(	O
int	O
)	O
fval	double
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
WGET_GCC_PURE	O
WGET_GCC_NONNULL	O
(	O
(	O
1	int
)	O
)	O
parse_cert_type	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
!	O
val	array
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"PEM"	pointer
)	O
)	O
*	O
(	O
(	O
char	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_SSL_X509_FMT_PEM	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"DER"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"ASN1"	pointer
)	O
)	O
*	O
(	O
(	O
char	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_SSL_X509_FMT_DER	int
;	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Unknown cert type '%s'\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
WGET_GCC_PURE	O
WGET_GCC_NONNULL	O
(	O
(	O
1	int
)	O
)	O
parse_regex_type	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
!	O
val	array
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"posix"	pointer
)	O
)	O
*	O
(	O
(	O
char	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_REGEX_TYPE_POSIX	int
;	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Unsupported regex type '%s'\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
WGET_GCC_PURE	O
WGET_GCC_NONNULL	O
(	O
(	O
1	int
)	O
)	O
parse_progress_type	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
!	O
val	array
||	O
!	O
*	O
val	array
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Empty progress type\n"	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"none"	pointer
)	O
)	O
*	O
(	O
(	O
char	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
0	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"bar"	pointer
)	O
)	O
*	O
(	O
(	O
char	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
1	int
;	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Unknown progress type '%s'\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
WGET_GCC_PURE	O
WGET_GCC_NONNULL	O
(	O
(	O
1	int
)	O
)	O
parse_restrict_names	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
!	O
val	array
||	O
!	O
*	O
val	array
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"none"	pointer
)	O
)	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_RESTRICT_NAMES_NONE	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"unix"	pointer
)	O
)	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_RESTRICT_NAMES_UNIX	O
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"windows"	pointer
)	O
)	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_RESTRICT_NAMES_WINDOWS	O
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"nocontrol"	pointer
)	O
)	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_RESTRICT_NAMES_NOCONTROL	O
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"ascii"	pointer
)	O
)	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_RESTRICT_NAMES_ASCII	O
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"uppercase"	pointer
)	O
)	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_RESTRICT_NAMES_UPPERCASE	O
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"lowercase"	pointer
)	O
)	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_RESTRICT_NAMES_LOWERCASE	O
;	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Unknown restrict-file-name type '%s'\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_n_option	function
(	O
WGET_GCC_UNUSED	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
val	array
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
val	array
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
'v'	O
:	O
config	struct
.	O
verbose	char
=	O
0	int
;	O
break	O
;	O
case	O
'c'	O
:	O
config	struct
.	O
clobber	char
=	O
0	int
;	O
break	O
;	O
case	O
'd'	O
:	O
config	struct
.	O
directories	char
=	O
0	int
;	O
break	O
;	O
case	O
'H'	O
:	O
config	struct
.	O
host_directories	char
=	O
0	int
;	O
break	O
;	O
case	O
'p'	O
:	O
config	struct
.	O
parent	char
=	O
0	int
;	O
break	O
;	O
default	O
:	O
error_printf	O
(	O
_	O
(	O
"Unknown option '-n%c'\n"	pointer
)	O
,	O
*	O
p	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
debug_printf	O
(	O
"name=-n%c value=0\n"	pointer
,	O
*	O
p	pointer
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_prefer_family	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
!	O
val	array
||	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"none"	pointer
)	O
)	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_NET_FAMILY_ANY	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"ipv4"	pointer
)	O
)	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_NET_FAMILY_IPV4	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"ipv6"	pointer
)	O
)	O
*	O
(	O
(	O
int	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_NET_FAMILY_IPV6	int
;	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Unknown address family '%s'\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_stats	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
const	O
char	O
invert	char
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
wget_stats_format	enum
format	enum
;	O
stats_args	struct
*	O
*	O
stats	pointer
=	O
(	O
stats_args	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
;	O
if	O
(	O
*	O
stats	pointer
)	O
xfree	O
(	O
(	O
*	O
stats	pointer
)	O
->	O
filename	pointer
)	O
;	O
if	O
(	O
invert	char
)	O
{	O
xfree	O
(	O
*	O
stats	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
val	array
&&	O
(	O
p	pointer
=	O
strchr	function
(	O
val	array
,	O
':'	O
)	O
)	O
)	O
{	O
if	O
(	O
!	O
wget_strncasecmp_ascii	function
(	O
"human"	pointer
,	O
val	array
,	O
p	pointer
-	O
val	array
)	O
||	O
!	O
wget_strncasecmp_ascii	function
(	O
"h"	pointer
,	O
val	array
,	O
p	pointer
-	O
val	array
)	O
)	O
format	enum
=	O
WGET_STATS_FORMAT_HUMAN	int
;	O
else	O
if	O
(	O
!	O
wget_strncasecmp_ascii	function
(	O
"csv"	pointer
,	O
val	array
,	O
p	pointer
-	O
val	array
)	O
)	O
format	enum
=	O
WGET_STATS_FORMAT_CSV	int
;	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Unknown stats format '%s'\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
val	array
=	O
p	pointer
+	O
1	int
;	O
}	O
else	O
{	O
format	enum
=	O
WGET_STATS_FORMAT_HUMAN	int
;	O
}	O
if	O
(	O
!	O
*	O
stats	pointer
)	O
*	O
stats	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
stats_args	struct
)	O
)	O
;	O
(	O
*	O
stats	pointer
)	O
->	O
filename	pointer
=	O
shell_expand	function
(	O
val	array
)	O
;	O
(	O
*	O
stats	pointer
)	O
->	O
format	enum
=	O
format	enum
;	O
return	O
0	int
;	O
}	O
static	O
int	O
plugin_loading_enabled	int
=	O
0	int
;	O
static	O
int	O
parse_plugin	function
(	O
WGET_GCC_UNUSED	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
dl_error_t	struct
e	pointer
[	O
1	int
]	O
;	O
if	O
(	O
!	O
plugin_loading_enabled	int
)	O
return	O
0	int
;	O
dl_error_init	function
(	O
e	pointer
)	O
;	O
if	O
(	O
!	O
plugin_db_load_from_name	function
(	O
val	array
,	O
e	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Plugin '%s' failed to load: %s\n"	pointer
)	O
,	O
val	array
,	O
dl_error_get_msg	function
(	O
e	pointer
)	O
)	O
;	O
dl_error_set	function
(	O
e	pointer
,	O
NULL	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_plugin_local	function
(	O
WGET_GCC_UNUSED	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
dl_error_t	struct
e	pointer
[	O
1	int
]	O
;	O
if	O
(	O
!	O
plugin_loading_enabled	int
)	O
return	O
0	int
;	O
dl_error_init	function
(	O
e	pointer
)	O
;	O
if	O
(	O
!	O
plugin_db_load_from_path	function
(	O
val	array
,	O
e	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Plugin '%s' failed to load: %s\n"	pointer
)	O
,	O
val	array
,	O
dl_error_get_msg	function
(	O
e	pointer
)	O
)	O
;	O
dl_error_set	function
(	O
e	pointer
,	O
NULL	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_plugin_dirs	function
(	O
WGET_GCC_UNUSED	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
!	O
plugin_loading_enabled	int
)	O
return	O
0	int
;	O
plugin_db_clear_search_paths	function
(	O
)	O
;	O
plugin_db_add_search_paths	function
(	O
val	array
,	O
','	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_plugin_option	function
(	O
WGET_GCC_UNUSED	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
dl_error_t	struct
e	pointer
[	O
1	int
]	O
;	O
if	O
(	O
!	O
plugin_loading_enabled	int
)	O
return	O
0	int
;	O
dl_error_init	function
(	O
e	pointer
)	O
;	O
if	O
(	O
plugin_db_forward_option	function
(	O
val	array
,	O
e	pointer
)	O
<	O
0	int
)	O
{	O
error_printf	O
(	O
"%s\n"	pointer
,	O
dl_error_get_msg	function
(	O
e	pointer
)	O
)	O
;	O
dl_error_set	function
(	O
e	pointer
,	O
NULL	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_local_db	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
const	O
char	O
invert	char
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
parse_bool	function
(	O
opt	pointer
,	O
val	array
,	O
invert	char
)	O
)	O
<	O
0	int
)	O
return	O
rc	int
;	O
config	struct
.	O
cookies	pointer
=	O
config	struct
.	O
hsts	bool
=	O
config	struct
.	O
hpkp	pointer
=	O
config	struct
.	O
ocsp	char
=	O
config	struct
.	O
tls_resume	char
=	O
config	struct
.	O
local_db	char
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_report_speed_type	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"bytes"	pointer
)	O
)	O
*	O
(	O
(	O
wget_report_speed	enum
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_REPORT_SPEED_BYTES	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"bits"	pointer
)	O
)	O
*	O
(	O
(	O
wget_report_speed	enum
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_REPORT_SPEED_BITS	int
;	O
else	O
if	O
(	O
!	O
val	array
[	O
0	int
]	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Missing required type specifier\n"	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Invalid type specifier: %s\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_https_enforce	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"hard"	pointer
)	O
)	O
*	O
(	O
(	O
char	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_HTTPS_ENFORCE_HARD	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"soft"	pointer
)	O
)	O
*	O
(	O
(	O
char	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_HTTPS_ENFORCE_SOFT	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
val	array
,	O
"none"	pointer
)	O
)	O
*	O
(	O
(	O
char	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
=	O
WGET_HTTPS_ENFORCE_NONE	int
;	O
else	O
if	O
(	O
!	O
val	array
[	O
0	int
]	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Missing required type specifier\n"	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Invalid type specifier: %s\n"	pointer
)	O
,	O
val	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_compression	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
const	O
char	O
invert	char
)	O
{	O
wget_vector	struct
*	O
v	pointer
=	O
*	O
(	O
(	O
wget_vector	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
;	O
if	O
(	O
!	O
val	array
&&	O
invert	char
)	O
{	O
if	O
(	O
v	pointer
)	O
{	O
wget_vector_free	function
(	O
(	O
wget_vector	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
;	O
config	struct
.	O
compression_methods	array
[	O
wget_content_encoding_max	int
]	O
=	O
0	int
;	O
}	O
config	struct
.	O
no_compression	bool
=	O
true	int
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
val	array
&&	O
!	O
invert	char
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
v	pointer
)	O
{	O
wget_vector_free	function
(	O
(	O
wget_vector	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
;	O
config	struct
.	O
compression_methods	array
[	O
wget_content_encoding_max	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
parse_stringlist_expand	function
(	O
opt	pointer
,	O
val	array
,	O
0	int
,	O
16	int
)	O
)	O
)	O
return	O
rc	int
;	O
v	pointer
=	O
*	O
(	O
(	O
wget_vector	struct
*	O
*	O
)	O
opt	pointer
->	O
var	pointer
)	O
;	O
config	struct
.	O
no_compression	bool
=	O
false	int
;	O
long	O
long	O
methods_bits	long long
=	O
0	int
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
v	pointer
)	O
;	O
it	int
++	O
)	O
{	O
int	O
not_built	int
=	O
0	int
;	O
wget_content_encoding	enum
type	enum
=	O
wget_content_encoding_by_name	function
(	O
wget_vector_get	function
(	O
v	pointer
,	O
it	int
)	O
)	O
;	O
if	O
(	O
type	enum
==	O
wget_content_encoding_unknown	int
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Compression type %s not supported\n"	pointer
)	O
,	O
wget_content_encoding_to_name	function
(	O
type	enum
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
methods_bits	long long
&	O
(	O
1	int
<<	O
type	enum
)	O
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Duplicate type %s"	pointer
)	O
,	O
wget_content_encoding_to_name	function
(	O
type	enum
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
type	enum
==	O
wget_content_encoding_bzip2	int
)	O
not_built	int
=	O
1	int
;	O
if	O
(	O
type	enum
==	O
wget_content_encoding_xz	int
||	O
type	enum
==	O
wget_content_encoding_lzma	int
)	O
not_built	int
=	O
1	int
;	O
if	O
(	O
type	enum
==	O
wget_content_encoding_brotli	int
)	O
not_built	int
=	O
1	int
;	O
if	O
(	O
type	enum
==	O
wget_content_encoding_zstd	int
)	O
not_built	int
=	O
1	int
;	O
if	O
(	O
not_built	int
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Lib for type %s not built"	pointer
)	O
,	O
wget_content_encoding_to_name	function
(	O
type	enum
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
methods_bits	long long
|=	O
(	O
1	int
<<	O
type	enum
)	O
;	O
config	struct
.	O
compression_methods	array
[	O
config	struct
.	O
compression_methods	array
[	O
wget_content_encoding_max	int
]	O
++	O
]	O
=	O
type	enum
;	O
}	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
val	array
&&	O
!	O
invert	char
)	O
{	O
config	struct
.	O
no_compression	bool
=	O
false	int
;	O
return	O
0	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
list_plugins	function
(	O
WGET_GCC_UNUSED	O
option_t	pointer
opt	pointer
,	O
WGET_GCC_UNUSED	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
!	O
plugin_loading_enabled	int
)	O
return	O
0	int
;	O
wget_vector	struct
*	O
v	pointer
=	O
wget_vector_create	function
(	O
16	int
,	O
NULL	O
)	O
;	O
plugin_db_list	function
(	O
v	pointer
)	O
;	O
int	O
n_names	int
=	O
wget_vector_size	function
(	O
v	pointer
)	O
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
n_names	int
;	O
i	int
++	O
)	O
{	O
const	O
char	O
*	O
name	pointer
=	O
(	O
const	O
char	O
*	O
)	O
wget_vector_get	function
(	O
v	pointer
,	O
i	int
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
name	pointer
)	O
;	O
}	O
wget_vector_free	function
(	O
&	O
v	pointer
)	O
;	O
set_exit_status	function
(	O
WG_EXIT_STATUS_NO_ERROR	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
print_plugin_help	function
(	O
WGET_GCC_UNUSED	O
option_t	pointer
opt	pointer
,	O
WGET_GCC_UNUSED	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
if	O
(	O
!	O
plugin_loading_enabled	int
)	O
return	O
0	int
;	O
plugin_db_show_help	function
(	O
)	O
;	O
set_exit_status	function
(	O
WG_EXIT_STATUS_NO_ERROR	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
struct	O
config	struct
config	struct
=	O
{	O
.	O
auth_no_challenge	bool
=	O
false	int
,	O
.	O
connect_timeout	int
=	O
-	O
1	int
,	O
.	O
dns_timeout	int
=	O
-	O
1	int
,	O
.	O
read_timeout	int
=	O
900	int
*	O
1000	int
,	O
.	O
max_redirect	int
=	O
20	int
,	O
.	O
max_threads	int
=	O
5	int
,	O
.	O
dns_caching	char
=	O
1	int
,	O
.	O
tcp_fastopen	int
=	O
1	int
,	O
.	O
user_agent	pointer
=	O
PACKAGE_NAME	pointer
"/"	pointer
PACKAGE_VERSION	pointer
,	O
.	O
verbose	char
=	O
1	int
,	O
.	O
check_certificate	char
=	O
1	int
,	O
.	O
check_hostname	char
=	O
1	int
,	O
.	O
cert_type	char
=	O
WGET_SSL_X509_FMT_PEM	int
,	O
.	O
private_key_type	char
=	O
WGET_SSL_X509_FMT_PEM	int
,	O
.	O
secure_protocol	pointer
=	O
"AUTO"	pointer
,	O
.	O
ca_directory	pointer
=	O
"system"	pointer
,	O
.	O
cookies	pointer
=	O
1	int
,	O
.	O
keep_alive	char
=	O
1	int
,	O
.	O
use_server_timestamps	char
=	O
1	int
,	O
.	O
directories	char
=	O
1	int
,	O
.	O
host_directories	char
=	O
1	int
,	O
.	O
cache	pointer
=	O
1	int
,	O
.	O
clobber	char
=	O
1	int
,	O
.	O
default_page	pointer
=	O
"index.html"	pointer
,	O
.	O
level	int
=	O
5	int
,	O
.	O
parent	char
=	O
1	int
,	O
.	O
robots	pointer
=	O
1	int
,	O
.	O
tries	int
=	O
20	int
,	O
.	O
hsts	bool
=	O
1	int
,	O
.	O
hsts_preload	char
=	O
1	int
,	O
.	O
hpkp	pointer
=	O
1	int
,	O
.	O
system_config	pointer
=	O
SYSCONFDIR	O
"wget2rc"	pointer
,	O
.	O
ocsp	char
=	O
1	int
,	O
.	O
ocsp_date	int
=	O
1	int
,	O
.	O
ocsp_stapling	char
=	O
1	int
,	O
.	O
ocsp_nonce	int
=	O
1	int
,	O
.	O
netrc	pointer
=	O
1	int
,	O
.	O
waitretry	int
=	O
10	int
*	O
1000	int
,	O
.	O
metalink	pointer
=	O
1	int
,	O
.	O
tls_false_start	char
=	O
1	int
,	O
.	O
proxy	pointer
=	O
1	int
,	O
.	O
local_db	char
=	O
1	int
,	O
.	O
report_speed	enum
=	O
WGET_REPORT_SPEED_BYTES	int
,	O
.	O
default_http_port	short
=	O
80	int
,	O
.	O
default_https_port	short
=	O
443	int
,	O
.	O
if_modified_since	char
=	O
1	int
}	O
;	O
static	O
int	O
parse_execute	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
const	O
char	O
invert	char
)	O
;	O
static	O
int	O
parse_proxy	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
const	O
char	O
invert	char
)	O
;	O
static	O
int	O
print_help	function
(	O
WGET_GCC_UNUSED	O
option_t	pointer
opt	pointer
,	O
WGET_GCC_UNUSED	O
const	O
char	O
*	O
val	array
,	O
const	O
char	O
invert	char
)	O
;	O
static	O
const	O
struct	O
optionw	struct
options	array
[	O
]	O
=	O
{	O
{	O
"accept"	pointer
,	O
&	O
config	struct
.	O
accept_patterns	pointer
,	O
parse_stringlist	function
,	O
1	int
,	O
'A'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Comma-separated list of file name suffixes or\n"	pointer
,	O
"patterns.\n"	pointer
}	O
}	O
,	O
{	O
"accept-regex"	pointer
,	O
&	O
config	struct
.	O
accept_regex	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Regex matching accepted URLs.\n"	pointer
}	O
}	O
,	O
{	O
"adjust-extension"	pointer
,	O
&	O
config	struct
.	O
adjust_extension	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'E'	O
,	O
SECTION_HTTP	int
,	O
{	O
"Append extension to saved file (.html or .css).\n"	pointer
,	O
"(default: off)\n"	pointer
}	O
}	O
,	O
{	O
"append-output"	pointer
,	O
&	O
config	struct
.	O
logfile_append	pointer
,	O
parse_string	function
,	O
1	int
,	O
'a'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"File where messages are appended to, '-' for STDOUT\n"	pointer
}	O
}	O
,	O
{	O
"ask-password"	pointer
,	O
&	O
config	struct
.	O
askpass	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Print prompt for password\n"	pointer
}	O
}	O
,	O
{	O
"auth-no-challenge"	pointer
,	O
&	O
config	struct
.	O
auth_no_challenge	bool
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"send Basic HTTP Authentication before challenge\n"	pointer
}	O
}	O
,	O
{	O
"background"	pointer
,	O
&	O
config	struct
.	O
background	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'b'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"Go to background immediately after startup. If no\n"	pointer
,	O
"output file is specified via the -o, output is redirected to wget-log\n"	pointer
}	O
}	O
,	O
{	O
"backup-converted"	pointer
,	O
&	O
config	struct
.	O
backup_converted	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'K'	O
,	O
SECTION_HTTP	int
,	O
{	O
"When converting, keep the original file with\n"	pointer
,	O
"a .orig suffix. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"backups"	pointer
,	O
&	O
config	struct
.	O
backups	int
,	O
parse_integer	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Make backups instead of overwriting/increasing\n"	pointer
,	O
"number. (default: 0)\n"	pointer
}	O
}	O
,	O
{	O
"base"	pointer
,	O
&	O
config	struct
.	O
base_url	pointer
,	O
parse_string	function
,	O
1	int
,	O
'B'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"Base for relative URLs read from input-file\n"	pointer
,	O
"or from command line\n"	pointer
}	O
}	O
,	O
{	O
"bind-address"	pointer
,	O
&	O
config	struct
.	O
bind_address	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Bind to sockets to local address.\n"	pointer
,	O
"(default: automatic)\n"	pointer
}	O
}	O
,	O
{	O
"ca-certificate"	pointer
,	O
&	O
config	struct
.	O
ca_cert	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"File with bundle of PEM CA certificates.\n"	pointer
}	O
}	O
,	O
{	O
"ca-directory"	pointer
,	O
&	O
config	struct
.	O
ca_directory	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Directory with PEM CA certificates.\n"	pointer
}	O
}	O
,	O
{	O
"cache"	pointer
,	O
&	O
config	struct
.	O
cache	pointer
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Enabled using of server cache. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"certificate"	pointer
,	O
&	O
config	struct
.	O
cert_file	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"File with client certificate.\n"	pointer
}	O
}	O
,	O
{	O
"certificate-type"	pointer
,	O
&	O
config	struct
.	O
cert_type	char
,	O
parse_cert_type	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Certificate type: PEM or DER (known as ASN1).\n"	pointer
,	O
"(default: PEM)\n"	pointer
}	O
}	O
,	O
{	O
"check-certificate"	pointer
,	O
&	O
config	struct
.	O
check_certificate	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Check the server's certificate. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"check-hostname"	pointer
,	O
&	O
config	struct
.	O
check_hostname	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Check the server's certificate's hostname.\n"	pointer
,	O
"(default: on)\n"	pointer
}	O
}	O
,	O
{	O
"chunk-size"	pointer
,	O
&	O
config	struct
.	O
chunk_size	long
,	O
parse_numbytes	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Download large files in multithreaded chunks.\n"	pointer
,	O
"(default: 0 (=off)) Example:\n"	pointer
,	O
"wget --chunk-size=1M\n"	pointer
}	O
}	O
,	O
{	O
"clobber"	pointer
,	O
&	O
config	struct
.	O
clobber	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Enable file clobbering. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"compression"	pointer
,	O
&	O
config	struct
.	O
compression	pointer
,	O
parse_compression	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Customize Accept-Encoding with\n"	pointer
,	O
"identity, gzip, deflate, xz, lzma, br, bzip2, zstd\n"	pointer
,	O
"and any combination of it\n"	pointer
,	O
"no-compression means no Accept-Encoding\n"	pointer
}	O
}	O
,	O
{	O
"config"	pointer
,	O
&	O
config	struct
.	O
user_config	pointer
,	O
parse_filename	function
,	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Path to initialization file (default: ~/.config/wget/wget2rc)\n"	pointer
}	O
}	O
,	O
{	O
"connect-timeout"	pointer
,	O
&	O
config	struct
.	O
connect_timeout	int
,	O
parse_timeout	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Connect timeout in seconds.\n"	pointer
}	O
}	O
,	O
{	O
"content-disposition"	pointer
,	O
&	O
config	struct
.	O
content_disposition	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Take filename from Content-Disposition.\n"	pointer
,	O
"(default: off)\n"	pointer
}	O
}	O
,	O
{	O
"content-on-error"	pointer
,	O
&	O
config	struct
.	O
content_on_error	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Save response body even on error status.\n"	pointer
,	O
"(default: off)\n"	pointer
}	O
}	O
,	O
{	O
"continue"	pointer
,	O
&	O
config	struct
.	O
continue_download	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'c'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Continue download for given files. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"convert-links"	pointer
,	O
&	O
config	struct
.	O
convert_links	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'k'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Convert embedded URLs to local URLs.\n"	pointer
,	O
"(default: off)\n"	pointer
}	O
}	O
,	O
{	O
"cookie-suffixes"	pointer
,	O
&	O
config	struct
.	O
cookie_suffixes	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Load public suffixes from file. \n"	pointer
,	O
"They prevent 'supercookie' vulnerabilities.\n"	pointer
,	O
"See https://publicsuffix.org/ for details.\n"	pointer
,	O
}	O
}	O
,	O
{	O
"cookies"	pointer
,	O
&	O
config	struct
.	O
cookies	pointer
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Enable use of cookies. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"crl-file"	pointer
,	O
&	O
config	struct
.	O
crl_file	pointer
,	O
parse_filename	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"File with PEM CRL certificates.\n"	pointer
}	O
}	O
,	O
{	O
"cut-dirs"	pointer
,	O
&	O
config	struct
.	O
cut_directories	int
,	O
parse_integer	function
,	O
1	int
,	O
0	int
,	O
SECTION_DIRECTORY	int
,	O
{	O
"Skip creating given number of directory\n"	pointer
,	O
"components. (default: 0)\n"	pointer
}	O
}	O
,	O
{	O
"cut-file-get-vars"	pointer
,	O
&	O
config	struct
.	O
cut_file_get_vars	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Cut HTTP GET vars from file names. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"cut-url-get-vars"	pointer
,	O
&	O
config	struct
.	O
cut_url_get_vars	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Cut HTTP GET vars from URLs. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"debug"	pointer
,	O
&	O
config	struct
.	O
debug	int
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'd'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"Print debugging messages.(default: off)\n"	pointer
}	O
}	O
,	O
{	O
"default-http-port"	pointer
,	O
&	O
config	struct
.	O
default_http_port	short
,	O
parse_uint16	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Set default port for HTTP. (default: 80)\n"	pointer
}	O
}	O
,	O
{	O
"default-https-port"	pointer
,	O
&	O
config	struct
.	O
default_https_port	short
,	O
parse_uint16	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Set default port for HTTPS. (default: 443)\n"	pointer
}	O
}	O
,	O
{	O
"default-page"	pointer
,	O
&	O
config	struct
.	O
default_page	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Default file name. (default: index.html)\n"	pointer
}	O
}	O
,	O
{	O
"delete-after"	pointer
,	O
&	O
config	struct
.	O
delete_after	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Don't save downloaded files. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"directories"	pointer
,	O
&	O
config	struct
.	O
directories	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DIRECTORY	int
,	O
{	O
"Create hierarchy of directories when retrieving\n"	pointer
,	O
"recursively. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"directory-prefix"	pointer
,	O
&	O
config	struct
.	O
directory_prefix	pointer
,	O
parse_string	function
,	O
1	int
,	O
'P'	O
,	O
SECTION_DIRECTORY	int
,	O
{	O
"Set directory prefix.\n"	pointer
}	O
}	O
,	O
{	O
"dns-cache"	pointer
,	O
&	O
config	struct
.	O
dns_caching	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Caching of domain name lookups. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"dns-cache-preload"	pointer
,	O
&	O
config	struct
.	O
dns_cache_preload	pointer
,	O
parse_filename	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"File to be used to preload the DNS cache.\n"	pointer
,	O
"Format is like /etc/hosts (IP<whitespace>hostname).\n"	pointer
}	O
}	O
,	O
{	O
"dns-timeout"	pointer
,	O
&	O
config	struct
.	O
dns_timeout	int
,	O
parse_timeout	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"DNS lookup timeout in seconds.\n"	pointer
}	O
}	O
,	O
{	O
"domains"	pointer
,	O
&	O
config	struct
.	O
domains	pointer
,	O
parse_stringlist	function
,	O
1	int
,	O
'D'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Comma-separated list of domains to follow.\n"	pointer
}	O
}	O
,	O
{	O
"egd-file"	pointer
,	O
&	O
config	struct
.	O
egd_file	pointer
,	O
parse_filename	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"File to be used as socket for random data from\n"	pointer
,	O
"Entropy Gathering Daemon.\n"	pointer
}	O
}	O
,	O
{	O
"exclude-directories"	pointer
,	O
&	O
config	struct
.	O
exclude_directories	pointer
,	O
parse_excluded_directories	function
,	O
1	int
,	O
'X'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Comma-separated list of directories NOT to download.\n"	pointer
,	O
"Wildcards are allowed.\n"	pointer
}	O
}	O
,	O
{	O
"exclude-domains"	pointer
,	O
&	O
config	struct
.	O
exclude_domains	pointer
,	O
parse_stringlist	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Comma-separated list of domains NOT to follow.\n"	pointer
}	O
}	O
,	O
{	O
"execute"	pointer
,	O
NULL	O
,	O
parse_execute	function
,	O
1	int
,	O
'e'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"Wget compatibility option, not needed for Wget\n"	pointer
}	O
}	O
,	O
{	O
"filter-mime-type"	pointer
,	O
&	O
config	struct
.	O
mime_types	pointer
,	O
parse_stringlist	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Specify a list of mime types to be saved or ignored\n"	pointer
}	O
}	O
,	O
{	O
"filter-urls"	pointer
,	O
&	O
config	struct
.	O
filter_urls	char
,	O
parse_bool	function
,	O
0	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Apply the accept and reject filters on the URL\n"	pointer
,	O
"before starting a download. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"follow-tags"	pointer
,	O
&	O
config	struct
.	O
follow_tags	pointer
,	O
parse_taglist	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Scan additional tag/attributes for URLs,\n"	pointer
,	O
"e.g. --follow-tags=\"img/data-500px,img/data-hires\n"	pointer
}	O
}	O
,	O
{	O
"force-atom"	pointer
,	O
&	O
config	struct
.	O
force_atom	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Treat input file as Atom Feed. (default: off) (NEW!)\n"	pointer
}	O
}	O
,	O
{	O
"force-css"	pointer
,	O
&	O
config	struct
.	O
force_css	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Treat input file as CSS. (default: off) (NEW!)\n"	pointer
}	O
}	O
,	O
{	O
"force-directories"	pointer
,	O
&	O
config	struct
.	O
force_directories	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'x'	O
,	O
SECTION_DIRECTORY	int
,	O
{	O
"Create hierarchy of directories when not\n"	pointer
,	O
"retrieving recursively. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"force-html"	pointer
,	O
&	O
config	struct
.	O
force_html	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'F'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"Treat input file as HTML. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"force-metalink"	pointer
,	O
&	O
config	struct
.	O
force_metalink	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Treat input file as Metalink. (default: off) (NEW!)\n"	pointer
}	O
}	O
,	O
{	O
"force-progress"	pointer
,	O
&	O
config	struct
.	O
force_progress	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Force progress bar.\n"	pointer
,	O
"(default: off)\n"	pointer
}	O
}	O
,	O
{	O
"force-rss"	pointer
,	O
&	O
config	struct
.	O
force_rss	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Treat input file as RSS Feed. (default: off) (NEW!)\n"	pointer
}	O
}	O
,	O
{	O
"force-sitemap"	pointer
,	O
&	O
config	struct
.	O
force_sitemap	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Treat input file as Sitemap. (default: off) (NEW!)\n"	pointer
}	O
}	O
,	O
{	O
"fsync-policy"	pointer
,	O
&	O
config	struct
.	O
fsync_policy	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Use fsync() to wait for data being written to\n"	pointer
,	O
"the pysical layer. (default: off) (NEW!)\n"	pointer
}	O
}	O
,	O
{	O
"header"	pointer
,	O
&	O
config	struct
.	O
headers	pointer
,	O
parse_header	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Insert input string as a HTTP header in\n"	pointer
,	O
"all requests\n"	pointer
}	O
}	O
,	O
{	O
"help"	pointer
,	O
NULL	O
,	O
print_help	function
,	O
0	int
,	O
'h'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"Print this help.\n"	pointer
}	O
}	O
,	O
{	O
"host-directories"	pointer
,	O
&	O
config	struct
.	O
host_directories	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DIRECTORY	int
,	O
{	O
"Create host directories when retrieving\n"	pointer
,	O
"recursively. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"hpkp"	pointer
,	O
&	O
config	struct
.	O
hpkp	pointer
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Use HTTP Public Key Pinning (HPKP). (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"hpkp-file"	pointer
,	O
&	O
config	struct
.	O
hpkp_file	pointer
,	O
parse_filename	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Set file for storing HPKP data\n"	pointer
,	O
"(default: ~/.wget-hpkp)\n"	pointer
}	O
}	O
,	O
{	O
"hsts"	pointer
,	O
&	O
config	struct
.	O
hsts	bool
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Use HTTP Strict Transport Security (HSTS).\n"	pointer
,	O
"(default: on)\n"	pointer
}	O
}	O
,	O
{	O
"hsts-file"	pointer
,	O
&	O
config	struct
.	O
hsts_file	pointer
,	O
parse_filename	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Set file for HSTS caching. (default: ~/.wget-hsts)\n"	pointer
}	O
}	O
,	O
{	O
"hsts-preload"	pointer
,	O
&	O
config	struct
.	O
hsts_preload	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Use HTTP Strict Transport Security (HSTS).\n"	pointer
,	O
"[Not built with libhsts, so not functional]\n"	pointer
}	O
}	O
,	O
{	O
"hsts-preload-file"	pointer
,	O
&	O
config	struct
.	O
hsts_preload_file	pointer
,	O
parse_filename	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Set name for the HSTS Preload file (DAFSA format).\n"	pointer
,	O
"[Not built with libhsts, so not functional]\n"	pointer
}	O
}	O
,	O
{	O
"html-extension"	pointer
,	O
&	O
config	struct
.	O
adjust_extension	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Obsoleted by --adjust-extension\n"	pointer
}	O
}	O
,	O
{	O
"http-keep-alive"	pointer
,	O
&	O
config	struct
.	O
keep_alive	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Keep connection open for further requests.\n"	pointer
,	O
"(default: on)\n"	pointer
}	O
}	O
,	O
{	O
"http-password"	pointer
,	O
&	O
config	struct
.	O
http_password	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Password for HTTP Authentication.\n"	pointer
,	O
"(default: empty password)\n"	pointer
}	O
}	O
,	O
{	O
"http-proxy"	pointer
,	O
&	O
config	struct
.	O
http_proxy	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Set HTTP proxy/proxies, overriding environment\n"	pointer
,	O
"variables. Use comma to separate proxies.\n"	pointer
}	O
}	O
,	O
{	O
"http-proxy-password"	pointer
,	O
&	O
config	struct
.	O
http_proxy_password	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Password for HTTP Proxy Authentication.\n"	pointer
,	O
"(default: empty password)\n"	pointer
}	O
}	O
,	O
{	O
"http-proxy-user"	pointer
,	O
&	O
config	struct
.	O
http_proxy_username	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Username for HTTP Proxy Authentication.\n"	pointer
,	O
"(default: empty username)\n"	pointer
}	O
}	O
,	O
{	O
"http-user"	pointer
,	O
&	O
config	struct
.	O
http_username	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Username for HTTP Authentication.\n"	pointer
,	O
"(default: empty username)\n"	pointer
}	O
}	O
,	O
{	O
"http2"	pointer
,	O
&	O
config	struct
.	O
http2	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Use HTTP/2 protocol if possible. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"http2-only"	pointer
,	O
&	O
config	struct
.	O
http2_only	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Only use HTTP/2 protocol, error if server doesn't offer it. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"http2-request-window"	pointer
,	O
&	O
config	struct
.	O
http2_request_window	int
,	O
parse_integer	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Max. number of parallel streams per HTTP/2\n"	pointer
,	O
"connection. (default: 30)\n"	pointer
}	O
}	O
,	O
{	O
"https-enforce"	pointer
,	O
&	O
config	struct
.	O
https_enforce	char
,	O
parse_https_enforce	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Use secure HTTPS instead of HTTP. Legal types are\n"	pointer
,	O
"'hard', 'soft' and 'none'.\n"	pointer
,	O
"If --https-only is enabled,\n"	pointer
,	O
"this option has no effect. (default: none)\n"	pointer
}	O
}	O
,	O
{	O
"https-only"	pointer
,	O
&	O
config	struct
.	O
https_only	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Do not follow non-secure URLs. (default: off).\n"	pointer
}	O
}	O
,	O
{	O
"https-proxy"	pointer
,	O
&	O
config	struct
.	O
https_proxy	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Set HTTPS proxy/proxies, overriding environment\n"	pointer
,	O
"variables. Use comma to separate proxies.\n"	pointer
}	O
}	O
,	O
{	O
"if-modified-since"	pointer
,	O
&	O
config	struct
.	O
if_modified_since	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Do not send If-Modified-Since header in -N mode.\n"	pointer
"Send preliminary HEAD request instead. This has only\n"	pointer
,	O
"effect in -N mode.\n"	pointer
}	O
}	O
,	O
{	O
"ignore-case"	pointer
,	O
&	O
config	struct
.	O
ignore_case	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Ignore case when matching files. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"ignore-tags"	pointer
,	O
&	O
config	struct
.	O
ignore_tags	pointer
,	O
parse_taglist	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Ignore tag/attributes for URL scanning,\n"	pointer
,	O
"e.g. --ignore-tags=\"img,a/href\n"	pointer
}	O
}	O
,	O
{	O
"include-directories"	pointer
,	O
&	O
config	struct
.	O
exclude_directories	pointer
,	O
parse_included_directories	function
,	O
1	int
,	O
'I'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Comma-separated list of directories TO download.\n"	pointer
,	O
"Wildcards are allowed.\n"	pointer
}	O
}	O
,	O
{	O
"inet4-only"	pointer
,	O
&	O
config	struct
.	O
inet4_only	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'4'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Use IPv4 connections only. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"inet6-only"	pointer
,	O
&	O
config	struct
.	O
inet6_only	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'6'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Use IPv6 connections only. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"input-encoding"	pointer
,	O
&	O
config	struct
.	O
input_encoding	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Character encoding of the file contents read with\n"	pointer
,	O
"--input-file. (default: local encoding)\n"	pointer
}	O
}	O
,	O
{	O
"input-file"	pointer
,	O
&	O
config	struct
.	O
input_file	pointer
,	O
parse_string	function
,	O
1	int
,	O
'i'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"File where URLs are read from, - for STDIN.\n"	pointer
}	O
}	O
,	O
{	O
"iri"	pointer
,	O
NULL	O
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Wget dummy option, you can't switch off\n"	pointer
,	O
"international support\n"	pointer
}	O
}	O
,	O
{	O
"keep-extension"	pointer
,	O
&	O
config	struct
.	O
keep_extension	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"If file exists: Use pattern 'basename_N.ext'\n"	pointer
,	O
"instead of 'filename.N'. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"keep-session-cookies"	pointer
,	O
&	O
config	struct
.	O
keep_session_cookies	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Also save session cookies. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"level"	pointer
,	O
&	O
config	struct
.	O
level	int
,	O
parse_integer	function
,	O
1	int
,	O
'l'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Maximum recursion depth. (default: 5)\n"	pointer
}	O
}	O
,	O
{	O
"limit-rate"	pointer
,	O
&	O
config	struct
.	O
limit_rate	long long
,	O
parse_numbytes	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Limit rate of download per second, 0 = no limit. (default: 0)\n"	pointer
}	O
}	O
,	O
{	O
"list-plugins"	pointer
,	O
NULL	O
,	O
list_plugins	function
,	O
0	int
,	O
0	int
,	O
SECTION_PLUGIN	int
,	O
{	O
"Lists all the plugins in the plugin search paths.\n"	pointer
}	O
}	O
,	O
{	O
"load-cookies"	pointer
,	O
&	O
config	struct
.	O
load_cookies	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Load cookies from file.\n"	pointer
}	O
}	O
,	O
{	O
"local-db"	pointer
,	O
&	O
config	struct
.	O
local_db	char
,	O
parse_local_db	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Read or load databases\n"	pointer
}	O
}	O
,	O
{	O
"local-encoding"	pointer
,	O
&	O
config	struct
.	O
local_encoding	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Character encoding of environment and filenames.\n"	pointer
}	O
}	O
,	O
{	O
"local-plugin"	pointer
,	O
NULL	O
,	O
parse_plugin_local	function
,	O
1	int
,	O
0	int
,	O
SECTION_PLUGIN	int
,	O
{	O
"Loads a plugin with a given path.\n"	pointer
}	O
}	O
,	O
{	O
"max-redirect"	pointer
,	O
&	O
config	struct
.	O
max_redirect	int
,	O
parse_integer	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Max. number of redirections to follow.\n"	pointer
,	O
"(default: 20)\n"	pointer
}	O
}	O
,	O
{	O
"max-threads"	pointer
,	O
&	O
config	struct
.	O
max_threads	int
,	O
parse_integer	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Max. concurrent download threads.\n"	pointer
,	O
"(default: 5) (NEW!)\n"	pointer
}	O
}	O
,	O
{	O
"metalink"	pointer
,	O
&	O
config	struct
.	O
metalink	pointer
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Follow a metalink file instead of storing it\n"	pointer
,	O
"(default: on)\n"	pointer
}	O
}	O
,	O
{	O
"mirror"	pointer
,	O
&	O
config	struct
.	O
mirror	char
,	O
parse_mirror	function
,	O
-	O
1	int
,	O
'm'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Turn on mirroring options -r -N -l inf\n"	pointer
}	O
}	O
,	O
{	O
"n"	pointer
,	O
NULL	O
,	O
parse_n_option	function
,	O
1	int
,	O
'n'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"Special compatibility option\n"	pointer
}	O
}	O
,	O
{	O
"netrc"	pointer
,	O
&	O
config	struct
.	O
netrc	pointer
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Load credentials from ~/.netrc if not given.\n"	pointer
,	O
"(default: on)\n"	pointer
}	O
}	O
,	O
{	O
"netrc-file"	pointer
,	O
&	O
config	struct
.	O
netrc_file	pointer
,	O
parse_filename	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Set file for login/password to use instead of\n"	pointer
,	O
"~/.netrc. (default: ~/.netrc)\n"	pointer
}	O
}	O
,	O
{	O
"ocsp"	pointer
,	O
&	O
config	struct
.	O
ocsp	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Use OCSP server access to verify server's\n"	pointer
,	O
"certificate. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"ocsp-date"	pointer
,	O
&	O
config	struct
.	O
ocsp_date	int
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Check if OCSP response date is too old.\n"	pointer
,	O
"(default: on)\n"	pointer
}	O
}	O
,	O
{	O
"ocsp-file"	pointer
,	O
&	O
config	struct
.	O
ocsp_file	pointer
,	O
parse_filename	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Set file for OCSP chaching.\n"	pointer
,	O
"(default: ~/.wget-ocsp)\n"	pointer
}	O
}	O
,	O
{	O
"ocsp-nonce"	pointer
,	O
&	O
config	struct
.	O
ocsp_nonce	int
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Allow nonce checking when verifying OCSP\n"	pointer
,	O
"response. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"ocsp-server"	pointer
,	O
&	O
config	struct
.	O
ocsp_server	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Set OCSP server address.\n"	pointer
,	O
"(default: OCSP server given in certificate)\n"	pointer
}	O
}	O
,	O
{	O
"ocsp-stapling"	pointer
,	O
&	O
config	struct
.	O
ocsp_stapling	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Use OCSP stapling to verify the server's\n"	pointer
,	O
"certificate. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"output-document"	pointer
,	O
&	O
config	struct
.	O
output_document	pointer
,	O
parse_string	function
,	O
1	int
,	O
'O'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"File where downloaded content is written to,\n"	pointer
,	O
"'-O'  for STDOUT.\n"	pointer
}	O
}	O
,	O
{	O
"output-file"	pointer
,	O
&	O
config	struct
.	O
logfile	pointer
,	O
parse_string	function
,	O
1	int
,	O
'o'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"File where messages are printed to,\n"	pointer
,	O
"'-' for STDOUT.\n"	pointer
}	O
}	O
,	O
{	O
"page-requisites"	pointer
,	O
&	O
config	struct
.	O
page_requisites	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'p'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Download all necessary files to display a\n"	pointer
,	O
"HTML page\n"	pointer
}	O
}	O
,	O
{	O
"parent"	pointer
,	O
&	O
config	struct
.	O
parent	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Ascend above parent directory. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"password"	pointer
,	O
&	O
config	struct
.	O
password	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Password for Authentication.\n"	pointer
,	O
"(default: empty password)\n"	pointer
}	O
}	O
,	O
{	O
"plugin"	pointer
,	O
NULL	O
,	O
parse_plugin	function
,	O
1	int
,	O
0	int
,	O
SECTION_PLUGIN	int
,	O
{	O
"Load a plugin with a given name.\n"	pointer
}	O
}	O
,	O
{	O
"plugin-dirs"	pointer
,	O
NULL	O
,	O
parse_plugin_dirs	function
,	O
1	int
,	O
0	int
,	O
SECTION_PLUGIN	int
,	O
{	O
"Specify alternative directories to look\n"	pointer
,	O
"for plugins, separated by ','\n"	pointer
}	O
}	O
,	O
{	O
"plugin-help"	pointer
,	O
NULL	O
,	O
print_plugin_help	function
,	O
0	int
,	O
0	int
,	O
SECTION_PLUGIN	int
,	O
{	O
"Print help message for all loaded plugins\n"	pointer
}	O
}	O
,	O
{	O
"plugin-opt"	pointer
,	O
NULL	O
,	O
parse_plugin_option	function
,	O
1	int
,	O
0	int
,	O
SECTION_PLUGIN	int
,	O
{	O
"Forward an option to a loaded plugin.\n"	pointer
,	O
"The option should be in format:\n"	pointer
,	O
"<plugin_name>.<option>[=value]\n"	pointer
}	O
}	O
,	O
{	O
"post-data"	pointer
,	O
&	O
config	struct
.	O
post_data	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Data to be sent in a POST request.\n"	pointer
}	O
}	O
,	O
{	O
"post-file"	pointer
,	O
&	O
config	struct
.	O
post_file	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"File with data to be sent in a POST request.\n"	pointer
}	O
}	O
,	O
{	O
"prefer-family"	pointer
,	O
&	O
config	struct
.	O
preferred_family	int
,	O
parse_prefer_family	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Prefer IPv4 or IPv6. (default: none)\n"	pointer
}	O
}	O
,	O
{	O
"private-key"	pointer
,	O
&	O
config	struct
.	O
private_key	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"File with private key.\n"	pointer
}	O
}	O
,	O
{	O
"private-key-type"	pointer
,	O
&	O
config	struct
.	O
private_key_type	char
,	O
parse_cert_type	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Type of the private key (PEM or DER).\n"	pointer
,	O
"(default: PEM)\n"	pointer
}	O
}	O
,	O
{	O
"progress"	pointer
,	O
&	O
config	struct
.	O
progress	char
,	O
parse_progress_type	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Type of progress bar (bar, none).\n"	pointer
,	O
"(default: none)\n"	pointer
}	O
}	O
,	O
{	O
"protocol-directories"	pointer
,	O
&	O
config	struct
.	O
protocol_directories	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DIRECTORY	int
,	O
{	O
"Force creating protocol directories.\n"	pointer
,	O
"(default: off)\n"	pointer
}	O
}	O
,	O
{	O
"proxy"	pointer
,	O
&	O
config	struct
.	O
proxy	pointer
,	O
parse_proxy	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Enable support for *_proxy environment variables.\n"	pointer
,	O
"(default: on)\n"	pointer
}	O
}	O
,	O
{	O
"quiet"	pointer
,	O
&	O
config	struct
.	O
quiet	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'q'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"Print no messages except debugging messages.\n"	pointer
,	O
"(default: off)\n"	pointer
}	O
}	O
,	O
{	O
"quota"	pointer
,	O
&	O
config	struct
.	O
quota	long long
,	O
parse_numbytes	function
,	O
1	int
,	O
'Q'	O
,	O
SECTION_HTTP	int
,	O
{	O
"Download quota, 0 = no quota. (default: 0)\n"	pointer
}	O
}	O
,	O
{	O
"random-file"	pointer
,	O
&	O
config	struct
.	O
random_file	pointer
,	O
parse_filename	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"File to be used as source of random data.\n"	pointer
}	O
}	O
,	O
{	O
"random-wait"	pointer
,	O
&	O
config	struct
.	O
random_wait	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Wait 0.5 up to 1.5*<--wait> seconds between\n"	pointer
,	O
"downloads (per thread). (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"read-timeout"	pointer
,	O
&	O
config	struct
.	O
read_timeout	int
,	O
parse_timeout	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Read and write timeout in seconds.\n"	pointer
}	O
}	O
,	O
{	O
"recursive"	pointer
,	O
&	O
config	struct
.	O
recursive	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'r'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Recursive download. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"referer"	pointer
,	O
&	O
config	struct
.	O
referer	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Include Referer: url in HTTP request.\n"	pointer
,	O
"(default: off)\n"	pointer
}	O
}	O
,	O
{	O
"regex-type"	pointer
,	O
&	O
config	struct
.	O
regex_type	char
,	O
parse_regex_type	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Regular expression type. This build only supports\n"	pointer
,	O
"posix. (default: posix)\n"	pointer
}	O
}	O
,	O
{	O
"reject"	pointer
,	O
&	O
config	struct
.	O
reject_patterns	pointer
,	O
parse_stringlist	function
,	O
1	int
,	O
'R'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Comma-separated list of file name suffixes or\n"	pointer
,	O
"patterns.\n"	pointer
}	O
}	O
,	O
{	O
"reject-regex"	pointer
,	O
&	O
config	struct
.	O
reject_regex	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Regex matching rejected URLs.\n"	pointer
}	O
}	O
,	O
{	O
"remote-encoding"	pointer
,	O
&	O
config	struct
.	O
remote_encoding	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Character encoding of remote files\n"	pointer
,	O
"(if not specified in Content-Type HTTP header\n"	pointer
,	O
"or in document itself)\n"	pointer
}	O
}	O
,	O
{	O
"report-speed"	pointer
,	O
&	O
config	struct
.	O
report_speed	enum
,	O
parse_report_speed_type	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Output bandwidth as TYPE. TYPE can be bytes\n"	pointer
,	O
"or bits. --progress MUST be used.\n"	pointer
}	O
}	O
,	O
{	O
"restrict-file-names"	pointer
,	O
&	O
config	struct
.	O
restrict_file_names	int
,	O
parse_restrict_names	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"unix, windows, nocontrol, ascii, lowercase,\n"	pointer
,	O
"uppercase, none\n"	pointer
}	O
}	O
,	O
{	O
"retry-connrefused"	pointer
,	O
&	O
config	struct
.	O
retry_connrefused	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Consider \"connection refused\" a transient error.\n"	pointer
,	O
" (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"retry-on-http-status"	pointer
,	O
&	O
config	struct
.	O
http_retry_on_status	pointer
,	O
parse_stringlist	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Specify a list of http statuses in which the download will be retried\n"	pointer
}	O
}	O
,	O
{	O
"robots"	pointer
,	O
&	O
config	struct
.	O
robots	pointer
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Respect robots.txt standard for recursive\n"	pointer
,	O
"downloads. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"save-content-on"	pointer
,	O
&	O
config	struct
.	O
save_content_on	pointer
,	O
parse_stringlist	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Specify a list of response codes that requires it's\n"	pointer
,	O
"response body to be saved on error status\n"	pointer
}	O
}	O
,	O
{	O
"save-cookies"	pointer
,	O
&	O
config	struct
.	O
save_cookies	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Save cookies to file.\n"	pointer
}	O
}	O
,	O
{	O
"save-headers"	pointer
,	O
&	O
config	struct
.	O
save_headers	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_HTTP	int
,	O
{	O
"Save the response headers in front of the response\n"	pointer
,	O
"data. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"secure-protocol"	pointer
,	O
&	O
config	struct
.	O
secure_protocol	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Set protocol to be used (auto, SSLv3, TLSv1, TLSv1_1, TLSv1_2, TLS1_3, PFS).\n"	pointer
,	O
"(default: auto). Or use GnuTLS priority\n"	pointer
,	O
"strings, e.g. NORMAL:-VERS-SSL3.0:-RSA\n"	pointer
}	O
}	O
,	O
{	O
"server-response"	pointer
,	O
&	O
config	struct
.	O
server_response	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'S'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Print the server response headers. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"span-hosts"	pointer
,	O
&	O
config	struct
.	O
span_hosts	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'H'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Span hosts that were not given on the\n"	pointer
,	O
"command line. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"spider"	pointer
,	O
&	O
config	struct
.	O
spider	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Enable web spider mode. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"start-pos"	pointer
,	O
&	O
config	struct
.	O
start_pos	long long
,	O
parse_numbytes	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Start downloading at zero-based position, 0 = option disabled. (default: 0)\n"	pointer
}	O
}	O
,	O
{	O
"stats-dns"	pointer
,	O
&	O
config	struct
.	O
stats_dns_args	pointer
,	O
parse_stats	function
,	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Print DNS stats. (default: off)\n"	pointer
,	O
"Additional format supported:\n"	pointer
,	O
"--stats-dns=[FORMAT:]FILE\n"	pointer
}	O
}	O
,	O
{	O
"stats-ocsp"	pointer
,	O
&	O
config	struct
.	O
stats_ocsp_args	pointer
,	O
parse_stats	function
,	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Print OCSP stats. (default: off)\n"	pointer
,	O
"Additional format supported:\n"	pointer
,	O
"--stats-ocsp=[FORMAT:]FILE\n"	pointer
}	O
}	O
,	O
{	O
"stats-server"	pointer
,	O
&	O
config	struct
.	O
stats_server_args	pointer
,	O
parse_stats	function
,	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Print server stats. (default: off)\n"	pointer
,	O
"Additional format supported:\n"	pointer
,	O
"--stats-server=[FORMAT:]FILE\n"	pointer
}	O
}	O
,	O
{	O
"stats-site"	pointer
,	O
&	O
config	struct
.	O
stats_site_args	pointer
,	O
parse_stats	function
,	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Print site stats. (default: off)\n"	pointer
,	O
"Additional format supported:\n"	pointer
,	O
"--stats-site=[FORMAT:]FILE\n"	pointer
}	O
}	O
,	O
{	O
"stats-tls"	pointer
,	O
&	O
config	struct
.	O
stats_tls_args	pointer
,	O
parse_stats	function
,	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Print TLS stats. (default: off)\n"	pointer
,	O
"Additional format supported:\n"	pointer
,	O
"--stats-tls=[FORMAT:]FILE\n"	pointer
}	O
}	O
,	O
{	O
"strict-comments"	pointer
,	O
&	O
config	struct
.	O
strict_comments	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"A dummy option. Parsing always works non-strict.\n"	pointer
}	O
}	O
,	O
{	O
"tcp-fastopen"	pointer
,	O
&	O
config	struct
.	O
tcp_fastopen	int
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Enable TCP Fast Open (TFO). (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"timeout"	pointer
,	O
NULL	O
,	O
parse_timeout	function
,	O
1	int
,	O
'T'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"General network timeout in seconds.\n"	pointer
}	O
}	O
,	O
{	O
"timestamping"	pointer
,	O
&	O
config	struct
.	O
timestamping	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'N'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Just retrieve younger files than the local ones.\n"	pointer
,	O
"(default: off)\n"	pointer
}	O
}	O
,	O
{	O
"tls-false-start"	pointer
,	O
&	O
config	struct
.	O
tls_false_start	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Enable TLS False Start (needs GnuTLS 3.5+).\n"	pointer
,	O
"(default: on)\n"	pointer
}	O
}	O
,	O
{	O
"tls-resume"	pointer
,	O
&	O
config	struct
.	O
tls_resume	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Enable TLS Session Resumption. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"tls-session-file"	pointer
,	O
&	O
config	struct
.	O
tls_session_file	pointer
,	O
parse_filename	function
,	O
1	int
,	O
0	int
,	O
SECTION_SSL	int
,	O
{	O
"Set file for TLS Session caching.\n"	pointer
,	O
"(default: ~/.wget-session)\n"	pointer
}	O
}	O
,	O
{	O
"tries"	pointer
,	O
&	O
config	struct
.	O
tries	int
,	O
parse_integer	function
,	O
1	int
,	O
't'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Number of tries for each download. (default 20)\n"	pointer
}	O
}	O
,	O
{	O
"trust-server-names"	pointer
,	O
&	O
config	struct
.	O
trust_server_names	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"On redirection use the server's filename.\n"	pointer
,	O
"(default: off)\n"	pointer
}	O
}	O
,	O
{	O
"unlink"	pointer
,	O
&	O
config	struct
.	O
unlink	function
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_STARTUP	int
,	O
{	O
"Remove files before clobbering. (default: off)\n"	pointer
}	O
}	O
,	O
{	O
"use-askpass"	pointer
,	O
&	O
config	struct
.	O
use_askpass_bin	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Prompt for a user and password using\n"	pointer
,	O
"the specified command.\n"	pointer
}	O
}	O
,	O
{	O
"use-server-timestamps"	pointer
,	O
&	O
config	struct
.	O
use_server_timestamps	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Set local file's timestamp to server's timestamp.\n"	pointer
,	O
"(default: on)\n"	pointer
}	O
}	O
,	O
{	O
"user"	pointer
,	O
&	O
config	struct
.	O
username	pointer
,	O
parse_string	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Username for Authentication.\n"	pointer
,	O
"(default: empty username)\n"	pointer
}	O
}	O
,	O
{	O
"user-agent"	pointer
,	O
&	O
config	struct
.	O
user_agent	pointer
,	O
parse_string	function
,	O
1	int
,	O
'U'	O
,	O
SECTION_HTTP	int
,	O
{	O
"HTTP User Agent string.\n"	pointer
,	O
"(default: wget)\n"	pointer
}	O
}	O
,	O
{	O
"verbose"	pointer
,	O
&	O
config	struct
.	O
verbose	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
'v'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"Print more messages. (default: on)\n"	pointer
}	O
}	O
,	O
{	O
"version"	pointer
,	O
NULL	O
,	O
print_version	char
,	O
0	int
,	O
'V'	O
,	O
SECTION_STARTUP	int
,	O
{	O
"Display the version of Wget and exit.\n"	pointer
}	O
}	O
,	O
{	O
"wait"	pointer
,	O
&	O
config	struct
.	O
wait	int
,	O
parse_timeout	function
,	O
1	int
,	O
'w'	O
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Wait number of seconds between downloads\n"	pointer
,	O
"(per thread). (default: 0)\n"	pointer
}	O
}	O
,	O
{	O
"waitretry"	pointer
,	O
&	O
config	struct
.	O
waitretry	int
,	O
parse_timeout	function
,	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Wait up to number of seconds after error\n"	pointer
,	O
"(per thread). (default: 10)\n"	pointer
}	O
}	O
,	O
{	O
"xattr"	pointer
,	O
&	O
config	struct
.	O
xattr	char
,	O
parse_bool	function
,	O
-	O
1	int
,	O
0	int
,	O
SECTION_DOWNLOAD	int
,	O
{	O
"Save extended file attributes. (default: off)\n"	pointer
}	O
}	O
}	O
;	O
static	O
inline	O
void	O
print_first	function
(	O
const	O
char	O
s	pointer
,	O
const	O
char	O
*	O
l	pointer
,	O
const	O
char	O
*	O
msg	pointer
)	O
{	O
if	O
(	O
strlen	function
(	O
l	pointer
)	O
>	O
18	int
)	O
{	O
printf	function
(	O
"  %c%-2c --%s\n"	pointer
,	O
(	O
s	pointer
?	O
'-'	O
:	O
' '	O
)	O
,	O
(	O
s	pointer
?	O
s	pointer
:	O
' '	O
)	O
,	O
l	pointer
)	O
;	O
printf	function
(	O
"%28s%s"	pointer
,	O
""	pointer
,	O
msg	pointer
)	O
;	O
}	O
else	O
printf	function
(	O
"  %c%-2c --%-18.18s  %s"	pointer
,	O
(	O
s	pointer
?	O
'-'	O
:	O
' '	O
)	O
,	O
(	O
s	pointer
?	O
s	pointer
:	O
' '	O
)	O
,	O
l	pointer
,	O
msg	pointer
)	O
;	O
}	O
static	O
inline	O
void	O
print_next	function
(	O
const	O
char	O
*	O
msg	pointer
)	O
{	O
printf	function
(	O
"%30s%s"	pointer
,	O
""	pointer
,	O
msg	pointer
)	O
;	O
}	O
static	O
int	O
print_help	function
(	O
WGET_GCC_UNUSED	O
option_t	pointer
opt	pointer
,	O
WGET_GCC_UNUSED	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
printf	function
(	O
"GNU Wget2 V"	pointer
PACKAGE_VERSION	pointer
" - multithreaded metalink/file/website downloader\n"	pointer
"\n"	pointer
"Usage: wget [options...] <url>...\n"	pointer
"\n"	pointer
)	O
;	O
for	O
(	O
help_section_t	enum
sect	enum
=	O
SECTION_STARTUP	int
;	O
sect	enum
<	O
SECTION_END	int
;	O
sect	enum
++	O
)	O
{	O
switch	O
(	O
sect	enum
)	O
{	O
case	O
SECTION_STARTUP	int
:	O
printf	function
(	O
"Startup:\n"	pointer
)	O
;	O
break	O
;	O
case	O
SECTION_DOWNLOAD	int
:	O
printf	function
(	O
"Download:\n"	pointer
)	O
;	O
break	O
;	O
case	O
SECTION_HTTP	int
:	O
printf	function
(	O
"HTTP related options:\n"	pointer
)	O
;	O
break	O
;	O
case	O
SECTION_SSL	int
:	O
printf	function
(	O
"HTTPS (SSL/TLS) related options:\n"	pointer
)	O
;	O
break	O
;	O
case	O
SECTION_DIRECTORY	int
:	O
printf	function
(	O
"Directory options:\n"	pointer
)	O
;	O
break	O
;	O
case	O
SECTION_PLUGIN	int
:	O
printf	function
(	O
"Plugin options:\n"	pointer
)	O
;	O
break	O
;	O
case	O
SECTION_END	int
:	O
break	O
;	O
default	O
:	O
printf	function
(	O
"Unknown help section %d\n"	pointer
,	O
(	O
int	O
)	O
sect	enum
)	O
;	O
break	O
;	O
}	O
for	O
(	O
unsigned	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
options	array
)	O
;	O
it	int
++	O
)	O
{	O
if	O
(	O
options	array
[	O
it	int
]	O
.	O
section	enum
==	O
sect	enum
)	O
{	O
if	O
(	O
options	array
[	O
it	int
]	O
.	O
short_name	char
==	O
'n'	O
)	O
continue	O
;	O
print_first	function
(	O
options	array
[	O
it	int
]	O
.	O
short_name	char
,	O
options	array
[	O
it	int
]	O
.	O
long_name	pointer
,	O
options	array
[	O
it	int
]	O
.	O
help_str	array
[	O
0	int
]	O
)	O
;	O
for	O
(	O
unsigned	O
i	int
=	O
1	int
;	O
i	int
<	O
countof	O
(	O
options	array
[	O
it	int
]	O
.	O
help_str	array
)	O
&&	O
options	array
[	O
it	int
]	O
.	O
help_str	array
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
print_next	function
(	O
options	array
[	O
it	int
]	O
.	O
help_str	array
[	O
i	int
]	O
)	O
;	O
}	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"Example boolean option:\n --quiet=no is the same as --no-quiet or --quiet=off or --quiet off\n"	pointer
)	O
;	O
printf	function
(	O
"Example string option:\n --user-agent=SpecialAgent/1.3.5 or --user-agent \"SpecialAgent/1.3.5\"\n"	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
"To reset string options use --[no-]option\n"	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
set_exit_status	function
(	O
WG_EXIT_STATUS_NO_ERROR	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
WGET_GCC_PURE	O
WGET_GCC_NONNULL_ALL	O
opt_compare	function
(	O
const	O
void	O
*	O
key	int
,	O
const	O
void	O
*	O
option	pointer
)	O
{	O
return	O
strcmp	function
(	O
key	int
,	O
(	O
(	O
option_t	pointer
)	O
option	pointer
)	O
->	O
long_name	pointer
)	O
;	O
}	O
static	O
int	O
WGET_GCC_PURE	O
WGET_GCC_NONNULL_ALL	O
opt_compare_config	function
(	O
const	O
void	O
*	O
key	int
,	O
const	O
void	O
*	O
option	pointer
)	O
{	O
return	O
wget_strcasecmp_ascii	function
(	O
key	int
,	O
(	O
(	O
option_t	pointer
)	O
option	pointer
)	O
->	O
long_name	pointer
)	O
;	O
}	O
static	O
int	O
WGET_GCC_PURE	O
WGET_GCC_NONNULL_ALL	O
opt_compare_config_linear	function
(	O
const	O
char	O
*	O
key	int
,	O
const	O
char	O
*	O
command	pointer
)	O
{	O
const	O
char	O
*	O
s1	pointer
=	O
key	int
,	O
*	O
s2	pointer
=	O
command	pointer
;	O
for	O
(	O
;	O
*	O
s1	pointer
&&	O
*	O
s2	pointer
;	O
s1	pointer
++	O
,	O
s2	pointer
++	O
)	O
{	O
if	O
(	O
*	O
s2	pointer
==	O
'-'	O
||	O
*	O
s2	pointer
==	O
'_'	O
)	O
{	O
if	O
(	O
*	O
s1	pointer
==	O
'-'	O
||	O
*	O
s1	pointer
==	O
'_'	O
)	O
s1	pointer
++	O
;	O
s2	pointer
++	O
;	O
}	O
if	O
(	O
!	O
*	O
s1	pointer
||	O
!	O
*	O
s2	pointer
||	O
c_tolower	function
(	O
*	O
s1	pointer
)	O
!=	O
*	O
s2	pointer
)	O
break	O
;	O
}	O
return	O
*	O
s1	pointer
!=	O
*	O
s2	pointer
;	O
}	O
static	O
int	O
WGET_GCC_NONNULL	O
(	O
(	O
1	int
)	O
)	O
set_long_option	function
(	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
value	pointer
,	O
char	O
parsing_config	char
)	O
{	O
option_t	pointer
opt	pointer
;	O
char	O
invert	char
=	O
0	int
,	O
value_present	char
=	O
0	int
,	O
case_insensitive	char
=	O
1	int
;	O
char	O
namebuf	O
[	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
]	O
,	O
*	O
p	pointer
;	O
int	O
ret	pointer
=	O
0	int
,	O
rc	int
;	O
if	O
(	O
(	O
p	pointer
=	O
strchr	function
(	O
name	pointer
,	O
'='	O
)	O
)	O
)	O
{	O
memcpy	function
(	O
namebuf	O
,	O
name	pointer
,	O
p	pointer
-	O
name	pointer
)	O
;	O
namebuf	O
[	O
p	pointer
-	O
name	pointer
]	O
=	O
0	int
;	O
name	pointer
=	O
namebuf	O
;	O
value	pointer
=	O
p	pointer
+	O
1	int
;	O
value_present	char
=	O
1	int
;	O
}	O
if	O
(	O
!	O
strncmp	function
(	O
name	pointer
,	O
"--"	pointer
,	O
2	int
)	O
)	O
{	O
case_insensitive	char
=	O
0	int
;	O
name	pointer
+=	O
2	int
;	O
}	O
if	O
(	O
!	O
strncmp	function
(	O
name	pointer
,	O
"no-"	pointer
,	O
3	int
)	O
)	O
{	O
invert	char
=	O
1	int
;	O
name	pointer
+=	O
3	int
;	O
}	O
if	O
(	O
parsing_config	char
&&	O
case_insensitive	char
)	O
{	O
opt	pointer
=	O
bsearch	function
(	O
name	pointer
,	O
options	array
,	O
countof	O
(	O
options	array
)	O
,	O
sizeof	O
(	O
options	array
[	O
0	int
]	O
)	O
,	O
opt_compare_config	function
)	O
;	O
if	O
(	O
!	O
opt	pointer
)	O
{	O
for	O
(	O
unsigned	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
options	array
)	O
&&	O
!	O
opt	pointer
;	O
it	int
++	O
)	O
if	O
(	O
opt_compare_config_linear	function
(	O
name	pointer
,	O
options	array
[	O
it	int
]	O
.	O
long_name	pointer
)	O
==	O
0	int
)	O
opt	pointer
=	O
&	O
options	array
[	O
it	int
]	O
;	O
}	O
}	O
else	O
opt	pointer
=	O
bsearch	function
(	O
name	pointer
,	O
options	array
,	O
countof	O
(	O
options	array
)	O
,	O
sizeof	O
(	O
options	array
[	O
0	int
]	O
)	O
,	O
opt_compare	function
)	O
;	O
if	O
(	O
!	O
opt	pointer
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Unknown option '%s'\n"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
debug_printf	O
(	O
"name=%s value=%s invert=%d\n"	pointer
,	O
opt	pointer
->	O
long_name	pointer
,	O
value	pointer
,	O
invert	char
)	O
;	O
if	O
(	O
value_present	char
)	O
{	O
if	O
(	O
invert	char
)	O
{	O
if	O
(	O
!	O
opt	pointer
->	O
args	array
||	O
opt	pointer
->	O
parser	pointer
==	O
parse_string	function
||	O
opt	pointer
->	O
parser	pointer
==	O
parse_stringset	function
||	O
opt	pointer
->	O
parser	pointer
==	O
parse_stringlist	function
||	O
opt	pointer
->	O
parser	pointer
==	O
parse_filename	function
||	O
opt	pointer
->	O
parser	pointer
==	O
parse_filenames	function
||	O
opt	pointer
->	O
parser	pointer
==	O
parse_stats	function
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Option 'no-%s' doesn't allow an argument\n"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
!	O
opt	pointer
->	O
args	array
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Option '%s' doesn't allow an argument\n"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
opt	pointer
->	O
args	array
)	O
{	O
case	O
0	int
:	O
value	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
1	int
:	O
if	O
(	O
!	O
value	pointer
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Missing argument for option '%s'\n"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
invert	char
&&	O
(	O
opt	pointer
->	O
parser	pointer
==	O
parse_string	function
||	O
opt	pointer
->	O
parser	pointer
==	O
parse_stringset	function
||	O
opt	pointer
->	O
parser	pointer
==	O
parse_stringlist	function
||	O
opt	pointer
->	O
parser	pointer
==	O
parse_filename	function
||	O
opt	pointer
->	O
parser	pointer
==	O
parse_filenames	function
||	O
opt	pointer
->	O
parser	pointer
==	O
parse_stats	function
)	O
)	O
{	O
value	pointer
=	O
NULL	O
;	O
}	O
else	O
ret	pointer
=	O
opt	pointer
->	O
args	array
;	O
break	O
;	O
case	O
-	O
1	int
:	O
if	O
(	O
!	O
parsing_config	char
)	O
value	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
value	pointer
)	O
ret	pointer
=	O
1	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
(	O
rc	int
=	O
opt	pointer
->	O
parser	pointer
(	O
opt	pointer
,	O
value	pointer
,	O
invert	char
)	O
)	O
<	O
0	int
)	O
return	O
rc	int
;	O
return	O
ret	pointer
;	O
}	O
static	O
int	O
parse_proxy	function
(	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
const	O
char	O
invert	char
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
parse_bool	function
(	O
opt	pointer
,	O
val	array
,	O
invert	char
)	O
)	O
<	O
0	int
)	O
{	O
if	O
(	O
invert	char
)	O
{	O
xfree	O
(	O
config	struct
.	O
no_proxy	pointer
)	O
;	O
config	struct
.	O
no_proxy	pointer
=	O
val	array
?	O
wget_strdup	function
(	O
val	array
)	O
:	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
opt	pointer
=	O
bsearch	function
(	O
"http-proxy"	pointer
,	O
options	array
,	O
countof	O
(	O
options	array
)	O
,	O
sizeof	O
(	O
options	array
[	O
0	int
]	O
)	O
,	O
opt_compare	function
)	O
)	O
)	O
parse_string	function
(	O
opt	pointer
,	O
val	array
,	O
invert	char
)	O
;	O
if	O
(	O
(	O
opt	pointer
=	O
bsearch	function
(	O
"https-proxy"	pointer
,	O
options	array
,	O
countof	O
(	O
options	array
)	O
,	O
sizeof	O
(	O
options	array
[	O
0	int
]	O
)	O
,	O
opt_compare	function
)	O
)	O
)	O
parse_string	function
(	O
opt	pointer
,	O
val	array
,	O
invert	char
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_execute	function
(	O
WGET_GCC_UNUSED	O
option_t	pointer
opt	pointer
,	O
const	O
char	O
*	O
val	array
,	O
WGET_GCC_UNUSED	O
const	O
char	O
invert	char
)	O
{	O
return	O
set_long_option	function
(	O
val	array
,	O
NULL	O
,	O
1	int
)	O
;	O
}	O
static	O
int	O
_parse_option	function
(	O
char	O
*	O
linep	pointer
,	O
char	O
*	O
*	O
name	pointer
,	O
char	O
*	O
*	O
val	array
)	O
{	O
int	O
quote	int
;	O
while	O
(	O
c_isspace	function
(	O
*	O
linep	pointer
)	O
)	O
linep	pointer
++	O
;	O
for	O
(	O
*	O
name	pointer
=	O
linep	pointer
;	O
c_isalnum	function
(	O
*	O
linep	pointer
)	O
||	O
*	O
linep	pointer
==	O
'-'	O
||	O
*	O
linep	pointer
==	O
'_'	O
;	O
linep	pointer
++	O
)	O
;	O
if	O
(	O
!	O
*	O
*	O
name	pointer
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to parse: '%s'\n"	pointer
)	O
,	O
linep	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
c_isspace	function
(	O
*	O
linep	pointer
)	O
)	O
{	O
*	O
linep	pointer
++	O
=	O
0	int
;	O
while	O
(	O
c_isspace	function
(	O
*	O
linep	pointer
)	O
)	O
linep	pointer
++	O
;	O
}	O
if	O
(	O
*	O
linep	pointer
==	O
'='	O
)	O
{	O
*	O
linep	pointer
++	O
=	O
0	int
;	O
while	O
(	O
c_isspace	function
(	O
*	O
linep	pointer
)	O
)	O
linep	pointer
++	O
;	O
*	O
val	array
=	O
linep	pointer
;	O
if	O
(	O
(	O
(	O
quote	int
=	O
*	O
linep	pointer
)	O
==	O
'\"'	O
||	O
quote	int
==	O
'\''	O
)	O
)	O
{	O
char	O
*	O
src	pointer
=	O
linep	pointer
+	O
1	int
,	O
*	O
dst	pointer
=	O
linep	pointer
,	O
c	int
;	O
while	O
(	O
(	O
c	int
=	O
*	O
src	pointer
)	O
!=	O
quote	int
&&	O
c	int
)	O
{	O
if	O
(	O
c	int
==	O
'\\'	O
&&	O
src	pointer
[	O
1	int
]	O
)	O
{	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
1	int
]	O
;	O
src	pointer
+=	O
2	int
;	O
}	O
else	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
++	O
;	O
}	O
*	O
dst	pointer
=	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
*	O
linep	pointer
)	O
*	O
linep	pointer
++	O
=	O
0	int
;	O
while	O
(	O
c_isspace	function
(	O
*	O
linep	pointer
)	O
)	O
linep	pointer
++	O
;	O
*	O
val	array
=	O
linep	pointer
;	O
return	O
2	int
;	O
}	O
}	O
static	O
int	O
WGET_GCC_NONNULL	O
(	O
(	O
1	int
)	O
)	O
_read_config	function
(	O
const	O
char	O
*	O
cfgfile	pointer
,	O
int	O
expand	int
)	O
{	O
static	O
int	O
level	int
;	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
,	O
*	O
linep	pointer
,	O
*	O
name	pointer
,	O
*	O
val	array
;	O
int	O
append	int
=	O
0	int
,	O
found	int
,	O
ret	pointer
=	O
0	int
,	O
rc	int
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
ssize_t	long
len	long
;	O
wget_buffer	struct
linebuf	struct
;	O
if	O
(	O
++	O
level	int
>	O
20	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Config file recursion detected in %s\n"	pointer
)	O
,	O
cfgfile	pointer
)	O
;	O
level	int
--	O
;	O
return	O
-	O
2	int
;	O
}	O
if	O
(	O
expand	int
)	O
{	O
glob_t	struct
globbuf	struct
=	O
{	O
.	O
gl_pathc	long
=	O
0	int
}	O
;	O
if	O
(	O
glob	function
(	O
cfgfile	pointer
,	O
GLOB_MARK	O
|	O
GLOB_TILDE	O
,	O
NULL	O
,	O
&	O
globbuf	struct
)	O
==	O
0	int
)	O
{	O
size_t	long
it	int
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
globbuf	struct
.	O
gl_pathc	long
&&	O
ret	pointer
==	O
0	int
;	O
it	int
++	O
)	O
{	O
if	O
(	O
globbuf	struct
.	O
gl_pathv	pointer
[	O
it	int
]	O
[	O
strlen	function
(	O
globbuf	struct
.	O
gl_pathv	pointer
[	O
it	int
]	O
)	O
-	O
1	int
]	O
!=	O
'/'	O
)	O
{	O
ret	pointer
=	O
_read_config	function
(	O
globbuf	struct
.	O
gl_pathv	pointer
[	O
it	int
]	O
,	O
0	int
)	O
;	O
}	O
}	O
globfree	function
(	O
&	O
globbuf	struct
)	O
;	O
}	O
else	O
{	O
ret	pointer
=	O
_read_config	function
(	O
cfgfile	pointer
,	O
0	int
)	O
;	O
}	O
level	int
--	O
;	O
return	O
ret	pointer
;	O
}	O
if	O
(	O
(	O
fp	pointer
=	O
fopen	function
(	O
cfgfile	pointer
,	O
"r"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to open %s (%d): %s\n"	pointer
)	O
,	O
cfgfile	pointer
,	O
errno	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
level	int
--	O
;	O
return	O
-	O
1	int
;	O
}	O
debug_printf	O
(	O
"Reading %s\n"	pointer
,	O
cfgfile	pointer
)	O
;	O
char	O
tmp	array
[	O
1024	int
]	O
;	O
wget_buffer_init	function
(	O
&	O
linebuf	struct
,	O
tmp	array
,	O
sizeof	O
(	O
tmp	array
)	O
)	O
;	O
while	O
(	O
ret	pointer
==	O
0	int
&&	O
(	O
len	long
=	O
wget_getline	function
(	O
&	O
buf	pointer
,	O
&	O
bufsize	long
,	O
fp	pointer
)	O
)	O
>=	O
0	int
)	O
{	O
if	O
(	O
len	long
==	O
0	int
||	O
*	O
buf	pointer
==	O
'\r'	O
||	O
*	O
buf	pointer
==	O
'\n'	O
)	O
continue	O
;	O
linep	pointer
=	O
buf	pointer
;	O
if	O
(	O
!	O
append	int
)	O
while	O
(	O
c_isspace	function
(	O
*	O
linep	pointer
)	O
)	O
{	O
linep	pointer
++	O
;	O
len	long
--	O
;	O
}	O
if	O
(	O
*	O
linep	pointer
==	O
'#'	O
)	O
continue	O
;	O
while	O
(	O
len	long
>	O
0	int
&&	O
c_isspace	function
(	O
linep	pointer
[	O
len	long
-	O
1	int
]	O
)	O
)	O
len	long
--	O
;	O
linep	pointer
[	O
len	long
]	O
=	O
0	int
;	O
if	O
(	O
len	long
>	O
0	int
&&	O
linep	pointer
[	O
len	long
-	O
1	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
append	int
)	O
{	O
wget_buffer_memcat	function
(	O
&	O
linebuf	struct
,	O
linep	pointer
,	O
len	long
-	O
1	int
)	O
;	O
}	O
else	O
{	O
wget_buffer_memcpy	function
(	O
&	O
linebuf	struct
,	O
linep	pointer
,	O
len	long
-	O
1	int
)	O
;	O
append	int
=	O
1	int
;	O
}	O
continue	O
;	O
}	O
else	O
if	O
(	O
append	int
)	O
{	O
wget_buffer_strcat	function
(	O
&	O
linebuf	struct
,	O
linep	pointer
)	O
;	O
append	int
=	O
0	int
;	O
linep	pointer
=	O
linebuf	struct
.	O
data	pointer
;	O
}	O
found	int
=	O
_parse_option	function
(	O
linep	pointer
,	O
&	O
name	pointer
,	O
&	O
val	array
)	O
;	O
if	O
(	O
found	int
==	O
1	int
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
set_long_option	function
(	O
name	pointer
,	O
val	array
,	O
1	int
)	O
)	O
<	O
0	int
)	O
ret	pointer
=	O
rc	int
;	O
}	O
else	O
if	O
(	O
found	int
==	O
2	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
name	pointer
,	O
"include"	pointer
)	O
)	O
{	O
ret	pointer
=	O
_read_config	function
(	O
val	array
,	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
rc	int
=	O
set_long_option	function
(	O
name	pointer
,	O
NULL	O
,	O
0	int
)	O
)	O
<	O
0	int
)	O
ret	pointer
=	O
rc	int
;	O
}	O
}	O
}	O
wget_buffer_deinit	function
(	O
&	O
linebuf	struct
)	O
;	O
xfree	O
(	O
buf	pointer
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
append	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to parse last line in '%s'\n"	pointer
)	O
,	O
cfgfile	pointer
)	O
;	O
ret	pointer
=	O
-	O
4	int
;	O
}	O
level	int
--	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
bool	bool
read_config	function
(	O
void	O
)	O
{	O
bool	bool
ret	pointer
=	O
true	int
;	O
if	O
(	O
config	struct
.	O
system_config	pointer
)	O
ret	pointer
=	O
_read_config	function
(	O
config	struct
.	O
system_config	pointer
,	O
1	int
)	O
;	O
if	O
(	O
config	struct
.	O
user_config	pointer
)	O
ret	pointer
&=	O
_read_config	function
(	O
config	struct
.	O
user_config	pointer
,	O
1	int
)	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
int	O
WGET_GCC_NONNULL	O
(	O
(	O
2	int
)	O
)	O
parse_command_line	function
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
static	O
short	O
shortcut_to_option	array
[	O
128	int
]	O
;	O
const	O
char	O
*	O
first_arg	pointer
=	O
NULL	O
;	O
int	O
n	long
,	O
rc	int
;	O
if	O
(	O
!	O
shortcut_to_option	array
[	O
0	int
]	O
)	O
{	O
for	O
(	O
short	O
it	int
=	O
0	int
;	O
it	int
<	O
(	O
short	O
)	O
countof	O
(	O
options	array
)	O
;	O
it	int
++	O
)	O
{	O
if	O
(	O
options	array
[	O
it	int
]	O
.	O
short_name	char
>	O
0	int
)	O
shortcut_to_option	array
[	O
(	O
unsigned	O
char	O
)	O
options	array
[	O
it	int
]	O
.	O
short_name	char
]	O
=	O
it	int
+	O
1	int
;	O
}	O
}	O
for	O
(	O
n	long
=	O
1	int
;	O
n	long
<	O
argc	int
&&	O
first_arg	pointer
!=	O
argv	pointer
[	O
n	long
]	O
;	O
n	long
++	O
)	O
{	O
const	O
char	O
*	O
argp	pointer
=	O
argv	pointer
[	O
n	long
]	O
;	O
if	O
(	O
argp	pointer
[	O
0	int
]	O
!=	O
'-'	O
)	O
{	O
const	O
char	O
*	O
cur	pointer
=	O
argv	pointer
[	O
n	long
]	O
;	O
for	O
(	O
int	O
it	int
=	O
n	long
;	O
it	int
<	O
argc	int
-	O
1	int
;	O
it	int
++	O
)	O
argv	pointer
[	O
it	int
]	O
=	O
argv	pointer
[	O
it	int
+	O
1	int
]	O
;	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
=	O
cur	pointer
;	O
if	O
(	O
!	O
first_arg	pointer
)	O
first_arg	pointer
=	O
cur	pointer
;	O
n	long
--	O
;	O
continue	O
;	O
}	O
if	O
(	O
argp	pointer
[	O
1	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
argp	pointer
[	O
2	int
]	O
==	O
0	int
)	O
return	O
n	long
+	O
1	int
;	O
if	O
(	O
(	O
rc	int
=	O
set_long_option	function
(	O
argp	pointer
+	O
2	int
,	O
n	long
<	O
argc	int
-	O
1	int
?	O
argv	pointer
[	O
n	long
+	O
1	int
]	O
:	O
NULL	O
,	O
0	int
)	O
)	O
<	O
0	int
)	O
return	O
rc	int
;	O
n	long
+=	O
rc	int
;	O
}	O
else	O
if	O
(	O
argp	pointer
[	O
1	int
]	O
)	O
{	O
for	O
(	O
int	O
pos	int
=	O
1	int
;	O
argp	pointer
[	O
pos	int
]	O
;	O
pos	int
++	O
)	O
{	O
option_t	pointer
opt	pointer
;	O
int	O
idx	int
;	O
if	O
(	O
c_isalnum	function
(	O
argp	pointer
[	O
pos	int
]	O
)	O
&&	O
(	O
idx	int
=	O
shortcut_to_option	array
[	O
(	O
unsigned	O
char	O
)	O
argp	pointer
[	O
pos	int
]	O
]	O
)	O
)	O
{	O
opt	pointer
=	O
&	O
options	array
[	O
idx	int
-	O
1	int
]	O
;	O
if	O
(	O
opt	pointer
->	O
args	array
>	O
0	int
)	O
{	O
const	O
char	O
*	O
val	array
;	O
if	O
(	O
!	O
argp	pointer
[	O
pos	int
+	O
1	int
]	O
&&	O
argc	int
<=	O
n	long
+	O
opt	pointer
->	O
args	array
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Missing argument(s) for option '-%c'\n"	pointer
)	O
,	O
argp	pointer
[	O
pos	int
]	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
val	array
=	O
argp	pointer
[	O
pos	int
+	O
1	int
]	O
?	O
argp	pointer
+	O
pos	int
+	O
1	int
:	O
argv	pointer
[	O
++	O
n	long
]	O
;	O
if	O
(	O
(	O
rc	int
=	O
opt	pointer
->	O
parser	pointer
(	O
opt	pointer
,	O
val	array
,	O
0	int
)	O
)	O
<	O
0	int
)	O
return	O
rc	int
;	O
n	long
+=	O
rc	int
;	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
rc	int
=	O
opt	pointer
->	O
parser	pointer
(	O
opt	pointer
,	O
NULL	O
,	O
0	int
)	O
)	O
<	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Unknown option '-%c'\n"	pointer
)	O
,	O
argp	pointer
[	O
pos	int
]	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
}	O
return	O
n	long
;	O
}	O
static	O
const	O
char	O
*	O
get_home_dir	function
(	O
bool	bool
free_home	bool
)	O
{	O
static	O
const	O
char	O
*	O
home	pointer
;	O
if	O
(	O
free_home	bool
)	O
{	O
xfree	O
(	O
home	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
home	pointer
)	O
{	O
if	O
(	O
(	O
home	pointer
=	O
wget_strnglob	function
(	O
"~"	pointer
,	O
1	int
,	O
GLOB_TILDE_CHECK	O
)	O
)	O
==	O
NULL	O
)	O
home	pointer
=	O
wget_strdup	function
(	O
"."	pointer
)	O
;	O
}	O
return	O
home	pointer
;	O
}	O
static	O
char	O
*	O
prompt_for_password	function
(	O
void	O
)	O
{	O
if	O
(	O
config	struct
.	O
username	pointer
)	O
wget_fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Password for user \"%s\": "	pointer
)	O
,	O
config	struct
.	O
username	pointer
)	O
;	O
else	O
wget_fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Password: "	pointer
)	O
)	O
;	O
if	O
(	O
!	O
is_testing	function
(	O
)	O
)	O
return	O
getpass	function
(	O
""	pointer
)	O
;	O
else	O
return	O
wget_strdup	function
(	O
"xxx"	pointer
)	O
;	O
}	O
static	O
int	O
run_use_askpass	function
(	O
const	O
char	O
*	O
question	pointer
,	O
char	O
*	O
*	O
answer	pointer
)	O
{	O
char	O
tmp	array
[	O
1024	int
]	O
;	O
pid_t	int
pid	int
;	O
int	O
rc	int
,	O
ret	pointer
=	O
-	O
1	int
;	O
int	O
com	array
[	O
2	int
]	O
;	O
bool	bool
fa_valid	bool
=	O
false	int
;	O
ssize_t	long
bytes	long
=	O
0	int
;	O
char	O
const	O
*	O
const	O
argv	pointer
[	O
]	O
=	O
{	O
config	struct
.	O
use_askpass_bin	pointer
,	O
question	pointer
,	O
NULL	O
}	O
;	O
posix_spawn_file_actions_t	struct
fa	struct
;	O
if	O
(	O
pipe	function
(	O
com	array
)	O
==	O
-	O
1	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Cannot create pipe"	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
posix_spawn_file_actions_init	function
(	O
&	O
fa	struct
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Error initializing spawn file actions for use-askpass: %d"	pointer
)	O
,	O
rc	int
)	O
;	O
goto	O
cleanup	O
;	O
}	O
fa_valid	bool
=	O
1	int
;	O
rc	int
=	O
posix_spawn_file_actions_addclose	function
(	O
&	O
fa	struct
,	O
com	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
rc	int
)	O
rc	int
=	O
posix_spawn_file_actions_adddup2	function
(	O
&	O
fa	struct
,	O
com	array
[	O
1	int
]	O
,	O
STDOUT_FILENO	int
)	O
;	O
if	O
(	O
!	O
rc	int
)	O
rc	int
=	O
posix_spawn_file_actions_addclose	function
(	O
&	O
fa	struct
,	O
com	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Error setting spawn file actions for use-askpass: %d"	pointer
)	O
,	O
rc	int
)	O
;	O
goto	O
cleanup	O
;	O
}	O
if	O
(	O
!	O
is_testing	function
(	O
)	O
)	O
{	O
rc	int
=	O
posix_spawnp	function
(	O
&	O
pid	int
,	O
config	struct
.	O
use_askpass_bin	pointer
,	O
&	O
fa	struct
,	O
NULL	O
,	O
(	O
char	O
*	O
const	O
*	O
)	O
argv	pointer
,	O
environ	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Error spawning %s: %d"	pointer
)	O
,	O
config	struct
.	O
use_askpass_bin	pointer
,	O
rc	int
)	O
;	O
goto	O
cleanup	O
;	O
}	O
}	O
close	function
(	O
com	array
[	O
1	int
]	O
)	O
;	O
com	array
[	O
1	int
]	O
=	O
-	O
1	int
;	O
if	O
(	O
!	O
is_testing	function
(	O
)	O
)	O
{	O
bytes	long
=	O
read	function
(	O
com	array
[	O
0	int
]	O
,	O
tmp	array
,	O
sizeof	O
(	O
tmp	array
)	O
-	O
1	int
)	O
;	O
}	O
else	O
{	O
bytes	long
=	O
rand	function
(	O
)	O
%	O
(	O
sizeof	O
(	O
tmp	array
)	O
-	O
1	int
)	O
;	O
memset	function
(	O
tmp	array
,	O
'x'	O
,	O
bytes	long
)	O
;	O
}	O
if	O
(	O
bytes	long
<=	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Error reading response from command \"%s %s\": %s\n"	pointer
)	O
,	O
config	struct
.	O
use_askpass_bin	pointer
,	O
question	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
goto	O
cleanup	O
;	O
}	O
tmp	array
[	O
bytes	long
--	O
]	O
=	O
'\0'	O
;	O
while	O
(	O
bytes	long
>=	O
0	int
&&	O
(	O
tmp	array
[	O
bytes	long
]	O
==	O
'\n'	O
||	O
tmp	array
[	O
bytes	long
]	O
==	O
'\r'	O
)	O
)	O
tmp	array
[	O
bytes	long
--	O
]	O
=	O
'\0'	O
;	O
*	O
answer	pointer
=	O
wget_strdup	function
(	O
tmp	array
)	O
;	O
ret	pointer
=	O
0	int
;	O
cleanup	O
:	O
if	O
(	O
com	array
[	O
1	int
]	O
!=	O
-	O
1	int
)	O
close	function
(	O
com	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
com	array
[	O
0	int
]	O
!=	O
-	O
1	int
)	O
close	function
(	O
com	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
fa_valid	bool
)	O
posix_spawn_file_actions_destroy	function
(	O
&	O
fa	struct
)	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
int	O
use_askpass	function
(	O
void	O
)	O
{	O
char	O
question	pointer
[	O
1024	int
]	O
;	O
xfree	O
(	O
config	struct
.	O
username	pointer
)	O
;	O
if	O
(	O
run_use_askpass	function
(	O
"Type username:"	pointer
,	O
&	O
config	struct
.	O
username	pointer
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
wget_snprintf	function
(	O
question	pointer
,	O
sizeof	O
(	O
question	pointer
)	O
,	O
"Type password for '%s':"	pointer
,	O
config	struct
.	O
username	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
password	pointer
)	O
;	O
if	O
(	O
run_use_askpass	function
(	O
question	pointer
,	O
&	O
config	struct
.	O
password	pointer
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
wget_dns_cache	struct
*	O
dns_cache	pointer
;	O
static	O
wget_dns	struct
*	O
dns	pointer
;	O
static	O
int	O
_preload_dns_cache	function
(	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
char	O
buf	pointer
[	O
256	int
]	O
,	O
ip	pointer
[	O
64	int
]	O
,	O
name	pointer
[	O
256	int
]	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
fname	pointer
,	O
"-"	pointer
)	O
&&	O
!	O
config	struct
.	O
dont_write	char
)	O
fp	pointer
=	O
stdin	pointer
;	O
else	O
if	O
(	O
!	O
(	O
fp	pointer
=	O
fopen	function
(	O
fname	pointer
,	O
"r"	pointer
)	O
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to open %s"	pointer
)	O
,	O
fname	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
while	O
(	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
fp	pointer
)	O
)	O
{	O
if	O
(	O
sscanf	function
(	O
buf	pointer
,	O
"%63[0-9.:] %255[a-zA-Z0-9.-]"	pointer
,	O
ip	pointer
,	O
name	pointer
)	O
!=	O
2	int
)	O
continue	O
;	O
wget_strtolower	function
(	O
name	pointer
)	O
;	O
debug_printf	O
(	O
"Adding DNS Mapping: %s -> %s\n"	pointer
,	O
name	pointer
,	O
ip	pointer
)	O
;	O
wget_dns_cache_ip	function
(	O
dns	pointer
,	O
ip	pointer
,	O
name	pointer
,	O
80	int
)	O
;	O
wget_dns_cache_ip	function
(	O
dns	pointer
,	O
ip	pointer
,	O
name	pointer
,	O
443	int
)	O
;	O
}	O
if	O
(	O
fp	pointer
!=	O
stdin	pointer
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
WGET_GCC_NONNULL_ALL	O
get_config_files	function
(	O
const	O
char	O
*	O
config_home	pointer
,	O
const	O
char	O
*	O
user_home	pointer
)	O
{	O
const	O
char	O
*	O
env	pointer
;	O
if	O
(	O
(	O
env	pointer
=	O
getenv	function
(	O
"SYSTEM_WGET2RC"	pointer
)	O
)	O
&&	O
*	O
env	pointer
)	O
{	O
config	struct
.	O
system_config	pointer
=	O
wget_strdup	function
(	O
env	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
config	struct
.	O
system_config	pointer
&&	O
access	function
(	O
config	struct
.	O
system_config	pointer
,	O
R_OK	int
)	O
!=	O
0	int
)	O
config	struct
.	O
system_config	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
(	O
env	pointer
=	O
getenv	function
(	O
"WGET2RC"	pointer
)	O
)	O
&&	O
*	O
env	pointer
)	O
{	O
config	struct
.	O
user_config	pointer
=	O
wget_strdup	function
(	O
env	pointer
)	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
path	pointer
=	O
wget_aprintf	function
(	O
"%s/wget2rc"	pointer
,	O
config_home	pointer
)	O
;	O
if	O
(	O
access	function
(	O
path	pointer
,	O
R_OK	int
)	O
==	O
0	int
)	O
config	struct
.	O
user_config	pointer
=	O
path	pointer
;	O
else	O
xfree	O
(	O
path	pointer
)	O
;	O
}	O
if	O
(	O
!	O
config	struct
.	O
user_config	pointer
)	O
{	O
const	O
char	O
*	O
path	pointer
=	O
wget_aprintf	function
(	O
"%s/.wget2rc"	pointer
,	O
user_home	pointer
)	O
;	O
if	O
(	O
access	function
(	O
path	pointer
,	O
R_OK	int
)	O
==	O
0	int
)	O
{	O
config	struct
.	O
user_config	pointer
=	O
path	pointer
;	O
error_printf	O
(	O
_	O
(	O
"~/.wget2rc is deprecated. Please move it to %s/wget2rc\n"	pointer
)	O
,	O
config_home	pointer
)	O
;	O
}	O
else	O
{	O
xfree	O
(	O
path	pointer
)	O
;	O
}	O
}	O
}	O
static	O
const	O
char	O
*	O
get_xdg_data_home	function
(	O
const	O
char	O
*	O
user_home	pointer
)	O
{	O
static	O
const	O
char	O
*	O
data_home	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
env	pointer
;	O
if	O
(	O
!	O
user_home	pointer
)	O
{	O
xfree	O
(	O
data_home	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
data_home	pointer
)	O
return	O
data_home	pointer
;	O
if	O
(	O
(	O
env	pointer
=	O
getenv	function
(	O
"XDG_DATA_HOME"	pointer
)	O
)	O
&&	O
*	O
env	pointer
)	O
data_home	pointer
=	O
wget_aprintf	function
(	O
"%s/wget"	pointer
,	O
env	pointer
)	O
;	O
else	O
{	O
data_home	pointer
=	O
wget_aprintf	function
(	O
"%s/.local/share/wget"	pointer
,	O
user_home	pointer
)	O
;	O
}	O
mkdir_path	function
(	O
data_home	pointer
,	O
false	int
)	O
;	O
return	O
data_home	pointer
;	O
}	O
static	O
const	O
char	O
*	O
get_xdg_config_home	function
(	O
const	O
char	O
*	O
user_home	pointer
)	O
{	O
static	O
const	O
char	O
*	O
home_dir	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
env	pointer
;	O
if	O
(	O
!	O
user_home	pointer
)	O
{	O
xfree	O
(	O
home_dir	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
home_dir	pointer
)	O
return	O
home_dir	pointer
;	O
if	O
(	O
(	O
env	pointer
=	O
getenv	function
(	O
"XDG_CONFIG_HOME"	pointer
)	O
)	O
&&	O
*	O
env	pointer
)	O
home_dir	pointer
=	O
wget_aprintf	function
(	O
"%s/wget"	pointer
,	O
env	pointer
)	O
;	O
else	O
home_dir	pointer
=	O
wget_aprintf	function
(	O
"%s/.config/wget"	pointer
,	O
user_home	pointer
)	O
;	O
return	O
home_dir	pointer
;	O
}	O
static	O
void	O
stats_callback_dns	function
(	O
wget_dns	struct
*	O
_dns	pointer
,	O
wget_dns_stats_data	struct
*	O
stats	pointer
,	O
void	O
*	O
ctx	pointer
)	O
{	O
(	O
void	O
)	O
_dns	pointer
;	O
FILE	struct
*	O
fp	pointer
=	O
(	O
FILE	struct
*	O
)	O
ctx	pointer
;	O
if	O
(	O
config	struct
.	O
stats_dns_args	pointer
->	O
format	enum
==	O
WGET_STATS_FORMAT_HUMAN	int
)	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"  %4lld %s:%hu (%s)\n"	pointer
,	O
stats	pointer
->	O
dns_secs	long long
,	O
stats	pointer
->	O
hostname	pointer
?	O
stats	pointer
->	O
hostname	pointer
:	O
"-"	pointer
,	O
stats	pointer
->	O
port	short
,	O
stats	pointer
->	O
ip	pointer
?	O
stats	pointer
->	O
ip	pointer
:	O
"-"	pointer
)	O
;	O
}	O
else	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"%s,%s,%hu,%lld\n"	pointer
,	O
stats	pointer
->	O
hostname	pointer
,	O
stats	pointer
->	O
ip	pointer
,	O
stats	pointer
->	O
port	short
,	O
stats	pointer
->	O
dns_secs	long long
)	O
;	O
}	O
}	O
static	O
void	O
stats_callback_ocsp	function
(	O
wget_ocsp_stats_data	struct
*	O
stats	pointer
,	O
void	O
*	O
ctx	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
=	O
(	O
FILE	struct
*	O
)	O
ctx	pointer
;	O
if	O
(	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
format	enum
==	O
WGET_STATS_FORMAT_HUMAN	int
)	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"  %s:\n"	pointer
,	O
stats	pointer
->	O
hostname	pointer
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    Stapling       : %d\n"	pointer
,	O
stats	pointer
->	O
stapling	int
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    Valid          : %d\n"	pointer
,	O
stats	pointer
->	O
nvalid	int
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    Revoked        : %d\n"	pointer
,	O
stats	pointer
->	O
nrevoked	int
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    Ignored        : %d\n\n"	pointer
,	O
stats	pointer
->	O
nignored	int
)	O
;	O
}	O
else	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"%s,%d,%d,%d,%d\n"	pointer
,	O
stats	pointer
->	O
hostname	pointer
,	O
stats	pointer
->	O
stapling	int
,	O
stats	pointer
->	O
nvalid	int
,	O
stats	pointer
->	O
nrevoked	int
,	O
stats	pointer
->	O
nignored	int
)	O
;	O
}	O
}	O
static	O
const	O
char	O
*	O
_tlsversion_string	function
(	O
int	O
v	pointer
)	O
{	O
switch	O
(	O
v	pointer
)	O
{	O
case	O
1	int
:	O
return	O
"SSL3"	pointer
;	O
case	O
2	int
:	O
return	O
"TLS1.0"	pointer
;	O
case	O
3	int
:	O
return	O
"TLS1.1"	pointer
;	O
case	O
4	int
:	O
return	O
"TLS1.2"	pointer
;	O
case	O
5	int
:	O
return	O
"TLS1.3"	pointer
;	O
default	O
:	O
return	O
"?"	pointer
;	O
}	O
}	O
static	O
void	O
stats_callback_tls	function
(	O
wget_tls_stats_data	struct
*	O
stats	pointer
,	O
void	O
*	O
ctx	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
=	O
(	O
FILE	struct
*	O
)	O
ctx	pointer
;	O
if	O
(	O
config	struct
.	O
stats_tls_args	pointer
->	O
format	enum
==	O
WGET_STATS_FORMAT_HUMAN	int
)	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"  %s:\n"	pointer
,	O
stats	pointer
->	O
hostname	pointer
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    Version         : %s\n"	pointer
,	O
_tlsversion_string	function
(	O
stats	pointer
->	O
version	int
)	O
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    False Start     : %s\n"	pointer
,	O
ON_OFF_DASH	O
(	O
stats	pointer
->	O
false_start	int
)	O
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    TFO             : %s\n"	pointer
,	O
ON_OFF_DASH	O
(	O
stats	pointer
->	O
tfo	char
)	O
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    ALPN Protocol   : %s\n"	pointer
,	O
stats	pointer
->	O
alpn_protocol	pointer
?	O
stats	pointer
->	O
alpn_protocol	pointer
:	O
"-"	pointer
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    Resumed         : %s\n"	pointer
,	O
YES_NO	O
(	O
stats	pointer
->	O
resumed	bool
)	O
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    TCP Protocol    : %s\n"	pointer
,	O
HTTP_1_2	O
(	O
stats	pointer
->	O
http_protocol	char
)	O
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    Cert Chain Size : %d\n"	pointer
,	O
stats	pointer
->	O
cert_chain_size	int
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    TLS negotiation\n"	pointer
)	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"    duration (ms)   : %lld\n\n"	pointer
,	O
stats	pointer
->	O
tls_secs	long long
)	O
;	O
}	O
else	O
{	O
wget_fprintf	function
(	O
fp	pointer
,	O
"%s,%d,%d,%d,%d,%s,%d,%d,%lld\n"	pointer
,	O
stats	pointer
->	O
hostname	pointer
,	O
stats	pointer
->	O
version	int
,	O
stats	pointer
->	O
false_start	int
,	O
stats	pointer
->	O
tfo	char
,	O
stats	pointer
->	O
resumed	bool
,	O
stats	pointer
->	O
alpn_protocol	pointer
?	O
stats	pointer
->	O
alpn_protocol	pointer
:	O
""	pointer
,	O
stats	pointer
->	O
http_protocol	char
,	O
stats	pointer
->	O
cert_chain_size	int
,	O
stats	pointer
->	O
tls_secs	long long
)	O
;	O
}	O
}	O
int	O
init	pointer
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
n	long
,	O
rc	int
;	O
set_allocation_functions	function
(	O
)	O
;	O
if	O
(	O
argc	int
>=	O
2	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"-d"	pointer
)	O
)	O
config	struct
.	O
debug	int
=	O
1	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"--debug"	pointer
)	O
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
set_long_option	function
(	O
argv	pointer
[	O
1	int
]	O
+	O
2	int
,	O
argv	pointer
[	O
2	int
]	O
,	O
0	int
)	O
)	O
<	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
const	O
char	O
*	O
home_dir	pointer
=	O
get_home_dir	function
(	O
false	int
)	O
;	O
const	O
char	O
*	O
xdg_config_home	pointer
=	O
get_xdg_config_home	function
(	O
home_dir	pointer
)	O
;	O
const	O
char	O
*	O
xdg_data_home	pointer
=	O
get_xdg_data_home	function
(	O
home_dir	pointer
)	O
;	O
config	struct
.	O
user_agent	pointer
=	O
wget_strdup	function
(	O
config	struct
.	O
user_agent	pointer
)	O
;	O
config	struct
.	O
secure_protocol	pointer
=	O
wget_strdup	function
(	O
config	struct
.	O
secure_protocol	pointer
)	O
;	O
config	struct
.	O
ca_directory	pointer
=	O
wget_strdup	function
(	O
config	struct
.	O
ca_directory	pointer
)	O
;	O
config	struct
.	O
default_page	pointer
=	O
wget_strdup	function
(	O
config	struct
.	O
default_page	pointer
)	O
;	O
log_init	function
(	O
)	O
;	O
get_config_files	function
(	O
xdg_config_home	pointer
,	O
home_dir	pointer
)	O
;	O
if	O
(	O
parse_command_line	function
(	O
argc	int
,	O
argv	pointer
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
config	struct
.	O
logfile_append	pointer
)	O
{	O
xfree	O
(	O
config	struct
.	O
logfile	pointer
)	O
;	O
config	struct
.	O
logfile	pointer
=	O
config	struct
.	O
logfile_append	pointer
;	O
config	struct
.	O
logfile_append	pointer
=	O
NULL	O
;	O
}	O
else	O
if	O
(	O
config	struct
.	O
logfile	pointer
&&	O
strcmp	function
(	O
config	struct
.	O
logfile	pointer
,	O
"-"	pointer
)	O
&&	O
!	O
config	struct
.	O
dont_write	char
)	O
{	O
int	O
fd	array
=	O
open	function
(	O
config	struct
.	O
logfile	pointer
,	O
O_WRONLY	int
|	O
O_TRUNC	int
)	O
;	O
if	O
(	O
fd	array
!=	O
-	O
1	int
)	O
close	function
(	O
fd	array
)	O
;	O
}	O
log_init	function
(	O
)	O
;	O
if	O
(	O
config	struct
.	O
hsts	bool
&&	O
!	O
config	struct
.	O
hsts_file	pointer
)	O
config	struct
.	O
hsts_file	pointer
=	O
wget_aprintf	function
(	O
"%s/.wget-hsts"	pointer
,	O
xdg_data_home	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
hpkp	pointer
&&	O
!	O
config	struct
.	O
hpkp_file	pointer
)	O
config	struct
.	O
hpkp_file	pointer
=	O
wget_aprintf	function
(	O
"%s/.wget-hpkp"	pointer
,	O
xdg_data_home	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
tls_resume	char
&&	O
!	O
config	struct
.	O
tls_session_file	pointer
)	O
config	struct
.	O
tls_session_file	pointer
=	O
wget_aprintf	function
(	O
"%s/.wget-session"	pointer
,	O
xdg_data_home	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
ocsp	char
&&	O
!	O
config	struct
.	O
ocsp_file	pointer
)	O
config	struct
.	O
ocsp_file	pointer
=	O
wget_aprintf	function
(	O
"%s/.wget-ocsp"	pointer
,	O
xdg_data_home	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
netrc	pointer
&&	O
!	O
config	struct
.	O
netrc_file	pointer
)	O
config	struct
.	O
netrc_file	pointer
=	O
wget_aprintf	function
(	O
"%s/.netrc"	pointer
,	O
home_dir	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
exclude_directories	pointer
)	O
;	O
{	O
const	O
char	O
*	O
path	pointer
;	O
plugin_loading_enabled	int
=	O
1	int
;	O
path	pointer
=	O
getenv	function
(	O
"WGET2_PLUGIN_DIRS"	pointer
)	O
;	O
if	O
(	O
path	pointer
)	O
{	O
plugin_db_clear_search_paths	function
(	O
)	O
;	O
plugin_db_add_search_paths	function
(	O
path	pointer
,	O
':'	O
)	O
;	O
}	O
if	O
(	O
plugin_db_load_from_envvar	function
(	O
)	O
)	O
{	O
set_exit_status	function
(	O
WG_EXIT_STATUS_PARSE_INIT	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
read_config	function
(	O
)	O
;	O
if	O
(	O
(	O
n	long
=	O
parse_command_line	function
(	O
argc	int
,	O
argv	pointer
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
plugin_db_help_forwarded	function
(	O
)	O
)	O
{	O
set_exit_status	function
(	O
WG_EXIT_STATUS_NO_ERROR	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
config	struct
.	O
logfile_append	pointer
)	O
{	O
xfree	O
(	O
config	struct
.	O
logfile	pointer
)	O
;	O
config	struct
.	O
logfile	pointer
=	O
config	struct
.	O
logfile_append	pointer
;	O
config	struct
.	O
logfile_append	pointer
=	O
NULL	O
;	O
}	O
else	O
if	O
(	O
config	struct
.	O
logfile	pointer
&&	O
strcmp	function
(	O
config	struct
.	O
logfile	pointer
,	O
"-"	pointer
)	O
&&	O
!	O
config	struct
.	O
dont_write	char
)	O
{	O
int	O
fd	array
=	O
open	function
(	O
config	struct
.	O
logfile	pointer
,	O
O_WRONLY	int
|	O
O_TRUNC	int
)	O
;	O
if	O
(	O
fd	array
!=	O
-	O
1	int
)	O
close	function
(	O
fd	array
)	O
;	O
}	O
log_init	function
(	O
)	O
;	O
if	O
(	O
config	struct
.	O
https_only	char
&&	O
config	struct
.	O
https_enforce	char
)	O
config	struct
.	O
https_enforce	char
=	O
WGET_HTTPS_ENFORCE_NONE	int
;	O
wget_iri_set_defaultport	function
(	O
WGET_IRI_SCHEME_HTTP	int
,	O
config	struct
.	O
default_http_port	short
)	O
;	O
wget_iri_set_defaultport	function
(	O
WGET_IRI_SCHEME_HTTPS	int
,	O
config	struct
.	O
default_https_port	short
)	O
;	O
if	O
(	O
config	struct
.	O
max_threads	int
<	O
1	int
||	O
(	O
config	struct
.	O
max_threads	int
>	O
1	int
&&	O
config	struct
.	O
chunk_size	long
)	O
)	O
config	struct
.	O
max_threads	int
=	O
1	int
;	O
if	O
(	O
config	struct
.	O
output_document	pointer
&&	O
strcmp	function
(	O
config	struct
.	O
output_document	pointer
,	O
"-"	pointer
)	O
&&	O
!	O
config	struct
.	O
dont_write	char
)	O
{	O
int	O
fd	array
=	O
open	function
(	O
config	struct
.	O
output_document	pointer
,	O
O_WRONLY	int
|	O
O_TRUNC	int
|	O
O_BINARY	int
)	O
;	O
if	O
(	O
fd	array
!=	O
-	O
1	int
)	O
close	function
(	O
fd	array
)	O
;	O
}	O
if	O
(	O
!	O
config	struct
.	O
local_encoding	pointer
)	O
config	struct
.	O
local_encoding	pointer
=	O
wget_local_charset_encoding	function
(	O
)	O
;	O
if	O
(	O
!	O
config	struct
.	O
input_encoding	pointer
)	O
config	struct
.	O
input_encoding	pointer
=	O
wget_strdup	function
(	O
config	struct
.	O
local_encoding	pointer
)	O
;	O
debug_printf	O
(	O
"Local URI encoding = '%s'\n"	pointer
,	O
config	struct
.	O
local_encoding	pointer
)	O
;	O
debug_printf	O
(	O
"Input URI encoding = '%s'\n"	pointer
,	O
config	struct
.	O
input_encoding	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
proxy	pointer
)	O
{	O
if	O
(	O
!	O
config	struct
.	O
http_proxy	pointer
)	O
config	struct
.	O
http_proxy	pointer
=	O
wget_strdup	function
(	O
getenv	function
(	O
"http_proxy"	pointer
)	O
)	O
;	O
if	O
(	O
!	O
config	struct
.	O
https_proxy	pointer
)	O
config	struct
.	O
https_proxy	pointer
=	O
wget_strdup	function
(	O
getenv	function
(	O
"https_proxy"	pointer
)	O
)	O
;	O
if	O
(	O
!	O
config	struct
.	O
no_proxy	pointer
)	O
config	struct
.	O
no_proxy	pointer
=	O
wget_strdup	function
(	O
getenv	function
(	O
"no_proxy"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
http_proxy	pointer
&&	O
*	O
config	struct
.	O
http_proxy	pointer
&&	O
!	O
wget_http_set_http_proxy	function
(	O
config	struct
.	O
http_proxy	pointer
,	O
config	struct
.	O
local_encoding	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to set http proxies %s\n"	pointer
)	O
,	O
config	struct
.	O
http_proxy	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
config	struct
.	O
https_proxy	pointer
&&	O
*	O
config	struct
.	O
https_proxy	pointer
&&	O
!	O
wget_http_set_https_proxy	function
(	O
config	struct
.	O
https_proxy	pointer
,	O
config	struct
.	O
local_encoding	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to set https proxies %s\n"	pointer
)	O
,	O
config	struct
.	O
https_proxy	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
config	struct
.	O
no_proxy	pointer
&&	O
wget_http_set_no_proxy	function
(	O
config	struct
.	O
no_proxy	pointer
,	O
config	struct
.	O
local_encoding	pointer
)	O
<	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to set proxy exceptions %s\n"	pointer
)	O
,	O
config	struct
.	O
no_proxy	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
xfree	O
(	O
config	struct
.	O
http_proxy	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
https_proxy	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
no_proxy	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
cookies	pointer
)	O
{	O
config	struct
.	O
cookie_db	pointer
=	O
wget_cookie_db_init	function
(	O
NULL	O
)	O
;	O
wget_cookie_set_keep_session_cookies	function
(	O
config	struct
.	O
cookie_db	pointer
,	O
config	struct
.	O
keep_session_cookies	char
)	O
;	O
if	O
(	O
config	struct
.	O
cookie_suffixes	pointer
)	O
wget_cookie_db_load_psl	function
(	O
config	struct
.	O
cookie_db	pointer
,	O
config	struct
.	O
cookie_suffixes	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
load_cookies	pointer
)	O
wget_cookie_db_load	function
(	O
config	struct
.	O
cookie_db	pointer
,	O
config	struct
.	O
load_cookies	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
hsts	bool
)	O
{	O
if	O
(	O
!	O
config	struct
.	O
hsts_db	pointer
)	O
config	struct
.	O
hsts_db	pointer
=	O
wget_hsts_db_init	function
(	O
NULL	O
,	O
config	struct
.	O
hsts_file	pointer
)	O
;	O
wget_hsts_db_load	function
(	O
config	struct
.	O
hsts_db	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
hpkp	pointer
)	O
{	O
if	O
(	O
!	O
config	struct
.	O
hpkp_db	pointer
)	O
config	struct
.	O
hpkp_db	pointer
=	O
wget_hpkp_db_init	function
(	O
NULL	O
,	O
config	struct
.	O
hpkp_file	pointer
)	O
;	O
wget_hpkp_db_load	function
(	O
config	struct
.	O
hpkp_db	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
tls_resume	char
)	O
{	O
config	struct
.	O
tls_session_db	pointer
=	O
wget_tls_session_db_init	function
(	O
NULL	O
)	O
;	O
wget_tls_session_db_load	function
(	O
config	struct
.	O
tls_session_db	pointer
,	O
config	struct
.	O
tls_session_file	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
ocsp	char
)	O
{	O
if	O
(	O
!	O
config	struct
.	O
ocsp_db	pointer
)	O
config	struct
.	O
ocsp_db	pointer
=	O
wget_ocsp_db_init	function
(	O
NULL	O
,	O
config	struct
.	O
ocsp_file	pointer
)	O
;	O
wget_ocsp_db_load	function
(	O
config	struct
.	O
ocsp_db	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
base_url	pointer
)	O
config	struct
.	O
base	pointer
=	O
wget_iri_parse	function
(	O
config	struct
.	O
base_url	pointer
,	O
config	struct
.	O
local_encoding	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
askpass	char
&&	O
n	long
<	O
argc	int
)	O
{	O
xfree	O
(	O
config	struct
.	O
password	pointer
)	O
;	O
config	struct
.	O
password	pointer
=	O
prompt_for_password	function
(	O
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
use_askpass_bin	pointer
&&	O
n	long
<	O
argc	int
&&	O
use_askpass	function
(	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
config	struct
.	O
http_username	pointer
)	O
config	struct
.	O
http_username	pointer
=	O
wget_strdup	function
(	O
config	struct
.	O
username	pointer
)	O
;	O
if	O
(	O
!	O
config	struct
.	O
http_password	pointer
)	O
config	struct
.	O
http_password	pointer
=	O
wget_strdup	function
(	O
config	struct
.	O
password	pointer
)	O
;	O
if	O
(	O
!	O
config	struct
.	O
http_proxy_username	pointer
)	O
config	struct
.	O
http_proxy_username	pointer
=	O
wget_strdup	function
(	O
config	struct
.	O
username	pointer
)	O
;	O
if	O
(	O
!	O
config	struct
.	O
http_proxy_password	pointer
)	O
config	struct
.	O
http_proxy_password	pointer
=	O
wget_strdup	function
(	O
config	struct
.	O
password	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
auth_no_challenge	bool
)	O
{	O
config	struct
.	O
default_challenges	pointer
=	O
wget_vector_create	function
(	O
1	int
,	O
NULL	O
)	O
;	O
wget_http_challenge	struct
*	O
basic	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_http_challenge	struct
)	O
)	O
;	O
basic	pointer
->	O
auth_scheme	pointer
=	O
wget_strdup	function
(	O
"basic"	pointer
)	O
;	O
wget_vector_add	function
(	O
config	struct
.	O
default_challenges	pointer
,	O
basic	pointer
)	O
;	O
wget_vector_set_destructor	function
(	O
config	struct
.	O
default_challenges	pointer
,	O
(	O
wget_vector_destructor	function
*	O
)	O
wget_http_free_challenge	function
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
page_requisites	char
&&	O
!	O
config	struct
.	O
recursive	char
)	O
{	O
config	struct
.	O
recursive	char
=	O
1	int
;	O
config	struct
.	O
level	int
=	O
1	int
;	O
}	O
if	O
(	O
config	struct
.	O
start_pos	long long
&&	O
config	struct
.	O
continue_download	char
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Specifying both --start-pos and --continue is not recommended; --continue will be disabled"	pointer
)	O
)	O
;	O
config	struct
.	O
continue_download	char
=	O
0	int
;	O
}	O
if	O
(	O
config	struct
.	O
timestamping	char
)	O
{	O
if	O
(	O
config	struct
.	O
output_document	pointer
)	O
{	O
error_printf	O
(	O
_	O
(	O
"WARNING: timestamping does nothing in combination with -O"	pointer
)	O
)	O
;	O
config	struct
.	O
timestamping	char
=	O
0	int
;	O
}	O
if	O
(	O
!	O
config	struct
.	O
clobber	char
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Can't timestamp and not clobber old files at the same time"	pointer
)	O
)	O
;	O
config	struct
.	O
timestamping	char
=	O
0	int
;	O
}	O
if	O
(	O
config	struct
.	O
spider	char
)	O
{	O
error_printf	O
(	O
_	O
(	O
"WARNING: timestamping does nothing in combination with spider"	pointer
)	O
)	O
;	O
config	struct
.	O
timestamping	char
=	O
0	int
;	O
}	O
if	O
(	O
config	struct
.	O
chunk_size	long
&&	O
config	struct
.	O
if_modified_since	char
)	O
{	O
error_printf	O
(	O
_	O
(	O
"WARNING: timestamping and chunk-size only work together without If-Modified-Since"	pointer
)	O
)	O
;	O
config	struct
.	O
if_modified_since	char
=	O
0	int
;	O
}	O
}	O
if	O
(	O
config	struct
.	O
mirror	char
)	O
config	struct
.	O
metalink	pointer
=	O
0	int
;	O
if	O
(	O
config	struct
.	O
verify_sig	char
)	O
{	O
}	O
if	O
(	O
(	O
rc	int
=	O
wget_net_init	function
(	O
)	O
)	O
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Failed to init networking (%d)"	pointer
)	O
,	O
rc	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
wget_dns_init	function
(	O
&	O
dns	pointer
)	O
)	O
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Failed to init DNS (%d)"	pointer
)	O
,	O
rc	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
config	struct
.	O
dns_caching	char
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
wget_dns_cache_init	function
(	O
&	O
dns_cache	pointer
)	O
)	O
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Failed to init DNS cache (%d)"	pointer
)	O
,	O
rc	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
wget_dns_set_cache	function
(	O
dns	pointer
,	O
dns_cache	pointer
)	O
;	O
}	O
wget_dns_set_timeout	function
(	O
dns	pointer
,	O
config	struct
.	O
dns_timeout	int
)	O
;	O
wget_tcp_set_dns	function
(	O
NULL	O
,	O
dns	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
stats_dns_args	pointer
)	O
{	O
config	struct
.	O
stats_dns_args	pointer
->	O
fp	pointer
=	O
config	struct
.	O
stats_dns_args	pointer
->	O
filename	pointer
&&	O
*	O
config	struct
.	O
stats_dns_args	pointer
->	O
filename	pointer
&&	O
strcmp	function
(	O
config	struct
.	O
stats_dns_args	pointer
->	O
filename	pointer
,	O
"-"	pointer
)	O
&&	O
!	O
config	struct
.	O
dont_write	char
?	O
fopen	function
(	O
config	struct
.	O
stats_dns_args	pointer
->	O
filename	pointer
,	O
"w"	pointer
)	O
:	O
stdout	pointer
;	O
if	O
(	O
!	O
config	struct
.	O
stats_dns_args	pointer
->	O
fp	pointer
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Failed to open '%s' (%d)"	pointer
)	O
,	O
config	struct
.	O
stats_dns_args	pointer
->	O
filename	pointer
,	O
rc	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
wget_dns_set_stats_callback	function
(	O
dns	pointer
,	O
stats_callback_dns	function
,	O
config	struct
.	O
stats_dns_args	pointer
->	O
fp	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
stats_ocsp_args	pointer
)	O
{	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
fp	pointer
=	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
filename	pointer
&&	O
*	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
filename	pointer
&&	O
strcmp	function
(	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
filename	pointer
,	O
"-"	pointer
)	O
&&	O
!	O
config	struct
.	O
dont_write	char
?	O
fopen	function
(	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
filename	pointer
,	O
"w"	pointer
)	O
:	O
stdout	pointer
;	O
if	O
(	O
!	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
fp	pointer
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Failed to open '%s' (%d)"	pointer
)	O
,	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
filename	pointer
,	O
rc	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
wget_ssl_set_stats_callback_ocsp	function
(	O
stats_callback_ocsp	function
,	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
fp	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
stats_tls_args	pointer
)	O
{	O
config	struct
.	O
stats_tls_args	pointer
->	O
fp	pointer
=	O
config	struct
.	O
stats_tls_args	pointer
->	O
filename	pointer
&&	O
*	O
config	struct
.	O
stats_tls_args	pointer
->	O
filename	pointer
&&	O
strcmp	function
(	O
config	struct
.	O
stats_tls_args	pointer
->	O
filename	pointer
,	O
"-"	pointer
)	O
&&	O
!	O
config	struct
.	O
dont_write	char
?	O
fopen	function
(	O
config	struct
.	O
stats_tls_args	pointer
->	O
filename	pointer
,	O
"w"	pointer
)	O
:	O
stdout	pointer
;	O
if	O
(	O
!	O
config	struct
.	O
stats_tls_args	pointer
->	O
fp	pointer
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Failed to open '%s' (%d)"	pointer
)	O
,	O
config	struct
.	O
stats_tls_args	pointer
->	O
filename	pointer
,	O
rc	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
wget_ssl_set_stats_callback_tls	function
(	O
stats_callback_tls	function
,	O
config	struct
.	O
stats_tls_args	pointer
->	O
fp	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
stats_server_args	pointer
)	O
{	O
config	struct
.	O
stats_server_args	pointer
->	O
fp	pointer
=	O
config	struct
.	O
stats_server_args	pointer
->	O
filename	pointer
&&	O
*	O
config	struct
.	O
stats_server_args	pointer
->	O
filename	pointer
&&	O
strcmp	function
(	O
config	struct
.	O
stats_server_args	pointer
->	O
filename	pointer
,	O
"-"	pointer
)	O
&&	O
!	O
config	struct
.	O
dont_write	char
?	O
fopen	function
(	O
config	struct
.	O
stats_server_args	pointer
->	O
filename	pointer
,	O
"w"	pointer
)	O
:	O
stdout	pointer
;	O
if	O
(	O
!	O
config	struct
.	O
stats_server_args	pointer
->	O
fp	pointer
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Failed to open '%s' (%d)"	pointer
)	O
,	O
config	struct
.	O
stats_server_args	pointer
->	O
filename	pointer
,	O
rc	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
server_stats_init	function
(	O
config	struct
.	O
stats_server_args	pointer
->	O
fp	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
stats_site_args	pointer
)	O
{	O
config	struct
.	O
stats_site_args	pointer
->	O
fp	pointer
=	O
config	struct
.	O
stats_site_args	pointer
->	O
filename	pointer
&&	O
*	O
config	struct
.	O
stats_site_args	pointer
->	O
filename	pointer
&&	O
strcmp	function
(	O
config	struct
.	O
stats_site_args	pointer
->	O
filename	pointer
,	O
"-"	pointer
)	O
&&	O
!	O
config	struct
.	O
dont_write	char
?	O
fopen	function
(	O
config	struct
.	O
stats_site_args	pointer
->	O
filename	pointer
,	O
"w"	pointer
)	O
:	O
stdout	pointer
;	O
if	O
(	O
!	O
config	struct
.	O
stats_site_args	pointer
->	O
fp	pointer
)	O
{	O
wget_error_printf	function
(	O
_	O
(	O
"Failed to open '%s' (%d)"	pointer
)	O
,	O
config	struct
.	O
stats_site_args	pointer
->	O
filename	pointer
,	O
rc	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
site_stats_init	function
(	O
config	struct
.	O
stats_site_args	pointer
->	O
fp	pointer
)	O
;	O
}	O
wget_tcp_set_timeout	function
(	O
NULL	O
,	O
config	struct
.	O
read_timeout	int
)	O
;	O
wget_tcp_set_connect_timeout	function
(	O
NULL	O
,	O
config	struct
.	O
connect_timeout	int
)	O
;	O
wget_tcp_set_tcp_fastopen	function
(	O
NULL	O
,	O
config	struct
.	O
tcp_fastopen	int
)	O
;	O
wget_tcp_set_tls_false_start	function
(	O
NULL	O
,	O
config	struct
.	O
tls_false_start	char
)	O
;	O
if	O
(	O
!	O
config	struct
.	O
dont_write	char
)	O
wget_tcp_set_bind_address	function
(	O
NULL	O
,	O
config	struct
.	O
bind_address	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
inet4_only	char
)	O
wget_tcp_set_family	function
(	O
NULL	O
,	O
WGET_NET_FAMILY_IPV4	int
)	O
;	O
else	O
if	O
(	O
config	struct
.	O
inet6_only	char
)	O
wget_tcp_set_family	function
(	O
NULL	O
,	O
WGET_NET_FAMILY_IPV6	int
)	O
;	O
else	O
wget_tcp_set_preferred_family	function
(	O
NULL	O
,	O
config	struct
.	O
preferred_family	int
)	O
;	O
wget_iri_set_defaultpage	function
(	O
config	struct
.	O
default_page	pointer
)	O
;	O
wget_ssl_set_config_int	function
(	O
WGET_SSL_CHECK_CERTIFICATE	int
,	O
config	struct
.	O
check_certificate	char
)	O
;	O
wget_ssl_set_config_int	function
(	O
WGET_SSL_CHECK_HOSTNAME	int
,	O
config	struct
.	O
check_hostname	char
)	O
;	O
wget_ssl_set_config_int	function
(	O
WGET_SSL_CERT_TYPE	int
,	O
config	struct
.	O
cert_type	char
)	O
;	O
wget_ssl_set_config_int	function
(	O
WGET_SSL_KEY_TYPE	int
,	O
config	struct
.	O
private_key_type	char
)	O
;	O
wget_ssl_set_config_int	function
(	O
WGET_SSL_PRINT_INFO	int
,	O
config	struct
.	O
debug	int
)	O
;	O
wget_ssl_set_config_int	function
(	O
WGET_SSL_OCSP	int
,	O
config	struct
.	O
ocsp	char
)	O
;	O
wget_ssl_set_config_int	function
(	O
WGET_SSL_OCSP_DATE	int
,	O
config	struct
.	O
ocsp_date	int
)	O
;	O
wget_ssl_set_config_int	function
(	O
WGET_SSL_OCSP_NONCE	int
,	O
config	struct
.	O
ocsp_nonce	int
)	O
;	O
wget_ssl_set_config_int	function
(	O
WGET_SSL_OCSP_STAPLING	int
,	O
config	struct
.	O
ocsp_stapling	char
)	O
;	O
wget_ssl_set_config_string	function
(	O
WGET_SSL_OCSP_SERVER	int
,	O
config	struct
.	O
ocsp_server	pointer
)	O
;	O
wget_ssl_set_config_string	function
(	O
WGET_SSL_SECURE_PROTOCOL	int
,	O
config	struct
.	O
secure_protocol	pointer
)	O
;	O
wget_ssl_set_config_string	function
(	O
WGET_SSL_CA_DIRECTORY	int
,	O
config	struct
.	O
ca_directory	pointer
)	O
;	O
wget_ssl_set_config_string	function
(	O
WGET_SSL_CA_FILE	int
,	O
config	struct
.	O
ca_cert	pointer
)	O
;	O
wget_ssl_set_config_string	function
(	O
WGET_SSL_CERT_FILE	int
,	O
config	struct
.	O
cert_file	pointer
)	O
;	O
wget_ssl_set_config_string	function
(	O
WGET_SSL_KEY_FILE	int
,	O
config	struct
.	O
private_key	pointer
)	O
;	O
wget_ssl_set_config_string	function
(	O
WGET_SSL_CRL_FILE	int
,	O
config	struct
.	O
crl_file	pointer
)	O
;	O
wget_ssl_set_config_object	function
(	O
WGET_SSL_OCSP_CACHE	int
,	O
config	struct
.	O
ocsp_db	pointer
)	O
;	O
wget_ssl_set_config_object	function
(	O
WGET_SSL_SESSION_CACHE	int
,	O
config	struct
.	O
tls_session_db	pointer
)	O
;	O
wget_ssl_set_config_object	function
(	O
WGET_SSL_HPKP_CACHE	int
,	O
config	struct
.	O
hpkp_db	pointer
)	O
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
config	struct
.	O
domains	pointer
)	O
;	O
it	int
++	O
)	O
{	O
char	O
*	O
s	pointer
,	O
*	O
hostname	pointer
=	O
wget_vector_get	function
(	O
config	struct
.	O
domains	pointer
,	O
it	int
)	O
;	O
wget_percent_unescape	function
(	O
hostname	pointer
)	O
;	O
if	O
(	O
wget_str_needs_encoding	function
(	O
hostname	pointer
)	O
)	O
{	O
if	O
(	O
(	O
s	pointer
=	O
wget_str_to_utf8	function
(	O
hostname	pointer
,	O
config	struct
.	O
local_encoding	pointer
)	O
)	O
)	O
{	O
wget_vector_replace	function
(	O
config	struct
.	O
domains	pointer
,	O
s	pointer
,	O
it	int
)	O
;	O
hostname	pointer
=	O
s	pointer
;	O
}	O
if	O
(	O
(	O
s	pointer
=	O
(	O
char	O
*	O
)	O
wget_str_to_ascii	function
(	O
hostname	pointer
)	O
)	O
!=	O
hostname	pointer
)	O
wget_vector_replace	function
(	O
config	struct
.	O
domains	pointer
,	O
s	pointer
,	O
it	int
)	O
;	O
}	O
else	O
wget_strtolower	function
(	O
hostname	pointer
)	O
;	O
}	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
config	struct
.	O
exclude_domains	pointer
)	O
;	O
it	int
++	O
)	O
{	O
char	O
*	O
s	pointer
,	O
*	O
hostname	pointer
=	O
wget_vector_get	function
(	O
config	struct
.	O
exclude_domains	pointer
,	O
it	int
)	O
;	O
wget_percent_unescape	function
(	O
hostname	pointer
)	O
;	O
if	O
(	O
wget_str_needs_encoding	function
(	O
hostname	pointer
)	O
)	O
{	O
if	O
(	O
(	O
s	pointer
=	O
wget_str_to_utf8	function
(	O
hostname	pointer
,	O
config	struct
.	O
local_encoding	pointer
)	O
)	O
)	O
{	O
wget_vector_replace	function
(	O
config	struct
.	O
exclude_domains	pointer
,	O
s	pointer
,	O
it	int
)	O
;	O
hostname	pointer
=	O
s	pointer
;	O
}	O
if	O
(	O
(	O
s	pointer
=	O
(	O
char	O
*	O
)	O
wget_str_to_ascii	function
(	O
hostname	pointer
)	O
)	O
!=	O
hostname	pointer
)	O
wget_vector_replace	function
(	O
config	struct
.	O
exclude_domains	pointer
,	O
s	pointer
,	O
it	int
)	O
;	O
}	O
else	O
wget_strtolower	function
(	O
hostname	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
dns_cache_preload	pointer
)	O
_preload_dns_cache	function
(	O
config	struct
.	O
dns_cache_preload	pointer
)	O
;	O
return	O
n	long
;	O
}	O
void	O
deinit	pointer
(	O
void	O
)	O
{	O
wget_global_deinit	function
(	O
)	O
;	O
get_home_dir	function
(	O
true	int
)	O
;	O
get_xdg_config_home	function
(	O
NULL	O
)	O
;	O
get_xdg_data_home	function
(	O
NULL	O
)	O
;	O
wget_dns_free	function
(	O
&	O
dns	pointer
)	O
;	O
wget_dns_cache_free	function
(	O
&	O
dns_cache	pointer
)	O
;	O
wget_cookie_db_free	function
(	O
&	O
config	struct
.	O
cookie_db	pointer
)	O
;	O
wget_hsts_db_free	function
(	O
&	O
config	struct
.	O
hsts_db	pointer
)	O
;	O
wget_hpkp_db_free	function
(	O
&	O
config	struct
.	O
hpkp_db	pointer
)	O
;	O
wget_tls_session_db_free	function
(	O
&	O
config	struct
.	O
tls_session_db	pointer
)	O
;	O
wget_ocsp_db_free	function
(	O
&	O
config	struct
.	O
ocsp_db	pointer
)	O
;	O
wget_netrc_db_free	function
(	O
&	O
config	struct
.	O
netrc_db	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
accept_regex	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
base_url	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
bind_address	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
ca_cert	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
ca_directory	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
cert_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
cookie_suffixes	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
crl_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
default_page	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
directory_prefix	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
egd_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
hsts_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
hpkp_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
http_password	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
http_proxy	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
http_proxy_password	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
http_proxy_username	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
http_username	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
https_proxy	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
hsts_preload_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
input_encoding	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
input_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
load_cookies	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
local_encoding	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
logfile	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
logfile_append	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
netrc_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
ocsp_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
ocsp_server	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
output_document	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
password	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
post_data	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
post_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
private_key	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
random_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
referer	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
reject_regex	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
remote_encoding	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
save_cookies	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
secure_protocol	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
tls_session_file	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
user_agent	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
use_askpass_bin	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
username	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
gnupg_homedir	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
stats_all	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
user_config	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
system_config	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
stats_dns_args	pointer
)	O
{	O
if	O
(	O
config	struct
.	O
stats_dns_args	pointer
->	O
fp	pointer
&&	O
config	struct
.	O
stats_dns_args	pointer
->	O
fp	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
config	struct
.	O
stats_dns_args	pointer
->	O
fp	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
stats_dns_args	pointer
->	O
filename	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
stats_dns_args	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
stats_ocsp_args	pointer
)	O
{	O
if	O
(	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
fp	pointer
&&	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
fp	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
fp	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
stats_ocsp_args	pointer
->	O
filename	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
stats_ocsp_args	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
stats_server_args	pointer
)	O
{	O
if	O
(	O
config	struct
.	O
stats_server_args	pointer
->	O
fp	pointer
)	O
server_stats_exit	function
(	O
)	O
;	O
if	O
(	O
config	struct
.	O
stats_server_args	pointer
->	O
fp	pointer
&&	O
config	struct
.	O
stats_server_args	pointer
->	O
fp	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
config	struct
.	O
stats_server_args	pointer
->	O
fp	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
stats_server_args	pointer
->	O
filename	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
stats_server_args	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
stats_site_args	pointer
)	O
{	O
if	O
(	O
config	struct
.	O
stats_site_args	pointer
->	O
fp	pointer
)	O
site_stats_exit	function
(	O
)	O
;	O
if	O
(	O
config	struct
.	O
stats_site_args	pointer
->	O
fp	pointer
&&	O
config	struct
.	O
stats_site_args	pointer
->	O
fp	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
config	struct
.	O
stats_site_args	pointer
->	O
fp	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
stats_site_args	pointer
->	O
filename	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
stats_site_args	pointer
)	O
;	O
}	O
if	O
(	O
config	struct
.	O
stats_tls_args	pointer
)	O
{	O
if	O
(	O
config	struct
.	O
stats_tls_args	pointer
->	O
fp	pointer
&&	O
config	struct
.	O
stats_tls_args	pointer
->	O
fp	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
config	struct
.	O
stats_tls_args	pointer
->	O
fp	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
stats_tls_args	pointer
->	O
filename	pointer
)	O
;	O
xfree	O
(	O
config	struct
.	O
stats_tls_args	pointer
)	O
;	O
}	O
wget_iri_free	function
(	O
&	O
config	struct
.	O
base	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
exclude_directories	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
save_content_on	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
mime_types	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
http_retry_on_status	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
domains	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
exclude_domains	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
follow_tags	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
ignore_tags	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
accept_patterns	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
reject_patterns	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
headers	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
default_challenges	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
config	struct
.	O
compression	pointer
)	O
;	O
wget_http_set_http_proxy	function
(	O
NULL	O
,	O
NULL	O
)	O
;	O
wget_http_set_https_proxy	function
(	O
NULL	O
,	O
NULL	O
)	O
;	O
wget_http_set_no_proxy	function
(	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
int	O
selftest_options	function
(	O
void	O
)	O
{	O
int	O
ret	pointer
=	O
0	int
;	O
size_t	long
it	int
;	O
for	O
(	O
it	int
=	O
1	int
;	O
it	int
<	O
countof	O
(	O
options	array
)	O
;	O
it	int
++	O
)	O
{	O
if	O
(	O
opt_compare	function
(	O
options	array
[	O
it	int
-	O
1	int
]	O
.	O
long_name	pointer
,	O
&	O
options	array
[	O
it	int
]	O
)	O
>	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Option not in order '%s' after '%s' (using opt_compare())\n"	pointer
)	O
,	O
__func__	O
,	O
options	array
[	O
it	int
]	O
.	O
long_name	pointer
,	O
options	array
[	O
it	int
-	O
1	int
]	O
.	O
long_name	pointer
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
for	O
(	O
it	int
=	O
1	int
;	O
it	int
<	O
countof	O
(	O
options	array
)	O
;	O
it	int
++	O
)	O
{	O
if	O
(	O
opt_compare_config	function
(	O
options	array
[	O
it	int
-	O
1	int
]	O
.	O
long_name	pointer
,	O
&	O
options	array
[	O
it	int
]	O
)	O
>	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Option not in order '%s' after '%s' (using opt_compare_config())\n"	pointer
)	O
,	O
__func__	O
,	O
options	array
[	O
it	int
]	O
.	O
long_name	pointer
,	O
options	array
[	O
it	int
-	O
1	int
]	O
.	O
long_name	pointer
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
options	array
)	O
;	O
it	int
++	O
)	O
{	O
option_t	pointer
opt	pointer
=	O
bsearch	function
(	O
options	array
[	O
it	int
]	O
.	O
long_name	pointer
,	O
options	array
,	O
countof	O
(	O
options	array
)	O
,	O
sizeof	O
(	O
options	array
[	O
0	int
]	O
)	O
,	O
opt_compare	function
)	O
;	O
if	O
(	O
!	O
opt	pointer
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to find option '%s' (using opt_compare())\n"	pointer
)	O
,	O
__func__	O
,	O
options	array
[	O
it	int
]	O
.	O
long_name	pointer
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
options	array
)	O
;	O
it	int
++	O
)	O
{	O
option_t	pointer
opt	pointer
=	O
bsearch	function
(	O
options	array
[	O
it	int
]	O
.	O
long_name	pointer
,	O
options	array
,	O
countof	O
(	O
options	array
)	O
,	O
sizeof	O
(	O
options	array
[	O
0	int
]	O
)	O
,	O
opt_compare_config	function
)	O
;	O
if	O
(	O
!	O
opt	pointer
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to find option '%s' (using opt_compare_config())\n"	pointer
)	O
,	O
__func__	O
,	O
options	array
[	O
it	int
]	O
.	O
long_name	pointer
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
{	O
static	O
const	O
char	O
*	O
test_command	array
[	O
]	O
=	O
{	O
"httpproxy"	pointer
,	O
"http_proxy"	pointer
,	O
"http-proxy"	pointer
,	O
"Httpproxy"	pointer
,	O
"Http_proxy"	pointer
,	O
"Http-proxy"	pointer
,	O
}	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
test_command	array
)	O
;	O
it	int
++	O
)	O
{	O
option_t	pointer
opt	pointer
=	O
bsearch	function
(	O
test_command	array
[	O
it	int
]	O
,	O
options	array
,	O
countof	O
(	O
options	array
)	O
,	O
sizeof	O
(	O
options	array
[	O
0	int
]	O
)	O
,	O
opt_compare_config	function
)	O
;	O
if	O
(	O
!	O
opt	pointer
)	O
{	O
for	O
(	O
unsigned	O
it2	int
=	O
0	int
;	O
it2	int
<	O
countof	O
(	O
options	array
)	O
&&	O
!	O
opt	pointer
;	O
it2	int
++	O
)	O
if	O
(	O
opt_compare_config_linear	function
(	O
test_command	array
[	O
it	int
]	O
,	O
options	array
[	O
it2	int
]	O
.	O
long_name	pointer
)	O
==	O
0	int
)	O
opt	pointer
=	O
&	O
options	array
[	O
it2	int
]	O
;	O
if	O
(	O
!	O
opt	pointer
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to find option '%s' (using opt_compare_config())\n"	pointer
)	O
,	O
__func__	O
,	O
test_command	array
[	O
it	int
]	O
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
}	O
}	O
{	O
static	O
struct	O
{	O
const	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
char	O
result	char
;	O
}	O
test_bool_short	array
[	O
]	O
=	O
{	O
{	O
{	O
""	pointer
,	O
"-r"	pointer
,	O
"-"	pointer
}	O
,	O
1	int
}	O
,	O
}	O
;	O
char	O
recursive	char
=	O
config	struct
.	O
recursive	char
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
test_bool_short	array
)	O
;	O
it	int
++	O
)	O
{	O
config	struct
.	O
recursive	char
=	O
2	int
;	O
parse_command_line	function
(	O
3	int
,	O
test_bool_short	array
[	O
it	int
]	O
.	O
argv	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
recursive	char
!=	O
test_bool_short	array
[	O
it	int
]	O
.	O
result	char
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to parse bool short option #%zu (=%d)\n"	pointer
)	O
,	O
__func__	O
,	O
it	int
,	O
config	struct
.	O
recursive	char
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
static	O
struct	O
{	O
const	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
char	O
result	char
;	O
}	O
test_bool	array
[	O
]	O
=	O
{	O
{	O
{	O
""	pointer
,	O
"--recursive"	pointer
,	O
""	pointer
}	O
,	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--no-recursive"	pointer
,	O
""	pointer
}	O
,	O
0	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--recursive=y"	pointer
,	O
""	pointer
}	O
,	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--recursive=n"	pointer
,	O
""	pointer
}	O
,	O
0	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--recursive=1"	pointer
,	O
""	pointer
}	O
,	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--recursive=0"	pointer
,	O
""	pointer
}	O
,	O
0	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--recursive=yes"	pointer
,	O
""	pointer
}	O
,	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--recursive=no"	pointer
,	O
""	pointer
}	O
,	O
0	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--recursive=on"	pointer
,	O
""	pointer
}	O
,	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--recursive=off"	pointer
,	O
""	pointer
}	O
,	O
0	int
}	O
}	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
test_bool	array
)	O
;	O
it	int
++	O
)	O
{	O
config	struct
.	O
recursive	char
=	O
2	int
;	O
parse_command_line	function
(	O
2	int
,	O
test_bool	array
[	O
it	int
]	O
.	O
argv	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
recursive	char
!=	O
test_bool	array
[	O
it	int
]	O
.	O
result	char
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to parse bool long option #%zu (%d)\n"	pointer
)	O
,	O
__func__	O
,	O
it	int
,	O
config	struct
.	O
recursive	char
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
config	struct
.	O
recursive	char
=	O
2	int
;	O
parse_command_line	function
(	O
3	int
,	O
test_bool	array
[	O
it	int
]	O
.	O
argv	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
recursive	char
!=	O
test_bool	array
[	O
it	int
]	O
.	O
result	char
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to parse bool long option #%zu (%d)\n"	pointer
)	O
,	O
__func__	O
,	O
it	int
,	O
config	struct
.	O
recursive	char
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
config	struct
.	O
recursive	char
=	O
recursive	char
;	O
}	O
{	O
static	O
struct	O
{	O
const	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
int	O
result	char
;	O
}	O
test_timeout_short	array
[	O
]	O
=	O
{	O
{	O
{	O
""	pointer
,	O
"-T"	pointer
,	O
"123"	pointer
}	O
,	O
123000	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-T"	pointer
,	O
"-1"	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-T"	pointer
,	O
"inf"	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-T"	pointer
,	O
"infinity"	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-T"	pointer
,	O
"0"	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-T"	pointer
,	O
"+123"	pointer
}	O
,	O
123000	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-T"	pointer
,	O
"60.2"	pointer
}	O
,	O
60200	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-T123"	pointer
,	O
""	pointer
}	O
,	O
123000	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-T-1"	pointer
,	O
""	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-Tinf"	pointer
,	O
""	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-Tinfinity"	pointer
,	O
""	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-T0"	pointer
,	O
""	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-T+123"	pointer
,	O
""	pointer
}	O
,	O
123000	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"-T60.2"	pointer
,	O
""	pointer
}	O
,	O
60200	int
}	O
}	O
;	O
int	O
dns_timeout	int
=	O
config	struct
.	O
dns_timeout	int
;	O
int	O
connect_timeout	int
=	O
config	struct
.	O
connect_timeout	int
;	O
int	O
read_timeout	int
=	O
config	struct
.	O
read_timeout	int
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
test_timeout_short	array
)	O
;	O
it	int
++	O
)	O
{	O
config	struct
.	O
dns_timeout	int
=	O
555	int
;	O
parse_command_line	function
(	O
3	int
,	O
test_timeout_short	array
[	O
it	int
]	O
.	O
argv	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
dns_timeout	int
!=	O
test_timeout_short	array
[	O
it	int
]	O
.	O
result	char
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to parse timeout short option #%zu (=%d)\n"	pointer
)	O
,	O
__func__	O
,	O
it	int
,	O
config	struct
.	O
dns_timeout	int
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
static	O
struct	O
{	O
const	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
int	O
result	char
;	O
}	O
test_timeout	array
[	O
]	O
=	O
{	O
{	O
{	O
""	pointer
,	O
"--timeout"	pointer
,	O
"123"	pointer
}	O
,	O
123000	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout"	pointer
,	O
"-1"	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout"	pointer
,	O
"inf"	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout"	pointer
,	O
"infinity"	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout"	pointer
,	O
"0"	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout"	pointer
,	O
"+123"	pointer
}	O
,	O
123000	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout"	pointer
,	O
"60.2"	pointer
}	O
,	O
60200	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout=123"	pointer
,	O
""	pointer
}	O
,	O
123000	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout=-1"	pointer
,	O
""	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout=inf"	pointer
,	O
""	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout=infinity"	pointer
,	O
""	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout=0"	pointer
,	O
""	pointer
}	O
,	O
-	O
1	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout=+123"	pointer
,	O
""	pointer
}	O
,	O
123000	int
}	O
,	O
{	O
{	O
""	pointer
,	O
"--timeout=60.2"	pointer
,	O
""	pointer
}	O
,	O
60200	int
}	O
}	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
test_timeout	array
)	O
;	O
it	int
++	O
)	O
{	O
config	struct
.	O
dns_timeout	int
=	O
555	int
;	O
parse_command_line	function
(	O
3	int
,	O
test_timeout	array
[	O
it	int
]	O
.	O
argv	pointer
)	O
;	O
if	O
(	O
config	struct
.	O
dns_timeout	int
!=	O
test_timeout	array
[	O
it	int
]	O
.	O
result	char
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to parse timeout long option #%zu (%d)\n"	pointer
)	O
,	O
__func__	O
,	O
it	int
,	O
config	struct
.	O
dns_timeout	int
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
config	struct
.	O
dns_timeout	int
=	O
dns_timeout	int
;	O
config	struct
.	O
connect_timeout	int
=	O
connect_timeout	int
;	O
config	struct
.	O
read_timeout	int
=	O
read_timeout	int
;	O
}	O
{	O
static	O
struct	O
{	O
const	O
char	O
*	O
argv	pointer
[	O
5	int
]	O
;	O
const	O
char	O
*	O
result	char
[	O
2	int
]	O
;	O
}	O
test_header	array
[	O
]	O
=	O
{	O
{	O
{	O
""	pointer
,	O
"--header"	pointer
,	O
"Hello: World"	pointer
,	O
""	pointer
,	O
""	pointer
}	O
,	O
{	O
"Hello"	pointer
,	O
"World"	pointer
}	O
}	O
,	O
{	O
{	O
""	pointer
,	O
"--header=Hello: World"	pointer
,	O
"--header"	pointer
,	O
""	pointer
,	O
""	pointer
}	O
,	O
{	O
NULL	O
,	O
NULL	O
}	O
}	O
,	O
{	O
{	O
""	pointer
,	O
"--header=Hello: World"	pointer
,	O
"--header"	pointer
,	O
""	pointer
,	O
"--header=Test: Passed"	pointer
}	O
,	O
{	O
"Test"	pointer
,	O
"Passed"	pointer
}	O
}	O
,	O
}	O
;	O
wget_vector_clear	function
(	O
config	struct
.	O
headers	pointer
)	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
test_header	array
)	O
;	O
it	int
++	O
)	O
{	O
const	O
char	O
*	O
res_name	pointer
=	O
test_header	array
[	O
it	int
]	O
.	O
result	char
[	O
0	int
]	O
;	O
const	O
char	O
*	O
res_value	pointer
=	O
test_header	array
[	O
it	int
]	O
.	O
result	char
[	O
1	int
]	O
;	O
parse_command_line	function
(	O
5	int
,	O
test_header	array
[	O
it	int
]	O
.	O
argv	pointer
)	O
;	O
wget_http_header_param	struct
*	O
config_value	pointer
=	O
wget_vector_get	function
(	O
config	struct
.	O
headers	pointer
,	O
0	int
)	O
;	O
if	O
(	O
res_name	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
wget_vector_size	function
(	O
config	struct
.	O
headers	pointer
)	O
!=	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Extra headers found in option #%zu\n"	pointer
)	O
,	O
__func__	O
,	O
it	int
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
wget_strcmp	function
(	O
config_value	pointer
->	O
name	pointer
,	O
res_name	pointer
)	O
&&	O
wget_strcmp	function
(	O
config_value	pointer
->	O
value	pointer
,	O
res_value	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to parse header option #%zu\n"	pointer
)	O
,	O
__func__	O
,	O
it	int
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
static	O
struct	O
{	O
const	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
}	O
test_header_illegal	array
[	O
]	O
=	O
{	O
{	O
{	O
""	pointer
,	O
"--header"	pointer
,	O
"Hello World"	pointer
}	O
}	O
,	O
{	O
{	O
""	pointer
,	O
"--header"	pointer
,	O
"Hello:"	pointer
}	O
}	O
,	O
{	O
{	O
""	pointer
,	O
"--header"	pointer
,	O
"Hello:  "	pointer
}	O
}	O
,	O
{	O
{	O
""	pointer
,	O
"--header"	pointer
,	O
":World"	pointer
}	O
}	O
,	O
{	O
{	O
""	pointer
,	O
"--header"	pointer
,	O
":"	pointer
}	O
}	O
,	O
}	O
;	O
wget_vector_clear	function
(	O
config	struct
.	O
headers	pointer
)	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
test_header_illegal	array
)	O
;	O
it	int
++	O
)	O
{	O
parse_command_line	function
(	O
3	int
,	O
test_header_illegal	array
[	O
it	int
]	O
.	O
argv	pointer
)	O
;	O
if	O
(	O
wget_vector_size	function
(	O
config	struct
.	O
headers	pointer
)	O
!=	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Accepted illegal header option #%zu\n"	pointer
)	O
,	O
__func__	O
,	O
it	int
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
wget_vector_clear	function
(	O
config	struct
.	O
headers	pointer
)	O
;	O
}	O
{	O
static	O
struct	O
{	O
const	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
const	O
char	O
*	O
result	char
;	O
}	O
test_string_short	array
[	O
]	O
=	O
{	O
{	O
{	O
""	pointer
,	O
"-U"	pointer
,	O
"hello1"	pointer
}	O
,	O
"hello1"	pointer
}	O
,	O
{	O
{	O
""	pointer
,	O
"-Uhello2"	pointer
,	O
""	pointer
}	O
,	O
"hello2"	pointer
}	O
}	O
;	O
const	O
char	O
*	O
user_agent	pointer
=	O
config	struct
.	O
user_agent	pointer
;	O
config	struct
.	O
user_agent	pointer
=	O
NULL	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
test_string_short	array
)	O
;	O
it	int
++	O
)	O
{	O
parse_command_line	function
(	O
3	int
,	O
test_string_short	array
[	O
it	int
]	O
.	O
argv	pointer
)	O
;	O
if	O
(	O
wget_strcmp	function
(	O
config	struct
.	O
user_agent	pointer
,	O
test_string_short	array
[	O
it	int
]	O
.	O
result	char
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to parse string short option #%zu (=%s)\n"	pointer
)	O
,	O
__func__	O
,	O
it	int
,	O
config	struct
.	O
user_agent	pointer
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
static	O
struct	O
{	O
const	O
char	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
const	O
char	O
*	O
result	char
;	O
}	O
test_string	array
[	O
]	O
=	O
{	O
{	O
{	O
""	pointer
,	O
"--user-agent"	pointer
,	O
"hello3"	pointer
}	O
,	O
"hello3"	pointer
}	O
,	O
{	O
{	O
""	pointer
,	O
"--user-agent=hello4"	pointer
,	O
""	pointer
}	O
,	O
"hello4"	pointer
}	O
,	O
{	O
{	O
""	pointer
,	O
"--no-user-agent"	pointer
,	O
""	pointer
}	O
,	O
NULL	O
}	O
}	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
countof	O
(	O
test_string	array
)	O
;	O
it	int
++	O
)	O
{	O
parse_command_line	function
(	O
3	int
,	O
test_string	array
[	O
it	int
]	O
.	O
argv	pointer
)	O
;	O
if	O
(	O
wget_strcmp	function
(	O
config	struct
.	O
user_agent	pointer
,	O
test_string	array
[	O
it	int
]	O
.	O
result	char
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to parse string short option #%zu (=%s)\n"	pointer
)	O
,	O
__func__	O
,	O
it	int
,	O
config	struct
.	O
user_agent	pointer
)	O
;	O
ret	pointer
=	O
1	int
;	O
}	O
}	O
xfree	O
(	O
config	struct
.	O
user_agent	pointer
)	O
;	O
config	struct
.	O
user_agent	pointer
=	O
user_agent	pointer
;	O
}	O
return	O
ret	pointer
;	O
}	O
WGET_GCC_NORETURN	O
static	O
void	O
no_memory	function
(	O
void	O
)	O
{	O
fputs	function
(	O
"No memory\n"	pointer
,	O
stderr	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
WGET_GCC_RETURNS_NONNULL	O
static	O
void	O
*	O
my_malloc	function
(	O
size_t	long
size	pointer
)	O
{	O
void	O
*	O
p	pointer
=	O
malloc	function
(	O
size	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
return	O
p	pointer
;	O
no_memory	function
(	O
)	O
;	O
}	O
WGET_GCC_RETURNS_NONNULL	O
static	O
void	O
*	O
my_calloc	function
(	O
size_t	long
nmemb	long
,	O
size_t	long
size	pointer
)	O
{	O
void	O
*	O
p	pointer
=	O
calloc	function
(	O
nmemb	long
,	O
size	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
return	O
p	pointer
;	O
no_memory	function
(	O
)	O
;	O
}	O
WGET_GCC_RETURNS_NONNULL	O
static	O
void	O
*	O
my_realloc	function
(	O
void	O
*	O
ptr	pointer
,	O
size_t	long
size	pointer
)	O
{	O
void	O
*	O
p	pointer
=	O
realloc	function
(	O
ptr	pointer
,	O
size	pointer
)	O
;	O
if	O
(	O
p	pointer
||	O
(	O
ptr	pointer
&&	O
size	pointer
==	O
0	int
)	O
)	O
return	O
p	pointer
;	O
no_memory	function
(	O
)	O
;	O
}	O
static	O
void	O
my_free	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
free	function
(	O
ptr	pointer
)	O
;	O
}	O
static	O
void	O
set_allocation_functions	function
(	O
void	O
)	O
{	O
wget_malloc_fn	pointer
=	O
my_malloc	function
;	O
wget_calloc_fn	pointer
=	O
my_calloc	function
;	O
wget_realloc_fn	pointer
=	O
my_realloc	function
;	O
wget_free	pointer
=	O
my_free	function
;	O
}	O
