static	O
int	O
sub_msgno_last	function
(	O
mu_msgset_t	pointer
mset	pointer
,	O
size_t	long
beg	long
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_msgrange	struct
*	O
range	pointer
;	O
if	O
(	O
beg	long
==	O
1	int
)	O
mu_list_clear	function
(	O
mset	pointer
->	O
list	pointer
)	O
;	O
else	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
rc	int
=	O
mu_list_get_iterator	function
(	O
mset	pointer
->	O
list	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
1	int
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_set_direction	int
,	O
&	O
rc	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
rc	int
==	O
0	int
&&	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
range	pointer
)	O
;	O
if	O
(	O
range	pointer
->	O
msg_beg	long
>	O
beg	long
)	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
else	O
if	O
(	O
range	pointer
->	O
msg_beg	long
==	O
beg	long
)	O
{	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
break	O
;	O
}	O
else	O
break	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_msgset_sub_range	function
(	O
mu_msgset_t	pointer
mset	pointer
,	O
size_t	long
beg	long
,	O
size_t	long
end	long
,	O
int	O
mode	int
)	O
{	O
int	O
rc	int
;	O
mu_iterator_t	pointer
itr	pointer
;	O
struct	O
mu_msgrange	struct
*	O
mr	pointer
;	O
if	O
(	O
!	O
mset	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_list_is_empty	function
(	O
mset	pointer
->	O
list	pointer
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
end	long
&&	O
beg	long
>	O
end	long
)	O
{	O
size_t	long
t	long
=	O
end	long
;	O
end	long
=	O
beg	long
;	O
beg	long
=	O
t	long
;	O
}	O
if	O
(	O
mode	int
!=	O
_MU_MSGSET_MODE	O
(	O
mset	pointer
->	O
flags	int
)	O
)	O
{	O
rc	int
=	O
_mu_msgset_translate_pair	function
(	O
mset	pointer
,	O
_MU_MSGSET_MODE	O
(	O
mset	pointer
->	O
flags	int
)	O
,	O
&	O
beg	long
,	O
&	O
end	long
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
return	O
0	int
;	O
else	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_msgset_aggregate	function
(	O
mset	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
end	long
==	O
MU_MSGNO_LAST	int
)	O
return	O
sub_msgno_last	function
(	O
mset	pointer
,	O
beg	long
)	O
;	O
rc	int
=	O
mu_list_head	function
(	O
mset	pointer
->	O
list	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
end	long
<	O
mr	pointer
->	O
msg_beg	long
)	O
return	O
0	int
;	O
if	O
(	O
beg	long
<	O
mr	pointer
->	O
msg_beg	long
)	O
beg	long
=	O
mr	pointer
->	O
msg_beg	long
;	O
rc	int
=	O
mu_list_tail	function
(	O
mset	pointer
->	O
list	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mr	pointer
)	O
;	O
if	O
(	O
mr	pointer
->	O
msg_end	long
!=	O
MU_MSGNO_LAST	int
)	O
{	O
if	O
(	O
beg	long
>	O
mr	pointer
->	O
msg_end	long
)	O
return	O
0	int
;	O
if	O
(	O
end	long
>	O
mr	pointer
->	O
msg_end	long
)	O
end	long
=	O
mr	pointer
->	O
msg_end	long
;	O
}	O
rc	int
=	O
mu_list_get_iterator	function
(	O
mset	pointer
->	O
list	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
rc	int
==	O
0	int
&&	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mr	pointer
)	O
;	O
if	O
(	O
mr	pointer
->	O
msg_end	long
==	O
MU_MSGNO_LAST	int
)	O
{	O
if	O
(	O
mr	pointer
->	O
msg_beg	long
==	O
beg	long
)	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
else	O
if	O
(	O
mr	pointer
->	O
msg_beg	long
>	O
beg	long
)	O
mr	pointer
->	O
msg_beg	long
=	O
end	long
+	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
mr	pointer
->	O
msg_beg	long
==	O
beg	long
&&	O
mr	pointer
->	O
msg_end	long
==	O
end	long
)	O
{	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
mr	pointer
->	O
msg_beg	long
<=	O
beg	long
&&	O
beg	long
<=	O
mr	pointer
->	O
msg_end	long
)	O
{	O
if	O
(	O
mr	pointer
->	O
msg_beg	long
<=	O
end	long
&&	O
end	long
<=	O
mr	pointer
->	O
msg_end	long
)	O
{	O
if	O
(	O
end	long
!=	O
mr	pointer
->	O
msg_end	long
)	O
{	O
struct	O
mu_msgrange	struct
*	O
newrange	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
newrange	pointer
)	O
)	O
;	O
if	O
(	O
!	O
newrange	pointer
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
newrange	pointer
->	O
msg_beg	long
=	O
end	long
+	O
1	int
;	O
newrange	pointer
->	O
msg_end	long
=	O
mr	pointer
->	O
msg_end	long
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_insert	int
,	O
newrange	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
newrange	pointer
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
mr	pointer
->	O
msg_beg	long
==	O
beg	long
)	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
else	O
mr	pointer
->	O
msg_end	long
=	O
beg	long
-	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
mr	pointer
->	O
msg_beg	long
==	O
beg	long
)	O
{	O
beg	long
=	O
mr	pointer
->	O
msg_end	long
;	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
size_t	long
n	long
=	O
mr	pointer
->	O
msg_end	long
;	O
mr	pointer
->	O
msg_end	long
=	O
beg	long
-	O
1	int
;	O
beg	long
=	O
n	long
;	O
}	O
}	O
else	O
if	O
(	O
mr	pointer
->	O
msg_beg	long
<=	O
end	long
&&	O
end	long
<=	O
mr	pointer
->	O
msg_end	long
)	O
{	O
mr	pointer
->	O
msg_beg	long
=	O
end	long
+	O
1	int
;	O
if	O
(	O
mr	pointer
->	O
msg_beg	long
>=	O
mr	pointer
->	O
msg_end	long
)	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
beg	long
<=	O
mr	pointer
->	O
msg_beg	long
&&	O
mr	pointer
->	O
msg_beg	long
<=	O
end	long
)	O
{	O
rc	int
=	O
mu_iterator_ctl	function
(	O
itr	pointer
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
