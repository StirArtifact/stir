extern	O
enum	O
ld_plugin_status	enum
onload	function
(	O
struct	O
ld_plugin_tv	struct
*	O
tv	pointer
)	O
;	O
static	O
enum	O
ld_plugin_status	enum
onclaim_file	function
(	O
const	O
struct	O
ld_plugin_input_file	struct
*	O
file	pointer
,	O
int	O
*	O
claimed	pointer
)	O
;	O
static	O
enum	O
ld_plugin_status	enum
onall_symbols_read	function
(	O
void	O
)	O
;	O
static	O
enum	O
ld_plugin_status	enum
oncleanup	function
(	O
void	O
)	O
;	O
typedef	O
struct	O
claim_file	struct
{	O
struct	O
claim_file	struct
*	O
next	pointer
;	O
struct	O
ld_plugin_input_file	struct
file	pointer
;	O
bfd_boolean	int
claimed	pointer
;	O
struct	O
ld_plugin_symbol	struct
*	O
symbols	pointer
;	O
int	O
n_syms_allocated	int
;	O
int	O
n_syms_used	int
;	O
}	O
claim_file_t	struct
;	O
typedef	O
enum	O
addfile_enum	enum
{	O
ADD_FILE	int
,	O
ADD_LIB	int
,	O
ADD_DIR	int
}	O
addfile_enum_t	enum
;	O
typedef	O
struct	O
add_file	struct
{	O
struct	O
add_file	struct
*	O
next	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
addfile_enum_t	enum
type	enum
;	O
}	O
add_file_t	struct
;	O
typedef	O
struct	O
tag_name	struct
{	O
enum	O
ld_plugin_tag	enum
tag	enum
;	O
const	O
char	O
*	O
name	pointer
;	O
}	O
tag_name_t	struct
;	O
static	O
const	O
tag_name_t	struct
tag_names	array
[	O
]	O
=	O
{	O
ADDENTRY	O
(	O
LDPT_NULL	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_API_VERSION	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_GOLD_VERSION	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_LINKER_OUTPUT	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_OPTION	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_REGISTER_CLAIM_FILE_HOOK	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_REGISTER_CLEANUP_HOOK	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_ADD_SYMBOLS	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_GET_SYMBOLS	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_GET_SYMBOLS_V2	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_ADD_INPUT_FILE	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_MESSAGE	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_GET_INPUT_FILE	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_GET_VIEW	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_RELEASE_INPUT_FILE	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_ADD_INPUT_LIBRARY	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_OUTPUT_NAME	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_SET_EXTRA_LIBRARY_PATH	int
)	O
,	O
ADDENTRY	O
(	O
LDPT_GNU_LD_VERSION	int
)	O
}	O
;	O
static	O
ld_plugin_register_claim_file	pointer
tv_register_claim_file	pointer
=	O
0	int
;	O
static	O
ld_plugin_register_all_symbols_read	pointer
tv_register_all_symbols_read	pointer
=	O
0	int
;	O
static	O
ld_plugin_register_cleanup	pointer
tv_register_cleanup	pointer
=	O
0	int
;	O
static	O
ld_plugin_add_symbols	pointer
tv_add_symbols	pointer
=	O
0	int
;	O
static	O
ld_plugin_get_symbols	pointer
tv_get_symbols	pointer
=	O
0	int
;	O
static	O
ld_plugin_get_symbols	pointer
tv_get_symbols_v2	pointer
=	O
0	int
;	O
static	O
ld_plugin_add_input_file	pointer
tv_add_input_file	pointer
=	O
0	int
;	O
static	O
ld_plugin_message	pointer
tv_message	pointer
=	O
0	int
;	O
static	O
ld_plugin_get_input_file	pointer
tv_get_input_file	pointer
=	O
0	int
;	O
static	O
ld_plugin_get_view	pointer
tv_get_view	pointer
=	O
0	int
;	O
static	O
ld_plugin_release_input_file	pointer
tv_release_input_file	pointer
=	O
0	int
;	O
static	O
ld_plugin_add_input_library	pointer
tv_add_input_library	pointer
=	O
0	int
;	O
static	O
ld_plugin_set_extra_library_path	pointer
tv_set_extra_library_path	pointer
=	O
0	int
;	O
static	O
enum	O
ld_plugin_output_file_type	enum
linker_output	enum
;	O
static	O
const	O
char	O
*	O
output_name	pointer
;	O
static	O
enum	O
ld_plugin_status	enum
onload_ret	enum
=	O
LDPS_OK	int
;	O
static	O
enum	O
ld_plugin_status	enum
claim_file_ret	enum
=	O
LDPS_OK	int
;	O
static	O
enum	O
ld_plugin_status	enum
all_symbols_read_ret	enum
=	O
LDPS_OK	int
;	O
static	O
enum	O
ld_plugin_status	enum
cleanup_ret	enum
=	O
LDPS_OK	int
;	O
static	O
bfd_boolean	int
register_claimfile_hook	int
=	O
TRUE	int
;	O
static	O
bfd_boolean	int
register_allsymbolsread_hook	int
=	O
FALSE	int
;	O
static	O
bfd_boolean	int
register_cleanup_hook	int
=	O
FALSE	int
;	O
static	O
bfd_boolean	int
dumpresolutions	int
=	O
FALSE	int
;	O
static	O
claim_file_t	struct
*	O
claimfiles_list	pointer
=	O
NULL	O
;	O
static	O
claim_file_t	struct
*	O
*	O
claimfiles_tail_chain_ptr	pointer
=	O
&	O
claimfiles_list	pointer
;	O
static	O
claim_file_t	struct
*	O
last_claimfile	pointer
=	O
NULL	O
;	O
static	O
add_file_t	struct
*	O
addfiles_list	pointer
=	O
NULL	O
;	O
static	O
add_file_t	struct
*	O
*	O
addfiles_tail_chain_ptr	pointer
=	O
&	O
addfiles_list	pointer
;	O
static	O
enum	O
ld_plugin_status	enum
record_claim_file	function
(	O
const	O
char	O
*	O
file	pointer
,	O
off_t	long
filesize	long
)	O
{	O
claim_file_t	struct
*	O
newfile	pointer
;	O
newfile	pointer
=	O
malloc	function
(	O
sizeof	O
*	O
newfile	pointer
)	O
;	O
if	O
(	O
!	O
newfile	pointer
)	O
return	O
LDPS_ERR	int
;	O
memset	function
(	O
newfile	pointer
,	O
0	int
,	O
sizeof	O
*	O
newfile	pointer
)	O
;	O
newfile	pointer
->	O
file	pointer
.	O
name	pointer
=	O
file	pointer
;	O
newfile	pointer
->	O
file	pointer
.	O
filesize	long
=	O
filesize	long
;	O
*	O
claimfiles_tail_chain_ptr	pointer
=	O
newfile	pointer
;	O
claimfiles_tail_chain_ptr	pointer
=	O
&	O
newfile	pointer
->	O
next	pointer
;	O
last_claimfile	pointer
=	O
newfile	pointer
;	O
return	O
LDPS_OK	int
;	O
}	O
static	O
enum	O
ld_plugin_status	enum
record_add_file	function
(	O
const	O
char	O
*	O
file	pointer
,	O
addfile_enum_t	enum
type	enum
)	O
{	O
add_file_t	struct
*	O
newfile	pointer
;	O
newfile	pointer
=	O
malloc	function
(	O
sizeof	O
*	O
newfile	pointer
)	O
;	O
if	O
(	O
!	O
newfile	pointer
)	O
return	O
LDPS_ERR	int
;	O
newfile	pointer
->	O
next	pointer
=	O
NULL	O
;	O
newfile	pointer
->	O
name	pointer
=	O
file	pointer
;	O
newfile	pointer
->	O
type	enum
=	O
type	enum
;	O
*	O
addfiles_tail_chain_ptr	pointer
=	O
newfile	pointer
;	O
addfiles_tail_chain_ptr	pointer
=	O
&	O
newfile	pointer
->	O
next	pointer
;	O
return	O
LDPS_OK	int
;	O
}	O
static	O
enum	O
ld_plugin_status	enum
parse_symdefstr	function
(	O
const	O
char	O
*	O
str	pointer
,	O
struct	O
ld_plugin_symbol	struct
*	O
sym	pointer
)	O
{	O
int	O
n	long
;	O
long	O
long	O
size	int
;	O
const	O
char	O
*	O
colon1	pointer
,	O
*	O
colon2	pointer
,	O
*	O
colon5	pointer
;	O
colon1	pointer
=	O
strchr	function
(	O
str	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
colon1	pointer
)	O
return	O
LDPS_ERR	int
;	O
colon2	pointer
=	O
strchr	function
(	O
colon1	pointer
+	O
1	int
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
colon2	pointer
)	O
return	O
LDPS_ERR	int
;	O
if	O
(	O
colon1	pointer
==	O
str	pointer
)	O
return	O
LDPS_ERR	int
;	O
colon5	pointer
=	O
strchr	function
(	O
colon2	pointer
+	O
1	int
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
colon5	pointer
)	O
return	O
LDPS_ERR	int
;	O
colon5	pointer
=	O
strchr	function
(	O
colon5	pointer
+	O
1	int
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
colon5	pointer
)	O
return	O
LDPS_ERR	int
;	O
colon5	pointer
=	O
strchr	function
(	O
colon5	pointer
+	O
1	int
,	O
':'	O
)	O
;	O
n	long
=	O
sscanf	function
(	O
colon2	pointer
+	O
1	int
,	O
"%i:%i:%lli"	pointer
,	O
&	O
sym	pointer
->	O
def	int
,	O
&	O
sym	pointer
->	O
visibility	int
,	O
&	O
size	int
)	O
;	O
if	O
(	O
n	long
!=	O
3	int
)	O
return	O
LDPS_ERR	int
;	O
sym	pointer
->	O
size	int
=	O
size	int
;	O
sym	pointer
->	O
resolution	int
=	O
LDPR_UNKNOWN	int
;	O
sym	pointer
->	O
name	pointer
=	O
malloc	function
(	O
colon1	pointer
-	O
str	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
sym	pointer
->	O
name	pointer
)	O
return	O
LDPS_ERR	int
;	O
memcpy	function
(	O
sym	pointer
->	O
name	pointer
,	O
str	pointer
,	O
colon1	pointer
-	O
str	pointer
)	O
;	O
sym	pointer
->	O
name	pointer
[	O
colon1	pointer
-	O
str	pointer
]	O
=	O
'\0'	O
;	O
if	O
(	O
colon2	pointer
>	O
(	O
colon1	pointer
+	O
1	int
)	O
)	O
{	O
sym	pointer
->	O
version	pointer
=	O
malloc	function
(	O
colon2	pointer
-	O
colon1	pointer
)	O
;	O
if	O
(	O
!	O
sym	pointer
->	O
version	pointer
)	O
return	O
LDPS_ERR	int
;	O
memcpy	function
(	O
sym	pointer
->	O
version	pointer
,	O
colon1	pointer
+	O
1	int
,	O
colon2	pointer
-	O
(	O
colon1	pointer
+	O
1	int
)	O
)	O
;	O
sym	pointer
->	O
version	pointer
[	O
colon2	pointer
-	O
(	O
colon1	pointer
+	O
1	int
)	O
]	O
=	O
'\0'	O
;	O
}	O
else	O
sym	pointer
->	O
version	pointer
=	O
NULL	O
;	O
if	O
(	O
colon5	pointer
&&	O
colon5	pointer
[	O
1	int
]	O
)	O
{	O
sym	pointer
->	O
comdat_key	pointer
=	O
malloc	function
(	O
strlen	function
(	O
colon5	pointer
+	O
1	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
sym	pointer
->	O
comdat_key	pointer
)	O
return	O
LDPS_ERR	int
;	O
strcpy	function
(	O
sym	pointer
->	O
comdat_key	pointer
,	O
colon5	pointer
+	O
1	int
)	O
;	O
}	O
else	O
sym	pointer
->	O
comdat_key	pointer
=	O
0	int
;	O
return	O
LDPS_OK	int
;	O
}	O
static	O
enum	O
ld_plugin_status	enum
record_claimed_file_symbol	function
(	O
const	O
char	O
*	O
symdefstr	pointer
)	O
{	O
struct	O
ld_plugin_symbol	struct
sym	pointer
;	O
if	O
(	O
!	O
last_claimfile	pointer
)	O
return	O
LDPS_ERR	int
;	O
if	O
(	O
parse_symdefstr	function
(	O
symdefstr	pointer
,	O
&	O
sym	pointer
)	O
!=	O
LDPS_OK	int
)	O
return	O
LDPS_ERR	int
;	O
if	O
(	O
last_claimfile	pointer
->	O
n_syms_allocated	int
==	O
last_claimfile	pointer
->	O
n_syms_used	int
)	O
{	O
int	O
new_n_syms	int
=	O
last_claimfile	pointer
->	O
n_syms_allocated	int
?	O
2	int
*	O
last_claimfile	pointer
->	O
n_syms_allocated	int
:	O
10	int
;	O
last_claimfile	pointer
->	O
symbols	pointer
=	O
realloc	function
(	O
last_claimfile	pointer
->	O
symbols	pointer
,	O
new_n_syms	int
*	O
sizeof	O
*	O
last_claimfile	pointer
->	O
symbols	pointer
)	O
;	O
if	O
(	O
!	O
last_claimfile	pointer
->	O
symbols	pointer
)	O
return	O
LDPS_ERR	int
;	O
last_claimfile	pointer
->	O
n_syms_allocated	int
=	O
new_n_syms	int
;	O
}	O
last_claimfile	pointer
->	O
symbols	pointer
[	O
last_claimfile	pointer
->	O
n_syms_used	int
++	O
]	O
=	O
sym	pointer
;	O
return	O
LDPS_OK	int
;	O
}	O
static	O
enum	O
ld_plugin_status	enum
set_ret_val	function
(	O
const	O
char	O
*	O
whichval	pointer
,	O
enum	O
ld_plugin_status	enum
retval	enum
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
"onload"	pointer
,	O
whichval	pointer
)	O
)	O
onload_ret	enum
=	O
retval	enum
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
"claimfile"	pointer
,	O
whichval	pointer
)	O
)	O
claim_file_ret	enum
=	O
retval	enum
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
"allsymbolsread"	pointer
,	O
whichval	pointer
)	O
)	O
all_symbols_read_ret	enum
=	O
retval	enum
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
"cleanup"	pointer
,	O
whichval	pointer
)	O
)	O
cleanup_ret	enum
=	O
retval	enum
;	O
else	O
return	O
LDPS_ERR	int
;	O
return	O
LDPS_OK	int
;	O
}	O
static	O
enum	O
ld_plugin_status	enum
set_register_hook	function
(	O
const	O
char	O
*	O
whichhook	pointer
,	O
bfd_boolean	int
yesno	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
"claimfile"	pointer
,	O
whichhook	pointer
)	O
)	O
register_claimfile_hook	int
=	O
yesno	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
"allsymbolsread"	pointer
,	O
whichhook	pointer
)	O
)	O
register_allsymbolsread_hook	int
=	O
yesno	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
"cleanup"	pointer
,	O
whichhook	pointer
)	O
)	O
register_cleanup_hook	int
=	O
yesno	int
;	O
else	O
return	O
LDPS_ERR	int
;	O
return	O
LDPS_OK	int
;	O
}	O
static	O
enum	O
ld_plugin_status	enum
parse_option	function
(	O
const	O
char	O
*	O
opt	pointer
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
"fail"	pointer
,	O
opt	pointer
,	O
4	int
)	O
)	O
return	O
set_ret_val	function
(	O
opt	pointer
+	O
4	int
,	O
LDPS_ERR	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
"pass"	pointer
,	O
opt	pointer
,	O
4	int
)	O
)	O
return	O
set_ret_val	function
(	O
opt	pointer
+	O
4	int
,	O
LDPS_OK	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
"register"	pointer
,	O
opt	pointer
,	O
8	int
)	O
)	O
return	O
set_register_hook	function
(	O
opt	pointer
+	O
8	int
,	O
TRUE	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
"noregister"	pointer
,	O
opt	pointer
,	O
10	int
)	O
)	O
return	O
set_register_hook	function
(	O
opt	pointer
+	O
10	int
,	O
FALSE	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
"claim:"	pointer
,	O
opt	pointer
,	O
6	int
)	O
)	O
return	O
record_claim_file	function
(	O
opt	pointer
+	O
6	int
,	O
0	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
"sym:"	pointer
,	O
opt	pointer
,	O
4	int
)	O
)	O
return	O
record_claimed_file_symbol	function
(	O
opt	pointer
+	O
4	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
"add:"	pointer
,	O
opt	pointer
,	O
4	int
)	O
)	O
return	O
record_add_file	function
(	O
opt	pointer
+	O
4	int
,	O
ADD_FILE	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
"lib:"	pointer
,	O
opt	pointer
,	O
4	int
)	O
)	O
return	O
record_add_file	function
(	O
opt	pointer
+	O
4	int
,	O
ADD_LIB	int
)	O
;	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
"dir:"	pointer
,	O
opt	pointer
,	O
4	int
)	O
)	O
return	O
record_add_file	function
(	O
opt	pointer
+	O
4	int
,	O
ADD_DIR	int
)	O
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
"dumpresolutions"	pointer
,	O
opt	pointer
)	O
)	O
dumpresolutions	int
=	O
TRUE	int
;	O
else	O
return	O
LDPS_ERR	int
;	O
return	O
LDPS_OK	int
;	O
}	O
static	O
enum	O
ld_plugin_status	enum
parse_tv_tag	function
(	O
struct	O
ld_plugin_tv	struct
*	O
tv	pointer
)	O
{	O
switch	O
(	O
tv	pointer
->	O
tv_tag	enum
)	O
{	O
case	O
LDPT_OPTION	int
:	O
return	O
parse_option	function
(	O
tv	pointer
->	O
tv_u	union
.	O
tv_string	pointer
)	O
;	O
case	O
LDPT_NULL	int
:	O
case	O
LDPT_GOLD_VERSION	int
:	O
case	O
LDPT_GNU_LD_VERSION	int
:	O
case	O
LDPT_API_VERSION	int
:	O
default	O
:	O
break	O
;	O
case	O
LDPT_OUTPUT_NAME	int
:	O
output_name	pointer
=	O
tv	pointer
->	O
tv_u	union
.	O
tv_string	pointer
;	O
break	O
;	O
case	O
LDPT_LINKER_OUTPUT	int
:	O
linker_output	enum
=	O
tv	pointer
->	O
tv_u	union
.	O
tv_val	int
;	O
break	O
;	O
case	O
LDPT_REGISTER_CLAIM_FILE_HOOK	int
:	O
SETVAR	O
(	O
tv_register_claim_file	pointer
)	O
;	O
break	O
;	O
case	O
LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK	int
:	O
SETVAR	O
(	O
tv_register_all_symbols_read	pointer
)	O
;	O
break	O
;	O
case	O
LDPT_REGISTER_CLEANUP_HOOK	int
:	O
SETVAR	O
(	O
tv_register_cleanup	pointer
)	O
;	O
break	O
;	O
case	O
LDPT_ADD_SYMBOLS	int
:	O
SETVAR	O
(	O
tv_add_symbols	pointer
)	O
;	O
break	O
;	O
case	O
LDPT_GET_SYMBOLS	int
:	O
SETVAR	O
(	O
tv_get_symbols	pointer
)	O
;	O
break	O
;	O
case	O
LDPT_GET_SYMBOLS_V2	int
:	O
tv_get_symbols_v2	pointer
=	O
tv	pointer
->	O
tv_u	union
.	O
tv_get_symbols	pointer
;	O
break	O
;	O
case	O
LDPT_ADD_INPUT_FILE	int
:	O
SETVAR	O
(	O
tv_add_input_file	pointer
)	O
;	O
break	O
;	O
case	O
LDPT_MESSAGE	int
:	O
SETVAR	O
(	O
tv_message	pointer
)	O
;	O
break	O
;	O
case	O
LDPT_GET_INPUT_FILE	int
:	O
SETVAR	O
(	O
tv_get_input_file	pointer
)	O
;	O
break	O
;	O
case	O
LDPT_GET_VIEW	int
:	O
SETVAR	O
(	O
tv_get_view	pointer
)	O
;	O
break	O
;	O
case	O
LDPT_RELEASE_INPUT_FILE	int
:	O
SETVAR	O
(	O
tv_release_input_file	pointer
)	O
;	O
break	O
;	O
case	O
LDPT_ADD_INPUT_LIBRARY	int
:	O
SETVAR	O
(	O
tv_add_input_library	pointer
)	O
;	O
break	O
;	O
case	O
LDPT_SET_EXTRA_LIBRARY_PATH	int
:	O
SETVAR	O
(	O
tv_set_extra_library_path	pointer
)	O
;	O
break	O
;	O
}	O
return	O
LDPS_OK	int
;	O
}	O
enum	O
ld_plugin_status	enum
onload	function
(	O
struct	O
ld_plugin_tv	struct
*	O
tv	pointer
)	O
{	O
enum	O
ld_plugin_status	enum
rv	enum
;	O
if	O
(	O
!	O
tv	pointer
)	O
return	O
LDPS_ERR	int
;	O
if	O
(	O
tv	pointer
[	O
0	int
]	O
.	O
tv_tag	enum
==	O
LDPT_MESSAGE	int
)	O
tv_message	pointer
=	O
tv	pointer
[	O
0	int
]	O
.	O
tv_u	union
.	O
tv_message	pointer
;	O
do	O
if	O
(	O
(	O
rv	enum
=	O
parse_tv_tag	function
(	O
tv	pointer
)	O
)	O
!=	O
LDPS_OK	int
)	O
return	O
rv	enum
;	O
while	O
(	O
(	O
tv	pointer
++	O
)	O
->	O
tv_tag	enum
!=	O
LDPT_NULL	int
)	O
;	O
if	O
(	O
register_claimfile_hook	int
)	O
{	O
if	O
(	O
!	O
tv_register_claim_file	pointer
)	O
{	O
TV_MESSAGE	O
(	O
LDPL_FATAL	int
,	O
"No register_claim_file hook"	pointer
)	O
;	O
fflush	function
(	O
NULL	O
)	O
;	O
return	O
LDPS_ERR	int
;	O
}	O
(	O
*	O
tv_register_claim_file	pointer
)	O
(	O
onclaim_file	function
)	O
;	O
}	O
if	O
(	O
register_allsymbolsread_hook	int
)	O
{	O
if	O
(	O
!	O
tv_register_all_symbols_read	pointer
)	O
{	O
TV_MESSAGE	O
(	O
LDPL_FATAL	int
,	O
"No register_all_symbols_read hook"	pointer
)	O
;	O
fflush	function
(	O
NULL	O
)	O
;	O
return	O
LDPS_ERR	int
;	O
}	O
(	O
*	O
tv_register_all_symbols_read	pointer
)	O
(	O
onall_symbols_read	function
)	O
;	O
}	O
if	O
(	O
register_cleanup_hook	int
)	O
{	O
if	O
(	O
!	O
tv_register_cleanup	pointer
)	O
{	O
TV_MESSAGE	O
(	O
LDPL_FATAL	int
,	O
"No register_cleanup hook"	pointer
)	O
;	O
fflush	function
(	O
NULL	O
)	O
;	O
return	O
LDPS_ERR	int
;	O
}	O
(	O
*	O
tv_register_cleanup	pointer
)	O
(	O
oncleanup	function
)	O
;	O
}	O
if	O
(	O
onload_ret	enum
==	O
LDPS_OK	int
&&	O
(	O
record_claim_file	function
(	O
"func.c"	pointer
,	O
SIZE_OF_FUNC_C	int
)	O
!=	O
LDPS_OK	int
||	O
record_claimed_file_symbol	function
(	O
"func::0:0:0"	pointer
)	O
!=	O
LDPS_OK	int
||	O
record_claimed_file_symbol	function
(	O
"_func::0:0:0"	pointer
)	O
!=	O
LDPS_OK	int
||	O
record_claim_file	function
(	O
"libfunc.a"	pointer
,	O
SIZE_OF_FUNC_C	int
)	O
!=	O
LDPS_OK	int
||	O
record_claimed_file_symbol	function
(	O
"func::0:0:0"	pointer
)	O
!=	O
LDPS_OK	int
||	O
record_claimed_file_symbol	function
(	O
"_func::0:0:0"	pointer
)	O
!=	O
LDPS_OK	int
)	O
)	O
onload_ret	enum
=	O
LDPS_ERR	int
;	O
return	O
onload_ret	enum
;	O
}	O
char	O
*	O
xstrdup	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
;	O
char	O
*	O
ret	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
return	O
(	O
char	O
*	O
)	O
memcpy	function
(	O
ret	pointer
,	O
s	pointer
,	O
len	long
)	O
;	O
}	O
static	O
enum	O
ld_plugin_status	enum
onclaim_file	function
(	O
const	O
struct	O
ld_plugin_input_file	struct
*	O
file	pointer
,	O
int	O
*	O
claimed	pointer
)	O
{	O
claim_file_t	struct
*	O
claimfile	pointer
=	O
claimfiles_list	pointer
;	O
size_t	long
len	long
=	O
strlen	function
(	O
file	pointer
->	O
name	pointer
)	O
;	O
char	O
*	O
name	pointer
=	O
xstrdup	function
(	O
file	pointer
->	O
name	pointer
)	O
;	O
char	O
*	O
p	pointer
=	O
name	pointer
+	O
len	long
;	O
bfd_boolean	int
islib	int
;	O
islib	int
=	O
*	O
p	pointer
==	O
'a'	O
&&	O
*	O
(	O
p	pointer
-	O
1	int
)	O
==	O
'.'	O
;	O
for	O
(	O
;	O
p	pointer
!=	O
name	pointer
;	O
p	pointer
--	O
)	O
if	O
(	O
IS_DIR_SEPARATOR	O
(	O
*	O
p	pointer
)	O
)	O
{	O
p	pointer
++	O
;	O
break	O
;	O
}	O
while	O
(	O
claimfile	pointer
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
p	pointer
,	O
claimfile	pointer
->	O
file	pointer
.	O
name	pointer
)	O
&&	O
claimfile	pointer
->	O
file	pointer
.	O
filesize	long
==	O
file	pointer
->	O
filesize	long
&&	O
(	O
!	O
islib	int
||	O
file	pointer
->	O
offset	long
!=	O
0	int
)	O
)	O
break	O
;	O
claimfile	pointer
=	O
claimfile	pointer
->	O
next	pointer
;	O
}	O
free	function
(	O
name	pointer
)	O
;	O
*	O
claimed	pointer
=	O
(	O
claimfile	pointer
!=	O
0	int
)	O
;	O
if	O
(	O
claimfile	pointer
)	O
{	O
char	O
buffer	array
[	O
30	int
]	O
;	O
int	O
fd	int
;	O
TV_MESSAGE	O
(	O
LDPL_INFO	int
,	O
"Claimed: %s [@%ld/%ld]"	pointer
,	O
file	pointer
->	O
name	pointer
,	O
(	O
long	O
)	O
file	pointer
->	O
offset	long
,	O
(	O
long	O
)	O
file	pointer
->	O
filesize	long
)	O
;	O
claimfile	pointer
->	O
claimed	pointer
=	O
TRUE	int
;	O
claimfile	pointer
->	O
file	pointer
=	O
*	O
file	pointer
;	O
if	O
(	O
claimfile	pointer
->	O
n_syms_used	int
&&	O
!	O
tv_add_symbols	pointer
)	O
claim_file_ret	enum
=	O
LDPS_ERR	int
;	O
else	O
if	O
(	O
claimfile	pointer
->	O
n_syms_used	int
)	O
claim_file_ret	enum
=	O
(	O
*	O
tv_add_symbols	pointer
)	O
(	O
claimfile	pointer
->	O
file	pointer
.	O
handle	pointer
,	O
claimfile	pointer
->	O
n_syms_used	int
,	O
claimfile	pointer
->	O
symbols	pointer
)	O
;	O
fd	int
=	O
claimfile	pointer
->	O
file	pointer
.	O
fd	int
;	O
name	pointer
=	O
xstrdup	function
(	O
claimfile	pointer
->	O
file	pointer
.	O
name	pointer
)	O
;	O
claim_file_ret	enum
=	O
tv_release_input_file	pointer
(	O
claimfile	pointer
->	O
file	pointer
.	O
handle	pointer
)	O
;	O
if	O
(	O
claim_file_ret	enum
!=	O
LDPS_OK	int
)	O
{	O
free	function
(	O
name	pointer
)	O
;	O
return	O
claim_file_ret	enum
;	O
}	O
if	O
(	O
read	pointer
(	O
fd	int
,	O
buffer	array
,	O
sizeof	O
(	O
buffer	array
)	O
)	O
>=	O
0	int
)	O
{	O
claim_file_ret	enum
=	O
LDPS_ERR	int
;	O
TV_MESSAGE	O
(	O
LDPL_FATAL	int
,	O
"Unreleased file descriptor on: %s"	pointer
,	O
name	pointer
)	O
;	O
}	O
free	function
(	O
name	pointer
)	O
;	O
}	O
return	O
claim_file_ret	enum
;	O
}	O
static	O
enum	O
ld_plugin_status	enum
onall_symbols_read	function
(	O
void	O
)	O
{	O
static	O
const	O
char	O
*	O
resolutions	array
[	O
]	O
=	O
{	O
"LDPR_UNKNOWN"	pointer
,	O
"LDPR_UNDEF"	pointer
,	O
"LDPR_PREVAILING_DEF"	pointer
,	O
"LDPR_PREVAILING_DEF_IRONLY"	pointer
,	O
"LDPR_PREEMPTED_REG"	pointer
,	O
"LDPR_PREEMPTED_IR"	pointer
,	O
"LDPR_RESOLVED_IR"	pointer
,	O
"LDPR_RESOLVED_EXEC"	pointer
,	O
"LDPR_RESOLVED_DYN"	pointer
,	O
"LDPR_PREVAILING_DEF_IRONLY_EXP"	pointer
,	O
}	O
;	O
claim_file_t	struct
*	O
claimfile	pointer
=	O
dumpresolutions	int
?	O
claimfiles_list	pointer
:	O
NULL	O
;	O
add_file_t	struct
*	O
addfile	pointer
=	O
addfiles_list	pointer
;	O
TV_MESSAGE	O
(	O
LDPL_INFO	int
,	O
"hook called: all symbols read."	pointer
)	O
;	O
for	O
(	O
;	O
claimfile	pointer
;	O
claimfile	pointer
=	O
claimfile	pointer
->	O
next	pointer
)	O
{	O
enum	O
ld_plugin_status	enum
rv	enum
;	O
int	O
n	long
;	O
if	O
(	O
claimfile	pointer
->	O
n_syms_used	int
&&	O
!	O
tv_get_symbols_v2	pointer
)	O
return	O
LDPS_ERR	int
;	O
else	O
if	O
(	O
!	O
claimfile	pointer
->	O
n_syms_used	int
)	O
continue	O
;	O
else	O
if	O
(	O
!	O
claimfile	pointer
->	O
file	pointer
.	O
handle	pointer
)	O
continue	O
;	O
rv	enum
=	O
tv_get_symbols_v2	pointer
(	O
claimfile	pointer
->	O
file	pointer
.	O
handle	pointer
,	O
claimfile	pointer
->	O
n_syms_used	int
,	O
claimfile	pointer
->	O
symbols	pointer
)	O
;	O
if	O
(	O
rv	enum
!=	O
LDPS_OK	int
)	O
return	O
rv	enum
;	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<	O
claimfile	pointer
->	O
n_syms_used	int
;	O
n	long
++	O
)	O
TV_MESSAGE	O
(	O
LDPL_INFO	int
,	O
"Sym: '%s%s%s' Resolution: %s"	pointer
,	O
claimfile	pointer
->	O
symbols	pointer
[	O
n	long
]	O
.	O
name	pointer
,	O
claimfile	pointer
->	O
symbols	pointer
[	O
n	long
]	O
.	O
version	pointer
?	O
"@"	pointer
:	O
""	pointer
,	O
(	O
claimfile	pointer
->	O
symbols	pointer
[	O
n	long
]	O
.	O
version	pointer
?	O
claimfile	pointer
->	O
symbols	pointer
[	O
n	long
]	O
.	O
version	pointer
:	O
""	pointer
)	O
,	O
resolutions	array
[	O
claimfile	pointer
->	O
symbols	pointer
[	O
n	long
]	O
.	O
resolution	int
]	O
)	O
;	O
}	O
for	O
(	O
;	O
addfile	pointer
;	O
addfile	pointer
=	O
addfile	pointer
->	O
next	pointer
)	O
{	O
enum	O
ld_plugin_status	enum
rv	enum
;	O
if	O
(	O
addfile	pointer
->	O
type	enum
==	O
ADD_LIB	int
&&	O
tv_add_input_library	pointer
)	O
rv	enum
=	O
(	O
*	O
tv_add_input_library	pointer
)	O
(	O
addfile	pointer
->	O
name	pointer
)	O
;	O
else	O
if	O
(	O
addfile	pointer
->	O
type	enum
==	O
ADD_FILE	int
&&	O
tv_add_input_file	pointer
)	O
rv	enum
=	O
(	O
*	O
tv_add_input_file	pointer
)	O
(	O
addfile	pointer
->	O
name	pointer
)	O
;	O
else	O
if	O
(	O
addfile	pointer
->	O
type	enum
==	O
ADD_DIR	int
&&	O
tv_set_extra_library_path	pointer
)	O
rv	enum
=	O
(	O
*	O
tv_set_extra_library_path	pointer
)	O
(	O
addfile	pointer
->	O
name	pointer
)	O
;	O
else	O
rv	enum
=	O
LDPS_ERR	int
;	O
if	O
(	O
rv	enum
!=	O
LDPS_OK	int
)	O
return	O
rv	enum
;	O
}	O
fflush	function
(	O
NULL	O
)	O
;	O
return	O
all_symbols_read_ret	enum
;	O
}	O
static	O
enum	O
ld_plugin_status	enum
oncleanup	function
(	O
void	O
)	O
{	O
TV_MESSAGE	O
(	O
LDPL_INFO	int
,	O
"hook called: cleanup."	pointer
)	O
;	O
fflush	function
(	O
NULL	O
)	O
;	O
return	O
cleanup_ret	enum
;	O
}	O
