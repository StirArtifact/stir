struct	O
port_bucket	O
*	O
sock_port_bucket	pointer
;	O
static	O
int	O
sock_server_active	int
=	O
0	int
;	O
static	O
pthread_spinlock_t	int
sock_server_active_lock	int
=	O
PTHREAD_SPINLOCK_INITIALIZER	O
;	O
static	O
int	O
sock_demuxer	function
(	O
mach_msg_header_t	O
*	O
inp	pointer
,	O
mach_msg_header_t	O
*	O
outp	pointer
)	O
{	O
mig_routine_t	O
routine	O
;	O
if	O
(	O
(	O
routine	O
=	O
io_server_routine	function
(	O
inp	pointer
)	O
)	O
||	O
(	O
routine	O
=	O
fs_server_routine	function
(	O
inp	pointer
)	O
)	O
||	O
(	O
routine	O
=	O
socket_server_routine	function
(	O
inp	pointer
)	O
)	O
||	O
(	O
routine	O
=	O
ports_interrupt_server_routine	function
(	O
inp	pointer
)	O
)	O
||	O
(	O
routine	O
=	O
ports_notify_server_routine	function
(	O
inp	pointer
)	O
)	O
)	O
{	O
(	O
*	O
routine	O
)	O
(	O
inp	pointer
,	O
outp	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
else	O
return	O
FALSE	O
;	O
}	O
static	O
void	O
*	O
handle_sock_requests	function
(	O
void	O
*	O
unused	pointer
)	O
{	O
while	O
(	O
ports_count_bucket	function
(	O
sock_port_bucket	pointer
)	O
>	O
0	int
)	O
{	O
ports_enable_bucket	function
(	O
sock_port_bucket	pointer
)	O
;	O
ports_manage_port_operations_multithread	function
(	O
sock_port_bucket	pointer
,	O
sock_demuxer	function
,	O
30	int
*	O
1000	int
,	O
2	int
*	O
60	int
*	O
1000	int
,	O
0	int
)	O
;	O
}	O
pthread_spin_lock	function
(	O
&	O
sock_server_active_lock	int
)	O
;	O
sock_server_active	int
=	O
0	int
;	O
pthread_spin_unlock	function
(	O
&	O
sock_server_active_lock	int
)	O
;	O
ports_enable_bucket	function
(	O
sock_port_bucket	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
void	O
ensure_sock_server	function
(	O
)	O
{	O
pthread_t	long
thread	long
;	O
error_t	O
err	O
;	O
pthread_spin_lock	function
(	O
&	O
sock_server_active_lock	int
)	O
;	O
if	O
(	O
sock_server_active	int
)	O
pthread_spin_unlock	function
(	O
&	O
sock_server_active_lock	int
)	O
;	O
else	O
{	O
sock_server_active	int
=	O
1	int
;	O
pthread_spin_unlock	function
(	O
&	O
sock_server_active_lock	int
)	O
;	O
err	O
=	O
pthread_create	function
(	O
&	O
thread	long
,	O
NULL	O
,	O
handle_sock_requests	function
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
pthread_detach	function
(	O
thread	long
)	O
;	O
else	O
{	O
errno	O
=	O
err	O
;	O
perror	function
(	O
"pthread_create"	pointer
)	O
;	O
}	O
}	O
}	O
