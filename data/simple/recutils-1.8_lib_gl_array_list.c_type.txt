struct	O
gl_list_impl	struct
{	O
struct	O
gl_list_impl_base	struct
base	struct
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	long
count	long
;	O
size_t	long
allocated	long
;	O
}	O
;	O
static	O
gl_list_t	pointer
gl_array_nx_create_empty	function
(	O
gl_list_implementation_t	pointer
implementation	pointer
,	O
gl_listelement_equals_fn	pointer
equals_fn	pointer
,	O
gl_listelement_hashcode_fn	pointer
hashcode_fn	pointer
,	O
gl_listelement_dispose_fn	pointer
dispose_fn	pointer
,	O
bool	bool
allow_duplicates	bool
)	O
{	O
struct	O
gl_list_impl	struct
*	O
list	pointer
=	O
(	O
struct	O
gl_list_impl	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
gl_list_impl	struct
)	O
)	O
;	O
if	O
(	O
list	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
list	pointer
->	O
base	struct
.	O
vtable	pointer
=	O
implementation	pointer
;	O
list	pointer
->	O
base	struct
.	O
equals_fn	pointer
=	O
equals_fn	pointer
;	O
list	pointer
->	O
base	struct
.	O
hashcode_fn	pointer
=	O
hashcode_fn	pointer
;	O
list	pointer
->	O
base	struct
.	O
dispose_fn	pointer
=	O
dispose_fn	pointer
;	O
list	pointer
->	O
base	struct
.	O
allow_duplicates	bool
=	O
allow_duplicates	bool
;	O
list	pointer
->	O
elements	pointer
=	O
NULL	O
;	O
list	pointer
->	O
count	long
=	O
0	int
;	O
list	pointer
->	O
allocated	long
=	O
0	int
;	O
return	O
list	pointer
;	O
}	O
static	O
gl_list_t	pointer
gl_array_nx_create	function
(	O
gl_list_implementation_t	pointer
implementation	pointer
,	O
gl_listelement_equals_fn	pointer
equals_fn	pointer
,	O
gl_listelement_hashcode_fn	pointer
hashcode_fn	pointer
,	O
gl_listelement_dispose_fn	pointer
dispose_fn	pointer
,	O
bool	bool
allow_duplicates	bool
,	O
size_t	long
count	long
,	O
const	O
void	O
*	O
*	O
contents	pointer
)	O
{	O
struct	O
gl_list_impl	struct
*	O
list	pointer
=	O
(	O
struct	O
gl_list_impl	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
gl_list_impl	struct
)	O
)	O
;	O
if	O
(	O
list	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
list	pointer
->	O
base	struct
.	O
vtable	pointer
=	O
implementation	pointer
;	O
list	pointer
->	O
base	struct
.	O
equals_fn	pointer
=	O
equals_fn	pointer
;	O
list	pointer
->	O
base	struct
.	O
hashcode_fn	pointer
=	O
hashcode_fn	pointer
;	O
list	pointer
->	O
base	struct
.	O
dispose_fn	pointer
=	O
dispose_fn	pointer
;	O
list	pointer
->	O
base	struct
.	O
allow_duplicates	bool
=	O
allow_duplicates	bool
;	O
if	O
(	O
count	long
>	O
0	int
)	O
{	O
if	O
(	O
size_overflow_p	O
(	O
xtimes	O
(	O
count	long
,	O
sizeof	O
(	O
const	O
void	O
*	O
)	O
)	O
)	O
)	O
goto	O
fail	O
;	O
list	pointer
->	O
elements	pointer
=	O
(	O
const	O
void	O
*	O
*	O
)	O
malloc	function
(	O
count	long
*	O
sizeof	O
(	O
const	O
void	O
*	O
)	O
)	O
;	O
if	O
(	O
list	pointer
->	O
elements	pointer
==	O
NULL	O
)	O
goto	O
fail	O
;	O
memcpy	function
(	O
list	pointer
->	O
elements	pointer
,	O
contents	pointer
,	O
count	long
*	O
sizeof	O
(	O
const	O
void	O
*	O
)	O
)	O
;	O
}	O
else	O
list	pointer
->	O
elements	pointer
=	O
NULL	O
;	O
list	pointer
->	O
count	long
=	O
count	long
;	O
list	pointer
->	O
allocated	long
=	O
count	long
;	O
return	O
list	pointer
;	O
fail	O
:	O
free	function
(	O
list	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
size_t	long
gl_array_size	function
(	O
gl_list_t	pointer
list	pointer
)	O
{	O
return	O
list	pointer
->	O
count	long
;	O
}	O
static	O
const	O
void	O
*	O
_GL_ATTRIBUTE_PURE	O
gl_array_node_value	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_list_node_t	pointer
node	pointer
)	O
{	O
uintptr_t	long
index	function
=	O
NODE_TO_INDEX	O
(	O
node	pointer
)	O
;	O
if	O
(	O
!	O
(	O
index	function
<	O
list	pointer
->	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
return	O
list	pointer
->	O
elements	pointer
[	O
index	function
]	O
;	O
}	O
static	O
int	O
gl_array_node_nx_set_value	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_list_node_t	pointer
node	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
uintptr_t	long
index	function
=	O
NODE_TO_INDEX	O
(	O
node	pointer
)	O
;	O
if	O
(	O
!	O
(	O
index	function
<	O
list	pointer
->	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
list	pointer
->	O
elements	pointer
[	O
index	function
]	O
=	O
elt	pointer
;	O
return	O
0	int
;	O
}	O
static	O
gl_list_node_t	pointer
_GL_ATTRIBUTE_PURE	O
gl_array_next_node	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_list_node_t	pointer
node	pointer
)	O
{	O
uintptr_t	long
index	function
=	O
NODE_TO_INDEX	O
(	O
node	pointer
)	O
;	O
if	O
(	O
!	O
(	O
index	function
<	O
list	pointer
->	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
index	function
++	O
;	O
if	O
(	O
index	function
<	O
list	pointer
->	O
count	long
)	O
return	O
INDEX_TO_NODE	O
(	O
index	function
)	O
;	O
else	O
return	O
NULL	O
;	O
}	O
static	O
gl_list_node_t	pointer
_GL_ATTRIBUTE_PURE	O
gl_array_previous_node	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_list_node_t	pointer
node	pointer
)	O
{	O
uintptr_t	long
index	function
=	O
NODE_TO_INDEX	O
(	O
node	pointer
)	O
;	O
if	O
(	O
!	O
(	O
index	function
<	O
list	pointer
->	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
index	function
>	O
0	int
)	O
return	O
INDEX_TO_NODE	O
(	O
index	function
-	O
1	int
)	O
;	O
else	O
return	O
NULL	O
;	O
}	O
static	O
const	O
void	O
*	O
_GL_ATTRIBUTE_PURE	O
gl_array_get_at	function
(	O
gl_list_t	pointer
list	pointer
,	O
size_t	long
position	long
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
if	O
(	O
!	O
(	O
position	long
<	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
return	O
list	pointer
->	O
elements	pointer
[	O
position	long
]	O
;	O
}	O
static	O
gl_list_node_t	pointer
gl_array_nx_set_at	function
(	O
gl_list_t	pointer
list	pointer
,	O
size_t	long
position	long
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
if	O
(	O
!	O
(	O
position	long
<	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
list	pointer
->	O
elements	pointer
[	O
position	long
]	O
=	O
elt	pointer
;	O
return	O
INDEX_TO_NODE	O
(	O
position	long
)	O
;	O
}	O
static	O
size_t	long
gl_array_indexof_from_to	function
(	O
gl_list_t	pointer
list	pointer
,	O
size_t	long
start_index	long
,	O
size_t	long
end_index	long
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
if	O
(	O
!	O
(	O
start_index	long
<=	O
end_index	long
&&	O
end_index	long
<=	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
start_index	long
<	O
end_index	long
)	O
{	O
gl_listelement_equals_fn	pointer
equals	pointer
=	O
list	pointer
->	O
base	struct
.	O
equals_fn	pointer
;	O
if	O
(	O
equals	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
start_index	long
;	O
;	O
)	O
{	O
if	O
(	O
equals	pointer
(	O
elt	pointer
,	O
list	pointer
->	O
elements	pointer
[	O
i	long
]	O
)	O
)	O
return	O
i	long
;	O
i	long
++	O
;	O
if	O
(	O
i	long
==	O
end_index	long
)	O
break	O
;	O
}	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
start_index	long
;	O
;	O
)	O
{	O
if	O
(	O
elt	pointer
==	O
list	pointer
->	O
elements	pointer
[	O
i	long
]	O
)	O
return	O
i	long
;	O
i	long
++	O
;	O
if	O
(	O
i	long
==	O
end_index	long
)	O
break	O
;	O
}	O
}	O
}	O
return	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
;	O
}	O
static	O
gl_list_node_t	pointer
gl_array_search_from_to	function
(	O
gl_list_t	pointer
list	pointer
,	O
size_t	long
start_index	long
,	O
size_t	long
end_index	long
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
index	function
=	O
gl_array_indexof_from_to	function
(	O
list	pointer
,	O
start_index	long
,	O
end_index	long
,	O
elt	pointer
)	O
;	O
return	O
INDEX_TO_NODE	O
(	O
index	function
)	O
;	O
}	O
static	O
int	O
grow	function
(	O
gl_list_t	pointer
list	pointer
)	O
{	O
size_t	long
new_allocated	long
;	O
size_t	long
memory_size	long
;	O
const	O
void	O
*	O
*	O
memory	pointer
;	O
new_allocated	long
=	O
xtimes	O
(	O
list	pointer
->	O
allocated	long
,	O
2	int
)	O
;	O
new_allocated	long
=	O
xsum	function
(	O
new_allocated	long
,	O
1	int
)	O
;	O
memory_size	long
=	O
xtimes	O
(	O
new_allocated	long
,	O
sizeof	O
(	O
const	O
void	O
*	O
)	O
)	O
;	O
if	O
(	O
size_overflow_p	O
(	O
memory_size	long
)	O
)	O
return	O
-	O
1	int
;	O
memory	pointer
=	O
(	O
const	O
void	O
*	O
*	O
)	O
realloc	function
(	O
list	pointer
->	O
elements	pointer
,	O
memory_size	long
)	O
;	O
if	O
(	O
memory	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
list	pointer
->	O
elements	pointer
=	O
memory	pointer
;	O
list	pointer
->	O
allocated	long
=	O
new_allocated	long
;	O
return	O
0	int
;	O
}	O
static	O
gl_list_node_t	pointer
gl_array_nx_add_first	function
(	O
gl_list_t	pointer
list	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
count	long
==	O
list	pointer
->	O
allocated	long
)	O
if	O
(	O
grow	function
(	O
list	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
for	O
(	O
i	long
=	O
count	long
;	O
i	long
>	O
0	int
;	O
i	long
--	O
)	O
elements	pointer
[	O
i	long
]	O
=	O
elements	pointer
[	O
i	long
-	O
1	int
]	O
;	O
elements	pointer
[	O
0	int
]	O
=	O
elt	pointer
;	O
list	pointer
->	O
count	long
=	O
count	long
+	O
1	int
;	O
return	O
INDEX_TO_NODE	O
(	O
0	int
)	O
;	O
}	O
static	O
gl_list_node_t	pointer
gl_array_nx_add_last	function
(	O
gl_list_t	pointer
list	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
if	O
(	O
count	long
==	O
list	pointer
->	O
allocated	long
)	O
if	O
(	O
grow	function
(	O
list	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
list	pointer
->	O
elements	pointer
[	O
count	long
]	O
=	O
elt	pointer
;	O
list	pointer
->	O
count	long
=	O
count	long
+	O
1	int
;	O
return	O
INDEX_TO_NODE	O
(	O
count	long
)	O
;	O
}	O
static	O
gl_list_node_t	pointer
gl_array_nx_add_before	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_list_node_t	pointer
node	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
uintptr_t	long
index	function
=	O
NODE_TO_INDEX	O
(	O
node	pointer
)	O
;	O
size_t	long
position	long
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
(	O
index	function
<	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
position	long
=	O
index	function
;	O
if	O
(	O
count	long
==	O
list	pointer
->	O
allocated	long
)	O
if	O
(	O
grow	function
(	O
list	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
for	O
(	O
i	long
=	O
count	long
;	O
i	long
>	O
position	long
;	O
i	long
--	O
)	O
elements	pointer
[	O
i	long
]	O
=	O
elements	pointer
[	O
i	long
-	O
1	int
]	O
;	O
elements	pointer
[	O
position	long
]	O
=	O
elt	pointer
;	O
list	pointer
->	O
count	long
=	O
count	long
+	O
1	int
;	O
return	O
INDEX_TO_NODE	O
(	O
position	long
)	O
;	O
}	O
static	O
gl_list_node_t	pointer
gl_array_nx_add_after	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_list_node_t	pointer
node	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
uintptr_t	long
index	function
=	O
NODE_TO_INDEX	O
(	O
node	pointer
)	O
;	O
size_t	long
position	long
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
(	O
index	function
<	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
position	long
=	O
index	function
+	O
1	int
;	O
if	O
(	O
count	long
==	O
list	pointer
->	O
allocated	long
)	O
if	O
(	O
grow	function
(	O
list	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
for	O
(	O
i	long
=	O
count	long
;	O
i	long
>	O
position	long
;	O
i	long
--	O
)	O
elements	pointer
[	O
i	long
]	O
=	O
elements	pointer
[	O
i	long
-	O
1	int
]	O
;	O
elements	pointer
[	O
position	long
]	O
=	O
elt	pointer
;	O
list	pointer
->	O
count	long
=	O
count	long
+	O
1	int
;	O
return	O
INDEX_TO_NODE	O
(	O
position	long
)	O
;	O
}	O
static	O
gl_list_node_t	pointer
gl_array_nx_add_at	function
(	O
gl_list_t	pointer
list	pointer
,	O
size_t	long
position	long
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
(	O
position	long
<=	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
count	long
==	O
list	pointer
->	O
allocated	long
)	O
if	O
(	O
grow	function
(	O
list	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
for	O
(	O
i	long
=	O
count	long
;	O
i	long
>	O
position	long
;	O
i	long
--	O
)	O
elements	pointer
[	O
i	long
]	O
=	O
elements	pointer
[	O
i	long
-	O
1	int
]	O
;	O
elements	pointer
[	O
position	long
]	O
=	O
elt	pointer
;	O
list	pointer
->	O
count	long
=	O
count	long
+	O
1	int
;	O
return	O
INDEX_TO_NODE	O
(	O
position	long
)	O
;	O
}	O
static	O
bool	bool
gl_array_remove_node	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_list_node_t	pointer
node	pointer
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
uintptr_t	long
index	function
=	O
NODE_TO_INDEX	O
(	O
node	pointer
)	O
;	O
size_t	long
position	long
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
(	O
index	function
<	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
position	long
=	O
index	function
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
if	O
(	O
list	pointer
->	O
base	struct
.	O
dispose_fn	pointer
!=	O
NULL	O
)	O
list	pointer
->	O
base	struct
.	O
dispose_fn	pointer
(	O
elements	pointer
[	O
position	long
]	O
)	O
;	O
for	O
(	O
i	long
=	O
position	long
+	O
1	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
elements	pointer
[	O
i	long
-	O
1	int
]	O
=	O
elements	pointer
[	O
i	long
]	O
;	O
list	pointer
->	O
count	long
=	O
count	long
-	O
1	int
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
gl_array_remove_at	function
(	O
gl_list_t	pointer
list	pointer
,	O
size_t	long
position	long
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
(	O
position	long
<	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
if	O
(	O
list	pointer
->	O
base	struct
.	O
dispose_fn	pointer
!=	O
NULL	O
)	O
list	pointer
->	O
base	struct
.	O
dispose_fn	pointer
(	O
elements	pointer
[	O
position	long
]	O
)	O
;	O
for	O
(	O
i	long
=	O
position	long
+	O
1	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
elements	pointer
[	O
i	long
-	O
1	int
]	O
=	O
elements	pointer
[	O
i	long
]	O
;	O
list	pointer
->	O
count	long
=	O
count	long
-	O
1	int
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
gl_array_remove	function
(	O
gl_list_t	pointer
list	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
position	long
=	O
gl_array_indexof_from_to	function
(	O
list	pointer
,	O
0	int
,	O
list	pointer
->	O
count	long
,	O
elt	pointer
)	O
;	O
if	O
(	O
position	long
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
return	O
false	int
;	O
else	O
return	O
gl_array_remove_at	function
(	O
list	pointer
,	O
position	long
)	O
;	O
}	O
static	O
void	O
gl_array_list_free	function
(	O
gl_list_t	pointer
list	pointer
)	O
{	O
if	O
(	O
list	pointer
->	O
elements	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
list	pointer
->	O
base	struct
.	O
dispose_fn	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
if	O
(	O
count	long
>	O
0	int
)	O
{	O
gl_listelement_dispose_fn	pointer
dispose	pointer
=	O
list	pointer
->	O
base	struct
.	O
dispose_fn	pointer
;	O
const	O
void	O
*	O
*	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
do	O
dispose	pointer
(	O
*	O
elements	pointer
++	O
)	O
;	O
while	O
(	O
--	O
count	long
>	O
0	int
)	O
;	O
}	O
}	O
free	function
(	O
list	pointer
->	O
elements	pointer
)	O
;	O
}	O
free	function
(	O
list	pointer
)	O
;	O
}	O
static	O
gl_list_iterator_t	struct
gl_array_iterator	function
(	O
gl_list_t	pointer
list	pointer
)	O
{	O
gl_list_iterator_t	struct
result	struct
;	O
result	struct
.	O
vtable	pointer
=	O
list	pointer
->	O
base	struct
.	O
vtable	pointer
;	O
result	struct
.	O
list	pointer
=	O
list	pointer
;	O
result	struct
.	O
count	long
=	O
list	pointer
->	O
count	long
;	O
result	struct
.	O
p	pointer
=	O
list	pointer
->	O
elements	pointer
+	O
0	int
;	O
result	struct
.	O
q	pointer
=	O
list	pointer
->	O
elements	pointer
+	O
list	pointer
->	O
count	long
;	O
return	O
result	struct
;	O
}	O
static	O
gl_list_iterator_t	struct
gl_array_iterator_from_to	function
(	O
gl_list_t	pointer
list	pointer
,	O
size_t	long
start_index	long
,	O
size_t	long
end_index	long
)	O
{	O
gl_list_iterator_t	struct
result	struct
;	O
if	O
(	O
!	O
(	O
start_index	long
<=	O
end_index	long
&&	O
end_index	long
<=	O
list	pointer
->	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
result	struct
.	O
vtable	pointer
=	O
list	pointer
->	O
base	struct
.	O
vtable	pointer
;	O
result	struct
.	O
list	pointer
=	O
list	pointer
;	O
result	struct
.	O
count	long
=	O
list	pointer
->	O
count	long
;	O
result	struct
.	O
p	pointer
=	O
list	pointer
->	O
elements	pointer
+	O
start_index	long
;	O
result	struct
.	O
q	pointer
=	O
list	pointer
->	O
elements	pointer
+	O
end_index	long
;	O
return	O
result	struct
;	O
}	O
static	O
bool	bool
gl_array_iterator_next	function
(	O
gl_list_iterator_t	struct
*	O
iterator	pointer
,	O
const	O
void	O
*	O
*	O
eltp	pointer
,	O
gl_list_node_t	pointer
*	O
nodep	pointer
)	O
{	O
gl_list_t	pointer
list	pointer
=	O
iterator	pointer
->	O
list	pointer
;	O
if	O
(	O
iterator	pointer
->	O
count	long
!=	O
list	pointer
->	O
count	long
)	O
{	O
if	O
(	O
iterator	pointer
->	O
count	long
!=	O
list	pointer
->	O
count	long
+	O
1	int
)	O
abort	function
(	O
)	O
;	O
iterator	pointer
->	O
count	long
--	O
;	O
iterator	pointer
->	O
p	pointer
=	O
(	O
const	O
void	O
*	O
*	O
)	O
iterator	pointer
->	O
p	pointer
-	O
1	int
;	O
iterator	pointer
->	O
q	pointer
=	O
(	O
const	O
void	O
*	O
*	O
)	O
iterator	pointer
->	O
q	pointer
-	O
1	int
;	O
}	O
if	O
(	O
iterator	pointer
->	O
p	pointer
<	O
iterator	pointer
->	O
q	pointer
)	O
{	O
const	O
void	O
*	O
*	O
p	pointer
=	O
(	O
const	O
void	O
*	O
*	O
)	O
iterator	pointer
->	O
p	pointer
;	O
*	O
eltp	pointer
=	O
*	O
p	pointer
;	O
if	O
(	O
nodep	pointer
!=	O
NULL	O
)	O
*	O
nodep	pointer
=	O
INDEX_TO_NODE	O
(	O
p	pointer
-	O
list	pointer
->	O
elements	pointer
)	O
;	O
iterator	pointer
->	O
p	pointer
=	O
p	pointer
+	O
1	int
;	O
return	O
true	int
;	O
}	O
else	O
return	O
false	int
;	O
}	O
static	O
void	O
gl_array_iterator_free	function
(	O
gl_list_iterator_t	struct
*	O
iterator	pointer
)	O
{	O
}	O
static	O
size_t	long
gl_array_sortedlist_indexof_from_to	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_listelement_compar_fn	pointer
compar	pointer
,	O
size_t	long
low	long
,	O
size_t	long
high	long
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
if	O
(	O
!	O
(	O
low	long
<=	O
high	long
&&	O
high	long
<=	O
list	pointer
->	O
count	long
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
low	long
<	O
high	long
)	O
{	O
do	O
{	O
size_t	long
mid	long
=	O
low	long
+	O
(	O
high	long
-	O
low	long
)	O
/	O
2	int
;	O
int	O
cmp	int
=	O
compar	pointer
(	O
list	pointer
->	O
elements	pointer
[	O
mid	long
]	O
,	O
elt	pointer
)	O
;	O
if	O
(	O
cmp	int
<	O
0	int
)	O
low	long
=	O
mid	long
+	O
1	int
;	O
else	O
if	O
(	O
cmp	int
>	O
0	int
)	O
high	long
=	O
mid	long
;	O
else	O
{	O
high	long
=	O
mid	long
;	O
while	O
(	O
low	long
<	O
high	long
)	O
{	O
size_t	long
mid2	long
=	O
low	long
+	O
(	O
high	long
-	O
low	long
)	O
/	O
2	int
;	O
int	O
cmp2	int
=	O
compar	pointer
(	O
list	pointer
->	O
elements	pointer
[	O
mid2	long
]	O
,	O
elt	pointer
)	O
;	O
if	O
(	O
cmp2	int
<	O
0	int
)	O
low	long
=	O
mid2	long
+	O
1	int
;	O
else	O
if	O
(	O
cmp2	int
>	O
0	int
)	O
abort	function
(	O
)	O
;	O
else	O
{	O
if	O
(	O
mid2	long
==	O
low	long
)	O
break	O
;	O
high	long
=	O
mid2	long
-	O
1	int
;	O
}	O
}	O
return	O
low	long
;	O
}	O
}	O
while	O
(	O
low	long
<	O
high	long
)	O
;	O
}	O
return	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
;	O
}	O
static	O
size_t	long
gl_array_sortedlist_indexof	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_listelement_compar_fn	pointer
compar	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
return	O
gl_array_sortedlist_indexof_from_to	function
(	O
list	pointer
,	O
compar	pointer
,	O
0	int
,	O
list	pointer
->	O
count	long
,	O
elt	pointer
)	O
;	O
}	O
static	O
gl_list_node_t	pointer
gl_array_sortedlist_search_from_to	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_listelement_compar_fn	pointer
compar	pointer
,	O
size_t	long
low	long
,	O
size_t	long
high	long
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
index	function
=	O
gl_array_sortedlist_indexof_from_to	function
(	O
list	pointer
,	O
compar	pointer
,	O
low	long
,	O
high	long
,	O
elt	pointer
)	O
;	O
return	O
INDEX_TO_NODE	O
(	O
index	function
)	O
;	O
}	O
static	O
gl_list_node_t	pointer
gl_array_sortedlist_search	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_listelement_compar_fn	pointer
compar	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
index	function
=	O
gl_array_sortedlist_indexof_from_to	function
(	O
list	pointer
,	O
compar	pointer
,	O
0	int
,	O
list	pointer
->	O
count	long
,	O
elt	pointer
)	O
;	O
return	O
INDEX_TO_NODE	O
(	O
index	function
)	O
;	O
}	O
static	O
gl_list_node_t	pointer
gl_array_sortedlist_nx_add	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_listelement_compar_fn	pointer
compar	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
count	long
=	O
list	pointer
->	O
count	long
;	O
size_t	long
low	long
=	O
0	int
;	O
size_t	long
high	long
=	O
count	long
;	O
while	O
(	O
low	long
<	O
high	long
)	O
{	O
size_t	long
mid	long
=	O
low	long
+	O
(	O
high	long
-	O
low	long
)	O
/	O
2	int
;	O
int	O
cmp	int
=	O
compar	pointer
(	O
list	pointer
->	O
elements	pointer
[	O
mid	long
]	O
,	O
elt	pointer
)	O
;	O
if	O
(	O
cmp	int
<	O
0	int
)	O
low	long
=	O
mid	long
+	O
1	int
;	O
else	O
if	O
(	O
cmp	int
>	O
0	int
)	O
high	long
=	O
mid	long
;	O
else	O
{	O
low	long
=	O
mid	long
;	O
break	O
;	O
}	O
}	O
return	O
gl_array_nx_add_at	function
(	O
list	pointer
,	O
low	long
,	O
elt	pointer
)	O
;	O
}	O
static	O
bool	bool
gl_array_sortedlist_remove	function
(	O
gl_list_t	pointer
list	pointer
,	O
gl_listelement_compar_fn	pointer
compar	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	long
index	function
=	O
gl_array_sortedlist_indexof	function
(	O
list	pointer
,	O
compar	pointer
,	O
elt	pointer
)	O
;	O
if	O
(	O
index	function
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
return	O
false	int
;	O
else	O
return	O
gl_array_remove_at	function
(	O
list	pointer
,	O
index	function
)	O
;	O
}	O
const	O
struct	O
gl_list_implementation	struct
gl_array_list_implementation	struct
=	O
{	O
gl_array_nx_create_empty	function
,	O
gl_array_nx_create	function
,	O
gl_array_size	function
,	O
gl_array_node_value	function
,	O
gl_array_node_nx_set_value	function
,	O
gl_array_next_node	function
,	O
gl_array_previous_node	function
,	O
gl_array_get_at	function
,	O
gl_array_nx_set_at	function
,	O
gl_array_search_from_to	function
,	O
gl_array_indexof_from_to	function
,	O
gl_array_nx_add_first	function
,	O
gl_array_nx_add_last	function
,	O
gl_array_nx_add_before	function
,	O
gl_array_nx_add_after	function
,	O
gl_array_nx_add_at	function
,	O
gl_array_remove_node	function
,	O
gl_array_remove_at	function
,	O
gl_array_remove	function
,	O
gl_array_list_free	function
,	O
gl_array_iterator	function
,	O
gl_array_iterator_from_to	function
,	O
gl_array_iterator_next	function
,	O
gl_array_iterator_free	function
,	O
gl_array_sortedlist_search	function
,	O
gl_array_sortedlist_search_from_to	function
,	O
gl_array_sortedlist_indexof	function
,	O
gl_array_sortedlist_indexof_from_to	function
,	O
gl_array_sortedlist_nx_add	function
,	O
gl_array_sortedlist_remove	function
}	O
;	O
