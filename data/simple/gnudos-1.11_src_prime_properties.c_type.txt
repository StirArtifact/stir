void	O
refreshPropertiesDialog	function
(	O
char	O
*	O
input_str	pointer
)	O
;	O
int	O
UREAD	int
,	O
UWRITE	int
,	O
UEXECUTE	int
;	O
int	O
GREAD	int
,	O
GWRITE	int
,	O
GEXECUTE	int
;	O
int	O
OREAD	int
,	O
OWRITE	int
,	O
OEXECUTE	int
;	O
int	O
NAME_CHANGED	int
=	O
0	int
;	O
int	O
x	int
,	O
y	int
,	O
w	int
,	O
h	int
;	O
int	O
sel	int
;	O
void	O
refreshPropertiesDialog	function
(	O
char	O
*	O
input_str	pointer
)	O
{	O
int	O
i	int
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
1	int
,	O
y	int
+	O
2	int
)	O
;	O
if	O
(	O
activeWindow	int
==	O
DIR_WIN	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"Dir name:  "	pointer
)	O
;	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"File name: "	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
input_str	pointer
)	O
>	O
26	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
24	int
;	O
i	int
++	O
)	O
putchar	function
(	O
input_str	pointer
[	O
i	int
]	O
)	O
;	O
fputs	function
(	O
".."	pointer
,	O
stdout	pointer
)	O
;	O
}	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"%s"	pointer
,	O
input_str	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
3	int
,	O
y	int
+	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"Permissions:"	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
4	int
,	O
y	int
+	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"Owner:      Group:      Others:    "	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"[ ] Read    [ ] Read    [ ] Read   "	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
6	int
,	O
y	int
+	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"[ ] Write   [ ] Write   [ ] Write  "	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
7	int
,	O
y	int
+	O
2	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"[ ] Execute [ ] Execute [ ] Execute"	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_BUTTONS	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH   OK   "	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
10	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH CANCEL "	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
22	int
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
if	O
(	O
UREAD	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
3	int
)	O
;	O
}	O
if	O
(	O
UWRITE	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
6	int
,	O
y	int
+	O
3	int
)	O
;	O
}	O
if	O
(	O
UEXECUTE	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
7	int
,	O
y	int
+	O
3	int
)	O
;	O
}	O
if	O
(	O
GREAD	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
15	int
)	O
;	O
}	O
if	O
(	O
GWRITE	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
6	int
,	O
y	int
+	O
15	int
)	O
;	O
}	O
if	O
(	O
GEXECUTE	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
7	int
,	O
y	int
+	O
15	int
)	O
;	O
}	O
if	O
(	O
OREAD	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
27	int
)	O
;	O
}	O
if	O
(	O
OWRITE	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
6	int
,	O
y	int
+	O
27	int
)	O
;	O
}	O
if	O
(	O
OEXECUTE	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHX"	pointer
,	O
x	int
+	O
7	int
,	O
y	int
+	O
27	int
)	O
;	O
}	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
switch	O
(	O
sel	int
)	O
{	O
case	O
0	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
x	int
+	O
1	int
,	O
y	int
+	O
13	int
)	O
;	O
if	O
(	O
strlen	function
(	O
input_str	pointer
)	O
>	O
26	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
24	int
;	O
i	int
++	O
)	O
putchar	function
(	O
input_str	pointer
[	O
i	int
]	O
)	O
;	O
fputs	function
(	O
".."	pointer
,	O
stdout	pointer
)	O
;	O
}	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"%s"	pointer
,	O
input_str	pointer
)	O
;	O
break	O
;	O
case	O
1	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHRead"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
6	int
)	O
;	O
break	O
;	O
case	O
2	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHRead"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
18	int
)	O
;	O
break	O
;	O
case	O
3	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHRead"	pointer
,	O
x	int
+	O
5	int
,	O
y	int
+	O
30	int
)	O
;	O
break	O
;	O
case	O
4	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHWrite"	pointer
,	O
x	int
+	O
6	int
,	O
y	int
+	O
6	int
)	O
;	O
break	O
;	O
case	O
5	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHWrite"	pointer
,	O
x	int
+	O
6	int
,	O
y	int
+	O
18	int
)	O
;	O
break	O
;	O
case	O
6	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHWrite"	pointer
,	O
x	int
+	O
6	int
,	O
y	int
+	O
30	int
)	O
;	O
break	O
;	O
case	O
7	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHExecute"	pointer
,	O
x	int
+	O
7	int
,	O
y	int
+	O
6	int
)	O
;	O
break	O
;	O
case	O
8	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHExecute"	pointer
,	O
x	int
+	O
7	int
,	O
y	int
+	O
18	int
)	O
;	O
break	O
;	O
case	O
9	int
:	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dHExecute"	pointer
,	O
x	int
+	O
7	int
,	O
y	int
+	O
30	int
)	O
;	O
break	O
;	O
case	O
10	int
:	O
setScreenColorsI	function
(	O
COLOR_HBUTTONS	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH   OK   "	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
10	int
)	O
;	O
break	O
;	O
case	O
11	int
:	O
setScreenColorsI	function
(	O
COLOR_HBUTTONS	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH CANCEL "	pointer
,	O
x	int
+	O
9	int
,	O
y	int
+	O
22	int
)	O
;	O
break	O
;	O
}	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
void	O
showPropertiesDialog	function
(	O
)	O
{	O
struct	O
stat	struct
statbuf	struct
;	O
struct	O
dirstruct	struct
*	O
dir	pointer
;	O
if	O
(	O
activeWindow	int
==	O
DIR_WIN	int
)	O
dir	pointer
=	O
dirs	array
[	O
firstVisDir	int
+	O
selectedDir	int
]	O
;	O
else	O
dir	pointer
=	O
files	array
[	O
firstVisFile	int
+	O
selectedFile	int
]	O
;	O
UREAD	int
=	O
0	int
;	O
UWRITE	int
=	O
0	int
;	O
UEXECUTE	int
=	O
0	int
;	O
GREAD	int
=	O
0	int
;	O
GWRITE	int
=	O
0	int
;	O
GEXECUTE	int
=	O
0	int
;	O
OREAD	int
=	O
0	int
;	O
OWRITE	int
=	O
0	int
;	O
OEXECUTE	int
=	O
0	int
;	O
sel	int
=	O
0	int
;	O
h	int
=	O
10	int
;	O
w	int
=	O
40	int
;	O
x	int
=	O
(	O
SCREEN_H	int
/	O
2	int
)	O
-	O
(	O
h	int
/	O
2	int
)	O
;	O
y	int
=	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
(	O
w	int
/	O
2	int
)	O
;	O
if	O
(	O
lstat	function
(	O
dir	pointer
->	O
name	pointer
,	O
&	O
statbuf	struct
)	O
==	O
-	O
1	int
)	O
{	O
msgBoxH	function
(	O
strerror	function
(	O
errno	O
)	O
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IRUSR	O
)	O
{	O
UREAD	int
=	O
1	int
;	O
}	O
if	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IWUSR	O
)	O
{	O
UWRITE	int
=	O
1	int
;	O
}	O
if	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IXUSR	O
)	O
{	O
UEXECUTE	int
=	O
1	int
;	O
}	O
if	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IRGRP	O
)	O
{	O
GREAD	int
=	O
1	int
;	O
}	O
if	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IWGRP	O
)	O
{	O
GWRITE	int
=	O
1	int
;	O
}	O
if	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IXGRP	O
)	O
{	O
GEXECUTE	int
=	O
1	int
;	O
}	O
if	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IROTH	O
)	O
{	O
OREAD	int
=	O
1	int
;	O
}	O
if	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IWOTH	O
)	O
{	O
OWRITE	int
=	O
1	int
;	O
}	O
if	O
(	O
statbuf	struct
.	O
st_mode	int
&	O
S_IXOTH	O
)	O
{	O
OEXECUTE	int
=	O
1	int
;	O
}	O
char	O
*	O
name	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
dir	pointer
->	O
namelen	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
{	O
msgBoxH	function
(	O
"Insufficient memory!"	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
;	O
}	O
strcpy	function
(	O
name	pointer
,	O
dir	pointer
->	O
name	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
drawBox	function
(	O
x	int
,	O
y	int
,	O
x	int
+	O
h	int
,	O
w	int
+	O
y	int
,	O
" Properties "	pointer
,	O
YES	int
)	O
;	O
refreshPropertiesDialog	function
(	O
name	pointer
)	O
;	O
int	O
c	int
;	O
int	O
endme	int
=	O
0	int
;	O
mode_t	int
mode	int
;	O
while	O
(	O
!	O
endme	int
)	O
{	O
c	int
=	O
getKey	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
(	O
TAB_KEY	int
)	O
:	O
if	O
(	O
sel	int
>=	O
0	int
)	O
sel	int
++	O
;	O
if	O
(	O
sel	int
>	O
11	int
)	O
sel	int
=	O
0	int
;	O
break	O
;	O
case	O
(	O
'p'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
&&	O
CTRL	int
)	O
goto	O
do_up	O
;	O
break	O
;	O
case	O
(	O
UP_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_up	O
:	O
if	O
(	O
sel	int
==	O
0	int
)	O
sel	int
=	O
10	int
;	O
else	O
if	O
(	O
sel	int
>=	O
10	int
)	O
sel	int
=	O
7	int
;	O
else	O
if	O
(	O
sel	int
>=	O
1	int
&&	O
sel	int
<=	O
3	int
)	O
sel	int
=	O
0	int
;	O
else	O
if	O
(	O
sel	int
>=	O
4	int
&&	O
sel	int
<=	O
9	int
)	O
sel	int
-=	O
3	int
;	O
break	O
;	O
case	O
(	O
'n'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
&&	O
CTRL	int
)	O
goto	O
do_down	O
;	O
break	O
;	O
case	O
(	O
DOWN_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_down	O
:	O
if	O
(	O
sel	int
==	O
0	int
)	O
sel	int
=	O
1	int
;	O
else	O
if	O
(	O
sel	int
>=	O
10	int
)	O
sel	int
=	O
0	int
;	O
else	O
if	O
(	O
sel	int
>=	O
7	int
&&	O
sel	int
<=	O
9	int
)	O
sel	int
=	O
10	int
;	O
else	O
if	O
(	O
sel	int
>=	O
1	int
&&	O
sel	int
<=	O
6	int
)	O
sel	int
+=	O
3	int
;	O
break	O
;	O
case	O
(	O
'f'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
&&	O
CTRL	int
)	O
goto	O
do_right	O
;	O
break	O
;	O
case	O
(	O
RIGHT_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_right	O
:	O
if	O
(	O
sel	int
>	O
0	int
)	O
sel	int
++	O
;	O
if	O
(	O
sel	int
>	O
11	int
)	O
sel	int
=	O
0	int
;	O
break	O
;	O
case	O
(	O
'b'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
&&	O
CTRL	int
)	O
goto	O
do_left	O
;	O
break	O
;	O
case	O
(	O
LEFT_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_left	O
:	O
if	O
(	O
sel	int
>	O
0	int
)	O
sel	int
--	O
;	O
break	O
;	O
case	O
(	O
'g'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
3	int
)	O
break	O
;	O
if	O
(	O
!	O
CTRL	int
)	O
break	O
;	O
goto	O
do_esc	O
;	O
case	O
(	O
ESC_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
do_esc	O
:	O
endme	int
=	O
1	int
;	O
break	O
;	O
case	O
(	O
SPACE_KEY	int
)	O
:	O
case	O
(	O
ENTER_KEY	int
)	O
:	O
switch	O
(	O
sel	int
)	O
{	O
case	O
0	int
:	O
inputBoxI	function
(	O
"Enter new name: "	pointer
,	O
name	pointer
,	O
" Rename... "	pointer
)	O
;	O
int	O
len	int
=	O
strlen	function
(	O
input	array
)	O
;	O
if	O
(	O
len	int
)	O
{	O
free	function
(	O
name	pointer
)	O
;	O
name	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
{	O
msgBoxH	function
(	O
"Insufficient memory!"	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
;	O
}	O
strcpy	function
(	O
name	pointer
,	O
input	array
)	O
;	O
NAME_CHANGED	int
=	O
1	int
;	O
}	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
drawBox	function
(	O
x	int
,	O
y	int
,	O
x	int
+	O
h	int
,	O
w	int
+	O
y	int
,	O
" Properties "	pointer
,	O
YES	int
)	O
;	O
break	O
;	O
case	O
1	int
:	O
UREAD	int
=	O
!	O
UREAD	int
;	O
break	O
;	O
case	O
2	int
:	O
GREAD	int
=	O
!	O
GREAD	int
;	O
break	O
;	O
case	O
3	int
:	O
OREAD	int
=	O
!	O
OREAD	int
;	O
break	O
;	O
case	O
4	int
:	O
UWRITE	int
=	O
!	O
UWRITE	int
;	O
break	O
;	O
case	O
5	int
:	O
GWRITE	int
=	O
!	O
GWRITE	int
;	O
break	O
;	O
case	O
6	int
:	O
OWRITE	int
=	O
!	O
OWRITE	int
;	O
break	O
;	O
case	O
7	int
:	O
UEXECUTE	int
=	O
!	O
UEXECUTE	int
;	O
break	O
;	O
case	O
8	int
:	O
GEXECUTE	int
=	O
!	O
GEXECUTE	int
;	O
break	O
;	O
case	O
9	int
:	O
OEXECUTE	int
=	O
!	O
OEXECUTE	int
;	O
break	O
;	O
case	O
11	int
:	O
endme	int
=	O
1	int
;	O
break	O
;	O
case	O
10	int
:	O
mode	int
=	O
00	int
;	O
if	O
(	O
UREAD	int
)	O
mode	int
+=	O
0400	int
;	O
if	O
(	O
UWRITE	int
)	O
mode	int
+=	O
0200	int
;	O
if	O
(	O
UEXECUTE	int
)	O
mode	int
+=	O
0100	int
;	O
if	O
(	O
GREAD	int
)	O
mode	int
+=	O
040	int
;	O
if	O
(	O
GWRITE	int
)	O
mode	int
+=	O
020	int
;	O
if	O
(	O
GEXECUTE	int
)	O
mode	int
+=	O
010	int
;	O
if	O
(	O
OREAD	int
)	O
mode	int
+=	O
04	int
;	O
if	O
(	O
OWRITE	int
)	O
mode	int
+=	O
02	int
;	O
if	O
(	O
OEXECUTE	int
)	O
mode	int
+=	O
01	int
;	O
if	O
(	O
chmod	function
(	O
dir	pointer
->	O
name	pointer
,	O
mode	int
)	O
!=	O
0	int
)	O
{	O
msgBoxH	function
(	O
strerror	function
(	O
errno	O
)	O
,	O
OK	int
,	O
ERROR	int
)	O
;	O
}	O
if	O
(	O
NAME_CHANGED	int
)	O
{	O
if	O
(	O
rename	function
(	O
dir	pointer
->	O
name	pointer
,	O
name	pointer
)	O
!=	O
0	int
)	O
msgBoxH	function
(	O
strerror	function
(	O
errno	O
)	O
,	O
OK	int
,	O
ERROR	int
)	O
;	O
}	O
endme	int
=	O
1	int
;	O
break	O
;	O
}	O
break	O
;	O
}	O
refreshPropertiesDialog	function
(	O
name	pointer
)	O
;	O
}	O
free	function
(	O
name	pointer
)	O
;	O
hideCursor	function
(	O
)	O
;	O
}	O
