ATTR_NO_RETRUN	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Try `%s --help' for more information.\n"	pointer
,	O
program_name	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
"Usage: %s [OPTION] DEFINITIONS ASSIGNMENTS\n"	pointer
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
"Generates a DER encoding of ASN.1 DEFINITIONS file\nand ASSIGNMENTS file with value assignments.\n\n"	pointer
)	O
;	O
printf	function
(	O
"Mandatory arguments to long options are mandatory for short options too.\n  -c, --check           checks the syntax only\n  -o, --output=FILE     output file\n  -h, --help            display this help and exit\n  -v, --version         output version information and exit\n"	pointer
)	O
;	O
printf	function
(	O
"Report bugs to "	pointer
PACKAGE_BUGREPORT	pointer
)	O
;	O
}	O
exit	function
(	O
status	int
)	O
;	O
}	O
static	O
int	O
readAssignment	function
(	O
FILE	struct
*	O
file	pointer
,	O
char	O
*	O
varName	pointer
,	O
char	O
*	O
value	pointer
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
fscanf	function
(	O
file	pointer
,	O
"%s"	pointer
,	O
varName	pointer
)	O
;	O
if	O
(	O
ret	int
==	O
EOF	O
)	O
return	O
ASSIGNMENT_EOF	int
;	O
if	O
(	O
!	O
strcmp	function
(	O
varName	pointer
,	O
"''"	pointer
)	O
)	O
varName	pointer
[	O
0	int
]	O
=	O
0	int
;	O
ret	int
=	O
fscanf	function
(	O
file	pointer
,	O
"%s"	pointer
,	O
value	pointer
)	O
;	O
if	O
(	O
ret	int
==	O
EOF	O
)	O
return	O
ASSIGNMENT_ERROR	int
;	O
return	O
ASSIGNMENT_SUCCESS	int
;	O
}	O
static	O
void	O
createFileName	function
(	O
char	O
*	O
inputFileName	pointer
,	O
char	O
*	O
*	O
outputFileName	pointer
)	O
{	O
char	O
*	O
char_p	pointer
,	O
*	O
slash_p	pointer
,	O
*	O
dot_p	pointer
;	O
char_p	pointer
=	O
inputFileName	pointer
;	O
slash_p	pointer
=	O
inputFileName	pointer
;	O
while	O
(	O
(	O
char_p	pointer
=	O
strchr	function
(	O
char_p	pointer
,	O
'/'	O
)	O
)	O
)	O
{	O
char_p	pointer
++	O
;	O
slash_p	pointer
=	O
char_p	pointer
;	O
}	O
char_p	pointer
=	O
slash_p	pointer
;	O
dot_p	pointer
=	O
inputFileName	pointer
+	O
strlen	function
(	O
inputFileName	pointer
)	O
;	O
while	O
(	O
(	O
char_p	pointer
=	O
strchr	function
(	O
char_p	pointer
,	O
'.'	O
)	O
)	O
)	O
{	O
dot_p	pointer
=	O
char_p	pointer
;	O
char_p	pointer
++	O
;	O
}	O
*	O
outputFileName	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
dot_p	pointer
-	O
inputFileName	pointer
+	O
1	int
+	O
strlen	function
(	O
".out"	pointer
)	O
)	O
;	O
if	O
(	O
*	O
outputFileName	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Memory error\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
memcpy	function
(	O
*	O
outputFileName	pointer
,	O
inputFileName	pointer
,	O
dot_p	pointer
-	O
inputFileName	pointer
)	O
;	O
(	O
*	O
outputFileName	pointer
)	O
[	O
dot_p	pointer
-	O
inputFileName	pointer
]	O
=	O
0	int
;	O
strcat	function
(	O
*	O
outputFileName	pointer
,	O
".out"	pointer
)	O
;	O
return	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
static	O
const	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'h'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'v'	O
}	O
,	O
{	O
"check"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'c'	O
}	O
,	O
{	O
"output"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'o'	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
int	O
option_index	int
=	O
0	int
;	O
int	O
option_result	int
;	O
char	O
*	O
outputFileName	pointer
=	O
NULL	O
;	O
char	O
*	O
inputFileAsnName	pointer
=	O
NULL	O
;	O
char	O
*	O
inputFileAssignmentName	pointer
=	O
NULL	O
;	O
int	O
checkSyntaxOnly	int
=	O
0	int
;	O
asn1_node	pointer
definitions	pointer
=	O
NULL	O
;	O
asn1_node	pointer
structure	pointer
=	O
NULL	O
;	O
char	O
errorDescription	pointer
[	O
ASN1_MAX_ERROR_DESCRIPTION_SIZE	int
]	O
;	O
int	O
asn1_result	int
=	O
ASN1_SUCCESS	int
;	O
FILE	struct
*	O
outputFile	pointer
;	O
FILE	struct
*	O
inputFile	pointer
;	O
char	O
varName	pointer
[	O
1024	int
]	O
;	O
char	O
value	pointer
[	O
1024	int
]	O
;	O
unsigned	O
char	O
*	O
der	pointer
=	O
NULL	O
;	O
int	O
der_len	int
;	O
int	O
k	int
;	O
int	O
last_ra	int
;	O
opterr	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
option_result	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
"hvco:"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
option_result	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
option_result	int
)	O
{	O
case	O
'h'	O
:	O
free	function
(	O
outputFileName	pointer
)	O
;	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
printf	function
(	O
program_name	pointer
" "	pointer
PACKAGE	pointer
" "	pointer
VERSION	pointer
"\n"	pointer
)	O
;	O
printf	function
(	O
"Copyright (C) 2017-2019 Free Software Foundation, Inc.\n\n"	pointer
)	O
;	O
printf	function
(	O
"Written by Fabio Fiorina\n"	pointer
)	O
;	O
free	function
(	O
outputFileName	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
checkSyntaxOnly	int
=	O
1	int
;	O
break	O
;	O
case	O
'o'	O
:	O
assert	O
(	O
optarg	pointer
!=	O
NULL	O
)	O
;	O
outputFileName	pointer
=	O
strdup	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
outputFileName	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Memory error\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'?'	O
:	O
free	function
(	O
outputFileName	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Coding: option '%s' not recognized or without argument.\n\n"	pointer
,	O
argv	array
[	O
optind	int
-	O
1	int
]	O
)	O
;	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Coding: ?? getopt returned character code Ox%x ??\n"	pointer
,	O
(	O
unsigned	O
)	O
option_result	int
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
==	O
argc	int
||	O
optind	int
==	O
argc	int
-	O
1	int
)	O
{	O
free	function
(	O
outputFileName	pointer
)	O
;	O
fputs	function
(	O
"asn1Coding: input files missing\n"	pointer
,	O
stderr	pointer
)	O
;	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
inputFileAsnName	pointer
=	O
strdup	function
(	O
argv	array
[	O
optind	int
]	O
)	O
;	O
if	O
(	O
inputFileAsnName	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Memory error\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
inputFileAssignmentName	pointer
=	O
strdup	function
(	O
argv	array
[	O
optind	int
+	O
1	int
]	O
)	O
;	O
if	O
(	O
inputFileAssignmentName	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Memory error\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
asn1_result	int
=	O
asn1_parser2tree	function
(	O
inputFileAsnName	pointer
,	O
&	O
definitions	pointer
,	O
errorDescription	pointer
)	O
;	O
switch	O
(	O
asn1_result	int
)	O
{	O
case	O
ASN1_SUCCESS	int
:	O
fputs	function
(	O
"Parse: done.\n"	pointer
,	O
stderr	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_FILE_NOT_FOUND	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Coding: FILE %s NOT FOUND\n"	pointer
,	O
inputFileAsnName	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_SYNTAX_ERROR	int
:	O
case	O
ASN1_IDENTIFIER_NOT_FOUND	int
:	O
case	O
ASN1_NAME_TOO_LONG	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Coding: %s\n"	pointer
,	O
errorDescription	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"libtasn1 ERROR: %s\n"	pointer
,	O
asn1_strerror	function
(	O
asn1_result	int
)	O
)	O
;	O
}	O
if	O
(	O
asn1_result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
free	function
(	O
inputFileAsnName	pointer
)	O
;	O
free	function
(	O
inputFileAssignmentName	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
inputFile	pointer
=	O
fopen	function
(	O
inputFileAssignmentName	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
inputFile	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Coding: file '%s' not found\n"	pointer
,	O
inputFileAssignmentName	pointer
)	O
;	O
free	function
(	O
inputFileAsnName	pointer
)	O
;	O
free	function
(	O
inputFileAssignmentName	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
while	O
(	O
(	O
last_ra	int
=	O
readAssignment	function
(	O
inputFile	pointer
,	O
varName	pointer
,	O
value	pointer
)	O
)	O
==	O
ASSIGNMENT_SUCCESS	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"var=%s, value=%s\n"	pointer
,	O
varName	pointer
,	O
value	pointer
)	O
;	O
if	O
(	O
structure	pointer
==	O
NULL	O
)	O
{	O
asn1_result	int
=	O
asn1_create_element	function
(	O
definitions	pointer
,	O
value	pointer
,	O
&	O
structure	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"(NULL)"	pointer
)	O
==	O
0	int
)	O
asn1_result	int
=	O
asn1_write_value	function
(	O
structure	pointer
,	O
varName	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
else	O
asn1_result	int
=	O
asn1_write_value	function
(	O
structure	pointer
,	O
varName	pointer
,	O
value	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
asn1_result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"libtasn1 ERROR: %s\n"	pointer
,	O
asn1_strerror	function
(	O
asn1_result	int
)	O
)	O
;	O
asn1_delete_structure	function
(	O
&	O
definitions	pointer
)	O
;	O
asn1_delete_structure	function
(	O
&	O
structure	pointer
)	O
;	O
free	function
(	O
inputFileAsnName	pointer
)	O
;	O
free	function
(	O
inputFileAssignmentName	pointer
)	O
;	O
fclose	function
(	O
inputFile	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
last_ra	int
!=	O
ASSIGNMENT_EOF	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Coding: error reading assignment file\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fclose	function
(	O
inputFile	pointer
)	O
;	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
asn1_print_structure	function
(	O
stderr	pointer
,	O
structure	pointer
,	O
""	pointer
,	O
ASN1_PRINT_NAME_TYPE_VALUE	int
)	O
;	O
der_len	int
=	O
0	int
;	O
asn1_result	int
=	O
asn1_der_coding	function
(	O
structure	pointer
,	O
""	pointer
,	O
NULL	O
,	O
&	O
der_len	int
,	O
errorDescription	pointer
)	O
;	O
if	O
(	O
asn1_result	int
==	O
ASN1_MEM_ERROR	int
)	O
{	O
der	pointer
=	O
malloc	function
(	O
der_len	int
)	O
;	O
if	O
(	O
der	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Memory error\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
asn1_result	int
=	O
asn1_der_coding	function
(	O
structure	pointer
,	O
""	pointer
,	O
der	pointer
,	O
&	O
der_len	int
,	O
errorDescription	pointer
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"\nCoding: %s\n\n"	pointer
,	O
asn1_strerror	function
(	O
asn1_result	int
)	O
)	O
;	O
if	O
(	O
asn1_result	int
!=	O
ASN1_SUCCESS	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Coding: %s\n"	pointer
,	O
errorDescription	pointer
)	O
;	O
free	function
(	O
der	pointer
)	O
;	O
asn1_delete_structure	function
(	O
&	O
definitions	pointer
)	O
;	O
asn1_delete_structure	function
(	O
&	O
structure	pointer
)	O
;	O
free	function
(	O
inputFileAsnName	pointer
)	O
;	O
free	function
(	O
inputFileAssignmentName	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"-----------------\nNumber of bytes=%i\n"	pointer
,	O
der_len	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
der_len	int
;	O
k	int
++	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%02x "	pointer
,	O
der	pointer
[	O
k	int
]	O
)	O
;	O
fputs	function
(	O
"\n-----------------\n"	pointer
,	O
stderr	pointer
)	O
;	O
asn1_delete_structure	function
(	O
&	O
definitions	pointer
)	O
;	O
asn1_delete_structure	function
(	O
&	O
structure	pointer
)	O
;	O
if	O
(	O
!	O
checkSyntaxOnly	int
)	O
{	O
if	O
(	O
outputFileName	pointer
==	O
NULL	O
)	O
createFileName	function
(	O
inputFileAssignmentName	pointer
,	O
&	O
outputFileName	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutputFile=%s\n"	pointer
,	O
outputFileName	pointer
)	O
;	O
outputFile	pointer
=	O
fopen	function
(	O
outputFileName	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
outputFile	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"asn1Coding: output file '%s' not available\n"	pointer
,	O
outputFileName	pointer
)	O
;	O
free	function
(	O
der	pointer
)	O
;	O
free	function
(	O
inputFileAsnName	pointer
)	O
;	O
free	function
(	O
inputFileAssignmentName	pointer
)	O
;	O
free	function
(	O
outputFileName	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
der_len	int
;	O
k	int
++	O
)	O
fprintf	function
(	O
outputFile	pointer
,	O
"%c"	pointer
,	O
der	pointer
[	O
k	int
]	O
)	O
;	O
fclose	function
(	O
outputFile	pointer
)	O
;	O
fputs	function
(	O
"\nWriting: done.\n"	pointer
,	O
stderr	pointer
)	O
;	O
}	O
free	function
(	O
der	pointer
)	O
;	O
free	function
(	O
inputFileAsnName	pointer
)	O
;	O
free	function
(	O
inputFileAssignmentName	pointer
)	O
;	O
free	function
(	O
outputFileName	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
