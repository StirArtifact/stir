static	O
unsigned	O
long	O
higher_prime_number	function
(	O
unsigned	O
long	O
n	long
)	O
{	O
static	O
const	O
unsigned	O
long	O
primes	array
[	O
]	O
=	O
{	O
(	O
unsigned	O
long	O
)	O
31	int
,	O
(	O
unsigned	O
long	O
)	O
61	int
,	O
(	O
unsigned	O
long	O
)	O
127	int
,	O
(	O
unsigned	O
long	O
)	O
251	int
,	O
(	O
unsigned	O
long	O
)	O
509	int
,	O
(	O
unsigned	O
long	O
)	O
1021	int
,	O
(	O
unsigned	O
long	O
)	O
2039	int
,	O
(	O
unsigned	O
long	O
)	O
4093	int
,	O
(	O
unsigned	O
long	O
)	O
8191	int
,	O
(	O
unsigned	O
long	O
)	O
16381	int
,	O
(	O
unsigned	O
long	O
)	O
32749	int
,	O
(	O
unsigned	O
long	O
)	O
65521	int
,	O
(	O
unsigned	O
long	O
)	O
131071	int
,	O
(	O
unsigned	O
long	O
)	O
262139	int
,	O
(	O
unsigned	O
long	O
)	O
524287	int
,	O
(	O
unsigned	O
long	O
)	O
1048573	int
,	O
(	O
unsigned	O
long	O
)	O
2097143	int
,	O
(	O
unsigned	O
long	O
)	O
4194301	int
,	O
(	O
unsigned	O
long	O
)	O
8388593	int
,	O
(	O
unsigned	O
long	O
)	O
16777213	int
,	O
(	O
unsigned	O
long	O
)	O
33554393	int
,	O
(	O
unsigned	O
long	O
)	O
67108859	int
,	O
(	O
unsigned	O
long	O
)	O
134217689	int
,	O
(	O
unsigned	O
long	O
)	O
268435399	int
,	O
(	O
unsigned	O
long	O
)	O
536870909	int
,	O
(	O
unsigned	O
long	O
)	O
1073741789	int
,	O
(	O
unsigned	O
long	O
)	O
2147483647	int
,	O
(	O
(	O
unsigned	O
long	O
)	O
2147483647	int
)	O
+	O
(	O
(	O
unsigned	O
long	O
)	O
2147483644	int
)	O
,	O
}	O
;	O
const	O
unsigned	O
long	O
*	O
low	pointer
=	O
&	O
primes	array
[	O
0	int
]	O
;	O
const	O
unsigned	O
long	O
*	O
high	pointer
=	O
&	O
primes	array
[	O
sizeof	O
(	O
primes	array
)	O
/	O
sizeof	O
(	O
primes	array
[	O
0	int
]	O
)	O
]	O
;	O
while	O
(	O
low	pointer
!=	O
high	pointer
)	O
{	O
const	O
unsigned	O
long	O
*	O
mid	pointer
=	O
low	pointer
+	O
(	O
high	pointer
-	O
low	pointer
)	O
/	O
2	int
;	O
if	O
(	O
n	long
>=	O
*	O
mid	pointer
)	O
low	pointer
=	O
mid	pointer
+	O
1	int
;	O
else	O
high	pointer
=	O
mid	pointer
;	O
}	O
if	O
(	O
n	long
>=	O
*	O
low	pointer
)	O
return	O
0	int
;	O
return	O
*	O
low	pointer
;	O
}	O
static	O
unsigned	O
long	O
bfd_default_hash_table_size	long
=	O
DEFAULT_SIZE	int
;	O
bfd_boolean	int
bfd_hash_table_init_n	function
(	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
struct	O
bfd_hash_entry	struct
*	O
(	O
*	O
newfunc	pointer
)	O
(	O
struct	O
bfd_hash_entry	struct
*	O
,	O
struct	O
bfd_hash_table	struct
*	O
,	O
const	O
char	O
*	O
)	O
,	O
unsigned	O
int	O
entsize	int
,	O
unsigned	O
int	O
size	long
)	O
{	O
unsigned	O
long	O
alloc	long
;	O
alloc	long
=	O
size	long
;	O
alloc	long
*=	O
sizeof	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
;	O
if	O
(	O
alloc	long
/	O
sizeof	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
!=	O
size	long
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
table	pointer
->	O
memory	pointer
=	O
(	O
void	O
*	O
)	O
objalloc_create	function
(	O
)	O
;	O
if	O
(	O
table	pointer
->	O
memory	pointer
==	O
NULL	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
table	pointer
->	O
table	pointer
=	O
(	O
struct	O
bfd_hash_entry	struct
*	O
*	O
)	O
objalloc_alloc	O
(	O
(	O
struct	O
objalloc	struct
*	O
)	O
table	pointer
->	O
memory	pointer
,	O
alloc	long
)	O
;	O
if	O
(	O
table	pointer
->	O
table	pointer
==	O
NULL	O
)	O
{	O
bfd_hash_table_free	function
(	O
table	pointer
)	O
;	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
FALSE	int
;	O
}	O
memset	function
(	O
(	O
void	O
*	O
)	O
table	pointer
->	O
table	pointer
,	O
0	int
,	O
alloc	long
)	O
;	O
table	pointer
->	O
size	long
=	O
size	long
;	O
table	pointer
->	O
entsize	int
=	O
entsize	int
;	O
table	pointer
->	O
count	int
=	O
0	int
;	O
table	pointer
->	O
frozen	int
=	O
0	int
;	O
table	pointer
->	O
newfunc	pointer
=	O
newfunc	pointer
;	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
bfd_hash_table_init	function
(	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
struct	O
bfd_hash_entry	struct
*	O
(	O
*	O
newfunc	pointer
)	O
(	O
struct	O
bfd_hash_entry	struct
*	O
,	O
struct	O
bfd_hash_table	struct
*	O
,	O
const	O
char	O
*	O
)	O
,	O
unsigned	O
int	O
entsize	int
)	O
{	O
return	O
bfd_hash_table_init_n	function
(	O
table	pointer
,	O
newfunc	pointer
,	O
entsize	int
,	O
bfd_default_hash_table_size	long
)	O
;	O
}	O
void	O
bfd_hash_table_free	function
(	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
)	O
{	O
objalloc_free	function
(	O
(	O
struct	O
objalloc	struct
*	O
)	O
table	pointer
->	O
memory	pointer
)	O
;	O
table	pointer
->	O
memory	pointer
=	O
NULL	O
;	O
}	O
static	O
inline	O
unsigned	O
long	O
bfd_hash_hash	function
(	O
const	O
char	O
*	O
string	pointer
,	O
unsigned	O
int	O
*	O
lenp	pointer
)	O
{	O
const	O
unsigned	O
char	O
*	O
s	pointer
;	O
unsigned	O
long	O
hash	long
;	O
unsigned	O
int	O
len	long
;	O
unsigned	O
int	O
c	int
;	O
BFD_ASSERT	O
(	O
string	pointer
!=	O
NULL	O
)	O
;	O
hash	long
=	O
0	int
;	O
len	long
=	O
0	int
;	O
s	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
string	pointer
;	O
while	O
(	O
(	O
c	int
=	O
*	O
s	pointer
++	O
)	O
!=	O
'\0'	O
)	O
{	O
hash	long
+=	O
c	int
+	O
(	O
c	int
<<	O
17	int
)	O
;	O
hash	long
^=	O
hash	long
>>	O
2	int
;	O
}	O
len	long
=	O
(	O
s	pointer
-	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
string	pointer
)	O
-	O
1	int
;	O
hash	long
+=	O
len	long
+	O
(	O
len	long
<<	O
17	int
)	O
;	O
hash	long
^=	O
hash	long
>>	O
2	int
;	O
if	O
(	O
lenp	pointer
!=	O
NULL	O
)	O
*	O
lenp	pointer
=	O
len	long
;	O
return	O
hash	long
;	O
}	O
struct	O
bfd_hash_entry	struct
*	O
bfd_hash_lookup	function
(	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
,	O
bfd_boolean	int
create	int
,	O
bfd_boolean	int
copy	int
)	O
{	O
unsigned	O
long	O
hash	long
;	O
struct	O
bfd_hash_entry	struct
*	O
hashp	pointer
;	O
unsigned	O
int	O
len	long
;	O
unsigned	O
int	O
_index	int
;	O
hash	long
=	O
bfd_hash_hash	function
(	O
string	pointer
,	O
&	O
len	long
)	O
;	O
_index	int
=	O
hash	long
%	O
table	pointer
->	O
size	long
;	O
for	O
(	O
hashp	pointer
=	O
table	pointer
->	O
table	pointer
[	O
_index	int
]	O
;	O
hashp	pointer
!=	O
NULL	O
;	O
hashp	pointer
=	O
hashp	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
hashp	pointer
->	O
hash	long
==	O
hash	long
&&	O
strcmp	function
(	O
hashp	pointer
->	O
string	pointer
,	O
string	pointer
)	O
==	O
0	int
)	O
return	O
hashp	pointer
;	O
}	O
if	O
(	O
!	O
create	int
)	O
return	O
NULL	O
;	O
if	O
(	O
copy	int
)	O
{	O
char	O
*	O
new_string	pointer
;	O
new_string	pointer
=	O
(	O
char	O
*	O
)	O
objalloc_alloc	O
(	O
(	O
struct	O
objalloc	struct
*	O
)	O
table	pointer
->	O
memory	pointer
,	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
new_string	pointer
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memcpy	function
(	O
new_string	pointer
,	O
string	pointer
,	O
len	long
+	O
1	int
)	O
;	O
string	pointer
=	O
new_string	pointer
;	O
}	O
return	O
bfd_hash_insert	function
(	O
table	pointer
,	O
string	pointer
,	O
hash	long
)	O
;	O
}	O
struct	O
bfd_hash_entry	struct
*	O
bfd_hash_insert	function
(	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
,	O
unsigned	O
long	O
hash	long
)	O
{	O
struct	O
bfd_hash_entry	struct
*	O
hashp	pointer
;	O
unsigned	O
int	O
_index	int
;	O
hashp	pointer
=	O
(	O
*	O
table	pointer
->	O
newfunc	pointer
)	O
(	O
NULL	O
,	O
table	pointer
,	O
string	pointer
)	O
;	O
if	O
(	O
hashp	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
hashp	pointer
->	O
string	pointer
=	O
string	pointer
;	O
hashp	pointer
->	O
hash	long
=	O
hash	long
;	O
_index	int
=	O
hash	long
%	O
table	pointer
->	O
size	long
;	O
hashp	pointer
->	O
next	pointer
=	O
table	pointer
->	O
table	pointer
[	O
_index	int
]	O
;	O
table	pointer
->	O
table	pointer
[	O
_index	int
]	O
=	O
hashp	pointer
;	O
table	pointer
->	O
count	int
++	O
;	O
if	O
(	O
!	O
table	pointer
->	O
frozen	int
&&	O
table	pointer
->	O
count	int
>	O
table	pointer
->	O
size	long
*	O
3	int
/	O
4	int
)	O
{	O
unsigned	O
long	O
newsize	long
=	O
higher_prime_number	function
(	O
table	pointer
->	O
size	long
)	O
;	O
struct	O
bfd_hash_entry	struct
*	O
*	O
newtable	pointer
;	O
unsigned	O
int	O
hi	int
;	O
unsigned	O
long	O
alloc	long
=	O
newsize	long
*	O
sizeof	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
;	O
if	O
(	O
newsize	long
==	O
0	int
||	O
alloc	long
/	O
sizeof	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
!=	O
newsize	long
)	O
{	O
table	pointer
->	O
frozen	int
=	O
1	int
;	O
return	O
hashp	pointer
;	O
}	O
newtable	pointer
=	O
(	O
(	O
struct	O
bfd_hash_entry	struct
*	O
*	O
)	O
objalloc_alloc	O
(	O
(	O
struct	O
objalloc	struct
*	O
)	O
table	pointer
->	O
memory	pointer
,	O
alloc	long
)	O
)	O
;	O
if	O
(	O
newtable	pointer
==	O
NULL	O
)	O
{	O
table	pointer
->	O
frozen	int
=	O
1	int
;	O
return	O
hashp	pointer
;	O
}	O
memset	function
(	O
newtable	pointer
,	O
0	int
,	O
alloc	long
)	O
;	O
for	O
(	O
hi	int
=	O
0	int
;	O
hi	int
<	O
table	pointer
->	O
size	long
;	O
hi	int
++	O
)	O
while	O
(	O
table	pointer
->	O
table	pointer
[	O
hi	int
]	O
)	O
{	O
struct	O
bfd_hash_entry	struct
*	O
chain	pointer
=	O
table	pointer
->	O
table	pointer
[	O
hi	int
]	O
;	O
struct	O
bfd_hash_entry	struct
*	O
chain_end	pointer
=	O
chain	pointer
;	O
while	O
(	O
chain_end	pointer
->	O
next	pointer
&&	O
chain_end	pointer
->	O
next	pointer
->	O
hash	long
==	O
chain	pointer
->	O
hash	long
)	O
chain_end	pointer
=	O
chain_end	pointer
->	O
next	pointer
;	O
table	pointer
->	O
table	pointer
[	O
hi	int
]	O
=	O
chain_end	pointer
->	O
next	pointer
;	O
_index	int
=	O
chain	pointer
->	O
hash	long
%	O
newsize	long
;	O
chain_end	pointer
->	O
next	pointer
=	O
newtable	pointer
[	O
_index	int
]	O
;	O
newtable	pointer
[	O
_index	int
]	O
=	O
chain	pointer
;	O
}	O
table	pointer
->	O
table	pointer
=	O
newtable	pointer
;	O
table	pointer
->	O
size	long
=	O
newsize	long
;	O
}	O
return	O
hashp	pointer
;	O
}	O
void	O
bfd_hash_rename	function
(	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
,	O
struct	O
bfd_hash_entry	struct
*	O
ent	pointer
)	O
{	O
unsigned	O
int	O
_index	int
;	O
struct	O
bfd_hash_entry	struct
*	O
*	O
pph	pointer
;	O
_index	int
=	O
ent	pointer
->	O
hash	long
%	O
table	pointer
->	O
size	long
;	O
for	O
(	O
pph	pointer
=	O
&	O
table	pointer
->	O
table	pointer
[	O
_index	int
]	O
;	O
*	O
pph	pointer
!=	O
NULL	O
;	O
pph	pointer
=	O
&	O
(	O
*	O
pph	pointer
)	O
->	O
next	pointer
)	O
if	O
(	O
*	O
pph	pointer
==	O
ent	pointer
)	O
break	O
;	O
if	O
(	O
*	O
pph	pointer
==	O
NULL	O
)	O
abort	function
(	O
)	O
;	O
*	O
pph	pointer
=	O
ent	pointer
->	O
next	pointer
;	O
ent	pointer
->	O
string	pointer
=	O
string	pointer
;	O
ent	pointer
->	O
hash	long
=	O
bfd_hash_hash	function
(	O
string	pointer
,	O
NULL	O
)	O
;	O
_index	int
=	O
ent	pointer
->	O
hash	long
%	O
table	pointer
->	O
size	long
;	O
ent	pointer
->	O
next	pointer
=	O
table	pointer
->	O
table	pointer
[	O
_index	int
]	O
;	O
table	pointer
->	O
table	pointer
[	O
_index	int
]	O
=	O
ent	pointer
;	O
}	O
void	O
bfd_hash_replace	function
(	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
struct	O
bfd_hash_entry	struct
*	O
old	pointer
,	O
struct	O
bfd_hash_entry	struct
*	O
nw	pointer
)	O
{	O
unsigned	O
int	O
_index	int
;	O
struct	O
bfd_hash_entry	struct
*	O
*	O
pph	pointer
;	O
_index	int
=	O
old	pointer
->	O
hash	long
%	O
table	pointer
->	O
size	long
;	O
for	O
(	O
pph	pointer
=	O
&	O
table	pointer
->	O
table	pointer
[	O
_index	int
]	O
;	O
(	O
*	O
pph	pointer
)	O
!=	O
NULL	O
;	O
pph	pointer
=	O
&	O
(	O
*	O
pph	pointer
)	O
->	O
next	pointer
)	O
{	O
if	O
(	O
*	O
pph	pointer
==	O
old	pointer
)	O
{	O
*	O
pph	pointer
=	O
nw	pointer
;	O
return	O
;	O
}	O
}	O
abort	function
(	O
)	O
;	O
}	O
void	O
*	O
bfd_hash_allocate	function
(	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
unsigned	O
int	O
size	long
)	O
{	O
void	O
*	O
ret	pointer
;	O
ret	pointer
=	O
objalloc_alloc	O
(	O
(	O
struct	O
objalloc	struct
*	O
)	O
table	pointer
->	O
memory	pointer
,	O
size	long
)	O
;	O
if	O
(	O
ret	pointer
==	O
NULL	O
&&	O
size	long
!=	O
0	int
)	O
bfd_set_error	function
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
ret	pointer
;	O
}	O
struct	O
bfd_hash_entry	struct
*	O
bfd_hash_newfunc	function
(	O
struct	O
bfd_hash_entry	struct
*	O
entry	pointer
,	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
entry	pointer
=	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
bfd_hash_allocate	function
(	O
table	pointer
,	O
sizeof	O
(	O
*	O
entry	pointer
)	O
)	O
;	O
return	O
entry	pointer
;	O
}	O
void	O
bfd_hash_traverse	function
(	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
bfd_boolean	int
(	O
*	O
func	pointer
)	O
(	O
struct	O
bfd_hash_entry	struct
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
info	pointer
)	O
{	O
unsigned	O
int	O
i	pointer
;	O
table	pointer
->	O
frozen	int
=	O
1	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
table	pointer
->	O
size	long
;	O
i	pointer
++	O
)	O
{	O
struct	O
bfd_hash_entry	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
table	pointer
->	O
table	pointer
[	O
i	pointer
]	O
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
!	O
(	O
*	O
func	pointer
)	O
(	O
p	pointer
,	O
info	pointer
)	O
)	O
goto	O
out	O
;	O
}	O
out	O
:	O
table	pointer
->	O
frozen	int
=	O
0	int
;	O
}	O
unsigned	O
long	O
bfd_hash_set_default_size	function
(	O
unsigned	O
long	O
hash_size	long
)	O
{	O
static	O
const	O
unsigned	O
long	O
hash_size_primes	array
[	O
]	O
=	O
{	O
31	int
,	O
61	int
,	O
127	int
,	O
251	int
,	O
509	int
,	O
1021	int
,	O
2039	int
,	O
4091	int
,	O
8191	int
,	O
16381	int
,	O
32749	int
,	O
65537	int
}	O
;	O
unsigned	O
int	O
_index	int
;	O
for	O
(	O
_index	int
=	O
0	int
;	O
_index	int
<	O
ARRAY_SIZE	O
(	O
hash_size_primes	array
)	O
-	O
1	int
;	O
++	O
_index	int
)	O
if	O
(	O
hash_size	long
<=	O
hash_size_primes	array
[	O
_index	int
]	O
)	O
break	O
;	O
bfd_default_hash_table_size	long
=	O
hash_size_primes	array
[	O
_index	int
]	O
;	O
return	O
bfd_default_hash_table_size	long
;	O
}	O
struct	O
strtab_hash_entry	struct
{	O
struct	O
bfd_hash_entry	struct
root	struct
;	O
bfd_size_type	long
index	function
;	O
struct	O
strtab_hash_entry	struct
*	O
next	pointer
;	O
}	O
;	O
struct	O
bfd_strtab_hash	struct
{	O
struct	O
bfd_hash_table	struct
table	pointer
;	O
bfd_size_type	long
size	long
;	O
struct	O
strtab_hash_entry	struct
*	O
first	pointer
;	O
struct	O
strtab_hash_entry	struct
*	O
last	pointer
;	O
bfd_boolean	int
xcoff	int
;	O
}	O
;	O
static	O
struct	O
bfd_hash_entry	struct
*	O
strtab_hash_newfunc	function
(	O
struct	O
bfd_hash_entry	struct
*	O
entry	pointer
,	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
)	O
{	O
struct	O
strtab_hash_entry	struct
*	O
ret	pointer
=	O
(	O
struct	O
strtab_hash_entry	struct
*	O
)	O
entry	pointer
;	O
if	O
(	O
ret	pointer
==	O
NULL	O
)	O
ret	pointer
=	O
(	O
struct	O
strtab_hash_entry	struct
*	O
)	O
bfd_hash_allocate	function
(	O
table	pointer
,	O
sizeof	O
(	O
*	O
ret	pointer
)	O
)	O
;	O
if	O
(	O
ret	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
ret	pointer
=	O
(	O
struct	O
strtab_hash_entry	struct
*	O
)	O
bfd_hash_newfunc	function
(	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
ret	pointer
,	O
table	pointer
,	O
string	pointer
)	O
;	O
if	O
(	O
ret	pointer
)	O
{	O
ret	pointer
->	O
index	function
=	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
ret	pointer
->	O
next	pointer
=	O
NULL	O
;	O
}	O
return	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
ret	pointer
;	O
}	O
struct	O
bfd_strtab_hash	struct
*	O
_bfd_stringtab_init	function
(	O
void	O
)	O
{	O
struct	O
bfd_strtab_hash	struct
*	O
table	pointer
;	O
bfd_size_type	long
amt	long
=	O
sizeof	O
(	O
*	O
table	pointer
)	O
;	O
table	pointer
=	O
(	O
struct	O
bfd_strtab_hash	struct
*	O
)	O
bfd_malloc	function
(	O
amt	long
)	O
;	O
if	O
(	O
table	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
bfd_hash_table_init	function
(	O
&	O
table	pointer
->	O
table	pointer
,	O
strtab_hash_newfunc	function
,	O
sizeof	O
(	O
struct	O
strtab_hash_entry	struct
)	O
)	O
)	O
{	O
free	function
(	O
table	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
table	pointer
->	O
size	long
=	O
0	int
;	O
table	pointer
->	O
first	pointer
=	O
NULL	O
;	O
table	pointer
->	O
last	pointer
=	O
NULL	O
;	O
table	pointer
->	O
xcoff	int
=	O
FALSE	int
;	O
return	O
table	pointer
;	O
}	O
struct	O
bfd_strtab_hash	struct
*	O
_bfd_xcoff_stringtab_init	function
(	O
void	O
)	O
{	O
struct	O
bfd_strtab_hash	struct
*	O
ret	pointer
;	O
ret	pointer
=	O
_bfd_stringtab_init	function
(	O
)	O
;	O
if	O
(	O
ret	pointer
!=	O
NULL	O
)	O
ret	pointer
->	O
xcoff	int
=	O
TRUE	int
;	O
return	O
ret	pointer
;	O
}	O
void	O
_bfd_stringtab_free	function
(	O
struct	O
bfd_strtab_hash	struct
*	O
table	pointer
)	O
{	O
bfd_hash_table_free	function
(	O
&	O
table	pointer
->	O
table	pointer
)	O
;	O
free	function
(	O
table	pointer
)	O
;	O
}	O
bfd_size_type	long
_bfd_stringtab_add	function
(	O
struct	O
bfd_strtab_hash	struct
*	O
tab	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
bfd_boolean	int
hash	long
,	O
bfd_boolean	int
copy	int
)	O
{	O
struct	O
strtab_hash_entry	struct
*	O
entry	pointer
;	O
if	O
(	O
hash	long
)	O
{	O
entry	pointer
=	O
strtab_hash_lookup	O
(	O
tab	pointer
,	O
str	pointer
,	O
TRUE	int
,	O
copy	int
)	O
;	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
return	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
}	O
else	O
{	O
entry	pointer
=	O
(	O
struct	O
strtab_hash_entry	struct
*	O
)	O
bfd_hash_allocate	function
(	O
&	O
tab	pointer
->	O
table	pointer
,	O
sizeof	O
(	O
*	O
entry	pointer
)	O
)	O
;	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
return	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
if	O
(	O
!	O
copy	int
)	O
entry	pointer
->	O
root	struct
.	O
string	pointer
=	O
str	pointer
;	O
else	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
str	pointer
)	O
+	O
1	int
;	O
char	O
*	O
n	long
;	O
n	long
=	O
(	O
char	O
*	O
)	O
bfd_hash_allocate	function
(	O
&	O
tab	pointer
->	O
table	pointer
,	O
len	long
)	O
;	O
if	O
(	O
n	long
==	O
NULL	O
)	O
return	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
memcpy	function
(	O
n	long
,	O
str	pointer
,	O
len	long
)	O
;	O
entry	pointer
->	O
root	struct
.	O
string	pointer
=	O
n	long
;	O
}	O
entry	pointer
->	O
index	function
=	O
(	O
bfd_size_type	long
)	O
-	O
1	int
;	O
entry	pointer
->	O
next	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
entry	pointer
->	O
index	function
==	O
(	O
bfd_size_type	long
)	O
-	O
1	int
)	O
{	O
entry	pointer
->	O
index	function
=	O
tab	pointer
->	O
size	long
;	O
tab	pointer
->	O
size	long
+=	O
strlen	function
(	O
str	pointer
)	O
+	O
1	int
;	O
if	O
(	O
tab	pointer
->	O
xcoff	int
)	O
{	O
entry	pointer
->	O
index	function
+=	O
2	int
;	O
tab	pointer
->	O
size	long
+=	O
2	int
;	O
}	O
if	O
(	O
tab	pointer
->	O
first	pointer
==	O
NULL	O
)	O
tab	pointer
->	O
first	pointer
=	O
entry	pointer
;	O
else	O
tab	pointer
->	O
last	pointer
->	O
next	pointer
=	O
entry	pointer
;	O
tab	pointer
->	O
last	pointer
=	O
entry	pointer
;	O
}	O
return	O
entry	pointer
->	O
index	function
;	O
}	O
bfd_size_type	long
_bfd_stringtab_size	function
(	O
struct	O
bfd_strtab_hash	struct
*	O
tab	pointer
)	O
{	O
return	O
tab	pointer
->	O
size	long
;	O
}	O
bfd_boolean	int
_bfd_stringtab_emit	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
bfd_strtab_hash	struct
*	O
tab	pointer
)	O
{	O
bfd_boolean	int
xcoff	int
;	O
struct	O
strtab_hash_entry	struct
*	O
entry	pointer
;	O
xcoff	int
=	O
tab	pointer
->	O
xcoff	int
;	O
for	O
(	O
entry	pointer
=	O
tab	pointer
->	O
first	pointer
;	O
entry	pointer
!=	O
NULL	O
;	O
entry	pointer
=	O
entry	pointer
->	O
next	pointer
)	O
{	O
const	O
char	O
*	O
str	pointer
;	O
size_t	long
len	long
;	O
str	pointer
=	O
entry	pointer
->	O
root	struct
.	O
string	pointer
;	O
len	long
=	O
strlen	function
(	O
str	pointer
)	O
+	O
1	int
;	O
if	O
(	O
xcoff	int
)	O
{	O
bfd_byte	char
buf	pointer
[	O
2	int
]	O
;	O
bfd_put_16	O
(	O
abfd	pointer
,	O
(	O
bfd_vma	long
)	O
len	long
,	O
buf	pointer
)	O
;	O
if	O
(	O
bfd_bwrite	function
(	O
(	O
void	O
*	O
)	O
buf	pointer
,	O
(	O
bfd_size_type	long
)	O
2	int
,	O
abfd	pointer
)	O
!=	O
2	int
)	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
bfd_bwrite	function
(	O
(	O
void	O
*	O
)	O
str	pointer
,	O
(	O
bfd_size_type	long
)	O
len	long
,	O
abfd	pointer
)	O
!=	O
len	long
)	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
