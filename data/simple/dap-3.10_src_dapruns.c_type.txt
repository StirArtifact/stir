char	O
*	O
pager	pointer
;	O
char	O
*	O
pageopts	pointer
;	O
char	O
*	O
compiler	pointer
;	O
char	O
*	O
compopts	pointer
;	O
char	O
*	O
viewer	pointer
;	O
char	O
*	O
viewopts	pointer
;	O
char	O
*	O
dappp	pointer
;	O
char	O
*	O
incdir	pointer
;	O
char	O
*	O
libdir	pointer
;	O
int	O
dappprun	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
;	O
int	O
gccrun	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
debug	int
)	O
;	O
int	O
run	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
keep	int
)	O
;	O
int	O
ask	function
(	O
char	O
*	O
question	pointer
)	O
;	O
void	O
view	function
(	O
char	O
name	array
[	O
]	O
,	O
char	O
suff	array
[	O
]	O
)	O
;	O
void	O
showps	function
(	O
char	O
name	array
[	O
]	O
)	O
;	O
char	O
*	O
argcpy	function
(	O
char	O
arg	array
[	O
]	O
,	O
int	O
extra	int
)	O
;	O
void	O
suffix	function
(	O
char	O
name	array
[	O
]	O
,	O
char	O
suff	array
[	O
]	O
)	O
;	O
int	O
parseopts	function
(	O
char	O
*	O
opts	pointer
,	O
char	O
*	O
*	O
arg	array
)	O
;	O
char	O
*	O
ecopy	function
(	O
char	O
*	O
e	pointer
)	O
{	O
char	O
*	O
copy	pointer
;	O
if	O
(	O
e	pointer
)	O
{	O
if	O
(	O
!	O
(	O
copy	pointer
=	O
malloc	function
(	O
strlen	function
(	O
e	pointer
)	O
+	O
1	int
)	O
)	O
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
strcpy	function
(	O
copy	pointer
,	O
e	pointer
)	O
;	O
return	O
copy	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
keep	int
;	O
int	O
debug	int
;	O
int	O
runstat	int
;	O
fputs	function
(	O
"\nDap, Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n"	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
"Dap comes with ABSOLUTELY NO WARRANTY;\n"	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
"for details see the GNU Public License.\n"	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
"This is free software, and you are welcome to\n"	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
"redistribute it under certain conditions; see\n"	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
"the GNU Public License for details.\n\n"	pointer
,	O
stderr	pointer
)	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
fputs	function
(	O
"dap: no files to process\n"	pointer
,	O
stderr	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
keep	int
=	O
0	int
;	O
debug	int
=	O
0	int
;	O
while	O
(	O
argv	pointer
[	O
1	int
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
--	O
argc	int
;	O
argv	pointer
++	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"-k"	pointer
)	O
||	O
!	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"--keep"	pointer
)	O
)	O
keep	int
=	O
-	O
1	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"-d"	pointer
)	O
||	O
!	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"--debug"	pointer
)	O
)	O
debug	int
=	O
1	int
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"--help"	pointer
)	O
)	O
{	O
fputs	function
(	O
"Usage:\ndap [-k] [-d] FILE1.c [ FILE2.c ... ] [-a ARG1 ...]\n"	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
"dap [--keep] [--debug] FILE1.c [ FILE2.c ... ] [--args] ARG1 ...]\n"	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
"dap [-k] [-d] FILE1.sbs [ FILE2.c ... ]\n"	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
"dap [--keep] [--debug] FILE1.sbs [ FILE2.c ... ]\n"	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
"\nReport bugs to <bug-dap@gnu.org>\n"	pointer
,	O
stderr	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"--version"	pointer
)	O
||	O
!	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
"-v"	pointer
)	O
)	O
{	O
fputs	function
(	O
"Dap 3.6\n"	pointer
,	O
stderr	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dap: bad option: %s\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
(	O
pager	pointer
=	O
ecopy	function
(	O
getenv	function
(	O
"DAPPAGER"	pointer
)	O
)	O
)	O
)	O
pager	pointer
=	O
PAGE	pointer
;	O
if	O
(	O
!	O
(	O
pageopts	pointer
=	O
ecopy	function
(	O
getenv	function
(	O
"DAPPAGEOPTS"	pointer
)	O
)	O
)	O
)	O
pageopts	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
compiler	pointer
=	O
ecopy	function
(	O
getenv	function
(	O
"DAPCOMPILER"	pointer
)	O
)	O
)	O
)	O
compiler	pointer
=	O
GCC	pointer
;	O
if	O
(	O
!	O
(	O
compopts	pointer
=	O
ecopy	function
(	O
getenv	function
(	O
"DAPCOMPOPTS"	pointer
)	O
)	O
)	O
)	O
compopts	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
viewer	pointer
=	O
ecopy	function
(	O
getenv	function
(	O
"DAPVIEWER"	pointer
)	O
)	O
)	O
)	O
viewer	pointer
=	O
PS	pointer
;	O
if	O
(	O
!	O
(	O
viewopts	pointer
=	O
ecopy	function
(	O
getenv	function
(	O
"DAPVIEWOPTS"	pointer
)	O
)	O
)	O
)	O
viewopts	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
dappp	pointer
=	O
ecopy	function
(	O
getenv	function
(	O
"DAPPP"	pointer
)	O
)	O
)	O
)	O
dappp	pointer
=	O
DAPPP	pointer
;	O
if	O
(	O
!	O
(	O
incdir	pointer
=	O
ecopy	function
(	O
getenv	function
(	O
"INCDIR"	pointer
)	O
)	O
)	O
)	O
incdir	pointer
=	O
INCDIR	pointer
;	O
if	O
(	O
!	O
(	O
libdir	pointer
=	O
ecopy	function
(	O
getenv	function
(	O
"LIBDIR"	pointer
)	O
)	O
)	O
)	O
libdir	pointer
=	O
LIBDIR	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
ask	function
(	O
"Compile and run"	pointer
)	O
)	O
break	O
;	O
if	O
(	O
!	O
dappprun	function
(	O
argc	int
,	O
argv	pointer
)	O
)	O
{	O
if	O
(	O
!	O
gccrun	function
(	O
argc	int
,	O
argv	pointer
,	O
debug	int
)	O
)	O
{	O
runstat	int
=	O
run	function
(	O
argc	int
,	O
argv	pointer
,	O
keep	int
)	O
;	O
view	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
".err"	pointer
)	O
;	O
if	O
(	O
!	O
runstat	int
)	O
{	O
if	O
(	O
keep	int
==	O
-	O
1	int
)	O
keep	int
=	O
1	int
;	O
showps	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
}	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
dappprun	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
*	O
arg	array
;	O
int	O
a	int
;	O
int	O
status	int
;	O
pid_t	int
pid	int
;	O
if	O
(	O
!	O
(	O
arg	array
=	O
(	O
char	O
*	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
(	O
argc	int
+	O
1	int
)	O
)	O
)	O
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
arg	array
[	O
0	int
]	O
=	O
dappp	pointer
;	O
for	O
(	O
a	int
=	O
1	int
;	O
a	int
<	O
argc	int
&&	O
strcmp	function
(	O
argv	pointer
[	O
a	int
]	O
,	O
"-a"	pointer
)	O
&&	O
strcmp	function
(	O
argv	pointer
[	O
a	int
]	O
,	O
"--args"	pointer
)	O
;	O
a	int
++	O
)	O
arg	array
[	O
a	int
]	O
=	O
argv	pointer
[	O
a	int
]	O
;	O
arg	array
[	O
a	int
]	O
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
pid	int
=	O
fork	function
(	O
)	O
)	O
)	O
{	O
fputs	function
(	O
"Preprocessing...\n"	pointer
,	O
stderr	pointer
)	O
;	O
execv	function
(	O
arg	array
[	O
0	int
]	O
,	O
arg	array
)	O
;	O
perror	function
(	O
arg	array
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
waitpid	function
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
void	O
suffix	function
(	O
char	O
name	array
[	O
]	O
,	O
char	O
suff	array
[	O
]	O
)	O
{	O
int	O
n	int
;	O
n	int
=	O
strlen	function
(	O
name	array
)	O
;	O
if	O
(	O
n	int
>	O
2	int
&&	O
!	O
strcmp	function
(	O
name	array
+	O
n	int
-	O
2	int
,	O
".c"	pointer
)	O
)	O
{	O
name	array
[	O
n	int
-	O
2	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
name	array
,	O
suff	array
)	O
;	O
}	O
else	O
if	O
(	O
n	int
>	O
4	int
&&	O
!	O
strcmp	function
(	O
name	array
+	O
n	int
-	O
4	int
,	O
".sbs"	pointer
)	O
)	O
{	O
name	array
[	O
n	int
-	O
4	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
name	array
,	O
suff	array
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"dap: name must end in .c or .sbs: %s\n"	pointer
,	O
name	array
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
char	O
*	O
argcpy	function
(	O
char	O
arg	array
[	O
]	O
,	O
int	O
extra	int
)	O
{	O
char	O
*	O
cpy	pointer
;	O
if	O
(	O
!	O
(	O
cpy	pointer
=	O
malloc	function
(	O
strlen	function
(	O
arg	array
)	O
+	O
extra	int
+	O
1	int
)	O
)	O
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
strcpy	function
(	O
cpy	pointer
,	O
arg	array
)	O
;	O
return	O
cpy	pointer
;	O
}	O
int	O
gccrun	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
debug	int
)	O
{	O
char	O
*	O
*	O
arg	array
;	O
int	O
ncompopts	int
;	O
int	O
g	int
,	O
a	int
;	O
int	O
argstart	int
;	O
int	O
argend	int
;	O
int	O
status	int
;	O
pid_t	int
pid	int
;	O
ncompopts	int
=	O
parseopts	function
(	O
compopts	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
(	O
arg	array
=	O
(	O
char	O
*	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
(	O
argc	int
+	O
11	int
+	O
ncompopts	int
)	O
)	O
)	O
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
g	int
=	O
0	int
;	O
arg	array
[	O
g	int
++	O
]	O
=	O
compiler	pointer
;	O
g	int
+=	O
parseopts	function
(	O
compopts	pointer
,	O
arg	array
+	O
g	int
)	O
;	O
arg	array
[	O
g	int
++	O
]	O
=	O
"-o"	pointer
;	O
arg	array
[	O
g	int
]	O
=	O
argcpy	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
4	int
)	O
;	O
suffix	function
(	O
arg	array
[	O
g	int
]	O
,	O
".dap"	pointer
)	O
;	O
g	int
++	O
;	O
arg	array
[	O
g	int
++	O
]	O
=	O
"-I"	pointer
;	O
arg	array
[	O
g	int
++	O
]	O
=	O
incdir	pointer
;	O
argstart	int
=	O
g	int
;	O
for	O
(	O
a	int
=	O
1	int
;	O
a	int
<	O
argc	int
&&	O
strcmp	function
(	O
argv	pointer
[	O
a	int
]	O
,	O
"-a"	pointer
)	O
&&	O
strcmp	function
(	O
argv	pointer
[	O
a	int
]	O
,	O
"--args"	pointer
)	O
;	O
a	int
++	O
,	O
g	int
++	O
)	O
{	O
arg	array
[	O
g	int
]	O
=	O
argcpy	function
(	O
argv	pointer
[	O
a	int
]	O
,	O
6	int
)	O
;	O
suffix	function
(	O
arg	array
[	O
g	int
]	O
,	O
".dap.c"	pointer
)	O
;	O
}	O
argend	int
=	O
g	int
;	O
arg	array
[	O
g	int
++	O
]	O
=	O
"-L"	pointer
;	O
arg	array
[	O
g	int
++	O
]	O
=	O
libdir	pointer
;	O
arg	array
[	O
g	int
++	O
]	O
=	O
"-ldap"	pointer
;	O
arg	array
[	O
g	int
++	O
]	O
=	O
"-lm"	pointer
;	O
arg	array
[	O
g	int
]	O
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
pid	int
=	O
fork	function
(	O
)	O
)	O
)	O
{	O
fputs	function
(	O
"Compiling...\n"	pointer
,	O
stderr	pointer
)	O
;	O
execv	function
(	O
arg	array
[	O
0	int
]	O
,	O
arg	array
)	O
;	O
perror	function
(	O
arg	array
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
waitpid	function
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
status	int
&&	O
!	O
debug	int
)	O
{	O
for	O
(	O
g	int
=	O
argstart	int
;	O
g	int
<	O
argend	int
;	O
g	int
++	O
)	O
unlink	function
(	O
arg	array
[	O
g	int
]	O
)	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
run	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
keep	int
)	O
{	O
char	O
*	O
*	O
arg	array
;	O
char	O
*	O
lstname	pointer
;	O
char	O
*	O
psname	pointer
;	O
int	O
g	int
,	O
a	int
;	O
int	O
status	int
;	O
pid_t	int
pid	int
;	O
if	O
(	O
!	O
(	O
arg	array
=	O
(	O
char	O
*	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
(	O
argc	int
+	O
1	int
)	O
)	O
)	O
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
arg	array
[	O
0	int
]	O
=	O
argcpy	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
4	int
)	O
;	O
suffix	function
(	O
arg	array
[	O
0	int
]	O
,	O
".dap"	pointer
)	O
;	O
lstname	pointer
=	O
argcpy	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
4	int
)	O
;	O
suffix	function
(	O
lstname	pointer
,	O
".lst"	pointer
)	O
;	O
if	O
(	O
keep	int
!=	O
1	int
)	O
unlink	function
(	O
lstname	pointer
)	O
;	O
psname	pointer
=	O
argcpy	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
3	int
)	O
;	O
suffix	function
(	O
psname	pointer
,	O
".ps"	pointer
)	O
;	O
unlink	function
(	O
psname	pointer
)	O
;	O
for	O
(	O
a	int
=	O
1	int
;	O
a	int
<	O
argc	int
&&	O
strcmp	function
(	O
argv	pointer
[	O
a	int
]	O
,	O
"-a"	pointer
)	O
&&	O
strcmp	function
(	O
argv	pointer
[	O
a	int
]	O
,	O
"--args"	pointer
)	O
;	O
a	int
++	O
)	O
;	O
for	O
(	O
g	int
=	O
1	int
,	O
a	int
++	O
;	O
a	int
<	O
argc	int
;	O
a	int
++	O
,	O
g	int
++	O
)	O
arg	array
[	O
g	int
]	O
=	O
argcpy	function
(	O
argv	pointer
[	O
a	int
]	O
,	O
0	int
)	O
;	O
arg	array
[	O
g	int
]	O
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
pid	int
=	O
fork	function
(	O
)	O
)	O
)	O
{	O
fputs	function
(	O
"Executing...\n"	pointer
,	O
stderr	pointer
)	O
;	O
execv	function
(	O
arg	array
[	O
0	int
]	O
,	O
arg	array
)	O
;	O
perror	function
(	O
arg	array
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
waitpid	function
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
int	O
ask	function
(	O
char	O
*	O
question	pointer
)	O
{	O
int	O
c	int
;	O
do	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s? [y/q] "	pointer
,	O
question	pointer
)	O
;	O
c	int
=	O
getchar	function
(	O
)	O
;	O
while	O
(	O
getchar	function
(	O
)	O
!=	O
'\n'	O
)	O
;	O
if	O
(	O
c	int
!=	O
'y'	O
&&	O
c	int
!=	O
'q'	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Invalid response. "	pointer
)	O
;	O
}	O
while	O
(	O
c	int
!=	O
'y'	O
&&	O
c	int
!=	O
'q'	O
)	O
;	O
return	O
(	O
c	int
==	O
'y'	O
)	O
;	O
}	O
void	O
view	function
(	O
char	O
name	array
[	O
]	O
,	O
char	O
suff	array
[	O
]	O
)	O
{	O
char	O
*	O
lstname	pointer
;	O
char	O
*	O
*	O
arg	array
;	O
int	O
a	int
;	O
int	O
status	int
;	O
struct	O
stat	struct
buf	struct
;	O
pid_t	int
pid	int
;	O
if	O
(	O
!	O
(	O
arg	array
=	O
(	O
char	O
*	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
(	O
3	int
+	O
parseopts	function
(	O
pageopts	pointer
,	O
NULL	O
)	O
)	O
)	O
)	O
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
lstname	pointer
=	O
argcpy	function
(	O
name	array
,	O
strlen	function
(	O
suff	array
)	O
)	O
;	O
suffix	function
(	O
lstname	pointer
,	O
suff	array
)	O
;	O
if	O
(	O
!	O
stat	struct
(	O
lstname	pointer
,	O
&	O
buf	struct
)	O
&&	O
buf	struct
.	O
st_size	long
)	O
{	O
a	int
=	O
0	int
;	O
arg	array
[	O
a	int
++	O
]	O
=	O
pager	pointer
;	O
a	int
+=	O
parseopts	function
(	O
pageopts	pointer
,	O
arg	array
+	O
a	int
)	O
;	O
arg	array
[	O
a	int
++	O
]	O
=	O
lstname	pointer
;	O
arg	array
[	O
a	int
]	O
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
pid	int
=	O
fork	function
(	O
)	O
)	O
)	O
{	O
execv	function
(	O
arg	array
[	O
0	int
]	O
,	O
arg	array
)	O
;	O
perror	function
(	O
arg	array
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
waitpid	function
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
}	O
}	O
void	O
showps	function
(	O
char	O
name	array
[	O
]	O
)	O
{	O
char	O
*	O
psname	pointer
;	O
char	O
*	O
*	O
arg	array
;	O
int	O
a	int
;	O
struct	O
stat	struct
buf	struct
;	O
static	O
int	O
gv	int
=	O
0	int
;	O
pid_t	int
pid	int
;	O
if	O
(	O
!	O
(	O
arg	array
=	O
(	O
char	O
*	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
(	O
3	int
+	O
parseopts	function
(	O
viewopts	pointer
,	O
NULL	O
)	O
)	O
)	O
)	O
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
psname	pointer
=	O
argcpy	function
(	O
name	array
,	O
3	int
)	O
;	O
suffix	function
(	O
psname	pointer
,	O
".ps"	pointer
)	O
;	O
if	O
(	O
!	O
gv	int
&&	O
!	O
stat	struct
(	O
psname	pointer
,	O
&	O
buf	struct
)	O
)	O
{	O
gv	int
=	O
1	int
;	O
a	int
=	O
0	int
;	O
arg	array
[	O
a	int
++	O
]	O
=	O
viewer	pointer
;	O
a	int
+=	O
parseopts	function
(	O
viewopts	pointer
,	O
arg	array
+	O
a	int
)	O
;	O
arg	array
[	O
a	int
++	O
]	O
=	O
psname	pointer
;	O
arg	array
[	O
a	int
++	O
]	O
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
pid	int
=	O
fork	function
(	O
)	O
)	O
)	O
{	O
execv	function
(	O
arg	array
[	O
0	int
]	O
,	O
arg	array
)	O
;	O
perror	function
(	O
arg	array
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
int	O
parseopts	function
(	O
char	O
*	O
opts	pointer
,	O
char	O
*	O
*	O
arg	array
)	O
{	O
static	O
char	O
*	O
optcpy	pointer
=	O
NULL	O
;	O
static	O
int	O
optlen	int
=	O
0	int
;	O
int	O
i	int
;	O
int	O
a	int
;	O
if	O
(	O
!	O
opts	pointer
)	O
return	O
0	int
;	O
if	O
(	O
strlen	function
(	O
opts	pointer
)	O
>	O
optlen	int
)	O
{	O
if	O
(	O
optcpy	pointer
)	O
free	function
(	O
optcpy	pointer
)	O
;	O
optlen	int
=	O
strlen	function
(	O
opts	pointer
)	O
;	O
if	O
(	O
!	O
(	O
optcpy	pointer
=	O
malloc	function
(	O
optlen	int
+	O
1	int
)	O
)	O
)	O
{	O
perror	function
(	O
"dap"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
strcpy	function
(	O
optcpy	pointer
,	O
opts	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
optcpy	pointer
[	O
i	int
]	O
==	O
' '	O
;	O
i	int
++	O
)	O
;	O
for	O
(	O
a	int
=	O
0	int
;	O
optcpy	pointer
[	O
i	int
]	O
;	O
a	int
++	O
)	O
{	O
if	O
(	O
arg	array
)	O
arg	array
[	O
a	int
]	O
=	O
optcpy	pointer
+	O
i	int
;	O
while	O
(	O
optcpy	pointer
[	O
i	int
]	O
&&	O
optcpy	pointer
[	O
i	int
]	O
!=	O
' '	O
)	O
i	int
++	O
;	O
if	O
(	O
optcpy	pointer
[	O
i	int
]	O
)	O
{	O
if	O
(	O
arg	array
)	O
optcpy	pointer
[	O
i	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
i	int
++	O
;	O
optcpy	pointer
[	O
i	int
]	O
==	O
' '	O
;	O
i	int
++	O
)	O
;	O
}	O
}	O
return	O
a	int
;	O
}	O
