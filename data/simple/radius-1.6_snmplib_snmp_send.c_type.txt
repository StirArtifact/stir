int	O
snmp_send	function
(	O
struct	O
snmp_session	struct
*	O
sess	pointer
,	O
struct	O
snmp_pdu	struct
*	O
pdu	pointer
)	O
{	O
struct	O
snmp_request	struct
*	O
req	pointer
;	O
if	O
(	O
sess	pointer
->	O
sd	int
==	O
-	O
1	int
&&	O
snmp_session_open	function
(	O
sess	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
)	O
return	O
-	O
1	int
;	O
switch	O
(	O
pdu	pointer
->	O
type	pointer
)	O
{	O
case	O
SNMP_PDU_GET	O
:	O
case	O
SNMP_PDU_GETNEXT	O
:	O
case	O
SNMP_PDU_RESPONSE	O
:	O
case	O
SNMP_PDU_SET	O
:	O
if	O
(	O
pdu	pointer
->	O
req_id	int
==	O
0	int
)	O
pdu	pointer
->	O
req_id	int
=	O
snmp_req_id	function
(	O
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
req	pointer
=	O
snmp_alloc	function
(	O
sizeof	O
(	O
*	O
req	pointer
)	O
)	O
;	O
if	O
(	O
!	O
req	pointer
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_NOMEM	int
)	O
;	O
snmp_pdu_free	function
(	O
pdu	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
req	pointer
->	O
next	pointer
=	O
sess	pointer
->	O
request_list	pointer
;	O
sess	pointer
->	O
request_list	pointer
=	O
req	pointer
;	O
req	pointer
->	O
retries	int
=	O
1	int
;	O
req	pointer
->	O
timeout	int
=	O
sess	pointer
->	O
timeout	int
;	O
req	pointer
->	O
pdu	pointer
=	O
pdu	pointer
;	O
return	O
snmp_request_xmit	function
(	O
sess	pointer
,	O
req	pointer
)	O
;	O
}	O
int	O
snmp_request_xmit	function
(	O
struct	O
snmp_session	struct
*	O
sess	pointer
,	O
struct	O
snmp_request	struct
*	O
req	pointer
)	O
{	O
u_char	char
packet_buf	pointer
[	O
SNMP_PACKET_LENGTH	int
]	O
;	O
int	O
length	pointer
;	O
struct	O
timeval	struct
tv	struct
;	O
length	pointer
=	O
sizeof	O
(	O
packet_buf	pointer
)	O
;	O
if	O
(	O
snmp_encode_request	function
(	O
sess	pointer
,	O
req	pointer
->	O
pdu	pointer
,	O
packet_buf	pointer
,	O
&	O
length	pointer
)	O
)	O
return	O
-	O
1	int
;	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
(	O
struct	O
timezone	struct
*	O
)	O
0	int
)	O
;	O
if	O
(	O
sendto	function
(	O
sess	pointer
->	O
sd	int
,	O
(	O
char	O
*	O
)	O
packet_buf	pointer
,	O
length	pointer
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
sess	pointer
->	O
remote_sin	struct
,	O
sizeof	O
(	O
sess	pointer
->	O
remote_sin	struct
)	O
)	O
<	O
0	int
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_SEND	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
tv	struct
.	O
tv_usec	long
+=	O
req	pointer
->	O
timeout	int
;	O
tv	struct
.	O
tv_sec	long
+=	O
tv	struct
.	O
tv_usec	long
/	O
1000000L	int
;	O
tv	struct
.	O
tv_usec	long
%=	O
1000000L	int
;	O
req	pointer
->	O
expire	struct
=	O
tv	struct
;	O
return	O
0	int
;	O
}	O
int	O
snmp_encode_request	function
(	O
struct	O
snmp_session	struct
*	O
sess	pointer
,	O
struct	O
snmp_pdu	struct
*	O
pdu	pointer
,	O
u_char	char
*	O
packet_buf	pointer
,	O
int	O
*	O
length	pointer
)	O
{	O
u_char	char
*	O
buf	pointer
,	O
*	O
msg_start	pointer
,	O
*	O
pdu_header_ptr	pointer
,	O
*	O
pdu_data_start	pointer
,	O
*	O
var_header_ptr	pointer
,	O
*	O
var_data_start	pointer
;	O
buf	pointer
=	O
packet_buf	pointer
;	O
buf	pointer
=	O
asn_encode_header	function
(	O
buf	pointer
,	O
length	pointer
,	O
(	O
ASN_SEQUENCE	O
|	O
ASN_CONSTRUCTOR	O
)	O
,	O
0xffff	int
)	O
;	O
BAIL_OUT	O
;	O
msg_start	pointer
=	O
buf	pointer
;	O
buf	pointer
=	O
asn_encode_int	function
(	O
buf	pointer
,	O
length	pointer
,	O
(	O
ASN_UNIVERSAL	O
|	O
ASN_PRIMITIVE	O
|	O
ASN_INTEGER	O
)	O
,	O
sess	pointer
->	O
version	int
)	O
;	O
BAIL_OUT	O
;	O
buf	pointer
=	O
asn_encode_string	function
(	O
buf	pointer
,	O
length	pointer
,	O
(	O
ASN_UNIVERSAL	O
|	O
ASN_PRIMITIVE	O
|	O
ASN_OCTET_STR	O
)	O
,	O
sess	pointer
->	O
community	struct
.	O
str	pointer
,	O
sess	pointer
->	O
community	struct
.	O
len	int
)	O
;	O
BAIL_OUT	O
;	O
pdu_header_ptr	pointer
=	O
buf	pointer
;	O
buf	pointer
=	O
asn_encode_header	function
(	O
buf	pointer
,	O
length	pointer
,	O
pdu	pointer
->	O
type	pointer
,	O
0xffff	int
)	O
;	O
BAIL_OUT	O
;	O
pdu_data_start	pointer
=	O
buf	pointer
;	O
buf	pointer
=	O
snmp_pdu_encode	function
(	O
buf	pointer
,	O
length	pointer
,	O
pdu	pointer
)	O
;	O
BAIL_OUT	O
;	O
var_header_ptr	pointer
=	O
buf	pointer
;	O
buf	pointer
=	O
asn_encode_header	function
(	O
buf	pointer
,	O
length	pointer
,	O
(	O
ASN_SEQUENCE	O
|	O
ASN_CONSTRUCTOR	O
)	O
,	O
0xffff	int
)	O
;	O
BAIL_OUT	O
;	O
var_data_start	pointer
=	O
buf	pointer
;	O
buf	pointer
=	O
snmp_var_encode	function
(	O
buf	pointer
,	O
length	pointer
,	O
pdu	pointer
->	O
var	pointer
,	O
sess	pointer
->	O
version	int
)	O
;	O
asn_recode_length	function
(	O
pdu_header_ptr	pointer
+	O
1	int
,	O
(	O
int	O
)	O
(	O
buf	pointer
-	O
pdu_data_start	pointer
)	O
)	O
;	O
asn_recode_length	function
(	O
packet_buf	pointer
+	O
1	int
,	O
(	O
int	O
)	O
(	O
buf	pointer
-	O
msg_start	pointer
)	O
)	O
;	O
asn_recode_length	function
(	O
var_header_ptr	pointer
+	O
1	int
,	O
(	O
buf	pointer
-	O
var_data_start	pointer
)	O
)	O
;	O
*	O
length	pointer
=	O
buf	pointer
-	O
packet_buf	pointer
;	O
return	O
0	int
;	O
}	O
int	O
snmp_decode_request	function
(	O
struct	O
snmp_session	struct
*	O
sess	pointer
,	O
struct	O
snmp_pdu	struct
*	O
pdu	pointer
,	O
u_char	char
*	O
packet	pointer
,	O
int	O
length	pointer
,	O
char	O
*	O
comm	pointer
,	O
int	O
*	O
comm_len	pointer
)	O
{	O
int	O
vers	int
;	O
u_char	char
*	O
buf	pointer
;	O
u_char	char
type	pointer
;	O
buf	pointer
=	O
asn_decode_header	function
(	O
packet	pointer
,	O
&	O
length	pointer
,	O
&	O
type	pointer
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
type	pointer
!=	O
(	O
ASN_SEQUENCE	O
|	O
ASN_CONSTRUCTOR	O
)	O
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_DECODE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
buf	pointer
=	O
asn_decode_int	function
(	O
buf	pointer
,	O
&	O
length	pointer
,	O
&	O
type	pointer
,	O
&	O
vers	int
,	O
sizeof	O
(	O
vers	int
)	O
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
-	O
1	int
;	O
buf	pointer
=	O
asn_decode_string	function
(	O
buf	pointer
,	O
&	O
length	pointer
,	O
&	O
type	pointer
,	O
comm	pointer
,	O
comm_len	pointer
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
-	O
1	int
;	O
comm	pointer
[	O
*	O
comm_len	pointer
]	O
=	O
0	int
;	O
if	O
(	O
vers	int
!=	O
SNMP_VERSION_1	int
)	O
{	O
SNMP_SET_ERRNO	O
(	O
E_SNMP_BAD_VERSION	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
buf	pointer
=	O
snmp_pdu_decode	function
(	O
buf	pointer
,	O
&	O
length	pointer
,	O
pdu	pointer
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
-	O
1	int
;	O
buf	pointer
=	O
snmp_var_decode	function
(	O
buf	pointer
,	O
&	O
length	pointer
,	O
&	O
pdu	pointer
->	O
var	pointer
,	O
vers	int
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
