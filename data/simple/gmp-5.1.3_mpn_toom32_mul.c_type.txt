void	O
mpn_toom32_mul	O
(	O
mp_ptr	pointer
pp	pointer
,	O
mp_srcptr	pointer
ap	pointer
,	O
mp_size_t	long
an	long
,	O
mp_srcptr	pointer
bp	pointer
,	O
mp_size_t	long
bn	long
,	O
mp_ptr	pointer
scratch	pointer
)	O
{	O
mp_size_t	long
n	long
,	O
s	array
,	O
t	long
;	O
int	O
vm1_neg	int
;	O
mp_limb_t	long
cy	long
;	O
mp_limb_signed_t	long
hi	long
;	O
mp_limb_t	long
ap1_hi	long
,	O
bp1_hi	long
;	O
ASSERT	O
(	O
bn	long
+	O
2	int
<=	O
an	long
&&	O
an	long
+	O
6	int
<=	O
3	int
*	O
bn	long
)	O
;	O
n	long
=	O
1	int
+	O
(	O
2	int
*	O
an	long
>=	O
3	int
*	O
bn	long
?	O
(	O
an	long
-	O
1	int
)	O
/	O
(	O
size_t	long
)	O
3	int
:	O
(	O
bn	long
-	O
1	int
)	O
>>	O
1	int
)	O
;	O
s	array
=	O
an	long
-	O
2	int
*	O
n	long
;	O
t	long
=	O
bn	long
-	O
n	long
;	O
ASSERT	O
(	O
0	int
<	O
s	array
&&	O
s	array
<=	O
n	long
)	O
;	O
ASSERT	O
(	O
0	int
<	O
t	long
&&	O
t	long
<=	O
n	long
)	O
;	O
ASSERT	O
(	O
s	array
+	O
t	long
>=	O
n	long
)	O
;	O
ap1_hi	long
=	O
mpn_add	O
(	O
ap1	O
,	O
a0	O
,	O
n	long
,	O
a2	O
,	O
s	array
)	O
;	O
if	O
(	O
ap1_hi	long
==	O
0	int
&&	O
mpn_cmp	O
(	O
ap1	O
,	O
a1	O
,	O
n	long
)	O
<	O
0	int
)	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
am1	O
,	O
a1	O
,	O
ap1	O
,	O
n	long
)	O
)	O
;	O
hi	long
=	O
0	int
;	O
vm1_neg	int
=	O
1	int
;	O
}	O
else	O
{	O
hi	long
=	O
ap1_hi	long
-	O
mpn_sub_n	O
(	O
am1	O
,	O
ap1	O
,	O
a1	O
,	O
n	long
)	O
;	O
vm1_neg	int
=	O
0	int
;	O
}	O
ap1_hi	long
+=	O
mpn_add_n	O
(	O
ap1	O
,	O
ap1	O
,	O
a1	O
,	O
n	long
)	O
;	O
if	O
(	O
t	long
==	O
n	long
)	O
{	O
bp1_hi	long
=	O
mpn_add_n	O
(	O
bp1	O
,	O
b0	O
,	O
b1	O
,	O
n	long
)	O
;	O
if	O
(	O
mpn_cmp	O
(	O
b0	O
,	O
b1	O
,	O
n	long
)	O
<	O
0	int
)	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
bm1	O
,	O
b1	O
,	O
b0	O
,	O
n	long
)	O
)	O
;	O
vm1_neg	int
^=	O
1	int
;	O
}	O
else	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
bm1	O
,	O
b0	O
,	O
b1	O
,	O
n	long
)	O
)	O
;	O
}	O
}	O
else	O
{	O
bp1_hi	long
=	O
mpn_add	O
(	O
bp1	O
,	O
b0	O
,	O
n	long
,	O
b1	O
,	O
t	long
)	O
;	O
if	O
(	O
mpn_zero_p	function
(	O
b0	O
+	O
t	long
,	O
n	long
-	O
t	long
)	O
&&	O
mpn_cmp	O
(	O
b0	O
,	O
b1	O
,	O
t	long
)	O
<	O
0	int
)	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
bm1	O
,	O
b1	O
,	O
b0	O
,	O
t	long
)	O
)	O
;	O
MPN_ZERO	O
(	O
bm1	O
+	O
t	long
,	O
n	long
-	O
t	long
)	O
;	O
vm1_neg	int
^=	O
1	int
;	O
}	O
else	O
{	O
ASSERT_NOCARRY	O
(	O
mpn_sub	O
(	O
bm1	O
,	O
b0	O
,	O
n	long
,	O
b1	O
,	O
t	long
)	O
)	O
;	O
}	O
}	O
TOOM32_MUL_N_REC	O
(	O
v1	O
,	O
ap1	O
,	O
bp1	O
,	O
n	long
,	O
scratch_out	O
)	O
;	O
if	O
(	O
ap1_hi	long
==	O
1	int
)	O
{	O
cy	long
=	O
bp1_hi	long
+	O
mpn_add_n	O
(	O
v1	O
+	O
n	long
,	O
v1	O
+	O
n	long
,	O
bp1	O
,	O
n	long
)	O
;	O
}	O
else	O
if	O
(	O
ap1_hi	long
==	O
2	int
)	O
{	O
cy	long
=	O
2	int
*	O
bp1_hi	long
+	O
mpn_addlsh1_n	O
(	O
v1	O
+	O
n	long
,	O
v1	O
+	O
n	long
,	O
bp1	O
,	O
n	long
)	O
;	O
}	O
else	O
cy	long
=	O
0	int
;	O
if	O
(	O
bp1_hi	long
!=	O
0	int
)	O
cy	long
+=	O
mpn_add_n	O
(	O
v1	O
+	O
n	long
,	O
v1	O
+	O
n	long
,	O
ap1	O
,	O
n	long
)	O
;	O
v1	O
[	O
2	int
*	O
n	long
]	O
=	O
cy	long
;	O
TOOM32_MUL_N_REC	O
(	O
vm1	O
,	O
am1	O
,	O
bm1	O
,	O
n	long
,	O
scratch_out	O
)	O
;	O
if	O
(	O
hi	long
)	O
hi	long
=	O
mpn_add_n	O
(	O
vm1	O
+	O
n	long
,	O
vm1	O
+	O
n	long
,	O
bm1	O
,	O
n	long
)	O
;	O
vm1	O
[	O
2	int
*	O
n	long
]	O
=	O
hi	long
;	O
if	O
(	O
vm1_neg	int
)	O
{	O
mpn_rsh1sub_n	O
(	O
v1	O
,	O
v1	O
,	O
vm1	O
,	O
2	int
*	O
n	long
+	O
1	int
)	O
;	O
}	O
else	O
{	O
mpn_rsh1add_n	O
(	O
v1	O
,	O
v1	O
,	O
vm1	O
,	O
2	int
*	O
n	long
+	O
1	int
)	O
;	O
}	O
hi	long
=	O
vm1	O
[	O
2	int
*	O
n	long
]	O
;	O
cy	long
=	O
mpn_add_n	O
(	O
pp	pointer
+	O
2	int
*	O
n	long
,	O
v1	O
,	O
v1	O
+	O
n	long
,	O
n	long
)	O
;	O
MPN_INCR_U	O
(	O
v1	O
+	O
n	long
,	O
n	long
+	O
1	int
,	O
cy	long
+	O
v1	O
[	O
2	int
*	O
n	long
]	O
)	O
;	O
if	O
(	O
vm1_neg	int
)	O
{	O
cy	long
=	O
mpn_add_n	O
(	O
v1	O
,	O
v1	O
,	O
vm1	O
,	O
n	long
)	O
;	O
hi	long
+=	O
mpn_add_nc	O
(	O
pp	pointer
+	O
2	int
*	O
n	long
,	O
pp	pointer
+	O
2	int
*	O
n	long
,	O
vm1	O
+	O
n	long
,	O
n	long
,	O
cy	long
)	O
;	O
MPN_INCR_U	O
(	O
v1	O
+	O
n	long
,	O
n	long
+	O
1	int
,	O
hi	long
)	O
;	O
}	O
else	O
{	O
cy	long
=	O
mpn_sub_n	O
(	O
v1	O
,	O
v1	O
,	O
vm1	O
,	O
n	long
)	O
;	O
hi	long
+=	O
mpn_sub_nc	O
(	O
pp	pointer
+	O
2	int
*	O
n	long
,	O
pp	pointer
+	O
2	int
*	O
n	long
,	O
vm1	O
+	O
n	long
,	O
n	long
,	O
cy	long
)	O
;	O
MPN_DECR_U	O
(	O
v1	O
+	O
n	long
,	O
n	long
+	O
1	int
,	O
hi	long
)	O
;	O
}	O
TOOM32_MUL_N_REC	O
(	O
pp	pointer
,	O
a0	O
,	O
b0	O
,	O
n	long
,	O
scratch_out	O
)	O
;	O
if	O
(	O
s	array
>	O
t	long
)	O
mpn_mul	O
(	O
pp	pointer
+	O
3	int
*	O
n	long
,	O
a2	O
,	O
s	array
,	O
b1	O
,	O
t	long
)	O
;	O
else	O
mpn_mul	O
(	O
pp	pointer
+	O
3	int
*	O
n	long
,	O
b1	O
,	O
t	long
,	O
a2	O
,	O
s	array
)	O
;	O
cy	long
=	O
mpn_sub_n	O
(	O
pp	pointer
+	O
n	long
,	O
pp	pointer
+	O
n	long
,	O
pp	pointer
+	O
3	int
*	O
n	long
,	O
n	long
)	O
;	O
hi	long
=	O
scratch	pointer
[	O
2	int
*	O
n	long
]	O
+	O
cy	long
;	O
cy	long
=	O
mpn_sub_nc	O
(	O
pp	pointer
+	O
2	int
*	O
n	long
,	O
pp	pointer
+	O
2	int
*	O
n	long
,	O
pp	pointer
,	O
n	long
,	O
cy	long
)	O
;	O
hi	long
-=	O
mpn_sub_nc	O
(	O
pp	pointer
+	O
3	int
*	O
n	long
,	O
scratch	pointer
+	O
n	long
,	O
pp	pointer
+	O
n	long
,	O
n	long
,	O
cy	long
)	O
;	O
hi	long
+=	O
mpn_add	O
(	O
pp	pointer
+	O
n	long
,	O
pp	pointer
+	O
n	long
,	O
3	int
*	O
n	long
,	O
scratch	pointer
,	O
n	long
)	O
;	O
if	O
(	O
LIKELY	O
(	O
s	array
+	O
t	long
>	O
n	long
)	O
)	O
{	O
hi	long
-=	O
mpn_sub	O
(	O
pp	pointer
+	O
2	int
*	O
n	long
,	O
pp	pointer
+	O
2	int
*	O
n	long
,	O
2	int
*	O
n	long
,	O
pp	pointer
+	O
4	int
*	O
n	long
,	O
s	array
+	O
t	long
-	O
n	long
)	O
;	O
if	O
(	O
hi	long
<	O
0	int
)	O
MPN_DECR_U	O
(	O
pp	pointer
+	O
4	int
*	O
n	long
,	O
s	array
+	O
t	long
-	O
n	long
,	O
-	O
hi	long
)	O
;	O
else	O
MPN_INCR_U	O
(	O
pp	pointer
+	O
4	int
*	O
n	long
,	O
s	array
+	O
t	long
-	O
n	long
,	O
hi	long
)	O
;	O
}	O
else	O
ASSERT	O
(	O
hi	long
==	O
0	int
)	O
;	O
}	O
