int	O
gsl_integration_qng	function
(	O
const	O
gsl_function	struct
*	O
f	pointer
,	O
double	O
a	double
,	O
double	O
b	double
,	O
double	O
epsabs	double
,	O
double	O
epsrel	double
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
,	O
size_t	long
*	O
neval	pointer
)	O
{	O
double	O
fv1	array
[	O
5	int
]	O
,	O
fv2	array
[	O
5	int
]	O
,	O
fv3	array
[	O
5	int
]	O
,	O
fv4	array
[	O
5	int
]	O
;	O
double	O
savfun	array
[	O
21	int
]	O
;	O
double	O
res10	double
,	O
res21	double
,	O
res43	double
,	O
res87	double
;	O
double	O
result_kronrod	double
,	O
err	double
;	O
double	O
resabs	pointer
;	O
double	O
resasc	pointer
;	O
const	O
double	O
half_length	double
=	O
0.5	int
*	O
(	O
b	double
-	O
a	double
)	O
;	O
const	O
double	O
abs_half_length	double
=	O
fabs	function
(	O
half_length	double
)	O
;	O
const	O
double	O
center	double
=	O
0.5	int
*	O
(	O
b	double
+	O
a	double
)	O
;	O
const	O
double	O
f_center	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
center	double
)	O
;	O
int	O
k	int
;	O
if	O
(	O
epsabs	double
<=	O
0	int
&&	O
(	O
epsrel	double
<	O
50	int
*	O
GSL_DBL_EPSILON	int
||	O
epsrel	double
<	O
0.5e-28	int
)	O
)	O
{	O
*	O
result	pointer
=	O
0	int
;	O
*	O
abserr	pointer
=	O
0	int
;	O
*	O
neval	pointer
=	O
0	int
;	O
GSL_ERROR	O
(	O
"tolerance cannot be achieved with given epsabs and epsrel"	pointer
,	O
GSL_EBADTOL	int
)	O
;	O
}	O
;	O
res10	double
=	O
0	int
;	O
res21	double
=	O
w21b	array
[	O
5	int
]	O
*	O
f_center	double
;	O
resabs	pointer
=	O
w21b	array
[	O
5	int
]	O
*	O
fabs	function
(	O
f_center	double
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
5	int
;	O
k	int
++	O
)	O
{	O
const	O
double	O
abscissa	double
=	O
half_length	double
*	O
x1	double
[	O
k	int
]	O
;	O
const	O
double	O
fval1	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
center	double
+	O
abscissa	double
)	O
;	O
const	O
double	O
fval2	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
center	double
-	O
abscissa	double
)	O
;	O
const	O
double	O
fval	double
=	O
fval1	double
+	O
fval2	double
;	O
res10	double
+=	O
w10	array
[	O
k	int
]	O
*	O
fval	double
;	O
res21	double
+=	O
w21a	array
[	O
k	int
]	O
*	O
fval	double
;	O
resabs	pointer
+=	O
w21a	array
[	O
k	int
]	O
*	O
(	O
fabs	function
(	O
fval1	double
)	O
+	O
fabs	function
(	O
fval2	double
)	O
)	O
;	O
savfun	array
[	O
k	int
]	O
=	O
fval	double
;	O
fv1	array
[	O
k	int
]	O
=	O
fval1	double
;	O
fv2	array
[	O
k	int
]	O
=	O
fval2	double
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
5	int
;	O
k	int
++	O
)	O
{	O
const	O
double	O
abscissa	double
=	O
half_length	double
*	O
x2	double
[	O
k	int
]	O
;	O
const	O
double	O
fval1	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
center	double
+	O
abscissa	double
)	O
;	O
const	O
double	O
fval2	double
=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
center	double
-	O
abscissa	double
)	O
;	O
const	O
double	O
fval	double
=	O
fval1	double
+	O
fval2	double
;	O
res21	double
+=	O
w21b	array
[	O
k	int
]	O
*	O
fval	double
;	O
resabs	pointer
+=	O
w21b	array
[	O
k	int
]	O
*	O
(	O
fabs	function
(	O
fval1	double
)	O
+	O
fabs	function
(	O
fval2	double
)	O
)	O
;	O
savfun	array
[	O
k	int
+	O
5	int
]	O
=	O
fval	double
;	O
fv3	array
[	O
k	int
]	O
=	O
fval1	double
;	O
fv4	array
[	O
k	int
]	O
=	O
fval2	double
;	O
}	O
resabs	pointer
*=	O
abs_half_length	double
;	O
{	O
const	O
double	O
mean	double
=	O
0.5	int
*	O
res21	double
;	O
resasc	pointer
=	O
w21b	array
[	O
5	int
]	O
*	O
fabs	function
(	O
f_center	double
-	O
mean	double
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
5	int
;	O
k	int
++	O
)	O
{	O
resasc	pointer
+=	O
(	O
w21a	array
[	O
k	int
]	O
*	O
(	O
fabs	function
(	O
fv1	array
[	O
k	int
]	O
-	O
mean	double
)	O
+	O
fabs	function
(	O
fv2	array
[	O
k	int
]	O
-	O
mean	double
)	O
)	O
+	O
w21b	array
[	O
k	int
]	O
*	O
(	O
fabs	function
(	O
fv3	array
[	O
k	int
]	O
-	O
mean	double
)	O
+	O
fabs	function
(	O
fv4	array
[	O
k	int
]	O
-	O
mean	double
)	O
)	O
)	O
;	O
}	O
resasc	pointer
*=	O
abs_half_length	double
;	O
}	O
result_kronrod	double
=	O
res21	double
*	O
half_length	double
;	O
err	double
=	O
rescale_error	function
(	O
(	O
res21	double
-	O
res10	double
)	O
*	O
half_length	double
,	O
resabs	pointer
,	O
resasc	pointer
)	O
;	O
if	O
(	O
err	double
<	O
epsabs	double
||	O
err	double
<	O
epsrel	double
*	O
fabs	function
(	O
result_kronrod	double
)	O
)	O
{	O
*	O
result	pointer
=	O
result_kronrod	double
;	O
*	O
abserr	pointer
=	O
err	double
;	O
*	O
neval	pointer
=	O
21	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
res43	double
=	O
w43b	array
[	O
11	int
]	O
*	O
f_center	double
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
10	int
;	O
k	int
++	O
)	O
{	O
res43	double
+=	O
savfun	array
[	O
k	int
]	O
*	O
w43a	array
[	O
k	int
]	O
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
11	int
;	O
k	int
++	O
)	O
{	O
const	O
double	O
abscissa	double
=	O
half_length	double
*	O
x3	double
[	O
k	int
]	O
;	O
const	O
double	O
fval	double
=	O
(	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
center	double
+	O
abscissa	double
)	O
+	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
center	double
-	O
abscissa	double
)	O
)	O
;	O
res43	double
+=	O
fval	double
*	O
w43b	array
[	O
k	int
]	O
;	O
savfun	array
[	O
k	int
+	O
10	int
]	O
=	O
fval	double
;	O
}	O
result_kronrod	double
=	O
res43	double
*	O
half_length	double
;	O
err	double
=	O
rescale_error	function
(	O
(	O
res43	double
-	O
res21	double
)	O
*	O
half_length	double
,	O
resabs	pointer
,	O
resasc	pointer
)	O
;	O
if	O
(	O
err	double
<	O
epsabs	double
||	O
err	double
<	O
epsrel	double
*	O
fabs	function
(	O
result_kronrod	double
)	O
)	O
{	O
*	O
result	pointer
=	O
result_kronrod	double
;	O
*	O
abserr	pointer
=	O
err	double
;	O
*	O
neval	pointer
=	O
43	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
res87	double
=	O
w87b	array
[	O
22	int
]	O
*	O
f_center	double
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
21	int
;	O
k	int
++	O
)	O
{	O
res87	double
+=	O
savfun	array
[	O
k	int
]	O
*	O
w87a	array
[	O
k	int
]	O
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
22	int
;	O
k	int
++	O
)	O
{	O
const	O
double	O
abscissa	double
=	O
half_length	double
*	O
x4	double
[	O
k	int
]	O
;	O
res87	double
+=	O
w87b	array
[	O
k	int
]	O
*	O
(	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
center	double
+	O
abscissa	double
)	O
+	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
center	double
-	O
abscissa	double
)	O
)	O
;	O
}	O
result_kronrod	double
=	O
res87	double
*	O
half_length	double
;	O
err	double
=	O
rescale_error	function
(	O
(	O
res87	double
-	O
res43	double
)	O
*	O
half_length	double
,	O
resabs	pointer
,	O
resasc	pointer
)	O
;	O
if	O
(	O
err	double
<	O
epsabs	double
||	O
err	double
<	O
epsrel	double
*	O
fabs	function
(	O
result_kronrod	double
)	O
)	O
{	O
*	O
result	pointer
=	O
result_kronrod	double
;	O
*	O
abserr	pointer
=	O
err	double
;	O
*	O
neval	pointer
=	O
87	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
*	O
result	pointer
=	O
result_kronrod	double
;	O
*	O
abserr	pointer
=	O
err	double
;	O
*	O
neval	pointer
=	O
87	int
;	O
GSL_ERROR	O
(	O
"failed to reach tolerance with highest-order rule"	pointer
,	O
GSL_ETOL	int
)	O
;	O
}	O
