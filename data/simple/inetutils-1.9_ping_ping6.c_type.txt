static	O
PING	struct
*	O
ping	pointer
;	O
bool	bool
is_root	bool
=	O
false	int
;	O
unsigned	O
char	O
*	O
data_buffer	pointer
;	O
unsigned	O
char	O
*	O
patptr	pointer
;	O
int	O
one	int
=	O
1	int
;	O
int	O
pattern_len	pointer
=	O
16	int
;	O
size_t	long
data_length	long
=	O
PING_DATALEN	O
;	O
size_t	long
count	long
=	O
DEFAULT_PING_COUNT	int
;	O
size_t	long
interval	long
;	O
int	O
socket_type	int
;	O
int	O
timeout	int
=	O
-	O
1	int
;	O
static	O
unsigned	O
int	O
options	pointer
;	O
static	O
unsigned	O
long	O
preload	long
=	O
0	int
;	O
static	O
int	O
ping_echo	function
(	O
char	O
*	O
hostname	pointer
)	O
;	O
static	O
void	O
ping_reset	function
(	O
PING	struct
*	O
p	pointer
)	O
;	O
static	O
int	O
send_echo	function
(	O
PING	struct
*	O
ping	pointer
)	O
;	O
const	O
char	O
args_doc	pointer
[	O
]	O
=	O
"HOST ..."	pointer
;	O
const	O
char	O
doc	pointer
[	O
]	O
=	O
"Send ICMP ECHO_REQUEST packets to network hosts."	pointer
"\vOptions marked with (root only) are available only to "	pointer
"superuser."	pointer
;	O
const	O
char	O
*	O
program_authors	array
[	O
]	O
=	O
{	O
"Jeroen Dekkers"	pointer
,	O
NULL	O
}	O
;	O
static	O
struct	O
argp_option	struct
argp_options	array
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
"Options valid for all request types:"	pointer
,	O
GRP	int
}	O
,	O
{	O
"count"	pointer
,	O
'c'	O
,	O
"NUMBER"	pointer
,	O
0	int
,	O
"stop after sending NUMBER packets"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"debug"	pointer
,	O
'd'	O
,	O
NULL	O
,	O
0	int
,	O
"set the SO_DEBUG option"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"interval"	pointer
,	O
'i'	O
,	O
"NUMBER"	pointer
,	O
0	int
,	O
"wait NUMBER seconds between sending each "	pointer
"packet"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"numeric"	pointer
,	O
'n'	O
,	O
NULL	O
,	O
0	int
,	O
"do not resolve host addresses"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"ignore-routing"	pointer
,	O
'r'	O
,	O
NULL	O
,	O
0	int
,	O
"send directly to a host on an attached "	pointer
"network"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"timeout"	pointer
,	O
'w'	O
,	O
"N"	pointer
,	O
0	int
,	O
"stop after N seconds"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
"Options valid for --echo requests:"	pointer
,	O
GRP	int
}	O
,	O
{	O
"flood"	pointer
,	O
'f'	O
,	O
NULL	O
,	O
0	int
,	O
"flood ping (root only)"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"preload"	pointer
,	O
'l'	O
,	O
"NUMBER"	pointer
,	O
0	int
,	O
"send NUMBER packets as fast as possible "	pointer
"before falling into normal mode of behavior (root only)"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"pattern"	pointer
,	O
'p'	O
,	O
"PATTERN"	pointer
,	O
0	int
,	O
"fill ICMP packet with given pattern (hex)"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"quiet"	pointer
,	O
'q'	O
,	O
NULL	O
,	O
0	int
,	O
"quiet output"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"size"	pointer
,	O
's'	O
,	O
"NUMBER"	pointer
,	O
0	int
,	O
"send NUMBER data octets"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
char	O
*	O
endptr	pointer
;	O
static	O
unsigned	O
char	O
pattern	array
[	O
16	int
]	O
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'c'	O
:	O
count	long
=	O
ping_cvt_number	function
(	O
arg	pointer
,	O
0	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
socket_type	int
|=	O
SO_DEBUG	int
;	O
break	O
;	O
case	O
'f'	O
:	O
if	O
(	O
!	O
is_root	bool
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"flooding needs root privilege"	pointer
)	O
;	O
options	pointer
|=	O
OPT_FLOOD	int
;	O
setbuf	function
(	O
stdout	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
options	pointer
|=	O
OPT_INTERVAL	int
;	O
interval	long
=	O
ping_cvt_number	function
(	O
arg	pointer
,	O
0	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
if	O
(	O
!	O
is_root	bool
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"preloading needs root privilege"	pointer
)	O
;	O
preload	long
=	O
strtoul	function
(	O
arg	pointer
,	O
&	O
endptr	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
endptr	pointer
||	O
preload	long
>	O
INT_MAX	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"preload size too large"	pointer
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
options	pointer
|=	O
OPT_NUMERIC	int
;	O
break	O
;	O
case	O
'p'	O
:	O
decode_pattern	function
(	O
arg	pointer
,	O
&	O
pattern_len	pointer
,	O
pattern	array
)	O
;	O
patptr	pointer
=	O
pattern	array
;	O
break	O
;	O
case	O
'q'	O
:	O
options	pointer
|=	O
OPT_QUIET	int
;	O
break	O
;	O
case	O
'r'	O
:	O
socket_type	int
|=	O
SO_DONTROUTE	int
;	O
break	O
;	O
case	O
'w'	O
:	O
timeout	int
=	O
ping_cvt_number	function
(	O
arg	pointer
,	O
INT_MAX	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
data_length	long
=	O
ping_cvt_number	function
(	O
arg	pointer
,	O
PING_MAX_DATALEN	O
,	O
1	int
)	O
;	O
break	O
;	O
case	O
ARGP_KEY_NO_ARGS	int
:	O
argp_error	function
(	O
state	pointer
,	O
"missing host operand"	pointer
)	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
argp_options	array
,	O
parse_opt	function
,	O
args_doc	pointer
,	O
doc	pointer
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
index	function
;	O
int	O
status	int
=	O
0	int
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
getuid	function
(	O
)	O
==	O
0	int
)	O
is_root	bool
=	O
true	int
;	O
iu_argp_init	O
(	O
"ping6"	pointer
,	O
program_authors	array
)	O
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
&	O
index	function
,	O
NULL	O
)	O
;	O
ping	pointer
=	O
ping_init	function
(	O
0	int
,	O
getpid	function
(	O
)	O
)	O
;	O
if	O
(	O
ping	pointer
==	O
NULL	O
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
setsockopt	function
(	O
ping	pointer
->	O
ping_fd	int
,	O
SOL_SOCKET	int
,	O
SO_BROADCAST	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
,	O
sizeof	O
(	O
one	int
)	O
)	O
;	O
setuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
argc	int
-=	O
index	function
;	O
argv	pointer
+=	O
index	function
;	O
if	O
(	O
count	long
!=	O
0	int
)	O
ping_set_count	function
(	O
ping	pointer
,	O
count	long
)	O
;	O
if	O
(	O
socket_type	int
!=	O
0	int
)	O
ping_set_sockopt	function
(	O
ping	pointer
,	O
socket_type	int
,	O
&	O
one	int
,	O
sizeof	O
(	O
one	int
)	O
)	O
;	O
if	O
(	O
options	pointer
&	O
OPT_INTERVAL	int
)	O
ping_set_interval	function
(	O
ping	pointer
,	O
interval	long
)	O
;	O
init_data_buffer	function
(	O
patptr	pointer
,	O
pattern_len	pointer
)	O
;	O
while	O
(	O
argc	int
--	O
)	O
{	O
status	int
|=	O
ping_echo	function
(	O
*	O
argv	pointer
++	O
)	O
;	O
ping_reset	function
(	O
ping	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
char	O
*	O
ipaddr2str	function
(	O
struct	O
sockaddr_in6	struct
*	O
from	pointer
)	O
{	O
int	O
err	long
;	O
size_t	long
len	char
;	O
char	O
*	O
buf	pointer
,	O
ipstr	array
[	O
256	int
]	O
,	O
hoststr	array
[	O
256	int
]	O
;	O
err	long
=	O
getnameinfo	function
(	O
(	O
struct	O
sockaddr	struct
*	O
)	O
from	pointer
,	O
sizeof	O
(	O
*	O
from	pointer
)	O
,	O
ipstr	array
,	O
sizeof	O
(	O
ipstr	array
)	O
,	O
NULL	O
,	O
0	int
,	O
NI_NUMERICHOST	int
)	O
;	O
if	O
(	O
err	long
)	O
{	O
const	O
char	O
*	O
errmsg	pointer
;	O
if	O
(	O
err	long
==	O
EAI_SYSTEM	O
)	O
errmsg	pointer
=	O
strerror	function
(	O
errno	O
)	O
;	O
else	O
errmsg	pointer
=	O
gai_strerror	function
(	O
err	long
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"ping: getnameinfo: %s\n"	pointer
,	O
errmsg	pointer
)	O
;	O
return	O
xstrdup	function
(	O
"unknown"	pointer
)	O
;	O
}	O
if	O
(	O
options	pointer
&	O
OPT_NUMERIC	int
)	O
return	O
xstrdup	function
(	O
ipstr	array
)	O
;	O
err	long
=	O
getnameinfo	function
(	O
(	O
struct	O
sockaddr	struct
*	O
)	O
from	pointer
,	O
sizeof	O
(	O
*	O
from	pointer
)	O
,	O
hoststr	array
,	O
sizeof	O
(	O
hoststr	array
)	O
,	O
NULL	O
,	O
0	int
,	O
NI_NAMEREQD	int
)	O
;	O
if	O
(	O
err	long
)	O
return	O
xstrdup	function
(	O
ipstr	array
)	O
;	O
len	char
=	O
strlen	function
(	O
ipstr	array
)	O
+	O
strlen	function
(	O
hoststr	array
)	O
+	O
4	int
;	O
buf	pointer
=	O
xmalloc	function
(	O
len	char
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s (%s)"	pointer
,	O
hoststr	array
,	O
ipstr	array
)	O
;	O
return	O
buf	pointer
;	O
}	O
static	O
volatile	O
int	O
stop	int
=	O
0	int
;	O
static	O
void	O
sig_int	function
(	O
int	O
signal	function
)	O
{	O
stop	int
=	O
1	int
;	O
}	O
static	O
int	O
ping_run	function
(	O
PING	struct
*	O
ping	pointer
,	O
int	O
(	O
*	O
finish	pointer
)	O
(	O
)	O
)	O
{	O
fd_set	struct
fdset	struct
;	O
int	O
fdmax	int
;	O
struct	O
timeval	struct
resp_time	struct
;	O
struct	O
timeval	struct
last	struct
,	O
intvl	struct
,	O
now	struct
;	O
struct	O
timeval	struct
*	O
t	pointer
=	O
NULL	O
;	O
int	O
finishing	int
=	O
0	int
;	O
int	O
nresp	int
=	O
0	int
;	O
int	O
i	int
;	O
signal	function
(	O
SIGINT	int
,	O
sig_int	function
)	O
;	O
fdmax	int
=	O
ping	pointer
->	O
ping_fd	int
+	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
preload	long
;	O
i	int
++	O
)	O
send_echo	function
(	O
ping	pointer
)	O
;	O
if	O
(	O
options	pointer
&	O
OPT_FLOOD	int
)	O
{	O
intvl	struct
.	O
tv_sec	long
=	O
0	int
;	O
intvl	struct
.	O
tv_usec	long
=	O
10000	int
;	O
}	O
else	O
PING_SET_INTERVAL	O
(	O
intvl	struct
,	O
ping	pointer
->	O
ping_interval	long
)	O
;	O
gettimeofday	function
(	O
&	O
last	struct
,	O
NULL	O
)	O
;	O
send_echo	function
(	O
ping	pointer
)	O
;	O
while	O
(	O
!	O
stop	int
)	O
{	O
int	O
n	long
;	O
FD_ZERO	O
(	O
&	O
fdset	struct
)	O
;	O
FD_SET	O
(	O
ping	pointer
->	O
ping_fd	int
,	O
&	O
fdset	struct
)	O
;	O
gettimeofday	function
(	O
&	O
now	struct
,	O
NULL	O
)	O
;	O
resp_time	struct
.	O
tv_sec	long
=	O
last	struct
.	O
tv_sec	long
+	O
intvl	struct
.	O
tv_sec	long
-	O
now	struct
.	O
tv_sec	long
;	O
resp_time	struct
.	O
tv_usec	long
=	O
last	struct
.	O
tv_usec	long
+	O
intvl	struct
.	O
tv_usec	long
-	O
now	struct
.	O
tv_usec	long
;	O
while	O
(	O
resp_time	struct
.	O
tv_usec	long
<	O
0	int
)	O
{	O
resp_time	struct
.	O
tv_usec	long
+=	O
1000000	int
;	O
resp_time	struct
.	O
tv_sec	long
--	O
;	O
}	O
while	O
(	O
resp_time	struct
.	O
tv_usec	long
>=	O
1000000	int
)	O
{	O
resp_time	struct
.	O
tv_usec	long
-=	O
1000000	int
;	O
resp_time	struct
.	O
tv_sec	long
++	O
;	O
}	O
if	O
(	O
resp_time	struct
.	O
tv_sec	long
<	O
0	int
)	O
resp_time	struct
.	O
tv_sec	long
=	O
resp_time	struct
.	O
tv_usec	long
=	O
0	int
;	O
n	long
=	O
select	function
(	O
fdmax	int
,	O
&	O
fdset	struct
,	O
NULL	O
,	O
NULL	O
,	O
&	O
resp_time	struct
)	O
;	O
if	O
(	O
n	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
perror	function
(	O
"select"	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
n	long
==	O
1	int
)	O
{	O
if	O
(	O
ping_recv	function
(	O
ping	pointer
)	O
==	O
0	int
)	O
nresp	int
++	O
;	O
if	O
(	O
t	pointer
==	O
0	int
)	O
{	O
gettimeofday	function
(	O
&	O
now	struct
,	O
NULL	O
)	O
;	O
t	pointer
=	O
&	O
now	struct
;	O
}	O
if	O
(	O
ping_timeout_p	function
(	O
&	O
ping	pointer
->	O
ping_start_time	struct
,	O
timeout	int
)	O
)	O
break	O
;	O
if	O
(	O
ping	pointer
->	O
ping_count	long
&&	O
nresp	int
>=	O
ping	pointer
->	O
ping_count	long
)	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
ping	pointer
->	O
ping_count	long
||	O
ping	pointer
->	O
ping_num_xmit	long
<	O
ping	pointer
->	O
ping_count	long
)	O
{	O
send_echo	function
(	O
ping	pointer
)	O
;	O
if	O
(	O
!	O
(	O
options	pointer
&	O
OPT_QUIET	int
)	O
&&	O
options	pointer
&	O
OPT_FLOOD	int
)	O
{	O
putchar	function
(	O
'.'	O
)	O
;	O
}	O
if	O
(	O
ping_timeout_p	function
(	O
&	O
ping	pointer
->	O
ping_start_time	struct
,	O
timeout	int
)	O
)	O
break	O
;	O
}	O
else	O
if	O
(	O
finishing	int
)	O
break	O
;	O
else	O
{	O
finishing	int
=	O
1	int
;	O
intvl	struct
.	O
tv_sec	long
=	O
MAXWAIT	int
;	O
}	O
gettimeofday	function
(	O
&	O
last	struct
,	O
NULL	O
)	O
;	O
}	O
}	O
ping_unset_data	function
(	O
ping	pointer
)	O
;	O
if	O
(	O
finish	pointer
)	O
return	O
(	O
*	O
finish	pointer
)	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
send_echo	function
(	O
PING	struct
*	O
ping	pointer
)	O
{	O
int	O
off	long
=	O
0	int
;	O
if	O
(	O
PING_TIMING	O
(	O
data_length	long
)	O
)	O
{	O
struct	O
timeval	struct
tv	struct
;	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
NULL	O
)	O
;	O
ping_set_data	function
(	O
ping	pointer
,	O
&	O
tv	struct
,	O
0	int
,	O
sizeof	O
(	O
tv	struct
)	O
,	O
USE_IPV6	bool
)	O
;	O
off	long
+=	O
sizeof	O
(	O
tv	struct
)	O
;	O
}	O
if	O
(	O
data_buffer	pointer
)	O
ping_set_data	function
(	O
ping	pointer
,	O
data_buffer	pointer
,	O
off	long
,	O
data_length	long
>	O
PING_HEADER_LEN	O
?	O
data_length	long
-	O
PING_HEADER_LEN	O
:	O
data_length	long
,	O
USE_IPV6	bool
)	O
;	O
return	O
ping_xmit	function
(	O
ping	pointer
)	O
;	O
}	O
static	O
int	O
ping_finish	function
(	O
void	O
)	O
{	O
fflush	function
(	O
stdout	pointer
)	O
;	O
printf	function
(	O
"--- %s ping statistics ---\n"	pointer
,	O
ping	pointer
->	O
ping_hostname	pointer
)	O
;	O
printf	function
(	O
"%ld packets transmitted, "	pointer
,	O
ping	pointer
->	O
ping_num_xmit	long
)	O
;	O
printf	function
(	O
"%ld packets received, "	pointer
,	O
ping	pointer
->	O
ping_num_recv	long
)	O
;	O
if	O
(	O
ping	pointer
->	O
ping_num_rept	long
)	O
printf	function
(	O
"+%ld duplicates, "	pointer
,	O
ping	pointer
->	O
ping_num_rept	long
)	O
;	O
if	O
(	O
ping	pointer
->	O
ping_num_xmit	long
)	O
{	O
if	O
(	O
ping	pointer
->	O
ping_num_recv	long
>	O
ping	pointer
->	O
ping_num_xmit	long
)	O
printf	function
(	O
"-- somebody's printing up packets!"	pointer
)	O
;	O
else	O
printf	function
(	O
"%d%% packet loss"	pointer
,	O
(	O
int	O
)	O
(	O
(	O
(	O
ping	pointer
->	O
ping_num_xmit	long
-	O
ping	pointer
->	O
ping_num_recv	long
)	O
*	O
100	int
)	O
/	O
ping	pointer
->	O
ping_num_xmit	long
)	O
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
print_echo	function
(	O
int	O
dup	function
,	O
int	O
hops	int
,	O
struct	O
ping_stat	struct
*	O
stat	pointer
,	O
struct	O
sockaddr_in6	struct
*	O
dest	pointer
,	O
struct	O
sockaddr_in6	struct
*	O
from	pointer
,	O
struct	O
icmp6_hdr	struct
*	O
icmp6	pointer
,	O
int	O
datalen	int
)	O
;	O
static	O
void	O
print_icmp_error	function
(	O
struct	O
sockaddr_in6	struct
*	O
from	pointer
,	O
struct	O
icmp6_hdr	struct
*	O
icmp6	pointer
,	O
int	O
len	char
)	O
;	O
static	O
int	O
echo_finish	function
(	O
void	O
)	O
;	O
static	O
int	O
ping_echo	function
(	O
char	O
*	O
hostname	pointer
)	O
{	O
int	O
err	long
;	O
char	O
buffer	pointer
[	O
256	int
]	O
;	O
struct	O
ping_stat	struct
ping_stat	struct
;	O
int	O
status	int
;	O
if	O
(	O
options	pointer
&	O
OPT_FLOOD	int
&&	O
options	pointer
&	O
OPT_INTERVAL	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"-f and -i incompatible options"	pointer
)	O
;	O
memset	function
(	O
&	O
ping_stat	struct
,	O
0	int
,	O
sizeof	O
(	O
ping_stat	struct
)	O
)	O
;	O
ping_stat	struct
.	O
tmin	double
=	O
999999999.0	int
;	O
ping	pointer
->	O
ping_datalen	long
=	O
data_length	long
;	O
ping	pointer
->	O
ping_closure	pointer
=	O
&	O
ping_stat	struct
;	O
if	O
(	O
ping_set_dest	function
(	O
ping	pointer
,	O
hostname	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown host %s"	pointer
,	O
hostname	pointer
)	O
;	O
err	long
=	O
getnameinfo	function
(	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
ping	pointer
->	O
ping_dest	union
.	O
ping_sockaddr6	struct
,	O
sizeof	O
(	O
ping	pointer
->	O
ping_dest	union
.	O
ping_sockaddr6	struct
)	O
,	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
NULL	O
,	O
0	int
,	O
NI_NUMERICHOST	int
)	O
;	O
if	O
(	O
err	long
)	O
{	O
const	O
char	O
*	O
errmsg	pointer
;	O
if	O
(	O
err	long
==	O
EAI_SYSTEM	O
)	O
errmsg	pointer
=	O
strerror	function
(	O
errno	O
)	O
;	O
else	O
errmsg	pointer
=	O
gai_strerror	function
(	O
err	long
)	O
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"getnameinfo: %s"	pointer
,	O
errmsg	pointer
)	O
;	O
}	O
printf	function
(	O
"PING %s (%s): %d data bytes\n"	pointer
,	O
ping	pointer
->	O
ping_hostname	pointer
,	O
buffer	pointer
,	O
data_length	long
)	O
;	O
status	int
=	O
ping_run	function
(	O
ping	pointer
,	O
echo_finish	function
)	O
;	O
free	function
(	O
ping	pointer
->	O
ping_hostname	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
void	O
ping_reset	function
(	O
PING	struct
*	O
p	pointer
)	O
{	O
p	pointer
->	O
ping_num_xmit	long
=	O
0	int
;	O
p	pointer
->	O
ping_num_recv	long
=	O
0	int
;	O
p	pointer
->	O
ping_num_rept	long
=	O
0	int
;	O
}	O
static	O
int	O
print_echo	function
(	O
int	O
dupflag	int
,	O
int	O
hops	int
,	O
struct	O
ping_stat	struct
*	O
ping_stat	struct
,	O
struct	O
sockaddr_in6	struct
*	O
dest	pointer
,	O
struct	O
sockaddr_in6	struct
*	O
from	pointer
,	O
struct	O
icmp6_hdr	struct
*	O
icmp6	pointer
,	O
int	O
datalen	int
)	O
{	O
int	O
err	long
;	O
char	O
buf	pointer
[	O
256	int
]	O
;	O
struct	O
timeval	struct
tv	struct
;	O
int	O
timing	int
=	O
0	int
;	O
double	O
triptime	double
=	O
0.0	int
;	O
gettimeofday	function
(	O
&	O
tv	struct
,	O
NULL	O
)	O
;	O
if	O
(	O
PING_TIMING	O
(	O
datalen	int
-	O
sizeof	O
(	O
struct	O
icmp6_hdr	struct
)	O
)	O
)	O
{	O
struct	O
timeval	struct
tv1	struct
,	O
*	O
tp	pointer
;	O
timing	int
++	O
;	O
tp	pointer
=	O
(	O
struct	O
timeval	struct
*	O
)	O
(	O
icmp6	pointer
+	O
1	int
)	O
;	O
memcpy	function
(	O
&	O
tv1	struct
,	O
tp	pointer
,	O
sizeof	O
(	O
tv1	struct
)	O
)	O
;	O
tvsub	function
(	O
&	O
tv	struct
,	O
&	O
tv1	struct
)	O
;	O
triptime	double
=	O
(	O
(	O
double	O
)	O
tv	struct
.	O
tv_sec	long
)	O
*	O
1000.0	int
+	O
(	O
(	O
double	O
)	O
tv	struct
.	O
tv_usec	long
)	O
/	O
1000.0	int
;	O
ping_stat	struct
->	O
tsum	double
+=	O
triptime	double
;	O
ping_stat	struct
->	O
tsumsq	double
+=	O
triptime	double
*	O
triptime	double
;	O
if	O
(	O
triptime	double
<	O
ping_stat	struct
->	O
tmin	double
)	O
ping_stat	struct
->	O
tmin	double
=	O
triptime	double
;	O
if	O
(	O
triptime	double
>	O
ping_stat	struct
->	O
tmax	double
)	O
ping_stat	struct
->	O
tmax	double
=	O
triptime	double
;	O
}	O
if	O
(	O
options	pointer
&	O
OPT_QUIET	int
)	O
return	O
0	int
;	O
if	O
(	O
options	pointer
&	O
OPT_FLOOD	int
)	O
{	O
putchar	function
(	O
'\b'	O
)	O
;	O
return	O
0	int
;	O
}	O
err	long
=	O
getnameinfo	function
(	O
(	O
struct	O
sockaddr	struct
*	O
)	O
from	pointer
,	O
sizeof	O
(	O
*	O
from	pointer
)	O
,	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
err	long
)	O
{	O
const	O
char	O
*	O
errmsg	pointer
;	O
if	O
(	O
err	long
==	O
EAI_SYSTEM	O
)	O
errmsg	pointer
=	O
strerror	function
(	O
errno	O
)	O
;	O
else	O
errmsg	pointer
=	O
gai_strerror	function
(	O
err	long
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"ping: getnameinfo: %s\n"	pointer
,	O
errmsg	pointer
)	O
;	O
strcpy	function
(	O
buf	pointer
,	O
"unknown"	pointer
)	O
;	O
}	O
printf	function
(	O
"%d bytes from %s: icmp_seq=%u"	pointer
,	O
datalen	int
,	O
buf	pointer
,	O
htons	function
(	O
icmp6	pointer
->	O
icmp6_seq	O
)	O
)	O
;	O
if	O
(	O
hops	int
>=	O
0	int
)	O
printf	function
(	O
" ttl=%d"	pointer
,	O
hops	int
)	O
;	O
if	O
(	O
timing	int
)	O
printf	function
(	O
" time=%.3f ms"	pointer
,	O
triptime	double
)	O
;	O
if	O
(	O
dupflag	int
)	O
printf	function
(	O
" (DUP!)"	pointer
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
icmp_code_descr	struct
{	O
int	O
code	int
;	O
char	O
*	O
diag	pointer
;	O
}	O
;	O
static	O
struct	O
icmp_code_descr	struct
icmp_dest_unreach_desc	array
[	O
]	O
=	O
{	O
{	O
ICMP6_DST_UNREACH_NOROUTE	int
,	O
"No route to destination"	pointer
}	O
,	O
{	O
ICMP6_DST_UNREACH_ADMIN	int
,	O
"Destination administratively prohibited"	pointer
}	O
,	O
{	O
ICMP6_DST_UNREACH_BEYONDSCOPE	int
,	O
"Beyond scope of source address"	pointer
}	O
,	O
{	O
ICMP6_DST_UNREACH_ADDR	int
,	O
"Address unreachable"	pointer
}	O
,	O
{	O
ICMP6_DST_UNREACH_NOPORT	int
,	O
"Port unreachable"	pointer
}	O
,	O
}	O
;	O
static	O
void	O
print_dst_unreach	function
(	O
struct	O
icmp6_hdr	struct
*	O
icmp6	pointer
)	O
{	O
struct	O
icmp_code_descr	struct
*	O
p	pointer
;	O
printf	function
(	O
"Destination unreachable: "	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
icmp_dest_unreach_desc	array
;	O
p	pointer
<	O
icmp_dest_unreach_desc	array
+	O
NITEMS	O
(	O
icmp_dest_unreach_desc	array
)	O
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
code	int
==	O
icmp6	pointer
->	O
icmp6_code	char
)	O
{	O
puts	function
(	O
p	pointer
->	O
diag	pointer
)	O
;	O
return	O
;	O
}	O
}	O
printf	function
(	O
"Unknown code %d\n"	pointer
,	O
icmp6	pointer
->	O
icmp6_code	char
)	O
;	O
}	O
static	O
void	O
print_packet_too_big	function
(	O
struct	O
icmp6_hdr	struct
*	O
icmp6	pointer
)	O
{	O
printf	function
(	O
"Packet too big, mtu=%d\n"	pointer
,	O
icmp6	pointer
->	O
icmp6_mtu	O
)	O
;	O
}	O
static	O
struct	O
icmp_code_descr	struct
icmp_time_exceeded_desc	array
[	O
]	O
=	O
{	O
{	O
ICMP6_TIME_EXCEED_TRANSIT	int
,	O
"Hop limit exceeded"	pointer
}	O
,	O
{	O
ICMP6_TIME_EXCEED_REASSEMBLY	int
,	O
"Fragment reassembly timeout"	pointer
}	O
,	O
}	O
;	O
static	O
void	O
print_time_exceeded	function
(	O
struct	O
icmp6_hdr	struct
*	O
icmp6	pointer
)	O
{	O
struct	O
icmp_code_descr	struct
*	O
p	pointer
;	O
printf	function
(	O
"Time exceeded: "	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
icmp_time_exceeded_desc	array
;	O
p	pointer
<	O
icmp_time_exceeded_desc	array
+	O
NITEMS	O
(	O
icmp_time_exceeded_desc	array
)	O
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
code	int
==	O
icmp6	pointer
->	O
icmp6_code	char
)	O
{	O
puts	function
(	O
p	pointer
->	O
diag	pointer
)	O
;	O
return	O
;	O
}	O
}	O
printf	function
(	O
"Unknown code %d\n"	pointer
,	O
icmp6	pointer
->	O
icmp6_code	char
)	O
;	O
}	O
static	O
struct	O
icmp_code_descr	struct
icmp_param_prob_desc	array
[	O
]	O
=	O
{	O
{	O
ICMP6_PARAMPROB_HEADER	int
,	O
"Erroneous header field"	pointer
}	O
,	O
{	O
ICMP6_PARAMPROB_NEXTHEADER	int
,	O
"Unrecognized Next Header type"	pointer
}	O
,	O
{	O
ICMP6_PARAMPROB_OPTION	int
,	O
"Unrecognized IPv6 option"	pointer
}	O
,	O
}	O
;	O
static	O
void	O
print_param_prob	function
(	O
struct	O
icmp6_hdr	struct
*	O
icmp6	pointer
)	O
{	O
struct	O
icmp_code_descr	struct
*	O
p	pointer
;	O
printf	function
(	O
"Parameter problem: "	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
icmp_param_prob_desc	array
;	O
p	pointer
<	O
icmp_param_prob_desc	array
+	O
NITEMS	O
(	O
icmp_param_prob_desc	array
)	O
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
code	int
==	O
icmp6	pointer
->	O
icmp6_code	char
)	O
{	O
puts	function
(	O
p	pointer
->	O
diag	pointer
)	O
;	O
return	O
;	O
}	O
}	O
printf	function
(	O
"Unknown code %d\n"	pointer
,	O
icmp6	pointer
->	O
icmp6_code	char
)	O
;	O
}	O
static	O
struct	O
icmp_diag	struct
{	O
int	O
type	int
;	O
void	O
(	O
*	O
func	pointer
)	O
(	O
struct	O
icmp6_hdr	struct
*	O
)	O
;	O
}	O
icmp_diag	struct
[	O
]	O
=	O
{	O
{	O
ICMP6_DST_UNREACH	int
,	O
print_dst_unreach	function
}	O
,	O
{	O
ICMP6_PACKET_TOO_BIG	int
,	O
print_packet_too_big	function
}	O
,	O
{	O
ICMP6_TIME_EXCEEDED	int
,	O
print_time_exceeded	function
}	O
,	O
{	O
ICMP6_PARAM_PROB	int
,	O
print_param_prob	function
}	O
,	O
}	O
;	O
static	O
void	O
print_icmp_error	function
(	O
struct	O
sockaddr_in6	struct
*	O
from	pointer
,	O
struct	O
icmp6_hdr	struct
*	O
icmp6	pointer
,	O
int	O
len	char
)	O
{	O
char	O
*	O
s	long
;	O
struct	O
icmp_diag	struct
*	O
p	pointer
;	O
s	long
=	O
ipaddr2str	function
(	O
from	pointer
)	O
;	O
printf	function
(	O
"%d bytes from %s: "	pointer
,	O
len	char
,	O
s	long
)	O
;	O
free	function
(	O
s	long
)	O
;	O
for	O
(	O
p	pointer
=	O
icmp_diag	struct
;	O
p	pointer
<	O
icmp_diag	struct
+	O
NITEMS	O
(	O
icmp_diag	struct
)	O
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
type	int
==	O
icmp6	pointer
->	O
icmp6_type	char
)	O
{	O
p	pointer
->	O
func	pointer
(	O
icmp6	pointer
)	O
;	O
return	O
;	O
}	O
}	O
printf	function
(	O
"Unknown ICMP type: %d\n"	pointer
,	O
icmp6	pointer
->	O
icmp6_type	char
)	O
;	O
}	O
static	O
int	O
echo_finish	function
(	O
void	O
)	O
{	O
ping_finish	function
(	O
)	O
;	O
if	O
(	O
ping	pointer
->	O
ping_num_recv	long
&&	O
PING_TIMING	O
(	O
data_length	long
)	O
)	O
{	O
struct	O
ping_stat	struct
*	O
ping_stat	struct
=	O
(	O
struct	O
ping_stat	struct
*	O
)	O
ping	pointer
->	O
ping_closure	pointer
;	O
double	O
total	double
=	O
ping	pointer
->	O
ping_num_recv	long
+	O
ping	pointer
->	O
ping_num_rept	long
;	O
double	O
avg	double
=	O
ping_stat	struct
->	O
tsum	double
/	O
total	double
;	O
double	O
vari	double
=	O
ping_stat	struct
->	O
tsumsq	double
/	O
total	double
-	O
avg	double
*	O
avg	double
;	O
printf	function
(	O
"round-trip min/avg/max/stddev = %.3f/%.3f/%.3f/%.3f ms\n"	pointer
,	O
ping_stat	struct
->	O
tmin	double
,	O
avg	double
,	O
ping_stat	struct
->	O
tmax	double
,	O
nsqrt	function
(	O
vari	double
,	O
0.0005	int
)	O
)	O
;	O
}	O
return	O
(	O
ping	pointer
->	O
ping_num_recv	long
==	O
0	int
)	O
;	O
}	O
static	O
PING	struct
*	O
ping_init	function
(	O
int	O
type	int
,	O
int	O
ident	int
)	O
{	O
int	O
fd	int
,	O
err	long
;	O
const	O
int	O
on	int
=	O
1	int
;	O
PING	struct
*	O
p	pointer
;	O
struct	O
icmp6_filter	struct
filter	struct
;	O
fd	int
=	O
socket	function
(	O
PF_INET6	int
,	O
SOCK_RAW	int
,	O
IPPROTO_ICMPV6	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EPERM	int
||	O
errno	O
==	O
EACCES	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"raw socket"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
ICMP6_FILTER_SETBLOCKALL	O
(	O
&	O
filter	struct
)	O
;	O
ICMP6_FILTER_SETPASS	O
(	O
ICMP6_ECHO_REPLY	int
,	O
&	O
filter	struct
)	O
;	O
ICMP6_FILTER_SETPASS	O
(	O
ICMP6_DST_UNREACH	int
,	O
&	O
filter	struct
)	O
;	O
ICMP6_FILTER_SETPASS	O
(	O
ICMP6_PACKET_TOO_BIG	int
,	O
&	O
filter	struct
)	O
;	O
ICMP6_FILTER_SETPASS	O
(	O
ICMP6_TIME_EXCEEDED	int
,	O
&	O
filter	struct
)	O
;	O
ICMP6_FILTER_SETPASS	O
(	O
ICMP6_PARAM_PROB	int
,	O
&	O
filter	struct
)	O
;	O
err	long
=	O
setsockopt	function
(	O
fd	int
,	O
IPPROTO_ICMPV6	int
,	O
ICMP6_FILTER	int
,	O
&	O
filter	struct
,	O
sizeof	O
(	O
filter	struct
)	O
)	O
;	O
if	O
(	O
err	long
)	O
{	O
close	function
(	O
fd	int
)	O
;	O
return	O
NULL	O
;	O
}	O
err	long
=	O
setsockopt	function
(	O
fd	int
,	O
IPPROTO_IPV6	int
,	O
IPV6_RECVHOPLIMIT	int
,	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
;	O
if	O
(	O
err	long
)	O
{	O
close	function
(	O
fd	int
)	O
;	O
return	O
NULL	O
;	O
}	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
close	function
(	O
fd	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memset	function
(	O
p	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
ping_fd	int
=	O
fd	int
;	O
p	pointer
->	O
ping_count	long
=	O
DEFAULT_PING_COUNT	int
;	O
p	pointer
->	O
ping_interval	long
=	O
PING_DEFAULT_INTERVAL	int
;	O
p	pointer
->	O
ping_datalen	long
=	O
sizeof	O
(	O
struct	O
icmp6_hdr	struct
)	O
;	O
p	pointer
->	O
ping_ident	int
=	O
ident	int
&	O
0xFFFF	int
;	O
p	pointer
->	O
ping_cktab_size	int
=	O
PING_CKTABSIZE	int
;	O
gettimeofday	function
(	O
&	O
p	pointer
->	O
ping_start_time	struct
,	O
NULL	O
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
int	O
ping_xmit	function
(	O
PING	struct
*	O
p	pointer
)	O
{	O
int	O
i	int
,	O
buflen	int
;	O
struct	O
icmp6_hdr	struct
*	O
icmp6	pointer
;	O
if	O
(	O
_ping_setbuf	function
(	O
p	pointer
,	O
USE_IPV6	bool
)	O
)	O
return	O
-	O
1	int
;	O
buflen	int
=	O
p	pointer
->	O
ping_datalen	long
+	O
sizeof	O
(	O
struct	O
icmp6_hdr	struct
)	O
;	O
_PING_CLR	O
(	O
p	pointer
,	O
p	pointer
->	O
ping_num_xmit	long
)	O
;	O
icmp6	pointer
=	O
(	O
struct	O
icmp6_hdr	struct
*	O
)	O
p	pointer
->	O
ping_buffer	pointer
;	O
icmp6	pointer
->	O
icmp6_type	char
=	O
ICMP6_ECHO_REQUEST	int
;	O
icmp6	pointer
->	O
icmp6_code	char
=	O
0	int
;	O
icmp6	pointer
->	O
icmp6_cksum	short
=	O
0	int
;	O
icmp6	pointer
->	O
icmp6_id	O
=	O
htons	function
(	O
p	pointer
->	O
ping_ident	int
)	O
;	O
icmp6	pointer
->	O
icmp6_seq	O
=	O
htons	function
(	O
p	pointer
->	O
ping_num_xmit	long
)	O
;	O
i	int
=	O
sendto	function
(	O
p	pointer
->	O
ping_fd	int
,	O
(	O
char	O
*	O
)	O
p	pointer
->	O
ping_buffer	pointer
,	O
buflen	int
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
p	pointer
->	O
ping_dest	union
.	O
ping_sockaddr6	struct
,	O
sizeof	O
(	O
p	pointer
->	O
ping_dest	union
.	O
ping_sockaddr6	struct
)	O
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
perror	function
(	O
"ping: sendto"	pointer
)	O
;	O
else	O
{	O
p	pointer
->	O
ping_num_xmit	long
++	O
;	O
if	O
(	O
i	int
!=	O
buflen	int
)	O
printf	function
(	O
"ping: wrote %s %d chars, ret=%d\n"	pointer
,	O
p	pointer
->	O
ping_hostname	pointer
,	O
buflen	int
,	O
i	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
my_echo_reply	function
(	O
PING	struct
*	O
p	pointer
,	O
struct	O
icmp6_hdr	struct
*	O
icmp6	pointer
)	O
{	O
struct	O
ip6_hdr	struct
*	O
orig_ip	pointer
=	O
(	O
struct	O
ip6_hdr	struct
*	O
)	O
(	O
icmp6	pointer
+	O
1	int
)	O
;	O
struct	O
icmp6_hdr	struct
*	O
orig_icmp	pointer
=	O
(	O
struct	O
icmp6_hdr	struct
*	O
)	O
(	O
orig_ip	pointer
+	O
1	int
)	O
;	O
return	O
IN6_ARE_ADDR_EQUAL	O
(	O
&	O
orig_ip	pointer
->	O
ip6_dst	struct
,	O
&	O
ping	pointer
->	O
ping_dest	union
.	O
ping_sockaddr6	struct
.	O
sin6_addr	struct
)	O
&&	O
orig_ip	pointer
->	O
ip6_nxt	O
==	O
IPPROTO_ICMPV6	int
&&	O
orig_icmp	pointer
->	O
icmp6_type	char
==	O
ICMP6_ECHO_REQUEST	int
&&	O
orig_icmp	pointer
->	O
icmp6_id	O
==	O
htons	function
(	O
p	pointer
->	O
ping_ident	int
)	O
;	O
}	O
static	O
int	O
ping_recv	function
(	O
PING	struct
*	O
p	pointer
)	O
{	O
int	O
dupflag	int
,	O
n	long
;	O
int	O
hops	int
=	O
-	O
1	int
;	O
struct	O
msghdr	struct
msg	struct
;	O
struct	O
iovec	struct
iov	struct
;	O
struct	O
icmp6_hdr	struct
*	O
icmp6	pointer
;	O
struct	O
cmsghdr	struct
*	O
cmsg	pointer
;	O
char	O
cmsg_data	array
[	O
1024	int
]	O
;	O
iov	struct
.	O
iov_base	pointer
=	O
p	pointer
->	O
ping_buffer	pointer
;	O
iov	struct
.	O
iov_len	long
=	O
_PING_BUFLEN	O
(	O
p	pointer
,	O
USE_IPV6	bool
)	O
;	O
msg	struct
.	O
msg_name	pointer
=	O
&	O
p	pointer
->	O
ping_from	union
.	O
ping_sockaddr6	struct
;	O
msg	struct
.	O
msg_namelen	int
=	O
sizeof	O
(	O
p	pointer
->	O
ping_from	union
.	O
ping_sockaddr6	struct
)	O
;	O
msg	struct
.	O
msg_iov	pointer
=	O
&	O
iov	struct
;	O
msg	struct
.	O
msg_iovlen	long
=	O
1	int
;	O
msg	struct
.	O
msg_control	pointer
=	O
cmsg_data	array
;	O
msg	struct
.	O
msg_controllen	long
=	O
sizeof	O
(	O
cmsg_data	array
)	O
;	O
msg	struct
.	O
msg_flags	int
=	O
0	int
;	O
n	long
=	O
recvmsg	function
(	O
p	pointer
->	O
ping_fd	int
,	O
&	O
msg	struct
,	O
0	int
)	O
;	O
if	O
(	O
n	long
<	O
0	int
)	O
return	O
-	O
1	int
;	O
for	O
(	O
cmsg	pointer
=	O
CMSG_FIRSTHDR	O
(	O
&	O
msg	struct
)	O
;	O
cmsg	pointer
;	O
cmsg	pointer
=	O
CMSG_NXTHDR	O
(	O
&	O
msg	struct
,	O
cmsg	pointer
)	O
)	O
{	O
if	O
(	O
cmsg	pointer
->	O
cmsg_level	int
==	O
IPPROTO_IPV6	int
&&	O
cmsg	pointer
->	O
cmsg_type	int
==	O
IPV6_HOPLIMIT	int
)	O
{	O
hops	int
=	O
*	O
(	O
int	O
*	O
)	O
CMSG_DATA	O
(	O
cmsg	pointer
)	O
;	O
break	O
;	O
}	O
}	O
icmp6	pointer
=	O
(	O
struct	O
icmp6_hdr	struct
*	O
)	O
p	pointer
->	O
ping_buffer	pointer
;	O
if	O
(	O
icmp6	pointer
->	O
icmp6_type	char
==	O
ICMP6_ECHO_REPLY	int
)	O
{	O
if	O
(	O
ntohs	function
(	O
icmp6	pointer
->	O
icmp6_id	O
)	O
!=	O
p	pointer
->	O
ping_ident	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
_PING_TST	O
(	O
p	pointer
,	O
ntohs	function
(	O
icmp6	pointer
->	O
icmp6_seq	O
)	O
)	O
)	O
{	O
p	pointer
->	O
ping_num_rept	long
++	O
;	O
dupflag	int
=	O
1	int
;	O
}	O
else	O
{	O
_PING_SET	O
(	O
p	pointer
,	O
ntohs	function
(	O
icmp6	pointer
->	O
icmp6_seq	O
)	O
)	O
;	O
p	pointer
->	O
ping_num_recv	long
++	O
;	O
dupflag	int
=	O
0	int
;	O
}	O
print_echo	function
(	O
dupflag	int
,	O
hops	int
,	O
p	pointer
->	O
ping_closure	pointer
,	O
&	O
p	pointer
->	O
ping_dest	union
.	O
ping_sockaddr6	struct
,	O
&	O
p	pointer
->	O
ping_from	union
.	O
ping_sockaddr6	struct
,	O
icmp6	pointer
,	O
n	long
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
my_echo_reply	function
(	O
p	pointer
,	O
icmp6	pointer
)	O
)	O
return	O
-	O
1	int
;	O
print_icmp_error	function
(	O
&	O
p	pointer
->	O
ping_from	union
.	O
ping_sockaddr6	struct
,	O
icmp6	pointer
,	O
n	long
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
ping_set_dest	function
(	O
PING	struct
*	O
ping	pointer
,	O
char	O
*	O
host	pointer
)	O
{	O
int	O
err	long
;	O
struct	O
addrinfo	struct
*	O
result	pointer
,	O
hints	struct
;	O
memset	function
(	O
&	O
hints	struct
,	O
0	int
,	O
sizeof	O
(	O
hints	struct
)	O
)	O
;	O
hints	struct
.	O
ai_family	int
=	O
AF_INET6	O
;	O
err	long
=	O
getaddrinfo	function
(	O
host	pointer
,	O
NULL	O
,	O
&	O
hints	struct
,	O
&	O
result	pointer
)	O
;	O
if	O
(	O
err	long
)	O
return	O
1	int
;	O
memcpy	function
(	O
&	O
ping	pointer
->	O
ping_dest	union
.	O
ping_sockaddr6	struct
,	O
result	pointer
->	O
ai_addr	pointer
,	O
result	pointer
->	O
ai_addrlen	int
)	O
;	O
freeaddrinfo	function
(	O
result	pointer
)	O
;	O
ping	pointer
->	O
ping_hostname	pointer
=	O
strdup	function
(	O
host	pointer
)	O
;	O
if	O
(	O
!	O
ping	pointer
->	O
ping_hostname	pointer
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
