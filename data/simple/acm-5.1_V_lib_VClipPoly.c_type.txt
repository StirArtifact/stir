VPolygon	struct
*	O
_VClipPolygon	function
(	O
VPolygon	struct
*	O
poly	pointer
,	O
VPoint	struct
*	O
clipPlane	pointer
)	O
{	O
register	O
int	O
j	int
,	O
lastj	int
,	O
numPts	int
=	O
0	int
,	O
clipped	int
=	O
0	int
;	O
double	O
d1	double
,	O
d2	double
,	O
a	pointer
;	O
VPoint	struct
tmpPoint	array
[	O
VmaxVP	int
]	O
;	O
VPolygon	struct
*	O
p	pointer
;	O
if	O
(	O
poly	pointer
->	O
numVtces	short
>	O
0	int
)	O
{	O
lastj	int
=	O
poly	pointer
->	O
numVtces	short
-	O
1	int
;	O
d1	double
=	O
VDotProd	function
(	O
&	O
(	O
poly	pointer
->	O
vertex	pointer
[	O
poly	pointer
->	O
numVtces	short
-	O
1	int
]	O
)	O
,	O
clipPlane	pointer
)	O
;	O
numPts	int
=	O
0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
poly	pointer
->	O
numVtces	short
;	O
++	O
j	int
)	O
{	O
if	O
(	O
d1	double
>	O
0.0	int
)	O
tmpPoint	array
[	O
numPts	int
++	O
]	O
=	O
poly	pointer
->	O
vertex	pointer
[	O
lastj	int
]	O
;	O
d2	double
=	O
VDotProd	function
(	O
&	O
(	O
poly	pointer
->	O
vertex	pointer
[	O
j	int
]	O
)	O
,	O
clipPlane	pointer
)	O
;	O
if	O
(	O
d1	double
*	O
d2	double
<	O
0.0	int
)	O
{	O
clipped	int
=	O
1	int
;	O
a	pointer
=	O
d1	double
/	O
(	O
d1	double
-	O
d2	double
)	O
;	O
tmpPoint	array
[	O
numPts	int
]	O
.	O
x	double
=	O
a	pointer
*	O
poly	pointer
->	O
vertex	pointer
[	O
j	int
]	O
.	O
x	double
+	O
(	O
1.0	int
-	O
a	pointer
)	O
*	O
poly	pointer
->	O
vertex	pointer
[	O
lastj	int
]	O
.	O
x	double
;	O
tmpPoint	array
[	O
numPts	int
]	O
.	O
y	double
=	O
a	pointer
*	O
poly	pointer
->	O
vertex	pointer
[	O
j	int
]	O
.	O
y	double
+	O
(	O
1.0	int
-	O
a	pointer
)	O
*	O
poly	pointer
->	O
vertex	pointer
[	O
lastj	int
]	O
.	O
y	double
;	O
tmpPoint	array
[	O
numPts	int
++	O
]	O
.	O
z	double
=	O
a	pointer
*	O
poly	pointer
->	O
vertex	pointer
[	O
j	int
]	O
.	O
z	double
+	O
(	O
1.0	int
-	O
a	pointer
)	O
*	O
poly	pointer
->	O
vertex	pointer
[	O
lastj	int
]	O
.	O
z	double
;	O
}	O
lastj	int
=	O
j	int
;	O
d1	double
=	O
d2	double
;	O
}	O
}	O
if	O
(	O
numPts	int
==	O
0	int
)	O
{	O
p	pointer
=	O
(	O
VPolygon	struct
*	O
)	O
NULL	O
;	O
VDestroyPolygon	O
(	O
poly	pointer
)	O
;	O
}	O
else	O
if	O
(	O
clipped	int
)	O
{	O
p	pointer
=	O
VCreatePolygonFromTemplate	function
(	O
numPts	int
,	O
tmpPoint	array
,	O
poly	pointer
)	O
;	O
VDestroyPolygon	O
(	O
poly	pointer
)	O
;	O
}	O
else	O
p	pointer
=	O
poly	pointer
;	O
return	O
p	pointer
;	O
}	O
VPolygon	struct
*	O
VClipPolygon	function
(	O
VPolygon	struct
*	O
poly	pointer
,	O
VPolygon	struct
*	O
clipPoly	pointer
)	O
{	O
int	O
i	int
;	O
VPolygon	struct
*	O
p	pointer
=	O
poly	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
clipPoly	pointer
->	O
numVtces	short
;	O
++	O
i	int
)	O
{	O
if	O
(	O
p	pointer
==	O
(	O
VPolygon	struct
*	O
)	O
NULL	O
)	O
break	O
;	O
p	pointer
=	O
_VClipPolygon	function
(	O
p	pointer
,	O
&	O
(	O
clipPoly	pointer
->	O
vertex	pointer
[	O
i	int
]	O
)	O
)	O
;	O
}	O
return	O
p	pointer
;	O
}	O
VPolygon	struct
*	O
VClipSidedPolygon	function
(	O
Viewport	struct
*	O
v	struct
,	O
VPolygon	struct
*	O
poly	pointer
,	O
VPolygon	struct
*	O
clipPoly	pointer
)	O
{	O
int	O
i	int
;	O
VPolygon	struct
*	O
p	pointer
=	O
poly	pointer
;	O
if	O
(	O
p	pointer
->	O
flags	short
&	O
PolyNormalValid	int
)	O
{	O
if	O
(	O
VDotProd	function
(	O
&	O
p	pointer
->	O
vertex	pointer
[	O
0	int
]	O
,	O
&	O
p	pointer
->	O
normal	struct
)	O
>=	O
0.0	int
)	O
{	O
if	O
(	O
p	pointer
->	O
backColor	pointer
)	O
{	O
p	pointer
->	O
flags	short
|=	O
PolyUseBackColor	int
;	O
}	O
else	O
if	O
(	O
p	pointer
->	O
flags	short
&	O
PolyClipBackface	int
)	O
{	O
VDestroyPolygon	O
(	O
p	pointer
)	O
;	O
return	O
(	O
VPolygon	struct
*	O
)	O
NULL	O
;	O
}	O
}	O
else	O
{	O
p	pointer
->	O
flags	short
&=	O
~	O
(	O
PolyUseBackColor	int
)	O
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
clipPoly	pointer
->	O
numVtces	short
;	O
++	O
i	int
)	O
{	O
if	O
(	O
p	pointer
==	O
(	O
VPolygon	struct
*	O
)	O
NULL	O
)	O
break	O
;	O
p	pointer
=	O
_VClipPolygon	function
(	O
p	pointer
,	O
&	O
(	O
clipPoly	pointer
->	O
vertex	pointer
[	O
i	int
]	O
)	O
)	O
;	O
}	O
return	O
p	pointer
;	O
}	O
