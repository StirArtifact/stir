static	O
int	O
triangular_multsymm_L2	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
gsl_matrix	struct
*	O
T	pointer
)	O
;	O
static	O
int	O
triangular_multsymm_L3	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
gsl_matrix	struct
*	O
T	pointer
)	O
;	O
static	O
int	O
triangular_mult_L2	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
;	O
static	O
int	O
triangular_mult_L3	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
;	O
int	O
gsl_linalg_tri_LTL	function
(	O
gsl_matrix	struct
*	O
L	pointer
)	O
{	O
return	O
triangular_multsymm_L3	function
(	O
CblasLower	int
,	O
L	pointer
)	O
;	O
}	O
int	O
gsl_linalg_tri_UL	function
(	O
gsl_matrix	struct
*	O
LU	pointer
)	O
{	O
return	O
triangular_mult_L3	function
(	O
CblasUpper	int
,	O
LU	pointer
)	O
;	O
}	O
static	O
int	O
triangular_multsymm_L2	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
gsl_matrix	struct
*	O
T	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
T	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
T	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_view	struct
v1	struct
,	O
v2	struct
;	O
size_t	long
i	long
;	O
if	O
(	O
Uplo	enum
==	O
CblasUpper	int
)	O
{	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
Tii	double
=	O
gsl_matrix_get	function
(	O
T	pointer
,	O
i	long
,	O
i	long
)	O
;	O
if	O
(	O
i	long
<	O
N	int
-	O
1	int
)	O
{	O
double	O
tmp	double
;	O
v1	struct
=	O
gsl_matrix_subcolumn	function
(	O
T	pointer
,	O
i	long
,	O
i	long
,	O
N	int
-	O
i	long
)	O
;	O
gsl_blas_ddot	function
(	O
&	O
v1	struct
.	O
vector	struct
,	O
&	O
v1	struct
.	O
vector	struct
,	O
&	O
tmp	double
)	O
;	O
gsl_matrix_set	function
(	O
T	pointer
,	O
i	long
,	O
i	long
,	O
tmp	double
)	O
;	O
if	O
(	O
i	long
>	O
0	int
)	O
{	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
T	pointer
,	O
i	long
+	O
1	int
,	O
0	int
,	O
N	int
-	O
i	long
-	O
1	int
,	O
i	long
)	O
;	O
v1	struct
=	O
gsl_matrix_subcolumn	function
(	O
T	pointer
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
v2	struct
=	O
gsl_matrix_subrow	function
(	O
T	pointer
,	O
i	long
,	O
0	int
,	O
i	long
)	O
;	O
gsl_blas_dgemv	function
(	O
CblasTrans	int
,	O
1.0	int
,	O
&	O
m	pointer
.	O
matrix	struct
,	O
&	O
v1	struct
.	O
vector	struct
,	O
Tii	double
,	O
&	O
v2	struct
.	O
vector	struct
)	O
;	O
}	O
}	O
else	O
{	O
v1	struct
=	O
gsl_matrix_row	function
(	O
T	pointer
,	O
N	int
-	O
1	int
)	O
;	O
gsl_blas_dscal	function
(	O
Tii	double
,	O
&	O
v1	struct
.	O
vector	struct
)	O
;	O
}	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
triangular_multsymm_L3	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
gsl_matrix	struct
*	O
T	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
T	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
T	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<=	O
CROSSOVER_TRIMULT	O
)	O
{	O
return	O
triangular_multsymm_L2	function
(	O
Uplo	enum
,	O
T	pointer
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_LINALG_SPLIT	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_view	struct
T11	struct
=	O
gsl_matrix_submatrix	function
(	O
T	pointer
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct
T12	struct
=	O
gsl_matrix_submatrix	function
(	O
T	pointer
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct
T21	struct
=	O
gsl_matrix_submatrix	function
(	O
T	pointer
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct
T22	struct
=	O
gsl_matrix_submatrix	function
(	O
T	pointer
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
status	int
=	O
triangular_multsymm_L3	function
(	O
Uplo	enum
,	O
&	O
T11	struct
.	O
matrix	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Uplo	enum
==	O
CblasLower	int
)	O
{	O
gsl_blas_dsyrk	function
(	O
Uplo	enum
,	O
CblasTrans	int
,	O
1.0	int
,	O
&	O
T21	struct
.	O
matrix	struct
,	O
1.0	int
,	O
&	O
T11	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_dtrmm	function
(	O
CblasLeft	int
,	O
Uplo	enum
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
&	O
T22	struct
.	O
matrix	struct
,	O
&	O
T21	struct
.	O
matrix	struct
)	O
;	O
}	O
else	O
{	O
gsl_blas_dsyrk	function
(	O
Uplo	enum
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
T12	struct
.	O
matrix	struct
,	O
1.0	int
,	O
&	O
T11	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_dtrmm	function
(	O
CblasRight	int
,	O
Uplo	enum
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
&	O
T22	struct
.	O
matrix	struct
,	O
&	O
T12	struct
.	O
matrix	struct
)	O
;	O
}	O
status	int
=	O
triangular_multsymm_L3	function
(	O
Uplo	enum
,	O
&	O
T22	struct
.	O
matrix	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
triangular_mult_L2	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
if	O
(	O
N	int
==	O
1	int
)	O
return	O
GSL_SUCCESS	int
;	O
if	O
(	O
Uplo	enum
==	O
CblasUpper	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
*	O
Aii	pointer
=	O
gsl_matrix_ptr	function
(	O
A	pointer
,	O
i	long
,	O
i	long
)	O
;	O
double	O
Uii	double
=	O
*	O
Aii	pointer
;	O
if	O
(	O
i	long
<	O
N	int
-	O
1	int
)	O
{	O
gsl_vector_view	struct
lb	struct
=	O
gsl_matrix_subcolumn	function
(	O
A	pointer
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_vector_view	struct
ur	struct
=	O
gsl_matrix_subrow	function
(	O
A	pointer
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
double	O
tmp	double
;	O
gsl_blas_ddot	function
(	O
&	O
lb	struct
.	O
vector	struct
,	O
&	O
ur	struct
.	O
vector	struct
,	O
&	O
tmp	double
)	O
;	O
*	O
Aii	pointer
+=	O
tmp	double
;	O
if	O
(	O
i	long
>	O
0	int
)	O
{	O
gsl_matrix_view	struct
U_TR	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
i	long
+	O
1	int
,	O
i	long
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_matrix_view	struct
L_BL	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
i	long
+	O
1	int
,	O
0	int
,	O
N	int
-	O
i	long
-	O
1	int
,	O
i	long
)	O
;	O
gsl_vector_view	struct
ut	struct
=	O
gsl_matrix_subcolumn	function
(	O
A	pointer
,	O
i	long
,	O
0	int
,	O
i	long
)	O
;	O
gsl_vector_view	struct
ll	struct
=	O
gsl_matrix_subrow	function
(	O
A	pointer
,	O
i	long
,	O
0	int
,	O
i	long
)	O
;	O
gsl_blas_dgemv	function
(	O
CblasTrans	int
,	O
1.0	int
,	O
&	O
L_BL	struct
.	O
matrix	struct
,	O
&	O
ur	struct
.	O
vector	struct
,	O
Uii	double
,	O
&	O
ll	struct
.	O
vector	struct
)	O
;	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
U_TR	struct
.	O
matrix	struct
,	O
&	O
lb	struct
.	O
vector	struct
,	O
1.0	int
,	O
&	O
ut	struct
.	O
vector	struct
)	O
;	O
}	O
}	O
else	O
{	O
gsl_vector_view	struct
v	pointer
=	O
gsl_matrix_subrow	function
(	O
A	pointer
,	O
N	int
-	O
1	int
,	O
0	int
,	O
N	int
-	O
1	int
)	O
;	O
gsl_blas_dscal	function
(	O
Uii	double
,	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
}	O
}	O
}	O
else	O
{	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
triangular_mult_L3	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<=	O
CROSSOVER_TRIMULT	O
)	O
{	O
return	O
triangular_mult_L2	function
(	O
Uplo	enum
,	O
A	pointer
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_LINALG_SPLIT	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_view	struct
A11	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct
A12	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct
A21	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct
A22	struct
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
status	int
=	O
triangular_mult_L3	function
(	O
Uplo	enum
,	O
&	O
A11	struct
.	O
matrix	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Uplo	enum
==	O
CblasLower	int
)	O
{	O
}	O
else	O
{	O
gsl_blas_dgemm	function
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
A12	struct
.	O
matrix	struct
,	O
&	O
A21	struct
.	O
matrix	struct
,	O
1.0	int
,	O
&	O
A11	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_dtrmm	function
(	O
CblasRight	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
1.0	int
,	O
&	O
A22	struct
.	O
matrix	struct
,	O
&	O
A12	struct
.	O
matrix	struct
)	O
;	O
gsl_blas_dtrmm	function
(	O
CblasLeft	int
,	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
&	O
A22	struct
.	O
matrix	struct
,	O
&	O
A21	struct
.	O
matrix	struct
)	O
;	O
}	O
status	int
=	O
triangular_mult_L3	function
(	O
Uplo	enum
,	O
&	O
A22	struct
.	O
matrix	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
