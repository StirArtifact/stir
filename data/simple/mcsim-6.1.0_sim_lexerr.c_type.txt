void	O
ReportError	function
(	O
PINPUTBUF	pointer
pibIn	pointer
,	O
WORD	int
wCode	int
,	O
PSTR	pointer
szMsg	pointer
,	O
PSTR	pointer
szAltMsg	pointer
)	O
{	O
char	O
cNull	char
=	O
'\0'	O
;	O
BOOL	int
bFatal	int
=	O
wCode	int
&	O
RE_FATAL	int
;	O
BOOL	int
bWarning	int
=	O
wCode	int
&	O
RE_WARNING	int
;	O
wCode	int
&=	O
~	O
(	O
RE_FATAL	int
|	O
RE_WARNING	int
)	O
;	O
if	O
(	O
!	O
szMsg	pointer
)	O
szMsg	pointer
=	O
&	O
cNull	char
;	O
if	O
(	O
wCode	int
)	O
{	O
if	O
(	O
bWarning	int
)	O
printf	function
(	O
"Warning: "	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
"Error: "	pointer
)	O
;	O
bFatal	int
|=	O
(	O
pibIn	pointer
&&	O
(	O
pibIn	pointer
->	O
cErrors	int
++	O
>	O
MAX_ERRORS	int
)	O
)	O
;	O
}	O
}	O
if	O
(	O
pibIn	pointer
)	O
{	O
if	O
(	O
pibIn	pointer
->	O
pfileIn	pointer
||	O
pibIn	pointer
->	O
iLNPrev	int
)	O
{	O
printf	function
(	O
"line %d: "	pointer
,	O
pibIn	pointer
->	O
iLineNum	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
wCode	int
!=	O
RE_FILENOTFOUND	int
)	O
{	O
PSTRLEX	array
szTmp	array
;	O
szTmp	array
[	O
MAX_LEX	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
printf	function
(	O
"'%s'...\n  "	pointer
,	O
strncpy	function
(	O
szTmp	array
,	O
pibIn	pointer
->	O
pbufOrg	pointer
,	O
MAX_LEX	int
-	O
1	int
)	O
)	O
;	O
}	O
}	O
}	O
switch	O
(	O
wCode	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
printf	function
(	O
"Unknown error code %x: %s"	pointer
,	O
wCode	int
,	O
szMsg	pointer
)	O
;	O
case	O
RE_INIT	int
:	O
printf	function
(	O
"Initialization error."	pointer
)	O
;	O
break	O
;	O
case	O
RE_FILENOTFOUND	int
:	O
printf	function
(	O
"File not found \"%s\"."	pointer
,	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_CANNOTOPEN	int
:	O
printf	function
(	O
"Cannot open file \"%s\"."	pointer
,	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_OUTOFMEM	int
:	O
printf	function
(	O
"Out of memory in %s()."	pointer
,	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_READERROR	int
:	O
printf	function
(	O
"%s file cannot be read\n"	pointer
,	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_UNEXPECTED	int
:	O
printf	function
(	O
"Unexpected character '%c' in input file."	pointer
,	O
*	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_UNEXPNUMBER	int
:	O
printf	function
(	O
"Unexpected number %s in input file."	pointer
,	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_EXPECTED	int
:	O
printf	function
(	O
"Expected '%c' before '%c'."	pointer
,	O
szMsg	pointer
[	O
1	int
]	O
,	O
szMsg	pointer
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
RE_LEXEXPECTED	int
:	O
printf	function
(	O
"Expected <%s>"	pointer
,	O
szMsg	pointer
)	O
;	O
if	O
(	O
szAltMsg	pointer
)	O
printf	function
(	O
" before '%s'"	pointer
,	O
szAltMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_SYNTAXERR	int
:	O
printf	function
(	O
"Syntax error %s"	pointer
,	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_BADCONTEXT	int
:	O
printf	function
(	O
"'%s' used in invalid context."	pointer
,	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_TOOMANYLEVELS	int
:	O
printf	function
(	O
"Too many levels"	pointer
)	O
;	O
break	O
;	O
case	O
RE_TOOMANYINST	int
:	O
printf	function
(	O
"Too many instances at level %s"	pointer
,	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_OPENLEVEL	int
:	O
printf	function
(	O
"Unclosed level statement"	pointer
)	O
;	O
break	O
;	O
case	O
RE_LEVINEXPT	int
:	O
printf	function
(	O
"Level statement enclosed in Simulation (Experiment) statement"	pointer
)	O
;	O
break	O
;	O
case	O
RE_TOOMANYPVARS	int
:	O
printf	function
(	O
"Too many variables in 'Print(...)' statement"	pointer
)	O
;	O
break	O
;	O
case	O
RE_EQNTOOLONG	int
:	O
printf	function
(	O
"Equation is too long.  Possibly missing terminator."	pointer
)	O
;	O
break	O
;	O
case	O
RE_UNDEFINED	int
:	O
printf	function
(	O
"Undefined identifier '%s'."	pointer
,	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_TYPENOTMCMC	int
:	O
printf	function
(	O
"The level statement is permitted only in MCMC simulations.\n"	pointer
)	O
;	O
break	O
;	O
case	O
RE_ERRORSINEXP	int
:	O
printf	function
(	O
"Bad definition of experiment %d\n"	pointer
,	O
*	O
(	O
PINT	pointer
)	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_NOOUTPUTS	int
:	O
printf	function
(	O
"Simulation (Experiment) %d has no outputs specified\n"	pointer
,	O
*	O
(	O
PINT	pointer
)	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_POSITIVE	int
:	O
printf	function
(	O
"Positive number expected."	pointer
)	O
;	O
break	O
;	O
case	O
RE_SPECERR	int
:	O
printf	function
(	O
"in specification: %s"	pointer
,	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_INSUF_POINTS	int
:	O
printf	function
(	O
"Insufficient points in file \"%s\"\n"	pointer
,	O
szMsg	pointer
)	O
;	O
break	O
;	O
case	O
RE_MAXMIN_RANGE	int
:	O
printf	function
(	O
"Max is less than min\n"	pointer
)	O
;	O
break	O
;	O
case	O
RE_OUTISRESTART	int
:	O
printf	function
(	O
"Output and restart files have the same name\n"	pointer
)	O
;	O
break	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
if	O
(	O
szAltMsg	pointer
&&	O
wCode	int
!=	O
RE_LEXEXPECTED	int
)	O
printf	function
(	O
"%s\n"	pointer
,	O
szAltMsg	pointer
)	O
;	O
if	O
(	O
bFatal	int
)	O
{	O
if	O
(	O
(	O
pibIn	pointer
!=	O
NULL	O
)	O
&&	O
(	O
pibIn	pointer
->	O
pInfo	pointer
!=	O
NULL	O
)	O
)	O
FreeLevels	function
(	O
(	O
PANALYSIS	pointer
)	O
pibIn	pointer
->	O
pInfo	pointer
)	O
;	O
printf	function
(	O
"\nFatal errors.  Exiting.\n\n"	pointer
)	O
;	O
exit	function
(	O
wCode	int
)	O
;	O
}	O
}	O
void	O
ReportRunTimeError	function
(	O
PANALYSIS	pointer
panal	pointer
,	O
WORD	int
wCode	int
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
PSTR	pointer
szMsg1	pointer
,	O
szMsg2	pointer
,	O
szMsg3	pointer
;	O
BOOL	int
bFatal	int
=	O
wCode	int
&	O
RE_FATAL	int
;	O
BOOL	int
bWarning	int
=	O
wCode	int
&	O
RE_WARNING	int
;	O
wCode	int
&=	O
~	O
(	O
RE_FATAL	int
|	O
RE_WARNING	int
)	O
;	O
if	O
(	O
wCode	int
)	O
bWarning	int
?	O
(	O
printf	function
(	O
"Warning: "	pointer
)	O
)	O
:	O
(	O
printf	function
(	O
"Fatal error: "	pointer
)	O
)	O
;	O
va_start	O
(	O
ap	array
,	O
wCode	int
)	O
;	O
switch	O
(	O
wCode	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
printf	function
(	O
"Unknown error code %x"	pointer
,	O
wCode	int
)	O
;	O
break	O
;	O
case	O
RE_OUTOFMEM	int
:	O
szMsg1	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
printf	function
(	O
"Out of memory in %s()."	pointer
,	O
szMsg1	pointer
)	O
;	O
break	O
;	O
case	O
RE_CANNOTOPEN	int
:	O
szMsg1	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
szMsg2	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
printf	function
(	O
"Cannot open file \"%s\" in %s()."	pointer
,	O
szMsg1	pointer
,	O
szMsg2	pointer
)	O
;	O
break	O
;	O
case	O
RE_BADNORMALSD	int
:	O
szMsg1	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
szMsg2	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
szMsg3	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
printf	function
(	O
"SD of normal variate %s = %s in %s()."	pointer
,	O
szMsg1	pointer
,	O
szMsg2	pointer
,	O
szMsg3	pointer
)	O
;	O
break	O
;	O
case	O
RE_BADLOGNORMALSD	int
:	O
szMsg1	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
szMsg2	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
szMsg3	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
printf	function
(	O
"SD of lognormal variate %s = %s in %s()."	pointer
,	O
szMsg1	pointer
,	O
szMsg2	pointer
,	O
szMsg3	pointer
)	O
;	O
break	O
;	O
case	O
RE_BADLOGNORMALMEAN	int
:	O
szMsg1	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
szMsg2	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
szMsg3	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
printf	function
(	O
"Mean of lognormal variate %s = %s in %s()."	pointer
,	O
szMsg1	pointer
,	O
szMsg2	pointer
,	O
szMsg3	pointer
)	O
;	O
break	O
;	O
case	O
RE_BADUNIFORMDIST	int
:	O
szMsg1	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
szMsg2	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
printf	function
(	O
"Max and min of uniform variate %s are equal or inverted in %s()."	pointer
,	O
szMsg1	pointer
,	O
szMsg2	pointer
)	O
;	O
break	O
;	O
case	O
RE_UNKNOWNDIST	int
:	O
szMsg1	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
printf	function
(	O
"Unknown distribution in %s()."	pointer
,	O
szMsg1	pointer
)	O
;	O
break	O
;	O
case	O
RE_BADMODEL	int
:	O
printf	function
(	O
"Bad value in output; model is not computable.\n"	pointer
)	O
;	O
break	O
;	O
case	O
RE_DUPVARINEXPRT	int
:	O
szMsg1	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
szMsg2	pointer
=	O
va_arg	O
(	O
ap	array
,	O
PSTR	pointer
)	O
;	O
printf	function
(	O
"Variable %s appears in two or more '%s' statements.\n"	pointer
,	O
szMsg1	pointer
,	O
szMsg2	pointer
)	O
;	O
break	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
if	O
(	O
bFatal	int
)	O
{	O
if	O
(	O
panal	pointer
!=	O
NULL	O
)	O
FreeLevels	function
(	O
panal	pointer
)	O
;	O
printf	function
(	O
"\nFatal errors.  Exiting.\n\n"	pointer
)	O
;	O
exit	function
(	O
wCode	int
)	O
;	O
}	O
}	O
