void	O
help	function
(	O
char	O
*	O
progname	pointer
)	O
{	O
printf	function
(	O
"usage: %s [--file=NAME] [--dump] [COMMAND...]\n"	pointer
,	O
progname	pointer
)	O
;	O
printf	function
(	O
"Valid COMMANDs are:\n"	pointer
)	O
;	O
printf	function
(	O
" X=Y      set property X to value Y\n"	pointer
)	O
;	O
printf	function
(	O
" X:=Y     same, but fail if X has already been set\n"	pointer
)	O
;	O
printf	function
(	O
" ?X       query whether X is set\n"	pointer
)	O
;	O
printf	function
(	O
" +X       query the value of the property X\n"	pointer
)	O
;	O
printf	function
(	O
" -X       unset property X\n"	pointer
)	O
;	O
printf	function
(	O
" 0        clear all properties\n"	pointer
)	O
;	O
printf	function
(	O
" !        invalidate properties\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
mu_property_t	pointer
prop	pointer
;	O
mu_iterator_t	pointer
itr	pointer
;	O
int	O
i	long
,	O
j	int
,	O
rc	int
;	O
char	O
*	O
filename	pointer
=	O
NULL	O
;	O
int	O
dumpit	int
=	O
0	int
;	O
mu_stream_t	pointer
str	pointer
=	O
NULL	O
;	O
if	O
(	O
argc	long
==	O
1	int
)	O
help	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
!	O
(	O
argv	pointer
[	O
i	long
]	O
[	O
0	int
]	O
==	O
'-'	O
&&	O
argv	pointer
[	O
i	long
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
)	O
break	O
;	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"--help"	pointer
)	O
==	O
0	int
)	O
help	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"--file="	pointer
,	O
7	int
)	O
==	O
0	int
)	O
filename	pointer
=	O
argv	pointer
[	O
i	long
]	O
+	O
7	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"--dump"	pointer
)	O
==	O
0	int
)	O
dumpit	int
=	O
1	int
;	O
else	O
{	O
mu_error	function
(	O
"unknown switch: %s"	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
filename	pointer
)	O
{	O
MU_ASSERT	O
(	O
mu_file_stream_create	function
(	O
&	O
str	pointer
,	O
filename	pointer
,	O
MU_STREAM_RDWR	O
|	O
MU_STREAM_CREAT	int
)	O
)	O
;	O
if	O
(	O
i	long
==	O
argc	long
)	O
dumpit	int
=	O
1	int
;	O
}	O
MU_ASSERT	O
(	O
mu_property_create_init	function
(	O
&	O
prop	pointer
,	O
mu_assoc_property_init	function
,	O
str	pointer
)	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
,	O
j	int
++	O
)	O
{	O
char	O
*	O
key	pointer
=	O
argv	pointer
[	O
i	long
]	O
;	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
key	pointer
,	O
'='	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
int	O
override	int
;	O
if	O
(	O
p	pointer
>	O
key	pointer
&&	O
p	pointer
[	O
-	O
1	int
]	O
==	O
':'	O
)	O
{	O
override	int
=	O
0	int
;	O
p	pointer
[	O
-	O
1	int
]	O
=	O
0	int
;	O
}	O
else	O
{	O
override	int
=	O
1	int
;	O
*	O
p	pointer
=	O
0	int
;	O
}	O
p	pointer
++	O
;	O
rc	int
=	O
mu_property_set_value	function
(	O
prop	pointer
,	O
key	pointer
,	O
p	pointer
,	O
override	int
)	O
;	O
printf	function
(	O
"%d: %s=%s: %s\n"	pointer
,	O
j	int
,	O
key	pointer
,	O
p	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
key	pointer
[	O
0	int
]	O
==	O
'?'	O
)	O
{	O
key	pointer
++	O
;	O
rc	int
=	O
mu_property_is_set	function
(	O
prop	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"%d: %s is %s\n"	pointer
,	O
j	int
,	O
key	pointer
,	O
rc	int
?	O
"set"	pointer
:	O
"not set"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
key	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
key	pointer
++	O
;	O
rc	int
=	O
mu_property_unset	function
(	O
prop	pointer
,	O
key	pointer
)	O
;	O
printf	function
(	O
"%d: unset %s: %s\n"	pointer
,	O
j	int
,	O
key	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
key	pointer
[	O
0	int
]	O
==	O
'+'	O
)	O
{	O
const	O
char	O
*	O
val	pointer
;	O
key	pointer
++	O
;	O
rc	int
=	O
mu_property_sget_value	function
(	O
prop	pointer
,	O
key	pointer
,	O
&	O
val	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
printf	function
(	O
"%d: cannot get %s: %s\n"	pointer
,	O
j	int
,	O
key	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
printf	function
(	O
"%d: %s=%s\n"	pointer
,	O
j	int
,	O
key	pointer
,	O
val	pointer
)	O
;	O
}	O
else	O
if	O
(	O
key	pointer
[	O
0	int
]	O
==	O
'0'	O
&&	O
key	pointer
[	O
1	int
]	O
==	O
0	int
)	O
{	O
rc	int
=	O
mu_property_clear	function
(	O
prop	pointer
)	O
;	O
printf	function
(	O
"%d: clear: %s\n"	pointer
,	O
j	int
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
key	pointer
[	O
0	int
]	O
==	O
'!'	O
&&	O
key	pointer
[	O
1	int
]	O
==	O
0	int
)	O
{	O
rc	int
=	O
mu_property_invalidate	function
(	O
prop	pointer
)	O
;	O
printf	function
(	O
"%d: invalidate: %s\n"	pointer
,	O
j	int
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
{	O
mu_error	function
(	O
"%d: unrecognized command"	pointer
,	O
i	long
)	O
;	O
}	O
}	O
if	O
(	O
dumpit	int
)	O
{	O
if	O
(	O
mu_property_get_iterator	function
(	O
prop	pointer
,	O
&	O
itr	pointer
)	O
==	O
0	int
)	O
{	O
printf	function
(	O
"Property dump:\n"	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
const	O
char	O
*	O
name	pointer
,	O
*	O
val	pointer
;	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
name	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
val	pointer
)	O
;	O
printf	function
(	O
"%s=%s\n"	pointer
,	O
name	pointer
,	O
val	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
}	O
mu_property_destroy	function
(	O
&	O
prop	pointer
)	O
;	O
return	O
0	int
;	O
}	O
