extern	O
double	O
vrgModelVars	array
[	O
]	O
;	O
static	O
double	O
dInitialTime	double
;	O
int	O
iCurrentTime	int
;	O
double	O
*	O
rgdTime	pointer
=	O
NULL	O
;	O
long	O
*	O
rgiVars	pointer
=	O
NULL	O
;	O
double	O
*	O
*	O
pdVar	pointer
=	O
NULL	O
;	O
double	O
CalcDelay	function
(	O
HVAR	long
hvar	long
,	O
double	O
dTime	double
,	O
double	O
delay	double
)	O
{	O
int	O
i	int
;	O
int	O
sentinel	int
;	O
double	O
dTmp	double
,	O
oldTime	double
;	O
if	O
(	O
!	O
rgiVars	pointer
[	O
hvar	long
]	O
)	O
{	O
pdVar	pointer
[	O
hvar	long
]	O
=	O
InitdVector	function
(	O
MAX_DELAY	int
)	O
;	O
pdVar	pointer
[	O
hvar	long
]	O
[	O
0	int
]	O
=	O
vrgModelVars	array
[	O
hvar	long
]	O
;	O
rgiVars	pointer
[	O
hvar	long
]	O
=	O
1	int
;	O
}	O
if	O
(	O
delay	double
<=	O
0	int
)	O
{	O
printf	function
(	O
"\nError: negative or null delays aren't allowed - Exiting.\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
else	O
{	O
oldTime	double
=	O
dTime	double
-	O
delay	double
;	O
if	O
(	O
oldTime	double
<=	O
dInitialTime	double
)	O
{	O
return	O
(	O
pdVar	pointer
[	O
hvar	long
]	O
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
i	int
=	O
iCurrentTime	int
-	O
1	int
;	O
if	O
(	O
i	int
<	O
0	int
)	O
i	int
=	O
MAX_DELAY	int
-	O
1	int
;	O
sentinel	int
=	O
0	int
;	O
while	O
(	O
rgdTime	pointer
[	O
i	int
]	O
>	O
oldTime	double
)	O
{	O
i	int
=	O
i	int
-	O
1	int
;	O
if	O
(	O
i	int
<	O
0	int
)	O
i	int
=	O
MAX_DELAY	int
-	O
1	int
;	O
sentinel	int
=	O
sentinel	int
+	O
1	int
;	O
if	O
(	O
sentinel	int
>	O
MAX_DELAY	int
-	O
1	int
)	O
{	O
printf	function
(	O
"Error: size MAX_DELAY of rgdTime array = "	pointer
"%ld too small.\n"	pointer
,	O
(	O
long	O
)	O
MAX_DELAY	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
}	O
if	O
(	O
i	int
==	O
(	O
iCurrentTime	int
-	O
1	int
)	O
)	O
{	O
dTmp	double
=	O
pdVar	pointer
[	O
hvar	long
]	O
[	O
i	int
-	O
1	int
]	O
+	O
(	O
(	O
pdVar	pointer
[	O
hvar	long
]	O
[	O
i	int
]	O
-	O
pdVar	pointer
[	O
hvar	long
]	O
[	O
i	int
-	O
1	int
]	O
)	O
*	O
(	O
oldTime	double
-	O
rgdTime	pointer
[	O
i	int
-	O
1	int
]	O
)	O
/	O
(	O
rgdTime	pointer
[	O
i	int
]	O
-	O
rgdTime	pointer
[	O
i	int
-	O
1	int
]	O
)	O
)	O
;	O
}	O
else	O
{	O
dTmp	double
=	O
pdVar	pointer
[	O
hvar	long
]	O
[	O
i	int
]	O
+	O
(	O
(	O
pdVar	pointer
[	O
hvar	long
]	O
[	O
i	int
+	O
1	int
]	O
-	O
pdVar	pointer
[	O
hvar	long
]	O
[	O
i	int
]	O
)	O
*	O
(	O
oldTime	double
-	O
rgdTime	pointer
[	O
i	int
]	O
)	O
/	O
(	O
rgdTime	pointer
[	O
i	int
+	O
1	int
]	O
-	O
rgdTime	pointer
[	O
i	int
]	O
)	O
)	O
;	O
}	O
}	O
return	O
dTmp	double
;	O
}	O
}	O
void	O
InitDelays	function
(	O
double	O
dTime	double
)	O
{	O
int	O
i	int
;	O
if	O
(	O
!	O
rgdTime	pointer
)	O
{	O
rgdTime	pointer
=	O
InitdVector	function
(	O
MAX_DELAY	int
)	O
;	O
iCurrentTime	int
=	O
-	O
1	int
;	O
dInitialTime	double
=	O
dTime	double
;	O
}	O
if	O
(	O
!	O
rgiVars	pointer
)	O
{	O
rgiVars	pointer
=	O
InitlVector	function
(	O
GetNModelVars	function
(	O
)	O
)	O
;	O
pdVar	pointer
=	O
InitpdVector	function
(	O
GetNModelVars	function
(	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
GetNModelVars	function
(	O
)	O
;	O
i	int
++	O
)	O
rgiVars	pointer
[	O
i	int
]	O
=	O
0	int
;	O
}	O
}	O
void	O
StoreDelayed	function
(	O
double	O
t	pointer
)	O
{	O
int	O
i	int
;	O
iCurrentTime	int
++	O
;	O
if	O
(	O
iCurrentTime	int
==	O
MAX_DELAY	int
)	O
iCurrentTime	int
=	O
0	int
;	O
rgdTime	pointer
[	O
iCurrentTime	int
]	O
=	O
t	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
GetNModelVars	function
(	O
)	O
;	O
i	int
++	O
)	O
if	O
(	O
rgiVars	pointer
[	O
i	int
]	O
)	O
{	O
pdVar	pointer
[	O
i	int
]	O
[	O
iCurrentTime	int
]	O
=	O
vrgModelVars	array
[	O
i	int
]	O
;	O
}	O
}	O
