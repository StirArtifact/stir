struct	O
_euler	struct
{	O
double	O
yaw	double
;	O
double	O
pitch	double
;	O
}	O
;	O
struct	O
entry	struct
{	O
int	O
id	int
;	O
double	O
d	long
;	O
struct	O
entry	struct
*	O
next	pointer
;	O
}	O
;	O
static	O
struct	O
_euler	struct
view	array
[	O
]	O
=	O
{	O
{	O
DEGtoRAD	O
(	O
90.0	int
)	O
,	O
DEGtoRAD	O
(	O
0.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
-	O
90.0	int
)	O
,	O
DEGtoRAD	O
(	O
0.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
45.0	int
)	O
,	O
DEGtoRAD	O
(	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
45.0	int
)	O
,	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
,	O
DEGtoRAD	O
(	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
,	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
135.0	int
)	O
,	O
DEGtoRAD	O
(	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
135.0	int
)	O
,	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
-	O
135.0	int
)	O
,	O
DEGtoRAD	O
(	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
-	O
135.0	int
)	O
,	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
}	O
,	O
}	O
;	O
static	O
char	O
*	O
aspect_name	array
[	O
]	O
=	O
{	O
"left"	pointer
,	O
"right"	pointer
,	O
"front right bottom"	pointer
,	O
"front right top"	pointer
,	O
"front left bottom"	pointer
,	O
"front left top"	pointer
,	O
"aft right bottom"	pointer
,	O
"aft right top"	pointer
,	O
"aft left bottom"	pointer
,	O
"aft left top"	pointer
}	O
;	O
void	O
VComputePolygonOrdering	function
(	O
VObject	struct
*	O
obj	pointer
)	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
k	int
,	O
inserted	int
;	O
register	O
double	O
d	long
,	O
dn	double
;	O
VMatrix	struct
mtx	struct
;	O
VPoint	struct
pt1	struct
,	O
pt2	struct
;	O
VPolygon	struct
*	O
*	O
p	pointer
;	O
struct	O
entry	struct
ent	array
[	O
VmaxVP	int
]	O
,	O
*	O
head	pointer
,	O
*	O
e	pointer
,	O
*	O
last_e	pointer
;	O
obj	pointer
->	O
order	pointer
=	O
(	O
unsigned	O
short	O
*	O
)	O
Vmalloc	function
(	O
sizeof	O
(	O
unsigned	O
short	O
)	O
*	O
NUM_ASPECTS	int
*	O
obj	pointer
->	O
numPolys	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_ASPECTS	int
;	O
++	O
i	int
)	O
{	O
VIdentMatrix	function
(	O
&	O
mtx	struct
)	O
;	O
VRotate	function
(	O
&	O
mtx	struct
,	O
YRotation	int
,	O
-	O
view	array
[	O
i	int
]	O
.	O
pitch	double
)	O
;	O
VRotate	function
(	O
&	O
mtx	struct
,	O
ZRotation	int
,	O
view	array
[	O
i	int
]	O
.	O
yaw	double
)	O
;	O
pt1	struct
.	O
x	double
=	O
obj	pointer
->	O
extent	double
*	O
10.0	int
;	O
pt1	struct
.	O
y	double
=	O
pt1	struct
.	O
z	double
=	O
0.0	int
;	O
VTransform	function
(	O
&	O
pt1	struct
,	O
&	O
mtx	struct
,	O
&	O
pt2	struct
)	O
;	O
head	pointer
=	O
(	O
struct	O
entry	struct
*	O
)	O
NULL	O
;	O
for	O
(	O
j	int
=	O
0	int
,	O
p	pointer
=	O
obj	pointer
->	O
polygon	pointer
;	O
j	int
<	O
obj	pointer
->	O
numPolys	int
;	O
++	O
j	int
)	O
{	O
dn	double
=	O
mag	O
(	O
p	pointer
[	O
j	int
]	O
->	O
vertex	pointer
[	O
0	int
]	O
.	O
x	double
-	O
pt2	struct
.	O
x	double
,	O
p	pointer
[	O
j	int
]	O
->	O
vertex	pointer
[	O
0	int
]	O
.	O
y	double
-	O
pt2	struct
.	O
y	double
,	O
p	pointer
[	O
j	int
]	O
->	O
vertex	pointer
[	O
0	int
]	O
.	O
z	double
-	O
pt2	struct
.	O
z	double
)	O
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<	O
p	pointer
[	O
j	int
]	O
->	O
numVtces	short
;	O
++	O
k	int
)	O
{	O
d	long
=	O
mag	O
(	O
p	pointer
[	O
j	int
]	O
->	O
vertex	pointer
[	O
k	int
]	O
.	O
x	double
-	O
pt2	struct
.	O
x	double
,	O
p	pointer
[	O
j	int
]	O
->	O
vertex	pointer
[	O
k	int
]	O
.	O
y	double
-	O
pt2	struct
.	O
y	double
,	O
p	pointer
[	O
j	int
]	O
->	O
vertex	pointer
[	O
k	int
]	O
.	O
z	double
-	O
pt2	struct
.	O
z	double
)	O
;	O
if	O
(	O
d	long
>	O
dn	double
)	O
{	O
dn	double
=	O
d	long
;	O
}	O
}	O
ent	array
[	O
j	int
]	O
.	O
id	int
=	O
j	int
;	O
ent	array
[	O
j	int
]	O
.	O
d	long
=	O
dn	double
;	O
if	O
(	O
!	O
head	pointer
)	O
{	O
ent	array
[	O
j	int
]	O
.	O
next	pointer
=	O
head	pointer
;	O
head	pointer
=	O
&	O
ent	array
[	O
j	int
]	O
;	O
}	O
else	O
{	O
last_e	pointer
=	O
(	O
struct	O
entry	struct
*	O
)	O
NULL	O
;	O
inserted	int
=	O
0	int
;	O
for	O
(	O
e	pointer
=	O
head	pointer
;	O
e	pointer
;	O
e	pointer
=	O
e	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
e	pointer
->	O
d	long
<	O
ent	array
[	O
j	int
]	O
.	O
d	long
)	O
{	O
if	O
(	O
last_e	pointer
)	O
{	O
ent	array
[	O
j	int
]	O
.	O
next	pointer
=	O
last_e	pointer
->	O
next	pointer
;	O
last_e	pointer
->	O
next	pointer
=	O
&	O
ent	array
[	O
j	int
]	O
;	O
}	O
else	O
{	O
ent	array
[	O
j	int
]	O
.	O
next	pointer
=	O
e	pointer
;	O
head	pointer
=	O
&	O
ent	array
[	O
j	int
]	O
;	O
}	O
inserted	int
=	O
1	int
;	O
break	O
;	O
}	O
last_e	pointer
=	O
e	pointer
;	O
}	O
if	O
(	O
inserted	int
==	O
0	int
)	O
{	O
last_e	pointer
->	O
next	pointer
=	O
&	O
ent	array
[	O
j	int
]	O
;	O
ent	array
[	O
j	int
]	O
.	O
next	pointer
=	O
(	O
struct	O
entry	struct
*	O
)	O
NULL	O
;	O
}	O
}	O
}	O
k	int
=	O
obj	pointer
->	O
numPolys	int
*	O
i	int
;	O
for	O
(	O
j	int
=	O
0	int
,	O
e	pointer
=	O
head	pointer
;	O
j	int
<	O
obj	pointer
->	O
numPolys	int
;	O
++	O
j	int
,	O
e	pointer
=	O
e	pointer
->	O
next	pointer
)	O
{	O
obj	pointer
->	O
order	pointer
[	O
k	int
+	O
j	int
]	O
=	O
e	pointer
->	O
id	int
;	O
}	O
}	O
}	O
int	O
VObjectNeedsOrdering	function
(	O
VObject	struct
*	O
obj	pointer
)	O
{	O
VPolygon	struct
*	O
*	O
p	pointer
;	O
VColor	struct
*	O
c	pointer
;	O
int	O
i	int
;	O
if	O
(	O
obj	pointer
->	O
order	pointer
||	O
obj	pointer
->	O
numPolys	int
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
c	pointer
=	O
obj	pointer
->	O
polygon	pointer
[	O
0	int
]	O
->	O
color	pointer
;	O
for	O
(	O
i	int
=	O
0	int
,	O
p	pointer
=	O
obj	pointer
->	O
polygon	pointer
;	O
i	int
<	O
obj	pointer
->	O
numPolys	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
p	pointer
[	O
i	int
]	O
->	O
backColor	pointer
)	O
{	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
VComputeObjectAspect	function
(	O
VObject	struct
*	O
obj	pointer
,	O
VPoint	struct
*	O
loc	pointer
)	O
{	O
register	O
int	O
q	int
;	O
register	O
double	O
a	pointer
,	O
b	pointer
,	O
c	pointer
,	O
m	array
;	O
m	array
=	O
mag	O
(	O
loc	pointer
->	O
x	double
,	O
loc	pointer
->	O
y	double
,	O
loc	pointer
->	O
z	double
)	O
;	O
a	pointer
=	O
VDotProd	function
(	O
loc	pointer
,	O
&	O
obj	pointer
->	O
xaxis	struct
)	O
;	O
b	pointer
=	O
VDotProd	function
(	O
loc	pointer
,	O
&	O
obj	pointer
->	O
yaxis	struct
)	O
/	O
m	array
;	O
c	pointer
=	O
VDotProd	function
(	O
loc	pointer
,	O
&	O
obj	pointer
->	O
zaxis	struct
)	O
;	O
if	O
(	O
b	pointer
>	O
0.866	int
)	O
{	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
b	pointer
<	O
-	O
0.866	int
)	O
{	O
return	O
0	int
;	O
}	O
if	O
(	O
a	pointer
<	O
0.0	int
)	O
{	O
if	O
(	O
b	pointer
<	O
0.0	int
)	O
{	O
if	O
(	O
c	pointer
<	O
0.0	int
)	O
{	O
q	int
=	O
2	int
;	O
}	O
else	O
{	O
q	int
=	O
3	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
c	pointer
<	O
0.0	int
)	O
{	O
q	int
=	O
4	int
;	O
}	O
else	O
{	O
q	int
=	O
5	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
b	pointer
<	O
0.0	int
)	O
{	O
if	O
(	O
c	pointer
<	O
0.0	int
)	O
{	O
q	int
=	O
6	int
;	O
}	O
else	O
{	O
q	int
=	O
7	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
c	pointer
<	O
0.0	int
)	O
{	O
q	int
=	O
8	int
;	O
}	O
else	O
{	O
q	int
=	O
9	int
;	O
}	O
}	O
}	O
return	O
q	int
;	O
}	O
char	O
*	O
VGetAspectName	function
(	O
int	O
aspect	int
)	O
{	O
return	O
aspect_name	array
[	O
aspect	int
]	O
;	O
}	O
