extern	O
char	O
*	O
*	O
environ	pointer
;	O
extern	O
char	O
*	O
screen	pointer
;	O
extern	O
char	O
il_read_char	function
PROTO	O
(	O
(	O
char	O
*	O
,	O
char	O
*	O
,	O
int	O
)	O
)	O
;	O
char	O
*	O
stdout_log_template	pointer
=	O
NULL	O
;	O
char	O
*	O
stderr_log_template	pointer
=	O
NULL	O
;	O
char	O
*	O
stdout_log_name	pointer
=	O
NULL	O
;	O
char	O
*	O
stderr_log_name	pointer
=	O
NULL	O
;	O
int	O
my_system	function
(	O
command	pointer
,	O
hide	int
)	O
const	O
char	O
*	O
command	pointer
;	O
int	O
hide	int
;	O
{	O
pid_t	int
pid	int
;	O
int	O
status	int
;	O
FILE	struct
*	O
stdout_log	pointer
=	O
NULL	O
;	O
FILE	struct
*	O
stderr_log	pointer
=	O
NULL	O
;	O
int	O
stdout_log_fd	int
,	O
stderr_log_fd	int
;	O
int	O
old_stdout	int
=	O
-	O
1	int
,	O
old_stderr	int
=	O
-	O
1	int
;	O
if	O
(	O
command	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
remove_log	function
(	O
)	O
;	O
if	O
(	O
hide	int
)	O
{	O
old_stdout	int
=	O
dup	function
(	O
1	int
)	O
;	O
old_stderr	int
=	O
dup	function
(	O
2	int
)	O
;	O
close	pointer
(	O
1	int
)	O
;	O
close	pointer
(	O
2	int
)	O
;	O
strcpy	function
(	O
stdout_log_name	pointer
,	O
stdout_log_template	pointer
)	O
;	O
stdout_log_fd	int
=	O
mkstemp	function
(	O
stdout_log_name	pointer
)	O
;	O
if	O
(	O
stdout_log_fd	int
!=	O
-	O
1	int
)	O
stdout_log	pointer
=	O
fdopen	function
(	O
stdout_log_fd	int
,	O
"w"	pointer
)	O
;	O
strcpy	function
(	O
stderr_log_name	pointer
,	O
stderr_log_template	pointer
)	O
;	O
stderr_log_fd	int
=	O
mkstemp	function
(	O
stderr_log_name	pointer
)	O
;	O
if	O
(	O
stderr_log_fd	int
!=	O
-	O
1	int
)	O
stderr_log	pointer
=	O
fdopen	function
(	O
stderr_log_fd	int
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
stdout_log	pointer
||	O
!	O
stderr_log	pointer
)	O
{	O
if	O
(	O
stdout_log	pointer
)	O
fclose	function
(	O
stdout_log	pointer
)	O
;	O
if	O
(	O
stderr_log	pointer
)	O
fclose	function
(	O
stderr_log	pointer
)	O
;	O
remove_log	function
(	O
)	O
;	O
dup	function
(	O
old_stdout	int
)	O
;	O
dup	function
(	O
old_stderr	int
)	O
;	O
close	pointer
(	O
old_stdout	int
)	O
;	O
close	pointer
(	O
old_stderr	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
pid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
pid	int
<	O
0	int
)	O
status	int
=	O
-	O
1	int
;	O
else	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
signal	function
(	O
SIGINT	int
,	O
SIG_DFL	O
)	O
;	O
signal	function
(	O
SIGQUIT	int
,	O
SIG_DFL	O
)	O
;	O
if	O
(	O
hide	int
)	O
{	O
if	O
(	O
strncmp	function
(	O
command	pointer
,	O
"rpm "	pointer
,	O
4	int
)	O
!=	O
0	int
)	O
close	pointer
(	O
0	int
)	O
;	O
}	O
execle	function
(	O
"/bin/sh"	pointer
,	O
"sh"	pointer
,	O
"-c"	pointer
,	O
command	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
environ	pointer
)	O
;	O
_exit	function
(	O
127	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
hide	int
)	O
{	O
if	O
(	O
stdout_log	pointer
)	O
fclose	function
(	O
stdout_log	pointer
)	O
;	O
if	O
(	O
stderr_log	pointer
)	O
fclose	function
(	O
stderr_log	pointer
)	O
;	O
dup	function
(	O
old_stdout	int
)	O
;	O
dup	function
(	O
old_stderr	int
)	O
;	O
close	pointer
(	O
old_stdout	int
)	O
;	O
close	pointer
(	O
old_stderr	int
)	O
;	O
}	O
while	O
(	O
wait	function
(	O
&	O
status	int
)	O
!=	O
pid	int
)	O
;	O
}	O
return	O
status	int
;	O
}	O
extern	O
void	O
resize	function
PROTO	O
(	O
(	O
int	O
)	O
)	O
;	O
int	O
start	function
(	O
command	pointer
,	O
hide	int
)	O
char	O
*	O
command	pointer
;	O
int	O
hide	int
;	O
{	O
int	O
child_exit_code	int
;	O
if	O
(	O
hide	int
)	O
{	O
signals	function
(	O
ON	int
)	O
;	O
child_exit_code	int
=	O
my_system	function
(	O
command	pointer
,	O
hide	int
)	O
;	O
signals	function
(	O
OFF	int
)	O
;	O
}	O
else	O
{	O
tty_set_mode	function
(	O
TTY_CANONIC	int
)	O
;	O
tty_defaults	function
(	O
)	O
;	O
tty_put_screen	function
(	O
screen	pointer
)	O
;	O
signal_handlers	function
(	O
OFF	int
)	O
;	O
child_exit_code	int
=	O
my_system	function
(	O
command	pointer
,	O
hide	int
)	O
;	O
signal_handlers	function
(	O
ON	int
)	O
;	O
xwrite	function
(	O
1	int
,	O
"\n\n"	pointer
,	O
2	int
)	O
;	O
tty_set_mode	function
(	O
TTY_NONCANONIC	int
)	O
;	O
tty_defaults	function
(	O
)	O
;	O
resize	function
(	O
0	int
)	O
;	O
}	O
return	O
child_exit_code	int
;	O
}	O
void	O
remove_log	function
(	O
)	O
{	O
if	O
(	O
stdout_log_name	pointer
)	O
unlink	function
(	O
stdout_log_name	pointer
)	O
;	O
if	O
(	O
stderr_log_name	pointer
)	O
unlink	function
(	O
stderr_log_name	pointer
)	O
;	O
}	O
void	O
display_errors	function
(	O
command	pointer
)	O
char	O
*	O
command	pointer
;	O
{	O
FILE	struct
*	O
stderr_log	pointer
=	O
fopen	function
(	O
stderr_log_name	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
stderr_log	pointer
==	O
NULL	O
)	O
{	O
size_t	long
buf_len	long
=	O
strlen	function
(	O
command	pointer
)	O
+	O
32	int
+	O
strlen	function
(	O
stderr_log_name	pointer
)	O
;	O
char	O
*	O
buf	pointer
=	O
xmalloc	function
(	O
buf_len	long
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s: cannot open log file %s"	pointer
,	O
command	pointer
,	O
stderr_log_name	pointer
)	O
;	O
il_read_char	function
(	O
buf	pointer
,	O
NULL	O
,	O
IL_MOVE	int
|	O
IL_BEEP	int
|	O
IL_SAVE	int
|	O
IL_ERROR	int
)	O
;	O
xfree	function
(	O
buf	pointer
)	O
;	O
}	O
else	O
{	O
char	O
*	O
buf	pointer
=	O
xmalloc	function
(	O
2048	int
+	O
1	int
)	O
;	O
while	O
(	O
fgets	function
(	O
buf	pointer
,	O
2048	int
+	O
1	int
,	O
stderr_log	pointer
)	O
)	O
{	O
int	O
len	int
=	O
strlen	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
buf	pointer
[	O
len	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
buf	pointer
[	O
len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
il_read_char	function
(	O
buf	pointer
,	O
NULL	O
,	O
IL_MOVE	int
|	O
IL_ERROR	int
)	O
==	O
0	int
)	O
break	O
;	O
}	O
xfree	function
(	O
buf	pointer
)	O
;	O
fclose	function
(	O
stderr_log	pointer
)	O
;	O
}	O
}	O
