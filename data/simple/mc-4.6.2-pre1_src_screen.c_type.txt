typedef	O
struct	O
format_e	struct
{	O
struct	O
format_e	struct
*	O
next	pointer
;	O
int	O
requested_field_len	int
;	O
int	O
field_len	int
;	O
int	O
just_mode	int
;	O
int	O
expand	int
;	O
const	O
char	O
*	O
(	O
*	O
string_fn	pointer
)	O
(	O
file_entry	struct
*	O
,	O
int	O
len	int
)	O
;	O
const	O
char	O
*	O
title	pointer
;	O
const	O
char	O
*	O
id	int
;	O
}	O
format_e	struct
;	O
int	O
show_mini_info	int
=	O
1	int
;	O
int	O
fast_reload	int
=	O
0	int
;	O
int	O
torben_fj_mode	int
=	O
0	int
;	O
int	O
panel_scroll_pages	int
=	O
1	int
;	O
int	O
permission_mode	int
=	O
0	int
;	O
int	O
filetype_mode	int
=	O
1	int
;	O
Hook	struct
*	O
select_file_hook	pointer
=	O
0	int
;	O
static	O
cb_ret_t	enum
panel_callback	function
(	O
Widget	struct
*	O
,	O
widget_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
;	O
static	O
int	O
panel_event	function
(	O
Gpm_Event	struct
*	O
event	pointer
,	O
void	O
*	O
)	O
;	O
static	O
void	O
paint_frame	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
;	O
static	O
const	O
char	O
*	O
panel_format	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
;	O
static	O
const	O
char	O
*	O
mini_status_format	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
;	O
static	O
void	O
set_colors	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
standend	O
(	O
)	O
;	O
attrset	function
(	O
NORMAL_COLOR	O
)	O
;	O
}	O
static	O
void	O
delete_format	function
(	O
format_e	struct
*	O
format	pointer
)	O
{	O
format_e	struct
*	O
next	pointer
;	O
while	O
(	O
format	pointer
)	O
{	O
next	pointer
=	O
format	pointer
->	O
next	pointer
;	O
g_free	function
(	O
format	pointer
)	O
;	O
format	pointer
=	O
next	pointer
;	O
}	O
}	O
static	O
void	O
add_permission_string	function
(	O
char	O
*	O
dest	pointer
,	O
int	O
width	int
,	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
attr	int
,	O
int	O
color	short
,	O
int	O
is_octal	int
)	O
{	O
int	O
i	array
,	O
r	pointer
,	O
l	pointer
;	O
l	pointer
=	O
get_user_permissions	function
(	O
&	O
fe	pointer
->	O
st	pointer
)	O
;	O
if	O
(	O
is_octal	int
)	O
{	O
l	pointer
=	O
width	int
+	O
l	pointer
-	O
3	int
;	O
r	pointer
=	O
l	pointer
+	O
1	int
;	O
}	O
else	O
{	O
l	pointer
=	O
l	pointer
*	O
3	int
+	O
1	int
;	O
r	pointer
=	O
l	pointer
+	O
3	int
;	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
width	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
i	array
>=	O
l	pointer
&&	O
i	array
<	O
r	pointer
)	O
{	O
if	O
(	O
attr	int
==	O
SELECTED	int
||	O
attr	int
==	O
MARKED_SELECTED	int
)	O
attrset	function
(	O
MARKED_SELECTED_COLOR	O
)	O
;	O
else	O
attrset	function
(	O
MARKED_COLOR	O
)	O
;	O
}	O
else	O
attrset	function
(	O
color	short
)	O
;	O
addch	O
(	O
dest	pointer
[	O
i	array
]	O
)	O
;	O
}	O
}	O
static	O
const	O
char	O
*	O
string_file_name	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
static	O
char	O
buffer	pointer
[	O
MC_MAXPATHLEN	O
+	O
1	int
]	O
;	O
size_t	long
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
sizeof	O
(	O
buffer	pointer
)	O
-	O
1	int
;	O
i	array
++	O
)	O
{	O
char	O
c	int
;	O
c	int
=	O
fe	pointer
->	O
fname	pointer
[	O
i	array
]	O
;	O
if	O
(	O
!	O
c	int
)	O
break	O
;	O
if	O
(	O
!	O
is_printable	function
(	O
c	int
)	O
)	O
c	int
=	O
'?'	O
;	O
buffer	pointer
[	O
i	array
]	O
=	O
c	int
;	O
}	O
buffer	pointer
[	O
i	array
]	O
=	O
0	int
;	O
return	O
buffer	pointer
;	O
}	O
static	O
inline	O
unsigned	O
int	O
ilog10	function
(	O
dev_t	long
n	long
)	O
{	O
unsigned	O
int	O
digits	int
=	O
0	int
;	O
do	O
{	O
digits	int
++	O
,	O
n	long
/=	O
10	int
;	O
}	O
while	O
(	O
n	long
!=	O
0	int
)	O
;	O
return	O
digits	int
;	O
}	O
static	O
void	O
format_device_number	function
(	O
char	O
*	O
buf	pointer
,	O
size_t	long
bufsize	int
,	O
dev_t	long
dev	long
)	O
{	O
dev_t	long
major_dev	long
=	O
major	O
(	O
dev	long
)	O
;	O
dev_t	long
minor_dev	long
=	O
minor	O
(	O
dev	long
)	O
;	O
unsigned	O
int	O
major_digits	int
=	O
ilog10	function
(	O
major_dev	long
)	O
;	O
unsigned	O
int	O
minor_digits	int
=	O
ilog10	function
(	O
minor_dev	long
)	O
;	O
g_assert	O
(	O
bufsize	int
>=	O
1	int
)	O
;	O
if	O
(	O
major_digits	int
+	O
1	int
+	O
minor_digits	int
+	O
1	int
<=	O
bufsize	int
)	O
{	O
g_snprintf	function
(	O
buf	pointer
,	O
bufsize	int
,	O
"%lu,%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
major_dev	long
,	O
(	O
unsigned	O
long	O
)	O
minor_dev	long
)	O
;	O
}	O
else	O
{	O
g_strlcpy	function
(	O
buf	pointer
,	O
_	O
(	O
"[dev]"	pointer
)	O
,	O
bufsize	int
)	O
;	O
}	O
}	O
static	O
const	O
char	O
*	O
string_file_size	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
static	O
char	O
buffer	pointer
[	O
BUF_TINY	int
]	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
fe	pointer
->	O
fname	pointer
,	O
".."	pointer
)	O
)	O
{	O
return	O
_	O
(	O
"UP--DIR"	pointer
)	O
;	O
}	O
if	O
(	O
S_ISBLK	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
||	O
S_ISCHR	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
format_device_number	function
(	O
buffer	pointer
,	O
len	int
+	O
1	int
,	O
fe	pointer
->	O
st	pointer
.	O
st_rdev	long
)	O
;	O
else	O
{	O
size_trunc_len	function
(	O
buffer	pointer
,	O
len	int
,	O
fe	pointer
->	O
st	pointer
.	O
st_size	long
,	O
0	int
)	O
;	O
}	O
return	O
buffer	pointer
;	O
}	O
static	O
const	O
char	O
*	O
string_file_size_brief	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
if	O
(	O
S_ISLNK	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
&&	O
!	O
fe	pointer
->	O
f	float
.	O
link_to_dir	int
)	O
{	O
return	O
_	O
(	O
"SYMLINK"	pointer
)	O
;	O
}	O
if	O
(	O
(	O
S_ISDIR	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
||	O
fe	pointer
->	O
f	float
.	O
link_to_dir	int
)	O
&&	O
strcmp	function
(	O
fe	pointer
->	O
fname	pointer
,	O
".."	pointer
)	O
)	O
{	O
return	O
_	O
(	O
"SUB-DIR"	pointer
)	O
;	O
}	O
return	O
string_file_size	function
(	O
fe	pointer
,	O
len	int
)	O
;	O
}	O
static	O
const	O
char	O
*	O
string_file_type	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
static	O
char	O
buffer	pointer
[	O
2	int
]	O
;	O
if	O
(	O
S_ISDIR	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
buffer	pointer
[	O
0	int
]	O
=	O
PATH_SEP	char
;	O
else	O
if	O
(	O
S_ISLNK	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
fe	pointer
->	O
f	float
.	O
link_to_dir	int
)	O
buffer	pointer
[	O
0	int
]	O
=	O
'~'	O
;	O
else	O
if	O
(	O
fe	pointer
->	O
f	float
.	O
stale_link	int
)	O
buffer	pointer
[	O
0	int
]	O
=	O
'!'	O
;	O
else	O
buffer	pointer
[	O
0	int
]	O
=	O
'@'	O
;	O
}	O
else	O
if	O
(	O
S_ISCHR	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
buffer	pointer
[	O
0	int
]	O
=	O
'-'	O
;	O
else	O
if	O
(	O
S_ISSOCK	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
buffer	pointer
[	O
0	int
]	O
=	O
'='	O
;	O
else	O
if	O
(	O
S_ISDOOR	int
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
buffer	pointer
[	O
0	int
]	O
=	O
'>'	O
;	O
else	O
if	O
(	O
S_ISBLK	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
buffer	pointer
[	O
0	int
]	O
=	O
'+'	O
;	O
else	O
if	O
(	O
S_ISFIFO	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
buffer	pointer
[	O
0	int
]	O
=	O
'|'	O
;	O
else	O
if	O
(	O
S_ISNAM	int
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
buffer	pointer
[	O
0	int
]	O
=	O
'#'	O
;	O
else	O
if	O
(	O
!	O
S_ISREG	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
buffer	pointer
[	O
0	int
]	O
=	O
'?'	O
;	O
else	O
if	O
(	O
is_exe	function
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
buffer	pointer
[	O
0	int
]	O
=	O
'*'	O
;	O
else	O
buffer	pointer
[	O
0	int
]	O
=	O
' '	O
;	O
buffer	pointer
[	O
1	int
]	O
=	O
'\0'	O
;	O
return	O
buffer	pointer
;	O
}	O
static	O
const	O
char	O
*	O
string_file_mtime	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
fe	pointer
->	O
fname	pointer
,	O
".."	pointer
)	O
)	O
{	O
return	O
""	pointer
;	O
}	O
return	O
file_date	function
(	O
fe	pointer
->	O
st	pointer
.	O
st_mtime	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
string_file_atime	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
fe	pointer
->	O
fname	pointer
,	O
".."	pointer
)	O
)	O
{	O
return	O
""	pointer
;	O
}	O
return	O
file_date	function
(	O
fe	pointer
->	O
st	pointer
.	O
st_atime	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
string_file_ctime	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
fe	pointer
->	O
fname	pointer
,	O
".."	pointer
)	O
)	O
{	O
return	O
""	pointer
;	O
}	O
return	O
file_date	function
(	O
fe	pointer
->	O
st	pointer
.	O
st_ctime	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
string_file_permission	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
return	O
string_perm	function
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
;	O
}	O
static	O
const	O
char	O
*	O
string_file_perm_octal	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
static	O
char	O
buffer	pointer
[	O
10	int
]	O
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"0%06lo"	pointer
,	O
(	O
unsigned	O
long	O
)	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
;	O
return	O
buffer	pointer
;	O
}	O
static	O
const	O
char	O
*	O
string_file_nlinks	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
static	O
char	O
buffer	pointer
[	O
BUF_TINY	int
]	O
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%16d"	pointer
,	O
(	O
int	O
)	O
fe	pointer
->	O
st	pointer
.	O
st_nlink	long
)	O
;	O
return	O
buffer	pointer
;	O
}	O
static	O
const	O
char	O
*	O
string_inode	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
static	O
char	O
buffer	pointer
[	O
10	int
]	O
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
fe	pointer
->	O
st	pointer
.	O
st_ino	long
)	O
;	O
return	O
buffer	pointer
;	O
}	O
static	O
const	O
char	O
*	O
string_file_nuid	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
static	O
char	O
buffer	pointer
[	O
10	int
]	O
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
fe	pointer
->	O
st	pointer
.	O
st_uid	int
)	O
;	O
return	O
buffer	pointer
;	O
}	O
static	O
const	O
char	O
*	O
string_file_ngid	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
static	O
char	O
buffer	pointer
[	O
10	int
]	O
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
fe	pointer
->	O
st	pointer
.	O
st_gid	int
)	O
;	O
return	O
buffer	pointer
;	O
}	O
static	O
const	O
char	O
*	O
string_file_owner	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
return	O
get_owner	function
(	O
fe	pointer
->	O
st	pointer
.	O
st_uid	int
)	O
;	O
}	O
static	O
const	O
char	O
*	O
string_file_group	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
return	O
get_group	function
(	O
fe	pointer
->	O
st	pointer
.	O
st_gid	int
)	O
;	O
}	O
static	O
const	O
char	O
*	O
string_marked	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
return	O
fe	pointer
->	O
f	float
.	O
marked	int
?	O
"*"	pointer
:	O
" "	pointer
;	O
}	O
static	O
const	O
char	O
*	O
string_space	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
return	O
" "	pointer
;	O
}	O
static	O
const	O
char	O
*	O
string_dot	function
(	O
file_entry	struct
*	O
fe	pointer
,	O
int	O
len	int
)	O
{	O
return	O
"."	pointer
;	O
}	O
static	O
struct	O
{	O
const	O
char	O
*	O
id	int
;	O
int	O
min_size	int
;	O
int	O
expands	int
;	O
int	O
default_just	int
;	O
const	O
char	O
*	O
title	pointer
;	O
int	O
use_in_gui	int
;	O
const	O
char	O
*	O
(	O
*	O
string_fn	pointer
)	O
(	O
file_entry	struct
*	O
,	O
int	O
)	O
;	O
sortfn	function
*	O
sort_routine	pointer
;	O
}	O
formats	array
[	O
]	O
=	O
{	O
{	O
"name"	pointer
,	O
12	int
,	O
1	int
,	O
J_LEFT_FIT	int
,	O
N_	O
(	O
"Name"	pointer
)	O
,	O
1	int
,	O
string_file_name	function
,	O
(	O
sortfn	function
*	O
)	O
sort_name	function
}	O
,	O
{	O
"size"	pointer
,	O
7	int
,	O
0	int
,	O
J_RIGHT	int
,	O
N_	O
(	O
"Size"	pointer
)	O
,	O
1	int
,	O
string_file_size	function
,	O
(	O
sortfn	function
*	O
)	O
sort_size	function
}	O
,	O
{	O
"bsize"	pointer
,	O
7	int
,	O
0	int
,	O
J_RIGHT	int
,	O
N_	O
(	O
"Size"	pointer
)	O
,	O
1	int
,	O
string_file_size_brief	function
,	O
(	O
sortfn	function
*	O
)	O
sort_size	function
}	O
,	O
{	O
"type"	pointer
,	O
GT	int
,	O
0	int
,	O
J_LEFT	int
,	O
""	pointer
,	O
2	int
,	O
string_file_type	function
,	O
NULL	O
}	O
,	O
{	O
"mtime"	pointer
,	O
12	int
,	O
0	int
,	O
J_RIGHT	int
,	O
N_	O
(	O
"MTime"	pointer
)	O
,	O
1	int
,	O
string_file_mtime	function
,	O
(	O
sortfn	function
*	O
)	O
sort_time	function
}	O
,	O
{	O
"atime"	pointer
,	O
12	int
,	O
0	int
,	O
J_RIGHT	int
,	O
N_	O
(	O
"ATime"	pointer
)	O
,	O
1	int
,	O
string_file_atime	function
,	O
(	O
sortfn	function
*	O
)	O
sort_atime	function
}	O
,	O
{	O
"ctime"	pointer
,	O
12	int
,	O
0	int
,	O
J_RIGHT	int
,	O
N_	O
(	O
"CTime"	pointer
)	O
,	O
1	int
,	O
string_file_ctime	function
,	O
(	O
sortfn	function
*	O
)	O
sort_ctime	function
}	O
,	O
{	O
"perm"	pointer
,	O
10	int
,	O
0	int
,	O
J_LEFT	int
,	O
N_	O
(	O
"Permission"	pointer
)	O
,	O
1	int
,	O
string_file_permission	function
,	O
NULL	O
}	O
,	O
{	O
"mode"	pointer
,	O
6	int
,	O
0	int
,	O
J_RIGHT	int
,	O
N_	O
(	O
"Perm"	pointer
)	O
,	O
1	int
,	O
string_file_perm_octal	function
,	O
NULL	O
}	O
,	O
{	O
"nlink"	pointer
,	O
2	int
,	O
0	int
,	O
J_RIGHT	int
,	O
N_	O
(	O
"Nl"	pointer
)	O
,	O
1	int
,	O
string_file_nlinks	function
,	O
NULL	O
}	O
,	O
{	O
"inode"	pointer
,	O
5	int
,	O
0	int
,	O
J_RIGHT	int
,	O
N_	O
(	O
"Inode"	pointer
)	O
,	O
1	int
,	O
string_inode	function
,	O
(	O
sortfn	function
*	O
)	O
sort_inode	function
}	O
,	O
{	O
"nuid"	pointer
,	O
5	int
,	O
0	int
,	O
J_RIGHT	int
,	O
N_	O
(	O
"UID"	pointer
)	O
,	O
1	int
,	O
string_file_nuid	function
,	O
NULL	O
}	O
,	O
{	O
"ngid"	pointer
,	O
5	int
,	O
0	int
,	O
J_RIGHT	int
,	O
N_	O
(	O
"GID"	pointer
)	O
,	O
1	int
,	O
string_file_ngid	function
,	O
NULL	O
}	O
,	O
{	O
"owner"	pointer
,	O
8	int
,	O
0	int
,	O
J_LEFT_FIT	int
,	O
N_	O
(	O
"Owner"	pointer
)	O
,	O
1	int
,	O
string_file_owner	function
,	O
NULL	O
}	O
,	O
{	O
"group"	pointer
,	O
8	int
,	O
0	int
,	O
J_LEFT_FIT	int
,	O
N_	O
(	O
"Group"	pointer
)	O
,	O
1	int
,	O
string_file_group	function
,	O
NULL	O
}	O
,	O
{	O
"mark"	pointer
,	O
1	int
,	O
0	int
,	O
J_RIGHT	int
,	O
" "	pointer
,	O
1	int
,	O
string_marked	function
,	O
NULL	O
}	O
,	O
{	O
"|"	pointer
,	O
1	int
,	O
0	int
,	O
J_RIGHT	int
,	O
" "	pointer
,	O
0	int
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"space"	pointer
,	O
1	int
,	O
0	int
,	O
J_RIGHT	int
,	O
" "	pointer
,	O
0	int
,	O
string_space	function
,	O
NULL	O
}	O
,	O
{	O
"dot"	pointer
,	O
1	int
,	O
0	int
,	O
J_RIGHT	int
,	O
" "	pointer
,	O
0	int
,	O
string_dot	function
,	O
NULL	O
}	O
,	O
}	O
;	O
static	O
char	O
*	O
to_buffer	function
(	O
char	O
*	O
dest	pointer
,	O
int	O
just_mode	int
,	O
int	O
len	int
,	O
const	O
char	O
*	O
txt	pointer
)	O
{	O
int	O
txtlen	int
=	O
strlen	function
(	O
txt	pointer
)	O
;	O
int	O
still	int
,	O
over	int
;	O
memset	function
(	O
dest	pointer
,	O
' '	O
,	O
len	int
)	O
;	O
still	int
=	O
(	O
over	int
=	O
(	O
txtlen	int
>	O
len	int
)	O
)	O
?	O
(	O
txtlen	int
-	O
len	int
)	O
:	O
(	O
len	int
-	O
txtlen	int
)	O
;	O
switch	O
(	O
HIDE_FIT	O
(	O
just_mode	int
)	O
)	O
{	O
case	O
J_LEFT	int
:	O
still	int
=	O
0	int
;	O
break	O
;	O
case	O
J_CENTER	int
:	O
still	int
/=	O
2	int
;	O
break	O
;	O
case	O
J_RIGHT	int
:	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
over	int
)	O
{	O
if	O
(	O
IS_FIT	O
(	O
just_mode	int
)	O
)	O
strcpy	function
(	O
dest	pointer
,	O
name_trunc	function
(	O
txt	pointer
,	O
len	int
)	O
)	O
;	O
else	O
strncpy	function
(	O
dest	pointer
,	O
txt	pointer
+	O
still	int
,	O
len	int
)	O
;	O
}	O
else	O
strncpy	function
(	O
dest	pointer
+	O
still	int
,	O
txt	pointer
,	O
txtlen	int
)	O
;	O
dest	pointer
[	O
len	int
]	O
=	O
'\0'	O
;	O
return	O
(	O
dest	pointer
+	O
len	int
)	O
;	O
}	O
static	O
int	O
file_compute_color	function
(	O
int	O
attr	int
,	O
file_entry	struct
*	O
fe	pointer
)	O
{	O
switch	O
(	O
attr	int
)	O
{	O
case	O
SELECTED	int
:	O
return	O
(	O
SELECTED_COLOR	O
)	O
;	O
case	O
MARKED	int
:	O
return	O
(	O
MARKED_COLOR	O
)	O
;	O
case	O
MARKED_SELECTED	int
:	O
return	O
(	O
MARKED_SELECTED_COLOR	O
)	O
;	O
case	O
STATUS	int
:	O
return	O
(	O
NORMAL_COLOR	O
)	O
;	O
case	O
NORMAL	int
:	O
default	O
:	O
if	O
(	O
!	O
filetype_mode	int
)	O
return	O
(	O
NORMAL_COLOR	O
)	O
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
return	O
(	O
DIRECTORY_COLOR	O
)	O
;	O
else	O
if	O
(	O
S_ISLNK	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
fe	pointer
->	O
f	float
.	O
link_to_dir	int
)	O
return	O
(	O
DIRECTORY_COLOR	O
)	O
;	O
else	O
if	O
(	O
fe	pointer
->	O
f	float
.	O
stale_link	int
)	O
return	O
(	O
STALE_LINK_COLOR	O
)	O
;	O
else	O
return	O
(	O
LINK_COLOR	O
)	O
;	O
}	O
else	O
if	O
(	O
S_ISSOCK	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
return	O
(	O
SPECIAL_COLOR	O
)	O
;	O
else	O
if	O
(	O
S_ISCHR	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
return	O
(	O
DEVICE_COLOR	O
)	O
;	O
else	O
if	O
(	O
S_ISBLK	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
return	O
(	O
DEVICE_COLOR	O
)	O
;	O
else	O
if	O
(	O
S_ISNAM	int
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
return	O
(	O
DEVICE_COLOR	O
)	O
;	O
else	O
if	O
(	O
S_ISFIFO	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
return	O
(	O
SPECIAL_COLOR	O
)	O
;	O
else	O
if	O
(	O
S_ISDOOR	int
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
return	O
(	O
SPECIAL_COLOR	O
)	O
;	O
else	O
if	O
(	O
!	O
S_ISREG	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
return	O
(	O
STALE_LINK_COLOR	O
)	O
;	O
else	O
if	O
(	O
is_exe	function
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
)	O
return	O
(	O
EXECUTABLE_COLOR	O
)	O
;	O
else	O
if	O
(	O
fe	pointer
->	O
fname	pointer
&&	O
(	O
!	O
strcmp	function
(	O
fe	pointer
->	O
fname	pointer
,	O
"core"	pointer
)	O
||	O
!	O
strcmp	function
(	O
extension	function
(	O
fe	pointer
->	O
fname	pointer
)	O
,	O
"core"	pointer
)	O
)	O
)	O
return	O
(	O
CORE_COLOR	O
)	O
;	O
return	O
(	O
NORMAL_COLOR	O
)	O
;	O
}	O
static	O
void	O
format_file	function
(	O
char	O
*	O
dest	pointer
,	O
int	O
limit	pointer
,	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
file_index	int
,	O
int	O
width	int
,	O
int	O
attr	int
,	O
int	O
isstatus	int
)	O
{	O
int	O
color	short
,	O
length	int
,	O
empty_line	int
;	O
const	O
char	O
*	O
txt	pointer
;	O
char	O
*	O
old_pos	pointer
;	O
char	O
*	O
cdest	pointer
=	O
dest	pointer
;	O
format_e	struct
*	O
format	pointer
,	O
*	O
home	pointer
;	O
file_entry	struct
*	O
fe	pointer
;	O
length	int
=	O
0	int
;	O
empty_line	int
=	O
(	O
file_index	int
>=	O
panel	pointer
->	O
count	int
)	O
;	O
home	pointer
=	O
(	O
isstatus	int
)	O
?	O
panel	pointer
->	O
status_format	pointer
:	O
panel	pointer
->	O
format	pointer
;	O
fe	pointer
=	O
&	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
file_index	int
]	O
;	O
if	O
(	O
!	O
empty_line	int
)	O
color	short
=	O
file_compute_color	function
(	O
attr	int
,	O
fe	pointer
)	O
;	O
else	O
color	short
=	O
NORMAL_COLOR	O
;	O
for	O
(	O
format	pointer
=	O
home	pointer
;	O
format	pointer
;	O
format	pointer
=	O
format	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
length	int
==	O
width	int
)	O
break	O
;	O
if	O
(	O
format	pointer
->	O
string_fn	pointer
)	O
{	O
int	O
len	int
;	O
if	O
(	O
empty_line	int
)	O
txt	pointer
=	O
" "	pointer
;	O
else	O
txt	pointer
=	O
(	O
*	O
format	pointer
->	O
string_fn	pointer
)	O
(	O
fe	pointer
,	O
format	pointer
->	O
field_len	int
)	O
;	O
old_pos	pointer
=	O
cdest	pointer
;	O
len	int
=	O
format	pointer
->	O
field_len	int
;	O
if	O
(	O
len	int
+	O
length	int
>	O
width	int
)	O
len	int
=	O
width	int
-	O
length	int
;	O
if	O
(	O
len	int
+	O
(	O
cdest	pointer
-	O
dest	pointer
)	O
>	O
limit	pointer
)	O
len	int
=	O
limit	pointer
-	O
(	O
cdest	pointer
-	O
dest	pointer
)	O
;	O
if	O
(	O
len	int
<=	O
0	int
)	O
break	O
;	O
cdest	pointer
=	O
to_buffer	function
(	O
cdest	pointer
,	O
format	pointer
->	O
just_mode	int
,	O
len	int
,	O
txt	pointer
)	O
;	O
length	int
+=	O
len	int
;	O
attrset	function
(	O
color	short
)	O
;	O
if	O
(	O
permission_mode	int
&&	O
!	O
strcmp	function
(	O
format	pointer
->	O
id	int
,	O
"perm"	pointer
)	O
)	O
add_permission_string	function
(	O
old_pos	pointer
,	O
format	pointer
->	O
field_len	int
,	O
fe	pointer
,	O
attr	int
,	O
color	short
,	O
0	int
)	O
;	O
else	O
if	O
(	O
permission_mode	int
&&	O
!	O
strcmp	function
(	O
format	pointer
->	O
id	int
,	O
"mode"	pointer
)	O
)	O
add_permission_string	function
(	O
old_pos	pointer
,	O
format	pointer
->	O
field_len	int
,	O
fe	pointer
,	O
attr	int
,	O
color	short
,	O
1	int
)	O
;	O
else	O
addstr	O
(	O
old_pos	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
attr	int
==	O
SELECTED	int
||	O
attr	int
==	O
MARKED_SELECTED	int
)	O
attrset	function
(	O
SELECTED_COLOR	O
)	O
;	O
else	O
attrset	function
(	O
NORMAL_COLOR	O
)	O
;	O
one_vline	O
(	O
)	O
;	O
length	int
++	O
;	O
}	O
}	O
if	O
(	O
length	int
<	O
width	int
)	O
{	O
int	O
still	int
=	O
width	int
-	O
length	int
;	O
while	O
(	O
still	int
--	O
)	O
addch	O
(	O
' '	O
)	O
;	O
}	O
}	O
static	O
void	O
repaint_file	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
file_index	int
,	O
int	O
mv	int
,	O
int	O
attr	int
,	O
int	O
isstatus	int
)	O
{	O
int	O
second_column	int
=	O
0	int
;	O
int	O
width	int
,	O
offset	long
;	O
char	O
buffer	pointer
[	O
BUF_MEDIUM	int
]	O
;	O
offset	long
=	O
0	int
;	O
if	O
(	O
!	O
isstatus	int
&&	O
panel	pointer
->	O
split	int
)	O
{	O
second_column	int
=	O
(	O
file_index	int
-	O
panel	pointer
->	O
top_file	int
)	O
/	O
llines	O
(	O
panel	pointer
)	O
;	O
width	int
=	O
(	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
)	O
/	O
2	int
-	O
1	int
;	O
if	O
(	O
second_column	int
)	O
{	O
offset	long
=	O
1	int
+	O
width	int
;	O
width	int
=	O
(	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
)	O
-	O
(	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
)	O
/	O
2	int
-	O
1	int
;	O
}	O
}	O
else	O
width	int
=	O
(	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
)	O
;	O
if	O
(	O
width	int
<=	O
0	int
)	O
return	O
;	O
if	O
(	O
mv	int
)	O
{	O
if	O
(	O
!	O
isstatus	int
&&	O
panel	pointer
->	O
split	int
)	O
{	O
widget_move	O
(	O
&	O
panel	pointer
->	O
widget	pointer
,	O
(	O
file_index	int
-	O
panel	pointer
->	O
top_file	int
)	O
%	O
llines	O
(	O
panel	pointer
)	O
+	O
2	int
,	O
(	O
offset	long
+	O
1	int
)	O
)	O
;	O
}	O
else	O
widget_move	O
(	O
&	O
panel	pointer
->	O
widget	pointer
,	O
file_index	int
-	O
panel	pointer
->	O
top_file	int
+	O
2	int
,	O
1	int
)	O
;	O
}	O
format_file	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
panel	pointer
,	O
file_index	int
,	O
width	int
,	O
attr	int
,	O
isstatus	int
)	O
;	O
if	O
(	O
!	O
isstatus	int
&&	O
panel	pointer
->	O
split	int
)	O
{	O
if	O
(	O
second_column	int
)	O
addch	O
(	O
' '	O
)	O
;	O
else	O
{	O
attrset	function
(	O
NORMAL_COLOR	O
)	O
;	O
one_vline	O
(	O
)	O
;	O
}	O
}	O
}	O
static	O
void	O
display_mini_info	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
if	O
(	O
!	O
show_mini_info	int
)	O
return	O
;	O
widget_move	O
(	O
&	O
panel	pointer
->	O
widget	pointer
,	O
llines	O
(	O
panel	pointer
)	O
+	O
3	int
,	O
1	int
)	O
;	O
if	O
(	O
panel	pointer
->	O
searching	int
)	O
{	O
attrset	function
(	O
INPUT_COLOR	O
)	O
;	O
tty_printf	function
(	O
"/%-*s"	pointer
,	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
3	int
,	O
panel	pointer
->	O
search_buffer	array
)	O
;	O
attrset	function
(	O
NORMAL_COLOR	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
panel	pointer
->	O
marked	int
)	O
{	O
char	O
buffer	pointer
[	O
BUF_SMALL	int
]	O
,	O
b_bytes	array
[	O
BUF_SMALL	int
]	O
;	O
const	O
char	O
*	O
p	pointer
=	O
"  %-*s"	pointer
;	O
int	O
cols	int
=	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
;	O
attrset	function
(	O
MARKED_COLOR	O
)	O
;	O
tty_printf	function
(	O
"%*s"	pointer
,	O
cols	int
,	O
" "	pointer
)	O
;	O
widget_move	O
(	O
&	O
panel	pointer
->	O
widget	pointer
,	O
llines	O
(	O
panel	pointer
)	O
+	O
3	int
,	O
1	int
)	O
;	O
g_snprintf	function
(	O
b_bytes	array
,	O
sizeof	O
(	O
b_bytes	array
)	O
,	O
ngettext	function
(	O
"%s byte"	pointer
,	O
"%s bytes"	pointer
,	O
(	O
unsigned	O
long	O
)	O
panel	pointer
->	O
total	double
)	O
,	O
size_trunc_sep	function
(	O
panel	pointer
->	O
total	double
)	O
)	O
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
ngettext	function
(	O
"%s in %d file"	pointer
,	O
"%s in %d files"	pointer
,	O
panel	pointer
->	O
marked	int
)	O
,	O
b_bytes	array
,	O
panel	pointer
->	O
marked	int
)	O
;	O
if	O
(	O
(	O
int	O
)	O
strlen	function
(	O
buffer	pointer
)	O
>	O
cols	int
-	O
2	int
)	O
{	O
buffer	pointer
[	O
cols	int
]	O
=	O
0	int
;	O
p	pointer
+=	O
2	int
;	O
}	O
else	O
cols	int
-=	O
2	int
;	O
tty_printf	function
(	O
p	pointer
,	O
cols	int
,	O
buffer	pointer
)	O
;	O
return	O
;	O
}	O
set_colors	function
(	O
panel	pointer
)	O
;	O
if	O
(	O
S_ISLNK	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
panel	pointer
->	O
selected	int
]	O
.	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
char	O
*	O
link	function
,	O
link_target	array
[	O
MC_MAXPATHLEN	O
]	O
;	O
int	O
len	int
;	O
link	function
=	O
concat_dir_and_file	function
(	O
panel	pointer
->	O
cwd	short
,	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
panel	pointer
->	O
selected	int
]	O
.	O
fname	pointer
)	O
;	O
len	int
=	O
mc_readlink	function
(	O
link	function
,	O
link_target	array
,	O
MC_MAXPATHLEN	O
-	O
1	int
)	O
;	O
g_free	function
(	O
link	function
)	O
;	O
if	O
(	O
len	int
>	O
0	int
)	O
{	O
link_target	array
[	O
len	int
]	O
=	O
0	int
;	O
tty_printf	function
(	O
"-> %-*s"	pointer
,	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
5	int
,	O
name_trunc	function
(	O
link_target	array
,	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
5	int
)	O
)	O
;	O
}	O
else	O
tty_printf	function
(	O
"%-*s"	pointer
,	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
,	O
_	O
(	O
"<readlink failed>"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
repaint_file	function
(	O
panel	pointer
,	O
panel	pointer
->	O
selected	int
,	O
0	int
,	O
STATUS	int
,	O
1	int
)	O
;	O
return	O
;	O
}	O
static	O
void	O
paint_dir	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
int	O
i	array
;	O
int	O
color	short
;	O
int	O
items	pointer
;	O
items	pointer
=	O
llines	O
(	O
panel	pointer
)	O
*	O
(	O
panel	pointer
->	O
split	int
?	O
2	int
:	O
1	int
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
items	pointer
;	O
i	array
++	O
)	O
{	O
if	O
(	O
i	array
+	O
panel	pointer
->	O
top_file	int
>=	O
panel	pointer
->	O
count	int
)	O
color	short
=	O
0	int
;	O
else	O
{	O
color	short
=	O
2	int
*	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
i	array
+	O
panel	pointer
->	O
top_file	int
]	O
.	O
f	float
.	O
marked	int
)	O
;	O
color	short
+=	O
(	O
panel	pointer
->	O
selected	int
==	O
i	array
+	O
panel	pointer
->	O
top_file	int
&&	O
panel	pointer
->	O
active	int
)	O
;	O
}	O
repaint_file	function
(	O
panel	pointer
,	O
i	array
+	O
panel	pointer
->	O
top_file	int
,	O
1	int
,	O
color	short
,	O
0	int
)	O
;	O
}	O
standend	O
(	O
)	O
;	O
}	O
static	O
void	O
mini_info_separator	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
if	O
(	O
!	O
show_mini_info	int
)	O
return	O
;	O
standend	O
(	O
)	O
;	O
widget_move	O
(	O
&	O
panel	pointer
->	O
widget	pointer
,	O
llines	O
(	O
panel	pointer
)	O
+	O
2	int
,	O
1	int
)	O
;	O
attrset	function
(	O
NORMAL_COLOR	O
)	O
;	O
hline	function
(	O
ACS_HLINE	O
,	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
)	O
;	O
}	O
static	O
void	O
show_dir	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
char	O
*	O
tmp	pointer
;	O
set_colors	function
(	O
panel	pointer
)	O
;	O
draw_double_box	function
(	O
panel	pointer
->	O
widget	pointer
.	O
parent	pointer
,	O
panel	pointer
->	O
widget	pointer
.	O
y	short
,	O
panel	pointer
->	O
widget	pointer
.	O
x	array
,	O
panel	pointer
->	O
widget	pointer
.	O
lines	pointer
,	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
)	O
;	O
if	O
(	O
show_mini_info	int
)	O
{	O
SLsmg_draw_object	function
(	O
panel	pointer
->	O
widget	pointer
.	O
y	short
+	O
llines	O
(	O
panel	pointer
)	O
+	O
2	int
,	O
panel	pointer
->	O
widget	pointer
.	O
x	array
,	O
SLSMG_LTEE_CHAR	O
)	O
;	O
SLsmg_draw_object	function
(	O
panel	pointer
->	O
widget	pointer
.	O
y	short
+	O
llines	O
(	O
panel	pointer
)	O
+	O
2	int
,	O
panel	pointer
->	O
widget	pointer
.	O
x	array
+	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
1	int
,	O
SLSMG_RTEE_CHAR	O
)	O
;	O
}	O
if	O
(	O
panel	pointer
->	O
active	int
)	O
attrset	function
(	O
REVERSE_COLOR	O
)	O
;	O
widget_move	O
(	O
&	O
panel	pointer
->	O
widget	pointer
,	O
0	int
,	O
3	int
)	O
;	O
addch	O
(	O
' '	O
)	O
;	O
tmp	pointer
=	O
g_malloc	function
(	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
+	O
1	int
)	O
;	O
tmp	pointer
[	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
]	O
=	O
'\0'	O
;	O
trim	function
(	O
strip_home_and_password	function
(	O
panel	pointer
->	O
cwd	short
)	O
,	O
tmp	pointer
,	O
max	long
(	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
9	int
,	O
0	int
)	O
)	O
;	O
addstr	O
(	O
tmp	pointer
)	O
;	O
g_free	function
(	O
tmp	pointer
)	O
;	O
addch	O
(	O
' '	O
)	O
;	O
widget_move	O
(	O
&	O
panel	pointer
->	O
widget	pointer
,	O
0	int
,	O
1	int
)	O
;	O
addstr	O
(	O
"<"	pointer
)	O
;	O
widget_move	O
(	O
&	O
panel	pointer
->	O
widget	pointer
,	O
0	int
,	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
)	O
;	O
addstr	O
(	O
">"	pointer
)	O
;	O
widget_move	O
(	O
&	O
panel	pointer
->	O
widget	pointer
,	O
0	int
,	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
3	int
)	O
;	O
addstr	O
(	O
"v"	pointer
)	O
;	O
if	O
(	O
panel	pointer
->	O
active	int
)	O
standend	O
(	O
)	O
;	O
}	O
static	O
void	O
adjust_top_file	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
int	O
old_top	int
=	O
panel	pointer
->	O
top_file	int
;	O
if	O
(	O
panel	pointer
->	O
selected	int
-	O
old_top	int
>	O
llines	O
(	O
panel	pointer
)	O
)	O
panel	pointer
->	O
top_file	int
=	O
panel	pointer
->	O
selected	int
;	O
if	O
(	O
old_top	int
-	O
panel	pointer
->	O
count	int
>	O
llines	O
(	O
panel	pointer
)	O
)	O
panel	pointer
->	O
top_file	int
=	O
panel	pointer
->	O
count	int
-	O
llines	O
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
panel_update_contents	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
show_dir	function
(	O
panel	pointer
)	O
;	O
paint_dir	function
(	O
panel	pointer
)	O
;	O
display_mini_info	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
dirty	int
=	O
0	int
;	O
}	O
static	O
void	O
paint_panel	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
paint_frame	function
(	O
panel	pointer
)	O
;	O
panel_update_contents	function
(	O
panel	pointer
)	O
;	O
mini_info_separator	function
(	O
panel	pointer
)	O
;	O
}	O
void	O
update_dirty_panels	function
(	O
void	O
)	O
{	O
if	O
(	O
current_panel	pointer
->	O
dirty	int
)	O
panel_update_contents	function
(	O
current_panel	pointer
)	O
;	O
if	O
(	O
(	O
get_other_type	function
(	O
)	O
==	O
view_listing	int
)	O
&&	O
other_panel	O
->	O
dirty	int
)	O
panel_update_contents	function
(	O
other_panel	O
)	O
;	O
}	O
static	O
void	O
do_select	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
i	array
)	O
{	O
if	O
(	O
i	array
!=	O
panel	pointer
->	O
selected	int
)	O
{	O
panel	pointer
->	O
dirty	int
=	O
1	int
;	O
panel	pointer
->	O
selected	int
=	O
i	array
;	O
panel	pointer
->	O
top_file	int
=	O
panel	pointer
->	O
selected	int
-	O
(	O
panel	pointer
->	O
widget	pointer
.	O
lines	pointer
-	O
2	int
)	O
/	O
2	int
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
<	O
0	int
)	O
panel	pointer
->	O
top_file	int
=	O
0	int
;	O
}	O
}	O
static	O
inline	O
void	O
do_try_to_select	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
i	array
;	O
char	O
*	O
subdir	pointer
;	O
if	O
(	O
!	O
name	pointer
)	O
{	O
do_select	function
(	O
panel	pointer
,	O
0	int
)	O
;	O
return	O
;	O
}	O
subdir	pointer
=	O
vfs_strip_suffix_from_filename	function
(	O
x_basename	function
(	O
name	pointer
)	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
panel	pointer
->	O
count	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
subdir	pointer
,	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
i	array
]	O
.	O
fname	pointer
)	O
==	O
0	int
)	O
{	O
do_select	function
(	O
panel	pointer
,	O
i	array
)	O
;	O
g_free	function
(	O
subdir	pointer
)	O
;	O
return	O
;	O
}	O
}	O
if	O
(	O
panel	pointer
->	O
selected	int
>=	O
panel	pointer
->	O
count	int
)	O
do_select	function
(	O
panel	pointer
,	O
panel	pointer
->	O
count	int
-	O
1	int
)	O
;	O
g_free	function
(	O
subdir	pointer
)	O
;	O
}	O
void	O
try_to_select	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
do_try_to_select	function
(	O
panel	pointer
,	O
name	pointer
)	O
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
}	O
void	O
panel_update_cols	function
(	O
Widget	struct
*	O
widget	pointer
,	O
int	O
frame_size	int
)	O
{	O
int	O
cols	int
,	O
origin	int
;	O
if	O
(	O
horizontal_split	int
)	O
{	O
widget	pointer
->	O
cols	int
=	O
COLS	O
;	O
return	O
;	O
}	O
if	O
(	O
frame_size	int
==	O
frame_full	int
)	O
{	O
cols	int
=	O
COLS	O
;	O
origin	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
widget	pointer
==	O
get_panel_widget	function
(	O
0	int
)	O
)	O
{	O
cols	int
=	O
first_panel_size	int
;	O
origin	int
=	O
0	int
;	O
}	O
else	O
{	O
cols	int
=	O
COLS	O
-	O
first_panel_size	int
;	O
origin	int
=	O
first_panel_size	int
;	O
}	O
}	O
widget	pointer
->	O
cols	int
=	O
cols	int
;	O
widget	pointer
->	O
x	array
=	O
origin	int
;	O
}	O
static	O
char	O
*	O
panel_save_name	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
extern	O
int	O
saving_setup	int
;	O
if	O
(	O
(	O
midnight_shutdown	int
&&	O
auto_save_setup	int
)	O
||	O
saving_setup	int
)	O
return	O
g_strdup	function
(	O
panel	pointer
->	O
panel_name	pointer
)	O
;	O
else	O
return	O
g_strconcat	function
(	O
"Temporal:"	pointer
,	O
panel	pointer
->	O
panel_name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
static	O
void	O
panel_destroy	function
(	O
WPanel	struct
*	O
p	pointer
)	O
{	O
int	O
i	array
;	O
char	O
*	O
name	pointer
=	O
panel_save_name	function
(	O
p	pointer
)	O
;	O
panel_save_setup	function
(	O
p	pointer
,	O
name	pointer
)	O
;	O
panel_clean_dir	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
dir_history	pointer
)	O
{	O
history_put	function
(	O
p	pointer
->	O
hist_name	pointer
,	O
p	pointer
->	O
dir_history	pointer
)	O
;	O
p	pointer
->	O
dir_history	pointer
=	O
g_list_first	function
(	O
p	pointer
->	O
dir_history	pointer
)	O
;	O
g_list_foreach	function
(	O
p	pointer
->	O
dir_history	pointer
,	O
(	O
GFunc	pointer
)	O
g_free	function
,	O
NULL	O
)	O
;	O
g_list_free	function
(	O
p	pointer
->	O
dir_history	pointer
)	O
;	O
}	O
g_free	function
(	O
p	pointer
->	O
hist_name	pointer
)	O
;	O
delete_format	function
(	O
p	pointer
->	O
format	pointer
)	O
;	O
delete_format	function
(	O
p	pointer
->	O
status_format	pointer
)	O
;	O
g_free	function
(	O
p	pointer
->	O
user_format	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
LIST_TYPES	int
;	O
i	array
++	O
)	O
g_free	function
(	O
p	pointer
->	O
user_status_format	array
[	O
i	array
]	O
)	O
;	O
g_free	function
(	O
p	pointer
->	O
dir	pointer
.	O
list	pointer
)	O
;	O
g_free	function
(	O
p	pointer
->	O
panel_name	pointer
)	O
;	O
g_free	function
(	O
name	pointer
)	O
;	O
}	O
static	O
void	O
panel_format_modified	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
panel	pointer
->	O
format_modified	int
=	O
1	int
;	O
}	O
WPanel	struct
*	O
panel_new	function
(	O
const	O
char	O
*	O
panel_name	pointer
)	O
{	O
WPanel	struct
*	O
panel	pointer
;	O
char	O
*	O
section	pointer
;	O
int	O
i	array
,	O
err	long
;	O
panel	pointer
=	O
g_new0	O
(	O
WPanel	struct
,	O
1	int
)	O
;	O
init_widget	function
(	O
&	O
panel	pointer
->	O
widget	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
panel_callback	function
,	O
panel_event	function
)	O
;	O
widget_want_cursor	O
(	O
panel	pointer
->	O
widget	pointer
,	O
0	int
)	O
;	O
mc_get_current_wd	function
(	O
panel	pointer
->	O
cwd	short
,	O
sizeof	O
(	O
panel	pointer
->	O
cwd	short
)	O
-	O
2	int
)	O
;	O
strcpy	function
(	O
panel	pointer
->	O
lwd	array
,	O
"."	pointer
)	O
;	O
panel	pointer
->	O
hist_name	pointer
=	O
g_strconcat	function
(	O
"Dir Hist "	pointer
,	O
panel_name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
panel	pointer
->	O
dir_history	pointer
=	O
history_get	function
(	O
panel	pointer
->	O
hist_name	pointer
)	O
;	O
directory_history_add	function
(	O
panel	pointer
,	O
panel	pointer
->	O
cwd	short
)	O
;	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
=	O
g_new	O
(	O
file_entry	struct
,	O
MIN_FILES	int
)	O
;	O
panel	pointer
->	O
dir	pointer
.	O
size	long
=	O
MIN_FILES	int
;	O
panel	pointer
->	O
active	int
=	O
0	int
;	O
panel	pointer
->	O
filter	pointer
=	O
0	int
;	O
panel	pointer
->	O
split	int
=	O
0	int
;	O
panel	pointer
->	O
top_file	int
=	O
0	int
;	O
panel	pointer
->	O
selected	int
=	O
0	int
;	O
panel	pointer
->	O
marked	int
=	O
0	int
;	O
panel	pointer
->	O
total	double
=	O
0	int
;	O
panel	pointer
->	O
reverse	int
=	O
0	int
;	O
panel	pointer
->	O
dirty	int
=	O
1	int
;	O
panel	pointer
->	O
searching	int
=	O
0	int
;	O
panel	pointer
->	O
dirs_marked	int
=	O
0	int
;	O
panel	pointer
->	O
is_panelized	int
=	O
0	int
;	O
panel	pointer
->	O
format	pointer
=	O
0	int
;	O
panel	pointer
->	O
status_format	pointer
=	O
0	int
;	O
panel	pointer
->	O
format_modified	int
=	O
1	int
;	O
panel	pointer
->	O
panel_name	pointer
=	O
g_strdup	function
(	O
panel_name	pointer
)	O
;	O
panel	pointer
->	O
user_format	pointer
=	O
g_strdup	function
(	O
DEFAULT_USER_FORMAT	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
LIST_TYPES	int
;	O
i	array
++	O
)	O
panel	pointer
->	O
user_status_format	array
[	O
i	array
]	O
=	O
g_strdup	function
(	O
DEFAULT_USER_FORMAT	pointer
)	O
;	O
panel	pointer
->	O
search_buffer	array
[	O
0	int
]	O
=	O
0	int
;	O
panel	pointer
->	O
frame_size	int
=	O
frame_half	int
;	O
section	pointer
=	O
g_strconcat	function
(	O
"Temporal:"	pointer
,	O
panel	pointer
->	O
panel_name	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
!	O
profile_has_section	function
(	O
section	pointer
,	O
profile_name	pointer
)	O
)	O
{	O
g_free	function
(	O
section	pointer
)	O
;	O
section	pointer
=	O
g_strdup	function
(	O
panel	pointer
->	O
panel_name	pointer
)	O
;	O
}	O
panel_load_setup	function
(	O
panel	pointer
,	O
section	pointer
)	O
;	O
g_free	function
(	O
section	pointer
)	O
;	O
err	long
=	O
set_panel_formats	function
(	O
panel	pointer
)	O
;	O
if	O
(	O
err	long
)	O
{	O
set_panel_formats	function
(	O
panel	pointer
)	O
;	O
}	O
panel	pointer
->	O
count	int
=	O
do_load_dir	function
(	O
panel	pointer
->	O
cwd	short
,	O
&	O
panel	pointer
->	O
dir	pointer
,	O
panel	pointer
->	O
sort_type	pointer
,	O
panel	pointer
->	O
reverse	int
,	O
panel	pointer
->	O
case_sensitive	int
,	O
panel	pointer
->	O
filter	pointer
)	O
;	O
return	O
panel	pointer
;	O
}	O
void	O
panel_reload	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
struct	O
stat	struct
current_stat	struct
;	O
if	O
(	O
fast_reload	int
&&	O
!	O
stat	struct
(	O
panel	pointer
->	O
cwd	short
,	O
&	O
current_stat	struct
)	O
&&	O
current_stat	struct
.	O
st_ctime	O
==	O
panel	pointer
->	O
dir_stat	struct
.	O
st_ctime	O
&&	O
current_stat	struct
.	O
st_mtime	O
==	O
panel	pointer
->	O
dir_stat	struct
.	O
st_mtime	O
)	O
return	O
;	O
while	O
(	O
mc_chdir	function
(	O
panel	pointer
->	O
cwd	short
)	O
==	O
-	O
1	int
)	O
{	O
char	O
*	O
last_slash	pointer
;	O
if	O
(	O
panel	pointer
->	O
cwd	short
[	O
0	int
]	O
==	O
PATH_SEP	char
&&	O
panel	pointer
->	O
cwd	short
[	O
1	int
]	O
==	O
0	int
)	O
{	O
panel_clean_dir	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
count	int
=	O
set_zero_dir	function
(	O
&	O
panel	pointer
->	O
dir	pointer
)	O
;	O
return	O
;	O
}	O
last_slash	pointer
=	O
strrchr	function
(	O
panel	pointer
->	O
cwd	short
,	O
PATH_SEP	char
)	O
;	O
if	O
(	O
!	O
last_slash	pointer
||	O
last_slash	pointer
==	O
panel	pointer
->	O
cwd	short
)	O
strcpy	function
(	O
panel	pointer
->	O
cwd	short
,	O
PATH_SEP_STR	pointer
)	O
;	O
else	O
*	O
last_slash	pointer
=	O
0	int
;	O
memset	function
(	O
&	O
(	O
panel	pointer
->	O
dir_stat	struct
)	O
,	O
0	int
,	O
sizeof	O
(	O
panel	pointer
->	O
dir_stat	struct
)	O
)	O
;	O
show_dir	function
(	O
panel	pointer
)	O
;	O
}	O
panel	pointer
->	O
count	int
=	O
do_reload_dir	function
(	O
panel	pointer
->	O
cwd	short
,	O
&	O
panel	pointer
->	O
dir	pointer
,	O
panel	pointer
->	O
sort_type	pointer
,	O
panel	pointer
->	O
count	int
,	O
panel	pointer
->	O
reverse	int
,	O
panel	pointer
->	O
case_sensitive	int
,	O
panel	pointer
->	O
filter	pointer
)	O
;	O
panel	pointer
->	O
dirty	int
=	O
1	int
;	O
if	O
(	O
panel	pointer
->	O
selected	int
>=	O
panel	pointer
->	O
count	int
)	O
do_select	function
(	O
panel	pointer
,	O
panel	pointer
->	O
count	int
-	O
1	int
)	O
;	O
recalculate_panel_summary	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
paint_frame	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
int	O
header_len	int
;	O
int	O
spaces	int
,	O
extra	pointer
;	O
int	O
side	int
,	O
width	int
;	O
const	O
char	O
*	O
txt	pointer
;	O
if	O
(	O
!	O
panel	pointer
->	O
split	int
)	O
adjust_top_file	function
(	O
panel	pointer
)	O
;	O
widget_erase	function
(	O
&	O
panel	pointer
->	O
widget	pointer
)	O
;	O
show_dir	function
(	O
panel	pointer
)	O
;	O
widget_move	O
(	O
&	O
panel	pointer
->	O
widget	pointer
,	O
1	int
,	O
1	int
)	O
;	O
for	O
(	O
side	int
=	O
0	int
;	O
side	int
<=	O
panel	pointer
->	O
split	int
;	O
side	int
++	O
)	O
{	O
format_e	struct
*	O
format	pointer
;	O
if	O
(	O
side	int
)	O
{	O
attrset	function
(	O
NORMAL_COLOR	O
)	O
;	O
one_vline	O
(	O
)	O
;	O
width	int
=	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
/	O
2	int
-	O
1	int
;	O
}	O
else	O
if	O
(	O
panel	pointer
->	O
split	int
)	O
width	int
=	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
/	O
2	int
-	O
3	int
;	O
else	O
width	int
=	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
;	O
for	O
(	O
format	pointer
=	O
panel	pointer
->	O
format	pointer
;	O
format	pointer
;	O
format	pointer
=	O
format	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
format	pointer
->	O
string_fn	pointer
)	O
{	O
txt	pointer
=	O
format	pointer
->	O
title	pointer
;	O
header_len	int
=	O
strlen	function
(	O
txt	pointer
)	O
;	O
if	O
(	O
header_len	int
>	O
format	pointer
->	O
field_len	int
)	O
header_len	int
=	O
format	pointer
->	O
field_len	int
;	O
attrset	function
(	O
MARKED_COLOR	O
)	O
;	O
spaces	int
=	O
(	O
format	pointer
->	O
field_len	int
-	O
header_len	int
)	O
/	O
2	int
;	O
extra	pointer
=	O
(	O
format	pointer
->	O
field_len	int
-	O
header_len	int
)	O
%	O
2	int
;	O
tty_printf	function
(	O
"%*s%.*s%*s"	pointer
,	O
spaces	int
,	O
""	pointer
,	O
header_len	int
,	O
txt	pointer
,	O
spaces	int
+	O
extra	pointer
,	O
""	pointer
)	O
;	O
width	int
-=	O
2	int
*	O
spaces	int
+	O
extra	pointer
+	O
header_len	int
;	O
}	O
else	O
{	O
attrset	function
(	O
NORMAL_COLOR	O
)	O
;	O
one_vline	O
(	O
)	O
;	O
width	int
--	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
width	int
>	O
0	int
)	O
tty_printf	function
(	O
"%*s"	pointer
,	O
width	int
,	O
""	pointer
)	O
;	O
}	O
}	O
static	O
const	O
char	O
*	O
parse_panel_size	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
const	O
char	O
*	O
format	pointer
,	O
int	O
isstatus	int
)	O
{	O
int	O
frame	int
=	O
frame_half	int
;	O
format	pointer
=	O
skip_separators	function
(	O
format	pointer
)	O
;	O
if	O
(	O
!	O
strncmp	function
(	O
format	pointer
,	O
"full"	pointer
,	O
4	int
)	O
)	O
{	O
frame	int
=	O
frame_full	int
;	O
format	pointer
+=	O
4	int
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
format	pointer
,	O
"half"	pointer
,	O
4	int
)	O
)	O
{	O
frame	int
=	O
frame_half	int
;	O
format	pointer
+=	O
4	int
;	O
}	O
if	O
(	O
!	O
isstatus	int
)	O
{	O
panel	pointer
->	O
frame_size	int
=	O
frame	int
;	O
panel	pointer
->	O
split	int
=	O
0	int
;	O
}	O
format	pointer
=	O
skip_separators	function
(	O
format	pointer
)	O
;	O
if	O
(	O
*	O
format	pointer
==	O
'1'	O
||	O
*	O
format	pointer
==	O
'2'	O
)	O
{	O
if	O
(	O
!	O
isstatus	int
)	O
panel	pointer
->	O
split	int
=	O
*	O
format	pointer
==	O
'2'	O
;	O
format	pointer
++	O
;	O
}	O
if	O
(	O
!	O
isstatus	int
)	O
panel_update_cols	function
(	O
&	O
(	O
panel	pointer
->	O
widget	pointer
)	O
,	O
panel	pointer
->	O
frame_size	int
)	O
;	O
return	O
skip_separators	function
(	O
format	pointer
)	O
;	O
}	O
static	O
format_e	struct
*	O
parse_display_format	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
const	O
char	O
*	O
format	pointer
,	O
char	O
*	O
*	O
error	pointer
,	O
int	O
isstatus	int
,	O
int	O
*	O
res_total_cols	pointer
)	O
{	O
format_e	struct
*	O
darr	pointer
,	O
*	O
old	pointer
=	O
0	int
,	O
*	O
home	pointer
=	O
0	int
;	O
int	O
total_cols	int
=	O
0	int
;	O
int	O
set_justify	int
;	O
int	O
justify	int
=	O
0	int
;	O
int	O
items	pointer
=	O
0	int
;	O
size_t	long
i	array
;	O
static	O
size_t	long
i18n_timelength	long
=	O
0	int
;	O
*	O
error	pointer
=	O
0	int
;	O
if	O
(	O
i18n_timelength	long
==	O
0	int
)	O
{	O
i18n_timelength	long
=	O
i18n_checktimelength	function
(	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
ELEMENTS	O
(	O
formats	array
)	O
;	O
i	array
++	O
)	O
if	O
(	O
strcmp	function
(	O
"time"	pointer
,	O
formats	array
[	O
i	array
]	O
.	O
id	int
+	O
1	int
)	O
==	O
0	int
)	O
formats	array
[	O
i	array
]	O
.	O
min_size	int
=	O
i18n_timelength	long
;	O
}	O
format	pointer
=	O
parse_panel_size	function
(	O
panel	pointer
,	O
format	pointer
,	O
isstatus	int
)	O
;	O
while	O
(	O
*	O
format	pointer
)	O
{	O
int	O
found	int
=	O
0	int
;	O
darr	pointer
=	O
g_new	O
(	O
format_e	struct
,	O
1	int
)	O
;	O
if	O
(	O
!	O
home	pointer
)	O
home	pointer
=	O
old	pointer
=	O
darr	pointer
;	O
old	pointer
->	O
next	pointer
=	O
darr	pointer
;	O
darr	pointer
->	O
next	pointer
=	O
0	int
;	O
old	pointer
=	O
darr	pointer
;	O
format	pointer
=	O
skip_separators	function
(	O
format	pointer
)	O
;	O
if	O
(	O
strchr	function
(	O
"<=>"	pointer
,	O
*	O
format	pointer
)	O
)	O
{	O
set_justify	int
=	O
1	int
;	O
switch	O
(	O
*	O
format	pointer
)	O
{	O
case	O
'<'	O
:	O
justify	int
=	O
J_LEFT	int
;	O
break	O
;	O
case	O
'='	O
:	O
justify	int
=	O
J_CENTER	int
;	O
break	O
;	O
case	O
'>'	O
:	O
default	O
:	O
justify	int
=	O
J_RIGHT	int
;	O
break	O
;	O
}	O
format	pointer
=	O
skip_separators	function
(	O
format	pointer
+	O
1	int
)	O
;	O
}	O
else	O
set_justify	int
=	O
0	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
ELEMENTS	O
(	O
formats	array
)	O
;	O
i	array
++	O
)	O
{	O
int	O
klen	int
=	O
strlen	function
(	O
formats	array
[	O
i	array
]	O
.	O
id	int
)	O
;	O
if	O
(	O
strncmp	function
(	O
format	pointer
,	O
formats	array
[	O
i	array
]	O
.	O
id	int
,	O
klen	int
)	O
!=	O
0	int
)	O
continue	O
;	O
format	pointer
+=	O
klen	int
;	O
if	O
(	O
formats	array
[	O
i	array
]	O
.	O
use_in_gui	int
)	O
items	pointer
++	O
;	O
darr	pointer
->	O
requested_field_len	int
=	O
formats	array
[	O
i	array
]	O
.	O
min_size	int
;	O
darr	pointer
->	O
string_fn	pointer
=	O
formats	array
[	O
i	array
]	O
.	O
string_fn	pointer
;	O
if	O
(	O
formats	array
[	O
i	array
]	O
.	O
title	pointer
[	O
0	int
]	O
)	O
darr	pointer
->	O
title	pointer
=	O
_	O
(	O
formats	array
[	O
i	array
]	O
.	O
title	pointer
)	O
;	O
else	O
darr	pointer
->	O
title	pointer
=	O
""	pointer
;	O
darr	pointer
->	O
id	int
=	O
formats	array
[	O
i	array
]	O
.	O
id	int
;	O
darr	pointer
->	O
expand	int
=	O
formats	array
[	O
i	array
]	O
.	O
expands	int
;	O
darr	pointer
->	O
just_mode	int
=	O
formats	array
[	O
i	array
]	O
.	O
default_just	int
;	O
if	O
(	O
set_justify	int
)	O
{	O
if	O
(	O
IS_FIT	O
(	O
darr	pointer
->	O
just_mode	int
)	O
)	O
darr	pointer
->	O
just_mode	int
=	O
MAKE_FIT	O
(	O
justify	int
)	O
;	O
else	O
darr	pointer
->	O
just_mode	int
=	O
justify	int
;	O
}	O
found	int
=	O
1	int
;	O
format	pointer
=	O
skip_separators	function
(	O
format	pointer
)	O
;	O
if	O
(	O
*	O
format	pointer
==	O
':'	O
)	O
{	O
int	O
req_length	int
;	O
darr	pointer
->	O
expand	int
=	O
0	int
;	O
format	pointer
++	O
;	O
req_length	int
=	O
atoi	function
(	O
format	pointer
)	O
;	O
darr	pointer
->	O
requested_field_len	int
=	O
req_length	int
;	O
format	pointer
=	O
skip_numbers	function
(	O
format	pointer
)	O
;	O
if	O
(	O
*	O
format	pointer
==	O
'+'	O
)	O
{	O
darr	pointer
->	O
expand	int
=	O
1	int
;	O
format	pointer
++	O
;	O
}	O
}	O
break	O
;	O
}	O
if	O
(	O
!	O
found	int
)	O
{	O
char	O
*	O
tmp_format	pointer
=	O
g_strdup	function
(	O
format	pointer
)	O
;	O
int	O
pos	pointer
=	O
min	long
(	O
8	int
,	O
strlen	function
(	O
format	pointer
)	O
)	O
;	O
delete_format	function
(	O
home	pointer
)	O
;	O
tmp_format	pointer
[	O
pos	pointer
]	O
=	O
0	int
;	O
*	O
error	pointer
=	O
g_strconcat	function
(	O
_	O
(	O
"Unknown tag on display format: "	pointer
)	O
,	O
tmp_format	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
g_free	function
(	O
tmp_format	pointer
)	O
;	O
return	O
0	int
;	O
}	O
total_cols	int
+=	O
darr	pointer
->	O
requested_field_len	int
;	O
}	O
*	O
res_total_cols	pointer
=	O
total_cols	int
;	O
return	O
home	pointer
;	O
}	O
static	O
format_e	struct
*	O
use_display_format	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
const	O
char	O
*	O
format	pointer
,	O
char	O
*	O
*	O
error	pointer
,	O
int	O
isstatus	int
)	O
{	O
int	O
expand_top	int
=	O
0	int
;	O
int	O
usable_columns	int
;	O
int	O
total_cols	int
=	O
0	int
;	O
int	O
i	array
;	O
format_e	struct
*	O
darr	pointer
,	O
*	O
home	pointer
;	O
if	O
(	O
!	O
format	pointer
)	O
format	pointer
=	O
DEFAULT_USER_FORMAT	pointer
;	O
home	pointer
=	O
parse_display_format	function
(	O
panel	pointer
,	O
format	pointer
,	O
error	pointer
,	O
isstatus	int
,	O
&	O
total_cols	int
)	O
;	O
if	O
(	O
*	O
error	pointer
)	O
return	O
0	int
;	O
panel	pointer
->	O
dirty	int
=	O
1	int
;	O
usable_columns	int
=	O
(	O
(	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
)	O
/	O
(	O
(	O
isstatus	int
)	O
?	O
1	int
:	O
(	O
panel	pointer
->	O
split	int
+	O
1	int
)	O
)	O
)	O
-	O
(	O
!	O
isstatus	int
&&	O
panel	pointer
->	O
split	int
)	O
;	O
for	O
(	O
darr	pointer
=	O
home	pointer
;	O
darr	pointer
&&	O
expand_top	int
<	O
MAX_EXPAND	int
;	O
darr	pointer
=	O
darr	pointer
->	O
next	pointer
)	O
{	O
darr	pointer
->	O
field_len	int
=	O
darr	pointer
->	O
requested_field_len	int
;	O
if	O
(	O
darr	pointer
->	O
expand	int
)	O
expand_top	int
++	O
;	O
}	O
if	O
(	O
total_cols	int
>	O
usable_columns	int
)	O
{	O
int	O
pdif	int
,	O
dif	int
=	O
total_cols	int
-	O
usable_columns	int
;	O
while	O
(	O
dif	int
)	O
{	O
pdif	int
=	O
dif	int
;	O
for	O
(	O
darr	pointer
=	O
home	pointer
;	O
darr	pointer
;	O
darr	pointer
=	O
darr	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
dif	int
&&	O
darr	pointer
->	O
field_len	int
-	O
1	int
)	O
{	O
darr	pointer
->	O
field_len	int
--	O
;	O
dif	int
--	O
;	O
}	O
}	O
if	O
(	O
pdif	int
==	O
dif	int
)	O
break	O
;	O
}	O
total_cols	int
=	O
usable_columns	int
;	O
}	O
if	O
(	O
(	O
usable_columns	int
>	O
total_cols	int
)	O
&&	O
expand_top	int
)	O
{	O
int	O
spaces	int
=	O
(	O
usable_columns	int
-	O
total_cols	int
)	O
/	O
expand_top	int
;	O
int	O
extra	pointer
=	O
(	O
usable_columns	int
-	O
total_cols	int
)	O
%	O
expand_top	int
;	O
for	O
(	O
i	array
=	O
0	int
,	O
darr	pointer
=	O
home	pointer
;	O
darr	pointer
&&	O
(	O
i	array
<	O
expand_top	int
)	O
;	O
darr	pointer
=	O
darr	pointer
->	O
next	pointer
)	O
if	O
(	O
darr	pointer
->	O
expand	int
)	O
{	O
darr	pointer
->	O
field_len	int
+=	O
(	O
spaces	int
+	O
(	O
(	O
i	array
==	O
0	int
)	O
?	O
extra	pointer
:	O
0	int
)	O
)	O
;	O
i	array
++	O
;	O
}	O
}	O
return	O
home	pointer
;	O
}	O
int	O
set_panel_formats	function
(	O
WPanel	struct
*	O
p	pointer
)	O
{	O
format_e	struct
*	O
form	pointer
;	O
char	O
*	O
err	long
;	O
int	O
retcode	int
=	O
0	int
;	O
form	pointer
=	O
use_display_format	function
(	O
p	pointer
,	O
panel_format	function
(	O
p	pointer
)	O
,	O
&	O
err	long
,	O
0	int
)	O
;	O
if	O
(	O
err	long
)	O
{	O
g_free	function
(	O
err	long
)	O
;	O
retcode	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
p	pointer
->	O
format	pointer
)	O
delete_format	function
(	O
p	pointer
->	O
format	pointer
)	O
;	O
p	pointer
->	O
format	pointer
=	O
form	pointer
;	O
}	O
if	O
(	O
show_mini_info	int
)	O
{	O
form	pointer
=	O
use_display_format	function
(	O
p	pointer
,	O
mini_status_format	function
(	O
p	pointer
)	O
,	O
&	O
err	long
,	O
1	int
)	O
;	O
if	O
(	O
err	long
)	O
{	O
g_free	function
(	O
err	long
)	O
;	O
retcode	int
+=	O
2	int
;	O
}	O
else	O
{	O
if	O
(	O
p	pointer
->	O
status_format	pointer
)	O
delete_format	function
(	O
p	pointer
->	O
status_format	pointer
)	O
;	O
p	pointer
->	O
status_format	pointer
=	O
form	pointer
;	O
}	O
}	O
panel_format_modified	function
(	O
p	pointer
)	O
;	O
panel_update_cols	function
(	O
&	O
(	O
p	pointer
->	O
widget	pointer
)	O
,	O
p	pointer
->	O
frame_size	int
)	O
;	O
if	O
(	O
retcode	int
)	O
message	pointer
(	O
1	int
,	O
_	O
(	O
"Warning"	pointer
)	O
,	O
_	O
(	O
"User supplied format looks invalid, reverting to default."	pointer
)	O
)	O
;	O
if	O
(	O
retcode	int
&	O
0x01	int
)	O
{	O
g_free	function
(	O
p	pointer
->	O
user_format	pointer
)	O
;	O
p	pointer
->	O
user_format	pointer
=	O
g_strdup	function
(	O
DEFAULT_USER_FORMAT	pointer
)	O
;	O
}	O
if	O
(	O
retcode	int
&	O
0x02	int
)	O
{	O
g_free	function
(	O
p	pointer
->	O
user_status_format	array
[	O
p	pointer
->	O
list_type	int
]	O
)	O
;	O
p	pointer
->	O
user_status_format	array
[	O
p	pointer
->	O
list_type	int
]	O
=	O
g_strdup	function
(	O
DEFAULT_USER_FORMAT	pointer
)	O
;	O
}	O
return	O
retcode	int
;	O
}	O
static	O
const	O
char	O
*	O
panel_format	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
switch	O
(	O
panel	pointer
->	O
list_type	int
)	O
{	O
case	O
list_long	int
:	O
return	O
"full perm space nlink space owner space group space size space mtime space name"	pointer
;	O
case	O
list_brief	int
:	O
return	O
"half 2 type name"	pointer
;	O
case	O
list_user	int
:	O
return	O
panel	pointer
->	O
user_format	pointer
;	O
default	O
:	O
case	O
list_full	int
:	O
return	O
"half type name | size | mtime"	pointer
;	O
}	O
}	O
static	O
const	O
char	O
*	O
mini_status_format	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
if	O
(	O
panel	pointer
->	O
user_mini_status	int
)	O
return	O
panel	pointer
->	O
user_status_format	array
[	O
panel	pointer
->	O
list_type	int
]	O
;	O
switch	O
(	O
panel	pointer
->	O
list_type	int
)	O
{	O
case	O
list_long	int
:	O
return	O
"full perm space nlink space owner space group space size space mtime space name"	pointer
;	O
case	O
list_brief	int
:	O
return	O
"half type name space bsize space perm space"	pointer
;	O
case	O
list_full	int
:	O
return	O
"half type name"	pointer
;	O
default	O
:	O
case	O
list_user	int
:	O
return	O
panel	pointer
->	O
user_format	pointer
;	O
}	O
}	O
static	O
int	O
ITEMS	function
(	O
WPanel	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
split	int
)	O
return	O
llines	O
(	O
p	pointer
)	O
*	O
2	int
;	O
else	O
return	O
llines	O
(	O
p	pointer
)	O
;	O
}	O
void	O
select_item	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
int	O
items	pointer
=	O
ITEMS	function
(	O
panel	pointer
)	O
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
<	O
0	int
)	O
panel	pointer
->	O
top_file	int
=	O
0	int
;	O
if	O
(	O
panel	pointer
->	O
selected	int
<	O
0	int
)	O
panel	pointer
->	O
selected	int
=	O
0	int
;	O
if	O
(	O
panel	pointer
->	O
selected	int
>	O
panel	pointer
->	O
count	int
-	O
1	int
)	O
panel	pointer
->	O
selected	int
=	O
panel	pointer
->	O
count	int
-	O
1	int
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
>	O
panel	pointer
->	O
count	int
-	O
1	int
)	O
panel	pointer
->	O
top_file	int
=	O
panel	pointer
->	O
count	int
-	O
1	int
;	O
if	O
(	O
(	O
panel	pointer
->	O
count	int
-	O
panel	pointer
->	O
top_file	int
)	O
<	O
items	pointer
)	O
{	O
panel	pointer
->	O
top_file	int
=	O
panel	pointer
->	O
count	int
-	O
items	pointer
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
<	O
0	int
)	O
panel	pointer
->	O
top_file	int
=	O
0	int
;	O
}	O
if	O
(	O
panel	pointer
->	O
selected	int
<	O
panel	pointer
->	O
top_file	int
)	O
panel	pointer
->	O
top_file	int
=	O
panel	pointer
->	O
selected	int
;	O
if	O
(	O
(	O
panel	pointer
->	O
selected	int
-	O
panel	pointer
->	O
top_file	int
)	O
>=	O
items	pointer
)	O
panel	pointer
->	O
top_file	int
=	O
panel	pointer
->	O
selected	int
-	O
items	pointer
+	O
1	int
;	O
panel	pointer
->	O
dirty	int
=	O
1	int
;	O
execute_hooks	function
(	O
select_file_hook	pointer
)	O
;	O
}	O
void	O
unmark_files	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
int	O
i	array
;	O
if	O
(	O
!	O
panel	pointer
->	O
marked	int
)	O
return	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
panel	pointer
->	O
count	int
;	O
i	array
++	O
)	O
file_mark	function
(	O
panel	pointer
,	O
i	array
,	O
0	int
)	O
;	O
panel	pointer
->	O
dirs_marked	int
=	O
0	int
;	O
panel	pointer
->	O
marked	int
=	O
0	int
;	O
panel	pointer
->	O
total	double
=	O
0	int
;	O
}	O
static	O
void	O
unselect_item	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
repaint_file	function
(	O
panel	pointer
,	O
panel	pointer
->	O
selected	int
,	O
1	int
,	O
2	int
*	O
selection	O
(	O
panel	pointer
)	O
->	O
f	float
.	O
marked	int
,	O
0	int
)	O
;	O
}	O
static	O
void	O
move_down	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
if	O
(	O
panel	pointer
->	O
selected	int
+	O
1	int
==	O
panel	pointer
->	O
count	int
)	O
return	O
;	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
selected	int
++	O
;	O
if	O
(	O
panel	pointer
->	O
selected	int
-	O
panel	pointer
->	O
top_file	int
==	O
ITEMS	function
(	O
panel	pointer
)	O
&&	O
panel_scroll_pages	int
)	O
{	O
panel	pointer
->	O
top_file	int
+=	O
ITEMS	function
(	O
panel	pointer
)	O
/	O
2	int
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
>	O
panel	pointer
->	O
count	int
-	O
ITEMS	function
(	O
panel	pointer
)	O
)	O
panel	pointer
->	O
top_file	int
=	O
panel	pointer
->	O
count	int
-	O
ITEMS	function
(	O
panel	pointer
)	O
;	O
paint_dir	function
(	O
panel	pointer
)	O
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
}	O
select_item	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
move_up	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
if	O
(	O
panel	pointer
->	O
selected	int
==	O
0	int
)	O
return	O
;	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
selected	int
--	O
;	O
if	O
(	O
panel	pointer
->	O
selected	int
<	O
panel	pointer
->	O
top_file	int
&&	O
panel_scroll_pages	int
)	O
{	O
panel	pointer
->	O
top_file	int
-=	O
ITEMS	function
(	O
panel	pointer
)	O
/	O
2	int
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
<	O
0	int
)	O
panel	pointer
->	O
top_file	int
=	O
0	int
;	O
paint_dir	function
(	O
panel	pointer
)	O
;	O
}	O
select_item	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
move_selection	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
lines	pointer
)	O
{	O
int	O
new_pos	int
;	O
int	O
adjust	int
=	O
0	int
;	O
new_pos	int
=	O
panel	pointer
->	O
selected	int
+	O
lines	pointer
;	O
if	O
(	O
new_pos	int
>=	O
panel	pointer
->	O
count	int
)	O
new_pos	int
=	O
panel	pointer
->	O
count	int
-	O
1	int
;	O
if	O
(	O
new_pos	int
<	O
0	int
)	O
new_pos	int
=	O
0	int
;	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
selected	int
=	O
new_pos	int
;	O
if	O
(	O
panel	pointer
->	O
selected	int
-	O
panel	pointer
->	O
top_file	int
>=	O
ITEMS	function
(	O
panel	pointer
)	O
)	O
{	O
panel	pointer
->	O
top_file	int
+=	O
lines	pointer
;	O
adjust	int
=	O
1	int
;	O
}	O
if	O
(	O
panel	pointer
->	O
selected	int
-	O
panel	pointer
->	O
top_file	int
<	O
0	int
)	O
{	O
panel	pointer
->	O
top_file	int
+=	O
lines	pointer
;	O
adjust	int
=	O
1	int
;	O
}	O
if	O
(	O
adjust	int
)	O
{	O
if	O
(	O
panel	pointer
->	O
top_file	int
>	O
panel	pointer
->	O
selected	int
)	O
panel	pointer
->	O
top_file	int
=	O
panel	pointer
->	O
selected	int
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
<	O
0	int
)	O
panel	pointer
->	O
top_file	int
=	O
0	int
;	O
paint_dir	function
(	O
panel	pointer
)	O
;	O
}	O
select_item	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
cb_ret_t	enum
move_left	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
c_code	int
)	O
{	O
if	O
(	O
panel	pointer
->	O
split	int
)	O
{	O
move_selection	function
(	O
panel	pointer
,	O
-	O
llines	O
(	O
panel	pointer
)	O
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
else	O
return	O
maybe_cd	function
(	O
1	int
)	O
;	O
}	O
static	O
int	O
move_right	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
c_code	int
)	O
{	O
if	O
(	O
panel	pointer
->	O
split	int
)	O
{	O
move_selection	function
(	O
panel	pointer
,	O
llines	O
(	O
panel	pointer
)	O
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
else	O
return	O
maybe_cd	function
(	O
0	int
)	O
;	O
}	O
static	O
void	O
prev_page	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
int	O
items	pointer
;	O
if	O
(	O
!	O
panel	pointer
->	O
selected	int
&&	O
!	O
panel	pointer
->	O
top_file	int
)	O
return	O
;	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
items	pointer
=	O
ITEMS	function
(	O
panel	pointer
)	O
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
<	O
items	pointer
)	O
items	pointer
=	O
panel	pointer
->	O
top_file	int
;	O
if	O
(	O
!	O
items	pointer
)	O
panel	pointer
->	O
selected	int
=	O
0	int
;	O
else	O
panel	pointer
->	O
selected	int
-=	O
items	pointer
;	O
panel	pointer
->	O
top_file	int
-=	O
items	pointer
;	O
if	O
(	O
panel	pointer
->	O
selected	int
<	O
0	int
)	O
panel	pointer
->	O
selected	int
=	O
0	int
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
<	O
0	int
)	O
panel	pointer
->	O
top_file	int
=	O
0	int
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
paint_dir	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
ctrl_prev_page	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
do_cd	function
(	O
".."	pointer
,	O
cd_exact	int
)	O
;	O
}	O
static	O
void	O
next_page	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
int	O
items	pointer
;	O
if	O
(	O
panel	pointer
->	O
selected	int
==	O
panel	pointer
->	O
count	int
-	O
1	int
)	O
return	O
;	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
items	pointer
=	O
ITEMS	function
(	O
panel	pointer
)	O
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
>	O
panel	pointer
->	O
count	int
-	O
2	int
*	O
items	pointer
)	O
items	pointer
=	O
panel	pointer
->	O
count	int
-	O
items	pointer
-	O
panel	pointer
->	O
top_file	int
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
+	O
items	pointer
<	O
0	int
)	O
items	pointer
=	O
-	O
panel	pointer
->	O
top_file	int
;	O
if	O
(	O
!	O
items	pointer
)	O
panel	pointer
->	O
selected	int
=	O
panel	pointer
->	O
count	int
-	O
1	int
;	O
else	O
panel	pointer
->	O
selected	int
+=	O
items	pointer
;	O
panel	pointer
->	O
top_file	int
+=	O
items	pointer
;	O
if	O
(	O
panel	pointer
->	O
selected	int
>=	O
panel	pointer
->	O
count	int
)	O
panel	pointer
->	O
selected	int
=	O
panel	pointer
->	O
count	int
-	O
1	int
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
>=	O
panel	pointer
->	O
count	int
)	O
panel	pointer
->	O
top_file	int
=	O
panel	pointer
->	O
count	int
-	O
1	int
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
paint_dir	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
ctrl_next_page	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
if	O
(	O
(	O
S_ISDIR	O
(	O
selection	O
(	O
panel	pointer
)	O
->	O
st	pointer
.	O
st_mode	int
)	O
||	O
link_isdir	function
(	O
selection	O
(	O
panel	pointer
)	O
)	O
)	O
)	O
{	O
do_cd	function
(	O
selection	O
(	O
panel	pointer
)	O
->	O
fname	pointer
,	O
cd_exact	int
)	O
;	O
}	O
}	O
static	O
void	O
goto_top_file	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
selected	int
=	O
panel	pointer
->	O
top_file	int
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
goto_middle_file	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
selected	int
=	O
panel	pointer
->	O
top_file	int
+	O
(	O
ITEMS	function
(	O
panel	pointer
)	O
/	O
2	int
)	O
;	O
if	O
(	O
panel	pointer
->	O
selected	int
>=	O
panel	pointer
->	O
count	int
)	O
panel	pointer
->	O
selected	int
=	O
panel	pointer
->	O
count	int
-	O
1	int
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
goto_bottom_file	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
selected	int
=	O
panel	pointer
->	O
top_file	int
+	O
ITEMS	function
(	O
panel	pointer
)	O
-	O
1	int
;	O
if	O
(	O
panel	pointer
->	O
selected	int
>=	O
panel	pointer
->	O
count	int
)	O
panel	pointer
->	O
selected	int
=	O
panel	pointer
->	O
count	int
-	O
1	int
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
move_home	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
if	O
(	O
panel	pointer
->	O
selected	int
==	O
0	int
)	O
return	O
;	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
if	O
(	O
torben_fj_mode	int
)	O
{	O
int	O
middle_pos	int
=	O
panel	pointer
->	O
top_file	int
+	O
(	O
ITEMS	function
(	O
panel	pointer
)	O
/	O
2	int
)	O
;	O
if	O
(	O
panel	pointer
->	O
selected	int
>	O
middle_pos	int
)	O
{	O
goto_middle_file	function
(	O
panel	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
panel	pointer
->	O
selected	int
!=	O
panel	pointer
->	O
top_file	int
)	O
{	O
goto_top_file	function
(	O
panel	pointer
)	O
;	O
return	O
;	O
}	O
}	O
panel	pointer
->	O
top_file	int
=	O
0	int
;	O
panel	pointer
->	O
selected	int
=	O
0	int
;	O
paint_dir	function
(	O
panel	pointer
)	O
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
move_end	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
if	O
(	O
panel	pointer
->	O
selected	int
==	O
panel	pointer
->	O
count	int
-	O
1	int
)	O
return	O
;	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
if	O
(	O
torben_fj_mode	int
)	O
{	O
int	O
middle_pos	int
=	O
panel	pointer
->	O
top_file	int
+	O
(	O
ITEMS	function
(	O
panel	pointer
)	O
/	O
2	int
)	O
;	O
if	O
(	O
panel	pointer
->	O
selected	int
<	O
middle_pos	int
)	O
{	O
goto_middle_file	function
(	O
panel	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
panel	pointer
->	O
selected	int
!=	O
(	O
panel	pointer
->	O
top_file	int
+	O
ITEMS	function
(	O
panel	pointer
)	O
-	O
1	int
)	O
)	O
{	O
goto_bottom_file	function
(	O
panel	pointer
)	O
;	O
return	O
;	O
}	O
}	O
panel	pointer
->	O
selected	int
=	O
panel	pointer
->	O
count	int
-	O
1	int
;	O
paint_dir	function
(	O
panel	pointer
)	O
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
}	O
void	O
recalculate_panel_summary	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
int	O
i	array
;	O
panel	pointer
->	O
marked	int
=	O
0	int
;	O
panel	pointer
->	O
dirs_marked	int
=	O
0	int
;	O
panel	pointer
->	O
total	double
=	O
0	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
panel	pointer
->	O
count	int
;	O
i	array
++	O
)	O
if	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
i	array
]	O
.	O
f	float
.	O
marked	int
)	O
{	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
i	array
]	O
.	O
f	float
.	O
marked	int
=	O
0	int
;	O
do_file_mark	function
(	O
panel	pointer
,	O
i	array
,	O
1	int
)	O
;	O
}	O
}	O
void	O
do_file_mark	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
idx	int
,	O
int	O
mark	int
)	O
{	O
if	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
idx	int
]	O
.	O
f	float
.	O
marked	int
==	O
mark	int
)	O
return	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
idx	int
]	O
.	O
fname	pointer
,	O
".."	pointer
)	O
)	O
return	O
;	O
file_mark	function
(	O
panel	pointer
,	O
idx	int
,	O
mark	int
)	O
;	O
if	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
idx	int
]	O
.	O
f	float
.	O
marked	int
)	O
{	O
panel	pointer
->	O
marked	int
++	O
;	O
if	O
(	O
S_ISDIR	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
idx	int
]	O
.	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
idx	int
]	O
.	O
f	float
.	O
dir_size_computed	int
)	O
panel	pointer
->	O
total	double
+=	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
idx	int
]	O
.	O
st	pointer
.	O
st_size	long
;	O
panel	pointer
->	O
dirs_marked	int
++	O
;	O
}	O
else	O
panel	pointer
->	O
total	double
+=	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
idx	int
]	O
.	O
st	pointer
.	O
st_size	long
;	O
set_colors	function
(	O
panel	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
S_ISDIR	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
idx	int
]	O
.	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
idx	int
]	O
.	O
f	float
.	O
dir_size_computed	int
)	O
panel	pointer
->	O
total	double
-=	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
idx	int
]	O
.	O
st	pointer
.	O
st_size	long
;	O
panel	pointer
->	O
dirs_marked	int
--	O
;	O
}	O
else	O
panel	pointer
->	O
total	double
-=	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
idx	int
]	O
.	O
st	pointer
.	O
st_size	long
;	O
panel	pointer
->	O
marked	int
--	O
;	O
}	O
}	O
static	O
void	O
do_mark_file	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
do_move	int
)	O
{	O
do_file_mark	function
(	O
panel	pointer
,	O
panel	pointer
->	O
selected	int
,	O
selection	O
(	O
panel	pointer
)	O
->	O
f	float
.	O
marked	int
?	O
0	int
:	O
1	int
)	O
;	O
if	O
(	O
mark_moves_down	int
&&	O
do_move	int
)	O
move_down	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
mark_file	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
do_mark_file	function
(	O
panel	pointer
,	O
1	int
)	O
;	O
}	O
static	O
void	O
do_search	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
c_code	int
)	O
{	O
size_t	long
l	pointer
;	O
int	O
i	array
;	O
int	O
wrapped	int
=	O
0	int
;	O
int	O
found	int
;	O
l	pointer
=	O
strlen	function
(	O
panel	pointer
->	O
search_buffer	array
)	O
;	O
if	O
(	O
c_code	int
==	O
KEY_BACKSPACE	int
)	O
{	O
if	O
(	O
l	pointer
)	O
panel	pointer
->	O
search_buffer	array
[	O
--	O
l	pointer
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
if	O
(	O
c_code	int
&&	O
l	pointer
<	O
sizeof	O
(	O
panel	pointer
->	O
search_buffer	array
)	O
)	O
{	O
panel	pointer
->	O
search_buffer	array
[	O
l	pointer
]	O
=	O
c_code	int
;	O
panel	pointer
->	O
search_buffer	array
[	O
l	pointer
+	O
1	int
]	O
=	O
0	int
;	O
l	pointer
++	O
;	O
}	O
}	O
found	int
=	O
0	int
;	O
for	O
(	O
i	array
=	O
panel	pointer
->	O
selected	int
;	O
!	O
wrapped	int
||	O
i	array
!=	O
panel	pointer
->	O
selected	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
i	array
>=	O
panel	pointer
->	O
count	int
)	O
{	O
i	array
=	O
0	int
;	O
if	O
(	O
wrapped	int
)	O
break	O
;	O
wrapped	int
=	O
1	int
;	O
}	O
if	O
(	O
panel	pointer
->	O
case_sensitive	int
?	O
(	O
strncmp	function
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
i	array
]	O
.	O
fname	pointer
,	O
panel	pointer
->	O
search_buffer	array
,	O
l	pointer
)	O
==	O
0	int
)	O
:	O
(	O
g_strncasecmp	function
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
i	array
]	O
.	O
fname	pointer
,	O
panel	pointer
->	O
search_buffer	array
,	O
l	pointer
)	O
==	O
0	int
)	O
)	O
{	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
selected	int
=	O
i	array
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
found	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
found	int
)	O
panel	pointer
->	O
search_buffer	array
[	O
--	O
l	pointer
]	O
=	O
0	int
;	O
paint_panel	function
(	O
panel	pointer
)	O
;	O
}	O
static	O
void	O
start_search	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
if	O
(	O
panel	pointer
->	O
searching	int
)	O
{	O
if	O
(	O
panel	pointer
->	O
selected	int
+	O
1	int
==	O
panel	pointer
->	O
count	int
)	O
panel	pointer
->	O
selected	int
=	O
0	int
;	O
else	O
move_down	function
(	O
panel	pointer
)	O
;	O
do_search	function
(	O
panel	pointer
,	O
0	int
)	O
;	O
}	O
else	O
{	O
panel	pointer
->	O
searching	int
=	O
1	int
;	O
panel	pointer
->	O
search_buffer	array
[	O
0	int
]	O
=	O
0	int
;	O
display_mini_info	function
(	O
panel	pointer
)	O
;	O
mc_refresh	function
(	O
)	O
;	O
}	O
}	O
static	O
int	O
do_enter_on_file_entry	function
(	O
file_entry	struct
*	O
fe	pointer
)	O
{	O
char	O
*	O
full_name	pointer
;	O
if	O
(	O
S_ISDIR	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
||	O
link_isdir	function
(	O
fe	pointer
)	O
||	O
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
==	O
0	int
)	O
)	O
{	O
if	O
(	O
!	O
do_cd	function
(	O
fe	pointer
->	O
fname	pointer
,	O
cd_exact	int
)	O
)	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
"Cannot change directory"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
regex_command	function
(	O
fe	pointer
->	O
fname	pointer
,	O
"Open"	pointer
,	O
0	int
)	O
!=	O
0	int
)	O
return	O
1	int
;	O
full_name	pointer
=	O
concat_dir_and_file	function
(	O
current_panel	pointer
->	O
cwd	short
,	O
fe	pointer
->	O
fname	pointer
)	O
;	O
if	O
(	O
!	O
is_exe	function
(	O
fe	pointer
->	O
st	pointer
.	O
st_mode	int
)	O
||	O
!	O
if_link_is_exe	function
(	O
full_name	pointer
,	O
fe	pointer
)	O
)	O
{	O
g_free	function
(	O
full_name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
g_free	function
(	O
full_name	pointer
)	O
;	O
if	O
(	O
confirm_execute	int
)	O
{	O
if	O
(	O
query_dialog	function
(	O
_	O
(	O
" The Midnight Commander "	pointer
)	O
,	O
_	O
(	O
" Do you really want to execute? "	pointer
)	O
,	O
0	int
,	O
2	int
,	O
_	O
(	O
"&Yes"	pointer
)	O
,	O
_	O
(	O
"&No"	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
vfs_current_is_local	function
(	O
)	O
)	O
{	O
char	O
*	O
tmp	pointer
;	O
int	O
ret	int
;	O
tmp	pointer
=	O
concat_dir_and_file	function
(	O
vfs_get_current_dir	function
(	O
)	O
,	O
fe	pointer
->	O
fname	pointer
)	O
;	O
ret	int
=	O
mc_setctl	function
(	O
tmp	pointer
,	O
VFS_SETCTL_RUN	int
,	O
NULL	O
)	O
;	O
g_free	function
(	O
tmp	pointer
)	O
;	O
return	O
confirm_execute	int
||	O
(	O
ret	int
==	O
0	int
)	O
;	O
}	O
{	O
char	O
*	O
tmp	pointer
=	O
name_quote	function
(	O
fe	pointer
->	O
fname	pointer
,	O
0	int
)	O
;	O
char	O
*	O
cmd	pointer
=	O
g_strconcat	function
(	O
"."	pointer
,	O
PATH_SEP_STR	pointer
,	O
tmp	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
g_free	function
(	O
tmp	pointer
)	O
;	O
shell_execute	function
(	O
cmd	pointer
,	O
0	int
)	O
;	O
g_free	function
(	O
cmd	pointer
)	O
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
do_enter	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
return	O
do_enter_on_file_entry	function
(	O
selection	O
(	O
panel	pointer
)	O
)	O
;	O
}	O
static	O
void	O
chdir_other_panel	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
char	O
*	O
new_dir	pointer
;	O
char	O
*	O
sel_entry	pointer
=	O
NULL	O
;	O
if	O
(	O
get_other_type	function
(	O
)	O
!=	O
view_listing	int
)	O
{	O
set_display_type	function
(	O
get_other_index	function
(	O
)	O
,	O
view_listing	int
)	O
;	O
}	O
if	O
(	O
!	O
S_ISDIR	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
panel	pointer
->	O
selected	int
]	O
.	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
new_dir	pointer
=	O
concat_dir_and_file	function
(	O
panel	pointer
->	O
cwd	short
,	O
".."	pointer
)	O
;	O
sel_entry	pointer
=	O
strrchr	function
(	O
panel	pointer
->	O
cwd	short
,	O
PATH_SEP	char
)	O
;	O
}	O
else	O
new_dir	pointer
=	O
concat_dir_and_file	function
(	O
panel	pointer
->	O
cwd	short
,	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
panel	pointer
->	O
selected	int
]	O
.	O
fname	pointer
)	O
;	O
change_panel	function
(	O
)	O
;	O
do_cd	function
(	O
new_dir	pointer
,	O
cd_exact	int
)	O
;	O
if	O
(	O
sel_entry	pointer
)	O
try_to_select	function
(	O
current_panel	pointer
,	O
sel_entry	pointer
)	O
;	O
change_panel	function
(	O
)	O
;	O
move_down	function
(	O
panel	pointer
)	O
;	O
g_free	function
(	O
new_dir	pointer
)	O
;	O
}	O
static	O
void	O
sync_other_panel	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
if	O
(	O
get_other_type	function
(	O
)	O
!=	O
view_listing	int
)	O
{	O
set_display_type	function
(	O
get_other_index	function
(	O
)	O
,	O
view_listing	int
)	O
;	O
}	O
do_panel_cd	function
(	O
other_panel	O
,	O
current_panel	pointer
->	O
cwd	short
,	O
cd_exact	int
)	O
;	O
if	O
(	O
!	O
panel	pointer
->	O
is_panelized	int
)	O
{	O
try_to_select	function
(	O
other_panel	O
,	O
selection	O
(	O
panel	pointer
)	O
->	O
fname	pointer
)	O
;	O
}	O
}	O
static	O
void	O
chdir_to_readlink	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
char	O
*	O
new_dir	pointer
;	O
if	O
(	O
get_other_type	function
(	O
)	O
!=	O
view_listing	int
)	O
return	O
;	O
if	O
(	O
S_ISLNK	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
panel	pointer
->	O
selected	int
]	O
.	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
char	O
buffer	pointer
[	O
MC_MAXPATHLEN	O
]	O
,	O
*	O
p	pointer
;	O
int	O
i	array
;	O
struct	O
stat	struct
st	pointer
;	O
i	array
=	O
readlink	function
(	O
selection	O
(	O
panel	pointer
)	O
->	O
fname	pointer
,	O
buffer	pointer
,	O
MC_MAXPATHLEN	O
-	O
1	int
)	O
;	O
if	O
(	O
i	array
<	O
0	int
)	O
return	O
;	O
if	O
(	O
mc_stat	function
(	O
selection	O
(	O
panel	pointer
)	O
->	O
fname	pointer
,	O
&	O
st	pointer
)	O
<	O
0	int
)	O
return	O
;	O
buffer	pointer
[	O
i	array
]	O
=	O
0	int
;	O
if	O
(	O
!	O
S_ISDIR	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
{	O
p	pointer
=	O
strrchr	function
(	O
buffer	pointer
,	O
PATH_SEP	char
)	O
;	O
if	O
(	O
p	pointer
&&	O
!	O
p	pointer
[	O
1	int
]	O
)	O
{	O
*	O
p	pointer
=	O
0	int
;	O
p	pointer
=	O
strrchr	function
(	O
buffer	pointer
,	O
PATH_SEP	char
)	O
;	O
}	O
if	O
(	O
!	O
p	pointer
)	O
return	O
;	O
p	pointer
[	O
1	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
*	O
buffer	pointer
==	O
PATH_SEP	char
)	O
new_dir	pointer
=	O
g_strdup	function
(	O
buffer	pointer
)	O
;	O
else	O
new_dir	pointer
=	O
concat_dir_and_file	function
(	O
panel	pointer
->	O
cwd	short
,	O
buffer	pointer
)	O
;	O
change_panel	function
(	O
)	O
;	O
do_cd	function
(	O
new_dir	pointer
,	O
cd_exact	int
)	O
;	O
change_panel	function
(	O
)	O
;	O
move_down	function
(	O
panel	pointer
)	O
;	O
g_free	function
(	O
new_dir	pointer
)	O
;	O
}	O
}	O
typedef	O
void	O
(	O
*	O
panel_key_callback	pointer
)	O
(	O
WPanel	struct
*	O
)	O
;	O
typedef	O
struct	O
{	O
int	O
key_code	int
;	O
panel_key_callback	pointer
fn	pointer
;	O
}	O
panel_key_map	struct
;	O
static	O
void	O
cmd_do_enter	function
(	O
WPanel	struct
*	O
wp	pointer
)	O
{	O
(	O
void	O
)	O
do_enter	function
(	O
wp	pointer
)	O
;	O
}	O
static	O
void	O
cmd_view_simple	function
(	O
WPanel	struct
*	O
wp	pointer
)	O
{	O
view_simple_cmd	function
(	O
)	O
;	O
}	O
static	O
void	O
cmd_edit_new	function
(	O
WPanel	struct
*	O
wp	pointer
)	O
{	O
edit_cmd_new	function
(	O
)	O
;	O
}	O
static	O
void	O
cmd_copy_local	function
(	O
WPanel	struct
*	O
wp	pointer
)	O
{	O
copy_cmd_local	function
(	O
)	O
;	O
}	O
static	O
void	O
cmd_rename_local	function
(	O
WPanel	struct
*	O
wp	pointer
)	O
{	O
ren_cmd_local	function
(	O
)	O
;	O
}	O
static	O
void	O
cmd_delete_local	function
(	O
WPanel	struct
*	O
wp	pointer
)	O
{	O
delete_cmd_local	function
(	O
)	O
;	O
}	O
static	O
void	O
cmd_select	function
(	O
WPanel	struct
*	O
wp	pointer
)	O
{	O
select_cmd	function
(	O
)	O
;	O
}	O
static	O
void	O
cmd_unselect	function
(	O
WPanel	struct
*	O
wp	pointer
)	O
{	O
unselect_cmd	function
(	O
)	O
;	O
}	O
static	O
void	O
cmd_reverse_selection	function
(	O
WPanel	struct
*	O
wp	pointer
)	O
{	O
reverse_selection_cmd	function
(	O
)	O
;	O
}	O
static	O
const	O
panel_key_map	struct
panel_keymap	array
[	O
]	O
=	O
{	O
{	O
KEY_DOWN	int
,	O
move_down	function
}	O
,	O
{	O
KEY_UP	int
,	O
move_up	function
}	O
,	O
{	O
'\n'	O
,	O
cmd_do_enter	function
}	O
,	O
{	O
KEY_ENTER	int
,	O
cmd_do_enter	function
}	O
,	O
{	O
KEY_IC	int
,	O
mark_file	function
}	O
,	O
{	O
KEY_HOME	int
,	O
move_home	function
}	O
,	O
{	O
KEY_A1	int
,	O
move_home	function
}	O
,	O
{	O
ALT	O
(	O
'<'	O
)	O
,	O
move_home	function
}	O
,	O
{	O
KEY_C1	int
,	O
move_end	function
}	O
,	O
{	O
KEY_END	int
,	O
move_end	function
}	O
,	O
{	O
ALT	O
(	O
'>'	O
)	O
,	O
move_end	function
}	O
,	O
{	O
KEY_NPAGE	int
,	O
next_page	function
}	O
,	O
{	O
KEY_PPAGE	int
,	O
prev_page	function
}	O
,	O
{	O
KEY_NPAGE	int
|	O
KEY_M_CTRL	int
,	O
ctrl_next_page	function
}	O
,	O
{	O
KEY_PPAGE	int
|	O
KEY_M_CTRL	int
,	O
ctrl_prev_page	function
}	O
,	O
{	O
ALT	O
(	O
'g'	O
)	O
,	O
goto_top_file	function
}	O
,	O
{	O
ALT	O
(	O
'r'	O
)	O
,	O
goto_middle_file	function
}	O
,	O
{	O
ALT	O
(	O
'j'	O
)	O
,	O
goto_bottom_file	function
}	O
,	O
{	O
XCTRL	O
(	O
'v'	O
)	O
,	O
next_page	function
}	O
,	O
{	O
ALT	O
(	O
'v'	O
)	O
,	O
prev_page	function
}	O
,	O
{	O
XCTRL	O
(	O
'p'	O
)	O
,	O
move_up	function
}	O
,	O
{	O
XCTRL	O
(	O
'n'	O
)	O
,	O
move_down	function
}	O
,	O
{	O
XCTRL	O
(	O
's'	O
)	O
,	O
start_search	function
}	O
,	O
{	O
ALT	O
(	O
's'	O
)	O
,	O
start_search	function
}	O
,	O
{	O
XCTRL	O
(	O
't'	O
)	O
,	O
mark_file	function
}	O
,	O
{	O
ALT	O
(	O
'o'	O
)	O
,	O
chdir_other_panel	function
}	O
,	O
{	O
ALT	O
(	O
'i'	O
)	O
,	O
sync_other_panel	function
}	O
,	O
{	O
ALT	O
(	O
'l'	O
)	O
,	O
chdir_to_readlink	function
}	O
,	O
{	O
ALT	O
(	O
'H'	O
)	O
,	O
directory_history_list	function
}	O
,	O
{	O
KEY_F	O
(	O
13	int
)	O
,	O
cmd_view_simple	function
}	O
,	O
{	O
KEY_F	O
(	O
14	int
)	O
,	O
cmd_edit_new	function
}	O
,	O
{	O
KEY_F	O
(	O
15	int
)	O
,	O
cmd_copy_local	function
}	O
,	O
{	O
KEY_F	O
(	O
16	int
)	O
,	O
cmd_rename_local	function
}	O
,	O
{	O
KEY_F	O
(	O
18	int
)	O
,	O
cmd_delete_local	function
}	O
,	O
{	O
ALT	O
(	O
'y'	O
)	O
,	O
directory_history_prev	function
}	O
,	O
{	O
ALT	O
(	O
'u'	O
)	O
,	O
directory_history_next	function
}	O
,	O
{	O
ALT	O
(	O
'+'	O
)	O
,	O
cmd_select	function
}	O
,	O
{	O
KEY_KP_ADD	int
,	O
cmd_select	function
}	O
,	O
{	O
ALT	O
(	O
'\\'	O
)	O
,	O
cmd_unselect	function
}	O
,	O
{	O
ALT	O
(	O
'-'	O
)	O
,	O
cmd_unselect	function
}	O
,	O
{	O
KEY_KP_SUBTRACT	int
,	O
cmd_unselect	function
}	O
,	O
{	O
ALT	O
(	O
'*'	O
)	O
,	O
cmd_reverse_selection	function
}	O
,	O
{	O
KEY_KP_MULTIPLY	int
,	O
cmd_reverse_selection	function
}	O
,	O
{	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
inline	O
cb_ret_t	enum
panel_key	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
key	pointer
)	O
{	O
int	O
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
panel_keymap	array
[	O
i	array
]	O
.	O
key_code	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
key	pointer
==	O
panel_keymap	array
[	O
i	array
]	O
.	O
key_code	int
)	O
{	O
int	O
old_searching	int
=	O
panel	pointer
->	O
searching	int
;	O
if	O
(	O
panel_keymap	array
[	O
i	array
]	O
.	O
fn	pointer
!=	O
start_search	function
)	O
panel	pointer
->	O
searching	int
=	O
0	int
;	O
(	O
*	O
panel_keymap	array
[	O
i	array
]	O
.	O
fn	pointer
)	O
(	O
panel	pointer
)	O
;	O
if	O
(	O
panel	pointer
->	O
searching	int
!=	O
old_searching	int
)	O
display_mini_info	function
(	O
panel	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
}	O
if	O
(	O
torben_fj_mode	int
&&	O
key	pointer
==	O
ALT	O
(	O
'h'	O
)	O
)	O
{	O
goto_middle_file	function
(	O
panel	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
if	O
(	O
key	pointer
==	O
KEY_LEFT	int
)	O
return	O
move_left	function
(	O
panel	pointer
,	O
key	pointer
)	O
;	O
if	O
(	O
key	pointer
==	O
KEY_RIGHT	int
)	O
return	O
move_right	function
(	O
panel	pointer
,	O
key	pointer
)	O
;	O
if	O
(	O
is_abort_char	function
(	O
key	pointer
)	O
)	O
{	O
panel	pointer
->	O
searching	int
=	O
0	int
;	O
display_mini_info	function
(	O
panel	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
if	O
(	O
(	O
key	pointer
>=	O
' '	O
&&	O
key	pointer
<=	O
255	int
)	O
||	O
key	pointer
==	O
KEY_BACKSPACE	int
)	O
{	O
if	O
(	O
panel	pointer
->	O
searching	int
)	O
{	O
do_search	function
(	O
panel	pointer
,	O
key	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
if	O
(	O
!	O
command_prompt	int
)	O
{	O
start_search	function
(	O
panel	pointer
)	O
;	O
do_search	function
(	O
panel	pointer
,	O
key	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
}	O
return	O
MSG_NOT_HANDLED	int
;	O
}	O
static	O
cb_ret_t	enum
panel_callback	function
(	O
Widget	struct
*	O
w	pointer
,	O
widget_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
WPanel	struct
*	O
panel	pointer
=	O
(	O
WPanel	struct
*	O
)	O
w	pointer
;	O
Dlg_head	struct
*	O
h	pointer
=	O
panel	pointer
->	O
widget	pointer
.	O
parent	pointer
;	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
WIDGET_DRAW	int
:	O
paint_panel	function
(	O
panel	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
WIDGET_FOCUS	int
:	O
current_panel	pointer
=	O
panel	pointer
;	O
panel	pointer
->	O
active	int
=	O
1	int
;	O
if	O
(	O
mc_chdir	function
(	O
panel	pointer
->	O
cwd	short
)	O
!=	O
0	int
)	O
{	O
char	O
*	O
cwd	short
=	O
strip_password	function
(	O
g_strdup	function
(	O
panel	pointer
->	O
cwd	short
)	O
,	O
1	int
)	O
;	O
message	pointer
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
" Cannot chdir to \"%s\" \n %s "	pointer
)	O
,	O
cwd	short
,	O
unix_error_string	function
(	O
errno	O
)	O
)	O
;	O
g_free	function
(	O
cwd	short
)	O
;	O
}	O
else	O
subshell_chdir	function
(	O
panel	pointer
->	O
cwd	short
)	O
;	O
update_xterm_title_path	function
(	O
)	O
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
show_dir	function
(	O
panel	pointer
)	O
;	O
paint_dir	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
dirty	int
=	O
0	int
;	O
buttonbar_set_label	function
(	O
h	pointer
,	O
1	int
,	O
_	O
(	O
"Help"	pointer
)	O
,	O
help_cmd	function
)	O
;	O
buttonbar_set_label	function
(	O
h	pointer
,	O
2	int
,	O
_	O
(	O
"Menu"	pointer
)	O
,	O
user_file_menu_cmd	function
)	O
;	O
buttonbar_set_label	function
(	O
h	pointer
,	O
3	int
,	O
_	O
(	O
"View"	pointer
)	O
,	O
view_cmd	function
)	O
;	O
buttonbar_set_label	function
(	O
h	pointer
,	O
4	int
,	O
_	O
(	O
"Edit"	pointer
)	O
,	O
edit_cmd	function
)	O
;	O
buttonbar_set_label	function
(	O
h	pointer
,	O
5	int
,	O
_	O
(	O
"Copy"	pointer
)	O
,	O
copy_cmd	function
)	O
;	O
buttonbar_set_label	function
(	O
h	pointer
,	O
6	int
,	O
_	O
(	O
"RenMov"	pointer
)	O
,	O
ren_cmd	function
)	O
;	O
buttonbar_set_label	function
(	O
h	pointer
,	O
7	int
,	O
_	O
(	O
"Mkdir"	pointer
)	O
,	O
mkdir_cmd	function
)	O
;	O
buttonbar_set_label	function
(	O
h	pointer
,	O
8	int
,	O
_	O
(	O
"Delete"	pointer
)	O
,	O
delete_cmd	function
)	O
;	O
buttonbar_redraw	function
(	O
h	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
WIDGET_UNFOCUS	int
:	O
if	O
(	O
panel	pointer
->	O
searching	int
)	O
{	O
panel	pointer
->	O
searching	int
=	O
0	int
;	O
display_mini_info	function
(	O
panel	pointer
)	O
;	O
}	O
panel	pointer
->	O
active	int
=	O
0	int
;	O
show_dir	function
(	O
panel	pointer
)	O
;	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
case	O
WIDGET_KEY	int
:	O
return	O
panel_key	function
(	O
panel	pointer
,	O
parm	int
)	O
;	O
case	O
WIDGET_DESTROY	int
:	O
panel_destroy	function
(	O
panel	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
default	O
:	O
return	O
default_proc	function
(	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
void	O
file_mark	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
index	function
,	O
int	O
val	int
)	O
{	O
if	O
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
index	function
]	O
.	O
f	float
.	O
marked	int
!=	O
val	int
)	O
{	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
index	function
]	O
.	O
f	float
.	O
marked	int
=	O
val	int
;	O
panel	pointer
->	O
dirty	int
=	O
1	int
;	O
}	O
}	O
static	O
int	O
mouse_marking	int
=	O
0	int
;	O
static	O
void	O
mouse_toggle_mark	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
do_mark_file	function
(	O
panel	pointer
,	O
0	int
)	O
;	O
mouse_marking	int
=	O
selection	O
(	O
panel	pointer
)	O
->	O
f	float
.	O
marked	int
;	O
}	O
static	O
void	O
mouse_set_mark	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
if	O
(	O
mouse_marking	int
&&	O
!	O
(	O
selection	O
(	O
panel	pointer
)	O
->	O
f	float
.	O
marked	int
)	O
)	O
do_mark_file	function
(	O
panel	pointer
,	O
0	int
)	O
;	O
else	O
if	O
(	O
!	O
mouse_marking	int
&&	O
(	O
selection	O
(	O
panel	pointer
)	O
->	O
f	float
.	O
marked	int
)	O
)	O
do_mark_file	function
(	O
panel	pointer
,	O
0	int
)	O
;	O
}	O
static	O
inline	O
int	O
mark_if_marking	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
Gpm_Event	struct
*	O
event	pointer
)	O
{	O
if	O
(	O
event	pointer
->	O
buttons	int
&	O
GPM_B_RIGHT	O
)	O
{	O
if	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DOWN	int
)	O
mouse_toggle_mark	function
(	O
panel	pointer
)	O
;	O
else	O
mouse_set_mark	function
(	O
panel	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
do_panel_event	function
(	O
Gpm_Event	struct
*	O
event	pointer
,	O
WPanel	struct
*	O
panel	pointer
,	O
int	O
*	O
redir	pointer
)	O
{	O
const	O
int	O
lines	pointer
=	O
llines	O
(	O
panel	pointer
)	O
;	O
int	O
my_index	int
;	O
if	O
(	O
(	O
event	pointer
->	O
buttons	int
&	O
GPM_B_UP	O
)	O
&&	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DOWN	int
)	O
)	O
{	O
prev_page	function
(	O
panel	pointer
)	O
;	O
return	O
MOU_NORMAL	int
;	O
}	O
if	O
(	O
(	O
event	pointer
->	O
buttons	int
&	O
GPM_B_DOWN	O
)	O
&&	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DOWN	int
)	O
)	O
{	O
next_page	function
(	O
panel	pointer
)	O
;	O
return	O
MOU_NORMAL	int
;	O
}	O
if	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DOWN	int
&&	O
event	pointer
->	O
x	array
==	O
2	int
&&	O
event	pointer
->	O
y	short
==	O
1	int
)	O
{	O
directory_history_prev	function
(	O
panel	pointer
)	O
;	O
return	O
MOU_NORMAL	int
;	O
}	O
if	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DOWN	int
&&	O
event	pointer
->	O
x	array
==	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
1	int
&&	O
event	pointer
->	O
y	short
==	O
1	int
)	O
{	O
directory_history_next	function
(	O
panel	pointer
)	O
;	O
return	O
MOU_NORMAL	int
;	O
}	O
if	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DOWN	int
&&	O
event	pointer
->	O
x	array
==	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
&&	O
event	pointer
->	O
y	short
==	O
1	int
)	O
{	O
directory_history_list	function
(	O
panel	pointer
)	O
;	O
return	O
MOU_NORMAL	int
;	O
}	O
if	O
(	O
event	pointer
->	O
type	enum
&	O
GPM_DOWN	int
&&	O
event	pointer
->	O
y	short
==	O
1	int
&&	O
!	O
menubar_visible	int
)	O
{	O
*	O
redir	pointer
=	O
1	int
;	O
event	pointer
->	O
x	array
+=	O
panel	pointer
->	O
widget	pointer
.	O
x	array
;	O
return	O
(	O
*	O
(	O
the_menubar	pointer
->	O
widget	pointer
.	O
mouse	pointer
)	O
)	O
(	O
event	pointer
,	O
the_menubar	pointer
)	O
;	O
}	O
event	pointer
->	O
y	short
-=	O
2	int
;	O
if	O
(	O
(	O
event	pointer
->	O
type	enum
&	O
(	O
GPM_DOWN	int
|	O
GPM_DRAG	int
)	O
)	O
)	O
{	O
if	O
(	O
!	O
dlg_widget_active	function
(	O
panel	pointer
)	O
)	O
change_panel	function
(	O
)	O
;	O
if	O
(	O
event	pointer
->	O
y	short
<=	O
0	int
)	O
{	O
mark_if_marking	function
(	O
panel	pointer
,	O
event	pointer
)	O
;	O
if	O
(	O
mouse_move_pages	int
)	O
prev_page	function
(	O
panel	pointer
)	O
;	O
else	O
move_up	function
(	O
panel	pointer
)	O
;	O
return	O
MOU_REPEAT	int
;	O
}	O
if	O
(	O
!	O
(	O
(	O
panel	pointer
->	O
top_file	int
+	O
event	pointer
->	O
y	short
<=	O
panel	pointer
->	O
count	int
)	O
&&	O
event	pointer
->	O
y	short
<=	O
lines	pointer
)	O
)	O
{	O
mark_if_marking	function
(	O
panel	pointer
,	O
event	pointer
)	O
;	O
if	O
(	O
mouse_move_pages	int
)	O
next_page	function
(	O
panel	pointer
)	O
;	O
else	O
move_down	function
(	O
panel	pointer
)	O
;	O
return	O
MOU_REPEAT	int
;	O
}	O
my_index	int
=	O
panel	pointer
->	O
top_file	int
+	O
event	pointer
->	O
y	short
-	O
1	int
;	O
if	O
(	O
panel	pointer
->	O
split	int
)	O
{	O
if	O
(	O
event	pointer
->	O
x	array
>	O
(	O
(	O
panel	pointer
->	O
widget	pointer
.	O
cols	int
-	O
2	int
)	O
/	O
2	int
)	O
)	O
my_index	int
+=	O
llines	O
(	O
panel	pointer
)	O
;	O
}	O
if	O
(	O
my_index	int
>=	O
panel	pointer
->	O
count	int
)	O
my_index	int
=	O
panel	pointer
->	O
count	int
-	O
1	int
;	O
if	O
(	O
my_index	int
!=	O
panel	pointer
->	O
selected	int
)	O
{	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
selected	int
=	O
my_index	int
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
}	O
mark_if_marking	function
(	O
panel	pointer
,	O
event	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
event	pointer
->	O
type	enum
&	O
(	O
GPM_UP	int
|	O
GPM_DOUBLE	int
)	O
)	O
==	O
(	O
GPM_UP	int
|	O
GPM_DOUBLE	int
)	O
)	O
{	O
if	O
(	O
event	pointer
->	O
y	short
>	O
0	int
&&	O
event	pointer
->	O
y	short
<=	O
lines	pointer
)	O
do_enter	function
(	O
panel	pointer
)	O
;	O
}	O
return	O
MOU_NORMAL	int
;	O
}	O
static	O
int	O
panel_event	function
(	O
Gpm_Event	struct
*	O
event	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
WPanel	struct
*	O
panel	pointer
=	O
data	pointer
;	O
int	O
ret	int
;	O
int	O
redir	pointer
=	O
0	int
;	O
ret	int
=	O
do_panel_event	function
(	O
event	pointer
,	O
panel	pointer
,	O
&	O
redir	pointer
)	O
;	O
if	O
(	O
!	O
redir	pointer
)	O
panel_update_contents	function
(	O
panel	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
void	O
panel_re_sort	function
(	O
WPanel	struct
*	O
panel	pointer
)	O
{	O
char	O
*	O
filename	pointer
;	O
int	O
i	array
;	O
if	O
(	O
panel	pointer
==	O
NULL	O
)	O
return	O
;	O
filename	pointer
=	O
g_strdup	function
(	O
selection	O
(	O
panel	pointer
)	O
->	O
fname	pointer
)	O
;	O
unselect_item	function
(	O
panel	pointer
)	O
;	O
do_sort	function
(	O
&	O
panel	pointer
->	O
dir	pointer
,	O
panel	pointer
->	O
sort_type	pointer
,	O
panel	pointer
->	O
count	int
-	O
1	int
,	O
panel	pointer
->	O
reverse	int
,	O
panel	pointer
->	O
case_sensitive	int
)	O
;	O
panel	pointer
->	O
selected	int
=	O
-	O
1	int
;	O
for	O
(	O
i	array
=	O
panel	pointer
->	O
count	int
;	O
i	array
;	O
i	array
--	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
i	array
-	O
1	int
]	O
.	O
fname	pointer
,	O
filename	pointer
)	O
)	O
{	O
panel	pointer
->	O
selected	int
=	O
i	array
-	O
1	int
;	O
break	O
;	O
}	O
}	O
g_free	function
(	O
filename	pointer
)	O
;	O
panel	pointer
->	O
top_file	int
=	O
panel	pointer
->	O
selected	int
-	O
ITEMS	function
(	O
panel	pointer
)	O
/	O
2	int
;	O
if	O
(	O
panel	pointer
->	O
top_file	int
<	O
0	int
)	O
panel	pointer
->	O
top_file	int
=	O
0	int
;	O
select_item	function
(	O
panel	pointer
)	O
;	O
panel	pointer
->	O
dirty	int
=	O
1	int
;	O
}	O
void	O
panel_set_sort_order	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
sortfn	function
*	O
sort_order	pointer
)	O
{	O
if	O
(	O
sort_order	pointer
==	O
0	int
)	O
return	O
;	O
panel	pointer
->	O
sort_type	pointer
=	O
sort_order	pointer
;	O
if	O
(	O
sort_order	pointer
==	O
(	O
sortfn	function
*	O
)	O
unsorted	function
)	O
{	O
char	O
*	O
current_file	pointer
;	O
current_file	pointer
=	O
g_strdup	function
(	O
panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
panel	pointer
->	O
selected	int
]	O
.	O
fname	pointer
)	O
;	O
panel_reload	function
(	O
panel	pointer
)	O
;	O
try_to_select	function
(	O
panel	pointer
,	O
current_file	pointer
)	O
;	O
g_free	function
(	O
current_file	pointer
)	O
;	O
}	O
panel_re_sort	function
(	O
panel	pointer
)	O
;	O
}	O
