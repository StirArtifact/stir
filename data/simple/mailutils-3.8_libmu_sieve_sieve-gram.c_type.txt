mu_sieve_machine_t	pointer
mu_sieve_machine	struct
;	O
int	O
mu_sieve_error_count	int
;	O
static	O
struct	O
mu_sieve_node	struct
*	O
sieve_tree	pointer
;	O
static	O
struct	O
mu_sieve_node	struct
*	O
node_alloc	function
(	O
enum	O
mu_sieve_node_type	enum
,	O
struct	O
mu_locus_range	struct
*	O
)	O
;	O
static	O
void	O
node_list_add	function
(	O
struct	O
mu_sieve_node_list	struct
*	O
list	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
;	O
extern	O
int	O
mu_sieve_yydebug	int
;	O
enum	O
yytokentype	enum
{	O
IDENT	int
=	O
258	int
,	O
TAG	int
=	O
259	int
,	O
NUMBER	int
=	O
260	int
,	O
STRING	int
=	O
261	int
,	O
MULTILINE	int
=	O
262	int
,	O
REQUIRE	int
=	O
263	int
,	O
IF	int
=	O
264	int
,	O
ELSIF	int
=	O
265	int
,	O
ELSE	int
=	O
266	int
,	O
ANYOF	int
=	O
267	int
,	O
ALLOF	int
=	O
268	int
,	O
NOT	int
=	O
269	int
,	O
FALSE	int
=	O
270	int
,	O
TRUE	int
=	O
271	int
}	O
;	O
typedef	O
union	O
YYSTYPE	union
{	O
char	O
*	O
string	pointer
;	O
size_t	long
number	long
;	O
size_t	long
idx	long
;	O
struct	O
mu_sieve_slice	struct
slice	pointer
;	O
struct	O
{	O
char	O
*	O
ident	pointer
;	O
struct	O
mu_locus_range	struct
idloc	struct
;	O
size_t	long
first	pointer
;	O
size_t	long
count	long
;	O
}	O
command	pointer
;	O
struct	O
mu_sieve_node_list	struct
node_list	struct
;	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
;	O
}	O
YYSTYPE	union
;	O
extern	O
YYSTYPE	union
mu_sieve_yylval	union
;	O
extern	O
YYLTYPE	O
mu_sieve_yylloc	struct
;	O
int	O
mu_sieve_yyparse	function
(	O
void	O
)	O
;	O
typedef	O
unsigned	O
char	O
yytype_uint8	char
;	O
typedef	O
signed	O
char	O
yytype_int8	char
;	O
typedef	O
unsigned	O
short	O
int	O
yytype_uint16	short
;	O
typedef	O
short	O
int	O
yytype_int16	short
;	O
union	O
mu_sieve_yyalloc	union
{	O
yytype_int16	short
yyss_alloc	short
;	O
YYSTYPE	union
yyvs_alloc	union
;	O
YYLTYPE	O
yyls_alloc	struct
;	O
}	O
;	O
static	O
const	O
yytype_uint8	char
yytranslate	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
21	int
,	O
22	int
,	O
2	int
,	O
2	int
,	O
20	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
17	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
23	int
,	O
2	int
,	O
24	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
18	int
,	O
2	int
,	O
19	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yyprhs	array
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
3	int
,	O
4	int
,	O
6	int
,	O
8	int
,	O
11	int
,	O
15	int
,	O
18	int
,	O
23	int
,	O
25	int
,	O
29	int
,	O
30	int
,	O
32	int
,	O
36	int
,	O
41	int
,	O
45	int
,	O
47	int
,	O
51	int
,	O
53	int
,	O
58	int
,	O
63	int
,	O
66	int
,	O
68	int
,	O
70	int
,	O
72	int
,	O
75	int
,	O
77	int
,	O
78	int
,	O
80	int
,	O
82	int
,	O
85	int
,	O
87	int
,	O
89	int
,	O
91	int
,	O
93	int
,	O
95	int
,	O
97	int
,	O
99	int
,	O
103	int
,	O
105	int
}	O
;	O
static	O
const	O
yytype_int8	char
yyrhs	array
[	O
]	O
=	O
{	O
26	int
,	O
0	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
27	int
,	O
-	O
1	int
,	O
28	int
,	O
-	O
1	int
,	O
27	int
,	O
28	int
,	O
-	O
1	int
,	O
8	int
,	O
41	int
,	O
17	int
,	O
-	O
1	int
,	O
37	int
,	O
17	int
,	O
-	O
1	int
,	O
9	int
,	O
34	int
,	O
32	int
,	O
29	int
,	O
-	O
1	int
,	O
30	int
,	O
-	O
1	int
,	O
30	int
,	O
11	int
,	O
32	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
31	int
,	O
-	O
1	int
,	O
10	int
,	O
34	int
,	O
32	int
,	O
-	O
1	int
,	O
31	int
,	O
10	int
,	O
34	int
,	O
32	int
,	O
-	O
1	int
,	O
18	int
,	O
27	int
,	O
19	int
,	O
-	O
1	int
,	O
34	int
,	O
-	O
1	int
,	O
33	int
,	O
20	int
,	O
34	int
,	O
-	O
1	int
,	O
35	int
,	O
-	O
1	int
,	O
12	int
,	O
21	int
,	O
33	int
,	O
22	int
,	O
-	O
1	int
,	O
13	int
,	O
21	int
,	O
33	int
,	O
22	int
,	O
-	O
1	int
,	O
14	int
,	O
34	int
,	O
-	O
1	int
,	O
36	int
,	O
-	O
1	int
,	O
16	int
,	O
-	O
1	int
,	O
15	int
,	O
-	O
1	int
,	O
3	int
,	O
38	int
,	O
-	O
1	int
,	O
36	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
39	int
,	O
-	O
1	int
,	O
40	int
,	O
-	O
1	int
,	O
39	int
,	O
40	int
,	O
-	O
1	int
,	O
42	int
,	O
-	O
1	int
,	O
6	int
,	O
-	O
1	int
,	O
7	int
,	O
-	O
1	int
,	O
5	int
,	O
-	O
1	int
,	O
4	int
,	O
-	O
1	int
,	O
6	int
,	O
-	O
1	int
,	O
42	int
,	O
-	O
1	int
,	O
23	int
,	O
43	int
,	O
24	int
,	O
-	O
1	int
,	O
6	int
,	O
-	O
1	int
,	O
43	int
,	O
20	int
,	O
6	int
,	O
-	O
1	int
}	O
;	O
static	O
const	O
yytype_uint16	short
yyrline	array
[	O
]	O
=	O
{	O
0	int
,	O
74	int
,	O
74	int
,	O
77	int
,	O
88	int
,	O
92	int
,	O
99	int
,	O
107	int
,	O
109	int
,	O
118	int
,	O
122	int
,	O
135	int
,	O
138	int
,	O
143	int
,	O
152	int
,	O
167	int
,	O
173	int
,	O
177	int
,	O
186	int
,	O
187	int
,	O
192	int
,	O
197	int
,	O
204	int
,	O
234	int
,	O
238	int
,	O
244	int
,	O
253	int
,	O
286	int
,	O
290	int
,	O
293	int
,	O
298	int
,	O
305	int
,	O
310	int
,	O
315	int
,	O
320	int
,	O
325	int
,	O
332	int
,	O
337	int
,	O
340	int
,	O
346	int
,	O
351	int
}	O
;	O
static	O
const	O
char	O
*	O
const	O
yytname	array
[	O
]	O
=	O
{	O
"$end"	pointer
,	O
"error"	pointer
,	O
"$undefined"	pointer
,	O
"IDENT"	pointer
,	O
"TAG"	pointer
,	O
"NUMBER"	pointer
,	O
"STRING"	pointer
,	O
"MULTILINE"	pointer
,	O
"REQUIRE"	pointer
,	O
"IF"	pointer
,	O
"ELSIF"	pointer
,	O
"ELSE"	pointer
,	O
"ANYOF"	pointer
,	O
"ALLOF"	pointer
,	O
"NOT"	pointer
,	O
"FALSE"	pointer
,	O
"TRUE"	pointer
,	O
"';'"	pointer
,	O
"'{'"	pointer
,	O
"'}'"	pointer
,	O
"','"	pointer
,	O
"'('"	pointer
,	O
"')'"	pointer
,	O
"'['"	pointer
,	O
"']'"	pointer
,	O
"$accept"	pointer
,	O
"input"	pointer
,	O
"list"	pointer
,	O
"statement"	pointer
,	O
"else_part"	pointer
,	O
"maybe_elsif"	pointer
,	O
"elsif_branch"	pointer
,	O
"block"	pointer
,	O
"testlist"	pointer
,	O
"cond"	pointer
,	O
"test"	pointer
,	O
"command"	pointer
,	O
"action"	pointer
,	O
"maybe_arglist"	pointer
,	O
"arglist"	pointer
,	O
"arg"	pointer
,	O
"stringorlist"	pointer
,	O
"stringlist"	pointer
,	O
"slist"	pointer
,	O
YY_NULL	int
}	O
;	O
static	O
const	O
yytype_uint8	char
mu_sieve_yyr1	array
[	O
]	O
=	O
{	O
0	int
,	O
25	int
,	O
26	int
,	O
26	int
,	O
27	int
,	O
27	int
,	O
28	int
,	O
28	int
,	O
28	int
,	O
29	int
,	O
29	int
,	O
30	int
,	O
30	int
,	O
31	int
,	O
31	int
,	O
32	int
,	O
33	int
,	O
33	int
,	O
34	int
,	O
34	int
,	O
34	int
,	O
34	int
,	O
35	int
,	O
35	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
38	int
,	O
39	int
,	O
39	int
,	O
40	int
,	O
40	int
,	O
40	int
,	O
40	int
,	O
40	int
,	O
41	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
43	int
}	O
;	O
static	O
const	O
yytype_uint8	char
mu_sieve_yyr2	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
2	int
,	O
4	int
,	O
1	int
,	O
3	int
,	O
0	int
,	O
1	int
,	O
3	int
,	O
4	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
4	int
,	O
4	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
3	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yydefact	array
[	O
]	O
=	O
{	O
2	int
,	O
27	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
3	int
,	O
4	int
,	O
26	int
,	O
0	int
,	O
35	int
,	O
34	int
,	O
32	int
,	O
33	int
,	O
0	int
,	O
25	int
,	O
28	int
,	O
29	int
,	O
31	int
,	O
36	int
,	O
0	int
,	O
37	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
24	int
,	O
23	int
,	O
0	int
,	O
18	int
,	O
22	int
,	O
1	int
,	O
5	int
,	O
7	int
,	O
39	int
,	O
0	int
,	O
30	int
,	O
6	int
,	O
0	int
,	O
0	int
,	O
21	int
,	O
0	int
,	O
11	int
,	O
0	int
,	O
38	int
,	O
0	int
,	O
16	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
8	int
,	O
9	int
,	O
12	int
,	O
40	int
,	O
0	int
,	O
19	int
,	O
20	int
,	O
15	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
17	int
,	O
13	int
,	O
10	int
,	O
0	int
,	O
14	int
}	O
;	O
static	O
const	O
yytype_int8	char
yydefgoto	array
[	O
]	O
=	O
{	O
-	O
1	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
48	int
,	O
49	int
,	O
50	int
,	O
40	int
,	O
43	int
,	O
44	int
,	O
27	int
,	O
28	int
,	O
8	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
19	int
,	O
17	int
,	O
33	int
}	O
;	O
static	O
const	O
yytype_int8	char
mu_sieve_yypact	array
[	O
]	O
=	O
{	O
25	int
,	O
3	int
,	O
-	O
4	int
,	O
9	int
,	O
31	int
,	O
25	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
15	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
30	int
,	O
-	O
28	int
,	O
3	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
20	int
,	O
-	O
28	int
,	O
17	int
,	O
18	int
,	O
9	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
23	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
6	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
9	int
,	O
9	int
,	O
-	O
28	int
,	O
25	int
,	O
32	int
,	O
37	int
,	O
-	O
28	int
,	O
-	O
17	int
,	O
-	O
28	int
,	O
-	O
7	int
,	O
8	int
,	O
9	int
,	O
-	O
28	int
,	O
35	int
,	O
38	int
,	O
-	O
28	int
,	O
9	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
23	int
,	O
23	int
,	O
9	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
23	int
,	O
-	O
28	int
}	O
;	O
static	O
const	O
yytype_int8	char
yypgoto	array
[	O
]	O
=	O
{	O
-	O
28	int
,	O
-	O
28	int
,	O
11	int
,	O
-	O
1	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
27	int
,	O
14	int
,	O
-	O
3	int
,	O
-	O
28	int
,	O
1	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
-	O
28	int
,	O
39	int
,	O
-	O
28	int
,	O
50	int
,	O
-	O
28	int
}	O
;	O
static	O
const	O
yytype_uint8	char
mu_sieve_yytable	array
[	O
]	O
=	O
{	O
26	int
,	O
7	int
,	O
18	int
,	O
52	int
,	O
30	int
,	O
53	int
,	O
7	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
1	int
,	O
1	int
,	O
52	int
,	O
41	int
,	O
54	int
,	O
2	int
,	O
3	int
,	O
42	int
,	O
13	int
,	O
38	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
13	int
,	O
55	int
,	O
1	int
,	O
60	int
,	O
61	int
,	O
29	int
,	O
31	int
,	O
2	int
,	O
3	int
,	O
63	int
,	O
32	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
7	int
,	O
39	int
,	O
47	int
,	O
51	int
,	O
56	int
,	O
30	int
,	O
57	int
,	O
7	int
,	O
58	int
,	O
59	int
,	O
46	int
,	O
45	int
,	O
20	int
,	O
0	int
,	O
34	int
,	O
62	int
}	O
;	O
static	O
const	O
yytype_int8	char
mu_sieve_yycheck	array
[	O
]	O
=	O
{	O
3	int
,	O
0	int
,	O
6	int
,	O
20	int
,	O
5	int
,	O
22	int
,	O
5	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
3	int
,	O
3	int
,	O
20	int
,	O
20	int
,	O
22	int
,	O
8	int
,	O
9	int
,	O
24	int
,	O
23	int
,	O
23	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
23	int
,	O
19	int
,	O
3	int
,	O
56	int
,	O
57	int
,	O
0	int
,	O
17	int
,	O
8	int
,	O
9	int
,	O
62	int
,	O
6	int
,	O
17	int
,	O
21	int
,	O
21	int
,	O
39	int
,	O
18	int
,	O
10	int
,	O
6	int
,	O
47	int
,	O
46	int
,	O
11	int
,	O
46	int
,	O
10	int
,	O
52	int
,	O
39	int
,	O
37	int
,	O
2	int
,	O
-	O
1	int
,	O
15	int
,	O
58	int
}	O
;	O
static	O
const	O
yytype_uint8	char
yystos	array
[	O
]	O
=	O
{	O
0	int
,	O
3	int
,	O
8	int
,	O
9	int
,	O
26	int
,	O
27	int
,	O
28	int
,	O
36	int
,	O
37	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
23	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
42	int
,	O
6	int
,	O
41	int
,	O
42	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
0	int
,	O
28	int
,	O
17	int
,	O
6	int
,	O
43	int
,	O
40	int
,	O
17	int
,	O
21	int
,	O
21	int
,	O
34	int
,	O
18	int
,	O
32	int
,	O
20	int
,	O
24	int
,	O
33	int
,	O
34	int
,	O
33	int
,	O
27	int
,	O
10	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
6	int
,	O
20	int
,	O
22	int
,	O
22	int
,	O
19	int
,	O
34	int
,	O
11	int
,	O
10	int
,	O
34	int
,	O
32	int
,	O
32	int
,	O
34	int
,	O
32	int
}	O
;	O
static	O
void	O
yy_symbol_value_print	function
(	O
FILE	struct
*	O
yyoutput	pointer
,	O
int	O
yytype	int
,	O
YYSTYPE	union
const	O
*	O
const	O
yyvaluep	pointer
,	O
YYLTYPE	O
const	O
*	O
const	O
yylocationp	pointer
)	O
{	O
FILE	struct
*	O
yyo	pointer
=	O
yyoutput	pointer
;	O
YYUSE	O
(	O
yyo	pointer
)	O
;	O
if	O
(	O
!	O
yyvaluep	pointer
)	O
return	O
;	O
YYUSE	O
(	O
yylocationp	pointer
)	O
;	O
YYUSE	O
(	O
yyoutput	pointer
)	O
;	O
switch	O
(	O
yytype	int
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
yy_symbol_print	function
(	O
FILE	struct
*	O
yyoutput	pointer
,	O
int	O
yytype	int
,	O
YYSTYPE	union
const	O
*	O
const	O
yyvaluep	pointer
,	O
YYLTYPE	O
const	O
*	O
const	O
yylocationp	pointer
)	O
{	O
if	O
(	O
yytype	int
<	O
YYNTOKENS	int
)	O
YYFPRINTF	O
(	O
yyoutput	pointer
,	O
"token %s ("	pointer
,	O
yytname	array
[	O
yytype	int
]	O
)	O
;	O
else	O
YYFPRINTF	O
(	O
yyoutput	pointer
,	O
"nterm %s ("	pointer
,	O
yytname	array
[	O
yytype	int
]	O
)	O
;	O
YY_LOCATION_PRINT	O
(	O
yyoutput	pointer
,	O
*	O
yylocationp	pointer
)	O
;	O
YYFPRINTF	O
(	O
yyoutput	pointer
,	O
": "	pointer
)	O
;	O
yy_symbol_value_print	function
(	O
yyoutput	pointer
,	O
yytype	int
,	O
yyvaluep	pointer
,	O
yylocationp	pointer
)	O
;	O
YYFPRINTF	O
(	O
yyoutput	pointer
,	O
")"	pointer
)	O
;	O
}	O
static	O
void	O
yy_stack_print	function
(	O
yytype_int16	short
*	O
yybottom	pointer
,	O
yytype_int16	short
*	O
yytop	pointer
)	O
{	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"Stack now"	pointer
)	O
;	O
for	O
(	O
;	O
yybottom	pointer
<=	O
yytop	pointer
;	O
yybottom	pointer
++	O
)	O
{	O
int	O
yybot	int
=	O
*	O
yybottom	pointer
;	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
" %d"	pointer
,	O
yybot	int
)	O
;	O
}	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
yy_reduce_print	function
(	O
YYSTYPE	union
*	O
yyvsp	pointer
,	O
YYLTYPE	O
*	O
yylsp	pointer
,	O
int	O
mu_sieve_yyrule	int
)	O
{	O
int	O
yynrhs	int
=	O
mu_sieve_yyr2	array
[	O
mu_sieve_yyrule	int
]	O
;	O
int	O
yyi	int
;	O
unsigned	O
long	O
int	O
yylno	long
=	O
yyrline	array
[	O
mu_sieve_yyrule	int
]	O
;	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"Reducing stack by rule %d (line %lu):\n"	pointer
,	O
mu_sieve_yyrule	int
-	O
1	int
,	O
yylno	long
)	O
;	O
for	O
(	O
yyi	int
=	O
0	int
;	O
yyi	int
<	O
yynrhs	int
;	O
yyi	int
++	O
)	O
{	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"   $%d = "	pointer
,	O
yyi	int
+	O
1	int
)	O
;	O
yy_symbol_print	function
(	O
stderr	pointer
,	O
yyrhs	array
[	O
yyprhs	array
[	O
mu_sieve_yyrule	int
]	O
+	O
yyi	int
]	O
,	O
&	O
(	O
yyvsp	pointer
[	O
(	O
yyi	int
+	O
1	int
)	O
-	O
(	O
yynrhs	int
)	O
]	O
)	O
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
yyi	int
+	O
1	int
)	O
-	O
(	O
yynrhs	int
)	O
]	O
)	O
)	O
;	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
int	O
mu_sieve_yydebug	int
;	O
static	O
YYSIZE_T	O
yytnamerr	function
(	O
char	O
*	O
yyres	pointer
,	O
const	O
char	O
*	O
yystr	pointer
)	O
{	O
if	O
(	O
*	O
yystr	pointer
==	O
'"'	O
)	O
{	O
YYSIZE_T	O
yyn	long
=	O
0	int
;	O
char	O
const	O
*	O
yyp	pointer
=	O
yystr	pointer
;	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
*	O
++	O
yyp	pointer
)	O
{	O
case	O
'\''	O
:	O
case	O
','	O
:	O
goto	O
do_not_strip_quotes	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
*	O
++	O
yyp	pointer
!=	O
'\\'	O
)	O
goto	O
do_not_strip_quotes	O
;	O
default	O
:	O
if	O
(	O
yyres	pointer
)	O
yyres	pointer
[	O
yyn	long
]	O
=	O
*	O
yyp	pointer
;	O
yyn	long
++	O
;	O
break	O
;	O
case	O
'"'	O
:	O
if	O
(	O
yyres	pointer
)	O
yyres	pointer
[	O
yyn	long
]	O
=	O
'\0'	O
;	O
return	O
yyn	long
;	O
}	O
do_not_strip_quotes	O
:	O
;	O
}	O
if	O
(	O
!	O
yyres	pointer
)	O
return	O
yystrlen	O
(	O
yystr	pointer
)	O
;	O
return	O
yystpcpy	O
(	O
yyres	pointer
,	O
yystr	pointer
)	O
-	O
yyres	pointer
;	O
}	O
static	O
int	O
yysyntax_error	function
(	O
YYSIZE_T	O
*	O
yymsg_alloc	pointer
,	O
char	O
*	O
*	O
yymsg	pointer
,	O
yytype_int16	short
*	O
yyssp	pointer
,	O
int	O
yytoken	int
)	O
{	O
YYSIZE_T	O
yysize0	long
=	O
yytnamerr	function
(	O
YY_NULL	int
,	O
yytname	array
[	O
yytoken	int
]	O
)	O
;	O
YYSIZE_T	O
yysize	long
=	O
yysize0	long
;	O
enum	O
{	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
=	O
5	int
}	O
;	O
const	O
char	O
*	O
yyformat	pointer
=	O
YY_NULL	int
;	O
char	O
const	O
*	O
yyarg	array
[	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
]	O
;	O
int	O
yycount	int
=	O
0	int
;	O
if	O
(	O
yytoken	int
!=	O
YYEMPTY	O
)	O
{	O
int	O
yyn	long
=	O
mu_sieve_yypact	array
[	O
*	O
yyssp	pointer
]	O
;	O
yyarg	array
[	O
yycount	int
++	O
]	O
=	O
yytname	array
[	O
yytoken	int
]	O
;	O
if	O
(	O
!	O
yypact_value_is_default	O
(	O
yyn	long
)	O
)	O
{	O
int	O
yyxbegin	int
=	O
yyn	long
<	O
0	int
?	O
-	O
yyn	long
:	O
0	int
;	O
int	O
yychecklim	int
=	O
YYLAST	int
-	O
yyn	long
+	O
1	int
;	O
int	O
yyxend	int
=	O
yychecklim	int
<	O
YYNTOKENS	int
?	O
yychecklim	int
:	O
YYNTOKENS	int
;	O
int	O
yyx	int
;	O
for	O
(	O
yyx	int
=	O
yyxbegin	int
;	O
yyx	int
<	O
yyxend	int
;	O
++	O
yyx	int
)	O
if	O
(	O
mu_sieve_yycheck	array
[	O
yyx	int
+	O
yyn	long
]	O
==	O
yyx	int
&&	O
yyx	int
!=	O
YYTERROR	int
&&	O
!	O
yytable_value_is_error	O
(	O
mu_sieve_yytable	array
[	O
yyx	int
+	O
yyn	long
]	O
)	O
)	O
{	O
if	O
(	O
yycount	int
==	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
)	O
{	O
yycount	int
=	O
1	int
;	O
yysize	long
=	O
yysize0	long
;	O
break	O
;	O
}	O
yyarg	array
[	O
yycount	int
++	O
]	O
=	O
yytname	array
[	O
yyx	int
]	O
;	O
{	O
YYSIZE_T	O
yysize1	long
=	O
yysize	long
+	O
yytnamerr	function
(	O
YY_NULL	int
,	O
yytname	array
[	O
yyx	int
]	O
)	O
;	O
if	O
(	O
!	O
(	O
yysize	long
<=	O
yysize1	long
&&	O
yysize1	long
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
return	O
2	int
;	O
yysize	long
=	O
yysize1	long
;	O
}	O
}	O
}	O
}	O
switch	O
(	O
yycount	int
)	O
{	O
YYCASE_	O
(	O
0	int
,	O
YY_	O
(	O
"syntax error"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
1	int
,	O
YY_	O
(	O
"syntax error, unexpected %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
2	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
3	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
4	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s or %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
5	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s or %s or %s"	pointer
)	O
)	O
;	O
}	O
{	O
YYSIZE_T	O
yysize1	long
=	O
yysize	long
+	O
yystrlen	O
(	O
yyformat	pointer
)	O
;	O
if	O
(	O
!	O
(	O
yysize	long
<=	O
yysize1	long
&&	O
yysize1	long
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
return	O
2	int
;	O
yysize	long
=	O
yysize1	long
;	O
}	O
if	O
(	O
*	O
yymsg_alloc	pointer
<	O
yysize	long
)	O
{	O
*	O
yymsg_alloc	pointer
=	O
2	int
*	O
yysize	long
;	O
if	O
(	O
!	O
(	O
yysize	long
<=	O
*	O
yymsg_alloc	pointer
&&	O
*	O
yymsg_alloc	pointer
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
*	O
yymsg_alloc	pointer
=	O
YYSTACK_ALLOC_MAXIMUM	O
;	O
return	O
1	int
;	O
}	O
{	O
char	O
*	O
yyp	pointer
=	O
*	O
yymsg	pointer
;	O
int	O
yyi	int
=	O
0	int
;	O
while	O
(	O
(	O
*	O
yyp	pointer
=	O
*	O
yyformat	pointer
)	O
!=	O
'\0'	O
)	O
if	O
(	O
*	O
yyp	pointer
==	O
'%'	O
&&	O
yyformat	pointer
[	O
1	int
]	O
==	O
's'	O
&&	O
yyi	int
<	O
yycount	int
)	O
{	O
yyp	pointer
+=	O
yytnamerr	function
(	O
yyp	pointer
,	O
yyarg	array
[	O
yyi	int
++	O
]	O
)	O
;	O
yyformat	pointer
+=	O
2	int
;	O
}	O
else	O
{	O
yyp	pointer
++	O
;	O
yyformat	pointer
++	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
yydestruct	function
(	O
const	O
char	O
*	O
yymsg	pointer
,	O
int	O
yytype	int
,	O
YYSTYPE	union
*	O
yyvaluep	pointer
,	O
YYLTYPE	O
*	O
yylocationp	pointer
)	O
{	O
YYUSE	O
(	O
yyvaluep	pointer
)	O
;	O
YYUSE	O
(	O
yylocationp	pointer
)	O
;	O
if	O
(	O
!	O
yymsg	pointer
)	O
yymsg	pointer
=	O
"Deleting"	pointer
;	O
YY_SYMBOL_PRINT	O
(	O
yymsg	pointer
,	O
yytype	int
,	O
yyvaluep	pointer
,	O
yylocationp	pointer
)	O
;	O
switch	O
(	O
yytype	int
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
int	O
mu_sieve_yychar	int
;	O
YYSTYPE	union
mu_sieve_yylval	union
YY_INITIAL_VALUE	O
(	O
yyval_default	O
)	O
;	O
YYLTYPE	O
mu_sieve_yylloc	struct
;	O
int	O
mu_sieve_yynerrs	int
;	O
int	O
mu_sieve_yyparse	function
(	O
void	O
)	O
{	O
int	O
mu_sieve_yystate	int
;	O
int	O
yyerrstatus	int
;	O
yytype_int16	short
yyssa	array
[	O
YYINITDEPTH	int
]	O
;	O
yytype_int16	short
*	O
yyss	pointer
;	O
yytype_int16	short
*	O
yyssp	pointer
;	O
YYSTYPE	union
yyvsa	array
[	O
YYINITDEPTH	int
]	O
;	O
YYSTYPE	union
*	O
yyvs	pointer
;	O
YYSTYPE	union
*	O
yyvsp	pointer
;	O
YYLTYPE	O
yylsa	array
[	O
YYINITDEPTH	int
]	O
;	O
YYLTYPE	O
*	O
yyls	pointer
;	O
YYLTYPE	O
*	O
yylsp	pointer
;	O
YYLTYPE	O
yyerror_range	array
[	O
3	int
]	O
;	O
YYSIZE_T	O
yystacksize	long
;	O
int	O
yyn	long
;	O
int	O
yyresult	int
;	O
int	O
yytoken	int
=	O
0	int
;	O
YYSTYPE	union
mu_sieve_yyval	union
;	O
YYLTYPE	O
yyloc	struct
;	O
char	O
yymsgbuf	array
[	O
128	int
]	O
;	O
char	O
*	O
yymsg	pointer
=	O
yymsgbuf	array
;	O
YYSIZE_T	O
yymsg_alloc	pointer
=	O
sizeof	O
yymsgbuf	array
;	O
int	O
mu_sieve_yylen	int
=	O
0	int
;	O
yyssp	pointer
=	O
yyss	pointer
=	O
yyssa	array
;	O
yyvsp	pointer
=	O
yyvs	pointer
=	O
yyvsa	array
;	O
yylsp	pointer
=	O
yyls	pointer
=	O
yylsa	array
;	O
yystacksize	long
=	O
YYINITDEPTH	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Starting parse\n"	pointer
)	O
)	O
;	O
mu_sieve_yystate	int
=	O
0	int
;	O
yyerrstatus	int
=	O
0	int
;	O
mu_sieve_yynerrs	int
=	O
0	int
;	O
mu_sieve_yychar	int
=	O
YYEMPTY	O
;	O
yylsp	pointer
[	O
0	int
]	O
=	O
mu_sieve_yylloc	struct
;	O
goto	O
yysetstate	O
;	O
yynewstate	O
:	O
yyssp	pointer
++	O
;	O
yysetstate	O
:	O
*	O
yyssp	pointer
=	O
mu_sieve_yystate	int
;	O
if	O
(	O
yyss	pointer
+	O
yystacksize	long
-	O
1	int
<=	O
yyssp	pointer
)	O
{	O
YYSIZE_T	O
yysize	long
=	O
yyssp	pointer
-	O
yyss	pointer
+	O
1	int
;	O
if	O
(	O
YYMAXDEPTH	int
<=	O
yystacksize	long
)	O
goto	O
yyexhaustedlab	O
;	O
yystacksize	long
*=	O
2	int
;	O
if	O
(	O
YYMAXDEPTH	int
<	O
yystacksize	long
)	O
yystacksize	long
=	O
YYMAXDEPTH	int
;	O
{	O
yytype_int16	short
*	O
yyss1	pointer
=	O
yyss	pointer
;	O
union	O
mu_sieve_yyalloc	union
*	O
yyptr	pointer
=	O
(	O
union	O
mu_sieve_yyalloc	union
*	O
)	O
YYSTACK_ALLOC	O
(	O
YYSTACK_BYTES	O
(	O
yystacksize	long
)	O
)	O
;	O
if	O
(	O
!	O
yyptr	pointer
)	O
goto	O
yyexhaustedlab	O
;	O
YYSTACK_RELOCATE	O
(	O
yyss_alloc	short
,	O
yyss	pointer
)	O
;	O
YYSTACK_RELOCATE	O
(	O
yyvs_alloc	union
,	O
yyvs	pointer
)	O
;	O
YYSTACK_RELOCATE	O
(	O
yyls_alloc	struct
,	O
yyls	pointer
)	O
;	O
if	O
(	O
yyss1	pointer
!=	O
yyssa	array
)	O
YYSTACK_FREE	O
(	O
yyss1	pointer
)	O
;	O
}	O
yyssp	pointer
=	O
yyss	pointer
+	O
yysize	long
-	O
1	int
;	O
yyvsp	pointer
=	O
yyvs	pointer
+	O
yysize	long
-	O
1	int
;	O
yylsp	pointer
=	O
yyls	pointer
+	O
yysize	long
-	O
1	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Stack size increased to %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
int	O
)	O
yystacksize	long
)	O
)	O
;	O
if	O
(	O
yyss	pointer
+	O
yystacksize	long
-	O
1	int
<=	O
yyssp	pointer
)	O
YYABORT	O
;	O
}	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Entering state %d\n"	pointer
,	O
mu_sieve_yystate	int
)	O
)	O
;	O
if	O
(	O
mu_sieve_yystate	int
==	O
YYFINAL	int
)	O
YYACCEPT	O
;	O
goto	O
yybackup	O
;	O
yybackup	O
:	O
yyn	long
=	O
mu_sieve_yypact	array
[	O
mu_sieve_yystate	int
]	O
;	O
if	O
(	O
yypact_value_is_default	O
(	O
yyn	long
)	O
)	O
goto	O
yydefault	O
;	O
if	O
(	O
mu_sieve_yychar	int
==	O
YYEMPTY	O
)	O
{	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Reading a token: "	pointer
)	O
)	O
;	O
mu_sieve_yychar	int
=	O
YYLEX	O
;	O
}	O
if	O
(	O
mu_sieve_yychar	int
<=	O
YYEOF	int
)	O
{	O
mu_sieve_yychar	int
=	O
yytoken	int
=	O
YYEOF	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Now at end of input.\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
yytoken	int
=	O
YYTRANSLATE	O
(	O
mu_sieve_yychar	int
)	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Next token is"	pointer
,	O
yytoken	int
,	O
&	O
mu_sieve_yylval	union
,	O
&	O
mu_sieve_yylloc	struct
)	O
;	O
}	O
yyn	long
+=	O
yytoken	int
;	O
if	O
(	O
yyn	long
<	O
0	int
||	O
YYLAST	int
<	O
yyn	long
||	O
mu_sieve_yycheck	array
[	O
yyn	long
]	O
!=	O
yytoken	int
)	O
goto	O
yydefault	O
;	O
yyn	long
=	O
mu_sieve_yytable	array
[	O
yyn	long
]	O
;	O
if	O
(	O
yyn	long
<=	O
0	int
)	O
{	O
if	O
(	O
yytable_value_is_error	O
(	O
yyn	long
)	O
)	O
goto	O
yyerrlab	O
;	O
yyn	long
=	O
-	O
yyn	long
;	O
goto	O
yyreduce	O
;	O
}	O
if	O
(	O
yyerrstatus	int
)	O
yyerrstatus	int
--	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
yytoken	int
,	O
&	O
mu_sieve_yylval	union
,	O
&	O
mu_sieve_yylloc	struct
)	O
;	O
mu_sieve_yychar	int
=	O
YYEMPTY	O
;	O
mu_sieve_yystate	int
=	O
yyn	long
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
yyvsp	pointer
=	O
mu_sieve_yylval	union
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
*	O
++	O
yylsp	pointer
=	O
mu_sieve_yylloc	struct
;	O
goto	O
yynewstate	O
;	O
yydefault	O
:	O
yyn	long
=	O
yydefact	array
[	O
mu_sieve_yystate	int
]	O
;	O
if	O
(	O
yyn	long
==	O
0	int
)	O
goto	O
yyerrlab	O
;	O
goto	O
yyreduce	O
;	O
yyreduce	O
:	O
mu_sieve_yylen	int
=	O
mu_sieve_yyr2	array
[	O
yyn	long
]	O
;	O
mu_sieve_yyval	union
=	O
yyvsp	pointer
[	O
1	int
-	O
mu_sieve_yylen	int
]	O
;	O
YYLLOC_DEFAULT	O
(	O
yyloc	struct
,	O
(	O
yylsp	pointer
-	O
mu_sieve_yylen	int
)	O
,	O
mu_sieve_yylen	int
)	O
;	O
YY_REDUCE_PRINT	O
(	O
yyn	long
)	O
;	O
switch	O
(	O
yyn	long
)	O
{	O
case	O
2	int
:	O
{	O
sieve_tree	pointer
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
3	int
:	O
{	O
struct	O
mu_locus_range	struct
lr	pointer
;	O
lr	pointer
.	O
beg	struct
=	O
lr	pointer
.	O
end	struct
=	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
.	O
end	struct
;	O
node_list_add	function
(	O
&	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
node_list	struct
)	O
,	O
node_alloc	function
(	O
mu_sieve_node_end	int
,	O
&	O
lr	pointer
)	O
)	O
;	O
sieve_tree	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
head	pointer
;	O
}	O
break	O
;	O
case	O
4	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
node_list	struct
)	O
.	O
head	pointer
=	O
(	O
mu_sieve_yyval	union
.	O
node_list	struct
)	O
.	O
tail	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
node	pointer
)	O
;	O
}	O
break	O
;	O
case	O
5	int
:	O
{	O
node_list_add	function
(	O
&	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
node_list	struct
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
node	pointer
)	O
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
node_list	struct
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
node_list	struct
)	O
;	O
}	O
break	O
;	O
case	O
6	int
:	O
{	O
mu_sieve_require	function
(	O
mu_sieve_machine	struct
,	O
&	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
slice	pointer
)	O
)	O
;	O
mu_sieve_machine	struct
->	O
stringcount	long
-=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
slice	pointer
)	O
.	O
count	long
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
8	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
node_alloc	function
(	O
mu_sieve_node_cond	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
4	int
)	O
]	O
)	O
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
cond	pointer
.	O
expr	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
node	pointer
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
cond	pointer
.	O
iftrue	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
node	pointer
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
node	pointer
)	O
;	O
}	O
break	O
;	O
case	O
9	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
head	pointer
;	O
}	O
break	O
;	O
case	O
10	int
:	O
{	O
if	O
(	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
tail	pointer
)	O
{	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
tail	pointer
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
head	pointer
;	O
}	O
else	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
;	O
}	O
break	O
;	O
case	O
11	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
node_list	struct
)	O
.	O
head	pointer
=	O
(	O
mu_sieve_yyval	union
.	O
node_list	struct
)	O
.	O
tail	pointer
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
13	int
:	O
{	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
=	O
node_alloc	function
(	O
mu_sieve_node_cond	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
)	O
)	O
;	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
expr	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
;	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iftrue	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
;	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
=	O
NULL	O
;	O
(	O
mu_sieve_yyval	union
.	O
node_list	struct
)	O
.	O
head	pointer
=	O
(	O
mu_sieve_yyval	union
.	O
node_list	struct
)	O
.	O
tail	pointer
=	O
node	pointer
;	O
}	O
break	O
;	O
case	O
14	int
:	O
{	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
=	O
node_alloc	function
(	O
mu_sieve_node_cond	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
4	int
)	O
]	O
)	O
)	O
;	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
expr	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
node	pointer
)	O
;	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iftrue	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
4	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
node	pointer
)	O
;	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
=	O
NULL	O
;	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
tail	pointer
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
=	O
node	pointer
;	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
tail	pointer
=	O
node	pointer
;	O
(	O
mu_sieve_yyval	union
.	O
node_list	struct
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
node_list	struct
)	O
;	O
}	O
break	O
;	O
case	O
15	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
head	pointer
;	O
}	O
break	O
;	O
case	O
16	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
node_list	struct
)	O
.	O
head	pointer
=	O
(	O
mu_sieve_yyval	union
.	O
node_list	struct
)	O
.	O
tail	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
node	pointer
)	O
;	O
}	O
break	O
;	O
case	O
17	int
:	O
{	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
->	O
prev	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
tail	pointer
;	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
tail	pointer
->	O
next	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
;	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
tail	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node	pointer
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
node_list	struct
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
node_list	struct
)	O
;	O
}	O
break	O
;	O
case	O
19	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
node_alloc	function
(	O
mu_sieve_node_anyof	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
4	int
)	O
]	O
)	O
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
node	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
head	pointer
;	O
}	O
break	O
;	O
case	O
20	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
node_alloc	function
(	O
mu_sieve_node_allof	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
4	int
)	O
]	O
)	O
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
node	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
4	int
)	O
]	O
.	O
node_list	struct
)	O
.	O
head	pointer
;	O
}	O
break	O
;	O
case	O
21	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
node_alloc	function
(	O
mu_sieve_node_not	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
)	O
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
node	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
node	pointer
)	O
;	O
}	O
break	O
;	O
case	O
22	int
:	O
{	O
mu_sieve_registry_t	struct
*	O
reg	long
;	O
mu_locus_range_copy	function
(	O
&	O
mu_sieve_machine	struct
->	O
locus	struct
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
)	O
;	O
reg	long
=	O
mu_sieve_registry_lookup	function
(	O
mu_sieve_machine	struct
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
ident	pointer
,	O
mu_sieve_record_test	int
)	O
;	O
if	O
(	O
!	O
reg	long
)	O
{	O
mu_diag_at_locus_range	function
(	O
MU_LOG_ERROR	int
,	O
&	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
idloc	struct
,	O
_	O
(	O
"unknown test: %s"	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
ident	pointer
)	O
;	O
mu_i_sv_error	function
(	O
mu_sieve_machine	struct
)	O
;	O
}	O
else	O
if	O
(	O
!	O
reg	long
->	O
required	int
)	O
{	O
mu_diag_at_locus_range	function
(	O
MU_LOG_ERROR	int
,	O
&	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
idloc	struct
,	O
_	O
(	O
"test `%s' has not been required"	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
ident	pointer
)	O
;	O
mu_i_sv_error	function
(	O
mu_sieve_machine	struct
)	O
;	O
}	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
node_alloc	function
(	O
mu_sieve_node_test	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
command	pointer
.	O
reg	long
=	O
reg	long
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
command	pointer
.	O
argstart	long
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
first	pointer
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
command	pointer
.	O
argcount	long
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
count	long
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
command	pointer
.	O
tagcount	long
=	O
0	int
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
command	pointer
.	O
comparator	pointer
=	O
NULL	O
;	O
mu_i_sv_lint_command	function
(	O
mu_sieve_machine	struct
,	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
23	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
node_alloc	function
(	O
mu_sieve_node_true	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
24	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
node_alloc	function
(	O
mu_sieve_node_false	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
)	O
;	O
}	O
break	O
;	O
case	O
25	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
command	pointer
)	O
.	O
ident	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
string	pointer
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
command	pointer
)	O
.	O
idloc	struct
=	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
command	pointer
)	O
.	O
first	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
slice	pointer
)	O
.	O
first	pointer
;	O
(	O
mu_sieve_yyval	union
.	O
command	pointer
)	O
.	O
count	long
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
slice	pointer
)	O
.	O
count	long
;	O
}	O
break	O
;	O
case	O
26	int
:	O
{	O
mu_sieve_registry_t	struct
*	O
reg	long
;	O
mu_locus_range_copy	function
(	O
&	O
mu_sieve_machine	struct
->	O
locus	struct
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
)	O
;	O
reg	long
=	O
mu_sieve_registry_lookup	function
(	O
mu_sieve_machine	struct
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
ident	pointer
,	O
mu_sieve_record_action	int
)	O
;	O
if	O
(	O
!	O
reg	long
)	O
{	O
mu_diag_at_locus_range	function
(	O
MU_LOG_ERROR	int
,	O
&	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
idloc	struct
,	O
_	O
(	O
"unknown action: %s"	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
ident	pointer
)	O
;	O
mu_i_sv_error	function
(	O
mu_sieve_machine	struct
)	O
;	O
}	O
else	O
if	O
(	O
!	O
reg	long
->	O
required	int
)	O
{	O
mu_diag_at_locus_range	function
(	O
MU_LOG_ERROR	int
,	O
&	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
idloc	struct
,	O
_	O
(	O
"action `%s' has not been required"	pointer
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
ident	pointer
)	O
;	O
mu_i_sv_error	function
(	O
mu_sieve_machine	struct
)	O
;	O
}	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
=	O
node_alloc	function
(	O
mu_sieve_node_action	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
command	pointer
.	O
reg	long
=	O
reg	long
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
command	pointer
.	O
argstart	long
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
first	pointer
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
command	pointer
.	O
argcount	long
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
command	pointer
)	O
.	O
count	long
;	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
->	O
v	array
.	O
command	pointer
.	O
tagcount	long
=	O
0	int
;	O
mu_i_sv_lint_command	function
(	O
mu_sieve_machine	struct
,	O
(	O
mu_sieve_yyval	union
.	O
node	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
27	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
slice	pointer
)	O
.	O
first	pointer
=	O
0	int
;	O
(	O
mu_sieve_yyval	union
.	O
slice	pointer
)	O
.	O
count	long
=	O
0	int
;	O
}	O
break	O
;	O
case	O
29	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
slice	pointer
)	O
.	O
first	pointer
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
idx	long
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
slice	pointer
)	O
.	O
count	long
=	O
1	int
;	O
}	O
break	O
;	O
case	O
30	int
:	O
{	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
slice	pointer
)	O
.	O
count	long
++	O
;	O
(	O
mu_sieve_yyval	union
.	O
slice	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
slice	pointer
)	O
;	O
}	O
break	O
;	O
case	O
31	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
idx	long
)	O
=	O
mu_sieve_value_create	function
(	O
mu_sieve_machine	struct
,	O
SVT_STRING_LIST	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
,	O
&	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
slice	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
32	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
idx	long
)	O
=	O
mu_sieve_value_create	function
(	O
mu_sieve_machine	struct
,	O
SVT_STRING	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
string	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
33	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
idx	long
)	O
=	O
mu_sieve_value_create	function
(	O
mu_sieve_machine	struct
,	O
SVT_STRING	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
string	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
34	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
idx	long
)	O
=	O
mu_sieve_value_create	function
(	O
mu_sieve_machine	struct
,	O
SVT_NUMBER	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
,	O
&	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
number	long
)	O
)	O
;	O
}	O
break	O
;	O
case	O
35	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
idx	long
)	O
=	O
mu_sieve_value_create	function
(	O
mu_sieve_machine	struct
,	O
SVT_TAG	int
,	O
&	O
(	O
yylsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
)	O
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
string	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
36	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
slice	pointer
)	O
.	O
first	pointer
=	O
mu_i_sv_string_create	function
(	O
mu_sieve_machine	struct
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
string	pointer
)	O
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
slice	pointer
)	O
.	O
count	long
=	O
1	int
;	O
}	O
break	O
;	O
case	O
38	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
slice	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
slice	pointer
)	O
;	O
}	O
break	O
;	O
case	O
39	int
:	O
{	O
(	O
mu_sieve_yyval	union
.	O
slice	pointer
)	O
.	O
first	pointer
=	O
mu_i_sv_string_create	function
(	O
mu_sieve_machine	struct
,	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
string	pointer
)	O
)	O
;	O
(	O
mu_sieve_yyval	union
.	O
slice	pointer
)	O
.	O
count	long
=	O
1	int
;	O
}	O
break	O
;	O
case	O
40	int
:	O
{	O
mu_i_sv_string_create	function
(	O
mu_sieve_machine	struct
,	O
(	O
yyvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
string	pointer
)	O
)	O
;	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
slice	pointer
)	O
.	O
count	long
++	O
;	O
(	O
mu_sieve_yyval	union
.	O
slice	pointer
)	O
=	O
(	O
yyvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
slice	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
YY_SYMBOL_PRINT	O
(	O
"-> $$ ="	pointer
,	O
mu_sieve_yyr1	array
[	O
yyn	long
]	O
,	O
&	O
mu_sieve_yyval	union
,	O
&	O
yyloc	struct
)	O
;	O
YYPOPSTACK	O
(	O
mu_sieve_yylen	int
)	O
;	O
mu_sieve_yylen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
*	O
++	O
yyvsp	pointer
=	O
mu_sieve_yyval	union
;	O
*	O
++	O
yylsp	pointer
=	O
yyloc	struct
;	O
yyn	long
=	O
mu_sieve_yyr1	array
[	O
yyn	long
]	O
;	O
mu_sieve_yystate	int
=	O
yypgoto	array
[	O
yyn	long
-	O
YYNTOKENS	int
]	O
+	O
*	O
yyssp	pointer
;	O
if	O
(	O
0	int
<=	O
mu_sieve_yystate	int
&&	O
mu_sieve_yystate	int
<=	O
YYLAST	int
&&	O
mu_sieve_yycheck	array
[	O
mu_sieve_yystate	int
]	O
==	O
*	O
yyssp	pointer
)	O
mu_sieve_yystate	int
=	O
mu_sieve_yytable	array
[	O
mu_sieve_yystate	int
]	O
;	O
else	O
mu_sieve_yystate	int
=	O
yydefgoto	array
[	O
yyn	long
-	O
YYNTOKENS	int
]	O
;	O
goto	O
yynewstate	O
;	O
yyerrlab	O
:	O
yytoken	int
=	O
mu_sieve_yychar	int
==	O
YYEMPTY	O
?	O
YYEMPTY	O
:	O
YYTRANSLATE	O
(	O
mu_sieve_yychar	int
)	O
;	O
if	O
(	O
!	O
yyerrstatus	int
)	O
{	O
++	O
mu_sieve_yynerrs	int
;	O
{	O
char	O
const	O
*	O
yymsgp	pointer
=	O
YY_	O
(	O
"syntax error"	pointer
)	O
;	O
int	O
yysyntax_error_status	int
;	O
yysyntax_error_status	int
=	O
YYSYNTAX_ERROR	O
;	O
if	O
(	O
yysyntax_error_status	int
==	O
0	int
)	O
yymsgp	pointer
=	O
yymsg	pointer
;	O
else	O
if	O
(	O
yysyntax_error_status	int
==	O
1	int
)	O
{	O
if	O
(	O
yymsg	pointer
!=	O
yymsgbuf	array
)	O
YYSTACK_FREE	O
(	O
yymsg	pointer
)	O
;	O
yymsg	pointer
=	O
(	O
char	O
*	O
)	O
YYSTACK_ALLOC	O
(	O
yymsg_alloc	pointer
)	O
;	O
if	O
(	O
!	O
yymsg	pointer
)	O
{	O
yymsg	pointer
=	O
yymsgbuf	array
;	O
yymsg_alloc	pointer
=	O
sizeof	O
yymsgbuf	array
;	O
yysyntax_error_status	int
=	O
2	int
;	O
}	O
else	O
{	O
yysyntax_error_status	int
=	O
YYSYNTAX_ERROR	O
;	O
yymsgp	pointer
=	O
yymsg	pointer
;	O
}	O
}	O
mu_sieve_yyerror	function
(	O
yymsgp	pointer
)	O
;	O
if	O
(	O
yysyntax_error_status	int
==	O
2	int
)	O
goto	O
yyexhaustedlab	O
;	O
}	O
}	O
yyerror_range	array
[	O
1	int
]	O
=	O
mu_sieve_yylloc	struct
;	O
if	O
(	O
yyerrstatus	int
==	O
3	int
)	O
{	O
if	O
(	O
mu_sieve_yychar	int
<=	O
YYEOF	int
)	O
{	O
if	O
(	O
mu_sieve_yychar	int
==	O
YYEOF	int
)	O
YYABORT	O
;	O
}	O
else	O
{	O
yydestruct	function
(	O
"Error: discarding"	pointer
,	O
yytoken	int
,	O
&	O
mu_sieve_yylval	union
,	O
&	O
mu_sieve_yylloc	struct
)	O
;	O
mu_sieve_yychar	int
=	O
YYEMPTY	O
;	O
}	O
}	O
goto	O
yyerrlab1	O
;	O
yyerrorlab	O
:	O
if	O
(	O
0	int
)	O
goto	O
yyerrorlab	O
;	O
yyerror_range	array
[	O
1	int
]	O
=	O
yylsp	pointer
[	O
1	int
-	O
mu_sieve_yylen	int
]	O
;	O
YYPOPSTACK	O
(	O
mu_sieve_yylen	int
)	O
;	O
mu_sieve_yylen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
mu_sieve_yystate	int
=	O
*	O
yyssp	pointer
;	O
goto	O
yyerrlab1	O
;	O
yyerrlab1	O
:	O
yyerrstatus	int
=	O
3	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
yyn	long
=	O
mu_sieve_yypact	array
[	O
mu_sieve_yystate	int
]	O
;	O
if	O
(	O
!	O
yypact_value_is_default	O
(	O
yyn	long
)	O
)	O
{	O
yyn	long
+=	O
YYTERROR	int
;	O
if	O
(	O
0	int
<=	O
yyn	long
&&	O
yyn	long
<=	O
YYLAST	int
&&	O
mu_sieve_yycheck	array
[	O
yyn	long
]	O
==	O
YYTERROR	int
)	O
{	O
yyn	long
=	O
mu_sieve_yytable	array
[	O
yyn	long
]	O
;	O
if	O
(	O
0	int
<	O
yyn	long
)	O
break	O
;	O
}	O
}	O
if	O
(	O
yyssp	pointer
==	O
yyss	pointer
)	O
YYABORT	O
;	O
yyerror_range	array
[	O
1	int
]	O
=	O
*	O
yylsp	pointer
;	O
yydestruct	function
(	O
"Error: popping"	pointer
,	O
yystos	array
[	O
mu_sieve_yystate	int
]	O
,	O
yyvsp	pointer
,	O
yylsp	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
mu_sieve_yystate	int
=	O
*	O
yyssp	pointer
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
}	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
yyvsp	pointer
=	O
mu_sieve_yylval	union
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
yyerror_range	array
[	O
2	int
]	O
=	O
mu_sieve_yylloc	struct
;	O
YYLLOC_DEFAULT	O
(	O
yyloc	struct
,	O
yyerror_range	array
,	O
2	int
)	O
;	O
*	O
++	O
yylsp	pointer
=	O
yyloc	struct
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
yystos	array
[	O
yyn	long
]	O
,	O
yyvsp	pointer
,	O
yylsp	pointer
)	O
;	O
mu_sieve_yystate	int
=	O
yyn	long
;	O
goto	O
yynewstate	O
;	O
yyacceptlab	O
:	O
yyresult	int
=	O
0	int
;	O
goto	O
yyreturn	O
;	O
yyabortlab	O
:	O
yyresult	int
=	O
1	int
;	O
goto	O
yyreturn	O
;	O
yyexhaustedlab	O
:	O
mu_sieve_yyerror	function
(	O
YY_	O
(	O
"memory exhausted"	pointer
)	O
)	O
;	O
yyresult	int
=	O
2	int
;	O
yyreturn	O
:	O
if	O
(	O
mu_sieve_yychar	int
!=	O
YYEMPTY	O
)	O
{	O
yytoken	int
=	O
YYTRANSLATE	O
(	O
mu_sieve_yychar	int
)	O
;	O
yydestruct	function
(	O
"Cleanup: discarding lookahead"	pointer
,	O
yytoken	int
,	O
&	O
mu_sieve_yylval	union
,	O
&	O
mu_sieve_yylloc	struct
)	O
;	O
}	O
YYPOPSTACK	O
(	O
mu_sieve_yylen	int
)	O
;	O
YY_STACK_PRINT	O
(	O
yyss	pointer
,	O
yyssp	pointer
)	O
;	O
while	O
(	O
yyssp	pointer
!=	O
yyss	pointer
)	O
{	O
yydestruct	function
(	O
"Cleanup: popping"	pointer
,	O
yystos	array
[	O
*	O
yyssp	pointer
]	O
,	O
yyvsp	pointer
,	O
yylsp	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
yyss	pointer
!=	O
yyssa	array
)	O
YYSTACK_FREE	O
(	O
yyss	pointer
)	O
;	O
if	O
(	O
yymsg	pointer
!=	O
yymsgbuf	array
)	O
YYSTACK_FREE	O
(	O
yymsg	pointer
)	O
;	O
return	O
YYID	O
(	O
yyresult	int
)	O
;	O
}	O
int	O
mu_sieve_yyerror	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
mu_error	function
(	O
"%s"	pointer
,	O
s	pointer
)	O
;	O
mu_i_sv_error	function
(	O
mu_sieve_machine	struct
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
node_list_add	function
(	O
struct	O
mu_sieve_node_list	struct
*	O
list	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
if	O
(	O
!	O
node	pointer
)	O
return	O
;	O
node	pointer
->	O
prev	pointer
=	O
list	pointer
->	O
tail	pointer
;	O
if	O
(	O
list	pointer
->	O
tail	pointer
)	O
list	pointer
->	O
tail	pointer
->	O
next	pointer
=	O
node	pointer
;	O
else	O
list	pointer
->	O
head	pointer
=	O
node	pointer
;	O
list	pointer
->	O
tail	pointer
=	O
node	pointer
;	O
}	O
static	O
struct	O
mu_sieve_node	struct
*	O
node_alloc	function
(	O
enum	O
mu_sieve_node_type	enum
type	int
,	O
struct	O
mu_locus_range	struct
*	O
lr	pointer
)	O
{	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
node	pointer
)	O
)	O
;	O
if	O
(	O
node	pointer
)	O
{	O
node	pointer
->	O
prev	pointer
=	O
node	pointer
->	O
next	pointer
=	O
NULL	O
;	O
node	pointer
->	O
type	int
=	O
type	int
;	O
mu_locus_range_init	function
(	O
&	O
node	pointer
->	O
locus	struct
)	O
;	O
mu_locus_range_copy	function
(	O
&	O
node	pointer
->	O
locus	struct
,	O
lr	pointer
)	O
;	O
}	O
return	O
node	pointer
;	O
}	O
static	O
void	O
node_optimize	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
;	O
static	O
void	O
node_free	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
;	O
static	O
void	O
node_replace	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
repl	pointer
)	O
;	O
static	O
void	O
node_code	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
;	O
static	O
void	O
node_dump	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
unsigned	O
level	int
,	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
)	O
;	O
static	O
void	O
tree_free	function
(	O
struct	O
mu_sieve_node	struct
*	O
*	O
tree	pointer
)	O
;	O
static	O
void	O
tree_optimize	function
(	O
struct	O
mu_sieve_node	struct
*	O
tree	pointer
)	O
;	O
static	O
void	O
tree_code	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
tree	pointer
)	O
;	O
static	O
void	O
tree_dump	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
tree	pointer
,	O
unsigned	O
level	int
,	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
)	O
;	O
static	O
void	O
indent	function
(	O
mu_stream_t	pointer
str	pointer
,	O
unsigned	O
level	int
)	O
{	O
while	O
(	O
level	int
--	O
)	O
mu_stream_write	function
(	O
str	pointer
,	O
tab	pointer
,	O
tablen	O
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
dump_node_noop	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
unsigned	O
level	int
,	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
)	O
{	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"NOOP\n"	pointer
)	O
;	O
}	O
static	O
void	O
dump_node_false	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
unsigned	O
level	int
,	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
)	O
{	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"FALSE\n"	pointer
)	O
;	O
}	O
static	O
void	O
dump_node_true	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
unsigned	O
level	int
,	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
)	O
{	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"TRUE\n"	pointer
)	O
;	O
}	O
static	O
void	O
free_node_command	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
}	O
static	O
void	O
code_node_test	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
mu_i_sv_code_test	function
(	O
mach	pointer
,	O
node	pointer
)	O
;	O
}	O
static	O
void	O
code_node_action	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
mu_i_sv_code_action	function
(	O
mach	pointer
,	O
node	pointer
)	O
;	O
}	O
void	O
mu_i_sv_valf	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_stream_t	pointer
str	pointer
,	O
mu_sieve_value_t	struct
*	O
val	pointer
)	O
{	O
mu_stream_printf	function
(	O
str	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
val	pointer
->	O
tag	pointer
)	O
{	O
mu_stream_printf	function
(	O
str	pointer
,	O
":%s"	pointer
,	O
val	pointer
->	O
tag	pointer
)	O
;	O
if	O
(	O
val	pointer
->	O
type	int
==	O
SVT_VOID	int
)	O
return	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
" "	pointer
)	O
;	O
}	O
switch	O
(	O
val	pointer
->	O
type	int
)	O
{	O
case	O
SVT_VOID	int
:	O
mu_stream_printf	function
(	O
str	pointer
,	O
"(void)"	pointer
)	O
;	O
break	O
;	O
case	O
SVT_NUMBER	int
:	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%zu"	pointer
,	O
val	pointer
->	O
v	array
.	O
number	long
)	O
;	O
break	O
;	O
case	O
SVT_STRING	int
:	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\"%s\""	pointer
,	O
mu_sieve_string_raw	function
(	O
mach	pointer
,	O
&	O
val	pointer
->	O
v	array
.	O
list	pointer
,	O
0	int
)	O
->	O
orig	pointer
)	O
;	O
break	O
;	O
case	O
SVT_STRING_LIST	int
:	O
{	O
size_t	long
i	long
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"["	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
val	pointer
->	O
v	array
.	O
list	pointer
.	O
count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
)	O
mu_stream_printf	function
(	O
str	pointer
,	O
", "	pointer
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\"%s\""	pointer
,	O
mu_sieve_string_raw	function
(	O
mach	pointer
,	O
&	O
val	pointer
->	O
v	array
.	O
list	pointer
,	O
i	long
)	O
->	O
orig	pointer
)	O
;	O
}	O
mu_stream_printf	function
(	O
str	pointer
,	O
"]"	pointer
)	O
;	O
}	O
break	O
;	O
case	O
SVT_TAG	int
:	O
mu_stream_printf	function
(	O
str	pointer
,	O
":%s"	pointer
,	O
val	pointer
->	O
v	array
.	O
string	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
static	O
void	O
dump_node_command	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
unsigned	O
level	int
,	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
)	O
{	O
size_t	long
i	long
;	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"COMMAND %s"	pointer
,	O
node	pointer
->	O
v	array
.	O
command	pointer
.	O
reg	long
->	O
name	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
node	pointer
->	O
v	array
.	O
command	pointer
.	O
argcount	long
+	O
node	pointer
->	O
v	array
.	O
command	pointer
.	O
tagcount	long
;	O
i	long
++	O
)	O
mu_i_sv_valf	function
(	O
mach	pointer
,	O
str	pointer
,	O
&	O
mach	pointer
->	O
valspace	pointer
[	O
node	pointer
->	O
v	array
.	O
command	pointer
.	O
argstart	long
+	O
i	long
]	O
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
free_node_cond	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
tree_free	function
(	O
&	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
expr	pointer
)	O
;	O
tree_free	function
(	O
&	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iftrue	pointer
)	O
;	O
tree_free	function
(	O
&	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
)	O
;	O
}	O
static	O
void	O
optimize_node_cond	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
tree_optimize	function
(	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
expr	pointer
)	O
;	O
switch	O
(	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
expr	pointer
->	O
type	int
)	O
{	O
case	O
mu_sieve_node_true	int
:	O
tree_optimize	function
(	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iftrue	pointer
)	O
;	O
node_replace	function
(	O
node	pointer
,	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iftrue	pointer
)	O
;	O
break	O
;	O
case	O
mu_sieve_node_false	int
:	O
tree_optimize	function
(	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
)	O
;	O
node_replace	function
(	O
node	pointer
,	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
)	O
;	O
break	O
;	O
default	O
:	O
tree_optimize	function
(	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iftrue	pointer
)	O
;	O
tree_optimize	function
(	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
)	O
;	O
}	O
}	O
static	O
void	O
code_node_cond	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
size_t	long
br1	long
;	O
tree_code	function
(	O
mach	pointer
,	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
expr	pointer
)	O
;	O
mu_i_sv_code	function
(	O
mach	pointer
,	O
(	O
sieve_op_t	union
)	O
_mu_i_sv_instr_brz	function
)	O
;	O
br1	long
=	O
mach	pointer
->	O
pc	long
;	O
mu_i_sv_code	function
(	O
mach	pointer
,	O
(	O
sieve_op_t	union
)	O
0	int
)	O
;	O
tree_code	function
(	O
mach	pointer
,	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iftrue	pointer
)	O
;	O
if	O
(	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
)	O
{	O
size_t	long
br2	long
;	O
mu_i_sv_code	function
(	O
mach	pointer
,	O
(	O
sieve_op_t	union
)	O
_mu_i_sv_instr_branch	function
)	O
;	O
br2	long
=	O
mach	pointer
->	O
pc	long
;	O
mu_i_sv_code	function
(	O
mach	pointer
,	O
(	O
sieve_op_t	union
)	O
0	int
)	O
;	O
mach	pointer
->	O
prog	pointer
[	O
br1	long
]	O
.	O
pc	long
=	O
mach	pointer
->	O
pc	long
-	O
br1	long
-	O
1	int
;	O
tree_code	function
(	O
mach	pointer
,	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
)	O
;	O
mach	pointer
->	O
prog	pointer
[	O
br2	long
]	O
.	O
pc	long
=	O
mach	pointer
->	O
pc	long
-	O
br2	long
-	O
1	int
;	O
}	O
else	O
mach	pointer
->	O
prog	pointer
[	O
br1	long
]	O
.	O
pc	long
=	O
mach	pointer
->	O
pc	long
-	O
br1	long
-	O
1	int
;	O
}	O
static	O
void	O
dump_node_cond	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
unsigned	O
level	int
,	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
)	O
{	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"COND\n"	pointer
)	O
;	O
++	O
level	int
;	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"EXPR:\n"	pointer
)	O
;	O
tree_dump	function
(	O
str	pointer
,	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
expr	pointer
,	O
level	int
+	O
1	int
,	O
mach	pointer
)	O
;	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"IFTRUE:\n"	pointer
)	O
;	O
tree_dump	function
(	O
str	pointer
,	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iftrue	pointer
,	O
level	int
+	O
1	int
,	O
mach	pointer
)	O
;	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"IFFALSE:\n"	pointer
)	O
;	O
tree_dump	function
(	O
str	pointer
,	O
node	pointer
->	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
,	O
level	int
+	O
1	int
,	O
mach	pointer
)	O
;	O
}	O
static	O
void	O
free_node_x_of	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
tree_free	function
(	O
&	O
node	pointer
->	O
v	array
.	O
node	pointer
)	O
;	O
}	O
static	O
void	O
optimize_x_of	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
enum	O
mu_sieve_node_type	enum
solve	enum
)	O
{	O
struct	O
mu_sieve_node	struct
*	O
cur	pointer
;	O
tree_optimize	function
(	O
node	pointer
->	O
v	array
.	O
node	pointer
)	O
;	O
cur	pointer
=	O
node	pointer
->	O
v	array
.	O
node	pointer
;	O
while	O
(	O
cur	pointer
)	O
{	O
struct	O
mu_sieve_node	struct
*	O
next	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
switch	O
(	O
cur	pointer
->	O
type	int
)	O
{	O
case	O
mu_sieve_node_false	int
:	O
case	O
mu_sieve_node_true	int
:	O
if	O
(	O
cur	pointer
->	O
type	int
==	O
solve	enum
)	O
{	O
tree_free	function
(	O
&	O
node	pointer
->	O
v	array
.	O
node	pointer
)	O
;	O
node	pointer
->	O
type	int
=	O
solve	enum
;	O
return	O
;	O
}	O
else	O
{	O
if	O
(	O
cur	pointer
->	O
prev	pointer
)	O
cur	pointer
->	O
prev	pointer
->	O
next	pointer
=	O
next	pointer
;	O
else	O
node	pointer
->	O
v	array
.	O
node	pointer
=	O
next	pointer
;	O
if	O
(	O
next	pointer
)	O
next	pointer
->	O
prev	pointer
=	O
cur	pointer
->	O
prev	pointer
;	O
node_free	function
(	O
cur	pointer
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
cur	pointer
=	O
next	pointer
;	O
}	O
if	O
(	O
!	O
node	pointer
->	O
v	array
.	O
node	pointer
)	O
node	pointer
->	O
type	int
=	O
solve	enum
==	O
mu_sieve_node_false	int
?	O
mu_sieve_node_true	int
:	O
mu_sieve_node_false	int
;	O
}	O
static	O
void	O
code_node_x_of	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
sieve_op_t	union
op	int
)	O
{	O
struct	O
mu_sieve_node	struct
*	O
cur	pointer
=	O
node	pointer
->	O
v	array
.	O
node	pointer
;	O
size_t	long
pc	long
=	O
0	int
;	O
size_t	long
end	struct
;	O
while	O
(	O
cur	pointer
)	O
{	O
node_code	function
(	O
mach	pointer
,	O
cur	pointer
)	O
;	O
if	O
(	O
cur	pointer
->	O
next	pointer
)	O
{	O
mu_i_sv_code	function
(	O
mach	pointer
,	O
op	int
)	O
;	O
mu_i_sv_code	function
(	O
mach	pointer
,	O
(	O
sieve_op_t	union
)	O
pc	long
)	O
;	O
pc	long
=	O
mach	pointer
->	O
pc	long
-	O
1	int
;	O
}	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
}	O
end	struct
=	O
mach	pointer
->	O
pc	long
;	O
while	O
(	O
pc	long
!=	O
0	int
)	O
{	O
size_t	long
prev	pointer
=	O
mach	pointer
->	O
prog	pointer
[	O
pc	long
]	O
.	O
pc	long
;	O
mach	pointer
->	O
prog	pointer
[	O
pc	long
]	O
.	O
pc	long
=	O
end	struct
-	O
pc	long
-	O
1	int
;	O
pc	long
=	O
prev	pointer
;	O
}	O
}	O
static	O
void	O
dump_node_x_of	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
unsigned	O
level	int
,	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s:\n"	pointer
,	O
node	pointer
->	O
type	int
==	O
mu_sieve_node_allof	int
?	O
"ALLOF"	pointer
:	O
"ANYOF"	pointer
)	O
;	O
++	O
level	int
;	O
node	pointer
=	O
node	pointer
->	O
v	array
.	O
node	pointer
;	O
while	O
(	O
node	pointer
)	O
{	O
node_dump	function
(	O
str	pointer
,	O
node	pointer
,	O
level	int
+	O
1	int
,	O
mach	pointer
)	O
;	O
node	pointer
=	O
node	pointer
->	O
next	pointer
;	O
if	O
(	O
node	pointer
)	O
{	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"%s:\n"	pointer
,	O
node	pointer
->	O
type	int
==	O
mu_sieve_node_allof	int
?	O
"AND"	pointer
:	O
"OR"	pointer
)	O
;	O
}	O
}	O
}	O
static	O
void	O
optimize_node_anyof	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
optimize_x_of	function
(	O
node	pointer
,	O
mu_sieve_node_true	int
)	O
;	O
}	O
static	O
void	O
code_node_anyof	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
code_node_x_of	function
(	O
mach	pointer
,	O
node	pointer
,	O
(	O
sieve_op_t	union
)	O
_mu_i_sv_instr_brnz	function
)	O
;	O
}	O
static	O
void	O
optimize_node_allof	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
return	O
optimize_x_of	function
(	O
node	pointer
,	O
mu_sieve_node_false	int
)	O
;	O
}	O
static	O
void	O
code_node_allof	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
code_node_x_of	function
(	O
mach	pointer
,	O
node	pointer
,	O
(	O
sieve_op_t	union
)	O
_mu_i_sv_instr_brz	function
)	O
;	O
}	O
static	O
void	O
free_node_not	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
tree_free	function
(	O
&	O
node	pointer
->	O
v	array
.	O
node	pointer
)	O
;	O
}	O
static	O
void	O
optimize_node_not	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
tree_optimize	function
(	O
node	pointer
->	O
v	array
.	O
node	pointer
)	O
;	O
switch	O
(	O
node	pointer
->	O
v	array
.	O
node	pointer
->	O
type	int
)	O
{	O
case	O
mu_sieve_node_false	int
:	O
tree_free	function
(	O
&	O
node	pointer
->	O
v	array
.	O
node	pointer
)	O
;	O
node	pointer
->	O
type	int
=	O
mu_sieve_node_true	int
;	O
break	O
;	O
case	O
mu_sieve_node_true	int
:	O
tree_free	function
(	O
&	O
node	pointer
->	O
v	array
.	O
node	pointer
)	O
;	O
node	pointer
->	O
type	int
=	O
mu_sieve_node_false	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
code_node_not	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
node_code	function
(	O
mach	pointer
,	O
node	pointer
->	O
v	array
.	O
node	pointer
)	O
;	O
mu_i_sv_code	function
(	O
mach	pointer
,	O
(	O
sieve_op_t	union
)	O
_mu_i_sv_instr_not	function
)	O
;	O
}	O
static	O
void	O
dump_node_not	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
unsigned	O
level	int
,	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
)	O
{	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"NOT\n"	pointer
)	O
;	O
node_dump	function
(	O
str	pointer
,	O
node	pointer
->	O
v	array
.	O
node	pointer
,	O
level	int
+	O
1	int
,	O
mach	pointer
)	O
;	O
}	O
static	O
void	O
code_node_end	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
mu_i_sv_code	function
(	O
mach	pointer
,	O
(	O
sieve_op_t	union
)	O
(	O
sieve_instr_t	pointer
)	O
0	int
)	O
;	O
}	O
static	O
void	O
dump_node_end	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
unsigned	O
level	int
,	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
)	O
{	O
indent	function
(	O
str	pointer
,	O
level	int
)	O
;	O
mu_stream_printf	function
(	O
str	pointer
,	O
"END\n"	pointer
)	O
;	O
}	O
struct	O
node_descr	struct
{	O
void	O
(	O
*	O
code_fn	pointer
)	O
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
;	O
void	O
(	O
*	O
optimize_fn	pointer
)	O
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
;	O
void	O
(	O
*	O
free_fn	pointer
)	O
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
;	O
void	O
(	O
*	O
dump_fn	pointer
)	O
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
unsigned	O
level	int
,	O
mu_sieve_machine_t	pointer
)	O
;	O
}	O
;	O
static	O
struct	O
node_descr	struct
node_descr	struct
[	O
]	O
=	O
{	O
[	O
mu_sieve_node_noop	int
]	O
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
dump_node_noop	function
}	O
,	O
[	O
mu_sieve_node_false	int
]	O
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
dump_node_false	function
}	O
,	O
[	O
mu_sieve_node_true	int
]	O
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
dump_node_true	function
}	O
,	O
[	O
mu_sieve_node_test	int
]	O
=	O
{	O
code_node_test	function
,	O
NULL	O
,	O
free_node_command	function
,	O
dump_node_command	function
}	O
,	O
[	O
mu_sieve_node_action	int
]	O
=	O
{	O
code_node_action	function
,	O
NULL	O
,	O
free_node_command	function
,	O
dump_node_command	function
}	O
,	O
[	O
mu_sieve_node_cond	int
]	O
=	O
{	O
code_node_cond	function
,	O
optimize_node_cond	function
,	O
free_node_cond	function
,	O
dump_node_cond	function
}	O
,	O
[	O
mu_sieve_node_anyof	int
]	O
=	O
{	O
code_node_anyof	function
,	O
optimize_node_anyof	function
,	O
free_node_x_of	function
,	O
dump_node_x_of	function
}	O
,	O
[	O
mu_sieve_node_allof	int
]	O
=	O
{	O
code_node_allof	function
,	O
optimize_node_allof	function
,	O
free_node_x_of	function
,	O
dump_node_x_of	function
}	O
,	O
[	O
mu_sieve_node_not	int
]	O
=	O
{	O
code_node_not	function
,	O
optimize_node_not	function
,	O
free_node_not	function
,	O
dump_node_not	function
}	O
,	O
[	O
mu_sieve_node_end	int
]	O
=	O
{	O
code_node_end	function
,	O
NULL	O
,	O
NULL	O
,	O
dump_node_end	function
}	O
}	O
;	O
static	O
void	O
node_optimize	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
if	O
(	O
(	O
int	O
)	O
node	pointer
->	O
type	int
>=	O
MU_ARRAY_SIZE	O
(	O
node_descr	struct
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
node_descr	struct
[	O
node	pointer
->	O
type	int
]	O
.	O
optimize_fn	pointer
)	O
node_descr	struct
[	O
node	pointer
->	O
type	int
]	O
.	O
optimize_fn	pointer
(	O
node	pointer
)	O
;	O
}	O
static	O
void	O
node_free	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
if	O
(	O
(	O
int	O
)	O
node	pointer
->	O
type	int
>=	O
MU_ARRAY_SIZE	O
(	O
node_descr	struct
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
node_descr	struct
[	O
node	pointer
->	O
type	int
]	O
.	O
free_fn	pointer
)	O
node_descr	struct
[	O
node	pointer
->	O
type	int
]	O
.	O
free_fn	pointer
(	O
node	pointer
)	O
;	O
free	function
(	O
node	pointer
)	O
;	O
}	O
static	O
void	O
node_replace	function
(	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
repl	pointer
)	O
{	O
struct	O
mu_sieve_node	struct
copy	struct
;	O
if	O
(	O
(	O
int	O
)	O
node	pointer
->	O
type	int
>=	O
MU_ARRAY_SIZE	O
(	O
node_descr	struct
)	O
)	O
abort	function
(	O
)	O
;	O
copy	struct
=	O
*	O
node	pointer
;	O
if	O
(	O
repl	pointer
)	O
{	O
node	pointer
->	O
type	int
=	O
repl	pointer
->	O
type	int
;	O
node	pointer
->	O
v	array
=	O
repl	pointer
->	O
v	array
;	O
switch	O
(	O
copy	struct
.	O
type	int
)	O
{	O
case	O
mu_sieve_node_cond	int
:	O
if	O
(	O
repl	pointer
==	O
copy	struct
.	O
v	array
.	O
cond	pointer
.	O
expr	pointer
)	O
copy	struct
.	O
v	array
.	O
cond	pointer
.	O
expr	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
repl	pointer
==	O
copy	struct
.	O
v	array
.	O
cond	pointer
.	O
iftrue	pointer
)	O
copy	struct
.	O
v	array
.	O
cond	pointer
.	O
iftrue	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
repl	pointer
==	O
copy	struct
.	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
)	O
copy	struct
.	O
v	array
.	O
cond	pointer
.	O
iffalse	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
mu_sieve_node_not	int
:	O
if	O
(	O
repl	pointer
==	O
copy	struct
.	O
v	array
.	O
node	pointer
)	O
copy	struct
.	O
v	array
.	O
node	pointer
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
else	O
node	pointer
->	O
type	int
=	O
mu_sieve_node_noop	int
;	O
if	O
(	O
node_descr	struct
[	O
node	pointer
->	O
type	int
]	O
.	O
free_fn	pointer
)	O
node_descr	struct
[	O
node	pointer
->	O
type	int
]	O
.	O
free_fn	pointer
(	O
&	O
copy	struct
)	O
;	O
}	O
static	O
void	O
node_code	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
)	O
{	O
if	O
(	O
(	O
int	O
)	O
node	pointer
->	O
type	int
>=	O
MU_ARRAY_SIZE	O
(	O
node_descr	struct
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
node_descr	struct
[	O
node	pointer
->	O
type	int
]	O
.	O
code_fn	pointer
)	O
{	O
mu_i_sv_locus	function
(	O
mach	pointer
,	O
&	O
node	pointer
->	O
locus	struct
)	O
;	O
node_descr	struct
[	O
node	pointer
->	O
type	int
]	O
.	O
code_fn	pointer
(	O
mach	pointer
,	O
node	pointer
)	O
;	O
}	O
}	O
static	O
void	O
node_dump	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
node	pointer
,	O
unsigned	O
level	int
,	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
)	O
{	O
if	O
(	O
(	O
int	O
)	O
node	pointer
->	O
type	int
>=	O
MU_ARRAY_SIZE	O
(	O
node_descr	struct
)	O
||	O
!	O
node_descr	struct
[	O
node	pointer
->	O
type	int
]	O
.	O
dump_fn	pointer
)	O
abort	function
(	O
)	O
;	O
node_descr	struct
[	O
node	pointer
->	O
type	int
]	O
.	O
dump_fn	pointer
(	O
str	pointer
,	O
node	pointer
,	O
level	int
,	O
mach	pointer
)	O
;	O
}	O
static	O
void	O
tree_free	function
(	O
struct	O
mu_sieve_node	struct
*	O
*	O
tree	pointer
)	O
{	O
struct	O
mu_sieve_node	struct
*	O
cur	pointer
=	O
*	O
tree	pointer
;	O
while	O
(	O
cur	pointer
)	O
{	O
struct	O
mu_sieve_node	struct
*	O
next	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
node_free	function
(	O
cur	pointer
)	O
;	O
cur	pointer
=	O
next	pointer
;	O
}	O
}	O
static	O
void	O
tree_optimize	function
(	O
struct	O
mu_sieve_node	struct
*	O
tree	pointer
)	O
{	O
while	O
(	O
tree	pointer
)	O
{	O
node_optimize	function
(	O
tree	pointer
)	O
;	O
tree	pointer
=	O
tree	pointer
->	O
next	pointer
;	O
}	O
}	O
static	O
void	O
tree_code	function
(	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
tree	pointer
)	O
{	O
while	O
(	O
tree	pointer
)	O
{	O
node_code	function
(	O
mach	pointer
,	O
tree	pointer
)	O
;	O
tree	pointer
=	O
tree	pointer
->	O
next	pointer
;	O
}	O
}	O
static	O
void	O
tree_dump	function
(	O
mu_stream_t	pointer
str	pointer
,	O
struct	O
mu_sieve_node	struct
*	O
tree	pointer
,	O
unsigned	O
level	int
,	O
struct	O
mu_sieve_machine	struct
*	O
mach	pointer
)	O
{	O
while	O
(	O
tree	pointer
)	O
{	O
node_dump	function
(	O
str	pointer
,	O
tree	pointer
,	O
level	int
,	O
mach	pointer
)	O
;	O
tree	pointer
=	O
tree	pointer
->	O
next	pointer
;	O
}	O
}	O
void	O
mu_i_sv_error	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mach	pointer
->	O
state	pointer
=	O
mu_sieve_state_error	int
;	O
}	O
int	O
mu_sieve_machine_create	function
(	O
mu_sieve_machine_t	pointer
*	O
pmach	pointer
)	O
{	O
int	O
rc	int
;	O
mu_sieve_machine_t	pointer
mach	pointer
;	O
mu_sieve_debug_init	function
(	O
)	O
;	O
mach	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
mach	pointer
)	O
)	O
;	O
if	O
(	O
!	O
mach	pointer
)	O
return	O
ENOMEM	int
;	O
memset	function
(	O
mach	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
mach	pointer
)	O
)	O
;	O
mach	pointer
->	O
memory_pool	pointer
=	O
NULL	O
;	O
rc	int
=	O
mu_opool_create	function
(	O
&	O
mach	pointer
->	O
string_pool	pointer
,	O
MU_OPOOL_DEFAULT	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_list_destroy	function
(	O
&	O
mach	pointer
->	O
memory_pool	pointer
)	O
;	O
free	function
(	O
mach	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mach	pointer
->	O
data	pointer
=	O
NULL	O
;	O
mu_sieve_set_diag_stream	function
(	O
mach	pointer
,	O
mu_strerr	pointer
)	O
;	O
mu_sieve_set_dbg_stream	function
(	O
mach	pointer
,	O
mu_strerr	pointer
)	O
;	O
*	O
pmach	pointer
=	O
mach	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_i_sv_free_stringspace	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
stringcount	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mach	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
rx	pointer
)	O
{	O
regex_t	struct
*	O
rx	pointer
=	O
mach	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
rx	pointer
;	O
regfree	function
(	O
rx	pointer
)	O
;	O
}	O
}	O
}	O
int	O
mu_sieve_machine_reset	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
switch	O
(	O
mach	pointer
->	O
state	pointer
)	O
{	O
case	O
mu_sieve_state_init	int
:	O
return	O
0	int
;	O
case	O
mu_sieve_state_error	int
:	O
case	O
mu_sieve_state_compiled	int
:	O
break	O
;	O
case	O
mu_sieve_state_running	int
:	O
case	O
mu_sieve_state_disass	int
:	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
mu_i_sv_free_stringspace	function
(	O
mach	pointer
)	O
;	O
mu_list_clear	function
(	O
mach	pointer
->	O
memory_pool	pointer
)	O
;	O
mu_list_clear	function
(	O
mach	pointer
->	O
destr_list	pointer
)	O
;	O
mu_opool_free	function
(	O
mach	pointer
->	O
string_pool	pointer
,	O
NULL	O
)	O
;	O
mu_i_sv_free_idspace	function
(	O
mach	pointer
)	O
;	O
mu_list_clear	function
(	O
mach	pointer
->	O
registry	pointer
)	O
;	O
mach	pointer
->	O
stringspace	pointer
=	O
NULL	O
;	O
mach	pointer
->	O
stringcount	long
=	O
0	int
;	O
mach	pointer
->	O
stringmax	long
=	O
0	int
;	O
mach	pointer
->	O
valspace	pointer
=	O
NULL	O
;	O
mach	pointer
->	O
valcount	long
=	O
0	int
;	O
mach	pointer
->	O
valmax	long
=	O
0	int
;	O
mach	pointer
->	O
progsize	long
=	O
0	int
;	O
mach	pointer
->	O
prog	pointer
=	O
NULL	O
;	O
mu_assoc_destroy	function
(	O
&	O
mach	pointer
->	O
vartab	pointer
)	O
;	O
mach	pointer
->	O
match_string	pointer
=	O
NULL	O
;	O
mach	pointer
->	O
match_buf	pointer
=	O
NULL	O
;	O
mach	pointer
->	O
match_count	long
=	O
0	int
;	O
mach	pointer
->	O
match_max	long
=	O
0	int
;	O
mach	pointer
->	O
state	pointer
=	O
mu_sieve_state_init	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
regdup	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_sieve_registry_t	struct
*	O
reg	long
=	O
item	pointer
;	O
mu_sieve_machine_t	pointer
mach	pointer
=	O
data	pointer
;	O
mu_sieve_registry_require	function
(	O
mach	pointer
,	O
reg	long
->	O
name	pointer
,	O
reg	long
->	O
type	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
copy_stream_state	function
(	O
mu_sieve_machine_t	pointer
child	pointer
,	O
mu_sieve_machine_t	pointer
parent	pointer
)	O
{	O
child	pointer
->	O
state_flags	int
=	O
parent	pointer
->	O
state_flags	int
;	O
child	pointer
->	O
err_mode	int
=	O
parent	pointer
->	O
err_mode	int
;	O
mu_locus_range_copy	function
(	O
&	O
child	pointer
->	O
err_locus	struct
,	O
&	O
parent	pointer
->	O
err_locus	struct
)	O
;	O
child	pointer
->	O
dbg_mode	int
=	O
parent	pointer
->	O
dbg_mode	int
;	O
mu_locus_range_copy	function
(	O
&	O
child	pointer
->	O
dbg_locus	struct
,	O
&	O
parent	pointer
->	O
dbg_locus	struct
)	O
;	O
child	pointer
->	O
errstream	pointer
=	O
parent	pointer
->	O
errstream	pointer
;	O
mu_stream_ref	function
(	O
child	pointer
->	O
errstream	pointer
)	O
;	O
child	pointer
->	O
dbgstream	pointer
=	O
parent	pointer
->	O
dbgstream	pointer
;	O
mu_stream_ref	function
(	O
child	pointer
->	O
dbgstream	pointer
)	O
;	O
}	O
int	O
mu_sieve_machine_clone	function
(	O
mu_sieve_machine_t	pointer
const	O
parent	pointer
,	O
mu_sieve_machine_t	pointer
*	O
pmach	pointer
)	O
{	O
size_t	long
i	long
;	O
mu_sieve_machine_t	pointer
child	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
parent	pointer
||	O
parent	pointer
->	O
state	pointer
==	O
mu_sieve_state_error	int
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_sieve_machine_create	function
(	O
&	O
child	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
setjmp	function
(	O
child	pointer
->	O
errbuf	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
child	pointer
->	O
state	pointer
=	O
mu_sieve_state_init	int
;	O
mu_i_sv_register_standard_actions	function
(	O
child	pointer
)	O
;	O
mu_i_sv_register_standard_tests	function
(	O
child	pointer
)	O
;	O
mu_i_sv_register_standard_comparators	function
(	O
child	pointer
)	O
;	O
mu_list_foreach	function
(	O
parent	pointer
->	O
registry	pointer
,	O
regdup	function
,	O
child	pointer
)	O
;	O
child	pointer
->	O
idspace	pointer
=	O
mu_sieve_calloc	function
(	O
child	pointer
,	O
parent	pointer
->	O
idcount	long
,	O
sizeof	O
(	O
child	pointer
->	O
idspace	pointer
[	O
0	int
]	O
)	O
)	O
;	O
child	pointer
->	O
idcount	long
=	O
child	pointer
->	O
idmax	long
=	O
parent	pointer
->	O
idcount	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
child	pointer
->	O
idcount	long
;	O
i	long
++	O
)	O
child	pointer
->	O
idspace	pointer
[	O
i	long
]	O
=	O
mu_sieve_strdup	function
(	O
parent	pointer
,	O
parent	pointer
->	O
idspace	pointer
[	O
i	long
]	O
)	O
;	O
child	pointer
->	O
stringspace	pointer
=	O
mu_sieve_calloc	function
(	O
child	pointer
,	O
parent	pointer
->	O
stringcount	long
,	O
sizeof	O
(	O
child	pointer
->	O
stringspace	pointer
[	O
0	int
]	O
)	O
)	O
;	O
child	pointer
->	O
stringcount	long
=	O
child	pointer
->	O
stringmax	long
=	O
parent	pointer
->	O
stringcount	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
parent	pointer
->	O
stringcount	long
;	O
i	long
++	O
)	O
{	O
memset	function
(	O
&	O
child	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
,	O
0	int
,	O
sizeof	O
(	O
child	pointer
->	O
stringspace	pointer
[	O
0	int
]	O
)	O
)	O
;	O
child	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
orig	pointer
=	O
mu_sieve_strdup	function
(	O
parent	pointer
,	O
parent	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
orig	pointer
)	O
;	O
}	O
child	pointer
->	O
valspace	pointer
=	O
mu_sieve_calloc	function
(	O
child	pointer
,	O
parent	pointer
->	O
valcount	long
,	O
sizeof	O
child	pointer
->	O
valspace	pointer
[	O
0	int
]	O
)	O
;	O
child	pointer
->	O
valcount	long
=	O
child	pointer
->	O
valmax	long
=	O
parent	pointer
->	O
valcount	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
child	pointer
->	O
valcount	long
;	O
i	long
++	O
)	O
{	O
child	pointer
->	O
valspace	pointer
[	O
i	long
]	O
.	O
type	int
=	O
parent	pointer
->	O
valspace	pointer
[	O
i	long
]	O
.	O
type	int
;	O
child	pointer
->	O
valspace	pointer
[	O
i	long
]	O
.	O
tag	pointer
=	O
mu_sieve_strdup	function
(	O
child	pointer
,	O
parent	pointer
->	O
valspace	pointer
[	O
i	long
]	O
.	O
tag	pointer
)	O
;	O
switch	O
(	O
child	pointer
->	O
valspace	pointer
[	O
i	long
]	O
.	O
type	int
)	O
{	O
case	O
SVT_TAG	int
:	O
child	pointer
->	O
valspace	pointer
[	O
i	long
]	O
.	O
v	array
.	O
string	pointer
=	O
mu_sieve_strdup	function
(	O
child	pointer
,	O
parent	pointer
->	O
valspace	pointer
[	O
i	long
]	O
.	O
v	array
.	O
string	pointer
)	O
;	O
break	O
;	O
default	O
:	O
child	pointer
->	O
valspace	pointer
[	O
i	long
]	O
.	O
v	array
=	O
parent	pointer
->	O
valspace	pointer
[	O
i	long
]	O
.	O
v	array
;	O
}	O
}	O
child	pointer
->	O
progsize	long
=	O
parent	pointer
->	O
progsize	long
;	O
child	pointer
->	O
prog	pointer
=	O
mu_sieve_calloc	function
(	O
child	pointer
,	O
parent	pointer
->	O
progsize	long
,	O
sizeof	O
child	pointer
->	O
prog	pointer
[	O
0	int
]	O
)	O
;	O
memcpy	function
(	O
child	pointer
->	O
prog	pointer
,	O
parent	pointer
->	O
prog	pointer
,	O
parent	pointer
->	O
progsize	long
*	O
sizeof	O
(	O
child	pointer
->	O
prog	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
mu_sieve_has_variables	function
(	O
parent	pointer
)	O
)	O
{	O
mu_i_sv_copy_variables	function
(	O
child	pointer
,	O
parent	pointer
)	O
;	O
child	pointer
->	O
match_string	pointer
=	O
NULL	O
;	O
child	pointer
->	O
match_buf	pointer
=	O
NULL	O
;	O
child	pointer
->	O
match_count	long
=	O
0	int
;	O
child	pointer
->	O
match_max	long
=	O
0	int
;	O
}	O
child	pointer
->	O
dry_run	int
=	O
parent	pointer
->	O
dry_run	int
;	O
copy_stream_state	function
(	O
child	pointer
,	O
parent	pointer
)	O
;	O
child	pointer
->	O
data	pointer
=	O
parent	pointer
->	O
data	pointer
;	O
child	pointer
->	O
logger	pointer
=	O
parent	pointer
->	O
logger	pointer
;	O
child	pointer
->	O
daemon_email	pointer
=	O
parent	pointer
->	O
daemon_email	pointer
;	O
*	O
pmach	pointer
=	O
child	pointer
;	O
}	O
else	O
mu_sieve_machine_destroy	function
(	O
&	O
child	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_sieve_machine_dup	function
(	O
mu_sieve_machine_t	pointer
const	O
in	pointer
,	O
mu_sieve_machine_t	pointer
*	O
out	pointer
)	O
{	O
int	O
rc	int
;	O
mu_sieve_machine_t	pointer
mach	pointer
;	O
if	O
(	O
!	O
in	pointer
||	O
in	pointer
->	O
state	pointer
==	O
mu_sieve_state_error	int
)	O
return	O
EINVAL	int
;	O
mach	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
mach	pointer
)	O
)	O
;	O
if	O
(	O
!	O
mach	pointer
)	O
return	O
ENOMEM	int
;	O
memset	function
(	O
mach	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
mach	pointer
)	O
)	O
;	O
rc	int
=	O
mu_list_create	function
(	O
&	O
mach	pointer
->	O
memory_pool	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
mach	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mach	pointer
->	O
destr_list	pointer
=	O
NULL	O
;	O
mach	pointer
->	O
registry	pointer
=	O
NULL	O
;	O
mach	pointer
->	O
progsize	long
=	O
in	pointer
->	O
progsize	long
;	O
mach	pointer
->	O
prog	pointer
=	O
in	pointer
->	O
prog	pointer
;	O
switch	O
(	O
in	pointer
->	O
state	pointer
)	O
{	O
case	O
mu_sieve_state_running	int
:	O
case	O
mu_sieve_state_disass	int
:	O
mach	pointer
->	O
state	pointer
=	O
mu_sieve_state_compiled	int
;	O
break	O
;	O
default	O
:	O
mach	pointer
->	O
state	pointer
=	O
in	pointer
->	O
state	pointer
;	O
}	O
rc	int
=	O
setjmp	function
(	O
mach	pointer
->	O
errbuf	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mach	pointer
->	O
pc	long
=	O
0	int
;	O
mach	pointer
->	O
reg	long
=	O
0	int
;	O
mach	pointer
->	O
dry_run	int
=	O
in	pointer
->	O
dry_run	int
;	O
mach	pointer
->	O
state_flags	int
=	O
in	pointer
->	O
state_flags	int
;	O
mach	pointer
->	O
err_mode	int
=	O
in	pointer
->	O
err_mode	int
;	O
mu_locus_range_copy	function
(	O
&	O
mach	pointer
->	O
err_locus	struct
,	O
&	O
in	pointer
->	O
err_locus	struct
)	O
;	O
mach	pointer
->	O
dbg_mode	int
=	O
in	pointer
->	O
dbg_mode	int
;	O
mu_locus_range_copy	function
(	O
&	O
mach	pointer
->	O
dbg_locus	struct
,	O
&	O
in	pointer
->	O
dbg_locus	struct
)	O
;	O
copy_stream_state	function
(	O
mach	pointer
,	O
in	pointer
)	O
;	O
mu_i_sv_copy_variables	function
(	O
mach	pointer
,	O
in	pointer
)	O
;	O
mach	pointer
->	O
data	pointer
=	O
in	pointer
->	O
data	pointer
;	O
mach	pointer
->	O
logger	pointer
=	O
in	pointer
->	O
logger	pointer
;	O
mach	pointer
->	O
daemon_email	pointer
=	O
in	pointer
->	O
daemon_email	pointer
;	O
*	O
out	pointer
=	O
mach	pointer
;	O
}	O
else	O
mu_sieve_machine_destroy	function
(	O
&	O
mach	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
void	O
mu_sieve_get_diag_stream	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_stream_t	pointer
*	O
pstr	pointer
)	O
{	O
*	O
pstr	pointer
=	O
mach	pointer
->	O
errstream	pointer
;	O
mu_stream_ref	function
(	O
*	O
pstr	pointer
)	O
;	O
}	O
void	O
mu_sieve_set_diag_stream	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_stream_t	pointer
str	pointer
)	O
{	O
mu_stream_unref	function
(	O
mach	pointer
->	O
errstream	pointer
)	O
;	O
mach	pointer
->	O
errstream	pointer
=	O
str	pointer
;	O
mu_stream_ref	function
(	O
mach	pointer
->	O
errstream	pointer
)	O
;	O
}	O
void	O
mu_sieve_set_dbg_stream	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_stream_t	pointer
str	pointer
)	O
{	O
mu_stream_unref	function
(	O
mach	pointer
->	O
dbgstream	pointer
)	O
;	O
mach	pointer
->	O
dbgstream	pointer
=	O
str	pointer
;	O
mu_stream_ref	function
(	O
mach	pointer
->	O
dbgstream	pointer
)	O
;	O
}	O
void	O
mu_sieve_get_dbg_stream	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_stream_t	pointer
*	O
pstr	pointer
)	O
{	O
*	O
pstr	pointer
=	O
mach	pointer
->	O
dbgstream	pointer
;	O
mu_stream_ref	function
(	O
*	O
pstr	pointer
)	O
;	O
}	O
void	O
mu_sieve_set_logger	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_sieve_action_log_t	pointer
logger	pointer
)	O
{	O
mach	pointer
->	O
logger	pointer
=	O
logger	pointer
;	O
}	O
mu_mailer_t	pointer
mu_sieve_get_mailer	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
if	O
(	O
!	O
mach	pointer
->	O
mailer	pointer
)	O
{	O
int	O
rc	int
;	O
rc	int
=	O
mu_mailer_create	function
(	O
&	O
mach	pointer
->	O
mailer	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot create mailer: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
rc	int
=	O
mu_mailer_open	function
(	O
mach	pointer
->	O
mailer	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_url_t	pointer
url	pointer
=	O
NULL	O
;	O
mu_mailer_get_url	function
(	O
mach	pointer
->	O
mailer	pointer
,	O
&	O
url	pointer
)	O
;	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"%lu: cannot open mailer %s: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_mailer_destroy	function
(	O
&	O
mach	pointer
->	O
mailer	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
return	O
mach	pointer
->	O
mailer	pointer
;	O
}	O
void	O
mu_sieve_set_mailer	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
mu_mailer_destroy	function
(	O
&	O
mach	pointer
->	O
mailer	pointer
)	O
;	O
mach	pointer
->	O
mailer	pointer
=	O
mailer	pointer
;	O
}	O
char	O
*	O
mu_sieve_get_daemon_email	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
if	O
(	O
!	O
mach	pointer
->	O
daemon_email	pointer
)	O
{	O
const	O
char	O
*	O
domain	pointer
=	O
NULL	O
;	O
mu_get_user_email_domain	function
(	O
&	O
domain	pointer
)	O
;	O
mach	pointer
->	O
daemon_email	pointer
=	O
mu_sieve_malloc	function
(	O
mach	pointer
,	O
sizeof	O
(	O
MAILER_DAEMON_PFX	pointer
)	O
+	O
strlen	function
(	O
domain	pointer
)	O
)	O
;	O
sprintf	function
(	O
mach	pointer
->	O
daemon_email	pointer
,	O
"%s%s"	pointer
,	O
MAILER_DAEMON_PFX	pointer
,	O
domain	pointer
)	O
;	O
}	O
return	O
mach	pointer
->	O
daemon_email	pointer
;	O
}	O
void	O
mu_sieve_set_daemon_email	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
const	O
char	O
*	O
email	pointer
)	O
{	O
mu_sieve_free	function
(	O
mach	pointer
,	O
(	O
void	O
*	O
)	O
mach	pointer
->	O
daemon_email	pointer
)	O
;	O
mach	pointer
->	O
daemon_email	pointer
=	O
mu_sieve_strdup	function
(	O
mach	pointer
,	O
email	pointer
)	O
;	O
}	O
struct	O
sieve_destr_record	struct
{	O
mu_sieve_destructor_t	pointer
destr	pointer
;	O
void	O
*	O
ptr	pointer
;	O
}	O
;	O
static	O
void	O
run_destructor	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
sieve_destr_record	struct
*	O
p	pointer
=	O
data	pointer
;	O
p	pointer
->	O
destr	pointer
(	O
p	pointer
->	O
ptr	pointer
)	O
;	O
free	function
(	O
data	pointer
)	O
;	O
}	O
void	O
mu_sieve_machine_add_destructor	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_sieve_destructor_t	pointer
destr	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
sieve_destr_record	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
mach	pointer
->	O
destr_list	pointer
)	O
{	O
rc	int
=	O
mu_list_create	function
(	O
&	O
mach	pointer
->	O
destr_list	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"mu_list_create: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
destr	pointer
(	O
ptr	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
mu_list_set_destroy_item	function
(	O
mach	pointer
->	O
destr_list	pointer
,	O
run_destructor	function
)	O
;	O
}	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%s"	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
destr	pointer
(	O
ptr	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
p	pointer
->	O
destr	pointer
=	O
destr	pointer
;	O
p	pointer
->	O
ptr	pointer
=	O
ptr	pointer
;	O
rc	int
=	O
mu_list_prepend	function
(	O
mach	pointer
->	O
destr_list	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"mu_list_prepend: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
destr	pointer
(	O
ptr	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
}	O
void	O
mu_sieve_machine_destroy	function
(	O
mu_sieve_machine_t	pointer
*	O
pmach	pointer
)	O
{	O
mu_sieve_machine_t	pointer
mach	pointer
=	O
*	O
pmach	pointer
;	O
mu_i_sv_free_stringspace	function
(	O
mach	pointer
)	O
;	O
mu_sieve_free	function
(	O
mach	pointer
,	O
mach	pointer
->	O
stringspace	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
mach	pointer
->	O
errstream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
mach	pointer
->	O
dbgstream	pointer
)	O
;	O
mu_mailer_destroy	function
(	O
&	O
mach	pointer
->	O
mailer	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
mach	pointer
->	O
destr_list	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
mach	pointer
->	O
registry	pointer
)	O
;	O
mu_sieve_free	function
(	O
mach	pointer
,	O
mach	pointer
->	O
idspace	pointer
)	O
;	O
mu_opool_destroy	function
(	O
&	O
mach	pointer
->	O
string_pool	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
mach	pointer
->	O
memory_pool	pointer
)	O
;	O
mu_assoc_destroy	function
(	O
&	O
mach	pointer
->	O
vartab	pointer
)	O
;	O
mu_list_destroy	function
(	O
&	O
mach	pointer
->	O
init_var	pointer
)	O
;	O
free	function
(	O
mach	pointer
)	O
;	O
*	O
pmach	pointer
=	O
NULL	O
;	O
}	O
int	O
with_machine	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
int	O
(	O
*	O
thunk	pointer
)	O
(	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
mu_stream_t	pointer
save_errstr	pointer
;	O
rc	int
=	O
mu_sieve_machine_reset	function
(	O
mach	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
save_errstr	pointer
=	O
mu_strerr	pointer
;	O
mu_stream_ref	function
(	O
save_errstr	pointer
)	O
;	O
mu_strerr	pointer
=	O
mach	pointer
->	O
errstream	pointer
;	O
mu_stream_ref	function
(	O
mu_strerr	pointer
)	O
;	O
mu_sieve_machine	struct
=	O
mach	pointer
;	O
rc	int
=	O
setjmp	function
(	O
mach	pointer
->	O
errbuf	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mach	pointer
->	O
state	pointer
=	O
mu_sieve_state_init	int
;	O
mu_i_sv_register_standard_actions	function
(	O
mach	pointer
)	O
;	O
mu_i_sv_register_standard_tests	function
(	O
mach	pointer
)	O
;	O
mu_i_sv_register_standard_comparators	function
(	O
mach	pointer
)	O
;	O
mu_sieve_stream_save	function
(	O
mach	pointer
)	O
;	O
rc	int
=	O
thunk	pointer
(	O
data	pointer
)	O
;	O
mu_sieve_stream_restore	function
(	O
mach	pointer
)	O
;	O
mu_stream_unref	function
(	O
save_errstr	pointer
)	O
;	O
mu_strerr	pointer
=	O
save_errstr	pointer
;	O
mu_stream_unref	function
(	O
mu_strerr	pointer
)	O
;	O
}	O
else	O
mach	pointer
->	O
state	pointer
=	O
mu_sieve_state_error	int
;	O
return	O
rc	int
;	O
}	O
static	O
void	O
string_rescan	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
size_t	long
i	long
;	O
int	O
hasvar	int
=	O
mu_sieve_has_variables	function
(	O
mach	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
stringcount	long
;	O
i	long
++	O
)	O
{	O
mach	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
changed	int
=	O
0	int
;	O
if	O
(	O
hasvar	int
)	O
{	O
mach	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
constant	long
=	O
0	int
;	O
mu_sieve_string_get	function
(	O
mach	pointer
,	O
&	O
mach	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
)	O
;	O
mu_sieve_free	function
(	O
mach	pointer
,	O
mach	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
exp	pointer
)	O
;	O
mach	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
exp	pointer
=	O
NULL	O
;	O
mach	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
constant	long
=	O
!	O
mach	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
changed	int
;	O
mach	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
changed	int
=	O
0	int
;	O
}	O
else	O
mach	pointer
->	O
stringspace	pointer
[	O
i	long
]	O
.	O
constant	long
=	O
1	int
;	O
}	O
}	O
static	O
int	O
sieve_parse	function
(	O
void	O
)	O
{	O
int	O
rc	int
;	O
int	O
old_mode	int
,	O
mode	int
;	O
sieve_tree	pointer
=	O
NULL	O
;	O
mu_sieve_yydebug	int
=	O
mu_debug_level_p	function
(	O
mu_sieve_debug_handle	int
,	O
MU_DEBUG_TRACE3	int
)	O
;	O
mu_stream_ioctl	function
(	O
mu_strerr	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_GET_MODE	int
,	O
&	O
old_mode	int
)	O
;	O
mode	int
=	O
old_mode	int
|	O
MU_LOGMODE_LOCUS	int
;	O
mu_stream_ioctl	function
(	O
mu_strerr	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_MODE	int
,	O
&	O
mode	int
)	O
;	O
rc	int
=	O
mu_sieve_yyparse	function
(	O
)	O
;	O
mu_stream_ioctl	function
(	O
mu_strerr	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_MODE	int
,	O
&	O
old_mode	int
)	O
;	O
mu_i_sv_lex_finish	function
(	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_i_sv_error	function
(	O
mu_sieve_machine	struct
)	O
;	O
if	O
(	O
mu_sieve_machine	struct
->	O
state	pointer
==	O
mu_sieve_state_init	int
)	O
{	O
if	O
(	O
mu_debug_level_p	function
(	O
mu_sieve_debug_handle	int
,	O
MU_DEBUG_TRACE1	int
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Unoptimized parse tree"	pointer
)	O
)	O
;	O
tree_dump	function
(	O
mu_strerr	pointer
,	O
sieve_tree	pointer
,	O
0	int
,	O
mu_sieve_machine	struct
)	O
;	O
}	O
tree_optimize	function
(	O
sieve_tree	pointer
)	O
;	O
if	O
(	O
mu_debug_level_p	function
(	O
mu_sieve_debug_handle	int
,	O
MU_DEBUG_TRACE2	int
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Optimized parse tree"	pointer
)	O
)	O
;	O
tree_dump	function
(	O
mu_strerr	pointer
,	O
sieve_tree	pointer
,	O
0	int
,	O
mu_sieve_machine	struct
)	O
;	O
}	O
mu_i_sv_code	function
(	O
mu_sieve_machine	struct
,	O
(	O
sieve_op_t	union
)	O
(	O
sieve_instr_t	pointer
)	O
0	int
)	O
;	O
mu_locus_range_deinit	function
(	O
&	O
mu_sieve_machine	struct
->	O
locus	struct
)	O
;	O
tree_code	function
(	O
mu_sieve_machine	struct
,	O
sieve_tree	pointer
)	O
;	O
mu_i_sv_code	function
(	O
mu_sieve_machine	struct
,	O
(	O
sieve_op_t	union
)	O
(	O
sieve_instr_t	pointer
)	O
0	int
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
mu_sieve_machine	struct
->	O
state	pointer
==	O
mu_sieve_state_error	int
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
else	O
{	O
string_rescan	function
(	O
mu_sieve_machine	struct
)	O
;	O
mu_sieve_machine	struct
->	O
state	pointer
=	O
mu_sieve_state_compiled	int
;	O
}	O
}	O
tree_free	function
(	O
&	O
sieve_tree	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
sieve_compile_file	function
(	O
void	O
*	O
name	pointer
)	O
{	O
if	O
(	O
mu_i_sv_lex_begin	function
(	O
name	pointer
)	O
==	O
0	int
)	O
return	O
sieve_parse	function
(	O
)	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
int	O
mu_sieve_compile	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
with_machine	function
(	O
mach	pointer
,	O
sieve_compile_file	function
,	O
(	O
void	O
*	O
)	O
name	pointer
)	O
;	O
}	O
struct	O
strbuf	struct
{	O
const	O
char	O
*	O
ptr	pointer
;	O
size_t	long
size	long
;	O
struct	O
mu_locus_point	struct
const	O
*	O
pt	pointer
;	O
}	O
;	O
static	O
int	O
sieve_compile_strbuf	function
(	O
void	O
*	O
name	pointer
)	O
{	O
struct	O
strbuf	struct
*	O
buf	pointer
=	O
name	pointer
;	O
if	O
(	O
mu_i_sv_lex_begin_string	function
(	O
buf	pointer
->	O
ptr	pointer
,	O
buf	pointer
->	O
size	long
,	O
buf	pointer
->	O
pt	pointer
)	O
==	O
0	int
)	O
return	O
sieve_parse	function
(	O
)	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
int	O
mu_sieve_compile_text	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
strsize	long
,	O
struct	O
mu_locus_point	struct
const	O
*	O
loc	pointer
)	O
{	O
struct	O
strbuf	struct
buf	pointer
;	O
buf	pointer
.	O
ptr	pointer
=	O
str	pointer
;	O
buf	pointer
.	O
size	long
=	O
strsize	long
;	O
buf	pointer
.	O
pt	pointer
=	O
loc	pointer
;	O
return	O
with_machine	function
(	O
mach	pointer
,	O
sieve_compile_strbuf	function
,	O
&	O
buf	pointer
)	O
;	O
}	O
int	O
mu_sieve_compile_buffer	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
int	O
bufsize	long
,	O
const	O
char	O
*	O
fname	pointer
,	O
int	O
line	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_locus_point	struct
loc	pointer
=	O
MU_LOCUS_POINT_INITIALIZER	O
;	O
mu_locus_point_set_file	function
(	O
&	O
loc	pointer
,	O
fname	pointer
)	O
;	O
loc	pointer
.	O
mu_line	int
=	O
line	pointer
;	O
rc	int
=	O
mu_sieve_compile_text	function
(	O
mach	pointer
,	O
buf	pointer
,	O
bufsize	long
,	O
&	O
loc	pointer
)	O
;	O
mu_locus_point_deinit	function
(	O
&	O
loc	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
