enum	O
{	O
NOT_AN_INODE_NUMBER	int
=	O
0	int
}	O
;	O
enum	O
{	O
_FTS_INODE_SORT_DIR_ENTRIES_THRESHOLD	int
=	O
FTS_INODE_SORT_DIR_ENTRIES_THRESHOLD	int
}	O
;	O
enum	O
Fts_stat	enum
{	O
FTS_NO_STAT_REQUIRED	int
=	O
1	int
,	O
FTS_STAT_REQUIRED	int
=	O
2	int
}	O
;	O
static	O
FTSENT	struct
*	O
fts_alloc	function
(	O
FTS	struct
*	O
,	O
const	O
char	O
*	O
,	O
size_t	long
)	O
internal_function	O
;	O
static	O
FTSENT	struct
*	O
fts_build	function
(	O
FTS	struct
*	O
,	O
int	O
)	O
internal_function	O
;	O
static	O
void	O
fts_lfree	function
(	O
FTSENT	struct
*	O
)	O
internal_function	O
;	O
static	O
void	O
fts_load	function
(	O
FTS	struct
*	O
,	O
FTSENT	struct
*	O
)	O
internal_function	O
;	O
static	O
size_t	long
fts_maxarglen	function
(	O
char	O
*	O
const	O
*	O
)	O
internal_function	O
;	O
static	O
void	O
fts_padjust	function
(	O
FTS	struct
*	O
,	O
FTSENT	struct
*	O
)	O
internal_function	O
;	O
static	O
bool	bool
fts_palloc	function
(	O
FTS	struct
*	O
,	O
size_t	long
)	O
internal_function	O
;	O
static	O
FTSENT	struct
*	O
fts_sort	function
(	O
FTS	struct
*	O
,	O
FTSENT	struct
*	O
,	O
size_t	long
)	O
internal_function	O
;	O
static	O
unsigned	O
short	O
int	O
fts_stat	function
(	O
FTS	struct
*	O
,	O
FTSENT	struct
*	O
,	O
bool	bool
)	O
internal_function	O
;	O
static	O
int	O
fts_safe_changedir	function
(	O
FTS	struct
*	O
,	O
FTSENT	struct
*	O
,	O
int	O
,	O
const	O
char	O
*	O
)	O
internal_function	O
;	O
static	O
void	O
fd_ring_clear	function
(	O
I_ring	struct
*	O
fd_ring	pointer
)	O
{	O
while	O
(	O
!	O
i_ring_empty	function
(	O
fd_ring	pointer
)	O
)	O
{	O
int	O
fd	int
=	O
i_ring_pop	function
(	O
fd_ring	pointer
)	O
;	O
if	O
(	O
0	int
<=	O
fd	int
)	O
close	function
(	O
fd	int
)	O
;	O
}	O
}	O
static	O
void	O
fts_set_stat_required	function
(	O
FTSENT	struct
*	O
p	pointer
,	O
bool	bool
required	bool
)	O
{	O
fts_assert	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_NSOK	int
)	O
;	O
p	pointer
->	O
fts_statp	array
->	O
st_size	long
=	O
(	O
required	bool
?	O
FTS_STAT_REQUIRED	int
:	O
FTS_NO_STAT_REQUIRED	int
)	O
;	O
}	O
static	O
DIR	struct
*	O
internal_function	O
opendirat	function
(	O
int	O
fd	int
,	O
char	O
const	O
*	O
dir	pointer
,	O
int	O
extra_flags	int
,	O
int	O
*	O
pdir_fd	pointer
)	O
{	O
int	O
new_fd	int
=	O
openat	function
(	O
fd	int
,	O
dir	pointer
,	O
(	O
O_RDONLY	int
|	O
O_DIRECTORY	O
|	O
O_NOCTTY	int
|	O
O_NONBLOCK	int
|	O
extra_flags	int
)	O
)	O
;	O
DIR	struct
*	O
dirp	pointer
;	O
if	O
(	O
new_fd	int
<	O
0	int
)	O
return	O
NULL	O
;	O
set_cloexec_flag	function
(	O
new_fd	int
,	O
true	int
)	O
;	O
dirp	pointer
=	O
fdopendir	function
(	O
new_fd	int
)	O
;	O
if	O
(	O
dirp	pointer
)	O
*	O
pdir_fd	pointer
=	O
new_fd	int
;	O
else	O
{	O
int	O
saved_errno	int
=	O
errno	O
;	O
close	function
(	O
new_fd	int
)	O
;	O
errno	O
=	O
saved_errno	int
;	O
}	O
return	O
dirp	pointer
;	O
}	O
static	O
void	O
internal_function	O
cwd_advance_fd	function
(	O
FTS	struct
*	O
sp	pointer
,	O
int	O
fd	int
,	O
bool	bool
chdir_down_one	bool
)	O
{	O
int	O
old	int
=	O
sp	pointer
->	O
fts_cwd_fd	int
;	O
fts_assert	O
(	O
old	int
!=	O
fd	int
||	O
old	int
==	O
AT_FDCWD	O
)	O
;	O
if	O
(	O
chdir_down_one	bool
)	O
{	O
int	O
prev_fd_in_slot	int
=	O
i_ring_push	function
(	O
&	O
sp	pointer
->	O
fts_fd_ring	struct
,	O
old	int
)	O
;	O
fd_ring_print	O
(	O
sp	pointer
,	O
stderr	pointer
,	O
"post-push"	pointer
)	O
;	O
if	O
(	O
0	int
<=	O
prev_fd_in_slot	int
)	O
close	function
(	O
prev_fd_in_slot	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
if	O
(	O
0	int
<=	O
old	int
)	O
close	function
(	O
old	int
)	O
;	O
}	O
sp	pointer
->	O
fts_cwd_fd	int
=	O
fd	int
;	O
}	O
static	O
int	O
restore_initial_cwd	function
(	O
FTS	struct
*	O
sp	pointer
)	O
{	O
int	O
fail	int
=	O
FCHDIR	O
(	O
sp	pointer
,	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
?	O
AT_FDCWD	O
:	O
sp	pointer
->	O
fts_rfd	int
)	O
;	O
fd_ring_clear	function
(	O
&	O
(	O
sp	pointer
->	O
fts_fd_ring	struct
)	O
)	O
;	O
return	O
fail	int
;	O
}	O
static	O
int	O
internal_function	O
diropen	function
(	O
FTS	struct
const	O
*	O
sp	pointer
,	O
char	O
const	O
*	O
dir	pointer
)	O
{	O
int	O
open_flags	int
=	O
(	O
O_SEARCH	O
|	O
O_DIRECTORY	O
|	O
O_NOCTTY	int
|	O
O_NONBLOCK	int
|	O
(	O
ISSET	O
(	O
FTS_PHYSICAL	int
)	O
?	O
O_NOFOLLOW	O
:	O
0	int
)	O
|	O
(	O
ISSET	O
(	O
FTS_NOATIME	int
)	O
?	O
O_NOATIME	O
:	O
0	int
)	O
)	O
;	O
int	O
fd	int
=	O
(	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
?	O
openat	function
(	O
sp	pointer
->	O
fts_cwd_fd	int
,	O
dir	pointer
,	O
open_flags	int
)	O
:	O
open	function
(	O
dir	pointer
,	O
open_flags	int
)	O
)	O
;	O
if	O
(	O
0	int
<=	O
fd	int
)	O
set_cloexec_flag	function
(	O
fd	int
,	O
true	int
)	O
;	O
return	O
fd	int
;	O
}	O
FTS	struct
*	O
fts_open	function
(	O
char	O
*	O
const	O
*	O
argv	pointer
,	O
register	O
int	O
options	int
,	O
int	O
(	O
*	O
compar	pointer
)	O
(	O
FTSENT	struct
const	O
*	O
*	O
,	O
FTSENT	struct
const	O
*	O
*	O
)	O
)	O
{	O
register	O
FTS	struct
*	O
sp	pointer
;	O
register	O
FTSENT	struct
*	O
p	pointer
,	O
*	O
root	pointer
;	O
register	O
size_t	long
nitems	long
;	O
FTSENT	struct
*	O
parent	pointer
=	O
NULL	O
;	O
FTSENT	struct
*	O
tmp	pointer
=	O
NULL	O
;	O
bool	bool
defer_stat	bool
;	O
if	O
(	O
options	int
&	O
~	O
FTS_OPTIONMASK	int
)	O
{	O
__set_errno	O
(	O
EINVAL	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
(	O
options	int
&	O
FTS_NOCHDIR	int
)	O
&&	O
(	O
options	int
&	O
FTS_CWDFD	int
)	O
)	O
{	O
__set_errno	O
(	O
EINVAL	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
(	O
options	int
&	O
(	O
FTS_LOGICAL	int
|	O
FTS_PHYSICAL	int
)	O
)	O
)	O
{	O
__set_errno	O
(	O
EINVAL	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
(	O
sp	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
FTS	struct
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
memset	function
(	O
sp	pointer
,	O
0	int
,	O
sizeof	O
(	O
FTS	struct
)	O
)	O
;	O
sp	pointer
->	O
fts_compar	pointer
=	O
compar	pointer
;	O
sp	pointer
->	O
fts_options	int
=	O
options	int
;	O
if	O
(	O
ISSET	O
(	O
FTS_LOGICAL	int
)	O
)	O
{	O
SET	O
(	O
FTS_NOCHDIR	int
)	O
;	O
CLR	O
(	O
FTS_CWDFD	int
)	O
;	O
}	O
sp	pointer
->	O
fts_cwd_fd	int
=	O
AT_FDCWD	O
;	O
if	O
(	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
&&	O
!	O
HAVE_OPENAT_SUPPORT	int
)	O
{	O
int	O
fd	int
=	O
open	function
(	O
"."	pointer
,	O
O_SEARCH	O
|	O
(	O
ISSET	O
(	O
FTS_NOATIME	int
)	O
?	O
O_NOATIME	O
:	O
0	int
)	O
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
if	O
(	O
openat_needs_fchdir	O
(	O
)	O
)	O
{	O
SET	O
(	O
FTS_NOCHDIR	int
)	O
;	O
CLR	O
(	O
FTS_CWDFD	int
)	O
;	O
}	O
}	O
else	O
{	O
close	function
(	O
fd	int
)	O
;	O
}	O
}	O
{	O
size_t	long
maxarglen	long
=	O
fts_maxarglen	function
(	O
argv	pointer
)	O
;	O
if	O
(	O
!	O
fts_palloc	function
(	O
sp	pointer
,	O
MAX	O
(	O
maxarglen	long
,	O
MAXPATHLEN	O
)	O
)	O
)	O
goto	O
mem1	O
;	O
}	O
if	O
(	O
*	O
argv	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
(	O
parent	pointer
=	O
fts_alloc	function
(	O
sp	pointer
,	O
""	pointer
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
goto	O
mem2	O
;	O
parent	pointer
->	O
fts_level	long
=	O
FTS_ROOTPARENTLEVEL	O
;	O
}	O
defer_stat	bool
=	O
(	O
compar	pointer
==	O
NULL	O
||	O
ISSET	O
(	O
FTS_DEFER_STAT	int
)	O
)	O
;	O
for	O
(	O
root	pointer
=	O
NULL	O
,	O
nitems	long
=	O
0	int
;	O
*	O
argv	pointer
!=	O
NULL	O
;	O
++	O
argv	pointer
,	O
++	O
nitems	long
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
*	O
argv	pointer
)	O
;	O
if	O
(	O
!	O
(	O
options	int
&	O
FTS_VERBATIM	int
)	O
)	O
{	O
char	O
const	O
*	O
v	pointer
=	O
*	O
argv	pointer
;	O
if	O
(	O
2	int
<	O
len	long
&&	O
v	pointer
[	O
len	long
-	O
1	int
]	O
==	O
'/'	O
)	O
while	O
(	O
1	int
<	O
len	long
&&	O
v	pointer
[	O
len	long
-	O
2	int
]	O
==	O
'/'	O
)	O
--	O
len	long
;	O
}	O
if	O
(	O
(	O
p	pointer
=	O
fts_alloc	function
(	O
sp	pointer
,	O
*	O
argv	pointer
,	O
len	long
)	O
)	O
==	O
NULL	O
)	O
goto	O
mem3	O
;	O
p	pointer
->	O
fts_level	long
=	O
FTS_ROOTLEVEL	int
;	O
p	pointer
->	O
fts_parent	pointer
=	O
parent	pointer
;	O
p	pointer
->	O
fts_accpath	pointer
=	O
p	pointer
->	O
fts_name	array
;	O
if	O
(	O
defer_stat	bool
&&	O
root	pointer
!=	O
NULL	O
)	O
{	O
p	pointer
->	O
fts_info	short
=	O
FTS_NSOK	int
;	O
fts_set_stat_required	function
(	O
p	pointer
,	O
true	int
)	O
;	O
}	O
else	O
{	O
p	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
p	pointer
,	O
false	int
)	O
;	O
}	O
if	O
(	O
compar	pointer
)	O
{	O
p	pointer
->	O
fts_link	pointer
=	O
root	pointer
;	O
root	pointer
=	O
p	pointer
;	O
}	O
else	O
{	O
p	pointer
->	O
fts_link	pointer
=	O
NULL	O
;	O
if	O
(	O
root	pointer
==	O
NULL	O
)	O
tmp	pointer
=	O
root	pointer
=	O
p	pointer
;	O
else	O
{	O
tmp	pointer
->	O
fts_link	pointer
=	O
p	pointer
;	O
tmp	pointer
=	O
p	pointer
;	O
}	O
}	O
}	O
if	O
(	O
compar	pointer
&&	O
nitems	long
>	O
1	int
)	O
root	pointer
=	O
fts_sort	function
(	O
sp	pointer
,	O
root	pointer
,	O
nitems	long
)	O
;	O
if	O
(	O
(	O
sp	pointer
->	O
fts_cur	pointer
=	O
fts_alloc	function
(	O
sp	pointer
,	O
""	pointer
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
goto	O
mem3	O
;	O
sp	pointer
->	O
fts_cur	pointer
->	O
fts_link	pointer
=	O
root	pointer
;	O
sp	pointer
->	O
fts_cur	pointer
->	O
fts_info	short
=	O
FTS_INIT	int
;	O
if	O
(	O
!	O
setup_dir	function
(	O
sp	pointer
)	O
)	O
goto	O
mem3	O
;	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
&&	O
!	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
&&	O
(	O
sp	pointer
->	O
fts_rfd	int
=	O
diropen	function
(	O
sp	pointer
,	O
"."	pointer
)	O
)	O
<	O
0	int
)	O
SET	O
(	O
FTS_NOCHDIR	int
)	O
;	O
i_ring_init	function
(	O
&	O
sp	pointer
->	O
fts_fd_ring	struct
,	O
-	O
1	int
)	O
;	O
return	O
(	O
sp	pointer
)	O
;	O
mem3	O
:	O
fts_lfree	function
(	O
root	pointer
)	O
;	O
free	function
(	O
parent	pointer
)	O
;	O
mem2	O
:	O
free	function
(	O
sp	pointer
->	O
fts_path	pointer
)	O
;	O
mem1	O
:	O
free	function
(	O
sp	pointer
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
static	O
void	O
internal_function	O
fts_load	function
(	O
FTS	struct
*	O
sp	pointer
,	O
register	O
FTSENT	struct
*	O
p	pointer
)	O
{	O
register	O
size_t	long
len	long
;	O
register	O
char	O
*	O
cp	pointer
;	O
len	long
=	O
p	pointer
->	O
fts_pathlen	long
=	O
p	pointer
->	O
fts_namelen	long
;	O
memmove	function
(	O
sp	pointer
->	O
fts_path	pointer
,	O
p	pointer
->	O
fts_name	array
,	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
(	O
cp	pointer
=	O
strrchr	function
(	O
p	pointer
->	O
fts_name	array
,	O
'/'	O
)	O
)	O
&&	O
(	O
cp	pointer
!=	O
p	pointer
->	O
fts_name	array
||	O
cp	pointer
[	O
1	int
]	O
)	O
)	O
{	O
len	long
=	O
strlen	function
(	O
++	O
cp	pointer
)	O
;	O
memmove	function
(	O
p	pointer
->	O
fts_name	array
,	O
cp	pointer
,	O
len	long
+	O
1	int
)	O
;	O
p	pointer
->	O
fts_namelen	long
=	O
len	long
;	O
}	O
p	pointer
->	O
fts_accpath	pointer
=	O
p	pointer
->	O
fts_path	pointer
=	O
sp	pointer
->	O
fts_path	pointer
;	O
}	O
int	O
fts_close	function
(	O
FTS	struct
*	O
sp	pointer
)	O
{	O
register	O
FTSENT	struct
*	O
freep	pointer
,	O
*	O
p	pointer
;	O
int	O
saved_errno	int
=	O
0	int
;	O
if	O
(	O
sp	pointer
->	O
fts_cur	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
sp	pointer
->	O
fts_cur	pointer
;	O
p	pointer
->	O
fts_level	long
>=	O
FTS_ROOTLEVEL	int
;	O
)	O
{	O
freep	pointer
=	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
!=	O
NULL	O
?	O
p	pointer
->	O
fts_link	pointer
:	O
p	pointer
->	O
fts_parent	pointer
;	O
free	function
(	O
freep	pointer
)	O
;	O
}	O
free	function
(	O
p	pointer
)	O
;	O
}	O
if	O
(	O
sp	pointer
->	O
fts_child	pointer
)	O
fts_lfree	function
(	O
sp	pointer
->	O
fts_child	pointer
)	O
;	O
free	function
(	O
sp	pointer
->	O
fts_array	pointer
)	O
;	O
free	function
(	O
sp	pointer
->	O
fts_path	pointer
)	O
;	O
if	O
(	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
)	O
{	O
if	O
(	O
0	int
<=	O
sp	pointer
->	O
fts_cwd_fd	int
)	O
if	O
(	O
close	function
(	O
sp	pointer
->	O
fts_cwd_fd	int
)	O
)	O
saved_errno	int
=	O
errno	O
;	O
}	O
else	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
if	O
(	O
fchdir	function
(	O
sp	pointer
->	O
fts_rfd	int
)	O
)	O
saved_errno	int
=	O
errno	O
;	O
if	O
(	O
close	function
(	O
sp	pointer
->	O
fts_rfd	int
)	O
)	O
if	O
(	O
saved_errno	int
==	O
0	int
)	O
saved_errno	int
=	O
errno	O
;	O
}	O
fd_ring_clear	function
(	O
&	O
sp	pointer
->	O
fts_fd_ring	struct
)	O
;	O
if	O
(	O
sp	pointer
->	O
fts_leaf_optimization_works_ht	pointer
)	O
hash_free	function
(	O
sp	pointer
->	O
fts_leaf_optimization_works_ht	pointer
)	O
;	O
free_dir	function
(	O
sp	pointer
)	O
;	O
free	function
(	O
sp	pointer
)	O
;	O
if	O
(	O
saved_errno	int
)	O
{	O
__set_errno	O
(	O
saved_errno	int
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
bool	bool
dirent_inode_sort_may_be_useful	function
(	O
int	O
dir_fd	int
)	O
{	O
struct	O
statfs	struct
fs_buf	struct
;	O
if	O
(	O
fstatfs	function
(	O
dir_fd	int
,	O
&	O
fs_buf	struct
)	O
!=	O
0	int
)	O
return	O
true	int
;	O
switch	O
(	O
fs_buf	struct
.	O
f_type	long
)	O
{	O
case	O
S_MAGIC_TMPFS	int
:	O
case	O
S_MAGIC_NFS	int
:	O
return	O
false	int
;	O
default	O
:	O
return	O
true	int
;	O
}	O
}	O
static	O
bool	bool
leaf_optimization_applies	function
(	O
int	O
dir_fd	int
)	O
{	O
struct	O
statfs	struct
fs_buf	struct
;	O
if	O
(	O
fstatfs	function
(	O
dir_fd	int
,	O
&	O
fs_buf	struct
)	O
!=	O
0	int
)	O
return	O
false	int
;	O
switch	O
(	O
fs_buf	struct
.	O
f_type	long
)	O
{	O
case	O
S_MAGIC_NFS	int
:	O
return	O
true	int
;	O
case	O
S_MAGIC_REISERFS	int
:	O
case	O
S_MAGIC_XFS	int
:	O
return	O
true	int
;	O
case	O
S_MAGIC_PROC	int
:	O
default	O
:	O
return	O
false	int
;	O
}	O
}	O
struct	O
LCO_ent	struct
{	O
dev_t	long
st_dev	long
;	O
bool	bool
opt_ok	bool
;	O
}	O
;	O
enum	O
{	O
LCO_HT_INITIAL_SIZE	int
=	O
13	int
}	O
;	O
static	O
size_t	long
LCO_hash	function
(	O
void	O
const	O
*	O
x	pointer
,	O
size_t	long
table_size	long
)	O
{	O
struct	O
LCO_ent	struct
const	O
*	O
ax	pointer
=	O
x	pointer
;	O
return	O
(	O
uintmax_t	long
)	O
ax	pointer
->	O
st_dev	long
%	O
table_size	long
;	O
}	O
static	O
bool	bool
LCO_compare	function
(	O
void	O
const	O
*	O
x	pointer
,	O
void	O
const	O
*	O
y	pointer
)	O
{	O
struct	O
LCO_ent	struct
const	O
*	O
ax	pointer
=	O
x	pointer
;	O
struct	O
LCO_ent	struct
const	O
*	O
ay	pointer
=	O
y	pointer
;	O
return	O
ax	pointer
->	O
st_dev	long
==	O
ay	pointer
->	O
st_dev	long
;	O
}	O
static	O
bool	bool
link_count_optimize_ok	function
(	O
FTSENT	struct
const	O
*	O
p	pointer
)	O
{	O
FTS	struct
*	O
sp	pointer
=	O
p	pointer
->	O
fts_fts	pointer
;	O
Hash_table	struct
*	O
h	pointer
=	O
sp	pointer
->	O
fts_leaf_optimization_works_ht	pointer
;	O
struct	O
LCO_ent	struct
tmp	pointer
;	O
struct	O
LCO_ent	struct
*	O
ent	pointer
;	O
bool	bool
opt_ok	bool
;	O
struct	O
LCO_ent	struct
*	O
t2	pointer
;	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
)	O
return	O
false	int
;	O
if	O
(	O
h	pointer
==	O
NULL	O
)	O
{	O
h	pointer
=	O
sp	pointer
->	O
fts_leaf_optimization_works_ht	pointer
=	O
hash_initialize	function
(	O
LCO_HT_INITIAL_SIZE	int
,	O
NULL	O
,	O
LCO_hash	function
,	O
LCO_compare	function
,	O
free	function
)	O
;	O
if	O
(	O
h	pointer
==	O
NULL	O
)	O
return	O
false	int
;	O
}	O
tmp	pointer
.	O
st_dev	long
=	O
p	pointer
->	O
fts_statp	array
->	O
st_dev	long
;	O
ent	pointer
=	O
hash_lookup	function
(	O
h	pointer
,	O
&	O
tmp	pointer
)	O
;	O
if	O
(	O
ent	pointer
)	O
return	O
ent	pointer
->	O
opt_ok	bool
;	O
t2	pointer
=	O
malloc	function
(	O
sizeof	O
*	O
t2	pointer
)	O
;	O
if	O
(	O
t2	pointer
==	O
NULL	O
)	O
return	O
false	int
;	O
opt_ok	bool
=	O
leaf_optimization_applies	function
(	O
sp	pointer
->	O
fts_cwd_fd	int
)	O
;	O
t2	pointer
->	O
opt_ok	bool
=	O
opt_ok	bool
;	O
t2	pointer
->	O
st_dev	long
=	O
p	pointer
->	O
fts_statp	array
->	O
st_dev	long
;	O
ent	pointer
=	O
hash_insert	function
(	O
h	pointer
,	O
t2	pointer
)	O
;	O
if	O
(	O
ent	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
t2	pointer
)	O
;	O
return	O
false	int
;	O
}	O
fts_assert	O
(	O
ent	pointer
==	O
t2	pointer
)	O
;	O
return	O
opt_ok	bool
;	O
}	O
FTSENT	struct
*	O
fts_read	function
(	O
register	O
FTS	struct
*	O
sp	pointer
)	O
{	O
register	O
FTSENT	struct
*	O
p	pointer
,	O
*	O
tmp	pointer
;	O
register	O
unsigned	O
short	O
int	O
instr	short
;	O
register	O
char	O
*	O
t	pointer
;	O
if	O
(	O
sp	pointer
->	O
fts_cur	pointer
==	O
NULL	O
||	O
ISSET	O
(	O
FTS_STOP	int
)	O
)	O
return	O
(	O
NULL	O
)	O
;	O
p	pointer
=	O
sp	pointer
->	O
fts_cur	pointer
;	O
instr	short
=	O
p	pointer
->	O
fts_instr	short
;	O
p	pointer
->	O
fts_instr	short
=	O
FTS_NOINSTR	int
;	O
if	O
(	O
instr	short
==	O
FTS_AGAIN	int
)	O
{	O
p	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
p	pointer
,	O
false	int
)	O
;	O
return	O
(	O
p	pointer
)	O
;	O
}	O
Dprintf	O
(	O
(	O
"fts_read: p=%s\n"	pointer
,	O
p	pointer
->	O
fts_info	short
==	O
FTS_INIT	int
?	O
""	pointer
:	O
p	pointer
->	O
fts_path	pointer
)	O
)	O
;	O
if	O
(	O
instr	short
==	O
FTS_FOLLOW	int
&&	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_SL	int
||	O
p	pointer
->	O
fts_info	short
==	O
FTS_SLNONE	int
)	O
)	O
{	O
p	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
p	pointer
,	O
true	int
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_D	int
&&	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
if	O
(	O
(	O
p	pointer
->	O
fts_symfd	int
=	O
diropen	function
(	O
sp	pointer
,	O
"."	pointer
)	O
)	O
<	O
0	int
)	O
{	O
p	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
p	pointer
->	O
fts_info	short
=	O
FTS_ERR	int
;	O
}	O
else	O
p	pointer
->	O
fts_flags	short
|=	O
FTS_SYMFOLLOW	int
;	O
}	O
goto	O
check_for_dir	O
;	O
}	O
if	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_D	int
)	O
{	O
if	O
(	O
instr	short
==	O
FTS_SKIP	int
||	O
(	O
ISSET	O
(	O
FTS_XDEV	int
)	O
&&	O
p	pointer
->	O
fts_statp	array
->	O
st_dev	long
!=	O
sp	pointer
->	O
fts_dev	long
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
fts_flags	short
&	O
FTS_SYMFOLLOW	int
)	O
(	O
void	O
)	O
close	function
(	O
p	pointer
->	O
fts_symfd	int
)	O
;	O
if	O
(	O
sp	pointer
->	O
fts_child	pointer
)	O
{	O
fts_lfree	function
(	O
sp	pointer
->	O
fts_child	pointer
)	O
;	O
sp	pointer
->	O
fts_child	pointer
=	O
NULL	O
;	O
}	O
p	pointer
->	O
fts_info	short
=	O
FTS_DP	int
;	O
LEAVE_DIR	O
(	O
sp	pointer
,	O
p	pointer
,	O
"1"	pointer
)	O
;	O
return	O
(	O
p	pointer
)	O
;	O
}	O
if	O
(	O
sp	pointer
->	O
fts_child	pointer
!=	O
NULL	O
&&	O
ISSET	O
(	O
FTS_NAMEONLY	int
)	O
)	O
{	O
CLR	O
(	O
FTS_NAMEONLY	int
)	O
;	O
fts_lfree	function
(	O
sp	pointer
->	O
fts_child	pointer
)	O
;	O
sp	pointer
->	O
fts_child	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
sp	pointer
->	O
fts_child	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
fts_safe_changedir	function
(	O
sp	pointer
,	O
p	pointer
,	O
-	O
1	int
,	O
p	pointer
->	O
fts_accpath	pointer
)	O
)	O
{	O
p	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
p	pointer
->	O
fts_flags	short
|=	O
FTS_DONTCHDIR	int
;	O
for	O
(	O
p	pointer
=	O
sp	pointer
->	O
fts_child	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
)	O
p	pointer
->	O
fts_accpath	pointer
=	O
p	pointer
->	O
fts_parent	pointer
->	O
fts_accpath	pointer
;	O
}	O
}	O
else	O
if	O
(	O
(	O
sp	pointer
->	O
fts_child	pointer
=	O
fts_build	function
(	O
sp	pointer
,	O
BREAD	int
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
ISSET	O
(	O
FTS_STOP	int
)	O
)	O
return	O
(	O
NULL	O
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_errno	int
&&	O
p	pointer
->	O
fts_info	short
!=	O
FTS_DNR	int
)	O
p	pointer
->	O
fts_info	short
=	O
FTS_ERR	int
;	O
LEAVE_DIR	O
(	O
sp	pointer
,	O
p	pointer
,	O
"2"	pointer
)	O
;	O
return	O
(	O
p	pointer
)	O
;	O
}	O
p	pointer
=	O
sp	pointer
->	O
fts_child	pointer
;	O
sp	pointer
->	O
fts_child	pointer
=	O
NULL	O
;	O
goto	O
name	pointer
;	O
}	O
next	O
:	O
tmp	pointer
=	O
p	pointer
;	O
if	O
(	O
p	pointer
->	O
fts_link	pointer
==	O
NULL	O
&&	O
p	pointer
->	O
fts_parent	pointer
->	O
fts_dirp	pointer
)	O
{	O
p	pointer
=	O
tmp	pointer
->	O
fts_parent	pointer
;	O
sp	pointer
->	O
fts_cur	pointer
=	O
p	pointer
;	O
sp	pointer
->	O
fts_path	pointer
[	O
p	pointer
->	O
fts_pathlen	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
(	O
p	pointer
=	O
fts_build	function
(	O
sp	pointer
,	O
BREAD	int
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
ISSET	O
(	O
FTS_STOP	int
)	O
)	O
return	O
NULL	O
;	O
goto	O
cd_dot_dot	O
;	O
}	O
free	function
(	O
tmp	pointer
)	O
;	O
goto	O
name	pointer
;	O
}	O
if	O
(	O
(	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
)	O
!=	O
NULL	O
)	O
{	O
sp	pointer
->	O
fts_cur	pointer
=	O
p	pointer
;	O
free	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_level	long
==	O
FTS_ROOTLEVEL	int
)	O
{	O
if	O
(	O
restore_initial_cwd	function
(	O
sp	pointer
)	O
)	O
{	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
free_dir	function
(	O
sp	pointer
)	O
;	O
fts_load	function
(	O
sp	pointer
,	O
p	pointer
)	O
;	O
setup_dir	function
(	O
sp	pointer
)	O
;	O
goto	O
check_for_dir	O
;	O
}	O
if	O
(	O
p	pointer
->	O
fts_instr	short
==	O
FTS_SKIP	int
)	O
goto	O
next	O
;	O
if	O
(	O
p	pointer
->	O
fts_instr	short
==	O
FTS_FOLLOW	int
)	O
{	O
p	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
p	pointer
,	O
true	int
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_D	int
&&	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
if	O
(	O
(	O
p	pointer
->	O
fts_symfd	int
=	O
diropen	function
(	O
sp	pointer
,	O
"."	pointer
)	O
)	O
<	O
0	int
)	O
{	O
p	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
p	pointer
->	O
fts_info	short
=	O
FTS_ERR	int
;	O
}	O
else	O
p	pointer
->	O
fts_flags	short
|=	O
FTS_SYMFOLLOW	int
;	O
}	O
p	pointer
->	O
fts_instr	short
=	O
FTS_NOINSTR	int
;	O
}	O
name	pointer
:	O
t	pointer
=	O
sp	pointer
->	O
fts_path	pointer
+	O
NAPPEND	O
(	O
p	pointer
->	O
fts_parent	pointer
)	O
;	O
*	O
t	pointer
++	O
=	O
'/'	O
;	O
memmove	function
(	O
t	pointer
,	O
p	pointer
->	O
fts_name	array
,	O
p	pointer
->	O
fts_namelen	long
+	O
1	int
)	O
;	O
check_for_dir	O
:	O
sp	pointer
->	O
fts_cur	pointer
=	O
p	pointer
;	O
if	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_NSOK	int
)	O
{	O
if	O
(	O
p	pointer
->	O
fts_statp	array
->	O
st_size	long
==	O
FTS_STAT_REQUIRED	int
)	O
{	O
FTSENT	struct
*	O
parent	pointer
=	O
p	pointer
->	O
fts_parent	pointer
;	O
if	O
(	O
FTS_ROOTLEVEL	int
<	O
p	pointer
->	O
fts_level	long
&&	O
parent	pointer
->	O
fts_n_dirs_remaining	long
==	O
0	int
&&	O
ISSET	O
(	O
FTS_NOSTAT	int
)	O
&&	O
ISSET	O
(	O
FTS_PHYSICAL	int
)	O
&&	O
link_count_optimize_ok	function
(	O
parent	pointer
)	O
)	O
{	O
}	O
else	O
{	O
p	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
p	pointer
,	O
false	int
)	O
;	O
if	O
(	O
S_ISDIR	O
(	O
p	pointer
->	O
fts_statp	array
->	O
st_mode	int
)	O
&&	O
p	pointer
->	O
fts_level	long
!=	O
FTS_ROOTLEVEL	int
&&	O
parent	pointer
->	O
fts_n_dirs_remaining	long
)	O
parent	pointer
->	O
fts_n_dirs_remaining	long
--	O
;	O
}	O
}	O
else	O
fts_assert	O
(	O
p	pointer
->	O
fts_statp	array
->	O
st_size	long
==	O
FTS_NO_STAT_REQUIRED	int
)	O
;	O
}	O
if	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_D	int
)	O
{	O
if	O
(	O
p	pointer
->	O
fts_level	long
==	O
FTS_ROOTLEVEL	int
)	O
sp	pointer
->	O
fts_dev	long
=	O
p	pointer
->	O
fts_statp	array
->	O
st_dev	long
;	O
Dprintf	O
(	O
(	O
"  entering: %s\n"	pointer
,	O
p	pointer
->	O
fts_path	pointer
)	O
)	O
;	O
if	O
(	O
!	O
enter_dir	function
(	O
sp	pointer
,	O
p	pointer
)	O
)	O
{	O
__set_errno	O
(	O
ENOMEM	int
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
return	O
p	pointer
;	O
}	O
cd_dot_dot	O
:	O
p	pointer
=	O
tmp	pointer
->	O
fts_parent	pointer
;	O
sp	pointer
->	O
fts_cur	pointer
=	O
p	pointer
;	O
free	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_level	long
==	O
FTS_ROOTPARENTLEVEL	O
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
__set_errno	O
(	O
0	int
)	O
;	O
return	O
(	O
sp	pointer
->	O
fts_cur	pointer
=	O
NULL	O
)	O
;	O
}	O
fts_assert	O
(	O
p	pointer
->	O
fts_info	short
!=	O
FTS_NSOK	int
)	O
;	O
sp	pointer
->	O
fts_path	pointer
[	O
p	pointer
->	O
fts_pathlen	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
p	pointer
->	O
fts_level	long
==	O
FTS_ROOTLEVEL	int
)	O
{	O
if	O
(	O
restore_initial_cwd	function
(	O
sp	pointer
)	O
)	O
{	O
p	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
p	pointer
->	O
fts_flags	short
&	O
FTS_SYMFOLLOW	int
)	O
{	O
if	O
(	O
FCHDIR	O
(	O
sp	pointer
,	O
p	pointer
->	O
fts_symfd	int
)	O
)	O
{	O
p	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
}	O
(	O
void	O
)	O
close	function
(	O
p	pointer
->	O
fts_symfd	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
p	pointer
->	O
fts_flags	short
&	O
FTS_DONTCHDIR	int
)	O
&&	O
fts_safe_changedir	function
(	O
sp	pointer
,	O
p	pointer
->	O
fts_parent	pointer
,	O
-	O
1	int
,	O
".."	pointer
)	O
)	O
{	O
p	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
}	O
if	O
(	O
p	pointer
->	O
fts_info	short
!=	O
FTS_DC	int
)	O
{	O
p	pointer
->	O
fts_info	short
=	O
p	pointer
->	O
fts_errno	int
?	O
FTS_ERR	int
:	O
FTS_DP	int
;	O
if	O
(	O
p	pointer
->	O
fts_errno	int
==	O
0	int
)	O
LEAVE_DIR	O
(	O
sp	pointer
,	O
p	pointer
,	O
"3"	pointer
)	O
;	O
}	O
return	O
ISSET	O
(	O
FTS_STOP	int
)	O
?	O
NULL	O
:	O
p	pointer
;	O
}	O
int	O
fts_set	function
(	O
FTS	struct
*	O
sp	pointer
_GL_UNUSED	O
,	O
FTSENT	struct
*	O
p	pointer
,	O
int	O
instr	short
)	O
{	O
if	O
(	O
instr	short
!=	O
0	int
&&	O
instr	short
!=	O
FTS_AGAIN	int
&&	O
instr	short
!=	O
FTS_FOLLOW	int
&&	O
instr	short
!=	O
FTS_NOINSTR	int
&&	O
instr	short
!=	O
FTS_SKIP	int
)	O
{	O
__set_errno	O
(	O
EINVAL	int
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
p	pointer
->	O
fts_instr	short
=	O
instr	short
;	O
return	O
(	O
0	int
)	O
;	O
}	O
FTSENT	struct
*	O
fts_children	function
(	O
register	O
FTS	struct
*	O
sp	pointer
,	O
int	O
instr	short
)	O
{	O
register	O
FTSENT	struct
*	O
p	pointer
;	O
int	O
fd	int
;	O
if	O
(	O
instr	short
!=	O
0	int
&&	O
instr	short
!=	O
FTS_NAMEONLY	int
)	O
{	O
__set_errno	O
(	O
EINVAL	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
p	pointer
=	O
sp	pointer
->	O
fts_cur	pointer
;	O
__set_errno	O
(	O
0	int
)	O
;	O
if	O
(	O
ISSET	O
(	O
FTS_STOP	int
)	O
)	O
return	O
(	O
NULL	O
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_INIT	int
)	O
return	O
(	O
p	pointer
->	O
fts_link	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_info	short
!=	O
FTS_D	int
)	O
return	O
(	O
NULL	O
)	O
;	O
if	O
(	O
sp	pointer
->	O
fts_child	pointer
!=	O
NULL	O
)	O
fts_lfree	function
(	O
sp	pointer
->	O
fts_child	pointer
)	O
;	O
if	O
(	O
instr	short
==	O
FTS_NAMEONLY	int
)	O
{	O
SET	O
(	O
FTS_NAMEONLY	int
)	O
;	O
instr	short
=	O
BNAMES	int
;	O
}	O
else	O
instr	short
=	O
BCHILD	int
;	O
if	O
(	O
p	pointer
->	O
fts_level	long
!=	O
FTS_ROOTLEVEL	int
||	O
p	pointer
->	O
fts_accpath	pointer
[	O
0	int
]	O
==	O
'/'	O
||	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
return	O
(	O
sp	pointer
->	O
fts_child	pointer
=	O
fts_build	function
(	O
sp	pointer
,	O
instr	short
)	O
)	O
;	O
if	O
(	O
(	O
fd	int
=	O
diropen	function
(	O
sp	pointer
,	O
"."	pointer
)	O
)	O
<	O
0	int
)	O
return	O
(	O
sp	pointer
->	O
fts_child	pointer
=	O
NULL	O
)	O
;	O
sp	pointer
->	O
fts_child	pointer
=	O
fts_build	function
(	O
sp	pointer
,	O
instr	short
)	O
;	O
if	O
(	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
)	O
{	O
cwd_advance_fd	function
(	O
sp	pointer
,	O
fd	int
,	O
true	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
fchdir	function
(	O
fd	int
)	O
)	O
{	O
int	O
saved_errno	int
=	O
errno	O
;	O
close	function
(	O
fd	int
)	O
;	O
__set_errno	O
(	O
saved_errno	int
)	O
;	O
return	O
NULL	O
;	O
}	O
close	function
(	O
fd	int
)	O
;	O
}	O
return	O
(	O
sp	pointer
->	O
fts_child	pointer
)	O
;	O
}	O
static	O
int	O
fts_compare_ino	function
(	O
struct	O
_ftsent	struct
const	O
*	O
*	O
a	pointer
,	O
struct	O
_ftsent	struct
const	O
*	O
*	O
b	pointer
)	O
{	O
return	O
(	O
a	pointer
[	O
0	int
]	O
->	O
fts_statp	array
->	O
st_ino	long
<	O
b	pointer
[	O
0	int
]	O
->	O
fts_statp	array
->	O
st_ino	long
?	O
-	O
1	int
:	O
b	pointer
[	O
0	int
]	O
->	O
fts_statp	array
->	O
st_ino	long
<	O
a	pointer
[	O
0	int
]	O
->	O
fts_statp	array
->	O
st_ino	long
?	O
1	int
:	O
0	int
)	O
;	O
}	O
static	O
void	O
set_stat_type	function
(	O
struct	O
stat	struct
*	O
st	pointer
,	O
unsigned	O
int	O
dtype	int
)	O
{	O
mode_t	int
type	enum
;	O
switch	O
(	O
dtype	int
)	O
{	O
case	O
DT_BLK	int
:	O
type	enum
=	O
S_IFBLK	O
;	O
break	O
;	O
case	O
DT_CHR	int
:	O
type	enum
=	O
S_IFCHR	O
;	O
break	O
;	O
case	O
DT_DIR	int
:	O
type	enum
=	O
S_IFDIR	O
;	O
break	O
;	O
case	O
DT_FIFO	int
:	O
type	enum
=	O
S_IFIFO	O
;	O
break	O
;	O
case	O
DT_LNK	int
:	O
type	enum
=	O
S_IFLNK	O
;	O
break	O
;	O
case	O
DT_REG	int
:	O
type	enum
=	O
S_IFREG	O
;	O
break	O
;	O
case	O
DT_SOCK	int
:	O
type	enum
=	O
S_IFSOCK	O
;	O
break	O
;	O
default	O
:	O
type	enum
=	O
0	int
;	O
}	O
st	pointer
->	O
st_mode	int
=	O
type	enum
;	O
}	O
static	O
FTSENT	struct
*	O
internal_function	O
fts_build	function
(	O
register	O
FTS	struct
*	O
sp	pointer
,	O
int	O
type	enum
)	O
{	O
register	O
FTSENT	struct
*	O
p	pointer
,	O
*	O
head	pointer
;	O
register	O
size_t	long
nitems	long
;	O
FTSENT	struct
*	O
tail	pointer
;	O
void	O
*	O
oldaddr	pointer
;	O
int	O
saved_errno	int
;	O
bool	bool
descend	bool
;	O
bool	bool
doadjust	bool
;	O
ptrdiff_t	long
level	long
;	O
nlink_t	long
nlinks	long
;	O
bool	bool
nostat	bool
;	O
size_t	long
len	long
,	O
maxlen	long
,	O
new_len	long
;	O
char	O
*	O
cp	pointer
;	O
int	O
dir_fd	int
;	O
FTSENT	struct
*	O
cur	pointer
=	O
sp	pointer
->	O
fts_cur	pointer
;	O
bool	bool
continue_readdir	bool
=	O
!	O
!	O
cur	pointer
->	O
fts_dirp	pointer
;	O
size_t	long
max_entries	long
;	O
if	O
(	O
continue_readdir	bool
)	O
{	O
DIR	struct
*	O
dp	pointer
=	O
cur	pointer
->	O
fts_dirp	pointer
;	O
dir_fd	int
=	O
dirfd	function
(	O
dp	pointer
)	O
;	O
if	O
(	O
dir_fd	int
<	O
0	int
)	O
{	O
closedir_and_clear	O
(	O
cur	pointer
->	O
fts_dirp	pointer
)	O
;	O
if	O
(	O
type	enum
==	O
BREAD	int
)	O
{	O
cur	pointer
->	O
fts_info	short
=	O
FTS_DNR	int
;	O
cur	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
}	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
cur	pointer
->	O
fts_dirp	pointer
=	O
fts_opendir	O
(	O
cur	pointer
->	O
fts_accpath	pointer
,	O
&	O
dir_fd	int
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
type	enum
==	O
BREAD	int
)	O
{	O
cur	pointer
->	O
fts_info	short
=	O
FTS_DNR	int
;	O
cur	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
}	O
return	O
NULL	O
;	O
}	O
if	O
(	O
cur	pointer
->	O
fts_info	short
==	O
FTS_NSOK	int
)	O
cur	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
cur	pointer
,	O
false	int
)	O
;	O
else	O
if	O
(	O
sp	pointer
->	O
fts_options	int
&	O
FTS_TIGHT_CYCLE_CHECK	int
)	O
{	O
LEAVE_DIR	O
(	O
sp	pointer
,	O
cur	pointer
,	O
"4"	pointer
)	O
;	O
fts_stat	function
(	O
sp	pointer
,	O
cur	pointer
,	O
false	int
)	O
;	O
if	O
(	O
!	O
enter_dir	function
(	O
sp	pointer
,	O
cur	pointer
)	O
)	O
{	O
__set_errno	O
(	O
ENOMEM	int
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O
max_entries	long
=	O
sp	pointer
->	O
fts_compar	pointer
?	O
SIZE_MAX	O
:	O
FTS_MAX_READDIR_ENTRIES	int
;	O
if	O
(	O
type	enum
==	O
BNAMES	int
)	O
{	O
nlinks	long
=	O
0	int
;	O
nostat	bool
=	O
false	int
;	O
}	O
else	O
if	O
(	O
ISSET	O
(	O
FTS_NOSTAT	int
)	O
&&	O
ISSET	O
(	O
FTS_PHYSICAL	int
)	O
)	O
{	O
nlinks	long
=	O
(	O
cur	pointer
->	O
fts_statp	array
->	O
st_nlink	long
-	O
(	O
ISSET	O
(	O
FTS_SEEDOT	int
)	O
?	O
0	int
:	O
2	int
)	O
)	O
;	O
nostat	bool
=	O
true	int
;	O
}	O
else	O
{	O
nlinks	long
=	O
-	O
1	int
;	O
nostat	bool
=	O
false	int
;	O
}	O
if	O
(	O
continue_readdir	bool
)	O
{	O
descend	bool
=	O
true	int
;	O
}	O
else	O
if	O
(	O
nlinks	long
||	O
type	enum
==	O
BREAD	int
)	O
{	O
if	O
(	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
)	O
{	O
dir_fd	int
=	O
dup	function
(	O
dir_fd	int
)	O
;	O
if	O
(	O
0	int
<=	O
dir_fd	int
)	O
set_cloexec_flag	function
(	O
dir_fd	int
,	O
true	int
)	O
;	O
}	O
if	O
(	O
dir_fd	int
<	O
0	int
||	O
fts_safe_changedir	function
(	O
sp	pointer
,	O
cur	pointer
,	O
dir_fd	int
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
nlinks	long
&&	O
type	enum
==	O
BREAD	int
)	O
cur	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
cur	pointer
->	O
fts_flags	short
|=	O
FTS_DONTCHDIR	int
;	O
descend	bool
=	O
false	int
;	O
closedir_and_clear	O
(	O
cur	pointer
->	O
fts_dirp	pointer
)	O
;	O
if	O
(	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
&&	O
0	int
<=	O
dir_fd	int
)	O
close	function
(	O
dir_fd	int
)	O
;	O
cur	pointer
->	O
fts_dirp	pointer
=	O
NULL	O
;	O
}	O
else	O
descend	bool
=	O
true	int
;	O
}	O
else	O
descend	bool
=	O
false	int
;	O
len	long
=	O
NAPPEND	O
(	O
cur	pointer
)	O
;	O
if	O
(	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
cp	pointer
=	O
sp	pointer
->	O
fts_path	pointer
+	O
len	long
;	O
*	O
cp	pointer
++	O
=	O
'/'	O
;	O
}	O
else	O
{	O
cp	pointer
=	O
NULL	O
;	O
}	O
len	long
++	O
;	O
maxlen	long
=	O
sp	pointer
->	O
fts_pathlen	long
-	O
len	long
;	O
level	long
=	O
cur	pointer
->	O
fts_level	long
+	O
1	int
;	O
doadjust	bool
=	O
false	int
;	O
head	pointer
=	O
NULL	O
;	O
tail	pointer
=	O
NULL	O
;	O
nitems	long
=	O
0	int
;	O
while	O
(	O
cur	pointer
->	O
fts_dirp	pointer
)	O
{	O
bool	bool
is_dir	bool
;	O
size_t	long
d_namelen	long
;	O
struct	O
dirent	struct
*	O
dp	pointer
=	O
readdir	function
(	O
cur	pointer
->	O
fts_dirp	pointer
)	O
;	O
if	O
(	O
dp	pointer
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_SEEDOT	int
)	O
&&	O
ISDOT	O
(	O
dp	pointer
->	O
d_name	array
)	O
)	O
continue	O
;	O
d_namelen	long
=	O
_D_EXACT_NAMLEN	O
(	O
dp	pointer
)	O
;	O
p	pointer
=	O
fts_alloc	function
(	O
sp	pointer
,	O
dp	pointer
->	O
d_name	array
,	O
d_namelen	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
goto	O
mem1	O
;	O
if	O
(	O
d_namelen	long
>=	O
maxlen	long
)	O
{	O
oldaddr	pointer
=	O
sp	pointer
->	O
fts_path	pointer
;	O
if	O
(	O
!	O
fts_palloc	function
(	O
sp	pointer
,	O
d_namelen	long
+	O
len	long
+	O
1	int
)	O
)	O
{	O
mem1	O
:	O
saved_errno	int
=	O
errno	O
;	O
free	function
(	O
p	pointer
)	O
;	O
fts_lfree	function
(	O
head	pointer
)	O
;	O
closedir_and_clear	O
(	O
cur	pointer
->	O
fts_dirp	pointer
)	O
;	O
cur	pointer
->	O
fts_info	short
=	O
FTS_ERR	int
;	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
__set_errno	O
(	O
saved_errno	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
oldaddr	pointer
!=	O
sp	pointer
->	O
fts_path	pointer
)	O
{	O
doadjust	bool
=	O
true	int
;	O
if	O
(	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
cp	pointer
=	O
sp	pointer
->	O
fts_path	pointer
+	O
len	long
;	O
}	O
maxlen	long
=	O
sp	pointer
->	O
fts_pathlen	long
-	O
len	long
;	O
}	O
new_len	long
=	O
len	long
+	O
d_namelen	long
;	O
if	O
(	O
new_len	long
<	O
len	long
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
fts_lfree	function
(	O
head	pointer
)	O
;	O
closedir_and_clear	O
(	O
cur	pointer
->	O
fts_dirp	pointer
)	O
;	O
cur	pointer
->	O
fts_info	short
=	O
FTS_ERR	int
;	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
__set_errno	O
(	O
ENAMETOOLONG	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
p	pointer
->	O
fts_level	long
=	O
level	long
;	O
p	pointer
->	O
fts_parent	pointer
=	O
sp	pointer
->	O
fts_cur	pointer
;	O
p	pointer
->	O
fts_pathlen	long
=	O
new_len	long
;	O
p	pointer
->	O
fts_statp	array
->	O
st_ino	long
=	O
D_INO	O
(	O
dp	pointer
)	O
;	O
if	O
(	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
p	pointer
->	O
fts_accpath	pointer
=	O
p	pointer
->	O
fts_path	pointer
;	O
memmove	function
(	O
cp	pointer
,	O
p	pointer
->	O
fts_name	array
,	O
p	pointer
->	O
fts_namelen	long
+	O
1	int
)	O
;	O
}	O
else	O
p	pointer
->	O
fts_accpath	pointer
=	O
p	pointer
->	O
fts_name	array
;	O
if	O
(	O
sp	pointer
->	O
fts_compar	pointer
==	O
NULL	O
||	O
ISSET	O
(	O
FTS_DEFER_STAT	int
)	O
)	O
{	O
bool	bool
skip_stat	bool
=	O
(	O
ISSET	O
(	O
FTS_PHYSICAL	int
)	O
&&	O
ISSET	O
(	O
FTS_NOSTAT	int
)	O
&&	O
DT_IS_KNOWN	O
(	O
dp	pointer
)	O
&&	O
!	O
DT_MUST_BE	O
(	O
dp	pointer
,	O
DT_DIR	int
)	O
)	O
;	O
p	pointer
->	O
fts_info	short
=	O
FTS_NSOK	int
;	O
set_stat_type	function
(	O
p	pointer
->	O
fts_statp	array
,	O
D_TYPE	O
(	O
dp	pointer
)	O
)	O
;	O
fts_set_stat_required	function
(	O
p	pointer
,	O
!	O
skip_stat	bool
)	O
;	O
is_dir	bool
=	O
(	O
ISSET	O
(	O
FTS_PHYSICAL	int
)	O
&&	O
DT_MUST_BE	O
(	O
dp	pointer
,	O
DT_DIR	int
)	O
)	O
;	O
}	O
else	O
{	O
p	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
p	pointer
,	O
false	int
)	O
;	O
is_dir	bool
=	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_D	int
||	O
p	pointer
->	O
fts_info	short
==	O
FTS_DC	int
||	O
p	pointer
->	O
fts_info	short
==	O
FTS_DOT	int
)	O
;	O
}	O
if	O
(	O
nlinks	long
>	O
0	int
&&	O
is_dir	bool
)	O
nlinks	long
-=	O
nostat	bool
;	O
p	pointer
->	O
fts_link	pointer
=	O
NULL	O
;	O
if	O
(	O
head	pointer
==	O
NULL	O
)	O
head	pointer
=	O
tail	pointer
=	O
p	pointer
;	O
else	O
{	O
tail	pointer
->	O
fts_link	pointer
=	O
p	pointer
;	O
tail	pointer
=	O
p	pointer
;	O
}	O
++	O
nitems	long
;	O
if	O
(	O
max_entries	long
<=	O
nitems	long
)	O
{	O
goto	O
break_without_closedir	O
;	O
}	O
}	O
if	O
(	O
cur	pointer
->	O
fts_dirp	pointer
)	O
closedir_and_clear	O
(	O
cur	pointer
->	O
fts_dirp	pointer
)	O
;	O
break_without_closedir	O
:	O
if	O
(	O
doadjust	bool
)	O
fts_padjust	function
(	O
sp	pointer
,	O
head	pointer
)	O
;	O
if	O
(	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
if	O
(	O
len	long
==	O
sp	pointer
->	O
fts_pathlen	long
||	O
nitems	long
==	O
0	int
)	O
--	O
cp	pointer
;	O
*	O
cp	pointer
=	O
'\0'	O
;	O
}	O
if	O
(	O
!	O
continue_readdir	bool
&&	O
descend	bool
&&	O
(	O
type	enum
==	O
BCHILD	int
||	O
!	O
nitems	long
)	O
&&	O
(	O
cur	pointer
->	O
fts_level	long
==	O
FTS_ROOTLEVEL	int
?	O
restore_initial_cwd	function
(	O
sp	pointer
)	O
:	O
fts_safe_changedir	function
(	O
sp	pointer
,	O
cur	pointer
->	O
fts_parent	pointer
,	O
-	O
1	int
,	O
".."	pointer
)	O
)	O
)	O
{	O
cur	pointer
->	O
fts_info	short
=	O
FTS_ERR	int
;	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
fts_lfree	function
(	O
head	pointer
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
nitems	long
)	O
{	O
if	O
(	O
type	enum
==	O
BREAD	int
)	O
cur	pointer
->	O
fts_info	short
=	O
FTS_DP	int
;	O
fts_lfree	function
(	O
head	pointer
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
nitems	long
>	O
_FTS_INODE_SORT_DIR_ENTRIES_THRESHOLD	int
&&	O
!	O
sp	pointer
->	O
fts_compar	pointer
&&	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
&&	O
dirent_inode_sort_may_be_useful	function
(	O
sp	pointer
->	O
fts_cwd_fd	int
)	O
)	O
{	O
sp	pointer
->	O
fts_compar	pointer
=	O
fts_compare_ino	function
;	O
head	pointer
=	O
fts_sort	function
(	O
sp	pointer
,	O
head	pointer
,	O
nitems	long
)	O
;	O
sp	pointer
->	O
fts_compar	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
sp	pointer
->	O
fts_compar	pointer
&&	O
nitems	long
>	O
1	int
)	O
head	pointer
=	O
fts_sort	function
(	O
sp	pointer
,	O
head	pointer
,	O
nitems	long
)	O
;	O
return	O
(	O
head	pointer
)	O
;	O
}	O
static	O
unsigned	O
short	O
int	O
internal_function	O
fts_stat	function
(	O
FTS	struct
*	O
sp	pointer
,	O
register	O
FTSENT	struct
*	O
p	pointer
,	O
bool	bool
follow	bool
)	O
{	O
struct	O
stat	struct
*	O
sbp	pointer
=	O
p	pointer
->	O
fts_statp	array
;	O
int	O
saved_errno	int
;	O
if	O
(	O
p	pointer
->	O
fts_level	long
==	O
FTS_ROOTLEVEL	int
&&	O
ISSET	O
(	O
FTS_COMFOLLOW	int
)	O
)	O
follow	bool
=	O
true	int
;	O
if	O
(	O
ISSET	O
(	O
FTS_LOGICAL	int
)	O
||	O
follow	bool
)	O
{	O
if	O
(	O
stat	struct
(	O
p	pointer
->	O
fts_accpath	pointer
,	O
sbp	pointer
)	O
)	O
{	O
saved_errno	int
=	O
errno	O
;	O
if	O
(	O
errno	O
==	O
ENOENT	int
&&	O
lstat	function
(	O
p	pointer
->	O
fts_accpath	pointer
,	O
sbp	pointer
)	O
==	O
0	int
)	O
{	O
__set_errno	O
(	O
0	int
)	O
;	O
return	O
(	O
FTS_SLNONE	int
)	O
;	O
}	O
p	pointer
->	O
fts_errno	int
=	O
saved_errno	int
;	O
goto	O
err	long
;	O
}	O
}	O
else	O
if	O
(	O
fstatat	function
(	O
sp	pointer
->	O
fts_cwd_fd	int
,	O
p	pointer
->	O
fts_accpath	pointer
,	O
sbp	pointer
,	O
AT_SYMLINK_NOFOLLOW	int
)	O
)	O
{	O
p	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
err	long
:	O
memset	function
(	O
sbp	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
stat	struct
)	O
)	O
;	O
return	O
(	O
FTS_NS	int
)	O
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
sbp	pointer
->	O
st_mode	int
)	O
)	O
{	O
p	pointer
->	O
fts_n_dirs_remaining	long
=	O
(	O
sbp	pointer
->	O
st_nlink	long
-	O
(	O
ISSET	O
(	O
FTS_SEEDOT	int
)	O
?	O
0	int
:	O
2	int
)	O
)	O
;	O
if	O
(	O
ISDOT	O
(	O
p	pointer
->	O
fts_name	array
)	O
)	O
{	O
return	O
(	O
p	pointer
->	O
fts_level	long
==	O
FTS_ROOTLEVEL	int
?	O
FTS_D	int
:	O
FTS_DOT	int
)	O
;	O
}	O
return	O
(	O
FTS_D	int
)	O
;	O
}	O
if	O
(	O
S_ISLNK	O
(	O
sbp	pointer
->	O
st_mode	int
)	O
)	O
return	O
(	O
FTS_SL	int
)	O
;	O
if	O
(	O
S_ISREG	O
(	O
sbp	pointer
->	O
st_mode	int
)	O
)	O
return	O
(	O
FTS_F	int
)	O
;	O
return	O
(	O
FTS_DEFAULT	int
)	O
;	O
}	O
static	O
int	O
fts_compar	pointer
(	O
void	O
const	O
*	O
a	pointer
,	O
void	O
const	O
*	O
b	pointer
)	O
{	O
FTSENT	struct
const	O
*	O
*	O
pa	pointer
=	O
(	O
FTSENT	struct
const	O
*	O
*	O
)	O
a	pointer
;	O
FTSENT	struct
const	O
*	O
*	O
pb	pointer
=	O
(	O
FTSENT	struct
const	O
*	O
*	O
)	O
b	pointer
;	O
return	O
pa	pointer
[	O
0	int
]	O
->	O
fts_fts	pointer
->	O
fts_compar	pointer
(	O
pa	pointer
,	O
pb	pointer
)	O
;	O
}	O
static	O
FTSENT	struct
*	O
internal_function	O
fts_sort	function
(	O
FTS	struct
*	O
sp	pointer
,	O
FTSENT	struct
*	O
head	pointer
,	O
register	O
size_t	long
nitems	long
)	O
{	O
register	O
FTSENT	struct
*	O
*	O
ap	pointer
,	O
*	O
p	pointer
;	O
FTSENT	struct
*	O
dummy	pointer
;	O
int	O
(	O
*	O
compare	pointer
)	O
(	O
void	O
const	O
*	O
,	O
void	O
const	O
*	O
)	O
=	O
(	O
(	O
sizeof	O
&	O
dummy	pointer
==	O
sizeof	O
(	O
void	O
*	O
)	O
&&	O
(	O
long	O
int	O
)	O
&	O
dummy	pointer
==	O
(	O
long	O
int	O
)	O
(	O
void	O
*	O
)	O
&	O
dummy	pointer
)	O
?	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
const	O
*	O
,	O
void	O
const	O
*	O
)	O
)	O
sp	pointer
->	O
fts_compar	pointer
:	O
fts_compar	pointer
)	O
;	O
if	O
(	O
nitems	long
>	O
sp	pointer
->	O
fts_nitems	long
)	O
{	O
FTSENT	struct
*	O
*	O
a	pointer
;	O
sp	pointer
->	O
fts_nitems	long
=	O
nitems	long
+	O
40	int
;	O
if	O
(	O
SIZE_MAX	O
/	O
sizeof	O
*	O
a	pointer
<	O
sp	pointer
->	O
fts_nitems	long
||	O
!	O
(	O
a	pointer
=	O
realloc	function
(	O
sp	pointer
->	O
fts_array	pointer
,	O
sp	pointer
->	O
fts_nitems	long
*	O
sizeof	O
*	O
a	pointer
)	O
)	O
)	O
{	O
free	function
(	O
sp	pointer
->	O
fts_array	pointer
)	O
;	O
sp	pointer
->	O
fts_array	pointer
=	O
NULL	O
;	O
sp	pointer
->	O
fts_nitems	long
=	O
0	int
;	O
return	O
(	O
head	pointer
)	O
;	O
}	O
sp	pointer
->	O
fts_array	pointer
=	O
a	pointer
;	O
}	O
for	O
(	O
ap	pointer
=	O
sp	pointer
->	O
fts_array	pointer
,	O
p	pointer
=	O
head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
)	O
*	O
ap	pointer
++	O
=	O
p	pointer
;	O
qsort	function
(	O
(	O
void	O
*	O
)	O
sp	pointer
->	O
fts_array	pointer
,	O
nitems	long
,	O
sizeof	O
(	O
FTSENT	struct
*	O
)	O
,	O
compare	pointer
)	O
;	O
for	O
(	O
head	pointer
=	O
*	O
(	O
ap	pointer
=	O
sp	pointer
->	O
fts_array	pointer
)	O
;	O
--	O
nitems	long
;	O
++	O
ap	pointer
)	O
ap	pointer
[	O
0	int
]	O
->	O
fts_link	pointer
=	O
ap	pointer
[	O
1	int
]	O
;	O
ap	pointer
[	O
0	int
]	O
->	O
fts_link	pointer
=	O
NULL	O
;	O
return	O
(	O
head	pointer
)	O
;	O
}	O
static	O
FTSENT	struct
*	O
internal_function	O
fts_alloc	function
(	O
FTS	struct
*	O
sp	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
register	O
size_t	long
namelen	long
)	O
{	O
register	O
FTSENT	struct
*	O
p	pointer
;	O
size_t	long
len	long
;	O
len	long
=	O
offsetof	O
(	O
FTSENT	struct
,	O
fts_name	array
)	O
+	O
namelen	long
+	O
1	int
;	O
len	long
+=	O
alignof	O
(	O
max_align_t	struct
)	O
-	O
1	int
;	O
len	long
&=	O
~	O
(	O
alignof	O
(	O
max_align_t	struct
)	O
-	O
1	int
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
malloc	function
(	O
len	long
)	O
)	O
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
memcpy	function
(	O
p	pointer
->	O
fts_name	array
,	O
name	pointer
,	O
namelen	long
)	O
;	O
p	pointer
->	O
fts_name	array
[	O
namelen	long
]	O
=	O
'\0'	O
;	O
p	pointer
->	O
fts_namelen	long
=	O
namelen	long
;	O
p	pointer
->	O
fts_fts	pointer
=	O
sp	pointer
;	O
p	pointer
->	O
fts_path	pointer
=	O
sp	pointer
->	O
fts_path	pointer
;	O
p	pointer
->	O
fts_errno	int
=	O
0	int
;	O
p	pointer
->	O
fts_dirp	pointer
=	O
NULL	O
;	O
p	pointer
->	O
fts_flags	short
=	O
0	int
;	O
p	pointer
->	O
fts_instr	short
=	O
FTS_NOINSTR	int
;	O
p	pointer
->	O
fts_number	long
=	O
0	int
;	O
p	pointer
->	O
fts_pointer	pointer
=	O
NULL	O
;	O
return	O
(	O
p	pointer
)	O
;	O
}	O
static	O
void	O
internal_function	O
fts_lfree	function
(	O
register	O
FTSENT	struct
*	O
head	pointer
)	O
{	O
register	O
FTSENT	struct
*	O
p	pointer
;	O
while	O
(	O
(	O
p	pointer
=	O
head	pointer
)	O
)	O
{	O
head	pointer
=	O
head	pointer
->	O
fts_link	pointer
;	O
if	O
(	O
p	pointer
->	O
fts_dirp	pointer
)	O
closedir	function
(	O
p	pointer
->	O
fts_dirp	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
}	O
static	O
bool	bool
internal_function	O
fts_palloc	function
(	O
FTS	struct
*	O
sp	pointer
,	O
size_t	long
more	long
)	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
new_len	long
=	O
sp	pointer
->	O
fts_pathlen	long
+	O
more	long
+	O
256	int
;	O
if	O
(	O
new_len	long
<	O
sp	pointer
->	O
fts_pathlen	long
)	O
{	O
free	function
(	O
sp	pointer
->	O
fts_path	pointer
)	O
;	O
sp	pointer
->	O
fts_path	pointer
=	O
NULL	O
;	O
__set_errno	O
(	O
ENAMETOOLONG	int
)	O
;	O
return	O
false	int
;	O
}	O
sp	pointer
->	O
fts_pathlen	long
=	O
new_len	long
;	O
p	pointer
=	O
realloc	function
(	O
sp	pointer
->	O
fts_path	pointer
,	O
sp	pointer
->	O
fts_pathlen	long
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
sp	pointer
->	O
fts_path	pointer
)	O
;	O
sp	pointer
->	O
fts_path	pointer
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
sp	pointer
->	O
fts_path	pointer
=	O
p	pointer
;	O
return	O
true	int
;	O
}	O
static	O
void	O
internal_function	O
fts_padjust	function
(	O
FTS	struct
*	O
sp	pointer
,	O
FTSENT	struct
*	O
head	pointer
)	O
{	O
FTSENT	struct
*	O
p	pointer
;	O
char	O
*	O
addr	pointer
=	O
sp	pointer
->	O
fts_path	pointer
;	O
for	O
(	O
p	pointer
=	O
sp	pointer
->	O
fts_child	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
)	O
ADJUST	O
(	O
p	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
head	pointer
;	O
p	pointer
->	O
fts_level	long
>=	O
FTS_ROOTLEVEL	int
;	O
)	O
{	O
ADJUST	O
(	O
p	pointer
)	O
;	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
?	O
p	pointer
->	O
fts_link	pointer
:	O
p	pointer
->	O
fts_parent	pointer
;	O
}	O
}	O
static	O
size_t	long
internal_function	O
_GL_ATTRIBUTE_PURE	O
fts_maxarglen	function
(	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
size_t	long
len	long
,	O
max	long
;	O
for	O
(	O
max	long
=	O
0	int
;	O
*	O
argv	pointer
;	O
++	O
argv	pointer
)	O
if	O
(	O
(	O
len	long
=	O
strlen	function
(	O
*	O
argv	pointer
)	O
)	O
>	O
max	long
)	O
max	long
=	O
len	long
;	O
return	O
(	O
max	long
+	O
1	int
)	O
;	O
}	O
static	O
int	O
internal_function	O
fts_safe_changedir	function
(	O
FTS	struct
*	O
sp	pointer
,	O
FTSENT	struct
*	O
p	pointer
,	O
int	O
fd	int
,	O
char	O
const	O
*	O
dir	pointer
)	O
{	O
int	O
ret	int
;	O
bool	bool
is_dotdot	bool
=	O
dir	pointer
&&	O
STREQ	O
(	O
dir	pointer
,	O
".."	pointer
)	O
;	O
int	O
newfd	int
;	O
if	O
(	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
if	O
(	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
&&	O
0	int
<=	O
fd	int
)	O
close	function
(	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
fd	int
<	O
0	int
&&	O
is_dotdot	bool
&&	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
)	O
{	O
if	O
(	O
!	O
i_ring_empty	function
(	O
&	O
sp	pointer
->	O
fts_fd_ring	struct
)	O
)	O
{	O
int	O
parent_fd	int
;	O
fd_ring_print	O
(	O
sp	pointer
,	O
stderr	pointer
,	O
"pre-pop"	pointer
)	O
;	O
parent_fd	int
=	O
i_ring_pop	function
(	O
&	O
sp	pointer
->	O
fts_fd_ring	struct
)	O
;	O
is_dotdot	bool
=	O
true	int
;	O
if	O
(	O
0	int
<=	O
parent_fd	int
)	O
{	O
fd	int
=	O
parent_fd	int
;	O
dir	pointer
=	O
NULL	O
;	O
}	O
}	O
}	O
newfd	int
=	O
fd	int
;	O
if	O
(	O
fd	int
<	O
0	int
&&	O
(	O
newfd	int
=	O
diropen	function
(	O
sp	pointer
,	O
dir	pointer
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
ISSET	O
(	O
FTS_LOGICAL	int
)	O
||	O
!	O
HAVE_WORKING_O_NOFOLLOW	int
||	O
(	O
dir	pointer
&&	O
STREQ	O
(	O
dir	pointer
,	O
".."	pointer
)	O
)	O
)	O
{	O
struct	O
stat	struct
sb	pointer
;	O
if	O
(	O
fstat	function
(	O
newfd	int
,	O
&	O
sb	pointer
)	O
)	O
{	O
ret	int
=	O
-	O
1	int
;	O
goto	O
bail	O
;	O
}	O
if	O
(	O
p	pointer
->	O
fts_statp	array
->	O
st_dev	long
!=	O
sb	pointer
.	O
st_dev	long
||	O
p	pointer
->	O
fts_statp	array
->	O
st_ino	long
!=	O
sb	pointer
.	O
st_ino	long
)	O
{	O
__set_errno	O
(	O
ENOENT	int
)	O
;	O
ret	int
=	O
-	O
1	int
;	O
goto	O
bail	O
;	O
}	O
}	O
if	O
(	O
ISSET	O
(	O
FTS_CWDFD	int
)	O
)	O
{	O
cwd_advance_fd	function
(	O
sp	pointer
,	O
newfd	int
,	O
!	O
is_dotdot	bool
)	O
;	O
return	O
0	int
;	O
}	O
ret	int
=	O
fchdir	function
(	O
newfd	int
)	O
;	O
bail	O
:	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
int	O
oerrno	int
=	O
errno	O
;	O
(	O
void	O
)	O
close	function
(	O
newfd	int
)	O
;	O
__set_errno	O
(	O
oerrno	int
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
