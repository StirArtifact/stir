typedef	O
struct	O
{	O
Sym	struct
*	O
sym	pointer
;	O
int	O
cycle_top	int
;	O
}	O
DFN_Stack	struct
;	O
static	O
bfd_boolean	int
is_numbered	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
bfd_boolean	int
is_busy	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
void	O
find_cycle	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
void	O
pre_visit	function
(	O
Sym	struct
*	O
)	O
;	O
static	O
void	O
post_visit	function
(	O
Sym	struct
*	O
)	O
;	O
DFN_Stack	struct
*	O
dfn_stack	pointer
=	O
NULL	O
;	O
int	O
dfn_maxdepth	int
=	O
0	int
;	O
int	O
dfn_depth	int
=	O
0	int
;	O
int	O
dfn_counter	int
=	O
DFN_NAN	int
;	O
static	O
bfd_boolean	int
is_numbered	function
(	O
Sym	struct
*	O
child	double
)	O
{	O
return	O
child	double
->	O
cg	struct
.	O
top_order	int
!=	O
DFN_NAN	int
&&	O
child	double
->	O
cg	struct
.	O
top_order	int
!=	O
DFN_BUSY	O
;	O
}	O
static	O
bfd_boolean	int
is_busy	function
(	O
Sym	struct
*	O
child	double
)	O
{	O
if	O
(	O
child	double
->	O
cg	struct
.	O
top_order	int
==	O
DFN_NAN	int
)	O
{	O
return	O
FALSE	int
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
void	O
find_cycle	function
(	O
Sym	struct
*	O
child	double
)	O
{	O
Sym	struct
*	O
head	pointer
=	O
0	int
;	O
Sym	struct
*	O
tail	pointer
;	O
int	O
cycle_top	int
;	O
int	O
cycle_index	int
;	O
for	O
(	O
cycle_top	int
=	O
dfn_depth	int
;	O
cycle_top	int
>	O
0	int
;	O
--	O
cycle_top	int
)	O
{	O
head	pointer
=	O
dfn_stack	pointer
[	O
cycle_top	int
]	O
.	O
sym	pointer
;	O
if	O
(	O
child	double
==	O
head	pointer
)	O
{	O
break	O
;	O
}	O
if	O
(	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
!=	O
child	double
&&	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
==	O
head	pointer
)	O
{	O
break	O
;	O
}	O
}	O
if	O
(	O
cycle_top	int
<=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"[find_cycle] couldn't find head of cycle\n"	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
debug_level	int
&	O
DFNDEBUG	O
)	O
{	O
printf	function
(	O
"[find_cycle] dfn_depth %d cycle_top %d "	pointer
,	O
dfn_depth	int
,	O
cycle_top	int
)	O
;	O
if	O
(	O
head	pointer
)	O
{	O
print_name	function
(	O
head	pointer
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
"<unknown>"	pointer
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
cycle_top	int
==	O
dfn_depth	int
)	O
{	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	function
(	O
"[find_cycle] "	pointer
)	O
;	O
print_name	function
(	O
child	double
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
for	O
(	O
tail	pointer
=	O
head	pointer
;	O
tail	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
;	O
tail	pointer
=	O
tail	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
)	O
{	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	function
(	O
"[find_cycle] tail "	pointer
)	O
;	O
print_name	function
(	O
tail	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
head	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
!=	O
head	pointer
)	O
{	O
head	pointer
=	O
head	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	function
(	O
"[find_cycle] new cyclehead "	pointer
)	O
;	O
print_name	function
(	O
head	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
)	O
;	O
}	O
for	O
(	O
cycle_index	int
=	O
cycle_top	int
+	O
1	int
;	O
cycle_index	int
<=	O
dfn_depth	int
;	O
++	O
cycle_index	int
)	O
{	O
child	double
=	O
dfn_stack	pointer
[	O
cycle_index	int
]	O
.	O
sym	pointer
;	O
if	O
(	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
==	O
child	double
)	O
{	O
tail	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
=	O
child	double
;	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
=	O
head	pointer
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	function
(	O
"[find_cycle] glomming "	pointer
)	O
;	O
print_name	function
(	O
child	double
)	O
;	O
printf	function
(	O
" onto "	pointer
)	O
;	O
print_name	function
(	O
head	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
)	O
;	O
for	O
(	O
tail	pointer
=	O
child	double
;	O
tail	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
;	O
tail	pointer
=	O
tail	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
)	O
{	O
tail	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
=	O
head	pointer
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	function
(	O
"[find_cycle] and its tail "	pointer
)	O
;	O
print_name	function
(	O
tail	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
)	O
;	O
printf	function
(	O
" onto "	pointer
)	O
;	O
print_name	function
(	O
head	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
child	double
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
!=	O
head	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"[find_cycle] glommed, but not to head\n"	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
pre_visit	function
(	O
Sym	struct
*	O
parent	pointer
)	O
{	O
++	O
dfn_depth	int
;	O
if	O
(	O
dfn_depth	int
>=	O
dfn_maxdepth	int
)	O
{	O
dfn_maxdepth	int
+=	O
DFN_INCR_DEPTH	O
;	O
dfn_stack	pointer
=	O
(	O
DFN_Stack	struct
*	O
)	O
xrealloc	function
(	O
dfn_stack	pointer
,	O
dfn_maxdepth	int
*	O
sizeof	O
*	O
dfn_stack	pointer
)	O
;	O
}	O
dfn_stack	pointer
[	O
dfn_depth	int
]	O
.	O
sym	pointer
=	O
parent	pointer
;	O
dfn_stack	pointer
[	O
dfn_depth	int
]	O
.	O
cycle_top	int
=	O
dfn_depth	int
;	O
parent	pointer
->	O
cg	struct
.	O
top_order	int
=	O
DFN_BUSY	O
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	function
(	O
"[pre_visit]\t\t%d:"	pointer
,	O
dfn_depth	int
)	O
;	O
print_name	function
(	O
parent	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
)	O
;	O
}	O
static	O
void	O
post_visit	function
(	O
Sym	struct
*	O
parent	pointer
)	O
{	O
Sym	struct
*	O
member	pointer
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	function
(	O
"[post_visit]\t%d: "	pointer
,	O
dfn_depth	int
)	O
;	O
print_name	function
(	O
parent	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
)	O
;	O
if	O
(	O
parent	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
head	pointer
==	O
parent	pointer
)	O
{	O
++	O
dfn_counter	int
;	O
for	O
(	O
member	pointer
=	O
parent	pointer
;	O
member	pointer
;	O
member	pointer
=	O
member	pointer
->	O
cg	struct
.	O
cyc	struct
.	O
next	pointer
)	O
{	O
member	pointer
->	O
cg	struct
.	O
top_order	int
=	O
dfn_counter	int
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	function
(	O
"[post_visit]\t\tmember "	pointer
)	O
;	O
print_name	function
(	O
member	pointer
)	O
;	O
printf	function
(	O
"-> cg.top_order = %d\n"	pointer
,	O
dfn_counter	int
)	O
)	O
;	O
}	O
}	O
else	O
{	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	function
(	O
"[post_visit]\t\tis part of a cycle\n"	pointer
)	O
)	O
;	O
}	O
--	O
dfn_depth	int
;	O
}	O
void	O
cg_dfn	function
(	O
Sym	struct
*	O
parent	pointer
)	O
{	O
Arc	struct
*	O
arc	struct
;	O
DBG	O
(	O
DFNDEBUG	O
,	O
printf	function
(	O
"[dfn] dfn( "	pointer
)	O
;	O
print_name	function
(	O
parent	pointer
)	O
;	O
printf	function
(	O
")\n"	pointer
)	O
)	O
;	O
if	O
(	O
is_numbered	function
(	O
parent	pointer
)	O
)	O
{	O
return	O
;	O
}	O
if	O
(	O
is_busy	function
(	O
parent	pointer
)	O
)	O
{	O
find_cycle	function
(	O
parent	pointer
)	O
;	O
return	O
;	O
}	O
pre_visit	function
(	O
parent	pointer
)	O
;	O
for	O
(	O
arc	struct
=	O
parent	pointer
->	O
cg	struct
.	O
children	pointer
;	O
arc	struct
;	O
arc	struct
=	O
arc	struct
->	O
next_child	pointer
)	O
{	O
cg_dfn	function
(	O
arc	struct
->	O
child	double
)	O
;	O
}	O
post_visit	function
(	O
parent	pointer
)	O
;	O
}	O
