typedef	O
struct	O
{	O
char	O
*	O
name	pointer
;	O
ino_t	long
ino	long
;	O
}	O
direntry_t	struct
;	O
static	O
int	O
direntry_cmp_name	function
(	O
void	O
const	O
*	O
a	pointer
,	O
void	O
const	O
*	O
b	pointer
)	O
{	O
direntry_t	struct
const	O
*	O
dea	pointer
=	O
a	pointer
;	O
direntry_t	struct
const	O
*	O
deb	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
dea	pointer
->	O
name	pointer
,	O
deb	pointer
->	O
name	pointer
)	O
;	O
}	O
static	O
int	O
direntry_cmp_inode	function
(	O
void	O
const	O
*	O
a	pointer
,	O
void	O
const	O
*	O
b	pointer
)	O
{	O
direntry_t	struct
const	O
*	O
dea	pointer
=	O
a	pointer
;	O
direntry_t	struct
const	O
*	O
deb	pointer
=	O
b	pointer
;	O
return	O
dea	pointer
->	O
ino	long
<	O
deb	pointer
->	O
ino	long
?	O
-	O
1	int
:	O
dea	pointer
->	O
ino	long
>	O
deb	pointer
->	O
ino	long
;	O
}	O
typedef	O
int	O
(	O
*	O
comparison_function	pointer
)	O
(	O
void	O
const	O
*	O
,	O
void	O
const	O
*	O
)	O
;	O
static	O
comparison_function	pointer
const	O
comparison_function_table	array
[	O
]	O
=	O
{	O
0	int
,	O
direntry_cmp_name	function
,	O
direntry_cmp_inode	function
}	O
;	O
char	O
*	O
streamsavedir	function
(	O
DIR	struct
*	O
dirp	pointer
,	O
enum	O
savedir_option	enum
option	enum
)	O
{	O
char	O
*	O
name_space	pointer
=	O
NULL	O
;	O
size_t	long
allocated	long
=	O
0	int
;	O
direntry_t	struct
*	O
entries	pointer
=	O
NULL	O
;	O
size_t	long
entries_allocated	long
=	O
0	int
;	O
size_t	long
entries_used	long
=	O
0	int
;	O
size_t	long
used	long
=	O
0	int
;	O
int	O
readdir_errno	int
;	O
comparison_function	pointer
cmp	pointer
=	O
comparison_function_table	array
[	O
option	enum
]	O
;	O
if	O
(	O
dirp	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
struct	O
dirent	struct
const	O
*	O
dp	pointer
;	O
char	O
const	O
*	O
entry	pointer
;	O
errno	O
=	O
0	int
;	O
dp	pointer
=	O
readdir	function
(	O
dirp	pointer
)	O
;	O
if	O
(	O
!	O
dp	pointer
)	O
break	O
;	O
entry	pointer
=	O
dp	pointer
->	O
d_name	array
;	O
if	O
(	O
entry	pointer
[	O
entry	pointer
[	O
0	int
]	O
!=	O
'.'	O
?	O
0	int
:	O
entry	pointer
[	O
1	int
]	O
!=	O
'.'	O
?	O
1	int
:	O
2	int
]	O
!=	O
'\0'	O
)	O
{	O
size_t	long
entry_size	long
=	O
_D_EXACT_NAMLEN	O
(	O
dp	pointer
)	O
+	O
1	int
;	O
if	O
(	O
cmp	pointer
)	O
{	O
if	O
(	O
entries_allocated	long
==	O
entries_used	long
)	O
{	O
size_t	long
n	long
=	O
entries_allocated	long
;	O
entries	pointer
=	O
x2nrealloc	function
(	O
entries	pointer
,	O
&	O
n	long
,	O
sizeof	O
*	O
entries	pointer
)	O
;	O
entries_allocated	long
=	O
n	long
;	O
}	O
entries	pointer
[	O
entries_used	long
]	O
.	O
name	pointer
=	O
xstrdup	function
(	O
entry	pointer
)	O
;	O
entries	pointer
[	O
entries_used	long
]	O
.	O
ino	long
=	O
dp	pointer
->	O
d_ino	long
;	O
entries_used	long
++	O
;	O
}	O
else	O
{	O
if	O
(	O
allocated	long
-	O
used	long
<=	O
entry_size	long
)	O
{	O
size_t	long
n	long
=	O
used	long
+	O
entry_size	long
;	O
if	O
(	O
n	long
<	O
used	long
)	O
xalloc_die	function
(	O
)	O
;	O
name_space	pointer
=	O
x2nrealloc	function
(	O
name_space	pointer
,	O
&	O
n	long
,	O
1	int
)	O
;	O
allocated	long
=	O
n	long
;	O
}	O
memcpy	function
(	O
name_space	pointer
+	O
used	long
,	O
entry	pointer
,	O
entry_size	long
)	O
;	O
}	O
used	long
+=	O
entry_size	long
;	O
}	O
}	O
readdir_errno	int
=	O
errno	O
;	O
if	O
(	O
readdir_errno	int
!=	O
0	int
)	O
{	O
free	function
(	O
entries	pointer
)	O
;	O
free	function
(	O
name_space	pointer
)	O
;	O
errno	O
=	O
readdir_errno	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
cmp	pointer
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
entries_used	long
)	O
qsort	function
(	O
entries	pointer
,	O
entries_used	long
,	O
sizeof	O
*	O
entries	pointer
,	O
cmp	pointer
)	O
;	O
name_space	pointer
=	O
xmalloc	function
(	O
used	long
+	O
1	int
)	O
;	O
used	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
entries_used	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
dest	pointer
=	O
name_space	pointer
+	O
used	long
;	O
used	long
+=	O
stpcpy	function
(	O
dest	pointer
,	O
entries	pointer
[	O
i	long
]	O
.	O
name	pointer
)	O
-	O
dest	pointer
+	O
1	int
;	O
free	function
(	O
entries	pointer
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
}	O
free	function
(	O
entries	pointer
)	O
;	O
}	O
else	O
if	O
(	O
used	long
==	O
allocated	long
)	O
name_space	pointer
=	O
xrealloc	function
(	O
name_space	pointer
,	O
used	long
+	O
1	int
)	O
;	O
name_space	pointer
[	O
used	long
]	O
=	O
'\0'	O
;	O
return	O
name_space	pointer
;	O
}	O
char	O
*	O
savedir	function
(	O
char	O
const	O
*	O
dir	pointer
,	O
enum	O
savedir_option	enum
option	enum
)	O
{	O
DIR	struct
*	O
dirp	pointer
=	O
opendir	function
(	O
dir	pointer
)	O
;	O
if	O
(	O
!	O
dirp	pointer
)	O
return	O
NULL	O
;	O
else	O
{	O
char	O
*	O
name_space	pointer
=	O
streamsavedir	function
(	O
dirp	pointer
,	O
option	enum
)	O
;	O
if	O
(	O
closedir	function
(	O
dirp	pointer
)	O
!=	O
0	int
)	O
{	O
int	O
closedir_errno	int
=	O
errno	O
;	O
free	function
(	O
name_space	pointer
)	O
;	O
errno	O
=	O
closedir_errno	int
;	O
return	O
NULL	O
;	O
}	O
return	O
name_space	pointer
;	O
}	O
}	O
