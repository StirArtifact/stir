int	O
transformation	array
[	O
MAX_OFFSET	O
]	O
[	O
8	int
]	O
;	O
const	O
int	O
transformation2	array
[	O
8	int
]	O
[	O
2	int
]	O
[	O
2	int
]	O
=	O
{	O
{	O
{	O
1	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
1	int
}	O
}	O
,	O
{	O
{	O
0	int
,	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
0	int
}	O
}	O
,	O
{	O
{	O
-	O
1	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
-	O
1	int
}	O
}	O
,	O
{	O
{	O
0	int
,	O
-	O
1	int
}	O
,	O
{	O
1	int
,	O
0	int
}	O
}	O
,	O
{	O
{	O
0	int
,	O
-	O
1	int
}	O
,	O
{	O
-	O
1	int
,	O
0	int
}	O
}	O
,	O
{	O
{	O
-	O
1	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
1	int
}	O
}	O
,	O
{	O
{	O
0	int
,	O
1	int
}	O
,	O
{	O
1	int
,	O
0	int
}	O
}	O
,	O
{	O
{	O
1	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
-	O
1	int
}	O
}	O
}	O
;	O
void	O
transformation_init	function
(	O
void	O
)	O
{	O
int	O
k	int
;	O
int	O
dx	int
;	O
int	O
dy	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
8	int
;	O
k	int
++	O
)	O
{	O
for	O
(	O
dy	int
=	O
-	O
MAX_BOARD	int
+	O
1	int
;	O
dy	int
<=	O
MAX_BOARD	int
-	O
1	int
;	O
dy	int
++	O
)	O
{	O
for	O
(	O
dx	int
=	O
-	O
MAX_BOARD	int
+	O
1	int
;	O
dx	int
<=	O
MAX_BOARD	int
-	O
1	int
;	O
dx	int
++	O
)	O
{	O
int	O
tx	int
;	O
int	O
ty	int
;	O
TRANSFORM2	O
(	O
dx	int
,	O
dy	int
,	O
&	O
tx	int
,	O
&	O
ty	int
,	O
k	int
)	O
;	O
transformation	array
[	O
OFFSET	O
(	O
dx	int
,	O
dy	int
)	O
]	O
[	O
k	int
]	O
=	O
DELTA	O
(	O
tx	int
,	O
ty	int
)	O
;	O
}	O
}	O
}	O
}	O
int	O
spiral	array
[	O
DFA_MAX_ORDER	O
]	O
[	O
8	int
]	O
;	O
void	O
build_spiral_order	function
(	O
void	O
)	O
{	O
int	O
i	int
;	O
int	O
j	int
;	O
int	O
k	int
;	O
char	O
mark	char
[	O
2	int
*	O
DFA_MAX_BOARD	O
+	O
1	int
]	O
[	O
2	int
*	O
DFA_MAX_BOARD	O
+	O
1	int
]	O
;	O
int	O
queue_i	array
[	O
DFA_MAX_ORDER	O
]	O
;	O
int	O
queue_j	array
[	O
DFA_MAX_ORDER	O
]	O
;	O
int	O
queue_start	int
=	O
0	int
;	O
int	O
queue_end	int
=	O
1	int
;	O
static	O
const	O
int	O
delta_i	array
[	O
4	int
]	O
=	O
{	O
1	int
,	O
0	int
,	O
-	O
1	int
,	O
0	int
}	O
;	O
static	O
const	O
int	O
delta_j	array
[	O
4	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
0	int
,	O
-	O
1	int
}	O
;	O
memset	function
(	O
mark	char
,	O
1	int
,	O
sizeof	O
(	O
mark	char
)	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
2	int
*	O
DFA_MAX_BOARD	O
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<	O
2	int
*	O
DFA_MAX_BOARD	O
;	O
j	int
++	O
)	O
mark	char
[	O
i	int
]	O
[	O
j	int
]	O
=	O
0	int
;	O
}	O
queue_i	array
[	O
0	int
]	O
=	O
DFA_MAX_BOARD	O
;	O
queue_j	array
[	O
0	int
]	O
=	O
DFA_MAX_BOARD	O
;	O
mark	char
[	O
DFA_MAX_BOARD	O
]	O
[	O
DFA_MAX_BOARD	O
]	O
=	O
1	int
;	O
do	O
{	O
int	O
transformation	array
;	O
for	O
(	O
transformation	array
=	O
0	int
;	O
transformation	array
<	O
8	int
;	O
transformation	array
++	O
)	O
{	O
TRANSFORM2	O
(	O
queue_i	array
[	O
queue_start	int
]	O
-	O
DFA_MAX_BOARD	O
,	O
queue_j	array
[	O
queue_start	int
]	O
-	O
DFA_MAX_BOARD	O
,	O
&	O
i	int
,	O
&	O
j	int
,	O
transformation	array
)	O
;	O
spiral	array
[	O
queue_start	int
]	O
[	O
transformation	array
]	O
=	O
DFA_BASE	O
*	O
i	int
+	O
j	int
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
{	O
i	int
=	O
queue_i	array
[	O
queue_start	int
]	O
+	O
delta_i	array
[	O
k	int
]	O
;	O
j	int
=	O
queue_j	array
[	O
queue_start	int
]	O
+	O
delta_j	array
[	O
k	int
]	O
;	O
if	O
(	O
!	O
mark	char
[	O
i	int
]	O
[	O
j	int
]	O
)	O
{	O
queue_i	array
[	O
queue_end	int
]	O
=	O
i	int
;	O
queue_j	array
[	O
queue_end	int
++	O
]	O
=	O
j	int
;	O
mark	char
[	O
i	int
]	O
[	O
j	int
]	O
=	O
1	int
;	O
}	O
}	O
}	O
while	O
(	O
++	O
queue_start	int
<	O
queue_end	int
)	O
;	O
if	O
(	O
0	int
)	O
{	O
int	O
transformation	array
;	O
for	O
(	O
transformation	array
=	O
0	int
;	O
transformation	array
<	O
8	int
;	O
transformation	array
++	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Transformation %d:\n"	pointer
,	O
transformation	array
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
16	int
;	O
k	int
++	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"\t%d(%c); %d\n"	pointer
,	O
k	int
,	O
'A'	O
+	O
k	int
,	O
spiral	array
[	O
k	int
]	O
[	O
transformation	array
]	O
)	O
;	O
}	O
}	O
}	O
}	O
