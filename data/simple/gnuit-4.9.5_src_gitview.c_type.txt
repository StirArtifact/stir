char	O
built_in	array
[	O
BUILTIN_OPERATIONS	int
]	O
[	O
MAX_BUILTIN_NAME	int
]	O
=	O
{	O
"previous-line"	pointer
,	O
"next-line"	pointer
,	O
"scroll-down"	pointer
,	O
"scroll-up"	pointer
,	O
"beginning-of-file"	pointer
,	O
"end-of-file"	pointer
,	O
"refresh"	pointer
,	O
"exit"	pointer
,	O
"hard-refresh"	pointer
,	O
"backspace"	pointer
,	O
"action"	pointer
,	O
}	O
;	O
static	O
char	O
*	O
ViewerFields	array
[	O
VIEWER_FIELDS	int
]	O
=	O
{	O
"TitleForeground"	pointer
,	O
"TitleBackground"	pointer
,	O
"TitleBrightness"	pointer
,	O
"HeaderForeground"	pointer
,	O
"HeaderBackground"	pointer
,	O
"HeaderBrightness"	pointer
,	O
"ScreenForeground"	pointer
,	O
"ScreenBackground"	pointer
,	O
"ScreenBrightness"	pointer
,	O
"StatusForeground"	pointer
,	O
"StatusBackground"	pointer
,	O
"StatusBrightness"	pointer
}	O
;	O
static	O
int	O
ViewerColors	array
[	O
VIEWER_FIELDS	int
]	O
=	O
{	O
CYAN	int
,	O
BLUE	int
,	O
ON	int
,	O
CYAN	int
,	O
RED	int
,	O
ON	int
,	O
BLACK	int
,	O
CYAN	int
,	O
OFF	int
,	O
CYAN	int
,	O
BLUE	int
,	O
ON	int
}	O
;	O
extern	O
int	O
LinuxConsole	int
;	O
int	O
AnsiColors	int
=	O
ON	int
;	O
char	O
*	O
g_home	pointer
;	O
char	O
*	O
g_program	pointer
;	O
char	O
*	O
program_name	pointer
;	O
char	O
*	O
screen	pointer
;	O
char	O
*	O
filename	pointer
;	O
int	O
count	int
;	O
off64_t	long
g_size	long
;	O
char	O
g_offset	array
[	O
16	int
]	O
;	O
char	O
*	O
header_text	pointer
;	O
int	O
UseLastScreenChar	int
;	O
char	O
*	O
global_buf	pointer
;	O
char	O
color_section	array
[	O
]	O
=	O
"[GITVIEW-Color]"	pointer
;	O
char	O
monochrome_section	array
[	O
]	O
=	O
"[GITVIEW-Monochrome]"	pointer
;	O
int	O
fd	int
,	O
regular_file	int
;	O
long	O
long	O
g_current_line	long long
,	O
g_lines	long long
;	O
window_t	struct
*	O
title_window	pointer
,	O
*	O
header_window	pointer
,	O
*	O
file_window	pointer
,	O
*	O
status_window	pointer
;	O
static	O
char	O
*	O
title_text	pointer
;	O
static	O
char	O
*	O
g_help	pointer
;	O
static	O
char	O
info_txt	array
[	O
]	O
=	O
"   Offset     00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F       Ascii       "	pointer
;	O
static	O
char	O
line_txt	array
[	O
]	O
=	O
"-------------------------------------------------------------------------------- "	pointer
;	O
static	O
char	O
seek_txt	array
[	O
]	O
=	O
" Seek at: "	pointer
;	O
off64_t	long
file_length	function
(	O
)	O
{	O
off64_t	long
current	long
,	O
length	long
;	O
if	O
(	O
!	O
regular_file	int
)	O
return	O
0x7FFFFFFF	int
;	O
current	long
=	O
lseek64	function
(	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
length	long
=	O
lseek64	function
(	O
fd	int
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
lseek64	function
(	O
fd	int
,	O
current	long
,	O
SEEK_SET	int
)	O
;	O
return	O
length	long
;	O
}	O
void	O
cursor_update	function
(	O
)	O
{	O
if	O
(	O
tty_lines	int
>=	O
9	int
)	O
window_goto	function
(	O
file_window	pointer
,	O
SEEK_LINE	O
,	O
strlen	function
(	O
seek_txt	array
)	O
+	O
count	int
)	O
;	O
else	O
window_goto	function
(	O
file_window	pointer
,	O
tty_lines	int
-	O
1	int
,	O
tty_columns	int
-	O
1	int
)	O
;	O
}	O
void	O
set_title	function
(	O
)	O
{	O
memset	function
(	O
global_buf	pointer
,	O
' '	O
,	O
tty_columns	int
)	O
;	O
memcpy	function
(	O
global_buf	pointer
,	O
title_text	pointer
,	O
min	O
(	O
tty_columns	int
,	O
(	O
int	O
)	O
strlen	function
(	O
title_text	pointer
)	O
)	O
)	O
;	O
tty_colors	function
(	O
TitleBrightness	O
,	O
TitleForeground	O
,	O
TitleBackground	O
)	O
;	O
window_goto	function
(	O
title_window	pointer
,	O
0	int
,	O
0	int
)	O
;	O
window_puts	function
(	O
title_window	pointer
,	O
global_buf	pointer
,	O
tty_columns	int
)	O
;	O
}	O
void	O
set_header	function
(	O
)	O
{	O
memset	function
(	O
global_buf	pointer
,	O
' '	O
,	O
tty_columns	int
)	O
;	O
memcpy	function
(	O
global_buf	pointer
,	O
header_text	pointer
,	O
min	O
(	O
tty_columns	int
,	O
(	O
int	O
)	O
strlen	function
(	O
header_text	pointer
)	O
)	O
)	O
;	O
tty_colors	function
(	O
HeaderBrightness	O
,	O
HeaderForeground	O
,	O
HeaderBackground	O
)	O
;	O
window_goto	function
(	O
header_window	pointer
,	O
0	int
,	O
0	int
)	O
;	O
window_puts	function
(	O
header_window	pointer
,	O
global_buf	pointer
,	O
tty_columns	int
)	O
;	O
}	O
void	O
set_status	function
(	O
)	O
{	O
memset	function
(	O
global_buf	pointer
,	O
' '	O
,	O
tty_columns	int
)	O
;	O
memcpy	function
(	O
global_buf	pointer
,	O
g_help	pointer
,	O
min	O
(	O
tty_columns	int
,	O
(	O
int	O
)	O
strlen	function
(	O
g_help	pointer
)	O
)	O
)	O
;	O
tty_colors	function
(	O
StatusBrightness	O
,	O
StatusForeground	O
,	O
StatusBackground	O
)	O
;	O
window_goto	function
(	O
status_window	pointer
,	O
0	int
,	O
0	int
)	O
;	O
window_puts	function
(	O
status_window	pointer
,	O
global_buf	pointer
,	O
tty_columns	int
)	O
;	O
}	O
void	O
report_undefined_key	function
(	O
)	O
{	O
char	O
*	O
prev	pointer
=	O
tty_get_previous_key_seq	function
(	O
)	O
;	O
size_t	long
length	long
=	O
strlen	function
(	O
prev	pointer
)	O
;	O
if	O
(	O
length	long
&&	O
(	O
prev	pointer
[	O
length	long
-	O
1	int
]	O
!=	O
key_INTERRUPT	O
)	O
)	O
{	O
char	O
*	O
str	pointer
=	O
(	O
char	O
*	O
)	O
tty_key_machine2human	function
(	O
tty_get_previous_key_seq	function
(	O
)	O
)	O
;	O
char	O
*	O
buf	pointer
=	O
xmalloc	function
(	O
128	int
+	O
strlen	function
(	O
str	pointer
)	O
)	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s: not defined."	pointer
,	O
str	pointer
)	O
;	O
memset	function
(	O
global_buf	pointer
,	O
' '	O
,	O
tty_columns	int
)	O
;	O
memcpy	function
(	O
global_buf	pointer
,	O
buf	pointer
,	O
min	O
(	O
tty_columns	int
,	O
(	O
int	O
)	O
strlen	function
(	O
buf	pointer
)	O
)	O
)	O
;	O
xfree	function
(	O
buf	pointer
)	O
;	O
tty_colors	function
(	O
ON	int
,	O
WHITE	int
,	O
RED	int
)	O
;	O
window_goto	function
(	O
status_window	pointer
,	O
0	int
,	O
0	int
)	O
;	O
window_puts	function
(	O
status_window	pointer
,	O
global_buf	pointer
,	O
tty_columns	int
)	O
;	O
tty_beep	function
(	O
)	O
;	O
tty_update	function
(	O
)	O
;	O
sleep	function
(	O
1	int
)	O
;	O
}	O
else	O
tty_beep	function
(	O
)	O
;	O
set_status	function
(	O
)	O
;	O
cursor_update	function
(	O
)	O
;	O
tty_update	function
(	O
)	O
;	O
}	O
char	O
char_to_print	function
(	O
c	char
,	O
index	function
,	O
total	int
)	O
char	O
c	char
;	O
int	O
index	function
;	O
int	O
total	int
;	O
{	O
if	O
(	O
index	function
<	O
total	int
)	O
return	O
isprint	function
(	O
(	O
int	O
)	O
c	char
)	O
?	O
c	char
:	O
'.'	O
;	O
return	O
' '	O
;	O
}	O
void	O
update_line	function
(	O
line	long long
)	O
long	O
long	O
line	long long
;	O
{	O
ssize_t	long
r	long
;	O
unsigned	O
char	O
buf	pointer
[	O
16	int
]	O
;	O
char	O
*	O
line_string	pointer
=	O
xmalloc	function
(	O
max	O
(	O
tty_columns	int
,	O
80	int
+	O
1	int
)	O
)	O
;	O
memset	function
(	O
line_string	pointer
,	O
' '	O
,	O
tty_columns	int
)	O
;	O
memset	function
(	O
buf	pointer
,	O
'\0'	O
,	O
sizeof	O
(	O
buf	pointer
)	O
)	O
;	O
lseek64	function
(	O
fd	int
,	O
(	O
off64_t	long
)	O
line	long long
*	O
sizeof	O
(	O
buf	pointer
)	O
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
(	O
r	long
=	O
read	pointer
(	O
fd	int
,	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
)	O
)	O
)	O
{	O
sprintf	function
(	O
line_string	pointer
,	O
"%011X0  %02X %02X %02X %02X %02X %02X %02X %02X  %02X %02X %02X %02X %02X %02X %02X %02X  %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c "	pointer
,	O
(	O
unsigned	O
int	O
)	O
(	O
line	long long
&	O
0xFFFFFFFF	int
)	O
,	O
buf	pointer
[	O
0	int
]	O
,	O
buf	pointer
[	O
1	int
]	O
,	O
buf	pointer
[	O
2	int
]	O
,	O
buf	pointer
[	O
3	int
]	O
,	O
buf	pointer
[	O
4	int
]	O
,	O
buf	pointer
[	O
5	int
]	O
,	O
buf	pointer
[	O
6	int
]	O
,	O
buf	pointer
[	O
7	int
]	O
,	O
buf	pointer
[	O
8	int
]	O
,	O
buf	pointer
[	O
9	int
]	O
,	O
buf	pointer
[	O
10	int
]	O
,	O
buf	pointer
[	O
11	int
]	O
,	O
buf	pointer
[	O
12	int
]	O
,	O
buf	pointer
[	O
13	int
]	O
,	O
buf	pointer
[	O
14	int
]	O
,	O
buf	pointer
[	O
15	int
]	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
0	int
]	O
,	O
0	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
1	int
]	O
,	O
1	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
2	int
]	O
,	O
2	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
3	int
]	O
,	O
3	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
4	int
]	O
,	O
4	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
5	int
]	O
,	O
5	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
6	int
]	O
,	O
6	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
7	int
]	O
,	O
7	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
8	int
]	O
,	O
8	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
9	int
]	O
,	O
9	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
10	int
]	O
,	O
10	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
11	int
]	O
,	O
11	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
12	int
]	O
,	O
12	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
13	int
]	O
,	O
13	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
14	int
]	O
,	O
14	int
,	O
r	long
)	O
,	O
char_to_print	function
(	O
buf	pointer
[	O
15	int
]	O
,	O
15	int
,	O
r	long
)	O
)	O
;	O
}	O
else	O
{	O
r	long
=	O
0	int
;	O
*	O
line_string	pointer
=	O
'\0'	O
;	O
}	O
if	O
(	O
r	long
<	O
8	int
)	O
memset	function
(	O
line_string	pointer
+	O
12	int
+	O
r	long
*	O
3	int
,	O
' '	O
,	O
(	O
16	int
-	O
r	long
)	O
*	O
3	int
+	O
1	int
)	O
;	O
else	O
if	O
(	O
r	long
>=	O
8	int
&&	O
r	long
<	O
16	int
)	O
memset	function
(	O
line_string	pointer
+	O
12	int
+	O
r	long
*	O
3	int
+	O
1	int
,	O
' '	O
,	O
(	O
16	int
-	O
r	long
)	O
*	O
3	int
)	O
;	O
line_string	pointer
[	O
strlen	function
(	O
line_string	pointer
)	O
]	O
=	O
' '	O
;	O
window_puts	function
(	O
file_window	pointer
,	O
line_string	pointer
,	O
tty_columns	int
)	O
;	O
xfree	function
(	O
line_string	pointer
)	O
;	O
}	O
void	O
update_all	function
(	O
)	O
{	O
long	O
long	O
i	long long
;	O
tty_colors	function
(	O
ScreenBrightness	O
,	O
ScreenForeground	O
,	O
ScreenBackground	O
)	O
;	O
for	O
(	O
i	long long
=	O
g_current_line	long long
;	O
i	long long
<	O
g_current_line	long long
+	O
VIEW_LINES	O
;	O
i	long long
++	O
)	O
{	O
window_goto	function
(	O
file_window	pointer
,	O
3	int
+	O
i	long long
-	O
g_current_line	long long
,	O
0	int
)	O
;	O
update_line	function
(	O
i	long long
)	O
;	O
}	O
}	O
void	O
clean_up	function
(	O
)	O
{	O
tty_end	function
(	O
NULL	O
)	O
;	O
}	O
void	O
fatal	function
(	O
postmsg	pointer
)	O
char	O
*	O
postmsg	pointer
;	O
{	O
clean_up	function
(	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: fatal error: %s.\n"	pointer
,	O
g_program	pointer
,	O
postmsg	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
int	O
read_keys	function
(	O
keys	int
)	O
int	O
keys	int
;	O
{	O
char	O
*	O
contents	pointer
;	O
char	O
key_seq	pointer
[	O
80	int
]	O
;	O
int	O
i	long long
,	O
j	int
,	O
need_conversion	int
;	O
for	O
(	O
i	long long
=	O
keys	int
;	O
i	long long
<	O
MAX_KEYS	int
;	O
i	long long
++	O
)	O
{	O
configuration_getvarinfo	function
(	O
key_seq	pointer
,	O
&	O
contents	pointer
,	O
1	int
,	O
NO_SEEK	int
)	O
;	O
if	O
(	O
*	O
key_seq	pointer
==	O
0	int
)	O
break	O
;	O
if	O
(	O
*	O
key_seq	pointer
!=	O
'^'	O
)	O
{	O
char	O
*	O
key_seq_ptr	pointer
=	O
tty_get_symbol_key_seq	function
(	O
key_seq	pointer
)	O
;	O
if	O
(	O
key_seq_ptr	pointer
)	O
{	O
if	O
(	O
*	O
key_seq_ptr	pointer
==	O
'\0'	O
)	O
continue	O
;	O
strcpy	function
(	O
key_seq	pointer
,	O
key_seq_ptr	pointer
)	O
;	O
need_conversion	int
=	O
0	int
;	O
}	O
else	O
{	O
need_conversion	int
=	O
1	int
;	O
}	O
}	O
else	O
need_conversion	int
=	O
1	int
;	O
if	O
(	O
contents	pointer
==	O
NULL	O
)	O
continue	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
BUILTIN_OPERATIONS	int
;	O
j	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
contents	pointer
,	O
built_in	array
[	O
j	int
]	O
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
j	int
<	O
BUILTIN_OPERATIONS	int
)	O
{	O
if	O
(	O
!	O
need_conversion	int
||	O
tty_key_human2machine	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
key_seq	pointer
)	O
)	O
tty_key_list_insert	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
key_seq	pointer
,	O
built_in	array
[	O
-	O
j	int
-	O
1	int
]	O
)	O
;	O
}	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid built-in operation: %s.\n"	pointer
,	O
g_program	pointer
,	O
contents	pointer
)	O
;	O
}	O
return	O
i	long long
;	O
}	O
void	O
resize	function
(	O
resize_required	int
)	O
int	O
resize_required	int
;	O
{	O
int	O
display_status	int
=	O
OFF	int
;	O
int	O
display_header	int
=	O
OFF	int
;	O
int	O
display_file	int
=	O
OFF	int
;	O
int	O
old_tty_lines	int
=	O
tty_lines	int
;	O
int	O
old_tty_columns	int
=	O
tty_columns	int
;	O
tty_resize	function
(	O
)	O
;	O
if	O
(	O
!	O
resize_required	int
)	O
if	O
(	O
tty_lines	int
==	O
old_tty_lines	int
&&	O
tty_columns	int
==	O
old_tty_columns	int
)	O
return	O
;	O
if	O
(	O
LinuxConsole	int
)	O
screen	pointer
=	O
xrealloc	function
(	O
screen	pointer
,	O
4	int
+	O
tty_columns	int
*	O
tty_lines	int
*	O
2	int
)	O
;	O
global_buf	pointer
=	O
xrealloc	function
(	O
global_buf	pointer
,	O
tty_columns	int
+	O
1	int
)	O
;	O
header_text	pointer
=	O
xrealloc	function
(	O
header_text	pointer
,	O
strlen	function
(	O
filename	pointer
)	O
+	O
10	int
)	O
;	O
window_resize	function
(	O
title_window	pointer
,	O
0	int
,	O
0	int
,	O
1	int
,	O
tty_columns	int
)	O
;	O
if	O
(	O
tty_lines	int
>=	O
2	int
)	O
display_status	int
=	O
ON	int
;	O
if	O
(	O
tty_lines	int
>=	O
3	int
)	O
display_header	int
=	O
ON	int
;	O
if	O
(	O
tty_lines	int
>=	O
4	int
)	O
display_file	int
=	O
ON	int
;	O
window_resize	function
(	O
status_window	pointer
,	O
0	int
,	O
tty_lines	int
-	O
1	int
,	O
display_status	int
?	O
1	int
:	O
0	int
,	O
tty_columns	int
)	O
;	O
window_resize	function
(	O
header_window	pointer
,	O
0	int
,	O
1	int
,	O
display_header	int
?	O
1	int
:	O
0	int
,	O
tty_columns	int
)	O
;	O
window_resize	function
(	O
file_window	pointer
,	O
0	int
,	O
2	int
,	O
display_file	int
?	O
(	O
tty_lines	int
-	O
2	int
)	O
:	O
0	int
,	O
tty_columns	int
)	O
;	O
}	O
void	O
refresh	function
(	O
signum	int
)	O
int	O
signum	int
;	O
{	O
resize	function
(	O
0	int
)	O
;	O
if	O
(	O
signum	int
==	O
SIGCONT	int
)	O
{	O
tty_set_mode	function
(	O
TTY_NONCANONIC	int
)	O
;	O
tty_defaults	function
(	O
)	O
;	O
}	O
tty_colors	function
(	O
ScreenBrightness	O
,	O
ScreenForeground	O
,	O
ScreenBackground	O
)	O
;	O
tty_fill	function
(	O
)	O
;	O
g_size	long
=	O
file_length	function
(	O
)	O
;	O
g_lines	long long
=	O
g_size	long
/	O
16	int
+	O
(	O
g_size	long
%	O
16	int
?	O
1	int
:	O
0	int
)	O
;	O
if	O
(	O
tty_lines	int
>=	O
5	int
)	O
{	O
window_goto	function
(	O
file_window	pointer
,	O
1	int
,	O
0	int
)	O
;	O
window_puts	function
(	O
file_window	pointer
,	O
info_txt	array
,	O
sizeof	O
(	O
info_txt	array
)	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
tty_lines	int
>=	O
6	int
)	O
{	O
window_goto	function
(	O
file_window	pointer
,	O
2	int
,	O
0	int
)	O
;	O
window_puts	function
(	O
file_window	pointer
,	O
line_txt	array
,	O
sizeof	O
(	O
line_txt	array
)	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
tty_lines	int
>=	O
9	int
)	O
{	O
if	O
(	O
VIEW_LINES	O
==	O
0	int
)	O
g_current_line	long long
=	O
0	int
;	O
else	O
g_current_line	long long
=	O
min	O
(	O
g_current_line	long long
,	O
(	O
g_lines	long long
/	O
VIEW_LINES	O
)	O
*	O
VIEW_LINES	O
)	O
;	O
window_goto	function
(	O
file_window	pointer
,	O
SEEK_LINE	O
,	O
0	int
)	O
;	O
window_puts	function
(	O
file_window	pointer
,	O
seek_txt	array
,	O
sizeof	O
(	O
seek_txt	array
)	O
-	O
1	int
)	O
;	O
window_goto	function
(	O
file_window	pointer
,	O
SEEK_LINE	O
,	O
sizeof	O
(	O
seek_txt	array
)	O
-	O
1	int
)	O
;	O
window_puts	function
(	O
file_window	pointer
,	O
g_offset	array
,	O
count	int
)	O
;	O
}	O
else	O
g_current_line	long long
=	O
0	int
;	O
set_title	function
(	O
)	O
;	O
set_status	function
(	O
)	O
;	O
set_header	function
(	O
)	O
;	O
update_all	function
(	O
)	O
;	O
if	O
(	O
tty_lines	int
>=	O
9	int
)	O
window_goto	function
(	O
file_window	pointer
,	O
SEEK_LINE	O
,	O
sizeof	O
(	O
seek_txt	array
)	O
-	O
1	int
+	O
count	int
)	O
;	O
else	O
window_goto	function
(	O
file_window	pointer
,	O
tty_lines	int
-	O
1	int
,	O
tty_columns	int
-	O
1	int
)	O
;	O
tty_update	function
(	O
)	O
;	O
if	O
(	O
signum	int
==	O
SIGCONT	int
)	O
tty_update_title	function
(	O
header_text	pointer
)	O
;	O
}	O
void	O
hide	function
(	O
)	O
{	O
tty_set_mode	function
(	O
TTY_CANONIC	int
)	O
;	O
tty_defaults	function
(	O
)	O
;	O
tty_put_screen	function
(	O
screen	pointer
)	O
;	O
}	O
void	O
clock_refresh	function
(	O
)	O
{	O
}	O
void	O
usage	function
(	O
)	O
{	O
printf	function
(	O
"usage: %s [-hvicbl] file\n"	pointer
,	O
g_program	pointer
)	O
;	O
printf	function
(	O
" -h         print this help message\n"	pointer
)	O
;	O
printf	function
(	O
" -v         print the version number\n"	pointer
)	O
;	O
printf	function
(	O
" -c         use ANSI colors\n"	pointer
)	O
;	O
printf	function
(	O
" -b         don't use ANSI colors\n"	pointer
)	O
;	O
printf	function
(	O
" -l         don't use the last screen character\n"	pointer
)	O
;	O
}	O
int	O
main	function
(	O
argc	int
,	O
argv	array
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array
[	O
]	O
;	O
{	O
int	O
key	int
=	O
0	int
;	O
struct	O
stat	struct
s	long
;	O
tty_key_t	struct
*	O
ks	pointer
;	O
int	O
keys	int
,	O
repeat_count	int
,	O
need_update	int
;	O
int	O
c	char
,	O
ansi_colors	int
=	O
-	O
1	int
,	O
use_last_screen_character	int
=	O
ON	int
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
signals_init	function
(	O
)	O
;	O
program_name	pointer
=	O
g_program	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
g_home	pointer
=	O
getenv	function
(	O
"HOME"	pointer
)	O
;	O
if	O
(	O
g_home	pointer
==	O
NULL	O
)	O
g_home	pointer
=	O
"."	pointer
;	O
compute_directories	function
(	O
)	O
;	O
get_login_name	function
(	O
)	O
;	O
if	O
(	O
getenv	function
(	O
"COLORTERM"	pointer
)	O
!=	O
NULL	O
)	O
ansi_colors	int
=	O
ON	int
;	O
while	O
(	O
(	O
c	char
=	O
getopt	function
(	O
argc	int
,	O
argv	array
,	O
"hvcblp"	pointer
)	O
)	O
!=	O
-	O
1	int
)	O
switch	O
(	O
c	char
)	O
{	O
case	O
'h'	O
:	O
usage	function
(	O
)	O
;	O
return	O
0	int
;	O
case	O
'v'	O
:	O
printf	function
(	O
"%s %s\n"	pointer
,	O
PRODUCT	pointer
,	O
VERSION	pointer
)	O
;	O
return	O
0	int
;	O
case	O
'c'	O
:	O
ansi_colors	int
=	O
ON	int
;	O
break	O
;	O
case	O
'b'	O
:	O
ansi_colors	int
=	O
OFF	int
;	O
break	O
;	O
case	O
'l'	O
:	O
use_last_screen_character	int
=	O
OFF	int
;	O
break	O
;	O
case	O
'?'	O
:	O
return	O
1	int
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unknown error\n"	pointer
,	O
g_program	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
filename	pointer
=	O
xstrdup	function
(	O
argv	array
[	O
optind	int
++	O
]	O
)	O
;	O
else	O
{	O
usage	function
(	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: warning: invalid extra options ignored\n"	pointer
,	O
g_program	pointer
)	O
;	O
title_text	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
PRODUCT	pointer
)	O
+	O
strlen	function
(	O
VERSION	pointer
)	O
+	O
64	int
)	O
;	O
sprintf	function
(	O
title_text	pointer
,	O
" %s %s - Hex/Ascii File Viewer"	pointer
,	O
PRODUCT	pointer
,	O
VERSION	pointer
)	O
;	O
tty_init	function
(	O
TTY_RESTRICTED_INPUT	int
)	O
;	O
xstat	function
(	O
filename	pointer
,	O
&	O
s	long
)	O
;	O
fd	int
=	O
open64	function
(	O
filename	pointer
,	O
O_RDONLY	int
|	O
O_BINARY	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: cannot open file %s.\n"	pointer
,	O
g_program	pointer
,	O
filename	pointer
)	O
;	O
return	O
1	int
;	O
}	O
regular_file	int
=	O
S_ISREG	O
(	O
s	long
.	O
st_mode	int
)	O
;	O
common_configuration_init	function
(	O
)	O
;	O
use_section	function
(	O
"[GITVIEW-Keys]"	pointer
)	O
;	O
keys	int
=	O
read_keys	function
(	O
0	int
)	O
;	O
configuration_end	function
(	O
)	O
;	O
specific_configuration_init	function
(	O
)	O
;	O
use_section	function
(	O
"[Setup]"	pointer
)	O
;	O
if	O
(	O
ansi_colors	int
==	O
-	O
1	int
)	O
AnsiColors	int
=	O
get_flag_var	function
(	O
"AnsiColors"	pointer
,	O
OFF	int
)	O
;	O
else	O
AnsiColors	int
=	O
ansi_colors	int
;	O
if	O
(	O
use_last_screen_character	int
)	O
UseLastScreenChar	int
=	O
get_flag_var	function
(	O
"UseLastScreenChar"	pointer
,	O
OFF	int
)	O
;	O
else	O
UseLastScreenChar	int
=	O
OFF	int
;	O
tty_set_last_char_flag	function
(	O
UseLastScreenChar	int
)	O
;	O
use_section	function
(	O
"[GITVIEW-Setup]"	pointer
)	O
;	O
g_help	pointer
=	O
get_string_var	function
(	O
"Help"	pointer
,	O
""	pointer
)	O
;	O
use_section	function
(	O
AnsiColors	int
?	O
color_section	array
:	O
monochrome_section	array
)	O
;	O
get_colorset_var	function
(	O
ViewerColors	array
,	O
ViewerFields	array
,	O
VIEWER_FIELDS	int
)	O
;	O
use_section	function
(	O
"[GITVIEW-Keys]"	pointer
)	O
;	O
keys	int
=	O
read_keys	function
(	O
keys	int
)	O
;	O
if	O
(	O
keys	int
==	O
MAX_KEYS	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: too many key sequences; only %d are allowed.\n"	pointer
,	O
g_program	pointer
,	O
MAX_KEYS	int
)	O
;	O
configuration_end	function
(	O
)	O
;	O
tty_start_cursorapp	function
(	O
)	O
;	O
title_window	pointer
=	O
window_init	function
(	O
)	O
;	O
header_window	pointer
=	O
window_init	function
(	O
)	O
;	O
file_window	pointer
=	O
window_init	function
(	O
)	O
;	O
status_window	pointer
=	O
window_init	function
(	O
)	O
;	O
resize	function
(	O
0	int
)	O
;	O
tty_get_screen	function
(	O
screen	pointer
)	O
;	O
tty_set_mode	function
(	O
TTY_NONCANONIC	int
)	O
;	O
tty_defaults	function
(	O
)	O
;	O
signal_handlers	function
(	O
ON	int
)	O
;	O
g_offset	array
[	O
count	int
]	O
=	O
0	int
;	O
g_current_line	long long
=	O
0	int
;	O
sprintf	function
(	O
header_text	pointer
,	O
" File: %s"	pointer
,	O
filename	pointer
)	O
;	O
tty_update_title	function
(	O
header_text	pointer
)	O
;	O
restart	O
:	O
refresh	function
(	O
0	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
while	O
(	O
(	O
ks	pointer
=	O
tty_get_key	function
(	O
&	O
repeat_count	int
)	O
)	O
==	O
NULL	O
)	O
report_undefined_key	function
(	O
)	O
;	O
set_status	function
(	O
)	O
;	O
if	O
(	O
ks	pointer
->	O
aux_data	pointer
==	O
NULL	O
)	O
key	int
=	O
ks	pointer
->	O
key_seq	pointer
[	O
0	int
]	O
;	O
else	O
key	int
=	O
(	O
(	O
char	O
*	O
)	O
ks	pointer
->	O
aux_data	pointer
-	O
(	O
char	O
*	O
)	O
built_in	array
)	O
/	O
MAX_BUILTIN_NAME	int
;	O
g_size	long
=	O
file_length	function
(	O
)	O
;	O
g_lines	long long
=	O
g_size	long
/	O
16	int
+	O
(	O
g_size	long
%	O
16	int
?	O
1	int
:	O
0	int
)	O
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
BUILTIN_previous_line	O
:	O
need_update	int
=	O
0	int
;	O
while	O
(	O
repeat_count	int
--	O
)	O
{	O
if	O
(	O
g_current_line	long long
==	O
0	int
)	O
break	O
;	O
g_current_line	long long
--	O
,	O
need_update	int
=	O
1	int
;	O
}	O
if	O
(	O
need_update	int
)	O
update_all	function
(	O
)	O
;	O
break	O
;	O
case	O
BUILTIN_next_line	O
:	O
need_update	int
=	O
0	int
;	O
while	O
(	O
repeat_count	int
--	O
)	O
{	O
if	O
(	O
g_current_line	long long
>=	O
g_lines	long long
-	O
VIEW_LINES	O
)	O
break	O
;	O
g_current_line	long long
++	O
,	O
need_update	int
=	O
1	int
;	O
}	O
if	O
(	O
need_update	int
)	O
update_all	function
(	O
)	O
;	O
break	O
;	O
case	O
BUILTIN_backspace	O
:	O
if	O
(	O
count	int
)	O
{	O
count	int
--	O
;	O
if	O
(	O
tty_lines	int
>=	O
9	int
)	O
{	O
tty_colors	function
(	O
ScreenBrightness	O
,	O
ScreenForeground	O
,	O
ScreenBackground	O
)	O
;	O
window_goto	function
(	O
file_window	pointer
,	O
SEEK_LINE	O
,	O
strlen	function
(	O
seek_txt	array
)	O
+	O
count	int
)	O
;	O
window_putc	function
(	O
file_window	pointer
,	O
' '	O
)	O
;	O
}	O
else	O
window_goto	function
(	O
file_window	pointer
,	O
tty_lines	int
-	O
1	int
,	O
tty_columns	int
-	O
1	int
)	O
;	O
break	O
;	O
}	O
case	O
BUILTIN_scroll_down	O
:	O
if	O
(	O
g_current_line	long long
==	O
0	int
)	O
break	O
;	O
g_current_line	long long
=	O
max	O
(	O
0	int
,	O
g_current_line	long long
-	O
VIEW_LINES	O
)	O
;	O
update_all	function
(	O
)	O
;	O
break	O
;	O
case	O
' '	O
:	O
case	O
BUILTIN_scroll_up	O
:	O
if	O
(	O
g_current_line	long long
>=	O
g_lines	long long
-	O
VIEW_LINES	O
)	O
break	O
;	O
g_current_line	long long
=	O
min	O
(	O
g_lines	long long
-	O
1	int
,	O
g_current_line	long long
+	O
VIEW_LINES	O
)	O
;	O
update_all	function
(	O
)	O
;	O
break	O
;	O
case	O
BUILTIN_beginning_of_file	O
:	O
if	O
(	O
g_current_line	long long
)	O
{	O
g_current_line	long long
=	O
0	int
;	O
update_all	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
BUILTIN_end_of_file	O
:	O
if	O
(	O
regular_file	int
&&	O
g_current_line	long long
<	O
g_lines	long long
-	O
VIEW_LINES	O
)	O
{	O
g_current_line	long long
=	O
g_lines	long long
-	O
VIEW_LINES	O
;	O
update_all	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
BUILTIN_hard_refresh	O
:	O
case	O
BUILTIN_refresh	O
:	O
goto	O
restart	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
if	O
(	O
count	int
<	O
8	int
)	O
{	O
if	O
(	O
tty_lines	int
>=	O
9	int
)	O
{	O
char	O
tmp	char
;	O
tty_colors	function
(	O
ScreenBrightness	O
,	O
ScreenForeground	O
,	O
ScreenBackground	O
)	O
;	O
window_goto	function
(	O
file_window	pointer
,	O
SEEK_LINE	O
,	O
strlen	function
(	O
seek_txt	array
)	O
+	O
count	int
)	O
;	O
tmp	char
=	O
(	O
char	O
)	O
key	int
;	O
window_putc	function
(	O
file_window	pointer
,	O
tmp	char
)	O
;	O
g_offset	array
[	O
count	int
++	O
]	O
=	O
tmp	char
;	O
}	O
}	O
else	O
tty_beep	function
(	O
)	O
;	O
break	O
;	O
case	O
BUILTIN_action	O
:	O
if	O
(	O
count	int
==	O
0	int
)	O
tty_beep	function
(	O
)	O
;	O
else	O
{	O
if	O
(	O
tty_lines	int
>=	O
9	int
)	O
{	O
g_offset	array
[	O
count	int
]	O
=	O
0	int
;	O
sscanf	function
(	O
g_offset	array
,	O
"%x"	pointer
,	O
&	O
count	int
)	O
;	O
tty_colors	function
(	O
ScreenBrightness	O
,	O
ScreenForeground	O
,	O
ScreenBackground	O
)	O
;	O
window_goto	function
(	O
file_window	pointer
,	O
SEEK_LINE	O
,	O
strlen	function
(	O
seek_txt	array
)	O
)	O
;	O
window_puts	function
(	O
file_window	pointer
,	O
"        "	pointer
,	O
8	int
)	O
;	O
if	O
(	O
count	int
<	O
0	int
)	O
count	int
=	O
0	int
;	O
if	O
(	O
count	int
>	O
g_size	long
)	O
count	int
=	O
g_size	long
;	O
g_current_line	long long
=	O
count	int
>>	O
4	int
;	O
update_all	function
(	O
)	O
;	O
count	int
=	O
0	int
;	O
}	O
}	O
break	O
;	O
case	O
'q'	O
:	O
case	O
BUILTIN_exit	O
:	O
goto	O
end	O
;	O
default	O
:	O
report_undefined_key	function
(	O
)	O
;	O
break	O
;	O
}	O
cursor_update	function
(	O
)	O
;	O
}	O
end	O
:	O
tty_set_mode	function
(	O
TTY_CANONIC	int
)	O
;	O
tty_end_cursorapp	function
(	O
)	O
;	O
tty_end	function
(	O
screen	pointer
)	O
;	O
return	O
0	int
;	O
}	O
