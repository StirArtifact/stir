static	O
int	O
g_active_flag	int
=	O
1	int
;	O
static	O
int	O
g_did_get_command	int
=	O
0	int
;	O
static	O
int	O
is_posix_shell_command	function
(	O
char	O
*	O
s	pointer
)	O
{	O
int	O
retval	int
=	O
0	int
;	O
if	O
(	O
strstr	function
(	O
s	pointer
,	O
"getconf"	pointer
)	O
&&	O
strstr	function
(	O
s	pointer
,	O
"PATH"	pointer
)	O
)	O
{	O
char	O
*	O
sp	pointer
=	O
strdup	function
(	O
s	pointer
)	O
;	O
char	O
*	O
p	pointer
=	O
sp	pointer
;	O
return	O
1	int
;	O
while	O
(	O
p	pointer
&&	O
*	O
p	pointer
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
)	O
memmove	function
(	O
p	pointer
,	O
p	pointer
+	O
1	int
,	O
strlen	function
(	O
p	pointer
+	O
1	int
)	O
+	O
1	int
)	O
;	O
else	O
p	pointer
++	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
sp	pointer
,	O
SWSSH_POSIX_SHELL_COMMAND	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
g_did_get_command	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"internal error in swssh\n"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
g_did_get_command	int
=	O
g_active_flag	int
;	O
retval	int
=	O
1	int
;	O
}	O
else	O
{	O
retval	int
=	O
0	int
;	O
}	O
free	function
(	O
sp	pointer
)	O
;	O
}	O
else	O
{	O
retval	int
=	O
0	int
;	O
}	O
return	O
retval	int
;	O
}	O
static	O
int	O
bail_on_taint	function
(	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
swlib_is_sh_tainted_string	function
(	O
s	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"arg contains shell meta characters [%s]\n"	pointer
,	O
s	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
*	O
safe_shcmd_add_arg	function
(	O
SHCMD	struct
*	O
cmd	int
,	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
!	O
cmd	int
)	O
return	O
NULL	O
;	O
if	O
(	O
is_posix_shell_command	function
(	O
s	pointer
)	O
==	O
0	int
)	O
{	O
bail_on_taint	function
(	O
s	pointer
)	O
;	O
}	O
return	O
shcmd_add_arg	function
(	O
cmd	int
,	O
s	pointer
)	O
;	O
}	O
static	O
void	O
clean_leading_comm_at_sign	function
(	O
char	O
*	O
*	O
ptar	pointer
)	O
{	O
if	O
(	O
*	O
ptar	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
(	O
*	O
*	O
ptar	pointer
)	O
==	O
'@'	O
)	O
(	O
*	O
ptar	pointer
)	O
++	O
;	O
while	O
(	O
(	O
*	O
*	O
ptar	pointer
)	O
==	O
'\x20'	O
)	O
(	O
*	O
ptar	pointer
)	O
++	O
;	O
}	O
static	O
int	O
cat_escapes	function
(	O
STROB	struct
*	O
command	pointer
,	O
int	O
nhops	int
)	O
{	O
int	O
nbackslashes	int
=	O
0	int
;	O
if	O
(	O
nhops	int
==	O
0	int
)	O
{	O
nbackslashes	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
nhops	int
==	O
1	int
)	O
{	O
nbackslashes	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
nhops	int
==	O
2	int
)	O
{	O
nbackslashes	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
nhops	int
==	O
3	int
)	O
{	O
nbackslashes	int
=	O
3	int
;	O
}	O
else	O
if	O
(	O
nhops	int
==	O
4	int
)	O
{	O
nbackslashes	int
=	O
7	int
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
{	O
int	O
i	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nbackslashes	int
;	O
i	int
++	O
)	O
{	O
strob_strcat	function
(	O
command	pointer
,	O
"\\"	pointer
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
form_intermediate_msg	function
(	O
STROB	struct
*	O
command	pointer
,	O
char	O
*	O
host	pointer
,	O
int	O
nhops	int
)	O
{	O
strob_sprintf	function
(	O
command	pointer
,	O
0	int
,	O
"echo 10%d Intermediate Host:%s:"	pointer
SWSSH_TRACK_PID	pointer
";"	pointer
,	O
nhops	int
,	O
host	pointer
)	O
;	O
swssh_protect_shell_metacharacters	function
(	O
command	pointer
,	O
nhops	int
,	O
SWBIS_TAINTED_CHARS	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
add_host_kill	function
(	O
int	O
doimsg	int
,	O
SHCMD	struct
*	O
cmd	int
,	O
char	O
*	O
host	pointer
,	O
int	O
cmdcount	int
)	O
{	O
char	O
*	O
s	pointer
;	O
char	O
*	O
tok	pointer
;	O
STROB	struct
*	O
t	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
if	O
(	O
!	O
doimsg	int
)	O
return	O
;	O
t	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
strob_sprintf	function
(	O
tmp	pointer
,	O
0	int
,	O
"kill "	pointer
SWC_KILL_PID_MARK	pointer
" ;"	pointer
,	O
cmdcount	int
,	O
host	pointer
)	O
;	O
swssh_protect_shell_metacharacters	function
(	O
tmp	pointer
,	O
cmdcount	int
,	O
SWBIS_TAINTED_CHARS	pointer
)	O
;	O
strob_strcpy	function
(	O
t	pointer
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
s	pointer
=	O
strob_str	function
(	O
t	pointer
)	O
;	O
while	O
(	O
(	O
tok	pointer
=	O
strob_strstrtok	function
(	O
t	pointer
,	O
s	pointer
,	O
" "	pointer
)	O
)	O
)	O
{	O
s	pointer
=	O
NULL	O
;	O
shcmd_add_arg	function
(	O
cmd	int
,	O
tok	pointer
)	O
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
strob_close	function
(	O
t	pointer
)	O
;	O
}	O
static	O
void	O
add_host_message	function
(	O
int	O
doimsg	int
,	O
SHCMD	struct
*	O
cmd	int
,	O
char	O
*	O
host	pointer
,	O
int	O
cmdcount	int
)	O
{	O
char	O
*	O
s	pointer
;	O
char	O
*	O
tok	pointer
;	O
STROB	struct
*	O
t	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
if	O
(	O
!	O
doimsg	int
)	O
return	O
;	O
t	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
form_intermediate_msg	function
(	O
tmp	pointer
,	O
host	pointer
,	O
cmdcount	int
)	O
;	O
strob_strcpy	function
(	O
t	pointer
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
s	pointer
=	O
strob_str	function
(	O
t	pointer
)	O
;	O
while	O
(	O
(	O
tok	pointer
=	O
strob_strstrtok	function
(	O
t	pointer
,	O
s	pointer
,	O
" "	pointer
)	O
)	O
)	O
{	O
s	pointer
=	O
NULL	O
;	O
shcmd_add_arg	function
(	O
cmd	int
,	O
tok	pointer
)	O
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
strob_close	function
(	O
t	pointer
)	O
;	O
}	O
static	O
void	O
parse_host_port	function
(	O
char	O
*	O
host	pointer
,	O
SHCMD	struct
*	O
cmd	int
,	O
SHCMD	struct
*	O
kmd	pointer
)	O
{	O
char	O
*	O
u	pointer
;	O
char	O
*	O
s	pointer
;	O
if	O
(	O
(	O
u	pointer
=	O
strchr	function
(	O
host	pointer
,	O
'_'	O
)	O
)	O
==	O
NULL	O
)	O
{	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
host	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
host	pointer
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
s	pointer
=	O
u	pointer
;	O
s	pointer
++	O
;	O
swlib_atoi	function
(	O
s	pointer
,	O
&	O
status	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
*	O
u	pointer
=	O
'\0'	O
;	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
"-p"	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
"-p"	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
s	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
s	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
host	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
host	pointer
)	O
;	O
*	O
u	pointer
=	O
'_'	O
;	O
}	O
else	O
{	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
host	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
host	pointer
)	O
;	O
}	O
}	O
}	O
void	O
swssh_deactivate_sanity_check	function
(	O
void	O
)	O
{	O
g_active_flag	int
=	O
0	int
;	O
}	O
void	O
swssh_reset_module	function
(	O
void	O
)	O
{	O
g_did_get_command	int
=	O
0	int
;	O
}	O
char	O
*	O
swssh_landing_command	function
(	O
char	O
*	O
shellname	pointer
,	O
int	O
opt_no_getconf	int
)	O
{	O
if	O
(	O
shellname	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
shellname	pointer
,	O
"bash"	pointer
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_BASH_SHELL_COMMAND	pointer
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
shellname	pointer
,	O
SH_A_sh	pointer
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_SH_SHELL_COMMAND	pointer
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
shellname	pointer
,	O
SH_A_ash	pointer
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_ASH_SHELL_COMMAND	pointer
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
shellname	pointer
,	O
SH_A_ksh	pointer
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_KSH_SHELL_COMMAND	pointer
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
shellname	pointer
,	O
SH_A_mksh	pointer
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_MKSH_SHELL_COMMAND	pointer
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
shellname	pointer
,	O
SH_A_dash	pointer
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_DASH_SHELL_COMMAND	pointer
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
shellname	pointer
,	O
"posix"	pointer
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_POSIX_SHELL_COMMAND	pointer
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
shellname	pointer
,	O
"detect"	pointer
)	O
==	O
0	int
)	O
{	O
return	O
SWSSH_SYSTEM_SHELL_COMMAND	pointer
;	O
}	O
else	O
{	O
return	O
SWSSH_SYSTEM_SHELL_COMMAND	pointer
;	O
}	O
}	O
else	O
{	O
if	O
(	O
opt_no_getconf	int
==	O
0	int
)	O
return	O
SWSSH_POSIX_SHELL_COMMAND	pointer
;	O
else	O
return	O
SWSSH_SYSTEM_SHELL_COMMAND	pointer
;	O
}	O
}	O
int	O
swssh_protect_shell_metacharacters	function
(	O
STROB	struct
*	O
command	pointer
,	O
int	O
nhops	int
,	O
char	O
*	O
taints	pointer
)	O
{	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
1	int
)	O
;	O
char	O
ns	array
[	O
2	int
]	O
;	O
char	O
*	O
s	pointer
;	O
strob_strcpy	function
(	O
tmp	pointer
,	O
strob_str	function
(	O
command	pointer
)	O
)	O
;	O
s	pointer
=	O
strob_str	function
(	O
tmp	pointer
)	O
;	O
strob_strcpy	function
(	O
command	pointer
,	O
""	pointer
)	O
;	O
ns	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
*	O
s	pointer
)	O
{	O
if	O
(	O
strchr	function
(	O
taints	pointer
,	O
(	O
int	O
)	O
(	O
*	O
s	pointer
)	O
)	O
)	O
{	O
cat_escapes	function
(	O
command	pointer
,	O
nhops	int
)	O
;	O
}	O
ns	array
[	O
0	int
]	O
=	O
*	O
s	pointer
;	O
strob_strcat	function
(	O
command	pointer
,	O
ns	array
)	O
;	O
s	pointer
++	O
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
swssh_determine_target_path	function
(	O
char	O
*	O
target	pointer
,	O
char	O
*	O
*	O
path	pointer
)	O
{	O
char	O
*	O
ds	pointer
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
*	O
target	pointer
==	O
':'	O
||	O
*	O
target	pointer
==	O
'/'	O
||	O
*	O
target	pointer
==	O
'.'	O
||	O
*	O
target	pointer
==	O
'-'	O
)	O
{	O
*	O
path	pointer
=	O
target	pointer
;	O
target	pointer
=	O
target	pointer
+	O
strlen	function
(	O
*	O
path	pointer
)	O
;	O
}	O
else	O
{	O
ds	pointer
=	O
target	pointer
;	O
p	pointer
=	O
strrchr	function
(	O
ds	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
(	O
*	O
path	pointer
)	O
=	O
++	O
p	pointer
;	O
}	O
else	O
if	O
(	O
!	O
p	pointer
)	O
{	O
if	O
(	O
ds	pointer
&&	O
(	O
*	O
ds	pointer
==	O
'/'	O
||	O
*	O
ds	pointer
==	O
'.'	O
||	O
*	O
ds	pointer
==	O
'-'	O
)	O
)	O
{	O
*	O
path	pointer
=	O
ds	pointer
;	O
}	O
}	O
else	O
{	O
;	O
}	O
if	O
(	O
*	O
path	pointer
)	O
{	O
*	O
path	pointer
=	O
target	pointer
+	O
strlen	function
(	O
target	pointer
)	O
;	O
if	O
(	O
strstr	function
(	O
*	O
path	pointer
,	O
TARGET_DELIM	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"target path not at terminal host\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
swssh_parse_target	function
(	O
SHCMD	struct
*	O
cmd	int
,	O
SHCMD	struct
*	O
kmd	pointer
,	O
char	O
*	O
target	pointer
,	O
char	O
*	O
ssh_command	pointer
,	O
char	O
*	O
fp_remote_ssh_command	pointer
,	O
char	O
*	O
*	O
path	pointer
,	O
char	O
*	O
*	O
terminal_host	pointer
,	O
char	O
*	O
tty_option	pointer
,	O
int	O
do_imsg	int
,	O
char	O
*	O
sshoption	pointer
,	O
int	O
do_forward_auth_agent	int
)	O
{	O
int	O
cmdcount	int
=	O
0	int
;	O
int	O
icmdcount	int
=	O
0	int
;	O
int	O
is_multihop	int
=	O
0	int
;	O
int	O
nhops	int
;	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
STROB	struct
*	O
tmp2	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
char	O
*	O
remote_ssh_command	pointer
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
s	pointer
;	O
char	O
*	O
commat	pointer
;	O
char	O
*	O
user	pointer
;	O
char	O
*	O
host	pointer
;	O
char	O
*	O
parent_host	pointer
=	O
NULL	O
;	O
char	O
*	O
tok	pointer
;	O
char	O
*	O
is_ssh	pointer
;	O
clean_leading_comm_at_sign	function
(	O
&	O
target	pointer
)	O
;	O
*	O
terminal_host	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
*	O
path	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
ssh_command	pointer
==	O
NULL	O
)	O
ssh_command	pointer
=	O
"ssh"	pointer
;	O
is_ssh	pointer
=	O
strstr	function
(	O
ssh_command	pointer
,	O
"ssh"	pointer
)	O
;	O
strob_strcpy	function
(	O
tmp	pointer
,	O
fp_remote_ssh_command	pointer
)	O
;	O
s	pointer
=	O
strstr	function
(	O
strob_str	function
(	O
tmp	pointer
)	O
,	O
"//"	pointer
)	O
;	O
if	O
(	O
0	int
&&	O
s	pointer
==	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
{	O
;	O
}	O
else	O
{	O
swlib_basename	function
(	O
tmp	pointer
,	O
fp_remote_ssh_command	pointer
)	O
;	O
}	O
remote_ssh_command	pointer
=	O
strdup	function
(	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
{	O
char	O
*	O
ds	pointer
;	O
if	O
(	O
*	O
target	pointer
==	O
':'	O
||	O
*	O
target	pointer
==	O
'/'	O
||	O
*	O
target	pointer
==	O
'.'	O
||	O
*	O
target	pointer
==	O
'-'	O
)	O
{	O
*	O
path	pointer
=	O
target	pointer
;	O
target	pointer
=	O
target	pointer
+	O
strlen	function
(	O
*	O
path	pointer
)	O
;	O
}	O
else	O
{	O
ds	pointer
=	O
target	pointer
;	O
p	pointer
=	O
strrchr	function
(	O
ds	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
(	O
*	O
path	pointer
)	O
=	O
++	O
p	pointer
;	O
}	O
else	O
if	O
(	O
!	O
p	pointer
)	O
{	O
if	O
(	O
ds	pointer
&&	O
(	O
*	O
ds	pointer
==	O
'/'	O
||	O
*	O
ds	pointer
==	O
'.'	O
||	O
*	O
ds	pointer
==	O
'-'	O
)	O
)	O
{	O
*	O
path	pointer
=	O
ds	pointer
;	O
}	O
}	O
else	O
{	O
;	O
}	O
if	O
(	O
*	O
path	pointer
)	O
{	O
if	O
(	O
strstr	function
(	O
*	O
path	pointer
,	O
TARGET_DELIM	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"target path not at terminal host\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
}	O
strob_strcpy	function
(	O
tmp	pointer
,	O
target	pointer
)	O
;	O
s	pointer
=	O
strob_str	function
(	O
tmp	pointer
)	O
;	O
nhops	int
=	O
0	int
;	O
while	O
(	O
(	O
tok	pointer
=	O
strob_strstrtok	function
(	O
tmp	pointer
,	O
s	pointer
,	O
TARGET_DELIM	pointer
)	O
)	O
)	O
{	O
nhops	int
++	O
;	O
s	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
nhops	int
>	O
1	int
)	O
{	O
is_multihop	int
=	O
1	int
;	O
}	O
strob_strcpy	function
(	O
tmp	pointer
,	O
target	pointer
)	O
;	O
s	pointer
=	O
strob_str	function
(	O
tmp	pointer
)	O
;	O
while	O
(	O
(	O
tok	pointer
=	O
strob_strstrtok	function
(	O
tmp	pointer
,	O
s	pointer
,	O
TARGET_DELIM	pointer
)	O
)	O
)	O
{	O
user	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
host	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
*	O
terminal_host	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
s	pointer
=	O
NULL	O
;	O
commat	pointer
=	O
strchr	function
(	O
tok	pointer
,	O
'@'	O
)	O
;	O
if	O
(	O
commat	pointer
)	O
{	O
user	pointer
=	O
tok	pointer
;	O
host	pointer
=	O
commat	pointer
+	O
1	int
;	O
*	O
commat	pointer
=	O
'\0'	O
;	O
}	O
else	O
{	O
host	pointer
=	O
tok	pointer
;	O
}	O
if	O
(	O
strchr	function
(	O
host	pointer
,	O
(	O
int	O
)	O
':'	O
)	O
)	O
{	O
*	O
strchr	function
(	O
host	pointer
,	O
(	O
int	O
)	O
':'	O
)	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
strlen	function
(	O
host	pointer
)	O
)	O
{	O
*	O
terminal_host	pointer
=	O
strdup	function
(	O
host	pointer
)	O
;	O
if	O
(	O
cmdcount	int
==	O
0	int
)	O
{	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
ssh_command	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
ssh_command	pointer
)	O
;	O
}	O
else	O
{	O
add_host_message	function
(	O
do_imsg	int
,	O
cmd	int
,	O
parent_host	pointer
,	O
cmdcount	int
)	O
;	O
add_host_kill	function
(	O
do_imsg	int
,	O
kmd	pointer
,	O
parent_host	pointer
,	O
cmdcount	int
)	O
;	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
remote_ssh_command	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
remote_ssh_command	pointer
)	O
;	O
}	O
parent_host	pointer
=	O
strdup	function
(	O
host	pointer
)	O
;	O
if	O
(	O
is_ssh	pointer
)	O
{	O
if	O
(	O
tty_option	pointer
)	O
{	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
tty_option	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
tty_option	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
tty_option	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
tty_option	pointer
)	O
;	O
}	O
if	O
(	O
is_multihop	int
)	O
{	O
if	O
(	O
do_forward_auth_agent	int
)	O
{	O
if	O
(	O
cmdcount	int
+	O
1	int
<	O
nhops	int
)	O
{	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
"-A"	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
"-A"	pointer
)	O
;	O
}	O
else	O
{	O
;	O
}	O
}	O
}	O
if	O
(	O
sshoption	pointer
&&	O
strlen	function
(	O
sshoption	pointer
)	O
)	O
{	O
strob_strcpy	function
(	O
tmp2	pointer
,	O
"-"	pointer
)	O
;	O
strob_strcat	function
(	O
tmp2	pointer
,	O
sshoption	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
strob_str	function
(	O
tmp2	pointer
)	O
)	O
;	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
strob_str	function
(	O
tmp2	pointer
)	O
)	O
;	O
}	O
}	O
cmdcount	int
++	O
;	O
}	O
else	O
if	O
(	O
strlen	function
(	O
host	pointer
)	O
==	O
0	int
&&	O
icmdcount	int
==	O
0	int
)	O
{	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
"/bin/sh"	pointer
)	O
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
user	pointer
)	O
{	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
"-l"	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
user	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
"-l"	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
kmd	pointer
,	O
user	pointer
)	O
;	O
}	O
if	O
(	O
strlen	function
(	O
host	pointer
)	O
)	O
{	O
parse_host_port	function
(	O
host	pointer
,	O
cmd	int
,	O
kmd	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strlen	function
(	O
host	pointer
)	O
==	O
0	int
&&	O
icmdcount	int
==	O
0	int
)	O
{	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
"-c"	pointer
)	O
;	O
}	O
icmdcount	int
++	O
;	O
}	O
if	O
(	O
icmdcount	int
==	O
0	int
)	O
{	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
"/bin/sh"	pointer
)	O
;	O
safe_shcmd_add_arg	function
(	O
cmd	int
,	O
"-c"	pointer
)	O
;	O
}	O
free	function
(	O
remote_ssh_command	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
strob_close	function
(	O
tmp2	pointer
)	O
;	O
return	O
cmdcount	int
;	O
}	O
int	O
swssh_assemble_ssh_cmd	function
(	O
SHCMD	struct
*	O
shcmd	pointer
,	O
STRAR	struct
*	O
cmdlist	pointer
,	O
STRAR	struct
*	O
delimlist	pointer
,	O
int	O
nhops	int
)	O
{	O
char	O
*	O
cmd1	pointer
;	O
int	O
i	int
=	O
0	int
;	O
g_did_get_command	int
=	O
0	int
;	O
while	O
(	O
(	O
cmd1	pointer
=	O
strar_get	function
(	O
cmdlist	pointer
,	O
i	int
)	O
)	O
)	O
{	O
safe_shcmd_add_arg	function
(	O
shcmd	pointer
,	O
cmd1	pointer
)	O
;	O
i	int
++	O
;	O
}	O
return	O
0	int
;	O
}	O
