static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: qam_stat.c,v 1.3 2000/06/28 16:47:02 loic Exp $"	pointer
;	O
int	O
CDB___qam_stat	function
(	O
dbp	pointer
,	O
spp	pointer
,	O
db_malloc	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
void	O
*	O
spp	pointer
;	O
void	O
*	O
(	O
*	O
db_malloc	pointer
)	O
__P	O
(	O
(	O
size_t	long
)	O
)	O
;	O
u_int32_t	int
flags	int
;	O
{	O
QUEUE	struct
*	O
t	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_LOCK	struct
lock	struct
;	O
DB_QUEUE_STAT	struct
*	O
sp	pointer
;	O
PAGE	struct
*	O
h	pointer
;	O
QAMDATA	struct
*	O
qp	pointer
,	O
*	O
ep	pointer
;	O
QMETA	struct
*	O
meta	pointer
;	O
db_indx_t	short
indx	short
;	O
db_pgno_t	int
lastpgno	int
,	O
pgno	int
;	O
u_int32_t	int
re_len	int
;	O
int	O
ret	int
,	O
t_ret	int
;	O
PANIC_CHECK	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
;	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"DB->stat"	pointer
)	O
;	O
t	pointer
=	O
dbp	pointer
->	O
q_internal	pointer
;	O
sp	pointer
=	O
NULL	O
;	O
lock	struct
.	O
off	long
=	O
LOCK_INVALID	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_statchk	function
(	O
dbp	pointer
,	O
flags	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
spp	pointer
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
cursor	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
&	O
dbc	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
DEBUG_LWRITE	O
(	O
dbc	pointer
,	O
NULL	O
,	O
"qam_stat"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
flags	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
sizeof	O
(	O
*	O
sp	pointer
)	O
,	O
db_malloc	pointer
,	O
&	O
sp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
memset	function
(	O
sp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
sp	pointer
)	O
)	O
;	O
re_len	int
=	O
(	O
(	O
QUEUE	struct
*	O
)	O
dbp	pointer
->	O
q_internal	pointer
)	O
->	O
re_len	int
;	O
if	O
(	O
flags	int
==	O
DB_CACHED_COUNTS	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
t	pointer
->	O
q_meta	int
,	O
DB_LOCK_READ	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
t	pointer
->	O
q_meta	int
,	O
0	int
,	O
(	O
PAGE	struct
*	O
*	O
)	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
sp	pointer
->	O
qs_nkeys	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
key_count	int
;	O
sp	pointer
->	O
qs_ndata	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
record_count	int
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
lastpgno	int
,	O
DB_MPOOL_LAST	int
,	O
&	O
h	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
h	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
for	O
(	O
pgno	int
=	O
t	pointer
->	O
q_root	int
;	O
pgno	int
<=	O
lastpgno	int
;	O
++	O
pgno	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
pgno	int
,	O
DB_LOCK_READ	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
h	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
++	O
sp	pointer
->	O
qs_pages	int
;	O
ep	pointer
=	O
(	O
QAMDATA	struct
*	O
)	O
(	O
(	O
u_int8_t	char
*	O
)	O
h	pointer
+	O
dbp	pointer
->	O
pgsize	int
-	O
re_len	int
)	O
;	O
for	O
(	O
indx	short
=	O
0	int
,	O
qp	pointer
=	O
QAM_GET_RECORD	O
(	O
dbp	pointer
,	O
h	pointer
,	O
indx	short
)	O
;	O
qp	pointer
<=	O
ep	pointer
;	O
++	O
indx	short
,	O
qp	pointer
=	O
QAM_GET_RECORD	O
(	O
dbp	pointer
,	O
h	pointer
,	O
indx	short
)	O
)	O
{	O
if	O
(	O
F_ISSET	O
(	O
qp	pointer
,	O
QAM_VALID	int
)	O
)	O
sp	pointer
->	O
qs_ndata	int
++	O
;	O
else	O
sp	pointer
->	O
qs_pgfree	int
+=	O
re_len	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
h	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
t	pointer
->	O
q_meta	int
,	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
?	O
DB_LOCK_READ	int
:	O
DB_LOCK_WRITE	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
t	pointer
->	O
q_meta	int
,	O
0	int
,	O
(	O
PAGE	struct
*	O
*	O
)	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
sp	pointer
->	O
qs_magic	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
magic	int
;	O
sp	pointer
->	O
qs_version	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
version	int
;	O
sp	pointer
->	O
qs_metaflags	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
flags	int
;	O
sp	pointer
->	O
qs_pagesize	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
pagesize	long
;	O
sp	pointer
->	O
qs_re_len	int
=	O
meta	pointer
->	O
re_len	int
;	O
sp	pointer
->	O
qs_re_pad	int
=	O
meta	pointer
->	O
re_pad	int
;	O
sp	pointer
->	O
qs_start	int
=	O
meta	pointer
->	O
start	int
;	O
sp	pointer
->	O
qs_first_recno	int
=	O
meta	pointer
->	O
first_recno	int
;	O
sp	pointer
->	O
qs_cur_recno	int
=	O
meta	pointer
->	O
cur_recno	int
;	O
sp	pointer
->	O
qs_nkeys	int
=	O
sp	pointer
->	O
qs_ndata	int
;	O
if	O
(	O
!	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
)	O
meta	pointer
->	O
dbmeta	struct
.	O
key_count	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
record_count	int
=	O
sp	pointer
->	O
qs_ndata	int
;	O
done	O
:	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
meta	pointer
,	O
!	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
*	O
(	O
DB_QUEUE_STAT	struct
*	O
*	O
)	O
spp	pointer
=	O
sp	pointer
;	O
ret	int
=	O
0	int
;	O
if	O
(	O
0	int
)	O
{	O
err	pointer
:	O
if	O
(	O
sp	pointer
!=	O
NULL	O
)	O
CDB___os_free	function
(	O
sp	pointer
,	O
sizeof	O
(	O
*	O
sp	pointer
)	O
)	O
;	O
}	O
if	O
(	O
lock	struct
.	O
off	long
!=	O
LOCK_INVALID	O
)	O
(	O
void	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
if	O
(	O
(	O
t_ret	int
=	O
dbc	pointer
->	O
c_close	pointer
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
