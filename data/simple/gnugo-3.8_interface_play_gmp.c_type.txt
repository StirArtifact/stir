void	O
play_gmp	function
(	O
Gameinfo	struct
*	O
gameinfo	pointer
,	O
int	O
simplified	int
)	O
{	O
SGFTree	struct
sgftree	struct
;	O
Gmp	struct
*	O
ge	pointer
;	O
GmpResult	enum
message	pointer
;	O
const	O
char	O
*	O
error	pointer
;	O
int	O
i	int
,	O
j	int
;	O
int	O
passes	int
=	O
0	int
;	O
int	O
to_move	int
;	O
int	O
mycolor	int
=	O
-	O
1	int
;	O
int	O
yourcolor	int
;	O
if	O
(	O
gameinfo	pointer
->	O
computer_player	int
==	O
WHITE	int
)	O
mycolor	int
=	O
1	int
;	O
else	O
if	O
(	O
gameinfo	pointer
->	O
computer_player	int
==	O
BLACK	int
)	O
mycolor	int
=	O
0	int
;	O
sgftree_clear	function
(	O
&	O
sgftree	struct
)	O
;	O
sgftreeCreateHeaderNode	function
(	O
&	O
sgftree	struct
,	O
board_size	int
,	O
komi	float
,	O
gameinfo	pointer
->	O
handicap	int
)	O
;	O
ge	pointer
=	O
gmp_create	function
(	O
0	int
,	O
1	int
)	O
;	O
TRACE	O
(	O
"board size=%d\n"	pointer
,	O
board_size	int
)	O
;	O
if	O
(	O
komi	float
==	O
0.0	int
)	O
{	O
if	O
(	O
gameinfo	pointer
->	O
handicap	int
==	O
0	int
)	O
komi	float
=	O
5.5	int
;	O
else	O
komi	float
=	O
0.5	int
;	O
}	O
if	O
(	O
!	O
simplified	int
)	O
{	O
if	O
(	O
chinese_rules	int
)	O
gmp_startGame	function
(	O
ge	pointer
,	O
-	O
1	int
,	O
-	O
1	int
,	O
5.5	int
,	O
-	O
1	int
,	O
mycolor	int
,	O
0	int
)	O
;	O
else	O
gmp_startGame	function
(	O
ge	pointer
,	O
-	O
1	int
,	O
-	O
1	int
,	O
5.5	int
,	O
0	int
,	O
mycolor	int
,	O
0	int
)	O
;	O
}	O
else	O
{	O
gmp_startGame	function
(	O
ge	pointer
,	O
board_size	int
,	O
gameinfo	pointer
->	O
handicap	int
,	O
komi	float
,	O
chinese_rules	int
,	O
mycolor	int
,	O
1	int
)	O
;	O
}	O
do	O
{	O
message	pointer
=	O
gmp_check	function
(	O
ge	pointer
,	O
1	int
,	O
NULL	O
,	O
NULL	O
,	O
&	O
error	pointer
)	O
;	O
}	O
while	O
(	O
message	pointer
==	O
gmp_nothing	int
||	O
message	pointer
==	O
gmp_reset	int
)	O
;	O
if	O
(	O
message	pointer
==	O
gmp_err	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"gnugo-gmp: Error \"%s\" occurred.\n"	pointer
,	O
error	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
if	O
(	O
message	pointer
!=	O
gmp_newGame	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"gnugo-gmp: Expecting a newGame, got %s\n"	pointer
,	O
gmp_resultString	function
(	O
message	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
gameinfo	pointer
->	O
handicap	int
=	O
gmp_handicap	function
(	O
ge	pointer
)	O
;	O
if	O
(	O
!	O
check_boardsize	function
(	O
gmp_size	function
(	O
ge	pointer
)	O
,	O
stderr	pointer
)	O
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
gnugo_clear_board	function
(	O
gmp_size	function
(	O
ge	pointer
)	O
)	O
;	O
komi	float
=	O
gmp_komi	function
(	O
ge	pointer
)	O
;	O
sgfOverwritePropertyInt	function
(	O
sgftree	struct
.	O
root	pointer
,	O
"SZ"	pointer
,	O
board_size	int
)	O
;	O
TRACE	O
(	O
"size=%d, handicap=%d, komi=%f\n"	pointer
,	O
board_size	int
,	O
gameinfo	pointer
->	O
handicap	int
,	O
komi	float
)	O
;	O
if	O
(	O
gameinfo	pointer
->	O
handicap	int
)	O
to_move	int
=	O
WHITE	int
;	O
else	O
to_move	int
=	O
BLACK	int
;	O
if	O
(	O
gmp_iAmWhite	function
(	O
ge	pointer
)	O
)	O
{	O
mycolor	int
=	O
WHITE	int
;	O
yourcolor	int
=	O
BLACK	int
;	O
}	O
else	O
{	O
mycolor	int
=	O
BLACK	int
;	O
yourcolor	int
=	O
WHITE	int
;	O
}	O
gameinfo	pointer
->	O
computer_player	int
=	O
mycolor	int
;	O
sgf_write_header	function
(	O
sgftree	struct
.	O
root	pointer
,	O
1	int
,	O
get_random_seed	function
(	O
)	O
,	O
komi	float
,	O
gameinfo	pointer
->	O
handicap	int
,	O
get_level	function
(	O
)	O
,	O
chinese_rules	int
)	O
;	O
gameinfo	pointer
->	O
handicap	int
=	O
gnugo_sethand	function
(	O
gameinfo	pointer
->	O
handicap	int
,	O
sgftree	struct
.	O
root	pointer
)	O
;	O
sgfOverwritePropertyInt	function
(	O
sgftree	struct
.	O
root	pointer
,	O
"HA"	pointer
,	O
gameinfo	pointer
->	O
handicap	int
)	O
;	O
while	O
(	O
passes	int
<	O
2	int
)	O
{	O
if	O
(	O
to_move	int
==	O
yourcolor	int
)	O
{	O
int	O
move	pointer
;	O
message	pointer
=	O
gmp_check	function
(	O
ge	pointer
,	O
1	int
,	O
&	O
j	int
,	O
&	O
i	int
,	O
&	O
error	pointer
)	O
;	O
if	O
(	O
message	pointer
==	O
gmp_err	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"GNU Go: Sorry, error from gmp client\n"	pointer
)	O
;	O
sgftreeAddComment	function
(	O
&	O
sgftree	struct
,	O
"got error from gmp client"	pointer
)	O
;	O
sgffile_output	function
(	O
&	O
sgftree	struct
)	O
;	O
return	O
;	O
}	O
if	O
(	O
message	pointer
==	O
gmp_undo	int
)	O
{	O
int	O
k	int
;	O
assert	O
(	O
j	int
>	O
0	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
j	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
!	O
undo_move	function
(	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"GNU Go: play_gmp UNDO: can't undo %d moves\n"	pointer
,	O
j	int
-	O
k	int
)	O
;	O
break	O
;	O
}	O
sgftreeAddComment	function
(	O
&	O
sgftree	struct
,	O
"undone"	pointer
)	O
;	O
sgftreeBack	function
(	O
&	O
sgftree	struct
)	O
;	O
to_move	int
=	O
OTHER_COLOR	O
(	O
to_move	int
)	O
;	O
}	O
continue	O
;	O
}	O
if	O
(	O
message	pointer
==	O
gmp_pass	int
)	O
{	O
passes	int
++	O
;	O
move	pointer
=	O
PASS_MOVE	int
;	O
}	O
else	O
{	O
passes	int
=	O
0	int
;	O
move	pointer
=	O
POS	O
(	O
i	int
,	O
j	int
)	O
;	O
}	O
TRACE	O
(	O
"\nyour move: %1m\n\n"	pointer
,	O
move	pointer
)	O
;	O
sgftreeAddPlay	function
(	O
&	O
sgftree	struct
,	O
to_move	int
,	O
I	O
(	O
move	pointer
)	O
,	O
J	O
(	O
move	pointer
)	O
)	O
;	O
gnugo_play_move	function
(	O
move	pointer
,	O
yourcolor	int
)	O
;	O
sgffile_output	function
(	O
&	O
sgftree	struct
)	O
;	O
}	O
else	O
{	O
float	O
move_value	pointer
;	O
int	O
move	pointer
;	O
if	O
(	O
autolevel_on	int
)	O
adjust_level_offset	function
(	O
mycolor	int
)	O
;	O
move	pointer
=	O
genmove	function
(	O
mycolor	int
,	O
&	O
move_value	pointer
,	O
NULL	O
)	O
;	O
gnugo_play_move	function
(	O
move	pointer
,	O
mycolor	int
)	O
;	O
sgffile_add_debuginfo	function
(	O
sgftree	struct
.	O
lastnode	pointer
,	O
move_value	pointer
)	O
;	O
if	O
(	O
is_pass	function
(	O
move	pointer
)	O
)	O
{	O
sgftreeAddPlay	function
(	O
&	O
sgftree	struct
,	O
to_move	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
gmp_sendPass	function
(	O
ge	pointer
)	O
;	O
++	O
passes	int
;	O
}	O
else	O
{	O
sgftreeAddPlay	function
(	O
&	O
sgftree	struct
,	O
to_move	int
,	O
I	O
(	O
move	pointer
)	O
,	O
J	O
(	O
move	pointer
)	O
)	O
;	O
gmp_sendMove	function
(	O
ge	pointer
,	O
J	O
(	O
move	pointer
)	O
,	O
I	O
(	O
move	pointer
)	O
)	O
;	O
passes	int
=	O
0	int
;	O
TRACE	O
(	O
"\nmy move: %1m\n\n"	pointer
,	O
move	pointer
)	O
;	O
}	O
sgffile_add_debuginfo	function
(	O
sgftree	struct
.	O
lastnode	pointer
,	O
0.0	int
)	O
;	O
sgffile_output	function
(	O
&	O
sgftree	struct
)	O
;	O
}	O
to_move	int
=	O
OTHER_COLOR	O
(	O
to_move	int
)	O
;	O
}	O
gmp_sendPass	function
(	O
ge	pointer
)	O
;	O
if	O
(	O
!	O
quiet	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Game over - waiting for client to shut us down\n"	pointer
)	O
;	O
who_wins	function
(	O
mycolor	int
,	O
stderr	pointer
)	O
;	O
if	O
(	O
showtime	int
)	O
{	O
gprintf	function
(	O
"\nSLOWEST MOVE: %d at %1m "	pointer
,	O
slowest_movenum	int
,	O
slowest_move	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"(%.2f seconds)\n"	pointer
,	O
slowest_time	double
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nAVERAGE TIME: %.2f seconds per move\n"	pointer
,	O
total_time	double
/	O
movenum	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nTOTAL TIME: %.2f seconds\n"	pointer
,	O
total_time	double
)	O
;	O
}	O
{	O
float	O
score	float
=	O
gnugo_estimate_score	function
(	O
NULL	O
,	O
NULL	O
)	O
;	O
sgfWriteResult	function
(	O
sgftree	struct
.	O
root	pointer
,	O
score	float
,	O
1	int
)	O
;	O
}	O
sgffile_output	function
(	O
&	O
sgftree	struct
)	O
;	O
if	O
(	O
!	O
simplified	int
)	O
{	O
while	O
(	O
1	int
)	O
{	O
message	pointer
=	O
gmp_check	function
(	O
ge	pointer
,	O
1	int
,	O
&	O
j	int
,	O
&	O
i	int
,	O
&	O
error	pointer
)	O
;	O
if	O
(	O
!	O
quiet	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Message %d from gmp\n"	pointer
,	O
message	pointer
)	O
;	O
if	O
(	O
message	pointer
==	O
gmp_err	int
)	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
quiet	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"gnugo going down\n"	pointer
)	O
;	O
}	O
