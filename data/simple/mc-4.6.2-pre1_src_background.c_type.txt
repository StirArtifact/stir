enum	O
ReturnType	enum
{	O
Return_String	int
,	O
Return_Integer	int
}	O
;	O
int	O
we_are_background	int
=	O
0	int
;	O
static	O
int	O
parent_fd	int
;	O
struct	O
TaskList	struct
*	O
task_list	pointer
=	O
NULL	O
;	O
static	O
int	O
background_attention	function
(	O
int	O
fd	int
,	O
void	O
*	O
closure	pointer
)	O
;	O
static	O
void	O
register_task_running	function
(	O
FileOpContext	struct
*	O
ctx	pointer
,	O
pid_t	int
pid	int
,	O
int	O
fd	int
,	O
char	O
*	O
info	pointer
)	O
{	O
TaskList	struct
*	O
new	pointer
;	O
new	pointer
=	O
g_new	O
(	O
TaskList	struct
,	O
1	int
)	O
;	O
new	pointer
->	O
pid	int
=	O
pid	int
;	O
new	pointer
->	O
info	pointer
=	O
info	pointer
;	O
new	pointer
->	O
state	pointer
=	O
Task_Running	int
;	O
new	pointer
->	O
next	pointer
=	O
task_list	pointer
;	O
new	pointer
->	O
fd	int
=	O
fd	int
;	O
task_list	pointer
=	O
new	pointer
;	O
add_select_channel	function
(	O
fd	int
,	O
background_attention	function
,	O
ctx	pointer
)	O
;	O
}	O
void	O
unregister_task_running	function
(	O
pid_t	int
pid	int
,	O
int	O
fd	int
)	O
{	O
TaskList	struct
*	O
p	pointer
=	O
task_list	pointer
;	O
TaskList	struct
*	O
prev	pointer
=	O
0	int
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
pid	int
==	O
pid	int
)	O
{	O
if	O
(	O
prev	pointer
)	O
prev	pointer
->	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
else	O
task_list	pointer
=	O
p	pointer
->	O
next	pointer
;	O
g_free	function
(	O
p	pointer
->	O
info	pointer
)	O
;	O
g_free	function
(	O
p	pointer
)	O
;	O
break	O
;	O
}	O
prev	pointer
=	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
}	O
delete_select_channel	function
(	O
fd	int
)	O
;	O
}	O
int	O
do_background	function
(	O
struct	O
FileOpContext	struct
*	O
ctx	pointer
,	O
char	O
*	O
info	pointer
)	O
{	O
int	O
comm	array
[	O
2	int
]	O
;	O
pid_t	int
pid	int
;	O
if	O
(	O
pipe	function
(	O
comm	array
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
pid	int
=	O
fork	function
(	O
)	O
)	O
==	O
-	O
1	int
)	O
{	O
int	O
saved_errno	int
=	O
errno	O
;	O
(	O
void	O
)	O
close	pointer
(	O
comm	array
[	O
0	int
]	O
)	O
;	O
(	O
void	O
)	O
close	pointer
(	O
comm	array
[	O
1	int
]	O
)	O
;	O
errno	O
=	O
saved_errno	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
int	O
nullfd	int
;	O
close	pointer
(	O
comm	array
[	O
0	int
]	O
)	O
;	O
parent_fd	int
=	O
comm	array
[	O
1	int
]	O
;	O
we_are_background	int
=	O
1	int
;	O
current_dlg	pointer
=	O
NULL	O
;	O
close	pointer
(	O
0	int
)	O
;	O
close	pointer
(	O
1	int
)	O
;	O
close	pointer
(	O
2	int
)	O
;	O
if	O
(	O
(	O
nullfd	int
=	O
open	function
(	O
"/dev/null"	pointer
,	O
O_RDWR	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
while	O
(	O
dup2	function
(	O
nullfd	int
,	O
0	int
)	O
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
;	O
while	O
(	O
dup2	function
(	O
nullfd	int
,	O
1	int
)	O
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
;	O
while	O
(	O
dup2	function
(	O
nullfd	int
,	O
2	int
)	O
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
else	O
{	O
close	pointer
(	O
comm	array
[	O
1	int
]	O
)	O
;	O
ctx	pointer
->	O
pid	int
=	O
pid	int
;	O
register_task_running	function
(	O
ctx	pointer
,	O
pid	int
,	O
comm	array
[	O
0	int
]	O
,	O
info	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
static	O
int	O
background_attention	function
(	O
int	O
fd	int
,	O
void	O
*	O
closure	pointer
)	O
{	O
FileOpContext	struct
*	O
ctx	pointer
;	O
int	O
have_ctx	int
;	O
void	O
*	O
routine	pointer
;	O
int	O
argc	pointer
,	O
i	array
,	O
result	long
,	O
status	int
;	O
char	O
*	O
data	pointer
[	O
MAXCALLARGS	int
]	O
;	O
ssize_t	long
bytes	pointer
;	O
enum	O
ReturnType	enum
type	enum
;	O
ctx	pointer
=	O
closure	pointer
;	O
bytes	pointer
=	O
read	pointer
(	O
fd	int
,	O
&	O
routine	pointer
,	O
sizeof	O
(	O
routine	pointer
)	O
)	O
;	O
if	O
(	O
bytes	pointer
==	O
-	O
1	int
||	O
(	O
size_t	long
)	O
bytes	pointer
<	O
(	O
sizeof	O
(	O
routine	pointer
)	O
)	O
)	O
{	O
const	O
char	O
*	O
background_process_error	pointer
=	O
_	O
(	O
" Background process error "	pointer
)	O
;	O
unregister_task_running	function
(	O
ctx	pointer
->	O
pid	int
,	O
fd	int
)	O
;	O
if	O
(	O
!	O
waitpid	function
(	O
ctx	pointer
->	O
pid	int
,	O
&	O
status	int
,	O
WNOHANG	int
)	O
)	O
{	O
kill	function
(	O
ctx	pointer
->	O
pid	int
,	O
SIGTERM	int
)	O
;	O
message	pointer
(	O
1	int
,	O
background_process_error	pointer
,	O
_	O
(	O
" Unknown error in child "	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
WIFEXITED	O
(	O
status	int
)	O
&&	O
(	O
WEXITSTATUS	O
(	O
status	int
)	O
==	O
0	int
)	O
)	O
return	O
0	int
;	O
message	pointer
(	O
1	int
,	O
background_process_error	pointer
,	O
_	O
(	O
" Child died unexpectedly "	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
read	pointer
(	O
fd	int
,	O
&	O
argc	pointer
,	O
sizeof	O
(	O
argc	pointer
)	O
)	O
;	O
if	O
(	O
argc	pointer
>	O
MAXCALLARGS	int
)	O
{	O
message	pointer
(	O
1	int
,	O
_	O
(	O
" Background protocol error "	pointer
)	O
,	O
_	O
(	O
" Background process sent us a request for more arguments \n"	pointer
" than we can handle. \n"	pointer
)	O
)	O
;	O
}	O
read	pointer
(	O
fd	int
,	O
&	O
type	enum
,	O
sizeof	O
(	O
type	enum
)	O
)	O
;	O
read	pointer
(	O
fd	int
,	O
&	O
have_ctx	int
,	O
sizeof	O
(	O
have_ctx	int
)	O
)	O
;	O
if	O
(	O
have_ctx	int
)	O
read	pointer
(	O
fd	int
,	O
ctx	pointer
,	O
sizeof	O
(	O
FileOpContext	struct
)	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
argc	pointer
;	O
i	array
++	O
)	O
{	O
int	O
size	long
;	O
read	pointer
(	O
fd	int
,	O
&	O
size	long
,	O
sizeof	O
(	O
size	long
)	O
)	O
;	O
data	pointer
[	O
i	array
]	O
=	O
g_malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
read	pointer
(	O
fd	int
,	O
data	pointer
[	O
i	array
]	O
,	O
size	long
)	O
;	O
data	pointer
[	O
i	array
]	O
[	O
size	long
]	O
=	O
0	int
;	O
}	O
if	O
(	O
type	enum
==	O
Return_Integer	int
)	O
{	O
if	O
(	O
!	O
have_ctx	int
)	O
switch	O
(	O
argc	pointer
)	O
{	O
case	O
1	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
,	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
Background	int
,	O
data	pointer
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
Background	int
,	O
data	pointer
[	O
0	int
]	O
,	O
data	pointer
[	O
1	int
]	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
Background	int
,	O
data	pointer
[	O
0	int
]	O
,	O
data	pointer
[	O
1	int
]	O
,	O
data	pointer
[	O
2	int
]	O
)	O
;	O
break	O
;	O
case	O
4	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
Background	int
,	O
data	pointer
[	O
0	int
]	O
,	O
data	pointer
[	O
1	int
]	O
,	O
data	pointer
[	O
2	int
]	O
,	O
data	pointer
[	O
3	int
]	O
)	O
;	O
break	O
;	O
}	O
else	O
switch	O
(	O
argc	pointer
)	O
{	O
case	O
1	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
FileOpContext	struct
*	O
,	O
int	O
,	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
ctx	pointer
,	O
Background	int
,	O
data	pointer
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
FileOpContext	struct
*	O
,	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
ctx	pointer
,	O
Background	int
,	O
data	pointer
[	O
0	int
]	O
,	O
data	pointer
[	O
1	int
]	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
FileOpContext	struct
*	O
,	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
ctx	pointer
,	O
Background	int
,	O
data	pointer
[	O
0	int
]	O
,	O
data	pointer
[	O
1	int
]	O
,	O
data	pointer
[	O
2	int
]	O
)	O
;	O
break	O
;	O
case	O
4	int
:	O
result	long
=	O
(	O
*	O
(	O
int	O
(	O
*	O
)	O
(	O
FileOpContext	struct
*	O
,	O
int	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
ctx	pointer
,	O
Background	int
,	O
data	pointer
[	O
0	int
]	O
,	O
data	pointer
[	O
1	int
]	O
,	O
data	pointer
[	O
2	int
]	O
,	O
data	pointer
[	O
3	int
]	O
)	O
;	O
break	O
;	O
}	O
write	pointer
(	O
fd	int
,	O
&	O
result	long
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
if	O
(	O
have_ctx	int
)	O
write	pointer
(	O
fd	int
,	O
ctx	pointer
,	O
sizeof	O
(	O
FileOpContext	struct
)	O
)	O
;	O
}	O
else	O
if	O
(	O
type	enum
==	O
Return_String	int
)	O
{	O
int	O
len	int
;	O
char	O
*	O
resstr	pointer
=	O
NULL	O
;	O
switch	O
(	O
argc	pointer
)	O
{	O
case	O
1	int
:	O
resstr	pointer
=	O
(	O
*	O
(	O
char	O
*	O
(	O
*	O
)	O
(	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
data	pointer
[	O
0	int
]	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
resstr	pointer
=	O
(	O
*	O
(	O
char	O
*	O
(	O
*	O
)	O
(	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
data	pointer
[	O
0	int
]	O
,	O
data	pointer
[	O
1	int
]	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
resstr	pointer
=	O
(	O
*	O
(	O
char	O
*	O
(	O
*	O
)	O
(	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
data	pointer
[	O
0	int
]	O
,	O
data	pointer
[	O
1	int
]	O
,	O
data	pointer
[	O
2	int
]	O
)	O
;	O
break	O
;	O
case	O
4	int
:	O
resstr	pointer
=	O
(	O
*	O
(	O
char	O
*	O
(	O
*	O
)	O
(	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
,	O
char	O
*	O
)	O
)	O
routine	pointer
)	O
(	O
data	pointer
[	O
0	int
]	O
,	O
data	pointer
[	O
1	int
]	O
,	O
data	pointer
[	O
2	int
]	O
,	O
data	pointer
[	O
3	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
g_assert_not_reached	O
(	O
)	O
;	O
}	O
if	O
(	O
resstr	pointer
)	O
{	O
len	int
=	O
strlen	function
(	O
resstr	pointer
)	O
;	O
write	pointer
(	O
fd	int
,	O
&	O
len	int
,	O
sizeof	O
(	O
len	int
)	O
)	O
;	O
if	O
(	O
len	int
)	O
{	O
write	pointer
(	O
fd	int
,	O
resstr	pointer
,	O
len	int
)	O
;	O
g_free	function
(	O
resstr	pointer
)	O
;	O
}	O
}	O
else	O
{	O
len	int
=	O
0	int
;	O
write	pointer
(	O
fd	int
,	O
&	O
len	int
,	O
sizeof	O
(	O
len	int
)	O
)	O
;	O
}	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
argc	pointer
;	O
i	array
++	O
)	O
g_free	function
(	O
data	pointer
[	O
i	array
]	O
)	O
;	O
do_refresh	function
(	O
)	O
;	O
mc_refresh	function
(	O
)	O
;	O
doupdate	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
parent_call_header	function
(	O
void	O
*	O
routine	pointer
,	O
int	O
argc	pointer
,	O
enum	O
ReturnType	enum
type	enum
,	O
FileOpContext	struct
*	O
ctx	pointer
)	O
{	O
int	O
have_ctx	int
;	O
have_ctx	int
=	O
(	O
ctx	pointer
!=	O
NULL	O
)	O
;	O
write	pointer
(	O
parent_fd	int
,	O
&	O
routine	pointer
,	O
sizeof	O
(	O
routine	pointer
)	O
)	O
;	O
write	pointer
(	O
parent_fd	int
,	O
&	O
argc	pointer
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
write	pointer
(	O
parent_fd	int
,	O
&	O
type	enum
,	O
sizeof	O
(	O
type	enum
)	O
)	O
;	O
write	pointer
(	O
parent_fd	int
,	O
&	O
have_ctx	int
,	O
sizeof	O
(	O
have_ctx	int
)	O
)	O
;	O
if	O
(	O
have_ctx	int
)	O
write	pointer
(	O
parent_fd	int
,	O
ctx	pointer
,	O
sizeof	O
(	O
FileOpContext	struct
)	O
)	O
;	O
}	O
int	O
parent_call	function
(	O
void	O
*	O
routine	pointer
,	O
struct	O
FileOpContext	struct
*	O
ctx	pointer
,	O
int	O
argc	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
int	O
i	array
;	O
va_start	O
(	O
ap	array
,	O
argc	pointer
)	O
;	O
parent_call_header	function
(	O
routine	pointer
,	O
argc	pointer
,	O
Return_Integer	int
,	O
ctx	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
argc	pointer
;	O
i	array
++	O
)	O
{	O
int	O
len	int
;	O
void	O
*	O
value	pointer
;	O
len	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
value	pointer
=	O
va_arg	O
(	O
ap	array
,	O
void	O
*	O
)	O
;	O
write	pointer
(	O
parent_fd	int
,	O
&	O
len	int
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
write	pointer
(	O
parent_fd	int
,	O
value	pointer
,	O
len	int
)	O
;	O
}	O
read	pointer
(	O
parent_fd	int
,	O
&	O
i	array
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
if	O
(	O
ctx	pointer
)	O
read	pointer
(	O
parent_fd	int
,	O
ctx	pointer
,	O
sizeof	O
(	O
FileOpContext	struct
)	O
)	O
;	O
return	O
i	array
;	O
}	O
char	O
*	O
parent_call_string	function
(	O
void	O
*	O
routine	pointer
,	O
int	O
argc	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
char	O
*	O
str	pointer
;	O
int	O
i	array
;	O
va_start	O
(	O
ap	array
,	O
argc	pointer
)	O
;	O
parent_call_header	function
(	O
routine	pointer
,	O
argc	pointer
,	O
Return_String	int
,	O
NULL	O
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
argc	pointer
;	O
i	array
++	O
)	O
{	O
int	O
len	int
;	O
void	O
*	O
value	pointer
;	O
len	int
=	O
va_arg	O
(	O
ap	array
,	O
int	O
)	O
;	O
value	pointer
=	O
va_arg	O
(	O
ap	array
,	O
void	O
*	O
)	O
;	O
write	pointer
(	O
parent_fd	int
,	O
&	O
len	int
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
write	pointer
(	O
parent_fd	int
,	O
value	pointer
,	O
len	int
)	O
;	O
}	O
read	pointer
(	O
parent_fd	int
,	O
&	O
i	array
,	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
if	O
(	O
!	O
i	array
)	O
return	O
NULL	O
;	O
str	pointer
=	O
g_malloc	function
(	O
i	array
+	O
1	int
)	O
;	O
read	pointer
(	O
parent_fd	int
,	O
str	pointer
,	O
i	array
)	O
;	O
str	pointer
[	O
i	array
]	O
=	O
0	int
;	O
return	O
str	pointer
;	O
}	O
