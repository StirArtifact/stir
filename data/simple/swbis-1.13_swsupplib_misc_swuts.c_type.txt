static	O
void	O
swuts_store_value	function
(	O
SWUTS	struct
*	O
uts	pointer
,	O
char	O
*	O
*	O
dest	pointer
,	O
char	O
*	O
source	pointer
)	O
{	O
if	O
(	O
*	O
dest	pointer
)	O
free	function
(	O
*	O
dest	pointer
)	O
;	O
*	O
dest	pointer
=	O
strdup	function
(	O
source	pointer
)	O
;	O
}	O
static	O
int	O
compare_name	function
(	O
char	O
*	O
target	pointer
,	O
char	O
*	O
sw	pointer
,	O
int	O
verbose	int
)	O
{	O
int	O
ret	int
;	O
if	O
(	O
sw	pointer
==	O
NULL	O
||	O
strlen	function
(	O
sw	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
target	pointer
==	O
NULL	O
||	O
strlen	function
(	O
target	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
ret	int
=	O
fnmatch	function
(	O
sw	pointer
,	O
target	pointer
,	O
0	int
)	O
;	O
return	O
ret	int
;	O
}	O
SWUTS	struct
*	O
swuts_create	function
(	O
void	O
)	O
{	O
SWUTS	struct
*	O
uts	pointer
;	O
uts	pointer
=	O
(	O
SWUTS	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
SWUTS	struct
)	O
)	O
;	O
uts	pointer
->	O
machineM	pointer
=	O
NULL	O
;	O
uts	pointer
->	O
sysnameM	pointer
=	O
NULL	O
;	O
uts	pointer
->	O
releaseM	pointer
=	O
NULL	O
;	O
uts	pointer
->	O
versionM	pointer
=	O
NULL	O
;	O
uts	pointer
->	O
arch_tripletM	pointer
=	O
NULL	O
;	O
uts	pointer
->	O
result_machineM	char
=	O
0	int
;	O
uts	pointer
->	O
result_sysnameM	char
=	O
0	int
;	O
uts	pointer
->	O
result_releaseM	char
=	O
0	int
;	O
uts	pointer
->	O
result_versionM	char
=	O
0	int
;	O
uts	pointer
->	O
match_resultM	int
=	O
-	O
1	int
;	O
return	O
uts	pointer
;	O
}	O
void	O
swuts_delete	function
(	O
SWUTS	struct
*	O
uts	pointer
)	O
{	O
if	O
(	O
uts	pointer
->	O
machineM	pointer
)	O
free	function
(	O
uts	pointer
->	O
machineM	pointer
)	O
;	O
if	O
(	O
uts	pointer
->	O
sysnameM	pointer
)	O
free	function
(	O
uts	pointer
->	O
sysnameM	pointer
)	O
;	O
if	O
(	O
uts	pointer
->	O
releaseM	pointer
)	O
free	function
(	O
uts	pointer
->	O
releaseM	pointer
)	O
;	O
if	O
(	O
uts	pointer
->	O
versionM	pointer
)	O
free	function
(	O
uts	pointer
->	O
versionM	pointer
)	O
;	O
if	O
(	O
uts	pointer
->	O
arch_tripletM	pointer
)	O
free	function
(	O
uts	pointer
->	O
arch_tripletM	pointer
)	O
;	O
free	function
(	O
uts	pointer
)	O
;	O
}	O
int	O
swuts_read_from_events	function
(	O
SWUTS	struct
*	O
uts	pointer
,	O
char	O
*	O
events	pointer
)	O
{	O
char	O
*	O
line	pointer
;	O
char	O
*	O
value	int
;	O
char	O
*	O
attribute	pointer
;	O
int	O
ret	int
=	O
0	int
;	O
STROB	struct
*	O
tmp	pointer
;	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
line	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
events	pointer
,	O
"\r\n"	pointer
)	O
;	O
while	O
(	O
line	pointer
)	O
{	O
ret	int
=	O
swevent_parse_attribute_event	function
(	O
line	pointer
,	O
&	O
attribute	pointer
,	O
&	O
value	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
attribute	pointer
,	O
SW_A_os_name	pointer
)	O
==	O
0	int
)	O
{	O
uts	pointer
->	O
sysnameM	pointer
=	O
strdup	function
(	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
attribute	pointer
,	O
SW_A_os_version	pointer
)	O
==	O
0	int
)	O
{	O
uts	pointer
->	O
versionM	pointer
=	O
strdup	function
(	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
attribute	pointer
,	O
SW_A_os_release	pointer
)	O
==	O
0	int
)	O
{	O
uts	pointer
->	O
releaseM	pointer
=	O
strdup	function
(	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
attribute	pointer
,	O
SW_A_machine_type	pointer
)	O
==	O
0	int
)	O
{	O
uts	pointer
->	O
machineM	pointer
=	O
strdup	function
(	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
attribute	pointer
,	O
SW_A_architecture	pointer
)	O
==	O
0	int
)	O
{	O
uts	pointer
->	O
arch_tripletM	pointer
=	O
strdup	function
(	O
value	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"bad message in swi_uts_read_from_events: %s\n"	pointer
,	O
attribute	pointer
)	O
;	O
ret	int
=	O
-	O
1	int
;	O
}	O
}	O
line	pointer
=	O
strob_strtok	function
(	O
tmp	pointer
,	O
NULL	O
,	O
"\r\n"	pointer
)	O
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
swuts_read_from_swdef	function
(	O
SWUTS	struct
*	O
uts	pointer
)	O
{	O
return	O
0	int
;	O
}	O
int	O
swuts_compare	function
(	O
SWUTS	struct
*	O
uts_target	pointer
,	O
SWUTS	struct
*	O
uts_swdef	pointer
,	O
int	O
verbose	int
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
compare_name	function
(	O
uts_target	pointer
->	O
sysnameM	pointer
,	O
uts_swdef	pointer
->	O
sysnameM	pointer
,	O
verbose	int
)	O
;	O
uts_swdef	pointer
->	O
result_sysnameM	char
=	O
ret	int
;	O
ret	int
=	O
compare_name	function
(	O
uts_target	pointer
->	O
machineM	pointer
,	O
uts_swdef	pointer
->	O
machineM	pointer
,	O
verbose	int
)	O
;	O
uts_swdef	pointer
->	O
result_machineM	char
=	O
ret	int
;	O
ret	int
=	O
compare_name	function
(	O
uts_target	pointer
->	O
releaseM	pointer
,	O
uts_swdef	pointer
->	O
releaseM	pointer
,	O
verbose	int
)	O
;	O
uts_swdef	pointer
->	O
result_releaseM	char
=	O
ret	int
;	O
ret	int
=	O
compare_name	function
(	O
uts_target	pointer
->	O
versionM	pointer
,	O
uts_swdef	pointer
->	O
versionM	pointer
,	O
verbose	int
)	O
;	O
uts_swdef	pointer
->	O
result_versionM	char
=	O
ret	int
;	O
if	O
(	O
uts_swdef	pointer
->	O
result_sysnameM	char
==	O
0	int
&&	O
uts_swdef	pointer
->	O
result_machineM	char
==	O
0	int
&&	O
uts_swdef	pointer
->	O
result_releaseM	char
==	O
0	int
&&	O
uts_swdef	pointer
->	O
result_versionM	char
==	O
0	int
&&	O
1	int
)	O
{	O
uts_swdef	pointer
->	O
match_resultM	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
else	O
{	O
uts_swdef	pointer
->	O
match_resultM	int
=	O
1	int
;	O
return	O
1	int
;	O
}	O
}	O
void	O
swuts_add_attribute	function
(	O
SWUTS	struct
*	O
uts	pointer
,	O
char	O
*	O
attribute	pointer
,	O
char	O
*	O
value	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
attribute	pointer
,	O
SW_A_os_name	pointer
)	O
==	O
0	int
)	O
{	O
swuts_store_value	function
(	O
uts	pointer
,	O
&	O
(	O
uts	pointer
->	O
sysnameM	pointer
)	O
,	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
attribute	pointer
,	O
SW_A_os_version	pointer
)	O
==	O
0	int
)	O
{	O
swuts_store_value	function
(	O
uts	pointer
,	O
&	O
(	O
uts	pointer
->	O
versionM	pointer
)	O
,	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
attribute	pointer
,	O
SW_A_os_release	pointer
)	O
==	O
0	int
)	O
{	O
swuts_store_value	function
(	O
uts	pointer
,	O
&	O
(	O
uts	pointer
->	O
releaseM	pointer
)	O
,	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
attribute	pointer
,	O
SW_A_machine_type	pointer
)	O
==	O
0	int
)	O
{	O
swuts_store_value	function
(	O
uts	pointer
,	O
&	O
(	O
uts	pointer
->	O
machineM	pointer
)	O
,	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
attribute	pointer
,	O
SW_A_architecture	pointer
)	O
==	O
0	int
)	O
{	O
swuts_store_value	function
(	O
uts	pointer
,	O
&	O
(	O
uts	pointer
->	O
arch_tripletM	pointer
)	O
,	O
value	int
)	O
;	O
}	O
}	O
int	O
swuts_is_uts_attribute	function
(	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
SW_A_os_name	pointer
)	O
&&	O
strcmp	function
(	O
name	pointer
,	O
SW_A_os_release	pointer
)	O
&&	O
strcmp	function
(	O
name	pointer
,	O
SW_A_os_version	pointer
)	O
&&	O
strcmp	function
(	O
name	pointer
,	O
SW_A_machine_type	pointer
)	O
&&	O
strcmp	function
(	O
name	pointer
,	O
SW_A_architecture	pointer
)	O
)	O
return	O
0	int
;	O
else	O
return	O
1	int
;	O
}	O
