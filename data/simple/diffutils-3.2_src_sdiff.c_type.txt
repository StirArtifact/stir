static	O
char	O
const	O
*	O
editor_program	pointer
=	O
DEFAULT_EDITOR_PROGRAM	pointer
;	O
static	O
char	O
const	O
*	O
*	O
diffargv	pointer
;	O
static	O
char	O
*	O
volatile	O
tmpname	pointer
;	O
static	O
FILE	struct
*	O
tmp	pointer
;	O
static	O
pid_t	int
volatile	O
diffpid	int
;	O
struct	O
line_filter	struct
;	O
static	O
void	O
catchsig	function
(	O
int	O
)	O
;	O
static	O
bool	bool
edit	function
(	O
struct	O
line_filter	struct
*	O
,	O
char	O
const	O
*	O
,	O
lin	long
,	O
lin	long
,	O
struct	O
line_filter	struct
*	O
,	O
char	O
const	O
*	O
,	O
lin	long
,	O
lin	long
,	O
FILE	struct
*	O
)	O
;	O
static	O
bool	bool
interact	function
(	O
struct	O
line_filter	struct
*	O
,	O
struct	O
line_filter	struct
*	O
,	O
char	O
const	O
*	O
,	O
struct	O
line_filter	struct
*	O
,	O
char	O
const	O
*	O
,	O
FILE	struct
*	O
)	O
;	O
static	O
void	O
checksigs	function
(	O
void	O
)	O
;	O
static	O
void	O
diffarg	function
(	O
char	O
const	O
*	O
)	O
;	O
static	O
void	O
fatal	function
(	O
char	O
const	O
*	O
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
perror_fatal	function
(	O
char	O
const	O
*	O
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
trapsigs	function
(	O
void	O
)	O
;	O
static	O
void	O
untrapsig	function
(	O
int	O
)	O
;	O
static	O
int	O
const	O
sigs	array
[	O
]	O
=	O
{	O
SIGHUP	int
,	O
SIGQUIT	int
,	O
SIGTERM	int
,	O
SIGXCPU	int
,	O
SIGXFSZ	int
,	O
SIGPIPE	int
,	O
SIGINT	int
}	O
;	O
static	O
struct	O
sigaction	struct
initial_action	array
[	O
NUM_SIGS	O
]	O
;	O
static	O
void	O
signal_handler	function
(	O
int	O
,	O
void	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
;	O
static	O
bool	bool
diraccess	function
(	O
char	O
const	O
*	O
)	O
;	O
static	O
int	O
temporary_file	function
(	O
void	O
)	O
;	O
static	O
char	O
const	O
*	O
output	pointer
;	O
static	O
bool	bool
suppress_common_lines	bool
;	O
enum	O
{	O
DIFF_PROGRAM_OPTION	int
=	O
CHAR_MAX	O
+	O
1	int
,	O
HELP_OPTION	int
,	O
STRIP_TRAILING_CR_OPTION	int
,	O
TABSIZE_OPTION	int
}	O
;	O
static	O
struct	O
option	struct
const	O
longopts	array
[	O
]	O
=	O
{	O
{	O
"diff-program"	pointer
,	O
1	int
,	O
0	int
,	O
DIFF_PROGRAM_OPTION	int
}	O
,	O
{	O
"expand-tabs"	pointer
,	O
0	int
,	O
0	int
,	O
't'	O
}	O
,	O
{	O
"help"	pointer
,	O
0	int
,	O
0	int
,	O
HELP_OPTION	int
}	O
,	O
{	O
"ignore-all-space"	pointer
,	O
0	int
,	O
0	int
,	O
'W'	O
}	O
,	O
{	O
"ignore-blank-lines"	pointer
,	O
0	int
,	O
0	int
,	O
'B'	O
}	O
,	O
{	O
"ignore-case"	pointer
,	O
0	int
,	O
0	int
,	O
'i'	O
}	O
,	O
{	O
"ignore-matching-lines"	pointer
,	O
1	int
,	O
0	int
,	O
'I'	O
}	O
,	O
{	O
"ignore-space-change"	pointer
,	O
0	int
,	O
0	int
,	O
'b'	O
}	O
,	O
{	O
"ignore-tab-expansion"	pointer
,	O
0	int
,	O
0	int
,	O
'E'	O
}	O
,	O
{	O
"ignore-trailing-space"	pointer
,	O
0	int
,	O
0	int
,	O
'Z'	O
}	O
,	O
{	O
"left-column"	pointer
,	O
0	int
,	O
0	int
,	O
'l'	O
}	O
,	O
{	O
"minimal"	pointer
,	O
0	int
,	O
0	int
,	O
'd'	O
}	O
,	O
{	O
"output"	pointer
,	O
1	int
,	O
0	int
,	O
'o'	O
}	O
,	O
{	O
"speed-large-files"	pointer
,	O
0	int
,	O
0	int
,	O
'H'	O
}	O
,	O
{	O
"strip-trailing-cr"	pointer
,	O
0	int
,	O
0	int
,	O
STRIP_TRAILING_CR_OPTION	int
}	O
,	O
{	O
"suppress-common-lines"	pointer
,	O
0	int
,	O
0	int
,	O
's'	O
}	O
,	O
{	O
"tabsize"	pointer
,	O
1	int
,	O
0	int
,	O
TABSIZE_OPTION	int
}	O
,	O
{	O
"text"	pointer
,	O
0	int
,	O
0	int
,	O
'a'	O
}	O
,	O
{	O
"version"	pointer
,	O
0	int
,	O
0	int
,	O
'v'	O
}	O
,	O
{	O
"width"	pointer
,	O
1	int
,	O
0	int
,	O
'w'	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
void	O
try_help	function
(	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
try_help	function
(	O
char	O
const	O
*	O
reason_msgid	pointer
,	O
char	O
const	O
*	O
operand	pointer
)	O
{	O
if	O
(	O
reason_msgid	pointer
)	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
reason_msgid	pointer
)	O
,	O
operand	pointer
)	O
;	O
error	function
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
_	O
(	O
"Try `%s --help' for more information."	pointer
)	O
,	O
program_name	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
static	O
void	O
check_stdout	function
(	O
void	O
)	O
{	O
if	O
(	O
ferror	function
(	O
stdout	pointer
)	O
)	O
fatal	function
(	O
"write failed"	pointer
)	O
;	O
else	O
if	O
(	O
fclose	function
(	O
stdout	pointer
)	O
!=	O
0	int
)	O
perror_fatal	function
(	O
_	O
(	O
"standard output"	pointer
)	O
)	O
;	O
}	O
static	O
char	O
const	O
*	O
const	O
option_help_msgid	array
[	O
]	O
=	O
{	O
N_	O
(	O
"-o, --output=FILE            operate interactively, sending output to FILE"	pointer
)	O
,	O
""	pointer
,	O
N_	O
(	O
"-i, --ignore-case            consider upper- and lower-case to be the same"	pointer
)	O
,	O
N_	O
(	O
"-E, --ignore-tab-expansion   ignore changes due to tab expansion"	pointer
)	O
,	O
N_	O
(	O
"-Z, --ignore-trailing-space  ignore white space at line end"	pointer
)	O
,	O
N_	O
(	O
"-b, --ignore-space-change    ignore changes in the amount of white space"	pointer
)	O
,	O
N_	O
(	O
"-W, --ignore-all-space       ignore all white space"	pointer
)	O
,	O
N_	O
(	O
"-B, --ignore-blank-lines     ignore changes whose lines are all blank"	pointer
)	O
,	O
N_	O
(	O
"-I, --ignore-matching-lines=RE  ignore changes whose lines all match RE"	pointer
)	O
,	O
N_	O
(	O
"    --strip-trailing-cr      strip trailing carriage return on input"	pointer
)	O
,	O
N_	O
(	O
"-a, --text                   treat all files as text"	pointer
)	O
,	O
""	pointer
,	O
N_	O
(	O
"-w, --width=NUM              output at most NUM (default 130) print columns"	pointer
)	O
,	O
N_	O
(	O
"-l, --left-column            output only the left column of common lines"	pointer
)	O
,	O
N_	O
(	O
"-s, --suppress-common-lines  do not output common lines"	pointer
)	O
,	O
""	pointer
,	O
N_	O
(	O
"-t, --expand-tabs            expand tabs to spaces in output"	pointer
)	O
,	O
N_	O
(	O
"    --tabsize=NUM            tab stops at every NUM (default 8) print columns"	pointer
)	O
,	O
""	pointer
,	O
N_	O
(	O
"-d, --minimal                try hard to find a smaller set of changes"	pointer
)	O
,	O
N_	O
(	O
"-H, --speed-large-files      assume large files, many scattered small changes"	pointer
)	O
,	O
N_	O
(	O
"    --diff-program=PROGRAM   use PROGRAM to compare files"	pointer
)	O
,	O
""	pointer
,	O
N_	O
(	O
"    --help                   display this help and exit"	pointer
)	O
,	O
N_	O
(	O
"-v, --version                output version information and exit"	pointer
)	O
,	O
0	int
}	O
;	O
static	O
void	O
usage	function
(	O
void	O
)	O
{	O
char	O
const	O
*	O
const	O
*	O
p	pointer
;	O
printf	function
(	O
_	O
(	O
"Usage: %s [OPTION]... FILE1 FILE2\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
"%s\n\n"	pointer
,	O
_	O
(	O
"Side-by-side merge of differences between FILE1 and FILE2."	pointer
)	O
)	O
;	O
fputs	function
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
option_help_msgid	array
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
*	O
p	pointer
)	O
printf	function
(	O
"  %s\n"	pointer
,	O
_	O
(	O
*	O
p	pointer
)	O
)	O
;	O
else	O
putchar	function
(	O
'\n'	O
)	O
;	O
printf	function
(	O
"\n%s\n%s\n"	pointer
,	O
_	O
(	O
"If a FILE is `-', read standard input."	pointer
)	O
,	O
_	O
(	O
"Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."	pointer
)	O
)	O
;	O
emit_bug_reporting_address	function
(	O
)	O
;	O
}	O
static	O
void	O
cleanup	function
(	O
int	O
signo	int
__attribute__	O
(	O
(	O
unused	O
)	O
)	O
)	O
{	O
if	O
(	O
0	int
<	O
diffpid	int
)	O
kill	function
(	O
diffpid	int
,	O
SIGPIPE	int
)	O
;	O
if	O
(	O
tmpname	pointer
)	O
unlink	function
(	O
tmpname	pointer
)	O
;	O
}	O
static	O
void	O
exiterr	function
(	O
void	O
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
exiterr	function
(	O
void	O
)	O
{	O
cleanup	function
(	O
0	int
)	O
;	O
untrapsig	function
(	O
0	int
)	O
;	O
checksigs	function
(	O
)	O
;	O
exit	function
(	O
EXIT_TROUBLE	int
)	O
;	O
}	O
static	O
void	O
fatal	function
(	O
char	O
const	O
*	O
msgid	pointer
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
"%s"	pointer
,	O
_	O
(	O
msgid	pointer
)	O
)	O
;	O
exiterr	function
(	O
)	O
;	O
}	O
static	O
void	O
perror_fatal	function
(	O
char	O
const	O
*	O
msg	pointer
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
checksigs	function
(	O
)	O
;	O
error	function
(	O
0	int
,	O
e	int
,	O
"%s"	pointer
,	O
msg	pointer
)	O
;	O
exiterr	function
(	O
)	O
;	O
}	O
static	O
void	O
check_child_status	function
(	O
int	O
werrno	int
,	O
int	O
wstatus	int
,	O
int	O
max_ok_status	int
,	O
char	O
const	O
*	O
subsidiary_program	pointer
)	O
{	O
int	O
status	int
=	O
(	O
!	O
werrno	int
&&	O
WIFEXITED	O
(	O
wstatus	int
)	O
?	O
WEXITSTATUS	O
(	O
wstatus	int
)	O
:	O
INT_MAX	O
)	O
;	O
if	O
(	O
max_ok_status	int
<	O
status	int
)	O
{	O
error	function
(	O
0	int
,	O
werrno	int
,	O
_	O
(	O
status	int
==	O
126	int
?	O
"subsidiary program `%s' could not be invoked"	pointer
:	O
status	int
==	O
127	int
?	O
"subsidiary program `%s' not found"	pointer
:	O
status	int
==	O
INT_MAX	O
?	O
"subsidiary program `%s' failed"	pointer
:	O
"subsidiary program `%s' failed (exit status %d)"	pointer
)	O
,	O
subsidiary_program	pointer
,	O
status	int
)	O
;	O
exiterr	function
(	O
)	O
;	O
}	O
}	O
static	O
FILE	struct
*	O
ck_fopen	function
(	O
char	O
const	O
*	O
fname	pointer
,	O
char	O
const	O
*	O
type	enum
)	O
{	O
FILE	struct
*	O
r	pointer
=	O
fopen	function
(	O
fname	pointer
,	O
type	enum
)	O
;	O
if	O
(	O
!	O
r	pointer
)	O
perror_fatal	function
(	O
fname	pointer
)	O
;	O
return	O
r	pointer
;	O
}	O
static	O
void	O
ck_fclose	function
(	O
FILE	struct
*	O
f	pointer
)	O
{	O
if	O
(	O
fclose	function
(	O
f	pointer
)	O
)	O
perror_fatal	function
(	O
"fclose"	pointer
)	O
;	O
}	O
static	O
size_t	long
ck_fread	function
(	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
FILE	struct
*	O
f	pointer
)	O
{	O
size_t	long
r	pointer
=	O
fread	function
(	O
buf	pointer
,	O
sizeof	O
(	O
char	O
)	O
,	O
size	long
,	O
f	pointer
)	O
;	O
if	O
(	O
r	pointer
==	O
0	int
&&	O
ferror	function
(	O
f	pointer
)	O
)	O
perror_fatal	function
(	O
_	O
(	O
"read failed"	pointer
)	O
)	O
;	O
return	O
r	pointer
;	O
}	O
static	O
void	O
ck_fwrite	function
(	O
char	O
const	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
FILE	struct
*	O
f	pointer
)	O
{	O
if	O
(	O
fwrite	function
(	O
buf	pointer
,	O
sizeof	O
(	O
char	O
)	O
,	O
size	long
,	O
f	pointer
)	O
!=	O
size	long
)	O
perror_fatal	function
(	O
_	O
(	O
"write failed"	pointer
)	O
)	O
;	O
}	O
static	O
void	O
ck_fflush	function
(	O
FILE	struct
*	O
f	pointer
)	O
{	O
if	O
(	O
fflush	function
(	O
f	pointer
)	O
!=	O
0	int
)	O
perror_fatal	function
(	O
_	O
(	O
"write failed"	pointer
)	O
)	O
;	O
}	O
static	O
char	O
const	O
*	O
expand_name	function
(	O
char	O
*	O
name	pointer
,	O
bool	bool
is_dir	bool
,	O
char	O
const	O
*	O
other_name	pointer
)	O
{	O
if	O
(	O
STREQ	O
(	O
name	pointer
,	O
"-"	pointer
)	O
)	O
fatal	function
(	O
"cannot interactively merge standard input"	pointer
)	O
;	O
if	O
(	O
!	O
is_dir	bool
)	O
return	O
name	pointer
;	O
else	O
{	O
char	O
const	O
*	O
base	int
=	O
last_component	function
(	O
other_name	pointer
)	O
;	O
size_t	long
namelen	long
=	O
strlen	function
(	O
name	pointer
)	O
,	O
baselen	long
=	O
base_len	function
(	O
base	int
)	O
;	O
bool	bool
insert_slash	bool
=	O
*	O
last_component	function
(	O
name	pointer
)	O
&&	O
name	pointer
[	O
namelen	long
-	O
1	int
]	O
!=	O
'/'	O
;	O
char	O
*	O
r	pointer
=	O
xmalloc	function
(	O
namelen	long
+	O
insert_slash	bool
+	O
baselen	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
r	pointer
,	O
name	pointer
,	O
namelen	long
)	O
;	O
r	pointer
[	O
namelen	long
]	O
=	O
'/'	O
;	O
memcpy	function
(	O
r	pointer
+	O
namelen	long
+	O
insert_slash	bool
,	O
base	int
,	O
baselen	long
)	O
;	O
r	pointer
[	O
namelen	long
+	O
insert_slash	bool
+	O
baselen	long
]	O
=	O
'\0'	O
;	O
return	O
r	pointer
;	O
}	O
}	O
struct	O
line_filter	struct
{	O
FILE	struct
*	O
infile	pointer
;	O
char	O
*	O
bufpos	pointer
;	O
char	O
*	O
buffer	pointer
;	O
char	O
*	O
buflim	pointer
;	O
}	O
;	O
static	O
void	O
lf_init	function
(	O
struct	O
line_filter	struct
*	O
lf	pointer
,	O
FILE	struct
*	O
infile	pointer
)	O
{	O
lf	pointer
->	O
infile	pointer
=	O
infile	pointer
;	O
lf	pointer
->	O
bufpos	pointer
=	O
lf	pointer
->	O
buffer	pointer
=	O
lf	pointer
->	O
buflim	pointer
=	O
xmalloc	function
(	O
SDIFF_BUFSIZE	O
+	O
1	int
)	O
;	O
lf	pointer
->	O
buflim	pointer
[	O
0	int
]	O
=	O
'\n'	O
;	O
}	O
static	O
size_t	long
lf_refill	function
(	O
struct	O
line_filter	struct
*	O
lf	pointer
)	O
{	O
size_t	long
s	long
=	O
ck_fread	function
(	O
lf	pointer
->	O
buffer	pointer
,	O
SDIFF_BUFSIZE	O
,	O
lf	pointer
->	O
infile	pointer
)	O
;	O
lf	pointer
->	O
bufpos	pointer
=	O
lf	pointer
->	O
buffer	pointer
;	O
lf	pointer
->	O
buflim	pointer
=	O
lf	pointer
->	O
buffer	pointer
+	O
s	long
;	O
lf	pointer
->	O
buflim	pointer
[	O
0	int
]	O
=	O
'\n'	O
;	O
checksigs	function
(	O
)	O
;	O
return	O
s	long
;	O
}	O
static	O
void	O
lf_copy	function
(	O
struct	O
line_filter	struct
*	O
lf	pointer
,	O
lin	long
lines	long
,	O
FILE	struct
*	O
outfile	pointer
)	O
{	O
char	O
*	O
start	pointer
=	O
lf	pointer
->	O
bufpos	pointer
;	O
while	O
(	O
lines	long
)	O
{	O
lf	pointer
->	O
bufpos	pointer
=	O
(	O
char	O
*	O
)	O
memchr	function
(	O
lf	pointer
->	O
bufpos	pointer
,	O
'\n'	O
,	O
lf	pointer
->	O
buflim	pointer
-	O
lf	pointer
->	O
bufpos	pointer
)	O
;	O
if	O
(	O
!	O
lf	pointer
->	O
bufpos	pointer
)	O
{	O
ck_fwrite	function
(	O
start	pointer
,	O
lf	pointer
->	O
buflim	pointer
-	O
start	pointer
,	O
outfile	pointer
)	O
;	O
if	O
(	O
!	O
lf_refill	function
(	O
lf	pointer
)	O
)	O
return	O
;	O
start	pointer
=	O
lf	pointer
->	O
bufpos	pointer
;	O
}	O
else	O
{	O
--	O
lines	long
;	O
++	O
lf	pointer
->	O
bufpos	pointer
;	O
}	O
}	O
ck_fwrite	function
(	O
start	pointer
,	O
lf	pointer
->	O
bufpos	pointer
-	O
start	pointer
,	O
outfile	pointer
)	O
;	O
}	O
static	O
void	O
lf_skip	function
(	O
struct	O
line_filter	struct
*	O
lf	pointer
,	O
lin	long
lines	long
)	O
{	O
while	O
(	O
lines	long
)	O
{	O
lf	pointer
->	O
bufpos	pointer
=	O
(	O
char	O
*	O
)	O
memchr	function
(	O
lf	pointer
->	O
bufpos	pointer
,	O
'\n'	O
,	O
lf	pointer
->	O
buflim	pointer
-	O
lf	pointer
->	O
bufpos	pointer
)	O
;	O
if	O
(	O
!	O
lf	pointer
->	O
bufpos	pointer
)	O
{	O
if	O
(	O
!	O
lf_refill	function
(	O
lf	pointer
)	O
)	O
break	O
;	O
}	O
else	O
{	O
--	O
lines	long
;	O
++	O
lf	pointer
->	O
bufpos	pointer
;	O
}	O
}	O
}	O
static	O
int	O
lf_snarf	function
(	O
struct	O
line_filter	struct
*	O
lf	pointer
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
bufsize	long
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
*	O
start	pointer
=	O
lf	pointer
->	O
bufpos	pointer
;	O
char	O
*	O
next	pointer
=	O
(	O
char	O
*	O
)	O
memchr	function
(	O
start	pointer
,	O
'\n'	O
,	O
lf	pointer
->	O
buflim	pointer
+	O
1	int
-	O
start	pointer
)	O
;	O
size_t	long
s	long
=	O
next	pointer
-	O
start	pointer
;	O
if	O
(	O
bufsize	long
<=	O
s	long
)	O
return	O
0	int
;	O
memcpy	function
(	O
buffer	pointer
,	O
start	pointer
,	O
s	long
)	O
;	O
if	O
(	O
next	pointer
<	O
lf	pointer
->	O
buflim	pointer
)	O
{	O
buffer	pointer
[	O
s	long
]	O
=	O
0	int
;	O
lf	pointer
->	O
bufpos	pointer
=	O
next	pointer
+	O
1	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
lf_refill	function
(	O
lf	pointer
)	O
)	O
return	O
s	long
?	O
0	int
:	O
EOF	O
;	O
buffer	pointer
+=	O
s	long
;	O
bufsize	long
-=	O
s	long
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
opt	int
;	O
char	O
const	O
*	O
prog	pointer
;	O
exit_failure	int
=	O
EXIT_TROUBLE	int
;	O
initialize_main	O
(	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	pointer
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
c_stack_action	function
(	O
cleanup	function
)	O
;	O
prog	pointer
=	O
getenv	function
(	O
"EDITOR"	pointer
)	O
;	O
if	O
(	O
prog	pointer
)	O
editor_program	pointer
=	O
prog	pointer
;	O
diffarg	function
(	O
DEFAULT_DIFF_PROGRAM	pointer
)	O
;	O
while	O
(	O
(	O
opt	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"abBdEHiI:lo:stvw:WZ"	pointer
,	O
longopts	array
,	O
0	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'a'	O
:	O
diffarg	function
(	O
"-a"	pointer
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
diffarg	function
(	O
"-b"	pointer
)	O
;	O
break	O
;	O
case	O
'B'	O
:	O
diffarg	function
(	O
"-B"	pointer
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
diffarg	function
(	O
"-d"	pointer
)	O
;	O
break	O
;	O
case	O
'E'	O
:	O
diffarg	function
(	O
"-E"	pointer
)	O
;	O
break	O
;	O
case	O
'H'	O
:	O
diffarg	function
(	O
"-H"	pointer
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
diffarg	function
(	O
"-i"	pointer
)	O
;	O
break	O
;	O
case	O
'I'	O
:	O
diffarg	function
(	O
"-I"	pointer
)	O
;	O
diffarg	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
diffarg	function
(	O
"--left-column"	pointer
)	O
;	O
break	O
;	O
case	O
'o'	O
:	O
output	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
's'	O
:	O
suppress_common_lines	bool
=	O
true	int
;	O
break	O
;	O
case	O
't'	O
:	O
diffarg	function
(	O
"-t"	pointer
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
version_etc	function
(	O
stdout	pointer
,	O
PROGRAM_NAME	pointer
,	O
PACKAGE_NAME	pointer
,	O
Version	pointer
,	O
AUTHORS	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
check_stdout	function
(	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
case	O
'w'	O
:	O
diffarg	function
(	O
"-W"	pointer
)	O
;	O
diffarg	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'W'	O
:	O
diffarg	function
(	O
"-w"	pointer
)	O
;	O
break	O
;	O
case	O
'Z'	O
:	O
diffarg	function
(	O
"-Z"	pointer
)	O
;	O
break	O
;	O
case	O
DIFF_PROGRAM_OPTION	int
:	O
diffargv	pointer
[	O
0	int
]	O
=	O
optarg	pointer
;	O
break	O
;	O
case	O
HELP_OPTION	int
:	O
usage	function
(	O
)	O
;	O
check_stdout	function
(	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
case	O
STRIP_TRAILING_CR_OPTION	int
:	O
diffarg	function
(	O
"--strip-trailing-cr"	pointer
)	O
;	O
break	O
;	O
case	O
TABSIZE_OPTION	int
:	O
diffarg	function
(	O
"--tabsize"	pointer
)	O
;	O
diffarg	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
default	O
:	O
try_help	function
(	O
0	int
,	O
0	int
)	O
;	O
}	O
}	O
if	O
(	O
argc	int
-	O
optind	int
!=	O
2	int
)	O
{	O
if	O
(	O
argc	int
-	O
optind	int
<	O
2	int
)	O
try_help	function
(	O
"missing operand after `%s'"	pointer
,	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
)	O
;	O
else	O
try_help	function
(	O
"extra operand `%s'"	pointer
,	O
argv	pointer
[	O
optind	int
+	O
2	int
]	O
)	O
;	O
}	O
if	O
(	O
!	O
output	pointer
)	O
{	O
if	O
(	O
suppress_common_lines	bool
)	O
diffarg	function
(	O
"--suppress-common-lines"	pointer
)	O
;	O
diffarg	function
(	O
"-y"	pointer
)	O
;	O
diffarg	function
(	O
"--"	pointer
)	O
;	O
diffarg	function
(	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
diffarg	function
(	O
argv	pointer
[	O
optind	int
+	O
1	int
]	O
)	O
;	O
diffarg	function
(	O
0	int
)	O
;	O
execvp	function
(	O
diffargv	pointer
[	O
0	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
diffargv	pointer
)	O
;	O
perror_fatal	function
(	O
diffargv	pointer
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
char	O
const	O
*	O
lname	pointer
,	O
*	O
rname	pointer
;	O
FILE	struct
*	O
left	pointer
,	O
*	O
right	pointer
,	O
*	O
out	pointer
,	O
*	O
diffout	pointer
;	O
bool	bool
interact_ok	bool
;	O
struct	O
line_filter	struct
lfilt	struct
;	O
struct	O
line_filter	struct
rfilt	struct
;	O
struct	O
line_filter	struct
diff_filt	struct
;	O
bool	bool
leftdir	bool
=	O
diraccess	function
(	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
bool	bool
rightdir	bool
=	O
diraccess	function
(	O
argv	pointer
[	O
optind	int
+	O
1	int
]	O
)	O
;	O
if	O
(	O
leftdir	bool
&	O
rightdir	bool
)	O
fatal	function
(	O
"both files to be compared are directories"	pointer
)	O
;	O
lname	pointer
=	O
expand_name	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
leftdir	bool
,	O
argv	pointer
[	O
optind	int
+	O
1	int
]	O
)	O
;	O
left	pointer
=	O
ck_fopen	function
(	O
lname	pointer
,	O
"r"	pointer
)	O
;	O
rname	pointer
=	O
expand_name	function
(	O
argv	pointer
[	O
optind	int
+	O
1	int
]	O
,	O
rightdir	bool
,	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
right	pointer
=	O
ck_fopen	function
(	O
rname	pointer
,	O
"r"	pointer
)	O
;	O
out	pointer
=	O
ck_fopen	function
(	O
output	pointer
,	O
"w"	pointer
)	O
;	O
diffarg	function
(	O
"--sdiff-merge-assist"	pointer
)	O
;	O
diffarg	function
(	O
"--"	pointer
)	O
;	O
diffarg	function
(	O
argv	pointer
[	O
optind	int
]	O
)	O
;	O
diffarg	function
(	O
argv	pointer
[	O
optind	int
+	O
1	int
]	O
)	O
;	O
diffarg	function
(	O
0	int
)	O
;	O
trapsigs	function
(	O
)	O
;	O
{	O
int	O
diff_fds	array
[	O
2	int
]	O
;	O
if	O
(	O
pipe	function
(	O
diff_fds	array
)	O
!=	O
0	int
)	O
perror_fatal	function
(	O
"pipe"	pointer
)	O
;	O
diffpid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
diffpid	int
<	O
0	int
)	O
perror_fatal	function
(	O
"fork"	pointer
)	O
;	O
if	O
(	O
!	O
diffpid	int
)	O
{	O
if	O
(	O
initial_handler	O
(	O
handler_index_of_SIGINT	O
)	O
!=	O
SIG_IGN	O
)	O
signal_handler	function
(	O
SIGINT	int
,	O
SIG_IGN	O
)	O
;	O
signal_handler	function
(	O
SIGPIPE	int
,	O
SIG_DFL	O
)	O
;	O
close	function
(	O
diff_fds	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
diff_fds	array
[	O
1	int
]	O
!=	O
STDOUT_FILENO	int
)	O
{	O
dup2	function
(	O
diff_fds	array
[	O
1	int
]	O
,	O
STDOUT_FILENO	int
)	O
;	O
close	function
(	O
diff_fds	array
[	O
1	int
]	O
)	O
;	O
}	O
execvp	function
(	O
diffargv	pointer
[	O
0	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
diffargv	pointer
)	O
;	O
_exit	function
(	O
errno	O
==	O
ENOENT	int
?	O
127	int
:	O
126	int
)	O
;	O
}	O
close	function
(	O
diff_fds	array
[	O
1	int
]	O
)	O
;	O
diffout	pointer
=	O
fdopen	function
(	O
diff_fds	array
[	O
0	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
diffout	pointer
)	O
perror_fatal	function
(	O
"fdopen"	pointer
)	O
;	O
}	O
lf_init	function
(	O
&	O
diff_filt	struct
,	O
diffout	pointer
)	O
;	O
lf_init	function
(	O
&	O
lfilt	struct
,	O
left	pointer
)	O
;	O
lf_init	function
(	O
&	O
rfilt	struct
,	O
right	pointer
)	O
;	O
interact_ok	bool
=	O
interact	function
(	O
&	O
diff_filt	struct
,	O
&	O
lfilt	struct
,	O
lname	pointer
,	O
&	O
rfilt	struct
,	O
rname	pointer
,	O
out	pointer
)	O
;	O
ck_fclose	function
(	O
left	pointer
)	O
;	O
ck_fclose	function
(	O
right	pointer
)	O
;	O
ck_fclose	function
(	O
out	pointer
)	O
;	O
{	O
int	O
wstatus	int
;	O
int	O
werrno	int
=	O
0	int
;	O
ck_fclose	function
(	O
diffout	pointer
)	O
;	O
while	O
(	O
waitpid	function
(	O
diffpid	int
,	O
&	O
wstatus	int
,	O
0	int
)	O
<	O
0	int
)	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
checksigs	function
(	O
)	O
;	O
else	O
perror_fatal	function
(	O
"waitpid"	pointer
)	O
;	O
diffpid	int
=	O
0	int
;	O
if	O
(	O
tmpname	pointer
)	O
{	O
unlink	function
(	O
tmpname	pointer
)	O
;	O
tmpname	pointer
=	O
0	int
;	O
}	O
if	O
(	O
!	O
interact_ok	bool
)	O
exiterr	function
(	O
)	O
;	O
check_child_status	function
(	O
werrno	int
,	O
wstatus	int
,	O
EXIT_FAILURE	int
,	O
diffargv	pointer
[	O
0	int
]	O
)	O
;	O
untrapsig	function
(	O
0	int
)	O
;	O
checksigs	function
(	O
)	O
;	O
exit	function
(	O
WEXITSTATUS	O
(	O
wstatus	int
)	O
)	O
;	O
}	O
}	O
return	O
EXIT_SUCCESS	int
;	O
}	O
static	O
void	O
diffarg	function
(	O
char	O
const	O
*	O
a	pointer
)	O
{	O
static	O
size_t	long
diffargs	long
,	O
diffarglim	long
;	O
if	O
(	O
diffargs	long
==	O
diffarglim	long
)	O
{	O
if	O
(	O
!	O
diffarglim	long
)	O
diffarglim	long
=	O
16	int
;	O
else	O
if	O
(	O
PTRDIFF_MAX	O
/	O
(	O
2	int
*	O
sizeof	O
*	O
diffargv	pointer
)	O
<=	O
diffarglim	long
)	O
xalloc_die	function
(	O
)	O
;	O
else	O
diffarglim	long
*=	O
2	int
;	O
diffargv	pointer
=	O
xrealloc	function
(	O
diffargv	pointer
,	O
diffarglim	long
*	O
sizeof	O
*	O
diffargv	pointer
)	O
;	O
}	O
diffargv	pointer
[	O
diffargs	long
++	O
]	O
=	O
a	pointer
;	O
}	O
static	O
bool	bool
volatile	O
ignore_SIGINT	bool
;	O
static	O
int	O
volatile	O
signal_received	int
;	O
static	O
bool	bool
sigs_trapped	bool
;	O
static	O
void	O
catchsig	function
(	O
int	O
s	long
)	O
{	O
if	O
(	O
!	O
(	O
s	long
==	O
SIGINT	int
&&	O
ignore_SIGINT	bool
)	O
)	O
signal_received	int
=	O
s	long
;	O
}	O
static	O
struct	O
sigaction	struct
catchaction	struct
;	O
static	O
void	O
signal_handler	function
(	O
int	O
sig	int
,	O
void	O
(	O
*	O
handler	pointer
)	O
(	O
int	O
)	O
)	O
{	O
catchaction	struct
.	O
sa_handler	pointer
=	O
handler	pointer
;	O
sigaction	struct
(	O
sig	int
,	O
&	O
catchaction	struct
,	O
0	int
)	O
;	O
}	O
static	O
void	O
trapsigs	function
(	O
void	O
)	O
{	O
int	O
i	int
;	O
catchaction	struct
.	O
sa_flags	int
=	O
SA_RESTART	int
;	O
sigemptyset	function
(	O
&	O
catchaction	struct
.	O
sa_mask	struct
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_SIGS	O
;	O
i	int
++	O
)	O
sigaddset	function
(	O
&	O
catchaction	struct
.	O
sa_mask	struct
,	O
sigs	array
[	O
i	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_SIGS	O
;	O
i	int
++	O
)	O
{	O
sigaction	struct
(	O
sigs	array
[	O
i	int
]	O
,	O
0	int
,	O
&	O
initial_action	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
initial_handler	O
(	O
i	int
)	O
!=	O
SIG_IGN	O
)	O
signal_handler	function
(	O
sigs	array
[	O
i	int
]	O
,	O
catchsig	function
)	O
;	O
}	O
signal	function
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
;	O
sigs_trapped	bool
=	O
true	int
;	O
}	O
static	O
void	O
untrapsig	function
(	O
int	O
s	long
)	O
{	O
int	O
i	int
;	O
if	O
(	O
sigs_trapped	bool
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_SIGS	O
;	O
i	int
++	O
)	O
if	O
(	O
(	O
!	O
s	long
||	O
sigs	array
[	O
i	int
]	O
==	O
s	long
)	O
&&	O
initial_handler	O
(	O
i	int
)	O
!=	O
SIG_IGN	O
)	O
{	O
sigaction	struct
(	O
sigs	array
[	O
i	int
]	O
,	O
&	O
initial_action	array
[	O
i	int
]	O
,	O
0	int
)	O
;	O
}	O
}	O
static	O
void	O
checksigs	function
(	O
void	O
)	O
{	O
int	O
s	long
=	O
signal_received	int
;	O
if	O
(	O
s	long
)	O
{	O
cleanup	function
(	O
0	int
)	O
;	O
untrapsig	function
(	O
s	long
)	O
;	O
kill	function
(	O
getpid	function
(	O
)	O
,	O
s	long
)	O
;	O
exit	function
(	O
EXIT_TROUBLE	int
)	O
;	O
}	O
}	O
static	O
void	O
give_help	function
(	O
void	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s"	pointer
,	O
_	O
(	O
"ed:\tEdit then use both versions, each decorated with a header.\neb:\tEdit then use both versions.\nel or e1:\tEdit then use the left version.\ner or e2:\tEdit then use the right version.\ne:\tDiscard both versions then edit a new one.\nl or 1:\tUse the left version.\nr or 2:\tUse the right version.\ns:\tSilently include common lines.\nv:\tVerbosely include common lines.\nq:\tQuit.\n"	pointer
)	O
)	O
;	O
}	O
static	O
int	O
skip_white	function
(	O
void	O
)	O
{	O
int	O
c	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
if	O
(	O
!	O
isspace	function
(	O
c	int
)	O
||	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
checksigs	function
(	O
)	O
;	O
}	O
if	O
(	O
ferror	function
(	O
stdin	pointer
)	O
)	O
perror_fatal	function
(	O
_	O
(	O
"read failed"	pointer
)	O
)	O
;	O
return	O
c	int
;	O
}	O
static	O
void	O
flush_line	function
(	O
void	O
)	O
{	O
int	O
c	int
;	O
while	O
(	O
(	O
c	int
=	O
getchar	function
(	O
)	O
)	O
!=	O
'\n'	O
&&	O
c	int
!=	O
EOF	O
)	O
continue	O
;	O
if	O
(	O
ferror	function
(	O
stdin	pointer
)	O
)	O
perror_fatal	function
(	O
_	O
(	O
"read failed"	pointer
)	O
)	O
;	O
}	O
static	O
bool	bool
edit	function
(	O
struct	O
line_filter	struct
*	O
left	pointer
,	O
char	O
const	O
*	O
lname	pointer
,	O
lin	long
lline	long
,	O
lin	long
llen	long
,	O
struct	O
line_filter	struct
*	O
right	pointer
,	O
char	O
const	O
*	O
rname	pointer
,	O
lin	long
rline	long
,	O
lin	long
rlen	long
,	O
FILE	struct
*	O
outfile	pointer
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
cmd0	int
IF_LINT	O
(	O
=	O
0	int
)	O
;	O
int	O
cmd1	int
IF_LINT	O
(	O
=	O
0	int
)	O
;	O
bool	bool
gotcmd	bool
=	O
false	int
;	O
while	O
(	O
!	O
gotcmd	bool
)	O
{	O
if	O
(	O
putchar	function
(	O
'%'	O
)	O
!=	O
'%'	O
)	O
perror_fatal	function
(	O
_	O
(	O
"write failed"	pointer
)	O
)	O
;	O
ck_fflush	function
(	O
stdout	pointer
)	O
;	O
cmd0	int
=	O
skip_white	function
(	O
)	O
;	O
switch	O
(	O
cmd0	int
)	O
{	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'l'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
'v'	O
:	O
case	O
'q'	O
:	O
if	O
(	O
skip_white	function
(	O
)	O
!=	O
'\n'	O
)	O
{	O
give_help	function
(	O
)	O
;	O
flush_line	function
(	O
)	O
;	O
continue	O
;	O
}	O
gotcmd	bool
=	O
true	int
;	O
break	O
;	O
case	O
'e'	O
:	O
cmd1	int
=	O
skip_white	function
(	O
)	O
;	O
switch	O
(	O
cmd1	int
)	O
{	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'b'	O
:	O
case	O
'd'	O
:	O
case	O
'l'	O
:	O
case	O
'r'	O
:	O
if	O
(	O
skip_white	function
(	O
)	O
!=	O
'\n'	O
)	O
{	O
give_help	function
(	O
)	O
;	O
flush_line	function
(	O
)	O
;	O
continue	O
;	O
}	O
gotcmd	bool
=	O
true	int
;	O
break	O
;	O
case	O
'\n'	O
:	O
gotcmd	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
give_help	function
(	O
)	O
;	O
flush_line	function
(	O
)	O
;	O
continue	O
;	O
}	O
break	O
;	O
case	O
EOF	O
:	O
if	O
(	O
feof	function
(	O
stdin	pointer
)	O
)	O
{	O
gotcmd	bool
=	O
true	int
;	O
cmd0	int
=	O
'q'	O
;	O
break	O
;	O
}	O
default	O
:	O
flush_line	function
(	O
)	O
;	O
case	O
'\n'	O
:	O
give_help	function
(	O
)	O
;	O
continue	O
;	O
}	O
}	O
switch	O
(	O
cmd0	int
)	O
{	O
case	O
'1'	O
:	O
case	O
'l'	O
:	O
lf_copy	function
(	O
left	pointer
,	O
llen	long
,	O
outfile	pointer
)	O
;	O
lf_skip	function
(	O
right	pointer
,	O
rlen	long
)	O
;	O
return	O
true	int
;	O
case	O
'2'	O
:	O
case	O
'r'	O
:	O
lf_copy	function
(	O
right	pointer
,	O
rlen	long
,	O
outfile	pointer
)	O
;	O
lf_skip	function
(	O
left	pointer
,	O
llen	long
)	O
;	O
return	O
true	int
;	O
case	O
's'	O
:	O
suppress_common_lines	bool
=	O
true	int
;	O
break	O
;	O
case	O
'v'	O
:	O
suppress_common_lines	bool
=	O
false	int
;	O
break	O
;	O
case	O
'q'	O
:	O
return	O
false	int
;	O
case	O
'e'	O
:	O
{	O
int	O
fd	int
;	O
if	O
(	O
tmpname	pointer
)	O
tmp	pointer
=	O
fopen	function
(	O
tmpname	pointer
,	O
"w"	pointer
)	O
;	O
else	O
{	O
if	O
(	O
(	O
fd	int
=	O
temporary_file	function
(	O
)	O
)	O
<	O
0	int
)	O
perror_fatal	function
(	O
"mkstemp"	pointer
)	O
;	O
tmp	pointer
=	O
fdopen	function
(	O
fd	int
,	O
"w"	pointer
)	O
;	O
}	O
if	O
(	O
!	O
tmp	pointer
)	O
perror_fatal	function
(	O
tmpname	pointer
)	O
;	O
switch	O
(	O
cmd1	int
)	O
{	O
case	O
'd'	O
:	O
if	O
(	O
llen	long
)	O
{	O
if	O
(	O
llen	long
==	O
1	int
)	O
fprintf	function
(	O
tmp	pointer
,	O
"--- %s %ld\n"	pointer
,	O
lname	pointer
,	O
(	O
long	O
int	O
)	O
lline	long
)	O
;	O
else	O
fprintf	function
(	O
tmp	pointer
,	O
"--- %s %ld,%ld\n"	pointer
,	O
lname	pointer
,	O
(	O
long	O
int	O
)	O
lline	long
,	O
(	O
long	O
int	O
)	O
(	O
lline	long
+	O
llen	long
-	O
1	int
)	O
)	O
;	O
}	O
case	O
'1'	O
:	O
case	O
'b'	O
:	O
case	O
'l'	O
:	O
lf_copy	function
(	O
left	pointer
,	O
llen	long
,	O
tmp	pointer
)	O
;	O
break	O
;	O
default	O
:	O
lf_skip	function
(	O
left	pointer
,	O
llen	long
)	O
;	O
break	O
;	O
}	O
switch	O
(	O
cmd1	int
)	O
{	O
case	O
'd'	O
:	O
if	O
(	O
rlen	long
)	O
{	O
if	O
(	O
rlen	long
==	O
1	int
)	O
fprintf	function
(	O
tmp	pointer
,	O
"+++ %s %ld\n"	pointer
,	O
rname	pointer
,	O
(	O
long	O
int	O
)	O
rline	long
)	O
;	O
else	O
fprintf	function
(	O
tmp	pointer
,	O
"+++ %s %ld,%ld\n"	pointer
,	O
rname	pointer
,	O
(	O
long	O
int	O
)	O
rline	long
,	O
(	O
long	O
int	O
)	O
(	O
rline	long
+	O
rlen	long
-	O
1	int
)	O
)	O
;	O
}	O
case	O
'2'	O
:	O
case	O
'b'	O
:	O
case	O
'r'	O
:	O
lf_copy	function
(	O
right	pointer
,	O
rlen	long
,	O
tmp	pointer
)	O
;	O
break	O
;	O
default	O
:	O
lf_skip	function
(	O
right	pointer
,	O
rlen	long
)	O
;	O
break	O
;	O
}	O
ck_fclose	function
(	O
tmp	pointer
)	O
;	O
{	O
int	O
wstatus	int
;	O
int	O
werrno	int
=	O
0	int
;	O
ignore_SIGINT	bool
=	O
true	int
;	O
checksigs	function
(	O
)	O
;	O
{	O
pid_t	int
pid	int
;	O
pid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
char	O
const	O
*	O
argv	pointer
[	O
3	int
]	O
;	O
int	O
i	int
=	O
0	int
;	O
argv	pointer
[	O
i	int
++	O
]	O
=	O
editor_program	pointer
;	O
argv	pointer
[	O
i	int
++	O
]	O
=	O
tmpname	pointer
;	O
argv	pointer
[	O
i	int
]	O
=	O
0	int
;	O
execvp	function
(	O
editor_program	pointer
,	O
(	O
char	O
*	O
*	O
)	O
argv	pointer
)	O
;	O
_exit	function
(	O
errno	O
==	O
ENOENT	int
?	O
127	int
:	O
126	int
)	O
;	O
}	O
if	O
(	O
pid	int
<	O
0	int
)	O
perror_fatal	function
(	O
"fork"	pointer
)	O
;	O
while	O
(	O
waitpid	function
(	O
pid	int
,	O
&	O
wstatus	int
,	O
0	int
)	O
<	O
0	int
)	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
checksigs	function
(	O
)	O
;	O
else	O
perror_fatal	function
(	O
"waitpid"	pointer
)	O
;	O
}	O
ignore_SIGINT	bool
=	O
false	int
;	O
check_child_status	function
(	O
werrno	int
,	O
wstatus	int
,	O
EXIT_SUCCESS	int
,	O
editor_program	pointer
)	O
;	O
}	O
{	O
char	O
buf	pointer
[	O
SDIFF_BUFSIZE	O
]	O
;	O
size_t	long
size	long
;	O
tmp	pointer
=	O
ck_fopen	function
(	O
tmpname	pointer
,	O
"r"	pointer
)	O
;	O
while	O
(	O
(	O
size	long
=	O
ck_fread	function
(	O
buf	pointer
,	O
SDIFF_BUFSIZE	O
,	O
tmp	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
checksigs	function
(	O
)	O
;	O
ck_fwrite	function
(	O
buf	pointer
,	O
size	long
,	O
outfile	pointer
)	O
;	O
}	O
ck_fclose	function
(	O
tmp	pointer
)	O
;	O
}	O
return	O
true	int
;	O
}	O
default	O
:	O
give_help	function
(	O
)	O
;	O
break	O
;	O
}	O
}	O
}	O
static	O
bool	bool
interact	function
(	O
struct	O
line_filter	struct
*	O
diff	pointer
,	O
struct	O
line_filter	struct
*	O
left	pointer
,	O
char	O
const	O
*	O
lname	pointer
,	O
struct	O
line_filter	struct
*	O
right	pointer
,	O
char	O
const	O
*	O
rname	pointer
,	O
FILE	struct
*	O
outfile	pointer
)	O
{	O
lin	long
lline	long
=	O
1	int
,	O
rline	long
=	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
diff_help	array
[	O
256	int
]	O
;	O
int	O
snarfed	int
=	O
lf_snarf	function
(	O
diff	pointer
,	O
diff_help	array
,	O
sizeof	O
diff_help	array
)	O
;	O
if	O
(	O
snarfed	int
<=	O
0	int
)	O
return	O
snarfed	int
!=	O
0	int
;	O
checksigs	function
(	O
)	O
;	O
if	O
(	O
diff_help	array
[	O
0	int
]	O
==	O
' '	O
)	O
puts	function
(	O
diff_help	array
+	O
1	int
)	O
;	O
else	O
{	O
char	O
*	O
numend	pointer
;	O
uintmax_t	long
val	array
;	O
lin	long
llen	long
,	O
rlen	long
,	O
lenmax	long
;	O
errno	O
=	O
0	int
;	O
llen	long
=	O
val	array
=	O
strtoumax	function
(	O
diff_help	array
+	O
1	int
,	O
&	O
numend	pointer
,	O
10	int
)	O
;	O
if	O
(	O
llen	long
<	O
0	int
||	O
llen	long
!=	O
val	array
||	O
errno	O
||	O
*	O
numend	pointer
!=	O
','	O
)	O
fatal	function
(	O
diff_help	array
)	O
;	O
rlen	long
=	O
val	array
=	O
strtoumax	function
(	O
numend	pointer
+	O
1	int
,	O
&	O
numend	pointer
,	O
10	int
)	O
;	O
if	O
(	O
rlen	long
<	O
0	int
||	O
rlen	long
!=	O
val	array
||	O
errno	O
||	O
*	O
numend	pointer
)	O
fatal	function
(	O
diff_help	array
)	O
;	O
lenmax	long
=	O
MAX	O
(	O
llen	long
,	O
rlen	long
)	O
;	O
switch	O
(	O
diff_help	array
[	O
0	int
]	O
)	O
{	O
case	O
'i'	O
:	O
if	O
(	O
suppress_common_lines	bool
)	O
lf_skip	function
(	O
diff	pointer
,	O
lenmax	long
)	O
;	O
else	O
lf_copy	function
(	O
diff	pointer
,	O
lenmax	long
,	O
stdout	pointer
)	O
;	O
lf_copy	function
(	O
left	pointer
,	O
llen	long
,	O
outfile	pointer
)	O
;	O
lf_skip	function
(	O
right	pointer
,	O
rlen	long
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
lf_copy	function
(	O
diff	pointer
,	O
lenmax	long
,	O
stdout	pointer
)	O
;	O
if	O
(	O
!	O
edit	function
(	O
left	pointer
,	O
lname	pointer
,	O
lline	long
,	O
llen	long
,	O
right	pointer
,	O
rname	pointer
,	O
rline	long
,	O
rlen	long
,	O
outfile	pointer
)	O
)	O
return	O
false	int
;	O
break	O
;	O
default	O
:	O
fatal	function
(	O
diff_help	array
)	O
;	O
}	O
lline	long
+=	O
llen	long
;	O
rline	long
+=	O
rlen	long
;	O
}	O
}	O
}	O
static	O
bool	bool
diraccess	function
(	O
char	O
const	O
*	O
dir	pointer
)	O
{	O
struct	O
stat	struct
buf	pointer
;	O
return	O
stat	struct
(	O
dir	pointer
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
S_ISDIR	O
(	O
buf	pointer
.	O
st_mode	int
)	O
;	O
}	O
static	O
int	O
temporary_file	function
(	O
void	O
)	O
{	O
char	O
const	O
*	O
tmpdir	pointer
=	O
getenv	function
(	O
TMPDIR_ENV	pointer
)	O
;	O
char	O
const	O
*	O
dir	pointer
=	O
tmpdir	pointer
?	O
tmpdir	pointer
:	O
P_tmpdir	pointer
;	O
char	O
*	O
buf	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
dir	pointer
)	O
+	O
1	int
+	O
5	int
+	O
6	int
+	O
1	int
)	O
;	O
int	O
fd	int
;	O
int	O
e	int
;	O
sigset_t	struct
procmask	struct
;	O
sigset_t	struct
blocked	struct
;	O
sprintf	function
(	O
buf	pointer
,	O
"%s/sdiffXXXXXX"	pointer
,	O
dir	pointer
)	O
;	O
sigemptyset	function
(	O
&	O
blocked	struct
)	O
;	O
sigaddset	function
(	O
&	O
blocked	struct
,	O
SIGINT	int
)	O
;	O
sigprocmask	function
(	O
SIG_BLOCK	int
,	O
&	O
blocked	struct
,	O
&	O
procmask	struct
)	O
;	O
fd	int
=	O
mkstemp	function
(	O
buf	pointer
)	O
;	O
e	int
=	O
errno	O
;	O
if	O
(	O
0	int
<=	O
fd	int
)	O
tmpname	pointer
=	O
buf	pointer
;	O
sigprocmask	function
(	O
SIG_SETMASK	int
,	O
&	O
procmask	struct
,	O
0	int
)	O
;	O
errno	O
=	O
e	int
;	O
return	O
fd	int
;	O
}	O
