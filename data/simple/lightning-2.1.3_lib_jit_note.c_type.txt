static	O
jit_note_t	struct
*	O
_new_note	function
(	O
jit_state_t	struct
*	O
,	O
jit_uint8_t	char
*	O
,	O
char	O
*	O
)	O
;	O
static	O
void	O
new_line	function
(	O
jit_int32_t	int
,	O
jit_note_t	struct
*	O
,	O
char	O
*	O
,	O
jit_int32_t	int
,	O
jit_int32_t	int
)	O
;	O
static	O
jit_int32_t	int
_note_search_index	function
(	O
jit_state_t	struct
*	O
,	O
jit_uint8_t	char
*	O
)	O
;	O
static	O
jit_int32_t	int
line_insert_index	function
(	O
jit_note_t	struct
*	O
,	O
jit_int32_t	int
)	O
;	O
static	O
jit_int32_t	int
line_search_index	function
(	O
jit_note_t	struct
*	O
,	O
jit_int32_t	int
)	O
;	O
static	O
jit_int32_t	int
offset_insert_index	function
(	O
jit_line_t	struct
*	O
,	O
jit_int32_t	int
)	O
;	O
static	O
jit_int32_t	int
offset_search_index	function
(	O
jit_line_t	struct
*	O
,	O
jit_int32_t	int
)	O
;	O
void	O
jit_init_note	function
(	O
void	O
)	O
{	O
}	O
void	O
jit_finish_note	function
(	O
void	O
)	O
{	O
}	O
jit_node_t	struct
*	O
_jit_name	function
(	O
jit_state_t	struct
*	O
_jit	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
jit_node_t	struct
*	O
node	pointer
;	O
node	pointer
=	O
jit_new_node	O
(	O
jit_code_name	int
)	O
;	O
if	O
(	O
name	pointer
)	O
node	pointer
->	O
v	union
.	O
n	pointer
=	O
jit_data	union
(	O
name	pointer
,	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
,	O
1	int
)	O
;	O
else	O
node	pointer
->	O
v	union
.	O
p	pointer
=	O
NULL	O
;	O
if	O
(	O
_jitc	O
->	O
note	pointer
.	O
head	pointer
==	O
NULL	O
)	O
_jitc	O
->	O
note	pointer
.	O
head	pointer
=	O
_jitc	O
->	O
note	pointer
.	O
tail	pointer
=	O
node	pointer
;	O
else	O
{	O
_jitc	O
->	O
note	pointer
.	O
tail	pointer
->	O
link	function
=	O
node	pointer
;	O
_jitc	O
->	O
note	pointer
.	O
tail	pointer
=	O
node	pointer
;	O
}	O
++	O
_jit	pointer
->	O
note	pointer
.	O
length	long
;	O
_jitc	O
->	O
note	pointer
.	O
size	long
+=	O
sizeof	O
(	O
jit_note_t	struct
)	O
;	O
_jitc	O
->	O
note	pointer
.	O
note	pointer
=	O
NULL	O
;	O
return	O
(	O
_jitc	O
->	O
note	pointer
.	O
name	pointer
=	O
node	pointer
)	O
;	O
}	O
jit_node_t	struct
*	O
_jit_note	function
(	O
jit_state_t	struct
*	O
_jit	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
line	int
)	O
{	O
jit_node_t	struct
*	O
node	pointer
;	O
node	pointer
=	O
jit_new_node	O
(	O
jit_code_note	int
)	O
;	O
if	O
(	O
name	pointer
)	O
node	pointer
->	O
v	union
.	O
n	pointer
=	O
jit_data	union
(	O
name	pointer
,	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
,	O
1	int
)	O
;	O
else	O
node	pointer
->	O
v	union
.	O
p	pointer
=	O
NULL	O
;	O
node	pointer
->	O
w	long
.	O
w	long
=	O
line	int
;	O
if	O
(	O
_jitc	O
->	O
note	pointer
.	O
head	pointer
==	O
NULL	O
)	O
_jitc	O
->	O
note	pointer
.	O
head	pointer
=	O
_jitc	O
->	O
note	pointer
.	O
tail	pointer
=	O
node	pointer
;	O
else	O
{	O
_jitc	O
->	O
note	pointer
.	O
tail	pointer
->	O
link	function
=	O
node	pointer
;	O
_jitc	O
->	O
note	pointer
.	O
tail	pointer
=	O
node	pointer
;	O
}	O
if	O
(	O
_jitc	O
->	O
note	pointer
.	O
note	pointer
==	O
NULL	O
||	O
(	O
name	pointer
==	O
NULL	O
&&	O
_jitc	O
->	O
note	pointer
.	O
note	pointer
!=	O
NULL	O
)	O
||	O
(	O
name	pointer
!=	O
NULL	O
&&	O
_jitc	O
->	O
note	pointer
.	O
note	pointer
==	O
NULL	O
)	O
||	O
(	O
name	pointer
!=	O
NULL	O
&&	O
_jitc	O
->	O
note	pointer
.	O
note	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
name	pointer
,	O
(	O
char	O
*	O
)	O
_jitc	O
->	O
data	struct
.	O
ptr	pointer
+	O
_jitc	O
->	O
note	pointer
.	O
note	pointer
->	O
v	union
.	O
n	pointer
->	O
u	union
.	O
w	long
)	O
)	O
)	O
_jitc	O
->	O
note	pointer
.	O
size	long
+=	O
sizeof	O
(	O
jit_line_t	struct
)	O
;	O
_jitc	O
->	O
note	pointer
.	O
size	long
+=	O
sizeof	O
(	O
jit_int32_t	int
)	O
*	O
2	int
;	O
return	O
(	O
_jitc	O
->	O
note	pointer
.	O
note	pointer
=	O
node	pointer
)	O
;	O
}	O
void	O
_jit_annotate	function
(	O
jit_state_t	struct
*	O
_jit	pointer
)	O
{	O
jit_node_t	struct
*	O
node	pointer
;	O
jit_note_t	struct
*	O
note	pointer
;	O
jit_line_t	struct
*	O
line	int
;	O
jit_word_t	long
length	long
;	O
jit_word_t	long
note_offset	long
;	O
jit_word_t	long
line_offset	long
;	O
_jit	pointer
->	O
note	pointer
.	O
ptr	pointer
=	O
(	O
jit_note_t	struct
*	O
)	O
_jitc	O
->	O
note	pointer
.	O
base	union
;	O
_jit	pointer
->	O
note	pointer
.	O
length	long
=	O
0	int
;	O
note	pointer
=	O
NULL	O
;	O
for	O
(	O
node	pointer
=	O
_jitc	O
->	O
note	pointer
.	O
head	pointer
;	O
node	pointer
;	O
node	pointer
=	O
node	pointer
->	O
link	function
)	O
{	O
if	O
(	O
node	pointer
->	O
code	pointer
==	O
jit_code_name	int
)	O
note	pointer
=	O
new_note	O
(	O
node	pointer
->	O
u	union
.	O
p	pointer
,	O
node	pointer
->	O
v	union
.	O
p	pointer
?	O
node	pointer
->	O
v	union
.	O
n	pointer
->	O
u	union
.	O
p	pointer
:	O
NULL	O
)	O
;	O
else	O
if	O
(	O
node	pointer
->	O
v	union
.	O
p	pointer
)	O
{	O
if	O
(	O
note	pointer
==	O
NULL	O
)	O
note	pointer
=	O
new_note	O
(	O
node	pointer
->	O
u	union
.	O
p	pointer
,	O
NULL	O
)	O
;	O
jit_set_note	O
(	O
note	pointer
,	O
node	pointer
->	O
v	union
.	O
n	pointer
->	O
u	union
.	O
p	pointer
,	O
node	pointer
->	O
w	long
.	O
w	long
,	O
(	O
jit_uint8_t	char
*	O
)	O
node	pointer
->	O
u	union
.	O
p	pointer
-	O
note	pointer
->	O
code	pointer
)	O
;	O
}	O
}	O
if	O
(	O
note	pointer
)	O
note	pointer
->	O
size	long
=	O
_jit	pointer
->	O
pc	union
.	O
uc	pointer
-	O
note	pointer
->	O
code	pointer
;	O
for	O
(	O
note_offset	long
=	O
0	int
;	O
note_offset	long
<	O
_jit	pointer
->	O
note	pointer
.	O
length	long
;	O
note_offset	long
++	O
)	O
{	O
note	pointer
=	O
_jit	pointer
->	O
note	pointer
.	O
ptr	pointer
+	O
note_offset	long
;	O
if	O
(	O
(	O
length	long
=	O
sizeof	O
(	O
jit_line_t	struct
)	O
*	O
note	pointer
->	O
length	long
)	O
==	O
0	int
)	O
continue	O
;	O
assert	O
(	O
_jitc	O
->	O
note	pointer
.	O
base	union
+	O
length	long
<	O
_jit	pointer
->	O
data	struct
.	O
ptr	pointer
+	O
_jit	pointer
->	O
data	struct
.	O
length	long
)	O
;	O
jit_memcpy	function
(	O
_jitc	O
->	O
note	pointer
.	O
base	union
,	O
note	pointer
->	O
lines	pointer
,	O
length	long
)	O
;	O
jit_free	function
(	O
(	O
jit_pointer_t	pointer
*	O
)	O
&	O
note	pointer
->	O
lines	pointer
)	O
;	O
note	pointer
->	O
lines	pointer
=	O
(	O
jit_line_t	struct
*	O
)	O
_jitc	O
->	O
note	pointer
.	O
base	union
;	O
_jitc	O
->	O
note	pointer
.	O
base	union
+=	O
length	long
;	O
}	O
for	O
(	O
note_offset	long
=	O
0	int
;	O
note_offset	long
<	O
_jit	pointer
->	O
note	pointer
.	O
length	long
;	O
note_offset	long
++	O
)	O
{	O
note	pointer
=	O
_jit	pointer
->	O
note	pointer
.	O
ptr	pointer
+	O
note_offset	long
;	O
for	O
(	O
line_offset	long
=	O
0	int
;	O
line_offset	long
<	O
note	pointer
->	O
length	long
;	O
line_offset	long
++	O
)	O
{	O
line	int
=	O
note	pointer
->	O
lines	pointer
+	O
line_offset	long
;	O
length	long
=	O
sizeof	O
(	O
jit_int32_t	int
)	O
*	O
line	int
->	O
length	long
;	O
assert	O
(	O
_jitc	O
->	O
note	pointer
.	O
base	union
+	O
length	long
<	O
_jit	pointer
->	O
data	struct
.	O
ptr	pointer
+	O
_jit	pointer
->	O
data	struct
.	O
length	long
)	O
;	O
jit_memcpy	function
(	O
_jitc	O
->	O
note	pointer
.	O
base	union
,	O
line	int
->	O
linenos	pointer
,	O
length	long
)	O
;	O
jit_free	function
(	O
(	O
jit_pointer_t	pointer
*	O
)	O
&	O
line	int
->	O
linenos	pointer
)	O
;	O
line	int
->	O
linenos	pointer
=	O
(	O
jit_int32_t	int
*	O
)	O
_jitc	O
->	O
note	pointer
.	O
base	union
;	O
_jitc	O
->	O
note	pointer
.	O
base	union
+=	O
length	long
;	O
assert	O
(	O
_jitc	O
->	O
note	pointer
.	O
base	union
+	O
length	long
<	O
_jit	pointer
->	O
data	struct
.	O
ptr	pointer
+	O
_jit	pointer
->	O
data	struct
.	O
length	long
)	O
;	O
jit_memcpy	function
(	O
_jitc	O
->	O
note	pointer
.	O
base	union
,	O
line	int
->	O
offsets	pointer
,	O
length	long
)	O
;	O
jit_free	function
(	O
(	O
jit_pointer_t	pointer
*	O
)	O
&	O
line	int
->	O
offsets	pointer
)	O
;	O
line	int
->	O
offsets	pointer
=	O
(	O
jit_int32_t	int
*	O
)	O
_jitc	O
->	O
note	pointer
.	O
base	union
;	O
_jitc	O
->	O
note	pointer
.	O
base	union
+=	O
length	long
;	O
}	O
}	O
}	O
void	O
_jit_set_note	function
(	O
jit_state_t	struct
*	O
_jit	pointer
,	O
jit_note_t	struct
*	O
note	pointer
,	O
char	O
*	O
file	pointer
,	O
int	O
lineno	int
,	O
jit_int32_t	int
offset	short
)	O
{	O
jit_line_t	struct
*	O
line	int
;	O
jit_int32_t	int
index	function
;	O
index	function
=	O
line_insert_index	function
(	O
note	pointer
,	O
offset	short
)	O
;	O
if	O
(	O
note	pointer
->	O
length	long
&&	O
index	function
==	O
note	pointer
->	O
length	long
&&	O
note	pointer
->	O
lines	pointer
[	O
index	function
-	O
1	int
]	O
.	O
file	pointer
==	O
file	pointer
)	O
--	O
index	function
;	O
if	O
(	O
index	function
>=	O
note	pointer
->	O
length	long
||	O
note	pointer
->	O
lines	pointer
[	O
index	function
]	O
.	O
file	pointer
!=	O
file	pointer
)	O
new_line	function
(	O
index	function
,	O
note	pointer
,	O
file	pointer
,	O
lineno	int
,	O
offset	short
)	O
;	O
else	O
{	O
line	int
=	O
note	pointer
->	O
lines	pointer
+	O
index	function
;	O
index	function
=	O
offset_insert_index	function
(	O
line	int
,	O
offset	short
)	O
;	O
if	O
(	O
index	function
<	O
line	int
->	O
length	long
&&	O
line	int
->	O
offsets	pointer
[	O
index	function
]	O
==	O
offset	short
)	O
{	O
if	O
(	O
line	int
->	O
linenos	pointer
[	O
index	function
]	O
<	O
lineno	int
)	O
line	int
->	O
linenos	pointer
[	O
index	function
]	O
=	O
lineno	int
;	O
}	O
else	O
if	O
(	O
index	function
<	O
line	int
->	O
length	long
&&	O
line	int
->	O
linenos	pointer
[	O
index	function
]	O
==	O
lineno	int
)	O
{	O
if	O
(	O
line	int
->	O
offsets	pointer
[	O
index	function
]	O
>	O
offset	short
)	O
line	int
->	O
offsets	pointer
[	O
index	function
]	O
=	O
offset	short
;	O
}	O
else	O
{	O
if	O
(	O
(	O
line	int
->	O
length	long
&	O
15	int
)	O
==	O
0	int
)	O
{	O
jit_realloc	function
(	O
(	O
jit_pointer_t	pointer
*	O
)	O
&	O
line	int
->	O
linenos	pointer
,	O
line	int
->	O
length	long
*	O
sizeof	O
(	O
jit_int32_t	int
)	O
,	O
(	O
line	int
->	O
length	long
+	O
17	int
)	O
*	O
sizeof	O
(	O
jit_int32_t	int
)	O
)	O
;	O
jit_realloc	function
(	O
(	O
jit_pointer_t	pointer
*	O
)	O
&	O
line	int
->	O
offsets	pointer
,	O
line	int
->	O
length	long
*	O
sizeof	O
(	O
jit_int32_t	int
)	O
,	O
(	O
line	int
->	O
length	long
+	O
17	int
)	O
*	O
sizeof	O
(	O
jit_int32_t	int
)	O
)	O
;	O
}	O
if	O
(	O
index	function
<	O
note	pointer
->	O
length	long
)	O
{	O
jit_memmove	function
(	O
line	int
->	O
linenos	pointer
+	O
index	function
+	O
1	int
,	O
line	int
->	O
linenos	pointer
+	O
index	function
,	O
sizeof	O
(	O
jit_int32_t	int
)	O
*	O
(	O
line	int
->	O
length	long
-	O
index	function
)	O
)	O
;	O
jit_memmove	function
(	O
line	int
->	O
offsets	pointer
+	O
index	function
+	O
1	int
,	O
line	int
->	O
offsets	pointer
+	O
index	function
,	O
sizeof	O
(	O
jit_int32_t	int
)	O
*	O
(	O
line	int
->	O
length	long
-	O
index	function
)	O
)	O
;	O
}	O
line	int
->	O
linenos	pointer
[	O
index	function
]	O
=	O
lineno	int
;	O
line	int
->	O
offsets	pointer
[	O
index	function
]	O
=	O
offset	short
;	O
++	O
line	int
->	O
length	long
;	O
}	O
}	O
}	O
jit_bool_t	int
_jit_get_note	function
(	O
jit_state_t	struct
*	O
_jit	pointer
,	O
jit_pointer_t	pointer
code	pointer
,	O
char	O
*	O
*	O
name	pointer
,	O
char	O
*	O
*	O
file	pointer
,	O
jit_int32_t	int
*	O
lineno	int
)	O
{	O
jit_note_t	struct
*	O
note	pointer
;	O
jit_line_t	struct
*	O
line	int
;	O
jit_int32_t	int
index	function
;	O
jit_int32_t	int
offset	short
;	O
if	O
(	O
(	O
index	function
=	O
note_search_index	O
(	O
(	O
jit_uint8_t	char
*	O
)	O
code	pointer
)	O
)	O
>=	O
_jit	pointer
->	O
note	pointer
.	O
length	long
)	O
return	O
(	O
0	int
)	O
;	O
note	pointer
=	O
_jit	pointer
->	O
note	pointer
.	O
ptr	pointer
+	O
index	function
;	O
if	O
(	O
(	O
jit_uint8_t	char
*	O
)	O
code	pointer
<	O
note	pointer
->	O
code	pointer
||	O
(	O
jit_uint8_t	char
*	O
)	O
code	pointer
>=	O
note	pointer
->	O
code	pointer
+	O
note	pointer
->	O
size	long
)	O
return	O
(	O
0	int
)	O
;	O
offset	short
=	O
(	O
jit_uint8_t	char
*	O
)	O
code	pointer
-	O
note	pointer
->	O
code	pointer
;	O
if	O
(	O
(	O
index	function
=	O
line_search_index	function
(	O
note	pointer
,	O
offset	short
)	O
)	O
>=	O
note	pointer
->	O
length	long
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
index	function
==	O
0	int
&&	O
offset	short
<	O
note	pointer
->	O
lines	pointer
[	O
0	int
]	O
.	O
offsets	pointer
[	O
0	int
]	O
)	O
return	O
(	O
0	int
)	O
;	O
line	int
=	O
note	pointer
->	O
lines	pointer
+	O
index	function
;	O
if	O
(	O
(	O
index	function
=	O
offset_search_index	function
(	O
line	int
,	O
offset	short
)	O
)	O
>=	O
line	int
->	O
length	long
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
name	pointer
)	O
*	O
name	pointer
=	O
note	pointer
->	O
name	pointer
;	O
if	O
(	O
file	pointer
)	O
*	O
file	pointer
=	O
line	int
->	O
file	pointer
;	O
if	O
(	O
lineno	int
)	O
*	O
lineno	int
=	O
line	int
->	O
linenos	pointer
[	O
index	function
]	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
static	O
jit_note_t	struct
*	O
_new_note	function
(	O
jit_state_t	struct
*	O
_jit	pointer
,	O
jit_uint8_t	char
*	O
code	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
jit_note_t	struct
*	O
note	pointer
;	O
jit_note_t	struct
*	O
prev	pointer
;	O
if	O
(	O
_jit	pointer
->	O
note	pointer
.	O
length	long
)	O
{	O
prev	pointer
=	O
_jit	pointer
->	O
note	pointer
.	O
ptr	pointer
+	O
_jit	pointer
->	O
note	pointer
.	O
length	long
-	O
1	int
;	O
assert	O
(	O
code	pointer
>=	O
prev	pointer
->	O
code	pointer
)	O
;	O
prev	pointer
->	O
size	long
=	O
code	pointer
-	O
prev	pointer
->	O
code	pointer
;	O
}	O
note	pointer
=	O
(	O
jit_note_t	struct
*	O
)	O
_jitc	O
->	O
note	pointer
.	O
base	union
;	O
_jitc	O
->	O
note	pointer
.	O
base	union
+=	O
sizeof	O
(	O
jit_note_t	struct
)	O
;	O
++	O
_jit	pointer
->	O
note	pointer
.	O
length	long
;	O
note	pointer
->	O
code	pointer
=	O
code	pointer
;	O
note	pointer
->	O
name	pointer
=	O
name	pointer
;	O
return	O
(	O
note	pointer
)	O
;	O
}	O
static	O
void	O
new_line	function
(	O
jit_int32_t	int
index	function
,	O
jit_note_t	struct
*	O
note	pointer
,	O
char	O
*	O
file	pointer
,	O
jit_int32_t	int
lineno	int
,	O
jit_int32_t	int
offset	short
)	O
{	O
jit_line_t	struct
*	O
line	int
;	O
if	O
(	O
note	pointer
->	O
lines	pointer
==	O
NULL	O
)	O
jit_alloc	function
(	O
(	O
jit_pointer_t	pointer
*	O
)	O
&	O
note	pointer
->	O
lines	pointer
,	O
16	int
*	O
sizeof	O
(	O
jit_line_t	struct
)	O
)	O
;	O
else	O
if	O
(	O
(	O
note	pointer
->	O
length	long
&	O
15	int
)	O
==	O
15	int
)	O
jit_realloc	function
(	O
(	O
jit_pointer_t	pointer
*	O
)	O
&	O
note	pointer
->	O
lines	pointer
,	O
note	pointer
->	O
length	long
*	O
sizeof	O
(	O
jit_line_t	struct
)	O
,	O
(	O
note	pointer
->	O
length	long
+	O
17	int
)	O
*	O
sizeof	O
(	O
jit_line_t	struct
)	O
)	O
;	O
if	O
(	O
index	function
<	O
note	pointer
->	O
length	long
)	O
jit_memmove	function
(	O
note	pointer
->	O
lines	pointer
+	O
index	function
+	O
1	int
,	O
note	pointer
->	O
lines	pointer
+	O
index	function
,	O
sizeof	O
(	O
jit_line_t	struct
)	O
*	O
(	O
note	pointer
->	O
length	long
-	O
index	function
)	O
)	O
;	O
line	int
=	O
note	pointer
->	O
lines	pointer
+	O
index	function
;	O
++	O
note	pointer
->	O
length	long
;	O
line	int
->	O
file	pointer
=	O
file	pointer
;	O
line	int
->	O
length	long
=	O
1	int
;	O
jit_alloc	function
(	O
(	O
jit_pointer_t	pointer
*	O
)	O
&	O
line	int
->	O
linenos	pointer
,	O
16	int
*	O
sizeof	O
(	O
jit_int32_t	int
)	O
)	O
;	O
line	int
->	O
linenos	pointer
[	O
0	int
]	O
=	O
lineno	int
;	O
jit_alloc	function
(	O
(	O
jit_pointer_t	pointer
*	O
)	O
&	O
line	int
->	O
offsets	pointer
,	O
16	int
*	O
sizeof	O
(	O
jit_int32_t	int
)	O
)	O
;	O
line	int
->	O
offsets	pointer
[	O
0	int
]	O
=	O
offset	short
;	O
}	O
static	O
jit_int32_t	int
_note_search_index	function
(	O
jit_state_t	struct
*	O
_jit	pointer
,	O
jit_uint8_t	char
*	O
code	pointer
)	O
{	O
jit_int32_t	int
bot	int
;	O
jit_int32_t	int
top	int
;	O
jit_int32_t	int
index	function
;	O
jit_note_t	struct
*	O
notes	pointer
;	O
bot	int
=	O
0	int
;	O
top	int
=	O
_jit	pointer
->	O
note	pointer
.	O
length	long
;	O
notes	pointer
=	O
_jit	pointer
->	O
note	pointer
.	O
ptr	pointer
;	O
for	O
(	O
index	function
=	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
;	O
bot	int
<	O
top	int
;	O
index	function
=	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
)	O
{	O
if	O
(	O
code	pointer
<	O
notes	pointer
[	O
index	function
]	O
.	O
code	pointer
)	O
top	int
=	O
index	function
;	O
else	O
if	O
(	O
code	pointer
>=	O
notes	pointer
[	O
index	function
]	O
.	O
code	pointer
&&	O
code	pointer
-	O
notes	pointer
[	O
index	function
]	O
.	O
code	pointer
<	O
notes	pointer
[	O
index	function
]	O
.	O
size	long
)	O
break	O
;	O
else	O
bot	int
=	O
index	function
+	O
1	int
;	O
}	O
return	O
(	O
index	function
)	O
;	O
}	O
static	O
jit_int32_t	int
line_insert_index	function
(	O
jit_note_t	struct
*	O
note	pointer
,	O
jit_int32_t	int
offset	short
)	O
{	O
jit_int32_t	int
bot	int
;	O
jit_int32_t	int
top	int
;	O
jit_int32_t	int
index	function
;	O
jit_line_t	struct
*	O
lines	pointer
;	O
bot	int
=	O
0	int
;	O
top	int
=	O
note	pointer
->	O
length	long
;	O
if	O
(	O
(	O
lines	pointer
=	O
note	pointer
->	O
lines	pointer
)	O
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
for	O
(	O
index	function
=	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
;	O
bot	int
<	O
top	int
;	O
index	function
=	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
)	O
{	O
if	O
(	O
offset	short
<	O
*	O
lines	pointer
[	O
index	function
]	O
.	O
offsets	pointer
)	O
top	int
=	O
index	function
;	O
else	O
bot	int
=	O
index	function
+	O
1	int
;	O
}	O
return	O
(	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
)	O
;	O
}	O
static	O
jit_int32_t	int
line_search_index	function
(	O
jit_note_t	struct
*	O
note	pointer
,	O
jit_int32_t	int
offset	short
)	O
{	O
jit_int32_t	int
bot	int
;	O
jit_int32_t	int
top	int
;	O
jit_int32_t	int
index	function
;	O
jit_line_t	struct
*	O
lines	pointer
;	O
bot	int
=	O
0	int
;	O
top	int
=	O
note	pointer
->	O
length	long
;	O
if	O
(	O
(	O
lines	pointer
=	O
note	pointer
->	O
lines	pointer
)	O
==	O
NULL	O
)	O
return	O
(	O
0	int
)	O
;	O
for	O
(	O
index	function
=	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
;	O
bot	int
<	O
top	int
;	O
index	function
=	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
)	O
{	O
if	O
(	O
offset	short
<	O
*	O
lines	pointer
[	O
index	function
]	O
.	O
offsets	pointer
)	O
top	int
=	O
index	function
;	O
else	O
if	O
(	O
index	function
==	O
note	pointer
->	O
length	long
-	O
1	int
||	O
(	O
offset	short
>=	O
*	O
lines	pointer
[	O
index	function
]	O
.	O
offsets	pointer
&&	O
offset	short
<	O
*	O
lines	pointer
[	O
index	function
+	O
1	int
]	O
.	O
offsets	pointer
)	O
)	O
break	O
;	O
else	O
bot	int
=	O
index	function
+	O
1	int
;	O
}	O
return	O
(	O
index	function
)	O
;	O
}	O
static	O
jit_int32_t	int
offset_insert_index	function
(	O
jit_line_t	struct
*	O
line	int
,	O
jit_int32_t	int
offset	short
)	O
{	O
jit_int32_t	int
bot	int
;	O
jit_int32_t	int
top	int
;	O
jit_int32_t	int
index	function
;	O
jit_int32_t	int
*	O
offsets	pointer
;	O
bot	int
=	O
0	int
;	O
top	int
=	O
line	int
->	O
length	long
;	O
offsets	pointer
=	O
line	int
->	O
offsets	pointer
;	O
for	O
(	O
index	function
=	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
;	O
bot	int
<	O
top	int
;	O
index	function
=	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
)	O
{	O
if	O
(	O
offset	short
<	O
offsets	pointer
[	O
index	function
]	O
)	O
top	int
=	O
index	function
;	O
else	O
bot	int
=	O
index	function
+	O
1	int
;	O
}	O
return	O
(	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
)	O
;	O
}	O
static	O
jit_int32_t	int
offset_search_index	function
(	O
jit_line_t	struct
*	O
line	int
,	O
jit_int32_t	int
offset	short
)	O
{	O
jit_int32_t	int
bot	int
;	O
jit_int32_t	int
top	int
;	O
jit_int32_t	int
index	function
;	O
jit_int32_t	int
*	O
offsets	pointer
;	O
bot	int
=	O
0	int
;	O
top	int
=	O
line	int
->	O
length	long
;	O
offsets	pointer
=	O
line	int
->	O
offsets	pointer
;	O
for	O
(	O
index	function
=	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
;	O
bot	int
<	O
top	int
;	O
index	function
=	O
(	O
bot	int
+	O
top	int
)	O
>>	O
1	int
)	O
{	O
if	O
(	O
offset	short
<	O
offsets	pointer
[	O
index	function
]	O
)	O
top	int
=	O
index	function
;	O
else	O
if	O
(	O
index	function
==	O
line	int
->	O
length	long
-	O
1	int
||	O
(	O
offset	short
>=	O
offsets	pointer
[	O
index	function
]	O
&&	O
offset	short
<	O
offsets	pointer
[	O
index	function
+	O
1	int
]	O
)	O
)	O
break	O
;	O
else	O
bot	int
=	O
index	function
+	O
1	int
;	O
}	O
return	O
(	O
index	function
)	O
;	O
}	O
