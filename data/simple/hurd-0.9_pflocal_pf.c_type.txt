error_t	O
S_socket_create	function
(	O
mach_port_t	O
pf	int
,	O
int	O
sock_type	int
,	O
int	O
protocol	int
,	O
mach_port_t	O
*	O
port	pointer
,	O
mach_msg_type_name_t	O
*	O
port_type	pointer
)	O
{	O
error_t	O
err	O
;	O
struct	O
sock	pointer
*	O
sock	pointer
;	O
struct	O
pipe_class	pointer
*	O
pipe_class	pointer
;	O
mode_t	int
mode	int
;	O
switch	O
(	O
protocol	int
)	O
{	O
case	O
0	int
:	O
mode	int
=	O
S_IFSOCK	O
;	O
break	O
;	O
case	O
S_IFCHR	O
:	O
case	O
S_IFSOCK	O
:	O
case	O
S_IFIFO	O
:	O
mode	int
=	O
protocol	int
;	O
break	O
;	O
default	O
:	O
return	O
EPROTONOSUPPORT	O
;	O
}	O
switch	O
(	O
sock_type	int
)	O
{	O
case	O
SOCK_STREAM	int
:	O
pipe_class	pointer
=	O
stream_pipe_class	O
;	O
break	O
;	O
case	O
SOCK_DGRAM	int
:	O
pipe_class	pointer
=	O
dgram_pipe_class	O
;	O
break	O
;	O
case	O
SOCK_SEQPACKET	int
:	O
pipe_class	pointer
=	O
seqpack_pipe_class	O
;	O
break	O
;	O
default	O
:	O
return	O
EPROTOTYPE	O
;	O
}	O
err	O
=	O
sock_create	function
(	O
pipe_class	pointer
,	O
mode	int
,	O
&	O
sock	pointer
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
err	O
=	O
sock_create_port	function
(	O
sock	pointer
,	O
port	pointer
)	O
;	O
if	O
(	O
err	O
)	O
sock_free	function
(	O
sock	pointer
)	O
;	O
else	O
*	O
port_type	pointer
=	O
MACH_MSG_TYPE_MAKE_SEND	O
;	O
}	O
return	O
err	O
;	O
}	O
error_t	O
S_socket_create_address	function
(	O
mach_port_t	O
pf	int
,	O
int	O
sockaddr_type	int
,	O
char	O
*	O
data	pointer
,	O
size_t	long
data_len	long
,	O
mach_port_t	O
*	O
addr_port	pointer
,	O
mach_msg_type_name_t	O
*	O
addr_port_type	pointer
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_socket_fabricate_address	function
(	O
mach_port_t	O
pf	int
,	O
int	O
sockaddr_type	int
,	O
mach_port_t	O
*	O
addr_port	pointer
,	O
mach_msg_type_name_t	O
*	O
addr_port_type	pointer
)	O
{	O
error_t	O
err	O
;	O
struct	O
addr	pointer
*	O
addr	pointer
;	O
if	O
(	O
sockaddr_type	int
!=	O
AF_LOCAL	O
)	O
return	O
EAFNOSUPPORT	O
;	O
err	O
=	O
addr_create	function
(	O
&	O
addr	pointer
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
*	O
addr_port	pointer
=	O
ports_get_right	function
(	O
addr	pointer
)	O
;	O
*	O
addr_port_type	pointer
=	O
MACH_MSG_TYPE_MAKE_SEND	O
;	O
ports_port_deref	function
(	O
addr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
S_socket_whatis_address	function
(	O
struct	O
addr	pointer
*	O
addr	pointer
,	O
int	O
*	O
sockaddr_type	int
,	O
char	O
*	O
*	O
sockaddr	struct
,	O
size_t	long
*	O
sockaddr_len	pointer
)	O
{	O
socklen_t	int
addr_len	int
=	O
(	O
offsetof	O
(	O
struct	O
sockaddr	struct
,	O
sa_data	array
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
addr	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
*	O
sockaddr_type	int
=	O
AF_LOCAL	O
;	O
if	O
(	O
*	O
sockaddr_len	pointer
<	O
addr_len	int
)	O
*	O
sockaddr	struct
=	O
mmap	function
(	O
0	int
,	O
addr_len	int
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
(	O
(	O
struct	O
sockaddr	struct
*	O
)	O
*	O
sockaddr	struct
)	O
->	O
sa_len	O
=	O
addr_len	int
;	O
(	O
(	O
struct	O
sockaddr	struct
*	O
)	O
*	O
sockaddr	struct
)	O
->	O
sa_family	short
=	O
*	O
sockaddr_type	int
;	O
(	O
(	O
struct	O
sockaddr	struct
*	O
)	O
*	O
sockaddr	struct
)	O
->	O
sa_data	array
[	O
0	int
]	O
=	O
0	int
;	O
*	O
sockaddr_len	pointer
=	O
addr_len	int
;	O
return	O
0	int
;	O
}	O
