enum	O
MHD_Bool	enum
MHD_daemon_get_information_sz	function
(	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
,	O
enum	O
MHD_DaemonInformationType	enum
info_type	enum
,	O
union	O
MHD_DaemonInformation	union
*	O
return_value	pointer
,	O
size_t	long
return_value_size	long
)	O
{	O
switch	O
(	O
info_type	enum
)	O
{	O
case	O
MHD_DAEMON_INFORMATION_LISTEN_SOCKET	int
:	O
CHECK_SIZE	O
(	O
MHD_socket	int
)	O
;	O
return_value	pointer
->	O
listen_socket	int
=	O
daemon	function
->	O
listen_socket	int
;	O
return	O
MHD_YES	int
;	O
case	O
MHD_DAEMON_INFORMATION_EPOLL_FD	int
:	O
CHECK_SIZE	O
(	O
int	O
)	O
;	O
return_value	pointer
->	O
epoll_fd	int
=	O
daemon	function
->	O
epoll_fd	int
;	O
return	O
MHD_YES	int
;	O
case	O
MHD_DAEMON_INFORMATION_CURRENT_CONNECTIONS	int
:	O
CHECK_SIZE	O
(	O
unsigned	O
int	O
)	O
;	O
if	O
(	O
MHD_TM_EXTERNAL_EVENT_LOOP	int
==	O
daemon	function
->	O
threading_mode	enum
)	O
{	O
MHD_connection_cleanup_	function
(	O
daemon	function
)	O
;	O
return_value	pointer
->	O
num_connections	int
=	O
daemon	function
->	O
connections	int
;	O
}	O
else	O
if	O
(	O
daemon	function
->	O
worker_pool	pointer
)	O
{	O
unsigned	O
int	O
i	int
;	O
return_value	pointer
->	O
num_connections	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
daemon	function
->	O
worker_pool_size	int
;	O
i	int
++	O
)	O
{	O
return_value	pointer
->	O
num_connections	int
+=	O
daemon	function
->	O
worker_pool	pointer
[	O
i	int
]	O
.	O
connections	int
;	O
}	O
}	O
else	O
return_value	pointer
->	O
num_connections	int
=	O
daemon	function
->	O
connections	int
;	O
return	O
MHD_YES	int
;	O
case	O
MHD_DAEMON_INFORMATION_BIND_PORT	int
:	O
CHECK_SIZE	O
(	O
uint16_t	short
)	O
;	O
return_value	pointer
->	O
port	short
=	O
daemon	function
->	O
listen_port	short
;	O
return	O
MHD_YES	int
;	O
default	O
:	O
return	O
MHD_NO	int
;	O
}	O
}	O
