struct	O
nprefix	struct
{	O
char	O
*	O
prefix	pointer
;	O
size_t	long
pfxlen	long
;	O
int	O
lim	int
;	O
size_t	long
skip	long
;	O
size_t	long
count	long
;	O
size_t	long
n	long
;	O
char	O
*	O
last_match_str	pointer
;	O
size_t	long
last_match_len	long
;	O
}	O
;	O
static	O
int	O
nprefix_sel	function
(	O
int	O
cmd	int
,	O
dico_key_t	pointer
key	pointer
,	O
const	O
char	O
*	O
dict_word	pointer
)	O
{	O
char	O
const	O
*	O
key_word	pointer
=	O
key	pointer
->	O
word	pointer
;	O
struct	O
nprefix	struct
*	O
np	pointer
;	O
size_t	long
wordlen	long
;	O
switch	O
(	O
cmd	int
)	O
{	O
case	O
DICO_SELECT_BEGIN	int
:	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
skip	long
,	O
count	long
;	O
np	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
np	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
np	pointer
)	O
{	O
DICO_LOG_MEMERR	O
(	O
)	O
;	O
return	O
1	int
;	O
}	O
np	pointer
->	O
prefix	pointer
=	O
(	O
char	O
*	O
)	O
key_word	pointer
;	O
np	pointer
->	O
lim	int
=	O
0	int
;	O
skip	long
=	O
strtoul	function
(	O
key_word	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'#'	O
)	O
{	O
count	long
=	O
strtoul	function
(	O
p	pointer
+	O
1	int
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'#'	O
)	O
{	O
np	pointer
->	O
prefix	pointer
=	O
p	pointer
+	O
1	int
;	O
np	pointer
->	O
skip	long
=	O
skip	long
;	O
np	pointer
->	O
count	long
=	O
count	long
;	O
np	pointer
->	O
lim	int
=	O
1	int
;	O
}	O
}	O
np	pointer
->	O
pfxlen	long
=	O
utf8_strlen	function
(	O
np	pointer
->	O
prefix	pointer
)	O
;	O
key	pointer
->	O
call_data	pointer
=	O
np	pointer
;	O
break	O
;	O
}	O
case	O
DICO_SELECT_RUN	int
:	O
np	pointer
=	O
key	pointer
->	O
call_data	pointer
;	O
if	O
(	O
np	pointer
->	O
last_match_str	pointer
&&	O
utf8_strcasecmp	function
(	O
(	O
char	O
*	O
)	O
dict_word	pointer
,	O
np	pointer
->	O
last_match_str	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
np	pointer
->	O
lim	int
&&	O
np	pointer
->	O
n	long
>	O
np	pointer
->	O
skip	long
+	O
np	pointer
->	O
count	long
)	O
return	O
0	int
;	O
wordlen	long
=	O
utf8_strlen	function
(	O
dict_word	pointer
)	O
;	O
if	O
(	O
wordlen	long
>=	O
np	pointer
->	O
pfxlen	long
&&	O
utf8_strncasecmp	function
(	O
(	O
char	O
*	O
)	O
dict_word	pointer
,	O
np	pointer
->	O
prefix	pointer
,	O
np	pointer
->	O
pfxlen	long
)	O
==	O
0	int
)	O
{	O
size_t	long
s	pointer
=	O
strlen	function
(	O
dict_word	pointer
)	O
+	O
1	int
;	O
if	O
(	O
np	pointer
->	O
last_match_len	long
<	O
s	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
realloc	function
(	O
np	pointer
->	O
last_match_str	pointer
,	O
s	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
0	int
;	O
np	pointer
->	O
last_match_str	pointer
=	O
p	pointer
;	O
np	pointer
->	O
last_match_len	long
=	O
s	pointer
;	O
}	O
strcpy	function
(	O
np	pointer
->	O
last_match_str	pointer
,	O
dict_word	pointer
)	O
;	O
if	O
(	O
!	O
np	pointer
->	O
lim	int
)	O
return	O
1	int
;	O
np	pointer
->	O
n	long
++	O
;	O
return	O
np	pointer
->	O
n	long
>	O
np	pointer
->	O
skip	long
&&	O
np	pointer
->	O
n	long
<=	O
np	pointer
->	O
skip	long
+	O
np	pointer
->	O
count	long
;	O
}	O
break	O
;	O
case	O
DICO_SELECT_END	int
:	O
np	pointer
=	O
key	pointer
->	O
call_data	pointer
;	O
free	function
(	O
np	pointer
->	O
last_match_str	pointer
)	O
;	O
free	function
(	O
np	pointer
)	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
dico_strategy	struct
nprefix_strat	array
[	O
]	O
=	O
{	O
{	O
"nprefix"	pointer
,	O
"Match prefixes, [skip#count#]prefix"	pointer
,	O
nprefix_sel	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
nprefix_init	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
dico_strategy_add	function
(	O
nprefix_strat	array
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
dico_database_module	struct
DICO_EXPORT	O
(	O
nprefix	struct
,	O
module	O
)	O
=	O
{	O
DICO_MODULE_VERSION	int
,	O
DICO_CAPA_NODB	int
,	O
nprefix_init	function
,	O
}	O
;	O
