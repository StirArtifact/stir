static	O
const	O
char	O
*	O
abbreviations_de	array
[	O
]	O
=	O
{	O
"Dr"	pointer
,	O
"bzw"	pointer
,	O
"etc"	pointer
,	O
"sog"	pointer
,	O
"usw"	pointer
,	O
(	O
const	O
char	O
*	O
)	O
0	int
}	O
;	O
static	O
const	O
char	O
*	O
abbreviations_en	array
[	O
]	O
=	O
{	O
"ch"	pointer
,	O
"Ch"	pointer
,	O
"ckts"	pointer
,	O
"dB"	pointer
,	O
"Dept"	pointer
,	O
"dept"	pointer
,	O
"Depts"	pointer
,	O
"depts"	pointer
,	O
"Dr"	pointer
,	O
"Drs"	pointer
,	O
"Eq"	pointer
,	O
"eq"	pointer
,	O
"etc"	pointer
,	O
"et al"	pointer
,	O
"Fig"	pointer
,	O
"fig"	pointer
,	O
"Figs"	pointer
,	O
"figs"	pointer
,	O
"ft"	pointer
,	O
"0 in"	pointer
,	O
"1 in"	pointer
,	O
"2 in"	pointer
,	O
"3 in"	pointer
,	O
"4 in"	pointer
,	O
"5 in"	pointer
,	O
"6 in"	pointer
,	O
"7 in"	pointer
,	O
"8 in"	pointer
,	O
"9 in"	pointer
,	O
"Inc"	pointer
,	O
"Jr"	pointer
,	O
"jr"	pointer
,	O
"mi"	pointer
,	O
"Mr"	pointer
,	O
"Mrs"	pointer
,	O
"Ms"	pointer
,	O
"No"	pointer
,	O
"no"	pointer
,	O
"Nos"	pointer
,	O
"nos"	pointer
,	O
"Ph"	pointer
,	O
"Ref"	pointer
,	O
"ref"	pointer
,	O
"Refs"	pointer
,	O
"refs"	pointer
,	O
"St"	pointer
,	O
"vs"	pointer
,	O
"yr"	pointer
,	O
(	O
const	O
char	O
*	O
)	O
0	int
}	O
;	O
static	O
const	O
char	O
*	O
abbreviations_nl	array
[	O
]	O
=	O
{	O
"as"	pointer
,	O
"aub"	pointer
,	O
"bijv"	pointer
,	O
"bv"	pointer
,	O
"ca"	pointer
,	O
"dd"	pointer
,	O
"dr"	pointer
,	O
"drs"	pointer
,	O
"ed"	pointer
,	O
"jl"	pointer
,	O
"maw"	pointer
,	O
"muv"	pointer
,	O
"oa"	pointer
,	O
"tav"	pointer
,	O
"tzt"	pointer
,	O
"zg"	pointer
,	O
"zgn"	pointer
,	O
"zoz"	pointer
,	O
"zsm"	pointer
,	O
(	O
const	O
char	O
*	O
)	O
0	int
}	O
;	O
static	O
const	O
char	O
*	O
abbreviations_none	array
[	O
]	O
=	O
{	O
(	O
const	O
char	O
*	O
)	O
0	int
}	O
;	O
static	O
const	O
char	O
*	O
*	O
abbreviations	pointer
;	O
static	O
int	O
endingInAbbrev	function
(	O
const	O
char	O
*	O
s	pointer
,	O
size_t	long
length	long
,	O
const	O
char	O
*	O
lang	pointer
)	O
{	O
const	O
char	O
*	O
*	O
abbrev	pointer
=	O
abbreviations	pointer
;	O
size_t	long
aLength	long
;	O
if	O
(	O
!	O
isalpha	function
(	O
s	pointer
[	O
length	long
-	O
1	int
]	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
endingInPossesiveS	function
(	O
s	pointer
,	O
length	long
)	O
)	O
return	O
0	int
;	O
while	O
(	O
*	O
abbrev	pointer
!=	O
(	O
const	O
char	O
*	O
)	O
0	int
)	O
{	O
if	O
(	O
(	O
aLength	long
=	O
strlen	function
(	O
*	O
abbrev	pointer
)	O
)	O
<	O
length	long
)	O
{	O
if	O
(	O
!	O
isalpha	function
(	O
s	pointer
[	O
length	long
-	O
2	int
]	O
)	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
isalpha	function
(	O
s	pointer
[	O
length	long
-	O
aLength	long
-	O
1	int
]	O
)	O
&&	O
strncmp	function
(	O
s	pointer
+	O
length	long
-	O
aLength	long
,	O
*	O
abbrev	pointer
,	O
aLength	long
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
length	long
==	O
1	int
)	O
return	O
1	int
;	O
if	O
(	O
aLength	long
==	O
length	long
&&	O
strncmp	function
(	O
s	pointer
,	O
*	O
abbrev	pointer
,	O
aLength	long
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
++	O
abbrev	pointer
;	O
}	O
return	O
0	int
;	O
}	O
int	O
endingInPossesiveS	function
(	O
const	O
char	O
*	O
s	pointer
,	O
size_t	long
length	long
)	O
{	O
return	O
(	O
abbreviations	pointer
==	O
abbreviations_en	array
&&	O
length	long
>=	O
3	int
&&	O
strncmp	function
(	O
s	pointer
+	O
length	long
-	O
2	int
,	O
"\'s"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
;	O
}	O
void	O
sentence	function
(	O
const	O
char	O
*	O
cmd	pointer
,	O
FILE	struct
*	O
in	pointer
,	O
const	O
char	O
*	O
file	pointer
,	O
void	O
(	O
*	O
process	pointer
)	O
(	O
const	O
char	O
*	O
,	O
size_t	long
,	O
const	O
char	O
*	O
,	O
int	O
)	O
,	O
const	O
char	O
*	O
lang	pointer
)	O
{	O
int	O
voc	int
,	O
oc	int
,	O
c	int
;	O
char	O
*	O
sent	pointer
=	O
malloc	function
(	O
128	int
)	O
;	O
size_t	long
length	long
=	O
0	int
,	O
capacity	long
=	O
128	int
;	O
int	O
inSentence	int
=	O
0	int
;	O
int	O
inWhiteSpace	int
=	O
0	int
;	O
int	O
inParagraph	int
=	O
0	int
;	O
int	O
ellipsis	int
=	O
0	int
;	O
int	O
line	int
=	O
1	int
,	O
beginLine	int
=	O
1	int
;	O
int	O
err	int
;	O
regex_t	struct
hashLine	struct
;	O
char	O
filebuf	array
[	O
_POSIX_PATH_MAX	int
+	O
1	int
]	O
;	O
if	O
(	O
strncmp	function
(	O
lang	pointer
,	O
"en"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
abbreviations	pointer
=	O
abbreviations_en	array
;	O
else	O
if	O
(	O
strncmp	function
(	O
lang	pointer
,	O
"C"	pointer
,	O
1	int
)	O
==	O
0	int
)	O
abbreviations	pointer
=	O
abbreviations_en	array
;	O
else	O
if	O
(	O
strncmp	function
(	O
lang	pointer
,	O
"de"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
abbreviations	pointer
=	O
abbreviations_de	array
;	O
else	O
if	O
(	O
strncmp	function
(	O
lang	pointer
,	O
"nl"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
abbreviations	pointer
=	O
abbreviations_nl	array
;	O
else	O
abbreviations	pointer
=	O
abbreviations_none	array
;	O
if	O
(	O
(	O
err	int
=	O
regcomp	function
(	O
&	O
hashLine	struct
,	O
"^[ \t]*line[ \t]*\\([0-9][0-9]*\\)[ \t]*\"\\([^\"]*\\)\""	pointer
,	O
0	int
)	O
)	O
)	O
{	O
char	O
buf	array
[	O
256	int
]	O
;	O
size_t	long
len	long
=	O
regerror	function
(	O
err	int
,	O
&	O
hashLine	struct
,	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
-	O
1	int
)	O
;	O
buf	array
[	O
len	long
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: internal error, compiling a regular expression failed (%s).\n"	pointer
)	O
,	O
cmd	pointer
,	O
buf	array
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
voc	int
=	O
'\n'	O
;	O
c	int
=	O
getc	function
(	O
in	pointer
)	O
;	O
while	O
(	O
(	O
oc	int
=	O
c	int
)	O
!=	O
EOF	O
)	O
{	O
c	int
=	O
getc	function
(	O
in	pointer
)	O
;	O
if	O
(	O
oc	int
==	O
'\n'	O
)	O
++	O
line	int
;	O
if	O
(	O
voc	int
==	O
'\n'	O
&&	O
oc	int
==	O
'#'	O
)	O
{	O
char	O
buf	array
[	O
_POSIX_PATH_MAX	int
+	O
20	int
]	O
;	O
regmatch_t	struct
found	array
[	O
3	int
]	O
;	O
buf	array
[	O
0	int
]	O
=	O
c	int
;	O
buf	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
(	O
void	O
)	O
fgets	function
(	O
buf	array
+	O
1	int
,	O
sizeof	O
(	O
buf	array
)	O
-	O
1	int
,	O
in	pointer
)	O
;	O
if	O
(	O
regexec	function
(	O
&	O
hashLine	struct
,	O
buf	array
,	O
3	int
,	O
found	array
,	O
0	int
)	O
==	O
0	int
)	O
{	O
size_t	long
len	long
;	O
line	int
=	O
strtol	function
(	O
buf	array
+	O
found	array
[	O
1	int
]	O
.	O
rm_so	int
,	O
(	O
char	O
*	O
*	O
)	O
0	int
,	O
10	int
)	O
-	O
1	int
;	O
len	long
=	O
found	array
[	O
2	int
]	O
.	O
rm_eo	int
-	O
found	array
[	O
2	int
]	O
.	O
rm_so	int
;	O
if	O
(	O
len	long
>	O
_POSIX_PATH_MAX	int
)	O
len	long
=	O
_POSIX_PATH_MAX	int
;	O
strncpy	function
(	O
filebuf	array
,	O
buf	array
+	O
found	array
[	O
2	int
]	O
.	O
rm_so	int
,	O
len	long
)	O
;	O
filebuf	array
[	O
len	long
]	O
=	O
'\0'	O
;	O
file	pointer
=	O
filebuf	array
;	O
}	O
c	int
=	O
'\n'	O
;	O
continue	O
;	O
}	O
if	O
(	O
length	long
)	O
{	O
if	O
(	O
length	long
>=	O
(	O
capacity	long
-	O
1	int
)	O
&&	O
(	O
sent	pointer
=	O
realloc	function
(	O
sent	pointer
,	O
capacity	long
*=	O
2	int
)	O
)	O
==	O
(	O
char	O
*	O
)	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: increasing sentence buffer failed: %s\n"	pointer
)	O
,	O
cmd	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
if	O
(	O
isspace	function
(	O
oc	int
)	O
)	O
{	O
if	O
(	O
!	O
inWhiteSpace	int
)	O
{	O
sent	pointer
[	O
length	long
++	O
]	O
=	O
' '	O
;	O
inWhiteSpace	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
sent	pointer
[	O
length	long
++	O
]	O
=	O
oc	int
;	O
if	O
(	O
isalpha	function
(	O
oc	int
)	O
)	O
inSentence	int
=	O
1	int
;	O
if	O
(	O
(	O
length	long
==	O
3	int
&&	O
strncmp	function
(	O
sent	pointer
+	O
length	long
-	O
3	int
,	O
"..."	pointer
,	O
3	int
)	O
==	O
0	int
&&	O
(	O
c	int
==	O
EOF	O
||	O
isspace	function
(	O
c	int
)	O
)	O
)	O
||	O
(	O
length	long
>=	O
4	int
&&	O
strncmp	function
(	O
sent	pointer
+	O
length	long
-	O
4	int
,	O
" ..."	pointer
,	O
4	int
)	O
==	O
0	int
&&	O
(	O
c	int
==	O
EOF	O
||	O
isspace	function
(	O
c	int
)	O
)	O
)	O
)	O
{	O
inWhiteSpace	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
length	long
>=	O
4	int
&&	O
!	O
isspace	function
(	O
sent	pointer
[	O
length	long
-	O
4	int
]	O
)	O
&&	O
strncmp	function
(	O
sent	pointer
+	O
length	long
-	O
3	int
,	O
"..."	pointer
,	O
3	int
)	O
==	O
0	int
&&	O
(	O
c	int
==	O
EOF	O
||	O
isspace	function
(	O
c	int
)	O
)	O
)	O
{	O
char	O
foo	char
;	O
foo	char
=	O
sent	pointer
[	O
length	long
-	O
3	int
]	O
;	O
sent	pointer
[	O
length	long
-	O
3	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
inSentence	int
)	O
process	pointer
(	O
sent	pointer
,	O
length	long
-	O
3	int
,	O
file	pointer
,	O
beginLine	int
)	O
;	O
sent	pointer
[	O
length	long
-	O
3	int
]	O
=	O
foo	char
;	O
memmove	function
(	O
sent	pointer
,	O
sent	pointer
+	O
length	long
-	O
3	int
,	O
3	int
)	O
;	O
length	long
=	O
3	int
;	O
inParagraph	int
=	O
0	int
;	O
inWhiteSpace	int
=	O
0	int
;	O
beginLine	int
=	O
line	int
;	O
inSentence	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
length	long
>=	O
4	int
&&	O
strncmp	function
(	O
sent	pointer
+	O
length	long
-	O
4	int
,	O
"..."	pointer
,	O
3	int
)	O
==	O
0	int
&&	O
(	O
c	int
==	O
EOF	O
||	O
isspace	function
(	O
c	int
)	O
)	O
)	O
{	O
if	O
(	O
inWhiteSpace	int
)	O
--	O
length	long
;	O
sent	pointer
[	O
length	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
inSentence	int
)	O
process	pointer
(	O
sent	pointer
,	O
length	long
,	O
file	pointer
,	O
beginLine	int
)	O
;	O
length	long
=	O
0	int
;	O
inWhiteSpace	int
=	O
0	int
;	O
inSentence	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
(	O
oc	int
==	O
'.'	O
||	O
oc	int
==	O
':'	O
||	O
oc	int
==	O
'!'	O
||	O
oc	int
==	O
'?'	O
)	O
&&	O
(	O
c	int
==	O
EOF	O
||	O
isspace	function
(	O
c	int
)	O
||	O
c	int
==	O
'"'	O
)	O
&&	O
(	O
!	O
isdigit	function
(	O
voc	int
)	O
||	O
oc	int
!=	O
'.'	O
||	O
!	O
isdigit	function
(	O
c	int
)	O
)	O
&&	O
(	O
oc	int
!=	O
'.'	O
||	O
!	O
endingInAbbrev	function
(	O
sent	pointer
,	O
length	long
,	O
lang	pointer
)	O
)	O
)	O
{	O
if	O
(	O
inWhiteSpace	int
)	O
--	O
length	long
;	O
sent	pointer
[	O
length	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
inSentence	int
)	O
process	pointer
(	O
sent	pointer
,	O
length	long
,	O
file	pointer
,	O
beginLine	int
)	O
;	O
length	long
=	O
0	int
;	O
inWhiteSpace	int
=	O
0	int
;	O
inSentence	int
=	O
0	int
;	O
}	O
else	O
{	O
inWhiteSpace	int
=	O
0	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
isupper	function
(	O
oc	int
)	O
)	O
{	O
inParagraph	int
=	O
0	int
;	O
sent	pointer
[	O
length	long
++	O
]	O
=	O
oc	int
;	O
inWhiteSpace	int
=	O
0	int
;	O
beginLine	int
=	O
line	int
;	O
inSentence	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
inParagraph	int
&&	O
oc	int
==	O
'\n'	O
&&	O
c	int
==	O
'\n'	O
)	O
{	O
process	pointer
(	O
""	pointer
,	O
0	int
,	O
file	pointer
,	O
line	int
)	O
;	O
inParagraph	int
=	O
1	int
;	O
}	O
voc	int
=	O
oc	int
;	O
}	O
if	O
(	O
!	O
inParagraph	int
)	O
process	pointer
(	O
""	pointer
,	O
0	int
,	O
file	pointer
,	O
line	int
)	O
;	O
regfree	function
(	O
&	O
hashLine	struct
)	O
;	O
}	O
