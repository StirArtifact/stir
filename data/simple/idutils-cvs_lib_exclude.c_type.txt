verify	O
(	O
(	O
(	O
EXCLUDE_ANCHORED	O
|	O
EXCLUDE_INCLUDE	O
|	O
EXCLUDE_WILDCARDS	O
)	O
&	O
(	O
FNM_PATHNAME	O
|	O
FNM_NOESCAPE	O
|	O
FNM_PERIOD	O
|	O
FNM_LEADING_DIR	O
|	O
FNM_CASEFOLD	O
)	O
)	O
==	O
0	int
)	O
;	O
struct	O
patopts	struct
{	O
char	O
const	O
*	O
pattern	pointer
;	O
int	O
options	int
;	O
}	O
;	O
struct	O
exclude	struct
{	O
struct	O
patopts	struct
*	O
exclude	struct
;	O
size_t	long
exclude_alloc	long
;	O
size_t	long
exclude_count	long
;	O
}	O
;	O
struct	O
exclude	struct
*	O
new_exclude	function
(	O
void	O
)	O
{	O
return	O
xzalloc	function
(	O
sizeof	O
*	O
new_exclude	function
(	O
)	O
)	O
;	O
}	O
void	O
free_exclude	function
(	O
struct	O
exclude	struct
*	O
ex	pointer
)	O
{	O
free	function
(	O
ex	pointer
->	O
exclude	struct
)	O
;	O
free	function
(	O
ex	pointer
)	O
;	O
}	O
static	O
int	O
fnmatch_no_wildcards	function
(	O
char	O
const	O
*	O
pattern	pointer
,	O
char	O
const	O
*	O
f	pointer
,	O
int	O
options	int
)	O
{	O
if	O
(	O
!	O
(	O
options	int
&	O
FNM_LEADING_DIR	O
)	O
)	O
return	O
(	O
(	O
options	int
&	O
FNM_CASEFOLD	O
)	O
?	O
strcasecmp	O
(	O
pattern	pointer
,	O
f	pointer
)	O
:	O
strcmp	function
(	O
pattern	pointer
,	O
f	pointer
)	O
)	O
;	O
else	O
{	O
size_t	long
patlen	long
=	O
strlen	function
(	O
pattern	pointer
)	O
;	O
int	O
r	int
=	O
(	O
(	O
options	int
&	O
FNM_CASEFOLD	O
)	O
?	O
strncasecmp	function
(	O
pattern	pointer
,	O
f	pointer
,	O
patlen	long
)	O
:	O
strncmp	function
(	O
pattern	pointer
,	O
f	pointer
,	O
patlen	long
)	O
)	O
;	O
if	O
(	O
!	O
r	int
)	O
{	O
r	int
=	O
f	pointer
[	O
patlen	long
]	O
;	O
if	O
(	O
r	int
==	O
'/'	O
)	O
r	int
=	O
0	int
;	O
}	O
return	O
r	int
;	O
}	O
}	O
bool	bool
exclude_fnmatch	function
(	O
char	O
const	O
*	O
pattern	pointer
,	O
char	O
const	O
*	O
f	pointer
,	O
int	O
options	int
)	O
{	O
int	O
(	O
*	O
matcher	pointer
)	O
(	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
,	O
int	O
)	O
=	O
(	O
options	int
&	O
EXCLUDE_WILDCARDS	O
?	O
fnmatch	function
:	O
fnmatch_no_wildcards	function
)	O
;	O
bool	bool
matched	bool
=	O
(	O
(	O
*	O
matcher	pointer
)	O
(	O
pattern	pointer
,	O
f	pointer
,	O
options	int
)	O
==	O
0	int
)	O
;	O
char	O
const	O
*	O
p	pointer
;	O
if	O
(	O
!	O
(	O
options	int
&	O
EXCLUDE_ANCHORED	O
)	O
)	O
for	O
(	O
p	pointer
=	O
f	pointer
;	O
*	O
p	pointer
&&	O
!	O
matched	bool
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
p	pointer
==	O
'/'	O
&&	O
p	pointer
[	O
1	int
]	O
!=	O
'/'	O
)	O
matched	bool
=	O
(	O
(	O
*	O
matcher	pointer
)	O
(	O
pattern	pointer
,	O
p	pointer
+	O
1	int
,	O
options	int
)	O
==	O
0	int
)	O
;	O
return	O
matched	bool
;	O
}	O
bool	bool
excluded_file_name	function
(	O
struct	O
exclude	struct
const	O
*	O
ex	pointer
,	O
char	O
const	O
*	O
f	pointer
)	O
{	O
size_t	long
exclude_count	long
=	O
ex	pointer
->	O
exclude_count	long
;	O
if	O
(	O
exclude_count	long
==	O
0	int
)	O
return	O
false	int
;	O
else	O
{	O
struct	O
patopts	struct
const	O
*	O
exclude	struct
=	O
ex	pointer
->	O
exclude	struct
;	O
size_t	long
i	long
;	O
bool	bool
excluded	bool
=	O
!	O
!	O
(	O
exclude	struct
[	O
0	int
]	O
.	O
options	int
&	O
EXCLUDE_INCLUDE	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
exclude_count	long
;	O
i	long
++	O
)	O
{	O
char	O
const	O
*	O
pattern	pointer
=	O
exclude	struct
[	O
i	long
]	O
.	O
pattern	pointer
;	O
int	O
options	int
=	O
exclude	struct
[	O
i	long
]	O
.	O
options	int
;	O
if	O
(	O
excluded	bool
==	O
!	O
!	O
(	O
options	int
&	O
EXCLUDE_INCLUDE	O
)	O
)	O
excluded	bool
^=	O
exclude_fnmatch	function
(	O
pattern	pointer
,	O
f	pointer
,	O
options	int
)	O
;	O
}	O
return	O
excluded	bool
;	O
}	O
}	O
void	O
add_exclude	function
(	O
struct	O
exclude	struct
*	O
ex	pointer
,	O
char	O
const	O
*	O
pattern	pointer
,	O
int	O
options	int
)	O
{	O
struct	O
patopts	struct
*	O
patopts	struct
;	O
if	O
(	O
ex	pointer
->	O
exclude_count	long
==	O
ex	pointer
->	O
exclude_alloc	long
)	O
ex	pointer
->	O
exclude	struct
=	O
x2nrealloc	function
(	O
ex	pointer
->	O
exclude	struct
,	O
&	O
ex	pointer
->	O
exclude_alloc	long
,	O
sizeof	O
*	O
ex	pointer
->	O
exclude	struct
)	O
;	O
patopts	struct
=	O
&	O
ex	pointer
->	O
exclude	struct
[	O
ex	pointer
->	O
exclude_count	long
++	O
]	O
;	O
patopts	struct
->	O
pattern	pointer
=	O
pattern	pointer
;	O
patopts	struct
->	O
options	int
=	O
options	int
;	O
}	O
int	O
add_exclude_file	function
(	O
void	O
(	O
*	O
add_func	pointer
)	O
(	O
struct	O
exclude	struct
*	O
,	O
char	O
const	O
*	O
,	O
int	O
)	O
,	O
struct	O
exclude	struct
*	O
ex	pointer
,	O
char	O
const	O
*	O
file_name	pointer
,	O
int	O
options	int
,	O
char	O
line_end	char
)	O
{	O
bool	bool
use_stdin	bool
=	O
file_name	pointer
[	O
0	int
]	O
==	O
'-'	O
&&	O
!	O
file_name	pointer
[	O
1	int
]	O
;	O
FILE	struct
*	O
in	pointer
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
char	O
*	O
p	pointer
;	O
char	O
const	O
*	O
pattern	pointer
;	O
char	O
const	O
*	O
lim	pointer
;	O
size_t	long
buf_alloc	long
=	O
0	int
;	O
size_t	long
buf_count	long
=	O
0	int
;	O
int	O
c	int
;	O
int	O
e	int
=	O
0	int
;	O
if	O
(	O
use_stdin	bool
)	O
in	pointer
=	O
stdin	pointer
;	O
else	O
if	O
(	O
!	O
(	O
in	pointer
=	O
fopen	function
(	O
file_name	pointer
,	O
"r"	pointer
)	O
)	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
in	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
buf_count	long
==	O
buf_alloc	long
)	O
buf	pointer
=	O
x2realloc	function
(	O
buf	pointer
,	O
&	O
buf_alloc	long
)	O
;	O
buf	pointer
[	O
buf_count	long
++	O
]	O
=	O
c	int
;	O
}	O
if	O
(	O
ferror	function
(	O
in	pointer
)	O
)	O
e	int
=	O
errno	O
;	O
if	O
(	O
!	O
use_stdin	bool
&&	O
fclose	function
(	O
in	pointer
)	O
!=	O
0	int
)	O
e	int
=	O
errno	O
;	O
buf	pointer
=	O
xrealloc	function
(	O
buf	pointer
,	O
buf_count	long
+	O
1	int
)	O
;	O
buf	pointer
[	O
buf_count	long
]	O
=	O
line_end	char
;	O
lim	pointer
=	O
buf	pointer
+	O
buf_count	long
+	O
!	O
(	O
buf_count	long
==	O
0	int
||	O
buf	pointer
[	O
buf_count	long
-	O
1	int
]	O
==	O
line_end	char
)	O
;	O
pattern	pointer
=	O
buf	pointer
;	O
for	O
(	O
p	pointer
=	O
buf	pointer
;	O
p	pointer
<	O
lim	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
p	pointer
==	O
line_end	char
)	O
{	O
char	O
*	O
pattern_end	pointer
=	O
p	pointer
;	O
if	O
(	O
isspace	function
(	O
(	O
unsigned	O
char	O
)	O
line_end	char
)	O
)	O
{	O
for	O
(	O
;	O
;	O
pattern_end	pointer
--	O
)	O
if	O
(	O
pattern_end	pointer
==	O
pattern	pointer
)	O
goto	O
next_pattern	O
;	O
else	O
if	O
(	O
!	O
isspace	function
(	O
(	O
unsigned	O
char	O
)	O
pattern_end	pointer
[	O
-	O
1	int
]	O
)	O
)	O
break	O
;	O
}	O
*	O
pattern_end	pointer
=	O
'\0'	O
;	O
(	O
*	O
add_func	pointer
)	O
(	O
ex	pointer
,	O
pattern	pointer
,	O
options	int
)	O
;	O
next_pattern	O
:	O
pattern	pointer
=	O
p	pointer
+	O
1	int
;	O
}	O
errno	O
=	O
e	int
;	O
return	O
e	int
?	O
-	O
1	int
:	O
0	int
;	O
}	O
