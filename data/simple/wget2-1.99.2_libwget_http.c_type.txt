static	O
char	O
_abort_indicator	char
;	O
static	O
wget_vector	struct
*	O
http_proxies	pointer
,	O
*	O
https_proxies	pointer
,	O
*	O
no_proxies	pointer
;	O
static	O
wget_thread_mutex	pointer
proxy_mutex	pointer
,	O
hosts_mutex	pointer
;	O
static	O
bool	bool
initialized	bool
;	O
static	O
void	O
__attribute__	O
(	O
(	O
constructor	O
)	O
)	O
_wget_http_init	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
initialized	bool
)	O
{	O
wget_thread_mutex_init	function
(	O
&	O
proxy_mutex	pointer
)	O
;	O
wget_thread_mutex_init	function
(	O
&	O
hosts_mutex	pointer
)	O
;	O
initialized	bool
=	O
1	int
;	O
}	O
}	O
static	O
void	O
__attribute__	O
(	O
(	O
destructor	pointer
)	O
)	O
_wget_http_exit	function
(	O
void	O
)	O
{	O
if	O
(	O
initialized	bool
)	O
{	O
wget_thread_mutex_destroy	function
(	O
&	O
proxy_mutex	pointer
)	O
;	O
wget_thread_mutex_destroy	function
(	O
&	O
hosts_mutex	pointer
)	O
;	O
initialized	bool
=	O
0	int
;	O
}	O
}	O
void	O
wget_http_init	function
(	O
void	O
)	O
{	O
_wget_http_init	function
(	O
)	O
;	O
}	O
void	O
wget_http_exit	function
(	O
void	O
)	O
{	O
_wget_http_exit	function
(	O
)	O
;	O
}	O
static	O
wget_server_stats_callback	function
*	O
server_stats_callback	pointer
;	O
static	O
wget_http_body_callback	function
_body_callback	function
;	O
static	O
int	O
_body_callback	function
(	O
wget_http_response	struct
*	O
resp	pointer
,	O
void	O
*	O
user_data	pointer
WGET_GCC_UNUSED	O
,	O
const	O
char	O
*	O
data	pointer
,	O
size_t	long
length	long
)	O
{	O
if	O
(	O
!	O
resp	pointer
->	O
body	pointer
)	O
resp	pointer
->	O
body	pointer
=	O
wget_buffer_alloc	function
(	O
102400	int
)	O
;	O
wget_buffer_memcat	function
(	O
resp	pointer
->	O
body	pointer
,	O
data	pointer
,	O
length	long
)	O
;	O
return	O
0	int
;	O
}	O
wget_http_request	struct
*	O
wget_http_create_request	function
(	O
const	O
wget_iri	struct
*	O
iri	pointer
,	O
const	O
char	O
*	O
method	array
)	O
{	O
wget_http_request	struct
*	O
req	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_http_request	struct
)	O
)	O
;	O
if	O
(	O
!	O
req	pointer
)	O
return	O
NULL	O
;	O
wget_buffer_init	function
(	O
&	O
req	pointer
->	O
esc_resource	struct
,	O
req	pointer
->	O
esc_resource_buf	array
,	O
sizeof	O
(	O
req	pointer
->	O
esc_resource_buf	array
)	O
)	O
;	O
wget_buffer_init	function
(	O
&	O
req	pointer
->	O
esc_host	struct
,	O
req	pointer
->	O
esc_host_buf	array
,	O
sizeof	O
(	O
req	pointer
->	O
esc_host_buf	array
)	O
)	O
;	O
req	pointer
->	O
scheme	enum
=	O
iri	pointer
->	O
scheme	enum
;	O
wget_strscpy	function
(	O
req	pointer
->	O
method	array
,	O
method	array
,	O
sizeof	O
(	O
req	pointer
->	O
method	array
)	O
)	O
;	O
wget_iri_get_escaped_resource	function
(	O
iri	pointer
,	O
&	O
req	pointer
->	O
esc_resource	struct
)	O
;	O
wget_iri_get_escaped_host	function
(	O
iri	pointer
,	O
&	O
req	pointer
->	O
esc_host	struct
)	O
;	O
req	pointer
->	O
headers	pointer
=	O
wget_vector_create	function
(	O
8	int
,	O
NULL	O
)	O
;	O
wget_vector_set_destructor	function
(	O
req	pointer
->	O
headers	pointer
,	O
(	O
wget_vector_destructor	function
*	O
)	O
wget_http_free_param	function
)	O
;	O
wget_http_add_header	function
(	O
req	pointer
,	O
"Host"	pointer
,	O
req	pointer
->	O
esc_host	struct
.	O
data	pointer
)	O
;	O
wget_http_request_set_body_cb	function
(	O
req	pointer
,	O
_body_callback	function
,	O
NULL	O
)	O
;	O
return	O
req	pointer
;	O
}	O
void	O
wget_http_request_set_header_cb	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
wget_http_header_callback	function
*	O
callback	pointer
,	O
void	O
*	O
user_data	pointer
)	O
{	O
req	pointer
->	O
header_callback	pointer
=	O
callback	pointer
;	O
req	pointer
->	O
header_user_data	pointer
=	O
user_data	pointer
;	O
}	O
void	O
wget_http_request_set_body_cb	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
wget_http_body_callback	function
*	O
callback	pointer
,	O
void	O
*	O
user_data	pointer
)	O
{	O
req	pointer
->	O
body_callback	pointer
=	O
callback	pointer
;	O
req	pointer
->	O
body_user_data	pointer
=	O
user_data	pointer
;	O
}	O
void	O
wget_http_request_set_int	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
int	O
key	int
,	O
int	O
value	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
WGET_HTTP_RESPONSE_KEEPHEADER	int
:	O
req	pointer
->	O
response_keepheader	bool
=	O
!	O
!	O
value	pointer
;	O
break	O
;	O
default	O
:	O
error_printf	O
(	O
_	O
(	O
"%s: Unknown key %d (or value must not be an integer)\n"	pointer
)	O
,	O
__func__	O
,	O
key	int
)	O
;	O
}	O
}	O
int	O
wget_http_request_get_int	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
int	O
key	int
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
WGET_HTTP_RESPONSE_KEEPHEADER	int
:	O
return	O
req	pointer
->	O
response_keepheader	bool
;	O
default	O
:	O
error_printf	O
(	O
_	O
(	O
"%s: Unknown key %d (or value must not be an integer)\n"	pointer
)	O
,	O
__func__	O
,	O
key	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
void	O
wget_http_request_set_ptr	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
int	O
key	int
,	O
void	O
*	O
value	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
WGET_HTTP_USER_DATA	int
:	O
req	pointer
->	O
user_data	pointer
=	O
value	pointer
;	O
break	O
;	O
default	O
:	O
error_printf	O
(	O
_	O
(	O
"%s: Unknown key %d (or value must not be an integer)\n"	pointer
)	O
,	O
__func__	O
,	O
key	int
)	O
;	O
}	O
}	O
void	O
*	O
wget_http_request_get_ptr	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
int	O
key	int
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
WGET_HTTP_USER_DATA	int
:	O
return	O
req	pointer
->	O
user_data	pointer
;	O
default	O
:	O
error_printf	O
(	O
_	O
(	O
"%s: Unknown key %d (or value must not be an integer)\n"	pointer
)	O
,	O
__func__	O
,	O
key	int
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
void	O
wget_http_request_set_body	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
const	O
char	O
*	O
mimetype	pointer
,	O
char	O
*	O
body	pointer
,	O
size_t	long
length	long
)	O
{	O
if	O
(	O
mimetype	pointer
)	O
wget_http_add_header	function
(	O
req	pointer
,	O
"Content-Type"	pointer
,	O
mimetype	pointer
)	O
;	O
req	pointer
->	O
body	pointer
=	O
body	pointer
;	O
req	pointer
->	O
body_length	long
=	O
length	long
;	O
}	O
static	O
int	O
http_add_header	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
wget_http_header_param	struct
*	O
param	pointer
=	O
wget_malloc	function
(	O
sizeof	O
(	O
wget_http_header_param	struct
)	O
)	O
;	O
if	O
(	O
!	O
param	pointer
||	O
!	O
name	pointer
||	O
!	O
value	pointer
)	O
goto	O
err	enum
;	O
param	pointer
->	O
name	pointer
=	O
name	pointer
;	O
param	pointer
->	O
value	pointer
=	O
value	pointer
;	O
if	O
(	O
wget_vector_add	function
(	O
req	pointer
->	O
headers	pointer
,	O
param	pointer
)	O
>=	O
0	int
)	O
return	O
WGET_E_SUCCESS	int
;	O
xfree	O
(	O
param	pointer
)	O
;	O
err	enum
:	O
xfree	O
(	O
value	pointer
)	O
;	O
xfree	O
(	O
name	pointer
)	O
;	O
return	O
WGET_E_MEMORY	int
;	O
}	O
int	O
wget_http_add_header_vprintf	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
args	array
)	O
{	O
return	O
http_add_header	function
(	O
req	pointer
,	O
wget_strdup	function
(	O
name	pointer
)	O
,	O
wget_vaprintf	function
(	O
fmt	pointer
,	O
args	array
)	O
)	O
;	O
}	O
int	O
wget_http_add_header_printf	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
fmt	pointer
)	O
;	O
int	O
rc	int
=	O
wget_http_add_header_vprintf	function
(	O
req	pointer
,	O
name	pointer
,	O
fmt	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
wget_http_add_header	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
return	O
http_add_header	function
(	O
req	pointer
,	O
wget_strdup	function
(	O
name	pointer
)	O
,	O
wget_strdup	function
(	O
value	pointer
)	O
)	O
;	O
}	O
int	O
wget_http_add_header_param	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
wget_http_header_param	struct
*	O
param	pointer
)	O
{	O
return	O
http_add_header	function
(	O
req	pointer
,	O
wget_strdup	function
(	O
param	pointer
->	O
name	pointer
)	O
,	O
wget_strdup	function
(	O
param	pointer
->	O
value	pointer
)	O
)	O
;	O
}	O
void	O
wget_http_add_credentials	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
wget_http_challenge	struct
*	O
challenge	pointer
,	O
const	O
char	O
*	O
username	pointer
,	O
const	O
char	O
*	O
password	pointer
,	O
int	O
proxied	int
)	O
{	O
if	O
(	O
!	O
challenge	pointer
)	O
return	O
;	O
if	O
(	O
!	O
username	pointer
)	O
username	pointer
=	O
""	pointer
;	O
if	O
(	O
!	O
password	pointer
)	O
password	pointer
=	O
""	pointer
;	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
challenge	pointer
->	O
auth_scheme	pointer
,	O
"basic"	pointer
)	O
)	O
{	O
const	O
char	O
*	O
encoded	pointer
=	O
wget_base64_encode_printf_alloc	function
(	O
"%s:%s"	pointer
,	O
username	pointer
,	O
password	pointer
)	O
;	O
if	O
(	O
proxied	int
)	O
wget_http_add_header_printf	function
(	O
req	pointer
,	O
"Proxy-Authorization"	pointer
,	O
"Basic %s"	pointer
,	O
encoded	pointer
)	O
;	O
else	O
wget_http_add_header_printf	function
(	O
req	pointer
,	O
"Authorization"	pointer
,	O
"Basic %s"	pointer
,	O
encoded	pointer
)	O
;	O
xfree	O
(	O
encoded	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
challenge	pointer
->	O
auth_scheme	pointer
,	O
"digest"	pointer
)	O
)	O
{	O
const	O
char	O
*	O
realm	pointer
,	O
*	O
opaque	pointer
,	O
*	O
nonce	pointer
,	O
*	O
qop	pointer
,	O
*	O
algorithm	pointer
;	O
wget_buffer	struct
buf	pointer
;	O
int	O
hashtype	int
,	O
hashlen	int
;	O
if	O
(	O
!	O
wget_stringmap_get	function
(	O
challenge	pointer
->	O
params	pointer
,	O
"realm"	pointer
,	O
&	O
realm	pointer
)	O
)	O
realm	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
wget_stringmap_get	function
(	O
challenge	pointer
->	O
params	pointer
,	O
"opaque"	pointer
,	O
&	O
opaque	pointer
)	O
)	O
opaque	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
wget_stringmap_get	function
(	O
challenge	pointer
->	O
params	pointer
,	O
"nonce"	pointer
,	O
&	O
nonce	pointer
)	O
)	O
nonce	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
wget_stringmap_get	function
(	O
challenge	pointer
->	O
params	pointer
,	O
"qop"	pointer
,	O
&	O
qop	pointer
)	O
)	O
qop	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
wget_stringmap_get	function
(	O
challenge	pointer
->	O
params	pointer
,	O
"algorithm"	pointer
,	O
&	O
algorithm	pointer
)	O
)	O
algorithm	pointer
=	O
NULL	O
;	O
if	O
(	O
qop	pointer
&&	O
(	O
wget_strcasecmp_ascii	function
(	O
qop	pointer
,	O
"auth"	pointer
)	O
&&	O
wget_strcasecmp_ascii	function
(	O
qop	pointer
,	O
"auth-int"	pointer
)	O
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Unsupported quality of protection '%s'.\n"	pointer
)	O
,	O
qop	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
algorithm	pointer
,	O
"MD5"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
algorithm	pointer
,	O
"MD5-sess"	pointer
)	O
||	O
algorithm	pointer
==	O
NULL	O
)	O
{	O
hashtype	int
=	O
WGET_DIGTYPE_MD5	int
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
algorithm	pointer
,	O
"SHA-256"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
algorithm	pointer
,	O
"SHA-256-sess"	pointer
)	O
)	O
{	O
hashtype	int
=	O
WGET_DIGTYPE_SHA256	int
;	O
}	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Unsupported algorithm '%s'.\n"	pointer
)	O
,	O
algorithm	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
realm	pointer
||	O
!	O
nonce	pointer
)	O
return	O
;	O
hashlen	int
=	O
wget_hash_get_len	function
(	O
hashtype	int
)	O
;	O
char	O
a1buf	O
[	O
hashlen	int
*	O
2	int
+	O
1	int
]	O
,	O
a2buf	O
[	O
hashlen	int
*	O
2	int
+	O
1	int
]	O
;	O
char	O
response_digest	O
[	O
hashlen	int
*	O
2	int
+	O
1	int
]	O
,	O
cnonce	array
[	O
16	int
]	O
=	O
""	pointer
;	O
wget_hash_printf_hex	function
(	O
hashtype	int
,	O
a1buf	O
,	O
sizeof	O
(	O
a1buf	O
)	O
,	O
"%s:%s:%s"	pointer
,	O
username	pointer
,	O
realm	pointer
,	O
password	pointer
)	O
;	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
algorithm	pointer
,	O
"MD5-sess"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
algorithm	pointer
,	O
"SHA-256-sess"	pointer
)	O
)	O
{	O
wget_snprintf	function
(	O
cnonce	array
,	O
sizeof	O
(	O
cnonce	array
)	O
,	O
"%08x"	pointer
,	O
(	O
unsigned	O
)	O
wget_random	function
(	O
)	O
)	O
;	O
wget_hash_printf_hex	function
(	O
hashtype	int
,	O
a1buf	O
,	O
sizeof	O
(	O
a1buf	O
)	O
,	O
"%s:%s:%s"	pointer
,	O
a1buf	O
,	O
nonce	pointer
,	O
cnonce	array
)	O
;	O
}	O
wget_hash_printf_hex	function
(	O
hashtype	int
,	O
a2buf	O
,	O
sizeof	O
(	O
a2buf	O
)	O
,	O
"%s:/%s"	pointer
,	O
req	pointer
->	O
method	array
,	O
req	pointer
->	O
esc_resource	struct
.	O
data	pointer
)	O
;	O
if	O
(	O
!	O
qop	pointer
)	O
{	O
wget_hash_printf_hex	function
(	O
hashtype	int
,	O
response_digest	O
,	O
sizeof	O
(	O
response_digest	O
)	O
,	O
"%s:%s:%s"	pointer
,	O
a1buf	O
,	O
nonce	pointer
,	O
a2buf	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
*	O
cnonce	array
)	O
wget_snprintf	function
(	O
cnonce	array
,	O
sizeof	O
(	O
cnonce	array
)	O
,	O
"%08x"	pointer
,	O
(	O
unsigned	O
)	O
wget_random	function
(	O
)	O
)	O
;	O
wget_hash_printf_hex	function
(	O
hashtype	int
,	O
response_digest	O
,	O
sizeof	O
(	O
response_digest	O
)	O
,	O
"%s:%s:00000001:%s:%s:%s"	pointer
,	O
a1buf	O
,	O
nonce	pointer
,	O
cnonce	array
,	O
qop	pointer
,	O
a2buf	O
)	O
;	O
}	O
wget_buffer_init	function
(	O
&	O
buf	pointer
,	O
NULL	O
,	O
256	int
)	O
;	O
wget_buffer_printf	function
(	O
&	O
buf	pointer
,	O
"Digest username=\"%s\", realm=\"%s\", nonce=\"%s\", uri=\"/%s\", response=\"%s\""	pointer
,	O
username	pointer
,	O
realm	pointer
,	O
nonce	pointer
,	O
req	pointer
->	O
esc_resource	struct
.	O
data	pointer
,	O
response_digest	O
)	O
;	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
qop	pointer
,	O
"auth"	pointer
)	O
)	O
wget_buffer_printf_append	function
(	O
&	O
buf	pointer
,	O
", qop=auth, nc=00000001, cnonce=\"%s\""	pointer
,	O
cnonce	array
)	O
;	O
if	O
(	O
opaque	pointer
)	O
wget_buffer_printf_append	function
(	O
&	O
buf	pointer
,	O
", opaque=\"%s\""	pointer
,	O
opaque	pointer
)	O
;	O
if	O
(	O
algorithm	pointer
)	O
wget_buffer_printf_append	function
(	O
&	O
buf	pointer
,	O
", algorithm=%s"	pointer
,	O
algorithm	pointer
)	O
;	O
if	O
(	O
proxied	int
)	O
wget_http_add_header	function
(	O
req	pointer
,	O
"Proxy-Authorization"	pointer
,	O
buf	pointer
.	O
data	pointer
)	O
;	O
else	O
wget_http_add_header	function
(	O
req	pointer
,	O
"Authorization"	pointer
,	O
buf	pointer
.	O
data	pointer
)	O
;	O
wget_buffer_deinit	function
(	O
&	O
buf	pointer
)	O
;	O
}	O
}	O
struct	O
_http2_stream_context	struct
{	O
wget_http_response	struct
*	O
resp	pointer
;	O
wget_decompressor	struct
*	O
decompressor	pointer
;	O
}	O
;	O
static	O
int	O
_decompress_error_handler	function
(	O
wget_decompressor	struct
*	O
dc	pointer
,	O
int	O
err	enum
WGET_GCC_UNUSED	O
)	O
{	O
wget_http_response	struct
*	O
resp	pointer
=	O
(	O
wget_http_response	struct
*	O
)	O
wget_decompress_get_context	function
(	O
dc	pointer
)	O
;	O
if	O
(	O
resp	pointer
&&	O
resp	pointer
->	O
req	pointer
)	O
error_printf	O
(	O
_	O
(	O
"Decompress failed [host: %s - resource: %s]\n"	pointer
)	O
,	O
resp	pointer
->	O
req	pointer
->	O
esc_host	struct
.	O
data	pointer
,	O
resp	pointer
->	O
req	pointer
->	O
esc_resource	struct
.	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
wget_decompressor_sink_fn	function
_get_body	function
;	O
static	O
int	O
_get_body	function
(	O
void	O
*	O
userdata	pointer
,	O
const	O
char	O
*	O
data	pointer
,	O
size_t	long
length	long
)	O
{	O
wget_http_response	struct
*	O
resp	pointer
=	O
(	O
wget_http_response	struct
*	O
)	O
userdata	pointer
;	O
return	O
resp	pointer
->	O
req	pointer
->	O
body_callback	pointer
(	O
resp	pointer
,	O
resp	pointer
->	O
req	pointer
->	O
body_user_data	pointer
,	O
data	pointer
,	O
length	long
)	O
;	O
}	O
static	O
void	O
_fix_broken_server_encoding	function
(	O
wget_http_response	struct
*	O
resp	pointer
)	O
{	O
if	O
(	O
resp	pointer
->	O
content_encoding	char
==	O
wget_content_encoding_gzip	int
)	O
{	O
const	O
char	O
*	O
ext	pointer
;	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
content_type	pointer
,	O
"application/x-gzip"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
content_type	pointer
,	O
"application/gzip"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
content_type	pointer
,	O
"application/gunzip"	pointer
)	O
||	O
(	O
(	O
ext	pointer
=	O
strrchr	function
(	O
resp	pointer
->	O
req	pointer
->	O
esc_resource	struct
.	O
data	pointer
,	O
'.'	O
)	O
)	O
&&	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
ext	pointer
,	O
".gz"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
ext	pointer
,	O
".tgz"	pointer
)	O
)	O
)	O
)	O
{	O
debug_printf	O
(	O
"Broken server configuration gzip workaround triggered\n"	pointer
)	O
;	O
resp	pointer
->	O
content_encoding	char
=	O
wget_content_encoding_identity	int
;	O
}	O
}	O
}	O
int	O
wget_http_open	function
(	O
wget_http_connection	struct
*	O
*	O
_conn	pointer
,	O
const	O
wget_iri	struct
*	O
iri	pointer
)	O
{	O
static	O
int	O
next_http_proxy	int
=	O
-	O
1	int
;	O
static	O
int	O
next_https_proxy	int
=	O
-	O
1	int
;	O
wget_http_connection	struct
*	O
conn	pointer
;	O
const	O
char	O
*	O
host	pointer
;	O
uint16_t	short
port	short
;	O
int	O
rc	int
,	O
ssl	int
=	O
iri	pointer
->	O
scheme	enum
==	O
WGET_IRI_SCHEME_HTTPS	int
;	O
if	O
(	O
!	O
_conn	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
conn	pointer
=	O
*	O
_conn	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_http_connection	struct
)	O
)	O
;	O
host	pointer
=	O
iri	pointer
->	O
host	pointer
;	O
port	short
=	O
iri	pointer
->	O
port	short
;	O
wget_thread_mutex_lock	function
(	O
proxy_mutex	pointer
)	O
;	O
if	O
(	O
!	O
wget_http_match_no_proxy	function
(	O
no_proxies	pointer
,	O
iri	pointer
->	O
host	pointer
)	O
)	O
{	O
wget_iri	struct
*	O
proxy	pointer
;	O
if	O
(	O
iri	pointer
->	O
scheme	enum
==	O
WGET_IRI_SCHEME_HTTP	int
&&	O
http_proxies	pointer
)	O
{	O
proxy	pointer
=	O
wget_vector_get	function
(	O
http_proxies	pointer
,	O
(	O
++	O
next_http_proxy	int
)	O
%	O
wget_vector_size	function
(	O
http_proxies	pointer
)	O
)	O
;	O
host	pointer
=	O
proxy	pointer
->	O
host	pointer
;	O
port	short
=	O
proxy	pointer
->	O
port	short
;	O
conn	pointer
->	O
proxied	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
iri	pointer
->	O
scheme	enum
==	O
WGET_IRI_SCHEME_HTTPS	int
&&	O
https_proxies	pointer
)	O
{	O
proxy	pointer
=	O
wget_vector_get	function
(	O
https_proxies	pointer
,	O
(	O
++	O
next_https_proxy	int
)	O
%	O
wget_vector_size	function
(	O
https_proxies	pointer
)	O
)	O
;	O
host	pointer
=	O
proxy	pointer
->	O
host	pointer
;	O
port	short
=	O
proxy	pointer
->	O
port	short
;	O
conn	pointer
->	O
proxied	int
=	O
1	int
;	O
}	O
}	O
wget_thread_mutex_unlock	function
(	O
proxy_mutex	pointer
)	O
;	O
conn	pointer
->	O
tcp	pointer
=	O
wget_tcp_init	function
(	O
)	O
;	O
if	O
(	O
ssl	int
)	O
{	O
wget_tcp_set_ssl	function
(	O
conn	pointer
->	O
tcp	pointer
,	O
1	int
)	O
;	O
wget_tcp_set_ssl_hostname	function
(	O
conn	pointer
->	O
tcp	pointer
,	O
host	pointer
)	O
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
wget_tcp_connect	function
(	O
conn	pointer
->	O
tcp	pointer
,	O
host	pointer
,	O
port	short
)	O
)	O
==	O
WGET_E_SUCCESS	int
)	O
{	O
conn	pointer
->	O
esc_host	struct
=	O
iri	pointer
->	O
host	pointer
?	O
wget_strdup	function
(	O
iri	pointer
->	O
host	pointer
)	O
:	O
NULL	O
;	O
conn	pointer
->	O
port	short
=	O
iri	pointer
->	O
port	short
;	O
conn	pointer
->	O
scheme	enum
=	O
iri	pointer
->	O
scheme	enum
;	O
conn	pointer
->	O
buf	pointer
=	O
wget_buffer_alloc	function
(	O
102400	int
)	O
;	O
conn	pointer
->	O
pending_requests	pointer
=	O
wget_vector_create	function
(	O
16	int
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
server_stats_callback	pointer
&&	O
(	O
rc	int
==	O
WGET_E_CERTIFICATE	int
)	O
)	O
server_stats_callback	pointer
(	O
conn	pointer
,	O
NULL	O
)	O
;	O
wget_http_close	function
(	O
_conn	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
void	O
wget_http_close	function
(	O
wget_http_connection	struct
*	O
*	O
conn	pointer
)	O
{	O
if	O
(	O
*	O
conn	pointer
)	O
{	O
debug_printf	O
(	O
"closing connection\n"	pointer
)	O
;	O
wget_tcp_deinit	function
(	O
&	O
(	O
*	O
conn	pointer
)	O
->	O
tcp	pointer
)	O
;	O
xfree	O
(	O
(	O
*	O
conn	pointer
)	O
->	O
esc_host	struct
)	O
;	O
wget_buffer_free	function
(	O
&	O
(	O
*	O
conn	pointer
)	O
->	O
buf	pointer
)	O
;	O
wget_vector_clear_nofree	function
(	O
(	O
*	O
conn	pointer
)	O
->	O
pending_requests	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
(	O
*	O
conn	pointer
)	O
->	O
pending_requests	pointer
)	O
;	O
xfree	O
(	O
*	O
conn	pointer
)	O
;	O
}	O
}	O
int	O
wget_http_send_request	function
(	O
wget_http_connection	struct
*	O
conn	pointer
,	O
wget_http_request	struct
*	O
req	pointer
)	O
{	O
ssize_t	long
nbytes	long
;	O
if	O
(	O
(	O
nbytes	long
=	O
wget_http_request_to_buffer	function
(	O
req	pointer
,	O
conn	pointer
->	O
buf	pointer
,	O
conn	pointer
->	O
proxied	int
)	O
)	O
<	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to create request buffer\n"	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
req	pointer
->	O
request_start	long long
=	O
wget_get_timemillis	function
(	O
)	O
;	O
if	O
(	O
wget_tcp_write	function
(	O
conn	pointer
->	O
tcp	pointer
,	O
conn	pointer
->	O
buf	pointer
->	O
data	pointer
,	O
nbytes	long
)	O
!=	O
nbytes	long
)	O
{	O
return	O
-	O
1	int
;	O
}	O
wget_vector_add	function
(	O
conn	pointer
->	O
pending_requests	pointer
,	O
req	pointer
)	O
;	O
if	O
(	O
req	pointer
->	O
debug_skip_body	bool
)	O
debug_printf	O
(	O
"# sent %zd bytes:\n%.*s<body skipped>"	pointer
,	O
nbytes	long
,	O
(	O
int	O
)	O
(	O
conn	pointer
->	O
buf	pointer
->	O
length	long
-	O
req	pointer
->	O
body_length	long
)	O
,	O
conn	pointer
->	O
buf	pointer
->	O
data	pointer
)	O
;	O
else	O
debug_printf	O
(	O
"# sent %zd bytes:\n%.*s"	pointer
,	O
nbytes	long
,	O
(	O
int	O
)	O
conn	pointer
->	O
buf	pointer
->	O
length	long
,	O
conn	pointer
->	O
buf	pointer
->	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ssize_t	long
wget_http_request_to_buffer	function
(	O
wget_http_request	struct
*	O
req	pointer
,	O
wget_buffer	struct
*	O
buf	pointer
,	O
int	O
proxied	int
)	O
{	O
char	O
have_content_length	char
=	O
0	int
;	O
char	O
check_content_length	char
=	O
req	pointer
->	O
body	pointer
&&	O
req	pointer
->	O
body_length	long
;	O
wget_buffer_strcpy	function
(	O
buf	pointer
,	O
req	pointer
->	O
method	array
)	O
;	O
wget_buffer_memcat	function
(	O
buf	pointer
,	O
" "	pointer
,	O
1	int
)	O
;	O
if	O
(	O
proxied	int
)	O
{	O
wget_buffer_strcat	function
(	O
buf	pointer
,	O
wget_iri_scheme_get_name	function
(	O
req	pointer
->	O
scheme	enum
)	O
)	O
;	O
wget_buffer_memcat	function
(	O
buf	pointer
,	O
"://"	pointer
,	O
3	int
)	O
;	O
wget_buffer_bufcat	function
(	O
buf	pointer
,	O
&	O
req	pointer
->	O
esc_host	struct
)	O
;	O
}	O
wget_buffer_memcat	function
(	O
buf	pointer
,	O
"/"	pointer
,	O
1	int
)	O
;	O
wget_buffer_bufcat	function
(	O
buf	pointer
,	O
&	O
req	pointer
->	O
esc_resource	struct
)	O
;	O
wget_buffer_memcat	function
(	O
buf	pointer
,	O
" HTTP/1.1\r\n"	pointer
,	O
11	int
)	O
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
req	pointer
->	O
headers	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_http_header_param	struct
*	O
param	pointer
=	O
wget_vector_get	function
(	O
req	pointer
->	O
headers	pointer
,	O
it	int
)	O
;	O
wget_buffer_strcat	function
(	O
buf	pointer
,	O
param	pointer
->	O
name	pointer
)	O
;	O
wget_buffer_memcat	function
(	O
buf	pointer
,	O
": "	pointer
,	O
2	int
)	O
;	O
wget_buffer_strcat	function
(	O
buf	pointer
,	O
param	pointer
->	O
value	pointer
)	O
;	O
if	O
(	O
buf	pointer
->	O
data	pointer
[	O
buf	pointer
->	O
length	long
-	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
wget_buffer_memcat	function
(	O
buf	pointer
,	O
"\r\n"	pointer
,	O
2	int
)	O
;	O
}	O
if	O
(	O
check_content_length	char
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
param	pointer
->	O
name	pointer
,	O
"Content-Length"	pointer
)	O
)	O
have_content_length	char
=	O
1	int
;	O
}	O
if	O
(	O
check_content_length	char
&&	O
!	O
have_content_length	char
)	O
wget_buffer_printf_append	function
(	O
buf	pointer
,	O
"Content-Length: %zu\r\n"	pointer
,	O
req	pointer
->	O
body_length	long
)	O
;	O
wget_buffer_memcat	function
(	O
buf	pointer
,	O
"\r\n"	pointer
,	O
2	int
)	O
;	O
if	O
(	O
req	pointer
->	O
body	pointer
&&	O
req	pointer
->	O
body_length	long
)	O
wget_buffer_memcat	function
(	O
buf	pointer
,	O
req	pointer
->	O
body	pointer
,	O
req	pointer
->	O
body_length	long
)	O
;	O
return	O
buf	pointer
->	O
length	long
;	O
}	O
wget_http_response	struct
*	O
wget_http_get_response_cb	function
(	O
wget_http_connection	struct
*	O
conn	pointer
)	O
{	O
size_t	long
bufsize	long
,	O
body_len	long
=	O
0	int
,	O
body_size	long
=	O
0	int
;	O
ssize_t	long
nbytes	long
,	O
nread	long
=	O
0	int
;	O
char	O
*	O
buf	pointer
,	O
*	O
p	pointer
=	O
NULL	O
;	O
wget_http_response	struct
*	O
resp	pointer
=	O
NULL	O
;	O
wget_decompressor	struct
*	O
dc	pointer
=	O
NULL	O
;	O
wget_http_request	struct
*	O
req	pointer
=	O
wget_vector_get	function
(	O
conn	pointer
->	O
pending_requests	pointer
,	O
0	int
)	O
;	O
debug_printf	O
(	O
"### req %p pending requests = %d\n"	pointer
,	O
(	O
void	O
*	O
)	O
req	pointer
,	O
wget_vector_size	function
(	O
conn	pointer
->	O
pending_requests	pointer
)	O
)	O
;	O
if	O
(	O
!	O
req	pointer
)	O
goto	O
cleanup	O
;	O
wget_vector_remove_nofree	function
(	O
conn	pointer
->	O
pending_requests	pointer
,	O
0	int
)	O
;	O
buf	pointer
=	O
conn	pointer
->	O
buf	pointer
->	O
data	pointer
;	O
bufsize	long
=	O
conn	pointer
->	O
buf	pointer
->	O
size	pointer
;	O
while	O
(	O
(	O
nbytes	long
=	O
wget_tcp_read	function
(	O
conn	pointer
->	O
tcp	pointer
,	O
buf	pointer
+	O
nread	long
,	O
bufsize	long
-	O
nread	long
)	O
)	O
>	O
0	int
)	O
{	O
req	pointer
->	O
first_response_start	long long
=	O
wget_get_timemillis	function
(	O
)	O
;	O
nread	long
+=	O
nbytes	long
;	O
buf	pointer
[	O
nread	long
]	O
=	O
0	int
;	O
if	O
(	O
nread	long
<	O
4	int
)	O
continue	O
;	O
if	O
(	O
nread	long
==	O
nbytes	long
)	O
p	pointer
=	O
buf	pointer
;	O
else	O
p	pointer
=	O
buf	pointer
+	O
nread	long
-	O
nbytes	long
-	O
3	int
;	O
if	O
(	O
(	O
p	pointer
=	O
strstr	function
(	O
p	pointer
,	O
"\r\n\r\n"	pointer
)	O
)	O
)	O
{	O
*	O
p	pointer
=	O
0	int
;	O
debug_printf	O
(	O
"# got header %zd bytes:\n%s\n\n"	pointer
,	O
p	pointer
-	O
buf	pointer
,	O
buf	pointer
)	O
;	O
if	O
(	O
req	pointer
->	O
response_keepheader	bool
)	O
{	O
wget_buffer	struct
*	O
header	pointer
=	O
wget_buffer_alloc	function
(	O
p	pointer
-	O
buf	pointer
+	O
4	int
)	O
;	O
wget_buffer_memcpy	function
(	O
header	pointer
,	O
buf	pointer
,	O
p	pointer
-	O
buf	pointer
)	O
;	O
wget_buffer_memcat	function
(	O
header	pointer
,	O
"\r\n\r\n"	pointer
,	O
4	int
)	O
;	O
if	O
(	O
!	O
(	O
resp	pointer
=	O
wget_http_parse_response_header	function
(	O
buf	pointer
)	O
)	O
)	O
{	O
wget_buffer_free	function
(	O
&	O
header	pointer
)	O
;	O
goto	O
cleanup	O
;	O
}	O
resp	pointer
->	O
header	pointer
=	O
header	pointer
;	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
resp	pointer
=	O
wget_http_parse_response_header	function
(	O
buf	pointer
)	O
)	O
)	O
goto	O
cleanup	O
;	O
}	O
resp	pointer
->	O
req	pointer
=	O
req	pointer
;	O
if	O
(	O
server_stats_callback	pointer
)	O
server_stats_callback	pointer
(	O
conn	pointer
,	O
resp	pointer
)	O
;	O
if	O
(	O
req	pointer
->	O
header_callback	pointer
)	O
{	O
if	O
(	O
req	pointer
->	O
header_callback	pointer
(	O
resp	pointer
,	O
req	pointer
->	O
header_user_data	pointer
)	O
)	O
goto	O
cleanup	O
;	O
}	O
if	O
(	O
req	pointer
&&	O
!	O
wget_strcasecmp_ascii	function
(	O
req	pointer
->	O
method	array
,	O
"HEAD"	pointer
)	O
)	O
goto	O
cleanup	O
;	O
_fix_broken_server_encoding	function
(	O
resp	pointer
)	O
;	O
p	pointer
+=	O
4	int
;	O
break	O
;	O
}	O
if	O
(	O
(	O
size_t	long
)	O
nread	long
+	O
1024	int
>	O
bufsize	long
)	O
{	O
if	O
(	O
wget_buffer_ensure_capacity	function
(	O
conn	pointer
->	O
buf	pointer
,	O
bufsize	long
+	O
1024	int
)	O
!=	O
WGET_E_SUCCESS	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to allocate %zu bytes\n"	pointer
)	O
,	O
bufsize	long
+	O
1024	int
)	O
;	O
goto	O
cleanup	O
;	O
}	O
buf	pointer
=	O
conn	pointer
->	O
buf	pointer
->	O
data	pointer
;	O
bufsize	long
=	O
conn	pointer
->	O
buf	pointer
->	O
size	pointer
;	O
}	O
}	O
if	O
(	O
!	O
nread	long
)	O
goto	O
cleanup	O
;	O
if	O
(	O
resp	pointer
&&	O
resp	pointer
->	O
code	short
==	O
HTTP_STATUS_RANGE_NOT_SATISFIABLE	int
)	O
{	O
goto	O
cleanup	O
;	O
}	O
if	O
(	O
!	O
resp	pointer
||	O
H_10X	O
(	O
resp	pointer
->	O
code	short
)	O
||	O
resp	pointer
->	O
code	short
==	O
HTTP_STATUS_NO_CONTENT	int
||	O
resp	pointer
->	O
code	short
==	O
HTTP_STATUS_NOT_MODIFIED	int
||	O
(	O
resp	pointer
->	O
transfer_encoding	enum
==	O
wget_transfer_encoding_identity	int
&&	O
resp	pointer
->	O
content_length	long
==	O
0	int
&&	O
resp	pointer
->	O
content_length_valid	bool
)	O
)	O
{	O
goto	O
cleanup	O
;	O
}	O
dc	pointer
=	O
wget_decompress_open	function
(	O
resp	pointer
->	O
content_encoding	char
,	O
_get_body	function
,	O
resp	pointer
)	O
;	O
wget_decompress_set_error_handler	function
(	O
dc	pointer
,	O
_decompress_error_handler	function
)	O
;	O
body_len	long
=	O
nread	long
-	O
(	O
p	pointer
-	O
buf	pointer
)	O
;	O
memmove	function
(	O
buf	pointer
,	O
p	pointer
,	O
body_len	long
)	O
;	O
buf	pointer
[	O
body_len	long
]	O
=	O
0	int
;	O
resp	pointer
->	O
cur_downloaded	long
=	O
body_len	long
;	O
if	O
(	O
resp	pointer
->	O
transfer_encoding	enum
==	O
wget_transfer_encoding_chunked	int
)	O
{	O
size_t	long
chunk_size	long
=	O
0	int
;	O
char	O
*	O
end	pointer
;	O
debug_printf	O
(	O
"method 1 %zu %zu:\n"	pointer
,	O
body_len	long
,	O
body_size	long
)	O
;	O
p	pointer
=	O
buf	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
while	O
(	O
(	O
!	O
(	O
end	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'\r'	O
)	O
)	O
||	O
end	pointer
[	O
1	int
]	O
!=	O
'\n'	O
)	O
)	O
{	O
if	O
(	O
conn	pointer
->	O
abort_indicator	bool
||	O
_abort_indicator	char
)	O
goto	O
cleanup	O
;	O
if	O
(	O
(	O
nbytes	long
=	O
wget_tcp_read	function
(	O
conn	pointer
->	O
tcp	pointer
,	O
buf	pointer
+	O
body_len	long
,	O
bufsize	long
-	O
body_len	long
)	O
)	O
<=	O
0	int
)	O
goto	O
cleanup	O
;	O
body_len	long
+=	O
nbytes	long
;	O
buf	pointer
[	O
body_len	long
]	O
=	O
0	int
;	O
}	O
end	pointer
+=	O
2	int
;	O
chunk_size	long
=	O
strtoll	function
(	O
p	pointer
,	O
NULL	O
,	O
16	int
)	O
;	O
if	O
(	O
chunk_size	long
==	O
0	int
)	O
{	O
if	O
(	O
*	O
end	pointer
==	O
'\r'	O
&&	O
end	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
goto	O
cleanup	O
;	O
debug_printf	O
(	O
"reading trailer\n"	pointer
)	O
;	O
while	O
(	O
!	O
strstr	function
(	O
end	pointer
,	O
"\r\n\r\n"	pointer
)	O
)	O
{	O
if	O
(	O
body_len	long
>	O
3	int
)	O
{	O
memmove	function
(	O
buf	pointer
,	O
buf	pointer
+	O
body_len	long
-	O
3	int
,	O
4	int
)	O
;	O
body_len	long
=	O
3	int
;	O
}	O
if	O
(	O
conn	pointer
->	O
abort_indicator	bool
||	O
_abort_indicator	char
)	O
goto	O
cleanup	O
;	O
if	O
(	O
(	O
nbytes	long
=	O
wget_tcp_read	function
(	O
conn	pointer
->	O
tcp	pointer
,	O
buf	pointer
+	O
body_len	long
,	O
bufsize	long
-	O
body_len	long
)	O
)	O
<=	O
0	int
)	O
goto	O
cleanup	O
;	O
body_len	long
+=	O
nbytes	long
;	O
buf	pointer
[	O
body_len	long
]	O
=	O
0	int
;	O
end	pointer
=	O
buf	pointer
;	O
}	O
debug_printf	O
(	O
"end of trailer \n"	pointer
)	O
;	O
goto	O
cleanup	O
;	O
}	O
if	O
(	O
chunk_size	long
>	O
SIZE_MAX	O
/	O
2	int
-	O
2	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Chunk size overflow: %lX\n"	pointer
)	O
,	O
chunk_size	long
)	O
;	O
goto	O
cleanup	O
;	O
}	O
p	pointer
=	O
end	pointer
+	O
chunk_size	long
+	O
2	int
;	O
if	O
(	O
p	pointer
<=	O
buf	pointer
+	O
body_len	long
)	O
{	O
resp	pointer
->	O
cur_downloaded	long
+=	O
chunk_size	long
;	O
wget_decompress	function
(	O
dc	pointer
,	O
end	pointer
,	O
chunk_size	long
)	O
;	O
continue	O
;	O
}	O
resp	pointer
->	O
cur_downloaded	long
+=	O
(	O
buf	pointer
+	O
body_len	long
)	O
-	O
end	pointer
;	O
wget_decompress	function
(	O
dc	pointer
,	O
end	pointer
,	O
(	O
buf	pointer
+	O
body_len	long
)	O
-	O
end	pointer
)	O
;	O
chunk_size	long
=	O
(	O
(	O
(	O
uintptr_t	long
)	O
p	pointer
)	O
-	O
(	O
(	O
uintptr_t	long
)	O
(	O
buf	pointer
+	O
body_len	long
)	O
)	O
)	O
;	O
debug_printf	O
(	O
"need at least %zu more bytes\n"	pointer
,	O
chunk_size	long
)	O
;	O
while	O
(	O
chunk_size	long
>	O
0	int
)	O
{	O
if	O
(	O
conn	pointer
->	O
abort_indicator	bool
||	O
_abort_indicator	char
)	O
goto	O
cleanup	O
;	O
if	O
(	O
(	O
nbytes	long
=	O
wget_tcp_read	function
(	O
conn	pointer
->	O
tcp	pointer
,	O
buf	pointer
,	O
bufsize	long
)	O
)	O
<=	O
0	int
)	O
goto	O
cleanup	O
;	O
if	O
(	O
chunk_size	long
<=	O
(	O
size_t	long
)	O
nbytes	long
)	O
{	O
if	O
(	O
chunk_size	long
==	O
1	int
||	O
!	O
strncmp	function
(	O
buf	pointer
+	O
chunk_size	long
-	O
2	int
,	O
"\r\n"	pointer
,	O
2	int
)	O
)	O
{	O
debug_printf	O
(	O
"chunk completed\n"	pointer
)	O
;	O
}	O
else	O
{	O
error_printf	O
(	O
_	O
(	O
"Expected end-of-chunk not found\n"	pointer
)	O
)	O
;	O
goto	O
cleanup	O
;	O
}	O
if	O
(	O
chunk_size	long
>	O
2	int
)	O
{	O
resp	pointer
->	O
cur_downloaded	long
+=	O
chunk_size	long
-	O
2	int
;	O
wget_decompress	function
(	O
dc	pointer
,	O
buf	pointer
,	O
chunk_size	long
-	O
2	int
)	O
;	O
}	O
body_len	long
=	O
nbytes	long
-	O
chunk_size	long
;	O
if	O
(	O
body_len	long
)	O
memmove	function
(	O
buf	pointer
,	O
buf	pointer
+	O
chunk_size	long
,	O
body_len	long
)	O
;	O
buf	pointer
[	O
body_len	long
]	O
=	O
0	int
;	O
p	pointer
=	O
buf	pointer
;	O
break	O
;	O
}	O
else	O
{	O
chunk_size	long
-=	O
nbytes	long
;	O
if	O
(	O
chunk_size	long
>=	O
2	int
)	O
{	O
resp	pointer
->	O
cur_downloaded	long
+=	O
nbytes	long
;	O
wget_decompress	function
(	O
dc	pointer
,	O
buf	pointer
,	O
nbytes	long
)	O
;	O
}	O
else	O
{	O
resp	pointer
->	O
cur_downloaded	long
+=	O
nbytes	long
-	O
1	int
;	O
wget_decompress	function
(	O
dc	pointer
,	O
buf	pointer
,	O
nbytes	long
-	O
1	int
)	O
;	O
}	O
}	O
}	O
}	O
}	O
else	O
if	O
(	O
resp	pointer
->	O
content_length_valid	bool
)	O
{	O
debug_printf	O
(	O
"method 2\n"	pointer
)	O
;	O
if	O
(	O
body_len	long
)	O
wget_decompress	function
(	O
dc	pointer
,	O
buf	pointer
,	O
body_len	long
)	O
;	O
while	O
(	O
body_len	long
<	O
resp	pointer
->	O
content_length	long
)	O
{	O
if	O
(	O
conn	pointer
->	O
abort_indicator	bool
||	O
_abort_indicator	char
)	O
break	O
;	O
if	O
(	O
(	O
(	O
nbytes	long
=	O
wget_tcp_read	function
(	O
conn	pointer
->	O
tcp	pointer
,	O
buf	pointer
,	O
bufsize	long
)	O
)	O
<=	O
0	int
)	O
)	O
break	O
;	O
body_len	long
+=	O
nbytes	long
;	O
resp	pointer
->	O
cur_downloaded	long
+=	O
nbytes	long
;	O
wget_decompress	function
(	O
dc	pointer
,	O
buf	pointer
,	O
nbytes	long
)	O
;	O
}	O
if	O
(	O
nbytes	long
<	O
0	int
)	O
error_printf	O
(	O
_	O
(	O
"Failed to read %zd bytes (%d)\n"	pointer
)	O
,	O
nbytes	long
,	O
errno	O
)	O
;	O
if	O
(	O
body_len	long
<	O
resp	pointer
->	O
content_length	long
)	O
error_printf	O
(	O
_	O
(	O
"Just got %zu of %zu bytes\n"	pointer
)	O
,	O
body_len	long
,	O
resp	pointer
->	O
content_length	long
)	O
;	O
else	O
if	O
(	O
body_len	long
>	O
resp	pointer
->	O
content_length	long
)	O
error_printf	O
(	O
_	O
(	O
"Body too large: %zu instead of %zu bytes\n"	pointer
)	O
,	O
body_len	long
,	O
resp	pointer
->	O
content_length	long
)	O
;	O
resp	pointer
->	O
content_length	long
=	O
body_len	long
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"method 3\n"	pointer
)	O
;	O
if	O
(	O
body_len	long
)	O
wget_decompress	function
(	O
dc	pointer
,	O
buf	pointer
,	O
body_len	long
)	O
;	O
while	O
(	O
!	O
conn	pointer
->	O
abort_indicator	bool
&&	O
!	O
_abort_indicator	char
&&	O
(	O
nbytes	long
=	O
wget_tcp_read	function
(	O
conn	pointer
->	O
tcp	pointer
,	O
buf	pointer
,	O
bufsize	long
)	O
)	O
>	O
0	int
)	O
{	O
body_len	long
+=	O
nbytes	long
;	O
resp	pointer
->	O
cur_downloaded	long
+=	O
nbytes	long
;	O
wget_decompress	function
(	O
dc	pointer
,	O
buf	pointer
,	O
nbytes	long
)	O
;	O
}	O
resp	pointer
->	O
content_length	long
=	O
body_len	long
;	O
}	O
cleanup	O
:	O
if	O
(	O
resp	pointer
)	O
resp	pointer
->	O
response_end	long long
=	O
wget_get_timemillis	function
(	O
)	O
;	O
wget_decompress_close	function
(	O
dc	pointer
)	O
;	O
return	O
resp	pointer
;	O
}	O
wget_http_response	struct
*	O
wget_http_get_response	function
(	O
wget_http_connection	struct
*	O
conn	pointer
)	O
{	O
wget_http_response	struct
*	O
resp	pointer
;	O
resp	pointer
=	O
wget_http_get_response_cb	function
(	O
conn	pointer
)	O
;	O
if	O
(	O
resp	pointer
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
req	pointer
->	O
method	array
,	O
"GET"	pointer
)	O
)	O
if	O
(	O
resp	pointer
->	O
body	pointer
)	O
resp	pointer
->	O
content_length	long
=	O
resp	pointer
->	O
body	pointer
->	O
length	long
;	O
}	O
return	O
resp	pointer
;	O
}	O
static	O
void	O
iri_free	function
(	O
void	O
*	O
iri	pointer
)	O
{	O
if	O
(	O
iri	pointer
)	O
wget_iri_free	function
(	O
(	O
wget_iri	struct
*	O
*	O
)	O
&	O
iri	pointer
)	O
;	O
}	O
static	O
wget_vector	struct
*	O
_parse_proxies	function
(	O
const	O
char	O
*	O
proxy	pointer
,	O
const	O
char	O
*	O
encoding	pointer
)	O
{	O
if	O
(	O
!	O
proxy	pointer
)	O
return	O
NULL	O
;	O
wget_vector	struct
*	O
proxies	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
s	pointer
,	O
*	O
p	pointer
;	O
for	O
(	O
s	pointer
=	O
p	pointer
=	O
proxy	pointer
;	O
*	O
p	pointer
;	O
s	pointer
=	O
p	pointer
+	O
1	int
)	O
{	O
if	O
(	O
(	O
p	pointer
=	O
strchrnul	function
(	O
s	pointer
,	O
','	O
)	O
)	O
!=	O
s	pointer
&&	O
p	pointer
-	O
s	pointer
<	O
256	int
)	O
{	O
wget_iri	struct
*	O
iri	pointer
;	O
char	O
host	pointer
[	O
p	pointer
-	O
s	pointer
+	O
1	int
]	O
;	O
memcpy	function
(	O
host	pointer
,	O
s	pointer
,	O
p	pointer
-	O
s	pointer
)	O
;	O
host	pointer
[	O
p	pointer
-	O
s	pointer
]	O
=	O
0	int
;	O
iri	pointer
=	O
wget_iri_parse	function
(	O
host	pointer
,	O
encoding	pointer
)	O
;	O
if	O
(	O
iri	pointer
)	O
{	O
if	O
(	O
!	O
proxies	pointer
)	O
{	O
proxies	pointer
=	O
wget_vector_create	function
(	O
8	int
,	O
NULL	O
)	O
;	O
wget_vector_set_destructor	function
(	O
proxies	pointer
,	O
iri_free	function
)	O
;	O
}	O
wget_vector_add	function
(	O
proxies	pointer
,	O
iri	pointer
)	O
;	O
}	O
}	O
}	O
return	O
proxies	pointer
;	O
}	O
static	O
wget_vector	struct
*	O
_parse_no_proxies	function
(	O
const	O
char	O
*	O
no_proxy	pointer
,	O
const	O
char	O
*	O
encoding	pointer
)	O
{	O
if	O
(	O
!	O
no_proxy	pointer
)	O
return	O
NULL	O
;	O
wget_vector	struct
*	O
proxies	pointer
;	O
const	O
char	O
*	O
s	pointer
,	O
*	O
p	pointer
;	O
proxies	pointer
=	O
wget_vector_create	function
(	O
8	int
,	O
NULL	O
)	O
;	O
for	O
(	O
s	pointer
=	O
p	pointer
=	O
no_proxy	pointer
;	O
*	O
p	pointer
;	O
s	pointer
=	O
p	pointer
+	O
1	int
)	O
{	O
while	O
(	O
c_isspace	function
(	O
*	O
s	pointer
)	O
&&	O
s	pointer
<	O
p	pointer
)	O
s	pointer
++	O
;	O
if	O
(	O
(	O
p	pointer
=	O
strchrnul	function
(	O
s	pointer
,	O
','	O
)	O
)	O
!=	O
s	pointer
&&	O
p	pointer
-	O
s	pointer
<	O
256	int
)	O
{	O
char	O
*	O
host	pointer
,	O
*	O
hostp	pointer
;	O
if	O
(	O
!	O
(	O
host	pointer
=	O
wget_strmemdup	function
(	O
s	pointer
,	O
p	pointer
-	O
s	pointer
)	O
)	O
)	O
continue	O
;	O
wget_strtolower	function
(	O
host	pointer
)	O
;	O
if	O
(	O
wget_str_needs_encoding	function
(	O
host	pointer
)	O
)	O
{	O
if	O
(	O
(	O
hostp	pointer
=	O
wget_str_to_utf8	function
(	O
host	pointer
,	O
encoding	pointer
)	O
)	O
)	O
{	O
xfree	O
(	O
host	pointer
)	O
;	O
host	pointer
=	O
hostp	pointer
;	O
}	O
}	O
if	O
(	O
(	O
hostp	pointer
=	O
(	O
char	O
*	O
)	O
wget_str_to_ascii	function
(	O
host	pointer
)	O
)	O
!=	O
host	pointer
)	O
{	O
xfree	O
(	O
host	pointer
)	O
;	O
host	pointer
=	O
hostp	pointer
;	O
}	O
wget_vector_add	function
(	O
proxies	pointer
,	O
host	pointer
)	O
;	O
}	O
}	O
return	O
proxies	pointer
;	O
}	O
int	O
wget_http_set_http_proxy	function
(	O
const	O
char	O
*	O
proxy	pointer
,	O
const	O
char	O
*	O
encoding	pointer
)	O
{	O
if	O
(	O
http_proxies	pointer
)	O
wget_vector_free	function
(	O
&	O
http_proxies	pointer
)	O
;	O
http_proxies	pointer
=	O
_parse_proxies	function
(	O
proxy	pointer
,	O
encoding	pointer
)	O
;	O
return	O
wget_vector_size	function
(	O
http_proxies	pointer
)	O
;	O
}	O
int	O
wget_http_set_https_proxy	function
(	O
const	O
char	O
*	O
proxy	pointer
,	O
const	O
char	O
*	O
encoding	pointer
)	O
{	O
if	O
(	O
https_proxies	pointer
)	O
wget_vector_free	function
(	O
&	O
https_proxies	pointer
)	O
;	O
https_proxies	pointer
=	O
_parse_proxies	function
(	O
proxy	pointer
,	O
encoding	pointer
)	O
;	O
return	O
wget_vector_size	function
(	O
https_proxies	pointer
)	O
;	O
}	O
int	O
wget_http_set_no_proxy	function
(	O
const	O
char	O
*	O
no_proxy	pointer
,	O
const	O
char	O
*	O
encoding	pointer
)	O
{	O
if	O
(	O
no_proxies	pointer
)	O
wget_vector_free	function
(	O
&	O
no_proxies	pointer
)	O
;	O
no_proxies	pointer
=	O
_parse_no_proxies	function
(	O
no_proxy	pointer
,	O
encoding	pointer
)	O
;	O
if	O
(	O
!	O
no_proxies	pointer
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
wget_http_match_no_proxy	function
(	O
wget_vector	struct
*	O
no_proxies_vec	pointer
,	O
const	O
char	O
*	O
host	pointer
)	O
{	O
if	O
(	O
!	O
no_proxies_vec	pointer
||	O
!	O
host	pointer
)	O
return	O
0	int
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
no_proxies_vec	pointer
)	O
;	O
it	int
++	O
)	O
{	O
const	O
char	O
*	O
no_proxy	pointer
=	O
wget_vector_get	function
(	O
no_proxies_vec	pointer
,	O
it	int
)	O
;	O
if	O
(	O
!	O
no_proxy	pointer
)	O
continue	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
no_proxy	pointer
,	O
host	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
*	O
no_proxy	pointer
==	O
'.'	O
&&	O
wget_match_tail	function
(	O
host	pointer
,	O
no_proxy	pointer
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
wget_http_abort_connection	function
(	O
wget_http_connection	struct
*	O
conn	pointer
)	O
{	O
if	O
(	O
conn	pointer
)	O
conn	pointer
->	O
abort_indicator	bool
=	O
1	int
;	O
else	O
_abort_indicator	char
=	O
1	int
;	O
}	O
void	O
wget_server_set_stats_callback	function
(	O
wget_server_stats_callback	function
*	O
fn	pointer
)	O
{	O
server_stats_callback	pointer
=	O
fn	pointer
;	O
}	O
