int	O
gl_verbose	int
=	O
0	int
;	O
char	O
gl_who	array
[	O
100	int
]	O
;	O
char	O
gl_jobNumber	array
[	O
1000	int
]	O
;	O
static	O
int	O
gl_close_wait_time	int
=	O
25	int
;	O
static	O
int	O
g_sigpipe_ret	int
=	O
0	int
;	O
static	O
int	O
g_pid1	int
=	O
0	int
;	O
static	O
int	O
g_tarpid	int
=	O
0	int
;	O
static	O
void	O
sig_term	function
(	O
int	O
)	O
;	O
static	O
volatile	O
sig_atomic_t	int
sigcaught	int
;	O
static	O
int	O
stdioPump	function
(	O
int	O
stdoutfd	int
,	O
int	O
outputpipefd	int
,	O
int	O
inputpipefd	int
,	O
int	O
stdinfd	int
,	O
int	O
opt_verbose	int
,	O
int	O
pid	int
,	O
int	O
*	O
waitret	pointer
,	O
int	O
*	O
statusp	pointer
)	O
;	O
static	O
int	O
swlib__pipe_pump	function
(	O
int	O
suction_fd	int
,	O
int	O
discharge_fd	int
,	O
int	O
*	O
status	pointer
,	O
int	O
*	O
childGotStatus	pointer
,	O
int	O
*	O
amount	pointer
)	O
;	O
static	O
int	O
check_pid	function
(	O
int	O
pid	int
,	O
int	O
*	O
do_break	pointer
)	O
{	O
int	O
status	pointer
;	O
int	O
ret	int
;	O
int	O
exitval	int
=	O
0	int
;	O
*	O
do_break	pointer
=	O
0	int
;	O
ret	int
=	O
waitpid	function
(	O
(	O
pid_t	int
)	O
pid	int
,	O
&	O
status	pointer
,	O
WNOHANG	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
*	O
do_break	pointer
=	O
1	int
;	O
return	O
ret	int
;	O
}	O
if	O
(	O
ret	int
>	O
0	int
)	O
{	O
if	O
(	O
WIFEXITED	O
(	O
status	pointer
)	O
)	O
{	O
exitval	int
=	O
WEXITSTATUS	O
(	O
status	pointer
)	O
;	O
}	O
else	O
{	O
exitval	int
=	O
220	int
;	O
}	O
*	O
do_break	pointer
=	O
1	int
;	O
}	O
return	O
exitval	int
;	O
}	O
int	O
loop	function
(	O
int	O
ptymin	int
,	O
int	O
ofd	int
,	O
int	O
ifd	int
,	O
int	O
ptymout	int
,	O
int	O
ignoreeof	int
,	O
int	O
pid	int
,	O
int	O
*	O
waitret	pointer
,	O
int	O
*	O
statusp	pointer
,	O
int	O
verbose	int
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
stdioPump	function
(	O
ptymin	int
,	O
ofd	int
,	O
ifd	int
,	O
ptymout	int
,	O
verbose	int
,	O
pid	int
,	O
waitret	pointer
,	O
statusp	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
void	O
sig_term	function
(	O
int	O
signo	int
)	O
{	O
sigcaught	int
=	O
1	int
;	O
return	O
;	O
}	O
static	O
void	O
sig_fatal_handler	function
(	O
int	O
signo	int
)	O
{	O
int	O
status	pointer
;	O
if	O
(	O
signo	int
==	O
SIGPIPE	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Caught SIGPIPE on %s (fatal).\n"	pointer
,	O
gl_who	array
)	O
;	O
if	O
(	O
gl_verbose	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"waiting on tar process %d\n"	pointer
,	O
g_pid1	int
)	O
;	O
if	O
(	O
g_pid1	int
>	O
0	int
)	O
kill	function
(	O
g_pid1	int
,	O
SIGTERM	int
)	O
;	O
if	O
(	O
g_pid1	int
>	O
0	int
)	O
waitpid	function
(	O
g_pid1	int
,	O
&	O
status	pointer
,	O
0	int
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
}	O
static	O
void	O
subsig_handler	function
(	O
int	O
signo	int
)	O
{	O
if	O
(	O
signo	int
==	O
SIGTERM	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Caught SIGTERM on (sub) %s.\n"	pointer
,	O
gl_who	array
)	O
;	O
if	O
(	O
gl_verbose	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Sending sigterm to tar process %d\n"	pointer
,	O
g_tarpid	int
)	O
;	O
if	O
(	O
g_tarpid	int
>	O
0	int
)	O
kill	function
(	O
g_tarpid	int
,	O
SIGTERM	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
}	O
static	O
void	O
sig_handler	function
(	O
int	O
signo	int
)	O
{	O
if	O
(	O
signo	int
==	O
SIGTERM	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Caught SIGTERM on %s.\n"	pointer
,	O
gl_who	array
)	O
;	O
sleep	function
(	O
1	int
)	O
;	O
exit	function
(	O
20	int
)	O
;	O
}	O
else	O
if	O
(	O
signo	int
==	O
SIGHUP	int
||	O
signo	int
==	O
SIGINT	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Caught SIGINT on %s.\n"	pointer
,	O
gl_who	array
)	O
;	O
sleep	function
(	O
1	int
)	O
;	O
exit	function
(	O
21	int
)	O
;	O
}	O
else	O
if	O
(	O
signo	int
==	O
SIGPIPE	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Caught SIGPIPE on %s.\n"	pointer
,	O
gl_who	array
)	O
;	O
if	O
(	O
strcmp	function
(	O
gl_who	array
,	O
"client"	pointer
)	O
==	O
0	int
)	O
{	O
exit	function
(	O
0	int
)	O
;	O
}	O
g_sigpipe_ret	int
=	O
0	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Caught signal %d on %s.\n"	pointer
,	O
signo	int
,	O
gl_who	array
)	O
;	O
sleep	function
(	O
1	int
)	O
;	O
exit	function
(	O
23	int
)	O
;	O
}	O
}	O
static	O
int	O
fdgo	function
(	O
int	O
select_ret	int
,	O
int	O
read_ret	int
,	O
char	O
*	O
location	pointer
)	O
{	O
if	O
(	O
select_ret	int
>	O
0	int
&&	O
read_ret	int
<=	O
0	int
)	O
{	O
if	O
(	O
read_ret	int
<	O
0	int
)	O
{	O
}	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
select_ret	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Uh-oh [select] ret at %s.\n"	pointer
,	O
location	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
select_ret	int
>	O
0	int
&&	O
read_ret	int
>	O
0	int
)	O
{	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
select_ret	int
==	O
0	int
&&	O
read_ret	int
==	O
0	int
)	O
{	O
return	O
1	int
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
}	O
int	O
doWritefdSelectTest	function
(	O
int	O
fd	int
,	O
char	O
*	O
location	pointer
,	O
int	O
*	O
fReturn	pointer
,	O
int	O
verbose	int
)	O
{	O
fd_set	struct
rfds	struct
;	O
struct	O
timeval	struct
tv	struct
;	O
int	O
retval	int
;	O
FD_ZERO	O
(	O
&	O
rfds	struct
)	O
;	O
FD_SET	O
(	O
fd	int
,	O
&	O
rfds	struct
)	O
;	O
tv	struct
.	O
tv_sec	long
=	O
0	int
;	O
tv	struct
.	O
tv_usec	long
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
rfds	struct
)	O
;	O
FD_SET	O
(	O
fd	int
,	O
&	O
rfds	struct
)	O
;	O
retval	int
=	O
select	function
(	O
fd	int
+	O
1	int
,	O
NULL	O
,	O
&	O
rfds	struct
,	O
NULL	O
,	O
&	O
tv	struct
)	O
;	O
if	O
(	O
verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"doWritefdSelectTest: [%s], select returned %d.\n"	pointer
,	O
location	pointer
,	O
retval	int
)	O
;	O
}	O
return	O
retval	int
;	O
}	O
int	O
doPumpCycle	function
(	O
int	O
ofd	int
,	O
int	O
ifd	int
,	O
char	O
*	O
location	pointer
,	O
int	O
sec	int
,	O
int	O
usec	int
,	O
int	O
*	O
readReturn	pointer
,	O
int	O
verbose	int
)	O
{	O
fd_set	struct
rfds	struct
;	O
struct	O
timeval	struct
tv	struct
;	O
int	O
retval	int
,	O
ret	int
=	O
0	int
;	O
int	O
wret	int
;	O
char	O
buf	array
[	O
PIPE_BUF	int
]	O
;	O
FD_ZERO	O
(	O
&	O
rfds	struct
)	O
;	O
FD_SET	O
(	O
ifd	int
,	O
&	O
rfds	struct
)	O
;	O
tv	struct
.	O
tv_sec	long
=	O
sec	int
;	O
tv	struct
.	O
tv_usec	long
=	O
usec	int
;	O
FD_ZERO	O
(	O
&	O
rfds	struct
)	O
;	O
FD_SET	O
(	O
ifd	int
,	O
&	O
rfds	struct
)	O
;	O
*	O
readReturn	pointer
=	O
0	int
;	O
retval	int
=	O
select	function
(	O
ifd	int
+	O
1	int
,	O
&	O
rfds	struct
,	O
NULL	O
,	O
NULL	O
,	O
&	O
tv	struct
)	O
;	O
if	O
(	O
retval	int
>	O
0	int
)	O
{	O
ret	int
=	O
read	function
(	O
ifd	int
,	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
)	O
;	O
*	O
readReturn	pointer
=	O
ret	int
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
}	O
else	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
if	O
(	O
verbose	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"GOT EOF read returned [%d] location=[%s] fd=[%d]\n"	pointer
,	O
ret	int
,	O
location	pointer
,	O
ifd	int
)	O
;	O
}	O
if	O
(	O
ret	int
>	O
0	int
)	O
{	O
if	O
(	O
ofd	int
>=	O
0	int
&&	O
(	O
wret	int
=	O
write	function
(	O
ofd	int
,	O
buf	array
,	O
ret	int
)	O
)	O
!=	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"write error ret=%d at location %s\n"	pointer
,	O
wret	int
,	O
location	pointer
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
retval	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"select retval = %d location=[%s]\n"	pointer
,	O
retval	int
,	O
location	pointer
)	O
;	O
}	O
else	O
{	O
retval	int
=	O
0	int
;	O
}	O
return	O
retval	int
;	O
}	O
static	O
int	O
sumpPump	function
(	O
int	O
ofd	int
,	O
int	O
ifd	int
,	O
char	O
*	O
location	pointer
,	O
int	O
sec	int
,	O
int	O
usec	int
,	O
int	O
verbose	int
,	O
int	O
loopcount	int
)	O
{	O
int	O
count	int
=	O
0	int
;	O
int	O
rret	int
,	O
selret	int
,	O
retval	int
=	O
1	int
;	O
while	O
(	O
loopcount	int
==	O
0	int
||	O
count	int
<	O
loopcount	int
)	O
{	O
selret	int
=	O
doPumpCycle	function
(	O
ofd	int
,	O
ifd	int
,	O
location	pointer
,	O
sec	int
,	O
usec	int
,	O
&	O
rret	int
,	O
verbose	int
)	O
;	O
count	int
++	O
;	O
retval	int
=	O
fdgo	function
(	O
selret	int
,	O
rret	int
,	O
location	pointer
)	O
;	O
if	O
(	O
verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"sumpPump: fdgo(%d, %d, %s) returned %d\n"	pointer
,	O
selret	int
,	O
rret	int
,	O
location	pointer
,	O
retval	int
)	O
;	O
}	O
if	O
(	O
retval	int
<=	O
0	int
)	O
{	O
break	O
;	O
}	O
else	O
if	O
(	O
loopcount	int
==	O
0	int
&&	O
retval	int
>	O
0	int
&&	O
rret	int
==	O
0	int
)	O
{	O
retval	int
=	O
0	int
;	O
break	O
;	O
}	O
else	O
{	O
;	O
}	O
}	O
return	O
retval	int
;	O
}	O
int	O
swlib_pump_amount	function
(	O
int	O
discharge_fd	int
,	O
int	O
suction_fd	int
,	O
int	O
amount	pointer
)	O
{	O
int	O
i	int
=	O
amount	pointer
;	O
if	O
(	O
swlib__pipe_pump	function
(	O
suction_fd	int
,	O
discharge_fd	int
,	O
(	O
int	O
*	O
)	O
(	O
NULL	O
)	O
,	O
(	O
int	O
*	O
)	O
(	O
NULL	O
)	O
,	O
&	O
i	int
)	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
return	O
i	int
;	O
}	O
static	O
int	O
swlib__pipe_pump	function
(	O
int	O
suction_fd	int
,	O
int	O
discharge_fd	int
,	O
int	O
*	O
status	pointer
,	O
int	O
*	O
childGotStatus	pointer
,	O
int	O
*	O
amount	pointer
)	O
{	O
int	O
commandFailed	int
=	O
0	int
,	O
pumpDead	int
=	O
0	int
,	O
bytes	int
,	O
ibytes	int
,	O
byteswritten	int
=	O
0	int
;	O
int	O
remains	int
;	O
int	O
c_amount	int
=	O
*	O
amount	pointer
;	O
char	O
buf	array
[	O
512	int
]	O
;	O
if	O
(	O
c_amount	int
<	O
0	int
)	O
{	O
do	O
{	O
bytes	int
=	O
read	function
(	O
suction_fd	int
,	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
)	O
;	O
if	O
(	O
bytes	int
<	O
0	int
)	O
{	O
commandFailed	int
=	O
1	int
;	O
pumpDead	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
bytes	int
==	O
0	int
)	O
{	O
pumpDead	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
discharge_fd	int
>=	O
0	int
)	O
{	O
if	O
(	O
(	O
bytes	int
=	O
write	function
(	O
discharge_fd	int
,	O
buf	array
,	O
bytes	int
)	O
)	O
!=	O
bytes	int
)	O
{	O
commandFailed	int
=	O
2	int
;	O
pumpDead	int
=	O
1	int
;	O
}	O
}	O
}	O
byteswritten	int
+=	O
bytes	int
;	O
}	O
while	O
(	O
!	O
pumpDead	int
)	O
;	O
*	O
amount	pointer
=	O
byteswritten	int
;	O
return	O
commandFailed	int
;	O
}	O
else	O
{	O
remains	int
=	O
sizeof	O
(	O
buf	array
)	O
;	O
if	O
(	O
(	O
c_amount	int
-	O
byteswritten	int
)	O
<	O
remains	int
)	O
{	O
remains	int
=	O
c_amount	int
-	O
byteswritten	int
;	O
}	O
do	O
{	O
bytes	int
=	O
read	function
(	O
suction_fd	int
,	O
buf	array
,	O
remains	int
)	O
;	O
if	O
(	O
bytes	int
<	O
0	int
)	O
{	O
commandFailed	int
=	O
1	int
;	O
pumpDead	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
bytes	int
==	O
0	int
)	O
{	O
pumpDead	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
bytes	int
)	O
{	O
if	O
(	O
discharge_fd	int
>=	O
0	int
)	O
{	O
ibytes	int
=	O
write	function
(	O
discharge_fd	int
,	O
buf	array
,	O
bytes	int
)	O
;	O
}	O
else	O
{	O
ibytes	int
=	O
bytes	int
;	O
}	O
if	O
(	O
ibytes	int
!=	O
bytes	int
)	O
{	O
commandFailed	int
=	O
2	int
;	O
pumpDead	int
=	O
1	int
;	O
}	O
else	O
{	O
byteswritten	int
+=	O
bytes	int
;	O
if	O
(	O
(	O
c_amount	int
-	O
byteswritten	int
)	O
<	O
remains	int
)	O
{	O
if	O
(	O
(	O
remains	int
=	O
c_amount	int
-	O
byteswritten	int
)	O
>	O
sizeof	O
(	O
buf	array
)	O
)	O
{	O
remains	int
=	O
sizeof	O
(	O
buf	array
)	O
;	O
}	O
}	O
}	O
}	O
}	O
while	O
(	O
!	O
pumpDead	int
&&	O
remains	int
)	O
;	O
*	O
amount	pointer
=	O
byteswritten	int
;	O
return	O
commandFailed	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
swlib_pipe_pump	function
(	O
int	O
ofd	int
,	O
int	O
ifd	int
)	O
{	O
return	O
swlib_pump_amount	function
(	O
ofd	int
,	O
ifd	int
,	O
-	O
1	int
)	O
;	O
}	O
static	O
int	O
stdioPump	function
(	O
int	O
stdoutfd	int
,	O
int	O
outputpipefd	int
,	O
int	O
inputpipefd	int
,	O
int	O
stdinfd	int
,	O
int	O
opt_verbose	int
,	O
int	O
pid	int
,	O
int	O
*	O
waitret	pointer
,	O
int	O
*	O
statusp	pointer
)	O
{	O
int	O
ret0	int
,	O
ret1	int
;	O
int	O
retval	int
=	O
0	int
;	O
int	O
haveclose0	int
=	O
0	int
;	O
int	O
haveclose1	int
=	O
0	int
;	O
int	O
have_checked_for_epipe	int
=	O
0	int
;	O
ret1	int
=	O
sumpPump	function
(	O
stdoutfd	int
,	O
outputpipefd	int
,	O
"ret1"	pointer
,	O
0	int
,	O
200	int
,	O
opt_verbose	int
,	O
1	int
)	O
;	O
ret0	int
=	O
sumpPump	function
(	O
inputpipefd	int
,	O
stdinfd	int
,	O
"ret0"	pointer
,	O
0	int
,	O
200	int
,	O
opt_verbose	int
,	O
1	int
)	O
;	O
while	O
(	O
ret0	int
>	O
0	int
||	O
ret1	int
>	O
0	int
)	O
{	O
if	O
(	O
ret1	int
>	O
0	int
)	O
{	O
ret1	int
=	O
sumpPump	function
(	O
stdoutfd	int
,	O
outputpipefd	int
,	O
"ret1"	pointer
,	O
0	int
,	O
200	int
,	O
opt_verbose	int
,	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
haveclose1	int
==	O
0	int
)	O
{	O
if	O
(	O
opt_verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"closing (ret1) outputpipefd fd=%d\n"	pointer
,	O
outputpipefd	int
)	O
;	O
}	O
close	function
(	O
outputpipefd	int
)	O
;	O
haveclose1	int
=	O
1	int
;	O
}	O
if	O
(	O
opt_verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"fd0=%d fd1=%d ret (ret1)finishvalue=%d\n"	pointer
,	O
stdoutfd	int
,	O
outputpipefd	int
,	O
ret1	int
)	O
;	O
}	O
}	O
if	O
(	O
ret0	int
>	O
0	int
)	O
{	O
ret0	int
=	O
sumpPump	function
(	O
inputpipefd	int
,	O
stdinfd	int
,	O
"ret0"	pointer
,	O
0	int
,	O
200	int
,	O
opt_verbose	int
,	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
haveclose0	int
==	O
0	int
)	O
{	O
if	O
(	O
opt_verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"closing (ret0) inputpipefd fd=%d\n"	pointer
,	O
inputpipefd	int
)	O
;	O
}	O
close	function
(	O
inputpipefd	int
)	O
;	O
haveclose0	int
=	O
1	int
;	O
}	O
if	O
(	O
opt_verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"fd2=%d fd3=%d ret (ret0)finishvalue=%d\n"	pointer
,	O
inputpipefd	int
,	O
stdinfd	int
,	O
ret0	int
)	O
;	O
}	O
}	O
if	O
(	O
ret1	int
<=	O
0	int
&&	O
ret0	int
>	O
0	int
&&	O
have_checked_for_epipe	int
==	O
0	int
)	O
{	O
int	O
r_1	int
;	O
have_checked_for_epipe	int
=	O
1	int
;	O
if	O
(	O
doWritefdSelectTest	function
(	O
inputpipefd	int
,	O
"closetest0"	pointer
,	O
&	O
r_1	int
,	O
opt_verbose	int
)	O
)	O
{	O
if	O
(	O
pid	int
>	O
0	int
&&	O
waitret	pointer
&&	O
statusp	pointer
)	O
{	O
*	O
waitret	pointer
=	O
waitpid	function
(	O
pid	int
,	O
statusp	pointer
,	O
WNOHANG	int
)	O
;	O
if	O
(	O
*	O
waitret	pointer
>	O
0	int
)	O
{	O
ret0	int
=	O
0	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"expected a child status: %s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"may require SIGINT or a EOF to terminate.\n"	pointer
)	O
;	O
ret0	int
=	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
ret0	int
=	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
ret0	int
=	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
ret0	int
<	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"stdioPump ERROR on ret0\n"	pointer
)	O
;	O
if	O
(	O
ret1	int
<	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"stdioPump ERROR on ret1\n"	pointer
)	O
;	O
if	O
(	O
opt_verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"fd0=%d fd1=%d ret1 finishvalue=%d\n"	pointer
,	O
stdoutfd	int
,	O
outputpipefd	int
,	O
ret1	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"fd2=%d fd3=%d ret0 finishvalue=%d\n"	pointer
,	O
inputpipefd	int
,	O
stdinfd	int
,	O
ret0	int
)	O
;	O
}	O
if	O
(	O
haveclose0	int
==	O
0	int
)	O
{	O
if	O
(	O
opt_verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"closing2 (ret0) inputpipefd fd=%d\n"	pointer
,	O
inputpipefd	int
)	O
;	O
}	O
close	function
(	O
inputpipefd	int
)	O
;	O
haveclose0	int
=	O
1	int
;	O
}	O
if	O
(	O
haveclose1	int
==	O
0	int
)	O
{	O
if	O
(	O
opt_verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"closing2 (ret1) outputpipefd fd=%d\n"	pointer
,	O
outputpipefd	int
)	O
;	O
}	O
close	function
(	O
outputpipefd	int
)	O
;	O
haveclose1	int
=	O
1	int
;	O
}	O
return	O
retval	int
;	O
}	O
