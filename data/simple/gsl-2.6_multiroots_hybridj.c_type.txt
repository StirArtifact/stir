typedef	O
struct	O
{	O
size_t	long
iter	long
;	O
size_t	long
ncfail	long
;	O
size_t	long
ncsuc	long
;	O
size_t	long
nslow1	long
;	O
size_t	long
nslow2	long
;	O
double	O
fnorm	double
;	O
double	O
delta	double
;	O
gsl_matrix	struct
*	O
q	pointer
;	O
gsl_matrix	struct
*	O
r	pointer
;	O
gsl_vector	struct
*	O
tau	double
;	O
gsl_vector	struct
*	O
diag	pointer
;	O
gsl_vector	struct
*	O
qtf	pointer
;	O
gsl_vector	struct
*	O
newton	pointer
;	O
gsl_vector	struct
*	O
gradient	pointer
;	O
gsl_vector	struct
*	O
x_trial	pointer
;	O
gsl_vector	struct
*	O
f_trial	pointer
;	O
gsl_vector	struct
*	O
df	pointer
;	O
gsl_vector	struct
*	O
qtdf	pointer
;	O
gsl_vector	struct
*	O
rdx	pointer
;	O
gsl_vector	struct
*	O
w	pointer
;	O
gsl_vector	struct
*	O
v	pointer
;	O
}	O
hybridj_state_t	struct
;	O
static	O
int	O
hybridj_alloc	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
n	int
)	O
;	O
static	O
int	O
hybridj_set	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
;	O
static	O
int	O
hybridsj_set	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
;	O
static	O
int	O
hybridj_set_impl	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
int	O
scale	int
)	O
;	O
static	O
int	O
hybridj_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
;	O
static	O
void	O
hybridj_free	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
hybridj_iterate_impl	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
int	O
scale	int
)	O
;	O
static	O
int	O
hybridj_alloc	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
n	int
)	O
{	O
hybridj_state_t	struct
*	O
state	pointer
=	O
(	O
hybridj_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_matrix	struct
*	O
q	pointer
,	O
*	O
r	pointer
;	O
gsl_vector	struct
*	O
tau	double
,	O
*	O
diag	pointer
,	O
*	O
qtf	pointer
,	O
*	O
newton	pointer
,	O
*	O
gradient	pointer
,	O
*	O
x_trial	pointer
,	O
*	O
f_trial	pointer
,	O
*	O
df	pointer
,	O
*	O
qtdf	pointer
,	O
*	O
rdx	pointer
,	O
*	O
w	pointer
,	O
*	O
v	pointer
;	O
q	pointer
=	O
gsl_matrix_calloc	function
(	O
n	int
,	O
n	int
)	O
;	O
if	O
(	O
q	pointer
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for q"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
q	pointer
=	O
q	pointer
;	O
r	pointer
=	O
gsl_matrix_calloc	function
(	O
n	int
,	O
n	int
)	O
;	O
if	O
(	O
r	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for r"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
r	pointer
=	O
r	pointer
;	O
tau	double
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
tau	double
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for tau"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
tau	double
=	O
tau	double
;	O
diag	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
diag	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for diag"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
diag	pointer
=	O
diag	pointer
;	O
qtf	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
qtf	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for qtf"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
qtf	pointer
=	O
qtf	pointer
;	O
newton	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
newton	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for newton"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
newton	pointer
=	O
newton	pointer
;	O
gradient	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
gradient	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for gradient"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
gradient	pointer
=	O
gradient	pointer
;	O
x_trial	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
x_trial	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for x_trial"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
x_trial	pointer
=	O
x_trial	pointer
;	O
f_trial	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
f_trial	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for f_trial"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
f_trial	pointer
=	O
f_trial	pointer
;	O
df	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
df	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
f_trial	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for df"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
df	pointer
=	O
df	pointer
;	O
qtdf	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
qtdf	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
f_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
df	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for qtdf"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
qtdf	pointer
=	O
qtdf	pointer
;	O
rdx	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
rdx	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
f_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
df	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtdf	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for rdx"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
rdx	pointer
=	O
rdx	pointer
;	O
w	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
w	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
f_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
df	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtdf	pointer
)	O
;	O
gsl_vector_free	function
(	O
rdx	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for w"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
w	pointer
=	O
w	pointer
;	O
v	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
v	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
q	pointer
)	O
;	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
f_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
df	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtdf	pointer
)	O
;	O
gsl_vector_free	function
(	O
rdx	pointer
)	O
;	O
gsl_vector_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for v"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
v	pointer
=	O
v	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
hybridj_set	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
int	O
status	int
=	O
hybridj_set_impl	function
(	O
vstate	pointer
,	O
fdf	pointer
,	O
x	double
,	O
f	pointer
,	O
J	pointer
,	O
dx	pointer
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
hybridsj_set	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
int	O
status	int
=	O
hybridj_set_impl	function
(	O
vstate	pointer
,	O
fdf	pointer
,	O
x	double
,	O
f	pointer
,	O
J	pointer
,	O
dx	pointer
,	O
1	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
hybridj_set_impl	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
int	O
scale	int
)	O
{	O
hybridj_state_t	struct
*	O
state	pointer
=	O
(	O
hybridj_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_matrix	struct
*	O
q	pointer
=	O
state	pointer
->	O
q	pointer
;	O
gsl_matrix	struct
*	O
r	pointer
=	O
state	pointer
->	O
r	pointer
;	O
gsl_vector	struct
*	O
tau	double
=	O
state	pointer
->	O
tau	double
;	O
gsl_vector	struct
*	O
diag	pointer
=	O
state	pointer
->	O
diag	pointer
;	O
GSL_MULTIROOT_FN_EVAL_F_DF	O
(	O
fdf	pointer
,	O
x	double
,	O
f	pointer
,	O
J	pointer
)	O
;	O
state	pointer
->	O
iter	long
=	O
1	int
;	O
state	pointer
->	O
fnorm	double
=	O
enorm	function
(	O
f	pointer
)	O
;	O
state	pointer
->	O
ncfail	long
=	O
0	int
;	O
state	pointer
->	O
ncsuc	long
=	O
0	int
;	O
state	pointer
->	O
nslow1	long
=	O
0	int
;	O
state	pointer
->	O
nslow2	long
=	O
0	int
;	O
gsl_vector_set_all	function
(	O
dx	pointer
,	O
0.0	int
)	O
;	O
if	O
(	O
scale	int
)	O
compute_diag	function
(	O
J	pointer
,	O
diag	pointer
)	O
;	O
else	O
gsl_vector_set_all	function
(	O
diag	pointer
,	O
1.0	int
)	O
;	O
state	pointer
->	O
delta	double
=	O
compute_delta	function
(	O
diag	pointer
,	O
x	double
)	O
;	O
gsl_linalg_QR_decomp	function
(	O
J	pointer
,	O
tau	double
)	O
;	O
gsl_linalg_QR_unpack	function
(	O
J	pointer
,	O
tau	double
,	O
q	pointer
,	O
r	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
hybridj_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
int	O
status	int
=	O
hybridj_iterate_impl	function
(	O
vstate	pointer
,	O
fdf	pointer
,	O
x	double
,	O
f	pointer
,	O
J	pointer
,	O
dx	pointer
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
hybridsj_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
int	O
status	int
=	O
hybridj_iterate_impl	function
(	O
vstate	pointer
,	O
fdf	pointer
,	O
x	double
,	O
f	pointer
,	O
J	pointer
,	O
dx	pointer
,	O
1	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
hybridj_iterate_impl	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_multiroot_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
int	O
scale	int
)	O
{	O
hybridj_state_t	struct
*	O
state	pointer
=	O
(	O
hybridj_state_t	struct
*	O
)	O
vstate	pointer
;	O
const	O
double	O
fnorm	double
=	O
state	pointer
->	O
fnorm	double
;	O
gsl_matrix	struct
*	O
q	pointer
=	O
state	pointer
->	O
q	pointer
;	O
gsl_matrix	struct
*	O
r	pointer
=	O
state	pointer
->	O
r	pointer
;	O
gsl_vector	struct
*	O
tau	double
=	O
state	pointer
->	O
tau	double
;	O
gsl_vector	struct
*	O
diag	pointer
=	O
state	pointer
->	O
diag	pointer
;	O
gsl_vector	struct
*	O
qtf	pointer
=	O
state	pointer
->	O
qtf	pointer
;	O
gsl_vector	struct
*	O
x_trial	pointer
=	O
state	pointer
->	O
x_trial	pointer
;	O
gsl_vector	struct
*	O
f_trial	pointer
=	O
state	pointer
->	O
f_trial	pointer
;	O
gsl_vector	struct
*	O
df	pointer
=	O
state	pointer
->	O
df	pointer
;	O
gsl_vector	struct
*	O
qtdf	pointer
=	O
state	pointer
->	O
qtdf	pointer
;	O
gsl_vector	struct
*	O
rdx	pointer
=	O
state	pointer
->	O
rdx	pointer
;	O
gsl_vector	struct
*	O
w	pointer
=	O
state	pointer
->	O
w	pointer
;	O
gsl_vector	struct
*	O
v	pointer
=	O
state	pointer
->	O
v	pointer
;	O
double	O
prered	double
,	O
actred	double
;	O
double	O
pnorm	double
,	O
fnorm1	double
,	O
fnorm1p	double
;	O
double	O
ratio	double
;	O
double	O
p1	double
=	O
0.1	int
,	O
p5	double
=	O
0.5	int
,	O
p001	double
=	O
0.001	int
,	O
p0001	double
=	O
0.0001	int
;	O
compute_qtf	function
(	O
q	pointer
,	O
f	pointer
,	O
qtf	pointer
)	O
;	O
dogleg	function
(	O
r	pointer
,	O
qtf	pointer
,	O
diag	pointer
,	O
state	pointer
->	O
delta	double
,	O
state	pointer
->	O
newton	pointer
,	O
state	pointer
->	O
gradient	pointer
,	O
dx	pointer
)	O
;	O
compute_trial_step	function
(	O
x	double
,	O
dx	pointer
,	O
state	pointer
->	O
x_trial	pointer
)	O
;	O
pnorm	double
=	O
scaled_enorm	function
(	O
diag	pointer
,	O
dx	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
iter	long
==	O
1	int
)	O
{	O
if	O
(	O
pnorm	double
<	O
state	pointer
->	O
delta	double
)	O
{	O
state	pointer
->	O
delta	double
=	O
pnorm	double
;	O
}	O
}	O
{	O
int	O
status	int
=	O
GSL_MULTIROOT_FN_EVAL_F	O
(	O
fdf	pointer
,	O
x_trial	pointer
,	O
f_trial	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
GSL_EBADFUNC	int
;	O
}	O
}	O
compute_df	function
(	O
f_trial	pointer
,	O
f	pointer
,	O
df	pointer
)	O
;	O
fnorm1	double
=	O
enorm	function
(	O
f_trial	pointer
)	O
;	O
actred	double
=	O
compute_actual_reduction	function
(	O
fnorm	double
,	O
fnorm1	double
)	O
;	O
compute_rdx	function
(	O
r	pointer
,	O
dx	pointer
,	O
rdx	pointer
)	O
;	O
fnorm1p	double
=	O
enorm_sum	function
(	O
qtf	pointer
,	O
rdx	pointer
)	O
;	O
prered	double
=	O
compute_predicted_reduction	function
(	O
fnorm	double
,	O
fnorm1p	double
)	O
;	O
if	O
(	O
prered	double
>	O
0	int
)	O
{	O
ratio	double
=	O
actred	double
/	O
prered	double
;	O
}	O
else	O
{	O
ratio	double
=	O
0	int
;	O
}	O
if	O
(	O
ratio	double
<	O
p1	double
)	O
{	O
state	pointer
->	O
ncsuc	long
=	O
0	int
;	O
state	pointer
->	O
ncfail	long
++	O
;	O
state	pointer
->	O
delta	double
*=	O
p5	double
;	O
}	O
else	O
{	O
state	pointer
->	O
ncfail	long
=	O
0	int
;	O
state	pointer
->	O
ncsuc	long
++	O
;	O
if	O
(	O
ratio	double
>=	O
p5	double
||	O
state	pointer
->	O
ncsuc	long
>	O
1	int
)	O
state	pointer
->	O
delta	double
=	O
GSL_MAX	O
(	O
state	pointer
->	O
delta	double
,	O
pnorm	double
/	O
p5	double
)	O
;	O
if	O
(	O
fabs	function
(	O
ratio	double
-	O
1	int
)	O
<=	O
p1	double
)	O
state	pointer
->	O
delta	double
=	O
pnorm	double
/	O
p5	double
;	O
}	O
if	O
(	O
ratio	double
>=	O
p0001	double
)	O
{	O
gsl_vector_memcpy	function
(	O
x	double
,	O
x_trial	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
f	pointer
,	O
f_trial	pointer
)	O
;	O
state	pointer
->	O
fnorm	double
=	O
fnorm1	double
;	O
state	pointer
->	O
iter	long
++	O
;	O
}	O
state	pointer
->	O
nslow1	long
++	O
;	O
if	O
(	O
actred	double
>=	O
p001	double
)	O
state	pointer
->	O
nslow1	long
=	O
0	int
;	O
if	O
(	O
actred	double
>=	O
p1	double
)	O
state	pointer
->	O
nslow2	long
=	O
0	int
;	O
if	O
(	O
state	pointer
->	O
ncfail	long
==	O
2	int
)	O
{	O
{	O
int	O
status	int
=	O
GSL_MULTIROOT_FN_EVAL_DF	O
(	O
fdf	pointer
,	O
x	double
,	O
J	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
GSL_EBADFUNC	int
;	O
}	O
}	O
state	pointer
->	O
nslow2	long
++	O
;	O
if	O
(	O
state	pointer
->	O
iter	long
==	O
1	int
)	O
{	O
if	O
(	O
scale	int
)	O
compute_diag	function
(	O
J	pointer
,	O
diag	pointer
)	O
;	O
state	pointer
->	O
delta	double
=	O
compute_delta	function
(	O
diag	pointer
,	O
x	double
)	O
;	O
}	O
else	O
{	O
if	O
(	O
scale	int
)	O
update_diag	function
(	O
J	pointer
,	O
diag	pointer
)	O
;	O
}	O
gsl_linalg_QR_decomp	function
(	O
J	pointer
,	O
tau	double
)	O
;	O
gsl_linalg_QR_unpack	function
(	O
J	pointer
,	O
tau	double
,	O
q	pointer
,	O
r	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
compute_qtf	function
(	O
q	pointer
,	O
df	pointer
,	O
qtdf	pointer
)	O
;	O
compute_wv	function
(	O
qtdf	pointer
,	O
rdx	pointer
,	O
dx	pointer
,	O
diag	pointer
,	O
pnorm	double
,	O
w	pointer
,	O
v	pointer
)	O
;	O
gsl_linalg_QR_update	function
(	O
q	pointer
,	O
r	pointer
,	O
w	pointer
,	O
v	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
nslow2	long
==	O
5	int
)	O
{	O
return	O
GSL_ENOPROGJ	int
;	O
}	O
if	O
(	O
state	pointer
->	O
nslow1	long
==	O
10	int
)	O
{	O
return	O
GSL_ENOPROG	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
hybridj_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
hybridj_state_t	struct
*	O
state	pointer
=	O
(	O
hybridj_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
v	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
w	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
rdx	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
qtdf	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
df	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
f_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
tau	double
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
r	pointer
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
q	pointer
)	O
;	O
}	O
static	O
const	O
gsl_multiroot_fdfsolver_type	struct
hybridj_type	struct
=	O
{	O
"hybridj"	pointer
,	O
sizeof	O
(	O
hybridj_state_t	struct
)	O
,	O
&	O
hybridj_alloc	function
,	O
&	O
hybridj_set	function
,	O
&	O
hybridj_iterate	function
,	O
&	O
hybridj_free	function
}	O
;	O
static	O
const	O
gsl_multiroot_fdfsolver_type	struct
hybridsj_type	struct
=	O
{	O
"hybridsj"	pointer
,	O
sizeof	O
(	O
hybridj_state_t	struct
)	O
,	O
&	O
hybridj_alloc	function
,	O
&	O
hybridsj_set	function
,	O
&	O
hybridsj_iterate	function
,	O
&	O
hybridj_free	function
}	O
;	O
const	O
gsl_multiroot_fdfsolver_type	struct
*	O
gsl_multiroot_fdfsolver_hybridj	pointer
=	O
&	O
hybridj_type	struct
;	O
const	O
gsl_multiroot_fdfsolver_type	struct
*	O
gsl_multiroot_fdfsolver_hybridsj	pointer
=	O
&	O
hybridsj_type	struct
;	O
