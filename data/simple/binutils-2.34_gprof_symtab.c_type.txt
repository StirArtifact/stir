static	O
int	O
cmp_addr	function
(	O
const	O
PTR	O
,	O
const	O
PTR	O
)	O
;	O
Sym_Table	struct
symtab	struct
;	O
void	O
sym_init	function
(	O
Sym	struct
*	O
sym	pointer
)	O
{	O
memset	function
(	O
sym	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
sym	pointer
)	O
)	O
;	O
sym	pointer
->	O
hist	struct
.	O
time	struct
=	O
0.0	int
;	O
sym	pointer
->	O
cg	struct
.	O
child_time	double
=	O
0.0	int
;	O
sym	pointer
->	O
cg	struct
.	O
prop	struct
.	O
fract	double
=	O
0.0	int
;	O
sym	pointer
->	O
cg	struct
.	O
prop	struct
.	O
self	double
=	O
0.0	int
;	O
sym	pointer
->	O
cg	struct
.	O
prop	struct
.	O
child	double
=	O
0.0	int
;	O
}	O
static	O
int	O
cmp_addr	function
(	O
const	O
PTR	O
lp	pointer
,	O
const	O
PTR	O
rp	pointer
)	O
{	O
const	O
Sym	struct
*	O
left	pointer
=	O
(	O
const	O
Sym	struct
*	O
)	O
lp	pointer
;	O
const	O
Sym	struct
*	O
right	pointer
=	O
(	O
const	O
Sym	struct
*	O
)	O
rp	pointer
;	O
if	O
(	O
left	pointer
->	O
addr	pointer
>	O
right	pointer
->	O
addr	pointer
)	O
return	O
1	int
;	O
else	O
if	O
(	O
left	pointer
->	O
addr	pointer
<	O
right	pointer
->	O
addr	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
left	pointer
->	O
is_func	int
!=	O
right	pointer
->	O
is_func	int
)	O
return	O
right	pointer
->	O
is_func	int
-	O
left	pointer
->	O
is_func	int
;	O
return	O
left	pointer
->	O
is_static	int
-	O
right	pointer
->	O
is_static	int
;	O
}	O
void	O
symtab_finalize	function
(	O
Sym_Table	struct
*	O
tab	pointer
)	O
{	O
Sym	struct
*	O
src	pointer
,	O
*	O
dst	pointer
;	O
bfd_vma	long
prev_addr	long
;	O
if	O
(	O
!	O
tab	pointer
->	O
len	long
)	O
return	O
;	O
qsort	function
(	O
tab	pointer
->	O
base	int
,	O
tab	pointer
->	O
len	long
,	O
sizeof	O
(	O
Sym	struct
)	O
,	O
cmp_addr	function
)	O
;	O
prev_addr	long
=	O
tab	pointer
->	O
base	int
[	O
0	int
]	O
.	O
addr	pointer
-	O
1	int
;	O
for	O
(	O
src	pointer
=	O
dst	pointer
=	O
tab	pointer
->	O
base	int
;	O
src	pointer
<	O
tab	pointer
->	O
limit	pointer
;	O
++	O
src	pointer
)	O
{	O
if	O
(	O
src	pointer
->	O
addr	pointer
==	O
prev_addr	long
)	O
{	O
if	O
(	O
(	O
!	O
src	pointer
->	O
is_static	int
&&	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
is_static	int
)	O
||	O
(	O
(	O
src	pointer
->	O
is_static	int
==	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
is_static	int
)	O
&&	O
(	O
(	O
src	pointer
->	O
is_func	int
&&	O
!	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
is_func	int
)	O
||	O
(	O
(	O
src	pointer
->	O
is_func	int
==	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
is_func	int
)	O
&&	O
(	O
(	O
src	pointer
->	O
name	pointer
[	O
0	int
]	O
!=	O
'_'	O
&&	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
name	pointer
[	O
0	int
]	O
==	O
'_'	O
)	O
||	O
(	O
src	pointer
->	O
name	pointer
[	O
0	int
]	O
==	O
'_'	O
&&	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
name	pointer
[	O
0	int
]	O
==	O
'_'	O
&&	O
src	pointer
->	O
name	pointer
[	O
1	int
]	O
!=	O
'_'	O
&&	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
name	pointer
[	O
1	int
]	O
==	O
'_'	O
)	O
)	O
)	O
)	O
)	O
)	O
{	O
DBG	O
(	O
AOUTDEBUG	O
|	O
IDDEBUG	O
,	O
printf	function
(	O
"[symtab_finalize] favor %s@%c%c over %s@%c%c"	pointer
,	O
src	pointer
->	O
name	pointer
,	O
src	pointer
->	O
is_static	int
?	O
't'	O
:	O
'T'	O
,	O
src	pointer
->	O
is_func	int
?	O
'F'	O
:	O
'f'	O
,	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
name	pointer
,	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
is_static	int
?	O
't'	O
:	O
'T'	O
,	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
is_func	int
?	O
'F'	O
:	O
'f'	O
)	O
;	O
printf	function
(	O
" (addr=%lx)\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
src	pointer
->	O
addr	pointer
)	O
)	O
;	O
dst	pointer
[	O
-	O
1	int
]	O
=	O
*	O
src	pointer
;	O
}	O
else	O
{	O
DBG	O
(	O
AOUTDEBUG	O
|	O
IDDEBUG	O
,	O
printf	function
(	O
"[symtab_finalize] favor %s@%c%c over %s@%c%c"	pointer
,	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
name	pointer
,	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
is_static	int
?	O
't'	O
:	O
'T'	O
,	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
is_func	int
?	O
'F'	O
:	O
'f'	O
,	O
src	pointer
->	O
name	pointer
,	O
src	pointer
->	O
is_static	int
?	O
't'	O
:	O
'T'	O
,	O
src	pointer
->	O
is_func	int
?	O
'F'	O
:	O
'f'	O
)	O
;	O
printf	function
(	O
" (addr=%lx)\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
src	pointer
->	O
addr	pointer
)	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
dst	pointer
>	O
tab	pointer
->	O
base	int
&&	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
end_addr	long
==	O
0	int
)	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
end_addr	long
=	O
src	pointer
->	O
addr	pointer
-	O
1	int
;	O
if	O
(	O
!	O
src	pointer
->	O
end_addr	long
||	O
src	pointer
->	O
addr	pointer
<=	O
src	pointer
->	O
end_addr	long
)	O
{	O
*	O
dst	pointer
=	O
*	O
src	pointer
;	O
dst	pointer
++	O
;	O
prev_addr	long
=	O
src	pointer
->	O
addr	pointer
;	O
}	O
}	O
}	O
if	O
(	O
tab	pointer
->	O
len	long
>	O
0	int
&&	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
end_addr	long
==	O
0	int
)	O
dst	pointer
[	O
-	O
1	int
]	O
.	O
end_addr	long
=	O
core_text_sect	pointer
->	O
vma	long
+	O
bfd_section_size	function
(	O
core_text_sect	pointer
)	O
-	O
1	int
;	O
DBG	O
(	O
AOUTDEBUG	O
|	O
IDDEBUG	O
,	O
printf	function
(	O
"[symtab_finalize]: removed %d duplicate entries\n"	pointer
,	O
tab	pointer
->	O
len	long
-	O
(	O
int	O
)	O
(	O
dst	pointer
-	O
tab	pointer
->	O
base	int
)	O
)	O
)	O
;	O
tab	pointer
->	O
limit	pointer
=	O
dst	pointer
;	O
tab	pointer
->	O
len	long
=	O
tab	pointer
->	O
limit	pointer
-	O
tab	pointer
->	O
base	int
;	O
DBG	O
(	O
AOUTDEBUG	O
|	O
IDDEBUG	O
,	O
unsigned	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
tab	pointer
->	O
len	long
;	O
++	O
j	int
)	O
{	O
printf	function
(	O
"[symtab_finalize] 0x%lx-0x%lx\t%s\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
tab	pointer
->	O
base	int
[	O
j	int
]	O
.	O
addr	pointer
,	O
(	O
unsigned	O
long	O
)	O
tab	pointer
->	O
base	int
[	O
j	int
]	O
.	O
end_addr	long
,	O
tab	pointer
->	O
base	int
[	O
j	int
]	O
.	O
name	pointer
)	O
;	O
}	O
)	O
;	O
}	O
Sym	struct
*	O
dbg_sym_lookup	function
(	O
Sym_Table	struct
*	O
sym_tab	pointer
,	O
bfd_vma	long
address	long
)	O
{	O
unsigned	O
long	O
low	long
,	O
mid	long
,	O
high	long
;	O
Sym	struct
*	O
sym	pointer
;	O
fprintf	function
(	O
stderr	pointer
,	O
"[dbg_sym_lookup] address 0x%lx\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
address	long
)	O
;	O
sym	pointer
=	O
sym_tab	pointer
->	O
base	int
;	O
for	O
(	O
low	long
=	O
0	int
,	O
high	long
=	O
sym_tab	pointer
->	O
len	long
-	O
1	int
;	O
low	long
!=	O
high	long
;	O
)	O
{	O
mid	long
=	O
(	O
high	long
+	O
low	long
)	O
>>	O
1	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"[dbg_sym_lookup] low=0x%lx, mid=0x%lx, high=0x%lx\n"	pointer
,	O
low	long
,	O
mid	long
,	O
high	long
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"[dbg_sym_lookup] sym[m]=0x%lx sym[m + 1]=0x%lx\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
sym	pointer
[	O
mid	long
]	O
.	O
addr	pointer
,	O
(	O
unsigned	O
long	O
)	O
sym	pointer
[	O
mid	long
+	O
1	int
]	O
.	O
addr	pointer
)	O
;	O
if	O
(	O
sym	pointer
[	O
mid	long
]	O
.	O
addr	pointer
<=	O
address	long
&&	O
sym	pointer
[	O
mid	long
+	O
1	int
]	O
.	O
addr	pointer
>	O
address	long
)	O
return	O
&	O
sym	pointer
[	O
mid	long
]	O
;	O
if	O
(	O
sym	pointer
[	O
mid	long
]	O
.	O
addr	pointer
>	O
address	long
)	O
high	long
=	O
mid	long
;	O
else	O
low	long
=	O
mid	long
+	O
1	int
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"[dbg_sym_lookup] binary search fails???\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
Sym	struct
*	O
sym_lookup	function
(	O
Sym_Table	struct
*	O
sym_tab	pointer
,	O
bfd_vma	long
address	long
)	O
{	O
long	O
low	long
,	O
high	long
;	O
long	O
mid	long
=	O
-	O
1	int
;	O
Sym	struct
*	O
sym	pointer
;	O
int	O
probes	int
=	O
0	int
;	O
if	O
(	O
!	O
sym_tab	pointer
->	O
len	long
)	O
return	O
0	int
;	O
sym	pointer
=	O
sym_tab	pointer
->	O
base	int
;	O
for	O
(	O
low	long
=	O
0	int
,	O
high	long
=	O
sym_tab	pointer
->	O
len	long
-	O
1	int
;	O
low	long
!=	O
high	long
;	O
)	O
{	O
DBG	O
(	O
LOOKUPDEBUG	O
,	O
++	O
probes	int
)	O
;	O
mid	long
=	O
(	O
high	long
+	O
low	long
)	O
/	O
2	int
;	O
if	O
(	O
sym	pointer
[	O
mid	long
]	O
.	O
addr	pointer
<=	O
address	long
&&	O
sym	pointer
[	O
mid	long
+	O
1	int
]	O
.	O
addr	pointer
>	O
address	long
)	O
{	O
if	O
(	O
address	long
>	O
sym	pointer
[	O
mid	long
]	O
.	O
end_addr	long
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
DBG	O
(	O
LOOKUPDEBUG	O
,	O
printf	function
(	O
"[sym_lookup] %d probes (symtab->len=%u)\n"	pointer
,	O
probes	int
,	O
sym_tab	pointer
->	O
len	long
-	O
1	int
)	O
)	O
;	O
return	O
&	O
sym	pointer
[	O
mid	long
]	O
;	O
}	O
}	O
if	O
(	O
sym	pointer
[	O
mid	long
]	O
.	O
addr	pointer
>	O
address	long
)	O
high	long
=	O
mid	long
;	O
else	O
low	long
=	O
mid	long
+	O
1	int
;	O
}	O
if	O
(	O
sym	pointer
[	O
mid	long
+	O
1	int
]	O
.	O
addr	pointer
<=	O
address	long
)	O
{	O
if	O
(	O
address	long
>	O
sym	pointer
[	O
mid	long
+	O
1	int
]	O
.	O
end_addr	long
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
DBG	O
(	O
LOOKUPDEBUG	O
,	O
printf	function
(	O
"[sym_lookup] %d (%u) probes, fall off\n"	pointer
,	O
probes	int
,	O
sym_tab	pointer
->	O
len	long
-	O
1	int
)	O
)	O
;	O
return	O
&	O
sym	pointer
[	O
mid	long
+	O
1	int
]	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
