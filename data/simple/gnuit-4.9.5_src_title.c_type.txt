char	O
*	O
TitleFields	array
[	O
TITLE_FIELDS	int
]	O
=	O
{	O
"TitleForeground"	pointer
,	O
"TitleBackground"	pointer
,	O
"TitleBrightness"	pointer
,	O
"UserName"	pointer
,	O
"TtyName"	pointer
,	O
"ClockForeground"	pointer
,	O
"ClockBackground"	pointer
,	O
"ClockBrightness"	pointer
,	O
}	O
;	O
int	O
TitleColors	array
[	O
TITLE_FIELDS	int
]	O
=	O
{	O
CYAN	int
,	O
BLUE	int
,	O
ON	int
,	O
YELLOW	int
,	O
YELLOW	int
}	O
;	O
static	O
char	O
*	O
product_name	pointer
;	O
static	O
int	O
product_name_length	int
;	O
static	O
int	O
login_name_length	int
;	O
static	O
int	O
tty_device_length	int
;	O
static	O
int	O
info_length	int
;	O
static	O
char	O
login_string	array
[	O
]	O
=	O
"User:"	pointer
;	O
static	O
char	O
ttydev_string	array
[	O
]	O
=	O
"tty:"	pointer
;	O
static	O
char	O
mail_have_none	array
[	O
]	O
=	O
""	pointer
;	O
static	O
char	O
mail_have_mail	array
[	O
]	O
=	O
"(Mail)"	pointer
;	O
static	O
char	O
mail_have_new	array
[	O
]	O
=	O
"(New Mail)"	pointer
;	O
static	O
char	O
*	O
mail_string	pointer
=	O
""	pointer
;	O
static	O
char	O
*	O
mail_file	pointer
=	O
NULL	O
;	O
static	O
off64_t	long
mail_size	long
=	O
0	int
;	O
static	O
time_t	long
mail_mtime	long
=	O
0	int
;	O
static	O
window_t	struct
*	O
title_window	pointer
;	O
extern	O
int	O
in_terminal_mode	function
PROTO	O
(	O
(	O
)	O
)	O
;	O
static	O
int	O
calc_info_length	function
PROTO	O
(	O
(	O
)	O
)	O
;	O
static	O
int	O
mail_check	function
PROTO	O
(	O
(	O
)	O
)	O
;	O
static	O
int	O
calc_info_length	function
(	O
)	O
{	O
info_length	int
=	O
(	O
sizeof	O
(	O
login_string	array
)	O
-	O
1	int
)	O
+	O
1	int
+	O
login_name_length	int
+	O
1	int
+	O
(	O
strlen	function
(	O
mail_string	pointer
)	O
)	O
+	O
1	int
+	O
(	O
sizeof	O
(	O
ttydev_string	array
)	O
-	O
1	int
)	O
+	O
1	int
+	O
tty_device_length	int
+	O
1	int
+	O
6	int
+	O
1	int
;	O
return	O
(	O
info_length	int
)	O
;	O
}	O
void	O
title_init	function
(	O
)	O
{	O
product_name	pointer
=	O
xmalloc	function
(	O
1	int
+	O
strlen	function
(	O
PRODUCT	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
VERSION	pointer
)	O
+	O
1	int
)	O
;	O
sprintf	function
(	O
product_name	pointer
,	O
" %s %s"	pointer
,	O
PRODUCT	pointer
,	O
VERSION	pointer
)	O
;	O
product_name_length	int
=	O
strlen	function
(	O
product_name	pointer
)	O
;	O
login_name_length	int
=	O
strlen	function
(	O
login_name	pointer
)	O
;	O
tty_device_length	int
=	O
strlen	function
(	O
tty_device	pointer
)	O
;	O
mail_file	pointer
=	O
getenv	function
(	O
"MAIL"	pointer
)	O
;	O
if	O
(	O
mail_file	pointer
)	O
{	O
struct	O
stat	struct
s	long
;	O
if	O
(	O
xstat	function
(	O
mail_file	pointer
,	O
&	O
s	long
)	O
!=	O
-	O
1	int
)	O
{	O
mail_size	long
=	O
s	long
.	O
st_size	long
;	O
mail_mtime	long
=	O
s	long
.	O
st_mtime	O
;	O
}	O
}	O
mail_check	function
(	O
)	O
;	O
info_length	int
=	O
calc_info_length	function
(	O
)	O
;	O
title_window	pointer
=	O
window_init	function
(	O
)	O
;	O
}	O
void	O
title_end	function
(	O
)	O
{	O
window_end	function
(	O
title_window	pointer
)	O
;	O
}	O
void	O
title_resize	function
(	O
columns	int
,	O
line	long
)	O
size_t	long
columns	int
,	O
line	long
;	O
{	O
window_resize	function
(	O
title_window	pointer
,	O
0	int
,	O
line	long
,	O
1	int
,	O
columns	int
)	O
;	O
}	O
void	O
clock_refresh	function
(	O
signum	int
)	O
int	O
signum	int
;	O
{	O
int	O
hour	int
;	O
char	O
buf	array
[	O
16	int
]	O
;	O
struct	O
tm	struct
*	O
time	struct
;	O
int	O
line	long
,	O
column	int
;	O
tty_status_t	char
status	int
;	O
if	O
(	O
in_terminal_mode	function
(	O
)	O
)	O
return	O
;	O
if	O
(	O
product_name_length	int
+	O
2	int
+	O
info_length	int
>=	O
title_window	pointer
->	O
columns	int
)	O
return	O
;	O
if	O
(	O
signum	int
&&	O
mail_check	function
(	O
)	O
)	O
{	O
title_update	function
(	O
)	O
;	O
}	O
time	struct
=	O
get_local_time	function
(	O
)	O
;	O
tty_save	function
(	O
&	O
status	int
)	O
;	O
tty_get_cursor	function
(	O
&	O
line	long
,	O
&	O
column	int
)	O
;	O
tty_cursor	function
(	O
OFF	int
)	O
;	O
if	O
(	O
(	O
hour	int
=	O
time	struct
->	O
tm_hour	int
%	O
12	int
)	O
==	O
0	int
)	O
hour	int
=	O
12	int
;	O
sprintf	function
(	O
buf	array
,	O
"%2d:%02d%c"	pointer
,	O
hour	int
,	O
time	struct
->	O
tm_min	int
,	O
(	O
time	struct
->	O
tm_hour	int
<	O
12	int
)	O
?	O
'a'	O
:	O
'p'	O
)	O
;	O
window_goto	function
(	O
title_window	pointer
,	O
0	int
,	O
title_window	pointer
->	O
columns	int
-	O
7	int
)	O
;	O
tty_colors	function
(	O
ClockBrightness	O
,	O
ClockForeground	O
,	O
ClockBackground	O
)	O
;	O
window_puts	function
(	O
title_window	pointer
,	O
buf	array
,	O
strlen	function
(	O
buf	array
)	O
)	O
;	O
tty_goto	function
(	O
line	long
,	O
column	int
)	O
;	O
tty_restore	function
(	O
&	O
status	int
)	O
;	O
if	O
(	O
signum	int
)	O
tty_update	function
(	O
)	O
;	O
}	O
static	O
int	O
mail_check	function
(	O
)	O
{	O
char	O
*	O
old_mail	pointer
=	O
mail_string	pointer
;	O
mail_string	pointer
=	O
mail_have_none	array
;	O
int	O
total	int
=	O
0	int
;	O
int	O
read	pointer
=	O
0	int
;	O
int	O
inheaders	int
=	O
0	int
;	O
int	O
gotstatus	int
=	O
0	int
;	O
FILE	struct
*	O
mbox	pointer
;	O
char	O
line	long
[	O
TMPBUFSIZE	int
]	O
;	O
struct	O
stat	struct
s	long
;	O
struct	O
utimbuf	struct
utbuf	struct
;	O
if	O
(	O
!	O
mail_file	pointer
)	O
return	O
0	int
;	O
if	O
(	O
xstat	function
(	O
mail_file	pointer
,	O
&	O
s	long
)	O
==	O
-	O
1	int
)	O
return	O
0	int
;	O
utbuf	struct
.	O
actime	long
=	O
s	long
.	O
st_atime	O
;	O
utbuf	struct
.	O
modtime	long
=	O
s	long
.	O
st_mtime	O
;	O
mbox	pointer
=	O
fopen	function
(	O
mail_file	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
mbox	pointer
)	O
return	O
0	int
;	O
while	O
(	O
fgets	function
(	O
line	long
,	O
TMPBUFSIZE	int
,	O
mbox	pointer
)	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
line	long
,	O
""	pointer
)	O
==	O
0	int
)	O
inheaders	int
=	O
0	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
line	long
,	O
"From "	pointer
,	O
strlen	function
(	O
"From "	pointer
)	O
)	O
==	O
0	int
)	O
{	O
inheaders	int
=	O
1	int
;	O
gotstatus	int
=	O
0	int
;	O
total	int
++	O
;	O
}	O
else	O
if	O
(	O
inheaders	int
&&	O
!	O
gotstatus	int
&&	O
(	O
strncmp	function
(	O
line	long
,	O
"Status:"	pointer
,	O
strlen	function
(	O
"Status:"	pointer
)	O
)	O
==	O
0	int
)	O
)	O
{	O
char	O
*	O
status	int
=	O
strchr	function
(	O
line	long
,	O
':'	O
)	O
;	O
status	int
++	O
;	O
while	O
(	O
*	O
status	int
&&	O
isspace	function
(	O
*	O
status	int
)	O
)	O
status	int
++	O
;	O
if	O
(	O
*	O
status	int
)	O
{	O
gotstatus	int
=	O
1	int
;	O
if	O
(	O
strchr	function
(	O
status	int
,	O
'R'	O
)	O
)	O
read	pointer
++	O
;	O
}	O
}	O
}	O
fclose	function
(	O
mbox	pointer
)	O
;	O
utime	function
(	O
mail_file	pointer
,	O
&	O
utbuf	struct
)	O
;	O
if	O
(	O
total	int
)	O
{	O
if	O
(	O
total	int
-	O
read	pointer
)	O
{	O
mail_string	pointer
=	O
mail_have_new	array
;	O
}	O
else	O
{	O
mail_string	pointer
=	O
mail_have_mail	array
;	O
}	O
}	O
info_length	int
=	O
calc_info_length	function
(	O
)	O
;	O
if	O
(	O
strcmp	function
(	O
mail_string	pointer
,	O
old_mail	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
1	int
;	O
}	O
void	O
title_update	function
(	O
)	O
{	O
int	O
length	int
;	O
char	O
*	O
buf	array
;	O
tty_status_t	char
status	int
;	O
tty_save	function
(	O
&	O
status	int
)	O
;	O
tty_colors	function
(	O
TitleBrightness	O
,	O
TitleForeground	O
,	O
TitleBackground	O
)	O
;	O
window_goto	function
(	O
title_window	pointer
,	O
0	int
,	O
0	int
)	O
;	O
window_puts	function
(	O
title_window	pointer
,	O
product_name	pointer
,	O
product_name_length	int
)	O
;	O
buf	array
=	O
xmalloc	function
(	O
title_window	pointer
->	O
columns	int
+	O
1	int
)	O
;	O
mail_check	function
(	O
)	O
;	O
if	O
(	O
product_name_length	int
+	O
2	int
+	O
info_length	int
<	O
title_window	pointer
->	O
columns	int
)	O
{	O
length	int
=	O
title_window	pointer
->	O
columns	int
-	O
product_name_length	int
-	O
info_length	int
;	O
assert	O
(	O
length	int
>	O
0	int
)	O
;	O
memset	function
(	O
buf	array
,	O
' '	O
,	O
length	int
)	O
;	O
window_puts	function
(	O
title_window	pointer
,	O
buf	array
,	O
length	int
)	O
;	O
window_goto	function
(	O
title_window	pointer
,	O
0	int
,	O
product_name_length	int
+	O
length	int
)	O
;	O
window_puts	function
(	O
title_window	pointer
,	O
login_string	array
,	O
sizeof	O
(	O
login_string	array
)	O
-	O
1	int
)	O
;	O
window_putc	function
(	O
title_window	pointer
,	O
' '	O
)	O
;	O
tty_foreground	function
(	O
UserName	O
)	O
;	O
window_puts	function
(	O
title_window	pointer
,	O
login_name	pointer
,	O
login_name_length	int
)	O
;	O
window_putc	function
(	O
title_window	pointer
,	O
' '	O
)	O
;	O
window_puts	function
(	O
title_window	pointer
,	O
mail_string	pointer
,	O
strlen	function
(	O
mail_string	pointer
)	O
)	O
;	O
window_putc	function
(	O
title_window	pointer
,	O
' '	O
)	O
;	O
tty_foreground	function
(	O
TitleForeground	O
)	O
;	O
window_puts	function
(	O
title_window	pointer
,	O
ttydev_string	array
,	O
sizeof	O
(	O
ttydev_string	array
)	O
-	O
1	int
)	O
;	O
window_putc	function
(	O
title_window	pointer
,	O
' '	O
)	O
;	O
tty_foreground	function
(	O
TtyName	O
)	O
;	O
window_puts	function
(	O
title_window	pointer
,	O
tty_device	pointer
,	O
tty_device_length	int
)	O
;	O
tty_foreground	function
(	O
TitleForeground	O
)	O
;	O
window_putc	function
(	O
title_window	pointer
,	O
' '	O
)	O
;	O
clock_refresh	function
(	O
0	int
)	O
;	O
window_goto	function
(	O
title_window	pointer
,	O
0	int
,	O
title_window	pointer
->	O
columns	int
-	O
1	int
)	O
;	O
window_putc	function
(	O
title_window	pointer
,	O
' '	O
)	O
;	O
}	O
else	O
if	O
(	O
product_name_length	int
<	O
title_window	pointer
->	O
columns	int
)	O
{	O
length	int
=	O
title_window	pointer
->	O
columns	int
-	O
product_name_length	int
;	O
memset	function
(	O
buf	array
,	O
' '	O
,	O
length	int
)	O
;	O
window_puts	function
(	O
title_window	pointer
,	O
buf	array
,	O
length	int
)	O
;	O
}	O
xfree	function
(	O
buf	array
)	O
;	O
tty_restore	function
(	O
&	O
status	int
)	O
;	O
}	O
