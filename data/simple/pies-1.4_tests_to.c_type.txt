int	O
volatile	O
got_sigchld	int
,	O
got_sigalrm	int
;	O
void	O
sighan	function
(	O
int	O
sig	int
)	O
{	O
switch	O
(	O
sig	int
)	O
{	O
case	O
SIGCHLD	int
:	O
got_sigchld	int
=	O
1	int
;	O
break	O
;	O
case	O
SIGALRM	int
:	O
got_sigalrm	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
progname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
unsigned	O
long	O
n	long
;	O
char	O
*	O
p	pointer
;	O
pid_t	int
pid	int
,	O
ret	int
;	O
int	O
status	int
;	O
if	O
(	O
argc	int
<	O
3	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"usage: %s TIMEOUT COMMAND ARGS...\n"	pointer
,	O
progname	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Runs command with a timeout.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
errno	O
=	O
0	int
;	O
n	long
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
errno	O
||	O
*	O
p	pointer
||	O
n	long
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s is not a valid timeout\n"	pointer
,	O
progname	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
argc	int
-=	O
2	int
;	O
argv	pointer
+=	O
2	int
;	O
signal	function
(	O
SIGALRM	int
,	O
sighan	function
)	O
;	O
signal	function
(	O
SIGCHLD	int
,	O
sighan	function
)	O
;	O
pid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"fork"	pointer
)	O
;	O
exit	function
(	O
127	int
)	O
;	O
}	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
execvp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
argv	pointer
)	O
;	O
perror	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
exit	function
(	O
127	int
)	O
;	O
}	O
alarm	function
(	O
n	long
)	O
;	O
while	O
(	O
1	int
)	O
{	O
pause	function
(	O
)	O
;	O
if	O
(	O
got_sigchld	int
)	O
{	O
alarm	function
(	O
0	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
got_sigalrm	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: timed out\n"	pointer
,	O
progname	pointer
)	O
;	O
kill	function
(	O
pid	int
,	O
SIGKILL	int
)	O
;	O
exit	function
(	O
127	int
)	O
;	O
}	O
}	O
ret	int
=	O
wait	function
(	O
&	O
status	int
)	O
;	O
if	O
(	O
ret	int
!=	O
pid	int
)	O
{	O
perror	function
(	O
"wait"	pointer
)	O
;	O
exit	function
(	O
127	int
)	O
;	O
}	O
if	O
(	O
WIFEXITED	O
(	O
status	int
)	O
)	O
return	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
if	O
(	O
WIFSIGNALED	O
(	O
status	int
)	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s terminated on signal %d\n"	pointer
,	O
progname	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
WTERMSIG	O
(	O
status	int
)	O
)	O
;	O
else	O
if	O
(	O
WIFSTOPPED	O
(	O
status	int
)	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s stopped\n"	pointer
,	O
progname	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s exited with unrecognized status %d\n"	pointer
,	O
progname	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
status	int
)	O
;	O
return	O
127	int
;	O
}	O
