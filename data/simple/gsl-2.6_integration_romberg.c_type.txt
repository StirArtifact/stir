gsl_integration_romberg_workspace	struct
*	O
gsl_integration_romberg_alloc	function
(	O
const	O
size_t	long
n	int
)	O
{	O
gsl_integration_romberg_workspace	struct
*	O
w	pointer
;	O
if	O
(	O
n	int
<	O
1	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"workspace size n must be at least 1"	pointer
,	O
GSL_EDOM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gsl_integration_romberg_workspace	struct
)	O
)	O
;	O
if	O
(	O
w	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"unable to allocate workspace"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
n	int
=	O
GSL_MIN	O
(	O
n	int
,	O
30	int
)	O
;	O
w	pointer
->	O
work1	pointer
=	O
malloc	function
(	O
w	pointer
->	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	pointer
->	O
work1	pointer
==	O
NULL	O
)	O
{	O
gsl_integration_romberg_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"unable to allocate previous row"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
w	pointer
->	O
work2	pointer
=	O
malloc	function
(	O
w	pointer
->	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
w	pointer
->	O
work2	pointer
==	O
NULL	O
)	O
{	O
gsl_integration_romberg_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"unable to allocate current row"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
return	O
w	pointer
;	O
}	O
void	O
gsl_integration_romberg_free	function
(	O
gsl_integration_romberg_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
w	pointer
->	O
work1	pointer
)	O
free	function
(	O
w	pointer
->	O
work1	pointer
)	O
;	O
if	O
(	O
w	pointer
->	O
work2	pointer
)	O
free	function
(	O
w	pointer
->	O
work2	pointer
)	O
;	O
free	function
(	O
w	pointer
)	O
;	O
}	O
int	O
gsl_integration_romberg	function
(	O
const	O
gsl_function	struct
*	O
f	pointer
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
,	O
double	O
*	O
result	pointer
,	O
size_t	long
*	O
neval	pointer
,	O
gsl_integration_romberg_workspace	struct
*	O
w	pointer
)	O
{	O
if	O
(	O
epsabs	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"epsabs must be non-negative"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
epsrel	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"epsrel must be non-negative"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
n	int
=	O
w	pointer
->	O
n	int
;	O
double	O
*	O
Rp	pointer
=	O
&	O
(	O
w	pointer
->	O
work1	pointer
[	O
0	int
]	O
)	O
;	O
double	O
*	O
Rc	pointer
=	O
&	O
(	O
w	pointer
->	O
work2	pointer
[	O
0	int
]	O
)	O
;	O
double	O
*	O
Rtmp	pointer
;	O
double	O
h	double
=	O
0.5	int
*	O
(	O
b	double
-	O
a	double
)	O
;	O
size_t	long
i	long
;	O
Rp	pointer
[	O
0	int
]	O
=	O
h	double
*	O
(	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
a	double
)	O
+	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
b	double
)	O
)	O
;	O
*	O
neval	pointer
=	O
2	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
n	int
;	O
++	O
i	long
)	O
{	O
size_t	long
j	long
;	O
double	O
sum	double
=	O
0.0	int
;	O
double	O
err	double
;	O
double	O
four_j	double
;	O
size_t	long
two_i	long
=	O
1	int
<<	O
i	long
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<	O
two_i	long
;	O
j	long
+=	O
2	int
)	O
{	O
sum	double
+=	O
GSL_FN_EVAL	O
(	O
f	pointer
,	O
a	double
+	O
j	long
*	O
h	double
)	O
;	O
++	O
(	O
*	O
neval	pointer
)	O
;	O
}	O
Rc	pointer
[	O
0	int
]	O
=	O
sum	double
*	O
h	double
+	O
0.5	int
*	O
Rp	pointer
[	O
0	int
]	O
;	O
four_j	double
=	O
4.0	int
;	O
for	O
(	O
j	long
=	O
1	int
;	O
j	long
<=	O
i	long
;	O
++	O
j	long
)	O
{	O
Rc	pointer
[	O
j	long
]	O
=	O
(	O
four_j	double
*	O
Rc	pointer
[	O
j	long
-	O
1	int
]	O
-	O
Rp	pointer
[	O
j	long
-	O
1	int
]	O
)	O
/	O
(	O
four_j	double
-	O
1.0	int
)	O
;	O
four_j	double
*=	O
4.0	int
;	O
}	O
err	double
=	O
fabs	function
(	O
Rc	pointer
[	O
i	long
]	O
-	O
Rp	pointer
[	O
i	long
-	O
1	int
]	O
)	O
;	O
if	O
(	O
(	O
err	double
<	O
epsabs	double
)	O
||	O
(	O
err	double
<	O
epsrel	double
*	O
fabs	function
(	O
Rc	pointer
[	O
i	long
]	O
)	O
)	O
)	O
{	O
*	O
result	pointer
=	O
Rc	pointer
[	O
i	long
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
Rtmp	pointer
=	O
Rp	pointer
;	O
Rp	pointer
=	O
Rc	pointer
;	O
Rc	pointer
=	O
Rtmp	pointer
;	O
h	double
*=	O
0.5	int
;	O
}	O
*	O
result	pointer
=	O
Rp	pointer
[	O
n	int
-	O
1	int
]	O
;	O
return	O
GSL_EMAXITER	int
;	O
}	O
}	O
