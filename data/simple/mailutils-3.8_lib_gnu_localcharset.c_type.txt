static	O
const	O
char	O
*	O
volatile	O
charset_aliases	pointer
;	O
static	O
const	O
char	O
*	O
get_charset_aliases	function
(	O
void	O
)	O
{	O
const	O
char	O
*	O
cp	pointer
;	O
cp	pointer
=	O
charset_aliases	pointer
;	O
if	O
(	O
cp	pointer
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
dir	pointer
;	O
const	O
char	O
*	O
base	pointer
=	O
"charset.alias"	pointer
;	O
char	O
*	O
file_name	pointer
;	O
dir	pointer
=	O
getenv	function
(	O
"CHARSETALIASDIR"	pointer
)	O
;	O
if	O
(	O
dir	pointer
==	O
NULL	O
||	O
dir	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
dir	pointer
=	O
relocate	O
(	O
LIBDIR	pointer
)	O
;	O
{	O
size_t	long
dir_len	long
=	O
strlen	function
(	O
dir	pointer
)	O
;	O
size_t	long
base_len	long
=	O
strlen	function
(	O
base	pointer
)	O
;	O
int	O
add_slash	int
=	O
(	O
dir_len	long
>	O
0	int
&&	O
!	O
ISSLASH	O
(	O
dir	pointer
[	O
dir_len	long
-	O
1	int
]	O
)	O
)	O
;	O
file_name	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
dir_len	long
+	O
add_slash	int
+	O
base_len	long
+	O
1	int
)	O
;	O
if	O
(	O
file_name	pointer
!=	O
NULL	O
)	O
{	O
memcpy	function
(	O
file_name	pointer
,	O
dir	pointer
,	O
dir_len	long
)	O
;	O
if	O
(	O
add_slash	int
)	O
file_name	pointer
[	O
dir_len	long
]	O
=	O
DIRECTORY_SEPARATOR	char
;	O
memcpy	function
(	O
file_name	pointer
+	O
dir_len	long
+	O
add_slash	int
,	O
base	pointer
,	O
base_len	long
+	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
file_name	pointer
==	O
NULL	O
)	O
cp	pointer
=	O
""	pointer
;	O
else	O
{	O
int	O
fd	int
;	O
fd	int
=	O
open	function
(	O
file_name	pointer
,	O
O_RDONLY	int
|	O
(	O
HAVE_WORKING_O_NOFOLLOW	int
?	O
O_NOFOLLOW	O
:	O
0	int
)	O
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
cp	pointer
=	O
""	pointer
;	O
else	O
{	O
FILE	struct
*	O
fp	pointer
;	O
fp	pointer
=	O
fdopen	function
(	O
fd	int
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
{	O
close	pointer
(	O
fd	int
)	O
;	O
cp	pointer
=	O
""	pointer
;	O
}	O
else	O
{	O
char	O
*	O
res_ptr	pointer
=	O
NULL	O
;	O
size_t	long
res_size	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	int
;	O
char	O
buf1	array
[	O
50	int
+	O
1	int
]	O
;	O
char	O
buf2	array
[	O
50	int
+	O
1	int
]	O
;	O
size_t	long
l1	long
,	O
l2	long
;	O
char	O
*	O
old_res_ptr	pointer
;	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
do	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
while	O
(	O
!	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'\n'	O
)	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
continue	O
;	O
}	O
ungetc	function
(	O
c	int
,	O
fp	pointer
)	O
;	O
if	O
(	O
fscanf	function
(	O
fp	pointer
,	O
"%50s %50s"	pointer
,	O
buf1	array
,	O
buf2	array
)	O
<	O
2	int
)	O
break	O
;	O
l1	long
=	O
strlen	function
(	O
buf1	array
)	O
;	O
l2	long
=	O
strlen	function
(	O
buf2	array
)	O
;	O
old_res_ptr	pointer
=	O
res_ptr	pointer
;	O
if	O
(	O
res_size	long
==	O
0	int
)	O
{	O
res_size	long
=	O
l1	long
+	O
1	int
+	O
l2	long
+	O
1	int
;	O
res_ptr	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
res_size	long
+	O
1	int
)	O
;	O
}	O
else	O
{	O
res_size	long
+=	O
l1	long
+	O
1	int
+	O
l2	long
+	O
1	int
;	O
res_ptr	pointer
=	O
(	O
char	O
*	O
)	O
realloc	function
(	O
res_ptr	pointer
,	O
res_size	long
+	O
1	int
)	O
;	O
}	O
if	O
(	O
res_ptr	pointer
==	O
NULL	O
)	O
{	O
res_size	long
=	O
0	int
;	O
free	function
(	O
old_res_ptr	pointer
)	O
;	O
break	O
;	O
}	O
strcpy	function
(	O
res_ptr	pointer
+	O
res_size	long
-	O
(	O
l2	long
+	O
1	int
)	O
-	O
(	O
l1	long
+	O
1	int
)	O
,	O
buf1	array
)	O
;	O
strcpy	function
(	O
res_ptr	pointer
+	O
res_size	long
-	O
(	O
l2	long
+	O
1	int
)	O
,	O
buf2	array
)	O
;	O
}	O
fclose	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
res_size	long
==	O
0	int
)	O
cp	pointer
=	O
""	pointer
;	O
else	O
{	O
*	O
(	O
res_ptr	pointer
+	O
res_size	long
)	O
=	O
'\0'	O
;	O
cp	pointer
=	O
res_ptr	pointer
;	O
}	O
}	O
}	O
free	function
(	O
file_name	pointer
)	O
;	O
}	O
charset_aliases	pointer
=	O
cp	pointer
;	O
}	O
return	O
cp	pointer
;	O
}	O
const	O
char	O
*	O
locale_charset	function
(	O
void	O
)	O
{	O
const	O
char	O
*	O
codeset	pointer
;	O
const	O
char	O
*	O
aliases	pointer
;	O
codeset	pointer
=	O
nl_langinfo	function
(	O
CODESET	int
)	O
;	O
if	O
(	O
codeset	pointer
==	O
NULL	O
)	O
codeset	pointer
=	O
""	pointer
;	O
for	O
(	O
aliases	pointer
=	O
get_charset_aliases	function
(	O
)	O
;	O
*	O
aliases	pointer
!=	O
'\0'	O
;	O
aliases	pointer
+=	O
strlen	function
(	O
aliases	pointer
)	O
+	O
1	int
,	O
aliases	pointer
+=	O
strlen	function
(	O
aliases	pointer
)	O
+	O
1	int
)	O
if	O
(	O
strcmp	function
(	O
codeset	pointer
,	O
aliases	pointer
)	O
==	O
0	int
||	O
(	O
aliases	pointer
[	O
0	int
]	O
==	O
'*'	O
&&	O
aliases	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
{	O
codeset	pointer
=	O
aliases	pointer
+	O
strlen	function
(	O
aliases	pointer
)	O
+	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
codeset	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
codeset	pointer
=	O
"ASCII"	pointer
;	O
return	O
codeset	pointer
;	O
}	O
