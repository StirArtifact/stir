int	O
pipe_filter_ii_execute	function
(	O
const	O
char	O
*	O
progname	pointer
,	O
const	O
char	O
*	O
prog_path	pointer
,	O
const	O
char	O
*	O
*	O
prog_argv	pointer
,	O
bool	bool
null_stderr	bool
,	O
bool	bool
exit_on_error	bool
,	O
prepare_write_fn	pointer
prepare_write	pointer
,	O
done_write_fn	pointer
done_write	pointer
,	O
prepare_read_fn	pointer
prepare_read	pointer
,	O
done_read_fn	pointer
done_read	pointer
,	O
void	O
*	O
private_data	pointer
)	O
{	O
pid_t	int
child	int
;	O
int	O
fd	int
[	O
2	int
]	O
;	O
struct	O
sigaction	struct
orig_sigpipe_action	struct
;	O
child	int
=	O
create_pipe_bidi	function
(	O
progname	pointer
,	O
prog_path	pointer
,	O
(	O
char	O
*	O
*	O
)	O
prog_argv	pointer
,	O
null_stderr	bool
,	O
true	int
,	O
exit_on_error	bool
,	O
fd	int
)	O
;	O
if	O
(	O
child	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
{	O
struct	O
sigaction	struct
sigpipe_action	struct
;	O
sigpipe_action	struct
.	O
sa_handler	pointer
=	O
SIG_IGN	O
;	O
sigpipe_action	struct
.	O
sa_flags	int
=	O
0	int
;	O
sigemptyset	function
(	O
&	O
sigpipe_action	struct
.	O
sa_mask	struct
)	O
;	O
if	O
(	O
sigaction	struct
(	O
SIGPIPE	int
,	O
&	O
sigpipe_action	struct
,	O
&	O
orig_sigpipe_action	struct
)	O
<	O
0	int
)	O
abort	function
(	O
)	O
;	O
}	O
{	O
fd_set	struct
readfds	struct
;	O
fd_set	struct
writefds	struct
;	O
bool	bool
done_writing	bool
;	O
{	O
int	O
fcntl_flags	int
;	O
if	O
(	O
(	O
fcntl_flags	int
=	O
fcntl	function
(	O
fd	int
[	O
1	int
]	O
,	O
F_GETFL	int
,	O
0	int
)	O
)	O
<	O
0	int
||	O
fcntl	function
(	O
fd	int
[	O
1	int
]	O
,	O
F_SETFL	int
,	O
fcntl_flags	int
|	O
O_NONBLOCK	int
)	O
==	O
-	O
1	int
||	O
(	O
fcntl_flags	int
=	O
fcntl	function
(	O
fd	int
[	O
0	int
]	O
,	O
F_GETFL	int
,	O
0	int
)	O
)	O
<	O
0	int
||	O
fcntl	function
(	O
fd	int
[	O
0	int
]	O
,	O
F_SETFL	int
,	O
fcntl_flags	int
|	O
O_NONBLOCK	int
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
exit_on_error	bool
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"cannot set up nonblocking I/O to %s subprocess"	pointer
)	O
,	O
progname	pointer
)	O
;	O
goto	O
fail	O
;	O
}	O
}	O
FD_ZERO	O
(	O
&	O
readfds	struct
)	O
;	O
FD_ZERO	O
(	O
&	O
writefds	struct
)	O
;	O
done_writing	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
n	long
,	O
retval	int
;	O
FD_SET	O
(	O
fd	int
[	O
0	int
]	O
,	O
&	O
readfds	struct
)	O
;	O
n	long
=	O
fd	int
[	O
0	int
]	O
+	O
1	int
;	O
if	O
(	O
!	O
done_writing	bool
)	O
{	O
FD_SET	O
(	O
fd	int
[	O
1	int
]	O
,	O
&	O
writefds	struct
)	O
;	O
if	O
(	O
n	long
<=	O
fd	int
[	O
1	int
]	O
)	O
n	long
=	O
fd	int
[	O
1	int
]	O
+	O
1	int
;	O
}	O
do	O
retval	int
=	O
select	function
(	O
n	long
,	O
&	O
readfds	struct
,	O
(	O
!	O
done_writing	bool
?	O
&	O
writefds	struct
:	O
NULL	O
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
while	O
(	O
retval	int
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
;	O
n	long
=	O
retval	int
;	O
if	O
(	O
n	long
<	O
0	int
)	O
{	O
if	O
(	O
exit_on_error	bool
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"communication with %s subprocess failed"	pointer
)	O
,	O
progname	pointer
)	O
;	O
goto	O
fail	O
;	O
}	O
if	O
(	O
!	O
done_writing	bool
&&	O
FD_ISSET	O
(	O
fd	int
[	O
1	int
]	O
,	O
&	O
writefds	struct
)	O
)	O
goto	O
try_write	O
;	O
if	O
(	O
FD_ISSET	O
(	O
fd	int
[	O
0	int
]	O
,	O
&	O
readfds	struct
)	O
)	O
goto	O
try_read	O
;	O
abort	function
(	O
)	O
;	O
try_write	O
:	O
if	O
(	O
!	O
done_writing	bool
)	O
{	O
size_t	long
bufsize	long
;	O
const	O
void	O
*	O
buf	pointer
=	O
prepare_write	pointer
(	O
&	O
bufsize	long
,	O
private_data	pointer
)	O
;	O
if	O
(	O
buf	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
attempt_to_write	long
=	O
(	O
bufsize	long
>	O
SSIZE_MAX	O
?	O
SSIZE_MAX	O
:	O
bufsize	long
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
ssize_t	long
nwritten	long
=	O
write	function
(	O
fd	int
[	O
1	int
]	O
,	O
buf	pointer
,	O
attempt_to_write	long
)	O
;	O
if	O
(	O
nwritten	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EAGAIN	int
)	O
{	O
attempt_to_write	long
=	O
attempt_to_write	long
/	O
2	int
;	O
if	O
(	O
attempt_to_write	long
==	O
0	int
)	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
IS_EAGAIN	int
(	O
errno	O
)	O
)	O
{	O
if	O
(	O
exit_on_error	bool
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"write to %s subprocess failed"	pointer
)	O
,	O
progname	pointer
)	O
;	O
goto	O
fail	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
nwritten	long
>	O
0	int
)	O
done_write	pointer
(	O
(	O
void	O
*	O
)	O
buf	pointer
,	O
nwritten	long
,	O
private_data	pointer
)	O
;	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
close	function
(	O
fd	int
[	O
1	int
]	O
)	O
;	O
done_writing	bool
=	O
true	int
;	O
}	O
}	O
continue	O
;	O
try_read	O
:	O
{	O
size_t	long
bufsize	long
;	O
void	O
*	O
buf	pointer
=	O
prepare_read	pointer
(	O
&	O
bufsize	long
,	O
private_data	pointer
)	O
;	O
if	O
(	O
!	O
(	O
buf	pointer
!=	O
NULL	O
&&	O
bufsize	long
>	O
0	int
)	O
)	O
abort	function
(	O
)	O
;	O
{	O
ssize_t	long
nread	long
=	O
read	function
(	O
fd	int
[	O
0	int
]	O
,	O
buf	pointer
,	O
bufsize	long
>	O
SSIZE_MAX	O
?	O
SSIZE_MAX	O
:	O
bufsize	long
)	O
;	O
if	O
(	O
nread	long
<	O
0	int
)	O
{	O
if	O
(	O
!	O
IS_EAGAIN	int
(	O
errno	O
)	O
)	O
{	O
if	O
(	O
exit_on_error	bool
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"read from %s subprocess failed"	pointer
)	O
,	O
progname	pointer
)	O
;	O
goto	O
fail	O
;	O
}	O
}	O
else	O
if	O
(	O
nread	long
>	O
0	int
)	O
done_read	pointer
(	O
buf	pointer
,	O
nread	long
,	O
private_data	pointer
)	O
;	O
else	O
{	O
if	O
(	O
done_writing	bool
)	O
break	O
;	O
}	O
}	O
}	O
continue	O
;	O
}	O
}	O
if	O
(	O
sigaction	struct
(	O
SIGPIPE	int
,	O
&	O
orig_sigpipe_action	struct
,	O
NULL	O
)	O
<	O
0	int
)	O
abort	function
(	O
)	O
;	O
close	function
(	O
fd	int
[	O
0	int
]	O
)	O
;	O
{	O
int	O
exitstatus	int
=	O
wait_subprocess	function
(	O
child	int
,	O
progname	pointer
,	O
false	int
,	O
null_stderr	bool
,	O
true	int
,	O
exit_on_error	bool
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
&&	O
exit_on_error	bool
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s subprocess terminated with exit code %d"	pointer
)	O
,	O
progname	pointer
,	O
exitstatus	int
)	O
;	O
return	O
exitstatus	int
;	O
}	O
fail	O
:	O
{	O
int	O
saved_errno	int
=	O
errno	O
;	O
close	function
(	O
fd	int
[	O
1	int
]	O
)	O
;	O
if	O
(	O
sigaction	struct
(	O
SIGPIPE	int
,	O
&	O
orig_sigpipe_action	struct
,	O
NULL	O
)	O
<	O
0	int
)	O
abort	function
(	O
)	O
;	O
close	function
(	O
fd	int
[	O
0	int
]	O
)	O
;	O
wait_subprocess	function
(	O
child	int
,	O
progname	pointer
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
errno	O
=	O
saved_errno	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
