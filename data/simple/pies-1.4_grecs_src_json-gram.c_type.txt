struct	O
json_value	struct
*	O
json_return_obj	pointer
;	O
extern	O
int	O
grecs_json_lex	function
(	O
void	O
)	O
;	O
static	O
int	O
grecs_json_error	function
(	O
char	O
const	O
*	O
s	pointer
)	O
;	O
static	O
void	O
pairfree	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
json_pair	struct
*	O
p	pointer
=	O
ptr	pointer
;	O
grecs_free	function
(	O
p	pointer
->	O
k	pointer
)	O
;	O
json_value_free	function
(	O
p	pointer
->	O
v	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
static	O
void	O
objfree	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
json_value	struct
*	O
o	pointer
=	O
ptr	pointer
;	O
json_value_free	function
(	O
o	pointer
)	O
;	O
}	O
typedef	O
unsigned	O
char	O
grecs_json_type_uint8	char
;	O
typedef	O
signed	O
char	O
grecs_json_type_int8	char
;	O
typedef	O
unsigned	O
short	O
int	O
grecs_json_type_uint16	short
;	O
typedef	O
short	O
int	O
grecs_json_type_int16	short
;	O
union	O
grecs_json_alloc	union
{	O
grecs_json_type_int16	short
grecs_json_ss_alloc	short
;	O
YYSTYPE	union
grecs_json_vs_alloc	union
;	O
YYLTYPE	O
grecs_json_ls_alloc	struct
;	O
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_translate	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
10	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
13	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
8	int
,	O
2	int
,	O
9	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
11	int
,	O
2	int
,	O
12	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_prhs	array
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
3	int
,	O
5	int
,	O
7	int
,	O
9	int
,	O
11	int
,	O
13	int
,	O
15	int
,	O
17	int
,	O
21	int
,	O
22	int
,	O
24	int
,	O
26	int
,	O
30	int
,	O
34	int
,	O
35	int
,	O
37	int
,	O
39	int
,	O
43	int
}	O
;	O
static	O
const	O
grecs_json_type_int8	char
grecs_json_rhs	array
[	O
]	O
=	O
{	O
15	int
,	O
0	int
,	O
-	O
1	int
,	O
16	int
,	O
-	O
1	int
,	O
3	int
,	O
-	O
1	int
,	O
4	int
,	O
-	O
1	int
,	O
5	int
,	O
-	O
1	int
,	O
6	int
,	O
-	O
1	int
,	O
17	int
,	O
-	O
1	int
,	O
20	int
,	O
-	O
1	int
,	O
8	int
,	O
18	int
,	O
9	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
19	int
,	O
-	O
1	int
,	O
16	int
,	O
-	O
1	int
,	O
19	int
,	O
10	int
,	O
16	int
,	O
-	O
1	int
,	O
11	int
,	O
21	int
,	O
12	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
22	int
,	O
-	O
1	int
,	O
23	int
,	O
-	O
1	int
,	O
22	int
,	O
10	int
,	O
23	int
,	O
-	O
1	int
,	O
4	int
,	O
13	int
,	O
16	int
,	O
-	O
1	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_rline	array
[	O
]	O
=	O
{	O
0	int
,	O
75	int
,	O
75	int
,	O
81	int
,	O
86	int
,	O
91	int
,	O
96	int
,	O
100	int
,	O
101	int
,	O
108	int
,	O
116	int
,	O
119	int
,	O
122	int
,	O
127	int
,	O
133	int
,	O
156	int
,	O
159	int
,	O
162	int
,	O
168	int
,	O
174	int
}	O
;	O
static	O
const	O
char	O
*	O
const	O
grecs_json_tname	array
[	O
]	O
=	O
{	O
"$end"	pointer
,	O
"error"	pointer
,	O
"$undefined"	pointer
,	O
"T_NUMBER"	pointer
,	O
"T_STRING"	pointer
,	O
"T_BOOL"	pointer
,	O
"T_NULL"	pointer
,	O
"T_ERR"	pointer
,	O
"'['"	pointer
,	O
"']'"	pointer
,	O
"','"	pointer
,	O
"'{'"	pointer
,	O
"'}'"	pointer
,	O
"':'"	pointer
,	O
"$accept"	pointer
,	O
"input"	pointer
,	O
"object"	pointer
,	O
"array"	pointer
,	O
"objects"	pointer
,	O
"objlist"	pointer
,	O
"assoc"	pointer
,	O
"pairs"	pointer
,	O
"pairlist"	pointer
,	O
"pair"	pointer
,	O
YY_NULL	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_r1	array
[	O
]	O
=	O
{	O
0	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
18	int
,	O
19	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
21	int
,	O
22	int
,	O
22	int
,	O
23	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_r2	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
3	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_defact	array
[	O
]	O
=	O
{	O
0	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
10	int
,	O
15	int
,	O
0	int
,	O
2	int
,	O
7	int
,	O
8	int
,	O
12	int
,	O
0	int
,	O
11	int
,	O
0	int
,	O
0	int
,	O
16	int
,	O
17	int
,	O
1	int
,	O
9	int
,	O
0	int
,	O
0	int
,	O
14	int
,	O
0	int
,	O
13	int
,	O
19	int
,	O
18	int
}	O
;	O
static	O
const	O
grecs_json_type_int8	char
grecs_json_defgoto	array
[	O
]	O
=	O
{	O
-	O
1	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
12	int
,	O
13	int
,	O
10	int
,	O
15	int
,	O
16	int
,	O
17	int
}	O
;	O
static	O
const	O
grecs_json_type_int8	char
grecs_json_pact	array
[	O
]	O
=	O
{	O
-	O
2	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
2	int
,	O
1	int
,	O
7	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
1	int
,	O
0	int
,	O
4	int
,	O
2	int
,	O
3	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
2	int
,	O
-	O
2	int
,	O
-	O
13	int
,	O
1	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
}	O
;	O
static	O
const	O
grecs_json_type_int8	char
grecs_json_pgoto	array
[	O
]	O
=	O
{	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
5	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
12	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_table	array
[	O
]	O
=	O
{	O
11	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
14	int
,	O
5	int
,	O
18	int
,	O
19	int
,	O
6	int
,	O
20	int
,	O
26	int
,	O
0	int
,	O
23	int
,	O
22	int
,	O
24	int
,	O
25	int
,	O
21	int
}	O
;	O
static	O
const	O
grecs_json_type_int8	char
grecs_json_check	array
[	O
]	O
=	O
{	O
5	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
4	int
,	O
8	int
,	O
0	int
,	O
9	int
,	O
11	int
,	O
10	int
,	O
23	int
,	O
-	O
1	int
,	O
10	int
,	O
12	int
,	O
20	int
,	O
21	int
,	O
13	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_stos	array
[	O
]	O
=	O
{	O
0	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
8	int
,	O
11	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
20	int
,	O
16	int
,	O
18	int
,	O
19	int
,	O
4	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
0	int
,	O
9	int
,	O
10	int
,	O
13	int
,	O
12	int
,	O
10	int
,	O
16	int
,	O
16	int
,	O
23	int
}	O
;	O
static	O
void	O
grecs_json__symbol_value_print	function
(	O
FILE	struct
*	O
grecs_json_output	pointer
,	O
int	O
grecs_json_type	int
,	O
YYSTYPE	union
const	O
*	O
const	O
grecs_json_valuep	pointer
,	O
YYLTYPE	O
const	O
*	O
const	O
grecs_json_locationp	pointer
)	O
{	O
FILE	struct
*	O
grecs_json_o	pointer
=	O
grecs_json_output	pointer
;	O
YYUSE	O
(	O
grecs_json_o	pointer
)	O
;	O
if	O
(	O
!	O
grecs_json_valuep	pointer
)	O
return	O
;	O
YYUSE	O
(	O
grecs_json_locationp	pointer
)	O
;	O
YYUSE	O
(	O
grecs_json_output	pointer
)	O
;	O
switch	O
(	O
grecs_json_type	int
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
grecs_json__symbol_print	function
(	O
FILE	struct
*	O
grecs_json_output	pointer
,	O
int	O
grecs_json_type	int
,	O
YYSTYPE	union
const	O
*	O
const	O
grecs_json_valuep	pointer
,	O
YYLTYPE	O
const	O
*	O
const	O
grecs_json_locationp	pointer
)	O
{	O
if	O
(	O
grecs_json_type	int
<	O
YYNTOKENS	int
)	O
YYFPRINTF	O
(	O
grecs_json_output	pointer
,	O
"token %s ("	pointer
,	O
grecs_json_tname	array
[	O
grecs_json_type	int
]	O
)	O
;	O
else	O
YYFPRINTF	O
(	O
grecs_json_output	pointer
,	O
"nterm %s ("	pointer
,	O
grecs_json_tname	array
[	O
grecs_json_type	int
]	O
)	O
;	O
YY_LOCATION_PRINT	O
(	O
grecs_json_output	pointer
,	O
*	O
grecs_json_locationp	pointer
)	O
;	O
YYFPRINTF	O
(	O
grecs_json_output	pointer
,	O
": "	pointer
)	O
;	O
grecs_json__symbol_value_print	function
(	O
grecs_json_output	pointer
,	O
grecs_json_type	int
,	O
grecs_json_valuep	pointer
,	O
grecs_json_locationp	pointer
)	O
;	O
YYFPRINTF	O
(	O
grecs_json_output	pointer
,	O
")"	pointer
)	O
;	O
}	O
static	O
void	O
grecs_json__stack_print	function
(	O
grecs_json_type_int16	short
*	O
grecs_json_bottom	pointer
,	O
grecs_json_type_int16	short
*	O
grecs_json_top	pointer
)	O
{	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"Stack now"	pointer
)	O
;	O
for	O
(	O
;	O
grecs_json_bottom	pointer
<=	O
grecs_json_top	pointer
;	O
grecs_json_bottom	pointer
++	O
)	O
{	O
int	O
grecs_json_bot	int
=	O
*	O
grecs_json_bottom	pointer
;	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
" %d"	pointer
,	O
grecs_json_bot	int
)	O
;	O
}	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
grecs_json__reduce_print	function
(	O
YYSTYPE	union
*	O
grecs_json_vsp	pointer
,	O
YYLTYPE	O
*	O
grecs_json_lsp	pointer
,	O
int	O
grecs_json_rule	int
)	O
{	O
int	O
grecs_json_nrhs	int
=	O
grecs_json_r2	array
[	O
grecs_json_rule	int
]	O
;	O
int	O
grecs_json_i	int
;	O
unsigned	O
long	O
int	O
grecs_json_lno	long
=	O
grecs_json_rline	array
[	O
grecs_json_rule	int
]	O
;	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"Reducing stack by rule %d (line %lu):\n"	pointer
,	O
grecs_json_rule	int
-	O
1	int
,	O
grecs_json_lno	long
)	O
;	O
for	O
(	O
grecs_json_i	int
=	O
0	int
;	O
grecs_json_i	int
<	O
grecs_json_nrhs	int
;	O
grecs_json_i	int
++	O
)	O
{	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"   $%d = "	pointer
,	O
grecs_json_i	int
+	O
1	int
)	O
;	O
grecs_json__symbol_print	function
(	O
stderr	pointer
,	O
grecs_json_rhs	array
[	O
grecs_json_prhs	array
[	O
grecs_json_rule	int
]	O
+	O
grecs_json_i	int
]	O
,	O
&	O
(	O
grecs_json_vsp	pointer
[	O
(	O
grecs_json_i	int
+	O
1	int
)	O
-	O
(	O
grecs_json_nrhs	int
)	O
]	O
)	O
,	O
&	O
(	O
grecs_json_lsp	pointer
[	O
(	O
grecs_json_i	int
+	O
1	int
)	O
-	O
(	O
grecs_json_nrhs	int
)	O
]	O
)	O
)	O
;	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
int	O
grecs_json_debug	int
;	O
static	O
YYSIZE_T	O
grecs_json_tnamerr	function
(	O
char	O
*	O
grecs_json_res	pointer
,	O
const	O
char	O
*	O
grecs_json_str	pointer
)	O
{	O
if	O
(	O
*	O
grecs_json_str	pointer
==	O
'"'	O
)	O
{	O
YYSIZE_T	O
grecs_json_n	long
=	O
0	int
;	O
char	O
const	O
*	O
grecs_json_p	pointer
=	O
grecs_json_str	pointer
;	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
*	O
++	O
grecs_json_p	pointer
)	O
{	O
case	O
'\''	O
:	O
case	O
','	O
:	O
goto	O
do_not_strip_quotes	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
*	O
++	O
grecs_json_p	pointer
!=	O
'\\'	O
)	O
goto	O
do_not_strip_quotes	O
;	O
default	O
:	O
if	O
(	O
grecs_json_res	pointer
)	O
grecs_json_res	pointer
[	O
grecs_json_n	long
]	O
=	O
*	O
grecs_json_p	pointer
;	O
grecs_json_n	long
++	O
;	O
break	O
;	O
case	O
'"'	O
:	O
if	O
(	O
grecs_json_res	pointer
)	O
grecs_json_res	pointer
[	O
grecs_json_n	long
]	O
=	O
'\0'	O
;	O
return	O
grecs_json_n	long
;	O
}	O
do_not_strip_quotes	O
:	O
;	O
}	O
if	O
(	O
!	O
grecs_json_res	pointer
)	O
return	O
grecs_json_strlen	O
(	O
grecs_json_str	pointer
)	O
;	O
return	O
grecs_json_stpcpy	O
(	O
grecs_json_res	pointer
,	O
grecs_json_str	pointer
)	O
-	O
grecs_json_res	pointer
;	O
}	O
static	O
int	O
grecs_json_syntax_error	function
(	O
YYSIZE_T	O
*	O
grecs_json_msg_alloc	pointer
,	O
char	O
*	O
*	O
grecs_json_msg	pointer
,	O
grecs_json_type_int16	short
*	O
grecs_json_ssp	pointer
,	O
int	O
grecs_json_token	int
)	O
{	O
YYSIZE_T	O
grecs_json_size0	long
=	O
grecs_json_tnamerr	function
(	O
YY_NULL	int
,	O
grecs_json_tname	array
[	O
grecs_json_token	int
]	O
)	O
;	O
YYSIZE_T	O
grecs_json_size	long
=	O
grecs_json_size0	long
;	O
enum	O
{	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
=	O
5	int
}	O
;	O
const	O
char	O
*	O
grecs_json_format	pointer
=	O
YY_NULL	int
;	O
char	O
const	O
*	O
grecs_json_arg	array
[	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
]	O
;	O
int	O
grecs_json_count	int
=	O
0	int
;	O
if	O
(	O
grecs_json_token	int
!=	O
YYEMPTY	O
)	O
{	O
int	O
grecs_json_n	long
=	O
grecs_json_pact	array
[	O
*	O
grecs_json_ssp	pointer
]	O
;	O
grecs_json_arg	array
[	O
grecs_json_count	int
++	O
]	O
=	O
grecs_json_tname	array
[	O
grecs_json_token	int
]	O
;	O
if	O
(	O
!	O
grecs_json_pact_value_is_default	O
(	O
grecs_json_n	long
)	O
)	O
{	O
int	O
grecs_json_xbegin	int
=	O
grecs_json_n	long
<	O
0	int
?	O
-	O
grecs_json_n	long
:	O
0	int
;	O
int	O
grecs_json_checklim	int
=	O
YYLAST	int
-	O
grecs_json_n	long
+	O
1	int
;	O
int	O
grecs_json_xend	int
=	O
grecs_json_checklim	int
<	O
YYNTOKENS	int
?	O
grecs_json_checklim	int
:	O
YYNTOKENS	int
;	O
int	O
grecs_json_x	int
;	O
for	O
(	O
grecs_json_x	int
=	O
grecs_json_xbegin	int
;	O
grecs_json_x	int
<	O
grecs_json_xend	int
;	O
++	O
grecs_json_x	int
)	O
if	O
(	O
grecs_json_check	array
[	O
grecs_json_x	int
+	O
grecs_json_n	long
]	O
==	O
grecs_json_x	int
&&	O
grecs_json_x	int
!=	O
YYTERROR	int
&&	O
!	O
grecs_json_table_value_is_error	O
(	O
grecs_json_table	array
[	O
grecs_json_x	int
+	O
grecs_json_n	long
]	O
)	O
)	O
{	O
if	O
(	O
grecs_json_count	int
==	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
)	O
{	O
grecs_json_count	int
=	O
1	int
;	O
grecs_json_size	long
=	O
grecs_json_size0	long
;	O
break	O
;	O
}	O
grecs_json_arg	array
[	O
grecs_json_count	int
++	O
]	O
=	O
grecs_json_tname	array
[	O
grecs_json_x	int
]	O
;	O
{	O
YYSIZE_T	O
grecs_json_size1	long
=	O
grecs_json_size	long
+	O
grecs_json_tnamerr	function
(	O
YY_NULL	int
,	O
grecs_json_tname	array
[	O
grecs_json_x	int
]	O
)	O
;	O
if	O
(	O
!	O
(	O
grecs_json_size	long
<=	O
grecs_json_size1	long
&&	O
grecs_json_size1	long
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
return	O
2	int
;	O
grecs_json_size	long
=	O
grecs_json_size1	long
;	O
}	O
}	O
}	O
}	O
switch	O
(	O
grecs_json_count	int
)	O
{	O
YYCASE_	O
(	O
0	int
,	O
YY_	O
(	O
"syntax error"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
1	int
,	O
YY_	O
(	O
"syntax error, unexpected %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
2	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
3	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
4	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s or %s"	pointer
)	O
)	O
;	O
YYCASE_	O
(	O
5	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s or %s or %s"	pointer
)	O
)	O
;	O
}	O
{	O
YYSIZE_T	O
grecs_json_size1	long
=	O
grecs_json_size	long
+	O
grecs_json_strlen	O
(	O
grecs_json_format	pointer
)	O
;	O
if	O
(	O
!	O
(	O
grecs_json_size	long
<=	O
grecs_json_size1	long
&&	O
grecs_json_size1	long
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
return	O
2	int
;	O
grecs_json_size	long
=	O
grecs_json_size1	long
;	O
}	O
if	O
(	O
*	O
grecs_json_msg_alloc	pointer
<	O
grecs_json_size	long
)	O
{	O
*	O
grecs_json_msg_alloc	pointer
=	O
2	int
*	O
grecs_json_size	long
;	O
if	O
(	O
!	O
(	O
grecs_json_size	long
<=	O
*	O
grecs_json_msg_alloc	pointer
&&	O
*	O
grecs_json_msg_alloc	pointer
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
*	O
grecs_json_msg_alloc	pointer
=	O
YYSTACK_ALLOC_MAXIMUM	O
;	O
return	O
1	int
;	O
}	O
{	O
char	O
*	O
grecs_json_p	pointer
=	O
*	O
grecs_json_msg	pointer
;	O
int	O
grecs_json_i	int
=	O
0	int
;	O
while	O
(	O
(	O
*	O
grecs_json_p	pointer
=	O
*	O
grecs_json_format	pointer
)	O
!=	O
'\0'	O
)	O
if	O
(	O
*	O
grecs_json_p	pointer
==	O
'%'	O
&&	O
grecs_json_format	pointer
[	O
1	int
]	O
==	O
's'	O
&&	O
grecs_json_i	int
<	O
grecs_json_count	int
)	O
{	O
grecs_json_p	pointer
+=	O
grecs_json_tnamerr	function
(	O
grecs_json_p	pointer
,	O
grecs_json_arg	array
[	O
grecs_json_i	int
++	O
]	O
)	O
;	O
grecs_json_format	pointer
+=	O
2	int
;	O
}	O
else	O
{	O
grecs_json_p	pointer
++	O
;	O
grecs_json_format	pointer
++	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
grecs_json_destruct	function
(	O
const	O
char	O
*	O
grecs_json_msg	pointer
,	O
int	O
grecs_json_type	int
,	O
YYSTYPE	union
*	O
grecs_json_valuep	pointer
,	O
YYLTYPE	O
*	O
grecs_json_locationp	pointer
)	O
{	O
YYUSE	O
(	O
grecs_json_valuep	pointer
)	O
;	O
YYUSE	O
(	O
grecs_json_locationp	pointer
)	O
;	O
if	O
(	O
!	O
grecs_json_msg	pointer
)	O
grecs_json_msg	pointer
=	O
"Deleting"	pointer
;	O
YY_SYMBOL_PRINT	O
(	O
grecs_json_msg	pointer
,	O
grecs_json_type	int
,	O
grecs_json_valuep	pointer
,	O
grecs_json_locationp	pointer
)	O
;	O
switch	O
(	O
grecs_json_type	int
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
int	O
grecs_json_char	int
;	O
YYSTYPE	union
grecs_json_lval	union
YY_INITIAL_VALUE	O
(	O
grecs_json_val_default	O
)	O
;	O
YYLTYPE	O
grecs_json_lloc	struct
;	O
int	O
grecs_json_nerrs	int
;	O
int	O
grecs_json_parse	function
(	O
void	O
)	O
{	O
int	O
grecs_json_state	int
;	O
int	O
grecs_json_errstatus	int
;	O
grecs_json_type_int16	short
grecs_json_ssa	array
[	O
YYINITDEPTH	int
]	O
;	O
grecs_json_type_int16	short
*	O
grecs_json_ss	pointer
;	O
grecs_json_type_int16	short
*	O
grecs_json_ssp	pointer
;	O
YYSTYPE	union
grecs_json_vsa	array
[	O
YYINITDEPTH	int
]	O
;	O
YYSTYPE	union
*	O
grecs_json_vs	pointer
;	O
YYSTYPE	union
*	O
grecs_json_vsp	pointer
;	O
YYLTYPE	O
grecs_json_lsa	array
[	O
YYINITDEPTH	int
]	O
;	O
YYLTYPE	O
*	O
grecs_json_ls	pointer
;	O
YYLTYPE	O
*	O
grecs_json_lsp	pointer
;	O
YYLTYPE	O
grecs_json_error_range	array
[	O
3	int
]	O
;	O
YYSIZE_T	O
grecs_json_stacksize	long
;	O
int	O
grecs_json_n	long
;	O
int	O
grecs_json_result	int
;	O
int	O
grecs_json_token	int
=	O
0	int
;	O
YYSTYPE	union
grecs_json_val	union
;	O
YYLTYPE	O
grecs_json_loc	struct
;	O
char	O
grecs_json_msgbuf	array
[	O
128	int
]	O
;	O
char	O
*	O
grecs_json_msg	pointer
=	O
grecs_json_msgbuf	array
;	O
YYSIZE_T	O
grecs_json_msg_alloc	pointer
=	O
sizeof	O
grecs_json_msgbuf	array
;	O
int	O
grecs_json_len	int
=	O
0	int
;	O
grecs_json_ssp	pointer
=	O
grecs_json_ss	pointer
=	O
grecs_json_ssa	array
;	O
grecs_json_vsp	pointer
=	O
grecs_json_vs	pointer
=	O
grecs_json_vsa	array
;	O
grecs_json_lsp	pointer
=	O
grecs_json_ls	pointer
=	O
grecs_json_lsa	array
;	O
grecs_json_stacksize	long
=	O
YYINITDEPTH	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Starting parse\n"	pointer
)	O
)	O
;	O
grecs_json_state	int
=	O
0	int
;	O
grecs_json_errstatus	int
=	O
0	int
;	O
grecs_json_nerrs	int
=	O
0	int
;	O
grecs_json_char	int
=	O
YYEMPTY	O
;	O
grecs_json_lsp	pointer
[	O
0	int
]	O
=	O
grecs_json_lloc	struct
;	O
goto	O
grecs_json_setstate	O
;	O
grecs_json_newstate	O
:	O
grecs_json_ssp	pointer
++	O
;	O
grecs_json_setstate	O
:	O
*	O
grecs_json_ssp	pointer
=	O
grecs_json_state	int
;	O
if	O
(	O
grecs_json_ss	pointer
+	O
grecs_json_stacksize	long
-	O
1	int
<=	O
grecs_json_ssp	pointer
)	O
{	O
YYSIZE_T	O
grecs_json_size	long
=	O
grecs_json_ssp	pointer
-	O
grecs_json_ss	pointer
+	O
1	int
;	O
if	O
(	O
YYMAXDEPTH	int
<=	O
grecs_json_stacksize	long
)	O
goto	O
grecs_json_exhaustedlab	O
;	O
grecs_json_stacksize	long
*=	O
2	int
;	O
if	O
(	O
YYMAXDEPTH	int
<	O
grecs_json_stacksize	long
)	O
grecs_json_stacksize	long
=	O
YYMAXDEPTH	int
;	O
{	O
grecs_json_type_int16	short
*	O
grecs_json_ss1	pointer
=	O
grecs_json_ss	pointer
;	O
union	O
grecs_json_alloc	union
*	O
grecs_json_ptr	pointer
=	O
(	O
union	O
grecs_json_alloc	union
*	O
)	O
YYSTACK_ALLOC	O
(	O
YYSTACK_BYTES	O
(	O
grecs_json_stacksize	long
)	O
)	O
;	O
if	O
(	O
!	O
grecs_json_ptr	pointer
)	O
goto	O
grecs_json_exhaustedlab	O
;	O
YYSTACK_RELOCATE	O
(	O
grecs_json_ss_alloc	short
,	O
grecs_json_ss	pointer
)	O
;	O
YYSTACK_RELOCATE	O
(	O
grecs_json_vs_alloc	union
,	O
grecs_json_vs	pointer
)	O
;	O
YYSTACK_RELOCATE	O
(	O
grecs_json_ls_alloc	struct
,	O
grecs_json_ls	pointer
)	O
;	O
if	O
(	O
grecs_json_ss1	pointer
!=	O
grecs_json_ssa	array
)	O
YYSTACK_FREE	O
(	O
grecs_json_ss1	pointer
)	O
;	O
}	O
grecs_json_ssp	pointer
=	O
grecs_json_ss	pointer
+	O
grecs_json_size	long
-	O
1	int
;	O
grecs_json_vsp	pointer
=	O
grecs_json_vs	pointer
+	O
grecs_json_size	long
-	O
1	int
;	O
grecs_json_lsp	pointer
=	O
grecs_json_ls	pointer
+	O
grecs_json_size	long
-	O
1	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Stack size increased to %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
int	O
)	O
grecs_json_stacksize	long
)	O
)	O
;	O
if	O
(	O
grecs_json_ss	pointer
+	O
grecs_json_stacksize	long
-	O
1	int
<=	O
grecs_json_ssp	pointer
)	O
YYABORT	O
;	O
}	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Entering state %d\n"	pointer
,	O
grecs_json_state	int
)	O
)	O
;	O
if	O
(	O
grecs_json_state	int
==	O
YYFINAL	int
)	O
YYACCEPT	O
;	O
goto	O
grecs_json_backup	O
;	O
grecs_json_backup	O
:	O
grecs_json_n	long
=	O
grecs_json_pact	array
[	O
grecs_json_state	int
]	O
;	O
if	O
(	O
grecs_json_pact_value_is_default	O
(	O
grecs_json_n	long
)	O
)	O
goto	O
grecs_json_default	O
;	O
if	O
(	O
grecs_json_char	int
==	O
YYEMPTY	O
)	O
{	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Reading a token: "	pointer
)	O
)	O
;	O
grecs_json_char	int
=	O
YYLEX	O
;	O
}	O
if	O
(	O
grecs_json_char	int
<=	O
YYEOF	int
)	O
{	O
grecs_json_char	int
=	O
grecs_json_token	int
=	O
YYEOF	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Now at end of input.\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
grecs_json_token	int
=	O
YYTRANSLATE	O
(	O
grecs_json_char	int
)	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Next token is"	pointer
,	O
grecs_json_token	int
,	O
&	O
grecs_json_lval	union
,	O
&	O
grecs_json_lloc	struct
)	O
;	O
}	O
grecs_json_n	long
+=	O
grecs_json_token	int
;	O
if	O
(	O
grecs_json_n	long
<	O
0	int
||	O
YYLAST	int
<	O
grecs_json_n	long
||	O
grecs_json_check	array
[	O
grecs_json_n	long
]	O
!=	O
grecs_json_token	int
)	O
goto	O
grecs_json_default	O
;	O
grecs_json_n	long
=	O
grecs_json_table	array
[	O
grecs_json_n	long
]	O
;	O
if	O
(	O
grecs_json_n	long
<=	O
0	int
)	O
{	O
if	O
(	O
grecs_json_table_value_is_error	O
(	O
grecs_json_n	long
)	O
)	O
goto	O
grecs_json_errlab	O
;	O
grecs_json_n	long
=	O
-	O
grecs_json_n	long
;	O
goto	O
grecs_json_reduce	O
;	O
}	O
if	O
(	O
grecs_json_errstatus	int
)	O
grecs_json_errstatus	int
--	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
grecs_json_token	int
,	O
&	O
grecs_json_lval	union
,	O
&	O
grecs_json_lloc	struct
)	O
;	O
grecs_json_char	int
=	O
YYEMPTY	O
;	O
grecs_json_state	int
=	O
grecs_json_n	long
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
grecs_json_vsp	pointer
=	O
grecs_json_lval	union
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
*	O
++	O
grecs_json_lsp	pointer
=	O
grecs_json_lloc	struct
;	O
goto	O
grecs_json_newstate	O
;	O
grecs_json_default	O
:	O
grecs_json_n	long
=	O
grecs_json_defact	array
[	O
grecs_json_state	int
]	O
;	O
if	O
(	O
grecs_json_n	long
==	O
0	int
)	O
goto	O
grecs_json_errlab	O
;	O
goto	O
grecs_json_reduce	O
;	O
grecs_json_reduce	O
:	O
grecs_json_len	int
=	O
grecs_json_r2	array
[	O
grecs_json_n	long
]	O
;	O
grecs_json_val	union
=	O
grecs_json_vsp	pointer
[	O
1	int
-	O
grecs_json_len	int
]	O
;	O
YYLLOC_DEFAULT	O
(	O
grecs_json_loc	struct
,	O
(	O
grecs_json_lsp	pointer
-	O
grecs_json_len	int
)	O
,	O
grecs_json_len	int
)	O
;	O
YY_REDUCE_PRINT	O
(	O
grecs_json_n	long
)	O
;	O
switch	O
(	O
grecs_json_n	long
)	O
{	O
case	O
2	int
:	O
{	O
json_return_obj	pointer
=	O
(	O
grecs_json_vsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
obj	pointer
)	O
;	O
}	O
break	O
;	O
case	O
3	int
:	O
{	O
(	O
grecs_json_val	union
.	O
obj	pointer
)	O
=	O
json_value_create	function
(	O
json_number	int
)	O
;	O
(	O
grecs_json_val	union
.	O
obj	pointer
)	O
->	O
v	pointer
.	O
n	long
=	O
(	O
grecs_json_vsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
n	long
)	O
;	O
}	O
break	O
;	O
case	O
4	int
:	O
{	O
(	O
grecs_json_val	union
.	O
obj	pointer
)	O
=	O
json_value_create	function
(	O
json_string	int
)	O
;	O
(	O
grecs_json_val	union
.	O
obj	pointer
)	O
->	O
v	pointer
.	O
s	pointer
=	O
(	O
grecs_json_vsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
s	pointer
)	O
;	O
}	O
break	O
;	O
case	O
5	int
:	O
{	O
(	O
grecs_json_val	union
.	O
obj	pointer
)	O
=	O
json_value_create	function
(	O
json_bool	int
)	O
;	O
(	O
grecs_json_val	union
.	O
obj	pointer
)	O
->	O
v	pointer
.	O
b	pointer
=	O
(	O
grecs_json_vsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
b	pointer
)	O
;	O
}	O
break	O
;	O
case	O
6	int
:	O
{	O
(	O
grecs_json_val	union
.	O
obj	pointer
)	O
=	O
json_value_create	function
(	O
json_null	int
)	O
;	O
}	O
break	O
;	O
case	O
8	int
:	O
{	O
(	O
grecs_json_val	union
.	O
obj	pointer
)	O
=	O
json_value_create	function
(	O
json_object	int
)	O
;	O
(	O
grecs_json_val	union
.	O
obj	pointer
)	O
->	O
v	pointer
.	O
o	pointer
=	O
(	O
grecs_json_vsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
o	pointer
)	O
;	O
}	O
break	O
;	O
case	O
9	int
:	O
{	O
(	O
grecs_json_val	union
.	O
obj	pointer
)	O
=	O
json_new_array	function
(	O
)	O
;	O
(	O
grecs_json_val	union
.	O
obj	pointer
)	O
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
=	O
(	O
grecs_json_vsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	pointer
)	O
;	O
}	O
break	O
;	O
case	O
10	int
:	O
{	O
(	O
grecs_json_val	union
.	O
list	pointer
)	O
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
12	int
:	O
{	O
(	O
grecs_json_val	union
.	O
list	pointer
)	O
=	O
grecs_list_create	function
(	O
)	O
;	O
grecs_list_append	function
(	O
(	O
grecs_json_val	union
.	O
list	pointer
)	O
,	O
(	O
grecs_json_vsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
obj	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
13	int
:	O
{	O
grecs_list_append	function
(	O
(	O
grecs_json_vsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	pointer
)	O
,	O
(	O
grecs_json_vsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
obj	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
14	int
:	O
{	O
struct	O
grecs_symtab	O
*	O
s	pointer
;	O
s	pointer
=	O
json_assoc_create	function
(	O
)	O
;	O
if	O
(	O
(	O
grecs_json_vsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	pointer
)	O
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
for	O
(	O
ep	pointer
=	O
(	O
grecs_json_vsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	pointer
)	O
->	O
head	pointer
;	O
ep	pointer
;	O
ep	pointer
=	O
ep	pointer
->	O
next	pointer
)	O
{	O
struct	O
json_pair	struct
*	O
p	pointer
=	O
ep	pointer
->	O
data	pointer
;	O
int	O
install	pointer
=	O
1	int
;	O
grecs_symtab_lookup_or_install	function
(	O
s	pointer
,	O
p	pointer
,	O
&	O
install	pointer
)	O
;	O
if	O
(	O
install	pointer
)	O
{	O
p	pointer
->	O
k	pointer
=	O
NULL	O
;	O
p	pointer
->	O
v	pointer
=	O
NULL	O
;	O
}	O
}	O
grecs_list_free	function
(	O
(	O
grecs_json_vsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	pointer
)	O
)	O
;	O
}	O
(	O
grecs_json_val	union
.	O
o	pointer
)	O
=	O
s	pointer
;	O
}	O
break	O
;	O
case	O
15	int
:	O
{	O
(	O
grecs_json_val	union
.	O
list	pointer
)	O
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
17	int
:	O
{	O
(	O
grecs_json_val	union
.	O
list	pointer
)	O
=	O
grecs_list_create	function
(	O
)	O
;	O
(	O
grecs_json_val	union
.	O
list	pointer
)	O
->	O
free_entry	pointer
=	O
pairfree	function
;	O
grecs_list_append	function
(	O
(	O
grecs_json_val	union
.	O
list	pointer
)	O
,	O
(	O
grecs_json_vsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
p	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
18	int
:	O
{	O
grecs_list_append	function
(	O
(	O
grecs_json_vsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	pointer
)	O
,	O
(	O
grecs_json_vsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
p	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
19	int
:	O
{	O
struct	O
json_pair	struct
*	O
p	pointer
=	O
grecs_malloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
k	pointer
=	O
(	O
grecs_json_vsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
s	pointer
)	O
;	O
p	pointer
->	O
v	pointer
=	O
(	O
grecs_json_vsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
obj	pointer
)	O
;	O
(	O
grecs_json_val	union
.	O
p	pointer
)	O
=	O
p	pointer
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
YY_SYMBOL_PRINT	O
(	O
"-> $$ ="	pointer
,	O
grecs_json_r1	array
[	O
grecs_json_n	long
]	O
,	O
&	O
grecs_json_val	union
,	O
&	O
grecs_json_loc	struct
)	O
;	O
YYPOPSTACK	O
(	O
grecs_json_len	int
)	O
;	O
grecs_json_len	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
grecs_json_ss	pointer
,	O
grecs_json_ssp	pointer
)	O
;	O
*	O
++	O
grecs_json_vsp	pointer
=	O
grecs_json_val	union
;	O
*	O
++	O
grecs_json_lsp	pointer
=	O
grecs_json_loc	struct
;	O
grecs_json_n	long
=	O
grecs_json_r1	array
[	O
grecs_json_n	long
]	O
;	O
grecs_json_state	int
=	O
grecs_json_pgoto	array
[	O
grecs_json_n	long
-	O
YYNTOKENS	int
]	O
+	O
*	O
grecs_json_ssp	pointer
;	O
if	O
(	O
0	int
<=	O
grecs_json_state	int
&&	O
grecs_json_state	int
<=	O
YYLAST	int
&&	O
grecs_json_check	array
[	O
grecs_json_state	int
]	O
==	O
*	O
grecs_json_ssp	pointer
)	O
grecs_json_state	int
=	O
grecs_json_table	array
[	O
grecs_json_state	int
]	O
;	O
else	O
grecs_json_state	int
=	O
grecs_json_defgoto	array
[	O
grecs_json_n	long
-	O
YYNTOKENS	int
]	O
;	O
goto	O
grecs_json_newstate	O
;	O
grecs_json_errlab	O
:	O
grecs_json_token	int
=	O
grecs_json_char	int
==	O
YYEMPTY	O
?	O
YYEMPTY	O
:	O
YYTRANSLATE	O
(	O
grecs_json_char	int
)	O
;	O
if	O
(	O
!	O
grecs_json_errstatus	int
)	O
{	O
++	O
grecs_json_nerrs	int
;	O
{	O
char	O
const	O
*	O
grecs_json_msgp	pointer
=	O
YY_	O
(	O
"syntax error"	pointer
)	O
;	O
int	O
grecs_json_syntax_error_status	int
;	O
grecs_json_syntax_error_status	int
=	O
YYSYNTAX_ERROR	O
;	O
if	O
(	O
grecs_json_syntax_error_status	int
==	O
0	int
)	O
grecs_json_msgp	pointer
=	O
grecs_json_msg	pointer
;	O
else	O
if	O
(	O
grecs_json_syntax_error_status	int
==	O
1	int
)	O
{	O
if	O
(	O
grecs_json_msg	pointer
!=	O
grecs_json_msgbuf	array
)	O
YYSTACK_FREE	O
(	O
grecs_json_msg	pointer
)	O
;	O
grecs_json_msg	pointer
=	O
(	O
char	O
*	O
)	O
YYSTACK_ALLOC	O
(	O
grecs_json_msg_alloc	pointer
)	O
;	O
if	O
(	O
!	O
grecs_json_msg	pointer
)	O
{	O
grecs_json_msg	pointer
=	O
grecs_json_msgbuf	array
;	O
grecs_json_msg_alloc	pointer
=	O
sizeof	O
grecs_json_msgbuf	array
;	O
grecs_json_syntax_error_status	int
=	O
2	int
;	O
}	O
else	O
{	O
grecs_json_syntax_error_status	int
=	O
YYSYNTAX_ERROR	O
;	O
grecs_json_msgp	pointer
=	O
grecs_json_msg	pointer
;	O
}	O
}	O
grecs_json_error	function
(	O
grecs_json_msgp	pointer
)	O
;	O
if	O
(	O
grecs_json_syntax_error_status	int
==	O
2	int
)	O
goto	O
grecs_json_exhaustedlab	O
;	O
}	O
}	O
grecs_json_error_range	array
[	O
1	int
]	O
=	O
grecs_json_lloc	struct
;	O
if	O
(	O
grecs_json_errstatus	int
==	O
3	int
)	O
{	O
if	O
(	O
grecs_json_char	int
<=	O
YYEOF	int
)	O
{	O
if	O
(	O
grecs_json_char	int
==	O
YYEOF	int
)	O
YYABORT	O
;	O
}	O
else	O
{	O
grecs_json_destruct	function
(	O
"Error: discarding"	pointer
,	O
grecs_json_token	int
,	O
&	O
grecs_json_lval	union
,	O
&	O
grecs_json_lloc	struct
)	O
;	O
grecs_json_char	int
=	O
YYEMPTY	O
;	O
}	O
}	O
goto	O
grecs_json_errlab1	O
;	O
grecs_json_errorlab	O
:	O
if	O
(	O
0	int
)	O
goto	O
grecs_json_errorlab	O
;	O
grecs_json_error_range	array
[	O
1	int
]	O
=	O
grecs_json_lsp	pointer
[	O
1	int
-	O
grecs_json_len	int
]	O
;	O
YYPOPSTACK	O
(	O
grecs_json_len	int
)	O
;	O
grecs_json_len	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
grecs_json_ss	pointer
,	O
grecs_json_ssp	pointer
)	O
;	O
grecs_json_state	int
=	O
*	O
grecs_json_ssp	pointer
;	O
goto	O
grecs_json_errlab1	O
;	O
grecs_json_errlab1	O
:	O
grecs_json_errstatus	int
=	O
3	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
grecs_json_n	long
=	O
grecs_json_pact	array
[	O
grecs_json_state	int
]	O
;	O
if	O
(	O
!	O
grecs_json_pact_value_is_default	O
(	O
grecs_json_n	long
)	O
)	O
{	O
grecs_json_n	long
+=	O
YYTERROR	int
;	O
if	O
(	O
0	int
<=	O
grecs_json_n	long
&&	O
grecs_json_n	long
<=	O
YYLAST	int
&&	O
grecs_json_check	array
[	O
grecs_json_n	long
]	O
==	O
YYTERROR	int
)	O
{	O
grecs_json_n	long
=	O
grecs_json_table	array
[	O
grecs_json_n	long
]	O
;	O
if	O
(	O
0	int
<	O
grecs_json_n	long
)	O
break	O
;	O
}	O
}	O
if	O
(	O
grecs_json_ssp	pointer
==	O
grecs_json_ss	pointer
)	O
YYABORT	O
;	O
grecs_json_error_range	array
[	O
1	int
]	O
=	O
*	O
grecs_json_lsp	pointer
;	O
grecs_json_destruct	function
(	O
"Error: popping"	pointer
,	O
grecs_json_stos	array
[	O
grecs_json_state	int
]	O
,	O
grecs_json_vsp	pointer
,	O
grecs_json_lsp	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
grecs_json_state	int
=	O
*	O
grecs_json_ssp	pointer
;	O
YY_STACK_PRINT	O
(	O
grecs_json_ss	pointer
,	O
grecs_json_ssp	pointer
)	O
;	O
}	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
grecs_json_vsp	pointer
=	O
grecs_json_lval	union
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
grecs_json_error_range	array
[	O
2	int
]	O
=	O
grecs_json_lloc	struct
;	O
YYLLOC_DEFAULT	O
(	O
grecs_json_loc	struct
,	O
grecs_json_error_range	array
,	O
2	int
)	O
;	O
*	O
++	O
grecs_json_lsp	pointer
=	O
grecs_json_loc	struct
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
grecs_json_stos	array
[	O
grecs_json_n	long
]	O
,	O
grecs_json_vsp	pointer
,	O
grecs_json_lsp	pointer
)	O
;	O
grecs_json_state	int
=	O
grecs_json_n	long
;	O
goto	O
grecs_json_newstate	O
;	O
grecs_json_acceptlab	O
:	O
grecs_json_result	int
=	O
0	int
;	O
goto	O
grecs_json_return	O
;	O
grecs_json_abortlab	O
:	O
grecs_json_result	int
=	O
1	int
;	O
goto	O
grecs_json_return	O
;	O
grecs_json_exhaustedlab	O
:	O
grecs_json_error	function
(	O
YY_	O
(	O
"memory exhausted"	pointer
)	O
)	O
;	O
grecs_json_result	int
=	O
2	int
;	O
grecs_json_return	O
:	O
if	O
(	O
grecs_json_char	int
!=	O
YYEMPTY	O
)	O
{	O
grecs_json_token	int
=	O
YYTRANSLATE	O
(	O
grecs_json_char	int
)	O
;	O
grecs_json_destruct	function
(	O
"Cleanup: discarding lookahead"	pointer
,	O
grecs_json_token	int
,	O
&	O
grecs_json_lval	union
,	O
&	O
grecs_json_lloc	struct
)	O
;	O
}	O
YYPOPSTACK	O
(	O
grecs_json_len	int
)	O
;	O
YY_STACK_PRINT	O
(	O
grecs_json_ss	pointer
,	O
grecs_json_ssp	pointer
)	O
;	O
while	O
(	O
grecs_json_ssp	pointer
!=	O
grecs_json_ss	pointer
)	O
{	O
grecs_json_destruct	function
(	O
"Cleanup: popping"	pointer
,	O
grecs_json_stos	array
[	O
*	O
grecs_json_ssp	pointer
]	O
,	O
grecs_json_vsp	pointer
,	O
grecs_json_lsp	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
grecs_json_ss	pointer
!=	O
grecs_json_ssa	array
)	O
YYSTACK_FREE	O
(	O
grecs_json_ss	pointer
)	O
;	O
if	O
(	O
grecs_json_msg	pointer
!=	O
grecs_json_msgbuf	array
)	O
YYSTACK_FREE	O
(	O
grecs_json_msg	pointer
)	O
;	O
return	O
YYID	O
(	O
grecs_json_result	int
)	O
;	O
}	O
static	O
int	O
grecs_json_error	function
(	O
char	O
const	O
*	O
s	pointer
)	O
{	O
jsonlex_diag	function
(	O
s	pointer
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
json_value	struct
*	O
json_value_create	function
(	O
int	O
type	int
)	O
{	O
struct	O
json_value	struct
*	O
obj	pointer
=	O
grecs_zalloc	function
(	O
sizeof	O
(	O
*	O
obj	pointer
)	O
)	O
;	O
obj	pointer
->	O
type	int
=	O
type	int
;	O
return	O
obj	pointer
;	O
}	O
void	O
json_value_free	function
(	O
struct	O
json_value	struct
*	O
obj	pointer
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
!	O
obj	pointer
)	O
return	O
;	O
switch	O
(	O
obj	pointer
->	O
type	int
)	O
{	O
case	O
json_null	int
:	O
case	O
json_bool	int
:	O
case	O
json_number	int
:	O
break	O
;	O
case	O
json_string	int
:	O
grecs_free	function
(	O
obj	pointer
->	O
v	pointer
.	O
s	pointer
)	O
;	O
break	O
;	O
case	O
json_arr	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
obj	pointer
->	O
v	pointer
.	O
a	pointer
->	O
oc	long
;	O
i	long
++	O
)	O
json_value_free	function
(	O
obj	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ov	pointer
[	O
i	long
]	O
)	O
;	O
grecs_free	function
(	O
obj	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ov	pointer
)	O
;	O
if	O
(	O
obj	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
)	O
{	O
obj	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
->	O
free_entry	pointer
=	O
objfree	function
;	O
grecs_list_free	function
(	O
obj	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
)	O
;	O
}	O
grecs_free	function
(	O
obj	pointer
->	O
v	pointer
.	O
a	pointer
)	O
;	O
break	O
;	O
case	O
json_object	int
:	O
grecs_symtab_free	function
(	O
obj	pointer
->	O
v	pointer
.	O
o	pointer
)	O
;	O
}	O
free	function
(	O
obj	pointer
)	O
;	O
}	O
static	O
unsigned	O
json_st_hash	function
(	O
void	O
*	O
data	pointer
,	O
unsigned	O
long	O
n_buckets	long
)	O
{	O
struct	O
json_pair	struct
*	O
p	pointer
=	O
data	pointer
;	O
return	O
grecs_hash_string	function
(	O
p	pointer
->	O
k	pointer
,	O
n_buckets	long
)	O
;	O
}	O
static	O
int	O
json_st_cmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
json_pair	struct
const	O
*	O
pa	pointer
=	O
a	pointer
;	O
struct	O
json_pair	struct
const	O
*	O
pb	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
pa	pointer
->	O
k	pointer
,	O
pb	pointer
->	O
k	pointer
)	O
;	O
}	O
static	O
int	O
json_st_copy	function
(	O
void	O
*	O
a	pointer
,	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
json_pair	struct
*	O
pa	pointer
=	O
a	pointer
;	O
struct	O
json_pair	struct
*	O
pb	pointer
=	O
b	pointer
;	O
memcpy	function
(	O
pa	pointer
,	O
pb	pointer
,	O
sizeof	O
(	O
*	O
pa	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
json_st_free	function
(	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
json_pair	struct
*	O
p	pointer
=	O
ptr	pointer
;	O
free	function
(	O
p	pointer
->	O
k	pointer
)	O
;	O
json_value_free	function
(	O
p	pointer
->	O
v	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
struct	O
grecs_symtab	O
*	O
json_assoc_create	function
(	O
)	O
{	O
return	O
grecs_symtab_create	function
(	O
sizeof	O
(	O
struct	O
json_pair	struct
)	O
,	O
json_st_hash	function
,	O
json_st_cmp	function
,	O
json_st_copy	function
,	O
NULL	O
,	O
json_st_free	function
)	O
;	O
}	O
struct	O
json_value	struct
*	O
json_parse_string	function
(	O
char	O
const	O
*	O
input	pointer
,	O
size_t	long
len	long
)	O
{	O
jsonlex_setup	function
(	O
input	pointer
,	O
len	long
)	O
;	O
if	O
(	O
grecs_json_parse	function
(	O
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
jsonlex_cleanup	function
(	O
)	O
;	O
return	O
json_return_obj	pointer
;	O
}	O
struct	O
json_value	struct
*	O
json_value_lookup	function
(	O
struct	O
json_value	struct
*	O
obj	pointer
,	O
const	O
char	O
*	O
ident	pointer
)	O
{	O
char	O
*	O
qbuf	pointer
=	O
NULL	O
;	O
size_t	long
qlen	long
=	O
0	int
;	O
while	O
(	O
obj	pointer
&&	O
*	O
ident	pointer
)	O
{	O
char	O
const	O
*	O
p	pointer
;	O
char	O
*	O
q	pointer
;	O
size_t	long
l	long
;	O
for	O
(	O
p	pointer
=	O
ident	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
)	O
++	O
p	pointer
;	O
else	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
)	O
break	O
;	O
}	O
l	long
=	O
p	pointer
-	O
ident	pointer
+	O
1	int
;	O
if	O
(	O
l	long
>	O
qlen	long
)	O
{	O
qlen	long
=	O
l	long
;	O
qbuf	pointer
=	O
grecs_realloc	function
(	O
qbuf	pointer
,	O
qlen	long
)	O
;	O
}	O
q	pointer
=	O
qbuf	pointer
;	O
while	O
(	O
*	O
ident	pointer
)	O
{	O
if	O
(	O
*	O
ident	pointer
==	O
'\\'	O
)	O
{	O
char	O
c	long
;	O
++	O
ident	pointer
;	O
if	O
(	O
json_unescape	function
(	O
*	O
ident	pointer
,	O
&	O
c	long
)	O
)	O
*	O
q	pointer
++	O
=	O
*	O
ident	pointer
++	O
;	O
else	O
*	O
q	pointer
++	O
=	O
c	long
;	O
}	O
else	O
if	O
(	O
*	O
ident	pointer
==	O
'.'	O
)	O
{	O
++	O
ident	pointer
;	O
break	O
;	O
}	O
else	O
*	O
q	pointer
++	O
=	O
*	O
ident	pointer
++	O
;	O
}	O
*	O
q	pointer
=	O
0	int
;	O
switch	O
(	O
obj	pointer
->	O
type	int
)	O
{	O
case	O
json_null	int
:	O
case	O
json_bool	int
:	O
case	O
json_number	int
:	O
case	O
json_string	int
:	O
obj	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
json_arr	int
:	O
l	long
=	O
strtoul	function
(	O
qbuf	pointer
,	O
&	O
q	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
q	pointer
!=	O
0	int
||	O
json_array_get	function
(	O
obj	pointer
,	O
l	long
,	O
&	O
obj	pointer
)	O
)	O
obj	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
json_object	int
:	O
if	O
(	O
json_object_get	function
(	O
obj	pointer
,	O
qbuf	pointer
,	O
&	O
obj	pointer
)	O
)	O
obj	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
*	O
ident	pointer
)	O
obj	pointer
=	O
NULL	O
;	O
free	function
(	O
qbuf	pointer
)	O
;	O
return	O
obj	pointer
;	O
}	O
struct	O
json_value	struct
*	O
json_new_string	function
(	O
char	O
const	O
*	O
str	pointer
)	O
{	O
struct	O
json_value	struct
*	O
j	pointer
=	O
json_value_create	function
(	O
json_string	int
)	O
;	O
j	pointer
->	O
v	pointer
.	O
s	pointer
=	O
grecs_strdup	function
(	O
str	pointer
)	O
;	O
return	O
j	pointer
;	O
}	O
struct	O
json_value	struct
*	O
json_new_number	function
(	O
double	O
n	long
)	O
{	O
struct	O
json_value	struct
*	O
j	pointer
=	O
json_value_create	function
(	O
json_number	int
)	O
;	O
j	pointer
->	O
v	pointer
.	O
n	long
=	O
n	long
;	O
return	O
j	pointer
;	O
}	O
struct	O
json_value	struct
*	O
json_new_bool	function
(	O
int	O
b	pointer
)	O
{	O
struct	O
json_value	struct
*	O
j	pointer
=	O
json_value_create	function
(	O
json_bool	int
)	O
;	O
j	pointer
->	O
v	pointer
.	O
b	pointer
=	O
b	pointer
;	O
return	O
j	pointer
;	O
}	O
struct	O
json_value	struct
*	O
json_new_null	function
(	O
void	O
)	O
{	O
return	O
json_value_create	function
(	O
json_null	int
)	O
;	O
}	O
struct	O
json_value	struct
*	O
json_new_object	function
(	O
void	O
)	O
{	O
struct	O
json_value	struct
*	O
j	pointer
=	O
json_value_create	function
(	O
json_object	int
)	O
;	O
j	pointer
->	O
v	pointer
.	O
o	pointer
=	O
json_assoc_create	function
(	O
)	O
;	O
return	O
j	pointer
;	O
}	O
int	O
json_object_set	function
(	O
struct	O
json_value	struct
*	O
obj	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
struct	O
json_value	struct
*	O
val	pointer
)	O
{	O
struct	O
json_pair	struct
pair	struct
,	O
*	O
ret	pointer
;	O
int	O
install	pointer
;	O
if	O
(	O
obj	pointer
->	O
type	int
!=	O
json_object	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
pair	struct
.	O
k	pointer
=	O
(	O
char	O
*	O
)	O
name	pointer
;	O
pair	struct
.	O
v	pointer
=	O
NULL	O
;	O
ret	pointer
=	O
grecs_symtab_lookup_or_install	function
(	O
obj	pointer
->	O
v	pointer
.	O
o	pointer
,	O
&	O
pair	struct
,	O
&	O
install	pointer
)	O
;	O
if	O
(	O
install	pointer
)	O
ret	pointer
->	O
k	pointer
=	O
grecs_strdup	function
(	O
ret	pointer
->	O
k	pointer
)	O
;	O
ret	pointer
->	O
v	pointer
=	O
val	pointer
;	O
return	O
0	int
;	O
}	O
int	O
json_object_get	function
(	O
struct	O
json_value	struct
*	O
obj	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
struct	O
json_value	struct
*	O
*	O
retval	pointer
)	O
{	O
struct	O
json_pair	struct
pair	struct
,	O
*	O
ret	pointer
;	O
if	O
(	O
obj	pointer
->	O
type	int
!=	O
json_object	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
pair	struct
.	O
k	pointer
=	O
(	O
char	O
*	O
)	O
name	pointer
;	O
pair	struct
.	O
v	pointer
=	O
NULL	O
;	O
ret	pointer
=	O
grecs_symtab_lookup_or_install	function
(	O
obj	pointer
->	O
v	pointer
.	O
o	pointer
,	O
&	O
pair	struct
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	pointer
)	O
{	O
*	O
retval	pointer
=	O
ret	pointer
->	O
v	pointer
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
struct	O
json_value	struct
*	O
json_new_array	function
(	O
void	O
)	O
{	O
struct	O
json_value	struct
*	O
j	pointer
=	O
json_value_create	function
(	O
json_arr	int
)	O
;	O
j	pointer
->	O
v	pointer
.	O
a	pointer
=	O
grecs_malloc	function
(	O
sizeof	O
(	O
*	O
j	pointer
->	O
v	pointer
.	O
a	pointer
)	O
)	O
;	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
oc	long
=	O
0	int
;	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ov	pointer
=	O
NULL	O
;	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
=	O
NULL	O
;	O
return	O
j	pointer
;	O
}	O
size_t	long
json_array_size	function
(	O
struct	O
json_value	struct
*	O
j	pointer
)	O
{	O
if	O
(	O
j	pointer
->	O
type	int
!=	O
json_arr	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
0	int
;	O
}	O
return	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
oc	long
+	O
grecs_list_size	function
(	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
)	O
;	O
}	O
void	O
json_array_flatten	function
(	O
struct	O
json_value	struct
*	O
j	pointer
)	O
{	O
size_t	long
size	pointer
,	O
i	long
;	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
size	pointer
=	O
grecs_list_size	function
(	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
)	O
;	O
if	O
(	O
size	pointer
==	O
0	int
)	O
return	O
;	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ov	pointer
=	O
grecs_realloc	function
(	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ov	pointer
,	O
(	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
oc	long
+	O
size	pointer
)	O
*	O
sizeof	O
(	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ov	pointer
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
ep	pointer
=	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
->	O
head	pointer
,	O
i	long
=	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
oc	long
;	O
ep	pointer
;	O
ep	pointer
=	O
ep	pointer
->	O
next	pointer
,	O
i	long
++	O
)	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ov	pointer
[	O
i	long
]	O
=	O
ep	pointer
->	O
data	pointer
;	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
oc	long
=	O
i	long
;	O
grecs_list_clear	function
(	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
)	O
;	O
}	O
int	O
json_array_insert	function
(	O
struct	O
json_value	struct
*	O
j	pointer
,	O
size_t	long
idx	long
,	O
struct	O
json_value	struct
*	O
v	pointer
)	O
{	O
size_t	long
size	pointer
;	O
if	O
(	O
j	pointer
->	O
type	int
!=	O
json_arr	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
size	pointer
=	O
json_array_size	function
(	O
j	pointer
)	O
;	O
if	O
(	O
idx	long
<	O
size	pointer
)	O
{	O
json_array_flatten	function
(	O
j	pointer
)	O
;	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ov	pointer
[	O
idx	long
]	O
=	O
v	pointer
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
size	pointer
;	O
i	long
<	O
idx	long
;	O
i	long
++	O
)	O
json_array_append	function
(	O
j	pointer
,	O
NULL	O
)	O
;	O
json_array_append	function
(	O
j	pointer
,	O
v	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
json_array_append	function
(	O
struct	O
json_value	struct
*	O
j	pointer
,	O
struct	O
json_value	struct
*	O
v	pointer
)	O
{	O
if	O
(	O
j	pointer
->	O
type	int
!=	O
json_arr	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
)	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
=	O
grecs_list_create	function
(	O
)	O
;	O
grecs_list_append	function
(	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ol	pointer
,	O
v	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
json_array_set	function
(	O
struct	O
json_value	struct
*	O
j	pointer
,	O
size_t	long
idx	long
,	O
struct	O
json_value	struct
*	O
v	pointer
)	O
{	O
if	O
(	O
j	pointer
->	O
type	int
!=	O
json_arr	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
idx	long
>=	O
json_array_size	function
(	O
j	pointer
)	O
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
return	O
-	O
1	int
;	O
}	O
json_array_flatten	function
(	O
j	pointer
)	O
;	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ov	pointer
[	O
idx	long
]	O
=	O
v	pointer
;	O
return	O
0	int
;	O
}	O
int	O
json_array_get	function
(	O
struct	O
json_value	struct
*	O
j	pointer
,	O
size_t	long
idx	long
,	O
struct	O
json_value	struct
*	O
*	O
retval	pointer
)	O
{	O
if	O
(	O
j	pointer
->	O
type	int
!=	O
json_arr	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
idx	long
>=	O
json_array_size	function
(	O
j	pointer
)	O
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
return	O
-	O
1	int
;	O
}	O
json_array_flatten	function
(	O
j	pointer
)	O
;	O
*	O
retval	pointer
=	O
j	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ov	pointer
[	O
idx	long
]	O
;	O
return	O
0	int
;	O
}	O
