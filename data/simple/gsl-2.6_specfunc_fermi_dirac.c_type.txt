static	O
double	O
fd_1_a_data	array
[	O
22	int
]	O
=	O
{	O
1.8949340668482264365	int
,	O
0.7237719066890052793	int
,	O
0.1250000000000000000	int
,	O
0.0101065196435973942	int
,	O
0.0	int
,	O
-	O
0.0000600615242174119	int
,	O
0.0	int
,	O
6.816528764623e-7	int
,	O
0.0	int
,	O
-	O
9.5895779195e-9	int
,	O
0.0	int
,	O
1.515104135e-10	int
,	O
0.0	int
,	O
-	O
2.5785616e-12	int
,	O
0.0	int
,	O
4.62270e-14	int
,	O
0.0	int
,	O
-	O
8.612e-16	int
,	O
0.0	int
,	O
1.65e-17	int
,	O
0.0	int
,	O
-	O
3.e-19	int
}	O
;	O
static	O
cheb_series	struct
fd_1_a_cs	struct
=	O
{	O
fd_1_a_data	array
,	O
21	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
static	O
double	O
fd_1_b_data	array
[	O
22	int
]	O
=	O
{	O
10.409136795234611872	int
,	O
3.899445098225161947	int
,	O
0.513510935510521222	int
,	O
0.010618736770218426	int
,	O
-	O
0.001584468020659694	int
,	O
0.000146139297161640	int
,	O
-	O
1.408095734499e-6	int
,	O
-	O
2.177993899484e-6	int
,	O
3.91423660640e-7	int
,	O
-	O
2.3860262660e-8	int
,	O
-	O
4.138309573e-9	int
,	O
1.283965236e-9	int
,	O
-	O
1.39695990e-10	int
,	O
-	O
4.907743e-12	int
,	O
4.399878e-12	int
,	O
-	O
7.17291e-13	int
,	O
2.4320e-14	int
,	O
1.4230e-14	int
,	O
-	O
3.446e-15	int
,	O
2.93e-16	int
,	O
3.7e-17	int
,	O
-	O
1.6e-17	int
}	O
;	O
static	O
cheb_series	struct
fd_1_b_cs	struct
=	O
{	O
fd_1_b_data	array
,	O
21	int
,	O
-	O
1	int
,	O
1	int
,	O
11	int
}	O
;	O
static	O
double	O
fd_1_c_data	array
[	O
23	int
]	O
=	O
{	O
56.78099449124299762	int
,	O
21.00718468237668011	int
,	O
2.24592457063193457	int
,	O
0.00173793640425994	int
,	O
-	O
0.00058716468739423	int
,	O
0.00016306958492437	int
,	O
-	O
0.00003817425583020	int
,	O
7.64527252009e-6	int
,	O
-	O
1.31348500162e-6	int
,	O
1.9000646056e-7	int
,	O
-	O
2.141328223e-8	int
,	O
1.23906372e-9	int
,	O
2.1848049e-10	int
,	O
-	O
1.0134282e-10	int
,	O
2.484728e-11	int
,	O
-	O
4.73067e-12	int
,	O
7.3555e-13	int
,	O
-	O
8.740e-14	int
,	O
4.85e-15	int
,	O
1.23e-15	int
,	O
-	O
5.6e-16	int
,	O
1.4e-16	int
,	O
-	O
3.e-17	int
}	O
;	O
static	O
cheb_series	struct
fd_1_c_cs	struct
=	O
{	O
fd_1_c_data	array
,	O
22	int
,	O
-	O
1	int
,	O
1	int
,	O
13	int
}	O
;	O
static	O
double	O
fd_1_d_data	array
[	O
30	int
]	O
=	O
{	O
1.0126626021151374442	int
,	O
-	O
0.0063312525536433793	int
,	O
0.0024837319237084326	int
,	O
-	O
0.0008764333697726109	int
,	O
0.0002913344438921266	int
,	O
-	O
0.0000931877907705692	int
,	O
0.0000290151342040275	int
,	O
-	O
8.8548707259955e-6	int
,	O
2.6603474114517e-6	int
,	O
-	O
7.891415690452e-7	int
,	O
2.315730237195e-7	int
,	O
-	O
6.73179452963e-8	int
,	O
1.94048035606e-8	int
,	O
-	O
5.5507129189e-9	int
,	O
1.5766090896e-9	int
,	O
-	O
4.449310875e-10	int
,	O
1.248292745e-10	int
,	O
-	O
3.48392894e-11	int
,	O
9.6791550e-12	int
,	O
-	O
2.6786240e-12	int
,	O
7.388852e-13	int
,	O
-	O
2.032828e-13	int
,	O
5.58115e-14	int
,	O
-	O
1.52987e-14	int
,	O
4.1886e-15	int
,	O
-	O
1.1458e-15	int
,	O
3.132e-16	int
,	O
-	O
8.56e-17	int
,	O
2.33e-17	int
,	O
-	O
5.9e-18	int
}	O
;	O
static	O
cheb_series	struct
fd_1_d_cs	struct
=	O
{	O
fd_1_d_data	array
,	O
29	int
,	O
-	O
1	int
,	O
1	int
,	O
14	int
}	O
;	O
static	O
double	O
fd_1_e_data	array
[	O
10	int
]	O
=	O
{	O
1.0013707783890401683	int
,	O
0.0009138522593601060	int
,	O
0.0002284630648400133	int
,	O
-	O
1.57e-17	int
,	O
-	O
1.27e-17	int
,	O
-	O
9.7e-18	int
,	O
-	O
6.9e-18	int
,	O
-	O
4.6e-18	int
,	O
-	O
2.9e-18	int
,	O
-	O
1.7e-18	int
}	O
;	O
static	O
cheb_series	struct
fd_1_e_cs	struct
=	O
{	O
fd_1_e_data	array
,	O
9	int
,	O
-	O
1	int
,	O
1	int
,	O
4	int
}	O
;	O
static	O
double	O
fd_2_a_data	array
[	O
21	int
]	O
=	O
{	O
2.1573661917148458336	int
,	O
0.8849670334241132182	int
,	O
0.1784163467613519713	int
,	O
0.0208333333333333333	int
,	O
0.0012708226459768508	int
,	O
0.0	int
,	O
-	O
5.0619314244895e-6	int
,	O
0.0	int
,	O
4.32026533989e-8	int
,	O
0.0	int
,	O
-	O
4.870544166e-10	int
,	O
0.0	int
,	O
6.4203740e-12	int
,	O
0.0	int
,	O
-	O
9.37424e-14	int
,	O
0.0	int
,	O
1.4715e-15	int
,	O
0.0	int
,	O
-	O
2.44e-17	int
,	O
0.0	int
,	O
4.e-19	int
}	O
;	O
static	O
cheb_series	struct
fd_2_a_cs	struct
=	O
{	O
fd_2_a_data	array
,	O
20	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
static	O
double	O
fd_2_b_data	array
[	O
22	int
]	O
=	O
{	O
16.508258811798623599	int
,	O
7.421719394793067988	int
,	O
1.458309885545603821	int
,	O
0.128773850882795229	int
,	O
0.001963612026198147	int
,	O
-	O
0.000237458988738779	int
,	O
0.000018539661382641	int
,	O
-	O
1.92805649479e-7	int
,	O
-	O
2.01950028452e-7	int
,	O
3.2963497518e-8	int
,	O
-	O
1.885817092e-9	int
,	O
-	O
2.72632744e-10	int
,	O
8.0554561e-11	int
,	O
-	O
8.313223e-12	int
,	O
-	O
2.24489e-13	int
,	O
2.18778e-13	int
,	O
-	O
3.4290e-14	int
,	O
1.225e-15	int
,	O
5.81e-16	int
,	O
-	O
1.37e-16	int
,	O
1.2e-17	int
,	O
1.e-18	int
}	O
;	O
static	O
cheb_series	struct
fd_2_b_cs	struct
=	O
{	O
fd_2_b_data	array
,	O
21	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
static	O
double	O
fd_2_c_data	array
[	O
20	int
]	O
=	O
{	O
168.87129776686440711	int
,	O
81.80260488091659458	int
,	O
15.75408505947931513	int
,	O
1.12325586765966440	int
,	O
0.00059057505725084	int
,	O
-	O
0.00016469712946921	int
,	O
0.00003885607810107	int
,	O
-	O
7.89873660613e-6	int
,	O
1.39786238616e-6	int
,	O
-	O
2.1534528656e-7	int
,	O
2.831510953e-8	int
,	O
-	O
2.94978583e-9	int
,	O
1.6755082e-10	int
,	O
2.234229e-11	int
,	O
-	O
1.035130e-11	int
,	O
2.41117e-12	int
,	O
-	O
4.3531e-13	int
,	O
6.447e-14	int
,	O
-	O
7.39e-15	int
,	O
4.3e-16	int
}	O
;	O
static	O
cheb_series	struct
fd_2_c_cs	struct
=	O
{	O
fd_2_c_data	array
,	O
19	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
static	O
double	O
fd_2_d_data	array
[	O
30	int
]	O
=	O
{	O
0.3459960518965277589	int
,	O
-	O
0.00633136397691958024	int
,	O
0.00248382959047594408	int
,	O
-	O
0.00087651191884005114	int
,	O
0.00029139255351719932	int
,	O
-	O
0.00009322746111846199	int
,	O
0.00002904021914564786	int
,	O
-	O
8.86962264810663e-6	int
,	O
2.66844972574613e-6	int
,	O
-	O
7.9331564996004e-7	int
,	O
2.3359868615516e-7	int
,	O
-	O
6.824790880436e-8	int
,	O
1.981036528154e-8	int
,	O
-	O
5.71940426300e-9	int
,	O
1.64379426579e-9	int
,	O
-	O
4.7064937566e-10	int
,	O
1.3432614122e-10	int
,	O
-	O
3.823400534e-11	int
,	O
1.085771994e-11	int
,	O
-	O
3.07727465e-12	int
,	O
8.7064848e-13	int
,	O
-	O
2.4595431e-13	int
,	O
6.938531e-14	int
,	O
-	O
1.954939e-14	int
,	O
5.50162e-15	int
,	O
-	O
1.54657e-15	int
,	O
4.3429e-16	int
,	O
-	O
1.2178e-16	int
,	O
3.394e-17	int
,	O
-	O
8.81e-18	int
}	O
;	O
static	O
cheb_series	struct
fd_2_d_cs	struct
=	O
{	O
fd_2_d_data	array
,	O
29	int
,	O
-	O
1	int
,	O
1	int
,	O
14	int
}	O
;	O
static	O
double	O
fd_2_e_data	array
[	O
4	int
]	O
=	O
{	O
0.3347041117223735227	int
,	O
0.00091385225936012645	int
,	O
0.00022846306484003205	int
,	O
5.2e-19	int
}	O
;	O
static	O
cheb_series	struct
fd_2_e_cs	struct
=	O
{	O
fd_2_e_data	array
,	O
3	int
,	O
-	O
1	int
,	O
1	int
,	O
3	int
}	O
;	O
static	O
double	O
fd_mhalf_a_data	array
[	O
20	int
]	O
=	O
{	O
1.2663290042859741974	int
,	O
0.3697876251911153071	int
,	O
0.0278131011214405055	int
,	O
-	O
0.0033332848565672007	int
,	O
-	O
0.0004438108265412038	int
,	O
0.0000616495177243839	int
,	O
8.7589611449897e-6	int
,	O
-	O
1.2622936986172e-6	int
,	O
-	O
1.837464037221e-7	int
,	O
2.69495091400e-8	int
,	O
3.9760866257e-9	int
,	O
-	O
5.894468795e-10	int
,	O
-	O
8.77321638e-11	int
,	O
1.31016571e-11	int
,	O
1.9621619e-12	int
,	O
-	O
2.945887e-13	int
,	O
-	O
4.43234e-14	int
,	O
6.6816e-15	int
,	O
1.0084e-15	int
,	O
-	O
1.561e-16	int
}	O
;	O
static	O
cheb_series	struct
fd_mhalf_a_cs	struct
=	O
{	O
fd_mhalf_a_data	array
,	O
19	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
static	O
double	O
fd_mhalf_b_data	array
[	O
20	int
]	O
=	O
{	O
3.270796131942071484	int
,	O
0.5809004935853417887	int
,	O
-	O
0.0299313438794694987	int
,	O
-	O
0.0013287935412612198	int
,	O
0.0009910221228704198	int
,	O
-	O
0.0001690954939688554	int
,	O
6.5955849946915e-6	int
,	O
3.5953966033618e-6	int
,	O
-	O
9.430672023181e-7	int
,	O
8.75773958291e-8	int
,	O
1.06247652607e-8	int
,	O
-	O
4.9587006215e-9	int
,	O
7.160432795e-10	int
,	O
4.5072219e-12	int
,	O
-	O
2.3695425e-11	int
,	O
4.9122208e-12	int
,	O
-	O
2.905277e-13	int
,	O
-	O
9.59291e-14	int
,	O
3.00028e-14	int
,	O
-	O
3.4970e-15	int
}	O
;	O
static	O
cheb_series	struct
fd_mhalf_b_cs	struct
=	O
{	O
fd_mhalf_b_data	array
,	O
19	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
static	O
double	O
fd_mhalf_c_data	array
[	O
25	int
]	O
=	O
{	O
5.828283273430595507	int
,	O
0.677521118293264655	int
,	O
-	O
0.043946248736481554	int
,	O
0.005825595781828244	int
,	O
-	O
0.000864858907380668	int
,	O
0.000110017890076539	int
,	O
-	O
6.973305225404e-6	int
,	O
-	O
1.716267414672e-6	int
,	O
8.59811582041e-7	int
,	O
-	O
2.33066786976e-7	int
,	O
4.8503191159e-8	int
,	O
-	O
8.130620247e-9	int
,	O
1.021068250e-9	int
,	O
-	O
5.3188423e-11	int
,	O
-	O
1.9430559e-11	int
,	O
8.750506e-12	int
,	O
-	O
2.324897e-12	int
,	O
4.83102e-13	int
,	O
-	O
8.1207e-14	int
,	O
1.0132e-14	int
,	O
-	O
4.64e-16	int
,	O
-	O
2.24e-16	int
,	O
9.7e-17	int
,	O
-	O
2.6e-17	int
,	O
5.e-18	int
}	O
;	O
static	O
cheb_series	struct
fd_mhalf_c_cs	struct
=	O
{	O
fd_mhalf_c_data	array
,	O
24	int
,	O
-	O
1	int
,	O
1	int
,	O
13	int
}	O
;	O
static	O
double	O
fd_mhalf_d_data	array
[	O
30	int
]	O
=	O
{	O
2.2530744202862438709	int
,	O
0.0018745152720114692	int
,	O
-	O
0.0007550198497498903	int
,	O
0.0002759818676644382	int
,	O
-	O
0.0000959406283465913	int
,	O
0.0000324056855537065	int
,	O
-	O
0.0000107462396145761	int
,	O
3.5126865219224e-6	int
,	O
-	O
1.1313072730092e-6	int
,	O
3.577454162766e-7	int
,	O
-	O
1.104926666238e-7	int
,	O
3.31304165692e-8	int
,	O
-	O
9.5837381008e-9	int
,	O
2.6575790141e-9	int
,	O
-	O
7.015201447e-10	int
,	O
1.747111336e-10	int
,	O
-	O
4.04909605e-11	int
,	O
8.5104999e-12	int
,	O
-	O
1.5261885e-12	int
,	O
1.876851e-13	int
,	O
1.00574e-14	int
,	O
-	O
1.82002e-14	int
,	O
8.6634e-15	int
,	O
-	O
3.2058e-15	int
,	O
1.0572e-15	int
,	O
-	O
3.259e-16	int
,	O
9.60e-17	int
,	O
-	O
2.74e-17	int
,	O
7.6e-18	int
,	O
-	O
1.9e-18	int
}	O
;	O
static	O
cheb_series	struct
fd_mhalf_d_cs	struct
=	O
{	O
fd_mhalf_d_data	array
,	O
29	int
,	O
-	O
1	int
,	O
1	int
,	O
15	int
}	O
;	O
static	O
double	O
fd_half_a_data	array
[	O
23	int
]	O
=	O
{	O
1.7177138871306189157	int
,	O
0.6192579515822668460	int
,	O
0.0932802275119206269	int
,	O
0.0047094853246636182	int
,	O
-	O
0.0004243667967864481	int
,	O
-	O
0.0000452569787686193	int
,	O
5.2426509519168e-6	int
,	O
6.387648249080e-7	int
,	O
-	O
8.05777004848e-8	int
,	O
-	O
1.04290272415e-8	int
,	O
1.3769478010e-9	int
,	O
1.847190359e-10	int
,	O
-	O
2.51061890e-11	int
,	O
-	O
3.4497818e-12	int
,	O
4.784373e-13	int
,	O
6.68828e-14	int
,	O
-	O
9.4147e-15	int
,	O
-	O
1.3333e-15	int
,	O
1.898e-16	int
,	O
2.72e-17	int
,	O
-	O
3.9e-18	int
,	O
-	O
6.e-19	int
,	O
1.e-19	int
}	O
;	O
static	O
cheb_series	struct
fd_half_a_cs	struct
=	O
{	O
fd_half_a_data	array
,	O
22	int
,	O
-	O
1	int
,	O
1	int
,	O
11	int
}	O
;	O
static	O
double	O
fd_half_b_data	array
[	O
20	int
]	O
=	O
{	O
7.651013792074984027	int
,	O
2.475545606866155737	int
,	O
0.218335982672476128	int
,	O
-	O
0.007730591500584980	int
,	O
-	O
0.000217443383867318	int
,	O
0.000147663980681359	int
,	O
-	O
0.000021586361321527	int
,	O
8.07712735394e-7	int
,	O
3.28858050706e-7	int
,	O
-	O
7.9474330632e-8	int
,	O
6.940207234e-9	int
,	O
6.75594681e-10	int
,	O
-	O
3.10200490e-10	int
,	O
4.2677233e-11	int
,	O
-	O
2.1696e-14	int
,	O
-	O
1.170245e-12	int
,	O
2.34757e-13	int
,	O
-	O
1.4139e-14	int
,	O
-	O
3.864e-15	int
,	O
1.202e-15	int
}	O
;	O
static	O
cheb_series	struct
fd_half_b_cs	struct
=	O
{	O
fd_half_b_data	array
,	O
19	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
static	O
double	O
fd_half_c_data	array
[	O
23	int
]	O
=	O
{	O
29.584339348839816528	int
,	O
8.808344283250615592	int
,	O
0.503771641883577308	int
,	O
-	O
0.021540694914550443	int
,	O
0.002143341709406890	int
,	O
-	O
0.000257365680646579	int
,	O
0.000027933539372803	int
,	O
-	O
1.678525030167e-6	int
,	O
-	O
2.78100117693e-7	int
,	O
1.35218065147e-7	int
,	O
-	O
3.3740425009e-8	int
,	O
6.474834942e-9	int
,	O
-	O
1.009678978e-9	int
,	O
1.20057555e-10	int
,	O
-	O
6.636314e-12	int
,	O
-	O
1.710566e-12	int
,	O
7.75069e-13	int
,	O
-	O
1.97973e-13	int
,	O
3.9414e-14	int
,	O
-	O
6.374e-15	int
,	O
7.77e-16	int
,	O
-	O
4.0e-17	int
,	O
-	O
1.4e-17	int
}	O
;	O
static	O
cheb_series	struct
fd_half_c_cs	struct
=	O
{	O
fd_half_c_data	array
,	O
22	int
,	O
-	O
1	int
,	O
1	int
,	O
13	int
}	O
;	O
static	O
double	O
fd_half_d_data	array
[	O
30	int
]	O
=	O
{	O
1.5116909434145508537	int
,	O
-	O
0.0036043405371630468	int
,	O
0.0014207743256393359	int
,	O
-	O
0.0005045399052400260	int
,	O
0.0001690758006957347	int
,	O
-	O
0.0000546305872688307	int
,	O
0.0000172223228484571	int
,	O
-	O
5.3352603788706e-6	int
,	O
1.6315287543662e-6	int
,	O
-	O
4.939021084898e-7	int
,	O
1.482515450316e-7	int
,	O
-	O
4.41552276226e-8	int
,	O
1.30503160961e-8	int
,	O
-	O
3.8262599802e-9	int
,	O
1.1123226976e-9	int
,	O
-	O
3.204765534e-10	int
,	O
9.14870489e-11	int
,	O
-	O
2.58778946e-11	int
,	O
7.2550731e-12	int
,	O
-	O
2.0172226e-12	int
,	O
5.566891e-13	int
,	O
-	O
1.526247e-13	int
,	O
4.16121e-14	int
,	O
-	O
1.12933e-14	int
,	O
3.0537e-15	int
,	O
-	O
8.234e-16	int
,	O
2.215e-16	int
,	O
-	O
5.95e-17	int
,	O
1.59e-17	int
,	O
-	O
4.0e-18	int
}	O
;	O
static	O
cheb_series	struct
fd_half_d_cs	struct
=	O
{	O
fd_half_d_data	array
,	O
29	int
,	O
-	O
1	int
,	O
1	int
,	O
15	int
}	O
;	O
static	O
double	O
fd_3half_a_data	array
[	O
20	int
]	O
=	O
{	O
2.0404775940601704976	int
,	O
0.8122168298093491444	int
,	O
0.1536371165644008069	int
,	O
0.0156174323847845125	int
,	O
0.0005943427879290297	int
,	O
-	O
0.0000429609447738365	int
,	O
-	O
3.8246452994606e-6	int
,	O
3.802306180287e-7	int
,	O
4.05746157593e-8	int
,	O
-	O
4.5530360159e-9	int
,	O
-	O
5.306873139e-10	int
,	O
6.37297268e-11	int
,	O
7.8403674e-12	int
,	O
-	O
9.840241e-13	int
,	O
-	O
1.255952e-13	int
,	O
1.62617e-14	int
,	O
2.1318e-15	int
,	O
-	O
2.825e-16	int
,	O
-	O
3.78e-17	int
,	O
5.1e-18	int
}	O
;	O
static	O
cheb_series	struct
fd_3half_a_cs	struct
=	O
{	O
fd_3half_a_data	array
,	O
19	int
,	O
-	O
1	int
,	O
1	int
,	O
11	int
}	O
;	O
static	O
double	O
fd_3half_b_data	array
[	O
22	int
]	O
=	O
{	O
13.403206654624176674	int
,	O
5.574508357051880924	int
,	O
0.931228574387527769	int
,	O
0.054638356514085862	int
,	O
-	O
0.001477172902737439	int
,	O
-	O
0.000029378553381869	int
,	O
0.000018357033493246	int
,	O
-	O
2.348059218454e-6	int
,	O
8.3173787440e-8	int
,	O
2.6826486956e-8	int
,	O
-	O
6.011244398e-9	int
,	O
4.94345981e-10	int
,	O
3.9557340e-11	int
,	O
-	O
1.7894930e-11	int
,	O
2.348972e-12	int
,	O
-	O
1.2823e-14	int
,	O
-	O
5.4192e-14	int
,	O
1.0527e-14	int
,	O
-	O
6.39e-16	int
,	O
-	O
1.47e-16	int
,	O
4.5e-17	int
,	O
-	O
5.e-18	int
}	O
;	O
static	O
cheb_series	struct
fd_3half_b_cs	struct
=	O
{	O
fd_3half_b_data	array
,	O
21	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
static	O
double	O
fd_3half_c_data	array
[	O
21	int
]	O
=	O
{	O
101.03685253378877642	int
,	O
43.62085156043435883	int
,	O
6.62241373362387453	int
,	O
0.25081415008708521	int
,	O
-	O
0.00798124846271395	int
,	O
0.00063462245101023	int
,	O
-	O
0.00006392178890410	int
,	O
6.04535131939e-6	int
,	O
-	O
3.4007683037e-7	int
,	O
-	O
4.072661545e-8	int
,	O
1.931148453e-8	int
,	O
-	O
4.46328355e-9	int
,	O
7.9434717e-10	int
,	O
-	O
1.1573569e-10	int
,	O
1.304658e-11	int
,	O
-	O
7.4114e-13	int
,	O
-	O
1.4181e-13	int
,	O
6.491e-14	int
,	O
-	O
1.597e-14	int
,	O
3.05e-15	int
,	O
-	O
4.8e-16	int
}	O
;	O
static	O
cheb_series	struct
fd_3half_c_cs	struct
=	O
{	O
fd_3half_c_data	array
,	O
20	int
,	O
-	O
1	int
,	O
1	int
,	O
12	int
}	O
;	O
static	O
double	O
fd_3half_d_data	array
[	O
25	int
]	O
=	O
{	O
0.6160645215171852381	int
,	O
-	O
0.0071239478492671463	int
,	O
0.0027906866139659846	int
,	O
-	O
0.0009829521424317718	int
,	O
0.0003260229808519545	int
,	O
-	O
0.0001040160912910890	int
,	O
0.0000322931223232439	int
,	O
-	O
9.8243506588102e-6	int
,	O
2.9420132351277e-6	int
,	O
-	O
8.699154670418e-7	int
,	O
2.545460071999e-7	int
,	O
-	O
7.38305056331e-8	int
,	O
2.12545670310e-8	int
,	O
-	O
6.0796532462e-9	int
,	O
1.7294556741e-9	int
,	O
-	O
4.896540687e-10	int
,	O
1.380786037e-10	int
,	O
-	O
3.88057305e-11	int
,	O
1.08753212e-11	int
,	O
-	O
3.0407308e-12	int
,	O
8.485626e-13	int
,	O
-	O
2.364275e-13	int
,	O
6.57636e-14	int
,	O
-	O
1.81807e-14	int
,	O
4.6884e-15	int
}	O
;	O
static	O
cheb_series	struct
fd_3half_d_cs	struct
=	O
{	O
fd_3half_d_data	array
,	O
24	int
,	O
-	O
1	int
,	O
1	int
,	O
16	int
}	O
;	O
static	O
int	O
fd_whiz	function
(	O
const	O
double	O
term	double
,	O
const	O
int	O
iterm	int
,	O
double	O
*	O
qnum	pointer
,	O
double	O
*	O
qden	pointer
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
s	double
)	O
{	O
if	O
(	O
iterm	int
==	O
0	int
)	O
*	O
s	double
=	O
0.0	int
;	O
*	O
s	double
+=	O
term	double
;	O
qden	pointer
[	O
iterm	int
]	O
=	O
1.0	int
/	O
(	O
term	double
*	O
(	O
iterm	int
+	O
1.0	int
)	O
*	O
(	O
iterm	int
+	O
1.0	int
)	O
)	O
;	O
qnum	pointer
[	O
iterm	int
]	O
=	O
*	O
s	double
*	O
qden	pointer
[	O
iterm	int
]	O
;	O
if	O
(	O
iterm	int
>	O
0	int
)	O
{	O
double	O
factor	double
=	O
1.0	int
;	O
double	O
ratio	double
=	O
iterm	int
/	O
(	O
iterm	int
+	O
1.0	int
)	O
;	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
iterm	int
-	O
1	int
;	O
j	int
>=	O
0	int
;	O
j	int
--	O
)	O
{	O
double	O
c	double
=	O
factor	double
*	O
(	O
j	int
+	O
1.0	int
)	O
/	O
(	O
iterm	int
+	O
1.0	int
)	O
;	O
factor	double
*=	O
ratio	double
;	O
qden	pointer
[	O
j	int
]	O
=	O
qden	pointer
[	O
j	int
+	O
1	int
]	O
-	O
c	double
*	O
qden	pointer
[	O
j	int
]	O
;	O
qnum	pointer
[	O
j	int
]	O
=	O
qnum	pointer
[	O
j	int
+	O
1	int
]	O
-	O
c	double
*	O
qnum	pointer
[	O
j	int
]	O
;	O
}	O
}	O
*	O
result	pointer
=	O
qnum	pointer
[	O
0	int
]	O
/	O
qden	pointer
[	O
0	int
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
fd_nint	function
(	O
const	O
int	O
j	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
enum	O
{	O
nsize	int
=	O
100	int
+	O
1	int
}	O
;	O
double	O
qcoeff	array
[	O
nsize	int
]	O
;	O
if	O
(	O
j	int
>=	O
-	O
1	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_ESANITY	int
)	O
;	O
}	O
else	O
if	O
(	O
j	int
<	O
-	O
(	O
nsize	int
)	O
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EUNIMPL	int
)	O
;	O
}	O
else	O
{	O
double	O
a	double
,	O
p	double
,	O
f	pointer
;	O
int	O
i	int
,	O
k	int
;	O
int	O
n	int
=	O
-	O
(	O
j	int
+	O
1	int
)	O
;	O
qcoeff	array
[	O
1	int
]	O
=	O
1.0	int
;	O
for	O
(	O
k	int
=	O
2	int
;	O
k	int
<=	O
n	int
;	O
k	int
++	O
)	O
{	O
qcoeff	array
[	O
k	int
]	O
=	O
-	O
qcoeff	array
[	O
k	int
-	O
1	int
]	O
;	O
for	O
(	O
i	int
=	O
k	int
-	O
1	int
;	O
i	int
>=	O
2	int
;	O
i	int
--	O
)	O
{	O
qcoeff	array
[	O
i	int
]	O
=	O
i	int
*	O
qcoeff	array
[	O
i	int
]	O
-	O
(	O
k	int
-	O
(	O
i	int
-	O
1	int
)	O
)	O
*	O
qcoeff	array
[	O
i	int
-	O
1	int
]	O
;	O
}	O
}	O
if	O
(	O
x	double
>=	O
0.0	int
)	O
{	O
a	double
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
f	pointer
=	O
qcoeff	array
[	O
1	int
]	O
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
f	pointer
=	O
f	pointer
*	O
a	double
+	O
qcoeff	array
[	O
i	int
]	O
;	O
}	O
}	O
else	O
{	O
a	double
=	O
exp	function
(	O
x	double
)	O
;	O
f	pointer
=	O
qcoeff	array
[	O
n	int
]	O
;	O
for	O
(	O
i	int
=	O
n	int
-	O
1	int
;	O
i	int
>=	O
1	int
;	O
i	int
--	O
)	O
{	O
f	pointer
=	O
f	pointer
*	O
a	double
+	O
qcoeff	array
[	O
i	int
]	O
;	O
}	O
}	O
p	double
=	O
gsl_sf_pow_int	function
(	O
1.0	int
+	O
a	double
,	O
j	int
)	O
;	O
result	pointer
->	O
val	double
=	O
f	pointer
*	O
a	double
*	O
p	double
;	O
result	pointer
->	O
err	double
=	O
3.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
f	pointer
*	O
a	double
*	O
p	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
fd_neg	function
(	O
const	O
double	O
j	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
enum	O
{	O
itmax	int
=	O
100	int
,	O
qsize	int
=	O
100	int
+	O
1	int
}	O
;	O
double	O
qnum	pointer
[	O
qsize	int
]	O
,	O
qden	pointer
[	O
qsize	int
]	O
;	O
if	O
(	O
x	double
<	O
GSL_LOG_DBL_MIN	O
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
1.0	int
&&	O
x	double
<	O
-	O
fabs	function
(	O
j	int
+	O
1.0	int
)	O
)	O
{	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
double	O
term	double
=	O
ex	double
;	O
double	O
sum	double
=	O
term	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
2	int
;	O
n	int
<	O
100	int
;	O
n	int
++	O
)	O
{	O
double	O
rat	double
=	O
(	O
n	int
-	O
1.0	int
)	O
/	O
n	int
;	O
double	O
p	double
=	O
pow	function
(	O
rat	double
,	O
j	int
+	O
1.0	int
)	O
;	O
term	double
*=	O
-	O
ex	double
*	O
p	double
;	O
sum	double
+=	O
term	double
;	O
if	O
(	O
fabs	function
(	O
term	double
/	O
sum	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
result	pointer
->	O
val	double
=	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
sum	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
s	double
=	O
0.0	int
;	O
double	O
xn	double
=	O
x	double
;	O
double	O
ex	double
=	O
-	O
exp	function
(	O
x	double
)	O
;	O
double	O
enx	double
=	O
-	O
ex	double
;	O
double	O
f	pointer
=	O
0.0	int
;	O
double	O
f_previous	double
;	O
int	O
jterm	int
;	O
for	O
(	O
jterm	int
=	O
0	int
;	O
jterm	int
<=	O
itmax	int
;	O
jterm	int
++	O
)	O
{	O
double	O
p	double
=	O
pow	function
(	O
jterm	int
+	O
1.0	int
,	O
j	int
+	O
1.0	int
)	O
;	O
double	O
term	double
=	O
enx	double
/	O
p	double
;	O
f_previous	double
=	O
f	pointer
;	O
fd_whiz	function
(	O
term	double
,	O
jterm	int
,	O
qnum	pointer
,	O
qden	pointer
,	O
&	O
f	pointer
,	O
&	O
s	double
)	O
;	O
xn	double
+=	O
x	double
;	O
if	O
(	O
fabs	function
(	O
f	pointer
-	O
f_previous	double
)	O
<	O
fabs	function
(	O
f	pointer
)	O
*	O
2.0	int
*	O
GSL_DBL_EPSILON	int
||	O
xn	double
<	O
GSL_LOG_DBL_MIN	O
)	O
break	O
;	O
enx	double
*=	O
ex	double
;	O
}	O
result	pointer
->	O
val	double
=	O
f	pointer
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
f	pointer
-	O
f_previous	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
f	pointer
)	O
;	O
if	O
(	O
jterm	int
==	O
itmax	int
)	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EMAXITER	int
)	O
;	O
else	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
fd_asymp	function
(	O
const	O
double	O
j	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
int	O
j_integer	int
=	O
(	O
fabs	function
(	O
j	int
-	O
floor	function
(	O
j	int
+	O
0.5	int
)	O
)	O
<	O
100.0	int
*	O
GSL_DBL_EPSILON	int
)	O
;	O
const	O
int	O
itmax	int
=	O
200	int
;	O
gsl_sf_result	struct
lg	struct
;	O
int	O
stat_lg	int
=	O
gsl_sf_lngamma_e	function
(	O
j	int
+	O
2.0	int
,	O
&	O
lg	struct
)	O
;	O
double	O
seqn_val	double
=	O
0.5	int
;	O
double	O
seqn_err	double
=	O
0.0	int
;	O
double	O
xm2	double
=	O
(	O
1.0	int
/	O
x	double
)	O
/	O
x	double
;	O
double	O
xgam	double
=	O
1.0	int
;	O
double	O
add	double
=	O
GSL_DBL_MAX	int
;	O
double	O
cos_term	double
;	O
double	O
ln_x	double
;	O
double	O
ex_term_1	double
;	O
double	O
ex_term_2	double
;	O
gsl_sf_result	struct
fneg	struct
;	O
gsl_sf_result	struct
ex_arg	struct
;	O
gsl_sf_result	struct
ex	double
;	O
int	O
stat_fneg	int
;	O
int	O
stat_e	int
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
1	int
;	O
n	int
<=	O
itmax	int
;	O
n	int
++	O
)	O
{	O
double	O
add_previous	double
=	O
add	double
;	O
gsl_sf_result	struct
eta	struct
;	O
gsl_sf_eta_int_e	function
(	O
2	int
*	O
n	int
,	O
&	O
eta	struct
)	O
;	O
xgam	double
=	O
xgam	double
*	O
xm2	double
*	O
(	O
j	int
+	O
1.0	int
-	O
(	O
2	int
*	O
n	int
-	O
2	int
)	O
)	O
*	O
(	O
j	int
+	O
1.0	int
-	O
(	O
2	int
*	O
n	int
-	O
1	int
)	O
)	O
;	O
add	double
=	O
eta	struct
.	O
val	double
*	O
xgam	double
;	O
if	O
(	O
!	O
j_integer	int
&&	O
fabs	function
(	O
add	double
)	O
>	O
fabs	function
(	O
add_previous	double
)	O
)	O
break	O
;	O
if	O
(	O
fabs	function
(	O
add	double
/	O
seqn_val	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
seqn_val	double
+=	O
add	double
;	O
seqn_err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
add	double
)	O
;	O
}	O
seqn_err	double
+=	O
fabs	function
(	O
add	double
)	O
;	O
stat_fneg	int
=	O
fd_neg	function
(	O
j	int
,	O
-	O
x	double
,	O
&	O
fneg	struct
)	O
;	O
ln_x	double
=	O
log	function
(	O
x	double
)	O
;	O
ex_term_1	double
=	O
(	O
j	int
+	O
1.0	int
)	O
*	O
ln_x	double
;	O
ex_term_2	double
=	O
lg	struct
.	O
val	double
;	O
ex_arg	struct
.	O
val	double
=	O
ex_term_1	double
-	O
ex_term_2	double
;	O
ex_arg	struct
.	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
ex_term_1	double
)	O
+	O
fabs	function
(	O
ex_term_2	double
)	O
)	O
+	O
lg	struct
.	O
err	double
;	O
stat_e	int
=	O
gsl_sf_exp_err_e	function
(	O
ex_arg	struct
.	O
val	double
,	O
ex_arg	struct
.	O
err	double
,	O
&	O
ex	double
)	O
;	O
cos_term	double
=	O
cos	function
(	O
j	int
*	O
M_PI	int
)	O
;	O
result	pointer
->	O
val	double
=	O
cos_term	double
*	O
fneg	struct
.	O
val	double
+	O
2.0	int
*	O
seqn_val	double
*	O
ex	double
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
2.0	int
*	O
ex	double
.	O
err	double
*	O
seqn_val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
fabs	function
(	O
2.0	int
*	O
ex	double
.	O
val	double
*	O
seqn_err	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
fabs	function
(	O
cos_term	double
)	O
*	O
fneg	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_e	int
,	O
stat_fneg	int
,	O
stat_lg	int
)	O
;	O
}	O
static	O
int	O
fd_series_int	function
(	O
const	O
int	O
j	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
int	O
n	int
;	O
double	O
sum	double
=	O
0.0	int
;	O
double	O
del	double
;	O
double	O
pow_factor	double
=	O
1.0	int
;	O
gsl_sf_result	struct
eta_factor	struct
;	O
gsl_sf_eta_int_e	function
(	O
j	int
+	O
1	int
,	O
&	O
eta_factor	struct
)	O
;	O
del	double
=	O
pow_factor	double
*	O
eta_factor	struct
.	O
val	double
;	O
sum	double
+=	O
del	double
;	O
for	O
(	O
n	int
=	O
1	int
;	O
n	int
<=	O
j	int
+	O
2	int
;	O
n	int
++	O
)	O
{	O
gsl_sf_eta_int_e	function
(	O
j	int
+	O
1	int
-	O
n	int
,	O
&	O
eta_factor	struct
)	O
;	O
pow_factor	double
*=	O
x	double
/	O
n	int
;	O
del	double
=	O
pow_factor	double
*	O
eta_factor	struct
.	O
val	double
;	O
sum	double
+=	O
del	double
;	O
if	O
(	O
fabs	function
(	O
del	double
/	O
sum	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
if	O
(	O
j	int
<	O
32	int
)	O
{	O
int	O
m	int
;	O
gsl_sf_result	struct
jfact	struct
;	O
double	O
sum2	double
;	O
double	O
pre2	double
;	O
gsl_sf_fact_e	function
(	O
(	O
unsigned	O
int	O
)	O
j	int
,	O
&	O
jfact	struct
)	O
;	O
pre2	double
=	O
gsl_sf_pow_int	function
(	O
x	double
,	O
j	int
)	O
/	O
jfact	struct
.	O
val	double
;	O
gsl_sf_eta_int_e	function
(	O
-	O
3	int
,	O
&	O
eta_factor	struct
)	O
;	O
pow_factor	double
=	O
x	double
*	O
x	double
*	O
x	double
*	O
x	double
/	O
(	O
(	O
j	int
+	O
4	int
)	O
*	O
(	O
j	int
+	O
3	int
)	O
*	O
(	O
j	int
+	O
2	int
)	O
*	O
(	O
j	int
+	O
1	int
)	O
)	O
;	O
sum2	double
=	O
eta_factor	struct
.	O
val	double
*	O
pow_factor	double
;	O
for	O
(	O
m	int
=	O
3	int
;	O
m	int
<	O
24	int
;	O
m	int
++	O
)	O
{	O
gsl_sf_eta_int_e	function
(	O
1	int
-	O
2	int
*	O
m	int
,	O
&	O
eta_factor	struct
)	O
;	O
pow_factor	double
*=	O
x	double
*	O
x	double
/	O
(	O
(	O
j	int
+	O
2	int
*	O
m	int
)	O
*	O
(	O
j	int
+	O
2	int
*	O
m	int
-	O
1	int
)	O
)	O
;	O
sum2	double
+=	O
eta_factor	struct
.	O
val	double
*	O
pow_factor	double
;	O
}	O
sum	double
+=	O
pre2	double
*	O
sum2	double
;	O
}	O
result	pointer
->	O
val	double
=	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
sum	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
fd_UMseries_int	function
(	O
const	O
int	O
j	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
int	O
nmax	int
=	O
2000	int
;	O
double	O
pre	double
;	O
double	O
lnpre_val	double
;	O
double	O
lnpre_err	double
;	O
double	O
sum_even_val	double
=	O
1.0	int
;	O
double	O
sum_even_err	double
=	O
0.0	int
;	O
double	O
sum_odd_val	double
=	O
0.0	int
;	O
double	O
sum_odd_err	double
=	O
0.0	int
;	O
int	O
stat_sum	int
;	O
int	O
stat_e	int
;	O
int	O
stat_h	int
=	O
GSL_SUCCESS	int
;	O
int	O
n	int
;	O
if	O
(	O
x	double
<	O
500.0	int
&&	O
j	int
<	O
80	int
)	O
{	O
double	O
p	double
=	O
gsl_sf_pow_int	function
(	O
x	double
,	O
j	int
+	O
1	int
)	O
;	O
gsl_sf_result	struct
g	struct
;	O
gsl_sf_fact_e	function
(	O
j	int
+	O
1	int
,	O
&	O
g	struct
)	O
;	O
lnpre_val	double
=	O
0.0	int
;	O
lnpre_err	double
=	O
0.0	int
;	O
pre	double
=	O
p	double
/	O
g	struct
.	O
val	double
;	O
}	O
else	O
{	O
double	O
lnx	double
=	O
log	function
(	O
x	double
)	O
;	O
gsl_sf_result	struct
lg	struct
;	O
gsl_sf_lngamma_e	function
(	O
j	int
+	O
2.0	int
,	O
&	O
lg	struct
)	O
;	O
lnpre_val	double
=	O
(	O
j	int
+	O
1.0	int
)	O
*	O
lnx	double
-	O
lg	struct
.	O
val	double
;	O
lnpre_err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
(	O
j	int
+	O
1.0	int
)	O
*	O
lnx	double
)	O
+	O
lg	struct
.	O
err	double
;	O
pre	double
=	O
1.0	int
;	O
}	O
for	O
(	O
n	int
=	O
1	int
;	O
n	int
<	O
nmax	int
;	O
n	int
+=	O
2	int
)	O
{	O
double	O
del_val	double
;	O
double	O
del_err	double
;	O
gsl_sf_result	struct
U	struct
;	O
gsl_sf_result	struct
M	struct
;	O
int	O
stat_h_U	int
=	O
gsl_sf_hyperg_U_int_e	function
(	O
1	int
,	O
j	int
+	O
2	int
,	O
n	int
*	O
x	double
,	O
&	O
U	struct
)	O
;	O
int	O
stat_h_F	int
=	O
gsl_sf_hyperg_1F1_int_e	function
(	O
1	int
,	O
j	int
+	O
2	int
,	O
-	O
n	int
*	O
x	double
,	O
&	O
M	struct
)	O
;	O
stat_h	int
=	O
GSL_ERROR_SELECT_3	O
(	O
stat_h	int
,	O
stat_h_U	int
,	O
stat_h_F	int
)	O
;	O
del_val	double
=	O
(	O
(	O
j	int
+	O
1.0	int
)	O
*	O
U	struct
.	O
val	double
-	O
M	struct
.	O
val	double
)	O
;	O
del_err	double
=	O
(	O
fabs	function
(	O
j	int
+	O
1.0	int
)	O
*	O
U	struct
.	O
err	double
+	O
M	struct
.	O
err	double
)	O
;	O
sum_odd_val	double
+=	O
del_val	double
;	O
sum_odd_err	double
+=	O
del_err	double
;	O
if	O
(	O
fabs	function
(	O
del_val	double
/	O
sum_odd_val	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
for	O
(	O
n	int
=	O
2	int
;	O
n	int
<	O
nmax	int
;	O
n	int
+=	O
2	int
)	O
{	O
double	O
del_val	double
;	O
double	O
del_err	double
;	O
gsl_sf_result	struct
U	struct
;	O
gsl_sf_result	struct
M	struct
;	O
int	O
stat_h_U	int
=	O
gsl_sf_hyperg_U_int_e	function
(	O
1	int
,	O
j	int
+	O
2	int
,	O
n	int
*	O
x	double
,	O
&	O
U	struct
)	O
;	O
int	O
stat_h_F	int
=	O
gsl_sf_hyperg_1F1_int_e	function
(	O
1	int
,	O
j	int
+	O
2	int
,	O
-	O
n	int
*	O
x	double
,	O
&	O
M	struct
)	O
;	O
stat_h	int
=	O
GSL_ERROR_SELECT_3	O
(	O
stat_h	int
,	O
stat_h_U	int
,	O
stat_h_F	int
)	O
;	O
del_val	double
=	O
(	O
(	O
j	int
+	O
1.0	int
)	O
*	O
U	struct
.	O
val	double
-	O
M	struct
.	O
val	double
)	O
;	O
del_err	double
=	O
(	O
fabs	function
(	O
j	int
+	O
1.0	int
)	O
*	O
U	struct
.	O
err	double
+	O
M	struct
.	O
err	double
)	O
;	O
sum_even_val	double
-=	O
del_val	double
;	O
sum_even_err	double
+=	O
del_err	double
;	O
if	O
(	O
fabs	function
(	O
del_val	double
/	O
sum_even_val	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
stat_sum	int
=	O
(	O
n	int
>=	O
nmax	int
?	O
GSL_EMAXITER	int
:	O
GSL_SUCCESS	int
)	O
;	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
lnpre_val	double
,	O
lnpre_err	double
,	O
pre	double
*	O
(	O
sum_even_val	double
+	O
sum_odd_val	double
)	O
,	O
pre	double
*	O
(	O
sum_even_err	double
+	O
sum_odd_err	double
)	O
,	O
result	pointer
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_e	int
,	O
stat_h	int
,	O
stat_sum	int
)	O
;	O
}	O
int	O
gsl_sf_fermi_dirac_m1_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<	O
GSL_LOG_DBL_MIN	O
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
const	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
result	pointer
->	O
val	double
=	O
ex	double
/	O
(	O
1.0	int
+	O
ex	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
(	O
fabs	function
(	O
x	double
)	O
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
ex	double
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
result	pointer
->	O
val	double
=	O
1.0	int
/	O
(	O
1.0	int
+	O
ex	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
x	double
+	O
1.0	int
)	O
*	O
ex	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_fermi_dirac_0_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<	O
GSL_LOG_DBL_MIN	O
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
5.0	int
)	O
{	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
double	O
ser	double
=	O
1.0	int
-	O
ex	double
*	O
(	O
0.5	int
-	O
ex	double
*	O
(	O
1.0	int
/	O
3.0	int
-	O
ex	double
*	O
(	O
1.0	int
/	O
4.0	int
-	O
ex	double
*	O
(	O
1.0	int
/	O
5.0	int
-	O
ex	double
/	O
6.0	int
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
ex	double
*	O
ser	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
10.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
log	function
(	O
1.0	int
+	O
exp	function
(	O
x	double
)	O
)	O
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
x	double
*	O
GSL_DBL_EPSILON	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
ex	double
=	O
exp	function
(	O
-	O
x	double
)	O
;	O
result	pointer
->	O
val	double
=	O
x	double
+	O
ex	double
*	O
(	O
1.0	int
-	O
0.5	int
*	O
ex	double
+	O
ex	double
*	O
ex	double
/	O
3.0	int
-	O
ex	double
*	O
ex	double
*	O
ex	double
/	O
4.0	int
)	O
;	O
result	pointer
->	O
err	double
=	O
(	O
x	double
+	O
ex	double
)	O
*	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_fermi_dirac_1_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<	O
GSL_LOG_DBL_MIN	O
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
double	O
term	double
=	O
ex	double
;	O
double	O
sum	double
=	O
term	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
2	int
;	O
n	int
<	O
100	int
;	O
n	int
++	O
)	O
{	O
double	O
rat	double
=	O
(	O
n	int
-	O
1.0	int
)	O
/	O
n	int
;	O
term	double
*=	O
-	O
ex	double
*	O
rat	double
*	O
rat	double
;	O
sum	double
+=	O
term	double
;	O
if	O
(	O
fabs	function
(	O
term	double
/	O
sum	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
result	pointer
->	O
val	double
=	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
fabs	function
(	O
sum	double
)	O
*	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
return	O
cheb_eval_e	function
(	O
&	O
fd_1_a_cs	struct
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
4.0	int
)	O
{	O
double	O
t	double
=	O
2.0	int
/	O
3.0	int
*	O
(	O
x	double
-	O
1.0	int
)	O
-	O
1.0	int
;	O
return	O
cheb_eval_e	function
(	O
&	O
fd_1_b_cs	struct
,	O
t	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
10.0	int
)	O
{	O
double	O
t	double
=	O
1.0	int
/	O
3.0	int
*	O
(	O
x	double
-	O
4.0	int
)	O
-	O
1.0	int
;	O
return	O
cheb_eval_e	function
(	O
&	O
fd_1_c_cs	struct
,	O
t	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
30.0	int
)	O
{	O
double	O
t	double
=	O
0.1	int
*	O
x	double
-	O
2.0	int
;	O
gsl_sf_result	struct
c	double
;	O
cheb_eval_e	function
(	O
&	O
fd_1_d_cs	struct
,	O
t	double
,	O
&	O
c	double
)	O
;	O
result	pointer
->	O
val	double
=	O
c	double
.	O
val	double
*	O
x	double
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
c	double
.	O
err	double
*	O
x	double
*	O
x	double
+	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
/	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
double	O
t	double
=	O
60.0	int
/	O
x	double
-	O
1.0	int
;	O
gsl_sf_result	struct
c	double
;	O
cheb_eval_e	function
(	O
&	O
fd_1_e_cs	struct
,	O
t	double
,	O
&	O
c	double
)	O
;	O
result	pointer
->	O
val	double
=	O
c	double
.	O
val	double
*	O
x	double
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
c	double
.	O
err	double
*	O
x	double
*	O
x	double
+	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
GSL_SQRT_DBL_MAX	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.5	int
*	O
x	double
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_fermi_dirac_2_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<	O
GSL_LOG_DBL_MIN	O
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
double	O
term	double
=	O
ex	double
;	O
double	O
sum	double
=	O
term	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
2	int
;	O
n	int
<	O
100	int
;	O
n	int
++	O
)	O
{	O
double	O
rat	double
=	O
(	O
n	int
-	O
1.0	int
)	O
/	O
n	int
;	O
term	double
*=	O
-	O
ex	double
*	O
rat	double
*	O
rat	double
*	O
rat	double
;	O
sum	double
+=	O
term	double
;	O
if	O
(	O
fabs	function
(	O
term	double
/	O
sum	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
result	pointer
->	O
val	double
=	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
sum	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
return	O
cheb_eval_e	function
(	O
&	O
fd_2_a_cs	struct
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
4.0	int
)	O
{	O
double	O
t	double
=	O
2.0	int
/	O
3.0	int
*	O
(	O
x	double
-	O
1.0	int
)	O
-	O
1.0	int
;	O
return	O
cheb_eval_e	function
(	O
&	O
fd_2_b_cs	struct
,	O
t	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
10.0	int
)	O
{	O
double	O
t	double
=	O
1.0	int
/	O
3.0	int
*	O
(	O
x	double
-	O
4.0	int
)	O
-	O
1.0	int
;	O
return	O
cheb_eval_e	function
(	O
&	O
fd_2_c_cs	struct
,	O
t	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
30.0	int
)	O
{	O
double	O
t	double
=	O
0.1	int
*	O
x	double
-	O
2.0	int
;	O
gsl_sf_result	struct
c	double
;	O
cheb_eval_e	function
(	O
&	O
fd_2_d_cs	struct
,	O
t	double
,	O
&	O
c	double
)	O
;	O
result	pointer
->	O
val	double
=	O
c	double
.	O
val	double
*	O
x	double
*	O
x	double
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
c	double
.	O
err	double
*	O
x	double
*	O
x	double
*	O
x	double
+	O
3.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
/	O
GSL_ROOT3_DBL_EPSILON	int
)	O
{	O
double	O
t	double
=	O
60.0	int
/	O
x	double
-	O
1.0	int
;	O
gsl_sf_result	struct
c	double
;	O
cheb_eval_e	function
(	O
&	O
fd_2_e_cs	struct
,	O
t	double
,	O
&	O
c	double
)	O
;	O
result	pointer
->	O
val	double
=	O
c	double
.	O
val	double
*	O
x	double
*	O
x	double
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
c	double
.	O
err	double
*	O
x	double
*	O
x	double
*	O
x	double
+	O
3.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
GSL_ROOT3_DBL_MAX	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
/	O
6.0	int
*	O
x	double
*	O
x	double
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
3.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_fermi_dirac_int_e	function
(	O
const	O
int	O
j	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
j	int
<	O
-	O
1	int
)	O
{	O
return	O
fd_nint	function
(	O
j	int
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
j	int
==	O
-	O
1	int
)	O
{	O
return	O
gsl_sf_fermi_dirac_m1_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
j	int
==	O
0	int
)	O
{	O
return	O
gsl_sf_fermi_dirac_0_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
j	int
==	O
1	int
)	O
{	O
return	O
gsl_sf_fermi_dirac_1_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
j	int
==	O
2	int
)	O
{	O
return	O
gsl_sf_fermi_dirac_2_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
return	O
fd_neg	function
(	O
j	int
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
return	O
gsl_sf_eta_int_e	function
(	O
j	int
+	O
1	int
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.5	int
)	O
{	O
return	O
fd_series_int	function
(	O
j	int
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct
fasymp	struct
;	O
int	O
stat_asymp	int
=	O
fd_asymp	function
(	O
j	int
,	O
x	double
,	O
&	O
fasymp	struct
)	O
;	O
if	O
(	O
stat_asymp	int
==	O
GSL_SUCCESS	int
)	O
{	O
result	pointer
->	O
val	double
=	O
fasymp	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
fasymp	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat_asymp	int
;	O
}	O
else	O
{	O
return	O
fd_UMseries_int	function
(	O
j	int
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
}	O
int	O
gsl_sf_fermi_dirac_mhalf_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<	O
GSL_LOG_DBL_MIN	O
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
double	O
term	double
=	O
ex	double
;	O
double	O
sum	double
=	O
term	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
2	int
;	O
n	int
<	O
200	int
;	O
n	int
++	O
)	O
{	O
double	O
rat	double
=	O
(	O
n	int
-	O
1.0	int
)	O
/	O
n	int
;	O
term	double
*=	O
-	O
ex	double
*	O
sqrt	function
(	O
rat	double
)	O
;	O
sum	double
+=	O
term	double
;	O
if	O
(	O
fabs	function
(	O
term	double
/	O
sum	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
result	pointer
->	O
val	double
=	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
fabs	function
(	O
sum	double
)	O
*	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
return	O
cheb_eval_e	function
(	O
&	O
fd_mhalf_a_cs	struct
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
4.0	int
)	O
{	O
double	O
t	double
=	O
2.0	int
/	O
3.0	int
*	O
(	O
x	double
-	O
1.0	int
)	O
-	O
1.0	int
;	O
return	O
cheb_eval_e	function
(	O
&	O
fd_mhalf_b_cs	struct
,	O
t	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
10.0	int
)	O
{	O
double	O
t	double
=	O
1.0	int
/	O
3.0	int
*	O
(	O
x	double
-	O
4.0	int
)	O
-	O
1.0	int
;	O
return	O
cheb_eval_e	function
(	O
&	O
fd_mhalf_c_cs	struct
,	O
t	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
30.0	int
)	O
{	O
double	O
rtx	double
=	O
sqrt	function
(	O
x	double
)	O
;	O
double	O
t	double
=	O
0.1	int
*	O
x	double
-	O
2.0	int
;	O
gsl_sf_result	struct
c	double
;	O
cheb_eval_e	function
(	O
&	O
fd_mhalf_d_cs	struct
,	O
t	double
,	O
&	O
c	double
)	O
;	O
result	pointer
->	O
val	double
=	O
c	double
.	O
val	double
*	O
rtx	double
;	O
result	pointer
->	O
err	double
=	O
c	double
.	O
err	double
*	O
rtx	double
+	O
0.5	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
return	O
fd_asymp	function
(	O
-	O
0.5	int
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_fermi_dirac_half_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<	O
GSL_LOG_DBL_MIN	O
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
double	O
term	double
=	O
ex	double
;	O
double	O
sum	double
=	O
term	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
2	int
;	O
n	int
<	O
100	int
;	O
n	int
++	O
)	O
{	O
double	O
rat	double
=	O
(	O
n	int
-	O
1.0	int
)	O
/	O
n	int
;	O
term	double
*=	O
-	O
ex	double
*	O
rat	double
*	O
sqrt	function
(	O
rat	double
)	O
;	O
sum	double
+=	O
term	double
;	O
if	O
(	O
fabs	function
(	O
term	double
/	O
sum	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
result	pointer
->	O
val	double
=	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
fabs	function
(	O
sum	double
)	O
*	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
return	O
cheb_eval_e	function
(	O
&	O
fd_half_a_cs	struct
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
4.0	int
)	O
{	O
double	O
t	double
=	O
2.0	int
/	O
3.0	int
*	O
(	O
x	double
-	O
1.0	int
)	O
-	O
1.0	int
;	O
return	O
cheb_eval_e	function
(	O
&	O
fd_half_b_cs	struct
,	O
t	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
10.0	int
)	O
{	O
double	O
t	double
=	O
1.0	int
/	O
3.0	int
*	O
(	O
x	double
-	O
4.0	int
)	O
-	O
1.0	int
;	O
return	O
cheb_eval_e	function
(	O
&	O
fd_half_c_cs	struct
,	O
t	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
30.0	int
)	O
{	O
double	O
x32	double
=	O
x	double
*	O
sqrt	function
(	O
x	double
)	O
;	O
double	O
t	double
=	O
0.1	int
*	O
x	double
-	O
2.0	int
;	O
gsl_sf_result	struct
c	double
;	O
cheb_eval_e	function
(	O
&	O
fd_half_d_cs	struct
,	O
t	double
,	O
&	O
c	double
)	O
;	O
result	pointer
->	O
val	double
=	O
c	double
.	O
val	double
*	O
x32	double
;	O
result	pointer
->	O
err	double
=	O
c	double
.	O
err	double
*	O
x32	double
+	O
1.5	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
return	O
fd_asymp	function
(	O
0.5	int
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_fermi_dirac_3half_e	function
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<	O
GSL_LOG_DBL_MIN	O
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
1.0	int
)	O
{	O
double	O
ex	double
=	O
exp	function
(	O
x	double
)	O
;	O
double	O
term	double
=	O
ex	double
;	O
double	O
sum	double
=	O
term	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
2	int
;	O
n	int
<	O
100	int
;	O
n	int
++	O
)	O
{	O
double	O
rat	double
=	O
(	O
n	int
-	O
1.0	int
)	O
/	O
n	int
;	O
term	double
*=	O
-	O
ex	double
*	O
rat	double
*	O
rat	double
*	O
sqrt	function
(	O
rat	double
)	O
;	O
sum	double
+=	O
term	double
;	O
if	O
(	O
fabs	function
(	O
term	double
/	O
sum	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
result	pointer
->	O
val	double
=	O
sum	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
fabs	function
(	O
sum	double
)	O
*	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
return	O
cheb_eval_e	function
(	O
&	O
fd_3half_a_cs	struct
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
4.0	int
)	O
{	O
double	O
t	double
=	O
2.0	int
/	O
3.0	int
*	O
(	O
x	double
-	O
1.0	int
)	O
-	O
1.0	int
;	O
return	O
cheb_eval_e	function
(	O
&	O
fd_3half_b_cs	struct
,	O
t	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
10.0	int
)	O
{	O
double	O
t	double
=	O
1.0	int
/	O
3.0	int
*	O
(	O
x	double
-	O
4.0	int
)	O
-	O
1.0	int
;	O
return	O
cheb_eval_e	function
(	O
&	O
fd_3half_c_cs	struct
,	O
t	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
30.0	int
)	O
{	O
double	O
x52	double
=	O
x	double
*	O
x	double
*	O
sqrt	function
(	O
x	double
)	O
;	O
double	O
t	double
=	O
0.1	int
*	O
x	double
-	O
2.0	int
;	O
gsl_sf_result	struct
c	double
;	O
cheb_eval_e	function
(	O
&	O
fd_3half_d_cs	struct
,	O
t	double
,	O
&	O
c	double
)	O
;	O
result	pointer
->	O
val	double
=	O
c	double
.	O
val	double
*	O
x52	double
;	O
result	pointer
->	O
err	double
=	O
c	double
.	O
err	double
*	O
x52	double
+	O
2.5	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
return	O
fd_asymp	function
(	O
1.5	int
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_fermi_dirac_inc_0_e	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
b	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
b	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
double	O
arg	pointer
=	O
b	double
-	O
x	double
;	O
gsl_sf_result	struct
f0	struct
;	O
int	O
status	int
=	O
gsl_sf_fermi_dirac_0_e	function
(	O
arg	pointer
,	O
&	O
f0	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
f0	struct
.	O
val	double
-	O
arg	pointer
;	O
result	pointer
->	O
err	double
=	O
f0	struct
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
x	double
)	O
+	O
fabs	function
(	O
b	double
)	O
)	O
;	O
return	O
status	int
;	O
}	O
}	O
double	O
gsl_sf_fermi_dirac_m1	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_fermi_dirac_m1_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_fermi_dirac_0	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_fermi_dirac_0_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_fermi_dirac_1	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_fermi_dirac_1_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_fermi_dirac_2	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_fermi_dirac_2_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_fermi_dirac_int	function
(	O
const	O
int	O
j	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_fermi_dirac_int_e	function
(	O
j	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_fermi_dirac_mhalf	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_fermi_dirac_mhalf_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_fermi_dirac_half	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_fermi_dirac_half_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_fermi_dirac_3half	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_fermi_dirac_3half_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_fermi_dirac_inc_0	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
b	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_fermi_dirac_inc_0_e	function
(	O
x	double
,	O
b	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
