struct	O
grecs_list	struct
*	O
grecs_list_create	function
(	O
)	O
{	O
struct	O
grecs_list	struct
*	O
lp	pointer
=	O
grecs_malloc	function
(	O
sizeof	O
(	O
*	O
lp	pointer
)	O
)	O
;	O
memset	function
(	O
lp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
lp	pointer
)	O
)	O
;	O
return	O
lp	pointer
;	O
}	O
size_t	long
grecs_list_size	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
)	O
{	O
return	O
lp	pointer
?	O
lp	pointer
->	O
count	long
:	O
0	int
;	O
}	O
void	O
grecs_list_insert_entry	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
,	O
struct	O
grecs_list_entry	struct
*	O
anchor	pointer
,	O
struct	O
grecs_list_entry	struct
*	O
ent	pointer
,	O
int	O
before	int
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
anchor	pointer
)	O
{	O
ent	pointer
->	O
prev	pointer
=	O
NULL	O
;	O
ent	pointer
->	O
next	pointer
=	O
lp	pointer
->	O
head	pointer
;	O
if	O
(	O
lp	pointer
->	O
head	pointer
)	O
lp	pointer
->	O
head	pointer
->	O
prev	pointer
=	O
ent	pointer
;	O
else	O
lp	pointer
->	O
tail	pointer
=	O
ent	pointer
;	O
lp	pointer
->	O
head	pointer
=	O
ent	pointer
;	O
lp	pointer
->	O
count	long
++	O
;	O
return	O
;	O
}	O
if	O
(	O
before	int
)	O
{	O
grecs_list_insert_entry	function
(	O
lp	pointer
,	O
anchor	pointer
->	O
prev	pointer
,	O
ent	pointer
,	O
0	int
)	O
;	O
return	O
;	O
}	O
ent	pointer
->	O
prev	pointer
=	O
anchor	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
anchor	pointer
->	O
next	pointer
)	O
)	O
p	pointer
->	O
prev	pointer
=	O
ent	pointer
;	O
else	O
lp	pointer
->	O
tail	pointer
=	O
ent	pointer
;	O
ent	pointer
->	O
next	pointer
=	O
p	pointer
;	O
anchor	pointer
->	O
next	pointer
=	O
ent	pointer
;	O
lp	pointer
->	O
count	long
++	O
;	O
}	O
void	O
grecs_list_remove_entry	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
,	O
struct	O
grecs_list_entry	struct
*	O
ent	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
p	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
ent	pointer
->	O
prev	pointer
)	O
)	O
p	pointer
->	O
next	pointer
=	O
ent	pointer
->	O
next	pointer
;	O
else	O
lp	pointer
->	O
head	pointer
=	O
ent	pointer
->	O
next	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
ent	pointer
->	O
next	pointer
)	O
)	O
p	pointer
->	O
prev	pointer
=	O
ent	pointer
->	O
prev	pointer
;	O
else	O
lp	pointer
->	O
tail	pointer
=	O
ent	pointer
->	O
prev	pointer
;	O
grecs_free	function
(	O
ent	pointer
)	O
;	O
lp	pointer
->	O
count	long
--	O
;	O
}	O
void	O
*	O
grecs_list_remove_tail	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
)	O
{	O
void	O
*	O
data	pointer
;	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
if	O
(	O
!	O
lp	pointer
||	O
!	O
lp	pointer
->	O
tail	pointer
)	O
return	O
NULL	O
;	O
ep	pointer
=	O
lp	pointer
->	O
tail	pointer
;	O
data	pointer
=	O
lp	pointer
->	O
tail	pointer
->	O
data	pointer
;	O
grecs_list_remove_entry	function
(	O
lp	pointer
,	O
ep	pointer
)	O
;	O
return	O
data	pointer
;	O
}	O
static	O
int	O
_ptrcmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
return	O
a	pointer
!=	O
b	pointer
;	O
}	O
int	O
grecs_list_remove	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
int	O
(	O
*	O
cmp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
;	O
if	O
(	O
!	O
lp	pointer
)	O
return	O
1	int
;	O
cmp	pointer
=	O
lp	pointer
->	O
cmp	pointer
?	O
lp	pointer
->	O
cmp	pointer
:	O
_ptrcmp	function
;	O
for	O
(	O
ep	pointer
=	O
lp	pointer
->	O
head	pointer
;	O
ep	pointer
;	O
ep	pointer
=	O
ep	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
cmp	pointer
(	O
ep	pointer
->	O
data	pointer
,	O
data	pointer
)	O
==	O
0	int
)	O
{	O
grecs_list_remove_entry	function
(	O
lp	pointer
,	O
ep	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
void	O
grecs_list_append	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
,	O
void	O
*	O
val	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
=	O
grecs_malloc	function
(	O
sizeof	O
(	O
*	O
ep	pointer
)	O
)	O
;	O
ep	pointer
->	O
data	pointer
=	O
val	pointer
;	O
grecs_list_insert_entry	function
(	O
lp	pointer
,	O
lp	pointer
->	O
tail	pointer
,	O
ep	pointer
,	O
0	int
)	O
;	O
}	O
void	O
grecs_list_add	function
(	O
struct	O
grecs_list	struct
*	O
dst	pointer
,	O
struct	O
grecs_list	struct
*	O
src	pointer
)	O
{	O
if	O
(	O
!	O
src	pointer
->	O
head	pointer
)	O
return	O
;	O
src	pointer
->	O
head	pointer
->	O
prev	pointer
=	O
dst	pointer
->	O
tail	pointer
;	O
if	O
(	O
dst	pointer
->	O
tail	pointer
)	O
dst	pointer
->	O
tail	pointer
->	O
next	pointer
=	O
src	pointer
->	O
head	pointer
;	O
else	O
dst	pointer
->	O
head	pointer
=	O
src	pointer
->	O
head	pointer
;	O
dst	pointer
->	O
tail	pointer
=	O
src	pointer
->	O
tail	pointer
;	O
dst	pointer
->	O
count	long
+=	O
src	pointer
->	O
count	long
;	O
src	pointer
->	O
head	pointer
=	O
src	pointer
->	O
tail	pointer
=	O
NULL	O
;	O
src	pointer
->	O
count	long
=	O
0	int
;	O
}	O
void	O
grecs_list_push	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
,	O
void	O
*	O
val	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
=	O
grecs_malloc	function
(	O
sizeof	O
(	O
*	O
ep	pointer
)	O
)	O
;	O
ep	pointer
->	O
data	pointer
=	O
val	pointer
;	O
grecs_list_insert_entry	function
(	O
lp	pointer
,	O
NULL	O
,	O
ep	pointer
,	O
0	int
)	O
;	O
}	O
void	O
*	O
grecs_list_pop	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
)	O
{	O
void	O
*	O
data	pointer
;	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
if	O
(	O
!	O
lp	pointer
)	O
return	O
NULL	O
;	O
ep	pointer
=	O
lp	pointer
->	O
head	pointer
;	O
if	O
(	O
ep	pointer
)	O
{	O
data	pointer
=	O
ep	pointer
->	O
data	pointer
;	O
grecs_list_remove_entry	function
(	O
lp	pointer
,	O
ep	pointer
)	O
;	O
}	O
else	O
data	pointer
=	O
NULL	O
;	O
return	O
data	pointer
;	O
}	O
void	O
grecs_list_clear	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
if	O
(	O
!	O
lp	pointer
)	O
return	O
;	O
ep	pointer
=	O
lp	pointer
->	O
head	pointer
;	O
while	O
(	O
ep	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
next	pointer
=	O
ep	pointer
->	O
next	pointer
;	O
if	O
(	O
lp	pointer
->	O
free_entry	pointer
)	O
lp	pointer
->	O
free_entry	pointer
(	O
ep	pointer
->	O
data	pointer
)	O
;	O
grecs_free	function
(	O
ep	pointer
)	O
;	O
ep	pointer
=	O
next	pointer
;	O
}	O
lp	pointer
->	O
head	pointer
=	O
lp	pointer
->	O
tail	pointer
=	O
NULL	O
;	O
lp	pointer
->	O
count	long
=	O
0	int
;	O
}	O
void	O
grecs_list_free	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
)	O
{	O
if	O
(	O
lp	pointer
)	O
{	O
grecs_list_clear	function
(	O
lp	pointer
)	O
;	O
grecs_free	function
(	O
lp	pointer
)	O
;	O
}	O
}	O
void	O
*	O
grecs_list_locate	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
int	O
(	O
*	O
cmp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
;	O
if	O
(	O
!	O
lp	pointer
)	O
return	O
NULL	O
;	O
cmp	pointer
=	O
lp	pointer
->	O
cmp	pointer
?	O
lp	pointer
->	O
cmp	pointer
:	O
_ptrcmp	function
;	O
for	O
(	O
ep	pointer
=	O
lp	pointer
->	O
head	pointer
;	O
ep	pointer
;	O
ep	pointer
=	O
ep	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
cmp	pointer
(	O
ep	pointer
->	O
data	pointer
,	O
data	pointer
)	O
==	O
0	int
)	O
return	O
ep	pointer
->	O
data	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
void	O
*	O
grecs_list_index	function
(	O
struct	O
grecs_list	struct
*	O
lp	pointer
,	O
size_t	long
idx	long
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
if	O
(	O
!	O
lp	pointer
)	O
return	O
NULL	O
;	O
for	O
(	O
ep	pointer
=	O
lp	pointer
->	O
head	pointer
;	O
ep	pointer
&&	O
idx	long
;	O
ep	pointer
=	O
ep	pointer
->	O
next	pointer
,	O
idx	long
--	O
)	O
;	O
return	O
ep	pointer
?	O
ep	pointer
->	O
data	pointer
:	O
NULL	O
;	O
}	O
int	O
grecs_list_compare	function
(	O
struct	O
grecs_list	struct
*	O
a	pointer
,	O
struct	O
grecs_list	struct
*	O
b	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
ap	array
,	O
*	O
bp	pointer
;	O
int	O
(	O
*	O
cmp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
;	O
if	O
(	O
!	O
a	pointer
)	O
return	O
!	O
!	O
b	pointer
;	O
else	O
if	O
(	O
!	O
b	pointer
)	O
return	O
1	int
;	O
if	O
(	O
grecs_list_size	function
(	O
a	pointer
)	O
!=	O
grecs_list_size	function
(	O
b	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
a	pointer
->	O
cmp	pointer
!=	O
b	pointer
->	O
cmp	pointer
)	O
return	O
1	int
;	O
cmp	pointer
=	O
a	pointer
->	O
cmp	pointer
?	O
a	pointer
->	O
cmp	pointer
:	O
_ptrcmp	function
;	O
for	O
(	O
ap	array
=	O
a	pointer
->	O
head	pointer
,	O
bp	pointer
=	O
b	pointer
->	O
head	pointer
;	O
ap	array
;	O
ap	array
=	O
ap	array
->	O
next	pointer
,	O
bp	pointer
=	O
bp	pointer
->	O
next	pointer
)	O
if	O
(	O
cmp	pointer
(	O
ap	array
->	O
data	pointer
,	O
bp	pointer
->	O
data	pointer
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
