static	O
int	O
fdfridge_f	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
,	O
gsl_vector	struct
*	O
f	pointer
)	O
;	O
static	O
int	O
fdfridge_df	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
)	O
;	O
gsl_multifit_fdfridge	struct
*	O
gsl_multifit_fdfridge_alloc	function
(	O
const	O
gsl_multifit_fdfsolver_type	struct
*	O
T	pointer
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
gsl_multifit_fdfridge	struct
*	O
work	pointer
;	O
work	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gsl_multifit_fdfridge	struct
)	O
)	O
;	O
if	O
(	O
work	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate workspace"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
work	pointer
->	O
s	pointer
=	O
gsl_multifit_fdfsolver_alloc	function
(	O
T	pointer
,	O
n	int
+	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
work	pointer
->	O
s	pointer
==	O
NULL	O
)	O
{	O
gsl_multifit_fdfridge_free	function
(	O
work	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for fdfsolver"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
work	pointer
->	O
wts	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
+	O
p	int
)	O
;	O
if	O
(	O
work	pointer
->	O
wts	pointer
==	O
NULL	O
)	O
{	O
gsl_multifit_fdfridge_free	function
(	O
work	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for weight vector"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
work	pointer
->	O
f	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
work	pointer
->	O
f	pointer
==	O
NULL	O
)	O
{	O
gsl_multifit_fdfridge_free	function
(	O
work	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for f vector"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
work	pointer
->	O
n	int
=	O
n	int
;	O
work	pointer
->	O
p	int
=	O
p	int
;	O
work	pointer
->	O
lambda	double
=	O
0.0	int
;	O
gsl_vector_set_all	function
(	O
work	pointer
->	O
wts	pointer
,	O
1.0	int
)	O
;	O
return	O
work	pointer
;	O
}	O
void	O
gsl_multifit_fdfridge_free	function
(	O
gsl_multifit_fdfridge	struct
*	O
work	pointer
)	O
{	O
if	O
(	O
work	pointer
->	O
s	pointer
)	O
gsl_multifit_fdfsolver_free	function
(	O
work	pointer
->	O
s	pointer
)	O
;	O
if	O
(	O
work	pointer
->	O
wts	pointer
)	O
gsl_vector_free	function
(	O
work	pointer
->	O
wts	pointer
)	O
;	O
if	O
(	O
work	pointer
->	O
f	pointer
)	O
gsl_vector_free	function
(	O
work	pointer
->	O
f	pointer
)	O
;	O
free	function
(	O
work	pointer
)	O
;	O
}	O
const	O
char	O
*	O
gsl_multifit_fdfridge_name	function
(	O
const	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
)	O
{	O
return	O
gsl_multifit_fdfsolver_name	function
(	O
w	pointer
->	O
s	pointer
)	O
;	O
}	O
gsl_vector	struct
*	O
gsl_multifit_fdfridge_position	function
(	O
const	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
)	O
{	O
return	O
gsl_multifit_fdfsolver_position	function
(	O
w	pointer
->	O
s	pointer
)	O
;	O
}	O
gsl_vector	struct
*	O
gsl_multifit_fdfridge_residual	function
(	O
const	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
)	O
{	O
return	O
gsl_multifit_fdfsolver_residual	function
(	O
w	pointer
->	O
s	pointer
)	O
;	O
}	O
size_t	long
gsl_multifit_fdfridge_niter	function
(	O
const	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
)	O
{	O
return	O
w	pointer
->	O
s	pointer
->	O
niter	long
;	O
}	O
int	O
gsl_multifit_fdfridge_set	function
(	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
f	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
double	O
lambda	double
)	O
{	O
return	O
gsl_multifit_fdfridge_wset	function
(	O
w	pointer
,	O
f	pointer
,	O
x	double
,	O
lambda	double
,	O
NULL	O
)	O
;	O
}	O
int	O
gsl_multifit_fdfridge_wset	function
(	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
f	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
double	O
lambda	double
,	O
const	O
gsl_vector	struct
*	O
wts	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
w	pointer
->	O
n	int
;	O
const	O
size_t	long
p	int
=	O
w	pointer
->	O
p	int
;	O
if	O
(	O
n	int
!=	O
f	pointer
->	O
n	int
||	O
p	int
!=	O
f	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"function size does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"vector length does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
wts	pointer
!=	O
NULL	O
&&	O
n	int
!=	O
wts	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weight vector length does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_view	struct
wv	struct
=	O
gsl_vector_subvector	function
(	O
w	pointer
->	O
wts	pointer
,	O
0	int
,	O
n	int
)	O
;	O
w	pointer
->	O
fdf	pointer
=	O
f	pointer
;	O
w	pointer
->	O
fdftik	struct
.	O
f	pointer
=	O
&	O
fdfridge_f	function
;	O
w	pointer
->	O
fdftik	struct
.	O
df	pointer
=	O
&	O
fdfridge_df	function
;	O
w	pointer
->	O
fdftik	struct
.	O
n	int
=	O
n	int
+	O
p	int
;	O
w	pointer
->	O
fdftik	struct
.	O
p	int
=	O
p	int
;	O
w	pointer
->	O
fdftik	struct
.	O
params	pointer
=	O
(	O
void	O
*	O
)	O
w	pointer
;	O
w	pointer
->	O
lambda	double
=	O
lambda	double
;	O
w	pointer
->	O
L	pointer
=	O
NULL	O
;	O
if	O
(	O
wts	pointer
)	O
{	O
gsl_vector_memcpy	function
(	O
&	O
wv	struct
.	O
vector	struct
,	O
wts	pointer
)	O
;	O
status	int
=	O
gsl_multifit_fdfsolver_wset	function
(	O
w	pointer
->	O
s	pointer
,	O
&	O
(	O
w	pointer
->	O
fdftik	struct
)	O
,	O
x	double
,	O
w	pointer
->	O
wts	pointer
)	O
;	O
}	O
else	O
{	O
status	int
=	O
gsl_multifit_fdfsolver_wset	function
(	O
w	pointer
->	O
s	pointer
,	O
&	O
(	O
w	pointer
->	O
fdftik	struct
)	O
,	O
x	double
,	O
NULL	O
)	O
;	O
}	O
f	pointer
->	O
nevalf	long
=	O
w	pointer
->	O
fdftik	struct
.	O
nevalf	long
;	O
f	pointer
->	O
nevaldf	long
=	O
w	pointer
->	O
fdftik	struct
.	O
nevaldf	long
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multifit_fdfridge_set2	function
(	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
f	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
lambda	double
)	O
{	O
return	O
gsl_multifit_fdfridge_wset2	function
(	O
w	pointer
,	O
f	pointer
,	O
x	double
,	O
lambda	double
,	O
NULL	O
)	O
;	O
}	O
int	O
gsl_multifit_fdfridge_wset2	function
(	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
f	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_vector	struct
*	O
lambda	double
,	O
const	O
gsl_vector	struct
*	O
wts	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
w	pointer
->	O
n	int
;	O
const	O
size_t	long
p	int
=	O
w	pointer
->	O
p	int
;	O
if	O
(	O
n	int
!=	O
f	pointer
->	O
n	int
||	O
p	int
!=	O
f	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"function size does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"vector length does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
lambda	double
->	O
size	long
!=	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"lambda vector size does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
wts	pointer
!=	O
NULL	O
&&	O
n	int
!=	O
wts	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weight vector length does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_view	struct
wv	struct
=	O
gsl_vector_subvector	function
(	O
w	pointer
->	O
wts	pointer
,	O
0	int
,	O
n	int
)	O
;	O
w	pointer
->	O
fdf	pointer
=	O
f	pointer
;	O
w	pointer
->	O
fdf	pointer
->	O
nevalf	long
=	O
0	int
;	O
w	pointer
->	O
fdf	pointer
->	O
nevaldf	long
=	O
0	int
;	O
w	pointer
->	O
fdftik	struct
.	O
f	pointer
=	O
&	O
fdfridge_f	function
;	O
w	pointer
->	O
fdftik	struct
.	O
df	pointer
=	O
&	O
fdfridge_df	function
;	O
w	pointer
->	O
fdftik	struct
.	O
n	int
=	O
n	int
+	O
p	int
;	O
w	pointer
->	O
fdftik	struct
.	O
p	int
=	O
p	int
;	O
w	pointer
->	O
fdftik	struct
.	O
params	pointer
=	O
(	O
void	O
*	O
)	O
w	pointer
;	O
w	pointer
->	O
lambda	double
=	O
0.0	int
;	O
w	pointer
->	O
L_diag	pointer
=	O
lambda	double
;	O
w	pointer
->	O
L	pointer
=	O
NULL	O
;	O
if	O
(	O
wts	pointer
)	O
{	O
gsl_vector_memcpy	function
(	O
&	O
wv	struct
.	O
vector	struct
,	O
wts	pointer
)	O
;	O
status	int
=	O
gsl_multifit_fdfsolver_wset	function
(	O
w	pointer
->	O
s	pointer
,	O
&	O
(	O
w	pointer
->	O
fdftik	struct
)	O
,	O
x	double
,	O
w	pointer
->	O
wts	pointer
)	O
;	O
}	O
else	O
{	O
status	int
=	O
gsl_multifit_fdfsolver_wset	function
(	O
w	pointer
->	O
s	pointer
,	O
&	O
(	O
w	pointer
->	O
fdftik	struct
)	O
,	O
x	double
,	O
NULL	O
)	O
;	O
}	O
f	pointer
->	O
nevalf	long
=	O
w	pointer
->	O
fdftik	struct
.	O
nevalf	long
;	O
f	pointer
->	O
nevaldf	long
=	O
w	pointer
->	O
fdftik	struct
.	O
nevaldf	long
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multifit_fdfridge_set3	function
(	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
f	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_matrix	struct
*	O
L	pointer
)	O
{	O
return	O
gsl_multifit_fdfridge_wset3	function
(	O
w	pointer
,	O
f	pointer
,	O
x	double
,	O
L	pointer
,	O
NULL	O
)	O
;	O
}	O
int	O
gsl_multifit_fdfridge_wset3	function
(	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
f	pointer
,	O
const	O
gsl_vector	struct
*	O
x	double
,	O
const	O
gsl_matrix	struct
*	O
L	pointer
,	O
const	O
gsl_vector	struct
*	O
wts	pointer
)	O
{	O
const	O
size_t	long
n	int
=	O
w	pointer
->	O
n	int
;	O
const	O
size_t	long
p	int
=	O
w	pointer
->	O
p	int
;	O
if	O
(	O
n	int
!=	O
f	pointer
->	O
n	int
||	O
p	int
!=	O
f	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"function size does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"vector length does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L	pointer
->	O
size2	long
!=	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"L matrix size2 does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
wts	pointer
!=	O
NULL	O
&&	O
n	int
!=	O
wts	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"weight vector length does not match solver"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_view	struct
wv	struct
=	O
gsl_vector_subvector	function
(	O
w	pointer
->	O
wts	pointer
,	O
0	int
,	O
n	int
)	O
;	O
w	pointer
->	O
fdf	pointer
=	O
f	pointer
;	O
w	pointer
->	O
fdf	pointer
->	O
nevalf	long
=	O
0	int
;	O
w	pointer
->	O
fdf	pointer
->	O
nevaldf	long
=	O
0	int
;	O
w	pointer
->	O
fdftik	struct
.	O
f	pointer
=	O
&	O
fdfridge_f	function
;	O
w	pointer
->	O
fdftik	struct
.	O
df	pointer
=	O
&	O
fdfridge_df	function
;	O
w	pointer
->	O
fdftik	struct
.	O
n	int
=	O
n	int
+	O
p	int
;	O
w	pointer
->	O
fdftik	struct
.	O
p	int
=	O
p	int
;	O
w	pointer
->	O
fdftik	struct
.	O
params	pointer
=	O
(	O
void	O
*	O
)	O
w	pointer
;	O
w	pointer
->	O
lambda	double
=	O
0.0	int
;	O
w	pointer
->	O
L_diag	pointer
=	O
NULL	O
;	O
w	pointer
->	O
L	pointer
=	O
L	pointer
;	O
if	O
(	O
wts	pointer
)	O
{	O
gsl_vector_memcpy	function
(	O
&	O
wv	struct
.	O
vector	struct
,	O
wts	pointer
)	O
;	O
status	int
=	O
gsl_multifit_fdfsolver_wset	function
(	O
w	pointer
->	O
s	pointer
,	O
&	O
(	O
w	pointer
->	O
fdftik	struct
)	O
,	O
x	double
,	O
w	pointer
->	O
wts	pointer
)	O
;	O
}	O
else	O
{	O
status	int
=	O
gsl_multifit_fdfsolver_wset	function
(	O
w	pointer
->	O
s	pointer
,	O
&	O
(	O
w	pointer
->	O
fdftik	struct
)	O
,	O
x	double
,	O
NULL	O
)	O
;	O
}	O
f	pointer
->	O
nevalf	long
=	O
w	pointer
->	O
fdftik	struct
.	O
nevalf	long
;	O
f	pointer
->	O
nevaldf	long
=	O
w	pointer
->	O
fdftik	struct
.	O
nevaldf	long
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_multifit_fdfridge_iterate	function
(	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
)	O
{	O
int	O
status	int
=	O
gsl_multifit_fdfsolver_iterate	function
(	O
w	pointer
->	O
s	pointer
)	O
;	O
w	pointer
->	O
fdf	pointer
->	O
nevalf	long
=	O
w	pointer
->	O
fdftik	struct
.	O
nevalf	long
;	O
w	pointer
->	O
fdf	pointer
->	O
nevaldf	long
=	O
w	pointer
->	O
fdftik	struct
.	O
nevaldf	long
;	O
return	O
status	int
;	O
}	O
int	O
gsl_multifit_fdfridge_driver	function
(	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
,	O
const	O
size_t	long
maxiter	long
,	O
const	O
double	O
xtol	double
,	O
const	O
double	O
gtol	double
,	O
const	O
double	O
ftol	double
,	O
int	O
*	O
info	pointer
)	O
{	O
int	O
status	int
=	O
gsl_multifit_fdfsolver_driver	function
(	O
w	pointer
->	O
s	pointer
,	O
maxiter	long
,	O
xtol	double
,	O
gtol	double
,	O
ftol	double
,	O
info	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
fdfridge_f	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
,	O
gsl_vector	struct
*	O
f	pointer
)	O
{	O
int	O
status	int
;	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
=	O
(	O
gsl_multifit_fdfridge	struct
*	O
)	O
params	pointer
;	O
const	O
size_t	long
n	int
=	O
w	pointer
->	O
n	int
;	O
const	O
size_t	long
p	int
=	O
w	pointer
->	O
p	int
;	O
gsl_vector_view	struct
f_user	struct
=	O
gsl_vector_subvector	function
(	O
f	pointer
,	O
0	int
,	O
n	int
)	O
;	O
gsl_vector_view	struct
f_tik	struct
=	O
gsl_vector_subvector	function
(	O
f	pointer
,	O
n	int
,	O
p	int
)	O
;	O
status	int
=	O
gsl_multifit_eval_wf	function
(	O
w	pointer
->	O
fdf	pointer
,	O
x	double
,	O
NULL	O
,	O
&	O
f_user	struct
.	O
vector	struct
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
w	pointer
->	O
L_diag	pointer
)	O
{	O
gsl_vector_memcpy	function
(	O
&	O
f_tik	struct
.	O
vector	struct
,	O
x	double
)	O
;	O
gsl_vector_mul	function
(	O
&	O
f_tik	struct
.	O
vector	struct
,	O
w	pointer
->	O
L_diag	pointer
)	O
;	O
}	O
else	O
if	O
(	O
w	pointer
->	O
L	pointer
)	O
{	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
w	pointer
->	O
L	pointer
,	O
x	double
,	O
0.0	int
,	O
&	O
f_tik	struct
.	O
vector	struct
)	O
;	O
}	O
else	O
{	O
gsl_vector_memcpy	function
(	O
&	O
f_tik	struct
.	O
vector	struct
,	O
x	double
)	O
;	O
gsl_vector_scale	function
(	O
&	O
f_tik	struct
.	O
vector	struct
,	O
w	pointer
->	O
lambda	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
fdfridge_df	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
)	O
{	O
int	O
status	int
;	O
gsl_multifit_fdfridge	struct
*	O
w	pointer
=	O
(	O
gsl_multifit_fdfridge	struct
*	O
)	O
params	pointer
;	O
const	O
size_t	long
n	int
=	O
w	pointer
->	O
n	int
;	O
const	O
size_t	long
p	int
=	O
w	pointer
->	O
p	int
;	O
gsl_matrix_view	struct
J_user	struct
=	O
gsl_matrix_submatrix	function
(	O
J	pointer
,	O
0	int
,	O
0	int
,	O
n	int
,	O
p	int
)	O
;	O
gsl_matrix_view	struct
J_tik	struct
=	O
gsl_matrix_submatrix	function
(	O
J	pointer
,	O
n	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct
diag	struct
=	O
gsl_matrix_diagonal	function
(	O
&	O
J_tik	struct
.	O
matrix	struct
)	O
;	O
if	O
(	O
w	pointer
->	O
fdf	pointer
->	O
df	pointer
)	O
status	int
=	O
gsl_multifit_eval_wdf	function
(	O
w	pointer
->	O
fdf	pointer
,	O
x	double
,	O
NULL	O
,	O
&	O
J_user	struct
.	O
matrix	struct
)	O
;	O
else	O
{	O
status	int
=	O
gsl_multifit_eval_wf	function
(	O
w	pointer
->	O
fdf	pointer
,	O
x	double
,	O
NULL	O
,	O
w	pointer
->	O
f	pointer
)	O
;	O
status	int
+=	O
gsl_multifit_fdfsolver_dif_df	function
(	O
x	double
,	O
NULL	O
,	O
w	pointer
->	O
fdf	pointer
,	O
w	pointer
->	O
f	pointer
,	O
&	O
J_user	struct
.	O
matrix	struct
)	O
;	O
}	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
w	pointer
->	O
L_diag	pointer
)	O
{	O
gsl_matrix_set_zero	function
(	O
&	O
J_tik	struct
.	O
matrix	struct
)	O
;	O
gsl_vector_memcpy	function
(	O
&	O
diag	struct
.	O
vector	struct
,	O
w	pointer
->	O
L_diag	pointer
)	O
;	O
}	O
else	O
if	O
(	O
w	pointer
->	O
L	pointer
)	O
{	O
gsl_matrix_memcpy	function
(	O
&	O
J_tik	struct
.	O
matrix	struct
,	O
w	pointer
->	O
L	pointer
)	O
;	O
}	O
else	O
{	O
gsl_matrix_set_zero	function
(	O
&	O
J_tik	struct
.	O
matrix	struct
)	O
;	O
gsl_vector_set_all	function
(	O
&	O
diag	struct
.	O
vector	struct
,	O
w	pointer
->	O
lambda	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
