struct	O
internal_state	struct
{	O
int	O
dummy	int
;	O
}	O
;	O
static	O
int	O
gz_magic	array
[	O
2	int
]	O
=	O
{	O
0x1f	int
,	O
0x8b	int
}	O
;	O
typedef	O
struct	O
gz_stream	struct
{	O
z_stream	struct
stream	struct
;	O
int	O
z_err	int
;	O
int	O
z_eof	int
;	O
FILE	struct
*	O
file	pointer
;	O
Byte	char
*	O
inbuf	pointer
;	O
Byte	char
*	O
outbuf	pointer
;	O
uLong	long
crc	long
;	O
char	O
*	O
msg	pointer
;	O
char	O
*	O
path	pointer
;	O
int	O
transparent	int
;	O
char	O
mode	pointer
;	O
long	O
startpos	long
;	O
}	O
gz_stream	struct
;	O
local	O
gzFile	pointer
gz_open	function
OF	O
(	O
(	O
const	O
char	O
*	O
path	pointer
,	O
const	O
char	O
*	O
mode	pointer
,	O
int	O
fd	int
)	O
)	O
;	O
local	O
int	O
do_flush	function
OF	O
(	O
(	O
gzFile	pointer
file	pointer
,	O
int	O
flush	int
)	O
)	O
;	O
local	O
int	O
get_byte	function
OF	O
(	O
(	O
gz_stream	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
void	O
check_header	function
OF	O
(	O
(	O
gz_stream	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
int	O
destroy	function
OF	O
(	O
(	O
gz_stream	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
void	O
putLong	function
OF	O
(	O
(	O
FILE	struct
*	O
file	pointer
,	O
uLong	long
x	long
)	O
)	O
;	O
local	O
uLong	long
getLong	function
OF	O
(	O
(	O
gz_stream	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
gzFile	pointer
gz_open	function
(	O
path	pointer
,	O
mode	pointer
,	O
fd	int
)	O
const	O
char	O
*	O
path	pointer
;	O
const	O
char	O
*	O
mode	pointer
;	O
int	O
fd	int
;	O
{	O
int	O
err	int
;	O
int	O
level	int
=	O
Z_DEFAULT_COMPRESSION	O
;	O
int	O
strategy	int
=	O
Z_DEFAULT_STRATEGY	int
;	O
char	O
*	O
p	pointer
=	O
(	O
char	O
*	O
)	O
mode	pointer
;	O
gz_stream	struct
*	O
s	pointer
;	O
char	O
fmode	array
[	O
80	int
]	O
;	O
char	O
*	O
m	pointer
=	O
fmode	array
;	O
if	O
(	O
!	O
path	pointer
||	O
!	O
mode	pointer
)	O
return	O
Z_NULL	int
;	O
s	pointer
=	O
(	O
gz_stream	struct
*	O
)	O
ALLOC	O
(	O
sizeof	O
(	O
gz_stream	struct
)	O
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
Z_NULL	int
;	O
s	pointer
->	O
stream	struct
.	O
zalloc	pointer
=	O
(	O
alloc_func	pointer
)	O
0	int
;	O
s	pointer
->	O
stream	struct
.	O
zfree	pointer
=	O
(	O
free_func	pointer
)	O
0	int
;	O
s	pointer
->	O
stream	struct
.	O
opaque	pointer
=	O
(	O
voidpf	pointer
)	O
0	int
;	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
=	O
s	pointer
->	O
inbuf	pointer
=	O
Z_NULL	int
;	O
s	pointer
->	O
stream	struct
.	O
next_out	pointer
=	O
s	pointer
->	O
outbuf	pointer
=	O
Z_NULL	int
;	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
=	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
=	O
0	int
;	O
s	pointer
->	O
file	pointer
=	O
NULL	O
;	O
s	pointer
->	O
z_err	int
=	O
Z_OK	int
;	O
s	pointer
->	O
z_eof	int
=	O
0	int
;	O
s	pointer
->	O
crc	long
=	O
crc32	function
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
s	pointer
->	O
msg	pointer
=	O
NULL	O
;	O
s	pointer
->	O
transparent	int
=	O
0	int
;	O
s	pointer
->	O
path	pointer
=	O
(	O
char	O
*	O
)	O
ALLOC	O
(	O
strlen	function
(	O
path	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
s	pointer
->	O
path	pointer
==	O
NULL	O
)	O
{	O
return	O
destroy	function
(	O
s	pointer
)	O
,	O
(	O
gzFile	pointer
)	O
Z_NULL	int
;	O
}	O
strcpy	function
(	O
s	pointer
->	O
path	pointer
,	O
path	pointer
)	O
;	O
s	pointer
->	O
mode	pointer
=	O
'\0'	O
;	O
do	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'r'	O
)	O
s	pointer
->	O
mode	pointer
=	O
'r'	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'w'	O
||	O
*	O
p	pointer
==	O
'a'	O
)	O
s	pointer
->	O
mode	pointer
=	O
'w'	O
;	O
if	O
(	O
*	O
p	pointer
>=	O
'0'	O
&&	O
*	O
p	pointer
<=	O
'9'	O
)	O
{	O
level	int
=	O
*	O
p	pointer
-	O
'0'	O
;	O
}	O
else	O
if	O
(	O
*	O
p	pointer
==	O
'f'	O
)	O
{	O
strategy	int
=	O
Z_FILTERED	int
;	O
}	O
else	O
if	O
(	O
*	O
p	pointer
==	O
'h'	O
)	O
{	O
strategy	int
=	O
Z_HUFFMAN_ONLY	int
;	O
}	O
else	O
{	O
*	O
m	pointer
++	O
=	O
*	O
p	pointer
;	O
}	O
}	O
while	O
(	O
*	O
p	pointer
++	O
&&	O
m	pointer
!=	O
fmode	array
+	O
sizeof	O
(	O
fmode	array
)	O
)	O
;	O
if	O
(	O
s	pointer
->	O
mode	pointer
==	O
'\0'	O
)	O
return	O
destroy	function
(	O
s	pointer
)	O
,	O
(	O
gzFile	pointer
)	O
Z_NULL	int
;	O
if	O
(	O
s	pointer
->	O
mode	pointer
==	O
'w'	O
)	O
{	O
err	int
=	O
deflateInit2	O
(	O
&	O
(	O
s	pointer
->	O
stream	struct
)	O
,	O
level	int
,	O
Z_DEFLATED	int
,	O
-	O
MAX_WBITS	int
,	O
DEF_MEM_LEVEL	int
,	O
strategy	int
)	O
;	O
s	pointer
->	O
stream	struct
.	O
next_out	pointer
=	O
s	pointer
->	O
outbuf	pointer
=	O
(	O
Byte	char
*	O
)	O
ALLOC	O
(	O
Z_BUFSIZE	int
)	O
;	O
if	O
(	O
err	int
!=	O
Z_OK	int
||	O
s	pointer
->	O
outbuf	pointer
==	O
Z_NULL	int
)	O
{	O
return	O
destroy	function
(	O
s	pointer
)	O
,	O
(	O
gzFile	pointer
)	O
Z_NULL	int
;	O
}	O
}	O
else	O
{	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
=	O
s	pointer
->	O
inbuf	pointer
=	O
(	O
Byte	char
*	O
)	O
ALLOC	O
(	O
Z_BUFSIZE	int
)	O
;	O
err	int
=	O
inflateInit2	O
(	O
&	O
(	O
s	pointer
->	O
stream	struct
)	O
,	O
-	O
MAX_WBITS	int
)	O
;	O
if	O
(	O
err	int
!=	O
Z_OK	int
||	O
s	pointer
->	O
inbuf	pointer
==	O
Z_NULL	int
)	O
{	O
return	O
destroy	function
(	O
s	pointer
)	O
,	O
(	O
gzFile	pointer
)	O
Z_NULL	int
;	O
}	O
}	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
=	O
Z_BUFSIZE	int
;	O
errno	O
=	O
0	int
;	O
s	pointer
->	O
file	pointer
=	O
fd	int
<	O
0	int
?	O
F_OPEN	O
(	O
path	pointer
,	O
fmode	array
)	O
:	O
(	O
FILE	struct
*	O
)	O
fdopen	function
(	O
fd	int
,	O
fmode	array
)	O
;	O
if	O
(	O
s	pointer
->	O
file	pointer
==	O
NULL	O
)	O
{	O
return	O
destroy	function
(	O
s	pointer
)	O
,	O
(	O
gzFile	pointer
)	O
Z_NULL	int
;	O
}	O
if	O
(	O
s	pointer
->	O
mode	pointer
==	O
'w'	O
)	O
{	O
fprintf	function
(	O
s	pointer
->	O
file	pointer
,	O
"%c%c%c%c%c%c%c%c%c%c"	pointer
,	O
gz_magic	array
[	O
0	int
]	O
,	O
gz_magic	array
[	O
1	int
]	O
,	O
Z_DEFLATED	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
OS_CODE	int
)	O
;	O
s	pointer
->	O
startpos	long
=	O
10L	int
;	O
}	O
else	O
{	O
check_header	function
(	O
s	pointer
)	O
;	O
s	pointer
->	O
startpos	long
=	O
(	O
ftell	function
(	O
s	pointer
->	O
file	pointer
)	O
-	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
)	O
;	O
}	O
return	O
(	O
gzFile	pointer
)	O
s	pointer
;	O
}	O
gzFile	pointer
ZEXPORT	O
gzopen	function
(	O
path	pointer
,	O
mode	pointer
)	O
const	O
char	O
*	O
path	pointer
;	O
const	O
char	O
*	O
mode	pointer
;	O
{	O
return	O
gz_open	function
(	O
path	pointer
,	O
mode	pointer
,	O
-	O
1	int
)	O
;	O
}	O
gzFile	pointer
ZEXPORT	O
gzdopen	function
(	O
fd	int
,	O
mode	pointer
)	O
int	O
fd	int
;	O
const	O
char	O
*	O
mode	pointer
;	O
{	O
char	O
name	array
[	O
20	int
]	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
return	O
(	O
gzFile	pointer
)	O
Z_NULL	int
;	O
sprintf	function
(	O
name	array
,	O
"<fd:%d>"	pointer
,	O
fd	int
)	O
;	O
return	O
gz_open	function
(	O
name	array
,	O
mode	pointer
,	O
fd	int
)	O
;	O
}	O
int	O
ZEXPORT	O
gzsetparams	function
(	O
file	pointer
,	O
level	int
,	O
strategy	int
)	O
gzFile	pointer
file	pointer
;	O
int	O
level	int
;	O
int	O
strategy	int
;	O
{	O
gz_stream	struct
*	O
s	pointer
=	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
;	O
if	O
(	O
s	pointer
==	O
NULL	O
||	O
s	pointer
->	O
mode	pointer
!=	O
'w'	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
==	O
0	int
)	O
{	O
s	pointer
->	O
stream	struct
.	O
next_out	pointer
=	O
s	pointer
->	O
outbuf	pointer
;	O
if	O
(	O
fwrite	function
(	O
s	pointer
->	O
outbuf	pointer
,	O
1	int
,	O
Z_BUFSIZE	int
,	O
s	pointer
->	O
file	pointer
)	O
!=	O
Z_BUFSIZE	int
)	O
{	O
s	pointer
->	O
z_err	int
=	O
Z_ERRNO	O
;	O
}	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
=	O
Z_BUFSIZE	int
;	O
}	O
return	O
deflateParams	function
(	O
&	O
(	O
s	pointer
->	O
stream	struct
)	O
,	O
level	int
,	O
strategy	int
)	O
;	O
}	O
local	O
int	O
get_byte	function
(	O
s	pointer
)	O
gz_stream	struct
*	O
s	pointer
;	O
{	O
if	O
(	O
s	pointer
->	O
z_eof	int
)	O
return	O
EOF	O
;	O
if	O
(	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
==	O
0	int
)	O
{	O
errno	O
=	O
0	int
;	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
=	O
fread	function
(	O
s	pointer
->	O
inbuf	pointer
,	O
1	int
,	O
Z_BUFSIZE	int
,	O
s	pointer
->	O
file	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
==	O
0	int
)	O
{	O
s	pointer
->	O
z_eof	int
=	O
1	int
;	O
if	O
(	O
ferror	function
(	O
s	pointer
->	O
file	pointer
)	O
)	O
s	pointer
->	O
z_err	int
=	O
Z_ERRNO	O
;	O
return	O
EOF	O
;	O
}	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
=	O
s	pointer
->	O
inbuf	pointer
;	O
}	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
--	O
;	O
return	O
*	O
(	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
)	O
++	O
;	O
}	O
local	O
void	O
check_header	function
(	O
s	pointer
)	O
gz_stream	struct
*	O
s	pointer
;	O
{	O
int	O
method	int
;	O
int	O
flags	int
;	O
uInt	int
len	int
;	O
int	O
c	int
;	O
for	O
(	O
len	int
=	O
0	int
;	O
len	int
<	O
2	int
;	O
len	int
++	O
)	O
{	O
c	int
=	O
get_byte	function
(	O
s	pointer
)	O
;	O
if	O
(	O
c	int
!=	O
gz_magic	array
[	O
len	int
]	O
)	O
{	O
if	O
(	O
len	int
!=	O
0	int
)	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
++	O
,	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
--	O
;	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
++	O
,	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
--	O
;	O
s	pointer
->	O
transparent	int
=	O
1	int
;	O
}	O
s	pointer
->	O
z_err	int
=	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
!=	O
0	int
?	O
Z_OK	int
:	O
Z_STREAM_END	int
;	O
return	O
;	O
}	O
}	O
method	int
=	O
get_byte	function
(	O
s	pointer
)	O
;	O
flags	int
=	O
get_byte	function
(	O
s	pointer
)	O
;	O
if	O
(	O
method	int
!=	O
Z_DEFLATED	int
||	O
(	O
flags	int
&	O
RESERVED	int
)	O
!=	O
0	int
)	O
{	O
s	pointer
->	O
z_err	int
=	O
Z_DATA_ERROR	O
;	O
return	O
;	O
}	O
for	O
(	O
len	int
=	O
0	int
;	O
len	int
<	O
6	int
;	O
len	int
++	O
)	O
(	O
void	O
)	O
get_byte	function
(	O
s	pointer
)	O
;	O
if	O
(	O
(	O
flags	int
&	O
EXTRA_FIELD	int
)	O
!=	O
0	int
)	O
{	O
len	int
=	O
(	O
uInt	int
)	O
get_byte	function
(	O
s	pointer
)	O
;	O
len	int
+=	O
(	O
(	O
uInt	int
)	O
get_byte	function
(	O
s	pointer
)	O
)	O
<<	O
8	int
;	O
while	O
(	O
len	int
--	O
!=	O
0	int
&&	O
get_byte	function
(	O
s	pointer
)	O
!=	O
EOF	O
)	O
;	O
}	O
if	O
(	O
(	O
flags	int
&	O
ORIG_NAME	int
)	O
!=	O
0	int
)	O
{	O
while	O
(	O
(	O
c	int
=	O
get_byte	function
(	O
s	pointer
)	O
)	O
!=	O
0	int
&&	O
c	int
!=	O
EOF	O
)	O
;	O
}	O
if	O
(	O
(	O
flags	int
&	O
COMMENT	int
)	O
!=	O
0	int
)	O
{	O
while	O
(	O
(	O
c	int
=	O
get_byte	function
(	O
s	pointer
)	O
)	O
!=	O
0	int
&&	O
c	int
!=	O
EOF	O
)	O
;	O
}	O
if	O
(	O
(	O
flags	int
&	O
HEAD_CRC	int
)	O
!=	O
0	int
)	O
{	O
for	O
(	O
len	int
=	O
0	int
;	O
len	int
<	O
2	int
;	O
len	int
++	O
)	O
(	O
void	O
)	O
get_byte	function
(	O
s	pointer
)	O
;	O
}	O
s	pointer
->	O
z_err	int
=	O
s	pointer
->	O
z_eof	int
?	O
Z_DATA_ERROR	O
:	O
Z_OK	int
;	O
}	O
local	O
int	O
destroy	function
(	O
s	pointer
)	O
gz_stream	struct
*	O
s	pointer
;	O
{	O
int	O
err	int
=	O
Z_OK	int
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
Z_STREAM_ERROR	O
;	O
TRYFREE	O
(	O
s	pointer
->	O
msg	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
stream	struct
.	O
state	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
s	pointer
->	O
mode	pointer
==	O
'w'	O
)	O
{	O
err	int
=	O
deflateEnd	function
(	O
&	O
(	O
s	pointer
->	O
stream	struct
)	O
)	O
;	O
}	O
else	O
if	O
(	O
s	pointer
->	O
mode	pointer
==	O
'r'	O
)	O
{	O
err	int
=	O
inflateEnd	function
(	O
&	O
(	O
s	pointer
->	O
stream	struct
)	O
)	O
;	O
}	O
}	O
if	O
(	O
s	pointer
->	O
file	pointer
!=	O
NULL	O
&&	O
fclose	function
(	O
s	pointer
->	O
file	pointer
)	O
)	O
{	O
if	O
(	O
errno	O
!=	O
ESPIPE	int
)	O
err	int
=	O
Z_ERRNO	O
;	O
}	O
if	O
(	O
s	pointer
->	O
z_err	int
<	O
0	int
)	O
err	int
=	O
s	pointer
->	O
z_err	int
;	O
TRYFREE	O
(	O
s	pointer
->	O
inbuf	pointer
)	O
;	O
TRYFREE	O
(	O
s	pointer
->	O
outbuf	pointer
)	O
;	O
TRYFREE	O
(	O
s	pointer
->	O
path	pointer
)	O
;	O
TRYFREE	O
(	O
s	pointer
)	O
;	O
return	O
err	int
;	O
}	O
int	O
ZEXPORT	O
gzread	function
(	O
file	pointer
,	O
buf	pointer
,	O
len	int
)	O
gzFile	pointer
file	pointer
;	O
voidp	pointer
buf	pointer
;	O
unsigned	O
len	int
;	O
{	O
gz_stream	struct
*	O
s	pointer
=	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
;	O
Bytef	char
*	O
start	pointer
=	O
(	O
Bytef	char
*	O
)	O
buf	pointer
;	O
Byte	char
*	O
next_out	pointer
;	O
if	O
(	O
s	pointer
==	O
NULL	O
||	O
s	pointer
->	O
mode	pointer
!=	O
'r'	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
s	pointer
->	O
z_err	int
==	O
Z_DATA_ERROR	O
||	O
s	pointer
->	O
z_err	int
==	O
Z_ERRNO	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
s	pointer
->	O
z_err	int
==	O
Z_STREAM_END	int
)	O
return	O
0	int
;	O
next_out	pointer
=	O
(	O
Byte	char
*	O
)	O
buf	pointer
;	O
s	pointer
->	O
stream	struct
.	O
next_out	pointer
=	O
(	O
Bytef	char
*	O
)	O
buf	pointer
;	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
=	O
len	int
;	O
while	O
(	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
!=	O
0	int
)	O
{	O
if	O
(	O
s	pointer
->	O
transparent	int
)	O
{	O
uInt	int
n	int
=	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
;	O
if	O
(	O
n	int
>	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
)	O
n	int
=	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
;	O
if	O
(	O
n	int
>	O
0	int
)	O
{	O
zmemcpy	O
(	O
s	pointer
->	O
stream	struct
.	O
next_out	pointer
,	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
,	O
n	int
)	O
;	O
next_out	pointer
+=	O
n	int
;	O
s	pointer
->	O
stream	struct
.	O
next_out	pointer
=	O
next_out	pointer
;	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
+=	O
n	int
;	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
-=	O
n	int
;	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
-=	O
n	int
;	O
}	O
if	O
(	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
>	O
0	int
)	O
{	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
-=	O
fread	function
(	O
next_out	pointer
,	O
1	int
,	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
,	O
s	pointer
->	O
file	pointer
)	O
;	O
}	O
len	int
-=	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
;	O
s	pointer
->	O
stream	struct
.	O
total_in	long
+=	O
(	O
uLong	long
)	O
len	int
;	O
s	pointer
->	O
stream	struct
.	O
total_out	long
+=	O
(	O
uLong	long
)	O
len	int
;	O
if	O
(	O
len	int
==	O
0	int
)	O
s	pointer
->	O
z_eof	int
=	O
1	int
;	O
return	O
(	O
int	O
)	O
len	int
;	O
}	O
if	O
(	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
==	O
0	int
&&	O
!	O
s	pointer
->	O
z_eof	int
)	O
{	O
errno	O
=	O
0	int
;	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
=	O
fread	function
(	O
s	pointer
->	O
inbuf	pointer
,	O
1	int
,	O
Z_BUFSIZE	int
,	O
s	pointer
->	O
file	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
==	O
0	int
)	O
{	O
s	pointer
->	O
z_eof	int
=	O
1	int
;	O
if	O
(	O
ferror	function
(	O
s	pointer
->	O
file	pointer
)	O
)	O
{	O
s	pointer
->	O
z_err	int
=	O
Z_ERRNO	O
;	O
break	O
;	O
}	O
}	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
=	O
s	pointer
->	O
inbuf	pointer
;	O
}	O
s	pointer
->	O
z_err	int
=	O
inflate	function
(	O
&	O
(	O
s	pointer
->	O
stream	struct
)	O
,	O
Z_NO_FLUSH	int
)	O
;	O
if	O
(	O
s	pointer
->	O
z_err	int
==	O
Z_STREAM_END	int
)	O
{	O
s	pointer
->	O
crc	long
=	O
crc32	function
(	O
s	pointer
->	O
crc	long
,	O
start	pointer
,	O
(	O
uInt	int
)	O
(	O
s	pointer
->	O
stream	struct
.	O
next_out	pointer
-	O
start	pointer
)	O
)	O
;	O
start	pointer
=	O
s	pointer
->	O
stream	struct
.	O
next_out	pointer
;	O
if	O
(	O
getLong	function
(	O
s	pointer
)	O
!=	O
s	pointer
->	O
crc	long
)	O
{	O
s	pointer
->	O
z_err	int
=	O
Z_DATA_ERROR	O
;	O
}	O
else	O
{	O
(	O
void	O
)	O
getLong	function
(	O
s	pointer
)	O
;	O
check_header	function
(	O
s	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
z_err	int
==	O
Z_OK	int
)	O
{	O
uLong	long
total_in	long
=	O
s	pointer
->	O
stream	struct
.	O
total_in	long
;	O
uLong	long
total_out	long
=	O
s	pointer
->	O
stream	struct
.	O
total_out	long
;	O
inflateReset	function
(	O
&	O
(	O
s	pointer
->	O
stream	struct
)	O
)	O
;	O
s	pointer
->	O
stream	struct
.	O
total_in	long
=	O
total_in	long
;	O
s	pointer
->	O
stream	struct
.	O
total_out	long
=	O
total_out	long
;	O
s	pointer
->	O
crc	long
=	O
crc32	function
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
s	pointer
->	O
z_err	int
!=	O
Z_OK	int
||	O
s	pointer
->	O
z_eof	int
)	O
break	O
;	O
}	O
s	pointer
->	O
crc	long
=	O
crc32	function
(	O
s	pointer
->	O
crc	long
,	O
start	pointer
,	O
(	O
uInt	int
)	O
(	O
s	pointer
->	O
stream	struct
.	O
next_out	pointer
-	O
start	pointer
)	O
)	O
;	O
return	O
(	O
int	O
)	O
(	O
len	int
-	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
)	O
;	O
}	O
int	O
ZEXPORT	O
gzgetc	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
unsigned	O
char	O
c	int
;	O
return	O
gzread	function
(	O
file	pointer
,	O
&	O
c	int
,	O
1	int
)	O
==	O
1	int
?	O
c	int
:	O
-	O
1	int
;	O
}	O
char	O
*	O
ZEXPORT	O
gzgets	function
(	O
file	pointer
,	O
buf	pointer
,	O
len	int
)	O
gzFile	pointer
file	pointer
;	O
char	O
*	O
buf	pointer
;	O
int	O
len	int
;	O
{	O
char	O
*	O
b	pointer
=	O
buf	pointer
;	O
if	O
(	O
buf	pointer
==	O
Z_NULL	int
||	O
len	int
<=	O
0	int
)	O
return	O
Z_NULL	int
;	O
while	O
(	O
--	O
len	int
>	O
0	int
&&	O
gzread	function
(	O
file	pointer
,	O
buf	pointer
,	O
1	int
)	O
==	O
1	int
&&	O
*	O
buf	pointer
++	O
!=	O
'\n'	O
)	O
;	O
*	O
buf	pointer
=	O
'\0'	O
;	O
return	O
b	pointer
==	O
buf	pointer
&&	O
len	int
>	O
0	int
?	O
Z_NULL	int
:	O
b	pointer
;	O
}	O
int	O
ZEXPORT	O
gzwrite	function
(	O
file	pointer
,	O
buf	pointer
,	O
len	int
)	O
gzFile	pointer
file	pointer
;	O
const	O
voidp	pointer
buf	pointer
;	O
unsigned	O
len	int
;	O
{	O
gz_stream	struct
*	O
s	pointer
=	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
;	O
if	O
(	O
s	pointer
==	O
NULL	O
||	O
s	pointer
->	O
mode	pointer
!=	O
'w'	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
=	O
(	O
Bytef	char
*	O
)	O
buf	pointer
;	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
=	O
len	int
;	O
while	O
(	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
!=	O
0	int
)	O
{	O
if	O
(	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
==	O
0	int
)	O
{	O
s	pointer
->	O
stream	struct
.	O
next_out	pointer
=	O
s	pointer
->	O
outbuf	pointer
;	O
if	O
(	O
fwrite	function
(	O
s	pointer
->	O
outbuf	pointer
,	O
1	int
,	O
Z_BUFSIZE	int
,	O
s	pointer
->	O
file	pointer
)	O
!=	O
Z_BUFSIZE	int
)	O
{	O
s	pointer
->	O
z_err	int
=	O
Z_ERRNO	O
;	O
break	O
;	O
}	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
=	O
Z_BUFSIZE	int
;	O
}	O
s	pointer
->	O
z_err	int
=	O
deflate	function
(	O
&	O
(	O
s	pointer
->	O
stream	struct
)	O
,	O
Z_NO_FLUSH	int
)	O
;	O
if	O
(	O
s	pointer
->	O
z_err	int
!=	O
Z_OK	int
)	O
break	O
;	O
}	O
s	pointer
->	O
crc	long
=	O
crc32	function
(	O
s	pointer
->	O
crc	long
,	O
(	O
const	O
Bytef	char
*	O
)	O
buf	pointer
,	O
len	int
)	O
;	O
return	O
(	O
int	O
)	O
(	O
len	int
-	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
)	O
;	O
}	O
int	O
ZEXPORTVA	O
gzprintf	function
(	O
gzFile	pointer
file	pointer
,	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
char	O
buf	pointer
[	O
Z_PRINTF_BUFSIZE	int
]	O
;	O
va_list	array
va	array
;	O
int	O
len	int
;	O
va_start	O
(	O
va	array
,	O
format	pointer
)	O
;	O
(	O
void	O
)	O
vsprintf	function
(	O
buf	pointer
,	O
format	pointer
,	O
va	array
)	O
;	O
va_end	O
(	O
va	array
)	O
;	O
len	int
=	O
strlen	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
len	int
<=	O
0	int
)	O
return	O
0	int
;	O
return	O
gzwrite	function
(	O
file	pointer
,	O
buf	pointer
,	O
(	O
unsigned	O
)	O
len	int
)	O
;	O
}	O
int	O
ZEXPORT	O
gzputc	function
(	O
file	pointer
,	O
c	int
)	O
gzFile	pointer
file	pointer
;	O
int	O
c	int
;	O
{	O
unsigned	O
char	O
cc	char
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
return	O
gzwrite	function
(	O
file	pointer
,	O
&	O
cc	char
,	O
1	int
)	O
==	O
1	int
?	O
(	O
int	O
)	O
cc	char
:	O
-	O
1	int
;	O
}	O
int	O
ZEXPORT	O
gzputs	function
(	O
file	pointer
,	O
s	pointer
)	O
gzFile	pointer
file	pointer
;	O
const	O
char	O
*	O
s	pointer
;	O
{	O
return	O
gzwrite	function
(	O
file	pointer
,	O
(	O
char	O
*	O
)	O
s	pointer
,	O
(	O
unsigned	O
)	O
strlen	function
(	O
s	pointer
)	O
)	O
;	O
}	O
local	O
int	O
do_flush	function
(	O
file	pointer
,	O
flush	int
)	O
gzFile	pointer
file	pointer
;	O
int	O
flush	int
;	O
{	O
uInt	int
len	int
;	O
int	O
done	int
=	O
0	int
;	O
gz_stream	struct
*	O
s	pointer
=	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
;	O
if	O
(	O
s	pointer
==	O
NULL	O
||	O
s	pointer
->	O
mode	pointer
!=	O
'w'	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
len	int
=	O
Z_BUFSIZE	int
-	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
;	O
if	O
(	O
len	int
!=	O
0	int
)	O
{	O
if	O
(	O
(	O
uInt	int
)	O
fwrite	function
(	O
s	pointer
->	O
outbuf	pointer
,	O
1	int
,	O
len	int
,	O
s	pointer
->	O
file	pointer
)	O
!=	O
len	int
)	O
{	O
s	pointer
->	O
z_err	int
=	O
Z_ERRNO	O
;	O
return	O
Z_ERRNO	O
;	O
}	O
s	pointer
->	O
stream	struct
.	O
next_out	pointer
=	O
s	pointer
->	O
outbuf	pointer
;	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
=	O
Z_BUFSIZE	int
;	O
}	O
if	O
(	O
done	int
)	O
break	O
;	O
s	pointer
->	O
z_err	int
=	O
deflate	function
(	O
&	O
(	O
s	pointer
->	O
stream	struct
)	O
,	O
flush	int
)	O
;	O
if	O
(	O
len	int
==	O
0	int
&&	O
s	pointer
->	O
z_err	int
==	O
Z_BUF_ERROR	O
)	O
s	pointer
->	O
z_err	int
=	O
Z_OK	int
;	O
done	int
=	O
(	O
s	pointer
->	O
stream	struct
.	O
avail_out	int
!=	O
0	int
||	O
s	pointer
->	O
z_err	int
==	O
Z_STREAM_END	int
)	O
;	O
if	O
(	O
s	pointer
->	O
z_err	int
!=	O
Z_OK	int
&&	O
s	pointer
->	O
z_err	int
!=	O
Z_STREAM_END	int
)	O
break	O
;	O
}	O
return	O
s	pointer
->	O
z_err	int
==	O
Z_STREAM_END	int
?	O
Z_OK	int
:	O
s	pointer
->	O
z_err	int
;	O
}	O
int	O
ZEXPORT	O
gzflush	function
(	O
file	pointer
,	O
flush	int
)	O
gzFile	pointer
file	pointer
;	O
int	O
flush	int
;	O
{	O
gz_stream	struct
*	O
s	pointer
=	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
;	O
int	O
err	int
=	O
do_flush	function
(	O
file	pointer
,	O
flush	int
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
fflush	function
(	O
s	pointer
->	O
file	pointer
)	O
;	O
return	O
s	pointer
->	O
z_err	int
==	O
Z_STREAM_END	int
?	O
Z_OK	int
:	O
s	pointer
->	O
z_err	int
;	O
}	O
z_off_t	O
ZEXPORT	O
gzseek	function
(	O
file	pointer
,	O
offset	long
,	O
whence	int
)	O
gzFile	pointer
file	pointer
;	O
z_off_t	O
offset	long
;	O
int	O
whence	int
;	O
{	O
gz_stream	struct
*	O
s	pointer
=	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
;	O
if	O
(	O
s	pointer
==	O
NULL	O
||	O
whence	int
==	O
SEEK_END	int
||	O
s	pointer
->	O
z_err	int
==	O
Z_ERRNO	O
||	O
s	pointer
->	O
z_err	int
==	O
Z_DATA_ERROR	O
)	O
{	O
return	O
-	O
1L	int
;	O
}	O
if	O
(	O
s	pointer
->	O
mode	pointer
==	O
'w'	O
)	O
{	O
if	O
(	O
whence	int
==	O
SEEK_SET	int
)	O
{	O
offset	long
-=	O
s	pointer
->	O
stream	struct
.	O
total_in	long
;	O
}	O
if	O
(	O
offset	long
<	O
0	int
)	O
return	O
-	O
1L	int
;	O
if	O
(	O
s	pointer
->	O
inbuf	pointer
==	O
Z_NULL	int
)	O
{	O
s	pointer
->	O
inbuf	pointer
=	O
(	O
Byte	char
*	O
)	O
ALLOC	O
(	O
Z_BUFSIZE	int
)	O
;	O
zmemzero	O
(	O
s	pointer
->	O
inbuf	pointer
,	O
Z_BUFSIZE	int
)	O
;	O
}	O
while	O
(	O
offset	long
>	O
0	int
)	O
{	O
uInt	int
size	int
=	O
Z_BUFSIZE	int
;	O
if	O
(	O
offset	long
<	O
Z_BUFSIZE	int
)	O
size	int
=	O
(	O
uInt	int
)	O
offset	long
;	O
size	int
=	O
gzwrite	function
(	O
file	pointer
,	O
s	pointer
->	O
inbuf	pointer
,	O
size	int
)	O
;	O
if	O
(	O
size	int
==	O
0	int
)	O
return	O
-	O
1L	int
;	O
offset	long
-=	O
size	int
;	O
}	O
return	O
(	O
z_off_t	O
)	O
s	pointer
->	O
stream	struct
.	O
total_in	long
;	O
}	O
if	O
(	O
whence	int
==	O
SEEK_CUR	int
)	O
{	O
offset	long
+=	O
s	pointer
->	O
stream	struct
.	O
total_out	long
;	O
}	O
if	O
(	O
offset	long
<	O
0	int
)	O
return	O
-	O
1L	int
;	O
if	O
(	O
s	pointer
->	O
transparent	int
)	O
{	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
=	O
0	int
;	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
=	O
s	pointer
->	O
inbuf	pointer
;	O
if	O
(	O
fseek	function
(	O
s	pointer
->	O
file	pointer
,	O
offset	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
return	O
-	O
1L	int
;	O
s	pointer
->	O
stream	struct
.	O
total_in	long
=	O
s	pointer
->	O
stream	struct
.	O
total_out	long
=	O
(	O
uLong	long
)	O
offset	long
;	O
return	O
offset	long
;	O
}	O
if	O
(	O
(	O
uLong	long
)	O
offset	long
>=	O
s	pointer
->	O
stream	struct
.	O
total_out	long
)	O
{	O
offset	long
-=	O
s	pointer
->	O
stream	struct
.	O
total_out	long
;	O
}	O
else	O
if	O
(	O
gzrewind	function
(	O
file	pointer
)	O
<	O
0	int
)	O
{	O
return	O
-	O
1L	int
;	O
}	O
if	O
(	O
offset	long
!=	O
0	int
&&	O
s	pointer
->	O
outbuf	pointer
==	O
Z_NULL	int
)	O
{	O
s	pointer
->	O
outbuf	pointer
=	O
(	O
Byte	char
*	O
)	O
ALLOC	O
(	O
Z_BUFSIZE	int
)	O
;	O
}	O
while	O
(	O
offset	long
>	O
0	int
)	O
{	O
int	O
size	int
=	O
Z_BUFSIZE	int
;	O
if	O
(	O
offset	long
<	O
Z_BUFSIZE	int
)	O
size	int
=	O
(	O
int	O
)	O
offset	long
;	O
size	int
=	O
gzread	function
(	O
file	pointer
,	O
s	pointer
->	O
outbuf	pointer
,	O
(	O
uInt	int
)	O
size	int
)	O
;	O
if	O
(	O
size	int
<=	O
0	int
)	O
return	O
-	O
1L	int
;	O
offset	long
-=	O
size	int
;	O
}	O
return	O
(	O
z_off_t	O
)	O
s	pointer
->	O
stream	struct
.	O
total_out	long
;	O
}	O
int	O
ZEXPORT	O
gzrewind	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
gz_stream	struct
*	O
s	pointer
=	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
;	O
if	O
(	O
s	pointer
==	O
NULL	O
||	O
s	pointer
->	O
mode	pointer
!=	O
'r'	O
)	O
return	O
-	O
1	int
;	O
s	pointer
->	O
z_err	int
=	O
Z_OK	int
;	O
s	pointer
->	O
z_eof	int
=	O
0	int
;	O
s	pointer
->	O
stream	struct
.	O
avail_in	int
=	O
0	int
;	O
s	pointer
->	O
stream	struct
.	O
next_in	pointer
=	O
s	pointer
->	O
inbuf	pointer
;	O
s	pointer
->	O
crc	long
=	O
crc32	function
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
if	O
(	O
s	pointer
->	O
startpos	long
==	O
0	int
)	O
{	O
rewind	function
(	O
s	pointer
->	O
file	pointer
)	O
;	O
return	O
0	int
;	O
}	O
(	O
void	O
)	O
inflateReset	function
(	O
&	O
s	pointer
->	O
stream	struct
)	O
;	O
return	O
fseek	function
(	O
s	pointer
->	O
file	pointer
,	O
s	pointer
->	O
startpos	long
,	O
SEEK_SET	int
)	O
;	O
}	O
z_off_t	O
ZEXPORT	O
gztell	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
return	O
gzseek	function
(	O
file	pointer
,	O
0L	int
,	O
SEEK_CUR	int
)	O
;	O
}	O
int	O
ZEXPORT	O
gzeof	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
gz_stream	struct
*	O
s	pointer
=	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
;	O
return	O
(	O
s	pointer
==	O
NULL	O
||	O
s	pointer
->	O
mode	pointer
!=	O
'r'	O
)	O
?	O
0	int
:	O
s	pointer
->	O
z_eof	int
;	O
}	O
local	O
void	O
putLong	function
(	O
file	pointer
,	O
x	long
)	O
FILE	struct
*	O
file	pointer
;	O
uLong	long
x	long
;	O
{	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
4	int
;	O
n	int
++	O
)	O
{	O
fputc	function
(	O
(	O
int	O
)	O
(	O
x	long
&	O
0xff	int
)	O
,	O
file	pointer
)	O
;	O
x	long
>>=	O
8	int
;	O
}	O
}	O
local	O
uLong	long
getLong	function
(	O
s	pointer
)	O
gz_stream	struct
*	O
s	pointer
;	O
{	O
uLong	long
x	long
=	O
(	O
uLong	long
)	O
get_byte	function
(	O
s	pointer
)	O
;	O
int	O
c	int
;	O
x	long
+=	O
(	O
(	O
uLong	long
)	O
get_byte	function
(	O
s	pointer
)	O
)	O
<<	O
8	int
;	O
x	long
+=	O
(	O
(	O
uLong	long
)	O
get_byte	function
(	O
s	pointer
)	O
)	O
<<	O
16	int
;	O
c	int
=	O
get_byte	function
(	O
s	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
s	pointer
->	O
z_err	int
=	O
Z_DATA_ERROR	O
;	O
x	long
+=	O
(	O
(	O
uLong	long
)	O
c	int
)	O
<<	O
24	int
;	O
return	O
x	long
;	O
}	O
int	O
ZEXPORT	O
gzclose	function
(	O
file	pointer
)	O
gzFile	pointer
file	pointer
;	O
{	O
int	O
err	int
;	O
gz_stream	struct
*	O
s	pointer
=	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
s	pointer
->	O
mode	pointer
==	O
'w'	O
)	O
{	O
err	int
=	O
do_flush	function
(	O
file	pointer
,	O
Z_FINISH	int
)	O
;	O
if	O
(	O
err	int
!=	O
Z_OK	int
)	O
return	O
destroy	function
(	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
)	O
;	O
putLong	function
(	O
s	pointer
->	O
file	pointer
,	O
s	pointer
->	O
crc	long
)	O
;	O
putLong	function
(	O
s	pointer
->	O
file	pointer
,	O
s	pointer
->	O
stream	struct
.	O
total_in	long
)	O
;	O
}	O
return	O
destroy	function
(	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
)	O
;	O
}	O
const	O
char	O
*	O
ZEXPORT	O
gzerror	function
(	O
file	pointer
,	O
errnum	pointer
)	O
gzFile	pointer
file	pointer
;	O
int	O
*	O
errnum	pointer
;	O
{	O
char	O
*	O
m	pointer
;	O
gz_stream	struct
*	O
s	pointer
=	O
(	O
gz_stream	struct
*	O
)	O
file	pointer
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
{	O
*	O
errnum	pointer
=	O
Z_STREAM_ERROR	O
;	O
return	O
(	O
const	O
char	O
*	O
)	O
ERR_MSG	O
(	O
Z_STREAM_ERROR	O
)	O
;	O
}	O
*	O
errnum	pointer
=	O
s	pointer
->	O
z_err	int
;	O
if	O
(	O
*	O
errnum	pointer
==	O
Z_OK	int
)	O
return	O
(	O
const	O
char	O
*	O
)	O
""	pointer
;	O
m	pointer
=	O
(	O
char	O
*	O
)	O
(	O
*	O
errnum	pointer
==	O
Z_ERRNO	O
?	O
zstrerror	pointer
(	O
errno	O
)	O
:	O
s	pointer
->	O
stream	struct
.	O
msg	pointer
)	O
;	O
if	O
(	O
m	pointer
==	O
NULL	O
||	O
*	O
m	pointer
==	O
'\0'	O
)	O
m	pointer
=	O
(	O
char	O
*	O
)	O
ERR_MSG	O
(	O
s	pointer
->	O
z_err	int
)	O
;	O
TRYFREE	O
(	O
s	pointer
->	O
msg	pointer
)	O
;	O
s	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
ALLOC	O
(	O
strlen	function
(	O
s	pointer
->	O
path	pointer
)	O
+	O
strlen	function
(	O
m	pointer
)	O
+	O
3	int
)	O
;	O
strcpy	function
(	O
s	pointer
->	O
msg	pointer
,	O
s	pointer
->	O
path	pointer
)	O
;	O
strcat	function
(	O
s	pointer
->	O
msg	pointer
,	O
": "	pointer
)	O
;	O
strcat	function
(	O
s	pointer
->	O
msg	pointer
,	O
m	pointer
)	O
;	O
return	O
(	O
const	O
char	O
*	O
)	O
s	pointer
->	O
msg	pointer
;	O
}	O
