static	O
mu_script_t	pointer
script_handler	pointer
;	O
static	O
mu_list_t	pointer
script_list	pointer
;	O
static	O
char	O
*	O
message_id_header	pointer
;	O
struct	O
mda_script	struct
{	O
mu_script_t	pointer
scr	pointer
;	O
const	O
char	O
*	O
pat	pointer
;	O
}	O
;	O
static	O
int	O
script_register	function
(	O
const	O
char	O
*	O
pattern	pointer
)	O
{	O
mu_script_t	pointer
scr	pointer
;	O
struct	O
mda_script	struct
*	O
p	pointer
;	O
if	O
(	O
script_handler	pointer
)	O
scr	pointer
=	O
script_handler	pointer
;	O
else	O
{	O
scr	pointer
=	O
mu_script_suffix_handler	function
(	O
pattern	pointer
)	O
;	O
if	O
(	O
!	O
scr	pointer
)	O
return	O
EINVAL	int
;	O
}	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
MU_ERR_FAILURE	O
;	O
p	pointer
->	O
scr	pointer
=	O
scr	pointer
;	O
p	pointer
->	O
pat	pointer
=	O
pattern	pointer
;	O
if	O
(	O
!	O
script_list	pointer
)	O
{	O
if	O
(	O
mu_list_create	function
(	O
&	O
script_list	pointer
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
if	O
(	O
mu_list_append	function
(	O
script_list	pointer
,	O
p	pointer
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
set_script_lang	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
script_handler	pointer
=	O
mu_script_lang_handler	function
(	O
arg	pointer
)	O
;	O
if	O
(	O
!	O
script_handler	pointer
)	O
{	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"unknown or unsupported language: %s"	pointer
)	O
,	O
arg	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
}	O
static	O
void	O
set_script_pattern	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
switch	O
(	O
script_register	function
(	O
arg	pointer
)	O
)	O
{	O
case	O
0	int
:	O
return	O
;	O
case	O
EINVAL	int
:	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"%s has unknown file suffix"	pointer
)	O
,	O
arg	pointer
)	O
;	O
break	O
;	O
default	O
:	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"error registering script"	pointer
)	O
)	O
;	O
}	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
static	O
void	O
set_debug	function
(	O
struct	O
mu_parseopt	struct
*	O
po	pointer
,	O
struct	O
mu_option	struct
*	O
opt	pointer
,	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
mu_script_debug_flags	function
(	O
arg	pointer
,	O
(	O
char	O
*	O
*	O
)	O
&	O
arg	pointer
)	O
)	O
{	O
mu_parseopt_error	function
(	O
po	pointer
,	O
_	O
(	O
"%c is not a valid debug flag"	pointer
)	O
,	O
*	O
arg	pointer
)	O
;	O
exit	function
(	O
po	pointer
->	O
po_exit_error	int
)	O
;	O
}	O
}	O
struct	O
mu_option	struct
mda_script_options	array
[	O
]	O
=	O
{	O
MU_OPTION_GROUP	O
(	O
N_	O
(	O
"Scripting options"	pointer
)	O
)	O
,	O
{	O
"language"	pointer
,	O
'l'	O
,	O
N_	O
(	O
"STRING"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"define scripting language for the next --script option"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_script_lang	function
}	O
,	O
{	O
"script"	pointer
,	O
's'	O
,	O
N_	O
(	O
"PATTERN"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"set name pattern for user-defined mail filter"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_script_pattern	function
}	O
,	O
{	O
"message-id-header"	pointer
,	O
0	int
,	O
N_	O
(	O
"STRING"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"use this header to identify messages when logging Sieve actions"	pointer
)	O
,	O
mu_c_string	int
,	O
&	O
message_id_header	pointer
}	O
,	O
{	O
"script-debug"	pointer
,	O
'x'	O
,	O
N_	O
(	O
"FLAGS"	pointer
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"enable script debugging; FLAGS are:\ng - guile stack traces\nt - sieve trace (MU_SIEVE_DEBUG_TRACE)\ni - sieve instructions trace (MU_SIEVE_DEBUG_INSTR)\nl - sieve action logs"	pointer
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_debug	function
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
int	O
cb_script_language	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
script_handler	pointer
=	O
mu_script_lang_handler	function
(	O
val	array
->	O
v	array
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
script_handler	pointer
)	O
{	O
mu_error	function
(	O
_	O
(	O
"unsupported language: %s"	pointer
)	O
,	O
val	array
->	O
v	array
.	O
string	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_script_pattern	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
switch	O
(	O
script_register	function
(	O
val	array
->	O
v	array
.	O
string	pointer
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
EINVAL	int
:	O
mu_error	function
(	O
_	O
(	O
"%s has unknown file suffix"	pointer
)	O
,	O
val	array
->	O
v	array
.	O
string	pointer
)	O
;	O
break	O
;	O
default	O
:	O
mu_error	function
(	O
_	O
(	O
"error registering script"	pointer
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_debug	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
mu_cfg_assert_value_type	function
(	O
val	array
,	O
MU_CFG_STRING	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
mu_script_debug_flags	function
(	O
val	array
->	O
v	array
.	O
string	pointer
,	O
&	O
p	pointer
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"%c is not a valid debug flag"	pointer
)	O
,	O
*	O
p	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
mu_cfg_param	struct
mda_script_cfg	array
[	O
]	O
=	O
{	O
{	O
"language"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_script_language	function
,	O
N_	O
(	O
"Set script language."	pointer
)	O
,	O
N_	O
(	O
"arg: python|guile"	pointer
)	O
}	O
,	O
{	O
"pattern"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_script_pattern	function
,	O
N_	O
(	O
"Set script pattern."	pointer
)	O
,	O
N_	O
(	O
"arg: glob"	pointer
)	O
}	O
,	O
{	O
"debug"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_debug	function
,	O
N_	O
(	O
"Set scripting debug level.  Argument is one or more "	pointer
"of the following letters:\n"	pointer
"  g - guile stack traces\n"	pointer
"  t - sieve trace (MU_SIEVE_DEBUG_TRACE)\n"	pointer
"  i - sieve instructions trace (MU_SIEVE_DEBUG_INSTR)\n"	pointer
"  l - sieve action logs\n"	pointer
)	O
,	O
N_	O
(	O
"arg: string"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
struct	O
apply_script_closure	struct
{	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
}	O
;	O
static	O
char	O
const	O
*	O
script_env	array
[	O
]	O
=	O
{	O
"location=MDA"	pointer
,	O
"phase=during"	pointer
,	O
NULL	O
}	O
;	O
static	O
int	O
apply_script	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mda_script	struct
*	O
scr	pointer
=	O
item	pointer
;	O
struct	O
apply_script_closure	struct
*	O
clos	pointer
=	O
data	pointer
;	O
char	O
*	O
progfile	pointer
;	O
int	O
rc	int
;	O
struct	O
stat	struct
st	pointer
;	O
mu_script_descr_t	pointer
sd	pointer
;	O
progfile	pointer
=	O
mu_expand_path_pattern	function
(	O
scr	pointer
->	O
pat	pointer
,	O
clos	pointer
->	O
auth	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
stat	struct
(	O
progfile	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
if	O
(	O
errno	O
!=	O
ENOENT	int
)	O
mu_diag_funcall	function
(	O
MU_DIAG_NOTICE	O
,	O
"stat"	pointer
,	O
progfile	pointer
,	O
errno	O
)	O
;	O
free	function
(	O
progfile	pointer
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_script_init	function
(	O
scr	pointer
->	O
scr	pointer
,	O
progfile	pointer
,	O
script_env	array
,	O
&	O
sd	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"initialization of script %s failed: %s"	pointer
)	O
,	O
progfile	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
{	O
if	O
(	O
mu_script_sieve_log	int
)	O
mu_script_log_enable	function
(	O
scr	pointer
->	O
scr	pointer
,	O
sd	pointer
,	O
clos	pointer
->	O
auth	pointer
->	O
name	pointer
,	O
message_id_header	pointer
)	O
;	O
rc	int
=	O
mu_script_process_msg	function
(	O
scr	pointer
->	O
scr	pointer
,	O
sd	pointer
,	O
clos	pointer
->	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"script %s failed: %s"	pointer
)	O
,	O
progfile	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_script_done	function
(	O
scr	pointer
->	O
scr	pointer
,	O
sd	pointer
)	O
;	O
}	O
free	function
(	O
progfile	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mda_filter_message	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
)	O
{	O
if	O
(	O
script_list	pointer
)	O
{	O
mu_attribute_t	pointer
attr	pointer
;	O
struct	O
apply_script_closure	struct
clos	pointer
;	O
int	O
rc	int
;	O
clos	pointer
.	O
auth	pointer
=	O
auth	pointer
;	O
clos	pointer
.	O
msg	pointer
=	O
msg	pointer
;	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
mu_attribute_unset_deleted	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
mda_switch_user_id	function
(	O
auth	pointer
,	O
1	int
)	O
)	O
return	O
MDA_FILTER_FAILURE	int
;	O
chdir	function
(	O
auth	pointer
->	O
dir	pointer
)	O
;	O
rc	int
=	O
mu_list_foreach	function
(	O
script_list	pointer
,	O
apply_script	function
,	O
&	O
clos	pointer
)	O
;	O
chdir	function
(	O
"/"	pointer
)	O
;	O
if	O
(	O
mda_switch_user_id	function
(	O
auth	pointer
,	O
0	int
)	O
)	O
return	O
MDA_FILTER_FAILURE	int
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_attribute_t	pointer
attr	pointer
;	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
mu_attribute_is_deleted	function
(	O
attr	pointer
)	O
)	O
return	O
MDA_FILTER_FILTERED	int
;	O
}	O
else	O
return	O
MDA_FILTER_FAILURE	int
;	O
}	O
return	O
MDA_FILTER_OK	int
;	O
}	O
static	O
struct	O
mu_cfg_param	struct
filter_cfg_param	array
[	O
]	O
=	O
{	O
{	O
"language"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_script_language	function
,	O
N_	O
(	O
"Set script language."	pointer
)	O
,	O
N_	O
(	O
"arg: sieve|python|scheme"	pointer
)	O
}	O
,	O
{	O
"pattern"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_script_pattern	function
,	O
N_	O
(	O
"Set script pattern."	pointer
)	O
,	O
N_	O
(	O
"arg: glob"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
void	O
mda_filter_cfg_init	function
(	O
void	O
)	O
{	O
struct	O
mu_cfg_section	int
*	O
section	struct
;	O
if	O
(	O
mu_create_canned_section	function
(	O
"filter"	pointer
,	O
&	O
section	struct
)	O
==	O
0	int
)	O
{	O
section	struct
->	O
docstring	pointer
=	O
N_	O
(	O
"Add new message filter."	pointer
)	O
;	O
mu_cfg_section_add_params	function
(	O
section	struct
,	O
filter_cfg_param	array
)	O
;	O
}	O
mu_cli_capa_register	function
(	O
&	O
mu_cli_capa_sieve	struct
)	O
;	O
}	O
