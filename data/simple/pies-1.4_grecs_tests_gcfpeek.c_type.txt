static	O
void	O
usage	function
(	O
const	O
char	O
*	O
arg	struct
,	O
FILE	struct
*	O
fp	pointer
,	O
int	O
code	int
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"usage: %s [-h] [-locus] [-delim=char] [-nodesc] [-nopath] [-reduce] [-match] [-root=path] file path\n"	pointer
,	O
arg	struct
)	O
;	O
exit	function
(	O
code	int
)	O
;	O
}	O
int	O
set_parser	function
(	O
const	O
char	O
*	O
arg	struct
)	O
{	O
grecs_parser_t	pointer
p	pointer
=	O
grecs_get_parser_by_type	function
(	O
arg	struct
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
grecs_parser_fun	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
progname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
char	O
*	O
path	pointer
=	O
NULL	O
;	O
char	O
*	O
file	pointer
=	O
NULL	O
;	O
struct	O
grecs_node	struct
*	O
tree	pointer
,	O
*	O
root	pointer
,	O
*	O
node	pointer
;	O
int	O
flags	int
=	O
GRECS_NODE_FLAG_DEFAULT	O
;	O
int	O
rc	int
=	O
2	int
;	O
int	O
reduce	int
=	O
0	int
;	O
int	O
match	int
=	O
0	int
;	O
char	O
*	O
root_path	pointer
=	O
NULL	O
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
arg	struct
=	O
*	O
++	O
argv	pointer
;	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-locus"	pointer
)	O
==	O
0	int
)	O
flags	int
|=	O
GRECS_NODE_FLAG_LOCUS	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
arg	struct
,	O
"-delim="	pointer
,	O
7	int
)	O
==	O
0	int
)	O
flags	int
|=	O
arg	struct
[	O
7	int
]	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-reduce"	pointer
)	O
==	O
0	int
)	O
reduce	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-match"	pointer
)	O
==	O
0	int
)	O
match	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-nodesc"	pointer
)	O
==	O
0	int
)	O
flags	int
&=	O
~	O
GRECS_NODE_FLAG_DESCEND	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-nopath"	pointer
)	O
==	O
0	int
)	O
flags	int
&=	O
~	O
GRECS_NODE_FLAG_PATH	int
;	O
else	O
if	O
(	O
strncmp	function
(	O
arg	struct
,	O
"-type="	pointer
,	O
6	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
set_parser	function
(	O
arg	struct
+	O
6	int
)	O
)	O
usage	function
(	O
progname	pointer
,	O
stderr	pointer
,	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
arg	struct
,	O
"-root="	pointer
,	O
6	int
)	O
==	O
0	int
)	O
root_path	pointer
=	O
arg	struct
+	O
6	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-strcat"	pointer
)	O
==	O
0	int
)	O
grecs_parser_options	int
|=	O
GRECS_OPTION_QUOTED_STRING_CONCAT	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-stradj"	pointer
)	O
==	O
0	int
)	O
grecs_parser_options	int
|=	O
GRECS_OPTION_ADJUST_STRING_LOCATIONS	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	struct
,	O
"-h"	pointer
)	O
==	O
0	int
)	O
usage	function
(	O
progname	pointer
,	O
stdout	pointer
,	O
0	int
)	O
;	O
else	O
if	O
(	O
arg	struct
[	O
0	int
]	O
==	O
'-'	O
)	O
usage	function
(	O
progname	pointer
,	O
stderr	pointer
,	O
1	int
)	O
;	O
else	O
if	O
(	O
file	pointer
)	O
{	O
if	O
(	O
path	pointer
)	O
usage	function
(	O
progname	pointer
,	O
stderr	pointer
,	O
1	int
)	O
;	O
else	O
path	pointer
=	O
arg	struct
;	O
}	O
else	O
file	pointer
=	O
arg	struct
;	O
}	O
if	O
(	O
!	O
file	pointer
||	O
!	O
path	pointer
||	O
argc	int
)	O
usage	function
(	O
progname	pointer
,	O
stderr	pointer
,	O
1	int
)	O
;	O
tree	pointer
=	O
grecs_parse	function
(	O
file	pointer
)	O
;	O
if	O
(	O
!	O
tree	pointer
)	O
exit	function
(	O
1	int
)	O
;	O
if	O
(	O
reduce	int
)	O
grecs_tree_reduce	function
(	O
tree	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
root_path	pointer
)	O
{	O
root	pointer
=	O
grecs_find_node	function
(	O
tree	pointer
,	O
root_path	pointer
)	O
;	O
if	O
(	O
!	O
root	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: node %s not found\n"	pointer
,	O
progname	pointer
,	O
root_path	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
root	pointer
=	O
tree	pointer
;	O
if	O
(	O
match	int
)	O
{	O
grecs_match_buf_t	pointer
match_buf	pointer
;	O
for	O
(	O
node	pointer
=	O
grecs_match_first	function
(	O
root	pointer
,	O
path	pointer
,	O
&	O
match_buf	pointer
)	O
;	O
node	pointer
;	O
node	pointer
=	O
grecs_match_next	function
(	O
match_buf	pointer
)	O
)	O
{	O
rc	int
=	O
0	int
;	O
grecs_print_node	function
(	O
node	pointer
,	O
flags	int
,	O
stdout	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stdout	pointer
)	O
;	O
}	O
grecs_match_buf_free	function
(	O
match_buf	pointer
)	O
;	O
}	O
else	O
{	O
for	O
(	O
node	pointer
=	O
root	pointer
;	O
node	pointer
;	O
node	pointer
=	O
node	pointer
->	O
next	pointer
)	O
{	O
node	pointer
=	O
grecs_find_node	function
(	O
node	pointer
,	O
path	pointer
)	O
;	O
if	O
(	O
!	O
node	pointer
)	O
break	O
;	O
rc	int
=	O
0	int
;	O
grecs_print_node	function
(	O
node	pointer
,	O
flags	int
,	O
stdout	pointer
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stdout	pointer
)	O
;	O
}	O
}	O
grecs_tree_free	function
(	O
tree	pointer
)	O
;	O
exit	function
(	O
rc	int
)	O
;	O
}	O
