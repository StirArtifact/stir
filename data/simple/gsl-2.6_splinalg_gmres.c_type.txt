typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
m	pointer
;	O
gsl_vector	struct
*	O
r	pointer
;	O
gsl_matrix	struct
*	O
H	pointer
;	O
gsl_vector	struct
*	O
tau	double
;	O
gsl_vector	struct
*	O
y	double
;	O
double	O
*	O
c	pointer
;	O
double	O
*	O
s	pointer
;	O
double	O
normr	pointer
;	O
}	O
gmres_state_t	struct
;	O
static	O
void	O
gmres_free	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
gmres_iterate	function
(	O
const	O
gsl_spmatrix	struct
*	O
A	pointer
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
const	O
double	O
tol	double
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
void	O
*	O
gmres_alloc	function
(	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
m	pointer
)	O
{	O
gmres_state_t	struct
*	O
state	pointer
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"matrix dimension n must be a positive integer"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gmres_state_t	struct
)	O
)	O
;	O
if	O
(	O
!	O
state	pointer
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate gmres state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
n	int
=	O
n	int
;	O
if	O
(	O
m	pointer
==	O
0	int
)	O
state	pointer
->	O
m	pointer
=	O
GSL_MIN	O
(	O
n	int
,	O
10	int
)	O
;	O
else	O
state	pointer
->	O
m	pointer
=	O
GSL_MIN	O
(	O
n	int
,	O
m	pointer
)	O
;	O
state	pointer
->	O
r	pointer
=	O
gsl_vector_alloc	function
(	O
n	int
)	O
;	O
if	O
(	O
!	O
state	pointer
->	O
r	pointer
)	O
{	O
gmres_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate r vector"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
H	pointer
=	O
gsl_matrix_alloc	function
(	O
n	int
,	O
state	pointer
->	O
m	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
state	pointer
->	O
H	pointer
)	O
{	O
gmres_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate H matrix"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
tau	double
=	O
gsl_vector_alloc	function
(	O
state	pointer
->	O
m	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
state	pointer
->	O
tau	double
)	O
{	O
gmres_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate tau vector"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
y	double
=	O
gsl_vector_alloc	function
(	O
state	pointer
->	O
m	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
state	pointer
->	O
y	double
)	O
{	O
gmres_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate y vector"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
c	pointer
=	O
malloc	function
(	O
state	pointer
->	O
m	pointer
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
state	pointer
->	O
s	pointer
=	O
malloc	function
(	O
state	pointer
->	O
m	pointer
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
!	O
state	pointer
->	O
c	pointer
||	O
!	O
state	pointer
->	O
s	pointer
)	O
{	O
gmres_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate Givens vectors"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
normr	pointer
=	O
0.0	int
;	O
return	O
state	pointer
;	O
}	O
static	O
void	O
gmres_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
gmres_state_t	struct
*	O
state	pointer
=	O
(	O
gmres_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
r	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
r	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
H	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
H	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
tau	double
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
tau	double
)	O
;	O
if	O
(	O
state	pointer
->	O
y	double
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
y	double
)	O
;	O
if	O
(	O
state	pointer
->	O
c	pointer
)	O
free	function
(	O
state	pointer
->	O
c	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
s	pointer
)	O
free	function
(	O
state	pointer
->	O
s	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
gmres_iterate	function
(	O
const	O
gsl_spmatrix	struct
*	O
A	pointer
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
const	O
double	O
tol	double
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
gmres_state_t	struct
*	O
state	pointer
=	O
(	O
gmres_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
N	int
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix does not match right hand side"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix does not match solution vector"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
state	pointer
->	O
n	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
const	O
size_t	long
maxit	long
=	O
state	pointer
->	O
m	pointer
;	O
const	O
double	O
normb	double
=	O
gsl_blas_dnrm2	function
(	O
b	double
)	O
;	O
const	O
double	O
reltol	double
=	O
tol	double
*	O
normb	double
;	O
double	O
normr	pointer
;	O
size_t	long
m	pointer
,	O
k	long
;	O
double	O
tau	double
;	O
gsl_matrix	struct
*	O
H	pointer
=	O
state	pointer
->	O
H	pointer
;	O
gsl_vector	struct
*	O
r	pointer
=	O
state	pointer
->	O
r	pointer
;	O
gsl_vector	struct
*	O
w	pointer
=	O
state	pointer
->	O
y	double
;	O
gsl_matrix_view	struct
Rm	struct
;	O
gsl_vector_view	struct
ym	struct
;	O
gsl_vector_view	struct
h0	struct
=	O
gsl_matrix_column	function
(	O
H	pointer
,	O
0	int
)	O
;	O
gsl_matrix_set_zero	function
(	O
H	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
r	pointer
,	O
b	double
)	O
;	O
gsl_spblas_dgemv	function
(	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
A	pointer
,	O
x	double
,	O
1.0	int
,	O
r	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
&	O
h0	struct
.	O
vector	struct
,	O
r	pointer
)	O
;	O
tau	double
=	O
gsl_linalg_householder_transform	function
(	O
&	O
h0	struct
.	O
vector	struct
)	O
;	O
gsl_vector_set	function
(	O
state	pointer
->	O
tau	double
,	O
0	int
,	O
tau	double
)	O
;	O
gsl_vector_set_zero	function
(	O
w	pointer
)	O
;	O
gsl_vector_set	function
(	O
w	pointer
,	O
0	int
,	O
gsl_vector_get	function
(	O
&	O
h0	struct
.	O
vector	struct
,	O
0	int
)	O
)	O
;	O
for	O
(	O
m	pointer
=	O
1	int
;	O
m	pointer
<=	O
maxit	long
;	O
++	O
m	pointer
)	O
{	O
size_t	long
j	long
=	O
m	pointer
-	O
1	int
;	O
double	O
c	pointer
,	O
s	pointer
;	O
gsl_vector_view	struct
vm	struct
=	O
gsl_matrix_column	function
(	O
H	pointer
,	O
m	pointer
)	O
;	O
gsl_vector_view	struct
vv	struct
=	O
gsl_vector_subvector	function
(	O
&	O
vm	struct
.	O
vector	struct
,	O
j	long
,	O
N	int
-	O
j	long
)	O
;	O
gsl_vector_view	struct
um	struct
=	O
gsl_matrix_subcolumn	function
(	O
H	pointer
,	O
j	long
,	O
j	long
,	O
N	int
-	O
j	long
)	O
;	O
gsl_vector_set_zero	function
(	O
&	O
vm	struct
.	O
vector	struct
)	O
;	O
gsl_vector_memcpy	function
(	O
&	O
vv	struct
.	O
vector	struct
,	O
&	O
um	struct
.	O
vector	struct
)	O
;	O
tau	double
=	O
gsl_vector_get	function
(	O
state	pointer
->	O
tau	double
,	O
j	long
)	O
;	O
gsl_vector_scale	function
(	O
&	O
vv	struct
.	O
vector	struct
,	O
-	O
tau	double
)	O
;	O
gsl_vector_set	function
(	O
&	O
vv	struct
.	O
vector	struct
,	O
0	int
,	O
1.0	int
-	O
tau	double
)	O
;	O
for	O
(	O
k	long
=	O
j	long
;	O
k	long
>	O
0	int
&&	O
k	long
--	O
;	O
)	O
{	O
gsl_vector_view	struct
uk	struct
=	O
gsl_matrix_subcolumn	function
(	O
H	pointer
,	O
k	long
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
gsl_vector_view	struct
vk	struct
=	O
gsl_vector_subvector	function
(	O
&	O
vm	struct
.	O
vector	struct
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
tau	double
=	O
gsl_vector_get	function
(	O
state	pointer
->	O
tau	double
,	O
k	long
)	O
;	O
gsl_linalg_householder_hv	function
(	O
tau	double
,	O
&	O
uk	struct
.	O
vector	struct
,	O
&	O
vk	struct
.	O
vector	struct
)	O
;	O
}	O
gsl_spblas_dgemv	function
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
A	pointer
,	O
&	O
vm	struct
.	O
vector	struct
,	O
0.0	int
,	O
r	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
&	O
vm	struct
.	O
vector	struct
,	O
r	pointer
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<=	O
j	long
;	O
++	O
k	long
)	O
{	O
gsl_vector_view	struct
uk	struct
=	O
gsl_matrix_subcolumn	function
(	O
H	pointer
,	O
k	long
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
gsl_vector_view	struct
vk	struct
=	O
gsl_vector_subvector	function
(	O
&	O
vm	struct
.	O
vector	struct
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
tau	double
=	O
gsl_vector_get	function
(	O
state	pointer
->	O
tau	double
,	O
k	long
)	O
;	O
gsl_linalg_householder_hv	function
(	O
tau	double
,	O
&	O
uk	struct
.	O
vector	struct
,	O
&	O
vk	struct
.	O
vector	struct
)	O
;	O
}	O
if	O
(	O
m	pointer
<	O
N	int
)	O
{	O
gsl_vector_view	struct
ump1	struct
=	O
gsl_matrix_subcolumn	function
(	O
H	pointer
,	O
m	pointer
,	O
m	pointer
,	O
N	int
-	O
m	pointer
)	O
;	O
tau	double
=	O
gsl_linalg_householder_transform	function
(	O
&	O
ump1	struct
.	O
vector	struct
)	O
;	O
gsl_vector_set	function
(	O
state	pointer
->	O
tau	double
,	O
j	long
+	O
1	int
,	O
tau	double
)	O
;	O
}	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
j	long
;	O
++	O
k	long
)	O
{	O
gsl_linalg_givens_gv	function
(	O
&	O
vm	struct
.	O
vector	struct
,	O
k	long
,	O
k	long
+	O
1	int
,	O
state	pointer
->	O
c	pointer
[	O
k	long
]	O
,	O
state	pointer
->	O
s	pointer
[	O
k	long
]	O
)	O
;	O
}	O
if	O
(	O
m	pointer
<	O
N	int
)	O
{	O
gsl_linalg_givens	function
(	O
gsl_vector_get	function
(	O
&	O
vm	struct
.	O
vector	struct
,	O
j	long
)	O
,	O
gsl_vector_get	function
(	O
&	O
vm	struct
.	O
vector	struct
,	O
j	long
+	O
1	int
)	O
,	O
&	O
c	pointer
,	O
&	O
s	pointer
)	O
;	O
state	pointer
->	O
c	pointer
[	O
j	long
]	O
=	O
c	pointer
;	O
state	pointer
->	O
s	pointer
[	O
j	long
]	O
=	O
s	pointer
;	O
gsl_linalg_givens_gv	function
(	O
&	O
vm	struct
.	O
vector	struct
,	O
j	long
,	O
j	long
+	O
1	int
,	O
c	pointer
,	O
s	pointer
)	O
;	O
gsl_linalg_givens_gv	function
(	O
w	pointer
,	O
j	long
,	O
j	long
+	O
1	int
,	O
c	pointer
,	O
s	pointer
)	O
;	O
}	O
normr	pointer
=	O
fabs	function
(	O
gsl_vector_get	function
(	O
w	pointer
,	O
j	long
+	O
1	int
)	O
)	O
;	O
if	O
(	O
normr	pointer
<=	O
reltol	double
)	O
{	O
break	O
;	O
}	O
}	O
if	O
(	O
m	pointer
>	O
maxit	long
)	O
m	pointer
--	O
;	O
Rm	struct
=	O
gsl_matrix_submatrix	function
(	O
H	pointer
,	O
0	int
,	O
1	int
,	O
m	pointer
,	O
m	pointer
)	O
;	O
ym	struct
=	O
gsl_vector_subvector	function
(	O
w	pointer
,	O
0	int
,	O
m	pointer
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
Rm	struct
.	O
matrix	struct
,	O
&	O
ym	struct
.	O
vector	struct
)	O
;	O
gsl_vector_set_zero	function
(	O
r	pointer
)	O
;	O
for	O
(	O
k	long
=	O
m	pointer
;	O
k	long
>	O
0	int
&&	O
k	long
--	O
;	O
)	O
{	O
double	O
ymk	double
=	O
gsl_vector_get	function
(	O
&	O
ym	struct
.	O
vector	struct
,	O
k	long
)	O
;	O
gsl_vector_view	struct
uk	struct
=	O
gsl_matrix_subcolumn	function
(	O
H	pointer
,	O
k	long
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
gsl_vector_view	struct
rk	struct
=	O
gsl_vector_subvector	function
(	O
r	pointer
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
gsl_vector_set	function
(	O
r	pointer
,	O
k	long
,	O
gsl_vector_get	function
(	O
r	pointer
,	O
k	long
)	O
+	O
ymk	double
)	O
;	O
tau	double
=	O
gsl_vector_get	function
(	O
state	pointer
->	O
tau	double
,	O
k	long
)	O
;	O
gsl_linalg_householder_hv	function
(	O
tau	double
,	O
&	O
uk	struct
.	O
vector	struct
,	O
&	O
rk	struct
.	O
vector	struct
)	O
;	O
}	O
gsl_vector_add	function
(	O
x	double
,	O
r	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
r	pointer
,	O
b	double
)	O
;	O
gsl_spblas_dgemv	function
(	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
A	pointer
,	O
x	double
,	O
1.0	int
,	O
r	pointer
)	O
;	O
normr	pointer
=	O
gsl_blas_dnrm2	function
(	O
r	pointer
)	O
;	O
if	O
(	O
normr	pointer
<=	O
reltol	double
)	O
status	int
=	O
GSL_SUCCESS	int
;	O
else	O
status	int
=	O
GSL_CONTINUE	int
;	O
state	pointer
->	O
normr	pointer
=	O
normr	pointer
;	O
return	O
status	int
;	O
}	O
}	O
static	O
double	O
gmres_normr	function
(	O
const	O
void	O
*	O
vstate	pointer
)	O
{	O
const	O
gmres_state_t	struct
*	O
state	pointer
=	O
(	O
const	O
gmres_state_t	struct
*	O
)	O
vstate	pointer
;	O
return	O
state	pointer
->	O
normr	pointer
;	O
}	O
static	O
const	O
gsl_splinalg_itersolve_type	struct
gmres_type	struct
=	O
{	O
"gmres"	pointer
,	O
&	O
gmres_alloc	function
,	O
&	O
gmres_iterate	function
,	O
&	O
gmres_normr	function
,	O
&	O
gmres_free	function
}	O
;	O
const	O
gsl_splinalg_itersolve_type	struct
*	O
gsl_splinalg_itersolve_gmres	pointer
=	O
&	O
gmres_type	struct
;	O
