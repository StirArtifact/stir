static	O
int	O
one	function
(	O
const	O
struct	O
dirent	struct
*	O
unused	pointer
)	O
{	O
return	O
1	int
;	O
}	O
struct	O
passwd	struct
*	O
pass	pointer
;	O
int	O
numVisDirs	int
,	O
firstVisDir	int
,	O
selectedDir	int
,	O
totalDirs	pointer
;	O
int	O
numVisFiles	int
,	O
firstVisFile	int
,	O
selectedFile	int
,	O
totalFiles	pointer
;	O
char	O
*	O
*	O
dirs	pointer
;	O
char	O
*	O
*	O
files	pointer
;	O
struct	O
linestruct	struct
*	O
lines	array
[	O
MAX_LINES	int
]	O
;	O
FILE	struct
*	O
open_file	pointer
;	O
void	O
initDirView	function
(	O
)	O
{	O
numVisDirs	int
=	O
SCREEN_H	int
-	O
9	int
;	O
firstVisDir	int
=	O
0	int
;	O
selectedDir	int
=	O
-	O
1	int
;	O
totalDirs	pointer
=	O
0	int
;	O
MAX_DIR_NAME_LEN	int
=	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
8	int
;	O
}	O
char	O
*	O
pathAppend	function
(	O
char	O
*	O
head	pointer
,	O
char	O
*	O
tail	pointer
)	O
{	O
if	O
(	O
!	O
tail	pointer
)	O
return	O
NULL	O
;	O
int	O
len	int
;	O
char	O
*	O
str	pointer
;	O
if	O
(	O
!	O
head	pointer
)	O
{	O
if	O
(	O
tail	pointer
[	O
0	int
]	O
!=	O
'/'	O
)	O
return	O
NULL	O
;	O
goto	O
tail_only	O
;	O
}	O
else	O
if	O
(	O
tail	pointer
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
goto	O
tail_only	O
;	O
}	O
else	O
{	O
len	int
=	O
strlen	function
(	O
head	pointer
)	O
+	O
strlen	function
(	O
tail	pointer
)	O
;	O
str	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
len	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
str	pointer
)	O
return	O
NULL	O
;	O
strcpy	function
(	O
str	pointer
,	O
head	pointer
)	O
;	O
strcat	function
(	O
str	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
str	pointer
,	O
tail	pointer
)	O
;	O
}	O
return	O
str	pointer
;	O
tail_only	O
:	O
len	int
=	O
strlen	function
(	O
tail	pointer
)	O
;	O
str	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
str	pointer
)	O
return	O
NULL	O
;	O
strcpy	function
(	O
str	pointer
,	O
tail	pointer
)	O
;	O
return	O
str	pointer
;	O
}	O
char	O
*	O
createDocTitle	function
(	O
char	O
*	O
open_file_name	pointer
)	O
{	O
char	O
*	O
name	pointer
=	O
strrchr	function
(	O
open_file_name	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
name	pointer
=	O
open_file_name	pointer
;	O
else	O
name	pointer
++	O
;	O
if	O
(	O
documentTitle	pointer
&&	O
strcmp	function
(	O
documentTitle	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
documentTitle	pointer
;	O
if	O
(	O
documentTitle	pointer
)	O
free	function
(	O
documentTitle	pointer
)	O
;	O
documentTitle	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
documentTitle	pointer
)	O
{	O
msgBox	function
(	O
"Insufficient memory"	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
NULL	O
;	O
}	O
strcpy	function
(	O
documentTitle	pointer
,	O
name	pointer
)	O
;	O
return	O
documentTitle	pointer
;	O
}	O
char	O
*	O
openSaveFile	function
(	O
OPEN_SAVE	enum
openSave	enum
,	O
int	O
showDialog	int
,	O
char	O
*	O
open_file_name	pointer
)	O
{	O
x	int
=	O
2	int
;	O
y	int
=	O
2	int
;	O
h	int
=	O
SCREEN_H	int
-	O
1	int
;	O
w	int
=	O
SCREEN_W	int
-	O
1	int
;	O
char	O
inputName	O
[	O
MAX_DIR_NAME_LEN	int
]	O
;	O
int	O
selChar	int
;	O
int	O
sel	int
;	O
char	O
*	O
slash	pointer
=	O
NULL	O
;	O
char	O
*	O
name	pointer
;	O
switch	O
(	O
showDialog	int
)	O
{	O
case	O
(	O
YES	int
)	O
:	O
if	O
(	O
dirs	pointer
)	O
{	O
free	function
(	O
dirs	pointer
)	O
;	O
dirs	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
files	pointer
)	O
{	O
free	function
(	O
files	pointer
)	O
;	O
files	pointer
=	O
NULL	O
;	O
}	O
totalDirs	pointer
=	O
0	int
;	O
totalFiles	pointer
=	O
0	int
;	O
if	O
(	O
open_file_name	pointer
)	O
slash	pointer
=	O
strrchr	function
(	O
open_file_name	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
open_file_name	pointer
&&	O
slash	pointer
)	O
{	O
char	O
*	O
tmp	pointer
;	O
tmp	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
slash	pointer
-	O
open_file_name	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
{	O
msgBox	function
(	O
"Insufficient memory"	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memcpy	function
(	O
tmp	pointer
,	O
open_file_name	pointer
,	O
slash	pointer
-	O
open_file_name	pointer
)	O
;	O
tmp	pointer
[	O
slash	pointer
-	O
open_file_name	pointer
]	O
=	O
'\0'	O
;	O
int	O
res	int
=	O
scanDir	function
(	O
tmp	pointer
,	O
&	O
dirs	pointer
,	O
&	O
files	pointer
,	O
&	O
totalDirs	pointer
,	O
&	O
totalFiles	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
!	O
res	int
)	O
return	O
NULL	O
;	O
}	O
else	O
if	O
(	O
(	O
pass	pointer
=	O
getpwuid	function
(	O
geteuid	function
(	O
)	O
)	O
)	O
)	O
{	O
if	O
(	O
!	O
scanDir	function
(	O
pass	pointer
->	O
pw_dir	pointer
,	O
&	O
dirs	pointer
,	O
&	O
files	pointer
,	O
&	O
totalDirs	pointer
,	O
&	O
totalFiles	pointer
)	O
)	O
return	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
scanDir	function
(	O
"."	pointer
,	O
&	O
dirs	pointer
,	O
&	O
files	pointer
,	O
&	O
totalDirs	pointer
,	O
&	O
totalFiles	pointer
)	O
)	O
return	O
NULL	O
;	O
}	O
sel	int
=	O
(	O
openSave	enum
==	O
SAVE	int
)	O
?	O
1	int
:	O
0	int
;	O
if	O
(	O
openSave	enum
==	O
OPEN	int
)	O
strcpy	function
(	O
inputName	O
,	O
""	pointer
)	O
;	O
else	O
{	O
if	O
(	O
documentTitle	pointer
)	O
strcpy	function
(	O
inputName	O
,	O
documentTitle	pointer
)	O
;	O
else	O
strcpy	function
(	O
inputName	O
,	O
DEFAULT_TITLE	pointer
)	O
;	O
}	O
selChar	int
=	O
strlen	function
(	O
inputName	O
)	O
;	O
numVisDirs	int
=	O
h	int
-	O
x	int
-	O
3	int
;	O
firstVisDir	int
=	O
0	int
;	O
selectedDir	int
=	O
0	int
;	O
refreshDirView	function
(	O
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
1	int
)	O
;	O
printf	function
(	O
"File: "	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
printf	function
(	O
"%s%*s"	pointer
,	O
inputName	O
,	O
(	O
int	O
)	O
(	O
w	int
-	O
y	int
-	O
strlen	function
(	O
inputName	O
)	O
-	O
9	int
)	O
,	O
" "	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
(	O
int	O
)	O
(	O
y	int
+	O
strlen	function
(	O
inputName	O
)	O
+	O
7	int
)	O
)	O
;	O
if	O
(	O
openSave	enum
==	O
OPEN	int
)	O
{	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
int	O
pos	int
=	O
firstVisDir	int
+	O
selectedDir	int
;	O
WRAP_DIR_OUTPUT	O
;	O
}	O
fflush	function
(	O
stdout	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
char	O
*	O
ch	pointer
=	O
getKey	function
(	O
)	O
;	O
switch	O
(	O
ch	pointer
[	O
0	int
]	O
)	O
{	O
case	O
(	O
'a'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
&&	O
CTRL	int
)	O
goto	O
do_home	O
;	O
goto	O
do_enter_char	O
;	O
break	O
;	O
case	O
(	O
HOME_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
do_home	O
:	O
if	O
(	O
sel	int
==	O
1	int
)	O
{	O
selChar	int
=	O
0	int
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
'e'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
&&	O
CTRL	int
)	O
goto	O
do_end	O
;	O
goto	O
do_enter_char	O
;	O
break	O
;	O
case	O
(	O
END_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
do_end	O
:	O
if	O
(	O
sel	int
==	O
1	int
)	O
{	O
selChar	int
=	O
strlen	function
(	O
inputName	O
)	O
;	O
if	O
(	O
sel	int
>	O
w	int
-	O
y	int
-	O
9	int
)	O
sel	int
--	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
'd'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
3	int
&&	O
CTRL	int
)	O
goto	O
do_del	O
;	O
goto	O
do_enter_char	O
;	O
break	O
;	O
case	O
(	O
DEL_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
3	int
)	O
break	O
;	O
do_del	O
:	O
if	O
(	O
sel	int
==	O
1	int
)	O
{	O
if	O
(	O
selChar	int
==	O
strlen	function
(	O
inputName	O
)	O
)	O
break	O
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
selChar	int
;	O
i	int
<	O
strlen	function
(	O
inputName	O
)	O
-	O
1	int
;	O
i	int
++	O
)	O
inputName	O
[	O
i	int
]	O
=	O
inputName	O
[	O
i	int
+	O
1	int
]	O
;	O
inputName	O
[	O
i	int
]	O
=	O
'\0'	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
7	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%*s"	pointer
,	O
w	int
-	O
y	int
-	O
9	int
,	O
" "	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
7	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s"	pointer
,	O
inputName	O
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
BACKSPACE_KEY	int
)	O
:	O
if	O
(	O
sel	int
==	O
1	int
)	O
{	O
if	O
(	O
selChar	int
==	O
0	int
)	O
break	O
;	O
int	O
i	int
;	O
if	O
(	O
selChar	int
==	O
strlen	function
(	O
inputName	O
)	O
)	O
{	O
i	int
=	O
strlen	function
(	O
inputName	O
)	O
-	O
1	int
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
selChar	int
;	O
i	int
<=	O
strlen	function
(	O
inputName	O
)	O
;	O
i	int
++	O
)	O
inputName	O
[	O
i	int
-	O
1	int
]	O
=	O
inputName	O
[	O
i	int
]	O
;	O
}	O
inputName	O
[	O
i	int
]	O
=	O
'\0'	O
;	O
selChar	int
--	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
7	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%*s"	pointer
,	O
w	int
-	O
y	int
-	O
9	int
,	O
" "	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
7	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s"	pointer
,	O
inputName	O
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
break	O
;	O
case	O
(	O
TAB_KEY	int
)	O
:	O
sel	int
=	O
(	O
sel	int
==	O
0	int
)	O
?	O
1	int
:	O
0	int
;	O
int	O
pos	int
=	O
firstVisDir	int
+	O
selectedDir	int
;	O
if	O
(	O
sel	int
==	O
1	int
)	O
{	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
WRAP_DIR_OUTPUT	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
}	O
else	O
{	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
WRAP_DIR_OUTPUT	O
;	O
}	O
break	O
;	O
case	O
(	O
'b'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
&&	O
CTRL	int
)	O
goto	O
do_left	O
;	O
goto	O
do_enter_char	O
;	O
break	O
;	O
case	O
(	O
LEFT_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_left	O
:	O
if	O
(	O
sel	int
==	O
1	int
)	O
{	O
if	O
(	O
selChar	int
==	O
0	int
)	O
break	O
;	O
selChar	int
--	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
selectedDir	int
>=	O
numVisDirs	int
)	O
{	O
int	O
pos	int
=	O
firstVisDir	int
+	O
selectedDir	int
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
WRAP_DIR_OUTPUT	O
;	O
selectedDir	int
-=	O
numVisDirs	int
;	O
pos	int
-=	O
numVisDirs	int
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
if	O
(	O
pos	int
>=	O
totalDirs	pointer
)	O
{	O
OUTPUT_NAME	O
(	O
files	pointer
[	O
pos	int
-	O
totalDirs	pointer
]	O
)	O
;	O
strcpy	function
(	O
inputName	O
,	O
files	pointer
[	O
pos	int
-	O
totalDirs	pointer
]	O
)	O
;	O
}	O
else	O
{	O
OUTPUT_NAME	O
(	O
dirs	pointer
[	O
pos	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
firstVisDir	int
==	O
0	int
)	O
break	O
;	O
selectedDir	int
+=	O
numVisDirs	int
;	O
firstVisDir	int
-=	O
numVisDirs	int
;	O
refreshDirView	function
(	O
)	O
;	O
}	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
1	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"File: "	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s%*s"	pointer
,	O
inputName	O
,	O
(	O
int	O
)	O
(	O
w	int
-	O
y	int
-	O
strlen	function
(	O
inputName	O
)	O
-	O
9	int
)	O
,	O
" "	pointer
)	O
;	O
if	O
(	O
sel	int
==	O
1	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
'f'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
&&	O
CTRL	int
)	O
goto	O
do_right	O
;	O
goto	O
do_enter_char	O
;	O
break	O
;	O
case	O
(	O
RIGHT_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_right	O
:	O
if	O
(	O
sel	int
==	O
1	int
)	O
{	O
if	O
(	O
selChar	int
==	O
strlen	function
(	O
inputName	O
)	O
)	O
break	O
;	O
if	O
(	O
selChar	int
>=	O
w	int
-	O
y	int
-	O
9	int
)	O
break	O
;	O
selChar	int
++	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
selectedDir	int
<	O
numVisDirs	int
)	O
{	O
int	O
pos	int
=	O
firstVisDir	int
+	O
selectedDir	int
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
WRAP_DIR_OUTPUT	O
;	O
selectedDir	int
+=	O
numVisDirs	int
;	O
pos	int
+=	O
numVisDirs	int
;	O
if	O
(	O
pos	int
>=	O
(	O
totalDirs	pointer
+	O
totalFiles	pointer
)	O
)	O
{	O
int	O
h	int
=	O
(	O
totalDirs	pointer
+	O
totalFiles	pointer
)	O
-	O
pos	int
-	O
1	int
;	O
pos	int
+=	O
h	int
;	O
selectedDir	int
+=	O
h	int
;	O
}	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
if	O
(	O
pos	int
>=	O
totalDirs	pointer
)	O
{	O
OUTPUT_NAME	O
(	O
files	pointer
[	O
pos	int
-	O
totalDirs	pointer
]	O
)	O
;	O
strcpy	function
(	O
inputName	O
,	O
files	pointer
[	O
pos	int
-	O
totalDirs	pointer
]	O
)	O
;	O
}	O
else	O
{	O
OUTPUT_NAME	O
(	O
dirs	pointer
[	O
pos	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
firstVisDir	int
+	O
(	O
numVisDirs	int
*	O
2	int
)	O
)	O
>=	O
(	O
totalDirs	pointer
+	O
totalFiles	pointer
)	O
)	O
break	O
;	O
selectedDir	int
-=	O
numVisDirs	int
;	O
firstVisDir	int
+=	O
numVisDirs	int
;	O
refreshDirView	function
(	O
)	O
;	O
}	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
1	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"File: "	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s%*s"	pointer
,	O
inputName	O
,	O
(	O
int	O
)	O
(	O
w	int
-	O
y	int
-	O
strlen	function
(	O
inputName	O
)	O
-	O
9	int
)	O
,	O
" "	pointer
)	O
;	O
if	O
(	O
sel	int
==	O
1	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
'g'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
&&	O
CTRL	int
)	O
goto	O
do_esc	O
;	O
goto	O
do_enter_char	O
;	O
break	O
;	O
case	O
(	O
ESC_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
break	O
;	O
do_esc	O
:	O
refreshView	function
(	O
)	O
;	O
return	O
0	int
;	O
break	O
;	O
case	O
(	O
ENTER_KEY	int
)	O
:	O
if	O
(	O
sel	int
==	O
1	int
)	O
{	O
if	O
(	O
openSave	enum
==	O
SAVE	int
)	O
{	O
struct	O
stat	struct
st	struct
;	O
int	O
x	int
=	O
lstat	function
(	O
inputName	O
,	O
&	O
st	struct
)	O
;	O
if	O
(	O
x	int
!=	O
-	O
1	int
&&	O
S_ISDIR	O
(	O
st	struct
.	O
st_mode	int
)	O
)	O
{	O
int	O
i	int
=	O
msgBox	function
(	O
"File already exists. Overwrite?"	pointer
,	O
YES	int
|	O
NO	int
,	O
CONFIRM	int
)	O
;	O
if	O
(	O
i	int
==	O
NO	int
)	O
{	O
refreshDirView	function
(	O
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
1	int
)	O
;	O
printf	function
(	O
"File: "	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s%*s"	pointer
,	O
inputName	O
,	O
(	O
int	O
)	O
(	O
w	int
-	O
y	int
-	O
strlen	function
(	O
inputName	O
)	O
-	O
9	int
)	O
,	O
" "	pointer
)	O
;	O
if	O
(	O
sel	int
==	O
1	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
}	O
}	O
goto	O
saveFileAnGo	O
;	O
}	O
else	O
{	O
goto	O
openFileAndGo	O
;	O
}	O
}	O
int	O
index	int
=	O
firstVisDir	int
+	O
selectedDir	int
;	O
if	O
(	O
index	int
<	O
totalDirs	pointer
)	O
{	O
scanDir	function
(	O
dirs	pointer
[	O
index	int
]	O
,	O
&	O
dirs	pointer
,	O
&	O
files	pointer
,	O
&	O
totalDirs	pointer
,	O
&	O
totalFiles	pointer
)	O
;	O
firstVisDir	int
=	O
0	int
;	O
selectedDir	int
=	O
0	int
;	O
refreshDirView	function
(	O
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
1	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"File: "	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
printf	function
(	O
"%s%*s"	pointer
,	O
inputName	O
,	O
(	O
int	O
)	O
(	O
w	int
-	O
y	int
-	O
strlen	function
(	O
inputName	O
)	O
-	O
9	int
)	O
,	O
" "	pointer
)	O
;	O
if	O
(	O
sel	int
==	O
1	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
openSave	enum
==	O
OPEN	int
)	O
goto	O
openFileAndGo	O
;	O
else	O
{	O
int	O
i	int
=	O
msgBox	function
(	O
"File already exists. Overwrite?"	pointer
,	O
YES	int
|	O
NO	int
,	O
CONFIRM	int
)	O
;	O
if	O
(	O
i	int
==	O
NO	int
)	O
{	O
refreshDirView	function
(	O
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
1	int
)	O
;	O
printf	function
(	O
"File: "	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s%*s"	pointer
,	O
inputName	O
,	O
(	O
int	O
)	O
(	O
w	int
-	O
y	int
-	O
strlen	function
(	O
inputName	O
)	O
-	O
9	int
)	O
,	O
" "	pointer
)	O
;	O
if	O
(	O
sel	int
==	O
1	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
}	O
}	O
goto	O
saveFileAnGo	O
;	O
}	O
break	O
;	O
case	O
(	O
'p'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
&&	O
CTRL	int
)	O
goto	O
do_up	O
;	O
goto	O
do_enter_char	O
;	O
break	O
;	O
case	O
(	O
UP_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_up	O
:	O
if	O
(	O
sel	int
==	O
1	int
)	O
break	O
;	O
if	O
(	O
selectedDir	int
==	O
0	int
)	O
{	O
if	O
(	O
firstVisDir	int
==	O
0	int
)	O
break	O
;	O
firstVisDir	int
-=	O
numVisDirs	int
;	O
selectedDir	int
=	O
numVisDirs	int
-	O
1	int
;	O
refreshDirView	function
(	O
)	O
;	O
}	O
else	O
{	O
int	O
pos	int
=	O
firstVisDir	int
+	O
selectedDir	int
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
WRAP_DIR_OUTPUT	O
;	O
selectedDir	int
--	O
;	O
pos	int
--	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
WRAP_DIR_OUTPUT	O
;	O
if	O
(	O
pos	int
>=	O
totalDirs	pointer
)	O
{	O
OUTPUT_NAME	O
(	O
files	pointer
[	O
pos	int
-	O
totalDirs	pointer
]	O
)	O
;	O
strcpy	function
(	O
inputName	O
,	O
files	pointer
[	O
pos	int
-	O
totalDirs	pointer
]	O
)	O
;	O
}	O
else	O
{	O
OUTPUT_NAME	O
(	O
dirs	pointer
[	O
pos	int
]	O
)	O
;	O
}	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
7	int
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s%*s"	pointer
,	O
inputName	O
,	O
(	O
int	O
)	O
(	O
w	int
-	O
y	int
-	O
strlen	function
(	O
inputName	O
)	O
-	O
9	int
)	O
,	O
" "	pointer
)	O
;	O
if	O
(	O
sel	int
==	O
1	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
(	O
'n'	O
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
&&	O
CTRL	int
)	O
goto	O
do_down	O
;	O
goto	O
do_enter_char	O
;	O
break	O
;	O
case	O
(	O
DOWN_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_down	O
:	O
if	O
(	O
sel	int
==	O
1	int
)	O
break	O
;	O
if	O
(	O
selectedDir	int
==	O
(	O
numVisDirs	int
*	O
2	int
)	O
-	O
1	int
)	O
{	O
if	O
(	O
(	O
firstVisDir	int
+	O
(	O
numVisDirs	int
*	O
2	int
)	O
)	O
<	O
(	O
totalDirs	pointer
+	O
totalFiles	pointer
)	O
)	O
{	O
firstVisDir	int
+=	O
numVisDirs	int
;	O
selectedDir	int
=	O
numVisDirs	int
;	O
refreshDirView	function
(	O
)	O
;	O
if	O
(	O
openSave	enum
==	O
SAVE	int
)	O
{	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
1	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"File: "	pointer
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s%*s"	pointer
,	O
inputName	O
,	O
(	O
int	O
)	O
(	O
w	int
-	O
y	int
-	O
strlen	function
(	O
inputName	O
)	O
-	O
9	int
)	O
,	O
" "	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
}	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
int	O
pos	int
=	O
firstVisDir	int
+	O
selectedDir	int
;	O
if	O
(	O
pos	int
>=	O
(	O
totalDirs	pointer
+	O
totalFiles	pointer
-	O
1	int
)	O
)	O
break	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
WRAP_DIR_OUTPUT	O
;	O
selectedDir	int
++	O
;	O
pos	int
++	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
if	O
(	O
pos	int
>=	O
totalDirs	pointer
)	O
{	O
OUTPUT_NAME	O
(	O
files	pointer
[	O
pos	int
-	O
totalDirs	pointer
]	O
)	O
;	O
strcpy	function
(	O
inputName	O
,	O
files	pointer
[	O
pos	int
-	O
totalDirs	pointer
]	O
)	O
;	O
}	O
else	O
{	O
OUTPUT_NAME	O
(	O
dirs	pointer
[	O
pos	int
]	O
)	O
;	O
}	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
7	int
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s%*s"	pointer
,	O
inputName	O
,	O
(	O
int	O
)	O
(	O
w	int
-	O
y	int
-	O
strlen	function
(	O
inputName	O
)	O
-	O
9	int
)	O
,	O
" "	pointer
)	O
;	O
if	O
(	O
sel	int
==	O
1	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
break	O
;	O
default	O
:	O
do_enter_char	O
:	O
if	O
(	O
sel	int
==	O
1	int
)	O
{	O
if	O
(	O
strlen	function
(	O
inputName	O
)	O
>=	O
w	int
-	O
y	int
-	O
9	int
)	O
break	O
;	O
int	O
i	int
;	O
inputName	O
[	O
strlen	function
(	O
inputName	O
)	O
+	O
1	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
i	int
=	O
strlen	function
(	O
inputName	O
)	O
;	O
i	int
>	O
selChar	int
;	O
i	int
--	O
)	O
inputName	O
[	O
i	int
]	O
=	O
inputName	O
[	O
i	int
-	O
1	int
]	O
;	O
inputName	O
[	O
selChar	int
++	O
]	O
=	O
(	O
CAPS	int
||	O
SHIFT	int
)	O
?	O
ch	pointer
[	O
0	int
]	O
-	O
32	int
:	O
ch	pointer
[	O
0	int
]	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
7	int
)	O
;	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%s%*s"	pointer
,	O
inputName	O
,	O
(	O
int	O
)	O
(	O
w	int
-	O
y	int
-	O
strlen	function
(	O
inputName	O
)	O
-	O
9	int
)	O
,	O
" "	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
selChar	int
+	O
7	int
)	O
;	O
}	O
break	O
;	O
}	O
}	O
break	O
;	O
case	O
(	O
NO	int
)	O
:	O
strcpy	function
(	O
inputName	O
,	O
open_file_name	pointer
)	O
;	O
if	O
(	O
!	O
cwd	pointer
)	O
cwd	pointer
=	O
getcwd	function
(	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
openSave	enum
==	O
OPEN	int
)	O
goto	O
openFileAndGo	O
;	O
else	O
goto	O
saveFileAnGo	O
;	O
break	O
;	O
}	O
saveFileAnGo	O
:	O
name	pointer
=	O
pathAppend	function
(	O
cwd	pointer
,	O
inputName	O
)	O
;	O
if	O
(	O
!	O
_saveFile	function
(	O
name	pointer
)	O
)	O
{	O
free	function
(	O
name	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
FILE_STATE	enum
=	O
SAVED	int
;	O
NEW_FILE	int
=	O
0	int
;	O
free	function
(	O
name	pointer
)	O
;	O
return	O
open_file_name	pointer
;	O
openFileAndGo	O
:	O
name	pointer
=	O
pathAppend	function
(	O
cwd	pointer
,	O
inputName	O
)	O
;	O
if	O
(	O
!	O
_openFile	function
(	O
name	pointer
)	O
)	O
{	O
free	function
(	O
name	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
FILE_STATE	enum
=	O
OPENED	int
;	O
NEW_FILE	int
=	O
0	int
;	O
free	function
(	O
name	pointer
)	O
;	O
return	O
open_file_name	pointer
;	O
}	O
void	O
refreshDirView	function
(	O
)	O
{	O
if	O
(	O
strlen	function
(	O
cwd	pointer
)	O
>	O
w	int
-	O
y	int
-	O
5	int
)	O
{	O
char	O
*	O
tmp	pointer
;	O
tmp	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
w	int
-	O
y	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
{	O
msgBox	function
(	O
"Insufficient memory"	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
;	O
}	O
int	O
i	int
,	O
k	int
,	O
j	int
=	O
w	int
-	O
y	int
-	O
5	int
;	O
for	O
(	O
i	int
=	O
strlen	function
(	O
cwd	pointer
)	O
,	O
k	int
=	O
j	int
;	O
k	int
>	O
1	int
;	O
i	int
--	O
,	O
k	int
--	O
)	O
tmp	pointer
[	O
k	int
]	O
=	O
cwd	pointer
[	O
i	int
]	O
;	O
tmp	pointer
[	O
0	int
]	O
=	O
'.'	O
;	O
tmp	pointer
[	O
1	int
]	O
=	O
'.'	O
;	O
drawBox	function
(	O
x	int
,	O
y	int
,	O
h	int
,	O
w	int
,	O
tmp	pointer
,	O
YES	int
,	O
0	int
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
else	O
drawBox	function
(	O
x	int
,	O
y	int
,	O
h	int
,	O
w	int
,	O
cwd	pointer
,	O
YES	int
,	O
0	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
1	int
,	O
y	int
+	O
1	int
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"[ENTER]: Open dir/file [C-p C-n C-f C-b]: Navigate [C-g]: Cancel"	pointer
)	O
;	O
else	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"[ENTER]: Open dir/file [C-p C-n C-f C-b]: Navigate [ESC]: Cancel"	pointer
)	O
;	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"[ENTER]: Open dir/file  [ARROWS]: Navigate  [ESC]: Cancel"	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
2	int
,	O
y	int
+	O
1	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"File: "	pointer
)	O
;	O
int	O
i	int
=	O
firstVisDir	int
;	O
int	O
j	int
=	O
0	int
;	O
int	O
k	int
=	O
0	int
;	O
int	O
curX	int
,	O
curY	int
;	O
while	O
(	O
i	int
<	O
totalDirs	pointer
)	O
{	O
if	O
(	O
(	O
i	int
-	O
firstVisDir	int
)	O
==	O
selectedDir	int
)	O
{	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
selectedDir	int
=	O
j	int
;	O
OUTPUT_NAME	O
(	O
dirs	pointer
[	O
i	int
]	O
)	O
;	O
curX	int
=	O
(	O
j	int
>=	O
numVisDirs	int
)	O
?	O
j	int
-	O
numVisDirs	int
+	O
3	int
:	O
j	int
+	O
3	int
;	O
curY	int
=	O
(	O
j	int
>=	O
numVisDirs	int
)	O
?	O
x	int
+	O
MAX_DIR_NAME_LEN	int
+	O
strlen	function
(	O
dirs	pointer
[	O
i	int
]	O
)	O
:	O
x	int
+	O
strlen	function
(	O
dirs	pointer
[	O
i	int
]	O
)	O
;	O
curY	int
+=	O
3	int
;	O
}	O
else	O
{	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
selectedDir	int
=	O
j	int
;	O
OUTPUT_NAME	O
(	O
dirs	pointer
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
j	int
>=	O
(	O
numVisDirs	int
*	O
2	int
)	O
-	O
1	int
)	O
break	O
;	O
i	int
++	O
;	O
j	int
++	O
;	O
k	int
++	O
;	O
}	O
if	O
(	O
(	O
i	int
>=	O
totalDirs	pointer
)	O
&&	O
(	O
j	int
<	O
numVisDirs	int
*	O
2	int
)	O
)	O
{	O
if	O
(	O
firstVisDir	int
>	O
totalDirs	pointer
)	O
j	int
=	O
firstVisDir	int
-	O
totalDirs	pointer
;	O
else	O
j	int
=	O
0	int
;	O
while	O
(	O
j	int
<	O
totalFiles	pointer
)	O
{	O
if	O
(	O
(	O
i	int
-	O
firstVisDir	int
)	O
==	O
selectedDir	int
)	O
{	O
setScreenColorsI	function
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
selectedDir	int
=	O
k	int
;	O
OUTPUT_NAME	O
(	O
files	pointer
[	O
j	int
]	O
)	O
;	O
curX	int
=	O
(	O
j	int
>=	O
numVisDirs	int
)	O
?	O
j	int
-	O
numVisDirs	int
+	O
3	int
:	O
j	int
+	O
3	int
;	O
curY	int
=	O
(	O
j	int
>=	O
numVisDirs	int
)	O
?	O
x	int
+	O
MAX_DIR_NAME_LEN	int
+	O
strlen	function
(	O
files	pointer
[	O
j	int
]	O
)	O
:	O
x	int
+	O
strlen	function
(	O
files	pointer
[	O
j	int
]	O
)	O
;	O
curY	int
+=	O
3	int
;	O
}	O
else	O
{	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
selectedDir	int
=	O
k	int
;	O
OUTPUT_NAME	O
(	O
files	pointer
[	O
j	int
]	O
)	O
;	O
}	O
if	O
(	O
j	int
>=	O
totalFiles	pointer
)	O
break	O
;	O
if	O
(	O
k	int
>=	O
(	O
numVisDirs	int
*	O
2	int
)	O
-	O
1	int
)	O
break	O
;	O
i	int
++	O
;	O
j	int
++	O
;	O
k	int
++	O
;	O
}	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
curX	int
,	O
curY	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
int	O
_saveFile	function
(	O
char	O
*	O
open_file_name	pointer
)	O
{	O
if	O
(	O
!	O
(	O
open_file	pointer
=	O
fopen	function
(	O
open_file_name	pointer
,	O
"w+"	pointer
)	O
)	O
)	O
{	O
return	O
0	int
;	O
}	O
int	O
i	int
,	O
j	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
totalLines	int
;	O
i	int
++	O
)	O
{	O
fprintf	function
(	O
open_file	pointer
,	O
"%s"	pointer
,	O
lines	array
[	O
i	int
]	O
->	O
text	pointer
)	O
;	O
}	O
FILE_STATE	enum
=	O
SAVED	int
;	O
if	O
(	O
!	O
createDocTitle	function
(	O
open_file_name	pointer
)	O
)	O
return	O
0	int
;	O
fflush	function
(	O
open_file	pointer
)	O
;	O
checkFileExtension	function
(	O
open_file_name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
int	O
copyBufToLine	function
(	O
int	O
i	int
,	O
int	O
k	int
,	O
char	O
*	O
buffer	pointer
,	O
int	O
linked	int
)	O
{	O
lines	array
[	O
i	int
]	O
=	O
allocLineStructB	function
(	O
k	int
)	O
;	O
if	O
(	O
!	O
lines	array
[	O
i	int
]	O
)	O
return	O
0	int
;	O
lines	array
[	O
i	int
]	O
->	O
linkedToNext	int
=	O
linked	int
;	O
memcpy	function
(	O
lines	array
[	O
i	int
]	O
->	O
text	pointer
,	O
buffer	pointer
,	O
k	int
)	O
;	O
lines	array
[	O
i	int
]	O
->	O
text	pointer
[	O
k	int
]	O
=	O
'\0'	O
;	O
calcTotalCharsInLine	function
(	O
i	int
)	O
;	O
return	O
1	int
;	O
}	O
char	O
buf	array
[	O
4096	int
]	O
;	O
int	O
_openFile	function
(	O
char	O
*	O
open_file_name	pointer
)	O
{	O
if	O
(	O
!	O
(	O
open_file	pointer
=	O
fopen	function
(	O
open_file_name	pointer
,	O
"r"	pointer
)	O
)	O
)	O
{	O
return	O
0	int
;	O
}	O
int	O
i	int
;	O
int	O
j	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
totalLines	int
;	O
i	int
++	O
)	O
{	O
free	function
(	O
lines	array
[	O
i	int
]	O
->	O
text	pointer
)	O
;	O
free	function
(	O
lines	array
[	O
i	int
]	O
)	O
;	O
}	O
totalLines	int
=	O
0	int
;	O
i	int
=	O
0	int
;	O
int	O
k	int
=	O
0	int
,	O
l	int
=	O
0	int
;	O
while	O
(	O
!	O
feof	function
(	O
open_file	pointer
)	O
)	O
{	O
if	O
(	O
totalLines	int
>=	O
MAX_LINES	int
)	O
break	O
;	O
j	int
=	O
fgetc	function
(	O
open_file	pointer
)	O
;	O
if	O
(	O
j	int
==	O
-	O
1	int
)	O
break	O
;	O
if	O
(	O
l	int
>=	O
MAX_CHARS_PER_LINE	int
)	O
{	O
if	O
(	O
!	O
copyBufToLine	function
(	O
i	int
,	O
k	int
,	O
buf	array
,	O
1	int
)	O
)	O
return	O
0	int
;	O
i	int
++	O
;	O
k	int
=	O
0	int
;	O
l	int
=	O
0	int
;	O
totalLines	int
++	O
;	O
}	O
buf	array
[	O
k	int
++	O
]	O
=	O
j	int
;	O
if	O
(	O
j	int
==	O
'\n'	O
)	O
{	O
if	O
(	O
!	O
copyBufToLine	function
(	O
i	int
,	O
k	int
,	O
buf	array
,	O
0	int
)	O
)	O
return	O
0	int
;	O
i	int
++	O
;	O
k	int
=	O
0	int
;	O
l	int
=	O
0	int
;	O
totalLines	int
++	O
;	O
}	O
else	O
if	O
(	O
j	int
==	O
'\t'	O
)	O
{	O
l	int
+=	O
TABSPACES	O
(	O
l	int
+	O
1	int
)	O
+	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
(	O
j	int
&	O
0xc0	int
)	O
!=	O
0x80	int
)	O
l	int
++	O
;	O
}	O
}	O
if	O
(	O
k	int
!=	O
0	int
)	O
{	O
if	O
(	O
!	O
copyBufToLine	function
(	O
i	int
,	O
k	int
,	O
buf	array
,	O
0	int
)	O
)	O
return	O
0	int
;	O
totalLines	int
++	O
;	O
}	O
if	O
(	O
!	O
createDocTitle	function
(	O
open_file_name	pointer
)	O
)	O
return	O
0	int
;	O
firstVisLine	int
=	O
0	int
;	O
selectedLine	int
=	O
0	int
;	O
selectedChar	int
=	O
0	int
;	O
checkFileExtension	function
(	O
open_file_name	pointer
)	O
;	O
fclose	function
(	O
open_file	pointer
)	O
;	O
open_file	pointer
=	O
NULL	O
;	O
return	O
1	int
;	O
}	O
void	O
checkFileExtension	function
(	O
char	O
*	O
open_file_name	pointer
)	O
{	O
AUTO_HIGHLIGHTING	int
=	O
0	int
;	O
char	O
*	O
ext	pointer
=	O
strrchr	function
(	O
open_file_name	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
ext	pointer
!=	O
NULL	O
)	O
{	O
ext	pointer
++	O
;	O
for	O
(	O
int	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_MODULES	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
int	O
j	int
=	O
0	int
;	O
j	int
<	O
module	array
[	O
i	int
]	O
->	O
extsCount	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
ext	pointer
,	O
module	array
[	O
i	int
]	O
->	O
exts	pointer
[	O
j	int
]	O
)	O
==	O
0	int
)	O
{	O
AUTO_HIGHLIGHTING	int
=	O
1	int
;	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
COLOR_HWINDOW	int
;	O
HIGHLIGHT_MODE	enum
=	O
j	int
;	O
curmodule	pointer
=	O
module	array
[	O
i	int
]	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
AUTO_HIGHLIGHTING	int
)	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
AUTO_HIGHLIGHTING	int
)	O
{	O
char	O
*	O
line	pointer
=	O
lines	array
[	O
0	int
]	O
->	O
text	pointer
;	O
if	O
(	O
(	O
strstr	function
(	O
line	pointer
,	O
"/bin/csh"	pointer
)	O
)	O
||	O
(	O
strstr	function
(	O
line	pointer
,	O
"/bin/ksh"	pointer
)	O
)	O
||	O
(	O
strstr	function
(	O
line	pointer
,	O
"/bin/sh"	pointer
)	O
)	O
||	O
(	O
strstr	function
(	O
line	pointer
,	O
"/bin/bash"	pointer
)	O
)	O
)	O
{	O
AUTO_HIGHLIGHTING	int
=	O
1	int
;	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
COLOR_HWINDOW	int
;	O
HIGHLIGHT_MODE	enum
=	O
SHELL_MODE	int
;	O
curmodule	pointer
=	O
module	array
[	O
SHELL_MODE	int
]	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
line	pointer
,	O
"/bin/perl"	pointer
)	O
)	O
{	O
AUTO_HIGHLIGHTING	int
=	O
1	int
;	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
COLOR_HWINDOW	int
;	O
HIGHLIGHT_MODE	enum
=	O
PERL_MODE	int
;	O
curmodule	pointer
=	O
module	array
[	O
PERL_MODE	int
]	O
;	O
}	O
else	O
{	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
old_window_color	int
;	O
HIGHLIGHT_MODE	enum
=	O
NO_MODE	int
;	O
curmodule	pointer
=	O
&	O
dummyModule	struct
;	O
}	O
}	O
}	O
