static	O
int	O
capa_comp	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
value	pointer
)	O
{	O
const	O
char	O
*	O
capa	pointer
=	O
item	pointer
;	O
const	O
char	O
*	O
needle	pointer
=	O
value	pointer
;	O
for	O
(	O
;	O
*	O
needle	pointer
;	O
capa	pointer
++	O
,	O
needle	pointer
++	O
)	O
{	O
if	O
(	O
!	O
*	O
capa	pointer
)	O
return	O
1	int
;	O
if	O
(	O
mu_tolower	O
(	O
*	O
capa	pointer
)	O
!=	O
mu_tolower	O
(	O
*	O
needle	pointer
)	O
)	O
return	O
1	int
;	O
}	O
return	O
!	O
(	O
*	O
capa	pointer
==	O
0	int
||	O
mu_isspace	O
(	O
*	O
capa	pointer
)	O
)	O
;	O
}	O
int	O
mu_smtp_ehlo	function
(	O
mu_smtp_t	pointer
smtp	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
!	O
smtp	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
MU_SMTP_FISSET	O
(	O
smtp	pointer
,	O
_MU_SMTP_ERR	int
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
if	O
(	O
!	O
smtp	pointer
->	O
param	pointer
[	O
MU_SMTP_PARAM_DOMAIN	int
]	O
)	O
{	O
char	O
*	O
host	pointer
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
mu_get_host_name	function
(	O
&	O
host	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
host	pointer
[	O
0	int
]	O
==	O
0	int
)	O
{	O
free	function
(	O
host	pointer
)	O
;	O
host	pointer
=	O
p	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
p	pointer
=	O
strchr	function
(	O
host	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
p	pointer
++	O
;	O
else	O
p	pointer
=	O
host	pointer
;	O
}	O
}	O
else	O
p	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
struct	O
mu_sockaddr	struct
*	O
addr	pointer
;	O
status	int
=	O
mu_stream_ioctl	function
(	O
smtp	pointer
->	O
carrier	pointer
,	O
MU_IOCTL_TCPSTREAM	int
,	O
MU_IOCTL_TCP_GETSOCKNAME	int
,	O
&	O
addr	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_sockaddr_format	enum
(	O
addr	pointer
,	O
&	O
host	pointer
,	O
mu_sockaddr_format_ehlo	int
)	O
;	O
mu_sockaddr_free	function
(	O
addr	pointer
)	O
;	O
p	pointer
=	O
host	pointer
;	O
}	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	pointer
,	O
status	int
)	O
;	O
}	O
status	int
=	O
mu_smtp_set_param	function
(	O
smtp	pointer
,	O
MU_SMTP_PARAM_DOMAIN	int
,	O
p	pointer
)	O
;	O
free	function
(	O
host	pointer
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	pointer
,	O
status	int
)	O
;	O
}	O
status	int
=	O
mu_smtp_write	function
(	O
smtp	pointer
,	O
"EHLO %s\r\n"	pointer
,	O
smtp	pointer
->	O
param	pointer
[	O
MU_SMTP_PARAM_DOMAIN	int
]	O
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	pointer
,	O
status	int
)	O
;	O
status	int
=	O
mu_smtp_response	function
(	O
smtp	pointer
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	pointer
,	O
status	int
)	O
;	O
if	O
(	O
smtp	pointer
->	O
replcode	array
[	O
0	int
]	O
==	O
'2'	O
)	O
{	O
smtp	pointer
->	O
flags	int
|=	O
_MU_SMTP_ESMTP	int
;	O
smtp	pointer
->	O
capa	pointer
=	O
smtp	pointer
->	O
mlrepl	pointer
;	O
smtp	pointer
->	O
mlrepl	pointer
=	O
NULL	O
;	O
mu_list_set_comparator	function
(	O
smtp	pointer
->	O
capa	pointer
,	O
capa_comp	function
)	O
;	O
}	O
else	O
if	O
(	O
smtp	pointer
->	O
replcode	array
[	O
0	int
]	O
==	O
'4'	O
)	O
return	O
MU_ERR_REPLY	O
;	O
else	O
{	O
status	int
=	O
mu_smtp_write	function
(	O
smtp	pointer
,	O
"HELO %s\r\n"	pointer
,	O
smtp	pointer
->	O
param	pointer
[	O
MU_SMTP_PARAM_DOMAIN	int
]	O
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	pointer
,	O
status	int
)	O
;	O
status	int
=	O
mu_smtp_response	function
(	O
smtp	pointer
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	pointer
,	O
status	int
)	O
;	O
smtp	pointer
->	O
flags	int
&=	O
~	O
_MU_SMTP_ESMTP	int
;	O
if	O
(	O
smtp	pointer
->	O
replcode	array
[	O
0	int
]	O
!=	O
'2'	O
)	O
return	O
MU_ERR_REPLY	O
;	O
}	O
if	O
(	O
smtp	pointer
->	O
state	pointer
==	O
MU_SMTP_EHLO	int
)	O
smtp	pointer
->	O
state	pointer
=	O
MU_SMTP_MAIL	int
;	O
return	O
0	int
;	O
}	O
