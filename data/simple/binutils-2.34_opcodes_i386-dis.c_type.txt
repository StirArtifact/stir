static	O
int	O
print_insn	function
(	O
bfd_vma	long
,	O
disassemble_info	struct
*	O
)	O
;	O
static	O
void	O
dofloat	function
(	O
int	O
)	O
;	O
static	O
void	O
OP_ST	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_STi	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
int	O
putop	function
(	O
const	O
char	O
*	O
,	O
int	O
)	O
;	O
static	O
void	O
oappend	function
(	O
const	O
char	O
*	O
)	O
;	O
static	O
void	O
append_seg	function
(	O
void	O
)	O
;	O
static	O
void	O
OP_indirE	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
print_operand_value	function
(	O
char	O
*	O
,	O
int	O
,	O
bfd_vma	long
)	O
;	O
static	O
void	O
OP_E_register	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_E_memory	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
print_displacement	function
(	O
char	O
*	O
,	O
bfd_vma	long
)	O
;	O
static	O
void	O
OP_E	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_G	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
bfd_vma	long
get64	function
(	O
void	O
)	O
;	O
static	O
bfd_signed_vma	long
get32	function
(	O
void	O
)	O
;	O
static	O
bfd_signed_vma	long
get32s	function
(	O
void	O
)	O
;	O
static	O
int	O
get16	function
(	O
void	O
)	O
;	O
static	O
void	O
set_op	function
(	O
bfd_vma	long
,	O
int	O
)	O
;	O
static	O
void	O
OP_Skip_MODRM	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_REG	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_IMREG	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_I	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_I64	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_sI	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_J	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_SEG	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_DIR	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_OFF	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_OFF64	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
ptr_reg	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_ESreg	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_DSreg	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_C	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_D	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_T	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_R	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_MMX	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_XMM	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EM	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EX	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EMC	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_MXC	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_MS	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_XS	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_M	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_VEX	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EX_Vex	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EX_VexW	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_EX_VexImmW	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_XMM_Vex	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_XMM_VexW	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Rounding	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_REG_VexI4	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
PCLMUL_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
VCMP_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
VPCMP_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
VPCOM_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_0f07	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Monitor	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Mwait	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
NOP_Fixup1	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
NOP_Fixup2	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_3DNowSuffix	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
CMP_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
BadOp	function
(	O
void	O
)	O
;	O
static	O
void	O
REP_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
SEP_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
BND_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
NOTRACK_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
HLE_Fixup1	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
HLE_Fixup2	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
HLE_Fixup3	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
CMPXCHG8B_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
XMM_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
CRC32_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
FXSAVE_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
PCMPESTR_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_LWPCB_E	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_LWP_E	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Vex_2src_1	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Vex_2src_2	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
MOVBE_Fixup	function
(	O
int	O
,	O
int	O
)	O
;	O
static	O
void	O
OP_Mask	function
(	O
int	O
,	O
int	O
)	O
;	O
struct	O
dis_private	struct
{	O
bfd_byte	char
*	O
max_fetched	pointer
;	O
bfd_byte	char
the_buffer	array
[	O
MAX_MNEM_SIZE	int
]	O
;	O
bfd_vma	long
insn_start	long
;	O
int	O
orig_sizeflag	int
;	O
OPCODES_SIGJMP_BUF	O
bailout	array
;	O
}	O
;	O
enum	O
address_mode	enum
{	O
mode_16bit	int
,	O
mode_32bit	int
,	O
mode_64bit	int
}	O
;	O
enum	O
address_mode	enum
address_mode	enum
;	O
static	O
int	O
prefixes	int
;	O
static	O
int	O
rex	int
;	O
static	O
int	O
rex_used	int
;	O
static	O
int	O
rex_ignored	int
;	O
static	O
int	O
used_prefixes	int
;	O
static	O
int	O
fetch_data	function
(	O
struct	O
disassemble_info	struct
*	O
info	pointer
,	O
bfd_byte	char
*	O
addr	pointer
)	O
{	O
int	O
status	int
;	O
struct	O
dis_private	struct
*	O
priv	pointer
=	O
(	O
struct	O
dis_private	struct
*	O
)	O
info	pointer
->	O
private_data	pointer
;	O
bfd_vma	long
start	long
=	O
priv	pointer
->	O
insn_start	long
+	O
(	O
priv	pointer
->	O
max_fetched	pointer
-	O
priv	pointer
->	O
the_buffer	array
)	O
;	O
if	O
(	O
addr	pointer
<=	O
priv	pointer
->	O
the_buffer	array
+	O
MAX_MNEM_SIZE	int
)	O
status	int
=	O
(	O
*	O
info	pointer
->	O
read_memory_func	pointer
)	O
(	O
start	long
,	O
priv	pointer
->	O
max_fetched	pointer
,	O
addr	pointer
-	O
priv	pointer
->	O
max_fetched	pointer
,	O
info	pointer
)	O
;	O
else	O
status	int
=	O
-	O
1	int
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
if	O
(	O
priv	pointer
->	O
max_fetched	pointer
==	O
priv	pointer
->	O
the_buffer	array
)	O
(	O
*	O
info	pointer
->	O
memory_error_func	pointer
)	O
(	O
status	int
,	O
start	long
,	O
info	pointer
)	O
;	O
OPCODES_SIGLONGJMP	O
(	O
priv	pointer
->	O
bailout	array
,	O
1	int
)	O
;	O
}	O
else	O
priv	pointer
->	O
max_fetched	pointer
=	O
addr	pointer
;	O
return	O
1	int
;	O
}	O
enum	O
{	O
b_mode	int
=	O
1	int
,	O
b_swap_mode	int
,	O
b_T_mode	int
,	O
v_mode	int
,	O
v_swap_mode	int
,	O
va_mode	int
,	O
w_mode	int
,	O
d_mode	int
,	O
d_swap_mode	int
,	O
q_mode	int
,	O
q_swap_mode	int
,	O
t_mode	int
,	O
x_mode	int
,	O
evex_x_gscat_mode	int
,	O
evex_x_nobcst_mode	int
,	O
x_swap_mode	int
,	O
xmm_mode	int
,	O
xmmq_mode	int
,	O
evex_half_bcst_xmmq_mode	int
,	O
xmm_mb_mode	int
,	O
xmm_mw_mode	int
,	O
xmm_md_mode	int
,	O
xmm_mq_mode	int
,	O
xmm_mdq_mode	int
,	O
xmmdw_mode	int
,	O
xmmqd_mode	int
,	O
ymm_mode	int
,	O
ymmq_mode	int
,	O
ymmxmm_mode	int
,	O
m_mode	int
,	O
a_mode	int
,	O
cond_jump_mode	int
,	O
loop_jcxz_mode	int
,	O
v_bnd_mode	int
,	O
v_bndmk_mode	int
,	O
dq_mode	int
,	O
dqw_mode	int
,	O
bnd_mode	int
,	O
bnd_swap_mode	int
,	O
f_mode	int
,	O
const_1_mode	int
,	O
indir_v_mode	int
,	O
stack_v_mode	int
,	O
z_mode	int
,	O
o_mode	int
,	O
dqb_mode	int
,	O
db_mode	int
,	O
dw_mode	int
,	O
dqd_mode	int
,	O
vex_mode	int
,	O
vex128_mode	int
,	O
vex256_mode	int
,	O
vex_w_dq_mode	int
,	O
vex_vsib_d_w_dq_mode	int
,	O
vex_vsib_d_w_d_mode	int
,	O
vex_vsib_q_w_dq_mode	int
,	O
vex_vsib_q_w_d_mode	int
,	O
scalar_mode	int
,	O
b_scalar_mode	int
,	O
w_scalar_mode	int
,	O
d_scalar_mode	int
,	O
d_scalar_swap_mode	int
,	O
q_scalar_mode	int
,	O
q_scalar_swap_mode	int
,	O
vex_scalar_mode	int
,	O
vex_scalar_w_dq_mode	int
,	O
evex_rounding_mode	int
,	O
evex_rounding_64_mode	int
,	O
evex_sae_mode	int
,	O
mask_mode	int
,	O
mask_bd_mode	int
,	O
es_reg	int
,	O
cs_reg	int
,	O
ss_reg	int
,	O
ds_reg	int
,	O
fs_reg	int
,	O
gs_reg	int
,	O
eAX_reg	int
,	O
eCX_reg	int
,	O
eDX_reg	int
,	O
eBX_reg	int
,	O
eSP_reg	int
,	O
eBP_reg	int
,	O
eSI_reg	int
,	O
eDI_reg	int
,	O
al_reg	int
,	O
cl_reg	int
,	O
dl_reg	int
,	O
bl_reg	int
,	O
ah_reg	int
,	O
ch_reg	int
,	O
dh_reg	int
,	O
bh_reg	int
,	O
ax_reg	int
,	O
cx_reg	int
,	O
dx_reg	int
,	O
bx_reg	int
,	O
sp_reg	int
,	O
bp_reg	int
,	O
si_reg	int
,	O
di_reg	int
,	O
rAX_reg	int
,	O
rCX_reg	int
,	O
rDX_reg	int
,	O
rBX_reg	int
,	O
rSP_reg	int
,	O
rBP_reg	int
,	O
rSI_reg	int
,	O
rDI_reg	int
,	O
z_mode_ax_reg	int
,	O
indir_dx_reg	int
}	O
;	O
enum	O
{	O
FLOATCODE	int
=	O
1	int
,	O
USE_REG_TABLE	int
,	O
USE_MOD_TABLE	int
,	O
USE_RM_TABLE	int
,	O
USE_PREFIX_TABLE	int
,	O
USE_X86_64_TABLE	int
,	O
USE_3BYTE_TABLE	int
,	O
USE_XOP_8F_TABLE	int
,	O
USE_VEX_C4_TABLE	int
,	O
USE_VEX_C5_TABLE	int
,	O
USE_VEX_LEN_TABLE	int
,	O
USE_VEX_W_TABLE	int
,	O
USE_EVEX_TABLE	int
,	O
USE_EVEX_LEN_TABLE	int
}	O
;	O
enum	O
{	O
REG_80	int
=	O
0	int
,	O
REG_81	int
,	O
REG_83	int
,	O
REG_8F	int
,	O
REG_C0	int
,	O
REG_C1	int
,	O
REG_C6	int
,	O
REG_C7	int
,	O
REG_D0	int
,	O
REG_D1	int
,	O
REG_D2	int
,	O
REG_D3	int
,	O
REG_F6	int
,	O
REG_F7	int
,	O
REG_FE	int
,	O
REG_FF	int
,	O
REG_0F00	int
,	O
REG_0F01	int
,	O
REG_0F0D	int
,	O
REG_0F18	int
,	O
REG_0F1C_P_0_MOD_0	int
,	O
REG_0F1E_P_1_MOD_3	int
,	O
REG_0F71	int
,	O
REG_0F72	int
,	O
REG_0F73	int
,	O
REG_0FA6	int
,	O
REG_0FA7	int
,	O
REG_0FAE	int
,	O
REG_0FBA	int
,	O
REG_0FC7	int
,	O
REG_VEX_0F71	int
,	O
REG_VEX_0F72	int
,	O
REG_VEX_0F73	int
,	O
REG_VEX_0FAE	int
,	O
REG_VEX_0F38F3	int
,	O
REG_XOP_LWPCB	int
,	O
REG_XOP_LWP	int
,	O
REG_XOP_TBM_01	int
,	O
REG_XOP_TBM_02	int
,	O
REG_EVEX_0F71	int
,	O
REG_EVEX_0F72	int
,	O
REG_EVEX_0F73	int
,	O
REG_EVEX_0F38C6	int
,	O
REG_EVEX_0F38C7	int
}	O
;	O
enum	O
{	O
MOD_8D	int
=	O
0	int
,	O
MOD_C6_REG_7	int
,	O
MOD_C7_REG_7	int
,	O
MOD_FF_REG_3	int
,	O
MOD_FF_REG_5	int
,	O
MOD_0F01_REG_0	int
,	O
MOD_0F01_REG_1	int
,	O
MOD_0F01_REG_2	int
,	O
MOD_0F01_REG_3	int
,	O
MOD_0F01_REG_5	int
,	O
MOD_0F01_REG_7	int
,	O
MOD_0F12_PREFIX_0	int
,	O
MOD_0F13	int
,	O
MOD_0F16_PREFIX_0	int
,	O
MOD_0F17	int
,	O
MOD_0F18_REG_0	int
,	O
MOD_0F18_REG_1	int
,	O
MOD_0F18_REG_2	int
,	O
MOD_0F18_REG_3	int
,	O
MOD_0F18_REG_4	int
,	O
MOD_0F18_REG_5	int
,	O
MOD_0F18_REG_6	int
,	O
MOD_0F18_REG_7	int
,	O
MOD_0F1A_PREFIX_0	int
,	O
MOD_0F1B_PREFIX_0	int
,	O
MOD_0F1B_PREFIX_1	int
,	O
MOD_0F1C_PREFIX_0	int
,	O
MOD_0F1E_PREFIX_1	int
,	O
MOD_0F24	int
,	O
MOD_0F26	int
,	O
MOD_0F2B_PREFIX_0	int
,	O
MOD_0F2B_PREFIX_1	int
,	O
MOD_0F2B_PREFIX_2	int
,	O
MOD_0F2B_PREFIX_3	int
,	O
MOD_0F51	int
,	O
MOD_0F71_REG_2	int
,	O
MOD_0F71_REG_4	int
,	O
MOD_0F71_REG_6	int
,	O
MOD_0F72_REG_2	int
,	O
MOD_0F72_REG_4	int
,	O
MOD_0F72_REG_6	int
,	O
MOD_0F73_REG_2	int
,	O
MOD_0F73_REG_3	int
,	O
MOD_0F73_REG_6	int
,	O
MOD_0F73_REG_7	int
,	O
MOD_0FAE_REG_0	int
,	O
MOD_0FAE_REG_1	int
,	O
MOD_0FAE_REG_2	int
,	O
MOD_0FAE_REG_3	int
,	O
MOD_0FAE_REG_4	int
,	O
MOD_0FAE_REG_5	int
,	O
MOD_0FAE_REG_6	int
,	O
MOD_0FAE_REG_7	int
,	O
MOD_0FB2	int
,	O
MOD_0FB4	int
,	O
MOD_0FB5	int
,	O
MOD_0FC3	int
,	O
MOD_0FC7_REG_3	int
,	O
MOD_0FC7_REG_4	int
,	O
MOD_0FC7_REG_5	int
,	O
MOD_0FC7_REG_6	int
,	O
MOD_0FC7_REG_7	int
,	O
MOD_0FD7	int
,	O
MOD_0FE7_PREFIX_2	int
,	O
MOD_0FF0_PREFIX_3	int
,	O
MOD_0F382A_PREFIX_2	int
,	O
MOD_0F38F5_PREFIX_2	int
,	O
MOD_0F38F6_PREFIX_0	int
,	O
MOD_0F38F8_PREFIX_1	int
,	O
MOD_0F38F8_PREFIX_2	int
,	O
MOD_0F38F8_PREFIX_3	int
,	O
MOD_0F38F9_PREFIX_0	int
,	O
MOD_62_32BIT	int
,	O
MOD_C4_32BIT	int
,	O
MOD_C5_32BIT	int
,	O
MOD_VEX_0F12_PREFIX_0	int
,	O
MOD_VEX_0F13	int
,	O
MOD_VEX_0F16_PREFIX_0	int
,	O
MOD_VEX_0F17	int
,	O
MOD_VEX_0F2B	int
,	O
MOD_VEX_W_0_0F41_P_0_LEN_1	int
,	O
MOD_VEX_W_1_0F41_P_0_LEN_1	int
,	O
MOD_VEX_W_0_0F41_P_2_LEN_1	int
,	O
MOD_VEX_W_1_0F41_P_2_LEN_1	int
,	O
MOD_VEX_W_0_0F42_P_0_LEN_1	int
,	O
MOD_VEX_W_1_0F42_P_0_LEN_1	int
,	O
MOD_VEX_W_0_0F42_P_2_LEN_1	int
,	O
MOD_VEX_W_1_0F42_P_2_LEN_1	int
,	O
MOD_VEX_W_0_0F44_P_0_LEN_1	int
,	O
MOD_VEX_W_1_0F44_P_0_LEN_1	int
,	O
MOD_VEX_W_0_0F44_P_2_LEN_1	int
,	O
MOD_VEX_W_1_0F44_P_2_LEN_1	int
,	O
MOD_VEX_W_0_0F45_P_0_LEN_1	int
,	O
MOD_VEX_W_1_0F45_P_0_LEN_1	int
,	O
MOD_VEX_W_0_0F45_P_2_LEN_1	int
,	O
MOD_VEX_W_1_0F45_P_2_LEN_1	int
,	O
MOD_VEX_W_0_0F46_P_0_LEN_1	int
,	O
MOD_VEX_W_1_0F46_P_0_LEN_1	int
,	O
MOD_VEX_W_0_0F46_P_2_LEN_1	int
,	O
MOD_VEX_W_1_0F46_P_2_LEN_1	int
,	O
MOD_VEX_W_0_0F47_P_0_LEN_1	int
,	O
MOD_VEX_W_1_0F47_P_0_LEN_1	int
,	O
MOD_VEX_W_0_0F47_P_2_LEN_1	int
,	O
MOD_VEX_W_1_0F47_P_2_LEN_1	int
,	O
MOD_VEX_W_0_0F4A_P_0_LEN_1	int
,	O
MOD_VEX_W_1_0F4A_P_0_LEN_1	int
,	O
MOD_VEX_W_0_0F4A_P_2_LEN_1	int
,	O
MOD_VEX_W_1_0F4A_P_2_LEN_1	int
,	O
MOD_VEX_W_0_0F4B_P_0_LEN_1	int
,	O
MOD_VEX_W_1_0F4B_P_0_LEN_1	int
,	O
MOD_VEX_W_0_0F4B_P_2_LEN_1	int
,	O
MOD_VEX_0F50	int
,	O
MOD_VEX_0F71_REG_2	int
,	O
MOD_VEX_0F71_REG_4	int
,	O
MOD_VEX_0F71_REG_6	int
,	O
MOD_VEX_0F72_REG_2	int
,	O
MOD_VEX_0F72_REG_4	int
,	O
MOD_VEX_0F72_REG_6	int
,	O
MOD_VEX_0F73_REG_2	int
,	O
MOD_VEX_0F73_REG_3	int
,	O
MOD_VEX_0F73_REG_6	int
,	O
MOD_VEX_0F73_REG_7	int
,	O
MOD_VEX_W_0_0F91_P_0_LEN_0	int
,	O
MOD_VEX_W_1_0F91_P_0_LEN_0	int
,	O
MOD_VEX_W_0_0F91_P_2_LEN_0	int
,	O
MOD_VEX_W_1_0F91_P_2_LEN_0	int
,	O
MOD_VEX_W_0_0F92_P_0_LEN_0	int
,	O
MOD_VEX_W_0_0F92_P_2_LEN_0	int
,	O
MOD_VEX_0F92_P_3_LEN_0	int
,	O
MOD_VEX_W_0_0F93_P_0_LEN_0	int
,	O
MOD_VEX_W_0_0F93_P_2_LEN_0	int
,	O
MOD_VEX_0F93_P_3_LEN_0	int
,	O
MOD_VEX_W_0_0F98_P_0_LEN_0	int
,	O
MOD_VEX_W_1_0F98_P_0_LEN_0	int
,	O
MOD_VEX_W_0_0F98_P_2_LEN_0	int
,	O
MOD_VEX_W_1_0F98_P_2_LEN_0	int
,	O
MOD_VEX_W_0_0F99_P_0_LEN_0	int
,	O
MOD_VEX_W_1_0F99_P_0_LEN_0	int
,	O
MOD_VEX_W_0_0F99_P_2_LEN_0	int
,	O
MOD_VEX_W_1_0F99_P_2_LEN_0	int
,	O
MOD_VEX_0FAE_REG_2	int
,	O
MOD_VEX_0FAE_REG_3	int
,	O
MOD_VEX_0FD7_PREFIX_2	int
,	O
MOD_VEX_0FE7_PREFIX_2	int
,	O
MOD_VEX_0FF0_PREFIX_3	int
,	O
MOD_VEX_0F381A_PREFIX_2	int
,	O
MOD_VEX_0F382A_PREFIX_2	int
,	O
MOD_VEX_0F382C_PREFIX_2	int
,	O
MOD_VEX_0F382D_PREFIX_2	int
,	O
MOD_VEX_0F382E_PREFIX_2	int
,	O
MOD_VEX_0F382F_PREFIX_2	int
,	O
MOD_VEX_0F385A_PREFIX_2	int
,	O
MOD_VEX_0F388C_PREFIX_2	int
,	O
MOD_VEX_0F388E_PREFIX_2	int
,	O
MOD_VEX_W_0_0F3A30_P_2_LEN_0	int
,	O
MOD_VEX_W_1_0F3A30_P_2_LEN_0	int
,	O
MOD_VEX_W_0_0F3A31_P_2_LEN_0	int
,	O
MOD_VEX_W_1_0F3A31_P_2_LEN_0	int
,	O
MOD_VEX_W_0_0F3A32_P_2_LEN_0	int
,	O
MOD_VEX_W_1_0F3A32_P_2_LEN_0	int
,	O
MOD_VEX_W_0_0F3A33_P_2_LEN_0	int
,	O
MOD_VEX_W_1_0F3A33_P_2_LEN_0	int
,	O
MOD_EVEX_0F12_PREFIX_0	int
,	O
MOD_EVEX_0F16_PREFIX_0	int
,	O
MOD_EVEX_0F38C6_REG_1	int
,	O
MOD_EVEX_0F38C6_REG_2	int
,	O
MOD_EVEX_0F38C6_REG_5	int
,	O
MOD_EVEX_0F38C6_REG_6	int
,	O
MOD_EVEX_0F38C7_REG_1	int
,	O
MOD_EVEX_0F38C7_REG_2	int
,	O
MOD_EVEX_0F38C7_REG_5	int
,	O
MOD_EVEX_0F38C7_REG_6	int
}	O
;	O
enum	O
{	O
RM_C6_REG_7	int
=	O
0	int
,	O
RM_C7_REG_7	int
,	O
RM_0F01_REG_0	int
,	O
RM_0F01_REG_1	int
,	O
RM_0F01_REG_2	int
,	O
RM_0F01_REG_3	int
,	O
RM_0F01_REG_5_MOD_3	int
,	O
RM_0F01_REG_7_MOD_3	int
,	O
RM_0F1E_P_1_MOD_3_REG_7	int
,	O
RM_0FAE_REG_6_MOD_3_P_0	int
,	O
RM_0FAE_REG_7_MOD_3	int
,	O
}	O
;	O
enum	O
{	O
PREFIX_90	int
=	O
0	int
,	O
PREFIX_0F01_REG_5_MOD_0	int
,	O
PREFIX_0F01_REG_5_MOD_3_RM_0	int
,	O
PREFIX_0F01_REG_5_MOD_3_RM_2	int
,	O
PREFIX_0F01_REG_7_MOD_3_RM_2	int
,	O
PREFIX_0F01_REG_7_MOD_3_RM_3	int
,	O
PREFIX_0F09	int
,	O
PREFIX_0F10	int
,	O
PREFIX_0F11	int
,	O
PREFIX_0F12	int
,	O
PREFIX_0F16	int
,	O
PREFIX_0F1A	int
,	O
PREFIX_0F1B	int
,	O
PREFIX_0F1C	int
,	O
PREFIX_0F1E	int
,	O
PREFIX_0F2A	int
,	O
PREFIX_0F2B	int
,	O
PREFIX_0F2C	int
,	O
PREFIX_0F2D	int
,	O
PREFIX_0F2E	int
,	O
PREFIX_0F2F	int
,	O
PREFIX_0F51	int
,	O
PREFIX_0F52	int
,	O
PREFIX_0F53	int
,	O
PREFIX_0F58	int
,	O
PREFIX_0F59	int
,	O
PREFIX_0F5A	int
,	O
PREFIX_0F5B	int
,	O
PREFIX_0F5C	int
,	O
PREFIX_0F5D	int
,	O
PREFIX_0F5E	int
,	O
PREFIX_0F5F	int
,	O
PREFIX_0F60	int
,	O
PREFIX_0F61	int
,	O
PREFIX_0F62	int
,	O
PREFIX_0F6C	int
,	O
PREFIX_0F6D	int
,	O
PREFIX_0F6F	int
,	O
PREFIX_0F70	int
,	O
PREFIX_0F73_REG_3	int
,	O
PREFIX_0F73_REG_7	int
,	O
PREFIX_0F78	int
,	O
PREFIX_0F79	int
,	O
PREFIX_0F7C	int
,	O
PREFIX_0F7D	int
,	O
PREFIX_0F7E	int
,	O
PREFIX_0F7F	int
,	O
PREFIX_0FAE_REG_0_MOD_3	int
,	O
PREFIX_0FAE_REG_1_MOD_3	int
,	O
PREFIX_0FAE_REG_2_MOD_3	int
,	O
PREFIX_0FAE_REG_3_MOD_3	int
,	O
PREFIX_0FAE_REG_4_MOD_0	int
,	O
PREFIX_0FAE_REG_4_MOD_3	int
,	O
PREFIX_0FAE_REG_5_MOD_0	int
,	O
PREFIX_0FAE_REG_5_MOD_3	int
,	O
PREFIX_0FAE_REG_6_MOD_0	int
,	O
PREFIX_0FAE_REG_6_MOD_3	int
,	O
PREFIX_0FAE_REG_7_MOD_0	int
,	O
PREFIX_0FB8	int
,	O
PREFIX_0FBC	int
,	O
PREFIX_0FBD	int
,	O
PREFIX_0FC2	int
,	O
PREFIX_0FC3_MOD_0	int
,	O
PREFIX_0FC7_REG_6_MOD_0	int
,	O
PREFIX_0FC7_REG_6_MOD_3	int
,	O
PREFIX_0FC7_REG_7_MOD_3	int
,	O
PREFIX_0FD0	int
,	O
PREFIX_0FD6	int
,	O
PREFIX_0FE6	int
,	O
PREFIX_0FE7	int
,	O
PREFIX_0FF0	int
,	O
PREFIX_0FF7	int
,	O
PREFIX_0F3810	int
,	O
PREFIX_0F3814	int
,	O
PREFIX_0F3815	int
,	O
PREFIX_0F3817	int
,	O
PREFIX_0F3820	int
,	O
PREFIX_0F3821	int
,	O
PREFIX_0F3822	int
,	O
PREFIX_0F3823	int
,	O
PREFIX_0F3824	int
,	O
PREFIX_0F3825	int
,	O
PREFIX_0F3828	int
,	O
PREFIX_0F3829	int
,	O
PREFIX_0F382A	int
,	O
PREFIX_0F382B	int
,	O
PREFIX_0F3830	int
,	O
PREFIX_0F3831	int
,	O
PREFIX_0F3832	int
,	O
PREFIX_0F3833	int
,	O
PREFIX_0F3834	int
,	O
PREFIX_0F3835	int
,	O
PREFIX_0F3837	int
,	O
PREFIX_0F3838	int
,	O
PREFIX_0F3839	int
,	O
PREFIX_0F383A	int
,	O
PREFIX_0F383B	int
,	O
PREFIX_0F383C	int
,	O
PREFIX_0F383D	int
,	O
PREFIX_0F383E	int
,	O
PREFIX_0F383F	int
,	O
PREFIX_0F3840	int
,	O
PREFIX_0F3841	int
,	O
PREFIX_0F3880	int
,	O
PREFIX_0F3881	int
,	O
PREFIX_0F3882	int
,	O
PREFIX_0F38C8	int
,	O
PREFIX_0F38C9	int
,	O
PREFIX_0F38CA	int
,	O
PREFIX_0F38CB	int
,	O
PREFIX_0F38CC	int
,	O
PREFIX_0F38CD	int
,	O
PREFIX_0F38CF	int
,	O
PREFIX_0F38DB	int
,	O
PREFIX_0F38DC	int
,	O
PREFIX_0F38DD	int
,	O
PREFIX_0F38DE	int
,	O
PREFIX_0F38DF	int
,	O
PREFIX_0F38F0	int
,	O
PREFIX_0F38F1	int
,	O
PREFIX_0F38F5	int
,	O
PREFIX_0F38F6	int
,	O
PREFIX_0F38F8	int
,	O
PREFIX_0F38F9	int
,	O
PREFIX_0F3A08	int
,	O
PREFIX_0F3A09	int
,	O
PREFIX_0F3A0A	int
,	O
PREFIX_0F3A0B	int
,	O
PREFIX_0F3A0C	int
,	O
PREFIX_0F3A0D	int
,	O
PREFIX_0F3A0E	int
,	O
PREFIX_0F3A14	int
,	O
PREFIX_0F3A15	int
,	O
PREFIX_0F3A16	int
,	O
PREFIX_0F3A17	int
,	O
PREFIX_0F3A20	int
,	O
PREFIX_0F3A21	int
,	O
PREFIX_0F3A22	int
,	O
PREFIX_0F3A40	int
,	O
PREFIX_0F3A41	int
,	O
PREFIX_0F3A42	int
,	O
PREFIX_0F3A44	int
,	O
PREFIX_0F3A60	int
,	O
PREFIX_0F3A61	int
,	O
PREFIX_0F3A62	int
,	O
PREFIX_0F3A63	int
,	O
PREFIX_0F3ACC	int
,	O
PREFIX_0F3ACE	int
,	O
PREFIX_0F3ACF	int
,	O
PREFIX_0F3ADF	int
,	O
PREFIX_VEX_0F10	int
,	O
PREFIX_VEX_0F11	int
,	O
PREFIX_VEX_0F12	int
,	O
PREFIX_VEX_0F16	int
,	O
PREFIX_VEX_0F2A	int
,	O
PREFIX_VEX_0F2C	int
,	O
PREFIX_VEX_0F2D	int
,	O
PREFIX_VEX_0F2E	int
,	O
PREFIX_VEX_0F2F	int
,	O
PREFIX_VEX_0F41	int
,	O
PREFIX_VEX_0F42	int
,	O
PREFIX_VEX_0F44	int
,	O
PREFIX_VEX_0F45	int
,	O
PREFIX_VEX_0F46	int
,	O
PREFIX_VEX_0F47	int
,	O
PREFIX_VEX_0F4A	int
,	O
PREFIX_VEX_0F4B	int
,	O
PREFIX_VEX_0F51	int
,	O
PREFIX_VEX_0F52	int
,	O
PREFIX_VEX_0F53	int
,	O
PREFIX_VEX_0F58	int
,	O
PREFIX_VEX_0F59	int
,	O
PREFIX_VEX_0F5A	int
,	O
PREFIX_VEX_0F5B	int
,	O
PREFIX_VEX_0F5C	int
,	O
PREFIX_VEX_0F5D	int
,	O
PREFIX_VEX_0F5E	int
,	O
PREFIX_VEX_0F5F	int
,	O
PREFIX_VEX_0F60	int
,	O
PREFIX_VEX_0F61	int
,	O
PREFIX_VEX_0F62	int
,	O
PREFIX_VEX_0F63	int
,	O
PREFIX_VEX_0F64	int
,	O
PREFIX_VEX_0F65	int
,	O
PREFIX_VEX_0F66	int
,	O
PREFIX_VEX_0F67	int
,	O
PREFIX_VEX_0F68	int
,	O
PREFIX_VEX_0F69	int
,	O
PREFIX_VEX_0F6A	int
,	O
PREFIX_VEX_0F6B	int
,	O
PREFIX_VEX_0F6C	int
,	O
PREFIX_VEX_0F6D	int
,	O
PREFIX_VEX_0F6E	int
,	O
PREFIX_VEX_0F6F	int
,	O
PREFIX_VEX_0F70	int
,	O
PREFIX_VEX_0F71_REG_2	int
,	O
PREFIX_VEX_0F71_REG_4	int
,	O
PREFIX_VEX_0F71_REG_6	int
,	O
PREFIX_VEX_0F72_REG_2	int
,	O
PREFIX_VEX_0F72_REG_4	int
,	O
PREFIX_VEX_0F72_REG_6	int
,	O
PREFIX_VEX_0F73_REG_2	int
,	O
PREFIX_VEX_0F73_REG_3	int
,	O
PREFIX_VEX_0F73_REG_6	int
,	O
PREFIX_VEX_0F73_REG_7	int
,	O
PREFIX_VEX_0F74	int
,	O
PREFIX_VEX_0F75	int
,	O
PREFIX_VEX_0F76	int
,	O
PREFIX_VEX_0F77	int
,	O
PREFIX_VEX_0F7C	int
,	O
PREFIX_VEX_0F7D	int
,	O
PREFIX_VEX_0F7E	int
,	O
PREFIX_VEX_0F7F	int
,	O
PREFIX_VEX_0F90	int
,	O
PREFIX_VEX_0F91	int
,	O
PREFIX_VEX_0F92	int
,	O
PREFIX_VEX_0F93	int
,	O
PREFIX_VEX_0F98	int
,	O
PREFIX_VEX_0F99	int
,	O
PREFIX_VEX_0FC2	int
,	O
PREFIX_VEX_0FC4	int
,	O
PREFIX_VEX_0FC5	int
,	O
PREFIX_VEX_0FD0	int
,	O
PREFIX_VEX_0FD1	int
,	O
PREFIX_VEX_0FD2	int
,	O
PREFIX_VEX_0FD3	int
,	O
PREFIX_VEX_0FD4	int
,	O
PREFIX_VEX_0FD5	int
,	O
PREFIX_VEX_0FD6	int
,	O
PREFIX_VEX_0FD7	int
,	O
PREFIX_VEX_0FD8	int
,	O
PREFIX_VEX_0FD9	int
,	O
PREFIX_VEX_0FDA	int
,	O
PREFIX_VEX_0FDB	int
,	O
PREFIX_VEX_0FDC	int
,	O
PREFIX_VEX_0FDD	int
,	O
PREFIX_VEX_0FDE	int
,	O
PREFIX_VEX_0FDF	int
,	O
PREFIX_VEX_0FE0	int
,	O
PREFIX_VEX_0FE1	int
,	O
PREFIX_VEX_0FE2	int
,	O
PREFIX_VEX_0FE3	int
,	O
PREFIX_VEX_0FE4	int
,	O
PREFIX_VEX_0FE5	int
,	O
PREFIX_VEX_0FE6	int
,	O
PREFIX_VEX_0FE7	int
,	O
PREFIX_VEX_0FE8	int
,	O
PREFIX_VEX_0FE9	int
,	O
PREFIX_VEX_0FEA	int
,	O
PREFIX_VEX_0FEB	int
,	O
PREFIX_VEX_0FEC	int
,	O
PREFIX_VEX_0FED	int
,	O
PREFIX_VEX_0FEE	int
,	O
PREFIX_VEX_0FEF	int
,	O
PREFIX_VEX_0FF0	int
,	O
PREFIX_VEX_0FF1	int
,	O
PREFIX_VEX_0FF2	int
,	O
PREFIX_VEX_0FF3	int
,	O
PREFIX_VEX_0FF4	int
,	O
PREFIX_VEX_0FF5	int
,	O
PREFIX_VEX_0FF6	int
,	O
PREFIX_VEX_0FF7	int
,	O
PREFIX_VEX_0FF8	int
,	O
PREFIX_VEX_0FF9	int
,	O
PREFIX_VEX_0FFA	int
,	O
PREFIX_VEX_0FFB	int
,	O
PREFIX_VEX_0FFC	int
,	O
PREFIX_VEX_0FFD	int
,	O
PREFIX_VEX_0FFE	int
,	O
PREFIX_VEX_0F3800	int
,	O
PREFIX_VEX_0F3801	int
,	O
PREFIX_VEX_0F3802	int
,	O
PREFIX_VEX_0F3803	int
,	O
PREFIX_VEX_0F3804	int
,	O
PREFIX_VEX_0F3805	int
,	O
PREFIX_VEX_0F3806	int
,	O
PREFIX_VEX_0F3807	int
,	O
PREFIX_VEX_0F3808	int
,	O
PREFIX_VEX_0F3809	int
,	O
PREFIX_VEX_0F380A	int
,	O
PREFIX_VEX_0F380B	int
,	O
PREFIX_VEX_0F380C	int
,	O
PREFIX_VEX_0F380D	int
,	O
PREFIX_VEX_0F380E	int
,	O
PREFIX_VEX_0F380F	int
,	O
PREFIX_VEX_0F3813	int
,	O
PREFIX_VEX_0F3816	int
,	O
PREFIX_VEX_0F3817	int
,	O
PREFIX_VEX_0F3818	int
,	O
PREFIX_VEX_0F3819	int
,	O
PREFIX_VEX_0F381A	int
,	O
PREFIX_VEX_0F381C	int
,	O
PREFIX_VEX_0F381D	int
,	O
PREFIX_VEX_0F381E	int
,	O
PREFIX_VEX_0F3820	int
,	O
PREFIX_VEX_0F3821	int
,	O
PREFIX_VEX_0F3822	int
,	O
PREFIX_VEX_0F3823	int
,	O
PREFIX_VEX_0F3824	int
,	O
PREFIX_VEX_0F3825	int
,	O
PREFIX_VEX_0F3828	int
,	O
PREFIX_VEX_0F3829	int
,	O
PREFIX_VEX_0F382A	int
,	O
PREFIX_VEX_0F382B	int
,	O
PREFIX_VEX_0F382C	int
,	O
PREFIX_VEX_0F382D	int
,	O
PREFIX_VEX_0F382E	int
,	O
PREFIX_VEX_0F382F	int
,	O
PREFIX_VEX_0F3830	int
,	O
PREFIX_VEX_0F3831	int
,	O
PREFIX_VEX_0F3832	int
,	O
PREFIX_VEX_0F3833	int
,	O
PREFIX_VEX_0F3834	int
,	O
PREFIX_VEX_0F3835	int
,	O
PREFIX_VEX_0F3836	int
,	O
PREFIX_VEX_0F3837	int
,	O
PREFIX_VEX_0F3838	int
,	O
PREFIX_VEX_0F3839	int
,	O
PREFIX_VEX_0F383A	int
,	O
PREFIX_VEX_0F383B	int
,	O
PREFIX_VEX_0F383C	int
,	O
PREFIX_VEX_0F383D	int
,	O
PREFIX_VEX_0F383E	int
,	O
PREFIX_VEX_0F383F	int
,	O
PREFIX_VEX_0F3840	int
,	O
PREFIX_VEX_0F3841	int
,	O
PREFIX_VEX_0F3845	int
,	O
PREFIX_VEX_0F3846	int
,	O
PREFIX_VEX_0F3847	int
,	O
PREFIX_VEX_0F3858	int
,	O
PREFIX_VEX_0F3859	int
,	O
PREFIX_VEX_0F385A	int
,	O
PREFIX_VEX_0F3878	int
,	O
PREFIX_VEX_0F3879	int
,	O
PREFIX_VEX_0F388C	int
,	O
PREFIX_VEX_0F388E	int
,	O
PREFIX_VEX_0F3890	int
,	O
PREFIX_VEX_0F3891	int
,	O
PREFIX_VEX_0F3892	int
,	O
PREFIX_VEX_0F3893	int
,	O
PREFIX_VEX_0F3896	int
,	O
PREFIX_VEX_0F3897	int
,	O
PREFIX_VEX_0F3898	int
,	O
PREFIX_VEX_0F3899	int
,	O
PREFIX_VEX_0F389A	int
,	O
PREFIX_VEX_0F389B	int
,	O
PREFIX_VEX_0F389C	int
,	O
PREFIX_VEX_0F389D	int
,	O
PREFIX_VEX_0F389E	int
,	O
PREFIX_VEX_0F389F	int
,	O
PREFIX_VEX_0F38A6	int
,	O
PREFIX_VEX_0F38A7	int
,	O
PREFIX_VEX_0F38A8	int
,	O
PREFIX_VEX_0F38A9	int
,	O
PREFIX_VEX_0F38AA	int
,	O
PREFIX_VEX_0F38AB	int
,	O
PREFIX_VEX_0F38AC	int
,	O
PREFIX_VEX_0F38AD	int
,	O
PREFIX_VEX_0F38AE	int
,	O
PREFIX_VEX_0F38AF	int
,	O
PREFIX_VEX_0F38B6	int
,	O
PREFIX_VEX_0F38B7	int
,	O
PREFIX_VEX_0F38B8	int
,	O
PREFIX_VEX_0F38B9	int
,	O
PREFIX_VEX_0F38BA	int
,	O
PREFIX_VEX_0F38BB	int
,	O
PREFIX_VEX_0F38BC	int
,	O
PREFIX_VEX_0F38BD	int
,	O
PREFIX_VEX_0F38BE	int
,	O
PREFIX_VEX_0F38BF	int
,	O
PREFIX_VEX_0F38CF	int
,	O
PREFIX_VEX_0F38DB	int
,	O
PREFIX_VEX_0F38DC	int
,	O
PREFIX_VEX_0F38DD	int
,	O
PREFIX_VEX_0F38DE	int
,	O
PREFIX_VEX_0F38DF	int
,	O
PREFIX_VEX_0F38F2	int
,	O
PREFIX_VEX_0F38F3_REG_1	int
,	O
PREFIX_VEX_0F38F3_REG_2	int
,	O
PREFIX_VEX_0F38F3_REG_3	int
,	O
PREFIX_VEX_0F38F5	int
,	O
PREFIX_VEX_0F38F6	int
,	O
PREFIX_VEX_0F38F7	int
,	O
PREFIX_VEX_0F3A00	int
,	O
PREFIX_VEX_0F3A01	int
,	O
PREFIX_VEX_0F3A02	int
,	O
PREFIX_VEX_0F3A04	int
,	O
PREFIX_VEX_0F3A05	int
,	O
PREFIX_VEX_0F3A06	int
,	O
PREFIX_VEX_0F3A08	int
,	O
PREFIX_VEX_0F3A09	int
,	O
PREFIX_VEX_0F3A0A	int
,	O
PREFIX_VEX_0F3A0B	int
,	O
PREFIX_VEX_0F3A0C	int
,	O
PREFIX_VEX_0F3A0D	int
,	O
PREFIX_VEX_0F3A0E	int
,	O
PREFIX_VEX_0F3A0F	int
,	O
PREFIX_VEX_0F3A14	int
,	O
PREFIX_VEX_0F3A15	int
,	O
PREFIX_VEX_0F3A16	int
,	O
PREFIX_VEX_0F3A17	int
,	O
PREFIX_VEX_0F3A18	int
,	O
PREFIX_VEX_0F3A19	int
,	O
PREFIX_VEX_0F3A1D	int
,	O
PREFIX_VEX_0F3A20	int
,	O
PREFIX_VEX_0F3A21	int
,	O
PREFIX_VEX_0F3A22	int
,	O
PREFIX_VEX_0F3A30	int
,	O
PREFIX_VEX_0F3A31	int
,	O
PREFIX_VEX_0F3A32	int
,	O
PREFIX_VEX_0F3A33	int
,	O
PREFIX_VEX_0F3A38	int
,	O
PREFIX_VEX_0F3A39	int
,	O
PREFIX_VEX_0F3A40	int
,	O
PREFIX_VEX_0F3A41	int
,	O
PREFIX_VEX_0F3A42	int
,	O
PREFIX_VEX_0F3A44	int
,	O
PREFIX_VEX_0F3A46	int
,	O
PREFIX_VEX_0F3A48	int
,	O
PREFIX_VEX_0F3A49	int
,	O
PREFIX_VEX_0F3A4A	int
,	O
PREFIX_VEX_0F3A4B	int
,	O
PREFIX_VEX_0F3A4C	int
,	O
PREFIX_VEX_0F3A5C	int
,	O
PREFIX_VEX_0F3A5D	int
,	O
PREFIX_VEX_0F3A5E	int
,	O
PREFIX_VEX_0F3A5F	int
,	O
PREFIX_VEX_0F3A60	int
,	O
PREFIX_VEX_0F3A61	int
,	O
PREFIX_VEX_0F3A62	int
,	O
PREFIX_VEX_0F3A63	int
,	O
PREFIX_VEX_0F3A68	int
,	O
PREFIX_VEX_0F3A69	int
,	O
PREFIX_VEX_0F3A6A	int
,	O
PREFIX_VEX_0F3A6B	int
,	O
PREFIX_VEX_0F3A6C	int
,	O
PREFIX_VEX_0F3A6D	int
,	O
PREFIX_VEX_0F3A6E	int
,	O
PREFIX_VEX_0F3A6F	int
,	O
PREFIX_VEX_0F3A78	int
,	O
PREFIX_VEX_0F3A79	int
,	O
PREFIX_VEX_0F3A7A	int
,	O
PREFIX_VEX_0F3A7B	int
,	O
PREFIX_VEX_0F3A7C	int
,	O
PREFIX_VEX_0F3A7D	int
,	O
PREFIX_VEX_0F3A7E	int
,	O
PREFIX_VEX_0F3A7F	int
,	O
PREFIX_VEX_0F3ACE	int
,	O
PREFIX_VEX_0F3ACF	int
,	O
PREFIX_VEX_0F3ADF	int
,	O
PREFIX_VEX_0F3AF0	int
,	O
PREFIX_EVEX_0F10	int
,	O
PREFIX_EVEX_0F11	int
,	O
PREFIX_EVEX_0F12	int
,	O
PREFIX_EVEX_0F13	int
,	O
PREFIX_EVEX_0F14	int
,	O
PREFIX_EVEX_0F15	int
,	O
PREFIX_EVEX_0F16	int
,	O
PREFIX_EVEX_0F17	int
,	O
PREFIX_EVEX_0F28	int
,	O
PREFIX_EVEX_0F29	int
,	O
PREFIX_EVEX_0F2A	int
,	O
PREFIX_EVEX_0F2B	int
,	O
PREFIX_EVEX_0F2C	int
,	O
PREFIX_EVEX_0F2D	int
,	O
PREFIX_EVEX_0F2E	int
,	O
PREFIX_EVEX_0F2F	int
,	O
PREFIX_EVEX_0F51	int
,	O
PREFIX_EVEX_0F54	int
,	O
PREFIX_EVEX_0F55	int
,	O
PREFIX_EVEX_0F56	int
,	O
PREFIX_EVEX_0F57	int
,	O
PREFIX_EVEX_0F58	int
,	O
PREFIX_EVEX_0F59	int
,	O
PREFIX_EVEX_0F5A	int
,	O
PREFIX_EVEX_0F5B	int
,	O
PREFIX_EVEX_0F5C	int
,	O
PREFIX_EVEX_0F5D	int
,	O
PREFIX_EVEX_0F5E	int
,	O
PREFIX_EVEX_0F5F	int
,	O
PREFIX_EVEX_0F60	int
,	O
PREFIX_EVEX_0F61	int
,	O
PREFIX_EVEX_0F62	int
,	O
PREFIX_EVEX_0F63	int
,	O
PREFIX_EVEX_0F64	int
,	O
PREFIX_EVEX_0F65	int
,	O
PREFIX_EVEX_0F66	int
,	O
PREFIX_EVEX_0F67	int
,	O
PREFIX_EVEX_0F68	int
,	O
PREFIX_EVEX_0F69	int
,	O
PREFIX_EVEX_0F6A	int
,	O
PREFIX_EVEX_0F6B	int
,	O
PREFIX_EVEX_0F6C	int
,	O
PREFIX_EVEX_0F6D	int
,	O
PREFIX_EVEX_0F6E	int
,	O
PREFIX_EVEX_0F6F	int
,	O
PREFIX_EVEX_0F70	int
,	O
PREFIX_EVEX_0F71_REG_2	int
,	O
PREFIX_EVEX_0F71_REG_4	int
,	O
PREFIX_EVEX_0F71_REG_6	int
,	O
PREFIX_EVEX_0F72_REG_0	int
,	O
PREFIX_EVEX_0F72_REG_1	int
,	O
PREFIX_EVEX_0F72_REG_2	int
,	O
PREFIX_EVEX_0F72_REG_4	int
,	O
PREFIX_EVEX_0F72_REG_6	int
,	O
PREFIX_EVEX_0F73_REG_2	int
,	O
PREFIX_EVEX_0F73_REG_3	int
,	O
PREFIX_EVEX_0F73_REG_6	int
,	O
PREFIX_EVEX_0F73_REG_7	int
,	O
PREFIX_EVEX_0F74	int
,	O
PREFIX_EVEX_0F75	int
,	O
PREFIX_EVEX_0F76	int
,	O
PREFIX_EVEX_0F78	int
,	O
PREFIX_EVEX_0F79	int
,	O
PREFIX_EVEX_0F7A	int
,	O
PREFIX_EVEX_0F7B	int
,	O
PREFIX_EVEX_0F7E	int
,	O
PREFIX_EVEX_0F7F	int
,	O
PREFIX_EVEX_0FC2	int
,	O
PREFIX_EVEX_0FC4	int
,	O
PREFIX_EVEX_0FC5	int
,	O
PREFIX_EVEX_0FC6	int
,	O
PREFIX_EVEX_0FD1	int
,	O
PREFIX_EVEX_0FD2	int
,	O
PREFIX_EVEX_0FD3	int
,	O
PREFIX_EVEX_0FD4	int
,	O
PREFIX_EVEX_0FD5	int
,	O
PREFIX_EVEX_0FD6	int
,	O
PREFIX_EVEX_0FD8	int
,	O
PREFIX_EVEX_0FD9	int
,	O
PREFIX_EVEX_0FDA	int
,	O
PREFIX_EVEX_0FDB	int
,	O
PREFIX_EVEX_0FDC	int
,	O
PREFIX_EVEX_0FDD	int
,	O
PREFIX_EVEX_0FDE	int
,	O
PREFIX_EVEX_0FDF	int
,	O
PREFIX_EVEX_0FE0	int
,	O
PREFIX_EVEX_0FE1	int
,	O
PREFIX_EVEX_0FE2	int
,	O
PREFIX_EVEX_0FE3	int
,	O
PREFIX_EVEX_0FE4	int
,	O
PREFIX_EVEX_0FE5	int
,	O
PREFIX_EVEX_0FE6	int
,	O
PREFIX_EVEX_0FE7	int
,	O
PREFIX_EVEX_0FE8	int
,	O
PREFIX_EVEX_0FE9	int
,	O
PREFIX_EVEX_0FEA	int
,	O
PREFIX_EVEX_0FEB	int
,	O
PREFIX_EVEX_0FEC	int
,	O
PREFIX_EVEX_0FED	int
,	O
PREFIX_EVEX_0FEE	int
,	O
PREFIX_EVEX_0FEF	int
,	O
PREFIX_EVEX_0FF1	int
,	O
PREFIX_EVEX_0FF2	int
,	O
PREFIX_EVEX_0FF3	int
,	O
PREFIX_EVEX_0FF4	int
,	O
PREFIX_EVEX_0FF5	int
,	O
PREFIX_EVEX_0FF6	int
,	O
PREFIX_EVEX_0FF8	int
,	O
PREFIX_EVEX_0FF9	int
,	O
PREFIX_EVEX_0FFA	int
,	O
PREFIX_EVEX_0FFB	int
,	O
PREFIX_EVEX_0FFC	int
,	O
PREFIX_EVEX_0FFD	int
,	O
PREFIX_EVEX_0FFE	int
,	O
PREFIX_EVEX_0F3800	int
,	O
PREFIX_EVEX_0F3804	int
,	O
PREFIX_EVEX_0F380B	int
,	O
PREFIX_EVEX_0F380C	int
,	O
PREFIX_EVEX_0F380D	int
,	O
PREFIX_EVEX_0F3810	int
,	O
PREFIX_EVEX_0F3811	int
,	O
PREFIX_EVEX_0F3812	int
,	O
PREFIX_EVEX_0F3813	int
,	O
PREFIX_EVEX_0F3814	int
,	O
PREFIX_EVEX_0F3815	int
,	O
PREFIX_EVEX_0F3816	int
,	O
PREFIX_EVEX_0F3818	int
,	O
PREFIX_EVEX_0F3819	int
,	O
PREFIX_EVEX_0F381A	int
,	O
PREFIX_EVEX_0F381B	int
,	O
PREFIX_EVEX_0F381C	int
,	O
PREFIX_EVEX_0F381D	int
,	O
PREFIX_EVEX_0F381E	int
,	O
PREFIX_EVEX_0F381F	int
,	O
PREFIX_EVEX_0F3820	int
,	O
PREFIX_EVEX_0F3821	int
,	O
PREFIX_EVEX_0F3822	int
,	O
PREFIX_EVEX_0F3823	int
,	O
PREFIX_EVEX_0F3824	int
,	O
PREFIX_EVEX_0F3825	int
,	O
PREFIX_EVEX_0F3826	int
,	O
PREFIX_EVEX_0F3827	int
,	O
PREFIX_EVEX_0F3828	int
,	O
PREFIX_EVEX_0F3829	int
,	O
PREFIX_EVEX_0F382A	int
,	O
PREFIX_EVEX_0F382B	int
,	O
PREFIX_EVEX_0F382C	int
,	O
PREFIX_EVEX_0F382D	int
,	O
PREFIX_EVEX_0F3830	int
,	O
PREFIX_EVEX_0F3831	int
,	O
PREFIX_EVEX_0F3832	int
,	O
PREFIX_EVEX_0F3833	int
,	O
PREFIX_EVEX_0F3834	int
,	O
PREFIX_EVEX_0F3835	int
,	O
PREFIX_EVEX_0F3836	int
,	O
PREFIX_EVEX_0F3837	int
,	O
PREFIX_EVEX_0F3838	int
,	O
PREFIX_EVEX_0F3839	int
,	O
PREFIX_EVEX_0F383A	int
,	O
PREFIX_EVEX_0F383B	int
,	O
PREFIX_EVEX_0F383C	int
,	O
PREFIX_EVEX_0F383D	int
,	O
PREFIX_EVEX_0F383E	int
,	O
PREFIX_EVEX_0F383F	int
,	O
PREFIX_EVEX_0F3840	int
,	O
PREFIX_EVEX_0F3842	int
,	O
PREFIX_EVEX_0F3843	int
,	O
PREFIX_EVEX_0F3844	int
,	O
PREFIX_EVEX_0F3845	int
,	O
PREFIX_EVEX_0F3846	int
,	O
PREFIX_EVEX_0F3847	int
,	O
PREFIX_EVEX_0F384C	int
,	O
PREFIX_EVEX_0F384D	int
,	O
PREFIX_EVEX_0F384E	int
,	O
PREFIX_EVEX_0F384F	int
,	O
PREFIX_EVEX_0F3850	int
,	O
PREFIX_EVEX_0F3851	int
,	O
PREFIX_EVEX_0F3852	int
,	O
PREFIX_EVEX_0F3853	int
,	O
PREFIX_EVEX_0F3854	int
,	O
PREFIX_EVEX_0F3855	int
,	O
PREFIX_EVEX_0F3858	int
,	O
PREFIX_EVEX_0F3859	int
,	O
PREFIX_EVEX_0F385A	int
,	O
PREFIX_EVEX_0F385B	int
,	O
PREFIX_EVEX_0F3862	int
,	O
PREFIX_EVEX_0F3863	int
,	O
PREFIX_EVEX_0F3864	int
,	O
PREFIX_EVEX_0F3865	int
,	O
PREFIX_EVEX_0F3866	int
,	O
PREFIX_EVEX_0F3868	int
,	O
PREFIX_EVEX_0F3870	int
,	O
PREFIX_EVEX_0F3871	int
,	O
PREFIX_EVEX_0F3872	int
,	O
PREFIX_EVEX_0F3873	int
,	O
PREFIX_EVEX_0F3875	int
,	O
PREFIX_EVEX_0F3876	int
,	O
PREFIX_EVEX_0F3877	int
,	O
PREFIX_EVEX_0F3878	int
,	O
PREFIX_EVEX_0F3879	int
,	O
PREFIX_EVEX_0F387A	int
,	O
PREFIX_EVEX_0F387B	int
,	O
PREFIX_EVEX_0F387C	int
,	O
PREFIX_EVEX_0F387D	int
,	O
PREFIX_EVEX_0F387E	int
,	O
PREFIX_EVEX_0F387F	int
,	O
PREFIX_EVEX_0F3883	int
,	O
PREFIX_EVEX_0F3888	int
,	O
PREFIX_EVEX_0F3889	int
,	O
PREFIX_EVEX_0F388A	int
,	O
PREFIX_EVEX_0F388B	int
,	O
PREFIX_EVEX_0F388D	int
,	O
PREFIX_EVEX_0F388F	int
,	O
PREFIX_EVEX_0F3890	int
,	O
PREFIX_EVEX_0F3891	int
,	O
PREFIX_EVEX_0F3892	int
,	O
PREFIX_EVEX_0F3893	int
,	O
PREFIX_EVEX_0F3896	int
,	O
PREFIX_EVEX_0F3897	int
,	O
PREFIX_EVEX_0F3898	int
,	O
PREFIX_EVEX_0F3899	int
,	O
PREFIX_EVEX_0F389A	int
,	O
PREFIX_EVEX_0F389B	int
,	O
PREFIX_EVEX_0F389C	int
,	O
PREFIX_EVEX_0F389D	int
,	O
PREFIX_EVEX_0F389E	int
,	O
PREFIX_EVEX_0F389F	int
,	O
PREFIX_EVEX_0F38A0	int
,	O
PREFIX_EVEX_0F38A1	int
,	O
PREFIX_EVEX_0F38A2	int
,	O
PREFIX_EVEX_0F38A3	int
,	O
PREFIX_EVEX_0F38A6	int
,	O
PREFIX_EVEX_0F38A7	int
,	O
PREFIX_EVEX_0F38A8	int
,	O
PREFIX_EVEX_0F38A9	int
,	O
PREFIX_EVEX_0F38AA	int
,	O
PREFIX_EVEX_0F38AB	int
,	O
PREFIX_EVEX_0F38AC	int
,	O
PREFIX_EVEX_0F38AD	int
,	O
PREFIX_EVEX_0F38AE	int
,	O
PREFIX_EVEX_0F38AF	int
,	O
PREFIX_EVEX_0F38B4	int
,	O
PREFIX_EVEX_0F38B5	int
,	O
PREFIX_EVEX_0F38B6	int
,	O
PREFIX_EVEX_0F38B7	int
,	O
PREFIX_EVEX_0F38B8	int
,	O
PREFIX_EVEX_0F38B9	int
,	O
PREFIX_EVEX_0F38BA	int
,	O
PREFIX_EVEX_0F38BB	int
,	O
PREFIX_EVEX_0F38BC	int
,	O
PREFIX_EVEX_0F38BD	int
,	O
PREFIX_EVEX_0F38BE	int
,	O
PREFIX_EVEX_0F38BF	int
,	O
PREFIX_EVEX_0F38C4	int
,	O
PREFIX_EVEX_0F38C6_REG_1	int
,	O
PREFIX_EVEX_0F38C6_REG_2	int
,	O
PREFIX_EVEX_0F38C6_REG_5	int
,	O
PREFIX_EVEX_0F38C6_REG_6	int
,	O
PREFIX_EVEX_0F38C7_REG_1	int
,	O
PREFIX_EVEX_0F38C7_REG_2	int
,	O
PREFIX_EVEX_0F38C7_REG_5	int
,	O
PREFIX_EVEX_0F38C7_REG_6	int
,	O
PREFIX_EVEX_0F38C8	int
,	O
PREFIX_EVEX_0F38CA	int
,	O
PREFIX_EVEX_0F38CB	int
,	O
PREFIX_EVEX_0F38CC	int
,	O
PREFIX_EVEX_0F38CD	int
,	O
PREFIX_EVEX_0F38CF	int
,	O
PREFIX_EVEX_0F38DC	int
,	O
PREFIX_EVEX_0F38DD	int
,	O
PREFIX_EVEX_0F38DE	int
,	O
PREFIX_EVEX_0F38DF	int
,	O
PREFIX_EVEX_0F3A00	int
,	O
PREFIX_EVEX_0F3A01	int
,	O
PREFIX_EVEX_0F3A03	int
,	O
PREFIX_EVEX_0F3A04	int
,	O
PREFIX_EVEX_0F3A05	int
,	O
PREFIX_EVEX_0F3A08	int
,	O
PREFIX_EVEX_0F3A09	int
,	O
PREFIX_EVEX_0F3A0A	int
,	O
PREFIX_EVEX_0F3A0B	int
,	O
PREFIX_EVEX_0F3A0F	int
,	O
PREFIX_EVEX_0F3A14	int
,	O
PREFIX_EVEX_0F3A15	int
,	O
PREFIX_EVEX_0F3A16	int
,	O
PREFIX_EVEX_0F3A17	int
,	O
PREFIX_EVEX_0F3A18	int
,	O
PREFIX_EVEX_0F3A19	int
,	O
PREFIX_EVEX_0F3A1A	int
,	O
PREFIX_EVEX_0F3A1B	int
,	O
PREFIX_EVEX_0F3A1D	int
,	O
PREFIX_EVEX_0F3A1E	int
,	O
PREFIX_EVEX_0F3A1F	int
,	O
PREFIX_EVEX_0F3A20	int
,	O
PREFIX_EVEX_0F3A21	int
,	O
PREFIX_EVEX_0F3A22	int
,	O
PREFIX_EVEX_0F3A23	int
,	O
PREFIX_EVEX_0F3A25	int
,	O
PREFIX_EVEX_0F3A26	int
,	O
PREFIX_EVEX_0F3A27	int
,	O
PREFIX_EVEX_0F3A38	int
,	O
PREFIX_EVEX_0F3A39	int
,	O
PREFIX_EVEX_0F3A3A	int
,	O
PREFIX_EVEX_0F3A3B	int
,	O
PREFIX_EVEX_0F3A3E	int
,	O
PREFIX_EVEX_0F3A3F	int
,	O
PREFIX_EVEX_0F3A42	int
,	O
PREFIX_EVEX_0F3A43	int
,	O
PREFIX_EVEX_0F3A44	int
,	O
PREFIX_EVEX_0F3A50	int
,	O
PREFIX_EVEX_0F3A51	int
,	O
PREFIX_EVEX_0F3A54	int
,	O
PREFIX_EVEX_0F3A55	int
,	O
PREFIX_EVEX_0F3A56	int
,	O
PREFIX_EVEX_0F3A57	int
,	O
PREFIX_EVEX_0F3A66	int
,	O
PREFIX_EVEX_0F3A67	int
,	O
PREFIX_EVEX_0F3A70	int
,	O
PREFIX_EVEX_0F3A71	int
,	O
PREFIX_EVEX_0F3A72	int
,	O
PREFIX_EVEX_0F3A73	int
,	O
PREFIX_EVEX_0F3ACE	int
,	O
PREFIX_EVEX_0F3ACF	int
}	O
;	O
enum	O
{	O
X86_64_06	int
=	O
0	int
,	O
X86_64_07	int
,	O
X86_64_0D	int
,	O
X86_64_16	int
,	O
X86_64_17	int
,	O
X86_64_1E	int
,	O
X86_64_1F	int
,	O
X86_64_27	int
,	O
X86_64_2F	int
,	O
X86_64_37	int
,	O
X86_64_3F	int
,	O
X86_64_60	int
,	O
X86_64_61	int
,	O
X86_64_62	int
,	O
X86_64_63	int
,	O
X86_64_6D	int
,	O
X86_64_6F	int
,	O
X86_64_82	int
,	O
X86_64_9A	int
,	O
X86_64_C4	int
,	O
X86_64_C5	int
,	O
X86_64_CE	int
,	O
X86_64_D4	int
,	O
X86_64_D5	int
,	O
X86_64_E8	int
,	O
X86_64_E9	int
,	O
X86_64_EA	int
,	O
X86_64_0F01_REG_0	int
,	O
X86_64_0F01_REG_1	int
,	O
X86_64_0F01_REG_2	int
,	O
X86_64_0F01_REG_3	int
}	O
;	O
enum	O
{	O
THREE_BYTE_0F38	int
=	O
0	int
,	O
THREE_BYTE_0F3A	int
}	O
;	O
enum	O
{	O
XOP_08	int
=	O
0	int
,	O
XOP_09	int
,	O
XOP_0A	int
}	O
;	O
enum	O
{	O
VEX_0F	int
=	O
0	int
,	O
VEX_0F38	int
,	O
VEX_0F3A	int
}	O
;	O
enum	O
{	O
EVEX_0F	int
=	O
0	int
,	O
EVEX_0F38	int
,	O
EVEX_0F3A	int
}	O
;	O
enum	O
{	O
VEX_LEN_0F12_P_0_M_0	int
=	O
0	int
,	O
VEX_LEN_0F12_P_0_M_1	int
,	O
VEX_LEN_0F12_P_2	int
,	O
VEX_LEN_0F13_M_0	int
,	O
VEX_LEN_0F16_P_0_M_0	int
,	O
VEX_LEN_0F16_P_0_M_1	int
,	O
VEX_LEN_0F16_P_2	int
,	O
VEX_LEN_0F17_M_0	int
,	O
VEX_LEN_0F41_P_0	int
,	O
VEX_LEN_0F41_P_2	int
,	O
VEX_LEN_0F42_P_0	int
,	O
VEX_LEN_0F42_P_2	int
,	O
VEX_LEN_0F44_P_0	int
,	O
VEX_LEN_0F44_P_2	int
,	O
VEX_LEN_0F45_P_0	int
,	O
VEX_LEN_0F45_P_2	int
,	O
VEX_LEN_0F46_P_0	int
,	O
VEX_LEN_0F46_P_2	int
,	O
VEX_LEN_0F47_P_0	int
,	O
VEX_LEN_0F47_P_2	int
,	O
VEX_LEN_0F4A_P_0	int
,	O
VEX_LEN_0F4A_P_2	int
,	O
VEX_LEN_0F4B_P_0	int
,	O
VEX_LEN_0F4B_P_2	int
,	O
VEX_LEN_0F6E_P_2	int
,	O
VEX_LEN_0F77_P_0	int
,	O
VEX_LEN_0F7E_P_1	int
,	O
VEX_LEN_0F7E_P_2	int
,	O
VEX_LEN_0F90_P_0	int
,	O
VEX_LEN_0F90_P_2	int
,	O
VEX_LEN_0F91_P_0	int
,	O
VEX_LEN_0F91_P_2	int
,	O
VEX_LEN_0F92_P_0	int
,	O
VEX_LEN_0F92_P_2	int
,	O
VEX_LEN_0F92_P_3	int
,	O
VEX_LEN_0F93_P_0	int
,	O
VEX_LEN_0F93_P_2	int
,	O
VEX_LEN_0F93_P_3	int
,	O
VEX_LEN_0F98_P_0	int
,	O
VEX_LEN_0F98_P_2	int
,	O
VEX_LEN_0F99_P_0	int
,	O
VEX_LEN_0F99_P_2	int
,	O
VEX_LEN_0FAE_R_2_M_0	int
,	O
VEX_LEN_0FAE_R_3_M_0	int
,	O
VEX_LEN_0FC4_P_2	int
,	O
VEX_LEN_0FC5_P_2	int
,	O
VEX_LEN_0FD6_P_2	int
,	O
VEX_LEN_0FF7_P_2	int
,	O
VEX_LEN_0F3816_P_2	int
,	O
VEX_LEN_0F3819_P_2	int
,	O
VEX_LEN_0F381A_P_2_M_0	int
,	O
VEX_LEN_0F3836_P_2	int
,	O
VEX_LEN_0F3841_P_2	int
,	O
VEX_LEN_0F385A_P_2_M_0	int
,	O
VEX_LEN_0F38DB_P_2	int
,	O
VEX_LEN_0F38F2_P_0	int
,	O
VEX_LEN_0F38F3_R_1_P_0	int
,	O
VEX_LEN_0F38F3_R_2_P_0	int
,	O
VEX_LEN_0F38F3_R_3_P_0	int
,	O
VEX_LEN_0F38F5_P_0	int
,	O
VEX_LEN_0F38F5_P_1	int
,	O
VEX_LEN_0F38F5_P_3	int
,	O
VEX_LEN_0F38F6_P_3	int
,	O
VEX_LEN_0F38F7_P_0	int
,	O
VEX_LEN_0F38F7_P_1	int
,	O
VEX_LEN_0F38F7_P_2	int
,	O
VEX_LEN_0F38F7_P_3	int
,	O
VEX_LEN_0F3A00_P_2	int
,	O
VEX_LEN_0F3A01_P_2	int
,	O
VEX_LEN_0F3A06_P_2	int
,	O
VEX_LEN_0F3A14_P_2	int
,	O
VEX_LEN_0F3A15_P_2	int
,	O
VEX_LEN_0F3A16_P_2	int
,	O
VEX_LEN_0F3A17_P_2	int
,	O
VEX_LEN_0F3A18_P_2	int
,	O
VEX_LEN_0F3A19_P_2	int
,	O
VEX_LEN_0F3A20_P_2	int
,	O
VEX_LEN_0F3A21_P_2	int
,	O
VEX_LEN_0F3A22_P_2	int
,	O
VEX_LEN_0F3A30_P_2	int
,	O
VEX_LEN_0F3A31_P_2	int
,	O
VEX_LEN_0F3A32_P_2	int
,	O
VEX_LEN_0F3A33_P_2	int
,	O
VEX_LEN_0F3A38_P_2	int
,	O
VEX_LEN_0F3A39_P_2	int
,	O
VEX_LEN_0F3A41_P_2	int
,	O
VEX_LEN_0F3A46_P_2	int
,	O
VEX_LEN_0F3A60_P_2	int
,	O
VEX_LEN_0F3A61_P_2	int
,	O
VEX_LEN_0F3A62_P_2	int
,	O
VEX_LEN_0F3A63_P_2	int
,	O
VEX_LEN_0F3A6A_P_2	int
,	O
VEX_LEN_0F3A6B_P_2	int
,	O
VEX_LEN_0F3A6E_P_2	int
,	O
VEX_LEN_0F3A6F_P_2	int
,	O
VEX_LEN_0F3A7A_P_2	int
,	O
VEX_LEN_0F3A7B_P_2	int
,	O
VEX_LEN_0F3A7E_P_2	int
,	O
VEX_LEN_0F3A7F_P_2	int
,	O
VEX_LEN_0F3ADF_P_2	int
,	O
VEX_LEN_0F3AF0_P_3	int
,	O
VEX_LEN_0FXOP_08_CC	int
,	O
VEX_LEN_0FXOP_08_CD	int
,	O
VEX_LEN_0FXOP_08_CE	int
,	O
VEX_LEN_0FXOP_08_CF	int
,	O
VEX_LEN_0FXOP_08_EC	int
,	O
VEX_LEN_0FXOP_08_ED	int
,	O
VEX_LEN_0FXOP_08_EE	int
,	O
VEX_LEN_0FXOP_08_EF	int
,	O
VEX_LEN_0FXOP_09_80	int
,	O
VEX_LEN_0FXOP_09_81	int
}	O
;	O
enum	O
{	O
EVEX_LEN_0F6E_P_2	int
=	O
0	int
,	O
EVEX_LEN_0F7E_P_1	int
,	O
EVEX_LEN_0F7E_P_2	int
,	O
EVEX_LEN_0FD6_P_2	int
,	O
EVEX_LEN_0F3819_P_2_W_0	int
,	O
EVEX_LEN_0F3819_P_2_W_1	int
,	O
EVEX_LEN_0F381A_P_2_W_0	int
,	O
EVEX_LEN_0F381A_P_2_W_1	int
,	O
EVEX_LEN_0F381B_P_2_W_0	int
,	O
EVEX_LEN_0F381B_P_2_W_1	int
,	O
EVEX_LEN_0F385A_P_2_W_0	int
,	O
EVEX_LEN_0F385A_P_2_W_1	int
,	O
EVEX_LEN_0F385B_P_2_W_0	int
,	O
EVEX_LEN_0F385B_P_2_W_1	int
,	O
EVEX_LEN_0F38C6_REG_1_PREFIX_2	int
,	O
EVEX_LEN_0F38C6_REG_2_PREFIX_2	int
,	O
EVEX_LEN_0F38C6_REG_5_PREFIX_2	int
,	O
EVEX_LEN_0F38C6_REG_6_PREFIX_2	int
,	O
EVEX_LEN_0F38C7_R_1_P_2_W_0	int
,	O
EVEX_LEN_0F38C7_R_1_P_2_W_1	int
,	O
EVEX_LEN_0F38C7_R_2_P_2_W_0	int
,	O
EVEX_LEN_0F38C7_R_2_P_2_W_1	int
,	O
EVEX_LEN_0F38C7_R_5_P_2_W_0	int
,	O
EVEX_LEN_0F38C7_R_5_P_2_W_1	int
,	O
EVEX_LEN_0F38C7_R_6_P_2_W_0	int
,	O
EVEX_LEN_0F38C7_R_6_P_2_W_1	int
,	O
EVEX_LEN_0F3A18_P_2_W_0	int
,	O
EVEX_LEN_0F3A18_P_2_W_1	int
,	O
EVEX_LEN_0F3A19_P_2_W_0	int
,	O
EVEX_LEN_0F3A19_P_2_W_1	int
,	O
EVEX_LEN_0F3A1A_P_2_W_0	int
,	O
EVEX_LEN_0F3A1A_P_2_W_1	int
,	O
EVEX_LEN_0F3A1B_P_2_W_0	int
,	O
EVEX_LEN_0F3A1B_P_2_W_1	int
,	O
EVEX_LEN_0F3A23_P_2_W_0	int
,	O
EVEX_LEN_0F3A23_P_2_W_1	int
,	O
EVEX_LEN_0F3A38_P_2_W_0	int
,	O
EVEX_LEN_0F3A38_P_2_W_1	int
,	O
EVEX_LEN_0F3A39_P_2_W_0	int
,	O
EVEX_LEN_0F3A39_P_2_W_1	int
,	O
EVEX_LEN_0F3A3A_P_2_W_0	int
,	O
EVEX_LEN_0F3A3A_P_2_W_1	int
,	O
EVEX_LEN_0F3A3B_P_2_W_0	int
,	O
EVEX_LEN_0F3A3B_P_2_W_1	int
,	O
EVEX_LEN_0F3A43_P_2_W_0	int
,	O
EVEX_LEN_0F3A43_P_2_W_1	int
}	O
;	O
enum	O
{	O
VEX_W_0F41_P_0_LEN_1	int
=	O
0	int
,	O
VEX_W_0F41_P_2_LEN_1	int
,	O
VEX_W_0F42_P_0_LEN_1	int
,	O
VEX_W_0F42_P_2_LEN_1	int
,	O
VEX_W_0F44_P_0_LEN_0	int
,	O
VEX_W_0F44_P_2_LEN_0	int
,	O
VEX_W_0F45_P_0_LEN_1	int
,	O
VEX_W_0F45_P_2_LEN_1	int
,	O
VEX_W_0F46_P_0_LEN_1	int
,	O
VEX_W_0F46_P_2_LEN_1	int
,	O
VEX_W_0F47_P_0_LEN_1	int
,	O
VEX_W_0F47_P_2_LEN_1	int
,	O
VEX_W_0F4A_P_0_LEN_1	int
,	O
VEX_W_0F4A_P_2_LEN_1	int
,	O
VEX_W_0F4B_P_0_LEN_1	int
,	O
VEX_W_0F4B_P_2_LEN_1	int
,	O
VEX_W_0F90_P_0_LEN_0	int
,	O
VEX_W_0F90_P_2_LEN_0	int
,	O
VEX_W_0F91_P_0_LEN_0	int
,	O
VEX_W_0F91_P_2_LEN_0	int
,	O
VEX_W_0F92_P_0_LEN_0	int
,	O
VEX_W_0F92_P_2_LEN_0	int
,	O
VEX_W_0F93_P_0_LEN_0	int
,	O
VEX_W_0F93_P_2_LEN_0	int
,	O
VEX_W_0F98_P_0_LEN_0	int
,	O
VEX_W_0F98_P_2_LEN_0	int
,	O
VEX_W_0F99_P_0_LEN_0	int
,	O
VEX_W_0F99_P_2_LEN_0	int
,	O
VEX_W_0F380C_P_2	int
,	O
VEX_W_0F380D_P_2	int
,	O
VEX_W_0F380E_P_2	int
,	O
VEX_W_0F380F_P_2	int
,	O
VEX_W_0F3816_P_2	int
,	O
VEX_W_0F3818_P_2	int
,	O
VEX_W_0F3819_P_2	int
,	O
VEX_W_0F381A_P_2_M_0	int
,	O
VEX_W_0F382C_P_2_M_0	int
,	O
VEX_W_0F382D_P_2_M_0	int
,	O
VEX_W_0F382E_P_2_M_0	int
,	O
VEX_W_0F382F_P_2_M_0	int
,	O
VEX_W_0F3836_P_2	int
,	O
VEX_W_0F3846_P_2	int
,	O
VEX_W_0F3858_P_2	int
,	O
VEX_W_0F3859_P_2	int
,	O
VEX_W_0F385A_P_2_M_0	int
,	O
VEX_W_0F3878_P_2	int
,	O
VEX_W_0F3879_P_2	int
,	O
VEX_W_0F38CF_P_2	int
,	O
VEX_W_0F3A00_P_2	int
,	O
VEX_W_0F3A01_P_2	int
,	O
VEX_W_0F3A02_P_2	int
,	O
VEX_W_0F3A04_P_2	int
,	O
VEX_W_0F3A05_P_2	int
,	O
VEX_W_0F3A06_P_2	int
,	O
VEX_W_0F3A18_P_2	int
,	O
VEX_W_0F3A19_P_2	int
,	O
VEX_W_0F3A30_P_2_LEN_0	int
,	O
VEX_W_0F3A31_P_2_LEN_0	int
,	O
VEX_W_0F3A32_P_2_LEN_0	int
,	O
VEX_W_0F3A33_P_2_LEN_0	int
,	O
VEX_W_0F3A38_P_2	int
,	O
VEX_W_0F3A39_P_2	int
,	O
VEX_W_0F3A46_P_2	int
,	O
VEX_W_0F3A48_P_2	int
,	O
VEX_W_0F3A49_P_2	int
,	O
VEX_W_0F3A4A_P_2	int
,	O
VEX_W_0F3A4B_P_2	int
,	O
VEX_W_0F3A4C_P_2	int
,	O
VEX_W_0F3ACE_P_2	int
,	O
VEX_W_0F3ACF_P_2	int
,	O
EVEX_W_0F10_P_0	int
,	O
EVEX_W_0F10_P_1	int
,	O
EVEX_W_0F10_P_2	int
,	O
EVEX_W_0F10_P_3	int
,	O
EVEX_W_0F11_P_0	int
,	O
EVEX_W_0F11_P_1	int
,	O
EVEX_W_0F11_P_2	int
,	O
EVEX_W_0F11_P_3	int
,	O
EVEX_W_0F12_P_0_M_0	int
,	O
EVEX_W_0F12_P_0_M_1	int
,	O
EVEX_W_0F12_P_1	int
,	O
EVEX_W_0F12_P_2	int
,	O
EVEX_W_0F12_P_3	int
,	O
EVEX_W_0F13_P_0	int
,	O
EVEX_W_0F13_P_2	int
,	O
EVEX_W_0F14_P_0	int
,	O
EVEX_W_0F14_P_2	int
,	O
EVEX_W_0F15_P_0	int
,	O
EVEX_W_0F15_P_2	int
,	O
EVEX_W_0F16_P_0_M_0	int
,	O
EVEX_W_0F16_P_0_M_1	int
,	O
EVEX_W_0F16_P_1	int
,	O
EVEX_W_0F16_P_2	int
,	O
EVEX_W_0F17_P_0	int
,	O
EVEX_W_0F17_P_2	int
,	O
EVEX_W_0F28_P_0	int
,	O
EVEX_W_0F28_P_2	int
,	O
EVEX_W_0F29_P_0	int
,	O
EVEX_W_0F29_P_2	int
,	O
EVEX_W_0F2A_P_3	int
,	O
EVEX_W_0F2B_P_0	int
,	O
EVEX_W_0F2B_P_2	int
,	O
EVEX_W_0F2E_P_0	int
,	O
EVEX_W_0F2E_P_2	int
,	O
EVEX_W_0F2F_P_0	int
,	O
EVEX_W_0F2F_P_2	int
,	O
EVEX_W_0F51_P_0	int
,	O
EVEX_W_0F51_P_1	int
,	O
EVEX_W_0F51_P_2	int
,	O
EVEX_W_0F51_P_3	int
,	O
EVEX_W_0F54_P_0	int
,	O
EVEX_W_0F54_P_2	int
,	O
EVEX_W_0F55_P_0	int
,	O
EVEX_W_0F55_P_2	int
,	O
EVEX_W_0F56_P_0	int
,	O
EVEX_W_0F56_P_2	int
,	O
EVEX_W_0F57_P_0	int
,	O
EVEX_W_0F57_P_2	int
,	O
EVEX_W_0F58_P_0	int
,	O
EVEX_W_0F58_P_1	int
,	O
EVEX_W_0F58_P_2	int
,	O
EVEX_W_0F58_P_3	int
,	O
EVEX_W_0F59_P_0	int
,	O
EVEX_W_0F59_P_1	int
,	O
EVEX_W_0F59_P_2	int
,	O
EVEX_W_0F59_P_3	int
,	O
EVEX_W_0F5A_P_0	int
,	O
EVEX_W_0F5A_P_1	int
,	O
EVEX_W_0F5A_P_2	int
,	O
EVEX_W_0F5A_P_3	int
,	O
EVEX_W_0F5B_P_0	int
,	O
EVEX_W_0F5B_P_1	int
,	O
EVEX_W_0F5B_P_2	int
,	O
EVEX_W_0F5C_P_0	int
,	O
EVEX_W_0F5C_P_1	int
,	O
EVEX_W_0F5C_P_2	int
,	O
EVEX_W_0F5C_P_3	int
,	O
EVEX_W_0F5D_P_0	int
,	O
EVEX_W_0F5D_P_1	int
,	O
EVEX_W_0F5D_P_2	int
,	O
EVEX_W_0F5D_P_3	int
,	O
EVEX_W_0F5E_P_0	int
,	O
EVEX_W_0F5E_P_1	int
,	O
EVEX_W_0F5E_P_2	int
,	O
EVEX_W_0F5E_P_3	int
,	O
EVEX_W_0F5F_P_0	int
,	O
EVEX_W_0F5F_P_1	int
,	O
EVEX_W_0F5F_P_2	int
,	O
EVEX_W_0F5F_P_3	int
,	O
EVEX_W_0F62_P_2	int
,	O
EVEX_W_0F66_P_2	int
,	O
EVEX_W_0F6A_P_2	int
,	O
EVEX_W_0F6B_P_2	int
,	O
EVEX_W_0F6C_P_2	int
,	O
EVEX_W_0F6D_P_2	int
,	O
EVEX_W_0F6F_P_1	int
,	O
EVEX_W_0F6F_P_2	int
,	O
EVEX_W_0F6F_P_3	int
,	O
EVEX_W_0F70_P_2	int
,	O
EVEX_W_0F72_R_2_P_2	int
,	O
EVEX_W_0F72_R_6_P_2	int
,	O
EVEX_W_0F73_R_2_P_2	int
,	O
EVEX_W_0F73_R_6_P_2	int
,	O
EVEX_W_0F76_P_2	int
,	O
EVEX_W_0F78_P_0	int
,	O
EVEX_W_0F78_P_2	int
,	O
EVEX_W_0F79_P_0	int
,	O
EVEX_W_0F79_P_2	int
,	O
EVEX_W_0F7A_P_1	int
,	O
EVEX_W_0F7A_P_2	int
,	O
EVEX_W_0F7A_P_3	int
,	O
EVEX_W_0F7B_P_2	int
,	O
EVEX_W_0F7B_P_3	int
,	O
EVEX_W_0F7E_P_1	int
,	O
EVEX_W_0F7F_P_1	int
,	O
EVEX_W_0F7F_P_2	int
,	O
EVEX_W_0F7F_P_3	int
,	O
EVEX_W_0FC2_P_0	int
,	O
EVEX_W_0FC2_P_1	int
,	O
EVEX_W_0FC2_P_2	int
,	O
EVEX_W_0FC2_P_3	int
,	O
EVEX_W_0FC6_P_0	int
,	O
EVEX_W_0FC6_P_2	int
,	O
EVEX_W_0FD2_P_2	int
,	O
EVEX_W_0FD3_P_2	int
,	O
EVEX_W_0FD4_P_2	int
,	O
EVEX_W_0FD6_P_2	int
,	O
EVEX_W_0FE6_P_1	int
,	O
EVEX_W_0FE6_P_2	int
,	O
EVEX_W_0FE6_P_3	int
,	O
EVEX_W_0FE7_P_2	int
,	O
EVEX_W_0FF2_P_2	int
,	O
EVEX_W_0FF3_P_2	int
,	O
EVEX_W_0FF4_P_2	int
,	O
EVEX_W_0FFA_P_2	int
,	O
EVEX_W_0FFB_P_2	int
,	O
EVEX_W_0FFE_P_2	int
,	O
EVEX_W_0F380C_P_2	int
,	O
EVEX_W_0F380D_P_2	int
,	O
EVEX_W_0F3810_P_1	int
,	O
EVEX_W_0F3810_P_2	int
,	O
EVEX_W_0F3811_P_1	int
,	O
EVEX_W_0F3811_P_2	int
,	O
EVEX_W_0F3812_P_1	int
,	O
EVEX_W_0F3812_P_2	int
,	O
EVEX_W_0F3813_P_1	int
,	O
EVEX_W_0F3813_P_2	int
,	O
EVEX_W_0F3814_P_1	int
,	O
EVEX_W_0F3815_P_1	int
,	O
EVEX_W_0F3818_P_2	int
,	O
EVEX_W_0F3819_P_2	int
,	O
EVEX_W_0F381A_P_2	int
,	O
EVEX_W_0F381B_P_2	int
,	O
EVEX_W_0F381E_P_2	int
,	O
EVEX_W_0F381F_P_2	int
,	O
EVEX_W_0F3820_P_1	int
,	O
EVEX_W_0F3821_P_1	int
,	O
EVEX_W_0F3822_P_1	int
,	O
EVEX_W_0F3823_P_1	int
,	O
EVEX_W_0F3824_P_1	int
,	O
EVEX_W_0F3825_P_1	int
,	O
EVEX_W_0F3825_P_2	int
,	O
EVEX_W_0F3826_P_1	int
,	O
EVEX_W_0F3826_P_2	int
,	O
EVEX_W_0F3828_P_1	int
,	O
EVEX_W_0F3828_P_2	int
,	O
EVEX_W_0F3829_P_1	int
,	O
EVEX_W_0F3829_P_2	int
,	O
EVEX_W_0F382A_P_1	int
,	O
EVEX_W_0F382A_P_2	int
,	O
EVEX_W_0F382B_P_2	int
,	O
EVEX_W_0F3830_P_1	int
,	O
EVEX_W_0F3831_P_1	int
,	O
EVEX_W_0F3832_P_1	int
,	O
EVEX_W_0F3833_P_1	int
,	O
EVEX_W_0F3834_P_1	int
,	O
EVEX_W_0F3835_P_1	int
,	O
EVEX_W_0F3835_P_2	int
,	O
EVEX_W_0F3837_P_2	int
,	O
EVEX_W_0F3838_P_1	int
,	O
EVEX_W_0F3839_P_1	int
,	O
EVEX_W_0F383A_P_1	int
,	O
EVEX_W_0F3840_P_2	int
,	O
EVEX_W_0F3852_P_1	int
,	O
EVEX_W_0F3854_P_2	int
,	O
EVEX_W_0F3855_P_2	int
,	O
EVEX_W_0F3858_P_2	int
,	O
EVEX_W_0F3859_P_2	int
,	O
EVEX_W_0F385A_P_2	int
,	O
EVEX_W_0F385B_P_2	int
,	O
EVEX_W_0F3862_P_2	int
,	O
EVEX_W_0F3863_P_2	int
,	O
EVEX_W_0F3866_P_2	int
,	O
EVEX_W_0F3868_P_3	int
,	O
EVEX_W_0F3870_P_2	int
,	O
EVEX_W_0F3871_P_2	int
,	O
EVEX_W_0F3872_P_1	int
,	O
EVEX_W_0F3872_P_2	int
,	O
EVEX_W_0F3872_P_3	int
,	O
EVEX_W_0F3873_P_2	int
,	O
EVEX_W_0F3875_P_2	int
,	O
EVEX_W_0F3878_P_2	int
,	O
EVEX_W_0F3879_P_2	int
,	O
EVEX_W_0F387A_P_2	int
,	O
EVEX_W_0F387B_P_2	int
,	O
EVEX_W_0F387D_P_2	int
,	O
EVEX_W_0F3883_P_2	int
,	O
EVEX_W_0F388D_P_2	int
,	O
EVEX_W_0F3891_P_2	int
,	O
EVEX_W_0F3893_P_2	int
,	O
EVEX_W_0F38A1_P_2	int
,	O
EVEX_W_0F38A3_P_2	int
,	O
EVEX_W_0F38C7_R_1_P_2	int
,	O
EVEX_W_0F38C7_R_2_P_2	int
,	O
EVEX_W_0F38C7_R_5_P_2	int
,	O
EVEX_W_0F38C7_R_6_P_2	int
,	O
EVEX_W_0F3A00_P_2	int
,	O
EVEX_W_0F3A01_P_2	int
,	O
EVEX_W_0F3A04_P_2	int
,	O
EVEX_W_0F3A05_P_2	int
,	O
EVEX_W_0F3A08_P_2	int
,	O
EVEX_W_0F3A09_P_2	int
,	O
EVEX_W_0F3A0A_P_2	int
,	O
EVEX_W_0F3A0B_P_2	int
,	O
EVEX_W_0F3A18_P_2	int
,	O
EVEX_W_0F3A19_P_2	int
,	O
EVEX_W_0F3A1A_P_2	int
,	O
EVEX_W_0F3A1B_P_2	int
,	O
EVEX_W_0F3A1D_P_2	int
,	O
EVEX_W_0F3A21_P_2	int
,	O
EVEX_W_0F3A23_P_2	int
,	O
EVEX_W_0F3A38_P_2	int
,	O
EVEX_W_0F3A39_P_2	int
,	O
EVEX_W_0F3A3A_P_2	int
,	O
EVEX_W_0F3A3B_P_2	int
,	O
EVEX_W_0F3A3E_P_2	int
,	O
EVEX_W_0F3A3F_P_2	int
,	O
EVEX_W_0F3A42_P_2	int
,	O
EVEX_W_0F3A43_P_2	int
,	O
EVEX_W_0F3A50_P_2	int
,	O
EVEX_W_0F3A51_P_2	int
,	O
EVEX_W_0F3A56_P_2	int
,	O
EVEX_W_0F3A57_P_2	int
,	O
EVEX_W_0F3A66_P_2	int
,	O
EVEX_W_0F3A67_P_2	int
,	O
EVEX_W_0F3A70_P_2	int
,	O
EVEX_W_0F3A71_P_2	int
,	O
EVEX_W_0F3A72_P_2	int
,	O
EVEX_W_0F3A73_P_2	int
,	O
EVEX_W_0F3ACE_P_2	int
,	O
EVEX_W_0F3ACF_P_2	int
}	O
;	O
typedef	O
void	O
(	O
*	O
op_rtn	pointer
)	O
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
;	O
struct	O
dis386	struct
{	O
const	O
char	O
*	O
name	pointer
;	O
struct	O
{	O
op_rtn	pointer
rtn	pointer
;	O
int	O
bytemode	int
;	O
}	O
op	array
[	O
MAX_OPERANDS	int
]	O
;	O
unsigned	O
int	O
prefix_requirement	int
;	O
}	O
;	O
static	O
const	O
struct	O
dis386	struct
dis386	struct
[	O
]	O
=	O
{	O
{	O
"addB"	pointer
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"addS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"addB"	pointer
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"addS"	pointer
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"addB"	pointer
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"addS"	pointer
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_06	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_07	int
)	O
}	O
,	O
{	O
"orB"	pointer
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"orS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"orB"	pointer
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"orS"	pointer
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"orB"	pointer
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"orS"	pointer
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_0D	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"adcB"	pointer
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcB"	pointer
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcS"	pointer
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcB"	pointer
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcS"	pointer
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_16	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_17	int
)	O
}	O
,	O
{	O
"sbbB"	pointer
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbB"	pointer
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbS"	pointer
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbB"	pointer
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbS"	pointer
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_1E	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_1F	int
)	O
}	O
,	O
{	O
"andB"	pointer
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"andS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"andB"	pointer
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"andS"	pointer
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"andB"	pointer
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"andS"	pointer
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_27	int
)	O
}	O
,	O
{	O
"subB"	pointer
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"subS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"subB"	pointer
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"subS"	pointer
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"subB"	pointer
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"subS"	pointer
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_2F	int
)	O
}	O
,	O
{	O
"xorB"	pointer
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorB"	pointer
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorS"	pointer
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorB"	pointer
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorS"	pointer
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_37	int
)	O
}	O
,	O
{	O
"cmpB"	pointer
,	O
{	O
Eb	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpS"	pointer
,	O
{	O
Ev	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpB"	pointer
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpS"	pointer
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpB"	pointer
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpS"	pointer
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_3F	int
)	O
}	O
,	O
{	O
"inc{S|}"	pointer
,	O
{	O
RMeAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	pointer
,	O
{	O
RMeCX	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	pointer
,	O
{	O
RMeDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	pointer
,	O
{	O
RMeBX	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	pointer
,	O
{	O
RMeSP	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	pointer
,	O
{	O
RMeBP	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	pointer
,	O
{	O
RMeSI	O
}	O
,	O
0	int
}	O
,	O
{	O
"inc{S|}"	pointer
,	O
{	O
RMeDI	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	pointer
,	O
{	O
RMeAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	pointer
,	O
{	O
RMeCX	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	pointer
,	O
{	O
RMeDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	pointer
,	O
{	O
RMeBX	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	pointer
,	O
{	O
RMeSP	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	pointer
,	O
{	O
RMeBP	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	pointer
,	O
{	O
RMeSI	O
}	O
,	O
0	int
}	O
,	O
{	O
"dec{S|}"	pointer
,	O
{	O
RMeDI	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	pointer
,	O
{	O
RMrAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	pointer
,	O
{	O
RMrCX	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	pointer
,	O
{	O
RMrDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	pointer
,	O
{	O
RMrBX	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	pointer
,	O
{	O
RMrSP	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	pointer
,	O
{	O
RMrBP	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	pointer
,	O
{	O
RMrSI	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushV"	pointer
,	O
{	O
RMrDI	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	pointer
,	O
{	O
RMrAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	pointer
,	O
{	O
RMrCX	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	pointer
,	O
{	O
RMrDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	pointer
,	O
{	O
RMrBX	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	pointer
,	O
{	O
RMrSP	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	pointer
,	O
{	O
RMrBP	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	pointer
,	O
{	O
RMrSI	O
}	O
,	O
0	int
}	O
,	O
{	O
"popV"	pointer
,	O
{	O
RMrDI	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_60	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_61	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_62	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_63	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pushT"	pointer
,	O
{	O
sIv	O
}	O
,	O
0	int
}	O
,	O
{	O
"imulS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushT"	pointer
,	O
{	O
sIbT	O
}	O
,	O
0	int
}	O
,	O
{	O
"imulS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"ins{b|}"	pointer
,	O
{	O
Ybr	O
,	O
indirDX	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_6D	int
)	O
}	O
,	O
{	O
"outs{b|}"	pointer
,	O
{	O
indirDXr	O
,	O
Xb	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_6F	int
)	O
}	O
,	O
{	O
"joH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnoH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jbH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jaeH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jeH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jneH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jbeH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jaH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jsH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnsH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jpH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnpH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jlH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jgeH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jleH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jgH"	pointer
,	O
{	O
Jb	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_80	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_81	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_82	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_83	int
)	O
}	O
,	O
{	O
"testB"	pointer
,	O
{	O
Eb	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"testS"	pointer
,	O
{	O
Ev	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgB"	pointer
,	O
{	O
Ebh2	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	pointer
,	O
{	O
Evh2	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	pointer
,	O
{	O
Ebh3	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"movS"	pointer
,	O
{	O
Evh3	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	pointer
,	O
{	O
Gb	O
,	O
EbS	O
}	O
,	O
0	int
}	O
,	O
{	O
"movS"	pointer
,	O
{	O
Gv	O
,	O
EvS	O
}	O
,	O
0	int
}	O
,	O
{	O
"movD"	pointer
,	O
{	O
Sv	O
,	O
Sw	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_8D	int
)	O
}	O
,	O
{	O
"movD"	pointer
,	O
{	O
Sw	O
,	O
Sv	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_8F	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_90	int
)	O
}	O
,	O
{	O
"xchgS"	pointer
,	O
{	O
RMeCX	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	pointer
,	O
{	O
RMeDX	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	pointer
,	O
{	O
RMeBX	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	pointer
,	O
{	O
RMeSP	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	pointer
,	O
{	O
RMeBP	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	pointer
,	O
{	O
RMeSI	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	pointer
,	O
{	O
RMeDI	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"cW{t|}R"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"cR{t|}O"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_9A	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pushfT"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"popfT"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"sahf"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"lahf"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LB"	pointer
,	O
{	O
AL	O
,	O
Ob	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LS"	pointer
,	O
{	O
eAX	O
,	O
Ov	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LB"	pointer
,	O
{	O
Ob	O
,	O
AL	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LS"	pointer
,	O
{	O
Ov	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"movs{b|}"	pointer
,	O
{	O
Ybr	O
,	O
Xb	O
}	O
,	O
0	int
}	O
,	O
{	O
"movs{R|}"	pointer
,	O
{	O
Yvr	O
,	O
Xv	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmps{b|}"	pointer
,	O
{	O
Xb	O
,	O
Yb	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmps{R|}"	pointer
,	O
{	O
Xv	O
,	O
Yv	O
}	O
,	O
0	int
}	O
,	O
{	O
"testB"	pointer
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"testS"	pointer
,	O
{	O
eAX	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"stosB"	pointer
,	O
{	O
Ybr	O
,	O
AL	O
}	O
,	O
0	int
}	O
,	O
{	O
"stosS"	pointer
,	O
{	O
Yvr	O
,	O
eAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"lodsB"	pointer
,	O
{	O
ALr	O
,	O
Xb	O
}	O
,	O
0	int
}	O
,	O
{	O
"lodsS"	pointer
,	O
{	O
eAXr	O
,	O
Xv	O
}	O
,	O
0	int
}	O
,	O
{	O
"scasB"	pointer
,	O
{	O
AL	O
,	O
Yb	O
}	O
,	O
0	int
}	O
,	O
{	O
"scasS"	pointer
,	O
{	O
eAX	O
,	O
Yv	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	pointer
,	O
{	O
RMAL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	pointer
,	O
{	O
RMCL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	pointer
,	O
{	O
RMDL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	pointer
,	O
{	O
RMBL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	pointer
,	O
{	O
RMAH	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	pointer
,	O
{	O
RMCH	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	pointer
,	O
{	O
RMDH	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"movB"	pointer
,	O
{	O
RMBH	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	pointer
,	O
{	O
RMeAX	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	pointer
,	O
{	O
RMeCX	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	pointer
,	O
{	O
RMeDX	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	pointer
,	O
{	O
RMeBX	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	pointer
,	O
{	O
RMeSP	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	pointer
,	O
{	O
RMeBP	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	pointer
,	O
{	O
RMeSI	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
"mov%LV"	pointer
,	O
{	O
RMeDI	O
,	O
Iv64	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_C0	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_C1	int
)	O
}	O
,	O
{	O
"retT"	pointer
,	O
{	O
Iw	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
"retT"	pointer
,	O
{	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_C4	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_C5	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_C6	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_C7	int
)	O
}	O
,	O
{	O
"enterT"	pointer
,	O
{	O
Iw	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"leaveT"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"Jret{|f}P"	pointer
,	O
{	O
Iw	O
}	O
,	O
0	int
}	O
,	O
{	O
"Jret{|f}P"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"int3"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"int"	pointer
,	O
{	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_CE	int
)	O
}	O
,	O
{	O
"iret%LP"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_D0	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_D1	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_D2	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_D3	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_D4	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_D5	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"xlat"	pointer
,	O
{	O
DSBX	O
}	O
,	O
0	int
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
FLOAT	O
}	O
,	O
{	O
"loopneFH"	pointer
,	O
{	O
Jb	O
,	O
XX	O
,	O
loop_jcxz_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"loopeFH"	pointer
,	O
{	O
Jb	O
,	O
XX	O
,	O
loop_jcxz_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"loopFH"	pointer
,	O
{	O
Jb	O
,	O
XX	O
,	O
loop_jcxz_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jEcxzH"	pointer
,	O
{	O
Jb	O
,	O
XX	O
,	O
loop_jcxz_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"inB"	pointer
,	O
{	O
AL	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"inG"	pointer
,	O
{	O
zAX	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"outB"	pointer
,	O
{	O
Ib	O
,	O
AL	O
}	O
,	O
0	int
}	O
,	O
{	O
"outG"	pointer
,	O
{	O
Ib	O
,	O
zAX	O
}	O
,	O
0	int
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_E8	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_E9	int
)	O
}	O
,	O
{	O
X86_64_TABLE	O
(	O
X86_64_EA	int
)	O
}	O
,	O
{	O
"jmp"	pointer
,	O
{	O
Jb	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
"inB"	pointer
,	O
{	O
AL	O
,	O
indirDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"inG"	pointer
,	O
{	O
zAX	O
,	O
indirDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"outB"	pointer
,	O
{	O
indirDX	O
,	O
AL	O
}	O
,	O
0	int
}	O
,	O
{	O
"outG"	pointer
,	O
{	O
indirDX	O
,	O
zAX	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"icebp"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"hlt"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmc"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_F6	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_F7	int
)	O
}	O
,	O
{	O
"clc"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"stc"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"cli"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"sti"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"cld"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"std"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_FE	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_FF	int
)	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	struct
dis386_twobyte	array
[	O
]	O
=	O
{	O
{	O
REG_TABLE	O
(	O
REG_0F00	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F01	int
)	O
}	O
,	O
{	O
"larS"	pointer
,	O
{	O
Gv	O
,	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
"lslS"	pointer
,	O
{	O
Gv	O
,	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"syscall"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"clts"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"sysret%LP"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"invd"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F09	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ud2"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F0D	int
)	O
}	O
,	O
{	O
"femms"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
""	pointer
,	O
{	O
MX	O
,	O
EM	O
,	O
OPSUF	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F10	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F11	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F12	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F13	int
)	O
}	O
,	O
{	O
"unpcklpX"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"unpckhpX"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F16	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F17	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F18	int
)	O
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F1A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F1B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F1C	int
)	O
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F1E	int
)	O
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"movZ"	pointer
,	O
{	O
Rm	O
,	O
Cm	O
}	O
,	O
0	int
}	O
,	O
{	O
"movZ"	pointer
,	O
{	O
Rm	O
,	O
Dm	O
}	O
,	O
0	int
}	O
,	O
{	O
"movZ"	pointer
,	O
{	O
Cm	O
,	O
Rm	O
}	O
,	O
0	int
}	O
,	O
{	O
"movZ"	pointer
,	O
{	O
Dm	O
,	O
Rm	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F24	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F26	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movapX"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movapX"	pointer
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F2F	int
)	O
}	O
,	O
{	O
"wrmsr"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdtsc"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdmsr"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdpmc"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"sysenter"	pointer
,	O
{	O
SEP	O
}	O
,	O
0	int
}	O
,	O
{	O
"sysexit"	pointer
,	O
{	O
SEP	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"getsec"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
THREE_BYTE_TABLE_PREFIX	O
(	O
THREE_BYTE_0F38	int
,	O
PREFIX_OPCODE	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
THREE_BYTE_TABLE_PREFIX	O
(	O
THREE_BYTE_0F3A	int
,	O
PREFIX_OPCODE	O
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"cmovoS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovnoS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovbS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovaeS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmoveS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovneS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovbeS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovaS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovsS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovnsS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovpS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovnpS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovlS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovgeS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovleS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmovgS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F51	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F51	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F52	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F53	int
)	O
}	O
,	O
{	O
"andpX"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"andnpX"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"orpX"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"xorpX"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F58	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F59	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F5F	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F60	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F61	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F62	int
)	O
}	O
,	O
{	O
"packsswb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pcmpgtb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pcmpgtw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pcmpgtd"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"packuswb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"punpckhbw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"punpckhwd"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"punpckhdq"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"packssdw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F6C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F6D	int
)	O
}	O
,	O
{	O
"movK"	pointer
,	O
{	O
MX	O
,	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F6F	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F70	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F71	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F72	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F73	int
)	O
}	O
,	O
{	O
"pcmpeqb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pcmpeqw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pcmpeqd"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"emms"	pointer
,	O
{	O
XX	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F78	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F79	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F7C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F7D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F7E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F7F	int
)	O
}	O
,	O
{	O
"joH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnoH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jbH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jaeH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jeH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jneH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jbeH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jaH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jsH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnsH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jpH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jnpH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jlH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jgeH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jleH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"jgH"	pointer
,	O
{	O
Jv	O
,	O
BND	O
,	O
cond_jump_flag	O
}	O
,	O
0	int
}	O
,	O
{	O
"seto"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setno"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setb"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setae"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"sete"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setne"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setbe"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"seta"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"sets"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setns"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setp"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setnp"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setl"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setge"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setle"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"setg"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"pushT"	pointer
,	O
{	O
fs	O
}	O
,	O
0	int
}	O
,	O
{	O
"popT"	pointer
,	O
{	O
fs	O
}	O
,	O
0	int
}	O
,	O
{	O
"cpuid"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"btS"	pointer
,	O
{	O
Ev	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"shldS"	pointer
,	O
{	O
Ev	O
,	O
Gv	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shldS"	pointer
,	O
{	O
Ev	O
,	O
Gv	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0FA6	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0FA7	int
)	O
}	O
,	O
{	O
"pushT"	pointer
,	O
{	O
gs	O
}	O
,	O
0	int
}	O
,	O
{	O
"popT"	pointer
,	O
{	O
gs	O
}	O
,	O
0	int
}	O
,	O
{	O
"rsm"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"btsS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrdS"	pointer
,	O
{	O
Ev	O
,	O
Gv	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrdS"	pointer
,	O
{	O
Ev	O
,	O
Gv	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0FAE	int
)	O
}	O
,	O
{	O
"imulS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpxchgB"	pointer
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpxchgS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FB2	int
)	O
}	O
,	O
{	O
"btrS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FB4	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FB5	int
)	O
}	O
,	O
{	O
"movz{bR|x}"	pointer
,	O
{	O
Gv	O
,	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"movz{wR|x}"	pointer
,	O
{	O
Gv	O
,	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FB8	int
)	O
}	O
,	O
{	O
"ud1S"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0FBA	int
)	O
}	O
,	O
{	O
"btcS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FBC	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FBD	int
)	O
}	O
,	O
{	O
"movs{bR|x}"	pointer
,	O
{	O
Gv	O
,	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"movs{wR|x}"	pointer
,	O
{	O
Gv	O
,	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
"xaddB"	pointer
,	O
{	O
Ebh1	O
,	O
Gb	O
}	O
,	O
0	int
}	O
,	O
{	O
"xaddS"	pointer
,	O
{	O
Evh1	O
,	O
Gv	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FC2	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC3	int
)	O
}	O
,	O
{	O
"pinsrw"	pointer
,	O
{	O
MX	O
,	O
Edqw	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pextrw"	pointer
,	O
{	O
Gdq	O
,	O
MS	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"shufpX"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0FC7	int
)	O
}	O
,	O
{	O
"bswap"	pointer
,	O
{	O
RMeAX	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	pointer
,	O
{	O
RMeCX	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	pointer
,	O
{	O
RMeDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	pointer
,	O
{	O
RMeBX	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	pointer
,	O
{	O
RMeSP	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	pointer
,	O
{	O
RMeBP	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	pointer
,	O
{	O
RMeSI	O
}	O
,	O
0	int
}	O
,	O
{	O
"bswap"	pointer
,	O
{	O
RMeDI	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FD0	int
)	O
}	O
,	O
{	O
"psrlw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psrld"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psrlq"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddq"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmullw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FD6	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FD7	int
)	O
}	O
,	O
{	O
"psubusb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psubusw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pminub"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pand"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddusb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddusw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmaxub"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pandn"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pavgb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psraw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psrad"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pavgw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmulhuw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmulhw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FE6	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FE7	int
)	O
}	O
,	O
{	O
"psubsb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psubsw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pminsw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"por"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddsb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddsw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmaxsw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pxor"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FF0	int
)	O
}	O
,	O
{	O
"psllw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pslld"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psllq"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmuludq"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmaddwd"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psadbw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FF7	int
)	O
}	O
,	O
{	O
"psubb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psubw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psubd"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psubq"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"paddd"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"ud0S"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
;	O
static	O
const	O
unsigned	O
char	O
onebyte_has_modrm	array
[	O
256	int
]	O
=	O
{	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
}	O
;	O
static	O
const	O
unsigned	O
char	O
twobyte_has_modrm	array
[	O
256	int
]	O
=	O
{	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
}	O
;	O
static	O
char	O
obuf	array
[	O
100	int
]	O
;	O
static	O
char	O
*	O
obufp	pointer
;	O
static	O
char	O
*	O
mnemonicendp	pointer
;	O
static	O
char	O
scratchbuf	array
[	O
100	int
]	O
;	O
static	O
unsigned	O
char	O
*	O
start_codep	pointer
;	O
static	O
unsigned	O
char	O
*	O
insn_codep	pointer
;	O
static	O
unsigned	O
char	O
*	O
codep	pointer
;	O
static	O
unsigned	O
char	O
*	O
end_codep	pointer
;	O
static	O
int	O
last_lock_prefix	int
;	O
static	O
int	O
last_repz_prefix	int
;	O
static	O
int	O
last_repnz_prefix	int
;	O
static	O
int	O
last_data_prefix	int
;	O
static	O
int	O
last_addr_prefix	int
;	O
static	O
int	O
last_rex_prefix	int
;	O
static	O
int	O
last_seg_prefix	int
;	O
static	O
int	O
fwait_prefix	int
;	O
static	O
int	O
active_seg_prefix	int
;	O
static	O
int	O
all_prefixes	array
[	O
MAX_CODE_LENGTH	int
-	O
1	int
]	O
;	O
static	O
disassemble_info	struct
*	O
the_info	pointer
;	O
static	O
struct	O
{	O
int	O
mod	int
;	O
int	O
reg	int
;	O
int	O
rm	int
;	O
}	O
modrm	struct
;	O
static	O
unsigned	O
char	O
need_modrm	char
;	O
static	O
struct	O
{	O
int	O
scale	int
;	O
int	O
index	function
;	O
int	O
base	int
;	O
}	O
sib	struct
;	O
static	O
struct	O
{	O
int	O
register_specifier	int
;	O
int	O
length	int
;	O
int	O
prefix	int
;	O
int	O
w	int
;	O
int	O
evex	int
;	O
int	O
r	int
;	O
int	O
v	int
;	O
int	O
mask_register_specifier	int
;	O
int	O
zeroing	int
;	O
int	O
ll	int
;	O
int	O
b	pointer
;	O
}	O
vex	struct
;	O
static	O
unsigned	O
char	O
need_vex	char
;	O
static	O
unsigned	O
char	O
need_vex_reg	char
;	O
static	O
unsigned	O
char	O
vex_w_done	char
;	O
struct	O
op	array
{	O
const	O
char	O
*	O
name	pointer
;	O
unsigned	O
int	O
len	long
;	O
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names64	pointer
;	O
static	O
const	O
char	O
*	O
*	O
names32	pointer
;	O
static	O
const	O
char	O
*	O
*	O
names16	pointer
;	O
static	O
const	O
char	O
*	O
*	O
names8	pointer
;	O
static	O
const	O
char	O
*	O
*	O
names8rex	pointer
;	O
static	O
const	O
char	O
*	O
*	O
names_seg	pointer
;	O
static	O
const	O
char	O
*	O
index64	pointer
;	O
static	O
const	O
char	O
*	O
index32	pointer
;	O
static	O
const	O
char	O
*	O
*	O
index16	pointer
;	O
static	O
const	O
char	O
*	O
*	O
names_bnd	pointer
;	O
static	O
const	O
char	O
*	O
intel_names64	array
[	O
]	O
=	O
{	O
"rax"	pointer
,	O
"rcx"	pointer
,	O
"rdx"	pointer
,	O
"rbx"	pointer
,	O
"rsp"	pointer
,	O
"rbp"	pointer
,	O
"rsi"	pointer
,	O
"rdi"	pointer
,	O
"r8"	pointer
,	O
"r9"	pointer
,	O
"r10"	pointer
,	O
"r11"	pointer
,	O
"r12"	pointer
,	O
"r13"	pointer
,	O
"r14"	pointer
,	O
"r15"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
intel_names32	array
[	O
]	O
=	O
{	O
"eax"	pointer
,	O
"ecx"	pointer
,	O
"edx"	pointer
,	O
"ebx"	pointer
,	O
"esp"	pointer
,	O
"ebp"	pointer
,	O
"esi"	pointer
,	O
"edi"	pointer
,	O
"r8d"	pointer
,	O
"r9d"	pointer
,	O
"r10d"	pointer
,	O
"r11d"	pointer
,	O
"r12d"	pointer
,	O
"r13d"	pointer
,	O
"r14d"	pointer
,	O
"r15d"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
intel_names16	array
[	O
]	O
=	O
{	O
"ax"	pointer
,	O
"cx"	pointer
,	O
"dx"	pointer
,	O
"bx"	pointer
,	O
"sp"	pointer
,	O
"bp"	pointer
,	O
"si"	pointer
,	O
"di"	pointer
,	O
"r8w"	pointer
,	O
"r9w"	pointer
,	O
"r10w"	pointer
,	O
"r11w"	pointer
,	O
"r12w"	pointer
,	O
"r13w"	pointer
,	O
"r14w"	pointer
,	O
"r15w"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
intel_names8	array
[	O
]	O
=	O
{	O
"al"	pointer
,	O
"cl"	pointer
,	O
"dl"	pointer
,	O
"bl"	pointer
,	O
"ah"	pointer
,	O
"ch"	pointer
,	O
"dh"	pointer
,	O
"bh"	pointer
,	O
}	O
;	O
static	O
const	O
char	O
*	O
intel_names8rex	array
[	O
]	O
=	O
{	O
"al"	pointer
,	O
"cl"	pointer
,	O
"dl"	pointer
,	O
"bl"	pointer
,	O
"spl"	pointer
,	O
"bpl"	pointer
,	O
"sil"	pointer
,	O
"dil"	pointer
,	O
"r8b"	pointer
,	O
"r9b"	pointer
,	O
"r10b"	pointer
,	O
"r11b"	pointer
,	O
"r12b"	pointer
,	O
"r13b"	pointer
,	O
"r14b"	pointer
,	O
"r15b"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
intel_names_seg	array
[	O
]	O
=	O
{	O
"es"	pointer
,	O
"cs"	pointer
,	O
"ss"	pointer
,	O
"ds"	pointer
,	O
"fs"	pointer
,	O
"gs"	pointer
,	O
"?"	pointer
,	O
"?"	pointer
,	O
}	O
;	O
static	O
const	O
char	O
*	O
intel_index64	pointer
=	O
"riz"	pointer
;	O
static	O
const	O
char	O
*	O
intel_index32	pointer
=	O
"eiz"	pointer
;	O
static	O
const	O
char	O
*	O
intel_index16	array
[	O
]	O
=	O
{	O
"bx+si"	pointer
,	O
"bx+di"	pointer
,	O
"bp+si"	pointer
,	O
"bp+di"	pointer
,	O
"si"	pointer
,	O
"di"	pointer
,	O
"bp"	pointer
,	O
"bx"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
att_names64	array
[	O
]	O
=	O
{	O
"%rax"	pointer
,	O
"%rcx"	pointer
,	O
"%rdx"	pointer
,	O
"%rbx"	pointer
,	O
"%rsp"	pointer
,	O
"%rbp"	pointer
,	O
"%rsi"	pointer
,	O
"%rdi"	pointer
,	O
"%r8"	pointer
,	O
"%r9"	pointer
,	O
"%r10"	pointer
,	O
"%r11"	pointer
,	O
"%r12"	pointer
,	O
"%r13"	pointer
,	O
"%r14"	pointer
,	O
"%r15"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
att_names32	array
[	O
]	O
=	O
{	O
"%eax"	pointer
,	O
"%ecx"	pointer
,	O
"%edx"	pointer
,	O
"%ebx"	pointer
,	O
"%esp"	pointer
,	O
"%ebp"	pointer
,	O
"%esi"	pointer
,	O
"%edi"	pointer
,	O
"%r8d"	pointer
,	O
"%r9d"	pointer
,	O
"%r10d"	pointer
,	O
"%r11d"	pointer
,	O
"%r12d"	pointer
,	O
"%r13d"	pointer
,	O
"%r14d"	pointer
,	O
"%r15d"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
att_names16	array
[	O
]	O
=	O
{	O
"%ax"	pointer
,	O
"%cx"	pointer
,	O
"%dx"	pointer
,	O
"%bx"	pointer
,	O
"%sp"	pointer
,	O
"%bp"	pointer
,	O
"%si"	pointer
,	O
"%di"	pointer
,	O
"%r8w"	pointer
,	O
"%r9w"	pointer
,	O
"%r10w"	pointer
,	O
"%r11w"	pointer
,	O
"%r12w"	pointer
,	O
"%r13w"	pointer
,	O
"%r14w"	pointer
,	O
"%r15w"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
att_names8	array
[	O
]	O
=	O
{	O
"%al"	pointer
,	O
"%cl"	pointer
,	O
"%dl"	pointer
,	O
"%bl"	pointer
,	O
"%ah"	pointer
,	O
"%ch"	pointer
,	O
"%dh"	pointer
,	O
"%bh"	pointer
,	O
}	O
;	O
static	O
const	O
char	O
*	O
att_names8rex	array
[	O
]	O
=	O
{	O
"%al"	pointer
,	O
"%cl"	pointer
,	O
"%dl"	pointer
,	O
"%bl"	pointer
,	O
"%spl"	pointer
,	O
"%bpl"	pointer
,	O
"%sil"	pointer
,	O
"%dil"	pointer
,	O
"%r8b"	pointer
,	O
"%r9b"	pointer
,	O
"%r10b"	pointer
,	O
"%r11b"	pointer
,	O
"%r12b"	pointer
,	O
"%r13b"	pointer
,	O
"%r14b"	pointer
,	O
"%r15b"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
att_names_seg	array
[	O
]	O
=	O
{	O
"%es"	pointer
,	O
"%cs"	pointer
,	O
"%ss"	pointer
,	O
"%ds"	pointer
,	O
"%fs"	pointer
,	O
"%gs"	pointer
,	O
"%?"	pointer
,	O
"%?"	pointer
,	O
}	O
;	O
static	O
const	O
char	O
*	O
att_index64	pointer
=	O
"%riz"	pointer
;	O
static	O
const	O
char	O
*	O
att_index32	pointer
=	O
"%eiz"	pointer
;	O
static	O
const	O
char	O
*	O
att_index16	array
[	O
]	O
=	O
{	O
"%bx,%si"	pointer
,	O
"%bx,%di"	pointer
,	O
"%bp,%si"	pointer
,	O
"%bp,%di"	pointer
,	O
"%si"	pointer
,	O
"%di"	pointer
,	O
"%bp"	pointer
,	O
"%bx"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names_mm	pointer
;	O
static	O
const	O
char	O
*	O
intel_names_mm	array
[	O
]	O
=	O
{	O
"mm0"	pointer
,	O
"mm1"	pointer
,	O
"mm2"	pointer
,	O
"mm3"	pointer
,	O
"mm4"	pointer
,	O
"mm5"	pointer
,	O
"mm6"	pointer
,	O
"mm7"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
att_names_mm	array
[	O
]	O
=	O
{	O
"%mm0"	pointer
,	O
"%mm1"	pointer
,	O
"%mm2"	pointer
,	O
"%mm3"	pointer
,	O
"%mm4"	pointer
,	O
"%mm5"	pointer
,	O
"%mm6"	pointer
,	O
"%mm7"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
intel_names_bnd	array
[	O
]	O
=	O
{	O
"bnd0"	pointer
,	O
"bnd1"	pointer
,	O
"bnd2"	pointer
,	O
"bnd3"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
att_names_bnd	array
[	O
]	O
=	O
{	O
"%bnd0"	pointer
,	O
"%bnd1"	pointer
,	O
"%bnd2"	pointer
,	O
"%bnd3"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names_xmm	pointer
;	O
static	O
const	O
char	O
*	O
intel_names_xmm	array
[	O
]	O
=	O
{	O
"xmm0"	pointer
,	O
"xmm1"	pointer
,	O
"xmm2"	pointer
,	O
"xmm3"	pointer
,	O
"xmm4"	pointer
,	O
"xmm5"	pointer
,	O
"xmm6"	pointer
,	O
"xmm7"	pointer
,	O
"xmm8"	pointer
,	O
"xmm9"	pointer
,	O
"xmm10"	pointer
,	O
"xmm11"	pointer
,	O
"xmm12"	pointer
,	O
"xmm13"	pointer
,	O
"xmm14"	pointer
,	O
"xmm15"	pointer
,	O
"xmm16"	pointer
,	O
"xmm17"	pointer
,	O
"xmm18"	pointer
,	O
"xmm19"	pointer
,	O
"xmm20"	pointer
,	O
"xmm21"	pointer
,	O
"xmm22"	pointer
,	O
"xmm23"	pointer
,	O
"xmm24"	pointer
,	O
"xmm25"	pointer
,	O
"xmm26"	pointer
,	O
"xmm27"	pointer
,	O
"xmm28"	pointer
,	O
"xmm29"	pointer
,	O
"xmm30"	pointer
,	O
"xmm31"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
att_names_xmm	array
[	O
]	O
=	O
{	O
"%xmm0"	pointer
,	O
"%xmm1"	pointer
,	O
"%xmm2"	pointer
,	O
"%xmm3"	pointer
,	O
"%xmm4"	pointer
,	O
"%xmm5"	pointer
,	O
"%xmm6"	pointer
,	O
"%xmm7"	pointer
,	O
"%xmm8"	pointer
,	O
"%xmm9"	pointer
,	O
"%xmm10"	pointer
,	O
"%xmm11"	pointer
,	O
"%xmm12"	pointer
,	O
"%xmm13"	pointer
,	O
"%xmm14"	pointer
,	O
"%xmm15"	pointer
,	O
"%xmm16"	pointer
,	O
"%xmm17"	pointer
,	O
"%xmm18"	pointer
,	O
"%xmm19"	pointer
,	O
"%xmm20"	pointer
,	O
"%xmm21"	pointer
,	O
"%xmm22"	pointer
,	O
"%xmm23"	pointer
,	O
"%xmm24"	pointer
,	O
"%xmm25"	pointer
,	O
"%xmm26"	pointer
,	O
"%xmm27"	pointer
,	O
"%xmm28"	pointer
,	O
"%xmm29"	pointer
,	O
"%xmm30"	pointer
,	O
"%xmm31"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names_ymm	pointer
;	O
static	O
const	O
char	O
*	O
intel_names_ymm	array
[	O
]	O
=	O
{	O
"ymm0"	pointer
,	O
"ymm1"	pointer
,	O
"ymm2"	pointer
,	O
"ymm3"	pointer
,	O
"ymm4"	pointer
,	O
"ymm5"	pointer
,	O
"ymm6"	pointer
,	O
"ymm7"	pointer
,	O
"ymm8"	pointer
,	O
"ymm9"	pointer
,	O
"ymm10"	pointer
,	O
"ymm11"	pointer
,	O
"ymm12"	pointer
,	O
"ymm13"	pointer
,	O
"ymm14"	pointer
,	O
"ymm15"	pointer
,	O
"ymm16"	pointer
,	O
"ymm17"	pointer
,	O
"ymm18"	pointer
,	O
"ymm19"	pointer
,	O
"ymm20"	pointer
,	O
"ymm21"	pointer
,	O
"ymm22"	pointer
,	O
"ymm23"	pointer
,	O
"ymm24"	pointer
,	O
"ymm25"	pointer
,	O
"ymm26"	pointer
,	O
"ymm27"	pointer
,	O
"ymm28"	pointer
,	O
"ymm29"	pointer
,	O
"ymm30"	pointer
,	O
"ymm31"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
att_names_ymm	array
[	O
]	O
=	O
{	O
"%ymm0"	pointer
,	O
"%ymm1"	pointer
,	O
"%ymm2"	pointer
,	O
"%ymm3"	pointer
,	O
"%ymm4"	pointer
,	O
"%ymm5"	pointer
,	O
"%ymm6"	pointer
,	O
"%ymm7"	pointer
,	O
"%ymm8"	pointer
,	O
"%ymm9"	pointer
,	O
"%ymm10"	pointer
,	O
"%ymm11"	pointer
,	O
"%ymm12"	pointer
,	O
"%ymm13"	pointer
,	O
"%ymm14"	pointer
,	O
"%ymm15"	pointer
,	O
"%ymm16"	pointer
,	O
"%ymm17"	pointer
,	O
"%ymm18"	pointer
,	O
"%ymm19"	pointer
,	O
"%ymm20"	pointer
,	O
"%ymm21"	pointer
,	O
"%ymm22"	pointer
,	O
"%ymm23"	pointer
,	O
"%ymm24"	pointer
,	O
"%ymm25"	pointer
,	O
"%ymm26"	pointer
,	O
"%ymm27"	pointer
,	O
"%ymm28"	pointer
,	O
"%ymm29"	pointer
,	O
"%ymm30"	pointer
,	O
"%ymm31"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names_zmm	pointer
;	O
static	O
const	O
char	O
*	O
intel_names_zmm	array
[	O
]	O
=	O
{	O
"zmm0"	pointer
,	O
"zmm1"	pointer
,	O
"zmm2"	pointer
,	O
"zmm3"	pointer
,	O
"zmm4"	pointer
,	O
"zmm5"	pointer
,	O
"zmm6"	pointer
,	O
"zmm7"	pointer
,	O
"zmm8"	pointer
,	O
"zmm9"	pointer
,	O
"zmm10"	pointer
,	O
"zmm11"	pointer
,	O
"zmm12"	pointer
,	O
"zmm13"	pointer
,	O
"zmm14"	pointer
,	O
"zmm15"	pointer
,	O
"zmm16"	pointer
,	O
"zmm17"	pointer
,	O
"zmm18"	pointer
,	O
"zmm19"	pointer
,	O
"zmm20"	pointer
,	O
"zmm21"	pointer
,	O
"zmm22"	pointer
,	O
"zmm23"	pointer
,	O
"zmm24"	pointer
,	O
"zmm25"	pointer
,	O
"zmm26"	pointer
,	O
"zmm27"	pointer
,	O
"zmm28"	pointer
,	O
"zmm29"	pointer
,	O
"zmm30"	pointer
,	O
"zmm31"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
att_names_zmm	array
[	O
]	O
=	O
{	O
"%zmm0"	pointer
,	O
"%zmm1"	pointer
,	O
"%zmm2"	pointer
,	O
"%zmm3"	pointer
,	O
"%zmm4"	pointer
,	O
"%zmm5"	pointer
,	O
"%zmm6"	pointer
,	O
"%zmm7"	pointer
,	O
"%zmm8"	pointer
,	O
"%zmm9"	pointer
,	O
"%zmm10"	pointer
,	O
"%zmm11"	pointer
,	O
"%zmm12"	pointer
,	O
"%zmm13"	pointer
,	O
"%zmm14"	pointer
,	O
"%zmm15"	pointer
,	O
"%zmm16"	pointer
,	O
"%zmm17"	pointer
,	O
"%zmm18"	pointer
,	O
"%zmm19"	pointer
,	O
"%zmm20"	pointer
,	O
"%zmm21"	pointer
,	O
"%zmm22"	pointer
,	O
"%zmm23"	pointer
,	O
"%zmm24"	pointer
,	O
"%zmm25"	pointer
,	O
"%zmm26"	pointer
,	O
"%zmm27"	pointer
,	O
"%zmm28"	pointer
,	O
"%zmm29"	pointer
,	O
"%zmm30"	pointer
,	O
"%zmm31"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
*	O
names_mask	pointer
;	O
static	O
const	O
char	O
*	O
intel_names_mask	array
[	O
]	O
=	O
{	O
"k0"	pointer
,	O
"k1"	pointer
,	O
"k2"	pointer
,	O
"k3"	pointer
,	O
"k4"	pointer
,	O
"k5"	pointer
,	O
"k6"	pointer
,	O
"k7"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
att_names_mask	array
[	O
]	O
=	O
{	O
"%k0"	pointer
,	O
"%k1"	pointer
,	O
"%k2"	pointer
,	O
"%k3"	pointer
,	O
"%k4"	pointer
,	O
"%k5"	pointer
,	O
"%k6"	pointer
,	O
"%k7"	pointer
}	O
;	O
static	O
const	O
char	O
*	O
names_rounding	array
[	O
]	O
=	O
{	O
"{rn-sae}"	pointer
,	O
"{rd-sae}"	pointer
,	O
"{ru-sae}"	pointer
,	O
"{rz-sae}"	pointer
}	O
;	O
static	O
const	O
struct	O
dis386	struct
reg_table	array
[	O
]	O
[	O
8	int
]	O
=	O
{	O
{	O
{	O
"addA"	pointer
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"orA"	pointer
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcA"	pointer
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbA"	pointer
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"andA"	pointer
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"subA"	pointer
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorA"	pointer
,	O
{	O
Ebh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpA"	pointer
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"addQ"	pointer
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"orQ"	pointer
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcQ"	pointer
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbQ"	pointer
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"andQ"	pointer
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"subQ"	pointer
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorQ"	pointer
,	O
{	O
Evh1	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpQ"	pointer
,	O
{	O
Ev	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"addQ"	pointer
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"orQ"	pointer
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"adcQ"	pointer
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"sbbQ"	pointer
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"andQ"	pointer
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"subQ"	pointer
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"xorQ"	pointer
,	O
{	O
Evh1	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
{	O
"cmpQ"	pointer
,	O
{	O
Ev	O
,	O
sIb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"popU"	pointer
,	O
{	O
stackEv	O
}	O
,	O
0	int
}	O
,	O
{	O
XOP_8F_TABLE	O
(	O
XOP_09	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
XOP_8F_TABLE	O
(	O
XOP_09	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"rolA"	pointer
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorA"	pointer
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclA"	pointer
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrA"	pointer
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	pointer
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrA"	pointer
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	pointer
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarA"	pointer
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rolQ"	pointer
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorQ"	pointer
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclQ"	pointer
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrQ"	pointer
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	pointer
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrQ"	pointer
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	pointer
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarQ"	pointer
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movA"	pointer
,	O
{	O
Ebh3	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_C6_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"movQ"	pointer
,	O
{	O
Evh3	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_C7_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"rolA"	pointer
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorA"	pointer
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclA"	pointer
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrA"	pointer
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	pointer
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrA"	pointer
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	pointer
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarA"	pointer
,	O
{	O
Eb	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rolQ"	pointer
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorQ"	pointer
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclQ"	pointer
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrQ"	pointer
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	pointer
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrQ"	pointer
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	pointer
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarQ"	pointer
,	O
{	O
Ev	O
,	O
I1	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rolA"	pointer
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorA"	pointer
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclA"	pointer
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrA"	pointer
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	pointer
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrA"	pointer
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlA"	pointer
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarA"	pointer
,	O
{	O
Eb	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rolQ"	pointer
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rorQ"	pointer
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rclQ"	pointer
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"rcrQ"	pointer
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	pointer
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shrQ"	pointer
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"shlQ"	pointer
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
{	O
"sarQ"	pointer
,	O
{	O
Ev	O
,	O
CL	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"testA"	pointer
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"testA"	pointer
,	O
{	O
Eb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"notA"	pointer
,	O
{	O
Ebh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"negA"	pointer
,	O
{	O
Ebh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"mulA"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"imulA"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"divA"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
{	O
"idivA"	pointer
,	O
{	O
Eb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"testQ"	pointer
,	O
{	O
Ev	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"testQ"	pointer
,	O
{	O
Ev	O
,	O
Iv	O
}	O
,	O
0	int
}	O
,	O
{	O
"notQ"	pointer
,	O
{	O
Evh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"negQ"	pointer
,	O
{	O
Evh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"mulQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"imulQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"divQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"idivQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"incA"	pointer
,	O
{	O
Ebh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"decA"	pointer
,	O
{	O
Ebh1	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"incQ"	pointer
,	O
{	O
Evh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"decQ"	pointer
,	O
{	O
Evh1	O
}	O
,	O
0	int
}	O
,	O
{	O
"call{&|}"	pointer
,	O
{	O
NOTRACK	O
,	O
indirEv	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_FF_REG_3	int
)	O
}	O
,	O
{	O
"jmp{&|}"	pointer
,	O
{	O
NOTRACK	O
,	O
indirEv	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_FF_REG_5	int
)	O
}	O
,	O
{	O
"pushU"	pointer
,	O
{	O
stackEv	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"sldtD"	pointer
,	O
{	O
Sv	O
}	O
,	O
0	int
}	O
,	O
{	O
"strD"	pointer
,	O
{	O
Sv	O
}	O
,	O
0	int
}	O
,	O
{	O
"lldt"	pointer
,	O
{	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
"ltr"	pointer
,	O
{	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
"verr"	pointer
,	O
{	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
"verw"	pointer
,	O
{	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_2	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_3	int
)	O
}	O
,	O
{	O
"smswD"	pointer
,	O
{	O
Sv	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_5	int
)	O
}	O
,	O
{	O
"lmsw"	pointer
,	O
{	O
Ew	O
}	O
,	O
0	int
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F01_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"prefetch"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetchw"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetchwt1"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetch"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetch"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetch"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetch"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"prefetch"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_2	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_3	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_4	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_5	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_6	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F18_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"cldemote"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdsspK"	pointer
,	O
{	O
Rdq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F1E_P_1_MOD_3_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F71_REG_2	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F71_REG_4	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F71_REG_6	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F72_REG_2	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F72_REG_4	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F72_REG_6	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F73_REG_2	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F73_REG_3	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F73_REG_6	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F73_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"montmul"	pointer
,	O
{	O
{	O
OP_0f07	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xsha1"	pointer
,	O
{	O
{	O
OP_0f07	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xsha256"	pointer
,	O
{	O
{	O
OP_0f07	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xstore-rng"	pointer
,	O
{	O
{	O
OP_0f07	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xcrypt-ecb"	pointer
,	O
{	O
{	O
OP_0f07	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xcrypt-cbc"	pointer
,	O
{	O
{	O
OP_0f07	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xcrypt-ctr"	pointer
,	O
{	O
{	O
OP_0f07	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xcrypt-cfb"	pointer
,	O
{	O
{	O
OP_0f07	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"xcrypt-ofb"	pointer
,	O
{	O
{	O
OP_0f07	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_2	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_3	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_4	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_5	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_6	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FAE_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"btQ"	pointer
,	O
{	O
Ev	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"btsQ"	pointer
,	O
{	O
Evh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"btrQ"	pointer
,	O
{	O
Evh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"btcQ"	pointer
,	O
{	O
Evh1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"cmpxchg8b"	pointer
,	O
{	O
{	O
CMPXCHG8B_Fixup	function
,	O
q_mode	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC7_REG_3	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC7_REG_4	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC7_REG_5	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC7_REG_6	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FC7_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F71_REG_2	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F71_REG_4	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F71_REG_6	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F72_REG_2	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F72_REG_4	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F72_REG_6	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F73_REG_2	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F73_REG_3	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F73_REG_6	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F73_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0FAE_REG_2	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0FAE_REG_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F3_REG_1	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F3_REG_2	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F3_REG_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"llwpcb"	pointer
,	O
{	O
{	O
OP_LWPCB_E	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"slwpcb"	pointer
,	O
{	O
{	O
OP_LWPCB_E	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lwpins"	pointer
,	O
{	O
{	O
OP_LWP_E	function
,	O
0	int
}	O
,	O
Ed	O
,	O
Id	O
}	O
,	O
0	int
}	O
,	O
{	O
"lwpval"	pointer
,	O
{	O
{	O
OP_LWP_E	function
,	O
0	int
}	O
,	O
Ed	O
,	O
Id	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blcfill"	pointer
,	O
{	O
{	O
OP_LWP_E	function
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"blsfill"	pointer
,	O
{	O
{	O
OP_LWP_E	function
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"blcs"	pointer
,	O
{	O
{	O
OP_LWP_E	function
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"tzmsk"	pointer
,	O
{	O
{	O
OP_LWP_E	function
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"blcic"	pointer
,	O
{	O
{	O
OP_LWP_E	function
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"blsic"	pointer
,	O
{	O
{	O
OP_LWP_E	function
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
"t1mskc"	pointer
,	O
{	O
{	O
OP_LWP_E	function
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blcmsk"	pointer
,	O
{	O
{	O
OP_LWP_E	function
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blci"	pointer
,	O
{	O
{	O
OP_LWP_E	function
,	O
0	int
}	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	struct
prefix_table	array
[	O
]	O
[	O
4	int
]	O
=	O
{	O
{	O
{	O
"xchgS"	pointer
,	O
{	O
{	O
NOP_Fixup1	function
,	O
eAX_reg	int
}	O
,	O
{	O
NOP_Fixup2	function
,	O
eAX_reg	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"pause"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"xchgS"	pointer
,	O
{	O
{	O
NOP_Fixup1	function
,	O
eAX_reg	int
}	O
,	O
{	O
NOP_Fixup2	function
,	O
eAX_reg	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
{	O
{	O
NULL	O
,	O
0	int
}	O
}	O
,	O
PREFIX_IGNORED	O
}	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"rstorssp"	pointer
,	O
{	O
Mq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"setssbsy"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"saveprevssp"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"monitorx"	pointer
,	O
{	O
{	O
OP_Monitor	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"mcommit"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"mwaitx"	pointer
,	O
{	O
{	O
OP_Mwait	function
,	O
eBX_reg	int
}	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"wbinvd"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"wbnoinvd"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movups"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movupd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movsd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movups"	pointer
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movss"	pointer
,	O
{	O
EXdS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movupd"	pointer
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movsd"	pointer
,	O
{	O
EXqS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F12_PREFIX_0	int
)	O
}	O
,	O
{	O
"movsldup"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movlpd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movddup"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F16_PREFIX_0	int
)	O
}	O
,	O
{	O
"movshdup"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movhpd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F1A_PREFIX_0	int
)	O
}	O
,	O
{	O
"bndcl"	pointer
,	O
{	O
Gbnd	O
,	O
Ev_bnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"bndmov"	pointer
,	O
{	O
Gbnd	O
,	O
Ebnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"bndcu"	pointer
,	O
{	O
Gbnd	O
,	O
Ev_bnd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F1B_PREFIX_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F1B_PREFIX_1	int
)	O
}	O
,	O
{	O
"bndmov"	pointer
,	O
{	O
EbndS	O
,	O
Gbnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"bndcn"	pointer
,	O
{	O
Gbnd	O
,	O
Ev_bnd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F1C_PREFIX_0	int
)	O
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F1E_PREFIX_1	int
)	O
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"cvtpi2ps"	pointer
,	O
{	O
XM	O
,	O
EMCq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtsi2ss%LQ"	pointer
,	O
{	O
XM	O
,	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtpi2pd"	pointer
,	O
{	O
XM	O
,	O
EMCq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtsi2sd%LQ"	pointer
,	O
{	O
XM	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F2B_PREFIX_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F2B_PREFIX_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F2B_PREFIX_2	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F2B_PREFIX_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"cvttps2pi"	pointer
,	O
{	O
MXC	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvttss2si"	pointer
,	O
{	O
Gdq	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvttpd2pi"	pointer
,	O
{	O
MXC	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvttsd2si"	pointer
,	O
{	O
Gdq	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"cvtps2pi"	pointer
,	O
{	O
MXC	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtss2si"	pointer
,	O
{	O
Gdq	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtpd2pi"	pointer
,	O
{	O
MXC	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtsd2si"	pointer
,	O
{	O
Gdq	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"ucomiss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ucomisd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"comiss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"comisd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"sqrtps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"sqrtss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"sqrtpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"sqrtsd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"rsqrtps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"rsqrtss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"rcpps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"rcpss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"addps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"addss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"addpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"addsd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"mulps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"mulss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"mulpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"mulsd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"cvtps2pd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtss2sd"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtpd2ps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtsd2ss"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"cvtdq2ps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvttps2dq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtps2dq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"subps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"subss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"subpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"subsd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"minps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"minss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"minpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"minsd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"divps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"divss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"divpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"divsd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"maxps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"maxss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"maxpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"maxsd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"punpcklbw"	pointer
,	O
{	O
MX	O
,	O
EMd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"punpcklbw"	pointer
,	O
{	O
MX	O
,	O
EMx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"punpcklwd"	pointer
,	O
{	O
MX	O
,	O
EMd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"punpcklwd"	pointer
,	O
{	O
MX	O
,	O
EMx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"punpckldq"	pointer
,	O
{	O
MX	O
,	O
EMd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"punpckldq"	pointer
,	O
{	O
MX	O
,	O
EMx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"punpcklqdq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"punpckhqdq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movq"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movdqu"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movdqa"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"pshufw"	pointer
,	O
{	O
MX	O
,	O
EM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pshufhw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pshufd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pshuflw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psrldq"	pointer
,	O
{	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pslldq"	pointer
,	O
{	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmread"	pointer
,	O
{	O
Em	O
,	O
Gm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"extrq"	pointer
,	O
{	O
XS	O
,	O
Ib	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"insertq"	pointer
,	O
{	O
XM	O
,	O
XS	O
,	O
Ib	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmwrite"	pointer
,	O
{	O
Gm	O
,	O
Em	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"extrq"	pointer
,	O
{	O
XM	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
{	O
"insertq"	pointer
,	O
{	O
XM	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"haddpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"haddps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"hsubpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"hsubps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movK"	pointer
,	O
{	O
Edq	O
,	O
MX	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movq"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movK"	pointer
,	O
{	O
Edq	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movq"	pointer
,	O
{	O
EMS	O
,	O
MX	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movdqu"	pointer
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movdqa"	pointer
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"rdfsbase"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"rdgsbase"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"wrfsbase"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"wrgsbase"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xsave"	pointer
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
{	O
"ptwrite%LQ"	pointer
,	O
{	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ptwrite%LQ"	pointer
,	O
{	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xrstor"	pointer
,	O
{	O
FXSAVE	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"lfence"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"incsspK"	pointer
,	O
{	O
Rdq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"xsaveopt"	pointer
,	O
{	O
FXSAVE	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"clrssbsy"	pointer
,	O
{	O
Mq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"clwb"	pointer
,	O
{	O
Mb	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
RM_TABLE	O
(	O
RM_0FAE_REG_6_MOD_3_P_0	int
)	O
}	O
,	O
{	O
"umonitor"	pointer
,	O
{	O
Eva	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"tpause"	pointer
,	O
{	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"umwait"	pointer
,	O
{	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"clflush"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"clflushopt"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"popcntS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bsfS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"tzcntS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"bsfS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bsrS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"lzcntS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"bsrS"	pointer
,	O
{	O
Gv	O
,	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"cmpps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
CMP	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cmpss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
,	O
CMP	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cmppd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
CMP	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cmpsd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
,	O
CMP	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movntiS"	pointer
,	O
{	O
Edq	O
,	O
Gdq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"vmptrld"	pointer
,	O
{	O
Mq	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmxon"	pointer
,	O
{	O
Mq	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmclear"	pointer
,	O
{	O
Mq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rdrand"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"rdrand"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
}	O
,	O
{	O
{	O
"rdseed"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdpid"	pointer
,	O
{	O
Em	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdseed"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"addsubpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"addsubps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movq2dq"	pointer
,	O
{	O
XM	O
,	O
MS	O
}	O
,	O
0	int
}	O
,	O
{	O
"movq"	pointer
,	O
{	O
EXqS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
{	O
"movdq2q"	pointer
,	O
{	O
MX	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"cvtdq2pd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvttpd2dq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"cvtpd2dq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movntq"	pointer
,	O
{	O
Mq	O
,	O
MX	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FE7_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0FF0_PREFIX_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"maskmovq"	pointer
,	O
{	O
MX	O
,	O
MS	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"maskmovdqu"	pointer
,	O
{	O
XM	O
,	O
XS	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pblendvb"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
XMM0	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blendvps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
XMM0	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blendvpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
XMM0	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ptest"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxbw"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxbd"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxbq"	pointer
,	O
{	O
XM	O
,	O
EXw	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxwd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxwq"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovsxdq"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmuldq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpeqq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F382A_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"packusdw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxbw"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxbd"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxbq"	pointer
,	O
{	O
XM	O
,	O
EXw	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxwd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxwq"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovzxdq"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpgtq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pminsb"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pminsd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pminuw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pminud"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmaxsb"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmaxsd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmaxuw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmaxud"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmulld"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"phminposuw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"invept"	pointer
,	O
{	O
Gm	O
,	O
Mo	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"invvpid"	pointer
,	O
{	O
Gm	O
,	O
Mo	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"invpcid"	pointer
,	O
{	O
Gm	O
,	O
M	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha1nexte"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha1msg1"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha1msg2"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha256rnds2"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
,	O
XMM0	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha256msg1"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha256msg2"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"gf2p8mulb"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aesimc"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aesenc"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aesenclast"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aesdec"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aesdeclast"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movbeS"	pointer
,	O
{	O
Gv	O
,	O
{	O
MOVBE_Fixup	function
,	O
v_mode	int
}	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movbeS"	pointer
,	O
{	O
Gv	O
,	O
{	O
MOVBE_Fixup	function
,	O
v_mode	int
}	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"crc32"	pointer
,	O
{	O
Gdq	O
,	O
{	O
CRC32_Fixup	function
,	O
b_mode	int
}	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movbeS"	pointer
,	O
{	O
{	O
MOVBE_Fixup	function
,	O
v_mode	int
}	O
,	O
Gv	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movbeS"	pointer
,	O
{	O
{	O
MOVBE_Fixup	function
,	O
v_mode	int
}	O
,	O
Gv	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"crc32"	pointer
,	O
{	O
Gdq	O
,	O
{	O
CRC32_Fixup	function
,	O
v_mode	int
}	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F5_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F6_PREFIX_0	int
)	O
}	O
,	O
{	O
"adoxS"	pointer
,	O
{	O
Gdq	O
,	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"adcxS"	pointer
,	O
{	O
Gdq	O
,	O
Edq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F8_PREFIX_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F8_PREFIX_2	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F8_PREFIX_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_0F38F9_PREFIX_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"roundps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"roundpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"roundss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"roundsd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blendps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"blendpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pblendw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pextrb"	pointer
,	O
{	O
Edqb	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pextrw"	pointer
,	O
{	O
Edqw	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pextrK"	pointer
,	O
{	O
Edq	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"extractps"	pointer
,	O
{	O
Edqd	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pinsrb"	pointer
,	O
{	O
XM	O
,	O
Edqb	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"insertps"	pointer
,	O
{	O
XM	O
,	O
EXd	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pinsrK"	pointer
,	O
{	O
XM	O
,	O
Edq	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"dpps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"dppd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"mpsadbw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pclmulqdq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
PCLMUL	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpestrm"	pointer
,	O
{	O
XM	O
,	O
{	O
PCMPESTR_Fixup	function
,	O
x_mode	int
}	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpestri"	pointer
,	O
{	O
XM	O
,	O
{	O
PCMPESTR_Fixup	function
,	O
x_mode	int
}	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpistrm"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pcmpistri"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"sha1rnds4"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"gf2p8affineqb"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"gf2p8affineinvqb"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"aeskeygenassist"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"vmovups"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovss"	pointer
,	O
{	O
XMVexScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovupd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovsd"	pointer
,	O
{	O
XMVexScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovups"	pointer
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovss"	pointer
,	O
{	O
EXdVexScalarS	O
,	O
VexScalar	O
,	O
XMScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovupd"	pointer
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovsd"	pointer
,	O
{	O
EXqVexScalarS	O
,	O
VexScalar	O
,	O
XMScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F12_PREFIX_0	int
)	O
}	O
,	O
{	O
"vmovsldup"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F12_P_2	int
)	O
}	O
,	O
{	O
"vmovddup"	pointer
,	O
{	O
XM	O
,	O
EXymmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F16_PREFIX_0	int
)	O
}	O
,	O
{	O
"vmovshdup"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F16_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtsi2ss%LQ"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtsi2sd%LQ"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvttss2si"	pointer
,	O
{	O
Gdq	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvttsd2si"	pointer
,	O
{	O
Gdq	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtss2si"	pointer
,	O
{	O
Gdq	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtsd2si"	pointer
,	O
{	O
Gdq	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vucomiss"	pointer
,	O
{	O
XMScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vucomisd"	pointer
,	O
{	O
XMScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vcomiss"	pointer
,	O
{	O
XMScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcomisd"	pointer
,	O
{	O
XMScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F41_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F41_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F42_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F42_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F44_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F44_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F45_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F45_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F46_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F46_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F47_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F47_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F4A_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F4A_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F4B_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F4B_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vsqrtps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsqrtss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsqrtpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsqrtsd"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vrsqrtps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vrsqrtss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vrcpps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vrcpss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vaddps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vaddss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vaddpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vaddsd"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmulps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmulss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmulpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmulsd"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vcvtps2pd"	pointer
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvtss2sd"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvtpd2ps%XY"	pointer
,	O
{	O
XMM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvtsd2ss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vcvtdq2ps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvttps2dq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvtps2dq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vsubps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsubss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsubpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vsubsd"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vminps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vminss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vminpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vminsd"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vdivps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vdivss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vdivpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vdivsd"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaxps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmaxss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmaxpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmaxsd"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpcklbw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpcklwd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpckldq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpacksswb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpgtb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpgtw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpgtd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpackuswb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpckhbw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpckhwd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpckhdq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpackssdw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpcklqdq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpunpckhqdq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F6E_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmovdqu"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovdqa"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpshufhw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshufd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshuflw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrlw"	pointer
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsraw"	pointer
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsllw"	pointer
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrld"	pointer
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrad"	pointer
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpslld"	pointer
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrlq"	pointer
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrldq"	pointer
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsllq"	pointer
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpslldq"	pointer
,	O
{	O
Vex	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpeqb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpeqw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpeqd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F77_P_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vhaddpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vhaddps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vhsubpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vhsubps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F7E_P_1	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F7E_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmovdqu"	pointer
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovdqa"	pointer
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F90_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F90_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F91_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F91_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F92_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F92_P_2	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F92_P_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F93_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F93_P_2	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F93_P_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F98_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F98_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F99_P_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F99_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vcmpps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
VCMP	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcmpss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
,	O
VCMP	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcmppd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
VCMP	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcmpsd"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
,	O
VCMP	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FC4_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FC5_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vaddsubpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vaddsubps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrlw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrld"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrlq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmullw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FD6_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0FD7_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubusb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubusw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminub"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpand"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddusb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddusw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxub"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpandn"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpavgb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsraw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrad"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpavgw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmulhuw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmulhw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtdq2pd"	pointer
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvttpd2dq%XY"	pointer
,	O
{	O
XMM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vcvtpd2dq%XY"	pointer
,	O
{	O
XMM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0FE7_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubsb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubsw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminsw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpor"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddsb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddsw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxsw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpxor"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0FF0_PREFIX_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsllw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpslld"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsllq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmuludq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaddwd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsadbw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FF7_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsubq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpaddd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpshufb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddsw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaddubsw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphsubw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphsubd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphsubsw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsignb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsignw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsignd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmulhrsw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F380C_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F380D_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F380E_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F380F_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtph2ps"	pointer
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3816_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vptest"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3818_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3819_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F381A_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpabsb"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpabsw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpabsd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxbw"	pointer
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxbd"	pointer
,	O
{	O
XM	O
,	O
EXxmmqd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxbq"	pointer
,	O
{	O
XM	O
,	O
EXxmmdw	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxwd"	pointer
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxwq"	pointer
,	O
{	O
XM	O
,	O
EXxmmqd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovsxdq"	pointer
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmuldq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpeqq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F382A_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpackusdw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F382C_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F382D_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F382E_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F382F_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxbw"	pointer
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxbd"	pointer
,	O
{	O
XM	O
,	O
EXxmmqd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxbq"	pointer
,	O
{	O
XM	O
,	O
EXxmmdw	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxwd"	pointer
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxwq"	pointer
,	O
{	O
XM	O
,	O
EXxmmqd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovzxdq"	pointer
,	O
{	O
XM	O
,	O
EXxmmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3836_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmpgtq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminsb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminsd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminuw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpminud"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxsb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxsd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxuw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmaxud"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmulld"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3841_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsrlv%LW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3846_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpsllv%LW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3858_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3859_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F385A_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3878_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3879_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F388C_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F388E_PREFIX_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpgatherd%LW"	pointer
,	O
{	O
XM	O
,	O
MVexVSIBDWpX	O
,	O
Vex	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpgatherq%LW"	pointer
,	O
{	O
XMGatherQ	O
,	O
MVexVSIBQWpX	O
,	O
VexGatherQ	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vgatherdp%XW"	pointer
,	O
{	O
XM	O
,	O
MVexVSIBDWpX	O
,	O
Vex	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vgatherqp%XW"	pointer
,	O
{	O
XMGatherQ	O
,	O
MVexVSIBQWpX	O
,	O
VexGatherQ	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddsub132p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubadd132p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd132p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd132s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub132p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub132s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd132p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd132s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub132p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub132s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddsub213p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubadd213p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd213p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd213s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub213p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub213s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd213p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd213s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub213p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub213s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddsub231p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubadd231p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd231p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmadd231s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub231p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsub231s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd231p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmadd231s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub231p%XW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsub231s%XW"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXVexWdqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F38CF_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38DB_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vaesenc"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vaesenclast"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vaesdec"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vaesdeclast"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F2_P_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F3_R_1_P_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F3_R_2_P_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F3_R_3_P_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F5_P_0	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F5_P_1	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F5_P_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F6_P_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F7_P_0	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F7_P_1	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F7_P_2	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F38F7_P_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A00_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A01_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A02_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A04_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A05_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A06_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vroundps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vroundpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vroundss"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXdScalar	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vroundsd"	pointer
,	O
{	O
XMScalar	O
,	O
VexScalar	O
,	O
EXqScalar	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vblendps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vblendpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpblendw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpalignr"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A14_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A15_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A16_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A17_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A18_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A19_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vcvtps2ph"	pointer
,	O
{	O
EXxmmq	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A20_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A21_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A22_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A30_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A31_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A32_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A33_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A38_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A39_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vdpps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A41_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmpsadbw"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpclmulqdq"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
PCLMUL	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A46_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A48_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A49_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A4A_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A4B_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A4C_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddsubps"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddsubpd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubaddps"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubaddpd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A60_P_2	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A61_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A62_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A63_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddps"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmaddpd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A6A_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A6B_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubps"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfmsubpd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A6E_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A6F_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmaddps"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmaddpd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A7A_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A7B_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsubps"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vfnmsubpd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A7E_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3A7F_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3ACE_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3ACF_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3ADF_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F3AF0_P_3	int
)	O
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	struct
x86_64_table	array
[	O
]	O
[	O
2	int
]	O
=	O
{	O
{	O
{	O
"pushP"	pointer
,	O
{	O
es	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"popP"	pointer
,	O
{	O
es	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pushP"	pointer
,	O
{	O
cs	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pushP"	pointer
,	O
{	O
ss	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"popP"	pointer
,	O
{	O
ss	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pushP"	pointer
,	O
{	O
ds	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"popP"	pointer
,	O
{	O
ds	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"daa"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"das"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"aaa"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"aas"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pushaP"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"popaP"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_62_32BIT	int
)	O
}	O
,	O
{	O
EVEX_TABLE	O
(	O
EVEX_0F	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"arpl"	pointer
,	O
{	O
Ew	O
,	O
Gw	O
}	O
,	O
0	int
}	O
,	O
{	O
"movs{lq|xd}"	pointer
,	O
{	O
Gv	O
,	O
Ed	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"ins{R|}"	pointer
,	O
{	O
Yzr	O
,	O
indirDX	O
}	O
,	O
0	int
}	O
,	O
{	O
"ins{G|}"	pointer
,	O
{	O
Yzr	O
,	O
indirDX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"outs{R|}"	pointer
,	O
{	O
indirDXr	O
,	O
Xz	O
}	O
,	O
0	int
}	O
,	O
{	O
"outs{G|}"	pointer
,	O
{	O
indirDXr	O
,	O
Xz	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
REG_TABLE	O
(	O
REG_80	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"Jcall{T|}"	pointer
,	O
{	O
Ap	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_C4_32BIT	int
)	O
}	O
,	O
{	O
VEX_C4_TABLE	O
(	O
VEX_0F	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_C5_32BIT	int
)	O
}	O
,	O
{	O
VEX_C5_TABLE	O
(	O
VEX_0F	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"into"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"aam"	pointer
,	O
{	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"aad"	pointer
,	O
{	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"callP"	pointer
,	O
{	O
Jv	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
"call@"	pointer
,	O
{	O
Jv	O
,	O
BND	O
}	O
,	O
0	int
}	O
}	O
,	O
{	O
{	O
"jmpP"	pointer
,	O
{	O
Jv	O
,	O
BND	O
}	O
,	O
0	int
}	O
,	O
{	O
"jmp@"	pointer
,	O
{	O
Jv	O
,	O
BND	O
}	O
,	O
0	int
}	O
}	O
,	O
{	O
{	O
"Jjmp{T|}"	pointer
,	O
{	O
Ap	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"sgdt{Q|IQ}"	pointer
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
{	O
"sgdt"	pointer
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"sidt{Q|IQ}"	pointer
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
{	O
"sidt"	pointer
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lgdt{Q|Q}"	pointer
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
{	O
"lgdt"	pointer
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lidt{Q|Q}"	pointer
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
{	O
"lidt"	pointer
,	O
{	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	struct
three_byte_table	array
[	O
]	O
[	O
256	int
]	O
=	O
{	O
{	O
{	O
"pshufb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phaddw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phaddd"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phaddsw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmaddubsw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phsubw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phsubd"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"phsubsw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psignb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psignw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"psignd"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pmulhrsw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3810	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3814	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3815	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3817	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pabsb"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pabsw"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"pabsd"	pointer
,	O
{	O
MX	O
,	O
EM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3820	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3821	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3822	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3823	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3824	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3825	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3828	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3829	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F382A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F382B	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3830	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3831	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3832	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3833	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3834	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3835	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3837	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3838	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3839	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F383F	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3840	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3841	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3880	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3881	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3882	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38C8	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38C9	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38CA	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38CB	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38CC	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38CD	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38CF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38DB	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38DC	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38DD	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38DE	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38DF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F0	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F1	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F5	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F6	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F8	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F38F9	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A08	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A09	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A0A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A0B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A0C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A0D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A0E	int
)	O
}	O
,	O
{	O
"palignr"	pointer
,	O
{	O
MX	O
,	O
EM	O
,	O
Ib	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A14	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A15	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A16	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A17	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A20	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A21	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A22	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A40	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A41	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A42	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A44	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A60	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A61	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A62	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3A63	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3ACC	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3ACE	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3ACF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F3ADF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	struct
xop_table	array
[	O
]	O
[	O
256	int
]	O
=	O
{	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmacssww"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacsswd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacssdql"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmacssdd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacssdqh"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmacsww"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacswd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacsdql"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmacsdd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpmacsdqh"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpcmov"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpperm"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmadcsswd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmadcswd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexW	O
,	O
EXVexW	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vprotb"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotw"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotd"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotq"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_CC	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_CD	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_CE	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_CF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_EC	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_ED	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_EE	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_08_EF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_XOP_TBM_01	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_XOP_TBM_02	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_XOP_LWPCB	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_09_80	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FXOP_09_81	int
)	O
}	O
,	O
{	O
"vfrczss"	pointer
,	O
{	O
XM	O
,	O
EXd	O
}	O
,	O
0	int
}	O
,	O
{	O
"vfrczsd"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vprotb"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotw"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotd"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vprotq"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshlb"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshlw"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshld"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshlq"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshab"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshaw"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshad"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpshaq"	pointer
,	O
{	O
XM	O
,	O
Vex_2src_1	O
,	O
Vex_2src_2	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddbw"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphaddbd"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphaddbq"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddwd"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphaddwq"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphadddq"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddubw"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphaddubd"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphaddubq"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphadduwd"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphadduwq"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphaddudq"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vphsubbw"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphsubwd"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vphsubdq"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"bextrS"	pointer
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
Id	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_XOP_LWP	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	struct
vex_table	array
[	O
]	O
[	O
256	int
]	O
=	O
{	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F10	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F11	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F12	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F13	int
)	O
}	O
,	O
{	O
"vunpcklpX"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vunpckhpX"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F16	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F17	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmovapX"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmovapX"	pointer
,	O
{	O
EXxS	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F2A	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F2B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F2C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F2D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F2E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F2F	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F41	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F42	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F44	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F45	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F46	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F47	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F4A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F4B	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F50	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F51	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F52	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F53	int
)	O
}	O
,	O
{	O
"vandpX"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vandnpX"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vorpX"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
"vxorpX"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F58	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F59	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F5F	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F60	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F61	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F62	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F63	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F64	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F65	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F66	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F67	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F68	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F69	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F6F	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F70	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_VEX_0F71	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_VEX_0F72	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_VEX_0F73	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F74	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F75	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F76	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F77	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F7C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F7D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F7E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F7F	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F90	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F91	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F92	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F93	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F98	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F99	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_VEX_0FAE	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FC2	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FC4	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FC5	int
)	O
}	O
,	O
{	O
"vshufpX"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD0	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD1	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD2	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD3	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD4	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD5	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD6	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD7	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD8	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FD9	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDA	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDB	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDC	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDD	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDE	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FDF	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE0	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE1	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE2	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE3	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE4	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE5	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE6	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE7	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE8	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FE9	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FEA	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FEB	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FEC	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FED	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FEE	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FEF	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF0	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF1	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF2	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF3	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF4	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF5	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF6	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF7	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF8	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FF9	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FFA	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FFB	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FFC	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FFD	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0FFE	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3800	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3801	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3802	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3803	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3804	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3805	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3806	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3807	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3808	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3809	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F380F	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3813	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3816	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3817	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3818	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3819	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F381A	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F381C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F381D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F381E	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3820	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3821	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3822	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3823	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3824	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3825	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3828	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3829	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F382F	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3830	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3831	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3832	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3833	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3834	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3835	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3836	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3837	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3838	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3839	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F383F	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3840	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3841	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3845	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3846	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3847	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3858	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3859	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F385A	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3878	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3879	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F388C	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F388E	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3890	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3891	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3892	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3893	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3896	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3897	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3898	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3899	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F389F	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38A6	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38A7	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38A8	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38A9	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AA	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AB	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AC	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AD	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AE	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38AF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38B6	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38B7	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38B8	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38B9	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BA	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BB	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BC	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BD	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BE	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38BF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38CF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38DB	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38DC	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38DD	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38DE	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38DF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F2	int
)	O
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_VEX_0F38F3	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F5	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F6	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F38F7	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A00	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A01	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A02	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A04	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A05	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A06	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A08	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A09	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A0F	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A14	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A15	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A16	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A17	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A18	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A19	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A1D	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A20	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A21	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A22	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A30	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A31	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A32	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A33	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A38	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A39	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A40	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A41	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A42	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A44	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A46	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A48	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A49	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A4A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A4B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A4C	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A5C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A5D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A5E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A5F	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A60	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A61	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A62	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A63	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A68	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A69	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A6F	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A78	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A79	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7A	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7B	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7C	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7D	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7E	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3A7F	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3ACE	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3ACF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3ADF	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F3AF0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	struct
vex_len_table	array
[	O
]	O
[	O
2	int
]	O
=	O
{	O
{	O
{	O
"vmovlps"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovhlps"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovlpd"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovlpX"	pointer
,	O
{	O
EXq	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovhps"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovlhps"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovhpd"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovhpX"	pointer
,	O
{	O
EXq	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F41_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F41_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F42_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F42_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F44_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F44_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F45_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F45_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F46_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F46_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F47_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F47_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F4A_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F4A_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F4B_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F4B_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vmovK"	pointer
,	O
{	O
XMScalar	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vzeroupper"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
{	O
"vzeroall"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovq"	pointer
,	O
{	O
XMScalar	O
,	O
EXqScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovK"	pointer
,	O
{	O
Edq	O
,	O
XMScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F90_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F90_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F91_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F91_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F92_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F92_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F92_P_3_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F93_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F93_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_0F93_P_3_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F98_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F98_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F99_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F99_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vldmxcsr"	pointer
,	O
{	O
Md	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vstmxcsr"	pointer
,	O
{	O
Md	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpinsrw"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
Edqw	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpextrw"	pointer
,	O
{	O
Gdq	O
,	O
XS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovq"	pointer
,	O
{	O
EXqScalarS	O
,	O
XMScalar	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaskmovdqu"	pointer
,	O
{	O
XM	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3816_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3819_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F381A_P_2_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3836_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vphminposuw"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F385A_P_2_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vaesimc"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"andnS"	pointer
,	O
{	O
Gdq	O
,	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"blsrS"	pointer
,	O
{	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"blsmskS"	pointer
,	O
{	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"blsiS"	pointer
,	O
{	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bzhiS"	pointer
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
VexGdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pextS"	pointer
,	O
{	O
Gdq	O
,	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"pdepS"	pointer
,	O
{	O
Gdq	O
,	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"mulxS"	pointer
,	O
{	O
Gdq	O
,	O
VexGdq	O
,	O
Edq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bextrS"	pointer
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
VexGdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"sarxS"	pointer
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
VexGdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"shlxS"	pointer
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
VexGdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"shrxS"	pointer
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
VexGdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A00_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A01_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A06_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vpextrb"	pointer
,	O
{	O
Edqb	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpextrw"	pointer
,	O
{	O
Edqw	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpextrK"	pointer
,	O
{	O
Edq	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vextractps"	pointer
,	O
{	O
Edqd	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A18_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A19_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vpinsrb"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
Edqb	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vinsertps"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXd	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpinsrK"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
Edq	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A30_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A31_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A32_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A33_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A38_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A39_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vdppd"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F3A46_P_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vpcmpestrm"	pointer
,	O
{	O
XM	O
,	O
{	O
PCMPESTR_Fixup	function
,	O
x_mode	int
}	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcmpestri"	pointer
,	O
{	O
XM	O
,	O
{	O
PCMPESTR_Fixup	function
,	O
x_mode	int
}	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcmpistrm"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcmpistri"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfmaddss"	pointer
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXdVexW	O
,	O
EXdVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfmaddsd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXqVexW	O
,	O
EXqVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfmsubss"	pointer
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXdVexW	O
,	O
EXdVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfmsubsd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXqVexW	O
,	O
EXqVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfnmaddss"	pointer
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXdVexW	O
,	O
EXdVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfnmaddsd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXqVexW	O
,	O
EXqVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfnmsubss"	pointer
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXdVexW	O
,	O
EXdVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfnmsubsd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex128	O
,	O
EXqVexW	O
,	O
EXqVexW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vaeskeygenassist"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"rorxS"	pointer
,	O
{	O
Gdq	O
,	O
Edq	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomb"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomw"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomd"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomq"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomub"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomuw"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomud"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpcomuq"	pointer
,	O
{	O
XM	O
,	O
Vex128	O
,	O
EXx	O
,	O
VPCOM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfrczps"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vfrczps"	pointer
,	O
{	O
XM	O
,	O
EXymmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vfrczpd"	pointer
,	O
{	O
XM	O
,	O
EXxmm	O
}	O
,	O
0	int
}	O
,	O
{	O
"vfrczpd"	pointer
,	O
{	O
XM	O
,	O
EXymmq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	struct
vex_w_table	array
[	O
]	O
[	O
2	int
]	O
=	O
{	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F41_P_0_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F41_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F41_P_2_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F41_P_2_LEN_1	int
)	O
}	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F42_P_0_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F42_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F42_P_2_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F42_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F44_P_0_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F44_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F44_P_2_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F44_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F45_P_0_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F45_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F45_P_2_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F45_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F46_P_0_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F46_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F46_P_2_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F46_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F47_P_0_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F47_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F47_P_2_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F47_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F4A_P_0_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F4A_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F4A_P_2_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F4A_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F4B_P_0_LEN_1	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F4B_P_0_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F4B_P_2_LEN_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"kmovw"	pointer
,	O
{	O
MaskG	O
,	O
MaskE	O
}	O
,	O
0	int
}	O
,	O
{	O
"kmovq"	pointer
,	O
{	O
MaskG	O
,	O
MaskE	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"kmovb"	pointer
,	O
{	O
MaskG	O
,	O
MaskBDE	O
}	O
,	O
0	int
}	O
,	O
{	O
"kmovd"	pointer
,	O
{	O
MaskG	O
,	O
MaskBDE	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F91_P_0_LEN_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F91_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F91_P_2_LEN_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F91_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F92_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F92_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F93_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F93_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F98_P_0_LEN_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F98_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F98_P_2_LEN_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F98_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F99_P_0_LEN_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F99_P_0_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F99_P_2_LEN_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F99_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vpermilps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermilpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vtestps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vtestpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vbroadcastss"	pointer
,	O
{	O
XM	O
,	O
EXxmm_md	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vbroadcastsd"	pointer
,	O
{	O
XM	O
,	O
EXxmm_mq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vbroadcastf128"	pointer
,	O
{	O
XM	O
,	O
Mxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaskmovps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
Mx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaskmovpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
Mx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaskmovps"	pointer
,	O
{	O
Mx	O
,	O
Vex	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmaskmovpd"	pointer
,	O
{	O
Mx	O
,	O
Vex	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpsravd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpbroadcastd"	pointer
,	O
{	O
XM	O
,	O
EXxmm_md	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpbroadcastq"	pointer
,	O
{	O
XM	O
,	O
EXxmm_mq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vbroadcasti128"	pointer
,	O
{	O
XM	O
,	O
Mxmm	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpbroadcastb"	pointer
,	O
{	O
XM	O
,	O
EXxmm_mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpbroadcastw"	pointer
,	O
{	O
XM	O
,	O
EXxmm_mw	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vgf2p8mulb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpermq"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpermpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpblendd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermilps"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermilpd"	pointer
,	O
{	O
XM	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vperm2f128"	pointer
,	O
{	O
XM	O
,	O
Vex256	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vinsertf128"	pointer
,	O
{	O
XM	O
,	O
Vex256	O
,	O
EXxmm	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vextractf128"	pointer
,	O
{	O
EXxmm	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F3A30_P_2_LEN_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F3A30_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F3A31_P_2_LEN_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F3A31_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F3A32_P_2_LEN_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F3A32_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_0_0F3A33_P_2_LEN_0	int
)	O
}	O
,	O
{	O
MOD_TABLE	O
(	O
MOD_VEX_W_1_0F3A33_P_2_LEN_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vinserti128"	pointer
,	O
{	O
XM	O
,	O
Vex256	O
,	O
EXxmm	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vextracti128"	pointer
,	O
{	O
EXxmm	O
,	O
XM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vperm2i128"	pointer
,	O
{	O
XM	O
,	O
Vex256	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermil2ps"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpermil2ps"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpermil2pd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
}	O
,	O
0	int
}	O
,	O
{	O
"vpermil2pd"	pointer
,	O
{	O
XMVexW	O
,	O
Vex	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
,	O
EXVexImmW	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vblendvps"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
XMVexI4	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vblendvpd"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
XMVexI4	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpblendvb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
XMVexI4	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vgf2p8affineqb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vgf2p8affineinvqb"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
EXx	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	struct
mod_table	array
[	O
]	O
[	O
2	int
]	O
=	O
{	O
{	O
{	O
"leaS"	pointer
,	O
{	O
Gv	O
,	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_C6_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_C7_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"Jcall^"	pointer
,	O
{	O
indirEp	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"Jjmp^"	pointer
,	O
{	O
indirEp	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
X86_64_TABLE	O
(	O
X86_64_0F01_REG_0	int
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
X86_64_TABLE	O
(	O
X86_64_0F01_REG_1	int
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
X86_64_TABLE	O
(	O
X86_64_0F01_REG_2	int
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
X86_64_TABLE	O
(	O
X86_64_0F01_REG_3	int
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F01_REG_5_MOD_0	int
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_5_MOD_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"invlpg"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0F01_REG_7_MOD_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"movlps"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"movhlps"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movlpX"	pointer
,	O
{	O
EXq	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movhps"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
{	O
"movlhps"	pointer
,	O
{	O
XM	O
,	O
EXq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movhpX"	pointer
,	O
{	O
EXq	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"prefetchnta"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"prefetcht0"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"prefetcht1"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"prefetcht2"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nop/reserved"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nop/reserved"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nop/reserved"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nop/reserved"	pointer
,	O
{	O
Mb	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bndldx"	pointer
,	O
{	O
Gbnd	O
,	O
Mv_bnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bndstx"	pointer
,	O
{	O
Mv_bnd	O
,	O
Gbnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"bndmk"	pointer
,	O
{	O
Gbnd	O
,	O
Mv_bnd	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
REG_TABLE	O
(	O
REG_0F1C_P_0_MOD_0	int
)	O
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
REG_TABLE	O
(	O
REG_0F1E_P_1_MOD_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movL"	pointer
,	O
{	O
Rd	O
,	O
Td	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movL"	pointer
,	O
{	O
Td	O
,	O
Rd	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movntps"	pointer
,	O
{	O
Mx	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movntss"	pointer
,	O
{	O
Md	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movntpd"	pointer
,	O
{	O
Mx	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movntsd"	pointer
,	O
{	O
Mq	O
,	O
XM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"movmskpX"	pointer
,	O
{	O
Gdq	O
,	O
XS	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psrlw"	pointer
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psraw"	pointer
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psllw"	pointer
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psrld"	pointer
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psrad"	pointer
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pslld"	pointer
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psrlq"	pointer
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F73_REG_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"psllq"	pointer
,	O
{	O
MS	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F73_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"fxsave"	pointer
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_0_MOD_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"fxrstor"	pointer
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_1_MOD_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"ldmxcsr"	pointer
,	O
{	O
Md	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_2_MOD_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"stmxcsr"	pointer
,	O
{	O
Md	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_3_MOD_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_4_MOD_0	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_4_MOD_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_5_MOD_0	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_5_MOD_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_6_MOD_0	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_6_MOD_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FAE_REG_7_MOD_0	int
)	O
}	O
,	O
{	O
RM_TABLE	O
(	O
RM_0FAE_REG_7_MOD_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"lssS"	pointer
,	O
{	O
Gv	O
,	O
Mp	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lfsS"	pointer
,	O
{	O
Gv	O
,	O
Mp	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lgsS"	pointer
,	O
{	O
Gv	O
,	O
Mp	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FC3_MOD_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"xrstors"	pointer
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xsavec"	pointer
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xsaves"	pointer
,	O
{	O
FXSAVE	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FC7_REG_6_MOD_0	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FC7_REG_6_MOD_3	int
)	O
}	O
}	O
,	O
{	O
{	O
"vmptrst"	pointer
,	O
{	O
Mq	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0FC7_REG_7_MOD_3	int
)	O
}	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"pmovmskb"	pointer
,	O
{	O
Gdq	O
,	O
MS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movntdq"	pointer
,	O
{	O
Mx	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"lddqu"	pointer
,	O
{	O
XM	O
,	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"movntdqa"	pointer
,	O
{	O
XM	O
,	O
Mx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"wrussK"	pointer
,	O
{	O
M	O
,	O
Gdq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"wrssK"	pointer
,	O
{	O
M	O
,	O
Gdq	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"enqcmds"	pointer
,	O
{	O
Gva	O
,	O
M	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movdir64b"	pointer
,	O
{	O
Gva	O
,	O
M	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"enqcmd"	pointer
,	O
{	O
Gva	O
,	O
M	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"movdiri"	pointer
,	O
{	O
Ev	O
,	O
Gv	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
}	O
,	O
{	O
{	O
"bound{S|}"	pointer
,	O
{	O
Gv	O
,	O
Ma	O
}	O
,	O
0	int
}	O
,	O
{	O
EVEX_TABLE	O
(	O
EVEX_0F	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"lesS"	pointer
,	O
{	O
Gv	O
,	O
Mp	O
}	O
,	O
0	int
}	O
,	O
{	O
VEX_C4_TABLE	O
(	O
VEX_0F	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"ldsS"	pointer
,	O
{	O
Gv	O
,	O
Mp	O
}	O
,	O
0	int
}	O
,	O
{	O
VEX_C5_TABLE	O
(	O
VEX_0F	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F12_P_0_M_0	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F12_P_0_M_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F13_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F16_P_0_M_0	int
)	O
}	O
,	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F16_P_0_M_1	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F17_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vmovntpX"	pointer
,	O
{	O
Mx	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandw"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandq"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandb"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandd"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandnw"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandnq"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandnb"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kandnd"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"knotw"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"knotq"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"knotb"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"knotd"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"korw"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"korq"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"korb"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kord"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxnorw"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxnorq"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxnorb"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxnord"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxorw"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxorq"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxorb"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kxord"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kaddw"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kaddq"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kaddb"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kaddd"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kunpckwd"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kunpckdq"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kunpckbw"	pointer
,	O
{	O
MaskG	O
,	O
MaskVex	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmovmskpX"	pointer
,	O
{	O
Gdq	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F71_REG_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F71_REG_4	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F71_REG_6	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F72_REG_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F72_REG_4	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F72_REG_6	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F73_REG_2	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F73_REG_3	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F73_REG_6	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_VEX_0F73_REG_7	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"kmovw"	pointer
,	O
{	O
Ew	O
,	O
MaskG	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"kmovq"	pointer
,	O
{	O
Eq	O
,	O
MaskG	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"kmovb"	pointer
,	O
{	O
Eb	O
,	O
MaskG	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"kmovd"	pointer
,	O
{	O
Ed	O
,	O
MaskG	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovw"	pointer
,	O
{	O
MaskG	O
,	O
Rdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovb"	pointer
,	O
{	O
MaskG	O
,	O
Rdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovK"	pointer
,	O
{	O
MaskG	O
,	O
Rdq	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovw"	pointer
,	O
{	O
Gdq	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovb"	pointer
,	O
{	O
Gdq	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kmovK"	pointer
,	O
{	O
Gdq	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kortestw"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kortestq"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kortestb"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kortestd"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ktestw"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ktestq"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ktestb"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"ktestd"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FAE_R_2_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0FAE_R_3_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vpmovmskb"	pointer
,	O
{	O
Gdq	O
,	O
XS	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmovntdq"	pointer
,	O
{	O
Mx	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vlddqu"	pointer
,	O
{	O
XM	O
,	O
M	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F381A_P_2_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vmovntdqa"	pointer
,	O
{	O
XM	O
,	O
Mx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F382C_P_2_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F382D_P_2_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F382E_P_2_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_W_TABLE	O
(	O
VEX_W_0F382F_P_2_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
VEX_LEN_TABLE	O
(	O
VEX_LEN_0F385A_P_2_M_0	int
)	O
}	O
,	O
}	O
,	O
{	O
{	O
"vpmaskmov%LW"	pointer
,	O
{	O
XM	O
,	O
Vex	O
,	O
Mx	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vpmaskmov%LW"	pointer
,	O
{	O
Mx	O
,	O
Vex	O
,	O
XM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftrb"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftrw"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftrd"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftrq"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftlb"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftlw"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftld"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"kshiftlq"	pointer
,	O
{	O
MaskG	O
,	O
MaskR	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
const	O
struct	O
dis386	struct
rm_table	array
[	O
]	O
[	O
8	int
]	O
=	O
{	O
{	O
{	O
"xabort"	pointer
,	O
{	O
Skip_MODRM	O
,	O
Ib	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xbeginT"	pointer
,	O
{	O
Skip_MODRM	O
,	O
Jdqw	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"enclv"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmcall"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmlaunch"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmresume"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmxoff"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"pconfig"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"monitor"	pointer
,	O
{	O
{	O
OP_Monitor	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"mwait"	pointer
,	O
{	O
{	O
OP_Mwait	function
,	O
0	int
}	O
}	O
,	O
0	int
}	O
,	O
{	O
"clac"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"stac"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"encls"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"xgetbv"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"xsetbv"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"vmfunc"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"xend"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"xtest"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"enclu"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"vmrun"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmmcall"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmload"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"vmsave"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"stgi"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"clgi"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"skinit"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"invlpga"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F01_REG_5_MOD_3_RM_0	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F01_REG_5_MOD_3_RM_2	int
)	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"rdpkru"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"wrpkru"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"swapgs"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdtscp"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F01_REG_7_MOD_3_RM_2	int
)	O
}	O
,	O
{	O
PREFIX_TABLE	O
(	O
PREFIX_0F01_REG_7_MOD_3_RM_3	int
)	O
}	O
,	O
{	O
"clzero"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
{	O
"rdpru"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"endbr64"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"endbr32"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
PREFIX_OPCODE	O
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
{	O
"nopQ"	pointer
,	O
{	O
Ev	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"mfence"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"sfence"	pointer
,	O
{	O
Skip_MODRM	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
}	O
;	O
static	O
bfd_boolean	int
op_is_jump	int
=	O
FALSE	int
;	O
static	O
int	O
ckprefix	function
(	O
void	O
)	O
{	O
int	O
newrex	int
,	O
i	pointer
,	O
length	int
;	O
rex	int
=	O
0	int
;	O
rex_ignored	int
=	O
0	int
;	O
prefixes	int
=	O
0	int
;	O
used_prefixes	int
=	O
0	int
;	O
rex_used	int
=	O
0	int
;	O
last_lock_prefix	int
=	O
-	O
1	int
;	O
last_repz_prefix	int
=	O
-	O
1	int
;	O
last_repnz_prefix	int
=	O
-	O
1	int
;	O
last_data_prefix	int
=	O
-	O
1	int
;	O
last_addr_prefix	int
=	O
-	O
1	int
;	O
last_rex_prefix	int
=	O
-	O
1	int
;	O
last_seg_prefix	int
=	O
-	O
1	int
;	O
fwait_prefix	int
=	O
-	O
1	int
;	O
active_seg_prefix	int
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
(	O
int	O
)	O
ARRAY_SIZE	O
(	O
all_prefixes	array
)	O
;	O
i	pointer
++	O
)	O
all_prefixes	array
[	O
i	pointer
]	O
=	O
0	int
;	O
i	pointer
=	O
0	int
;	O
length	int
=	O
0	int
;	O
while	O
(	O
length	int
<	O
MAX_CODE_LENGTH	int
-	O
1	int
)	O
{	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
newrex	int
=	O
0	int
;	O
switch	O
(	O
*	O
codep	pointer
)	O
{	O
case	O
0x40	int
:	O
case	O
0x41	int
:	O
case	O
0x42	int
:	O
case	O
0x43	int
:	O
case	O
0x44	int
:	O
case	O
0x45	int
:	O
case	O
0x46	int
:	O
case	O
0x47	int
:	O
case	O
0x48	int
:	O
case	O
0x49	int
:	O
case	O
0x4a	int
:	O
case	O
0x4b	int
:	O
case	O
0x4c	int
:	O
case	O
0x4d	int
:	O
case	O
0x4e	int
:	O
case	O
0x4f	int
:	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
)	O
newrex	int
=	O
*	O
codep	pointer
;	O
else	O
return	O
1	int
;	O
last_rex_prefix	int
=	O
i	pointer
;	O
break	O
;	O
case	O
0xf3	int
:	O
prefixes	int
|=	O
PREFIX_REPZ	int
;	O
last_repz_prefix	int
=	O
i	pointer
;	O
break	O
;	O
case	O
0xf2	int
:	O
prefixes	int
|=	O
PREFIX_REPNZ	int
;	O
last_repnz_prefix	int
=	O
i	pointer
;	O
break	O
;	O
case	O
0xf0	int
:	O
prefixes	int
|=	O
PREFIX_LOCK	int
;	O
last_lock_prefix	int
=	O
i	pointer
;	O
break	O
;	O
case	O
0x2e	int
:	O
prefixes	int
|=	O
PREFIX_CS	int
;	O
last_seg_prefix	int
=	O
i	pointer
;	O
active_seg_prefix	int
=	O
PREFIX_CS	int
;	O
break	O
;	O
case	O
0x36	int
:	O
prefixes	int
|=	O
PREFIX_SS	int
;	O
last_seg_prefix	int
=	O
i	pointer
;	O
active_seg_prefix	int
=	O
PREFIX_SS	int
;	O
break	O
;	O
case	O
0x3e	int
:	O
prefixes	int
|=	O
PREFIX_DS	int
;	O
last_seg_prefix	int
=	O
i	pointer
;	O
active_seg_prefix	int
=	O
PREFIX_DS	int
;	O
break	O
;	O
case	O
0x26	int
:	O
prefixes	int
|=	O
PREFIX_ES	int
;	O
last_seg_prefix	int
=	O
i	pointer
;	O
active_seg_prefix	int
=	O
PREFIX_ES	int
;	O
break	O
;	O
case	O
0x64	int
:	O
prefixes	int
|=	O
PREFIX_FS	int
;	O
last_seg_prefix	int
=	O
i	pointer
;	O
active_seg_prefix	int
=	O
PREFIX_FS	int
;	O
break	O
;	O
case	O
0x65	int
:	O
prefixes	int
|=	O
PREFIX_GS	int
;	O
last_seg_prefix	int
=	O
i	pointer
;	O
active_seg_prefix	int
=	O
PREFIX_GS	int
;	O
break	O
;	O
case	O
0x66	int
:	O
prefixes	int
|=	O
PREFIX_DATA	int
;	O
last_data_prefix	int
=	O
i	pointer
;	O
break	O
;	O
case	O
0x67	int
:	O
prefixes	int
|=	O
PREFIX_ADDR	int
;	O
last_addr_prefix	int
=	O
i	pointer
;	O
break	O
;	O
case	O
FWAIT_OPCODE	int
:	O
fwait_prefix	int
=	O
i	pointer
;	O
if	O
(	O
prefixes	int
||	O
rex	int
)	O
{	O
prefixes	int
|=	O
PREFIX_FWAIT	int
;	O
codep	pointer
++	O
;	O
rex_used	int
=	O
rex	int
;	O
return	O
1	int
;	O
}	O
prefixes	int
=	O
PREFIX_FWAIT	int
;	O
break	O
;	O
default	O
:	O
return	O
1	int
;	O
}	O
if	O
(	O
rex	int
)	O
{	O
rex_used	int
=	O
rex	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
*	O
codep	pointer
!=	O
FWAIT_OPCODE	int
)	O
all_prefixes	array
[	O
i	pointer
++	O
]	O
=	O
*	O
codep	pointer
;	O
rex	int
=	O
newrex	int
;	O
codep	pointer
++	O
;	O
length	int
++	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
const	O
char	O
*	O
prefix_name	function
(	O
int	O
pref	int
,	O
int	O
sizeflag	int
)	O
{	O
static	O
const	O
char	O
*	O
rexes	array
[	O
16	int
]	O
=	O
{	O
"rex"	pointer
,	O
"rex.B"	pointer
,	O
"rex.X"	pointer
,	O
"rex.XB"	pointer
,	O
"rex.R"	pointer
,	O
"rex.RB"	pointer
,	O
"rex.RX"	pointer
,	O
"rex.RXB"	pointer
,	O
"rex.W"	pointer
,	O
"rex.WB"	pointer
,	O
"rex.WX"	pointer
,	O
"rex.WXB"	pointer
,	O
"rex.WR"	pointer
,	O
"rex.WRB"	pointer
,	O
"rex.WRX"	pointer
,	O
"rex.WRXB"	pointer
,	O
}	O
;	O
switch	O
(	O
pref	int
)	O
{	O
case	O
0x40	int
:	O
case	O
0x41	int
:	O
case	O
0x42	int
:	O
case	O
0x43	int
:	O
case	O
0x44	int
:	O
case	O
0x45	int
:	O
case	O
0x46	int
:	O
case	O
0x47	int
:	O
case	O
0x48	int
:	O
case	O
0x49	int
:	O
case	O
0x4a	int
:	O
case	O
0x4b	int
:	O
case	O
0x4c	int
:	O
case	O
0x4d	int
:	O
case	O
0x4e	int
:	O
case	O
0x4f	int
:	O
return	O
rexes	array
[	O
pref	int
-	O
0x40	int
]	O
;	O
case	O
0xf3	int
:	O
return	O
"repz"	pointer
;	O
case	O
0xf2	int
:	O
return	O
"repnz"	pointer
;	O
case	O
0xf0	int
:	O
return	O
"lock"	pointer
;	O
case	O
0x2e	int
:	O
return	O
"cs"	pointer
;	O
case	O
0x36	int
:	O
return	O
"ss"	pointer
;	O
case	O
0x3e	int
:	O
return	O
"ds"	pointer
;	O
case	O
0x26	int
:	O
return	O
"es"	pointer
;	O
case	O
0x64	int
:	O
return	O
"fs"	pointer
;	O
case	O
0x65	int
:	O
return	O
"gs"	pointer
;	O
case	O
0x66	int
:	O
return	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
?	O
"data16"	pointer
:	O
"data32"	pointer
;	O
case	O
0x67	int
:	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
)	O
return	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
?	O
"addr32"	pointer
:	O
"addr64"	pointer
;	O
else	O
return	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
?	O
"addr16"	pointer
:	O
"addr32"	pointer
;	O
case	O
FWAIT_OPCODE	int
:	O
return	O
"fwait"	pointer
;	O
case	O
REP_PREFIX	O
:	O
return	O
"rep"	pointer
;	O
case	O
XACQUIRE_PREFIX	O
:	O
return	O
"xacquire"	pointer
;	O
case	O
XRELEASE_PREFIX	O
:	O
return	O
"xrelease"	pointer
;	O
case	O
BND_PREFIX	O
:	O
return	O
"bnd"	pointer
;	O
case	O
NOTRACK_PREFIX	O
:	O
return	O
"notrack"	pointer
;	O
default	O
:	O
return	O
NULL	O
;	O
}	O
}	O
static	O
char	O
op_out	array
[	O
MAX_OPERANDS	int
]	O
[	O
100	int
]	O
;	O
static	O
int	O
op_ad	int
,	O
op_index	array
[	O
MAX_OPERANDS	int
]	O
;	O
static	O
int	O
two_source_ops	int
;	O
static	O
bfd_vma	long
op_address	array
[	O
MAX_OPERANDS	int
]	O
;	O
static	O
bfd_vma	long
op_riprel	array
[	O
MAX_OPERANDS	int
]	O
;	O
static	O
bfd_vma	long
start_pc	long
;	O
static	O
char	O
intel_syntax	char
;	O
static	O
char	O
intel_mnemonic	char
=	O
!	O
SYSV386_COMPAT	int
;	O
static	O
char	O
open_char	char
;	O
static	O
char	O
close_char	char
;	O
static	O
char	O
separator_char	char
;	O
static	O
char	O
scale_char	char
;	O
enum	O
x86_64_isa	enum
{	O
amd64	int
=	O
1	int
,	O
intel64	int
}	O
;	O
static	O
enum	O
x86_64_isa	enum
isa64	enum
;	O
int	O
print_insn_i386_att	function
(	O
bfd_vma	long
pc	long
,	O
disassemble_info	struct
*	O
info	pointer
)	O
{	O
intel_syntax	char
=	O
0	int
;	O
return	O
print_insn	function
(	O
pc	long
,	O
info	pointer
)	O
;	O
}	O
int	O
print_insn_i386_intel	function
(	O
bfd_vma	long
pc	long
,	O
disassemble_info	struct
*	O
info	pointer
)	O
{	O
intel_syntax	char
=	O
1	int
;	O
return	O
print_insn	function
(	O
pc	long
,	O
info	pointer
)	O
;	O
}	O
int	O
print_insn_i386	function
(	O
bfd_vma	long
pc	long
,	O
disassemble_info	struct
*	O
info	pointer
)	O
{	O
intel_syntax	char
=	O
-	O
1	int
;	O
return	O
print_insn	function
(	O
pc	long
,	O
info	pointer
)	O
;	O
}	O
void	O
print_i386_disassembler_options	function
(	O
FILE	struct
*	O
stream	pointer
)	O
{	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"\nThe following i386/x86-64 specific disassembler options are supported for use\nwith the -M switch (multiple options should be separated by commas):\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  x86-64      Disassemble in 64bit mode\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  i386        Disassemble in 32bit mode\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  i8086       Disassemble in 16bit mode\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  att         Display instruction in AT&T syntax\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  intel       Display instruction in Intel syntax\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  att-mnemonic\n"	pointer
"              Display instruction in AT&T mnemonic\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  intel-mnemonic\n"	pointer
"              Display instruction in Intel mnemonic\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  addr64      Assume 64bit address size\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  addr32      Assume 32bit address size\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  addr16      Assume 16bit address size\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  data32      Assume 32bit data size\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  data16      Assume 16bit data size\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  suffix      Always display instruction suffix in AT&T syntax\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  amd64       Display instruction in AMD64 ISA\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
stream	pointer
,	O
_	O
(	O
"  intel64     Display instruction in Intel64 ISA\n"	pointer
)	O
)	O
;	O
}	O
static	O
const	O
struct	O
dis386	struct
bad_opcode	struct
=	O
{	O
"(bad)"	pointer
,	O
{	O
XX	O
}	O
,	O
0	int
}	O
;	O
static	O
const	O
struct	O
dis386	struct
*	O
get_valid_dis386	function
(	O
const	O
struct	O
dis386	struct
*	O
dp	pointer
,	O
disassemble_info	struct
*	O
info	pointer
)	O
{	O
int	O
vindex	int
,	O
vex_table_index	int
;	O
if	O
(	O
dp	pointer
->	O
name	pointer
!=	O
NULL	O
)	O
return	O
dp	pointer
;	O
switch	O
(	O
dp	pointer
->	O
op	array
[	O
0	int
]	O
.	O
bytemode	int
)	O
{	O
case	O
USE_REG_TABLE	int
:	O
dp	pointer
=	O
&	O
reg_table	array
[	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
]	O
[	O
modrm	struct
.	O
reg	int
]	O
;	O
break	O
;	O
case	O
USE_MOD_TABLE	int
:	O
vindex	int
=	O
modrm	struct
.	O
mod	int
==	O
0x3	int
?	O
1	int
:	O
0	int
;	O
dp	pointer
=	O
&	O
mod_table	array
[	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
]	O
[	O
vindex	int
]	O
;	O
break	O
;	O
case	O
USE_RM_TABLE	int
:	O
dp	pointer
=	O
&	O
rm_table	array
[	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
]	O
[	O
modrm	struct
.	O
rm	int
]	O
;	O
break	O
;	O
case	O
USE_PREFIX_TABLE	int
:	O
if	O
(	O
need_vex	char
)	O
{	O
switch	O
(	O
vex	struct
.	O
prefix	int
)	O
{	O
case	O
0	int
:	O
vindex	int
=	O
0	int
;	O
break	O
;	O
case	O
REPE_PREFIX_OPCODE	int
:	O
vindex	int
=	O
1	int
;	O
break	O
;	O
case	O
DATA_PREFIX_OPCODE	int
:	O
vindex	int
=	O
2	int
;	O
break	O
;	O
case	O
REPNE_PREFIX_OPCODE	int
:	O
vindex	int
=	O
3	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
int	O
last_prefix	int
=	O
-	O
1	int
;	O
int	O
prefix	int
=	O
0	int
;	O
vindex	int
=	O
0	int
;	O
if	O
(	O
(	O
prefixes	int
&	O
(	O
PREFIX_REPZ	int
|	O
PREFIX_REPNZ	int
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
last_repz_prefix	int
>	O
last_repnz_prefix	int
)	O
{	O
vindex	int
=	O
1	int
;	O
prefix	int
=	O
PREFIX_REPZ	int
;	O
last_prefix	int
=	O
last_repz_prefix	int
;	O
}	O
else	O
{	O
vindex	int
=	O
3	int
;	O
prefix	int
=	O
PREFIX_REPNZ	int
;	O
last_prefix	int
=	O
last_repnz_prefix	int
;	O
}	O
if	O
(	O
(	O
(	O
(	O
prefix_table	array
[	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
]	O
[	O
vindex	int
]	O
.	O
prefix_requirement	int
&	O
PREFIX_IGNORED	O
)	O
>>	O
PREFIX_IGNORED_SHIFT	int
)	O
&	O
prefix	int
)	O
!=	O
0	int
)	O
vindex	int
=	O
0	int
;	O
}	O
if	O
(	O
vindex	int
==	O
0	int
&&	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
!=	O
0	int
)	O
{	O
vindex	int
=	O
2	int
;	O
prefix	int
=	O
PREFIX_DATA	int
;	O
last_prefix	int
=	O
last_data_prefix	int
;	O
}	O
if	O
(	O
vindex	int
!=	O
0	int
)	O
{	O
used_prefixes	int
|=	O
prefix	int
;	O
all_prefixes	array
[	O
last_prefix	int
]	O
=	O
0	int
;	O
}	O
}	O
dp	pointer
=	O
&	O
prefix_table	array
[	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
]	O
[	O
vindex	int
]	O
;	O
break	O
;	O
case	O
USE_X86_64_TABLE	int
:	O
vindex	int
=	O
address_mode	enum
==	O
mode_64bit	int
?	O
1	int
:	O
0	int
;	O
dp	pointer
=	O
&	O
x86_64_table	array
[	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
]	O
[	O
vindex	int
]	O
;	O
break	O
;	O
case	O
USE_3BYTE_TABLE	int
:	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
2	int
)	O
;	O
vindex	int
=	O
*	O
codep	pointer
++	O
;	O
dp	pointer
=	O
&	O
three_byte_table	array
[	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
]	O
[	O
vindex	int
]	O
;	O
end_codep	pointer
=	O
codep	pointer
;	O
modrm	struct
.	O
mod	int
=	O
(	O
*	O
codep	pointer
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	struct
.	O
reg	int
=	O
(	O
*	O
codep	pointer
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	struct
.	O
rm	int
=	O
*	O
codep	pointer
&	O
7	int
;	O
break	O
;	O
case	O
USE_VEX_LEN_TABLE	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
vindex	int
=	O
0	int
;	O
break	O
;	O
case	O
256	int
:	O
vindex	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
break	O
;	O
}	O
dp	pointer
=	O
&	O
vex_len_table	array
[	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
]	O
[	O
vindex	int
]	O
;	O
break	O
;	O
case	O
USE_EVEX_LEN_TABLE	int
:	O
if	O
(	O
!	O
vex	struct
.	O
evex	int
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
vindex	int
=	O
0	int
;	O
break	O
;	O
case	O
256	int
:	O
vindex	int
=	O
1	int
;	O
break	O
;	O
case	O
512	int
:	O
vindex	int
=	O
2	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
break	O
;	O
}	O
dp	pointer
=	O
&	O
evex_len_table	array
[	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
]	O
[	O
vindex	int
]	O
;	O
break	O
;	O
case	O
USE_XOP_8F_TABLE	int
:	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
3	int
)	O
;	O
rex_ignored	int
=	O
rex	int
;	O
rex	int
=	O
~	O
(	O
*	O
codep	pointer
>>	O
5	int
)	O
&	O
0x7	int
;	O
switch	O
(	O
(	O
*	O
codep	pointer
&	O
0x1f	int
)	O
)	O
{	O
default	O
:	O
dp	pointer
=	O
&	O
bad_opcode	struct
;	O
return	O
dp	pointer
;	O
case	O
0x8	int
:	O
vex_table_index	int
=	O
XOP_08	int
;	O
break	O
;	O
case	O
0x9	int
:	O
vex_table_index	int
=	O
XOP_09	int
;	O
break	O
;	O
case	O
0xa	int
:	O
vex_table_index	int
=	O
XOP_0A	int
;	O
break	O
;	O
}	O
codep	pointer
++	O
;	O
vex	struct
.	O
w	int
=	O
*	O
codep	pointer
&	O
0x80	int
;	O
if	O
(	O
vex	struct
.	O
w	int
&&	O
address_mode	enum
==	O
mode_64bit	int
)	O
rex	int
|=	O
REX_W	int
;	O
vex	struct
.	O
register_specifier	int
=	O
(	O
~	O
(	O
*	O
codep	pointer
>>	O
3	int
)	O
)	O
&	O
0xf	int
;	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
)	O
{	O
rex	int
&=	O
~	O
REX_B	int
;	O
}	O
vex	struct
.	O
length	int
=	O
(	O
*	O
codep	pointer
&	O
0x4	int
)	O
?	O
256	int
:	O
128	int
;	O
switch	O
(	O
(	O
*	O
codep	pointer
&	O
0x3	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
vex	struct
.	O
prefix	int
=	O
DATA_PREFIX_OPCODE	int
;	O
break	O
;	O
case	O
2	int
:	O
vex	struct
.	O
prefix	int
=	O
REPE_PREFIX_OPCODE	int
;	O
break	O
;	O
case	O
3	int
:	O
vex	struct
.	O
prefix	int
=	O
REPNE_PREFIX_OPCODE	int
;	O
break	O
;	O
}	O
need_vex	char
=	O
1	int
;	O
need_vex_reg	char
=	O
1	int
;	O
codep	pointer
++	O
;	O
vindex	int
=	O
*	O
codep	pointer
++	O
;	O
dp	pointer
=	O
&	O
xop_table	array
[	O
vex_table_index	int
]	O
[	O
vindex	int
]	O
;	O
end_codep	pointer
=	O
codep	pointer
;	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
modrm	struct
.	O
mod	int
=	O
(	O
*	O
codep	pointer
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	struct
.	O
reg	int
=	O
(	O
*	O
codep	pointer
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	struct
.	O
rm	int
=	O
*	O
codep	pointer
&	O
7	int
;	O
break	O
;	O
case	O
USE_VEX_C4_TABLE	int
:	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
3	int
)	O
;	O
rex_ignored	int
=	O
rex	int
;	O
rex	int
=	O
~	O
(	O
*	O
codep	pointer
>>	O
5	int
)	O
&	O
0x7	int
;	O
switch	O
(	O
(	O
*	O
codep	pointer
&	O
0x1f	int
)	O
)	O
{	O
default	O
:	O
dp	pointer
=	O
&	O
bad_opcode	struct
;	O
return	O
dp	pointer
;	O
case	O
0x1	int
:	O
vex_table_index	int
=	O
VEX_0F	int
;	O
break	O
;	O
case	O
0x2	int
:	O
vex_table_index	int
=	O
VEX_0F38	int
;	O
break	O
;	O
case	O
0x3	int
:	O
vex_table_index	int
=	O
VEX_0F3A	int
;	O
break	O
;	O
}	O
codep	pointer
++	O
;	O
vex	struct
.	O
w	int
=	O
*	O
codep	pointer
&	O
0x80	int
;	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
)	O
{	O
if	O
(	O
vex	struct
.	O
w	int
)	O
rex	int
|=	O
REX_W	int
;	O
}	O
else	O
{	O
rex	int
=	O
0	int
;	O
}	O
vex	struct
.	O
register_specifier	int
=	O
(	O
~	O
(	O
*	O
codep	pointer
>>	O
3	int
)	O
)	O
&	O
0xf	int
;	O
vex	struct
.	O
length	int
=	O
(	O
*	O
codep	pointer
&	O
0x4	int
)	O
?	O
256	int
:	O
128	int
;	O
switch	O
(	O
(	O
*	O
codep	pointer
&	O
0x3	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
vex	struct
.	O
prefix	int
=	O
DATA_PREFIX_OPCODE	int
;	O
break	O
;	O
case	O
2	int
:	O
vex	struct
.	O
prefix	int
=	O
REPE_PREFIX_OPCODE	int
;	O
break	O
;	O
case	O
3	int
:	O
vex	struct
.	O
prefix	int
=	O
REPNE_PREFIX_OPCODE	int
;	O
break	O
;	O
}	O
need_vex	char
=	O
1	int
;	O
need_vex_reg	char
=	O
1	int
;	O
codep	pointer
++	O
;	O
vindex	int
=	O
*	O
codep	pointer
++	O
;	O
dp	pointer
=	O
&	O
vex_table	array
[	O
vex_table_index	int
]	O
[	O
vindex	int
]	O
;	O
end_codep	pointer
=	O
codep	pointer
;	O
if	O
(	O
vex_table_index	int
!=	O
VEX_0F	int
||	O
vindex	int
!=	O
0x77	int
)	O
{	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
modrm	struct
.	O
mod	int
=	O
(	O
*	O
codep	pointer
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	struct
.	O
reg	int
=	O
(	O
*	O
codep	pointer
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	struct
.	O
rm	int
=	O
*	O
codep	pointer
&	O
7	int
;	O
}	O
break	O
;	O
case	O
USE_VEX_C5_TABLE	int
:	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
2	int
)	O
;	O
rex_ignored	int
=	O
rex	int
;	O
rex	int
=	O
(	O
*	O
codep	pointer
&	O
0x80	int
)	O
?	O
0	int
:	O
REX_R	int
;	O
vex	struct
.	O
register_specifier	int
=	O
(	O
~	O
(	O
*	O
codep	pointer
>>	O
3	int
)	O
)	O
&	O
0xf	int
;	O
vex	struct
.	O
length	int
=	O
(	O
*	O
codep	pointer
&	O
0x4	int
)	O
?	O
256	int
:	O
128	int
;	O
switch	O
(	O
(	O
*	O
codep	pointer
&	O
0x3	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
vex	struct
.	O
prefix	int
=	O
DATA_PREFIX_OPCODE	int
;	O
break	O
;	O
case	O
2	int
:	O
vex	struct
.	O
prefix	int
=	O
REPE_PREFIX_OPCODE	int
;	O
break	O
;	O
case	O
3	int
:	O
vex	struct
.	O
prefix	int
=	O
REPNE_PREFIX_OPCODE	int
;	O
break	O
;	O
}	O
need_vex	char
=	O
1	int
;	O
need_vex_reg	char
=	O
1	int
;	O
codep	pointer
++	O
;	O
vindex	int
=	O
*	O
codep	pointer
++	O
;	O
dp	pointer
=	O
&	O
vex_table	array
[	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
]	O
[	O
vindex	int
]	O
;	O
end_codep	pointer
=	O
codep	pointer
;	O
if	O
(	O
vindex	int
!=	O
0x77	int
)	O
{	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
modrm	struct
.	O
mod	int
=	O
(	O
*	O
codep	pointer
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	struct
.	O
reg	int
=	O
(	O
*	O
codep	pointer
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	struct
.	O
rm	int
=	O
*	O
codep	pointer
&	O
7	int
;	O
}	O
break	O
;	O
case	O
USE_VEX_W_TABLE	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
dp	pointer
=	O
&	O
vex_w_table	array
[	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
]	O
[	O
vex	struct
.	O
w	int
?	O
1	int
:	O
0	int
]	O
;	O
break	O
;	O
case	O
USE_EVEX_TABLE	int
:	O
two_source_ops	int
=	O
0	int
;	O
vex	struct
.	O
evex	int
=	O
1	int
;	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
4	int
)	O
;	O
rex_ignored	int
=	O
rex	int
;	O
rex	int
=	O
~	O
(	O
*	O
codep	pointer
>>	O
5	int
)	O
&	O
0x7	int
;	O
vex	struct
.	O
r	int
=	O
*	O
codep	pointer
&	O
0x10	int
;	O
switch	O
(	O
(	O
*	O
codep	pointer
&	O
0xf	int
)	O
)	O
{	O
default	O
:	O
return	O
&	O
bad_opcode	struct
;	O
case	O
0x1	int
:	O
vex_table_index	int
=	O
EVEX_0F	int
;	O
break	O
;	O
case	O
0x2	int
:	O
vex_table_index	int
=	O
EVEX_0F38	int
;	O
break	O
;	O
case	O
0x3	int
:	O
vex_table_index	int
=	O
EVEX_0F3A	int
;	O
break	O
;	O
}	O
codep	pointer
++	O
;	O
vex	struct
.	O
w	int
=	O
*	O
codep	pointer
&	O
0x80	int
;	O
if	O
(	O
vex	struct
.	O
w	int
&&	O
address_mode	enum
==	O
mode_64bit	int
)	O
rex	int
|=	O
REX_W	int
;	O
vex	struct
.	O
register_specifier	int
=	O
(	O
~	O
(	O
*	O
codep	pointer
>>	O
3	int
)	O
)	O
&	O
0xf	int
;	O
if	O
(	O
!	O
(	O
*	O
codep	pointer
&	O
0x4	int
)	O
)	O
return	O
&	O
bad_opcode	struct
;	O
switch	O
(	O
(	O
*	O
codep	pointer
&	O
0x3	int
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
vex	struct
.	O
prefix	int
=	O
DATA_PREFIX_OPCODE	int
;	O
break	O
;	O
case	O
2	int
:	O
vex	struct
.	O
prefix	int
=	O
REPE_PREFIX_OPCODE	int
;	O
break	O
;	O
case	O
3	int
:	O
vex	struct
.	O
prefix	int
=	O
REPNE_PREFIX_OPCODE	int
;	O
break	O
;	O
}	O
codep	pointer
++	O
;	O
vex	struct
.	O
ll	int
=	O
(	O
*	O
codep	pointer
>>	O
5	int
)	O
&	O
3	int
;	O
vex	struct
.	O
b	pointer
=	O
(	O
*	O
codep	pointer
&	O
0x10	int
)	O
!=	O
0	int
;	O
vex	struct
.	O
v	int
=	O
*	O
codep	pointer
&	O
0x8	int
;	O
vex	struct
.	O
mask_register_specifier	int
=	O
*	O
codep	pointer
&	O
0x7	int
;	O
vex	struct
.	O
zeroing	int
=	O
*	O
codep	pointer
&	O
0x80	int
;	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
)	O
{	O
rex	int
&=	O
~	O
REX_B	int
;	O
vex	struct
.	O
r	int
=	O
1	int
;	O
vex	struct
.	O
v	int
=	O
1	int
;	O
}	O
need_vex	char
=	O
1	int
;	O
need_vex_reg	char
=	O
1	int
;	O
codep	pointer
++	O
;	O
vindex	int
=	O
*	O
codep	pointer
++	O
;	O
dp	pointer
=	O
&	O
evex_table	array
[	O
vex_table_index	int
]	O
[	O
vindex	int
]	O
;	O
end_codep	pointer
=	O
codep	pointer
;	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
modrm	struct
.	O
mod	int
=	O
(	O
*	O
codep	pointer
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	struct
.	O
reg	int
=	O
(	O
*	O
codep	pointer
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	struct
.	O
rm	int
=	O
*	O
codep	pointer
&	O
7	int
;	O
if	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
&&	O
vex	struct
.	O
b	pointer
)	O
vex	struct
.	O
length	int
=	O
512	int
;	O
else	O
{	O
switch	O
(	O
vex	struct
.	O
ll	int
)	O
{	O
case	O
0x0	int
:	O
vex	struct
.	O
length	int
=	O
128	int
;	O
break	O
;	O
case	O
0x1	int
:	O
vex	struct
.	O
length	int
=	O
256	int
;	O
break	O
;	O
case	O
0x2	int
:	O
vex	struct
.	O
length	int
=	O
512	int
;	O
break	O
;	O
default	O
:	O
return	O
&	O
bad_opcode	struct
;	O
}	O
}	O
break	O
;	O
case	O
0	int
:	O
dp	pointer
=	O
&	O
bad_opcode	struct
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
if	O
(	O
dp	pointer
->	O
name	pointer
!=	O
NULL	O
)	O
return	O
dp	pointer
;	O
else	O
return	O
get_valid_dis386	function
(	O
dp	pointer
,	O
info	pointer
)	O
;	O
}	O
static	O
void	O
get_sib	function
(	O
disassemble_info	struct
*	O
info	pointer
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
need_modrm	char
&&	O
(	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
||	O
address_mode	enum
==	O
mode_64bit	int
)	O
&&	O
modrm	struct
.	O
mod	int
!=	O
3	int
&&	O
modrm	struct
.	O
rm	int
==	O
4	int
)	O
{	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
2	int
)	O
;	O
sib	struct
.	O
index	function
=	O
(	O
codep	pointer
[	O
1	int
]	O
>>	O
3	int
)	O
&	O
7	int
;	O
sib	struct
.	O
scale	int
=	O
(	O
codep	pointer
[	O
1	int
]	O
>>	O
6	int
)	O
&	O
3	int
;	O
sib	struct
.	O
base	int
=	O
codep	pointer
[	O
1	int
]	O
&	O
7	int
;	O
}	O
}	O
static	O
int	O
print_insn	function
(	O
bfd_vma	long
pc	long
,	O
disassemble_info	struct
*	O
info	pointer
)	O
{	O
const	O
struct	O
dis386	struct
*	O
dp	pointer
;	O
int	O
i	pointer
;	O
char	O
*	O
op_txt	array
[	O
MAX_OPERANDS	int
]	O
;	O
int	O
needcomma	int
;	O
int	O
sizeflag	int
,	O
orig_sizeflag	int
;	O
const	O
char	O
*	O
p	pointer
;	O
struct	O
dis_private	struct
priv	pointer
;	O
int	O
prefix_length	int
;	O
priv	pointer
.	O
orig_sizeflag	int
=	O
AFLAG	int
|	O
DFLAG	int
;	O
if	O
(	O
(	O
info	pointer
->	O
mach	long
&	O
bfd_mach_i386_i386	O
)	O
!=	O
0	int
)	O
address_mode	enum
=	O
mode_32bit	int
;	O
else	O
if	O
(	O
info	pointer
->	O
mach	long
==	O
bfd_mach_i386_i8086	O
)	O
{	O
address_mode	enum
=	O
mode_16bit	int
;	O
priv	pointer
.	O
orig_sizeflag	int
=	O
0	int
;	O
}	O
else	O
address_mode	enum
=	O
mode_64bit	int
;	O
if	O
(	O
intel_syntax	char
==	O
(	O
char	O
)	O
-	O
1	int
)	O
intel_syntax	char
=	O
(	O
info	pointer
->	O
mach	long
&	O
bfd_mach_i386_intel_syntax	O
)	O
!=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
info	pointer
->	O
disassembler_options	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
)	O
{	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
,	O
"amd64"	pointer
)	O
)	O
isa64	enum
=	O
amd64	int
;	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
,	O
"intel64"	pointer
)	O
)	O
isa64	enum
=	O
intel64	int
;	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
,	O
"x86-64"	pointer
)	O
)	O
{	O
address_mode	enum
=	O
mode_64bit	int
;	O
priv	pointer
.	O
orig_sizeflag	int
=	O
AFLAG	int
|	O
DFLAG	int
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
,	O
"i386"	pointer
)	O
)	O
{	O
address_mode	enum
=	O
mode_32bit	int
;	O
priv	pointer
.	O
orig_sizeflag	int
=	O
AFLAG	int
|	O
DFLAG	int
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
,	O
"i8086"	pointer
)	O
)	O
{	O
address_mode	enum
=	O
mode_16bit	int
;	O
priv	pointer
.	O
orig_sizeflag	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
,	O
"intel"	pointer
)	O
)	O
{	O
intel_syntax	char
=	O
1	int
;	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
+	O
5	int
,	O
"-mnemonic"	pointer
)	O
)	O
intel_mnemonic	char
=	O
1	int
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
,	O
"att"	pointer
)	O
)	O
{	O
intel_syntax	char
=	O
0	int
;	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
+	O
3	int
,	O
"-mnemonic"	pointer
)	O
)	O
intel_mnemonic	char
=	O
0	int
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
,	O
"addr"	pointer
)	O
)	O
{	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
)	O
{	O
if	O
(	O
p	pointer
[	O
4	int
]	O
==	O
'3'	O
&&	O
p	pointer
[	O
5	int
]	O
==	O
'2'	O
)	O
priv	pointer
.	O
orig_sizeflag	int
&=	O
~	O
AFLAG	int
;	O
else	O
if	O
(	O
p	pointer
[	O
4	int
]	O
==	O
'6'	O
&&	O
p	pointer
[	O
5	int
]	O
==	O
'4'	O
)	O
priv	pointer
.	O
orig_sizeflag	int
|=	O
AFLAG	int
;	O
}	O
else	O
{	O
if	O
(	O
p	pointer
[	O
4	int
]	O
==	O
'1'	O
&&	O
p	pointer
[	O
5	int
]	O
==	O
'6'	O
)	O
priv	pointer
.	O
orig_sizeflag	int
&=	O
~	O
AFLAG	int
;	O
else	O
if	O
(	O
p	pointer
[	O
4	int
]	O
==	O
'3'	O
&&	O
p	pointer
[	O
5	int
]	O
==	O
'2'	O
)	O
priv	pointer
.	O
orig_sizeflag	int
|=	O
AFLAG	int
;	O
}	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
,	O
"data"	pointer
)	O
)	O
{	O
if	O
(	O
p	pointer
[	O
4	int
]	O
==	O
'1'	O
&&	O
p	pointer
[	O
5	int
]	O
==	O
'6'	O
)	O
priv	pointer
.	O
orig_sizeflag	int
&=	O
~	O
DFLAG	int
;	O
else	O
if	O
(	O
p	pointer
[	O
4	int
]	O
==	O
'3'	O
&&	O
p	pointer
[	O
5	int
]	O
==	O
'2'	O
)	O
priv	pointer
.	O
orig_sizeflag	int
|=	O
DFLAG	int
;	O
}	O
else	O
if	O
(	O
CONST_STRNEQ	O
(	O
p	pointer
,	O
"suffix"	pointer
)	O
)	O
priv	pointer
.	O
orig_sizeflag	int
|=	O
SUFFIX_ALWAYS	int
;	O
p	pointer
=	O
strchr	function
(	O
p	pointer
,	O
','	O
)	O
;	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
p	pointer
++	O
;	O
}	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
sizeof	O
(	O
bfd_vma	long
)	O
<	O
8	int
)	O
{	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
_	O
(	O
"64-bit address is disabled"	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
intel_syntax	char
)	O
{	O
names64	pointer
=	O
intel_names64	array
;	O
names32	pointer
=	O
intel_names32	array
;	O
names16	pointer
=	O
intel_names16	array
;	O
names8	pointer
=	O
intel_names8	array
;	O
names8rex	pointer
=	O
intel_names8rex	array
;	O
names_seg	pointer
=	O
intel_names_seg	array
;	O
names_mm	pointer
=	O
intel_names_mm	array
;	O
names_bnd	pointer
=	O
intel_names_bnd	array
;	O
names_xmm	pointer
=	O
intel_names_xmm	array
;	O
names_ymm	pointer
=	O
intel_names_ymm	array
;	O
names_zmm	pointer
=	O
intel_names_zmm	array
;	O
index64	pointer
=	O
intel_index64	pointer
;	O
index32	pointer
=	O
intel_index32	pointer
;	O
names_mask	pointer
=	O
intel_names_mask	array
;	O
index16	pointer
=	O
intel_index16	array
;	O
open_char	char
=	O
'['	O
;	O
close_char	char
=	O
']'	O
;	O
separator_char	char
=	O
'+'	O
;	O
scale_char	char
=	O
'*'	O
;	O
}	O
else	O
{	O
names64	pointer
=	O
att_names64	array
;	O
names32	pointer
=	O
att_names32	array
;	O
names16	pointer
=	O
att_names16	array
;	O
names8	pointer
=	O
att_names8	array
;	O
names8rex	pointer
=	O
att_names8rex	array
;	O
names_seg	pointer
=	O
att_names_seg	array
;	O
names_mm	pointer
=	O
att_names_mm	array
;	O
names_bnd	pointer
=	O
att_names_bnd	array
;	O
names_xmm	pointer
=	O
att_names_xmm	array
;	O
names_ymm	pointer
=	O
att_names_ymm	array
;	O
names_zmm	pointer
=	O
att_names_zmm	array
;	O
index64	pointer
=	O
att_index64	pointer
;	O
index32	pointer
=	O
att_index32	pointer
;	O
names_mask	pointer
=	O
att_names_mask	array
;	O
index16	pointer
=	O
att_index16	array
;	O
open_char	char
=	O
'('	O
;	O
close_char	char
=	O
')'	O
;	O
separator_char	char
=	O
','	O
;	O
scale_char	char
=	O
','	O
;	O
}	O
if	O
(	O
(	O
info	pointer
->	O
mach	long
&	O
bfd_mach_l1om	O
)	O
!=	O
0	int
)	O
info	pointer
->	O
bytes_per_line	int
=	O
8	int
;	O
else	O
info	pointer
->	O
bytes_per_line	int
=	O
7	int
;	O
info	pointer
->	O
private_data	pointer
=	O
&	O
priv	pointer
;	O
priv	pointer
.	O
max_fetched	pointer
=	O
priv	pointer
.	O
the_buffer	array
;	O
priv	pointer
.	O
insn_start	long
=	O
pc	long
;	O
obuf	array
[	O
0	int
]	O
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
MAX_OPERANDS	int
;	O
++	O
i	pointer
)	O
{	O
op_out	array
[	O
i	pointer
]	O
[	O
0	int
]	O
=	O
0	int
;	O
op_index	array
[	O
i	pointer
]	O
=	O
-	O
1	int
;	O
}	O
the_info	pointer
=	O
info	pointer
;	O
start_pc	long
=	O
pc	long
;	O
start_codep	pointer
=	O
priv	pointer
.	O
the_buffer	array
;	O
codep	pointer
=	O
priv	pointer
.	O
the_buffer	array
;	O
if	O
(	O
OPCODES_SIGSETJMP	O
(	O
priv	pointer
.	O
bailout	array
)	O
!=	O
0	int
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
if	O
(	O
codep	pointer
>	O
priv	pointer
.	O
the_buffer	array
)	O
{	O
name	pointer
=	O
prefix_name	function
(	O
priv	pointer
.	O
the_buffer	array
[	O
0	int
]	O
,	O
priv	pointer
.	O
orig_sizeflag	int
)	O
;	O
if	O
(	O
name	pointer
!=	O
NULL	O
)	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
"%s"	pointer
,	O
name	pointer
)	O
;	O
else	O
{	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
".byte 0x%x"	pointer
,	O
(	O
unsigned	O
int	O
)	O
priv	pointer
.	O
the_buffer	array
[	O
0	int
]	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
obufp	pointer
=	O
obuf	array
;	O
sizeflag	int
=	O
priv	pointer
.	O
orig_sizeflag	int
;	O
if	O
(	O
!	O
ckprefix	function
(	O
)	O
||	O
rex_used	int
)	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
(	O
int	O
)	O
ARRAY_SIZE	O
(	O
all_prefixes	array
)	O
&&	O
all_prefixes	array
[	O
i	pointer
]	O
;	O
i	pointer
++	O
)	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
"%s%s"	pointer
,	O
i	pointer
==	O
0	int
?	O
""	pointer
:	O
" "	pointer
,	O
prefix_name	function
(	O
all_prefixes	array
[	O
i	pointer
]	O
,	O
sizeflag	int
)	O
)	O
;	O
return	O
i	pointer
;	O
}	O
insn_codep	pointer
=	O
codep	pointer
;	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
two_source_ops	int
=	O
(	O
*	O
codep	pointer
==	O
0x62	int
)	O
||	O
(	O
*	O
codep	pointer
==	O
0xc8	int
)	O
;	O
if	O
(	O
(	O
(	O
prefixes	int
&	O
PREFIX_FWAIT	int
)	O
&&	O
(	O
(	O
*	O
codep	pointer
<	O
0xd8	int
)	O
||	O
(	O
*	O
codep	pointer
>	O
0xdf	int
)	O
)	O
)	O
)	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
fwait_prefix	int
&&	O
all_prefixes	array
[	O
i	pointer
]	O
;	O
i	pointer
++	O
)	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
"%s "	pointer
,	O
prefix_name	function
(	O
all_prefixes	array
[	O
i	pointer
]	O
,	O
sizeflag	int
)	O
)	O
;	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
"fwait"	pointer
)	O
;	O
return	O
i	pointer
+	O
1	int
;	O
}	O
if	O
(	O
*	O
codep	pointer
==	O
0x0f	int
)	O
{	O
unsigned	O
char	O
threebyte	char
;	O
codep	pointer
++	O
;	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
threebyte	char
=	O
*	O
codep	pointer
;	O
dp	pointer
=	O
&	O
dis386_twobyte	array
[	O
threebyte	char
]	O
;	O
need_modrm	char
=	O
twobyte_has_modrm	array
[	O
*	O
codep	pointer
]	O
;	O
codep	pointer
++	O
;	O
}	O
else	O
{	O
dp	pointer
=	O
&	O
dis386	struct
[	O
*	O
codep	pointer
]	O
;	O
need_modrm	char
=	O
onebyte_has_modrm	array
[	O
*	O
codep	pointer
]	O
;	O
codep	pointer
++	O
;	O
}	O
orig_sizeflag	int
=	O
sizeflag	int
;	O
if	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
sizeflag	int
^=	O
AFLAG	int
;	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
)	O
sizeflag	int
^=	O
DFLAG	int
;	O
end_codep	pointer
=	O
codep	pointer
;	O
if	O
(	O
need_modrm	char
)	O
{	O
FETCH_DATA	O
(	O
info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
modrm	struct
.	O
mod	int
=	O
(	O
*	O
codep	pointer
>>	O
6	int
)	O
&	O
3	int
;	O
modrm	struct
.	O
reg	int
=	O
(	O
*	O
codep	pointer
>>	O
3	int
)	O
&	O
7	int
;	O
modrm	struct
.	O
rm	int
=	O
*	O
codep	pointer
&	O
7	int
;	O
}	O
need_vex	char
=	O
0	int
;	O
need_vex_reg	char
=	O
0	int
;	O
vex_w_done	char
=	O
0	int
;	O
memset	function
(	O
&	O
vex	struct
,	O
0	int
,	O
sizeof	O
(	O
vex	struct
)	O
)	O
;	O
if	O
(	O
dp	pointer
->	O
name	pointer
==	O
NULL	O
&&	O
dp	pointer
->	O
op	array
[	O
0	int
]	O
.	O
bytemode	int
==	O
FLOATCODE	int
)	O
{	O
get_sib	function
(	O
info	pointer
,	O
sizeflag	int
)	O
;	O
dofloat	function
(	O
sizeflag	int
)	O
;	O
}	O
else	O
{	O
dp	pointer
=	O
get_valid_dis386	function
(	O
dp	pointer
,	O
info	pointer
)	O
;	O
if	O
(	O
dp	pointer
!=	O
NULL	O
&&	O
putop	function
(	O
dp	pointer
->	O
name	pointer
,	O
sizeflag	int
)	O
==	O
0	int
)	O
{	O
get_sib	function
(	O
info	pointer
,	O
sizeflag	int
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
MAX_OPERANDS	int
;	O
++	O
i	pointer
)	O
{	O
obufp	pointer
=	O
op_out	array
[	O
i	pointer
]	O
;	O
op_ad	int
=	O
MAX_OPERANDS	int
-	O
1	int
-	O
i	pointer
;	O
if	O
(	O
dp	pointer
->	O
op	array
[	O
i	pointer
]	O
.	O
rtn	pointer
)	O
(	O
*	O
dp	pointer
->	O
op	array
[	O
i	pointer
]	O
.	O
rtn	pointer
)	O
(	O
dp	pointer
->	O
op	array
[	O
i	pointer
]	O
.	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
if	O
(	O
i	pointer
==	O
0	int
&&	O
vex	struct
.	O
evex	int
)	O
{	O
if	O
(	O
vex	struct
.	O
mask_register_specifier	int
)	O
{	O
oappend	function
(	O
"{"	pointer
)	O
;	O
oappend	function
(	O
names_mask	pointer
[	O
vex	struct
.	O
mask_register_specifier	int
]	O
)	O
;	O
oappend	function
(	O
"}"	pointer
)	O
;	O
}	O
if	O
(	O
vex	struct
.	O
zeroing	int
)	O
oappend	function
(	O
"{z}"	pointer
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
the_info	pointer
)	O
{	O
the_info	pointer
->	O
insn_info_valid	char
=	O
0	int
;	O
the_info	pointer
->	O
branch_delay_insns	char
=	O
0	int
;	O
the_info	pointer
->	O
data_size	char
=	O
0	int
;	O
the_info	pointer
->	O
insn_type	enum
=	O
dis_noninsn	int
;	O
the_info	pointer
->	O
target	pointer
=	O
0	int
;	O
the_info	pointer
->	O
target2	long
=	O
0	int
;	O
}	O
op_is_jump	int
=	O
FALSE	int
;	O
{	O
int	O
jump_detection	int
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
MAX_OPERANDS	int
;	O
++	O
i	pointer
)	O
{	O
if	O
(	O
(	O
dp	pointer
->	O
op	array
[	O
i	pointer
]	O
.	O
rtn	pointer
==	O
OP_J	function
)	O
||	O
(	O
dp	pointer
->	O
op	array
[	O
i	pointer
]	O
.	O
rtn	pointer
==	O
OP_indirE	function
)	O
)	O
jump_detection	int
|=	O
1	int
;	O
else	O
if	O
(	O
(	O
dp	pointer
->	O
op	array
[	O
i	pointer
]	O
.	O
rtn	pointer
==	O
BND_Fixup	function
)	O
||	O
(	O
!	O
dp	pointer
->	O
op	array
[	O
i	pointer
]	O
.	O
rtn	pointer
&&	O
!	O
dp	pointer
->	O
op	array
[	O
i	pointer
]	O
.	O
bytemode	int
)	O
)	O
jump_detection	int
|=	O
2	int
;	O
else	O
if	O
(	O
(	O
dp	pointer
->	O
op	array
[	O
i	pointer
]	O
.	O
bytemode	int
==	O
cond_jump_mode	int
)	O
||	O
(	O
dp	pointer
->	O
op	array
[	O
i	pointer
]	O
.	O
bytemode	int
==	O
loop_jcxz_mode	int
)	O
)	O
jump_detection	int
|=	O
4	int
;	O
}	O
if	O
(	O
(	O
jump_detection	int
&	O
0x3	int
)	O
==	O
0x3	int
)	O
{	O
op_is_jump	int
=	O
TRUE	int
;	O
if	O
(	O
jump_detection	int
&	O
0x4	int
)	O
the_info	pointer
->	O
insn_type	enum
=	O
dis_condbranch	int
;	O
else	O
the_info	pointer
->	O
insn_type	enum
=	O
(	O
dp	pointer
->	O
name	pointer
&&	O
!	O
strncmp	function
(	O
dp	pointer
->	O
name	pointer
,	O
"call"	pointer
,	O
4	int
)	O
)	O
?	O
dis_jsr	int
:	O
dis_branch	int
;	O
}	O
}	O
if	O
(	O
need_vex	char
&&	O
vex	struct
.	O
register_specifier	int
!=	O
0	int
)	O
{	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
"(bad)"	pointer
)	O
;	O
return	O
end_codep	pointer
-	O
priv	pointer
.	O
the_buffer	array
;	O
}	O
if	O
(	O
rex_ignored	int
==	O
0	int
&&	O
(	O
rex	int
^	O
rex_used	int
)	O
==	O
0	int
&&	O
last_rex_prefix	int
>=	O
0	int
)	O
all_prefixes	array
[	O
last_rex_prefix	int
]	O
=	O
0	int
;	O
if	O
(	O
(	O
prefixes	int
&	O
(	O
PREFIX_CS	int
|	O
PREFIX_SS	int
|	O
PREFIX_DS	int
|	O
PREFIX_ES	int
|	O
PREFIX_FS	int
|	O
PREFIX_GS	int
)	O
)	O
!=	O
0	int
&&	O
(	O
used_prefixes	int
&	O
active_seg_prefix	int
)	O
!=	O
0	int
)	O
all_prefixes	array
[	O
last_seg_prefix	int
]	O
=	O
0	int
;	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
!=	O
0	int
&&	O
(	O
used_prefixes	int
&	O
PREFIX_ADDR	int
)	O
!=	O
0	int
)	O
all_prefixes	array
[	O
last_addr_prefix	int
]	O
=	O
0	int
;	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
!=	O
0	int
&&	O
(	O
used_prefixes	int
&	O
PREFIX_DATA	int
)	O
!=	O
0	int
)	O
all_prefixes	array
[	O
last_data_prefix	int
]	O
=	O
0	int
;	O
prefix_length	int
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
(	O
int	O
)	O
ARRAY_SIZE	O
(	O
all_prefixes	array
)	O
;	O
i	pointer
++	O
)	O
if	O
(	O
all_prefixes	array
[	O
i	pointer
]	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
name	pointer
=	O
prefix_name	function
(	O
all_prefixes	array
[	O
i	pointer
]	O
,	O
orig_sizeflag	int
)	O
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
abort	function
(	O
)	O
;	O
prefix_length	int
+=	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
;	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
"%s "	pointer
,	O
name	pointer
)	O
;	O
}	O
if	O
(	O
dp	pointer
->	O
prefix_requirement	int
==	O
PREFIX_OPCODE	O
&&	O
dp	pointer
!=	O
&	O
bad_opcode	struct
&&	O
(	O
(	O
(	O
prefixes	int
&	O
(	O
PREFIX_REPZ	int
|	O
PREFIX_REPNZ	int
)	O
)	O
!=	O
0	int
&&	O
(	O
used_prefixes	int
&	O
(	O
PREFIX_REPZ	int
|	O
PREFIX_REPNZ	int
)	O
)	O
==	O
0	int
)	O
||	O
(	O
(	O
(	O
(	O
prefixes	int
&	O
(	O
PREFIX_REPZ	int
|	O
PREFIX_REPNZ	int
|	O
PREFIX_DATA	int
)	O
)	O
==	O
PREFIX_DATA	int
)	O
&&	O
(	O
used_prefixes	int
&	O
PREFIX_DATA	int
)	O
==	O
0	int
)	O
)	O
)	O
)	O
{	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
"(bad)"	pointer
)	O
;	O
return	O
end_codep	pointer
-	O
priv	pointer
.	O
the_buffer	array
;	O
}	O
if	O
(	O
(	O
codep	pointer
-	O
start_codep	pointer
)	O
>	O
MAX_CODE_LENGTH	int
)	O
{	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
"(bad)"	pointer
)	O
;	O
return	O
MAX_CODE_LENGTH	int
;	O
}	O
obufp	pointer
=	O
mnemonicendp	pointer
;	O
for	O
(	O
i	pointer
=	O
strlen	function
(	O
obuf	array
)	O
+	O
prefix_length	int
;	O
i	pointer
<	O
6	int
;	O
i	pointer
++	O
)	O
oappend	function
(	O
" "	pointer
)	O
;	O
oappend	function
(	O
" "	pointer
)	O
;	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
"%s"	pointer
,	O
obuf	array
)	O
;	O
if	O
(	O
intel_syntax	char
||	O
two_source_ops	int
)	O
{	O
bfd_vma	long
riprel	long
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
MAX_OPERANDS	int
;	O
++	O
i	pointer
)	O
op_txt	array
[	O
i	pointer
]	O
=	O
op_out	array
[	O
i	pointer
]	O
;	O
if	O
(	O
intel_syntax	char
&&	O
dp	pointer
&&	O
dp	pointer
->	O
op	array
[	O
2	int
]	O
.	O
rtn	pointer
==	O
OP_Rounding	function
&&	O
dp	pointer
->	O
op	array
[	O
3	int
]	O
.	O
rtn	pointer
==	O
OP_E	function
&&	O
dp	pointer
->	O
op	array
[	O
4	int
]	O
.	O
rtn	pointer
==	O
NULL	O
)	O
{	O
op_txt	array
[	O
2	int
]	O
=	O
op_out	array
[	O
3	int
]	O
;	O
op_txt	array
[	O
3	int
]	O
=	O
op_out	array
[	O
2	int
]	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
(	O
MAX_OPERANDS	int
>>	O
1	int
)	O
;	O
++	O
i	pointer
)	O
{	O
op_ad	int
=	O
op_index	array
[	O
i	pointer
]	O
;	O
op_index	array
[	O
i	pointer
]	O
=	O
op_index	array
[	O
MAX_OPERANDS	int
-	O
1	int
-	O
i	pointer
]	O
;	O
op_index	array
[	O
MAX_OPERANDS	int
-	O
1	int
-	O
i	pointer
]	O
=	O
op_ad	int
;	O
riprel	long
=	O
op_riprel	array
[	O
i	pointer
]	O
;	O
op_riprel	array
[	O
i	pointer
]	O
=	O
op_riprel	array
[	O
MAX_OPERANDS	int
-	O
1	int
-	O
i	pointer
]	O
;	O
op_riprel	array
[	O
MAX_OPERANDS	int
-	O
1	int
-	O
i	pointer
]	O
=	O
riprel	long
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
MAX_OPERANDS	int
;	O
++	O
i	pointer
)	O
op_txt	array
[	O
MAX_OPERANDS	int
-	O
1	int
-	O
i	pointer
]	O
=	O
op_out	array
[	O
i	pointer
]	O
;	O
}	O
needcomma	int
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
MAX_OPERANDS	int
;	O
++	O
i	pointer
)	O
if	O
(	O
*	O
op_txt	array
[	O
i	pointer
]	O
)	O
{	O
if	O
(	O
needcomma	int
)	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
","	pointer
)	O
;	O
if	O
(	O
op_index	array
[	O
i	pointer
]	O
!=	O
-	O
1	int
&&	O
!	O
op_riprel	array
[	O
i	pointer
]	O
)	O
{	O
bfd_vma	long
target	pointer
=	O
(	O
bfd_vma	long
)	O
op_address	array
[	O
op_index	array
[	O
i	pointer
]	O
]	O
;	O
if	O
(	O
the_info	pointer
&&	O
op_is_jump	int
)	O
{	O
the_info	pointer
->	O
insn_info_valid	char
=	O
1	int
;	O
the_info	pointer
->	O
branch_delay_insns	char
=	O
0	int
;	O
the_info	pointer
->	O
data_size	char
=	O
0	int
;	O
the_info	pointer
->	O
target	pointer
=	O
target	pointer
;	O
the_info	pointer
->	O
target2	long
=	O
0	int
;	O
}	O
(	O
*	O
info	pointer
->	O
print_address_func	pointer
)	O
(	O
target	pointer
,	O
info	pointer
)	O
;	O
}	O
else	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
"%s"	pointer
,	O
op_txt	array
[	O
i	pointer
]	O
)	O
;	O
needcomma	int
=	O
1	int
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
MAX_OPERANDS	int
;	O
i	pointer
++	O
)	O
if	O
(	O
op_index	array
[	O
i	pointer
]	O
!=	O
-	O
1	int
&&	O
op_riprel	array
[	O
i	pointer
]	O
)	O
{	O
(	O
*	O
info	pointer
->	O
fprintf_func	pointer
)	O
(	O
info	pointer
->	O
stream	pointer
,	O
"        # "	pointer
)	O
;	O
(	O
*	O
info	pointer
->	O
print_address_func	pointer
)	O
(	O
(	O
bfd_vma	long
)	O
(	O
start_pc	long
+	O
(	O
codep	pointer
-	O
start_codep	pointer
)	O
+	O
op_address	array
[	O
op_index	array
[	O
i	pointer
]	O
]	O
)	O
,	O
info	pointer
)	O
;	O
break	O
;	O
}	O
return	O
codep	pointer
-	O
priv	pointer
.	O
the_buffer	array
;	O
}	O
static	O
const	O
char	O
*	O
float_mem	array
[	O
]	O
=	O
{	O
"fadd{s|}"	pointer
,	O
"fmul{s|}"	pointer
,	O
"fcom{s|}"	pointer
,	O
"fcomp{s|}"	pointer
,	O
"fsub{s|}"	pointer
,	O
"fsubr{s|}"	pointer
,	O
"fdiv{s|}"	pointer
,	O
"fdivr{s|}"	pointer
,	O
"fld{s|}"	pointer
,	O
"(bad)"	pointer
,	O
"fst{s|}"	pointer
,	O
"fstp{s|}"	pointer
,	O
"fldenvIC"	pointer
,	O
"fldcw"	pointer
,	O
"fNstenvIC"	pointer
,	O
"fNstcw"	pointer
,	O
"fiadd{l|}"	pointer
,	O
"fimul{l|}"	pointer
,	O
"ficom{l|}"	pointer
,	O
"ficomp{l|}"	pointer
,	O
"fisub{l|}"	pointer
,	O
"fisubr{l|}"	pointer
,	O
"fidiv{l|}"	pointer
,	O
"fidivr{l|}"	pointer
,	O
"fild{l|}"	pointer
,	O
"fisttp{l|}"	pointer
,	O
"fist{l|}"	pointer
,	O
"fistp{l|}"	pointer
,	O
"(bad)"	pointer
,	O
"fld{t||t|}"	pointer
,	O
"(bad)"	pointer
,	O
"fstp{t||t|}"	pointer
,	O
"fadd{l|}"	pointer
,	O
"fmul{l|}"	pointer
,	O
"fcom{l|}"	pointer
,	O
"fcomp{l|}"	pointer
,	O
"fsub{l|}"	pointer
,	O
"fsubr{l|}"	pointer
,	O
"fdiv{l|}"	pointer
,	O
"fdivr{l|}"	pointer
,	O
"fld{l|}"	pointer
,	O
"fisttp{ll|}"	pointer
,	O
"fst{l||}"	pointer
,	O
"fstp{l|}"	pointer
,	O
"frstorIC"	pointer
,	O
"(bad)"	pointer
,	O
"fNsaveIC"	pointer
,	O
"fNstsw"	pointer
,	O
"fiadd{s|}"	pointer
,	O
"fimul{s|}"	pointer
,	O
"ficom{s|}"	pointer
,	O
"ficomp{s|}"	pointer
,	O
"fisub{s|}"	pointer
,	O
"fisubr{s|}"	pointer
,	O
"fidiv{s|}"	pointer
,	O
"fidivr{s|}"	pointer
,	O
"fild{s|}"	pointer
,	O
"fisttp{s|}"	pointer
,	O
"fist{s|}"	pointer
,	O
"fistp{s|}"	pointer
,	O
"fbld"	pointer
,	O
"fild{ll|}"	pointer
,	O
"fbstp"	pointer
,	O
"fistp{ll|}"	pointer
,	O
}	O
;	O
static	O
const	O
unsigned	O
char	O
float_mem_mode	array
[	O
]	O
=	O
{	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
0	int
,	O
d_mode	int
,	O
d_mode	int
,	O
0	int
,	O
w_mode	int
,	O
0	int
,	O
w_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
d_mode	int
,	O
0	int
,	O
t_mode	int
,	O
0	int
,	O
t_mode	int
,	O
q_mode	int
,	O
q_mode	int
,	O
q_mode	int
,	O
q_mode	int
,	O
q_mode	int
,	O
q_mode	int
,	O
q_mode	int
,	O
q_mode	int
,	O
q_mode	int
,	O
q_mode	int
,	O
q_mode	int
,	O
q_mode	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
w_mode	int
,	O
w_mode	int
,	O
w_mode	int
,	O
w_mode	int
,	O
w_mode	int
,	O
w_mode	int
,	O
w_mode	int
,	O
w_mode	int
,	O
w_mode	int
,	O
w_mode	int
,	O
w_mode	int
,	O
w_mode	int
,	O
w_mode	int
,	O
t_mode	int
,	O
q_mode	int
,	O
t_mode	int
,	O
q_mode	int
}	O
;	O
static	O
const	O
struct	O
dis386	struct
float_reg	array
[	O
]	O
[	O
8	int
]	O
=	O
{	O
{	O
{	O
"fadd"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fmul"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcom"	pointer
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcomp"	pointer
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fsub"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fsubr"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdiv"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdivr"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"fld"	pointer
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fxch"	pointer
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
FGRPd9_2	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
FGRPd9_4	O
}	O
,	O
{	O
FGRPd9_5	O
}	O
,	O
{	O
FGRPd9_6	O
}	O
,	O
{	O
FGRPd9_7	O
}	O
,	O
}	O
,	O
{	O
{	O
"fcmovb"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmove"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmovbe"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmovu"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
FGRPda_5	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"fcmovnb"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmovne"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmovnbe"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcmovnu"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
FGRPdb_4	O
}	O
,	O
{	O
"fucomi"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcomi"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"fadd"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fmul"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"fsub{!M|r}"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fsub{M|}"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdiv{!M|r}"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdiv{M|}"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"ffree"	pointer
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
"fst"	pointer
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fstp"	pointer
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fucom"	pointer
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fucomp"	pointer
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
{	O
{	O
"faddp"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fmulp"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
FGRPde_3	O
}	O
,	O
{	O
"fsub{!M|r}p"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fsub{M|}p"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdiv{!M|r}p"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
{	O
"fdiv{M|}p"	pointer
,	O
{	O
STi	O
,	O
ST	O
}	O
,	O
0	int
}	O
,	O
}	O
,	O
{	O
{	O
"ffreep"	pointer
,	O
{	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
{	O
FGRPdf_4	O
}	O
,	O
{	O
"fucomip"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
"fcomip"	pointer
,	O
{	O
ST	O
,	O
STi	O
}	O
,	O
0	int
}	O
,	O
{	O
Bad_Opcode	O
}	O
,	O
}	O
,	O
}	O
;	O
static	O
char	O
*	O
fgrps	array
[	O
]	O
[	O
8	int
]	O
=	O
{	O
{	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
}	O
,	O
{	O
"fnop"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
}	O
,	O
{	O
"fchs"	pointer
,	O
"fabs"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"ftst"	pointer
,	O
"fxam"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
}	O
,	O
{	O
"fld1"	pointer
,	O
"fldl2t"	pointer
,	O
"fldl2e"	pointer
,	O
"fldpi"	pointer
,	O
"fldlg2"	pointer
,	O
"fldln2"	pointer
,	O
"fldz"	pointer
,	O
"(bad)"	pointer
,	O
}	O
,	O
{	O
"f2xm1"	pointer
,	O
"fyl2x"	pointer
,	O
"fptan"	pointer
,	O
"fpatan"	pointer
,	O
"fxtract"	pointer
,	O
"fprem1"	pointer
,	O
"fdecstp"	pointer
,	O
"fincstp"	pointer
,	O
}	O
,	O
{	O
"fprem"	pointer
,	O
"fyl2xp1"	pointer
,	O
"fsqrt"	pointer
,	O
"fsincos"	pointer
,	O
"frndint"	pointer
,	O
"fscale"	pointer
,	O
"fsin"	pointer
,	O
"fcos"	pointer
,	O
}	O
,	O
{	O
"(bad)"	pointer
,	O
"fucompp"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
}	O
,	O
{	O
"fNeni(8087 only)"	pointer
,	O
"fNdisi(8087 only)"	pointer
,	O
"fNclex"	pointer
,	O
"fNinit"	pointer
,	O
"fNsetpm(287 only)"	pointer
,	O
"frstpm(287 only)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
}	O
,	O
{	O
"(bad)"	pointer
,	O
"fcompp"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
}	O
,	O
{	O
"fNstsw"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
"(bad)"	pointer
,	O
}	O
,	O
}	O
;	O
static	O
void	O
swap_operand	function
(	O
void	O
)	O
{	O
mnemonicendp	pointer
[	O
0	int
]	O
=	O
'.'	O
;	O
mnemonicendp	pointer
[	O
1	int
]	O
=	O
's'	O
;	O
mnemonicendp	pointer
+=	O
2	int
;	O
}	O
static	O
void	O
OP_Skip_MODRM	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
}	O
static	O
void	O
dofloat	function
(	O
int	O
sizeflag	int
)	O
{	O
const	O
struct	O
dis386	struct
*	O
dp	pointer
;	O
unsigned	O
char	O
floatop	char
;	O
floatop	char
=	O
codep	pointer
[	O
-	O
1	int
]	O
;	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
)	O
{	O
int	O
fp_indx	int
=	O
(	O
floatop	char
-	O
0xd8	int
)	O
*	O
8	int
+	O
modrm	struct
.	O
reg	int
;	O
putop	function
(	O
float_mem	array
[	O
fp_indx	int
]	O
,	O
sizeflag	int
)	O
;	O
obufp	pointer
=	O
op_out	array
[	O
0	int
]	O
;	O
op_ad	int
=	O
2	int
;	O
OP_E	function
(	O
float_mem_mode	array
[	O
fp_indx	int
]	O
,	O
sizeflag	int
)	O
;	O
return	O
;	O
}	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
dp	pointer
=	O
&	O
float_reg	array
[	O
floatop	char
-	O
0xd8	int
]	O
[	O
modrm	struct
.	O
reg	int
]	O
;	O
if	O
(	O
dp	pointer
->	O
name	pointer
==	O
NULL	O
)	O
{	O
putop	function
(	O
fgrps	array
[	O
dp	pointer
->	O
op	array
[	O
0	int
]	O
.	O
bytemode	int
]	O
[	O
modrm	struct
.	O
rm	int
]	O
,	O
sizeflag	int
)	O
;	O
if	O
(	O
floatop	char
==	O
0xdf	int
&&	O
codep	pointer
[	O
-	O
1	int
]	O
==	O
0xe0	int
)	O
strcpy	function
(	O
op_out	array
[	O
0	int
]	O
,	O
names16	pointer
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
putop	function
(	O
dp	pointer
->	O
name	pointer
,	O
sizeflag	int
)	O
;	O
obufp	pointer
=	O
op_out	array
[	O
0	int
]	O
;	O
op_ad	int
=	O
2	int
;	O
if	O
(	O
dp	pointer
->	O
op	array
[	O
0	int
]	O
.	O
rtn	pointer
)	O
(	O
*	O
dp	pointer
->	O
op	array
[	O
0	int
]	O
.	O
rtn	pointer
)	O
(	O
dp	pointer
->	O
op	array
[	O
0	int
]	O
.	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
obufp	pointer
=	O
op_out	array
[	O
1	int
]	O
;	O
op_ad	int
=	O
1	int
;	O
if	O
(	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
rtn	pointer
)	O
(	O
*	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
rtn	pointer
)	O
(	O
dp	pointer
->	O
op	array
[	O
1	int
]	O
.	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
}	O
static	O
void	O
oappend_maybe_intel	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
oappend	function
(	O
s	pointer
+	O
intel_syntax	char
)	O
;	O
}	O
static	O
void	O
OP_ST	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
oappend_maybe_intel	function
(	O
"%st"	pointer
)	O
;	O
}	O
static	O
void	O
OP_STi	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
sprintf	function
(	O
scratchbuf	array
,	O
"%%st(%d)"	pointer
,	O
modrm	struct
.	O
rm	int
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
}	O
static	O
int	O
putop	function
(	O
const	O
char	O
*	O
in_template	pointer
,	O
int	O
sizeflag	int
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
int	O
alt	int
=	O
0	int
;	O
int	O
cond	int
=	O
1	int
;	O
unsigned	O
int	O
l	int
=	O
0	int
,	O
len	long
=	O
1	int
;	O
char	O
last	array
[	O
4	int
]	O
;	O
for	O
(	O
p	pointer
=	O
in_template	pointer
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
default	O
:	O
*	O
obufp	pointer
++	O
=	O
*	O
p	pointer
;	O
break	O
;	O
case	O
'%'	O
:	O
len	long
++	O
;	O
break	O
;	O
case	O
'!'	O
:	O
cond	int
=	O
0	int
;	O
break	O
;	O
case	O
'{'	O
:	O
if	O
(	O
intel_syntax	char
)	O
{	O
while	O
(	O
*	O
++	O
p	pointer
!=	O
'|'	O
)	O
if	O
(	O
*	O
p	pointer
==	O
'}'	O
||	O
*	O
p	pointer
==	O
'\0'	O
)	O
abort	function
(	O
)	O
;	O
}	O
case	O
'I'	O
:	O
alt	int
=	O
1	int
;	O
continue	O
;	O
case	O
'|'	O
:	O
while	O
(	O
*	O
++	O
p	pointer
!=	O
'}'	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\0'	O
)	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
'}'	O
:	O
break	O
;	O
case	O
'A'	O
:	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
||	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
*	O
obufp	pointer
++	O
=	O
'b'	O
;	O
break	O
;	O
case	O
'B'	O
:	O
if	O
(	O
l	int
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
case_B	O
:	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
if	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
*	O
obufp	pointer
++	O
=	O
'b'	O
;	O
}	O
else	O
{	O
if	O
(	O
l	int
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	array
[	O
0	int
]	O
!=	O
'L'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
!	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
)	O
{	O
*	O
obufp	pointer
++	O
=	O
'a'	O
;	O
*	O
obufp	pointer
++	O
=	O
'b'	O
;	O
*	O
obufp	pointer
++	O
=	O
's'	O
;	O
}	O
goto	O
case_B	O
;	O
}	O
break	O
;	O
case	O
'C'	O
:	O
if	O
(	O
intel_syntax	char
&&	O
!	O
alt	int
)	O
break	O
;	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
||	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
*	O
obufp	pointer
++	O
=	O
intel_syntax	char
?	O
'd'	O
:	O
'l'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
intel_syntax	char
?	O
'w'	O
:	O
's'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
case	O
'D'	O
:	O
if	O
(	O
intel_syntax	char
||	O
!	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
break	O
;	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
)	O
{	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
*	O
obufp	pointer
++	O
=	O
intel_syntax	char
?	O
'd'	O
:	O
'l'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
}	O
else	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
break	O
;	O
case	O
'E'	O
:	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
)	O
{	O
if	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
*	O
obufp	pointer
++	O
=	O
'r'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'e'	O
;	O
}	O
else	O
if	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
*	O
obufp	pointer
++	O
=	O
'e'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
;	O
break	O
;	O
case	O
'F'	O
:	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
||	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
{	O
if	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
*	O
obufp	pointer
++	O
=	O
address_mode	enum
==	O
mode_64bit	int
?	O
'q'	O
:	O
'l'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
address_mode	enum
==	O
mode_64bit	int
?	O
'l'	O
:	O
'w'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
;	O
}	O
break	O
;	O
case	O
'G'	O
:	O
if	O
(	O
intel_syntax	char
||	O
(	O
obufp	pointer
[	O
-	O
1	int
]	O
!=	O
's'	O
&&	O
!	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rex	int
&	O
REX_W	int
)	O
||	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
)	O
*	O
obufp	pointer
++	O
=	O
'l'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
if	O
(	O
!	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
break	O
;	O
case	O
'H'	O
:	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
if	O
(	O
(	O
prefixes	int
&	O
(	O
PREFIX_CS	int
|	O
PREFIX_DS	int
)	O
)	O
==	O
PREFIX_CS	int
||	O
(	O
prefixes	int
&	O
(	O
PREFIX_CS	int
|	O
PREFIX_DS	int
)	O
)	O
==	O
PREFIX_DS	int
)	O
{	O
used_prefixes	int
|=	O
prefixes	int
&	O
(	O
PREFIX_CS	int
|	O
PREFIX_DS	int
)	O
;	O
*	O
obufp	pointer
++	O
=	O
','	O
;	O
*	O
obufp	pointer
++	O
=	O
'p'	O
;	O
if	O
(	O
prefixes	int
&	O
PREFIX_DS	int
)	O
*	O
obufp	pointer
++	O
=	O
't'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'n'	O
;	O
}	O
break	O
;	O
case	O
'J'	O
:	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
*	O
obufp	pointer
++	O
=	O
'l'	O
;	O
break	O
;	O
case	O
'K'	O
:	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'd'	O
;	O
break	O
;	O
case	O
'Z'	O
:	O
if	O
(	O
l	int
!=	O
0	int
||	O
len	long
!=	O
1	int
)	O
{	O
if	O
(	O
l	int
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	array
[	O
0	int
]	O
!=	O
'X'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
need_vex	char
||	O
!	O
vex	struct
.	O
evex	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
intel_syntax	char
||	O
(	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
||	O
vex	struct
.	O
b	pointer
)	O
&&	O
!	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
)	O
break	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
*	O
obufp	pointer
++	O
=	O
'x'	O
;	O
break	O
;	O
case	O
256	int
:	O
*	O
obufp	pointer
++	O
=	O
'y'	O
;	O
break	O
;	O
case	O
512	int
:	O
*	O
obufp	pointer
++	O
=	O
'z'	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
{	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
break	O
;	O
}	O
goto	O
case_L	O
;	O
case	O
'L'	O
:	O
if	O
(	O
l	int
!=	O
0	int
||	O
len	long
!=	O
1	int
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
}	O
case_L	O
:	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
if	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
*	O
obufp	pointer
++	O
=	O
'l'	O
;	O
break	O
;	O
case	O
'M'	O
:	O
if	O
(	O
intel_mnemonic	char
!=	O
cond	int
)	O
*	O
obufp	pointer
++	O
=	O
'r'	O
;	O
break	O
;	O
case	O
'N'	O
:	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_FWAIT	int
)	O
==	O
0	int
)	O
*	O
obufp	pointer
++	O
=	O
'n'	O
;	O
else	O
used_prefixes	int
|=	O
PREFIX_FWAIT	int
;	O
break	O
;	O
case	O
'O'	O
:	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
*	O
obufp	pointer
++	O
=	O
'o'	O
;	O
else	O
if	O
(	O
intel_syntax	char
&&	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
)	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'd'	O
;	O
if	O
(	O
!	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
break	O
;	O
case	O
'&'	O
:	O
if	O
(	O
!	O
intel_syntax	char
&&	O
address_mode	enum
==	O
mode_64bit	int
&&	O
isa64	enum
==	O
intel64	int
)	O
{	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
break	O
;	O
}	O
case	O
'T'	O
:	O
if	O
(	O
!	O
intel_syntax	char
&&	O
address_mode	enum
==	O
mode_64bit	int
&&	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
)	O
{	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
break	O
;	O
}	O
goto	O
case_P	O
;	O
case	O
'P'	O
:	O
if	O
(	O
l	int
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
case_P	O
:	O
if	O
(	O
intel_syntax	char
)	O
{	O
if	O
(	O
(	O
rex	int
&	O
REX_W	int
)	O
==	O
0	int
&&	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
)	O
{	O
if	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
==	O
0	int
)	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
||	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
{	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
*	O
obufp	pointer
++	O
=	O
'l'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
l	int
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	array
[	O
0	int
]	O
!=	O
'L'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
||	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
{	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
*	O
obufp	pointer
++	O
=	O
intel_syntax	char
?	O
'd'	O
:	O
'l'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
'U'	O
:	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
||	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
break	O
;	O
}	O
goto	O
case_Q	O
;	O
case	O
'Q'	O
:	O
if	O
(	O
l	int
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
case_Q	O
:	O
if	O
(	O
intel_syntax	char
&&	O
!	O
alt	int
)	O
break	O
;	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
||	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
{	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
*	O
obufp	pointer
++	O
=	O
intel_syntax	char
?	O
'd'	O
:	O
'l'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
l	int
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	array
[	O
0	int
]	O
!=	O
'L'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
intel_syntax	char
||	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
&&	O
!	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
{	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
}	O
else	O
*	O
obufp	pointer
++	O
=	O
'l'	O
;	O
}	O
break	O
;	O
case	O
'R'	O
:	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
else	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
{	O
if	O
(	O
intel_syntax	char
)	O
*	O
obufp	pointer
++	O
=	O
'd'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'l'	O
;	O
}	O
else	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
if	O
(	O
intel_syntax	char
&&	O
!	O
p	pointer
[	O
1	int
]	O
&&	O
(	O
(	O
rex	int
&	O
REX_W	int
)	O
||	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
)	O
)	O
*	O
obufp	pointer
++	O
=	O
'e'	O
;	O
if	O
(	O
!	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
break	O
;	O
case	O
'V'	O
:	O
if	O
(	O
l	int
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
)	O
{	O
if	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
l	int
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	array
[	O
0	int
]	O
!=	O
'L'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
{	O
*	O
obufp	pointer
++	O
=	O
'a'	O
;	O
*	O
obufp	pointer
++	O
=	O
'b'	O
;	O
*	O
obufp	pointer
++	O
=	O
's'	O
;	O
}	O
}	O
goto	O
case_S	O
;	O
case	O
'S'	O
:	O
if	O
(	O
l	int
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
case_S	O
:	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
if	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
{	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
*	O
obufp	pointer
++	O
=	O
'l'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
l	int
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	array
[	O
0	int
]	O
!=	O
'L'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
!	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
)	O
{	O
*	O
obufp	pointer
++	O
=	O
'a'	O
;	O
*	O
obufp	pointer
++	O
=	O
'b'	O
;	O
*	O
obufp	pointer
++	O
=	O
's'	O
;	O
}	O
goto	O
case_S	O
;	O
}	O
break	O
;	O
case	O
'X'	O
:	O
if	O
(	O
l	int
!=	O
0	int
||	O
len	long
!=	O
1	int
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
need_vex	char
&&	O
vex	struct
.	O
prefix	int
)	O
{	O
if	O
(	O
vex	struct
.	O
prefix	int
==	O
DATA_PREFIX_OPCODE	int
)	O
*	O
obufp	pointer
++	O
=	O
'd'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
's'	O
;	O
}	O
else	O
{	O
if	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
*	O
obufp	pointer
++	O
=	O
'd'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
's'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
case	O
'Y'	O
:	O
if	O
(	O
l	int
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
abort	function
(	O
)	O
;	O
else	O
{	O
if	O
(	O
l	int
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
last	array
[	O
0	int
]	O
!=	O
'X'	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
intel_syntax	char
||	O
(	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
||	O
vex	struct
.	O
b	pointer
)	O
&&	O
!	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
)	O
break	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
*	O
obufp	pointer
++	O
=	O
'x'	O
;	O
break	O
;	O
case	O
256	int
:	O
*	O
obufp	pointer
++	O
=	O
'y'	O
;	O
break	O
;	O
case	O
512	int
:	O
if	O
(	O
!	O
vex	struct
.	O
evex	int
)	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
'W'	O
:	O
if	O
(	O
l	int
==	O
0	int
&&	O
len	long
==	O
1	int
)	O
{	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
{	O
if	O
(	O
intel_syntax	char
)	O
*	O
obufp	pointer
++	O
=	O
'd'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'l'	O
;	O
}	O
else	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'b'	O
;	O
if	O
(	O
!	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
l	int
!=	O
1	int
||	O
len	long
!=	O
2	int
||	O
(	O
last	array
[	O
0	int
]	O
!=	O
'X'	O
&&	O
last	array
[	O
0	int
]	O
!=	O
'L'	O
)	O
)	O
{	O
SAVE_LAST	O
(	O
*	O
p	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
last	array
[	O
0	int
]	O
==	O
'X'	O
)	O
*	O
obufp	pointer
++	O
=	O
vex	struct
.	O
w	int
?	O
'd'	O
:	O
's'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
vex	struct
.	O
w	int
?	O
'q'	O
:	O
'd'	O
;	O
}	O
break	O
;	O
case	O
'^'	O
:	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
||	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
*	O
obufp	pointer
++	O
=	O
'l'	O
;	O
else	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
case	O
'@'	O
:	O
if	O
(	O
intel_syntax	char
)	O
break	O
;	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
(	O
isa64	enum
==	O
intel64	int
||	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
)	O
)	O
*	O
obufp	pointer
++	O
=	O
'q'	O
;	O
else	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
)	O
{	O
if	O
(	O
!	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
)	O
*	O
obufp	pointer
++	O
=	O
'w'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
}	O
alt	int
=	O
0	int
;	O
}	O
*	O
obufp	pointer
=	O
0	int
;	O
mnemonicendp	pointer
=	O
obufp	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
oappend	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
obufp	pointer
=	O
stpcpy	function
(	O
obufp	pointer
,	O
s	pointer
)	O
;	O
}	O
static	O
void	O
append_seg	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
active_seg_prefix	int
)	O
return	O
;	O
used_prefixes	int
|=	O
active_seg_prefix	int
;	O
switch	O
(	O
active_seg_prefix	int
)	O
{	O
case	O
PREFIX_CS	int
:	O
oappend_maybe_intel	function
(	O
"%cs:"	pointer
)	O
;	O
break	O
;	O
case	O
PREFIX_DS	int
:	O
oappend_maybe_intel	function
(	O
"%ds:"	pointer
)	O
;	O
break	O
;	O
case	O
PREFIX_SS	int
:	O
oappend_maybe_intel	function
(	O
"%ss:"	pointer
)	O
;	O
break	O
;	O
case	O
PREFIX_ES	int
:	O
oappend_maybe_intel	function
(	O
"%es:"	pointer
)	O
;	O
break	O
;	O
case	O
PREFIX_FS	int
:	O
oappend_maybe_intel	function
(	O
"%fs:"	pointer
)	O
;	O
break	O
;	O
case	O
PREFIX_GS	int
:	O
oappend_maybe_intel	function
(	O
"%gs:"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
OP_indirE	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
!	O
intel_syntax	char
)	O
oappend	function
(	O
"*"	pointer
)	O
;	O
OP_E	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
print_operand_value	function
(	O
char	O
*	O
buf	pointer
,	O
int	O
hex	int
,	O
bfd_vma	long
disp	long
)	O
{	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
)	O
{	O
if	O
(	O
hex	int
)	O
{	O
char	O
tmp	array
[	O
30	int
]	O
;	O
int	O
i	pointer
;	O
buf	pointer
[	O
0	int
]	O
=	O
'0'	O
;	O
buf	pointer
[	O
1	int
]	O
=	O
'x'	O
;	O
sprintf_vma	O
(	O
tmp	array
,	O
disp	long
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
tmp	array
[	O
i	pointer
]	O
==	O
'0'	O
&&	O
tmp	array
[	O
i	pointer
+	O
1	int
]	O
;	O
i	pointer
++	O
)	O
;	O
strcpy	function
(	O
buf	pointer
+	O
2	int
,	O
tmp	array
+	O
i	pointer
)	O
;	O
}	O
else	O
{	O
bfd_signed_vma	long
v	int
=	O
disp	long
;	O
char	O
tmp	array
[	O
30	int
]	O
;	O
int	O
i	pointer
;	O
if	O
(	O
v	int
<	O
0	int
)	O
{	O
*	O
(	O
buf	pointer
++	O
)	O
=	O
'-'	O
;	O
v	int
=	O
-	O
disp	long
;	O
if	O
(	O
v	int
<	O
0	int
)	O
{	O
strcpy	function
(	O
buf	pointer
,	O
"9223372036854775808"	pointer
)	O
;	O
return	O
;	O
}	O
}	O
if	O
(	O
!	O
v	int
)	O
{	O
strcpy	function
(	O
buf	pointer
,	O
"0"	pointer
)	O
;	O
return	O
;	O
}	O
i	pointer
=	O
0	int
;	O
tmp	array
[	O
29	int
]	O
=	O
0	int
;	O
while	O
(	O
v	int
)	O
{	O
tmp	array
[	O
28	int
-	O
i	pointer
]	O
=	O
(	O
v	int
%	O
10	int
)	O
+	O
'0'	O
;	O
v	int
/=	O
10	int
;	O
i	pointer
++	O
;	O
}	O
strcpy	function
(	O
buf	pointer
,	O
tmp	array
+	O
29	int
-	O
i	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
hex	int
)	O
sprintf	function
(	O
buf	pointer
,	O
"0x%x"	pointer
,	O
(	O
unsigned	O
int	O
)	O
disp	long
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
,	O
"%d"	pointer
,	O
(	O
int	O
)	O
disp	long
)	O
;	O
}	O
}	O
static	O
void	O
print_displacement	function
(	O
char	O
*	O
buf	pointer
,	O
bfd_vma	long
disp	long
)	O
{	O
bfd_signed_vma	long
val	array
=	O
disp	long
;	O
char	O
tmp	array
[	O
30	int
]	O
;	O
int	O
i	pointer
,	O
j	int
=	O
0	int
;	O
if	O
(	O
val	array
<	O
0	int
)	O
{	O
buf	pointer
[	O
j	int
++	O
]	O
=	O
'-'	O
;	O
val	array
=	O
-	O
disp	long
;	O
if	O
(	O
val	array
<	O
0	int
)	O
{	O
switch	O
(	O
address_mode	enum
)	O
{	O
case	O
mode_64bit	int
:	O
strcpy	function
(	O
buf	pointer
+	O
j	int
,	O
"0x8000000000000000"	pointer
)	O
;	O
break	O
;	O
case	O
mode_32bit	int
:	O
strcpy	function
(	O
buf	pointer
+	O
j	int
,	O
"0x80000000"	pointer
)	O
;	O
break	O
;	O
case	O
mode_16bit	int
:	O
strcpy	function
(	O
buf	pointer
+	O
j	int
,	O
"0x8000"	pointer
)	O
;	O
break	O
;	O
}	O
return	O
;	O
}	O
}	O
buf	pointer
[	O
j	int
++	O
]	O
=	O
'0'	O
;	O
buf	pointer
[	O
j	int
++	O
]	O
=	O
'x'	O
;	O
sprintf_vma	O
(	O
tmp	array
,	O
(	O
bfd_vma	long
)	O
val	array
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
tmp	array
[	O
i	pointer
]	O
==	O
'0'	O
;	O
i	pointer
++	O
)	O
continue	O
;	O
if	O
(	O
tmp	array
[	O
i	pointer
]	O
==	O
'\0'	O
)	O
i	pointer
--	O
;	O
strcpy	function
(	O
buf	pointer
+	O
j	int
,	O
tmp	array
+	O
i	pointer
)	O
;	O
}	O
static	O
void	O
intel_operand_size	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
vex	struct
.	O
evex	int
&&	O
vex	struct
.	O
b	pointer
&&	O
(	O
bytemode	int
==	O
x_mode	int
||	O
bytemode	int
==	O
evex_half_bcst_xmmq_mode	int
)	O
)	O
{	O
if	O
(	O
vex	struct
.	O
w	int
)	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
else	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
return	O
;	O
}	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
b_mode	int
:	O
case	O
b_swap_mode	int
:	O
case	O
dqb_mode	int
:	O
case	O
db_mode	int
:	O
oappend	function
(	O
"BYTE PTR "	pointer
)	O
;	O
break	O
;	O
case	O
w_mode	int
:	O
case	O
dw_mode	int
:	O
case	O
dqw_mode	int
:	O
oappend	function
(	O
"WORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
indir_v_mode	int
:	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
isa64	enum
==	O
intel64	int
)	O
{	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
break	O
;	O
}	O
case	O
stack_v_mode	int
:	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
)	O
{	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
break	O
;	O
}	O
case	O
v_mode	int
:	O
case	O
v_swap_mode	int
:	O
case	O
dq_mode	int
:	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
else	O
{	O
if	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
bytemode	int
==	O
dq_mode	int
)	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
else	O
oappend	function
(	O
"WORD PTR "	pointer
)	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
case	O
z_mode	int
:	O
if	O
(	O
(	O
rex	int
&	O
REX_W	int
)	O
||	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
)	O
*	O
obufp	pointer
++	O
=	O
'D'	O
;	O
oappend	function
(	O
"WORD PTR "	pointer
)	O
;	O
if	O
(	O
!	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
break	O
;	O
case	O
a_mode	int
:	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
else	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
break	O
;	O
case	O
d_mode	int
:	O
case	O
d_scalar_mode	int
:	O
case	O
d_scalar_swap_mode	int
:	O
case	O
d_swap_mode	int
:	O
case	O
dqd_mode	int
:	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
q_mode	int
:	O
case	O
q_scalar_mode	int
:	O
case	O
q_scalar_swap_mode	int
:	O
case	O
q_swap_mode	int
:	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
m_mode	int
:	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
)	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
else	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
f_mode	int
:	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
oappend	function
(	O
"FWORD PTR "	pointer
)	O
;	O
else	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
break	O
;	O
case	O
t_mode	int
:	O
oappend	function
(	O
"TBYTE PTR "	pointer
)	O
;	O
break	O
;	O
case	O
x_mode	int
:	O
case	O
x_swap_mode	int
:	O
case	O
evex_x_gscat_mode	int
:	O
case	O
evex_x_nobcst_mode	int
:	O
case	O
b_scalar_mode	int
:	O
case	O
w_scalar_mode	int
:	O
if	O
(	O
need_vex	char
)	O
{	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
oappend	function
(	O
"XMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	function
(	O
"YMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	function
(	O
"ZMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
else	O
oappend	function
(	O
"XMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
xmm_mode	int
:	O
oappend	function
(	O
"XMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
ymm_mode	int
:	O
oappend	function
(	O
"YMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
xmmq_mode	int
:	O
case	O
evex_half_bcst_xmmq_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	function
(	O
"XMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	function
(	O
"YMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmm_mb_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
case	O
512	int
:	O
oappend	function
(	O
"BYTE PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmm_mw_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
case	O
512	int
:	O
oappend	function
(	O
"WORD PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmm_md_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
case	O
512	int
:	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmm_mq_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
case	O
512	int
:	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmmdw_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
oappend	function
(	O
"WORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
xmmqd_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	function
(	O
"XMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
ymmq_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	function
(	O
"YMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	function
(	O
"ZMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
ymmxmm_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
oappend	function
(	O
"XMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
o_mode	int
:	O
oappend	function
(	O
"OWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
xmm_mdq_mode	int
:	O
case	O
vex_w_dq_mode	int
:	O
case	O
vex_scalar_w_dq_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
vex	struct
.	O
w	int
)	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
else	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
vex_vsib_d_w_dq_mode	int
:	O
case	O
vex_vsib_q_w_dq_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
!	O
vex	struct
.	O
evex	int
)	O
{	O
if	O
(	O
vex	struct
.	O
w	int
)	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
else	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
}	O
else	O
{	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
oappend	function
(	O
"XMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	function
(	O
"YMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	function
(	O
"ZMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
vex_vsib_q_w_d_mode	int
:	O
case	O
vex_vsib_d_w_d_mode	int
:	O
if	O
(	O
!	O
need_vex	char
||	O
!	O
vex	struct
.	O
evex	int
)	O
abort	function
(	O
)	O
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	function
(	O
"XMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	function
(	O
"YMMWORD PTR "	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
mask_bd_mode	int
:	O
if	O
(	O
!	O
need_vex	char
||	O
vex	struct
.	O
length	int
!=	O
128	int
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
vex	struct
.	O
w	int
)	O
oappend	function
(	O
"DWORD PTR "	pointer
)	O
;	O
else	O
oappend	function
(	O
"BYTE PTR "	pointer
)	O
;	O
break	O
;	O
case	O
mask_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
vex	struct
.	O
w	int
)	O
oappend	function
(	O
"QWORD PTR "	pointer
)	O
;	O
else	O
oappend	function
(	O
"WORD PTR "	pointer
)	O
;	O
break	O
;	O
case	O
v_bnd_mode	int
:	O
case	O
v_bndmk_mode	int
:	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
OP_E_register	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
int	O
reg	int
=	O
modrm	struct
.	O
rm	int
;	O
const	O
char	O
*	O
*	O
names	pointer
;	O
USED_REX	O
(	O
REX_B	int
)	O
;	O
if	O
(	O
(	O
rex	int
&	O
REX_B	int
)	O
)	O
reg	int
+=	O
8	int
;	O
if	O
(	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
&&	O
(	O
bytemode	int
==	O
b_swap_mode	int
||	O
bytemode	int
==	O
bnd_swap_mode	int
||	O
bytemode	int
==	O
v_swap_mode	int
)	O
)	O
swap_operand	function
(	O
)	O
;	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
b_mode	int
:	O
case	O
b_swap_mode	int
:	O
USED_REX	O
(	O
0	int
)	O
;	O
if	O
(	O
rex	int
)	O
names	pointer
=	O
names8rex	pointer
;	O
else	O
names	pointer
=	O
names8	pointer
;	O
break	O
;	O
case	O
w_mode	int
:	O
names	pointer
=	O
names16	pointer
;	O
break	O
;	O
case	O
d_mode	int
:	O
case	O
dw_mode	int
:	O
case	O
db_mode	int
:	O
names	pointer
=	O
names32	pointer
;	O
break	O
;	O
case	O
q_mode	int
:	O
names	pointer
=	O
names64	pointer
;	O
break	O
;	O
case	O
m_mode	int
:	O
case	O
v_bnd_mode	int
:	O
names	pointer
=	O
address_mode	enum
==	O
mode_64bit	int
?	O
names64	pointer
:	O
names32	pointer
;	O
break	O
;	O
case	O
bnd_mode	int
:	O
case	O
bnd_swap_mode	int
:	O
if	O
(	O
reg	int
>	O
0x3	int
)	O
{	O
oappend	function
(	O
"(bad)"	pointer
)	O
;	O
return	O
;	O
}	O
names	pointer
=	O
names_bnd	pointer
;	O
break	O
;	O
case	O
indir_v_mode	int
:	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
isa64	enum
==	O
intel64	int
)	O
{	O
names	pointer
=	O
names64	pointer
;	O
break	O
;	O
}	O
case	O
stack_v_mode	int
:	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
)	O
{	O
names	pointer
=	O
names64	pointer
;	O
break	O
;	O
}	O
bytemode	int
=	O
v_mode	int
;	O
case	O
v_mode	int
:	O
case	O
v_swap_mode	int
:	O
case	O
dq_mode	int
:	O
case	O
dqb_mode	int
:	O
case	O
dqd_mode	int
:	O
case	O
dqw_mode	int
:	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
names	pointer
=	O
names64	pointer
;	O
else	O
{	O
if	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
bytemode	int
!=	O
v_mode	int
&&	O
bytemode	int
!=	O
v_swap_mode	int
)	O
)	O
names	pointer
=	O
names32	pointer
;	O
else	O
names	pointer
=	O
names16	pointer
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
case	O
va_mode	int
:	O
names	pointer
=	O
(	O
address_mode	enum
==	O
mode_64bit	int
?	O
names64	pointer
:	O
names32	pointer
)	O
;	O
if	O
(	O
!	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
)	O
names	pointer
=	O
(	O
address_mode	enum
==	O
mode_16bit	int
?	O
names16	pointer
:	O
names	pointer
)	O
;	O
else	O
{	O
all_prefixes	array
[	O
last_addr_prefix	int
]	O
=	O
0	int
;	O
names	pointer
=	O
(	O
address_mode	enum
!=	O
mode_32bit	int
?	O
names32	pointer
:	O
names16	pointer
)	O
;	O
used_prefixes	int
|=	O
PREFIX_ADDR	int
;	O
}	O
break	O
;	O
case	O
mask_bd_mode	int
:	O
case	O
mask_mode	int
:	O
if	O
(	O
reg	int
>	O
0x7	int
)	O
{	O
oappend	function
(	O
"(bad)"	pointer
)	O
;	O
return	O
;	O
}	O
names	pointer
=	O
names_mask	pointer
;	O
break	O
;	O
case	O
0	int
:	O
return	O
;	O
default	O
:	O
oappend	function
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
return	O
;	O
}	O
oappend	function
(	O
names	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_E_memory	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
bfd_vma	long
disp	long
=	O
0	int
;	O
int	O
add	int
=	O
(	O
rex	int
&	O
REX_B	int
)	O
?	O
8	int
:	O
0	int
;	O
int	O
riprel	long
=	O
0	int
;	O
int	O
shift	int
;	O
if	O
(	O
vex	struct
.	O
evex	int
)	O
{	O
if	O
(	O
vex	struct
.	O
b	pointer
&&	O
bytemode	int
!=	O
x_mode	int
&&	O
bytemode	int
!=	O
xmmq_mode	int
&&	O
bytemode	int
!=	O
evex_half_bcst_xmmq_mode	int
)	O
{	O
BadOp	function
(	O
)	O
;	O
return	O
;	O
}	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
dqw_mode	int
:	O
case	O
dw_mode	int
:	O
shift	int
=	O
1	int
;	O
break	O
;	O
case	O
dqb_mode	int
:	O
case	O
db_mode	int
:	O
shift	int
=	O
0	int
;	O
break	O
;	O
case	O
dq_mode	int
:	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
)	O
{	O
shift	int
=	O
2	int
;	O
break	O
;	O
}	O
case	O
vex_vsib_d_w_dq_mode	int
:	O
case	O
vex_vsib_d_w_d_mode	int
:	O
case	O
vex_vsib_q_w_dq_mode	int
:	O
case	O
vex_vsib_q_w_d_mode	int
:	O
case	O
evex_x_gscat_mode	int
:	O
case	O
xmm_mdq_mode	int
:	O
shift	int
=	O
vex	struct
.	O
w	int
?	O
3	int
:	O
2	int
;	O
break	O
;	O
case	O
x_mode	int
:	O
case	O
evex_half_bcst_xmmq_mode	int
:	O
case	O
xmmq_mode	int
:	O
if	O
(	O
vex	struct
.	O
b	pointer
)	O
{	O
shift	int
=	O
vex	struct
.	O
w	int
?	O
3	int
:	O
2	int
;	O
break	O
;	O
}	O
case	O
xmmqd_mode	int
:	O
case	O
xmmdw_mode	int
:	O
case	O
ymmq_mode	int
:	O
case	O
evex_x_nobcst_mode	int
:	O
case	O
x_swap_mode	int
:	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
shift	int
=	O
4	int
;	O
break	O
;	O
case	O
256	int
:	O
shift	int
=	O
5	int
;	O
break	O
;	O
case	O
512	int
:	O
shift	int
=	O
6	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
ymm_mode	int
:	O
shift	int
=	O
5	int
;	O
break	O
;	O
case	O
xmm_mode	int
:	O
shift	int
=	O
4	int
;	O
break	O
;	O
case	O
xmm_mq_mode	int
:	O
case	O
q_mode	int
:	O
case	O
q_scalar_mode	int
:	O
case	O
q_swap_mode	int
:	O
case	O
q_scalar_swap_mode	int
:	O
shift	int
=	O
3	int
;	O
break	O
;	O
case	O
dqd_mode	int
:	O
case	O
xmm_md_mode	int
:	O
case	O
d_mode	int
:	O
case	O
d_scalar_mode	int
:	O
case	O
d_swap_mode	int
:	O
case	O
d_scalar_swap_mode	int
:	O
shift	int
=	O
2	int
;	O
break	O
;	O
case	O
w_scalar_mode	int
:	O
case	O
xmm_mw_mode	int
:	O
shift	int
=	O
1	int
;	O
break	O
;	O
case	O
b_scalar_mode	int
:	O
case	O
xmm_mb_mode	int
:	O
shift	int
=	O
0	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
if	O
(	O
!	O
vex	struct
.	O
b	pointer
&&	O
(	O
bytemode	int
==	O
xmmq_mode	int
||	O
bytemode	int
==	O
evex_half_bcst_xmmq_mode	int
)	O
)	O
shift	int
-=	O
1	int
;	O
else	O
if	O
(	O
bytemode	int
==	O
xmmqd_mode	int
)	O
shift	int
-=	O
2	int
;	O
else	O
if	O
(	O
bytemode	int
==	O
xmmdw_mode	int
)	O
shift	int
-=	O
3	int
;	O
else	O
if	O
(	O
bytemode	int
==	O
ymmq_mode	int
&&	O
vex	struct
.	O
length	int
==	O
128	int
)	O
shift	int
-=	O
1	int
;	O
}	O
else	O
shift	int
=	O
0	int
;	O
USED_REX	O
(	O
REX_B	int
)	O
;	O
if	O
(	O
intel_syntax	char
)	O
intel_operand_size	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
append_seg	function
(	O
)	O
;	O
if	O
(	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
||	O
address_mode	enum
==	O
mode_64bit	int
)	O
{	O
int	O
havedisp	int
;	O
int	O
havesib	int
;	O
int	O
havebase	int
;	O
int	O
haveindex	int
;	O
int	O
needindex	int
;	O
int	O
needaddr32	int
;	O
int	O
base	int
,	O
rbase	int
;	O
int	O
vindex	int
=	O
0	int
;	O
int	O
scale	int
=	O
0	int
;	O
int	O
addr32flag	int
=	O
!	O
(	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
||	O
bytemode	int
==	O
v_bnd_mode	int
||	O
bytemode	int
==	O
v_bndmk_mode	int
||	O
bytemode	int
==	O
bnd_mode	int
||	O
bytemode	int
==	O
bnd_swap_mode	int
)	O
;	O
const	O
char	O
*	O
*	O
indexes64	pointer
=	O
names64	pointer
;	O
const	O
char	O
*	O
*	O
indexes32	pointer
=	O
names32	pointer
;	O
havesib	int
=	O
0	int
;	O
havebase	int
=	O
1	int
;	O
haveindex	int
=	O
0	int
;	O
base	int
=	O
modrm	struct
.	O
rm	int
;	O
if	O
(	O
base	int
==	O
4	int
)	O
{	O
havesib	int
=	O
1	int
;	O
vindex	int
=	O
sib	struct
.	O
index	function
;	O
USED_REX	O
(	O
REX_X	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_X	int
)	O
vindex	int
+=	O
8	int
;	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
vex_vsib_d_w_dq_mode	int
:	O
case	O
vex_vsib_d_w_d_mode	int
:	O
case	O
vex_vsib_q_w_dq_mode	int
:	O
case	O
vex_vsib_q_w_d_mode	int
:	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
vex	struct
.	O
evex	int
)	O
{	O
if	O
(	O
!	O
vex	struct
.	O
v	int
)	O
vindex	int
+=	O
16	int
;	O
}	O
haveindex	int
=	O
1	int
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
indexes64	pointer
=	O
indexes32	pointer
=	O
names_xmm	pointer
;	O
break	O
;	O
case	O
256	int
:	O
if	O
(	O
!	O
vex	struct
.	O
w	int
||	O
bytemode	int
==	O
vex_vsib_q_w_dq_mode	int
||	O
bytemode	int
==	O
vex_vsib_q_w_d_mode	int
)	O
indexes64	pointer
=	O
indexes32	pointer
=	O
names_ymm	pointer
;	O
else	O
indexes64	pointer
=	O
indexes32	pointer
=	O
names_xmm	pointer
;	O
break	O
;	O
case	O
512	int
:	O
if	O
(	O
!	O
vex	struct
.	O
w	int
||	O
bytemode	int
==	O
vex_vsib_q_w_dq_mode	int
||	O
bytemode	int
==	O
vex_vsib_q_w_d_mode	int
)	O
indexes64	pointer
=	O
indexes32	pointer
=	O
names_zmm	pointer
;	O
else	O
indexes64	pointer
=	O
indexes32	pointer
=	O
names_ymm	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
haveindex	int
=	O
vindex	int
!=	O
4	int
;	O
break	O
;	O
}	O
scale	int
=	O
sib	struct
.	O
scale	int
;	O
base	int
=	O
sib	struct
.	O
base	int
;	O
codep	pointer
++	O
;	O
}	O
rbase	int
=	O
base	int
+	O
add	int
;	O
switch	O
(	O
modrm	struct
.	O
mod	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
base	int
==	O
5	int
)	O
{	O
havebase	int
=	O
0	int
;	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
!	O
havesib	int
)	O
riprel	long
=	O
1	int
;	O
disp	long
=	O
get32s	function
(	O
)	O
;	O
if	O
(	O
riprel	long
&&	O
bytemode	int
==	O
v_bndmk_mode	int
)	O
{	O
oappend	function
(	O
"(bad)"	pointer
)	O
;	O
return	O
;	O
}	O
}	O
break	O
;	O
case	O
1	int
:	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
disp	long
=	O
*	O
codep	pointer
++	O
;	O
if	O
(	O
(	O
disp	long
&	O
0x80	int
)	O
!=	O
0	int
)	O
disp	long
-=	O
0x100	int
;	O
if	O
(	O
vex	struct
.	O
evex	int
&&	O
shift	int
>	O
0	int
)	O
disp	long
<<=	O
shift	int
;	O
break	O
;	O
case	O
2	int
:	O
disp	long
=	O
get32s	function
(	O
)	O
;	O
break	O
;	O
}	O
needindex	int
=	O
0	int
;	O
needaddr32	int
=	O
0	int
;	O
if	O
(	O
havesib	int
&&	O
!	O
havebase	int
&&	O
!	O
haveindex	int
&&	O
address_mode	enum
!=	O
mode_16bit	int
)	O
{	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
)	O
{	O
needindex	int
=	O
addr32flag	int
;	O
needaddr32	int
=	O
1	int
;	O
}	O
else	O
{	O
needindex	int
=	O
1	int
;	O
}	O
}	O
havedisp	int
=	O
(	O
havebase	int
||	O
needindex	int
||	O
(	O
havesib	int
&&	O
(	O
haveindex	int
||	O
scale	int
!=	O
0	int
)	O
)	O
)	O
;	O
if	O
(	O
!	O
intel_syntax	char
)	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
0	int
||	O
base	int
==	O
5	int
)	O
{	O
if	O
(	O
havedisp	int
||	O
riprel	long
)	O
print_displacement	function
(	O
scratchbuf	array
,	O
disp	long
)	O
;	O
else	O
print_operand_value	function
(	O
scratchbuf	array
,	O
1	int
,	O
disp	long
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
if	O
(	O
riprel	long
)	O
{	O
set_op	function
(	O
disp	long
,	O
1	int
)	O
;	O
oappend	function
(	O
!	O
addr32flag	int
?	O
"(%rip)"	pointer
:	O
"(%eip)"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
havebase	int
||	O
haveindex	int
||	O
needindex	int
||	O
needaddr32	int
||	O
riprel	long
)	O
&&	O
(	O
bytemode	int
!=	O
v_bnd_mode	int
)	O
&&	O
(	O
bytemode	int
!=	O
v_bndmk_mode	int
)	O
&&	O
(	O
bytemode	int
!=	O
bnd_mode	int
)	O
&&	O
(	O
bytemode	int
!=	O
bnd_swap_mode	int
)	O
)	O
used_prefixes	int
|=	O
PREFIX_ADDR	int
;	O
if	O
(	O
havedisp	int
||	O
(	O
intel_syntax	char
&&	O
riprel	long
)	O
)	O
{	O
*	O
obufp	pointer
++	O
=	O
open_char	char
;	O
if	O
(	O
intel_syntax	char
&&	O
riprel	long
)	O
{	O
set_op	function
(	O
disp	long
,	O
1	int
)	O
;	O
oappend	function
(	O
!	O
addr32flag	int
?	O
"rip"	pointer
:	O
"eip"	pointer
)	O
;	O
}	O
*	O
obufp	pointer
=	O
'\0'	O
;	O
if	O
(	O
havebase	int
)	O
oappend	function
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
!	O
addr32flag	int
?	O
names64	pointer
[	O
rbase	int
]	O
:	O
names32	pointer
[	O
rbase	int
]	O
)	O
;	O
if	O
(	O
havesib	int
)	O
{	O
if	O
(	O
scale	int
!=	O
0	int
||	O
needindex	int
||	O
haveindex	int
||	O
(	O
havebase	int
&&	O
base	int
!=	O
ESP_REG_NUM	int
)	O
)	O
{	O
if	O
(	O
!	O
intel_syntax	char
||	O
havebase	int
)	O
{	O
*	O
obufp	pointer
++	O
=	O
separator_char	char
;	O
*	O
obufp	pointer
=	O
'\0'	O
;	O
}	O
if	O
(	O
haveindex	int
)	O
oappend	function
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
!	O
addr32flag	int
?	O
indexes64	pointer
[	O
vindex	int
]	O
:	O
indexes32	pointer
[	O
vindex	int
]	O
)	O
;	O
else	O
oappend	function
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
!	O
addr32flag	int
?	O
index64	pointer
:	O
index32	pointer
)	O
;	O
*	O
obufp	pointer
++	O
=	O
scale_char	char
;	O
*	O
obufp	pointer
=	O
'\0'	O
;	O
sprintf	function
(	O
scratchbuf	array
,	O
"%d"	pointer
,	O
1	int
<<	O
scale	int
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
}	O
}	O
if	O
(	O
intel_syntax	char
&&	O
(	O
disp	long
||	O
modrm	struct
.	O
mod	int
!=	O
0	int
||	O
base	int
==	O
5	int
)	O
)	O
{	O
if	O
(	O
!	O
havedisp	int
||	O
(	O
bfd_signed_vma	long
)	O
disp	long
>=	O
0	int
)	O
{	O
*	O
obufp	pointer
++	O
=	O
'+'	O
;	O
*	O
obufp	pointer
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
1	int
&&	O
disp	long
!=	O
-	O
disp	long
)	O
{	O
*	O
obufp	pointer
++	O
=	O
'-'	O
;	O
*	O
obufp	pointer
=	O
'\0'	O
;	O
disp	long
=	O
-	O
(	O
bfd_signed_vma	long
)	O
disp	long
;	O
}	O
if	O
(	O
havedisp	int
)	O
print_displacement	function
(	O
scratchbuf	array
,	O
disp	long
)	O
;	O
else	O
print_operand_value	function
(	O
scratchbuf	array
,	O
1	int
,	O
disp	long
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
}	O
*	O
obufp	pointer
++	O
=	O
close_char	char
;	O
*	O
obufp	pointer
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
intel_syntax	char
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
0	int
||	O
base	int
==	O
5	int
)	O
{	O
if	O
(	O
!	O
active_seg_prefix	int
)	O
{	O
oappend	function
(	O
names_seg	pointer
[	O
ds_reg	int
-	O
es_reg	int
]	O
)	O
;	O
oappend	function
(	O
":"	pointer
)	O
;	O
}	O
print_operand_value	function
(	O
scratchbuf	array
,	O
1	int
,	O
disp	long
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
}	O
}	O
}	O
else	O
{	O
used_prefixes	int
|=	O
prefixes	int
&	O
PREFIX_ADDR	int
;	O
switch	O
(	O
modrm	struct
.	O
mod	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
modrm	struct
.	O
rm	int
==	O
6	int
)	O
{	O
disp	long
=	O
get16	function
(	O
)	O
;	O
if	O
(	O
(	O
disp	long
&	O
0x8000	int
)	O
!=	O
0	int
)	O
disp	long
-=	O
0x10000	int
;	O
}	O
break	O
;	O
case	O
1	int
:	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
disp	long
=	O
*	O
codep	pointer
++	O
;	O
if	O
(	O
(	O
disp	long
&	O
0x80	int
)	O
!=	O
0	int
)	O
disp	long
-=	O
0x100	int
;	O
if	O
(	O
vex	struct
.	O
evex	int
&&	O
shift	int
>	O
0	int
)	O
disp	long
<<=	O
shift	int
;	O
break	O
;	O
case	O
2	int
:	O
disp	long
=	O
get16	function
(	O
)	O
;	O
if	O
(	O
(	O
disp	long
&	O
0x8000	int
)	O
!=	O
0	int
)	O
disp	long
-=	O
0x10000	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
intel_syntax	char
)	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
0	int
||	O
modrm	struct
.	O
rm	int
==	O
6	int
)	O
{	O
print_displacement	function
(	O
scratchbuf	array
,	O
disp	long
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
}	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
0	int
||	O
modrm	struct
.	O
rm	int
!=	O
6	int
)	O
{	O
*	O
obufp	pointer
++	O
=	O
open_char	char
;	O
*	O
obufp	pointer
=	O
'\0'	O
;	O
oappend	function
(	O
index16	pointer
[	O
modrm	struct
.	O
rm	int
]	O
)	O
;	O
if	O
(	O
intel_syntax	char
&&	O
(	O
disp	long
||	O
modrm	struct
.	O
mod	int
!=	O
0	int
||	O
modrm	struct
.	O
rm	int
==	O
6	int
)	O
)	O
{	O
if	O
(	O
(	O
bfd_signed_vma	long
)	O
disp	long
>=	O
0	int
)	O
{	O
*	O
obufp	pointer
++	O
=	O
'+'	O
;	O
*	O
obufp	pointer
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
1	int
)	O
{	O
*	O
obufp	pointer
++	O
=	O
'-'	O
;	O
*	O
obufp	pointer
=	O
'\0'	O
;	O
disp	long
=	O
-	O
(	O
bfd_signed_vma	long
)	O
disp	long
;	O
}	O
print_displacement	function
(	O
scratchbuf	array
,	O
disp	long
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
}	O
*	O
obufp	pointer
++	O
=	O
close_char	char
;	O
*	O
obufp	pointer
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
intel_syntax	char
)	O
{	O
if	O
(	O
!	O
active_seg_prefix	int
)	O
{	O
oappend	function
(	O
names_seg	pointer
[	O
ds_reg	int
-	O
es_reg	int
]	O
)	O
;	O
oappend	function
(	O
":"	pointer
)	O
;	O
}	O
print_operand_value	function
(	O
scratchbuf	array
,	O
1	int
,	O
disp	long
&	O
0xffff	int
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
}	O
}	O
if	O
(	O
vex	struct
.	O
evex	int
&&	O
vex	struct
.	O
b	pointer
&&	O
(	O
bytemode	int
==	O
x_mode	int
||	O
bytemode	int
==	O
xmmq_mode	int
||	O
bytemode	int
==	O
evex_half_bcst_xmmq_mode	int
)	O
)	O
{	O
if	O
(	O
vex	struct
.	O
w	int
||	O
bytemode	int
==	O
xmmq_mode	int
||	O
bytemode	int
==	O
evex_half_bcst_xmmq_mode	int
)	O
{	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
oappend	function
(	O
"{1to2}"	pointer
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	function
(	O
"{1to4}"	pointer
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	function
(	O
"{1to8}"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
oappend	function
(	O
"{1to4}"	pointer
)	O
;	O
break	O
;	O
case	O
256	int
:	O
oappend	function
(	O
"{1to8}"	pointer
)	O
;	O
break	O
;	O
case	O
512	int
:	O
oappend	function
(	O
"{1to16}"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
OP_E	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
if	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
)	O
OP_E_register	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
else	O
OP_E_memory	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
OP_G	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
int	O
add	int
=	O
0	int
;	O
const	O
char	O
*	O
*	O
names	pointer
;	O
USED_REX	O
(	O
REX_R	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_R	int
)	O
add	int
+=	O
8	int
;	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
b_mode	int
:	O
USED_REX	O
(	O
0	int
)	O
;	O
if	O
(	O
rex	int
)	O
oappend	function
(	O
names8rex	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
else	O
oappend	function
(	O
names8	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
break	O
;	O
case	O
w_mode	int
:	O
oappend	function
(	O
names16	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
break	O
;	O
case	O
d_mode	int
:	O
case	O
db_mode	int
:	O
case	O
dw_mode	int
:	O
oappend	function
(	O
names32	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
break	O
;	O
case	O
q_mode	int
:	O
oappend	function
(	O
names64	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
break	O
;	O
case	O
bnd_mode	int
:	O
if	O
(	O
modrm	struct
.	O
reg	int
>	O
0x3	int
)	O
{	O
oappend	function
(	O
"(bad)"	pointer
)	O
;	O
return	O
;	O
}	O
oappend	function
(	O
names_bnd	pointer
[	O
modrm	struct
.	O
reg	int
]	O
)	O
;	O
break	O
;	O
case	O
v_mode	int
:	O
case	O
dq_mode	int
:	O
case	O
dqb_mode	int
:	O
case	O
dqd_mode	int
:	O
case	O
dqw_mode	int
:	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
oappend	function
(	O
names64	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
else	O
{	O
if	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
bytemode	int
!=	O
v_mode	int
)	O
oappend	function
(	O
names32	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
else	O
oappend	function
(	O
names16	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
case	O
va_mode	int
:	O
names	pointer
=	O
(	O
address_mode	enum
==	O
mode_64bit	int
?	O
names64	pointer
:	O
names32	pointer
)	O
;	O
if	O
(	O
!	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
)	O
{	O
if	O
(	O
address_mode	enum
==	O
mode_16bit	int
)	O
names	pointer
=	O
names16	pointer
;	O
}	O
else	O
{	O
all_prefixes	array
[	O
last_addr_prefix	int
]	O
=	O
0	int
;	O
names	pointer
=	O
(	O
address_mode	enum
!=	O
mode_32bit	int
?	O
names32	pointer
:	O
names16	pointer
)	O
;	O
used_prefixes	int
|=	O
PREFIX_ADDR	int
;	O
}	O
oappend	function
(	O
names	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
break	O
;	O
case	O
m_mode	int
:	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
)	O
oappend	function
(	O
names64	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
else	O
oappend	function
(	O
names32	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
break	O
;	O
case	O
mask_bd_mode	int
:	O
case	O
mask_mode	int
:	O
if	O
(	O
(	O
modrm	struct
.	O
reg	int
+	O
add	int
)	O
>	O
0x7	int
)	O
{	O
oappend	function
(	O
"(bad)"	pointer
)	O
;	O
return	O
;	O
}	O
oappend	function
(	O
names_mask	pointer
[	O
modrm	struct
.	O
reg	int
+	O
add	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
oappend	function
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
break	O
;	O
}	O
}	O
static	O
bfd_vma	long
get64	function
(	O
void	O
)	O
{	O
bfd_vma	long
x	long
;	O
unsigned	O
int	O
a	pointer
;	O
unsigned	O
int	O
b	pointer
;	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
8	int
)	O
;	O
a	pointer
=	O
*	O
codep	pointer
++	O
&	O
0xff	int
;	O
a	pointer
|=	O
(	O
*	O
codep	pointer
++	O
&	O
0xff	int
)	O
<<	O
8	int
;	O
a	pointer
|=	O
(	O
*	O
codep	pointer
++	O
&	O
0xff	int
)	O
<<	O
16	int
;	O
a	pointer
|=	O
(	O
*	O
codep	pointer
++	O
&	O
0xffu	int
)	O
<<	O
24	int
;	O
b	pointer
=	O
*	O
codep	pointer
++	O
&	O
0xff	int
;	O
b	pointer
|=	O
(	O
*	O
codep	pointer
++	O
&	O
0xff	int
)	O
<<	O
8	int
;	O
b	pointer
|=	O
(	O
*	O
codep	pointer
++	O
&	O
0xff	int
)	O
<<	O
16	int
;	O
b	pointer
|=	O
(	O
*	O
codep	pointer
++	O
&	O
0xffu	int
)	O
<<	O
24	int
;	O
x	long
=	O
a	pointer
+	O
(	O
(	O
bfd_vma	long
)	O
b	pointer
<<	O
32	int
)	O
;	O
return	O
x	long
;	O
}	O
static	O
bfd_signed_vma	long
get32	function
(	O
void	O
)	O
{	O
bfd_signed_vma	long
x	long
=	O
0	int
;	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
4	int
)	O
;	O
x	long
=	O
*	O
codep	pointer
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
;	O
x	long
|=	O
(	O
*	O
codep	pointer
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
8	int
;	O
x	long
|=	O
(	O
*	O
codep	pointer
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
16	int
;	O
x	long
|=	O
(	O
*	O
codep	pointer
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
24	int
;	O
return	O
x	long
;	O
}	O
static	O
bfd_signed_vma	long
get32s	function
(	O
void	O
)	O
{	O
bfd_signed_vma	long
x	long
=	O
0	int
;	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
4	int
)	O
;	O
x	long
=	O
*	O
codep	pointer
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
;	O
x	long
|=	O
(	O
*	O
codep	pointer
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
8	int
;	O
x	long
|=	O
(	O
*	O
codep	pointer
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
16	int
;	O
x	long
|=	O
(	O
*	O
codep	pointer
++	O
&	O
(	O
bfd_signed_vma	long
)	O
0xff	int
)	O
<<	O
24	int
;	O
x	long
=	O
(	O
x	long
^	O
(	O
(	O
bfd_signed_vma	long
)	O
1	int
<<	O
31	int
)	O
)	O
-	O
(	O
(	O
bfd_signed_vma	long
)	O
1	int
<<	O
31	int
)	O
;	O
return	O
x	long
;	O
}	O
static	O
int	O
get16	function
(	O
void	O
)	O
{	O
int	O
x	long
=	O
0	int
;	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
2	int
)	O
;	O
x	long
=	O
*	O
codep	pointer
++	O
&	O
0xff	int
;	O
x	long
|=	O
(	O
*	O
codep	pointer
++	O
&	O
0xff	int
)	O
<<	O
8	int
;	O
return	O
x	long
;	O
}	O
static	O
void	O
set_op	function
(	O
bfd_vma	long
op	array
,	O
int	O
riprel	long
)	O
{	O
op_index	array
[	O
op_ad	int
]	O
=	O
op_ad	int
;	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
)	O
{	O
op_address	array
[	O
op_ad	int
]	O
=	O
op	array
;	O
op_riprel	array
[	O
op_ad	int
]	O
=	O
riprel	long
;	O
}	O
else	O
{	O
op_address	array
[	O
op_ad	int
]	O
=	O
op	array
&	O
0xffffffff	int
;	O
op_riprel	array
[	O
op_ad	int
]	O
=	O
riprel	long
&	O
0xffffffff	int
;	O
}	O
}	O
static	O
void	O
OP_REG	function
(	O
int	O
code	int
,	O
int	O
sizeflag	int
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
int	O
add	int
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
es_reg	int
:	O
case	O
ss_reg	int
:	O
case	O
cs_reg	int
:	O
case	O
ds_reg	int
:	O
case	O
fs_reg	int
:	O
case	O
gs_reg	int
:	O
oappend	function
(	O
names_seg	pointer
[	O
code	int
-	O
es_reg	int
]	O
)	O
;	O
return	O
;	O
}	O
USED_REX	O
(	O
REX_B	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_B	int
)	O
add	int
=	O
8	int
;	O
else	O
add	int
=	O
0	int
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
ax_reg	int
:	O
case	O
cx_reg	int
:	O
case	O
dx_reg	int
:	O
case	O
bx_reg	int
:	O
case	O
sp_reg	int
:	O
case	O
bp_reg	int
:	O
case	O
si_reg	int
:	O
case	O
di_reg	int
:	O
s	pointer
=	O
names16	pointer
[	O
code	int
-	O
ax_reg	int
+	O
add	int
]	O
;	O
break	O
;	O
case	O
al_reg	int
:	O
case	O
ah_reg	int
:	O
case	O
cl_reg	int
:	O
case	O
ch_reg	int
:	O
case	O
dl_reg	int
:	O
case	O
dh_reg	int
:	O
case	O
bl_reg	int
:	O
case	O
bh_reg	int
:	O
USED_REX	O
(	O
0	int
)	O
;	O
if	O
(	O
rex	int
)	O
s	pointer
=	O
names8rex	pointer
[	O
code	int
-	O
al_reg	int
+	O
add	int
]	O
;	O
else	O
s	pointer
=	O
names8	pointer
[	O
code	int
-	O
al_reg	int
]	O
;	O
break	O
;	O
case	O
rAX_reg	int
:	O
case	O
rCX_reg	int
:	O
case	O
rDX_reg	int
:	O
case	O
rBX_reg	int
:	O
case	O
rSP_reg	int
:	O
case	O
rBP_reg	int
:	O
case	O
rSI_reg	int
:	O
case	O
rDI_reg	int
:	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
)	O
{	O
s	pointer
=	O
names64	pointer
[	O
code	int
-	O
rAX_reg	int
+	O
add	int
]	O
;	O
break	O
;	O
}	O
code	int
+=	O
eAX_reg	int
-	O
rAX_reg	int
;	O
case	O
eAX_reg	int
:	O
case	O
eCX_reg	int
:	O
case	O
eDX_reg	int
:	O
case	O
eBX_reg	int
:	O
case	O
eSP_reg	int
:	O
case	O
eBP_reg	int
:	O
case	O
eSI_reg	int
:	O
case	O
eDI_reg	int
:	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
s	pointer
=	O
names64	pointer
[	O
code	int
-	O
eAX_reg	int
+	O
add	int
]	O
;	O
else	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
s	pointer
=	O
names32	pointer
[	O
code	int
-	O
eAX_reg	int
+	O
add	int
]	O
;	O
else	O
s	pointer
=	O
names16	pointer
[	O
code	int
-	O
eAX_reg	int
+	O
add	int
]	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
s	pointer
=	O
INTERNAL_DISASSEMBLER_ERROR	O
;	O
break	O
;	O
}	O
oappend	function
(	O
s	pointer
)	O
;	O
}	O
static	O
void	O
OP_IMREG	function
(	O
int	O
code	int
,	O
int	O
sizeflag	int
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
indir_dx_reg	int
:	O
if	O
(	O
intel_syntax	char
)	O
s	pointer
=	O
"dx"	pointer
;	O
else	O
s	pointer
=	O
"(%dx)"	pointer
;	O
break	O
;	O
case	O
ax_reg	int
:	O
case	O
cx_reg	int
:	O
case	O
dx_reg	int
:	O
case	O
bx_reg	int
:	O
case	O
sp_reg	int
:	O
case	O
bp_reg	int
:	O
case	O
si_reg	int
:	O
case	O
di_reg	int
:	O
s	pointer
=	O
names16	pointer
[	O
code	int
-	O
ax_reg	int
]	O
;	O
break	O
;	O
case	O
es_reg	int
:	O
case	O
ss_reg	int
:	O
case	O
cs_reg	int
:	O
case	O
ds_reg	int
:	O
case	O
fs_reg	int
:	O
case	O
gs_reg	int
:	O
s	pointer
=	O
names_seg	pointer
[	O
code	int
-	O
es_reg	int
]	O
;	O
break	O
;	O
case	O
al_reg	int
:	O
case	O
ah_reg	int
:	O
case	O
cl_reg	int
:	O
case	O
ch_reg	int
:	O
case	O
dl_reg	int
:	O
case	O
dh_reg	int
:	O
case	O
bl_reg	int
:	O
case	O
bh_reg	int
:	O
USED_REX	O
(	O
0	int
)	O
;	O
if	O
(	O
rex	int
)	O
s	pointer
=	O
names8rex	pointer
[	O
code	int
-	O
al_reg	int
]	O
;	O
else	O
s	pointer
=	O
names8	pointer
[	O
code	int
-	O
al_reg	int
]	O
;	O
break	O
;	O
case	O
eAX_reg	int
:	O
case	O
eCX_reg	int
:	O
case	O
eDX_reg	int
:	O
case	O
eBX_reg	int
:	O
case	O
eSP_reg	int
:	O
case	O
eBP_reg	int
:	O
case	O
eSI_reg	int
:	O
case	O
eDI_reg	int
:	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
s	pointer
=	O
names64	pointer
[	O
code	int
-	O
eAX_reg	int
]	O
;	O
else	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
s	pointer
=	O
names32	pointer
[	O
code	int
-	O
eAX_reg	int
]	O
;	O
else	O
s	pointer
=	O
names16	pointer
[	O
code	int
-	O
eAX_reg	int
]	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
case	O
z_mode_ax_reg	int
:	O
if	O
(	O
(	O
rex	int
&	O
REX_W	int
)	O
||	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
)	O
s	pointer
=	O
*	O
names32	pointer
;	O
else	O
s	pointer
=	O
*	O
names16	pointer
;	O
if	O
(	O
!	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
break	O
;	O
default	O
:	O
s	pointer
=	O
INTERNAL_DISASSEMBLER_ERROR	O
;	O
break	O
;	O
}	O
oappend	function
(	O
s	pointer
)	O
;	O
}	O
static	O
void	O
OP_I	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
bfd_signed_vma	long
op	array
;	O
bfd_signed_vma	long
mask	long
=	O
-	O
1	int
;	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
b_mode	int
:	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
op	array
=	O
*	O
codep	pointer
++	O
;	O
mask	long
=	O
0xff	int
;	O
break	O
;	O
case	O
v_mode	int
:	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
op	array
=	O
get32s	function
(	O
)	O
;	O
else	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
{	O
op	array
=	O
get32	function
(	O
)	O
;	O
mask	long
=	O
0xffffffff	int
;	O
}	O
else	O
{	O
op	array
=	O
get16	function
(	O
)	O
;	O
mask	long
=	O
0xfffff	int
;	O
}	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
case	O
d_mode	int
:	O
mask	long
=	O
0xffffffff	int
;	O
op	array
=	O
get32	function
(	O
)	O
;	O
break	O
;	O
case	O
w_mode	int
:	O
mask	long
=	O
0xfffff	int
;	O
op	array
=	O
get16	function
(	O
)	O
;	O
break	O
;	O
case	O
const_1_mode	int
:	O
if	O
(	O
intel_syntax	char
)	O
oappend	function
(	O
"1"	pointer
)	O
;	O
return	O
;	O
default	O
:	O
oappend	function
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
return	O
;	O
}	O
op	array
&=	O
mask	long
;	O
scratchbuf	array
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	function
(	O
scratchbuf	array
+	O
1	int
,	O
1	int
,	O
op	array
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
scratchbuf	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
static	O
void	O
OP_I64	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
bytemode	int
!=	O
v_mode	int
||	O
address_mode	enum
!=	O
mode_64bit	int
||	O
!	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
{	O
OP_I	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
return	O
;	O
}	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
scratchbuf	array
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	function
(	O
scratchbuf	array
+	O
1	int
,	O
1	int
,	O
get64	function
(	O
)	O
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
scratchbuf	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
static	O
void	O
OP_sI	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
bfd_signed_vma	long
op	array
;	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
b_mode	int
:	O
case	O
b_T_mode	int
:	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
op	array
=	O
*	O
codep	pointer
++	O
;	O
if	O
(	O
(	O
op	array
&	O
0x80	int
)	O
!=	O
0	int
)	O
op	array
-=	O
0x100	int
;	O
if	O
(	O
bytemode	int
==	O
b_T_mode	int
)	O
{	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
||	O
!	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
)	O
{	O
if	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
op	array
&=	O
0xffffffff	int
;	O
else	O
op	array
&=	O
0xffff	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
op	array
&=	O
0xffffffff	int
;	O
else	O
op	array
&=	O
0xffff	int
;	O
}	O
}	O
break	O
;	O
case	O
v_mode	int
:	O
if	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
op	array
=	O
get32s	function
(	O
)	O
;	O
else	O
op	array
=	O
get16	function
(	O
)	O
;	O
break	O
;	O
default	O
:	O
oappend	function
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
return	O
;	O
}	O
scratchbuf	array
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	function
(	O
scratchbuf	array
+	O
1	int
,	O
1	int
,	O
op	array
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
}	O
static	O
void	O
OP_J	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
bfd_vma	long
disp	long
;	O
bfd_vma	long
mask	long
=	O
-	O
1	int
;	O
bfd_vma	long
segment	long
=	O
0	int
;	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
b_mode	int
:	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
disp	long
=	O
*	O
codep	pointer
++	O
;	O
if	O
(	O
(	O
disp	long
&	O
0x80	int
)	O
!=	O
0	int
)	O
disp	long
-=	O
0x100	int
;	O
break	O
;	O
case	O
v_mode	int
:	O
if	O
(	O
isa64	enum
!=	O
intel64	int
)	O
case	O
dqw_mode	int
:	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
||	O
(	O
address_mode	enum
==	O
mode_64bit	int
&&	O
(	O
(	O
isa64	enum
==	O
intel64	int
&&	O
bytemode	int
!=	O
dqw_mode	int
)	O
||	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
)	O
)	O
disp	long
=	O
get32s	function
(	O
)	O
;	O
else	O
{	O
disp	long
=	O
get16	function
(	O
)	O
;	O
if	O
(	O
(	O
disp	long
&	O
0x8000	int
)	O
!=	O
0	int
)	O
disp	long
-=	O
0x10000	int
;	O
mask	long
=	O
0xffff	int
;	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
==	O
0	int
)	O
segment	long
=	O
(	O
(	O
start_pc	long
+	O
(	O
codep	pointer
-	O
start_codep	pointer
)	O
)	O
&	O
~	O
(	O
(	O
bfd_vma	long
)	O
0xffff	int
)	O
)	O
;	O
}	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
||	O
(	O
isa64	enum
!=	O
intel64	int
&&	O
!	O
(	O
rex	int
&	O
REX_W	int
)	O
)	O
)	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
break	O
;	O
default	O
:	O
oappend	function
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
return	O
;	O
}	O
disp	long
=	O
(	O
(	O
start_pc	long
+	O
(	O
codep	pointer
-	O
start_codep	pointer
)	O
+	O
disp	long
)	O
&	O
mask	long
)	O
|	O
segment	long
;	O
set_op	function
(	O
disp	long
,	O
0	int
)	O
;	O
print_operand_value	function
(	O
scratchbuf	array
,	O
1	int
,	O
disp	long
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
}	O
static	O
void	O
OP_SEG	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
bytemode	int
==	O
w_mode	int
)	O
oappend	function
(	O
names_seg	pointer
[	O
modrm	struct
.	O
reg	int
]	O
)	O
;	O
else	O
OP_E	function
(	O
modrm	struct
.	O
mod	int
==	O
3	int
?	O
bytemode	int
:	O
w_mode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
OP_DIR	function
(	O
int	O
dummy	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
)	O
{	O
int	O
seg	int
,	O
offset	long
;	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
{	O
offset	long
=	O
get32	function
(	O
)	O
;	O
seg	int
=	O
get16	function
(	O
)	O
;	O
}	O
else	O
{	O
offset	long
=	O
get16	function
(	O
)	O
;	O
seg	int
=	O
get16	function
(	O
)	O
;	O
}	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
if	O
(	O
intel_syntax	char
)	O
sprintf	function
(	O
scratchbuf	array
,	O
"0x%x:0x%x"	pointer
,	O
seg	int
,	O
offset	long
)	O
;	O
else	O
sprintf	function
(	O
scratchbuf	array
,	O
"$0x%x,$0x%x"	pointer
,	O
seg	int
,	O
offset	long
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
}	O
static	O
void	O
OP_OFF	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
bfd_vma	long
off	long
;	O
if	O
(	O
intel_syntax	char
&&	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
intel_operand_size	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
append_seg	function
(	O
)	O
;	O
if	O
(	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
||	O
address_mode	enum
==	O
mode_64bit	int
)	O
off	long
=	O
get32	function
(	O
)	O
;	O
else	O
off	long
=	O
get16	function
(	O
)	O
;	O
if	O
(	O
intel_syntax	char
)	O
{	O
if	O
(	O
!	O
active_seg_prefix	int
)	O
{	O
oappend	function
(	O
names_seg	pointer
[	O
ds_reg	int
-	O
es_reg	int
]	O
)	O
;	O
oappend	function
(	O
":"	pointer
)	O
;	O
}	O
}	O
print_operand_value	function
(	O
scratchbuf	array
,	O
1	int
,	O
off	long
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
}	O
static	O
void	O
OP_OFF64	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
bfd_vma	long
off	long
;	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
||	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
)	O
{	O
OP_OFF	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
intel_syntax	char
&&	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
)	O
intel_operand_size	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
append_seg	function
(	O
)	O
;	O
off	long
=	O
get64	function
(	O
)	O
;	O
if	O
(	O
intel_syntax	char
)	O
{	O
if	O
(	O
!	O
active_seg_prefix	int
)	O
{	O
oappend	function
(	O
names_seg	pointer
[	O
ds_reg	int
-	O
es_reg	int
]	O
)	O
;	O
oappend	function
(	O
":"	pointer
)	O
;	O
}	O
}	O
print_operand_value	function
(	O
scratchbuf	array
,	O
1	int
,	O
off	long
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
}	O
static	O
void	O
ptr_reg	function
(	O
int	O
code	int
,	O
int	O
sizeflag	int
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
*	O
obufp	pointer
++	O
=	O
open_char	char
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
;	O
if	O
(	O
address_mode	enum
==	O
mode_64bit	int
)	O
{	O
if	O
(	O
!	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
)	O
s	pointer
=	O
names32	pointer
[	O
code	int
-	O
eAX_reg	int
]	O
;	O
else	O
s	pointer
=	O
names64	pointer
[	O
code	int
-	O
eAX_reg	int
]	O
;	O
}	O
else	O
if	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
s	pointer
=	O
names32	pointer
[	O
code	int
-	O
eAX_reg	int
]	O
;	O
else	O
s	pointer
=	O
names16	pointer
[	O
code	int
-	O
eAX_reg	int
]	O
;	O
oappend	function
(	O
s	pointer
)	O
;	O
*	O
obufp	pointer
++	O
=	O
close_char	char
;	O
*	O
obufp	pointer
=	O
0	int
;	O
}	O
static	O
void	O
OP_ESreg	function
(	O
int	O
code	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
intel_syntax	char
)	O
{	O
switch	O
(	O
codep	pointer
[	O
-	O
1	int
]	O
)	O
{	O
case	O
0x6d	int
:	O
intel_operand_size	function
(	O
z_mode	int
,	O
sizeflag	int
)	O
;	O
break	O
;	O
case	O
0xa5	int
:	O
case	O
0xa7	int
:	O
case	O
0xab	int
:	O
case	O
0xaf	int
:	O
intel_operand_size	function
(	O
v_mode	int
,	O
sizeflag	int
)	O
;	O
break	O
;	O
default	O
:	O
intel_operand_size	function
(	O
b_mode	int
,	O
sizeflag	int
)	O
;	O
}	O
}	O
oappend_maybe_intel	function
(	O
"%es:"	pointer
)	O
;	O
ptr_reg	function
(	O
code	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
OP_DSreg	function
(	O
int	O
code	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
intel_syntax	char
)	O
{	O
switch	O
(	O
codep	pointer
[	O
-	O
1	int
]	O
)	O
{	O
case	O
0x6f	int
:	O
intel_operand_size	function
(	O
z_mode	int
,	O
sizeflag	int
)	O
;	O
break	O
;	O
case	O
0xa5	int
:	O
case	O
0xa7	int
:	O
case	O
0xad	int
:	O
intel_operand_size	function
(	O
v_mode	int
,	O
sizeflag	int
)	O
;	O
break	O
;	O
default	O
:	O
intel_operand_size	function
(	O
b_mode	int
,	O
sizeflag	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
active_seg_prefix	int
)	O
active_seg_prefix	int
=	O
PREFIX_DS	int
;	O
append_seg	function
(	O
)	O
;	O
ptr_reg	function
(	O
code	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
OP_C	function
(	O
int	O
dummy	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
add	int
;	O
if	O
(	O
rex	int
&	O
REX_R	int
)	O
{	O
USED_REX	O
(	O
REX_R	int
)	O
;	O
add	int
=	O
8	int
;	O
}	O
else	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
&&	O
(	O
prefixes	int
&	O
PREFIX_LOCK	int
)	O
)	O
{	O
all_prefixes	array
[	O
last_lock_prefix	int
]	O
=	O
0	int
;	O
used_prefixes	int
|=	O
PREFIX_LOCK	int
;	O
add	int
=	O
8	int
;	O
}	O
else	O
add	int
=	O
0	int
;	O
sprintf	function
(	O
scratchbuf	array
,	O
"%%cr%d"	pointer
,	O
modrm	struct
.	O
reg	int
+	O
add	int
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
}	O
static	O
void	O
OP_D	function
(	O
int	O
dummy	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
add	int
;	O
USED_REX	O
(	O
REX_R	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_R	int
)	O
add	int
=	O
8	int
;	O
else	O
add	int
=	O
0	int
;	O
if	O
(	O
intel_syntax	char
)	O
sprintf	function
(	O
scratchbuf	array
,	O
"db%d"	pointer
,	O
modrm	struct
.	O
reg	int
+	O
add	int
)	O
;	O
else	O
sprintf	function
(	O
scratchbuf	array
,	O
"%%db%d"	pointer
,	O
modrm	struct
.	O
reg	int
+	O
add	int
)	O
;	O
oappend	function
(	O
scratchbuf	array
)	O
;	O
}	O
static	O
void	O
OP_T	function
(	O
int	O
dummy	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
sprintf	function
(	O
scratchbuf	array
,	O
"%%tr%d"	pointer
,	O
modrm	struct
.	O
reg	int
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
}	O
static	O
void	O
OP_R	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
OP_E_register	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
OP_MMX	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
reg	int
=	O
modrm	struct
.	O
reg	int
;	O
const	O
char	O
*	O
*	O
names	pointer
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
if	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
{	O
names	pointer
=	O
names_xmm	pointer
;	O
USED_REX	O
(	O
REX_R	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_R	int
)	O
reg	int
+=	O
8	int
;	O
}	O
else	O
names	pointer
=	O
names_mm	pointer
;	O
oappend	function
(	O
names	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_XMM	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
reg	int
=	O
modrm	struct
.	O
reg	int
;	O
const	O
char	O
*	O
*	O
names	pointer
;	O
USED_REX	O
(	O
REX_R	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_R	int
)	O
reg	int
+=	O
8	int
;	O
if	O
(	O
vex	struct
.	O
evex	int
)	O
{	O
if	O
(	O
!	O
vex	struct
.	O
r	int
)	O
reg	int
+=	O
16	int
;	O
}	O
if	O
(	O
need_vex	char
&&	O
bytemode	int
!=	O
xmm_mode	int
&&	O
bytemode	int
!=	O
xmmq_mode	int
&&	O
bytemode	int
!=	O
evex_half_bcst_xmmq_mode	int
&&	O
bytemode	int
!=	O
ymm_mode	int
&&	O
bytemode	int
!=	O
scalar_mode	int
)	O
{	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
names	pointer
=	O
names_xmm	pointer
;	O
break	O
;	O
case	O
256	int
:	O
if	O
(	O
vex	struct
.	O
w	int
||	O
(	O
bytemode	int
!=	O
vex_vsib_q_w_dq_mode	int
&&	O
bytemode	int
!=	O
vex_vsib_q_w_d_mode	int
)	O
)	O
names	pointer
=	O
names_ymm	pointer
;	O
else	O
names	pointer
=	O
names_xmm	pointer
;	O
break	O
;	O
case	O
512	int
:	O
names	pointer
=	O
names_zmm	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
bytemode	int
==	O
xmmq_mode	int
||	O
bytemode	int
==	O
evex_half_bcst_xmmq_mode	int
)	O
{	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
names	pointer
=	O
names_xmm	pointer
;	O
break	O
;	O
case	O
512	int
:	O
names	pointer
=	O
names_ymm	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
bytemode	int
==	O
ymm_mode	int
)	O
names	pointer
=	O
names_ymm	pointer
;	O
else	O
names	pointer
=	O
names_xmm	pointer
;	O
oappend	function
(	O
names	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_EM	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
int	O
reg	int
;	O
const	O
char	O
*	O
*	O
names	pointer
;	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
)	O
{	O
if	O
(	O
intel_syntax	char
&&	O
(	O
bytemode	int
==	O
v_mode	int
||	O
bytemode	int
==	O
v_swap_mode	int
)	O
)	O
{	O
bytemode	int
=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
?	O
x_mode	int
:	O
q_mode	int
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
OP_E	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
&&	O
bytemode	int
==	O
v_swap_mode	int
)	O
swap_operand	function
(	O
)	O
;	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
reg	int
=	O
modrm	struct
.	O
rm	int
;	O
if	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
{	O
names	pointer
=	O
names_xmm	pointer
;	O
USED_REX	O
(	O
REX_B	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_B	int
)	O
reg	int
+=	O
8	int
;	O
}	O
else	O
names	pointer
=	O
names_mm	pointer
;	O
oappend	function
(	O
names	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_EMC	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
)	O
{	O
if	O
(	O
intel_syntax	char
&&	O
bytemode	int
==	O
v_mode	int
)	O
{	O
bytemode	int
=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
?	O
x_mode	int
:	O
q_mode	int
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
OP_E	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
return	O
;	O
}	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
oappend	function
(	O
names_mm	pointer
[	O
modrm	struct
.	O
rm	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_MXC	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
oappend	function
(	O
names_mm	pointer
[	O
modrm	struct
.	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_EX	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
int	O
reg	int
;	O
const	O
char	O
*	O
*	O
names	pointer
;	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
)	O
{	O
OP_E_memory	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
return	O
;	O
}	O
reg	int
=	O
modrm	struct
.	O
rm	int
;	O
USED_REX	O
(	O
REX_B	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_B	int
)	O
reg	int
+=	O
8	int
;	O
if	O
(	O
vex	struct
.	O
evex	int
)	O
{	O
USED_REX	O
(	O
REX_X	int
)	O
;	O
if	O
(	O
(	O
rex	int
&	O
REX_X	int
)	O
)	O
reg	int
+=	O
16	int
;	O
}	O
if	O
(	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
&&	O
(	O
bytemode	int
==	O
x_swap_mode	int
||	O
bytemode	int
==	O
d_swap_mode	int
||	O
bytemode	int
==	O
d_scalar_swap_mode	int
||	O
bytemode	int
==	O
q_swap_mode	int
||	O
bytemode	int
==	O
q_scalar_swap_mode	int
)	O
)	O
swap_operand	function
(	O
)	O
;	O
if	O
(	O
need_vex	char
&&	O
bytemode	int
!=	O
xmm_mode	int
&&	O
bytemode	int
!=	O
xmmdw_mode	int
&&	O
bytemode	int
!=	O
xmmqd_mode	int
&&	O
bytemode	int
!=	O
xmm_mb_mode	int
&&	O
bytemode	int
!=	O
xmm_mw_mode	int
&&	O
bytemode	int
!=	O
xmm_md_mode	int
&&	O
bytemode	int
!=	O
xmm_mq_mode	int
&&	O
bytemode	int
!=	O
xmm_mdq_mode	int
&&	O
bytemode	int
!=	O
xmmq_mode	int
&&	O
bytemode	int
!=	O
evex_half_bcst_xmmq_mode	int
&&	O
bytemode	int
!=	O
ymm_mode	int
&&	O
bytemode	int
!=	O
d_scalar_mode	int
&&	O
bytemode	int
!=	O
d_scalar_swap_mode	int
&&	O
bytemode	int
!=	O
q_scalar_mode	int
&&	O
bytemode	int
!=	O
q_scalar_swap_mode	int
&&	O
bytemode	int
!=	O
vex_scalar_w_dq_mode	int
)	O
{	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
names	pointer
=	O
names_xmm	pointer
;	O
break	O
;	O
case	O
256	int
:	O
names	pointer
=	O
names_ymm	pointer
;	O
break	O
;	O
case	O
512	int
:	O
names	pointer
=	O
names_zmm	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
bytemode	int
==	O
xmmq_mode	int
||	O
bytemode	int
==	O
evex_half_bcst_xmmq_mode	int
)	O
{	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
case	O
256	int
:	O
names	pointer
=	O
names_xmm	pointer
;	O
break	O
;	O
case	O
512	int
:	O
names	pointer
=	O
names_ymm	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
bytemode	int
==	O
ymm_mode	int
)	O
names	pointer
=	O
names_ymm	pointer
;	O
else	O
names	pointer
=	O
names_xmm	pointer
;	O
oappend	function
(	O
names	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_MS	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
)	O
OP_EM	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
else	O
BadOp	function
(	O
)	O
;	O
}	O
static	O
void	O
OP_XS	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
)	O
OP_EX	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
else	O
BadOp	function
(	O
)	O
;	O
}	O
static	O
void	O
OP_M	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
)	O
BadOp	function
(	O
)	O
;	O
else	O
OP_E	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
OP_0f07	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
||	O
modrm	struct
.	O
rm	int
!=	O
0	int
)	O
BadOp	function
(	O
)	O
;	O
else	O
OP_E	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
NOP_Fixup1	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
!=	O
0	int
||	O
(	O
rex	int
!=	O
0	int
&&	O
rex	int
!=	O
0x48	int
&&	O
address_mode	enum
==	O
mode_64bit	int
)	O
)	O
OP_REG	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
else	O
strcpy	function
(	O
obuf	array
,	O
"nop"	pointer
)	O
;	O
}	O
static	O
void	O
NOP_Fixup2	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
!=	O
0	int
||	O
(	O
rex	int
!=	O
0	int
&&	O
rex	int
!=	O
0x48	int
&&	O
address_mode	enum
==	O
mode_64bit	int
)	O
)	O
OP_IMREG	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
const	O
char	O
*	O
const	O
Suffix3DNow	array
[	O
]	O
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pi2fw"	pointer
,	O
"pi2fd"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pf2iw"	pointer
,	O
"pf2id"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfnacc"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfpnacc"	pointer
,	O
NULL	O
,	O
"pfcmpge"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfmin"	pointer
,	O
NULL	O
,	O
"pfrcp"	pointer
,	O
"pfrsqrt"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
"pfsub"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfadd"	pointer
,	O
NULL	O
,	O
"pfcmpgt"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfmax"	pointer
,	O
NULL	O
,	O
"pfrcpit1"	pointer
,	O
"pfrsqit1"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
"pfsubr"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfacc"	pointer
,	O
NULL	O
,	O
"pfcmpeq"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pfmul"	pointer
,	O
NULL	O
,	O
"pfrcpit2"	pointer
,	O
"pmulhrw"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pswapd"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
"pavgusb"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
}	O
;	O
static	O
void	O
OP_3DNowSuffix	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
const	O
char	O
*	O
mnemonic	pointer
;	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
obufp	pointer
=	O
mnemonicendp	pointer
;	O
mnemonic	pointer
=	O
Suffix3DNow	array
[	O
*	O
codep	pointer
++	O
&	O
0xff	int
]	O
;	O
if	O
(	O
mnemonic	pointer
)	O
oappend	function
(	O
mnemonic	pointer
)	O
;	O
else	O
{	O
op_out	array
[	O
0	int
]	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
op_out	array
[	O
1	int
]	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
BadOp	function
(	O
)	O
;	O
}	O
mnemonicendp	pointer
=	O
obufp	pointer
;	O
}	O
static	O
struct	O
op	array
simd_cmp_op	array
[	O
]	O
=	O
{	O
{	O
STRING_COMMA_LEN	O
(	O
"eq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"lt"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"le"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"unord"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nlt"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nle"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ord"	pointer
)	O
}	O
}	O
;	O
static	O
void	O
CMP_Fixup	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
unsigned	O
int	O
cmp_type	int
;	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
cmp_type	int
=	O
*	O
codep	pointer
++	O
&	O
0xff	int
;	O
if	O
(	O
cmp_type	int
<	O
ARRAY_SIZE	O
(	O
simd_cmp_op	array
)	O
)	O
{	O
char	O
suffix	array
[	O
3	int
]	O
;	O
char	O
*	O
p	pointer
=	O
mnemonicendp	pointer
-	O
2	int
;	O
suffix	array
[	O
0	int
]	O
=	O
p	pointer
[	O
0	int
]	O
;	O
suffix	array
[	O
1	int
]	O
=	O
p	pointer
[	O
1	int
]	O
;	O
suffix	array
[	O
2	int
]	O
=	O
'\0'	O
;	O
sprintf	function
(	O
p	pointer
,	O
"%s%s"	pointer
,	O
simd_cmp_op	array
[	O
cmp_type	int
]	O
.	O
name	pointer
,	O
suffix	array
)	O
;	O
mnemonicendp	pointer
+=	O
simd_cmp_op	array
[	O
cmp_type	int
]	O
.	O
len	long
;	O
}	O
else	O
{	O
scratchbuf	array
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	function
(	O
scratchbuf	array
+	O
1	int
,	O
1	int
,	O
cmp_type	int
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
scratchbuf	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
static	O
void	O
OP_Mwait	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
!	O
intel_syntax	char
)	O
{	O
strcpy	function
(	O
op_out	array
[	O
0	int
]	O
,	O
names32	pointer
[	O
0	int
]	O
)	O
;	O
strcpy	function
(	O
op_out	array
[	O
1	int
]	O
,	O
names32	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
bytemode	int
==	O
eBX_reg	int
)	O
strcpy	function
(	O
op_out	array
[	O
2	int
]	O
,	O
names32	pointer
[	O
3	int
]	O
)	O
;	O
two_source_ops	int
=	O
1	int
;	O
}	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
}	O
static	O
void	O
OP_Monitor	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
!	O
intel_syntax	char
)	O
{	O
const	O
char	O
*	O
*	O
names	pointer
=	O
(	O
address_mode	enum
==	O
mode_64bit	int
?	O
names64	pointer
:	O
names32	pointer
)	O
;	O
if	O
(	O
prefixes	int
&	O
PREFIX_ADDR	int
)	O
{	O
all_prefixes	array
[	O
last_addr_prefix	int
]	O
=	O
0	int
;	O
names	pointer
=	O
(	O
address_mode	enum
!=	O
mode_32bit	int
?	O
names32	pointer
:	O
names16	pointer
)	O
;	O
used_prefixes	int
|=	O
PREFIX_ADDR	int
;	O
}	O
else	O
if	O
(	O
address_mode	enum
==	O
mode_16bit	int
)	O
names	pointer
=	O
names16	pointer
;	O
strcpy	function
(	O
op_out	array
[	O
0	int
]	O
,	O
names	pointer
[	O
0	int
]	O
)	O
;	O
strcpy	function
(	O
op_out	array
[	O
1	int
]	O
,	O
names32	pointer
[	O
1	int
]	O
)	O
;	O
strcpy	function
(	O
op_out	array
[	O
2	int
]	O
,	O
names32	pointer
[	O
2	int
]	O
)	O
;	O
two_source_ops	int
=	O
1	int
;	O
}	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
}	O
static	O
void	O
BadOp	function
(	O
void	O
)	O
{	O
codep	pointer
=	O
insn_codep	pointer
+	O
1	int
;	O
oappend	function
(	O
"(bad)"	pointer
)	O
;	O
}	O
static	O
void	O
REP_Fixup	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
prefixes	int
&	O
PREFIX_REPZ	int
)	O
all_prefixes	array
[	O
last_repz_prefix	int
]	O
=	O
REP_PREFIX	O
;	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
al_reg	int
:	O
case	O
eAX_reg	int
:	O
case	O
indir_dx_reg	int
:	O
OP_IMREG	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
break	O
;	O
case	O
eDI_reg	int
:	O
OP_ESreg	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
break	O
;	O
case	O
eSI_reg	int
:	O
OP_DSreg	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
SEP_Fixup	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
isa64	enum
!=	O
amd64	int
)	O
return	O
;	O
obufp	pointer
=	O
obuf	array
;	O
BadOp	function
(	O
)	O
;	O
mnemonicendp	pointer
=	O
obufp	pointer
;	O
++	O
codep	pointer
;	O
}	O
static	O
void	O
BND_Fixup	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
prefixes	int
&	O
PREFIX_REPNZ	int
)	O
all_prefixes	array
[	O
last_repnz_prefix	int
]	O
=	O
BND_PREFIX	O
;	O
}	O
static	O
void	O
NOTRACK_Fixup	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
active_seg_prefix	int
==	O
PREFIX_DS	int
&&	O
(	O
address_mode	enum
!=	O
mode_64bit	int
||	O
last_data_prefix	int
<	O
0	int
)	O
)	O
{	O
active_seg_prefix	int
=	O
0	int
;	O
all_prefixes	array
[	O
last_seg_prefix	int
]	O
=	O
NOTRACK_PREFIX	O
;	O
}	O
}	O
static	O
void	O
HLE_Fixup1	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
&&	O
(	O
prefixes	int
&	O
PREFIX_LOCK	int
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
prefixes	int
&	O
PREFIX_REPZ	int
)	O
all_prefixes	array
[	O
last_repz_prefix	int
]	O
=	O
XRELEASE_PREFIX	O
;	O
if	O
(	O
prefixes	int
&	O
PREFIX_REPNZ	int
)	O
all_prefixes	array
[	O
last_repnz_prefix	int
]	O
=	O
XACQUIRE_PREFIX	O
;	O
}	O
OP_E	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
HLE_Fixup2	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
)	O
{	O
if	O
(	O
prefixes	int
&	O
PREFIX_REPZ	int
)	O
all_prefixes	array
[	O
last_repz_prefix	int
]	O
=	O
XRELEASE_PREFIX	O
;	O
if	O
(	O
prefixes	int
&	O
PREFIX_REPNZ	int
)	O
all_prefixes	array
[	O
last_repnz_prefix	int
]	O
=	O
XACQUIRE_PREFIX	O
;	O
}	O
OP_E	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
HLE_Fixup3	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
&&	O
last_repz_prefix	int
>	O
last_repnz_prefix	int
&&	O
(	O
prefixes	int
&	O
PREFIX_REPZ	int
)	O
!=	O
0	int
)	O
all_prefixes	array
[	O
last_repz_prefix	int
]	O
=	O
XRELEASE_PREFIX	O
;	O
OP_E	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
CMPXCHG8B_Fixup	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
{	O
char	O
*	O
p	pointer
=	O
mnemonicendp	pointer
-	O
2	int
;	O
mnemonicendp	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
"16b"	pointer
)	O
;	O
bytemode	int
=	O
o_mode	int
;	O
}	O
else	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_LOCK	int
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
prefixes	int
&	O
PREFIX_REPZ	int
)	O
all_prefixes	array
[	O
last_repz_prefix	int
]	O
=	O
XRELEASE_PREFIX	O
;	O
if	O
(	O
prefixes	int
&	O
PREFIX_REPNZ	int
)	O
all_prefixes	array
[	O
last_repnz_prefix	int
]	O
=	O
XACQUIRE_PREFIX	O
;	O
}	O
OP_M	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
XMM_Fixup	function
(	O
int	O
reg	int
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
const	O
char	O
*	O
*	O
names	pointer
;	O
if	O
(	O
need_vex	char
)	O
{	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
names	pointer
=	O
names_xmm	pointer
;	O
break	O
;	O
case	O
256	int
:	O
names	pointer
=	O
names_ymm	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
else	O
names	pointer
=	O
names_xmm	pointer
;	O
oappend	function
(	O
names	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
CRC32_Fixup	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
char	O
*	O
p	pointer
=	O
mnemonicendp	pointer
;	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
b_mode	int
:	O
if	O
(	O
intel_syntax	char
)	O
goto	O
skip	O
;	O
*	O
p	pointer
++	O
=	O
'b'	O
;	O
break	O
;	O
case	O
v_mode	int
:	O
if	O
(	O
intel_syntax	char
)	O
goto	O
skip	O
;	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
*	O
p	pointer
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
*	O
p	pointer
++	O
=	O
'l'	O
;	O
else	O
*	O
p	pointer
++	O
=	O
'w'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
oappend	function
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
break	O
;	O
}	O
mnemonicendp	pointer
=	O
p	pointer
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
skip	O
:	O
if	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
)	O
{	O
int	O
add	int
;	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
USED_REX	O
(	O
REX_B	int
)	O
;	O
add	int
=	O
(	O
rex	int
&	O
REX_B	int
)	O
?	O
8	int
:	O
0	int
;	O
if	O
(	O
bytemode	int
==	O
b_mode	int
)	O
{	O
USED_REX	O
(	O
0	int
)	O
;	O
if	O
(	O
rex	int
)	O
oappend	function
(	O
names8rex	pointer
[	O
modrm	struct
.	O
rm	int
+	O
add	int
]	O
)	O
;	O
else	O
oappend	function
(	O
names8	pointer
[	O
modrm	struct
.	O
rm	int
+	O
add	int
]	O
)	O
;	O
}	O
else	O
{	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
oappend	function
(	O
names64	pointer
[	O
modrm	struct
.	O
rm	int
+	O
add	int
]	O
)	O
;	O
else	O
if	O
(	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
)	O
oappend	function
(	O
names16	pointer
[	O
modrm	struct
.	O
rm	int
+	O
add	int
]	O
)	O
;	O
else	O
oappend	function
(	O
names32	pointer
[	O
modrm	struct
.	O
rm	int
+	O
add	int
]	O
)	O
;	O
}	O
}	O
else	O
OP_E	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
FXSAVE_Fixup	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
{	O
char	O
*	O
p	pointer
=	O
mnemonicendp	pointer
;	O
*	O
p	pointer
++	O
=	O
'6'	O
;	O
*	O
p	pointer
++	O
=	O
'4'	O
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
mnemonicendp	pointer
=	O
p	pointer
;	O
}	O
OP_M	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
PCMPESTR_Fixup	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
!	O
intel_syntax	char
)	O
{	O
char	O
*	O
p	pointer
=	O
mnemonicendp	pointer
;	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
*	O
p	pointer
++	O
=	O
'q'	O
;	O
else	O
if	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
*	O
p	pointer
++	O
=	O
'l'	O
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
mnemonicendp	pointer
=	O
p	pointer
;	O
}	O
OP_EX	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
OP_VEX	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
reg	int
;	O
const	O
char	O
*	O
*	O
names	pointer
;	O
if	O
(	O
!	O
need_vex	char
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
!	O
need_vex_reg	char
)	O
return	O
;	O
reg	int
=	O
vex	struct
.	O
register_specifier	int
;	O
vex	struct
.	O
register_specifier	int
=	O
0	int
;	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
)	O
reg	int
&=	O
7	int
;	O
else	O
if	O
(	O
vex	struct
.	O
evex	int
&&	O
!	O
vex	struct
.	O
v	int
)	O
reg	int
+=	O
16	int
;	O
if	O
(	O
bytemode	int
==	O
vex_scalar_mode	int
)	O
{	O
oappend	function
(	O
names_xmm	pointer
[	O
reg	int
]	O
)	O
;	O
return	O
;	O
}	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
vex_mode	int
:	O
case	O
vex128_mode	int
:	O
case	O
vex_vsib_q_w_dq_mode	int
:	O
case	O
vex_vsib_q_w_d_mode	int
:	O
names	pointer
=	O
names_xmm	pointer
;	O
break	O
;	O
case	O
dq_mode	int
:	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
names	pointer
=	O
names64	pointer
;	O
else	O
names	pointer
=	O
names32	pointer
;	O
break	O
;	O
case	O
mask_bd_mode	int
:	O
case	O
mask_mode	int
:	O
if	O
(	O
reg	int
>	O
0x7	int
)	O
{	O
oappend	function
(	O
"(bad)"	pointer
)	O
;	O
return	O
;	O
}	O
names	pointer
=	O
names_mask	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
return	O
;	O
}	O
break	O
;	O
case	O
256	int
:	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
vex_mode	int
:	O
case	O
vex256_mode	int
:	O
names	pointer
=	O
names_ymm	pointer
;	O
break	O
;	O
case	O
vex_vsib_q_w_dq_mode	int
:	O
case	O
vex_vsib_q_w_d_mode	int
:	O
names	pointer
=	O
vex	struct
.	O
w	int
?	O
names_ymm	pointer
:	O
names_xmm	pointer
;	O
break	O
;	O
case	O
mask_bd_mode	int
:	O
case	O
mask_mode	int
:	O
if	O
(	O
reg	int
>	O
0x7	int
)	O
{	O
oappend	function
(	O
"(bad)"	pointer
)	O
;	O
return	O
;	O
}	O
names	pointer
=	O
names_mask	pointer
;	O
break	O
;	O
default	O
:	O
oappend	function
(	O
"(bad)"	pointer
)	O
;	O
return	O
;	O
}	O
break	O
;	O
case	O
512	int
:	O
names	pointer
=	O
names_zmm	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
break	O
;	O
}	O
oappend	function
(	O
names	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
static	O
unsigned	O
char	O
get_vex_imm8	function
(	O
int	O
sizeflag	int
,	O
int	O
opnum	int
)	O
{	O
int	O
bytes_before_imm	int
=	O
0	int
;	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
)	O
{	O
if	O
(	O
(	O
sizeflag	int
&	O
AFLAG	int
)	O
||	O
address_mode	enum
==	O
mode_64bit	int
)	O
{	O
int	O
base	int
=	O
modrm	struct
.	O
rm	int
;	O
if	O
(	O
base	int
==	O
4	int
)	O
{	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
base	int
=	O
*	O
codep	pointer
&	O
7	int
;	O
if	O
(	O
opnum	int
==	O
0	int
)	O
bytes_before_imm	int
++	O
;	O
}	O
if	O
(	O
opnum	int
==	O
0	int
)	O
{	O
switch	O
(	O
modrm	struct
.	O
mod	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
base	int
!=	O
5	int
)	O
break	O
;	O
case	O
2	int
:	O
bytes_before_imm	int
+=	O
4	int
;	O
break	O
;	O
case	O
1	int
:	O
bytes_before_imm	int
++	O
;	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
opnum	int
==	O
0	int
)	O
{	O
switch	O
(	O
modrm	struct
.	O
mod	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
modrm	struct
.	O
rm	int
!=	O
6	int
)	O
break	O
;	O
case	O
2	int
:	O
bytes_before_imm	int
+=	O
2	int
;	O
break	O
;	O
case	O
1	int
:	O
if	O
(	O
opnum	int
==	O
0	int
)	O
bytes_before_imm	int
++	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
bytes_before_imm	int
+	O
1	int
)	O
;	O
return	O
codep	pointer
[	O
bytes_before_imm	int
]	O
;	O
}	O
static	O
void	O
OP_EX_VexReg	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
,	O
int	O
reg	int
)	O
{	O
const	O
char	O
*	O
*	O
names	pointer
;	O
if	O
(	O
reg	int
==	O
-	O
1	int
&&	O
modrm	struct
.	O
mod	int
!=	O
3	int
)	O
{	O
OP_E_memory	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
return	O
;	O
}	O
else	O
{	O
if	O
(	O
reg	int
==	O
-	O
1	int
)	O
{	O
reg	int
=	O
modrm	struct
.	O
rm	int
;	O
USED_REX	O
(	O
REX_B	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_B	int
)	O
reg	int
+=	O
8	int
;	O
}	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
)	O
reg	int
&=	O
7	int
;	O
}	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
names	pointer
=	O
names_xmm	pointer
;	O
break	O
;	O
case	O
256	int
:	O
names	pointer
=	O
names_ymm	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
oappend	function
(	O
names	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_EX_VexImmW	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
int	O
reg	int
=	O
-	O
1	int
;	O
static	O
unsigned	O
char	O
vex_imm8	char
;	O
if	O
(	O
vex_w_done	char
==	O
0	int
)	O
{	O
vex_w_done	char
=	O
1	int
;	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
vex_imm8	char
=	O
get_vex_imm8	function
(	O
sizeflag	int
,	O
0	int
)	O
;	O
if	O
(	O
vex	struct
.	O
w	int
)	O
reg	int
=	O
vex_imm8	char
>>	O
4	int
;	O
OP_EX_VexReg	function
(	O
bytemode	int
,	O
sizeflag	int
,	O
reg	int
)	O
;	O
}	O
else	O
if	O
(	O
vex_w_done	char
==	O
1	int
)	O
{	O
vex_w_done	char
=	O
2	int
;	O
if	O
(	O
!	O
vex	struct
.	O
w	int
)	O
reg	int
=	O
vex_imm8	char
>>	O
4	int
;	O
OP_EX_VexReg	function
(	O
bytemode	int
,	O
sizeflag	int
,	O
reg	int
)	O
;	O
}	O
else	O
{	O
scratchbuf	array
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	function
(	O
scratchbuf	array
+	O
1	int
,	O
1	int
,	O
vex_imm8	char
&	O
0xf	int
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
scratchbuf	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
codep	pointer
++	O
;	O
}	O
}	O
static	O
void	O
OP_Vex_2src	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
)	O
{	O
int	O
reg	int
=	O
modrm	struct
.	O
rm	int
;	O
USED_REX	O
(	O
REX_B	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_B	int
)	O
reg	int
+=	O
8	int
;	O
oappend	function
(	O
names_xmm	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
intel_syntax	char
&&	O
(	O
bytemode	int
==	O
v_mode	int
||	O
bytemode	int
==	O
v_swap_mode	int
)	O
)	O
{	O
bytemode	int
=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
?	O
x_mode	int
:	O
q_mode	int
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
OP_E	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
}	O
static	O
void	O
OP_Vex_2src_1	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
)	O
{	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
}	O
if	O
(	O
vex	struct
.	O
w	int
)	O
{	O
unsigned	O
int	O
reg	int
=	O
vex	struct
.	O
register_specifier	int
;	O
vex	struct
.	O
register_specifier	int
=	O
0	int
;	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
)	O
reg	int
&=	O
7	int
;	O
oappend	function
(	O
names_xmm	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
else	O
OP_Vex_2src	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
OP_Vex_2src_2	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
vex	struct
.	O
w	int
)	O
OP_Vex_2src	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
else	O
{	O
unsigned	O
int	O
reg	int
=	O
vex	struct
.	O
register_specifier	int
;	O
vex	struct
.	O
register_specifier	int
=	O
0	int
;	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
)	O
reg	int
&=	O
7	int
;	O
oappend	function
(	O
names_xmm	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
}	O
static	O
void	O
OP_EX_VexW	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
int	O
reg	int
=	O
-	O
1	int
;	O
if	O
(	O
!	O
vex_w_done	char
)	O
{	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
if	O
(	O
vex	struct
.	O
w	int
)	O
reg	int
=	O
get_vex_imm8	function
(	O
sizeflag	int
,	O
0	int
)	O
>>	O
4	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
vex	struct
.	O
w	int
)	O
reg	int
=	O
get_vex_imm8	function
(	O
sizeflag	int
,	O
1	int
)	O
>>	O
4	int
;	O
}	O
OP_EX_VexReg	function
(	O
bytemode	int
,	O
sizeflag	int
,	O
reg	int
)	O
;	O
if	O
(	O
vex_w_done	char
)	O
codep	pointer
++	O
;	O
vex_w_done	char
=	O
1	int
;	O
}	O
static	O
void	O
OP_REG_VexI4	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
reg	int
;	O
const	O
char	O
*	O
*	O
names	pointer
;	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
reg	int
=	O
*	O
codep	pointer
++	O
;	O
if	O
(	O
bytemode	int
!=	O
x_mode	int
)	O
abort	function
(	O
)	O
;	O
reg	int
>>=	O
4	int
;	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
)	O
reg	int
&=	O
7	int
;	O
switch	O
(	O
vex	struct
.	O
length	int
)	O
{	O
case	O
128	int
:	O
names	pointer
=	O
names_xmm	pointer
;	O
break	O
;	O
case	O
256	int
:	O
names	pointer
=	O
names_ymm	pointer
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
oappend	function
(	O
names	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_XMM_VexW	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
rex	int
&=	O
~	O
REX_W	int
;	O
OP_XMM	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
OP_EX_Vex	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
)	O
need_vex_reg	char
=	O
0	int
;	O
OP_EX	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
OP_XMM_Vex	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
if	O
(	O
modrm	struct
.	O
mod	int
!=	O
3	int
)	O
need_vex_reg	char
=	O
0	int
;	O
OP_XMM	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
struct	O
op	array
vex_cmp_op	array
[	O
]	O
=	O
{	O
{	O
STRING_COMMA_LEN	O
(	O
"eq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"lt"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"le"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"unord"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nlt"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nle"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ord"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"eq_uq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nge"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ngt"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"false"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq_oq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ge"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"gt"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"true"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"eq_os"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"lt_oq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"le_oq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"unord_s"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq_us"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nlt_uq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nle_uq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ord_s"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"eq_us"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"nge_uq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ngt_uq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"false_os"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq_os"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ge_oq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"gt_oq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"true_us"	pointer
)	O
}	O
,	O
}	O
;	O
static	O
void	O
VCMP_Fixup	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
unsigned	O
int	O
cmp_type	int
;	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
cmp_type	int
=	O
*	O
codep	pointer
++	O
&	O
0xff	int
;	O
if	O
(	O
cmp_type	int
<	O
ARRAY_SIZE	O
(	O
vex_cmp_op	array
)	O
)	O
{	O
char	O
suffix	array
[	O
3	int
]	O
;	O
char	O
*	O
p	pointer
=	O
mnemonicendp	pointer
-	O
2	int
;	O
suffix	array
[	O
0	int
]	O
=	O
p	pointer
[	O
0	int
]	O
;	O
suffix	array
[	O
1	int
]	O
=	O
p	pointer
[	O
1	int
]	O
;	O
suffix	array
[	O
2	int
]	O
=	O
'\0'	O
;	O
sprintf	function
(	O
p	pointer
,	O
"%s%s"	pointer
,	O
vex_cmp_op	array
[	O
cmp_type	int
]	O
.	O
name	pointer
,	O
suffix	array
)	O
;	O
mnemonicendp	pointer
+=	O
vex_cmp_op	array
[	O
cmp_type	int
]	O
.	O
len	long
;	O
}	O
else	O
{	O
scratchbuf	array
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	function
(	O
scratchbuf	array
+	O
1	int
,	O
1	int
,	O
cmp_type	int
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
scratchbuf	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
static	O
void	O
VPCMP_Fixup	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
unsigned	O
int	O
cmp_type	int
;	O
if	O
(	O
!	O
vex	struct
.	O
evex	int
)	O
abort	function
(	O
)	O
;	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
cmp_type	int
=	O
*	O
codep	pointer
++	O
&	O
0xff	int
;	O
if	O
(	O
cmp_type	int
<	O
ARRAY_SIZE	O
(	O
simd_cmp_op	array
)	O
&&	O
cmp_type	int
!=	O
3	int
&&	O
cmp_type	int
!=	O
7	int
)	O
{	O
char	O
suffix	array
[	O
3	int
]	O
;	O
char	O
*	O
p	pointer
=	O
mnemonicendp	pointer
-	O
2	int
;	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
'p'	O
)	O
{	O
p	pointer
++	O
;	O
suffix	array
[	O
0	int
]	O
=	O
p	pointer
[	O
0	int
]	O
;	O
suffix	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
suffix	array
[	O
0	int
]	O
=	O
p	pointer
[	O
0	int
]	O
;	O
suffix	array
[	O
1	int
]	O
=	O
p	pointer
[	O
1	int
]	O
;	O
suffix	array
[	O
2	int
]	O
=	O
'\0'	O
;	O
}	O
sprintf	function
(	O
p	pointer
,	O
"%s%s"	pointer
,	O
simd_cmp_op	array
[	O
cmp_type	int
]	O
.	O
name	pointer
,	O
suffix	array
)	O
;	O
mnemonicendp	pointer
+=	O
simd_cmp_op	array
[	O
cmp_type	int
]	O
.	O
len	long
;	O
}	O
else	O
{	O
scratchbuf	array
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	function
(	O
scratchbuf	array
+	O
1	int
,	O
1	int
,	O
cmp_type	int
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
scratchbuf	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
static	O
const	O
struct	O
op	array
xop_cmp_op	array
[	O
]	O
=	O
{	O
{	O
STRING_COMMA_LEN	O
(	O
"lt"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"le"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"gt"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"ge"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"eq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"neq"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"false"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"true"	pointer
)	O
}	O
}	O
;	O
static	O
void	O
VPCOM_Fixup	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
unsigned	O
int	O
cmp_type	int
;	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
cmp_type	int
=	O
*	O
codep	pointer
++	O
&	O
0xff	int
;	O
if	O
(	O
cmp_type	int
<	O
ARRAY_SIZE	O
(	O
xop_cmp_op	array
)	O
)	O
{	O
char	O
suffix	array
[	O
3	int
]	O
;	O
char	O
*	O
p	pointer
=	O
mnemonicendp	pointer
-	O
2	int
;	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
'm'	O
)	O
{	O
p	pointer
++	O
;	O
suffix	array
[	O
0	int
]	O
=	O
p	pointer
[	O
0	int
]	O
;	O
suffix	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
suffix	array
[	O
0	int
]	O
=	O
p	pointer
[	O
0	int
]	O
;	O
suffix	array
[	O
1	int
]	O
=	O
p	pointer
[	O
1	int
]	O
;	O
suffix	array
[	O
2	int
]	O
=	O
'\0'	O
;	O
}	O
sprintf	function
(	O
p	pointer
,	O
"%s%s"	pointer
,	O
xop_cmp_op	array
[	O
cmp_type	int
]	O
.	O
name	pointer
,	O
suffix	array
)	O
;	O
mnemonicendp	pointer
+=	O
xop_cmp_op	array
[	O
cmp_type	int
]	O
.	O
len	long
;	O
}	O
else	O
{	O
scratchbuf	array
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	function
(	O
scratchbuf	array
+	O
1	int
,	O
1	int
,	O
cmp_type	int
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
scratchbuf	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
static	O
const	O
struct	O
op	array
pclmul_op	array
[	O
]	O
=	O
{	O
{	O
STRING_COMMA_LEN	O
(	O
"lql"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"hql"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"lqh"	pointer
)	O
}	O
,	O
{	O
STRING_COMMA_LEN	O
(	O
"hqh"	pointer
)	O
}	O
}	O
;	O
static	O
void	O
PCLMUL_Fixup	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
unsigned	O
int	O
pclmul_type	int
;	O
FETCH_DATA	O
(	O
the_info	pointer
,	O
codep	pointer
+	O
1	int
)	O
;	O
pclmul_type	int
=	O
*	O
codep	pointer
++	O
&	O
0xff	int
;	O
switch	O
(	O
pclmul_type	int
)	O
{	O
case	O
0x10	int
:	O
pclmul_type	int
=	O
2	int
;	O
break	O
;	O
case	O
0x11	int
:	O
pclmul_type	int
=	O
3	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
pclmul_type	int
<	O
ARRAY_SIZE	O
(	O
pclmul_op	array
)	O
)	O
{	O
char	O
suffix	array
[	O
4	int
]	O
;	O
char	O
*	O
p	pointer
=	O
mnemonicendp	pointer
-	O
3	int
;	O
suffix	array
[	O
0	int
]	O
=	O
p	pointer
[	O
0	int
]	O
;	O
suffix	array
[	O
1	int
]	O
=	O
p	pointer
[	O
1	int
]	O
;	O
suffix	array
[	O
2	int
]	O
=	O
p	pointer
[	O
2	int
]	O
;	O
suffix	array
[	O
3	int
]	O
=	O
'\0'	O
;	O
sprintf	function
(	O
p	pointer
,	O
"%s%s"	pointer
,	O
pclmul_op	array
[	O
pclmul_type	int
]	O
.	O
name	pointer
,	O
suffix	array
)	O
;	O
mnemonicendp	pointer
+=	O
pclmul_op	array
[	O
pclmul_type	int
]	O
.	O
len	long
;	O
}	O
else	O
{	O
scratchbuf	array
[	O
0	int
]	O
=	O
'$'	O
;	O
print_operand_value	function
(	O
scratchbuf	array
+	O
1	int
,	O
1	int
,	O
pclmul_type	int
)	O
;	O
oappend_maybe_intel	function
(	O
scratchbuf	array
)	O
;	O
scratchbuf	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
static	O
void	O
MOVBE_Fixup	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
)	O
{	O
char	O
*	O
p	pointer
=	O
mnemonicendp	pointer
;	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
v_mode	int
:	O
if	O
(	O
intel_syntax	char
)	O
goto	O
skip	O
;	O
USED_REX	O
(	O
REX_W	int
)	O
;	O
if	O
(	O
sizeflag	int
&	O
SUFFIX_ALWAYS	int
)	O
{	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
*	O
p	pointer
++	O
=	O
'q'	O
;	O
else	O
{	O
if	O
(	O
sizeflag	int
&	O
DFLAG	int
)	O
*	O
p	pointer
++	O
=	O
'l'	O
;	O
else	O
*	O
p	pointer
++	O
=	O
'w'	O
;	O
used_prefixes	int
|=	O
(	O
prefixes	int
&	O
PREFIX_DATA	int
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
oappend	function
(	O
INTERNAL_DISASSEMBLER_ERROR	O
)	O
;	O
break	O
;	O
}	O
mnemonicendp	pointer
=	O
p	pointer
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
skip	O
:	O
OP_M	function
(	O
bytemode	int
,	O
sizeflag	int
)	O
;	O
}	O
static	O
void	O
OP_LWPCB_E	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
int	O
reg	int
;	O
const	O
char	O
*	O
*	O
names	pointer
;	O
MODRM_CHECK	O
;	O
codep	pointer
++	O
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
names	pointer
=	O
names64	pointer
;	O
else	O
names	pointer
=	O
names32	pointer
;	O
reg	int
=	O
modrm	struct
.	O
rm	int
;	O
USED_REX	O
(	O
REX_B	int
)	O
;	O
if	O
(	O
rex	int
&	O
REX_B	int
)	O
reg	int
+=	O
8	int
;	O
oappend	function
(	O
names	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_LWP_E	function
(	O
int	O
bytemode	int
ATTRIBUTE_UNUSED	O
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
const	O
char	O
*	O
*	O
names	pointer
;	O
unsigned	O
int	O
reg	int
=	O
vex	struct
.	O
register_specifier	int
;	O
vex	struct
.	O
register_specifier	int
=	O
0	int
;	O
if	O
(	O
rex	int
&	O
REX_W	int
)	O
names	pointer
=	O
names64	pointer
;	O
else	O
names	pointer
=	O
names32	pointer
;	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
)	O
reg	int
&=	O
7	int
;	O
oappend	function
(	O
names	pointer
[	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_Mask	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
!	O
vex	struct
.	O
evex	int
||	O
(	O
bytemode	int
!=	O
mask_mode	int
&&	O
bytemode	int
!=	O
mask_bd_mode	int
)	O
)	O
abort	function
(	O
)	O
;	O
USED_REX	O
(	O
REX_R	int
)	O
;	O
if	O
(	O
(	O
rex	int
&	O
REX_R	int
)	O
!=	O
0	int
||	O
!	O
vex	struct
.	O
r	int
)	O
{	O
BadOp	function
(	O
)	O
;	O
return	O
;	O
}	O
oappend	function
(	O
names_mask	pointer
[	O
modrm	struct
.	O
reg	int
]	O
)	O
;	O
}	O
static	O
void	O
OP_Rounding	function
(	O
int	O
bytemode	int
,	O
int	O
sizeflag	int
ATTRIBUTE_UNUSED	O
)	O
{	O
if	O
(	O
!	O
vex	struct
.	O
evex	int
||	O
(	O
bytemode	int
!=	O
evex_rounding_mode	int
&&	O
bytemode	int
!=	O
evex_rounding_64_mode	int
&&	O
bytemode	int
!=	O
evex_sae_mode	int
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
modrm	struct
.	O
mod	int
==	O
3	int
&&	O
vex	struct
.	O
b	pointer
)	O
switch	O
(	O
bytemode	int
)	O
{	O
case	O
evex_rounding_64_mode	int
:	O
if	O
(	O
address_mode	enum
!=	O
mode_64bit	int
)	O
{	O
oappend	function
(	O
"(bad)"	pointer
)	O
;	O
break	O
;	O
}	O
case	O
evex_rounding_mode	int
:	O
oappend	function
(	O
names_rounding	array
[	O
vex	struct
.	O
ll	int
]	O
)	O
;	O
break	O
;	O
case	O
evex_sae_mode	int
:	O
oappend	function
(	O
"{sae}"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
