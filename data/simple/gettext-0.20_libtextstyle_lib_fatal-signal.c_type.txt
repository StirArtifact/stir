static	O
int	O
fatal_signals	O
[	O
]	O
=	O
{	O
0	int
}	O
;	O
static	O
void	O
init_fatal_signals	function
(	O
void	O
)	O
{	O
static	O
bool	O
fatal_signals_initialized	int
=	O
false	O
;	O
if	O
(	O
!	O
fatal_signals_initialized	int
)	O
{	O
size_t	O
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
num_fatal_signals	O
;	O
i	O
++	O
)	O
{	O
struct	O
sigaction	function
action	struct
;	O
if	O
(	O
sigaction	function
(	O
fatal_signals	O
[	O
i	O
]	O
,	O
NULL	O
,	O
&	O
action	struct
)	O
>=	O
0	int
&&	O
get_handler	O
(	O
&	O
action	struct
)	O
==	O
SIG_IGN	O
)	O
fatal_signals	O
[	O
i	O
]	O
=	O
-	O
1	int
;	O
}	O
fatal_signals_initialized	int
=	O
true	O
;	O
}	O
}	O
typedef	O
_GL_ASYNC_SAFE	O
void	O
(	O
*	O
action_t	pointer
)	O
(	O
int	O
sig	int
)	O
;	O
typedef	O
struct	O
{	O
volatile	O
action_t	pointer
action	struct
;	O
}	O
actions_entry_t	struct
;	O
static	O
actions_entry_t	struct
static_actions	array
[	O
32	int
]	O
;	O
static	O
actions_entry_t	struct
*	O
volatile	O
actions	pointer
=	O
static_actions	array
;	O
static	O
sig_atomic_t	O
volatile	O
actions_count	O
=	O
0	int
;	O
static	O
size_t	O
actions_allocated	int
=	O
SIZEOF	O
(	O
static_actions	array
)	O
;	O
static	O
struct	O
sigaction	function
saved_sigactions	int
[	O
64	int
]	O
;	O
static	O
_GL_ASYNC_SAFE	O
void	O
uninstall_handlers	function
(	O
void	O
)	O
{	O
size_t	O
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
num_fatal_signals	O
;	O
i	O
++	O
)	O
if	O
(	O
fatal_signals	O
[	O
i	O
]	O
>=	O
0	int
)	O
{	O
int	O
sig	int
=	O
fatal_signals	O
[	O
i	O
]	O
;	O
if	O
(	O
saved_sigactions	int
[	O
sig	int
]	O
.	O
sa_handler	O
==	O
SIG_IGN	O
)	O
saved_sigactions	int
[	O
sig	int
]	O
.	O
sa_handler	O
=	O
SIG_DFL	O
;	O
sigaction	function
(	O
sig	int
,	O
&	O
saved_sigactions	int
[	O
sig	int
]	O
,	O
NULL	O
)	O
;	O
}	O
}	O
static	O
_GL_ASYNC_SAFE	O
void	O
fatal_signal_handler	function
(	O
int	O
sig	int
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
action_t	pointer
action	struct
;	O
size_t	O
n	O
=	O
actions_count	O
;	O
if	O
(	O
n	O
==	O
0	int
)	O
break	O
;	O
n	O
--	O
;	O
actions_count	O
=	O
n	O
;	O
action	struct
=	O
actions	pointer
[	O
n	O
]	O
.	O
action	struct
;	O
action	struct
(	O
sig	int
)	O
;	O
}	O
uninstall_handlers	function
(	O
)	O
;	O
raise	function
(	O
sig	int
)	O
;	O
}	O
static	O
void	O
install_handlers	function
(	O
void	O
)	O
{	O
size_t	O
i	O
;	O
struct	O
sigaction	function
action	struct
;	O
action	struct
.	O
sa_handler	O
=	O
&	O
fatal_signal_handler	function
;	O
action	struct
.	O
sa_flags	O
=	O
SA_NODEFER	O
;	O
sigemptyset	function
(	O
&	O
action	struct
.	O
sa_mask	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
num_fatal_signals	O
;	O
i	O
++	O
)	O
if	O
(	O
fatal_signals	O
[	O
i	O
]	O
>=	O
0	int
)	O
{	O
int	O
sig	int
=	O
fatal_signals	O
[	O
i	O
]	O
;	O
if	O
(	O
!	O
(	O
sig	int
<	O
sizeof	O
(	O
saved_sigactions	int
)	O
/	O
sizeof	O
(	O
saved_sigactions	int
[	O
0	int
]	O
)	O
)	O
)	O
abort	O
(	O
)	O
;	O
sigaction	function
(	O
sig	int
,	O
&	O
action	struct
,	O
&	O
saved_sigactions	int
[	O
sig	int
]	O
)	O
;	O
}	O
}	O
void	O
at_fatal_signal	O
(	O
action_t	pointer
action	struct
)	O
{	O
static	O
bool	O
cleanup_initialized	int
=	O
false	O
;	O
if	O
(	O
!	O
cleanup_initialized	int
)	O
{	O
init_fatal_signals	function
(	O
)	O
;	O
install_handlers	function
(	O
)	O
;	O
cleanup_initialized	int
=	O
true	O
;	O
}	O
if	O
(	O
actions_count	O
==	O
actions_allocated	int
)	O
{	O
actions_entry_t	struct
*	O
old_actions	pointer
=	O
actions	pointer
;	O
size_t	O
old_actions_allocated	O
=	O
actions_allocated	int
;	O
size_t	O
new_actions_allocated	O
=	O
2	int
*	O
actions_allocated	int
;	O
actions_entry_t	struct
*	O
new_actions	pointer
=	O
XNMALLOC	function
(	O
new_actions_allocated	O
,	O
actions_entry_t	struct
)	O
;	O
size_t	O
k	O
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
old_actions_allocated	O
;	O
k	O
++	O
)	O
new_actions	pointer
[	O
k	O
]	O
=	O
old_actions	pointer
[	O
k	O
]	O
;	O
actions	pointer
=	O
new_actions	pointer
;	O
actions_allocated	int
=	O
new_actions_allocated	O
;	O
if	O
(	O
old_actions	pointer
!=	O
static_actions	array
)	O
free	function
(	O
old_actions	pointer
)	O
;	O
}	O
actions	pointer
[	O
actions_count	O
]	O
.	O
action	struct
=	O
action	struct
;	O
actions_count	O
++	O
;	O
}	O
static	O
sigset_t	O
fatal_signal_set	int
;	O
static	O
void	O
init_fatal_signal_set	function
(	O
void	O
)	O
{	O
static	O
bool	O
fatal_signal_set_initialized	int
=	O
false	O
;	O
if	O
(	O
!	O
fatal_signal_set_initialized	int
)	O
{	O
size_t	O
i	O
;	O
init_fatal_signals	function
(	O
)	O
;	O
sigemptyset	function
(	O
&	O
fatal_signal_set	int
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
num_fatal_signals	O
;	O
i	O
++	O
)	O
if	O
(	O
fatal_signals	O
[	O
i	O
]	O
>=	O
0	int
)	O
sigaddset	function
(	O
&	O
fatal_signal_set	int
,	O
fatal_signals	O
[	O
i	O
]	O
)	O
;	O
fatal_signal_set_initialized	int
=	O
true	O
;	O
}	O
}	O
void	O
block_fatal_signals	O
(	O
void	O
)	O
{	O
init_fatal_signal_set	function
(	O
)	O
;	O
sigprocmask	function
(	O
SIG_BLOCK	O
,	O
&	O
fatal_signal_set	int
,	O
NULL	O
)	O
;	O
}	O
void	O
unblock_fatal_signals	O
(	O
void	O
)	O
{	O
init_fatal_signal_set	function
(	O
)	O
;	O
sigprocmask	function
(	O
SIG_UNBLOCK	O
,	O
&	O
fatal_signal_set	int
,	O
NULL	O
)	O
;	O
}	O
unsigned	O
int	O
get_fatal_signals	O
(	O
int	O
signals	array
[	O
64	int
]	O
)	O
{	O
init_fatal_signal_set	function
(	O
)	O
;	O
{	O
int	O
*	O
p	pointer
=	O
signals	array
;	O
size_t	O
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
num_fatal_signals	O
;	O
i	O
++	O
)	O
if	O
(	O
fatal_signals	O
[	O
i	O
]	O
>=	O
0	int
)	O
*	O
p	pointer
++	O
=	O
fatal_signals	O
[	O
i	O
]	O
;	O
return	O
p	pointer
-	O
signals	array
;	O
}	O
}	O
