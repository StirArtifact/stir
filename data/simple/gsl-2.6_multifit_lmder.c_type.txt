typedef	O
struct	O
{	O
size_t	long
iter	long
;	O
double	O
xnorm	double
;	O
double	O
fnorm	double
;	O
double	O
delta	double
;	O
double	O
par	double
;	O
gsl_matrix	struct
*	O
J	pointer
;	O
gsl_matrix	struct
*	O
r	pointer
;	O
gsl_vector	struct
*	O
tau	double
;	O
gsl_vector	struct
*	O
diag	pointer
;	O
gsl_vector	struct
*	O
qtf	pointer
;	O
gsl_vector	struct
*	O
newton	pointer
;	O
gsl_vector	struct
*	O
gradient	pointer
;	O
gsl_vector	struct
*	O
x_trial	pointer
;	O
gsl_vector	struct
*	O
f_trial	pointer
;	O
gsl_vector	struct
*	O
df	pointer
;	O
gsl_vector	struct
*	O
sdiag	pointer
;	O
gsl_vector	struct
*	O
rptdx	pointer
;	O
const	O
gsl_vector	struct
*	O
weights	pointer
;	O
gsl_vector	struct
*	O
w	pointer
;	O
gsl_vector	struct
*	O
work1	pointer
;	O
gsl_permutation	struct
*	O
perm	pointer
;	O
}	O
lmder_state_t	struct
;	O
static	O
int	O
lmder_alloc	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
n	int
,	O
size_t	long
p	int
)	O
;	O
static	O
int	O
lmder_set	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
;	O
static	O
int	O
lmsder_set	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
;	O
static	O
int	O
set	pointer
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
int	O
scale	int
)	O
;	O
static	O
int	O
lmder_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
;	O
static	O
void	O
lmder_free	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
iterate	pointer
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
,	O
int	O
scale	int
)	O
;	O
static	O
int	O
lmder_alloc	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
n	int
,	O
size_t	long
p	int
)	O
{	O
lmder_state_t	struct
*	O
state	pointer
=	O
(	O
lmder_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_matrix	struct
*	O
r	pointer
,	O
*	O
J	pointer
;	O
gsl_vector	struct
*	O
tau	double
,	O
*	O
diag	pointer
,	O
*	O
qtf	pointer
,	O
*	O
newton	pointer
,	O
*	O
gradient	pointer
,	O
*	O
x_trial	pointer
,	O
*	O
f_trial	pointer
,	O
*	O
df	pointer
,	O
*	O
sdiag	pointer
,	O
*	O
rptdx	pointer
,	O
*	O
w	pointer
,	O
*	O
work1	pointer
;	O
gsl_permutation	struct
*	O
perm	pointer
;	O
J	pointer
=	O
gsl_matrix_alloc	function
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
J	pointer
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for J"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
J	pointer
=	O
J	pointer
;	O
r	pointer
=	O
gsl_matrix_alloc	function
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
r	pointer
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for r"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
r	pointer
=	O
r	pointer
;	O
tau	double
=	O
gsl_vector_calloc	function
(	O
GSL_MIN	O
(	O
n	int
,	O
p	int
)	O
)	O
;	O
if	O
(	O
tau	double
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for tau"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
tau	double
=	O
tau	double
;	O
diag	pointer
=	O
gsl_vector_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
diag	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for diag"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
diag	pointer
=	O
diag	pointer
;	O
qtf	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
qtf	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for qtf"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
qtf	pointer
=	O
qtf	pointer
;	O
newton	pointer
=	O
gsl_vector_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
newton	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for newton"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
newton	pointer
=	O
newton	pointer
;	O
gradient	pointer
=	O
gsl_vector_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
gradient	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for gradient"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
gradient	pointer
=	O
gradient	pointer
;	O
x_trial	pointer
=	O
gsl_vector_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
x_trial	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for x_trial"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
x_trial	pointer
=	O
x_trial	pointer
;	O
f_trial	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
f_trial	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for f_trial"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
f_trial	pointer
=	O
f_trial	pointer
;	O
df	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
df	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
f_trial	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for df"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
df	pointer
=	O
df	pointer
;	O
sdiag	pointer
=	O
gsl_vector_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
sdiag	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
f_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
df	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for sdiag"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
sdiag	pointer
=	O
sdiag	pointer
;	O
rptdx	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
rptdx	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
f_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
df	pointer
)	O
;	O
gsl_vector_free	function
(	O
sdiag	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for rptdx"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
rptdx	pointer
=	O
rptdx	pointer
;	O
w	pointer
=	O
gsl_vector_calloc	function
(	O
n	int
)	O
;	O
if	O
(	O
w	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
f_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
df	pointer
)	O
;	O
gsl_vector_free	function
(	O
sdiag	pointer
)	O
;	O
gsl_vector_free	function
(	O
rptdx	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for w"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
w	pointer
=	O
w	pointer
;	O
work1	pointer
=	O
gsl_vector_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
work1	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
f_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
df	pointer
)	O
;	O
gsl_vector_free	function
(	O
sdiag	pointer
)	O
;	O
gsl_vector_free	function
(	O
rptdx	pointer
)	O
;	O
gsl_vector_free	function
(	O
w	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for work1"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
work1	pointer
=	O
work1	pointer
;	O
perm	pointer
=	O
gsl_permutation_calloc	function
(	O
p	int
)	O
;	O
if	O
(	O
perm	pointer
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
r	pointer
)	O
;	O
gsl_vector_free	function
(	O
tau	double
)	O
;	O
gsl_vector_free	function
(	O
diag	pointer
)	O
;	O
gsl_vector_free	function
(	O
qtf	pointer
)	O
;	O
gsl_vector_free	function
(	O
newton	pointer
)	O
;	O
gsl_vector_free	function
(	O
gradient	pointer
)	O
;	O
gsl_vector_free	function
(	O
x_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
f_trial	pointer
)	O
;	O
gsl_vector_free	function
(	O
df	pointer
)	O
;	O
gsl_vector_free	function
(	O
sdiag	pointer
)	O
;	O
gsl_vector_free	function
(	O
rptdx	pointer
)	O
;	O
gsl_vector_free	function
(	O
w	pointer
)	O
;	O
gsl_vector_free	function
(	O
work1	pointer
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for perm"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
perm	pointer
=	O
perm	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lmder_set	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
int	O
status	int
=	O
set	pointer
(	O
vstate	pointer
,	O
swts	pointer
,	O
fdf	pointer
,	O
x	double
,	O
f	pointer
,	O
dx	pointer
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
lmsder_set	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
int	O
status	int
=	O
set	pointer
(	O
vstate	pointer
,	O
swts	pointer
,	O
fdf	pointer
,	O
x	double
,	O
f	pointer
,	O
dx	pointer
,	O
1	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
lmder_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
int	O
status	int
=	O
iterate	pointer
(	O
vstate	pointer
,	O
swts	pointer
,	O
fdf	pointer
,	O
x	double
,	O
f	pointer
,	O
dx	pointer
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
lmsder_iterate	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_vector	struct
*	O
swts	pointer
,	O
gsl_multifit_function_fdf	struct
*	O
fdf	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
gsl_vector	struct
*	O
f	pointer
,	O
gsl_vector	struct
*	O
dx	pointer
)	O
{	O
int	O
status	int
=	O
iterate	pointer
(	O
vstate	pointer
,	O
swts	pointer
,	O
fdf	pointer
,	O
x	double
,	O
f	pointer
,	O
dx	pointer
,	O
1	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
lmder_gradient	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_vector	struct
*	O
g	pointer
)	O
{	O
lmder_state_t	struct
*	O
state	pointer
=	O
(	O
lmder_state_t	struct
*	O
)	O
vstate	pointer
;	O
compute_gradient	function
(	O
state	pointer
->	O
r	pointer
,	O
state	pointer
->	O
qtf	pointer
,	O
g	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lmder_jac	function
(	O
void	O
*	O
vstate	pointer
,	O
gsl_matrix	struct
*	O
J	pointer
)	O
{	O
lmder_state_t	struct
*	O
state	pointer
=	O
(	O
lmder_state_t	struct
*	O
)	O
vstate	pointer
;	O
int	O
s	pointer
=	O
gsl_matrix_memcpy	function
(	O
J	pointer
,	O
state	pointer
->	O
J	pointer
)	O
;	O
return	O
s	pointer
;	O
}	O
static	O
void	O
lmder_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
lmder_state_t	struct
*	O
state	pointer
=	O
(	O
lmder_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
perm	pointer
)	O
gsl_permutation_free	function
(	O
state	pointer
->	O
perm	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
work1	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
work1	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
w	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
w	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
rptdx	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
rptdx	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
sdiag	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
sdiag	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
df	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
df	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
f_trial	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
f_trial	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
x_trial	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
x_trial	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
gradient	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
gradient	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
newton	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
newton	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
qtf	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
qtf	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
diag	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
diag	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
tau	double
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
tau	double
)	O
;	O
if	O
(	O
state	pointer
->	O
r	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
r	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
J	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
J	pointer
)	O
;	O
}	O
static	O
const	O
gsl_multifit_fdfsolver_type	struct
lmder_type	struct
=	O
{	O
"lmder"	pointer
,	O
sizeof	O
(	O
lmder_state_t	struct
)	O
,	O
&	O
lmder_alloc	function
,	O
&	O
lmder_set	function
,	O
&	O
lmder_iterate	function
,	O
&	O
lmder_gradient	function
,	O
&	O
lmder_jac	function
,	O
&	O
lmder_free	function
}	O
;	O
static	O
const	O
gsl_multifit_fdfsolver_type	struct
lmsder_type	struct
=	O
{	O
"lmsder"	pointer
,	O
sizeof	O
(	O
lmder_state_t	struct
)	O
,	O
&	O
lmder_alloc	function
,	O
&	O
lmsder_set	function
,	O
&	O
lmsder_iterate	function
,	O
&	O
lmder_gradient	function
,	O
&	O
lmder_jac	function
,	O
&	O
lmder_free	function
}	O
;	O
const	O
gsl_multifit_fdfsolver_type	struct
*	O
gsl_multifit_fdfsolver_lmder	pointer
=	O
&	O
lmder_type	struct
;	O
const	O
gsl_multifit_fdfsolver_type	struct
*	O
gsl_multifit_fdfsolver_lmsder	pointer
=	O
&	O
lmsder_type	struct
;	O
