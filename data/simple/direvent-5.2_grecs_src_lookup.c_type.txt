static	O
int	O
_grecs_list_eq	function
(	O
struct	O
grecs_value	struct
*	O
a	pointer
,	O
struct	O
grecs_value	struct
*	O
b	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
aent	pointer
,	O
*	O
bent	pointer
;	O
if	O
(	O
grecs_list_size	function
(	O
a	pointer
->	O
v	pointer
.	O
list	pointer
)	O
!=	O
grecs_list_size	function
(	O
b	pointer
->	O
v	pointer
.	O
list	pointer
)	O
)	O
return	O
0	int
;	O
for	O
(	O
aent	pointer
=	O
a	pointer
->	O
v	pointer
.	O
list	pointer
->	O
head	pointer
,	O
bent	pointer
=	O
b	pointer
->	O
v	pointer
.	O
list	pointer
->	O
head	pointer
;	O
;	O
aent	pointer
=	O
aent	pointer
->	O
next	pointer
,	O
bent	pointer
=	O
bent	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
!	O
aent	pointer
)	O
return	O
bent	pointer
==	O
NULL	O
;	O
if	O
(	O
!	O
bent	pointer
)	O
return	O
0	int
;	O
if	O
(	O
!	O
grecs_value_eq	function
(	O
aent	pointer
->	O
data	pointer
,	O
bent	pointer
->	O
data	pointer
)	O
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
_grecs_array_eq	function
(	O
struct	O
grecs_value	struct
*	O
a	pointer
,	O
struct	O
grecs_value	struct
*	O
b	pointer
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
a	pointer
->	O
v	pointer
.	O
arg	struct
.	O
c	long
!=	O
b	pointer
->	O
v	pointer
.	O
arg	struct
.	O
c	long
)	O
return	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
a	pointer
->	O
v	pointer
.	O
arg	struct
.	O
c	long
;	O
i	long
++	O
)	O
if	O
(	O
!	O
grecs_value_eq	function
(	O
a	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
[	O
i	long
]	O
,	O
b	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
[	O
i	long
]	O
)	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
int	O
grecs_value_eq	function
(	O
struct	O
grecs_value	struct
*	O
a	pointer
,	O
struct	O
grecs_value	struct
*	O
b	pointer
)	O
{	O
if	O
(	O
a	pointer
==	O
0	int
||	O
b	pointer
==	O
0	int
)	O
return	O
a	pointer
==	O
b	pointer
;	O
if	O
(	O
a	pointer
->	O
type	int
!=	O
b	pointer
->	O
type	int
)	O
return	O
0	int
;	O
switch	O
(	O
a	pointer
->	O
type	int
)	O
{	O
case	O
GRECS_TYPE_STRING	int
:	O
if	O
(	O
a	pointer
->	O
v	pointer
.	O
string	pointer
==	O
NULL	O
)	O
return	O
b	pointer
->	O
v	pointer
.	O
string	pointer
==	O
NULL	O
;	O
return	O
strcmp	function
(	O
a	pointer
->	O
v	pointer
.	O
string	pointer
,	O
b	pointer
->	O
v	pointer
.	O
string	pointer
)	O
==	O
0	int
;	O
case	O
GRECS_TYPE_LIST	int
:	O
return	O
_grecs_list_eq	function
(	O
a	pointer
,	O
b	pointer
)	O
;	O
case	O
GRECS_TYPE_ARRAY	int
:	O
return	O
_grecs_array_eq	function
(	O
a	pointer
,	O
b	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_grecs_list_match	function
(	O
struct	O
grecs_value	struct
*	O
pat	pointer
,	O
struct	O
grecs_value	struct
*	O
b	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
aent	pointer
,	O
*	O
bent	pointer
;	O
if	O
(	O
grecs_list_size	function
(	O
pat	pointer
->	O
v	pointer
.	O
list	pointer
)	O
!=	O
grecs_list_size	function
(	O
b	pointer
->	O
v	pointer
.	O
list	pointer
)	O
)	O
return	O
0	int
;	O
for	O
(	O
aent	pointer
=	O
pat	pointer
->	O
v	pointer
.	O
list	pointer
->	O
head	pointer
,	O
bent	pointer
=	O
b	pointer
->	O
v	pointer
.	O
list	pointer
->	O
head	pointer
;	O
;	O
aent	pointer
=	O
aent	pointer
->	O
next	pointer
,	O
bent	pointer
=	O
bent	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
!	O
aent	pointer
)	O
return	O
bent	pointer
==	O
NULL	O
;	O
if	O
(	O
!	O
bent	pointer
)	O
return	O
0	int
;	O
if	O
(	O
!	O
grecs_value_match	function
(	O
aent	pointer
->	O
data	pointer
,	O
bent	pointer
->	O
data	pointer
,	O
flags	int
)	O
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
_grecs_array_match	function
(	O
struct	O
grecs_value	struct
*	O
pat	pointer
,	O
struct	O
grecs_value	struct
*	O
b	pointer
,	O
int	O
flags	int
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
pat	pointer
->	O
v	pointer
.	O
arg	struct
.	O
c	long
>	O
b	pointer
->	O
v	pointer
.	O
arg	struct
.	O
c	long
)	O
return	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
pat	pointer
->	O
v	pointer
.	O
arg	struct
.	O
c	long
;	O
i	long
++	O
)	O
if	O
(	O
!	O
grecs_value_match	function
(	O
pat	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
[	O
i	long
]	O
,	O
b	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
[	O
i	long
]	O
,	O
flags	int
)	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
int	O
grecs_value_match	function
(	O
struct	O
grecs_value	struct
*	O
pat	pointer
,	O
struct	O
grecs_value	struct
*	O
b	pointer
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
pat	pointer
==	O
0	int
||	O
b	pointer
==	O
0	int
)	O
return	O
pat	pointer
==	O
b	pointer
;	O
if	O
(	O
pat	pointer
->	O
type	int
!=	O
b	pointer
->	O
type	int
)	O
{	O
if	O
(	O
pat	pointer
->	O
type	int
!=	O
GRECS_TYPE_STRING	int
)	O
return	O
0	int
;	O
switch	O
(	O
b	pointer
->	O
type	int
)	O
{	O
case	O
GRECS_TYPE_LIST	int
:	O
b	pointer
=	O
grecs_list_index	function
(	O
b	pointer
->	O
v	pointer
.	O
list	pointer
,	O
0	int
)	O
;	O
break	O
;	O
case	O
GRECS_TYPE_ARRAY	int
:	O
b	pointer
=	O
b	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
[	O
0	int
]	O
;	O
}	O
}	O
switch	O
(	O
pat	pointer
->	O
type	int
)	O
{	O
case	O
GRECS_TYPE_STRING	int
:	O
if	O
(	O
pat	pointer
->	O
v	pointer
.	O
string	pointer
==	O
NULL	O
)	O
return	O
b	pointer
->	O
v	pointer
.	O
string	pointer
==	O
NULL	O
;	O
return	O
fnmatch	function
(	O
pat	pointer
->	O
v	pointer
.	O
string	pointer
,	O
b	pointer
->	O
v	pointer
.	O
string	pointer
,	O
flags	int
)	O
==	O
0	int
;	O
case	O
GRECS_TYPE_LIST	int
:	O
return	O
_grecs_list_match	function
(	O
pat	pointer
,	O
b	pointer
,	O
flags	int
)	O
;	O
case	O
GRECS_TYPE_ARRAY	int
:	O
return	O
_grecs_array_match	function
(	O
pat	pointer
,	O
b	pointer
,	O
flags	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
grecs_match_buf	struct
{	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
int	O
argi	int
;	O
struct	O
grecs_value	struct
*	O
*	O
labelv	pointer
;	O
struct	O
grecs_node	struct
*	O
root	pointer
;	O
struct	O
grecs_node	struct
*	O
node	pointer
;	O
}	O
;	O
grecs_match_buf_t	pointer
grecs_match_buf_create	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
grecs_value	struct
*	O
*	O
labelv	pointer
)	O
{	O
int	O
i	long
;	O
struct	O
grecs_match_buf	struct
*	O
buf	pointer
=	O
grecs_zalloc	function
(	O
sizeof	O
(	O
*	O
buf	pointer
)	O
)	O
;	O
buf	pointer
->	O
argc	int
=	O
argc	int
;	O
buf	pointer
->	O
argv	pointer
=	O
argv	pointer
;	O
buf	pointer
->	O
labelv	pointer
=	O
labelv	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
buf	pointer
->	O
argc	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
ISWC	O
(	O
buf	pointer
->	O
argv	pointer
[	O
i	long
]	O
,	O
'*'	O
)	O
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
i	long
+	O
1	int
;	O
j	int
<	O
buf	pointer
->	O
argc	int
&&	O
ISWC	O
(	O
buf	pointer
->	O
argv	pointer
[	O
j	int
]	O
,	O
'*'	O
)	O
;	O
j	int
++	O
)	O
{	O
free	function
(	O
buf	pointer
->	O
argv	pointer
[	O
j	int
]	O
)	O
;	O
grecs_value_free_content	function
(	O
buf	pointer
->	O
labelv	pointer
[	O
i	long
]	O
)	O
;	O
}	O
j	int
-=	O
i	long
;	O
if	O
(	O
j	int
>	O
1	int
)	O
{	O
memmove	function
(	O
&	O
buf	pointer
->	O
argv	pointer
[	O
i	long
+	O
1	int
]	O
,	O
&	O
buf	pointer
->	O
argv	pointer
[	O
i	long
+	O
j	int
]	O
,	O
(	O
buf	pointer
->	O
argc	int
-	O
(	O
i	long
+	O
j	int
)	O
)	O
*	O
sizeof	O
(	O
buf	pointer
->	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
memmove	function
(	O
&	O
buf	pointer
->	O
labelv	pointer
[	O
i	long
+	O
1	int
]	O
,	O
&	O
buf	pointer
->	O
labelv	pointer
[	O
i	long
+	O
j	int
]	O
,	O
(	O
buf	pointer
->	O
argc	int
-	O
(	O
i	long
+	O
j	int
)	O
)	O
*	O
sizeof	O
(	O
buf	pointer
->	O
labelv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
buf	pointer
->	O
argc	int
-=	O
j	int
-	O
1	int
;	O
}	O
}	O
}	O
return	O
buf	pointer
;	O
}	O
size_t	long
grecs_match_buf_get_args	function
(	O
grecs_match_buf_t	pointer
buf	pointer
,	O
char	O
*	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argv	pointer
)	O
*	O
argv	pointer
=	O
buf	pointer
->	O
argv	pointer
;	O
return	O
buf	pointer
->	O
argc	int
;	O
}	O
struct	O
grecs_node	struct
*	O
grecs_match_buf_get_node	function
(	O
grecs_match_buf_t	pointer
buf	pointer
)	O
{	O
return	O
buf	pointer
->	O
node	pointer
;	O
}	O
struct	O
grecs_node	struct
*	O
grecs_match_buf_get_root	function
(	O
grecs_match_buf_t	pointer
buf	pointer
)	O
{	O
return	O
buf	pointer
->	O
root	pointer
;	O
}	O
void	O
grecs_match_buf_set_root	function
(	O
grecs_match_buf_t	pointer
buf	pointer
,	O
struct	O
grecs_node	struct
*	O
root	pointer
)	O
{	O
buf	pointer
->	O
root	pointer
=	O
root	pointer
;	O
}	O
static	O
void	O
grecs_match_buf_free_contents	function
(	O
struct	O
grecs_match_buf	struct
*	O
buf	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
buf	pointer
->	O
argc	int
;	O
i	long
++	O
)	O
{	O
free	function
(	O
buf	pointer
->	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
grecs_value_free	function
(	O
buf	pointer
->	O
labelv	pointer
[	O
i	long
]	O
)	O
;	O
}	O
free	function
(	O
buf	pointer
->	O
argv	pointer
)	O
;	O
free	function
(	O
buf	pointer
->	O
labelv	pointer
)	O
;	O
}	O
void	O
grecs_match_buf_free	function
(	O
struct	O
grecs_match_buf	struct
*	O
buf	pointer
)	O
{	O
if	O
(	O
buf	pointer
)	O
{	O
grecs_match_buf_free_contents	function
(	O
buf	pointer
)	O
;	O
free	function
(	O
buf	pointer
)	O
;	O
}	O
}	O
static	O
struct	O
grecs_value	struct
*	O
parse_label	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
struct	O
grecs_value	struct
*	O
val	pointer
=	O
NULL	O
;	O
size_t	long
i	long
;	O
struct	O
wordsplit	struct
ws	pointer
;	O
size_t	long
len	long
=	O
strlen	function
(	O
str	pointer
)	O
;	O
if	O
(	O
len	long
>	O
1	int
&&	O
str	pointer
[	O
0	int
]	O
==	O
'('	O
&&	O
str	pointer
[	O
len	long
-	O
1	int
]	O
==	O
')'	O
)	O
{	O
struct	O
grecs_list	struct
*	O
lst	pointer
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
","	pointer
;	O
if	O
(	O
wordsplit_len	function
(	O
str	pointer
+	O
1	int
,	O
len	long
-	O
2	int
,	O
&	O
ws	pointer
,	O
WRDSF_DEFFLAGS	O
|	O
WRDSF_DELIM	int
|	O
WRDSF_WS	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
lst	pointer
=	O
grecs_value_list_create	function
(	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	long
++	O
)	O
{	O
struct	O
grecs_value	struct
*	O
p	pointer
=	O
grecs_zalloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
type	int
=	O
GRECS_TYPE_STRING	int
;	O
p	pointer
->	O
v	pointer
.	O
string	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
;	O
grecs_list_append	function
(	O
lst	pointer
,	O
p	pointer
)	O
;	O
}	O
val	pointer
=	O
grecs_malloc	function
(	O
sizeof	O
(	O
*	O
val	pointer
)	O
)	O
;	O
val	pointer
->	O
type	int
=	O
GRECS_TYPE_LIST	int
;	O
val	pointer
->	O
v	pointer
.	O
list	pointer
=	O
lst	pointer
;	O
}	O
else	O
{	O
if	O
(	O
wordsplit	struct
(	O
str	pointer
,	O
&	O
ws	pointer
,	O
WRDSF_DEFFLAGS	O
)	O
)	O
return	O
NULL	O
;	O
val	pointer
=	O
grecs_zalloc	function
(	O
sizeof	O
(	O
*	O
val	pointer
)	O
)	O
;	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
==	O
1	int
)	O
{	O
val	pointer
->	O
type	int
=	O
GRECS_TYPE_STRING	int
;	O
val	pointer
->	O
v	pointer
.	O
string	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
;	O
}	O
else	O
{	O
val	pointer
->	O
type	int
=	O
GRECS_TYPE_ARRAY	int
;	O
val	pointer
->	O
v	pointer
.	O
arg	struct
.	O
c	long
=	O
ws	pointer
.	O
ws_wordc	long
;	O
val	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
=	O
grecs_calloc	function
(	O
ws	pointer
.	O
ws_wordc	long
,	O
sizeof	O
(	O
val	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	long
++	O
)	O
{	O
val	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
[	O
i	long
]	O
=	O
grecs_zalloc	function
(	O
sizeof	O
(	O
*	O
val	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
[	O
0	int
]	O
)	O
)	O
;	O
val	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
[	O
i	long
]	O
->	O
type	int
=	O
GRECS_TYPE_STRING	int
;	O
val	pointer
->	O
v	pointer
.	O
arg	struct
.	O
v	pointer
[	O
i	long
]	O
->	O
v	pointer
.	O
string	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
;	O
}	O
}	O
}	O
ws	pointer
.	O
ws_wordc	long
=	O
0	int
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
val	pointer
;	O
}	O
static	O
int	O
split_cfg_path	function
(	O
const	O
char	O
*	O
path	pointer
,	O
int	O
*	O
pargc	pointer
,	O
char	O
*	O
*	O
*	O
pargv	pointer
,	O
grecs_value_t	struct
*	O
*	O
*	O
pvalv	pointer
)	O
{	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
char	O
*	O
delim	pointer
=	O
"."	pointer
;	O
char	O
static_delim	array
[	O
2	int
]	O
=	O
{	O
0	int
,	O
0	int
}	O
;	O
if	O
(	O
path	pointer
[	O
0	int
]	O
==	O
'\\'	O
)	O
{	O
argv	pointer
=	O
calloc	function
(	O
2	int
,	O
sizeof	O
(	O
*	O
argv	pointer
)	O
)	O
;	O
if	O
(	O
!	O
argv	pointer
)	O
return	O
WRDSE_NOSPACE	int
;	O
argv	pointer
[	O
0	int
]	O
=	O
strdup	function
(	O
path	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
argv	pointer
[	O
0	int
]	O
)	O
{	O
free	function
(	O
argv	pointer
)	O
;	O
return	O
WRDSE_NOSPACE	int
;	O
}	O
argv	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
argc	int
=	O
1	int
;	O
}	O
else	O
{	O
int	O
rc	int
;	O
struct	O
wordsplit	struct
ws	pointer
;	O
if	O
(	O
strchr	function
(	O
"./:;,^~"	pointer
,	O
path	pointer
[	O
0	int
]	O
)	O
)	O
{	O
delim	pointer
=	O
static_delim	array
;	O
delim	pointer
[	O
0	int
]	O
=	O
path	pointer
[	O
0	int
]	O
;	O
path	pointer
++	O
;	O
}	O
ws	pointer
.	O
ws_delim	pointer
=	O
delim	pointer
;	O
rc	int
=	O
wordsplit	struct
(	O
path	pointer
,	O
&	O
ws	pointer
,	O
WRDSF_DELIM	int
|	O
WRDSF_DEFFLAGS	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
argc	int
=	O
ws	pointer
.	O
ws_wordc	long
;	O
argv	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
;	O
ws	pointer
.	O
ws_wordc	long
=	O
0	int
;	O
ws	pointer
.	O
ws_wordv	pointer
=	O
NULL	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
*	O
pargv	pointer
=	O
argv	pointer
;	O
*	O
pargc	pointer
=	O
argc	int
;	O
if	O
(	O
pvalv	pointer
)	O
{	O
int	O
i	long
;	O
grecs_value_t	struct
*	O
*	O
valv	pointer
;	O
valv	pointer
=	O
grecs_calloc	function
(	O
argc	int
,	O
sizeof	O
(	O
valv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	int
;	O
i	long
++	O
)	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
'='	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
*	O
p	pointer
++	O
=	O
0	int
;	O
valv	pointer
[	O
i	long
]	O
=	O
parse_label	function
(	O
p	pointer
)	O
;	O
}	O
}	O
*	O
pvalv	pointer
=	O
valv	pointer
;	O
}	O
return	O
0	int
;	O
}	O
enum	O
grecs_tree_recurse_res	enum
grecs_node_exact_match	function
(	O
enum	O
grecs_tree_recurse_op	enum
op	enum
,	O
struct	O
grecs_node	struct
*	O
node	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
match	int
=	O
0	int
;	O
struct	O
grecs_match_buf	struct
*	O
buf	pointer
=	O
data	pointer
;	O
if	O
(	O
node	pointer
->	O
type	int
==	O
grecs_node_root	int
)	O
return	O
grecs_tree_recurse_ok	int
;	O
if	O
(	O
op	enum
==	O
grecs_tree_recurse_post	int
)	O
{	O
if	O
(	O
buf	pointer
->	O
argi	int
==	O
0	int
)	O
return	O
grecs_tree_recurse_stop	int
;	O
--	O
buf	pointer
->	O
argi	int
;	O
return	O
grecs_tree_recurse_ok	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
buf	pointer
->	O
argv	pointer
[	O
buf	pointer
->	O
argi	int
]	O
,	O
node	pointer
->	O
ident	pointer
)	O
==	O
0	int
&&	O
(	O
!	O
buf	pointer
->	O
labelv	pointer
[	O
buf	pointer
->	O
argi	int
]	O
||	O
grecs_value_eq	function
(	O
buf	pointer
->	O
labelv	pointer
[	O
buf	pointer
->	O
argi	int
]	O
,	O
node	pointer
->	O
v	pointer
.	O
value	pointer
)	O
)	O
)	O
{	O
if	O
(	O
buf	pointer
->	O
argi	int
+	O
1	int
==	O
buf	pointer
->	O
argc	int
)	O
{	O
buf	pointer
->	O
node	pointer
=	O
node	pointer
;	O
return	O
grecs_tree_recurse_stop	int
;	O
}	O
match	int
=	O
1	int
;	O
}	O
if	O
(	O
match	int
)	O
{	O
if	O
(	O
op	enum
==	O
grecs_tree_recurse_pre	int
)	O
{	O
if	O
(	O
buf	pointer
->	O
argi	int
+	O
1	int
==	O
buf	pointer
->	O
argc	int
)	O
return	O
grecs_tree_recurse_skip	int
;	O
buf	pointer
->	O
argi	int
++	O
;	O
}	O
return	O
grecs_tree_recurse_ok	int
;	O
}	O
return	O
node	pointer
->	O
type	int
==	O
grecs_node_block	int
?	O
grecs_tree_recurse_skip	int
:	O
grecs_tree_recurse_ok	int
;	O
}	O
struct	O
grecs_node	struct
*	O
grecs_find_node	function
(	O
struct	O
grecs_node	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
path	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
grecs_match_buf	struct
buf	pointer
;	O
if	O
(	O
strcmp	function
(	O
path	pointer
,	O
"."	pointer
)	O
==	O
0	int
)	O
return	O
node	pointer
;	O
rc	int
=	O
split_cfg_path	function
(	O
path	pointer
,	O
&	O
buf	pointer
.	O
argc	int
,	O
&	O
buf	pointer
.	O
argv	pointer
,	O
&	O
buf	pointer
.	O
labelv	pointer
)	O
;	O
if	O
(	O
rc	int
||	O
!	O
buf	pointer
.	O
argc	int
)	O
return	O
NULL	O
;	O
buf	pointer
.	O
argi	int
=	O
0	int
;	O
buf	pointer
.	O
node	pointer
=	O
NULL	O
;	O
grecs_tree_recurse	function
(	O
node	pointer
,	O
grecs_node_exact_match	function
,	O
&	O
buf	pointer
)	O
;	O
grecs_match_buf_free_contents	function
(	O
&	O
buf	pointer
)	O
;	O
return	O
buf	pointer
.	O
node	pointer
;	O
}	O
static	O
void	O
fixup_loci	function
(	O
struct	O
grecs_node	struct
*	O
node	pointer
,	O
grecs_locus_t	struct
const	O
*	O
plocus	pointer
,	O
struct	O
grecs_locus_point	struct
const	O
*	O
endp	pointer
)	O
{	O
grecs_locus_t	struct
loc	pointer
=	O
*	O
plocus	pointer
;	O
for	O
(	O
;	O
node	pointer
;	O
node	pointer
=	O
node	pointer
->	O
down	pointer
)	O
{	O
node	pointer
->	O
idloc	struct
=	O
loc	pointer
;	O
node	pointer
->	O
locus	struct
=	O
loc	pointer
;	O
if	O
(	O
endp	pointer
)	O
node	pointer
->	O
locus	struct
.	O
end	struct
=	O
*	O
endp	pointer
;	O
}	O
}	O
struct	O
grecs_node	struct
*	O
grecs_node_from_path_locus	function
(	O
const	O
char	O
*	O
path	pointer
,	O
const	O
char	O
*	O
value	pointer
,	O
grecs_locus_t	struct
*	O
plocus	pointer
,	O
grecs_locus_t	struct
*	O
vallocus	pointer
)	O
{	O
int	O
rc	int
;	O
int	O
i	long
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
struct	O
grecs_node	struct
*	O
dn	int
=	O
NULL	O
;	O
rc	int
=	O
split_cfg_path	function
(	O
path	pointer
,	O
&	O
argc	int
,	O
&	O
argv	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
NULL	O
;	O
dn	int
=	O
grecs_node_create	function
(	O
grecs_node_stmt	int
,	O
NULL	O
)	O
;	O
dn	int
->	O
ident	pointer
=	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
;	O
if	O
(	O
value	pointer
)	O
{	O
struct	O
grecs_value	struct
*	O
gval	pointer
=	O
parse_label	function
(	O
value	pointer
)	O
;	O
if	O
(	O
vallocus	pointer
)	O
gval	pointer
->	O
locus	struct
=	O
*	O
vallocus	pointer
;	O
dn	int
->	O
v	pointer
.	O
value	pointer
=	O
gval	pointer
;	O
}	O
else	O
dn	int
->	O
v	pointer
.	O
value	pointer
=	O
NULL	O
;	O
for	O
(	O
i	long
=	O
argc	int
-	O
2	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
struct	O
grecs_value	struct
*	O
label	pointer
=	O
NULL	O
;	O
struct	O
grecs_node	struct
*	O
node	pointer
;	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
=	O
argv	pointer
[	O
i	long
]	O
;	O
do	O
{	O
p	pointer
=	O
strchr	function
(	O
q	pointer
,	O
'='	O
)	O
;	O
if	O
(	O
p	pointer
&&	O
p	pointer
>	O
argv	pointer
[	O
i	long
]	O
&&	O
p	pointer
[	O
-	O
1	int
]	O
!=	O
'\\'	O
)	O
{	O
*	O
p	pointer
++	O
=	O
0	int
;	O
label	pointer
=	O
parse_label	function
(	O
p	pointer
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
p	pointer
)	O
q	pointer
=	O
p	pointer
+	O
1	int
;	O
else	O
break	O
;	O
}	O
while	O
(	O
*	O
q	pointer
)	O
;	O
node	pointer
=	O
grecs_node_create	function
(	O
grecs_node_block	int
,	O
plocus	pointer
)	O
;	O
node	pointer
->	O
ident	pointer
=	O
argv	pointer
[	O
i	long
]	O
;	O
if	O
(	O
label	pointer
)	O
node	pointer
->	O
v	pointer
.	O
value	pointer
=	O
label	pointer
;	O
node	pointer
->	O
down	pointer
=	O
dn	int
;	O
if	O
(	O
dn	int
)	O
dn	int
->	O
up	pointer
=	O
node	pointer
;	O
dn	int
=	O
node	pointer
;	O
}	O
if	O
(	O
plocus	pointer
)	O
fixup_loci	function
(	O
dn	int
,	O
plocus	pointer
,	O
vallocus	pointer
?	O
&	O
vallocus	pointer
->	O
end	struct
:	O
NULL	O
)	O
;	O
free	function
(	O
argv	pointer
)	O
;	O
return	O
dn	int
;	O
}	O
struct	O
grecs_node	struct
*	O
grecs_node_from_path	function
(	O
const	O
char	O
*	O
path	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
return	O
grecs_node_from_path_locus	function
(	O
path	pointer
,	O
value	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
is_root	function
(	O
struct	O
grecs_match_buf	struct
*	O
buf	pointer
,	O
struct	O
grecs_node	struct
*	O
node	pointer
)	O
{	O
return	O
(	O
buf	pointer
->	O
root	pointer
==	O
node	pointer
||	O
node	pointer
->	O
type	int
==	O
grecs_node_root	int
)	O
;	O
}	O
static	O
int	O
grecs_match	function
(	O
struct	O
grecs_match_buf	struct
*	O
buf	pointer
)	O
{	O
struct	O
grecs_node	struct
*	O
node	pointer
;	O
int	O
wcard	int
=	O
0	int
;	O
buf	pointer
->	O
argi	int
=	O
buf	pointer
->	O
argc	int
-	O
1	int
;	O
node	pointer
=	O
buf	pointer
->	O
node	pointer
;	O
while	O
(	O
buf	pointer
->	O
argi	int
>=	O
0	int
)	O
{	O
if	O
(	O
ISWC	O
(	O
buf	pointer
->	O
argv	pointer
[	O
buf	pointer
->	O
argi	int
]	O
,	O
'*'	O
)	O
)	O
{	O
wcard	int
=	O
1	int
;	O
if	O
(	O
buf	pointer
->	O
argi	int
--	O
==	O
0	int
)	O
return	O
1	int
;	O
continue	O
;	O
}	O
if	O
(	O
(	O
ISWC	O
(	O
buf	pointer
->	O
argv	pointer
[	O
buf	pointer
->	O
argi	int
]	O
,	O
'%'	O
)	O
||	O
strcmp	function
(	O
buf	pointer
->	O
argv	pointer
[	O
buf	pointer
->	O
argi	int
]	O
,	O
node	pointer
->	O
ident	pointer
)	O
==	O
0	int
)	O
&&	O
(	O
!	O
buf	pointer
->	O
labelv	pointer
[	O
buf	pointer
->	O
argi	int
]	O
||	O
grecs_value_match	function
(	O
buf	pointer
->	O
labelv	pointer
[	O
buf	pointer
->	O
argi	int
]	O
,	O
node	pointer
->	O
v	pointer
.	O
value	pointer
,	O
0	int
)	O
)	O
)	O
{	O
wcard	int
=	O
0	int
;	O
node	pointer
=	O
node	pointer
->	O
up	pointer
;	O
if	O
(	O
buf	pointer
->	O
argi	int
--	O
==	O
0	int
)	O
return	O
is_root	function
(	O
buf	pointer
,	O
node	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wcard	int
)	O
return	O
0	int
;	O
else	O
node	pointer
=	O
node	pointer
->	O
up	pointer
;	O
if	O
(	O
is_root	function
(	O
buf	pointer
,	O
node	pointer
)	O
)	O
return	O
ISWC	O
(	O
buf	pointer
->	O
argv	pointer
[	O
buf	pointer
->	O
argi	int
]	O
,	O
'*'	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
grecs_node	struct
*	O
grecs_match_next	function
(	O
struct	O
grecs_match_buf	struct
*	O
buf	pointer
)	O
{	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
NULL	O
;	O
while	O
(	O
(	O
buf	pointer
->	O
node	pointer
=	O
grecs_next_node	function
(	O
buf	pointer
->	O
node	pointer
)	O
)	O
)	O
if	O
(	O
grecs_match	function
(	O
buf	pointer
)	O
)	O
break	O
;	O
return	O
buf	pointer
->	O
node	pointer
;	O
}	O
struct	O
grecs_node	struct
*	O
grecs_match_buf_first	function
(	O
struct	O
grecs_match_buf	struct
*	O
buf	pointer
,	O
struct	O
grecs_node	struct
*	O
tree	pointer
)	O
{	O
struct	O
grecs_node	struct
*	O
node	pointer
;	O
buf	pointer
->	O
argi	int
=	O
0	int
;	O
buf	pointer
->	O
root	pointer
=	O
tree	pointer
;	O
buf	pointer
->	O
node	pointer
=	O
grecs_tree_first_node	function
(	O
tree	pointer
)	O
;	O
if	O
(	O
!	O
buf	pointer
->	O
node	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
grecs_match	function
(	O
buf	pointer
)	O
)	O
node	pointer
=	O
buf	pointer
->	O
node	pointer
;	O
else	O
node	pointer
=	O
grecs_match_next	function
(	O
buf	pointer
)	O
;	O
return	O
node	pointer
;	O
}	O
struct	O
grecs_node	struct
*	O
grecs_match_first	function
(	O
struct	O
grecs_node	struct
*	O
tree	pointer
,	O
const	O
char	O
*	O
pattern	pointer
,	O
struct	O
grecs_match_buf	struct
*	O
*	O
pbuf	pointer
)	O
{	O
struct	O
grecs_node	struct
*	O
node	pointer
;	O
struct	O
grecs_match_buf	struct
*	O
buf	pointer
;	O
if	O
(	O
strcmp	function
(	O
pattern	pointer
,	O
"."	pointer
)	O
==	O
0	int
)	O
{	O
*	O
pbuf	pointer
=	O
NULL	O
;	O
return	O
tree	pointer
;	O
}	O
buf	pointer
=	O
grecs_zalloc	function
(	O
sizeof	O
(	O
*	O
buf	pointer
)	O
)	O
;	O
if	O
(	O
split_cfg_path	function
(	O
pattern	pointer
,	O
&	O
buf	pointer
->	O
argc	int
,	O
&	O
buf	pointer
->	O
argv	pointer
,	O
&	O
buf	pointer
->	O
labelv	pointer
)	O
)	O
{	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
node	pointer
=	O
grecs_match_buf_first	function
(	O
buf	pointer
,	O
tree	pointer
)	O
;	O
if	O
(	O
node	pointer
)	O
*	O
pbuf	pointer
=	O
buf	pointer
;	O
else	O
{	O
grecs_match_buf_free	function
(	O
buf	pointer
)	O
;	O
*	O
pbuf	pointer
=	O
NULL	O
;	O
}	O
return	O
node	pointer
;	O
}	O
