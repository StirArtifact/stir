static	O
void	O
sha3_absorb	function
(	O
struct	O
sha3_state	struct
*	O
state	pointer
,	O
unsigned	O
length	long
,	O
const	O
uint8_t	char
*	O
data	pointer
)	O
{	O
assert	O
(	O
(	O
length	long
&	O
7	int
)	O
==	O
0	int
)	O
;	O
memxor	O
(	O
state	pointer
->	O
a	array
,	O
data	pointer
,	O
length	long
)	O
;	O
sha3_permute	O
(	O
state	pointer
)	O
;	O
}	O
unsigned	O
_sha3_update	O
(	O
struct	O
sha3_state	struct
*	O
state	pointer
,	O
unsigned	O
block_size	int
,	O
uint8_t	char
*	O
block	array
,	O
unsigned	O
pos	int
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	pointer
)	O
{	O
if	O
(	O
pos	int
>	O
0	int
)	O
{	O
unsigned	O
left	int
=	O
block_size	int
-	O
pos	int
;	O
if	O
(	O
length	long
<	O
left	int
)	O
{	O
memcpy	function
(	O
block	array
+	O
pos	int
,	O
data	pointer
,	O
length	long
)	O
;	O
return	O
pos	int
+	O
length	long
;	O
}	O
else	O
{	O
memcpy	function
(	O
block	array
+	O
pos	int
,	O
data	pointer
,	O
left	int
)	O
;	O
data	pointer
+=	O
left	int
;	O
length	long
-=	O
left	int
;	O
sha3_absorb	function
(	O
state	pointer
,	O
block_size	int
,	O
block	array
)	O
;	O
}	O
}	O
for	O
(	O
;	O
length	long
>=	O
block_size	int
;	O
length	long
-=	O
block_size	int
,	O
data	pointer
+=	O
block_size	int
)	O
sha3_absorb	function
(	O
state	pointer
,	O
block_size	int
,	O
data	pointer
)	O
;	O
memcpy	function
(	O
block	array
,	O
data	pointer
,	O
length	long
)	O
;	O
return	O
length	long
;	O
}	O
void	O
_sha3_pad	O
(	O
struct	O
sha3_state	struct
*	O
state	pointer
,	O
unsigned	O
block_size	int
,	O
uint8_t	char
*	O
block	array
,	O
unsigned	O
pos	int
)	O
{	O
assert	O
(	O
pos	int
<	O
block_size	int
)	O
;	O
block	array
[	O
pos	int
++	O
]	O
=	O
6	int
;	O
memset	function
(	O
block	array
+	O
pos	int
,	O
0	int
,	O
block_size	int
-	O
pos	int
)	O
;	O
block	array
[	O
block_size	int
-	O
1	int
]	O
|=	O
0x80	int
;	O
sha3_absorb	function
(	O
state	pointer
,	O
block_size	int
,	O
block	array
)	O
;	O
}	O
