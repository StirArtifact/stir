double	O
gsl_ran_exppow	function
(	O
const	O
gsl_rng	struct
*	O
r	pointer
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
if	O
(	O
b	double
<	O
1	int
||	O
b	double
>	O
4	int
)	O
{	O
double	O
u	pointer
=	O
gsl_rng_uniform	function
(	O
r	pointer
)	O
;	O
double	O
v	pointer
=	O
gsl_ran_gamma	function
(	O
r	pointer
,	O
1	int
/	O
b	double
,	O
1.0	int
)	O
;	O
double	O
z	double
=	O
a	double
*	O
pow	function
(	O
v	pointer
,	O
1	int
/	O
b	double
)	O
;	O
if	O
(	O
u	pointer
>	O
0.5	int
)	O
{	O
return	O
z	double
;	O
}	O
else	O
{	O
return	O
-	O
z	double
;	O
}	O
}	O
else	O
if	O
(	O
b	double
==	O
1	int
)	O
{	O
return	O
gsl_ran_laplace	function
(	O
r	pointer
,	O
a	double
)	O
;	O
}	O
else	O
if	O
(	O
b	double
<	O
2	int
)	O
{	O
double	O
x	double
,	O
h	double
,	O
u	pointer
;	O
double	O
B	pointer
=	O
pow	function
(	O
1	int
/	O
b	double
,	O
1	int
/	O
b	double
)	O
;	O
do	O
{	O
x	double
=	O
gsl_ran_laplace	function
(	O
r	pointer
,	O
B	pointer
)	O
;	O
u	pointer
=	O
gsl_rng_uniform_pos	function
(	O
r	pointer
)	O
;	O
h	double
=	O
-	O
pow	function
(	O
fabs	function
(	O
x	double
)	O
,	O
b	double
)	O
+	O
fabs	function
(	O
x	double
)	O
/	O
B	pointer
-	O
1	int
+	O
(	O
1	int
/	O
b	double
)	O
;	O
}	O
while	O
(	O
log	function
(	O
u	pointer
)	O
>	O
h	double
)	O
;	O
return	O
a	double
*	O
x	double
;	O
}	O
else	O
if	O
(	O
b	double
==	O
2	int
)	O
{	O
return	O
gsl_ran_gaussian	function
(	O
r	pointer
,	O
a	double
/	O
sqrt	function
(	O
2.0	int
)	O
)	O
;	O
}	O
else	O
{	O
double	O
x	double
,	O
h	double
,	O
u	pointer
;	O
double	O
B	pointer
=	O
pow	function
(	O
1	int
/	O
b	double
,	O
1	int
/	O
b	double
)	O
;	O
do	O
{	O
x	double
=	O
gsl_ran_gaussian	function
(	O
r	pointer
,	O
B	pointer
)	O
;	O
u	pointer
=	O
gsl_rng_uniform_pos	function
(	O
r	pointer
)	O
;	O
h	double
=	O
-	O
pow	function
(	O
fabs	function
(	O
x	double
)	O
,	O
b	double
)	O
+	O
(	O
x	double
*	O
x	double
)	O
/	O
(	O
2	int
*	O
B	pointer
*	O
B	pointer
)	O
+	O
(	O
1	int
/	O
b	double
)	O
-	O
0.5	int
;	O
}	O
while	O
(	O
log	function
(	O
u	pointer
)	O
>	O
h	double
)	O
;	O
return	O
a	double
*	O
x	double
;	O
}	O
}	O
double	O
gsl_ran_exppow_pdf	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
)	O
{	O
double	O
p	int
;	O
double	O
lngamma	double
=	O
gsl_sf_lngamma	function
(	O
1	int
+	O
1	int
/	O
b	double
)	O
;	O
p	int
=	O
(	O
1	int
/	O
(	O
2	int
*	O
a	double
)	O
)	O
*	O
exp	function
(	O
-	O
pow	function
(	O
fabs	function
(	O
x	double
/	O
a	double
)	O
,	O
b	double
)	O
-	O
lngamma	double
)	O
;	O
return	O
p	int
;	O
}	O
