static	O
void	O
_mapfile_done	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_mapfile_stream	struct
*	O
mfs	pointer
=	O
(	O
struct	O
_mu_mapfile_stream	struct
*	O
)	O
stream	pointer
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
!=	O
MAP_FAILED	O
)	O
{	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
)	O
munmap	function
(	O
mfs	pointer
->	O
ptr	pointer
,	O
mfs	pointer
->	O
size	long
)	O
;	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
}	O
free	function
(	O
mfs	pointer
->	O
filename	pointer
)	O
;	O
}	O
static	O
int	O
_mapfile_read	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
char	O
*	O
optr	pointer
,	O
size_t	long
osize	long
,	O
size_t	long
*	O
nbytes	pointer
)	O
{	O
struct	O
_mu_mapfile_stream	struct
*	O
mfs	pointer
=	O
(	O
struct	O
_mu_mapfile_stream	struct
*	O
)	O
stream	pointer
;	O
size_t	long
n	int
=	O
0	int
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
==	O
MAP_FAILED	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mfs	pointer
->	O
offset	long
<	O
(	O
mu_off_t	long
)	O
mfs	pointer
->	O
size	long
)	O
{	O
n	int
=	O
(	O
(	O
mfs	pointer
->	O
offset	long
+	O
osize	long
)	O
>	O
mfs	pointer
->	O
size	long
)	O
?	O
mfs	pointer
->	O
size	long
-	O
mfs	pointer
->	O
offset	long
:	O
osize	long
;	O
memcpy	function
(	O
optr	pointer
,	O
mfs	pointer
->	O
ptr	pointer
+	O
mfs	pointer
->	O
offset	long
,	O
n	int
)	O
;	O
mfs	pointer
->	O
offset	long
+=	O
n	int
;	O
}	O
if	O
(	O
nbytes	pointer
)	O
*	O
nbytes	pointer
=	O
n	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mapfile_write	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
char	O
*	O
iptr	pointer
,	O
size_t	long
isize	long
,	O
size_t	long
*	O
nbytes	pointer
)	O
{	O
struct	O
_mu_mapfile_stream	struct
*	O
mfs	pointer
=	O
(	O
struct	O
_mu_mapfile_stream	struct
*	O
)	O
stream	pointer
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
==	O
MAP_FAILED	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
(	O
mfs	pointer
->	O
flags	int
&	O
PROT_WRITE	int
)	O
)	O
return	O
EACCES	int
;	O
if	O
(	O
mfs	pointer
->	O
size	long
<	O
(	O
mfs	pointer
->	O
offset	long
+	O
isize	long
)	O
)	O
{	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
&&	O
munmap	function
(	O
mfs	pointer
->	O
ptr	pointer
,	O
mfs	pointer
->	O
size	long
)	O
!=	O
0	int
)	O
{	O
int	O
err	int
=	O
errno	O
;	O
mfs	pointer
->	O
ptr	pointer
=	O
MAP_FAILED	O
;	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
return	O
err	int
;	O
}	O
if	O
(	O
ftruncate	function
(	O
mfs	pointer
->	O
fd	int
,	O
mfs	pointer
->	O
offset	long
+	O
isize	long
)	O
!=	O
0	int
)	O
return	O
errno	O
;	O
mfs	pointer
->	O
ptr	pointer
=	O
mmap	function
(	O
0	int
,	O
mfs	pointer
->	O
offset	long
+	O
isize	long
,	O
mfs	pointer
->	O
flags	int
,	O
MAP_SHARED	int
,	O
mfs	pointer
->	O
fd	int
,	O
0	int
)	O
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
==	O
MAP_FAILED	O
)	O
{	O
int	O
err	int
=	O
errno	O
;	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
return	O
err	int
;	O
}	O
mfs	pointer
->	O
size	long
=	O
mfs	pointer
->	O
offset	long
+	O
isize	long
;	O
}	O
if	O
(	O
isize	long
)	O
{	O
memcpy	function
(	O
mfs	pointer
->	O
ptr	pointer
+	O
mfs	pointer
->	O
offset	long
,	O
iptr	pointer
,	O
isize	long
)	O
;	O
mfs	pointer
->	O
offset	long
+=	O
isize	long
;	O
}	O
if	O
(	O
nbytes	pointer
)	O
*	O
nbytes	pointer
=	O
isize	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mapfile_truncate	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_off_t	long
len	long
)	O
{	O
struct	O
_mu_mapfile_stream	struct
*	O
mfs	pointer
=	O
(	O
struct	O
_mu_mapfile_stream	struct
*	O
)	O
stream	pointer
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
==	O
MAP_FAILED	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
&&	O
munmap	function
(	O
mfs	pointer
->	O
ptr	pointer
,	O
mfs	pointer
->	O
size	long
)	O
!=	O
0	int
)	O
{	O
int	O
err	int
=	O
errno	O
;	O
mfs	pointer
->	O
ptr	pointer
=	O
MAP_FAILED	O
;	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
return	O
err	int
;	O
}	O
if	O
(	O
ftruncate	function
(	O
mfs	pointer
->	O
fd	int
,	O
len	long
)	O
!=	O
0	int
)	O
return	O
errno	O
;	O
mfs	pointer
->	O
ptr	pointer
=	O
len	long
?	O
mmap	function
(	O
0	int
,	O
len	long
,	O
mfs	pointer
->	O
flags	int
,	O
MAP_SHARED	int
,	O
mfs	pointer
->	O
fd	int
,	O
0	int
)	O
:	O
NULL	O
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
==	O
MAP_FAILED	O
)	O
{	O
int	O
err	int
=	O
errno	O
;	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
return	O
err	int
;	O
}	O
mfs	pointer
->	O
size	long
=	O
len	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mapfile_size	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_mu_mapfile_stream	struct
*	O
mfs	pointer
=	O
(	O
struct	O
_mu_mapfile_stream	struct
*	O
)	O
stream	pointer
;	O
struct	O
stat	struct
stbuf	struct
;	O
int	O
err	int
=	O
0	int
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
==	O
MAP_FAILED	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
&&	O
(	O
mfs	pointer
->	O
flags	int
&	O
PROT_WRITE	int
)	O
)	O
msync	function
(	O
mfs	pointer
->	O
ptr	pointer
,	O
mfs	pointer
->	O
size	long
,	O
MS_SYNC	int
)	O
;	O
if	O
(	O
fstat	function
(	O
mfs	pointer
->	O
fd	int
,	O
&	O
stbuf	struct
)	O
!=	O
0	int
)	O
return	O
errno	O
;	O
if	O
(	O
mfs	pointer
->	O
size	long
!=	O
(	O
size_t	long
)	O
stbuf	struct
.	O
st_size	long
)	O
{	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
)	O
err	int
=	O
munmap	function
(	O
mfs	pointer
->	O
ptr	pointer
,	O
mfs	pointer
->	O
size	long
)	O
;	O
if	O
(	O
err	int
==	O
0	int
)	O
{	O
mfs	pointer
->	O
size	long
=	O
stbuf	struct
.	O
st_size	long
;	O
if	O
(	O
mfs	pointer
->	O
size	long
)	O
{	O
mfs	pointer
->	O
ptr	pointer
=	O
mmap	function
(	O
0	int
,	O
mfs	pointer
->	O
size	long
,	O
mfs	pointer
->	O
flags	int
,	O
MAP_SHARED	int
,	O
mfs	pointer
->	O
fd	int
,	O
0	int
)	O
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
==	O
MAP_FAILED	O
)	O
err	int
=	O
errno	O
;	O
}	O
else	O
mfs	pointer
->	O
ptr	pointer
=	O
NULL	O
;	O
}	O
else	O
err	int
=	O
errno	O
;	O
}	O
if	O
(	O
err	int
!=	O
0	int
)	O
{	O
mfs	pointer
->	O
ptr	pointer
=	O
MAP_FAILED	O
;	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
mfs	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
psize	pointer
)	O
*	O
psize	pointer
=	O
stbuf	struct
.	O
st_size	long
;	O
}	O
return	O
err	int
;	O
}	O
static	O
int	O
_mapfile_flush	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_mapfile_stream	struct
*	O
mfs	pointer
=	O
(	O
struct	O
_mu_mapfile_stream	struct
*	O
)	O
stream	pointer
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
!=	O
MAP_FAILED	O
&&	O
mfs	pointer
->	O
ptr	pointer
!=	O
NULL	O
&&	O
(	O
mfs	pointer
->	O
flags	int
&	O
PROT_WRITE	int
)	O
)	O
return	O
msync	function
(	O
mfs	pointer
->	O
ptr	pointer
,	O
mfs	pointer
->	O
size	long
,	O
MS_SYNC	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mapfile_ioctl	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
code	int
,	O
int	O
opcode	int
,	O
void	O
*	O
ptr	pointer
)	O
{	O
struct	O
_mu_mapfile_stream	struct
*	O
mfs	pointer
=	O
(	O
struct	O
_mu_mapfile_stream	struct
*	O
)	O
str	pointer
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
MU_IOCTL_TRANSPORT	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
mu_transport_t	pointer
*	O
ptrans	pointer
=	O
ptr	pointer
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
ptrans	pointer
[	O
0	int
]	O
=	O
(	O
mu_transport_t	pointer
)	O
(	O
intptr_t	long
)	O
mfs	pointer
->	O
fd	int
;	O
ptrans	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
return	O
ENOSYS	int
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_TRANSPORT_BUFFER	int
:	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
struct	O
mu_buffer_query	struct
*	O
qp	pointer
=	O
ptr	pointer
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
return	O
mu_stream_get_buffer	function
(	O
str	pointer
,	O
qp	pointer
)	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
return	O
mu_stream_set_buffer	function
(	O
str	pointer
,	O
qp	pointer
->	O
buftype	enum
,	O
qp	pointer
->	O
bufsize	long
)	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
}	O
break	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_mapfile_close	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_mapfile_stream	struct
*	O
mfs	pointer
=	O
(	O
struct	O
_mu_mapfile_stream	struct
*	O
)	O
stream	pointer
;	O
int	O
err	int
=	O
0	int
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
!=	O
MAP_FAILED	O
)	O
{	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
&&	O
munmap	function
(	O
mfs	pointer
->	O
ptr	pointer
,	O
mfs	pointer
->	O
size	long
)	O
!=	O
0	int
)	O
err	int
=	O
errno	O
;	O
if	O
(	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
!=	O
0	int
)	O
err	int
=	O
errno	O
;	O
mfs	pointer
->	O
ptr	pointer
=	O
MAP_FAILED	O
;	O
mfs	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
}	O
return	O
err	int
;	O
}	O
static	O
int	O
_mapfile_open	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
_mu_mapfile_stream	struct
*	O
mfs	pointer
=	O
(	O
struct	O
_mu_mapfile_stream	struct
*	O
)	O
stream	pointer
;	O
int	O
mflag	int
,	O
flg	int
;	O
struct	O
stat	struct
st	pointer
;	O
char	O
*	O
filename	pointer
=	O
mfs	pointer
->	O
filename	pointer
;	O
int	O
flags	int
;	O
mu_stream_get_flags	function
(	O
stream	pointer
,	O
&	O
flags	int
)	O
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
!=	O
MAP_FAILED	O
)	O
{	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
)	O
munmap	function
(	O
mfs	pointer
->	O
ptr	pointer
,	O
mfs	pointer
->	O
size	long
)	O
;	O
mfs	pointer
->	O
ptr	pointer
=	O
MAP_FAILED	O
;	O
}	O
if	O
(	O
mfs	pointer
->	O
fd	int
!=	O
-	O
1	int
)	O
{	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
mfs	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
flags	int
&	O
MU_STREAM_RDWR	O
)	O
==	O
MU_STREAM_RDWR	O
)	O
{	O
mflag	int
=	O
PROT_READ	int
|	O
PROT_WRITE	int
;	O
flg	int
=	O
O_RDWR	int
;	O
}	O
else	O
if	O
(	O
flags	int
&	O
MU_STREAM_WRITE	int
)	O
{	O
mflag	int
=	O
PROT_WRITE	int
;	O
flg	int
=	O
O_WRONLY	int
;	O
}	O
else	O
if	O
(	O
flags	int
&	O
MU_STREAM_CREAT	int
)	O
return	O
ENOSYS	int
;	O
else	O
{	O
mflag	int
=	O
PROT_READ	int
;	O
flg	int
=	O
O_RDONLY	int
;	O
}	O
mfs	pointer
->	O
fd	int
=	O
open	function
(	O
filename	pointer
,	O
flg	int
)	O
;	O
if	O
(	O
mfs	pointer
->	O
fd	int
<	O
0	int
)	O
return	O
errno	O
;	O
if	O
(	O
fstat	function
(	O
mfs	pointer
->	O
fd	int
,	O
&	O
st	pointer
)	O
!=	O
0	int
)	O
{	O
int	O
err	int
=	O
errno	O
;	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
return	O
err	int
;	O
}	O
mfs	pointer
->	O
size	long
=	O
st	pointer
.	O
st_size	long
;	O
if	O
(	O
mfs	pointer
->	O
size	long
)	O
{	O
mfs	pointer
->	O
ptr	pointer
=	O
mmap	function
(	O
0	int
,	O
mfs	pointer
->	O
size	long
,	O
mflag	int
,	O
MAP_SHARED	int
,	O
mfs	pointer
->	O
fd	int
,	O
0	int
)	O
;	O
if	O
(	O
mfs	pointer
->	O
ptr	pointer
==	O
MAP_FAILED	O
)	O
{	O
int	O
err	int
=	O
errno	O
;	O
close	function
(	O
mfs	pointer
->	O
fd	int
)	O
;	O
mfs	pointer
->	O
ptr	pointer
=	O
MAP_FAILED	O
;	O
return	O
err	int
;	O
}	O
}	O
else	O
mfs	pointer
->	O
ptr	pointer
=	O
NULL	O
;	O
mfs	pointer
->	O
flags	int
=	O
mflag	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mapfile_seek	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
mu_off_t	long
off	long
,	O
mu_off_t	long
*	O
presult	pointer
)	O
{	O
struct	O
_mu_mapfile_stream	struct
*	O
mfs	pointer
=	O
(	O
struct	O
_mu_mapfile_stream	struct
*	O
)	O
str	pointer
;	O
if	O
(	O
off	long
<	O
0	int
||	O
off	long
>	O
mfs	pointer
->	O
size	long
)	O
return	O
ESPIPE	int
;	O
mfs	pointer
->	O
offset	long
=	O
off	long
;	O
*	O
presult	pointer
=	O
off	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_mapfile_stream_create	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
stream	pointer
;	O
struct	O
_mu_mapfile_stream	struct
*	O
str	pointer
=	O
(	O
struct	O
_mu_mapfile_stream	struct
*	O
)	O
_mu_stream_create	function
(	O
sizeof	O
(	O
*	O
str	pointer
)	O
,	O
flags	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
!	O
str	pointer
)	O
return	O
ENOMEM	int
;	O
str	pointer
->	O
filename	pointer
=	O
mu_strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
str	pointer
->	O
filename	pointer
)	O
{	O
free	function
(	O
str	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
str	pointer
->	O
fd	int
=	O
-	O
1	int
;	O
str	pointer
->	O
ptr	pointer
=	O
MAP_FAILED	O
;	O
str	pointer
->	O
stream	pointer
.	O
open	function
=	O
_mapfile_open	function
;	O
str	pointer
->	O
stream	pointer
.	O
close	function
=	O
_mapfile_close	function
;	O
str	pointer
->	O
stream	pointer
.	O
ctl	pointer
=	O
_mapfile_ioctl	function
;	O
str	pointer
->	O
stream	pointer
.	O
read	function
=	O
_mapfile_read	function
;	O
str	pointer
->	O
stream	pointer
.	O
write	function
=	O
_mapfile_write	function
;	O
str	pointer
->	O
stream	pointer
.	O
truncate	function
=	O
_mapfile_truncate	function
;	O
str	pointer
->	O
stream	pointer
.	O
size	long
=	O
_mapfile_size	function
;	O
str	pointer
->	O
stream	pointer
.	O
flush	pointer
=	O
_mapfile_flush	function
;	O
str	pointer
->	O
stream	pointer
.	O
done	pointer
=	O
_mapfile_done	function
;	O
str	pointer
->	O
stream	pointer
.	O
seek	pointer
=	O
_mapfile_seek	function
;	O
stream	pointer
=	O
(	O
mu_stream_t	pointer
)	O
str	pointer
;	O
rc	int
=	O
mu_stream_open	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
else	O
*	O
pstream	pointer
=	O
stream	pointer
;	O
return	O
rc	int
;	O
}	O
