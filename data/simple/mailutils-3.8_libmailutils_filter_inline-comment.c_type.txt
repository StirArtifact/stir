enum	O
ilcmt_state	enum
{	O
ilcmt_initial	int
,	O
ilcmt_newline	int
,	O
ilcmt_copy	int
,	O
ilcmt_comment	int
,	O
ilcmt_partial	int
,	O
ilcmt_comment_ws	int
,	O
ilcmt_ws	int
,	O
ilcmt_rollback	int
,	O
ilcmt_rollback_ws	int
}	O
;	O
struct	O
ilcmt_data	struct
{	O
enum	O
ilcmt_state	enum
state	pointer
;	O
char	O
*	O
comment	pointer
;	O
size_t	long
length	long
;	O
int	O
flags	int
;	O
char	O
*	O
line_info_starter	pointer
;	O
unsigned	O
long	O
line_number	long
;	O
char	O
sbuf	array
[	O
3	int
]	O
;	O
char	O
*	O
buf	pointer
;	O
size_t	long
size	long
;	O
size_t	long
level	long
;	O
char	O
*	O
rollback_buffer	pointer
;	O
size_t	long
rollback_size	long
;	O
size_t	long
rollback_index	long
;	O
}	O
;	O
static	O
int	O
ilcmt_save	function
(	O
struct	O
ilcmt_data	struct
*	O
pd	pointer
,	O
int	O
c	int
)	O
{	O
if	O
(	O
pd	pointer
->	O
level	long
==	O
pd	pointer
->	O
size	long
)	O
{	O
size_t	long
nsz	long
;	O
char	O
*	O
np	pointer
;	O
if	O
(	O
pd	pointer
->	O
size	long
==	O
0	int
)	O
nsz	long
=	O
ILCMT_BUF_INIT	int
;	O
else	O
nsz	long
=	O
pd	pointer
->	O
size	long
+	O
ILCMT_BUF_INCR	int
;	O
np	pointer
=	O
realloc	function
(	O
pd	pointer
->	O
buf	pointer
,	O
nsz	long
)	O
;	O
if	O
(	O
!	O
np	pointer
)	O
return	O
1	int
;	O
pd	pointer
->	O
buf	pointer
=	O
np	pointer
;	O
pd	pointer
->	O
size	long
=	O
nsz	long
;	O
}	O
pd	pointer
->	O
buf	pointer
[	O
pd	pointer
->	O
level	long
++	O
]	O
=	O
c	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
_ilcmt_free	function
(	O
struct	O
ilcmt_data	struct
*	O
pd	pointer
)	O
{	O
if	O
(	O
!	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_COMMENT_STATIC	int
)	O
)	O
free	function
(	O
pd	pointer
->	O
comment	pointer
)	O
;	O
if	O
(	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_LINE_INFO	int
)	O
&&	O
!	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_LINE_INFO_STATIC	int
)	O
)	O
free	function
(	O
pd	pointer
->	O
line_info_starter	pointer
)	O
;	O
free	function
(	O
pd	pointer
->	O
buf	pointer
)	O
;	O
}	O
static	O
void	O
init_rollback	function
(	O
struct	O
ilcmt_data	struct
*	O
pd	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
)	O
{	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_rollback	int
;	O
pd	pointer
->	O
rollback_buffer	pointer
=	O
buf	pointer
;	O
pd	pointer
->	O
rollback_size	long
=	O
size	long
;	O
pd	pointer
->	O
rollback_index	long
=	O
0	int
;	O
}	O
static	O
enum	O
mu_filter_result	enum
_ilcmt_decoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
struct	O
ilcmt_data	struct
*	O
pd	pointer
=	O
xd	pointer
;	O
const	O
unsigned	O
char	O
*	O
iptr	pointer
,	O
*	O
iend	pointer
;	O
char	O
*	O
optr	pointer
,	O
*	O
oend	pointer
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_initial	int
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
_ilcmt_free	function
(	O
pd	pointer
)	O
;	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
iend	pointer
=	O
iptr	pointer
+	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
oend	pointer
=	O
optr	pointer
+	O
iobuf	pointer
->	O
osize	long
;	O
while	O
(	O
iptr	pointer
<	O
iend	pointer
&&	O
optr	pointer
<	O
oend	pointer
)	O
{	O
switch	O
(	O
pd	pointer
->	O
state	pointer
)	O
{	O
case	O
ilcmt_initial	int
:	O
case	O
ilcmt_newline	int
:	O
if	O
(	O
*	O
iptr	pointer
==	O
*	O
pd	pointer
->	O
comment	pointer
)	O
{	O
iptr	pointer
++	O
;	O
pd	pointer
->	O
level	long
=	O
1	int
;	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_partial	int
;	O
}	O
else	O
if	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_EMIT_LINE_INFO	int
)	O
{	O
mu_asnprintf	function
(	O
&	O
pd	pointer
->	O
buf	pointer
,	O
&	O
pd	pointer
->	O
size	long
,	O
"%s %lu\n"	pointer
,	O
pd	pointer
->	O
line_info_starter	pointer
,	O
pd	pointer
->	O
line_number	long
)	O
;	O
init_rollback	function
(	O
pd	pointer
,	O
pd	pointer
->	O
buf	pointer
,	O
strlen	function
(	O
pd	pointer
->	O
buf	pointer
)	O
)	O
;	O
pd	pointer
->	O
flags	int
&=	O
~	O
ILCMT_EMIT_LINE_INFO	int
;	O
}	O
else	O
if	O
(	O
*	O
iptr	pointer
==	O
'\n'	O
)	O
{	O
pd	pointer
->	O
line_number	long
++	O
;	O
if	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_REMOVE_EMPTY_LINES	int
)	O
{	O
iptr	pointer
++	O
;	O
continue	O
;	O
}	O
else	O
*	O
optr	pointer
++	O
=	O
*	O
iptr	pointer
++	O
;	O
}	O
else	O
if	O
(	O
mu_isspace	O
(	O
*	O
iptr	pointer
)	O
)	O
{	O
if	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_REMOVE_EMPTY_LINES	int
)	O
{	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_ws	int
;	O
pd	pointer
->	O
level	long
=	O
0	int
;	O
if	O
(	O
!	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_SQUEEZE_WS	int
)	O
)	O
{	O
if	O
(	O
ilcmt_save	function
(	O
pd	pointer
,	O
*	O
iptr	pointer
)	O
)	O
return	O
mu_filter_failure	int
;	O
}	O
iptr	pointer
++	O
;	O
}	O
else	O
{	O
*	O
optr	pointer
++	O
=	O
*	O
iptr	pointer
++	O
;	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_copy	int
;	O
}	O
}	O
else	O
{	O
*	O
optr	pointer
++	O
=	O
*	O
iptr	pointer
++	O
;	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_copy	int
;	O
}	O
break	O
;	O
case	O
ilcmt_partial	int
:	O
if	O
(	O
pd	pointer
->	O
level	long
==	O
pd	pointer
->	O
length	long
)	O
{	O
if	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_FOLLOW_WS	int
)	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_comment_ws	int
;	O
else	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_comment	int
;	O
}	O
else	O
if	O
(	O
*	O
iptr	pointer
==	O
pd	pointer
->	O
comment	pointer
[	O
pd	pointer
->	O
level	long
]	O
)	O
{	O
iptr	pointer
++	O
;	O
pd	pointer
->	O
level	long
++	O
;	O
}	O
else	O
{	O
init_rollback	function
(	O
pd	pointer
,	O
pd	pointer
->	O
comment	pointer
,	O
pd	pointer
->	O
level	long
)	O
;	O
}	O
break	O
;	O
case	O
ilcmt_comment_ws	int
:	O
if	O
(	O
mu_isspace	O
(	O
*	O
iptr	pointer
)	O
)	O
{	O
if	O
(	O
*	O
iptr	pointer
!=	O
'\n'	O
)	O
iptr	pointer
++	O
;	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_comment	int
;	O
}	O
else	O
{	O
if	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_EMIT_LINE_INFO	int
)	O
{	O
mu_asnprintf	function
(	O
&	O
pd	pointer
->	O
buf	pointer
,	O
&	O
pd	pointer
->	O
size	long
,	O
"%s %lu\n%.*s"	pointer
,	O
pd	pointer
->	O
line_info_starter	pointer
,	O
pd	pointer
->	O
line_number	long
,	O
pd	pointer
->	O
level	long
,	O
pd	pointer
->	O
comment	pointer
)	O
;	O
init_rollback	function
(	O
pd	pointer
,	O
pd	pointer
->	O
buf	pointer
,	O
strlen	function
(	O
pd	pointer
->	O
buf	pointer
)	O
)	O
;	O
pd	pointer
->	O
flags	int
&=	O
~	O
ILCMT_EMIT_LINE_INFO	int
;	O
}	O
else	O
init_rollback	function
(	O
pd	pointer
,	O
pd	pointer
->	O
comment	pointer
,	O
pd	pointer
->	O
level	long
)	O
;	O
}	O
break	O
;	O
case	O
ilcmt_ws	int
:	O
if	O
(	O
*	O
iptr	pointer
==	O
'\n'	O
)	O
{	O
pd	pointer
->	O
line_number	long
++	O
;	O
iptr	pointer
++	O
;	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_newline	int
;	O
}	O
else	O
if	O
(	O
mu_isspace	O
(	O
*	O
iptr	pointer
)	O
)	O
{	O
if	O
(	O
!	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_SQUEEZE_WS	int
)	O
)	O
{	O
if	O
(	O
ilcmt_save	function
(	O
pd	pointer
,	O
*	O
iptr	pointer
)	O
)	O
return	O
mu_filter_failure	int
;	O
}	O
iptr	pointer
++	O
;	O
}	O
else	O
{	O
init_rollback	function
(	O
pd	pointer
,	O
pd	pointer
->	O
buf	pointer
,	O
pd	pointer
->	O
level	long
)	O
;	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_rollback_ws	int
;	O
}	O
break	O
;	O
case	O
ilcmt_copy	int
:	O
if	O
(	O
(	O
*	O
optr	pointer
++	O
=	O
*	O
iptr	pointer
++	O
)	O
==	O
'\n'	O
)	O
{	O
pd	pointer
->	O
line_number	long
++	O
;	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_newline	int
;	O
}	O
break	O
;	O
case	O
ilcmt_comment	int
:	O
if	O
(	O
*	O
iptr	pointer
++	O
==	O
'\n'	O
)	O
{	O
pd	pointer
->	O
line_number	long
++	O
;	O
if	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_LINE_INFO	int
)	O
pd	pointer
->	O
flags	int
|=	O
ILCMT_EMIT_LINE_INFO	int
;	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_newline	int
;	O
}	O
break	O
;	O
case	O
ilcmt_rollback_ws	int
:	O
if	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_SQUEEZE_WS	int
)	O
{	O
*	O
optr	pointer
++	O
=	O
' '	O
;	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_copy	int
;	O
break	O
;	O
}	O
case	O
ilcmt_rollback	int
:	O
*	O
optr	pointer
++	O
=	O
pd	pointer
->	O
rollback_buffer	pointer
[	O
pd	pointer
->	O
rollback_index	long
++	O
]	O
;	O
if	O
(	O
pd	pointer
->	O
rollback_index	long
==	O
pd	pointer
->	O
rollback_size	long
)	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_copy	int
;	O
}	O
}	O
iobuf	pointer
->	O
isize	long
=	O
iptr	pointer
-	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
iobuf	pointer
->	O
osize	long
=	O
optr	pointer
-	O
iobuf	pointer
->	O
output	pointer
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
enum	O
mu_filter_result	enum
_ilcmt_encoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
struct	O
ilcmt_data	struct
*	O
pd	pointer
=	O
xd	pointer
;	O
const	O
unsigned	O
char	O
*	O
iptr	pointer
,	O
*	O
iend	pointer
;	O
char	O
*	O
optr	pointer
,	O
*	O
oend	pointer
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_initial	int
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
_ilcmt_free	function
(	O
pd	pointer
)	O
;	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
iend	pointer
=	O
iptr	pointer
+	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
oend	pointer
=	O
optr	pointer
+	O
iobuf	pointer
->	O
osize	long
;	O
while	O
(	O
iptr	pointer
<	O
iend	pointer
&&	O
optr	pointer
<	O
oend	pointer
)	O
{	O
switch	O
(	O
pd	pointer
->	O
state	pointer
)	O
{	O
case	O
ilcmt_initial	int
:	O
case	O
ilcmt_newline	int
:	O
init_rollback	function
(	O
pd	pointer
,	O
pd	pointer
->	O
comment	pointer
,	O
pd	pointer
->	O
length	long
)	O
;	O
case	O
ilcmt_rollback	int
:	O
*	O
optr	pointer
++	O
=	O
pd	pointer
->	O
rollback_buffer	pointer
[	O
pd	pointer
->	O
rollback_index	long
++	O
]	O
;	O
if	O
(	O
pd	pointer
->	O
rollback_index	long
==	O
pd	pointer
->	O
rollback_size	long
)	O
pd	pointer
->	O
state	pointer
=	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_FOLLOW_WS	int
)	O
?	O
ilcmt_ws	int
:	O
ilcmt_copy	int
;	O
break	O
;	O
case	O
ilcmt_ws	int
:	O
*	O
optr	pointer
++	O
=	O
' '	O
;	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_copy	int
;	O
case	O
ilcmt_copy	int
:	O
if	O
(	O
(	O
*	O
optr	pointer
++	O
=	O
*	O
iptr	pointer
++	O
)	O
==	O
'\n'	O
)	O
pd	pointer
->	O
state	pointer
=	O
ilcmt_newline	int
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
iobuf	pointer
->	O
isize	long
=	O
iptr	pointer
-	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
iobuf	pointer
->	O
osize	long
=	O
optr	pointer
-	O
iobuf	pointer
->	O
output	pointer
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
int	O
alloc_state	function
(	O
void	O
*	O
*	O
pret	pointer
,	O
int	O
mode	int
MU_ARG_UNUSED	O
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
ilcmt_data	struct
*	O
pd	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
pd	pointer
)	O
)	O
;	O
int	O
i	int
;	O
const	O
char	O
*	O
comment	pointer
=	O
";"	pointer
;	O
const	O
char	O
*	O
line_info	pointer
;	O
if	O
(	O
!	O
pd	pointer
)	O
return	O
ENOMEM	int
;	O
pd	pointer
->	O
flags	int
=	O
0	int
;	O
pd	pointer
->	O
buf	pointer
=	O
NULL	O
;	O
pd	pointer
->	O
size	long
=	O
pd	pointer
->	O
level	long
=	O
0	int
;	O
pd	pointer
->	O
line_number	long
=	O
1	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
argv	pointer
[	O
i	int
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
switch	O
(	O
argv	pointer
[	O
i	int
]	O
[	O
1	int
]	O
)	O
{	O
case	O
'r'	O
:	O
pd	pointer
->	O
flags	int
|=	O
ILCMT_REMOVE_EMPTY_LINES	int
;	O
break	O
;	O
case	O
's'	O
:	O
pd	pointer
->	O
flags	int
|=	O
ILCMT_SQUEEZE_WS	int
;	O
break	O
;	O
case	O
'S'	O
:	O
pd	pointer
->	O
flags	int
|=	O
ILCMT_FOLLOW_WS	int
;	O
break	O
;	O
case	O
'i'	O
:	O
pd	pointer
->	O
flags	int
|=	O
ILCMT_LINE_INFO	int
;	O
if	O
(	O
i	int
+	O
1	int
==	O
argc	int
)	O
return	O
MU_ERR_PARSE	O
;	O
line_info	pointer
=	O
argv	pointer
[	O
++	O
i	int
]	O
;	O
break	O
;	O
default	O
:	O
free	function
(	O
pd	pointer
)	O
;	O
return	O
MU_ERR_PARSE	O
;	O
}	O
}	O
else	O
comment	pointer
=	O
argv	pointer
[	O
i	int
]	O
;	O
}	O
if	O
(	O
comment	pointer
[	O
1	int
]	O
==	O
0	int
)	O
{	O
pd	pointer
->	O
sbuf	array
[	O
0	int
]	O
=	O
comment	pointer
[	O
0	int
]	O
;	O
pd	pointer
->	O
comment	pointer
=	O
pd	pointer
->	O
sbuf	array
;	O
pd	pointer
->	O
flags	int
|=	O
ILCMT_COMMENT_STATIC	int
;	O
pd	pointer
->	O
length	long
=	O
1	int
;	O
}	O
else	O
{	O
pd	pointer
->	O
comment	pointer
=	O
strdup	function
(	O
comment	pointer
)	O
;	O
if	O
(	O
!	O
pd	pointer
->	O
comment	pointer
)	O
{	O
free	function
(	O
pd	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
pd	pointer
->	O
length	long
=	O
strlen	function
(	O
comment	pointer
)	O
;	O
}	O
if	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_LINE_INFO	int
)	O
{	O
if	O
(	O
line_info	pointer
[	O
1	int
]	O
==	O
0	int
)	O
{	O
pd	pointer
->	O
sbuf	array
[	O
1	int
]	O
=	O
line_info	pointer
[	O
0	int
]	O
;	O
pd	pointer
->	O
sbuf	array
[	O
2	int
]	O
=	O
0	int
;	O
pd	pointer
->	O
line_info_starter	pointer
=	O
pd	pointer
->	O
sbuf	array
+	O
1	int
;	O
pd	pointer
->	O
flags	int
|=	O
ILCMT_LINE_INFO_STATIC	int
;	O
}	O
else	O
{	O
pd	pointer
->	O
line_info_starter	pointer
=	O
strdup	function
(	O
line_info	pointer
)	O
;	O
if	O
(	O
!	O
pd	pointer
->	O
line_info_starter	pointer
)	O
{	O
if	O
(	O
!	O
(	O
pd	pointer
->	O
flags	int
&	O
ILCMT_COMMENT_STATIC	int
)	O
)	O
free	function
(	O
pd	pointer
->	O
comment	pointer
)	O
;	O
free	function
(	O
pd	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
}	O
*	O
pret	pointer
=	O
pd	pointer
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_inline_comment_filter	struct
=	O
{	O
"INLINE-COMMENT"	pointer
,	O
alloc_state	function
,	O
_ilcmt_encoder	function
,	O
_ilcmt_decoder	function
}	O
;	O
mu_filter_record_t	pointer
mu_inline_comment_filter	pointer
=	O
&	O
_inline_comment_filter	struct
;	O
