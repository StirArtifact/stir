static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: xa.c,v 1.5 2014/04/17 20:27:42 sebdiaz Exp $"	pointer
;	O
static	O
int	O
__db_xa_close	function
__P	O
(	O
(	O
char	O
*	O
,	O
int	O
,	O
long	O
)	O
)	O
;	O
static	O
int	O
__db_xa_commit	function
__P	O
(	O
(	O
XID	struct
*	O
,	O
int	O
,	O
long	O
)	O
)	O
;	O
static	O
int	O
__db_xa_complete	function
__P	O
(	O
(	O
int	O
*	O
,	O
int	O
*	O
,	O
int	O
,	O
long	O
)	O
)	O
;	O
static	O
int	O
__db_xa_end	function
__P	O
(	O
(	O
XID	struct
*	O
,	O
int	O
,	O
long	O
)	O
)	O
;	O
static	O
int	O
__db_xa_forget	function
__P	O
(	O
(	O
XID	struct
*	O
,	O
int	O
,	O
long	O
)	O
)	O
;	O
static	O
int	O
__db_xa_open	function
__P	O
(	O
(	O
char	O
*	O
,	O
int	O
,	O
long	O
)	O
)	O
;	O
static	O
int	O
__db_xa_prepare	function
__P	O
(	O
(	O
XID	struct
*	O
,	O
int	O
,	O
long	O
)	O
)	O
;	O
static	O
int	O
__db_xa_recover	function
__P	O
(	O
(	O
XID	struct
*	O
,	O
long	O
,	O
int	O
,	O
long	O
)	O
)	O
;	O
static	O
int	O
__db_xa_rollback	function
__P	O
(	O
(	O
XID	struct
*	O
,	O
int	O
,	O
long	O
)	O
)	O
;	O
static	O
int	O
__db_xa_start	function
__P	O
(	O
(	O
XID	struct
*	O
,	O
int	O
,	O
long	O
)	O
)	O
;	O
static	O
void	O
__xa_txn_end	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
)	O
)	O
;	O
static	O
void	O
__xa_txn_init	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
TXN_DETAIL	struct
*	O
,	O
size_t	long
)	O
)	O
;	O
const	O
struct	O
xa_switch_t	struct
CDB_db_xa_switch	struct
=	O
{	O
"Berkeley DB"	pointer
,	O
TMNOMIGRATE	int
,	O
0	int
,	O
__db_xa_open	function
,	O
__db_xa_close	function
,	O
__db_xa_start	function
,	O
__db_xa_end	function
,	O
__db_xa_rollback	function
,	O
__db_xa_prepare	function
,	O
__db_xa_commit	function
,	O
__db_xa_recover	function
,	O
__db_xa_forget	function
,	O
__db_xa_complete	function
}	O
;	O
static	O
int	O
__db_xa_open	function
(	O
xa_info	pointer
,	O
rmid	int
,	O
flags	int
)	O
char	O
*	O
xa_info	pointer
;	O
int	O
rmid	int
;	O
long	O
flags	int
;	O
{	O
DB_ENV	struct
*	O
env	pointer
;	O
if	O
(	O
LF_ISSET	O
(	O
TMASYNC	int
)	O
)	O
return	O
(	O
XAER_ASYNC	O
)	O
;	O
if	O
(	O
flags	int
!=	O
TMNOFLAGS	int
)	O
return	O
(	O
XAER_INVAL	O
)	O
;	O
if	O
(	O
CDB___db_rmid_to_env	function
(	O
rmid	int
,	O
&	O
env	pointer
)	O
==	O
0	int
)	O
return	O
(	O
XA_OK	int
)	O
;	O
if	O
(	O
CDB___os_calloc	function
(	O
env	pointer
,	O
1	int
,	O
sizeof	O
(	O
DB_ENV	struct
)	O
,	O
&	O
env	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_RMERR	O
)	O
;	O
if	O
(	O
CDB_db_env_create	function
(	O
&	O
env	pointer
,	O
0	int
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_RMERR	O
)	O
;	O
if	O
(	O
env	pointer
->	O
open	pointer
(	O
env	pointer
,	O
xa_info	pointer
,	O
XA_FLAGS	O
,	O
0	int
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
CDB___db_map_rmid	function
(	O
rmid	int
,	O
env	pointer
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
CDB___os_calloc	function
(	O
env	pointer
,	O
1	int
,	O
sizeof	O
(	O
DB_TXN	struct
)	O
,	O
&	O
env	pointer
->	O
xa_txn	pointer
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
env	pointer
->	O
xa_txn	pointer
->	O
txnid	int
=	O
TXN_INVALID	int
;	O
return	O
(	O
XA_OK	int
)	O
;	O
err	pointer
:	O
(	O
void	O
)	O
env	pointer
->	O
close	pointer
(	O
env	pointer
,	O
0	int
)	O
;	O
return	O
(	O
XAER_RMERR	O
)	O
;	O
}	O
static	O
int	O
__db_xa_close	function
(	O
xa_info	pointer
,	O
rmid	int
,	O
flags	int
)	O
char	O
*	O
xa_info	pointer
;	O
int	O
rmid	int
;	O
long	O
flags	int
;	O
{	O
if	O
(	O
xa_info	pointer
)	O
{	O
}	O
DB_ENV	struct
*	O
env	pointer
;	O
int	O
ret	int
,	O
t_ret	int
;	O
COMPQUIET	O
(	O
xa_info	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
LF_ISSET	O
(	O
TMASYNC	int
)	O
)	O
return	O
(	O
XAER_ASYNC	O
)	O
;	O
if	O
(	O
flags	int
!=	O
TMNOFLAGS	int
)	O
return	O
(	O
XAER_INVAL	O
)	O
;	O
if	O
(	O
CDB___db_rmid_to_env	function
(	O
rmid	int
,	O
&	O
env	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XA_OK	int
)	O
;	O
if	O
(	O
env	pointer
->	O
xa_txn	pointer
!=	O
NULL	O
&&	O
env	pointer
->	O
xa_txn	pointer
->	O
txnid	int
!=	O
TXN_INVALID	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
ret	int
=	O
CDB___db_unmap_rmid	function
(	O
rmid	int
)	O
;	O
if	O
(	O
env	pointer
->	O
xa_txn	pointer
!=	O
NULL	O
)	O
CDB___os_free	function
(	O
env	pointer
->	O
xa_txn	pointer
,	O
sizeof	O
(	O
DB_TXN	struct
)	O
)	O
;	O
if	O
(	O
(	O
t_ret	int
=	O
env	pointer
->	O
close	pointer
(	O
env	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
return	O
(	O
ret	int
==	O
0	int
?	O
XA_OK	int
:	O
XAER_RMERR	O
)	O
;	O
}	O
static	O
int	O
__db_xa_start	function
(	O
xid	array
,	O
rmid	int
,	O
flags	int
)	O
XID	struct
*	O
xid	array
;	O
int	O
rmid	int
;	O
long	O
flags	int
;	O
{	O
DB_ENV	struct
*	O
env	pointer
;	O
TXN_DETAIL	struct
*	O
td	pointer
;	O
size_t	long
off	long
;	O
int	O
is_known	int
;	O
if	O
(	O
LF_ISSET	O
(	O
~	O
OK_FLAGS	O
)	O
)	O
return	O
(	O
XAER_INVAL	O
)	O
;	O
if	O
(	O
LF_ISSET	O
(	O
TMJOIN	int
)	O
&&	O
LF_ISSET	O
(	O
TMRESUME	int
)	O
)	O
return	O
(	O
XAER_INVAL	O
)	O
;	O
if	O
(	O
LF_ISSET	O
(	O
TMASYNC	int
)	O
)	O
return	O
(	O
XAER_ASYNC	O
)	O
;	O
if	O
(	O
CDB___db_rmid_to_env	function
(	O
rmid	int
,	O
&	O
env	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
is_known	int
=	O
CDB___db_xid_to_txn	function
(	O
env	pointer
,	O
xid	array
,	O
&	O
off	long
)	O
==	O
0	int
;	O
if	O
(	O
is_known	int
&&	O
!	O
LF_ISSET	O
(	O
TMRESUME	int
)	O
&&	O
!	O
LF_ISSET	O
(	O
TMJOIN	int
)	O
)	O
return	O
(	O
XAER_DUPID	O
)	O
;	O
if	O
(	O
!	O
is_known	int
&&	O
LF_ISSET	O
(	O
TMRESUME	int
|	O
TMJOIN	int
)	O
)	O
return	O
(	O
XAER_NOTA	O
)	O
;	O
if	O
(	O
is_known	int
)	O
{	O
td	pointer
=	O
(	O
TXN_DETAIL	struct
*	O
)	O
R_ADDR	O
(	O
&	O
(	O
(	O
DB_TXNMGR	struct
*	O
)	O
env	pointer
->	O
tx_handle	pointer
)	O
->	O
reginfo	pointer
,	O
off	long
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
==	O
TXN_XA_SUSPENDED	int
&&	O
!	O
LF_ISSET	O
(	O
TMRESUME	int
|	O
TMJOIN	int
)	O
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
==	O
TXN_XA_DEADLOCKED	int
)	O
return	O
(	O
XA_RBDEADLOCK	O
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
==	O
TXN_XA_ABORTED	int
)	O
return	O
(	O
XA_RBOTHER	O
)	O
;	O
__xa_txn_init	function
(	O
env	pointer
,	O
td	pointer
,	O
off	long
)	O
;	O
td	pointer
->	O
xa_status	int
=	O
TXN_XA_STARTED	int
;	O
}	O
else	O
{	O
if	O
(	O
CDB___txn_xa_begin	function
(	O
env	pointer
,	O
env	pointer
->	O
xa_txn	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_RMERR	O
)	O
;	O
(	O
void	O
)	O
CDB___db_map_xid	function
(	O
env	pointer
,	O
xid	array
,	O
env	pointer
->	O
xa_txn	pointer
->	O
off	long
)	O
;	O
td	pointer
=	O
(	O
TXN_DETAIL	struct
*	O
)	O
R_ADDR	O
(	O
&	O
(	O
(	O
DB_TXNMGR	struct
*	O
)	O
env	pointer
->	O
tx_handle	pointer
)	O
->	O
reginfo	pointer
,	O
env	pointer
->	O
xa_txn	pointer
->	O
off	long
)	O
;	O
td	pointer
->	O
xa_status	int
=	O
TXN_XA_STARTED	int
;	O
}	O
return	O
(	O
XA_OK	int
)	O
;	O
}	O
static	O
int	O
__db_xa_end	function
(	O
xid	array
,	O
rmid	int
,	O
flags	int
)	O
XID	struct
*	O
xid	array
;	O
int	O
rmid	int
;	O
long	O
flags	int
;	O
{	O
DB_ENV	struct
*	O
env	pointer
;	O
DB_TXN	struct
*	O
txn	pointer
;	O
TXN_DETAIL	struct
*	O
td	pointer
;	O
size_t	long
off	long
;	O
if	O
(	O
flags	int
!=	O
TMNOFLAGS	int
&&	O
!	O
LF_ISSET	O
(	O
TMSUSPEND	int
|	O
TMSUCCESS	int
|	O
TMFAIL	int
)	O
)	O
return	O
(	O
XAER_INVAL	O
)	O
;	O
if	O
(	O
CDB___db_rmid_to_env	function
(	O
rmid	int
,	O
&	O
env	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
if	O
(	O
CDB___db_xid_to_txn	function
(	O
env	pointer
,	O
xid	array
,	O
&	O
off	long
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_NOTA	O
)	O
;	O
txn	pointer
=	O
env	pointer
->	O
xa_txn	pointer
;	O
if	O
(	O
off	long
!=	O
txn	pointer
->	O
off	long
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
td	pointer
=	O
(	O
TXN_DETAIL	struct
*	O
)	O
R_ADDR	O
(	O
&	O
(	O
(	O
DB_TXNMGR	struct
*	O
)	O
env	pointer
->	O
tx_handle	pointer
)	O
->	O
reginfo	pointer
,	O
off	long
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
==	O
TXN_XA_DEADLOCKED	int
)	O
return	O
(	O
XA_RBDEADLOCK	O
)	O
;	O
if	O
(	O
td	pointer
->	O
status	int
==	O
TXN_ABORTED	int
)	O
return	O
(	O
XA_RBOTHER	O
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
!=	O
TXN_XA_STARTED	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
td	pointer
->	O
last_lsn	struct
=	O
txn	pointer
->	O
last_lsn	struct
;	O
if	O
(	O
LF_ISSET	O
(	O
TMSUSPEND	int
)	O
)	O
td	pointer
->	O
xa_status	int
=	O
TXN_XA_SUSPENDED	int
;	O
else	O
td	pointer
->	O
xa_status	int
=	O
TXN_XA_ENDED	int
;	O
txn	pointer
->	O
txnid	int
=	O
TXN_INVALID	int
;	O
return	O
(	O
XA_OK	int
)	O
;	O
}	O
static	O
int	O
__db_xa_prepare	function
(	O
xid	array
,	O
rmid	int
,	O
flags	int
)	O
XID	struct
*	O
xid	array
;	O
int	O
rmid	int
;	O
long	O
flags	int
;	O
{	O
DB_ENV	struct
*	O
env	pointer
;	O
TXN_DETAIL	struct
*	O
td	pointer
;	O
size_t	long
off	long
;	O
if	O
(	O
LF_ISSET	O
(	O
TMASYNC	int
)	O
)	O
return	O
(	O
XAER_ASYNC	O
)	O
;	O
if	O
(	O
flags	int
!=	O
TMNOFLAGS	int
)	O
return	O
(	O
XAER_INVAL	O
)	O
;	O
if	O
(	O
CDB___db_rmid_to_env	function
(	O
rmid	int
,	O
&	O
env	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
if	O
(	O
CDB___db_xid_to_txn	function
(	O
env	pointer
,	O
xid	array
,	O
&	O
off	long
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_NOTA	O
)	O
;	O
td	pointer
=	O
(	O
TXN_DETAIL	struct
*	O
)	O
R_ADDR	O
(	O
&	O
(	O
(	O
DB_TXNMGR	struct
*	O
)	O
env	pointer
->	O
tx_handle	pointer
)	O
->	O
reginfo	pointer
,	O
off	long
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
==	O
TXN_XA_DEADLOCKED	int
)	O
return	O
(	O
XA_RBDEADLOCK	O
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
!=	O
TXN_XA_ENDED	int
&&	O
td	pointer
->	O
xa_status	int
!=	O
TXN_XA_SUSPENDED	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
__xa_txn_init	function
(	O
env	pointer
,	O
td	pointer
,	O
off	long
)	O
;	O
if	O
(	O
CDB_txn_prepare	function
(	O
env	pointer
->	O
xa_txn	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_RMERR	O
)	O
;	O
td	pointer
->	O
xa_status	int
=	O
TXN_XA_PREPARED	int
;	O
__xa_txn_end	function
(	O
env	pointer
)	O
;	O
return	O
(	O
XA_OK	int
)	O
;	O
}	O
static	O
int	O
__db_xa_commit	function
(	O
xid	array
,	O
rmid	int
,	O
flags	int
)	O
XID	struct
*	O
xid	array
;	O
int	O
rmid	int
;	O
long	O
flags	int
;	O
{	O
DB_ENV	struct
*	O
env	pointer
;	O
TXN_DETAIL	struct
*	O
td	pointer
;	O
size_t	long
off	long
;	O
if	O
(	O
LF_ISSET	O
(	O
TMASYNC	int
)	O
)	O
return	O
(	O
XAER_ASYNC	O
)	O
;	O
if	O
(	O
LF_ISSET	O
(	O
~	O
OK_FLAGS	O
)	O
)	O
return	O
(	O
XAER_INVAL	O
)	O
;	O
if	O
(	O
CDB___db_rmid_to_env	function
(	O
rmid	int
,	O
&	O
env	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
if	O
(	O
CDB___db_xid_to_txn	function
(	O
env	pointer
,	O
xid	array
,	O
&	O
off	long
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_NOTA	O
)	O
;	O
td	pointer
=	O
(	O
TXN_DETAIL	struct
*	O
)	O
R_ADDR	O
(	O
&	O
(	O
(	O
DB_TXNMGR	struct
*	O
)	O
env	pointer
->	O
tx_handle	pointer
)	O
->	O
reginfo	pointer
,	O
off	long
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
==	O
TXN_XA_DEADLOCKED	int
)	O
return	O
(	O
XA_RBDEADLOCK	O
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
==	O
TXN_XA_ABORTED	int
)	O
return	O
(	O
XA_RBOTHER	O
)	O
;	O
if	O
(	O
LF_ISSET	O
(	O
TMONEPHASE	int
)	O
&&	O
td	pointer
->	O
xa_status	int
!=	O
TXN_XA_ENDED	int
&&	O
td	pointer
->	O
xa_status	int
!=	O
TXN_XA_SUSPENDED	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
if	O
(	O
!	O
LF_ISSET	O
(	O
TMONEPHASE	int
)	O
&&	O
td	pointer
->	O
xa_status	int
!=	O
TXN_XA_PREPARED	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
__xa_txn_init	function
(	O
env	pointer
,	O
td	pointer
,	O
off	long
)	O
;	O
if	O
(	O
CDB_txn_commit	function
(	O
env	pointer
->	O
xa_txn	pointer
,	O
0	int
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_RMERR	O
)	O
;	O
__xa_txn_end	function
(	O
env	pointer
)	O
;	O
return	O
(	O
XA_OK	int
)	O
;	O
}	O
static	O
int	O
__db_xa_recover	function
(	O
xids	pointer
,	O
count	int
,	O
rmid	int
,	O
flags	int
)	O
XID	struct
*	O
xids	pointer
;	O
long	O
count	int
,	O
flags	int
;	O
int	O
rmid	int
;	O
{	O
__txn_xa_regop_args	struct
*	O
argp	pointer
;	O
DBT	struct
data	pointer
;	O
DB_ENV	struct
*	O
env	pointer
;	O
DB_LOG	struct
*	O
log	pointer
;	O
XID	struct
*	O
xidp	pointer
;	O
int	O
err	pointer
,	O
ret	int
;	O
u_int32_t	int
rectype	int
,	O
txnid	int
;	O
ret	int
=	O
0	int
;	O
xidp	pointer
=	O
xids	pointer
;	O
if	O
(	O
CDB___db_rmid_to_env	function
(	O
rmid	int
,	O
&	O
env	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
log	pointer
=	O
env	pointer
->	O
lg_handle	pointer
;	O
if	O
(	O
LF_ISSET	O
(	O
TMSTARTRSCAN	int
)	O
)	O
{	O
if	O
(	O
(	O
err	pointer
=	O
CDB___log_findckp	function
(	O
env	pointer
,	O
&	O
log	pointer
->	O
xa_first	struct
)	O
)	O
==	O
DB_NOTFOUND	O
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
(	O
err	pointer
=	O
CDB___db_txnlist_init	function
(	O
env	pointer
,	O
&	O
log	pointer
->	O
xa_info	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_RMERR	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
IS_ZERO_LSN	O
(	O
log	pointer
->	O
xa_lsn	struct
)	O
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
}	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
data	pointer
)	O
)	O
;	O
for	O
(	O
err	pointer
=	O
CDB_log_get	function
(	O
env	pointer
,	O
&	O
log	pointer
->	O
xa_lsn	struct
,	O
&	O
data	pointer
,	O
LF_ISSET	O
(	O
TMSTARTRSCAN	int
)	O
?	O
DB_LAST	int
:	O
DB_SET	int
)	O
;	O
err	pointer
==	O
0	int
&&	O
CDB_log_compare	function
(	O
&	O
log	pointer
->	O
xa_lsn	struct
,	O
&	O
log	pointer
->	O
xa_first	struct
)	O
>	O
0	int
;	O
err	pointer
=	O
CDB_log_get	function
(	O
env	pointer
,	O
&	O
log	pointer
->	O
xa_lsn	struct
,	O
&	O
data	pointer
,	O
DB_PREV	int
)	O
)	O
{	O
memcpy	function
(	O
&	O
rectype	int
,	O
data	pointer
.	O
data	pointer
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
if	O
(	O
rectype	int
!=	O
DB_txn_xa_regop	int
&&	O
rectype	int
!=	O
DB_txn_regop	int
)	O
continue	O
;	O
memcpy	function
(	O
&	O
txnid	int
,	O
(	O
u_int8_t	char
*	O
)	O
data	pointer
.	O
data	pointer
+	O
sizeof	O
(	O
rectype	int
)	O
,	O
sizeof	O
(	O
txnid	int
)	O
)	O
;	O
err	pointer
=	O
CDB___db_txnlist_find	function
(	O
log	pointer
->	O
xa_info	pointer
,	O
txnid	int
)	O
;	O
switch	O
(	O
rectype	int
)	O
{	O
case	O
DB_txn_regop	int
:	O
if	O
(	O
err	pointer
==	O
DB_NOTFOUND	O
)	O
CDB___db_txnlist_add	function
(	O
env	pointer
,	O
log	pointer
->	O
xa_info	pointer
,	O
txnid	int
)	O
;	O
err	pointer
=	O
0	int
;	O
break	O
;	O
case	O
DB_txn_xa_regop	int
:	O
if	O
(	O
err	pointer
==	O
0	int
)	O
break	O
;	O
if	O
(	O
(	O
err	pointer
=	O
CDB___txn_xa_regop_read	function
(	O
env	pointer
,	O
data	pointer
.	O
data	pointer
,	O
&	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
ret	int
=	O
XAER_RMERR	O
;	O
goto	O
out	O
;	O
}	O
xidp	pointer
->	O
formatID	long
=	O
argp	pointer
->	O
formatID	long
;	O
xidp	pointer
->	O
gtrid_length	long
=	O
argp	pointer
->	O
gtrid	int
;	O
xidp	pointer
->	O
bqual_length	long
=	O
argp	pointer
->	O
bqual	int
;	O
memcpy	function
(	O
xidp	pointer
->	O
data	pointer
,	O
argp	pointer
->	O
xid	array
.	O
data	pointer
,	O
argp	pointer
->	O
xid	array
.	O
size	int
)	O
;	O
ret	int
++	O
;	O
xidp	pointer
++	O
;	O
CDB___os_free	function
(	O
argp	pointer
,	O
sizeof	O
(	O
*	O
argp	pointer
)	O
)	O
;	O
if	O
(	O
ret	int
==	O
count	int
)	O
goto	O
done	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
err	pointer
!=	O
0	int
&&	O
err	pointer
!=	O
DB_NOTFOUND	O
)	O
goto	O
out	O
;	O
done	O
:	O
if	O
(	O
LF_ISSET	O
(	O
TMENDRSCAN	int
)	O
)	O
{	O
ZERO_LSN	O
(	O
log	pointer
->	O
xa_lsn	struct
)	O
;	O
ZERO_LSN	O
(	O
log	pointer
->	O
xa_first	struct
)	O
;	O
out	O
:	O
CDB___db_txnlist_end	function
(	O
env	pointer
,	O
log	pointer
->	O
xa_info	pointer
)	O
;	O
log	pointer
->	O
xa_info	pointer
=	O
NULL	O
;	O
}	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
__db_xa_rollback	function
(	O
xid	array
,	O
rmid	int
,	O
flags	int
)	O
XID	struct
*	O
xid	array
;	O
int	O
rmid	int
;	O
long	O
flags	int
;	O
{	O
DB_ENV	struct
*	O
env	pointer
;	O
TXN_DETAIL	struct
*	O
td	pointer
;	O
size_t	long
off	long
;	O
if	O
(	O
LF_ISSET	O
(	O
TMASYNC	int
)	O
)	O
return	O
(	O
XAER_ASYNC	O
)	O
;	O
if	O
(	O
flags	int
!=	O
TMNOFLAGS	int
)	O
return	O
(	O
XAER_INVAL	O
)	O
;	O
if	O
(	O
CDB___db_rmid_to_env	function
(	O
rmid	int
,	O
&	O
env	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
if	O
(	O
CDB___db_xid_to_txn	function
(	O
env	pointer
,	O
xid	array
,	O
&	O
off	long
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_NOTA	O
)	O
;	O
td	pointer
=	O
(	O
TXN_DETAIL	struct
*	O
)	O
R_ADDR	O
(	O
&	O
(	O
(	O
DB_TXNMGR	struct
*	O
)	O
env	pointer
->	O
tx_handle	pointer
)	O
->	O
reginfo	pointer
,	O
off	long
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
==	O
TXN_XA_DEADLOCKED	int
)	O
return	O
(	O
XA_RBDEADLOCK	O
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
==	O
TXN_XA_ABORTED	int
)	O
return	O
(	O
XA_RBOTHER	O
)	O
;	O
if	O
(	O
td	pointer
->	O
xa_status	int
!=	O
TXN_XA_ENDED	int
&&	O
td	pointer
->	O
xa_status	int
!=	O
TXN_XA_SUSPENDED	int
&&	O
td	pointer
->	O
xa_status	int
!=	O
TXN_XA_PREPARED	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
__xa_txn_init	function
(	O
env	pointer
,	O
td	pointer
,	O
off	long
)	O
;	O
if	O
(	O
CDB_txn_abort	function
(	O
env	pointer
->	O
xa_txn	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_RMERR	O
)	O
;	O
__xa_txn_end	function
(	O
env	pointer
)	O
;	O
return	O
(	O
XA_OK	int
)	O
;	O
}	O
static	O
int	O
__db_xa_forget	function
(	O
xid	array
,	O
rmid	int
,	O
flags	int
)	O
XID	struct
*	O
xid	array
;	O
int	O
rmid	int
;	O
long	O
flags	int
;	O
{	O
DB_ENV	struct
*	O
env	pointer
;	O
size_t	long
off	long
;	O
if	O
(	O
LF_ISSET	O
(	O
TMASYNC	int
)	O
)	O
return	O
(	O
XAER_ASYNC	O
)	O
;	O
if	O
(	O
flags	int
!=	O
TMNOFLAGS	int
)	O
return	O
(	O
XAER_INVAL	O
)	O
;	O
if	O
(	O
CDB___db_rmid_to_env	function
(	O
rmid	int
,	O
&	O
env	pointer
)	O
!=	O
0	int
)	O
return	O
(	O
XAER_PROTO	O
)	O
;	O
if	O
(	O
CDB___db_xid_to_txn	function
(	O
env	pointer
,	O
xid	array
,	O
&	O
off	long
)	O
!=	O
0	int
)	O
return	O
(	O
XA_OK	int
)	O
;	O
CDB___db_unmap_xid	function
(	O
env	pointer
,	O
xid	array
,	O
off	long
)	O
;	O
return	O
(	O
XA_OK	int
)	O
;	O
}	O
static	O
int	O
__db_xa_complete	function
(	O
handle	pointer
,	O
retval	pointer
,	O
rmid	int
,	O
flags	int
)	O
int	O
*	O
handle	pointer
,	O
*	O
retval	pointer
,	O
rmid	int
;	O
long	O
flags	int
;	O
{	O
if	O
(	O
handle	pointer
||	O
retval	pointer
||	O
rmid	int
||	O
flags	int
)	O
{	O
}	O
COMPQUIET	O
(	O
handle	pointer
,	O
NULL	O
)	O
;	O
COMPQUIET	O
(	O
retval	pointer
,	O
NULL	O
)	O
;	O
COMPQUIET	O
(	O
rmid	int
,	O
0	int
)	O
;	O
COMPQUIET	O
(	O
flags	int
,	O
0	int
)	O
;	O
return	O
(	O
XAER_INVAL	O
)	O
;	O
}	O
static	O
void	O
__xa_txn_init	function
(	O
env	pointer
,	O
td	pointer
,	O
off	long
)	O
DB_ENV	struct
*	O
env	pointer
;	O
TXN_DETAIL	struct
*	O
td	pointer
;	O
size_t	long
off	long
;	O
{	O
DB_TXN	struct
*	O
txn	pointer
;	O
txn	pointer
=	O
env	pointer
->	O
xa_txn	pointer
;	O
txn	pointer
->	O
mgrp	pointer
=	O
env	pointer
->	O
tx_handle	pointer
;	O
txn	pointer
->	O
parent	pointer
=	O
NULL	O
;	O
txn	pointer
->	O
last_lsn	struct
=	O
td	pointer
->	O
last_lsn	struct
;	O
txn	pointer
->	O
txnid	int
=	O
td	pointer
->	O
txnid	int
;	O
txn	pointer
->	O
off	long
=	O
off	long
;	O
txn	pointer
->	O
flags	int
=	O
0	int
;	O
}	O
static	O
void	O
__xa_txn_end	function
(	O
env	pointer
)	O
DB_ENV	struct
*	O
env	pointer
;	O
{	O
DB_TXN	struct
*	O
txn	pointer
;	O
txn	pointer
=	O
env	pointer
->	O
xa_txn	pointer
;	O
if	O
(	O
txn	pointer
!=	O
NULL	O
)	O
txn	pointer
->	O
txnid	int
=	O
TXN_INVALID	int
;	O
}	O
