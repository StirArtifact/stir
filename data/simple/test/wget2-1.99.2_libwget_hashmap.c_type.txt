typedef	O
struct	O
_entry_st	struct
_entry_t	struct
;	O
struct	O
_entry_st	struct
{	O
void	O
*	O
key	int
,	O
*	O
value	pointer
;	O
_entry_t	struct
*	O
next	pointer
;	O
unsigned	O
int	O
hash	pointer
;	O
}	O
;	O
struct	O
wget_hashmap_st	struct
{	O
wget_hashmap_hash_fn	function
*	O
hash	pointer
;	O
wget_hashmap_compare_fn	function
*	O
cmp	pointer
;	O
wget_hashmap_key_destructor	function
*	O
key_destructor	pointer
;	O
wget_hashmap_value_destructor	function
*	O
value_destructor	pointer
;	O
_entry_t	struct
*	O
*	O
entry	pointer
;	O
int	O
max	int
,	O
cur	int
,	O
threshold	int
;	O
float	O
resize_factor	float
,	O
load_factor	float
;	O
}	O
;	O
struct	O
wget_hashmap_iterator_st	struct
{	O
struct	O
wget_hashmap_st	struct
*	O
h	pointer
;	O
_entry_t	struct
*	O
entry	pointer
;	O
int	O
pos	int
;	O
}	O
;	O
wget_hashmap_iterator	struct
*	O
wget_hashmap_iterator_alloc	function
(	O
wget_hashmap	struct
*	O
h	pointer
)	O
{	O
struct	O
wget_hashmap_iterator_st	struct
*	O
iter	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
wget_hashmap_iterator_st	struct
)	O
)	O
;	O
if	O
(	O
iter	pointer
)	O
iter	pointer
->	O
h	pointer
=	O
h	pointer
;	O
return	O
(	O
wget_hashmap_iterator	struct
*	O
)	O
iter	pointer
;	O
}	O
void	O
wget_hashmap_iterator_free	function
(	O
wget_hashmap_iterator	struct
*	O
*	O
iter	pointer
)	O
{	O
if	O
(	O
iter	pointer
)	O
xfree	O
(	O
*	O
iter	pointer
)	O
;	O
}	O
void	O
*	O
wget_hashmap_iterator_next	function
(	O
wget_hashmap_iterator	struct
*	O
iter	pointer
,	O
void	O
*	O
*	O
value	pointer
)	O
{	O
struct	O
wget_hashmap_iterator_st	struct
*	O
_iter	pointer
=	O
(	O
struct	O
wget_hashmap_iterator_st	struct
*	O
)	O
iter	pointer
;	O
struct	O
wget_hashmap_st	struct
*	O
h	pointer
=	O
_iter	pointer
->	O
h	pointer
;	O
if	O
(	O
_iter	pointer
->	O
entry	pointer
)	O
{	O
if	O
(	O
(	O
_iter	pointer
->	O
entry	pointer
=	O
_iter	pointer
->	O
entry	pointer
->	O
next	pointer
)	O
)	O
{	O
found	O
:	O
if	O
(	O
value	pointer
)	O
*	O
value	pointer
=	O
_iter	pointer
->	O
entry	pointer
->	O
value	pointer
;	O
return	O
_iter	pointer
->	O
entry	pointer
->	O
key	int
;	O
}	O
_iter	pointer
->	O
pos	int
++	O
;	O
}	O
if	O
(	O
!	O
_iter	pointer
->	O
entry	pointer
)	O
{	O
for	O
(	O
;	O
_iter	pointer
->	O
pos	int
<	O
h	pointer
->	O
max	int
;	O
_iter	pointer
->	O
pos	int
++	O
)	O
{	O
if	O
(	O
h	pointer
->	O
entry	pointer
[	O
_iter	pointer
->	O
pos	int
]	O
)	O
{	O
_iter	pointer
->	O
entry	pointer
=	O
h	pointer
->	O
entry	pointer
[	O
_iter	pointer
->	O
pos	int
]	O
;	O
goto	O
found	O
;	O
}	O
}	O
}	O
return	O
NULL	O
;	O
}	O
wget_hashmap	struct
*	O
wget_hashmap_create	function
(	O
int	O
max	int
,	O
wget_hashmap_hash_fn	function
*	O
hash	pointer
,	O
wget_hashmap_compare_fn	function
*	O
cmp	pointer
)	O
{	O
wget_hashmap	struct
*	O
h	pointer
=	O
wget_malloc	function
(	O
sizeof	O
(	O
wget_hashmap	struct
)	O
)	O
;	O
if	O
(	O
!	O
h	pointer
)	O
return	O
NULL	O
;	O
h	pointer
->	O
entry	pointer
=	O
wget_calloc	function
(	O
max	int
,	O
sizeof	O
(	O
_entry_t	struct
*	O
)	O
)	O
;	O
if	O
(	O
!	O
h	pointer
->	O
entry	pointer
)	O
{	O
xfree	O
(	O
h	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
h	pointer
->	O
max	int
=	O
max	int
;	O
h	pointer
->	O
cur	int
=	O
0	int
;	O
h	pointer
->	O
resize_factor	float
=	O
2	int
;	O
h	pointer
->	O
hash	pointer
=	O
hash	pointer
;	O
h	pointer
->	O
cmp	pointer
=	O
cmp	pointer
;	O
h	pointer
->	O
key_destructor	pointer
=	O
free	function
;	O
h	pointer
->	O
value_destructor	pointer
=	O
free	function
;	O
h	pointer
->	O
load_factor	float
=	O
0.75	int
;	O
h	pointer
->	O
threshold	int
=	O
(	O
int	O
)	O
(	O
max	int
*	O
h	pointer
->	O
load_factor	float
)	O
;	O
return	O
h	pointer
;	O
}	O
WGET_GCC_NONNULL_ALL	O
static	O
_entry_t	struct
*	O
hashmap_find_entry	function
(	O
const	O
wget_hashmap	struct
*	O
h	pointer
,	O
const	O
char	O
*	O
key	int
,	O
unsigned	O
int	O
hash	pointer
)	O
{	O
for	O
(	O
_entry_t	struct
*	O
e	pointer
=	O
h	pointer
->	O
entry	pointer
[	O
hash	pointer
%	O
h	pointer
->	O
max	int
]	O
;	O
e	pointer
;	O
e	pointer
=	O
e	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
hash	pointer
==	O
e	pointer
->	O
hash	pointer
&&	O
(	O
key	int
==	O
e	pointer
->	O
key	int
||	O
!	O
h	pointer
->	O
cmp	pointer
(	O
key	int
,	O
e	pointer
->	O
key	int
)	O
)	O
)	O
{	O
return	O
e	pointer
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
WGET_GCC_NONNULL_ALL	O
static	O
void	O
hashmap_rehash	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
_entry_t	struct
*	O
*	O
new_entry	pointer
,	O
int	O
newmax	int
,	O
int	O
recalc_hash	int
)	O
{	O
_entry_t	struct
*	O
entry	pointer
,	O
*	O
next	pointer
;	O
int	O
cur	int
=	O
h	pointer
->	O
cur	int
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
h	pointer
->	O
max	int
&&	O
cur	int
;	O
it	int
++	O
)	O
{	O
for	O
(	O
entry	pointer
=	O
h	pointer
->	O
entry	pointer
[	O
it	int
]	O
;	O
entry	pointer
;	O
entry	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
entry	pointer
->	O
next	pointer
;	O
if	O
(	O
recalc_hash	int
)	O
entry	pointer
->	O
hash	pointer
=	O
h	pointer
->	O
hash	pointer
(	O
entry	pointer
->	O
key	int
)	O
;	O
int	O
pos	int
=	O
entry	pointer
->	O
hash	pointer
%	O
newmax	int
;	O
entry	pointer
->	O
next	pointer
=	O
new_entry	pointer
[	O
pos	int
]	O
;	O
new_entry	pointer
[	O
pos	int
]	O
=	O
entry	pointer
;	O
cur	int
--	O
;	O
}	O
}	O
xfree	O
(	O
h	pointer
->	O
entry	pointer
)	O
;	O
h	pointer
->	O
entry	pointer
=	O
new_entry	pointer
;	O
h	pointer
->	O
max	int
=	O
newmax	int
;	O
h	pointer
->	O
threshold	int
=	O
(	O
int	O
)	O
(	O
newmax	int
*	O
h	pointer
->	O
load_factor	float
)	O
;	O
}	O
WGET_GCC_NONNULL	O
(	O
(	O
1	int
,	O
3	int
)	O
)	O
static	O
int	O
hashmap_new_entry	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
unsigned	O
int	O
hash	pointer
,	O
const	O
char	O
*	O
key	int
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
_entry_t	struct
*	O
entry	pointer
;	O
if	O
(	O
!	O
(	O
entry	pointer
=	O
wget_malloc	function
(	O
sizeof	O
(	O
_entry_t	struct
)	O
)	O
)	O
)	O
return	O
WGET_E_MEMORY	int
;	O
int	O
pos	int
=	O
hash	pointer
%	O
h	pointer
->	O
max	int
;	O
entry	pointer
->	O
key	int
=	O
(	O
void	O
*	O
)	O
key	int
;	O
entry	pointer
->	O
value	pointer
=	O
(	O
void	O
*	O
)	O
value	pointer
;	O
entry	pointer
->	O
hash	pointer
=	O
hash	pointer
;	O
entry	pointer
->	O
next	pointer
=	O
h	pointer
->	O
entry	pointer
[	O
pos	int
]	O
;	O
h	pointer
->	O
entry	pointer
[	O
pos	int
]	O
=	O
entry	pointer
;	O
if	O
(	O
++	O
h	pointer
->	O
cur	int
>=	O
h	pointer
->	O
threshold	int
)	O
{	O
int	O
newsize	int
=	O
(	O
int	O
)	O
(	O
h	pointer
->	O
max	int
*	O
h	pointer
->	O
resize_factor	float
)	O
;	O
if	O
(	O
newsize	int
>	O
0	int
)	O
{	O
_entry_t	struct
*	O
*	O
new_entry	pointer
;	O
if	O
(	O
!	O
(	O
new_entry	pointer
=	O
wget_calloc	function
(	O
newsize	int
,	O
sizeof	O
(	O
_entry_t	struct
*	O
)	O
)	O
)	O
)	O
{	O
h	pointer
->	O
cur	int
--	O
;	O
xfree	O
(	O
h	pointer
->	O
entry	pointer
[	O
pos	int
]	O
)	O
;	O
return	O
WGET_E_MEMORY	int
;	O
}	O
hashmap_rehash	function
(	O
h	pointer
,	O
new_entry	pointer
,	O
newsize	int
,	O
0	int
)	O
;	O
}	O
}	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
int	O
wget_hashmap_put	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
const	O
void	O
*	O
key	int
,	O
const	O
void	O
*	O
value	pointer
)	O
{	O
if	O
(	O
h	pointer
&&	O
key	int
)	O
{	O
_entry_t	struct
*	O
entry	pointer
;	O
unsigned	O
int	O
hash	pointer
=	O
h	pointer
->	O
hash	pointer
(	O
key	int
)	O
;	O
int	O
rc	int
;	O
if	O
(	O
(	O
entry	pointer
=	O
hashmap_find_entry	function
(	O
h	pointer
,	O
key	int
,	O
hash	pointer
)	O
)	O
)	O
{	O
if	O
(	O
entry	pointer
->	O
key	int
!=	O
key	int
&&	O
entry	pointer
->	O
key	int
!=	O
value	pointer
)	O
{	O
if	O
(	O
h	pointer
->	O
key_destructor	pointer
)	O
h	pointer
->	O
key_destructor	pointer
(	O
entry	pointer
->	O
key	int
)	O
;	O
if	O
(	O
entry	pointer
->	O
key	int
==	O
entry	pointer
->	O
value	pointer
)	O
entry	pointer
->	O
value	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
entry	pointer
->	O
value	pointer
!=	O
value	pointer
&&	O
entry	pointer
->	O
value	pointer
!=	O
key	int
)	O
{	O
if	O
(	O
h	pointer
->	O
value_destructor	pointer
)	O
h	pointer
->	O
value_destructor	pointer
(	O
entry	pointer
->	O
value	pointer
)	O
;	O
}	O
entry	pointer
->	O
key	int
=	O
(	O
void	O
*	O
)	O
key	int
;	O
entry	pointer
->	O
value	pointer
=	O
(	O
void	O
*	O
)	O
value	pointer
;	O
return	O
1	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
hashmap_new_entry	function
(	O
h	pointer
,	O
hash	pointer
,	O
key	int
,	O
value	pointer
)	O
)	O
<	O
0	int
)	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
wget_hashmap_contains	function
(	O
const	O
wget_hashmap	struct
*	O
h	pointer
,	O
const	O
void	O
*	O
key	int
)	O
{	O
return	O
wget_hashmap_get	function
(	O
h	pointer
,	O
key	int
,	O
NULL	O
)	O
;	O
}	O
int	O
wget_hashmap_get	function
(	O
const	O
wget_hashmap	struct
*	O
h	pointer
,	O
const	O
void	O
*	O
key	int
,	O
void	O
*	O
*	O
value	pointer
)	O
{	O
if	O
(	O
h	pointer
&&	O
key	int
)	O
{	O
_entry_t	struct
*	O
entry	pointer
;	O
if	O
(	O
(	O
entry	pointer
=	O
hashmap_find_entry	function
(	O
h	pointer
,	O
key	int
,	O
h	pointer
->	O
hash	pointer
(	O
key	int
)	O
)	O
)	O
)	O
{	O
if	O
(	O
value	pointer
)	O
*	O
value	pointer
=	O
entry	pointer
->	O
value	pointer
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
WGET_GCC_NONNULL_ALL	O
static	O
int	O
hashmap_remove_entry	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
const	O
char	O
*	O
key	int
,	O
int	O
free_kv	int
)	O
{	O
_entry_t	struct
*	O
entry	pointer
,	O
*	O
next	pointer
,	O
*	O
prev	pointer
=	O
NULL	O
;	O
unsigned	O
int	O
hash	pointer
=	O
h	pointer
->	O
hash	pointer
(	O
key	int
)	O
;	O
int	O
pos	int
=	O
hash	pointer
%	O
h	pointer
->	O
max	int
;	O
for	O
(	O
entry	pointer
=	O
h	pointer
->	O
entry	pointer
[	O
pos	int
]	O
;	O
entry	pointer
;	O
prev	pointer
=	O
entry	pointer
,	O
entry	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
entry	pointer
->	O
next	pointer
;	O
if	O
(	O
hash	pointer
==	O
entry	pointer
->	O
hash	pointer
&&	O
(	O
key	int
==	O
entry	pointer
->	O
key	int
||	O
!	O
h	pointer
->	O
cmp	pointer
(	O
key	int
,	O
entry	pointer
->	O
key	int
)	O
)	O
)	O
{	O
if	O
(	O
prev	pointer
)	O
prev	pointer
->	O
next	pointer
=	O
next	pointer
;	O
else	O
h	pointer
->	O
entry	pointer
[	O
pos	int
]	O
=	O
next	pointer
;	O
if	O
(	O
free_kv	int
)	O
{	O
if	O
(	O
h	pointer
->	O
key_destructor	pointer
)	O
h	pointer
->	O
key_destructor	pointer
(	O
entry	pointer
->	O
key	int
)	O
;	O
if	O
(	O
entry	pointer
->	O
value	pointer
!=	O
entry	pointer
->	O
key	int
)	O
{	O
if	O
(	O
h	pointer
->	O
value_destructor	pointer
)	O
h	pointer
->	O
value_destructor	pointer
(	O
entry	pointer
->	O
value	pointer
)	O
;	O
}	O
entry	pointer
->	O
key	int
=	O
NULL	O
;	O
entry	pointer
->	O
value	pointer
=	O
NULL	O
;	O
}	O
xfree	O
(	O
entry	pointer
)	O
;	O
h	pointer
->	O
cur	int
--	O
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
wget_hashmap_remove	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
const	O
void	O
*	O
key	int
)	O
{	O
if	O
(	O
h	pointer
&&	O
key	int
)	O
return	O
hashmap_remove_entry	function
(	O
h	pointer
,	O
key	int
,	O
1	int
)	O
;	O
else	O
return	O
0	int
;	O
}	O
int	O
wget_hashmap_remove_nofree	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
const	O
void	O
*	O
key	int
)	O
{	O
if	O
(	O
h	pointer
&&	O
key	int
)	O
return	O
hashmap_remove_entry	function
(	O
h	pointer
,	O
key	int
,	O
0	int
)	O
;	O
else	O
return	O
0	int
;	O
}	O
void	O
wget_hashmap_free	function
(	O
wget_hashmap	struct
*	O
*	O
h	pointer
)	O
{	O
if	O
(	O
h	pointer
&&	O
*	O
h	pointer
)	O
{	O
wget_hashmap_clear	function
(	O
*	O
h	pointer
)	O
;	O
xfree	O
(	O
(	O
*	O
h	pointer
)	O
->	O
entry	pointer
)	O
;	O
xfree	O
(	O
*	O
h	pointer
)	O
;	O
}	O
}	O
void	O
wget_hashmap_clear	function
(	O
wget_hashmap	struct
*	O
h	pointer
)	O
{	O
if	O
(	O
h	pointer
)	O
{	O
_entry_t	struct
*	O
entry	pointer
,	O
*	O
next	pointer
;	O
int	O
it	int
,	O
cur	int
=	O
h	pointer
->	O
cur	int
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
h	pointer
->	O
max	int
&&	O
cur	int
;	O
it	int
++	O
)	O
{	O
for	O
(	O
entry	pointer
=	O
h	pointer
->	O
entry	pointer
[	O
it	int
]	O
;	O
entry	pointer
;	O
entry	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
entry	pointer
->	O
next	pointer
;	O
if	O
(	O
h	pointer
->	O
key_destructor	pointer
)	O
h	pointer
->	O
key_destructor	pointer
(	O
entry	pointer
->	O
key	int
)	O
;	O
if	O
(	O
entry	pointer
->	O
value	pointer
!=	O
entry	pointer
->	O
key	int
&&	O
h	pointer
->	O
value_destructor	pointer
)	O
h	pointer
->	O
value_destructor	pointer
(	O
entry	pointer
->	O
value	pointer
)	O
;	O
entry	pointer
->	O
key	int
=	O
NULL	O
;	O
entry	pointer
->	O
value	pointer
=	O
NULL	O
;	O
xfree	O
(	O
entry	pointer
)	O
;	O
cur	int
--	O
;	O
}	O
h	pointer
->	O
entry	pointer
[	O
it	int
]	O
=	O
NULL	O
;	O
}	O
h	pointer
->	O
cur	int
=	O
0	int
;	O
}	O
}	O
int	O
wget_hashmap_size	function
(	O
const	O
wget_hashmap	struct
*	O
h	pointer
)	O
{	O
return	O
h	pointer
?	O
h	pointer
->	O
cur	int
:	O
0	int
;	O
}	O
int	O
wget_hashmap_browse	function
(	O
const	O
wget_hashmap	struct
*	O
h	pointer
,	O
wget_hashmap_browse_fn	function
*	O
browse	pointer
,	O
void	O
*	O
ctx	pointer
)	O
{	O
if	O
(	O
h	pointer
&&	O
browse	pointer
)	O
{	O
_entry_t	struct
*	O
entry	pointer
;	O
int	O
it	int
,	O
ret	int
,	O
cur	int
=	O
h	pointer
->	O
cur	int
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
h	pointer
->	O
max	int
&&	O
cur	int
;	O
it	int
++	O
)	O
{	O
for	O
(	O
entry	pointer
=	O
h	pointer
->	O
entry	pointer
[	O
it	int
]	O
;	O
entry	pointer
;	O
entry	pointer
=	O
entry	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
browse	pointer
(	O
ctx	pointer
,	O
entry	pointer
->	O
key	int
,	O
entry	pointer
->	O
value	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
cur	int
--	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
void	O
wget_hashmap_setcmpfunc	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
wget_hashmap_compare_fn	function
*	O
cmp	pointer
)	O
{	O
if	O
(	O
h	pointer
)	O
h	pointer
->	O
cmp	pointer
=	O
cmp	pointer
;	O
}	O
int	O
wget_hashmap_sethashfunc	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
wget_hashmap_hash_fn	function
*	O
hash	pointer
)	O
{	O
if	O
(	O
!	O
h	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
h	pointer
->	O
cur	int
)	O
return	O
WGET_E_SUCCESS	int
;	O
_entry_t	struct
*	O
*	O
new_entry	pointer
=	O
wget_calloc	function
(	O
h	pointer
->	O
max	int
,	O
sizeof	O
(	O
_entry_t	struct
*	O
)	O
)	O
;	O
if	O
(	O
!	O
new_entry	pointer
)	O
return	O
WGET_E_MEMORY	int
;	O
h	pointer
->	O
hash	pointer
=	O
hash	pointer
;	O
hashmap_rehash	function
(	O
h	pointer
,	O
new_entry	pointer
,	O
h	pointer
->	O
max	int
,	O
1	int
)	O
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
void	O
wget_hashmap_set_key_destructor	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
wget_hashmap_key_destructor	function
*	O
destructor	pointer
)	O
{	O
if	O
(	O
h	pointer
)	O
h	pointer
->	O
key_destructor	pointer
=	O
destructor	pointer
;	O
}	O
void	O
wget_hashmap_set_value_destructor	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
wget_hashmap_value_destructor	function
*	O
destructor	pointer
)	O
{	O
if	O
(	O
h	pointer
)	O
h	pointer
->	O
value_destructor	pointer
=	O
destructor	pointer
;	O
}	O
void	O
wget_hashmap_set_load_factor	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
float	O
factor	float
)	O
{	O
if	O
(	O
h	pointer
)	O
{	O
h	pointer
->	O
load_factor	float
=	O
factor	float
;	O
h	pointer
->	O
threshold	int
=	O
(	O
int	O
)	O
(	O
h	pointer
->	O
max	int
*	O
h	pointer
->	O
load_factor	float
)	O
;	O
}	O
}	O
void	O
wget_hashmap_set_resize_factor	function
(	O
wget_hashmap	struct
*	O
h	pointer
,	O
float	O
factor	float
)	O
{	O
if	O
(	O
h	pointer
)	O
h	pointer
->	O
resize_factor	float
=	O
factor	float
;	O
}	O
