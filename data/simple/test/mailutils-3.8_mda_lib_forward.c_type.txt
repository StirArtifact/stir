static	O
char	O
*	O
forward_file	pointer
;	O
static	O
int	O
forward_file_checks	int
=	O
FORWARD_FILE_PERM_CHECK	O
;	O
static	O
int	O
cb2_forward_file_checks	function
(	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
mu_file_safety_compose	function
(	O
data	pointer
,	O
name	pointer
,	O
FORWARD_FILE_PERM_CHECK	O
)	O
)	O
mu_error	function
(	O
_	O
(	O
"unknown keyword: %s"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
cb_forward_file_checks	function
(	O
void	O
*	O
data	pointer
,	O
mu_config_value_t	struct
*	O
arg	pointer
)	O
{	O
return	O
mu_cfg_string_value_cb	function
(	O
arg	pointer
,	O
cb2_forward_file_checks	function
,	O
&	O
forward_file_checks	int
)	O
;	O
}	O
struct	O
mu_cfg_param	struct
mda_forward_cfg	array
[	O
]	O
=	O
{	O
{	O
"file"	pointer
,	O
mu_c_string	int
,	O
&	O
forward_file	pointer
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Process forward file."	pointer
)	O
}	O
,	O
{	O
"file-checks"	pointer
,	O
mu_cfg_callback	int
,	O
NULL	O
,	O
0	int
,	O
cb_forward_file_checks	function
,	O
N_	O
(	O
"Configure safety checks for the forward file."	pointer
)	O
,	O
N_	O
(	O
"arg: list"	pointer
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
forward_to_email	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_address_t	pointer
from	pointer
,	O
mu_mailer_t	pointer
mailer	pointer
,	O
const	O
char	O
*	O
email	pointer
)	O
{	O
mu_address_t	pointer
to	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
to	pointer
,	O
email	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"%s: cannot create email: %s"	pointer
)	O
,	O
email	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_mailer_send_message	function
(	O
mailer	pointer
,	O
msg	pointer
,	O
from	pointer
,	O
to	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"Sending message to `%s' failed: %s"	pointer
)	O
,	O
email	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_address_destroy	function
(	O
&	O
to	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
forward_mailer_create	function
(	O
mu_mailer_t	pointer
*	O
pmailer	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
*	O
pmailer	pointer
==	O
NULL	O
)	O
{	O
rc	int
=	O
mu_mailer_create	function
(	O
pmailer	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
const	O
char	O
*	O
url	pointer
=	O
NULL	O
;	O
mu_mailer_get_url_default	function
(	O
&	O
url	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"Creating mailer `%s' failed: %s"	pointer
)	O
,	O
url	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_mailer_open	function
(	O
*	O
pmailer	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
const	O
char	O
*	O
url	pointer
=	O
NULL	O
;	O
mu_mailer_get_url_default	function
(	O
&	O
url	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"Opening mailer `%s' failed: %s"	pointer
)	O
,	O
url	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_mailer_destroy	function
(	O
pmailer	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
create_from_address	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_address_t	pointer
*	O
pfrom	pointer
)	O
{	O
if	O
(	O
!	O
*	O
pfrom	pointer
)	O
{	O
mu_envelope_t	pointer
envelope	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
int	O
status	int
=	O
mu_message_get_envelope	function
(	O
msg	pointer
,	O
&	O
envelope	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot get envelope: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
status	int
=	O
mu_envelope_sget_sender	function
(	O
envelope	pointer
,	O
&	O
str	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot get envelope sender: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
status	int
=	O
mu_address_create	function
(	O
pfrom	pointer
,	O
str	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"%s: cannot create email: %s"	pointer
)	O
,	O
str	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
enum	O
mda_forward_result	enum
process_forward	function
(	O
mu_message_t	pointer
msg	pointer
,	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
myname	pointer
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
file	pointer
;	O
size_t	long
size	long
=	O
0	int
,	O
n	pointer
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
enum	O
mda_forward_result	enum
result	pointer
=	O
mda_forward_ok	int
;	O
mu_mailer_t	pointer
mailer	pointer
=	O
NULL	O
;	O
mu_address_t	pointer
from	pointer
=	O
NULL	O
;	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
file	pointer
,	O
filename	pointer
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"%s: cannot open forward file: %s"	pointer
)	O
,	O
filename	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
mda_forward_error	int
;	O
}	O
while	O
(	O
mu_stream_getline	function
(	O
file	pointer
,	O
&	O
buf	pointer
,	O
&	O
size	long
,	O
&	O
n	pointer
)	O
==	O
0	int
&&	O
n	pointer
>	O
0	int
)	O
{	O
char	O
*	O
p	pointer
;	O
mu_rtrim_class	function
(	O
buf	pointer
,	O
MU_CTYPE_SPACE	int
)	O
;	O
p	pointer
=	O
mu_str_skip_class	function
(	O
buf	pointer
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
'#'	O
)	O
{	O
if	O
(	O
strchr	function
(	O
p	pointer
,	O
'@'	O
)	O
)	O
{	O
if	O
(	O
create_from_address	function
(	O
msg	pointer
,	O
&	O
from	pointer
)	O
||	O
forward_mailer_create	function
(	O
&	O
mailer	pointer
)	O
||	O
forward_to_email	function
(	O
msg	pointer
,	O
from	pointer
,	O
mailer	pointer
,	O
p	pointer
)	O
)	O
result	pointer
=	O
mda_forward_error	int
;	O
}	O
else	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
)	O
p	pointer
++	O
;	O
if	O
(	O
strcmp	function
(	O
p	pointer
,	O
myname	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
result	pointer
==	O
mda_forward_ok	int
)	O
result	pointer
=	O
mda_forward_metoo	int
;	O
}	O
else	O
if	O
(	O
mda_deliver_to_user	function
(	O
msg	pointer
,	O
p	pointer
,	O
NULL	O
)	O
)	O
result	pointer
=	O
mda_forward_error	int
;	O
}	O
}	O
}	O
mu_address_destroy	function
(	O
&	O
from	pointer
)	O
;	O
if	O
(	O
mailer	pointer
)	O
{	O
mu_mailer_close	function
(	O
mailer	pointer
)	O
;	O
mu_mailer_destroy	function
(	O
&	O
mailer	pointer
)	O
;	O
}	O
free	function
(	O
buf	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
file	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
mu_list_t	pointer
idlist	pointer
;	O
enum	O
mda_forward_result	enum
mda_forward	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
)	O
{	O
struct	O
stat	struct
st	pointer
;	O
char	O
*	O
filename	pointer
;	O
enum	O
mda_forward_result	enum
result	pointer
=	O
mda_forward_none	int
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
forward_file	pointer
)	O
return	O
mda_forward_none	int
;	O
if	O
(	O
forward_file	pointer
[	O
0	int
]	O
!=	O
'/'	O
)	O
{	O
if	O
(	O
stat	struct
(	O
auth	pointer
->	O
dir	pointer
,	O
&	O
st	pointer
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
;	O
else	O
if	O
(	O
!	O
S_ISDIR	O
(	O
st	pointer
.	O
st_mode	int
)	O
)	O
mu_error	function
(	O
_	O
(	O
"%s: not a directory"	pointer
)	O
,	O
auth	pointer
->	O
dir	pointer
)	O
;	O
else	O
mu_error	function
(	O
_	O
(	O
"%s: cannot stat directory: %s"	pointer
)	O
,	O
auth	pointer
->	O
dir	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
mda_forward_none	int
;	O
}	O
filename	pointer
=	O
mu_make_file_name	O
(	O
auth	pointer
->	O
dir	pointer
,	O
forward_file	pointer
)	O
;	O
}	O
else	O
filename	pointer
=	O
strdup	function
(	O
forward_file	pointer
)	O
;	O
if	O
(	O
!	O
filename	pointer
)	O
{	O
mu_error	function
(	O
"%s"	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
mda_forward_error	int
;	O
}	O
if	O
(	O
!	O
idlist	pointer
)	O
mu_list_create	function
(	O
&	O
idlist	pointer
)	O
;	O
rc	int
=	O
mu_file_safety_check	function
(	O
filename	pointer
,	O
forward_file_checks	int
,	O
auth	pointer
->	O
uid	int
,	O
idlist	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
result	pointer
=	O
process_forward	function
(	O
msg	pointer
,	O
filename	pointer
,	O
auth	pointer
->	O
name	pointer
)	O
;	O
else	O
if	O
(	O
rc	int
==	O
MU_ERR_EXISTS	O
)	O
mu_diag_output	function
(	O
MU_DIAG_NOTICE	O
,	O
_	O
(	O
"skipping forward file %s: already processed"	pointer
)	O
,	O
filename	pointer
)	O
;	O
else	O
mu_error	function
(	O
_	O
(	O
"ignoring forward file %s: %s"	pointer
)	O
,	O
filename	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
free	function
(	O
filename	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
