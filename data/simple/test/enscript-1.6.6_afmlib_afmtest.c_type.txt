static	O
void	O
usage	function
(	O
)	O
;	O
static	O
char	O
*	O
program	pointer
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
AFMHandle	pointer
afm	pointer
;	O
AFMFont	pointer
font	pointer
;	O
AFMError	int
error	int
;	O
AFMNumber	double
width	double
,	O
height	double
;	O
char	O
buf	pointer
[	O
256	int
]	O
;	O
program	pointer
=	O
strrchr	function
(	O
argv	array
[	O
0	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
program	pointer
)	O
program	pointer
++	O
;	O
else	O
program	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
error	int
=	O
afm_create	function
(	O
NULL	O
,	O
0	int
,	O
&	O
afm	pointer
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't create library"	pointer
)	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
usage	function
(	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"dump"	pointer
)	O
==	O
0	int
&&	O
argc	int
==	O
3	int
)	O
{	O
error	int
=	O
afm_open_file	function
(	O
afm	pointer
,	O
AFM_I_ALL	int
,	O
argv	array
[	O
2	int
]	O
,	O
&	O
font	pointer
)	O
;	O
if	O
(	O
error	int
!=	O
AFM_SUCCESS	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: couldn't open font \"%s\", using default\n"	pointer
,	O
program	pointer
,	O
argv	array
[	O
2	int
]	O
)	O
;	O
error	int
=	O
afm_open_default_font	function
(	O
afm	pointer
,	O
&	O
font	pointer
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't open default font"	pointer
)	O
;	O
}	O
afm_font_dump	function
(	O
stdout	pointer
,	O
font	pointer
)	O
;	O
error	int
=	O
afm_close_font	function
(	O
font	pointer
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't close font"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"stringwidth"	pointer
)	O
==	O
0	int
&&	O
argc	int
==	O
5	int
)	O
{	O
error	int
=	O
afm_open_file	function
(	O
afm	pointer
,	O
AFM_I_ALL	int
,	O
argv	array
[	O
2	int
]	O
,	O
&	O
font	pointer
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't open font"	pointer
)	O
;	O
error	int
=	O
afm_font_encoding	function
(	O
font	pointer
,	O
AFM_ENCODING_ISO_8859_1	int
,	O
0	int
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't encode font"	pointer
)	O
;	O
error	int
=	O
afm_font_stringwidth	function
(	O
font	pointer
,	O
atof	function
(	O
argv	array
[	O
3	int
]	O
)	O
,	O
argv	array
[	O
4	int
]	O
,	O
strlen	function
(	O
argv	array
[	O
4	int
]	O
)	O
,	O
&	O
width	double
,	O
&	O
height	double
)	O
;	O
printf	function
(	O
"stringwidth is [%g %g]\n"	pointer
,	O
width	double
,	O
height	double
)	O
;	O
error	int
=	O
afm_close_font	function
(	O
font	pointer
)	O
;	O
HANDLE_ERROR	O
(	O
"couldn't close font"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"chardump"	pointer
)	O
==	O
0	int
&&	O
argc	int
>	O
2	int
)	O
{	O
int	O
i	int
,	O
j	int
;	O
for	O
(	O
i	int
=	O
2	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
error	int
=	O
afm_open_file	function
(	O
afm	pointer
,	O
AFM_I_COMPOSITES	int
,	O
argv	array
[	O
i	int
]	O
,	O
&	O
font	pointer
)	O
;	O
if	O
(	O
error	int
!=	O
AFM_SUCCESS	int
)	O
{	O
afm_error_to_string	function
(	O
error	int
,	O
buf	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: couldn't open AFM file \"%s\": %s\n"	pointer
,	O
program	pointer
,	O
argv	array
[	O
i	int
]	O
,	O
buf	pointer
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
font	pointer
->	O
num_character_metrics	long
;	O
j	int
++	O
)	O
{	O
AFMIndividualCharacterMetrics	struct
*	O
cm	pointer
;	O
cm	pointer
=	O
&	O
font	pointer
->	O
character_metrics	pointer
[	O
j	int
]	O
;	O
printf	function
(	O
"/%-30s %3ld glyph %s\n"	pointer
,	O
cm	pointer
->	O
name	pointer
,	O
cm	pointer
->	O
character_code	long
,	O
font	pointer
->	O
global_info	struct
.	O
FontName	pointer
)	O
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
font	pointer
->	O
num_composites	long
;	O
j	int
++	O
)	O
{	O
AFMComposite	struct
*	O
cc	pointer
;	O
cc	pointer
=	O
&	O
font	pointer
->	O
composites	pointer
[	O
j	int
]	O
;	O
printf	function
(	O
"/%-30s -1 composite %s\n"	pointer
,	O
cc	pointer
->	O
name	pointer
,	O
font	pointer
->	O
global_info	struct
.	O
FontName	pointer
)	O
;	O
}	O
(	O
void	O
)	O
afm_close_font	function
(	O
font	pointer
)	O
;	O
}	O
}	O
else	O
{	O
usage	function
(	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
usage	function
(	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s dump file\n"	pointer
"       %s stringwidth file ptsize string\n"	pointer
"       %s chardump file [file ...]\n"	pointer
,	O
program	pointer
,	O
program	pointer
,	O
program	pointer
)	O
;	O
}	O
