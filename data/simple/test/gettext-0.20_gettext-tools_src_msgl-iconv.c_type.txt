static	O
void	O
conversion_error	function
(	O
const	O
struct	O
conversion_context	struct
*	O
context	pointer
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
conversion_error	function
(	O
const	O
struct	O
conversion_context	struct
*	O
context	pointer
)	O
{	O
if	O
(	O
context	pointer
->	O
to_code	pointer
==	O
po_charset_utf8	pointer
)	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
context	pointer
->	O
message	pointer
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	function
(	O
_	O
(	O
"%s: input is not valid in \"%s\" encoding"	pointer
)	O
,	O
context	pointer
->	O
from_filename	pointer
,	O
context	pointer
->	O
from_code	pointer
)	O
)	O
;	O
else	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
context	pointer
->	O
message	pointer
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	function
(	O
_	O
(	O
"%s: error while converting from \"%s\" encoding to \"%s\" encoding"	pointer
)	O
,	O
context	pointer
->	O
from_filename	pointer
,	O
context	pointer
->	O
from_code	pointer
,	O
context	pointer
->	O
to_code	pointer
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
char	O
*	O
convert_string_directly	function
(	O
iconv_t	pointer
cd	pointer
,	O
const	O
char	O
*	O
string	pointer
,	O
const	O
struct	O
conversion_context	struct
*	O
context	pointer
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
string	pointer
)	O
+	O
1	int
;	O
char	O
*	O
result	pointer
=	O
NULL	O
;	O
size_t	long
resultlen	long
=	O
0	int
;	O
if	O
(	O
xmem_cd_iconv	function
(	O
string	pointer
,	O
len	long
,	O
cd	pointer
,	O
&	O
result	pointer
,	O
&	O
resultlen	long
)	O
==	O
0	int
)	O
if	O
(	O
resultlen	long
>	O
0	int
&&	O
result	pointer
[	O
resultlen	long
-	O
1	int
]	O
==	O
'\0'	O
&&	O
strlen	function
(	O
result	pointer
)	O
==	O
resultlen	long
-	O
1	int
)	O
return	O
result	pointer
;	O
conversion_error	function
(	O
context	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
convert_string	function
(	O
const	O
iconveh_t	struct
*	O
cd	pointer
,	O
const	O
char	O
*	O
string	pointer
,	O
const	O
struct	O
conversion_context	struct
*	O
context	pointer
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
string	pointer
)	O
+	O
1	int
;	O
char	O
*	O
result	pointer
=	O
NULL	O
;	O
size_t	long
resultlen	long
=	O
0	int
;	O
if	O
(	O
xmem_cd_iconveh	function
(	O
string	pointer
,	O
len	long
,	O
cd	pointer
,	O
iconveh_error	int
,	O
NULL	O
,	O
&	O
result	pointer
,	O
&	O
resultlen	long
)	O
==	O
0	int
)	O
if	O
(	O
resultlen	long
>	O
0	int
&&	O
result	pointer
[	O
resultlen	long
-	O
1	int
]	O
==	O
'\0'	O
&&	O
strlen	function
(	O
result	pointer
)	O
==	O
resultlen	long
-	O
1	int
)	O
return	O
result	pointer
;	O
conversion_error	function
(	O
context	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
convert_string_list	function
(	O
const	O
iconveh_t	struct
*	O
cd	pointer
,	O
string_list_ty	struct
*	O
slp	pointer
,	O
const	O
struct	O
conversion_context	struct
*	O
context	pointer
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
slp	pointer
!=	O
NULL	O
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
slp	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
slp	pointer
->	O
item	pointer
[	O
i	long
]	O
=	O
convert_string	function
(	O
cd	pointer
,	O
slp	pointer
->	O
item	pointer
[	O
i	long
]	O
,	O
context	pointer
)	O
;	O
}	O
static	O
void	O
convert_prev_msgid	function
(	O
const	O
iconveh_t	struct
*	O
cd	pointer
,	O
message_ty	struct
*	O
mp	pointer
,	O
const	O
struct	O
conversion_context	struct
*	O
context	pointer
)	O
{	O
if	O
(	O
mp	pointer
->	O
prev_msgctxt	pointer
!=	O
NULL	O
)	O
mp	pointer
->	O
prev_msgctxt	pointer
=	O
convert_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
prev_msgctxt	pointer
,	O
context	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
prev_msgid	pointer
!=	O
NULL	O
)	O
mp	pointer
->	O
prev_msgid	pointer
=	O
convert_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
prev_msgid	pointer
,	O
context	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
prev_msgid_plural	pointer
!=	O
NULL	O
)	O
mp	pointer
->	O
prev_msgid_plural	pointer
=	O
convert_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
prev_msgid_plural	pointer
,	O
context	pointer
)	O
;	O
}	O
static	O
void	O
convert_msgid	function
(	O
const	O
iconveh_t	struct
*	O
cd	pointer
,	O
message_ty	struct
*	O
mp	pointer
,	O
const	O
struct	O
conversion_context	struct
*	O
context	pointer
)	O
{	O
if	O
(	O
mp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
)	O
mp	pointer
->	O
msgctxt	pointer
=	O
convert_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
msgctxt	pointer
,	O
context	pointer
)	O
;	O
mp	pointer
->	O
msgid	pointer
=	O
convert_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
msgid	pointer
,	O
context	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
msgid_plural	pointer
!=	O
NULL	O
)	O
mp	pointer
->	O
msgid_plural	pointer
=	O
convert_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
msgid_plural	pointer
,	O
context	pointer
)	O
;	O
}	O
static	O
void	O
convert_msgstr	function
(	O
const	O
iconveh_t	struct
*	O
cd	pointer
,	O
message_ty	struct
*	O
mp	pointer
,	O
const	O
struct	O
conversion_context	struct
*	O
context	pointer
)	O
{	O
char	O
*	O
result	pointer
=	O
NULL	O
;	O
size_t	long
resultlen	long
=	O
0	int
;	O
if	O
(	O
!	O
(	O
mp	pointer
->	O
msgstr_len	long
>	O
0	int
&&	O
mp	pointer
->	O
msgstr	pointer
[	O
mp	pointer
->	O
msgstr_len	long
-	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
xmem_cd_iconveh	function
(	O
mp	pointer
->	O
msgstr	pointer
,	O
mp	pointer
->	O
msgstr_len	long
,	O
cd	pointer
,	O
iconveh_error	int
,	O
NULL	O
,	O
&	O
result	pointer
,	O
&	O
resultlen	long
)	O
==	O
0	int
)	O
if	O
(	O
resultlen	long
>	O
0	int
&&	O
result	pointer
[	O
resultlen	long
-	O
1	int
]	O
==	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
const	O
char	O
*	O
pend	pointer
;	O
int	O
nulcount1	int
;	O
int	O
nulcount2	int
;	O
for	O
(	O
p	pointer
=	O
mp	pointer
->	O
msgstr	pointer
,	O
pend	pointer
=	O
p	pointer
+	O
mp	pointer
->	O
msgstr_len	long
,	O
nulcount1	int
=	O
0	int
;	O
p	pointer
<	O
pend	pointer
;	O
p	pointer
+=	O
strlen	function
(	O
p	pointer
)	O
+	O
1	int
,	O
nulcount1	int
++	O
)	O
;	O
for	O
(	O
p	pointer
=	O
result	pointer
,	O
pend	pointer
=	O
p	pointer
+	O
resultlen	long
,	O
nulcount2	int
=	O
0	int
;	O
p	pointer
<	O
pend	pointer
;	O
p	pointer
+=	O
strlen	function
(	O
p	pointer
)	O
+	O
1	int
,	O
nulcount2	int
++	O
)	O
;	O
if	O
(	O
nulcount1	int
==	O
nulcount2	int
)	O
{	O
mp	pointer
->	O
msgstr	pointer
=	O
result	pointer
;	O
mp	pointer
->	O
msgstr_len	long
=	O
resultlen	long
;	O
return	O
;	O
}	O
}	O
conversion_error	function
(	O
context	pointer
)	O
;	O
}	O
static	O
bool	bool
iconv_message_list_internal	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
canon_from_code	pointer
,	O
const	O
char	O
*	O
canon_to_code	pointer
,	O
bool	bool
update_header	bool
,	O
const	O
char	O
*	O
from_filename	pointer
)	O
{	O
bool	bool
canon_from_code_overridden	bool
=	O
(	O
canon_from_code	pointer
!=	O
NULL	O
)	O
;	O
bool	bool
msgids_changed	bool
;	O
size_t	long
j	long
;	O
if	O
(	O
mlp	pointer
->	O
nitems	long
==	O
0	int
)	O
return	O
false	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
&&	O
!	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
obsolete	bool
)	O
{	O
const	O
char	O
*	O
header	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
msgstr	pointer
;	O
if	O
(	O
header	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
charsetstr	pointer
=	O
c_strstr	function
(	O
header	pointer
,	O
"charset="	pointer
)	O
;	O
if	O
(	O
charsetstr	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
len	long
;	O
char	O
*	O
charset	pointer
;	O
const	O
char	O
*	O
canon_charset	pointer
;	O
charsetstr	pointer
+=	O
strlen	function
(	O
"charset="	pointer
)	O
;	O
len	long
=	O
strcspn	function
(	O
charsetstr	pointer
,	O
" \t\n"	pointer
)	O
;	O
charset	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
charset	pointer
,	O
charsetstr	pointer
,	O
len	long
)	O
;	O
charset	pointer
[	O
len	long
]	O
=	O
'\0'	O
;	O
canon_charset	pointer
=	O
po_charset_canonicalize	function
(	O
charset	pointer
)	O
;	O
if	O
(	O
canon_charset	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
canon_from_code_overridden	bool
)	O
{	O
const	O
char	O
*	O
filename	pointer
=	O
from_filename	pointer
;	O
size_t	long
filenamelen	long
;	O
if	O
(	O
filename	pointer
!=	O
NULL	O
&&	O
(	O
filenamelen	long
=	O
strlen	function
(	O
filename	pointer
)	O
)	O
>=	O
4	int
&&	O
memcmp	function
(	O
filename	pointer
+	O
filenamelen	long
-	O
4	int
,	O
".pot"	pointer
,	O
4	int
)	O
==	O
0	int
&&	O
strcmp	function
(	O
charset	pointer
,	O
"CHARSET"	pointer
)	O
==	O
0	int
)	O
canon_charset	pointer
=	O
po_charset_ascii	pointer
;	O
else	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	function
(	O
_	O
(	O
"present charset \"%s\" is not a portable encoding name"	pointer
)	O
,	O
charset	pointer
)	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
canon_from_code	pointer
==	O
NULL	O
)	O
canon_from_code	pointer
=	O
canon_charset	pointer
;	O
else	O
if	O
(	O
canon_from_code	pointer
!=	O
canon_charset	pointer
)	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	function
(	O
_	O
(	O
"two different charsets \"%s\" and \"%s\" in input file"	pointer
)	O
,	O
canon_from_code	pointer
,	O
canon_charset	pointer
)	O
)	O
;	O
}	O
freea	function
(	O
charset	pointer
)	O
;	O
if	O
(	O
update_header	bool
)	O
{	O
size_t	long
len1	long
,	O
len2	long
,	O
len3	long
;	O
char	O
*	O
new_header	pointer
;	O
len1	long
=	O
charsetstr	pointer
-	O
header	pointer
;	O
len2	long
=	O
strlen	function
(	O
canon_to_code	pointer
)	O
;	O
len3	long
=	O
(	O
header	pointer
+	O
strlen	function
(	O
header	pointer
)	O
)	O
-	O
(	O
charsetstr	pointer
+	O
len	long
)	O
;	O
new_header	pointer
=	O
XNMALLOC	O
(	O
len1	long
+	O
len2	long
+	O
len3	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
new_header	pointer
,	O
header	pointer
,	O
len1	long
)	O
;	O
memcpy	function
(	O
new_header	pointer
+	O
len1	long
,	O
canon_to_code	pointer
,	O
len2	long
)	O
;	O
memcpy	function
(	O
new_header	pointer
+	O
len1	long
+	O
len2	long
,	O
charsetstr	pointer
+	O
len	long
,	O
len3	long
+	O
1	int
)	O
;	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
msgstr	pointer
=	O
new_header	pointer
;	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
msgstr_len	long
=	O
len1	long
+	O
len2	long
+	O
len3	long
+	O
1	int
;	O
}	O
}	O
}	O
}	O
if	O
(	O
canon_from_code	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
is_ascii_message_list	function
(	O
mlp	pointer
)	O
)	O
canon_from_code	pointer
=	O
po_charset_ascii	pointer
;	O
else	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
_	O
(	O
"input file doesn't contain a header entry with a charset specification"	pointer
)	O
)	O
;	O
}	O
msgids_changed	bool
=	O
false	int
;	O
if	O
(	O
canon_from_code	pointer
!=	O
canon_to_code	pointer
)	O
{	O
iconveh_t	struct
cd	pointer
;	O
struct	O
conversion_context	struct
context	pointer
;	O
if	O
(	O
iconveh_open	function
(	O
canon_to_code	pointer
,	O
canon_from_code	pointer
,	O
&	O
cd	pointer
)	O
<	O
0	int
)	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	function
(	O
_	O
(	O
"Cannot convert from \"%s\" to \"%s\". %s relies on iconv(), and iconv() does not support this conversion."	pointer
)	O
,	O
canon_from_code	pointer
,	O
canon_to_code	pointer
,	O
basename	function
(	O
program_name	pointer
)	O
)	O
)	O
;	O
context	pointer
.	O
from_code	pointer
=	O
canon_from_code	pointer
;	O
context	pointer
.	O
to_code	pointer
=	O
canon_to_code	pointer
;	O
context	pointer
.	O
from_filename	pointer
=	O
from_filename	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
(	O
mp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
&&	O
!	O
is_ascii_string	function
(	O
mp	pointer
->	O
msgctxt	pointer
)	O
)	O
||	O
!	O
is_ascii_string	function
(	O
mp	pointer
->	O
msgid	pointer
)	O
)	O
msgids_changed	bool
=	O
true	int
;	O
context	pointer
.	O
message	pointer
=	O
mp	pointer
;	O
convert_string_list	function
(	O
&	O
cd	pointer
,	O
mp	pointer
->	O
comment	pointer
,	O
&	O
context	pointer
)	O
;	O
convert_string_list	function
(	O
&	O
cd	pointer
,	O
mp	pointer
->	O
comment_dot	pointer
,	O
&	O
context	pointer
)	O
;	O
convert_prev_msgid	function
(	O
&	O
cd	pointer
,	O
mp	pointer
,	O
&	O
context	pointer
)	O
;	O
convert_msgid	function
(	O
&	O
cd	pointer
,	O
mp	pointer
,	O
&	O
context	pointer
)	O
;	O
convert_msgstr	function
(	O
&	O
cd	pointer
,	O
mp	pointer
,	O
&	O
context	pointer
)	O
;	O
}	O
iconveh_close	function
(	O
&	O
cd	pointer
)	O
;	O
if	O
(	O
msgids_changed	bool
)	O
if	O
(	O
message_list_msgids_changed	function
(	O
mlp	pointer
)	O
)	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	function
(	O
_	O
(	O
"Conversion from \"%s\" to \"%s\" introduces duplicates: some different msgids become equal."	pointer
)	O
,	O
canon_from_code	pointer
,	O
canon_to_code	pointer
)	O
)	O
;	O
}	O
return	O
msgids_changed	bool
;	O
}	O
bool	bool
iconv_message_list	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
canon_from_code	pointer
,	O
const	O
char	O
*	O
canon_to_code	pointer
,	O
const	O
char	O
*	O
from_filename	pointer
)	O
{	O
return	O
iconv_message_list_internal	function
(	O
mlp	pointer
,	O
canon_from_code	pointer
,	O
canon_to_code	pointer
,	O
true	int
,	O
from_filename	pointer
)	O
;	O
}	O
msgdomain_list_ty	struct
*	O
iconv_msgdomain_list	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
,	O
const	O
char	O
*	O
to_code	pointer
,	O
bool	bool
update_header	bool
,	O
const	O
char	O
*	O
from_filename	pointer
)	O
{	O
const	O
char	O
*	O
canon_to_code	pointer
;	O
size_t	long
k	long
;	O
canon_to_code	pointer
=	O
po_charset_canonicalize	function
(	O
to_code	pointer
)	O
;	O
if	O
(	O
canon_to_code	pointer
==	O
NULL	O
)	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	function
(	O
_	O
(	O
"target charset \"%s\" is not a portable encoding name."	pointer
)	O
,	O
to_code	pointer
)	O
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
iconv_message_list_internal	function
(	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
,	O
mdlp	pointer
->	O
encoding	pointer
,	O
canon_to_code	pointer
,	O
update_header	bool
,	O
from_filename	pointer
)	O
;	O
mdlp	pointer
->	O
encoding	pointer
=	O
canon_to_code	pointer
;	O
return	O
mdlp	pointer
;	O
}	O
static	O
bool	bool
iconvable_string	function
(	O
const	O
iconveh_t	struct
*	O
cd	pointer
,	O
const	O
char	O
*	O
string	pointer
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
string	pointer
)	O
+	O
1	int
;	O
char	O
*	O
result	pointer
=	O
NULL	O
;	O
size_t	long
resultlen	long
=	O
0	int
;	O
if	O
(	O
xmem_cd_iconveh	function
(	O
string	pointer
,	O
len	long
,	O
cd	pointer
,	O
iconveh_error	int
,	O
NULL	O
,	O
&	O
result	pointer
,	O
&	O
resultlen	long
)	O
==	O
0	int
)	O
{	O
bool	bool
ok	bool
=	O
(	O
resultlen	long
>	O
0	int
&&	O
result	pointer
[	O
resultlen	long
-	O
1	int
]	O
==	O
'\0'	O
&&	O
strlen	function
(	O
result	pointer
)	O
==	O
resultlen	long
-	O
1	int
)	O
;	O
free	function
(	O
result	pointer
)	O
;	O
return	O
ok	bool
;	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
iconvable_string_list	function
(	O
const	O
iconveh_t	struct
*	O
cd	pointer
,	O
string_list_ty	struct
*	O
slp	pointer
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
slp	pointer
!=	O
NULL	O
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
slp	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
if	O
(	O
!	O
iconvable_string	function
(	O
cd	pointer
,	O
slp	pointer
->	O
item	pointer
[	O
i	long
]	O
)	O
)	O
return	O
false	int
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
iconvable_prev_msgid	function
(	O
const	O
iconveh_t	struct
*	O
cd	pointer
,	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
if	O
(	O
mp	pointer
->	O
prev_msgctxt	pointer
!=	O
NULL	O
)	O
if	O
(	O
!	O
iconvable_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
prev_msgctxt	pointer
)	O
)	O
return	O
false	int
;	O
if	O
(	O
mp	pointer
->	O
prev_msgid	pointer
!=	O
NULL	O
)	O
if	O
(	O
!	O
iconvable_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
prev_msgid	pointer
)	O
)	O
return	O
false	int
;	O
if	O
(	O
mp	pointer
->	O
prev_msgid_plural	pointer
!=	O
NULL	O
)	O
if	O
(	O
!	O
iconvable_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
prev_msgid_plural	pointer
)	O
)	O
return	O
false	int
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
iconvable_msgid	function
(	O
const	O
iconveh_t	struct
*	O
cd	pointer
,	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
if	O
(	O
mp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
)	O
if	O
(	O
!	O
iconvable_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
msgctxt	pointer
)	O
)	O
return	O
false	int
;	O
if	O
(	O
!	O
iconvable_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
msgid	pointer
)	O
)	O
return	O
false	int
;	O
if	O
(	O
mp	pointer
->	O
msgid_plural	pointer
!=	O
NULL	O
)	O
if	O
(	O
!	O
iconvable_string	function
(	O
cd	pointer
,	O
mp	pointer
->	O
msgid_plural	pointer
)	O
)	O
return	O
false	int
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
iconvable_msgstr	function
(	O
const	O
iconveh_t	struct
*	O
cd	pointer
,	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
char	O
*	O
result	pointer
=	O
NULL	O
;	O
size_t	long
resultlen	long
=	O
0	int
;	O
if	O
(	O
!	O
(	O
mp	pointer
->	O
msgstr_len	long
>	O
0	int
&&	O
mp	pointer
->	O
msgstr	pointer
[	O
mp	pointer
->	O
msgstr_len	long
-	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
xmem_cd_iconveh	function
(	O
mp	pointer
->	O
msgstr	pointer
,	O
mp	pointer
->	O
msgstr_len	long
,	O
cd	pointer
,	O
iconveh_error	int
,	O
NULL	O
,	O
&	O
result	pointer
,	O
&	O
resultlen	long
)	O
==	O
0	int
)	O
{	O
bool	bool
ok	bool
=	O
false	int
;	O
if	O
(	O
resultlen	long
>	O
0	int
&&	O
result	pointer
[	O
resultlen	long
-	O
1	int
]	O
==	O
'\0'	O
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
const	O
char	O
*	O
pend	pointer
;	O
int	O
nulcount1	int
;	O
int	O
nulcount2	int
;	O
for	O
(	O
p	pointer
=	O
mp	pointer
->	O
msgstr	pointer
,	O
pend	pointer
=	O
p	pointer
+	O
mp	pointer
->	O
msgstr_len	long
,	O
nulcount1	int
=	O
0	int
;	O
p	pointer
<	O
pend	pointer
;	O
p	pointer
+=	O
strlen	function
(	O
p	pointer
)	O
+	O
1	int
,	O
nulcount1	int
++	O
)	O
;	O
for	O
(	O
p	pointer
=	O
result	pointer
,	O
pend	pointer
=	O
p	pointer
+	O
resultlen	long
,	O
nulcount2	int
=	O
0	int
;	O
p	pointer
<	O
pend	pointer
;	O
p	pointer
+=	O
strlen	function
(	O
p	pointer
)	O
+	O
1	int
,	O
nulcount2	int
++	O
)	O
;	O
if	O
(	O
nulcount1	int
==	O
nulcount2	int
)	O
ok	bool
=	O
true	int
;	O
}	O
free	function
(	O
result	pointer
)	O
;	O
return	O
ok	bool
;	O
}	O
return	O
false	int
;	O
}	O
bool	bool
is_message_list_iconvable	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
canon_from_code	pointer
,	O
const	O
char	O
*	O
canon_to_code	pointer
)	O
{	O
bool	bool
canon_from_code_overridden	bool
=	O
(	O
canon_from_code	pointer
!=	O
NULL	O
)	O
;	O
size_t	long
j	long
;	O
if	O
(	O
mlp	pointer
->	O
nitems	long
==	O
0	int
)	O
return	O
true	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
&&	O
!	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
obsolete	bool
)	O
{	O
const	O
char	O
*	O
header	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
msgstr	pointer
;	O
if	O
(	O
header	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
charsetstr	pointer
=	O
c_strstr	function
(	O
header	pointer
,	O
"charset="	pointer
)	O
;	O
if	O
(	O
charsetstr	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
len	long
;	O
char	O
*	O
charset	pointer
;	O
const	O
char	O
*	O
canon_charset	pointer
;	O
charsetstr	pointer
+=	O
strlen	function
(	O
"charset="	pointer
)	O
;	O
len	long
=	O
strcspn	function
(	O
charsetstr	pointer
,	O
" \t\n"	pointer
)	O
;	O
charset	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
charset	pointer
,	O
charsetstr	pointer
,	O
len	long
)	O
;	O
charset	pointer
[	O
len	long
]	O
=	O
'\0'	O
;	O
canon_charset	pointer
=	O
po_charset_canonicalize	function
(	O
charset	pointer
)	O
;	O
if	O
(	O
canon_charset	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
canon_from_code_overridden	bool
)	O
{	O
if	O
(	O
strcmp	function
(	O
charset	pointer
,	O
"CHARSET"	pointer
)	O
==	O
0	int
)	O
canon_charset	pointer
=	O
po_charset_ascii	pointer
;	O
else	O
{	O
freea	function
(	O
charset	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
canon_from_code	pointer
==	O
NULL	O
)	O
canon_from_code	pointer
=	O
canon_charset	pointer
;	O
else	O
if	O
(	O
canon_from_code	pointer
!=	O
canon_charset	pointer
)	O
{	O
freea	function
(	O
charset	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
freea	function
(	O
charset	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
canon_from_code	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
is_ascii_message_list	function
(	O
mlp	pointer
)	O
)	O
canon_from_code	pointer
=	O
po_charset_ascii	pointer
;	O
else	O
return	O
false	int
;	O
}	O
if	O
(	O
canon_from_code	pointer
!=	O
canon_to_code	pointer
)	O
{	O
iconveh_t	struct
cd	pointer
;	O
if	O
(	O
iconveh_open	function
(	O
canon_to_code	pointer
,	O
canon_from_code	pointer
,	O
&	O
cd	pointer
)	O
<	O
0	int
)	O
return	O
false	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
!	O
(	O
iconvable_string_list	function
(	O
&	O
cd	pointer
,	O
mp	pointer
->	O
comment	pointer
)	O
&&	O
iconvable_string_list	function
(	O
&	O
cd	pointer
,	O
mp	pointer
->	O
comment_dot	pointer
)	O
&&	O
iconvable_prev_msgid	function
(	O
&	O
cd	pointer
,	O
mp	pointer
)	O
&&	O
iconvable_msgid	function
(	O
&	O
cd	pointer
,	O
mp	pointer
)	O
&&	O
iconvable_msgstr	function
(	O
&	O
cd	pointer
,	O
mp	pointer
)	O
)	O
)	O
return	O
false	int
;	O
}	O
iconveh_close	function
(	O
&	O
cd	pointer
)	O
;	O
}	O
return	O
true	int
;	O
}	O
