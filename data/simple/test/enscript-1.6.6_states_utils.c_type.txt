static	O
RE_TRANSLATE_TYPE	O
case_insensitive_translate	pointer
=	O
NULL	O
;	O
List	struct
*	O
list	function
(	O
)	O
{	O
return	O
(	O
List	struct
*	O
)	O
xcalloc	function
(	O
1	int
,	O
sizeof	O
(	O
List	struct
)	O
)	O
;	O
}	O
void	O
list_prepend	function
(	O
list	function
,	O
data	pointer
)	O
List	struct
*	O
list	function
;	O
void	O
*	O
data	pointer
;	O
{	O
ListItem	struct
*	O
item	pointer
;	O
item	pointer
=	O
(	O
ListItem	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
item	pointer
)	O
)	O
;	O
item	pointer
->	O
data	pointer
=	O
data	pointer
;	O
item	pointer
->	O
next	pointer
=	O
list	function
->	O
head	pointer
;	O
list	function
->	O
head	pointer
=	O
item	pointer
;	O
if	O
(	O
list	function
->	O
tail	pointer
==	O
NULL	O
)	O
list	function
->	O
tail	pointer
=	O
item	pointer
;	O
}	O
void	O
list_append	function
(	O
list	function
,	O
data	pointer
)	O
List	struct
*	O
list	function
;	O
void	O
*	O
data	pointer
;	O
{	O
ListItem	struct
*	O
item	pointer
;	O
item	pointer
=	O
(	O
ListItem	struct
*	O
)	O
xcalloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
item	pointer
)	O
)	O
;	O
item	pointer
->	O
data	pointer
=	O
data	pointer
;	O
if	O
(	O
list	function
->	O
tail	pointer
)	O
list	function
->	O
tail	pointer
->	O
next	pointer
=	O
item	pointer
;	O
else	O
list	function
->	O
head	pointer
=	O
item	pointer
;	O
list	function
->	O
tail	pointer
=	O
item	pointer
;	O
}	O
Node	struct
*	O
node_alloc	function
(	O
type	enum
)	O
NodeType	enum
type	enum
;	O
{	O
Node	struct
*	O
n	long
;	O
n	long
=	O
(	O
Node	struct
*	O
)	O
xcalloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
n	long
)	O
)	O
;	O
n	long
->	O
type	enum
=	O
type	enum
;	O
n	long
->	O
refcount	int
=	O
1	int
;	O
n	long
->	O
linenum	int
=	O
linenum	int
;	O
n	long
->	O
filename	pointer
=	O
yyin_name	pointer
;	O
if	O
(	O
type	enum
==	O
nREGEXP	int
)	O
n	long
->	O
u	union
.	O
re	struct
.	O
compiled	struct
.	O
fastmap	pointer
=	O
xmalloc	function
(	O
256	int
)	O
;	O
return	O
n	long
;	O
}	O
Node	struct
*	O
node_copy	function
(	O
n	long
)	O
Node	struct
*	O
n	long
;	O
{	O
Node	struct
*	O
n2	pointer
;	O
int	O
i	int
;	O
n2	pointer
=	O
node_alloc	function
(	O
n	long
->	O
type	enum
)	O
;	O
n2	pointer
->	O
linenum	int
=	O
n	long
->	O
linenum	int
;	O
n2	pointer
->	O
filename	pointer
=	O
n	long
->	O
filename	pointer
;	O
switch	O
(	O
n	long
->	O
type	enum
)	O
{	O
case	O
nVOID	int
:	O
break	O
;	O
case	O
nSTRING	int
:	O
n2	pointer
->	O
u	union
.	O
str	struct
.	O
len	int
=	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
;	O
n2	pointer
->	O
u	union
.	O
str	struct
.	O
data	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
n2	pointer
->	O
u	union
.	O
str	struct
.	O
len	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
n2	pointer
->	O
u	union
.	O
str	struct
.	O
data	pointer
,	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
,	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
)	O
;	O
break	O
;	O
case	O
nREGEXP	int
:	O
n2	pointer
->	O
u	union
.	O
re	struct
.	O
data	pointer
=	O
xstrdup	function
(	O
n	long
->	O
u	union
.	O
re	struct
.	O
data	pointer
)	O
;	O
n2	pointer
->	O
u	union
.	O
re	struct
.	O
len	int
=	O
n	long
->	O
u	union
.	O
re	struct
.	O
len	int
;	O
break	O
;	O
case	O
nINTEGER	int
:	O
n2	pointer
->	O
u	union
.	O
integer	int
=	O
n	long
->	O
u	union
.	O
integer	int
;	O
break	O
;	O
case	O
nREAL	int
:	O
n2	pointer
->	O
u	union
.	O
real	double
=	O
n	long
->	O
u	union
.	O
real	double
;	O
break	O
;	O
case	O
nSYMBOL	int
:	O
n2	pointer
->	O
u	union
.	O
sym	pointer
=	O
xstrdup	function
(	O
n	long
->	O
u	union
.	O
sym	pointer
)	O
;	O
break	O
;	O
case	O
nARRAY	int
:	O
n2	pointer
->	O
u	union
.	O
array	pointer
.	O
len	int
=	O
n	long
->	O
u	union
.	O
array	pointer
.	O
len	int
;	O
n2	pointer
->	O
u	union
.	O
array	pointer
.	O
allocated	long
=	O
n2	pointer
->	O
u	union
.	O
array	pointer
.	O
len	int
+	O
1	int
;	O
n2	pointer
->	O
u	union
.	O
array	pointer
.	O
array	pointer
=	O
(	O
Node	struct
*	O
*	O
)	O
xcalloc	function
(	O
n2	pointer
->	O
u	union
.	O
array	pointer
.	O
allocated	long
,	O
sizeof	O
(	O
Node	struct
*	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
->	O
u	union
.	O
array	pointer
.	O
len	int
;	O
i	int
++	O
)	O
n2	pointer
->	O
u	union
.	O
array	pointer
.	O
array	pointer
[	O
i	int
]	O
=	O
node_copy	function
(	O
n	long
->	O
u	union
.	O
array	pointer
.	O
array	pointer
[	O
i	int
]	O
)	O
;	O
break	O
;	O
}	O
return	O
n2	pointer
;	O
}	O
void	O
node_reference	function
(	O
node	pointer
)	O
Node	struct
*	O
node	pointer
;	O
{	O
node	pointer
->	O
refcount	int
++	O
;	O
}	O
void	O
node_free	function
(	O
node	pointer
)	O
Node	struct
*	O
node	pointer
;	O
{	O
unsigned	O
int	O
i	int
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
--	O
node	pointer
->	O
refcount	int
>	O
0	int
)	O
return	O
;	O
switch	O
(	O
node	pointer
->	O
type	enum
)	O
{	O
case	O
nVOID	int
:	O
return	O
;	O
break	O
;	O
case	O
nSTRING	int
:	O
xfree	function
(	O
node	pointer
->	O
u	union
.	O
str	struct
.	O
data	pointer
)	O
;	O
break	O
;	O
case	O
nREGEXP	int
:	O
free	function
(	O
node	pointer
->	O
u	union
.	O
re	struct
.	O
data	pointer
)	O
;	O
xfree	function
(	O
node	pointer
->	O
u	union
.	O
re	struct
.	O
compiled	struct
.	O
fastmap	pointer
)	O
;	O
break	O
;	O
case	O
nINTEGER	int
:	O
case	O
nREAL	int
:	O
case	O
nSYMBOL	int
:	O
break	O
;	O
case	O
nARRAY	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
node	pointer
->	O
u	union
.	O
array	pointer
.	O
len	int
;	O
i	int
++	O
)	O
node_free	function
(	O
node	pointer
->	O
u	union
.	O
array	pointer
.	O
array	pointer
[	O
i	int
]	O
)	O
;	O
xfree	function
(	O
node	pointer
->	O
u	union
.	O
array	pointer
.	O
array	pointer
)	O
;	O
break	O
;	O
}	O
xfree	function
(	O
node	pointer
)	O
;	O
}	O
void	O
enter_system_variable	function
(	O
name	pointer
,	O
value	pointer
)	O
char	O
*	O
name	pointer
;	O
char	O
*	O
value	pointer
;	O
{	O
Node	struct
*	O
n	long
,	O
*	O
old_val	pointer
;	O
n	long
=	O
node_alloc	function
(	O
nSTRING	int
)	O
;	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
=	O
strlen	function
(	O
value	pointer
)	O
;	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
=	O
xstrdup	function
(	O
value	pointer
)	O
;	O
if	O
(	O
!	O
strhash_put	function
(	O
ns_vars	pointer
,	O
name	pointer
,	O
strlen	function
(	O
name	pointer
)	O
,	O
n	long
,	O
(	O
void	O
*	O
*	O
)	O
&	O
old_val	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: out of memory\n"	pointer
)	O
,	O
program	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
node_free	function
(	O
old_val	pointer
)	O
;	O
}	O
void	O
compile_regexp	function
(	O
re	struct
)	O
Node	struct
*	O
re	struct
;	O
{	O
const	O
char	O
*	O
msg	pointer
;	O
if	O
(	O
case_insensitive_translate	pointer
==	O
NULL	O
)	O
{	O
int	O
i	int
;	O
case_insensitive_translate	pointer
=	O
xmalloc	function
(	O
256	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
256	int
;	O
i	int
++	O
)	O
if	O
(	O
isupper	function
(	O
i	int
)	O
)	O
case_insensitive_translate	pointer
[	O
i	int
]	O
=	O
tolower	function
(	O
i	int
)	O
;	O
else	O
case_insensitive_translate	pointer
[	O
i	int
]	O
=	O
i	int
;	O
}	O
if	O
(	O
re	struct
->	O
u	union
.	O
re	struct
.	O
flags	int
&	O
fRE_CASE_INSENSITIVE	int
)	O
re	struct
->	O
u	union
.	O
re	struct
.	O
compiled	struct
.	O
translate	pointer
=	O
case_insensitive_translate	pointer
;	O
msg	pointer
=	O
re_compile_pattern	function
(	O
re	struct
->	O
u	union
.	O
re	struct
.	O
data	pointer
,	O
re	struct
->	O
u	union
.	O
re	struct
.	O
len	int
,	O
&	O
re	struct
->	O
u	union
.	O
re	struct
.	O
compiled	struct
)	O
;	O
if	O
(	O
msg	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: couldn't compile regular expression \"%s\": %s\n"	pointer
)	O
,	O
re	struct
->	O
filename	pointer
,	O
re	struct
->	O
linenum	int
,	O
re	struct
->	O
u	union
.	O
re	struct
.	O
data	pointer
,	O
msg	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
re_compile_fastmap	function
(	O
&	O
re	struct
->	O
u	union
.	O
re	struct
.	O
compiled	struct
)	O
;	O
}	O
Stmt	struct
*	O
mk_stmt	function
(	O
type	enum
,	O
arg1	pointer
,	O
arg2	pointer
,	O
arg3	pointer
,	O
arg4	pointer
)	O
StmtType	enum
type	enum
;	O
void	O
*	O
arg1	pointer
;	O
void	O
*	O
arg2	pointer
;	O
void	O
*	O
arg3	pointer
;	O
void	O
*	O
arg4	pointer
;	O
{	O
Stmt	struct
*	O
stmt	pointer
;	O
stmt	pointer
=	O
(	O
Stmt	struct
*	O
)	O
xcalloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
stmt	pointer
)	O
)	O
;	O
stmt	pointer
->	O
type	enum
=	O
type	enum
;	O
stmt	pointer
->	O
linenum	int
=	O
linenum	int
;	O
stmt	pointer
->	O
filename	pointer
=	O
yyin_name	pointer
;	O
switch	O
(	O
type	enum
)	O
{	O
case	O
sEXPR	int
:	O
case	O
sRETURN	int
:	O
stmt	pointer
->	O
u	union
.	O
expr	pointer
=	O
arg1	pointer
;	O
break	O
;	O
case	O
sDEFSUB	int
:	O
stmt	pointer
->	O
u	union
.	O
defsub	struct
.	O
name	pointer
=	O
arg1	pointer
;	O
stmt	pointer
->	O
u	union
.	O
defsub	struct
.	O
closure	pointer
=	O
arg2	pointer
;	O
break	O
;	O
case	O
sBLOCK	int
:	O
stmt	pointer
->	O
u	union
.	O
block	pointer
=	O
arg1	pointer
;	O
break	O
;	O
case	O
sIF	int
:	O
stmt	pointer
->	O
u	union
.	O
stmt_if	struct
.	O
expr	pointer
=	O
arg1	pointer
;	O
stmt	pointer
->	O
u	union
.	O
stmt_if	struct
.	O
then_stmt	pointer
=	O
arg2	pointer
;	O
stmt	pointer
->	O
u	union
.	O
stmt_if	struct
.	O
else_stmt	pointer
=	O
arg3	pointer
;	O
break	O
;	O
case	O
sWHILE	int
:	O
stmt	pointer
->	O
u	union
.	O
stmt_while	struct
.	O
expr	pointer
=	O
arg1	pointer
;	O
stmt	pointer
->	O
u	union
.	O
stmt_while	struct
.	O
body	pointer
=	O
arg2	pointer
;	O
break	O
;	O
case	O
sFOR	int
:	O
stmt	pointer
->	O
u	union
.	O
stmt_for	struct
.	O
init	pointer
=	O
arg1	pointer
;	O
stmt	pointer
->	O
u	union
.	O
stmt_for	struct
.	O
cond	pointer
=	O
arg2	pointer
;	O
stmt	pointer
->	O
u	union
.	O
stmt_for	struct
.	O
incr	pointer
=	O
arg3	pointer
;	O
stmt	pointer
->	O
u	union
.	O
stmt_for	struct
.	O
body	pointer
=	O
arg4	pointer
;	O
break	O
;	O
}	O
return	O
stmt	pointer
;	O
}	O
Expr	struct
*	O
mk_expr	function
(	O
type	enum
,	O
arg1	pointer
,	O
arg2	pointer
,	O
arg3	pointer
)	O
ExprType	enum
type	enum
;	O
void	O
*	O
arg1	pointer
;	O
void	O
*	O
arg2	pointer
;	O
void	O
*	O
arg3	pointer
;	O
{	O
Expr	struct
*	O
expr	pointer
;	O
expr	pointer
=	O
(	O
Expr	struct
*	O
)	O
xcalloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
expr	pointer
)	O
)	O
;	O
expr	pointer
->	O
type	enum
=	O
type	enum
;	O
expr	pointer
->	O
linenum	int
=	O
linenum	int
;	O
expr	pointer
->	O
filename	pointer
=	O
yyin_name	pointer
;	O
switch	O
(	O
type	enum
)	O
{	O
case	O
eSTRING	int
:	O
case	O
eREGEXP	int
:	O
case	O
eINTEGER	int
:	O
case	O
eREAL	int
:	O
case	O
eSYMBOL	int
:	O
expr	pointer
->	O
u	union
.	O
node	pointer
=	O
arg1	pointer
;	O
break	O
;	O
case	O
eNOT	int
:	O
expr	pointer
->	O
u	union
.	O
not	pointer
=	O
arg1	pointer
;	O
break	O
;	O
case	O
eFCALL	int
:	O
expr	pointer
->	O
u	union
.	O
fcall	struct
.	O
name	pointer
=	O
arg1	pointer
;	O
expr	pointer
->	O
u	union
.	O
fcall	struct
.	O
args	pointer
=	O
arg2	pointer
;	O
break	O
;	O
case	O
eASSIGN	int
:	O
case	O
eADDASSIGN	int
:	O
case	O
eSUBASSIGN	int
:	O
case	O
eMULASSIGN	int
:	O
case	O
eDIVASSIGN	int
:	O
expr	pointer
->	O
u	union
.	O
assign	struct
.	O
sym	pointer
=	O
arg1	pointer
;	O
expr	pointer
->	O
u	union
.	O
assign	struct
.	O
expr	pointer
=	O
arg2	pointer
;	O
break	O
;	O
case	O
ePOSTFIXADD	int
:	O
case	O
ePOSTFIXSUB	int
:	O
case	O
ePREFIXADD	int
:	O
case	O
ePREFIXSUB	int
:	O
expr	pointer
->	O
u	union
.	O
node	pointer
=	O
arg1	pointer
;	O
break	O
;	O
case	O
eARRAYASSIGN	int
:	O
expr	pointer
->	O
u	union
.	O
arrayassign	struct
.	O
expr1	pointer
=	O
arg1	pointer
;	O
expr	pointer
->	O
u	union
.	O
arrayassign	struct
.	O
expr2	pointer
=	O
arg2	pointer
;	O
expr	pointer
->	O
u	union
.	O
arrayassign	struct
.	O
expr3	pointer
=	O
arg3	pointer
;	O
break	O
;	O
case	O
eARRAYREF	int
:	O
expr	pointer
->	O
u	union
.	O
arrayref	struct
.	O
expr1	pointer
=	O
arg1	pointer
;	O
expr	pointer
->	O
u	union
.	O
arrayref	struct
.	O
expr2	pointer
=	O
arg2	pointer
;	O
break	O
;	O
case	O
eQUESTCOLON	int
:	O
expr	pointer
->	O
u	union
.	O
questcolon	struct
.	O
cond	pointer
=	O
arg1	pointer
;	O
expr	pointer
->	O
u	union
.	O
questcolon	struct
.	O
expr1	pointer
=	O
arg2	pointer
;	O
expr	pointer
->	O
u	union
.	O
questcolon	struct
.	O
expr2	pointer
=	O
arg3	pointer
;	O
break	O
;	O
case	O
eMULT	int
:	O
case	O
eDIV	int
:	O
case	O
ePLUS	int
:	O
case	O
eMINUS	int
:	O
case	O
eLT	int
:	O
case	O
eGT	int
:	O
case	O
eEQ	int
:	O
case	O
eNE	int
:	O
case	O
eGE	int
:	O
case	O
eLE	int
:	O
case	O
eAND	int
:	O
case	O
eOR	int
:	O
expr	pointer
->	O
u	union
.	O
op	struct
.	O
left	pointer
=	O
arg1	pointer
;	O
expr	pointer
->	O
u	union
.	O
op	struct
.	O
right	pointer
=	O
arg2	pointer
;	O
break	O
;	O
}	O
return	O
expr	pointer
;	O
}	O
Cons	struct
*	O
cons	function
(	O
car	pointer
,	O
cdr	pointer
)	O
void	O
*	O
car	pointer
;	O
void	O
*	O
cdr	pointer
;	O
{	O
Cons	struct
*	O
c	pointer
;	O
c	pointer
=	O
(	O
Cons	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
c	pointer
)	O
)	O
;	O
c	pointer
->	O
car	pointer
=	O
car	pointer
;	O
c	pointer
->	O
cdr	pointer
=	O
cdr	pointer
;	O
return	O
c	pointer
;	O
}	O
void	O
define_state	function
(	O
sym	pointer
,	O
super	pointer
,	O
rules	pointer
)	O
Node	struct
*	O
sym	pointer
;	O
Node	struct
*	O
super	pointer
;	O
List	struct
*	O
rules	pointer
;	O
{	O
void	O
*	O
old_state	pointer
;	O
char	O
msg	pointer
[	O
512	int
]	O
;	O
State	struct
*	O
state	pointer
;	O
state	pointer
=	O
(	O
State	struct
*	O
)	O
xcalloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
state	pointer
)	O
)	O
;	O
state	pointer
->	O
name	pointer
=	O
xstrdup	function
(	O
sym	pointer
->	O
u	union
.	O
sym	pointer
)	O
;	O
state	pointer
->	O
rules	pointer
=	O
rules	pointer
;	O
if	O
(	O
super	pointer
)	O
state	pointer
->	O
super_name	pointer
=	O
xstrdup	function
(	O
super	pointer
->	O
u	union
.	O
sym	pointer
)	O
;	O
if	O
(	O
!	O
strhash_put	function
(	O
ns_states	pointer
,	O
sym	pointer
->	O
u	union
.	O
sym	pointer
,	O
strlen	function
(	O
sym	pointer
->	O
u	union
.	O
sym	pointer
)	O
,	O
state	pointer
,	O
&	O
old_state	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: ouf of memory"	pointer
)	O
,	O
program	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
old_state	pointer
)	O
{	O
sprintf	function
(	O
msg	pointer
,	O
_	O
(	O
"warning: redefining state `%s'"	pointer
)	O
,	O
sym	pointer
->	O
u	union
.	O
sym	pointer
)	O
;	O
yyerror	function
(	O
msg	pointer
)	O
;	O
}	O
}	O
static	O
void	O
define_sub	function
(	O
sym	pointer
,	O
args_body	pointer
,	O
filename	pointer
,	O
linenum	int
)	O
Node	struct
*	O
sym	pointer
;	O
Cons	struct
*	O
args_body	pointer
;	O
char	O
*	O
filename	pointer
;	O
unsigned	O
int	O
linenum	int
;	O
{	O
void	O
*	O
old_data	pointer
;	O
if	O
(	O
!	O
strhash_put	function
(	O
ns_subs	pointer
,	O
sym	pointer
->	O
u	union
.	O
sym	pointer
,	O
strlen	function
(	O
sym	pointer
->	O
u	union
.	O
sym	pointer
)	O
,	O
args_body	pointer
,	O
&	O
old_data	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: ouf of memory"	pointer
)	O
,	O
program	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
old_data	pointer
&&	O
warning_level	enum
>=	O
WARN_ALL	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: warning: redefining subroutine `%s'\n"	pointer
)	O
,	O
filename	pointer
,	O
linenum	int
,	O
sym	pointer
->	O
u	union
.	O
sym	pointer
)	O
;	O
}	O
extern	O
unsigned	O
int	O
current_linenum	int
;	O
static	O
Node	struct
*	O
lookup_var	function
(	O
env	pointer
,	O
ns	pointer
,	O
sym	pointer
,	O
filename	pointer
,	O
linenum	int
)	O
Environment	struct
*	O
env	pointer
;	O
StringHashPtr	pointer
ns	pointer
;	O
Node	struct
*	O
sym	pointer
;	O
char	O
*	O
filename	pointer
;	O
unsigned	O
int	O
linenum	int
;	O
{	O
Node	struct
*	O
n	long
;	O
Environment	struct
*	O
e	pointer
;	O
if	O
(	O
sym	pointer
->	O
u	union
.	O
sym	pointer
[	O
0	int
]	O
==	O
'$'	O
&&	O
sym	pointer
->	O
u	union
.	O
sym	pointer
[	O
1	int
]	O
&&	O
sym	pointer
->	O
u	union
.	O
sym	pointer
[	O
2	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
sym	pointer
->	O
u	union
.	O
sym	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
sym	pointer
->	O
u	union
.	O
sym	pointer
[	O
1	int
]	O
<=	O
'9'	O
)	O
{	O
int	O
i	int
;	O
int	O
len	int
;	O
i	int
=	O
sym	pointer
->	O
u	union
.	O
sym	pointer
[	O
1	int
]	O
-	O
'0'	O
;	O
n	long
=	O
node_alloc	function
(	O
nSTRING	int
)	O
;	O
if	O
(	O
current_match	pointer
==	O
NULL	O
||	O
current_match	pointer
->	O
start	pointer
[	O
i	int
]	O
<	O
0	int
||	O
current_match_buf	pointer
==	O
NULL	O
)	O
{	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
1	int
)	O
;	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
=	O
0	int
;	O
}	O
else	O
{	O
len	int
=	O
current_match	pointer
->	O
end	pointer
[	O
i	int
]	O
-	O
current_match	pointer
->	O
start	pointer
[	O
i	int
]	O
;	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
,	O
current_match_buf	pointer
+	O
current_match	pointer
->	O
start	pointer
[	O
i	int
]	O
,	O
len	int
)	O
;	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
=	O
len	int
;	O
}	O
n	long
->	O
refcount	int
=	O
0	int
;	O
return	O
n	long
;	O
}	O
if	O
(	O
sym	pointer
->	O
u	union
.	O
sym	pointer
[	O
1	int
]	O
==	O
'`'	O
||	O
sym	pointer
->	O
u	union
.	O
sym	pointer
[	O
1	int
]	O
==	O
'B'	O
)	O
{	O
n	long
=	O
node_alloc	function
(	O
nSTRING	int
)	O
;	O
if	O
(	O
current_match	pointer
==	O
NULL	O
||	O
current_match	pointer
->	O
start	pointer
[	O
0	int
]	O
<	O
0	int
||	O
current_match_buf	pointer
==	O
NULL	O
)	O
{	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
1	int
)	O
;	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
=	O
0	int
;	O
}	O
else	O
{	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
=	O
current_match	pointer
->	O
start	pointer
[	O
0	int
]	O
;	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
+	O
1	int
)	O
;	O
memcpy	function
(	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
,	O
current_match_buf	pointer
,	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
)	O
;	O
}	O
n	long
->	O
refcount	int
=	O
0	int
;	O
return	O
n	long
;	O
}	O
if	O
(	O
sym	pointer
->	O
u	union
.	O
sym	pointer
[	O
1	int
]	O
==	O
'.'	O
)	O
{	O
n	long
=	O
node_alloc	function
(	O
nINTEGER	int
)	O
;	O
n	long
->	O
u	union
.	O
integer	int
=	O
current_linenum	int
;	O
n	long
->	O
refcount	int
=	O
0	int
;	O
return	O
n	long
;	O
}	O
}	O
for	O
(	O
e	pointer
=	O
env	pointer
;	O
e	pointer
;	O
e	pointer
=	O
e	pointer
->	O
next	pointer
)	O
if	O
(	O
strcmp	function
(	O
e	pointer
->	O
name	pointer
,	O
sym	pointer
->	O
u	union
.	O
sym	pointer
)	O
==	O
0	int
)	O
return	O
e	pointer
->	O
val	array
;	O
if	O
(	O
strhash_get	function
(	O
ns	pointer
,	O
sym	pointer
->	O
u	union
.	O
sym	pointer
,	O
strlen	function
(	O
sym	pointer
->	O
u	union
.	O
sym	pointer
)	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
n	long
)	O
)	O
return	O
n	long
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: undefined variable `%s'\n"	pointer
)	O
,	O
filename	pointer
,	O
linenum	int
,	O
sym	pointer
->	O
u	union
.	O
sym	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
set_var	function
(	O
env	pointer
,	O
ns	pointer
,	O
sym	pointer
,	O
val	array
,	O
filename	pointer
,	O
linenum	int
)	O
Environment	struct
*	O
env	pointer
;	O
StringHashPtr	pointer
ns	pointer
;	O
Node	struct
*	O
sym	pointer
;	O
Node	struct
*	O
val	array
;	O
char	O
*	O
filename	pointer
;	O
unsigned	O
int	O
linenum	int
;	O
{	O
Node	struct
*	O
n	long
;	O
Environment	struct
*	O
e	pointer
;	O
for	O
(	O
e	pointer
=	O
env	pointer
;	O
e	pointer
;	O
e	pointer
=	O
e	pointer
->	O
next	pointer
)	O
if	O
(	O
strcmp	function
(	O
e	pointer
->	O
name	pointer
,	O
sym	pointer
->	O
u	union
.	O
sym	pointer
)	O
==	O
0	int
)	O
{	O
node_free	function
(	O
e	pointer
->	O
val	array
)	O
;	O
e	pointer
->	O
val	array
=	O
val	array
;	O
return	O
;	O
}	O
if	O
(	O
strhash_put	function
(	O
ns	pointer
,	O
sym	pointer
->	O
u	union
.	O
sym	pointer
,	O
strlen	function
(	O
sym	pointer
->	O
u	union
.	O
sym	pointer
)	O
,	O
val	array
,	O
(	O
void	O
*	O
*	O
)	O
&	O
n	long
)	O
)	O
{	O
node_free	function
(	O
n	long
)	O
;	O
return	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: couldn't set variable `%s'\n"	pointer
)	O
,	O
filename	pointer
,	O
linenum	int
,	O
sym	pointer
->	O
u	union
.	O
sym	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
static	O
Node	struct
*	O
calculate_binary	function
(	O
l	pointer
,	O
r	pointer
,	O
type	enum
,	O
filename	pointer
,	O
linenum	int
)	O
Node	struct
*	O
l	pointer
;	O
Node	struct
*	O
r	pointer
;	O
ExprType	enum
type	enum
;	O
char	O
*	O
filename	pointer
;	O
unsigned	O
int	O
linenum	int
;	O
{	O
Node	struct
*	O
n	long
=	O
NULL	O
;	O
switch	O
(	O
type	enum
)	O
{	O
case	O
eMULT	int
:	O
case	O
eDIV	int
:	O
case	O
ePLUS	int
:	O
case	O
eMINUS	int
:	O
case	O
eLT	int
:	O
case	O
eGT	int
:	O
case	O
eEQ	int
:	O
case	O
eNE	int
:	O
case	O
eGE	int
:	O
case	O
eLE	int
:	O
if	O
(	O
l	pointer
->	O
type	enum
==	O
r	pointer
->	O
type	enum
&&	O
l	pointer
->	O
type	enum
==	O
nINTEGER	int
)	O
{	O
n	long
=	O
node_alloc	function
(	O
nINTEGER	int
)	O
;	O
switch	O
(	O
type	enum
)	O
{	O
case	O
eMULT	int
:	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
l	pointer
->	O
u	union
.	O
integer	int
*	O
r	pointer
->	O
u	union
.	O
integer	int
)	O
;	O
break	O
;	O
case	O
eDIV	int
:	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
l	pointer
->	O
u	union
.	O
integer	int
/	O
r	pointer
->	O
u	union
.	O
integer	int
)	O
;	O
break	O
;	O
case	O
ePLUS	int
:	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
l	pointer
->	O
u	union
.	O
integer	int
+	O
r	pointer
->	O
u	union
.	O
integer	int
)	O
;	O
break	O
;	O
case	O
eMINUS	int
:	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
l	pointer
->	O
u	union
.	O
integer	int
-	O
r	pointer
->	O
u	union
.	O
integer	int
)	O
;	O
break	O
;	O
case	O
eLT	int
:	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
l	pointer
->	O
u	union
.	O
integer	int
<	O
r	pointer
->	O
u	union
.	O
integer	int
)	O
;	O
break	O
;	O
case	O
eGT	int
:	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
l	pointer
->	O
u	union
.	O
integer	int
>	O
r	pointer
->	O
u	union
.	O
integer	int
)	O
;	O
break	O
;	O
case	O
eEQ	int
:	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
l	pointer
->	O
u	union
.	O
integer	int
==	O
r	pointer
->	O
u	union
.	O
integer	int
)	O
;	O
break	O
;	O
case	O
eNE	int
:	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
l	pointer
->	O
u	union
.	O
integer	int
!=	O
r	pointer
->	O
u	union
.	O
integer	int
)	O
;	O
break	O
;	O
case	O
eGE	int
:	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
l	pointer
->	O
u	union
.	O
integer	int
>=	O
r	pointer
->	O
u	union
.	O
integer	int
)	O
;	O
break	O
;	O
case	O
eLE	int
:	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
l	pointer
->	O
u	union
.	O
integer	int
<=	O
r	pointer
->	O
u	union
.	O
integer	int
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
l	pointer
->	O
type	enum
==	O
nINTEGER	int
||	O
l	pointer
->	O
type	enum
==	O
nREAL	int
)	O
&&	O
(	O
r	pointer
->	O
type	enum
==	O
nINTEGER	int
||	O
r	pointer
->	O
type	enum
==	O
nREAL	int
)	O
)	O
{	O
double	O
dl	double
,	O
dr	double
;	O
if	O
(	O
l	pointer
->	O
type	enum
==	O
nINTEGER	int
)	O
dl	double
=	O
(	O
double	O
)	O
l	pointer
->	O
u	union
.	O
integer	int
;	O
else	O
dl	double
=	O
l	pointer
->	O
u	union
.	O
real	double
;	O
if	O
(	O
r	pointer
->	O
type	enum
==	O
nINTEGER	int
)	O
dr	double
=	O
(	O
double	O
)	O
r	pointer
->	O
u	union
.	O
integer	int
;	O
else	O
dr	double
=	O
r	pointer
->	O
u	union
.	O
real	double
;	O
n	long
=	O
node_alloc	function
(	O
nREAL	int
)	O
;	O
switch	O
(	O
type	enum
)	O
{	O
case	O
eMULT	int
:	O
n	long
->	O
u	union
.	O
real	double
=	O
(	O
dl	double
*	O
dr	double
)	O
;	O
break	O
;	O
case	O
eDIV	int
:	O
n	long
->	O
u	union
.	O
real	double
=	O
(	O
dl	double
/	O
dr	double
)	O
;	O
break	O
;	O
case	O
ePLUS	int
:	O
n	long
->	O
u	union
.	O
real	double
=	O
(	O
dl	double
+	O
dr	double
)	O
;	O
break	O
;	O
case	O
eMINUS	int
:	O
n	long
->	O
u	union
.	O
real	double
=	O
(	O
dl	double
-	O
dr	double
)	O
;	O
break	O
;	O
case	O
eLT	int
:	O
n	long
->	O
type	enum
=	O
nINTEGER	int
;	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
dl	double
<	O
dr	double
)	O
;	O
break	O
;	O
case	O
eGT	int
:	O
n	long
->	O
type	enum
=	O
nINTEGER	int
;	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
dl	double
>	O
dr	double
)	O
;	O
break	O
;	O
case	O
eEQ	int
:	O
n	long
->	O
type	enum
=	O
nINTEGER	int
;	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
dl	double
==	O
dr	double
)	O
;	O
break	O
;	O
case	O
eNE	int
:	O
n	long
->	O
type	enum
=	O
nINTEGER	int
;	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
dl	double
!=	O
dr	double
)	O
;	O
break	O
;	O
case	O
eGE	int
:	O
n	long
->	O
type	enum
=	O
nINTEGER	int
;	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
dl	double
>=	O
dr	double
)	O
;	O
break	O
;	O
case	O
eLE	int
:	O
n	long
->	O
type	enum
=	O
nINTEGER	int
;	O
n	long
->	O
u	union
.	O
integer	int
=	O
(	O
dl	double
<=	O
dr	double
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: expression between illegal types\n"	pointer
)	O
,	O
filename	pointer
,	O
linenum	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
break	O
;	O
}	O
return	O
n	long
;	O
}	O
Node	struct
*	O
eval_expr	function
(	O
expr	pointer
,	O
env	pointer
)	O
Expr	struct
*	O
expr	pointer
;	O
Environment	struct
*	O
env	pointer
;	O
{	O
Node	struct
*	O
n	long
=	O
nvoid	pointer
;	O
Node	struct
*	O
n2	pointer
;	O
Node	struct
*	O
l	pointer
,	O
*	O
r	pointer
;	O
Cons	struct
*	O
c	pointer
;	O
Primitive	pointer
prim	pointer
;	O
int	O
return_seen	pointer
;	O
Environment	struct
*	O
ei	pointer
,	O
*	O
ei2	pointer
;	O
int	O
i	int
;	O
Node	struct
sn	struct
;	O
if	O
(	O
expr	pointer
==	O
NULL	O
)	O
return	O
nvoid	pointer
;	O
switch	O
(	O
expr	pointer
->	O
type	enum
)	O
{	O
case	O
eSTRING	int
:	O
case	O
eREGEXP	int
:	O
case	O
eINTEGER	int
:	O
case	O
eREAL	int
:	O
node_reference	function
(	O
expr	pointer
->	O
u	union
.	O
node	pointer
)	O
;	O
return	O
expr	pointer
->	O
u	union
.	O
node	pointer
;	O
break	O
;	O
case	O
eSYMBOL	int
:	O
n	long
=	O
lookup_var	function
(	O
env	pointer
,	O
ns_vars	pointer
,	O
expr	pointer
->	O
u	union
.	O
node	pointer
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
node_reference	function
(	O
n	long
)	O
;	O
return	O
n	long
;	O
break	O
;	O
case	O
eNOT	int
:	O
n	long
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
not	pointer
,	O
env	pointer
)	O
;	O
i	int
=	O
!	O
IS_TRUE	O
(	O
n	long
)	O
;	O
node_free	function
(	O
n	long
)	O
;	O
n	long
=	O
node_alloc	function
(	O
nINTEGER	int
)	O
;	O
n	long
->	O
u	union
.	O
integer	int
=	O
i	int
;	O
return	O
n	long
;	O
break	O
;	O
case	O
eFCALL	int
:	O
n	long
=	O
expr	pointer
->	O
u	union
.	O
fcall	struct
.	O
name	pointer
;	O
if	O
(	O
strhash_get	function
(	O
ns_subs	pointer
,	O
n	long
->	O
u	union
.	O
sym	pointer
,	O
strlen	function
(	O
n	long
->	O
u	union
.	O
sym	pointer
)	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
c	pointer
)	O
)	O
{	O
Environment	struct
*	O
nenv	pointer
=	O
NULL	O
;	O
ListItem	struct
*	O
i	int
,	O
*	O
e	pointer
;	O
List	struct
*	O
stmts	pointer
;	O
List	struct
*	O
lst	pointer
;	O
Cons	struct
*	O
args_locals	pointer
;	O
args_locals	pointer
=	O
(	O
Cons	struct
*	O
)	O
c	pointer
->	O
car	pointer
;	O
stmts	pointer
=	O
(	O
List	struct
*	O
)	O
c	pointer
->	O
cdr	pointer
;	O
lst	pointer
=	O
(	O
List	struct
*	O
)	O
args_locals	pointer
->	O
car	pointer
;	O
for	O
(	O
i	int
=	O
lst	pointer
->	O
head	pointer
,	O
e	pointer
=	O
expr	pointer
->	O
u	union
.	O
fcall	struct
.	O
args	pointer
->	O
head	pointer
;	O
i	int
&&	O
e	pointer
;	O
i	int
=	O
i	int
->	O
next	pointer
,	O
e	pointer
=	O
e	pointer
->	O
next	pointer
)	O
{	O
Node	struct
*	O
sym	pointer
;	O
sym	pointer
=	O
(	O
Node	struct
*	O
)	O
i	int
->	O
data	pointer
;	O
n	long
=	O
eval_expr	function
(	O
(	O
Expr	struct
*	O
)	O
e	pointer
->	O
data	pointer
,	O
env	pointer
)	O
;	O
ei	pointer
=	O
(	O
Environment	struct
*	O
)	O
xcalloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
ei	pointer
)	O
)	O
;	O
ei	pointer
->	O
name	pointer
=	O
sym	pointer
->	O
u	union
.	O
sym	pointer
;	O
ei	pointer
->	O
val	array
=	O
n	long
;	O
ei	pointer
->	O
next	pointer
=	O
nenv	pointer
;	O
nenv	pointer
=	O
ei	pointer
;	O
}	O
if	O
(	O
i	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: too few arguments for subroutine\n"	pointer
)	O
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
e	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: too many arguments for subroutine\n"	pointer
)	O
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
lst	pointer
=	O
(	O
List	struct
*	O
)	O
args_locals	pointer
->	O
cdr	pointer
;	O
for	O
(	O
i	int
=	O
lst	pointer
->	O
head	pointer
;	O
i	int
;	O
i	int
=	O
i	int
->	O
next	pointer
)	O
{	O
Cons	struct
*	O
c	pointer
;	O
Node	struct
*	O
sym	pointer
;	O
Expr	struct
*	O
init	pointer
;	O
c	pointer
=	O
(	O
Cons	struct
*	O
)	O
i	int
->	O
data	pointer
;	O
sym	pointer
=	O
(	O
Node	struct
*	O
)	O
c	pointer
->	O
car	pointer
;	O
init	pointer
=	O
(	O
Expr	struct
*	O
)	O
c	pointer
->	O
cdr	pointer
;	O
ei	pointer
=	O
(	O
Environment	struct
*	O
)	O
xcalloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
ei	pointer
)	O
)	O
;	O
ei	pointer
->	O
name	pointer
=	O
sym	pointer
->	O
u	union
.	O
sym	pointer
;	O
if	O
(	O
init	pointer
)	O
ei	pointer
->	O
val	array
=	O
eval_expr	function
(	O
init	pointer
,	O
nenv	pointer
)	O
;	O
else	O
ei	pointer
->	O
val	array
=	O
nvoid	pointer
;	O
ei	pointer
->	O
next	pointer
=	O
nenv	pointer
;	O
nenv	pointer
=	O
ei	pointer
;	O
}	O
return_seen	pointer
=	O
0	int
;	O
n	long
=	O
eval_statement_list	function
(	O
(	O
List	struct
*	O
)	O
c	pointer
->	O
cdr	pointer
,	O
nenv	pointer
,	O
&	O
return_seen	pointer
)	O
;	O
for	O
(	O
ei	pointer
=	O
nenv	pointer
;	O
ei	pointer
;	O
ei	pointer
=	O
ei2	pointer
)	O
{	O
ei2	pointer
=	O
ei	pointer
->	O
next	pointer
;	O
node_free	function
(	O
ei	pointer
->	O
val	array
)	O
;	O
xfree	function
(	O
ei	pointer
)	O
;	O
}	O
return	O
n	long
;	O
}	O
else	O
if	O
(	O
strhash_get	function
(	O
ns_prims	pointer
,	O
n	long
->	O
u	union
.	O
sym	pointer
,	O
strlen	function
(	O
n	long
->	O
u	union
.	O
sym	pointer
)	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
prim	pointer
)	O
)	O
{	O
n	long
=	O
(	O
*	O
prim	pointer
)	O
(	O
n	long
->	O
u	union
.	O
sym	pointer
,	O
expr	pointer
->	O
u	union
.	O
fcall	struct
.	O
args	pointer
,	O
env	pointer
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
return	O
n	long
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: undefined procedure `%s'\n"	pointer
)	O
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
,	O
n	long
->	O
u	union
.	O
sym	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
eASSIGN	int
:	O
n	long
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
assign	struct
.	O
expr	pointer
,	O
env	pointer
)	O
;	O
set_var	function
(	O
env	pointer
,	O
ns_vars	pointer
,	O
expr	pointer
->	O
u	union
.	O
assign	struct
.	O
sym	pointer
,	O
n	long
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
node_reference	function
(	O
n	long
)	O
;	O
return	O
n	long
;	O
break	O
;	O
case	O
eADDASSIGN	int
:	O
case	O
eSUBASSIGN	int
:	O
case	O
eMULASSIGN	int
:	O
case	O
eDIVASSIGN	int
:	O
n	long
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
assign	struct
.	O
expr	pointer
,	O
env	pointer
)	O
;	O
n2	pointer
=	O
lookup_var	function
(	O
env	pointer
,	O
ns_vars	pointer
,	O
expr	pointer
->	O
u	union
.	O
assign	struct
.	O
sym	pointer
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
switch	O
(	O
expr	pointer
->	O
type	enum
)	O
{	O
case	O
eADDASSIGN	int
:	O
n2	pointer
=	O
calculate_binary	function
(	O
n2	pointer
,	O
n	long
,	O
ePLUS	int
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
break	O
;	O
case	O
eSUBASSIGN	int
:	O
n2	pointer
=	O
calculate_binary	function
(	O
n2	pointer
,	O
n	long
,	O
eMINUS	int
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
break	O
;	O
case	O
eMULASSIGN	int
:	O
n2	pointer
=	O
calculate_binary	function
(	O
n2	pointer
,	O
n	long
,	O
eMULT	int
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
break	O
;	O
case	O
eDIVASSIGN	int
:	O
n2	pointer
=	O
calculate_binary	function
(	O
n2	pointer
,	O
n	long
,	O
eDIV	int
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
break	O
;	O
}	O
set_var	function
(	O
env	pointer
,	O
ns_vars	pointer
,	O
expr	pointer
->	O
u	union
.	O
assign	struct
.	O
sym	pointer
,	O
n2	pointer
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
node_free	function
(	O
n	long
)	O
;	O
node_reference	function
(	O
n2	pointer
)	O
;	O
return	O
n2	pointer
;	O
break	O
;	O
case	O
ePOSTFIXADD	int
:	O
case	O
ePOSTFIXSUB	int
:	O
sn	struct
.	O
type	enum
=	O
nINTEGER	int
;	O
sn	struct
.	O
u	union
.	O
integer	int
=	O
1	int
;	O
n2	pointer
=	O
lookup_var	function
(	O
env	pointer
,	O
ns_vars	pointer
,	O
expr	pointer
->	O
u	union
.	O
node	pointer
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
node_reference	function
(	O
n2	pointer
)	O
;	O
n	long
=	O
calculate_binary	function
(	O
n2	pointer
,	O
&	O
sn	struct
,	O
expr	pointer
->	O
type	enum
==	O
ePOSTFIXADD	int
?	O
ePLUS	int
:	O
eMINUS	int
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
set_var	function
(	O
env	pointer
,	O
ns_vars	pointer
,	O
expr	pointer
->	O
u	union
.	O
node	pointer
,	O
n	long
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
return	O
n2	pointer
;	O
break	O
;	O
case	O
ePREFIXADD	int
:	O
case	O
ePREFIXSUB	int
:	O
sn	struct
.	O
type	enum
=	O
nINTEGER	int
;	O
sn	struct
.	O
u	union
.	O
integer	int
=	O
1	int
;	O
n	long
=	O
lookup_var	function
(	O
env	pointer
,	O
ns_vars	pointer
,	O
expr	pointer
->	O
u	union
.	O
node	pointer
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
n	long
=	O
calculate_binary	function
(	O
n	long
,	O
&	O
sn	struct
,	O
expr	pointer
->	O
type	enum
==	O
ePREFIXADD	int
?	O
ePLUS	int
:	O
eMINUS	int
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
set_var	function
(	O
env	pointer
,	O
ns_vars	pointer
,	O
expr	pointer
->	O
u	union
.	O
node	pointer
,	O
n	long
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
node_reference	function
(	O
n	long
)	O
;	O
return	O
n	long
;	O
break	O
;	O
case	O
eARRAYASSIGN	int
:	O
n	long
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
arrayassign	struct
.	O
expr1	pointer
,	O
env	pointer
)	O
;	O
if	O
(	O
n	long
->	O
type	enum
!=	O
nARRAY	int
&&	O
n	long
->	O
type	enum
!=	O
nSTRING	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: illegal lvalue for assignment\n"	pointer
)	O
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
n2	pointer
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
arrayassign	struct
.	O
expr2	pointer
,	O
env	pointer
)	O
;	O
if	O
(	O
n2	pointer
->	O
type	enum
!=	O
nINTEGER	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: array reference index is not integer\n"	pointer
)	O
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
n2	pointer
->	O
u	union
.	O
integer	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: negative array reference index\n"	pointer
)	O
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
n	long
->	O
type	enum
==	O
nARRAY	int
)	O
{	O
if	O
(	O
n2	pointer
->	O
u	union
.	O
integer	int
>=	O
n	long
->	O
u	union
.	O
array	pointer
.	O
len	int
)	O
{	O
if	O
(	O
n2	pointer
->	O
u	union
.	O
integer	int
>=	O
n	long
->	O
u	union
.	O
array	pointer
.	O
allocated	long
)	O
{	O
n	long
->	O
u	union
.	O
array	pointer
.	O
allocated	long
=	O
n2	pointer
->	O
u	union
.	O
integer	int
+	O
100	int
;	O
n	long
->	O
u	union
.	O
array	pointer
.	O
array	pointer
=	O
(	O
Node	struct
*	O
*	O
)	O
xrealloc	function
(	O
n	long
->	O
u	union
.	O
array	pointer
.	O
array	pointer
,	O
n	long
->	O
u	union
.	O
array	pointer
.	O
allocated	long
*	O
sizeof	O
(	O
Node	struct
*	O
)	O
)	O
;	O
}	O
for	O
(	O
i	int
=	O
n	long
->	O
u	union
.	O
array	pointer
.	O
len	int
;	O
i	int
<=	O
n2	pointer
->	O
u	union
.	O
integer	int
;	O
i	int
++	O
)	O
n	long
->	O
u	union
.	O
array	pointer
.	O
array	pointer
[	O
i	int
]	O
=	O
nvoid	pointer
;	O
n	long
->	O
u	union
.	O
array	pointer
.	O
len	int
=	O
n2	pointer
->	O
u	union
.	O
integer	int
+	O
1	int
;	O
}	O
node_free	function
(	O
n	long
->	O
u	union
.	O
array	pointer
.	O
array	pointer
[	O
n2	pointer
->	O
u	union
.	O
integer	int
]	O
)	O
;	O
l	pointer
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
arrayassign	struct
.	O
expr3	pointer
,	O
env	pointer
)	O
;	O
node_reference	function
(	O
l	pointer
)	O
;	O
n	long
->	O
u	union
.	O
array	pointer
.	O
array	pointer
[	O
n2	pointer
->	O
u	union
.	O
integer	int
]	O
=	O
l	pointer
;	O
}	O
else	O
{	O
if	O
(	O
n2	pointer
->	O
u	union
.	O
integer	int
>=	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
)	O
{	O
i	int
=	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
;	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
=	O
n2	pointer
->	O
u	union
.	O
integer	int
+	O
1	int
;	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
,	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
)	O
;	O
for	O
(	O
;	O
i	int
<	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
;	O
i	int
++	O
)	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
[	O
i	int
]	O
=	O
' '	O
;	O
}	O
l	pointer
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
arrayassign	struct
.	O
expr3	pointer
,	O
env	pointer
)	O
;	O
if	O
(	O
l	pointer
->	O
type	enum
!=	O
nINTEGER	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: illegal rvalue for string assignment\n"	pointer
)	O
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
[	O
n2	pointer
->	O
u	union
.	O
integer	int
]	O
=	O
l	pointer
->	O
u	union
.	O
integer	int
;	O
}	O
node_free	function
(	O
n	long
)	O
;	O
node_free	function
(	O
n2	pointer
)	O
;	O
return	O
l	pointer
;	O
break	O
;	O
case	O
eARRAYREF	int
:	O
n	long
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
arrayref	struct
.	O
expr1	pointer
,	O
env	pointer
)	O
;	O
if	O
(	O
n	long
->	O
type	enum
!=	O
nARRAY	int
&&	O
n	long
->	O
type	enum
!=	O
nSTRING	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: illegal type for array reference\n"	pointer
)	O
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
n2	pointer
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
arrayref	struct
.	O
expr2	pointer
,	O
env	pointer
)	O
;	O
if	O
(	O
n2	pointer
->	O
type	enum
!=	O
nINTEGER	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: array reference index is not integer\n"	pointer
)	O
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
n2	pointer
->	O
u	union
.	O
integer	int
<	O
0	int
||	O
(	O
n	long
->	O
type	enum
==	O
nARRAY	int
&&	O
n2	pointer
->	O
u	union
.	O
integer	int
>=	O
n	long
->	O
u	union
.	O
array	pointer
.	O
len	int
)	O
||	O
(	O
n	long
->	O
type	enum
==	O
nSTRING	int
&&	O
n2	pointer
->	O
u	union
.	O
integer	int
>=	O
n	long
->	O
u	union
.	O
str	struct
.	O
len	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s:%d: error: array reference index out of range\n"	pointer
)	O
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
n	long
->	O
type	enum
==	O
nARRAY	int
)	O
{	O
l	pointer
=	O
n	long
->	O
u	union
.	O
array	pointer
.	O
array	pointer
[	O
n2	pointer
->	O
u	union
.	O
integer	int
]	O
;	O
node_reference	function
(	O
l	pointer
)	O
;	O
}	O
else	O
{	O
l	pointer
=	O
node_alloc	function
(	O
nINTEGER	int
)	O
;	O
l	pointer
->	O
u	union
.	O
integer	int
=	O
(	O
int	O
)	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
n	long
->	O
u	union
.	O
str	struct
.	O
data	pointer
)	O
[	O
n2	pointer
->	O
u	union
.	O
integer	int
]	O
;	O
}	O
node_free	function
(	O
n	long
)	O
;	O
node_free	function
(	O
n2	pointer
)	O
;	O
return	O
l	pointer
;	O
break	O
;	O
case	O
eQUESTCOLON	int
:	O
n	long
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
questcolon	struct
.	O
cond	pointer
,	O
env	pointer
)	O
;	O
i	int
=	O
IS_TRUE	O
(	O
n	long
)	O
;	O
node_free	function
(	O
n	long
)	O
;	O
if	O
(	O
i	int
)	O
n	long
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
questcolon	struct
.	O
expr1	pointer
,	O
env	pointer
)	O
;	O
else	O
n	long
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
questcolon	struct
.	O
expr2	pointer
,	O
env	pointer
)	O
;	O
return	O
n	long
;	O
break	O
;	O
case	O
eAND	int
:	O
n	long
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
op	struct
.	O
left	pointer
,	O
env	pointer
)	O
;	O
if	O
(	O
!	O
IS_TRUE	O
(	O
n	long
)	O
)	O
return	O
n	long
;	O
node_free	function
(	O
n	long
)	O
;	O
return	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
op	struct
.	O
right	pointer
,	O
env	pointer
)	O
;	O
break	O
;	O
case	O
eOR	int
:	O
n	long
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
op	struct
.	O
left	pointer
,	O
env	pointer
)	O
;	O
if	O
(	O
IS_TRUE	O
(	O
n	long
)	O
)	O
return	O
n	long
;	O
node_free	function
(	O
n	long
)	O
;	O
return	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
op	struct
.	O
right	pointer
,	O
env	pointer
)	O
;	O
break	O
;	O
case	O
eMULT	int
:	O
case	O
eDIV	int
:	O
case	O
ePLUS	int
:	O
case	O
eMINUS	int
:	O
case	O
eLT	int
:	O
case	O
eGT	int
:	O
case	O
eEQ	int
:	O
case	O
eNE	int
:	O
case	O
eGE	int
:	O
case	O
eLE	int
:	O
l	pointer
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
op	struct
.	O
left	pointer
,	O
env	pointer
)	O
;	O
r	pointer
=	O
eval_expr	function
(	O
expr	pointer
->	O
u	union
.	O
op	struct
.	O
right	pointer
,	O
env	pointer
)	O
;	O
n	long
=	O
calculate_binary	function
(	O
l	pointer
,	O
r	pointer
,	O
expr	pointer
->	O
type	enum
,	O
expr	pointer
->	O
filename	pointer
,	O
expr	pointer
->	O
linenum	int
)	O
;	O
node_free	function
(	O
l	pointer
)	O
;	O
node_free	function
(	O
r	pointer
)	O
;	O
return	O
n	long
;	O
break	O
;	O
}	O
return	O
n	long
;	O
}	O
Node	struct
*	O
eval_statement	function
(	O
stmt	pointer
,	O
env	pointer
,	O
return_seen	pointer
)	O
Stmt	struct
*	O
stmt	pointer
;	O
Environment	struct
*	O
env	pointer
;	O
int	O
*	O
return_seen	pointer
;	O
{	O
Node	struct
*	O
n	long
=	O
nvoid	pointer
;	O
Node	struct
*	O
n2	pointer
;	O
int	O
i	int
;	O
switch	O
(	O
stmt	pointer
->	O
type	enum
)	O
{	O
case	O
sRETURN	int
:	O
n	long
=	O
eval_expr	function
(	O
stmt	pointer
->	O
u	union
.	O
expr	pointer
,	O
env	pointer
)	O
;	O
*	O
return_seen	pointer
=	O
1	int
;	O
break	O
;	O
case	O
sDEFSUB	int
:	O
define_sub	function
(	O
stmt	pointer
->	O
u	union
.	O
defsub	struct
.	O
name	pointer
,	O
stmt	pointer
->	O
u	union
.	O
defsub	struct
.	O
closure	pointer
,	O
stmt	pointer
->	O
filename	pointer
,	O
stmt	pointer
->	O
linenum	int
)	O
;	O
break	O
;	O
case	O
sBLOCK	int
:	O
n	long
=	O
eval_statement_list	function
(	O
stmt	pointer
->	O
u	union
.	O
block	pointer
,	O
env	pointer
,	O
return_seen	pointer
)	O
;	O
break	O
;	O
case	O
sIF	int
:	O
n	long
=	O
eval_expr	function
(	O
stmt	pointer
->	O
u	union
.	O
stmt_if	struct
.	O
expr	pointer
,	O
env	pointer
)	O
;	O
i	int
=	O
IS_TRUE	O
(	O
n	long
)	O
;	O
node_free	function
(	O
n	long
)	O
;	O
if	O
(	O
i	int
)	O
n	long
=	O
eval_statement	function
(	O
stmt	pointer
->	O
u	union
.	O
stmt_if	struct
.	O
then_stmt	pointer
,	O
env	pointer
,	O
return_seen	pointer
)	O
;	O
else	O
{	O
if	O
(	O
stmt	pointer
->	O
u	union
.	O
stmt_if	struct
.	O
else_stmt	pointer
)	O
n	long
=	O
eval_statement	function
(	O
stmt	pointer
->	O
u	union
.	O
stmt_if	struct
.	O
else_stmt	pointer
,	O
env	pointer
,	O
return_seen	pointer
)	O
;	O
else	O
n	long
=	O
nvoid	pointer
;	O
}	O
break	O
;	O
case	O
sWHILE	int
:	O
while	O
(	O
1	int
)	O
{	O
n2	pointer
=	O
eval_expr	function
(	O
stmt	pointer
->	O
u	union
.	O
stmt_while	struct
.	O
expr	pointer
,	O
env	pointer
)	O
;	O
i	int
=	O
IS_TRUE	O
(	O
n2	pointer
)	O
;	O
node_free	function
(	O
n2	pointer
)	O
;	O
if	O
(	O
!	O
i	int
)	O
break	O
;	O
node_free	function
(	O
n	long
)	O
;	O
n	long
=	O
eval_statement	function
(	O
stmt	pointer
->	O
u	union
.	O
stmt_while	struct
.	O
body	pointer
,	O
env	pointer
,	O
return_seen	pointer
)	O
;	O
if	O
(	O
*	O
return_seen	pointer
)	O
break	O
;	O
}	O
break	O
;	O
case	O
sFOR	int
:	O
if	O
(	O
stmt	pointer
->	O
u	union
.	O
stmt_for	struct
.	O
init	pointer
)	O
{	O
n2	pointer
=	O
eval_expr	function
(	O
stmt	pointer
->	O
u	union
.	O
stmt_for	struct
.	O
init	pointer
,	O
env	pointer
)	O
;	O
node_free	function
(	O
n2	pointer
)	O
;	O
}	O
while	O
(	O
1	int
)	O
{	O
n2	pointer
=	O
eval_expr	function
(	O
stmt	pointer
->	O
u	union
.	O
stmt_for	struct
.	O
cond	pointer
,	O
env	pointer
)	O
;	O
i	int
=	O
IS_TRUE	O
(	O
n2	pointer
)	O
;	O
node_free	function
(	O
n2	pointer
)	O
;	O
if	O
(	O
!	O
i	int
)	O
break	O
;	O
node_free	function
(	O
n	long
)	O
;	O
n	long
=	O
eval_statement	function
(	O
stmt	pointer
->	O
u	union
.	O
stmt_for	struct
.	O
body	pointer
,	O
env	pointer
,	O
return_seen	pointer
)	O
;	O
if	O
(	O
*	O
return_seen	pointer
)	O
break	O
;	O
if	O
(	O
stmt	pointer
->	O
u	union
.	O
stmt_for	struct
.	O
incr	pointer
)	O
{	O
n2	pointer
=	O
eval_expr	function
(	O
stmt	pointer
->	O
u	union
.	O
stmt_for	struct
.	O
incr	pointer
,	O
env	pointer
)	O
;	O
node_free	function
(	O
n2	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
sEXPR	int
:	O
n	long
=	O
eval_expr	function
(	O
stmt	pointer
->	O
u	union
.	O
expr	pointer
,	O
env	pointer
)	O
;	O
break	O
;	O
}	O
return	O
n	long
;	O
}	O
Node	struct
*	O
eval_statement_list	function
(	O
lst	pointer
,	O
env	pointer
,	O
return_seen	pointer
)	O
List	struct
*	O
lst	pointer
;	O
Environment	struct
*	O
env	pointer
;	O
int	O
*	O
return_seen	pointer
;	O
{	O
ListItem	struct
*	O
i	int
;	O
Stmt	struct
*	O
stmt	pointer
;	O
Node	struct
*	O
n	long
=	O
nvoid	pointer
;	O
if	O
(	O
lst	pointer
==	O
NULL	O
)	O
return	O
nvoid	pointer
;	O
for	O
(	O
i	int
=	O
lst	pointer
->	O
head	pointer
;	O
i	int
;	O
i	int
=	O
i	int
->	O
next	pointer
)	O
{	O
node_free	function
(	O
n	long
)	O
;	O
stmt	pointer
=	O
(	O
Stmt	struct
*	O
)	O
i	int
->	O
data	pointer
;	O
n	long
=	O
eval_statement	function
(	O
stmt	pointer
,	O
env	pointer
,	O
return_seen	pointer
)	O
;	O
if	O
(	O
*	O
return_seen	pointer
)	O
return	O
n	long
;	O
}	O
return	O
n	long
;	O
}	O
void	O
load_states_file	function
(	O
name	pointer
)	O
char	O
*	O
name	pointer
;	O
{	O
Node	struct
*	O
n	long
;	O
int	O
return_seen	pointer
=	O
0	int
;	O
yyin_name	pointer
=	O
xstrdup	function
(	O
name	pointer
)	O
;	O
linenum	int
=	O
1	int
;	O
yyin	pointer
=	O
fopen	function
(	O
yyin_name	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
yyin	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: couldn't open definition file `%s': %s\n"	pointer
)	O
,	O
program	pointer
,	O
yyin_name	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
yyparse	function
(	O
)	O
;	O
fclose	function
(	O
yyin	pointer
)	O
;	O
n	long
=	O
eval_statement_list	function
(	O
global_stmts	pointer
,	O
NULL	O
,	O
&	O
return_seen	pointer
)	O
;	O
node_free	function
(	O
n	long
)	O
;	O
global_stmts	pointer
=	O
list	function
(	O
)	O
;	O
}	O
int	O
autoload_file	function
(	O
name	pointer
)	O
char	O
*	O
name	pointer
;	O
{	O
char	O
*	O
start	pointer
;	O
unsigned	O
int	O
len	int
;	O
char	O
*	O
cp	pointer
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
unsigned	O
int	O
buflen	int
=	O
1024	int
;	O
unsigned	O
int	O
name_len	int
;	O
struct	O
stat	struct
stat_st	struct
;	O
int	O
result	int
=	O
0	int
;	O
name_len	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
buf	pointer
=	O
xmalloc	function
(	O
buflen	int
)	O
;	O
for	O
(	O
start	pointer
=	O
path	pointer
;	O
start	pointer
;	O
start	pointer
=	O
cp	pointer
)	O
{	O
cp	pointer
=	O
strchr	function
(	O
start	pointer
,	O
PATH_SEPARATOR	char
)	O
;	O
if	O
(	O
cp	pointer
)	O
{	O
len	int
=	O
cp	pointer
-	O
start	pointer
;	O
cp	pointer
++	O
;	O
}	O
else	O
len	int
=	O
strlen	function
(	O
start	pointer
)	O
;	O
if	O
(	O
len	int
+	O
1	int
+	O
name_len	int
+	O
3	int
+	O
1	int
>=	O
buflen	int
)	O
{	O
buflen	int
=	O
len	int
+	O
1	int
+	O
name_len	int
+	O
3	int
+	O
1	int
+	O
1024	int
;	O
buf	pointer
=	O
xrealloc	function
(	O
buf	pointer
,	O
buflen	int
)	O
;	O
}	O
sprintf	function
(	O
buf	pointer
,	O
"%.*s/%s.st"	pointer
,	O
len	int
,	O
start	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
stat	struct
(	O
buf	pointer
,	O
&	O
stat_st	struct
)	O
==	O
0	int
)	O
{	O
if	O
(	O
verbose	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: autoloading `%s' from `%s'\n"	pointer
)	O
,	O
program	pointer
,	O
name	pointer
,	O
buf	pointer
)	O
;	O
load_states_file	function
(	O
buf	pointer
)	O
;	O
result	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
xfree	function
(	O
buf	pointer
)	O
;	O
return	O
result	int
;	O
}	O
State	struct
*	O
lookup_state	function
(	O
name	pointer
)	O
char	O
*	O
name	pointer
;	O
{	O
State	struct
*	O
state	pointer
;	O
int	O
retry_count	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
strhash_get	function
(	O
ns_states	pointer
,	O
name	pointer
,	O
strlen	function
(	O
name	pointer
)	O
,	O
(	O
void	O
*	O
*	O
)	O
&	O
state	pointer
)	O
)	O
return	O
state	pointer
;	O
if	O
(	O
retry_count	int
>	O
0	int
)	O
break	O
;	O
autoload_file	function
(	O
name	pointer
)	O
;	O
retry_count	int
++	O
;	O
}	O
return	O
NULL	O
;	O
}	O
