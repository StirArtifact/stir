static	O
const	O
double	O
ah	array
[	O
]	O
=	O
{	O
1.0	int
/	O
4.0	int
,	O
3.0	int
/	O
8.0	int
,	O
12.0	int
/	O
13.0	int
,	O
1.0	int
,	O
1.0	int
/	O
2.0	int
}	O
;	O
static	O
const	O
double	O
b3	array
[	O
]	O
=	O
{	O
3.0	int
/	O
32.0	int
,	O
9.0	int
/	O
32.0	int
}	O
;	O
static	O
const	O
double	O
b4	array
[	O
]	O
=	O
{	O
1932.0	int
/	O
2197.0	int
,	O
-	O
7200.0	int
/	O
2197.0	int
,	O
7296.0	int
/	O
2197.0	int
}	O
;	O
static	O
const	O
double	O
b5	array
[	O
]	O
=	O
{	O
8341.0	int
/	O
4104.0	int
,	O
-	O
32832.0	int
/	O
4104.0	int
,	O
29440.0	int
/	O
4104.0	int
,	O
-	O
845.0	int
/	O
4104.0	int
}	O
;	O
static	O
const	O
double	O
b6	array
[	O
]	O
=	O
{	O
-	O
6080.0	int
/	O
20520.0	int
,	O
41040.0	int
/	O
20520.0	int
,	O
-	O
28352.0	int
/	O
20520.0	int
,	O
9295.0	int
/	O
20520.0	int
,	O
-	O
5643.0	int
/	O
20520.0	int
}	O
;	O
static	O
const	O
double	O
c1	double
=	O
902880.0	int
/	O
7618050.0	int
;	O
static	O
const	O
double	O
c3	double
=	O
3953664.0	int
/	O
7618050.0	int
;	O
static	O
const	O
double	O
c4	double
=	O
3855735.0	int
/	O
7618050.0	int
;	O
static	O
const	O
double	O
c5	double
=	O
-	O
1371249.0	int
/	O
7618050.0	int
;	O
static	O
const	O
double	O
c6	double
=	O
277020.0	int
/	O
7618050.0	int
;	O
static	O
const	O
double	O
ec	array
[	O
]	O
=	O
{	O
0.0	int
,	O
1.0	int
/	O
360.0	int
,	O
0.0	int
,	O
-	O
128.0	int
/	O
4275.0	int
,	O
-	O
2197.0	int
/	O
75240.0	int
,	O
1.0	int
/	O
50.0	int
,	O
2.0	int
/	O
55.0	int
}	O
;	O
typedef	O
struct	O
{	O
double	O
*	O
k1	pointer
;	O
double	O
*	O
k2	pointer
;	O
double	O
*	O
k3	pointer
;	O
double	O
*	O
k4	pointer
;	O
double	O
*	O
k5	pointer
;	O
double	O
*	O
k6	pointer
;	O
double	O
*	O
y0	pointer
;	O
double	O
*	O
ytmp	pointer
;	O
}	O
rkf45_state_t	struct
;	O
static	O
void	O
*	O
rkf45_alloc	function
(	O
size_t	long
dim	long
)	O
{	O
rkf45_state_t	struct
*	O
state	pointer
=	O
(	O
rkf45_state_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
rkf45_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for rkf45_state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
k1	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
k1	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for k1"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
k2	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
k2	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for k2"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
k3	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
k3	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
k2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for k3"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
k4	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
k4	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
k3	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for k4"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
k5	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
k5	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
k4	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k3	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for k5"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
k6	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
k6	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
k5	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k4	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k3	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for k6"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
y0	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
y0	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
k6	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k5	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k4	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k3	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y0"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
ytmp	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
ytmp	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
y0	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k6	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k5	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k4	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k3	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ytmp"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
state	pointer
;	O
}	O
static	O
int	O
rkf45_apply	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
dim	long
,	O
double	O
t	double
,	O
double	O
h	double
,	O
double	O
y	array
[	O
]	O
,	O
double	O
yerr	array
[	O
]	O
,	O
const	O
double	O
dydt_in	array
[	O
]	O
,	O
double	O
dydt_out	array
[	O
]	O
,	O
const	O
gsl_odeiv_system	struct
*	O
sys	pointer
)	O
{	O
rkf45_state_t	struct
*	O
state	pointer
=	O
(	O
rkf45_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
i	long
;	O
double	O
*	O
const	O
k1	pointer
=	O
state	pointer
->	O
k1	pointer
;	O
double	O
*	O
const	O
k2	pointer
=	O
state	pointer
->	O
k2	pointer
;	O
double	O
*	O
const	O
k3	pointer
=	O
state	pointer
->	O
k3	pointer
;	O
double	O
*	O
const	O
k4	pointer
=	O
state	pointer
->	O
k4	pointer
;	O
double	O
*	O
const	O
k5	pointer
=	O
state	pointer
->	O
k5	pointer
;	O
double	O
*	O
const	O
k6	pointer
=	O
state	pointer
->	O
k6	pointer
;	O
double	O
*	O
const	O
ytmp	pointer
=	O
state	pointer
->	O
ytmp	pointer
;	O
double	O
*	O
const	O
y0	pointer
=	O
state	pointer
->	O
y0	pointer
;	O
DBL_MEMCPY	O
(	O
y0	pointer
,	O
y	array
,	O
dim	long
)	O
;	O
if	O
(	O
dydt_in	array
!=	O
NULL	O
)	O
{	O
DBL_MEMCPY	O
(	O
k1	pointer
,	O
dydt_in	array
,	O
dim	long
)	O
;	O
}	O
else	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
,	O
y	array
,	O
k1	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
ytmp	pointer
[	O
i	long
]	O
=	O
y	array
[	O
i	long
]	O
+	O
ah	array
[	O
0	int
]	O
*	O
h	double
*	O
k1	pointer
[	O
i	long
]	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
0	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k2	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
ytmp	pointer
[	O
i	long
]	O
=	O
y	array
[	O
i	long
]	O
+	O
h	double
*	O
(	O
b3	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	long
]	O
+	O
b3	array
[	O
1	int
]	O
*	O
k2	pointer
[	O
i	long
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
1	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k3	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
ytmp	pointer
[	O
i	long
]	O
=	O
y	array
[	O
i	long
]	O
+	O
h	double
*	O
(	O
b4	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	long
]	O
+	O
b4	array
[	O
1	int
]	O
*	O
k2	pointer
[	O
i	long
]	O
+	O
b4	array
[	O
2	int
]	O
*	O
k3	pointer
[	O
i	long
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
2	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k4	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
ytmp	pointer
[	O
i	long
]	O
=	O
y	array
[	O
i	long
]	O
+	O
h	double
*	O
(	O
b5	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	long
]	O
+	O
b5	array
[	O
1	int
]	O
*	O
k2	pointer
[	O
i	long
]	O
+	O
b5	array
[	O
2	int
]	O
*	O
k3	pointer
[	O
i	long
]	O
+	O
b5	array
[	O
3	int
]	O
*	O
k4	pointer
[	O
i	long
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
3	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k5	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
ytmp	pointer
[	O
i	long
]	O
=	O
y	array
[	O
i	long
]	O
+	O
h	double
*	O
(	O
b6	array
[	O
0	int
]	O
*	O
k1	pointer
[	O
i	long
]	O
+	O
b6	array
[	O
1	int
]	O
*	O
k2	pointer
[	O
i	long
]	O
+	O
b6	array
[	O
2	int
]	O
*	O
k3	pointer
[	O
i	long
]	O
+	O
b6	array
[	O
3	int
]	O
*	O
k4	pointer
[	O
i	long
]	O
+	O
b6	array
[	O
4	int
]	O
*	O
k5	pointer
[	O
i	long
]	O
)	O
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
ah	array
[	O
4	int
]	O
*	O
h	double
,	O
ytmp	pointer
,	O
k6	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
d_i	double
=	O
c1	double
*	O
k1	pointer
[	O
i	long
]	O
+	O
c3	double
*	O
k3	pointer
[	O
i	long
]	O
+	O
c4	double
*	O
k4	pointer
[	O
i	long
]	O
+	O
c5	double
*	O
k5	pointer
[	O
i	long
]	O
+	O
c6	double
*	O
k6	pointer
[	O
i	long
]	O
;	O
y	array
[	O
i	long
]	O
+=	O
h	double
*	O
d_i	double
;	O
}	O
if	O
(	O
dydt_out	array
!=	O
NULL	O
)	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
h	double
,	O
y	array
,	O
dydt_out	array
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
DBL_MEMCPY	O
(	O
y	array
,	O
y0	pointer
,	O
dim	long
)	O
;	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
yerr	array
[	O
i	long
]	O
=	O
h	double
*	O
(	O
ec	array
[	O
1	int
]	O
*	O
k1	pointer
[	O
i	long
]	O
+	O
ec	array
[	O
3	int
]	O
*	O
k3	pointer
[	O
i	long
]	O
+	O
ec	array
[	O
4	int
]	O
*	O
k4	pointer
[	O
i	long
]	O
+	O
ec	array
[	O
5	int
]	O
*	O
k5	pointer
[	O
i	long
]	O
+	O
ec	array
[	O
6	int
]	O
*	O
k6	pointer
[	O
i	long
]	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
rkf45_reset	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
dim	long
)	O
{	O
rkf45_state_t	struct
*	O
state	pointer
=	O
(	O
rkf45_state_t	struct
*	O
)	O
vstate	pointer
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
k1	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
k2	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
k3	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
k4	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
k5	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
k6	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
ytmp	pointer
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
y0	pointer
,	O
dim	long
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
unsigned	O
int	O
rkf45_order	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
rkf45_state_t	struct
*	O
state	pointer
=	O
(	O
rkf45_state_t	struct
*	O
)	O
vstate	pointer
;	O
state	pointer
=	O
0	int
;	O
return	O
5	int
;	O
}	O
static	O
void	O
rkf45_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
rkf45_state_t	struct
*	O
state	pointer
=	O
(	O
rkf45_state_t	struct
*	O
)	O
vstate	pointer
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
y0	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k6	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k5	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k4	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k3	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
k1	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
const	O
gsl_odeiv_step_type	struct
rkf45_type	struct
=	O
{	O
"rkf45"	pointer
,	O
1	int
,	O
0	int
,	O
&	O
rkf45_alloc	function
,	O
&	O
rkf45_apply	function
,	O
&	O
rkf45_reset	function
,	O
&	O
rkf45_order	function
,	O
&	O
rkf45_free	function
}	O
;	O
const	O
gsl_odeiv_step_type	struct
*	O
gsl_odeiv_step_rkf45	pointer
=	O
&	O
rkf45_type	struct
;	O
