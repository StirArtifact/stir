static	O
bool	enum
parse_bitmap_size	function
(	O
const	O
char	O
*	O
bitmap_size_s	pointer
,	O
int	O
*	O
width	array
,	O
int	O
*	O
height	int
)	O
;	O
const	O
Plotter	struct
_pl_b_default_plotter	struct
=	O
{	O
_pl_b_initialize	function
,	O
_pl_b_terminate	function
,	O
_pl_b_begin_page	function
,	O
_pl_b_erase_page	function
,	O
_pl_b_end_page	function
,	O
_pl_g_push_state	function
,	O
_pl_g_pop_state	function
,	O
_pl_b_paint_path	function
,	O
_pl_b_paint_paths	function
,	O
_pl_g_path_is_flushable	function
,	O
_pl_g_maybe_prepaint_segments	function
,	O
_pl_g_paint_marker	function
,	O
_pl_b_paint_point	function
,	O
_pl_g_paint_text_string_with_escapes	function
,	O
_pl_g_paint_text_string	function
,	O
_pl_g_get_text_width	function
,	O
_pl_g_retrieve_font	function
,	O
_pl_g_flush_output	function
,	O
_pl_g_warning	function
,	O
_pl_g_error	function
,	O
}	O
;	O
void	O
_pl_b_initialize	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
_pl_g_initialize	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
type	enum
=	O
PL_BITMAP	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
output_model	enum
=	O
PL_OUTPUT_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_wide_lines	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_dash_array	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_solid_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_odd_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_nonzero_winding_fill	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_settable_bg	int
=	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_escaped_string_support	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_ps_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_pcl_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_stick_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_extra_stick_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_other_fonts	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
default_font_type	int
=	O
PL_F_HERSHEY	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
pcl_before_ps	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_horizontal_justification	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_vertical_justification	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
issue_font_warning	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
have_mixed_paths	enum
=	O
false	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_arc_scaling	enum
=	O
AS_AXES_PRESERVED	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellarc_scaling	enum
=	O
AS_AXES_PRESERVED	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_quad_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_cubic_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_box_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_circle_scaling	enum
=	O
AS_NONE	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
allowed_ellipse_scaling	enum
=	O
AS_AXES_PRESERVED	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
display_model_type	int
=	O
(	O
int	O
)	O
DISP_MODEL_VIRTUAL	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
display_coors_type	int
=	O
(	O
int	O
)	O
DISP_DEVICE_COORS_INTEGER_LIBXMI	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
flipped_y	enum
=	O
true	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
imin	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
imax	int
=	O
569	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
jmin	int
=	O
569	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
jmax	int
=	O
0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmin	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
xmax	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymin	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
ymax	double
=	O
0.0	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
page_data	pointer
=	O
(	O
plPageData	struct
*	O
)	O
NULL	O
;	O
_plotter	pointer
->	O
b_xn	int
=	O
_plotter	pointer
->	O
data	pointer
->	O
imax	int
+	O
1	int
;	O
_plotter	pointer
->	O
b_yn	int
=	O
_plotter	pointer
->	O
data	pointer
->	O
jmin	int
+	O
1	int
;	O
_plotter	pointer
->	O
b_painted_set	pointer
=	O
(	O
void	O
*	O
)	O
NULL	O
;	O
_plotter	pointer
->	O
b_canvas	pointer
=	O
(	O
void	O
*	O
)	O
NULL	O
;	O
_plotter	pointer
->	O
b_arc_cache_data	pointer
=	O
(	O
void	O
*	O
)	O
miNewEllipseCache	O
(	O
)	O
;	O
{	O
const	O
char	O
*	O
bitmap_size_s	pointer
;	O
int	O
width	array
=	O
1	int
,	O
height	int
=	O
1	int
;	O
bitmap_size_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
_plotter	pointer
->	O
data	pointer
,	O
"BITMAPSIZE"	pointer
)	O
;	O
if	O
(	O
bitmap_size_s	pointer
&&	O
parse_bitmap_size	function
(	O
bitmap_size_s	pointer
,	O
&	O
width	array
,	O
&	O
height	int
)	O
&&	O
width	array
>=	O
1	int
&&	O
height	int
>=	O
1	int
)	O
{	O
_plotter	pointer
->	O
data	pointer
->	O
imax	int
=	O
width	array
-	O
1	int
;	O
_plotter	pointer
->	O
data	pointer
->	O
jmin	int
=	O
height	int
-	O
1	int
;	O
_plotter	pointer
->	O
b_xn	int
=	O
width	array
;	O
_plotter	pointer
->	O
b_yn	int
=	O
height	int
;	O
}	O
}	O
_compute_ndc_to_device_map	function
(	O
_plotter	pointer
->	O
data	pointer
)	O
;	O
}	O
static	O
bool	enum
parse_bitmap_size	function
(	O
const	O
char	O
*	O
bitmap_size_s	pointer
,	O
int	O
*	O
width	array
,	O
int	O
*	O
height	int
)	O
{	O
int	O
local_width	int
=	O
1	int
,	O
local_height	int
=	O
1	int
;	O
if	O
(	O
bitmap_size_s	pointer
&&	O
sscanf	function
(	O
bitmap_size_s	pointer
,	O
"%dx%d"	pointer
,	O
&	O
local_width	int
,	O
&	O
local_height	int
)	O
==	O
2	int
&&	O
local_width	int
>	O
0	int
&&	O
local_height	int
>	O
0	int
)	O
{	O
*	O
width	array
=	O
local_width	int
;	O
*	O
height	int
=	O
local_height	int
;	O
return	O
true	int
;	O
}	O
else	O
return	O
false	int
;	O
}	O
void	O
_pl_b_terminate	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
miDeleteEllipseCache	O
(	O
(	O
miEllipseCache	struct
*	O
)	O
_plotter	pointer
->	O
b_arc_cache_data	pointer
)	O
;	O
_pl_g_terminate	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
int	O
_maybe_output_image	function
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
{	O
int	O
retval	int
;	O
switch	O
(	O
(	O
int	O
)	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
type	enum
)	O
)	O
{	O
case	O
(	O
int	O
)	O
PL_BITMAP	int
:	O
default	O
:	O
retval	int
=	O
_pl_b_maybe_output_image	function
(	O
_plotter	pointer
)	O
;	O
break	O
;	O
case	O
(	O
int	O
)	O
PL_PNM	int
:	O
retval	int
=	O
_pl_n_maybe_output_image	function
(	O
_plotter	pointer
)	O
;	O
break	O
;	O
}	O
return	O
retval	int
;	O
}	O
