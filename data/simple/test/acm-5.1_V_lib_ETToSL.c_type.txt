extern	O
void	O
DrawScanLine	function
(	O
AWindow	struct
*	O
w	pointer
,	O
int	O
y	int
,	O
int	O
x0	pointer
,	O
int	O
x1	short
,	O
Color	short
color	short
)	O
;	O
static	O
void	O
updateActiveEdgeList	function
(	O
AWindow	struct
*	O
w	pointer
,	O
Edge	struct
*	O
*	O
head	pointer
,	O
Edge	struct
*	O
*	O
lineHead	pointer
,	O
int	O
y	int
)	O
{	O
register	O
int	O
inserted	int
;	O
register	O
Edge	struct
*	O
p	pointer
,	O
*	O
q	pointer
,	O
*	O
last	pointer
,	O
*	O
newhead	pointer
,	O
*	O
newtail	pointer
,	O
*	O
q1	pointer
,	O
*	O
q2	pointer
;	O
newhead	pointer
=	O
newtail	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
for	O
(	O
p	pointer
=	O
*	O
head	pointer
;	O
p	pointer
!=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
y2	short
==	O
y	int
)	O
{	O
}	O
else	O
{	O
p	pointer
->	O
x1	short
+=	O
p	pointer
->	O
Dx	long
;	O
if	O
(	O
newhead	pointer
==	O
(	O
Edge	struct
*	O
)	O
NULL	O
)	O
{	O
newhead	pointer
=	O
newtail	pointer
=	O
p	pointer
;	O
}	O
else	O
if	O
(	O
p	pointer
->	O
x1	short
>=	O
newtail	pointer
->	O
x1	short
)	O
{	O
newtail	pointer
->	O
next	pointer
=	O
p	pointer
;	O
newtail	pointer
=	O
p	pointer
;	O
}	O
else	O
{	O
p	pointer
->	O
nexte	pointer
=	O
w	pointer
->	O
edges	pointer
[	O
y	int
]	O
.	O
head	pointer
;	O
w	pointer
->	O
edges	pointer
[	O
y	int
]	O
.	O
head	pointer
=	O
p	pointer
;	O
}	O
}	O
}	O
*	O
head	pointer
=	O
newhead	pointer
;	O
if	O
(	O
newtail	pointer
!=	O
(	O
Edge	struct
*	O
)	O
NULL	O
)	O
newtail	pointer
->	O
next	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
for	O
(	O
q	pointer
=	O
w	pointer
->	O
lines	pointer
[	O
y	int
]	O
.	O
head	pointer
;	O
q	pointer
!=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
q	pointer
=	O
q	pointer
->	O
nexte	pointer
)	O
{	O
q	pointer
->	O
next	pointer
=	O
*	O
lineHead	pointer
;	O
*	O
lineHead	pointer
=	O
q	pointer
;	O
}	O
newhead	pointer
=	O
newtail	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
for	O
(	O
q	pointer
=	O
*	O
lineHead	pointer
;	O
q	pointer
!=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
q	pointer
=	O
q	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
y	int
<	O
q	pointer
->	O
y2	short
)	O
{	O
q1	pointer
=	O
q	pointer
+	O
1	int
;	O
q2	pointer
=	O
q	pointer
+	O
2	int
;	O
q1	pointer
->	O
x1	short
=	O
q	pointer
->	O
x1	short
;	O
q2	pointer
->	O
x1	short
=	O
q	pointer
->	O
x1	short
=	O
q	pointer
->	O
x1	short
+	O
q	pointer
->	O
Dx	long
;	O
q1	pointer
->	O
y2	short
=	O
q2	pointer
->	O
y2	short
=	O
y	int
+	O
1	int
;	O
q1	pointer
->	O
nexte	pointer
=	O
q2	pointer
;	O
q2	pointer
->	O
nexte	pointer
=	O
w	pointer
->	O
edges	pointer
[	O
y	int
]	O
.	O
head	pointer
;	O
w	pointer
->	O
edges	pointer
[	O
y	int
]	O
.	O
head	pointer
=	O
q1	pointer
;	O
if	O
(	O
newhead	pointer
==	O
(	O
Edge	struct
*	O
)	O
NULL	O
)	O
{	O
newhead	pointer
=	O
newtail	pointer
=	O
q	pointer
;	O
}	O
else	O
{	O
newtail	pointer
->	O
next	pointer
=	O
q	pointer
;	O
newtail	pointer
=	O
q	pointer
;	O
}	O
}	O
}	O
*	O
lineHead	pointer
=	O
newhead	pointer
;	O
if	O
(	O
newtail	pointer
!=	O
(	O
Edge	struct
*	O
)	O
NULL	O
)	O
newtail	pointer
->	O
next	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
for	O
(	O
q	pointer
=	O
w	pointer
->	O
edges	pointer
[	O
y	int
]	O
.	O
head	pointer
;	O
q	pointer
!=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
q	pointer
=	O
q	pointer
->	O
nexte	pointer
)	O
{	O
if	O
(	O
*	O
head	pointer
==	O
NULL	O
)	O
{	O
*	O
head	pointer
=	O
q	pointer
;	O
q	pointer
->	O
next	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
}	O
else	O
{	O
inserted	int
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
*	O
head	pointer
,	O
last	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
p	pointer
!=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
)	O
{	O
if	O
(	O
q	pointer
->	O
x1	short
<=	O
p	pointer
->	O
x1	short
)	O
{	O
if	O
(	O
last	pointer
==	O
(	O
Edge	struct
*	O
)	O
NULL	O
)	O
*	O
head	pointer
=	O
q	pointer
;	O
else	O
last	pointer
->	O
next	pointer
=	O
q	pointer
;	O
q	pointer
->	O
next	pointer
=	O
p	pointer
;	O
inserted	int
=	O
1	int
;	O
break	O
;	O
}	O
last	pointer
=	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
inserted	int
==	O
0	int
)	O
{	O
last	pointer
->	O
next	pointer
=	O
q	pointer
;	O
q	pointer
->	O
next	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
planeSweep	function
(	O
AWindow	struct
*	O
w	pointer
,	O
Edge	struct
*	O
head	pointer
,	O
int	O
y	int
)	O
{	O
ZInfo	struct
*	O
ps	pointer
=	O
(	O
ZInfo	struct
*	O
)	O
NULL	O
;	O
ZInfo	struct
*	O
q	pointer
,	O
*	O
r	pointer
,	O
*	O
lastr	pointer
=	O
(	O
ZInfo	struct
*	O
)	O
NULL	O
;	O
Edge	struct
*	O
p	pointer
;	O
register	O
int	O
x0	pointer
,	O
x1	short
=	O
0	int
,	O
lastStart	int
=	O
-	O
1	int
;	O
Color	short
lastColor	short
=	O
0	int
;	O
register	O
unsigned	O
long	O
lastDepth	long
=	O
MaxDepth	int
;	O
if	O
(	O
head	pointer
==	O
NULL	O
)	O
{	O
w	pointer
->	O
scanLine	pointer
[	O
y	int
]	O
.	O
count	int
=	O
0	int
;	O
return	O
;	O
}	O
for	O
(	O
p	pointer
=	O
head	pointer
;	O
p	pointer
->	O
next	pointer
!=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
x0	pointer
=	O
p	pointer
->	O
x1	short
>>	O
16	int
;	O
x1	short
=	O
p	pointer
->	O
next	pointer
->	O
x1	short
>>	O
16	int
;	O
q	pointer
=	O
p	pointer
->	O
p	pointer
;	O
if	O
(	O
q	pointer
->	O
next	pointer
==	O
NotAnElement	O
)	O
{	O
if	O
(	O
ps	pointer
==	O
(	O
ZInfo	struct
*	O
)	O
NULL	O
)	O
{	O
ps	pointer
=	O
q	pointer
;	O
q	pointer
->	O
next	pointer
=	O
q	pointer
->	O
prev	pointer
=	O
(	O
ZInfo	struct
*	O
)	O
NULL	O
;	O
}	O
else	O
{	O
for	O
(	O
r	pointer
=	O
ps	pointer
;	O
r	pointer
!=	O
(	O
ZInfo	struct
*	O
)	O
NULL	O
;	O
r	pointer
=	O
r	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
q	pointer
->	O
depth	int
<	O
r	pointer
->	O
depth	int
)	O
{	O
if	O
(	O
r	pointer
->	O
prev	pointer
==	O
(	O
ZInfo	struct
*	O
)	O
NULL	O
)	O
ps	pointer
=	O
q	pointer
;	O
else	O
r	pointer
->	O
prev	pointer
->	O
next	pointer
=	O
q	pointer
;	O
q	pointer
->	O
next	pointer
=	O
r	pointer
;	O
q	pointer
->	O
prev	pointer
=	O
r	pointer
->	O
prev	pointer
;	O
r	pointer
->	O
prev	pointer
=	O
q	pointer
;	O
break	O
;	O
}	O
lastr	pointer
=	O
r	pointer
;	O
}	O
if	O
(	O
r	pointer
==	O
(	O
ZInfo	struct
*	O
)	O
NULL	O
)	O
{	O
q	pointer
->	O
next	pointer
=	O
lastr	pointer
->	O
next	pointer
;	O
lastr	pointer
->	O
next	pointer
=	O
q	pointer
;	O
q	pointer
->	O
prev	pointer
=	O
lastr	pointer
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
q	pointer
->	O
prev	pointer
==	O
NULL	O
)	O
ps	pointer
=	O
q	pointer
->	O
next	pointer
;	O
else	O
q	pointer
->	O
prev	pointer
->	O
next	pointer
=	O
q	pointer
->	O
next	pointer
;	O
if	O
(	O
q	pointer
->	O
next	pointer
!=	O
NULL	O
)	O
q	pointer
->	O
next	pointer
->	O
prev	pointer
=	O
q	pointer
->	O
prev	pointer
;	O
q	pointer
->	O
next	pointer
=	O
NotAnElement	O
;	O
}	O
if	O
(	O
ps	pointer
!=	O
(	O
ZInfo	struct
*	O
)	O
NULL	O
)	O
{	O
if	O
(	O
lastDepth	long
<	O
ps	pointer
->	O
depth	int
)	O
{	O
if	O
(	O
(	O
++	O
x0	pointer
)	O
<=	O
x1	short
)	O
{	O
QDrawScanLine	O
(	O
w	pointer
,	O
y	int
,	O
x0	pointer
,	O
x1	short
,	O
ps	pointer
->	O
color	short
)	O
;	O
lastDepth	long
=	O
ps	pointer
->	O
depth	int
;	O
}	O
}	O
else	O
{	O
QDrawScanLine	O
(	O
w	pointer
,	O
y	int
,	O
x0	pointer
,	O
x1	short
,	O
ps	pointer
->	O
color	short
)	O
;	O
lastDepth	long
=	O
ps	pointer
->	O
depth	int
;	O
}	O
}	O
else	O
{	O
lastDepth	long
=	O
MaxDepth	int
;	O
if	O
(	O
lastStart	int
!=	O
1	int
)	O
{	O
DrawScanLine	function
(	O
w	pointer
,	O
y	int
,	O
lastStart	int
,	O
x1	short
,	O
lastColor	short
)	O
;	O
lastStart	int
=	O
-	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
lastStart	int
!=	O
-	O
1	int
)	O
DrawScanLine	function
(	O
w	pointer
,	O
y	int
,	O
lastStart	int
,	O
x1	short
,	O
lastColor	short
)	O
;	O
if	O
(	O
ps	pointer
!=	O
NULL	O
)	O
{	O
ps	pointer
->	O
next	pointer
=	O
NotAnElement	O
;	O
}	O
}	O
void	O
EdgeTableToScanLine	function
(	O
AWindow	struct
*	O
w	pointer
)	O
{	O
register	O
int	O
y	int
,	O
end	int
=	O
w	pointer
->	O
ymax	short
;	O
Edge	struct
*	O
active	pointer
;	O
Edge	struct
*	O
activeLines	pointer
;	O
active	pointer
=	O
activeLines	pointer
=	O
(	O
Edge	struct
*	O
)	O
NULL	O
;	O
if	O
(	O
w	pointer
->	O
ymin	short
<	O
0	int
||	O
w	pointer
->	O
ymax	short
>=	O
(	O
w	pointer
->	O
height	int
+	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"whoa! The y bounds are out of line.\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"ymin = %d   ymax = %d\n"	pointer
,	O
w	pointer
->	O
ymin	short
,	O
w	pointer
->	O
ymax	short
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"height = %d\n"	pointer
,	O
w	pointer
->	O
height	int
)	O
;	O
}	O
if	O
(	O
end	int
>=	O
w	pointer
->	O
height	int
)	O
{	O
end	int
=	O
w	pointer
->	O
height	int
;	O
}	O
for	O
(	O
y	int
=	O
w	pointer
->	O
ymin	short
;	O
y	int
<=	O
end	int
;	O
++	O
y	int
)	O
{	O
updateActiveEdgeList	function
(	O
w	pointer
,	O
&	O
active	pointer
,	O
&	O
activeLines	pointer
,	O
y	int
)	O
;	O
planeSweep	function
(	O
w	pointer
,	O
active	pointer
,	O
y	int
)	O
;	O
}	O
}	O
