static	O
inline	O
struct	O
mixed_string_segment	struct
*	O
segment_alloc	function
(	O
enum	O
segment_type	enum
type	char
,	O
const	O
char	O
*	O
string	pointer
,	O
size_t	long
length	long
)	O
{	O
struct	O
mixed_string_segment	struct
*	O
segment	pointer
=	O
(	O
struct	O
mixed_string_segment	struct
*	O
)	O
xmalloc	function
(	O
FLEXSIZEOF	O
(	O
struct	O
mixed_string_segment	struct
,	O
contents	array
,	O
length	long
)	O
)	O
;	O
segment	pointer
->	O
type	char
=	O
type	char
;	O
segment	pointer
->	O
length	long
=	O
length	long
;	O
memcpy	function
(	O
segment	pointer
->	O
contents	array
,	O
string	pointer
,	O
length	long
)	O
;	O
return	O
segment	pointer
;	O
}	O
static	O
inline	O
struct	O
mixed_string_segment	struct
*	O
segment_clone	function
(	O
const	O
struct	O
mixed_string_segment	struct
*	O
segment	pointer
)	O
{	O
return	O
segment_alloc	function
(	O
segment	pointer
->	O
type	char
,	O
segment	pointer
->	O
contents	array
,	O
segment	pointer
->	O
length	long
)	O
;	O
}	O
mixed_string_ty	struct
*	O
mixed_string_alloc_simple	function
(	O
const	O
char	O
*	O
string	pointer
,	O
lexical_context_ty	enum
lcontext	enum
,	O
const	O
char	O
*	O
logical_file_name	pointer
,	O
int	O
line_number	long
)	O
{	O
struct	O
mixed_string	struct
*	O
ms	pointer
=	O
XMALLOC	O
(	O
struct	O
mixed_string	struct
)	O
;	O
if	O
(	O
*	O
string	pointer
==	O
'\0'	O
)	O
{	O
ms	pointer
->	O
segments	pointer
=	O
NULL	O
;	O
ms	pointer
->	O
nsegments	long
=	O
0	int
;	O
}	O
else	O
{	O
ms	pointer
->	O
segments	pointer
=	O
XNMALLOC	O
(	O
1	int
,	O
struct	O
mixed_string_segment	struct
*	O
)	O
;	O
if	O
(	O
(	O
xgettext_current_source_encoding	pointer
==	O
po_charset_ascii	pointer
||	O
xgettext_current_source_encoding	pointer
==	O
po_charset_utf8	pointer
)	O
&&	O
is_ascii_string	function
(	O
string	pointer
)	O
)	O
ms	pointer
->	O
segments	pointer
[	O
0	int
]	O
=	O
segment_alloc	function
(	O
utf8_encoded	int
,	O
string	pointer
,	O
strlen	function
(	O
string	pointer
)	O
)	O
;	O
else	O
ms	pointer
->	O
segments	pointer
[	O
0	int
]	O
=	O
segment_alloc	function
(	O
source_encoded	int
,	O
string	pointer
,	O
strlen	function
(	O
string	pointer
)	O
)	O
;	O
ms	pointer
->	O
nsegments	long
=	O
1	int
;	O
}	O
ms	pointer
->	O
lcontext	enum
=	O
lcontext	enum
;	O
ms	pointer
->	O
logical_file_name	pointer
=	O
logical_file_name	pointer
;	O
ms	pointer
->	O
line_number	long
=	O
line_number	long
;	O
return	O
ms	pointer
;	O
}	O
mixed_string_ty	struct
*	O
mixed_string_alloc_utf8	function
(	O
const	O
char	O
*	O
string	pointer
,	O
lexical_context_ty	enum
lcontext	enum
,	O
const	O
char	O
*	O
logical_file_name	pointer
,	O
int	O
line_number	long
)	O
{	O
struct	O
mixed_string	struct
*	O
ms	pointer
=	O
XMALLOC	O
(	O
struct	O
mixed_string	struct
)	O
;	O
if	O
(	O
*	O
string	pointer
==	O
'\0'	O
)	O
{	O
ms	pointer
->	O
segments	pointer
=	O
NULL	O
;	O
ms	pointer
->	O
nsegments	long
=	O
0	int
;	O
}	O
else	O
{	O
ms	pointer
->	O
segments	pointer
=	O
XNMALLOC	O
(	O
1	int
,	O
struct	O
mixed_string_segment	struct
*	O
)	O
;	O
ms	pointer
->	O
segments	pointer
[	O
0	int
]	O
=	O
segment_alloc	function
(	O
utf8_encoded	int
,	O
string	pointer
,	O
strlen	function
(	O
string	pointer
)	O
)	O
;	O
ms	pointer
->	O
nsegments	long
=	O
1	int
;	O
}	O
ms	pointer
->	O
lcontext	enum
=	O
lcontext	enum
;	O
ms	pointer
->	O
logical_file_name	pointer
=	O
logical_file_name	pointer
;	O
ms	pointer
->	O
line_number	long
=	O
line_number	long
;	O
return	O
ms	pointer
;	O
}	O
mixed_string_ty	struct
*	O
mixed_string_clone	function
(	O
const	O
mixed_string_ty	struct
*	O
ms1	pointer
)	O
{	O
struct	O
mixed_string	struct
*	O
ms	pointer
=	O
XMALLOC	O
(	O
struct	O
mixed_string	struct
)	O
;	O
size_t	long
nsegments	long
=	O
ms1	pointer
->	O
nsegments	long
;	O
if	O
(	O
nsegments	long
==	O
0	int
)	O
{	O
ms	pointer
->	O
segments	pointer
=	O
NULL	O
;	O
ms	pointer
->	O
nsegments	long
=	O
0	int
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
ms	pointer
->	O
segments	pointer
=	O
XNMALLOC	O
(	O
nsegments	long
,	O
struct	O
mixed_string_segment	struct
*	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nsegments	long
;	O
i	long
++	O
)	O
ms	pointer
->	O
segments	pointer
[	O
i	long
]	O
=	O
segment_clone	function
(	O
ms1	pointer
->	O
segments	pointer
[	O
i	long
]	O
)	O
;	O
ms	pointer
->	O
nsegments	long
=	O
nsegments	long
;	O
}	O
ms	pointer
->	O
lcontext	enum
=	O
ms1	pointer
->	O
lcontext	enum
;	O
ms	pointer
->	O
logical_file_name	pointer
=	O
ms1	pointer
->	O
logical_file_name	pointer
;	O
ms	pointer
->	O
line_number	long
=	O
ms1	pointer
->	O
line_number	long
;	O
return	O
ms	pointer
;	O
}	O
char	O
*	O
mixed_string_contents	function
(	O
const	O
mixed_string_ty	struct
*	O
ms	pointer
)	O
{	O
size_t	long
nsegments	long
=	O
ms	pointer
->	O
nsegments	long
;	O
if	O
(	O
nsegments	long
==	O
0	int
)	O
return	O
xstrdup	function
(	O
""	pointer
)	O
;	O
if	O
(	O
nsegments	long
==	O
1	int
&&	O
ms	pointer
->	O
segments	pointer
[	O
0	int
]	O
->	O
type	char
==	O
utf8_encoded	int
)	O
{	O
size_t	long
len	long
=	O
ms	pointer
->	O
segments	pointer
[	O
0	int
]	O
->	O
length	long
;	O
char	O
*	O
string	pointer
=	O
XNMALLOC	O
(	O
len	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
string	pointer
,	O
ms	pointer
->	O
segments	pointer
[	O
0	int
]	O
->	O
contents	array
,	O
len	long
)	O
;	O
string	pointer
[	O
len	long
]	O
=	O
'\0'	O
;	O
return	O
string	pointer
;	O
}	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nsegments	long
-	O
1	int
;	O
i	long
++	O
)	O
if	O
(	O
memchr	function
(	O
ms	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
contents	array
,	O
'\0'	O
,	O
ms	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
length	long
)	O
!=	O
NULL	O
)	O
{	O
nsegments	long
=	O
i	long
+	O
1	int
;	O
break	O
;	O
}	O
}	O
{	O
char	O
*	O
*	O
converted_segments	pointer
=	O
XNMALLOC	O
(	O
nsegments	long
,	O
char	O
*	O
)	O
;	O
size_t	long
length	long
;	O
length	long
=	O
0	int
;	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nsegments	long
;	O
i	long
++	O
)	O
if	O
(	O
ms	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
type	char
==	O
source_encoded	int
)	O
{	O
char	O
*	O
source_encoded_string	pointer
;	O
char	O
*	O
utf8_encoded_string	pointer
;	O
{	O
size_t	long
len	long
=	O
ms	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
length	long
;	O
source_encoded_string	pointer
=	O
XNMALLOC	O
(	O
len	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
source_encoded_string	pointer
,	O
ms	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
contents	array
,	O
len	long
)	O
;	O
source_encoded_string	pointer
[	O
len	long
]	O
=	O
'\0'	O
;	O
}	O
utf8_encoded_string	pointer
=	O
from_current_source_encoding	function
(	O
source_encoded_string	pointer
,	O
ms	pointer
->	O
lcontext	enum
,	O
ms	pointer
->	O
logical_file_name	pointer
,	O
ms	pointer
->	O
line_number	long
)	O
;	O
if	O
(	O
utf8_encoded_string	pointer
!=	O
source_encoded_string	pointer
)	O
free	function
(	O
source_encoded_string	pointer
)	O
;	O
converted_segments	pointer
[	O
i	long
]	O
=	O
utf8_encoded_string	pointer
;	O
length	long
+=	O
strlen	function
(	O
utf8_encoded_string	pointer
)	O
;	O
}	O
else	O
length	long
+=	O
ms	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
length	long
;	O
}	O
{	O
char	O
*	O
string	pointer
=	O
XNMALLOC	O
(	O
length	long
+	O
1	int
,	O
char	O
)	O
;	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
i	long
;	O
p	pointer
=	O
string	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nsegments	long
;	O
i	long
++	O
)	O
if	O
(	O
ms	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
type	char
==	O
source_encoded	int
)	O
{	O
p	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
converted_segments	pointer
[	O
i	long
]	O
)	O
;	O
free	function
(	O
converted_segments	pointer
[	O
i	long
]	O
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
p	pointer
,	O
ms	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
contents	array
,	O
ms	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
length	long
)	O
;	O
p	pointer
+=	O
ms	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
length	long
;	O
}	O
assert	O
(	O
p	pointer
==	O
string	pointer
+	O
length	long
)	O
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
}	O
free	function
(	O
converted_segments	pointer
)	O
;	O
return	O
string	pointer
;	O
}	O
}	O
}	O
void	O
mixed_string_free	function
(	O
mixed_string_ty	struct
*	O
ms	pointer
)	O
{	O
struct	O
mixed_string_segment	struct
*	O
*	O
segments	pointer
=	O
ms	pointer
->	O
segments	pointer
;	O
size_t	long
nsegments	long
=	O
ms	pointer
->	O
nsegments	long
;	O
if	O
(	O
nsegments	long
>	O
0	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nsegments	long
;	O
i	long
++	O
)	O
free	function
(	O
segments	pointer
[	O
i	long
]	O
)	O
;	O
}	O
free	function
(	O
segments	pointer
)	O
;	O
free	function
(	O
ms	pointer
)	O
;	O
}	O
char	O
*	O
mixed_string_contents_free1	function
(	O
mixed_string_ty	struct
*	O
ms	pointer
)	O
{	O
char	O
*	O
contents	array
=	O
mixed_string_contents	function
(	O
ms	pointer
)	O
;	O
mixed_string_free	function
(	O
ms	pointer
)	O
;	O
return	O
contents	array
;	O
}	O
mixed_string_ty	struct
*	O
mixed_string_concat	function
(	O
const	O
mixed_string_ty	struct
*	O
ms1	pointer
,	O
const	O
mixed_string_ty	struct
*	O
ms2	pointer
)	O
{	O
if	O
(	O
ms2	pointer
->	O
nsegments	long
==	O
0	int
)	O
return	O
mixed_string_clone	function
(	O
ms1	pointer
)	O
;	O
if	O
(	O
ms1	pointer
->	O
nsegments	long
==	O
0	int
)	O
return	O
mixed_string_clone	function
(	O
ms2	pointer
)	O
;	O
{	O
struct	O
mixed_string	struct
*	O
ms	pointer
=	O
XMALLOC	O
(	O
struct	O
mixed_string	struct
)	O
;	O
size_t	long
nsegments	long
=	O
ms1	pointer
->	O
nsegments	long
+	O
ms2	pointer
->	O
nsegments	long
;	O
size_t	long
j	long
;	O
if	O
(	O
ms1	pointer
->	O
segments	pointer
[	O
ms1	pointer
->	O
nsegments	long
-	O
1	int
]	O
->	O
type	char
==	O
ms2	pointer
->	O
segments	pointer
[	O
0	int
]	O
->	O
type	char
)	O
{	O
size_t	long
i	long
;	O
nsegments	long
-=	O
1	int
;	O
ms	pointer
->	O
segments	pointer
=	O
XNMALLOC	O
(	O
nsegments	long
,	O
struct	O
mixed_string_segment	struct
*	O
)	O
;	O
j	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ms1	pointer
->	O
nsegments	long
-	O
1	int
;	O
i	long
++	O
)	O
ms	pointer
->	O
segments	pointer
[	O
j	long
++	O
]	O
=	O
segment_clone	function
(	O
ms1	pointer
->	O
segments	pointer
[	O
i	long
]	O
)	O
;	O
{	O
size_t	long
len1	long
=	O
ms1	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
length	long
;	O
size_t	long
len2	long
=	O
ms2	pointer
->	O
segments	pointer
[	O
0	int
]	O
->	O
length	long
;	O
struct	O
mixed_string_segment	struct
*	O
newseg	pointer
=	O
(	O
struct	O
mixed_string_segment	struct
*	O
)	O
xmalloc	function
(	O
FLEXSIZEOF	O
(	O
struct	O
mixed_string_segment	struct
,	O
contents	array
,	O
len1	long
+	O
len2	long
)	O
)	O
;	O
newseg	pointer
->	O
type	char
=	O
ms2	pointer
->	O
segments	pointer
[	O
0	int
]	O
->	O
type	char
;	O
newseg	pointer
->	O
length	long
=	O
len1	long
+	O
len2	long
;	O
memcpy	function
(	O
newseg	pointer
->	O
contents	array
,	O
ms1	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
contents	array
,	O
len1	long
)	O
;	O
memcpy	function
(	O
newseg	pointer
->	O
contents	array
+	O
len1	long
,	O
ms2	pointer
->	O
segments	pointer
[	O
0	int
]	O
->	O
contents	array
,	O
len2	long
)	O
;	O
ms	pointer
->	O
segments	pointer
[	O
j	long
++	O
]	O
=	O
newseg	pointer
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ms2	pointer
->	O
nsegments	long
;	O
i	long
++	O
)	O
ms	pointer
->	O
segments	pointer
[	O
j	long
++	O
]	O
=	O
segment_clone	function
(	O
ms2	pointer
->	O
segments	pointer
[	O
i	long
]	O
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
ms	pointer
->	O
segments	pointer
=	O
XNMALLOC	O
(	O
nsegments	long
,	O
struct	O
mixed_string_segment	struct
*	O
)	O
;	O
j	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ms1	pointer
->	O
nsegments	long
;	O
i	long
++	O
)	O
ms	pointer
->	O
segments	pointer
[	O
j	long
++	O
]	O
=	O
segment_clone	function
(	O
ms1	pointer
->	O
segments	pointer
[	O
i	long
]	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ms2	pointer
->	O
nsegments	long
;	O
i	long
++	O
)	O
ms	pointer
->	O
segments	pointer
[	O
j	long
++	O
]	O
=	O
segment_clone	function
(	O
ms2	pointer
->	O
segments	pointer
[	O
i	long
]	O
)	O
;	O
}	O
assert	O
(	O
j	long
==	O
nsegments	long
)	O
;	O
ms	pointer
->	O
nsegments	long
=	O
nsegments	long
;	O
ms	pointer
->	O
lcontext	enum
=	O
ms1	pointer
->	O
lcontext	enum
;	O
ms	pointer
->	O
logical_file_name	pointer
=	O
ms1	pointer
->	O
logical_file_name	pointer
;	O
ms	pointer
->	O
line_number	long
=	O
ms1	pointer
->	O
line_number	long
;	O
return	O
ms	pointer
;	O
}	O
}	O
mixed_string_ty	struct
*	O
mixed_string_concat_free1	function
(	O
mixed_string_ty	struct
*	O
ms1	pointer
,	O
const	O
mixed_string_ty	struct
*	O
ms2	pointer
)	O
{	O
if	O
(	O
ms2	pointer
->	O
nsegments	long
==	O
0	int
)	O
return	O
ms1	pointer
;	O
if	O
(	O
ms1	pointer
->	O
nsegments	long
==	O
0	int
)	O
{	O
mixed_string_free	function
(	O
ms1	pointer
)	O
;	O
return	O
mixed_string_clone	function
(	O
ms2	pointer
)	O
;	O
}	O
{	O
struct	O
mixed_string	struct
*	O
ms	pointer
=	O
XMALLOC	O
(	O
struct	O
mixed_string	struct
)	O
;	O
size_t	long
nsegments	long
=	O
ms1	pointer
->	O
nsegments	long
+	O
ms2	pointer
->	O
nsegments	long
;	O
size_t	long
j	long
;	O
if	O
(	O
ms1	pointer
->	O
segments	pointer
[	O
ms1	pointer
->	O
nsegments	long
-	O
1	int
]	O
->	O
type	char
==	O
ms2	pointer
->	O
segments	pointer
[	O
0	int
]	O
->	O
type	char
)	O
{	O
size_t	long
i	long
;	O
nsegments	long
-=	O
1	int
;	O
ms	pointer
->	O
segments	pointer
=	O
XNMALLOC	O
(	O
nsegments	long
,	O
struct	O
mixed_string_segment	struct
*	O
)	O
;	O
j	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ms1	pointer
->	O
nsegments	long
-	O
1	int
;	O
i	long
++	O
)	O
ms	pointer
->	O
segments	pointer
[	O
j	long
++	O
]	O
=	O
ms1	pointer
->	O
segments	pointer
[	O
i	long
]	O
;	O
{	O
size_t	long
len1	long
=	O
ms1	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
length	long
;	O
size_t	long
len2	long
=	O
ms2	pointer
->	O
segments	pointer
[	O
0	int
]	O
->	O
length	long
;	O
struct	O
mixed_string_segment	struct
*	O
newseg	pointer
=	O
(	O
struct	O
mixed_string_segment	struct
*	O
)	O
xmalloc	function
(	O
FLEXSIZEOF	O
(	O
struct	O
mixed_string_segment	struct
,	O
contents	array
,	O
len1	long
+	O
len2	long
)	O
)	O
;	O
newseg	pointer
->	O
type	char
=	O
ms2	pointer
->	O
segments	pointer
[	O
0	int
]	O
->	O
type	char
;	O
newseg	pointer
->	O
length	long
=	O
len1	long
+	O
len2	long
;	O
memcpy	function
(	O
newseg	pointer
->	O
contents	array
,	O
ms1	pointer
->	O
segments	pointer
[	O
i	long
]	O
->	O
contents	array
,	O
len1	long
)	O
;	O
memcpy	function
(	O
newseg	pointer
->	O
contents	array
+	O
len1	long
,	O
ms2	pointer
->	O
segments	pointer
[	O
0	int
]	O
->	O
contents	array
,	O
len2	long
)	O
;	O
ms	pointer
->	O
segments	pointer
[	O
j	long
++	O
]	O
=	O
newseg	pointer
;	O
}	O
free	function
(	O
ms1	pointer
->	O
segments	pointer
[	O
i	long
]	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ms2	pointer
->	O
nsegments	long
;	O
i	long
++	O
)	O
ms	pointer
->	O
segments	pointer
[	O
j	long
++	O
]	O
=	O
segment_clone	function
(	O
ms2	pointer
->	O
segments	pointer
[	O
i	long
]	O
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
ms	pointer
->	O
segments	pointer
=	O
XNMALLOC	O
(	O
nsegments	long
,	O
struct	O
mixed_string_segment	struct
*	O
)	O
;	O
j	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ms1	pointer
->	O
nsegments	long
;	O
i	long
++	O
)	O
ms	pointer
->	O
segments	pointer
[	O
j	long
++	O
]	O
=	O
ms1	pointer
->	O
segments	pointer
[	O
i	long
]	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ms2	pointer
->	O
nsegments	long
;	O
i	long
++	O
)	O
ms	pointer
->	O
segments	pointer
[	O
j	long
++	O
]	O
=	O
segment_clone	function
(	O
ms2	pointer
->	O
segments	pointer
[	O
i	long
]	O
)	O
;	O
}	O
assert	O
(	O
j	long
==	O
nsegments	long
)	O
;	O
free	function
(	O
ms1	pointer
->	O
segments	pointer
)	O
;	O
ms	pointer
->	O
nsegments	long
=	O
nsegments	long
;	O
ms	pointer
->	O
lcontext	enum
=	O
ms1	pointer
->	O
lcontext	enum
;	O
ms	pointer
->	O
logical_file_name	pointer
=	O
ms1	pointer
->	O
logical_file_name	pointer
;	O
ms	pointer
->	O
line_number	long
=	O
ms1	pointer
->	O
line_number	long
;	O
free	function
(	O
ms1	pointer
)	O
;	O
return	O
ms	pointer
;	O
}	O
}	O
void	O
mixed_string_buffer_init	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
,	O
lexical_context_ty	enum
lcontext	enum
,	O
const	O
char	O
*	O
logical_file_name	pointer
,	O
int	O
line_number	long
)	O
{	O
bp	pointer
->	O
segments	pointer
=	O
NULL	O
;	O
bp	pointer
->	O
nsegments	long
=	O
0	int
;	O
bp	pointer
->	O
nsegments_allocated	long
=	O
0	int
;	O
bp	pointer
->	O
curr_type	int
=	O
-	O
1	int
;	O
bp	pointer
->	O
curr_buffer	pointer
=	O
NULL	O
;	O
bp	pointer
->	O
curr_buflen	long
=	O
0	int
;	O
bp	pointer
->	O
curr_allocated	long
=	O
0	int
;	O
bp	pointer
->	O
utf16_surr	short
=	O
0	int
;	O
bp	pointer
->	O
lcontext	enum
=	O
lcontext	enum
;	O
bp	pointer
->	O
logical_file_name	pointer
=	O
logical_file_name	pointer
;	O
bp	pointer
->	O
line_number	long
=	O
line_number	long
;	O
}	O
bool	bool
mixed_string_buffer_is_empty	function
(	O
const	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
)	O
{	O
return	O
(	O
bp	pointer
->	O
nsegments	long
==	O
0	int
&&	O
bp	pointer
->	O
curr_buflen	long
==	O
0	int
)	O
;	O
}	O
static	O
inline	O
void	O
mixed_string_buffer_grow_curr_buffer	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
,	O
size_t	long
count	long
)	O
{	O
if	O
(	O
bp	pointer
->	O
curr_buflen	long
+	O
count	long
>	O
bp	pointer
->	O
curr_allocated	long
)	O
{	O
size_t	long
new_allocated	long
=	O
2	int
*	O
bp	pointer
->	O
curr_allocated	long
+	O
10	int
;	O
if	O
(	O
new_allocated	long
<	O
bp	pointer
->	O
curr_buflen	long
+	O
count	long
)	O
new_allocated	long
=	O
bp	pointer
->	O
curr_buflen	long
+	O
count	long
;	O
bp	pointer
->	O
curr_allocated	long
=	O
new_allocated	long
;	O
bp	pointer
->	O
curr_buffer	pointer
=	O
xrealloc	function
(	O
bp	pointer
->	O
curr_buffer	pointer
,	O
new_allocated	long
)	O
;	O
}	O
}	O
static	O
inline	O
void	O
mixed_string_buffer_append_to_curr_buffer	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
,	O
unsigned	O
char	O
c	int
)	O
{	O
if	O
(	O
bp	pointer
->	O
curr_buflen	long
==	O
bp	pointer
->	O
curr_allocated	long
)	O
{	O
bp	pointer
->	O
curr_allocated	long
=	O
2	int
*	O
bp	pointer
->	O
curr_allocated	long
+	O
10	int
;	O
bp	pointer
->	O
curr_buffer	pointer
=	O
xrealloc	function
(	O
bp	pointer
->	O
curr_buffer	pointer
,	O
bp	pointer
->	O
curr_allocated	long
)	O
;	O
}	O
bp	pointer
->	O
curr_buffer	pointer
[	O
bp	pointer
->	O
curr_buflen	long
++	O
]	O
=	O
c	int
;	O
}	O
static	O
inline	O
void	O
mixed_string_buffer_append_to_utf8_buffer	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
,	O
ucs4_t	int
uc	int
)	O
{	O
unsigned	O
char	O
utf8buf	array
[	O
6	int
]	O
;	O
int	O
count	long
=	O
u8_uctomb	function
(	O
utf8buf	array
,	O
uc	int
,	O
6	int
)	O
;	O
if	O
(	O
count	long
<	O
0	int
)	O
abort	function
(	O
)	O
;	O
mixed_string_buffer_grow_curr_buffer	function
(	O
bp	pointer
,	O
count	long
)	O
;	O
memcpy	function
(	O
bp	pointer
->	O
curr_buffer	pointer
+	O
bp	pointer
->	O
curr_buflen	long
,	O
utf8buf	array
,	O
count	long
)	O
;	O
bp	pointer
->	O
curr_buflen	long
+=	O
count	long
;	O
}	O
static	O
void	O
mixed_string_buffer_append_lone_surrogate	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
,	O
ucs4_t	int
uc	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: warning: lone surrogate U+%04X"	pointer
)	O
,	O
logical_file_name	pointer
,	O
line_number	long
,	O
uc	int
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
mixed_string_buffer_append_to_utf8_buffer	function
(	O
bp	pointer
,	O
0xfffd	int
)	O
;	O
}	O
static	O
inline	O
void	O
mixed_string_buffer_flush_utf16_surr	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
)	O
{	O
if	O
(	O
bp	pointer
->	O
utf16_surr	short
!=	O
0	int
)	O
{	O
mixed_string_buffer_append_lone_surrogate	function
(	O
bp	pointer
,	O
bp	pointer
->	O
utf16_surr	short
)	O
;	O
bp	pointer
->	O
utf16_surr	short
=	O
0	int
;	O
}	O
}	O
static	O
inline	O
void	O
mixed_string_buffer_add_segment	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
,	O
struct	O
mixed_string_segment	struct
*	O
newseg	pointer
)	O
{	O
if	O
(	O
bp	pointer
->	O
nsegments	long
==	O
bp	pointer
->	O
nsegments_allocated	long
)	O
{	O
size_t	long
new_allocated	long
=	O
bp	pointer
->	O
nsegments_allocated	long
=	O
2	int
*	O
bp	pointer
->	O
nsegments_allocated	long
+	O
1	int
;	O
bp	pointer
->	O
segments	pointer
=	O
(	O
struct	O
mixed_string_segment	struct
*	O
*	O
)	O
xrealloc	function
(	O
bp	pointer
->	O
segments	pointer
,	O
new_allocated	long
*	O
sizeof	O
(	O
struct	O
mixed_string_segment	struct
*	O
)	O
)	O
;	O
}	O
bp	pointer
->	O
segments	pointer
[	O
bp	pointer
->	O
nsegments	long
++	O
]	O
=	O
newseg	pointer
;	O
}	O
static	O
void	O
mixed_string_buffer_flush_curr	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
)	O
{	O
if	O
(	O
bp	pointer
->	O
curr_type	int
==	O
utf8_encoded	int
)	O
mixed_string_buffer_flush_utf16_surr	function
(	O
bp	pointer
)	O
;	O
if	O
(	O
bp	pointer
->	O
curr_type	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
bp	pointer
->	O
curr_buflen	long
>	O
0	int
)	O
{	O
struct	O
mixed_string_segment	struct
*	O
segment	pointer
=	O
segment_alloc	function
(	O
bp	pointer
->	O
curr_type	int
,	O
bp	pointer
->	O
curr_buffer	pointer
,	O
bp	pointer
->	O
curr_buflen	long
)	O
;	O
mixed_string_buffer_add_segment	function
(	O
bp	pointer
,	O
segment	pointer
)	O
;	O
}	O
bp	pointer
->	O
curr_buflen	long
=	O
0	int
;	O
}	O
}	O
void	O
mixed_string_buffer_append_char	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
,	O
int	O
c	int
)	O
{	O
if	O
(	O
bp	pointer
->	O
curr_type	int
!=	O
source_encoded	int
)	O
{	O
mixed_string_buffer_flush_curr	function
(	O
bp	pointer
)	O
;	O
bp	pointer
->	O
curr_type	int
=	O
source_encoded	int
;	O
}	O
mixed_string_buffer_append_to_curr_buffer	function
(	O
bp	pointer
,	O
(	O
unsigned	O
char	O
)	O
c	int
)	O
;	O
}	O
void	O
mixed_string_buffer_append_unicode	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
,	O
int	O
c	int
)	O
{	O
if	O
(	O
bp	pointer
->	O
curr_type	int
!=	O
utf8_encoded	int
)	O
{	O
mixed_string_buffer_flush_curr	function
(	O
bp	pointer
)	O
;	O
bp	pointer
->	O
curr_type	int
=	O
utf8_encoded	int
;	O
assert	O
(	O
bp	pointer
->	O
utf16_surr	short
==	O
0	int
)	O
;	O
}	O
if	O
(	O
bp	pointer
->	O
utf16_surr	short
!=	O
0	int
&&	O
(	O
c	int
>=	O
0xdc00	int
&&	O
c	int
<	O
0xe000	int
)	O
)	O
{	O
unsigned	O
short	O
utf16buf	array
[	O
2	int
]	O
;	O
ucs4_t	int
uc	int
;	O
utf16buf	array
[	O
0	int
]	O
=	O
bp	pointer
->	O
utf16_surr	short
;	O
utf16buf	array
[	O
1	int
]	O
=	O
c	int
;	O
if	O
(	O
u16_mbtouc	function
(	O
&	O
uc	int
,	O
utf16buf	array
,	O
2	int
)	O
!=	O
2	int
)	O
abort	function
(	O
)	O
;	O
mixed_string_buffer_append_to_utf8_buffer	function
(	O
bp	pointer
,	O
uc	int
)	O
;	O
bp	pointer
->	O
utf16_surr	short
=	O
0	int
;	O
}	O
else	O
{	O
mixed_string_buffer_flush_utf16_surr	function
(	O
bp	pointer
)	O
;	O
if	O
(	O
c	int
>=	O
0xd800	int
&&	O
c	int
<	O
0xdc00	int
)	O
bp	pointer
->	O
utf16_surr	short
=	O
c	int
;	O
else	O
if	O
(	O
c	int
>=	O
0xdc00	int
&&	O
c	int
<	O
0xe000	int
)	O
mixed_string_buffer_append_lone_surrogate	function
(	O
bp	pointer
,	O
c	int
)	O
;	O
else	O
mixed_string_buffer_append_to_utf8_buffer	function
(	O
bp	pointer
,	O
c	int
)	O
;	O
}	O
}	O
void	O
mixed_string_buffer_destroy	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
)	O
{	O
struct	O
mixed_string_segment	struct
*	O
*	O
segments	pointer
=	O
bp	pointer
->	O
segments	pointer
;	O
size_t	long
nsegments	long
=	O
bp	pointer
->	O
nsegments	long
;	O
if	O
(	O
nsegments	long
>	O
0	int
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nsegments	long
;	O
i	long
++	O
)	O
free	function
(	O
segments	pointer
[	O
i	long
]	O
)	O
;	O
}	O
free	function
(	O
segments	pointer
)	O
;	O
free	function
(	O
bp	pointer
->	O
curr_buffer	pointer
)	O
;	O
}	O
mixed_string_ty	struct
*	O
mixed_string_buffer_result	function
(	O
struct	O
mixed_string_buffer	struct
*	O
bp	pointer
)	O
{	O
mixed_string_buffer_flush_curr	function
(	O
bp	pointer
)	O
;	O
{	O
struct	O
mixed_string	struct
*	O
ms	pointer
=	O
XMALLOC	O
(	O
struct	O
mixed_string	struct
)	O
;	O
size_t	long
nsegments	long
=	O
bp	pointer
->	O
nsegments	long
;	O
if	O
(	O
nsegments	long
>	O
0	int
)	O
ms	pointer
->	O
segments	pointer
=	O
(	O
struct	O
mixed_string_segment	struct
*	O
*	O
)	O
xrealloc	function
(	O
bp	pointer
->	O
segments	pointer
,	O
nsegments	long
*	O
sizeof	O
(	O
struct	O
mixed_string_segment	struct
*	O
)	O
)	O
;	O
else	O
{	O
assert	O
(	O
bp	pointer
->	O
segments	pointer
==	O
NULL	O
)	O
;	O
ms	pointer
->	O
segments	pointer
=	O
NULL	O
;	O
}	O
ms	pointer
->	O
nsegments	long
=	O
nsegments	long
;	O
ms	pointer
->	O
lcontext	enum
=	O
bp	pointer
->	O
lcontext	enum
;	O
ms	pointer
->	O
logical_file_name	pointer
=	O
bp	pointer
->	O
logical_file_name	pointer
;	O
ms	pointer
->	O
line_number	long
=	O
bp	pointer
->	O
line_number	long
;	O
free	function
(	O
bp	pointer
->	O
curr_buffer	pointer
)	O
;	O
return	O
ms	pointer
;	O
}	O
}	O
