static	O
char	O
const	O
*	O
find_function	function
(	O
char	O
const	O
*	O
const	O
*	O
,	O
lin	long
)	O
;	O
static	O
struct	O
change	struct
*	O
find_hunk	function
(	O
struct	O
change	struct
*	O
)	O
;	O
static	O
void	O
mark_ignorable	function
(	O
struct	O
change	struct
*	O
)	O
;	O
static	O
void	O
pr_context_hunk	function
(	O
struct	O
change	struct
*	O
)	O
;	O
static	O
void	O
pr_unidiff_hunk	function
(	O
struct	O
change	struct
*	O
)	O
;	O
static	O
lin	long
find_function_last_search	long
;	O
static	O
lin	long
find_function_last_match	long
;	O
static	O
void	O
print_context_label	function
(	O
char	O
const	O
*	O
mark	pointer
,	O
struct	O
file_data	struct
*	O
inf	pointer
,	O
char	O
const	O
*	O
label	pointer
)	O
{	O
if	O
(	O
label	pointer
)	O
fprintf	function
(	O
outfile	pointer
,	O
"%s %s\n"	pointer
,	O
mark	pointer
,	O
label	pointer
)	O
;	O
else	O
{	O
char	O
buf	array
[	O
MAX	O
(	O
INT_STRLEN_BOUND	O
(	O
int	O
)	O
+	O
32	int
,	O
INT_STRLEN_BOUND	O
(	O
time_t	long
)	O
+	O
11	int
)	O
]	O
;	O
struct	O
tm	struct
const	O
*	O
tm	struct
=	O
localtime	function
(	O
&	O
inf	pointer
->	O
stat	struct
.	O
st_mtime	O
)	O
;	O
int	O
nsec	int
=	O
get_stat_mtime_ns	function
(	O
&	O
inf	pointer
->	O
stat	struct
)	O
;	O
if	O
(	O
!	O
(	O
tm	struct
&&	O
nstrftime	function
(	O
buf	array
,	O
sizeof	O
buf	array
,	O
time_format	pointer
,	O
tm	struct
,	O
0	int
,	O
nsec	int
)	O
)	O
)	O
{	O
verify	O
(	O
TYPE_IS_INTEGER	O
(	O
time_t	long
)	O
)	O
;	O
if	O
(	O
LONG_MIN	O
<=	O
TYPE_MINIMUM	O
(	O
time_t	long
)	O
&&	O
TYPE_MAXIMUM	O
(	O
time_t	long
)	O
<=	O
LONG_MAX	O
)	O
{	O
long	O
int	O
sec	long
=	O
inf	pointer
->	O
stat	struct
.	O
st_mtime	O
;	O
sprintf	function
(	O
buf	array
,	O
"%ld.%.9d"	pointer
,	O
sec	long
,	O
nsec	int
)	O
;	O
}	O
else	O
if	O
(	O
TYPE_MAXIMUM	O
(	O
time_t	long
)	O
<=	O
INTMAX_MAX	O
)	O
{	O
intmax_t	long
sec	long
=	O
inf	pointer
->	O
stat	struct
.	O
st_mtime	O
;	O
sprintf	function
(	O
buf	array
,	O
"%"	pointer
PRIdMAX	O
".%.9d"	pointer
,	O
sec	long
,	O
nsec	int
)	O
;	O
}	O
else	O
{	O
uintmax_t	long
sec	long
=	O
inf	pointer
->	O
stat	struct
.	O
st_mtime	O
;	O
sprintf	function
(	O
buf	array
,	O
"%"	pointer
PRIuMAX	O
".%.9d"	pointer
,	O
sec	long
,	O
nsec	int
)	O
;	O
}	O
}	O
fprintf	function
(	O
outfile	pointer
,	O
"%s %s\t%s\n"	pointer
,	O
mark	pointer
,	O
inf	pointer
->	O
name	pointer
,	O
buf	array
)	O
;	O
}	O
}	O
void	O
print_context_header	function
(	O
struct	O
file_data	struct
inf	pointer
[	O
]	O
,	O
bool	bool
unidiff	bool
)	O
{	O
if	O
(	O
unidiff	bool
)	O
{	O
print_context_label	function
(	O
"---"	pointer
,	O
&	O
inf	pointer
[	O
0	int
]	O
,	O
file_label	array
[	O
0	int
]	O
)	O
;	O
print_context_label	function
(	O
"+++"	pointer
,	O
&	O
inf	pointer
[	O
1	int
]	O
,	O
file_label	array
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
print_context_label	function
(	O
"***"	pointer
,	O
&	O
inf	pointer
[	O
0	int
]	O
,	O
file_label	array
[	O
0	int
]	O
)	O
;	O
print_context_label	function
(	O
"---"	pointer
,	O
&	O
inf	pointer
[	O
1	int
]	O
,	O
file_label	array
[	O
1	int
]	O
)	O
;	O
}	O
}	O
void	O
print_context_script	function
(	O
struct	O
change	struct
*	O
script	pointer
,	O
bool	bool
unidiff	bool
)	O
{	O
if	O
(	O
ignore_blank_lines	bool
||	O
ignore_regexp	struct
.	O
fastmap	pointer
)	O
mark_ignorable	function
(	O
script	pointer
)	O
;	O
else	O
{	O
struct	O
change	struct
*	O
e	pointer
;	O
for	O
(	O
e	pointer
=	O
script	pointer
;	O
e	pointer
;	O
e	pointer
=	O
e	pointer
->	O
link	function
)	O
e	pointer
->	O
ignore	bool
=	O
false	int
;	O
}	O
find_function_last_search	long
=	O
-	O
files	array
[	O
0	int
]	O
.	O
prefix_lines	long
;	O
find_function_last_match	long
=	O
LIN_MAX	O
;	O
if	O
(	O
unidiff	bool
)	O
print_script	function
(	O
script	pointer
,	O
find_hunk	function
,	O
pr_unidiff_hunk	function
)	O
;	O
else	O
print_script	function
(	O
script	pointer
,	O
find_hunk	function
,	O
pr_context_hunk	function
)	O
;	O
}	O
static	O
void	O
print_context_number_range	function
(	O
struct	O
file_data	struct
const	O
*	O
file	array
,	O
lin	long
a	long
,	O
lin	long
b	long
)	O
{	O
long	O
int	O
trans_a	long
,	O
trans_b	long
;	O
translate_range	function
(	O
file	array
,	O
a	long
,	O
b	long
,	O
&	O
trans_a	long
,	O
&	O
trans_b	long
)	O
;	O
if	O
(	O
trans_b	long
<=	O
trans_a	long
)	O
fprintf	function
(	O
outfile	pointer
,	O
"%ld"	pointer
,	O
trans_b	long
)	O
;	O
else	O
fprintf	function
(	O
outfile	pointer
,	O
"%ld,%ld"	pointer
,	O
trans_a	long
,	O
trans_b	long
)	O
;	O
}	O
static	O
void	O
print_context_function	function
(	O
FILE	struct
*	O
out	pointer
,	O
char	O
const	O
*	O
function	pointer
)	O
{	O
int	O
i	int
,	O
j	int
;	O
putc	function
(	O
' '	O
,	O
out	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
c_isspace	function
(	O
(	O
unsigned	O
char	O
)	O
function	pointer
[	O
i	int
]	O
)	O
&&	O
function	pointer
[	O
i	int
]	O
!=	O
'\n'	O
;	O
i	int
++	O
)	O
continue	O
;	O
for	O
(	O
j	int
=	O
i	int
;	O
j	int
<	O
i	int
+	O
40	int
&&	O
function	pointer
[	O
j	int
]	O
!=	O
'\n'	O
;	O
j	int
++	O
)	O
continue	O
;	O
while	O
(	O
i	int
<	O
j	int
&&	O
c_isspace	function
(	O
(	O
unsigned	O
char	O
)	O
function	pointer
[	O
j	int
-	O
1	int
]	O
)	O
)	O
j	int
--	O
;	O
fwrite	function
(	O
function	pointer
+	O
i	int
,	O
sizeof	O
(	O
char	O
)	O
,	O
j	int
-	O
i	int
,	O
out	pointer
)	O
;	O
}	O
static	O
void	O
pr_context_hunk	function
(	O
struct	O
change	struct
*	O
hunk	pointer
)	O
{	O
lin	long
first0	long
,	O
last0	long
,	O
first1	long
,	O
last1	long
,	O
i	int
;	O
char	O
const	O
*	O
prefix	pointer
;	O
char	O
const	O
*	O
function	pointer
;	O
FILE	struct
*	O
out	pointer
;	O
enum	O
changes	enum
changes	enum
=	O
analyze_hunk	function
(	O
hunk	pointer
,	O
&	O
first0	long
,	O
&	O
last0	long
,	O
&	O
first1	long
,	O
&	O
last1	long
)	O
;	O
if	O
(	O
!	O
changes	enum
)	O
return	O
;	O
i	int
=	O
-	O
files	array
[	O
0	int
]	O
.	O
prefix_lines	long
;	O
first0	long
=	O
MAX	O
(	O
first0	long
-	O
context	long
,	O
i	int
)	O
;	O
first1	long
=	O
MAX	O
(	O
first1	long
-	O
context	long
,	O
i	int
)	O
;	O
if	O
(	O
last0	long
<	O
files	array
[	O
0	int
]	O
.	O
valid_lines	long
-	O
context	long
)	O
last0	long
+=	O
context	long
;	O
else	O
last0	long
=	O
files	array
[	O
0	int
]	O
.	O
valid_lines	long
-	O
1	int
;	O
if	O
(	O
last1	long
<	O
files	array
[	O
1	int
]	O
.	O
valid_lines	long
-	O
context	long
)	O
last1	long
+=	O
context	long
;	O
else	O
last1	long
=	O
files	array
[	O
1	int
]	O
.	O
valid_lines	long
-	O
1	int
;	O
function	pointer
=	O
NULL	O
;	O
if	O
(	O
function_regexp	struct
.	O
fastmap	pointer
)	O
function	pointer
=	O
find_function	function
(	O
files	array
[	O
0	int
]	O
.	O
linbuf	pointer
,	O
first0	long
)	O
;	O
begin_output	function
(	O
)	O
;	O
out	pointer
=	O
outfile	pointer
;	O
fputs	function
(	O
"***************"	pointer
,	O
out	pointer
)	O
;	O
if	O
(	O
function	pointer
)	O
print_context_function	function
(	O
out	pointer
,	O
function	pointer
)	O
;	O
fputs	function
(	O
"\n*** "	pointer
,	O
out	pointer
)	O
;	O
print_context_number_range	function
(	O
&	O
files	array
[	O
0	int
]	O
,	O
first0	long
,	O
last0	long
)	O
;	O
fputs	function
(	O
" ****\n"	pointer
,	O
out	pointer
)	O
;	O
if	O
(	O
changes	enum
&	O
OLD	int
)	O
{	O
struct	O
change	struct
*	O
next	pointer
=	O
hunk	pointer
;	O
for	O
(	O
i	int
=	O
first0	long
;	O
i	int
<=	O
last0	long
;	O
i	int
++	O
)	O
{	O
while	O
(	O
next	pointer
&&	O
next	pointer
->	O
line0	long
+	O
next	pointer
->	O
deleted	long
<=	O
i	int
)	O
next	pointer
=	O
next	pointer
->	O
link	function
;	O
prefix	pointer
=	O
" "	pointer
;	O
if	O
(	O
next	pointer
&&	O
next	pointer
->	O
line0	long
<=	O
i	int
)	O
prefix	pointer
=	O
(	O
next	pointer
->	O
inserted	long
>	O
0	int
?	O
"!"	pointer
:	O
"-"	pointer
)	O
;	O
print_1_line	function
(	O
prefix	pointer
,	O
&	O
files	array
[	O
0	int
]	O
.	O
linbuf	pointer
[	O
i	int
]	O
)	O
;	O
}	O
}	O
fputs	function
(	O
"--- "	pointer
,	O
out	pointer
)	O
;	O
print_context_number_range	function
(	O
&	O
files	array
[	O
1	int
]	O
,	O
first1	long
,	O
last1	long
)	O
;	O
fputs	function
(	O
" ----\n"	pointer
,	O
out	pointer
)	O
;	O
if	O
(	O
changes	enum
&	O
NEW	int
)	O
{	O
struct	O
change	struct
*	O
next	pointer
=	O
hunk	pointer
;	O
for	O
(	O
i	int
=	O
first1	long
;	O
i	int
<=	O
last1	long
;	O
i	int
++	O
)	O
{	O
while	O
(	O
next	pointer
&&	O
next	pointer
->	O
line1	long
+	O
next	pointer
->	O
inserted	long
<=	O
i	int
)	O
next	pointer
=	O
next	pointer
->	O
link	function
;	O
prefix	pointer
=	O
" "	pointer
;	O
if	O
(	O
next	pointer
&&	O
next	pointer
->	O
line1	long
<=	O
i	int
)	O
prefix	pointer
=	O
(	O
next	pointer
->	O
deleted	long
>	O
0	int
?	O
"!"	pointer
:	O
"+"	pointer
)	O
;	O
print_1_line	function
(	O
prefix	pointer
,	O
&	O
files	array
[	O
1	int
]	O
.	O
linbuf	pointer
[	O
i	int
]	O
)	O
;	O
}	O
}	O
}	O
static	O
void	O
print_unidiff_number_range	function
(	O
struct	O
file_data	struct
const	O
*	O
file	array
,	O
lin	long
a	long
,	O
lin	long
b	long
)	O
{	O
long	O
int	O
trans_a	long
,	O
trans_b	long
;	O
translate_range	function
(	O
file	array
,	O
a	long
,	O
b	long
,	O
&	O
trans_a	long
,	O
&	O
trans_b	long
)	O
;	O
if	O
(	O
trans_b	long
<=	O
trans_a	long
)	O
fprintf	function
(	O
outfile	pointer
,	O
trans_b	long
<	O
trans_a	long
?	O
"%ld,0"	pointer
:	O
"%ld"	pointer
,	O
trans_b	long
)	O
;	O
else	O
fprintf	function
(	O
outfile	pointer
,	O
"%ld,%ld"	pointer
,	O
trans_a	long
,	O
trans_b	long
-	O
trans_a	long
+	O
1	int
)	O
;	O
}	O
static	O
void	O
pr_unidiff_hunk	function
(	O
struct	O
change	struct
*	O
hunk	pointer
)	O
{	O
lin	long
first0	long
,	O
last0	long
,	O
first1	long
,	O
last1	long
;	O
lin	long
i	int
,	O
j	int
,	O
k	long
;	O
struct	O
change	struct
*	O
next	pointer
;	O
char	O
const	O
*	O
function	pointer
;	O
FILE	struct
*	O
out	pointer
;	O
if	O
(	O
!	O
analyze_hunk	function
(	O
hunk	pointer
,	O
&	O
first0	long
,	O
&	O
last0	long
,	O
&	O
first1	long
,	O
&	O
last1	long
)	O
)	O
return	O
;	O
i	int
=	O
-	O
files	array
[	O
0	int
]	O
.	O
prefix_lines	long
;	O
first0	long
=	O
MAX	O
(	O
first0	long
-	O
context	long
,	O
i	int
)	O
;	O
first1	long
=	O
MAX	O
(	O
first1	long
-	O
context	long
,	O
i	int
)	O
;	O
if	O
(	O
last0	long
<	O
files	array
[	O
0	int
]	O
.	O
valid_lines	long
-	O
context	long
)	O
last0	long
+=	O
context	long
;	O
else	O
last0	long
=	O
files	array
[	O
0	int
]	O
.	O
valid_lines	long
-	O
1	int
;	O
if	O
(	O
last1	long
<	O
files	array
[	O
1	int
]	O
.	O
valid_lines	long
-	O
context	long
)	O
last1	long
+=	O
context	long
;	O
else	O
last1	long
=	O
files	array
[	O
1	int
]	O
.	O
valid_lines	long
-	O
1	int
;	O
function	pointer
=	O
NULL	O
;	O
if	O
(	O
function_regexp	struct
.	O
fastmap	pointer
)	O
function	pointer
=	O
find_function	function
(	O
files	array
[	O
0	int
]	O
.	O
linbuf	pointer
,	O
first0	long
)	O
;	O
begin_output	function
(	O
)	O
;	O
out	pointer
=	O
outfile	pointer
;	O
fputs	function
(	O
"@@ -"	pointer
,	O
out	pointer
)	O
;	O
print_unidiff_number_range	function
(	O
&	O
files	array
[	O
0	int
]	O
,	O
first0	long
,	O
last0	long
)	O
;	O
fputs	function
(	O
" +"	pointer
,	O
out	pointer
)	O
;	O
print_unidiff_number_range	function
(	O
&	O
files	array
[	O
1	int
]	O
,	O
first1	long
,	O
last1	long
)	O
;	O
fputs	function
(	O
" @@"	pointer
,	O
out	pointer
)	O
;	O
if	O
(	O
function	pointer
)	O
print_context_function	function
(	O
out	pointer
,	O
function	pointer
)	O
;	O
putc	function
(	O
'\n'	O
,	O
out	pointer
)	O
;	O
next	pointer
=	O
hunk	pointer
;	O
i	int
=	O
first0	long
;	O
j	int
=	O
first1	long
;	O
while	O
(	O
i	int
<=	O
last0	long
||	O
j	int
<=	O
last1	long
)	O
{	O
if	O
(	O
!	O
next	pointer
||	O
i	int
<	O
next	pointer
->	O
line0	long
)	O
{	O
char	O
const	O
*	O
const	O
*	O
line	pointer
=	O
&	O
files	array
[	O
0	int
]	O
.	O
linbuf	pointer
[	O
i	int
++	O
]	O
;	O
if	O
(	O
!	O
(	O
suppress_blank_empty	bool
&&	O
*	O
*	O
line	pointer
==	O
'\n'	O
)	O
)	O
putc	function
(	O
initial_tab	bool
?	O
'\t'	O
:	O
' '	O
,	O
out	pointer
)	O
;	O
print_1_line	function
(	O
NULL	O
,	O
line	pointer
)	O
;	O
j	int
++	O
;	O
}	O
else	O
{	O
k	long
=	O
next	pointer
->	O
deleted	long
;	O
while	O
(	O
k	long
--	O
)	O
{	O
char	O
const	O
*	O
const	O
*	O
line	pointer
=	O
&	O
files	array
[	O
0	int
]	O
.	O
linbuf	pointer
[	O
i	int
++	O
]	O
;	O
putc	function
(	O
'-'	O
,	O
out	pointer
)	O
;	O
if	O
(	O
initial_tab	bool
&&	O
!	O
(	O
suppress_blank_empty	bool
&&	O
*	O
*	O
line	pointer
==	O
'\n'	O
)	O
)	O
putc	function
(	O
'\t'	O
,	O
out	pointer
)	O
;	O
print_1_line	function
(	O
NULL	O
,	O
line	pointer
)	O
;	O
}	O
k	long
=	O
next	pointer
->	O
inserted	long
;	O
while	O
(	O
k	long
--	O
)	O
{	O
char	O
const	O
*	O
const	O
*	O
line	pointer
=	O
&	O
files	array
[	O
1	int
]	O
.	O
linbuf	pointer
[	O
j	int
++	O
]	O
;	O
putc	function
(	O
'+'	O
,	O
out	pointer
)	O
;	O
if	O
(	O
initial_tab	bool
&&	O
!	O
(	O
suppress_blank_empty	bool
&&	O
*	O
*	O
line	pointer
==	O
'\n'	O
)	O
)	O
putc	function
(	O
'\t'	O
,	O
out	pointer
)	O
;	O
print_1_line	function
(	O
NULL	O
,	O
line	pointer
)	O
;	O
}	O
next	pointer
=	O
next	pointer
->	O
link	function
;	O
}	O
}	O
}	O
static	O
struct	O
change	struct
*	O
find_hunk	function
(	O
struct	O
change	struct
*	O
start	pointer
)	O
{	O
struct	O
change	struct
*	O
prev	pointer
;	O
lin	long
top0	long
,	O
top1	long
;	O
lin	long
thresh	long
;	O
lin	long
non_ignorable_threshold	long
=	O
(	O
LIN_MAX	O
-	O
1	int
)	O
/	O
2	int
<	O
context	long
?	O
LIN_MAX	O
:	O
2	int
*	O
context	long
+	O
1	int
;	O
lin	long
ignorable_threshold	long
=	O
context	long
;	O
do	O
{	O
top0	long
=	O
start	pointer
->	O
line0	long
+	O
start	pointer
->	O
deleted	long
;	O
top1	long
=	O
start	pointer
->	O
line1	long
+	O
start	pointer
->	O
inserted	long
;	O
prev	pointer
=	O
start	pointer
;	O
start	pointer
=	O
start	pointer
->	O
link	function
;	O
thresh	long
=	O
(	O
prev	pointer
->	O
ignore	bool
||	O
(	O
start	pointer
&&	O
start	pointer
->	O
ignore	bool
)	O
?	O
ignorable_threshold	long
:	O
non_ignorable_threshold	long
)	O
;	O
if	O
(	O
start	pointer
&&	O
start	pointer
->	O
line0	long
-	O
top0	long
!=	O
start	pointer
->	O
line1	long
-	O
top1	long
)	O
abort	function
(	O
)	O
;	O
}	O
while	O
(	O
start	pointer
&&	O
start	pointer
->	O
line0	long
-	O
top0	long
<	O
thresh	long
)	O
;	O
return	O
prev	pointer
;	O
}	O
static	O
void	O
mark_ignorable	function
(	O
struct	O
change	struct
*	O
script	pointer
)	O
{	O
while	O
(	O
script	pointer
)	O
{	O
struct	O
change	struct
*	O
next	pointer
=	O
script	pointer
->	O
link	function
;	O
lin	long
first0	long
,	O
last0	long
,	O
first1	long
,	O
last1	long
;	O
script	pointer
->	O
link	function
=	O
NULL	O
;	O
script	pointer
->	O
ignore	bool
=	O
!	O
analyze_hunk	function
(	O
script	pointer
,	O
&	O
first0	long
,	O
&	O
last0	long
,	O
&	O
first1	long
,	O
&	O
last1	long
)	O
;	O
script	pointer
->	O
link	function
=	O
next	pointer
;	O
script	pointer
=	O
next	pointer
;	O
}	O
}	O
static	O
char	O
const	O
*	O
find_function	function
(	O
char	O
const	O
*	O
const	O
*	O
linbuf	pointer
,	O
lin	long
linenum	long
)	O
{	O
lin	long
i	int
=	O
linenum	long
;	O
lin	long
last	long
=	O
find_function_last_search	long
;	O
find_function_last_search	long
=	O
i	int
;	O
while	O
(	O
last	long
<=	O
--	O
i	int
)	O
{	O
char	O
const	O
*	O
line	pointer
=	O
linbuf	pointer
[	O
i	int
]	O
;	O
size_t	long
linelen	long
=	O
linbuf	pointer
[	O
i	int
+	O
1	int
]	O
-	O
line	pointer
-	O
1	int
;	O
int	O
len	int
=	O
MIN	O
(	O
linelen	long
,	O
INT_MAX	O
)	O
;	O
if	O
(	O
0	int
<=	O
re_search	function
(	O
&	O
function_regexp	struct
,	O
line	pointer
,	O
len	int
,	O
0	int
,	O
len	int
,	O
NULL	O
)	O
)	O
{	O
find_function_last_match	long
=	O
i	int
;	O
return	O
line	pointer
;	O
}	O
}	O
if	O
(	O
find_function_last_match	long
!=	O
LIN_MAX	O
)	O
return	O
linbuf	pointer
[	O
find_function_last_match	long
]	O
;	O
return	O
NULL	O
;	O
}	O
