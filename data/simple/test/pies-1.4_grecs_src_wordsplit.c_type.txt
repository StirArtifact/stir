static	O
void	O
_wsplt_alloc_die	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
wsp	pointer
->	O
ws_error	pointer
(	O
"%s"	pointer
,	O
_	O
(	O
"memory exhausted"	pointer
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
static	O
void	O
_wsplt_error	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
}	O
static	O
void	O
wordsplit_free_nodes	function
(	O
struct	O
wordsplit	struct
*	O
)	O
;	O
static	O
int	O
_wsplt_seterr	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
int	O
ec	int
)	O
{	O
wsp	pointer
->	O
ws_errno	int
=	O
ec	int
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SHOWERR	int
)	O
wordsplit_perror	function
(	O
wsp	pointer
)	O
;	O
return	O
ec	int
;	O
}	O
static	O
int	O
_wsplt_nomem	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
errno	O
=	O
ENOMEM	int
;	O
wsp	pointer
->	O
ws_errno	int
=	O
WRDSE_NOSPACE	int
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_ENOMEMABRT	int
)	O
wsp	pointer
->	O
ws_alloc_die	pointer
(	O
wsp	pointer
)	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SHOWERR	int
)	O
wordsplit_perror	function
(	O
wsp	pointer
)	O
;	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_REUSE	int
)	O
)	O
wordsplit_free	function
(	O
wsp	pointer
)	O
;	O
wordsplit_free_nodes	function
(	O
wsp	pointer
)	O
;	O
return	O
wsp	pointer
->	O
ws_errno	int
;	O
}	O
static	O
void	O
_wsplt_store_errctx	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
char	O
const	O
*	O
str	pointer
,	O
size_t	long
len	long
)	O
{	O
free	function
(	O
wsp	pointer
->	O
ws_errctx	pointer
)	O
;	O
wsp	pointer
->	O
ws_errctx	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
wsp	pointer
->	O
ws_errctx	pointer
)	O
{	O
wsp	pointer
->	O
ws_error	pointer
(	O
"%s"	pointer
,	O
_	O
(	O
"memory exhausted while trying to store error context"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
memcpy	function
(	O
wsp	pointer
->	O
ws_errctx	pointer
,	O
str	pointer
,	O
len	long
)	O
;	O
wsp	pointer
->	O
ws_errctx	pointer
[	O
len	long
]	O
=	O
0	int
;	O
}	O
}	O
static	O
inline	O
int	O
_wsplt_setctxerr	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
int	O
ec	int
,	O
char	O
const	O
*	O
str	pointer
,	O
size_t	long
len	long
)	O
{	O
_wsplt_store_errctx	function
(	O
wsp	pointer
,	O
str	pointer
,	O
len	long
)	O
;	O
return	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
ec	int
)	O
;	O
}	O
static	O
int	O
wordsplit_run	function
(	O
const	O
char	O
*	O
command	pointer
,	O
size_t	long
length	long
,	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
int	O
flags	int
,	O
int	O
lvl	int
)	O
;	O
static	O
int	O
wordsplit_init	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
const	O
char	O
*	O
input	pointer
,	O
size_t	long
len	long
,	O
int	O
flags	int
)	O
;	O
static	O
int	O
wordsplit_process_list	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
size_t	long
start	long
)	O
;	O
static	O
int	O
wordsplit_finish	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
;	O
static	O
int	O
_wsplt_subsplit	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit	struct
*	O
wss	pointer
,	O
char	O
const	O
*	O
str	pointer
,	O
int	O
len	long
,	O
int	O
flags	int
,	O
int	O
finalize	int
)	O
{	O
int	O
rc	int
;	O
wss	pointer
->	O
ws_delim	pointer
=	O
wsp	pointer
->	O
ws_delim	pointer
;	O
wss	pointer
->	O
ws_debug	pointer
=	O
wsp	pointer
->	O
ws_debug	pointer
;	O
wss	pointer
->	O
ws_error	pointer
=	O
wsp	pointer
->	O
ws_error	pointer
;	O
wss	pointer
->	O
ws_alloc_die	pointer
=	O
wsp	pointer
->	O
ws_alloc_die	pointer
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
WRDSF_NOVAR	int
)	O
)	O
{	O
wss	pointer
->	O
ws_env	pointer
=	O
wsp	pointer
->	O
ws_env	pointer
;	O
wss	pointer
->	O
ws_getvar	pointer
=	O
wsp	pointer
->	O
ws_getvar	pointer
;	O
flags	int
|=	O
wsp	pointer
->	O
ws_flags	int
&	O
(	O
WRDSF_ENV	int
|	O
WRDSF_ENV_KV	int
|	O
WRDSF_GETVAR	int
)	O
;	O
}	O
if	O
(	O
!	O
(	O
flags	int
&	O
WRDSF_NOCMD	int
)	O
)	O
{	O
wss	pointer
->	O
ws_command	pointer
=	O
wsp	pointer
->	O
ws_command	pointer
;	O
}	O
if	O
(	O
(	O
flags	int
&	O
(	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
)	O
)	O
!=	O
(	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
)	O
)	O
{	O
wss	pointer
->	O
ws_closure	pointer
=	O
wsp	pointer
->	O
ws_closure	pointer
;	O
flags	int
|=	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_CLOSURE	int
;	O
}	O
wss	pointer
->	O
ws_options	int
=	O
wsp	pointer
->	O
ws_options	int
;	O
flags	int
|=	O
WRDSF_DELIM	int
|	O
WRDSF_ALLOC_DIE	int
|	O
WRDSF_ERROR	int
|	O
WRDSF_DEBUG	int
|	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
(	O
WRDSF_SHOWDBG	int
|	O
WRDSF_SHOWERR	int
|	O
WRDSF_OPTIONS	int
)	O
)	O
;	O
rc	int
=	O
wordsplit_init	function
(	O
wss	pointer
,	O
str	pointer
,	O
len	long
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
wss	pointer
->	O
ws_lvl	int
=	O
wsp	pointer
->	O
ws_lvl	int
+	O
1	int
;	O
rc	int
=	O
wordsplit_process_list	function
(	O
wss	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
wordsplit_free_nodes	function
(	O
wss	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
finalize	int
)	O
{	O
rc	int
=	O
wordsplit_finish	function
(	O
wss	pointer
)	O
;	O
wordsplit_free_nodes	function
(	O
wss	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
void	O
_wsplt_seterr_sub	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit	struct
*	O
wss	pointer
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
free	function
(	O
wsp	pointer
->	O
ws_usererr	pointer
)	O
;	O
wsp	pointer
->	O
ws_errno	int
=	O
wss	pointer
->	O
ws_errno	int
;	O
if	O
(	O
wss	pointer
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
{	O
wsp	pointer
->	O
ws_usererr	pointer
=	O
wss	pointer
->	O
ws_usererr	pointer
;	O
wss	pointer
->	O
ws_errno	int
=	O
WRDSE_EOF	O
;	O
wss	pointer
->	O
ws_usererr	pointer
=	O
NULL	O
;	O
}	O
free	function
(	O
wsp	pointer
->	O
ws_errctx	pointer
)	O
;	O
wsp	pointer
->	O
ws_errctx	pointer
=	O
wss	pointer
->	O
ws_errctx	pointer
;	O
wss	pointer
->	O
ws_errctx	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
wordsplit_init0	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_REUSE	int
)	O
{	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_APPEND	int
)	O
)	O
wordsplit_free_words	function
(	O
wsp	pointer
)	O
;	O
wordsplit_clearerr	function
(	O
wsp	pointer
)	O
;	O
}	O
else	O
{	O
wsp	pointer
->	O
ws_wordv	pointer
=	O
NULL	O
;	O
wsp	pointer
->	O
ws_wordc	long
=	O
0	int
;	O
wsp	pointer
->	O
ws_wordn	long
=	O
0	int
;	O
}	O
wsp	pointer
->	O
ws_errno	int
=	O
0	int
;	O
}	O
char	O
wordsplit_c_escape_tab	array
[	O
]	O
=	O
"\\\\\"\"a\ab\bf\fn\nr\rt\tv\v"	pointer
;	O
static	O
int	O
wordsplit_init	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
const	O
char	O
*	O
input	pointer
,	O
size_t	long
len	long
,	O
int	O
flags	int
)	O
{	O
wsp	pointer
->	O
ws_flags	int
=	O
flags	int
;	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_ALLOC_DIE	int
)	O
)	O
wsp	pointer
->	O
ws_alloc_die	pointer
=	O
_wsplt_alloc_die	function
;	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_ERROR	int
)	O
)	O
wsp	pointer
->	O
ws_error	pointer
=	O
_wsplt_error	function
;	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_NOVAR	int
)	O
)	O
{	O
wsp	pointer
->	O
ws_envidx	long
=	O
wsp	pointer
->	O
ws_envsiz	long
=	O
0	int
;	O
wsp	pointer
->	O
ws_envbuf	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_NOCMD	int
)	O
)	O
{	O
if	O
(	O
!	O
wsp	pointer
->	O
ws_command	pointer
)	O
{	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
WRDSE_USAGE	int
)	O
;	O
errno	O
=	O
EINVAL	int
;	O
return	O
wsp	pointer
->	O
ws_errno	int
;	O
}	O
}	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
{	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_DEBUG	int
)	O
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_ERROR	int
)	O
wsp	pointer
->	O
ws_debug	pointer
=	O
wsp	pointer
->	O
ws_error	pointer
;	O
else	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SHOWERR	int
)	O
wsp	pointer
->	O
ws_debug	pointer
=	O
_wsplt_error	function
;	O
else	O
wsp	pointer
->	O
ws_flags	int
&=	O
~	O
WRDSF_SHOWDBG	int
;	O
}	O
}	O
wsp	pointer
->	O
ws_input	pointer
=	O
input	pointer
;	O
wsp	pointer
->	O
ws_len	long
=	O
len	long
;	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_DOOFFS	int
)	O
)	O
wsp	pointer
->	O
ws_offs	long
=	O
0	int
;	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_DELIM	int
)	O
)	O
wsp	pointer
->	O
ws_delim	pointer
=	O
" \t\n"	pointer
;	O
wsp	pointer
->	O
ws_sep	array
[	O
0	int
]	O
=	O
wsp	pointer
->	O
ws_delim	pointer
[	O
0	int
]	O
;	O
wsp	pointer
->	O
ws_sep	array
[	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_COMMENT	int
)	O
)	O
wsp	pointer
->	O
ws_comment	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_CLOSURE	int
)	O
)	O
wsp	pointer
->	O
ws_closure	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_OPTIONS	int
)	O
)	O
wsp	pointer
->	O
ws_options	int
=	O
0	int
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_ESCAPE	int
)	O
{	O
if	O
(	O
!	O
wsp	pointer
->	O
ws_escape	array
[	O
WRDSX_WORD	int
]	O
)	O
wsp	pointer
->	O
ws_escape	array
[	O
WRDSX_WORD	int
]	O
=	O
""	pointer
;	O
if	O
(	O
!	O
wsp	pointer
->	O
ws_escape	array
[	O
WRDSX_QUOTE	int
]	O
)	O
wsp	pointer
->	O
ws_escape	array
[	O
WRDSX_QUOTE	int
]	O
=	O
""	pointer
;	O
}	O
else	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_CESCAPES	int
)	O
{	O
wsp	pointer
->	O
ws_escape	array
[	O
WRDSX_WORD	int
]	O
=	O
wordsplit_c_escape_tab	array
;	O
wsp	pointer
->	O
ws_escape	array
[	O
WRDSX_QUOTE	int
]	O
=	O
wordsplit_c_escape_tab	array
;	O
wsp	pointer
->	O
ws_options	int
|=	O
WRDSO_OESC_QUOTE	int
|	O
WRDSO_OESC_WORD	int
|	O
WRDSO_XESC_QUOTE	int
|	O
WRDSO_XESC_WORD	int
;	O
}	O
else	O
{	O
wsp	pointer
->	O
ws_escape	array
[	O
WRDSX_WORD	int
]	O
=	O
""	pointer
;	O
wsp	pointer
->	O
ws_escape	array
[	O
WRDSX_QUOTE	int
]	O
=	O
"\\\\\"\""	pointer
;	O
wsp	pointer
->	O
ws_options	int
|=	O
WRDSO_BSKEEP_QUOTE	int
;	O
}	O
}	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
)	O
{	O
wsp	pointer
->	O
ws_paramv	pointer
=	O
NULL	O
;	O
wsp	pointer
->	O
ws_paramc	long
=	O
0	int
;	O
}	O
wsp	pointer
->	O
ws_paramidx	long
=	O
wsp	pointer
->	O
ws_paramsiz	long
=	O
0	int
;	O
wsp	pointer
->	O
ws_parambuf	pointer
=	O
NULL	O
;	O
wsp	pointer
->	O
ws_endp	long
=	O
0	int
;	O
wsp	pointer
->	O
ws_wordi	long
=	O
0	int
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_REUSE	int
)	O
wordsplit_free_nodes	function
(	O
wsp	pointer
)	O
;	O
wsp	pointer
->	O
ws_head	pointer
=	O
wsp	pointer
->	O
ws_tail	pointer
=	O
NULL	O
;	O
wsp	pointer
->	O
ws_errctx	pointer
=	O
NULL	O
;	O
wordsplit_init0	function
(	O
wsp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
alloc_space	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
size_t	long
count	long
)	O
{	O
size_t	long
offs	long
=	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_DOOFFS	int
)	O
?	O
wsp	pointer
->	O
ws_offs	long
:	O
0	int
;	O
char	O
*	O
*	O
ptr	pointer
;	O
size_t	long
newalloc	long
;	O
if	O
(	O
wsp	pointer
->	O
ws_wordv	pointer
==	O
NULL	O
)	O
{	O
newalloc	long
=	O
offs	long
+	O
count	long
>	O
ALLOC_INIT	int
?	O
count	long
:	O
ALLOC_INIT	int
;	O
ptr	pointer
=	O
calloc	function
(	O
newalloc	long
,	O
sizeof	O
(	O
ptr	pointer
[	O
0	int
]	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
wsp	pointer
->	O
ws_wordn	long
<	O
offs	long
+	O
wsp	pointer
->	O
ws_wordc	long
+	O
count	long
)	O
{	O
newalloc	long
=	O
offs	long
+	O
wsp	pointer
->	O
ws_wordc	long
+	O
(	O
count	long
>	O
ALLOC_INCR	int
?	O
count	long
:	O
ALLOC_INCR	int
)	O
;	O
ptr	pointer
=	O
realloc	function
(	O
wsp	pointer
->	O
ws_wordv	pointer
,	O
newalloc	long
*	O
sizeof	O
(	O
ptr	pointer
[	O
0	int
]	O
)	O
)	O
;	O
}	O
else	O
return	O
0	int
;	O
if	O
(	O
ptr	pointer
)	O
{	O
wsp	pointer
->	O
ws_wordn	long
=	O
newalloc	long
;	O
wsp	pointer
->	O
ws_wordv	pointer
=	O
ptr	pointer
;	O
}	O
else	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
wordsplit_node	struct
{	O
struct	O
wordsplit_node	struct
*	O
prev	pointer
;	O
struct	O
wordsplit_node	struct
*	O
next	pointer
;	O
int	O
flags	int
;	O
union	O
{	O
struct	O
{	O
size_t	long
beg	long
;	O
size_t	long
end	long
;	O
}	O
segm	struct
;	O
char	O
*	O
word	pointer
;	O
}	O
v	union
;	O
}	O
;	O
static	O
const	O
char	O
*	O
wsnode_flagstr	function
(	O
int	O
flags	int
)	O
{	O
static	O
char	O
retbuf	array
[	O
7	int
]	O
;	O
char	O
*	O
p	pointer
=	O
retbuf	array
;	O
if	O
(	O
flags	int
&	O
_WSNF_WORD	int
)	O
*	O
p	pointer
++	O
=	O
'w'	O
;	O
else	O
if	O
(	O
flags	int
&	O
_WSNF_NULL	int
)	O
*	O
p	pointer
++	O
=	O
'n'	O
;	O
else	O
*	O
p	pointer
++	O
=	O
'-'	O
;	O
if	O
(	O
flags	int
&	O
_WSNF_QUOTE	int
)	O
*	O
p	pointer
++	O
=	O
'q'	O
;	O
else	O
*	O
p	pointer
++	O
=	O
'-'	O
;	O
if	O
(	O
flags	int
&	O
_WSNF_NOEXPAND	int
)	O
*	O
p	pointer
++	O
=	O
'E'	O
;	O
else	O
*	O
p	pointer
++	O
=	O
'-'	O
;	O
if	O
(	O
flags	int
&	O
_WSNF_JOIN	int
)	O
*	O
p	pointer
++	O
=	O
'j'	O
;	O
else	O
*	O
p	pointer
++	O
=	O
'-'	O
;	O
if	O
(	O
flags	int
&	O
_WSNF_SEXP	int
)	O
*	O
p	pointer
++	O
=	O
's'	O
;	O
else	O
*	O
p	pointer
++	O
=	O
'-'	O
;	O
if	O
(	O
flags	int
&	O
_WSNF_DELIM	int
)	O
*	O
p	pointer
++	O
=	O
'd'	O
;	O
else	O
*	O
p	pointer
++	O
=	O
'-'	O
;	O
*	O
p	pointer
=	O
0	int
;	O
return	O
retbuf	array
;	O
}	O
static	O
const	O
char	O
*	O
wsnode_ptr	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit_node	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_NULL	int
)	O
return	O
""	pointer
;	O
else	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
return	O
p	pointer
->	O
v	union
.	O
word	pointer
;	O
else	O
return	O
wsp	pointer
->	O
ws_input	pointer
+	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
;	O
}	O
static	O
size_t	long
wsnode_len	function
(	O
struct	O
wordsplit_node	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_NULL	int
)	O
return	O
0	int
;	O
else	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
return	O
strlen	function
(	O
p	pointer
->	O
v	union
.	O
word	pointer
)	O
;	O
else	O
return	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
end	long
-	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
;	O
}	O
static	O
int	O
wsnode_new	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit_node	struct
*	O
*	O
pnode	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
node	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
node	pointer
)	O
)	O
;	O
if	O
(	O
!	O
node	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
*	O
pnode	pointer
=	O
node	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
wsnode_free	function
(	O
struct	O
wordsplit_node	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
(	O
p	pointer
->	O
flags	int
&	O
(	O
_WSNF_WORD	int
|	O
_WSNF_CONST	int
)	O
)	O
==	O
_WSNF_WORD	int
)	O
free	function
(	O
p	pointer
->	O
v	union
.	O
word	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
static	O
void	O
wsnode_append	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit_node	struct
*	O
node	pointer
)	O
{	O
node	pointer
->	O
next	pointer
=	O
NULL	O
;	O
node	pointer
->	O
prev	pointer
=	O
wsp	pointer
->	O
ws_tail	pointer
;	O
if	O
(	O
wsp	pointer
->	O
ws_tail	pointer
)	O
wsp	pointer
->	O
ws_tail	pointer
->	O
next	pointer
=	O
node	pointer
;	O
else	O
wsp	pointer
->	O
ws_head	pointer
=	O
node	pointer
;	O
wsp	pointer
->	O
ws_tail	pointer
=	O
node	pointer
;	O
}	O
static	O
void	O
wsnode_remove	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit_node	struct
*	O
node	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
p	pointer
=	O
node	pointer
->	O
prev	pointer
;	O
if	O
(	O
p	pointer
)	O
{	O
p	pointer
->	O
next	pointer
=	O
node	pointer
->	O
next	pointer
;	O
if	O
(	O
!	O
node	pointer
->	O
next	pointer
)	O
p	pointer
->	O
flags	int
&=	O
~	O
_WSNF_JOIN	int
;	O
}	O
else	O
wsp	pointer
->	O
ws_head	pointer
=	O
node	pointer
->	O
next	pointer
;	O
p	pointer
=	O
node	pointer
->	O
next	pointer
;	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
prev	pointer
=	O
node	pointer
->	O
prev	pointer
;	O
else	O
wsp	pointer
->	O
ws_tail	pointer
=	O
node	pointer
->	O
prev	pointer
;	O
node	pointer
->	O
next	pointer
=	O
node	pointer
->	O
prev	pointer
=	O
NULL	O
;	O
}	O
static	O
struct	O
wordsplit_node	struct
*	O
wsnode_tail	function
(	O
struct	O
wordsplit_node	struct
*	O
p	pointer
)	O
{	O
while	O
(	O
p	pointer
&&	O
p	pointer
->	O
next	pointer
)	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
return	O
p	pointer
;	O
}	O
static	O
void	O
wsnode_insert	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit_node	struct
*	O
node	pointer
,	O
struct	O
wordsplit_node	struct
*	O
anchor	pointer
,	O
int	O
before	int
)	O
{	O
if	O
(	O
!	O
wsp	pointer
->	O
ws_head	pointer
)	O
{	O
node	pointer
->	O
next	pointer
=	O
node	pointer
->	O
prev	pointer
=	O
NULL	O
;	O
wsp	pointer
->	O
ws_head	pointer
=	O
wsp	pointer
->	O
ws_tail	pointer
=	O
node	pointer
;	O
}	O
else	O
if	O
(	O
before	int
)	O
{	O
if	O
(	O
anchor	pointer
->	O
prev	pointer
)	O
wsnode_insert	function
(	O
wsp	pointer
,	O
node	pointer
,	O
anchor	pointer
->	O
prev	pointer
,	O
0	int
)	O
;	O
else	O
{	O
struct	O
wordsplit_node	struct
*	O
tail	pointer
=	O
wsnode_tail	function
(	O
node	pointer
)	O
;	O
node	pointer
->	O
prev	pointer
=	O
NULL	O
;	O
tail	pointer
->	O
next	pointer
=	O
anchor	pointer
;	O
anchor	pointer
->	O
prev	pointer
=	O
tail	pointer
;	O
wsp	pointer
->	O
ws_head	pointer
=	O
node	pointer
;	O
}	O
}	O
else	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
struct	O
wordsplit_node	struct
*	O
tail	pointer
=	O
wsnode_tail	function
(	O
node	pointer
)	O
;	O
p	pointer
=	O
anchor	pointer
->	O
next	pointer
;	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
prev	pointer
=	O
tail	pointer
;	O
else	O
wsp	pointer
->	O
ws_tail	pointer
=	O
tail	pointer
;	O
tail	pointer
->	O
next	pointer
=	O
p	pointer
;	O
node	pointer
->	O
prev	pointer
=	O
anchor	pointer
;	O
anchor	pointer
->	O
next	pointer
=	O
node	pointer
;	O
}	O
}	O
static	O
int	O
wordsplit_add_segm	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
size_t	long
beg	long
,	O
size_t	long
end	long
,	O
int	O
flg	int
)	O
{	O
struct	O
wordsplit_node	struct
*	O
node	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
end	long
==	O
beg	long
&&	O
!	O
(	O
flg	int
&	O
_WSNF_EMPTYOK	int
)	O
)	O
return	O
0	int
;	O
rc	int
=	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
node	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
node	pointer
->	O
flags	int
=	O
flg	int
&	O
~	O
(	O
_WSNF_WORD	int
|	O
_WSNF_EMPTYOK	int
)	O
;	O
node	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
=	O
beg	long
;	O
node	pointer
->	O
v	union
.	O
segm	struct
.	O
end	long
=	O
end	long
;	O
wsnode_append	function
(	O
wsp	pointer
,	O
node	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
wordsplit_free_nodes	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
;	O
p	pointer
;	O
)	O
{	O
struct	O
wordsplit_node	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
wsnode_free	function
(	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
}	O
wsp	pointer
->	O
ws_head	pointer
=	O
wsp	pointer
->	O
ws_tail	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
wordsplit_dump_nodes	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
int	O
n	long
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
,	O
n	long
=	O
0	int
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
,	O
n	long
++	O
)	O
{	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
wsp	pointer
->	O
ws_debug	pointer
(	O
"(%02d) %4d: %p: %#04x (%s):%s;"	pointer
,	O
wsp	pointer
->	O
ws_lvl	int
,	O
n	long
,	O
p	pointer
,	O
p	pointer
->	O
flags	int
,	O
wsnode_flagstr	function
(	O
p	pointer
->	O
flags	int
)	O
,	O
p	pointer
->	O
v	union
.	O
word	pointer
)	O
;	O
else	O
wsp	pointer
->	O
ws_debug	pointer
(	O
"(%02d) %4d: %p: %#04x (%s):%.*s;"	pointer
,	O
wsp	pointer
->	O
ws_lvl	int
,	O
n	long
,	O
p	pointer
,	O
p	pointer
->	O
flags	int
,	O
wsnode_flagstr	function
(	O
p	pointer
->	O
flags	int
)	O
,	O
(	O
int	O
)	O
(	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
end	long
-	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
)	O
,	O
wsp	pointer
->	O
ws_input	pointer
+	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
)	O
;	O
}	O
}	O
static	O
int	O
coalesce_segment	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit_node	struct
*	O
node	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
,	O
*	O
end	long
;	O
size_t	long
len	long
=	O
0	int
;	O
char	O
*	O
buf	pointer
,	O
*	O
cur	pointer
;	O
int	O
stop	int
;	O
if	O
(	O
!	O
(	O
node	pointer
->	O
flags	int
&	O
_WSNF_JOIN	int
)	O
)	O
return	O
0	int
;	O
for	O
(	O
p	pointer
=	O
node	pointer
;	O
p	pointer
&&	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_JOIN	int
)	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
len	long
+=	O
wsnode_len	function
(	O
p	pointer
)	O
;	O
}	O
if	O
(	O
p	pointer
)	O
len	long
+=	O
wsnode_len	function
(	O
p	pointer
)	O
;	O
end	long
=	O
p	pointer
;	O
buf	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
cur	pointer
=	O
buf	pointer
;	O
p	pointer
=	O
node	pointer
;	O
for	O
(	O
stop	int
=	O
0	int
;	O
!	O
stop	int
;	O
)	O
{	O
struct	O
wordsplit_node	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
const	O
char	O
*	O
str	pointer
=	O
wsnode_ptr	function
(	O
wsp	pointer
,	O
p	pointer
)	O
;	O
size_t	long
slen	long
=	O
wsnode_len	function
(	O
p	pointer
)	O
;	O
memcpy	function
(	O
cur	pointer
,	O
str	pointer
,	O
slen	long
)	O
;	O
cur	pointer
+=	O
slen	long
;	O
if	O
(	O
p	pointer
!=	O
node	pointer
)	O
{	O
node	pointer
->	O
flags	int
|=	O
p	pointer
->	O
flags	int
&	O
_WSNF_QUOTE	int
;	O
wsnode_remove	function
(	O
wsp	pointer
,	O
p	pointer
)	O
;	O
stop	int
=	O
p	pointer
==	O
end	long
;	O
wsnode_free	function
(	O
p	pointer
)	O
;	O
}	O
p	pointer
=	O
next	pointer
;	O
}	O
*	O
cur	pointer
=	O
0	int
;	O
node	pointer
->	O
flags	int
&=	O
~	O
_WSNF_JOIN	int
;	O
if	O
(	O
node	pointer
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
free	function
(	O
node	pointer
->	O
v	union
.	O
word	pointer
)	O
;	O
else	O
node	pointer
->	O
flags	int
|=	O
_WSNF_WORD	int
;	O
node	pointer
->	O
v	union
.	O
word	pointer
=	O
buf	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
wordsplit_string_unquote_copy	function
(	O
struct	O
wordsplit	struct
*	O
ws	pointer
,	O
int	O
inquote	int
,	O
char	O
*	O
dst	pointer
,	O
const	O
char	O
*	O
src	pointer
,	O
size_t	long
n	long
)	O
;	O
static	O
int	O
wsnode_quoteremoval	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
const	O
char	O
*	O
str	pointer
=	O
wsnode_ptr	function
(	O
wsp	pointer
,	O
p	pointer
)	O
;	O
size_t	long
slen	long
=	O
wsnode_len	function
(	O
p	pointer
)	O
;	O
int	O
unquote	int
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_QUOTE	O
)	O
unquote	int
=	O
!	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_NOEXPAND	int
)	O
;	O
else	O
unquote	int
=	O
0	int
;	O
if	O
(	O
unquote	int
)	O
{	O
if	O
(	O
!	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
)	O
{	O
char	O
*	O
newstr	pointer
=	O
malloc	function
(	O
slen	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
newstr	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
memcpy	function
(	O
newstr	pointer
,	O
str	pointer
,	O
slen	long
)	O
;	O
newstr	pointer
[	O
slen	long
]	O
=	O
0	int
;	O
p	pointer
->	O
v	union
.	O
word	pointer
=	O
newstr	pointer
;	O
p	pointer
->	O
flags	int
|=	O
_WSNF_WORD	int
;	O
}	O
wordsplit_string_unquote_copy	function
(	O
wsp	pointer
,	O
p	pointer
->	O
flags	int
&	O
_WSNF_QUOTE	int
,	O
p	pointer
->	O
v	union
.	O
word	pointer
,	O
str	pointer
,	O
slen	long
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
wsnode_coalesce	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_JOIN	int
)	O
if	O
(	O
coalesce_segment	function
(	O
wsp	pointer
,	O
p	pointer
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
wsnode_tail_coalesce	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit_node	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
next	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
np	pointer
=	O
p	pointer
;	O
while	O
(	O
np	pointer
&&	O
np	pointer
->	O
next	pointer
)	O
{	O
np	pointer
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
np	pointer
=	O
np	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
coalesce_segment	function
(	O
wsp	pointer
,	O
p	pointer
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
size_t	long
skip_delim	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
;	O
static	O
int	O
wordsplit_finish	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
size_t	long
n	long
;	O
int	O
delim	int
;	O
again	O
:	O
delim	int
=	O
0	int
;	O
n	long
=	O
0	int
;	O
p	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_DELIM	int
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_RETURN_DELIMS	int
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SQUEEZE_DELIMS	int
)	O
{	O
char	O
const	O
*	O
s	pointer
=	O
wsnode_ptr	function
(	O
wsp	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
delim	int
)	O
{	O
if	O
(	O
delim	int
==	O
*	O
s	pointer
)	O
{	O
wsnode_remove	function
(	O
wsp	pointer
,	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
continue	O
;	O
}	O
else	O
{	O
delim	int
=	O
0	int
;	O
n	long
++	O
;	O
}	O
}	O
else	O
{	O
delim	int
=	O
*	O
s	pointer
;	O
p	pointer
=	O
next	pointer
;	O
continue	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_MAXWORDS	int
)	O
{	O
wsnode_remove	function
(	O
wsp	pointer
,	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
continue	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
delim	int
)	O
{	O
n	long
++	O
;	O
delim	int
=	O
0	int
;	O
}	O
if	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_MAXWORDS	int
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_wordi	long
+	O
n	long
+	O
1	int
==	O
wsp	pointer
->	O
ws_maxwords	long
)	O
break	O
;	O
}	O
}	O
n	long
++	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_INCREMENTAL	int
)	O
p	pointer
=	O
NULL	O
;	O
else	O
p	pointer
=	O
next	pointer
;	O
}	O
if	O
(	O
p	pointer
)	O
{	O
if	O
(	O
wsnode_tail_coalesce	function
(	O
wsp	pointer
,	O
p	pointer
)	O
)	O
return	O
wsp	pointer
->	O
ws_errno	int
;	O
n	long
++	O
;	O
}	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_INCREMENTAL	int
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_endp	long
<	O
wsp	pointer
->	O
ws_len	long
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
wsp	pointer
->	O
ws_debug	pointer
(	O
_	O
(	O
"Restarting"	pointer
)	O
)	O
;	O
rc	int
=	O
wordsplit_process_list	function
(	O
wsp	pointer
,	O
skip_delim	function
(	O
wsp	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
{	O
wsp	pointer
->	O
ws_errno	int
=	O
WRDSE_EOF	O
;	O
return	O
WRDSE_EOF	O
;	O
}	O
goto	O
again	O
;	O
}	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_NOSPLIT	int
)	O
{	O
if	O
(	O
wordsplit_add_segm	function
(	O
wsp	pointer
,	O
0	int
,	O
0	int
,	O
_WSNF_EMPTYOK	int
)	O
)	O
return	O
wsp	pointer
->	O
ws_errno	int
;	O
n	long
=	O
1	int
;	O
}	O
}	O
if	O
(	O
alloc_space	function
(	O
wsp	pointer
,	O
n	long
+	O
1	int
)	O
)	O
return	O
wsp	pointer
->	O
ws_errno	int
;	O
while	O
(	O
wsp	pointer
->	O
ws_head	pointer
)	O
{	O
const	O
char	O
*	O
str	pointer
=	O
wsnode_ptr	function
(	O
wsp	pointer
,	O
wsp	pointer
->	O
ws_head	pointer
)	O
;	O
size_t	long
slen	long
=	O
wsnode_len	function
(	O
wsp	pointer
->	O
ws_head	pointer
)	O
;	O
char	O
*	O
newstr	pointer
=	O
malloc	function
(	O
slen	long
+	O
1	int
)	O
;	O
wsp	pointer
->	O
ws_wordv	pointer
[	O
wsp	pointer
->	O
ws_offs	long
+	O
wsp	pointer
->	O
ws_wordc	long
]	O
=	O
newstr	pointer
;	O
if	O
(	O
!	O
newstr	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
memcpy	function
(	O
newstr	pointer
,	O
str	pointer
,	O
slen	long
)	O
;	O
newstr	pointer
[	O
slen	long
]	O
=	O
0	int
;	O
wsnode_remove	function
(	O
wsp	pointer
,	O
wsp	pointer
->	O
ws_head	pointer
)	O
;	O
wsp	pointer
->	O
ws_wordc	long
++	O
;	O
wsp	pointer
->	O
ws_wordi	long
++	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_INCREMENTAL	int
)	O
break	O
;	O
}	O
wsp	pointer
->	O
ws_wordv	pointer
[	O
wsp	pointer
->	O
ws_offs	long
+	O
wsp	pointer
->	O
ws_wordc	long
]	O
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
int	O
wordsplit_append	function
(	O
wordsplit_t	struct
*	O
wsp	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	long
i	long
;	O
rc	int
=	O
alloc_space	function
(	O
wsp	pointer
,	O
wsp	pointer
->	O
ws_wordc	long
+	O
argc	int
+	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	int
;	O
i	long
++	O
)	O
{	O
char	O
*	O
newstr	pointer
=	O
strdup	function
(	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
!	O
newstr	pointer
)	O
{	O
while	O
(	O
i	long
>	O
0	int
)	O
{	O
free	function
(	O
wsp	pointer
->	O
ws_wordv	pointer
[	O
wsp	pointer
->	O
ws_offs	long
+	O
wsp	pointer
->	O
ws_wordc	long
+	O
i	long
-	O
1	int
]	O
)	O
;	O
wsp	pointer
->	O
ws_wordv	pointer
[	O
wsp	pointer
->	O
ws_offs	long
+	O
wsp	pointer
->	O
ws_wordc	long
+	O
i	long
-	O
1	int
]	O
=	O
NULL	O
;	O
i	long
--	O
;	O
}	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
}	O
wsp	pointer
->	O
ws_wordv	pointer
[	O
wsp	pointer
->	O
ws_offs	long
+	O
wsp	pointer
->	O
ws_wordc	long
+	O
i	long
]	O
=	O
newstr	pointer
;	O
}	O
wsp	pointer
->	O
ws_wordc	long
+=	O
i	long
;	O
wsp	pointer
->	O
ws_wordv	pointer
[	O
wsp	pointer
->	O
ws_offs	long
+	O
wsp	pointer
->	O
ws_wordc	long
]	O
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
node_split_prefix	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit_node	struct
*	O
*	O
ptail	pointer
,	O
struct	O
wordsplit_node	struct
*	O
node	pointer
,	O
size_t	long
beg	long
,	O
size_t	long
len	long
,	O
int	O
flg	int
)	O
{	O
struct	O
wordsplit_node	struct
*	O
newnode	pointer
;	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
if	O
(	O
node	pointer
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
{	O
const	O
char	O
*	O
str	pointer
=	O
wsnode_ptr	function
(	O
wsp	pointer
,	O
node	pointer
)	O
;	O
char	O
*	O
newstr	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
newstr	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
memcpy	function
(	O
newstr	pointer
,	O
str	pointer
+	O
beg	long
,	O
len	long
)	O
;	O
newstr	pointer
[	O
len	long
]	O
=	O
0	int
;	O
newnode	pointer
->	O
flags	int
=	O
_WSNF_WORD	int
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
=	O
newstr	pointer
;	O
}	O
else	O
{	O
newnode	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
=	O
node	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
+	O
beg	long
;	O
newnode	pointer
->	O
v	union
.	O
segm	struct
.	O
end	long
=	O
newnode	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
+	O
len	long
;	O
}	O
newnode	pointer
->	O
flags	int
|=	O
flg	int
;	O
*	O
ptail	pointer
=	O
newnode	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
find_closing_paren	function
(	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
i	long
,	O
size_t	long
len	long
,	O
size_t	long
*	O
poff	pointer
,	O
char	O
const	O
*	O
paren	pointer
)	O
{	O
enum	O
{	O
st_init	int
,	O
st_squote	int
,	O
st_dquote	int
}	O
state	pointer
=	O
st_init	int
;	O
size_t	long
level	long
=	O
1	int
;	O
for	O
(	O
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
{	O
switch	O
(	O
state	pointer
)	O
{	O
case	O
st_init	int
:	O
switch	O
(	O
str	pointer
[	O
i	long
]	O
)	O
{	O
default	O
:	O
if	O
(	O
str	pointer
[	O
i	long
]	O
==	O
paren	pointer
[	O
0	int
]	O
)	O
{	O
level	long
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
str	pointer
[	O
i	long
]	O
==	O
paren	pointer
[	O
1	int
]	O
)	O
{	O
if	O
(	O
--	O
level	long
==	O
0	int
)	O
{	O
*	O
poff	pointer
=	O
i	long
;	O
return	O
0	int
;	O
}	O
break	O
;	O
}	O
break	O
;	O
case	O
'"'	O
:	O
state	pointer
=	O
st_dquote	int
;	O
break	O
;	O
case	O
'\''	O
:	O
state	pointer
=	O
st_squote	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
st_squote	int
:	O
if	O
(	O
str	pointer
[	O
i	long
]	O
==	O
'\''	O
)	O
state	pointer
=	O
st_init	int
;	O
break	O
;	O
case	O
st_dquote	int
:	O
if	O
(	O
str	pointer
[	O
i	long
]	O
==	O
'\\'	O
)	O
i	long
++	O
;	O
else	O
if	O
(	O
str	pointer
[	O
i	long
]	O
==	O
'"'	O
)	O
state	pointer
=	O
st_init	int
;	O
break	O
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
char	O
const	O
*	O
wsplt_env_find	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
len	long
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
!	O
wsp	pointer
->	O
ws_env	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_ENV_KV	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
wsp	pointer
->	O
ws_env	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
size_t	long
elen	long
=	O
strlen	function
(	O
wsp	pointer
->	O
ws_env	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
elen	long
==	O
len	long
&&	O
memcmp	function
(	O
wsp	pointer
->	O
ws_env	pointer
[	O
i	long
]	O
,	O
name	pointer
,	O
elen	long
)	O
==	O
0	int
)	O
return	O
wsp	pointer
->	O
ws_env	pointer
[	O
i	long
+	O
1	int
]	O
;	O
i	long
++	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_env	pointer
[	O
i	long
]	O
==	O
NULL	O
)	O
break	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
wsp	pointer
->	O
ws_env	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
;	O
const	O
char	O
*	O
var	pointer
=	O
wsp	pointer
->	O
ws_env	pointer
[	O
i	long
]	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
len	long
;	O
j	long
++	O
)	O
if	O
(	O
name	pointer
[	O
j	long
]	O
!=	O
var	pointer
[	O
j	long
]	O
)	O
break	O
;	O
if	O
(	O
j	long
==	O
len	long
&&	O
var	pointer
[	O
j	long
]	O
==	O
'='	O
)	O
return	O
var	pointer
+	O
j	long
+	O
1	int
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
static	O
int	O
wsplt_env_lookup	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
ret	pointer
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_ENV	int
)	O
{	O
char	O
const	O
*	O
val	pointer
=	O
wsplt_env_find	function
(	O
wsp	pointer
,	O
name	pointer
,	O
len	long
)	O
;	O
if	O
(	O
val	pointer
)	O
{	O
char	O
*	O
retval	pointer
=	O
strdup	function
(	O
val	pointer
)	O
;	O
if	O
(	O
!	O
retval	pointer
)	O
return	O
WRDSE_NOSPACE	int
;	O
*	O
ret	pointer
=	O
retval	pointer
;	O
return	O
WRDSE_OK	int
;	O
}	O
}	O
return	O
WRDSE_UNDEF	int
;	O
}	O
static	O
int	O
wsplt_env_getvar	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
ret	pointer
)	O
{	O
return	O
wsp	pointer
->	O
ws_getvar	pointer
(	O
ret	pointer
,	O
name	pointer
,	O
len	long
,	O
wsp	pointer
->	O
ws_closure	pointer
)	O
;	O
}	O
static	O
int	O
wsplt_assign_var	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
namelen	long
,	O
char	O
const	O
*	O
value	pointer
)	O
{	O
int	O
n	long
=	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_ENV_KV	int
)	O
?	O
2	int
:	O
1	int
;	O
char	O
*	O
v	union
;	O
if	O
(	O
wsp	pointer
->	O
ws_envidx	long
+	O
n	long
>=	O
wsp	pointer
->	O
ws_envsiz	long
)	O
{	O
size_t	long
sz	long
;	O
char	O
*	O
*	O
newenv	pointer
;	O
if	O
(	O
!	O
wsp	pointer
->	O
ws_envbuf	pointer
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_ENV	int
)	O
{	O
size_t	long
i	long
=	O
0	int
,	O
j	long
;	O
if	O
(	O
wsp	pointer
->	O
ws_env	pointer
)	O
{	O
for	O
(	O
;	O
wsp	pointer
->	O
ws_env	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
;	O
}	O
sz	long
=	O
i	long
+	O
n	long
+	O
1	int
;	O
newenv	pointer
=	O
calloc	function
(	O
sz	long
,	O
sizeof	O
(	O
newenv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
newenv	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
i	long
;	O
j	long
++	O
)	O
{	O
newenv	pointer
[	O
j	long
]	O
=	O
strdup	function
(	O
wsp	pointer
->	O
ws_env	pointer
[	O
j	long
]	O
)	O
;	O
if	O
(	O
!	O
newenv	pointer
[	O
j	long
]	O
)	O
{	O
for	O
(	O
;	O
j	long
>	O
1	int
;	O
j	long
--	O
)	O
free	function
(	O
newenv	pointer
[	O
j	long
-	O
1	int
]	O
)	O
;	O
free	function
(	O
newenv	pointer
)	O
;	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
}	O
}	O
newenv	pointer
[	O
j	long
]	O
=	O
NULL	O
;	O
wsp	pointer
->	O
ws_envbuf	pointer
=	O
newenv	pointer
;	O
wsp	pointer
->	O
ws_envidx	long
=	O
i	long
;	O
wsp	pointer
->	O
ws_envsiz	long
=	O
sz	long
;	O
wsp	pointer
->	O
ws_env	pointer
=	O
(	O
const	O
char	O
*	O
*	O
)	O
wsp	pointer
->	O
ws_envbuf	pointer
;	O
}	O
else	O
{	O
newenv	pointer
=	O
calloc	function
(	O
WORDSPLIT_ENV_INIT	int
,	O
sizeof	O
(	O
newenv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
newenv	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
wsp	pointer
->	O
ws_envbuf	pointer
=	O
newenv	pointer
;	O
wsp	pointer
->	O
ws_envidx	long
=	O
0	int
;	O
wsp	pointer
->	O
ws_envsiz	long
=	O
WORDSPLIT_ENV_INIT	int
;	O
wsp	pointer
->	O
ws_env	pointer
=	O
(	O
const	O
char	O
*	O
*	O
)	O
wsp	pointer
->	O
ws_envbuf	pointer
;	O
wsp	pointer
->	O
ws_flags	int
|=	O
WRDSF_ENV	int
;	O
}	O
}	O
else	O
{	O
size_t	long
n	long
=	O
wsp	pointer
->	O
ws_envsiz	long
;	O
if	O
(	O
(	O
size_t	long
)	O
-	O
1	int
/	O
3	int
*	O
2	int
/	O
sizeof	O
(	O
wsp	pointer
->	O
ws_envbuf	pointer
[	O
0	int
]	O
)	O
<=	O
n	long
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
n	long
+=	O
(	O
n	long
+	O
1	int
)	O
/	O
2	int
;	O
newenv	pointer
=	O
realloc	function
(	O
wsp	pointer
->	O
ws_envbuf	pointer
,	O
n	long
*	O
sizeof	O
(	O
wsp	pointer
->	O
ws_envbuf	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
newenv	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
wsp	pointer
->	O
ws_envbuf	pointer
=	O
newenv	pointer
;	O
wsp	pointer
->	O
ws_envsiz	long
=	O
n	long
;	O
wsp	pointer
->	O
ws_env	pointer
=	O
(	O
const	O
char	O
*	O
*	O
)	O
wsp	pointer
->	O
ws_envbuf	pointer
;	O
}	O
}	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_ENV_KV	int
)	O
{	O
char	O
*	O
p	pointer
=	O
malloc	function
(	O
namelen	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
name	pointer
,	O
namelen	long
)	O
;	O
p	pointer
[	O
namelen	long
]	O
=	O
0	int
;	O
v	union
=	O
strdup	function
(	O
value	pointer
)	O
;	O
if	O
(	O
!	O
v	union
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
}	O
wsp	pointer
->	O
ws_env	pointer
[	O
wsp	pointer
->	O
ws_envidx	long
++	O
]	O
=	O
p	pointer
;	O
wsp	pointer
->	O
ws_env	pointer
[	O
wsp	pointer
->	O
ws_envidx	long
++	O
]	O
=	O
v	union
;	O
}	O
else	O
{	O
v	union
=	O
malloc	function
(	O
namelen	long
+	O
strlen	function
(	O
value	pointer
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
v	union
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
memcpy	function
(	O
v	union
,	O
name	pointer
,	O
namelen	long
)	O
;	O
v	union
[	O
namelen	long
++	O
]	O
=	O
'='	O
;	O
strcpy	function
(	O
v	union
+	O
namelen	long
,	O
value	pointer
)	O
;	O
wsp	pointer
->	O
ws_env	pointer
[	O
wsp	pointer
->	O
ws_envidx	long
++	O
]	O
=	O
v	union
;	O
}	O
wsp	pointer
->	O
ws_env	pointer
[	O
wsp	pointer
->	O
ws_envidx	long
]	O
=	O
NULL	O
;	O
return	O
WRDSE_OK	int
;	O
}	O
int	O
wsplt_assign_param	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
int	O
param_idx	int
,	O
char	O
*	O
value	pointer
)	O
{	O
char	O
*	O
v	union
;	O
if	O
(	O
param_idx	int
<	O
0	int
)	O
return	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
WRDSE_BADPARAM	int
)	O
;	O
if	O
(	O
param_idx	int
==	O
wsp	pointer
->	O
ws_paramc	long
)	O
{	O
char	O
*	O
*	O
parambuf	pointer
;	O
if	O
(	O
!	O
wsp	pointer
->	O
ws_parambuf	pointer
)	O
{	O
size_t	long
i	long
;	O
parambuf	pointer
=	O
calloc	function
(	O
(	O
size_t	long
)	O
param_idx	int
+	O
1	int
,	O
sizeof	O
(	O
parambuf	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
parambuf	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
wsp	pointer
->	O
ws_paramc	long
;	O
i	long
++	O
)	O
{	O
parambuf	pointer
[	O
i	long
]	O
=	O
strdup	function
(	O
wsp	pointer
->	O
ws_paramv	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
!	O
parambuf	pointer
[	O
i	long
]	O
)	O
{	O
for	O
(	O
;	O
i	long
>	O
1	int
;	O
i	long
--	O
)	O
free	function
(	O
parambuf	pointer
[	O
i	long
-	O
1	int
]	O
)	O
;	O
free	function
(	O
parambuf	pointer
)	O
;	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
}	O
}	O
wsp	pointer
->	O
ws_parambuf	pointer
=	O
parambuf	pointer
;	O
wsp	pointer
->	O
ws_paramidx	long
=	O
param_idx	int
;	O
wsp	pointer
->	O
ws_paramsiz	long
=	O
param_idx	int
+	O
1	int
;	O
}	O
else	O
{	O
size_t	long
n	long
=	O
wsp	pointer
->	O
ws_paramsiz	long
;	O
if	O
(	O
(	O
size_t	long
)	O
-	O
1	int
/	O
3	int
*	O
2	int
/	O
sizeof	O
(	O
wsp	pointer
->	O
ws_parambuf	pointer
[	O
0	int
]	O
)	O
<=	O
n	long
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
n	long
+=	O
(	O
n	long
+	O
1	int
)	O
/	O
2	int
;	O
parambuf	pointer
=	O
realloc	function
(	O
wsp	pointer
->	O
ws_parambuf	pointer
,	O
n	long
*	O
sizeof	O
(	O
wsp	pointer
->	O
ws_parambuf	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
parambuf	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
wsp	pointer
->	O
ws_parambuf	pointer
=	O
parambuf	pointer
;	O
wsp	pointer
->	O
ws_paramsiz	long
=	O
n	long
;	O
wsp	pointer
->	O
ws_parambuf	pointer
[	O
param_idx	int
]	O
=	O
NULL	O
;	O
}	O
wsp	pointer
->	O
ws_paramv	pointer
=	O
(	O
const	O
char	O
*	O
*	O
)	O
wsp	pointer
->	O
ws_parambuf	pointer
;	O
wsp	pointer
->	O
ws_paramc	long
=	O
param_idx	int
+	O
1	int
;	O
}	O
else	O
if	O
(	O
param_idx	int
>	O
wsp	pointer
->	O
ws_paramc	long
)	O
return	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
WRDSE_BADPARAM	int
)	O
;	O
v	union
=	O
strdup	function
(	O
value	pointer
)	O
;	O
if	O
(	O
!	O
v	union
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
free	function
(	O
wsp	pointer
->	O
ws_parambuf	pointer
[	O
param_idx	int
]	O
)	O
;	O
wsp	pointer
->	O
ws_parambuf	pointer
[	O
param_idx	int
]	O
=	O
v	union
;	O
return	O
WRDSE_OK	int
;	O
}	O
static	O
int	O
expvar_recover	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
struct	O
wordsplit_node	struct
*	O
*	O
ptail	pointer
,	O
const	O
char	O
*	O
*	O
pend	pointer
,	O
int	O
flg	int
)	O
{	O
struct	O
wordsplit_node	struct
*	O
newnode	pointer
;	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
newnode	pointer
;	O
newnode	pointer
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
flg	int
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
=	O
malloc	function
(	O
3	int
)	O
;	O
if	O
(	O
!	O
newnode	pointer
->	O
v	union
.	O
word	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
[	O
0	int
]	O
=	O
'$'	O
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
[	O
1	int
]	O
=	O
str	pointer
[	O
0	int
]	O
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
[	O
2	int
]	O
=	O
0	int
;	O
*	O
pend	pointer
=	O
str	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
expand_paramv	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit_node	struct
*	O
*	O
ptail	pointer
,	O
int	O
flg	int
,	O
int	O
q	int
)	O
{	O
struct	O
wordsplit	struct
ws	pointer
;	O
int	O
wsflags	int
=	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
|	O
WRDSF_QUOTE	O
|	O
(	O
WSP_RETURN_DELIMS	O
(	O
wsp	pointer
)	O
?	O
WRDSF_RETURN_DELIMS	int
:	O
0	int
)	O
|	O
(	O
q	int
?	O
WRDSF_NOSPLIT	int
:	O
0	int
)	O
;	O
size_t	long
i	long
;	O
struct	O
wordsplit_node	struct
*	O
tail	pointer
=	O
*	O
ptail	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
wsp	pointer
->	O
ws_paramc	long
;	O
i	long
++	O
)	O
{	O
struct	O
wordsplit_node	struct
*	O
np	pointer
;	O
int	O
rc	int
=	O
_wsplt_subsplit	function
(	O
wsp	pointer
,	O
&	O
ws	pointer
,	O
wsp	pointer
->	O
ws_paramv	pointer
[	O
i	long
]	O
,	O
strlen	function
(	O
wsp	pointer
->	O
ws_paramv	pointer
[	O
i	long
]	O
)	O
,	O
wsflags	int
,	O
q	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
_wsplt_seterr_sub	function
(	O
wsp	pointer
,	O
&	O
ws	pointer
)	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
q	int
)	O
{	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
np	pointer
)	O
)	O
return	O
1	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
np	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
np	pointer
;	O
np	pointer
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
np	pointer
->	O
v	union
.	O
word	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
;	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
=	O
NULL	O
;	O
}	O
else	O
{	O
for	O
(	O
np	pointer
=	O
ws	pointer
.	O
ws_head	pointer
;	O
np	pointer
;	O
np	pointer
=	O
np	pointer
->	O
next	pointer
)	O
np	pointer
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
ws	pointer
.	O
ws_head	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
ws	pointer
.	O
ws_tail	pointer
;	O
ws	pointer
.	O
ws_head	pointer
=	O
ws	pointer
.	O
ws_tail	pointer
=	O
NULL	O
;	O
}	O
wsflags	int
|=	O
WRDSF_REUSE	int
;	O
}	O
if	O
(	O
wsflags	int
&	O
WRDSF_REUSE	int
)	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
if	O
(	O
flg	int
&	O
_WSNF_QUOTE	int
)	O
{	O
tail	pointer
=	O
tail	pointer
->	O
next	pointer
;	O
while	O
(	O
tail	pointer
!=	O
*	O
ptail	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
next	pointer
=	O
tail	pointer
->	O
next	pointer
;	O
struct	O
wordsplit_node	struct
*	O
newnode	pointer
;	O
tail	pointer
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
newnode	pointer
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_CONST	int
|	O
_WSNF_NOEXPAND	int
|	O
_WSNF_JOIN	int
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
=	O
wsp	pointer
->	O
ws_sep	array
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
tail	pointer
,	O
0	int
)	O
;	O
tail	pointer
=	O
next	pointer
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
expvar	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
,	O
struct	O
wordsplit_node	struct
*	O
*	O
ptail	pointer
,	O
const	O
char	O
*	O
*	O
pend	pointer
,	O
int	O
flg	int
)	O
{	O
size_t	long
i	long
=	O
0	int
;	O
const	O
char	O
*	O
defstr	pointer
=	O
NULL	O
;	O
char	O
*	O
value	pointer
;	O
struct	O
wordsplit_node	struct
*	O
newnode	pointer
;	O
const	O
char	O
*	O
start	long
=	O
str	pointer
-	O
1	int
;	O
int	O
rc	int
;	O
struct	O
wordsplit	struct
ws	pointer
;	O
int	O
is_param	int
=	O
0	int
;	O
long	O
param_idx	int
=	O
0	int
;	O
if	O
(	O
ISVARBEG	O
(	O
str	pointer
[	O
0	int
]	O
)	O
)	O
{	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
if	O
(	O
!	O
ISVARCHR	O
(	O
str	pointer
[	O
i	long
]	O
)	O
)	O
break	O
;	O
*	O
pend	pointer
=	O
str	pointer
+	O
i	long
-	O
1	int
;	O
}	O
else	O
if	O
(	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
&&	O
ISDIGIT	O
(	O
str	pointer
[	O
0	int
]	O
)	O
)	O
{	O
i	long
=	O
1	int
;	O
*	O
pend	pointer
=	O
str	pointer
;	O
is_param	int
=	O
1	int
;	O
param_idx	int
=	O
to_num	O
(	O
str	pointer
[	O
0	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
&&	O
str	pointer
[	O
0	int
]	O
==	O
'#'	O
)	O
{	O
char	O
b	array
[	O
16	int
]	O
;	O
snprintf	function
(	O
b	array
,	O
sizeof	O
(	O
b	array
)	O
,	O
"%d"	pointer
,	O
(	O
int	O
)	O
wsp	pointer
->	O
ws_paramc	long
)	O
;	O
value	pointer
=	O
strdup	function
(	O
b	array
)	O
;	O
if	O
(	O
!	O
value	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
newnode	pointer
;	O
newnode	pointer
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
=	O
value	pointer
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
&&	O
str	pointer
[	O
0	int
]	O
==	O
'*'	O
)	O
{	O
return	O
expand_paramv	function
(	O
wsp	pointer
,	O
ptail	pointer
,	O
flg	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
&&	O
str	pointer
[	O
0	int
]	O
==	O
'@'	O
)	O
{	O
return	O
expand_paramv	function
(	O
wsp	pointer
,	O
ptail	pointer
,	O
flg	int
,	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
str	pointer
[	O
0	int
]	O
==	O
'{'	O
&&	O
(	O
ISVARBEG	O
(	O
str	pointer
[	O
1	int
]	O
)	O
||	O
(	O
is_param	int
=	O
(	O
(	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
&&	O
ISDIGIT	O
(	O
str	pointer
[	O
1	int
]	O
)	O
)	O
||	O
(	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_PARAM_NEGIDX	int
)	O
&&	O
(	O
str	pointer
[	O
1	int
]	O
==	O
'-'	O
&&	O
ISDIGIT	O
(	O
str	pointer
[	O
2	int
]	O
)	O
)	O
)	O
)	O
)	O
!=	O
0	int
)	O
)	O
{	O
str	pointer
++	O
;	O
len	long
--	O
;	O
for	O
(	O
i	long
=	O
str	pointer
[	O
0	int
]	O
==	O
'-'	O
?	O
1	int
:	O
0	int
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
str	pointer
[	O
i	long
]	O
==	O
':'	O
)	O
{	O
size_t	long
j	long
;	O
defstr	pointer
=	O
str	pointer
+	O
i	long
+	O
1	int
;	O
if	O
(	O
find_closing_paren	function
(	O
str	pointer
,	O
i	long
+	O
1	int
,	O
len	long
,	O
&	O
j	long
,	O
"{}"	pointer
)	O
)	O
return	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
WRDSE_CBRACE	int
)	O
;	O
*	O
pend	pointer
=	O
str	pointer
+	O
j	long
;	O
break	O
;	O
}	O
else	O
if	O
(	O
str	pointer
[	O
i	long
]	O
==	O
'}'	O
)	O
{	O
defstr	pointer
=	O
NULL	O
;	O
*	O
pend	pointer
=	O
str	pointer
+	O
i	long
;	O
break	O
;	O
}	O
else	O
if	O
(	O
strchr	function
(	O
"-+?="	pointer
,	O
str	pointer
[	O
i	long
]	O
)	O
)	O
{	O
size_t	long
j	long
;	O
defstr	pointer
=	O
str	pointer
+	O
i	long
;	O
if	O
(	O
find_closing_paren	function
(	O
str	pointer
,	O
i	long
,	O
len	long
,	O
&	O
j	long
,	O
"{}"	pointer
)	O
)	O
return	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
WRDSE_CBRACE	int
)	O
;	O
*	O
pend	pointer
=	O
str	pointer
+	O
j	long
;	O
break	O
;	O
}	O
else	O
if	O
(	O
is_param	int
)	O
{	O
if	O
(	O
ISDIGIT	O
(	O
str	pointer
[	O
i	long
]	O
)	O
)	O
{	O
param_idx	int
=	O
param_idx	int
*	O
10	int
+	O
to_num	O
(	O
str	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
(	O
str	pointer
[	O
0	int
]	O
==	O
'-'	O
&&	O
-	O
param_idx	int
<	O
INT_MIN	O
)	O
||	O
param_idx	int
>	O
INT_MAX	O
)	O
return	O
expvar_recover	function
(	O
wsp	pointer
,	O
str	pointer
-	O
1	int
,	O
ptail	pointer
,	O
pend	pointer
,	O
flg	int
)	O
;	O
}	O
else	O
{	O
return	O
expvar_recover	function
(	O
wsp	pointer
,	O
str	pointer
-	O
1	int
,	O
ptail	pointer
,	O
pend	pointer
,	O
flg	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
ISVARCHR	O
(	O
str	pointer
[	O
i	long
]	O
)	O
)	O
{	O
return	O
expvar_recover	function
(	O
wsp	pointer
,	O
str	pointer
-	O
1	int
,	O
ptail	pointer
,	O
pend	pointer
,	O
flg	int
)	O
;	O
}	O
}	O
if	O
(	O
is_param	int
&&	O
str	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
param_idx	int
=	O
wsp	pointer
->	O
ws_paramc	long
-	O
param_idx	int
;	O
if	O
(	O
i	long
==	O
len	long
)	O
return	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
WRDSE_CBRACE	int
)	O
;	O
}	O
else	O
{	O
return	O
expvar_recover	function
(	O
wsp	pointer
,	O
str	pointer
,	O
ptail	pointer
,	O
pend	pointer
,	O
flg	int
)	O
;	O
}	O
if	O
(	O
defstr	pointer
&&	O
strchr	function
(	O
"-+?="	pointer
,	O
defstr	pointer
[	O
0	int
]	O
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
WRDSE_UNDEF	int
;	O
defstr	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
is_param	int
)	O
{	O
if	O
(	O
param_idx	int
>=	O
0	int
&&	O
param_idx	int
<	O
wsp	pointer
->	O
ws_paramc	long
)	O
{	O
value	pointer
=	O
strdup	function
(	O
wsp	pointer
->	O
ws_paramv	pointer
[	O
param_idx	int
]	O
)	O
;	O
if	O
(	O
!	O
value	pointer
)	O
rc	int
=	O
WRDSE_NOSPACE	int
;	O
else	O
rc	int
=	O
WRDSE_OK	int
;	O
}	O
else	O
rc	int
=	O
WRDSE_UNDEF	int
;	O
}	O
else	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_GETVAR	int
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_GETVARPREF	int
)	O
{	O
rc	int
=	O
wsplt_env_getvar	function
(	O
wsp	pointer
,	O
str	pointer
,	O
i	long
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
WRDSE_UNDEF	int
)	O
rc	int
=	O
wsplt_env_lookup	function
(	O
wsp	pointer
,	O
str	pointer
,	O
i	long
,	O
&	O
value	pointer
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
wsplt_env_lookup	function
(	O
wsp	pointer
,	O
str	pointer
,	O
i	long
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
WRDSE_UNDEF	int
)	O
rc	int
=	O
wsplt_env_getvar	function
(	O
wsp	pointer
,	O
str	pointer
,	O
i	long
,	O
&	O
value	pointer
)	O
;	O
}	O
}	O
else	O
rc	int
=	O
wsplt_env_lookup	function
(	O
wsp	pointer
,	O
str	pointer
,	O
i	long
,	O
&	O
value	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
WRDSE_OK	int
&&	O
(	O
!	O
value	pointer
||	O
value	pointer
[	O
0	int
]	O
==	O
0	int
)	O
&&	O
defstr	pointer
&&	O
defstr	pointer
[	O
-	O
1	int
]	O
==	O
':'	O
)	O
{	O
free	function
(	O
value	pointer
)	O
;	O
rc	int
=	O
WRDSE_UNDEF	int
;	O
}	O
}	O
switch	O
(	O
rc	int
)	O
{	O
case	O
WRDSE_OK	int
:	O
if	O
(	O
defstr	pointer
&&	O
*	O
defstr	pointer
==	O
'+'	O
)	O
{	O
size_t	long
size	long
=	O
*	O
pend	pointer
-	O
++	O
defstr	pointer
;	O
rc	int
=	O
_wsplt_subsplit	function
(	O
wsp	pointer
,	O
&	O
ws	pointer
,	O
defstr	pointer
,	O
size	long
,	O
WRDSF_NOSPLIT	int
|	O
WRDSF_WS	int
|	O
WRDSF_QUOTE	O
|	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
(	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
)	O
)	O
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
free	function
(	O
value	pointer
)	O
;	O
value	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
;	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
=	O
NULL	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
break	O
;	O
case	O
WRDSE_UNDEF	int
:	O
if	O
(	O
defstr	pointer
)	O
{	O
size_t	long
size	long
;	O
if	O
(	O
*	O
defstr	pointer
==	O
'-'	O
||	O
*	O
defstr	pointer
==	O
'='	O
)	O
{	O
size	long
=	O
*	O
pend	pointer
-	O
++	O
defstr	pointer
;	O
rc	int
=	O
_wsplt_subsplit	function
(	O
wsp	pointer
,	O
&	O
ws	pointer
,	O
defstr	pointer
,	O
size	long
,	O
WRDSF_NOSPLIT	int
|	O
WRDSF_WS	int
|	O
WRDSF_QUOTE	O
|	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
(	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
)	O
)	O
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
value	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
;	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
=	O
NULL	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
if	O
(	O
defstr	pointer
[	O
-	O
1	int
]	O
==	O
'='	O
)	O
{	O
if	O
(	O
is_param	int
)	O
rc	int
=	O
wsplt_assign_param	function
(	O
wsp	pointer
,	O
param_idx	int
,	O
value	pointer
)	O
;	O
else	O
rc	int
=	O
wsplt_assign_var	function
(	O
wsp	pointer
,	O
str	pointer
,	O
i	long
,	O
value	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
value	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
*	O
defstr	pointer
==	O
'?'	O
)	O
{	O
size	long
=	O
*	O
pend	pointer
-	O
++	O
defstr	pointer
;	O
if	O
(	O
size	long
==	O
0	int
)	O
wsp	pointer
->	O
ws_error	pointer
(	O
_	O
(	O
"%.*s: variable null or not set"	pointer
)	O
,	O
(	O
int	O
)	O
i	long
,	O
str	pointer
)	O
;	O
else	O
{	O
rc	int
=	O
_wsplt_subsplit	function
(	O
wsp	pointer
,	O
&	O
ws	pointer
,	O
defstr	pointer
,	O
size	long
,	O
WRDSF_NOSPLIT	int
|	O
WRDSF_WS	int
|	O
WRDSF_QUOTE	O
|	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
(	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
)	O
)	O
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
wsp	pointer
->	O
ws_error	pointer
(	O
"%.*s: %s"	pointer
,	O
(	O
int	O
)	O
i	long
,	O
str	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
;	O
else	O
wsp	pointer
->	O
ws_error	pointer
(	O
"%.*s: %.*s"	pointer
,	O
(	O
int	O
)	O
i	long
,	O
str	pointer
,	O
(	O
int	O
)	O
size	long
,	O
defstr	pointer
)	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
}	O
value	pointer
=	O
NULL	O
;	O
}	O
}	O
else	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_UNDEF	int
)	O
{	O
_wsplt_setctxerr	function
(	O
wsp	pointer
,	O
WRDSE_UNDEF	int
,	O
str	pointer
,	O
*	O
pend	pointer
-	O
str	pointer
+	O
1	int
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_WARNUNDEF	int
)	O
wsp	pointer
->	O
ws_error	pointer
(	O
_	O
(	O
"warning: undefined variable `%.*s'"	pointer
)	O
,	O
(	O
int	O
)	O
i	long
,	O
str	pointer
)	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_KEEPUNDEF	int
)	O
value	pointer
=	O
NULL	O
;	O
else	O
{	O
value	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
if	O
(	O
!	O
value	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
WRDSE_NOSPACE	int
:	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
case	O
WRDSE_USERERR	int
:	O
if	O
(	O
wsp	pointer
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
free	function
(	O
wsp	pointer
->	O
ws_usererr	pointer
)	O
;	O
wsp	pointer
->	O
ws_usererr	pointer
=	O
value	pointer
;	O
default	O
:	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
value	pointer
)	O
{	O
if	O
(	O
flg	int
&	O
_WSNF_QUOTE	int
)	O
{	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
newnode	pointer
;	O
newnode	pointer
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
=	O
value	pointer
;	O
}	O
else	O
if	O
(	O
*	O
value	pointer
==	O
0	int
)	O
{	O
free	function
(	O
value	pointer
)	O
;	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
newnode	pointer
;	O
newnode	pointer
->	O
flags	int
=	O
_WSNF_NULL	int
;	O
}	O
else	O
{	O
struct	O
wordsplit	struct
ws	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
_wsplt_subsplit	function
(	O
wsp	pointer
,	O
&	O
ws	pointer
,	O
value	pointer
,	O
strlen	function
(	O
value	pointer
)	O
,	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
|	O
WRDSF_QUOTE	O
|	O
(	O
WSP_RETURN_DELIMS	O
(	O
wsp	pointer
)	O
?	O
WRDSF_RETURN_DELIMS	int
:	O
0	int
)	O
,	O
0	int
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
_wsplt_seterr_sub	function
(	O
wsp	pointer
,	O
&	O
ws	pointer
)	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
1	int
;	O
}	O
wsnode_insert	function
(	O
wsp	pointer
,	O
ws	pointer
.	O
ws_head	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
ws	pointer
.	O
ws_tail	pointer
;	O
ws	pointer
.	O
ws_head	pointer
=	O
ws	pointer
.	O
ws_tail	pointer
=	O
NULL	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_KEEPUNDEF	int
)	O
{	O
size_t	long
size	long
=	O
*	O
pend	pointer
-	O
start	long
+	O
1	int
;	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
newnode	pointer
;	O
newnode	pointer
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
=	O
malloc	function
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
newnode	pointer
->	O
v	union
.	O
word	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
memcpy	function
(	O
newnode	pointer
->	O
v	union
.	O
word	pointer
,	O
start	long
,	O
size	long
)	O
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
[	O
size	long
]	O
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
newnode	pointer
;	O
newnode	pointer
->	O
flags	int
=	O
_WSNF_NULL	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
begin_var_p	function
(	O
int	O
c	int
)	O
{	O
return	O
memchr	function
(	O
"{#@*"	pointer
,	O
c	int
,	O
4	int
)	O
!=	O
NULL	O
||	O
ISVARBEG	O
(	O
c	int
)	O
||	O
ISDIGIT	O
(	O
c	int
)	O
;	O
}	O
static	O
int	O
node_expand	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
struct	O
wordsplit_node	struct
*	O
node	pointer
,	O
int	O
(	O
*	O
beg_p	pointer
)	O
(	O
int	O
)	O
,	O
int	O
(	O
*	O
ws_exp_fn	pointer
)	O
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
,	O
struct	O
wordsplit_node	struct
*	O
*	O
ptail	pointer
,	O
const	O
char	O
*	O
*	O
pend	pointer
,	O
int	O
flg	int
)	O
)	O
{	O
const	O
char	O
*	O
str	pointer
=	O
wsnode_ptr	function
(	O
wsp	pointer
,	O
node	pointer
)	O
;	O
size_t	long
slen	long
=	O
wsnode_len	function
(	O
node	pointer
)	O
;	O
const	O
char	O
*	O
end	long
=	O
str	pointer
+	O
slen	long
;	O
const	O
char	O
*	O
p	pointer
;	O
size_t	long
off	long
=	O
0	int
;	O
struct	O
wordsplit_node	struct
*	O
tail	pointer
=	O
node	pointer
;	O
for	O
(	O
p	pointer
=	O
str	pointer
;	O
p	pointer
<	O
end	long
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
)	O
{	O
p	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
'$'	O
&&	O
beg_p	pointer
(	O
p	pointer
[	O
1	int
]	O
)	O
)	O
{	O
size_t	long
n	long
=	O
p	pointer
-	O
str	pointer
;	O
if	O
(	O
tail	pointer
!=	O
node	pointer
)	O
tail	pointer
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
if	O
(	O
node_split_prefix	function
(	O
wsp	pointer
,	O
&	O
tail	pointer
,	O
node	pointer
,	O
off	long
,	O
n	long
,	O
_WSNF_JOIN	int
)	O
)	O
return	O
1	int
;	O
p	pointer
++	O
;	O
if	O
(	O
ws_exp_fn	pointer
(	O
wsp	pointer
,	O
p	pointer
,	O
slen	long
-	O
n	long
,	O
&	O
tail	pointer
,	O
&	O
p	pointer
,	O
node	pointer
->	O
flags	int
&	O
(	O
_WSNF_JOIN	int
|	O
_WSNF_QUOTE	int
)	O
)	O
)	O
return	O
1	int
;	O
off	long
+=	O
p	pointer
-	O
str	pointer
+	O
1	int
;	O
str	pointer
=	O
p	pointer
+	O
1	int
;	O
}	O
}	O
if	O
(	O
p	pointer
>	O
str	pointer
)	O
{	O
if	O
(	O
tail	pointer
!=	O
node	pointer
)	O
tail	pointer
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
if	O
(	O
node_split_prefix	function
(	O
wsp	pointer
,	O
&	O
tail	pointer
,	O
node	pointer
,	O
off	long
,	O
p	pointer
-	O
str	pointer
,	O
node	pointer
->	O
flags	int
&	O
(	O
_WSNF_JOIN	int
|	O
_WSNF_QUOTE	int
)	O
)	O
)	O
return	O
1	int
;	O
}	O
if	O
(	O
tail	pointer
!=	O
node	pointer
)	O
{	O
wsnode_remove	function
(	O
wsp	pointer
,	O
node	pointer
)	O
;	O
wsnode_free	function
(	O
node	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
wsnode_nullelim	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
;	O
p	pointer
;	O
)	O
{	O
struct	O
wordsplit_node	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_DELIM	int
&&	O
p	pointer
->	O
prev	pointer
)	O
p	pointer
->	O
prev	pointer
->	O
flags	int
&=	O
~	O
_WSNF_JOIN	int
;	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_NULL	int
)	O
{	O
wsnode_remove	function
(	O
wsp	pointer
,	O
p	pointer
)	O
;	O
wsnode_free	function
(	O
p	pointer
)	O
;	O
}	O
p	pointer
=	O
next	pointer
;	O
}	O
}	O
static	O
int	O
wordsplit_varexp	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
;	O
p	pointer
;	O
)	O
{	O
struct	O
wordsplit_node	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
!	O
(	O
p	pointer
->	O
flags	int
&	O
(	O
_WSNF_NOEXPAND	int
|	O
_WSNF_DELIM	int
)	O
)	O
)	O
if	O
(	O
node_expand	function
(	O
wsp	pointer
,	O
p	pointer
,	O
begin_var_p	function
,	O
expvar	function
)	O
)	O
return	O
1	int
;	O
p	pointer
=	O
next	pointer
;	O
}	O
wsnode_nullelim	function
(	O
wsp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
begin_cmd_p	function
(	O
int	O
c	int
)	O
{	O
return	O
c	int
==	O
'('	O
;	O
}	O
static	O
int	O
expcmd	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
,	O
struct	O
wordsplit_node	struct
*	O
*	O
ptail	pointer
,	O
const	O
char	O
*	O
*	O
pend	pointer
,	O
int	O
flg	int
)	O
{	O
int	O
rc	int
;	O
size_t	long
j	long
;	O
char	O
*	O
value	pointer
;	O
struct	O
wordsplit_node	struct
*	O
newnode	pointer
;	O
struct	O
wordsplit	struct
ws	pointer
;	O
str	pointer
++	O
;	O
len	long
--	O
;	O
if	O
(	O
find_closing_paren	function
(	O
str	pointer
,	O
0	int
,	O
len	long
,	O
&	O
j	long
,	O
"()"	pointer
)	O
)	O
{	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
WRDSE_PAREN	int
)	O
;	O
return	O
1	int
;	O
}	O
*	O
pend	pointer
=	O
str	pointer
+	O
j	long
;	O
rc	int
=	O
_wsplt_subsplit	function
(	O
wsp	pointer
,	O
&	O
ws	pointer
,	O
str	pointer
,	O
j	long
,	O
WRDSF_WS	int
|	O
WRDSF_QUOTE	O
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
_wsplt_seterr_sub	function
(	O
wsp	pointer
,	O
&	O
ws	pointer
)	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
wsp	pointer
->	O
ws_command	pointer
(	O
&	O
value	pointer
,	O
str	pointer
,	O
j	long
,	O
ws	pointer
.	O
ws_wordv	pointer
,	O
wsp	pointer
->	O
ws_closure	pointer
)	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
WRDSE_NOSPACE	int
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
else	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
WRDSE_USERERR	int
)	O
{	O
if	O
(	O
wsp	pointer
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
free	function
(	O
wsp	pointer
->	O
ws_usererr	pointer
)	O
;	O
wsp	pointer
->	O
ws_usererr	pointer
=	O
value	pointer
;	O
}	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
value	pointer
)	O
{	O
if	O
(	O
flg	int
&	O
_WSNF_QUOTE	int
)	O
{	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
newnode	pointer
;	O
newnode	pointer
->	O
flags	int
=	O
_WSNF_WORD	int
|	O
_WSNF_NOEXPAND	int
|	O
flg	int
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
=	O
value	pointer
;	O
}	O
else	O
if	O
(	O
*	O
value	pointer
==	O
0	int
)	O
{	O
free	function
(	O
value	pointer
)	O
;	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
newnode	pointer
;	O
newnode	pointer
->	O
flags	int
=	O
_WSNF_NULL	int
;	O
}	O
else	O
{	O
struct	O
wordsplit	struct
ws	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
_wsplt_subsplit	function
(	O
wsp	pointer
,	O
&	O
ws	pointer
,	O
value	pointer
,	O
strlen	function
(	O
value	pointer
)	O
,	O
WRDSF_NOVAR	int
|	O
WRDSF_NOCMD	int
|	O
WRDSF_WS	int
|	O
WRDSF_QUOTE	O
|	O
(	O
WSP_RETURN_DELIMS	O
(	O
wsp	pointer
)	O
?	O
WRDSF_RETURN_DELIMS	int
:	O
0	int
)	O
,	O
0	int
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
_wsplt_seterr_sub	function
(	O
wsp	pointer
,	O
&	O
ws	pointer
)	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
1	int
;	O
}	O
wsnode_insert	function
(	O
wsp	pointer
,	O
ws	pointer
.	O
ws_head	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
ws	pointer
.	O
ws_tail	pointer
;	O
ws	pointer
.	O
ws_head	pointer
=	O
ws	pointer
.	O
ws_tail	pointer
=	O
NULL	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
*	O
ptail	pointer
,	O
0	int
)	O
;	O
*	O
ptail	pointer
=	O
newnode	pointer
;	O
newnode	pointer
->	O
flags	int
=	O
_WSNF_NULL	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
wordsplit_cmdexp	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
;	O
p	pointer
;	O
)	O
{	O
struct	O
wordsplit_node	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
!	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_NOEXPAND	int
)	O
)	O
if	O
(	O
node_expand	function
(	O
wsp	pointer
,	O
p	pointer
,	O
begin_cmd_p	function
,	O
expcmd	function
)	O
)	O
return	O
1	int
;	O
p	pointer
=	O
next	pointer
;	O
}	O
wsnode_nullelim	function
(	O
wsp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
wordsplit_trimws	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
size_t	long
n	long
;	O
if	O
(	O
!	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_QUOTE	int
)	O
)	O
{	O
for	O
(	O
n	long
=	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
;	O
n	long
<	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
end	long
&&	O
ISWS	O
(	O
wsp	pointer
->	O
ws_input	pointer
[	O
n	long
]	O
)	O
;	O
n	long
++	O
)	O
;	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
=	O
n	long
;	O
}	O
while	O
(	O
p	pointer
->	O
next	pointer
&&	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_JOIN	int
)	O
)	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_QUOTE	int
)	O
continue	O
;	O
for	O
(	O
n	long
=	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
end	long
;	O
n	long
>	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
&&	O
ISWS	O
(	O
wsp	pointer
->	O
ws_input	pointer
[	O
n	long
-	O
1	int
]	O
)	O
;	O
n	long
--	O
)	O
;	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
end	long
=	O
n	long
;	O
if	O
(	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
beg	long
==	O
p	pointer
->	O
v	union
.	O
segm	struct
.	O
end	long
)	O
p	pointer
->	O
flags	int
|=	O
_WSNF_NULL	int
;	O
}	O
wsnode_nullelim	function
(	O
wsp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
wordsplit_tildexpand	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
;	O
char	O
*	O
uname	pointer
=	O
NULL	O
;	O
size_t	long
usize	long
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
const	O
char	O
*	O
str	pointer
;	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_QUOTE	int
)	O
continue	O
;	O
str	pointer
=	O
wsnode_ptr	function
(	O
wsp	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
str	pointer
[	O
0	int
]	O
==	O
'~'	O
)	O
{	O
size_t	long
i	long
,	O
size	long
,	O
dlen	long
;	O
size_t	long
slen	long
=	O
wsnode_len	function
(	O
p	pointer
)	O
;	O
struct	O
passwd	struct
*	O
pw	pointer
;	O
char	O
*	O
newstr	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
slen	long
&&	O
str	pointer
[	O
i	long
]	O
!=	O
'/'	O
;	O
i	long
++	O
)	O
;	O
if	O
(	O
i	long
==	O
slen	long
)	O
continue	O
;	O
if	O
(	O
i	long
>	O
1	int
)	O
{	O
if	O
(	O
i	long
>	O
usize	long
)	O
{	O
char	O
*	O
p	pointer
=	O
realloc	function
(	O
uname	pointer
,	O
i	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
free	function
(	O
uname	pointer
)	O
;	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
}	O
uname	pointer
=	O
p	pointer
;	O
usize	long
=	O
i	long
;	O
}	O
--	O
i	long
;	O
memcpy	function
(	O
uname	pointer
,	O
str	pointer
+	O
1	int
,	O
i	long
)	O
;	O
uname	pointer
[	O
i	long
]	O
=	O
0	int
;	O
pw	pointer
=	O
getpwnam	function
(	O
uname	pointer
)	O
;	O
}	O
else	O
pw	pointer
=	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
if	O
(	O
!	O
pw	pointer
)	O
continue	O
;	O
dlen	long
=	O
strlen	function
(	O
pw	pointer
->	O
pw_dir	pointer
)	O
;	O
size	long
=	O
slen	long
-	O
i	long
+	O
dlen	long
;	O
newstr	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
!	O
newstr	pointer
)	O
{	O
free	function
(	O
uname	pointer
)	O
;	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
}	O
--	O
size	long
;	O
memcpy	function
(	O
newstr	pointer
,	O
pw	pointer
->	O
pw_dir	pointer
,	O
dlen	long
)	O
;	O
memcpy	function
(	O
newstr	pointer
+	O
dlen	long
,	O
str	pointer
+	O
i	long
+	O
1	int
,	O
slen	long
-	O
i	long
-	O
1	int
)	O
;	O
newstr	pointer
[	O
size	long
]	O
=	O
0	int
;	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_WORD	int
)	O
free	function
(	O
p	pointer
->	O
v	union
.	O
word	pointer
)	O
;	O
p	pointer
->	O
v	union
.	O
word	pointer
=	O
newstr	pointer
;	O
p	pointer
->	O
flags	int
|=	O
_WSNF_WORD	int
;	O
}	O
}	O
free	function
(	O
uname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
isglob	function
(	O
const	O
char	O
*	O
s	pointer
,	O
int	O
l	int
)	O
{	O
while	O
(	O
l	int
--	O
)	O
{	O
if	O
(	O
strchr	function
(	O
"*?["	pointer
,	O
*	O
s	pointer
++	O
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
wordsplit_pathexpand	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
struct	O
wordsplit_node	struct
*	O
p	pointer
,	O
*	O
next	pointer
;	O
char	O
*	O
pattern	pointer
=	O
NULL	O
;	O
size_t	long
patsize	long
=	O
0	int
;	O
size_t	long
slen	long
;	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_DOTGLOB	int
)	O
flags	int
=	O
GLOB_PERIOD	O
;	O
for	O
(	O
p	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
next	pointer
)	O
{	O
const	O
char	O
*	O
str	pointer
;	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
p	pointer
->	O
flags	int
&	O
_WSNF_QUOTE	int
)	O
continue	O
;	O
str	pointer
=	O
wsnode_ptr	function
(	O
wsp	pointer
,	O
p	pointer
)	O
;	O
slen	long
=	O
wsnode_len	function
(	O
p	pointer
)	O
;	O
if	O
(	O
isglob	function
(	O
str	pointer
,	O
slen	long
)	O
)	O
{	O
int	O
i	long
;	O
glob_t	struct
g	struct
;	O
struct	O
wordsplit_node	struct
*	O
prev	pointer
;	O
if	O
(	O
slen	long
+	O
1	int
>	O
patsize	long
)	O
{	O
char	O
*	O
p	pointer
=	O
realloc	function
(	O
pattern	pointer
,	O
slen	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
pattern	pointer
=	O
p	pointer
;	O
patsize	long
=	O
slen	long
+	O
1	int
;	O
}	O
memcpy	function
(	O
pattern	pointer
,	O
str	pointer
,	O
slen	long
)	O
;	O
pattern	pointer
[	O
slen	long
]	O
=	O
0	int
;	O
switch	O
(	O
glob	function
(	O
pattern	pointer
,	O
flags	int
,	O
NULL	O
,	O
&	O
g	struct
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
GLOB_NOSPACE	int
:	O
free	function
(	O
pattern	pointer
)	O
;	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
case	O
GLOB_NOMATCH	int
:	O
if	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_NULLGLOB	int
)	O
{	O
wsnode_remove	function
(	O
wsp	pointer
,	O
p	pointer
)	O
;	O
wsnode_free	function
(	O
p	pointer
)	O
;	O
}	O
else	O
if	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_FAILGLOB	int
)	O
{	O
char	O
buf	pointer
[	O
128	int
]	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
free	function
(	O
wsp	pointer
->	O
ws_usererr	pointer
)	O
;	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
_	O
(	O
"no files match pattern %s"	pointer
)	O
,	O
pattern	pointer
)	O
;	O
free	function
(	O
pattern	pointer
)	O
;	O
wsp	pointer
->	O
ws_usererr	pointer
=	O
strdup	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
!	O
wsp	pointer
->	O
ws_usererr	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
else	O
return	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
WRDSE_USERERR	int
)	O
;	O
}	O
continue	O
;	O
default	O
:	O
free	function
(	O
pattern	pointer
)	O
;	O
return	O
_wsplt_setctxerr	function
(	O
wsp	pointer
,	O
WRDSE_GLOBERR	int
,	O
pattern	pointer
,	O
slen	long
)	O
;	O
}	O
prev	pointer
=	O
p	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
g	struct
.	O
gl_pathc	long
;	O
i	long
++	O
)	O
{	O
struct	O
wordsplit_node	struct
*	O
newnode	pointer
;	O
char	O
*	O
newstr	pointer
;	O
if	O
(	O
wsnode_new	function
(	O
wsp	pointer
,	O
&	O
newnode	pointer
)	O
)	O
return	O
1	int
;	O
newstr	pointer
=	O
strdup	function
(	O
g	struct
.	O
gl_pathv	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
!	O
newstr	pointer
)	O
return	O
_wsplt_nomem	function
(	O
wsp	pointer
)	O
;	O
newnode	pointer
->	O
v	union
.	O
word	pointer
=	O
newstr	pointer
;	O
newnode	pointer
->	O
flags	int
|=	O
_WSNF_WORD	int
|	O
_WSNF_QUOTE	int
;	O
wsnode_insert	function
(	O
wsp	pointer
,	O
newnode	pointer
,	O
prev	pointer
,	O
0	int
)	O
;	O
prev	pointer
=	O
newnode	pointer
;	O
}	O
globfree	function
(	O
&	O
g	struct
)	O
;	O
wsnode_remove	function
(	O
wsp	pointer
,	O
p	pointer
)	O
;	O
wsnode_free	function
(	O
p	pointer
)	O
;	O
}	O
}	O
free	function
(	O
pattern	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
skip_sed_expr	function
(	O
const	O
char	O
*	O
command	pointer
,	O
size_t	long
i	long
,	O
size_t	long
len	long
)	O
{	O
int	O
state	pointer
;	O
do	O
{	O
int	O
delim	int
;	O
if	O
(	O
command	pointer
[	O
i	long
]	O
==	O
';'	O
)	O
i	long
++	O
;	O
if	O
(	O
!	O
(	O
command	pointer
[	O
i	long
]	O
==	O
's'	O
&&	O
i	long
+	O
3	int
<	O
len	long
&&	O
ISPUNCT	O
(	O
command	pointer
[	O
i	long
+	O
1	int
]	O
)	O
)	O
)	O
break	O
;	O
delim	int
=	O
command	pointer
[	O
++	O
i	long
]	O
;	O
state	pointer
=	O
1	int
;	O
for	O
(	O
i	long
++	O
;	O
i	long
<	O
len	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
state	pointer
==	O
3	int
)	O
{	O
if	O
(	O
command	pointer
[	O
i	long
]	O
==	O
delim	int
||	O
!	O
ISALNUM	O
(	O
command	pointer
[	O
i	long
]	O
)	O
)	O
break	O
;	O
}	O
else	O
if	O
(	O
command	pointer
[	O
i	long
]	O
==	O
'\\'	O
)	O
i	long
++	O
;	O
else	O
if	O
(	O
command	pointer
[	O
i	long
]	O
==	O
delim	int
)	O
state	pointer
++	O
;	O
}	O
}	O
while	O
(	O
state	pointer
==	O
3	int
&&	O
i	long
<	O
len	long
&&	O
command	pointer
[	O
i	long
]	O
==	O
';'	O
)	O
;	O
return	O
i	long
;	O
}	O
static	O
inline	O
size_t	long
skip_delim_internal	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
int	O
return_delims	int
)	O
{	O
return	O
return_delims	int
?	O
wsp	pointer
->	O
ws_endp	long
:	O
wsp	pointer
->	O
ws_endp	long
+	O
1	int
;	O
}	O
static	O
inline	O
size_t	long
skip_delim	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
return	O
skip_delim_internal	function
(	O
wsp	pointer
,	O
WSP_RETURN_DELIMS	O
(	O
wsp	pointer
)	O
)	O
;	O
}	O
static	O
inline	O
size_t	long
skip_delim_real	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
return	O
skip_delim_internal	function
(	O
wsp	pointer
,	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_RETURN_DELIMS	int
)	O
;	O
}	O
static	O
int	O
scan_qstring	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
size_t	long
start	long
,	O
size_t	long
*	O
end	long
)	O
{	O
size_t	long
j	long
;	O
const	O
char	O
*	O
command	pointer
=	O
wsp	pointer
->	O
ws_input	pointer
;	O
size_t	long
len	long
=	O
wsp	pointer
->	O
ws_len	long
;	O
char	O
q	int
=	O
command	pointer
[	O
start	long
]	O
;	O
for	O
(	O
j	long
=	O
start	long
+	O
1	int
;	O
j	long
<	O
len	long
&&	O
command	pointer
[	O
j	long
]	O
!=	O
q	int
;	O
j	long
++	O
)	O
if	O
(	O
q	int
==	O
'"'	O
&&	O
command	pointer
[	O
j	long
]	O
==	O
'\\'	O
)	O
j	long
++	O
;	O
if	O
(	O
j	long
<	O
len	long
&&	O
command	pointer
[	O
j	long
]	O
==	O
q	int
)	O
{	O
int	O
flags	int
=	O
_WSNF_QUOTE	int
|	O
_WSNF_EMPTYOK	int
;	O
if	O
(	O
q	int
==	O
'\''	O
)	O
flags	int
|=	O
_WSNF_NOEXPAND	int
;	O
if	O
(	O
wordsplit_add_segm	function
(	O
wsp	pointer
,	O
start	long
+	O
1	int
,	O
j	long
,	O
flags	int
)	O
)	O
return	O
_WRDS_ERR	int
;	O
*	O
end	long
=	O
j	long
;	O
}	O
else	O
{	O
wsp	pointer
->	O
ws_endp	long
=	O
start	long
;	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
WRDSE_QUOTE	int
)	O
;	O
return	O
_WRDS_ERR	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
scan_word	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
size_t	long
start	long
,	O
int	O
consume_all	int
)	O
{	O
size_t	long
len	long
=	O
wsp	pointer
->	O
ws_len	long
;	O
const	O
char	O
*	O
command	pointer
=	O
wsp	pointer
->	O
ws_input	pointer
;	O
const	O
char	O
*	O
comment	pointer
=	O
wsp	pointer
->	O
ws_comment	pointer
;	O
int	O
join	int
=	O
0	int
;	O
int	O
flags	int
=	O
0	int
;	O
struct	O
wordsplit_node	struct
*	O
np	pointer
=	O
wsp	pointer
->	O
ws_tail	pointer
;	O
size_t	long
i	long
=	O
start	long
;	O
if	O
(	O
i	long
>=	O
len	long
)	O
{	O
wsp	pointer
->	O
ws_errno	int
=	O
WRDSE_EOF	O
;	O
return	O
_WRDS_EOF	int
;	O
}	O
start	long
=	O
i	long
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SED_EXPR	int
&&	O
command	pointer
[	O
i	long
]	O
==	O
's'	O
&&	O
i	long
+	O
3	int
<	O
len	long
&&	O
ISPUNCT	O
(	O
command	pointer
[	O
i	long
+	O
1	int
]	O
)	O
)	O
{	O
flags	int
=	O
_WSNF_SEXP	int
;	O
i	long
=	O
skip_sed_expr	function
(	O
command	pointer
,	O
i	long
,	O
len	long
)	O
;	O
}	O
else	O
if	O
(	O
consume_all	int
||	O
!	O
ISDELIM	O
(	O
wsp	pointer
,	O
command	pointer
[	O
i	long
]	O
)	O
)	O
{	O
while	O
(	O
i	long
<	O
len	long
)	O
{	O
if	O
(	O
comment	pointer
&&	O
strchr	function
(	O
comment	pointer
,	O
command	pointer
[	O
i	long
]	O
)	O
!=	O
NULL	O
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
len	long
&&	O
command	pointer
[	O
j	long
]	O
!=	O
'\n'	O
;	O
j	long
++	O
)	O
;	O
if	O
(	O
wordsplit_add_segm	function
(	O
wsp	pointer
,	O
start	long
,	O
i	long
,	O
0	int
)	O
)	O
return	O
_WRDS_ERR	int
;	O
wsp	pointer
->	O
ws_endp	long
=	O
j	long
;	O
return	O
_WRDS_OK	int
;	O
}	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_QUOTE	O
)	O
{	O
if	O
(	O
command	pointer
[	O
i	long
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
++	O
i	long
==	O
len	long
)	O
break	O
;	O
i	long
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
(	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SQUOTE	int
)	O
&&	O
command	pointer
[	O
i	long
]	O
==	O
'\''	O
)	O
||	O
(	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_DQUOTE	int
)	O
&&	O
command	pointer
[	O
i	long
]	O
==	O
'"'	O
)	O
)	O
{	O
if	O
(	O
join	int
&&	O
wsp	pointer
->	O
ws_tail	pointer
)	O
wsp	pointer
->	O
ws_tail	pointer
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
if	O
(	O
wordsplit_add_segm	function
(	O
wsp	pointer
,	O
start	long
,	O
i	long
,	O
_WSNF_JOIN	int
)	O
)	O
return	O
_WRDS_ERR	int
;	O
if	O
(	O
scan_qstring	function
(	O
wsp	pointer
,	O
i	long
,	O
&	O
i	long
)	O
)	O
return	O
_WRDS_ERR	int
;	O
start	long
=	O
i	long
+	O
1	int
;	O
join	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
command	pointer
[	O
i	long
]	O
==	O
'$'	O
)	O
{	O
if	O
(	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_NOVAR	int
)	O
||	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_NOVARSPLIT	int
)	O
)	O
&&	O
command	pointer
[	O
i	long
+	O
1	int
]	O
==	O
'{'	O
&&	O
find_closing_paren	function
(	O
command	pointer
,	O
i	long
+	O
2	int
,	O
len	long
,	O
&	O
i	long
,	O
"{}"	pointer
)	O
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_NOCMD	int
)	O
||	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_NOCMDSPLIT	int
)	O
)	O
&&	O
command	pointer
[	O
i	long
+	O
1	int
]	O
==	O
'('	O
&&	O
find_closing_paren	function
(	O
command	pointer
,	O
i	long
+	O
2	int
,	O
len	long
,	O
&	O
i	long
,	O
"()"	pointer
)	O
==	O
0	int
)	O
continue	O
;	O
}	O
if	O
(	O
!	O
consume_all	int
&&	O
ISDELIM	O
(	O
wsp	pointer
,	O
command	pointer
[	O
i	long
]	O
)	O
)	O
break	O
;	O
else	O
i	long
++	O
;	O
}	O
}	O
else	O
if	O
(	O
WSP_RETURN_DELIMS	O
(	O
wsp	pointer
)	O
)	O
{	O
i	long
++	O
;	O
flags	int
|=	O
_WSNF_DELIM	int
;	O
}	O
else	O
if	O
(	O
!	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SQUEEZE_DELIMS	int
)	O
)	O
flags	int
|=	O
_WSNF_EMPTYOK	int
;	O
if	O
(	O
join	int
&&	O
i	long
>	O
start	long
&&	O
wsp	pointer
->	O
ws_tail	pointer
)	O
wsp	pointer
->	O
ws_tail	pointer
->	O
flags	int
|=	O
_WSNF_JOIN	int
;	O
if	O
(	O
wordsplit_add_segm	function
(	O
wsp	pointer
,	O
start	long
,	O
i	long
,	O
flags	int
)	O
)	O
return	O
_WRDS_ERR	int
;	O
wsp	pointer
->	O
ws_endp	long
=	O
i	long
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_INCREMENTAL	int
)	O
return	O
_WRDS_EOF	int
;	O
if	O
(	O
consume_all	int
)	O
{	O
if	O
(	O
!	O
np	pointer
)	O
np	pointer
=	O
wsp	pointer
->	O
ws_head	pointer
;	O
while	O
(	O
np	pointer
)	O
{	O
np	pointer
->	O
flags	int
|=	O
_WSNF_QUOTE	int
;	O
np	pointer
=	O
np	pointer
->	O
next	pointer
;	O
}	O
}	O
return	O
_WRDS_OK	int
;	O
}	O
static	O
int	O
xtonum	function
(	O
int	O
*	O
pval	pointer
,	O
const	O
char	O
*	O
src	pointer
,	O
int	O
base	int
,	O
int	O
cnt	int
)	O
{	O
int	O
i	long
,	O
val	pointer
;	O
for	O
(	O
i	long
=	O
0	int
,	O
val	pointer
=	O
0	int
;	O
i	long
<	O
cnt	int
;	O
i	long
++	O
,	O
src	pointer
++	O
)	O
{	O
int	O
n	long
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
src	pointer
;	O
if	O
(	O
n	long
>	O
127	int
||	O
(	O
n	long
=	O
to_num	O
(	O
n	long
)	O
)	O
>=	O
base	int
)	O
break	O
;	O
val	pointer
=	O
val	pointer
*	O
base	int
+	O
n	long
;	O
}	O
*	O
pval	pointer
=	O
val	pointer
;	O
return	O
i	long
;	O
}	O
size_t	long
wordsplit_c_quoted_length	function
(	O
const	O
char	O
*	O
str	pointer
,	O
int	O
quote_hex	int
,	O
int	O
*	O
quote	pointer
)	O
{	O
size_t	long
len	long
=	O
0	int
;	O
*	O
quote	pointer
=	O
0	int
;	O
for	O
(	O
;	O
*	O
str	pointer
;	O
str	pointer
++	O
)	O
{	O
if	O
(	O
strchr	function
(	O
" \""	pointer
,	O
*	O
str	pointer
)	O
)	O
*	O
quote	pointer
=	O
1	int
;	O
if	O
(	O
*	O
str	pointer
==	O
' '	O
)	O
len	long
++	O
;	O
else	O
if	O
(	O
*	O
str	pointer
==	O
'"'	O
)	O
len	long
+=	O
2	int
;	O
else	O
if	O
(	O
*	O
str	pointer
!=	O
'\t'	O
&&	O
*	O
str	pointer
!=	O
'\\'	O
&&	O
ISPRINT	O
(	O
*	O
str	pointer
)	O
)	O
len	long
++	O
;	O
else	O
if	O
(	O
quote_hex	int
)	O
len	long
+=	O
3	int
;	O
else	O
{	O
if	O
(	O
wordsplit_c_quote_char	function
(	O
*	O
str	pointer
)	O
)	O
len	long
+=	O
2	int
;	O
else	O
len	long
+=	O
4	int
;	O
}	O
}	O
return	O
len	long
;	O
}	O
static	O
int	O
wsplt_unquote_char	function
(	O
const	O
char	O
*	O
transtab	pointer
,	O
int	O
c	int
)	O
{	O
while	O
(	O
*	O
transtab	pointer
&&	O
transtab	pointer
[	O
1	int
]	O
)	O
{	O
if	O
(	O
*	O
transtab	pointer
++	O
==	O
c	int
)	O
return	O
*	O
transtab	pointer
;	O
++	O
transtab	pointer
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
wsplt_quote_char	function
(	O
const	O
char	O
*	O
transtab	pointer
,	O
int	O
c	int
)	O
{	O
for	O
(	O
;	O
*	O
transtab	pointer
&&	O
transtab	pointer
[	O
1	int
]	O
;	O
transtab	pointer
+=	O
2	int
)	O
{	O
if	O
(	O
transtab	pointer
[	O
1	int
]	O
==	O
c	int
)	O
return	O
*	O
transtab	pointer
;	O
}	O
return	O
0	int
;	O
}	O
int	O
wordsplit_c_unquote_char	function
(	O
int	O
c	int
)	O
{	O
return	O
wsplt_unquote_char	function
(	O
wordsplit_c_escape_tab	array
,	O
c	int
)	O
;	O
}	O
int	O
wordsplit_c_quote_char	function
(	O
int	O
c	int
)	O
{	O
return	O
wsplt_quote_char	function
(	O
wordsplit_c_escape_tab	array
,	O
c	int
)	O
;	O
}	O
void	O
wordsplit_string_unquote_copy	function
(	O
struct	O
wordsplit	struct
*	O
ws	pointer
,	O
int	O
inquote	int
,	O
char	O
*	O
dst	pointer
,	O
const	O
char	O
*	O
src	pointer
,	O
size_t	long
n	long
)	O
{	O
int	O
i	long
=	O
0	int
;	O
int	O
c	int
;	O
inquote	int
=	O
!	O
!	O
inquote	int
;	O
while	O
(	O
i	long
<	O
n	long
)	O
{	O
if	O
(	O
src	pointer
[	O
i	long
]	O
==	O
'\\'	O
)	O
{	O
++	O
i	long
;	O
if	O
(	O
WRDSO_ESC_TEST	O
(	O
ws	pointer
,	O
inquote	int
,	O
WRDSO_XESC	O
)	O
&&	O
(	O
src	pointer
[	O
i	long
]	O
==	O
'x'	O
||	O
src	pointer
[	O
i	long
]	O
==	O
'X'	O
)	O
)	O
{	O
if	O
(	O
n	long
-	O
i	long
<	O
2	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	long
++	O
]	O
;	O
}	O
else	O
{	O
int	O
off	long
=	O
xtonum	function
(	O
&	O
c	int
,	O
src	pointer
+	O
i	long
+	O
1	int
,	O
16	int
,	O
2	int
)	O
;	O
if	O
(	O
off	long
==	O
0	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	long
++	O
]	O
;	O
}	O
else	O
{	O
*	O
dst	pointer
++	O
=	O
c	int
;	O
i	long
+=	O
off	long
+	O
1	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
WRDSO_ESC_TEST	O
(	O
ws	pointer
,	O
inquote	int
,	O
WRDSO_OESC	O
)	O
&&	O
(	O
unsigned	O
char	O
)	O
src	pointer
[	O
i	long
]	O
<	O
128	int
&&	O
ISDIGIT	O
(	O
src	pointer
[	O
i	long
]	O
)	O
)	O
{	O
if	O
(	O
n	long
-	O
i	long
<	O
1	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	long
++	O
]	O
;	O
}	O
else	O
{	O
int	O
off	long
=	O
xtonum	function
(	O
&	O
c	int
,	O
src	pointer
+	O
i	long
,	O
8	int
,	O
3	int
)	O
;	O
if	O
(	O
off	long
==	O
0	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	long
++	O
]	O
;	O
}	O
else	O
{	O
*	O
dst	pointer
++	O
=	O
c	int
;	O
i	long
+=	O
off	long
;	O
}	O
}	O
}	O
else	O
if	O
(	O
(	O
c	int
=	O
wsplt_unquote_char	function
(	O
ws	pointer
->	O
ws_escape	array
[	O
inquote	int
]	O
,	O
src	pointer
[	O
i	long
]	O
)	O
)	O
)	O
{	O
*	O
dst	pointer
++	O
=	O
c	int
;	O
++	O
i	long
;	O
}	O
else	O
{	O
if	O
(	O
WRDSO_ESC_TEST	O
(	O
ws	pointer
,	O
inquote	int
,	O
WRDSO_BSKEEP	O
)	O
)	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	long
++	O
]	O
;	O
}	O
}	O
else	O
*	O
dst	pointer
++	O
=	O
src	pointer
[	O
i	long
++	O
]	O
;	O
}	O
*	O
dst	pointer
=	O
0	int
;	O
}	O
void	O
wordsplit_c_quote_copy	function
(	O
char	O
*	O
dst	pointer
,	O
const	O
char	O
*	O
src	pointer
,	O
int	O
quote_hex	int
)	O
{	O
for	O
(	O
;	O
*	O
src	pointer
;	O
src	pointer
++	O
)	O
{	O
if	O
(	O
*	O
src	pointer
==	O
'"'	O
)	O
{	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
;	O
}	O
else	O
if	O
(	O
*	O
src	pointer
!=	O
'\t'	O
&&	O
*	O
src	pointer
!=	O
'\\'	O
&&	O
ISPRINT	O
(	O
*	O
src	pointer
)	O
)	O
*	O
dst	pointer
++	O
=	O
*	O
src	pointer
;	O
else	O
{	O
char	O
tmp	array
[	O
4	int
]	O
;	O
if	O
(	O
quote_hex	int
)	O
{	O
snprintf	function
(	O
tmp	array
,	O
sizeof	O
tmp	array
,	O
"%%%02X"	pointer
,	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
src	pointer
)	O
;	O
memcpy	function
(	O
dst	pointer
,	O
tmp	array
,	O
3	int
)	O
;	O
dst	pointer
+=	O
3	int
;	O
}	O
else	O
{	O
int	O
c	int
=	O
wordsplit_c_quote_char	function
(	O
*	O
src	pointer
)	O
;	O
*	O
dst	pointer
++	O
=	O
'\\'	O
;	O
if	O
(	O
c	int
)	O
*	O
dst	pointer
++	O
=	O
c	int
;	O
else	O
{	O
snprintf	function
(	O
tmp	array
,	O
sizeof	O
tmp	array
,	O
"%03o"	pointer
,	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
src	pointer
)	O
;	O
memcpy	function
(	O
dst	pointer
,	O
tmp	array
,	O
3	int
)	O
;	O
dst	pointer
+=	O
3	int
;	O
}	O
}	O
}	O
}	O
}	O
struct	O
exptab	struct
{	O
char	O
const	O
*	O
descr	pointer
;	O
int	O
flag	int
;	O
int	O
opt	int
;	O
int	O
(	O
*	O
expansion	pointer
)	O
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
;	O
}	O
;	O
static	O
struct	O
exptab	struct
exptab	struct
[	O
]	O
=	O
{	O
{	O
N_	O
(	O
"WS trimming"	pointer
)	O
,	O
WRDSF_WS	int
,	O
0	int
,	O
wordsplit_trimws	function
}	O
,	O
{	O
N_	O
(	O
"command substitution"	pointer
)	O
,	O
WRDSF_NOCMD	int
,	O
EXPOPT_NEG	int
|	O
EXPOPT_COALESCE	int
,	O
wordsplit_cmdexp	function
}	O
,	O
{	O
N_	O
(	O
"coalesce list"	pointer
)	O
,	O
0	int
,	O
EXPOPT_NEG	int
|	O
EXPOPT_COALESCE	int
,	O
NULL	O
}	O
,	O
{	O
N_	O
(	O
"tilde expansion"	pointer
)	O
,	O
WRDSF_PATHEXPAND	int
,	O
0	int
,	O
wordsplit_tildexpand	function
}	O
,	O
{	O
N_	O
(	O
"variable expansion"	pointer
)	O
,	O
WRDSF_NOVAR	int
,	O
EXPOPT_NEG	int
,	O
wordsplit_varexp	function
}	O
,	O
{	O
N_	O
(	O
"quote removal"	pointer
)	O
,	O
0	int
,	O
EXPOPT_NEG	int
,	O
wsnode_quoteremoval	function
}	O
,	O
{	O
N_	O
(	O
"coalesce list"	pointer
)	O
,	O
0	int
,	O
EXPOPT_NEG	int
|	O
EXPOPT_COALESCE	int
,	O
NULL	O
}	O
,	O
{	O
N_	O
(	O
"path expansion"	pointer
)	O
,	O
WRDSF_PATHEXPAND	int
,	O
0	int
,	O
wordsplit_pathexpand	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
inline	O
int	O
exptab_matches	function
(	O
struct	O
exptab	struct
*	O
p	pointer
,	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
int	O
result	int
;	O
result	int
=	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
p	pointer
->	O
flag	int
)	O
;	O
if	O
(	O
p	pointer
->	O
opt	int
&	O
EXPORT_ALLOF	int
)	O
result	int
=	O
result	int
==	O
p	pointer
->	O
flag	int
;	O
if	O
(	O
p	pointer
->	O
opt	int
&	O
EXPOPT_NEG	int
)	O
result	int
=	O
!	O
result	int
;	O
return	O
result	int
;	O
}	O
static	O
int	O
wordsplit_process_list	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
size_t	long
start	long
)	O
{	O
struct	O
exptab	struct
*	O
p	pointer
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
wsp	pointer
->	O
ws_debug	pointer
(	O
_	O
(	O
"(%02d) Input:%.*s;"	pointer
)	O
,	O
wsp	pointer
->	O
ws_lvl	int
,	O
(	O
int	O
)	O
wsp	pointer
->	O
ws_len	long
,	O
wsp	pointer
->	O
ws_input	pointer
)	O
;	O
if	O
(	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_NOSPLIT	int
)	O
||	O
(	O
(	O
wsp	pointer
->	O
ws_options	int
&	O
WRDSO_MAXWORDS	int
)	O
&&	O
wsp	pointer
->	O
ws_wordi	long
+	O
1	int
==	O
wsp	pointer
->	O
ws_maxwords	long
)	O
)	O
{	O
if	O
(	O
scan_word	function
(	O
wsp	pointer
,	O
start	long
,	O
1	int
)	O
==	O
_WRDS_ERR	int
)	O
return	O
wsp	pointer
->	O
ws_errno	int
;	O
}	O
else	O
{	O
int	O
rc	int
;	O
while	O
(	O
(	O
rc	int
=	O
scan_word	function
(	O
wsp	pointer
,	O
start	long
,	O
0	int
)	O
)	O
==	O
_WRDS_OK	int
)	O
start	long
=	O
skip_delim	function
(	O
wsp	pointer
)	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_tail	pointer
)	O
wsp	pointer
->	O
ws_tail	pointer
->	O
flags	int
&=	O
~	O
_WSNF_JOIN	int
;	O
if	O
(	O
rc	int
==	O
_WRDS_ERR	int
)	O
return	O
wsp	pointer
->	O
ws_errno	int
;	O
}	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
{	O
wsp	pointer
->	O
ws_debug	pointer
(	O
"(%02d) %s"	pointer
,	O
wsp	pointer
->	O
ws_lvl	int
,	O
_	O
(	O
"Initial list:"	pointer
)	O
)	O
;	O
wordsplit_dump_nodes	function
(	O
wsp	pointer
)	O
;	O
}	O
for	O
(	O
p	pointer
=	O
exptab	struct
;	O
p	pointer
->	O
descr	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
exptab_matches	function
(	O
p	pointer
,	O
wsp	pointer
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
opt	int
&	O
EXPOPT_COALESCE	int
)	O
{	O
if	O
(	O
wsnode_coalesce	function
(	O
wsp	pointer
)	O
)	O
break	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
{	O
wsp	pointer
->	O
ws_debug	pointer
(	O
"(%02d) %s"	pointer
,	O
wsp	pointer
->	O
ws_lvl	int
,	O
_	O
(	O
"Coalesced list:"	pointer
)	O
)	O
;	O
wordsplit_dump_nodes	function
(	O
wsp	pointer
)	O
;	O
}	O
}	O
if	O
(	O
p	pointer
->	O
expansion	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
expansion	pointer
(	O
wsp	pointer
)	O
)	O
break	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_flags	int
&	O
WRDSF_SHOWDBG	int
)	O
{	O
wsp	pointer
->	O
ws_debug	pointer
(	O
"(%02d) %s"	pointer
,	O
wsp	pointer
->	O
ws_lvl	int
,	O
_	O
(	O
p	pointer
->	O
descr	pointer
)	O
)	O
;	O
wordsplit_dump_nodes	function
(	O
wsp	pointer
)	O
;	O
}	O
}	O
}	O
}	O
return	O
wsp	pointer
->	O
ws_errno	int
;	O
}	O
static	O
int	O
wordsplit_run	function
(	O
const	O
char	O
*	O
command	pointer
,	O
size_t	long
length	long
,	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
int	O
flags	int
,	O
int	O
lvl	int
)	O
{	O
int	O
rc	int
;	O
size_t	long
start	long
;	O
wsp	pointer
->	O
ws_errctx	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
command	pointer
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
WRDSF_INCREMENTAL	int
)	O
)	O
return	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
WRDSE_USAGE	int
)	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_head	pointer
)	O
return	O
wordsplit_finish	function
(	O
wsp	pointer
)	O
;	O
start	long
=	O
skip_delim_real	function
(	O
wsp	pointer
)	O
;	O
if	O
(	O
wsp	pointer
->	O
ws_endp	long
==	O
wsp	pointer
->	O
ws_len	long
)	O
return	O
_wsplt_seterr	function
(	O
wsp	pointer
,	O
WRDSE_NOINPUT	int
)	O
;	O
wsp	pointer
->	O
ws_flags	int
|=	O
WRDSF_REUSE	int
;	O
wordsplit_init0	function
(	O
wsp	pointer
)	O
;	O
}	O
else	O
{	O
start	long
=	O
0	int
;	O
rc	int
=	O
wordsplit_init	function
(	O
wsp	pointer
,	O
command	pointer
,	O
length	long
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
wsp	pointer
->	O
ws_lvl	int
=	O
lvl	int
;	O
}	O
rc	int
=	O
wordsplit_process_list	function
(	O
wsp	pointer
,	O
start	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
wordsplit_finish	function
(	O
wsp	pointer
)	O
;	O
}	O
int	O
wordsplit_len	function
(	O
const	O
char	O
*	O
command	pointer
,	O
size_t	long
length	long
,	O
struct	O
wordsplit	struct
*	O
wsp	pointer
,	O
int	O
flags	int
)	O
{	O
return	O
wordsplit_run	function
(	O
command	pointer
,	O
length	long
,	O
wsp	pointer
,	O
flags	int
,	O
0	int
)	O
;	O
}	O
int	O
wordsplit	struct
(	O
const	O
char	O
*	O
command	pointer
,	O
struct	O
wordsplit	struct
*	O
ws	pointer
,	O
int	O
flags	int
)	O
{	O
return	O
wordsplit_len	function
(	O
command	pointer
,	O
command	pointer
?	O
strlen	function
(	O
command	pointer
)	O
:	O
0	int
,	O
ws	pointer
,	O
flags	int
)	O
;	O
}	O
void	O
wordsplit_free_words	function
(	O
struct	O
wordsplit	struct
*	O
ws	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	pointer
->	O
ws_wordc	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
p	pointer
=	O
ws	pointer
->	O
ws_wordv	pointer
[	O
ws	pointer
->	O
ws_offs	long
+	O
i	long
]	O
;	O
if	O
(	O
p	pointer
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
ws	pointer
->	O
ws_wordv	pointer
[	O
ws	pointer
->	O
ws_offs	long
+	O
i	long
]	O
=	O
NULL	O
;	O
}	O
}	O
ws	pointer
->	O
ws_wordc	long
=	O
0	int
;	O
}	O
void	O
wordsplit_free_envbuf	function
(	O
struct	O
wordsplit	struct
*	O
ws	pointer
)	O
{	O
if	O
(	O
!	O
(	O
ws	pointer
->	O
ws_flags	int
&	O
WRDSF_ENV	int
)	O
)	O
return	O
;	O
if	O
(	O
ws	pointer
->	O
ws_envbuf	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
ws	pointer
->	O
ws_envbuf	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
free	function
(	O
ws	pointer
->	O
ws_envbuf	pointer
[	O
i	long
]	O
)	O
;	O
free	function
(	O
ws	pointer
->	O
ws_envbuf	pointer
)	O
;	O
ws	pointer
->	O
ws_envidx	long
=	O
ws	pointer
->	O
ws_envsiz	long
=	O
0	int
;	O
ws	pointer
->	O
ws_envbuf	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
wordsplit_free_parambuf	function
(	O
struct	O
wordsplit	struct
*	O
ws	pointer
)	O
{	O
if	O
(	O
!	O
(	O
ws	pointer
->	O
ws_options	int
&	O
WRDSO_PARAMV	int
)	O
)	O
return	O
;	O
if	O
(	O
ws	pointer
->	O
ws_parambuf	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
ws	pointer
->	O
ws_parambuf	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
free	function
(	O
ws	pointer
->	O
ws_parambuf	pointer
[	O
i	long
]	O
)	O
;	O
free	function
(	O
ws	pointer
->	O
ws_parambuf	pointer
)	O
;	O
ws	pointer
->	O
ws_paramidx	long
=	O
ws	pointer
->	O
ws_paramsiz	long
=	O
0	int
;	O
ws	pointer
->	O
ws_parambuf	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
wordsplit_clearerr	function
(	O
struct	O
wordsplit	struct
*	O
ws	pointer
)	O
{	O
if	O
(	O
ws	pointer
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
free	function
(	O
ws	pointer
->	O
ws_usererr	pointer
)	O
;	O
ws	pointer
->	O
ws_usererr	pointer
=	O
NULL	O
;	O
free	function
(	O
ws	pointer
->	O
ws_errctx	pointer
)	O
;	O
ws	pointer
->	O
ws_errctx	pointer
=	O
NULL	O
;	O
ws	pointer
->	O
ws_errno	int
=	O
WRDSE_OK	int
;	O
}	O
void	O
wordsplit_free	function
(	O
struct	O
wordsplit	struct
*	O
ws	pointer
)	O
{	O
if	O
(	O
ws	pointer
->	O
ws_errno	int
==	O
WRDSE_USAGE	int
)	O
return	O
;	O
wordsplit_clearerr	function
(	O
ws	pointer
)	O
;	O
wordsplit_free_nodes	function
(	O
ws	pointer
)	O
;	O
wordsplit_free_words	function
(	O
ws	pointer
)	O
;	O
free	function
(	O
ws	pointer
->	O
ws_wordv	pointer
)	O
;	O
ws	pointer
->	O
ws_wordv	pointer
=	O
NULL	O
;	O
wordsplit_free_envbuf	function
(	O
ws	pointer
)	O
;	O
wordsplit_free_parambuf	function
(	O
ws	pointer
)	O
;	O
}	O
int	O
wordsplit_get_words	function
(	O
struct	O
wordsplit	struct
*	O
ws	pointer
,	O
size_t	long
*	O
wordc	pointer
,	O
char	O
*	O
*	O
*	O
wordv	pointer
)	O
{	O
char	O
*	O
*	O
p	pointer
=	O
realloc	function
(	O
ws	pointer
->	O
ws_wordv	pointer
,	O
(	O
ws	pointer
->	O
ws_wordc	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
ws	pointer
->	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
-	O
1	int
;	O
*	O
wordv	pointer
=	O
p	pointer
;	O
*	O
wordc	pointer
=	O
ws	pointer
->	O
ws_wordc	long
;	O
ws	pointer
->	O
ws_wordv	pointer
=	O
NULL	O
;	O
ws	pointer
->	O
ws_wordc	long
=	O
0	int
;	O
ws	pointer
->	O
ws_wordn	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
_wordsplit_errstr	array
[	O
]	O
=	O
{	O
N_	O
(	O
"no error"	pointer
)	O
,	O
N_	O
(	O
"missing closing quote"	pointer
)	O
,	O
N_	O
(	O
"memory exhausted"	pointer
)	O
,	O
N_	O
(	O
"invalid wordsplit usage"	pointer
)	O
,	O
N_	O
(	O
"unbalanced curly brace"	pointer
)	O
,	O
N_	O
(	O
"undefined variable"	pointer
)	O
,	O
N_	O
(	O
"input exhausted"	pointer
)	O
,	O
N_	O
(	O
"unbalanced parenthesis"	pointer
)	O
,	O
N_	O
(	O
"globbing error"	pointer
)	O
,	O
N_	O
(	O
"user-defined error"	pointer
)	O
,	O
N_	O
(	O
"invalid parameter number in assignment"	pointer
)	O
}	O
;	O
int	O
_wordsplit_nerrs	int
=	O
sizeof	O
(	O
_wordsplit_errstr	array
)	O
/	O
sizeof	O
(	O
_wordsplit_errstr	array
[	O
0	int
]	O
)	O
;	O
const	O
char	O
*	O
wordsplit_strerror	function
(	O
struct	O
wordsplit	struct
*	O
ws	pointer
)	O
{	O
if	O
(	O
ws	pointer
->	O
ws_errno	int
==	O
WRDSE_USERERR	int
)	O
return	O
ws	pointer
->	O
ws_usererr	pointer
;	O
if	O
(	O
ws	pointer
->	O
ws_errno	int
<	O
_wordsplit_nerrs	int
)	O
return	O
_wordsplit_errstr	array
[	O
ws	pointer
->	O
ws_errno	int
]	O
;	O
return	O
N_	O
(	O
"unknown error"	pointer
)	O
;	O
}	O
void	O
wordsplit_perror	function
(	O
struct	O
wordsplit	struct
*	O
wsp	pointer
)	O
{	O
switch	O
(	O
wsp	pointer
->	O
ws_errno	int
)	O
{	O
case	O
WRDSE_QUOTE	int
:	O
wsp	pointer
->	O
ws_error	pointer
(	O
_	O
(	O
"missing closing %c (start near #%lu)"	pointer
)	O
,	O
wsp	pointer
->	O
ws_input	pointer
[	O
wsp	pointer
->	O
ws_endp	long
]	O
,	O
(	O
unsigned	O
long	O
)	O
wsp	pointer
->	O
ws_endp	long
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
wsp	pointer
->	O
ws_errctx	pointer
)	O
wsp	pointer
->	O
ws_error	pointer
(	O
"%s: %s"	pointer
,	O
wordsplit_strerror	function
(	O
wsp	pointer
)	O
,	O
wsp	pointer
->	O
ws_errctx	pointer
)	O
;	O
else	O
wsp	pointer
->	O
ws_error	pointer
(	O
"%s"	pointer
,	O
wordsplit_strerror	function
(	O
wsp	pointer
)	O
)	O
;	O
}	O
}	O
