struct	O
top	struct
*	O
top	struct
;	O
static	O
struct	O
fro	struct
*	O
workptr	pointer
;	O
static	O
int	O
exitstatus	int
;	O
static	O
void	O
cleanup	function
(	O
void	O
)	O
{	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exitstatus	int
=	O
EXIT_FAILURE	int
;	O
fro_zclose	function
(	O
&	O
FLOW	O
(	O
from	pointer
)	O
)	O
;	O
fro_zclose	function
(	O
&	O
workptr	pointer
)	O
;	O
Ozclose	function
(	O
&	O
FLOW	O
(	O
res	pointer
)	O
)	O
;	O
ORCSclose	function
(	O
)	O
;	O
dirtempunlink	function
(	O
)	O
;	O
}	O
static	O
exiting	O
void	O
exiterr	pointer
(	O
void	O
)	O
{	O
ORCSerror	function
(	O
)	O
;	O
dirtempunlink	function
(	O
)	O
;	O
tempunlink	function
(	O
)	O
;	O
exit_failurefully	function
(	O
)	O
;	O
}	O
static	O
bool	bool
unlock	function
(	O
struct	O
delta	struct
*	O
delta	struct
)	O
{	O
struct	O
link	struct
box	pointer
,	O
*	O
tp	pointer
;	O
if	O
(	O
delta	struct
&&	O
delta	struct
->	O
lockedby	pointer
&&	O
caller_login_p	function
(	O
delta	struct
->	O
lockedby	pointer
)	O
&&	O
(	O
box	pointer
.	O
next	pointer
=	O
GROK	O
(	O
locks	pointer
)	O
)	O
&&	O
(	O
tp	pointer
=	O
lock_delta_memq	O
(	O
&	O
box	pointer
,	O
delta	struct
)	O
)	O
)	O
{	O
lock_drop	function
(	O
&	O
box	pointer
,	O
tp	pointer
)	O
;	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
int	O
get_directory	function
(	O
char	O
const	O
*	O
dirname	pointer
,	O
char	O
*	O
*	O
*	O
aargv	pointer
)	O
{	O
DIR	struct
*	O
d	pointer
;	O
struct	O
dirent	struct
*	O
e	pointer
;	O
struct	O
divvy	struct
*	O
justme	pointer
=	O
make_space	function
(	O
"justme"	pointer
)	O
;	O
size_t	long
i	int
,	O
entries	long
=	O
0	int
;	O
struct	O
wlink	struct
head	pointer
,	O
*	O
tp	pointer
;	O
if	O
(	O
!	O
(	O
d	pointer
=	O
opendir	function
(	O
dirname	pointer
)	O
)	O
)	O
fatal_sys	function
(	O
dirname	pointer
)	O
;	O
head	pointer
.	O
next	pointer
=	O
NULL	O
;	O
tp	pointer
=	O
&	O
head	pointer
;	O
while	O
(	O
(	O
errno	O
=	O
0	int
,	O
e	pointer
=	O
readdir	function
(	O
d	pointer
)	O
)	O
)	O
{	O
char	O
const	O
*	O
en	pointer
=	O
e	pointer
->	O
d_name	array
;	O
if	O
(	O
en	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
(	O
!	O
en	pointer
[	O
1	int
]	O
||	O
(	O
en	pointer
[	O
1	int
]	O
==	O
'.'	O
&&	O
!	O
en	pointer
[	O
2	int
]	O
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
rcssuffix	function
(	O
en	pointer
)	O
)	O
continue	O
;	O
tp	pointer
=	O
wextend	function
(	O
tp	pointer
,	O
str_save	function
(	O
en	pointer
)	O
,	O
justme	pointer
)	O
;	O
entries	long
++	O
;	O
}	O
if	O
(	O
errno	O
||	O
PROB	O
(	O
closedir	function
(	O
d	pointer
)	O
)	O
)	O
fatal_sys	function
(	O
dirname	pointer
)	O
;	O
*	O
aargv	pointer
=	O
pointer_array	function
(	O
PLEXUS	O
,	O
entries	long
)	O
;	O
for	O
(	O
tp	pointer
=	O
head	pointer
.	O
next	pointer
,	O
i	int
=	O
0	int
;	O
i	int
<	O
entries	long
;	O
tp	pointer
=	O
tp	pointer
->	O
next	pointer
,	O
i	int
++	O
)	O
(	O
*	O
aargv	pointer
)	O
[	O
i	int
]	O
=	O
tp	pointer
->	O
entry	pointer
;	O
close_space	function
(	O
justme	pointer
)	O
;	O
return	O
entries	long
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
a	pointer
,	O
*	O
*	O
newargv	pointer
;	O
char	O
const	O
*	O
rev	pointer
,	O
*	O
p	pointer
;	O
bool	bool
dounlock	bool
,	O
perform	bool
,	O
unlocked	bool
,	O
unlockflag	bool
,	O
waslocked	bool
,	O
Ttimeflag	bool
;	O
int	O
expmode	int
;	O
struct	O
wlink	struct
*	O
deltas	pointer
;	O
struct	O
delta	struct
*	O
delta	struct
;	O
struct	O
stat	struct
workstat	struct
;	O
const	O
struct	O
program	struct
program	struct
=	O
{	O
.	O
invoke	pointer
=	O
argv	pointer
[	O
0	int
]	O
,	O
.	O
name	pointer
=	O
"rcsclean"	pointer
,	O
.	O
help	pointer
=	O
help	pointer
,	O
.	O
exiterr	pointer
=	O
exiterr	pointer
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	function
(	O
&	O
program	struct
)	O
;	O
setrid	function
(	O
)	O
;	O
expmode	int
=	O
-	O
1	int
;	O
rev	pointer
=	O
NULL	O
;	O
BE	O
(	O
pe	pointer
)	O
=	O
X_DEFAULT	pointer
;	O
perform	bool
=	O
true	int
;	O
unlockflag	bool
=	O
false	int
;	O
Ttimeflag	bool
=	O
false	int
;	O
argc	int
=	O
getRCSINIT	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
newargv	pointer
)	O
;	O
argv	pointer
=	O
newargv	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
--	O
argc	int
<	O
1	int
)	O
{	O
argc	int
=	O
get_directory	function
(	O
"."	pointer
,	O
&	O
newargv	pointer
)	O
;	O
argv	pointer
=	O
newargv	pointer
;	O
break	O
;	O
}	O
a	pointer
=	O
*	O
++	O
argv	pointer
;	O
if	O
(	O
!	O
*	O
a	pointer
||	O
*	O
a	pointer
++	O
!=	O
'-'	O
)	O
break	O
;	O
switch	O
(	O
*	O
a	pointer
++	O
)	O
{	O
case	O
'k'	O
:	O
if	O
(	O
0	int
<=	O
expmode	int
)	O
redefined	function
(	O
'k'	O
)	O
;	O
if	O
(	O
PROB	O
(	O
expmode	int
=	O
str2expmode	function
(	O
a	pointer
)	O
)	O
)	O
goto	O
unknown	O
;	O
break	O
;	O
case	O
'n'	O
:	O
perform	bool
=	O
false	int
;	O
goto	O
handle_revision	O
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
case	O
'r'	O
:	O
handle_revision	O
:	O
if	O
(	O
*	O
a	pointer
)	O
{	O
if	O
(	O
rev	pointer
)	O
PWARN	O
(	O
"redefinition of %s"	pointer
,	O
ks_revno	array
)	O
;	O
rev	pointer
=	O
a	pointer
;	O
}	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
*	O
a	pointer
)	O
goto	O
unknown	O
;	O
Ttimeflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'u'	O
:	O
unlockflag	bool
=	O
true	int
;	O
goto	O
handle_revision	O
;	O
case	O
'V'	O
:	O
setRCSversion	function
(	O
*	O
argv	pointer
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
BE	O
(	O
pe	pointer
)	O
=	O
a	pointer
;	O
break	O
;	O
case	O
'z'	O
:	O
zone_set	function
(	O
a	pointer
)	O
;	O
break	O
;	O
default	O
:	O
unknown	O
:	O
bad_option	function
(	O
*	O
argv	pointer
)	O
;	O
}	O
}	O
dounlock	bool
=	O
perform	bool
&	O
unlockflag	bool
;	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
cleanup	function
(	O
)	O
;	O
else	O
for	O
(	O
;	O
0	int
<	O
argc	int
;	O
cleanup	function
(	O
)	O
,	O
++	O
argv	pointer
,	O
--	O
argc	int
)	O
{	O
struct	O
stat	struct
*	O
repo_stat	pointer
;	O
char	O
const	O
*	O
mani_filename	pointer
;	O
ffree	function
(	O
)	O
;	O
if	O
(	O
!	O
(	O
0	int
<	O
pairnames	function
(	O
argc	int
,	O
argv	pointer
,	O
dounlock	bool
?	O
rcswriteopen	function
:	O
rcsreadopen	function
,	O
true	int
,	O
true	int
)	O
&&	O
(	O
mani_filename	pointer
=	O
MANI	O
(	O
filename	pointer
)	O
)	O
&&	O
(	O
workptr	pointer
=	O
fro_open	function
(	O
mani_filename	pointer
,	O
FOPEN_R_WORK	pointer
,	O
&	O
workstat	struct
)	O
)	O
)	O
)	O
continue	O
;	O
repo_stat	pointer
=	O
&	O
REPO	O
(	O
stat	struct
)	O
;	O
if	O
(	O
SAME_INODE	O
(	O
REPO	O
(	O
stat	struct
)	O
,	O
workstat	struct
)	O
)	O
{	O
RERR	O
(	O
"RCS file is the same as working file %s."	pointer
,	O
mani_filename	pointer
)	O
;	O
continue	O
;	O
}	O
p	pointer
=	O
NULL	O
;	O
if	O
(	O
rev	pointer
)	O
{	O
struct	O
cbuf	struct
numeric	struct
;	O
if	O
(	O
!	O
fully_numeric	function
(	O
&	O
numeric	struct
,	O
rev	pointer
,	O
workptr	pointer
)	O
)	O
continue	O
;	O
p	pointer
=	O
numeric	struct
.	O
string	pointer
;	O
}	O
else	O
if	O
(	O
REPO	O
(	O
tip	pointer
)	O
)	O
switch	O
(	O
unlockflag	bool
?	O
findlock	function
(	O
false	int
,	O
&	O
delta	struct
)	O
:	O
0	int
)	O
{	O
default	O
:	O
continue	O
;	O
case	O
0	int
:	O
p	pointer
=	O
GROK	O
(	O
branch	pointer
)	O
?	O
GROK	O
(	O
branch	pointer
)	O
:	O
""	pointer
;	O
break	O
;	O
case	O
1	int
:	O
p	pointer
=	O
delta	struct
->	O
num	pointer
;	O
break	O
;	O
}	O
delta	struct
=	O
NULL	O
;	O
deltas	pointer
=	O
NULL	O
;	O
if	O
(	O
p	pointer
&&	O
!	O
(	O
delta	struct
=	O
gr_revno	function
(	O
p	pointer
,	O
&	O
deltas	pointer
)	O
)	O
)	O
continue	O
;	O
waslocked	bool
=	O
delta	struct
&&	O
delta	struct
->	O
lockedby	pointer
;	O
BE	O
(	O
inclusive_of_Locker_in_Id_val	bool
)	O
=	O
unlock	function
(	O
delta	struct
)	O
;	O
unlocked	bool
=	O
BE	O
(	O
inclusive_of_Locker_in_Id_val	bool
)	O
&	O
unlockflag	bool
;	O
if	O
(	O
unlocked	bool
<	O
waslocked	bool
&&	O
workstat	struct
.	O
st_mode	int
&	O
(	O
S_IWUSR	O
|	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
)	O
continue	O
;	O
if	O
(	O
unlocked	bool
&&	O
!	O
checkaccesslist	function
(	O
)	O
)	O
continue	O
;	O
if	O
(	O
PROB	O
(	O
dorewrite	function
(	O
dounlock	bool
,	O
unlocked	bool
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
0	int
<=	O
expmode	int
)	O
BE	O
(	O
kws	int
)	O
=	O
expmode	int
;	O
else	O
if	O
(	O
waslocked	bool
&&	O
BE	O
(	O
kws	int
)	O
==	O
kwsub_kv	int
&&	O
WORKMODE	O
(	O
repo_stat	pointer
->	O
st_mode	int
,	O
true	int
)	O
==	O
workstat	struct
.	O
st_mode	int
)	O
BE	O
(	O
kws	int
)	O
=	O
kwsub_kvl	int
;	O
write_desc_maybe	function
(	O
FLOW	O
(	O
to	pointer
)	O
)	O
;	O
if	O
(	O
!	O
delta	struct
?	O
workstat	struct
.	O
st_size	long
!=	O
0	int
:	O
0	int
<	O
rcsfcmp	function
(	O
workptr	pointer
,	O
&	O
workstat	struct
,	O
buildrevision	function
(	O
deltas	pointer
,	O
delta	struct
,	O
NULL	O
,	O
false	int
)	O
,	O
delta	struct
)	O
)	O
continue	O
;	O
if	O
(	O
BE	O
(	O
quiet	bool
)	O
<	O
unlocked	bool
)	O
aprintf	function
(	O
stdout	pointer
,	O
"rcs -u%s %s\n"	pointer
,	O
delta	struct
->	O
num	pointer
,	O
REPO	O
(	O
filename	pointer
)	O
)	O
;	O
if	O
(	O
perform	bool
&	O
unlocked	bool
)	O
{	O
struct	O
fro	struct
*	O
from	pointer
=	O
FLOW	O
(	O
from	pointer
)	O
;	O
SAME_AFTER	O
(	O
from	pointer
,	O
delta	struct
->	O
text	pointer
)	O
;	O
if	O
(	O
deltas	pointer
->	O
entry	pointer
!=	O
delta	struct
)	O
fro_trundling	function
(	O
true	int
,	O
from	pointer
)	O
;	O
if	O
(	O
PROB	O
(	O
donerewrite	function
(	O
true	int
,	O
Ttimeflag	bool
?	O
repo_stat	pointer
->	O
st_mtime	O
:	O
(	O
time_t	long
)	O
-	O
1	int
)	O
)	O
)	O
continue	O
;	O
}	O
if	O
(	O
!	O
BE	O
(	O
quiet	bool
)	O
)	O
aprintf	function
(	O
stdout	pointer
,	O
"rm -f %s\n"	pointer
,	O
mani_filename	pointer
)	O
;	O
fro_zclose	function
(	O
&	O
workptr	pointer
)	O
;	O
if	O
(	O
perform	bool
&&	O
PROB	O
(	O
un_link	function
(	O
mani_filename	pointer
)	O
)	O
)	O
syserror_errno	O
(	O
mani_filename	pointer
)	O
;	O
}	O
tempunlink	function
(	O
)	O
;	O
if	O
(	O
!	O
BE	O
(	O
quiet	bool
)	O
)	O
fclose	function
(	O
stdout	pointer
)	O
;	O
gnurcs_goodbye	function
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
