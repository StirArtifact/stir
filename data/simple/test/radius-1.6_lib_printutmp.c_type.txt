int	O
grad_printutmp_ip_nodomain	int
;	O
int	O
grad_printutmp_use_naslist	int
=	O
1	int
;	O
char	O
*	O
grad_printutmp_date_format	pointer
=	O
"%a %H:%M"	pointer
;	O
char	O
*	O
grad_printutmp_empty_string	pointer
=	O
""	pointer
;	O
static	O
grad_slist_t	pointer
slist	pointer
;	O
typedef	O
struct	O
format_key	struct
format_key_t	struct
;	O
struct	O
format_key	struct
{	O
format_key_t	struct
*	O
next	pointer
;	O
char	O
*	O
name	pointer
;	O
char	O
*	O
value	pointer
;	O
}	O
;	O
typedef	O
int	O
(	O
*	O
radutent_fh_t	pointer
)	O
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
;	O
struct	O
format_data	struct
{	O
format_data_t	struct
*	O
next	pointer
;	O
int	O
type	int
;	O
format_key_t	struct
*	O
key	pointer
;	O
union	O
{	O
struct	O
{	O
radutent_fh_t	pointer
fun	pointer
;	O
int	O
width	int
;	O
char	O
*	O
header	pointer
;	O
}	O
fh	struct
;	O
char	O
*	O
string	pointer
;	O
int	O
tabstop	int
;	O
int	O
nl	int
;	O
}	O
v	union
;	O
}	O
;	O
static	O
void	O
format_key_free	function
(	O
format_key_t	struct
*	O
key	pointer
)	O
{	O
format_key_t	struct
*	O
next	pointer
;	O
while	O
(	O
key	pointer
)	O
{	O
next	pointer
=	O
key	pointer
->	O
next	pointer
;	O
grad_free	function
(	O
key	pointer
->	O
name	pointer
)	O
;	O
grad_free	function
(	O
key	pointer
->	O
value	pointer
)	O
;	O
grad_free	function
(	O
key	pointer
)	O
;	O
key	pointer
=	O
next	pointer
;	O
}	O
}	O
static	O
char	O
*	O
format_key_lookup	function
(	O
format_key_t	struct
*	O
key	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
for	O
(	O
;	O
key	pointer
;	O
key	pointer
=	O
key	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
key	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
key	pointer
->	O
value	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
form_free	function
(	O
format_data_t	struct
*	O
form	pointer
)	O
{	O
format_data_t	struct
*	O
next	pointer
;	O
while	O
(	O
form	pointer
)	O
{	O
next	pointer
=	O
form	pointer
->	O
next	pointer
;	O
format_key_free	function
(	O
form	pointer
->	O
key	pointer
)	O
;	O
switch	O
(	O
form	pointer
->	O
type	int
)	O
{	O
case	O
FDATA_STRING	int
:	O
grad_free	function
(	O
form	pointer
->	O
v	union
.	O
string	pointer
)	O
;	O
break	O
;	O
case	O
FDATA_FH	int
:	O
grad_free	function
(	O
form	pointer
->	O
v	union
.	O
fh	struct
.	O
header	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
grad_free	function
(	O
form	pointer
)	O
;	O
form	pointer
=	O
next	pointer
;	O
}	O
}	O
static	O
int	O
key_align	function
(	O
format_key_t	struct
*	O
key	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
format_key_lookup	function
(	O
key	pointer
,	O
"right"	pointer
)	O
;	O
return	O
p	pointer
?	O
ALIGN_RIGHT	int
:	O
ALIGN_LEFT	int
;	O
}	O
static	O
char	O
*	O
key_date_format	function
(	O
format_key_t	struct
*	O
key	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
format_key_lookup	function
(	O
key	pointer
,	O
"format"	pointer
)	O
;	O
return	O
p	pointer
?	O
p	pointer
:	O
grad_printutmp_date_format	pointer
;	O
}	O
static	O
char	O
*	O
key_empty	function
(	O
format_key_t	struct
*	O
key	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
format_key_lookup	function
(	O
key	pointer
,	O
"empty"	pointer
)	O
;	O
return	O
p	pointer
?	O
p	pointer
:	O
grad_printutmp_empty_string	pointer
;	O
}	O
static	O
int	O
key_nodomain	function
(	O
format_key_t	struct
*	O
key	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
format_key_lookup	function
(	O
key	pointer
,	O
"nodomain"	pointer
)	O
;	O
return	O
p	pointer
?	O
1	int
:	O
grad_printutmp_ip_nodomain	int
;	O
}	O
static	O
int	O
output_string	function
(	O
char	O
*	O
string	pointer
,	O
int	O
width	int
,	O
int	O
align	int
)	O
{	O
if	O
(	O
width	int
==	O
0	int
)	O
width	int
=	O
printf	function
(	O
"%s"	pointer
,	O
string	pointer
)	O
;	O
else	O
if	O
(	O
align	int
==	O
ALIGN_LEFT	int
)	O
width	int
=	O
printf	function
(	O
"%-*.*s"	pointer
,	O
width	int
,	O
width	int
,	O
string	pointer
)	O
;	O
else	O
width	int
=	O
printf	function
(	O
"%*.*s"	pointer
,	O
width	int
,	O
width	int
,	O
string	pointer
)	O
;	O
return	O
width	int
;	O
}	O
static	O
int	O
output_string_key	function
(	O
char	O
*	O
string	pointer
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
)	O
{	O
if	O
(	O
strlen	function
(	O
string	pointer
)	O
==	O
0	int
)	O
string	pointer
=	O
key_empty	function
(	O
key	pointer
)	O
;	O
return	O
output_string	function
(	O
string	pointer
,	O
width	int
,	O
key_align	function
(	O
key	pointer
)	O
)	O
;	O
}	O
static	O
int	O
output_tab	function
(	O
int	O
column	int
,	O
int	O
tabstop	int
)	O
{	O
int	O
goal	int
=	O
(	O
(	O
(	O
column	int
+	O
TAB_SIZE	int
-	O
1	int
)	O
/	O
TAB_SIZE	int
)	O
+	O
tabstop	int
)	O
*	O
TAB_SIZE	int
;	O
for	O
(	O
;	O
column	int
<	O
goal	int
;	O
column	int
++	O
)	O
putchar	function
(	O
' '	O
)	O
;	O
return	O
column	int
;	O
}	O
static	O
char	O
*	O
get_hostname	function
(	O
grad_uint32_t	int
ipaddr	int
,	O
int	O
nodomain	int
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	int
)	O
{	O
if	O
(	O
ipaddr	int
==	O
0	int
||	O
ipaddr	int
==	O
(	O
grad_uint32_t	int
)	O
-	O
1	int
||	O
ipaddr	int
==	O
(	O
grad_uint32_t	int
)	O
-	O
2	int
)	O
return	O
""	pointer
;	O
if	O
(	O
nodomain	int
)	O
{	O
char	O
*	O
s	pointer
,	O
*	O
p	pointer
;	O
s	pointer
=	O
grad_ip_gethostname	function
(	O
ntohl	function
(	O
ipaddr	int
)	O
,	O
buf	pointer
,	O
size	int
)	O
;	O
for	O
(	O
p	pointer
=	O
s	pointer
;	O
*	O
p	pointer
&&	O
(	O
isdigit	function
(	O
*	O
p	pointer
)	O
||	O
*	O
p	pointer
==	O
'.'	O
)	O
;	O
p	pointer
++	O
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
0	int
)	O
return	O
s	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
strchr	function
(	O
s	pointer
,	O
'.'	O
)	O
)	O
!=	O
NULL	O
)	O
*	O
p	pointer
=	O
0	int
;	O
return	O
s	pointer
;	O
}	O
return	O
grad_ip_gethostname	function
(	O
ntohl	function
(	O
ipaddr	int
)	O
,	O
buf	pointer
,	O
size	int
)	O
;	O
}	O
static	O
int	O
output_hostname	function
(	O
grad_uint32_t	int
ip	pointer
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
)	O
{	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
return	O
output_string_key	function
(	O
get_hostname	function
(	O
ip	pointer
,	O
key_nodomain	function
(	O
key	pointer
)	O
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
)	O
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
output_time	function
(	O
time_t	long
t	long
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
)	O
{	O
int	O
d	pointer
,	O
h	int
,	O
m	int
,	O
s	pointer
;	O
d	pointer
=	O
t	long
/	O
86400	int
;	O
t	long
%=	O
86400	int
;	O
s	pointer
=	O
t	long
%	O
60	int
;	O
m	int
=	O
t	long
/	O
60	int
;	O
if	O
(	O
m	int
>	O
59	int
)	O
{	O
h	int
=	O
m	int
/	O
60	int
;	O
m	int
-=	O
h	int
*	O
60	int
;	O
}	O
else	O
h	int
=	O
0	int
;	O
if	O
(	O
d	pointer
)	O
width	int
=	O
printf	function
(	O
"%d+%02d:%02d"	pointer
,	O
d	pointer
,	O
h	int
,	O
m	int
)	O
;	O
else	O
width	int
=	O
printf	function
(	O
"%02d:%02d"	pointer
,	O
h	int
,	O
m	int
)	O
;	O
return	O
width	int
;	O
}	O
static	O
int	O
login_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
return	O
output_string_key	function
(	O
up	pointer
->	O
login	array
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
orig_login_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
return	O
output_string_key	function
(	O
up	pointer
->	O
orig_login	array
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
gecos_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
struct	O
passwd	struct
pw	pointer
,	O
*	O
pwd	pointer
;	O
char	O
*	O
s	pointer
;	O
char	O
buffer	pointer
[	O
512	int
]	O
;	O
if	O
(	O
pwd	pointer
=	O
grad_getpwnam_r	function
(	O
up	pointer
->	O
login	array
,	O
&	O
pw	pointer
,	O
buffer	pointer
,	O
sizeof	O
buffer	pointer
)	O
)	O
{	O
if	O
(	O
(	O
s	pointer
=	O
strchr	function
(	O
pwd	pointer
->	O
pw_gecos	pointer
,	O
','	O
)	O
)	O
!=	O
NULL	O
)	O
*	O
s	pointer
=	O
0	int
;	O
s	pointer
=	O
pwd	pointer
->	O
pw_gecos	pointer
;	O
}	O
else	O
s	pointer
=	O
up	pointer
->	O
orig_login	array
;	O
return	O
output_string_key	function
(	O
s	pointer
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
nas_port_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
char	O
buf	pointer
[	O
6	int
]	O
;	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"%0*d"	pointer
,	O
width	int
-	O
1	int
,	O
up	pointer
->	O
nas_port	int
)	O
;	O
return	O
output_string_key	function
(	O
buf	pointer
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
session_id_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
return	O
output_string_key	function
(	O
up	pointer
->	O
session_id	array
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
nas_address_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
if	O
(	O
grad_printutmp_use_naslist	int
)	O
{	O
grad_nas_t	struct
*	O
nas	pointer
;	O
nas	pointer
=	O
grad_nas_lookup_ip	function
(	O
ntohl	function
(	O
up	pointer
->	O
nas_address	int
)	O
)	O
;	O
if	O
(	O
!	O
nas	pointer
)	O
return	O
output_hostname	function
(	O
up	pointer
->	O
nas_address	int
,	O
width	int
,	O
key	pointer
)	O
;	O
return	O
output_string_key	function
(	O
nas	pointer
->	O
shortname	array
[	O
0	int
]	O
?	O
nas	pointer
->	O
shortname	array
:	O
nas	pointer
->	O
longname	array
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
return	O
output_hostname	function
(	O
up	pointer
->	O
nas_address	int
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
framed_address_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
return	O
output_hostname	function
(	O
up	pointer
->	O
framed_address	int
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
protocol_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
grad_dict_value_t	struct
*	O
dval	pointer
=	O
grad_value_lookup	function
(	O
up	pointer
->	O
proto	int
,	O
"Framed-Protocol"	pointer
)	O
;	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
char	O
*	O
s	pointer
;	O
if	O
(	O
dval	pointer
)	O
s	pointer
=	O
dval	pointer
->	O
name	pointer
;	O
else	O
{	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"%u"	pointer
,	O
up	pointer
->	O
proto	int
)	O
;	O
s	pointer
=	O
buf	pointer
;	O
}	O
return	O
output_string_key	function
(	O
s	pointer
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
time_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
strftime	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
key_date_format	function
(	O
key	pointer
)	O
,	O
localtime	function
(	O
&	O
up	pointer
->	O
time	struct
)	O
)	O
;	O
return	O
output_string_key	function
(	O
buf	pointer
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
duration_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
return	O
output_time	function
(	O
(	O
up	pointer
->	O
type	int
==	O
P_IDLE	int
)	O
?	O
up	pointer
->	O
duration	long
:	O
time	struct
(	O
NULL	O
)	O
-	O
up	pointer
->	O
time	struct
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
delay_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
return	O
output_time	function
(	O
up	pointer
->	O
delay	long
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
port_type_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
grad_dict_value_t	struct
*	O
dval	pointer
=	O
grad_value_lookup	function
(	O
up	pointer
->	O
porttype	int
,	O
"NAS-Port-Type"	pointer
)	O
;	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
char	O
*	O
s	pointer
;	O
if	O
(	O
dval	pointer
)	O
s	pointer
=	O
dval	pointer
->	O
name	pointer
;	O
else	O
{	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"%u"	pointer
,	O
up	pointer
->	O
porttype	int
)	O
;	O
s	pointer
=	O
buf	pointer
;	O
}	O
return	O
output_string_key	function
(	O
s	pointer
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
clid_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
return	O
output_string_key	function
(	O
up	pointer
->	O
caller_id	array
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
int	O
realm_address_fh	function
(	O
int	O
outbytes	int
,	O
int	O
width	int
,	O
format_key_t	struct
*	O
key	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
)	O
{	O
if	O
(	O
up	pointer
->	O
realm_address	int
==	O
0	int
)	O
return	O
output_string_key	function
(	O
""	pointer
,	O
width	int
,	O
key	pointer
)	O
;	O
else	O
{	O
grad_realm_t	struct
*	O
rp	pointer
=	O
grad_realm_lookup_ip	function
(	O
up	pointer
->	O
realm_address	int
)	O
;	O
if	O
(	O
rp	pointer
)	O
return	O
output_string_key	function
(	O
rp	pointer
->	O
realm	array
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
return	O
output_hostname	function
(	O
up	pointer
->	O
realm_address	int
,	O
width	int
,	O
key	pointer
)	O
;	O
}	O
static	O
struct	O
{	O
char	O
*	O
name	pointer
;	O
radutent_fh_t	pointer
fun	pointer
;	O
}	O
handlers	array
[	O
]	O
=	O
{	O
{	O
"login"	pointer
,	O
login_fh	function
}	O
,	O
{	O
"orig-login"	pointer
,	O
orig_login_fh	function
}	O
,	O
{	O
"gecos"	pointer
,	O
gecos_fh	function
}	O
,	O
{	O
"nas-port"	pointer
,	O
nas_port_fh	function
}	O
,	O
{	O
"session-id"	pointer
,	O
session_id_fh	function
}	O
,	O
{	O
"nas-address"	pointer
,	O
nas_address_fh	function
}	O
,	O
{	O
"framed-address"	pointer
,	O
framed_address_fh	function
}	O
,	O
{	O
"protocol"	pointer
,	O
protocol_fh	function
}	O
,	O
{	O
"time"	pointer
,	O
time_fh	function
}	O
,	O
{	O
"duration"	pointer
,	O
duration_fh	function
}	O
,	O
{	O
"delay"	pointer
,	O
delay_fh	function
}	O
,	O
{	O
"port-type"	pointer
,	O
port_type_fh	function
}	O
,	O
{	O
"clid"	pointer
,	O
clid_fh	function
}	O
,	O
{	O
"realm"	pointer
,	O
realm_address_fh	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
radutent_fh_t	pointer
_lookup	function
(	O
char	O
*	O
name	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
handlers	array
[	O
i	int
]	O
.	O
name	pointer
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	function
(	O
handlers	array
[	O
i	int
]	O
.	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
handlers	array
[	O
i	int
]	O
.	O
fun	pointer
;	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
parse_string0	function
(	O
char	O
*	O
fmt	pointer
,	O
format_data_t	struct
*	O
form	pointer
,	O
int	O
(	O
*	O
cond	pointer
)	O
(	O
)	O
,	O
void	O
*	O
closure	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
fmt	pointer
;	O
*	O
p	pointer
&&	O
(	O
*	O
cond	pointer
)	O
(	O
closure	pointer
,	O
p	pointer
)	O
==	O
0	int
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
)	O
{	O
int	O
c	pointer
;	O
switch	O
(	O
*	O
++	O
p	pointer
)	O
{	O
case	O
'a'	O
:	O
c	pointer
=	O
'\a'	O
;	O
break	O
;	O
case	O
'b'	O
:	O
c	pointer
=	O
'\b'	O
;	O
break	O
;	O
case	O
'e'	O
:	O
c	pointer
=	O
'\033'	O
;	O
break	O
;	O
case	O
'f'	O
:	O
c	pointer
=	O
'\f'	O
;	O
break	O
;	O
case	O
'n'	O
:	O
c	pointer
=	O
'\n'	O
;	O
break	O
;	O
case	O
't'	O
:	O
c	pointer
=	O
'\t'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
c	pointer
=	O
'\r'	O
;	O
break	O
;	O
case	O
'v'	O
:	O
c	pointer
=	O
'\v'	O
;	O
break	O
;	O
default	O
:	O
c	pointer
=	O
*	O
p	pointer
;	O
}	O
grad_slist_append_char	function
(	O
slist	pointer
,	O
c	pointer
)	O
;	O
}	O
else	O
grad_slist_append_char	function
(	O
slist	pointer
,	O
*	O
p	pointer
)	O
;	O
}	O
form	pointer
->	O
type	int
=	O
FDATA_STRING	int
;	O
form	pointer
->	O
v	union
.	O
string	pointer
=	O
grad_estrdup	function
(	O
grad_slist_finish	function
(	O
slist	pointer
)	O
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
int	O
_is_closing_quote	function
(	O
void	O
*	O
closure	pointer
,	O
char	O
*	O
p	pointer
)	O
{	O
return	O
*	O
(	O
char	O
*	O
)	O
closure	pointer
==	O
*	O
p	pointer
;	O
}	O
static	O
int	O
parse_quote	function
(	O
char	O
*	O
*	O
fmtp	pointer
,	O
format_data_t	struct
*	O
form	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
parse_string0	function
(	O
*	O
fmtp	pointer
+	O
1	int
,	O
form	pointer
,	O
_is_closing_quote	function
,	O
*	O
fmtp	pointer
)	O
;	O
if	O
(	O
!	O
*	O
p	pointer
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"missing closing quote in string started near `%s'"	pointer
)	O
,	O
*	O
fmtp	pointer
)	O
;	O
return	O
1	int
;	O
}	O
*	O
fmtp	pointer
=	O
p	pointer
+	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_is_delim	function
(	O
void	O
*	O
closure	pointer
,	O
char	O
*	O
p	pointer
)	O
{	O
return	O
*	O
p	pointer
==	O
'('	O
;	O
}	O
static	O
int	O
parse_string	function
(	O
char	O
*	O
*	O
fmtp	pointer
,	O
format_data_t	struct
*	O
form	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
parse_string0	function
(	O
*	O
fmtp	pointer
,	O
form	pointer
,	O
_is_delim	function
,	O
NULL	O
)	O
;	O
*	O
fmtp	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
get_token	function
(	O
char	O
*	O
*	O
fmtp	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
while	O
(	O
*	O
*	O
fmtp	pointer
&&	O
isspace	function
(	O
*	O
*	O
fmtp	pointer
)	O
)	O
++	O
*	O
fmtp	pointer
;	O
p	pointer
=	O
*	O
fmtp	pointer
;	O
if	O
(	O
*	O
p	pointer
==	O
')'	O
)	O
{	O
grad_slist_append_char	function
(	O
slist	pointer
,	O
*	O
p	pointer
)	O
;	O
++	O
*	O
fmtp	pointer
;	O
}	O
else	O
{	O
while	O
(	O
*	O
*	O
fmtp	pointer
&&	O
!	O
isspace	function
(	O
*	O
*	O
fmtp	pointer
)	O
&&	O
*	O
*	O
fmtp	pointer
!=	O
')'	O
)	O
++	O
*	O
fmtp	pointer
;	O
grad_slist_append	function
(	O
slist	pointer
,	O
p	pointer
,	O
*	O
fmtp	pointer
-	O
p	pointer
)	O
;	O
}	O
grad_slist_append_char	function
(	O
slist	pointer
,	O
0	int
)	O
;	O
return	O
grad_slist_finish	function
(	O
slist	pointer
)	O
;	O
}	O
static	O
int	O
parse_form	function
(	O
char	O
*	O
*	O
fmtp	pointer
,	O
format_data_t	struct
*	O
form	pointer
)	O
{	O
char	O
*	O
formname	pointer
,	O
*	O
p	pointer
;	O
format_key_t	struct
*	O
key_head	pointer
,	O
*	O
key_tail	pointer
;	O
++	O
*	O
fmtp	pointer
;	O
formname	pointer
=	O
get_token	function
(	O
fmtp	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
formname	pointer
,	O
"newline"	pointer
)	O
==	O
0	int
)	O
{	O
form	pointer
->	O
type	int
=	O
FDATA_NEWLINE	int
;	O
p	pointer
=	O
get_token	function
(	O
fmtp	pointer
)	O
;	O
if	O
(	O
p	pointer
[	O
0	int
]	O
!=	O
')'	O
)	O
{	O
form	pointer
->	O
v	union
.	O
nl	int
=	O
strtol	function
(	O
p	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
p	pointer
=	O
get_token	function
(	O
fmtp	pointer
)	O
;	O
}	O
else	O
form	pointer
->	O
v	union
.	O
nl	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
formname	pointer
,	O
"tab"	pointer
)	O
==	O
0	int
)	O
{	O
form	pointer
->	O
type	int
=	O
FDATA_TAB	int
;	O
p	pointer
=	O
get_token	function
(	O
fmtp	pointer
)	O
;	O
if	O
(	O
p	pointer
[	O
0	int
]	O
!=	O
')'	O
)	O
{	O
form	pointer
->	O
v	union
.	O
tabstop	int
=	O
strtol	function
(	O
p	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
p	pointer
=	O
get_token	function
(	O
fmtp	pointer
)	O
;	O
}	O
else	O
form	pointer
->	O
v	union
.	O
tabstop	int
=	O
1	int
;	O
}	O
else	O
{	O
radutent_fh_t	pointer
fh	struct
;	O
int	O
arg	int
;	O
fh	struct
=	O
_lookup	function
(	O
formname	pointer
)	O
;	O
if	O
(	O
!	O
fh	struct
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"error in format spec: unknown format %s"	pointer
)	O
,	O
formname	pointer
)	O
;	O
return	O
1	int
;	O
}	O
form	pointer
->	O
type	int
=	O
FDATA_FH	int
;	O
form	pointer
->	O
v	union
.	O
fh	struct
.	O
fun	pointer
=	O
fh	struct
;	O
arg	int
=	O
0	int
;	O
while	O
(	O
(	O
p	pointer
=	O
get_token	function
(	O
fmtp	pointer
)	O
)	O
!=	O
NULL	O
&&	O
!	O
(	O
p	pointer
[	O
0	int
]	O
==	O
':'	O
||	O
p	pointer
[	O
0	int
]	O
==	O
')'	O
)	O
)	O
{	O
arg	int
++	O
;	O
switch	O
(	O
arg	int
)	O
{	O
case	O
1	int
:	O
form	pointer
->	O
v	union
.	O
fh	struct
.	O
width	int
=	O
strtol	function
(	O
p	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
2	int
:	O
form	pointer
->	O
v	union
.	O
fh	struct
.	O
header	pointer
=	O
grad_estrdup	function
(	O
p	pointer
)	O
;	O
break	O
;	O
default	O
:	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"wrong number of arguments to form %s"	pointer
)	O
,	O
formname	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
key_head	pointer
=	O
NULL	O
;	O
while	O
(	O
p	pointer
&&	O
p	pointer
[	O
0	int
]	O
==	O
':'	O
)	O
{	O
format_key_t	struct
*	O
key	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
key	pointer
)	O
)	O
;	O
if	O
(	O
!	O
key_head	pointer
)	O
key_head	pointer
=	O
key	pointer
;	O
else	O
key_tail	pointer
->	O
next	pointer
=	O
key	pointer
;	O
key_tail	pointer
=	O
key	pointer
;	O
key	pointer
->	O
name	pointer
=	O
grad_estrdup	function
(	O
p	pointer
+	O
1	int
)	O
;	O
p	pointer
=	O
get_token	function
(	O
fmtp	pointer
)	O
;	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
')'	O
||	O
p	pointer
[	O
0	int
]	O
==	O
':'	O
)	O
key	pointer
->	O
value	pointer
=	O
grad_estrdup	function
(	O
"t"	pointer
)	O
;	O
else	O
{	O
key	pointer
->	O
value	pointer
=	O
grad_estrdup	function
(	O
p	pointer
)	O
;	O
p	pointer
=	O
get_token	function
(	O
fmtp	pointer
)	O
;	O
}	O
}	O
form	pointer
->	O
key	pointer
=	O
key_head	pointer
;	O
}	O
if	O
(	O
p	pointer
[	O
0	int
]	O
!=	O
')'	O
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"form `%s' not closed"	pointer
)	O
,	O
formname	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
format_data_t	struct
*	O
grad_utent_compile_form	function
(	O
char	O
*	O
fmt	pointer
)	O
{	O
format_data_t	struct
*	O
form_head	pointer
=	O
NULL	O
,	O
*	O
form_tail	pointer
;	O
slist	pointer
=	O
grad_slist_create	function
(	O
)	O
;	O
while	O
(	O
*	O
fmt	pointer
)	O
{	O
int	O
rc	int
;	O
format_data_t	struct
*	O
form	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
form	pointer
)	O
)	O
;	O
if	O
(	O
!	O
form_head	pointer
)	O
form_head	pointer
=	O
form	pointer
;	O
else	O
form_tail	pointer
->	O
next	pointer
=	O
form	pointer
;	O
form_tail	pointer
=	O
form	pointer
;	O
if	O
(	O
*	O
fmt	pointer
==	O
'('	O
)	O
rc	int
=	O
parse_form	function
(	O
&	O
fmt	pointer
,	O
form	pointer
)	O
;	O
else	O
if	O
(	O
*	O
fmt	pointer
==	O
'"'	O
||	O
*	O
fmt	pointer
==	O
'\''	O
)	O
rc	int
=	O
parse_quote	function
(	O
&	O
fmt	pointer
,	O
form	pointer
)	O
;	O
else	O
rc	int
=	O
parse_string	function
(	O
&	O
fmt	pointer
,	O
form	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
form_free	function
(	O
form_head	pointer
)	O
;	O
form_head	pointer
=	O
NULL	O
;	O
break	O
;	O
}	O
}	O
grad_slist_free	function
(	O
&	O
slist	pointer
)	O
;	O
return	O
form_head	pointer
;	O
}	O
int	O
grad_utent_print	function
(	O
format_data_t	struct
*	O
form	pointer
,	O
struct	O
radutmp	struct
*	O
up	pointer
,	O
int	O
newline	int
)	O
{	O
int	O
i	int
;	O
int	O
outbytes	int
=	O
0	int
;	O
for	O
(	O
;	O
form	pointer
;	O
form	pointer
=	O
form	pointer
->	O
next	pointer
)	O
{	O
switch	O
(	O
form	pointer
->	O
type	int
)	O
{	O
case	O
FDATA_FH	int
:	O
outbytes	int
+=	O
form	pointer
->	O
v	union
.	O
fh	struct
.	O
fun	pointer
(	O
outbytes	int
,	O
form	pointer
->	O
v	union
.	O
fh	struct
.	O
width	int
,	O
form	pointer
->	O
key	pointer
,	O
up	pointer
)	O
;	O
break	O
;	O
case	O
FDATA_STRING	int
:	O
outbytes	int
+=	O
output_string	function
(	O
form	pointer
->	O
v	union
.	O
string	pointer
,	O
0	int
,	O
ALIGN_LEFT	int
)	O
;	O
break	O
;	O
case	O
FDATA_TAB	int
:	O
outbytes	int
+=	O
output_tab	function
(	O
outbytes	int
,	O
form	pointer
->	O
v	union
.	O
tabstop	int
)	O
;	O
break	O
;	O
case	O
FDATA_NEWLINE	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
form	pointer
->	O
v	union
.	O
nl	int
;	O
i	int
++	O
)	O
putchar	function
(	O
'\n'	O
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
newline	int
)	O
putchar	function
(	O
'\n'	O
)	O
;	O
return	O
outbytes	int
;	O
}	O
void	O
grad_utent_print_header	function
(	O
format_data_t	struct
*	O
form	pointer
)	O
{	O
int	O
i	int
,	O
outbytes	int
=	O
0	int
;	O
format_data_t	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
form	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
p	pointer
->	O
type	int
==	O
FDATA_NEWLINE	int
)	O
return	O
;	O
for	O
(	O
;	O
form	pointer
;	O
form	pointer
=	O
form	pointer
->	O
next	pointer
)	O
{	O
switch	O
(	O
form	pointer
->	O
type	int
)	O
{	O
case	O
FDATA_FH	int
:	O
if	O
(	O
form	pointer
->	O
v	union
.	O
fh	struct
.	O
header	pointer
)	O
outbytes	int
+=	O
output_string	function
(	O
form	pointer
->	O
v	union
.	O
fh	struct
.	O
header	pointer
,	O
form	pointer
->	O
v	union
.	O
fh	struct
.	O
width	int
,	O
ALIGN_LEFT	int
)	O
;	O
else	O
outbytes	int
+=	O
form	pointer
->	O
v	union
.	O
fh	struct
.	O
width	int
;	O
break	O
;	O
case	O
FDATA_STRING	int
:	O
outbytes	int
+=	O
output_string	function
(	O
""	pointer
,	O
strlen	function
(	O
form	pointer
->	O
v	union
.	O
string	pointer
)	O
,	O
ALIGN_LEFT	int
)	O
;	O
break	O
;	O
case	O
FDATA_TAB	int
:	O
outbytes	int
+=	O
output_tab	function
(	O
outbytes	int
,	O
form	pointer
->	O
v	union
.	O
tabstop	int
)	O
;	O
break	O
;	O
case	O
FDATA_NEWLINE	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
form	pointer
->	O
v	union
.	O
nl	int
;	O
i	int
++	O
)	O
putchar	function
(	O
'\n'	O
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
