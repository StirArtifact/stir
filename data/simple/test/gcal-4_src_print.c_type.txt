__BEGIN_DECLARATIONS	O
static	O
void	O
fill_year_vector	function
__P_	O
(	O
(	O
int	O
year	int
)	O
)	O
;	O
static	O
Bool	int
print_unhighlighted_date	function
__P_	O
(	O
(	O
Bool	int
marker_flag	int
)	O
)	O
;	O
static	O
Bool	int
print_highlighted_date	function
__P_	O
(	O
(	O
const	O
Bool	int
last_item	int
,	O
const	O
Bool	int
marker_flag	int
,	O
const	O
char	O
*	O
hls_start	pointer
,	O
const	O
int	O
hls_slen	int
,	O
const	O
char	O
*	O
hls_end	pointer
,	O
const	O
int	O
hls_elen	int
)	O
)	O
;	O
__END_DECLARATIONS	O
static	O
int	O
year_vector	array
[	O
VEC_ELEMS	int
]	O
;	O
static	O
int	O
special_vector	array
[	O
VEC_ELEMS	int
]	O
;	O
void	O
print_calendar	function
(	O
)	O
{	O
auto	O
Slint	long
amount	int
=	O
0L	int
;	O
auto	O
Slint	long
count	int
;	O
register	O
int	O
tmp_ad	int
=	O
act_day	int
;	O
register	O
int	O
i	int
;	O
register	O
int	O
j	int
;	O
register	O
int	O
n	long
;	O
register	O
int	O
lym	int
;	O
register	O
int	O
d	int
;	O
register	O
int	O
m	int
;	O
register	O
int	O
mm	int
;	O
register	O
int	O
yy	int
;	O
register	O
int	O
outer_end	int
=	O
(	O
special_calsheet_flag	int
)	O
?	O
MONTH_COLS	int
:	O
DAY_MAX	int
;	O
register	O
int	O
inner_end	int
;	O
register	O
int	O
blanks_between	int
=	O
(	O
special_calsheet_flag	int
)	O
?	O
5	int
:	O
2	int
;	O
register	O
int	O
hday	int
;	O
auto	O
int	O
hmonth	int
;	O
auto	O
int	O
this_day	int
;	O
auto	O
int	O
this_month	int
;	O
auto	O
Bool	int
is_marked	int
=	O
FALSE	O
;	O
auto	O
Bool	int
marker_flag	int
=	O
FALSE	O
;	O
auto	O
Bool	int
y_backwards	int
=	O
FALSE	O
;	O
auto	O
Bool	int
m_backwards	int
=	O
FALSE	O
;	O
if	O
(	O
cal_special_flag	int
)	O
act_day	int
=	O
day_of_year	function
(	O
tmp_ad	int
,	O
act_month	int
,	O
act_year	int
)	O
;	O
if	O
(	O
is_special_range	int
||	O
is_multi_range	int
)	O
{	O
y_backwards	int
=	O
(	O
Bool	int
)	O
(	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
>	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
)	O
;	O
if	O
(	O
y_backwards	int
)	O
amount	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
-	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
+	O
1L	int
;	O
else	O
amount	int
=	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
-	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
+	O
1L	int
;	O
if	O
(	O
is_multi_range	int
)	O
{	O
m_backwards	int
=	O
(	O
Bool	int
)	O
(	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
>	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
)	O
;	O
if	O
(	O
m_backwards	int
)	O
i	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
-	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
+	O
1	int
;	O
else	O
i	int
=	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
-	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
+	O
1	int
;	O
amount	int
*=	O
(	O
Slint	long
)	O
i	int
;	O
}	O
month	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
;	O
year	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
;	O
}	O
else	O
if	O
(	O
!	O
is_ext_range	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_month	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_year	int
)	O
{	O
if	O
(	O
year	int
!=	O
act_year	int
)	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_year	int
=	O
year	int
;	O
else	O
month_list	pointer
[	O
i	int
]	O
.	O
ml_year	int
=	O
act_year	int
;	O
}	O
amount	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
is_ext_year	int
)	O
{	O
if	O
(	O
!	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
)	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
=	O
act_year	int
;	O
if	O
(	O
!	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
)	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
=	O
act_year	int
;	O
y_backwards	int
=	O
(	O
Bool	int
)	O
(	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
>	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
||	O
(	O
(	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
==	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
)	O
&&	O
(	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
>	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
)	O
)	O
)	O
;	O
if	O
(	O
y_backwards	int
)	O
amount	int
=	O
(	O
(	O
(	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
-	O
1L	int
)	O
-	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
)	O
*	O
MONTH_MAX	int
)	O
+	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
+	O
(	O
(	O
MONTH_MAX	int
-	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
)	O
+	O
1L	int
)	O
;	O
else	O
amount	int
=	O
(	O
(	O
(	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
-	O
1L	int
)	O
-	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
)	O
*	O
MONTH_MAX	int
)	O
+	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
+	O
(	O
(	O
MONTH_MAX	int
-	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
)	O
+	O
1L	int
)	O
;	O
month	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
;	O
year	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
;	O
}	O
else	O
{	O
if	O
(	O
is_fiscal_year	int
)	O
{	O
y_backwards	int
=	O
(	O
Bool	int
)	O
(	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
>	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
)	O
;	O
if	O
(	O
y_backwards	int
)	O
amount	int
=	O
(	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
-	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
)	O
+	O
1L	int
;	O
else	O
amount	int
=	O
(	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_year	int
-	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
)	O
+	O
1L	int
;	O
year	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
;	O
}	O
else	O
{	O
y_backwards	int
=	O
(	O
Bool	int
)	O
(	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
>	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
)	O
;	O
if	O
(	O
y_backwards	int
)	O
amount	int
=	O
(	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
-	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
)	O
+	O
1L	int
;	O
else	O
amount	int
=	O
(	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
-	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
)	O
+	O
1L	int
;	O
year	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
;	O
}	O
}	O
}	O
if	O
(	O
is_fiscal_year	int
)	O
fiscal_month	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
;	O
if	O
(	O
!	O
fiscal_month	int
)	O
fiscal_month	int
=	O
act_month	int
;	O
if	O
(	O
!	O
amount	int
)	O
amount	int
++	O
;	O
if	O
(	O
rc_week_year_flag	int
&&	O
!	O
rc_period_list	int
&&	O
!	O
is_date_given	int
)	O
{	O
i	int
=	O
weekno2doy	function
(	O
rc_period	int
,	O
act_year	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
if	O
(	O
i	int
!=	O
-	O
WEEK_MAX	int
)	O
{	O
if	O
(	O
i	int
<	O
DAY_MIN	int
||	O
i	int
+	O
DAY_MAX	int
-	O
1	int
>	O
DAY_LAST	int
+	O
is_leap_year	int
)	O
{	O
is_2month_mode	int
=	O
is_fiscal_year	int
=	O
TRUE	O
;	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
=	O
fiscal_month	int
=	O
MONTH_MAX	int
;	O
if	O
(	O
i	int
<	O
DAY_MIN	int
)	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_year	int
=	O
--	O
year	int
;	O
}	O
else	O
{	O
(	O
void	O
)	O
doy2date	function
(	O
i	int
,	O
is_leap_year	int
,	O
&	O
day	int
,	O
&	O
month	int
)	O
;	O
m	int
=	O
month	int
;	O
(	O
void	O
)	O
doy2date	function
(	O
i	int
+	O
DAY_MAX	int
-	O
1	int
,	O
is_leap_year	int
,	O
&	O
day	int
,	O
&	O
month	int
)	O
;	O
if	O
(	O
m	int
!=	O
month	int
)	O
{	O
is_2month_mode	int
=	O
is_fiscal_year	int
=	O
TRUE	O
;	O
month	int
=	O
fiscal_month	int
=	O
m	int
;	O
}	O
else	O
is_1month_mode	int
=	O
TRUE	O
;	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
=	O
month	int
;	O
}	O
if	O
(	O
is_2month_mode	int
)	O
{	O
if	O
(	O
cal_both_dates_flag	int
)	O
{	O
out_rows	int
=	O
B2_OUT_ROWS	int
;	O
out_cols	int
=	O
B2_OUT_COLS	int
;	O
}	O
else	O
{	O
out_rows	int
=	O
A2_OUT_ROWS	int
;	O
out_cols	int
=	O
A2_OUT_COLS	int
;	O
}	O
}	O
}	O
}	O
for	O
(	O
count	int
=	O
0L	int
;	O
count	int
<	O
amount	int
;	O
count	int
++	O
)	O
{	O
mm	int
=	O
yy	int
=	O
0	int
;	O
if	O
(	O
!	O
is_ext_list	int
&&	O
!	O
is_ext_range	int
&&	O
!	O
is_special_range	int
&&	O
!	O
is_multi_range	int
)	O
{	O
month	int
=	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_month	int
;	O
if	O
(	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_year	int
)	O
year	int
=	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_year	int
;	O
if	O
(	O
count	int
)	O
yy	int
=	O
year	int
;	O
if	O
(	O
rc_period_flag	int
&&	O
(	O
rc_forwards_flag	int
||	O
rc_backwards_flag	int
)	O
&&	O
!	O
rc_period_list	int
&&	O
!	O
is_date_given	int
)	O
{	O
if	O
(	O
cal_special_flag	int
)	O
i	int
=	O
act_day	int
;	O
else	O
i	int
=	O
day_of_year	function
(	O
tmp_ad	int
,	O
act_month	int
,	O
act_year	int
)	O
;	O
if	O
(	O
rc_forwards_flag	int
)	O
{	O
if	O
(	O
(	O
act_year	int
==	O
greg	pointer
->	O
year	int
)	O
&&	O
(	O
i	int
<	O
day_of_year	function
(	O
greg	pointer
->	O
first_day	int
,	O
greg	pointer
->	O
month	int
,	O
greg	pointer
->	O
year	int
)	O
)	O
&&	O
(	O
i	int
+	O
rc_period	int
>=	O
day_of_year	function
(	O
greg	pointer
->	O
first_day	int
,	O
greg	pointer
->	O
month	int
,	O
greg	pointer
->	O
year	int
)	O
)	O
)	O
i	int
+=	O
(	O
greg	pointer
->	O
last_day	int
-	O
greg	pointer
->	O
first_day	int
+	O
1	int
)	O
;	O
i	int
+=	O
rc_period	int
;	O
}	O
else	O
{	O
if	O
(	O
(	O
act_year	int
==	O
greg	pointer
->	O
year	int
)	O
&&	O
(	O
i	int
>	O
day_of_year	function
(	O
greg	pointer
->	O
last_day	int
,	O
greg	pointer
->	O
month	int
,	O
greg	pointer
->	O
year	int
)	O
)	O
&&	O
(	O
i	int
-	O
rc_period	int
<=	O
day_of_year	function
(	O
greg	pointer
->	O
last_day	int
,	O
greg	pointer
->	O
month	int
,	O
greg	pointer
->	O
year	int
)	O
)	O
)	O
i	int
-=	O
(	O
greg	pointer
->	O
last_day	int
-	O
greg	pointer
->	O
first_day	int
+	O
1	int
)	O
;	O
i	int
-=	O
rc_period	int
;	O
}	O
if	O
(	O
(	O
i	int
>	O
0	int
)	O
&&	O
(	O
i	int
<	O
DAY_LAST	int
+	O
is_leap_year	int
+	O
1	int
)	O
)	O
{	O
(	O
void	O
)	O
doy2date	function
(	O
i	int
,	O
is_leap_year	int
,	O
&	O
day	int
,	O
&	O
month	int
)	O
;	O
act_month	int
=	O
month	int
;	O
if	O
(	O
cal_special_flag	int
)	O
act_day	int
=	O
day_of_year	function
(	O
day	int
,	O
month	int
,	O
act_year	int
)	O
;	O
else	O
act_day	int
=	O
day	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
is_ext_list	int
)	O
{	O
if	O
(	O
!	O
is_ext_year	int
)	O
{	O
month	int
=	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_month	int
;	O
if	O
(	O
count	int
&&	O
(	O
year	int
==	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_year	int
)	O
)	O
yy	int
=	O
year	int
;	O
else	O
year	int
=	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_year	int
;	O
}	O
else	O
{	O
month	int
=	O
0	int
;	O
if	O
(	O
is_fiscal_year	int
)	O
{	O
if	O
(	O
count	int
&&	O
(	O
fiscal_month	int
==	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_month	int
)	O
&&	O
(	O
year	int
==	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_year	int
)	O
)	O
{	O
mm	int
=	O
fiscal_month	int
;	O
yy	int
=	O
year	int
;	O
}	O
else	O
{	O
fiscal_month	int
=	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_month	int
;	O
year	int
=	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_year	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
count	int
&&	O
(	O
year	int
==	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_month	int
)	O
)	O
yy	int
=	O
year	int
;	O
else	O
year	int
=	O
month_list	pointer
[	O
(	O
int	O
)	O
count	int
]	O
.	O
ml_month	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
(	O
is_ext_range	int
||	O
is_special_range	int
||	O
is_multi_range	int
)	O
&&	O
count	int
)	O
{	O
if	O
(	O
!	O
is_special_range	int
&&	O
!	O
is_multi_range	int
&&	O
!	O
is_ext_year	int
)	O
{	O
yy	int
=	O
year	int
;	O
if	O
(	O
y_backwards	int
)	O
{	O
month	int
--	O
;	O
if	O
(	O
month	int
<	O
MONTH_MIN	int
)	O
month	int
=	O
MONTH_MAX	int
,	O
year	int
--	O
;	O
}	O
else	O
{	O
month	int
++	O
;	O
if	O
(	O
month	int
>	O
MONTH_MAX	int
)	O
month	int
=	O
MONTH_MIN	int
,	O
year	int
++	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
is_special_range	int
&&	O
!	O
is_multi_range	int
)	O
month	int
=	O
0	int
;	O
if	O
(	O
is_multi_range	int
)	O
{	O
if	O
(	O
m_backwards	int
)	O
{	O
month	int
--	O
;	O
if	O
(	O
month	int
<	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
)	O
{	O
month	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
;	O
if	O
(	O
y_backwards	int
)	O
year	int
--	O
;	O
else	O
year	int
++	O
;	O
}	O
else	O
yy	int
=	O
year	int
;	O
}	O
else	O
{	O
month	int
++	O
;	O
if	O
(	O
month	int
>	O
month_list	pointer
[	O
1	int
]	O
.	O
ml_month	int
)	O
{	O
month	int
=	O
(	O
*	O
month_list	pointer
)	O
.	O
ml_month	int
;	O
if	O
(	O
y_backwards	int
)	O
year	int
--	O
;	O
else	O
year	int
++	O
;	O
}	O
else	O
yy	int
=	O
year	int
;	O
}	O
}	O
else	O
if	O
(	O
y_backwards	int
)	O
year	int
--	O
;	O
else	O
year	int
++	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
is_special_range	int
&&	O
!	O
is_multi_range	int
&&	O
is_ext_year	int
)	O
month	int
=	O
0	int
;	O
if	O
(	O
yy	int
!=	O
year	int
||	O
(	O
is_fiscal_year	int
&&	O
(	O
mm	int
!=	O
fiscal_month	int
)	O
)	O
)	O
{	O
is_leap_year	int
=	O
(	O
days_of_february	function
(	O
year	int
)	O
==	O
29	int
)	O
;	O
if	O
(	O
count	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
VEC_ELEMS	int
;	O
i	int
++	O
)	O
year_vector	array
[	O
i	int
]	O
=	O
special_vector	array
[	O
i	int
]	O
=	O
0	int
;	O
fill_year_vector	function
(	O
year	int
)	O
;	O
if	O
(	O
(	O
(	O
year	int
==	O
EASTER_MIN	int
-	O
1	int
)	O
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
||	O
(	O
(	O
year	int
>=	O
EASTER_MIN	int
)	O
&&	O
(	O
year	int
<=	O
EASTER_MAX	O
)	O
)	O
)	O
print_all_holidays	function
(	O
TRUE	O
,	O
TRUE	O
)	O
;	O
else	O
if	O
(	O
count	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
HD_MAX	int
;	O
i	int
++	O
)	O
hd_ldays	array
[	O
i	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
(	O
(	O
year	int
==	O
EASTER_MIN	int
-	O
1	int
)	O
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
||	O
(	O
(	O
year	int
>=	O
EASTER_MIN	int
)	O
&&	O
(	O
year	int
<=	O
EASTER_MAX	O
)	O
)	O
)	O
print_all_holidays	function
(	O
TRUE	O
,	O
TRUE	O
)	O
;	O
*	O
s1	pointer
=	O
'\0'	O
;	O
if	O
(	O
!	O
is_ext_year	int
&&	O
!	O
is_fiscal_year	int
&&	O
!	O
is_2month_mode	int
&&	O
(	O
month	int
||	O
is_ext_list	int
||	O
is_ext_range	int
||	O
is_special_range	int
||	O
is_multi_range	int
)	O
)	O
{	O
if	O
(	O
!	O
suppr_cal_flag	int
)	O
{	O
lym	int
=	O
len_year_max	int
;	O
if	O
(	O
transform_year	int
)	O
{	O
n	long
=	O
year	int
-	O
transform_year	int
;	O
if	O
(	O
(	O
n	long
>=	O
0	int
)	O
&&	O
(	O
transform_year	int
>	O
0	int
)	O
)	O
n	long
++	O
;	O
if	O
(	O
abs	function
(	O
n	long
)	O
>	O
YEAR_MAX	int
)	O
lym	int
++	O
;	O
}	O
else	O
n	long
=	O
year	int
;	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
if	O
(	O
special_calsheet_flag	int
)	O
{	O
inner_end	int
=	O
DAY_MAX	int
;	O
if	O
(	O
use_year_zeroleaded	int
)	O
{	O
i	int
=	O
(	O
(	O
format_len	int
*	O
DAY_MAX	int
)	O
>>	O
1	int
)	O
+	O
(	O
(	O
strlen	function
(	O
month_name	function
(	O
month	int
)	O
)	O
+	O
lym	int
+	O
1	int
)	O
>>	O
1	int
)	O
-	O
lym	int
;	O
sprintf	function
(	O
s1	pointer
,	O
"%*s %0*d"	pointer
,	O
i	int
,	O
month_name	function
(	O
month	int
)	O
,	O
lym	int
,	O
n	long
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
s1	pointer
,	O
"%d"	pointer
,	O
n	long
)	O
;	O
d	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s1	pointer
)	O
;	O
i	int
=	O
(	O
(	O
format_len	int
*	O
DAY_MAX	int
)	O
>>	O
1	int
)	O
+	O
(	O
(	O
strlen	function
(	O
month_name	function
(	O
month	int
)	O
)	O
+	O
d	int
+	O
1	int
)	O
>>	O
1	int
)	O
-	O
d	int
;	O
sprintf	function
(	O
s1	pointer
,	O
"%*s %d"	pointer
,	O
i	int
,	O
month_name	function
(	O
month	int
)	O
,	O
n	long
)	O
;	O
}	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
for	O
(	O
i	int
=	O
DAY_MIN	int
;	O
i	int
<=	O
DAY_MAX	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
use_short3_day_name	int
&&	O
(	O
format_len	int
>	O
FORMAT_LEN_MIN	int
)	O
)	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
format_len	int
,	O
short3_day_name	function
(	O
SDAY	O
(	O
i	int
,	O
start_day	int
)	O
)	O
)	O
;	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
format_len	int
,	O
short_day_name	function
(	O
SDAY	O
(	O
i	int
,	O
start_day	int
)	O
)	O
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
}	O
if	O
(	O
cal_with_week_number	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
" %2s"	pointer
,	O
_	O
(	O
"CW"	pointer
)	O
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
}	O
}	O
else	O
{	O
inner_end	int
=	O
MONTH_COLS	int
;	O
if	O
(	O
use_year_zeroleaded	int
)	O
sprintf	function
(	O
s1	pointer
,	O
"%s %0*d"	pointer
,	O
month_name	function
(	O
month	int
)	O
,	O
lym	int
,	O
n	long
)	O
;	O
else	O
sprintf	function
(	O
s1	pointer
,	O
"%s %d"	pointer
,	O
month_name	function
(	O
month	int
)	O
,	O
n	long
)	O
;	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
if	O
(	O
cal_with_week_number	int
)	O
sprintf	function
(	O
s3	pointer
,	O
"%-*s"	pointer
,	O
len_dayname_max	int
+	O
blanks_between	int
,	O
_	O
(	O
"Week"	pointer
)	O
)	O
;	O
}	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
outer_end	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
special_calsheet_flag	int
)	O
sprintf	function
(	O
s1	pointer
,	O
"%-*s"	pointer
,	O
len_dayname_max	int
+	O
blanks_between	int
,	O
day_name	function
(	O
SDAY	O
(	O
i	int
,	O
start_day	int
)	O
)	O
)	O
;	O
for	O
(	O
d	int
=	O
1	int
;	O
d	int
<=	O
inner_end	int
;	O
d	int
++	O
)	O
{	O
if	O
(	O
special_calsheet_flag	int
)	O
day	int
=	O
(	O
month	int
-	O
1	int
)	O
*	O
VEC_BLOCK	int
-	O
1	int
+	O
(	O
i	int
-	O
1	int
)	O
*	O
DAY_MAX	int
+	O
d	int
;	O
else	O
day	int
=	O
(	O
month	int
-	O
1	int
)	O
*	O
VEC_BLOCK	int
-	O
1	int
+	O
d	int
*	O
DAY_MAX	int
-	O
MONTH_COLS	int
+	O
i	int
-	O
1	int
;	O
if	O
(	O
highlight_flag	int
&&	O
(	O
year_vector	array
[	O
day	int
]	O
==	O
act_day	int
)	O
&&	O
(	O
month	int
==	O
act_month	int
)	O
&&	O
(	O
year	int
==	O
act_year	int
)	O
)	O
{	O
if	O
(	O
is_marked	int
&&	O
(	O
ehls1s	struct
.	O
len	int
==	O
1	int
)	O
)	O
marker_flag	int
=	O
print_highlighted_date	function
(	O
d	int
==	O
inner_end	int
,	O
is_marked	int
,	O
""	pointer
,	O
0	int
,	O
ehls1e	struct
.	O
seq	pointer
,	O
ehls1e	struct
.	O
len	int
)	O
;	O
else	O
is_marked	int
=	O
marker_flag	int
=	O
print_highlighted_date	function
(	O
d	int
==	O
inner_end	int
,	O
is_marked	int
,	O
ehls1s	struct
.	O
seq	pointer
,	O
ehls1s	struct
.	O
len	int
,	O
ehls1e	struct
.	O
seq	pointer
,	O
ehls1e	struct
.	O
len	int
)	O
;	O
}	O
else	O
{	O
j	int
=	O
0	int
;	O
if	O
(	O
year_vector	array
[	O
day	int
]	O
)	O
{	O
if	O
(	O
cal_special_flag	int
)	O
(	O
void	O
)	O
doy2date	function
(	O
year_vector	array
[	O
day	int
]	O
,	O
is_leap_year	int
,	O
&	O
this_day	int
,	O
&	O
month	int
)	O
;	O
else	O
this_day	int
=	O
year_vector	array
[	O
day	int
]	O
;	O
if	O
(	O
hd_ldays	array
[	O
(	O
(	O
month	int
-	O
1	int
)	O
*	O
MONTH_LAST	int
)	O
+	O
(	O
this_day	int
-	O
1	int
)	O
]	O
)	O
j	int
=	O
1	int
;	O
}	O
if	O
(	O
j	int
&&	O
highlight_flag	int
)	O
{	O
if	O
(	O
is_marked	int
&&	O
(	O
ehls2s	struct
.	O
len	int
==	O
1	int
)	O
)	O
marker_flag	int
=	O
print_highlighted_date	function
(	O
d	int
==	O
inner_end	int
,	O
is_marked	int
,	O
""	pointer
,	O
0	int
,	O
ehls2e	struct
.	O
seq	pointer
,	O
ehls2e	struct
.	O
len	int
)	O
;	O
else	O
is_marked	int
=	O
marker_flag	int
=	O
print_highlighted_date	function
(	O
d	int
==	O
inner_end	int
,	O
is_marked	int
,	O
ehls2s	struct
.	O
seq	pointer
,	O
ehls2s	struct
.	O
len	int
,	O
ehls2e	struct
.	O
seq	pointer
,	O
ehls2e	struct
.	O
len	int
)	O
;	O
}	O
else	O
{	O
marker_flag	int
=	O
print_unhighlighted_date	function
(	O
marker_flag	int
)	O
;	O
is_marked	int
=	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
cal_with_week_number	int
&&	O
(	O
(	O
special_calsheet_flag	int
&&	O
(	O
d	int
==	O
inner_end	int
)	O
)	O
||	O
(	O
!	O
special_calsheet_flag	int
&&	O
(	O
i	int
==	O
1	int
)	O
)	O
)	O
)	O
{	O
j	int
=	O
SPECIAL_VALUE	O
;	O
if	O
(	O
special_calsheet_flag	int
)	O
{	O
j	int
=	O
0	int
;	O
day	int
-=	O
(	O
DAY_MAX	int
-	O
1	int
)	O
;	O
if	O
(	O
day	int
>=	O
0	int
)	O
{	O
while	O
(	O
(	O
j	int
<	O
DAY_MAX	int
)	O
&&	O
(	O
day	int
+	O
j	int
<	O
VEC_ELEMS	int
)	O
&&	O
!	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
)	O
j	int
++	O
;	O
if	O
(	O
(	O
j	int
!=	O
DAY_MAX	int
)	O
&&	O
(	O
day	int
+	O
j	int
<	O
VEC_ELEMS	int
)	O
)	O
{	O
if	O
(	O
cal_special_flag	int
)	O
{	O
(	O
void	O
)	O
doy2date	function
(	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
,	O
is_leap_year	int
,	O
&	O
day	int
,	O
&	O
month	int
)	O
;	O
j	int
=	O
week_number	function
(	O
day	int
,	O
month	int
,	O
year	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
}	O
else	O
j	int
=	O
week_number	function
(	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
,	O
month	int
,	O
year	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
}	O
else	O
j	int
=	O
SPECIAL_VALUE	O
;	O
}	O
else	O
j	int
=	O
SPECIAL_VALUE	O
;	O
}	O
else	O
{	O
j	int
=	O
0	int
;	O
while	O
(	O
(	O
j	int
<	O
DAY_MAX	int
)	O
&&	O
(	O
day	int
+	O
j	int
<	O
VEC_ELEMS	int
)	O
&&	O
!	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
)	O
j	int
++	O
;	O
if	O
(	O
(	O
j	int
!=	O
DAY_MAX	int
)	O
&&	O
(	O
day	int
+	O
j	int
<	O
VEC_ELEMS	int
)	O
)	O
{	O
if	O
(	O
cal_special_flag	int
)	O
{	O
(	O
void	O
)	O
doy2date	function
(	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
,	O
is_leap_year	int
,	O
&	O
day	int
,	O
&	O
month	int
)	O
;	O
j	int
=	O
week_number	function
(	O
day	int
,	O
month	int
,	O
year	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
}	O
else	O
j	int
=	O
week_number	function
(	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
,	O
month	int
,	O
year	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
}	O
else	O
j	int
=	O
SPECIAL_VALUE	O
;	O
}	O
if	O
(	O
j	int
!=	O
SPECIAL_VALUE	O
)	O
{	O
if	O
(	O
j	int
<	O
0	int
)	O
sprintf	function
(	O
s2	pointer
,	O
"%02d/0"	pointer
,	O
-	O
j	int
)	O
;	O
else	O
if	O
(	O
!	O
j	int
)	O
sprintf	function
(	O
s2	pointer
,	O
"%s"	pointer
,	O
"53/1"	pointer
)	O
;	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%02d"	pointer
,	O
j	int
)	O
;	O
if	O
(	O
!	O
special_calsheet_flag	int
&&	O
(	O
strlen	function
(	O
s2	pointer
)	O
>	O
2	int
)	O
&&	O
(	O
d	int
==	O
1	int
)	O
)	O
{	O
j	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s3	pointer
)	O
;	O
s3	pointer
[	O
j	int
-	O
2	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
else	O
if	O
(	O
special_calsheet_flag	int
||	O
(	O
!	O
special_calsheet_flag	int
&&	O
(	O
i	int
==	O
1	int
)	O
)	O
)	O
strcpy	function
(	O
s2	pointer
,	O
"  "	pointer
)	O
;	O
if	O
(	O
special_calsheet_flag	int
)	O
{	O
if	O
(	O
!	O
is_marked	int
||	O
(	O
is_marked	int
&&	O
(	O
(	O
ehls1s	struct
.	O
len	int
>	O
1	int
)	O
||	O
(	O
ehls2s	struct
.	O
len	int
>	O
1	int
)	O
)	O
)	O
)	O
strcat	function
(	O
s1	pointer
,	O
" "	pointer
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
s4	pointer
,	O
"%*s"	pointer
,	O
format_len	int
-	O
2	int
,	O
""	pointer
)	O
;	O
strcat	function
(	O
s3	pointer
,	O
s4	pointer
)	O
;	O
strcat	function
(	O
s3	pointer
,	O
s2	pointer
)	O
;	O
}	O
}	O
}	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
is_marked	int
=	O
marker_flag	int
=	O
FALSE	O
;	O
}	O
if	O
(	O
cal_with_week_number	int
&&	O
!	O
special_calsheet_flag	int
)	O
{	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
print_text	function
(	O
stdout	pointer
,	O
s3	pointer
)	O
;	O
}	O
}	O
if	O
(	O
rc_use_flag	int
&&	O
(	O
is_ext_list	int
||	O
is_ext_range	int
||	O
is_special_range	int
||	O
is_multi_range	int
||	O
amount	int
>	O
1L	int
)	O
)	O
rc_use	function
(	O
)	O
;	O
if	O
(	O
holiday_flag	int
&&	O
(	O
is_ext_list	int
||	O
is_ext_range	int
||	O
is_special_range	int
||	O
is_multi_range	int
||	O
amount	int
>	O
1L	int
)	O
&&	O
(	O
(	O
(	O
year	int
==	O
EASTER_MIN	int
-	O
1	int
)	O
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
||	O
(	O
(	O
year	int
>=	O
EASTER_MIN	int
)	O
&&	O
(	O
year	int
<=	O
EASTER_MAX	O
)	O
)	O
)	O
)	O
print_all_holidays	function
(	O
FALSE	O
,	O
FALSE	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
suppr_cal_flag	int
)	O
{	O
register	O
int	O
n2	int
;	O
lym	int
=	O
len_year_max	int
;	O
if	O
(	O
transform_year	int
)	O
{	O
n	long
=	O
year	int
-	O
transform_year	int
;	O
if	O
(	O
(	O
n	long
>=	O
0	int
)	O
&&	O
(	O
transform_year	int
>	O
0	int
)	O
)	O
n	long
++	O
;	O
n2	int
=	O
(	O
year	int
-	O
transform_year	int
)	O
+	O
1	int
;	O
if	O
(	O
(	O
n2	int
>=	O
0	int
)	O
&&	O
(	O
transform_year	int
>	O
0	int
)	O
)	O
n2	int
++	O
;	O
if	O
(	O
abs	function
(	O
n	long
)	O
>	O
YEAR_MAX	int
||	O
abs	function
(	O
n2	int
)	O
>	O
YEAR_MAX	int
)	O
lym	int
++	O
;	O
}	O
else	O
{	O
n	long
=	O
year	int
;	O
n2	int
=	O
year	int
+	O
1	int
;	O
}	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
if	O
(	O
special_calsheet_flag	int
)	O
{	O
inner_end	int
=	O
DAY_MAX	int
*	O
out_cols	int
;	O
i	int
=	O
(	O
(	O
out_cols	int
-	O
1	int
)	O
*	O
blanks_between	int
+	O
out_cols	int
*	O
format_len	int
*	O
DAY_MAX	int
)	O
>>	O
1	int
;	O
}	O
else	O
{	O
inner_end	int
=	O
MONTH_COLS	int
*	O
out_cols	int
;	O
i	int
=	O
(	O
out_cols	int
*	O
format_len	int
*	O
MONTH_COLS	int
+	O
2	int
+	O
blanks_between	int
)	O
>>	O
1	int
;	O
}	O
if	O
(	O
(	O
!	O
is_3month_mode	int
&&	O
!	O
is_2month_mode	int
&&	O
!	O
is_3month_mode2	int
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
&&	O
(	O
year	int
+	O
1	int
<=	O
YEAR_MAX	int
)	O
)	O
||	O
(	O
is_2month_mode	int
&&	O
(	O
fiscal_month	int
==	O
MONTH_MAX	int
)	O
)	O
||	O
(	O
is_3month_mode	int
&&	O
(	O
fiscal_month	int
>=	O
MONTH_MAX	int
-	O
1	int
)	O
)	O
)	O
{	O
if	O
(	O
use_year_zeroleaded	int
)	O
sprintf	function
(	O
s1	pointer
,	O
"%*s%0*d/%0*d"	pointer
,	O
i	int
-	O
lym	int
,	O
""	pointer
,	O
lym	int
,	O
n	long
,	O
lym	int
,	O
n2	int
)	O
;	O
else	O
{	O
sprintf	function
(	O
s1	pointer
,	O
"%d"	pointer
,	O
n	long
)	O
;	O
d	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s1	pointer
)	O
;	O
sprintf	function
(	O
s1	pointer
,	O
"%d"	pointer
,	O
n2	int
)	O
;	O
d	int
+=	O
(	O
int	O
)	O
strlen	function
(	O
s1	pointer
)	O
;	O
sprintf	function
(	O
s1	pointer
,	O
"%*s%d/%d"	pointer
,	O
i	int
-	O
(	O
d	int
>>	O
1	int
)	O
,	O
""	pointer
,	O
n	long
,	O
n2	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
use_year_zeroleaded	int
)	O
sprintf	function
(	O
s1	pointer
,	O
"%*s%0*d"	pointer
,	O
i	int
-	O
(	O
lym	int
>>	O
1	int
)	O
,	O
""	pointer
,	O
lym	int
,	O
n	long
)	O
;	O
else	O
{	O
sprintf	function
(	O
s1	pointer
,	O
"%d"	pointer
,	O
n	long
)	O
;	O
d	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s1	pointer
)	O
;	O
sprintf	function
(	O
s1	pointer
,	O
"%*s%d"	pointer
,	O
i	int
-	O
(	O
d	int
>>	O
1	int
)	O
,	O
""	pointer
,	O
n	long
)	O
;	O
}	O
}	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
for	O
(	O
m	int
=	O
0	int
;	O
m	int
<	O
out_rows	int
;	O
m	int
++	O
)	O
{	O
if	O
(	O
special_calsheet_flag	int
)	O
{	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
out_cols	int
;	O
i	int
++	O
)	O
{	O
d	int
=	O
(	O
(	O
format_len	int
*	O
DAY_MAX	int
)	O
>>	O
1	int
)	O
+	O
(	O
strlen	function
(	O
month_name	function
(	O
SMONTH	O
(	O
m	int
*	O
out_cols	int
+	O
i	int
,	O
fiscal_month	int
)	O
)	O
)	O
>>	O
1	int
)	O
;	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
d	int
,	O
month_name	function
(	O
SMONTH	O
(	O
m	int
*	O
out_cols	int
+	O
i	int
,	O
fiscal_month	int
)	O
)	O
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
out_cols	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
(	O
format_len	int
*	O
DAY_MAX	int
)	O
-	O
(	O
d	int
-	O
blanks_between	int
)	O
,	O
""	pointer
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
}	O
}	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
out_cols	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
d	int
=	O
DAY_MIN	int
;	O
d	int
<=	O
DAY_MAX	int
;	O
d	int
++	O
)	O
{	O
if	O
(	O
use_short3_day_name	int
&&	O
(	O
format_len	int
>	O
FORMAT_LEN_MIN	int
)	O
)	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
format_len	int
,	O
short3_day_name	function
(	O
SDAY	O
(	O
d	int
,	O
start_day	int
)	O
)	O
)	O
;	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
format_len	int
,	O
short_day_name	function
(	O
SDAY	O
(	O
d	int
,	O
start_day	int
)	O
)	O
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
}	O
if	O
(	O
cal_with_week_number	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
" %2s"	pointer
,	O
_	O
(	O
"CW"	pointer
)	O
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
}	O
if	O
(	O
i	int
!=	O
out_cols	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
(	O
cal_with_week_number	int
)	O
?	O
blanks_between	int
-	O
3	int
:	O
blanks_between	int
,	O
""	pointer
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
use_short3_day_name	int
)	O
strcat	function
(	O
s1	pointer
,	O
" "	pointer
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
out_cols	int
;	O
i	int
++	O
)	O
{	O
strcpy	function
(	O
s2	pointer
,	O
month_name	function
(	O
SMONTH	O
(	O
m	int
*	O
out_cols	int
+	O
i	int
,	O
fiscal_month	int
)	O
)	O
)	O
;	O
d	int
=	O
(	O
int	O
)	O
strlen	function
(	O
s2	pointer
)	O
;	O
sprintf	function
(	O
s2	pointer
,	O
"%*s%s"	pointer
,	O
2	int
+	O
blanks_between	int
+	O
1	int
,	O
""	pointer
,	O
month_name	function
(	O
SMONTH	O
(	O
m	int
*	O
out_cols	int
+	O
i	int
,	O
fiscal_month	int
)	O
)	O
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
out_cols	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
(	O
format_len	int
*	O
MONTH_COLS	int
)	O
-	O
(	O
d	int
+	O
2	int
+	O
blanks_between	int
+	O
1	int
)	O
,	O
""	pointer
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
}	O
}	O
if	O
(	O
cal_with_week_number	int
)	O
{	O
if	O
(	O
use_short3_day_name	int
)	O
j	int
=	O
3	int
;	O
else	O
j	int
=	O
2	int
;	O
sprintf	function
(	O
s3	pointer
,	O
"%-*s"	pointer
,	O
j	int
+	O
blanks_between	int
,	O
_	O
(	O
"CW"	pointer
)	O
)	O
;	O
}	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
}	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
outer_end	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
special_calsheet_flag	int
)	O
{	O
if	O
(	O
use_short3_day_name	int
)	O
sprintf	function
(	O
s1	pointer
,	O
"%-*s"	pointer
,	O
3	int
+	O
blanks_between	int
,	O
short3_day_name	function
(	O
SDAY	O
(	O
i	int
,	O
start_day	int
)	O
)	O
)	O
;	O
else	O
sprintf	function
(	O
s1	pointer
,	O
"%-*s"	pointer
,	O
2	int
+	O
blanks_between	int
,	O
short_day_name	function
(	O
SDAY	O
(	O
i	int
,	O
start_day	int
)	O
)	O
)	O
;	O
}	O
for	O
(	O
d	int
=	O
1	int
;	O
d	int
<=	O
inner_end	int
;	O
d	int
++	O
)	O
{	O
if	O
(	O
special_calsheet_flag	int
)	O
day	int
=	O
m	int
*	O
out_cols	int
*	O
VEC_BLOCK	int
-	O
1	int
+	O
(	O
(	O
(	O
d	int
-	O
1	int
)	O
/	O
DAY_MAX	int
)	O
*	O
VEC_BLOCK	int
)	O
+	O
(	O
(	O
i	int
-	O
1	int
)	O
*	O
DAY_MAX	int
)	O
+	O
(	O
(	O
d	int
-	O
1	int
)	O
%	O
DAY_MAX	int
)	O
+	O
1	int
;	O
else	O
day	int
=	O
m	int
*	O
out_cols	int
*	O
VEC_BLOCK	int
-	O
1	int
+	O
(	O
d	int
*	O
DAY_MAX	int
-	O
MONTH_COLS	int
)	O
+	O
(	O
i	int
-	O
1	int
)	O
;	O
hday	int
=	O
(	O
m	int
*	O
out_cols	int
)	O
+	O
(	O
(	O
d	int
-	O
1	int
)	O
/	O
(	O
(	O
special_calsheet_flag	int
)	O
?	O
DAY_MAX	int
:	O
MONTH_COLS	int
)	O
)	O
+	O
1	int
;	O
hmonth	int
=	O
SMONTH	O
(	O
hday	int
,	O
fiscal_month	int
)	O
;	O
if	O
(	O
highlight_flag	int
&&	O
(	O
year_vector	array
[	O
day	int
]	O
==	O
act_day	int
)	O
&&	O
(	O
hmonth	int
==	O
act_month	int
)	O
&&	O
(	O
act_year	int
==	O
(	O
(	O
hday	int
>	O
hmonth	int
)	O
?	O
year	int
+	O
1	int
:	O
year	int
)	O
)	O
)	O
{	O
if	O
(	O
is_marked	int
&&	O
(	O
ehls1s	struct
.	O
len	int
==	O
1	int
)	O
)	O
marker_flag	int
=	O
print_highlighted_date	function
(	O
TRUE	O
,	O
is_marked	int
,	O
""	pointer
,	O
0	int
,	O
ehls1e	struct
.	O
seq	pointer
,	O
ehls1e	struct
.	O
len	int
)	O
;	O
else	O
is_marked	int
=	O
marker_flag	int
=	O
print_highlighted_date	function
(	O
(	O
ehls1s	struct
.	O
len	int
==	O
1	int
)	O
?	O
TRUE	O
:	O
FALSE	O
,	O
is_marked	int
,	O
ehls1s	struct
.	O
seq	pointer
,	O
ehls1s	struct
.	O
len	int
,	O
ehls1e	struct
.	O
seq	pointer
,	O
ehls1e	struct
.	O
len	int
)	O
;	O
}	O
else	O
{	O
j	int
=	O
0	int
;	O
if	O
(	O
year_vector	array
[	O
day	int
]	O
)	O
{	O
if	O
(	O
cal_special_flag	int
)	O
(	O
void	O
)	O
doy2date	function
(	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
,	O
(	O
hday	int
>	O
hmonth	int
)	O
?	O
days_of_february	function
(	O
year	int
+	O
1	int
)	O
==	O
29	int
:	O
is_leap_year	int
,	O
&	O
this_day	int
,	O
&	O
this_month	int
)	O
;	O
else	O
{	O
this_day	int
=	O
year_vector	array
[	O
day	int
]	O
;	O
this_month	int
=	O
hmonth	int
;	O
}	O
if	O
(	O
hd_ldays	array
[	O
(	O
(	O
this_month	int
-	O
1	int
)	O
*	O
MONTH_LAST	int
)	O
+	O
(	O
this_day	int
-	O
1	int
)	O
]	O
)	O
j	int
=	O
1	int
;	O
}	O
if	O
(	O
j	int
&&	O
highlight_flag	int
)	O
{	O
if	O
(	O
is_marked	int
&&	O
(	O
ehls2s	struct
.	O
len	int
==	O
1	int
)	O
)	O
marker_flag	int
=	O
print_highlighted_date	function
(	O
TRUE	O
,	O
is_marked	int
,	O
""	pointer
,	O
0	int
,	O
ehls2e	struct
.	O
seq	pointer
,	O
ehls2e	struct
.	O
len	int
)	O
;	O
else	O
is_marked	int
=	O
marker_flag	int
=	O
print_highlighted_date	function
(	O
(	O
ehls2s	struct
.	O
len	int
==	O
1	int
)	O
?	O
TRUE	O
:	O
FALSE	O
,	O
is_marked	int
,	O
ehls2s	struct
.	O
seq	pointer
,	O
ehls2s	struct
.	O
len	int
,	O
ehls2e	struct
.	O
seq	pointer
,	O
ehls2e	struct
.	O
len	int
)	O
;	O
}	O
else	O
{	O
marker_flag	int
=	O
print_unhighlighted_date	function
(	O
marker_flag	int
)	O
;	O
is_marked	int
=	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
cal_with_week_number	int
&&	O
(	O
(	O
special_calsheet_flag	int
&&	O
!	O
(	O
d	int
%	O
DAY_MAX	int
)	O
)	O
||	O
(	O
!	O
special_calsheet_flag	int
&&	O
(	O
i	int
==	O
1	int
)	O
)	O
)	O
)	O
{	O
j	int
=	O
SPECIAL_VALUE	O
;	O
if	O
(	O
special_calsheet_flag	int
)	O
{	O
j	int
=	O
0	int
;	O
day	int
-=	O
(	O
DAY_MAX	int
-	O
1	int
)	O
;	O
if	O
(	O
day	int
>=	O
0	int
)	O
{	O
while	O
(	O
(	O
j	int
<	O
DAY_MAX	int
)	O
&&	O
(	O
day	int
+	O
j	int
<	O
VEC_ELEMS	int
)	O
&&	O
!	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
)	O
j	int
++	O
;	O
if	O
(	O
(	O
j	int
!=	O
DAY_MAX	int
)	O
&&	O
(	O
day	int
+	O
j	int
<	O
VEC_ELEMS	int
)	O
)	O
{	O
if	O
(	O
cal_special_flag	int
)	O
{	O
(	O
void	O
)	O
doy2date	function
(	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
,	O
(	O
hday	int
>	O
hmonth	int
)	O
?	O
days_of_february	function
(	O
year	int
+	O
1	int
)	O
==	O
29	int
:	O
is_leap_year	int
,	O
&	O
day	int
,	O
&	O
hmonth	int
)	O
;	O
j	int
=	O
week_number	function
(	O
day	int
,	O
hmonth	int
,	O
(	O
hday	int
>	O
hmonth	int
)	O
?	O
year	int
+	O
1	int
:	O
year	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
}	O
else	O
j	int
=	O
week_number	function
(	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
,	O
hmonth	int
,	O
(	O
hday	int
>	O
hmonth	int
)	O
?	O
year	int
+	O
1	int
:	O
year	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
}	O
else	O
j	int
=	O
SPECIAL_VALUE	O
;	O
}	O
else	O
j	int
=	O
SPECIAL_VALUE	O
;	O
}	O
else	O
{	O
j	int
=	O
0	int
;	O
while	O
(	O
(	O
j	int
<	O
DAY_MAX	int
)	O
&&	O
(	O
day	int
+	O
j	int
<	O
VEC_ELEMS	int
)	O
&&	O
!	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
)	O
j	int
++	O
;	O
if	O
(	O
(	O
j	int
!=	O
DAY_MAX	int
)	O
&&	O
(	O
day	int
+	O
j	int
<	O
VEC_ELEMS	int
)	O
)	O
{	O
if	O
(	O
cal_special_flag	int
)	O
{	O
(	O
void	O
)	O
doy2date	function
(	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
,	O
(	O
hday	int
>	O
hmonth	int
)	O
?	O
days_of_february	function
(	O
year	int
+	O
1	int
)	O
==	O
29	int
:	O
is_leap_year	int
,	O
&	O
day	int
,	O
&	O
hmonth	int
)	O
;	O
j	int
=	O
week_number	function
(	O
day	int
,	O
hmonth	int
,	O
(	O
hday	int
>	O
hmonth	int
)	O
?	O
year	int
+	O
1	int
:	O
year	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
}	O
else	O
j	int
=	O
week_number	function
(	O
year_vector	array
[	O
day	int
+	O
j	int
]	O
,	O
hmonth	int
,	O
(	O
hday	int
>	O
hmonth	int
)	O
?	O
year	int
+	O
1	int
:	O
year	int
,	O
iso_week_number	int
,	O
start_day	int
)	O
;	O
}	O
else	O
j	int
=	O
SPECIAL_VALUE	O
;	O
}	O
if	O
(	O
j	int
!=	O
SPECIAL_VALUE	O
)	O
{	O
if	O
(	O
j	int
<	O
0	int
)	O
sprintf	function
(	O
s2	pointer
,	O
"%02d"	pointer
,	O
-	O
j	int
)	O
;	O
else	O
if	O
(	O
!	O
j	int
)	O
sprintf	function
(	O
s2	pointer
,	O
"%02d"	pointer
,	O
1	int
)	O
;	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%02d"	pointer
,	O
j	int
)	O
;	O
}	O
else	O
if	O
(	O
special_calsheet_flag	int
||	O
(	O
!	O
special_calsheet_flag	int
&&	O
(	O
i	int
==	O
1	int
)	O
)	O
)	O
strcpy	function
(	O
s2	pointer
,	O
"  "	pointer
)	O
;	O
if	O
(	O
special_calsheet_flag	int
)	O
{	O
if	O
(	O
!	O
is_marked	int
)	O
strcat	function
(	O
s1	pointer
,	O
" "	pointer
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
s4	pointer
,	O
"%*s"	pointer
,	O
format_len	int
-	O
2	int
,	O
""	pointer
)	O
;	O
strcat	function
(	O
s3	pointer
,	O
s4	pointer
)	O
;	O
strcat	function
(	O
s3	pointer
,	O
s2	pointer
)	O
;	O
}	O
}	O
if	O
(	O
special_calsheet_flag	int
&&	O
!	O
(	O
d	int
%	O
DAY_MAX	int
)	O
&&	O
(	O
d	int
!=	O
DAY_MAX	int
*	O
out_cols	int
)	O
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
(	O
cal_with_week_number	int
)	O
?	O
blanks_between	int
-	O
3	int
:	O
blanks_between	int
,	O
""	pointer
)	O
;	O
if	O
(	O
cal_with_week_number	int
&&	O
is_marked	int
)	O
strcat	function
(	O
s2	pointer
,	O
" "	pointer
)	O
;	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
}	O
}	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
marker_flag	int
=	O
is_marked	int
=	O
FALSE	O
;	O
}	O
if	O
(	O
cal_with_week_number	int
&&	O
!	O
special_calsheet_flag	int
)	O
{	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
print_text	function
(	O
stdout	pointer
,	O
s3	pointer
)	O
;	O
}	O
if	O
(	O
m	int
<	O
out_rows	int
-	O
1	int
)	O
{	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
print_text	function
(	O
stdout	pointer
,	O
s1	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
rc_use_flag	int
&&	O
(	O
is_ext_list	int
||	O
is_ext_range	int
)	O
)	O
rc_use	function
(	O
)	O
;	O
if	O
(	O
is_ext_year	int
&&	O
holiday_flag	int
&&	O
(	O
(	O
(	O
year	int
==	O
EASTER_MIN	int
-	O
1	int
)	O
&&	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
)	O
||	O
(	O
(	O
year	int
>=	O
EASTER_MIN	int
)	O
&&	O
(	O
year	int
<=	O
EASTER_MAX	O
)	O
)	O
)	O
)	O
print_all_holidays	function
(	O
FALSE	O
,	O
FALSE	O
)	O
;	O
}	O
}	O
if	O
(	O
is_1month_mode	int
||	O
is_2month_mode	int
)	O
{	O
is_fiscal_year	int
=	O
TRUE	O
;	O
fiscal_month	int
=	O
month	int
;	O
year	int
=	O
act_year	int
;	O
}	O
else	O
if	O
(	O
rc_period_flag	int
&&	O
(	O
rc_forwards_flag	int
||	O
rc_backwards_flag	int
)	O
&&	O
!	O
rc_period_list	int
&&	O
!	O
is_date_given	int
)	O
(	O
void	O
)	O
get_actual_date	function
(	O
)	O
;	O
else	O
if	O
(	O
cal_special_flag	int
)	O
act_day	int
=	O
tmp_ad	int
;	O
}	O
static	O
void	O
fill_year_vector	function
(	O
year	int
)	O
int	O
year	int
;	O
{	O
register	O
int	O
i	int
;	O
register	O
int	O
j	int
;	O
register	O
int	O
count	int
;	O
register	O
int	O
d	int
;	O
register	O
int	O
m	int
=	O
fiscal_month	int
;	O
i	int
=	O
weekday_of_date	function
(	O
DAY_MIN	int
,	O
m	int
,	O
year	int
)	O
;	O
i	int
=	O
day	int
=	O
SYEAR	O
(	O
i	int
,	O
start_day	int
)	O
;	O
j	int
=	O
d	int
=	O
0	int
;	O
if	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
count	int
=	O
day_of_year	function
(	O
DAY_MIN	int
,	O
m	int
,	O
year	int
)	O
-	O
1	int
;	O
else	O
count	int
=	O
0	int
;	O
LOOP	O
{	O
d	int
++	O
;	O
count	int
++	O
;	O
if	O
(	O
!	O
valid_date	function
(	O
d	int
,	O
m	int
,	O
year	int
)	O
)	O
{	O
j	int
++	O
;	O
if	O
(	O
(	O
m	int
<	O
MONTH_MAX	int
)	O
&&	O
(	O
j	int
<	O
MONTH_MAX	int
)	O
)	O
{	O
if	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
i	int
=	O
j	int
*	O
VEC_BLOCK	int
+	O
day	int
;	O
else	O
i	int
=	O
m	int
*	O
VEC_BLOCK	int
+	O
day	int
;	O
d	int
=	O
DAY_MIN	int
;	O
m	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
fiscal_month	int
>	O
MONTH_MIN	int
)	O
{	O
year	int
++	O
;	O
if	O
(	O
j	int
==	O
MONTH_MAX	int
||	O
year	int
>	O
YEAR_MAX	int
)	O
break	O
;	O
i	int
=	O
j	int
*	O
VEC_BLOCK	int
+	O
day	int
;	O
count	int
=	O
d	int
=	O
DAY_MIN	int
;	O
m	int
=	O
MONTH_MIN	int
;	O
}	O
else	O
break	O
;	O
}	O
}	O
if	O
(	O
(	O
year	int
==	O
greg	pointer
->	O
year	int
)	O
&&	O
(	O
m	int
==	O
greg	pointer
->	O
month	int
)	O
&&	O
(	O
(	O
d	int
>=	O
greg	pointer
->	O
first_day	int
)	O
&&	O
(	O
d	int
<=	O
greg	pointer
->	O
last_day	int
)	O
)	O
)	O
i	int
--	O
;	O
else	O
{	O
day	int
++	O
;	O
if	O
(	O
cal_special_flag	int
)	O
year_vector	array
[	O
i	int
-	O
1	int
]	O
=	O
count	int
;	O
else	O
year_vector	array
[	O
i	int
-	O
1	int
]	O
=	O
d	int
;	O
special_vector	array
[	O
i	int
-	O
1	int
]	O
=	O
count	int
;	O
}	O
i	int
++	O
;	O
if	O
(	O
day	int
>	O
DAY_MAX	int
)	O
day	int
=	O
DAY_MIN	int
;	O
}	O
}	O
static	O
Bool	int
print_unhighlighted_date	function
(	O
marker_flag	int
)	O
Bool	int
marker_flag	int
;	O
{	O
if	O
(	O
cal_both_dates_flag	int
)	O
{	O
if	O
(	O
year_vector	array
[	O
day	int
]	O
)	O
{	O
if	O
(	O
marker_flag	int
)	O
{	O
if	O
(	O
use_day_zeroleaded	int
)	O
sprintf	function
(	O
s2	pointer
,	O
"%02d(%03d)"	pointer
,	O
year_vector	array
[	O
day	int
]	O
,	O
special_vector	array
[	O
day	int
]	O
)	O
;	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%2d(%3d)"	pointer
,	O
year_vector	array
[	O
day	int
]	O
,	O
special_vector	array
[	O
day	int
]	O
)	O
;	O
marker_flag	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
use_day_zeroleaded	int
)	O
sprintf	function
(	O
s2	pointer
,	O
" %02d(%03d)"	pointer
,	O
year_vector	array
[	O
day	int
]	O
,	O
special_vector	array
[	O
day	int
]	O
)	O
;	O
else	O
sprintf	function
(	O
s2	pointer
,	O
" %2d(%3d)"	pointer
,	O
year_vector	array
[	O
day	int
]	O
,	O
special_vector	array
[	O
day	int
]	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
marker_flag	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
format_len	int
-	O
1	int
,	O
""	pointer
)	O
;	O
marker_flag	int
=	O
FALSE	O
;	O
}	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
format_len	int
,	O
""	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
year_vector	array
[	O
day	int
]	O
)	O
{	O
if	O
(	O
marker_flag	int
)	O
{	O
if	O
(	O
use_day_zeroleaded	int
)	O
sprintf	function
(	O
s2	pointer
,	O
"%0*d"	pointer
,	O
format_len	int
-	O
1	int
,	O
year_vector	array
[	O
day	int
]	O
)	O
;	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%*d"	pointer
,	O
format_len	int
-	O
1	int
,	O
year_vector	array
[	O
day	int
]	O
)	O
;	O
marker_flag	int
=	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
use_day_zeroleaded	int
)	O
sprintf	function
(	O
s2	pointer
,	O
" %0*d"	pointer
,	O
format_len	int
-	O
1	int
,	O
year_vector	array
[	O
day	int
]	O
)	O
;	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%*d"	pointer
,	O
format_len	int
,	O
year_vector	array
[	O
day	int
]	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
marker_flag	int
)	O
{	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
format_len	int
-	O
1	int
,	O
""	pointer
)	O
;	O
marker_flag	int
=	O
FALSE	O
;	O
}	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%*s"	pointer
,	O
format_len	int
,	O
""	pointer
)	O
;	O
}	O
}	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
return	O
(	O
marker_flag	int
)	O
;	O
}	O
static	O
Bool	int
print_highlighted_date	function
(	O
last_item	int
,	O
marker_flag	int
,	O
hls_start	pointer
,	O
hls_slen	int
,	O
hls_end	pointer
,	O
hls_elen	int
)	O
const	O
Bool	int
last_item	int
;	O
const	O
Bool	int
marker_flag	int
;	O
const	O
char	O
*	O
hls_start	pointer
;	O
const	O
int	O
hls_slen	int
;	O
const	O
char	O
*	O
hls_end	pointer
;	O
const	O
int	O
hls_elen	int
;	O
{	O
if	O
(	O
cal_both_dates_flag	int
)	O
{	O
if	O
(	O
use_day_zeroleaded	int
)	O
sprintf	function
(	O
s2	pointer
,	O
"%s%s%02d(%03d)%s%s"	pointer
,	O
(	O
(	O
(	O
hls_slen	int
>	O
1	int
)	O
&&	O
!	O
marker_flag	int
)	O
?	O
NO_HLS	pointer
:	O
""	pointer
)	O
,	O
hls_start	pointer
,	O
year_vector	array
[	O
day	int
]	O
,	O
special_vector	array
[	O
day	int
]	O
,	O
hls_end	pointer
,	O
(	O
(	O
(	O
hls_elen	int
>	O
1	int
)	O
&&	O
!	O
last_item	int
)	O
?	O
NO_HLS	pointer
:	O
""	pointer
)	O
)	O
;	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%s%s%2d(%3d)%s%s"	pointer
,	O
(	O
(	O
(	O
hls_slen	int
>	O
1	int
)	O
&&	O
!	O
marker_flag	int
)	O
?	O
NO_HLS	pointer
:	O
""	pointer
)	O
,	O
hls_start	pointer
,	O
year_vector	array
[	O
day	int
]	O
,	O
special_vector	array
[	O
day	int
]	O
,	O
hls_end	pointer
,	O
(	O
(	O
(	O
hls_elen	int
>	O
1	int
)	O
&&	O
!	O
last_item	int
)	O
?	O
NO_HLS	pointer
:	O
""	pointer
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
use_day_zeroleaded	int
)	O
sprintf	function
(	O
s2	pointer
,	O
"%s%s%0*d%s%s"	pointer
,	O
(	O
(	O
(	O
hls_slen	int
>	O
1	int
)	O
&&	O
!	O
marker_flag	int
)	O
?	O
NO_HLS	pointer
:	O
""	pointer
)	O
,	O
hls_start	pointer
,	O
format_len	int
-	O
1	int
,	O
year_vector	array
[	O
day	int
]	O
,	O
hls_end	pointer
,	O
(	O
(	O
(	O
hls_elen	int
>	O
1	int
)	O
&&	O
!	O
last_item	int
)	O
?	O
NO_HLS	pointer
:	O
""	pointer
)	O
)	O
;	O
else	O
sprintf	function
(	O
s2	pointer
,	O
"%s%s%*d%s%s"	pointer
,	O
(	O
(	O
(	O
hls_slen	int
>	O
1	int
)	O
&&	O
!	O
marker_flag	int
)	O
?	O
NO_HLS	pointer
:	O
""	pointer
)	O
,	O
hls_start	pointer
,	O
format_len	int
-	O
1	int
,	O
year_vector	array
[	O
day	int
]	O
,	O
hls_end	pointer
,	O
(	O
(	O
(	O
hls_elen	int
>	O
1	int
)	O
&&	O
!	O
last_item	int
)	O
?	O
NO_HLS	pointer
:	O
""	pointer
)	O
)	O
;	O
}	O
strcat	function
(	O
s1	pointer
,	O
s2	pointer
)	O
;	O
return	O
(	O
TRUE	O
)	O
;	O
}	O
