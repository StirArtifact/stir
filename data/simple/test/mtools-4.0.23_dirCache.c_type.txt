static	O
__inline__	O
uint32_t	int
rol	function
(	O
uint32_t	int
arg	int
,	O
int	O
shift	int
)	O
{	O
arg	int
&=	O
0xffffffff	int
;	O
return	O
(	O
arg	int
<<	O
shift	int
)	O
|	O
(	O
arg	int
>>	O
(	O
32	int
-	O
shift	int
)	O
)	O
;	O
}	O
static	O
uint32_t	int
calcHash	function
(	O
wchar_t	int
*	O
name	pointer
)	O
{	O
uint32_t	int
hash	int
;	O
unsigned	O
int	O
i	int
;	O
wint_t	int
c	int
;	O
hash	int
=	O
0	int
;	O
i	int
=	O
0	int
;	O
while	O
(	O
*	O
name	pointer
)	O
{	O
hash	int
=	O
rol	function
(	O
hash	int
,	O
5	int
)	O
;	O
c	int
=	O
towupper	function
(	O
(	O
wint_t	int
)	O
*	O
name	pointer
)	O
;	O
hash	int
^=	O
(	O
c	int
*	O
(	O
c	int
+	O
2	int
)	O
)	O
^	O
(	O
i	int
*	O
(	O
i	int
+	O
2	int
)	O
)	O
;	O
hash	int
&=	O
0xffffffff	int
;	O
i	int
++	O
,	O
name	pointer
++	O
;	O
}	O
hash	int
=	O
hash	int
*	O
(	O
hash	int
+	O
2	int
)	O
;	O
hash	int
^=	O
(	O
hash	int
&	O
0xfff	int
)	O
<<	O
12	int
;	O
hash	int
^=	O
(	O
hash	int
&	O
0xff000	int
)	O
<<	O
24	int
;	O
return	O
hash	int
;	O
}	O
static	O
unsigned	O
int	O
addBit	function
(	O
unsigned	O
int	O
*	O
bitmap	pointer
,	O
unsigned	O
int	O
hash	int
,	O
int	O
checkOnly	int
)	O
{	O
unsigned	O
int	O
bit	int
;	O
int	O
entry	int
;	O
bit	int
=	O
1u	int
<<	O
(	O
hash	int
%	O
BITS_PER_INT	O
)	O
;	O
entry	int
=	O
(	O
hash	int
/	O
BITS_PER_INT	O
)	O
%	O
DC_BITMAP_SIZE	int
;	O
if	O
(	O
checkOnly	int
)	O
return	O
bitmap	pointer
[	O
entry	int
]	O
&	O
bit	int
;	O
else	O
{	O
bitmap	pointer
[	O
entry	int
]	O
|=	O
bit	int
;	O
return	O
1	int
;	O
}	O
}	O
static	O
int	O
_addHash	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
unsigned	O
int	O
hash	int
,	O
int	O
checkOnly	int
)	O
{	O
return	O
addBit	function
(	O
cache	pointer
->	O
bm0	array
,	O
hash	int
,	O
checkOnly	int
)	O
&&	O
addBit	function
(	O
cache	pointer
->	O
bm1	array
,	O
rol	function
(	O
hash	int
,	O
12	int
)	O
,	O
checkOnly	int
)	O
&&	O
addBit	function
(	O
cache	pointer
->	O
bm2	array
,	O
rol	function
(	O
hash	int
,	O
24	int
)	O
,	O
checkOnly	int
)	O
;	O
}	O
static	O
void	O
addNameToHash	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
wchar_t	int
*	O
name	pointer
)	O
{	O
_addHash	function
(	O
cache	pointer
,	O
calcHash	function
(	O
name	pointer
)	O
,	O
0	int
)	O
;	O
}	O
static	O
void	O
hashDce	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
dirCacheEntry_t	struct
*	O
dce	pointer
)	O
{	O
if	O
(	O
dce	pointer
->	O
beginSlot	int
!=	O
cache	pointer
->	O
nrHashed	int
)	O
return	O
;	O
cache	pointer
->	O
nrHashed	int
=	O
dce	pointer
->	O
endSlot	int
;	O
if	O
(	O
dce	pointer
->	O
longName	pointer
)	O
addNameToHash	function
(	O
cache	pointer
,	O
dce	pointer
->	O
longName	pointer
)	O
;	O
addNameToHash	function
(	O
cache	pointer
,	O
dce	pointer
->	O
shortName	pointer
)	O
;	O
}	O
int	O
isHashed	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
wchar_t	int
*	O
name	pointer
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
_addHash	function
(	O
cache	pointer
,	O
calcHash	function
(	O
name	pointer
)	O
,	O
1	int
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
growDirCache	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
unsigned	O
int	O
slot	int
)	O
{	O
if	O
(	O
(	O
int	O
)	O
slot	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Bad slot %d\n"	pointer
,	O
slot	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
cache	pointer
->	O
nr_entries	int
<=	O
slot	int
)	O
{	O
unsigned	O
int	O
i	int
;	O
cache	pointer
->	O
entries	pointer
=	O
realloc	function
(	O
cache	pointer
->	O
entries	pointer
,	O
(	O
slot	int
+	O
1	int
)	O
*	O
2	int
*	O
sizeof	O
(	O
dirCacheEntry_t	struct
*	O
)	O
)	O
;	O
if	O
(	O
!	O
cache	pointer
->	O
entries	pointer
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
cache	pointer
->	O
nr_entries	int
;	O
i	int
<	O
(	O
slot	int
+	O
1	int
)	O
*	O
2	int
;	O
i	int
++	O
)	O
{	O
cache	pointer
->	O
entries	pointer
[	O
i	int
]	O
=	O
0	int
;	O
}	O
cache	pointer
->	O
nr_entries	int
=	O
(	O
slot	int
+	O
1	int
)	O
*	O
2	int
;	O
}	O
return	O
0	int
;	O
}	O
dirCache_t	struct
*	O
allocDirCache	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
unsigned	O
int	O
slot	int
)	O
{	O
dirCache_t	struct
*	O
*	O
dcp	pointer
;	O
if	O
(	O
(	O
int	O
)	O
slot	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Bad slot %d\n"	pointer
,	O
slot	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
dcp	pointer
=	O
getDirCacheP	function
(	O
Stream	pointer
)	O
;	O
if	O
(	O
!	O
*	O
dcp	pointer
)	O
{	O
*	O
dcp	pointer
=	O
New	O
(	O
dirCache_t	struct
)	O
;	O
if	O
(	O
!	O
*	O
dcp	pointer
)	O
return	O
0	int
;	O
(	O
*	O
dcp	pointer
)	O
->	O
entries	pointer
=	O
NewArray	O
(	O
(	O
slot	int
+	O
1	int
)	O
*	O
2	int
+	O
5	int
,	O
dirCacheEntry_t	struct
*	O
)	O
;	O
if	O
(	O
!	O
(	O
*	O
dcp	pointer
)	O
->	O
entries	pointer
)	O
{	O
free	function
(	O
*	O
dcp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
(	O
*	O
dcp	pointer
)	O
->	O
nr_entries	int
=	O
(	O
slot	int
+	O
1	int
)	O
*	O
2	int
;	O
memset	function
(	O
(	O
*	O
dcp	pointer
)	O
->	O
bm0	array
,	O
0	int
,	O
sizeof	O
(	O
(	O
*	O
dcp	pointer
)	O
->	O
bm0	array
)	O
)	O
;	O
memset	function
(	O
(	O
*	O
dcp	pointer
)	O
->	O
bm1	array
,	O
0	int
,	O
sizeof	O
(	O
(	O
*	O
dcp	pointer
)	O
->	O
bm1	array
)	O
)	O
;	O
memset	function
(	O
(	O
*	O
dcp	pointer
)	O
->	O
bm2	array
,	O
0	int
,	O
sizeof	O
(	O
(	O
*	O
dcp	pointer
)	O
->	O
bm1	array
)	O
)	O
;	O
(	O
*	O
dcp	pointer
)	O
->	O
nrHashed	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
growDirCache	function
(	O
*	O
dcp	pointer
,	O
slot	int
)	O
<	O
0	int
)	O
return	O
0	int
;	O
return	O
*	O
dcp	pointer
;	O
}	O
static	O
int	O
freeDirCacheRange	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
unsigned	O
int	O
beginSlot	int
,	O
unsigned	O
int	O
endSlot	int
)	O
{	O
dirCacheEntry_t	struct
*	O
entry	int
;	O
unsigned	O
int	O
clearBegin	int
;	O
unsigned	O
int	O
clearEnd	int
;	O
unsigned	O
int	O
i	int
;	O
if	O
(	O
endSlot	int
<	O
beginSlot	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Bad slots %d %d in free range\n"	pointer
,	O
beginSlot	int
,	O
endSlot	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
while	O
(	O
beginSlot	int
<	O
endSlot	int
)	O
{	O
entry	int
=	O
cache	pointer
->	O
entries	pointer
[	O
beginSlot	int
]	O
;	O
if	O
(	O
!	O
entry	int
)	O
{	O
beginSlot	int
++	O
;	O
continue	O
;	O
}	O
assert	O
(	O
entry	int
->	O
beginSlot	int
==	O
beginSlot	int
)	O
;	O
clearEnd	int
=	O
entry	int
->	O
endSlot	int
;	O
if	O
(	O
clearEnd	int
>	O
endSlot	int
)	O
clearEnd	int
=	O
endSlot	int
;	O
clearBegin	int
=	O
beginSlot	int
;	O
for	O
(	O
i	int
=	O
clearBegin	int
;	O
i	int
<	O
clearEnd	int
;	O
i	int
++	O
)	O
cache	pointer
->	O
entries	pointer
[	O
i	int
]	O
=	O
0	int
;	O
entry	int
->	O
beginSlot	int
=	O
clearEnd	int
;	O
if	O
(	O
entry	int
->	O
beginSlot	int
==	O
entry	int
->	O
endSlot	int
)	O
{	O
int	O
needWriteEnd	int
=	O
0	int
;	O
if	O
(	O
entry	int
->	O
endMarkPos	int
!=	O
-	O
1	int
&&	O
entry	int
->	O
endMarkPos	int
<	O
(	O
int	O
)	O
beginSlot	int
)	O
needWriteEnd	int
=	O
1	int
;	O
if	O
(	O
entry	int
->	O
longName	pointer
)	O
free	function
(	O
entry	int
->	O
longName	pointer
)	O
;	O
if	O
(	O
entry	int
->	O
shortName	pointer
)	O
free	function
(	O
entry	int
->	O
shortName	pointer
)	O
;	O
free	function
(	O
entry	int
)	O
;	O
if	O
(	O
needWriteEnd	int
)	O
{	O
return	O
(	O
int	O
)	O
beginSlot	int
;	O
}	O
}	O
beginSlot	int
=	O
clearEnd	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
dirCacheEntry_t	struct
*	O
allocDirCacheEntry	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
unsigned	O
int	O
beginSlot	int
,	O
unsigned	O
int	O
endSlot	int
,	O
dirCacheEntryType_t	enum
type	enum
)	O
{	O
dirCacheEntry_t	struct
*	O
entry	int
;	O
unsigned	O
int	O
i	int
;	O
if	O
(	O
growDirCache	function
(	O
cache	pointer
,	O
endSlot	int
)	O
<	O
0	int
)	O
return	O
0	int
;	O
entry	int
=	O
New	O
(	O
dirCacheEntry_t	struct
)	O
;	O
if	O
(	O
!	O
entry	int
)	O
return	O
0	int
;	O
entry	int
->	O
type	enum
=	O
type	enum
;	O
entry	int
->	O
longName	pointer
=	O
0	int
;	O
entry	int
->	O
shortName	pointer
=	O
0	int
;	O
entry	int
->	O
beginSlot	int
=	O
beginSlot	int
;	O
entry	int
->	O
endSlot	int
=	O
endSlot	int
;	O
entry	int
->	O
endMarkPos	int
=	O
-	O
1	int
;	O
freeDirCacheRange	function
(	O
cache	pointer
,	O
beginSlot	int
,	O
endSlot	int
)	O
;	O
for	O
(	O
i	int
=	O
beginSlot	int
;	O
i	int
<	O
endSlot	int
;	O
i	int
++	O
)	O
{	O
cache	pointer
->	O
entries	pointer
[	O
i	int
]	O
=	O
entry	int
;	O
}	O
return	O
entry	int
;	O
}	O
dirCacheEntry_t	struct
*	O
addUsedEntry	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
unsigned	O
int	O
beginSlot	int
,	O
unsigned	O
int	O
endSlot	int
,	O
wchar_t	int
*	O
longName	pointer
,	O
wchar_t	int
*	O
shortName	pointer
,	O
struct	O
directory	struct
*	O
dir	pointer
)	O
{	O
dirCacheEntry_t	struct
*	O
entry	int
;	O
if	O
(	O
endSlot	int
<	O
beginSlot	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Bad slots %d %d in add used entry\n"	pointer
,	O
beginSlot	int
,	O
endSlot	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
entry	int
=	O
allocDirCacheEntry	function
(	O
cache	pointer
,	O
beginSlot	int
,	O
endSlot	int
,	O
DCET_USED	int
)	O
;	O
if	O
(	O
!	O
entry	int
)	O
return	O
0	int
;	O
entry	int
->	O
beginSlot	int
=	O
beginSlot	int
;	O
entry	int
->	O
endSlot	int
=	O
endSlot	int
;	O
if	O
(	O
longName	pointer
)	O
entry	int
->	O
longName	pointer
=	O
wcsdup	function
(	O
longName	pointer
)	O
;	O
entry	int
->	O
shortName	pointer
=	O
wcsdup	function
(	O
shortName	pointer
)	O
;	O
entry	int
->	O
dir	pointer
=	O
*	O
dir	pointer
;	O
hashDce	function
(	O
cache	pointer
,	O
entry	int
)	O
;	O
return	O
entry	int
;	O
}	O
static	O
void	O
mergeFreeSlots	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
unsigned	O
int	O
slot	int
)	O
{	O
dirCacheEntry_t	struct
*	O
previous	pointer
,	O
*	O
next	pointer
;	O
unsigned	O
int	O
i	int
;	O
if	O
(	O
slot	int
==	O
0	int
)	O
return	O
;	O
previous	pointer
=	O
cache	pointer
->	O
entries	pointer
[	O
slot	int
-	O
1	int
]	O
;	O
next	pointer
=	O
cache	pointer
->	O
entries	pointer
[	O
slot	int
]	O
;	O
if	O
(	O
next	pointer
&&	O
next	pointer
->	O
type	enum
==	O
DCET_FREE	int
&&	O
previous	pointer
&&	O
previous	pointer
->	O
type	enum
==	O
DCET_FREE	int
)	O
{	O
for	O
(	O
i	int
=	O
next	pointer
->	O
beginSlot	int
;	O
i	int
<	O
next	pointer
->	O
endSlot	int
;	O
i	int
++	O
)	O
cache	pointer
->	O
entries	pointer
[	O
i	int
]	O
=	O
previous	pointer
;	O
previous	pointer
->	O
endSlot	int
=	O
next	pointer
->	O
endSlot	int
;	O
previous	pointer
->	O
endMarkPos	int
=	O
next	pointer
->	O
endMarkPos	int
;	O
free	function
(	O
next	pointer
)	O
;	O
}	O
}	O
dirCacheEntry_t	struct
*	O
addFreeEndEntry	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
unsigned	O
int	O
beginSlot	int
,	O
unsigned	O
int	O
endSlot	int
,	O
int	O
isAtEnd	int
)	O
{	O
dirCacheEntry_t	struct
*	O
entry	int
;	O
if	O
(	O
beginSlot	int
<	O
cache	pointer
->	O
nrHashed	int
)	O
cache	pointer
->	O
nrHashed	int
=	O
beginSlot	int
;	O
if	O
(	O
endSlot	int
<	O
beginSlot	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Bad slots %d %d in add free entry\n"	pointer
,	O
beginSlot	int
,	O
endSlot	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
endSlot	int
==	O
beginSlot	int
)	O
return	O
0	int
;	O
entry	int
=	O
allocDirCacheEntry	function
(	O
cache	pointer
,	O
beginSlot	int
,	O
endSlot	int
,	O
DCET_FREE	int
)	O
;	O
if	O
(	O
isAtEnd	int
)	O
entry	int
->	O
endMarkPos	int
=	O
(	O
int	O
)	O
beginSlot	int
;	O
mergeFreeSlots	function
(	O
cache	pointer
,	O
beginSlot	int
)	O
;	O
mergeFreeSlots	function
(	O
cache	pointer
,	O
endSlot	int
)	O
;	O
return	O
cache	pointer
->	O
entries	pointer
[	O
beginSlot	int
]	O
;	O
}	O
dirCacheEntry_t	struct
*	O
addFreeEntry	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
unsigned	O
int	O
beginSlot	int
,	O
unsigned	O
int	O
endSlot	int
)	O
{	O
return	O
addFreeEndEntry	function
(	O
cache	pointer
,	O
beginSlot	int
,	O
endSlot	int
,	O
0	int
)	O
;	O
}	O
dirCacheEntry_t	struct
*	O
addEndEntry	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
unsigned	O
int	O
pos	array
)	O
{	O
return	O
allocDirCacheEntry	function
(	O
cache	pointer
,	O
pos	array
,	O
pos	array
+	O
1u	int
,	O
DCET_END	int
)	O
;	O
}	O
dirCacheEntry_t	struct
*	O
lookupInDircache	function
(	O
dirCache_t	struct
*	O
cache	pointer
,	O
unsigned	O
int	O
pos	array
)	O
{	O
if	O
(	O
growDirCache	function
(	O
cache	pointer
,	O
pos	array
+	O
1	int
)	O
<	O
0	int
)	O
return	O
0	int
;	O
return	O
cache	pointer
->	O
entries	pointer
[	O
pos	array
]	O
;	O
}	O
void	O
freeDirCache	function
(	O
Stream_t	struct
*	O
Stream	pointer
)	O
{	O
dirCache_t	struct
*	O
cache	pointer
,	O
*	O
*	O
dcp	pointer
;	O
dcp	pointer
=	O
getDirCacheP	function
(	O
Stream	pointer
)	O
;	O
cache	pointer
=	O
*	O
dcp	pointer
;	O
if	O
(	O
cache	pointer
)	O
{	O
int	O
n	pointer
;	O
n	pointer
=	O
freeDirCacheRange	function
(	O
cache	pointer
,	O
0	int
,	O
cache	pointer
->	O
nr_entries	int
)	O
;	O
if	O
(	O
n	pointer
>=	O
0	int
)	O
low_level_dir_write_end	function
(	O
Stream	pointer
,	O
n	pointer
)	O
;	O
free	function
(	O
cache	pointer
)	O
;	O
*	O
dcp	pointer
=	O
0	int
;	O
}	O
}	O
