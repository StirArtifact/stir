extern	O
char	O
*	O
getwd	function
(	O
)	O
;	O
extern	O
char	O
*	O
xmalloc	function
(	O
)	O
;	O
int	O
com_list	function
(	O
)	O
,	O
com_view	function
(	O
)	O
,	O
com_rename	function
(	O
)	O
,	O
com_stat	function
(	O
)	O
,	O
com_pwd	function
(	O
)	O
;	O
int	O
com_delete	function
(	O
)	O
,	O
com_help	function
(	O
)	O
,	O
com_cd	function
(	O
)	O
,	O
com_quit	function
(	O
)	O
;	O
typedef	O
struct	O
{	O
char	O
*	O
name	pointer
;	O
Function	function
*	O
func	pointer
;	O
char	O
*	O
doc	pointer
;	O
}	O
COMMAND	struct
;	O
COMMAND	struct
commands	array
[	O
]	O
=	O
{	O
{	O
"cd"	pointer
,	O
com_cd	function
,	O
"Change to directory DIR"	pointer
}	O
,	O
{	O
"delete"	pointer
,	O
com_delete	function
,	O
"Delete FILE"	pointer
}	O
,	O
{	O
"help"	pointer
,	O
com_help	function
,	O
"Display this text"	pointer
}	O
,	O
{	O
"?"	pointer
,	O
com_help	function
,	O
"Synonym for `help'"	pointer
}	O
,	O
{	O
"list"	pointer
,	O
com_list	function
,	O
"List files in DIR"	pointer
}	O
,	O
{	O
"ls"	pointer
,	O
com_list	function
,	O
"Synonym for `list'"	pointer
}	O
,	O
{	O
"pwd"	pointer
,	O
com_pwd	function
,	O
"Print the current working directory"	pointer
}	O
,	O
{	O
"quit"	pointer
,	O
com_quit	function
,	O
"Quit using Fileman"	pointer
}	O
,	O
{	O
"rename"	pointer
,	O
com_rename	function
,	O
"Rename FILE to NEWNAME"	pointer
}	O
,	O
{	O
"stat"	pointer
,	O
com_stat	function
,	O
"Print out statistics on FILE"	pointer
}	O
,	O
{	O
"view"	pointer
,	O
com_view	function
,	O
"View the contents of FILE"	pointer
}	O
,	O
{	O
(	O
char	O
*	O
)	O
NULL	O
,	O
(	O
Function	function
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
}	O
;	O
char	O
*	O
stripwhite	function
(	O
)	O
;	O
COMMAND	struct
*	O
find_command	function
(	O
)	O
;	O
char	O
*	O
progname	pointer
;	O
int	O
done	int
;	O
char	O
*	O
dupstr	function
(	O
s	int
)	O
int	O
s	int
;	O
{	O
char	O
*	O
r	pointer
;	O
r	pointer
=	O
xmalloc	function
(	O
strlen	O
(	O
s	int
)	O
+	O
1	int
)	O
;	O
strcpy	O
(	O
r	pointer
,	O
s	int
)	O
;	O
return	O
(	O
r	pointer
)	O
;	O
}	O
main	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
char	O
*	O
line	pointer
,	O
*	O
s	int
;	O
progname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
initialize_readline	function
(	O
)	O
;	O
for	O
(	O
;	O
done	int
==	O
0	int
;	O
)	O
{	O
line	pointer
=	O
readline	function
(	O
"FileMan: "	pointer
)	O
;	O
if	O
(	O
!	O
line	pointer
)	O
break	O
;	O
s	int
=	O
stripwhite	function
(	O
line	pointer
)	O
;	O
if	O
(	O
*	O
s	int
)	O
{	O
add_history	function
(	O
s	int
)	O
;	O
execute_line	function
(	O
s	int
)	O
;	O
}	O
free	function
(	O
line	pointer
)	O
;	O
}	O
exit	O
(	O
0	int
)	O
;	O
}	O
int	O
execute_line	function
(	O
line	pointer
)	O
char	O
*	O
line	pointer
;	O
{	O
register	O
int	O
i	int
;	O
COMMAND	struct
*	O
command	pointer
;	O
char	O
*	O
word	pointer
;	O
i	int
=	O
0	int
;	O
while	O
(	O
line	pointer
[	O
i	int
]	O
&&	O
whitespace	O
(	O
line	pointer
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
word	pointer
=	O
line	pointer
+	O
i	int
;	O
while	O
(	O
line	pointer
[	O
i	int
]	O
&&	O
!	O
whitespace	O
(	O
line	pointer
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
if	O
(	O
line	pointer
[	O
i	int
]	O
)	O
line	pointer
[	O
i	int
++	O
]	O
=	O
'\0'	O
;	O
command	pointer
=	O
find_command	function
(	O
word	pointer
)	O
;	O
if	O
(	O
!	O
command	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: No such command for FileMan.\n"	pointer
,	O
word	pointer
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
while	O
(	O
whitespace	O
(	O
line	pointer
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
word	pointer
=	O
line	pointer
+	O
i	int
;	O
return	O
(	O
(	O
*	O
(	O
command	pointer
->	O
func	pointer
)	O
)	O
(	O
word	pointer
)	O
)	O
;	O
}	O
COMMAND	struct
*	O
find_command	function
(	O
name	pointer
)	O
char	O
*	O
name	pointer
;	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
commands	array
[	O
i	int
]	O
.	O
name	pointer
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	O
(	O
name	pointer
,	O
commands	array
[	O
i	int
]	O
.	O
name	pointer
)	O
==	O
0	int
)	O
return	O
(	O
&	O
commands	array
[	O
i	int
]	O
)	O
;	O
return	O
(	O
(	O
COMMAND	struct
*	O
)	O
NULL	O
)	O
;	O
}	O
char	O
*	O
stripwhite	function
(	O
string	pointer
)	O
char	O
*	O
string	pointer
;	O
{	O
register	O
char	O
*	O
s	int
,	O
*	O
t	pointer
;	O
for	O
(	O
s	int
=	O
string	pointer
;	O
whitespace	O
(	O
*	O
s	int
)	O
;	O
s	int
++	O
)	O
;	O
if	O
(	O
*	O
s	int
==	O
0	int
)	O
return	O
(	O
s	int
)	O
;	O
t	pointer
=	O
s	int
+	O
strlen	O
(	O
s	int
)	O
-	O
1	int
;	O
while	O
(	O
t	pointer
>	O
s	int
&&	O
whitespace	O
(	O
*	O
t	pointer
)	O
)	O
t	pointer
--	O
;	O
*	O
++	O
t	pointer
=	O
'\0'	O
;	O
return	O
s	int
;	O
}	O
char	O
*	O
command_generator	function
(	O
)	O
;	O
char	O
*	O
*	O
fileman_completion	function
(	O
)	O
;	O
initialize_readline	function
(	O
)	O
{	O
rl_readline_name	pointer
=	O
"FileMan"	pointer
;	O
rl_attempted_completion_function	pointer
=	O
(	O
CPPFunction	function
*	O
)	O
fileman_completion	function
;	O
}	O
char	O
*	O
*	O
fileman_completion	function
(	O
text	pointer
,	O
start	int
,	O
end	int
)	O
char	O
*	O
text	pointer
;	O
int	O
start	int
,	O
end	int
;	O
{	O
char	O
*	O
*	O
matches	pointer
;	O
matches	pointer
=	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
if	O
(	O
start	int
==	O
0	int
)	O
matches	pointer
=	O
completion_matches	function
(	O
text	pointer
,	O
command_generator	function
)	O
;	O
return	O
(	O
matches	pointer
)	O
;	O
}	O
char	O
*	O
command_generator	function
(	O
text	pointer
,	O
state	int
)	O
char	O
*	O
text	pointer
;	O
int	O
state	int
;	O
{	O
static	O
int	O
list_index	int
,	O
len	pointer
;	O
char	O
*	O
name	pointer
;	O
if	O
(	O
!	O
state	int
)	O
{	O
list_index	int
=	O
0	int
;	O
len	pointer
=	O
strlen	O
(	O
text	pointer
)	O
;	O
}	O
while	O
(	O
name	pointer
=	O
commands	array
[	O
list_index	int
]	O
.	O
name	pointer
)	O
{	O
list_index	int
++	O
;	O
if	O
(	O
strncmp	O
(	O
name	pointer
,	O
text	pointer
,	O
len	pointer
)	O
==	O
0	int
)	O
return	O
(	O
dupstr	function
(	O
name	pointer
)	O
)	O
;	O
}	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
static	O
char	O
syscom	array
[	O
1024	int
]	O
;	O
com_list	function
(	O
arg	pointer
)	O
char	O
*	O
arg	pointer
;	O
{	O
if	O
(	O
!	O
arg	pointer
)	O
arg	pointer
=	O
""	pointer
;	O
sprintf	function
(	O
syscom	array
,	O
"ls -FClg %s"	pointer
,	O
arg	pointer
)	O
;	O
return	O
(	O
system	function
(	O
syscom	array
)	O
)	O
;	O
}	O
com_view	function
(	O
arg	pointer
)	O
char	O
*	O
arg	pointer
;	O
{	O
if	O
(	O
!	O
valid_argument	function
(	O
"view"	pointer
,	O
arg	pointer
)	O
)	O
return	O
1	int
;	O
sprintf	function
(	O
syscom	array
,	O
"more %s"	pointer
,	O
arg	pointer
)	O
;	O
return	O
(	O
system	function
(	O
syscom	array
)	O
)	O
;	O
}	O
com_rename	function
(	O
arg	pointer
)	O
char	O
*	O
arg	pointer
;	O
{	O
too_dangerous	function
(	O
"rename"	pointer
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
com_stat	function
(	O
arg	pointer
)	O
char	O
*	O
arg	pointer
;	O
{	O
struct	O
stat	struct
finfo	struct
;	O
if	O
(	O
!	O
valid_argument	function
(	O
"stat"	pointer
,	O
arg	pointer
)	O
)	O
return	O
(	O
1	int
)	O
;	O
if	O
(	O
stat	struct
(	O
arg	pointer
,	O
&	O
finfo	struct
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
arg	pointer
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
printf	function
(	O
"Statistics for `%s':\n"	pointer
,	O
arg	pointer
)	O
;	O
printf	function
(	O
"%s has %d link%s, and is %d byte%s in length.\n"	pointer
,	O
arg	pointer
,	O
finfo	struct
.	O
st_nlink	long
,	O
(	O
finfo	struct
.	O
st_nlink	long
==	O
1	int
)	O
?	O
""	pointer
:	O
"s"	pointer
,	O
finfo	struct
.	O
st_size	long
,	O
(	O
finfo	struct
.	O
st_size	long
==	O
1	int
)	O
?	O
""	pointer
:	O
"s"	pointer
)	O
;	O
printf	function
(	O
"Inode Last Change at: %s"	pointer
,	O
ctime	function
(	O
&	O
finfo	struct
.	O
st_ctime	O
)	O
)	O
;	O
printf	function
(	O
"      Last access at: %s"	pointer
,	O
ctime	function
(	O
&	O
finfo	struct
.	O
st_atime	O
)	O
)	O
;	O
printf	function
(	O
"    Last modified at: %s"	pointer
,	O
ctime	function
(	O
&	O
finfo	struct
.	O
st_mtime	O
)	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
com_delete	function
(	O
arg	pointer
)	O
char	O
*	O
arg	pointer
;	O
{	O
too_dangerous	function
(	O
"delete"	pointer
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
com_help	function
(	O
arg	pointer
)	O
char	O
*	O
arg	pointer
;	O
{	O
register	O
int	O
i	int
;	O
int	O
printed	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
commands	array
[	O
i	int
]	O
.	O
name	pointer
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
*	O
arg	pointer
||	O
(	O
strcmp	O
(	O
arg	pointer
,	O
commands	array
[	O
i	int
]	O
.	O
name	pointer
)	O
==	O
0	int
)	O
)	O
{	O
printf	function
(	O
"%s\t\t%s.\n"	pointer
,	O
commands	array
[	O
i	int
]	O
.	O
name	pointer
,	O
commands	array
[	O
i	int
]	O
.	O
doc	pointer
)	O
;	O
printed	int
++	O
;	O
}	O
}	O
if	O
(	O
!	O
printed	int
)	O
{	O
printf	function
(	O
"No commands match `%s'.  Possibilties are:\n"	pointer
,	O
arg	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
commands	array
[	O
i	int
]	O
.	O
name	pointer
;	O
i	int
++	O
)	O
{	O
if	O
(	O
printed	int
==	O
6	int
)	O
{	O
printed	int
=	O
0	int
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
printf	function
(	O
"%s\t"	pointer
,	O
commands	array
[	O
i	int
]	O
.	O
name	pointer
)	O
;	O
printed	int
++	O
;	O
}	O
if	O
(	O
printed	int
)	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
com_cd	function
(	O
arg	pointer
)	O
char	O
*	O
arg	pointer
;	O
{	O
if	O
(	O
chdir	function
(	O
arg	pointer
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
arg	pointer
)	O
;	O
return	O
1	int
;	O
}	O
com_pwd	function
(	O
""	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
com_pwd	function
(	O
ignore	int
)	O
char	O
*	O
ignore	int
;	O
{	O
char	O
dir	array
[	O
1024	int
]	O
,	O
*	O
s	int
;	O
s	int
=	O
getwd	function
(	O
dir	array
)	O
;	O
if	O
(	O
s	int
==	O
0	int
)	O
{	O
printf	function
(	O
"Error getting pwd: %s\n"	pointer
,	O
dir	array
)	O
;	O
return	O
1	int
;	O
}	O
printf	function
(	O
"Current directory is %s\n"	pointer
,	O
dir	array
)	O
;	O
return	O
0	int
;	O
}	O
com_quit	function
(	O
arg	pointer
)	O
char	O
*	O
arg	pointer
;	O
{	O
done	int
=	O
1	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
too_dangerous	function
(	O
caller	pointer
)	O
char	O
*	O
caller	pointer
;	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Too dangerous for me to distribute.  Write it yourself.\n"	pointer
,	O
caller	pointer
)	O
;	O
}	O
int	O
valid_argument	function
(	O
caller	pointer
,	O
arg	pointer
)	O
char	O
*	O
caller	pointer
,	O
*	O
arg	pointer
;	O
{	O
if	O
(	O
!	O
arg	pointer
||	O
!	O
*	O
arg	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Argument required.\n"	pointer
,	O
caller	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
return	O
(	O
1	int
)	O
;	O
}	O
