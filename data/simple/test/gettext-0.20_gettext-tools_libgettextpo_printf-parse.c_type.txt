int	O
PRINTF_PARSE	O
(	O
const	O
CHAR_T	char
*	O
format	O
,	O
DIRECTIVES	O
*	O
d	O
,	O
arguments	O
*	O
a	O
)	O
{	O
const	O
CHAR_T	char
*	O
cp	O
=	O
format	O
;	O
size_t	O
arg_posn	O
=	O
0	int
;	O
size_t	O
d_allocated	O
;	O
size_t	O
a_allocated	O
;	O
size_t	O
max_width_length	O
=	O
0	int
;	O
size_t	O
max_precision_length	O
=	O
0	int
;	O
d	O
->	O
count	O
=	O
0	int
;	O
d_allocated	O
=	O
N_DIRECT_ALLOC_DIRECTIVES	O
;	O
d	O
->	O
dir	O
=	O
d	O
->	O
direct_alloc_dir	O
;	O
a	O
->	O
count	O
=	O
0	int
;	O
a_allocated	O
=	O
N_DIRECT_ALLOC_ARGUMENTS	O
;	O
a	O
->	O
arg	O
=	O
a	O
->	O
direct_alloc_arg	O
;	O
while	O
(	O
*	O
cp	O
!=	O
'\0'	O
)	O
{	O
CHAR_T	char
c	O
=	O
*	O
cp	O
++	O
;	O
if	O
(	O
c	O
==	O
'%'	O
)	O
{	O
size_t	O
arg_index	O
=	O
ARG_NONE	O
;	O
DIRECTIVE	O
*	O
dp	O
=	O
&	O
d	O
->	O
dir	O
[	O
d	O
->	O
count	O
]	O
;	O
dp	O
->	O
dir_start	O
=	O
cp	O
-	O
1	int
;	O
dp	O
->	O
flags	O
=	O
0	int
;	O
dp	O
->	O
width_start	O
=	O
NULL	O
;	O
dp	O
->	O
width_end	O
=	O
NULL	O
;	O
dp	O
->	O
width_arg_index	O
=	O
ARG_NONE	O
;	O
dp	O
->	O
precision_start	O
=	O
NULL	O
;	O
dp	O
->	O
precision_end	O
=	O
NULL	O
;	O
dp	O
->	O
precision_arg_index	O
=	O
ARG_NONE	O
;	O
dp	O
->	O
arg_index	O
=	O
ARG_NONE	O
;	O
if	O
(	O
*	O
cp	O
>=	O
'0'	O
&&	O
*	O
cp	O
<=	O
'9'	O
)	O
{	O
const	O
CHAR_T	char
*	O
np	O
;	O
for	O
(	O
np	O
=	O
cp	O
;	O
*	O
np	O
>=	O
'0'	O
&&	O
*	O
np	O
<=	O
'9'	O
;	O
np	O
++	O
)	O
;	O
if	O
(	O
*	O
np	O
==	O
'$'	O
)	O
{	O
size_t	O
n	O
=	O
0	int
;	O
for	O
(	O
np	O
=	O
cp	O
;	O
*	O
np	O
>=	O
'0'	O
&&	O
*	O
np	O
<=	O
'9'	O
;	O
np	O
++	O
)	O
n	O
=	O
xsum	O
(	O
xtimes	O
(	O
n	O
,	O
10	int
)	O
,	O
*	O
np	O
-	O
'0'	O
)	O
;	O
if	O
(	O
n	O
==	O
0	int
)	O
goto	O
error	O
;	O
if	O
(	O
size_overflow_p	O
(	O
n	O
)	O
)	O
goto	O
error	O
;	O
arg_index	O
=	O
n	O
-	O
1	int
;	O
cp	O
=	O
np	O
+	O
1	int
;	O
}	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
*	O
cp	O
==	O
'\''	O
)	O
{	O
dp	O
->	O
flags	O
|=	O
FLAG_GROUP	O
;	O
cp	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
cp	O
==	O
'-'	O
)	O
{	O
dp	O
->	O
flags	O
|=	O
FLAG_LEFT	O
;	O
cp	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
cp	O
==	O
'+'	O
)	O
{	O
dp	O
->	O
flags	O
|=	O
FLAG_SHOWSIGN	O
;	O
cp	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
cp	O
==	O
' '	O
)	O
{	O
dp	O
->	O
flags	O
|=	O
FLAG_SPACE	O
;	O
cp	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
cp	O
==	O
'#'	O
)	O
{	O
dp	O
->	O
flags	O
|=	O
FLAG_ALT	O
;	O
cp	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
cp	O
==	O
'0'	O
)	O
{	O
dp	O
->	O
flags	O
|=	O
FLAG_ZERO	O
;	O
cp	O
++	O
;	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
*	O
cp	O
==	O
'*'	O
)	O
{	O
dp	O
->	O
width_start	O
=	O
cp	O
;	O
cp	O
++	O
;	O
dp	O
->	O
width_end	O
=	O
cp	O
;	O
if	O
(	O
max_width_length	O
<	O
1	int
)	O
max_width_length	O
=	O
1	int
;	O
if	O
(	O
*	O
cp	O
>=	O
'0'	O
&&	O
*	O
cp	O
<=	O
'9'	O
)	O
{	O
const	O
CHAR_T	char
*	O
np	O
;	O
for	O
(	O
np	O
=	O
cp	O
;	O
*	O
np	O
>=	O
'0'	O
&&	O
*	O
np	O
<=	O
'9'	O
;	O
np	O
++	O
)	O
;	O
if	O
(	O
*	O
np	O
==	O
'$'	O
)	O
{	O
size_t	O
n	O
=	O
0	int
;	O
for	O
(	O
np	O
=	O
cp	O
;	O
*	O
np	O
>=	O
'0'	O
&&	O
*	O
np	O
<=	O
'9'	O
;	O
np	O
++	O
)	O
n	O
=	O
xsum	O
(	O
xtimes	O
(	O
n	O
,	O
10	int
)	O
,	O
*	O
np	O
-	O
'0'	O
)	O
;	O
if	O
(	O
n	O
==	O
0	int
)	O
goto	O
error	O
;	O
if	O
(	O
size_overflow_p	O
(	O
n	O
)	O
)	O
goto	O
error	O
;	O
dp	O
->	O
width_arg_index	O
=	O
n	O
-	O
1	int
;	O
cp	O
=	O
np	O
+	O
1	int
;	O
}	O
}	O
if	O
(	O
dp	O
->	O
width_arg_index	O
==	O
ARG_NONE	O
)	O
{	O
dp	O
->	O
width_arg_index	O
=	O
arg_posn	O
++	O
;	O
if	O
(	O
dp	O
->	O
width_arg_index	O
==	O
ARG_NONE	O
)	O
goto	O
error	O
;	O
}	O
REGISTER_ARG	O
(	O
dp	O
->	O
width_arg_index	O
,	O
TYPE_INT	O
)	O
;	O
}	O
else	O
if	O
(	O
*	O
cp	O
>=	O
'0'	O
&&	O
*	O
cp	O
<=	O
'9'	O
)	O
{	O
size_t	O
width_length	O
;	O
dp	O
->	O
width_start	O
=	O
cp	O
;	O
for	O
(	O
;	O
*	O
cp	O
>=	O
'0'	O
&&	O
*	O
cp	O
<=	O
'9'	O
;	O
cp	O
++	O
)	O
;	O
dp	O
->	O
width_end	O
=	O
cp	O
;	O
width_length	O
=	O
dp	O
->	O
width_end	O
-	O
dp	O
->	O
width_start	O
;	O
if	O
(	O
max_width_length	O
<	O
width_length	O
)	O
max_width_length	O
=	O
width_length	O
;	O
}	O
if	O
(	O
*	O
cp	O
==	O
'.'	O
)	O
{	O
cp	O
++	O
;	O
if	O
(	O
*	O
cp	O
==	O
'*'	O
)	O
{	O
dp	O
->	O
precision_start	O
=	O
cp	O
-	O
1	int
;	O
cp	O
++	O
;	O
dp	O
->	O
precision_end	O
=	O
cp	O
;	O
if	O
(	O
max_precision_length	O
<	O
2	int
)	O
max_precision_length	O
=	O
2	int
;	O
if	O
(	O
*	O
cp	O
>=	O
'0'	O
&&	O
*	O
cp	O
<=	O
'9'	O
)	O
{	O
const	O
CHAR_T	char
*	O
np	O
;	O
for	O
(	O
np	O
=	O
cp	O
;	O
*	O
np	O
>=	O
'0'	O
&&	O
*	O
np	O
<=	O
'9'	O
;	O
np	O
++	O
)	O
;	O
if	O
(	O
*	O
np	O
==	O
'$'	O
)	O
{	O
size_t	O
n	O
=	O
0	int
;	O
for	O
(	O
np	O
=	O
cp	O
;	O
*	O
np	O
>=	O
'0'	O
&&	O
*	O
np	O
<=	O
'9'	O
;	O
np	O
++	O
)	O
n	O
=	O
xsum	O
(	O
xtimes	O
(	O
n	O
,	O
10	int
)	O
,	O
*	O
np	O
-	O
'0'	O
)	O
;	O
if	O
(	O
n	O
==	O
0	int
)	O
goto	O
error	O
;	O
if	O
(	O
size_overflow_p	O
(	O
n	O
)	O
)	O
goto	O
error	O
;	O
dp	O
->	O
precision_arg_index	O
=	O
n	O
-	O
1	int
;	O
cp	O
=	O
np	O
+	O
1	int
;	O
}	O
}	O
if	O
(	O
dp	O
->	O
precision_arg_index	O
==	O
ARG_NONE	O
)	O
{	O
dp	O
->	O
precision_arg_index	O
=	O
arg_posn	O
++	O
;	O
if	O
(	O
dp	O
->	O
precision_arg_index	O
==	O
ARG_NONE	O
)	O
goto	O
error	O
;	O
}	O
REGISTER_ARG	O
(	O
dp	O
->	O
precision_arg_index	O
,	O
TYPE_INT	O
)	O
;	O
}	O
else	O
{	O
size_t	O
precision_length	O
;	O
dp	O
->	O
precision_start	O
=	O
cp	O
-	O
1	int
;	O
for	O
(	O
;	O
*	O
cp	O
>=	O
'0'	O
&&	O
*	O
cp	O
<=	O
'9'	O
;	O
cp	O
++	O
)	O
;	O
dp	O
->	O
precision_end	O
=	O
cp	O
;	O
precision_length	O
=	O
dp	O
->	O
precision_end	O
-	O
dp	O
->	O
precision_start	O
;	O
if	O
(	O
max_precision_length	O
<	O
precision_length	O
)	O
max_precision_length	O
=	O
precision_length	O
;	O
}	O
}	O
{	O
arg_type	O
type	O
;	O
{	O
int	O
flags	O
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
*	O
cp	O
==	O
'h'	O
)	O
{	O
flags	O
|=	O
(	O
1	int
<<	O
(	O
flags	O
&	O
1	int
)	O
)	O
;	O
cp	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
cp	O
==	O
'L'	O
)	O
{	O
flags	O
|=	O
4	int
;	O
cp	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
cp	O
==	O
'l'	O
)	O
{	O
flags	O
+=	O
8	int
;	O
cp	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
cp	O
==	O
'j'	O
)	O
{	O
if	O
(	O
sizeof	O
(	O
intmax_t	O
)	O
>	O
sizeof	O
(	O
long	O
)	O
)	O
{	O
flags	O
+=	O
16	int
;	O
}	O
else	O
if	O
(	O
sizeof	O
(	O
intmax_t	O
)	O
>	O
sizeof	O
(	O
int	O
)	O
)	O
{	O
flags	O
+=	O
8	int
;	O
}	O
cp	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
cp	O
==	O
'z'	O
||	O
*	O
cp	O
==	O
'Z'	O
)	O
{	O
if	O
(	O
sizeof	O
(	O
size_t	O
)	O
>	O
sizeof	O
(	O
long	O
)	O
)	O
{	O
flags	O
+=	O
16	int
;	O
}	O
else	O
if	O
(	O
sizeof	O
(	O
size_t	O
)	O
>	O
sizeof	O
(	O
int	O
)	O
)	O
{	O
flags	O
+=	O
8	int
;	O
}	O
cp	O
++	O
;	O
}	O
else	O
if	O
(	O
*	O
cp	O
==	O
't'	O
)	O
{	O
if	O
(	O
sizeof	O
(	O
ptrdiff_t	O
)	O
>	O
sizeof	O
(	O
long	O
)	O
)	O
{	O
flags	O
+=	O
16	int
;	O
}	O
else	O
if	O
(	O
sizeof	O
(	O
ptrdiff_t	O
)	O
>	O
sizeof	O
(	O
int	O
)	O
)	O
{	O
flags	O
+=	O
8	int
;	O
}	O
cp	O
++	O
;	O
}	O
else	O
break	O
;	O
}	O
c	O
=	O
*	O
cp	O
++	O
;	O
switch	O
(	O
c	O
)	O
{	O
case	O
'd'	O
:	O
case	O
'i'	O
:	O
if	O
(	O
flags	O
>=	O
16	int
||	O
(	O
flags	O
&	O
4	int
)	O
)	O
type	O
=	O
TYPE_LONGLONGINT	O
;	O
else	O
if	O
(	O
flags	O
>=	O
8	int
)	O
type	O
=	O
TYPE_LONGINT	O
;	O
else	O
if	O
(	O
flags	O
&	O
2	int
)	O
type	O
=	O
TYPE_SCHAR	O
;	O
else	O
if	O
(	O
flags	O
&	O
1	int
)	O
type	O
=	O
TYPE_SHORT	O
;	O
else	O
type	O
=	O
TYPE_INT	O
;	O
break	O
;	O
case	O
'o'	O
:	O
case	O
'u'	O
:	O
case	O
'x'	O
:	O
case	O
'X'	O
:	O
if	O
(	O
flags	O
>=	O
16	int
||	O
(	O
flags	O
&	O
4	int
)	O
)	O
type	O
=	O
TYPE_ULONGLONGINT	O
;	O
else	O
if	O
(	O
flags	O
>=	O
8	int
)	O
type	O
=	O
TYPE_ULONGINT	O
;	O
else	O
if	O
(	O
flags	O
&	O
2	int
)	O
type	O
=	O
TYPE_UCHAR	O
;	O
else	O
if	O
(	O
flags	O
&	O
1	int
)	O
type	O
=	O
TYPE_USHORT	O
;	O
else	O
type	O
=	O
TYPE_UINT	O
;	O
break	O
;	O
case	O
'f'	O
:	O
case	O
'F'	O
:	O
case	O
'e'	O
:	O
case	O
'E'	O
:	O
case	O
'g'	O
:	O
case	O
'G'	O
:	O
case	O
'a'	O
:	O
case	O
'A'	O
:	O
if	O
(	O
flags	O
>=	O
16	int
||	O
(	O
flags	O
&	O
4	int
)	O
)	O
type	O
=	O
TYPE_LONGDOUBLE	O
;	O
else	O
type	O
=	O
TYPE_DOUBLE	O
;	O
break	O
;	O
case	O
'c'	O
:	O
if	O
(	O
flags	O
>=	O
8	int
)	O
type	O
=	O
TYPE_WIDE_CHAR	O
;	O
else	O
type	O
=	O
TYPE_CHAR	O
;	O
break	O
;	O
case	O
'C'	O
:	O
type	O
=	O
TYPE_WIDE_CHAR	O
;	O
c	O
=	O
'c'	O
;	O
break	O
;	O
case	O
's'	O
:	O
if	O
(	O
flags	O
>=	O
8	int
)	O
type	O
=	O
TYPE_WIDE_STRING	O
;	O
else	O
type	O
=	O
TYPE_STRING	O
;	O
break	O
;	O
case	O
'S'	O
:	O
type	O
=	O
TYPE_WIDE_STRING	O
;	O
c	O
=	O
's'	O
;	O
break	O
;	O
case	O
'p'	O
:	O
type	O
=	O
TYPE_POINTER	O
;	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
flags	O
>=	O
16	int
||	O
(	O
flags	O
&	O
4	int
)	O
)	O
type	O
=	O
TYPE_COUNT_LONGLONGINT_POINTER	O
;	O
else	O
if	O
(	O
flags	O
>=	O
8	int
)	O
type	O
=	O
TYPE_COUNT_LONGINT_POINTER	O
;	O
else	O
if	O
(	O
flags	O
&	O
2	int
)	O
type	O
=	O
TYPE_COUNT_SCHAR_POINTER	O
;	O
else	O
if	O
(	O
flags	O
&	O
1	int
)	O
type	O
=	O
TYPE_COUNT_SHORT_POINTER	O
;	O
else	O
type	O
=	O
TYPE_COUNT_INT_POINTER	O
;	O
break	O
;	O
case	O
'%'	O
:	O
type	O
=	O
TYPE_NONE	O
;	O
break	O
;	O
default	O
:	O
goto	O
error	O
;	O
}	O
}	O
if	O
(	O
type	O
!=	O
TYPE_NONE	O
)	O
{	O
dp	O
->	O
arg_index	O
=	O
arg_index	O
;	O
if	O
(	O
dp	O
->	O
arg_index	O
==	O
ARG_NONE	O
)	O
{	O
dp	O
->	O
arg_index	O
=	O
arg_posn	O
++	O
;	O
if	O
(	O
dp	O
->	O
arg_index	O
==	O
ARG_NONE	O
)	O
goto	O
error	O
;	O
}	O
REGISTER_ARG	O
(	O
dp	O
->	O
arg_index	O
,	O
type	O
)	O
;	O
}	O
dp	O
->	O
conversion	O
=	O
c	O
;	O
dp	O
->	O
dir_end	O
=	O
cp	O
;	O
}	O
d	O
->	O
count	O
++	O
;	O
if	O
(	O
d	O
->	O
count	O
>=	O
d_allocated	O
)	O
{	O
size_t	O
memory_size	O
;	O
DIRECTIVE	O
*	O
memory	O
;	O
d_allocated	O
=	O
xtimes	O
(	O
d_allocated	O
,	O
2	int
)	O
;	O
memory_size	O
=	O
xtimes	O
(	O
d_allocated	O
,	O
sizeof	O
(	O
DIRECTIVE	O
)	O
)	O
;	O
if	O
(	O
size_overflow_p	O
(	O
memory_size	O
)	O
)	O
goto	O
out_of_memory	O
;	O
memory	O
=	O
(	O
DIRECTIVE	O
*	O
)	O
(	O
d	O
->	O
dir	O
!=	O
d	O
->	O
direct_alloc_dir	O
?	O
realloc	O
(	O
d	O
->	O
dir	O
,	O
memory_size	O
)	O
:	O
malloc	O
(	O
memory_size	O
)	O
)	O
;	O
if	O
(	O
memory	O
==	O
NULL	O
)	O
goto	O
out_of_memory	O
;	O
if	O
(	O
d	O
->	O
dir	O
==	O
d	O
->	O
direct_alloc_dir	O
)	O
memcpy	O
(	O
memory	O
,	O
d	O
->	O
dir	O
,	O
d	O
->	O
count	O
*	O
sizeof	O
(	O
DIRECTIVE	O
)	O
)	O
;	O
d	O
->	O
dir	O
=	O
memory	O
;	O
}	O
}	O
}	O
d	O
->	O
dir	O
[	O
d	O
->	O
count	O
]	O
.	O
dir_start	O
=	O
cp	O
;	O
d	O
->	O
max_width_length	O
=	O
max_width_length	O
;	O
d	O
->	O
max_precision_length	O
=	O
max_precision_length	O
;	O
return	O
0	int
;	O
error	O
:	O
if	O
(	O
a	O
->	O
arg	O
!=	O
a	O
->	O
direct_alloc_arg	O
)	O
free	O
(	O
a	O
->	O
arg	O
)	O
;	O
if	O
(	O
d	O
->	O
dir	O
!=	O
d	O
->	O
direct_alloc_dir	O
)	O
free	O
(	O
d	O
->	O
dir	O
)	O
;	O
errno	O
=	O
EINVAL	O
;	O
return	O
-	O
1	int
;	O
out_of_memory	O
:	O
if	O
(	O
a	O
->	O
arg	O
!=	O
a	O
->	O
direct_alloc_arg	O
)	O
free	O
(	O
a	O
->	O
arg	O
)	O
;	O
if	O
(	O
d	O
->	O
dir	O
!=	O
d	O
->	O
direct_alloc_dir	O
)	O
free	O
(	O
d	O
->	O
dir	O
)	O
;	O
errno	O
=	O
ENOMEM	O
;	O
return	O
-	O
1	int
;	O
}	O
