static	O
char	O
*	O
months	array
[	O
]	O
=	O
{	O
"Jan"	pointer
,	O
"Feb"	pointer
,	O
"Mar"	pointer
,	O
"Apr"	pointer
,	O
"May"	pointer
,	O
"Jun"	pointer
,	O
"Jul"	pointer
,	O
"Aug"	pointer
,	O
"Sep"	pointer
,	O
"Oct"	pointer
,	O
"Nov"	pointer
,	O
"Dec"	pointer
}	O
;	O
char	O
*	O
program_name	pointer
;	O
int	O
debugging_enabled	int
=	O
0	int
;	O
long	O
time_warp_leniency	long
=	O
60	int
;	O
long	O
time_warp_suspicious	long
=	O
31536000	int
;	O
int	O
print_file_problems	int
=	O
0	int
;	O
int	O
print_year	int
=	O
0	int
;	O
time_t	long
last_time	long
=	O
0	int
;	O
int	O
nasty_reboot	int
=	O
0	int
;	O
int	O
nasty_supplant	int
=	O
0	int
;	O
int	O
nasty_time_warp	int
=	O
0	int
;	O
int	O
print_all_days	int
=	O
0	int
;	O
time_t	long
next_midnight	long
;	O
int	O
print_individual_totals	int
=	O
0	int
;	O
int	O
print_midnight_totals	int
=	O
0	int
;	O
int	O
print_zero_totals	int
=	O
0	int
;	O
struct	O
hashtab	struct
*	O
user_totals	pointer
=	O
NULL	O
;	O
struct	O
user_data	struct
{	O
unsigned	O
long	O
time	struct
;	O
}	O
;	O
struct	O
hashtab	struct
*	O
names	pointer
=	O
NULL	O
;	O
struct	O
hashtab	struct
*	O
login_table	pointer
;	O
struct	O
login_data	struct
{	O
char	O
ut_name	O
[	O
NAME_LEN	O
]	O
;	O
time_t	long
time	struct
;	O
}	O
;	O
void	O
do_statistics	function
(	O
char	O
*	O
)	O
;	O
void	O
log_in	function
(	O
struct	O
utmp	struct
*	O
)	O
;	O
void	O
update_user_time	function
(	O
char	O
*	O
,	O
time_t	long
,	O
char	O
*	O
)	O
;	O
void	O
log_out	function
(	O
struct	O
utmp	struct
*	O
)	O
;	O
void	O
log_everyone_out	function
(	O
time_t	long
,	O
int	O
,	O
int	O
,	O
char	O
*	O
)	O
;	O
void	O
parse_entries	function
(	O
void	O
)	O
;	O
void	O
do_totals	function
(	O
time_t	long
*	O
,	O
time_t	long
,	O
int	O
,	O
int	O
,	O
char	O
*	O
)	O
;	O
void	O
update_system_time	function
(	O
time_t	long
)	O
;	O
time_t	long
midnight_after_me	function
(	O
time_t	long
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
c	int
;	O
int	O
other_wtmp_file_specified	int
=	O
0	int
;	O
program_name	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
utmp_init	function
(	O
0	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"complain"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
1	int
}	O
,	O
{	O
"reboots"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
2	int
}	O
,	O
{	O
"supplants"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
3	int
}	O
,	O
{	O
"timewarps"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
4	int
}	O
,	O
{	O
"print-zeros"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
5	int
}	O
,	O
{	O
"debug"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
6	int
}	O
,	O
{	O
"tw-leniency"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
7	int
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
8	int
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
9	int
}	O
,	O
{	O
"daily-totals"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
10	int
}	O
,	O
{	O
"individual-totals"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
11	int
}	O
,	O
{	O
"file"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
12	int
}	O
,	O
{	O
"compatibility"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
13	int
}	O
,	O
{	O
"print-year"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
14	int
}	O
,	O
{	O
"all-days"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
15	int
}	O
,	O
{	O
"tw-suspicious"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
16	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
"adf:hpVyz"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
1	int
:	O
print_file_problems	int
=	O
1	int
;	O
break	O
;	O
case	O
2	int
:	O
nasty_reboot	int
=	O
1	int
;	O
break	O
;	O
case	O
3	int
:	O
nasty_supplant	int
=	O
1	int
;	O
break	O
;	O
case	O
4	int
:	O
nasty_time_warp	int
=	O
1	int
;	O
break	O
;	O
case	O
'z'	O
:	O
case	O
5	int
:	O
print_zero_totals	int
=	O
1	int
;	O
break	O
;	O
case	O
6	int
:	O
debugging_enabled	int
=	O
1	int
;	O
print_file_problems	int
=	O
1	int
;	O
break	O
;	O
case	O
7	int
:	O
time_warp_leniency	long
=	O
strtol	function
(	O
optarg	pointer
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
time_warp_leniency	long
<	O
0	int
)	O
fatal	function
(	O
"time warp leniency value has to be non-negative"	pointer
)	O
;	O
break	O
;	O
case	O
'V'	O
:	O
case	O
8	int
:	O
(	O
void	O
)	O
printf	function
(	O
"%s: GNU Accounting Utilities (release %s)\n"	pointer
,	O
program_name	pointer
,	O
VERSION_STRING	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
10	int
:	O
case	O
'd'	O
:	O
print_midnight_totals	int
=	O
1	int
;	O
break	O
;	O
case	O
11	int
:	O
case	O
'p'	O
:	O
print_individual_totals	int
=	O
1	int
;	O
break	O
;	O
case	O
12	int
:	O
case	O
'f'	O
:	O
add_utmp_file	function
(	O
optarg	pointer
)	O
;	O
other_wtmp_file_specified	int
=	O
1	int
;	O
break	O
;	O
case	O
13	int
:	O
nasty_time_warp	int
=	O
1	int
;	O
nasty_supplant	int
=	O
1	int
;	O
nasty_reboot	int
=	O
1	int
;	O
break	O
;	O
case	O
'y'	O
:	O
case	O
14	int
:	O
print_year	int
=	O
1	int
;	O
break	O
;	O
case	O
'a'	O
:	O
case	O
15	int
:	O
print_all_days	int
=	O
1	int
;	O
break	O
;	O
case	O
16	int
:	O
time_warp_suspicious	long
=	O
strtol	function
(	O
optarg	pointer
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
time_warp_suspicious	long
<	O
0	int
)	O
fatal	function
(	O
"time warp suspicious value has to be non-negative"	pointer
)	O
;	O
if	O
(	O
time_warp_suspicious	long
<=	O
time_warp_leniency	long
)	O
fatal	function
(	O
"time warp suspicious value has to greater than the time warp leniency value"	pointer
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
case	O
9	int
:	O
default	O
:	O
give_usage	function
(	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
names	pointer
=	O
hashtab_init	function
(	O
0	int
)	O
;	O
while	O
(	O
optind	int
<	O
argc	int
)	O
hashtab_create	function
(	O
names	pointer
,	O
argv	array
[	O
optind	int
++	O
]	O
,	O
0	int
)	O
;	O
if	O
(	O
debugging_enabled	int
)	O
hashtab_dump_keys	function
(	O
names	pointer
,	O
stddebug	O
)	O
;	O
}	O
if	O
(	O
!	O
other_wtmp_file_specified	int
)	O
add_utmp_file	function
(	O
WTMP_FILE_LOC	pointer
)	O
;	O
user_totals	pointer
=	O
hashtab_init	function
(	O
0	int
)	O
;	O
login_table	pointer
=	O
hashtab_init	function
(	O
0	int
)	O
;	O
parse_entries	function
(	O
)	O
;	O
{	O
time_t	long
now	long
=	O
time	struct
(	O
(	O
time_t	long
*	O
)	O
0	int
)	O
;	O
if	O
(	O
now	long
<	O
last_time	long
)	O
now	long
=	O
last_time	long
;	O
do_totals	function
(	O
&	O
next_midnight	long
,	O
now	long
,	O
TRUE	int
,	O
TRUE	int
,	O
"midnight logout"	pointer
)	O
;	O
log_everyone_out	function
(	O
now	long
,	O
TRUE	int
,	O
FALSE	int
,	O
"catch-up"	pointer
)	O
;	O
}	O
do_statistics	function
(	O
print_midnight_totals	int
?	O
(	O
print_year	int
?	O
"Today\t"	pointer
:	O
"Today"	pointer
)	O
:	O
""	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
void	O
give_usage	function
(	O
void	O
)	O
{	O
(	O
void	O
)	O
printf	function
(	O
"\n"	pointer
"Usage: %s [OPTION] ...\n"	pointer
"\n"	pointer
"OPTIONS:\n"	pointer
"  -d, --daily-totals        Print totals for each day\n"	pointer
"  -p, --individual-totals   Print time totals for each user\n"	pointer
"  -f, --file <file>         Read from <file>\n"	pointer
"  --complain                Print errors for whatever problem\n"	pointer
"  --reboots                 Count the time between login and reboot\n"	pointer
"  --supplants               Count the time between logins on the terminal\n"	pointer
"  --timewarps               Count the time between login and time warp\n"	pointer
"  --compatibility           Shortcut for --reboots --supplants --timewarps\n"	pointer
"  -a, --all-days            Do not skip days without login activity\n"	pointer
"  --tw-leniency <value>     Set the time warp leniency <value> in seconds\n"	pointer
"  --tw-suspicious <value>   Set the time warp suspicious <value> in seconds\n"	pointer
"  --print-year              Print year when displaying dates\n"	pointer
"  --print-zeros             Don't suppress zeros in category totals\n"	pointer
"  --debug                   Print verbose internal information\n"	pointer
"  -V, --version             Show version and exit\n"	pointer
"  -h, --help                Show help and exit\n"	pointer
,	O
program_name	pointer
)	O
;	O
print_wtmp_file_location	function
(	O
)	O
;	O
}	O
void	O
update_system_time	function
(	O
time_t	long
the_time	long
)	O
{	O
struct	O
hashtab_order	struct
ho	pointer
;	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
for	O
(	O
he	pointer
=	O
hashtab_first	function
(	O
login_table	pointer
,	O
&	O
ho	pointer
)	O
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
hashtab_next	function
(	O
&	O
ho	pointer
)	O
)	O
{	O
struct	O
login_data	struct
*	O
l	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
l	pointer
->	O
time	struct
+=	O
the_time	long
;	O
}	O
}	O
void	O
log_everyone_out	function
(	O
time_t	long
the_time	long
,	O
int	O
update_time_flag	int
,	O
int	O
change_login_flag	int
,	O
char	O
*	O
debug_str	pointer
)	O
{	O
struct	O
hashtab_order	struct
ho	pointer
;	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
for	O
(	O
he	pointer
=	O
hashtab_first	function
(	O
login_table	pointer
,	O
&	O
ho	pointer
)	O
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
hashtab_next	function
(	O
&	O
ho	pointer
)	O
)	O
{	O
struct	O
login_data	struct
*	O
l	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
if	O
(	O
update_time_flag	int
)	O
update_user_time	function
(	O
l	pointer
->	O
ut_name	O
,	O
the_time	long
-	O
l	pointer
->	O
time	struct
,	O
debug_str	pointer
)	O
;	O
if	O
(	O
change_login_flag	int
)	O
l	pointer
->	O
time	struct
=	O
the_time	long
;	O
else	O
hashtab_delete	function
(	O
he	pointer
)	O
;	O
}	O
}	O
void	O
log_in	function
(	O
struct	O
utmp	struct
*	O
entry	pointer
)	O
{	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
if	O
(	O
entry	pointer
->	O
ut_line	array
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
print_file_problems	int
)	O
{	O
utmp_print_file_and_line	function
(	O
stddebug	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
stddebug	O
,	O
": problem: trying to hash rec with ut_line == NULL\n"	pointer
)	O
;	O
}	O
return	O
;	O
}	O
he	pointer
=	O
hashtab_find	function
(	O
login_table	pointer
,	O
entry	pointer
->	O
ut_line	array
,	O
(	O
unsigned	O
int	O
)	O
TTY_LEN	O
)	O
;	O
if	O
(	O
he	pointer
!=	O
NULL	O
)	O
{	O
struct	O
login_data	struct
*	O
l	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
if	O
(	O
print_file_problems	int
)	O
{	O
char	O
*	O
ttyname	pointer
=	O
hashtab_get_key	function
(	O
he	pointer
)	O
;	O
utmp_print_file_and_line	function
(	O
stddebug	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
stddebug	O
,	O
": problem: duplicate record for line `%.*s'\n"	pointer
,	O
TTY_LEN	O
,	O
ttyname	pointer
)	O
;	O
}	O
if	O
(	O
nasty_supplant	int
)	O
update_user_time	function
(	O
l	pointer
->	O
ut_name	O
,	O
entry	pointer
->	O
ut_time	O
-	O
l	pointer
->	O
time	struct
,	O
"supplant"	pointer
)	O
;	O
(	O
void	O
)	O
strncpy	function
(	O
l	pointer
->	O
ut_name	O
,	O
entry	pointer
->	O
ut_name	O
,	O
(	O
size_t	long
)	O
NAME_LEN	O
)	O
;	O
l	pointer
->	O
time	struct
=	O
entry	pointer
->	O
ut_time	O
;	O
}	O
else	O
{	O
struct	O
login_data	struct
l	pointer
;	O
(	O
void	O
)	O
strncpy	function
(	O
l	pointer
.	O
ut_name	O
,	O
entry	pointer
->	O
ut_name	O
,	O
(	O
size_t	long
)	O
NAME_LEN	O
)	O
;	O
l	pointer
.	O
time	struct
=	O
entry	pointer
->	O
ut_time	O
;	O
he	pointer
=	O
hashtab_create	function
(	O
login_table	pointer
,	O
entry	pointer
->	O
ut_line	array
,	O
TTY_LEN	O
)	O
;	O
hashtab_set_value	function
(	O
he	pointer
,	O
&	O
l	pointer
,	O
sizeof	O
(	O
l	pointer
)	O
)	O
;	O
}	O
}	O
void	O
log_out	function
(	O
struct	O
utmp	struct
*	O
entry	pointer
)	O
{	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
if	O
(	O
entry	pointer
->	O
ut_line	array
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
print_file_problems	int
)	O
{	O
utmp_print_file_and_line	function
(	O
stddebug	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
stddebug	O
,	O
": problem: trying to hash rec with ut_line == NULL\n"	pointer
)	O
;	O
}	O
return	O
;	O
}	O
he	pointer
=	O
hashtab_find	function
(	O
login_table	pointer
,	O
entry	pointer
->	O
ut_line	array
,	O
(	O
unsigned	O
int	O
)	O
TTY_LEN	O
)	O
;	O
if	O
(	O
he	pointer
!=	O
NULL	O
)	O
{	O
struct	O
login_data	struct
*	O
l	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
update_user_time	function
(	O
l	pointer
->	O
ut_name	O
,	O
entry	pointer
->	O
ut_time	O
-	O
l	pointer
->	O
time	struct
,	O
"logout"	pointer
)	O
;	O
hashtab_delete	function
(	O
he	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
print_file_problems	int
)	O
{	O
utmp_print_file_and_line	function
(	O
stddebug	O
)	O
;	O
fprintf	function
(	O
stddebug	O
,	O
": problem: missing login record for `%.*s'\n"	pointer
,	O
TTY_LEN	O
,	O
entry	pointer
->	O
ut_line	array
)	O
;	O
}	O
}	O
}	O
void	O
do_totals	function
(	O
time_t	long
*	O
next_midnight	long
,	O
time_t	long
current_time	long
,	O
int	O
update_time_flag	int
,	O
int	O
change_login_flag	int
,	O
char	O
*	O
debug_str	pointer
)	O
{	O
while	O
(	O
*	O
next_midnight	long
<	O
current_time	long
)	O
{	O
log_everyone_out	function
(	O
*	O
next_midnight	long
,	O
update_time_flag	int
,	O
change_login_flag	int
,	O
debug_str	pointer
)	O
;	O
if	O
(	O
print_midnight_totals	int
)	O
{	O
char	O
month_day_string	array
[	O
256	int
]	O
;	O
time_t	long
temp_time	long
=	O
*	O
next_midnight	long
-	O
10	int
;	O
struct	O
tm	struct
*	O
temp_tm	pointer
=	O
localtime	function
(	O
&	O
temp_time	long
)	O
;	O
if	O
(	O
print_year	int
)	O
(	O
void	O
)	O
snprintf	function
(	O
month_day_string	array
,	O
(	O
size_t	long
)	O
sizeof	O
(	O
month_day_string	array
)	O
,	O
"%s %2d %4d"	pointer
,	O
months	array
[	O
temp_tm	pointer
->	O
tm_mon	int
]	O
,	O
temp_tm	pointer
->	O
tm_mday	int
,	O
1900	int
+	O
temp_tm	pointer
->	O
tm_year	int
)	O
;	O
else	O
(	O
void	O
)	O
snprintf	function
(	O
month_day_string	array
,	O
(	O
size_t	long
)	O
sizeof	O
(	O
month_day_string	array
)	O
,	O
"%s %2d"	pointer
,	O
months	array
[	O
temp_tm	pointer
->	O
tm_mon	int
]	O
,	O
temp_tm	pointer
->	O
tm_mday	int
)	O
;	O
do_statistics	function
(	O
month_day_string	array
)	O
;	O
}	O
*	O
next_midnight	long
=	O
midnight_after_me	function
(	O
(	O
print_midnight_totals	int
&&	O
print_all_days	int
)	O
?	O
*	O
next_midnight	long
:	O
current_time	long
)	O
;	O
}	O
}	O
void	O
do_statistics	function
(	O
char	O
*	O
date_string	pointer
)	O
{	O
unsigned	O
long	O
total	long
;	O
double	O
float_total	double
;	O
struct	O
hashtab_order	struct
ho	pointer
;	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
total	long
=	O
0	int
;	O
float_total	double
=	O
0.0	int
;	O
for	O
(	O
he	pointer
=	O
hashtab_first	function
(	O
user_totals	pointer
,	O
&	O
ho	pointer
)	O
;	O
he	pointer
!=	O
NULL	O
;	O
he	pointer
=	O
hashtab_next	function
(	O
&	O
ho	pointer
)	O
)	O
{	O
char	O
*	O
username	pointer
=	O
hashtab_get_key	function
(	O
he	pointer
)	O
;	O
if	O
(	O
(	O
names	pointer
==	O
NULL	O
)	O
||	O
hashtab_find	function
(	O
names	pointer
,	O
username	pointer
,	O
(	O
unsigned	O
int	O
)	O
NAME_LEN	O
)	O
)	O
{	O
struct	O
user_data	struct
*	O
u	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
total	long
+=	O
u	pointer
->	O
time	struct
;	O
if	O
(	O
(	O
print_individual_totals	int
)	O
&&	O
!	O
(	O
(	O
u	pointer
->	O
time	struct
==	O
0	int
)	O
&&	O
!	O
print_zero_totals	int
)	O
)	O
printf	function
(	O
"%s%-*.*s %*.2f\n"	pointer
,	O
(	O
print_year	int
?	O
"\t\t"	pointer
:	O
"\t"	pointer
)	O
,	O
NAME_LEN	O
,	O
NAME_LEN	O
,	O
username	pointer
,	O
number_precision	int
,	O
(	O
double	O
)	O
u	pointer
->	O
time	struct
/	O
3600.0	int
)	O
;	O
}	O
hashtab_delete	function
(	O
he	pointer
)	O
;	O
}	O
float_total	double
=	O
(	O
double	O
)	O
total	long
/	O
3600.0	int
;	O
if	O
(	O
print_midnight_totals	int
)	O
{	O
if	O
(	O
!	O
(	O
(	O
float_total	double
==	O
0.0	int
)	O
&&	O
!	O
print_zero_totals	int
)	O
)	O
printf	function
(	O
"%s\ttotal %*.2f\n"	pointer
,	O
date_string	pointer
,	O
number_precision	int
+	O
3	int
,	O
float_total	double
)	O
;	O
}	O
else	O
printf	function
(	O
"%stotal %*.2f\n"	pointer
,	O
(	O
print_year	int
?	O
"\t\t"	pointer
:	O
"\t"	pointer
)	O
,	O
number_precision	int
+	O
3	int
,	O
float_total	double
)	O
;	O
}	O
void	O
update_user_time	function
(	O
char	O
*	O
name	pointer
,	O
time_t	long
the_time	long
,	O
char	O
*	O
debug_label	pointer
)	O
{	O
struct	O
hashtab_elem	struct
*	O
he	pointer
;	O
if	O
(	O
the_time	long
<	O
0	int
)	O
{	O
utmp_print_file_and_line	function
(	O
stdout	pointer
)	O
;	O
fprintf	function
(	O
stddebug	O
,	O
": problem: update user %.*s (for %s) with %ld seconds?!\n"	pointer
,	O
NAME_LEN	O
,	O
name	pointer
,	O
debug_label	pointer
,	O
(	O
long	O
)	O
the_time	long
)	O
;	O
fatal	function
(	O
"Possible overflow of time_t!  Can't continue."	pointer
)	O
;	O
}	O
if	O
(	O
debugging_enabled	int
&&	O
(	O
(	O
names	pointer
==	O
NULL	O
)	O
||	O
hashtab_find	function
(	O
names	pointer
,	O
name	pointer
,	O
(	O
unsigned	O
int	O
)	O
NAME_LEN	O
)	O
)	O
)	O
fprintf	function
(	O
stddebug	O
,	O
"\t\t\t\t\t%*.2f %-*.*s (%s)\n"	pointer
,	O
NAME_LEN	O
,	O
(	O
double	O
)	O
the_time	long
/	O
3600.0	int
,	O
NAME_LEN	O
,	O
NAME_LEN	O
,	O
name	pointer
,	O
debug_label	pointer
)	O
;	O
he	pointer
=	O
hashtab_find	function
(	O
user_totals	pointer
,	O
name	pointer
,	O
(	O
unsigned	O
int	O
)	O
NAME_LEN	O
)	O
;	O
if	O
(	O
he	pointer
==	O
NULL	O
)	O
{	O
struct	O
user_data	struct
u	pointer
;	O
u	pointer
.	O
time	struct
=	O
0	int
;	O
he	pointer
=	O
hashtab_create	function
(	O
user_totals	pointer
,	O
name	pointer
,	O
NAME_LEN	O
)	O
;	O
hashtab_set_value	function
(	O
he	pointer
,	O
&	O
u	pointer
,	O
sizeof	O
(	O
u	pointer
)	O
)	O
;	O
}	O
{	O
struct	O
user_data	struct
*	O
u	pointer
=	O
hashtab_get_value	function
(	O
he	pointer
)	O
;	O
u	pointer
->	O
time	struct
+=	O
the_time	long
;	O
}	O
}	O
time_t	long
midnight_after_me	function
(	O
time_t	long
now_time	long
)	O
{	O
struct	O
tm	struct
*	O
tm_ptr	pointer
,	O
temp_tm	pointer
;	O
tm_ptr	pointer
=	O
localtime	function
(	O
&	O
now_time	long
)	O
;	O
memcpy	function
(	O
(	O
void	O
*	O
)	O
&	O
temp_tm	pointer
,	O
(	O
void	O
*	O
)	O
tm_ptr	pointer
,	O
(	O
size_t	long
)	O
sizeof	O
(	O
struct	O
tm	struct
)	O
)	O
;	O
temp_tm	pointer
.	O
tm_sec	int
=	O
0	int
;	O
temp_tm	pointer
.	O
tm_min	int
=	O
0	int
;	O
temp_tm	pointer
.	O
tm_hour	int
=	O
0	int
;	O
temp_tm	pointer
.	O
tm_mday	int
++	O
;	O
temp_tm	pointer
.	O
tm_isdst	int
=	O
-	O
1	int
;	O
return	O
mktime	function
(	O
&	O
temp_tm	pointer
)	O
;	O
}	O
