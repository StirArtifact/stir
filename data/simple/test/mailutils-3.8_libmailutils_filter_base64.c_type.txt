static	O
char	O
b64tab	array
[	O
]	O
=	O
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"	pointer
;	O
static	O
int	O
b64val	array
[	O
128	int
]	O
=	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
62	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
63	int
,	O
52	int
,	O
53	int
,	O
54	int
,	O
55	int
,	O
56	int
,	O
57	int
,	O
58	int
,	O
59	int
,	O
60	int
,	O
61	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
26	int
,	O
27	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
32	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
45	int
,	O
46	int
,	O
47	int
,	O
48	int
,	O
49	int
,	O
50	int
,	O
51	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
;	O
int	O
mu_base64_encode	function
(	O
const	O
unsigned	O
char	O
*	O
input	pointer
,	O
size_t	long
input_len	long
,	O
unsigned	O
char	O
*	O
*	O
output	pointer
,	O
size_t	long
*	O
output_len	pointer
)	O
{	O
size_t	long
olen	long
=	O
4	int
*	O
(	O
input_len	long
+	O
2	int
)	O
/	O
3	int
+	O
1	int
;	O
unsigned	O
char	O
*	O
out	pointer
=	O
malloc	function
(	O
olen	long
)	O
;	O
if	O
(	O
!	O
out	pointer
)	O
return	O
ENOMEM	int
;	O
*	O
output	pointer
=	O
out	pointer
;	O
while	O
(	O
input_len	long
>=	O
3	int
)	O
{	O
*	O
out	pointer
++	O
=	O
b64tab	array
[	O
input	pointer
[	O
0	int
]	O
>>	O
2	int
]	O
;	O
*	O
out	pointer
++	O
=	O
b64tab	array
[	O
(	O
(	O
input	pointer
[	O
0	int
]	O
<<	O
4	int
)	O
&	O
0x30	int
)	O
|	O
(	O
input	pointer
[	O
1	int
]	O
>>	O
4	int
)	O
]	O
;	O
*	O
out	pointer
++	O
=	O
b64tab	array
[	O
(	O
(	O
input	pointer
[	O
1	int
]	O
<<	O
2	int
)	O
&	O
0x3c	int
)	O
|	O
(	O
input	pointer
[	O
2	int
]	O
>>	O
6	int
)	O
]	O
;	O
*	O
out	pointer
++	O
=	O
b64tab	array
[	O
input	pointer
[	O
2	int
]	O
&	O
0x3f	int
]	O
;	O
input_len	long
-=	O
3	int
;	O
input	pointer
+=	O
3	int
;	O
}	O
if	O
(	O
input_len	long
>	O
0	int
)	O
{	O
unsigned	O
char	O
c	char
=	O
(	O
input	pointer
[	O
0	int
]	O
<<	O
4	int
)	O
&	O
0x30	int
;	O
*	O
out	pointer
++	O
=	O
b64tab	array
[	O
input	pointer
[	O
0	int
]	O
>>	O
2	int
]	O
;	O
if	O
(	O
input_len	long
>	O
1	int
)	O
c	char
|=	O
input	pointer
[	O
1	int
]	O
>>	O
4	int
;	O
*	O
out	pointer
++	O
=	O
b64tab	array
[	O
c	char
]	O
;	O
*	O
out	pointer
++	O
=	O
(	O
input_len	long
<	O
2	int
)	O
?	O
'='	O
:	O
b64tab	array
[	O
(	O
input	pointer
[	O
1	int
]	O
<<	O
2	int
)	O
&	O
0x3c	int
]	O
;	O
*	O
out	pointer
++	O
=	O
'='	O
;	O
}	O
*	O
output_len	pointer
=	O
out	pointer
-	O
*	O
output	pointer
;	O
*	O
out	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_base64_decode	function
(	O
const	O
unsigned	O
char	O
*	O
input	pointer
,	O
size_t	long
input_len	long
,	O
unsigned	O
char	O
*	O
*	O
output	pointer
,	O
size_t	long
*	O
output_len	pointer
)	O
{	O
int	O
olen	long
=	O
input_len	long
;	O
unsigned	O
char	O
*	O
out	pointer
=	O
malloc	function
(	O
olen	long
)	O
;	O
if	O
(	O
!	O
out	pointer
)	O
return	O
ENOMEM	int
;	O
*	O
output	pointer
=	O
out	pointer
;	O
do	O
{	O
if	O
(	O
input	pointer
[	O
0	int
]	O
>	O
127	int
||	O
b64val	array
[	O
input	pointer
[	O
0	int
]	O
]	O
==	O
-	O
1	int
||	O
input	pointer
[	O
1	int
]	O
>	O
127	int
||	O
b64val	array
[	O
input	pointer
[	O
1	int
]	O
]	O
==	O
-	O
1	int
||	O
input	pointer
[	O
2	int
]	O
>	O
127	int
||	O
(	O
(	O
input	pointer
[	O
2	int
]	O
!=	O
'='	O
)	O
&&	O
(	O
b64val	array
[	O
input	pointer
[	O
2	int
]	O
]	O
==	O
-	O
1	int
)	O
)	O
||	O
input	pointer
[	O
3	int
]	O
>	O
127	int
||	O
(	O
(	O
input	pointer
[	O
3	int
]	O
!=	O
'='	O
)	O
&&	O
(	O
b64val	array
[	O
input	pointer
[	O
3	int
]	O
]	O
==	O
-	O
1	int
)	O
)	O
)	O
return	O
EINVAL	int
;	O
*	O
out	pointer
++	O
=	O
(	O
b64val	array
[	O
input	pointer
[	O
0	int
]	O
]	O
<<	O
2	int
)	O
|	O
(	O
b64val	array
[	O
input	pointer
[	O
1	int
]	O
]	O
>>	O
4	int
)	O
;	O
if	O
(	O
input	pointer
[	O
2	int
]	O
!=	O
'='	O
)	O
{	O
*	O
out	pointer
++	O
=	O
(	O
(	O
b64val	array
[	O
input	pointer
[	O
1	int
]	O
]	O
<<	O
4	int
)	O
&	O
0xf0	int
)	O
|	O
(	O
b64val	array
[	O
input	pointer
[	O
2	int
]	O
]	O
>>	O
2	int
)	O
;	O
if	O
(	O
input	pointer
[	O
3	int
]	O
!=	O
'='	O
)	O
*	O
out	pointer
++	O
=	O
(	O
(	O
b64val	array
[	O
input	pointer
[	O
2	int
]	O
]	O
<<	O
6	int
)	O
&	O
0xc0	int
)	O
|	O
b64val	array
[	O
input	pointer
[	O
3	int
]	O
]	O
;	O
}	O
input	pointer
+=	O
4	int
;	O
input_len	long
-=	O
4	int
;	O
}	O
while	O
(	O
input_len	long
>	O
0	int
)	O
;	O
*	O
output_len	pointer
=	O
out	pointer
-	O
*	O
output	pointer
;	O
return	O
0	int
;	O
}	O
static	O
enum	O
mu_filter_result	enum
_base64_decoder	function
(	O
void	O
*	O
xd	pointer
MU_ARG_UNUSED	O
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
enum	O
mu_filter_result	enum
result	enum
=	O
mu_filter_ok	int
;	O
int	O
i	int
=	O
0	int
,	O
tmp	int
=	O
0	int
,	O
pad	int
=	O
0	int
;	O
size_t	long
consumed	long
=	O
0	int
;	O
unsigned	O
char	O
data	pointer
[	O
4	int
]	O
;	O
size_t	long
nbytes	long
=	O
0	int
;	O
const	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
iobuf	pointer
->	O
osize	long
<=	O
3	int
)	O
{	O
iobuf	pointer
->	O
osize	long
=	O
3	int
;	O
return	O
mu_filter_moreoutput	int
;	O
}	O
iptr	pointer
=	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
while	O
(	O
consumed	long
<	O
isize	long
&&	O
nbytes	long
+	O
3	int
<	O
osize	long
)	O
{	O
while	O
(	O
i	int
<	O
4	int
&&	O
consumed	long
<	O
isize	long
)	O
{	O
tmp	int
=	O
b64val	array
[	O
*	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iptr	pointer
++	O
]	O
;	O
consumed	long
++	O
;	O
if	O
(	O
tmp	int
!=	O
-	O
1	int
)	O
data	pointer
[	O
i	int
++	O
]	O
=	O
tmp	int
;	O
else	O
if	O
(	O
*	O
(	O
iptr	pointer
-	O
1	int
)	O
==	O
'='	O
)	O
{	O
data	pointer
[	O
i	int
++	O
]	O
=	O
0	int
;	O
pad	int
++	O
;	O
}	O
}	O
if	O
(	O
i	int
==	O
4	int
)	O
{	O
*	O
optr	pointer
++	O
=	O
(	O
data	pointer
[	O
0	int
]	O
<<	O
2	int
)	O
|	O
(	O
(	O
data	pointer
[	O
1	int
]	O
&	O
0x30	int
)	O
>>	O
4	int
)	O
;	O
*	O
optr	pointer
++	O
=	O
(	O
(	O
data	pointer
[	O
1	int
]	O
&	O
0xf	int
)	O
<<	O
4	int
)	O
|	O
(	O
(	O
data	pointer
[	O
2	int
]	O
&	O
0x3c	int
)	O
>>	O
2	int
)	O
;	O
*	O
optr	pointer
++	O
=	O
(	O
(	O
data	pointer
[	O
2	int
]	O
&	O
0x3	int
)	O
<<	O
6	int
)	O
|	O
data	pointer
[	O
3	int
]	O
;	O
nbytes	long
+=	O
3	int
-	O
pad	int
;	O
}	O
else	O
{	O
if	O
(	O
cmd	enum
!=	O
mu_filter_lastbuf	int
)	O
{	O
consumed	long
-=	O
i	int
;	O
result	enum
=	O
mu_filter_again	int
;	O
}	O
break	O
;	O
}	O
i	int
=	O
0	int
;	O
}	O
iobuf	pointer
->	O
isize	long
=	O
consumed	long
;	O
iobuf	pointer
->	O
osize	long
=	O
nbytes	long
;	O
return	O
result	enum
;	O
}	O
enum	O
base64_state	enum
{	O
base64_init	int
,	O
base64_newline	int
,	O
base64_rollback	int
}	O
;	O
struct	O
base64_line	struct
{	O
enum	O
base64_state	enum
state	pointer
;	O
size_t	long
max_len	long
;	O
size_t	long
cur_len	long
;	O
char	O
save	array
[	O
3	int
]	O
;	O
int	O
idx	int
;	O
}	O
;	O
static	O
enum	O
mu_filter_result	enum
_base64_encoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
struct	O
base64_line	struct
bline	struct
,	O
*	O
lp	pointer
=	O
xd	pointer
;	O
size_t	long
consumed	long
=	O
0	int
;	O
int	O
pad	int
=	O
0	int
;	O
const	O
unsigned	O
char	O
*	O
ptr	pointer
;	O
size_t	long
nbytes	long
=	O
0	int
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
enum	O
mu_filter_result	enum
res	enum
;	O
if	O
(	O
!	O
lp	pointer
)	O
{	O
lp	pointer
=	O
&	O
bline	struct
;	O
lp	pointer
->	O
max_len	long
=	O
0	int
;	O
lp	pointer
->	O
state	pointer
=	O
base64_init	int
;	O
}	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
lp	pointer
->	O
state	pointer
=	O
base64_init	int
;	O
lp	pointer
->	O
cur_len	long
=	O
0	int
;	O
lp	pointer
->	O
idx	int
=	O
3	int
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
iobuf	pointer
->	O
osize	long
<	O
4	int
)	O
{	O
iobuf	pointer
->	O
osize	long
=	O
4	int
;	O
return	O
mu_filter_moreoutput	int
;	O
}	O
if	O
(	O
iobuf	pointer
->	O
isize	long
==	O
0	int
)	O
{	O
iobuf	pointer
->	O
eof	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
iobuf	pointer
->	O
isize	long
<=	O
3	int
)	O
{	O
if	O
(	O
cmd	enum
==	O
mu_filter_lastbuf	int
)	O
pad	int
=	O
1	int
;	O
else	O
{	O
iobuf	pointer
->	O
isize	long
=	O
4	int
;	O
return	O
mu_filter_moreinput	int
;	O
}	O
}	O
ptr	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
while	O
(	O
nbytes	long
<	O
osize	long
)	O
{	O
unsigned	O
char	O
c1	char
=	O
0	int
,	O
c2	char
=	O
0	int
,	O
x	char
=	O
'='	O
,	O
y	char
=	O
'='	O
;	O
if	O
(	O
lp	pointer
->	O
max_len	long
&&	O
lp	pointer
->	O
cur_len	long
==	O
lp	pointer
->	O
max_len	long
)	O
{	O
if	O
(	O
lp	pointer
->	O
state	pointer
==	O
base64_init	int
)	O
lp	pointer
->	O
idx	int
=	O
3	int
;	O
lp	pointer
->	O
state	pointer
=	O
base64_newline	int
;	O
}	O
switch	O
(	O
lp	pointer
->	O
state	pointer
)	O
{	O
case	O
base64_init	int
:	O
break	O
;	O
case	O
base64_newline	int
:	O
*	O
optr	pointer
++	O
=	O
'\n'	O
;	O
nbytes	long
++	O
;	O
lp	pointer
->	O
cur_len	long
=	O
0	int
;	O
lp	pointer
->	O
state	pointer
=	O
base64_rollback	int
;	O
continue	O
;	O
case	O
base64_rollback	int
:	O
if	O
(	O
lp	pointer
->	O
idx	int
<	O
3	int
)	O
{	O
*	O
optr	pointer
++	O
=	O
lp	pointer
->	O
save	array
[	O
lp	pointer
->	O
idx	int
++	O
]	O
;	O
nbytes	long
++	O
;	O
lp	pointer
->	O
cur_len	long
++	O
;	O
continue	O
;	O
}	O
lp	pointer
->	O
state	pointer
=	O
base64_init	int
;	O
}	O
if	O
(	O
!	O
(	O
consumed	long
+	O
3	int
<=	O
isize	long
||	O
pad	int
)	O
)	O
break	O
;	O
if	O
(	O
consumed	long
==	O
isize	long
)	O
{	O
lp	pointer
->	O
save	array
[	O
1	int
]	O
=	O
x	char
;	O
lp	pointer
->	O
save	array
[	O
2	int
]	O
=	O
y	char
;	O
lp	pointer
->	O
idx	int
=	O
1	int
;	O
lp	pointer
->	O
state	pointer
=	O
base64_rollback	int
;	O
}	O
else	O
{	O
*	O
optr	pointer
++	O
=	O
b64tab	array
[	O
ptr	pointer
[	O
0	int
]	O
>>	O
2	int
]	O
;	O
nbytes	long
++	O
;	O
lp	pointer
->	O
cur_len	long
++	O
;	O
consumed	long
++	O
;	O
switch	O
(	O
isize	long
-	O
consumed	long
)	O
{	O
default	O
:	O
consumed	long
++	O
;	O
y	char
=	O
b64tab	array
[	O
ptr	pointer
[	O
2	int
]	O
&	O
0x3f	int
]	O
;	O
c2	char
=	O
ptr	pointer
[	O
2	int
]	O
>>	O
6	int
;	O
case	O
1	int
:	O
consumed	long
++	O
;	O
x	char
=	O
b64tab	array
[	O
(	O
(	O
ptr	pointer
[	O
1	int
]	O
<<	O
2	int
)	O
+	O
c2	char
)	O
&	O
0x3f	int
]	O
;	O
c1	char
=	O
(	O
ptr	pointer
[	O
1	int
]	O
>>	O
4	int
)	O
;	O
case	O
0	int
:	O
lp	pointer
->	O
save	array
[	O
0	int
]	O
=	O
b64tab	array
[	O
(	O
(	O
ptr	pointer
[	O
0	int
]	O
<<	O
4	int
)	O
+	O
c1	char
)	O
&	O
0x3f	int
]	O
;	O
lp	pointer
->	O
save	array
[	O
1	int
]	O
=	O
x	char
;	O
lp	pointer
->	O
save	array
[	O
2	int
]	O
=	O
y	char
;	O
lp	pointer
->	O
idx	int
=	O
0	int
;	O
lp	pointer
->	O
state	pointer
=	O
base64_rollback	int
;	O
}	O
ptr	pointer
+=	O
3	int
;	O
}	O
pad	int
=	O
0	int
;	O
}	O
if	O
(	O
consumed	long
>	O
iobuf	pointer
->	O
isize	long
)	O
consumed	long
=	O
iobuf	pointer
->	O
isize	long
;	O
if	O
(	O
cmd	enum
==	O
mu_filter_lastbuf	int
&&	O
(	O
consumed	long
<	O
iobuf	pointer
->	O
isize	long
||	O
lp	pointer
->	O
state	pointer
==	O
base64_rollback	int
)	O
)	O
res	enum
=	O
mu_filter_again	int
;	O
else	O
res	enum
=	O
mu_filter_ok	int
;	O
iobuf	pointer
->	O
isize	long
=	O
consumed	long
;	O
iobuf	pointer
->	O
osize	long
=	O
nbytes	long
;	O
return	O
res	enum
;	O
}	O
static	O
int	O
alloc_state	function
(	O
void	O
*	O
*	O
pret	pointer
,	O
int	O
mode	int
,	O
int	O
argc	int
,	O
const	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
mode	int
==	O
MU_FILTER_ENCODE	int
)	O
{	O
struct	O
base64_line	struct
*	O
lp	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
lp	pointer
)	O
)	O
;	O
if	O
(	O
!	O
lp	pointer
)	O
return	O
ENOMEM	int
;	O
lp	pointer
->	O
max_len	long
=	O
76	int
;	O
*	O
pret	pointer
=	O
lp	pointer
;	O
}	O
else	O
*	O
pret	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_base64_filter	struct
=	O
{	O
"base64"	pointer
,	O
alloc_state	function
,	O
_base64_encoder	function
,	O
_base64_decoder	function
}	O
;	O
mu_filter_record_t	pointer
mu_base64_filter	pointer
=	O
&	O
_base64_filter	struct
;	O
static	O
struct	O
_mu_filter_record	struct
_B_filter	struct
=	O
{	O
"B"	pointer
,	O
NULL	O
,	O
_base64_encoder	function
,	O
_base64_decoder	function
}	O
;	O
mu_filter_record_t	pointer
mu_rfc_2047_B_filter	pointer
=	O
&	O
_B_filter	struct
;	O
