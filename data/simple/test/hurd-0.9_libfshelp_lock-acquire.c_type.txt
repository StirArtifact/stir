error_t	int
fshelp_acquire_lock	function
(	O
struct	O
lock_box	struct
*	O
box	pointer
,	O
int	O
*	O
user	pointer
,	O
pthread_mutex_t	O
*	O
mut	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
atomic	int
=	O
0	int
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
(	O
LOCK_UN	int
|	O
LOCK_EX	int
|	O
LOCK_SH	int
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
(	O
flags	int
&	O
LOCK_UN	int
)	O
&&	O
(	O
flags	int
&	O
(	O
LOCK_SH	int
|	O
LOCK_EX	int
)	O
)	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
flags	int
&	O
__LOCK_ATOMIC	int
)	O
{	O
atomic	int
=	O
1	int
;	O
flags	int
&=	O
~	O
__LOCK_ATOMIC	int
;	O
}	O
if	O
(	O
flags	int
&	O
LOCK_EX	int
)	O
flags	int
&=	O
~	O
LOCK_SH	int
;	O
if	O
(	O
flags	int
&	O
LOCK_UN	int
)	O
{	O
if	O
(	O
*	O
user	pointer
&	O
LOCK_UN	int
)	O
return	O
0	int
;	O
assert	O
(	O
*	O
user	pointer
==	O
box	pointer
->	O
type	enum
||	O
(	O
*	O
user	pointer
==	O
LOCK_SH	int
&&	O
box	pointer
->	O
type	enum
==	O
(	O
LOCK_SH	int
|	O
LOCK_EX	int
)	O
)	O
)	O
;	O
assert	O
(	O
*	O
user	pointer
==	O
LOCK_SH	int
||	O
*	O
user	pointer
==	O
LOCK_EX	int
||	O
*	O
user	pointer
==	O
(	O
LOCK_SH	int
|	O
LOCK_EX	int
)	O
)	O
;	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_SH	int
)	O
{	O
if	O
(	O
!	O
--	O
box	pointer
->	O
shcount	int
)	O
box	pointer
->	O
type	enum
=	O
LOCK_UN	int
;	O
}	O
else	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_EX	int
)	O
box	pointer
->	O
type	enum
=	O
LOCK_UN	int
;	O
if	O
(	O
box	pointer
->	O
type	enum
==	O
LOCK_UN	int
&&	O
box	pointer
->	O
waiting	int
)	O
{	O
box	pointer
->	O
waiting	int
=	O
0	int
;	O
pthread_cond_broadcast	function
(	O
&	O
box	pointer
->	O
wait	int
)	O
;	O
}	O
if	O
(	O
box	pointer
->	O
type	enum
==	O
(	O
LOCK_SH	int
|	O
LOCK_EX	int
)	O
&&	O
box	pointer
->	O
shcount	int
==	O
1	int
&&	O
box	pointer
->	O
waiting	int
)	O
{	O
box	pointer
->	O
waiting	int
=	O
0	int
;	O
pthread_cond_broadcast	function
(	O
&	O
box	pointer
->	O
wait	int
)	O
;	O
}	O
*	O
user	pointer
=	O
LOCK_UN	int
;	O
}	O
else	O
{	O
if	O
(	O
atomic	int
&&	O
*	O
user	pointer
==	O
(	O
flags	int
&	O
(	O
LOCK_SH	int
|	O
LOCK_EX	int
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
atomic	int
&&	O
*	O
user	pointer
==	O
LOCK_EX	int
&&	O
flags	int
&	O
LOCK_SH	int
)	O
{	O
*	O
user	pointer
=	O
LOCK_SH	int
;	O
box	pointer
->	O
type	enum
=	O
LOCK_SH	int
;	O
box	pointer
->	O
shcount	int
=	O
1	int
;	O
if	O
(	O
box	pointer
->	O
waiting	int
)	O
{	O
box	pointer
->	O
waiting	int
=	O
0	int
;	O
pthread_cond_broadcast	function
(	O
&	O
box	pointer
->	O
wait	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_SH	int
&&	O
atomic	int
&&	O
box	pointer
->	O
type	enum
==	O
(	O
LOCK_SH	int
|	O
LOCK_EX	int
)	O
)	O
return	O
EDEADLK	int
;	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_EX	int
&&	O
!	O
atomic	int
)	O
{	O
*	O
user	pointer
=	O
LOCK_UN	int
;	O
box	pointer
->	O
type	enum
=	O
LOCK_UN	int
;	O
if	O
(	O
box	pointer
->	O
waiting	int
)	O
{	O
box	pointer
->	O
waiting	int
=	O
0	int
;	O
pthread_cond_broadcast	function
(	O
&	O
box	pointer
->	O
wait	int
)	O
;	O
}	O
}	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_SH	int
&&	O
!	O
atomic	int
)	O
{	O
*	O
user	pointer
=	O
LOCK_UN	int
;	O
if	O
(	O
!	O
--	O
box	pointer
->	O
shcount	int
)	O
{	O
box	pointer
->	O
type	enum
=	O
LOCK_UN	int
;	O
if	O
(	O
box	pointer
->	O
waiting	int
)	O
{	O
box	pointer
->	O
waiting	int
=	O
0	int
;	O
pthread_cond_broadcast	function
(	O
&	O
box	pointer
->	O
wait	int
)	O
;	O
}	O
}	O
if	O
(	O
box	pointer
->	O
type	enum
==	O
(	O
LOCK_SH	int
|	O
LOCK_EX	int
)	O
&&	O
box	pointer
->	O
shcount	int
==	O
1	int
&&	O
box	pointer
->	O
waiting	int
)	O
{	O
box	pointer
->	O
waiting	int
=	O
0	int
;	O
pthread_cond_broadcast	function
(	O
&	O
box	pointer
->	O
wait	int
)	O
;	O
}	O
}	O
while	O
(	O
box	pointer
->	O
type	enum
&	O
LOCK_EX	int
)	O
{	O
if	O
(	O
flags	int
&	O
LOCK_NB	int
)	O
return	O
EWOULDBLOCK	O
;	O
box	pointer
->	O
waiting	int
=	O
1	int
;	O
if	O
(	O
pthread_hurd_cond_wait_np	function
(	O
&	O
box	pointer
->	O
wait	int
,	O
mut	pointer
)	O
)	O
return	O
EINTR	int
;	O
}	O
assert	O
(	O
(	O
flags	int
&	O
LOCK_SH	int
)	O
||	O
(	O
flags	int
&	O
LOCK_EX	int
)	O
)	O
;	O
if	O
(	O
flags	int
&	O
LOCK_SH	int
)	O
{	O
assert	O
(	O
!	O
(	O
box	pointer
->	O
type	enum
&	O
LOCK_EX	int
)	O
)	O
;	O
*	O
user	pointer
=	O
LOCK_SH	int
;	O
box	pointer
->	O
type	enum
=	O
LOCK_SH	int
;	O
box	pointer
->	O
shcount	int
++	O
;	O
}	O
else	O
if	O
(	O
flags	int
&	O
LOCK_EX	int
)	O
{	O
while	O
(	O
(	O
*	O
user	pointer
==	O
LOCK_SH	int
&&	O
box	pointer
->	O
shcount	int
>	O
1	int
)	O
||	O
(	O
*	O
user	pointer
==	O
LOCK_UN	int
&&	O
box	pointer
->	O
type	enum
!=	O
LOCK_UN	int
)	O
)	O
{	O
if	O
(	O
flags	int
&	O
LOCK_NB	int
)	O
return	O
EWOULDBLOCK	O
;	O
else	O
{	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_SH	int
&&	O
atomic	int
)	O
box	pointer
->	O
type	enum
=	O
LOCK_SH	int
|	O
LOCK_EX	int
;	O
box	pointer
->	O
waiting	int
=	O
1	int
;	O
if	O
(	O
pthread_hurd_cond_wait_np	function
(	O
&	O
box	pointer
->	O
wait	int
,	O
mut	pointer
)	O
)	O
return	O
EINTR	int
;	O
}	O
}	O
if	O
(	O
*	O
user	pointer
==	O
LOCK_SH	int
)	O
{	O
assert	O
(	O
box	pointer
->	O
shcount	int
==	O
1	int
)	O
;	O
box	pointer
->	O
shcount	int
=	O
0	int
;	O
}	O
box	pointer
->	O
type	enum
=	O
LOCK_EX	int
;	O
*	O
user	pointer
=	O
LOCK_EX	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
