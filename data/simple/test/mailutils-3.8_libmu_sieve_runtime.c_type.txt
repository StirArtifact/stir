void	O
_mu_i_sv_instr_locus	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_locus_point_set_file	function
(	O
&	O
mach	pointer
->	O
locus	struct
.	O
beg	struct
,	O
mu_i_sv_id_str	function
(	O
mach	pointer
,	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
0	int
,	O
pc	long
)	O
)	O
)	O
;	O
mach	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_line	int
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
1	int
,	O
unum	int
)	O
;	O
mach	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_col	int
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
2	int
,	O
unum	int
)	O
;	O
mu_locus_point_set_file	function
(	O
&	O
mach	pointer
->	O
locus	struct
.	O
end	struct
,	O
mu_i_sv_id_str	function
(	O
mach	pointer
,	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
3	int
,	O
pc	long
)	O
)	O
)	O
;	O
mach	pointer
->	O
locus	struct
.	O
end	struct
.	O
mu_line	int
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
4	int
,	O
unum	int
)	O
;	O
mach	pointer
->	O
locus	struct
.	O
end	struct
.	O
mu_col	int
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
5	int
,	O
unum	int
)	O
;	O
mu_stream_ioctl	function
(	O
mach	pointer
->	O
errstream	pointer
,	O
MU_IOCTL_LOGSTREAM	int
,	O
MU_IOCTL_LOGSTREAM_SET_LOCUS_RANGE	int
,	O
&	O
mach	pointer
->	O
locus	struct
)	O
;	O
if	O
(	O
INSTR_DEBUG	O
(	O
mach	pointer
)	O
)	O
mu_i_sv_debug	function
(	O
mach	pointer
,	O
mach	pointer
->	O
pc	long
-	O
1	int
,	O
"LOCUS"	pointer
)	O
;	O
SIEVE_RT_ADJUST	O
(	O
mach	pointer
,	O
6	int
)	O
;	O
}	O
static	O
int	O
instr_run	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
what	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
mu_sieve_handler_t	pointer
han	pointer
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
0	int
,	O
handler	array
)	O
;	O
mach	pointer
->	O
argstart	long
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
1	int
,	O
pc	long
)	O
;	O
mach	pointer
->	O
argcount	long
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
2	int
,	O
pc	long
)	O
;	O
mach	pointer
->	O
tagcount	long
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
3	int
,	O
pc	long
)	O
;	O
mach	pointer
->	O
identifier	pointer
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
4	int
,	O
string	pointer
)	O
;	O
mach	pointer
->	O
comparator	pointer
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
5	int
,	O
comp	array
)	O
;	O
SIEVE_RT_ADJUST	O
(	O
mach	pointer
,	O
6	int
)	O
;	O
if	O
(	O
INSTR_DEBUG	O
(	O
mach	pointer
)	O
)	O
mu_i_sv_debug_command	function
(	O
mach	pointer
,	O
mach	pointer
->	O
pc	long
-	O
7	int
,	O
what	pointer
)	O
;	O
else	O
mu_i_sv_trace	function
(	O
mach	pointer
,	O
what	pointer
)	O
;	O
if	O
(	O
!	O
INSTR_DISASS	O
(	O
mach	pointer
)	O
)	O
rc	int
=	O
han	pointer
(	O
mach	pointer
)	O
;	O
mach	pointer
->	O
argstart	long
=	O
0	int
;	O
mach	pointer
->	O
argcount	long
=	O
0	int
;	O
mach	pointer
->	O
tagcount	long
=	O
0	int
;	O
mach	pointer
->	O
identifier	pointer
=	O
NULL	O
;	O
mach	pointer
->	O
comparator	pointer
=	O
NULL	O
;	O
return	O
rc	int
;	O
}	O
void	O
_mu_i_sv_instr_action	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mach	pointer
->	O
action_count	int
++	O
;	O
instr_run	function
(	O
mach	pointer
,	O
"ACTION"	pointer
)	O
;	O
}	O
void	O
_mu_i_sv_instr_test	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mach	pointer
->	O
reg	long
=	O
instr_run	function
(	O
mach	pointer
,	O
"TEST"	pointer
)	O
;	O
}	O
void	O
_mu_i_sv_instr_not	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
if	O
(	O
INSTR_DEBUG	O
(	O
mach	pointer
)	O
)	O
mu_i_sv_debug	function
(	O
mach	pointer
,	O
mach	pointer
->	O
pc	long
-	O
1	int
,	O
"NOT"	pointer
)	O
;	O
if	O
(	O
INSTR_DISASS	O
(	O
mach	pointer
)	O
)	O
return	O
;	O
mach	pointer
->	O
reg	long
=	O
!	O
mach	pointer
->	O
reg	long
;	O
}	O
void	O
_mu_i_sv_instr_branch	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
long	O
num	long
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
0	int
,	O
number	long
)	O
;	O
SIEVE_RT_ADJUST	O
(	O
mach	pointer
,	O
1	int
)	O
;	O
if	O
(	O
INSTR_DEBUG	O
(	O
mach	pointer
)	O
)	O
mu_i_sv_debug	function
(	O
mach	pointer
,	O
mach	pointer
->	O
pc	long
-	O
2	int
,	O
"BRANCH %lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
(	O
mach	pointer
->	O
pc	long
+	O
num	long
)	O
)	O
;	O
if	O
(	O
INSTR_DISASS	O
(	O
mach	pointer
)	O
)	O
return	O
;	O
mach	pointer
->	O
pc	long
+=	O
num	long
;	O
}	O
void	O
_mu_i_sv_instr_brz	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
long	O
num	long
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
0	int
,	O
number	long
)	O
;	O
SIEVE_RT_ADJUST	O
(	O
mach	pointer
,	O
1	int
)	O
;	O
if	O
(	O
INSTR_DEBUG	O
(	O
mach	pointer
)	O
)	O
mu_i_sv_debug	function
(	O
mach	pointer
,	O
mach	pointer
->	O
pc	long
-	O
2	int
,	O
"BRZ %lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
(	O
mach	pointer
->	O
pc	long
+	O
num	long
)	O
)	O
;	O
if	O
(	O
INSTR_DISASS	O
(	O
mach	pointer
)	O
)	O
return	O
;	O
if	O
(	O
!	O
mach	pointer
->	O
reg	long
)	O
mach	pointer
->	O
pc	long
+=	O
num	long
;	O
}	O
void	O
_mu_i_sv_instr_brnz	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
long	O
num	long
=	O
SIEVE_RT_ARG	O
(	O
mach	pointer
,	O
0	int
,	O
number	long
)	O
;	O
SIEVE_RT_ADJUST	O
(	O
mach	pointer
,	O
1	int
)	O
;	O
if	O
(	O
INSTR_DEBUG	O
(	O
mach	pointer
)	O
)	O
mu_i_sv_debug	function
(	O
mach	pointer
,	O
mach	pointer
->	O
pc	long
-	O
2	int
,	O
"BRNZ %lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
(	O
mach	pointer
->	O
pc	long
+	O
num	long
)	O
)	O
;	O
if	O
(	O
INSTR_DISASS	O
(	O
mach	pointer
)	O
)	O
return	O
;	O
if	O
(	O
mach	pointer
->	O
reg	long
)	O
mach	pointer
->	O
pc	long
+=	O
num	long
;	O
}	O
void	O
mu_sieve_abort	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
longjmp	function
(	O
mach	pointer
->	O
errbuf	array
,	O
MU_ERR_FAILURE	O
)	O
;	O
}	O
void	O
mu_sieve_set_data	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mach	pointer
->	O
data	pointer
=	O
data	pointer
;	O
}	O
void	O
*	O
mu_sieve_get_data	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
return	O
mach	pointer
->	O
data	pointer
;	O
}	O
int	O
mu_sieve_get_locus	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
struct	O
mu_locus_range	struct
*	O
loc	pointer
)	O
{	O
return	O
mu_locus_range_copy	function
(	O
loc	pointer
,	O
&	O
mach	pointer
->	O
locus	struct
)	O
;	O
}	O
mu_mailbox_t	pointer
mu_sieve_get_mailbox	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
return	O
mach	pointer
->	O
mailbox	pointer
;	O
}	O
mu_message_t	pointer
mu_sieve_get_message	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
if	O
(	O
!	O
mach	pointer
->	O
msg	pointer
)	O
mu_mailbox_get_message	function
(	O
mach	pointer
->	O
mailbox	pointer
,	O
mach	pointer
->	O
msgno	long
,	O
&	O
mach	pointer
->	O
msg	pointer
)	O
;	O
return	O
mach	pointer
->	O
msg	pointer
;	O
}	O
size_t	long
mu_sieve_get_message_num	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
return	O
mach	pointer
->	O
msgno	long
;	O
}	O
const	O
char	O
*	O
mu_sieve_get_identifier	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
return	O
mach	pointer
->	O
identifier	pointer
;	O
}	O
void	O
mu_sieve_get_argc	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
size_t	long
*	O
args	pointer
,	O
size_t	long
*	O
tags	pointer
)	O
{	O
if	O
(	O
args	pointer
)	O
*	O
args	pointer
=	O
mach	pointer
->	O
argcount	long
;	O
if	O
(	O
tags	pointer
)	O
*	O
tags	pointer
=	O
mach	pointer
->	O
tagcount	long
;	O
}	O
int	O
mu_sieve_is_dry_run	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
return	O
mach	pointer
->	O
dry_run	int
;	O
}	O
int	O
mu_sieve_set_dry_run	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
int	O
val	pointer
)	O
{	O
if	O
(	O
mach	pointer
->	O
state	pointer
!=	O
mu_sieve_state_compiled	int
)	O
return	O
EINVAL	int
;	O
return	O
mach	pointer
->	O
dry_run	int
=	O
val	pointer
;	O
}	O
int	O
sieve_run	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
int	O
rc	int
;	O
mu_sieve_stream_save	function
(	O
mach	pointer
)	O
;	O
rc	int
=	O
setjmp	function
(	O
mach	pointer
->	O
errbuf	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mach	pointer
->	O
action_count	int
=	O
0	int
;	O
mu_i_sv_init_variables	function
(	O
mach	pointer
)	O
;	O
for	O
(	O
mach	pointer
->	O
pc	long
=	O
1	int
;	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
]	O
.	O
handler	array
;	O
)	O
(	O
*	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
.	O
instr	pointer
)	O
(	O
mach	pointer
)	O
;	O
if	O
(	O
mach	pointer
->	O
action_count	int
==	O
0	int
)	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"IMPLICIT KEEP"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
INSTR_DEBUG	O
(	O
mach	pointer
)	O
)	O
mu_i_sv_debug	function
(	O
mach	pointer
,	O
mach	pointer
->	O
pc	long
,	O
"STOP"	pointer
)	O
;	O
}	O
mu_sieve_stream_restore	function
(	O
mach	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_sieve_disass	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
mach	pointer
->	O
state	pointer
!=	O
mu_sieve_state_compiled	int
)	O
return	O
EINVAL	int
;	O
mach	pointer
->	O
state	pointer
=	O
mu_sieve_state_disass	int
;	O
rc	int
=	O
sieve_run	function
(	O
mach	pointer
)	O
;	O
mach	pointer
->	O
state	pointer
=	O
mu_sieve_state_compiled	int
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_sieve_action	function
(	O
mu_observer_t	pointer
obs	pointer
,	O
size_t	long
type	int
,	O
void	O
*	O
data	pointer
,	O
void	O
*	O
action_data	pointer
)	O
{	O
mu_sieve_machine_t	pointer
mach	pointer
;	O
if	O
(	O
type	int
!=	O
MU_EVT_MESSAGE_ADD	int
)	O
return	O
0	int
;	O
mach	pointer
=	O
mu_observer_get_owner	function
(	O
obs	pointer
)	O
;	O
mach	pointer
->	O
msgno	long
++	O
;	O
mu_mailbox_get_message	function
(	O
mach	pointer
->	O
mailbox	pointer
,	O
mach	pointer
->	O
msgno	long
,	O
&	O
mach	pointer
->	O
msg	pointer
)	O
;	O
sieve_run	function
(	O
mach	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_sieve_mailbox	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	long
total	long
;	O
mu_observer_t	pointer
observer	pointer
;	O
mu_observable_t	pointer
observable	pointer
;	O
if	O
(	O
!	O
mach	pointer
||	O
!	O
mbox	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mach	pointer
->	O
state	pointer
!=	O
mu_sieve_state_compiled	int
)	O
return	O
EINVAL	int
;	O
mach	pointer
->	O
state	pointer
=	O
mu_sieve_state_running	int
;	O
mu_observer_create	function
(	O
&	O
observer	pointer
,	O
mach	pointer
)	O
;	O
mu_observer_set_action	function
(	O
observer	pointer
,	O
_sieve_action	function
,	O
mach	pointer
)	O
;	O
mu_mailbox_get_observable	function
(	O
mbox	pointer
,	O
&	O
observable	pointer
)	O
;	O
mu_observable_attach	function
(	O
observable	pointer
,	O
MU_EVT_MESSAGE_ADD	int
,	O
observer	pointer
)	O
;	O
mach	pointer
->	O
mailbox	pointer
=	O
mbox	pointer
;	O
mach	pointer
->	O
msgno	long
=	O
0	int
;	O
rc	int
=	O
mu_mailbox_scan	function
(	O
mbox	pointer
,	O
1	int
,	O
&	O
total	long
)	O
;	O
if	O
(	O
rc	int
)	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"mu_mailbox_scan: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
mu_observable_detach	function
(	O
observable	pointer
,	O
observer	pointer
)	O
;	O
mu_observer_destroy	function
(	O
&	O
observer	pointer
,	O
mach	pointer
)	O
;	O
mach	pointer
->	O
state	pointer
=	O
mu_sieve_state_compiled	int
;	O
mach	pointer
->	O
mailbox	pointer
=	O
NULL	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_sieve_message	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_message_t	pointer
msg	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
!	O
mach	pointer
||	O
!	O
msg	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mach	pointer
->	O
state	pointer
!=	O
mu_sieve_state_compiled	int
)	O
return	O
EINVAL	int
;	O
mach	pointer
->	O
state	pointer
=	O
mu_sieve_state_running	int
;	O
mach	pointer
->	O
msgno	long
=	O
1	int
;	O
mach	pointer
->	O
msg	pointer
=	O
msg	pointer
;	O
mach	pointer
->	O
mailbox	pointer
=	O
NULL	O
;	O
rc	int
=	O
sieve_run	function
(	O
mach	pointer
)	O
;	O
mach	pointer
->	O
state	pointer
=	O
mu_sieve_state_compiled	int
;	O
mach	pointer
->	O
msg	pointer
=	O
NULL	O
;	O
return	O
rc	int
;	O
}	O
