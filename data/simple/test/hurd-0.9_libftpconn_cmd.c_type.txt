static	O
error_t	int
_write	function
(	O
int	O
fd	pointer
,	O
const	O
void	O
*	O
buf	pointer
,	O
size_t	long
len	long
)	O
{	O
while	O
(	O
len	long
>	O
0	int
)	O
{	O
ssize_t	long
wr	long
=	O
write	function
(	O
fd	pointer
,	O
buf	pointer
,	O
len	long
)	O
;	O
if	O
(	O
wr	long
<	O
0	int
)	O
return	O
errno	O
;	O
else	O
if	O
(	O
wr	long
==	O
0	int
)	O
return	O
EPIPE	int
;	O
buf	pointer
+=	O
wr	long
;	O
len	long
-=	O
wr	long
;	O
}	O
return	O
0	int
;	O
}	O
static	O
error_t	int
_skip_write	function
(	O
int	O
fd	pointer
,	O
const	O
void	O
*	O
buf	pointer
,	O
size_t	long
len	long
,	O
size_t	long
*	O
skip	pointer
)	O
{	O
size_t	long
sk	long
=	O
*	O
skip	pointer
;	O
error_t	int
err	int
=	O
0	int
;	O
if	O
(	O
len	long
>	O
sk	long
)	O
{	O
err	int
=	O
_write	function
(	O
fd	pointer
,	O
buf	pointer
+	O
sk	long
,	O
len	long
-	O
sk	long
)	O
;	O
*	O
skip	pointer
=	O
0	int
;	O
}	O
else	O
*	O
skip	pointer
=	O
sk	long
-	O
len	long
;	O
return	O
err	int
;	O
}	O
static	O
error_t	int
_long_cmd	function
(	O
int	O
fd	pointer
,	O
const	O
char	O
*	O
cmd	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
size_t	long
skip	pointer
)	O
{	O
error_t	int
err	int
=	O
_skip_write	function
(	O
fd	pointer
,	O
cmd	pointer
,	O
strlen	function
(	O
cmd	pointer
)	O
,	O
&	O
skip	pointer
)	O
;	O
if	O
(	O
!	O
err	int
&&	O
arg	pointer
)	O
{	O
err	int
=	O
_skip_write	function
(	O
fd	pointer
,	O
" "	pointer
,	O
1	int
,	O
&	O
skip	pointer
)	O
;	O
if	O
(	O
!	O
err	int
)	O
err	int
=	O
_skip_write	function
(	O
fd	pointer
,	O
arg	pointer
,	O
strlen	function
(	O
arg	pointer
)	O
,	O
&	O
skip	pointer
)	O
;	O
}	O
if	O
(	O
!	O
err	int
)	O
err	int
=	O
_skip_write	function
(	O
fd	pointer
,	O
"\r\n"	pointer
,	O
2	int
,	O
&	O
skip	pointer
)	O
;	O
return	O
err	int
;	O
}	O
error_t	int
ftp_conn_cmd	function
(	O
struct	O
ftp_conn	struct
*	O
conn	pointer
,	O
const	O
char	O
*	O
cmd	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
int	O
*	O
reply	pointer
,	O
const	O
char	O
*	O
*	O
reply_txt	pointer
)	O
{	O
error_t	int
err	int
=	O
0	int
;	O
if	O
(	O
conn	pointer
->	O
control	int
<	O
0	int
)	O
err	int
=	O
EPIPE	int
;	O
else	O
{	O
char	O
buf	pointer
[	O
200	int
]	O
;	O
size_t	long
out	long
=	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
arg	pointer
?	O
"%s %s\r\n"	pointer
:	O
"%s\r\n"	pointer
,	O
cmd	pointer
,	O
arg	pointer
)	O
;	O
err	int
=	O
_write	function
(	O
conn	pointer
->	O
control	int
,	O
buf	pointer
,	O
out	long
)	O
;	O
if	O
(	O
!	O
err	int
&&	O
conn	pointer
->	O
hooks	pointer
&&	O
conn	pointer
->	O
hooks	pointer
->	O
cntl_debug	pointer
)	O
{	O
buf	pointer
[	O
out	long
-	O
2	int
]	O
=	O
'\0'	O
;	O
(	O
*	O
conn	pointer
->	O
hooks	pointer
->	O
cntl_debug	pointer
)	O
(	O
conn	pointer
,	O
FTP_CONN_CNTL_DEBUG_CMD	int
,	O
buf	pointer
)	O
;	O
}	O
if	O
(	O
!	O
err	int
&&	O
out	long
==	O
sizeof	O
buf	pointer
)	O
err	int
=	O
_long_cmd	function
(	O
conn	pointer
->	O
control	int
,	O
cmd	pointer
,	O
arg	pointer
,	O
sizeof	O
buf	pointer
)	O
;	O
}	O
if	O
(	O
!	O
err	int
&&	O
(	O
reply	pointer
||	O
reply_txt	pointer
)	O
)	O
err	int
=	O
ftp_conn_get_reply	function
(	O
conn	pointer
,	O
reply	pointer
,	O
reply_txt	pointer
)	O
;	O
return	O
err	int
;	O
}	O
error_t	int
ftp_conn_cmd_reopen	function
(	O
struct	O
ftp_conn	struct
*	O
conn	pointer
,	O
const	O
char	O
*	O
cmd	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
int	O
*	O
reply	pointer
,	O
const	O
char	O
*	O
*	O
reply_txt	pointer
)	O
{	O
int	O
_reply	int
;	O
error_t	int
err	int
;	O
err	int
=	O
ftp_conn_cmd	function
(	O
conn	pointer
,	O
cmd	pointer
,	O
arg	pointer
,	O
&	O
_reply	int
,	O
reply_txt	pointer
)	O
;	O
if	O
(	O
err	int
==	O
EPIPE	int
||	O
(	O
!	O
err	int
&&	O
_reply	int
==	O
REPLY_CLOSED	int
)	O
)	O
{	O
err	int
=	O
ftp_conn_open	function
(	O
conn	pointer
)	O
;	O
if	O
(	O
!	O
err	int
)	O
err	int
=	O
ftp_conn_cmd	function
(	O
conn	pointer
,	O
cmd	pointer
,	O
arg	pointer
,	O
reply	pointer
,	O
reply_txt	pointer
)	O
;	O
}	O
else	O
if	O
(	O
reply	pointer
)	O
*	O
reply	pointer
=	O
_reply	int
;	O
return	O
err	int
;	O
}	O
void	O
ftp_conn_abort	function
(	O
struct	O
ftp_conn	struct
*	O
conn	pointer
)	O
{	O
if	O
(	O
conn	pointer
->	O
control	int
>=	O
0	int
)	O
{	O
static	O
const	O
char	O
ip	array
[	O
]	O
=	O
{	O
IAC	int
,	O
IP	int
,	O
IAC	int
}	O
;	O
static	O
const	O
char	O
abor	array
[	O
]	O
=	O
{	O
DM	int
,	O
'a'	O
,	O
'b'	O
,	O
'o'	O
,	O
'r'	O
,	O
'\r'	O
,	O
'\n'	O
}	O
;	O
if	O
(	O
conn	pointer
->	O
hooks	pointer
&&	O
conn	pointer
->	O
hooks	pointer
->	O
cntl_debug	pointer
)	O
(	O
*	O
conn	pointer
->	O
hooks	pointer
->	O
cntl_debug	pointer
)	O
(	O
conn	pointer
,	O
FTP_CONN_CNTL_DEBUG_CMD	int
,	O
"abor"	pointer
)	O
;	O
if	O
(	O
send	function
(	O
conn	pointer
->	O
control	int
,	O
ip	array
,	O
sizeof	O
ip	array
,	O
MSG_OOB	int
)	O
==	O
sizeof	O
ip	array
&&	O
write	function
(	O
conn	pointer
->	O
control	int
,	O
abor	array
,	O
sizeof	O
abor	array
)	O
==	O
sizeof	O
abor	array
)	O
{	O
int	O
reply	pointer
;	O
do	O
ftp_conn_get_raw_reply	function
(	O
conn	pointer
,	O
&	O
reply	pointer
,	O
0	int
)	O
;	O
while	O
(	O
reply	pointer
==	O
REPLY_ABORTED	int
)	O
;	O
if	O
(	O
reply	pointer
!=	O
REPLY_TRANS_OK	int
&&	O
reply	pointer
!=	O
REPLY_ABORT_OK	int
)	O
ftp_conn_close	function
(	O
conn	pointer
)	O
;	O
}	O
else	O
ftp_conn_close	function
(	O
conn	pointer
)	O
;	O
}	O
}	O
