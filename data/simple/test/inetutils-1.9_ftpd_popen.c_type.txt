struct	O
file_pid	struct
{	O
FILE	struct
*	O
file	pointer
;	O
pid_t	int
pid	int
;	O
struct	O
file_pid	struct
*	O
next	pointer
;	O
}	O
;	O
struct	O
file_pid	struct
*	O
file_pids	pointer
=	O
0	int
;	O
extern	O
int	O
ls_main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
;	O
FILE	struct
*	O
ftpd_popen	function
(	O
char	O
*	O
program	pointer
,	O
const	O
char	O
*	O
type	int
)	O
{	O
char	O
*	O
cp	pointer
;	O
FILE	struct
*	O
iop	pointer
;	O
struct	O
file_pid	struct
*	O
fpid	pointer
;	O
int	O
argc	int
,	O
gargc	int
,	O
pdes	array
[	O
2	int
]	O
,	O
pid	int
;	O
char	O
*	O
*	O
pop	pointer
,	O
*	O
argv	array
[	O
MAX_ARGC	int
]	O
,	O
*	O
gargv	array
[	O
MAX_GARGC	int
]	O
;	O
if	O
(	O
(	O
(	O
*	O
type	int
!=	O
'r'	O
)	O
&&	O
(	O
*	O
type	int
!=	O
'w'	O
)	O
)	O
||	O
type	int
[	O
1	int
]	O
)	O
return	O
(	O
NULL	O
)	O
;	O
if	O
(	O
pipe	function
(	O
pdes	array
)	O
<	O
0	int
)	O
return	O
(	O
NULL	O
)	O
;	O
for	O
(	O
argc	int
=	O
0	int
,	O
cp	pointer
=	O
program	pointer
;	O
argc	int
<	O
MAX_ARGC	int
-	O
1	int
;	O
cp	pointer
=	O
NULL	O
,	O
argc	int
++	O
)	O
if	O
(	O
!	O
(	O
argv	array
[	O
argc	int
]	O
=	O
strtok	function
(	O
cp	pointer
,	O
" \t\n"	pointer
)	O
)	O
)	O
break	O
;	O
argv	array
[	O
MAX_ARGC	int
-	O
1	int
]	O
=	O
NULL	O
;	O
gargv	array
[	O
0	int
]	O
=	O
argv	array
[	O
0	int
]	O
;	O
for	O
(	O
gargc	int
=	O
argc	int
=	O
1	int
;	O
argv	array
[	O
argc	int
]	O
;	O
argc	int
++	O
)	O
{	O
glob_t	struct
gl	struct
;	O
int	O
flags	int
=	O
GLOB_NOCHECK	O
;	O
flags	int
|=	O
GLOB_BRACE	O
;	O
flags	int
|=	O
GLOB_TILDE	O
;	O
memset	function
(	O
&	O
gl	struct
,	O
0	int
,	O
sizeof	O
(	O
gl	struct
)	O
)	O
;	O
if	O
(	O
glob	O
(	O
argv	array
[	O
argc	int
]	O
,	O
flags	int
,	O
NULL	O
,	O
&	O
gl	struct
)	O
)	O
gargv	array
[	O
gargc	int
++	O
]	O
=	O
strdup	function
(	O
argv	array
[	O
argc	int
]	O
)	O
;	O
else	O
for	O
(	O
pop	pointer
=	O
gl	struct
.	O
gl_pathv	pointer
;	O
*	O
pop	pointer
;	O
pop	pointer
++	O
)	O
gargv	array
[	O
gargc	int
++	O
]	O
=	O
strdup	function
(	O
*	O
pop	pointer
)	O
;	O
globfree	O
(	O
&	O
gl	struct
)	O
;	O
}	O
gargv	array
[	O
gargc	int
]	O
=	O
NULL	O
;	O
iop	pointer
=	O
NULL	O
;	O
pid	int
=	O
(	O
strcmp	function
(	O
gargv	array
[	O
0	int
]	O
,	O
"/bin/ls"	pointer
)	O
==	O
0	int
)	O
?	O
fork	function
(	O
)	O
:	O
vfork	function
(	O
)	O
;	O
switch	O
(	O
pid	int
)	O
{	O
case	O
-	O
1	int
:	O
close	pointer
(	O
pdes	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
pdes	array
[	O
1	int
]	O
)	O
;	O
goto	O
pfree	O
;	O
case	O
0	int
:	O
if	O
(	O
*	O
type	int
==	O
'r'	O
)	O
{	O
if	O
(	O
pdes	array
[	O
1	int
]	O
!=	O
STDOUT_FILENO	int
)	O
{	O
dup2	function
(	O
pdes	array
[	O
1	int
]	O
,	O
STDOUT_FILENO	int
)	O
;	O
close	pointer
(	O
pdes	array
[	O
1	int
]	O
)	O
;	O
}	O
dup2	function
(	O
STDOUT_FILENO	int
,	O
STDERR_FILENO	int
)	O
;	O
close	pointer
(	O
pdes	array
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
pdes	array
[	O
0	int
]	O
!=	O
STDIN_FILENO	int
)	O
{	O
dup2	function
(	O
pdes	array
[	O
0	int
]	O
,	O
STDIN_FILENO	int
)	O
;	O
close	pointer
(	O
pdes	array
[	O
0	int
]	O
)	O
;	O
}	O
close	pointer
(	O
pdes	array
[	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
gargv	array
[	O
0	int
]	O
,	O
"/bin/ls"	pointer
)	O
==	O
0	int
)	O
{	O
optind	int
=	O
0	int
;	O
exit	function
(	O
ls_main	function
(	O
gargc	int
,	O
gargv	array
)	O
)	O
;	O
}	O
execv	function
(	O
gargv	array
[	O
0	int
]	O
,	O
gargv	array
)	O
;	O
_exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
*	O
type	int
==	O
'r'	O
)	O
{	O
iop	pointer
=	O
fdopen	function
(	O
pdes	array
[	O
0	int
]	O
,	O
type	int
)	O
;	O
close	pointer
(	O
pdes	array
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
iop	pointer
=	O
fdopen	function
(	O
pdes	array
[	O
1	int
]	O
,	O
type	int
)	O
;	O
close	pointer
(	O
pdes	array
[	O
0	int
]	O
)	O
;	O
}	O
fpid	pointer
=	O
(	O
struct	O
file_pid	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
file_pid	struct
)	O
)	O
;	O
if	O
(	O
fpid	pointer
)	O
{	O
fpid	pointer
->	O
file	pointer
=	O
iop	pointer
;	O
fpid	pointer
->	O
pid	int
=	O
pid	int
;	O
fpid	pointer
->	O
next	pointer
=	O
file_pids	pointer
;	O
file_pids	pointer
=	O
fpid	pointer
;	O
}	O
pfree	O
:	O
for	O
(	O
argc	int
=	O
1	int
;	O
gargv	array
[	O
argc	int
]	O
!=	O
NULL	O
;	O
argc	int
++	O
)	O
free	function
(	O
gargv	array
[	O
argc	int
]	O
)	O
;	O
return	O
(	O
iop	pointer
)	O
;	O
}	O
int	O
ftpd_pclose	function
(	O
FILE	struct
*	O
iop	pointer
)	O
{	O
struct	O
file_pid	struct
*	O
fpid	pointer
=	O
file_pids	pointer
,	O
*	O
prev_fpid	pointer
=	O
0	int
;	O
int	O
status	int
;	O
sigset_t	struct
sigs	struct
,	O
osigs	struct
;	O
pid_t	int
pid	int
;	O
while	O
(	O
fpid	pointer
&&	O
fpid	pointer
->	O
file	pointer
!=	O
iop	pointer
)	O
{	O
prev_fpid	pointer
=	O
fpid	pointer
;	O
fpid	pointer
=	O
fpid	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
!	O
fpid	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
prev_fpid	pointer
)	O
prev_fpid	pointer
->	O
next	pointer
=	O
fpid	pointer
->	O
next	pointer
;	O
else	O
file_pids	pointer
=	O
fpid	pointer
->	O
next	pointer
;	O
fclose	function
(	O
iop	pointer
)	O
;	O
sigemptyset	function
(	O
&	O
sigs	struct
)	O
;	O
sigaddset	function
(	O
&	O
sigs	struct
,	O
SIGINT	int
)	O
;	O
sigaddset	function
(	O
&	O
sigs	struct
,	O
SIGQUIT	int
)	O
;	O
sigaddset	function
(	O
&	O
sigs	struct
,	O
SIGHUP	int
)	O
;	O
sigprocmask	function
(	O
SIG_BLOCK	int
,	O
&	O
sigs	struct
,	O
&	O
osigs	struct
)	O
;	O
while	O
(	O
(	O
pid	int
=	O
waitpid	function
(	O
fpid	pointer
->	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
)	O
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
free	function
(	O
fpid	pointer
)	O
;	O
sigprocmask	function
(	O
SIG_SETMASK	int
,	O
&	O
osigs	struct
,	O
0	int
)	O
;	O
if	O
(	O
pid	int
<	O
0	int
)	O
return	O
(	O
pid	int
)	O
;	O
if	O
(	O
WIFEXITED	O
(	O
status	int
)	O
)	O
return	O
(	O
WEXITSTATUS	O
(	O
status	int
)	O
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
