struct	O
memory_cell	struct
{	O
void	O
*	O
ptr	pointer
;	O
void	O
(	O
*	O
reclaim	pointer
)	O
(	O
void	O
*	O
)	O
;	O
}	O
;	O
static	O
void	O
memory_cell_destroy	function
(	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
memory_cell	struct
*	O
mcp	pointer
=	O
item	pointer
;	O
if	O
(	O
!	O
mcp	pointer
->	O
reclaim	pointer
)	O
abort	function
(	O
)	O
;	O
else	O
mcp	pointer
->	O
reclaim	pointer
(	O
mcp	pointer
->	O
ptr	pointer
)	O
;	O
free	function
(	O
mcp	pointer
)	O
;	O
}	O
static	O
int	O
memory_cell_cmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
memory_cell	struct
const	O
*	O
ma	pointer
=	O
a	pointer
;	O
struct	O
memory_cell	struct
const	O
*	O
mb	pointer
=	O
b	pointer
;	O
return	O
ma	pointer
->	O
ptr	pointer
!=	O
mb	pointer
->	O
ptr	pointer
;	O
}	O
void	O
mu_sieve_register_memory	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
void	O
*	O
ptr	pointer
,	O
mu_sieve_reclaim_t	pointer
reclaim	pointer
)	O
{	O
struct	O
memory_cell	struct
*	O
mcp	pointer
;	O
if	O
(	O
!	O
reclaim	pointer
)	O
reclaim	pointer
=	O
mu_sieve_reclaim_default	function
;	O
if	O
(	O
!	O
mach	pointer
->	O
memory_pool	pointer
)	O
{	O
if	O
(	O
mu_list_create	function
(	O
&	O
mach	pointer
->	O
memory_pool	pointer
)	O
)	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
mu_list_set_destroy_item	function
(	O
mach	pointer
->	O
memory_pool	pointer
,	O
memory_cell_destroy	function
)	O
;	O
mu_list_set_comparator	function
(	O
mach	pointer
->	O
memory_pool	pointer
,	O
memory_cell_cmp	function
)	O
;	O
}	O
mcp	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
mcp	pointer
)	O
)	O
;	O
if	O
(	O
!	O
mcp	pointer
)	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
mcp	pointer
->	O
ptr	pointer
=	O
ptr	pointer
;	O
mcp	pointer
->	O
reclaim	pointer
=	O
reclaim	pointer
;	O
if	O
(	O
mu_list_append	function
(	O
mach	pointer
->	O
memory_pool	pointer
,	O
mcp	pointer
)	O
)	O
{	O
memory_cell_destroy	function
(	O
mcp	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
}	O
void	O
mu_sieve_free	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
void	O
*	O
ptr	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
memory_cell	struct
mcell	struct
;	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
;	O
mcell	struct
.	O
ptr	pointer
=	O
ptr	pointer
;	O
rc	int
=	O
mu_list_remove	function
(	O
mach	pointer
->	O
memory_pool	pointer
,	O
&	O
mcell	struct
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"INTERNAL ERROR: trying to free unregistered memory pointer"	pointer
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
}	O
void	O
*	O
mu_sieve_alloc_memory	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
size_t	long
size	long
,	O
mu_sieve_reclaim_t	pointer
recfun	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%s"	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
mu_sieve_register_memory	function
(	O
mach	pointer
,	O
p	pointer
,	O
recfun	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
void	O
*	O
mu_sieve_malloc	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
size_t	long
size	long
)	O
{	O
return	O
mu_sieve_alloc_memory	function
(	O
mach	pointer
,	O
size	long
,	O
mu_sieve_reclaim_default	function
)	O
;	O
}	O
void	O
*	O
mu_sieve_calloc	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
size_t	long
nmemb	long
,	O
size_t	long
size	long
)	O
{	O
char	O
*	O
p	pointer
=	O
calloc	function
(	O
nmemb	long
,	O
size	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%s"	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
mu_sieve_register_memory	function
(	O
mach	pointer
,	O
p	pointer
,	O
mu_sieve_reclaim_default	function
)	O
;	O
return	O
p	pointer
;	O
}	O
char	O
*	O
mu_sieve_strdup	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
str	pointer
)	O
{	O
size_t	long
len	long
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
str	pointer
)	O
return	O
NULL	O
;	O
len	long
=	O
strlen	function
(	O
str	pointer
)	O
;	O
p	pointer
=	O
mu_sieve_malloc	function
(	O
mach	pointer
,	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
str	pointer
,	O
len	long
)	O
;	O
p	pointer
[	O
len	long
]	O
=	O
0	int
;	O
return	O
p	pointer
;	O
}	O
void	O
*	O
mu_sieve_realloc	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
void	O
*	O
ptr	pointer
,	O
size_t	long
size	long
)	O
{	O
int	O
rc	int
;	O
struct	O
memory_cell	struct
mcell	struct
,	O
*	O
mcp	pointer
;	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
mu_sieve_malloc	function
(	O
mach	pointer
,	O
size	long
)	O
;	O
mcell	struct
.	O
ptr	pointer
=	O
ptr	pointer
;	O
rc	int
=	O
mu_list_locate	function
(	O
mach	pointer
->	O
memory_pool	pointer
,	O
&	O
mcell	struct
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mcp	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"INTERNAL ERROR: trying to reallocate unregistered memory pointer"	pointer
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"error reallocating memory: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
ptr	pointer
=	O
realloc	function
(	O
mcp	pointer
->	O
ptr	pointer
,	O
size	long
)	O
;	O
if	O
(	O
!	O
ptr	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"error reallocating memory: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
mcp	pointer
->	O
ptr	pointer
=	O
ptr	pointer
;	O
return	O
ptr	pointer
;	O
}	O
void	O
mu_sieve_reclaim_default	function
(	O
void	O
*	O
p	pointer
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
}	O
void	O
mu_sieve_reclaim_value	function
(	O
void	O
*	O
p	pointer
)	O
{	O
if	O
(	O
!	O
p	pointer
)	O
return	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
void	O
mu_i_sv_2nrealloc	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
void	O
*	O
*	O
pptr	pointer
,	O
size_t	long
*	O
pnmemb	pointer
,	O
size_t	long
size	long
)	O
{	O
void	O
*	O
ptr	pointer
=	O
*	O
pptr	pointer
;	O
size_t	long
nmemb	long
=	O
*	O
pnmemb	pointer
;	O
if	O
(	O
!	O
ptr	pointer
)	O
{	O
if	O
(	O
!	O
nmemb	long
)	O
{	O
nmemb	long
=	O
16	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
size_t	long
)	O
-	O
1	int
/	O
3	int
*	O
2	int
/	O
size	long
<=	O
nmemb	long
)	O
{	O
mu_diag_at_locus_range	function
(	O
MU_LOG_ERROR	int
,	O
&	O
mach	pointer
->	O
locus	struct
,	O
_	O
(	O
"requested too much memory %zu * %zu"	pointer
)	O
,	O
nmemb	long
,	O
size	long
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
nmemb	long
+=	O
nmemb	long
/	O
2	int
+	O
1	int
;	O
}	O
ptr	pointer
=	O
mu_sieve_realloc	function
(	O
mach	pointer
,	O
ptr	pointer
,	O
nmemb	long
*	O
size	long
)	O
;	O
*	O
pptr	pointer
=	O
ptr	pointer
;	O
*	O
pnmemb	pointer
=	O
nmemb	long
;	O
}	O
size_t	long
mu_i_sv_id_num	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
char	O
const	O
*	O
name	pointer
)	O
{	O
size_t	long
i	long
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
name	pointer
)	O
abort	function
(	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
idcount	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
mach	pointer
->	O
idspace	pointer
[	O
i	long
]	O
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
i	long
;	O
}	O
if	O
(	O
mach	pointer
->	O
idcount	long
==	O
mach	pointer
->	O
idmax	long
)	O
{	O
mu_i_sv_2nrealloc	function
(	O
mach	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mach	pointer
->	O
idspace	pointer
,	O
&	O
mach	pointer
->	O
idmax	long
,	O
sizeof	O
mach	pointer
->	O
idspace	pointer
[	O
0	int
]	O
)	O
;	O
}	O
p	pointer
=	O
mu_sieve_strdup	function
(	O
mach	pointer
,	O
name	pointer
)	O
;	O
mach	pointer
->	O
idspace	pointer
[	O
mach	pointer
->	O
idcount	long
]	O
=	O
p	pointer
;	O
return	O
mach	pointer
->	O
idcount	long
++	O
;	O
}	O
char	O
*	O
mu_i_sv_id_str	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
size_t	long
n	pointer
)	O
{	O
if	O
(	O
n	pointer
>=	O
mach	pointer
->	O
idcount	long
)	O
abort	function
(	O
)	O
;	O
return	O
mach	pointer
->	O
idspace	pointer
[	O
n	pointer
]	O
;	O
}	O
void	O
mu_i_sv_free_idspace	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mach	pointer
->	O
idcount	long
;	O
i	long
++	O
)	O
mu_sieve_free	function
(	O
mach	pointer
,	O
mach	pointer
->	O
idspace	pointer
[	O
i	long
]	O
)	O
;	O
mach	pointer
->	O
idcount	long
=	O
0	int
;	O
}	O
