static	O
size_t	long
page_width	long
=	O
PAGE_WIDTH	int
;	O
void	O
message_page_width_set	function
(	O
size_t	long
n	long
)	O
{	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
page_width	long
=	O
INT_MAX	O
;	O
return	O
;	O
}	O
if	O
(	O
n	long
<	O
20	int
)	O
n	long
=	O
20	int
;	O
page_width	long
=	O
n	long
;	O
}	O
void	O
msgdomain_list_print	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
catalog_output_format_ty	pointer
output_syntax	pointer
,	O
bool	bool
force	bool
,	O
bool	bool
debug	bool
)	O
{	O
bool	bool
to_stdout	bool
;	O
if	O
(	O
!	O
force	bool
)	O
{	O
bool	bool
found_nonempty	bool
=	O
false	int
;	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
if	O
(	O
!	O
(	O
mlp	pointer
->	O
nitems	long
==	O
0	int
||	O
(	O
mlp	pointer
->	O
nitems	long
==	O
1	int
&&	O
is_header	O
(	O
mlp	pointer
->	O
item	pointer
[	O
0	int
]	O
)	O
)	O
)	O
)	O
{	O
found_nonempty	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
found_nonempty	bool
)	O
return	O
;	O
}	O
if	O
(	O
!	O
output_syntax	pointer
->	O
supports_multiple_domains	bool
&&	O
mdlp	pointer
->	O
nitems	long
>	O
1	int
)	O
{	O
if	O
(	O
output_syntax	pointer
->	O
alternative_is_po	bool
)	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
_	O
(	O
"Cannot output multiple translation domains into a single file with the specified output format. Try using PO file syntax instead."	pointer
)	O
)	O
;	O
else	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
_	O
(	O
"Cannot output multiple translation domains into a single file with the specified output format."	pointer
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
output_syntax	pointer
->	O
supports_contexts	bool
)	O
{	O
const	O
lex_pos_ty	struct
*	O
has_context	pointer
;	O
size_t	long
k	long
;	O
has_context	pointer
=	O
NULL	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
mp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
)	O
{	O
has_context	pointer
=	O
&	O
mp	pointer
->	O
pos	struct
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
has_context	pointer
!=	O
NULL	O
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
has_context	pointer
->	O
file_name	pointer
,	O
has_context	pointer
->	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"message catalog has context dependent translations, but the output format does not support them."	pointer
)	O
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
}	O
if	O
(	O
!	O
output_syntax	pointer
->	O
supports_plurals	bool
)	O
{	O
const	O
lex_pos_ty	struct
*	O
has_plural	pointer
;	O
size_t	long
k	long
;	O
has_plural	pointer
=	O
NULL	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
mp	pointer
->	O
msgid_plural	pointer
!=	O
NULL	O
)	O
{	O
has_plural	pointer
=	O
&	O
mp	pointer
->	O
pos	struct
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
has_plural	pointer
!=	O
NULL	O
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
if	O
(	O
output_syntax	pointer
->	O
alternative_is_java_class	bool
)	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
has_plural	pointer
->	O
file_name	pointer
,	O
has_plural	pointer
->	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"message catalog has plural form translations, but the output format does not support them. Try generating a Java class using \"msgfmt --java\", instead of a properties file."	pointer
)	O
)	O
;	O
else	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
has_plural	pointer
->	O
file_name	pointer
,	O
has_plural	pointer
->	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"message catalog has plural form translations, but the output format does not support them."	pointer
)	O
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
}	O
}	O
to_stdout	bool
=	O
(	O
filename	pointer
==	O
NULL	O
||	O
strcmp	function
(	O
filename	pointer
,	O
"-"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
filename	pointer
,	O
"/dev/stdout"	pointer
)	O
==	O
0	int
)	O
;	O
if	O
(	O
output_syntax	pointer
->	O
supports_color	bool
&&	O
(	O
color_mode	enum
==	O
color_yes	int
||	O
(	O
color_mode	enum
==	O
color_tty	int
&&	O
to_stdout	bool
&&	O
isatty	function
(	O
STDOUT_FILENO	int
)	O
)	O
)	O
)	O
{	O
int	O
fd	int
;	O
ostream_t	pointer
stream	pointer
;	O
if	O
(	O
!	O
to_stdout	bool
)	O
{	O
fd	int
=	O
open	function
(	O
filename	pointer
,	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
,	O
S_IRUSR	O
|	O
S_IWUSR	O
|	O
S_IRGRP	O
|	O
S_IWGRP	O
|	O
S_IROTH	O
|	O
S_IWOTH	O
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
const	O
char	O
*	O
errno_description	pointer
=	O
strerror	function
(	O
errno	O
)	O
;	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	function
(	O
"%s: %s"	pointer
,	O
xasprintf	function
(	O
_	O
(	O
"cannot create output file \"%s\""	pointer
)	O
,	O
filename	pointer
)	O
,	O
errno_description	pointer
)	O
)	O
;	O
}	O
}	O
else	O
{	O
fd	int
=	O
STDOUT_FILENO	int
;	O
filename	pointer
=	O
_	O
(	O
"standard output"	pointer
)	O
;	O
}	O
style_file_prepare	function
(	O
"PO_STYLE"	pointer
,	O
"GETTEXTSTYLESDIR"	pointer
,	O
relocate	O
(	O
GETTEXTSTYLESDIR	O
)	O
,	O
"po-default.css"	pointer
)	O
;	O
stream	pointer
=	O
styled_ostream_create	function
(	O
fd	int
,	O
filename	pointer
,	O
TTYCTL_AUTO	int
,	O
style_file_name	pointer
)	O
;	O
output_syntax	pointer
->	O
print	pointer
(	O
mdlp	pointer
,	O
stream	pointer
,	O
page_width	long
,	O
debug	bool
)	O
;	O
ostream_free	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
close	pointer
(	O
fd	int
)	O
<	O
0	int
)	O
{	O
const	O
char	O
*	O
errno_description	pointer
=	O
strerror	function
(	O
errno	O
)	O
;	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	function
(	O
"%s: %s"	pointer
,	O
xasprintf	function
(	O
_	O
(	O
"error while writing \"%s\" file"	pointer
)	O
,	O
filename	pointer
)	O
,	O
errno_description	pointer
)	O
)	O
;	O
}	O
}	O
else	O
{	O
FILE	struct
*	O
fp	pointer
;	O
file_ostream_t	pointer
stream	pointer
;	O
if	O
(	O
!	O
to_stdout	bool
)	O
{	O
fp	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"wb"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
errno_description	pointer
=	O
strerror	function
(	O
errno	O
)	O
;	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	function
(	O
"%s: %s"	pointer
,	O
xasprintf	function
(	O
_	O
(	O
"cannot create output file \"%s\""	pointer
)	O
,	O
filename	pointer
)	O
,	O
errno_description	pointer
)	O
)	O
;	O
}	O
}	O
else	O
{	O
fp	pointer
=	O
stdout	pointer
;	O
filename	pointer
=	O
_	O
(	O
"standard output"	pointer
)	O
;	O
}	O
stream	pointer
=	O
file_ostream_create	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
output_syntax	pointer
->	O
supports_color	bool
&&	O
color_mode	enum
==	O
color_html	int
)	O
{	O
html_styled_ostream_t	pointer
html_stream	pointer
;	O
if	O
(	O
mdlp	pointer
->	O
encoding	pointer
!=	O
po_charset_utf8	pointer
)	O
{	O
mdlp	pointer
=	O
msgdomain_list_copy	function
(	O
mdlp	pointer
,	O
0	int
)	O
;	O
mdlp	pointer
=	O
iconv_msgdomain_list	function
(	O
mdlp	pointer
,	O
po_charset_utf8	pointer
,	O
false	int
,	O
NULL	O
)	O
;	O
}	O
style_file_prepare	function
(	O
"PO_STYLE"	pointer
,	O
"GETTEXTSTYLESDIR"	pointer
,	O
relocate	O
(	O
GETTEXTSTYLESDIR	O
)	O
,	O
"po-default.css"	pointer
)	O
;	O
html_stream	pointer
=	O
html_styled_ostream_create	function
(	O
stream	pointer
,	O
style_file_name	pointer
)	O
;	O
output_syntax	pointer
->	O
print	pointer
(	O
mdlp	pointer
,	O
html_stream	pointer
,	O
page_width	long
,	O
debug	bool
)	O
;	O
ostream_free	function
(	O
html_stream	pointer
)	O
;	O
}	O
else	O
{	O
noop_styled_ostream_t	pointer
styled_stream	pointer
;	O
styled_stream	pointer
=	O
noop_styled_ostream_create	function
(	O
stream	pointer
,	O
false	int
)	O
;	O
output_syntax	pointer
->	O
print	pointer
(	O
mdlp	pointer
,	O
styled_stream	pointer
,	O
page_width	long
,	O
debug	bool
)	O
;	O
ostream_free	function
(	O
styled_stream	pointer
)	O
;	O
}	O
ostream_free	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
fwriteerror	function
(	O
fp	pointer
)	O
)	O
{	O
const	O
char	O
*	O
errno_description	pointer
=	O
strerror	function
(	O
errno	O
)	O
;	O
po_xerror	pointer
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	function
(	O
"%s: %s"	pointer
,	O
xasprintf	function
(	O
_	O
(	O
"error while writing \"%s\" file"	pointer
)	O
,	O
filename	pointer
)	O
,	O
errno_description	pointer
)	O
)	O
;	O
}	O
}	O
}	O
static	O
int	O
cmp_by_msgid	function
(	O
const	O
void	O
*	O
va	pointer
,	O
const	O
void	O
*	O
vb	pointer
)	O
{	O
const	O
message_ty	struct
*	O
a	pointer
=	O
*	O
(	O
const	O
message_ty	struct
*	O
*	O
)	O
va	pointer
;	O
const	O
message_ty	struct
*	O
b	pointer
=	O
*	O
(	O
const	O
message_ty	struct
*	O
*	O
)	O
vb	pointer
;	O
int	O
cmp	int
=	O
strcmp	function
(	O
a	pointer
->	O
msgid	pointer
,	O
b	pointer
->	O
msgid	pointer
)	O
;	O
if	O
(	O
cmp	int
!=	O
0	int
)	O
return	O
cmp	int
;	O
if	O
(	O
a	pointer
->	O
msgctxt	pointer
==	O
b	pointer
->	O
msgctxt	pointer
)	O
return	O
0	int
;	O
if	O
(	O
a	pointer
->	O
msgctxt	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
b	pointer
->	O
msgctxt	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
return	O
strcmp	function
(	O
a	pointer
->	O
msgctxt	pointer
,	O
b	pointer
->	O
msgctxt	pointer
)	O
;	O
}	O
void	O
msgdomain_list_sort_by_msgid	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
if	O
(	O
mlp	pointer
->	O
nitems	long
>	O
0	int
)	O
qsort	function
(	O
mlp	pointer
->	O
item	pointer
,	O
mlp	pointer
->	O
nitems	long
,	O
sizeof	O
(	O
mlp	pointer
->	O
item	pointer
[	O
0	int
]	O
)	O
,	O
cmp_by_msgid	function
)	O
;	O
}	O
}	O
static	O
int	O
cmp_filepos	function
(	O
const	O
void	O
*	O
va	pointer
,	O
const	O
void	O
*	O
vb	pointer
)	O
{	O
const	O
lex_pos_ty	struct
*	O
a	pointer
=	O
(	O
const	O
lex_pos_ty	struct
*	O
)	O
va	pointer
;	O
const	O
lex_pos_ty	struct
*	O
b	pointer
=	O
(	O
const	O
lex_pos_ty	struct
*	O
)	O
vb	pointer
;	O
int	O
cmp	int
;	O
cmp	int
=	O
strcmp	function
(	O
a	pointer
->	O
file_name	pointer
,	O
b	pointer
->	O
file_name	pointer
)	O
;	O
if	O
(	O
cmp	int
==	O
0	int
)	O
cmp	int
=	O
(	O
int	O
)	O
a	pointer
->	O
line_number	long
-	O
(	O
int	O
)	O
b	pointer
->	O
line_number	long
;	O
return	O
cmp	int
;	O
}	O
static	O
void	O
msgdomain_list_sort_filepos	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
size_t	long
j	long
,	O
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
mp	pointer
->	O
filepos_count	long
>	O
0	int
)	O
qsort	function
(	O
mp	pointer
->	O
filepos	pointer
,	O
mp	pointer
->	O
filepos_count	long
,	O
sizeof	O
(	O
mp	pointer
->	O
filepos	pointer
[	O
0	int
]	O
)	O
,	O
cmp_filepos	function
)	O
;	O
}	O
}	O
}	O
static	O
int	O
cmp_by_filepos	function
(	O
const	O
void	O
*	O
va	pointer
,	O
const	O
void	O
*	O
vb	pointer
)	O
{	O
const	O
message_ty	struct
*	O
a	pointer
=	O
*	O
(	O
const	O
message_ty	struct
*	O
*	O
)	O
va	pointer
;	O
const	O
message_ty	struct
*	O
b	pointer
=	O
*	O
(	O
const	O
message_ty	struct
*	O
*	O
)	O
vb	pointer
;	O
int	O
cmp	int
;	O
if	O
(	O
a	pointer
->	O
filepos_count	long
==	O
0	int
)	O
{	O
if	O
(	O
b	pointer
->	O
filepos_count	long
!=	O
0	int
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
b	pointer
->	O
filepos_count	long
==	O
0	int
)	O
return	O
1	int
;	O
cmp	int
=	O
strcmp	function
(	O
a	pointer
->	O
filepos	pointer
[	O
0	int
]	O
.	O
file_name	pointer
,	O
b	pointer
->	O
filepos	pointer
[	O
0	int
]	O
.	O
file_name	pointer
)	O
;	O
if	O
(	O
cmp	int
!=	O
0	int
)	O
return	O
cmp	int
;	O
cmp	int
=	O
a	pointer
->	O
filepos	pointer
[	O
0	int
]	O
.	O
line_number	long
-	O
b	pointer
->	O
filepos	pointer
[	O
0	int
]	O
.	O
line_number	long
;	O
if	O
(	O
cmp	int
!=	O
0	int
)	O
return	O
cmp	int
;	O
cmp	int
=	O
strcmp	function
(	O
a	pointer
->	O
msgid	pointer
,	O
b	pointer
->	O
msgid	pointer
)	O
;	O
if	O
(	O
cmp	int
!=	O
0	int
)	O
return	O
cmp	int
;	O
if	O
(	O
a	pointer
->	O
msgctxt	pointer
==	O
b	pointer
->	O
msgctxt	pointer
)	O
return	O
0	int
;	O
if	O
(	O
a	pointer
->	O
msgctxt	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
b	pointer
->	O
msgctxt	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
return	O
strcmp	function
(	O
a	pointer
->	O
msgctxt	pointer
,	O
b	pointer
->	O
msgctxt	pointer
)	O
;	O
}	O
void	O
msgdomain_list_sort_by_filepos	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
size_t	long
k	long
;	O
msgdomain_list_sort_filepos	function
(	O
mdlp	pointer
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
if	O
(	O
mlp	pointer
->	O
nitems	long
>	O
0	int
)	O
qsort	function
(	O
mlp	pointer
->	O
item	pointer
,	O
mlp	pointer
->	O
nitems	long
,	O
sizeof	O
(	O
mlp	pointer
->	O
item	pointer
[	O
0	int
]	O
)	O
,	O
cmp_by_filepos	function
)	O
;	O
}	O
}	O
