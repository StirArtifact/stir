static	O
inline	O
void	O
timestamp	function
(	O
time_value_t	O
*	O
stamp	pointer
)	O
{	O
host_get_time	function
(	O
mach_host_self	function
(	O
)	O
,	O
stamp	pointer
)	O
;	O
}	O
pthread_mutex_t	union
pipe_multiple_lock	union
=	O
PTHREAD_MUTEX_INITIALIZER	O
;	O
error_t	O
pipe_create	function
(	O
struct	O
pipe_class	O
*	O
class	pointer
,	O
struct	O
pipe	pointer
*	O
*	O
pipe	pointer
)	O
{	O
struct	O
pipe	pointer
*	O
new	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
pipe	pointer
)	O
)	O
;	O
if	O
(	O
new	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	O
;	O
new	pointer
->	O
readers	O
=	O
0	int
;	O
new	pointer
->	O
writers	O
=	O
0	int
;	O
new	pointer
->	O
flags	pointer
=	O
0	int
;	O
new	pointer
->	O
class	pointer
=	O
class	pointer
;	O
new	pointer
->	O
write_limit	O
=	O
16	int
*	O
1024	int
;	O
new	pointer
->	O
write_atomic	O
=	O
16	int
*	O
1024	int
;	O
memset	function
(	O
&	O
new	pointer
->	O
read_time	O
,	O
0	int
,	O
sizeof	O
(	O
new	pointer
->	O
read_time	O
)	O
)	O
;	O
memset	function
(	O
&	O
new	pointer
->	O
write_time	O
,	O
0	int
,	O
sizeof	O
(	O
new	pointer
->	O
write_time	O
)	O
)	O
;	O
pthread_cond_init	function
(	O
&	O
new	pointer
->	O
pending_reads	O
,	O
NULL	O
)	O
;	O
pthread_cond_init	function
(	O
&	O
new	pointer
->	O
pending_read_selects	O
,	O
NULL	O
)	O
;	O
pthread_cond_init	function
(	O
&	O
new	pointer
->	O
pending_writes	O
,	O
NULL	O
)	O
;	O
pthread_cond_init	function
(	O
&	O
new	pointer
->	O
pending_write_selects	O
,	O
NULL	O
)	O
;	O
new	pointer
->	O
pending_selects	O
=	O
NULL	O
;	O
pthread_mutex_init	function
(	O
&	O
new	pointer
->	O
lock	pointer
,	O
NULL	O
)	O
;	O
pq_create	function
(	O
&	O
new	pointer
->	O
queue	O
)	O
;	O
if	O
(	O
!	O
pipe_is_connless	O
(	O
new	pointer
)	O
)	O
new	pointer
->	O
flags	pointer
|=	O
PIPE_BROKEN	O
;	O
*	O
pipe	pointer
=	O
new	pointer
;	O
return	O
0	int
;	O
}	O
void	O
pipe_free	function
(	O
struct	O
pipe	pointer
*	O
pipe	pointer
)	O
{	O
pq_free	function
(	O
pipe	pointer
->	O
queue	O
)	O
;	O
free	function
(	O
pipe	pointer
)	O
;	O
}	O
static	O
void	O
pipe_add_select_cond	function
(	O
struct	O
pipe	pointer
*	O
pipe	pointer
,	O
struct	O
pipe_select_cond	O
*	O
cond	pointer
)	O
{	O
struct	O
pipe_select_cond	O
*	O
first	pointer
,	O
*	O
last	pointer
;	O
first	pointer
=	O
pipe	pointer
->	O
pending_selects	O
;	O
if	O
(	O
first	pointer
==	O
NULL	O
)	O
{	O
cond	pointer
->	O
next	O
=	O
cond	pointer
;	O
cond	pointer
->	O
prev	O
=	O
cond	pointer
;	O
pipe	pointer
->	O
pending_selects	O
=	O
cond	pointer
;	O
return	O
;	O
}	O
last	pointer
=	O
first	pointer
->	O
prev	O
;	O
cond	pointer
->	O
next	O
=	O
first	pointer
;	O
cond	pointer
->	O
prev	O
=	O
last	pointer
;	O
first	pointer
->	O
prev	O
=	O
cond	pointer
;	O
last	pointer
->	O
next	O
=	O
cond	pointer
;	O
}	O
static	O
void	O
pipe_remove_select_cond	function
(	O
struct	O
pipe	pointer
*	O
pipe	pointer
,	O
struct	O
pipe_select_cond	O
*	O
cond	pointer
)	O
{	O
cond	pointer
->	O
prev	O
->	O
next	O
=	O
cond	pointer
->	O
next	O
;	O
cond	pointer
->	O
next	O
->	O
prev	O
=	O
cond	pointer
->	O
prev	O
;	O
if	O
(	O
pipe	pointer
->	O
pending_selects	O
==	O
cond	pointer
)	O
{	O
if	O
(	O
cond	pointer
->	O
next	O
==	O
cond	pointer
)	O
pipe	pointer
->	O
pending_selects	O
=	O
NULL	O
;	O
else	O
pipe	pointer
->	O
pending_selects	O
=	O
cond	pointer
->	O
next	O
;	O
}	O
}	O
static	O
void	O
pipe_select_cond_broadcast	function
(	O
struct	O
pipe	pointer
*	O
pipe	pointer
)	O
{	O
struct	O
pipe_select_cond	O
*	O
cond	pointer
,	O
*	O
last	pointer
;	O
cond	pointer
=	O
pipe	pointer
->	O
pending_selects	O
;	O
if	O
(	O
cond	pointer
==	O
NULL	O
)	O
return	O
;	O
last	pointer
=	O
cond	pointer
->	O
prev	O
;	O
do	O
{	O
pthread_cond_broadcast	function
(	O
&	O
cond	pointer
->	O
cond	pointer
)	O
;	O
cond	pointer
=	O
cond	pointer
->	O
next	O
;	O
}	O
while	O
(	O
cond	pointer
!=	O
last	pointer
)	O
;	O
}	O
void	O
_pipe_first_writer	function
(	O
struct	O
pipe	pointer
*	O
pipe	pointer
)	O
{	O
if	O
(	O
pipe	pointer
->	O
readers	O
>	O
0	int
)	O
pipe	pointer
->	O
flags	pointer
&=	O
~	O
PIPE_BROKEN	O
;	O
}	O
void	O
_pipe_first_reader	function
(	O
struct	O
pipe	pointer
*	O
pipe	pointer
)	O
{	O
if	O
(	O
pipe	pointer
->	O
writers	O
>	O
0	int
)	O
pipe	pointer
->	O
flags	pointer
&=	O
~	O
PIPE_BROKEN	O
;	O
}	O
void	O
_pipe_no_readers	function
(	O
struct	O
pipe	pointer
*	O
pipe	pointer
)	O
{	O
if	O
(	O
pipe	pointer
->	O
writers	O
==	O
0	int
)	O
pipe_free	function
(	O
pipe	pointer
)	O
;	O
else	O
{	O
pipe	pointer
->	O
flags	pointer
|=	O
PIPE_BROKEN	O
;	O
if	O
(	O
pipe	pointer
->	O
writers	O
)	O
{	O
pthread_cond_broadcast	function
(	O
&	O
pipe	pointer
->	O
pending_writes	O
)	O
;	O
pthread_cond_broadcast	function
(	O
&	O
pipe	pointer
->	O
pending_write_selects	O
)	O
;	O
pipe_select_cond_broadcast	function
(	O
pipe	pointer
)	O
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
pipe	pointer
->	O
lock	pointer
)	O
;	O
}	O
}	O
void	O
_pipe_no_writers	function
(	O
struct	O
pipe	pointer
*	O
pipe	pointer
)	O
{	O
if	O
(	O
pipe	pointer
->	O
readers	O
==	O
0	int
)	O
pipe_free	function
(	O
pipe	pointer
)	O
;	O
else	O
{	O
if	O
(	O
!	O
pipe_is_connless	O
(	O
pipe	pointer
)	O
)	O
{	O
pipe	pointer
->	O
flags	pointer
|=	O
PIPE_BROKEN	O
;	O
if	O
(	O
pipe	pointer
->	O
readers	O
)	O
{	O
pthread_cond_broadcast	function
(	O
&	O
pipe	pointer
->	O
pending_reads	O
)	O
;	O
pthread_cond_broadcast	function
(	O
&	O
pipe	pointer
->	O
pending_read_selects	O
)	O
;	O
pipe_select_cond_broadcast	function
(	O
pipe	pointer
)	O
;	O
}	O
}	O
pthread_mutex_unlock	function
(	O
&	O
pipe	pointer
->	O
lock	pointer
)	O
;	O
}	O
}	O
error_t	O
pipe_pair_select	function
(	O
struct	O
pipe	pointer
*	O
rpipe	pointer
,	O
struct	O
pipe	pointer
*	O
wpipe	pointer
,	O
struct	O
timespec	struct
*	O
tsp	pointer
,	O
int	O
*	O
select_type	pointer
,	O
int	O
data_only	int
)	O
{	O
error_t	O
err	O
=	O
0	int
;	O
*	O
select_type	pointer
&=	O
SELECT_READ	O
|	O
SELECT_WRITE	O
;	O
if	O
(	O
*	O
select_type	pointer
==	O
SELECT_READ	O
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
rpipe	pointer
->	O
lock	pointer
)	O
;	O
err	O
=	O
pipe_select_readable	function
(	O
rpipe	pointer
,	O
tsp	pointer
,	O
data_only	int
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
rpipe	pointer
->	O
lock	pointer
)	O
;	O
}	O
else	O
if	O
(	O
*	O
select_type	pointer
==	O
SELECT_WRITE	O
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
wpipe	pointer
->	O
lock	pointer
)	O
;	O
err	O
=	O
pipe_select_writable	function
(	O
wpipe	pointer
,	O
tsp	pointer
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
wpipe	pointer
->	O
lock	pointer
)	O
;	O
}	O
else	O
{	O
int	O
rpipe_blocked	int
,	O
wpipe_blocked	int
;	O
struct	O
pipe_select_cond	O
pending_select	struct
;	O
size_t	long
wlimit	long
=	O
wpipe	pointer
->	O
write_limit	O
;	O
pthread_mutex_t	union
*	O
lock	pointer
=	O
(	O
wpipe	pointer
==	O
rpipe	pointer
?	O
&	O
rpipe	pointer
->	O
lock	pointer
:	O
&	O
pipe_multiple_lock	union
)	O
;	O
pthread_cond_init	function
(	O
&	O
pending_select	struct
.	O
cond	pointer
,	O
NULL	O
)	O
;	O
pthread_mutex_lock	function
(	O
lock	pointer
)	O
;	O
if	O
(	O
rpipe	pointer
==	O
wpipe	pointer
)	O
pipe_add_select_cond	function
(	O
rpipe	pointer
,	O
&	O
pending_select	struct
)	O
;	O
else	O
{	O
pthread_mutex_lock	function
(	O
&	O
rpipe	pointer
->	O
lock	pointer
)	O
;	O
pthread_mutex_lock	function
(	O
&	O
wpipe	pointer
->	O
lock	pointer
)	O
;	O
pipe_add_select_cond	function
(	O
rpipe	pointer
,	O
&	O
pending_select	struct
)	O
;	O
pipe_add_select_cond	function
(	O
wpipe	pointer
,	O
&	O
pending_select	struct
)	O
;	O
}	O
rpipe_blocked	int
=	O
!	O
(	O
(	O
rpipe	pointer
->	O
flags	pointer
&	O
PIPE_BROKEN	O
)	O
||	O
pipe_is_readable	function
(	O
rpipe	pointer
,	O
data_only	int
)	O
)	O
;	O
wpipe_blocked	int
=	O
!	O
(	O
(	O
wpipe	pointer
->	O
flags	pointer
&	O
PIPE_BROKEN	O
)	O
||	O
pipe_readable	function
(	O
wpipe	pointer
,	O
1	int
)	O
<	O
wlimit	long
)	O
;	O
while	O
(	O
!	O
err	O
&&	O
rpipe_blocked	int
&&	O
wpipe_blocked	int
)	O
{	O
if	O
(	O
rpipe	pointer
!=	O
wpipe	pointer
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
rpipe	pointer
->	O
lock	pointer
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
wpipe	pointer
->	O
lock	pointer
)	O
;	O
}	O
err	O
=	O
pthread_hurd_cond_timedwait_np	function
(	O
&	O
pending_select	struct
.	O
cond	pointer
,	O
lock	pointer
,	O
tsp	pointer
)	O
;	O
if	O
(	O
rpipe	pointer
!=	O
wpipe	pointer
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
rpipe	pointer
->	O
lock	pointer
)	O
;	O
pthread_mutex_lock	function
(	O
&	O
wpipe	pointer
->	O
lock	pointer
)	O
;	O
}	O
rpipe_blocked	int
=	O
!	O
(	O
(	O
rpipe	pointer
->	O
flags	pointer
&	O
PIPE_BROKEN	O
)	O
||	O
pipe_is_readable	function
(	O
rpipe	pointer
,	O
data_only	int
)	O
)	O
;	O
wpipe_blocked	int
=	O
!	O
(	O
(	O
wpipe	pointer
->	O
flags	pointer
&	O
PIPE_BROKEN	O
)	O
||	O
pipe_readable	function
(	O
wpipe	pointer
,	O
1	int
)	O
<	O
wlimit	long
)	O
;	O
}	O
if	O
(	O
!	O
err	O
)	O
{	O
if	O
(	O
rpipe_blocked	int
)	O
*	O
select_type	pointer
&=	O
~	O
SELECT_READ	O
;	O
if	O
(	O
wpipe_blocked	int
)	O
*	O
select_type	pointer
&=	O
~	O
SELECT_WRITE	O
;	O
}	O
if	O
(	O
rpipe	pointer
==	O
wpipe	pointer
)	O
pipe_remove_select_cond	function
(	O
rpipe	pointer
,	O
&	O
pending_select	struct
)	O
;	O
else	O
{	O
pipe_remove_select_cond	function
(	O
rpipe	pointer
,	O
&	O
pending_select	struct
)	O
;	O
pipe_remove_select_cond	function
(	O
wpipe	pointer
,	O
&	O
pending_select	struct
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
rpipe	pointer
->	O
lock	pointer
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
wpipe	pointer
->	O
lock	pointer
)	O
;	O
}	O
pthread_mutex_unlock	function
(	O
lock	pointer
)	O
;	O
}	O
if	O
(	O
err	O
==	O
ETIMEDOUT	O
)	O
{	O
err	O
=	O
0	int
;	O
*	O
select_type	pointer
=	O
0	int
;	O
}	O
return	O
err	O
;	O
}	O
error_t	O
pipe_send	function
(	O
struct	O
pipe	pointer
*	O
pipe	pointer
,	O
int	O
noblock	int
,	O
void	O
*	O
source	pointer
,	O
char	O
*	O
data	pointer
,	O
size_t	long
data_len	long
,	O
char	O
*	O
control	pointer
,	O
size_t	long
control_len	long
,	O
mach_port_t	O
*	O
ports	pointer
,	O
size_t	long
num_ports	long
,	O
size_t	long
*	O
amount	pointer
)	O
{	O
error_t	O
err	O
;	O
if	O
(	O
data_len	long
==	O
0	int
&&	O
control_len	long
==	O
0	int
&&	O
num_ports	long
==	O
0	int
)	O
{	O
*	O
amount	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
err	O
=	O
pipe_wait_writable	function
(	O
pipe	pointer
,	O
noblock	int
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
if	O
(	O
noblock	int
)	O
{	O
size_t	long
left	long
=	O
pipe	pointer
->	O
write_limit	O
-	O
pipe_readable	function
(	O
pipe	pointer
,	O
1	int
)	O
;	O
if	O
(	O
left	long
<	O
data_len	long
)	O
{	O
if	O
(	O
data_len	long
<=	O
pipe	pointer
->	O
write_atomic	O
)	O
return	O
EWOULDBLOCK	O
;	O
else	O
data_len	long
=	O
left	long
;	O
}	O
}	O
if	O
(	O
control_len	long
>	O
0	int
||	O
num_ports	long
>	O
0	int
)	O
{	O
struct	O
packet	pointer
*	O
control_packet	pointer
=	O
pq_queue	function
(	O
pipe	pointer
->	O
queue	O
,	O
PACKET_TYPE_CONTROL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
control_packet	pointer
==	O
NULL	O
)	O
err	O
=	O
ENOBUFS	O
;	O
else	O
{	O
err	O
=	O
packet_write	function
(	O
control_packet	pointer
,	O
control	pointer
,	O
control_len	long
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
err	O
=	O
packet_set_ports	function
(	O
control_packet	pointer
,	O
ports	pointer
,	O
num_ports	long
)	O
;	O
if	O
(	O
err	O
)	O
{	O
}	O
}	O
}	O
if	O
(	O
!	O
err	O
)	O
err	O
=	O
(	O
*	O
pipe	pointer
->	O
class	pointer
->	O
write	O
)	O
(	O
pipe	pointer
->	O
queue	O
,	O
source	pointer
,	O
data	pointer
,	O
data_len	long
,	O
amount	pointer
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
timestamp	function
(	O
&	O
pipe	pointer
->	O
write_time	O
)	O
;	O
pthread_cond_broadcast	function
(	O
&	O
pipe	pointer
->	O
pending_reads	O
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
pipe	pointer
->	O
lock	pointer
)	O
;	O
pthread_mutex_lock	function
(	O
&	O
pipe	pointer
->	O
lock	pointer
)	O
;	O
if	O
(	O
pipe_is_readable	function
(	O
pipe	pointer
,	O
0	int
)	O
)	O
{	O
pthread_cond_broadcast	function
(	O
&	O
pipe	pointer
->	O
pending_read_selects	O
)	O
;	O
pipe_select_cond_broadcast	function
(	O
pipe	pointer
)	O
;	O
}	O
}	O
return	O
err	O
;	O
}	O
error_t	O
pipe_recv	function
(	O
struct	O
pipe	pointer
*	O
pipe	pointer
,	O
int	O
noblock	int
,	O
unsigned	O
*	O
flags	pointer
,	O
void	O
*	O
*	O
source	pointer
,	O
char	O
*	O
*	O
data	pointer
,	O
size_t	long
*	O
data_len	long
,	O
size_t	long
amount	pointer
,	O
char	O
*	O
*	O
control	pointer
,	O
size_t	long
*	O
control_len	long
,	O
mach_port_t	O
*	O
*	O
ports	pointer
,	O
size_t	long
*	O
num_ports	long
)	O
{	O
error_t	O
err	O
;	O
struct	O
packet	pointer
*	O
packet	pointer
;	O
struct	O
pq	pointer
*	O
pq	pointer
=	O
pipe	pointer
->	O
queue	O
;	O
int	O
data_only	int
=	O
(	O
control	pointer
==	O
NULL	O
&&	O
ports	pointer
==	O
NULL	O
)	O
;	O
err	O
=	O
pipe_wait_readable	function
(	O
pipe	pointer
,	O
noblock	int
,	O
data_only	int
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
packet	pointer
=	O
pq_head	function
(	O
pq	pointer
,	O
PACKET_TYPE_ANY	O
,	O
0	int
)	O
;	O
if	O
(	O
data_only	int
)	O
while	O
(	O
packet	pointer
&&	O
packet	pointer
->	O
type	O
==	O
PACKET_TYPE_CONTROL	O
)	O
packet	pointer
=	O
pq_next	function
(	O
pq	pointer
,	O
PACKET_TYPE_ANY	O
,	O
0	int
)	O
;	O
else	O
if	O
(	O
packet	pointer
&&	O
packet	pointer
->	O
type	O
==	O
PACKET_TYPE_CONTROL	O
)	O
{	O
if	O
(	O
control	pointer
!=	O
NULL	O
)	O
packet_read	function
(	O
packet	pointer
,	O
control	pointer
,	O
control_len	long
,	O
packet_readable	function
(	O
packet	pointer
)	O
)	O
;	O
if	O
(	O
ports	pointer
!=	O
NULL	O
)	O
packet_read_ports	function
(	O
packet	pointer
,	O
ports	pointer
,	O
num_ports	long
)	O
;	O
packet	pointer
=	O
pq_next	function
(	O
pq	pointer
,	O
PACKET_TYPE_DATA	O
,	O
NULL	O
)	O
;	O
assert	O
(	O
packet	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
control_len	long
)	O
*	O
control_len	long
=	O
0	int
;	O
if	O
(	O
num_ports	long
)	O
*	O
num_ports	long
=	O
0	int
;	O
}	O
if	O
(	O
!	O
err	O
)	O
{	O
if	O
(	O
packet	pointer
)	O
{	O
int	O
dq	int
=	O
1	int
;	O
if	O
(	O
source	pointer
)	O
packet_read_source	function
(	O
packet	pointer
,	O
source	pointer
)	O
;	O
err	O
=	O
(	O
*	O
pipe	pointer
->	O
class	pointer
->	O
read	O
)	O
(	O
packet	pointer
,	O
&	O
dq	int
,	O
flags	pointer
,	O
data	pointer
,	O
data_len	long
,	O
amount	pointer
)	O
;	O
if	O
(	O
dq	int
)	O
pq_dequeue	function
(	O
pq	pointer
)	O
;	O
}	O
else	O
*	O
data_len	long
=	O
0	int
;	O
}	O
if	O
(	O
!	O
err	O
&&	O
packet	pointer
)	O
{	O
timestamp	function
(	O
&	O
pipe	pointer
->	O
read_time	O
)	O
;	O
pthread_cond_broadcast	function
(	O
&	O
pipe	pointer
->	O
pending_writes	O
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
pipe	pointer
->	O
lock	pointer
)	O
;	O
pthread_mutex_lock	function
(	O
&	O
pipe	pointer
->	O
lock	pointer
)	O
;	O
if	O
(	O
pipe_readable	function
(	O
pipe	pointer
,	O
1	int
)	O
<	O
pipe	pointer
->	O
write_limit	O
)	O
{	O
pthread_cond_broadcast	function
(	O
&	O
pipe	pointer
->	O
pending_write_selects	O
)	O
;	O
pipe_select_cond_broadcast	function
(	O
pipe	pointer
)	O
;	O
}	O
}	O
return	O
err	O
;	O
}	O
