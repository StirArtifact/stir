SWI_FILE_MEMBER	struct
*	O
swi_xfile_construct_file_member	function
(	O
SWI_XFILE	struct
*	O
xfile	pointer
,	O
char	O
*	O
name	pointer
,	O
int	O
fd	int
,	O
SWVARFS	struct
*	O
swvarfs	pointer
)	O
{	O
char	O
*	O
data	pointer
;	O
char	O
*	O
newdata	pointer
;	O
int	O
mem_fd	int
;	O
int	O
len	int
;	O
SWI_FILE_MEMBER	struct
*	O
s	pointer
;	O
E_DEBUG2	O
(	O
"name=[%s]"	pointer
,	O
name	pointer
)	O
;	O
s	pointer
=	O
swi_file_member_create	function
(	O
)	O
;	O
mem_fd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
swi_com_assert_value	function
(	O
mem_fd	int
>=	O
0	int
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
s	pointer
->	O
baseM	struct
.	O
is_activeM	int
=	O
0	int
;	O
s	pointer
->	O
header_start_offsetM	int
=	O
swvarfs	pointer
->	O
current_header_offsetM	long
;	O
s	pointer
->	O
data_start_offsetM	int
=	O
swvarfs	pointer
->	O
current_data_offsetM	long
;	O
swlib_pipe_pump	function
(	O
mem_fd	int
,	O
fd	int
)	O
;	O
s	pointer
->	O
data_end_offsetM	int
=	O
uxfio_lseek	function
(	O
mem_fd	int
,	O
0L	int
,	O
SEEK_CUR	int
)	O
+	O
s	pointer
->	O
data_start_offsetM	int
;	O
data	pointer
=	O
swi_com_get_fd_mem	function
(	O
mem_fd	int
,	O
&	O
len	int
)	O
;	O
if	O
(	O
len	int
!=	O
(	O
s	pointer
->	O
data_end_offsetM	int
-	O
s	pointer
->	O
data_start_offsetM	int
)	O
)	O
{	O
SWI_internal_error	O
(	O
)	O
;	O
}	O
s	pointer
->	O
pathnameM	pointer
=	O
strdup	function
(	O
name	pointer
)	O
;	O
s	pointer
->	O
lenM	int
=	O
len	int
;	O
newdata	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
len	int
+	O
1	int
)	O
;	O
swi_com_assert_pointer	function
(	O
(	O
void	O
*	O
)	O
newdata	pointer
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
*	O
(	O
newdata	pointer
+	O
len	int
)	O
=	O
'\0'	O
;	O
memcpy	function
(	O
newdata	pointer
,	O
data	pointer
,	O
len	int
+	O
1	int
)	O
;	O
s	pointer
->	O
dataM	pointer
=	O
newdata	pointer
;	O
E_DEBUG2	O
(	O
"data=[%s]"	pointer
,	O
(	O
char	O
*	O
)	O
(	O
s	pointer
->	O
dataM	pointer
)	O
)	O
;	O
uxfio_close	function
(	O
mem_fd	int
)	O
;	O
return	O
s	pointer
;	O
}	O
void	O
swi_xfile_delete	function
(	O
SWI_XFILE	struct
*	O
s	pointer
)	O
{	O
int	O
index	function
=	O
0	int
;	O
SWI_FILE_MEMBER	struct
*	O
file	pointer
;	O
if	O
(	O
s	pointer
->	O
baseM	struct
.	O
b_tagM	pointer
)	O
free	function
(	O
s	pointer
->	O
baseM	struct
.	O
b_tagM	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
package_pathM	pointer
)	O
free	function
(	O
s	pointer
->	O
package_pathM	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
control_dirM	pointer
)	O
free	function
(	O
s	pointer
->	O
control_dirM	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
swi_scM	pointer
)	O
swi_scripts_delete	function
(	O
s	pointer
->	O
swi_scM	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
info_headerM	pointer
)	O
swheader_close	function
(	O
s	pointer
->	O
info_headerM	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
swdef_fdM	int
>	O
0	int
)	O
uxfio_close	function
(	O
s	pointer
->	O
swdef_fdM	int
)	O
;	O
s	pointer
->	O
swdef_fdM	int
=	O
-	O
1	int
;	O
file	pointer
=	O
(	O
SWI_FILE_MEMBER	struct
*	O
)	O
cplob_val	function
(	O
s	pointer
->	O
archive_filesM	pointer
,	O
index	function
++	O
)	O
;	O
while	O
(	O
file	pointer
)	O
{	O
swi_file_member_delete	function
(	O
file	pointer
)	O
;	O
file	pointer
=	O
(	O
SWI_FILE_MEMBER	struct
*	O
)	O
cplob_val	function
(	O
s	pointer
->	O
archive_filesM	pointer
,	O
index	function
++	O
)	O
;	O
}	O
free	function
(	O
(	O
void	O
*	O
)	O
(	O
cplob_release	function
(	O
s	pointer
->	O
archive_filesM	pointer
)	O
)	O
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
SWI_XFILE	struct
*	O
swi_xfile_create	function
(	O
int	O
type	enum
,	O
SWHEADER	struct
*	O
global_index_header	pointer
,	O
SWPATH_EX	struct
*	O
current	pointer
)	O
{	O
SWI_XFILE	struct
*	O
s	pointer
=	O
(	O
SWI_XFILE	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
SWI_XFILE	struct
)	O
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swi_com_assert_pointer	function
(	O
(	O
void	O
*	O
)	O
s	pointer
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
if	O
(	O
type	enum
==	O
SWI_XFILE_TYPE_FILESET	int
)	O
{	O
swi_vbase_init	function
(	O
s	pointer
,	O
SWI_I_TYPE_XFILE	char
,	O
global_index_header	pointer
,	O
current	pointer
)	O
;	O
}	O
else	O
{	O
swi_vbase_init	function
(	O
s	pointer
,	O
SWI_I_TYPE_XFILE	char
,	O
global_index_header	pointer
,	O
NULL	O
)	O
;	O
}	O
s	pointer
->	O
xfileM	pointer
=	O
(	O
void	O
*	O
)	O
s	pointer
;	O
s	pointer
->	O
typeM	int
=	O
type	enum
;	O
s	pointer
->	O
package_pathM	pointer
=	O
NULL	O
;	O
s	pointer
->	O
control_dirM	pointer
=	O
NULL	O
;	O
s	pointer
->	O
swi_scM	pointer
=	O
swi_scripts_create	function
(	O
)	O
;	O
s	pointer
->	O
info_headerM	pointer
=	O
NULL	O
;	O
s	pointer
->	O
archive_filesM	pointer
=	O
cplob_open	function
(	O
1	int
)	O
;	O
s	pointer
->	O
swdef_fdM	int
=	O
-	O
1	int
;	O
s	pointer
->	O
did_parse_def_fileM	int
=	O
0	int
;	O
swi_xfile_set_state	function
(	O
s	pointer
,	O
SW_STATE_UNSET	pointer
)	O
;	O
s	pointer
->	O
is_selectedM	int
=	O
1	int
;	O
return	O
s	pointer
;	O
}	O
int	O
swi_write_fileset	function
(	O
SWI_XFILE	struct
*	O
xfile	pointer
,	O
int	O
ofd	int
)	O
{	O
return	O
0	int
;	O
}	O
void	O
swi_xfile_set_state	function
(	O
SWI_XFILE	struct
*	O
s	pointer
,	O
char	O
*	O
state	pointer
)	O
{	O
strncpy	function
(	O
s	pointer
->	O
stateM	array
,	O
state	pointer
,	O
sizeof	O
(	O
s	pointer
->	O
stateM	array
)	O
-	O
1	int
)	O
;	O
s	pointer
->	O
stateM	array
[	O
sizeof	O
(	O
s	pointer
->	O
stateM	array
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
SWHEADER	struct
*	O
swi_xfile_get_infoheader	function
(	O
SWI_XFILE	struct
*	O
xfile	pointer
)	O
{	O
return	O
xfile	pointer
->	O
info_headerM	pointer
;	O
}	O
SWI_FILE_MEMBER	struct
*	O
swi_xfile_get_control_file_by_path	function
(	O
SWI_XFILE	struct
*	O
xfile	pointer
,	O
char	O
*	O
path	pointer
)	O
{	O
int	O
index	function
=	O
0	int
;	O
SWI_FILE_MEMBER	struct
*	O
*	O
files	pointer
;	O
E_DEBUG	O
(	O
"Searching non-ieee control scripts"	pointer
)	O
;	O
files	pointer
=	O
(	O
SWI_FILE_MEMBER	struct
*	O
*	O
)	O
cplob_get_list	function
(	O
xfile	pointer
->	O
archive_filesM	pointer
)	O
;	O
while	O
(	O
*	O
files	pointer
&&	O
index	function
<	O
SWI_MAX_OBJ	int
)	O
{	O
if	O
(	O
swlib_basename_compare	function
(	O
path	pointer
,	O
(	O
*	O
files	pointer
)	O
->	O
pathnameM	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG2	O
(	O
"found one, returning %p"	pointer
,	O
(	O
void	O
*	O
)	O
(	O
*	O
files	pointer
)	O
)	O
;	O
return	O
(	O
*	O
files	pointer
)	O
;	O
}	O
index	function
++	O
;	O
}	O
E_DEBUG	O
(	O
"returning NULL"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
SWI_CONTROL_SCRIPT	struct
*	O
swi_xfile_get_control_script_by_path	function
(	O
SWI_XFILE	struct
*	O
xfile	pointer
,	O
char	O
*	O
path	pointer
)	O
{	O
int	O
index	function
=	O
0	int
;	O
SWI_SCRIPTS	struct
*	O
sci	pointer
=	O
xfile	pointer
->	O
swi_scM	pointer
;	O
SWI_CONTROL_SCRIPT	struct
*	O
*	O
scripts	pointer
=	O
sci	pointer
->	O
swi_coM	array
;	O
SWI_FILE_MEMBER	struct
*	O
*	O
files	pointer
;	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
E_DEBUG	O
(	O
"Searching IEEE control scripts"	pointer
)	O
;	O
while	O
(	O
*	O
scripts	pointer
&&	O
index	function
<	O
SWI_MAX_OBJ	int
)	O
{	O
if	O
(	O
swlib_basename_compare	function
(	O
path	pointer
,	O
(	O
*	O
scripts	pointer
)	O
->	O
afileM	pointer
->	O
pathnameM	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG2	O
(	O
"found one, returning %p"	pointer
,	O
(	O
void	O
*	O
)	O
(	O
(	O
*	O
scripts	pointer
)	O
->	O
afileM	pointer
)	O
)	O
;	O
return	O
(	O
*	O
scripts	pointer
)	O
;	O
}	O
index	function
++	O
;	O
scripts	pointer
++	O
;	O
}	O
E_DEBUG	O
(	O
"returning NULL"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
SWI_CONTROL_SCRIPT	struct
*	O
swi_xfile_get_control_script_by_id	function
(	O
SWI_XFILE	struct
*	O
xfile	pointer
,	O
int	O
id	pointer
)	O
{	O
int	O
index	function
=	O
0	int
;	O
SWI_SCRIPTS	struct
*	O
sci	pointer
=	O
xfile	pointer
->	O
swi_scM	pointer
;	O
SWI_CONTROL_SCRIPT	struct
*	O
*	O
scripts	pointer
=	O
sci	pointer
->	O
swi_coM	array
;	O
while	O
(	O
*	O
scripts	pointer
&&	O
index	function
<	O
SWI_MAX_OBJ	int
)	O
{	O
if	O
(	O
id	pointer
==	O
(	O
*	O
scripts	pointer
)	O
->	O
sidM	int
)	O
{	O
E_DEBUG2	O
(	O
"found one, returning %p"	pointer
,	O
(	O
void	O
*	O
)	O
(	O
*	O
scripts	pointer
)	O
)	O
;	O
return	O
(	O
*	O
scripts	pointer
)	O
;	O
}	O
index	function
++	O
;	O
scripts	pointer
++	O
;	O
}	O
E_DEBUG	O
(	O
"returning NULL"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
SWI_CONTROL_SCRIPT	struct
*	O
swi_xfile_get_control_script_by_tag	function
(	O
SWI_XFILE	struct
*	O
xfile	pointer
,	O
char	O
*	O
tag	pointer
)	O
{	O
int	O
index	function
=	O
0	int
;	O
SWI_SCRIPTS	struct
*	O
sci	pointer
=	O
xfile	pointer
->	O
swi_scM	pointer
;	O
SWI_CONTROL_SCRIPT	struct
*	O
*	O
scripts	pointer
=	O
sci	pointer
->	O
swi_coM	array
;	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
while	O
(	O
*	O
scripts	pointer
&&	O
index	function
<	O
SWI_MAX_OBJ	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
tag	pointer
,	O
(	O
*	O
scripts	pointer
)	O
->	O
baseM	struct
.	O
b_tagM	pointer
)	O
==	O
0	int
)	O
{	O
E_DEBUG2	O
(	O
"found one, returning %p"	pointer
,	O
(	O
void	O
*	O
)	O
(	O
*	O
scripts	pointer
)	O
)	O
;	O
return	O
(	O
*	O
scripts	pointer
)	O
;	O
}	O
index	function
++	O
;	O
scripts	pointer
++	O
;	O
}	O
E_DEBUG	O
(	O
"returning NULL"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
int	O
swi_examine_signature_blocks	function
(	O
SWI_XFILE	struct
*	O
dfiles	pointer
,	O
int	O
*	O
sig_block_start	pointer
,	O
int	O
*	O
sig_block_end	pointer
)	O
{	O
int	O
index	function
;	O
char	O
*	O
f	pointer
;	O
SWI_FILE_MEMBER	struct
*	O
s	pointer
;	O
CPLOB	struct
*	O
cplob	pointer
=	O
dfiles	pointer
->	O
archive_filesM	pointer
;	O
*	O
sig_block_start	pointer
=	O
-	O
1	int
;	O
*	O
sig_block_end	pointer
=	O
-	O
1	int
;	O
index	function
=	O
0	int
;	O
s	pointer
=	O
(	O
SWI_FILE_MEMBER	struct
*	O
)	O
cplob_val	function
(	O
cplob	pointer
,	O
index	function
)	O
;	O
while	O
(	O
s	pointer
)	O
{	O
f	pointer
=	O
strstr	function
(	O
s	pointer
->	O
pathnameM	pointer
,	O
"/"	pointer
SW_A_signature	pointer
)	O
;	O
if	O
(	O
f	pointer
&&	O
*	O
(	O
f	pointer
+	O
10	int
)	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
sig_block_start	pointer
==	O
-	O
1	int
)	O
*	O
sig_block_start	pointer
=	O
s	pointer
->	O
header_start_offsetM	int
;	O
*	O
sig_block_end	pointer
=	O
s	pointer
->	O
data_start_offsetM	int
+	O
s	pointer
->	O
lenM	int
;	O
}	O
index	function
++	O
;	O
s	pointer
=	O
(	O
SWI_FILE_MEMBER	struct
*	O
)	O
cplob_val	function
(	O
cplob	pointer
,	O
index	function
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
swi_xfile_has_posix_control_file	function
(	O
SWI_XFILE	struct
*	O
xfile	pointer
,	O
char	O
*	O
tag	pointer
)	O
{	O
SWI_CONTROL_SCRIPT	struct
*	O
ret	pointer
;	O
ret	pointer
=	O
swi_xfile_get_control_script_by_tag	function
(	O
xfile	pointer
,	O
tag	pointer
)	O
;	O
return	O
ret	pointer
?	O
1	int
:	O
0	int
;	O
}	O
