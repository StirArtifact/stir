static	O
char	O
*	O
default_path	pointer
=	O
"/usr/local/lib/ps:/usr/lib/ps"	pointer
;	O
static	O
char	O
*	O
error_names	array
[	O
]	O
=	O
{	O
"AFM Success"	pointer
,	O
"AFM Error"	pointer
,	O
"out of memory"	pointer
,	O
"illegal argument"	pointer
,	O
"unknown font"	pointer
,	O
"syntax error"	pointer
,	O
"unsupported format"	pointer
,	O
"file IO failed"	pointer
,	O
"file is not an AFM file"	pointer
,	O
}	O
;	O
static	O
void	O
read_font_map	function
___P	O
(	O
(	O
AFMHandle	pointer
handle	pointer
,	O
char	O
*	O
name	pointer
)	O
)	O
;	O
static	O
void	O
apply_encoding	function
___P	O
(	O
(	O
AFMFont	pointer
font	pointer
,	O
AFMEncodingTable	struct
*	O
enc	enum
,	O
unsigned	O
int	O
flags	int
)	O
)	O
;	O
void	O
afm_error_to_string	function
(	O
AFMError	int
error	int
,	O
char	O
*	O
buf	pointer
)	O
{	O
char	O
*	O
syserr	pointer
;	O
int	O
code	char
,	O
syserrno	int
;	O
code	char
=	O
error	int
&	O
0xffff	int
;	O
syserrno	int
=	O
(	O
error	int
>>	O
16	int
)	O
&	O
0xffff	int
;	O
if	O
(	O
syserrno	int
)	O
syserr	pointer
=	O
strerror	function
(	O
syserrno	int
)	O
;	O
else	O
syserr	pointer
=	O
NULL	O
;	O
if	O
(	O
code	char
>=	O
NUM_ERRORS	int
)	O
{	O
sprintf	function
(	O
buf	pointer
,	O
"afm_error_to_string(): illegal error code: %d\n"	pointer
,	O
error	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
code	char
==	O
0	int
)	O
sprintf	function
(	O
buf	pointer
,	O
"AFM Success"	pointer
)	O
;	O
else	O
if	O
(	O
code	char
==	O
1	int
)	O
sprintf	function
(	O
buf	pointer
,	O
"%s%s%s"	pointer
,	O
"AFM Error"	pointer
,	O
syserr	pointer
?	O
":"	pointer
:	O
""	pointer
,	O
syserr	pointer
?	O
syserr	pointer
:	O
""	pointer
)	O
;	O
else	O
sprintf	function
(	O
buf	pointer
,	O
"AFM Error: %s%s%s"	pointer
,	O
error_names	array
[	O
code	char
]	O
,	O
syserr	pointer
?	O
": "	pointer
:	O
""	pointer
,	O
syserr	pointer
?	O
syserr	pointer
:	O
""	pointer
)	O
;	O
}	O
AFMError	int
afm_create	function
(	O
const	O
char	O
*	O
path	pointer
,	O
unsigned	O
int	O
verbose_level	int
,	O
AFMHandle	pointer
*	O
handle_return	pointer
)	O
{	O
AFMHandle	pointer
handle	pointer
;	O
AFMError	int
error	int
=	O
AFM_SUCCESS	int
;	O
const	O
char	O
*	O
cp	pointer
,	O
*	O
cp2	pointer
;	O
int	O
len	int
;	O
char	O
buf	pointer
[	O
512	int
]	O
;	O
struct	O
stat	struct
stat_st	struct
;	O
handle	pointer
=	O
(	O
AFMHandle	pointer
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
handle	pointer
)	O
)	O
;	O
if	O
(	O
handle	pointer
==	O
NULL	O
)	O
{	O
error	int
=	O
AFM_ERROR_MEMORY	int
;	O
goto	O
error_out	O
;	O
}	O
handle	pointer
->	O
font_map	pointer
=	O
strhash_init	function
(	O
)	O
;	O
if	O
(	O
handle	pointer
->	O
font_map	pointer
==	O
NULL	O
)	O
{	O
error	int
=	O
AFM_ERROR_MEMORY	int
;	O
goto	O
error_out	O
;	O
}	O
handle	pointer
->	O
verbose	int
=	O
verbose_level	int
;	O
if	O
(	O
path	pointer
==	O
NULL	O
)	O
path	pointer
=	O
default_path	pointer
;	O
afm_message	function
(	O
handle	pointer
,	O
1	int
,	O
"AFM: scanning path...\n"	pointer
)	O
;	O
for	O
(	O
cp	pointer
=	O
path	pointer
;	O
cp	pointer
;	O
cp	pointer
=	O
strchr	function
(	O
cp	pointer
,	O
PATH_SEPARATOR	char
)	O
)	O
{	O
if	O
(	O
cp	pointer
!=	O
path	pointer
)	O
cp	pointer
++	O
;	O
cp2	pointer
=	O
strchr	function
(	O
cp	pointer
,	O
PATH_SEPARATOR	char
)	O
;	O
if	O
(	O
cp2	pointer
)	O
len	int
=	O
cp2	pointer
-	O
cp	pointer
;	O
else	O
len	int
=	O
strlen	function
(	O
cp	pointer
)	O
;	O
memcpy	function
(	O
buf	pointer
,	O
cp	pointer
,	O
len	int
)	O
;	O
buf	pointer
[	O
len	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
len	int
>	O
0	int
&&	O
buf	pointer
[	O
len	int
-	O
1	int
]	O
==	O
'/'	O
)	O
buf	pointer
[	O
len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
buf	pointer
,	O
"/font.map"	pointer
)	O
;	O
if	O
(	O
stat	struct
(	O
buf	pointer
,	O
&	O
stat_st	struct
)	O
==	O
0	int
)	O
read_font_map	function
(	O
handle	pointer
,	O
buf	pointer
)	O
;	O
}	O
*	O
handle_return	pointer
=	O
handle	pointer
;	O
return	O
AFM_SUCCESS	int
;	O
error_out	O
:	O
(	O
void	O
)	O
afm_destroy	function
(	O
handle	pointer
)	O
;	O
return	O
error	int
;	O
}	O
AFMError	int
afm_destroy	function
(	O
AFMHandle	pointer
handle	pointer
)	O
{	O
char	O
*	O
key	pointer
;	O
int	O
keylen	int
;	O
char	O
*	O
cp	pointer
;	O
if	O
(	O
handle	pointer
==	O
NULL	O
)	O
return	O
AFM_ERROR_ARGUMENT	int
;	O
while	O
(	O
strhash_get_first	function
(	O
handle	pointer
->	O
font_map	pointer
,	O
&	O
key	pointer
,	O
&	O
keylen	int
,	O
(	O
void	O
*	O
)	O
&	O
cp	pointer
)	O
)	O
free	function
(	O
cp	pointer
)	O
;	O
strhash_free	function
(	O
handle	pointer
->	O
font_map	pointer
)	O
;	O
free	function
(	O
handle	pointer
)	O
;	O
return	O
AFM_SUCCESS	int
;	O
}	O
AFMError	int
afm_set_verbose	function
(	O
AFMHandle	pointer
handle	pointer
,	O
unsigned	O
int	O
level	int
)	O
{	O
if	O
(	O
handle	pointer
==	O
NULL	O
)	O
return	O
AFM_ERROR_ARGUMENT	int
;	O
handle	pointer
->	O
verbose	int
=	O
level	int
;	O
return	O
AFM_SUCCESS	int
;	O
}	O
AFMError	int
afm_font_prefix	function
(	O
AFMHandle	pointer
handle	pointer
,	O
const	O
char	O
*	O
fontname	pointer
,	O
const	O
char	O
*	O
*	O
prefix_return	pointer
)	O
{	O
char	O
*	O
filename	pointer
;	O
if	O
(	O
handle	pointer
==	O
NULL	O
||	O
fontname	pointer
==	O
NULL	O
||	O
prefix_return	pointer
==	O
NULL	O
)	O
return	O
AFM_ERROR_ARGUMENT	int
;	O
if	O
(	O
!	O
strhash_get	function
(	O
handle	pointer
->	O
font_map	pointer
,	O
fontname	pointer
,	O
strlen	function
(	O
fontname	pointer
)	O
,	O
(	O
void	O
*	O
)	O
&	O
filename	pointer
)	O
)	O
return	O
AFM_ERROR_UNKNOWN_FONT	int
;	O
*	O
prefix_return	pointer
=	O
filename	pointer
;	O
return	O
AFM_SUCCESS	int
;	O
}	O
AFMError	int
afm_open_font	function
(	O
AFMHandle	pointer
handle	pointer
,	O
unsigned	O
int	O
info_level	int
,	O
const	O
char	O
*	O
fontname	pointer
,	O
AFMFont	pointer
*	O
font_return	pointer
)	O
{	O
char	O
*	O
filename	pointer
;	O
char	O
fname	array
[	O
512	int
]	O
;	O
if	O
(	O
handle	pointer
==	O
NULL	O
||	O
fontname	pointer
==	O
NULL	O
)	O
return	O
AFM_ERROR_ARGUMENT	int
;	O
if	O
(	O
!	O
strhash_get	function
(	O
handle	pointer
->	O
font_map	pointer
,	O
fontname	pointer
,	O
strlen	function
(	O
fontname	pointer
)	O
,	O
(	O
void	O
*	O
)	O
&	O
filename	pointer
)	O
)	O
return	O
AFM_ERROR_UNKNOWN_FONT	int
;	O
sprintf	function
(	O
fname	array
,	O
"%s.afm"	pointer
,	O
filename	pointer
)	O
;	O
return	O
afm_open_file	function
(	O
handle	pointer
,	O
info_level	int
,	O
fname	array
,	O
font_return	pointer
)	O
;	O
}	O
AFMError	int
afm_open_file	function
(	O
AFMHandle	pointer
handle	pointer
,	O
unsigned	O
int	O
info_level	int
,	O
const	O
char	O
*	O
filename	pointer
,	O
AFMFont	pointer
*	O
font_return	pointer
)	O
{	O
AFMFont	pointer
font	pointer
;	O
AFMError	int
error	int
=	O
AFM_SUCCESS	int
;	O
if	O
(	O
handle	pointer
==	O
NULL	O
||	O
filename	pointer
==	O
NULL	O
)	O
return	O
AFM_ERROR_ARGUMENT	int
;	O
font	pointer
=	O
(	O
AFMFont	pointer
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
font	pointer
)	O
)	O
;	O
if	O
(	O
font	pointer
==	O
NULL	O
)	O
return	O
AFM_ERROR_MEMORY	int
;	O
font	pointer
->	O
private	pointer
=	O
(	O
struct	O
afm_font_private_data_st	struct
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
font	pointer
->	O
private	pointer
)	O
)	O
;	O
if	O
(	O
font	pointer
->	O
private	pointer
==	O
NULL	O
)	O
{	O
error	int
=	O
AFM_ERROR_MEMORY	int
;	O
goto	O
error_out	O
;	O
}	O
font	pointer
->	O
private	pointer
->	O
fontnames	pointer
=	O
strhash_init	function
(	O
)	O
;	O
if	O
(	O
font	pointer
->	O
private	pointer
->	O
fontnames	pointer
==	O
NULL	O
)	O
{	O
error	int
=	O
AFM_ERROR_MEMORY	int
;	O
goto	O
error_out	O
;	O
}	O
font	pointer
->	O
private	pointer
->	O
compositenames	pointer
=	O
strhash_init	function
(	O
)	O
;	O
if	O
(	O
font	pointer
->	O
private	pointer
->	O
compositenames	pointer
==	O
NULL	O
)	O
{	O
error	int
=	O
AFM_ERROR_MEMORY	int
;	O
goto	O
error_out	O
;	O
}	O
font	pointer
->	O
info_level	int
=	O
info_level	int
;	O
if	O
(	O
setjmp	function
(	O
handle	pointer
->	O
jmpbuf	array
)	O
)	O
{	O
error	int
=	O
handle	pointer
->	O
parse_error	int
;	O
goto	O
error_out	O
;	O
}	O
else	O
{	O
afm_parse_file	function
(	O
handle	pointer
,	O
filename	pointer
,	O
font	pointer
)	O
;	O
}	O
*	O
font_return	pointer
=	O
font	pointer
;	O
return	O
AFM_SUCCESS	int
;	O
error_out	O
:	O
(	O
void	O
)	O
afm_close_font	function
(	O
font	pointer
)	O
;	O
return	O
error	int
;	O
}	O
AFMError	int
afm_close_font	function
(	O
AFMFont	pointer
font	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
font	pointer
==	O
NULL	O
)	O
return	O
AFM_ERROR_ARGUMENT	int
;	O
FREE	O
(	O
font	pointer
->	O
global_info	struct
.	O
FontName	pointer
)	O
;	O
FREE	O
(	O
font	pointer
->	O
global_info	struct
.	O
FullName	pointer
)	O
;	O
FREE	O
(	O
font	pointer
->	O
global_info	struct
.	O
FamilyName	pointer
)	O
;	O
FREE	O
(	O
font	pointer
->	O
global_info	struct
.	O
Weight	pointer
)	O
;	O
FREE	O
(	O
font	pointer
->	O
global_info	struct
.	O
Version	pointer
)	O
;	O
FREE	O
(	O
font	pointer
->	O
global_info	struct
.	O
Notice	pointer
)	O
;	O
FREE	O
(	O
font	pointer
->	O
global_info	struct
.	O
EncodingScheme	pointer
)	O
;	O
FREE	O
(	O
font	pointer
->	O
global_info	struct
.	O
CharacterSet	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	pointer
->	O
num_character_metrics	long
;	O
i	int
++	O
)	O
FREE	O
(	O
font	pointer
->	O
character_metrics	pointer
[	O
i	int
]	O
.	O
name	pointer
)	O
;	O
FREE	O
(	O
font	pointer
->	O
character_metrics	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	pointer
->	O
num_composites	long
;	O
i	int
++	O
)	O
FREE	O
(	O
font	pointer
->	O
composites	pointer
[	O
i	int
]	O
.	O
name	pointer
)	O
;	O
FREE	O
(	O
font	pointer
->	O
composites	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	pointer
->	O
num_kern_pairs	long
;	O
i	int
++	O
)	O
{	O
FREE	O
(	O
font	pointer
->	O
kern_pairs	pointer
[	O
i	int
]	O
.	O
name1	pointer
)	O
;	O
FREE	O
(	O
font	pointer
->	O
kern_pairs	pointer
[	O
i	int
]	O
.	O
name2	pointer
)	O
;	O
}	O
FREE	O
(	O
font	pointer
->	O
kern_pairs	pointer
)	O
;	O
FREE	O
(	O
font	pointer
->	O
track_kerns	pointer
)	O
;	O
strhash_free	function
(	O
font	pointer
->	O
private	pointer
->	O
fontnames	pointer
)	O
;	O
strhash_free	function
(	O
font	pointer
->	O
private	pointer
->	O
compositenames	pointer
)	O
;	O
free	function
(	O
font	pointer
)	O
;	O
return	O
AFM_SUCCESS	int
;	O
}	O
void	O
afm_font_dump	function
(	O
FILE	struct
*	O
fp	pointer
,	O
AFMFont	pointer
font	pointer
)	O
{	O
int	O
i	int
;	O
fprintf	function
(	O
fp	pointer
,	O
"AFM Format Specification version: %g\n"	pointer
,	O
font	pointer
->	O
version	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"Global Font Information\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  FontName:\t%s\n"	pointer
,	O
STR	O
(	O
font	pointer
->	O
global_info	struct
.	O
FontName	pointer
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  FullName:\t%s\n"	pointer
,	O
STR	O
(	O
font	pointer
->	O
global_info	struct
.	O
FullName	pointer
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  FamilyName:\t%s\n"	pointer
,	O
STR	O
(	O
font	pointer
->	O
global_info	struct
.	O
FamilyName	pointer
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  Weight:\t%s\n"	pointer
,	O
STR	O
(	O
font	pointer
->	O
global_info	struct
.	O
Weight	pointer
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  FontBBox:\t%g %g %g %g\n"	pointer
,	O
font	pointer
->	O
global_info	struct
.	O
FontBBox_llx	double
,	O
font	pointer
->	O
global_info	struct
.	O
FontBBox_lly	double
,	O
font	pointer
->	O
global_info	struct
.	O
FontBBox_urx	double
,	O
font	pointer
->	O
global_info	struct
.	O
FontBBox_ury	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  Version:\t%s\n"	pointer
,	O
STR	O
(	O
font	pointer
->	O
global_info	struct
.	O
Version	pointer
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  Notice:\t%s\n"	pointer
,	O
STR	O
(	O
font	pointer
->	O
global_info	struct
.	O
Notice	pointer
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  EncodingScheme:\t%s\n"	pointer
,	O
STR	O
(	O
font	pointer
->	O
global_info	struct
.	O
EncodingScheme	pointer
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  MappingScheme:\t%ld\n"	pointer
,	O
font	pointer
->	O
global_info	struct
.	O
MappingScheme	long
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  EscChar:\t%ld\n"	pointer
,	O
font	pointer
->	O
global_info	struct
.	O
EscChar	long
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  CharacterSet:\t%s\n"	pointer
,	O
STR	O
(	O
font	pointer
->	O
global_info	struct
.	O
CharacterSet	pointer
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  Characters:\t%ld\n"	pointer
,	O
font	pointer
->	O
global_info	struct
.	O
Characters	long
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  IsBaseFont:\t%s\n"	pointer
,	O
BOOL	O
(	O
font	pointer
->	O
global_info	struct
.	O
IsBaseFont	enum
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  VVector:\t%g %g\n"	pointer
,	O
font	pointer
->	O
global_info	struct
.	O
VVector_0	double
,	O
font	pointer
->	O
global_info	struct
.	O
VVector_1	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  IsFixedV:\t%s\n"	pointer
,	O
BOOL	O
(	O
font	pointer
->	O
global_info	struct
.	O
IsFixedV	enum
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  CapHeight:\t%g\n"	pointer
,	O
font	pointer
->	O
global_info	struct
.	O
CapHeight	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  XHeight:\t%g\n"	pointer
,	O
font	pointer
->	O
global_info	struct
.	O
XHeight	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  Ascender:\t%g\n"	pointer
,	O
font	pointer
->	O
global_info	struct
.	O
Ascender	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  Descender:\t%g\n"	pointer
,	O
font	pointer
->	O
global_info	struct
.	O
Descender	double
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
2	int
;	O
i	int
++	O
)	O
if	O
(	O
font	pointer
->	O
writing_direction_metrics	array
[	O
i	int
]	O
.	O
is_valid	enum
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"Writing Direction %d\n"	pointer
,	O
i	int
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  UnderlinePosition: %g\n"	pointer
,	O
font	pointer
->	O
writing_direction_metrics	array
[	O
i	int
]	O
.	O
UnderlinePosition	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  UnderlineThickness: %g\n"	pointer
,	O
font	pointer
->	O
writing_direction_metrics	array
[	O
i	int
]	O
.	O
UnderlineThickness	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  ItalicAngle: %g\n"	pointer
,	O
font	pointer
->	O
writing_direction_metrics	array
[	O
i	int
]	O
.	O
ItalicAngle	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  CharWidth: %g %g\n"	pointer
,	O
font	pointer
->	O
writing_direction_metrics	array
[	O
i	int
]	O
.	O
CharWidth_x	double
,	O
font	pointer
->	O
writing_direction_metrics	array
[	O
i	int
]	O
.	O
CharWidth_y	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  IsFixedPitch: %s\n"	pointer
,	O
BOOL	O
(	O
font	pointer
->	O
writing_direction_metrics	array
[	O
i	int
]	O
.	O
IsFixedPitch	enum
)	O
)	O
;	O
}	O
fprintf	function
(	O
fp	pointer
,	O
"Individual Character Metrics %ld\n"	pointer
,	O
font	pointer
->	O
num_character_metrics	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	pointer
->	O
num_character_metrics	long
;	O
i	int
++	O
)	O
{	O
AFMIndividualCharacterMetrics	struct
*	O
cm	pointer
;	O
cm	pointer
=	O
&	O
font	pointer
->	O
character_metrics	pointer
[	O
i	int
]	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  C %ld ; N %s ; B %g %g %g %g\n"	pointer
,	O
cm	pointer
->	O
character_code	long
,	O
STR	O
(	O
cm	pointer
->	O
name	pointer
)	O
,	O
cm	pointer
->	O
llx	double
,	O
cm	pointer
->	O
lly	double
,	O
cm	pointer
->	O
urx	double
,	O
cm	pointer
->	O
ury	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"    W0X %g ; W0Y %g ; W1X %g ; W1Y %g ; VV %g %g\n"	pointer
,	O
cm	pointer
->	O
w0x	double
,	O
cm	pointer
->	O
w0y	double
,	O
cm	pointer
->	O
w1x	double
,	O
cm	pointer
->	O
w1y	double
,	O
cm	pointer
->	O
vv_x	double
,	O
cm	pointer
->	O
vv_y	double
)	O
;	O
}	O
fprintf	function
(	O
fp	pointer
,	O
"Composite Character Data %ld\n"	pointer
,	O
font	pointer
->	O
num_composites	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	pointer
->	O
num_composites	long
;	O
i	int
++	O
)	O
{	O
AFMComposite	struct
*	O
cm	pointer
;	O
int	O
j	int
;	O
cm	pointer
=	O
&	O
font	pointer
->	O
composites	pointer
[	O
i	int
]	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  CC %s %ld"	pointer
,	O
cm	pointer
->	O
name	pointer
,	O
cm	pointer
->	O
num_components	long
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
cm	pointer
->	O
num_components	long
;	O
j	int
++	O
)	O
fprintf	function
(	O
fp	pointer
,	O
" ; PCC %s %g %g"	pointer
,	O
cm	pointer
->	O
components	pointer
[	O
j	int
]	O
.	O
name	pointer
,	O
cm	pointer
->	O
components	pointer
[	O
j	int
]	O
.	O
deltax	double
,	O
cm	pointer
->	O
components	pointer
[	O
j	int
]	O
.	O
deltay	double
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
fprintf	function
(	O
fp	pointer
,	O
"Pair-Wise Kerning %ld\n"	pointer
,	O
font	pointer
->	O
num_kern_pairs	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	pointer
->	O
num_kern_pairs	long
;	O
i	int
++	O
)	O
{	O
AFMPairWiseKerning	struct
*	O
kp	pointer
;	O
kp	pointer
=	O
&	O
font	pointer
->	O
kern_pairs	pointer
[	O
i	int
]	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  KP %s %s %g %g\n"	pointer
,	O
STR	O
(	O
kp	pointer
->	O
name1	pointer
)	O
,	O
STR	O
(	O
kp	pointer
->	O
name2	pointer
)	O
,	O
kp	pointer
->	O
kx	double
,	O
kp	pointer
->	O
ky	double
)	O
;	O
}	O
fprintf	function
(	O
fp	pointer
,	O
"Track Kerning %ld\n"	pointer
,	O
font	pointer
->	O
num_track_kerns	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	pointer
->	O
num_track_kerns	long
;	O
i	int
++	O
)	O
{	O
AFMTrackKern	struct
*	O
tk	pointer
;	O
tk	pointer
=	O
&	O
font	pointer
->	O
track_kerns	pointer
[	O
i	int
]	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"  TrackKern %ld %g %g %g %g\n"	pointer
,	O
tk	pointer
->	O
degree	long
,	O
tk	pointer
->	O
min_ptsize	double
,	O
tk	pointer
->	O
min_kern	double
,	O
tk	pointer
->	O
max_ptsize	double
,	O
tk	pointer
->	O
max_kern	double
)	O
;	O
}	O
}	O
AFMError	int
afm_font_stringwidth	function
(	O
AFMFont	pointer
font	pointer
,	O
AFMNumber	double
ptsize	double
,	O
char	O
*	O
string	pointer
,	O
unsigned	O
int	O
stringlen	int
,	O
AFMNumber	double
*	O
w0x_return	pointer
,	O
AFMNumber	double
*	O
w0y_return	pointer
)	O
{	O
unsigned	O
int	O
i	int
;	O
AFMNumber	double
x	double
=	O
0.0	int
;	O
AFMNumber	double
y	double
=	O
0.0	int
;	O
AFMIndividualCharacterMetrics	struct
*	O
cm	pointer
;	O
if	O
(	O
!	O
font	pointer
||	O
!	O
string	pointer
||	O
!	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
is_valid	enum
)	O
return	O
AFM_ERROR_ARGUMENT	int
;	O
if	O
(	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
IsFixedPitch	enum
)	O
{	O
x	double
=	O
stringlen	int
*	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
CharWidth_x	double
;	O
y	double
=	O
stringlen	int
*	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
CharWidth_y	double
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
stringlen	int
;	O
i	int
++	O
)	O
{	O
cm	pointer
=	O
font	pointer
->	O
encoding	array
[	O
(	O
unsigned	O
char	O
)	O
string	pointer
[	O
i	int
]	O
]	O
;	O
if	O
(	O
cm	pointer
==	O
AFM_ENC_NONE	O
||	O
cm	pointer
==	O
AFM_ENC_NON_EXISTENT	O
)	O
{	O
x	double
+=	O
font	pointer
->	O
private	pointer
->	O
undef	pointer
->	O
w0x	double
;	O
y	double
+=	O
font	pointer
->	O
private	pointer
->	O
undef	pointer
->	O
w0y	double
;	O
}	O
else	O
{	O
x	double
+=	O
cm	pointer
->	O
w0x	double
;	O
y	double
+=	O
cm	pointer
->	O
w0y	double
;	O
}	O
}	O
}	O
*	O
w0x_return	pointer
=	O
x	double
/	O
UNITS_PER_POINT	int
*	O
ptsize	double
;	O
*	O
w0y_return	pointer
=	O
y	double
/	O
UNITS_PER_POINT	int
*	O
ptsize	double
;	O
return	O
AFM_SUCCESS	int
;	O
}	O
AFMError	int
afm_font_charwidth	function
(	O
AFMFont	pointer
font	pointer
,	O
AFMNumber	double
ptsize	double
,	O
char	O
ch	char
,	O
AFMNumber	double
*	O
w0x_return	pointer
,	O
AFMNumber	double
*	O
w0y_return	pointer
)	O
{	O
AFMNumber	double
x	double
=	O
0.0	int
;	O
AFMNumber	double
y	double
=	O
0.0	int
;	O
AFMIndividualCharacterMetrics	struct
*	O
cm	pointer
;	O
if	O
(	O
!	O
font	pointer
||	O
!	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
is_valid	enum
)	O
return	O
AFM_ERROR_ARGUMENT	int
;	O
if	O
(	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
IsFixedPitch	enum
)	O
{	O
x	double
=	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
CharWidth_x	double
;	O
y	double
=	O
font	pointer
->	O
writing_direction_metrics	array
[	O
0	int
]	O
.	O
CharWidth_y	double
;	O
}	O
else	O
{	O
cm	pointer
=	O
font	pointer
->	O
encoding	array
[	O
(	O
unsigned	O
char	O
)	O
ch	char
]	O
;	O
if	O
(	O
cm	pointer
==	O
AFM_ENC_NONE	O
||	O
cm	pointer
==	O
AFM_ENC_NON_EXISTENT	O
)	O
{	O
x	double
=	O
font	pointer
->	O
private	pointer
->	O
undef	pointer
->	O
w0x	double
;	O
y	double
=	O
font	pointer
->	O
private	pointer
->	O
undef	pointer
->	O
w0y	double
;	O
}	O
else	O
{	O
x	double
=	O
cm	pointer
->	O
w0x	double
;	O
y	double
=	O
cm	pointer
->	O
w0y	double
;	O
}	O
}	O
*	O
w0x_return	pointer
=	O
x	double
/	O
UNITS_PER_POINT	int
*	O
ptsize	double
;	O
*	O
w0y_return	pointer
=	O
y	double
/	O
UNITS_PER_POINT	int
*	O
ptsize	double
;	O
return	O
AFM_SUCCESS	int
;	O
}	O
AFMError	int
afm_font_encode	function
(	O
AFMFont	pointer
font	pointer
,	O
unsigned	O
char	O
code	char
,	O
char	O
*	O
name	pointer
,	O
unsigned	O
int	O
flags	int
)	O
{	O
AFMIndividualCharacterMetrics	struct
*	O
cm	pointer
;	O
AFMComposite	struct
*	O
comp	pointer
;	O
if	O
(	O
font	pointer
==	O
NULL	O
)	O
return	O
AFM_ERROR_ARGUMENT	int
;	O
if	O
(	O
name	pointer
)	O
{	O
if	O
(	O
!	O
strhash_get	function
(	O
font	pointer
->	O
private	pointer
->	O
fontnames	pointer
,	O
name	pointer
,	O
strlen	function
(	O
name	pointer
)	O
,	O
(	O
void	O
*	O
)	O
&	O
cm	pointer
)	O
)	O
{	O
if	O
(	O
(	O
flags	int
&	O
AFM_ENCODE_ACCEPT_COMPOSITES	int
)	O
==	O
0	int
||	O
strhash_get	function
(	O
font	pointer
->	O
private	pointer
->	O
compositenames	pointer
,	O
name	pointer
,	O
strlen	function
(	O
name	pointer
)	O
,	O
(	O
void	O
*	O
)	O
&	O
comp	pointer
)	O
==	O
0	int
)	O
cm	pointer
=	O
AFM_ENC_NON_EXISTENT	O
;	O
else	O
{	O
if	O
(	O
!	O
strhash_get	function
(	O
font	pointer
->	O
private	pointer
->	O
fontnames	pointer
,	O
comp	pointer
->	O
components	pointer
[	O
0	int
]	O
.	O
name	pointer
,	O
strlen	function
(	O
comp	pointer
->	O
components	pointer
[	O
0	int
]	O
.	O
name	pointer
)	O
,	O
(	O
void	O
*	O
)	O
&	O
cm	pointer
)	O
)	O
cm	pointer
=	O
AFM_ENC_NON_EXISTENT	O
;	O
}	O
}	O
}	O
else	O
cm	pointer
=	O
AFM_ENC_NONE	O
;	O
font	pointer
->	O
encoding	array
[	O
(	O
unsigned	O
int	O
)	O
code	char
]	O
=	O
cm	pointer
;	O
return	O
AFM_SUCCESS	int
;	O
}	O
AFMError	int
afm_font_encoding	function
(	O
AFMFont	pointer
font	pointer
,	O
AFMEncoding	enum
enc	enum
,	O
unsigned	O
int	O
flags	int
)	O
{	O
int	O
i	int
;	O
AFMIndividualCharacterMetrics	struct
*	O
cm	pointer
;	O
if	O
(	O
font	pointer
==	O
NULL	O
)	O
return	O
AFM_ERROR_ARGUMENT	int
;	O
switch	O
(	O
enc	enum
)	O
{	O
case	O
AFM_ENCODING_DEFAULT	int
:	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
256	int
;	O
i	int
++	O
)	O
font	pointer
->	O
encoding	array
[	O
i	int
]	O
=	O
AFM_ENC_NONE	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
font	pointer
->	O
num_character_metrics	long
;	O
i	int
++	O
)	O
{	O
cm	pointer
=	O
&	O
font	pointer
->	O
character_metrics	pointer
[	O
i	int
]	O
;	O
font	pointer
->	O
encoding	array
[	O
cm	pointer
->	O
character_code	long
]	O
=	O
cm	pointer
;	O
}	O
break	O
;	O
case	O
AFM_ENCODING_ISO_8859_1	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_88591_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_ISO_8859_2	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_88592_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_ISO_8859_3	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_88593_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_ISO_8859_4	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_88594_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_ISO_8859_5	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_88595_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_ISO_8859_7	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_88597_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_ISO_8859_9	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_88599_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_ISO_8859_10	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_885910_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_IBMPC	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_ibmpc_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_ASCII	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_88591_encoding	array
,	O
flags	int
)	O
;	O
for	O
(	O
i	int
=	O
128	int
;	O
i	int
<	O
256	int
;	O
i	int
++	O
)	O
font	pointer
->	O
encoding	array
[	O
i	int
]	O
=	O
AFM_ENC_NONE	O
;	O
break	O
;	O
case	O
AFM_ENCODING_MAC	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_mac_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_VMS	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_vms_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_HP8	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_hp8_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
case	O
AFM_ENCODING_KOI8	int
:	O
apply_encoding	function
(	O
font	pointer
,	O
afm_koi8_encoding	array
,	O
flags	int
)	O
;	O
break	O
;	O
}	O
return	O
AFM_SUCCESS	int
;	O
}	O
void	O
afm_message	function
(	O
AFMHandle	pointer
handle	pointer
,	O
unsigned	O
int	O
level	int
,	O
char	O
*	O
message	pointer
)	O
{	O
if	O
(	O
handle	pointer
->	O
verbose	int
<	O
level	int
)	O
return	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s"	pointer
,	O
message	pointer
)	O
;	O
}	O
void	O
afm_error	function
(	O
AFMHandle	pointer
handle	pointer
,	O
char	O
*	O
message	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"AFM Error: %s\n"	pointer
,	O
message	pointer
)	O
;	O
}	O
static	O
void	O
read_font_map	function
(	O
AFMHandle	pointer
handle	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
char	O
buf	pointer
[	O
512	int
]	O
;	O
char	O
fullname	array
[	O
512	int
]	O
;	O
unsigned	O
int	O
dirlen	int
;	O
char	O
*	O
cp	pointer
,	O
*	O
cp2	pointer
;	O
char	O
msg	array
[	O
256	int
]	O
;	O
sprintf	function
(	O
msg	array
,	O
"AFM: reading font map \"%s\"\n"	pointer
,	O
name	pointer
)	O
;	O
afm_message	function
(	O
handle	pointer
,	O
1	int
,	O
msg	array
)	O
;	O
fp	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
{	O
sprintf	function
(	O
msg	array
,	O
"AFM: couldn't open font map \"%s\": %s\n"	pointer
,	O
name	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
afm_message	function
(	O
handle	pointer
,	O
1	int
,	O
msg	array
)	O
;	O
return	O
;	O
}	O
cp	pointer
=	O
strrchr	function
(	O
name	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
cp	pointer
)	O
{	O
dirlen	int
=	O
cp	pointer
-	O
name	pointer
+	O
1	int
;	O
memcpy	function
(	O
fullname	array
,	O
name	pointer
,	O
dirlen	int
)	O
;	O
}	O
else	O
{	O
dirlen	int
=	O
2	int
;	O
memcpy	function
(	O
fullname	array
,	O
"./"	pointer
,	O
dirlen	int
)	O
;	O
}	O
while	O
(	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
fp	pointer
)	O
)	O
{	O
char	O
font	pointer
[	O
256	int
]	O
;	O
char	O
file	array
[	O
256	int
]	O
;	O
if	O
(	O
sscanf	function
(	O
buf	pointer
,	O
"%s %s"	pointer
,	O
font	pointer
,	O
file	array
)	O
!=	O
2	int
)	O
{	O
sprintf	function
(	O
msg	array
,	O
"malformed line in font map \"%s\":\n%s"	pointer
,	O
name	pointer
,	O
buf	pointer
)	O
;	O
afm_error	function
(	O
handle	pointer
,	O
msg	array
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
strhash_get	function
(	O
handle	pointer
->	O
font_map	pointer
,	O
font	pointer
,	O
strlen	function
(	O
font	pointer
)	O
,	O
(	O
void	O
*	O
)	O
&	O
cp	pointer
)	O
)	O
continue	O
;	O
strcpy	function
(	O
fullname	array
+	O
dirlen	int
,	O
file	array
)	O
;	O
cp	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
fullname	array
)	O
+	O
1	int
)	O
;	O
if	O
(	O
cp	pointer
==	O
NULL	O
)	O
{	O
afm_error	function
(	O
handle	pointer
,	O
"couldn't add font: out of memory"	pointer
)	O
;	O
goto	O
out	O
;	O
}	O
strcpy	function
(	O
cp	pointer
,	O
fullname	array
)	O
;	O
sprintf	function
(	O
msg	array
,	O
"AFM: font mapping: %s -> %s\n"	pointer
,	O
font	pointer
,	O
cp	pointer
)	O
;	O
afm_message	function
(	O
handle	pointer
,	O
2	int
,	O
msg	array
)	O
;	O
(	O
void	O
)	O
strhash_put	function
(	O
handle	pointer
->	O
font_map	pointer
,	O
font	pointer
,	O
strlen	function
(	O
font	pointer
)	O
,	O
cp	pointer
,	O
(	O
void	O
*	O
)	O
&	O
cp2	pointer
)	O
;	O
}	O
out	O
:	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
static	O
void	O
apply_encoding	function
(	O
AFMFont	pointer
font	pointer
,	O
AFMEncodingTable	struct
*	O
enc	enum
,	O
unsigned	O
int	O
flags	int
)	O
{	O
int	O
i	int
;	O
AFMIndividualCharacterMetrics	struct
*	O
cm	pointer
;	O
AFMComposite	struct
*	O
comp	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
enc	enum
[	O
i	int
]	O
.	O
code	char
>=	O
0	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
enc	enum
[	O
i	int
]	O
.	O
character	pointer
==	O
AFM_ENC_NONE	O
)	O
font	pointer
->	O
encoding	array
[	O
enc	enum
[	O
i	int
]	O
.	O
code	char
]	O
=	O
AFM_ENC_NONE	O
;	O
else	O
if	O
(	O
enc	enum
[	O
i	int
]	O
.	O
character	pointer
==	O
AFM_ENC_NON_EXISTENT	O
)	O
font	pointer
->	O
encoding	array
[	O
enc	enum
[	O
i	int
]	O
.	O
code	char
]	O
=	O
AFM_ENC_NON_EXISTENT	O
;	O
else	O
{	O
if	O
(	O
strhash_get	function
(	O
font	pointer
->	O
private	pointer
->	O
fontnames	pointer
,	O
enc	enum
[	O
i	int
]	O
.	O
character	pointer
,	O
strlen	function
(	O
enc	enum
[	O
i	int
]	O
.	O
character	pointer
)	O
,	O
(	O
void	O
*	O
)	O
&	O
cm	pointer
)	O
)	O
font	pointer
->	O
encoding	array
[	O
enc	enum
[	O
i	int
]	O
.	O
code	char
]	O
=	O
cm	pointer
;	O
else	O
{	O
if	O
(	O
(	O
flags	int
&	O
AFM_ENCODE_ACCEPT_COMPOSITES	int
)	O
==	O
0	int
||	O
strhash_get	function
(	O
font	pointer
->	O
private	pointer
->	O
compositenames	pointer
,	O
enc	enum
[	O
i	int
]	O
.	O
character	pointer
,	O
strlen	function
(	O
enc	enum
[	O
i	int
]	O
.	O
character	pointer
)	O
,	O
(	O
void	O
*	O
)	O
&	O
comp	pointer
)	O
==	O
0	int
)	O
font	pointer
->	O
encoding	array
[	O
enc	enum
[	O
i	int
]	O
.	O
code	char
]	O
=	O
AFM_ENC_NON_EXISTENT	O
;	O
else	O
{	O
if	O
(	O
strhash_get	function
(	O
font	pointer
->	O
private	pointer
->	O
fontnames	pointer
,	O
comp	pointer
->	O
components	pointer
[	O
0	int
]	O
.	O
name	pointer
,	O
strlen	function
(	O
comp	pointer
->	O
components	pointer
[	O
0	int
]	O
.	O
name	pointer
)	O
,	O
(	O
void	O
*	O
)	O
&	O
cm	pointer
)	O
)	O
font	pointer
->	O
encoding	array
[	O
enc	enum
[	O
i	int
]	O
.	O
code	char
]	O
=	O
cm	pointer
;	O
else	O
font	pointer
->	O
encoding	array
[	O
enc	enum
[	O
i	int
]	O
.	O
code	char
]	O
=	O
AFM_ENC_NON_EXISTENT	O
;	O
}	O
}	O
}	O
}	O
}	O
