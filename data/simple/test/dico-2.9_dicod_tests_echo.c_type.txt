enum	O
echo_mode	enum
{	O
ECHO_ECHO	int
,	O
ECHO_NULL	int
}	O
;	O
struct	O
dico_handle_struct	struct
{	O
enum	O
echo_mode	enum
mode	int
;	O
char	O
*	O
prefix	pointer
;	O
size_t	long
prefix_len	long
;	O
}	O
;	O
static	O
int	O
echo_init	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
return	O
0	int
;	O
}	O
static	O
dico_handle_t	pointer
echo_init_db	function
(	O
const	O
char	O
*	O
dbname	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
null_mode	int
=	O
0	int
;	O
dico_handle_t	pointer
hp	pointer
;	O
char	O
*	O
prefix	pointer
=	O
NULL	O
;	O
struct	O
dico_option	struct
init_db_option	array
[	O
]	O
=	O
{	O
{	O
DICO_OPTSTR	O
(	O
null	O
)	O
,	O
dico_opt_bool	int
,	O
&	O
null_mode	int
}	O
,	O
{	O
DICO_OPTSTR	O
(	O
prefix	pointer
)	O
,	O
dico_opt_string	int
,	O
&	O
prefix	pointer
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
if	O
(	O
dico_parseopt	function
(	O
init_db_option	array
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
NULL	O
)	O
)	O
return	O
NULL	O
;	O
hp	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
hp	pointer
)	O
)	O
;	O
if	O
(	O
hp	pointer
)	O
{	O
hp	pointer
->	O
mode	int
=	O
null_mode	int
?	O
ECHO_NULL	int
:	O
ECHO_ECHO	int
;	O
if	O
(	O
prefix	pointer
)	O
{	O
hp	pointer
->	O
prefix	pointer
=	O
strdup	function
(	O
prefix	pointer
)	O
;	O
if	O
(	O
!	O
hp	pointer
->	O
prefix	pointer
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"not enough memory"	pointer
)	O
;	O
free	function
(	O
hp	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
hp	pointer
->	O
prefix_len	long
=	O
strlen	function
(	O
prefix	pointer
)	O
;	O
}	O
else	O
{	O
hp	pointer
->	O
prefix	pointer
=	O
NULL	O
;	O
hp	pointer
->	O
prefix_len	long
=	O
0	int
;	O
}	O
}	O
else	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"not enough memory"	pointer
)	O
;	O
return	O
hp	pointer
;	O
}	O
static	O
int	O
echo_free_db	function
(	O
dico_handle_t	pointer
hp	pointer
)	O
{	O
free	function
(	O
hp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
echo_open	function
(	O
dico_handle_t	pointer
dp	pointer
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
echo_close	function
(	O
dico_handle_t	pointer
hp	pointer
)	O
{	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
echo_info	function
(	O
dico_handle_t	pointer
ep	pointer
)	O
{	O
static	O
char	O
*	O
echo_info_str	array
[	O
2	int
]	O
=	O
{	O
"ECHO database.\n\nThis database echoes each query.\n"	pointer
,	O
"NULL database.\n\nThis database returns NULL (no result) to any match and define\nrequests.\n"	pointer
}	O
;	O
return	O
strdup	function
(	O
echo_info_str	array
[	O
ep	pointer
->	O
mode	int
]	O
)	O
;	O
}	O
static	O
char	O
*	O
echo_descr	function
(	O
dico_handle_t	pointer
ep	pointer
)	O
{	O
static	O
char	O
*	O
echo_descr_str	array
[	O
2	int
]	O
=	O
{	O
"GNU Dico ECHO database"	pointer
,	O
"GNU Dico NULL database"	pointer
}	O
;	O
char	O
*	O
res	pointer
;	O
if	O
(	O
ep	pointer
->	O
mode	int
==	O
ECHO_ECHO	int
&&	O
ep	pointer
->	O
prefix	pointer
)	O
{	O
size_t	long
len	int
=	O
strlen	function
(	O
echo_descr_str	array
[	O
ep	pointer
->	O
mode	int
]	O
)	O
+	O
ep	pointer
->	O
prefix_len	long
+	O
11	int
;	O
res	pointer
=	O
malloc	function
(	O
len	int
)	O
;	O
if	O
(	O
res	pointer
)	O
snprintf	function
(	O
res	pointer
,	O
len	int
,	O
"%s (prefix %s)"	pointer
,	O
echo_descr_str	array
[	O
ep	pointer
->	O
mode	int
]	O
,	O
ep	pointer
->	O
prefix	pointer
)	O
;	O
}	O
else	O
res	pointer
=	O
strdup	function
(	O
echo_descr_str	array
[	O
ep	pointer
->	O
mode	int
]	O
)	O
;	O
return	O
res	pointer
;	O
}	O
static	O
dico_result_t	pointer
new_result	function
(	O
dico_handle_t	pointer
ep	pointer
,	O
char	O
const	O
*	O
word	pointer
)	O
{	O
char	O
*	O
res	pointer
=	O
malloc	function
(	O
strlen	function
(	O
word	pointer
)	O
+	O
ep	pointer
->	O
prefix_len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
res	pointer
)	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"not enough memory"	pointer
)	O
;	O
else	O
{	O
if	O
(	O
ep	pointer
->	O
prefix	pointer
)	O
memcpy	function
(	O
res	pointer
,	O
ep	pointer
->	O
prefix	pointer
,	O
ep	pointer
->	O
prefix_len	long
)	O
;	O
strcpy	function
(	O
res	pointer
+	O
ep	pointer
->	O
prefix_len	long
,	O
word	pointer
)	O
;	O
}	O
return	O
(	O
dico_result_t	pointer
)	O
res	pointer
;	O
}	O
static	O
dico_result_t	pointer
echo_match	function
(	O
dico_handle_t	pointer
ep	pointer
,	O
const	O
dico_strategy_t	pointer
strat	pointer
,	O
const	O
char	O
*	O
word	pointer
)	O
{	O
if	O
(	O
ep	pointer
->	O
mode	int
==	O
ECHO_NULL	int
)	O
return	O
NULL	O
;	O
return	O
new_result	function
(	O
ep	pointer
,	O
word	pointer
)	O
;	O
}	O
static	O
dico_result_t	pointer
echo_define	function
(	O
dico_handle_t	pointer
ep	pointer
,	O
const	O
char	O
*	O
word	pointer
)	O
{	O
if	O
(	O
ep	pointer
->	O
mode	int
==	O
ECHO_NULL	int
)	O
return	O
NULL	O
;	O
return	O
new_result	function
(	O
ep	pointer
,	O
word	pointer
)	O
;	O
}	O
static	O
int	O
echo_output_result	function
(	O
dico_result_t	pointer
rp	pointer
,	O
size_t	long
n	long
,	O
dico_stream_t	pointer
str	pointer
)	O
{	O
char	O
*	O
word	pointer
=	O
(	O
char	O
*	O
)	O
rp	pointer
;	O
dico_stream_write	function
(	O
str	pointer
,	O
word	pointer
,	O
strlen	function
(	O
word	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
size_t	long
echo_result_count	function
(	O
dico_result_t	pointer
rp	pointer
)	O
{	O
return	O
1	int
;	O
}	O
static	O
size_t	long
echo_compare_count	function
(	O
dico_result_t	pointer
rp	pointer
)	O
{	O
return	O
1	int
;	O
}	O
static	O
void	O
echo_free_result	function
(	O
dico_result_t	pointer
rp	pointer
)	O
{	O
free	function
(	O
rp	pointer
)	O
;	O
}	O
static	O
char	O
*	O
echo_mime_header	function
(	O
dico_handle_t	pointer
ep	pointer
)	O
{	O
return	O
strdup	function
(	O
"Content-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: 8bit\n"	pointer
)	O
;	O
}	O
struct	O
dico_database_module	struct
DICO_EXPORT	O
(	O
echo	O
,	O
module	O
)	O
=	O
{	O
.	O
dico_version	int
=	O
DICO_MODULE_VERSION	int
,	O
.	O
dico_capabilities	int
=	O
DICO_CAPA_NONE	int
,	O
.	O
dico_init	pointer
=	O
echo_init	function
,	O
.	O
dico_init_db	pointer
=	O
echo_init_db	function
,	O
.	O
dico_free_db	pointer
=	O
echo_free_db	function
,	O
.	O
dico_open	pointer
=	O
echo_open	function
,	O
.	O
dico_close	pointer
=	O
echo_close	function
,	O
.	O
dico_db_info	pointer
=	O
echo_info	function
,	O
.	O
dico_db_descr	pointer
=	O
echo_descr	function
,	O
.	O
dico_match	pointer
=	O
echo_match	function
,	O
.	O
dico_define	pointer
=	O
echo_define	function
,	O
.	O
dico_output_result	pointer
=	O
echo_output_result	function
,	O
.	O
dico_result_count	pointer
=	O
echo_result_count	function
,	O
.	O
dico_compare_count	pointer
=	O
echo_compare_count	function
,	O
.	O
dico_free_result	pointer
=	O
echo_free_result	function
,	O
.	O
dico_db_mime_header	pointer
=	O
echo_mime_header	function
}	O
;	O
