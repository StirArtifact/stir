struct	O
user_chain	struct
{	O
struct	O
user_chain	struct
*	O
next	pointer
;	O
char	O
*	O
name	pointer
;	O
}	O
;	O
typedef	O
struct	O
wtmp_chain	struct
WTMP	struct
;	O
struct	O
wtmp_chain	struct
{	O
WTMP	struct
*	O
next	pointer
;	O
WTMP	struct
*	O
prev	pointer
;	O
struct	O
radutmp	struct
ut	pointer
;	O
}	O
;	O
int	O
read_naslist	function
(	O
)	O
;	O
void	O
radwtmp	function
(	O
)	O
;	O
void	O
adduser	function
(	O
char	O
*	O
)	O
;	O
int	O
want	function
(	O
struct	O
radutmp	struct
*	O
)	O
;	O
void	O
add_logout	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
;	O
void	O
add_nas_restart	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
;	O
WTMP	struct
*	O
find_login	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
;	O
WTMP	struct
*	O
find_logout	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
;	O
WTMP	struct
*	O
find_restart	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
;	O
void	O
print_entry	function
(	O
WTMP	struct
*	O
pp	pointer
,	O
struct	O
radutmp	struct
*	O
bp	pointer
,	O
int	O
mark	int
)	O
;	O
void	O
print_reboot_entry	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
;	O
void	O
print_acct_toggle	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
;	O
void	O
delete_logout	function
(	O
WTMP	struct
*	O
pp	pointer
,	O
struct	O
radutmp	struct
*	O
utp	pointer
)	O
;	O
WTMP	struct
*	O
add_wtmp_entry	function
(	O
WTMP	struct
*	O
*	O
first	pointer
,	O
WTMP	struct
*	O
pp	pointer
)	O
;	O
WTMP	struct
*	O
delete_wtmp_entry	function
(	O
WTMP	struct
*	O
*	O
first	pointer
,	O
WTMP	struct
*	O
pp	pointer
)	O
;	O
WTMP	struct
*	O
find_wtmp_nas	function
(	O
WTMP	struct
*	O
first	pointer
,	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
;	O
WTMP	struct
*	O
find_wtmp_nas_port	function
(	O
WTMP	struct
*	O
first	pointer
,	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
;	O
WTMP	struct
*	O
find_wtmp_nas_port_sid	function
(	O
WTMP	struct
*	O
first	pointer
,	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
;	O
grad_uint32_t	int
host_ip	int
=	O
0	int
;	O
grad_netdef_t	struct
nas_ip	struct
=	O
{	O
0	int
,	O
0	int
}	O
;	O
int	O
port	array
=	O
0	int
;	O
int	O
width	int
=	O
5	int
;	O
int	O
show_seconds	int
=	O
0	int
;	O
int	O
mark_missing_stops	int
=	O
0	int
;	O
int	O
long_fmt	int
=	O
0	int
;	O
int	O
namesize	int
=	O
10	int
;	O
int	O
nas_name_len	int
=	O
8	int
;	O
int	O
maxrec	int
=	O
-	O
1	int
;	O
char	O
*	O
file	pointer
=	O
RADLOG_DIR	O
"/"	pointer
RADWTMP	pointer
;	O
struct	O
radutmp	struct
buf	pointer
[	O
1024	int
]	O
;	O
char	O
*	O
nas_name	pointer
=	O
NULL	O
;	O
struct	O
user_chain	struct
*	O
user_chain	struct
,	O
*	O
user_last	pointer
;	O
int	O
show_reboot_rec	int
;	O
int	O
show_shutdown_rec	int
;	O
WTMP	struct
*	O
logout_list	pointer
;	O
WTMP	struct
*	O
login_list	pointer
;	O
WTMP	struct
*	O
nas_updown_list	pointer
;	O
const	O
char	O
*	O
argp_program_version	pointer
=	O
"radlast ("	pointer
PACKAGE	pointer
") "	pointer
VERSION	pointer
;	O
static	O
char	O
doc	pointer
[	O
]	O
=	O
N_	O
(	O
"report last logins from Radius database."	pointer
)	O
;	O
static	O
struct	O
argp_option	struct
options	pointer
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"radlast specific switches:"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
'0'	O
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
'1'	O
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
'2'	O
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
'3'	O
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
'4'	O
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
'5'	O
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
'6'	O
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
'7'	O
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
'8'	O
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
'9'	O
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"count"	pointer
,	O
'c'	O
,	O
N_	O
(	O
"NUMBER"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"show at most NUMBER records"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"file"	pointer
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"use FILE as radwtmp"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"host"	pointer
,	O
'h'	O
,	O
N_	O
(	O
"IPADDR"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"show logins with IPADDR"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"missed-stops"	pointer
,	O
'm'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"mark records with missed stops with bump (!)"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"nas"	pointer
,	O
'n'	O
,	O
N_	O
(	O
"NASNAME"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"show logins from given NAS"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"long-format"	pointer
,	O
'l'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"use long output format"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"port"	pointer
,	O
'p'	O
,	O
N_	O
(	O
"NUMBER"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"show logins from given port"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"show-seconds"	pointer
,	O
's'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"show the login session duration in seconds"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"wide"	pointer
,	O
'w'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"widen the duration field to show seconds"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
if	O
(	O
maxrec	int
==	O
-	O
1	int
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
i	int
;	O
if	O
(	O
state	pointer
->	O
argv	pointer
[	O
state	pointer
->	O
next	pointer
-	O
1	int
]	O
[	O
1	int
]	O
==	O
key	int
)	O
i	int
=	O
state	pointer
->	O
next	pointer
-	O
1	int
;	O
else	O
i	int
=	O
state	pointer
->	O
next	pointer
;	O
maxrec	int
=	O
strtoul	function
(	O
state	pointer
->	O
argv	pointer
[	O
i	int
]	O
+	O
1	int
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
maxrec	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"invalid number (near %s)"	pointer
,	O
p	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
break	O
;	O
case	O
'c'	O
:	O
maxrec	int
=	O
atol	function
(	O
arg	pointer
)	O
;	O
if	O
(	O
!	O
maxrec	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"invalid number of records"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'f'	O
:	O
file	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'h'	O
:	O
host_ip	int
=	O
htonl	function
(	O
grad_ip_gethostaddr	function
(	O
arg	pointer
)	O
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
mark_missing_stops	int
++	O
;	O
break	O
;	O
case	O
'n'	O
:	O
nas_name	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'l'	O
:	O
long_fmt	int
++	O
;	O
break	O
;	O
case	O
'p'	O
:	O
if	O
(	O
*	O
arg	pointer
==	O
's'	O
||	O
*	O
arg	pointer
==	O
'S'	O
)	O
++	O
arg	pointer
;	O
port	array
=	O
atoi	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
show_seconds	int
++	O
;	O
break	O
;	O
case	O
't'	O
:	O
if	O
(	O
*	O
arg	pointer
==	O
's'	O
||	O
*	O
arg	pointer
==	O
'S'	O
)	O
++	O
arg	pointer
;	O
port	array
=	O
atoi	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'w'	O
:	O
width	int
=	O
8	int
;	O
break	O
;	O
case	O
ARGP_KEY_FINI	int
:	O
if	O
(	O
show_seconds	int
&&	O
width	int
==	O
8	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"--width is incompatible with --show-seconds"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
options	pointer
,	O
parse_opt	function
,	O
NULL	O
,	O
doc	pointer
,	O
grad_common_argp_child	array
,	O
NULL	O
,	O
NULL	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
index	function
;	O
grad_app_setup	function
(	O
)	O
;	O
if	O
(	O
grad_argp_parse	function
(	O
&	O
argp	struct
,	O
&	O
argc	int
,	O
&	O
argv	pointer
,	O
0	int
,	O
&	O
index	function
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
argv	pointer
+=	O
index	function
;	O
argc	int
-=	O
index	function
;	O
if	O
(	O
argc	int
)	O
{	O
setlinebuf	function
(	O
stdout	pointer
)	O
;	O
for	O
(	O
;	O
*	O
argv	pointer
;	O
++	O
argv	pointer
)	O
adduser	function
(	O
*	O
argv	pointer
)	O
;	O
}	O
grad_dict_init	function
(	O
)	O
;	O
read_naslist	function
(	O
)	O
;	O
if	O
(	O
nas_name	pointer
)	O
{	O
grad_nas_t	struct
*	O
nas	pointer
=	O
grad_nas_lookup_name	function
(	O
nas_name	pointer
)	O
;	O
if	O
(	O
!	O
nas	pointer
)	O
{	O
if	O
(	O
grad_ip_getnetaddr	function
(	O
nas_name	pointer
,	O
&	O
nas_ip	struct
)	O
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"unknown nas: %s"	pointer
,	O
nas_name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
}	O
radwtmp	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
read_naslist	function
(	O
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
path	pointer
=	O
grad_mkfilename	function
(	O
grad_config_dir	pointer
,	O
RADIUS_NASLIST	pointer
)	O
;	O
rc	int
=	O
grad_nas_read_file	function
(	O
path	pointer
)	O
;	O
grad_free	function
(	O
path	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
volatile	O
int	O
stop	int
;	O
RETSIGTYPE	void
sig_int	function
(	O
int	O
sig	int
)	O
{	O
stop	int
=	O
1	int
;	O
}	O
void	O
radwtmp	function
(	O
)	O
{	O
int	O
wfd	int
;	O
struct	O
stat	struct
stb	struct
;	O
int	O
bl	int
;	O
struct	O
radutmp	struct
*	O
bp	pointer
;	O
int	O
bytes	int
;	O
struct	O
tm	struct
*	O
tm	struct
;	O
char	O
ct	array
[	O
256	int
]	O
;	O
WTMP	struct
*	O
pp	pointer
;	O
int	O
acct_enabled	int
=	O
0	int
;	O
if	O
(	O
(	O
wfd	int
=	O
open	function
(	O
file	pointer
,	O
O_RDONLY	int
,	O
0	int
)	O
)	O
<	O
0	int
||	O
fstat	function
(	O
wfd	int
,	O
&	O
stb	struct
)	O
==	O
-	O
1	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't open file %s"	pointer
)	O
,	O
file	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
bl	int
=	O
(	O
stb	struct
.	O
st_size	long
+	O
sizeof	O
(	O
buf	pointer
)	O
-	O
1	int
)	O
/	O
sizeof	O
(	O
buf	pointer
)	O
;	O
grad_set_signal	function
(	O
SIGINT	int
,	O
sig_int	function
)	O
;	O
stop	int
=	O
0	int
;	O
while	O
(	O
!	O
stop	int
&&	O
--	O
bl	int
>=	O
0	int
)	O
{	O
if	O
(	O
lseek	function
(	O
wfd	int
,	O
(	O
off_t	long
)	O
(	O
bl	int
*	O
sizeof	O
(	O
buf	pointer
)	O
)	O
,	O
SEEK_SET	int
)	O
==	O
-	O
1	int
||	O
(	O
bytes	int
=	O
read	pointer
(	O
wfd	int
,	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
)	O
)	O
==	O
-	O
1	int
)	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"%s"	pointer
,	O
file	pointer
)	O
;	O
for	O
(	O
bp	pointer
=	O
&	O
buf	pointer
[	O
bytes	int
/	O
sizeof	O
(	O
buf	pointer
[	O
0	int
]	O
)	O
-	O
1	int
]	O
;	O
!	O
stop	int
&&	O
bp	pointer
>=	O
buf	pointer
;	O
--	O
bp	pointer
)	O
{	O
switch	O
(	O
bp	pointer
->	O
type	enum
)	O
{	O
case	O
P_LOGIN	int
:	O
if	O
(	O
pp	pointer
=	O
find_logout	function
(	O
bp	pointer
)	O
)	O
{	O
if	O
(	O
want	function
(	O
bp	pointer
)	O
)	O
{	O
print_entry	function
(	O
pp	pointer
,	O
bp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
maxrec	int
!=	O
-	O
1	int
&&	O
!	O
--	O
maxrec	int
)	O
return	O
;	O
}	O
delete_logout	function
(	O
pp	pointer
,	O
bp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
pp	pointer
=	O
find_restart	function
(	O
bp	pointer
)	O
)	O
{	O
if	O
(	O
want	function
(	O
bp	pointer
)	O
)	O
{	O
print_entry	function
(	O
pp	pointer
,	O
bp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
maxrec	int
!=	O
-	O
1	int
&&	O
!	O
--	O
maxrec	int
)	O
return	O
;	O
}	O
}	O
else	O
if	O
(	O
pp	pointer
=	O
find_login	function
(	O
bp	pointer
)	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
pp	pointer
->	O
ut	pointer
.	O
session_id	array
,	O
bp	pointer
->	O
session_id	array
,	O
RUT_IDSIZE	int
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
want	function
(	O
bp	pointer
)	O
)	O
{	O
print_entry	function
(	O
pp	pointer
,	O
bp	pointer
,	O
mark_missing_stops	int
)	O
;	O
if	O
(	O
maxrec	int
!=	O
-	O
1	int
&&	O
!	O
--	O
maxrec	int
)	O
return	O
;	O
}	O
pp	pointer
->	O
ut	pointer
=	O
*	O
bp	pointer
;	O
}	O
else	O
{	O
if	O
(	O
want	function
(	O
bp	pointer
)	O
)	O
{	O
print_entry	function
(	O
NULL	O
,	O
bp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
maxrec	int
!=	O
-	O
1	int
&&	O
!	O
--	O
maxrec	int
)	O
return	O
;	O
}	O
}	O
break	O
;	O
case	O
P_IDLE	int
:	O
add_logout	function
(	O
bp	pointer
)	O
;	O
break	O
;	O
case	O
P_NAS_SHUTDOWN	int
:	O
case	O
P_NAS_START	int
:	O
add_nas_restart	function
(	O
bp	pointer
)	O
;	O
if	O
(	O
want	function
(	O
bp	pointer
)	O
)	O
{	O
print_reboot_entry	function
(	O
bp	pointer
)	O
;	O
if	O
(	O
maxrec	int
!=	O
-	O
1	int
&&	O
!	O
--	O
maxrec	int
)	O
return	O
;	O
}	O
break	O
;	O
case	O
P_ACCT_DISABLED	int
:	O
if	O
(	O
!	O
acct_enabled	int
)	O
{	O
printf	function
(	O
_	O
(	O
"System accounting is disabled\n"	pointer
)	O
)	O
;	O
stop	int
=	O
1	int
;	O
}	O
else	O
print_acct_toggle	function
(	O
bp	pointer
)	O
;	O
break	O
;	O
case	O
P_ACCT_ENABLED	int
:	O
acct_enabled	int
=	O
1	int
;	O
print_acct_toggle	function
(	O
bp	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
tm	struct
=	O
localtime	function
(	O
&	O
buf	pointer
[	O
0	int
]	O
.	O
time	struct
)	O
;	O
strftime	function
(	O
ct	array
,	O
sizeof	O
(	O
ct	array
)	O
,	O
"%c"	pointer
,	O
tm	struct
)	O
;	O
printf	function
(	O
_	O
(	O
"\nradwtmp begins %s\n"	pointer
)	O
,	O
ct	array
)	O
;	O
}	O
int	O
want	function
(	O
struct	O
radutmp	struct
*	O
ut	pointer
)	O
{	O
if	O
(	O
ut	pointer
->	O
type	enum
==	O
P_NAS_START	int
)	O
{	O
if	O
(	O
show_reboot_rec	int
)	O
return	O
grad_ip_in_net_p	function
(	O
&	O
nas_ip	struct
,	O
ntohl	function
(	O
ut	pointer
->	O
nas_address	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
ut	pointer
->	O
type	enum
==	O
P_NAS_SHUTDOWN	int
)	O
{	O
if	O
(	O
show_shutdown_rec	int
)	O
return	O
grad_ip_in_net_p	function
(	O
&	O
nas_ip	struct
,	O
ntohl	function
(	O
ut	pointer
->	O
nas_address	int
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
user_chain	struct
)	O
{	O
struct	O
user_chain	struct
*	O
cp	pointer
;	O
for	O
(	O
cp	pointer
=	O
user_chain	struct
;	O
cp	pointer
;	O
cp	pointer
=	O
cp	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
cp	pointer
->	O
name	pointer
,	O
ut	pointer
->	O
login	array
)	O
==	O
0	int
)	O
{	O
if	O
(	O
host_ip	int
!=	O
0	int
)	O
return	O
ut	pointer
->	O
framed_address	int
==	O
host_ip	int
;	O
if	O
(	O
nas_ip	struct
.	O
ipaddr	int
!=	O
0	int
)	O
return	O
grad_ip_in_net_p	function
(	O
&	O
nas_ip	struct
,	O
ntohl	function
(	O
ut	pointer
->	O
nas_address	int
)	O
)	O
;	O
if	O
(	O
port	array
!=	O
0	int
)	O
return	O
ut	pointer
->	O
nas_port	int
==	O
port	array
;	O
return	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
show_reboot_rec	int
||	O
show_shutdown_rec	int
)	O
return	O
0	int
;	O
if	O
(	O
host_ip	int
!=	O
0	int
&&	O
ut	pointer
->	O
framed_address	int
==	O
host_ip	int
)	O
return	O
1	int
;	O
if	O
(	O
nas_ip	struct
.	O
ipaddr	int
!=	O
0	int
&&	O
grad_ip_in_net_p	function
(	O
&	O
nas_ip	struct
,	O
ntohl	function
(	O
ut	pointer
->	O
nas_address	int
)	O
)	O
)	O
return	O
1	int
;	O
if	O
(	O
port	array
!=	O
0	int
&&	O
ut	pointer
->	O
nas_port	int
==	O
port	array
)	O
return	O
1	int
;	O
}	O
return	O
host_ip	int
==	O
0	int
&&	O
nas_ip	struct
.	O
ipaddr	int
==	O
0	int
&&	O
user_chain	struct
==	O
0	int
&&	O
port	array
==	O
0	int
;	O
}	O
void	O
adduser	function
(	O
char	O
*	O
s	pointer
)	O
{	O
struct	O
user_chain	struct
*	O
uc	pointer
;	O
if	O
(	O
*	O
s	pointer
==	O
'~'	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
s	pointer
+	O
1	int
,	O
"reboot"	pointer
)	O
==	O
0	int
)	O
show_reboot_rec	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
s	pointer
+	O
1	int
,	O
"shutdown"	pointer
)	O
==	O
0	int
)	O
show_shutdown_rec	int
=	O
1	int
;	O
}	O
uc	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
uc	pointer
)	O
)	O
;	O
uc	pointer
->	O
next	pointer
=	O
NULL	O
;	O
if	O
(	O
user_last	pointer
)	O
user_last	pointer
->	O
next	pointer
=	O
uc	pointer
;	O
else	O
user_chain	struct
=	O
uc	pointer
;	O
uc	pointer
->	O
name	pointer
=	O
grad_estrdup	function
(	O
s	pointer
)	O
;	O
user_last	pointer
=	O
uc	pointer
;	O
}	O
WTMP	struct
*	O
add_wtmp_entry	function
(	O
WTMP	struct
*	O
*	O
first	pointer
,	O
WTMP	struct
*	O
pp	pointer
)	O
{	O
assert	O
(	O
*	O
first	pointer
!=	O
pp	pointer
)	O
;	O
pp	pointer
->	O
prev	pointer
=	O
NULL	O
;	O
pp	pointer
->	O
next	pointer
=	O
*	O
first	pointer
;	O
if	O
(	O
*	O
first	pointer
)	O
(	O
*	O
first	pointer
)	O
->	O
prev	pointer
=	O
pp	pointer
;	O
*	O
first	pointer
=	O
pp	pointer
;	O
return	O
pp	pointer
;	O
}	O
WTMP	struct
*	O
delete_wtmp_entry	function
(	O
WTMP	struct
*	O
*	O
first	pointer
,	O
WTMP	struct
*	O
pp	pointer
)	O
{	O
WTMP	struct
*	O
p	pointer
;	O
if	O
(	O
pp	pointer
==	O
*	O
first	pointer
)	O
*	O
first	pointer
=	O
(	O
*	O
first	pointer
)	O
->	O
next	pointer
;	O
if	O
(	O
p	pointer
=	O
pp	pointer
->	O
prev	pointer
)	O
p	pointer
->	O
next	pointer
=	O
pp	pointer
->	O
next	pointer
;	O
if	O
(	O
p	pointer
=	O
pp	pointer
->	O
next	pointer
)	O
p	pointer
->	O
prev	pointer
=	O
pp	pointer
->	O
prev	pointer
;	O
return	O
pp	pointer
;	O
}	O
WTMP	struct
*	O
find_wtmp_nas	function
(	O
WTMP	struct
*	O
first	pointer
,	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
{	O
WTMP	struct
*	O
wp	pointer
;	O
for	O
(	O
wp	pointer
=	O
first	pointer
;	O
wp	pointer
;	O
wp	pointer
=	O
wp	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
wp	pointer
->	O
ut	pointer
.	O
nas_address	int
==	O
bp	pointer
->	O
nas_address	int
)	O
break	O
;	O
}	O
return	O
wp	pointer
;	O
}	O
WTMP	struct
*	O
find_wtmp_nas_port	function
(	O
WTMP	struct
*	O
first	pointer
,	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
{	O
WTMP	struct
*	O
wp	pointer
;	O
for	O
(	O
wp	pointer
=	O
first	pointer
;	O
wp	pointer
;	O
wp	pointer
=	O
wp	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
wp	pointer
->	O
ut	pointer
.	O
nas_address	int
==	O
bp	pointer
->	O
nas_address	int
&&	O
wp	pointer
->	O
ut	pointer
.	O
nas_port	int
==	O
bp	pointer
->	O
nas_port	int
)	O
break	O
;	O
}	O
return	O
wp	pointer
;	O
}	O
WTMP	struct
*	O
find_wtmp_nas_port_sid	function
(	O
WTMP	struct
*	O
first	pointer
,	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
{	O
WTMP	struct
*	O
wp	pointer
;	O
for	O
(	O
wp	pointer
=	O
first	pointer
;	O
wp	pointer
;	O
wp	pointer
=	O
wp	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
wp	pointer
->	O
ut	pointer
.	O
nas_address	int
==	O
bp	pointer
->	O
nas_address	int
&&	O
wp	pointer
->	O
ut	pointer
.	O
nas_port	int
==	O
bp	pointer
->	O
nas_port	int
&&	O
strncmp	function
(	O
wp	pointer
->	O
ut	pointer
.	O
session_id	array
,	O
bp	pointer
->	O
session_id	array
,	O
RUT_IDSIZE	int
)	O
==	O
0	int
)	O
break	O
;	O
}	O
return	O
wp	pointer
;	O
}	O
void	O
add_logout	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
{	O
WTMP	struct
*	O
wp	pointer
;	O
wp	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
wp	pointer
)	O
)	O
;	O
wp	pointer
->	O
ut	pointer
=	O
*	O
bp	pointer
;	O
add_wtmp_entry	function
(	O
&	O
logout_list	pointer
,	O
wp	pointer
)	O
;	O
if	O
(	O
wp	pointer
=	O
find_wtmp_nas_port	function
(	O
login_list	pointer
,	O
bp	pointer
)	O
)	O
{	O
delete_wtmp_entry	function
(	O
&	O
login_list	pointer
,	O
wp	pointer
)	O
;	O
grad_free	function
(	O
wp	pointer
)	O
;	O
}	O
}	O
void	O
add_nas_restart	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
{	O
WTMP	struct
*	O
wp	pointer
;	O
if	O
(	O
wp	pointer
=	O
find_wtmp_nas	function
(	O
nas_updown_list	pointer
,	O
bp	pointer
)	O
)	O
{	O
delete_wtmp_entry	function
(	O
&	O
nas_updown_list	pointer
,	O
wp	pointer
)	O
;	O
grad_free	function
(	O
wp	pointer
)	O
;	O
}	O
wp	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
wp	pointer
)	O
)	O
;	O
wp	pointer
->	O
ut	pointer
=	O
*	O
bp	pointer
;	O
add_wtmp_entry	function
(	O
&	O
nas_updown_list	pointer
,	O
wp	pointer
)	O
;	O
}	O
WTMP	struct
*	O
find_login	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
{	O
return	O
find_wtmp_nas_port	function
(	O
login_list	pointer
,	O
bp	pointer
)	O
;	O
}	O
WTMP	struct
*	O
find_logout_sid	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
{	O
return	O
find_wtmp_nas_port_sid	function
(	O
logout_list	pointer
,	O
bp	pointer
)	O
;	O
}	O
WTMP	struct
*	O
find_logout	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
{	O
return	O
find_wtmp_nas_port	function
(	O
logout_list	pointer
,	O
bp	pointer
)	O
;	O
}	O
WTMP	struct
*	O
find_restart	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
{	O
return	O
find_wtmp_nas	function
(	O
nas_updown_list	pointer
,	O
bp	pointer
)	O
;	O
}	O
void	O
delete_logout	function
(	O
WTMP	struct
*	O
pp	pointer
,	O
struct	O
radutmp	struct
*	O
utp	pointer
)	O
{	O
static	O
int	O
count	int
;	O
delete_wtmp_entry	function
(	O
&	O
logout_list	pointer
,	O
pp	pointer
)	O
;	O
pp	pointer
->	O
ut	pointer
=	O
*	O
utp	pointer
;	O
count	int
++	O
;	O
add_wtmp_entry	function
(	O
&	O
login_list	pointer
,	O
pp	pointer
)	O
;	O
}	O
char	O
*	O
proto_str	function
(	O
int	O
id	char
)	O
{	O
grad_dict_value_t	struct
*	O
dval	pointer
=	O
grad_value_lookup	function
(	O
id	char
,	O
"Framed-Protocol"	pointer
)	O
;	O
static	O
char	O
buf	pointer
[	O
64	int
]	O
;	O
if	O
(	O
!	O
dval	pointer
)	O
{	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
"%u"	pointer
,	O
id	char
)	O
;	O
return	O
buf	pointer
;	O
}	O
return	O
dval	pointer
->	O
name	pointer
;	O
}	O
char	O
*	O
port_type_str	function
(	O
int	O
porttype	int
)	O
{	O
grad_dict_value_t	struct
*	O
dval	pointer
=	O
grad_value_lookup	function
(	O
porttype	int
,	O
"NAS-Port-Type"	pointer
)	O
;	O
static	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
char	O
*	O
s	pointer
;	O
if	O
(	O
dval	pointer
)	O
s	pointer
=	O
dval	pointer
->	O
name	pointer
;	O
else	O
{	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"%u"	pointer
,	O
porttype	int
)	O
;	O
s	pointer
=	O
buf	pointer
;	O
}	O
return	O
s	pointer
;	O
}	O
void	O
print_entry	function
(	O
WTMP	struct
*	O
pp	pointer
,	O
struct	O
radutmp	struct
*	O
bp	pointer
,	O
int	O
mark	int
)	O
{	O
struct	O
tm	struct
*	O
tm	struct
;	O
char	O
ct	array
[	O
256	int
]	O
;	O
char	O
ip_str	array
[	O
IP_ADDR_LEN	int
+	O
1	int
]	O
;	O
time_t	long
delta	long
;	O
grad_uint32_t	int
ipaddr	int
;	O
char	O
buf	pointer
[	O
GRAD_MAX_LONGNAME	int
]	O
;	O
tm	struct
=	O
localtime	function
(	O
&	O
bp	pointer
->	O
time	struct
)	O
;	O
strftime	function
(	O
ct	array
,	O
sizeof	O
(	O
ct	array
)	O
,	O
"%a %b %d %H:%M"	pointer
,	O
tm	struct
)	O
;	O
ipaddr	int
=	O
bp	pointer
->	O
framed_address	int
;	O
if	O
(	O
ipaddr	int
==	O
0	int
&&	O
pp	pointer
)	O
ipaddr	int
=	O
pp	pointer
->	O
ut	pointer
.	O
framed_address	int
;	O
grad_ip_iptostr	function
(	O
ntohl	function
(	O
ipaddr	int
)	O
,	O
ip_str	array
)	O
;	O
if	O
(	O
long_fmt	int
)	O
{	O
printf	function
(	O
"%-*.*s %-*.*s %3.3d %-4.4s %2s %-*.*s %-*.*s %-*.*s %16.16s "	pointer
,	O
namesize	int
,	O
namesize	int
,	O
bp	pointer
->	O
login	array
,	O
nas_name_len	int
,	O
nas_name_len	int
,	O
grad_nas_ip_to_name	function
(	O
ntohl	function
(	O
bp	pointer
->	O
nas_address	int
)	O
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
)	O
,	O
bp	pointer
->	O
nas_port	int
,	O
proto_str	function
(	O
bp	pointer
->	O
proto	int
)	O
,	O
port_type_str	function
(	O
bp	pointer
->	O
porttype	int
)	O
,	O
RUT_IDSIZE	int
,	O
RUT_IDSIZE	int
,	O
bp	pointer
->	O
session_id	array
,	O
RUT_PNSIZE	int
,	O
RUT_PNSIZE	int
,	O
bp	pointer
->	O
caller_id	array
[	O
0	int
]	O
==	O
0	int
?	O
"?"	pointer
:	O
bp	pointer
->	O
caller_id	array
,	O
IP_ADDR_LEN	int
,	O
IP_ADDR_LEN	int
,	O
ip_str	array
,	O
ct	array
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
"%-*.*s %-*.*s %3.3d %-*.*s %16.16s "	pointer
,	O
namesize	int
,	O
namesize	int
,	O
bp	pointer
->	O
login	array
,	O
nas_name_len	int
,	O
nas_name_len	int
,	O
grad_nas_ip_to_name	function
(	O
ntohl	function
(	O
bp	pointer
->	O
nas_address	int
)	O
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
)	O
,	O
bp	pointer
->	O
nas_port	int
,	O
IP_ADDR_LEN	int
,	O
IP_ADDR_LEN	int
,	O
ip_str	array
,	O
ct	array
)	O
;	O
}	O
if	O
(	O
pp	pointer
==	O
NULL	O
)	O
{	O
printf	function
(	O
_	O
(	O
"still logged in"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
tm	struct
=	O
localtime	function
(	O
&	O
pp	pointer
->	O
ut	pointer
.	O
time	struct
)	O
;	O
strftime	function
(	O
ct	array
,	O
sizeof	O
(	O
ct	array
)	O
,	O
"%H:%M"	pointer
,	O
tm	struct
)	O
;	O
printf	function
(	O
"- %5.5s"	pointer
,	O
ct	array
)	O
;	O
delta	long
=	O
pp	pointer
->	O
ut	pointer
.	O
time	struct
-	O
bp	pointer
->	O
time	struct
;	O
if	O
(	O
show_seconds	int
)	O
{	O
printf	function
(	O
"  (%8lu)"	pointer
,	O
delta	long
)	O
;	O
}	O
else	O
{	O
if	O
(	O
delta	long
<	O
0	int
)	O
delta	long
=	O
0	int
;	O
tm	struct
=	O
gmtime	function
(	O
&	O
delta	long
)	O
;	O
strftime	function
(	O
ct	array
,	O
sizeof	O
(	O
ct	array
)	O
,	O
"%H:%M:%S"	pointer
,	O
tm	struct
)	O
;	O
if	O
(	O
delta	long
<	O
86400	int
)	O
printf	function
(	O
"  (%*.*s)"	pointer
,	O
width	int
,	O
width	int
,	O
ct	array
)	O
;	O
else	O
printf	function
(	O
" (%ld+%*.*s)"	pointer
,	O
delta	long
/	O
86400	int
,	O
width	int
,	O
width	int
,	O
ct	array
)	O
;	O
}	O
}	O
if	O
(	O
mark	int
)	O
printf	function
(	O
" !"	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
void	O
print_reboot_entry	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
struct	O
tm	struct
*	O
tm	struct
;	O
char	O
ct	array
[	O
256	int
]	O
;	O
char	O
buf	pointer
[	O
GRAD_MAX_LONGNAME	int
]	O
;	O
tm	struct
=	O
localtime	function
(	O
&	O
bp	pointer
->	O
time	struct
)	O
;	O
strftime	function
(	O
ct	array
,	O
sizeof	O
(	O
ct	array
)	O
,	O
"%a %b %d %H:%M"	pointer
,	O
tm	struct
)	O
;	O
if	O
(	O
bp	pointer
->	O
type	enum
==	O
P_NAS_SHUTDOWN	int
)	O
s	pointer
=	O
_	O
(	O
"shutdown"	pointer
)	O
;	O
else	O
s	pointer
=	O
_	O
(	O
"reboot"	pointer
)	O
;	O
printf	function
(	O
"%-*.*s %s      ~                   %16.16s\n"	pointer
,	O
namesize	int
,	O
namesize	int
,	O
s	pointer
,	O
grad_nas_ip_to_name	function
(	O
ntohl	function
(	O
bp	pointer
->	O
nas_address	int
)	O
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
)	O
,	O
ct	array
)	O
;	O
}	O
void	O
print_acct_toggle	function
(	O
struct	O
radutmp	struct
*	O
bp	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
struct	O
tm	struct
*	O
tm	struct
;	O
char	O
ct	array
[	O
256	int
]	O
;	O
char	O
buf	pointer
[	O
GRAD_MAX_LONGNAME	int
]	O
;	O
tm	struct
=	O
localtime	function
(	O
&	O
bp	pointer
->	O
time	struct
)	O
;	O
strftime	function
(	O
ct	array
,	O
sizeof	O
(	O
ct	array
)	O
,	O
"%a %b %d %H:%M"	pointer
,	O
tm	struct
)	O
;	O
if	O
(	O
bp	pointer
->	O
type	enum
==	O
P_ACCT_DISABLED	int
)	O
s	pointer
=	O
_	O
(	O
"acct_off"	pointer
)	O
;	O
else	O
s	pointer
=	O
_	O
(	O
"acct_on"	pointer
)	O
;	O
printf	function
(	O
"%-*.*s %s      ~                   %16.16s\n"	pointer
,	O
namesize	int
,	O
namesize	int
,	O
s	pointer
,	O
grad_nas_ip_to_name	function
(	O
ntohl	function
(	O
bp	pointer
->	O
nas_address	int
)	O
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
)	O
,	O
ct	array
)	O
;	O
}	O
