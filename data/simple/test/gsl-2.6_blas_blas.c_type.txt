int	O
gsl_blas_sdsdot	function
(	O
float	O
alpha	float
,	O
const	O
gsl_vector_float	struct
*	O
X	pointer
,	O
const	O
gsl_vector_float	struct
*	O
Y	pointer
,	O
float	O
*	O
result	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
*	O
result	pointer
=	O
cblas_sdsdot	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_dsdot	function
(	O
const	O
gsl_vector_float	struct
*	O
X	pointer
,	O
const	O
gsl_vector_float	struct
*	O
Y	pointer
,	O
double	O
*	O
result	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
*	O
result	pointer
=	O
cblas_dsdot	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_sdot	function
(	O
const	O
gsl_vector_float	struct
*	O
X	pointer
,	O
const	O
gsl_vector_float	struct
*	O
Y	pointer
,	O
float	O
*	O
result	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
*	O
result	pointer
=	O
cblas_sdot	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_ddot	function
(	O
const	O
gsl_vector	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
Y	pointer
,	O
double	O
*	O
result	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
*	O
result	pointer
=	O
cblas_ddot	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_cdotu	function
(	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
,	O
const	O
gsl_vector_complex_float	struct
*	O
Y	pointer
,	O
gsl_complex_float	struct
*	O
dotu	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_cdotu_sub	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
dotu	pointer
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_cdotc	function
(	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
,	O
const	O
gsl_vector_complex_float	struct
*	O
Y	pointer
,	O
gsl_complex_float	struct
*	O
dotc	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_cdotc_sub	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
dotc	pointer
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_zdotu	function
(	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
,	O
const	O
gsl_vector_complex	struct
*	O
Y	pointer
,	O
gsl_complex	struct
*	O
dotu	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_zdotu_sub	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
dotu	pointer
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_zdotc	function
(	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
,	O
const	O
gsl_vector_complex	struct
*	O
Y	pointer
,	O
gsl_complex	struct
*	O
dotc	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_zdotc_sub	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
dotc	pointer
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
float	O
gsl_blas_snrm2	function
(	O
const	O
gsl_vector_float	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_snrm2	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
double	O
gsl_blas_dnrm2	function
(	O
const	O
gsl_vector	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_dnrm2	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
float	O
gsl_blas_scnrm2	function
(	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_scnrm2	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
double	O
gsl_blas_dznrm2	function
(	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_dznrm2	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
float	O
gsl_blas_sasum	function
(	O
const	O
gsl_vector_float	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_sasum	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
double	O
gsl_blas_dasum	function
(	O
const	O
gsl_vector	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_dasum	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
float	O
gsl_blas_scasum	function
(	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_scasum	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
double	O
gsl_blas_dzasum	function
(	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_dzasum	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
CBLAS_INDEX_t	long
gsl_blas_isamax	function
(	O
const	O
gsl_vector_float	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_isamax	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
CBLAS_INDEX_t	long
gsl_blas_idamax	function
(	O
const	O
gsl_vector	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_idamax	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
CBLAS_INDEX_t	long
gsl_blas_icamax	function
(	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_icamax	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
CBLAS_INDEX_t	long
gsl_blas_izamax	function
(	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
)	O
{	O
return	O
cblas_izamax	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
int	O
gsl_blas_sswap	function
(	O
gsl_vector_float	struct
*	O
X	pointer
,	O
gsl_vector_float	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_sswap	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_dswap	function
(	O
gsl_vector	struct
*	O
X	pointer
,	O
gsl_vector	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_dswap	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
;	O
}	O
int	O
gsl_blas_cswap	function
(	O
gsl_vector_complex_float	struct
*	O
X	pointer
,	O
gsl_vector_complex_float	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_cswap	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_zswap	function
(	O
gsl_vector_complex	struct
*	O
X	pointer
,	O
gsl_vector_complex	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_zswap	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_scopy	function
(	O
const	O
gsl_vector_float	struct
*	O
X	pointer
,	O
gsl_vector_float	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_scopy	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_dcopy	function
(	O
const	O
gsl_vector	struct
*	O
X	pointer
,	O
gsl_vector	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_dcopy	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_ccopy	function
(	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
,	O
gsl_vector_complex_float	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_ccopy	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_zcopy	function
(	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
,	O
gsl_vector_complex	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_zcopy	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_saxpy	function
(	O
float	O
alpha	float
,	O
const	O
gsl_vector_float	struct
*	O
X	pointer
,	O
gsl_vector_float	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_saxpy	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_daxpy	function
(	O
double	O
alpha	float
,	O
const	O
gsl_vector	struct
*	O
X	pointer
,	O
gsl_vector	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_daxpy	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_caxpy	function
(	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
,	O
gsl_vector_complex_float	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_caxpy	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_zaxpy	function
(	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
,	O
gsl_vector_complex	struct
*	O
Y	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_zaxpy	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_srotg	function
(	O
float	O
a	double
[	O
]	O
,	O
float	O
b	double
[	O
]	O
,	O
float	O
c	pointer
[	O
]	O
,	O
float	O
s	pointer
[	O
]	O
)	O
{	O
cblas_srotg	function
(	O
a	double
,	O
b	double
,	O
c	pointer
,	O
s	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_drotg	function
(	O
double	O
a	double
[	O
]	O
,	O
double	O
b	double
[	O
]	O
,	O
double	O
c	pointer
[	O
]	O
,	O
double	O
s	pointer
[	O
]	O
)	O
{	O
cblas_drotg	function
(	O
a	double
,	O
b	double
,	O
c	pointer
,	O
s	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_srot	function
(	O
gsl_vector_float	struct
*	O
X	pointer
,	O
gsl_vector_float	struct
*	O
Y	pointer
,	O
float	O
c	pointer
,	O
float	O
s	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_srot	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
c	pointer
,	O
s	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_drot	function
(	O
gsl_vector	struct
*	O
X	pointer
,	O
gsl_vector	struct
*	O
Y	pointer
,	O
const	O
double	O
c	pointer
,	O
const	O
double	O
s	pointer
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_drot	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
c	pointer
,	O
s	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_srotmg	function
(	O
float	O
d1	pointer
[	O
]	O
,	O
float	O
d2	pointer
[	O
]	O
,	O
float	O
b1	pointer
[	O
]	O
,	O
float	O
b2	float
,	O
float	O
P	pointer
[	O
]	O
)	O
{	O
cblas_srotmg	function
(	O
d1	pointer
,	O
d2	pointer
,	O
b1	pointer
,	O
b2	float
,	O
P	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_drotmg	function
(	O
double	O
d1	pointer
[	O
]	O
,	O
double	O
d2	pointer
[	O
]	O
,	O
double	O
b1	pointer
[	O
]	O
,	O
double	O
b2	float
,	O
double	O
P	pointer
[	O
]	O
)	O
{	O
cblas_drotmg	function
(	O
d1	pointer
,	O
d2	pointer
,	O
b1	pointer
,	O
b2	float
,	O
P	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_srotm	function
(	O
gsl_vector_float	struct
*	O
X	pointer
,	O
gsl_vector_float	struct
*	O
Y	pointer
,	O
const	O
float	O
P	pointer
[	O
]	O
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_srotm	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
P	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_drotm	function
(	O
gsl_vector	struct
*	O
X	pointer
,	O
gsl_vector	struct
*	O
Y	pointer
,	O
const	O
double	O
P	pointer
[	O
]	O
)	O
{	O
if	O
(	O
X	pointer
->	O
size	long
==	O
Y	pointer
->	O
size	long
)	O
{	O
cblas_drotm	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
P	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
void	O
gsl_blas_sscal	function
(	O
float	O
alpha	float
,	O
gsl_vector_float	struct
*	O
X	pointer
)	O
{	O
cblas_sscal	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
void	O
gsl_blas_dscal	function
(	O
double	O
alpha	float
,	O
gsl_vector	struct
*	O
X	pointer
)	O
{	O
cblas_dscal	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
void	O
gsl_blas_cscal	function
(	O
const	O
gsl_complex_float	struct
alpha	float
,	O
gsl_vector_complex_float	struct
*	O
X	pointer
)	O
{	O
cblas_cscal	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
void	O
gsl_blas_zscal	function
(	O
const	O
gsl_complex	struct
alpha	float
,	O
gsl_vector_complex	struct
*	O
X	pointer
)	O
{	O
cblas_zscal	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
void	O
gsl_blas_csscal	function
(	O
float	O
alpha	float
,	O
gsl_vector_complex_float	struct
*	O
X	pointer
)	O
{	O
cblas_csscal	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
void	O
gsl_blas_zdscal	function
(	O
double	O
alpha	float
,	O
gsl_vector_complex	struct
*	O
X	pointer
)	O
{	O
cblas_zdscal	function
(	O
INT	O
(	O
X	pointer
->	O
size	long
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
}	O
int	O
gsl_blas_sgemv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_matrix_float	struct
*	O
A	pointer
,	O
const	O
gsl_vector_float	struct
*	O
X	pointer
,	O
float	O
beta	float
,	O
gsl_vector_float	struct
*	O
Y	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
(	O
TransA	enum
==	O
CblasNoTrans	int
&&	O
N	int
==	O
X	pointer
->	O
size	long
&&	O
M	int
==	O
Y	pointer
->	O
size	long
)	O
||	O
(	O
TransA	enum
==	O
CblasTrans	int
&&	O
M	int
==	O
X	pointer
->	O
size	long
&&	O
N	int
==	O
Y	pointer
->	O
size	long
)	O
)	O
{	O
cblas_sgemv	function
(	O
CblasRowMajor	int
,	O
TransA	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
beta	float
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_dgemv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
const	O
gsl_vector	struct
*	O
X	pointer
,	O
double	O
beta	float
,	O
gsl_vector	struct
*	O
Y	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
(	O
TransA	enum
==	O
CblasNoTrans	int
&&	O
N	int
==	O
X	pointer
->	O
size	long
&&	O
M	int
==	O
Y	pointer
->	O
size	long
)	O
||	O
(	O
TransA	enum
==	O
CblasTrans	int
&&	O
M	int
==	O
X	pointer
->	O
size	long
&&	O
N	int
==	O
Y	pointer
->	O
size	long
)	O
)	O
{	O
cblas_dgemv	function
(	O
CblasRowMajor	int
,	O
TransA	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
beta	float
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_cgemv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
,	O
const	O
gsl_complex_float	struct
beta	float
,	O
gsl_vector_complex_float	struct
*	O
Y	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
(	O
TransA	enum
==	O
CblasNoTrans	int
&&	O
N	int
==	O
X	pointer
->	O
size	long
&&	O
M	int
==	O
Y	pointer
->	O
size	long
)	O
||	O
(	O
TransA	enum
==	O
CblasTrans	int
&&	O
M	int
==	O
X	pointer
->	O
size	long
&&	O
N	int
==	O
Y	pointer
->	O
size	long
)	O
||	O
(	O
TransA	enum
==	O
CblasConjTrans	int
&&	O
M	int
==	O
X	pointer
->	O
size	long
&&	O
N	int
==	O
Y	pointer
->	O
size	long
)	O
)	O
{	O
cblas_cgemv	function
(	O
CblasRowMajor	int
,	O
TransA	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_zgemv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
,	O
const	O
gsl_complex	struct
beta	float
,	O
gsl_vector_complex	struct
*	O
Y	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
(	O
TransA	enum
==	O
CblasNoTrans	int
&&	O
N	int
==	O
X	pointer
->	O
size	long
&&	O
M	int
==	O
Y	pointer
->	O
size	long
)	O
||	O
(	O
TransA	enum
==	O
CblasTrans	int
&&	O
M	int
==	O
X	pointer
->	O
size	long
&&	O
N	int
==	O
Y	pointer
->	O
size	long
)	O
||	O
(	O
TransA	enum
==	O
CblasConjTrans	int
&&	O
M	int
==	O
X	pointer
->	O
size	long
&&	O
N	int
==	O
Y	pointer
->	O
size	long
)	O
)	O
{	O
cblas_zgemv	function
(	O
CblasRowMajor	int
,	O
TransA	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_chemv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
,	O
const	O
gsl_complex_float	struct
beta	float
,	O
gsl_vector_complex_float	struct
*	O
Y	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
||	O
N	int
!=	O
Y	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_chemv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_zhemv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
,	O
const	O
gsl_complex	struct
beta	float
,	O
gsl_vector_complex	struct
*	O
Y	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
||	O
N	int
!=	O
Y	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_zhemv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_ssymv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_matrix_float	struct
*	O
A	pointer
,	O
const	O
gsl_vector_float	struct
*	O
X	pointer
,	O
float	O
beta	float
,	O
gsl_vector_float	struct
*	O
Y	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
||	O
N	int
!=	O
Y	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_ssymv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
beta	float
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_dsymv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
const	O
gsl_vector	struct
*	O
X	pointer
,	O
double	O
beta	float
,	O
gsl_vector	struct
*	O
Y	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
||	O
N	int
!=	O
Y	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_dsymv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
beta	float
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_strmv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_matrix_float	struct
*	O
A	pointer
,	O
gsl_vector_float	struct
*	O
X	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_strmv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
N	int
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_dtrmv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
X	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_dtrmv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
N	int
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_ctrmv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
gsl_vector_complex_float	struct
*	O
X	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_ctrmv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
N	int
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_ztrmv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_vector_complex	struct
*	O
X	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_ztrmv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
N	int
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_strsv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_matrix_float	struct
*	O
A	pointer
,	O
gsl_vector_float	struct
*	O
X	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_strsv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
N	int
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_dtrsv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
X	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_dtrsv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
N	int
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_ctrsv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
gsl_vector_complex_float	struct
*	O
X	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_ctrsv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
N	int
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_ztrsv	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_vector_complex	struct
*	O
X	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
X	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_ztrsv	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
N	int
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_sger	function
(	O
float	O
alpha	float
,	O
const	O
gsl_vector_float	struct
*	O
X	pointer
,	O
const	O
gsl_vector_float	struct
*	O
Y	pointer
,	O
gsl_matrix_float	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
X	pointer
->	O
size	long
==	O
M	int
&&	O
Y	pointer
->	O
size	long
==	O
N	int
)	O
{	O
cblas_sger	function
(	O
CblasRowMajor	int
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_dger	function
(	O
double	O
alpha	float
,	O
const	O
gsl_vector	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
Y	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
X	pointer
->	O
size	long
==	O
M	int
&&	O
Y	pointer
->	O
size	long
==	O
N	int
)	O
{	O
cblas_dger	function
(	O
CblasRowMajor	int
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_cgeru	function
(	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
,	O
const	O
gsl_vector_complex_float	struct
*	O
Y	pointer
,	O
gsl_matrix_complex_float	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
X	pointer
->	O
size	long
==	O
M	int
&&	O
Y	pointer
->	O
size	long
==	O
N	int
)	O
{	O
cblas_cgeru	function
(	O
CblasRowMajor	int
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_zgeru	function
(	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
,	O
const	O
gsl_vector_complex	struct
*	O
Y	pointer
,	O
gsl_matrix_complex	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
X	pointer
->	O
size	long
==	O
M	int
&&	O
Y	pointer
->	O
size	long
==	O
N	int
)	O
{	O
cblas_zgeru	function
(	O
CblasRowMajor	int
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_cgerc	function
(	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
,	O
const	O
gsl_vector_complex_float	struct
*	O
Y	pointer
,	O
gsl_matrix_complex_float	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
X	pointer
->	O
size	long
==	O
M	int
&&	O
Y	pointer
->	O
size	long
==	O
N	int
)	O
{	O
cblas_cgerc	function
(	O
CblasRowMajor	int
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_zgerc	function
(	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
,	O
const	O
gsl_vector_complex	struct
*	O
Y	pointer
,	O
gsl_matrix_complex	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
X	pointer
->	O
size	long
==	O
M	int
&&	O
Y	pointer
->	O
size	long
==	O
N	int
)	O
{	O
cblas_zgerc	function
(	O
CblasRowMajor	int
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_cher	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
,	O
gsl_matrix_complex_float	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_cher	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
M	int
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_zher	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
,	O
gsl_matrix_complex	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_zher	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_cher2	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_vector_complex_float	struct
*	O
X	pointer
,	O
const	O
gsl_vector_complex_float	struct
*	O
Y	pointer
,	O
gsl_matrix_complex_float	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size	long
!=	O
N	int
||	O
Y	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_cher2	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_zher2	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_vector_complex	struct
*	O
X	pointer
,	O
const	O
gsl_vector_complex	struct
*	O
Y	pointer
,	O
gsl_matrix_complex	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size	long
!=	O
N	int
||	O
Y	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_zher2	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_ssyr	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_vector_float	struct
*	O
X	pointer
,	O
gsl_matrix_float	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_ssyr	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_dsyr	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_vector	struct
*	O
X	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_dsyr	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_ssyr2	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_vector_float	struct
*	O
X	pointer
,	O
const	O
gsl_vector_float	struct
*	O
Y	pointer
,	O
gsl_matrix_float	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size	long
!=	O
N	int
||	O
Y	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_ssyr2	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_dsyr2	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_vector	struct
*	O
X	pointer
,	O
const	O
gsl_vector	struct
*	O
Y	pointer
,	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
X	pointer
->	O
size	long
!=	O
N	int
||	O
Y	pointer
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_dsyr2	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
X	pointer
->	O
data	pointer
,	O
INT	O
(	O
X	pointer
->	O
stride	long
)	O
,	O
Y	pointer
->	O
data	pointer
,	O
INT	O
(	O
Y	pointer
->	O
stride	long
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_sgemm	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransB	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_matrix_float	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_float	struct
*	O
B	pointer
,	O
float	O
beta	float
,	O
gsl_matrix_float	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
(	O
TransA	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
NA	long
=	O
(	O
TransA	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
MB	long
=	O
(	O
TransB	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size1	long
:	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
NB	long
=	O
(	O
TransB	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size2	long
:	O
B	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
==	O
MA	long
&&	O
N	int
==	O
NB	long
&&	O
NA	long
==	O
MB	long
)	O
{	O
cblas_sgemm	function
(	O
CblasRowMajor	int
,	O
TransA	enum
,	O
TransB	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
NA	long
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_dgemm	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransB	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
const	O
gsl_matrix	struct
*	O
B	pointer
,	O
double	O
beta	float
,	O
gsl_matrix	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
(	O
TransA	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
NA	long
=	O
(	O
TransA	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
MB	long
=	O
(	O
TransB	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size1	long
:	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
NB	long
=	O
(	O
TransB	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size2	long
:	O
B	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
==	O
MA	long
&&	O
N	int
==	O
NB	long
&&	O
NA	long
==	O
MB	long
)	O
{	O
cblas_dgemm	function
(	O
CblasRowMajor	int
,	O
TransA	enum
,	O
TransB	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
NA	long
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_cgemm	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransB	enum
,	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex_float	struct
*	O
B	pointer
,	O
const	O
gsl_complex_float	struct
beta	float
,	O
gsl_matrix_complex_float	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
(	O
TransA	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
NA	long
=	O
(	O
TransA	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
MB	long
=	O
(	O
TransB	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size1	long
:	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
NB	long
=	O
(	O
TransB	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size2	long
:	O
B	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
==	O
MA	long
&&	O
N	int
==	O
NB	long
&&	O
NA	long
==	O
MB	long
)	O
{	O
cblas_cgemm	function
(	O
CblasRowMajor	int
,	O
TransA	enum
,	O
TransB	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
NA	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_zgemm	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransB	enum
,	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex	struct
*	O
B	pointer
,	O
const	O
gsl_complex	struct
beta	float
,	O
gsl_matrix_complex	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
(	O
TransA	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
NA	long
=	O
(	O
TransA	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
MB	long
=	O
(	O
TransB	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size1	long
:	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
NB	long
=	O
(	O
TransB	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size2	long
:	O
B	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
==	O
MA	long
&&	O
N	int
==	O
NB	long
&&	O
NA	long
==	O
MB	long
)	O
{	O
cblas_zgemm	function
(	O
CblasRowMajor	int
,	O
TransA	enum
,	O
TransB	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
NA	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_ssymm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_matrix_float	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_float	struct
*	O
B	pointer
,	O
float	O
beta	float
,	O
gsl_matrix_float	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
MB	long
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
NB	long
=	O
B	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
(	O
M	int
==	O
MA	long
&&	O
N	int
==	O
NB	long
&&	O
NA	long
==	O
MB	long
)	O
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
(	O
M	int
==	O
MB	long
&&	O
N	int
==	O
NA	long
&&	O
NB	long
==	O
MA	long
)	O
)	O
)	O
{	O
cblas_ssymm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_dsymm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
const	O
gsl_matrix	struct
*	O
B	pointer
,	O
double	O
beta	float
,	O
gsl_matrix	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
MB	long
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
NB	long
=	O
B	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
(	O
M	int
==	O
MA	long
&&	O
N	int
==	O
NB	long
&&	O
NA	long
==	O
MB	long
)	O
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
(	O
M	int
==	O
MB	long
&&	O
N	int
==	O
NA	long
&&	O
NB	long
==	O
MA	long
)	O
)	O
)	O
{	O
cblas_dsymm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_csymm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex_float	struct
*	O
B	pointer
,	O
const	O
gsl_complex_float	struct
beta	float
,	O
gsl_matrix_complex_float	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
MB	long
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
NB	long
=	O
B	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
(	O
M	int
==	O
MA	long
&&	O
N	int
==	O
NB	long
&&	O
NA	long
==	O
MB	long
)	O
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
(	O
M	int
==	O
MB	long
&&	O
N	int
==	O
NA	long
&&	O
NB	long
==	O
MA	long
)	O
)	O
)	O
{	O
cblas_csymm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_zsymm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex	struct
*	O
B	pointer
,	O
const	O
gsl_complex	struct
beta	float
,	O
gsl_matrix_complex	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
MB	long
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
NB	long
=	O
B	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
(	O
M	int
==	O
MA	long
&&	O
N	int
==	O
NB	long
&&	O
NA	long
==	O
MB	long
)	O
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
(	O
M	int
==	O
MB	long
&&	O
N	int
==	O
NA	long
&&	O
NB	long
==	O
MA	long
)	O
)	O
)	O
{	O
cblas_zsymm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_chemm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex_float	struct
*	O
B	pointer
,	O
const	O
gsl_complex_float	struct
beta	float
,	O
gsl_matrix_complex_float	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
MB	long
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
NB	long
=	O
B	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
(	O
M	int
==	O
MA	long
&&	O
N	int
==	O
NB	long
&&	O
NA	long
==	O
MB	long
)	O
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
(	O
M	int
==	O
MB	long
&&	O
N	int
==	O
NA	long
&&	O
NB	long
==	O
MA	long
)	O
)	O
)	O
{	O
cblas_chemm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_zhemm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex	struct
*	O
B	pointer
,	O
const	O
gsl_complex	struct
beta	float
,	O
gsl_matrix_complex	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
MB	long
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
NB	long
=	O
B	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
(	O
M	int
==	O
MA	long
&&	O
N	int
==	O
NB	long
&&	O
NA	long
==	O
MB	long
)	O
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
(	O
M	int
==	O
MB	long
&&	O
N	int
==	O
NA	long
&&	O
NB	long
==	O
MA	long
)	O
)	O
)	O
{	O
cblas_zhemm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_ssyrk	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_matrix_float	struct
*	O
A	pointer
,	O
float	O
beta	float
,	O
gsl_matrix_float	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
J	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
K	int
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
J	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_ssyrk	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
K	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_dsyrk	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
double	O
beta	float
,	O
gsl_matrix	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
J	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
K	int
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
J	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_dsyrk	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
K	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_csyrk	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
const	O
gsl_complex_float	struct
beta	float
,	O
gsl_matrix_complex_float	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
J	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
K	int
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
J	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_csyrk	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
K	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_zsyrk	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_complex	struct
beta	float
,	O
gsl_matrix_complex	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
J	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
K	int
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
J	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_zsyrk	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
K	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_cherk	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
float	O
beta	float
,	O
gsl_matrix_complex_float	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
J	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
K	int
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
J	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_cherk	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
K	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_zherk	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
double	O
beta	float
,	O
gsl_matrix_complex	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
J	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
K	int
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
J	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_zherk	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
K	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_ssyr2k	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_matrix_float	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_float	struct
*	O
B	pointer
,	O
float	O
beta	float
,	O
gsl_matrix_float	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
NA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
MB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size1	long
:	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
NB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size2	long
:	O
B	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
MA	long
||	O
N	int
!=	O
MB	long
||	O
NA	long
!=	O
NB	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_ssyr2k	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
NA	long
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_dsyr2k	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
const	O
gsl_matrix	struct
*	O
B	pointer
,	O
double	O
beta	float
,	O
gsl_matrix	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
NA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
MB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size1	long
:	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
NB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size2	long
:	O
B	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
MA	long
||	O
N	int
!=	O
MB	long
||	O
NA	long
!=	O
NB	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_dsyr2k	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
NA	long
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_csyr2k	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex_float	struct
*	O
B	pointer
,	O
const	O
gsl_complex_float	struct
beta	float
,	O
gsl_matrix_complex_float	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
NA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
MB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size1	long
:	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
NB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size2	long
:	O
B	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
MA	long
||	O
N	int
!=	O
MB	long
||	O
NA	long
!=	O
NB	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_csyr2k	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
NA	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_zsyr2k	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex	struct
*	O
B	pointer
,	O
const	O
gsl_complex	struct
beta	float
,	O
gsl_matrix_complex	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
NA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
MB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size1	long
:	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
NB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size2	long
:	O
B	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
MA	long
||	O
N	int
!=	O
MB	long
||	O
NA	long
!=	O
NB	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_zsyr2k	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
NA	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
beta	float
)	O
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_cher2k	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex_float	struct
*	O
B	pointer
,	O
float	O
beta	float
,	O
gsl_matrix_complex_float	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
NA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
MB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size1	long
:	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
NB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size2	long
:	O
B	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
MA	long
||	O
N	int
!=	O
MB	long
||	O
NA	long
!=	O
NB	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_cher2k	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
NA	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_zher2k	function
(	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
Trans	enum
,	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
const	O
gsl_matrix_complex	struct
*	O
B	pointer
,	O
double	O
beta	float
,	O
gsl_matrix_complex	struct
*	O
C	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
C	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
C	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size1	long
:	O
A	pointer
->	O
size2	long
;	O
const	O
size_t	long
NA	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
A	pointer
->	O
size2	long
:	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
MB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size1	long
:	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
NB	long
=	O
(	O
Trans	enum
==	O
CblasNoTrans	int
)	O
?	O
B	pointer
->	O
size2	long
:	O
B	pointer
->	O
size1	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix C must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
MA	long
||	O
N	int
!=	O
MB	long
||	O
NA	long
!=	O
NB	long
)	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
cblas_zher2k	function
(	O
CblasRowMajor	int
,	O
Uplo	enum
,	O
Trans	enum
,	O
INT	O
(	O
N	int
)	O
,	O
INT	O
(	O
NA	long
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
,	O
beta	float
,	O
C	pointer
->	O
data	pointer
,	O
INT	O
(	O
C	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_blas_strmm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_matrix_float	struct
*	O
A	pointer
,	O
gsl_matrix_float	struct
*	O
B	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
M	int
==	O
MA	long
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
N	int
==	O
MA	long
)	O
)	O
{	O
cblas_strmm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_dtrmm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_matrix	struct
*	O
B	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
M	int
==	O
MA	long
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
N	int
==	O
MA	long
)	O
)	O
{	O
cblas_dtrmm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_ctrmm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
gsl_matrix_complex_float	struct
*	O
B	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
M	int
==	O
MA	long
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
N	int
==	O
MA	long
)	O
)	O
{	O
cblas_ctrmm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_ztrmm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_matrix_complex	struct
*	O
B	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
M	int
==	O
MA	long
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
N	int
==	O
MA	long
)	O
)	O
{	O
cblas_ztrmm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_strsm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
float	O
alpha	float
,	O
const	O
gsl_matrix_float	struct
*	O
A	pointer
,	O
gsl_matrix_float	struct
*	O
B	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
M	int
==	O
MA	long
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
N	int
==	O
MA	long
)	O
)	O
{	O
cblas_strsm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_dtrsm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
double	O
alpha	float
,	O
const	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_matrix	struct
*	O
B	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
M	int
==	O
MA	long
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
N	int
==	O
MA	long
)	O
)	O
{	O
cblas_dtrsm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
alpha	float
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_ctrsm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_complex_float	struct
alpha	float
,	O
const	O
gsl_matrix_complex_float	struct
*	O
A	pointer
,	O
gsl_matrix_complex_float	struct
*	O
B	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
M	int
==	O
MA	long
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
N	int
==	O
MA	long
)	O
)	O
{	O
cblas_ctrsm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
int	O
gsl_blas_ztrsm	function
(	O
CBLAS_SIDE_t	enum
Side	enum
,	O
CBLAS_UPLO_t	enum
Uplo	enum
,	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
CBLAS_DIAG_t	enum
Diag	enum
,	O
const	O
gsl_complex	struct
alpha	float
,	O
const	O
gsl_matrix_complex	struct
*	O
A	pointer
,	O
gsl_matrix_complex	struct
*	O
B	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
B	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
B	pointer
->	O
size2	long
;	O
const	O
size_t	long
MA	long
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
NA	long
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
MA	long
!=	O
NA	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix A must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
(	O
Side	enum
==	O
CblasLeft	int
&&	O
M	int
==	O
MA	long
)	O
||	O
(	O
Side	enum
==	O
CblasRight	int
&&	O
N	int
==	O
MA	long
)	O
)	O
{	O
cblas_ztrsm	function
(	O
CblasRowMajor	int
,	O
Side	enum
,	O
Uplo	enum
,	O
TransA	enum
,	O
Diag	enum
,	O
INT	O
(	O
M	int
)	O
,	O
INT	O
(	O
N	int
)	O
,	O
GSL_COMPLEX_P	O
(	O
&	O
alpha	float
)	O
,	O
A	pointer
->	O
data	pointer
,	O
INT	O
(	O
A	pointer
->	O
tda	long
)	O
,	O
B	pointer
->	O
data	pointer
,	O
INT	O
(	O
B	pointer
->	O
tda	long
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"invalid length"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
}	O
