struct	O
bf	struct
{	O
int	O
counter	int
;	O
char	O
buf	array
[	O
PKTSIZE	O
]	O
;	O
}	O
bfs	array
[	O
2	int
]	O
;	O
static	O
int	O
nextone	int
;	O
static	O
int	O
current	int
;	O
int	O
newline	int
=	O
0	int
;	O
int	O
prevchar	int
=	O
-	O
1	int
;	O
static	O
struct	O
tftphdr	struct
*	O
rw_init	function
(	O
int	O
)	O
;	O
struct	O
tftphdr	struct
*	O
w_init	function
(	O
void	O
)	O
{	O
return	O
rw_init	function
(	O
0	int
)	O
;	O
}	O
struct	O
tftphdr	struct
*	O
r_init	function
(	O
void	O
)	O
{	O
return	O
rw_init	function
(	O
1	int
)	O
;	O
}	O
static	O
struct	O
tftphdr	struct
*	O
rw_init	function
(	O
int	O
x	int
)	O
{	O
newline	int
=	O
0	int
;	O
prevchar	int
=	O
-	O
1	int
;	O
bfs	array
[	O
0	int
]	O
.	O
counter	int
=	O
BF_ALLOC	O
;	O
current	int
=	O
0	int
;	O
bfs	array
[	O
1	int
]	O
.	O
counter	int
=	O
BF_FREE	O
;	O
nextone	int
=	O
x	int
;	O
return	O
(	O
struct	O
tftphdr	struct
*	O
)	O
bfs	array
[	O
0	int
]	O
.	O
buf	array
;	O
}	O
int	O
readit	function
(	O
FILE	struct
*	O
file	pointer
,	O
struct	O
tftphdr	struct
*	O
*	O
dpp	pointer
,	O
int	O
convert	int
)	O
{	O
struct	O
bf	struct
*	O
b	pointer
;	O
bfs	array
[	O
current	int
]	O
.	O
counter	int
=	O
BF_FREE	O
;	O
current	int
=	O
!	O
current	int
;	O
b	pointer
=	O
&	O
bfs	array
[	O
current	int
]	O
;	O
if	O
(	O
b	pointer
->	O
counter	int
==	O
BF_FREE	O
)	O
read_ahead	function
(	O
file	pointer
,	O
convert	int
)	O
;	O
*	O
dpp	pointer
=	O
(	O
struct	O
tftphdr	struct
*	O
)	O
b	pointer
->	O
buf	array
;	O
return	O
b	pointer
->	O
counter	int
;	O
}	O
void	O
read_ahead	function
(	O
FILE	struct
*	O
file	pointer
,	O
int	O
convert	int
)	O
{	O
register	O
int	O
i	int
;	O
register	O
char	O
*	O
p	pointer
;	O
register	O
int	O
c	int
;	O
struct	O
bf	struct
*	O
b	pointer
;	O
struct	O
tftphdr	struct
*	O
dp	pointer
;	O
b	pointer
=	O
&	O
bfs	array
[	O
nextone	int
]	O
;	O
if	O
(	O
b	pointer
->	O
counter	int
!=	O
BF_FREE	O
)	O
return	O
;	O
nextone	int
=	O
!	O
nextone	int
;	O
dp	pointer
=	O
(	O
struct	O
tftphdr	struct
*	O
)	O
b	pointer
->	O
buf	array
;	O
if	O
(	O
convert	int
==	O
0	int
)	O
{	O
b	pointer
->	O
counter	int
=	O
read	pointer
(	O
fileno	function
(	O
file	pointer
)	O
,	O
dp	pointer
->	O
th_data	O
,	O
SEGSIZE	int
)	O
;	O
return	O
;	O
}	O
p	pointer
=	O
dp	pointer
->	O
th_data	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SEGSIZE	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
newline	int
)	O
{	O
if	O
(	O
prevchar	int
==	O
'\n'	O
)	O
c	int
=	O
'\n'	O
;	O
else	O
c	int
=	O
'\0'	O
;	O
newline	int
=	O
0	int
;	O
}	O
else	O
{	O
c	int
=	O
getc	function
(	O
file	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
{	O
prevchar	int
=	O
c	int
;	O
c	int
=	O
'\r'	O
;	O
newline	int
=	O
1	int
;	O
}	O
}	O
*	O
p	pointer
++	O
=	O
c	int
;	O
}	O
b	pointer
->	O
counter	int
=	O
(	O
int	O
)	O
(	O
p	pointer
-	O
dp	pointer
->	O
th_data	O
)	O
;	O
}	O
int	O
writeit	function
(	O
FILE	struct
*	O
file	pointer
,	O
struct	O
tftphdr	struct
*	O
*	O
dpp	pointer
,	O
int	O
ct	int
,	O
int	O
convert	int
)	O
{	O
bfs	array
[	O
current	int
]	O
.	O
counter	int
=	O
ct	int
;	O
current	int
=	O
!	O
current	int
;	O
if	O
(	O
bfs	array
[	O
current	int
]	O
.	O
counter	int
!=	O
BF_FREE	O
)	O
write_behind	function
(	O
file	pointer
,	O
convert	int
)	O
;	O
bfs	array
[	O
current	int
]	O
.	O
counter	int
=	O
BF_ALLOC	O
;	O
*	O
dpp	pointer
=	O
(	O
struct	O
tftphdr	struct
*	O
)	O
bfs	array
[	O
current	int
]	O
.	O
buf	array
;	O
return	O
ct	int
;	O
}	O
int	O
write_behind	function
(	O
FILE	struct
*	O
file	pointer
,	O
int	O
convert	int
)	O
{	O
char	O
*	O
buf	array
;	O
int	O
count	int
;	O
register	O
int	O
ct	int
;	O
register	O
char	O
*	O
p	pointer
;	O
register	O
int	O
c	int
;	O
struct	O
bf	struct
*	O
b	pointer
;	O
struct	O
tftphdr	struct
*	O
dp	pointer
;	O
b	pointer
=	O
&	O
bfs	array
[	O
nextone	int
]	O
;	O
if	O
(	O
b	pointer
->	O
counter	int
<	O
-	O
1	int
)	O
return	O
0	int
;	O
count	int
=	O
b	pointer
->	O
counter	int
;	O
b	pointer
->	O
counter	int
=	O
BF_FREE	O
;	O
dp	pointer
=	O
(	O
struct	O
tftphdr	struct
*	O
)	O
b	pointer
->	O
buf	array
;	O
nextone	int
=	O
!	O
nextone	int
;	O
buf	array
=	O
dp	pointer
->	O
th_data	O
;	O
if	O
(	O
count	int
<=	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
convert	int
==	O
0	int
)	O
return	O
write	pointer
(	O
fileno	function
(	O
file	pointer
)	O
,	O
buf	array
,	O
count	int
)	O
;	O
p	pointer
=	O
buf	array
;	O
ct	int
=	O
count	int
;	O
while	O
(	O
ct	int
--	O
)	O
{	O
c	int
=	O
*	O
p	pointer
++	O
;	O
if	O
(	O
prevchar	int
==	O
'\r'	O
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
fseeko	function
(	O
file	pointer
,	O
-	O
1	int
,	O
1	int
)	O
;	O
else	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
goto	O
skipit	O
;	O
}	O
putc	function
(	O
c	int
,	O
file	pointer
)	O
;	O
skipit	O
:	O
prevchar	int
=	O
c	int
;	O
}	O
return	O
count	int
;	O
}	O
int	O
synchnet	function
(	O
int	O
f	int
)	O
{	O
int	O
i	int
,	O
j	int
=	O
0	int
;	O
char	O
rbuf	array
[	O
PKTSIZE	O
]	O
;	O
struct	O
sockaddr_storage	struct
from	struct
;	O
socklen_t	int
fromlen	int
;	O
while	O
(	O
1	int
)	O
{	O
ioctl	function
(	O
f	int
,	O
FIONREAD	int
,	O
&	O
i	int
)	O
;	O
if	O
(	O
i	int
)	O
{	O
j	int
++	O
;	O
fromlen	int
=	O
sizeof	O
from	struct
;	O
recvfrom	function
(	O
f	int
,	O
rbuf	array
,	O
sizeof	O
(	O
rbuf	array
)	O
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
from	struct
,	O
&	O
fromlen	int
)	O
;	O
}	O
else	O
{	O
return	O
(	O
j	int
)	O
;	O
}	O
}	O
}	O
