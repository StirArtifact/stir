static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: hash_rec.c,v 1.5 2014/04/17 20:27:29 sebdiaz Exp $"	pointer
;	O
static	O
int	O
__ham_alloc_pages	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
__ham_groupalloc_args	struct
*	O
)	O
)	O
;	O
static	O
int	O
__ham_free_pages	function
__P	O
(	O
(	O
DB	struct
*	O
,	O
DBMETA	struct
*	O
,	O
__ham_groupalloc_args	struct
*	O
)	O
)	O
;	O
int	O
CDB___ham_insdel_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__ham_insdel_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
u_int32_t	int
opcode	int
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
getmeta	int
,	O
ret	int
,	O
type	enum
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
getmeta	int
=	O
0	int
;	O
REC_PRINT	O
(	O
CDB___ham_insdel_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___ham_insdel_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
goto	O
done	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_get_meta	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
getmeta	int
=	O
1	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
opcode	int
=	O
OPCODE_OF	O
(	O
argp	pointer
->	O
opcode	int
)	O
;	O
if	O
(	O
(	O
opcode	int
==	O
DELPAIR	int
&&	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
||	O
(	O
opcode	int
==	O
PUTPAIR	int
&&	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
)	O
{	O
if	O
(	O
opcode	int
!=	O
DELPAIR	int
||	O
argp	pointer
->	O
ndx	int
==	O
(	O
u_int32_t	int
)	O
NUM_ENT	O
(	O
pagep	pointer
)	O
)	O
{	O
CDB___ham_putitem	function
(	O
pagep	pointer
,	O
&	O
argp	pointer
->	O
key	struct
,	O
DB_UNDO	O
(	O
op	enum
)	O
||	O
PAIR_ISKEYBIG	O
(	O
argp	pointer
->	O
opcode	int
)	O
?	O
H_OFFPAGE	int
:	O
H_KEYDATA	int
)	O
;	O
if	O
(	O
PAIR_ISDATADUP	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
type	enum
=	O
H_DUPLICATE	int
;	O
else	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
||	O
PAIR_ISDATABIG	O
(	O
argp	pointer
->	O
opcode	int
)	O
)	O
type	enum
=	O
H_OFFPAGE	int
;	O
else	O
type	enum
=	O
H_KEYDATA	int
;	O
CDB___ham_putitem	function
(	O
pagep	pointer
,	O
&	O
argp	pointer
->	O
data	pointer
,	O
type	enum
)	O
;	O
}	O
else	O
(	O
void	O
)	O
CDB___ham_reputpair	function
(	O
pagep	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
argp	pointer
->	O
ndx	int
,	O
&	O
argp	pointer
->	O
key	struct
,	O
&	O
argp	pointer
->	O
data	pointer
)	O
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
DB_REDO	O
(	O
op	enum
)	O
?	O
*	O
lsnp	pointer
:	O
argp	pointer
->	O
pagelsn	struct
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
file_dbp	pointer
,	O
pagep	pointer
,	O
1	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
else	O
if	O
(	O
(	O
opcode	int
==	O
DELPAIR	int
&&	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
||	O
(	O
opcode	int
==	O
PUTPAIR	int
&&	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
)	O
{	O
CDB___ham_dpair	function
(	O
file_dbp	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
ndx	int
)	O
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
DB_REDO	O
(	O
op	enum
)	O
?	O
*	O
lsnp	pointer
:	O
argp	pointer
->	O
pagelsn	struct
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
file_dbp	pointer
,	O
(	O
PAGE	struct
*	O
)	O
pagep	pointer
,	O
1	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
file_dbp	pointer
,	O
(	O
PAGE	struct
*	O
)	O
pagep	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
if	O
(	O
getmeta	int
)	O
(	O
void	O
)	O
CDB___ham_release_meta	function
(	O
dbc	pointer
)	O
;	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___ham_newpage_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__ham_newpage_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
change	int
,	O
getmeta	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
getmeta	int
=	O
0	int
;	O
REC_PRINT	O
(	O
CDB___ham_newpage_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___ham_newpage_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
new_pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
ret	int
=	O
0	int
;	O
goto	O
ppage	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
new_pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_get_meta	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
getmeta	int
=	O
1	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
change	int
=	O
0	int
;	O
if	O
(	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
PUTOVFL	int
)	O
||	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DELOVFL	int
)	O
)	O
{	O
P_INIT	O
(	O
pagep	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
argp	pointer
->	O
new_pgno	int
,	O
argp	pointer
->	O
prev_pgno	int
,	O
argp	pointer
->	O
next_pgno	int
,	O
0	int
,	O
P_HASH	int
,	O
0	int
)	O
;	O
change	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DELOVFL	int
)	O
||	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
PUTOVFL	int
)	O
)	O
{	O
change	int
=	O
1	int
;	O
}	O
if	O
(	O
!	O
change	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
file_dbp	pointer
,	O
(	O
PAGE	struct
*	O
)	O
pagep	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
else	O
{	O
LSN	O
(	O
pagep	pointer
)	O
=	O
DB_REDO	O
(	O
op	enum
)	O
?	O
*	O
lsnp	pointer
:	O
argp	pointer
->	O
pagelsn	struct
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
file_dbp	pointer
,	O
(	O
PAGE	struct
*	O
)	O
pagep	pointer
,	O
1	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
ppage	O
:	O
if	O
(	O
argp	pointer
->	O
prev_pgno	int
!=	O
PGNO_INVALID	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
prev_pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
ret	int
=	O
0	int
;	O
goto	O
npage	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
prev_pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
prevlsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
prevlsn	struct
)	O
;	O
change	int
=	O
0	int
;	O
if	O
(	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
PUTOVFL	int
)	O
||	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DELOVFL	int
)	O
)	O
{	O
pagep	pointer
->	O
next_pgno	int
=	O
argp	pointer
->	O
new_pgno	int
;	O
change	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DELOVFL	int
)	O
||	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
PUTOVFL	int
)	O
)	O
{	O
pagep	pointer
->	O
next_pgno	int
=	O
argp	pointer
->	O
next_pgno	int
;	O
change	int
=	O
1	int
;	O
}	O
if	O
(	O
!	O
change	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
file_dbp	pointer
,	O
(	O
PAGE	struct
*	O
)	O
pagep	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
else	O
{	O
LSN	O
(	O
pagep	pointer
)	O
=	O
DB_REDO	O
(	O
op	enum
)	O
?	O
*	O
lsnp	pointer
:	O
argp	pointer
->	O
prevlsn	struct
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
file_dbp	pointer
,	O
(	O
PAGE	struct
*	O
)	O
pagep	pointer
,	O
1	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
}	O
npage	O
:	O
if	O
(	O
argp	pointer
->	O
next_pgno	int
!=	O
PGNO_INVALID	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
next_pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
goto	O
done	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
next_pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
nextlsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
nextlsn	struct
)	O
;	O
change	int
=	O
0	int
;	O
if	O
(	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
PUTOVFL	int
)	O
||	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DELOVFL	int
)	O
)	O
{	O
pagep	pointer
->	O
prev_pgno	int
=	O
argp	pointer
->	O
new_pgno	int
;	O
change	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
DELOVFL	int
)	O
||	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
&&	O
argp	pointer
->	O
opcode	int
==	O
PUTOVFL	int
)	O
)	O
{	O
pagep	pointer
->	O
prev_pgno	int
=	O
argp	pointer
->	O
prev_pgno	int
;	O
change	int
=	O
1	int
;	O
}	O
if	O
(	O
!	O
change	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
file_dbp	pointer
,	O
(	O
PAGE	struct
*	O
)	O
pagep	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
else	O
{	O
LSN	O
(	O
pagep	pointer
)	O
=	O
DB_REDO	O
(	O
op	enum
)	O
?	O
*	O
lsnp	pointer
:	O
argp	pointer
->	O
nextlsn	struct
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
file_dbp	pointer
,	O
(	O
PAGE	struct
*	O
)	O
pagep	pointer
,	O
1	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
}	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
if	O
(	O
getmeta	int
)	O
(	O
void	O
)	O
CDB___ham_release_meta	function
(	O
dbc	pointer
)	O
;	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___ham_replace_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__ham_replace_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
DBT	struct
dbt	struct
;	O
PAGE	struct
*	O
pagep	pointer
;	O
int32_t	int
grow	int
;	O
int	O
change	int
,	O
cmp_n	int
,	O
cmp_p	int
,	O
getmeta	int
,	O
ret	int
;	O
u_int8_t	char
*	O
hk	pointer
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
getmeta	int
=	O
0	int
;	O
REC_PRINT	O
(	O
CDB___ham_replace_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___ham_replace_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
goto	O
done	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_get_meta	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
getmeta	int
=	O
1	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
memset	function
(	O
&	O
dbt	struct
,	O
0	int
,	O
sizeof	O
(	O
dbt	struct
)	O
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
change	int
=	O
1	int
;	O
dbt	struct
.	O
data	pointer
=	O
argp	pointer
->	O
newitem	struct
.	O
data	pointer
;	O
dbt	struct
.	O
size	int
=	O
argp	pointer
->	O
newitem	struct
.	O
size	int
;	O
grow	int
=	O
argp	pointer
->	O
newitem	struct
.	O
size	int
-	O
argp	pointer
->	O
olditem	struct
.	O
size	int
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
change	int
=	O
1	int
;	O
dbt	struct
.	O
data	pointer
=	O
argp	pointer
->	O
olditem	struct
.	O
data	pointer
;	O
dbt	struct
.	O
size	int
=	O
argp	pointer
->	O
olditem	struct
.	O
size	int
;	O
grow	int
=	O
argp	pointer
->	O
olditem	struct
.	O
size	int
-	O
argp	pointer
->	O
newitem	struct
.	O
size	int
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
pagelsn	struct
;	O
}	O
else	O
{	O
change	int
=	O
0	int
;	O
grow	int
=	O
0	int
;	O
}	O
if	O
(	O
change	int
)	O
{	O
CDB___ham_onpage_replace	function
(	O
pagep	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
argp	pointer
->	O
ndx	int
,	O
argp	pointer
->	O
off	long
,	O
grow	int
,	O
&	O
dbt	struct
)	O
;	O
if	O
(	O
argp	pointer
->	O
makedup	int
)	O
{	O
hk	pointer
=	O
P_ENTRY	O
(	O
pagep	pointer
,	O
argp	pointer
->	O
ndx	int
)	O
;	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
HPAGE_PTYPE	O
(	O
hk	pointer
)	O
=	O
H_DUPLICATE	int
;	O
else	O
HPAGE_PTYPE	O
(	O
hk	pointer
)	O
=	O
H_KEYDATA	int
;	O
}	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
file_dbp	pointer
,	O
pagep	pointer
,	O
change	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
if	O
(	O
getmeta	int
)	O
(	O
void	O
)	O
CDB___ham_release_meta	function
(	O
dbc	pointer
)	O
;	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___ham_splitdata_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__ham_splitdata_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
int	O
change	int
,	O
cmp_n	int
,	O
cmp_p	int
,	O
getmeta	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
getmeta	int
=	O
0	int
;	O
REC_PRINT	O
(	O
CDB___ham_splitdata_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___ham_splitdata_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
goto	O
done	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_get_meta	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
getmeta	int
=	O
1	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
change	int
=	O
0	int
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
argp	pointer
->	O
opcode	int
==	O
SPLITNEW	int
)	O
memcpy	function
(	O
pagep	pointer
,	O
argp	pointer
->	O
pageimage	struct
.	O
data	pointer
,	O
argp	pointer
->	O
pageimage	struct
.	O
size	int
)	O
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
change	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
argp	pointer
->	O
opcode	int
==	O
SPLITOLD	int
)	O
{	O
memcpy	function
(	O
pagep	pointer
,	O
argp	pointer
->	O
pageimage	struct
.	O
data	pointer
,	O
argp	pointer
->	O
pageimage	struct
.	O
size	int
)	O
;	O
}	O
else	O
P_INIT	O
(	O
pagep	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
argp	pointer
->	O
pgno	int
,	O
PGNO_INVALID	int
,	O
PGNO_INVALID	int
,	O
0	int
,	O
P_HASH	int
,	O
0	int
)	O
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
pagelsn	struct
;	O
change	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_put_page	function
(	O
file_dbp	pointer
,	O
pagep	pointer
,	O
change	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
if	O
(	O
getmeta	int
)	O
(	O
void	O
)	O
CDB___ham_release_meta	function
(	O
dbc	pointer
)	O
;	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___ham_copypage_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__ham_copypage_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
getmeta	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
getmeta	int
=	O
0	int
;	O
REC_PRINT	O
(	O
CDB___ham_copypage_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___ham_copypage_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_get_meta	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
getmeta	int
=	O
1	int
;	O
modified	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
ret	int
=	O
0	int
;	O
goto	O
donext	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
memcpy	function
(	O
pagep	pointer
,	O
argp	pointer
->	O
page	pointer
.	O
data	pointer
,	O
argp	pointer
->	O
page	pointer
.	O
size	int
)	O
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
P_INIT	O
(	O
pagep	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
argp	pointer
->	O
pgno	int
,	O
PGNO_INVALID	int
,	O
argp	pointer
->	O
next_pgno	int
,	O
0	int
,	O
P_HASH	int
,	O
0	int
)	O
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
pagelsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
donext	O
:	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
next_pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
ret	int
=	O
0	int
;	O
goto	O
do_nn	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
next_pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
nextlsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
nextlsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
memcpy	function
(	O
pagep	pointer
,	O
argp	pointer
->	O
page	pointer
.	O
data	pointer
,	O
argp	pointer
->	O
page	pointer
.	O
size	int
)	O
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
do_nn	O
:	O
if	O
(	O
argp	pointer
->	O
nnext_pgno	int
==	O
PGNO_INVALID	int
)	O
goto	O
done	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
nnext_pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
goto	O
done	O
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
nnext_pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
nnextlsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
nnextlsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
PREV_PGNO	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
pgno	int
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
PREV_PGNO	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
next_pgno	int
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
nnextlsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
if	O
(	O
getmeta	int
)	O
(	O
void	O
)	O
CDB___ham_release_meta	function
(	O
dbc	pointer
)	O
;	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___ham_metagroup_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__ham_metagroup_args	struct
*	O
argp	pointer
;	O
HASH_CURSOR	struct
*	O
hcp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
db_pgno_t	int
last_pgno	int
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
groupgrow	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___ham_metagroup_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___ham_metagroup_read	function
,	O
1	int
)	O
;	O
groupgrow	int
=	O
(	O
u_int32_t	int
)	O
(	O
1	int
<<	O
CDB___db_log2	function
(	O
argp	pointer
->	O
bucket	int
+	O
1	int
)	O
)	O
==	O
argp	pointer
->	O
bucket	int
+	O
1	int
;	O
last_pgno	int
=	O
argp	pointer
->	O
pgno	int
;	O
if	O
(	O
groupgrow	int
)	O
last_pgno	int
+=	O
argp	pointer
->	O
bucket	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
last_pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
pagelsn	struct
)	O
;	O
if	O
(	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
||	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
pagep	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
else	O
pagep	pointer
->	O
lsn	struct
=	O
argp	pointer
->	O
pagelsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
hcp	pointer
=	O
(	O
HASH_CURSOR	struct
*	O
)	O
dbc	pointer
->	O
internal	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_get_meta	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
lsn	struct
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
lsn	struct
,	O
&	O
argp	pointer
->	O
metalsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
lsn	struct
,	O
&	O
argp	pointer
->	O
metalsn	struct
)	O
;	O
if	O
(	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
||	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
++	O
hcp	pointer
->	O
hdr	struct
->	O
max_bucket	int
;	O
if	O
(	O
groupgrow	int
)	O
{	O
hcp	pointer
->	O
hdr	struct
->	O
low_mask	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
high_mask	int
;	O
hcp	pointer
->	O
hdr	struct
->	O
high_mask	int
=	O
(	O
argp	pointer
->	O
bucket	int
+	O
1	int
)	O
|	O
hcp	pointer
->	O
hdr	struct
->	O
low_mask	int
;	O
}	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
}	O
else	O
{	O
--	O
hcp	pointer
->	O
hdr	struct
->	O
max_bucket	int
;	O
if	O
(	O
groupgrow	int
)	O
{	O
hcp	pointer
->	O
hdr	struct
->	O
high_mask	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
low_mask	int
;	O
hcp	pointer
->	O
hdr	struct
->	O
low_mask	int
=	O
hcp	pointer
->	O
hdr	struct
->	O
high_mask	int
>>	O
1	int
;	O
}	O
hcp	pointer
->	O
hdr	struct
->	O
dbmeta	struct
.	O
lsn	struct
=	O
argp	pointer
->	O
metalsn	struct
;	O
}	O
if	O
(	O
groupgrow	int
&&	O
hcp	pointer
->	O
hdr	struct
->	O
spares	array
[	O
CDB___db_log2	function
(	O
argp	pointer
->	O
bucket	int
+	O
1	int
)	O
+	O
1	int
]	O
==	O
PGNO_INVALID	int
)	O
hcp	pointer
->	O
hdr	struct
->	O
spares	array
[	O
CDB___db_log2	function
(	O
argp	pointer
->	O
bucket	int
+	O
1	int
)	O
+	O
1	int
]	O
=	O
argp	pointer
->	O
pgno	int
-	O
argp	pointer
->	O
bucket	int
-	O
1	int
;	O
F_SET	O
(	O
hcp	pointer
,	O
H_DIRTY	int
)	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___ham_release_meta	function
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___ham_groupalloc_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
)	O
{	O
}	O
__ham_groupalloc_args	struct
*	O
argp	pointer
;	O
DBMETA	struct
*	O
mmeta	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
db_pgno_t	int
pgno	int
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
modified	int
=	O
0	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___ham_groupalloc_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___ham_groupalloc_read	function
,	O
0	int
)	O
;	O
pgno	int
=	O
PGNO_BASE_MD	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
mmeta	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
else	O
{	O
ret	int
=	O
0	int
;	O
goto	O
done	O
;	O
}	O
}	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
mmeta	pointer
->	O
alloc_lsn	struct
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
mmeta	pointer
->	O
alloc_lsn	struct
,	O
&	O
argp	pointer
->	O
alloc_lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
mmeta	pointer
->	O
alloc_lsn	struct
,	O
&	O
argp	pointer
->	O
alloc_lsn	struct
)	O
;	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
__ham_alloc_pages	function
(	O
file_dbp	pointer
,	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out1	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
)	O
{	O
mmeta	pointer
->	O
alloc_lsn	struct
=	O
*	O
lsnp	pointer
;	O
if	O
(	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
mmeta	pointer
)	O
,	O
&	O
argp	pointer
->	O
meta_lsn	struct
)	O
==	O
0	int
)	O
LSN	O
(	O
mmeta	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
cmp_n	int
!=	O
0	int
||	O
(	O
mmeta	pointer
->	O
free	int
>=	O
argp	pointer
->	O
start_pgno	int
&&	O
mmeta	pointer
->	O
free	int
<	O
argp	pointer
->	O
start_pgno	int
+	O
argp	pointer
->	O
num	int
)	O
)	O
mmeta	pointer
->	O
free	int
=	O
argp	pointer
->	O
free	int
;	O
if	O
(	O
(	O
ret	int
=	O
__ham_free_pages	function
(	O
file_dbp	pointer
,	O
mmeta	pointer
,	O
argp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out1	O
;	O
mmeta	pointer
->	O
alloc_lsn	struct
=	O
argp	pointer
->	O
alloc_lsn	struct
;	O
if	O
(	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
mmeta	pointer
)	O
)	O
==	O
0	int
)	O
LSN	O
(	O
mmeta	pointer
)	O
=	O
argp	pointer
->	O
meta_lsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
out1	O
:	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
mmeta	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
if	O
(	O
ret	int
==	O
0	int
)	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
static	O
int	O
__ham_free_pages	function
(	O
dbp	pointer
,	O
mmeta	pointer
,	O
argp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
DBMETA	struct
*	O
mmeta	pointer
;	O
__ham_groupalloc_args	struct
*	O
argp	pointer
;	O
{	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
u_int32_t	int
i	int
;	O
db_pgno_t	int
last_free	int
,	O
pgno	int
;	O
int	O
ret	int
;	O
mpf	pointer
=	O
dbp	pointer
->	O
mpf	pointer
;	O
last_free	int
=	O
mmeta	pointer
->	O
free	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argp	pointer
->	O
num	int
;	O
i	int
++	O
,	O
last_free	int
=	O
pgno	int
)	O
{	O
pgno	int
=	O
argp	pointer
->	O
start_pgno	int
+	O
i	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
dbp	pointer
,	O
pgno	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
P_INIT	O
(	O
pagep	pointer
,	O
dbp	pointer
->	O
pgsize	int
,	O
pgno	int
,	O
PGNO_INVALID	int
,	O
last_free	int
,	O
0	int
,	O
P_INVALID	int
,	O
0	int
)	O
;	O
ZERO_LSN	O
(	O
pagep	pointer
->	O
lsn	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
mmeta	pointer
->	O
free	int
=	O
last_free	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__ham_alloc_pages	function
(	O
dbp	pointer
,	O
argp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
__ham_groupalloc_args	struct
*	O
argp	pointer
;	O
{	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
db_pgno_t	int
pgno	int
;	O
int	O
ret	int
;	O
mpf	pointer
=	O
dbp	pointer
->	O
mpf	pointer
;	O
pgno	int
=	O
argp	pointer
->	O
start_pgno	int
+	O
argp	pointer
->	O
num	int
-	O
1	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
(	O
TYPE	O
(	O
pagep	pointer
)	O
==	O
P_INVALID	int
)	O
&&	O
IS_ZERO_LSN	O
(	O
pagep	pointer
->	O
lsn	struct
)	O
)	O
goto	O
reinit_page	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_fpinit	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
&	O
mpf	pointer
->	O
fh	struct
,	O
argp	pointer
->	O
start_pgno	int
,	O
argp	pointer
->	O
num	int
,	O
dbp	pointer
->	O
pgsize	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
dbp	pointer
,	O
pgno	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
reinit_page	O
:	O
P_INIT	O
(	O
pagep	pointer
,	O
dbp	pointer
->	O
pgsize	int
,	O
pgno	int
,	O
PGNO_INVALID	int
,	O
PGNO_INVALID	int
,	O
0	int
,	O
P_HASH	int
,	O
0	int
)	O
;	O
ZERO_LSN	O
(	O
pagep	pointer
->	O
lsn	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
