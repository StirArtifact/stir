static	O
unsigned	O
char	O
pdu_family	array
[	O
256	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
6	int
,	O
6	int
,	O
4	int
,	O
4	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
}	O
;	O
static	O
int	O
protocol_version	char
=	O
DISProtocolVersionIEEE1278_95	int
;	O
int	O
DISxSetProtocolVersion	function
(	O
int	O
version	int
)	O
{	O
int	O
result	char
=	O
protocol_version	char
;	O
protocol_version	char
=	O
version	int
;	O
return	O
result	char
;	O
}	O
int	O
DISxSetPDUProtocolFamily	function
(	O
int	O
pdu_type	char
,	O
int	O
protocol_family	char
)	O
{	O
int	O
result	char
;	O
if	O
(	O
pdu_type	char
<	O
0	int
||	O
pdu_type	char
>	O
255	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
result	char
=	O
pdu_family	array
[	O
pdu_type	char
]	O
;	O
pdu_family	array
[	O
pdu_type	char
]	O
=	O
protocol_family	char
;	O
return	O
result	char
;	O
}	O
int	O
DISxPortNumber	int
=	O
-	O
1	int
;	O
DISxApplicationInfo	struct
*	O
DISxInitializeApplication	function
(	O
unsigned	O
int	O
exercise_id	char
,	O
unsigned	O
int	O
site_id	short
,	O
unsigned	O
int	O
application_id	short
)	O
{	O
char	O
name	short
[	O
64	int
]	O
;	O
int	O
result	char
;	O
DISxApplicationInfo	struct
*	O
p	pointer
=	O
(	O
DISxApplicationInfo	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
DISxApplicationInfo	struct
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
return	O
p	pointer
;	O
}	O
p	pointer
->	O
hdr	struct
.	O
protocol_version	char
=	O
protocol_version	char
;	O
p	pointer
->	O
hdr	struct
.	O
exercise_id	char
=	O
exercise_id	char
;	O
p	pointer
->	O
hdr	struct
.	O
padding	short
=	O
0	int
;	O
p	pointer
->	O
last_event	short
=	O
0	int
;	O
p	pointer
->	O
last_entity	short
=	O
0	int
;	O
p	pointer
->	O
last_request	short
=	O
0	int
;	O
p	pointer
->	O
xcvr	pointer
=	O
DISOpenTransceiver	function
(	O
DISxPortNumber	int
)	O
;	O
if	O
(	O
!	O
p	pointer
->	O
xcvr	pointer
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
DISSetNBIOState	function
(	O
p	pointer
->	O
xcvr	pointer
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
site_id	short
!=	O
0	int
&&	O
application_id	short
!=	O
0	int
)	O
{	O
p	pointer
->	O
id	char
.	O
site_id	short
=	O
site_id	short
;	O
p	pointer
->	O
id	char
.	O
application_id	short
=	O
application_id	short
;	O
result	char
=	O
SIMx_SUCCESS	int
;	O
}	O
else	O
{	O
if	O
(	O
site_id	short
==	O
0	int
)	O
{	O
SIMxGetSiteName	function
(	O
name	short
,	O
sizeof	O
(	O
name	short
)	O
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
name	short
,	O
"0x%x"	pointer
,	O
site_id	short
)	O
;	O
}	O
result	char
=	O
SIMxRegisterApplication	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
name	short
,	O
application_id	short
,	O
&	O
p	pointer
->	O
id	char
)	O
;	O
}	O
return	O
(	O
result	char
==	O
SIMx_SUCCESS	int
)	O
?	O
p	pointer
:	O
NULL	O
;	O
}	O
void	O
DISxGetSimulationAddress	function
(	O
DISxApplicationInfo	struct
*	O
info	pointer
,	O
dis_simulation_addr	struct
*	O
p	pointer
)	O
{	O
*	O
p	pointer
=	O
info	pointer
->	O
id	char
;	O
}	O
void	O
DISxSetExerciseID	function
(	O
DISxApplicationInfo	struct
*	O
info	pointer
,	O
int	O
id	char
)	O
{	O
info	pointer
->	O
hdr	struct
.	O
exercise_id	char
=	O
id	char
;	O
}	O
int	O
DISxWritePDU	function
(	O
DISxApplicationInfo	struct
*	O
info	pointer
,	O
dis_pdu	union
*	O
p	pointer
)	O
{	O
p	pointer
->	O
hdr	struct
.	O
protocol_version	char
=	O
info	pointer
->	O
hdr	struct
.	O
protocol_version	char
;	O
p	pointer
->	O
hdr	struct
.	O
exercise_id	char
=	O
info	pointer
->	O
hdr	struct
.	O
exercise_id	char
;	O
p	pointer
->	O
hdr	struct
.	O
protocol_family	char
=	O
pdu_family	array
[	O
p	pointer
->	O
hdr	struct
.	O
pdu_type	char
]	O
;	O
return	O
DISWritePDU	function
(	O
info	pointer
->	O
xcvr	pointer
,	O
p	pointer
)	O
;	O
}	O
int	O
DISxReadPDU	function
(	O
DISxApplicationInfo	struct
*	O
info	pointer
,	O
dis_pdu	union
*	O
p	pointer
)	O
{	O
return	O
DISReadPDU	function
(	O
info	pointer
->	O
xcvr	pointer
,	O
p	pointer
)	O
;	O
}	O
void	O
DISxCloseApplication	function
(	O
DISxApplicationInfo	struct
*	O
info	pointer
)	O
{	O
DISCloseTransceiver	function
(	O
info	pointer
->	O
xcvr	pointer
)	O
;	O
free	function
(	O
info	pointer
)	O
;	O
}	O
dis_request_id	long
DISxIssueRequestID	function
(	O
DISxApplicationInfo	struct
*	O
info	pointer
)	O
{	O
dis_request_id	long
result	char
;	O
result	char
=	O
++	O
info	pointer
->	O
last_request	short
;	O
if	O
(	O
info	pointer
->	O
last_request	short
==	O
0xfffffff	int
)	O
{	O
info	pointer
->	O
last_request	short
=	O
0	int
;	O
}	O
return	O
result	char
;	O
}	O
