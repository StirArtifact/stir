local	O
uLong	long
adler32_combine_	function
OF	O
(	O
(	O
uLong	long
adler1	long
,	O
uLong	long
adler2	long
,	O
z_off64_t	O
len2	long
)	O
)	O
;	O
uLong	long
ZEXPORT	O
adler32_z	function
(	O
adler	long
,	O
buf	pointer
,	O
len	int
)	O
uLong	long
adler	long
;	O
const	O
Bytef	char
*	O
buf	pointer
;	O
z_size_t	long
len	int
;	O
{	O
unsigned	O
long	O
sum2	long
;	O
unsigned	O
n	int
;	O
sum2	long
=	O
(	O
adler	long
>>	O
16	int
)	O
&	O
0xffff	int
;	O
adler	long
&=	O
0xffff	int
;	O
if	O
(	O
len	int
==	O
1	int
)	O
{	O
adler	long
+=	O
buf	pointer
[	O
0	int
]	O
;	O
if	O
(	O
adler	long
>=	O
BASE	int
)	O
adler	long
-=	O
BASE	int
;	O
sum2	long
+=	O
adler	long
;	O
if	O
(	O
sum2	long
>=	O
BASE	int
)	O
sum2	long
-=	O
BASE	int
;	O
return	O
adler	long
|	O
(	O
sum2	long
<<	O
16	int
)	O
;	O
}	O
if	O
(	O
buf	pointer
==	O
Z_NULL	int
)	O
return	O
1L	int
;	O
if	O
(	O
len	int
<	O
16	int
)	O
{	O
while	O
(	O
len	int
--	O
)	O
{	O
adler	long
+=	O
*	O
buf	pointer
++	O
;	O
sum2	long
+=	O
adler	long
;	O
}	O
if	O
(	O
adler	long
>=	O
BASE	int
)	O
adler	long
-=	O
BASE	int
;	O
MOD28	O
(	O
sum2	long
)	O
;	O
return	O
adler	long
|	O
(	O
sum2	long
<<	O
16	int
)	O
;	O
}	O
while	O
(	O
len	int
>=	O
NMAX	int
)	O
{	O
len	int
-=	O
NMAX	int
;	O
n	int
=	O
NMAX	int
/	O
16	int
;	O
do	O
{	O
DO16	O
(	O
buf	pointer
)	O
;	O
buf	pointer
+=	O
16	int
;	O
}	O
while	O
(	O
--	O
n	int
)	O
;	O
MOD	O
(	O
adler	long
)	O
;	O
MOD	O
(	O
sum2	long
)	O
;	O
}	O
if	O
(	O
len	int
)	O
{	O
while	O
(	O
len	int
>=	O
16	int
)	O
{	O
len	int
-=	O
16	int
;	O
DO16	O
(	O
buf	pointer
)	O
;	O
buf	pointer
+=	O
16	int
;	O
}	O
while	O
(	O
len	int
--	O
)	O
{	O
adler	long
+=	O
*	O
buf	pointer
++	O
;	O
sum2	long
+=	O
adler	long
;	O
}	O
MOD	O
(	O
adler	long
)	O
;	O
MOD	O
(	O
sum2	long
)	O
;	O
}	O
return	O
adler	long
|	O
(	O
sum2	long
<<	O
16	int
)	O
;	O
}	O
uLong	long
ZEXPORT	O
adler32	function
(	O
adler	long
,	O
buf	pointer
,	O
len	int
)	O
uLong	long
adler	long
;	O
const	O
Bytef	char
*	O
buf	pointer
;	O
uInt	int
len	int
;	O
{	O
return	O
adler32_z	function
(	O
adler	long
,	O
buf	pointer
,	O
len	int
)	O
;	O
}	O
local	O
uLong	long
adler32_combine_	function
(	O
adler1	long
,	O
adler2	long
,	O
len2	long
)	O
uLong	long
adler1	long
;	O
uLong	long
adler2	long
;	O
z_off64_t	O
len2	long
;	O
{	O
unsigned	O
long	O
sum1	long
;	O
unsigned	O
long	O
sum2	long
;	O
unsigned	O
rem	int
;	O
if	O
(	O
len2	long
<	O
0	int
)	O
return	O
0xffffffffUL	int
;	O
MOD63	O
(	O
len2	long
)	O
;	O
rem	int
=	O
(	O
unsigned	O
)	O
len2	long
;	O
sum1	long
=	O
adler1	long
&	O
0xffff	int
;	O
sum2	long
=	O
rem	int
*	O
sum1	long
;	O
MOD	O
(	O
sum2	long
)	O
;	O
sum1	long
+=	O
(	O
adler2	long
&	O
0xffff	int
)	O
+	O
BASE	int
-	O
1	int
;	O
sum2	long
+=	O
(	O
(	O
adler1	long
>>	O
16	int
)	O
&	O
0xffff	int
)	O
+	O
(	O
(	O
adler2	long
>>	O
16	int
)	O
&	O
0xffff	int
)	O
+	O
BASE	int
-	O
rem	int
;	O
if	O
(	O
sum1	long
>=	O
BASE	int
)	O
sum1	long
-=	O
BASE	int
;	O
if	O
(	O
sum1	long
>=	O
BASE	int
)	O
sum1	long
-=	O
BASE	int
;	O
if	O
(	O
sum2	long
>=	O
(	O
(	O
unsigned	O
long	O
)	O
BASE	int
<<	O
1	int
)	O
)	O
sum2	long
-=	O
(	O
(	O
unsigned	O
long	O
)	O
BASE	int
<<	O
1	int
)	O
;	O
if	O
(	O
sum2	long
>=	O
BASE	int
)	O
sum2	long
-=	O
BASE	int
;	O
return	O
sum1	long
|	O
(	O
sum2	long
<<	O
16	int
)	O
;	O
}	O
uLong	long
ZEXPORT	O
adler32_combine	function
(	O
adler1	long
,	O
adler2	long
,	O
len2	long
)	O
uLong	long
adler1	long
;	O
uLong	long
adler2	long
;	O
z_off_t	O
len2	long
;	O
{	O
return	O
adler32_combine_	function
(	O
adler1	long
,	O
adler2	long
,	O
len2	long
)	O
;	O
}	O
uLong	long
ZEXPORT	O
adler32_combine64	function
(	O
adler1	long
,	O
adler2	long
,	O
len2	long
)	O
uLong	long
adler1	long
;	O
uLong	long
adler2	long
;	O
z_off64_t	O
len2	long
;	O
{	O
return	O
adler32_combine_	function
(	O
adler1	long
,	O
adler2	long
,	O
len2	long
)	O
;	O
}	O
