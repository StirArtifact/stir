struct	O
tree_print	struct
{	O
int	O
flags	int
;	O
unsigned	O
level	int
;	O
mu_stream_t	pointer
stream	pointer
;	O
char	O
*	O
buf	pointer
;	O
size_t	long
bufsize	long
;	O
}	O
;	O
static	O
void	O
format_level	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
level	int
)	O
{	O
while	O
(	O
level	int
--	O
)	O
mu_stream_write	function
(	O
stream	pointer
,	O
"  "	pointer
,	O
2	int
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
format_string_value	function
(	O
struct	O
tree_print	struct
*	O
tp	pointer
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
size_t	long
size	long
;	O
int	O
quote	pointer
;	O
char	O
*	O
p	pointer
;	O
size	long
=	O
mu_wordsplit_c_quoted_length	function
(	O
str	pointer
,	O
1	int
,	O
&	O
quote	pointer
)	O
;	O
if	O
(	O
quote	pointer
)	O
size	long
+=	O
2	int
;	O
size	long
++	O
;	O
if	O
(	O
size	long
>	O
tp	pointer
->	O
bufsize	long
)	O
{	O
p	pointer
=	O
mu_realloc	function
(	O
tp	pointer
->	O
buf	pointer
,	O
size	long
)	O
;	O
tp	pointer
->	O
bufsize	long
=	O
size	long
;	O
tp	pointer
->	O
buf	pointer
=	O
p	pointer
;	O
}	O
p	pointer
=	O
tp	pointer
->	O
buf	pointer
;	O
if	O
(	O
quote	pointer
)	O
{	O
tp	pointer
->	O
buf	pointer
[	O
0	int
]	O
=	O
'"'	O
;	O
tp	pointer
->	O
buf	pointer
[	O
size	long
-	O
2	int
]	O
=	O
'"'	O
;	O
p	pointer
++	O
;	O
}	O
tp	pointer
->	O
buf	pointer
[	O
size	long
-	O
1	int
]	O
=	O
0	int
;	O
mu_wordsplit_c_quote_copy	function
(	O
p	pointer
,	O
str	pointer
,	O
1	int
)	O
;	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
tp	pointer
->	O
buf	pointer
,	O
size	long
-	O
1	int
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
format_value	function
(	O
struct	O
tree_print	struct
*	O
tp	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
;	O
static	O
void	O
format_list_value	function
(	O
struct	O
tree_print	struct
*	O
tp	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
i	int
;	O
mu_iterator_t	pointer
itr	pointer
;	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
"("	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_list_get_iterator	function
(	O
val	array
->	O
v	pointer
.	O
list	pointer
,	O
&	O
itr	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
,	O
i	int
=	O
0	int
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
,	O
i	int
++	O
)	O
{	O
mu_config_value_t	struct
*	O
p	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
p	pointer
)	O
;	O
if	O
(	O
i	int
)	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
", "	pointer
,	O
2	int
,	O
NULL	O
)	O
;	O
format_value	function
(	O
tp	pointer
,	O
p	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
")"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
format_array_value	function
(	O
struct	O
tree_print	struct
*	O
tp	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
val	array
->	O
v	pointer
.	O
arg	pointer
.	O
c	char
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
)	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
" "	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
format_value	function
(	O
tp	pointer
,	O
&	O
val	array
->	O
v	pointer
.	O
arg	pointer
.	O
v	pointer
[	O
i	int
]	O
)	O
;	O
}	O
}	O
static	O
void	O
format_value	function
(	O
struct	O
tree_print	struct
*	O
tp	pointer
,	O
mu_config_value_t	struct
*	O
val	array
)	O
{	O
switch	O
(	O
val	array
->	O
type	int
)	O
{	O
case	O
MU_CFG_STRING	int
:	O
format_string_value	function
(	O
tp	pointer
,	O
val	array
->	O
v	pointer
.	O
string	pointer
)	O
;	O
break	O
;	O
case	O
MU_CFG_LIST	int
:	O
format_list_value	function
(	O
tp	pointer
,	O
val	array
)	O
;	O
break	O
;	O
case	O
MU_CFG_ARRAY	int
:	O
format_array_value	function
(	O
tp	pointer
,	O
val	array
)	O
;	O
}	O
}	O
static	O
void	O
format_path	function
(	O
struct	O
tree_print	struct
*	O
tp	pointer
,	O
const	O
mu_cfg_node_t	struct
*	O
node	pointer
,	O
int	O
delim	int
)	O
{	O
char	O
c	char
;	O
if	O
(	O
node	pointer
->	O
parent	pointer
)	O
format_path	function
(	O
tp	pointer
,	O
node	pointer
->	O
parent	pointer
,	O
MU_CFG_PATH_DELIM	char
)	O
;	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
node	pointer
->	O
tag	pointer
,	O
strlen	function
(	O
node	pointer
->	O
tag	pointer
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
node	pointer
->	O
type	int
==	O
mu_cfg_node_statement	int
&&	O
node	pointer
->	O
label	pointer
)	O
{	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
"=\""	pointer
,	O
2	int
,	O
NULL	O
)	O
;	O
format_value	function
(	O
tp	pointer
,	O
node	pointer
->	O
label	pointer
)	O
;	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
"\""	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
c	char
=	O
delim	int
;	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
&	O
c	char
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
format_node	function
(	O
const	O
mu_cfg_node_t	struct
*	O
node	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
tree_print	struct
*	O
tp	pointer
=	O
data	pointer
;	O
if	O
(	O
(	O
tp	pointer
->	O
flags	int
&	O
MU_CF_FMT_LOCUS	int
)	O
&&	O
node	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_file	pointer
)	O
mu_stream_printf	function
(	O
tp	pointer
->	O
stream	pointer
,	O
"# %lu \"%s\"\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
node	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_line	int
,	O
node	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_file	pointer
)	O
;	O
format_level	function
(	O
tp	pointer
->	O
stream	pointer
,	O
tp	pointer
->	O
level	int
)	O
;	O
switch	O
(	O
node	pointer
->	O
type	int
)	O
{	O
case	O
mu_cfg_node_undefined	int
:	O
mu_stream_printf	function
(	O
tp	pointer
->	O
stream	pointer
,	O
"%s"	pointer
,	O
_	O
(	O
"ERROR: undefined statement"	pointer
)	O
)	O
;	O
break	O
;	O
case	O
mu_cfg_node_statement	int
:	O
if	O
(	O
tp	pointer
->	O
flags	int
&	O
MU_CF_FMT_PARAM_PATH	int
)	O
return	O
MU_CFG_ITER_OK	int
;	O
else	O
{	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
node	pointer
->	O
tag	pointer
,	O
strlen	function
(	O
node	pointer
->	O
tag	pointer
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
node	pointer
->	O
label	pointer
)	O
{	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
" "	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
format_value	function
(	O
tp	pointer
,	O
node	pointer
->	O
label	pointer
)	O
;	O
}	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
" {"	pointer
,	O
2	int
,	O
NULL	O
)	O
;	O
tp	pointer
->	O
level	int
++	O
;	O
}	O
break	O
;	O
case	O
mu_cfg_node_param	int
:	O
if	O
(	O
tp	pointer
->	O
flags	int
&	O
MU_CF_FMT_VALUE_ONLY	int
)	O
format_value	function
(	O
tp	pointer
,	O
node	pointer
->	O
label	pointer
)	O
;	O
else	O
if	O
(	O
tp	pointer
->	O
flags	int
&	O
MU_CF_FMT_PARAM_PATH	int
)	O
{	O
format_path	function
(	O
tp	pointer
,	O
node	pointer
,	O
':'	O
)	O
;	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
" "	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
format_value	function
(	O
tp	pointer
,	O
node	pointer
->	O
label	pointer
)	O
;	O
}	O
else	O
{	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
node	pointer
->	O
tag	pointer
,	O
strlen	function
(	O
node	pointer
->	O
tag	pointer
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
node	pointer
->	O
label	pointer
)	O
{	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
" "	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
format_value	function
(	O
tp	pointer
,	O
node	pointer
->	O
label	pointer
)	O
;	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
";"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
}	O
break	O
;	O
}	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
return	O
MU_CFG_ITER_OK	int
;	O
}	O
static	O
int	O
format_node_end	function
(	O
const	O
mu_cfg_node_t	struct
*	O
node	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
tree_print	struct
*	O
tp	pointer
=	O
data	pointer
;	O
if	O
(	O
!	O
(	O
tp	pointer
->	O
flags	int
&	O
MU_CF_FMT_PARAM_PATH	int
)	O
)	O
{	O
tp	pointer
->	O
level	int
--	O
;	O
format_level	function
(	O
tp	pointer
->	O
stream	pointer
,	O
tp	pointer
->	O
level	int
)	O
;	O
mu_stream_write	function
(	O
tp	pointer
->	O
stream	pointer
,	O
"};\n"	pointer
,	O
3	int
,	O
NULL	O
)	O
;	O
}	O
return	O
MU_CFG_ITER_OK	int
;	O
}	O
void	O
mu_cfg_format_parse_tree	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
mu_cfg_tree_t	struct
*	O
tree	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
mu_cfg_iter_closure	struct
clos	pointer
;	O
struct	O
tree_print	struct
t	struct
;	O
t	struct
.	O
flags	int
=	O
flags	int
;	O
t	struct
.	O
level	int
=	O
0	int
;	O
t	struct
.	O
stream	pointer
=	O
stream	pointer
;	O
t	struct
.	O
buf	pointer
=	O
NULL	O
;	O
t	struct
.	O
bufsize	long
=	O
0	int
;	O
clos	pointer
.	O
beg	struct
=	O
format_node	function
;	O
clos	pointer
.	O
end	long
=	O
format_node_end	function
;	O
clos	pointer
.	O
data	pointer
=	O
&	O
t	struct
;	O
mu_cfg_preorder	function
(	O
tree	pointer
->	O
nodes	pointer
,	O
&	O
clos	pointer
)	O
;	O
free	function
(	O
t	struct
.	O
buf	pointer
)	O
;	O
}	O
void	O
mu_cfg_format_node	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
mu_cfg_node_t	struct
*	O
node	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
tree_print	struct
t	struct
;	O
if	O
(	O
node	pointer
->	O
type	int
==	O
mu_cfg_node_statement	int
)	O
flags	int
&=	O
~	O
MU_CF_FMT_VALUE_ONLY	int
;	O
t	struct
.	O
flags	int
=	O
flags	int
;	O
t	struct
.	O
level	int
=	O
0	int
;	O
t	struct
.	O
stream	pointer
=	O
stream	pointer
;	O
t	struct
.	O
buf	pointer
=	O
NULL	O
;	O
t	struct
.	O
bufsize	long
=	O
0	int
;	O
format_node	function
(	O
node	pointer
,	O
&	O
t	struct
)	O
;	O
if	O
(	O
node	pointer
->	O
type	int
==	O
mu_cfg_node_statement	int
)	O
{	O
struct	O
mu_cfg_iter_closure	struct
clos	pointer
;	O
clos	pointer
.	O
beg	struct
=	O
format_node	function
;	O
clos	pointer
.	O
end	long
=	O
format_node_end	function
;	O
clos	pointer
.	O
data	pointer
=	O
&	O
t	struct
;	O
mu_cfg_preorder	function
(	O
node	pointer
->	O
nodes	pointer
,	O
&	O
clos	pointer
)	O
;	O
format_node_end	function
(	O
node	pointer
,	O
&	O
t	struct
)	O
;	O
}	O
}	O
const	O
char	O
*	O
mu_c_type_string	function
(	O
int	O
type	int
)	O
{	O
switch	O
(	O
type	int
)	O
{	O
case	O
mu_c_string	int
:	O
return	O
N_	O
(	O
"string"	pointer
)	O
;	O
case	O
mu_c_short	int
:	O
case	O
mu_c_ushort	int
:	O
case	O
mu_c_int	int
:	O
case	O
mu_c_uint	int
:	O
case	O
mu_c_long	int
:	O
case	O
mu_c_ulong	int
:	O
case	O
mu_c_size	int
:	O
case	O
mu_c_off	int
:	O
case	O
mu_c_incr	int
:	O
return	O
N_	O
(	O
"number"	pointer
)	O
;	O
case	O
mu_c_time	int
:	O
return	O
N_	O
(	O
"time"	pointer
)	O
;	O
case	O
mu_c_bool	int
:	O
return	O
N_	O
(	O
"boolean"	pointer
)	O
;	O
case	O
mu_c_ipv4	int
:	O
return	O
N_	O
(	O
"ipv4"	pointer
)	O
;	O
case	O
mu_c_cidr	int
:	O
return	O
N_	O
(	O
"cidr"	pointer
)	O
;	O
case	O
mu_c_host	int
:	O
return	O
N_	O
(	O
"host"	pointer
)	O
;	O
case	O
mu_cfg_section	int
:	O
return	O
N_	O
(	O
"section"	pointer
)	O
;	O
case	O
mu_cfg_callback	int
:	O
return	O
N_	O
(	O
"callback"	pointer
)	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
N_	O
(	O
"unknown"	pointer
)	O
;	O
}	O
void	O
mu_cfg_format_docstring	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
char	O
*	O
docstring	pointer
,	O
int	O
level	int
)	O
{	O
size_t	long
len	int
=	O
strlen	function
(	O
docstring	pointer
)	O
;	O
int	O
width	int
=	O
78	int
-	O
level	int
*	O
2	int
;	O
if	O
(	O
width	int
<	O
0	int
)	O
{	O
width	int
=	O
78	int
;	O
level	int
=	O
0	int
;	O
}	O
while	O
(	O
len	int
)	O
{	O
size_t	long
seglen	long
;	O
const	O
char	O
*	O
p	pointer
;	O
for	O
(	O
seglen	long
=	O
0	int
,	O
p	pointer
=	O
docstring	pointer
;	O
p	pointer
<	O
docstring	pointer
+	O
width	int
&&	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\n'	O
)	O
{	O
seglen	long
=	O
p	pointer
-	O
docstring	pointer
;	O
break	O
;	O
}	O
if	O
(	O
isspace	function
(	O
*	O
p	pointer
)	O
)	O
seglen	long
=	O
p	pointer
-	O
docstring	pointer
;	O
}	O
if	O
(	O
seglen	long
==	O
0	int
||	O
*	O
p	pointer
==	O
0	int
)	O
seglen	long
=	O
p	pointer
-	O
docstring	pointer
;	O
format_level	function
(	O
stream	pointer
,	O
level	int
)	O
;	O
mu_stream_write	function
(	O
stream	pointer
,	O
"# "	pointer
,	O
2	int
,	O
NULL	O
)	O
;	O
mu_stream_write	function
(	O
stream	pointer
,	O
docstring	pointer
,	O
seglen	long
,	O
NULL	O
)	O
;	O
mu_stream_write	function
(	O
stream	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
len	int
-=	O
seglen	long
;	O
docstring	pointer
+=	O
seglen	long
;	O
if	O
(	O
*	O
docstring	pointer
==	O
'\n'	O
)	O
{	O
docstring	pointer
++	O
;	O
len	int
--	O
;	O
}	O
else	O
while	O
(	O
*	O
docstring	pointer
&&	O
isspace	function
(	O
*	O
docstring	pointer
)	O
)	O
{	O
docstring	pointer
++	O
;	O
len	int
--	O
;	O
}	O
}	O
}	O
static	O
void	O
format_param	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
struct	O
mu_cfg_param	struct
*	O
param	pointer
,	O
int	O
level	int
)	O
{	O
if	O
(	O
param	pointer
->	O
docstring	pointer
)	O
mu_cfg_format_docstring	function
(	O
stream	pointer
,	O
gettext	function
(	O
param	pointer
->	O
docstring	pointer
)	O
,	O
level	int
)	O
;	O
format_level	function
(	O
stream	pointer
,	O
level	int
)	O
;	O
if	O
(	O
param	pointer
->	O
argname	pointer
&&	O
strchr	function
(	O
param	pointer
->	O
argname	pointer
,	O
':'	O
)	O
)	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"%s <%s>;\n"	pointer
,	O
param	pointer
->	O
ident	pointer
,	O
gettext	function
(	O
param	pointer
->	O
argname	pointer
)	O
)	O
;	O
else	O
if	O
(	O
MU_CFG_IS_LIST	O
(	O
param	pointer
->	O
type	int
)	O
)	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"%s <%s: list of %s>;\n"	pointer
,	O
param	pointer
->	O
ident	pointer
,	O
gettext	function
(	O
param	pointer
->	O
argname	pointer
?	O
param	pointer
->	O
argname	pointer
:	O
N_	O
(	O
"arg"	pointer
)	O
)	O
,	O
gettext	function
(	O
mu_c_type_string	function
(	O
MU_CFG_TYPE	O
(	O
param	pointer
->	O
type	int
)	O
)	O
)	O
)	O
;	O
else	O
mu_stream_printf	function
(	O
stream	pointer
,	O
"%s <%s: %s>;\n"	pointer
,	O
param	pointer
->	O
ident	pointer
,	O
gettext	function
(	O
param	pointer
->	O
argname	pointer
?	O
param	pointer
->	O
argname	pointer
:	O
N_	O
(	O
"arg"	pointer
)	O
)	O
,	O
gettext	function
(	O
mu_c_type_string	function
(	O
param	pointer
->	O
type	int
)	O
)	O
)	O
;	O
}	O
static	O
void	O
format_container	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
struct	O
mu_cfg_cont	struct
*	O
cont	pointer
,	O
int	O
level	int
)	O
;	O
static	O
int	O
_f_helper	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
tree_print	struct
*	O
tp	pointer
=	O
data	pointer
;	O
struct	O
mu_cfg_cont	struct
*	O
cont	pointer
=	O
item	pointer
;	O
format_container	function
(	O
tp	pointer
->	O
stream	pointer
,	O
cont	pointer
,	O
tp	pointer
->	O
level	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
format_section	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
struct	O
mu_cfg_section	int
*	O
sect	pointer
,	O
int	O
level	int
)	O
{	O
struct	O
tree_print	struct
c	char
;	O
if	O
(	O
sect	pointer
->	O
docstring	pointer
)	O
mu_cfg_format_docstring	function
(	O
stream	pointer
,	O
gettext	function
(	O
sect	pointer
->	O
docstring	pointer
)	O
,	O
level	int
)	O
;	O
format_level	function
(	O
stream	pointer
,	O
level	int
)	O
;	O
if	O
(	O
sect	pointer
->	O
ident	pointer
)	O
{	O
mu_stream_write	function
(	O
stream	pointer
,	O
sect	pointer
->	O
ident	pointer
,	O
strlen	function
(	O
sect	pointer
->	O
ident	pointer
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
sect	pointer
->	O
label	pointer
)	O
{	O
mu_stream_write	function
(	O
stream	pointer
,	O
" "	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_write	function
(	O
stream	pointer
,	O
sect	pointer
->	O
label	pointer
,	O
strlen	function
(	O
sect	pointer
->	O
label	pointer
)	O
,	O
NULL	O
)	O
;	O
}	O
mu_stream_write	function
(	O
stream	pointer
,	O
" {\n"	pointer
,	O
3	int
,	O
NULL	O
)	O
;	O
c	char
.	O
stream	pointer
=	O
stream	pointer
;	O
c	char
.	O
level	int
=	O
level	int
+	O
1	int
;	O
mu_list_foreach	function
(	O
sect	pointer
->	O
children	pointer
,	O
_f_helper	function
,	O
&	O
c	char
)	O
;	O
format_level	function
(	O
stream	pointer
,	O
level	int
)	O
;	O
mu_stream_write	function
(	O
stream	pointer
,	O
"};\n\n"	pointer
,	O
4	int
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
c	char
.	O
stream	pointer
=	O
stream	pointer
;	O
c	char
.	O
level	int
=	O
level	int
;	O
mu_list_foreach	function
(	O
sect	pointer
->	O
children	pointer
,	O
_f_helper	function
,	O
&	O
c	char
)	O
;	O
}	O
}	O
static	O
void	O
format_container	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
struct	O
mu_cfg_cont	struct
*	O
cont	pointer
,	O
int	O
level	int
)	O
{	O
switch	O
(	O
cont	pointer
->	O
type	int
)	O
{	O
case	O
mu_cfg_cont_section	int
:	O
format_section	function
(	O
stream	pointer
,	O
&	O
cont	pointer
->	O
v	pointer
.	O
section	struct
,	O
level	int
)	O
;	O
break	O
;	O
case	O
mu_cfg_cont_param	int
:	O
format_param	function
(	O
stream	pointer
,	O
&	O
cont	pointer
->	O
v	pointer
.	O
param	pointer
,	O
level	int
)	O
;	O
break	O
;	O
}	O
}	O
void	O
mu_cfg_format_container	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
struct	O
mu_cfg_cont	struct
*	O
cont	pointer
)	O
{	O
format_container	function
(	O
stream	pointer
,	O
cont	pointer
,	O
0	int
)	O
;	O
}	O
