struct	O
elf_strtab_hash_entry	struct
{	O
struct	O
bfd_hash_entry	struct
root	struct
;	O
int	O
len	long
;	O
unsigned	O
int	O
refcount	int
;	O
union	O
{	O
bfd_size_type	long
index	function
;	O
struct	O
elf_strtab_hash_entry	struct
*	O
suffix	pointer
;	O
}	O
u	union
;	O
}	O
;	O
struct	O
elf_strtab_hash	struct
{	O
struct	O
bfd_hash_table	struct
table	pointer
;	O
size_t	long
size	long
;	O
size_t	long
alloced	long
;	O
bfd_size_type	long
sec_size	long
;	O
struct	O
elf_strtab_hash_entry	struct
*	O
*	O
array	pointer
;	O
}	O
;	O
static	O
struct	O
bfd_hash_entry	struct
*	O
elf_strtab_hash_newfunc	function
(	O
struct	O
bfd_hash_entry	struct
*	O
entry	pointer
,	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
)	O
{	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
entry	pointer
=	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
bfd_hash_allocate	function
(	O
table	pointer
,	O
sizeof	O
(	O
struct	O
elf_strtab_hash_entry	struct
)	O
)	O
;	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
entry	pointer
=	O
bfd_hash_newfunc	function
(	O
entry	pointer
,	O
table	pointer
,	O
string	pointer
)	O
;	O
if	O
(	O
entry	pointer
)	O
{	O
struct	O
elf_strtab_hash_entry	struct
*	O
ret	pointer
;	O
ret	pointer
=	O
(	O
struct	O
elf_strtab_hash_entry	struct
*	O
)	O
entry	pointer
;	O
ret	pointer
->	O
u	union
.	O
index	function
=	O
-	O
1	int
;	O
ret	pointer
->	O
refcount	int
=	O
0	int
;	O
ret	pointer
->	O
len	long
=	O
0	int
;	O
}	O
return	O
entry	pointer
;	O
}	O
struct	O
elf_strtab_hash	struct
*	O
_bfd_elf_strtab_init	function
(	O
void	O
)	O
{	O
struct	O
elf_strtab_hash	struct
*	O
table	pointer
;	O
bfd_size_type	long
amt	long
=	O
sizeof	O
(	O
struct	O
elf_strtab_hash	struct
)	O
;	O
table	pointer
=	O
(	O
struct	O
elf_strtab_hash	struct
*	O
)	O
bfd_malloc	function
(	O
amt	long
)	O
;	O
if	O
(	O
table	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
bfd_hash_table_init	function
(	O
&	O
table	pointer
->	O
table	pointer
,	O
elf_strtab_hash_newfunc	function
,	O
sizeof	O
(	O
struct	O
elf_strtab_hash_entry	struct
)	O
)	O
)	O
{	O
free	function
(	O
table	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
table	pointer
->	O
sec_size	long
=	O
0	int
;	O
table	pointer
->	O
size	long
=	O
1	int
;	O
table	pointer
->	O
alloced	long
=	O
64	int
;	O
amt	long
=	O
sizeof	O
(	O
struct	O
elf_strtab_hasn_entry	O
*	O
)	O
;	O
table	pointer
->	O
array	pointer
=	O
(	O
(	O
struct	O
elf_strtab_hash_entry	struct
*	O
*	O
)	O
bfd_malloc	function
(	O
table	pointer
->	O
alloced	long
*	O
amt	long
)	O
)	O
;	O
if	O
(	O
table	pointer
->	O
array	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
table	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
table	pointer
->	O
array	pointer
[	O
0	int
]	O
=	O
NULL	O
;	O
return	O
table	pointer
;	O
}	O
void	O
_bfd_elf_strtab_free	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
)	O
{	O
bfd_hash_table_free	function
(	O
&	O
tab	pointer
->	O
table	pointer
)	O
;	O
free	function
(	O
tab	pointer
->	O
array	pointer
)	O
;	O
free	function
(	O
tab	pointer
)	O
;	O
}	O
size_t	long
_bfd_elf_strtab_add	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
bfd_boolean	int
copy	int
)	O
{	O
register	O
struct	O
elf_strtab_hash_entry	struct
*	O
entry	pointer
;	O
if	O
(	O
*	O
str	pointer
==	O
'\0'	O
)	O
return	O
0	int
;	O
BFD_ASSERT	O
(	O
tab	pointer
->	O
sec_size	long
==	O
0	int
)	O
;	O
entry	pointer
=	O
(	O
struct	O
elf_strtab_hash_entry	struct
*	O
)	O
bfd_hash_lookup	function
(	O
&	O
tab	pointer
->	O
table	pointer
,	O
str	pointer
,	O
TRUE	int
,	O
copy	int
)	O
;	O
if	O
(	O
entry	pointer
==	O
NULL	O
)	O
return	O
(	O
size_t	long
)	O
-	O
1	int
;	O
entry	pointer
->	O
refcount	int
++	O
;	O
if	O
(	O
entry	pointer
->	O
len	long
==	O
0	int
)	O
{	O
entry	pointer
->	O
len	long
=	O
strlen	function
(	O
str	pointer
)	O
+	O
1	int
;	O
BFD_ASSERT	O
(	O
entry	pointer
->	O
len	long
>	O
0	int
)	O
;	O
if	O
(	O
tab	pointer
->	O
size	long
==	O
tab	pointer
->	O
alloced	long
)	O
{	O
bfd_size_type	long
amt	long
=	O
sizeof	O
(	O
struct	O
elf_strtab_hash_entry	struct
*	O
)	O
;	O
tab	pointer
->	O
alloced	long
*=	O
2	int
;	O
tab	pointer
->	O
array	pointer
=	O
(	O
struct	O
elf_strtab_hash_entry	struct
*	O
*	O
)	O
bfd_realloc_or_free	function
(	O
tab	pointer
->	O
array	pointer
,	O
tab	pointer
->	O
alloced	long
*	O
amt	long
)	O
;	O
if	O
(	O
tab	pointer
->	O
array	pointer
==	O
NULL	O
)	O
return	O
(	O
size_t	long
)	O
-	O
1	int
;	O
}	O
entry	pointer
->	O
u	union
.	O
index	function
=	O
tab	pointer
->	O
size	long
++	O
;	O
tab	pointer
->	O
array	pointer
[	O
entry	pointer
->	O
u	union
.	O
index	function
]	O
=	O
entry	pointer
;	O
}	O
return	O
entry	pointer
->	O
u	union
.	O
index	function
;	O
}	O
void	O
_bfd_elf_strtab_addref	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
,	O
size_t	long
idx	int
)	O
{	O
if	O
(	O
idx	int
==	O
0	int
||	O
idx	int
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
return	O
;	O
BFD_ASSERT	O
(	O
tab	pointer
->	O
sec_size	long
==	O
0	int
)	O
;	O
BFD_ASSERT	O
(	O
idx	int
<	O
tab	pointer
->	O
size	long
)	O
;	O
++	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
refcount	int
;	O
}	O
void	O
_bfd_elf_strtab_delref	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
,	O
size_t	long
idx	int
)	O
{	O
if	O
(	O
idx	int
==	O
0	int
||	O
idx	int
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
return	O
;	O
BFD_ASSERT	O
(	O
tab	pointer
->	O
sec_size	long
==	O
0	int
)	O
;	O
BFD_ASSERT	O
(	O
idx	int
<	O
tab	pointer
->	O
size	long
)	O
;	O
BFD_ASSERT	O
(	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
refcount	int
>	O
0	int
)	O
;	O
--	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
refcount	int
;	O
}	O
unsigned	O
int	O
_bfd_elf_strtab_refcount	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
,	O
size_t	long
idx	int
)	O
{	O
return	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
refcount	int
;	O
}	O
void	O
_bfd_elf_strtab_clear_all_refs	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
)	O
{	O
size_t	long
idx	int
;	O
for	O
(	O
idx	int
=	O
1	int
;	O
idx	int
<	O
tab	pointer
->	O
size	long
;	O
idx	int
++	O
)	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
refcount	int
=	O
0	int
;	O
}	O
struct	O
strtab_save	struct
{	O
size_t	long
size	long
;	O
unsigned	O
int	O
refcount	int
[	O
1	int
]	O
;	O
}	O
;	O
void	O
*	O
_bfd_elf_strtab_save	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
)	O
{	O
struct	O
strtab_save	struct
*	O
save	pointer
;	O
size_t	long
idx	int
,	O
size	long
;	O
size	long
=	O
sizeof	O
(	O
*	O
save	pointer
)	O
+	O
(	O
tab	pointer
->	O
size	long
-	O
1	int
)	O
*	O
sizeof	O
(	O
save	pointer
->	O
refcount	int
[	O
0	int
]	O
)	O
;	O
save	pointer
=	O
bfd_malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
save	pointer
==	O
NULL	O
)	O
return	O
save	pointer
;	O
save	pointer
->	O
size	long
=	O
tab	pointer
->	O
size	long
;	O
for	O
(	O
idx	int
=	O
1	int
;	O
idx	int
<	O
tab	pointer
->	O
size	long
;	O
idx	int
++	O
)	O
save	pointer
->	O
refcount	int
[	O
idx	int
]	O
=	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
refcount	int
;	O
return	O
save	pointer
;	O
}	O
void	O
_bfd_elf_strtab_restore	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
,	O
void	O
*	O
buf	pointer
)	O
{	O
size_t	long
idx	int
,	O
curr_size	long
=	O
tab	pointer
->	O
size	long
;	O
struct	O
strtab_save	struct
*	O
save	pointer
=	O
(	O
struct	O
strtab_save	struct
*	O
)	O
buf	pointer
;	O
BFD_ASSERT	O
(	O
tab	pointer
->	O
sec_size	long
==	O
0	int
)	O
;	O
BFD_ASSERT	O
(	O
save	pointer
->	O
size	long
<=	O
curr_size	long
)	O
;	O
tab	pointer
->	O
size	long
=	O
save	pointer
->	O
size	long
;	O
for	O
(	O
idx	int
=	O
1	int
;	O
idx	int
<	O
save	pointer
->	O
size	long
;	O
++	O
idx	int
)	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
refcount	int
=	O
save	pointer
->	O
refcount	int
[	O
idx	int
]	O
;	O
for	O
(	O
;	O
idx	int
<	O
curr_size	long
;	O
++	O
idx	int
)	O
{	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
refcount	int
=	O
0	int
;	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
len	long
=	O
0	int
;	O
}	O
}	O
bfd_size_type	long
_bfd_elf_strtab_size	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
)	O
{	O
return	O
tab	pointer
->	O
sec_size	long
?	O
tab	pointer
->	O
sec_size	long
:	O
tab	pointer
->	O
size	long
;	O
}	O
bfd_size_type	long
_bfd_elf_strtab_len	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
)	O
{	O
return	O
tab	pointer
->	O
size	long
;	O
}	O
bfd_size_type	long
_bfd_elf_strtab_offset	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
,	O
size_t	long
idx	int
)	O
{	O
struct	O
elf_strtab_hash_entry	struct
*	O
entry	pointer
;	O
if	O
(	O
idx	int
==	O
0	int
)	O
return	O
0	int
;	O
BFD_ASSERT	O
(	O
idx	int
<	O
tab	pointer
->	O
size	long
)	O
;	O
BFD_ASSERT	O
(	O
tab	pointer
->	O
sec_size	long
)	O
;	O
entry	pointer
=	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
;	O
BFD_ASSERT	O
(	O
entry	pointer
->	O
refcount	int
>	O
0	int
)	O
;	O
entry	pointer
->	O
refcount	int
--	O
;	O
return	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
u	union
.	O
index	function
;	O
}	O
const	O
char	O
*	O
_bfd_elf_strtab_str	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
,	O
size_t	long
idx	int
,	O
bfd_size_type	long
*	O
offset	long
)	O
{	O
if	O
(	O
idx	int
==	O
0	int
)	O
return	O
0	int
;	O
BFD_ASSERT	O
(	O
idx	int
<	O
tab	pointer
->	O
size	long
)	O
;	O
BFD_ASSERT	O
(	O
tab	pointer
->	O
sec_size	long
)	O
;	O
if	O
(	O
offset	long
)	O
*	O
offset	long
=	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
u	union
.	O
index	function
;	O
return	O
tab	pointer
->	O
array	pointer
[	O
idx	int
]	O
->	O
root	struct
.	O
string	pointer
;	O
}	O
bfd_boolean	int
_bfd_elf_strtab_emit	function
(	O
register	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
)	O
{	O
bfd_size_type	long
off	long
=	O
1	int
;	O
size_t	long
i	pointer
;	O
if	O
(	O
bfd_bwrite	function
(	O
""	pointer
,	O
1	int
,	O
abfd	pointer
)	O
!=	O
1	int
)	O
return	O
FALSE	int
;	O
for	O
(	O
i	pointer
=	O
1	int
;	O
i	pointer
<	O
tab	pointer
->	O
size	long
;	O
++	O
i	pointer
)	O
{	O
register	O
const	O
char	O
*	O
str	pointer
;	O
register	O
unsigned	O
int	O
len	long
;	O
BFD_ASSERT	O
(	O
tab	pointer
->	O
array	pointer
[	O
i	pointer
]	O
->	O
refcount	int
==	O
0	int
)	O
;	O
len	long
=	O
tab	pointer
->	O
array	pointer
[	O
i	pointer
]	O
->	O
len	long
;	O
if	O
(	O
(	O
int	O
)	O
len	long
<	O
0	int
)	O
continue	O
;	O
str	pointer
=	O
tab	pointer
->	O
array	pointer
[	O
i	pointer
]	O
->	O
root	struct
.	O
string	pointer
;	O
if	O
(	O
bfd_bwrite	function
(	O
str	pointer
,	O
len	long
,	O
abfd	pointer
)	O
!=	O
len	long
)	O
return	O
FALSE	int
;	O
off	long
+=	O
len	long
;	O
}	O
BFD_ASSERT	O
(	O
off	long
==	O
tab	pointer
->	O
sec_size	long
)	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
int	O
strrevcmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
elf_strtab_hash_entry	struct
*	O
A	pointer
=	O
*	O
(	O
struct	O
elf_strtab_hash_entry	struct
*	O
*	O
)	O
a	pointer
;	O
struct	O
elf_strtab_hash_entry	struct
*	O
B	pointer
=	O
*	O
(	O
struct	O
elf_strtab_hash_entry	struct
*	O
*	O
)	O
b	pointer
;	O
unsigned	O
int	O
lenA	int
=	O
A	pointer
->	O
len	long
;	O
unsigned	O
int	O
lenB	int
=	O
B	pointer
->	O
len	long
;	O
const	O
unsigned	O
char	O
*	O
s	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
A	pointer
->	O
root	struct
.	O
string	pointer
+	O
lenA	int
-	O
1	int
;	O
const	O
unsigned	O
char	O
*	O
t	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
B	pointer
->	O
root	struct
.	O
string	pointer
+	O
lenB	int
-	O
1	int
;	O
int	O
l	int
=	O
lenA	int
<	O
lenB	int
?	O
lenA	int
:	O
lenB	int
;	O
while	O
(	O
l	int
)	O
{	O
if	O
(	O
*	O
s	pointer
!=	O
*	O
t	pointer
)	O
return	O
(	O
int	O
)	O
*	O
s	pointer
-	O
(	O
int	O
)	O
*	O
t	pointer
;	O
s	pointer
--	O
;	O
t	pointer
--	O
;	O
l	int
--	O
;	O
}	O
return	O
lenA	int
-	O
lenB	int
;	O
}	O
static	O
inline	O
int	O
is_suffix	function
(	O
const	O
struct	O
elf_strtab_hash_entry	struct
*	O
A	pointer
,	O
const	O
struct	O
elf_strtab_hash_entry	struct
*	O
B	pointer
)	O
{	O
if	O
(	O
A	pointer
->	O
len	long
<=	O
B	pointer
->	O
len	long
)	O
return	O
0	int
;	O
return	O
memcmp	function
(	O
A	pointer
->	O
root	struct
.	O
string	pointer
+	O
(	O
A	pointer
->	O
len	long
-	O
B	pointer
->	O
len	long
)	O
,	O
B	pointer
->	O
root	struct
.	O
string	pointer
,	O
B	pointer
->	O
len	long
-	O
1	int
)	O
==	O
0	int
;	O
}	O
void	O
_bfd_elf_strtab_finalize	function
(	O
struct	O
elf_strtab_hash	struct
*	O
tab	pointer
)	O
{	O
struct	O
elf_strtab_hash_entry	struct
*	O
*	O
array	pointer
,	O
*	O
*	O
a	pointer
,	O
*	O
e	pointer
;	O
bfd_size_type	long
amt	long
,	O
sec_size	long
;	O
size_t	long
size	long
,	O
i	pointer
;	O
amt	long
=	O
tab	pointer
->	O
size	long
;	O
amt	long
*=	O
sizeof	O
(	O
struct	O
elf_strtab_hash_entry	struct
*	O
)	O
;	O
array	pointer
=	O
(	O
struct	O
elf_strtab_hash_entry	struct
*	O
*	O
)	O
bfd_malloc	function
(	O
amt	long
)	O
;	O
if	O
(	O
array	pointer
==	O
NULL	O
)	O
goto	O
alloc_failure	O
;	O
for	O
(	O
i	pointer
=	O
1	int
,	O
a	pointer
=	O
array	pointer
;	O
i	pointer
<	O
tab	pointer
->	O
size	long
;	O
++	O
i	pointer
)	O
{	O
e	pointer
=	O
tab	pointer
->	O
array	pointer
[	O
i	pointer
]	O
;	O
if	O
(	O
e	pointer
->	O
refcount	int
)	O
{	O
*	O
a	pointer
++	O
=	O
e	pointer
;	O
e	pointer
->	O
len	long
-=	O
1	int
;	O
}	O
else	O
e	pointer
->	O
len	long
=	O
0	int
;	O
}	O
size	long
=	O
a	pointer
-	O
array	pointer
;	O
if	O
(	O
size	long
!=	O
0	int
)	O
{	O
qsort	function
(	O
array	pointer
,	O
size	long
,	O
sizeof	O
(	O
struct	O
elf_strtab_hash_entry	struct
*	O
)	O
,	O
strrevcmp	function
)	O
;	O
e	pointer
=	O
*	O
--	O
a	pointer
;	O
e	pointer
->	O
len	long
+=	O
1	int
;	O
while	O
(	O
--	O
a	pointer
>=	O
array	pointer
)	O
{	O
struct	O
elf_strtab_hash_entry	struct
*	O
cmp	pointer
=	O
*	O
a	pointer
;	O
cmp	pointer
->	O
len	long
+=	O
1	int
;	O
if	O
(	O
is_suffix	function
(	O
e	pointer
,	O
cmp	pointer
)	O
)	O
{	O
cmp	pointer
->	O
u	union
.	O
suffix	pointer
=	O
e	pointer
;	O
cmp	pointer
->	O
len	long
=	O
-	O
cmp	pointer
->	O
len	long
;	O
}	O
else	O
e	pointer
=	O
cmp	pointer
;	O
}	O
}	O
alloc_failure	O
:	O
if	O
(	O
array	pointer
)	O
free	function
(	O
array	pointer
)	O
;	O
sec_size	long
=	O
1	int
;	O
for	O
(	O
i	pointer
=	O
1	int
;	O
i	pointer
<	O
tab	pointer
->	O
size	long
;	O
++	O
i	pointer
)	O
{	O
e	pointer
=	O
tab	pointer
->	O
array	pointer
[	O
i	pointer
]	O
;	O
if	O
(	O
e	pointer
->	O
refcount	int
&&	O
e	pointer
->	O
len	long
>	O
0	int
)	O
{	O
e	pointer
->	O
u	union
.	O
index	function
=	O
sec_size	long
;	O
sec_size	long
+=	O
e	pointer
->	O
len	long
;	O
}	O
}	O
tab	pointer
->	O
sec_size	long
=	O
sec_size	long
;	O
for	O
(	O
i	pointer
=	O
1	int
;	O
i	pointer
<	O
tab	pointer
->	O
size	long
;	O
++	O
i	pointer
)	O
{	O
e	pointer
=	O
tab	pointer
->	O
array	pointer
[	O
i	pointer
]	O
;	O
if	O
(	O
e	pointer
->	O
refcount	int
&&	O
e	pointer
->	O
len	long
<	O
0	int
)	O
e	pointer
->	O
u	union
.	O
index	function
=	O
e	pointer
->	O
u	union
.	O
suffix	pointer
->	O
u	union
.	O
index	function
+	O
(	O
e	pointer
->	O
u	union
.	O
suffix	pointer
->	O
len	long
+	O
e	pointer
->	O
len	long
)	O
;	O
}	O
}	O
