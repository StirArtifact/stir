static	O
Dwg_Version_Type	enum
dwg_version	int
=	O
R_INVALID	int
;	O
static	O
unsigned	O
int	O
loglevel	int
=	O
DWG_LOGLEVEL_ERROR	int
;	O
DWG_GETALL_ENTITY	O
(	O
TEXT	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
ATTRIB	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
ATTDEF	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
BLOCK	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
ENDBLK	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
SEQEND	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
INSERT	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
MINSERT	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
VERTEX_2D	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
VERTEX_3D	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
VERTEX_MESH	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
VERTEX_PFACE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
VERTEX_PFACE_FACE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
POLYLINE_2D	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
POLYLINE_3D	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
ARC	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
CIRCLE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
LINE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
DIMENSION_ORDINATE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
DIMENSION_LINEAR	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
DIMENSION_ALIGNED	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
DIMENSION_ANG3PT	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
DIMENSION_ANG2LN	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
DIMENSION_RADIUS	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
DIMENSION_DIAMETER	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
POINT	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
POLYLINE_PFACE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
POLYLINE_MESH	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
SOLID	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
TRACE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
SHAPE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
VIEWPORT	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
ELLIPSE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
SPLINE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
REGION	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
BODY	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
RAY	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
XLINE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
OLEFRAME	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
MTEXT	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
LEADER	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
TOLERANCE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
MLINE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
OLE2FRAME	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
LWPOLYLINE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
HATCH	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
IMAGE	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
CAMERA	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
HELIX	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
LIGHT	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
MULTILEADER	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
UNDERLAY	pointer
)	O
DWG_GETALL_ENTITY	O
(	O
WIPEOUT	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
BLOCK_CONTROL	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
BLOCK_HEADER	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
LAYER_CONTROL	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
LAYER	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
STYLE_CONTROL	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
STYLE	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
LTYPE_CONTROL	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
LTYPE	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
VIEW_CONTROL	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
VIEW	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
UCS_CONTROL	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
UCS	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
VPORT_CONTROL	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
VPORT	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
APPID_CONTROL	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
APPID	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
DIMSTYLE_CONTROL	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
DIMSTYLE	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
VPORT_ENTITY_CONTROL	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
VPORT_ENTITY_HEADER	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
DICTIONARY	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
MLINESTYLE	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
PROXY_OBJECT	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
DICTIONARYVAR	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
DICTIONARYWDFLT	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
FIELD	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
FIELDLIST	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
GROUP	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
IDBUFFER	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
IMAGEDEF	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
IMAGEDEF_REACTOR	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
LAYER_INDEX	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
LAYOUT	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
MLEADERSTYLE	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
OBJECTCONTEXTDATA	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
PLACEHOLDER	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
RASTERVARIABLES	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
SCALE	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
SORTENTSTABLE	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
SPATIAL_FILTER	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
SPATIAL_INDEX	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
WIPEOUTVARIABLES	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
XRECORD	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
ASSOCDEPENDENCY	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
ASSOCPLANESURFACEACTIONBODY	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
DIMASSOC	char
)	O
DWG_GETALL_OBJECT	O
(	O
DBCOLOR	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
DYNAMICBLOCKPURGEPREVENTER	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
GEODATA	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
OBJECT_PTR	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
PERSSUBENTMANAGER	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
UNDERLAYDEFINITION	pointer
)	O
DWG_GETALL_OBJECT	O
(	O
VISUALSTYLE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
TEXT	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
ATTRIB	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
ATTDEF	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
BLOCK	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
ENDBLK	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
SEQEND	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
INSERT	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
MINSERT	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
VERTEX_2D	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
VERTEX_3D	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
VERTEX_MESH	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
VERTEX_PFACE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
VERTEX_PFACE_FACE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
POLYLINE_2D	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
POLYLINE_3D	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
ARC	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
CIRCLE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
LINE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
DIMENSION_ORDINATE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
DIMENSION_LINEAR	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
DIMENSION_ALIGNED	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
DIMENSION_ANG3PT	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
DIMENSION_ANG2LN	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
DIMENSION_RADIUS	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
DIMENSION_DIAMETER	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
POINT	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
POLYLINE_PFACE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
POLYLINE_MESH	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
SOLID	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
TRACE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
SHAPE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
VIEWPORT	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
ELLIPSE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
SPLINE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
REGION	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
BODY	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
RAY	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
XLINE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
OLEFRAME	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
MTEXT	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
LEADER	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
TOLERANCE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
MLINE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
OLE2FRAME	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
LWPOLYLINE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY	O
(	O
HATCH	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY_BYNAME	O
(	O
IMAGE	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY_BYNAME	O
(	O
CAMERA	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY_BYNAME	O
(	O
HELIX	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY_BYNAME	O
(	O
LIGHT	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY_BYNAME	O
(	O
MULTILEADER	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY_BYNAME	O
(	O
UNDERLAY	pointer
)	O
CAST_DWG_OBJECT_TO_ENTITY_BYNAME	O
(	O
WIPEOUT	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
BLOCK_CONTROL	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
BLOCK_HEADER	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
LAYER_CONTROL	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
LAYER	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
STYLE_CONTROL	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
STYLE	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
LTYPE_CONTROL	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
LTYPE	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
VIEW_CONTROL	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
VIEW	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
UCS_CONTROL	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
UCS	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
VPORT_CONTROL	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
VPORT	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
APPID_CONTROL	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
APPID	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
DIMSTYLE_CONTROL	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
DIMSTYLE	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
VPORT_ENTITY_CONTROL	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
VPORT_ENTITY_HEADER	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
GROUP	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
MLINESTYLE	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
DICTIONARY	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
PLACEHOLDER	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
PROXY_OBJECT	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
LAYOUT	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
XRECORD	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
DICTIONARYVAR	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
DICTIONARYWDFLT	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
FIELD	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
FIELDLIST	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
IDBUFFER	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
IMAGEDEF	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
IMAGEDEF_REACTOR	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
LAYER_INDEX	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
MLEADERSTYLE	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
OBJECTCONTEXTDATA	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
RASTERVARIABLES	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
SCALE	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
SORTENTSTABLE	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
SPATIAL_FILTER	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
SPATIAL_INDEX	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
VISUALSTYLE	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
WIPEOUTVARIABLES	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
ASSOCDEPENDENCY	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
ASSOCPLANESURFACEACTIONBODY	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
DIMASSOC	char
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
DBCOLOR	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
DYNAMICBLOCKPURGEPREVENTER	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
GEODATA	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
OBJECT_PTR	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
PERSSUBENTMANAGER	pointer
)	O
CAST_DWG_OBJECT_TO_OBJECT	O
(	O
UNDERLAYDEFINITION	pointer
)	O
void	O
dwg_api_init_version	function
(	O
Dwg_Data	struct
*	O
dwg	pointer
)	O
{	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
dwg	pointer
->	O
header	struct
.	O
version	short
;	O
loglevel	int
=	O
dwg	pointer
->	O
opts	int
&	O
DWG_OPTS_LOGLEVEL	int
;	O
}	O
dwg_ent_dim	struct
*	O
dwg_object_to_DIMENSION	function
(	O
dwg_object	struct
*	O
obj	pointer
)	O
{	O
dwg_ent_dim	struct
*	O
ret_obj	pointer
=	O
NULL	O
;	O
if	O
(	O
obj	pointer
!=	O
NULL	O
&&	O
(	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_DIMENSION_ORDINATE	int
||	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_DIMENSION_LINEAR	int
||	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_DIMENSION_ALIGNED	int
||	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_DIMENSION_ANG3PT	int
||	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_DIMENSION_ANG2LN	int
||	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_DIMENSION_RADIUS	int
||	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_DIMENSION_DIAMETER	int
)	O
)	O
{	O
ret_obj	pointer
=	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
DIMENSION_common	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"invalid %s type: got 0x%x"	pointer
,	O
"DIMENSION"	pointer
,	O
obj	pointer
?	O
obj	pointer
->	O
type	short
:	O
0	int
)	O
;	O
}	O
return	O
(	O
dwg_ent_dim	struct
*	O
)	O
ret_obj	pointer
;	O
}	O
EXPORT	O
bool	bool
dwg_get_HEADER	function
(	O
const	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
void	O
*	O
restrict	O
out	pointer
)	O
{	O
return	O
dwg_dynapi_header_value	function
(	O
dwg	pointer
,	O
fieldname	pointer
,	O
out	pointer
,	O
NULL	O
)	O
;	O
}	O
EXPORT	O
bool	bool
dwg_get_HEADER_utf8text	function
(	O
const	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
char	O
*	O
*	O
restrict	O
textp	pointer
,	O
int	O
*	O
isnewp	pointer
)	O
{	O
return	O
dwg_dynapi_header_utf8text	function
(	O
dwg	pointer
,	O
fieldname	pointer
,	O
textp	pointer
,	O
isnewp	pointer
,	O
NULL	O
)	O
;	O
}	O
EXPORT	O
bool	bool
dwg_set_HEADER	function
(	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
void	O
*	O
restrict	O
value	double
)	O
{	O
return	O
dwg_dynapi_header_set_value	function
(	O
dwg	pointer
,	O
fieldname	pointer
,	O
value	double
,	O
0	int
)	O
;	O
}	O
EXPORT	O
bool	bool
dwg_set_HEADER_utf8text	function
(	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
char	O
*	O
restrict	O
utf8	pointer
)	O
{	O
return	O
dwg_dynapi_header_set_value	function
(	O
dwg	pointer
,	O
fieldname	pointer
,	O
utf8	pointer
,	O
0	int
)	O
;	O
}	O
EXPORT	O
bool	bool
dwg_get_ENTITY_common	function
(	O
Dwg_Object_Entity	struct
*	O
restrict	O
obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
void	O
*	O
restrict	O
out	pointer
)	O
{	O
return	O
dwg_dynapi_common_value	function
(	O
obj	pointer
,	O
fieldname	pointer
,	O
out	pointer
,	O
NULL	O
)	O
;	O
}	O
EXPORT	O
bool	bool
dwg_set_ENTITY_common	function
(	O
Dwg_Object_Entity	struct
*	O
restrict	O
obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
void	O
*	O
restrict	O
value	double
)	O
{	O
return	O
dwg_dynapi_common_set_value	function
(	O
obj	pointer
,	O
fieldname	pointer
,	O
value	double
,	O
0	int
)	O
;	O
}	O
EXPORT	O
bool	bool
dwg_get_OBJECT_common	function
(	O
Dwg_Object_Object	struct
*	O
restrict	O
obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
void	O
*	O
restrict	O
out	pointer
)	O
{	O
return	O
dwg_dynapi_common_value	function
(	O
obj	pointer
,	O
fieldname	pointer
,	O
out	pointer
,	O
NULL	O
)	O
;	O
}	O
EXPORT	O
bool	bool
dwg_set_OBJECT_common	function
(	O
Dwg_Object_Object	struct
*	O
restrict	O
obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
void	O
*	O
restrict	O
value	double
)	O
{	O
return	O
dwg_dynapi_common_set_value	function
(	O
obj	pointer
,	O
fieldname	pointer
,	O
value	double
,	O
0	int
)	O
;	O
}	O
EXPORT	O
bool	bool
dwg_get_ENTITY_common_utf8text	function
(	O
Dwg_Object_Entity	struct
*	O
restrict	O
obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
char	O
*	O
*	O
restrict	O
textp	pointer
,	O
int	O
*	O
isnewp	pointer
)	O
{	O
return	O
dwg_dynapi_common_utf8text	function
(	O
obj	pointer
,	O
fieldname	pointer
,	O
textp	pointer
,	O
isnewp	pointer
,	O
NULL	O
)	O
;	O
}	O
EXPORT	O
bool	bool
dwg_set_ENTITY_common_utf8text	function
(	O
Dwg_Object_Entity	struct
*	O
restrict	O
obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
char	O
*	O
restrict	O
utf8	pointer
)	O
{	O
return	O
dwg_dynapi_common_set_value	function
(	O
obj	pointer
,	O
fieldname	pointer
,	O
utf8	pointer
,	O
0	int
)	O
;	O
}	O
EXPORT	O
bool	bool
dwg_get_OBJECT_common_utf8text	function
(	O
Dwg_Object_Object	struct
*	O
restrict	O
obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
char	O
*	O
*	O
restrict	O
textp	pointer
,	O
int	O
*	O
isnewp	pointer
)	O
{	O
return	O
dwg_dynapi_common_utf8text	function
(	O
obj	pointer
,	O
fieldname	pointer
,	O
textp	pointer
,	O
isnewp	pointer
,	O
NULL	O
)	O
;	O
}	O
EXPORT	O
bool	bool
dwg_set_OBJECT_common_utf8text	function
(	O
Dwg_Object_Object	struct
*	O
restrict	O
obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
char	O
*	O
restrict	O
utf8	pointer
)	O
{	O
return	O
dwg_dynapi_common_set_value	function
(	O
obj	pointer
,	O
fieldname	pointer
,	O
utf8	pointer
,	O
1	int
)	O
;	O
}	O
dwg_get_OBJECT	function
(	O
ent_text	pointer
,	O
TEXT	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_attrib	pointer
,	O
ATTRIB	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_attdef	pointer
,	O
ATTDEF	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_block	pointer
,	O
BLOCK	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_endblk	pointer
,	O
ENDBLK	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_seqend	pointer
,	O
SEQEND	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_insert	pointer
,	O
INSERT	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_minsert	pointer
,	O
MINSERT	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_vertex_2d	pointer
,	O
VERTEX_2D	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_vertex_3d	pointer
,	O
VERTEX_3D	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_vertex_mesh	pointer
,	O
VERTEX_MESH	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_vertex_pface	pointer
,	O
VERTEX_PFACE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_vertex_pface_face	pointer
,	O
VERTEX_PFACE_FACE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_polyline_2d	pointer
,	O
POLYLINE_2D	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_polyline_3d	pointer
,	O
POLYLINE_3D	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_arc	pointer
,	O
ARC	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_circle	pointer
,	O
CIRCLE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_line	pointer
,	O
LINE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_dim_ordinate	pointer
,	O
DIMENSION_ORDINATE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_dim_linear	pointer
,	O
DIMENSION_LINEAR	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_dim_aligned	pointer
,	O
DIMENSION_ALIGNED	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_dim_ang3pt	pointer
,	O
DIMENSION_ANG3PT	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_dim_ang2ln	pointer
,	O
DIMENSION_ANG2LN	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_dim_radius	pointer
,	O
DIMENSION_RADIUS	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_dim_diameter	pointer
,	O
DIMENSION_DIAMETER	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_point	pointer
,	O
POINT	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_polyline_pface	pointer
,	O
POLYLINE_PFACE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_polyline_mesh	pointer
,	O
POLYLINE_MESH	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_solid	pointer
,	O
SOLID	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_trace	pointer
,	O
TRACE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_shape	pointer
,	O
SHAPE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_viewport	pointer
,	O
VIEWPORT	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_ellipse	pointer
,	O
ELLIPSE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_spline	pointer
,	O
SPLINE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_region	pointer
,	O
REGION	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_body	pointer
,	O
BODY	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_ray	pointer
,	O
RAY	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_xline	pointer
,	O
XLINE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_oleframe	pointer
,	O
OLEFRAME	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_mtext	pointer
,	O
MTEXT	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_leader	pointer
,	O
LEADER	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_tolerance	pointer
,	O
TOLERANCE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_mline	pointer
,	O
MLINE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_ole2frame	pointer
,	O
OLE2FRAME	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_lwpline	pointer
,	O
LWPOLYLINE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_hatch	pointer
,	O
HATCH	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_image	pointer
,	O
IMAGE	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_camera	pointer
,	O
CAMERA	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_helix	pointer
,	O
HELIX	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_light	pointer
,	O
LIGHT	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_mleader	pointer
,	O
MULTILEADER	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_underlay	pointer
,	O
UNDERLAY	pointer
)	O
dwg_get_OBJECT	function
(	O
ent_wipeout	pointer
,	O
WIPEOUT	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_block_control	pointer
,	O
BLOCK_CONTROL	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_block_header	pointer
,	O
BLOCK_HEADER	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_layer_control	pointer
,	O
LAYER_CONTROL	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_layer	pointer
,	O
LAYER	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_style_control	pointer
,	O
STYLE_CONTROL	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_style	pointer
,	O
STYLE	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_ltype_control	pointer
,	O
LTYPE_CONTROL	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_ltype	pointer
,	O
LTYPE	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_view_control	pointer
,	O
VIEW_CONTROL	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_view	pointer
,	O
VIEW	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_ucs_control	pointer
,	O
UCS_CONTROL	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_ucs	pointer
,	O
UCS	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_vport_control	pointer
,	O
VPORT_CONTROL	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_vport	pointer
,	O
VPORT	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_appid_control	pointer
,	O
APPID_CONTROL	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_appid	pointer
,	O
APPID	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_dimstyle_control	pointer
,	O
DIMSTYLE_CONTROL	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_dimstyle	pointer
,	O
DIMSTYLE	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_vport_entity_control	pointer
,	O
VPORT_ENTITY_CONTROL	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_vport_entity_header	pointer
,	O
VPORT_ENTITY_HEADER	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_dictionary	pointer
,	O
DICTIONARY	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_mlinestyle	pointer
,	O
MLINESTYLE	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_proxy_object	pointer
,	O
OBJECT	O
)	O
dwg_get_OBJECT	function
(	O
obj_dictionaryvar	pointer
,	O
DICTIONARYVAR	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_dictionarywdflt	pointer
,	O
DICTIONARYWDFLT	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_field	pointer
,	O
FIELD	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_fieldlist	pointer
,	O
FIELDLIST	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_group	pointer
,	O
GROUP	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_idbuffer	pointer
,	O
IDBUFFER	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_imagedef	pointer
,	O
IMAGEDEF	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_imagedef_reactor	pointer
,	O
REACTOR	O
)	O
dwg_get_OBJECT	function
(	O
obj_layer_index	pointer
,	O
LAYER_INDEX	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_layout	pointer
,	O
LAYOUT	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_mleaderstyle	pointer
,	O
MLEADERSTYLE	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_objectcontextdata	pointer
,	O
OBJECTCONTEXTDATA	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_placeholder	pointer
,	O
PLACEHOLDER	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_rastervariables	pointer
,	O
RASTERVARIABLES	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_scale	pointer
,	O
SCALE	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_sortentstable	pointer
,	O
SORTENTSTABLE	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_spatial_filter	pointer
,	O
FILTER	O
)	O
dwg_get_OBJECT	function
(	O
obj_spatial_index	pointer
,	O
INDEX	O
)	O
dwg_get_OBJECT	function
(	O
obj_wipeoutvariables	pointer
,	O
WIPEOUTVARIABLES	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_xrecord	pointer
,	O
XRECORD	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_assocdependency	pointer
,	O
ASSOCDEPENDENCY	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_assocplanesurfaceactionbody	pointer
,	O
ASSOCPLANESURFACEACTIONBODY	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_dimassoc	pointer
,	O
DIMASSOC	char
)	O
dwg_get_OBJECT	function
(	O
obj_dbcolor	pointer
,	O
DBCOLOR	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_dynamicblockpurgepreventer	pointer
,	O
DYNAMICBLOCKPURGEPREVENTER	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_geodata	pointer
,	O
GEODATA	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_object_ptr	pointer
,	O
PTR	O
)	O
dwg_get_OBJECT	function
(	O
obj_perssubentmanager	pointer
,	O
PERSSUBENTMANAGER	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_underlaydefinition	pointer
,	O
UNDERLAYDEFINITION	pointer
)	O
dwg_get_OBJECT	function
(	O
obj_visualstyle	pointer
,	O
VISUALSTYLE	pointer
)	O
EXPORT	O
dwg_point_2d	struct
*	O
dwg_ent_get_POINT2D	function
(	O
const	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
)	O
{	O
{	O
dwg_point_2d	struct
*	O
point	struct
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
NULL	O
;	O
point	struct
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
dwg_point_2d	struct
)	O
)	O
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
point	struct
,	O
&	O
field	struct
)	O
)	O
{	O
free	function
(	O
point	struct
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"2RD"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"2BD"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"2DPOINT"	pointer
)	O
)	O
{	O
return	O
point	struct
;	O
}	O
else	O
{	O
free	function
(	O
point	struct
)	O
;	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a POINT2D (2RD,2BD,2DPOINT)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
NULL	O
;	O
}	O
}	O
}	O
EXPORT	O
bool	bool
dwg_ent_set_POINT2D	function
(	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
dwg_point_2d	struct
*	O
point	struct
)	O
{	O
{	O
dwg_point_2d	struct
dummy	struct
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
dummy	struct
,	O
&	O
field	struct
)	O
)	O
{	O
return	O
false	int
;	O
}	O
if	O
(	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"2RD"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"2BD"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"2DPOINT"	pointer
)	O
)	O
{	O
return	O
dwg_dynapi_entity_set_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
point	struct
,	O
0	int
)	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a POINT2D (2RD,2BD,2DPOINT)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
false	int
;	O
}	O
}	O
}	O
EXPORT	O
dwg_point_3d	struct
*	O
dwg_ent_get_POINT3D	function
(	O
const	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
)	O
{	O
{	O
dwg_point_3d	struct
*	O
point	struct
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
NULL	O
;	O
point	struct
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
dwg_point_3d	struct
)	O
)	O
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
point	struct
,	O
&	O
field	struct
)	O
)	O
{	O
free	function
(	O
point	struct
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"3RD"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"3BD"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"BE"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"3DPOINT"	pointer
)	O
)	O
{	O
return	O
point	struct
;	O
}	O
else	O
{	O
free	function
(	O
point	struct
)	O
;	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a POINT3D (3RD,3BD,BE,3DPOINT)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
NULL	O
;	O
}	O
}	O
}	O
EXPORT	O
bool	bool
dwg_ent_set_POINT3D	function
(	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
dwg_point_3d	struct
*	O
point	struct
)	O
{	O
{	O
dwg_point_3d	struct
dummy	struct
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
dummy	struct
,	O
&	O
field	struct
)	O
)	O
return	O
false	int
;	O
if	O
(	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"3RD"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"3BD"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"BE"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"3DPOINT"	pointer
)	O
)	O
{	O
return	O
dwg_dynapi_entity_set_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
point	struct
,	O
0	int
)	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a POINT3D (3RD,3BD,BE,3DPOINT)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
false	int
;	O
}	O
}	O
}	O
EXPORT	O
char	O
*	O
dwg_ent_get_STRING	function
(	O
const	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
)	O
{	O
{	O
char	O
*	O
str	struct
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
str	struct
,	O
&	O
field	struct
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
field	struct
.	O
is_string	short
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"TF"	pointer
)	O
)	O
{	O
return	O
str	struct
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a STRING (T,TV,TU,TF)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
NULL	O
;	O
}	O
}	O
}	O
EXPORT	O
char	O
*	O
dwg_ent_get_UTF8	function
(	O
const	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
int	O
*	O
isnewp	pointer
)	O
{	O
if	O
(	O
isnewp	pointer
)	O
*	O
isnewp	pointer
=	O
0	int
;	O
{	O
char	O
*	O
str	struct
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
dwg_dynapi_entity_utf8text	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
str	struct
,	O
isnewp	pointer
,	O
&	O
field	struct
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
field	struct
.	O
is_string	short
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"TF"	pointer
)	O
)	O
{	O
return	O
str	struct
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a STRING (T,TV,TU,TF)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
NULL	O
;	O
}	O
}	O
}	O
EXPORT	O
bool	bool
dwg_ent_set_STRING	function
(	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
char	O
*	O
restrict	O
str	struct
)	O
{	O
{	O
char	O
*	O
dummy	struct
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
false	int
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
dummy	struct
,	O
&	O
field	struct
)	O
)	O
return	O
false	int
;	O
if	O
(	O
field	struct
.	O
is_string	short
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"TF"	pointer
)	O
)	O
{	O
return	O
dwg_dynapi_entity_set_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
str	struct
,	O
0	int
)	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a STRING (T,TV,TU,TF)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
false	int
;	O
}	O
}	O
}	O
EXPORT	O
bool	bool
dwg_ent_set_UTF8	function
(	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
char	O
*	O
restrict	O
utf8text	pointer
)	O
{	O
{	O
char	O
*	O
dummy	struct
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
false	int
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
dummy	struct
,	O
&	O
field	struct
)	O
)	O
return	O
false	int
;	O
if	O
(	O
field	struct
.	O
is_string	short
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"TF"	pointer
)	O
)	O
{	O
return	O
dwg_dynapi_entity_set_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
utf8text	pointer
,	O
1	int
)	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a STRING (T,TV,TU,TF)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
false	int
;	O
}	O
}	O
}	O
EXPORT	O
BITCODE_BD	double
dwg_ent_get_REAL	function
(	O
const	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
)	O
{	O
{	O
BITCODE_BD	double
num	double
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
0.0	int
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
num	double
,	O
&	O
field	struct
)	O
)	O
return	O
0.0	int
;	O
if	O
(	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"RD"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"BD"	pointer
)	O
)	O
{	O
return	O
num	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a REAL (RD,BD)"	pointer
,	O
fieldname	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
0.0	int
;	O
}	O
}	O
}	O
EXPORT	O
bool	bool
dwg_ent_set_REAL	function
(	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
BITCODE_BD	double
num	double
)	O
{	O
{	O
BITCODE_BD	double
dummy	struct
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
false	int
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
dummy	struct
,	O
&	O
field	struct
)	O
)	O
return	O
false	int
;	O
if	O
(	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"RD"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"BD"	pointer
)	O
)	O
{	O
return	O
dwg_dynapi_entity_set_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
num	double
,	O
0	int
)	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a REAL (RD,BD)"	pointer
,	O
fieldname	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
false	int
;	O
}	O
}	O
}	O
EXPORT	O
BITCODE_BS	short
dwg_ent_get_INT16	function
(	O
const	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
)	O
{	O
{	O
BITCODE_BS	short
num	double
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
0	int
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
num	double
,	O
&	O
field	struct
)	O
)	O
return	O
0	int
;	O
if	O
(	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"RS"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"BS"	pointer
)	O
)	O
{	O
return	O
num	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a INT16 (RS,BS)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
0	int
;	O
}	O
}	O
}	O
EXPORT	O
bool	bool
dwg_ent_set_INT16	function
(	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
BITCODE_BS	short
num	double
)	O
{	O
{	O
BITCODE_BS	short
dummy	struct
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
false	int
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
dummy	struct
,	O
&	O
field	struct
)	O
)	O
return	O
false	int
;	O
if	O
(	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"RS"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"BS"	pointer
)	O
)	O
{	O
return	O
dwg_dynapi_entity_set_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
num	double
,	O
0	int
)	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a INT16 (RS,BS)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
false	int
;	O
}	O
}	O
}	O
EXPORT	O
BITCODE_BL	int
dwg_ent_get_INT32	function
(	O
const	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
)	O
{	O
{	O
BITCODE_BL	int
num	double
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
0	int
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
num	double
,	O
&	O
field	struct
)	O
)	O
return	O
0	int
;	O
if	O
(	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"RL"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"BL"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"MS"	pointer
)	O
)	O
{	O
return	O
num	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a INT32 (RL,BL,MS)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
0	int
;	O
}	O
}	O
}	O
EXPORT	O
bool	bool
dwg_ent_set_INT32	function
(	O
void	O
*	O
restrict	O
_obj	pointer
,	O
const	O
char	O
*	O
restrict	O
fieldname	pointer
,	O
const	O
BITCODE_BL	int
num	double
)	O
{	O
{	O
BITCODE_BL	int
dummy	struct
;	O
Dwg_DYNAPI_field	struct
field	struct
;	O
int	O
error	int
;	O
const	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_obj_generic_to_object	function
(	O
_obj	pointer
,	O
&	O
error	int
)	O
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
name	pointer
)	O
return	O
false	int
;	O
if	O
(	O
!	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
dummy	struct
,	O
&	O
field	struct
)	O
)	O
return	O
false	int
;	O
if	O
(	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"RL"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"BL"	pointer
)	O
||	O
strEQc	O
(	O
field	struct
.	O
type	short
,	O
"MS"	pointer
)	O
)	O
{	O
return	O
dwg_dynapi_entity_set_value	function
(	O
(	O
void	O
*	O
)	O
_obj	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
&	O
num	double
,	O
0	int
)	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s.%s has type %s, which is not a INT32 (RL,BL,MS)"	pointer
,	O
obj	pointer
->	O
name	pointer
,	O
fieldname	pointer
,	O
field	struct
.	O
type	short
)	O
return	O
false	int
;	O
}	O
}	O
}	O
void	O
dwg_ent_circle_get_center	function
(	O
const	O
dwg_ent_circle	struct
*	O
restrict	O
circle	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
circle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
circle	pointer
->	O
center	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
circle	pointer
->	O
center	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
circle	pointer
->	O
center	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty point or circle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_circle_set_center	function
(	O
dwg_ent_circle	struct
*	O
restrict	O
circle	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
circle	pointer
&&	O
dwg_dynapi_entity_set_value	function
(	O
circle	pointer
,	O
"CIRCLE"	pointer
,	O
"center"	pointer
,	O
point	struct
,	O
0	int
)	O
)	O
*	O
error	int
=	O
0	int
;	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty point or circle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_circle_get_radius	function
(	O
const	O
dwg_ent_circle	struct
*	O
restrict	O
circle	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
circle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
circle	pointer
->	O
radius	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty circle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_circle_set_radius	function
(	O
dwg_ent_circle	struct
*	O
restrict	O
circle	pointer
,	O
const	O
double	O
radius	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
circle	pointer
&&	O
dwg_dynapi_entity_set_value	function
(	O
(	O
void	O
*	O
)	O
circle	pointer
,	O
"CIRCLE"	pointer
,	O
"radius"	pointer
,	O
&	O
radius	double
,	O
0	int
)	O
)	O
{	O
*	O
error	int
=	O
0	int
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty circle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_circle_get_thickness	function
(	O
const	O
dwg_ent_circle	struct
*	O
restrict	O
circle	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
circle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
circle	pointer
->	O
thickness	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty circle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_circle_set_thickness	function
(	O
dwg_ent_circle	struct
*	O
restrict	O
circle	pointer
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
circle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
circle	pointer
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty circle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_circle_set_extrusion	function
(	O
dwg_ent_circle	struct
*	O
restrict	O
circle	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
circle	pointer
&&	O
dwg_dynapi_entity_set_value	function
(	O
(	O
void	O
*	O
)	O
circle	pointer
,	O
"CIRCLE"	pointer
,	O
"extrusion"	pointer
,	O
vector	struct
,	O
0	int
)	O
)	O
{	O
*	O
error	int
=	O
0	int
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty vector or circle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_circle_get_extrusion	function
(	O
const	O
dwg_ent_circle	struct
*	O
restrict	O
circle	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
circle	pointer
&&	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
circle	pointer
,	O
"CIRCLE"	pointer
,	O
"extrusion"	pointer
,	O
vector	struct
,	O
NULL	O
)	O
)	O
{	O
*	O
error	int
=	O
0	int
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty vector or circle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_line_get_start_point	function
(	O
const	O
dwg_ent_line	struct
*	O
restrict	O
line	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
line	pointer
&&	O
dwg_dynapi_entity_value	function
(	O
(	O
void	O
*	O
)	O
line	pointer
,	O
"LINE"	pointer
,	O
"start"	pointer
,	O
point	struct
,	O
NULL	O
)	O
)	O
{	O
*	O
error	int
=	O
0	int
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty line"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_line_set_start_point	function
(	O
dwg_ent_line	struct
*	O
restrict	O
line	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
line	pointer
&&	O
dwg_dynapi_entity_set_value	function
(	O
(	O
void	O
*	O
)	O
line	pointer
,	O
"LINE"	pointer
,	O
"start"	pointer
,	O
point	struct
,	O
0	int
)	O
)	O
{	O
*	O
error	int
=	O
0	int
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty line"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_line_get_end_point	function
(	O
const	O
dwg_ent_line	struct
*	O
restrict	O
line	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
line	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
line	pointer
->	O
end	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
line	pointer
->	O
end	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
line	pointer
->	O
end	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty line"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_line_set_end_point	function
(	O
dwg_ent_line	struct
*	O
restrict	O
line	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
line	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
line	pointer
->	O
end	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
line	pointer
->	O
end	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
line	pointer
->	O
end	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty line"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_line_get_thickness	function
(	O
const	O
dwg_ent_line	struct
*	O
restrict	O
line	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
line	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
line	pointer
->	O
thickness	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty line"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_line_set_thickness	function
(	O
dwg_ent_line	struct
*	O
restrict	O
line	pointer
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
line	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
line	pointer
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty line"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_line_get_extrusion	function
(	O
const	O
dwg_ent_line	struct
*	O
restrict	O
line	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
line	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
line	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
line	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
line	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty vector or line"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_line_set_extrusion	function
(	O
dwg_ent_line	struct
*	O
restrict	O
line	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
line	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
line	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
line	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
line	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty vector or line"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_arc_get_center	function
(	O
const	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
arc	pointer
->	O
center	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
arc	pointer
->	O
center	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
arc	pointer
->	O
center	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc or point"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_arc_set_center	function
(	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
arc	pointer
->	O
center	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
arc	pointer
->	O
center	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
arc	pointer
->	O
center	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc or point"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_arc_get_radius	function
(	O
const	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
arc	pointer
->	O
radius	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_arc_set_radius	function
(	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
const	O
double	O
radius	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
arc	pointer
->	O
radius	double
=	O
radius	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_arc_get_thickness	function
(	O
const	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
arc	pointer
->	O
thickness	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_arc_set_thickness	function
(	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
arc	pointer
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_arc_get_extrusion	function
(	O
const	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
arc	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
arc	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
arc	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc or vector"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_arc_set_extrusion	function
(	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
arc	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
arc	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
arc	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc or vector"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_arc_get_start_angle	function
(	O
const	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
arc	pointer
->	O
start_angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_arc_set_start_angle	function
(	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
const	O
double	O
angle	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
arc	pointer
->	O
start_angle	double
=	O
angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_arc_get_end_angle	function
(	O
const	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
arc	pointer
->	O
end_angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_arc_set_end_angle	function
(	O
dwg_ent_arc	struct
*	O
restrict	O
arc	pointer
,	O
const	O
double	O
angle	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
arc	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
arc	pointer
->	O
end_angle	double
=	O
angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arc"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_ellipse_get_center	function
(	O
const	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ellipse	pointer
->	O
center	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ellipse	pointer
->	O
center	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
ellipse	pointer
->	O
center	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ellipse or point"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_ellipse_set_center	function
(	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ellipse	pointer
->	O
center	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ellipse	pointer
->	O
center	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
ellipse	pointer
->	O
center	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ellipse or point"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_ellipse_get_sm_axis	function
(	O
const	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ellipse	pointer
->	O
sm_axis	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ellipse	pointer
->	O
sm_axis	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
ellipse	pointer
->	O
sm_axis	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ellipse or point"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_ellipse_set_sm_axis	function
(	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ellipse	pointer
->	O
sm_axis	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ellipse	pointer
->	O
sm_axis	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
ellipse	pointer
->	O
sm_axis	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ellipse or point"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_ellipse_get_extrusion	function
(	O
const	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
ellipse	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
ellipse	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
ellipse	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ellipse or vector"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_ellipse_set_extrusion	function
(	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ellipse	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
ellipse	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
ellipse	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ellipse or vector"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_ellipse_get_axis_ratio	function
(	O
const	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
ellipse	pointer
->	O
axis_ratio	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty ellipse"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_ellipse_set_axis_ratio	function
(	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
const	O
double	O
ratio	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ellipse	pointer
->	O
axis_ratio	double
=	O
ratio	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ellipse"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_ellipse_get_start_angle	function
(	O
const	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
ellipse	pointer
->	O
start_angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ellipse"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_ellipse_set_start_angle	function
(	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
const	O
double	O
start_angle	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ellipse	pointer
->	O
start_angle	double
=	O
start_angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ellipse"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_ellipse_get_end_angle	function
(	O
const	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
ellipse	pointer
->	O
end_angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ellipse"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_ellipse_set_end_angle	function
(	O
dwg_ent_ellipse	struct
*	O
restrict	O
ellipse	pointer
,	O
const	O
double	O
end_angle	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ellipse	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ellipse	pointer
->	O
end_angle	double
=	O
end_angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ellipse"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_text_set_text	function
(	O
dwg_ent_text	struct
*	O
restrict	O
ent	pointer
,	O
const	O
char	O
*	O
restrict	O
text_value	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
ent	pointer
->	O
text_value	pointer
=	O
(	O
char	O
*	O
)	O
bit_utf8_to_TU	function
(	O
(	O
char	O
*	O
)	O
text_value	pointer
)	O
;	O
else	O
ent	pointer
->	O
text_value	pointer
=	O
(	O
char	O
*	O
)	O
text_value	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ent"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
char	O
*	O
dwg_ent_text_get_text	function
(	O
const	O
dwg_ent_text	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
ent	pointer
->	O
text_value	pointer
)	O
;	O
else	O
return	O
ent	pointer
->	O
text_value	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ent"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_text_get_insertion_point	function
(	O
const	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
text	pointer
->	O
insertion_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
text	pointer
->	O
insertion_pt	struct
.	O
y	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text or point"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_text_set_insertion_point	function
(	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
text	pointer
->	O
insertion_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
text	pointer
->	O
insertion_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text or point"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_text_get_height	function
(	O
const	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
text	pointer
->	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty text"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_text_set_height	function
(	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
const	O
double	O
height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
text	pointer
->	O
height	double
=	O
height	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_text_get_extrusion	function
(	O
const	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
text	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
text	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
text	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text or vector"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_text_set_extrusion	function
(	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
text	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
text	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
text	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text or vector"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_text_get_thickness	function
(	O
const	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
text	pointer
->	O
thickness	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_text_set_thickness	function
(	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
text	pointer
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_text_get_rotation	function
(	O
const	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
text	pointer
->	O
rotation	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_text_set_rotation	function
(	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
const	O
double	O
angle	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
text	pointer
->	O
rotation	double
=	O
angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_text_get_vert_alignment	function
(	O
const	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
text	pointer
->	O
vert_alignment	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_text_set_vert_alignment	function
(	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
const	O
BITCODE_BS	short
alignment	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
text	pointer
->	O
vert_alignment	short
=	O
alignment	char
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_text_get_horiz_alignment	function
(	O
const	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
text	pointer
->	O
horiz_alignment	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_text_set_horiz_alignment	function
(	O
dwg_ent_text	struct
*	O
restrict	O
text	pointer
,	O
const	O
BITCODE_BS	short
alignment	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
text	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
text	pointer
->	O
horiz_alignment	short
=	O
alignment	char
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty text"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_attrib_set_text	function
(	O
dwg_ent_attrib	struct
*	O
restrict	O
ent	pointer
,	O
const	O
char	O
*	O
restrict	O
text_value	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
ent	pointer
->	O
text_value	pointer
=	O
(	O
char	O
*	O
)	O
bit_utf8_to_TU	function
(	O
(	O
char	O
*	O
)	O
text_value	pointer
)	O
;	O
else	O
ent	pointer
->	O
text_value	pointer
=	O
(	O
char	O
*	O
)	O
text_value	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attrib"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
char	O
*	O
dwg_ent_attrib_get_text	function
(	O
const	O
dwg_ent_attrib	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
ent	pointer
->	O
text_value	pointer
)	O
;	O
else	O
return	O
ent	pointer
->	O
text_value	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attrib"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_attrib_get_insertion_point	function
(	O
const	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
attrib	pointer
->	O
insertion_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
attrib	pointer
->	O
insertion_pt	struct
.	O
y	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attrib"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_attrib_set_insertion_point	function
(	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attrib	pointer
->	O
insertion_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
attrib	pointer
->	O
insertion_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attrib"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_attrib_get_height	function
(	O
const	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
attrib	pointer
->	O
height	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attrib"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_attrib_set_height	function
(	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
const	O
double	O
height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attrib	pointer
->	O
height	double
=	O
height	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attrib"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_attrib_get_extrusion	function
(	O
const	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
attrib	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
attrib	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
attrib	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attrib or vector"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_attrib_set_extrusion	function
(	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attrib	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
attrib	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
attrib	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attrib or vector"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_attrib_get_thickness	function
(	O
const	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
attrib	pointer
->	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty attrib"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_attrib_set_thickness	function
(	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attrib	pointer
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty attrib"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_attrib_get_rotation	function
(	O
const	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
attrib	pointer
->	O
rotation	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attrib"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_attrib_set_rotation	function
(	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
const	O
double	O
angle	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attrib	pointer
->	O
rotation	double
=	O
angle	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_attrib_get_vert_alignment	function
(	O
const	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
attrib	pointer
->	O
vert_alignment	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attrib"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_attrib_set_vert_alignment	function
(	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
BITCODE_BS	short
alignment	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attrib	pointer
->	O
vert_alignment	short
=	O
alignment	char
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attrib"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_attrib_get_horiz_alignment	function
(	O
const	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
attrib	pointer
->	O
horiz_alignment	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
-	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_attrib_set_horiz_alignment	function
(	O
dwg_ent_attrib	struct
*	O
restrict	O
attrib	pointer
,	O
const	O
BITCODE_BS	short
alignment	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attrib	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attrib	pointer
->	O
horiz_alignment	short
=	O
alignment	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_attdef_set_default_value	function
(	O
dwg_ent_attdef	struct
*	O
restrict	O
ent	pointer
,	O
const	O
char	O
*	O
restrict	O
default_value	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
ent	pointer
->	O
default_value	pointer
=	O
(	O
char	O
*	O
)	O
bit_utf8_to_TU	function
(	O
(	O
char	O
*	O
)	O
default_value	pointer
)	O
;	O
else	O
ent	pointer
->	O
default_value	pointer
=	O
(	O
char	O
*	O
)	O
default_value	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
*	O
dwg_ent_attdef_get_default_value	function
(	O
const	O
dwg_ent_attdef	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
ent	pointer
->	O
default_value	pointer
)	O
;	O
else	O
return	O
ent	pointer
->	O
default_value	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty attdef"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_attdef_get_insertion_point	function
(	O
const	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
attdef	pointer
->	O
insertion_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
attdef	pointer
->	O
insertion_pt	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_attdef_set_insertion_point	function
(	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attdef	pointer
->	O
insertion_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
attdef	pointer
->	O
insertion_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_attdef_get_height	function
(	O
const	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
attdef	pointer
->	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_attdef_set_height	function
(	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
const	O
double	O
height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attdef	pointer
->	O
height	double
=	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_attdef_get_extrusion	function
(	O
const	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
attdef	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
attdef	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
attdef	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_attdef_set_extrusion	function
(	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attdef	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
attdef	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
attdef	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_attdef_get_thickness	function
(	O
const	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
attdef	pointer
->	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_attdef_set_thickness	function
(	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attdef	pointer
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_attdef_get_rotation	function
(	O
const	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
attdef	pointer
->	O
rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_attdef_set_rotation	function
(	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
const	O
double	O
angle	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attdef	pointer
->	O
rotation	double
=	O
angle	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_attdef_get_vert_alignment	function
(	O
const	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
attdef	pointer
->	O
vert_alignment	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
-	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_attdef_set_vert_alignment	function
(	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
const	O
BITCODE_BS	short
alignment	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attdef	pointer
->	O
vert_alignment	short
=	O
alignment	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_attdef_get_horiz_alignment	function
(	O
const	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
attdef	pointer
->	O
horiz_alignment	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
-	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_attdef_set_horiz_alignment	function
(	O
dwg_ent_attdef	struct
*	O
restrict	O
attdef	pointer
,	O
const	O
BITCODE_BS	short
alignment	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
attdef	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
attdef	pointer
->	O
horiz_alignment	short
=	O
alignment	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_point_set_point	function
(	O
dwg_ent_point	struct
*	O
restrict	O
point	struct
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
retpoint	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
point	struct
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
retpoint	pointer
->	O
x	double
;	O
point	struct
->	O
y	double
=	O
retpoint	pointer
->	O
y	double
;	O
point	struct
->	O
z	double
=	O
retpoint	pointer
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_point_get_point	function
(	O
const	O
dwg_ent_point	struct
*	O
restrict	O
point	struct
,	O
dwg_point_3d	struct
*	O
restrict	O
retpoint	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
point	struct
)	O
{	O
*	O
error	int
=	O
0	int
;	O
retpoint	pointer
->	O
x	double
=	O
point	struct
->	O
x	double
;	O
retpoint	pointer
->	O
y	double
=	O
point	struct
->	O
y	double
;	O
retpoint	pointer
->	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_point_get_thickness	function
(	O
const	O
dwg_ent_point	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
point	struct
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
point	struct
->	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_point_set_thickness	function
(	O
dwg_ent_point	struct
*	O
restrict	O
point	struct
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
point	struct
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_point_set_extrusion	function
(	O
dwg_ent_point	struct
*	O
restrict	O
point	struct
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
point	struct
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
point	struct
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
point	struct
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_point_get_extrusion	function
(	O
const	O
dwg_ent_point	struct
*	O
restrict	O
point	struct
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
point	struct
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
point	struct
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
point	struct
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
point	struct
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_solid_get_thickness	function
(	O
const	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
solid	char
->	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_solid_set_thickness	function
(	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
solid	char
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_solid_get_elevation	function
(	O
const	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
solid	char
->	O
elevation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_solid_set_elevation	function
(	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
const	O
double	O
elevation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
solid	char
->	O
elevation	double
=	O
elevation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_solid_get_corner1	function
(	O
const	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
solid	char
->	O
corner1	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
solid	char
->	O
corner1	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_solid_set_corner1	function
(	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
solid	char
->	O
corner1	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
solid	char
->	O
corner1	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_solid_get_corner2	function
(	O
const	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
solid	char
->	O
corner2	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
solid	char
->	O
corner2	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_solid_set_corner2	function
(	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
solid	char
->	O
corner2	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
solid	char
->	O
corner2	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_solid_get_corner3	function
(	O
const	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
solid	char
->	O
corner3	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
solid	char
->	O
corner3	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_solid_set_corner3	function
(	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
solid	char
->	O
corner3	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
solid	char
->	O
corner3	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_solid_get_corner4	function
(	O
const	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
solid	char
->	O
corner4	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
solid	char
->	O
corner4	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_solid_set_corner4	function
(	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
solid	char
->	O
corner4	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
solid	char
->	O
corner4	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_solid_get_extrusion	function
(	O
const	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
solid	char
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
solid	char
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
solid	char
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_solid_set_extrusion	function
(	O
dwg_ent_solid	struct
*	O
restrict	O
solid	char
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
solid	char
)	O
{	O
*	O
error	int
=	O
0	int
;	O
solid	char
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
solid	char
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
solid	char
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_block_set_name	function
(	O
dwg_ent_block	struct
*	O
restrict	O
ent	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
ent	pointer
->	O
name	pointer
=	O
(	O
char	O
*	O
)	O
bit_utf8_to_TU	function
(	O
(	O
char	O
*	O
)	O
name	pointer
)	O
;	O
else	O
ent	pointer
->	O
name	pointer
=	O
(	O
char	O
*	O
)	O
name	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
*	O
dwg_ent_block_get_name	function
(	O
const	O
dwg_ent_block	struct
*	O
restrict	O
block	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
block	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
block	pointer
->	O
name	pointer
)	O
;	O
else	O
return	O
block	pointer
->	O
name	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty block"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_ray_get_point	function
(	O
const	O
dwg_ent_ray	struct
*	O
restrict	O
ray	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ray	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ray	pointer
->	O
point	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ray	pointer
->	O
point	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
ray	pointer
->	O
point	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_ray_set_point	function
(	O
dwg_ent_ray	struct
*	O
restrict	O
ray	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ray	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ray	pointer
->	O
point	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ray	pointer
->	O
point	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
ray	pointer
->	O
point	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_ray_get_vector	function
(	O
const	O
dwg_ent_ray	struct
*	O
restrict	O
ray	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ray	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
ray	pointer
->	O
vector	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
ray	pointer
->	O
vector	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
ray	pointer
->	O
vector	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_ray_set_vector	function
(	O
dwg_ent_ray	struct
*	O
restrict	O
ray	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ray	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ray	pointer
->	O
vector	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
ray	pointer
->	O
vector	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
ray	pointer
->	O
vector	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_xline_get_point	function
(	O
const	O
dwg_ent_xline	struct
*	O
restrict	O
xline	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
xline	pointer
->	O
point	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
xline	pointer
->	O
point	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
xline	pointer
->	O
point	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_xline_set_point	function
(	O
dwg_ent_xline	struct
*	O
restrict	O
xline	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
xline	pointer
->	O
point	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
xline	pointer
->	O
point	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
xline	pointer
->	O
point	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_xline_get_vector	function
(	O
const	O
dwg_ent_xline	struct
*	O
restrict	O
xline	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
xline	pointer
->	O
vector	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
xline	pointer
->	O
vector	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
xline	pointer
->	O
vector	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_xline_set_vector	function
(	O
dwg_ent_xline	struct
*	O
restrict	O
xline	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
xline	pointer
->	O
vector	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
xline	pointer
->	O
vector	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
xline	pointer
->	O
vector	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_trace_get_thickness	function
(	O
const	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
trace	pointer
->	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_trace_set_thickness	function
(	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
trace	pointer
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_trace_get_elevation	function
(	O
const	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
trace	pointer
->	O
elevation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_trace_set_elevation	function
(	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
const	O
double	O
elevation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
trace	pointer
->	O
elevation	double
=	O
elevation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_trace_get_corner1	function
(	O
const	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
trace	pointer
->	O
corner1	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
trace	pointer
->	O
corner1	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_trace_set_corner1	function
(	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
trace	pointer
->	O
corner1	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
trace	pointer
->	O
corner1	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_trace_get_corner2	function
(	O
const	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
trace	pointer
->	O
corner2	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
trace	pointer
->	O
corner2	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_trace_set_corner2	function
(	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
trace	pointer
->	O
corner2	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
trace	pointer
->	O
corner2	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_trace_get_corner3	function
(	O
const	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
trace	pointer
->	O
corner3	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
trace	pointer
->	O
corner3	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_trace_set_corner3	function
(	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
trace	pointer
->	O
corner3	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
trace	pointer
->	O
corner3	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_trace_get_corner4	function
(	O
const	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
trace	pointer
->	O
corner4	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
trace	pointer
->	O
corner4	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_trace_set_corner4	function
(	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
trace	pointer
->	O
corner4	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
trace	pointer
->	O
corner4	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_trace_get_extrusion	function
(	O
const	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
trace	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
trace	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
trace	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_trace_set_extrusion	function
(	O
dwg_ent_trace	struct
*	O
restrict	O
trace	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
trace	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
trace	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
trace	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
trace	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_vertex_3d_get_flag	function
(	O
const	O
dwg_ent_vertex_3d	struct
*	O
restrict	O
vert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vert	pointer
->	O
flag	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_vertex_3d_set_flag	function
(	O
dwg_ent_vertex_3d	struct
*	O
restrict	O
vert	pointer
,	O
const	O
char	O
flag	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
flag	short
=	O
flag	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_vertex_3d_get_point	function
(	O
const	O
dwg_ent_vertex_3d	struct
*	O
restrict	O
vert	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vert	pointer
->	O
point	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vert	pointer
->	O
point	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
vert	pointer
->	O
point	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_vertex_3d_set_point	function
(	O
dwg_ent_vertex_3d	struct
*	O
restrict	O
vert	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
point	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vert	pointer
->	O
point	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
vert	pointer
->	O
point	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_vertex_mesh_get_flag	function
(	O
const	O
dwg_ent_vertex_mesh	struct
*	O
restrict	O
vert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vert	pointer
->	O
flag	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_vertex_mesh_set_flag	function
(	O
dwg_ent_vertex_mesh	struct
*	O
restrict	O
vert	pointer
,	O
const	O
char	O
flag	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
flag	short
=	O
flag	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_vertex_mesh_get_point	function
(	O
const	O
dwg_ent_vertex_mesh	struct
*	O
restrict	O
vert	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vert	pointer
->	O
point	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vert	pointer
->	O
point	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
vert	pointer
->	O
point	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_vertex_mesh_set_point	function
(	O
dwg_ent_vertex_mesh	struct
*	O
restrict	O
vert	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
point	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vert	pointer
->	O
point	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
vert	pointer
->	O
point	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_vertex_pface_get_flag	function
(	O
const	O
dwg_ent_vertex_pface	struct
*	O
restrict	O
vert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vert	pointer
->	O
flag	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_vertex_pface_set_flag	function
(	O
dwg_ent_vertex_pface	struct
*	O
restrict	O
vert	pointer
,	O
const	O
char	O
flag	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
flag	short
=	O
flag	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_vertex_pface_get_point	function
(	O
const	O
dwg_ent_vertex_pface	struct
*	O
restrict	O
vert	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vert	pointer
->	O
point	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vert	pointer
->	O
point	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
vert	pointer
->	O
point	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_vertex_pface_set_point	function
(	O
dwg_ent_vertex_pface	struct
*	O
restrict	O
vert	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
point	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vert	pointer
->	O
point	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
vert	pointer
->	O
point	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_vertex_2d_get_flag	function
(	O
const	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vert	pointer
->	O
flag	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_vertex_2d_set_flag	function
(	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
const	O
char	O
flag	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
flag	short
=	O
flag	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_vertex_2d_get_point	function
(	O
const	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vert	pointer
->	O
point	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vert	pointer
->	O
point	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
vert	pointer
->	O
point	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_vertex_2d_set_point	function
(	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
point	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vert	pointer
->	O
point	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
vert	pointer
->	O
point	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_vertex_2d_get_start_width	function
(	O
const	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vert	pointer
->	O
start_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_vertex_2d_set_start_width	function
(	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
const	O
double	O
start_width	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
start_width	double
=	O
start_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_vertex_2d_get_end_width	function
(	O
const	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vert	pointer
->	O
end_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_vertex_2d_set_end_width	function
(	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
const	O
double	O
end_width	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
end_width	double
=	O
end_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_vertex_2d_get_bulge	function
(	O
const	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vert	pointer
->	O
bulge	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_vertex_2d_set_bulge	function
(	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
const	O
double	O
bulge	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
bulge	double
=	O
bulge	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_vertex_2d_get_tangent_dir	function
(	O
const	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vert	pointer
->	O
tangent_dir	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_vertex_2d_set_tangent_dir	function
(	O
dwg_ent_vertex_2d	struct
*	O
restrict	O
vert	pointer
,	O
const	O
double	O
tangent_dir	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vert	pointer
->	O
tangent_dir	double
=	O
tangent_dir	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_insert_get_ins_pt	function
(	O
const	O
dwg_ent_insert	struct
*	O
restrict	O
insert	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
insert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
insert	pointer
->	O
ins_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
insert	pointer
->	O
ins_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
insert	pointer
->	O
ins_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_insert_set_ins_pt	function
(	O
dwg_ent_insert	struct
*	O
restrict	O
insert	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
insert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
insert	pointer
->	O
ins_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
insert	pointer
->	O
ins_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
insert	pointer
->	O
ins_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_insert_get_scale	function
(	O
const	O
dwg_ent_insert	struct
*	O
restrict	O
insert	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
scale3d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
insert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
scale3d	pointer
->	O
x	double
=	O
insert	pointer
->	O
scale	struct
.	O
x	double
;	O
scale3d	pointer
->	O
y	double
=	O
insert	pointer
->	O
scale	struct
.	O
y	double
;	O
scale3d	pointer
->	O
z	double
=	O
insert	pointer
->	O
scale	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_insert_set_scale	function
(	O
dwg_ent_insert	struct
*	O
restrict	O
insert	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
scale3d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
insert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
insert	pointer
->	O
scale	struct
.	O
x	double
=	O
scale3d	pointer
->	O
x	double
;	O
insert	pointer
->	O
scale	struct
.	O
y	double
=	O
scale3d	pointer
->	O
y	double
;	O
insert	pointer
->	O
scale	struct
.	O
z	double
=	O
scale3d	pointer
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_insert_get_rotation	function
(	O
const	O
dwg_ent_insert	struct
*	O
restrict	O
insert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
insert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
insert	pointer
->	O
rotation	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_insert_set_rotation	function
(	O
dwg_ent_insert	struct
*	O
restrict	O
insert	pointer
,	O
const	O
double	O
rotation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
insert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
insert	pointer
->	O
rotation	double
=	O
rotation	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_insert_get_extrusion	function
(	O
const	O
dwg_ent_insert	struct
*	O
restrict	O
insert	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
insert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
insert	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
insert	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
insert	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_insert_set_extrusion	function
(	O
dwg_ent_insert	struct
*	O
restrict	O
insert	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
insert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
insert	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
insert	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
insert	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
char	O
dwg_ent_insert_has_attribs	function
(	O
dwg_ent_insert	struct
*	O
restrict	O
insert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
insert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
insert	pointer
->	O
has_attribs	char
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
'\0'	O
;	O
}	O
}	O
BITCODE_BL	int
dwg_ent_insert_get_num_owned	function
(	O
const	O
dwg_ent_insert	struct
*	O
restrict	O
insert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
insert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
insert	pointer
->	O
num_owned	int
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0L	int
;	O
}	O
}	O
dwg_object	struct
*	O
dwg_ent_insert_get_block_header	function
(	O
const	O
dwg_ent_insert	struct
*	O
restrict	O
insert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
insert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dwg_ref_get_object	function
(	O
insert	pointer
->	O
block_header	pointer
,	O
error	int
)	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_minsert_get_ins_pt	function
(	O
const	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
minsert	pointer
->	O
ins_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
minsert	pointer
->	O
ins_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
minsert	pointer
->	O
ins_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_minsert_set_ins_pt	function
(	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
minsert	pointer
->	O
ins_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
minsert	pointer
->	O
ins_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
minsert	pointer
->	O
ins_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty minsert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_minsert_get_scale	function
(	O
const	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
scale3d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
scale3d	pointer
->	O
x	double
=	O
minsert	pointer
->	O
scale	struct
.	O
x	double
;	O
scale3d	pointer
->	O
y	double
=	O
minsert	pointer
->	O
scale	struct
.	O
y	double
;	O
scale3d	pointer
->	O
z	double
=	O
minsert	pointer
->	O
scale	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty minsert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_minsert_set_scale	function
(	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
scale3d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
minsert	pointer
->	O
scale	struct
.	O
x	double
=	O
scale3d	pointer
->	O
x	double
;	O
minsert	pointer
->	O
scale	struct
.	O
y	double
=	O
scale3d	pointer
->	O
y	double
;	O
minsert	pointer
->	O
scale	struct
.	O
z	double
=	O
scale3d	pointer
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty minsert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_minsert_get_rotation	function
(	O
const	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
minsert	pointer
->	O
rotation	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty minsert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_minsert_set_rotation	function
(	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
const	O
double	O
rot_ang	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
minsert	pointer
->	O
rotation	double
=	O
rot_ang	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty minsert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_minsert_get_extrusion	function
(	O
const	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
minsert	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
minsert	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
minsert	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty minsert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_minsert_set_extrusion	function
(	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
minsert	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
minsert	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
minsert	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty minsert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
char	O
dwg_ent_minsert_has_attribs	function
(	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
minsert	pointer
->	O
has_attribs	char
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty minsert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
'\0'	O
;	O
}	O
}	O
BITCODE_BL	int
dwg_ent_minsert_get_num_owned	function
(	O
const	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
minsert	pointer
->	O
num_owned	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_minsert_set_num_cols	function
(	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
const	O
BITCODE_BL	int
num_cols	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
minsert	pointer
->	O
num_cols	short
=	O
num_cols	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_minsert_get_num_cols	function
(	O
const	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
minsert	pointer
->	O
num_cols	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_minsert_set_num_rows	function
(	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
const	O
BITCODE_BL	int
num_rows	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
minsert	pointer
->	O
num_rows	short
=	O
num_rows	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_minsert_get_num_rows	function
(	O
const	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
minsert	pointer
->	O
num_rows	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
double	O
dwg_ent_minsert_get_col_spacing	function
(	O
const	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
minsert	pointer
->	O
col_spacing	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_minsert_set_col_spacing	function
(	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
const	O
double	O
spacing	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
minsert	pointer
->	O
col_spacing	double
=	O
spacing	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_minsert_get_row_spacing	function
(	O
const	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
minsert	pointer
->	O
row_spacing	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_minsert_set_row_spacing	function
(	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
const	O
double	O
spacing	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
minsert	pointer
->	O
row_spacing	double
=	O
spacing	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
dwg_object	struct
*	O
dwg_ent_minsert_get_block_header	function
(	O
const	O
dwg_ent_minsert	struct
*	O
restrict	O
minsert	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
minsert	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dwg_ref_get_object	function
(	O
minsert	pointer
->	O
block_header	pointer
,	O
error	int
)	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty insert"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
char	O
*	O
dwg_obj_mlinestyle_get_name	function
(	O
const	O
dwg_obj_mlinestyle	struct
*	O
restrict	O
mlinestyle	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mlinestyle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
mlinestyle	pointer
->	O
name	pointer
)	O
;	O
else	O
return	O
mlinestyle	pointer
->	O
name	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty mlinestyle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_obj_mlinestyle_set_name	function
(	O
dwg_obj_mlinestyle	struct
*	O
restrict	O
mlinestyle	pointer
,	O
const	O
char	O
*	O
restrict	O
name	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mlinestyle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
mlinestyle	pointer
->	O
name	pointer
=	O
(	O
char	O
*	O
)	O
bit_utf8_to_TU	function
(	O
(	O
char	O
*	O
)	O
name	pointer
)	O
;	O
else	O
mlinestyle	pointer
->	O
name	pointer
=	O
(	O
char	O
*	O
)	O
name	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
*	O
dwg_obj_mlinestyle_get_desc	function
(	O
const	O
dwg_obj_mlinestyle	struct
*	O
restrict	O
mlinestyle	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mlinestyle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
mlinestyle	pointer
->	O
desc	pointer
)	O
;	O
else	O
return	O
mlinestyle	pointer
->	O
desc	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty mlinestyle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_obj_mlinestyle_set_desc	function
(	O
dwg_obj_mlinestyle	struct
*	O
restrict	O
mlinestyle	pointer
,	O
const	O
char	O
*	O
restrict	O
desc	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mlinestyle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
mlinestyle	pointer
->	O
desc	pointer
=	O
(	O
char	O
*	O
)	O
bit_utf8_to_TU	function
(	O
(	O
char	O
*	O
)	O
desc	pointer
)	O
;	O
else	O
mlinestyle	pointer
->	O
desc	pointer
=	O
(	O
char	O
*	O
)	O
desc	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
int	O
dwg_obj_mlinestyle_get_flag	function
(	O
const	O
dwg_obj_mlinestyle	struct
*	O
restrict	O
mlinestyle	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mlinestyle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mlinestyle	pointer
->	O
flag	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty mlinestyle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_obj_mlinestyle_set_flag	function
(	O
dwg_obj_mlinestyle	struct
*	O
restrict	O
mlinestyle	pointer
,	O
const	O
int	O
flags	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mlinestyle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mlinestyle	pointer
->	O
flag	short
=	O
flags	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_obj_mlinestyle_get_start_angle	function
(	O
const	O
dwg_obj_mlinestyle	struct
*	O
restrict	O
mlinestyle	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mlinestyle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mlinestyle	pointer
->	O
start_angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty mlinestyle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_obj_mlinestyle_set_start_angle	function
(	O
dwg_obj_mlinestyle	struct
*	O
restrict	O
mlinestyle	pointer
,	O
const	O
double	O
start_angle	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mlinestyle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mlinestyle	pointer
->	O
start_angle	double
=	O
start_angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty mlinestyle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_obj_mlinestyle_get_end_angle	function
(	O
const	O
dwg_obj_mlinestyle	struct
*	O
restrict	O
mlinestyle	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mlinestyle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mlinestyle	pointer
->	O
end_angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty mlinestyle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_obj_mlinestyle_set_end_angle	function
(	O
dwg_obj_mlinestyle	struct
*	O
restrict	O
mlinestyle	pointer
,	O
const	O
double	O
end_angle	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mlinestyle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mlinestyle	pointer
->	O
end_angle	double
=	O
end_angle	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty mlinestyle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
char	O
dwg_obj_mlinestyle_get_num_lines	function
(	O
const	O
dwg_obj_mlinestyle	struct
*	O
restrict	O
mlinestyle	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mlinestyle	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mlinestyle	pointer
->	O
num_lines	char
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty mlinestyle"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
'\0'	O
;	O
}	O
}	O
BITCODE_BS	short
dwg_obj_appid_control_get_num_entries	function
(	O
const	O
dwg_obj_appid_control	struct
*	O
restrict	O
appid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
appid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
appid	pointer
->	O
num_entries	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty appid"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
dwg_object_ref	struct
*	O
dwg_obj_appid_control_get_appid	function
(	O
const	O
dwg_obj_appid_control	struct
*	O
restrict	O
appid	pointer
,	O
const	O
BITCODE_BS	short
idx	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
appid	pointer
!=	O
NULL	O
&&	O
idx	short
<	O
appid	pointer
->	O
num_entries	short
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
appid	pointer
->	O
entries	pointer
[	O
idx	short
]	O
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
char	O
*	O
dwg_obj_appid_get_name	function
(	O
const	O
dwg_obj_appid	struct
*	O
restrict	O
appid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
appid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
appid	pointer
->	O
name	pointer
)	O
;	O
else	O
return	O
appid	pointer
->	O
name	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty appid"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_RC	char
dwg_obj_appid_get_flag	function
(	O
const	O
dwg_obj_appid	struct
*	O
restrict	O
appid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
appid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
appid	pointer
->	O
flag	short
&	O
1	int
||	O
appid	pointer
->	O
xrefref	char
>>	O
6	int
||	O
appid	pointer
->	O
xrefdep	char
>>	O
4	int
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty appid"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_obj_appid_set_flag	function
(	O
dwg_obj_appid	struct
*	O
restrict	O
appid	pointer
,	O
const	O
BITCODE_RC	char
flag	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
appid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
appid	pointer
->	O
flag	short
=	O
flag	short
;	O
appid	pointer
->	O
xrefdep	char
=	O
flag	short
&	O
16	int
;	O
appid	pointer
->	O
xrefref	char
=	O
flag	short
&	O
64	int
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty appid"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
dwg_obj_appid_control	struct
*	O
dwg_obj_appid_get_appid_control	function
(	O
const	O
dwg_obj_appid	struct
*	O
restrict	O
appid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
appid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
appid	pointer
->	O
parent	pointer
->	O
ownerhandle	pointer
->	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
tio	union
.	O
APPID_CONTROL	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty appid"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
char	O
*	O
dwg_ent_dim_get_block_name	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
char	O
*	O
name	pointer
=	O
(	O
(	O
dwg_ent_dim_linear	struct
*	O
)	O
dim	pointer
)	O
->	O
block	pointer
->	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
tio	union
.	O
BLOCK_HEADER	pointer
->	O
name	pointer
;	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
name	pointer
)	O
;	O
else	O
return	O
name	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty dim"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
double	O
dwg_ent_dim_get_elevation	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
elevation	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty dim"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_dim_set_elevation	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
double	O
elevation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
elevation	double
=	O
elevation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_dim_get_flag1	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
flag1	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_dim_set_flag1	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
char	O
flag	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
flag1	char
=	O
flag	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_dim_get_act_measurement	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
act_measurement	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_dim_set_act_measurement	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
double	O
act_measurement	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
act_measurement	double
=	O
act_measurement	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_dim_get_horiz_dir	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
horiz_dir	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_dim_set_horiz_dir	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
double	O
horiz_dir	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
horiz_dir	double
=	O
horiz_dir	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_dim_get_lspace_factor	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
lspace_factor	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_dim_set_lspace_factor	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
double	O
factor	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
lspace_factor	double
=	O
factor	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_dim_get_lspace_style	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
lspace_style	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_dim_set_lspace_style	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
BITCODE_BS	short
style	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
lspace_style	short
=	O
style	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_dim_get_attachment	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
attachment	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_dim_set_attachment	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
BITCODE_BS	short
attachment	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
attachment	short
=	O
attachment	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_set_extrusion	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
dim	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
dim	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_get_extrusion	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
dim	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
dim	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
dim	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
*	O
dwg_ent_dim_get_user_text	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
dim	pointer
->	O
user_text	pointer
)	O
;	O
else	O
return	O
dim	pointer
->	O
user_text	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty dim"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_dim_set_user_text	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
char	O
*	O
restrict	O
text	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
dim	pointer
->	O
user_text	pointer
=	O
(	O
char	O
*	O
)	O
bit_utf8_to_TU	function
(	O
(	O
char	O
*	O
)	O
text	pointer
)	O
;	O
else	O
dim	pointer
->	O
user_text	pointer
=	O
(	O
char	O
*	O
)	O
text	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_dim_get_text_rotation	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
text_rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_dim_set_text_rotation	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
double	O
rotation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
text_rotation	double
=	O
rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_dim_get_ins_rotation	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
ins_rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_dim_set_ins_rotation	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
double	O
rotation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
ins_rotation	double
=	O
rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_dim_get_flip_arrow1	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
flip_arrow1	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_dim_set_flip_arrow1	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
char	O
flip_arrow	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
&&	O
(	O
flip_arrow	char
==	O
0	int
||	O
flip_arrow	char
==	O
1	int
)	O
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
flip_arrow1	char
=	O
flip_arrow	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_dim_get_flip_arrow2	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
flip_arrow2	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_dim_set_flip_arrow2	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
char	O
flip_arrow	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
&&	O
(	O
flip_arrow	char
==	O
0	int
||	O
flip_arrow	char
==	O
1	int
)	O
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
flip_arrow2	char
=	O
flip_arrow	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_set_text_midpt	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
text_midpt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dim	pointer
->	O
text_midpt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_get_text_midpt	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dim	pointer
->	O
text_midpt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dim	pointer
->	O
text_midpt	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_set_ins_scale	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
scale3d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
ins_scale	struct
.	O
x	double
=	O
scale3d	pointer
->	O
x	double
;	O
dim	pointer
->	O
ins_scale	struct
.	O
y	double
=	O
scale3d	pointer
->	O
y	double
;	O
dim	pointer
->	O
ins_scale	struct
.	O
z	double
=	O
scale3d	pointer
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_get_ins_scale	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
scale3d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
scale3d	pointer
->	O
x	double
=	O
dim	pointer
->	O
ins_scale	struct
.	O
x	double
;	O
scale3d	pointer
->	O
y	double
=	O
dim	pointer
->	O
ins_scale	struct
.	O
y	double
;	O
scale3d	pointer
->	O
z	double
=	O
dim	pointer
->	O
ins_scale	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_set_clone_ins_pt	function
(	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
clone_ins_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dim	pointer
->	O
clone_ins_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_get_clone_ins_pt	function
(	O
const	O
dwg_ent_dim	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dim	pointer
->	O
clone_ins_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dim	pointer
->	O
clone_ins_pt	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_dim_ordinate_get_flag2	function
(	O
const	O
dwg_ent_dim_ordinate	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
flag2	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_dim_ordinate_set_flag2	function
(	O
dwg_ent_dim_ordinate	struct
*	O
restrict	O
dim	pointer
,	O
const	O
char	O
flag	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
flag2	char
=	O
flag	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ordinate_set_def_pt	function
(	O
dwg_ent_dim_ordinate	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
def_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dim	pointer
->	O
def_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
dim	pointer
->	O
def_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ordinate_get_def_pt	function
(	O
const	O
dwg_ent_dim_ordinate	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dim	pointer
->	O
def_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dim	pointer
->	O
def_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
dim	pointer
->	O
def_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ordinate_set_feature_location_pt	function
(	O
dwg_ent_dim_ordinate	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
feature_location_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dim	pointer
->	O
feature_location_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
dim	pointer
->	O
feature_location_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ordinate_get_feature_location_pt	function
(	O
const	O
dwg_ent_dim_ordinate	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dim	pointer
->	O
feature_location_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dim	pointer
->	O
feature_location_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
dim	pointer
->	O
feature_location_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ordinate_set_leader_endpt	function
(	O
dwg_ent_dim_ordinate	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
leader_endpt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dim	pointer
->	O
leader_endpt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
dim	pointer
->	O
leader_endpt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ordinate_get_leader_endpt	function
(	O
const	O
dwg_ent_dim_ordinate	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dim	pointer
->	O
leader_endpt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dim	pointer
->	O
leader_endpt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
dim	pointer
->	O
leader_endpt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_linear_set_def_pt	function
(	O
dwg_ent_dim_linear	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
def_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dim	pointer
->	O
def_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
dim	pointer
->	O
def_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_linear_get_def_pt	function
(	O
const	O
dwg_ent_dim_linear	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dim	pointer
->	O
def_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dim	pointer
->	O
def_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
dim	pointer
->	O
def_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_linear_set_13_pt	function
(	O
dwg_ent_dim_linear	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
_13_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dim	pointer
->	O
_13_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
dim	pointer
->	O
_13_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_linear_get_13_pt	function
(	O
const	O
dwg_ent_dim_linear	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dim	pointer
->	O
_13_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dim	pointer
->	O
_13_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
dim	pointer
->	O
_13_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_linear_set_14_pt	function
(	O
dwg_ent_dim_linear	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
_14_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dim	pointer
->	O
_14_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
dim	pointer
->	O
_14_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_linear_get_14_pt	function
(	O
const	O
dwg_ent_dim_linear	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dim	pointer
->	O
_14_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dim	pointer
->	O
_14_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
dim	pointer
->	O
_14_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_dim_linear_get_ext_line_rotation	function
(	O
const	O
dwg_ent_dim_linear	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
ext_line_rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_dim_linear_set_ext_line_rotation	function
(	O
dwg_ent_dim_linear	struct
*	O
restrict	O
dim	pointer
,	O
const	O
double	O
rotation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
ext_line_rotation	double
=	O
rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_dim_linear_get_dim_rotation	function
(	O
const	O
dwg_ent_dim_linear	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
dim_rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_dim_linear_set_dim_rotation	function
(	O
dwg_ent_dim_linear	struct
*	O
restrict	O
dim	pointer
,	O
const	O
double	O
rotation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
dim_rotation	double
=	O
rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_aligned_set_def_pt	function
(	O
dwg_ent_dim_aligned	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
def_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dim	pointer
->	O
def_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
dim	pointer
->	O
def_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_aligned_get_def_pt	function
(	O
const	O
dwg_ent_dim_aligned	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dim	pointer
->	O
def_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dim	pointer
->	O
def_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
dim	pointer
->	O
def_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_aligned_set_13_pt	function
(	O
dwg_ent_dim_aligned	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
_13_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dim	pointer
->	O
_13_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
dim	pointer
->	O
_13_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_aligned_get_13_pt	function
(	O
const	O
dwg_ent_dim_aligned	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dim	pointer
->	O
_13_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dim	pointer
->	O
_13_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
dim	pointer
->	O
_13_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_aligned_set_14_pt	function
(	O
dwg_ent_dim_aligned	struct
*	O
restrict	O
dim	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
_14_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dim	pointer
->	O
_14_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
dim	pointer
->	O
_14_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_aligned_get_14_pt	function
(	O
const	O
dwg_ent_dim_aligned	struct
*	O
restrict	O
dim	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dim	pointer
->	O
_14_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dim	pointer
->	O
_14_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
dim	pointer
->	O
_14_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_dim_aligned_get_ext_line_rotation	function
(	O
const	O
dwg_ent_dim_aligned	struct
*	O
restrict	O
dim	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dim	pointer
->	O
ext_line_rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_dim_aligned_set_ext_line_rotation	function
(	O
dwg_ent_dim_aligned	struct
*	O
restrict	O
dim	pointer
,	O
const	O
double	O
rotation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dim	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dim	pointer
->	O
ext_line_rotation	double
=	O
rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang3pt_set_def_pt	function
(	O
dwg_ent_dim_ang3pt	struct
*	O
restrict	O
ang	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ang	pointer
->	O
def_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ang	pointer
->	O
def_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
ang	pointer
->	O
def_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang3pt_get_def_pt	function
(	O
const	O
dwg_ent_dim_ang3pt	struct
*	O
restrict	O
ang	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ang	pointer
->	O
def_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ang	pointer
->	O
def_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
ang	pointer
->	O
def_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang3pt_set_13_pt	function
(	O
dwg_ent_dim_ang3pt	struct
*	O
restrict	O
ang	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ang	pointer
->	O
_13_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ang	pointer
->	O
_13_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
ang	pointer
->	O
_13_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang3pt_get_13_pt	function
(	O
const	O
dwg_ent_dim_ang3pt	struct
*	O
restrict	O
ang	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ang	pointer
->	O
_13_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ang	pointer
->	O
_13_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
ang	pointer
->	O
_13_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang3pt_set_14_pt	function
(	O
dwg_ent_dim_ang3pt	struct
*	O
restrict	O
ang	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ang	pointer
->	O
_14_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ang	pointer
->	O
_14_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
ang	pointer
->	O
_14_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang3pt_get_14_pt	function
(	O
const	O
dwg_ent_dim_ang3pt	struct
*	O
restrict	O
ang	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ang	pointer
->	O
_14_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ang	pointer
->	O
_14_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
ang	pointer
->	O
_14_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang3pt_set_first_arc_pt	function
(	O
dwg_ent_dim_ang3pt	struct
*	O
restrict	O
ang	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ang	pointer
->	O
first_arc_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ang	pointer
->	O
first_arc_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
ang	pointer
->	O
first_arc_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang3pt_get_first_arc_pt	function
(	O
const	O
dwg_ent_dim_ang3pt	struct
*	O
restrict	O
ang	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ang	pointer
->	O
first_arc_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ang	pointer
->	O
first_arc_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
ang	pointer
->	O
first_arc_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang2ln_set_def_pt	function
(	O
dwg_ent_dim_ang2ln	struct
*	O
restrict	O
ang	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ang	pointer
->	O
def_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ang	pointer
->	O
def_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
ang	pointer
->	O
def_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang2ln_get_def_pt	function
(	O
const	O
dwg_ent_dim_ang2ln	struct
*	O
restrict	O
ang	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ang	pointer
->	O
def_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ang	pointer
->	O
def_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
ang	pointer
->	O
def_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang2ln_set_13_pt	function
(	O
dwg_ent_dim_ang2ln	struct
*	O
restrict	O
ang	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ang	pointer
->	O
_13_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ang	pointer
->	O
_13_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
ang	pointer
->	O
_13_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang2ln_get_13_pt	function
(	O
const	O
dwg_ent_dim_ang2ln	struct
*	O
restrict	O
ang	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ang	pointer
->	O
_13_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ang	pointer
->	O
_13_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
ang	pointer
->	O
_13_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang2ln_set_14_pt	function
(	O
dwg_ent_dim_ang2ln	struct
*	O
restrict	O
ang	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ang	pointer
->	O
_14_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ang	pointer
->	O
_14_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
ang	pointer
->	O
_14_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang2ln_get_14_pt	function
(	O
const	O
dwg_ent_dim_ang2ln	struct
*	O
restrict	O
ang	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ang	pointer
->	O
_14_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ang	pointer
->	O
_14_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
ang	pointer
->	O
_14_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang2ln_set_first_arc_pt	function
(	O
dwg_ent_dim_ang2ln	struct
*	O
restrict	O
ang	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ang	pointer
->	O
first_arc_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ang	pointer
->	O
first_arc_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
ang	pointer
->	O
first_arc_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang2ln_get_first_arc_pt	function
(	O
const	O
dwg_ent_dim_ang2ln	struct
*	O
restrict	O
ang	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ang	pointer
->	O
first_arc_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ang	pointer
->	O
first_arc_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
ang	pointer
->	O
first_arc_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang2ln_set_16_pt	function
(	O
dwg_ent_dim_ang2ln	struct
*	O
restrict	O
ang	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
ang	pointer
->	O
_16_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
ang	pointer
->	O
_16_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_ang2ln_get_16_pt	function
(	O
const	O
dwg_ent_dim_ang2ln	struct
*	O
restrict	O
ang	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ang	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
ang	pointer
->	O
_16_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
ang	pointer
->	O
_16_pt	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_radius_set_def_pt	function
(	O
dwg_ent_dim_radius	struct
*	O
restrict	O
radius	double
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
radius	double
)	O
{	O
*	O
error	int
=	O
0	int
;	O
radius	double
->	O
def_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
radius	double
->	O
def_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
radius	double
->	O
def_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty radius"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_dim_radius_get_def_pt	function
(	O
const	O
dwg_ent_dim_radius	struct
*	O
restrict	O
radius	double
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
radius	double
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
radius	double
->	O
def_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
radius	double
->	O
def_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
radius	double
->	O
def_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty radius"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_dim_radius_set_first_arc_pt	function
(	O
dwg_ent_dim_radius	struct
*	O
restrict	O
radius	double
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
radius	double
)	O
{	O
*	O
error	int
=	O
0	int
;	O
radius	double
->	O
first_arc_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
radius	double
->	O
first_arc_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
radius	double
->	O
first_arc_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty radius"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_dim_radius_get_first_arc_pt	function
(	O
const	O
dwg_ent_dim_radius	struct
*	O
restrict	O
radius	double
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
radius	double
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
radius	double
->	O
first_arc_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
radius	double
->	O
first_arc_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
radius	double
->	O
first_arc_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty radius"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_dim_radius_get_leader_length	function
(	O
const	O
dwg_ent_dim_radius	struct
*	O
restrict	O
radius	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
radius	double
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
radius	double
->	O
leader_len	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty radius"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_dim_radius_set_leader_length	function
(	O
dwg_ent_dim_radius	struct
*	O
restrict	O
radius	double
,	O
const	O
double	O
length	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
radius	double
)	O
{	O
*	O
error	int
=	O
0	int
;	O
radius	double
->	O
leader_len	double
=	O
length	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty radius"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_dim_diameter_set_def_pt	function
(	O
dwg_ent_dim_diameter	struct
*	O
restrict	O
dia	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dia	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dia	pointer
->	O
def_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dia	pointer
->	O
def_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
dia	pointer
->	O
def_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_diameter_get_def_pt	function
(	O
const	O
dwg_ent_dim_diameter	struct
*	O
restrict	O
dia	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dia	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dia	pointer
->	O
def_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dia	pointer
->	O
def_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
dia	pointer
->	O
def_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_diameter_set_first_arc_pt	function
(	O
dwg_ent_dim_diameter	struct
*	O
restrict	O
dia	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dia	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dia	pointer
->	O
first_arc_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
dia	pointer
->	O
first_arc_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
dia	pointer
->	O
first_arc_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_dim_diameter_get_first_arc_pt	function
(	O
const	O
dwg_ent_dim_diameter	struct
*	O
restrict	O
dia	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dia	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
dia	pointer
->	O
first_arc_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
dia	pointer
->	O
first_arc_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
dia	pointer
->	O
first_arc_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_dim_diameter_get_leader_length	function
(	O
const	O
dwg_ent_dim_diameter	struct
*	O
restrict	O
dia	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dia	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
dia	pointer
->	O
leader_len	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty dia"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_dim_diameter_set_leader_length	function
(	O
dwg_ent_dim_diameter	struct
*	O
restrict	O
dia	pointer
,	O
const	O
double	O
length	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
dia	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
dia	pointer
->	O
leader_len	double
=	O
length	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty dia"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_shape_get_ins_pt	function
(	O
const	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
shape	pointer
->	O
ins_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
shape	pointer
->	O
ins_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
shape	pointer
->	O
ins_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape or point"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_shape_set_ins_pt	function
(	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
shape	pointer
->	O
ins_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
shape	pointer
->	O
ins_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
shape	pointer
->	O
ins_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape or point"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_shape_get_scale	function
(	O
const	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
shape	pointer
->	O
scale	struct
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_shape_set_scale	function
(	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
const	O
double	O
scale	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
shape	pointer
->	O
scale	struct
=	O
scale	struct
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_shape_get_rotation	function
(	O
const	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
shape	pointer
->	O
rotation	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_shape_set_rotation	function
(	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
const	O
double	O
rotation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
shape	pointer
->	O
rotation	double
=	O
rotation	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_shape_get_width_factor	function
(	O
const	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
shape	pointer
->	O
width_factor	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_shape_set_width_factor	function
(	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
const	O
double	O
width_factor	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
shape	pointer
->	O
width_factor	double
=	O
width_factor	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_shape_get_oblique	function
(	O
const	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
shape	pointer
->	O
oblique	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_shape_set_oblique	function
(	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
const	O
double	O
oblique	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
shape	pointer
->	O
oblique	double
=	O
oblique	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_shape_get_thickness	function
(	O
const	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
shape	pointer
->	O
thickness	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_shape_set_thickness	function
(	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
shape	pointer
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty shape"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_shape_get_shape_no	function
(	O
const	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
shape	pointer
->	O
style_id	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_shape_set_shape_no	function
(	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
const	O
BITCODE_BS	short
id	int
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
shape	pointer
->	O
style_id	short
=	O
id	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_shape_get_style_id	function
(	O
const	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
shape	pointer
->	O
style_id	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_shape_set_style_id	function
(	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
const	O
BITCODE_BS	short
id	int
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
shape	pointer
->	O
style_id	short
=	O
id	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_shape_get_extrusion	function
(	O
const	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
shape	pointer
->	O
extrusion	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
shape	pointer
->	O
extrusion	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
shape	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_shape_set_extrusion	function
(	O
dwg_ent_shape	struct
*	O
restrict	O
shape	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
shape	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
shape	pointer
->	O
extrusion	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
shape	pointer
->	O
extrusion	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
shape	pointer
->	O
extrusion	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_mtext_set_insertion_pt	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
insertion_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
mtext	pointer
->	O
insertion_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
mtext	pointer
->	O
insertion_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_mtext_get_insertion_pt	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
mtext	pointer
->	O
insertion_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
mtext	pointer
->	O
insertion_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
mtext	pointer
->	O
insertion_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_mtext_set_extrusion	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
mtext	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
mtext	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_mtext_get_extrusion	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
mtext	pointer
->	O
extrusion	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
mtext	pointer
->	O
extrusion	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
mtext	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_mtext_set_x_axis_dir	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
x_axis_dir	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
mtext	pointer
->	O
x_axis_dir	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
mtext	pointer
->	O
x_axis_dir	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_mtext_get_x_axis_dir	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
mtext	pointer
->	O
x_axis_dir	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
mtext	pointer
->	O
x_axis_dir	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
mtext	pointer
->	O
x_axis_dir	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_mtext_set_rect_height	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
const	O
double	O
rect_height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
rect_height	double
=	O
rect_height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_mtext_get_rect_height	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mtext	pointer
->	O
rect_height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_mtext_set_rect_width	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
const	O
double	O
rect_width	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
rect_width	double
=	O
rect_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_mtext_get_rect_width	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mtext	pointer
->	O
rect_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_mtext_set_text_height	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
const	O
double	O
text_height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
text_height	double
=	O
text_height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_mtext_get_text_height	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mtext	pointer
->	O
text_height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_mtext_get_attachment	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mtext	pointer
->	O
attachment	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_mtext_set_attachment	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
const	O
BITCODE_BS	short
attachment	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
attachment	short
=	O
attachment	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_mtext_get_drawing_dir	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mtext	pointer
->	O
drawing_dir	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_mtext_set_drawing_dir	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
const	O
BITCODE_BS	short
dir	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
drawing_dir	short
=	O
dir	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_mtext_get_extents_height	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mtext	pointer
->	O
extents_height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_mtext_set_extents_height	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
const	O
double	O
height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
extents_height	double
=	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_mtext_get_extents_width	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mtext	pointer
->	O
extents_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_mtext_set_extents_width	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
const	O
double	O
wid	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
extents_width	double
=	O
wid	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
*	O
dwg_ent_mtext_get_text	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
ent	pointer
->	O
text	pointer
)	O
;	O
else	O
return	O
ent	pointer
->	O
text	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_mtext_set_text	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
ent	pointer
,	O
char	O
*	O
text	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
ent	pointer
->	O
text	pointer
=	O
(	O
char	O
*	O
)	O
bit_utf8_to_TU	function
(	O
text	pointer
)	O
;	O
else	O
ent	pointer
->	O
text	pointer
=	O
text	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_mtext_get_linespace_style	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mtext	pointer
->	O
linespace_style	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_mtext_set_linespace_style	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
BITCODE_BS	short
style	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
linespace_style	short
=	O
style	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_mtext_get_linespace_factor	function
(	O
const	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mtext	pointer
->	O
linespace_factor	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_mtext_set_linespace_factor	function
(	O
dwg_ent_mtext	struct
*	O
restrict	O
mtext	pointer
,	O
const	O
double	O
factor	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mtext	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mtext	pointer
->	O
linespace_factor	double
=	O
factor	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_leader_set_annot_type	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
BITCODE_BS	short
type	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
annot_type	short
=	O
type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_leader_get_annot_type	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
leader	pointer
->	O
annot_type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_leader_set_path_type	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
BITCODE_BS	short
type	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
path_type	short
=	O
type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_leader_get_path_type	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
leader	pointer
->	O
path_type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
BITCODE_BL	int
dwg_ent_leader_get_num_points	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
leader	pointer
->	O
num_points	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_leader_set_origin	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
origin	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
leader	pointer
->	O
origin	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
leader	pointer
->	O
origin	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_leader_get_origin	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
leader	pointer
->	O
origin	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
leader	pointer
->	O
origin	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
leader	pointer
->	O
origin	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_leader_set_extrusion	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
extrusion	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
leader	pointer
->	O
extrusion	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
leader	pointer
->	O
extrusion	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_leader_get_extrusion	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
leader	pointer
->	O
extrusion	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
leader	pointer
->	O
extrusion	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
leader	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_leader_set_x_direction	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
x_direction	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
leader	pointer
->	O
x_direction	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
leader	pointer
->	O
x_direction	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_leader_get_x_direction	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
leader	pointer
->	O
x_direction	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
leader	pointer
->	O
x_direction	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
leader	pointer
->	O
x_direction	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_leader_set_offset_to_block_ins_pt	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
offset_to_block_ins_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
leader	pointer
->	O
offset_to_block_ins_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
leader	pointer
->	O
offset_to_block_ins_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_leader_get_offset_to_block_ins_pt	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
leader	pointer
->	O
offset_to_block_ins_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
leader	pointer
->	O
offset_to_block_ins_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
leader	pointer
->	O
offset_to_block_ins_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_leader_set_dimgap	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
double	O
dimgap	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
dimgap	double
=	O
dimgap	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_leader_get_dimgap	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
leader	pointer
->	O
dimgap	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_leader_set_box_height	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
double	O
height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
box_height	double
=	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_leader_get_box_height	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
leader	pointer
->	O
box_height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_leader_set_box_width	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
double	O
width	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
box_width	double
=	O
width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_leader_get_box_width	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
leader	pointer
->	O
box_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_leader_set_hookline_dir	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
char	O
dir	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
hookline_dir	char
=	O
dir	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_leader_get_hookline_dir	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
leader	pointer
->	O
hookline_dir	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_leader_set_arrowhead_on	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
char	O
arrow	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
arrowhead_on	char
=	O
arrow	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_leader_get_arrowhead_on	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
leader	pointer
->	O
arrowhead_on	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_leader_set_arrowhead_type	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
BITCODE_BS	short
type	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
leader	pointer
->	O
arrowhead_type	short
=	O
type	short
;	O
*	O
error	int
=	O
0	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_leader_get_arrowhead_type	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
leader	pointer
->	O
arrowhead_type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_leader_set_dimasz	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
double	O
dimasz	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
dimasz	double
=	O
dimasz	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_leader_get_dimasz	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
leader	pointer
->	O
dimasz	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_leader_set_byblock_color	function
(	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
const	O
BITCODE_BS	short
color	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
leader	pointer
->	O
byblock_color	short
=	O
color	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_leader_get_byblock_color	function
(	O
const	O
dwg_ent_leader	struct
*	O
restrict	O
leader	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
leader	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
leader	pointer
->	O
byblock_color	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_tolerance_set_height	function
(	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
const	O
double	O
height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
tol	pointer
->	O
height	double
=	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_tolerance_get_height	function
(	O
const	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
tol	pointer
->	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_tolerance_set_dimgap	function
(	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
const	O
double	O
dimgap	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
tol	pointer
->	O
dimgap	double
=	O
dimgap	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_tolerance_get_dimgap	function
(	O
const	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
tol	pointer
->	O
dimgap	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_tolerance_set_ins_pt	function
(	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
tol	pointer
->	O
ins_pt	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
tol	pointer
->	O
ins_pt	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
tol	pointer
->	O
ins_pt	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_tolerance_get_ins_pt	function
(	O
const	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
tol	pointer
->	O
ins_pt	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
tol	pointer
->	O
ins_pt	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
tol	pointer
->	O
ins_pt	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_tolerance_set_x_direction	function
(	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
tol	pointer
->	O
x_direction	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
tol	pointer
->	O
x_direction	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
tol	pointer
->	O
x_direction	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_tolerance_get_x_direction	function
(	O
const	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
tol	pointer
->	O
x_direction	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
tol	pointer
->	O
x_direction	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
tol	pointer
->	O
x_direction	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_tolerance_set_extrusion	function
(	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
tol	pointer
->	O
extrusion	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
tol	pointer
->	O
extrusion	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
tol	pointer
->	O
extrusion	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_tolerance_get_extrusion	function
(	O
const	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
tol	pointer
->	O
extrusion	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
tol	pointer
->	O
extrusion	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
tol	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_tolerance_set_text_string	function
(	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
const	O
char	O
*	O
restrict	O
string	array
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
tol	pointer
->	O
text_string	pointer
=	O
(	O
char	O
*	O
)	O
bit_utf8_to_TU	function
(	O
(	O
char	O
*	O
)	O
string	array
)	O
;	O
else	O
tol	pointer
->	O
text_string	pointer
=	O
(	O
char	O
*	O
)	O
string	array
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
*	O
dwg_ent_tolerance_get_text_string	function
(	O
const	O
dwg_ent_tolerance	struct
*	O
restrict	O
tol	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
tol	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
tol	pointer
->	O
text_string	pointer
)	O
;	O
else	O
return	O
tol	pointer
->	O
text_string	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_lwpline_get_flag	function
(	O
const	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
lwpline	pointer
->	O
flag	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_lwpline_set_flag	function
(	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
char	O
flags	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
lwpline	pointer
->	O
flag	short
=	O
flags	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_lwpline_get_const_width	function
(	O
const	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
lwpline	pointer
->	O
const_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_lwpline_set_const_width	function
(	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
const	O
double	O
const_width	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
lwpline	pointer
->	O
const_width	double
=	O
const_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_lwpline_get_elevation	function
(	O
const	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
lwpline	pointer
->	O
elevation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_lwpline_set_elevation	function
(	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
const	O
double	O
elevation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
lwpline	pointer
->	O
elevation	double
=	O
elevation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_lwpline_get_thickness	function
(	O
const	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
lwpline	pointer
->	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_lwpline_set_thickness	function
(	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
lwpline	pointer
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_lwpline_get_numpoints	function
(	O
const	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
lwpline	pointer
->	O
num_points	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
BITCODE_BL	int
dwg_ent_lwpline_get_numbulges	function
(	O
const	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
lwpline	pointer
->	O
num_bulges	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
BITCODE_BL	int
dwg_ent_lwpline_get_numwidths	function
(	O
const	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
lwpline	pointer
->	O
num_widths	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_lwpline_get_extrusion	function
(	O
const	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
lwpline	pointer
->	O
extrusion	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
lwpline	pointer
->	O
extrusion	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
lwpline	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_lwpline_set_extrusion	function
(	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
lwpline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
lwpline	pointer
->	O
extrusion	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
lwpline	pointer
->	O
extrusion	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
lwpline	pointer
->	O
extrusion	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
*	O
dwg_ent_lwpline_get_bulges	function
(	O
const	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
BITCODE_BD	double
*	O
ptx	pointer
=	O
(	O
BITCODE_BD	double
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
BITCODE_BD	double
)	O
*	O
lwpline	pointer
->	O
num_bulges	int
)	O
;	O
if	O
(	O
ptx	pointer
)	O
{	O
BITCODE_BL	int
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
lwpline	pointer
->	O
num_bulges	int
;	O
i	int
++	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
=	O
lwpline	pointer
->	O
bulges	pointer
[	O
i	int
]	O
;	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_point_2d	struct
*	O
dwg_ent_lwpline_get_points	function
(	O
const	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_point_2d	struct
*	O
ptx	pointer
=	O
(	O
dwg_point_2d	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
dwg_point_2d	struct
)	O
*	O
lwpline	pointer
->	O
num_points	int
)	O
;	O
if	O
(	O
ptx	pointer
)	O
{	O
BITCODE_BL	int
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
lwpline	pointer
->	O
num_points	int
;	O
i	int
++	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
.	O
x	double
=	O
lwpline	pointer
->	O
points	pointer
[	O
i	int
]	O
.	O
x	double
;	O
ptx	pointer
[	O
i	int
]	O
.	O
y	double
=	O
lwpline	pointer
->	O
points	pointer
[	O
i	int
]	O
.	O
y	double
;	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_lwpline_widths	struct
*	O
dwg_ent_lwpline_get_widths	function
(	O
const	O
dwg_ent_lwpline	struct
*	O
restrict	O
lwpline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_lwpline_widths	struct
*	O
ptx	pointer
=	O
(	O
dwg_lwpline_widths	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
dwg_lwpline_widths	struct
)	O
*	O
lwpline	pointer
->	O
num_widths	int
)	O
;	O
if	O
(	O
ptx	pointer
)	O
{	O
BITCODE_BL	int
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
lwpline	pointer
->	O
num_widths	int
;	O
i	int
++	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
.	O
start	struct
=	O
lwpline	pointer
->	O
widths	pointer
[	O
i	int
]	O
.	O
start	struct
;	O
ptx	pointer
[	O
i	int
]	O
.	O
end	struct
=	O
lwpline	pointer
->	O
widths	pointer
[	O
i	int
]	O
.	O
end	struct
;	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_ole2frame_get_type	function
(	O
const	O
dwg_ent_ole2frame	struct
*	O
restrict	O
frame	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
frame	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
frame	pointer
->	O
type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
(	O
BITCODE_BS	short
)	O
-	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_ole2frame_set_type	function
(	O
dwg_ent_ole2frame	struct
*	O
restrict	O
frame	pointer
,	O
const	O
BITCODE_BS	short
type	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
frame	pointer
&&	O
type	short
>=	O
1	int
&&	O
type	short
<=	O
3	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
frame	pointer
->	O
type	short
=	O
type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or wrong arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_ole2frame_get_mode	function
(	O
const	O
dwg_ent_ole2frame	struct
*	O
restrict	O
frame	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
frame	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
frame	pointer
->	O
mode	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
(	O
BITCODE_BS	short
)	O
-	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_ole2frame_set_mode	function
(	O
dwg_ent_ole2frame	struct
*	O
restrict	O
frame	pointer
,	O
const	O
BITCODE_BS	short
mode	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
frame	pointer
&&	O
mode	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
frame	pointer
->	O
mode	short
=	O
mode	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or wrong arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_ole2frame_get_data_length	function
(	O
const	O
dwg_ent_ole2frame	struct
*	O
restrict	O
frame	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
frame	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
frame	pointer
->	O
data_length	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
char	O
*	O
dwg_ent_ole2frame_get_data	function
(	O
const	O
dwg_ent_ole2frame	struct
*	O
restrict	O
frame	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
frame	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
frame	pointer
->	O
data	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_ole2frame_set_data	function
(	O
dwg_ent_ole2frame	struct
*	O
restrict	O
frame	pointer
,	O
const	O
char	O
*	O
restrict	O
data	pointer
,	O
const	O
BITCODE_BL	int
data_length	int
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
frame	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
frame	pointer
->	O
data	pointer
=	O
(	O
char	O
*	O
)	O
data	pointer
;	O
frame	pointer
->	O
data_length	int
=	O
data_length	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_obj_proxy_get_class_id	function
(	O
const	O
dwg_obj_proxy	struct
*	O
restrict	O
proxy	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
proxy	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
proxy	pointer
->	O
class_id	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_obj_proxy_set_class_id	function
(	O
dwg_obj_proxy	struct
*	O
restrict	O
proxy	pointer
,	O
const	O
BITCODE_BL	int
class_id	int
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
proxy	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
proxy	pointer
->	O
class_id	int
=	O
class_id	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_obj_proxy_get_version	function
(	O
const	O
dwg_obj_proxy	struct
*	O
restrict	O
proxy	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
proxy	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
proxy	pointer
->	O
version	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_obj_proxy_set_version	function
(	O
dwg_obj_proxy	struct
*	O
restrict	O
proxy	pointer
,	O
const	O
BITCODE_BL	int
version	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
proxy	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
proxy	pointer
->	O
version	short
=	O
version	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_B	char
dwg_obj_proxy_get_from_dxf	function
(	O
const	O
dwg_obj_proxy	struct
*	O
restrict	O
proxy	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
proxy	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
proxy	pointer
->	O
from_dxf	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_obj_proxy_set_from_dxf	function
(	O
dwg_obj_proxy	struct
*	O
restrict	O
proxy	pointer
,	O
const	O
BITCODE_B	char
from_dxf	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
proxy	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
proxy	pointer
->	O
from_dxf	char
=	O
from_dxf	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
*	O
dwg_obj_proxy_get_data	function
(	O
const	O
dwg_obj_proxy	struct
*	O
restrict	O
proxy	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
proxy	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
proxy	pointer
->	O
data	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_obj_proxy_set_data	function
(	O
dwg_obj_proxy	struct
*	O
restrict	O
proxy	pointer
,	O
const	O
char	O
*	O
restrict	O
data	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
proxy	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
proxy	pointer
->	O
data	pointer
=	O
(	O
char	O
*	O
)	O
data	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
dwg_object_ref	struct
*	O
*	O
dwg_obj_proxy_get_objid_object_handles	function
(	O
const	O
dwg_obj_proxy	struct
*	O
restrict	O
proxy	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
proxy	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
proxy	pointer
->	O
objid_object_handles	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BL	int
dwg_obj_xrecord_get_num_databytes	function
(	O
const	O
dwg_obj_xrecord	struct
*	O
restrict	O
xrecord	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xrecord	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
xrecord	pointer
->	O
num_databytes	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_obj_xrecord_get_cloning_flags	function
(	O
const	O
dwg_obj_xrecord	struct
*	O
restrict	O
xrecord	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xrecord	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
xrecord	pointer
->	O
cloning_flags	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_obj_xrecord_set_cloning_flags	function
(	O
dwg_obj_xrecord	struct
*	O
restrict	O
xrecord	pointer
,	O
const	O
BITCODE_BS	short
cloning_flags	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xrecord	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
xrecord	pointer
->	O
cloning_flags	short
=	O
cloning_flags	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_obj_xrecord_get_num_xdata	function
(	O
const	O
dwg_obj_xrecord	struct
*	O
restrict	O
xrecord	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xrecord	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
xrecord	pointer
->	O
num_xdata	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0U	int
;	O
}	O
}	O
Dwg_Resbuf	struct
*	O
dwg_obj_xrecord_get_xdata	function
(	O
const	O
dwg_obj_xrecord	struct
*	O
restrict	O
xrecord	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xrecord	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
xrecord	pointer
->	O
xdata	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_obj_xrecord_set_xdata	function
(	O
dwg_obj_xrecord	struct
*	O
restrict	O
xrecord	pointer
,	O
const	O
Dwg_Resbuf	struct
*	O
xdata	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xrecord	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
xrecord	pointer
->	O
xdata	pointer
=	O
(	O
Dwg_Resbuf	struct
*	O
)	O
xdata	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_obj_xrecord_get_num_objid_handles	function
(	O
const	O
dwg_obj_xrecord	struct
*	O
restrict	O
xrecord	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xrecord	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
xrecord	pointer
->	O
num_objid_handles	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
dwg_object_ref	struct
*	O
*	O
dwg_obj_xrecord_get_objid_handles	function
(	O
const	O
dwg_obj_xrecord	struct
*	O
restrict	O
xrecord	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
xrecord	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
xrecord	pointer
->	O
objid_handles	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_spline_get_scenario	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
scenario	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_spline_set_scenario	function
(	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
const	O
BITCODE_BS	short
scenario	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
spline	pointer
->	O
scenario	short
=	O
scenario	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_spline_get_degree	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
degree	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_spline_set_degree	function
(	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
const	O
BITCODE_BS	short
degree	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
spline	pointer
->	O
degree	short
=	O
degree	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_spline_get_fit_tol	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
fit_tol	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_spline_set_fit_tol	function
(	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
fit_tol	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
spline	pointer
->	O
fit_tol	double
=	O
fit_tol	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_spline_get_begin_tan_vector	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
spline	pointer
->	O
beg_tan_vec	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
spline	pointer
->	O
beg_tan_vec	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
spline	pointer
->	O
beg_tan_vec	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_spline_set_begin_tan_vector	function
(	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
spline	pointer
->	O
beg_tan_vec	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
spline	pointer
->	O
beg_tan_vec	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
spline	pointer
->	O
beg_tan_vec	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_spline_get_end_tan_vector	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
spline	pointer
->	O
end_tan_vec	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
spline	pointer
->	O
end_tan_vec	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
spline	pointer
->	O
end_tan_vec	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_spline_set_end_tan_vector	function
(	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
spline	pointer
->	O
end_tan_vec	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
spline	pointer
->	O
end_tan_vec	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
spline	pointer
->	O
end_tan_vec	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_spline_get_knot_tol	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
knot_tol	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_spline_set_knot_tol	function
(	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
const	O
double	O
knot_tol	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
spline	pointer
->	O
knot_tol	double
=	O
knot_tol	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_spline_get_ctrl_tol	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
ctrl_tol	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_spline_set_ctrl_tol	function
(	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
const	O
double	O
ctrl_tol	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
spline	pointer
->	O
ctrl_tol	double
=	O
ctrl_tol	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_spline_get_num_fit_pts	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
num_fit_pts	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
char	O
dwg_ent_spline_get_rational	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
rational	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_spline_set_rational	function
(	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
char	O
rational	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
spline	pointer
->	O
rational	char
=	O
rational	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_spline_get_closed_b	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
closed_b	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_spline_set_closed_b	function
(	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
char	O
closed_b	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
spline	pointer
->	O
closed_b	char
=	O
closed_b	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_spline_get_weighted	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
weighted	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_spline_set_weighted	function
(	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
char	O
weighted	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
spline	pointer
->	O
weighted	char
=	O
weighted	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_spline_get_periodic	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
periodic	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_spline_set_periodic	function
(	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
char	O
periodic	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
spline	pointer
->	O
periodic	char
=	O
periodic	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_spline_get_num_knots	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
num_knots	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
BITCODE_BL	int
dwg_ent_spline_get_num_ctrl_pts	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
spline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
spline	pointer
->	O
num_ctrl_pts	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
dwg_spline_point	struct
*	O
dwg_ent_spline_get_fit_pts	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_spline_point	struct
*	O
ptx	pointer
=	O
calloc	function
(	O
spline	pointer
->	O
num_fit_pts	short
,	O
sizeof	O
(	O
dwg_spline_point	struct
)	O
)	O
;	O
if	O
(	O
ptx	pointer
)	O
{	O
BITCODE_BS	short
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
spline	pointer
->	O
num_fit_pts	short
;	O
i	int
++	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
=	O
spline	pointer
->	O
fit_pts	pointer
[	O
i	int
]	O
;	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_spline_control_point	struct
*	O
dwg_ent_spline_get_ctrl_pts	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_spline_control_point	struct
*	O
ptx	pointer
=	O
calloc	function
(	O
spline	pointer
->	O
num_ctrl_pts	int
,	O
sizeof	O
(	O
dwg_spline_control_point	struct
)	O
)	O
;	O
if	O
(	O
ptx	pointer
)	O
{	O
BITCODE_BL	int
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
spline	pointer
->	O
num_ctrl_pts	int
;	O
i	int
++	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
=	O
spline	pointer
->	O
ctrl_pts	pointer
[	O
i	int
]	O
;	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
double	O
*	O
dwg_ent_spline_get_knots	function
(	O
const	O
dwg_ent_spline	struct
*	O
restrict	O
spline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
double	O
*	O
ptx	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
double	O
)	O
*	O
spline	pointer
->	O
num_knots	int
)	O
;	O
if	O
(	O
ptx	pointer
)	O
{	O
BITCODE_BL	int
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
spline	pointer
->	O
num_knots	int
;	O
i	int
++	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
=	O
spline	pointer
->	O
knots	pointer
[	O
i	int
]	O
;	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_get_center	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vp	pointer
->	O
center	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vp	pointer
->	O
center	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
vp	pointer
->	O
center	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_center	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
center	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vp	pointer
->	O
center	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
vp	pointer
->	O
center	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_viewport_get_width	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_width	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
double	O
width	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
width	double
=	O
width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_viewport_get_height	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_height	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
double	O
height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
height	double
=	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_viewport_get_grid_major	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
grid_major	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_grid_major	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
BITCODE_BS	short
major	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
grid_major	short
=	O
major	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_viewport_get_num_frozen_layers	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
num_frozen_layers	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_num_frozen_layers	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
BITCODE_BL	int
count	int
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
num_frozen_layers	int
=	O
count	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
*	O
dwg_ent_viewport_get_style_sheet	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
vp	pointer
->	O
style_sheet	pointer
)	O
;	O
else	O
return	O
vp	pointer
->	O
style_sheet	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_style_sheet	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
char	O
*	O
sheet	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
vp	pointer
->	O
style_sheet	pointer
=	O
(	O
char	O
*	O
)	O
bit_utf8_to_TU	function
(	O
sheet	pointer
)	O
;	O
else	O
vp	pointer
->	O
style_sheet	pointer
=	O
sheet	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_circle_zoom	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
BITCODE_BS	short
zoom	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
circle_zoom	short
=	O
zoom	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_viewport_get_circle_zoom	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
circle_zoom	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_status_flag	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
BITCODE_BL	int
flags	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
status_flag	int
=	O
flags	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_viewport_get_status_flag	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
status_flag	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
char	O
dwg_ent_viewport_get_render_mode	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
render_mode	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_render_mode	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
char	O
mode	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
render_mode	char
=	O
mode	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_ucs_at_origin	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
unsigned	O
char	O
origin	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
ucs_at_origin	char
=	O
origin	struct
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_viewport_get_ucs_at_origin	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
ucs_at_origin	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_ucs_per_viewport	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
unsigned	O
char	O
viewport	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
ucs_per_viewport	char
=	O
viewport	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_viewport_get_ucs_per_viewport	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
ucs_per_viewport	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_view_target	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
view_target	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vp	pointer
->	O
view_target	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
vp	pointer
->	O
view_target	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_get_view_target	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vp	pointer
->	O
view_target	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vp	pointer
->	O
view_target	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
vp	pointer
->	O
view_target	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_view_direction	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
view_direction	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vp	pointer
->	O
view_direction	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
vp	pointer
->	O
view_direction	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_get_view_direction	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vp	pointer
->	O
view_direction	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vp	pointer
->	O
view_direction	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
vp	pointer
->	O
view_direction	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_view_twist	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
double	O
angle	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
view_twist	double
=	O
angle	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_viewport_get_view_twist	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
view_twist	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_view_height	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
double	O
height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
view_height	double
=	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_viewport_get_view_height	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
view_height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_lens_length	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
double	O
length	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
lens_length	double
=	O
length	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_viewport_get_lens_length	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
lens_length	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_front_clip_z	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
double	O
front_z	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
front_clip_z	double
=	O
front_z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_viewport_get_front_clip_z	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
front_clip_z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_back_clip_z	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
double	O
back_z	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
back_clip_z	double
=	O
back_z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_viewport_get_back_clip_z	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
back_clip_z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_snap_angle	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
double	O
angle	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
snap_angle	double
=	O
angle	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_viewport_get_snap_angle	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
snap_angle	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_get_view_center	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vp	pointer
->	O
view_center	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vp	pointer
->	O
view_center	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_view_center	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
view_center	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vp	pointer
->	O
view_center	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_get_grid_spacing	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vp	pointer
->	O
grid_spacing	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vp	pointer
->	O
grid_spacing	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_grid_spacing	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
grid_spacing	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vp	pointer
->	O
grid_spacing	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_get_snap_base	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vp	pointer
->	O
snap_base	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vp	pointer
->	O
snap_base	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_snap_base	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
snap_base	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vp	pointer
->	O
snap_base	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_get_snap_spacing	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vp	pointer
->	O
snap_spacing	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vp	pointer
->	O
snap_spacing	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_snap_spacing	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
snap_spacing	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vp	pointer
->	O
snap_spacing	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_ucs_origin	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
ucs_origin	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vp	pointer
->	O
ucs_origin	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
vp	pointer
->	O
ucs_origin	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_get_ucs_origin	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vp	pointer
->	O
ucs_origin	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vp	pointer
->	O
ucs_origin	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
vp	pointer
->	O
ucs_origin	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_ucs_x_axis	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
ucs_x_axis	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vp	pointer
->	O
ucs_x_axis	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
vp	pointer
->	O
ucs_x_axis	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_get_ucs_x_axis	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vp	pointer
->	O
ucs_x_axis	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vp	pointer
->	O
ucs_x_axis	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
vp	pointer
->	O
ucs_x_axis	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_ucs_y_axis	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
ucs_y_axis	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
vp	pointer
->	O
ucs_y_axis	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
vp	pointer
->	O
ucs_y_axis	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_get_ucs_y_axis	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
vp	pointer
->	O
ucs_y_axis	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
vp	pointer
->	O
ucs_y_axis	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
vp	pointer
->	O
ucs_y_axis	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_viewport_set_ucs_elevation	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
double	O
elevation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
ucs_elevation	double
=	O
elevation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_viewport_get_ucs_elevation	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
ucs_elevation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_ucs_ortho_view_type	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
BITCODE_BS	short
type	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
ucs_ortho_view_type	short
=	O
type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_viewport_get_ucs_ortho_view_type	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
ucs_ortho_view_type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_shadeplot_mode	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
BITCODE_BS	short
shadeplot	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
shadeplot_mode	short
=	O
shadeplot	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_viewport_get_shadeplot_mode	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
shadeplot_mode	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_use_default_lights	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
unsigned	O
char	O
lights	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
use_default_lights	char
=	O
lights	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_viewport_get_use_default_lights	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
use_default_lights	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_default_lighting_type	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
char	O
type	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
default_lighting_type	char
=	O
type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_viewport_get_default_lighting_type	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
default_lighting_type	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_brightness	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
double	O
brightness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
brightness	double
=	O
brightness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_viewport_get_brightness	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
brightness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_viewport_set_contrast	function
(	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
const	O
double	O
contrast	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vp	pointer
->	O
contrast	double
=	O
contrast	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_viewport_get_contrast	function
(	O
const	O
dwg_ent_viewport	struct
*	O
restrict	O
vp	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
vp	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
vp	pointer
->	O
contrast	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_polyline_pface_get_numpoints	function
(	O
const	O
dwg_ent_polyline_pface	struct
*	O
restrict	O
pface	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
pface	pointer
->	O
numverts	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_polyline_pface_get_numfaces	function
(	O
const	O
dwg_ent_polyline_pface	struct
*	O
restrict	O
pface	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
pface	pointer
->	O
numfaces	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
dwg_point_3d	struct
*	O
dwg_obj_polyline_pface_get_points	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_POLYLINE_PFACE	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
LOG_ERROR	O
(	O
"%s: nyi"	pointer
,	O
__FUNCTION__	O
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty or wrong arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_polyline_mesh_get_flag	function
(	O
const	O
dwg_ent_polyline_mesh	struct
*	O
restrict	O
mesh	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mesh	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mesh	pointer
->	O
flag	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_polyline_mesh_set_flag	function
(	O
dwg_ent_polyline_mesh	struct
*	O
restrict	O
mesh	pointer
,	O
const	O
BITCODE_BS	short
flags	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mesh	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mesh	pointer
->	O
flag	short
=	O
flags	char
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_polyline_mesh_get_curve_type	function
(	O
const	O
dwg_ent_polyline_mesh	struct
*	O
restrict	O
mesh	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mesh	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mesh	pointer
->	O
curve_type	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_polyline_mesh_set_curve_type	function
(	O
dwg_ent_polyline_mesh	struct
*	O
restrict	O
mesh	pointer
,	O
const	O
BITCODE_BS	short
curve_type	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mesh	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mesh	pointer
->	O
curve_type	short
=	O
curve_type	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_polyline_mesh_get_num_m_verts	function
(	O
const	O
dwg_ent_polyline_mesh	struct
*	O
restrict	O
mesh	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mesh	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mesh	pointer
->	O
num_m_verts	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_polyline_mesh_get_num_n_verts	function
(	O
const	O
dwg_ent_polyline_mesh	struct
*	O
restrict	O
mesh	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mesh	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mesh	pointer
->	O
num_n_verts	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_polyline_mesh_get_m_density	function
(	O
const	O
dwg_ent_polyline_mesh	struct
*	O
restrict	O
mesh	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mesh	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mesh	pointer
->	O
m_density	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_polyline_mesh_set_m_density	function
(	O
dwg_ent_polyline_mesh	struct
*	O
restrict	O
mesh	pointer
,	O
const	O
BITCODE_BS	short
m_density	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mesh	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mesh	pointer
->	O
m_density	short
=	O
m_density	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_polyline_mesh_get_n_density	function
(	O
const	O
dwg_ent_polyline_mesh	struct
*	O
restrict	O
mesh	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mesh	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mesh	pointer
->	O
n_density	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_polyline_mesh_set_n_density	function
(	O
dwg_ent_polyline_mesh	struct
*	O
restrict	O
mesh	pointer
,	O
const	O
BITCODE_BS	short
n_density	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mesh	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mesh	pointer
->	O
n_density	short
=	O
n_density	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BL	int
dwg_ent_polyline_mesh_get_num_owned	function
(	O
const	O
dwg_ent_polyline_mesh	struct
*	O
restrict	O
mesh	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mesh	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mesh	pointer
->	O
num_owned	int
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_polyline_2d_get_extrusion	function
(	O
const	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
pline2d	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
pline2d	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
pline2d	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_polyline_2d_set_extrusion	function
(	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
pline2d	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
pline2d	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
pline2d	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_polyline_2d_get_start_width	function
(	O
const	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
pline2d	pointer
->	O
start_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_polyline_2d_set_start_width	function
(	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
const	O
double	O
start_width	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
pline2d	pointer
->	O
start_width	double
=	O
start_width	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_polyline_2d_get_end_width	function
(	O
const	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
pline2d	pointer
->	O
end_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_polyline_2d_set_end_width	function
(	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
const	O
double	O
end_width	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
pline2d	pointer
->	O
end_width	double
=	O
end_width	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_polyline_2d_get_thickness	function
(	O
const	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
pline2d	pointer
->	O
thickness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_polyline_2d_set_thickness	function
(	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
const	O
double	O
thickness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
pline2d	pointer
->	O
thickness	double
=	O
thickness	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
double	O
dwg_ent_polyline_2d_get_elevation	function
(	O
const	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
pline2d	pointer
->	O
elevation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_polyline_2d_set_elevation	function
(	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
const	O
double	O
elevation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
pline2d	pointer
->	O
elevation	double
=	O
elevation	double
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_polyline_2d_get_flag	function
(	O
const	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
pline2d	pointer
->	O
flag	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_polyline_2d_set_flag	function
(	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
const	O
BITCODE_BS	short
flags	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
pline2d	pointer
->	O
flag	short
=	O
flags	char
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_polyline_2d_get_curve_type	function
(	O
const	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
pline2d	pointer
->	O
curve_type	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_polyline_2d_set_curve_type	function
(	O
dwg_ent_polyline_2d	struct
*	O
restrict	O
pline2d	pointer
,	O
const	O
BITCODE_BS	short
curve_type	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline2d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
pline2d	pointer
->	O
curve_type	short
=	O
curve_type	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BL	int
dwg_object_polyline_2d_get_numpoints	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_POLYLINE_2D	int
)	O
{	O
BITCODE_BL	int
num_points	int
=	O
0	int
;	O
Dwg_Data	struct
*	O
dwg	pointer
=	O
obj	pointer
->	O
parent	pointer
;	O
Dwg_Entity_POLYLINE_2D	struct
*	O
_obj	pointer
=	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
POLYLINE_2D	pointer
;	O
Dwg_Entity_VERTEX_2D	struct
*	O
vertex	pointer
;	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg	pointer
->	O
header	struct
.	O
version	short
>=	O
R_2004	int
)	O
return	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
POLYLINE_2D	pointer
->	O
num_owned	int
;	O
else	O
if	O
(	O
dwg	pointer
->	O
header	struct
.	O
version	short
>=	O
R_13	int
)	O
{	O
Dwg_Object	struct
*	O
vobj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_obj	pointer
->	O
first_vertex	pointer
)	O
;	O
Dwg_Object	struct
*	O
vlast	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_obj	pointer
->	O
last_vertex	pointer
)	O
;	O
if	O
(	O
!	O
vobj	pointer
)	O
*	O
error	int
=	O
1	int
;	O
else	O
{	O
do	O
{	O
if	O
(	O
(	O
vertex	pointer
=	O
dwg_object_to_VERTEX_2D	function
(	O
vobj	pointer
)	O
)	O
)	O
{	O
num_points	int
++	O
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
while	O
(	O
(	O
vobj	pointer
=	O
dwg_next_object	function
(	O
vobj	pointer
)	O
)	O
&&	O
vobj	pointer
!=	O
vlast	pointer
)	O
;	O
}	O
}	O
else	O
{	O
Dwg_Object	struct
*	O
vobj	pointer
;	O
while	O
(	O
(	O
vobj	pointer
=	O
dwg_next_object	function
(	O
obj	pointer
)	O
)	O
&&	O
vobj	pointer
->	O
type	short
!=	O
DWG_TYPE_SEQEND	int
)	O
{	O
if	O
(	O
(	O
vertex	pointer
=	O
dwg_object_to_VERTEX_2D	function
(	O
vobj	pointer
)	O
)	O
)	O
num_points	int
++	O
;	O
else	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
return	O
num_points	int
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty or wrong arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0L	int
;	O
}	O
}	O
dwg_point_2d	struct
*	O
dwg_object_polyline_2d_get_points	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_POLYLINE_2D	int
)	O
{	O
BITCODE_BL	int
i	int
;	O
Dwg_Data	struct
*	O
dwg	pointer
=	O
obj	pointer
->	O
parent	pointer
;	O
Dwg_Entity_POLYLINE_2D	struct
*	O
_obj	pointer
=	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
POLYLINE_2D	pointer
;	O
BITCODE_BL	int
num_points	int
=	O
dwg_object_polyline_2d_get_numpoints	function
(	O
obj	pointer
,	O
error	int
)	O
;	O
Dwg_Entity_VERTEX_2D	struct
*	O
vertex	pointer
=	O
NULL	O
;	O
dwg_point_2d	struct
*	O
ptx	pointer
;	O
if	O
(	O
!	O
num_points	int
||	O
*	O
error	int
)	O
return	O
NULL	O
;	O
ptx	pointer
=	O
calloc	function
(	O
num_points	int
,	O
sizeof	O
(	O
dwg_point_2d	struct
)	O
)	O
;	O
if	O
(	O
!	O
ptx	pointer
)	O
{	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
;	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
dwg	pointer
->	O
header	struct
.	O
version	short
>=	O
R_2004	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_points	int
;	O
i	int
++	O
)	O
{	O
Dwg_Object	struct
*	O
vobj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_obj	pointer
->	O
vertex	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
vobj	pointer
&&	O
(	O
vertex	pointer
=	O
dwg_object_to_VERTEX_2D	function
(	O
vobj	pointer
)	O
)	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
.	O
x	double
=	O
vertex	pointer
->	O
point	struct
.	O
x	double
;	O
ptx	pointer
[	O
i	int
]	O
.	O
y	double
=	O
vertex	pointer
->	O
point	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
dwg	pointer
->	O
header	struct
.	O
version	short
>=	O
R_13	int
)	O
{	O
Dwg_Object	struct
*	O
vobj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_obj	pointer
->	O
first_vertex	pointer
)	O
;	O
Dwg_Object	struct
*	O
vlast	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_obj	pointer
->	O
last_vertex	pointer
)	O
;	O
if	O
(	O
!	O
vobj	pointer
)	O
*	O
error	int
=	O
1	int
;	O
else	O
{	O
i	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
(	O
vertex	pointer
=	O
dwg_object_to_VERTEX_2D	function
(	O
vobj	pointer
)	O
)	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
.	O
x	double
=	O
vertex	pointer
->	O
point	struct
.	O
x	double
;	O
ptx	pointer
[	O
i	int
]	O
.	O
y	double
=	O
vertex	pointer
->	O
point	struct
.	O
y	double
;	O
i	int
++	O
;	O
if	O
(	O
i	int
>	O
num_points	int
)	O
{	O
*	O
error	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
while	O
(	O
(	O
vobj	pointer
=	O
dwg_next_object	function
(	O
vobj	pointer
)	O
)	O
&&	O
vobj	pointer
!=	O
vlast	pointer
)	O
;	O
}	O
}	O
else	O
{	O
Dwg_Object	struct
*	O
vobj	pointer
;	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
vobj	pointer
=	O
dwg_next_object	function
(	O
obj	pointer
)	O
)	O
&&	O
vobj	pointer
->	O
type	short
!=	O
DWG_TYPE_SEQEND	int
)	O
{	O
if	O
(	O
(	O
vertex	pointer
=	O
dwg_object_to_VERTEX_2D	function
(	O
vobj	pointer
)	O
)	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
.	O
x	double
=	O
vertex	pointer
->	O
point	struct
.	O
x	double
;	O
ptx	pointer
[	O
i	int
]	O
.	O
y	double
=	O
vertex	pointer
->	O
point	struct
.	O
y	double
;	O
i	int
++	O
;	O
if	O
(	O
i	int
>	O
num_points	int
)	O
{	O
*	O
error	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_RC	char
dwg_ent_polyline_3d_get_flag	function
(	O
const	O
dwg_ent_polyline_3d	struct
*	O
restrict	O
pline3d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline3d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
pline3d	pointer
->	O
flag	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_polyline_3d_set_flag	function
(	O
dwg_ent_polyline_3d	struct
*	O
restrict	O
pline3d	pointer
,	O
const	O
BITCODE_RC	char
flag	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline3d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
pline3d	pointer
->	O
flag	short
=	O
flag	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_RC	char
dwg_ent_polyline_3d_get_curve_type	function
(	O
const	O
dwg_ent_polyline_3d	struct
*	O
restrict	O
pline3d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline3d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
pline3d	pointer
->	O
curve_type	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_polyline_3d_set_curve_type	function
(	O
dwg_ent_polyline_3d	struct
*	O
restrict	O
pline3d	pointer
,	O
const	O
BITCODE_RC	char
curve_type	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
pline3d	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
pline3d	pointer
->	O
curve_type	short
=	O
curve_type	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
BITCODE_BL	int
dwg_object_polyline_3d_get_numpoints	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_POLYLINE_3D	int
)	O
{	O
BITCODE_BL	int
num_points	int
=	O
0	int
;	O
Dwg_Data	struct
*	O
dwg	pointer
=	O
obj	pointer
->	O
parent	pointer
;	O
Dwg_Entity_POLYLINE_3D	struct
*	O
_obj	pointer
=	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
POLYLINE_3D	pointer
;	O
Dwg_Entity_VERTEX_3D	struct
*	O
vertex	pointer
;	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg	pointer
->	O
header	struct
.	O
version	short
>=	O
R_2004	int
)	O
return	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
POLYLINE_3D	pointer
->	O
num_owned	int
;	O
else	O
if	O
(	O
dwg	pointer
->	O
header	struct
.	O
version	short
>=	O
R_13	int
)	O
{	O
Dwg_Object	struct
*	O
vobj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_obj	pointer
->	O
first_vertex	pointer
)	O
;	O
Dwg_Object	struct
*	O
vlast	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_obj	pointer
->	O
last_vertex	pointer
)	O
;	O
if	O
(	O
!	O
vobj	pointer
)	O
*	O
error	int
=	O
1	int
;	O
else	O
{	O
do	O
{	O
if	O
(	O
(	O
vertex	pointer
=	O
dwg_object_to_VERTEX_3D	function
(	O
vobj	pointer
)	O
)	O
)	O
{	O
num_points	int
++	O
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
while	O
(	O
(	O
vobj	pointer
=	O
dwg_next_object	function
(	O
vobj	pointer
)	O
)	O
&&	O
vobj	pointer
!=	O
vlast	pointer
)	O
;	O
}	O
}	O
else	O
{	O
Dwg_Object	struct
*	O
vobj	pointer
;	O
while	O
(	O
(	O
vobj	pointer
=	O
dwg_next_object	function
(	O
obj	pointer
)	O
)	O
&&	O
vobj	pointer
->	O
type	short
!=	O
DWG_TYPE_SEQEND	int
)	O
{	O
if	O
(	O
(	O
vertex	pointer
=	O
dwg_object_to_VERTEX_3D	function
(	O
vobj	pointer
)	O
)	O
)	O
num_points	int
++	O
;	O
else	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
return	O
num_points	int
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty or wrong arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
0L	int
;	O
}	O
}	O
dwg_point_3d	struct
*	O
dwg_object_polyline_3d_get_points	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_POLYLINE_3D	int
)	O
{	O
BITCODE_BL	int
i	int
;	O
Dwg_Data	struct
*	O
dwg	pointer
=	O
obj	pointer
->	O
parent	pointer
;	O
Dwg_Entity_POLYLINE_3D	struct
*	O
_obj	pointer
=	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
POLYLINE_3D	pointer
;	O
const	O
BITCODE_BL	int
num_points	int
=	O
dwg_object_polyline_3d_get_numpoints	function
(	O
obj	pointer
,	O
error	int
)	O
;	O
Dwg_Entity_VERTEX_3D	struct
*	O
vertex	pointer
=	O
NULL	O
;	O
dwg_point_3d	struct
*	O
ptx	pointer
;	O
if	O
(	O
!	O
num_points	int
||	O
*	O
error	int
)	O
return	O
NULL	O
;	O
ptx	pointer
=	O
calloc	function
(	O
num_points	int
,	O
sizeof	O
(	O
dwg_point_3d	struct
)	O
)	O
;	O
if	O
(	O
!	O
ptx	pointer
)	O
{	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
;	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
vertex	pointer
=	O
NULL	O
;	O
if	O
(	O
dwg	pointer
->	O
header	struct
.	O
version	short
>=	O
R_2004	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_points	int
;	O
i	int
++	O
)	O
{	O
Dwg_Object	struct
*	O
vobj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_obj	pointer
->	O
vertex	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
vobj	pointer
&&	O
(	O
vertex	pointer
=	O
dwg_object_to_VERTEX_3D	function
(	O
vobj	pointer
)	O
)	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
.	O
x	double
=	O
vertex	pointer
->	O
point	struct
.	O
x	double
;	O
ptx	pointer
[	O
i	int
]	O
.	O
y	double
=	O
vertex	pointer
->	O
point	struct
.	O
y	double
;	O
ptx	pointer
[	O
i	int
]	O
.	O
z	double
=	O
vertex	pointer
->	O
point	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
dwg	pointer
->	O
header	struct
.	O
version	short
>=	O
R_13	int
)	O
{	O
Dwg_Object	struct
*	O
vobj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_obj	pointer
->	O
first_vertex	pointer
)	O
;	O
Dwg_Object	struct
*	O
vlast	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_obj	pointer
->	O
last_vertex	pointer
)	O
;	O
if	O
(	O
!	O
vobj	pointer
)	O
*	O
error	int
=	O
1	int
;	O
else	O
{	O
i	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
(	O
vertex	pointer
=	O
dwg_object_to_VERTEX_3D	function
(	O
vobj	pointer
)	O
)	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
.	O
x	double
=	O
vertex	pointer
->	O
point	struct
.	O
x	double
;	O
ptx	pointer
[	O
i	int
]	O
.	O
y	double
=	O
vertex	pointer
->	O
point	struct
.	O
y	double
;	O
ptx	pointer
[	O
i	int
]	O
.	O
z	double
=	O
vertex	pointer
->	O
point	struct
.	O
z	double
;	O
i	int
++	O
;	O
if	O
(	O
i	int
>	O
num_points	int
)	O
{	O
*	O
error	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
while	O
(	O
(	O
vobj	pointer
=	O
dwg_next_object	function
(	O
vobj	pointer
)	O
)	O
&&	O
vobj	pointer
!=	O
vlast	pointer
)	O
;	O
}	O
}	O
else	O
{	O
Dwg_Object	struct
*	O
vobj	pointer
;	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
vobj	pointer
=	O
dwg_next_object	function
(	O
obj	pointer
)	O
)	O
&&	O
vobj	pointer
->	O
type	short
!=	O
DWG_TYPE_SEQEND	int
)	O
{	O
if	O
(	O
(	O
vertex	pointer
=	O
dwg_object_to_VERTEX_3D	function
(	O
vobj	pointer
)	O
)	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
.	O
x	double
=	O
vertex	pointer
->	O
point	struct
.	O
x	double
;	O
ptx	pointer
[	O
i	int
]	O
.	O
y	double
=	O
vertex	pointer
->	O
point	struct
.	O
y	double
;	O
ptx	pointer
[	O
i	int
]	O
.	O
z	double
=	O
vertex	pointer
->	O
point	struct
.	O
z	double
;	O
i	int
++	O
;	O
if	O
(	O
i	int
>	O
num_points	int
)	O
{	O
*	O
error	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
}	O
}	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_3dface_get_invis_flags	function
(	O
const	O
dwg_ent_3dface	struct
*	O
restrict	O
_3dface	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
_3dface	pointer
->	O
invis_flags	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_3dface_set_invis_flags	function
(	O
dwg_ent_3dface	struct
*	O
restrict	O
_3dface	pointer
,	O
const	O
BITCODE_BS	short
invis_flags	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dface	pointer
->	O
invis_flags	short
=	O
invis_flags	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_3dface_get_corner1	function
(	O
const	O
dwg_ent_3dface	struct
*	O
restrict	O
_3dface	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
_3dface	pointer
->	O
corner1	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
_3dface	pointer
->	O
corner1	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_3dface_set_corner1	function
(	O
dwg_ent_3dface	struct
*	O
restrict	O
_3dface	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dface	pointer
->	O
corner1	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
_3dface	pointer
->	O
corner1	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_3dface_get_corner2	function
(	O
const	O
dwg_ent_3dface	struct
*	O
restrict	O
_3dface	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
_3dface	pointer
->	O
corner2	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
_3dface	pointer
->	O
corner2	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_3dface_set_corner2	function
(	O
dwg_ent_3dface	struct
*	O
restrict	O
_3dface	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dface	pointer
->	O
corner2	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
_3dface	pointer
->	O
corner2	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_3dface_get_corner3	function
(	O
const	O
dwg_ent_3dface	struct
*	O
restrict	O
_3dface	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
_3dface	pointer
->	O
corner3	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
_3dface	pointer
->	O
corner3	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_3dface_set_corner3	function
(	O
dwg_ent_3dface	struct
*	O
restrict	O
_3dface	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dface	pointer
->	O
corner3	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
_3dface	pointer
->	O
corner3	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_3dface_get_corner4	function
(	O
const	O
dwg_ent_3dface	struct
*	O
restrict	O
_3dface	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
_3dface	pointer
->	O
corner4	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
_3dface	pointer
->	O
corner4	struct
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_3dface_set_corner4	function
(	O
dwg_ent_3dface	struct
*	O
restrict	O
_3dface	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dface	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dface	pointer
->	O
corner4	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
_3dface	pointer
->	O
corner4	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_image_get_class_version	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
image	pointer
->	O
class_version	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_image_set_class_version	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
BITCODE_BL	int
class_version	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
class_version	char
=	O
class_version	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_image_get_pt0	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
image	pointer
->	O
pt0	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
image	pointer
->	O
pt0	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
image	pointer
->	O
pt0	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_image_set_pt0	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
pt0	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
image	pointer
->	O
pt0	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
image	pointer
->	O
pt0	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_image_get_u_vector	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
image	pointer
->	O
uvec	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
image	pointer
->	O
uvec	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
image	pointer
->	O
uvec	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_image_set_u_vector	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
uvec	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
image	pointer
->	O
uvec	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
image	pointer
->	O
uvec	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_image_get_v_vector	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
image	pointer
->	O
vvec	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
image	pointer
->	O
vvec	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
image	pointer
->	O
vvec	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_image_set_v_vector	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
vvec	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
image	pointer
->	O
vvec	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
image	pointer
->	O
vvec	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_image_get_size_height	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
image	pointer
->	O
size	char
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_image_set_size_height	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
double	O
size_height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
size	char
.	O
y	double
=	O
size_height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_image_get_size_width	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
image	pointer
->	O
size	char
.	O
x	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_image_set_size_width	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
double	O
size_width	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
size	char
.	O
x	double
=	O
size_width	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_image_get_display_props	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
image	pointer
->	O
display_props	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_image_set_display_props	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
BITCODE_BS	short
display_props	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
display_props	short
=	O
display_props	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_B	char
dwg_ent_image_get_clipping	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
image	pointer
->	O
clipping	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_image_set_clipping	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
BITCODE_B	char
clipping	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
clipping	char
=	O
clipping	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_image_get_brightness	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
image	pointer
->	O
brightness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_image_set_brightness	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
char	O
brightness	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
brightness	double
=	O
brightness	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_image_get_contrast	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
image	pointer
->	O
contrast	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_image_set_contrast	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
char	O
contrast	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
contrast	double
=	O
contrast	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_image_get_fade	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
image	pointer
->	O
fade	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_image_set_fade	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
char	O
fade	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
fade	char
=	O
fade	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_image_get_clip_boundary_type	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
image	pointer
->	O
clip_boundary_type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_image_set_clip_boundary_type	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
BITCODE_BS	short
type	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
clip_boundary_type	short
=	O
type	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_image_get_boundary_pt0	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
image	pointer
->	O
clip_verts	pointer
[	O
0	int
]	O
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
image	pointer
->	O
clip_verts	pointer
[	O
0	int
]	O
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_image_set_boundary_pt0	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
clip_verts	pointer
[	O
0	int
]	O
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
image	pointer
->	O
clip_verts	pointer
[	O
0	int
]	O
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_image_get_boundary_pt1	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
image	pointer
->	O
clip_verts	pointer
[	O
1	int
]	O
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
image	pointer
->	O
clip_verts	pointer
[	O
1	int
]	O
.	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_image_set_boundary_pt1	function
(	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
const	O
dwg_point_2d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
image	pointer
->	O
clip_verts	pointer
[	O
1	int
]	O
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
image	pointer
->	O
clip_verts	pointer
[	O
1	int
]	O
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_image_get_num_clip_verts	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
image	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
image	pointer
->	O
num_clip_verts	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
BITCODE_2RD	struct
*	O
dwg_ent_image_get_clip_verts	function
(	O
const	O
dwg_ent_image	struct
*	O
restrict	O
image	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
BITCODE_2RD	struct
*	O
ptx	pointer
=	O
calloc	function
(	O
image	pointer
->	O
num_clip_verts	int
,	O
sizeof	O
(	O
BITCODE_2RD	struct
)	O
)	O
;	O
if	O
(	O
ptx	pointer
)	O
{	O
BITCODE_BL	int
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
image	pointer
->	O
num_clip_verts	int
;	O
i	int
++	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
=	O
image	pointer
->	O
clip_verts	pointer
[	O
i	int
]	O
;	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_mline_set_scale	function
(	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
const	O
double	O
scale	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mline	pointer
->	O
scale	struct
=	O
scale	struct
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_mline_get_scale	function
(	O
const	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mline	pointer
->	O
scale	struct
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_mline_set_justification	function
(	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
const	O
BITCODE_RC	char
justification	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mline	pointer
->	O
justification	char
=	O
justification	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_RC	char
dwg_ent_mline_get_justification	function
(	O
const	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mline	pointer
->	O
justification	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_mline_set_base_point	function
(	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mline	pointer
->	O
base_point	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
mline	pointer
->	O
base_point	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
mline	pointer
->	O
base_point	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_mline_get_base_point	function
(	O
const	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
mline	pointer
->	O
base_point	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
mline	pointer
->	O
base_point	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
mline	pointer
->	O
base_point	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_mline_set_extrusion	function
(	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mline	pointer
->	O
extrusion	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
mline	pointer
->	O
extrusion	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
mline	pointer
->	O
extrusion	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_mline_get_extrusion	function
(	O
const	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
mline	pointer
->	O
extrusion	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
mline	pointer
->	O
extrusion	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
mline	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_mline_set_flags	function
(	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
const	O
BITCODE_BS	short
oc	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
mline	pointer
->	O
flags	char
=	O
oc	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_mline_get_flags	function
(	O
const	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mline	pointer
->	O
flags	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
BITCODE_RC	char
dwg_ent_mline_get_num_lines	function
(	O
const	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mline	pointer
->	O
num_lines	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
dwg_mline_line	struct
*	O
dwg_mline_vertex_get_lines	function
(	O
const	O
dwg_mline_vertex	struct
*	O
restrict	O
vertex	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_mline_line	struct
*	O
ptx	pointer
=	O
calloc	function
(	O
vertex	pointer
->	O
num_lines	char
,	O
sizeof	O
(	O
dwg_mline_line	struct
)	O
)	O
;	O
if	O
(	O
ptx	pointer
)	O
{	O
BITCODE_BS	short
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
vertex	pointer
->	O
num_lines	char
;	O
i	int
++	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
=	O
vertex	pointer
->	O
lines	pointer
[	O
i	int
]	O
;	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_mline_get_num_verts	function
(	O
const	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
mline	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
mline	pointer
->	O
num_verts	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
dwg_mline_vertex	struct
*	O
dwg_ent_mline_get_verts	function
(	O
const	O
dwg_ent_mline	struct
*	O
restrict	O
mline	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_mline_vertex	struct
*	O
ptx	pointer
=	O
calloc	function
(	O
mline	pointer
->	O
num_verts	short
,	O
sizeof	O
(	O
dwg_mline_vertex	struct
)	O
)	O
;	O
if	O
(	O
ptx	pointer
)	O
{	O
BITCODE_BS	short
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
mline	pointer
->	O
num_verts	short
;	O
i	int
++	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
=	O
mline	pointer
->	O
verts	pointer
[	O
i	int
]	O
;	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BS	short
dwg_ent_vertex_pface_face_get_vertind	function
(	O
const	O
dwg_ent_vert_pface_face	struct
*	O
face	pointer
)	O
{	O
if	O
(	O
face	pointer
)	O
{	O
return	O
face	pointer
->	O
vertind	array
[	O
3	int
]	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
(	O
BITCODE_BS	short
)	O
-	O
1	int
;	O
}	O
}	O
void	O
dwg_ent_vertex_pface_face_set_vertind	function
(	O
dwg_ent_vert_pface_face	struct
*	O
restrict	O
face	pointer
,	O
const	O
BITCODE_BS	short
vertind	array
[	O
4	int
]	O
)	O
{	O
if	O
(	O
face	pointer
)	O
{	O
face	pointer
->	O
vertind	array
[	O
0	int
]	O
=	O
vertind	array
[	O
0	int
]	O
;	O
face	pointer
->	O
vertind	array
[	O
1	int
]	O
=	O
vertind	array
[	O
1	int
]	O
;	O
face	pointer
->	O
vertind	array
[	O
2	int
]	O
=	O
vertind	array
[	O
2	int
]	O
;	O
face	pointer
->	O
vertind	array
[	O
3	int
]	O
=	O
vertind	array
[	O
3	int
]	O
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_3dsolid_get_acis_empty	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
_3dsolid	pointer
->	O
acis_empty	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_3dsolid_set_acis_empty	function
(	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
const	O
unsigned	O
char	O
empty	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dsolid	pointer
->	O
acis_empty	char
=	O
empty	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_3dsolid_get_version	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
_3dsolid	pointer
->	O
version	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
unsigned	O
char	O
*	O
dwg_ent_3dsolid_get_acis_data	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
_3dsolid	pointer
->	O
acis_data	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
void	O
dwg_ent_3dsolid_set_acis_data	function
(	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
const	O
unsigned	O
char	O
*	O
restrict	O
acis_data	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dsolid	pointer
->	O
acis_data	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
acis_data	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_3dsolid_get_wireframe_data_present	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
_3dsolid	pointer
->	O
wireframe_data_present	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_3dsolid_set_wireframe_data_present	function
(	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
const	O
char	O
present	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dsolid	pointer
->	O
wireframe_data_present	char
=	O
present	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_3dsolid_get_point_present	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
_3dsolid	pointer
->	O
point_present	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_3dsolid_set_point_present	function
(	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
const	O
char	O
present	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dsolid	pointer
->	O
point_present	char
=	O
present	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_3dsolid_get_point	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
_3dsolid	pointer
->	O
point	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
_3dsolid	pointer
->	O
point	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
_3dsolid	pointer
->	O
point	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_3dsolid_set_point	function
(	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dsolid	pointer
->	O
point	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
_3dsolid	pointer
->	O
point	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
_3dsolid	pointer
->	O
point	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_3dsolid_get_num_isolines	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
_3dsolid	pointer
->	O
num_isolines	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_3dsolid_set_num_isolines	function
(	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
const	O
BITCODE_BL	int
num	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dsolid	pointer
->	O
num_isolines	int
=	O
num	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
char	O
dwg_ent_3dsolid_get_isoline_present	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
_3dsolid	pointer
->	O
isoline_present	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_3dsolid_set_isoline_present	function
(	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
const	O
char	O
present	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dsolid	pointer
->	O
isoline_present	char
=	O
present	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_3dsolid_get_num_wires	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
_3dsolid	pointer
->	O
num_wires	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
dwg_3dsolid_wire	struct
*	O
dwg_ent_3dsolid_get_wires	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_3dsolid_wire	struct
*	O
wire	pointer
=	O
calloc	function
(	O
_3dsolid	pointer
->	O
num_wires	int
,	O
sizeof	O
(	O
dwg_3dsolid_wire	struct
)	O
)	O
;	O
if	O
(	O
wire	pointer
)	O
{	O
BITCODE_BL	int
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_3dsolid	pointer
->	O
num_wires	int
;	O
i	int
++	O
)	O
{	O
wire	pointer
[	O
i	int
]	O
=	O
_3dsolid	pointer
->	O
wires	pointer
[	O
i	int
]	O
;	O
}	O
return	O
wire	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BL	int
dwg_ent_3dsolid_get_num_silhouettes	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
_3dsolid	pointer
->	O
num_silhouettes	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
dwg_3dsolid_silhouette	struct
*	O
dwg_ent_3dsolid_get_silhouettes	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_3dsolid_silhouette	struct
*	O
sh	pointer
=	O
calloc	function
(	O
_3dsolid	pointer
->	O
num_silhouettes	int
,	O
sizeof	O
(	O
dwg_3dsolid_silhouette	struct
)	O
)	O
;	O
if	O
(	O
sh	pointer
)	O
{	O
BITCODE_BL	int
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_3dsolid	pointer
->	O
num_silhouettes	int
;	O
i	int
++	O
)	O
{	O
sh	pointer
[	O
i	int
]	O
=	O
_3dsolid	pointer
->	O
silhouettes	pointer
[	O
i	int
]	O
;	O
}	O
return	O
sh	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
unsigned	O
char	O
dwg_ent_3dsolid_get_acis_empty2	function
(	O
const	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
_3dsolid	pointer
->	O
acis_empty2	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_3dsolid_set_acis_empty2	function
(	O
dwg_ent_3dsolid	struct
*	O
restrict	O
_3dsolid	pointer
,	O
unsigned	O
char	O
acis	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
_3dsolid	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
_3dsolid	pointer
->	O
acis_empty2	char
=	O
acis	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_region_get_acis_empty	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_acis_empty	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_region_set_acis_empty	function
(	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
unsigned	O
char	O
empty	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_acis_empty	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
empty	char
,	O
error	int
)	O
;	O
}	O
BITCODE_BS	short
dwg_ent_region_get_version	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_version	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
unsigned	O
char	O
*	O
dwg_ent_region_get_acis_data	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_acis_data	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_region_set_acis_data	function
(	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
const	O
unsigned	O
char	O
*	O
restrict	O
sat_data	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_acis_data	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
sat_data	pointer
,	O
error	int
)	O
;	O
}	O
char	O
dwg_ent_region_get_wireframe_data_present	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_wireframe_data_present	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_region_set_wireframe_data_present	function
(	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
const	O
char	O
present	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_wireframe_data_present	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
present	char
,	O
error	int
)	O
;	O
}	O
char	O
dwg_ent_region_get_point_present	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_point_present	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_region_set_point_present	function
(	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
const	O
char	O
present	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_point_present	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
present	char
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_region_get_point	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_point	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
point	struct
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_region_set_point	function
(	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_point	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
point	struct
,	O
error	int
)	O
;	O
}	O
BITCODE_BL	int
dwg_ent_region_get_num_isolines	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_num_isolines	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_region_set_num_isolines	function
(	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
const	O
BITCODE_BL	int
num	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_num_isolines	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
num	double
,	O
error	int
)	O
;	O
}	O
char	O
dwg_ent_region_get_isoline_present	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_isoline_present	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_region_set_isoline_present	function
(	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
char	O
present	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_isoline_present	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
present	char
,	O
error	int
)	O
;	O
}	O
BITCODE_BL	int
dwg_ent_region_get_num_wires	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_num_wires	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
dwg_3dsolid_wire	struct
*	O
dwg_ent_region_get_wires	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_wires	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
BITCODE_BL	int
dwg_ent_region_get_num_silhouettes	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_num_silhouettes	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
dwg_3dsolid_silhouette	struct
*	O
dwg_ent_region_get_silhouettes	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_silhouettes	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
unsigned	O
char	O
dwg_ent_region_get_acis_empty2	function
(	O
const	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_acis_empty2	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_region_set_acis_empty2	function
(	O
dwg_ent_region	struct
*	O
restrict	O
region	pointer
,	O
unsigned	O
char	O
empty2	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_acis_empty2	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
region	pointer
,	O
empty2	char
,	O
error	int
)	O
;	O
}	O
unsigned	O
char	O
dwg_ent_body_get_acis_empty	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_acis_empty	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_body_set_acis_empty	function
(	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
unsigned	O
char	O
empty	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_acis_empty	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
empty	char
,	O
error	int
)	O
;	O
}	O
BITCODE_BS	short
dwg_ent_body_get_version	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_version	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
unsigned	O
char	O
*	O
dwg_ent_body_get_acis_data	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_acis_data	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_body_set_acis_data	function
(	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
const	O
unsigned	O
char	O
*	O
restrict	O
sat_data	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_acis_data	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
sat_data	pointer
,	O
error	int
)	O
;	O
}	O
char	O
dwg_ent_body_get_wireframe_data_present	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_wireframe_data_present	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_body_set_wireframe_data_present	function
(	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
const	O
char	O
present	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_wireframe_data_present	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
present	char
,	O
error	int
)	O
;	O
}	O
char	O
dwg_ent_body_get_point_present	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_point_present	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_body_set_point_present	function
(	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
const	O
char	O
present	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_point_present	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
present	char
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_body_get_point	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_point	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
point	struct
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_body_set_point	function
(	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_point	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
point	struct
,	O
error	int
)	O
;	O
}	O
BITCODE_BL	int
dwg_ent_body_get_num_isolines	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_num_isolines	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_body_set_num_isolines	function
(	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
const	O
BITCODE_BL	int
num	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_num_isolines	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
num	double
,	O
error	int
)	O
;	O
}	O
char	O
dwg_ent_body_get_isoline_present	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_isoline_present	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_body_set_isoline_present	function
(	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
char	O
present	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_isoline_present	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
present	char
,	O
error	int
)	O
;	O
}	O
BITCODE_BL	int
dwg_ent_body_get_num_wires	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_num_wires	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
dwg_3dsolid_wire	struct
*	O
dwg_ent_body_get_wires	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_wires	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
BITCODE_BL	int
dwg_ent_body_get_num_silhouettes	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_num_silhouettes	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
dwg_3dsolid_silhouette	struct
*	O
dwg_ent_body_get_silhouettes	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_silhouettes	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
unsigned	O
char	O
dwg_ent_body_get_acis_empty2	function
(	O
const	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_ent_3dsolid_get_acis_empty2	function
(	O
(	O
const	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_body_set_acis_empty2	function
(	O
dwg_ent_body	struct
*	O
restrict	O
body	struct
,	O
unsigned	O
char	O
empty2	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_ent_3dsolid_set_acis_empty2	function
(	O
(	O
dwg_ent_3dsolid	struct
*	O
)	O
body	struct
,	O
empty2	char
,	O
error	int
)	O
;	O
}	O
void	O
dwg_ent_table_set_insertion_point	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
insertion_point	struct
.	O
x	double
=	O
point	struct
->	O
x	double
;	O
table	pointer
->	O
insertion_point	struct
.	O
y	double
=	O
point	struct
->	O
y	double
;	O
table	pointer
->	O
insertion_point	struct
.	O
z	double
=	O
point	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_table_get_insertion_point	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
point	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
point	struct
->	O
x	double
=	O
table	pointer
->	O
insertion_point	struct
.	O
x	double
;	O
point	struct
->	O
y	double
=	O
table	pointer
->	O
insertion_point	struct
.	O
y	double
;	O
point	struct
->	O
z	double
=	O
table	pointer
->	O
insertion_point	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_table_set_scale	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
scale3d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
scale3d	pointer
->	O
x	double
==	O
1.0	int
)	O
{	O
if	O
(	O
scale3d	pointer
->	O
y	double
==	O
1.0	int
&&	O
scale3d	pointer
->	O
z	double
==	O
1.0	int
)	O
table	pointer
->	O
data_flags	short
=	O
3	int
;	O
else	O
table	pointer
->	O
data_flags	short
=	O
1	int
;	O
}	O
else	O
if	O
(	O
scale3d	pointer
->	O
x	double
==	O
scale3d	pointer
->	O
y	double
&&	O
scale3d	pointer
->	O
x	double
==	O
scale3d	pointer
->	O
z	double
)	O
table	pointer
->	O
data_flags	short
=	O
2	int
;	O
else	O
table	pointer
->	O
data_flags	short
=	O
0	int
;	O
table	pointer
->	O
scale	struct
.	O
x	double
=	O
scale3d	pointer
->	O
x	double
;	O
table	pointer
->	O
scale	struct
.	O
y	double
=	O
scale3d	pointer
->	O
y	double
;	O
table	pointer
->	O
scale	struct
.	O
z	double
=	O
scale3d	pointer
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_table_get_scale	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
scale3d	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
scale3d	pointer
->	O
x	double
=	O
table	pointer
->	O
scale	struct
.	O
x	double
;	O
scale3d	pointer
->	O
y	double
=	O
table	pointer
->	O
scale	struct
.	O
y	double
;	O
scale3d	pointer
->	O
z	double
=	O
table	pointer
->	O
scale	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_table_set_data_flags	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
unsigned	O
char	O
flags	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
flags	char
<=	O
3	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
data_flags	short
=	O
flags	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_table_get_data_flags	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_flags	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_rotation	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
double	O
rotation	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
rotation	double
=	O
rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_table_get_rotation	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
rotation	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_extrusion	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
extrusion	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
table	pointer
->	O
extrusion	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
table	pointer
->	O
extrusion	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_table_get_extrusion	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
table	pointer
->	O
extrusion	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
table	pointer
->	O
extrusion	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
table	pointer
->	O
extrusion	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_table_has_attribs	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
has_attribs	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
BITCODE_BL	int
dwg_ent_table_get_num_owned	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
num_owned	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_flag_for_table_value	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
value	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
flag_for_table_value	short
=	O
value	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_flag_for_table_value	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
flag_for_table_value	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_horiz_direction	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
horiz_direction	struct
.	O
x	double
=	O
vector	struct
->	O
x	double
;	O
table	pointer
->	O
horiz_direction	struct
.	O
y	double
=	O
vector	struct
->	O
y	double
;	O
table	pointer
->	O
horiz_direction	struct
.	O
z	double
=	O
vector	struct
->	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
void	O
dwg_ent_table_get_horiz_direction	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
dwg_point_3d	struct
*	O
restrict	O
vector	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
vector	struct
->	O
x	double
=	O
table	pointer
->	O
horiz_direction	struct
.	O
x	double
;	O
vector	struct
->	O
y	double
=	O
table	pointer
->	O
horiz_direction	struct
.	O
y	double
;	O
vector	struct
->	O
z	double
=	O
table	pointer
->	O
horiz_direction	struct
.	O
z	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_table_get_num_cols	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
num_cols	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
BITCODE_BL	int
dwg_ent_table_get_num_rows	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
num_rows	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
double	O
*	O
dwg_ent_table_get_col_widths	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
col_widths	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
double	O
*	O
dwg_ent_table_get_row_heights	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
row_heights	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_B	char
dwg_ent_table_has_table_overrides	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
has_table_overrides	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_table_flag_override	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BL	int
override	int
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
override	int
<	O
0x800000	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
table_flag_override	int
=	O
override	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_table_get_table_flag_override	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
table_flag_override	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_suppressed	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
unsigned	O
char	O
yesno	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
yesno	char
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
yesno	char
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x1	int
;	O
table	pointer
->	O
title_suppressed	char
=	O
yesno	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_table_get_title_suppressed	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_suppressed	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_suppressed	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
unsigned	O
char	O
header	struct
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
header	struct
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
header_suppressed	char
=	O
header	struct
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_table_get_header_suppressed	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_suppressed	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_flow_direction	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
dir	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dir	short
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x4	int
;	O
table	pointer
->	O
flow_direction	short
=	O
dir	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_flow_direction	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
flow_direction	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_horiz_cell_margin	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
double	O
margin	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
margin	double
>	O
0.0	int
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x8	int
;	O
else	O
table	pointer
->	O
table_flag_override	int
&=	O
~	O
0x8	int
;	O
table	pointer
->	O
horiz_cell_margin	double
=	O
margin	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_table_get_horiz_cell_margin	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
horiz_cell_margin	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_vert_cell_margin	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
double	O
margin	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
margin	double
>	O
0.0	int
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x10	int
;	O
else	O
table	pointer
->	O
table_flag_override	int
&=	O
~	O
0x10	int
;	O
table	pointer
->	O
vert_cell_margin	double
=	O
margin	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_table_get_vert_cell_margin	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
vert_cell_margin	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_row_fill_none	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
unsigned	O
char	O
fill	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
fill	char
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x100	int
;	O
table	pointer
->	O
title_row_fill_none	char
=	O
fill	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_table_get_title_row_fill_none	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_row_fill_none	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_row_fill_none	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
unsigned	O
char	O
fill	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
fill	char
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x200	int
;	O
table	pointer
->	O
header_row_fill_none	char
=	O
fill	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_table_get_header_row_fill_none	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_row_fill_none	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_row_fill_none	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
unsigned	O
char	O
fill	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
fill	char
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x400	int
;	O
table	pointer
->	O
data_row_fill_none	char
=	O
fill	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
unsigned	O
char	O
dwg_ent_table_get_data_row_fill_none	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_row_fill_none	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_row_alignment	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
unsigned	O
char	O
align	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
align	short
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x4000	int
;	O
table	pointer
->	O
title_row_alignment	short
=	O
align	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_row_alignment	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_row_alignment	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_row_alignment	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
align	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
align	short
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x8000	int
;	O
table	pointer
->	O
header_row_alignment	short
=	O
align	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_row_alignment	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_row_alignment	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_row_alignment	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
align	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
align	short
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x10000	int
;	O
table	pointer
->	O
data_row_alignment	short
=	O
align	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_row_alignment	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_row_alignment	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_row_height	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
double	O
height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
height	double
>	O
0.0	int
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x100000	int
;	O
else	O
table	pointer
->	O
table_flag_override	int
&=	O
~	O
0x100000	int
;	O
table	pointer
->	O
title_row_height	double
=	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_table_get_title_row_height	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_row_height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_row_height	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
double	O
height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
height	double
>	O
0.0	int
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x200000	int
;	O
else	O
table	pointer
->	O
table_flag_override	int
&=	O
~	O
0x200000	int
;	O
table	pointer
->	O
header_row_height	double
=	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_table_get_header_row_height	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_row_height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_row_height	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
double	O
height	double
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
height	double
>	O
0.0	int
)	O
table	pointer
->	O
table_flag_override	int
|=	O
0x400000	int
;	O
else	O
table	pointer
->	O
table_flag_override	int
&=	O
~	O
0x400000	int
;	O
table	pointer
->	O
data_row_height	double
=	O
height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
double	O
dwg_ent_table_get_data_row_height	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_row_height	double
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
bit_nan	function
(	O
)	O
;	O
}	O
}	O
unsigned	O
char	O
dwg_ent_table_has_border_color_overrides	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
has_border_color_overrides	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_border_color_overrides_flag	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BL	int
overrides	int
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
overrides	int
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
border_color_overrides_flag	int
=	O
overrides	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_table_get_border_color_overrides_flag	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
border_color_overrides_flag	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
unsigned	O
char	O
dwg_ent_table_has_border_lineweight_overrides	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
has_border_lineweight_overrides	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_border_lineweight_overrides_flag	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BL	int
overrides	int
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
overrides	int
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
border_lineweight_overrides_flag	int
=	O
overrides	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_table_get_border_lineweight_overrides_flag	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
border_lineweight_overrides_flag	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_horiz_top_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
title_horiz_top_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_horiz_top_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_horiz_top_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_horiz_ins_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
title_horiz_ins_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_horiz_ins_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_horiz_ins_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_horiz_bottom_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
title_horiz_bottom_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_horiz_bottom_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_horiz_bottom_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_vert_left_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
title_vert_left_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_vert_left_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_vert_left_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_vert_ins_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
title_vert_ins_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_vert_ins_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_vert_ins_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_vert_right_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
title_vert_right_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_vert_right_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_vert_right_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_horiz_top_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
header_horiz_top_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_horiz_top_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_horiz_top_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_horiz_ins_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
header_horiz_ins_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_horiz_ins_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_horiz_ins_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_horiz_bottom_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
header_horiz_bottom_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_horiz_bottom_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_horiz_bottom_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_vert_left_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
header_vert_left_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_vert_left_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_vert_left_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_vert_ins_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
header_vert_ins_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_vert_ins_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_vert_ins_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_vert_right_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
header_vert_right_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_vert_right_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_vert_right_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_horiz_top_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
data_horiz_top_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_horiz_top_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_horiz_top_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_horiz_ins_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
data_horiz_ins_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_horiz_ins_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_horiz_ins_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_horiz_bottom_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
data_horiz_bottom_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_horiz_bottom_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_horiz_bottom_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_vert_ins_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
data_vert_ins_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_vert_ins_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_vert_ins_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_vert_right_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
data_vert_right_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_vert_right_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_vert_right_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_vert_left_linewt	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
linewt	char
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
data_vert_left_linewt	short
=	O
linewt	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_vert_left_linewt	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_vert_left_linewt	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
unsigned	O
char	O
dwg_ent_table_has_border_visibility_overrides	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
has_border_visibility_overrides	char
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
'\0'	O
;	O
}	O
}	O
void	O
dwg_ent_table_set_border_visibility_overrides_flag	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BL	int
overrides	int
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
overrides	int
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
table	pointer
->	O
border_visibility_overrides_flag	int
=	O
overrides	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BL	int
dwg_ent_table_get_border_visibility_overrides_flag	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
border_visibility_overrides_flag	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_horiz_top_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x1	int
;	O
table	pointer
->	O
title_horiz_top_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_horiz_top_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_horiz_top_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_horiz_ins_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x2	int
;	O
table	pointer
->	O
title_horiz_ins_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_horiz_ins_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_horiz_ins_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_horiz_bottom_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x4	int
;	O
table	pointer
->	O
title_horiz_bottom_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_horiz_bottom_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_horiz_bottom_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_vert_left_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x8	int
;	O
table	pointer
->	O
title_vert_left_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_vert_left_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_vert_left_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_vert_ins_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x10	int
;	O
table	pointer
->	O
title_vert_ins_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_vert_ins_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_vert_ins_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_title_vert_right_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x20	int
;	O
table	pointer
->	O
title_vert_right_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_title_vert_right_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
title_vert_right_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_horiz_top_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x40	int
;	O
table	pointer
->	O
header_horiz_top_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_horiz_top_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_horiz_top_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_horiz_ins_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x80	int
;	O
table	pointer
->	O
header_horiz_ins_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_horiz_ins_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_horiz_ins_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_horiz_bottom_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x100	int
;	O
table	pointer
->	O
header_horiz_bottom_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_horiz_bottom_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_horiz_bottom_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_vert_left_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x200	int
;	O
table	pointer
->	O
header_vert_left_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_vert_left_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_vert_left_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_vert_ins_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x400	int
;	O
table	pointer
->	O
header_vert_ins_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_vert_ins_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_vert_ins_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_header_vert_right_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x800	int
;	O
table	pointer
->	O
header_vert_right_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_header_vert_right_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
header_vert_right_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_horiz_top_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x1000	int
;	O
table	pointer
->	O
data_horiz_top_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_horiz_top_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_horiz_top_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_horiz_ins_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x2000	int
;	O
table	pointer
->	O
data_horiz_ins_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_horiz_ins_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_horiz_ins_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_horiz_bottom_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x4000	int
;	O
table	pointer
->	O
data_horiz_bottom_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_horiz_bottom_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_horiz_bottom_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_vert_left_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x8000	int
;	O
table	pointer
->	O
data_vert_left_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_vert_left_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_vert_left_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_vert_ins_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x10000	int
;	O
table	pointer
->	O
data_vert_ins_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_vert_ins_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_vert_ins_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
void	O
dwg_ent_table_set_data_vert_right_visibility	function
(	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
const	O
BITCODE_BS	short
visibility	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
!=	O
NULL	O
&&	O
visibility	short
<=	O
1	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
visibility	short
)	O
table	pointer
->	O
border_visibility_overrides_flag	int
|=	O
0x20000	int
;	O
table	pointer
->	O
data_vert_right_visibility	short
=	O
visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
}	O
}	O
BITCODE_BS	short
dwg_ent_table_get_data_vert_right_visibility	function
(	O
const	O
dwg_ent_table	struct
*	O
restrict	O
table	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
table	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
table	pointer
->	O
data_vert_right_visibility	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
dwg_obj_block_control	struct
*	O
dwg_block_header_get_block_control	function
(	O
const	O
dwg_obj_block_header	struct
*	O
block_header	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
block_header	pointer
&&	O
block_header	pointer
->	O
parent	pointer
&&	O
block_header	pointer
->	O
parent	pointer
->	O
ownerhandle	pointer
&&	O
block_header	pointer
->	O
parent	pointer
->	O
ownerhandle	pointer
->	O
obj	pointer
&&	O
block_header	pointer
->	O
parent	pointer
->	O
ownerhandle	pointer
->	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_BLOCK_CONTROL	int
&&	O
block_header	pointer
->	O
parent	pointer
->	O
ownerhandle	pointer
->	O
obj	pointer
->	O
tio	union
.	O
object	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
block_header	pointer
->	O
parent	pointer
->	O
ownerhandle	pointer
->	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
tio	union
.	O
BLOCK_CONTROL	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_object_ref	struct
*	O
*	O
dwg_obj_block_control_get_block_headers	function
(	O
const	O
dwg_obj_block_control	struct
*	O
restrict	O
ctrl	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_object_ref	struct
*	O
*	O
ptx	pointer
;	O
if	O
(	O
!	O
ctrl	pointer
||	O
(	O
ctrl	pointer
->	O
num_entries	short
&&	O
!	O
ctrl	pointer
->	O
entries	pointer
)	O
)	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: null block_headers"	pointer
,	O
__FUNCTION__	O
)	O
;	O
return	O
NULL	O
;	O
}	O
ptx	pointer
=	O
(	O
dwg_object_ref	struct
*	O
*	O
)	O
malloc	function
(	O
ctrl	pointer
->	O
num_entries	short
*	O
sizeof	O
(	O
Dwg_Object_Ref	struct
*	O
)	O
)	O
;	O
if	O
(	O
ptx	pointer
)	O
{	O
BITCODE_BS	short
i	int
;	O
*	O
error	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ctrl	pointer
->	O
num_entries	short
;	O
i	int
++	O
)	O
{	O
ptx	pointer
[	O
i	int
]	O
=	O
ctrl	pointer
->	O
entries	pointer
[	O
i	int
]	O
;	O
}	O
return	O
ptx	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Out of memory"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BL	int
dwg_obj_block_control_get_num_entries	function
(	O
const	O
dwg_obj_block_control	struct
*	O
restrict	O
ctrl	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ctrl	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
ctrl	pointer
->	O
num_entries	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0L	int
;	O
}	O
}	O
dwg_object_ref	struct
*	O
dwg_obj_block_control_get_model_space	function
(	O
const	O
dwg_obj_block_control	struct
*	O
restrict	O
ctrl	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ctrl	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
ctrl	pointer
->	O
model_space	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_object_ref	struct
*	O
dwg_obj_block_control_get_paper_space	function
(	O
const	O
dwg_obj_block_control	struct
*	O
restrict	O
ctrl	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ctrl	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
ctrl	pointer
->	O
paper_space	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
char	O
*	O
dwg_obj_block_header_get_name	function
(	O
const	O
dwg_obj_block_header	struct
*	O
restrict	O
hdr	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
hdr	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
hdr	pointer
->	O
name	pointer
)	O
;	O
else	O
return	O
hdr	pointer
->	O
name	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_obj_block_header	struct
*	O
dwg_get_block_header	function
(	O
dwg_data	struct
*	O
restrict	O
dwg	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
;	O
Dwg_Object_BLOCK_HEADER	struct
*	O
blk	struct
;	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
!	O
dwg	pointer
||	O
dwg	pointer
->	O
num_classes	short
>	O
1000	int
||	O
dwg	pointer
->	O
num_objects	int
>	O
0xfffffff	int
)	O
{	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
dwg	pointer
->	O
header	struct
.	O
version	short
;	O
obj	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
0	int
]	O
;	O
while	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
!=	O
DWG_TYPE_BLOCK_HEADER	int
)	O
{	O
if	O
(	O
obj	pointer
->	O
size	char
>	O
0xffff	int
)	O
{	O
*	O
error	int
=	O
2	int
;	O
return	O
NULL	O
;	O
}	O
obj	pointer
=	O
dwg_next_object	function
(	O
obj	pointer
)	O
;	O
}	O
if	O
(	O
obj	pointer
&&	O
DWG_TYPE_BLOCK_HEADER	int
==	O
obj	pointer
->	O
type	short
)	O
{	O
if	O
(	O
obj	pointer
->	O
size	char
>	O
0xffff	int
)	O
{	O
*	O
error	int
=	O
2	int
;	O
return	O
NULL	O
;	O
}	O
blk	struct
=	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
tio	union
.	O
BLOCK_HEADER	pointer
;	O
if	O
(	O
strEQc	O
(	O
blk	struct
->	O
name	pointer
,	O
"*Paper_Space"	pointer
)	O
)	O
dwg	pointer
->	O
pspace_block	pointer
=	O
obj	pointer
;	O
else	O
if	O
(	O
strEQc	O
(	O
blk	struct
->	O
name	pointer
,	O
"*Model_Space"	pointer
)	O
)	O
dwg	pointer
->	O
mspace_block	pointer
=	O
obj	pointer
;	O
return	O
blk	struct
;	O
}	O
else	O
{	O
*	O
error	int
=	O
3	int
;	O
LOG_ERROR	O
(	O
"%s: BLOCK_HEADER not found"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
char	O
*	O
dwg_obj_layer_get_name	function
(	O
const	O
dwg_obj_layer	struct
*	O
restrict	O
layer	int
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
layer	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
layer	int
->	O
name	pointer
)	O
;	O
else	O
return	O
layer	int
->	O
name	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty arg"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BL	int
dwg_object_tablectrl_get_num_entries	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
&&	O
dwg_obj_is_control	function
(	O
obj	pointer
)	O
)	O
{	O
Dwg_Object_STYLE_CONTROL	struct
*	O
ctrl	pointer
=	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
tio	union
.	O
STYLE_CONTROL	pointer
;	O
*	O
error	int
=	O
0	int
;	O
return	O
ctrl	pointer
->	O
num_entries	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid table control arg %p, type: 0x%x"	pointer
,	O
__FUNCTION__	O
,	O
obj	pointer
,	O
obj	pointer
?	O
obj	pointer
->	O
type	short
:	O
0	int
)	O
return	O
0	int
;	O
}	O
}	O
dwg_object_ref	struct
*	O
*	O
dwg_object_tablectrl_get_entries	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
&&	O
dwg_obj_is_control	function
(	O
obj	pointer
)	O
)	O
{	O
Dwg_Object_STYLE_CONTROL	struct
*	O
ctrl	pointer
=	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
tio	union
.	O
STYLE_CONTROL	pointer
;	O
return	O
ctrl	pointer
->	O
entries	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid table control arg %p, type: 0x%x"	pointer
,	O
__FUNCTION__	O
,	O
obj	pointer
,	O
obj	pointer
?	O
obj	pointer
->	O
type	short
:	O
0	int
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_object_ref	struct
*	O
dwg_object_tablectrl_get_entry	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
const	O
BITCODE_BS	short
idx	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
&&	O
dwg_obj_is_control	function
(	O
obj	pointer
)	O
)	O
{	O
Dwg_Object_STYLE_CONTROL	struct
*	O
ctrl	pointer
=	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
tio	union
.	O
STYLE_CONTROL	pointer
;	O
const	O
BITCODE_BS	short
count	int
=	O
ctrl	pointer
->	O
num_entries	short
;	O
if	O
(	O
idx	short
<	O
count	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
ctrl	pointer
->	O
entries	pointer
[	O
idx	short
]	O
;	O
}	O
else	O
{	O
*	O
error	int
=	O
2	int
;	O
LOG_ERROR	O
(	O
"%s: idx %d out of bounds %d"	pointer
,	O
__FUNCTION__	O
,	O
idx	short
,	O
count	int
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid table control arg %p, type: 0x%x"	pointer
,	O
__FUNCTION__	O
,	O
obj	pointer
,	O
obj	pointer
?	O
obj	pointer
->	O
type	short
:	O
0	int
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_object_ref	struct
*	O
dwg_object_tablectrl_get_ownerhandle	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
&&	O
dwg_obj_is_control	function
(	O
obj	pointer
)	O
)	O
{	O
return	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
ownerhandle	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid table control arg %p, type: 0x%x"	pointer
,	O
__FUNCTION__	O
,	O
obj	pointer
,	O
obj	pointer
?	O
obj	pointer
->	O
type	short
:	O
0	int
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_object_ref	struct
*	O
dwg_object_tablectrl_get_xdicobjhandle	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
&&	O
dwg_obj_is_control	function
(	O
obj	pointer
)	O
)	O
{	O
return	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
xdicobjhandle	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid table control arg %p, type: 0x%x"	pointer
,	O
__FUNCTION__	O
,	O
obj	pointer
,	O
obj	pointer
?	O
obj	pointer
->	O
type	short
:	O
0	int
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BL	int
dwg_object_tablectrl_get_objid	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
&&	O
dwg_obj_is_control	function
(	O
obj	pointer
)	O
)	O
{	O
Dwg_Object_STYLE_CONTROL	struct
*	O
ctrl	pointer
=	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
tio	union
.	O
STYLE_CONTROL	pointer
;	O
return	O
ctrl	pointer
->	O
objid	int
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid table control arg %p, type: 0x%x"	pointer
,	O
__FUNCTION__	O
,	O
obj	pointer
,	O
obj	pointer
?	O
obj	pointer
->	O
type	short
:	O
0	int
)	O
return	O
0	int
;	O
}	O
}	O
char	O
*	O
dwg_ref_get_table_name	function
(	O
const	O
dwg_object_ref	struct
*	O
restrict	O
ref	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
char	O
*	O
name	pointer
=	O
NULL	O
;	O
if	O
(	O
ref	pointer
&&	O
ref	pointer
->	O
obj	pointer
)	O
name	pointer
=	O
dwg_obj_table_get_name	function
(	O
ref	pointer
->	O
obj	pointer
,	O
error	int
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
name	pointer
=	O
(	O
char	O
*	O
)	O
"ByLayer"	pointer
;	O
return	O
name	pointer
;	O
}	O
char	O
*	O
dwg_obj_table_get_name	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
&&	O
(	O
dwg_obj_is_table	function
(	O
obj	pointer
)	O
)	O
)	O
{	O
Dwg_Object_STYLE	struct
*	O
table	pointer
=	O
obj	pointer
->	O
tio	union
.	O
object	pointer
->	O
tio	union
.	O
STYLE	pointer
;	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
obj	pointer
->	O
parent	pointer
->	O
header	struct
.	O
version	short
>=	O
R_2007	int
)	O
return	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
table	pointer
->	O
name	pointer
)	O
;	O
else	O
return	O
table	pointer
->	O
name	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid table arg %p, type: 0x%x"	pointer
,	O
__FUNCTION__	O
,	O
obj	pointer
,	O
obj	pointer
?	O
obj	pointer
->	O
type	short
:	O
0	int
)	O
return	O
NULL	O
;	O
}	O
}	O
char	O
*	O
dwg_ent_get_layer_name	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
char	O
*	O
name	pointer
=	O
NULL	O
;	O
Dwg_Object	struct
*	O
layer	int
=	O
ent	pointer
->	O
layer	int
?	O
ent	pointer
->	O
layer	int
->	O
obj	pointer
:	O
NULL	O
;	O
if	O
(	O
layer	int
)	O
name	pointer
=	O
dwg_obj_table_get_name	function
(	O
layer	int
,	O
error	int
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
name	pointer
=	O
(	O
char	O
*	O
)	O
"0"	pointer
;	O
return	O
name	pointer
;	O
}	O
char	O
*	O
dwg_ent_get_ltype_name	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
char	O
*	O
name	pointer
=	O
NULL	O
;	O
Dwg_Object	struct
*	O
ltype	pointer
=	O
ent	pointer
->	O
ltype	pointer
?	O
ent	pointer
->	O
ltype	pointer
->	O
obj	pointer
:	O
NULL	O
;	O
if	O
(	O
ltype	pointer
)	O
name	pointer
=	O
dwg_obj_table_get_name	function
(	O
ltype	pointer
,	O
error	int
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
name	pointer
=	O
(	O
char	O
*	O
)	O
"ByLayer"	pointer
;	O
return	O
name	pointer
;	O
}	O
BITCODE_RL	int
dwg_ent_get_bitsize	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_ent_to_object	function
(	O
ent	pointer
,	O
error	int
)	O
;	O
if	O
(	O
obj	pointer
&&	O
!	O
*	O
error	int
)	O
{	O
return	O
obj	pointer
->	O
bitsize	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
BITCODE_BL	int
dwg_ent_get_num_eed	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
!	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
*	O
error	int
=	O
0	int
;	O
return	O
ent	pointer
->	O
num_eed	int
;	O
}	O
dwg_entity_eed	struct
*	O
dwg_ent_get_eed	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
const	O
BITCODE_BL	int
idx	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
!	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid ent"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
else	O
if	O
(	O
idx	short
>=	O
ent	pointer
->	O
num_eed	int
)	O
{	O
*	O
error	int
=	O
2	int
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
&	O
ent	pointer
->	O
eed	pointer
[	O
idx	short
]	O
;	O
}	O
}	O
dwg_entity_eed_data	struct
*	O
dwg_ent_get_eed_data	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
const	O
BITCODE_BL	int
idx	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
!	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid ent"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
else	O
if	O
(	O
idx	short
>=	O
ent	pointer
->	O
num_eed	int
)	O
{	O
*	O
error	int
=	O
2	int
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
ent	pointer
->	O
eed	pointer
[	O
idx	short
]	O
.	O
data	pointer
;	O
}	O
}	O
EXPORT	O
const	O
Dwg_Color	struct
*	O
dwg_ent_get_color	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
!	O
ent	pointer
)	O
{	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
*	O
error	int
=	O
0	int
;	O
return	O
&	O
(	O
ent	pointer
->	O
color	short
)	O
;	O
}	O
EXPORT	O
BITCODE_B	char
dwg_ent_get_picture_exists	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
preview_exists	char
)	O
;	O
}	O
EXPORT	O
BITCODE_BLL	long
dwg_ent_get_picture_size	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
preview_size	int
)	O
;	O
}	O
EXPORT	O
char	O
*	O
dwg_ent_get_picture	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
preview	pointer
)	O
;	O
}	O
EXPORT	O
BITCODE_BB	char
dwg_ent_get_entmode	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
entmode	char
)	O
;	O
}	O
EXPORT	O
BITCODE_BL	int
dwg_ent_get_num_reactors	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
num_reactors	int
)	O
;	O
}	O
EXPORT	O
BITCODE_B	char
dwg_ent_get_xdic_missing_flag	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
xdic_missing_flag	char
)	O
;	O
}	O
EXPORT	O
BITCODE_B	char
dwg_ent_get_isbylayerlt	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
isbylayerlt	char
)	O
;	O
}	O
EXPORT	O
BITCODE_B	char
dwg_ent_get_nolinks	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
nolinks	char
)	O
;	O
}	O
EXPORT	O
double	O
dwg_ent_get_linetype_scale	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
ltype_scale	double
)	O
;	O
}	O
EXPORT	O
BITCODE_BB	char
dwg_ent_get_linetype_flags	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
ltype_flags	char
)	O
;	O
}	O
EXPORT	O
BITCODE_BB	char
dwg_ent_get_plotstyle_flags	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
plotstyle_flags	char
)	O
;	O
}	O
EXPORT	O
BITCODE_BB	char
dwg_ent_get_material_flags	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
material_flags	char
)	O
;	O
}	O
EXPORT	O
BITCODE_RC	char
dwg_ent_get_shadow_flags	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
shadow_flags	char
)	O
;	O
}	O
EXPORT	O
BITCODE_B	char
dwg_ent_has_full_visualstyle	function
(	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
has_full_visualstyle	char
)	O
;	O
}	O
EXPORT	O
BITCODE_B	char
dwg_ent_has_face_visualstyle	function
(	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
has_face_visualstyle	char
)	O
;	O
}	O
EXPORT	O
BITCODE_B	char
dwg_ent_has_edge_visualstyle	function
(	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
has_edge_visualstyle	char
)	O
;	O
}	O
EXPORT	O
BITCODE_BS	short
dwg_ent_get_invisible	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
invisible	char
)	O
;	O
}	O
EXPORT	O
BITCODE_RC	char
dwg_ent_get_linewt	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
linewt	char
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
dwg_ent_get_ownerhandle	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
ownerhandle	pointer
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
*	O
dwg_ent_get_reactors	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
reactors	pointer
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
dwg_ent_get_xdicobjhandle	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
xdicobjhandle	pointer
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
dwg_ent_get_prev_entity	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
prev_entity	pointer
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
dwg_ent_get_next_entity	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
next_entity	pointer
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
dwg_ent_get_layer	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
layer	int
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
dwg_ent_get_ltype	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
ltype	pointer
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
dwg_ent_get_material	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
material	pointer
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
dwg_ent_get_plotstyle	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
plotstyle	pointer
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
dwg_ent_get_full_visualstyle	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
full_visualstyle	pointer
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
dwg_ent_get_face_visualstyle	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
face_visualstyle	pointer
)	O
;	O
}	O
EXPORT	O
dwg_object_ref	struct
*	O
dwg_ent_get_edge_visualstyle	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
ent	pointer
,	O
edge_visualstyle	pointer
)	O
;	O
}	O
dwg_object	struct
*	O
dwg_ent_to_object	function
(	O
const	O
dwg_obj_ent	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_data	struct
*	O
dwg	pointer
;	O
dwg_object	struct
*	O
retval	pointer
;	O
if	O
(	O
!	O
obj	pointer
)	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Empty or invalid obj"	pointer
,	O
__FUNCTION__	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dwg	pointer
=	O
obj	pointer
->	O
dwg	pointer
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
dwg	pointer
->	O
header	struct
.	O
version	short
;	O
if	O
(	O
obj	pointer
->	O
objid	int
>=	O
dwg	pointer
->	O
num_objects	int
)	O
{	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
retval	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
obj	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
retval	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_ENTITY	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
retval	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
dwg_object	struct
*	O
dwg_ent_generic_to_object	function
(	O
const	O
dwg_ent_generic	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
return	O
dwg_obj_generic_to_object	function
(	O
(	O
dwg_obj_generic	struct
*	O
restrict	O
)	O
obj	pointer
,	O
error	int
)	O
;	O
}	O
dwg_obj_ent	struct
*	O
dwg_ent_generic_parent	function
(	O
const	O
dwg_ent_generic	struct
*	O
restrict	O
ent	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ent	pointer
&&	O
ent	pointer
->	O
parent	pointer
)	O
{	O
dwg_obj_ent	struct
*	O
retval	pointer
=	O
ent	pointer
->	O
parent	pointer
;	O
*	O
error	int
=	O
0	int
;	O
return	O
retval	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Empty or invalid obj"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_obj_ent	struct
*	O
dwg_object_to_entity	function
(	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_ENTITY	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
obj	pointer
->	O
parent	pointer
->	O
header	struct
.	O
version	short
;	O
return	O
obj	pointer
->	O
tio	union
.	O
entity	long
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Empty or invalid obj"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
unsigned	O
int	O
dwg_get_num_classes	function
(	O
const	O
dwg_data	struct
*	O
dwg	pointer
)	O
{	O
if	O
(	O
!	O
dwg	pointer
)	O
return	O
0	int
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
dwg	pointer
->	O
header	struct
.	O
version	short
;	O
return	O
dwg	pointer
->	O
num_classes	short
;	O
}	O
dwg_class	pointer
*	O
dwg_get_class	function
(	O
const	O
dwg_data	struct
*	O
dwg	pointer
,	O
unsigned	O
int	O
idx	short
)	O
{	O
if	O
(	O
!	O
dwg	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
dwg	pointer
->	O
header	struct
.	O
version	short
;	O
return	O
(	O
idx	short
<	O
dwg	pointer
->	O
num_classes	short
)	O
?	O
&	O
dwg	pointer
->	O
dwg_class	pointer
[	O
idx	short
]	O
:	O
NULL	O
;	O
}	O
dwg_object	struct
*	O
dwg_get_object	function
(	O
dwg_data	struct
*	O
dwg	pointer
,	O
const	O
BITCODE_BL	int
idx	short
)	O
{	O
if	O
(	O
!	O
dwg	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
dwg	pointer
->	O
header	struct
.	O
version	short
;	O
return	O
(	O
idx	short
<	O
dwg	pointer
->	O
num_objects	int
)	O
?	O
&	O
dwg	pointer
->	O
object	pointer
[	O
idx	short
]	O
:	O
NULL	O
;	O
}	O
dwg_object	struct
*	O
dwg_absref_get_object	function
(	O
const	O
dwg_data	struct
*	O
dwg	pointer
,	O
const	O
BITCODE_BL	int
absref	long
)	O
{	O
if	O
(	O
absref	long
)	O
return	O
dwg_resolve_handle	function
(	O
dwg	pointer
,	O
absref	long
)	O
;	O
else	O
return	O
NULL	O
;	O
}	O
BITCODE_RL	int
dwg_object_get_bitsize	function
(	O
const	O
dwg_object	struct
*	O
obj	pointer
)	O
{	O
return	O
obj	pointer
?	O
obj	pointer
->	O
bitsize	int
:	O
0	int
;	O
}	O
BITCODE_BL	int
dwg_object_get_index	function
(	O
const	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
obj	pointer
->	O
parent	pointer
->	O
header	struct
.	O
version	short
;	O
return	O
obj	pointer
->	O
index	short
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty obj"	pointer
,	O
__FUNCTION__	O
)	O
return	O
0	int
;	O
}	O
}	O
dwg_handle	struct
*	O
dwg_object_get_handle	function
(	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
obj	pointer
->	O
parent	pointer
->	O
header	struct
.	O
version	short
;	O
return	O
&	O
(	O
obj	pointer
->	O
handle	pointer
)	O
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty obj"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
int	O
dwg_object_get_type	function
(	O
const	O
dwg_object	struct
*	O
obj	pointer
)	O
{	O
if	O
(	O
obj	pointer
)	O
{	O
return	O
obj	pointer
->	O
type	short
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ref"	pointer
,	O
__FUNCTION__	O
)	O
return	O
-	O
1	int
;	O
}	O
}	O
int	O
dwg_object_get_fixedtype	function
(	O
const	O
dwg_object	struct
*	O
obj	pointer
)	O
{	O
if	O
(	O
obj	pointer
)	O
{	O
return	O
obj	pointer
->	O
fixedtype	enum
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ref"	pointer
,	O
__FUNCTION__	O
)	O
return	O
-	O
1	int
;	O
}	O
}	O
char	O
*	O
dwg_object_get_dxfname	function
(	O
const	O
dwg_object	struct
*	O
obj	pointer
)	O
{	O
if	O
(	O
obj	pointer
)	O
{	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
obj	pointer
->	O
parent	pointer
->	O
header	struct
.	O
version	short
;	O
return	O
obj	pointer
->	O
dxfname	pointer
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ref"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
EXPORT	O
BITCODE_BL	int
dwg_obj_get_objid	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
obj	pointer
,	O
objid	int
)	O
;	O
}	O
BITCODE_BL	int
dwg_obj_get_num_eed	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
!	O
obj	pointer
)	O
{	O
*	O
error	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
*	O
error	int
=	O
0	int
;	O
return	O
obj	pointer
->	O
num_eed	int
;	O
}	O
dwg_entity_eed	struct
*	O
dwg_obj_get_eed	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
const	O
BITCODE_BL	int
idx	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
!	O
obj	pointer
)	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid obj"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
else	O
if	O
(	O
idx	short
>=	O
obj	pointer
->	O
num_eed	int
)	O
{	O
*	O
error	int
=	O
2	int
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
&	O
obj	pointer
->	O
eed	pointer
[	O
idx	short
]	O
;	O
}	O
}	O
dwg_entity_eed_data	struct
*	O
dwg_obj_get_eed_data	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
const	O
BITCODE_BL	int
idx	short
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
!	O
obj	pointer
)	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty or invalid obj"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
else	O
if	O
(	O
idx	short
>=	O
obj	pointer
->	O
num_eed	int
)	O
{	O
*	O
error	int
=	O
2	int
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
obj	pointer
->	O
eed	pointer
[	O
idx	short
]	O
.	O
data	pointer
;	O
}	O
}	O
EXPORT	O
BITCODE_H	pointer
dwg_obj_get_ownerhandle	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
obj	pointer
,	O
ownerhandle	pointer
)	O
;	O
}	O
EXPORT	O
BITCODE_BL	int
dwg_obj_get_num_reactors	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
obj	pointer
,	O
num_reactors	int
)	O
;	O
}	O
EXPORT	O
BITCODE_H	pointer
*	O
dwg_obj_get_reactors	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
obj	pointer
,	O
reactors	pointer
)	O
;	O
}	O
EXPORT	O
BITCODE_H	pointer
dwg_obj_get_xdicobjhandle	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
obj	pointer
,	O
xdicobjhandle	pointer
)	O
;	O
}	O
EXPORT	O
BITCODE_B	char
dwg_obj_get_xdic_missing_flag	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
obj	pointer
,	O
xdic_missing_flag	char
)	O
;	O
}	O
EXPORT	O
BITCODE_B	char
dwg_obj_get_has_ds_binary_data	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
obj	pointer
,	O
has_ds_binary_data	char
)	O
;	O
}	O
EXPORT	O
Dwg_Handle	struct
*	O
dwg_obj_get_handleref	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
_BODY_FIELD	O
(	O
obj	pointer
,	O
handleref	struct
)	O
;	O
}	O
dwg_obj_obj	struct
*	O
dwg_object_to_object	function
(	O
dwg_object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
obj	pointer
->	O
parent	pointer
->	O
header	struct
.	O
version	short
;	O
return	O
obj	pointer
->	O
tio	union
.	O
object	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Empty or invalid obj"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_object	struct
*	O
dwg_obj_obj_to_object	function
(	O
const	O
dwg_obj_obj	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
dwg_data	struct
*	O
dwg	pointer
;	O
dwg_object	struct
*	O
retval	pointer
;	O
if	O
(	O
!	O
obj	pointer
)	O
{	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
dwg	pointer
=	O
obj	pointer
->	O
dwg	pointer
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
dwg	pointer
->	O
header	struct
.	O
version	short
;	O
if	O
(	O
obj	pointer
->	O
objid	int
>=	O
dwg	pointer
->	O
num_objects	int
)	O
{	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
retval	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
obj	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
retval	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
retval	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
dwg_object	struct
*	O
dwg_obj_generic_to_object	function
(	O
const	O
dwg_obj_generic	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
parent	pointer
&&	O
obj	pointer
->	O
parent	pointer
->	O
objid	int
)	O
{	O
dwg_data	struct
*	O
dwg	pointer
=	O
obj	pointer
->	O
parent	pointer
->	O
dwg	pointer
;	O
dwg_object	struct
*	O
retval	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
obj	pointer
->	O
parent	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
obj	pointer
->	O
parent	pointer
->	O
objid	int
>	O
dwg	pointer
->	O
num_objects	int
||	O
dwg	pointer
->	O
header	struct
.	O
version	short
>	O
R_AFTER	int
)	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Invalid obj"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
*	O
error	int
=	O
0	int
;	O
if	O
(	O
dwg_version	int
==	O
R_INVALID	int
)	O
dwg_version	int
=	O
(	O
Dwg_Version_Type	enum
)	O
retval	pointer
->	O
parent	pointer
->	O
header	struct
.	O
version	short
;	O
return	O
retval	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
return	O
NULL	O
;	O
}	O
}	O
dwg_obj_obj	struct
*	O
dwg_obj_generic_parent	function
(	O
const	O
dwg_obj_generic	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
parent	pointer
)	O
{	O
dwg_obj_obj	struct
*	O
retval	pointer
=	O
obj	pointer
->	O
parent	pointer
;	O
*	O
error	int
=	O
0	int
;	O
return	O
retval	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: Empty or invalid obj"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
dwg_object	struct
*	O
dwg_ref_get_object	function
(	O
const	O
dwg_object_ref	struct
*	O
restrict	O
ref	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ref	pointer
)	O
{	O
if	O
(	O
!	O
ref	pointer
->	O
obj	pointer
)	O
{	O
*	O
error	int
=	O
2	int
;	O
LOG_ERROR	O
(	O
"%s: empty ref"	pointer
,	O
__FUNCTION__	O
)	O
}	O
*	O
error	int
=	O
0	int
;	O
return	O
ref	pointer
->	O
obj	pointer
;	O
}	O
else	O
{	O
*	O
error	int
=	O
1	int
;	O
LOG_ERROR	O
(	O
"%s: empty ref"	pointer
,	O
__FUNCTION__	O
)	O
return	O
NULL	O
;	O
}	O
}	O
BITCODE_BL	int
dwg_ref_get_absref	function
(	O
const	O
dwg_object_ref	struct
*	O
restrict	O
ref	pointer
,	O
int	O
*	O
restrict	O
error	int
)	O
{	O
if	O
(	O
ref	pointer
)	O
{	O
*	O
error	int
=	O
0	int
;	O
return	O
ref	pointer
->	O
absolute_ref	long
;	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"%s: empty ref"	pointer
,	O
__FUNCTION__	O
)	O
*	O
error	int
=	O
1	int
;	O
return	O
(	O
BITCODE_BL	int
)	O
-	O
1	int
;	O
}	O
}	O
