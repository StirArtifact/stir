void	O
print_reply	function
(	O
struct	O
dict_connection	struct
*	O
conn	pointer
)	O
{	O
if	O
(	O
strncmp	function
(	O
conn	pointer
->	O
buf	pointer
,	O
"552"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
printf	function
(	O
"%s\n"	pointer
,	O
_	O
(	O
"No match"	pointer
)	O
)	O
;	O
else	O
printf	function
(	O
"Error: %s\n"	pointer
,	O
conn	pointer
->	O
buf	pointer
)	O
;	O
}	O
static	O
size_t	long
utf8_count_newlines	function
(	O
char	O
*	O
str	pointer
)	O
{	O
size_t	long
count	long
=	O
0	int
;	O
struct	O
utf8_iterator	struct
itr	pointer
;	O
for	O
(	O
utf8_iter_first	function
(	O
&	O
itr	pointer
,	O
(	O
char	O
*	O
)	O
str	pointer
)	O
;	O
!	O
utf8_iter_end_p	function
(	O
&	O
itr	pointer
)	O
;	O
utf8_iter_next	function
(	O
&	O
itr	pointer
)	O
)	O
{	O
if	O
(	O
utf8_iter_isascii	O
(	O
itr	pointer
)	O
&&	O
*	O
itr	pointer
.	O
curptr	pointer
==	O
'\n'	O
)	O
count	long
++	O
;	O
}	O
return	O
count	long
;	O
}	O
size_t	long
result_count_lines	function
(	O
struct	O
dict_result	struct
*	O
res	pointer
)	O
{	O
size_t	long
i	long
,	O
count	long
=	O
0	int
;	O
switch	O
(	O
res	pointer
->	O
type	enum
)	O
{	O
case	O
dict_result_define	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
res	pointer
->	O
count	long
;	O
i	long
++	O
)	O
count	long
+=	O
res	pointer
->	O
set	union
.	O
def	pointer
[	O
i	long
]	O
.	O
nlines	long
+	O
3	int
;	O
break	O
;	O
case	O
dict_result_match	int
:	O
count	long
=	O
res	pointer
->	O
count	long
;	O
break	O
;	O
case	O
dict_result_text	int
:	O
count	long
=	O
utf8_count_newlines	function
(	O
res	pointer
->	O
base	int
)	O
;	O
}	O
return	O
count	long
;	O
}	O
static	O
void	O
format_defn	function
(	O
dico_stream_t	pointer
str	pointer
,	O
struct	O
define_result	struct
*	O
def	pointer
)	O
{	O
stream_printf	function
(	O
str	pointer
,	O
_	O
(	O
"From %s, %s:\n"	pointer
)	O
,	O
def	pointer
->	O
database	pointer
,	O
def	pointer
->	O
descr	pointer
)	O
;	O
stream_writez	function
(	O
str	pointer
,	O
def	pointer
->	O
defn	pointer
)	O
;	O
dico_stream_write	function
(	O
str	pointer
,	O
"\n"	pointer
,	O
1	int
)	O
;	O
}	O
static	O
void	O
format_match	function
(	O
dico_stream_t	pointer
str	pointer
,	O
struct	O
match_result	struct
*	O
mat	pointer
)	O
{	O
stream_printf	function
(	O
str	pointer
,	O
"%s \"%s\"\n"	pointer
,	O
mat	pointer
->	O
database	pointer
,	O
mat	pointer
->	O
word	pointer
)	O
;	O
}	O
void	O
print_result	function
(	O
struct	O
dict_result	struct
*	O
res	pointer
)	O
{	O
unsigned	O
long	O
i	long
;	O
dico_stream_t	pointer
str	pointer
;	O
str	pointer
=	O
create_pager_stream	function
(	O
result_count_lines	function
(	O
res	pointer
)	O
)	O
;	O
switch	O
(	O
res	pointer
->	O
type	enum
)	O
{	O
case	O
dict_result_define	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
res	pointer
->	O
count	long
;	O
i	long
++	O
)	O
format_defn	function
(	O
str	pointer
,	O
&	O
res	pointer
->	O
set	union
.	O
def	pointer
[	O
i	long
]	O
)	O
;	O
break	O
;	O
case	O
dict_result_match	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
res	pointer
->	O
count	long
;	O
i	long
++	O
)	O
format_match	function
(	O
str	pointer
,	O
&	O
res	pointer
->	O
set	union
.	O
mat	pointer
[	O
i	long
]	O
)	O
;	O
break	O
;	O
case	O
dict_result_text	int
:	O
stream_writez	function
(	O
str	pointer
,	O
res	pointer
->	O
base	int
)	O
;	O
break	O
;	O
}	O
dico_stream_close	function
(	O
str	pointer
)	O
;	O
dico_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
}	O
struct	O
result_display	struct
{	O
struct	O
result_display	struct
*	O
next	pointer
;	O
char	O
*	O
database	pointer
;	O
int	O
count	long
;	O
char	O
*	O
*	O
matches	pointer
;	O
}	O
;	O
struct	O
result_display	struct
*	O
alloc_display	function
(	O
struct	O
dict_result	struct
*	O
res	pointer
,	O
size_t	long
from	long
,	O
size_t	long
to	long
)	O
{	O
struct	O
result_display	struct
*	O
disp	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
disp	pointer
)	O
)	O
;	O
size_t	long
i	long
;	O
disp	pointer
->	O
next	pointer
=	O
NULL	O
;	O
disp	pointer
->	O
database	pointer
=	O
res	pointer
->	O
set	union
.	O
mat	pointer
[	O
from	long
]	O
.	O
database	pointer
;	O
disp	pointer
->	O
count	long
=	O
to	long
-	O
from	long
;	O
disp	pointer
->	O
matches	pointer
=	O
xcalloc	function
(	O
to	long
-	O
from	long
,	O
sizeof	O
(	O
disp	pointer
->	O
matches	pointer
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
from	long
<	O
to	long
;	O
i	long
++	O
,	O
from	long
++	O
)	O
disp	pointer
->	O
matches	pointer
[	O
i	long
]	O
=	O
res	pointer
->	O
set	union
.	O
mat	pointer
[	O
from	long
]	O
.	O
word	pointer
;	O
return	O
disp	pointer
;	O
}	O
static	O
char	O
*	O
find_descr	function
(	O
struct	O
dict_connection	struct
*	O
conn	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
conn	pointer
->	O
db_result	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
conn	pointer
->	O
db_result	pointer
->	O
count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
conn	pointer
->	O
db_result	pointer
->	O
set	union
.	O
mat	pointer
[	O
i	long
]	O
.	O
database	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
conn	pointer
->	O
db_result	pointer
->	O
set	union
.	O
mat	pointer
[	O
i	long
]	O
.	O
word	pointer
;	O
}	O
}	O
return	O
_	O
(	O
"(no description available)"	pointer
)	O
;	O
}	O
void	O
print_match_result	function
(	O
struct	O
dict_result	struct
*	O
res	pointer
)	O
{	O
struct	O
result_display	struct
*	O
head	pointer
=	O
NULL	O
,	O
*	O
tail	pointer
=	O
NULL	O
;	O
char	O
*	O
dbname	pointer
=	O
NULL	O
;	O
size_t	long
i	long
,	O
j	long
=	O
0	int
;	O
struct	O
dict_connection	struct
*	O
conn	pointer
=	O
res	pointer
->	O
conn	pointer
;	O
size_t	long
ndb	long
=	O
0	int
;	O
dico_stream_t	pointer
str	pointer
;	O
struct	O
result_display	struct
*	O
p	pointer
;	O
dbname	pointer
=	O
res	pointer
->	O
set	union
.	O
mat	pointer
[	O
0	int
]	O
.	O
database	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
res	pointer
->	O
count	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
res	pointer
->	O
set	union
.	O
mat	pointer
[	O
i	long
]	O
.	O
database	pointer
,	O
dbname	pointer
)	O
)	O
ALLOC_DISPLAY	O
(	O
)	O
;	O
}	O
ALLOC_DISPLAY	O
(	O
)	O
;	O
str	pointer
=	O
create_pager_stream	function
(	O
ndb	long
+	O
result_count_lines	function
(	O
res	pointer
)	O
)	O
;	O
j	long
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
head	pointer
;	O
p	pointer
;	O
)	O
{	O
struct	O
result_display	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
stream_printf	function
(	O
str	pointer
,	O
_	O
(	O
"From %s, %s:\n"	pointer
)	O
,	O
p	pointer
->	O
database	pointer
,	O
find_descr	function
(	O
conn	pointer
,	O
p	pointer
->	O
database	pointer
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	pointer
->	O
count	long
;	O
i	long
++	O
,	O
j	long
++	O
)	O
stream_printf	function
(	O
str	pointer
,	O
"%4d) \"%s\"\n"	pointer
,	O
j	long
,	O
p	pointer
->	O
matches	pointer
[	O
i	long
]	O
)	O
;	O
free	function
(	O
p	pointer
->	O
matches	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
}	O
dico_stream_close	function
(	O
str	pointer
)	O
;	O
dico_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
}	O
int	O
dict_lookup	function
(	O
struct	O
dict_connection	struct
*	O
conn	pointer
,	O
dico_url_t	pointer
url	pointer
)	O
{	O
int	O
rc	int
;	O
switch	O
(	O
url	pointer
->	O
req	struct
.	O
type	enum
)	O
{	O
case	O
DICO_REQUEST_DEFINE	int
:	O
rc	int
=	O
dict_define	function
(	O
conn	pointer
,	O
quotearg_n	function
(	O
0	int
,	O
url	pointer
->	O
req	struct
.	O
database	pointer
)	O
,	O
quotearg_n	function
(	O
1	int
,	O
url	pointer
->	O
req	struct
.	O
word	pointer
)	O
)	O
;	O
break	O
;	O
case	O
DICO_REQUEST_MATCH	int
:	O
rc	int
=	O
dict_match	function
(	O
conn	pointer
,	O
quotearg_n	function
(	O
0	int
,	O
url	pointer
->	O
req	struct
.	O
database	pointer
)	O
,	O
quotearg_n	function
(	O
1	int
,	O
url	pointer
->	O
req	struct
.	O
strategy	pointer
)	O
,	O
quotearg_n	function
(	O
2	int
,	O
url	pointer
->	O
req	struct
.	O
word	pointer
)	O
)	O
;	O
break	O
;	O
default	O
:	O
dico_log	function
(	O
L_CRIT	int
,	O
0	int
,	O
_	O
(	O
"%s:%d: INTERNAL ERROR: unexpected request type"	pointer
)	O
,	O
__FILE__	O
,	O
__LINE__	O
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
struct	O
dict_result	struct
*	O
res	pointer
=	O
dict_conn_last_result	O
(	O
conn	pointer
)	O
;	O
print_result	function
(	O
res	pointer
)	O
;	O
dict_result_free	function
(	O
res	pointer
)	O
;	O
}	O
else	O
print_reply	function
(	O
conn	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dict_lookup_url	function
(	O
dico_url_t	pointer
url	pointer
)	O
{	O
struct	O
dict_connection	struct
*	O
conn	pointer
;	O
if	O
(	O
!	O
url	pointer
->	O
host	pointer
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"Server name or IP not specified"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
dict_connect	function
(	O
&	O
conn	pointer
,	O
url	pointer
)	O
)	O
return	O
1	int
;	O
dict_lookup	function
(	O
conn	pointer
,	O
url	pointer
)	O
;	O
XDICO_DEBUG	O
(	O
1	int
,	O
_	O
(	O
"Quitting\n"	pointer
)	O
)	O
;	O
stream_printf	function
(	O
conn	pointer
->	O
str	pointer
,	O
"QUIT\r\n"	pointer
)	O
;	O
dict_read_reply	function
(	O
conn	pointer
)	O
;	O
dict_conn_close	function
(	O
conn	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dict_word	function
(	O
char	O
*	O
word	pointer
)	O
{	O
int	O
rc	int
;	O
dico_url_t	pointer
url	pointer
;	O
if	O
(	O
memcmp	function
(	O
word	pointer
,	O
"dict://"	pointer
,	O
7	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
dico_url_parse	function
(	O
&	O
url	pointer
,	O
word	pointer
)	O
)	O
return	O
1	int
;	O
rc	int
=	O
dict_lookup_url	function
(	O
url	pointer
)	O
;	O
dico_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
}	O
else	O
{	O
dico_url	struct
.	O
req	struct
.	O
word	pointer
=	O
word	pointer
;	O
rc	int
=	O
dict_lookup_url	function
(	O
&	O
dico_url	struct
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
void	O
dict_run_single_command	function
(	O
struct	O
dict_connection	struct
*	O
conn	pointer
,	O
const	O
char	O
*	O
cmd	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
code	int
)	O
{	O
if	O
(	O
arg	pointer
)	O
stream_printf	function
(	O
conn	pointer
->	O
str	pointer
,	O
"%s \"%s\"\r\n"	pointer
,	O
cmd	pointer
,	O
arg	pointer
)	O
;	O
else	O
stream_printf	function
(	O
conn	pointer
->	O
str	pointer
,	O
"%s\r\n"	pointer
,	O
cmd	pointer
)	O
;	O
dict_read_reply	function
(	O
conn	pointer
)	O
;	O
if	O
(	O
!	O
dict_status_p	function
(	O
conn	pointer
,	O
code	int
)	O
)	O
print_reply	function
(	O
conn	pointer
)	O
;	O
else	O
{	O
struct	O
dict_result	struct
*	O
res	pointer
;	O
dict_multiline_reply	function
(	O
conn	pointer
)	O
;	O
dict_read_reply	function
(	O
conn	pointer
)	O
;	O
dict_result_create	function
(	O
conn	pointer
,	O
dict_result_text	int
,	O
1	int
,	O
obstack_finish	O
(	O
&	O
conn	pointer
->	O
stk	struct
)	O
)	O
;	O
res	pointer
=	O
dict_conn_last_result	O
(	O
conn	pointer
)	O
;	O
print_result	function
(	O
res	pointer
)	O
;	O
dict_result_free	function
(	O
res	pointer
)	O
;	O
}	O
}	O
int	O
dict_single_command	function
(	O
char	O
*	O
cmd	pointer
,	O
char	O
*	O
arg	pointer
,	O
char	O
*	O
code	int
)	O
{	O
struct	O
dict_connection	struct
*	O
conn	pointer
;	O
if	O
(	O
!	O
dico_url	struct
.	O
host	pointer
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"Server name or IP not specified"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
dict_connect	function
(	O
&	O
conn	pointer
,	O
&	O
dico_url	struct
)	O
)	O
return	O
1	int
;	O
dict_run_single_command	function
(	O
conn	pointer
,	O
cmd	pointer
,	O
arg	pointer
,	O
code	int
)	O
;	O
dict_conn_close	function
(	O
conn	pointer
)	O
;	O
return	O
0	int
;	O
}	O
