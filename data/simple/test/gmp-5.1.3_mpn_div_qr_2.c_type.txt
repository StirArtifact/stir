static	O
void	O
invert_4by2	function
(	O
mp_ptr	pointer
di	pointer
,	O
mp_limb_t	long
d1	long
,	O
mp_limb_t	long
d0	long
)	O
{	O
mp_limb_t	long
v1	long
,	O
v0	long
,	O
p1	long
,	O
t1	long
,	O
t0	long
,	O
p0	long
,	O
mask	long
;	O
invert_limb	O
(	O
v1	long
,	O
d1	long
)	O
;	O
p1	long
=	O
d1	long
*	O
v1	long
;	O
p1	long
+=	O
d0	long
;	O
if	O
(	O
p1	long
<	O
d0	long
)	O
{	O
v1	long
--	O
;	O
mask	long
=	O
-	O
(	O
mp_limb_t	long
)	O
(	O
p1	long
>=	O
d1	long
)	O
;	O
p1	long
-=	O
d1	long
;	O
v1	long
+=	O
mask	long
;	O
p1	long
-=	O
mask	long
&	O
d1	long
;	O
}	O
umul_ppmm	O
(	O
t1	long
,	O
p0	long
,	O
d0	long
,	O
v1	long
)	O
;	O
p1	long
+=	O
t1	long
;	O
if	O
(	O
p1	long
<	O
t1	long
)	O
{	O
if	O
(	O
UNLIKELY	O
(	O
p1	long
>=	O
d1	long
)	O
)	O
{	O
if	O
(	O
p1	long
>	O
d1	long
||	O
p0	long
>=	O
d0	long
)	O
{	O
sub_ddmmss	O
(	O
p1	long
,	O
p0	long
,	O
p1	long
,	O
p0	long
,	O
d1	long
,	O
d0	long
)	O
;	O
v1	long
--	O
;	O
}	O
}	O
sub_ddmmss	O
(	O
p1	long
,	O
p0	long
,	O
p1	long
,	O
p0	long
,	O
d1	long
,	O
d0	long
)	O
;	O
v1	long
--	O
;	O
}	O
udiv_qr_3by2	O
(	O
v0	long
,	O
t1	long
,	O
t0	long
,	O
~	O
p1	long
,	O
~	O
p0	long
,	O
MP_LIMB_T_MAX	O
,	O
d1	long
,	O
d0	long
,	O
v1	long
)	O
;	O
di	pointer
[	O
0	int
]	O
=	O
v0	long
;	O
di	pointer
[	O
1	int
]	O
=	O
v1	long
;	O
}	O
static	O
mp_limb_t	long
mpn_div_qr_2n_pi2	function
(	O
mp_ptr	pointer
qp	pointer
,	O
mp_ptr	pointer
rp	pointer
,	O
mp_srcptr	pointer
np	pointer
,	O
mp_size_t	long
nn	long
,	O
mp_limb_t	long
d1	long
,	O
mp_limb_t	long
d0	long
,	O
mp_limb_t	long
di1	long
,	O
mp_limb_t	long
di0	long
)	O
{	O
mp_limb_t	long
qh	long
;	O
mp_size_t	long
i	long
;	O
mp_limb_t	long
r1	long
,	O
r0	long
;	O
ASSERT	O
(	O
nn	long
>=	O
2	int
)	O
;	O
ASSERT	O
(	O
d1	long
&	O
GMP_NUMB_HIGHBIT	O
)	O
;	O
r1	long
=	O
np	pointer
[	O
nn	long
-	O
1	int
]	O
;	O
r0	long
=	O
np	pointer
[	O
nn	long
-	O
2	int
]	O
;	O
qh	long
=	O
0	int
;	O
if	O
(	O
r1	long
>=	O
d1	long
&&	O
(	O
r1	long
>	O
d1	long
||	O
r0	long
>=	O
d0	long
)	O
)	O
{	O
sub_ddmmss	O
(	O
r1	long
,	O
r0	long
,	O
r1	long
,	O
r0	long
,	O
d1	long
,	O
d0	long
)	O
;	O
qh	long
=	O
1	int
;	O
}	O
for	O
(	O
i	long
=	O
nn	long
-	O
2	int
;	O
i	long
>=	O
2	int
;	O
i	long
-=	O
2	int
)	O
{	O
mp_limb_t	long
n1	long
,	O
n0	long
,	O
q1	long
,	O
q0	long
;	O
n1	long
=	O
np	pointer
[	O
i	long
-	O
1	int
]	O
;	O
n0	long
=	O
np	pointer
[	O
i	long
-	O
2	int
]	O
;	O
udiv_qr_4by2	O
(	O
q1	long
,	O
q0	long
,	O
r1	long
,	O
r0	long
,	O
r1	long
,	O
r0	long
,	O
n1	long
,	O
n0	long
,	O
d1	long
,	O
d0	long
,	O
di1	long
,	O
di0	long
)	O
;	O
qp	pointer
[	O
i	long
-	O
1	int
]	O
=	O
q1	long
;	O
qp	pointer
[	O
i	long
-	O
2	int
]	O
=	O
q0	long
;	O
}	O
if	O
(	O
i	long
>	O
0	int
)	O
{	O
mp_limb_t	long
q	int
;	O
udiv_qr_3by2	O
(	O
q	int
,	O
r1	long
,	O
r0	long
,	O
r1	long
,	O
r0	long
,	O
np	pointer
[	O
0	int
]	O
,	O
d1	long
,	O
d0	long
,	O
di1	long
)	O
;	O
qp	pointer
[	O
0	int
]	O
=	O
q	int
;	O
}	O
rp	pointer
[	O
1	int
]	O
=	O
r1	long
;	O
rp	pointer
[	O
0	int
]	O
=	O
r0	long
;	O
return	O
qh	long
;	O
}	O
mp_limb_t	long
mpn_div_qr_2	O
(	O
mp_ptr	pointer
qp	pointer
,	O
mp_ptr	pointer
rp	pointer
,	O
mp_srcptr	pointer
np	pointer
,	O
mp_size_t	long
nn	long
,	O
mp_srcptr	pointer
dp	pointer
)	O
{	O
mp_limb_t	long
d1	long
;	O
mp_limb_t	long
d0	long
;	O
gmp_pi1_t	struct
dinv	struct
;	O
ASSERT	O
(	O
nn	long
>=	O
2	int
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
qp	pointer
,	O
nn	long
-	O
2	int
,	O
np	pointer
,	O
nn	long
)	O
||	O
qp	pointer
>=	O
np	pointer
+	O
2	int
)	O
;	O
ASSERT_MPN	O
(	O
np	pointer
,	O
nn	long
)	O
;	O
ASSERT_MPN	O
(	O
dp	pointer
,	O
2	int
)	O
;	O
d1	long
=	O
dp	pointer
[	O
1	int
]	O
;	O
d0	long
=	O
dp	pointer
[	O
0	int
]	O
;	O
ASSERT	O
(	O
d1	long
>	O
0	int
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
d1	long
&	O
GMP_NUMB_HIGHBIT	O
)	O
)	O
{	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
nn	long
,	O
DIV_QR_2_PI2_THRESHOLD	O
)	O
)	O
{	O
gmp_pi1_t	struct
dinv	struct
;	O
invert_pi1	O
(	O
dinv	struct
,	O
d1	long
,	O
d0	long
)	O
;	O
return	O
mpn_div_qr_2n_pi1	O
(	O
qp	pointer
,	O
rp	pointer
,	O
np	pointer
,	O
nn	long
,	O
d1	long
,	O
d0	long
,	O
dinv	struct
.	O
inv32	long
)	O
;	O
}	O
else	O
{	O
mp_limb_t	long
di	pointer
[	O
2	int
]	O
;	O
invert_4by2	function
(	O
di	pointer
,	O
d1	long
,	O
d0	long
)	O
;	O
return	O
mpn_div_qr_2n_pi2	function
(	O
qp	pointer
,	O
rp	pointer
,	O
np	pointer
,	O
nn	long
,	O
d1	long
,	O
d0	long
,	O
di	pointer
[	O
1	int
]	O
,	O
di	pointer
[	O
0	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
int	O
shift	long
;	O
count_leading_zeros	O
(	O
shift	long
,	O
d1	long
)	O
;	O
d1	long
=	O
(	O
d1	long
<<	O
shift	long
)	O
|	O
(	O
d0	long
>>	O
(	O
GMP_LIMB_BITS	int
-	O
shift	long
)	O
)	O
;	O
d0	long
<<=	O
shift	long
;	O
invert_pi1	O
(	O
dinv	struct
,	O
d1	long
,	O
d0	long
)	O
;	O
return	O
mpn_div_qr_2u_pi1	O
(	O
qp	pointer
,	O
rp	pointer
,	O
np	pointer
,	O
nn	long
,	O
d1	long
,	O
d0	long
,	O
shift	long
,	O
dinv	struct
.	O
inv32	long
)	O
;	O
}	O
}	O
