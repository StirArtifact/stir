typedef	O
struct	O
{	O
int	O
id	int
,	O
http_links	int
,	O
https_links	int
,	O
http_links_same_host	int
,	O
https_links_same_host	int
,	O
status	int
,	O
redirs	int
,	O
redir_insecure	int
,	O
landed_on_https	int
;	O
char	O
host	pointer
[	O
256	int
]	O
;	O
}	O
stats_t	struct
;	O
static	O
stats_t	struct
stats	pointer
;	O
static	O
void	O
write_stats	function
(	O
void	O
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
if	O
(	O
(	O
fp	pointer
=	O
fopen	function
(	O
"out.csv"	pointer
,	O
"a"	pointer
)	O
)	O
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"%d,%s,%d,%d,%d,%d,%d,%d,%d,%d\n"	pointer
,	O
stats	pointer
.	O
id	int
,	O
stats	pointer
.	O
host	pointer
,	O
stats	pointer
.	O
status	int
,	O
stats	pointer
.	O
redir_insecure	int
,	O
stats	pointer
.	O
redirs	int
,	O
stats	pointer
.	O
landed_on_https	int
,	O
stats	pointer
.	O
http_links_same_host	int
,	O
stats	pointer
.	O
http_links	int
,	O
stats	pointer
.	O
https_links_same_host	int
,	O
stats	pointer
.	O
https_links	int
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
}	O
static	O
int	O
_normalize_uri	function
(	O
wget_iri	struct
*	O
base	pointer
,	O
wget_string	struct
*	O
url	pointer
,	O
const	O
char	O
*	O
encoding	pointer
,	O
wget_buffer	struct
*	O
buf	pointer
)	O
{	O
char	O
*	O
urlpart_encoded	pointer
;	O
size_t	long
urlpart_encoded_length	long
;	O
int	O
rc	int
;	O
if	O
(	O
url	pointer
->	O
len	long
==	O
0	int
||	O
(	O
url	pointer
->	O
len	long
>=	O
1	int
&&	O
*	O
url	pointer
->	O
p	pointer
==	O
'#'	O
)	O
)	O
return	O
-	O
1	int
;	O
char	O
*	O
urlpart	pointer
=	O
wget_strmemdup	function
(	O
url	pointer
->	O
p	pointer
,	O
url	pointer
->	O
len	long
)	O
;	O
if	O
(	O
!	O
urlpart	pointer
)	O
return	O
-	O
2	int
;	O
wget_iri_unescape_url_inline	function
(	O
urlpart	pointer
)	O
;	O
rc	int
=	O
wget_memiconv	function
(	O
encoding	pointer
,	O
urlpart	pointer
,	O
strlen	function
(	O
urlpart	pointer
)	O
,	O
"utf-8"	pointer
,	O
&	O
urlpart_encoded	pointer
,	O
&	O
urlpart_encoded_length	long
)	O
;	O
wget_xfree	O
(	O
urlpart	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
-	O
3	int
;	O
rc	int
=	O
!	O
wget_iri_relative_to_abs	function
(	O
base	pointer
,	O
urlpart_encoded	pointer
,	O
urlpart_encoded_length	long
,	O
buf	pointer
)	O
;	O
wget_xfree	O
(	O
urlpart_encoded	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
-	O
4	int
;	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
_normalize_location	function
(	O
const	O
char	O
*	O
base	pointer
,	O
const	O
char	O
*	O
url	pointer
)	O
{	O
wget_buffer	struct
buf	pointer
;	O
wget_string	struct
url_s	struct
=	O
{	O
.	O
p	pointer
=	O
url	pointer
,	O
.	O
len	long
=	O
strlen	function
(	O
url	pointer
)	O
}	O
;	O
wget_iri	struct
*	O
base_iri	pointer
=	O
wget_iri_parse	function
(	O
base	pointer
,	O
"utf-8"	pointer
)	O
;	O
char	O
sbuf	array
[	O
1024	int
]	O
,	O
*	O
norm_url	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
base_iri	pointer
)	O
return	O
NULL	O
;	O
wget_buffer_init	function
(	O
&	O
buf	pointer
,	O
sbuf	array
,	O
sizeof	O
(	O
sbuf	array
)	O
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
_normalize_uri	function
(	O
base_iri	pointer
,	O
&	O
url_s	struct
,	O
"utf-8"	pointer
,	O
&	O
buf	pointer
)	O
)	O
==	O
0	int
)	O
{	O
norm_url	pointer
=	O
wget_strmemdup	function
(	O
buf	pointer
.	O
data	pointer
,	O
buf	pointer
.	O
length	long
)	O
;	O
}	O
wget_buffer_deinit	function
(	O
&	O
buf	pointer
)	O
;	O
wget_iri_free	function
(	O
&	O
base_iri	pointer
)	O
;	O
return	O
norm_url	pointer
;	O
}	O
static	O
void	O
html_parse	function
(	O
const	O
char	O
*	O
html	pointer
,	O
size_t	long
html_len	long
,	O
const	O
char	O
*	O
encoding	pointer
,	O
const	O
char	O
*	O
hosturl	pointer
)	O
{	O
wget_iri	struct
*	O
base	pointer
=	O
wget_iri_parse	function
(	O
hosturl	pointer
,	O
"utf-8"	pointer
)	O
;	O
wget_iri	struct
*	O
allocated_base	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
reason	array
;	O
char	O
*	O
utf8	pointer
=	O
NULL	O
;	O
wget_buffer	struct
buf	pointer
;	O
char	O
sbuf	array
[	O
1024	int
]	O
;	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
html	pointer
[	O
0	int
]	O
==	O
0xFE	int
&&	O
(	O
unsigned	O
char	O
)	O
html	pointer
[	O
1	int
]	O
==	O
0xFF	int
)	O
{	O
encoding	pointer
=	O
"UTF-16BE"	pointer
;	O
reason	array
=	O
"set by BOM"	pointer
;	O
html	pointer
+=	O
2	int
;	O
html_len	long
-=	O
2	int
;	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
html	pointer
[	O
0	int
]	O
==	O
0xFF	int
&&	O
(	O
unsigned	O
char	O
)	O
html	pointer
[	O
1	int
]	O
==	O
0xFE	int
)	O
{	O
encoding	pointer
=	O
"UTF-16LE"	pointer
;	O
reason	array
=	O
"set by BOM"	pointer
;	O
html	pointer
+=	O
2	int
;	O
html_len	long
-=	O
2	int
;	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
html	pointer
[	O
0	int
]	O
==	O
0xEF	int
&&	O
(	O
unsigned	O
char	O
)	O
html	pointer
[	O
1	int
]	O
==	O
0xBB	int
&&	O
(	O
unsigned	O
char	O
)	O
html	pointer
[	O
2	int
]	O
==	O
0xBF	int
)	O
{	O
encoding	pointer
=	O
"UTF-8"	pointer
;	O
reason	array
=	O
"set by BOM"	pointer
;	O
html	pointer
+=	O
3	int
;	O
html_len	long
-=	O
3	int
;	O
}	O
else	O
{	O
reason	array
=	O
"set by server response"	pointer
;	O
}	O
if	O
(	O
wget_memiconv	function
(	O
encoding	pointer
,	O
html	pointer
,	O
html_len	long
,	O
"UTF-8"	pointer
,	O
&	O
utf8	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
wget_info_printf	function
(	O
"  Convert encoding '%s' (%s) to UTF-8\n"	pointer
,	O
encoding	pointer
?	O
encoding	pointer
:	O
"iso-8859-1"	pointer
,	O
reason	array
)	O
;	O
html	pointer
=	O
utf8	pointer
;	O
}	O
else	O
{	O
wget_info_printf	function
(	O
"Failed to convert non-ASCII encoding '%s' (%s) to UTF-8, skip parsing\n"	pointer
,	O
encoding	pointer
,	O
reason	array
)	O
;	O
return	O
;	O
}	O
wget_html_parsed_result	struct
*	O
parsed	pointer
=	O
wget_html_get_urls_inline	function
(	O
html	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
encoding	pointer
)	O
{	O
if	O
(	O
parsed	pointer
->	O
encoding	pointer
)	O
{	O
encoding	pointer
=	O
parsed	pointer
->	O
encoding	pointer
;	O
reason	array
=	O
"set by document"	pointer
;	O
}	O
else	O
{	O
encoding	pointer
=	O
"CP1252"	pointer
;	O
reason	array
=	O
"default, encoding not specified"	pointer
;	O
}	O
}	O
wget_info_printf	function
(	O
"  URI content encoding = '%s' (%s)\n"	pointer
,	O
encoding	pointer
,	O
reason	array
)	O
;	O
wget_buffer_init	function
(	O
&	O
buf	pointer
,	O
sbuf	array
,	O
sizeof	O
(	O
sbuf	array
)	O
)	O
;	O
if	O
(	O
parsed	pointer
->	O
base	pointer
.	O
p	pointer
)	O
{	O
wget_info_printf	function
(	O
"  base='%.*s'\n"	pointer
,	O
(	O
int	O
)	O
parsed	pointer
->	O
base	pointer
.	O
len	long
,	O
parsed	pointer
->	O
base	pointer
.	O
p	pointer
)	O
;	O
if	O
(	O
_normalize_uri	function
(	O
base	pointer
,	O
&	O
parsed	pointer
->	O
base	pointer
,	O
encoding	pointer
,	O
&	O
buf	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
buf	pointer
.	O
length	long
)	O
{	O
wget_iri	struct
*	O
newbase	pointer
=	O
wget_iri_parse	function
(	O
buf	pointer
.	O
data	pointer
,	O
"utf-8"	pointer
)	O
;	O
if	O
(	O
newbase	pointer
)	O
{	O
wget_iri_free	function
(	O
&	O
base	pointer
)	O
;	O
base	pointer
=	O
newbase	pointer
;	O
}	O
}	O
}	O
}	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
parsed	pointer
->	O
uris	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_html_parsed_url	struct
*	O
html_url	pointer
=	O
wget_vector_get	function
(	O
parsed	pointer
->	O
uris	pointer
,	O
it	int
)	O
;	O
wget_string	struct
*	O
url	pointer
=	O
&	O
html_url	pointer
->	O
url	pointer
;	O
if	O
(	O
_normalize_uri	function
(	O
base	pointer
,	O
url	pointer
,	O
encoding	pointer
,	O
&	O
buf	pointer
)	O
||	O
buf	pointer
.	O
length	long
==	O
0	int
)	O
continue	O
;	O
wget_iri	struct
*	O
canon_url	pointer
=	O
wget_iri_parse	function
(	O
buf	pointer
.	O
data	pointer
,	O
"utf-8"	pointer
)	O
;	O
if	O
(	O
!	O
canon_url	pointer
)	O
continue	O
;	O
int	O
same_host	int
=	O
!	O
wget_strcasecmp	function
(	O
canon_url	pointer
->	O
host	pointer
,	O
base	pointer
->	O
host	pointer
)	O
;	O
if	O
(	O
canon_url	pointer
->	O
scheme	enum
==	O
WGET_IRI_SCHEME_HTTPS	int
)	O
{	O
stats	pointer
.	O
https_links	int
++	O
;	O
stats	pointer
.	O
https_links_same_host	int
+=	O
same_host	int
;	O
}	O
else	O
if	O
(	O
canon_url	pointer
->	O
scheme	enum
==	O
WGET_IRI_SCHEME_HTTP	int
)	O
{	O
stats	pointer
.	O
http_links	int
++	O
;	O
stats	pointer
.	O
http_links_same_host	int
+=	O
same_host	int
;	O
}	O
wget_iri_free	function
(	O
&	O
canon_url	pointer
)	O
;	O
}	O
wget_buffer_deinit	function
(	O
&	O
buf	pointer
)	O
;	O
wget_iri_free	function
(	O
&	O
allocated_base	pointer
)	O
;	O
wget_html_free_urls_inline	function
(	O
&	O
parsed	pointer
)	O
;	O
wget_iri_free	function
(	O
&	O
base	pointer
)	O
;	O
wget_xfree	O
(	O
utf8	pointer
)	O
;	O
wget_info_printf	function
(	O
"  same host: http=%d https=%d\n"	pointer
,	O
stats	pointer
.	O
http_links_same_host	int
,	O
stats	pointer
.	O
https_links_same_host	int
)	O
;	O
wget_info_printf	function
(	O
"      total: http=%d https=%d\n"	pointer
,	O
stats	pointer
.	O
http_links	int
,	O
stats	pointer
.	O
https_links	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
WGET_GCC_UNUSED	O
,	O
const	O
char	O
*	O
const	O
*	O
argv	pointer
WGET_GCC_UNUSED	O
)	O
{	O
wget_http_response	struct
*	O
resp	pointer
=	O
NULL	O
;	O
char	O
*	O
url	pointer
=	O
NULL	O
;	O
wget_global_init	function
(	O
WGET_ERROR_STREAM	int
,	O
stdout	pointer
,	O
WGET_INFO_STREAM	int
,	O
stdout	pointer
,	O
WGET_DNS_CACHING	int
,	O
1	int
,	O
0	int
)	O
;	O
struct	O
sigaction	struct
sig_action	struct
;	O
memset	function
(	O
&	O
sig_action	struct
,	O
0	int
,	O
sizeof	O
(	O
sig_action	struct
)	O
)	O
;	O
sig_action	struct
.	O
sa_sigaction	pointer
=	O
(	O
void	O
(	O
*	O
)	O
(	O
int	O
,	O
siginfo_t	struct
*	O
,	O
void	O
*	O
)	O
)	O
SIG_IGN	O
;	O
sigaction	struct
(	O
SIGPIPE	int
,	O
&	O
sig_action	struct
,	O
NULL	O
)	O
;	O
wget_tcp_set_timeout	function
(	O
NULL	O
,	O
5000	int
)	O
;	O
wget_tcp_set_connect_timeout	function
(	O
NULL	O
,	O
5000	int
)	O
;	O
wget_dns_set_timeout	function
(	O
NULL	O
,	O
5000	int
)	O
;	O
wget_ssl_set_config_int	function
(	O
WGET_SSL_OCSP	int
,	O
0	int
)	O
;	O
wget_ssl_set_config_int	function
(	O
WGET_SSL_OCSP_STAPLING	int
,	O
0	int
)	O
;	O
while	O
(	O
fscanf	function
(	O
stdin	pointer
,	O
"%d,%255s"	pointer
,	O
&	O
stats	pointer
.	O
id	int
,	O
stats	pointer
.	O
host	pointer
)	O
==	O
2	int
)	O
{	O
wget_xfree	O
(	O
url	pointer
)	O
;	O
if	O
(	O
!	O
wget_strncasecmp_ascii	function
(	O
stats	pointer
.	O
host	pointer
,	O
"http://"	pointer
,	O
7	int
)	O
)	O
url	pointer
=	O
wget_aprintf	function
(	O
"https://%s"	pointer
,	O
stats	pointer
.	O
host	pointer
+	O
7	int
)	O
;	O
else	O
if	O
(	O
wget_strncasecmp_ascii	function
(	O
stats	pointer
.	O
host	pointer
,	O
"https://"	pointer
,	O
8	int
)	O
)	O
url	pointer
=	O
wget_aprintf	function
(	O
"https://%s"	pointer
,	O
stats	pointer
.	O
host	pointer
)	O
;	O
else	O
url	pointer
=	O
wget_strdup	function
(	O
stats	pointer
.	O
host	pointer
)	O
;	O
stats	pointer
.	O
http_links	int
=	O
stats	pointer
.	O
https_links	int
=	O
0	int
;	O
stats	pointer
.	O
http_links_same_host	int
=	O
stats	pointer
.	O
https_links_same_host	int
=	O
0	int
;	O
stats	pointer
.	O
status	int
=	O
-	O
1	int
;	O
stats	pointer
.	O
redirs	int
=	O
stats	pointer
.	O
redir_insecure	int
=	O
stats	pointer
.	O
landed_on_https	int
=	O
0	int
;	O
for	O
(	O
int	O
redirs	int
=	O
0	int
,	O
max	int
=	O
10	int
;	O
redirs	int
<	O
max	int
;	O
redirs	int
++	O
)	O
{	O
wget_http_free_response	function
(	O
&	O
resp	pointer
)	O
;	O
wget_info_printf	function
(	O
"%s%s\n"	pointer
,	O
redirs	int
?	O
"  -> "	pointer
:	O
""	pointer
,	O
url	pointer
)	O
;	O
resp	pointer
=	O
wget_http_get	function
(	O
WGET_HTTP_URL	int
,	O
url	pointer
,	O
WGET_HTTP_HEADER_ADD	int
,	O
"User-Agent"	pointer
,	O
"Mozilla/5.0"	pointer
,	O
WGET_HTTP_HEADER_ADD	int
,	O
"Accept-Encoding"	pointer
,	O
"gzip, br"	pointer
,	O
WGET_HTTP_HEADER_ADD	int
,	O
"Accept"	pointer
,	O
"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"	pointer
,	O
WGET_HTTP_HEADER_ADD	int
,	O
"Accept-Encoding"	pointer
,	O
"gzip, br"	pointer
,	O
WGET_HTTP_MAX_REDIRECTIONS	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
resp	pointer
)	O
{	O
wget_info_printf	function
(	O
"  No connection / response\n"	pointer
)	O
;	O
break	O
;	O
}	O
stats	pointer
.	O
status	int
=	O
resp	pointer
->	O
code	short
;	O
if	O
(	O
resp	pointer
->	O
code	short
!=	O
200	int
)	O
{	O
if	O
(	O
resp	pointer
->	O
location	pointer
)	O
{	O
stats	pointer
.	O
redirs	int
++	O
;	O
wget_info_printf	function
(	O
"  Response code %hd, %s\n"	pointer
,	O
resp	pointer
->	O
code	short
,	O
resp	pointer
->	O
location	pointer
)	O
;	O
char	O
*	O
newurl	pointer
=	O
_normalize_location	function
(	O
url	pointer
,	O
resp	pointer
->	O
location	pointer
)	O
;	O
if	O
(	O
!	O
newurl	pointer
)	O
{	O
wget_info_printf	function
(	O
"  Failed to normalize '%s', '%s'\n"	pointer
,	O
url	pointer
,	O
resp	pointer
->	O
location	pointer
)	O
;	O
break	O
;	O
}	O
wget_xfree	O
(	O
url	pointer
)	O
;	O
url	pointer
=	O
newurl	pointer
;	O
if	O
(	O
wget_strncasecmp	function
(	O
url	pointer
,	O
"https://"	pointer
,	O
8	int
)	O
)	O
stats	pointer
.	O
redir_insecure	int
++	O
;	O
continue	O
;	O
}	O
wget_info_printf	function
(	O
"  Response code %hd\n"	pointer
,	O
resp	pointer
->	O
code	short
)	O
;	O
break	O
;	O
}	O
if	O
(	O
wget_strncasecmp	function
(	O
url	pointer
,	O
"https://"	pointer
,	O
8	int
)	O
)	O
break	O
;	O
stats	pointer
.	O
landed_on_https	int
=	O
1	int
;	O
if	O
(	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
content_type	pointer
,	O
"text/html"	pointer
)	O
)	O
{	O
wget_info_printf	function
(	O
"  No HTML: %s\n"	pointer
,	O
resp	pointer
->	O
content_type	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
resp	pointer
->	O
body	pointer
)	O
html_parse	function
(	O
resp	pointer
->	O
body	pointer
->	O
data	pointer
,	O
resp	pointer
->	O
body	pointer
->	O
length	long
,	O
resp	pointer
->	O
content_type_encoding	pointer
,	O
url	pointer
)	O
;	O
break	O
;	O
}	O
wget_http_free_response	function
(	O
&	O
resp	pointer
)	O
;	O
write_stats	function
(	O
)	O
;	O
}	O
wget_xfree	O
(	O
url	pointer
)	O
;	O
wget_global_deinit	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
