static	O
double	O
cholesky_LDLT_norm1	function
(	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
gsl_vector	struct
*	O
work	pointer
)	O
;	O
static	O
int	O
cholesky_LDLT_Ainv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
;	O
typedef	O
struct	O
{	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
;	O
const	O
gsl_permutation	struct
*	O
perm	pointer
;	O
}	O
pcholesky_params	struct
;	O
static	O
int	O
pcholesky_decomp	function
(	O
const	O
int	O
copy_uplo	int
,	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_permutation	struct
*	O
p	int
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LDLT decomposition requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
p	int
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_view	struct
diag	pointer
=	O
gsl_matrix_diagonal	function
(	O
A	pointer
)	O
;	O
size_t	long
k	long
;	O
if	O
(	O
copy_uplo	int
)	O
{	O
gsl_matrix_transpose_tricpy	function
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
A	pointer
,	O
A	pointer
)	O
;	O
}	O
gsl_permutation_init	function
(	O
p	int
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
N	int
;	O
++	O
k	long
)	O
{	O
gsl_vector_view	struct
w	pointer
;	O
size_t	long
j	long
;	O
w	pointer
=	O
gsl_vector_subvector	function
(	O
&	O
diag	pointer
.	O
vector	struct
,	O
k	long
,	O
N	int
-	O
k	long
)	O
;	O
j	long
=	O
gsl_vector_max_index	function
(	O
&	O
w	pointer
.	O
vector	struct
)	O
+	O
k	long
;	O
gsl_permutation_swap	function
(	O
p	int
,	O
k	long
,	O
j	long
)	O
;	O
cholesky_swap_rowcol	function
(	O
A	pointer
,	O
k	long
,	O
j	long
)	O
;	O
if	O
(	O
k	long
<	O
N	int
-	O
1	int
)	O
{	O
double	O
alpha	long double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
k	long
,	O
k	long
)	O
;	O
double	O
alphainv	double
=	O
1.0	int
/	O
alpha	long double
;	O
gsl_vector_view	struct
v	pointer
=	O
gsl_matrix_subcolumn	function
(	O
A	pointer
,	O
k	long
,	O
k	long
+	O
1	int
,	O
N	int
-	O
k	long
-	O
1	int
)	O
;	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
k	long
+	O
1	int
,	O
k	long
+	O
1	int
,	O
N	int
-	O
k	long
-	O
1	int
,	O
N	int
-	O
k	long
-	O
1	int
)	O
;	O
gsl_blas_dsyr	function
(	O
CblasLower	int
,	O
-	O
alphainv	double
,	O
&	O
v	pointer
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
gsl_vector_scale	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
alphainv	double
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_pcholesky_decomp	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_permutation	struct
*	O
p	int
)	O
{	O
int	O
status	int
=	O
pcholesky_decomp	function
(	O
1	int
,	O
A	pointer
,	O
p	int
)	O
;	O
return	O
status	int
;	O
}	O
int	O
gsl_linalg_pcholesky_solve	function
(	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
LDLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LDLT matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match permutation size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
status	int
=	O
gsl_linalg_pcholesky_svx	function
(	O
LDLT	pointer
,	O
p	int
,	O
x	double
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_pcholesky_svx	function
(	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
LDLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LDLT matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match permutation size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_const_view	struct
D	pointer
=	O
gsl_matrix_const_diagonal	function
(	O
LDLT	pointer
)	O
;	O
gsl_permute_vector	function
(	O
p	int
,	O
x	double
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
LDLT	pointer
,	O
x	double
)	O
;	O
gsl_vector_div	function
(	O
x	double
,	O
&	O
D	pointer
.	O
vector	struct
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasUnit	int
,	O
LDLT	pointer
,	O
x	double
)	O
;	O
gsl_permute_vector_inverse	function
(	O
p	int
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_pcholesky_decomp2	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_permutation	struct
*	O
p	int
,	O
gsl_vector	struct
*	O
S	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"cholesky decomposition requires square matrix"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match permutation size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
S	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"S must have length N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_matrix_transpose_tricpy	function
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
A	pointer
,	O
A	pointer
)	O
;	O
status	int
=	O
gsl_linalg_cholesky_scale	function
(	O
A	pointer
,	O
S	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_scale_apply	function
(	O
A	pointer
,	O
S	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
pcholesky_decomp	function
(	O
0	int
,	O
A	pointer
,	O
p	int
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_pcholesky_solve2	function
(	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
const	O
gsl_vector	struct
*	O
S	pointer
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
LDLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LDLT matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match permutation size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
S	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match S"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
status	int
=	O
gsl_linalg_pcholesky_svx2	function
(	O
LDLT	pointer
,	O
p	int
,	O
S	pointer
,	O
x	double
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_pcholesky_svx2	function
(	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
const	O
gsl_vector	struct
*	O
S	pointer
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
LDLT	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LDLT matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match permutation size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
S	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match S"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_mul	function
(	O
x	double
,	O
S	pointer
)	O
;	O
status	int
=	O
gsl_linalg_pcholesky_svx	function
(	O
LDLT	pointer
,	O
p	int
,	O
x	double
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_vector_mul	function
(	O
x	double
,	O
S	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_pcholesky_invert	function
(	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
gsl_matrix	struct
*	O
Ainv	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
LDLT	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
LDLT	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"LDLT matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LDLT	pointer
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match permutation size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
Ainv	pointer
->	O
size1	long
!=	O
Ainv	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Ainv matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
Ainv	pointer
->	O
size1	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"Ainv matrix has wrong dimensions"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
gsl_matrix_memcpy	function
(	O
Ainv	pointer
,	O
LDLT	pointer
)	O
;	O
gsl_linalg_tri_invert	function
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
Ainv	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
di	double
=	O
gsl_matrix_get	function
(	O
LDLT	pointer
,	O
i	long
,	O
i	long
)	O
;	O
double	O
invsqrt_di	double
=	O
1.0	int
/	O
sqrt	function
(	O
di	double
)	O
;	O
if	O
(	O
i	long
>	O
0	int
)	O
{	O
gsl_vector_view	struct
v	pointer
=	O
gsl_matrix_subrow	function
(	O
Ainv	pointer
,	O
i	long
,	O
0	int
,	O
i	long
)	O
;	O
gsl_blas_dscal	function
(	O
invsqrt_di	double
,	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
}	O
gsl_matrix_set	function
(	O
Ainv	pointer
,	O
i	long
,	O
i	long
,	O
invsqrt_di	double
)	O
;	O
}	O
gsl_linalg_tri_LTL	function
(	O
Ainv	pointer
)	O
;	O
gsl_matrix_transpose_tricpy	function
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
Ainv	pointer
,	O
Ainv	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_view	struct
v	pointer
=	O
gsl_matrix_row	function
(	O
Ainv	pointer
,	O
i	long
)	O
;	O
gsl_permute_vector_inverse	function
(	O
p	int
,	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_view	struct
v	pointer
=	O
gsl_matrix_column	function
(	O
Ainv	pointer
,	O
i	long
)	O
;	O
gsl_permute_vector_inverse	function
(	O
p	int
,	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_pcholesky_rcond	function
(	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
double	O
*	O
rcond	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
M	int
=	O
LDLT	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
LDLT	pointer
->	O
size2	long
;	O
if	O
(	O
M	int
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
3	int
*	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"work vector must have length 3*N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
double	O
Anorm	double
=	O
cholesky_LDLT_norm1	function
(	O
LDLT	pointer
,	O
p	int
,	O
work	pointer
)	O
;	O
double	O
Ainvnorm	pointer
;	O
pcholesky_params	struct
params	pointer
;	O
*	O
rcond	pointer
=	O
0.0	int
;	O
if	O
(	O
Anorm	double
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
params	pointer
.	O
LDLT	pointer
=	O
LDLT	pointer
;	O
params	pointer
.	O
perm	pointer
=	O
p	int
;	O
status	int
=	O
gsl_linalg_invnorm1	function
(	O
N	int
,	O
cholesky_LDLT_Ainv	function
,	O
&	O
params	pointer
,	O
&	O
Ainvnorm	pointer
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Ainvnorm	pointer
!=	O
0.0	int
)	O
*	O
rcond	pointer
=	O
(	O
1.0	int
/	O
Anorm	double
)	O
/	O
Ainvnorm	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
double	O
cholesky_LDLT_norm1	function
(	O
const	O
gsl_matrix	struct
*	O
LDLT	pointer
,	O
const	O
gsl_permutation	struct
*	O
p	int
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
LDLT	pointer
->	O
size1	long
;	O
gsl_vector_const_view	struct
D	pointer
=	O
gsl_matrix_const_diagonal	function
(	O
LDLT	pointer
)	O
;	O
gsl_vector_view	struct
diagA	struct
=	O
gsl_vector_subvector	function
(	O
work	pointer
,	O
N	int
,	O
N	int
)	O
;	O
double	O
max	double
=	O
0.0	int
;	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
double	O
Ajj	pointer
;	O
Ajj	pointer
=	O
gsl_vector_get	function
(	O
&	O
D	pointer
.	O
vector	struct
,	O
j	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
j	long
;	O
++	O
i	long
)	O
{	O
double	O
Di	double
=	O
gsl_vector_get	function
(	O
&	O
D	pointer
.	O
vector	struct
,	O
i	long
)	O
;	O
double	O
Lji	double
=	O
gsl_matrix_get	function
(	O
LDLT	pointer
,	O
j	long
,	O
i	long
)	O
;	O
Ajj	pointer
+=	O
Di	double
*	O
Lji	double
*	O
Lji	double
;	O
}	O
gsl_vector_set	function
(	O
&	O
diagA	struct
.	O
vector	struct
,	O
j	long
,	O
Ajj	pointer
)	O
;	O
}	O
gsl_permute_vector_inverse	function
(	O
p	int
,	O
&	O
diagA	struct
.	O
vector	struct
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
double	O
sum	double
=	O
0.0	int
;	O
double	O
Ajj	pointer
=	O
gsl_vector_get	function
(	O
&	O
diagA	struct
.	O
vector	struct
,	O
j	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
j	long
;	O
++	O
i	long
)	O
{	O
double	O
*	O
wi	pointer
=	O
gsl_vector_ptr	function
(	O
work	pointer
,	O
i	long
)	O
;	O
double	O
Aij	double
=	O
gsl_matrix_get	function
(	O
LDLT	pointer
,	O
i	long
,	O
j	long
)	O
;	O
double	O
absAij	double
=	O
fabs	function
(	O
Aij	double
)	O
;	O
sum	double
+=	O
absAij	double
;	O
*	O
wi	pointer
+=	O
absAij	double
;	O
}	O
gsl_vector_set	function
(	O
work	pointer
,	O
j	long
,	O
sum	double
+	O
fabs	function
(	O
Ajj	pointer
)	O
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
wi	pointer
=	O
gsl_vector_get	function
(	O
work	pointer
,	O
i	long
)	O
;	O
max	double
=	O
GSL_MAX	O
(	O
max	double
,	O
wi	pointer
)	O
;	O
}	O
return	O
max	double
;	O
}	O
static	O
int	O
cholesky_LDLT_Ainv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
{	O
int	O
status	int
;	O
pcholesky_params	struct
*	O
par	pointer
=	O
(	O
pcholesky_params	struct
*	O
)	O
params	pointer
;	O
(	O
void	O
)	O
TransA	enum
;	O
status	int
=	O
gsl_linalg_pcholesky_svx	function
(	O
par	pointer
->	O
LDLT	pointer
,	O
par	pointer
->	O
perm	pointer
,	O
x	double
)	O
;	O
return	O
status	int
;	O
}	O
