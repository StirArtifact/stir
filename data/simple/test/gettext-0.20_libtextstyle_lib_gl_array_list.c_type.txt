struct	O
gl_list_impl	O
{	O
struct	O
gl_list_impl_base	O
base	O
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	O
count	int
;	O
size_t	O
allocated	O
;	O
}	O
;	O
static	O
gl_list_t	O
gl_array_nx_create_empty	function
(	O
gl_list_implementation_t	O
implementation	int
,	O
gl_listelement_equals_fn	O
equals_fn	int
,	O
gl_listelement_hashcode_fn	O
hashcode_fn	int
,	O
gl_listelement_dispose_fn	O
dispose_fn	int
,	O
bool	O
allow_duplicates	int
)	O
{	O
struct	O
gl_list_impl	O
*	O
list	pointer
=	O
(	O
struct	O
gl_list_impl	O
*	O
)	O
malloc	O
(	O
sizeof	O
(	O
struct	O
gl_list_impl	O
)	O
)	O
;	O
if	O
(	O
list	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
list	pointer
->	O
base	O
.	O
vtable	O
=	O
implementation	int
;	O
list	pointer
->	O
base	O
.	O
equals_fn	int
=	O
equals_fn	int
;	O
list	pointer
->	O
base	O
.	O
hashcode_fn	int
=	O
hashcode_fn	int
;	O
list	pointer
->	O
base	O
.	O
dispose_fn	int
=	O
dispose_fn	int
;	O
list	pointer
->	O
base	O
.	O
allow_duplicates	int
=	O
allow_duplicates	int
;	O
list	pointer
->	O
elements	pointer
=	O
NULL	O
;	O
list	pointer
->	O
count	int
=	O
0	int
;	O
list	pointer
->	O
allocated	O
=	O
0	int
;	O
return	O
list	pointer
;	O
}	O
static	O
gl_list_t	O
gl_array_nx_create	function
(	O
gl_list_implementation_t	O
implementation	int
,	O
gl_listelement_equals_fn	O
equals_fn	int
,	O
gl_listelement_hashcode_fn	O
hashcode_fn	int
,	O
gl_listelement_dispose_fn	O
dispose_fn	int
,	O
bool	O
allow_duplicates	int
,	O
size_t	O
count	int
,	O
const	O
void	O
*	O
*	O
contents	pointer
)	O
{	O
struct	O
gl_list_impl	O
*	O
list	pointer
=	O
(	O
struct	O
gl_list_impl	O
*	O
)	O
malloc	O
(	O
sizeof	O
(	O
struct	O
gl_list_impl	O
)	O
)	O
;	O
if	O
(	O
list	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
list	pointer
->	O
base	O
.	O
vtable	O
=	O
implementation	int
;	O
list	pointer
->	O
base	O
.	O
equals_fn	int
=	O
equals_fn	int
;	O
list	pointer
->	O
base	O
.	O
hashcode_fn	int
=	O
hashcode_fn	int
;	O
list	pointer
->	O
base	O
.	O
dispose_fn	int
=	O
dispose_fn	int
;	O
list	pointer
->	O
base	O
.	O
allow_duplicates	int
=	O
allow_duplicates	int
;	O
if	O
(	O
count	int
>	O
0	int
)	O
{	O
if	O
(	O
size_overflow_p	function
(	O
xtimes	function
(	O
count	int
,	O
sizeof	O
(	O
const	O
void	O
*	O
)	O
)	O
)	O
)	O
goto	O
fail	O
;	O
list	pointer
->	O
elements	pointer
=	O
(	O
const	O
void	O
*	O
*	O
)	O
malloc	O
(	O
count	int
*	O
sizeof	O
(	O
const	O
void	O
*	O
)	O
)	O
;	O
if	O
(	O
list	pointer
->	O
elements	pointer
==	O
NULL	O
)	O
goto	O
fail	O
;	O
memcpy	O
(	O
list	pointer
->	O
elements	pointer
,	O
contents	pointer
,	O
count	int
*	O
sizeof	O
(	O
const	O
void	O
*	O
)	O
)	O
;	O
}	O
else	O
list	pointer
->	O
elements	pointer
=	O
NULL	O
;	O
list	pointer
->	O
count	int
=	O
count	int
;	O
list	pointer
->	O
allocated	O
=	O
count	int
;	O
return	O
list	pointer
;	O
fail	O
:	O
free	function
(	O
list	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
size_t	O
gl_array_size	function
(	O
gl_list_t	O
list	pointer
)	O
{	O
return	O
list	pointer
->	O
count	int
;	O
}	O
static	O
const	O
void	O
*	O
_GL_ATTRIBUTE_PURE	O
gl_array_node_value	function
(	O
gl_list_t	O
list	pointer
,	O
gl_list_node_t	O
node	int
)	O
{	O
uintptr_t	O
index	O
=	O
NODE_TO_INDEX	O
(	O
node	int
)	O
;	O
if	O
(	O
!	O
(	O
index	O
<	O
list	pointer
->	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
return	O
list	pointer
->	O
elements	pointer
[	O
index	O
]	O
;	O
}	O
static	O
int	O
gl_array_node_nx_set_value	function
(	O
gl_list_t	O
list	pointer
,	O
gl_list_node_t	O
node	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
uintptr_t	O
index	O
=	O
NODE_TO_INDEX	O
(	O
node	int
)	O
;	O
if	O
(	O
!	O
(	O
index	O
<	O
list	pointer
->	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
list	pointer
->	O
elements	pointer
[	O
index	O
]	O
=	O
elt	pointer
;	O
return	O
0	int
;	O
}	O
static	O
gl_list_node_t	O
_GL_ATTRIBUTE_PURE	O
gl_array_next_node	O
(	O
gl_list_t	O
list	pointer
,	O
gl_list_node_t	O
node	int
)	O
{	O
uintptr_t	O
index	O
=	O
NODE_TO_INDEX	O
(	O
node	int
)	O
;	O
if	O
(	O
!	O
(	O
index	O
<	O
list	pointer
->	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
index	O
++	O
;	O
if	O
(	O
index	O
<	O
list	pointer
->	O
count	int
)	O
return	O
INDEX_TO_NODE	O
(	O
index	O
)	O
;	O
else	O
return	O
NULL	O
;	O
}	O
static	O
gl_list_node_t	O
_GL_ATTRIBUTE_PURE	O
gl_array_previous_node	O
(	O
gl_list_t	O
list	pointer
,	O
gl_list_node_t	O
node	int
)	O
{	O
uintptr_t	O
index	O
=	O
NODE_TO_INDEX	O
(	O
node	int
)	O
;	O
if	O
(	O
!	O
(	O
index	O
<	O
list	pointer
->	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
if	O
(	O
index	O
>	O
0	int
)	O
return	O
INDEX_TO_NODE	O
(	O
index	O
-	O
1	int
)	O
;	O
else	O
return	O
NULL	O
;	O
}	O
static	O
const	O
void	O
*	O
_GL_ATTRIBUTE_PURE	O
gl_array_get_at	function
(	O
gl_list_t	O
list	pointer
,	O
size_t	O
position	int
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
if	O
(	O
!	O
(	O
position	int
<	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
return	O
list	pointer
->	O
elements	pointer
[	O
position	int
]	O
;	O
}	O
static	O
gl_list_node_t	O
gl_array_nx_set_at	function
(	O
gl_list_t	O
list	pointer
,	O
size_t	O
position	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
if	O
(	O
!	O
(	O
position	int
<	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
list	pointer
->	O
elements	pointer
[	O
position	int
]	O
=	O
elt	pointer
;	O
return	O
INDEX_TO_NODE	O
(	O
position	int
)	O
;	O
}	O
static	O
size_t	O
gl_array_indexof_from_to	function
(	O
gl_list_t	O
list	pointer
,	O
size_t	O
start_index	int
,	O
size_t	O
end_index	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
if	O
(	O
!	O
(	O
start_index	int
<=	O
end_index	int
&&	O
end_index	int
<=	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
if	O
(	O
start_index	int
<	O
end_index	int
)	O
{	O
gl_listelement_equals_fn	O
equals	function
=	O
list	pointer
->	O
base	O
.	O
equals_fn	int
;	O
if	O
(	O
equals	function
!=	O
NULL	O
)	O
{	O
size_t	O
i	O
;	O
for	O
(	O
i	O
=	O
start_index	int
;	O
;	O
)	O
{	O
if	O
(	O
equals	function
(	O
elt	pointer
,	O
list	pointer
->	O
elements	pointer
[	O
i	O
]	O
)	O
)	O
return	O
i	O
;	O
i	O
++	O
;	O
if	O
(	O
i	O
==	O
end_index	int
)	O
break	O
;	O
}	O
}	O
else	O
{	O
size_t	O
i	O
;	O
for	O
(	O
i	O
=	O
start_index	int
;	O
;	O
)	O
{	O
if	O
(	O
elt	pointer
==	O
list	pointer
->	O
elements	pointer
[	O
i	O
]	O
)	O
return	O
i	O
;	O
i	O
++	O
;	O
if	O
(	O
i	O
==	O
end_index	int
)	O
break	O
;	O
}	O
}	O
}	O
return	O
(	O
size_t	O
)	O
(	O
-	O
1	int
)	O
;	O
}	O
static	O
gl_list_node_t	O
gl_array_search_from_to	function
(	O
gl_list_t	O
list	pointer
,	O
size_t	O
start_index	int
,	O
size_t	O
end_index	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
index	O
=	O
gl_array_indexof_from_to	function
(	O
list	pointer
,	O
start_index	int
,	O
end_index	int
,	O
elt	pointer
)	O
;	O
return	O
INDEX_TO_NODE	O
(	O
index	O
)	O
;	O
}	O
static	O
int	O
grow	function
(	O
gl_list_t	O
list	pointer
)	O
{	O
size_t	O
new_allocated	O
;	O
size_t	O
memory_size	O
;	O
const	O
void	O
*	O
*	O
memory	pointer
;	O
new_allocated	O
=	O
xtimes	function
(	O
list	pointer
->	O
allocated	O
,	O
2	int
)	O
;	O
new_allocated	O
=	O
xsum	O
(	O
new_allocated	O
,	O
1	int
)	O
;	O
memory_size	O
=	O
xtimes	function
(	O
new_allocated	O
,	O
sizeof	O
(	O
const	O
void	O
*	O
)	O
)	O
;	O
if	O
(	O
size_overflow_p	function
(	O
memory_size	O
)	O
)	O
return	O
-	O
1	int
;	O
memory	pointer
=	O
(	O
const	O
void	O
*	O
*	O
)	O
realloc	O
(	O
list	pointer
->	O
elements	pointer
,	O
memory_size	O
)	O
;	O
if	O
(	O
memory	pointer
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
list	pointer
->	O
elements	pointer
=	O
memory	pointer
;	O
list	pointer
->	O
allocated	O
=	O
new_allocated	O
;	O
return	O
0	int
;	O
}	O
static	O
gl_list_node_t	O
gl_array_nx_add_first	function
(	O
gl_list_t	O
list	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	O
i	O
;	O
if	O
(	O
count	int
==	O
list	pointer
->	O
allocated	O
)	O
if	O
(	O
grow	function
(	O
list	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
for	O
(	O
i	O
=	O
count	int
;	O
i	O
>	O
0	int
;	O
i	O
--	O
)	O
elements	pointer
[	O
i	O
]	O
=	O
elements	pointer
[	O
i	O
-	O
1	int
]	O
;	O
elements	pointer
[	O
0	int
]	O
=	O
elt	pointer
;	O
list	pointer
->	O
count	int
=	O
count	int
+	O
1	int
;	O
return	O
INDEX_TO_NODE	O
(	O
0	int
)	O
;	O
}	O
static	O
gl_list_node_t	O
gl_array_nx_add_last	function
(	O
gl_list_t	O
list	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
if	O
(	O
count	int
==	O
list	pointer
->	O
allocated	O
)	O
if	O
(	O
grow	function
(	O
list	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
list	pointer
->	O
elements	pointer
[	O
count	int
]	O
=	O
elt	pointer
;	O
list	pointer
->	O
count	int
=	O
count	int
+	O
1	int
;	O
return	O
INDEX_TO_NODE	O
(	O
count	int
)	O
;	O
}	O
static	O
gl_list_node_t	O
gl_array_nx_add_before	function
(	O
gl_list_t	O
list	pointer
,	O
gl_list_node_t	O
node	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
uintptr_t	O
index	O
=	O
NODE_TO_INDEX	O
(	O
node	int
)	O
;	O
size_t	O
position	int
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	O
i	O
;	O
if	O
(	O
!	O
(	O
index	O
<	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
position	int
=	O
index	O
;	O
if	O
(	O
count	int
==	O
list	pointer
->	O
allocated	O
)	O
if	O
(	O
grow	function
(	O
list	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
for	O
(	O
i	O
=	O
count	int
;	O
i	O
>	O
position	int
;	O
i	O
--	O
)	O
elements	pointer
[	O
i	O
]	O
=	O
elements	pointer
[	O
i	O
-	O
1	int
]	O
;	O
elements	pointer
[	O
position	int
]	O
=	O
elt	pointer
;	O
list	pointer
->	O
count	int
=	O
count	int
+	O
1	int
;	O
return	O
INDEX_TO_NODE	O
(	O
position	int
)	O
;	O
}	O
static	O
gl_list_node_t	O
gl_array_nx_add_after	function
(	O
gl_list_t	O
list	pointer
,	O
gl_list_node_t	O
node	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
uintptr_t	O
index	O
=	O
NODE_TO_INDEX	O
(	O
node	int
)	O
;	O
size_t	O
position	int
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	O
i	O
;	O
if	O
(	O
!	O
(	O
index	O
<	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
position	int
=	O
index	O
+	O
1	int
;	O
if	O
(	O
count	int
==	O
list	pointer
->	O
allocated	O
)	O
if	O
(	O
grow	function
(	O
list	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
for	O
(	O
i	O
=	O
count	int
;	O
i	O
>	O
position	int
;	O
i	O
--	O
)	O
elements	pointer
[	O
i	O
]	O
=	O
elements	pointer
[	O
i	O
-	O
1	int
]	O
;	O
elements	pointer
[	O
position	int
]	O
=	O
elt	pointer
;	O
list	pointer
->	O
count	int
=	O
count	int
+	O
1	int
;	O
return	O
INDEX_TO_NODE	O
(	O
position	int
)	O
;	O
}	O
static	O
gl_list_node_t	O
gl_array_nx_add_at	function
(	O
gl_list_t	O
list	pointer
,	O
size_t	O
position	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	O
i	O
;	O
if	O
(	O
!	O
(	O
position	int
<=	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
if	O
(	O
count	int
==	O
list	pointer
->	O
allocated	O
)	O
if	O
(	O
grow	function
(	O
list	pointer
)	O
<	O
0	int
)	O
return	O
NULL	O
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
for	O
(	O
i	O
=	O
count	int
;	O
i	O
>	O
position	int
;	O
i	O
--	O
)	O
elements	pointer
[	O
i	O
]	O
=	O
elements	pointer
[	O
i	O
-	O
1	int
]	O
;	O
elements	pointer
[	O
position	int
]	O
=	O
elt	pointer
;	O
list	pointer
->	O
count	int
=	O
count	int
+	O
1	int
;	O
return	O
INDEX_TO_NODE	O
(	O
position	int
)	O
;	O
}	O
static	O
bool	O
gl_array_remove_node	function
(	O
gl_list_t	O
list	pointer
,	O
gl_list_node_t	O
node	int
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
uintptr_t	O
index	O
=	O
NODE_TO_INDEX	O
(	O
node	int
)	O
;	O
size_t	O
position	int
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	O
i	O
;	O
if	O
(	O
!	O
(	O
index	O
<	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
position	int
=	O
index	O
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
if	O
(	O
list	pointer
->	O
base	O
.	O
dispose_fn	int
!=	O
NULL	O
)	O
list	pointer
->	O
base	O
.	O
dispose_fn	int
(	O
elements	pointer
[	O
position	int
]	O
)	O
;	O
for	O
(	O
i	O
=	O
position	int
+	O
1	int
;	O
i	O
<	O
count	int
;	O
i	O
++	O
)	O
elements	pointer
[	O
i	O
-	O
1	int
]	O
=	O
elements	pointer
[	O
i	O
]	O
;	O
list	pointer
->	O
count	int
=	O
count	int
-	O
1	int
;	O
return	O
true	O
;	O
}	O
static	O
bool	O
gl_array_remove_at	function
(	O
gl_list_t	O
list	pointer
,	O
size_t	O
position	int
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
const	O
void	O
*	O
*	O
elements	pointer
;	O
size_t	O
i	O
;	O
if	O
(	O
!	O
(	O
position	int
<	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
if	O
(	O
list	pointer
->	O
base	O
.	O
dispose_fn	int
!=	O
NULL	O
)	O
list	pointer
->	O
base	O
.	O
dispose_fn	int
(	O
elements	pointer
[	O
position	int
]	O
)	O
;	O
for	O
(	O
i	O
=	O
position	int
+	O
1	int
;	O
i	O
<	O
count	int
;	O
i	O
++	O
)	O
elements	pointer
[	O
i	O
-	O
1	int
]	O
=	O
elements	pointer
[	O
i	O
]	O
;	O
list	pointer
->	O
count	int
=	O
count	int
-	O
1	int
;	O
return	O
true	O
;	O
}	O
static	O
bool	O
gl_array_remove	function
(	O
gl_list_t	O
list	pointer
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
position	int
=	O
gl_array_indexof_from_to	function
(	O
list	pointer
,	O
0	int
,	O
list	pointer
->	O
count	int
,	O
elt	pointer
)	O
;	O
if	O
(	O
position	int
==	O
(	O
size_t	O
)	O
(	O
-	O
1	int
)	O
)	O
return	O
false	O
;	O
else	O
return	O
gl_array_remove_at	function
(	O
list	pointer
,	O
position	int
)	O
;	O
}	O
static	O
void	O
gl_array_list_free	function
(	O
gl_list_t	O
list	pointer
)	O
{	O
if	O
(	O
list	pointer
->	O
elements	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
list	pointer
->	O
base	O
.	O
dispose_fn	int
!=	O
NULL	O
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
if	O
(	O
count	int
>	O
0	int
)	O
{	O
gl_listelement_dispose_fn	O
dispose	function
=	O
list	pointer
->	O
base	O
.	O
dispose_fn	int
;	O
const	O
void	O
*	O
*	O
elements	pointer
=	O
list	pointer
->	O
elements	pointer
;	O
do	O
dispose	function
(	O
*	O
elements	pointer
++	O
)	O
;	O
while	O
(	O
--	O
count	int
>	O
0	int
)	O
;	O
}	O
}	O
free	function
(	O
list	pointer
->	O
elements	pointer
)	O
;	O
}	O
free	function
(	O
list	pointer
)	O
;	O
}	O
static	O
gl_list_iterator_t	O
gl_array_iterator	function
(	O
gl_list_t	O
list	pointer
)	O
{	O
gl_list_iterator_t	O
result	O
;	O
result	O
.	O
vtable	O
=	O
list	pointer
->	O
base	O
.	O
vtable	O
;	O
result	O
.	O
list	pointer
=	O
list	pointer
;	O
result	O
.	O
count	int
=	O
list	pointer
->	O
count	int
;	O
result	O
.	O
p	pointer
=	O
list	pointer
->	O
elements	pointer
+	O
0	int
;	O
result	O
.	O
q	O
=	O
list	pointer
->	O
elements	pointer
+	O
list	pointer
->	O
count	int
;	O
return	O
result	O
;	O
}	O
static	O
gl_list_iterator_t	O
gl_array_iterator_from_to	function
(	O
gl_list_t	O
list	pointer
,	O
size_t	O
start_index	int
,	O
size_t	O
end_index	int
)	O
{	O
gl_list_iterator_t	O
result	O
;	O
if	O
(	O
!	O
(	O
start_index	int
<=	O
end_index	int
&&	O
end_index	int
<=	O
list	pointer
->	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
result	O
.	O
vtable	O
=	O
list	pointer
->	O
base	O
.	O
vtable	O
;	O
result	O
.	O
list	pointer
=	O
list	pointer
;	O
result	O
.	O
count	int
=	O
list	pointer
->	O
count	int
;	O
result	O
.	O
p	pointer
=	O
list	pointer
->	O
elements	pointer
+	O
start_index	int
;	O
result	O
.	O
q	O
=	O
list	pointer
->	O
elements	pointer
+	O
end_index	int
;	O
return	O
result	O
;	O
}	O
static	O
bool	O
gl_array_iterator_next	function
(	O
gl_list_iterator_t	O
*	O
iterator	pointer
,	O
const	O
void	O
*	O
*	O
eltp	pointer
,	O
gl_list_node_t	O
*	O
nodep	pointer
)	O
{	O
gl_list_t	O
list	pointer
=	O
iterator	pointer
->	O
list	pointer
;	O
if	O
(	O
iterator	pointer
->	O
count	int
!=	O
list	pointer
->	O
count	int
)	O
{	O
if	O
(	O
iterator	pointer
->	O
count	int
!=	O
list	pointer
->	O
count	int
+	O
1	int
)	O
abort	O
(	O
)	O
;	O
iterator	pointer
->	O
count	int
--	O
;	O
iterator	pointer
->	O
p	pointer
=	O
(	O
const	O
void	O
*	O
*	O
)	O
iterator	pointer
->	O
p	pointer
-	O
1	int
;	O
iterator	pointer
->	O
q	O
=	O
(	O
const	O
void	O
*	O
*	O
)	O
iterator	pointer
->	O
q	O
-	O
1	int
;	O
}	O
if	O
(	O
iterator	pointer
->	O
p	pointer
<	O
iterator	pointer
->	O
q	O
)	O
{	O
const	O
void	O
*	O
*	O
p	pointer
=	O
(	O
const	O
void	O
*	O
*	O
)	O
iterator	pointer
->	O
p	pointer
;	O
*	O
eltp	pointer
=	O
*	O
p	pointer
;	O
if	O
(	O
nodep	pointer
!=	O
NULL	O
)	O
*	O
nodep	pointer
=	O
INDEX_TO_NODE	O
(	O
p	pointer
-	O
list	pointer
->	O
elements	pointer
)	O
;	O
iterator	pointer
->	O
p	pointer
=	O
p	pointer
+	O
1	int
;	O
return	O
true	O
;	O
}	O
else	O
return	O
false	O
;	O
}	O
static	O
void	O
gl_array_iterator_free	function
(	O
gl_list_iterator_t	O
*	O
iterator	pointer
_GL_UNUSED	O
)	O
{	O
}	O
static	O
size_t	O
gl_array_sortedlist_indexof_from_to	function
(	O
gl_list_t	O
list	pointer
,	O
gl_listelement_compar_fn	O
compar	int
,	O
size_t	O
low	int
,	O
size_t	O
high	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
if	O
(	O
!	O
(	O
low	int
<=	O
high	int
&&	O
high	int
<=	O
list	pointer
->	O
count	int
)	O
)	O
abort	O
(	O
)	O
;	O
if	O
(	O
low	int
<	O
high	int
)	O
{	O
do	O
{	O
size_t	O
mid	O
=	O
low	int
+	O
(	O
high	int
-	O
low	int
)	O
/	O
2	int
;	O
int	O
cmp	int
=	O
compar	int
(	O
list	pointer
->	O
elements	pointer
[	O
mid	O
]	O
,	O
elt	pointer
)	O
;	O
if	O
(	O
cmp	int
<	O
0	int
)	O
low	int
=	O
mid	O
+	O
1	int
;	O
else	O
if	O
(	O
cmp	int
>	O
0	int
)	O
high	int
=	O
mid	O
;	O
else	O
{	O
high	int
=	O
mid	O
;	O
while	O
(	O
low	int
<	O
high	int
)	O
{	O
size_t	O
mid2	O
=	O
low	int
+	O
(	O
high	int
-	O
low	int
)	O
/	O
2	int
;	O
int	O
cmp2	int
=	O
compar	int
(	O
list	pointer
->	O
elements	pointer
[	O
mid2	O
]	O
,	O
elt	pointer
)	O
;	O
if	O
(	O
cmp2	int
<	O
0	int
)	O
low	int
=	O
mid2	O
+	O
1	int
;	O
else	O
if	O
(	O
cmp2	int
>	O
0	int
)	O
abort	O
(	O
)	O
;	O
else	O
{	O
if	O
(	O
mid2	O
==	O
low	int
)	O
break	O
;	O
high	int
=	O
mid2	O
-	O
1	int
;	O
}	O
}	O
return	O
low	int
;	O
}	O
}	O
while	O
(	O
low	int
<	O
high	int
)	O
;	O
}	O
return	O
(	O
size_t	O
)	O
(	O
-	O
1	int
)	O
;	O
}	O
static	O
size_t	O
gl_array_sortedlist_indexof	function
(	O
gl_list_t	O
list	pointer
,	O
gl_listelement_compar_fn	O
compar	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
return	O
gl_array_sortedlist_indexof_from_to	function
(	O
list	pointer
,	O
compar	int
,	O
0	int
,	O
list	pointer
->	O
count	int
,	O
elt	pointer
)	O
;	O
}	O
static	O
gl_list_node_t	O
gl_array_sortedlist_search_from_to	function
(	O
gl_list_t	O
list	pointer
,	O
gl_listelement_compar_fn	O
compar	int
,	O
size_t	O
low	int
,	O
size_t	O
high	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
index	O
=	O
gl_array_sortedlist_indexof_from_to	function
(	O
list	pointer
,	O
compar	int
,	O
low	int
,	O
high	int
,	O
elt	pointer
)	O
;	O
return	O
INDEX_TO_NODE	O
(	O
index	O
)	O
;	O
}	O
static	O
gl_list_node_t	O
gl_array_sortedlist_search	function
(	O
gl_list_t	O
list	pointer
,	O
gl_listelement_compar_fn	O
compar	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
index	O
=	O
gl_array_sortedlist_indexof_from_to	function
(	O
list	pointer
,	O
compar	int
,	O
0	int
,	O
list	pointer
->	O
count	int
,	O
elt	pointer
)	O
;	O
return	O
INDEX_TO_NODE	O
(	O
index	O
)	O
;	O
}	O
static	O
gl_list_node_t	O
gl_array_sortedlist_nx_add	function
(	O
gl_list_t	O
list	pointer
,	O
gl_listelement_compar_fn	O
compar	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
count	int
=	O
list	pointer
->	O
count	int
;	O
size_t	O
low	int
=	O
0	int
;	O
size_t	O
high	int
=	O
count	int
;	O
while	O
(	O
low	int
<	O
high	int
)	O
{	O
size_t	O
mid	O
=	O
low	int
+	O
(	O
high	int
-	O
low	int
)	O
/	O
2	int
;	O
int	O
cmp	int
=	O
compar	int
(	O
list	pointer
->	O
elements	pointer
[	O
mid	O
]	O
,	O
elt	pointer
)	O
;	O
if	O
(	O
cmp	int
<	O
0	int
)	O
low	int
=	O
mid	O
+	O
1	int
;	O
else	O
if	O
(	O
cmp	int
>	O
0	int
)	O
high	int
=	O
mid	O
;	O
else	O
{	O
low	int
=	O
mid	O
;	O
break	O
;	O
}	O
}	O
return	O
gl_array_nx_add_at	function
(	O
list	pointer
,	O
low	int
,	O
elt	pointer
)	O
;	O
}	O
static	O
bool	O
gl_array_sortedlist_remove	function
(	O
gl_list_t	O
list	pointer
,	O
gl_listelement_compar_fn	O
compar	int
,	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
size_t	O
index	O
=	O
gl_array_sortedlist_indexof	function
(	O
list	pointer
,	O
compar	int
,	O
elt	pointer
)	O
;	O
if	O
(	O
index	O
==	O
(	O
size_t	O
)	O
(	O
-	O
1	int
)	O
)	O
return	O
false	O
;	O
else	O
return	O
gl_array_remove_at	function
(	O
list	pointer
,	O
index	O
)	O
;	O
}	O
const	O
struct	O
gl_list_implementation	O
gl_array_list_implementation	O
=	O
{	O
gl_array_nx_create_empty	function
,	O
gl_array_nx_create	function
,	O
gl_array_size	function
,	O
gl_array_node_value	function
,	O
gl_array_node_nx_set_value	function
,	O
gl_array_next_node	O
,	O
gl_array_previous_node	O
,	O
gl_array_get_at	function
,	O
gl_array_nx_set_at	function
,	O
gl_array_search_from_to	function
,	O
gl_array_indexof_from_to	function
,	O
gl_array_nx_add_first	function
,	O
gl_array_nx_add_last	function
,	O
gl_array_nx_add_before	function
,	O
gl_array_nx_add_after	function
,	O
gl_array_nx_add_at	function
,	O
gl_array_remove_node	function
,	O
gl_array_remove_at	function
,	O
gl_array_remove	function
,	O
gl_array_list_free	function
,	O
gl_array_iterator	function
,	O
gl_array_iterator_from_to	function
,	O
gl_array_iterator_next	function
,	O
gl_array_iterator_free	function
,	O
gl_array_sortedlist_search	function
,	O
gl_array_sortedlist_search_from_to	function
,	O
gl_array_sortedlist_indexof	function
,	O
gl_array_sortedlist_indexof_from_to	function
,	O
gl_array_sortedlist_nx_add	function
,	O
gl_array_sortedlist_remove	function
}	O
;	O
