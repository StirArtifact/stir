static	O
void	O
mangle_seed	function
(	O
mpz_ptr	pointer
r	pointer
,	O
mpz_srcptr	pointer
b_orig	pointer
)	O
{	O
mpz_t	array
t	array
,	O
b	int
;	O
unsigned	O
long	O
e	long
=	O
0x40118124	int
;	O
unsigned	O
long	O
bit	long
=	O
0x20000000	int
;	O
mpz_init	O
(	O
t	array
)	O
;	O
mpz_init_set	O
(	O
b	int
,	O
b_orig	pointer
)	O
;	O
mpz_set	O
(	O
r	pointer
,	O
b	int
)	O
;	O
do	O
{	O
mpz_mul	O
(	O
r	pointer
,	O
r	pointer
,	O
r	pointer
)	O
;	O
reduce	O
:	O
for	O
(	O
;	O
;	O
)	O
{	O
mpz_tdiv_q_2exp	O
(	O
t	array
,	O
r	pointer
,	O
19937L	int
)	O
;	O
if	O
(	O
mpz_sgn	O
(	O
t	array
)	O
==	O
0	int
)	O
break	O
;	O
mpz_tdiv_r_2exp	O
(	O
r	pointer
,	O
r	pointer
,	O
19937L	int
)	O
;	O
mpz_addmul_ui	O
(	O
r	pointer
,	O
t	array
,	O
20023L	int
)	O
;	O
}	O
if	O
(	O
(	O
e	long
&	O
bit	long
)	O
!=	O
0	int
)	O
{	O
e	long
&=	O
~	O
bit	long
;	O
mpz_mul	O
(	O
r	pointer
,	O
r	pointer
,	O
b	int
)	O
;	O
goto	O
reduce	O
;	O
}	O
bit	long
>>=	O
1	int
;	O
}	O
while	O
(	O
bit	long
!=	O
0	int
)	O
;	O
mpz_clear	O
(	O
t	array
)	O
;	O
mpz_clear	O
(	O
b	int
)	O
;	O
}	O
static	O
void	O
randseed_mt	function
(	O
gmp_randstate_t	array
rstate	array
,	O
mpz_srcptr	pointer
seed	pointer
)	O
{	O
int	O
i	long
;	O
size_t	long
cnt	long
;	O
gmp_rand_mt_struct	struct
*	O
p	pointer
;	O
mpz_t	array
mod	array
;	O
mpz_t	array
seed1	array
;	O
p	pointer
=	O
(	O
gmp_rand_mt_struct	struct
*	O
)	O
RNG_STATE	O
(	O
rstate	array
)	O
;	O
mpz_init	O
(	O
mod	array
)	O
;	O
mpz_init	O
(	O
seed1	array
)	O
;	O
mpz_set_ui	O
(	O
mod	array
,	O
0L	int
)	O
;	O
mpz_setbit	O
(	O
mod	array
,	O
19937L	int
)	O
;	O
mpz_sub_ui	O
(	O
mod	array
,	O
mod	array
,	O
20027L	int
)	O
;	O
mpz_mod	O
(	O
seed1	array
,	O
seed	pointer
,	O
mod	array
)	O
;	O
mpz_add_ui	O
(	O
seed1	array
,	O
seed1	array
,	O
2L	int
)	O
;	O
mangle_seed	function
(	O
seed1	array
,	O
seed1	array
)	O
;	O
p	pointer
->	O
mt	array
[	O
0	int
]	O
=	O
(	O
mpz_tstbit	O
(	O
seed1	array
,	O
19936L	int
)	O
!=	O
0	int
)	O
?	O
0x80000000	int
:	O
0	int
;	O
mpz_clrbit	O
(	O
seed1	array
,	O
19936L	int
)	O
;	O
mpz_export	O
(	O
&	O
p	pointer
->	O
mt	array
[	O
1	int
]	O
,	O
&	O
cnt	long
,	O
-	O
1	int
,	O
sizeof	O
(	O
p	pointer
->	O
mt	array
[	O
1	int
]	O
)	O
,	O
0	int
,	O
8	int
*	O
sizeof	O
(	O
p	pointer
->	O
mt	array
[	O
1	int
]	O
)	O
-	O
32	int
,	O
seed1	array
)	O
;	O
cnt	long
++	O
;	O
ASSERT	O
(	O
cnt	long
<=	O
N	int
)	O
;	O
while	O
(	O
cnt	long
<	O
N	int
)	O
p	pointer
->	O
mt	array
[	O
cnt	long
++	O
]	O
=	O
0	int
;	O
mpz_clear	O
(	O
mod	array
)	O
;	O
mpz_clear	O
(	O
seed1	array
)	O
;	O
if	O
(	O
WARM_UP	int
!=	O
0	int
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
WARM_UP	int
/	O
N	int
;	O
i	long
++	O
)	O
__gmp_mt_recalc_buffer	function
(	O
p	pointer
->	O
mt	array
)	O
;	O
p	pointer
->	O
mti	int
=	O
WARM_UP	int
%	O
N	int
;	O
}	O
static	O
const	O
gmp_randfnptr_t	struct
Mersenne_Twister_Generator	struct
=	O
{	O
randseed_mt	function
,	O
__gmp_randget_mt	function
,	O
__gmp_randclear_mt	function
,	O
__gmp_randiset_mt	function
}	O
;	O
void	O
gmp_randinit_mt	O
(	O
gmp_randstate_t	array
rstate	array
)	O
{	O
__gmp_randinit_mt_noseed	function
(	O
rstate	array
)	O
;	O
RNG_FNPTR	O
(	O
rstate	array
)	O
=	O
(	O
void	O
*	O
)	O
&	O
Mersenne_Twister_Generator	struct
;	O
}	O
