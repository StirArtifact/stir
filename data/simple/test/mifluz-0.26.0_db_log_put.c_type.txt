static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: log_put.c,v 1.3 2000/06/28 16:47:02 loic Exp $"	pointer
;	O
static	O
int	O
__log_fill	function
__P	O
(	O
(	O
DB_LOG	struct
*	O
,	O
DB_LSN	struct
*	O
,	O
void	O
*	O
,	O
u_int32_t	int
)	O
)	O
;	O
static	O
int	O
__log_flush	function
__P	O
(	O
(	O
DB_LOG	struct
*	O
,	O
const	O
DB_LSN	struct
*	O
)	O
)	O
;	O
static	O
int	O
__log_newfh	function
__P	O
(	O
(	O
DB_LOG	struct
*	O
)	O
)	O
;	O
static	O
int	O
__log_putr	function
__P	O
(	O
(	O
DB_LOG	struct
*	O
,	O
DB_LSN	struct
*	O
,	O
const	O
DBT	struct
*	O
,	O
u_int32_t	int
)	O
)	O
;	O
static	O
int	O
__log_open_files	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
)	O
)	O
;	O
static	O
int	O
__log_write	function
__P	O
(	O
(	O
DB_LOG	struct
*	O
,	O
void	O
*	O
,	O
u_int32_t	int
)	O
)	O
;	O
int	O
CDB_log_put	function
(	O
dbenv	pointer
,	O
lsn	struct
,	O
dbt	struct
,	O
flags	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_LSN	struct
*	O
lsn	struct
;	O
const	O
DBT	struct
*	O
dbt	struct
;	O
u_int32_t	int
flags	int
;	O
{	O
DB_LOG	struct
*	O
dblp	pointer
;	O
int	O
ret	int
;	O
PANIC_CHECK	O
(	O
dbenv	pointer
)	O
;	O
ENV_REQUIRES_CONFIG	O
(	O
dbenv	pointer
,	O
dbenv	pointer
->	O
lg_handle	pointer
,	O
DB_INIT_LOG	int
)	O
;	O
if	O
(	O
flags	int
!=	O
0	int
&&	O
flags	int
!=	O
DB_CHECKPOINT	int
&&	O
flags	int
!=	O
DB_CURLSN	int
&&	O
flags	int
!=	O
DB_FLUSH	int
)	O
return	O
(	O
CDB___db_ferr	function
(	O
dbenv	pointer
,	O
"CDB_log_put"	pointer
,	O
0	int
)	O
)	O
;	O
dblp	pointer
=	O
dbenv	pointer
->	O
lg_handle	pointer
;	O
R_LOCK	O
(	O
dbenv	pointer
,	O
&	O
dblp	pointer
->	O
reginfo	pointer
)	O
;	O
ret	int
=	O
CDB___log_put	function
(	O
dbenv	pointer
,	O
lsn	struct
,	O
dbt	struct
,	O
flags	int
)	O
;	O
R_UNLOCK	O
(	O
dbenv	pointer
,	O
&	O
dblp	pointer
->	O
reginfo	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___log_put	function
(	O
dbenv	pointer
,	O
lsn	struct
,	O
dbt	struct
,	O
flags	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DB_LSN	struct
*	O
lsn	struct
;	O
const	O
DBT	struct
*	O
dbt	struct
;	O
u_int32_t	int
flags	int
;	O
{	O
DBT	struct
t	struct
;	O
DB_LOG	struct
*	O
dblp	pointer
;	O
LOG	struct
*	O
lp	pointer
;	O
u_int32_t	int
lastoff	int
;	O
int	O
ret	int
;	O
dblp	pointer
=	O
dbenv	pointer
->	O
lg_handle	pointer
;	O
lp	pointer
=	O
dblp	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
if	O
(	O
flags	int
==	O
DB_CURLSN	int
)	O
{	O
lsn	struct
->	O
file	int
=	O
lp	pointer
->	O
lsn	struct
.	O
file	int
;	O
lsn	struct
->	O
offset	long
=	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
;	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
+	O
sizeof	O
(	O
HDR	struct
)	O
+	O
dbt	struct
->	O
size	int
>	O
lp	pointer
->	O
persist	struct
.	O
lg_max	int
)	O
{	O
if	O
(	O
sizeof	O
(	O
HDR	struct
)	O
+	O
sizeof	O
(	O
LOGP	struct
)	O
+	O
dbt	struct
->	O
size	int
>	O
lp	pointer
->	O
persist	struct
.	O
lg_max	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"CDB_log_put: record larger than maximum file size"	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
__log_flush	function
(	O
dblp	pointer
,	O
NULL	O
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
lastoff	int
=	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
;	O
++	O
lp	pointer
->	O
lsn	struct
.	O
file	int
;	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
=	O
0	int
;	O
lp	pointer
->	O
w_off	int
=	O
0	int
;	O
}	O
else	O
lastoff	int
=	O
0	int
;	O
lsn	struct
->	O
file	int
=	O
lp	pointer
->	O
lsn	struct
.	O
file	int
;	O
lsn	struct
->	O
offset	long
=	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
;	O
if	O
(	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
==	O
0	int
)	O
{	O
t	struct
.	O
data	pointer
=	O
&	O
lp	pointer
->	O
persist	struct
;	O
t	struct
.	O
size	int
=	O
sizeof	O
(	O
LOGP	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__log_putr	function
(	O
dblp	pointer
,	O
lsn	struct
,	O
&	O
t	struct
,	O
lastoff	int
==	O
0	int
?	O
0	int
:	O
lastoff	int
-	O
lp	pointer
->	O
len	short
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__log_open_files	function
(	O
dbenv	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
lsn	struct
->	O
file	int
=	O
lp	pointer
->	O
lsn	struct
.	O
file	int
;	O
lsn	struct
->	O
offset	long
=	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
__log_putr	function
(	O
dblp	pointer
,	O
lsn	struct
,	O
dbt	struct
,	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
-	O
lp	pointer
->	O
len	short
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
flags	int
==	O
DB_CHECKPOINT	int
)	O
{	O
lp	pointer
->	O
chkpt_lsn	struct
=	O
*	O
lsn	struct
;	O
if	O
(	O
(	O
ret	int
=	O
__log_open_files	function
(	O
dbenv	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
flags	int
==	O
DB_FLUSH	int
||	O
flags	int
==	O
DB_CHECKPOINT	int
)	O
if	O
(	O
(	O
ret	int
=	O
__log_flush	function
(	O
dblp	pointer
,	O
NULL	O
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
flags	int
==	O
DB_CHECKPOINT	int
)	O
{	O
(	O
void	O
)	O
time	struct
(	O
&	O
lp	pointer
->	O
chkpt	long
)	O
;	O
lp	pointer
->	O
stat	pointer
.	O
st_wc_bytes	int
=	O
lp	pointer
->	O
stat	pointer
.	O
st_wc_mbytes	int
=	O
0	int
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__log_putr	function
(	O
dblp	pointer
,	O
lsn	struct
,	O
dbt	struct
,	O
prev	int
)	O
DB_LOG	struct
*	O
dblp	pointer
;	O
DB_LSN	struct
*	O
lsn	struct
;	O
const	O
DBT	struct
*	O
dbt	struct
;	O
u_int32_t	int
prev	int
;	O
{	O
HDR	struct
hdr	pointer
;	O
LOG	struct
*	O
lp	pointer
;	O
int	O
ret	int
;	O
lp	pointer
=	O
dblp	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
hdr	pointer
.	O
prev	int
=	O
prev	int
;	O
hdr	pointer
.	O
len	short
=	O
sizeof	O
(	O
HDR	struct
)	O
+	O
dbt	struct
->	O
size	int
;	O
hdr	pointer
.	O
cksum	int
=	O
CDB___ham_func4	function
(	O
dbt	struct
->	O
data	pointer
,	O
dbt	struct
->	O
size	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__log_fill	function
(	O
dblp	pointer
,	O
lsn	struct
,	O
&	O
hdr	pointer
,	O
sizeof	O
(	O
HDR	struct
)	O
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
lp	pointer
->	O
len	short
=	O
sizeof	O
(	O
HDR	struct
)	O
;	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
+=	O
sizeof	O
(	O
HDR	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__log_fill	function
(	O
dblp	pointer
,	O
lsn	struct
,	O
dbt	struct
->	O
data	pointer
,	O
dbt	struct
->	O
size	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
lp	pointer
->	O
len	short
+=	O
dbt	struct
->	O
size	int
;	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
+=	O
dbt	struct
->	O
size	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB_log_flush	function
(	O
dbenv	pointer
,	O
lsn	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
const	O
DB_LSN	struct
*	O
lsn	struct
;	O
{	O
DB_LOG	struct
*	O
dblp	pointer
;	O
int	O
ret	int
;	O
PANIC_CHECK	O
(	O
dbenv	pointer
)	O
;	O
ENV_REQUIRES_CONFIG	O
(	O
dbenv	pointer
,	O
dbenv	pointer
->	O
lg_handle	pointer
,	O
DB_INIT_LOG	int
)	O
;	O
dblp	pointer
=	O
dbenv	pointer
->	O
lg_handle	pointer
;	O
R_LOCK	O
(	O
dbenv	pointer
,	O
&	O
dblp	pointer
->	O
reginfo	pointer
)	O
;	O
ret	int
=	O
__log_flush	function
(	O
dblp	pointer
,	O
lsn	struct
)	O
;	O
R_UNLOCK	O
(	O
dbenv	pointer
,	O
&	O
dblp	pointer
->	O
reginfo	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
__log_flush	function
(	O
dblp	pointer
,	O
lsn	struct
)	O
DB_LOG	struct
*	O
dblp	pointer
;	O
const	O
DB_LSN	struct
*	O
lsn	struct
;	O
{	O
DB_LSN	struct
t_lsn	struct
;	O
LOG	struct
*	O
lp	pointer
;	O
int	O
current	int
,	O
ret	int
;	O
ret	int
=	O
0	int
;	O
lp	pointer
=	O
dblp	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
if	O
(	O
lsn	struct
==	O
NULL	O
)	O
{	O
t_lsn	struct
.	O
file	int
=	O
lp	pointer
->	O
lsn	struct
.	O
file	int
;	O
t_lsn	struct
.	O
offset	long
=	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
-	O
lp	pointer
->	O
len	short
;	O
lsn	struct
=	O
&	O
t_lsn	struct
;	O
}	O
else	O
if	O
(	O
lsn	struct
->	O
file	int
>	O
lp	pointer
->	O
lsn	struct
.	O
file	int
||	O
(	O
lsn	struct
->	O
file	int
==	O
lp	pointer
->	O
lsn	struct
.	O
file	int
&&	O
lsn	struct
->	O
offset	long
>	O
lp	pointer
->	O
lsn	struct
.	O
offset	long
-	O
lp	pointer
->	O
len	short
)	O
)	O
{	O
CDB___db_err	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
"CDB_log_flush: LSN past current end-of-log"	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
if	O
(	O
lsn	struct
->	O
file	int
<	O
lp	pointer
->	O
s_lsn	struct
.	O
file	int
||	O
(	O
lsn	struct
->	O
file	int
==	O
lp	pointer
->	O
s_lsn	struct
.	O
file	int
&&	O
lsn	struct
->	O
offset	long
<=	O
lp	pointer
->	O
s_lsn	struct
.	O
offset	long
)	O
)	O
return	O
(	O
0	int
)	O
;	O
current	int
=	O
0	int
;	O
if	O
(	O
lp	pointer
->	O
b_off	long
!=	O
0	int
&&	O
CDB_log_compare	function
(	O
lsn	struct
,	O
&	O
lp	pointer
->	O
f_lsn	struct
)	O
>=	O
0	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
__log_write	function
(	O
dblp	pointer
,	O
dblp	pointer
->	O
bufp	pointer
,	O
lp	pointer
->	O
b_off	long
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
lp	pointer
->	O
b_off	long
=	O
0	int
;	O
current	int
=	O
1	int
;	O
}	O
if	O
(	O
dblp	pointer
->	O
lfname	int
!=	O
lp	pointer
->	O
lsn	struct
.	O
file	int
)	O
{	O
if	O
(	O
!	O
current	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
__log_newfh	function
(	O
dblp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_fsync	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
&	O
dblp	pointer
->	O
lfh	struct
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___db_panic	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
ret	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
++	O
lp	pointer
->	O
stat	pointer
.	O
st_scount	int
;	O
lp	pointer
->	O
s_lsn	struct
=	O
lp	pointer
->	O
f_lsn	struct
;	O
if	O
(	O
!	O
current	int
&&	O
lp	pointer
->	O
s_lsn	struct
.	O
file	int
!=	O
0	int
)	O
{	O
if	O
(	O
lp	pointer
->	O
s_lsn	struct
.	O
offset	long
==	O
0	int
)	O
{	O
--	O
lp	pointer
->	O
s_lsn	struct
.	O
file	int
;	O
lp	pointer
->	O
s_lsn	struct
.	O
offset	long
=	O
lp	pointer
->	O
persist	struct
.	O
lg_max	int
;	O
}	O
else	O
--	O
lp	pointer
->	O
s_lsn	struct
.	O
offset	long
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__log_fill	function
(	O
dblp	pointer
,	O
lsn	struct
,	O
addr	pointer
,	O
len	short
)	O
DB_LOG	struct
*	O
dblp	pointer
;	O
DB_LSN	struct
*	O
lsn	struct
;	O
void	O
*	O
addr	pointer
;	O
u_int32_t	int
len	short
;	O
{	O
LOG	struct
*	O
lp	pointer
;	O
u_int32_t	int
bsize	int
,	O
nrec	int
;	O
size_t	long
nw	long
,	O
remain	long
;	O
int	O
ret	int
;	O
lp	pointer
=	O
dblp	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
bsize	int
=	O
lp	pointer
->	O
buffer_size	int
;	O
while	O
(	O
len	short
>	O
0	int
)	O
{	O
if	O
(	O
lp	pointer
->	O
b_off	long
==	O
0	int
)	O
lp	pointer
->	O
f_lsn	struct
=	O
*	O
lsn	struct
;	O
if	O
(	O
lp	pointer
->	O
b_off	long
==	O
0	int
&&	O
len	short
>=	O
bsize	int
)	O
{	O
nrec	int
=	O
len	short
/	O
bsize	int
;	O
if	O
(	O
(	O
ret	int
=	O
__log_write	function
(	O
dblp	pointer
,	O
addr	pointer
,	O
nrec	int
*	O
bsize	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
addr	pointer
=	O
(	O
u_int8_t	char
*	O
)	O
addr	pointer
+	O
nrec	int
*	O
bsize	int
;	O
len	short
-=	O
nrec	int
*	O
bsize	int
;	O
++	O
lp	pointer
->	O
stat	pointer
.	O
st_wcount_fill	int
;	O
continue	O
;	O
}	O
remain	long
=	O
bsize	int
-	O
lp	pointer
->	O
b_off	long
;	O
nw	long
=	O
remain	long
>	O
len	short
?	O
len	short
:	O
remain	long
;	O
memcpy	function
(	O
dblp	pointer
->	O
bufp	pointer
+	O
lp	pointer
->	O
b_off	long
,	O
addr	pointer
,	O
nw	long
)	O
;	O
addr	pointer
=	O
(	O
u_int8_t	char
*	O
)	O
addr	pointer
+	O
nw	long
;	O
len	short
-=	O
nw	long
;	O
lp	pointer
->	O
b_off	long
+=	O
nw	long
;	O
if	O
(	O
lp	pointer
->	O
b_off	long
==	O
bsize	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
__log_write	function
(	O
dblp	pointer
,	O
dblp	pointer
->	O
bufp	pointer
,	O
bsize	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
lp	pointer
->	O
b_off	long
=	O
0	int
;	O
++	O
lp	pointer
->	O
stat	pointer
.	O
st_wcount_fill	int
;	O
}	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__log_write	function
(	O
dblp	pointer
,	O
addr	pointer
,	O
len	short
)	O
DB_LOG	struct
*	O
dblp	pointer
;	O
void	O
*	O
addr	pointer
;	O
u_int32_t	int
len	short
;	O
{	O
LOG	struct
*	O
lp	pointer
;	O
size_t	long
nw	long
;	O
int	O
ret	int
;	O
lp	pointer
=	O
dblp	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
if	O
(	O
!	O
F_ISSET	O
(	O
&	O
dblp	pointer
->	O
lfh	struct
,	O
DB_FH_VALID	int
)	O
||	O
dblp	pointer
->	O
lfname	int
!=	O
lp	pointer
->	O
lsn	struct
.	O
file	int
)	O
if	O
(	O
(	O
ret	int
=	O
__log_newfh	function
(	O
dblp	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_seek	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
&	O
dblp	pointer
->	O
lfh	struct
,	O
0	int
,	O
0	int
,	O
lp	pointer
->	O
w_off	int
,	O
0	int
,	O
DB_OS_SEEK_SET	int
)	O
)	O
!=	O
0	int
||	O
(	O
ret	int
=	O
CDB___os_write	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
&	O
dblp	pointer
->	O
lfh	struct
,	O
addr	pointer
,	O
len	short
,	O
&	O
nw	long
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___db_panic	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
ret	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
if	O
(	O
nw	long
!=	O
len	short
)	O
{	O
CDB___db_err	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
"Short write while writing log"	pointer
)	O
;	O
return	O
(	O
EIO	int
)	O
;	O
}	O
lp	pointer
->	O
w_off	int
+=	O
len	short
;	O
if	O
(	O
(	O
lp	pointer
->	O
stat	pointer
.	O
st_w_bytes	int
+=	O
len	short
)	O
>=	O
MEGABYTE	int
)	O
{	O
lp	pointer
->	O
stat	pointer
.	O
st_w_bytes	int
-=	O
MEGABYTE	int
;	O
++	O
lp	pointer
->	O
stat	pointer
.	O
st_w_mbytes	int
;	O
}	O
if	O
(	O
(	O
lp	pointer
->	O
stat	pointer
.	O
st_wc_bytes	int
+=	O
len	short
)	O
>=	O
MEGABYTE	int
)	O
{	O
lp	pointer
->	O
stat	pointer
.	O
st_wc_bytes	int
-=	O
MEGABYTE	int
;	O
++	O
lp	pointer
->	O
stat	pointer
.	O
st_wc_mbytes	int
;	O
}	O
++	O
lp	pointer
->	O
stat	pointer
.	O
st_wcount	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB_log_file	function
(	O
dbenv	pointer
,	O
lsn	struct
,	O
namep	pointer
,	O
len	short
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
const	O
DB_LSN	struct
*	O
lsn	struct
;	O
char	O
*	O
namep	pointer
;	O
size_t	long
len	short
;	O
{	O
DB_LOG	struct
*	O
dblp	pointer
;	O
int	O
ret	int
;	O
char	O
*	O
name	pointer
;	O
PANIC_CHECK	O
(	O
dbenv	pointer
)	O
;	O
ENV_REQUIRES_CONFIG	O
(	O
dbenv	pointer
,	O
dbenv	pointer
->	O
lg_handle	pointer
,	O
DB_INIT_LOG	int
)	O
;	O
dblp	pointer
=	O
dbenv	pointer
->	O
lg_handle	pointer
;	O
R_LOCK	O
(	O
dbenv	pointer
,	O
&	O
dblp	pointer
->	O
reginfo	pointer
)	O
;	O
ret	int
=	O
CDB___log_name	function
(	O
dblp	pointer
,	O
lsn	struct
->	O
file	int
,	O
&	O
name	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
R_UNLOCK	O
(	O
dbenv	pointer
,	O
&	O
dblp	pointer
->	O
reginfo	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
len	short
<	O
strlen	function
(	O
name	pointer
)	O
+	O
1	int
)	O
{	O
*	O
namep	pointer
=	O
'\0'	O
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"CDB_log_file: name buffer is too short"	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
(	O
void	O
)	O
strcpy	function
(	O
namep	pointer
,	O
name	pointer
)	O
;	O
CDB___os_freestr	function
(	O
name	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
__log_newfh	function
(	O
dblp	pointer
)	O
DB_LOG	struct
*	O
dblp	pointer
;	O
{	O
LOG	struct
*	O
lp	pointer
;	O
int	O
ret	int
;	O
char	O
*	O
name	pointer
;	O
if	O
(	O
F_ISSET	O
(	O
&	O
dblp	pointer
->	O
lfh	struct
,	O
DB_FH_VALID	int
)	O
)	O
(	O
void	O
)	O
CDB___os_closehandle	function
(	O
&	O
dblp	pointer
->	O
lfh	struct
)	O
;	O
lp	pointer
=	O
dblp	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
dblp	pointer
->	O
lfname	int
=	O
lp	pointer
->	O
lsn	struct
.	O
file	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___log_name	function
(	O
dblp	pointer
,	O
dblp	pointer
->	O
lfname	int
,	O
&	O
name	pointer
,	O
&	O
dblp	pointer
->	O
lfh	struct
,	O
DB_OSO_CREATE	int
|	O
DB_OSO_SEQ	int
)	O
)	O
!=	O
0	int
)	O
CDB___db_err	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
"CDB_log_put: %s: %s"	pointer
,	O
name	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
CDB___os_freestr	function
(	O
name	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___log_name	function
(	O
dblp	pointer
,	O
filenumber	int
,	O
namep	pointer
,	O
fhp	pointer
,	O
flags	int
)	O
DB_LOG	struct
*	O
dblp	pointer
;	O
u_int32_t	int
filenumber	int
,	O
flags	int
;	O
char	O
*	O
*	O
namep	pointer
;	O
DB_FH	struct
*	O
fhp	pointer
;	O
{	O
LOG	struct
*	O
lp	pointer
;	O
int	O
ret	int
;	O
char	O
*	O
oname	pointer
;	O
char	O
old	array
[	O
sizeof	O
(	O
LFPREFIX	pointer
)	O
+	O
5	int
+	O
20	int
]	O
,	O
new	array
[	O
sizeof	O
(	O
LFPREFIX	pointer
)	O
+	O
10	int
+	O
20	int
]	O
;	O
lp	pointer
=	O
dblp	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
(	O
void	O
)	O
snprintf	function
(	O
new	array
,	O
sizeof	O
(	O
new	array
)	O
,	O
LFNAME	pointer
,	O
filenumber	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_appname	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
DB_APP_LOG	int
,	O
NULL	O
,	O
new	array
,	O
0	int
,	O
NULL	O
,	O
namep	pointer
)	O
)	O
!=	O
0	int
||	O
fhp	pointer
==	O
NULL	O
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_open	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
*	O
namep	pointer
,	O
flags	int
,	O
lp	pointer
->	O
persist	struct
.	O
mode	enum
,	O
fhp	pointer
)	O
)	O
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
!	O
LF_ISSET	O
(	O
DB_OSO_RDONLY	int
)	O
)	O
{	O
CDB___db_err	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
"%s: log file open failed: %s"	pointer
,	O
*	O
namep	pointer
,	O
CDB_db_strerror	function
(	O
ret	int
)	O
)	O
;	O
CDB___db_panic	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
ret	int
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
(	O
void	O
)	O
snprintf	function
(	O
old	array
,	O
sizeof	O
(	O
old	array
)	O
,	O
LFNAME_V1	pointer
,	O
filenumber	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_appname	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
DB_APP_LOG	int
,	O
NULL	O
,	O
old	array
,	O
0	int
,	O
NULL	O
,	O
&	O
oname	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_open	function
(	O
dblp	pointer
->	O
dbenv	pointer
,	O
oname	pointer
,	O
flags	int
,	O
lp	pointer
->	O
persist	struct
.	O
mode	enum
,	O
fhp	pointer
)	O
)	O
==	O
0	int
)	O
{	O
CDB___os_freestr	function
(	O
*	O
namep	pointer
)	O
;	O
*	O
namep	pointer
=	O
oname	pointer
;	O
return	O
(	O
0	int
)	O
;	O
}	O
err	pointer
:	O
CDB___os_freestr	function
(	O
oname	pointer
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
int	O
__log_open_files	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
DB_LOG	struct
*	O
dblp	pointer
;	O
DB_LSN	struct
r_unused	struct
;	O
DBT	struct
fid_dbt	struct
,	O
t	struct
;	O
FNAME	struct
*	O
fnp	pointer
;	O
LOG	struct
*	O
lp	pointer
;	O
int	O
ret	int
;	O
dblp	pointer
=	O
dbenv	pointer
->	O
lg_handle	pointer
;	O
lp	pointer
=	O
dblp	pointer
->	O
reginfo	pointer
.	O
primary	int
;	O
for	O
(	O
fnp	pointer
=	O
SH_TAILQ_FIRST	O
(	O
&	O
lp	pointer
->	O
fq	struct
,	O
__fname	struct
)	O
;	O
fnp	pointer
!=	O
NULL	O
;	O
fnp	pointer
=	O
SH_TAILQ_NEXT	O
(	O
fnp	pointer
,	O
q	struct
,	O
__fname	struct
)	O
)	O
{	O
if	O
(	O
fnp	pointer
->	O
ref	short
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
fnp	pointer
->	O
name_off	int
!=	O
INVALID_ROFF	int
)	O
{	O
memset	function
(	O
&	O
t	struct
,	O
0	int
,	O
sizeof	O
(	O
t	struct
)	O
)	O
;	O
t	struct
.	O
data	pointer
=	O
R_ADDR	O
(	O
&	O
dblp	pointer
->	O
reginfo	pointer
,	O
fnp	pointer
->	O
name_off	int
)	O
;	O
t	struct
.	O
size	int
=	O
strlen	function
(	O
t	struct
.	O
data	pointer
)	O
+	O
1	int
;	O
}	O
memset	function
(	O
&	O
fid_dbt	struct
,	O
0	int
,	O
sizeof	O
(	O
fid_dbt	struct
)	O
)	O
;	O
fid_dbt	struct
.	O
data	pointer
=	O
fnp	pointer
->	O
ufid	array
;	O
fid_dbt	struct
.	O
size	int
=	O
DB_FILE_ID_LEN	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___log_register_log	function
(	O
dbenv	pointer
,	O
NULL	O
,	O
&	O
r_unused	struct
,	O
0	int
,	O
LOG_CHECKPOINT	int
,	O
fnp	pointer
->	O
name_off	int
==	O
INVALID_ROFF	int
?	O
NULL	O
:	O
&	O
t	struct
,	O
&	O
fid_dbt	struct
,	O
fnp	pointer
->	O
id	int
,	O
fnp	pointer
->	O
s_type	enum
,	O
fnp	pointer
->	O
meta_pgno	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
