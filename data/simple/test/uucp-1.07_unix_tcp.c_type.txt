const	O
char	O
tcp_rcsid	array
[	O
]	O
=	O
"$Id: tcp.c,v 1.12 2002/03/05 19:10:42 ian Rel $"	pointer
;	O
typedef	O
struct	O
sockaddr_storage	struct
sockaddr_storage	struct
;	O
static	O
void	O
utcp_free	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
)	O
)	O
;	O
static	O
boolean	int
ftcp_set_hints	function
P	O
(	O
(	O
int	O
iversion	int
,	O
struct	O
addrinfo	struct
*	O
qhints	pointer
)	O
)	O
;	O
static	O
boolean	int
ftcp_set_flags	function
P	O
(	O
(	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
)	O
)	O
;	O
static	O
boolean	int
ftcp_open	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
long	O
ibaud	long
,	O
boolean	int
fwait	int
,	O
boolean	int
fuser	int
)	O
)	O
;	O
static	O
boolean	int
ftcp_close	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
pointer	pointer
puuconf	pointer
,	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
,	O
boolean	int
fsuccess	int
)	O
)	O
;	O
static	O
boolean	int
ftcp_dial	function
P	O
(	O
(	O
struct	O
sconnection	struct
*	O
qconn	pointer
,	O
pointer	pointer
puuconf	pointer
,	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
,	O
const	O
char	O
*	O
zphone	pointer
,	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
,	O
enum	O
tdialerfound	enum
*	O
ptdialer	pointer
)	O
)	O
;	O
static	O
int	O
itcp_port_number	function
P	O
(	O
(	O
const	O
char	O
*	O
zport	pointer
)	O
)	O
;	O
static	O
const	O
struct	O
sconncmds	struct
stcpcmds	struct
=	O
{	O
utcp_free	function
,	O
NULL	O
,	O
NULL	O
,	O
ftcp_open	function
,	O
ftcp_close	function
,	O
ftcp_dial	function
,	O
fsysdep_conn_read	function
,	O
fsysdep_conn_write	function
,	O
fsysdep_conn_io	function
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
fsysdep_conn_chat	function
,	O
NULL	O
}	O
;	O
boolean	int
fsysdep_tcp_init	function
(	O
qconn	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
q	pointer
;	O
q	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
ssysdep_conn	struct
)	O
)	O
;	O
q	pointer
->	O
o	int
=	O
-	O
1	int
;	O
q	pointer
->	O
ord	int
=	O
-	O
1	int
;	O
q	pointer
->	O
owr	int
=	O
-	O
1	int
;	O
q	pointer
->	O
zdevice	pointer
=	O
NULL	O
;	O
q	pointer
->	O
iflags	int
=	O
-	O
1	int
;	O
q	pointer
->	O
iwr_flags	int
=	O
-	O
1	int
;	O
q	pointer
->	O
fterminal	int
=	O
FALSE	O
;	O
q	pointer
->	O
ftli	int
=	O
FALSE	O
;	O
q	pointer
->	O
ibaud	long
=	O
0	int
;	O
qconn	pointer
->	O
psysdep	pointer
=	O
(	O
pointer	pointer
)	O
q	pointer
;	O
qconn	pointer
->	O
qcmds	pointer
=	O
&	O
stcpcmds	struct
;	O
return	O
TRUE	O
;	O
}	O
static	O
void	O
utcp_free	function
(	O
qconn	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
{	O
xfree	function
(	O
qconn	pointer
->	O
psysdep	pointer
)	O
;	O
}	O
static	O
boolean	int
ftcp_set_hints	function
(	O
iversion	int
,	O
qhints	pointer
)	O
int	O
iversion	int
;	O
struct	O
addrinfo	struct
*	O
qhints	pointer
;	O
{	O
switch	O
(	O
iversion	int
)	O
{	O
case	O
0	int
:	O
qhints	pointer
->	O
ai_family	int
=	O
0	int
;	O
break	O
;	O
case	O
4	int
:	O
qhints	pointer
->	O
ai_family	int
=	O
PF_INET	int
;	O
break	O
;	O
case	O
6	int
:	O
qhints	pointer
->	O
ai_family	int
=	O
PF_INET6	int
;	O
break	O
;	O
default	O
:	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Invalid IP version number %d"	pointer
,	O
iversion	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
ftcp_set_flags	function
(	O
qsysdep	pointer
)	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
{	O
if	O
(	O
fcntl	function
(	O
qsysdep	pointer
->	O
o	int
,	O
F_SETFD	int
,	O
fcntl	function
(	O
qsysdep	pointer
->	O
o	int
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl (FD_CLOEXEC): %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
(	O
void	O
)	O
close	function
(	O
qsysdep	pointer
->	O
o	int
)	O
;	O
qsysdep	pointer
->	O
o	int
=	O
-	O
1	int
;	O
return	O
FALSE	O
;	O
}	O
qsysdep	pointer
->	O
iflags	int
=	O
fcntl	function
(	O
qsysdep	pointer
->	O
o	int
,	O
F_GETFL	int
,	O
0	int
)	O
;	O
if	O
(	O
qsysdep	pointer
->	O
iflags	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fcntl: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
(	O
void	O
)	O
close	function
(	O
qsysdep	pointer
->	O
o	int
)	O
;	O
qsysdep	pointer
->	O
o	int
=	O
-	O
1	int
;	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
boolean	int
ftcp_open	function
(	O
qconn	pointer
,	O
ibaud	long
,	O
fwait	int
,	O
fuser	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
long	O
ibaud	long
ATTRIBUTE_UNUSED	O
;	O
boolean	int
fwait	int
;	O
boolean	int
fuser	int
ATTRIBUTE_UNUSED	O
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
const	O
char	O
*	O
zport	pointer
;	O
uid_t	int
ieuid	int
;	O
gid_t	int
iegid	int
;	O
boolean	int
fswap	int
;	O
struct	O
addrinfo	struct
shints	struct
;	O
struct	O
addrinfo	struct
*	O
qres	pointer
;	O
struct	O
addrinfo	struct
*	O
quse	pointer
;	O
int	O
ierr	int
;	O
ulog_device	function
(	O
"TCP"	pointer
)	O
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
qsysdep	pointer
->	O
o	int
=	O
-	O
1	int
;	O
qsysdep	pointer
->	O
ipid	int
=	O
getpid	function
(	O
)	O
;	O
if	O
(	O
!	O
fwait	int
)	O
return	O
TRUE	O
;	O
zport	pointer
=	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_zport	pointer
;	O
bzero	function
(	O
(	O
pointer	pointer
)	O
&	O
shints	struct
,	O
sizeof	O
shints	struct
)	O
;	O
if	O
(	O
!	O
ftcp_set_hints	function
(	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_iversion	int
,	O
&	O
shints	struct
)	O
)	O
return	O
FALSE	O
;	O
shints	struct
.	O
ai_socktype	int
=	O
SOCK_STREAM	int
;	O
shints	struct
.	O
ai_flags	int
=	O
AI_PASSIVE	int
;	O
ierr	int
=	O
getaddrinfo	function
(	O
NULL	O
,	O
zport	pointer
,	O
&	O
shints	struct
,	O
&	O
qres	pointer
)	O
;	O
if	O
(	O
ierr	int
==	O
EAI_SERVICE	O
&&	O
strcmp	function
(	O
zport	pointer
,	O
"uucp"	pointer
)	O
==	O
0	int
)	O
ierr	int
=	O
getaddrinfo	function
(	O
NULL	O
,	O
ZUUCP_PORT	O
,	O
&	O
shints	struct
,	O
&	O
qres	pointer
)	O
;	O
if	O
(	O
ierr	int
!=	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"getaddrinfo: %s"	pointer
,	O
gai_strerror	function
(	O
ierr	int
)	O
)	O
;	O
qres	pointer
=	O
NULL	O
;	O
quse	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
for	O
(	O
quse	pointer
=	O
qres	pointer
;	O
quse	pointer
!=	O
NULL	O
;	O
quse	pointer
=	O
quse	pointer
->	O
ai_next	pointer
)	O
{	O
qsysdep	pointer
->	O
o	int
=	O
socket	function
(	O
quse	pointer
->	O
ai_family	int
,	O
quse	pointer
->	O
ai_socktype	int
,	O
quse	pointer
->	O
ai_protocol	int
)	O
;	O
if	O
(	O
qsysdep	pointer
->	O
o	int
>=	O
0	int
)	O
break	O
;	O
}	O
}	O
if	O
(	O
qsysdep	pointer
->	O
o	int
<	O
0	int
)	O
{	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_iversion	int
!=	O
0	int
&&	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_iversion	int
!=	O
4	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Could not get IPv6 socket"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
qsysdep	pointer
->	O
o	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
qsysdep	pointer
->	O
o	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"socket: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
!	O
ftcp_set_flags	function
(	O
qsysdep	pointer
)	O
)	O
return	O
FALSE	O
;	O
fswap	int
=	O
geteuid	function
(	O
)	O
!=	O
0	int
;	O
if	O
(	O
fswap	int
)	O
{	O
if	O
(	O
!	O
fsuser_perms	function
(	O
&	O
ieuid	int
,	O
&	O
iegid	int
)	O
)	O
{	O
(	O
void	O
)	O
close	function
(	O
qsysdep	pointer
->	O
o	int
)	O
;	O
qsysdep	pointer
->	O
o	int
=	O
-	O
1	int
;	O
if	O
(	O
qres	pointer
!=	O
NULL	O
)	O
freeaddrinfo	function
(	O
qres	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
quse	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
bind	function
(	O
qsysdep	pointer
->	O
o	int
,	O
quse	pointer
->	O
ai_addr	pointer
,	O
quse	pointer
->	O
ai_addrlen	int
)	O
<	O
0	int
)	O
{	O
if	O
(	O
fswap	int
)	O
(	O
void	O
)	O
fsuucp_perms	function
(	O
(	O
long	O
)	O
ieuid	int
,	O
(	O
long	O
)	O
iegid	int
)	O
;	O
ulog	function
(	O
LOG_FATAL	int
,	O
"bind: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
else	O
{	O
struct	O
sockaddr_in	struct
sin	struct
;	O
bzero	function
(	O
(	O
pointer	pointer
)	O
&	O
sin	struct
,	O
sizeof	O
sin	struct
)	O
;	O
sin	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
sin	struct
.	O
sin_port	short
=	O
itcp_port_number	function
(	O
zport	pointer
)	O
;	O
sin	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
htonl	function
(	O
INADDR_ANY	O
)	O
;	O
if	O
(	O
bind	function
(	O
qsysdep	pointer
->	O
o	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
sin	struct
,	O
sizeof	O
sin	struct
)	O
<	O
0	int
)	O
{	O
if	O
(	O
fswap	int
)	O
(	O
void	O
)	O
fsuucp_perms	function
(	O
(	O
long	O
)	O
ieuid	int
,	O
(	O
long	O
)	O
iegid	int
)	O
;	O
ulog	function
(	O
LOG_FATAL	int
,	O
"bind: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
if	O
(	O
qres	pointer
!=	O
NULL	O
)	O
freeaddrinfo	function
(	O
qres	pointer
)	O
;	O
if	O
(	O
fswap	int
)	O
{	O
if	O
(	O
!	O
fsuucp_perms	function
(	O
(	O
long	O
)	O
ieuid	int
,	O
(	O
long	O
)	O
iegid	int
)	O
)	O
ulog	function
(	O
LOG_FATAL	int
,	O
"Could not swap back to UUCP user permissions"	pointer
)	O
;	O
}	O
if	O
(	O
listen	function
(	O
qsysdep	pointer
->	O
o	int
,	O
5	int
)	O
<	O
0	int
)	O
ulog	function
(	O
LOG_FATAL	int
,	O
"listen: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
while	O
(	O
!	O
FGOT_SIGNAL	O
(	O
)	O
)	O
{	O
sockaddr_storage	struct
speer	struct
;	O
size_t	long
clen	long
;	O
int	O
onew	int
;	O
pid_t	int
ipid	int
;	O
DEBUG_MESSAGE0	O
(	O
DEBUG_PORT	O
,	O
"ftcp_open: Waiting for connections"	pointer
)	O
;	O
clen	long
=	O
sizeof	O
speer	struct
;	O
onew	int
=	O
accept	function
(	O
qsysdep	pointer
->	O
o	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
speer	struct
,	O
&	O
clen	long
)	O
;	O
if	O
(	O
onew	int
<	O
0	int
)	O
ulog	function
(	O
LOG_FATAL	int
,	O
"accept: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
DEBUG_MESSAGE0	O
(	O
DEBUG_PORT	O
,	O
"ftcp_open: Got connection; forking"	pointer
)	O
;	O
ipid	int
=	O
ixsfork	function
(	O
)	O
;	O
if	O
(	O
ipid	int
<	O
0	int
)	O
ulog	function
(	O
LOG_FATAL	int
,	O
"fork: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
ipid	int
==	O
0	int
)	O
{	O
(	O
void	O
)	O
close	function
(	O
qsysdep	pointer
->	O
o	int
)	O
;	O
qsysdep	pointer
->	O
o	int
=	O
onew	int
;	O
ipid	int
=	O
ixsfork	function
(	O
)	O
;	O
if	O
(	O
ipid	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fork: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
_exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
ipid	int
!=	O
0	int
)	O
_exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
ulog_id	function
(	O
getpid	function
(	O
)	O
)	O
;	O
return	O
TRUE	O
;	O
}	O
(	O
void	O
)	O
close	function
(	O
onew	int
)	O
;	O
(	O
void	O
)	O
ixswait	function
(	O
(	O
unsigned	O
long	O
)	O
ipid	int
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
usysdep_exit	function
(	O
FALSE	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
static	O
boolean	int
ftcp_close	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
qdialer	pointer
,	O
fsuccess	int
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
pointer	pointer
puuconf	pointer
ATTRIBUTE_UNUSED	O
;	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
ATTRIBUTE_UNUSED	O
;	O
boolean	int
fsuccess	int
ATTRIBUTE_UNUSED	O
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
boolean	int
fret	int
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
fret	int
=	O
TRUE	O
;	O
if	O
(	O
qsysdep	pointer
->	O
o	int
>=	O
0	int
&&	O
close	function
(	O
qsysdep	pointer
->	O
o	int
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"close: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
fret	int
=	O
FALSE	O
;	O
}	O
qsysdep	pointer
->	O
o	int
=	O
-	O
1	int
;	O
if	O
(	O
qsysdep	pointer
->	O
ipid	int
!=	O
getpid	function
(	O
)	O
)	O
fret	int
=	O
FALSE	O
;	O
return	O
fret	int
;	O
}	O
static	O
boolean	int
ftcp_dial	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
qsys	pointer
,	O
zphone	pointer
,	O
qdialer	pointer
,	O
ptdialer	pointer
)	O
struct	O
sconnection	struct
*	O
qconn	pointer
;	O
pointer	pointer
puuconf	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
const	O
char	O
*	O
zphone	pointer
;	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
;	O
enum	O
tdialerfound	enum
*	O
ptdialer	pointer
;	O
{	O
struct	O
ssysdep_conn	struct
*	O
qsysdep	pointer
;	O
const	O
char	O
*	O
zhost	pointer
;	O
const	O
char	O
*	O
zport	pointer
;	O
char	O
*	O
*	O
pzdialer	pointer
;	O
struct	O
addrinfo	struct
shints	struct
;	O
struct	O
addrinfo	struct
*	O
qres	pointer
;	O
struct	O
addrinfo	struct
*	O
quse	pointer
;	O
int	O
ierr	int
;	O
qsysdep	pointer
=	O
(	O
struct	O
ssysdep_conn	struct
*	O
)	O
qconn	pointer
->	O
psysdep	pointer
;	O
qsysdep	pointer
->	O
o	int
=	O
-	O
1	int
;	O
*	O
ptdialer	pointer
=	O
DIALERFOUND_FALSE	int
;	O
zhost	pointer
=	O
zphone	pointer
;	O
if	O
(	O
zhost	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
qsys	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"No address for TCP connection"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
zhost	pointer
=	O
qsys	pointer
->	O
uuconf_zname	pointer
;	O
}	O
zport	pointer
=	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_zport	pointer
;	O
bzero	function
(	O
(	O
pointer	pointer
)	O
&	O
shints	struct
,	O
sizeof	O
shints	struct
)	O
;	O
if	O
(	O
!	O
ftcp_set_hints	function
(	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_iversion	int
,	O
&	O
shints	struct
)	O
)	O
return	O
FALSE	O
;	O
shints	struct
.	O
ai_socktype	int
=	O
SOCK_STREAM	int
;	O
ierr	int
=	O
getaddrinfo	function
(	O
zhost	pointer
,	O
zport	pointer
,	O
&	O
shints	struct
,	O
&	O
qres	pointer
)	O
;	O
if	O
(	O
ierr	int
==	O
EAI_SERVICE	O
&&	O
strcmp	function
(	O
zport	pointer
,	O
"uucp"	pointer
)	O
==	O
0	int
)	O
ierr	int
=	O
getaddrinfo	function
(	O
zhost	pointer
,	O
ZUUCP_PORT	O
,	O
&	O
shints	struct
,	O
&	O
qres	pointer
)	O
;	O
if	O
(	O
ierr	int
!=	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"getaddrinfo: %s"	pointer
,	O
gai_strerror	function
(	O
ierr	int
)	O
)	O
;	O
qres	pointer
=	O
NULL	O
;	O
quse	pointer
=	O
NULL	O
;	O
ierr	int
=	O
0	int
;	O
}	O
else	O
{	O
ierr	int
=	O
0	int
;	O
for	O
(	O
quse	pointer
=	O
qres	pointer
;	O
quse	pointer
!=	O
NULL	O
;	O
quse	pointer
=	O
quse	pointer
->	O
ai_next	pointer
)	O
{	O
qsysdep	pointer
->	O
o	int
=	O
socket	function
(	O
quse	pointer
->	O
ai_family	int
,	O
quse	pointer
->	O
ai_socktype	int
,	O
quse	pointer
->	O
ai_protocol	int
)	O
;	O
if	O
(	O
qsysdep	pointer
->	O
o	int
>=	O
0	int
)	O
{	O
if	O
(	O
connect	function
(	O
qsysdep	pointer
->	O
o	int
,	O
quse	pointer
->	O
ai_addr	pointer
,	O
quse	pointer
->	O
ai_addrlen	int
)	O
>=	O
0	int
)	O
break	O
;	O
ierr	int
=	O
errno	O
;	O
close	function
(	O
qsysdep	pointer
->	O
o	int
)	O
;	O
qsysdep	pointer
->	O
o	int
=	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
qres	pointer
!=	O
NULL	O
)	O
freeaddrinfo	function
(	O
qres	pointer
)	O
;	O
}	O
if	O
(	O
qsysdep	pointer
->	O
o	int
<	O
0	int
)	O
{	O
struct	O
hostent	struct
*	O
qhost	pointer
;	O
struct	O
sockaddr_in	struct
sin	struct
;	O
if	O
(	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_iversion	int
!=	O
0	int
&&	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_iversion	int
!=	O
4	int
)	O
{	O
if	O
(	O
ierr	int
!=	O
0	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"connect: %s"	pointer
,	O
strerror	function
(	O
ierr	int
)	O
)	O
;	O
else	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Could not get IPv6 address or socket"	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
qsysdep	pointer
->	O
o	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
qsysdep	pointer
->	O
o	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"socket: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
errno	O
=	O
0	int
;	O
bzero	function
(	O
(	O
pointer	pointer
)	O
&	O
sin	struct
,	O
sizeof	O
sin	struct
)	O
;	O
qhost	pointer
=	O
gethostbyname	function
(	O
(	O
char	O
*	O
)	O
zhost	pointer
)	O
;	O
if	O
(	O
qhost	pointer
!=	O
NULL	O
)	O
{	O
sin	struct
.	O
sin_family	short
=	O
qhost	pointer
->	O
h_addrtype	int
;	O
memcpy	function
(	O
&	O
sin	struct
.	O
sin_addr	struct
.	O
s_addr	int
,	O
qhost	pointer
->	O
h_addr	O
,	O
(	O
size_t	long
)	O
qhost	pointer
->	O
h_length	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
errno	O
!=	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"gethostbyname (%s): %s"	pointer
,	O
zhost	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
sin	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
sin	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
inet_addr	function
(	O
(	O
char	O
*	O
)	O
zhost	pointer
)	O
;	O
if	O
(	O
(	O
long	O
)	O
sin	struct
.	O
sin_addr	struct
.	O
s_addr	int
==	O
(	O
long	O
)	O
-	O
1	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"%s: unknown host name"	pointer
,	O
zhost	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
sin	struct
.	O
sin_port	short
=	O
itcp_port_number	function
(	O
zport	pointer
)	O
;	O
if	O
(	O
connect	function
(	O
qsysdep	pointer
->	O
o	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
sin	struct
,	O
sizeof	O
sin	struct
)	O
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"connect: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
(	O
void	O
)	O
close	function
(	O
qsysdep	pointer
->	O
o	int
)	O
;	O
qsysdep	pointer
->	O
o	int
=	O
-	O
1	int
;	O
return	O
FALSE	O
;	O
}	O
}	O
if	O
(	O
!	O
ftcp_set_flags	function
(	O
qsysdep	pointer
)	O
)	O
return	O
FALSE	O
;	O
pzdialer	pointer
=	O
qconn	pointer
->	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_pzdialer	pointer
;	O
if	O
(	O
pzdialer	pointer
!=	O
NULL	O
&&	O
*	O
pzdialer	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
fconn_dial_sequence	function
(	O
qconn	pointer
,	O
puuconf	pointer
,	O
pzdialer	pointer
,	O
qsys	pointer
,	O
zphone	pointer
,	O
qdialer	pointer
,	O
ptdialer	pointer
)	O
)	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
static	O
int	O
itcp_port_number	function
(	O
zname	pointer
)	O
const	O
char	O
*	O
zname	pointer
;	O
{	O
boolean	int
fuucp	int
;	O
static	O
int	O
iuucp	int
;	O
int	O
i	int
;	O
char	O
*	O
zend	pointer
;	O
struct	O
servent	struct
*	O
q	pointer
;	O
fuucp	int
=	O
strcmp	function
(	O
zname	pointer
,	O
"uucp"	pointer
)	O
==	O
0	int
;	O
if	O
(	O
fuucp	int
&&	O
iuucp	int
!=	O
0	int
)	O
return	O
iuucp	int
;	O
i	int
=	O
strtol	function
(	O
(	O
char	O
*	O
)	O
zname	pointer
,	O
&	O
zend	pointer
,	O
10	int
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
&&	O
*	O
zend	pointer
==	O
'\0'	O
)	O
return	O
htons	function
(	O
i	int
)	O
;	O
q	pointer
=	O
getservbyname	function
(	O
(	O
char	O
*	O
)	O
zname	pointer
,	O
(	O
char	O
*	O
)	O
"tcp"	pointer
)	O
;	O
if	O
(	O
q	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
fuucp	int
)	O
{	O
iuucp	int
=	O
htons	function
(	O
IUUCP_PORT	O
)	O
;	O
return	O
iuucp	int
;	O
}	O
ulog	function
(	O
LOG_ERROR	int
,	O
"getservbyname (%s): %s"	pointer
,	O
zname	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
fuucp	int
)	O
iuucp	int
=	O
q	pointer
->	O
s_port	int
;	O
return	O
q	pointer
->	O
s_port	int
;	O
}	O
