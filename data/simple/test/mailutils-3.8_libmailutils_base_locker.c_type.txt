struct	O
_mu_locker	struct
{	O
unsigned	O
refcnt	int
;	O
enum	O
mu_locker_mode	enum
mode	enum
;	O
char	O
*	O
file	pointer
;	O
int	O
flags	int
;	O
int	O
expire_time	int
;	O
int	O
retries	int
;	O
int	O
retry_sleep	int
;	O
union	O
lock_data	union
{	O
struct	O
{	O
char	O
*	O
dotlock	pointer
;	O
char	O
*	O
nfslock	pointer
;	O
}	O
dot	struct
;	O
struct	O
{	O
char	O
*	O
name	pointer
;	O
}	O
external	struct
;	O
struct	O
{	O
int	O
fd	int
;	O
}	O
kernel	struct
;	O
}	O
data	pointer
;	O
}	O
;	O
struct	O
locker_tab	struct
{	O
int	O
(	O
*	O
init	pointer
)	O
(	O
mu_locker_t	pointer
)	O
;	O
void	O
(	O
*	O
destroy	pointer
)	O
(	O
mu_locker_t	pointer
)	O
;	O
int	O
(	O
*	O
prelock	pointer
)	O
(	O
mu_locker_t	pointer
)	O
;	O
int	O
(	O
*	O
lock	pointer
)	O
(	O
mu_locker_t	pointer
,	O
enum	O
mu_locker_mode	enum
)	O
;	O
int	O
(	O
*	O
unlock	pointer
)	O
(	O
mu_locker_t	pointer
)	O
;	O
}	O
;	O
static	O
int	O
init_dotlock	function
(	O
mu_locker_t	pointer
)	O
;	O
static	O
void	O
destroy_dotlock	function
(	O
mu_locker_t	pointer
)	O
;	O
static	O
int	O
lock_dotlock	function
(	O
mu_locker_t	pointer
,	O
enum	O
mu_locker_mode	enum
)	O
;	O
static	O
int	O
unlock_dotlock	function
(	O
mu_locker_t	pointer
)	O
;	O
static	O
int	O
init_external	function
(	O
mu_locker_t	pointer
)	O
;	O
static	O
void	O
destroy_external	function
(	O
mu_locker_t	pointer
)	O
;	O
static	O
int	O
lock_external	function
(	O
mu_locker_t	pointer
,	O
enum	O
mu_locker_mode	enum
)	O
;	O
static	O
int	O
unlock_external	function
(	O
mu_locker_t	pointer
)	O
;	O
static	O
int	O
init_kernel	function
(	O
mu_locker_t	pointer
)	O
;	O
static	O
int	O
lock_kernel	function
(	O
mu_locker_t	pointer
,	O
enum	O
mu_locker_mode	enum
)	O
;	O
static	O
int	O
unlock_kernel	function
(	O
mu_locker_t	pointer
)	O
;	O
static	O
int	O
prelock_common	function
(	O
mu_locker_t	pointer
)	O
;	O
static	O
struct	O
locker_tab	struct
locker_tab	struct
[	O
]	O
=	O
{	O
{	O
init_dotlock	function
,	O
destroy_dotlock	function
,	O
prelock_common	function
,	O
lock_dotlock	function
,	O
unlock_dotlock	function
}	O
,	O
{	O
init_external	function
,	O
destroy_external	function
,	O
prelock_common	function
,	O
lock_external	function
,	O
unlock_external	function
}	O
,	O
{	O
init_kernel	function
,	O
NULL	O
,	O
NULL	O
,	O
lock_kernel	function
,	O
unlock_kernel	function
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
static	O
int	O
stat_check	function
(	O
const	O
char	O
*	O
file	pointer
,	O
int	O
fd	int
,	O
int	O
links	int
)	O
{	O
struct	O
stat	struct
fn_stat	struct
;	O
struct	O
stat	struct
fd_stat	struct
;	O
int	O
err	long
=	O
0	int
;	O
int	O
localfd	int
=	O
-	O
1	int
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
localfd	int
=	O
open	function
(	O
file	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
localfd	int
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
fd	int
=	O
localfd	int
;	O
}	O
if	O
(	O
lstat	function
(	O
file	pointer
,	O
&	O
fn_stat	struct
)	O
||	O
fstat	function
(	O
fd	int
,	O
&	O
fd_stat	struct
)	O
)	O
err	long
=	O
errno	O
;	O
else	O
{	O
CHK	O
(	O
!	O
S_ISREG	O
(	O
fn_stat	struct
.	O
st_mode	int
)	O
)	O
;	O
CHK	O
(	O
!	O
S_ISREG	O
(	O
fd_stat	struct
.	O
st_mode	int
)	O
)	O
;	O
CHK	O
(	O
fn_stat	struct
.	O
st_nlink	long
!=	O
links	int
)	O
;	O
CHK	O
(	O
fn_stat	struct
.	O
st_dev	long
!=	O
fd_stat	struct
.	O
st_dev	long
)	O
;	O
CHK	O
(	O
fn_stat	struct
.	O
st_ino	long
!=	O
fd_stat	struct
.	O
st_ino	long
)	O
;	O
CHK	O
(	O
fn_stat	struct
.	O
st_mode	int
!=	O
fd_stat	struct
.	O
st_mode	int
)	O
;	O
CHK	O
(	O
fn_stat	struct
.	O
st_nlink	long
!=	O
fd_stat	struct
.	O
st_nlink	long
)	O
;	O
CHK	O
(	O
fn_stat	struct
.	O
st_uid	int
!=	O
fd_stat	struct
.	O
st_uid	int
)	O
;	O
CHK	O
(	O
fn_stat	struct
.	O
st_gid	int
!=	O
fd_stat	struct
.	O
st_gid	int
)	O
;	O
CHK	O
(	O
fn_stat	struct
.	O
st_rdev	long
!=	O
fd_stat	struct
.	O
st_rdev	long
)	O
;	O
}	O
if	O
(	O
localfd	int
!=	O
-	O
1	int
)	O
close	pointer
(	O
localfd	int
)	O
;	O
return	O
err	long
;	O
}	O
static	O
int	O
check_file_permissions	function
(	O
const	O
char	O
*	O
file	pointer
)	O
{	O
int	O
fd	int
=	O
-	O
1	int
;	O
int	O
err	long
=	O
0	int
;	O
if	O
(	O
(	O
fd	int
=	O
open	function
(	O
file	pointer
,	O
O_RDONLY	int
)	O
)	O
==	O
-	O
1	int
)	O
return	O
errno	O
==	O
ENOENT	int
?	O
0	int
:	O
errno	O
;	O
err	long
=	O
stat_check	function
(	O
file	pointer
,	O
fd	int
,	O
1	int
)	O
;	O
close	pointer
(	O
fd	int
)	O
;	O
fd	int
=	O
-	O
1	int
;	O
if	O
(	O
err	long
)	O
{	O
if	O
(	O
err	long
==	O
EINVAL	int
)	O
err	long
=	O
MU_ERR_LOCK_BAD_FILE	O
;	O
return	O
err	long
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
prelock_common	function
(	O
mu_locker_t	pointer
locker	pointer
)	O
{	O
return	O
check_file_permissions	function
(	O
locker	pointer
->	O
file	pointer
)	O
;	O
}	O
static	O
int	O
mu_locker_default_flags	int
=	O
MU_LOCKER_DEFAULT	O
;	O
static	O
time_t	long
mu_locker_retry_timeout	long
=	O
MU_LOCKER_RETRY_SLEEP	O
;	O
static	O
size_t	long
mu_locker_retry_count	long
=	O
MU_LOCKER_RETRIES	O
;	O
static	O
time_t	long
mu_locker_expire_timeout	long
=	O
MU_LOCKER_EXPIRE_TIME	O
;	O
static	O
char	O
*	O
mu_locker_external_program	pointer
=	O
NULL	O
;	O
int	O
mu_locker_set_default_flags	function
(	O
int	O
flags	int
,	O
enum	O
mu_locker_set_mode	enum
mode	enum
)	O
{	O
switch	O
(	O
mode	enum
)	O
{	O
case	O
mu_locker_assign	int
:	O
mu_locker_default_flags	int
=	O
flags	int
;	O
break	O
;	O
case	O
mu_locker_set_bit	int
:	O
mu_locker_default_flags	int
|=	O
flags	int
;	O
break	O
;	O
case	O
mu_locker_clear_bit	int
:	O
mu_locker_default_flags	int
&=	O
~	O
flags	int
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
mu_locker_set_default_retry_timeout	function
(	O
time_t	long
to	long
)	O
{	O
mu_locker_retry_timeout	long
=	O
to	long
;	O
}	O
void	O
mu_locker_set_default_retry_count	function
(	O
size_t	long
n	long
)	O
{	O
mu_locker_retry_count	long
=	O
n	long
;	O
}	O
void	O
mu_locker_set_default_expire_timeout	function
(	O
time_t	long
t	long
)	O
{	O
mu_locker_expire_timeout	long
=	O
t	long
;	O
}	O
int	O
mu_locker_set_default_external_program	function
(	O
char	O
const	O
*	O
path	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
strdup	function
(	O
path	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
free	function
(	O
mu_locker_external_program	pointer
)	O
;	O
mu_locker_external_program	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_mod_flags	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
int	O
flags	int
,	O
enum	O
mu_locker_set_mode	enum
mode	enum
)	O
{	O
unsigned	O
otype	int
,	O
ntype	int
;	O
int	O
new_flags	int
;	O
if	O
(	O
!	O
locker	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
switch	O
(	O
mode	enum
)	O
{	O
case	O
mu_locker_assign	int
:	O
new_flags	int
=	O
flags	int
;	O
break	O
;	O
case	O
mu_locker_set_bit	int
:	O
new_flags	int
=	O
locker	pointer
->	O
flags	int
|	O
flags	int
;	O
break	O
;	O
case	O
mu_locker_clear_bit	int
:	O
new_flags	int
=	O
locker	pointer
->	O
flags	int
&	O
~	O
flags	int
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
otype	int
=	O
MU_LOCKER_TYPE	O
(	O
locker	pointer
)	O
;	O
if	O
(	O
otype	int
>=	O
MU_LOCKER_NTYPES	O
)	O
return	O
EINVAL	int
;	O
ntype	int
=	O
MU_LOCKER_FLAG_TO_TYPE	O
(	O
new_flags	int
)	O
;	O
if	O
(	O
ntype	int
>=	O
MU_LOCKER_NTYPES	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
ntype	int
!=	O
otype	int
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
locker_tab	struct
[	O
otype	int
]	O
.	O
destroy	pointer
)	O
locker_tab	struct
[	O
otype	int
]	O
.	O
destroy	pointer
(	O
locker	pointer
)	O
;	O
locker	pointer
->	O
flags	int
=	O
new_flags	int
;	O
if	O
(	O
locker_tab	struct
[	O
ntype	int
]	O
.	O
init	pointer
)	O
{	O
rc	int
=	O
locker_tab	struct
[	O
ntype	int
]	O
.	O
init	pointer
(	O
locker	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
locker	pointer
->	O
flags	int
=	O
MU_LOCKER_NULL	O
;	O
return	O
rc	int
;	O
}	O
}	O
else	O
locker	pointer
->	O
flags	int
=	O
new_flags	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_set_flags	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
int	O
flags	int
)	O
{	O
return	O
mu_locker_mod_flags	function
(	O
locker	pointer
,	O
flags	int
,	O
mu_locker_assign	int
)	O
;	O
}	O
int	O
mu_locker_set_expire_time	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
int	O
etime	int
)	O
{	O
if	O
(	O
!	O
locker	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
etime	int
<=	O
0	int
)	O
return	O
EINVAL	int
;	O
locker	pointer
->	O
expire_time	int
=	O
etime	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_set_retries	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
int	O
retries	int
)	O
{	O
if	O
(	O
!	O
locker	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
retries	int
<=	O
0	int
)	O
return	O
EINVAL	int
;	O
locker	pointer
->	O
retries	int
=	O
retries	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_set_retry_sleep	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
int	O
retry_sleep	int
)	O
{	O
if	O
(	O
!	O
locker	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
retry_sleep	int
<=	O
0	int
)	O
return	O
EINVAL	int
;	O
locker	pointer
->	O
retry_sleep	int
=	O
retry_sleep	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_set_external	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
const	O
char	O
*	O
program	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
locker	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
MU_LOCKER_TYPE	O
(	O
locker	pointer
)	O
!=	O
MU_LOCKER_TYPE_EXTERNAL	int
)	O
return	O
EINVAL	int
;	O
if	O
(	O
program	pointer
!=	O
0	int
)	O
{	O
p	pointer
=	O
strdup	function
(	O
program	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
}	O
free	function
(	O
locker	pointer
->	O
data	pointer
.	O
external	struct
.	O
name	pointer
)	O
;	O
locker	pointer
->	O
data	pointer
.	O
external	struct
.	O
name	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_get_flags	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
int	O
*	O
flags	int
)	O
{	O
if	O
(	O
!	O
locker	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
!	O
flags	int
)	O
return	O
EINVAL	int
;	O
*	O
flags	int
=	O
locker	pointer
->	O
flags	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_get_expire_time	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
int	O
*	O
ptime	pointer
)	O
{	O
if	O
(	O
!	O
locker	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
!	O
ptime	pointer
)	O
return	O
EINVAL	int
;	O
*	O
ptime	pointer
=	O
locker	pointer
->	O
expire_time	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_get_retries	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
int	O
*	O
retries	int
)	O
{	O
if	O
(	O
!	O
locker	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
!	O
retries	int
)	O
return	O
EINVAL	int
;	O
*	O
retries	int
=	O
locker	pointer
->	O
retries	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_get_retry_sleep	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
int	O
*	O
retry_sleep	int
)	O
{	O
if	O
(	O
!	O
locker	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
!	O
retry_sleep	int
)	O
return	O
EINVAL	int
;	O
*	O
retry_sleep	int
=	O
locker	pointer
->	O
retry_sleep	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_locker_create	function
(	O
mu_locker_t	pointer
*	O
plocker	pointer
,	O
const	O
char	O
*	O
fname	pointer
,	O
int	O
flags	int
)	O
{	O
unsigned	O
type	enum
;	O
mu_locker_t	pointer
l	pointer
;	O
char	O
*	O
filename	pointer
;	O
int	O
err	long
=	O
0	int
;	O
if	O
(	O
plocker	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
fname	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
(	O
err	long
=	O
mu_unroll_symlink	function
(	O
fname	pointer
,	O
&	O
filename	pointer
)	O
)	O
)	O
{	O
if	O
(	O
err	long
==	O
ENOENT	int
)	O
{	O
char	O
*	O
p	pointer
,	O
*	O
new_name	pointer
,	O
*	O
tmp	pointer
=	O
strdup	function
(	O
fname	pointer
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
ENOMEM	int
;	O
p	pointer
=	O
strrchr	function
(	O
tmp	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
filename	pointer
=	O
tmp	pointer
;	O
else	O
{	O
*	O
p	pointer
=	O
0	int
;	O
err	long
=	O
mu_unroll_symlink	function
(	O
tmp	pointer
,	O
&	O
filename	pointer
)	O
;	O
if	O
(	O
err	long
)	O
{	O
free	function
(	O
tmp	pointer
)	O
;	O
return	O
err	long
;	O
}	O
new_name	pointer
=	O
mu_make_file_name_suf	function
(	O
filename	pointer
,	O
p	pointer
+	O
1	int
,	O
NULL	O
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
free	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
new_name	pointer
)	O
return	O
ENOMEM	int
;	O
filename	pointer
=	O
new_name	pointer
;	O
}	O
}	O
else	O
return	O
err	long
;	O
}	O
l	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
l	pointer
)	O
)	O
;	O
if	O
(	O
l	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
filename	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
l	pointer
->	O
file	pointer
=	O
filename	pointer
;	O
if	O
(	O
l	pointer
->	O
file	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
l	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
filename	pointer
,	O
"/dev/null"	pointer
)	O
==	O
0	int
)	O
l	pointer
->	O
flags	int
=	O
MU_LOCKER_NULL	O
;	O
else	O
if	O
(	O
flags	int
)	O
l	pointer
->	O
flags	int
=	O
flags	int
;	O
else	O
l	pointer
->	O
flags	int
=	O
mu_locker_default_flags	int
;	O
l	pointer
->	O
expire_time	int
=	O
mu_locker_expire_timeout	long
;	O
l	pointer
->	O
retries	int
=	O
mu_locker_retry_count	long
;	O
l	pointer
->	O
retry_sleep	int
=	O
mu_locker_retry_timeout	long
;	O
type	enum
=	O
MU_LOCKER_TYPE	O
(	O
l	pointer
)	O
;	O
if	O
(	O
type	enum
>=	O
MU_LOCKER_NTYPES	O
)	O
{	O
free	function
(	O
l	pointer
->	O
file	pointer
)	O
;	O
return	O
EINVAL	int
;	O
}	O
err	long
=	O
locker_tab	struct
[	O
type	enum
]	O
.	O
init	pointer
?	O
locker_tab	struct
[	O
type	enum
]	O
.	O
init	pointer
(	O
l	pointer
)	O
:	O
0	int
;	O
if	O
(	O
err	long
)	O
{	O
mu_locker_destroy	function
(	O
&	O
l	pointer
)	O
;	O
return	O
err	long
;	O
}	O
*	O
plocker	pointer
=	O
l	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_locker_destroy	function
(	O
mu_locker_t	pointer
*	O
plocker	pointer
)	O
{	O
if	O
(	O
plocker	pointer
&&	O
*	O
plocker	pointer
)	O
{	O
unsigned	O
type	enum
=	O
MU_LOCKER_TYPE	O
(	O
*	O
plocker	pointer
)	O
;	O
if	O
(	O
type	enum
<	O
MU_LOCKER_NTYPES	O
)	O
{	O
if	O
(	O
locker_tab	struct
[	O
type	enum
]	O
.	O
destroy	pointer
)	O
locker_tab	struct
[	O
type	enum
]	O
.	O
destroy	pointer
(	O
*	O
plocker	pointer
)	O
;	O
free	function
(	O
(	O
*	O
plocker	pointer
)	O
->	O
file	pointer
)	O
;	O
free	function
(	O
*	O
plocker	pointer
)	O
;	O
*	O
plocker	pointer
=	O
NULL	O
;	O
}	O
}	O
}	O
int	O
mu_locker_lock_mode	function
(	O
mu_locker_t	pointer
lock	pointer
,	O
enum	O
mu_locker_mode	enum
mode	enum
)	O
{	O
int	O
rc	int
;	O
unsigned	O
type	enum
;	O
unsigned	O
retries	int
=	O
1	int
;	O
if	O
(	O
lock	pointer
==	O
NULL	O
||	O
(	O
type	enum
=	O
MU_LOCKER_TYPE	O
(	O
lock	pointer
)	O
)	O
>=	O
MU_LOCKER_NTYPES	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
locker_tab	struct
[	O
type	enum
]	O
.	O
prelock	pointer
&&	O
(	O
rc	int
=	O
locker_tab	struct
[	O
type	enum
]	O
.	O
prelock	pointer
(	O
lock	pointer
)	O
)	O
)	O
return	O
rc	int
;	O
if	O
(	O
lock	pointer
->	O
refcnt	int
>	O
0	int
)	O
{	O
lock	pointer
->	O
refcnt	int
++	O
;	O
if	O
(	O
mode	enum
==	O
lock	pointer
->	O
mode	enum
)	O
return	O
0	int
;	O
}	O
lock	pointer
->	O
mode	enum
=	O
mode	enum
;	O
if	O
(	O
lock	pointer
->	O
flags	int
&	O
MU_LOCKER_RETRY	int
)	O
retries	int
=	O
lock	pointer
->	O
retries	int
;	O
if	O
(	O
locker_tab	struct
[	O
type	enum
]	O
.	O
lock	pointer
)	O
{	O
while	O
(	O
retries	int
--	O
)	O
{	O
rc	int
=	O
locker_tab	struct
[	O
type	enum
]	O
.	O
lock	pointer
(	O
lock	pointer
,	O
mode	enum
)	O
;	O
if	O
(	O
rc	int
==	O
EAGAIN	int
&&	O
retries	int
)	O
{	O
sleep	function
(	O
lock	pointer
->	O
retry_sleep	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
lock	pointer
->	O
refcnt	int
++	O
;	O
break	O
;	O
}	O
}	O
else	O
rc	int
=	O
0	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_locker_lock	function
(	O
mu_locker_t	pointer
lock	pointer
)	O
{	O
return	O
mu_locker_lock_mode	function
(	O
lock	pointer
,	O
mu_lck_exc	int
)	O
;	O
}	O
int	O
mu_locker_unlock	function
(	O
mu_locker_t	pointer
lock	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
unsigned	O
type	enum
;	O
if	O
(	O
!	O
lock	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
lock	pointer
->	O
refcnt	int
==	O
0	int
)	O
return	O
MU_ERR_LOCK_NOT_HELD	O
;	O
if	O
(	O
(	O
rc	int
=	O
check_file_permissions	function
(	O
lock	pointer
->	O
file	pointer
)	O
)	O
)	O
return	O
rc	int
;	O
if	O
(	O
--	O
lock	pointer
->	O
refcnt	int
>	O
0	int
)	O
return	O
0	int
;	O
type	enum
=	O
MU_LOCKER_TYPE	O
(	O
lock	pointer
)	O
;	O
if	O
(	O
locker_tab	struct
[	O
type	enum
]	O
.	O
unlock	pointer
)	O
rc	int
=	O
locker_tab	struct
[	O
type	enum
]	O
.	O
unlock	pointer
(	O
lock	pointer
)	O
;	O
else	O
rc	int
=	O
0	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_locker_remove_lock	function
(	O
mu_locker_t	pointer
lock	pointer
)	O
{	O
if	O
(	O
!	O
lock	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
lock	pointer
->	O
refcnt	int
=	O
1	int
;	O
return	O
mu_locker_unlock	function
(	O
lock	pointer
)	O
;	O
}	O
static	O
void	O
expire_stale_lock	function
(	O
mu_locker_t	pointer
lock	pointer
)	O
{	O
int	O
stale	int
=	O
0	int
;	O
int	O
fd	int
=	O
open	function
(	O
lock	pointer
->	O
data	pointer
.	O
dot	struct
.	O
dotlock	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
;	O
if	O
(	O
lock	pointer
->	O
flags	int
&	O
MU_LOCKER_PID	int
)	O
{	O
char	O
buf	pointer
[	O
16	int
]	O
;	O
pid_t	int
pid	int
;	O
int	O
nread	int
=	O
read	pointer
(	O
fd	int
,	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
-	O
1	int
)	O
;	O
if	O
(	O
nread	int
>	O
0	int
)	O
{	O
buf	pointer
[	O
nread	int
]	O
=	O
'\0'	O
;	O
pid	int
=	O
strtol	function
(	O
buf	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
pid	int
>	O
0	int
)	O
{	O
if	O
(	O
kill	function
(	O
pid	int
,	O
0	int
)	O
==	O
-	O
1	int
)	O
stale	int
=	O
1	int
;	O
}	O
else	O
stale	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
lock	pointer
->	O
flags	int
&	O
MU_LOCKER_TIME	int
)	O
{	O
struct	O
stat	struct
stbuf	struct
;	O
fstat	function
(	O
fd	int
,	O
&	O
stbuf	struct
)	O
;	O
if	O
(	O
(	O
time	struct
(	O
NULL	O
)	O
-	O
stbuf	struct
.	O
st_mtime	O
)	O
>	O
lock	pointer
->	O
expire_time	int
)	O
stale	int
=	O
1	int
;	O
}	O
close	pointer
(	O
fd	int
)	O
;	O
if	O
(	O
stale	int
)	O
unlink	function
(	O
lock	pointer
->	O
data	pointer
.	O
dot	struct
.	O
dotlock	pointer
)	O
;	O
}	O
static	O
int	O
init_dotlock	function
(	O
mu_locker_t	pointer
locker	pointer
)	O
{	O
char	O
*	O
tmp	pointer
,	O
*	O
p	pointer
;	O
tmp	pointer
=	O
strdup	function
(	O
locker	pointer
->	O
file	pointer
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
ENOMEM	int
;	O
strcpy	function
(	O
tmp	pointer
,	O
locker	pointer
->	O
file	pointer
)	O
;	O
p	pointer
=	O
strrchr	function
(	O
tmp	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
free	function
(	O
tmp	pointer
)	O
;	O
tmp	pointer
=	O
strdup	function
(	O
"."	pointer
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
ENOMEM	int
;	O
}	O
else	O
*	O
p	pointer
=	O
0	int
;	O
if	O
(	O
access	function
(	O
tmp	pointer
,	O
W_OK	int
)	O
)	O
{	O
free	function
(	O
tmp	pointer
)	O
;	O
return	O
mu_locker_set_flags	function
(	O
locker	pointer
,	O
MU_LOCKER_KERNEL	O
|	O
MU_LOCKER_OPTIONS	O
(	O
locker	pointer
->	O
flags	int
)	O
)	O
;	O
}	O
free	function
(	O
tmp	pointer
)	O
;	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
dotlock	pointer
=	O
malloc	function
(	O
strlen	function
(	O
locker	pointer
->	O
file	pointer
)	O
+	O
sizeof	O
(	O
DOTLOCK_SUFFIX	pointer
)	O
)	O
;	O
if	O
(	O
!	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
dotlock	pointer
)	O
return	O
ENOMEM	int
;	O
strcpy	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
dotlock	pointer
,	O
locker	pointer
->	O
file	pointer
)	O
;	O
strcat	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
dotlock	pointer
,	O
DOTLOCK_SUFFIX	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
destroy_dotlock	function
(	O
mu_locker_t	pointer
locker	pointer
)	O
{	O
free	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
dotlock	pointer
)	O
;	O
free	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
)	O
;	O
}	O
static	O
int	O
lock_dotlock	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
enum	O
mu_locker_mode	enum
mode	enum
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
host	pointer
=	O
NULL	O
;	O
char	O
pid	int
[	O
11	int
]	O
;	O
char	O
now	array
[	O
11	int
]	O
;	O
size_t	long
sz	long
=	O
0	int
;	O
int	O
err	long
=	O
0	int
;	O
int	O
fd	int
;	O
if	O
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
)	O
{	O
unlink	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
)	O
;	O
free	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
)	O
;	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
=	O
NULL	O
;	O
}	O
expire_stale_lock	function
(	O
locker	pointer
)	O
;	O
rc	int
=	O
mu_get_host_name	function
(	O
&	O
host	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
snprintf	function
(	O
now	array
,	O
sizeof	O
(	O
now	array
)	O
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
time	struct
(	O
0	int
)	O
)	O
;	O
now	array
[	O
sizeof	O
(	O
now	array
)	O
-	O
1	int
]	O
=	O
0	int
;	O
snprintf	function
(	O
pid	int
,	O
sizeof	O
(	O
pid	int
)	O
,	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
getpid	function
(	O
)	O
)	O
;	O
pid	int
[	O
sizeof	O
(	O
pid	int
)	O
-	O
1	int
]	O
=	O
0	int
;	O
sz	long
=	O
strlen	function
(	O
locker	pointer
->	O
file	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
pid	int
)	O
+	O
1	int
+	O
strlen	function
(	O
now	array
)	O
+	O
1	int
+	O
strlen	function
(	O
host	pointer
)	O
+	O
1	int
;	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
=	O
malloc	function
(	O
sz	long
)	O
;	O
if	O
(	O
!	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
)	O
{	O
free	function
(	O
host	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
snprintf	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
,	O
sz	long
,	O
"%s.%s.%s.%s"	pointer
,	O
locker	pointer
->	O
file	pointer
,	O
pid	int
,	O
now	array
,	O
host	pointer
)	O
;	O
free	function
(	O
host	pointer
)	O
;	O
fd	int
=	O
open	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
,	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_EXCL	int
,	O
LOCKFILE_ATTR	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EEXIST	int
)	O
return	O
EAGAIN	int
;	O
else	O
return	O
errno	O
;	O
}	O
close	pointer
(	O
fd	int
)	O
;	O
if	O
(	O
link	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
,	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
dotlock	pointer
)	O
==	O
-	O
1	int
)	O
{	O
unlink	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
)	O
;	O
if	O
(	O
errno	O
==	O
EEXIST	int
)	O
return	O
MU_ERR_LOCK_CONFLICT	O
;	O
return	O
errno	O
;	O
}	O
if	O
(	O
(	O
fd	int
=	O
open	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
dotlock	pointer
,	O
O_RDWR	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
unlink	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
)	O
;	O
return	O
errno	O
;	O
}	O
err	long
=	O
stat_check	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
,	O
fd	int
,	O
2	int
)	O
;	O
if	O
(	O
err	long
)	O
{	O
unlink	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
)	O
;	O
if	O
(	O
err	long
==	O
EINVAL	int
)	O
return	O
MU_ERR_LOCK_BAD_LOCK	O
;	O
return	O
errno	O
;	O
}	O
unlink	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
nfslock	pointer
)	O
;	O
assert	O
(	O
locker	pointer
->	O
refcnt	int
==	O
0	int
)	O
;	O
if	O
(	O
locker	pointer
->	O
flags	int
&	O
MU_LOCKER_PID	int
)	O
{	O
char	O
buf	pointer
[	O
16	int
]	O
;	O
sprintf	function
(	O
buf	pointer
,	O
"%ld"	pointer
,	O
(	O
long	O
)	O
getpid	function
(	O
)	O
)	O
;	O
write	pointer
(	O
fd	int
,	O
buf	pointer
,	O
strlen	function
(	O
buf	pointer
)	O
)	O
;	O
}	O
close	pointer
(	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
unlock_dotlock	function
(	O
mu_locker_t	pointer
locker	pointer
)	O
{	O
if	O
(	O
unlink	function
(	O
locker	pointer
->	O
data	pointer
.	O
dot	struct
.	O
dotlock	pointer
)	O
==	O
-	O
1	int
)	O
{	O
int	O
err	long
=	O
errno	O
;	O
if	O
(	O
err	long
==	O
ENOENT	int
)	O
{	O
locker	pointer
->	O
refcnt	int
=	O
0	int
;	O
err	long
=	O
MU_ERR_LOCK_NOT_HELD	O
;	O
return	O
err	long
;	O
}	O
return	O
err	long
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_locker_touchlock	function
(	O
mu_locker_t	pointer
lock	pointer
)	O
{	O
if	O
(	O
!	O
lock	pointer
)	O
return	O
MU_ERR_LOCKER_NULL	O
;	O
if	O
(	O
MU_LOCKER_TYPE	O
(	O
lock	pointer
)	O
!=	O
MU_LOCKER_TYPE_DOTLOCK	int
)	O
return	O
0	int
;	O
if	O
(	O
lock	pointer
->	O
refcnt	int
>	O
0	int
)	O
return	O
utime	function
(	O
lock	pointer
->	O
data	pointer
.	O
dot	struct
.	O
dotlock	pointer
,	O
NULL	O
)	O
;	O
return	O
MU_ERR_LOCK_NOT_HELD	O
;	O
}	O
static	O
int	O
init_kernel	function
(	O
mu_locker_t	pointer
locker	pointer
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
lock_kernel	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
enum	O
mu_locker_mode	enum
mode	enum
)	O
{	O
int	O
fd	int
;	O
struct	O
flock	struct
fl	struct
;	O
switch	O
(	O
mode	enum
)	O
{	O
case	O
mu_lck_shr	int
:	O
case	O
mu_lck_opt	int
:	O
mode	enum
=	O
O_RDONLY	int
;	O
fl	struct
.	O
l_type	short
=	O
F_RDLCK	int
;	O
break	O
;	O
case	O
mu_lck_exc	int
:	O
mode	enum
=	O
O_RDWR	int
;	O
fl	struct
.	O
l_type	short
=	O
F_WRLCK	int
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
fd	int
=	O
open	function
(	O
locker	pointer
->	O
file	pointer
,	O
O_RDWR	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
locker	pointer
->	O
data	pointer
.	O
kernel	struct
.	O
fd	int
=	O
fd	int
;	O
fl	struct
.	O
l_whence	short
=	O
SEEK_SET	int
;	O
fl	struct
.	O
l_start	long
=	O
0	int
;	O
fl	struct
.	O
l_len	long
=	O
0	int
;	O
if	O
(	O
fcntl	function
(	O
fd	int
,	O
F_SETLK	int
,	O
&	O
fl	struct
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
EAGAIN	int
)	O
return	O
EAGAIN	int
;	O
return	O
errno	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
unlock_kernel	function
(	O
mu_locker_t	pointer
locker	pointer
)	O
{	O
struct	O
flock	struct
fl	struct
;	O
fl	struct
.	O
l_type	short
=	O
F_UNLCK	int
;	O
fl	struct
.	O
l_whence	short
=	O
SEEK_SET	int
;	O
fl	struct
.	O
l_start	long
=	O
0	int
;	O
fl	struct
.	O
l_len	long
=	O
0	int
;	O
if	O
(	O
fcntl	function
(	O
locker	pointer
->	O
data	pointer
.	O
kernel	struct
.	O
fd	int
,	O
F_SETLK	int
,	O
&	O
fl	struct
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
EAGAIN	int
)	O
return	O
EAGAIN	int
;	O
return	O
errno	O
;	O
}	O
close	pointer
(	O
locker	pointer
->	O
data	pointer
.	O
kernel	struct
.	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
init_external	function
(	O
mu_locker_t	pointer
locker	pointer
)	O
{	O
if	O
(	O
!	O
(	O
locker	pointer
->	O
data	pointer
.	O
external	struct
.	O
name	pointer
=	O
strdup	function
(	O
mu_locker_external_program	pointer
?	O
mu_locker_external_program	pointer
:	O
MU_LOCKER_EXTERNAL_PROGRAM	pointer
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
destroy_external	function
(	O
mu_locker_t	pointer
locker	pointer
)	O
{	O
free	function
(	O
locker	pointer
->	O
data	pointer
.	O
external	struct
.	O
name	pointer
)	O
;	O
}	O
static	O
int	O
external_locker	function
(	O
mu_locker_t	pointer
l	pointer
,	O
int	O
lock	pointer
)	O
{	O
int	O
err	long
=	O
0	int
;	O
char	O
*	O
av	array
[	O
6	int
]	O
;	O
int	O
ac	int
=	O
0	int
;	O
char	O
aforce	array
[	O
3	int
+	O
DEC_DIGS_PER_INT	O
+	O
1	int
]	O
;	O
char	O
aretry	array
[	O
3	int
+	O
DEC_DIGS_PER_INT	O
+	O
1	int
]	O
;	O
int	O
status	int
=	O
0	int
;	O
assert	O
(	O
l	pointer
)	O
;	O
assert	O
(	O
l	pointer
->	O
flags	int
&	O
MU_LOCKER_EXTERNAL	O
)	O
;	O
assert	O
(	O
lock	pointer
==	O
!	O
l	pointer
->	O
refcnt	int
)	O
;	O
av	array
[	O
ac	int
++	O
]	O
=	O
l	pointer
->	O
data	pointer
.	O
external	struct
.	O
name	pointer
?	O
l	pointer
->	O
data	pointer
.	O
external	struct
.	O
name	pointer
:	O
MU_LOCKER_EXTERNAL_PROGRAM	pointer
;	O
if	O
(	O
l	pointer
->	O
flags	int
&	O
MU_LOCKER_TIME	int
)	O
{	O
snprintf	function
(	O
aforce	array
,	O
sizeof	O
(	O
aforce	array
)	O
,	O
"-f%d"	pointer
,	O
l	pointer
->	O
expire_time	int
)	O
;	O
aforce	array
[	O
sizeof	O
(	O
aforce	array
)	O
-	O
1	int
]	O
=	O
0	int
;	O
av	array
[	O
ac	int
++	O
]	O
=	O
aforce	array
;	O
}	O
if	O
(	O
l	pointer
->	O
flags	int
&	O
MU_LOCKER_RETRY	int
)	O
{	O
snprintf	function
(	O
aretry	array
,	O
sizeof	O
(	O
aretry	array
)	O
,	O
"-r%d"	pointer
,	O
l	pointer
->	O
retries	int
)	O
;	O
aretry	array
[	O
sizeof	O
(	O
aretry	array
)	O
-	O
1	int
]	O
=	O
0	int
;	O
av	array
[	O
ac	int
++	O
]	O
=	O
aretry	array
;	O
}	O
if	O
(	O
!	O
lock	pointer
)	O
av	array
[	O
ac	int
++	O
]	O
=	O
"-u"	pointer
;	O
av	array
[	O
ac	int
++	O
]	O
=	O
l	pointer
->	O
file	pointer
;	O
av	array
[	O
ac	int
++	O
]	O
=	O
NULL	O
;	O
if	O
(	O
(	O
err	long
=	O
mu_spawnvp	function
(	O
av	array
[	O
0	int
]	O
,	O
av	array
,	O
&	O
status	int
)	O
)	O
)	O
return	O
err	long
;	O
if	O
(	O
!	O
WIFEXITED	O
(	O
status	int
)	O
)	O
{	O
err	long
=	O
MU_ERR_LOCK_EXT_KILLED	O
;	O
}	O
else	O
{	O
switch	O
(	O
WEXITSTATUS	O
(	O
status	int
)	O
)	O
{	O
case	O
127	int
:	O
err	long
=	O
MU_ERR_LOCK_EXT_FAIL	O
;	O
break	O
;	O
case	O
MU_DL_EX_OK	int
:	O
err	long
=	O
0	int
;	O
l	pointer
->	O
refcnt	int
=	O
lock	pointer
;	O
break	O
;	O
case	O
MU_DL_EX_NEXIST	int
:	O
err	long
=	O
MU_ERR_LOCK_NOT_HELD	O
;	O
break	O
;	O
case	O
MU_DL_EX_EXIST	int
:	O
err	long
=	O
MU_ERR_LOCK_CONFLICT	O
;	O
break	O
;	O
case	O
MU_DL_EX_PERM	int
:	O
err	long
=	O
EPERM	int
;	O
break	O
;	O
default	O
:	O
case	O
MU_DL_EX_ERROR	int
:	O
err	long
=	O
MU_ERR_LOCK_EXT_ERR	O
;	O
break	O
;	O
}	O
}	O
return	O
err	long
;	O
}	O
static	O
int	O
lock_external	function
(	O
mu_locker_t	pointer
locker	pointer
,	O
enum	O
mu_locker_mode	enum
mode	enum
)	O
{	O
return	O
external_locker	function
(	O
locker	pointer
,	O
1	int
)	O
;	O
}	O
static	O
int	O
unlock_external	function
(	O
mu_locker_t	pointer
locker	pointer
)	O
{	O
return	O
external_locker	function
(	O
locker	pointer
,	O
0	int
)	O
;	O
}	O
