error_t	function
store_std_leaf_decode	function
(	O
struct	O
store_enc	struct
*	O
enc	pointer
,	O
store_std_leaf_create_t	pointer
create	pointer
,	O
struct	O
store	struct
*	O
*	O
store	struct
)	O
{	O
char	O
*	O
misc	pointer
,	O
*	O
name	pointer
;	O
error_t	function
err	function
;	O
int	O
flags	int
;	O
mach_port_t	O
port	int
;	O
size_t	long
block_size	long
,	O
num_runs	long
,	O
name_len	long
,	O
misc_len	long
;	O
error_t	function
call_create	O
(	O
const	O
struct	O
store_run	struct
*	O
runs	pointer
,	O
size_t	long
num_runs	long
)	O
{	O
return	O
(	O
*	O
create	pointer
)	O
(	O
port	int
,	O
flags	int
,	O
block_size	long
,	O
runs	pointer
,	O
num_runs	long
,	O
store	struct
)	O
;	O
}	O
if	O
(	O
enc	pointer
->	O
cur_int	long
+	O
6	int
>	O
enc	pointer
->	O
num_ints	int
||	O
enc	pointer
->	O
cur_port	long
+	O
1	int
>	O
enc	pointer
->	O
num_ports	int
)	O
return	O
EINVAL	O
;	O
enc	pointer
->	O
cur_int	long
++	O
;	O
flags	int
=	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
++	O
]	O
;	O
block_size	long
=	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
++	O
]	O
;	O
num_runs	long
=	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
++	O
]	O
;	O
name_len	long
=	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
++	O
]	O
;	O
misc_len	long
=	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
++	O
]	O
;	O
if	O
(	O
enc	pointer
->	O
cur_offset	long
+	O
num_runs	long
*	O
2	int
>	O
enc	pointer
->	O
num_offsets	int
||	O
enc	pointer
->	O
cur_data	long
+	O
name_len	long
+	O
misc_len	long
>	O
enc	pointer
->	O
data_len	int
)	O
return	O
EINVAL	O
;	O
if	O
(	O
name_len	long
>	O
0	int
&&	O
enc	pointer
->	O
data	pointer
[	O
enc	pointer
->	O
cur_data	long
+	O
name_len	long
-	O
1	int
]	O
!=	O
'\0'	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
name_len	long
>	O
0	int
)	O
{	O
name	pointer
=	O
strdup	function
(	O
enc	pointer
->	O
data	pointer
+	O
enc	pointer
->	O
cur_data	long
)	O
;	O
if	O
(	O
!	O
name	pointer
)	O
return	O
ENOMEM	O
;	O
enc	pointer
->	O
cur_data	long
+=	O
name_len	long
;	O
}	O
else	O
name	pointer
=	O
0	int
;	O
if	O
(	O
misc_len	long
>	O
0	int
)	O
{	O
misc	pointer
=	O
malloc	function
(	O
misc_len	long
)	O
;	O
if	O
(	O
!	O
misc	pointer
)	O
{	O
if	O
(	O
name	pointer
)	O
free	function
(	O
name	pointer
)	O
;	O
return	O
ENOMEM	O
;	O
}	O
memcpy	function
(	O
misc	pointer
,	O
enc	pointer
->	O
data	pointer
+	O
enc	pointer
->	O
cur_data	long
+	O
name_len	long
,	O
misc_len	long
)	O
;	O
enc	pointer
->	O
cur_data	long
+=	O
misc_len	long
;	O
}	O
else	O
misc	pointer
=	O
0	int
;	O
port	int
=	O
enc	pointer
->	O
ports	pointer
[	O
enc	pointer
->	O
cur_port	long
++	O
]	O
;	O
err	function
=	O
store_with_decoded_runs	function
(	O
enc	pointer
,	O
num_runs	long
,	O
call_create	O
)	O
;	O
if	O
(	O
err	function
)	O
{	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
port	int
)	O
;	O
if	O
(	O
misc	pointer
)	O
free	function
(	O
misc	pointer
)	O
;	O
if	O
(	O
name	pointer
)	O
free	function
(	O
name	pointer
)	O
;	O
}	O
else	O
{	O
(	O
*	O
store	struct
)	O
->	O
flags	int
=	O
flags	int
;	O
(	O
*	O
store	struct
)	O
->	O
name	pointer
=	O
name	pointer
;	O
(	O
*	O
store	struct
)	O
->	O
misc	pointer
=	O
misc	pointer
;	O
(	O
*	O
store	struct
)	O
->	O
misc_len	long
=	O
misc_len	long
;	O
}	O
return	O
err	function
;	O
}	O
error_t	function
store_with_decoded_runs	function
(	O
struct	O
store_enc	struct
*	O
enc	pointer
,	O
size_t	long
num_runs	long
,	O
error_t	function
(	O
*	O
fun	pointer
)	O
(	O
const	O
struct	O
store_run	struct
*	O
runs	pointer
,	O
size_t	long
num_runs	long
)	O
)	O
{	O
int	O
i	int
;	O
error_t	function
err	function
;	O
if	O
(	O
num_runs	long
<=	O
MAX_STACK_RUNS	O
)	O
{	O
struct	O
store_run	struct
runs	pointer
[	O
num_runs	long
]	O
;	O
off_t	long
*	O
e	pointer
=	O
enc	pointer
->	O
offsets	pointer
+	O
enc	pointer
->	O
cur_offset	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_runs	long
;	O
i	int
++	O
)	O
{	O
runs	pointer
[	O
i	int
]	O
.	O
start	long
=	O
*	O
e	pointer
++	O
;	O
runs	pointer
[	O
i	int
]	O
.	O
length	long
=	O
*	O
e	pointer
++	O
;	O
}	O
enc	pointer
->	O
cur_offset	long
=	O
e	pointer
-	O
enc	pointer
->	O
offsets	pointer
;	O
err	function
=	O
(	O
*	O
fun	pointer
)	O
(	O
runs	pointer
,	O
num_runs	long
)	O
;	O
}	O
else	O
{	O
struct	O
store_run	struct
*	O
runs	pointer
=	O
malloc	function
(	O
num_runs	long
*	O
sizeof	O
(	O
struct	O
store_run	struct
)	O
)	O
;	O
if	O
(	O
runs	pointer
)	O
{	O
off_t	long
*	O
e	pointer
=	O
enc	pointer
->	O
offsets	pointer
+	O
enc	pointer
->	O
cur_offset	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_runs	long
;	O
i	int
++	O
)	O
{	O
runs	pointer
[	O
i	int
]	O
.	O
start	long
=	O
*	O
e	pointer
++	O
;	O
runs	pointer
[	O
i	int
]	O
.	O
length	long
=	O
*	O
e	pointer
++	O
;	O
}	O
enc	pointer
->	O
cur_offset	long
=	O
e	pointer
-	O
enc	pointer
->	O
offsets	pointer
;	O
err	function
=	O
(	O
*	O
fun	pointer
)	O
(	O
runs	pointer
,	O
num_runs	long
)	O
;	O
free	function
(	O
runs	pointer
)	O
;	O
}	O
else	O
err	function
=	O
ENOMEM	O
;	O
}	O
return	O
err	function
;	O
}	O
error_t	function
store_decode	function
(	O
struct	O
store_enc	struct
*	O
enc	pointer
,	O
const	O
struct	O
store_class	struct
*	O
const	O
*	O
classes	pointer
,	O
struct	O
store	struct
*	O
*	O
store	struct
)	O
{	O
const	O
struct	O
store_class	struct
*	O
const	O
*	O
cl	pointer
;	O
if	O
(	O
enc	pointer
->	O
cur_int	long
>=	O
enc	pointer
->	O
num_ints	int
)	O
return	O
EINVAL	O
;	O
if	O
(	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
]	O
==	O
STORAGE_NETWORK	O
)	O
return	O
store_url_decode	function
(	O
enc	pointer
,	O
classes	pointer
,	O
store	struct
)	O
;	O
for	O
(	O
cl	pointer
=	O
classes	pointer
?	O
:	O
__start_store_std_classes	array
;	O
classes	pointer
?	O
*	O
cl	pointer
!=	O
0	int
:	O
cl	pointer
<	O
__stop_store_std_classes	array
;	O
++	O
cl	pointer
)	O
if	O
(	O
(	O
*	O
cl	pointer
)	O
->	O
id	enum
==	O
enc	pointer
->	O
ints	pointer
[	O
enc	pointer
->	O
cur_int	long
]	O
)	O
{	O
if	O
(	O
(	O
*	O
cl	pointer
)	O
->	O
decode	pointer
)	O
return	O
(	O
*	O
(	O
*	O
cl	pointer
)	O
->	O
decode	pointer
)	O
(	O
enc	pointer
,	O
classes	pointer
,	O
store	struct
)	O
;	O
else	O
return	O
EOPNOTSUPP	O
;	O
}	O
if	O
(	O
!	O
classes	pointer
&&	O
store_module_decode	function
)	O
{	O
error_t	function
err	function
=	O
store_module_decode	function
(	O
enc	pointer
,	O
classes	pointer
,	O
store	struct
)	O
;	O
if	O
(	O
err	function
!=	O
ENOENT	O
)	O
return	O
err	function
;	O
}	O
return	O
EINVAL	O
;	O
}	O
