static	O
const	O
struct	O
{	O
const	O
char	O
*	O
name	pointer
;	O
size_t	long
len	long
;	O
}	O
known_fields	array
[	O
]	O
=	O
{	O
{	O
"Project-Id-Version:"	pointer
,	O
sizeof	O
(	O
"Project-Id-Version:"	pointer
)	O
-	O
1	int
}	O
,	O
{	O
"Report-Msgid-Bugs-To:"	pointer
,	O
sizeof	O
(	O
"Report-Msgid-Bugs-To:"	pointer
)	O
-	O
1	int
}	O
,	O
{	O
"POT-Creation-Date:"	pointer
,	O
sizeof	O
(	O
"POT-Creation-Date:"	pointer
)	O
-	O
1	int
}	O
,	O
{	O
"PO-Revision-Date:"	pointer
,	O
sizeof	O
(	O
"PO-Revision-Date:"	pointer
)	O
-	O
1	int
}	O
,	O
{	O
"Last-Translator:"	pointer
,	O
sizeof	O
(	O
"Last-Translator:"	pointer
)	O
-	O
1	int
}	O
,	O
{	O
"Language-Team:"	pointer
,	O
sizeof	O
(	O
"Language-Team:"	pointer
)	O
-	O
1	int
}	O
,	O
{	O
"Language:"	pointer
,	O
sizeof	O
(	O
"Language:"	pointer
)	O
-	O
1	int
}	O
,	O
{	O
"MIME-Version:"	pointer
,	O
sizeof	O
(	O
"MIME-Version:"	pointer
)	O
-	O
1	int
}	O
,	O
{	O
"Content-Type:"	pointer
,	O
sizeof	O
(	O
"Content-Type:"	pointer
)	O
-	O
1	int
}	O
,	O
{	O
"Content-Transfer-Encoding:"	pointer
,	O
sizeof	O
(	O
"Content-Transfer-Encoding:"	pointer
)	O
-	O
1	int
}	O
}	O
;	O
void	O
msgdomain_list_set_header_field	function
(	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
,	O
const	O
char	O
*	O
field	pointer
,	O
const	O
char	O
*	O
value	pointer
)	O
{	O
size_t	long
field_len	long
;	O
int	O
field_index	int
;	O
size_t	long
k	long
,	O
i	long
;	O
field_len	long
=	O
strlen	function
(	O
field	pointer
)	O
;	O
field_index	int
=	O
-	O
1	int
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
SIZEOF	O
(	O
known_fields	array
)	O
;	O
k	long
++	O
)	O
if	O
(	O
strcmp	function
(	O
known_fields	array
[	O
k	long
]	O
.	O
name	pointer
,	O
field	pointer
)	O
==	O
0	int
)	O
{	O
field_index	int
=	O
k	long
;	O
break	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
i	long
]	O
->	O
messages	pointer
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
&&	O
!	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
obsolete	bool
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
const	O
char	O
*	O
header	pointer
=	O
mp	pointer
->	O
msgstr	pointer
;	O
char	O
*	O
new_header	pointer
=	O
XNMALLOC	O
(	O
strlen	function
(	O
header	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
field	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
value	pointer
)	O
+	O
1	int
+	O
1	int
,	O
char	O
)	O
;	O
const	O
char	O
*	O
h	pointer
;	O
for	O
(	O
h	pointer
=	O
header	pointer
;	O
*	O
h	pointer
!=	O
'\0'	O
;	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
h	pointer
,	O
field	pointer
,	O
field_len	long
)	O
==	O
0	int
)	O
break	O
;	O
h	pointer
=	O
strchr	function
(	O
h	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
h	pointer
==	O
NULL	O
)	O
break	O
;	O
h	pointer
++	O
;	O
}	O
if	O
(	O
h	pointer
!=	O
NULL	O
&&	O
*	O
h	pointer
!=	O
'\0'	O
)	O
{	O
char	O
*	O
p	pointer
=	O
new_header	pointer
;	O
memcpy	function
(	O
p	pointer
,	O
header	pointer
,	O
h	pointer
-	O
header	pointer
)	O
;	O
p	pointer
+=	O
h	pointer
-	O
header	pointer
;	O
p	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
field	pointer
)	O
;	O
p	pointer
=	O
stpcpy	function
(	O
stpcpy	function
(	O
stpcpy	function
(	O
p	pointer
,	O
" "	pointer
)	O
,	O
value	pointer
)	O
,	O
"\n"	pointer
)	O
;	O
h	pointer
=	O
strchr	function
(	O
h	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
h	pointer
!=	O
NULL	O
)	O
{	O
h	pointer
++	O
;	O
stpcpy	function
(	O
p	pointer
,	O
h	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
field_index	int
<	O
0	int
)	O
{	O
char	O
*	O
p	pointer
=	O
new_header	pointer
;	O
p	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
header	pointer
)	O
;	O
if	O
(	O
p	pointer
>	O
new_header	pointer
&&	O
p	pointer
[	O
-	O
1	int
]	O
!=	O
'\n'	O
)	O
*	O
p	pointer
++	O
=	O
'\n'	O
;	O
p	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
field	pointer
)	O
;	O
stpcpy	function
(	O
stpcpy	function
(	O
stpcpy	function
(	O
p	pointer
,	O
" "	pointer
)	O
,	O
value	pointer
)	O
,	O
"\n"	pointer
)	O
;	O
}	O
else	O
{	O
for	O
(	O
h	pointer
=	O
header	pointer
;	O
*	O
h	pointer
!=	O
'\0'	O
;	O
)	O
{	O
for	O
(	O
k	long
=	O
field_index	int
+	O
1	int
;	O
k	long
<	O
SIZEOF	O
(	O
known_fields	array
)	O
;	O
k	long
++	O
)	O
if	O
(	O
strncmp	function
(	O
h	pointer
,	O
known_fields	array
[	O
k	long
]	O
.	O
name	pointer
,	O
known_fields	array
[	O
k	long
]	O
.	O
len	long
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
k	long
<	O
SIZEOF	O
(	O
known_fields	array
)	O
)	O
break	O
;	O
h	pointer
=	O
strchr	function
(	O
h	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
h	pointer
==	O
NULL	O
)	O
break	O
;	O
h	pointer
++	O
;	O
}	O
if	O
(	O
h	pointer
!=	O
NULL	O
&&	O
*	O
h	pointer
!=	O
'\0'	O
)	O
{	O
char	O
*	O
p	pointer
=	O
new_header	pointer
;	O
memcpy	function
(	O
p	pointer
,	O
header	pointer
,	O
h	pointer
-	O
header	pointer
)	O
;	O
p	pointer
+=	O
h	pointer
-	O
header	pointer
;	O
p	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
field	pointer
)	O
;	O
p	pointer
=	O
stpcpy	function
(	O
stpcpy	function
(	O
stpcpy	function
(	O
p	pointer
,	O
" "	pointer
)	O
,	O
value	pointer
)	O
,	O
"\n"	pointer
)	O
;	O
stpcpy	function
(	O
p	pointer
,	O
h	pointer
)	O
;	O
}	O
else	O
{	O
char	O
*	O
p	pointer
=	O
new_header	pointer
;	O
p	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
header	pointer
)	O
;	O
if	O
(	O
p	pointer
>	O
new_header	pointer
&&	O
p	pointer
[	O
-	O
1	int
]	O
!=	O
'\n'	O
)	O
*	O
p	pointer
++	O
=	O
'\n'	O
;	O
p	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
field	pointer
)	O
;	O
stpcpy	function
(	O
stpcpy	function
(	O
stpcpy	function
(	O
p	pointer
,	O
" "	pointer
)	O
,	O
value	pointer
)	O
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
mp	pointer
->	O
msgstr	pointer
=	O
new_header	pointer
;	O
mp	pointer
->	O
msgstr_len	long
=	O
strlen	function
(	O
new_header	pointer
)	O
+	O
1	int
;	O
}	O
}	O
}	O
void	O
message_list_delete_header_field	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
field	pointer
)	O
{	O
size_t	long
field_len	long
=	O
strlen	function
(	O
field	pointer
)	O
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
&&	O
!	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
obsolete	bool
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
const	O
char	O
*	O
header	pointer
=	O
mp	pointer
->	O
msgstr	pointer
;	O
const	O
char	O
*	O
h	pointer
;	O
for	O
(	O
h	pointer
=	O
header	pointer
;	O
*	O
h	pointer
!=	O
'\0'	O
;	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
h	pointer
,	O
field	pointer
,	O
field_len	long
)	O
==	O
0	int
)	O
break	O
;	O
h	pointer
=	O
strchr	function
(	O
h	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
h	pointer
==	O
NULL	O
)	O
break	O
;	O
h	pointer
++	O
;	O
}	O
if	O
(	O
h	pointer
!=	O
NULL	O
&&	O
*	O
h	pointer
!=	O
'\0'	O
)	O
{	O
char	O
*	O
new_header	pointer
=	O
XCALLOC	O
(	O
strlen	function
(	O
header	pointer
)	O
+	O
1	int
,	O
char	O
)	O
;	O
char	O
*	O
p	pointer
=	O
new_header	pointer
;	O
memcpy	function
(	O
p	pointer
,	O
header	pointer
,	O
h	pointer
-	O
header	pointer
)	O
;	O
p	pointer
+=	O
h	pointer
-	O
header	pointer
;	O
h	pointer
=	O
strchr	function
(	O
h	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
h	pointer
!=	O
NULL	O
)	O
{	O
h	pointer
++	O
;	O
strcpy	function
(	O
p	pointer
,	O
h	pointer
)	O
;	O
}	O
else	O
*	O
p	pointer
=	O
'\0'	O
;	O
mp	pointer
->	O
msgstr	pointer
=	O
new_header	pointer
;	O
mp	pointer
->	O
msgstr_len	long
=	O
strlen	function
(	O
new_header	pointer
)	O
+	O
1	int
;	O
}	O
}	O
}	O
