static	O
const	O
char	O
*	O
const	O
cvsid	pointer
=	O
"$Id: adnsheloex.c,v 1.3 2006/05/09 19:37:58 ian Exp $"	pointer
;	O
static	O
const	O
char	O
*	O
const	O
progname	pointer
=	O
"adnsheloex"	pointer
;	O
static	O
const	O
char	O
*	O
config_text	pointer
;	O
static	O
void	O
msg	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
al	array
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
progname	pointer
)	O
;	O
va_start	O
(	O
al	array
,	O
fmt	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
fmt	pointer
,	O
al	array
)	O
;	O
va_end	O
(	O
al	array
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
}	O
static	O
void	O
aargh	function
(	O
const	O
char	O
*	O
cause	pointer
)	O
{	O
const	O
char	O
*	O
why	pointer
=	O
strerror	function
(	O
errno	O
)	O
;	O
if	O
(	O
!	O
why	pointer
)	O
why	pointer
=	O
"Unknown error"	pointer
;	O
msg	function
(	O
"%s: %s (%d)"	pointer
,	O
cause	pointer
,	O
why	pointer
,	O
errno	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
typedef	O
struct	O
logline	struct
{	O
struct	O
logline	struct
*	O
next	pointer
;	O
char	O
*	O
start	pointer
,	O
*	O
name	pointer
,	O
*	O
rest	pointer
,	O
*	O
addr	union
;	O
adns_query	pointer
query	pointer
;	O
}	O
logline	struct
;	O
static	O
logline	struct
*	O
readline	function
(	O
FILE	struct
*	O
inf	pointer
,	O
adns_state	pointer
adns	pointer
,	O
int	O
opts	int
)	O
{	O
static	O
char	O
buf	array
[	O
MAXLINE	int
]	O
;	O
char	O
*	O
str	pointer
,	O
*	O
p	pointer
,	O
*	O
q	pointer
,	O
*	O
r	pointer
;	O
logline	struct
*	O
line	pointer
;	O
if	O
(	O
fgets	function
(	O
buf	array
,	O
MAXLINE	int
,	O
inf	pointer
)	O
)	O
{	O
str	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
line	pointer
)	O
+	O
strlen	function
(	O
buf	array
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
str	pointer
)	O
aargh	function
(	O
"malloc"	pointer
)	O
;	O
line	pointer
=	O
(	O
logline	struct
*	O
)	O
str	pointer
;	O
line	pointer
->	O
next	pointer
=	O
NULL	O
;	O
line	pointer
->	O
start	pointer
=	O
str	pointer
+	O
sizeof	O
(	O
logline	struct
)	O
;	O
strcpy	function
(	O
line	pointer
->	O
start	pointer
,	O
buf	array
)	O
;	O
line	pointer
->	O
name	pointer
=	O
line	pointer
->	O
rest	pointer
=	O
line	pointer
->	O
addr	union
=	O
NULL	O
;	O
for	O
(	O
p	pointer
=	O
strchr	function
(	O
line	pointer
->	O
start	pointer
,	O
' '	O
)	O
;	O
p	pointer
;	O
p	pointer
=	O
strchr	function
(	O
p	pointer
+	O
1	int
,	O
' '	O
)	O
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
p	pointer
,	O
" H="	pointer
,	O
3	int
)	O
)	O
{	O
r	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'['	O
)	O
;	O
if	O
(	O
!	O
r	pointer
)	O
break	O
;	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
')'	O
)	O
;	O
if	O
(	O
!	O
q	pointer
||	O
q	pointer
>	O
r	pointer
)	O
break	O
;	O
p	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'('	O
)	O
;	O
if	O
(	O
!	O
p	pointer
||	O
p	pointer
>	O
q	pointer
)	O
break	O
;	O
line	pointer
->	O
name	pointer
=	O
p	pointer
+	O
1	int
;	O
line	pointer
->	O
rest	pointer
=	O
q	pointer
;	O
line	pointer
->	O
addr	union
=	O
r	pointer
+	O
1	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
line	pointer
->	O
name	pointer
)	O
{	O
*	O
line	pointer
->	O
rest	pointer
=	O
'\0'	O
;	O
if	O
(	O
opts	int
&	O
OPT_DEBUG	int
)	O
msg	function
(	O
"submitting %s"	pointer
,	O
line	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
adns_submit	function
(	O
adns	pointer
,	O
line	pointer
->	O
name	pointer
,	O
adns_r_a	int
,	O
adns_qf_quoteok_query	int
|	O
adns_qf_quoteok_cname	int
|	O
adns_qf_cname_loose	int
,	O
NULL	O
,	O
&	O
line	pointer
->	O
query	pointer
)	O
)	O
aargh	function
(	O
"adns_submit"	pointer
)	O
;	O
*	O
line	pointer
->	O
rest	pointer
=	O
')'	O
;	O
}	O
else	O
{	O
if	O
(	O
opts	int
&	O
OPT_DEBUG	int
)	O
msg	function
(	O
"no query"	pointer
)	O
;	O
line	pointer
->	O
query	pointer
=	O
NULL	O
;	O
}	O
return	O
line	pointer
;	O
}	O
if	O
(	O
!	O
feof	function
(	O
inf	pointer
)	O
)	O
aargh	function
(	O
"fgets"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
proclog	function
(	O
FILE	struct
*	O
inf	pointer
,	O
FILE	struct
*	O
outf	pointer
,	O
int	O
maxpending	int
,	O
int	O
opts	int
)	O
{	O
int	O
eof	int
,	O
err	int
,	O
len	int
;	O
adns_state	pointer
adns	pointer
;	O
adns_answer	struct
*	O
answer	pointer
;	O
logline	struct
*	O
head	pointer
,	O
*	O
tail	pointer
,	O
*	O
line	pointer
;	O
adns_initflags	enum
initflags	enum
;	O
initflags	enum
=	O
(	O
opts	int
&	O
OPT_DEBUG	int
)	O
?	O
adns_if_debug	int
:	O
0	int
;	O
if	O
(	O
config_text	pointer
)	O
{	O
errno	O
=	O
adns_init_strcfg	function
(	O
&	O
adns	pointer
,	O
initflags	enum
,	O
stderr	pointer
,	O
config_text	pointer
)	O
;	O
}	O
else	O
{	O
errno	O
=	O
adns_init	function
(	O
&	O
adns	pointer
,	O
initflags	enum
,	O
0	int
)	O
;	O
}	O
if	O
(	O
errno	O
)	O
aargh	function
(	O
"adns_init"	pointer
)	O
;	O
head	pointer
=	O
tail	pointer
=	O
readline	function
(	O
inf	pointer
,	O
adns	pointer
,	O
opts	int
)	O
;	O
len	int
=	O
1	int
;	O
eof	int
=	O
0	int
;	O
while	O
(	O
head	pointer
)	O
{	O
while	O
(	O
head	pointer
)	O
{	O
if	O
(	O
head	pointer
->	O
query	pointer
)	O
{	O
if	O
(	O
opts	int
&	O
OPT_DEBUG	int
)	O
msg	function
(	O
"%d in queue; checking %.*s"	pointer
,	O
len	int
,	O
(	O
int	O
)	O
(	O
head	pointer
->	O
rest	pointer
-	O
head	pointer
->	O
name	pointer
)	O
,	O
guard_null	O
(	O
head	pointer
->	O
name	pointer
)	O
)	O
;	O
if	O
(	O
eof	int
||	O
len	int
>=	O
maxpending	int
)	O
{	O
if	O
(	O
opts	int
&	O
OPT_POLL	int
)	O
err	int
=	O
adns_wait_poll	function
(	O
adns	pointer
,	O
&	O
head	pointer
->	O
query	pointer
,	O
&	O
answer	pointer
,	O
NULL	O
)	O
;	O
else	O
err	int
=	O
adns_wait	function
(	O
adns	pointer
,	O
&	O
head	pointer
->	O
query	pointer
,	O
&	O
answer	pointer
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
err	int
=	O
adns_check	function
(	O
adns	pointer
,	O
&	O
head	pointer
->	O
query	pointer
,	O
&	O
answer	pointer
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
err	int
==	O
EAGAIN	int
)	O
break	O
;	O
if	O
(	O
err	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: adns_wait/check: %s"	pointer
,	O
progname	pointer
,	O
strerror	function
(	O
err	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
answer	pointer
->	O
status	enum
==	O
adns_s_ok	int
)	O
{	O
const	O
char	O
*	O
addr	union
;	O
int	O
ok	int
=	O
0	int
;	O
fprintf	function
(	O
outf	pointer
,	O
"%.*s"	pointer
,	O
(	O
int	O
)	O
(	O
head	pointer
->	O
rest	pointer
-	O
head	pointer
->	O
start	pointer
)	O
,	O
head	pointer
->	O
start	pointer
)	O
;	O
while	O
(	O
answer	pointer
->	O
nrrs	int
--	O
)	O
{	O
addr	union
=	O
inet_ntoa	function
(	O
answer	pointer
->	O
rrs	union
.	O
inaddr	pointer
[	O
answer	pointer
->	O
nrrs	int
]	O
)	O
;	O
ok	int
|=	O
!	O
strncmp	function
(	O
addr	union
,	O
head	pointer
->	O
addr	union
,	O
strlen	function
(	O
addr	union
)	O
)	O
;	O
fprintf	function
(	O
outf	pointer
,	O
" [%s]"	pointer
,	O
addr	union
)	O
;	O
}	O
fprintf	function
(	O
outf	pointer
,	O
"%s%s"	pointer
,	O
ok	int
?	O
" OK"	pointer
:	O
""	pointer
,	O
head	pointer
->	O
rest	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
opts	int
&	O
OPT_DEBUG	int
)	O
msg	function
(	O
"query failed"	pointer
)	O
;	O
fputs	function
(	O
head	pointer
->	O
start	pointer
,	O
outf	pointer
)	O
;	O
}	O
free	function
(	O
answer	pointer
)	O
;	O
len	int
--	O
;	O
}	O
else	O
{	O
if	O
(	O
opts	int
&	O
OPT_DEBUG	int
)	O
msg	function
(	O
"%d in queue; no query on this line"	pointer
,	O
len	int
)	O
;	O
fputs	function
(	O
head	pointer
->	O
start	pointer
,	O
outf	pointer
)	O
;	O
}	O
line	pointer
=	O
head	pointer
;	O
head	pointer
=	O
head	pointer
->	O
next	pointer
;	O
free	function
(	O
line	pointer
)	O
;	O
}	O
if	O
(	O
!	O
eof	int
)	O
{	O
line	pointer
=	O
readline	function
(	O
inf	pointer
,	O
adns	pointer
,	O
opts	int
)	O
;	O
if	O
(	O
line	pointer
)	O
{	O
if	O
(	O
!	O
head	pointer
)	O
head	pointer
=	O
line	pointer
;	O
else	O
tail	pointer
->	O
next	pointer
=	O
line	pointer
;	O
tail	pointer
=	O
line	pointer
;	O
if	O
(	O
line	pointer
->	O
query	pointer
)	O
len	int
++	O
;	O
}	O
else	O
{	O
eof	int
=	O
1	int
;	O
}	O
}	O
}	O
adns_finish	function
(	O
adns	pointer
)	O
;	O
}	O
static	O
void	O
printhelp	function
(	O
FILE	struct
*	O
file	pointer
)	O
{	O
fputs	function
(	O
"usage: adnsheloex [<options>] [<logfile>]\n"	pointer
"       adnsheloex --version|--help\n"	pointer
"options: -c <concurrency>  set max number of outstanding queries\n"	pointer
"         -p                use poll(2) instead of select(2)\n"	pointer
"         -d                turn on debugging\n"	pointer
"         -C <config>       use instead of contents of resolv.conf\n"	pointer
,	O
stdout	pointer
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
void	O
)	O
{	O
printhelp	function
(	O
stderr	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
c	int
,	O
opts	int
,	O
maxpending	int
;	O
extern	O
char	O
*	O
optarg	pointer
;	O
FILE	struct
*	O
inf	pointer
;	O
if	O
(	O
argv	array
[	O
1	int
]	O
&&	O
!	O
strncmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"--"	pointer
,	O
2	int
)	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"--help"	pointer
)	O
)	O
{	O
printhelp	function
(	O
stdout	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
argv	array
[	O
1	int
]	O
,	O
"--version"	pointer
)	O
)	O
{	O
fputs	function
(	O
VERSION_MESSAGE	O
(	O
"adnsheloex"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
}	O
else	O
{	O
usage	function
(	O
)	O
;	O
}	O
if	O
(	O
ferror	function
(	O
stdout	pointer
)	O
||	O
fclose	function
(	O
stdout	pointer
)	O
)	O
{	O
perror	function
(	O
"stdout"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
exit	function
(	O
0	int
)	O
;	O
}	O
maxpending	int
=	O
DEFMAXPENDING	int
;	O
opts	int
=	O
0	int
;	O
while	O
(	O
(	O
c	int
=	O
getopt	function
(	O
argc	int
,	O
argv	array
,	O
"c:C:dp"	pointer
)	O
)	O
!=	O
-	O
1	int
)	O
switch	O
(	O
c	int
)	O
{	O
case	O
'c'	O
:	O
maxpending	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
if	O
(	O
maxpending	int
<	O
1	int
||	O
maxpending	int
>	O
MAXMAXPENDING	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unfeasible concurrency %d\n"	pointer
,	O
progname	pointer
,	O
maxpending	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'C'	O
:	O
config_text	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'd'	O
:	O
opts	int
|=	O
OPT_DEBUG	int
;	O
break	O
;	O
case	O
'p'	O
:	O
opts	int
|=	O
OPT_POLL	int
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
)	O
;	O
}	O
argc	int
-=	O
optind	int
;	O
argv	array
+=	O
optind	int
;	O
inf	pointer
=	O
NULL	O
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
inf	pointer
=	O
stdin	pointer
;	O
else	O
if	O
(	O
argc	int
==	O
1	int
)	O
inf	pointer
=	O
fopen	function
(	O
*	O
argv	array
,	O
"r"	pointer
)	O
;	O
else	O
usage	function
(	O
)	O
;	O
if	O
(	O
!	O
inf	pointer
)	O
aargh	function
(	O
"couldn't open input"	pointer
)	O
;	O
proclog	function
(	O
inf	pointer
,	O
stdout	pointer
,	O
maxpending	int
,	O
opts	int
)	O
;	O
if	O
(	O
fclose	function
(	O
inf	pointer
)	O
)	O
aargh	function
(	O
"fclose input"	pointer
)	O
;	O
if	O
(	O
fclose	function
(	O
stdout	pointer
)	O
)	O
aargh	function
(	O
"fclose output"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
