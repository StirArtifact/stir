extern	O
void	O
VComputeClipNormals	function
(	O
Viewport	struct
*	O
v	struct
)	O
;	O
int	O
ViewportSetDepthCueing	function
(	O
Viewport	struct
*	O
v	struct
,	O
int	O
flag	int
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
_VDefaultWorkContext	pointer
->	O
depthCueSteps	int
>	O
1	int
&&	O
v	struct
->	O
flags	short
&	O
(	O
VPFastAnimation	int
||	O
VPDoubleBuffer	int
)	O
)	O
{	O
if	O
(	O
flag	int
)	O
v	struct
->	O
flags	short
|=	O
VPDepthCueing	int
;	O
else	O
v	struct
->	O
flags	short
&=	O
~	O
VPDepthCueing	int
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
return	O
status	int
;	O
}	O
Viewport	struct
*	O
VOpenViewport	function
(	O
Display	struct
*	O
dpy	pointer
,	O
int	O
screen	pointer
,	O
Window	long
win	long
,	O
Colormap	long
cmap	long
,	O
Visual	struct
*	O
visual	pointer
,	O
double	O
unit	double
,	O
double	O
dist	double
,	O
double	O
scale	int
,	O
int	O
width	int
,	O
int	O
height	int
)	O
{	O
Viewport	struct
*	O
v	struct
;	O
VPoint	struct
clip	struct
[	O
4	int
]	O
;	O
int	O
planes	int
,	O
i	int
;	O
int	O
maxpcolors	int
;	O
maxpcolors	int
=	O
(	O
visual	pointer
->	O
map_entries	int
==	O
2	int
)	O
?	O
256	int
:	O
visual	pointer
->	O
map_entries	int
;	O
v	struct
=	O
(	O
Viewport	struct
*	O
)	O
Vmalloc	function
(	O
sizeof	O
(	O
Viewport	struct
)	O
)	O
;	O
v	struct
->	O
zsize	long
=	O
32768	int
;	O
v	struct
->	O
ztop	long
=	O
0	int
;	O
v	struct
->	O
zpool	pointer
=	O
(	O
ZInfo	struct
*	O
)	O
Vmalloc	function
(	O
sizeof	O
(	O
ZInfo	struct
)	O
*	O
v	struct
->	O
zsize	long
)	O
;	O
v	struct
->	O
depth	int
=	O
MaxDepth	int
;	O
v	struct
->	O
lastPixel	long
=	O
0xffffffff	int
;	O
v	struct
->	O
dist	double
=	O
dist	double
;	O
v	struct
->	O
units	double
=	O
unit	double
;	O
v	struct
->	O
xres	double
=	O
(	O
(	O
(	O
(	O
double	O
)	O
DisplayWidth	O
(	O
dpy	pointer
,	O
screen	pointer
)	O
)	O
*	O
unit	double
*	O
1000.0	int
)	O
/	O
(	O
(	O
double	O
)	O
DisplayWidthMM	O
(	O
dpy	pointer
,	O
screen	pointer
)	O
)	O
)	O
;	O
v	struct
->	O
yres	double
=	O
(	O
(	O
(	O
(	O
double	O
)	O
DisplayHeight	O
(	O
dpy	pointer
,	O
screen	pointer
)	O
)	O
*	O
unit	double
*	O
1000.0	int
)	O
/	O
(	O
(	O
double	O
)	O
DisplayHeightMM	O
(	O
dpy	pointer
,	O
screen	pointer
)	O
)	O
)	O
;	O
v	struct
->	O
Scale	struct
.	O
x	double
=	O
v	struct
->	O
xres	double
*	O
dist	double
*	O
scale	int
*	O
4	int
;	O
v	struct
->	O
Scale	struct
.	O
y	double
=	O
v	struct
->	O
yres	double
*	O
dist	double
*	O
scale	int
*	O
4	int
;	O
v	struct
->	O
Scale	struct
.	O
z	double
=	O
1.0	int
;	O
v	struct
->	O
Middl	struct
.	O
x	double
=	O
width	int
*	O
2	int
;	O
v	struct
->	O
Middl	struct
.	O
y	double
=	O
height	int
*	O
2	int
;	O
clip	struct
[	O
0	int
]	O
.	O
x	double
=	O
-	O
width	int
/	O
v	struct
->	O
xres	double
/	O
2.0	int
/	O
scale	int
;	O
clip	struct
[	O
0	int
]	O
.	O
y	double
=	O
-	O
height	int
/	O
v	struct
->	O
yres	double
/	O
2.0	int
/	O
scale	int
;	O
clip	struct
[	O
0	int
]	O
.	O
z	double
=	O
dist	double
;	O
clip	struct
[	O
1	int
]	O
.	O
x	double
=	O
-	O
width	int
/	O
v	struct
->	O
xres	double
/	O
2.0	int
/	O
scale	int
;	O
clip	struct
[	O
1	int
]	O
.	O
y	double
=	O
height	int
/	O
v	struct
->	O
yres	double
/	O
2.0	int
/	O
scale	int
;	O
clip	struct
[	O
1	int
]	O
.	O
z	double
=	O
dist	double
;	O
clip	struct
[	O
2	int
]	O
.	O
x	double
=	O
width	int
/	O
v	struct
->	O
xres	double
/	O
2.0	int
/	O
scale	int
;	O
clip	struct
[	O
2	int
]	O
.	O
y	double
=	O
height	int
/	O
v	struct
->	O
yres	double
/	O
2.0	int
/	O
scale	int
;	O
clip	struct
[	O
2	int
]	O
.	O
z	double
=	O
dist	double
;	O
clip	struct
[	O
3	int
]	O
.	O
x	double
=	O
width	int
/	O
v	struct
->	O
xres	double
/	O
2.0	int
/	O
scale	int
;	O
clip	struct
[	O
3	int
]	O
.	O
y	double
=	O
-	O
height	int
/	O
v	struct
->	O
yres	double
/	O
2.0	int
/	O
scale	int
;	O
clip	struct
[	O
3	int
]	O
.	O
z	double
=	O
dist	double
;	O
v	struct
->	O
clipPoly	pointer
=	O
VCreatePolygon	function
(	O
4	int
,	O
clip	struct
,	O
(	O
VColor	struct
*	O
)	O
0	int
)	O
;	O
VGetPlanes	function
(	O
v	struct
->	O
clipPoly	pointer
)	O
;	O
VComputeClipNormals	function
(	O
v	struct
)	O
;	O
v	struct
->	O
flags	short
=	O
VPPerspective	int
|	O
VPClip	int
|	O
VPFastAnimation	int
;	O
v	struct
->	O
dpy	pointer
=	O
dpy	pointer
;	O
v	struct
->	O
cmap	long
=	O
cmap	long
;	O
v	struct
->	O
visual	pointer
=	O
visual	pointer
;	O
v	struct
->	O
screen	pointer
=	O
screen	pointer
;	O
v	struct
->	O
win	long
=	O
win	long
;	O
VIdentMatrix	function
(	O
&	O
v	struct
->	O
eyeSpace	struct
)	O
;	O
v	struct
->	O
set	int
=	O
0	int
;	O
v	struct
->	O
width	int
=	O
width	int
;	O
v	struct
->	O
height	int
=	O
height	int
;	O
v	struct
->	O
aPixel	pointer
=	O
(	O
Color	short
*	O
)	O
Vmalloc	function
(	O
sizeof	O
(	O
Color	short
)	O
*	O
maxpcolors	int
)	O
;	O
memset	O
(	O
v	struct
->	O
aPixel	pointer
,	O
0	int
,	O
sizeof	O
(	O
Color	short
)	O
*	O
maxpcolors	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
MAXCOLORS	int
;	O
++	O
i	int
)	O
{	O
v	struct
->	O
bPixel	array
[	O
i	int
]	O
=	O
0	int
;	O
}	O
v	struct
->	O
colorTweakProc	pointer
=	O
(	O
void	O
(	O
*	O
)	O
(	O
)	O
)	O
NULL	O
;	O
planes	int
=	O
DisplayPlanes	O
(	O
dpy	pointer
,	O
screen	pointer
)	O
;	O
if	O
(	O
v	struct
->	O
flags	short
&	O
VPDoubleBuffer	int
||	O
planes	int
<	O
PLANECOUNT	int
*	O
2	int
+	O
2	int
||	O
_VDefaultWorkContext	pointer
->	O
usePixmaps	int
!=	O
0	int
)	O
{	O
if	O
(	O
(	O
v	struct
->	O
flags	short
&	O
VPFastAnimation	int
)	O
==	O
0	int
)	O
{	O
v	struct
->	O
monoPixmap	long
=	O
XCreatePixmap	function
(	O
dpy	pointer
,	O
RootWindow	O
(	O
dpy	pointer
,	O
screen	pointer
)	O
,	O
width	int
,	O
height	int
,	O
planes	int
)	O
;	O
v	struct
->	O
flags	short
|=	O
VPPixmap	int
;	O
}	O
if	O
(	O
v	struct
->	O
flags	short
&	O
VPDoubleBuffer	int
)	O
{	O
v	struct
->	O
gc	pointer
=	O
XCreateGC	function
(	O
dpy	pointer
,	O
RootWindow	O
(	O
dpy	pointer
,	O
screen	pointer
)	O
,	O
0	int
,	O
NULL	O
)	O
;	O
v	struct
->	O
flags	short
|=	O
VPPixmap	int
;	O
v	struct
->	O
dbeDrawable	long
=	O
XdbeAllocateBackBufferName	function
(	O
dpy	pointer
,	O
win	long
,	O
XdbeUntouched	int
)	O
;	O
v	struct
->	O
AllocColor	pointer
=	O
VdbeAllocColor	function
;	O
v	struct
->	O
DrawSegments	pointer
=	O
VdbeDrawSegments	function
;	O
v	struct
->	O
DrawLine	function
=	O
VdbeDrawLine	function
;	O
v	struct
->	O
FillPolygon	function
=	O
VdbeFillPolygon	function
;	O
v	struct
->	O
FillRectangle	function
=	O
VdbeFillRectangle	function
;	O
v	struct
->	O
ExposeBuffer	pointer
=	O
VdbeExposeBuffer	function
;	O
v	struct
->	O
SetClipRect	pointer
=	O
VdbeSetClipRect	function
;	O
v	struct
->	O
Close	pointer
=	O
VdbeClose	function
;	O
return	O
v	struct
;	O
}	O
if	O
(	O
planes	int
==	O
1	int
||	O
_VDefaultWorkContext	pointer
->	O
usePixmaps	int
!=	O
0	int
)	O
v	struct
->	O
flags	short
|=	O
VPMono	int
;	O
v	struct
->	O
mask	long
=	O
AllPlanes	O
;	O
}	O
v	struct
->	O
w	pointer
=	O
InitializeX11AWindow	function
(	O
dpy	pointer
,	O
screen	pointer
,	O
win	long
,	O
(	O
v	struct
->	O
flags	short
&	O
VPMono	int
)	O
?	O
AMonoMode	int
:	O
0	int
)	O
;	O
v	struct
->	O
AllocColor	pointer
=	O
AlibAllocColor	function
;	O
v	struct
->	O
DrawSegments	pointer
=	O
AlibDrawSegments	function
;	O
v	struct
->	O
DrawLine	function
=	O
AlibDrawLine	function
;	O
v	struct
->	O
FillPolygon	function
=	O
AlibFillPolygon	function
;	O
v	struct
->	O
FillRectangle	function
=	O
AlibFillRectangle	function
;	O
v	struct
->	O
ExposeBuffer	pointer
=	O
AlibExposeBuffer	function
;	O
v	struct
->	O
SetClipRect	pointer
=	O
AlibSetClipRect	function
;	O
v	struct
->	O
Close	pointer
=	O
AlibClose	function
;	O
v	struct
->	O
halftone	array
[	O
0	int
]	O
=	O
XCreateBitmapFromData	function
(	O
dpy	pointer
,	O
win	long
,	O
gray0_bits	array
,	O
gray0_width	int
,	O
gray0_height	int
)	O
;	O
v	struct
->	O
halftone	array
[	O
1	int
]	O
=	O
XCreateBitmapFromData	function
(	O
dpy	pointer
,	O
win	long
,	O
gray1_bits	array
,	O
gray1_width	int
,	O
gray1_height	int
)	O
;	O
v	struct
->	O
halftone	array
[	O
2	int
]	O
=	O
XCreateBitmapFromData	function
(	O
dpy	pointer
,	O
win	long
,	O
gray2_bits	array
,	O
gray2_width	int
,	O
gray2_height	int
)	O
;	O
v	struct
->	O
halftone	array
[	O
3	int
]	O
=	O
XCreateBitmapFromData	function
(	O
dpy	pointer
,	O
win	long
,	O
gray3_bits	array
,	O
gray3_width	int
,	O
gray3_height	int
)	O
;	O
v	struct
->	O
halftone	array
[	O
4	int
]	O
=	O
XCreateBitmapFromData	function
(	O
dpy	pointer
,	O
win	long
,	O
gray4_bits	array
,	O
gray4_width	int
,	O
gray4_height	int
)	O
;	O
v	struct
->	O
halftone	array
[	O
5	int
]	O
=	O
XCreateBitmapFromData	function
(	O
dpy	pointer
,	O
win	long
,	O
gray5_bits	array
,	O
gray5_width	int
,	O
gray5_height	int
)	O
;	O
v	struct
->	O
halftone	array
[	O
6	int
]	O
=	O
XCreateBitmapFromData	function
(	O
dpy	pointer
,	O
win	long
,	O
gray6_bits	array
,	O
gray6_width	int
,	O
gray6_height	int
)	O
;	O
v	struct
->	O
halftone	array
[	O
7	int
]	O
=	O
XCreateBitmapFromData	function
(	O
dpy	pointer
,	O
win	long
,	O
gray7_bits	array
,	O
gray7_width	int
,	O
gray7_height	int
)	O
;	O
v	struct
->	O
w	pointer
->	O
stipple	long
=	O
v	struct
->	O
halftone	array
;	O
return	O
v	struct
;	O
}	O
