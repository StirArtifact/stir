int	O
NEW_GNU_DOS_LEVEL	int
=	O
0	int
;	O
struct	O
passwd	struct
*	O
pass	pointer
;	O
void	O
init	function
(	O
)	O
{	O
getScreenSize	function
(	O
)	O
;	O
if	O
(	O
!	O
SCREEN_H	int
||	O
!	O
SCREEN_W	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error: Failed to get terminal size\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
FILE_DIR_COLOR	array
[	O
'd'	O
-	O
'a'	O
]	O
=	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
;	O
FILE_DIR_COLOR	array
[	O
'x'	O
-	O
'a'	O
]	O
=	O
GREEN	int
;	O
FILE_DIR_COLOR	array
[	O
'r'	O
-	O
'a'	O
]	O
=	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
;	O
FILE_DIR_COLOR	array
[	O
'l'	O
-	O
'a'	O
]	O
=	O
CYAN	int
;	O
FILE_DIR_COLOR	array
[	O
'a'	O
-	O
'a'	O
]	O
=	O
RED	int
;	O
FILE_DIR_COLOR	array
[	O
'h'	O
-	O
'a'	O
]	O
=	O
BROWN	int
;	O
FILE_DIR_COLOR	array
[	O
'p'	O
-	O
'a'	O
]	O
=	O
MAGENTA	int
;	O
menu	array
[	O
0	int
]	O
=	O
"&File"	pointer
;	O
menu	array
[	O
1	int
]	O
=	O
"&Edit"	pointer
;	O
menu	array
[	O
2	int
]	O
=	O
"&Options"	pointer
;	O
menu	array
[	O
3	int
]	O
=	O
"&Help"	pointer
;	O
fileMenu	array
[	O
0	int
]	O
=	O
"New directory ^N"	pointer
;	O
fileMenu	array
[	O
1	int
]	O
=	O
"Open location ^O"	pointer
;	O
fileMenu	array
[	O
2	int
]	O
=	O
"Export tree   ^E"	pointer
;	O
fileMenu	array
[	O
3	int
]	O
=	O
"Print         ^P"	pointer
;	O
fileMenu	array
[	O
4	int
]	O
=	O
"Exit          ^Q"	pointer
;	O
editMenu	array
[	O
0	int
]	O
=	O
"Cut        ^X"	pointer
;	O
editMenu	array
[	O
1	int
]	O
=	O
"Copy       ^C"	pointer
;	O
editMenu	array
[	O
2	int
]	O
=	O
"Paste      ^V"	pointer
;	O
editMenu	array
[	O
3	int
]	O
=	O
"Mark all   ^A"	pointer
;	O
editMenu	array
[	O
4	int
]	O
=	O
"Unmark all ^Z"	pointer
;	O
editMenu	array
[	O
5	int
]	O
=	O
"Clear sel. ^W"	pointer
;	O
editMenu	array
[	O
6	int
]	O
=	O
"Find..     ^F"	pointer
;	O
optionsMenu	array
[	O
0	int
]	O
=	O
"Properties     "	pointer
;	O
optionsMenu	array
[	O
1	int
]	O
=	O
"Change colors  "	pointer
;	O
optionsMenu	array
[	O
2	int
]	O
=	O
"Reset config   "	pointer
;	O
helpMenu	array
[	O
0	int
]	O
=	O
"View README    "	pointer
;	O
helpMenu	array
[	O
1	int
]	O
=	O
"GNU keybindings"	pointer
;	O
helpMenu	array
[	O
2	int
]	O
=	O
"Quick reference"	pointer
;	O
helpMenu	array
[	O
3	int
]	O
=	O
"About Prime..  "	pointer
;	O
int	O
i	int
;	O
numVisDirs	int
=	O
SCREEN_H	int
-	O
9	int
;	O
firstVisDir	int
=	O
0	int
;	O
selectedDir	int
=	O
-	O
1	int
;	O
totalDirs	int
=	O
0	int
;	O
dirHighLight	pointer
=	O
malloc	function
(	O
SCREEN_W	int
/	O
2	int
)	O
;	O
if	O
(	O
!	O
dirHighLight	pointer
)	O
goto	O
memory_error	O
;	O
memset	function
(	O
dirHighLight	pointer
,	O
' '	O
,	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
4	int
)	O
;	O
dirHighLight	pointer
[	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
4	int
]	O
=	O
'\0'	O
;	O
numVisFiles	int
=	O
SCREEN_H	int
-	O
9	int
;	O
firstVisFile	int
=	O
0	int
;	O
selectedFile	int
=	O
-	O
1	int
;	O
totalFiles	int
=	O
0	int
;	O
fileHighLight	pointer
=	O
malloc	function
(	O
SCREEN_W	int
/	O
2	int
)	O
;	O
if	O
(	O
!	O
fileHighLight	pointer
)	O
goto	O
memory_error	O
;	O
memset	function
(	O
fileHighLight	pointer
,	O
' '	O
,	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
2	int
)	O
;	O
fileHighLight	pointer
[	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
2	int
]	O
=	O
'\0'	O
;	O
activeWindow	int
=	O
DIR_WIN	int
;	O
MAX_DIR_NAME_LEN	int
=	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
4	int
;	O
MAX_FILE_NAME_LEN	int
=	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
2	int
;	O
MAX_MSG_BOX_W	int
=	O
SCREEN_W	int
-	O
4	int
;	O
MAX_MSG_BOX_H	int
=	O
SCREEN_H	int
-	O
4	int
;	O
memset	function
(	O
dirs	array
,	O
0	int
,	O
sizeof	O
(	O
dirs	array
)	O
)	O
;	O
memset	function
(	O
files	array
,	O
0	int
,	O
sizeof	O
(	O
files	array
)	O
)	O
;	O
numStarred	int
=	O
0	int
;	O
numCut	int
=	O
0	int
;	O
numCopy	int
=	O
0	int
;	O
numCutFiles	int
=	O
0	int
;	O
numCopyFiles	int
=	O
0	int
;	O
numCutDirs	int
=	O
0	int
;	O
numCopyDirs	int
=	O
0	int
;	O
memset	function
(	O
cutFiles	array
,	O
0	int
,	O
sizeof	O
(	O
cutFiles	array
)	O
)	O
;	O
memset	function
(	O
copyFiles	array
,	O
0	int
,	O
sizeof	O
(	O
copyFiles	array
)	O
)	O
;	O
memset	function
(	O
cutDirs	array
,	O
0	int
,	O
sizeof	O
(	O
cutDirs	array
)	O
)	O
;	O
memset	function
(	O
copyDirs	array
,	O
0	int
,	O
sizeof	O
(	O
copyDirs	array
)	O
)	O
;	O
startStr	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
MAX_DIR_NAME_LEN	int
)	O
;	O
if	O
(	O
!	O
startStr	pointer
)	O
goto	O
memory_error	O
;	O
middleStr	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
MAX_DIR_NAME_LEN	int
)	O
;	O
if	O
(	O
!	O
middleStr	pointer
)	O
goto	O
memory_error	O
;	O
endStr	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
MAX_DIR_NAME_LEN	int
)	O
;	O
if	O
(	O
!	O
endStr	pointer
)	O
goto	O
memory_error	O
;	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
37	int
;	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
=	O
34	int
;	O
FG_COLOR	array
[	O
COLOR_MENU_BAR	int
]	O
=	O
34	int
;	O
FG_COLOR	array
[	O
COLOR_STATUS_BAR	int
]	O
=	O
34	int
;	O
FG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
=	O
37	int
;	O
FG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
=	O
32	int
;	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
49	int
;	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
=	O
47	int
;	O
BG_COLOR	array
[	O
COLOR_MENU_BAR	int
]	O
=	O
47	int
;	O
BG_COLOR	array
[	O
COLOR_STATUS_BAR	int
]	O
=	O
47	int
;	O
BG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
=	O
41	int
;	O
BG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
=	O
41	int
;	O
COLOR_STR	array
[	O
0	int
]	O
=	O
"BLACK"	pointer
;	O
COLOR_STR	array
[	O
1	int
]	O
=	O
"RED"	pointer
;	O
COLOR_STR	array
[	O
2	int
]	O
=	O
"GREEN"	pointer
;	O
COLOR_STR	array
[	O
3	int
]	O
=	O
"BROWN"	pointer
;	O
COLOR_STR	array
[	O
4	int
]	O
=	O
"BLUE"	pointer
;	O
COLOR_STR	array
[	O
5	int
]	O
=	O
"MAGENTA"	pointer
;	O
COLOR_STR	array
[	O
6	int
]	O
=	O
"CYAN"	pointer
;	O
COLOR_STR	array
[	O
7	int
]	O
=	O
"WHITE"	pointer
;	O
FG_COLOR_ARRAY	array
[	O
0	int
]	O
=	O
30	int
;	O
FG_COLOR_ARRAY	array
[	O
1	int
]	O
=	O
31	int
;	O
FG_COLOR_ARRAY	array
[	O
2	int
]	O
=	O
32	int
;	O
FG_COLOR_ARRAY	array
[	O
3	int
]	O
=	O
33	int
;	O
FG_COLOR_ARRAY	array
[	O
4	int
]	O
=	O
34	int
;	O
FG_COLOR_ARRAY	array
[	O
5	int
]	O
=	O
35	int
;	O
FG_COLOR_ARRAY	array
[	O
6	int
]	O
=	O
36	int
;	O
FG_COLOR_ARRAY	array
[	O
7	int
]	O
=	O
37	int
;	O
BG_COLOR_ARRAY	array
[	O
0	int
]	O
=	O
49	int
;	O
BG_COLOR_ARRAY	array
[	O
1	int
]	O
=	O
41	int
;	O
BG_COLOR_ARRAY	array
[	O
2	int
]	O
=	O
42	int
;	O
BG_COLOR_ARRAY	array
[	O
3	int
]	O
=	O
43	int
;	O
BG_COLOR_ARRAY	array
[	O
4	int
]	O
=	O
44	int
;	O
BG_COLOR_ARRAY	array
[	O
5	int
]	O
=	O
45	int
;	O
BG_COLOR_ARRAY	array
[	O
6	int
]	O
=	O
46	int
;	O
BG_COLOR_ARRAY	array
[	O
7	int
]	O
=	O
47	int
;	O
initTerminal	function
(	O
)	O
;	O
return	O
;	O
memory_error	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"Insufficient memory\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
int	O
read_config_file	function
(	O
)	O
{	O
GNU_DOS_LEVEL	int
=	O
1	int
;	O
if	O
(	O
!	O
(	O
pass	pointer
=	O
getpwuid	function
(	O
geteuid	function
(	O
)	O
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error: couldn't open home directory to read configuration file.\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Aborting.\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
config_file_name	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
pass	pointer
->	O
pw_dir	pointer
)	O
+	O
12	int
)	O
;	O
if	O
(	O
!	O
config_file_name	pointer
)	O
{	O
printf	function
(	O
"Insufficient memory\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
strcpy	function
(	O
config_file_name	pointer
,	O
pass	pointer
->	O
pw_dir	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
".prime.conf"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
config_file	pointer
=	O
fopen	function
(	O
config_file_name	pointer
,	O
"r"	pointer
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error: couldn't read configuration file in home directory.\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Resetting configuration file.\n"	pointer
)	O
;	O
write_config_file_defaults	function
(	O
)	O
;	O
config_file	pointer
=	O
fopen	function
(	O
config_file_name	pointer
,	O
"r"	pointer
)	O
;	O
}	O
char	O
buf	array
[	O
100	int
]	O
;	O
while	O
(	O
fgets	function
(	O
buf	array
,	O
sizeof	O
(	O
buf	array
)	O
,	O
config_file	pointer
)	O
)	O
{	O
if	O
(	O
buf	array
[	O
0	int
]	O
==	O
'#'	O
||	O
buf	array
[	O
0	int
]	O
==	O
'\n'	O
)	O
continue	O
;	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"GNU_DOS_LEVEL"	pointer
)	O
)	O
{	O
GNU_DOS_LEVEL	int
=	O
atoi	function
(	O
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_WIN"	pointer
)	O
)	O
{	O
FG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_HLT"	pointer
)	O
)	O
{	O
FG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_MBAR"	pointer
)	O
)	O
{	O
FG_COLOR	array
[	O
COLOR_MENU_BAR	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_SBAR"	pointer
)	O
)	O
{	O
FG_COLOR	array
[	O
COLOR_STATUS_BAR	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_HBUT"	pointer
)	O
)	O
{	O
FG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"FG_COLOR_BUT"	pointer
)	O
)	O
{	O
FG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_WIN"	pointer
)	O
)	O
{	O
BG_COLOR	array
[	O
COLOR_WINDOW	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_HLT"	pointer
)	O
)	O
{	O
BG_COLOR	array
[	O
COLOR_HIGHLIGHT_TEXT	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_MBAR"	pointer
)	O
)	O
{	O
BG_COLOR	array
[	O
COLOR_MENU_BAR	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_SBAR"	pointer
)	O
)	O
{	O
BG_COLOR	array
[	O
COLOR_STATUS_BAR	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_HBUT"	pointer
)	O
)	O
{	O
BG_COLOR	array
[	O
COLOR_HBUTTONS	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
buf	array
,	O
"BG_COLOR_BUT"	pointer
)	O
)	O
{	O
BG_COLOR	array
[	O
COLOR_BUTTONS	int
]	O
=	O
atoi	function
(	O
strchr	function
(	O
buf	array
,	O
'='	O
)	O
+	O
2	int
)	O
;	O
}	O
}	O
fclose	function
(	O
config_file	pointer
)	O
;	O
if	O
(	O
NEW_GNU_DOS_LEVEL	int
)	O
GNU_DOS_LEVEL	int
=	O
NEW_GNU_DOS_LEVEL	int
;	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
6	int
||	O
GNU_DOS_LEVEL	int
<	O
1	int
)	O
GNU_DOS_LEVEL	int
=	O
1	int
;	O
return	O
1	int
;	O
}	O
int	O
write_config_file_defaults	function
(	O
)	O
{	O
if	O
(	O
!	O
(	O
pass	pointer
=	O
getpwuid	function
(	O
geteuid	function
(	O
)	O
)	O
)	O
)	O
{	O
return	O
0	int
;	O
}	O
config_file_name	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
pass	pointer
->	O
pw_dir	pointer
)	O
+	O
12	int
)	O
;	O
if	O
(	O
!	O
config_file_name	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Insufficient memory\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
strcpy	function
(	O
config_file_name	pointer
,	O
pass	pointer
->	O
pw_dir	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
config_file_name	pointer
,	O
".prime.conf"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
config_file	pointer
=	O
fopen	function
(	O
config_file_name	pointer
,	O
"w"	pointer
)	O
)	O
)	O
{	O
return	O
0	int
;	O
}	O
fprintf	function
(	O
config_file	pointer
,	O
"#Configuration file for the prime program\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"#Please do not modify this file by hand\n\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"#Display colors\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_WIN = 37\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_HLT = 34\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_MBAR = 34\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_SBAR = 34\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_HBUT = 32\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"FG_COLOR_BUT = 37\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_WIN = 49\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_HLT = 47\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_MBAR = 47\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_SBAR = 47\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_HBUT = 41\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"BG_COLOR_BUT = 41\n\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"#GnuDOS Level\n"	pointer
)	O
;	O
fprintf	function
(	O
config_file	pointer
,	O
"GNU_DOS_LEVEL = %d\n"	pointer
,	O
GNU_DOS_LEVEL	int
)	O
;	O
fclose	function
(	O
config_file	pointer
)	O
;	O
return	O
1	int
;	O
}	O
