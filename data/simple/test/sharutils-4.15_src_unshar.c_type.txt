static	O
inline	O
unsigned	O
char	O
to_uchar	function
(	O
char	O
ch	char
)	O
{	O
return	O
ch	char
;	O
}	O
size_t	long
rw_base_size	long
=	O
0	int
;	O
char	O
*	O
rw_buffer	pointer
=	O
NULL	O
;	O
static	O
bool	bool
looks_like_c_code	function
(	O
char	O
const	O
*	O
buf	array
)	O
{	O
static	O
char	O
const	O
*	O
const	O
directives	array
[	O
]	O
=	O
{	O
"include"	pointer
,	O
"define"	pointer
,	O
"ifdef"	pointer
,	O
"ifndef"	pointer
,	O
"if"	pointer
,	O
"pragma"	pointer
,	O
"undef"	pointer
,	O
"elif"	pointer
,	O
"error"	pointer
,	O
"line"	pointer
,	O
NULL	O
}	O
;	O
while	O
(	O
isspace	function
(	O
to_uchar	function
(	O
*	O
buf	array
)	O
)	O
)	O
buf	array
++	O
;	O
switch	O
(	O
*	O
(	O
buf	array
++	O
)	O
)	O
{	O
case	O
'#'	O
:	O
{	O
int	O
ix	int
=	O
0	int
;	O
while	O
(	O
isspace	function
(	O
(	O
int	O
)	O
*	O
buf	array
)	O
)	O
buf	array
++	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
const	O
*	O
dir	pointer
=	O
directives	array
[	O
ix	int
++	O
]	O
;	O
size_t	long
ln	long
;	O
if	O
(	O
dir	pointer
==	O
NULL	O
)	O
return	O
false	int
;	O
ln	long
=	O
strlen	function
(	O
dir	pointer
)	O
;	O
if	O
(	O
(	O
strncmp	function
(	O
buf	array
,	O
dir	pointer
,	O
ln	long
)	O
==	O
0	int
)	O
&&	O
isspace	function
(	O
(	O
int	O
)	O
buf	array
[	O
ln	long
]	O
)	O
)	O
return	O
true	int
;	O
}	O
}	O
case	O
'/'	O
:	O
return	O
(	O
(	O
*	O
buf	array
==	O
'*'	O
)	O
||	O
(	O
*	O
buf	array
==	O
'/'	O
)	O
)	O
;	O
default	O
:	O
return	O
false	int
;	O
}	O
}	O
static	O
bool	bool
looks_like_shell_code	function
(	O
char	O
const	O
*	O
buf	array
)	O
{	O
while	O
(	O
isspace	function
(	O
(	O
int	O
)	O
*	O
buf	array
)	O
)	O
buf	array
++	O
;	O
switch	O
(	O
*	O
buf	array
)	O
{	O
case	O
'#'	O
:	O
case	O
':'	O
:	O
return	O
true	int
;	O
default	O
:	O
if	O
(	O
islower	function
(	O
(	O
int	O
)	O
*	O
buf	array
)	O
)	O
break	O
;	O
return	O
false	int
;	O
}	O
{	O
static	O
char	O
const	O
*	O
const	O
cmn_cmds	array
[	O
]	O
=	O
{	O
"echo"	pointer
,	O
"sed"	pointer
,	O
"cat"	pointer
,	O
"if"	pointer
,	O
NULL	O
}	O
;	O
int	O
ix	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
const	O
*	O
cmd	pointer
=	O
cmn_cmds	array
[	O
ix	int
++	O
]	O
;	O
size_t	long
ln	long
;	O
if	O
(	O
cmd	pointer
==	O
NULL	O
)	O
return	O
false	int
;	O
ln	long
=	O
strlen	function
(	O
cmd	pointer
)	O
;	O
if	O
(	O
(	O
strncmp	function
(	O
buf	array
,	O
cmd	pointer
,	O
ln	long
)	O
==	O
0	int
)	O
&&	O
isspace	function
(	O
(	O
int	O
)	O
buf	array
[	O
ln	long
]	O
)	O
)	O
return	O
true	int
;	O
}	O
}	O
}	O
static	O
bool	bool
this_is_cut_line	function
(	O
char	O
const	O
*	O
buf	array
)	O
{	O
static	O
char	O
const	O
*	O
const	O
kwds	array
[	O
]	O
=	O
{	O
"cut"	pointer
,	O
"CUT"	pointer
,	O
"tear"	pointer
,	O
"TEAR"	pointer
}	O
;	O
static	O
char	O
const	O
*	O
const	O
here_here	array
[	O
]	O
=	O
{	O
"here"	pointer
,	O
"HERE"	pointer
}	O
;	O
int	O
ix	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
const	O
*	O
kw	pointer
=	O
kwds	array
[	O
ix	int
]	O
;	O
char	O
const	O
*	O
fnd	pointer
=	O
strstr	function
(	O
buf	array
,	O
kw	pointer
)	O
;	O
if	O
(	O
fnd	pointer
!=	O
NULL	O
)	O
{	O
buf	array
=	O
fnd	pointer
+	O
strlen	function
(	O
kw	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
++	O
ix	int
>=	O
4	int
)	O
return	O
false	int
;	O
}	O
{	O
char	O
const	O
*	O
fnd	pointer
=	O
strstr	function
(	O
buf	array
,	O
kwds	array
[	O
ix	int
]	O
)	O
;	O
if	O
(	O
fnd	pointer
!=	O
NULL	O
)	O
return	O
true	int
;	O
fnd	pointer
=	O
strstr	function
(	O
buf	array
,	O
here_here	array
[	O
ix	int
&	O
1	int
]	O
)	O
;	O
return	O
(	O
fnd	pointer
!=	O
NULL	O
)	O
;	O
}	O
}	O
static	O
bool	bool
next_line_is_valid	function
(	O
char	O
const	O
*	O
name	pointer
,	O
FILE	struct
*	O
file	pointer
)	O
{	O
off_t	long
position	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
*	O
buf	array
;	O
position	long
=	O
ftello	function
(	O
file	pointer
)	O
;	O
buf	array
=	O
fgets	function
(	O
rw_buffer	pointer
,	O
rw_base_size	long
,	O
file	pointer
)	O
;	O
if	O
(	O
buf	array
==	O
NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Found no shell commands after cut line in %s"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
false	int
;	O
}	O
while	O
(	O
isspace	function
(	O
(	O
int	O
)	O
*	O
buf	array
)	O
)	O
buf	array
++	O
;	O
if	O
(	O
*	O
buf	array
!=	O
'\0'	O
)	O
break	O
;	O
}	O
if	O
(	O
islower	function
(	O
(	O
int	O
)	O
*	O
rw_buffer	pointer
)	O
||	O
(	O
*	O
rw_buffer	pointer
==	O
'#'	O
)	O
||	O
(	O
*	O
rw_buffer	pointer
==	O
':'	O
)	O
)	O
{	O
fseeko	function
(	O
file	pointer
,	O
position	long
,	O
SEEK_SET	int
)	O
;	O
return	O
true	int
;	O
}	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s is probably not a shell archive"	pointer
)	O
,	O
name	pointer
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"The 'cut line' was followed by: %s"	pointer
)	O
,	O
rw_buffer	pointer
)	O
;	O
return	O
false	int
;	O
}	O
static	O
bool	bool
find_archive	function
(	O
char	O
const	O
*	O
name	pointer
,	O
FILE	struct
*	O
file	pointer
,	O
off_t	long
start	long
)	O
{	O
fseeko	function
(	O
file	pointer
,	O
start	long
,	O
SEEK_SET	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
off_t	long
position	long
=	O
ftello	function
(	O
file	pointer
)	O
;	O
if	O
(	O
!	O
fgets	function
(	O
rw_buffer	pointer
,	O
BUFSIZ	int
,	O
file	pointer
)	O
)	O
{	O
if	O
(	O
!	O
start	long
)	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Found no shell commands in %s"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
looks_like_c_code	function
(	O
rw_buffer	pointer
)	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s looks like raw C code, not a shell archive"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
looks_like_shell_code	function
(	O
rw_buffer	pointer
)	O
)	O
{	O
fseeko	function
(	O
file	pointer
,	O
position	long
,	O
SEEK_SET	int
)	O
;	O
return	O
true	int
;	O
}	O
if	O
(	O
this_is_cut_line	function
(	O
rw_buffer	pointer
)	O
)	O
return	O
next_line_is_valid	function
(	O
name	pointer
,	O
file	pointer
)	O
;	O
}	O
}	O
static	O
char	O
const	O
*	O
get_env_tmpdir	function
(	O
void	O
)	O
{	O
char	O
const	O
*	O
res	pointer
=	O
getenv	function
(	O
"TMPDIR"	pointer
)	O
;	O
return	O
res	pointer
?	O
res	pointer
:	O
"/tmp"	pointer
;	O
}	O
static	O
FILE	struct
*	O
load_file	function
(	O
char	O
const	O
*	O
*	O
tmp_fname	pointer
,	O
FILE	struct
*	O
infp	pointer
)	O
{	O
static	O
char	O
const	O
z_tmpfile	array
[	O
]	O
=	O
"unsh.XXXXXX"	pointer
;	O
char	O
*	O
pz_fname	pointer
;	O
FILE	struct
*	O
outfp	pointer
;	O
{	O
size_t	long
name_size	long
;	O
char	O
const	O
*	O
pz_tmp	pointer
=	O
get_env_tmpdir	function
(	O
)	O
;	O
name_size	long
=	O
strlen	function
(	O
pz_tmp	pointer
)	O
+	O
sizeof	O
(	O
z_tmpfile	array
)	O
+	O
1	int
;	O
*	O
tmp_fname	pointer
=	O
pz_fname	pointer
=	O
malloc	function
(	O
name_size	long
)	O
;	O
if	O
(	O
pz_fname	pointer
==	O
NULL	O
)	O
fserr	function
(	O
UNSHAR_EXIT_NOMEM	int
,	O
"malloc"	pointer
,	O
_	O
(	O
"file name buffer"	pointer
)	O
)	O
;	O
sprintf	function
(	O
pz_fname	pointer
,	O
"%s/%s"	pointer
,	O
pz_tmp	pointer
,	O
z_tmpfile	array
)	O
;	O
}	O
{	O
int	O
fd	array
=	O
mkstemp	function
(	O
pz_fname	pointer
)	O
;	O
if	O
(	O
fd	array
<	O
0	int
)	O
fserr	function
(	O
UNSHAR_EXIT_CANNOT_CREATE	int
,	O
"mkstemp"	pointer
,	O
z_tmpfile	array
)	O
;	O
outfp	pointer
=	O
fdopen	function
(	O
fd	array
,	O
"wb+"	pointer
)	O
;	O
}	O
if	O
(	O
outfp	pointer
==	O
NULL	O
)	O
fserr	function
(	O
UNSHAR_EXIT_CANNOT_CREATE	int
,	O
"fdopen"	pointer
,	O
pz_fname	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
size_t	long
size_read	long
=	O
fread	function
(	O
rw_buffer	pointer
,	O
1	int
,	O
rw_base_size	long
,	O
infp	pointer
)	O
;	O
if	O
(	O
size_read	long
==	O
0	int
)	O
break	O
;	O
fwrite	function
(	O
rw_buffer	pointer
,	O
size_read	long
,	O
1	int
,	O
outfp	pointer
)	O
;	O
}	O
rewind	function
(	O
outfp	pointer
)	O
;	O
return	O
outfp	pointer
;	O
}	O
int	O
unshar_file	function
(	O
const	O
char	O
*	O
name	pointer
,	O
FILE	struct
*	O
file	pointer
)	O
{	O
char	O
const	O
*	O
tmp_fname	pointer
=	O
NULL	O
;	O
off_t	long
curr_pos	long
;	O
curr_pos	long
=	O
ftello	function
(	O
file	pointer
)	O
;	O
if	O
(	O
curr_pos	long
<	O
0	int
)	O
{	O
file	pointer
=	O
load_file	function
(	O
&	O
tmp_fname	pointer
,	O
file	pointer
)	O
;	O
curr_pos	long
=	O
ftello	function
(	O
file	pointer
)	O
;	O
if	O
(	O
curr_pos	long
<	O
0	int
)	O
fserr	function
(	O
UNSHAR_EXIT_CANNOT_CREATE	int
,	O
"ftell"	pointer
,	O
tmp_fname	pointer
)	O
;	O
}	O
while	O
(	O
find_archive	function
(	O
name	pointer
,	O
file	pointer
,	O
curr_pos	long
)	O
)	O
{	O
char	O
const	O
*	O
cmd	pointer
=	O
HAVE_OPT	O
(	O
OVERWRITE	O
)	O
?	O
"sh -s - -c"	pointer
:	O
"sh"	pointer
;	O
FILE	struct
*	O
shell_fp	pointer
=	O
popen	function
(	O
cmd	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
shell_fp	pointer
==	O
NULL	O
)	O
fserr	function
(	O
UNSHAR_EXIT_POPEN_PROBLEM	int
,	O
"popen"	pointer
,	O
cmd	pointer
)	O
;	O
if	O
(	O
HAVE_OPT	O
(	O
DIRECTORY	O
)	O
)	O
fprintf	function
(	O
shell_fp	pointer
,	O
"cd %s >/dev/null || exit 1\n"	pointer
,	O
OPT_ARG	O
(	O
DIRECTORY	O
)	O
)	O
;	O
printf	function
(	O
"%s:\n"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
!	O
HAVE_OPT	O
(	O
SPLIT_AT	O
)	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
size_t	long
len	long
=	O
fread	function
(	O
rw_buffer	pointer
,	O
1	int
,	O
rw_base_size	long
,	O
file	pointer
)	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
break	O
;	O
fwrite	function
(	O
rw_buffer	pointer
,	O
1	int
,	O
len	long
,	O
shell_fp	pointer
)	O
;	O
}	O
pclose	function
(	O
shell_fp	pointer
)	O
;	O
break	O
;	O
}	O
else	O
{	O
char	O
*	O
text_in	pointer
;	O
while	O
(	O
text_in	pointer
=	O
fgets	function
(	O
rw_buffer	pointer
,	O
rw_base_size	long
,	O
file	pointer
)	O
,	O
text_in	pointer
!=	O
NULL	O
)	O
{	O
fputs	function
(	O
rw_buffer	pointer
,	O
shell_fp	pointer
)	O
;	O
if	O
(	O
!	O
strncmp	function
(	O
OPT_ARG	O
(	O
SPLIT_AT	O
)	O
,	O
rw_buffer	pointer
,	O
separator_str_len	long
)	O
)	O
break	O
;	O
}	O
pclose	function
(	O
shell_fp	pointer
)	O
;	O
if	O
(	O
text_in	pointer
==	O
NULL	O
)	O
break	O
;	O
curr_pos	long
=	O
ftello	function
(	O
file	pointer
)	O
;	O
}	O
}	O
if	O
(	O
tmp_fname	pointer
!=	O
NULL	O
)	O
{	O
unlink	function
(	O
tmp_fname	pointer
)	O
;	O
free	function
(	O
(	O
void	O
*	O
)	O
tmp_fname	pointer
)	O
;	O
}	O
return	O
UNSHAR_EXIT_SUCCESS	int
;	O
}	O
void	O
init_unshar	function
(	O
void	O
)	O
{	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
rw_base_size	long
=	O
GET_PAGE_SIZE	O
;	O
rw_buffer	pointer
=	O
malloc	function
(	O
rw_base_size	long
)	O
;	O
if	O
(	O
rw_buffer	pointer
==	O
NULL	O
)	O
fserr	function
(	O
UNSHAR_EXIT_NOMEM	int
,	O
"malloc"	pointer
,	O
_	O
(	O
"read/write buffer"	pointer
)	O
)	O
;	O
}	O
