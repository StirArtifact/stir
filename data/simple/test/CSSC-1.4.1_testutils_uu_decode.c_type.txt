static	O
inline	O
void	O
encode	function
(	O
const	O
char	O
in	array
[	O
3	int
]	O
,	O
char	O
out	array
[	O
4	int
]	O
)	O
{	O
out	array
[	O
0	int
]	O
=	O
UUENC	O
(	O
(	O
(	O
in	array
[	O
0	int
]	O
>>	O
2	int
)	O
)	O
)	O
;	O
out	array
[	O
1	int
]	O
=	O
UUENC	O
(	O
(	O
(	O
in	array
[	O
0	int
]	O
<<	O
4	int
)	O
&	O
060	int
)	O
|	O
(	O
(	O
in	array
[	O
1	int
]	O
>>	O
4	int
)	O
&	O
017	int
)	O
)	O
;	O
out	array
[	O
2	int
]	O
=	O
UUENC	O
(	O
(	O
(	O
in	array
[	O
1	int
]	O
<<	O
2	int
)	O
&	O
074	int
)	O
|	O
(	O
(	O
in	array
[	O
2	int
]	O
>>	O
6	int
)	O
&	O
003	int
)	O
)	O
;	O
out	array
[	O
3	int
]	O
=	O
UUENC	O
(	O
(	O
(	O
in	array
[	O
2	int
]	O
&	O
077	int
)	O
)	O
)	O
;	O
}	O
static	O
inline	O
void	O
decode	function
(	O
const	O
char	O
in	array
[	O
4	int
]	O
,	O
char	O
out	array
[	O
3	int
]	O
)	O
{	O
const	O
int	O
t0	int
=	O
UUDEC	O
(	O
in	array
[	O
0	int
]	O
)	O
;	O
const	O
int	O
t1	int
=	O
UUDEC	O
(	O
in	array
[	O
1	int
]	O
)	O
;	O
const	O
int	O
t2	int
=	O
UUDEC	O
(	O
in	array
[	O
2	int
]	O
)	O
;	O
const	O
int	O
t3	int
=	O
UUDEC	O
(	O
in	array
[	O
3	int
]	O
)	O
;	O
out	array
[	O
0	int
]	O
=	O
(	O
t0	int
<<	O
2	int
)	O
|	O
(	O
t1	int
>>	O
4	int
)	O
;	O
out	array
[	O
1	int
]	O
=	O
(	O
t1	int
<<	O
4	int
)	O
|	O
(	O
t2	int
>>	O
2	int
)	O
;	O
out	array
[	O
2	int
]	O
=	O
(	O
t2	int
<<	O
6	int
)	O
|	O
(	O
t3	int
)	O
;	O
}	O
int	O
decode_line	function
(	O
const	O
char	O
in	array
[	O
]	O
,	O
char	O
out	array
[	O
]	O
)	O
{	O
int	O
len	int
=	O
UUDEC	O
(	O
in	array
[	O
0	int
]	O
)	O
;	O
int	O
n	int
;	O
if	O
(	O
len	int
<=	O
0	int
)	O
return	O
0	int
;	O
++	O
in	array
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
len	int
;	O
n	int
+=	O
3	int
)	O
{	O
decode	function
(	O
in	array
,	O
out	array
)	O
;	O
in	array
+=	O
4	int
;	O
out	array
+=	O
3	int
;	O
}	O
return	O
len	int
;	O
}	O
void	O
encode_line	function
(	O
const	O
char	O
in	array
[	O
]	O
,	O
char	O
out	array
[	O
]	O
,	O
int	O
len	int
)	O
{	O
*	O
out	array
++	O
=	O
UUENC	O
(	O
len	int
)	O
;	O
while	O
(	O
len	int
>	O
0	int
)	O
{	O
encode	function
(	O
in	array
,	O
out	array
)	O
;	O
in	array
+=	O
3	int
;	O
out	array
+=	O
4	int
;	O
len	int
-=	O
3	int
;	O
}	O
*	O
out	array
++	O
=	O
'\n'	O
;	O
*	O
out	array
++	O
=	O
'\0'	O
;	O
}	O
int	O
encode_stream	function
(	O
FILE	struct
*	O
fin	pointer
,	O
FILE	struct
*	O
fout	pointer
)	O
{	O
char	O
inbuf	array
[	O
80	int
]	O
,	O
outbuf	array
[	O
80	int
]	O
;	O
int	O
len	int
;	O
do	O
{	O
len	int
=	O
fread	function
(	O
inbuf	array
,	O
1	int
,	O
45	int
,	O
fin	pointer
)	O
;	O
encode_line	function
(	O
inbuf	array
,	O
outbuf	array
,	O
len	int
)	O
;	O
fprintf	function
(	O
fout	pointer
,	O
"%s"	pointer
,	O
outbuf	array
)	O
;	O
}	O
while	O
(	O
len	int
)	O
;	O
return	O
ferror	function
(	O
fin	pointer
)	O
||	O
ferror	function
(	O
fout	pointer
)	O
;	O
}	O
int	O
test_encode	function
(	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
int	O
rv	int
;	O
printf	function
(	O
"begin 600 %s\n"	pointer
,	O
arg	pointer
)	O
;	O
rv	int
=	O
encode_stream	function
(	O
stdin	pointer
,	O
stdout	pointer
)	O
;	O
printf	function
(	O
"end\n"	pointer
)	O
;	O
return	O
rv	int
;	O
}	O
int	O
test_decode	function
(	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
char	O
inbuf	array
[	O
80	int
]	O
,	O
outbuf	array
[	O
80	int
]	O
;	O
int	O
mode	int
,	O
nf	int
,	O
expect_end_line	int
;	O
FILE	struct
*	O
fp_output	pointer
;	O
(	O
void	O
)	O
arg	pointer
;	O
if	O
(	O
0	int
!=	O
fgets	function
(	O
inbuf	array
,	O
sizeof	O
(	O
inbuf	array
)	O
-	O
1	int
,	O
stdin	pointer
)	O
)	O
{	O
nf	int
=	O
sscanf	function
(	O
inbuf	array
,	O
"begin %o %[^\n]"	pointer
,	O
&	O
mode	int
,	O
outbuf	array
)	O
;	O
if	O
(	O
nf	int
<	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"No \"begin\" line\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
nf	int
!=	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"No filename on \"begin\" line\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
fp_output	pointer
=	O
fopen	function
(	O
outbuf	array
,	O
"wb"	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
fp_output	pointer
)	O
{	O
perror	function
(	O
outbuf	array
)	O
;	O
return	O
1	int
;	O
}	O
fchmod	function
(	O
fileno	function
(	O
fp_output	pointer
)	O
,	O
mode	int
)	O
;	O
}	O
}	O
expect_end_line	int
=	O
0	int
;	O
while	O
(	O
0	int
!=	O
fgets	function
(	O
inbuf	array
,	O
sizeof	O
(	O
inbuf	array
)	O
-	O
1	int
,	O
stdin	pointer
)	O
)	O
{	O
if	O
(	O
expect_end_line	int
)	O
{	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
inbuf	array
,	O
"end\n"	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Expected \"end\" line\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
else	O
{	O
int	O
len	int
=	O
decode_line	function
(	O
inbuf	array
,	O
outbuf	array
)	O
;	O
if	O
(	O
0	int
==	O
len	int
)	O
{	O
expect_end_line	int
=	O
1	int
;	O
}	O
else	O
{	O
fwrite	function
(	O
outbuf	array
,	O
1	int
,	O
len	int
,	O
fp_output	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
errno	O
)	O
perror	function
(	O
"Error reading input file"	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"Unexcpectedly reached end-of-file\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
int	O
test_all	function
(	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
union	O
lunch	union
{	O
long	O
l	long
;	O
char	O
ch	array
[	O
4	int
]	O
;	O
}	O
in	array
,	O
out	array
;	O
long	O
l0	long
,	O
l1	long
,	O
l2	long
,	O
lo	long
;	O
long	O
i	long
;	O
(	O
void	O
)	O
arg	pointer
;	O
const	O
long	O
maxval	long
=	O
0xff	int
|	O
(	O
0xff	int
<<	O
8	int
)	O
|	O
(	O
0xff	int
<<	O
16	int
)	O
;	O
const	O
double	O
dmaxval	double
=	O
maxval	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
maxval	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
0x7FFFF	int
==	O
(	O
i	long
&	O
0x7FFFF	int
)	O
)	O
{	O
double	O
completed	double
=	O
(	O
100.0	int
*	O
i	long
)	O
/	O
dmaxval	double
;	O
printf	function
(	O
"%06lx %3.0f%%...\n"	pointer
,	O
i	long
,	O
completed	double
)	O
;	O
}	O
in	array
.	O
ch	array
[	O
0	int
]	O
=	O
(	O
i	long
&	O
0x0000ff	int
)	O
>>	O
0	int
;	O
in	array
.	O
ch	array
[	O
1	int
]	O
=	O
(	O
i	long
&	O
0x00ff00	int
)	O
>>	O
8	int
;	O
in	array
.	O
ch	array
[	O
2	int
]	O
=	O
(	O
i	long
&	O
0xff0000	int
)	O
>>	O
16	int
;	O
in	array
.	O
ch	array
[	O
3	int
]	O
=	O
'\0'	O
;	O
encode	function
(	O
in	array
.	O
ch	array
,	O
out	array
.	O
ch	array
)	O
;	O
decode	function
(	O
out	array
.	O
ch	array
,	O
in	array
.	O
ch	array
)	O
;	O
l0	long
=	O
(	O
(	O
unsigned	O
char	O
)	O
in	array
.	O
ch	array
[	O
0	int
]	O
)	O
&	O
0xff	int
;	O
l1	long
=	O
(	O
(	O
unsigned	O
char	O
)	O
in	array
.	O
ch	array
[	O
1	int
]	O
)	O
&	O
0xff	int
;	O
l2	long
=	O
(	O
(	O
unsigned	O
char	O
)	O
in	array
.	O
ch	array
[	O
2	int
]	O
)	O
&	O
0xff	int
;	O
lo	long
=	O
l0	long
|	O
l1	long
<<	O
8	int
|	O
l2	long
<<	O
16	int
;	O
if	O
(	O
lo	long
!=	O
i	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Asymmetry!\n"	pointer
"Input was %06lx, output was %05lx\n"	pointer
,	O
i	long
,	O
lo	long
)	O
;	O
return	O
1	int
;	O
}	O
}	O
printf	function
(	O
"Success!\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
options	array
[	O
]	O
=	O
{	O
"--encode"	pointer
,	O
"--decode"	pointer
,	O
"--all"	pointer
}	O
;	O
int	O
(	O
*	O
const	O
actions	array
[	O
]	O
)	O
(	O
const	O
char	O
*	O
)	O
=	O
{	O
test_encode	function
,	O
test_decode	function
,	O
test_all	function
}	O
;	O
static	O
void	O
usage	function
(	O
const	O
char	O
*	O
prog	pointer
)	O
{	O
size_t	long
i	long
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s ["	pointer
,	O
prog	pointer
?	O
prog	pointer
:	O
"uu_decode"	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NELEM	O
(	O
options	array
)	O
;	O
++	O
i	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s %s"	pointer
,	O
(	O
i	long
>	O
0	int
)	O
?	O
" |"	pointer
:	O
""	pointer
,	O
options	array
[	O
i	long
]	O
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
" ]\n"	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
size_t	long
i	long
;	O
const	O
char	O
*	O
argument	pointer
;	O
if	O
(	O
argc	int
==	O
3	int
)	O
{	O
argument	pointer
=	O
argv	array
[	O
2	int
]	O
;	O
}	O
else	O
if	O
(	O
argc	int
==	O
2	int
)	O
{	O
argument	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
usage	function
(	O
argv	array
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NELEM	O
(	O
options	array
)	O
;	O
++	O
i	long
)	O
{	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
options	array
[	O
i	long
]	O
,	O
argv	array
[	O
1	int
]	O
)	O
)	O
{	O
return	O
(	O
actions	array
[	O
i	long
]	O
)	O
(	O
argument	pointer
)	O
;	O
}	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"Unknown option %s\n"	pointer
,	O
argv	array
[	O
1	int
]	O
)	O
;	O
usage	function
(	O
argv	array
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
