int	O
find_user	function
(	O
char	O
*	O
name	pointer
,	O
char	O
*	O
tty	pointer
)	O
;	O
void	O
do_announce	function
(	O
CTL_MSG	struct
*	O
mp	pointer
,	O
CTL_RESPONSE	struct
*	O
rp	pointer
)	O
;	O
int	O
process_request	function
(	O
CTL_MSG	struct
*	O
msg	pointer
,	O
struct	O
sockaddr_in	struct
*	O
sa_in	pointer
,	O
CTL_RESPONSE	struct
*	O
rp	pointer
)	O
{	O
CTL_MSG	struct
*	O
ptr	pointer
;	O
if	O
(	O
debug	int
)	O
{	O
print_request	function
(	O
"process_request"	pointer
,	O
msg	pointer
)	O
;	O
}	O
if	O
(	O
acl_match	function
(	O
msg	pointer
,	O
sa_in	pointer
)	O
)	O
{	O
syslog	function
(	O
LOG_NOTICE	int
,	O
"dropping request: %s@%s"	pointer
,	O
msg	pointer
->	O
l_name	array
,	O
inet_ntoa	function
(	O
sa_in	pointer
->	O
sin_addr	struct
)	O
)	O
;	O
return	O
1	int
;	O
}	O
rp	pointer
->	O
vers	char
=	O
TALK_VERSION	int
;	O
rp	pointer
->	O
type	char
=	O
msg	pointer
->	O
type	char
;	O
rp	pointer
->	O
id_num	int
=	O
htonl	function
(	O
0	int
)	O
;	O
if	O
(	O
msg	pointer
->	O
vers	char
!=	O
TALK_VERSION	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"Bad protocol version %d"	pointer
,	O
msg	pointer
->	O
vers	char
)	O
;	O
rp	pointer
->	O
answer	char
=	O
BADVERSION	int
;	O
return	O
0	int
;	O
}	O
msg	pointer
->	O
id_num	int
=	O
ntohl	function
(	O
msg	pointer
->	O
id_num	int
)	O
;	O
msg	pointer
->	O
addr	struct
.	O
sa_family	short
=	O
ntohs	function
(	O
msg	pointer
->	O
addr	struct
.	O
sa_family	short
)	O
;	O
if	O
(	O
msg	pointer
->	O
addr	struct
.	O
sa_family	short
!=	O
AF_INET	O
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"Bad address, family %d"	pointer
,	O
msg	pointer
->	O
addr	struct
.	O
sa_family	short
)	O
;	O
rp	pointer
->	O
answer	char
=	O
BADADDR	int
;	O
return	O
0	int
;	O
}	O
msg	pointer
->	O
ctl_addr	struct
.	O
sa_family	short
=	O
ntohs	function
(	O
msg	pointer
->	O
ctl_addr	struct
.	O
sa_family	short
)	O
;	O
if	O
(	O
msg	pointer
->	O
ctl_addr	struct
.	O
sa_family	short
!=	O
AF_INET	O
)	O
{	O
syslog	function
(	O
LOG_WARNING	int
,	O
"Bad control address, family %d"	pointer
,	O
msg	pointer
->	O
ctl_addr	struct
.	O
sa_family	short
)	O
;	O
rp	pointer
->	O
answer	char
=	O
BADCTLADDR	int
;	O
return	O
0	int
;	O
}	O
msg	pointer
->	O
pid	int
=	O
ntohl	function
(	O
msg	pointer
->	O
pid	int
)	O
;	O
switch	O
(	O
msg	pointer
->	O
type	char
)	O
{	O
case	O
ANNOUNCE	int
:	O
do_announce	function
(	O
msg	pointer
,	O
rp	pointer
)	O
;	O
break	O
;	O
case	O
LEAVE_INVITE	int
:	O
ptr	pointer
=	O
find_request	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
ptr	pointer
)	O
{	O
rp	pointer
->	O
id_num	int
=	O
htonl	function
(	O
ptr	pointer
->	O
id_num	int
)	O
;	O
rp	pointer
->	O
answer	char
=	O
SUCCESS	int
;	O
}	O
else	O
insert_table	function
(	O
msg	pointer
,	O
rp	pointer
)	O
;	O
break	O
;	O
case	O
LOOK_UP	int
:	O
ptr	pointer
=	O
find_match	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
ptr	pointer
)	O
{	O
rp	pointer
->	O
id_num	int
=	O
htonl	function
(	O
ptr	pointer
->	O
id_num	int
)	O
;	O
rp	pointer
->	O
addr	struct
=	O
ptr	pointer
->	O
addr	struct
;	O
rp	pointer
->	O
addr	struct
.	O
sa_family	short
=	O
htons	function
(	O
ptr	pointer
->	O
addr	struct
.	O
sa_family	short
)	O
;	O
rp	pointer
->	O
answer	char
=	O
SUCCESS	int
;	O
}	O
else	O
rp	pointer
->	O
answer	char
=	O
NOT_HERE	int
;	O
break	O
;	O
case	O
DELETE	int
:	O
rp	pointer
->	O
answer	char
=	O
delete_invite	function
(	O
msg	pointer
->	O
id_num	int
)	O
;	O
break	O
;	O
default	O
:	O
rp	pointer
->	O
answer	char
=	O
UNKNOWN_REQUEST	int
;	O
break	O
;	O
}	O
if	O
(	O
debug	int
)	O
print_response	function
(	O
"process_request response"	pointer
,	O
rp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
do_announce	function
(	O
CTL_MSG	struct
*	O
mp	pointer
,	O
CTL_RESPONSE	struct
*	O
rp	pointer
)	O
{	O
struct	O
hostent	struct
*	O
hp	pointer
;	O
CTL_MSG	struct
*	O
ptr	pointer
;	O
int	O
result	int
;	O
result	int
=	O
find_user	function
(	O
mp	pointer
->	O
r_name	array
,	O
mp	pointer
->	O
r_tty	array
)	O
;	O
if	O
(	O
result	int
!=	O
SUCCESS	int
)	O
{	O
rp	pointer
->	O
answer	char
=	O
result	int
;	O
return	O
;	O
}	O
hp	pointer
=	O
gethostbyaddr	function
(	O
(	O
char	O
*	O
)	O
&	O
os2sin_addr	O
(	O
mp	pointer
->	O
ctl_addr	struct
)	O
,	O
sizeof	O
(	O
struct	O
in_addr	struct
)	O
,	O
AF_INET	O
)	O
;	O
if	O
(	O
!	O
hp	pointer
)	O
{	O
rp	pointer
->	O
answer	char
=	O
MACHINE_UNKNOWN	int
;	O
return	O
;	O
}	O
ptr	pointer
=	O
find_request	function
(	O
mp	pointer
)	O
;	O
if	O
(	O
!	O
ptr	pointer
)	O
{	O
insert_table	function
(	O
mp	pointer
,	O
rp	pointer
)	O
;	O
rp	pointer
->	O
answer	char
=	O
announce	function
(	O
mp	pointer
,	O
hp	pointer
->	O
h_name	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
mp	pointer
->	O
id_num	int
>	O
ptr	pointer
->	O
id_num	int
)	O
{	O
ptr	pointer
->	O
id_num	int
=	O
new_id	function
(	O
)	O
;	O
rp	pointer
->	O
id_num	int
=	O
htonl	function
(	O
ptr	pointer
->	O
id_num	int
)	O
;	O
rp	pointer
->	O
answer	char
=	O
announce	function
(	O
mp	pointer
,	O
hp	pointer
->	O
h_name	pointer
)	O
;	O
}	O
else	O
{	O
rp	pointer
->	O
id_num	int
=	O
htonl	function
(	O
ptr	pointer
->	O
id_num	int
)	O
;	O
rp	pointer
->	O
answer	char
=	O
SUCCESS	int
;	O
}	O
}	O
int	O
find_user	function
(	O
char	O
*	O
name	pointer
,	O
char	O
*	O
tty	pointer
)	O
{	O
STRUCT_UTMP	struct
*	O
utmpbuf	pointer
,	O
*	O
uptr	pointer
;	O
size_t	long
utmp_count	long
;	O
int	O
status	int
;	O
struct	O
stat	struct
statb	struct
;	O
char	O
ftty	array
[	O
sizeof	O
(	O
PATH_DEV	O
)	O
+	O
sizeof	O
(	O
uptr	pointer
->	O
ut_line	array
)	O
]	O
;	O
time_t	long
last_time	long
=	O
0	int
;	O
int	O
notty	int
;	O
notty	int
=	O
(	O
*	O
tty	pointer
==	O
'\0'	O
)	O
;	O
status	int
=	O
NOT_HERE	int
;	O
strcpy	function
(	O
ftty	array
,	O
PATH_DEV	O
)	O
;	O
read_utmp	function
(	O
PATH_UTMP	O
,	O
&	O
utmp_count	long
,	O
&	O
utmpbuf	pointer
,	O
READ_UTMP_USER_PROCESS	int
|	O
READ_UTMP_CHECK_PIDS	int
)	O
;	O
for	O
(	O
uptr	pointer
=	O
utmpbuf	pointer
;	O
uptr	pointer
<	O
utmpbuf	pointer
+	O
utmp_count	long
;	O
uptr	pointer
++	O
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
UT_USER	O
(	O
uptr	pointer
)	O
,	O
name	pointer
,	O
sizeof	O
(	O
UT_USER	O
(	O
uptr	pointer
)	O
)	O
)	O
)	O
{	O
if	O
(	O
notty	int
)	O
{	O
strncpy	function
(	O
ftty	array
+	O
sizeof	O
(	O
PATH_DEV	O
)	O
-	O
1	int
,	O
uptr	pointer
->	O
ut_line	array
,	O
sizeof	O
(	O
ftty	array
)	O
-	O
sizeof	O
(	O
PATH_DEV	O
)	O
-	O
1	int
)	O
;	O
ftty	array
[	O
sizeof	O
(	O
ftty	array
)	O
-	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
stat	struct
(	O
ftty	array
,	O
&	O
statb	struct
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
(	O
statb	struct
.	O
st_mode	int
&	O
S_IWGRP	O
)	O
)	O
{	O
if	O
(	O
status	int
!=	O
SUCCESS	int
)	O
status	int
=	O
PERMISSION_DENIED	int
;	O
continue	O
;	O
}	O
if	O
(	O
statb	struct
.	O
st_atime	O
>	O
last_time	long
)	O
{	O
last_time	long
=	O
statb	struct
.	O
st_atime	O
;	O
strcpy	function
(	O
tty	pointer
,	O
uptr	pointer
->	O
ut_line	array
)	O
;	O
status	int
=	O
SUCCESS	int
;	O
}	O
continue	O
;	O
}	O
}	O
if	O
(	O
!	O
strcmp	function
(	O
uptr	pointer
->	O
ut_line	array
,	O
tty	pointer
)	O
)	O
{	O
status	int
=	O
SUCCESS	int
;	O
break	O
;	O
}	O
}	O
}	O
free	function
(	O
utmpbuf	pointer
)	O
;	O
return	O
status	int
;	O
}	O
