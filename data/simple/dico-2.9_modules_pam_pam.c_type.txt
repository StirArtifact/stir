static	O
char	O
*	O
service	pointer
=	O
"dicod"	pointer
;	O
struct	O
pam_cred	struct
{	O
const	O
char	O
*	O
user	pointer
;	O
const	O
char	O
*	O
pass	pointer
;	O
}	O
;	O
static	O
int	O
_dico_conv	function
(	O
int	O
num_msg	int
,	O
const	O
struct	O
pam_message	O
*	O
*	O
msg	pointer
,	O
struct	O
pam_response	O
*	O
*	O
resp	pointer
,	O
void	O
*	O
appdata_ptr	pointer
)	O
{	O
int	O
status	int
=	O
PAM_SUCCESS	O
;	O
int	O
i	int
;	O
struct	O
pam_response	O
*	O
reply	pointer
=	O
NULL	O
;	O
struct	O
pam_cred	struct
*	O
cred	pointer
=	O
appdata_ptr	pointer
;	O
reply	pointer
=	O
calloc	function
(	O
num_msg	int
,	O
sizeof	O
(	O
*	O
reply	pointer
)	O
)	O
;	O
if	O
(	O
!	O
reply	pointer
)	O
return	O
PAM_CONV_ERR	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_msg	int
&&	O
status	int
==	O
PAM_SUCCESS	O
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
msg	pointer
[	O
i	int
]	O
->	O
msg_style	O
)	O
{	O
case	O
PAM_PROMPT_ECHO_ON	O
:	O
reply	pointer
[	O
i	int
]	O
.	O
resp_retcode	O
=	O
PAM_SUCCESS	O
;	O
reply	pointer
[	O
i	int
]	O
.	O
resp	pointer
=	O
COPY_STRING	O
(	O
cred	pointer
->	O
user	pointer
)	O
;	O
break	O
;	O
case	O
PAM_PROMPT_ECHO_OFF	O
:	O
if	O
(	O
cred	pointer
->	O
pass	pointer
)	O
{	O
reply	pointer
[	O
i	int
]	O
.	O
resp_retcode	O
=	O
PAM_SUCCESS	O
;	O
reply	pointer
[	O
i	int
]	O
.	O
resp	pointer
=	O
COPY_STRING	O
(	O
cred	pointer
->	O
pass	pointer
)	O
;	O
}	O
else	O
status	int
=	O
PAM_AUTHTOK_RECOVER_ERR	O
;	O
break	O
;	O
case	O
PAM_TEXT_INFO	O
:	O
case	O
PAM_ERROR_MSG	O
:	O
reply	pointer
[	O
i	int
]	O
.	O
resp_retcode	O
=	O
PAM_SUCCESS	O
;	O
reply	pointer
[	O
i	int
]	O
.	O
resp	pointer
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
status	int
=	O
PAM_CONV_ERR	O
;	O
}	O
}	O
if	O
(	O
status	int
!=	O
PAM_SUCCESS	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_msg	int
;	O
i	int
++	O
)	O
if	O
(	O
reply	pointer
[	O
i	int
]	O
.	O
resp	pointer
)	O
{	O
switch	O
(	O
msg	pointer
[	O
i	int
]	O
->	O
msg_style	O
)	O
{	O
case	O
PAM_PROMPT_ECHO_ON	O
:	O
case	O
PAM_PROMPT_ECHO_OFF	O
:	O
overwrite_and_free	O
(	O
reply	pointer
[	O
i	int
]	O
.	O
resp	pointer
)	O
;	O
break	O
;	O
case	O
PAM_ERROR_MSG	O
:	O
case	O
PAM_TEXT_INFO	O
:	O
free	function
(	O
reply	pointer
[	O
i	int
]	O
.	O
resp	pointer
)	O
;	O
}	O
}	O
free	function
(	O
reply	pointer
)	O
;	O
}	O
else	O
*	O
resp	pointer
=	O
reply	pointer
;	O
return	O
status	int
;	O
}	O
static	O
int	O
db_check_pass	function
(	O
void	O
*	O
handle	pointer
,	O
const	O
char	O
*	O
pwres	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
const	O
char	O
*	O
pass	pointer
)	O
{	O
pam_handle_t	O
*	O
pamh	O
;	O
int	O
pamerror	int
;	O
struct	O
pam_cred	struct
cred	pointer
=	O
{	O
key	pointer
,	O
pass	pointer
}	O
;	O
struct	O
pam_conv	O
_dico_pam_conv	struct
=	O
{	O
&	O
_dico_conv	function
,	O
&	O
cred	pointer
}	O
;	O
do	O
{	O
pamerror	int
=	O
pam_start	function
(	O
pwres	pointer
?	O
pwres	pointer
:	O
service	pointer
,	O
key	pointer
,	O
&	O
_dico_pam_conv	struct
,	O
&	O
pamh	O
)	O
;	O
PAM_ERROR	O
;	O
pamerror	int
=	O
pam_authenticate	function
(	O
pamh	O
,	O
0	int
)	O
;	O
PAM_ERROR	O
;	O
pamerror	int
=	O
pam_acct_mgmt	function
(	O
pamh	O
,	O
0	int
)	O
;	O
PAM_ERROR	O
;	O
pamerror	int
=	O
pam_setcred	function
(	O
pamh	O
,	O
PAM_ESTABLISH_CRED	O
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
pam_end	function
(	O
pamh	O
,	O
PAM_SUCCESS	O
)	O
;	O
switch	O
(	O
pamerror	int
)	O
{	O
case	O
PAM_SUCCESS	O
:	O
return	O
0	int
;	O
case	O
PAM_AUTH_ERR	O
:	O
return	O
1	int
;	O
}	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"PAM authentication error"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
db_get_groups	function
(	O
void	O
*	O
handle	pointer
,	O
const	O
char	O
*	O
qgr	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
dico_list_t	pointer
*	O
pgroups	pointer
)	O
{	O
*	O
pgroups	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
dico_udb_def	struct
pam_udb_def	struct
=	O
{	O
"pam"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
db_get_groups	function
,	O
db_check_pass	function
}	O
;	O
static	O
int	O
dico_pam_init	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
dico_option	struct
init_option	array
[	O
]	O
=	O
{	O
{	O
DICO_OPTSTR	O
(	O
service	pointer
)	O
,	O
dico_opt_string	int
,	O
&	O
service	pointer
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
if	O
(	O
dico_parseopt	function
(	O
init_option	array
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
NULL	O
)	O
)	O
return	O
-	O
1	int
;	O
return	O
dico_udb_define	function
(	O
&	O
pam_udb_def	struct
)	O
;	O
}	O
struct	O
dico_database_module	struct
DICO_EXPORT	O
(	O
pam	O
,	O
module	O
)	O
=	O
{	O
DICO_MODULE_VERSION	int
,	O
DICO_CAPA_NODB	int
,	O
dico_pam_init	function
,	O
}	O
;	O
