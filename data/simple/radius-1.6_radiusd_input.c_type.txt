struct	O
input_system	struct
{	O
fd_set	struct
fdset	struct
;	O
int	O
fd_max	int
;	O
grad_list_t	struct
*	O
methods	pointer
;	O
grad_list_t	struct
*	O
channels	pointer
;	O
grad_iterator_t	struct
*	O
citr	pointer
;	O
}	O
;	O
typedef	O
struct	O
input_method	struct
METHOD	struct
;	O
struct	O
input_method	struct
{	O
const	O
char	O
*	O
name	pointer
;	O
int	O
prio	int
;	O
int	O
(	O
*	O
handler	pointer
)	O
(	O
int	O
,	O
void	O
*	O
)	O
;	O
int	O
(	O
*	O
close	pointer
)	O
(	O
int	O
,	O
void	O
*	O
)	O
;	O
int	O
(	O
*	O
cmp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
;	O
}	O
;	O
typedef	O
struct	O
input_channel	struct
CHANNEL	struct
;	O
struct	O
input_channel	struct
{	O
int	O
fd	int
;	O
void	O
*	O
data	pointer
;	O
METHOD	struct
*	O
method	pointer
;	O
}	O
;	O
INPUT	struct
*	O
input_create	function
(	O
)	O
{	O
INPUT	struct
*	O
p	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
methods	pointer
=	O
grad_list_create	function
(	O
)	O
;	O
p	pointer
->	O
channels	pointer
=	O
grad_list_create	function
(	O
)	O
;	O
FD_ZERO	O
(	O
&	O
p	pointer
->	O
fdset	struct
)	O
;	O
p	pointer
->	O
fd_max	int
=	O
-	O
2	int
;	O
return	O
p	pointer
;	O
}	O
static	O
int	O
def_cmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
return	O
a	pointer
!=	O
b	pointer
;	O
}	O
void	O
input_register_method	function
(	O
INPUT	struct
*	O
input	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
prio	int
,	O
int	O
(	O
*	O
handler	pointer
)	O
(	O
int	O
,	O
void	O
*	O
)	O
,	O
int	O
(	O
*	O
close	pointer
)	O
(	O
int	O
,	O
void	O
*	O
)	O
,	O
int	O
(	O
*	O
cmp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
)	O
{	O
METHOD	struct
*	O
m	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
m	pointer
)	O
)	O
;	O
m	pointer
->	O
name	pointer
=	O
name	pointer
;	O
m	pointer
->	O
prio	int
=	O
prio	int
;	O
m	pointer
->	O
handler	pointer
=	O
handler	pointer
;	O
m	pointer
->	O
close	pointer
=	O
close	pointer
;	O
m	pointer
->	O
cmp	pointer
=	O
cmp	pointer
?	O
cmp	pointer
:	O
def_cmp	function
;	O
grad_list_append	function
(	O
input	pointer
->	O
methods	pointer
,	O
m	pointer
)	O
;	O
}	O
static	O
int	O
_method_comp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
const	O
METHOD	struct
*	O
ma	pointer
=	O
a	pointer
;	O
const	O
char	O
*	O
name	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
ma	pointer
->	O
name	pointer
,	O
name	pointer
)	O
;	O
}	O
int	O
_channel_prio_comp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
const	O
CHANNEL	struct
*	O
ca	pointer
=	O
a	pointer
;	O
const	O
CHANNEL	struct
*	O
cb	pointer
=	O
b	pointer
;	O
return	O
ca	pointer
->	O
method	pointer
->	O
prio	int
-	O
cb	pointer
->	O
method	pointer
->	O
prio	int
;	O
}	O
int	O
input_register_channel	function
(	O
INPUT	struct
*	O
input	pointer
,	O
char	O
*	O
name	pointer
,	O
int	O
fd	int
,	O
void	O
*	O
data	pointer
)	O
{	O
CHANNEL	struct
*	O
c	pointer
;	O
METHOD	struct
*	O
m	pointer
=	O
grad_list_locate	function
(	O
input	pointer
->	O
methods	pointer
,	O
name	pointer
,	O
_method_comp	function
)	O
;	O
if	O
(	O
!	O
m	pointer
)	O
return	O
-	O
1	int
;	O
c	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
c	pointer
)	O
)	O
;	O
c	pointer
->	O
fd	int
=	O
fd	int
;	O
c	pointer
->	O
data	pointer
=	O
data	pointer
;	O
c	pointer
->	O
method	pointer
=	O
m	pointer
;	O
FD_SET	O
(	O
fd	int
,	O
&	O
input	pointer
->	O
fdset	struct
)	O
;	O
if	O
(	O
fd	int
>	O
input	pointer
->	O
fd_max	int
)	O
input	pointer
->	O
fd_max	int
=	O
fd	int
;	O
grad_list_insert_sorted	function
(	O
input	pointer
->	O
channels	pointer
,	O
c	pointer
,	O
_channel_prio_comp	function
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
channel_close	function
(	O
INPUT	struct
*	O
input	pointer
,	O
CHANNEL	struct
*	O
chan	pointer
)	O
{	O
if	O
(	O
chan	pointer
->	O
method	pointer
->	O
close	pointer
)	O
chan	pointer
->	O
method	pointer
->	O
close	pointer
(	O
chan	pointer
->	O
fd	int
,	O
chan	pointer
->	O
data	pointer
)	O
;	O
FD_CLR	O
(	O
chan	pointer
->	O
fd	int
,	O
&	O
input	pointer
->	O
fdset	struct
)	O
;	O
input	pointer
->	O
fd_max	int
=	O
-	O
2	int
;	O
grad_free	function
(	O
chan	pointer
)	O
;	O
}	O
static	O
int	O
channel_handle	function
(	O
CHANNEL	struct
*	O
chan	pointer
)	O
{	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"handling method %s"	pointer
,	O
chan	pointer
->	O
method	pointer
->	O
name	pointer
)	O
;	O
return	O
chan	pointer
->	O
method	pointer
->	O
handler	pointer
(	O
chan	pointer
->	O
fd	int
,	O
chan	pointer
->	O
data	pointer
)	O
;	O
}	O
struct	O
_channel_cmp_closure	struct
{	O
char	O
*	O
name	pointer
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
static	O
int	O
_channel_cmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
const	O
CHANNEL	struct
*	O
ca	pointer
=	O
a	pointer
;	O
const	O
struct	O
_channel_cmp_closure	struct
*	O
clos	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
clos	pointer
->	O
name	pointer
,	O
ca	pointer
->	O
method	pointer
->	O
name	pointer
)	O
||	O
ca	pointer
->	O
method	pointer
->	O
cmp	pointer
(	O
ca	pointer
->	O
data	pointer
,	O
clos	pointer
->	O
data	pointer
)	O
;	O
}	O
static	O
int	O
_channel_cmp_fd	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
const	O
CHANNEL	struct
*	O
ca	pointer
=	O
a	pointer
;	O
const	O
int	O
*	O
fd	int
=	O
b	pointer
;	O
return	O
ca	pointer
->	O
fd	int
!=	O
*	O
fd	int
;	O
}	O
void	O
input_close_channels	function
(	O
INPUT	struct
*	O
input	pointer
)	O
{	O
CHANNEL	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
input	pointer
->	O
citr	pointer
)	O
input	pointer
->	O
citr	pointer
=	O
grad_iterator_create	function
(	O
input	pointer
->	O
channels	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	function
(	O
input	pointer
->	O
citr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
grad_iterator_next	function
(	O
input	pointer
->	O
citr	pointer
)	O
)	O
{	O
grad_list_remove	function
(	O
input	pointer
->	O
channels	pointer
,	O
p	pointer
,	O
NULL	O
)	O
;	O
channel_close	function
(	O
input	pointer
,	O
p	pointer
)	O
;	O
}	O
grad_iterator_destroy	function
(	O
&	O
input	pointer
->	O
citr	pointer
)	O
;	O
}	O
void	O
input_close_channel_fd	function
(	O
INPUT	struct
*	O
input	pointer
,	O
int	O
fd	int
)	O
{	O
CHANNEL	struct
*	O
p	pointer
=	O
grad_list_locate	function
(	O
input	pointer
->	O
channels	pointer
,	O
&	O
fd	int
,	O
_channel_cmp_fd	function
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
grad_list_remove	function
(	O
input	pointer
->	O
channels	pointer
,	O
p	pointer
,	O
NULL	O
)	O
;	O
channel_close	function
(	O
input	pointer
,	O
p	pointer
)	O
;	O
}	O
}	O
void	O
*	O
input_find_channel	function
(	O
INPUT	struct
*	O
input	pointer
,	O
char	O
*	O
name	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
_channel_cmp_closure	struct
clos	pointer
;	O
CHANNEL	struct
*	O
p	pointer
;	O
clos	pointer
.	O
name	pointer
=	O
name	pointer
;	O
clos	pointer
.	O
data	pointer
=	O
data	pointer
;	O
p	pointer
=	O
grad_list_locate	function
(	O
input	pointer
->	O
channels	pointer
,	O
&	O
clos	pointer
,	O
_channel_cmp	function
)	O
;	O
return	O
p	pointer
?	O
p	pointer
->	O
data	pointer
:	O
NULL	O
;	O
}	O
void	O
input_close_channel_data	function
(	O
INPUT	struct
*	O
input	pointer
,	O
char	O
*	O
name	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
_channel_cmp_closure	struct
clos	pointer
;	O
CHANNEL	struct
*	O
p	pointer
;	O
clos	pointer
.	O
name	pointer
=	O
name	pointer
;	O
clos	pointer
.	O
data	pointer
=	O
data	pointer
;	O
p	pointer
=	O
grad_list_locate	function
(	O
input	pointer
->	O
channels	pointer
,	O
&	O
clos	pointer
,	O
_channel_cmp	function
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
grad_list_remove	function
(	O
input	pointer
->	O
channels	pointer
,	O
p	pointer
,	O
NULL	O
)	O
;	O
channel_close	function
(	O
input	pointer
,	O
p	pointer
)	O
;	O
}	O
}	O
int	O
input_select	function
(	O
INPUT	struct
*	O
input	pointer
,	O
struct	O
timeval	struct
*	O
tv	pointer
)	O
{	O
CHANNEL	struct
*	O
p	pointer
;	O
int	O
status	int
;	O
fd_set	struct
readfds	struct
;	O
GRAD_DEBUG	O
(	O
100	int
,	O
"enter"	pointer
)	O
;	O
if	O
(	O
!	O
input	pointer
->	O
citr	pointer
)	O
input	pointer
->	O
citr	pointer
=	O
grad_iterator_create	function
(	O
input	pointer
->	O
channels	pointer
)	O
;	O
if	O
(	O
input	pointer
->	O
fd_max	int
==	O
-	O
2	int
)	O
{	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	function
(	O
input	pointer
->	O
citr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
grad_iterator_next	function
(	O
input	pointer
->	O
citr	pointer
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
fd	int
>	O
input	pointer
->	O
fd_max	int
)	O
input	pointer
->	O
fd_max	int
=	O
p	pointer
->	O
fd	int
;	O
}	O
if	O
(	O
input	pointer
->	O
fd_max	int
==	O
-	O
2	int
)	O
input	pointer
->	O
fd_max	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
input	pointer
->	O
fd_max	int
<	O
0	int
)	O
{	O
pause	function
(	O
)	O
;	O
return	O
errno	O
;	O
}	O
readfds	struct
=	O
input	pointer
->	O
fdset	struct
;	O
status	int
=	O
select	function
(	O
input	pointer
->	O
fd_max	int
+	O
1	int
,	O
&	O
readfds	struct
,	O
NULL	O
,	O
NULL	O
,	O
tv	pointer
)	O
;	O
if	O
(	O
status	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
status	int
>	O
0	int
)	O
{	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"select returned %d"	pointer
,	O
status	int
)	O
;	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	function
(	O
input	pointer
->	O
citr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
grad_iterator_next	function
(	O
input	pointer
->	O
citr	pointer
)	O
)	O
if	O
(	O
FD_ISSET	O
(	O
p	pointer
->	O
fd	int
,	O
&	O
readfds	struct
)	O
)	O
channel_handle	function
(	O
p	pointer
)	O
;	O
}	O
GRAD_DEBUG	O
(	O
100	int
,	O
"exit"	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
input_select_channel	function
(	O
INPUT	struct
*	O
input	pointer
,	O
char	O
*	O
name	pointer
,	O
struct	O
timeval	struct
*	O
tv	pointer
)	O
{	O
CHANNEL	struct
*	O
p	pointer
;	O
int	O
status	int
;	O
fd_set	struct
readfds	struct
;	O
int	O
fd_max	int
=	O
-	O
1	int
;	O
METHOD	struct
*	O
m	pointer
=	O
grad_list_locate	function
(	O
input	pointer
->	O
methods	pointer
,	O
name	pointer
,	O
_method_comp	function
)	O
;	O
GRAD_DEBUG	O
(	O
100	int
,	O
"enter"	pointer
)	O
;	O
if	O
(	O
!	O
m	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
input	pointer
->	O
citr	pointer
)	O
input	pointer
->	O
citr	pointer
=	O
grad_iterator_create	function
(	O
input	pointer
->	O
channels	pointer
)	O
;	O
FD_ZERO	O
(	O
&	O
readfds	struct
)	O
;	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	function
(	O
input	pointer
->	O
citr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
grad_iterator_next	function
(	O
input	pointer
->	O
citr	pointer
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
method	pointer
==	O
m	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
fd	int
>	O
fd_max	int
)	O
fd_max	int
=	O
p	pointer
->	O
fd	int
;	O
FD_SET	O
(	O
p	pointer
->	O
fd	int
,	O
&	O
readfds	struct
)	O
;	O
}	O
}	O
if	O
(	O
fd_max	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
status	int
=	O
select	function
(	O
fd_max	int
+	O
1	int
,	O
&	O
readfds	struct
,	O
NULL	O
,	O
NULL	O
,	O
tv	pointer
)	O
;	O
if	O
(	O
status	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
status	int
>	O
0	int
)	O
{	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"select returned %d"	pointer
,	O
status	int
)	O
;	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	function
(	O
input	pointer
->	O
citr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
grad_iterator_next	function
(	O
input	pointer
->	O
citr	pointer
)	O
)	O
if	O
(	O
FD_ISSET	O
(	O
p	pointer
->	O
fd	int
,	O
&	O
readfds	struct
)	O
)	O
channel_handle	function
(	O
p	pointer
)	O
;	O
}	O
GRAD_DEBUG	O
(	O
100	int
,	O
"exit"	pointer
)	O
;	O
return	O
status	int
;	O
}	O
struct	O
iterate_closure	struct
{	O
char	O
*	O
name	pointer
;	O
list_iterator_t	pointer
fun	pointer
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
static	O
int	O
_chan_itr	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
CHANNEL	struct
*	O
chan	pointer
=	O
item	pointer
;	O
struct	O
iterate_closure	struct
*	O
cp	pointer
=	O
data	pointer
;	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
cp	pointer
->	O
name	pointer
==	O
NULL	O
||	O
strcmp	function
(	O
chan	pointer
->	O
method	pointer
->	O
name	pointer
,	O
cp	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
rc	int
=	O
cp	pointer
->	O
fun	pointer
(	O
chan	pointer
->	O
data	pointer
,	O
cp	pointer
->	O
data	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
void	O
input_iterate_channels	function
(	O
INPUT	struct
*	O
input	pointer
,	O
char	O
*	O
name	pointer
,	O
list_iterator_t	pointer
fun	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
iterate_closure	struct
clos	pointer
;	O
clos	pointer
.	O
name	pointer
=	O
name	pointer
;	O
clos	pointer
.	O
fun	pointer
=	O
fun	pointer
;	O
clos	pointer
.	O
data	pointer
=	O
data	pointer
;	O
grad_list_iterate	function
(	O
input	pointer
->	O
channels	pointer
,	O
_chan_itr	function
,	O
&	O
clos	pointer
)	O
;	O
}	O
