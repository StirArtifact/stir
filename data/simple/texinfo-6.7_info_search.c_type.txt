enum	O
search_result	enum
search	function
(	O
char	O
*	O
string	pointer
,	O
SEARCH_BINDING	struct
*	O
binding	pointer
,	O
long	O
*	O
poff	pointer
)	O
{	O
enum	O
search_result	enum
result	enum
;	O
if	O
(	O
binding	pointer
->	O
start	pointer
>	O
binding	pointer
->	O
end	pointer
)	O
result	enum
=	O
search_backward	function
(	O
string	pointer
,	O
binding	pointer
,	O
poff	pointer
)	O
;	O
else	O
result	enum
=	O
search_forward	function
(	O
string	pointer
,	O
binding	pointer
,	O
poff	pointer
)	O
;	O
return	O
result	enum
;	O
}	O
static	O
char	O
*	O
regexp_expand_newlines_and_tabs	function
(	O
char	O
*	O
regexp	pointer
)	O
{	O
char	O
*	O
unescaped_regexp	pointer
=	O
xmalloc	function
(	O
1	int
+	O
strlen	function
(	O
regexp	pointer
)	O
)	O
;	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
for	O
(	O
p	pointer
=	O
regexp	pointer
,	O
q	pointer
=	O
unescaped_regexp	pointer
;	O
*	O
p	pointer
!=	O
'\0'	O
;	O
p	pointer
++	O
,	O
q	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
)	O
switch	O
(	O
*	O
++	O
p	pointer
)	O
{	O
case	O
'n'	O
:	O
*	O
q	pointer
=	O
'\n'	O
;	O
break	O
;	O
case	O
't'	O
:	O
*	O
q	pointer
=	O
'\t'	O
;	O
break	O
;	O
case	O
'\0'	O
:	O
*	O
q	pointer
=	O
'\\'	O
;	O
p	pointer
--	O
;	O
break	O
;	O
default	O
:	O
*	O
q	pointer
++	O
=	O
'\\'	O
;	O
*	O
q	pointer
=	O
*	O
p	pointer
;	O
break	O
;	O
}	O
else	O
*	O
q	pointer
=	O
*	O
p	pointer
;	O
}	O
*	O
q	pointer
=	O
'\0'	O
;	O
return	O
unescaped_regexp	pointer
;	O
}	O
static	O
char	O
*	O
regexp_escape_string	function
(	O
char	O
*	O
search_string	pointer
)	O
{	O
char	O
*	O
special_chars	pointer
=	O
"\\[]^$.*(){}|+?"	pointer
;	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
char	O
*	O
escaped_string	pointer
=	O
xmalloc	function
(	O
strlen	function
(	O
search_string	pointer
)	O
*	O
2	int
+	O
1	int
)	O
;	O
for	O
(	O
p	pointer
=	O
search_string	pointer
,	O
q	pointer
=	O
escaped_string	pointer
;	O
*	O
p	pointer
!=	O
'\0'	O
;	O
)	O
{	O
if	O
(	O
strchr	function
(	O
special_chars	pointer
,	O
*	O
p	pointer
)	O
)	O
{	O
*	O
q	pointer
++	O
=	O
'\\'	O
;	O
}	O
*	O
q	pointer
++	O
=	O
*	O
p	pointer
++	O
;	O
}	O
*	O
q	pointer
=	O
'\0'	O
;	O
return	O
escaped_string	pointer
;	O
}	O
static	O
void	O
extend_matches	function
(	O
MATCH_STATE	struct
*	O
state	pointer
)	O
{	O
regmatch_t	struct
*	O
matches	pointer
=	O
state	pointer
->	O
matches	pointer
;	O
size_t	long
match_alloc	long
=	O
state	pointer
->	O
match_alloc	long
;	O
size_t	long
match_count	long
=	O
state	pointer
->	O
match_count	long
;	O
char	O
*	O
buffer	pointer
=	O
state	pointer
->	O
buffer	pointer
;	O
size_t	long
buflen	long
=	O
state	pointer
->	O
buflen	long
;	O
regoff_t	long
offset	long
=	O
0	int
;	O
char	O
saved_char	char
;	O
size_t	long
initial_match_count	long
=	O
match_count	long
;	O
if	O
(	O
state	pointer
->	O
finished	int
)	O
return	O
;	O
saved_char	char
=	O
buffer	pointer
[	O
buflen	long
]	O
;	O
buffer	pointer
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
match_count	long
>	O
0	int
)	O
{	O
offset	long
=	O
matches	pointer
[	O
match_count	long
-	O
1	int
]	O
.	O
rm_eo	long
;	O
if	O
(	O
offset	long
==	O
matches	pointer
[	O
match_count	long
-	O
1	int
]	O
.	O
rm_so	long
)	O
offset	long
++	O
;	O
}	O
while	O
(	O
offset	long
<	O
buflen	long
&&	O
match_count	long
<	O
initial_match_count	long
+	O
5	int
)	O
{	O
int	O
result	enum
=	O
0	int
;	O
regmatch_t	struct
m	struct
;	O
result	enum
=	O
regexec	O
(	O
&	O
state	pointer
->	O
regex	struct
,	O
&	O
buffer	pointer
[	O
offset	long
]	O
,	O
1	int
,	O
&	O
m	struct
,	O
REG_NOTBOL	int
)	O
;	O
if	O
(	O
result	enum
==	O
0	int
)	O
{	O
if	O
(	O
match_count	long
==	O
match_alloc	long
)	O
{	O
if	O
(	O
match_alloc	long
==	O
0	int
)	O
match_alloc	long
=	O
50	int
;	O
matches	pointer
=	O
x2nrealloc	function
(	O
matches	pointer
,	O
&	O
match_alloc	long
,	O
sizeof	O
matches	pointer
[	O
0	int
]	O
)	O
;	O
}	O
matches	pointer
[	O
match_count	long
]	O
=	O
m	struct
;	O
matches	pointer
[	O
match_count	long
]	O
.	O
rm_so	long
+=	O
offset	long
;	O
matches	pointer
[	O
match_count	long
]	O
.	O
rm_eo	long
+=	O
offset	long
;	O
offset	long
=	O
matches	pointer
[	O
match_count	long
++	O
]	O
.	O
rm_eo	long
;	O
if	O
(	O
m	struct
.	O
rm_eo	long
==	O
0	int
)	O
offset	long
++	O
;	O
}	O
else	O
{	O
state	pointer
->	O
finished	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
buffer	pointer
[	O
buflen	long
]	O
=	O
saved_char	char
;	O
state	pointer
->	O
matches	pointer
=	O
matches	pointer
;	O
state	pointer
->	O
match_alloc	long
=	O
match_alloc	long
;	O
state	pointer
->	O
match_count	long
=	O
match_count	long
;	O
}	O
enum	O
search_result	enum
regexp_search	function
(	O
char	O
*	O
regexp	pointer
,	O
int	O
is_literal	int
,	O
int	O
is_insensitive	int
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
buflen	long
,	O
MATCH_STATE	struct
*	O
match_state	pointer
)	O
{	O
regex_t	struct
preg	struct
;	O
int	O
result	enum
;	O
char	O
*	O
regexp_str	pointer
;	O
if	O
(	O
!	O
is_literal	int
)	O
regexp_str	pointer
=	O
regexp_expand_newlines_and_tabs	function
(	O
regexp	pointer
)	O
;	O
else	O
regexp_str	pointer
=	O
regexp_escape_string	function
(	O
regexp	pointer
)	O
;	O
result	enum
=	O
regcomp	O
(	O
&	O
preg	struct
,	O
regexp_str	pointer
,	O
REG_EXTENDED	int
|	O
REG_NEWLINE	O
|	O
(	O
is_insensitive	int
?	O
REG_ICASE	O
:	O
0	int
)	O
)	O
;	O
free	function
(	O
regexp_str	pointer
)	O
;	O
if	O
(	O
result	enum
!=	O
0	int
)	O
{	O
int	O
size	long
=	O
regerror	O
(	O
result	enum
,	O
&	O
preg	struct
,	O
NULL	O
,	O
0	int
)	O
;	O
char	O
*	O
buf	array
=	O
xmalloc	function
(	O
size	long
)	O
;	O
regerror	O
(	O
result	enum
,	O
&	O
preg	struct
,	O
buf	array
,	O
size	long
)	O
;	O
info_error	function
(	O
_	O
(	O
"regexp error: %s"	pointer
)	O
,	O
buf	array
)	O
;	O
free	function
(	O
buf	array
)	O
;	O
return	O
search_invalid	int
;	O
}	O
match_state	pointer
->	O
matches	pointer
=	O
0	int
;	O
match_state	pointer
->	O
match_count	long
=	O
0	int
;	O
match_state	pointer
->	O
match_alloc	long
=	O
0	int
;	O
match_state	pointer
->	O
finished	int
=	O
0	int
;	O
match_state	pointer
->	O
regex	struct
=	O
preg	struct
;	O
match_state	pointer
->	O
buffer	pointer
=	O
buffer	pointer
;	O
match_state	pointer
->	O
buflen	long
=	O
buflen	long
;	O
extend_matches	function
(	O
match_state	pointer
)	O
;	O
if	O
(	O
match_state	pointer
->	O
match_count	long
==	O
0	int
)	O
{	O
free_matches	function
(	O
match_state	pointer
)	O
;	O
return	O
search_not_found	int
;	O
}	O
else	O
return	O
search_success	int
;	O
}	O
enum	O
search_result	enum
search_forward	function
(	O
char	O
*	O
string	pointer
,	O
SEARCH_BINDING	struct
*	O
binding	pointer
,	O
long	O
*	O
poff	pointer
)	O
{	O
register	O
int	O
c	int
,	O
i	int
,	O
len	long
;	O
register	O
char	O
*	O
buff	pointer
,	O
*	O
end	pointer
;	O
char	O
*	O
alternate	pointer
=	O
NULL	O
;	O
len	long
=	O
strlen	function
(	O
string	pointer
)	O
;	O
if	O
(	O
binding	pointer
->	O
flags	int
&	O
S_FoldCase	int
)	O
{	O
alternate	pointer
=	O
xstrdup	function
(	O
string	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
islower	function
(	O
alternate	pointer
[	O
i	int
]	O
)	O
)	O
alternate	pointer
[	O
i	int
]	O
=	O
toupper	function
(	O
alternate	pointer
[	O
i	int
]	O
)	O
;	O
else	O
if	O
(	O
isupper	function
(	O
alternate	pointer
[	O
i	int
]	O
)	O
)	O
alternate	pointer
[	O
i	int
]	O
=	O
tolower	function
(	O
alternate	pointer
[	O
i	int
]	O
)	O
;	O
}	O
}	O
buff	pointer
=	O
binding	pointer
->	O
buffer	pointer
+	O
binding	pointer
->	O
start	pointer
;	O
end	pointer
=	O
binding	pointer
->	O
buffer	pointer
+	O
binding	pointer
->	O
end	pointer
+	O
1	int
;	O
while	O
(	O
buff	pointer
<	O
(	O
end	pointer
-	O
len	long
)	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	long
;	O
i	int
++	O
)	O
{	O
c	int
=	O
buff	pointer
[	O
i	int
]	O
;	O
if	O
(	O
(	O
c	int
!=	O
string	pointer
[	O
i	int
]	O
)	O
&&	O
(	O
!	O
alternate	pointer
||	O
c	int
!=	O
alternate	pointer
[	O
i	int
]	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
string	pointer
[	O
i	int
]	O
)	O
{	O
if	O
(	O
alternate	pointer
)	O
free	function
(	O
alternate	pointer
)	O
;	O
if	O
(	O
binding	pointer
->	O
flags	int
&	O
S_SkipDest	int
)	O
buff	pointer
+=	O
len	long
;	O
*	O
poff	pointer
=	O
buff	pointer
-	O
binding	pointer
->	O
buffer	pointer
;	O
return	O
search_success	int
;	O
}	O
buff	pointer
++	O
;	O
}	O
if	O
(	O
alternate	pointer
)	O
free	function
(	O
alternate	pointer
)	O
;	O
return	O
search_not_found	int
;	O
}	O
enum	O
search_result	enum
search_backward	function
(	O
char	O
*	O
input_string	pointer
,	O
SEARCH_BINDING	struct
*	O
binding	pointer
,	O
long	O
*	O
poff	pointer
)	O
{	O
register	O
int	O
c	int
,	O
i	int
,	O
len	long
;	O
register	O
char	O
*	O
buff	pointer
,	O
*	O
end	pointer
;	O
char	O
*	O
string	pointer
;	O
char	O
*	O
alternate	pointer
=	O
NULL	O
;	O
len	long
=	O
strlen	function
(	O
input_string	pointer
)	O
;	O
string	pointer
=	O
xmalloc	function
(	O
1	int
+	O
len	long
)	O
;	O
for	O
(	O
c	int
=	O
0	int
,	O
i	int
=	O
len	long
-	O
1	int
;	O
input_string	pointer
[	O
c	int
]	O
;	O
c	int
++	O
,	O
i	int
--	O
)	O
string	pointer
[	O
i	int
]	O
=	O
input_string	pointer
[	O
c	int
]	O
;	O
string	pointer
[	O
c	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
binding	pointer
->	O
flags	int
&	O
S_FoldCase	int
)	O
{	O
alternate	pointer
=	O
xstrdup	function
(	O
string	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
islower	function
(	O
alternate	pointer
[	O
i	int
]	O
)	O
)	O
alternate	pointer
[	O
i	int
]	O
=	O
toupper	function
(	O
alternate	pointer
[	O
i	int
]	O
)	O
;	O
else	O
if	O
(	O
isupper	function
(	O
alternate	pointer
[	O
i	int
]	O
)	O
)	O
alternate	pointer
[	O
i	int
]	O
=	O
tolower	function
(	O
alternate	pointer
[	O
i	int
]	O
)	O
;	O
}	O
}	O
buff	pointer
=	O
binding	pointer
->	O
buffer	pointer
+	O
binding	pointer
->	O
start	pointer
-	O
1	int
;	O
end	pointer
=	O
binding	pointer
->	O
buffer	pointer
+	O
binding	pointer
->	O
end	pointer
;	O
while	O
(	O
buff	pointer
>	O
(	O
end	pointer
+	O
len	long
)	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	long
;	O
i	int
++	O
)	O
{	O
c	int
=	O
*	O
(	O
buff	pointer
-	O
i	int
)	O
;	O
if	O
(	O
c	int
!=	O
string	pointer
[	O
i	int
]	O
&&	O
(	O
!	O
alternate	pointer
||	O
c	int
!=	O
alternate	pointer
[	O
i	int
]	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
string	pointer
[	O
i	int
]	O
)	O
{	O
free	function
(	O
string	pointer
)	O
;	O
if	O
(	O
alternate	pointer
)	O
free	function
(	O
alternate	pointer
)	O
;	O
if	O
(	O
binding	pointer
->	O
flags	int
&	O
S_SkipDest	int
)	O
buff	pointer
-=	O
len	long
;	O
*	O
poff	pointer
=	O
1	int
+	O
buff	pointer
-	O
binding	pointer
->	O
buffer	pointer
;	O
return	O
search_success	int
;	O
}	O
buff	pointer
--	O
;	O
}	O
free	function
(	O
string	pointer
)	O
;	O
if	O
(	O
alternate	pointer
)	O
free	function
(	O
alternate	pointer
)	O
;	O
return	O
search_not_found	int
;	O
}	O
int	O
string_in_line	function
(	O
char	O
*	O
string	pointer
,	O
char	O
*	O
line	pointer
)	O
{	O
register	O
int	O
end	pointer
;	O
SEARCH_BINDING	struct
binding	pointer
;	O
long	O
offset	long
;	O
for	O
(	O
end	pointer
=	O
0	int
;	O
line	pointer
[	O
end	pointer
]	O
&&	O
line	pointer
[	O
end	pointer
]	O
!=	O
'\n'	O
;	O
end	pointer
++	O
)	O
;	O
binding	pointer
.	O
buffer	pointer
=	O
line	pointer
;	O
binding	pointer
.	O
start	pointer
=	O
0	int
;	O
binding	pointer
.	O
end	pointer
=	O
end	pointer
;	O
binding	pointer
.	O
flags	int
=	O
S_FoldCase	int
|	O
S_SkipDest	int
;	O
if	O
(	O
search_forward	function
(	O
string	pointer
,	O
&	O
binding	pointer
,	O
&	O
offset	long
)	O
==	O
search_success	int
)	O
return	O
offset	long
;	O
return	O
-	O
1	int
;	O
}	O
int	O
looking_at	function
(	O
char	O
*	O
string	pointer
,	O
SEARCH_BINDING	struct
*	O
binding	pointer
)	O
{	O
long	O
search_end	long
;	O
if	O
(	O
search	function
(	O
string	pointer
,	O
binding	pointer
,	O
&	O
search_end	long
)	O
!=	O
search_success	int
)	O
return	O
0	int
;	O
return	O
search_end	long
==	O
binding	pointer
->	O
start	pointer
;	O
}	O
int	O
looking_at_line	function
(	O
char	O
*	O
string	pointer
,	O
char	O
*	O
pointer	pointer
)	O
{	O
int	O
len	long
;	O
len	long
=	O
strlen	function
(	O
string	pointer
)	O
;	O
if	O
(	O
strncasecmp	function
(	O
pointer	pointer
,	O
string	pointer
,	O
len	long
)	O
!=	O
0	int
)	O
return	O
0	int
;	O
pointer	pointer
+=	O
len	long
;	O
if	O
(	O
*	O
pointer	pointer
==	O
'\n'	O
||	O
!	O
strncmp	function
(	O
pointer	pointer
,	O
"\r\n"	pointer
,	O
2	int
)	O
||	O
*	O
pointer	pointer
==	O
'\0'	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
enum	O
search_result	enum
match_in_match_list	function
(	O
MATCH_STATE	struct
*	O
match_state	pointer
,	O
long	O
start	pointer
,	O
long	O
end	pointer
,	O
int	O
dir	int
,	O
int	O
*	O
match_index	pointer
)	O
{	O
regmatch_t	struct
*	O
matches	pointer
=	O
match_state	pointer
->	O
matches	pointer
;	O
size_t	long
match_count	long
=	O
match_state	pointer
->	O
match_count	long
;	O
int	O
i	int
;	O
int	O
index	function
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
match_count	long
||	O
!	O
match_state	pointer
->	O
finished	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
==	O
match_count	long
)	O
{	O
extend_matches	function
(	O
match_state	pointer
)	O
;	O
matches	pointer
=	O
match_state	pointer
->	O
matches	pointer
;	O
match_count	long
=	O
match_state	pointer
->	O
match_count	long
;	O
if	O
(	O
i	int
==	O
match_count	long
)	O
break	O
;	O
}	O
if	O
(	O
matches	pointer
[	O
i	int
]	O
.	O
rm_so	long
>=	O
end	pointer
)	O
break	O
;	O
if	O
(	O
matches	pointer
[	O
i	int
]	O
.	O
rm_so	long
>=	O
start	pointer
)	O
{	O
index	function
=	O
i	int
;	O
if	O
(	O
dir	int
>	O
0	int
)	O
{	O
*	O
match_index	pointer
=	O
index	function
;	O
return	O
search_success	int
;	O
}	O
}	O
}	O
if	O
(	O
index	function
!=	O
-	O
1	int
)	O
{	O
*	O
match_index	pointer
=	O
index	function
;	O
return	O
search_success	int
;	O
}	O
return	O
search_not_found	int
;	O
}	O
regmatch_t	struct
match_by_index	function
(	O
MATCH_STATE	struct
*	O
state	pointer
,	O
int	O
index	function
)	O
{	O
while	O
(	O
state	pointer
->	O
match_alloc	long
<=	O
index	function
)	O
extend_matches	function
(	O
state	pointer
)	O
;	O
return	O
state	pointer
->	O
matches	pointer
[	O
index	function
]	O
;	O
}	O
void	O
free_matches	function
(	O
MATCH_STATE	struct
*	O
state	pointer
)	O
{	O
free	function
(	O
state	pointer
->	O
matches	pointer
)	O
;	O
state	pointer
->	O
matches	pointer
=	O
0	int
;	O
state	pointer
->	O
match_count	long
=	O
state	pointer
->	O
match_alloc	long
=	O
state	pointer
->	O
finished	int
=	O
0	int
;	O
state	pointer
->	O
buffer	pointer
=	O
0	int
;	O
state	pointer
->	O
buflen	long
=	O
0	int
;	O
regfree	O
(	O
&	O
state	pointer
->	O
regex	struct
)	O
;	O
}	O
int	O
matches_ready	function
(	O
MATCH_STATE	struct
*	O
state	pointer
)	O
{	O
return	O
state	pointer
->	O
matches	pointer
?	O
1	int
:	O
0	int
;	O
}	O
void	O
decide_if_in_match	function
(	O
long	O
off	long
,	O
int	O
*	O
in_match	pointer
,	O
MATCH_STATE	struct
*	O
matches	pointer
,	O
size_t	long
*	O
match_index	pointer
)	O
{	O
size_t	long
i	int
=	O
*	O
match_index	pointer
;	O
int	O
m	struct
=	O
*	O
in_match	pointer
;	O
for	O
(	O
;	O
!	O
at_end_of_matches	function
(	O
matches	pointer
,	O
i	int
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
match_by_index	function
(	O
matches	pointer
,	O
i	int
)	O
.	O
rm_so	long
>	O
off	long
)	O
break	O
;	O
m	struct
=	O
1	int
;	O
if	O
(	O
match_by_index	function
(	O
matches	pointer
,	O
i	int
)	O
.	O
rm_eo	long
>	O
off	long
)	O
break	O
;	O
m	struct
=	O
0	int
;	O
}	O
*	O
match_index	pointer
=	O
i	int
;	O
*	O
in_match	pointer
=	O
m	struct
;	O
}	O
int	O
at_end_of_matches	function
(	O
MATCH_STATE	struct
*	O
state	pointer
,	O
int	O
index	function
)	O
{	O
if	O
(	O
index	function
<	O
state	pointer
->	O
match_count	long
)	O
return	O
0	int
;	O
else	O
{	O
if	O
(	O
!	O
state	pointer
->	O
finished	int
)	O
extend_matches	function
(	O
state	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
finished	int
)	O
return	O
(	O
state	pointer
->	O
match_count	long
==	O
index	function
)	O
?	O
1	int
:	O
0	int
;	O
else	O
return	O
0	int
;	O
}	O
}	O
int	O
skip_whitespace	function
(	O
char	O
*	O
string	pointer
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
string	pointer
&&	O
whitespace	O
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
;	O
return	O
i	int
;	O
}	O
int	O
skip_whitespace_and_newlines	function
(	O
char	O
*	O
string	pointer
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
string	pointer
&&	O
whitespace_or_newline	O
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
;	O
return	O
i	int
;	O
}	O
int	O
skip_non_whitespace	function
(	O
char	O
*	O
string	pointer
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
string	pointer
&&	O
string	pointer
[	O
i	int
]	O
&&	O
!	O
whitespace	O
(	O
string	pointer
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
;	O
return	O
i	int
;	O
}	O
long	O
find_node_separator	function
(	O
SEARCH_BINDING	struct
*	O
binding	pointer
)	O
{	O
register	O
long	O
i	int
;	O
char	O
*	O
body	pointer
;	O
int	O
dir	int
;	O
body	pointer
=	O
binding	pointer
->	O
buffer	pointer
;	O
dir	int
=	O
binding	pointer
->	O
start	pointer
<	O
binding	pointer
->	O
end	pointer
?	O
1	int
:	O
-	O
1	int
;	O
i	int
=	O
binding	pointer
->	O
start	pointer
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
body	pointer
[	O
i	int
]	O
==	O
INFO_COOKIE	char
)	O
{	O
int	O
j	int
=	O
i	int
+	O
1	int
;	O
if	O
(	O
body	pointer
[	O
j	int
]	O
==	O
INFO_FF	char
)	O
j	int
++	O
;	O
if	O
(	O
body	pointer
[	O
j	int
]	O
==	O
'\r'	O
)	O
j	int
++	O
;	O
if	O
(	O
body	pointer
[	O
j	int
]	O
==	O
'\n'	O
)	O
return	O
i	int
;	O
}	O
if	O
(	O
i	int
==	O
binding	pointer
->	O
end	pointer
)	O
break	O
;	O
i	int
+=	O
dir	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
skip_node_separator	function
(	O
char	O
*	O
body	pointer
)	O
{	O
register	O
int	O
i	int
;	O
i	int
=	O
0	int
;	O
if	O
(	O
body	pointer
[	O
i	int
]	O
==	O
INFO_FF	char
)	O
i	int
++	O
;	O
if	O
(	O
body	pointer
[	O
i	int
++	O
]	O
!=	O
INFO_COOKIE	char
)	O
return	O
0	int
;	O
if	O
(	O
body	pointer
[	O
i	int
]	O
==	O
INFO_FF	char
)	O
i	int
++	O
;	O
if	O
(	O
body	pointer
[	O
i	int
]	O
==	O
'\r'	O
)	O
i	int
++	O
;	O
if	O
(	O
body	pointer
[	O
i	int
++	O
]	O
!=	O
'\n'	O
)	O
return	O
0	int
;	O
return	O
i	int
;	O
}	O
long	O
find_file_section	function
(	O
SEARCH_BINDING	struct
*	O
binding	pointer
,	O
char	O
*	O
label	pointer
)	O
{	O
SEARCH_BINDING	struct
s	pointer
;	O
long	O
position	long
;	O
int	O
dir	int
;	O
s	pointer
.	O
buffer	pointer
=	O
binding	pointer
->	O
buffer	pointer
;	O
s	pointer
.	O
start	pointer
=	O
binding	pointer
->	O
start	pointer
;	O
s	pointer
.	O
end	pointer
=	O
binding	pointer
->	O
end	pointer
;	O
s	pointer
.	O
flags	int
=	O
S_FoldCase	int
;	O
dir	int
=	O
binding	pointer
->	O
start	pointer
<	O
binding	pointer
->	O
end	pointer
?	O
1	int
:	O
-	O
1	int
;	O
while	O
(	O
(	O
position	long
=	O
find_node_separator	function
(	O
&	O
s	pointer
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
long	O
offset	long
=	O
position	long
;	O
offset	long
+=	O
skip_node_separator	function
(	O
s	pointer
.	O
buffer	pointer
+	O
offset	long
)	O
;	O
if	O
(	O
looking_at_line	function
(	O
label	pointer
,	O
s	pointer
.	O
buffer	pointer
+	O
offset	long
)	O
)	O
return	O
position	long
;	O
if	O
(	O
dir	int
>	O
0	int
)	O
{	O
s	pointer
.	O
start	pointer
=	O
offset	long
;	O
if	O
(	O
s	pointer
.	O
start	pointer
>=	O
s	pointer
.	O
end	pointer
)	O
break	O
;	O
}	O
else	O
{	O
s	pointer
.	O
start	pointer
=	O
position	long
-	O
1	int
;	O
if	O
(	O
s	pointer
.	O
start	pointer
<=	O
s	pointer
.	O
end	pointer
)	O
break	O
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
long	O
find_node_in_binding	function
(	O
char	O
*	O
nodename	pointer
,	O
SEARCH_BINDING	struct
*	O
binding	pointer
)	O
{	O
long	O
position	long
;	O
int	O
offset	long
;	O
SEARCH_BINDING	struct
s	pointer
;	O
s	pointer
.	O
buffer	pointer
=	O
binding	pointer
->	O
buffer	pointer
;	O
s	pointer
.	O
start	pointer
=	O
binding	pointer
->	O
start	pointer
;	O
s	pointer
.	O
end	pointer
=	O
binding	pointer
->	O
end	pointer
;	O
s	pointer
.	O
flags	int
=	O
0	int
;	O
while	O
(	O
(	O
position	long
=	O
find_node_separator	function
(	O
&	O
s	pointer
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
char	O
*	O
nodename_start	pointer
;	O
char	O
*	O
read_nodename	pointer
;	O
int	O
found	int
;	O
s	pointer
.	O
start	pointer
=	O
position	long
;	O
s	pointer
.	O
start	pointer
+=	O
skip_node_separator	function
(	O
s	pointer
.	O
buffer	pointer
+	O
s	pointer
.	O
start	pointer
)	O
;	O
offset	long
=	O
string_in_line	function
(	O
INFO_NODE_LABEL	pointer
,	O
s	pointer
.	O
buffer	pointer
+	O
s	pointer
.	O
start	pointer
)	O
;	O
if	O
(	O
offset	long
==	O
-	O
1	int
)	O
continue	O
;	O
s	pointer
.	O
start	pointer
+=	O
offset	long
;	O
s	pointer
.	O
start	pointer
+=	O
skip_whitespace	function
(	O
s	pointer
.	O
buffer	pointer
+	O
s	pointer
.	O
start	pointer
)	O
;	O
nodename_start	pointer
=	O
s	pointer
.	O
buffer	pointer
+	O
s	pointer
.	O
start	pointer
;	O
read_quoted_string	function
(	O
nodename_start	pointer
,	O
"\n\r\t,"	pointer
,	O
0	int
,	O
&	O
read_nodename	pointer
)	O
;	O
if	O
(	O
!	O
read_nodename	pointer
)	O
return	O
-	O
1	int
;	O
found	int
=	O
!	O
strcmp	function
(	O
read_nodename	pointer
,	O
nodename	pointer
)	O
;	O
free	function
(	O
read_nodename	pointer
)	O
;	O
if	O
(	O
found	int
)	O
return	O
position	long
;	O
}	O
return	O
-	O
1	int
;	O
}	O
