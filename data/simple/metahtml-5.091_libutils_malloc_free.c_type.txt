extern	O
void	O
__malloc_safe_bcopy	function
__P	O
(	O
(	O
__ptr_t	O
,	O
__ptr_t	O
,	O
__malloc_size_t	O
)	O
)	O
;	O
void	O
(	O
*	O
__free_hook	pointer
)	O
__P	O
(	O
(	O
__ptr_t	O
__ptr	pointer
)	O
)	O
;	O
struct	O
alignlist	struct
*	O
_aligned_blocks	pointer
=	O
NULL	O
;	O
void	O
_free_internal	function
(	O
ptr	pointer
)	O
__ptr_t	O
ptr	pointer
;	O
{	O
int	O
type	int
;	O
__malloc_size_t	O
block	long
,	O
blocks	long
;	O
register	O
__malloc_size_t	O
i	long
;	O
struct	O
list	struct
*	O
prev	long
,	O
*	O
next	long
;	O
__ptr_t	O
curbrk	pointer
;	O
const	O
__malloc_size_t	O
lesscore_threshold	long
=	O
FINAL_FREE_BLOCKS	int
+	O
2	int
*	O
__malloc_extra_blocks	long
;	O
register	O
struct	O
alignlist	struct
*	O
l	pointer
;	O
if	O
(	O
ptr	pointer
==	O
NULL	O
)	O
return	O
;	O
for	O
(	O
l	pointer
=	O
_aligned_blocks	pointer
;	O
l	pointer
!=	O
NULL	O
;	O
l	pointer
=	O
l	pointer
->	O
next	long
)	O
if	O
(	O
l	pointer
->	O
aligned	pointer
==	O
ptr	pointer
)	O
{	O
l	pointer
->	O
aligned	pointer
=	O
NULL	O
;	O
ptr	pointer
=	O
l	pointer
->	O
exact	pointer
;	O
break	O
;	O
}	O
block	long
=	O
BLOCK	O
(	O
ptr	pointer
)	O
;	O
type	int
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
type	int
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
0	int
:	O
--	O
_chunks_used	long
;	O
_bytes_used	long
-=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
*	O
BLOCKSIZE	O
;	O
_bytes_free	long
+=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
*	O
BLOCKSIZE	O
;	O
i	long
=	O
_heapindex	long
;	O
if	O
(	O
i	long
>	O
block	long
)	O
while	O
(	O
i	long
>	O
block	long
)	O
i	long
=	O
_heapinfo	pointer
[	O
i	long
]	O
.	O
free	function
.	O
prev	long
;	O
else	O
{	O
do	O
i	long
=	O
_heapinfo	pointer
[	O
i	long
]	O
.	O
free	function
.	O
next	long
;	O
while	O
(	O
i	long
>	O
0	int
&&	O
i	long
<	O
block	long
)	O
;	O
i	long
=	O
_heapinfo	pointer
[	O
i	long
]	O
.	O
free	function
.	O
prev	long
;	O
}	O
if	O
(	O
block	long
==	O
i	long
+	O
_heapinfo	pointer
[	O
i	long
]	O
.	O
free	function
.	O
size	long
)	O
{	O
_heapinfo	pointer
[	O
i	long
]	O
.	O
free	function
.	O
size	long
+=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
;	O
block	long
=	O
i	long
;	O
}	O
else	O
{	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
size	long
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
;	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
next	long
=	O
_heapinfo	pointer
[	O
i	long
]	O
.	O
free	function
.	O
next	long
;	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
prev	long
=	O
i	long
;	O
_heapinfo	pointer
[	O
i	long
]	O
.	O
free	function
.	O
next	long
=	O
block	long
;	O
_heapinfo	pointer
[	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
next	long
]	O
.	O
free	function
.	O
prev	long
=	O
block	long
;	O
++	O
_chunks_free	long
;	O
}	O
if	O
(	O
block	long
+	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
size	long
==	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
next	long
)	O
{	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
size	long
+=	O
_heapinfo	pointer
[	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
next	long
]	O
.	O
free	function
.	O
size	long
;	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
next	long
=	O
_heapinfo	pointer
[	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
next	long
]	O
.	O
free	function
.	O
next	long
;	O
_heapinfo	pointer
[	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
next	long
]	O
.	O
free	function
.	O
prev	long
=	O
block	long
;	O
--	O
_chunks_free	long
;	O
}	O
blocks	long
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
size	long
;	O
curbrk	pointer
=	O
(	O
*	O
__morecore	pointer
)	O
(	O
0	int
)	O
;	O
if	O
(	O
_heaplimit	long
!=	O
0	int
&&	O
curbrk	pointer
==	O
ADDRESS	O
(	O
_heaplimit	long
)	O
)	O
{	O
__malloc_size_t	O
info_block	long
=	O
BLOCK	O
(	O
_heapinfo	pointer
)	O
;	O
__malloc_size_t	O
info_blocks	long
=	O
_heapinfo	pointer
[	O
info_block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
;	O
__malloc_size_t	O
prev_block	long
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
prev	long
;	O
__malloc_size_t	O
prev_blocks	long
=	O
_heapinfo	pointer
[	O
prev_block	long
]	O
.	O
free	function
.	O
size	long
;	O
__malloc_size_t	O
next_block	long
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
next	long
;	O
__malloc_size_t	O
next_blocks	long
=	O
_heapinfo	pointer
[	O
next_block	long
]	O
.	O
free	function
.	O
size	long
;	O
if	O
(	O
(	O
block	long
+	O
blocks	long
==	O
_heaplimit	long
&&	O
info_block	long
+	O
info_blocks	long
==	O
block	long
&&	O
prev_block	long
!=	O
0	int
&&	O
prev_block	long
+	O
prev_blocks	long
==	O
info_block	long
&&	O
blocks	long
+	O
prev_blocks	long
>=	O
lesscore_threshold	long
)	O
||	O
(	O
block	long
+	O
blocks	long
==	O
info_block	long
&&	O
(	O
(	O
info_block	long
+	O
info_blocks	long
==	O
_heaplimit	long
&&	O
blocks	long
>=	O
lesscore_threshold	long
)	O
||	O
(	O
info_block	long
+	O
info_blocks	long
==	O
next_block	long
&&	O
next_block	long
+	O
next_blocks	long
==	O
_heaplimit	long
&&	O
blocks	long
+	O
next_blocks	long
>=	O
lesscore_threshold	long
)	O
)	O
)	O
)	O
{	O
malloc_info	union
*	O
newinfo	pointer
;	O
__malloc_size_t	O
oldlimit	long
=	O
_heaplimit	long
;	O
_heaplimit	long
=	O
0	int
;	O
_free_internal	function
(	O
_heapinfo	pointer
)	O
;	O
_heaplimit	long
=	O
oldlimit	long
;	O
_heapindex	long
=	O
0	int
;	O
newinfo	pointer
=	O
(	O
malloc_info	union
*	O
)	O
_malloc_internal	function
(	O
info_blocks	long
*	O
BLOCKSIZE	O
)	O
;	O
memmove	O
(	O
newinfo	pointer
,	O
_heapinfo	pointer
,	O
info_blocks	long
*	O
BLOCKSIZE	O
)	O
;	O
_heapinfo	pointer
=	O
newinfo	pointer
;	O
block	long
=	O
_heapinfo	pointer
[	O
0	int
]	O
.	O
free	function
.	O
prev	long
;	O
blocks	long
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
size	long
;	O
}	O
if	O
(	O
block	long
+	O
blocks	long
==	O
_heaplimit	long
&&	O
blocks	long
>=	O
lesscore_threshold	long
)	O
{	O
register	O
__malloc_size_t	O
bytes	long
=	O
blocks	long
*	O
BLOCKSIZE	O
;	O
_heaplimit	long
-=	O
blocks	long
;	O
(	O
*	O
__morecore	pointer
)	O
(	O
-	O
bytes	long
)	O
;	O
_heapinfo	pointer
[	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
prev	long
]	O
.	O
free	function
.	O
next	long
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
next	long
;	O
_heapinfo	pointer
[	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
next	long
]	O
.	O
free	function
.	O
prev	long
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
prev	long
;	O
block	long
=	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
free	function
.	O
prev	long
;	O
--	O
_chunks_free	long
;	O
_bytes_free	long
-=	O
bytes	long
;	O
}	O
}	O
_heapindex	long
=	O
block	long
;	O
break	O
;	O
default	O
:	O
--	O
_chunks_used	long
;	O
_bytes_used	long
-=	O
1	int
<<	O
type	int
;	O
++	O
_chunks_free	long
;	O
_bytes_free	long
+=	O
1	int
<<	O
type	int
;	O
prev	long
=	O
(	O
struct	O
list	struct
*	O
)	O
(	O
(	O
char	O
*	O
)	O
ADDRESS	O
(	O
block	long
)	O
+	O
(	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
frag	struct
.	O
first	long
<<	O
type	int
)	O
)	O
;	O
if	O
(	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
frag	struct
.	O
nfree	long
==	O
(	O
BLOCKSIZE	O
>>	O
type	int
)	O
-	O
1	int
)	O
{	O
next	long
=	O
prev	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
(	O
__malloc_size_t	O
)	O
(	O
BLOCKSIZE	O
>>	O
type	int
)	O
;	O
++	O
i	long
)	O
next	long
=	O
next	long
->	O
next	long
;	O
prev	long
->	O
prev	long
->	O
next	long
=	O
next	long
;	O
if	O
(	O
next	long
!=	O
NULL	O
)	O
next	long
->	O
prev	long
=	O
prev	long
->	O
prev	long
;	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
type	int
=	O
0	int
;	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
size	long
=	O
1	int
;	O
++	O
_chunks_used	long
;	O
_bytes_used	long
+=	O
BLOCKSIZE	O
;	O
_chunks_free	long
-=	O
BLOCKSIZE	O
>>	O
type	int
;	O
_bytes_free	long
-=	O
BLOCKSIZE	O
;	O
free	function
(	O
ADDRESS	O
(	O
block	long
)	O
)	O
;	O
}	O
else	O
if	O
(	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
frag	struct
.	O
nfree	long
!=	O
0	int
)	O
{	O
next	long
=	O
(	O
struct	O
list	struct
*	O
)	O
ptr	pointer
;	O
next	long
->	O
next	long
=	O
prev	long
->	O
next	long
;	O
next	long
->	O
prev	long
=	O
prev	long
;	O
prev	long
->	O
next	long
=	O
next	long
;	O
if	O
(	O
next	long
->	O
next	long
!=	O
NULL	O
)	O
next	long
->	O
next	long
->	O
prev	long
=	O
next	long
;	O
++	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
frag	struct
.	O
nfree	long
;	O
}	O
else	O
{	O
prev	long
=	O
(	O
struct	O
list	struct
*	O
)	O
ptr	pointer
;	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
frag	struct
.	O
nfree	long
=	O
1	int
;	O
_heapinfo	pointer
[	O
block	long
]	O
.	O
busy	struct
.	O
info	union
.	O
frag	struct
.	O
first	long
=	O
(	O
unsigned	O
long	O
int	O
)	O
(	O
(	O
unsigned	O
long	O
int	O
)	O
(	O
(	O
char	O
*	O
)	O
ptr	pointer
-	O
(	O
char	O
*	O
)	O
NULL	O
)	O
%	O
BLOCKSIZE	O
>>	O
type	int
)	O
;	O
prev	long
->	O
next	long
=	O
_fraghead	array
[	O
type	int
]	O
.	O
next	long
;	O
prev	long
->	O
prev	long
=	O
&	O
_fraghead	array
[	O
type	int
]	O
;	O
prev	long
->	O
prev	long
->	O
next	long
=	O
prev	long
;	O
if	O
(	O
prev	long
->	O
next	long
!=	O
NULL	O
)	O
prev	long
->	O
next	long
->	O
prev	long
=	O
prev	long
;	O
}	O
break	O
;	O
}	O
}	O
void	O
free	function
(	O
ptr	pointer
)	O
__ptr_t	O
ptr	pointer
;	O
{	O
if	O
(	O
__free_hook	pointer
!=	O
NULL	O
)	O
(	O
*	O
__free_hook	pointer
)	O
(	O
ptr	pointer
)	O
;	O
else	O
_free_internal	function
(	O
ptr	pointer
)	O
;	O
}	O
