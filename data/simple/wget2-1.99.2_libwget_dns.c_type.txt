struct	O
wget_dns_st	struct
{	O
wget_dns_cache	struct
*	O
cache	pointer
;	O
wget_thread_mutex	pointer
mutex	pointer
;	O
wget_dns_stats_callback	function
*	O
stats_callback	pointer
;	O
void	O
*	O
stats_ctx	pointer
;	O
wget_dns_stats_data	struct
stats	pointer
;	O
int	O
timeout	int
;	O
}	O
;	O
static	O
wget_dns	struct
default_dns	struct
=	O
{	O
.	O
timeout	int
=	O
-	O
1	int
,	O
}	O
;	O
int	O
wget_dns_init	function
(	O
wget_dns	struct
*	O
*	O
dns	pointer
)	O
{	O
wget_dns	struct
*	O
_dns	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_dns	struct
)	O
)	O
;	O
if	O
(	O
!	O
_dns	pointer
)	O
return	O
WGET_E_MEMORY	int
;	O
if	O
(	O
wget_thread_mutex_init	function
(	O
&	O
_dns	pointer
->	O
mutex	pointer
)	O
)	O
{	O
xfree	O
(	O
_dns	pointer
)	O
;	O
return	O
WGET_E_INVALID	int
;	O
}	O
_dns	pointer
->	O
timeout	int
=	O
-	O
1	int
;	O
*	O
dns	pointer
=	O
_dns	pointer
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
void	O
wget_dns_free	function
(	O
wget_dns	struct
*	O
*	O
dns	pointer
)	O
{	O
if	O
(	O
dns	pointer
&&	O
*	O
dns	pointer
)	O
{	O
wget_thread_mutex_destroy	function
(	O
&	O
(	O
*	O
dns	pointer
)	O
->	O
mutex	pointer
)	O
;	O
xfree	O
(	O
*	O
dns	pointer
)	O
;	O
}	O
}	O
void	O
wget_dns_set_timeout	function
(	O
wget_dns	struct
*	O
dns	pointer
,	O
int	O
timeout	int
)	O
{	O
(	O
dns	pointer
?	O
dns	pointer
:	O
&	O
default_dns	struct
)	O
->	O
timeout	int
=	O
timeout	int
;	O
}	O
void	O
wget_dns_set_cache	function
(	O
wget_dns	struct
*	O
dns	pointer
,	O
wget_dns_cache	struct
*	O
cache	pointer
)	O
{	O
(	O
dns	pointer
?	O
dns	pointer
:	O
&	O
default_dns	struct
)	O
->	O
cache	pointer
=	O
cache	pointer
;	O
}	O
wget_dns_cache	struct
*	O
wget_dns_get_cache	function
(	O
wget_dns	struct
*	O
dns	pointer
)	O
{	O
return	O
(	O
dns	pointer
?	O
dns	pointer
:	O
&	O
default_dns	struct
)	O
->	O
cache	pointer
;	O
}	O
static	O
struct	O
addrinfo	struct
*	O
_wget_sort_preferred	function
(	O
struct	O
addrinfo	struct
*	O
addrinfo	struct
,	O
int	O
preferred_family	int
)	O
{	O
struct	O
addrinfo	struct
*	O
preferred	pointer
=	O
NULL	O
,	O
*	O
preferred_tail	pointer
=	O
NULL	O
;	O
struct	O
addrinfo	struct
*	O
unpreferred	pointer
=	O
NULL	O
,	O
*	O
unpreferred_tail	pointer
=	O
NULL	O
;	O
for	O
(	O
struct	O
addrinfo	struct
*	O
ai	pointer
=	O
addrinfo	struct
;	O
ai	pointer
;	O
)	O
{	O
if	O
(	O
ai	pointer
->	O
ai_family	int
==	O
preferred_family	int
)	O
{	O
if	O
(	O
preferred_tail	pointer
)	O
preferred_tail	pointer
->	O
ai_next	pointer
=	O
ai	pointer
;	O
else	O
preferred	pointer
=	O
ai	pointer
;	O
preferred_tail	pointer
=	O
ai	pointer
;	O
ai	pointer
=	O
ai	pointer
->	O
ai_next	pointer
;	O
preferred_tail	pointer
->	O
ai_next	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
unpreferred_tail	pointer
)	O
unpreferred_tail	pointer
->	O
ai_next	pointer
=	O
ai	pointer
;	O
else	O
unpreferred	pointer
=	O
ai	pointer
;	O
unpreferred_tail	pointer
=	O
ai	pointer
;	O
ai	pointer
=	O
ai	pointer
->	O
ai_next	pointer
;	O
unpreferred_tail	pointer
->	O
ai_next	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
preferred	pointer
)	O
{	O
preferred_tail	pointer
->	O
ai_next	pointer
=	O
unpreferred	pointer
;	O
return	O
preferred	pointer
;	O
}	O
else	O
{	O
return	O
unpreferred	pointer
;	O
}	O
}	O
static	O
int	O
_resolve	function
(	O
int	O
family	int
,	O
int	O
flags	int
,	O
const	O
char	O
*	O
host	pointer
,	O
uint16_t	short
port	short
,	O
struct	O
addrinfo	struct
*	O
*	O
out_addr	pointer
)	O
{	O
struct	O
addrinfo	struct
hints	int
=	O
{	O
.	O
ai_family	int
=	O
family	int
,	O
.	O
ai_socktype	int
=	O
SOCK_STREAM	int
,	O
.	O
ai_flags	int
=	O
AI_ADDRCONFIG	int
|	O
flags	int
}	O
;	O
if	O
(	O
port	short
)	O
{	O
char	O
s_port	int
[	O
NI_MAXSERV	int
]	O
;	O
hints	int
.	O
ai_flags	int
|=	O
AI_NUMERICSERV	int
;	O
wget_snprintf	function
(	O
s_port	int
,	O
sizeof	O
(	O
s_port	int
)	O
,	O
"%hu"	pointer
,	O
port	short
)	O
;	O
debug_printf	O
(	O
"resolving %s:%s...\n"	pointer
,	O
host	pointer
?	O
host	pointer
:	O
""	pointer
,	O
s_port	int
)	O
;	O
return	O
getaddrinfo	function
(	O
host	pointer
,	O
s_port	int
,	O
&	O
hints	int
,	O
out_addr	pointer
)	O
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"resolving %s...\n"	pointer
,	O
host	pointer
)	O
;	O
return	O
getaddrinfo	function
(	O
host	pointer
,	O
NULL	O
,	O
&	O
hints	int
,	O
out_addr	pointer
)	O
;	O
}	O
}	O
int	O
wget_dns_cache_ip	function
(	O
wget_dns	struct
*	O
dns	pointer
,	O
const	O
char	O
*	O
ip	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
uint16_t	short
port	short
)	O
{	O
int	O
rc	int
,	O
family	int
;	O
struct	O
addrinfo	struct
*	O
ai	pointer
;	O
if	O
(	O
!	O
dns	pointer
||	O
!	O
dns	pointer
->	O
cache	pointer
||	O
!	O
name	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
wget_ip_is_family	function
(	O
ip	pointer
,	O
WGET_NET_FAMILY_IPV4	int
)	O
)	O
{	O
family	int
=	O
AF_INET	O
;	O
}	O
else	O
if	O
(	O
wget_ip_is_family	function
(	O
ip	pointer
,	O
WGET_NET_FAMILY_IPV6	int
)	O
)	O
{	O
family	int
=	O
AF_INET6	O
;	O
}	O
else	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
(	O
rc	int
=	O
_resolve	function
(	O
family	int
,	O
AI_NUMERICHOST	int
,	O
ip	pointer
,	O
port	short
,	O
&	O
ai	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to resolve %s:%d: %s\n"	pointer
)	O
,	O
ip	pointer
,	O
port	short
,	O
gai_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
WGET_E_UNKNOWN	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
wget_dns_cache_add	function
(	O
dns	pointer
->	O
cache	pointer
,	O
name	pointer
,	O
port	short
,	O
&	O
ai	pointer
)	O
)	O
<	O
0	int
)	O
{	O
freeaddrinfo	function
(	O
ai	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
struct	O
addrinfo	struct
*	O
wget_dns_resolve	function
(	O
wget_dns	struct
*	O
dns	pointer
,	O
const	O
char	O
*	O
host	pointer
,	O
uint16_t	short
port	short
,	O
int	O
family	int
,	O
int	O
preferred_family	int
)	O
{	O
struct	O
addrinfo	struct
*	O
addrinfo	struct
=	O
NULL	O
;	O
int	O
rc	int
=	O
0	int
;	O
char	O
adr	array
[	O
NI_MAXHOST	int
]	O
,	O
sport	array
[	O
NI_MAXSERV	int
]	O
;	O
long	O
long	O
before_millisecs	long long
=	O
0	int
;	O
wget_dns_stats_data	struct
stats	pointer
;	O
if	O
(	O
!	O
dns	pointer
)	O
dns	pointer
=	O
&	O
default_dns	struct
;	O
if	O
(	O
dns	pointer
->	O
stats_callback	pointer
)	O
before_millisecs	long long
=	O
wget_get_timemillis	function
(	O
)	O
;	O
for	O
(	O
int	O
tries	int
=	O
0	int
,	O
max	int
=	O
3	int
;	O
tries	int
<	O
max	int
;	O
tries	int
++	O
)	O
{	O
if	O
(	O
dns	pointer
->	O
cache	pointer
)	O
{	O
if	O
(	O
(	O
addrinfo	struct
=	O
wget_dns_cache_get	function
(	O
dns	pointer
->	O
cache	pointer
,	O
host	pointer
,	O
port	short
)	O
)	O
)	O
return	O
addrinfo	struct
;	O
wget_thread_mutex_lock	function
(	O
dns	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
(	O
addrinfo	struct
=	O
wget_dns_cache_get	function
(	O
dns	pointer
->	O
cache	pointer
,	O
host	pointer
,	O
port	short
)	O
)	O
)	O
{	O
wget_thread_mutex_unlock	function
(	O
dns	pointer
->	O
mutex	pointer
)	O
;	O
return	O
addrinfo	struct
;	O
}	O
}	O
addrinfo	struct
=	O
NULL	O
;	O
rc	int
=	O
_resolve	function
(	O
family	int
,	O
0	int
,	O
host	pointer
,	O
port	short
,	O
&	O
addrinfo	struct
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
||	O
rc	int
!=	O
EAI_AGAIN	O
)	O
break	O
;	O
if	O
(	O
tries	int
<	O
max	int
-	O
1	int
)	O
{	O
if	O
(	O
dns	pointer
->	O
cache	pointer
)	O
wget_thread_mutex_unlock	function
(	O
dns	pointer
->	O
mutex	pointer
)	O
;	O
wget_millisleep	function
(	O
100	int
)	O
;	O
}	O
}	O
if	O
(	O
dns	pointer
->	O
stats_callback	pointer
)	O
{	O
long	O
long	O
after_millisecs	long long
=	O
wget_get_timemillis	function
(	O
)	O
;	O
stats	pointer
.	O
dns_secs	long long
=	O
after_millisecs	long long
-	O
before_millisecs	long long
;	O
stats	pointer
.	O
hostname	pointer
=	O
host	pointer
;	O
stats	pointer
.	O
port	short
=	O
port	short
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to resolve %s (%s)\n"	pointer
)	O
,	O
(	O
host	pointer
?	O
host	pointer
:	O
""	pointer
)	O
,	O
gai_strerror	function
(	O
rc	int
)	O
)	O
;	O
if	O
(	O
dns	pointer
->	O
cache	pointer
)	O
wget_thread_mutex_unlock	function
(	O
dns	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
dns	pointer
->	O
stats_callback	pointer
)	O
{	O
stats	pointer
.	O
ip	pointer
=	O
NULL	O
;	O
dns	pointer
->	O
stats_callback	pointer
(	O
dns	pointer
,	O
&	O
stats	pointer
,	O
dns	pointer
->	O
stats_ctx	pointer
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
if	O
(	O
family	int
==	O
AF_UNSPEC	O
&&	O
preferred_family	int
!=	O
AF_UNSPEC	O
)	O
addrinfo	struct
=	O
_wget_sort_preferred	function
(	O
addrinfo	struct
,	O
preferred_family	int
)	O
;	O
if	O
(	O
dns	pointer
->	O
stats_callback	pointer
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
getnameinfo	function
(	O
addrinfo	struct
->	O
ai_addr	pointer
,	O
addrinfo	struct
->	O
ai_addrlen	int
,	O
adr	array
,	O
sizeof	O
(	O
adr	array
)	O
,	O
sport	array
,	O
sizeof	O
(	O
sport	array
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
)	O
==	O
0	int
)	O
stats	pointer
.	O
ip	pointer
=	O
adr	array
;	O
else	O
stats	pointer
.	O
ip	pointer
=	O
"???"	pointer
;	O
dns	pointer
->	O
stats_callback	pointer
(	O
dns	pointer
,	O
&	O
stats	pointer
,	O
dns	pointer
->	O
stats_ctx	pointer
)	O
;	O
}	O
if	O
(	O
wget_logger_is_active	function
(	O
wget_get_logger	function
(	O
WGET_LOGGER_DEBUG	int
)	O
)	O
)	O
{	O
for	O
(	O
struct	O
addrinfo	struct
*	O
ai	pointer
=	O
addrinfo	struct
;	O
ai	pointer
;	O
ai	pointer
=	O
ai	pointer
->	O
ai_next	pointer
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
getnameinfo	function
(	O
ai	pointer
->	O
ai_addr	pointer
,	O
ai	pointer
->	O
ai_addrlen	int
,	O
adr	array
,	O
sizeof	O
(	O
adr	array
)	O
,	O
sport	array
,	O
sizeof	O
(	O
sport	array
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
)	O
==	O
0	int
)	O
debug_printf	O
(	O
"has %s:%s\n"	pointer
,	O
adr	array
,	O
sport	array
)	O
;	O
else	O
debug_printf	O
(	O
"has ??? (%s)\n"	pointer
,	O
gai_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
}	O
if	O
(	O
dns	pointer
->	O
cache	pointer
)	O
{	O
rc	int
=	O
wget_dns_cache_add	function
(	O
dns	pointer
->	O
cache	pointer
,	O
host	pointer
,	O
port	short
,	O
&	O
addrinfo	struct
)	O
;	O
wget_thread_mutex_unlock	function
(	O
dns	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
)	O
{	O
freeaddrinfo	function
(	O
addrinfo	struct
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
return	O
addrinfo	struct
;	O
}	O
void	O
wget_dns_freeaddrinfo	function
(	O
wget_dns	struct
*	O
dns	pointer
,	O
struct	O
addrinfo	struct
*	O
*	O
addrinfo	struct
)	O
{	O
if	O
(	O
addrinfo	struct
&&	O
*	O
addrinfo	struct
)	O
{	O
if	O
(	O
!	O
dns	pointer
)	O
dns	pointer
=	O
&	O
default_dns	struct
;	O
if	O
(	O
!	O
dns	pointer
->	O
cache	pointer
)	O
{	O
freeaddrinfo	function
(	O
*	O
addrinfo	struct
)	O
;	O
*	O
addrinfo	struct
=	O
NULL	O
;	O
}	O
else	O
{	O
*	O
addrinfo	struct
=	O
NULL	O
;	O
}	O
}	O
}	O
void	O
wget_dns_set_stats_callback	function
(	O
wget_dns	struct
*	O
dns	pointer
,	O
wget_dns_stats_callback	function
*	O
fn	pointer
,	O
void	O
*	O
ctx	pointer
)	O
{	O
if	O
(	O
!	O
dns	pointer
)	O
dns	pointer
=	O
&	O
default_dns	struct
;	O
dns	pointer
->	O
stats_callback	pointer
=	O
fn	pointer
;	O
dns	pointer
->	O
stats_ctx	pointer
=	O
ctx	pointer
;	O
}	O
