static	O
int	O
str_append_n	function
(	O
char	O
*	O
*	O
to	pointer
,	O
const	O
char	O
*	O
from	pointer
,	O
size_t	long
n	long
)	O
{	O
size_t	long
l	long
=	O
0	int
;	O
if	O
(	O
!	O
to	pointer
)	O
{	O
return	O
EOK	int
;	O
}	O
if	O
(	O
*	O
to	pointer
)	O
{	O
char	O
*	O
bigger	pointer
;	O
l	long
=	O
strlen	function
(	O
*	O
to	pointer
)	O
;	O
bigger	pointer
=	O
realloc	function
(	O
*	O
to	pointer
,	O
l	long
+	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
bigger	pointer
)	O
{	O
return	O
ENOMEM	int
;	O
}	O
*	O
to	pointer
=	O
bigger	pointer
;	O
}	O
else	O
{	O
*	O
to	pointer
=	O
malloc	function
(	O
n	long
+	O
1	int
)	O
;	O
}	O
strncpy	function
(	O
&	O
to	pointer
[	O
0	int
]	O
[	O
l	long
]	O
,	O
from	pointer
,	O
n	long
)	O
;	O
to	pointer
[	O
0	int
]	O
[	O
l	long
+	O
n	long
]	O
=	O
0	int
;	O
return	O
EOK	int
;	O
}	O
static	O
int	O
str_append	function
(	O
char	O
*	O
*	O
to	pointer
,	O
const	O
char	O
*	O
from	pointer
)	O
{	O
if	O
(	O
!	O
from	pointer
)	O
return	O
0	int
;	O
return	O
str_append_n	function
(	O
to	pointer
,	O
from	pointer
,	O
strlen	function
(	O
from	pointer
)	O
)	O
;	O
}	O
static	O
int	O
str_append_char	function
(	O
char	O
*	O
*	O
to	pointer
,	O
char	O
c	char
)	O
{	O
return	O
str_append_n	function
(	O
to	pointer
,	O
&	O
c	char
,	O
1	int
)	O
;	O
}	O
static	O
int	O
str_append_range	function
(	O
char	O
*	O
*	O
to	pointer
,	O
const	O
char	O
*	O
b	pointer
,	O
const	O
char	O
*	O
e	int
)	O
{	O
return	O
str_append_n	function
(	O
to	pointer
,	O
b	pointer
,	O
e	int
-	O
b	pointer
)	O
;	O
}	O
static	O
void	O
str_free	function
(	O
char	O
*	O
*	O
s	pointer
)	O
{	O
if	O
(	O
s	pointer
&&	O
*	O
s	pointer
)	O
{	O
free	function
(	O
*	O
s	pointer
)	O
;	O
*	O
s	pointer
=	O
0	int
;	O
}	O
}	O
int	O
mu_parse822_skip_nl	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
)	O
{	O
const	O
char	O
*	O
s	pointer
=	O
*	O
p	pointer
;	O
if	O
(	O
(	O
&	O
s	pointer
[	O
1	int
]	O
<	O
e	int
)	O
&&	O
s	pointer
[	O
0	int
]	O
==	O
'\r'	O
&&	O
s	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
*	O
p	pointer
+=	O
2	int
;	O
return	O
EOK	int
;	O
}	O
if	O
(	O
(	O
&	O
s	pointer
[	O
0	int
]	O
<	O
e	int
)	O
&&	O
s	pointer
[	O
0	int
]	O
==	O
'\n'	O
)	O
{	O
*	O
p	pointer
+=	O
1	int
;	O
return	O
EOK	int
;	O
}	O
return	O
EPARSE	O
;	O
}	O
int	O
mu_parse822_skip_lwsp_char	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
)	O
{	O
if	O
(	O
*	O
p	pointer
<	O
e	int
&&	O
mu_parse822_is_lwsp_char	function
(	O
*	O
*	O
p	pointer
)	O
)	O
{	O
*	O
p	pointer
+=	O
1	int
;	O
return	O
EOK	int
;	O
}	O
return	O
EPARSE	O
;	O
}	O
int	O
mu_parse822_skip_lwsp	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
)	O
{	O
int	O
space	int
=	O
0	int
;	O
while	O
(	O
*	O
p	pointer
!=	O
e	int
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
if	O
(	O
mu_parse822_skip_lwsp_char	function
(	O
p	pointer
,	O
e	int
)	O
==	O
EOK	int
)	O
{	O
space	int
=	O
1	int
;	O
continue	O
;	O
}	O
if	O
(	O
mu_parse822_skip_nl	function
(	O
p	pointer
,	O
e	int
)	O
==	O
EOK	int
)	O
{	O
if	O
(	O
mu_parse822_skip_lwsp_char	function
(	O
p	pointer
,	O
e	int
)	O
==	O
EOK	int
)	O
{	O
continue	O
;	O
}	O
*	O
p	pointer
=	O
save	pointer
;	O
return	O
EPARSE	O
;	O
}	O
break	O
;	O
}	O
return	O
space	int
?	O
EOK	int
:	O
EPARSE	O
;	O
}	O
int	O
mu_parse822_skip_comments	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
)	O
{	O
int	O
status	int
;	O
while	O
(	O
(	O
status	int
=	O
mu_parse822_comment	function
(	O
p	pointer
,	O
e	int
,	O
0	int
)	O
)	O
==	O
EOK	int
)	O
;	O
return	O
EOK	int
;	O
}	O
int	O
mu_parse822_digits	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
int	O
min	int
,	O
int	O
max	long
,	O
int	O
*	O
digits	pointer
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
int	O
i	int
=	O
0	int
;	O
assert	O
(	O
digits	pointer
)	O
;	O
*	O
digits	pointer
=	O
0	int
;	O
while	O
(	O
*	O
p	pointer
<	O
e	int
&&	O
mu_parse822_is_digit	function
(	O
*	O
*	O
p	pointer
)	O
)	O
{	O
*	O
digits	pointer
=	O
*	O
digits	pointer
*	O
10	int
+	O
*	O
*	O
p	pointer
-	O
'0'	O
;	O
*	O
p	pointer
+=	O
1	int
;	O
++	O
i	int
;	O
if	O
(	O
max	long
!=	O
0	int
&&	O
i	int
==	O
max	long
)	O
{	O
break	O
;	O
}	O
}	O
if	O
(	O
i	int
<	O
min	int
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
return	O
EPARSE	O
;	O
}	O
return	O
EOK	int
;	O
}	O
int	O
mu_parse822_special	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
c	char
)	O
{	O
mu_parse822_skip_lwsp	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
*	O
p	pointer
!=	O
e	int
&&	O
*	O
*	O
p	pointer
==	O
c	char
)	O
{	O
++	O
*	O
p	pointer
;	O
return	O
EOK	int
;	O
}	O
return	O
EPARSE	O
;	O
}	O
int	O
mu_parse822_comment	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
comment	pointer
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
'('	O
)	O
)	O
)	O
{	O
return	O
rc	int
;	O
}	O
while	O
(	O
*	O
p	pointer
!=	O
e	int
)	O
{	O
char	O
c	char
=	O
*	O
*	O
p	pointer
;	O
if	O
(	O
c	char
==	O
')'	O
)	O
{	O
*	O
p	pointer
+=	O
1	int
;	O
return	O
EOK	int
;	O
}	O
else	O
if	O
(	O
c	char
==	O
'('	O
)	O
{	O
rc	int
=	O
mu_parse822_comment	function
(	O
p	pointer
,	O
e	int
,	O
comment	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	char
==	O
'\\'	O
)	O
{	O
rc	int
=	O
mu_parse822_quoted_pair	function
(	O
p	pointer
,	O
e	int
,	O
comment	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	char
==	O
'\r'	O
)	O
{	O
*	O
p	pointer
+=	O
1	int
;	O
}	O
else	O
if	O
(	O
mu_parse822_is_char	function
(	O
c	char
)	O
)	O
{	O
rc	int
=	O
str_append_char	function
(	O
comment	pointer
,	O
c	char
)	O
;	O
*	O
p	pointer
+=	O
1	int
;	O
}	O
else	O
{	O
*	O
p	pointer
+=	O
1	int
;	O
}	O
if	O
(	O
rc	int
!=	O
EOK	int
)	O
break	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
e	int
)	O
{	O
rc	int
=	O
EPARSE	O
;	O
}	O
*	O
p	pointer
=	O
save	pointer
;	O
assert	O
(	O
rc	int
!=	O
EOK	int
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_atom	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
atom	pointer
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
int	O
rc	int
=	O
EPARSE	O
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
save	pointer
=	O
*	O
p	pointer
;	O
while	O
(	O
(	O
*	O
p	pointer
!=	O
e	int
)	O
&&	O
(	O
*	O
*	O
p	pointer
==	O
'.'	O
||	O
mu_parse822_is_atom_char	function
(	O
*	O
*	O
p	pointer
)	O
)	O
)	O
{	O
rc	int
=	O
str_append_char	function
(	O
atom	pointer
,	O
*	O
*	O
p	pointer
)	O
;	O
*	O
p	pointer
+=	O
1	int
;	O
if	O
(	O
rc	int
!=	O
EOK	int
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
break	O
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
parse822_atom_ex	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
atom	pointer
)	O
{	O
const	O
char	O
*	O
ptr	pointer
;	O
int	O
rc	int
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
for	O
(	O
ptr	pointer
=	O
*	O
p	pointer
;	O
(	O
ptr	pointer
!=	O
e	int
)	O
&&	O
mu_parse822_is_atom_char	function
(	O
*	O
ptr	pointer
)	O
;	O
ptr	pointer
++	O
)	O
;	O
if	O
(	O
ptr	pointer
-	O
*	O
p	pointer
==	O
0	int
)	O
return	O
EPARSE	O
;	O
rc	int
=	O
str_append_n	function
(	O
atom	pointer
,	O
*	O
p	pointer
,	O
ptr	pointer
-	O
*	O
p	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
p	pointer
=	O
ptr	pointer
;	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_quoted_pair	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
qpair	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
e	int
-	O
*	O
p	pointer
)	O
<	O
2	int
)	O
return	O
EPARSE	O
;	O
if	O
(	O
*	O
*	O
p	pointer
!=	O
'\\'	O
)	O
return	O
EPARSE	O
;	O
if	O
(	O
(	O
rc	int
=	O
str_append_char	function
(	O
qpair	pointer
,	O
*	O
(	O
*	O
p	pointer
+	O
1	int
)	O
)	O
)	O
)	O
return	O
rc	int
;	O
*	O
p	pointer
+=	O
2	int
;	O
return	O
EOK	int
;	O
}	O
int	O
mu_parse822_quoted_string	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
qstr	pointer
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
int	O
rc	int
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
save	pointer
=	O
*	O
p	pointer
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
'"'	O
)	O
)	O
)	O
return	O
rc	int
;	O
while	O
(	O
*	O
p	pointer
!=	O
e	int
)	O
{	O
char	O
c	char
=	O
*	O
*	O
p	pointer
;	O
if	O
(	O
c	char
==	O
'"'	O
)	O
{	O
*	O
p	pointer
+=	O
1	int
;	O
return	O
EOK	int
;	O
}	O
else	O
if	O
(	O
c	char
==	O
'\\'	O
)	O
{	O
rc	int
=	O
mu_parse822_quoted_pair	function
(	O
p	pointer
,	O
e	int
,	O
qstr	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	char
==	O
'\r'	O
)	O
{	O
*	O
p	pointer
+=	O
1	int
;	O
}	O
else	O
if	O
(	O
mu_parse822_is_char	function
(	O
c	char
)	O
)	O
{	O
rc	int
=	O
str_append_char	function
(	O
qstr	pointer
,	O
c	char
)	O
;	O
*	O
p	pointer
+=	O
1	int
;	O
}	O
else	O
{	O
*	O
p	pointer
+=	O
1	int
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
str_free	function
(	O
qstr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
*	O
p	pointer
=	O
save	pointer
;	O
str_free	function
(	O
qstr	pointer
)	O
;	O
return	O
EPARSE	O
;	O
}	O
int	O
mu_parse822_word	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
word	pointer
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
int	O
rc	int
=	O
EOK	int
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
save	pointer
=	O
*	O
p	pointer
;	O
{	O
char	O
*	O
qstr	pointer
=	O
0	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_quoted_string	function
(	O
p	pointer
,	O
e	int
,	O
&	O
qstr	pointer
)	O
)	O
==	O
EOK	int
&&	O
qstr	pointer
)	O
{	O
rc	int
=	O
str_append	function
(	O
word	pointer
,	O
qstr	pointer
)	O
;	O
str_free	function
(	O
&	O
qstr	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
EOK	int
)	O
*	O
p	pointer
=	O
save	pointer
;	O
return	O
rc	int
;	O
}	O
assert	O
(	O
qstr	pointer
==	O
NULL	O
)	O
;	O
}	O
if	O
(	O
rc	int
!=	O
EPARSE	O
)	O
{	O
return	O
rc	int
;	O
}	O
{	O
char	O
*	O
atom	pointer
=	O
0	int
;	O
if	O
(	O
parse822_atom_ex	function
(	O
p	pointer
,	O
e	int
,	O
&	O
atom	pointer
)	O
==	O
EOK	int
)	O
{	O
rc	int
=	O
str_append	function
(	O
word	pointer
,	O
atom	pointer
)	O
;	O
str_free	function
(	O
&	O
atom	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
EOK	int
)	O
*	O
p	pointer
=	O
save	pointer
;	O
return	O
rc	int
;	O
}	O
assert	O
(	O
atom	pointer
==	O
NULL	O
)	O
;	O
}	O
return	O
EPARSE	O
;	O
}	O
int	O
parse822_word_dot	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
word	pointer
)	O
{	O
int	O
rc	int
=	O
mu_parse822_word	function
(	O
p	pointer
,	O
e	int
,	O
word	pointer
)	O
;	O
for	O
(	O
;	O
rc	int
==	O
0	int
&&	O
(	O
*	O
p	pointer
!=	O
e	int
)	O
&&	O
*	O
*	O
p	pointer
==	O
'.'	O
;	O
++	O
*	O
p	pointer
)	O
rc	int
=	O
str_append	function
(	O
word	pointer
,	O
"."	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_phrase	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
phrase	pointer
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
parse822_word_dot	function
(	O
p	pointer
,	O
e	int
,	O
phrase	pointer
)	O
)	O
)	O
return	O
rc	int
;	O
{	O
char	O
*	O
word	pointer
=	O
0	int
;	O
while	O
(	O
(	O
rc	int
=	O
parse822_word_dot	function
(	O
p	pointer
,	O
e	int
,	O
&	O
word	pointer
)	O
)	O
==	O
EOK	int
)	O
{	O
rc	int
=	O
str_append_char	function
(	O
phrase	pointer
,	O
' '	O
)	O
;	O
if	O
(	O
rc	int
==	O
EOK	int
)	O
rc	int
=	O
str_append	function
(	O
phrase	pointer
,	O
word	pointer
)	O
;	O
str_free	function
(	O
&	O
word	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
EOK	int
)	O
break	O
;	O
}	O
assert	O
(	O
word	pointer
==	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
==	O
EPARSE	O
)	O
rc	int
=	O
EOK	int
;	O
}	O
if	O
(	O
rc	int
)	O
*	O
p	pointer
=	O
save	pointer
;	O
return	O
rc	int
;	O
}	O
static	O
mu_address_t	pointer
new_mb	function
(	O
void	O
)	O
{	O
return	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
mu_address	struct
)	O
)	O
;	O
}	O
static	O
char	O
*	O
addr_field_by_mask	function
(	O
mu_address_t	pointer
addr	pointer
,	O
int	O
mask	int
)	O
{	O
switch	O
(	O
mask	int
)	O
{	O
case	O
MU_ADDR_HINT_PRINTABLE	int
:	O
return	O
addr	pointer
->	O
printable	pointer
;	O
case	O
MU_ADDR_HINT_COMMENTS	int
:	O
return	O
addr	pointer
->	O
comments	pointer
;	O
case	O
MU_ADDR_HINT_PERSONAL	int
:	O
return	O
addr	pointer
->	O
personal	pointer
;	O
case	O
MU_ADDR_HINT_EMAIL	int
:	O
return	O
addr	pointer
->	O
email	pointer
;	O
case	O
MU_ADDR_HINT_LOCAL	int
:	O
return	O
addr	pointer
->	O
local_part	pointer
;	O
case	O
MU_ADDR_HINT_DOMAIN	int
:	O
return	O
addr	pointer
->	O
domain	pointer
;	O
case	O
MU_ADDR_HINT_ROUTE	int
:	O
return	O
addr	pointer
->	O
route	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
get_val	function
(	O
mu_address_t	pointer
hint	pointer
,	O
int	O
hflags	int
,	O
char	O
*	O
value	pointer
,	O
int	O
mask	int
,	O
int	O
*	O
memflag	pointer
)	O
{	O
if	O
(	O
!	O
value	pointer
&&	O
hint	pointer
&&	O
(	O
hflags	int
&	O
mask	int
)	O
)	O
{	O
char	O
*	O
p	pointer
=	O
addr_field_by_mask	function
(	O
hint	pointer
,	O
mask	int
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
if	O
(	O
memflag	pointer
)	O
*	O
memflag	pointer
|=	O
mask	int
;	O
value	pointer
=	O
strdup	function
(	O
p	pointer
)	O
;	O
}	O
}	O
return	O
value	pointer
;	O
}	O
static	O
void	O
addr_free_fields	function
(	O
mu_address_t	pointer
a	pointer
,	O
int	O
memflag	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
addr_field_by_mask	function
(	O
a	pointer
,	O
memflag	pointer
&	O
MU_ADDR_HINT_PRINTABLE	int
)	O
)	O
)	O
free	function
(	O
p	pointer
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
addr_field_by_mask	function
(	O
a	pointer
,	O
memflag	pointer
&	O
MU_ADDR_HINT_COMMENTS	int
)	O
)	O
)	O
free	function
(	O
p	pointer
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
addr_field_by_mask	function
(	O
a	pointer
,	O
memflag	pointer
&	O
MU_ADDR_HINT_PERSONAL	int
)	O
)	O
)	O
free	function
(	O
p	pointer
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
addr_field_by_mask	function
(	O
a	pointer
,	O
memflag	pointer
&	O
MU_ADDR_HINT_EMAIL	int
)	O
)	O
)	O
free	function
(	O
p	pointer
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
addr_field_by_mask	function
(	O
a	pointer
,	O
memflag	pointer
&	O
MU_ADDR_HINT_LOCAL	int
)	O
)	O
)	O
free	function
(	O
p	pointer
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
addr_field_by_mask	function
(	O
a	pointer
,	O
memflag	pointer
&	O
MU_ADDR_HINT_DOMAIN	int
)	O
)	O
)	O
free	function
(	O
p	pointer
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
addr_field_by_mask	function
(	O
a	pointer
,	O
memflag	pointer
&	O
MU_ADDR_HINT_ROUTE	int
)	O
)	O
)	O
free	function
(	O
p	pointer
)	O
;	O
}	O
static	O
int	O
fill_mb	function
(	O
mu_address_t	pointer
*	O
pa	pointer
,	O
char	O
*	O
comments	pointer
,	O
char	O
*	O
personal	pointer
,	O
char	O
*	O
local	pointer
,	O
char	O
*	O
domain	pointer
,	O
mu_address_t	pointer
hint	pointer
,	O
int	O
hflags	int
)	O
{	O
int	O
rc	int
=	O
EOK	int
;	O
mu_address_t	pointer
a	pointer
;	O
int	O
memflag	pointer
=	O
0	int
;	O
a	pointer
=	O
new_mb	function
(	O
)	O
;	O
if	O
(	O
!	O
a	pointer
)	O
return	O
ENOMEM	int
;	O
a	pointer
->	O
comments	pointer
=	O
get_val	function
(	O
hint	pointer
,	O
hflags	int
,	O
comments	pointer
,	O
MU_ADDR_HINT_COMMENTS	int
,	O
&	O
memflag	pointer
)	O
;	O
a	pointer
->	O
personal	pointer
=	O
get_val	function
(	O
hint	pointer
,	O
hflags	int
,	O
personal	pointer
,	O
MU_ADDR_HINT_PERSONAL	int
,	O
&	O
memflag	pointer
)	O
;	O
domain	pointer
=	O
get_val	function
(	O
hint	pointer
,	O
hflags	int
,	O
domain	pointer
,	O
MU_ADDR_HINT_DOMAIN	int
,	O
&	O
memflag	pointer
)	O
;	O
local	pointer
=	O
get_val	function
(	O
hint	pointer
,	O
hflags	int
,	O
local	pointer
,	O
MU_ADDR_HINT_LOCAL	int
,	O
&	O
memflag	pointer
)	O
;	O
do	O
{	O
if	O
(	O
!	O
local	pointer
)	O
break	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_quote_local_part	function
(	O
&	O
a	pointer
->	O
email	pointer
,	O
local	pointer
)	O
)	O
)	O
break	O
;	O
if	O
(	O
domain	pointer
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
str_append	function
(	O
&	O
a	pointer
->	O
email	pointer
,	O
"@"	pointer
)	O
)	O
)	O
break	O
;	O
if	O
(	O
(	O
rc	int
=	O
str_append	function
(	O
&	O
a	pointer
->	O
email	pointer
,	O
domain	pointer
)	O
)	O
)	O
break	O
;	O
}	O
}	O
while	O
(	O
0	int
)	O
;	O
a	pointer
->	O
local_part	pointer
=	O
local	pointer
;	O
a	pointer
->	O
domain	pointer
=	O
domain	pointer
;	O
if	O
(	O
rc	int
!=	O
EOK	int
)	O
{	O
addr_free_fields	function
(	O
a	pointer
,	O
memflag	pointer
)	O
;	O
free	function
(	O
a	pointer
)	O
;	O
}	O
else	O
*	O
pa	pointer
=	O
a	pointer
;	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_address_list	function
(	O
mu_address_t	pointer
*	O
a	pointer
,	O
const	O
char	O
*	O
s	pointer
,	O
mu_address_t	pointer
hint	pointer
,	O
int	O
hflags	int
)	O
{	O
const	O
char	O
*	O
*	O
p	pointer
=	O
&	O
s	pointer
;	O
const	O
char	O
*	O
e	int
=	O
&	O
s	pointer
[	O
strlen	function
(	O
s	pointer
)	O
]	O
;	O
int	O
rc	int
=	O
EOK	int
;	O
mu_address_t	pointer
*	O
n	long
=	O
a	pointer
;	O
rc	int
=	O
mu_parse822_address	function
(	O
p	pointer
,	O
e	int
,	O
n	long
,	O
hint	pointer
,	O
hflags	int
)	O
;	O
if	O
(	O
rc	int
!=	O
EOK	int
&&	O
rc	int
!=	O
EPARSE	O
)	O
{	O
return	O
rc	int
;	O
}	O
while	O
(	O
*	O
p	pointer
<	O
e	int
)	O
{	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
while	O
(	O
*	O
n	long
)	O
{	O
n	long
=	O
&	O
(	O
*	O
n	long
)	O
->	O
next	pointer
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
','	O
)	O
)	O
)	O
{	O
break	O
;	O
}	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
rc	int
=	O
mu_parse822_address	function
(	O
p	pointer
,	O
e	int
,	O
n	long
,	O
hint	pointer
,	O
hflags	int
)	O
;	O
if	O
(	O
rc	int
==	O
EOK	int
||	O
rc	int
==	O
EPARSE	O
)	O
{	O
rc	int
=	O
EOK	int
;	O
}	O
else	O
{	O
break	O
;	O
}	O
}	O
if	O
(	O
rc	int
)	O
{	O
mu_address_destroy	function
(	O
a	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_address	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
mu_address_t	pointer
*	O
a	pointer
,	O
mu_address_t	pointer
hint	pointer
,	O
int	O
hflags	int
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_mail_box	function
(	O
p	pointer
,	O
e	int
,	O
a	pointer
,	O
hint	pointer
,	O
hflags	int
)	O
)	O
==	O
EPARSE	O
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_group	function
(	O
p	pointer
,	O
e	int
,	O
a	pointer
,	O
hint	pointer
,	O
hflags	int
)	O
)	O
==	O
EPARSE	O
)	O
{	O
rc	int
=	O
mu_parse822_unix_mbox	function
(	O
p	pointer
,	O
e	int
,	O
a	pointer
,	O
hint	pointer
,	O
hflags	int
)	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
&&	O
*	O
a	pointer
&&	O
!	O
(	O
*	O
a	pointer
)	O
->	O
route	pointer
)	O
(	O
*	O
a	pointer
)	O
->	O
route	pointer
=	O
get_val	function
(	O
hint	pointer
,	O
hflags	int
,	O
NULL	O
,	O
MU_ADDR_HINT_ROUTE	int
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_group	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
mu_address_t	pointer
*	O
a	pointer
,	O
mu_address_t	pointer
hint	pointer
,	O
int	O
hflags	int
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
mu_address_t	pointer
*	O
asave	pointer
=	O
a	pointer
;	O
int	O
rc	int
;	O
char	O
*	O
phrase	pointer
=	O
0	int
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
*	O
p	pointer
=	O
save	pointer
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_phrase	function
(	O
p	pointer
,	O
e	int
,	O
&	O
phrase	pointer
)	O
)	O
)	O
{	O
return	O
rc	int
;	O
}	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
':'	O
)	O
)	O
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
str_free	function
(	O
&	O
phrase	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
str_free	function
(	O
&	O
phrase	pointer
)	O
;	O
while	O
(	O
!	O
rc	int
)	O
{	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
rc	int
=	O
mu_parse822_mail_box	function
(	O
p	pointer
,	O
e	int
,	O
a	pointer
,	O
hint	pointer
,	O
hflags	int
)	O
;	O
if	O
(	O
rc	int
==	O
EOK	int
)	O
{	O
a	pointer
=	O
&	O
(	O
*	O
a	pointer
)	O
->	O
next	pointer
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
}	O
else	O
if	O
(	O
rc	int
!=	O
EPARSE	O
)	O
{	O
break	O
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
','	O
)	O
)	O
)	O
{	O
break	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
EPARSE	O
)	O
{	O
rc	int
=	O
EOK	int
;	O
}	O
if	O
(	O
rc	int
||	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
';'	O
)	O
)	O
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
mu_address_destroy	function
(	O
asave	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_mail_box	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
mu_address_t	pointer
*	O
a	pointer
,	O
mu_address_t	pointer
hint	pointer
,	O
int	O
hflags	int
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_addr_spec	function
(	O
p	pointer
,	O
e	int
,	O
a	pointer
,	O
hint	pointer
,	O
hflags	int
)	O
)	O
==	O
EOK	int
)	O
{	O
mu_parse822_skip_lwsp	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_comment	function
(	O
p	pointer
,	O
e	int
,	O
&	O
(	O
*	O
a	pointer
)	O
->	O
personal	pointer
)	O
)	O
==	O
EPARSE	O
)	O
{	O
rc	int
=	O
EOK	int
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
mu_address_destroy	function
(	O
a	pointer
)	O
;	O
*	O
p	pointer
=	O
save	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
{	O
char	O
*	O
phrase	pointer
=	O
0	int
;	O
rc	int
=	O
mu_parse822_phrase	function
(	O
p	pointer
,	O
e	int
,	O
&	O
phrase	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
EPARSE	O
&&	O
rc	int
!=	O
EOK	int
)	O
{	O
return	O
rc	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_route_addr	function
(	O
p	pointer
,	O
e	int
,	O
a	pointer
,	O
hint	pointer
,	O
hflags	int
)	O
)	O
==	O
EOK	int
)	O
{	O
(	O
*	O
a	pointer
)	O
->	O
personal	pointer
=	O
phrase	pointer
;	O
return	O
EOK	int
;	O
}	O
str_free	function
(	O
&	O
phrase	pointer
)	O
;	O
*	O
p	pointer
=	O
save	pointer
;	O
return	O
rc	int
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_route_addr	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
mu_address_t	pointer
*	O
a	pointer
,	O
mu_address_t	pointer
hint	pointer
,	O
int	O
hflags	int
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
char	O
*	O
route	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
int	O
memflag	pointer
=	O
0	int
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
'<'	O
)	O
)	O
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
!	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
'>'	O
)	O
)	O
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
fill_mb	function
(	O
a	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
hint	pointer
,	O
hflags	int
)	O
)	O
==	O
EOK	int
)	O
rc	int
=	O
str_append	function
(	O
&	O
(	O
*	O
a	pointer
)	O
->	O
email	pointer
,	O
""	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mu_parse822_route	function
(	O
p	pointer
,	O
e	int
,	O
&	O
route	pointer
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_addr_spec	function
(	O
p	pointer
,	O
e	int
,	O
a	pointer
,	O
hint	pointer
,	O
hflags	int
)	O
)	O
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
str_free	function
(	O
&	O
route	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
(	O
*	O
a	pointer
)	O
->	O
route	pointer
=	O
get_val	function
(	O
hint	pointer
,	O
hflags	int
,	O
route	pointer
,	O
MU_ADDR_HINT_ROUTE	int
,	O
&	O
memflag	pointer
)	O
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
'>'	O
)	O
)	O
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
mu_address_destroy	function
(	O
a	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
return	O
EOK	int
;	O
}	O
int	O
mu_parse822_route	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
route	pointer
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
char	O
*	O
accumulator	pointer
=	O
0	int
;	O
int	O
rc	int
=	O
EOK	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
'@'	O
)	O
)	O
)	O
{	O
break	O
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
str_append	function
(	O
&	O
accumulator	pointer
,	O
"@"	pointer
)	O
)	O
)	O
{	O
break	O
;	O
}	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_domain	function
(	O
p	pointer
,	O
e	int
,	O
&	O
accumulator	pointer
)	O
)	O
)	O
{	O
break	O
;	O
}	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
','	O
)	O
)	O
==	O
EPARSE	O
)	O
{	O
rc	int
=	O
EOK	int
;	O
break	O
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
str_append	function
(	O
&	O
accumulator	pointer
,	O
", "	pointer
)	O
)	O
)	O
{	O
break	O
;	O
}	O
}	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
!	O
rc	int
)	O
{	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
':'	O
)	O
;	O
}	O
if	O
(	O
!	O
rc	int
)	O
{	O
rc	int
=	O
str_append	function
(	O
route	pointer
,	O
accumulator	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
}	O
str_free	function
(	O
&	O
accumulator	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_addr_spec	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
mu_address_t	pointer
*	O
a	pointer
,	O
mu_address_t	pointer
hint	pointer
,	O
int	O
hflags	int
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
char	O
*	O
local_part	pointer
=	O
0	int
;	O
char	O
*	O
domain	pointer
=	O
0	int
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_parse822_local_part	function
(	O
p	pointer
,	O
e	int
,	O
&	O
local_part	pointer
)	O
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
!	O
rc	int
)	O
{	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
'@'	O
)	O
;	O
if	O
(	O
!	O
rc	int
)	O
{	O
rc	int
=	O
mu_parse822_domain	function
(	O
p	pointer
,	O
e	int
,	O
&	O
domain	pointer
)	O
;	O
if	O
(	O
!	O
rc	int
)	O
rc	int
=	O
fill_mb	function
(	O
a	pointer
,	O
0	int
,	O
0	int
,	O
local_part	pointer
,	O
domain	pointer
,	O
hint	pointer
,	O
hflags	int
)	O
;	O
}	O
}	O
if	O
(	O
rc	int
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
str_free	function
(	O
&	O
local_part	pointer
)	O
;	O
str_free	function
(	O
&	O
domain	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_unix_mbox	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
mu_address_t	pointer
*	O
a	pointer
,	O
mu_address_t	pointer
hint	pointer
,	O
int	O
hflags	int
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
char	O
*	O
mbox	pointer
=	O
0	int
;	O
int	O
rc	int
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
rc	int
=	O
mu_parse822_atom	function
(	O
p	pointer
,	O
e	int
,	O
&	O
mbox	pointer
)	O
;	O
if	O
(	O
!	O
rc	int
)	O
rc	int
=	O
fill_mb	function
(	O
a	pointer
,	O
0	int
,	O
0	int
,	O
mbox	pointer
,	O
0	int
,	O
hint	pointer
,	O
hflags	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
str_free	function
(	O
&	O
mbox	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_local_part	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
local_part	pointer
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
const	O
char	O
*	O
save2	pointer
=	O
*	O
p	pointer
;	O
int	O
rc	int
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_word	function
(	O
p	pointer
,	O
e	int
,	O
local_part	pointer
)	O
)	O
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
return	O
rc	int
;	O
}	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
save2	pointer
=	O
*	O
p	pointer
;	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
'.'	O
)	O
;	O
if	O
(	O
!	O
rc	int
)	O
{	O
char	O
*	O
more	pointer
=	O
0	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_local_part	function
(	O
p	pointer
,	O
e	int
,	O
&	O
more	pointer
)	O
)	O
==	O
EOK	int
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
str_append	function
(	O
local_part	pointer
,	O
"."	pointer
)	O
)	O
==	O
EOK	int
)	O
{	O
rc	int
=	O
str_append	function
(	O
local_part	pointer
,	O
more	pointer
)	O
;	O
}	O
}	O
str_free	function
(	O
&	O
more	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
EPARSE	O
)	O
{	O
*	O
p	pointer
=	O
save2	pointer
;	O
rc	int
=	O
EOK	int
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
str_free	function
(	O
local_part	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_domain	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
domain	pointer
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
const	O
char	O
*	O
save2	pointer
=	O
0	int
;	O
int	O
rc	int
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_sub_domain	function
(	O
p	pointer
,	O
e	int
,	O
domain	pointer
)	O
)	O
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
return	O
rc	int
;	O
}	O
save2	pointer
=	O
*	O
p	pointer
;	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
'.'	O
)	O
;	O
if	O
(	O
!	O
rc	int
)	O
{	O
char	O
*	O
more	pointer
=	O
0	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_domain	function
(	O
p	pointer
,	O
e	int
,	O
&	O
more	pointer
)	O
)	O
==	O
EOK	int
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
str_append	function
(	O
domain	pointer
,	O
"."	pointer
)	O
)	O
==	O
EOK	int
)	O
{	O
rc	int
=	O
str_append	function
(	O
domain	pointer
,	O
more	pointer
)	O
;	O
}	O
}	O
str_free	function
(	O
&	O
more	pointer
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
EPARSE	O
)	O
{	O
*	O
p	pointer
=	O
save2	pointer
;	O
rc	int
=	O
EOK	int
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
str_free	function
(	O
domain	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_sub_domain	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
sub_domain	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_domain_ref	function
(	O
p	pointer
,	O
e	int
,	O
sub_domain	pointer
)	O
)	O
==	O
EPARSE	O
)	O
rc	int
=	O
mu_parse822_domain_literal	function
(	O
p	pointer
,	O
e	int
,	O
sub_domain	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_domain_ref	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
domain_ref	pointer
)	O
{	O
return	O
mu_parse822_atom	function
(	O
p	pointer
,	O
e	int
,	O
domain_ref	pointer
)	O
;	O
}	O
int	O
mu_parse822_d_text	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
dtext	pointer
)	O
{	O
const	O
char	O
*	O
start	pointer
=	O
*	O
p	pointer
;	O
int	O
rc	int
=	O
EOK	int
;	O
while	O
(	O
*	O
p	pointer
<	O
e	int
&&	O
mu_parse822_is_d_text	function
(	O
*	O
*	O
p	pointer
)	O
)	O
{	O
*	O
p	pointer
+=	O
1	int
;	O
}	O
if	O
(	O
start	pointer
==	O
*	O
p	pointer
)	O
{	O
return	O
EPARSE	O
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
str_append_range	function
(	O
dtext	pointer
,	O
start	pointer
,	O
*	O
p	pointer
)	O
)	O
)	O
{	O
*	O
p	pointer
=	O
start	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_domain_literal	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
domain_literal	pointer
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
char	O
*	O
literal	pointer
=	O
0	int
;	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
'['	O
)	O
)	O
)	O
{	O
return	O
rc	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
str_append_char	function
(	O
&	O
literal	pointer
,	O
'['	O
)	O
)	O
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
return	O
rc	int
;	O
}	O
while	O
(	O
(	O
rc	int
=	O
mu_parse822_d_text	function
(	O
p	pointer
,	O
e	int
,	O
&	O
literal	pointer
)	O
)	O
==	O
EOK	int
||	O
(	O
rc	int
=	O
mu_parse822_quoted_pair	function
(	O
p	pointer
,	O
e	int
,	O
&	O
literal	pointer
)	O
)	O
==	O
EOK	int
)	O
{	O
}	O
if	O
(	O
rc	int
==	O
EPARSE	O
)	O
{	O
rc	int
=	O
EOK	int
;	O
}	O
if	O
(	O
!	O
rc	int
)	O
{	O
rc	int
=	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
']'	O
)	O
;	O
}	O
if	O
(	O
!	O
rc	int
)	O
{	O
rc	int
=	O
str_append_char	function
(	O
&	O
literal	pointer
,	O
']'	O
)	O
;	O
}	O
if	O
(	O
!	O
rc	int
)	O
{	O
rc	int
=	O
str_append	function
(	O
domain_literal	pointer
,	O
literal	pointer
)	O
;	O
}	O
str_free	function
(	O
&	O
literal	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_date_time	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
struct	O
tm	struct
*	O
tm	struct
,	O
struct	O
mu_timezone	struct
*	O
tz	pointer
)	O
{	O
char	O
*	O
tmp	pointer
;	O
char	O
*	O
end	pointer
;	O
size_t	long
len	long
=	O
e	int
-	O
*	O
p	pointer
;	O
int	O
rc	int
;	O
tmp	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
tmp	pointer
,	O
*	O
p	pointer
,	O
len	long
)	O
;	O
tmp	pointer
[	O
len	long
]	O
=	O
0	int
;	O
rc	int
=	O
mu_scan_datetime	function
(	O
tmp	pointer
,	O
MU_DATETIME_SCAN_RFC822	pointer
,	O
tm	struct
,	O
tz	pointer
,	O
&	O
end	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
p	pointer
=	O
end	pointer
;	O
free	function
(	O
tmp	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_field_name	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
fieldname	pointer
)	O
{	O
const	O
char	O
*	O
save	pointer
=	O
*	O
p	pointer
;	O
char	O
*	O
fn	pointer
=	O
NULL	O
;	O
while	O
(	O
*	O
p	pointer
!=	O
e	int
)	O
{	O
char	O
c	char
=	O
*	O
*	O
p	pointer
;	O
if	O
(	O
!	O
mu_parse822_is_char	function
(	O
c	char
)	O
)	O
break	O
;	O
if	O
(	O
mu_parse822_is_ctl	function
(	O
c	char
)	O
)	O
break	O
;	O
if	O
(	O
mu_parse822_is_space	function
(	O
c	char
)	O
)	O
break	O
;	O
if	O
(	O
c	char
==	O
':'	O
)	O
break	O
;	O
str_append_char	function
(	O
&	O
fn	pointer
,	O
c	char
)	O
;	O
*	O
p	pointer
+=	O
1	int
;	O
}	O
if	O
(	O
!	O
fn	pointer
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
return	O
EPARSE	O
;	O
}	O
mu_parse822_skip_comments	function
(	O
p	pointer
,	O
e	int
)	O
;	O
if	O
(	O
!	O
mu_parse822_special	function
(	O
p	pointer
,	O
e	int
,	O
':'	O
)	O
)	O
{	O
*	O
p	pointer
=	O
save	pointer
;	O
if	O
(	O
fn	pointer
)	O
free	function
(	O
fn	pointer
)	O
;	O
return	O
EPARSE	O
;	O
}	O
*	O
fieldname	pointer
=	O
fn	pointer
;	O
return	O
EOK	int
;	O
}	O
int	O
mu_parse822_field_body	function
(	O
const	O
char	O
*	O
*	O
p	pointer
,	O
const	O
char	O
*	O
e	int
,	O
char	O
*	O
*	O
fieldbody	pointer
)	O
{	O
char	O
*	O
fb	pointer
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
const	O
char	O
*	O
eol	pointer
=	O
*	O
p	pointer
;	O
while	O
(	O
eol	pointer
!=	O
e	int
)	O
{	O
if	O
(	O
eol	pointer
[	O
0	int
]	O
==	O
'\r'	O
&&	O
(	O
eol	pointer
+	O
1	int
)	O
!=	O
e	int
&&	O
eol	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
break	O
;	O
++	O
eol	pointer
;	O
}	O
str_append_range	function
(	O
&	O
fb	pointer
,	O
*	O
p	pointer
,	O
eol	pointer
)	O
;	O
*	O
p	pointer
=	O
eol	pointer
;	O
if	O
(	O
eol	pointer
==	O
e	int
)	O
break	O
;	O
*	O
p	pointer
+=	O
2	int
;	O
if	O
(	O
*	O
p	pointer
==	O
e	int
)	O
break	O
;	O
if	O
(	O
*	O
*	O
p	pointer
!=	O
' '	O
&&	O
*	O
*	O
p	pointer
!=	O
'\t'	O
)	O
break	O
;	O
}	O
*	O
fieldbody	pointer
=	O
fb	pointer
;	O
return	O
EOK	int
;	O
}	O
int	O
mu_parse822_quote_string	function
(	O
char	O
*	O
*	O
quoted	pointer
,	O
const	O
char	O
*	O
raw	pointer
)	O
{	O
int	O
rc	int
=	O
EOK	int
;	O
const	O
char	O
*	O
s	pointer
;	O
if	O
(	O
!	O
raw	pointer
||	O
!	O
quoted	pointer
||	O
*	O
quoted	pointer
)	O
{	O
return	O
EINVAL	int
;	O
}	O
s	pointer
=	O
raw	pointer
;	O
rc	int
=	O
str_append_char	function
(	O
quoted	pointer
,	O
'"'	O
)	O
;	O
while	O
(	O
!	O
rc	int
&&	O
*	O
s	pointer
)	O
{	O
if	O
(	O
!	O
mu_parse822_is_q_text	function
(	O
*	O
s	pointer
)	O
)	O
{	O
rc	int
=	O
str_append_char	function
(	O
quoted	pointer
,	O
'\\'	O
)	O
;	O
}	O
if	O
(	O
!	O
rc	int
)	O
{	O
rc	int
=	O
str_append_char	function
(	O
quoted	pointer
,	O
*	O
s	pointer
)	O
;	O
}	O
++	O
s	pointer
;	O
}	O
if	O
(	O
!	O
rc	int
)	O
{	O
rc	int
=	O
str_append_char	function
(	O
quoted	pointer
,	O
'"'	O
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
str_free	function
(	O
quoted	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_parse822_quote_local_part	function
(	O
char	O
*	O
*	O
quoted	pointer
,	O
const	O
char	O
*	O
raw	pointer
)	O
{	O
const	O
char	O
*	O
s	pointer
=	O
0	int
;	O
if	O
(	O
!	O
raw	pointer
||	O
!	O
quoted	pointer
||	O
*	O
quoted	pointer
)	O
{	O
return	O
EINVAL	int
;	O
}	O
s	pointer
=	O
raw	pointer
;	O
while	O
(	O
*	O
s	pointer
)	O
{	O
if	O
(	O
*	O
s	pointer
!=	O
'.'	O
&&	O
!	O
mu_parse822_is_atom_char	function
(	O
*	O
s	pointer
)	O
)	O
{	O
return	O
mu_parse822_quote_string	function
(	O
quoted	pointer
,	O
raw	pointer
)	O
;	O
}	O
++	O
s	pointer
;	O
}	O
return	O
str_append	function
(	O
quoted	pointer
,	O
raw	pointer
)	O
;	O
}	O
