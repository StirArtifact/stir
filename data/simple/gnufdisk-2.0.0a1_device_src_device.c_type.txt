extern	O
struct	O
gnufdisk_disklabel	O
*	O
gnufdisk_device_internals__allocate_disklabel	function
(	O
struct	O
gnufdisk_device	struct
*	O
_dev	pointer
,	O
struct	O
gnufdisk_disklabel_operations	struct
*	O
_operations	pointer
,	O
void	O
*	O
_implementation_data	pointer
)	O
;	O
extern	O
void	O
gnufdisk_device_internals__disklabel_set_device	function
(	O
struct	O
gnufdisk_disklabel	O
*	O
_d	pointer
,	O
struct	O
gnufdisk_device	struct
*	O
_dev	pointer
)	O
;	O
struct	O
gnufdisk_device	struct
{	O
void	O
*	O
handle	pointer
;	O
struct	O
gnufdisk_device_operations	struct
operations	struct
;	O
void	O
*	O
implementation_data	pointer
;	O
int	O
is_open	int
;	O
int	O
nref	int
;	O
}	O
;	O
static	O
void	O
check_device	function
(	O
struct	O
gnufdisk_device	struct
*	O
*	O
_dev	pointer
)	O
{	O
GNUFDISK_RETRY	O
rp0	array
;	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
*	O
_dev	pointer
,	O
sizeof	O
(	O
struct	O
gnufdisk_device	struct
)	O
,	O
0	int
)	O
!=	O
0	int
)	O
{	O
data	union
.	O
edevicepointer	pointer
=	O
_dev	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EDEVICEPOINTER	int
,	O
&	O
data	union
,	O
"invalid struct gnufdisk_device* %p"	pointer
,	O
*	O
_dev	pointer
)	O
;	O
}	O
else	O
if	O
(	O
gnufdisk_check_memory	function
(	O
(	O
*	O
_dev	pointer
)	O
->	O
handle	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
(	O
*	O
_dev	pointer
)	O
->	O
handle	pointer
=	O
NULL	O
;	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EDEVICE	int
,	O
NULL	O
,	O
"device is not associated with a valid module"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
check_is_open	function
(	O
struct	O
gnufdisk_device	struct
*	O
_d	pointer
)	O
{	O
GNUFDISK_RETRY	O
rp0	array
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array
)	O
;	O
check_device	function
(	O
&	O
_d	pointer
)	O
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"device open status: %d"	pointer
,	O
_d	pointer
->	O
is_open	int
)	O
)	O
;	O
if	O
(	O
!	O
_d	pointer
->	O
is_open	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
data	union
.	O
enotopen	pointer
=	O
_d	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_ENOTOPEN	int
,	O
&	O
data	union
,	O
"device is not open"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
free_pointer	function
(	O
void	O
*	O
_p	pointer
)	O
{	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"free pointer %p"	pointer
,	O
_p	pointer
)	O
)	O
;	O
free	function
(	O
_p	pointer
)	O
;	O
}	O
static	O
void	O
close_dlhandle	function
(	O
void	O
*	O
_p	pointer
)	O
{	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"close dlhandle %p"	pointer
,	O
_p	pointer
)	O
)	O
;	O
dlclose	function
(	O
_p	pointer
)	O
;	O
}	O
struct	O
gnufdisk_device	struct
*	O
gnufdisk_device_new	function
(	O
struct	O
gnufdisk_string	O
*	O
_module	pointer
,	O
struct	O
gnufdisk_string	O
*	O
_options	pointer
)	O
{	O
char	O
library	array
[	O
PATH_MAX	int
]	O
;	O
GNUFDISK_RETRY	O
rp0	array
;	O
struct	O
gnufdisk_device	struct
*	O
dev	pointer
;	O
void	O
(	O
*	O
reg	pointer
)	O
(	O
struct	O
gnufdisk_string	O
*	O
_options	pointer
,	O
struct	O
gnufdisk_device_operations	struct
*	O
_operations	pointer
,	O
void	O
*	O
*	O
_private_data	pointer
)	O
;	O
if	O
(	O
(	O
dev	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
gnufdisk_device	struct
)	O
)	O
)	O
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOMEM	int
,	O
NULL	O
,	O
"cannot allocate memory"	pointer
)	O
;	O
if	O
(	O
gnufdisk_exception_register_unwind_handler	function
(	O
&	O
free_pointer	function
,	O
dev	pointer
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_register_unwind_handler failed. Missing GNUFDISK_TRY?"	pointer
)	O
;	O
memset	function
(	O
dev	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
gnufdisk_device	struct
)	O
)	O
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_module	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
data	union
.	O
emodulepointer	pointer
=	O
&	O
_module	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EMODULEPOINTER	int
,	O
&	O
data	union
,	O
"invalid struct gnufdisk_string* %p"	pointer
,	O
_module	pointer
)	O
;	O
}	O
snprintf	function
(	O
library	array
,	O
sizeof	O
(	O
library	array
)	O
,	O
"%s.so"	pointer
,	O
gnufdisk_string_c_string	function
(	O
_module	pointer
)	O
)	O
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"open module `%s'"	pointer
,	O
library	array
)	O
)	O
;	O
if	O
(	O
(	O
dev	pointer
->	O
handle	pointer
=	O
dlopen	function
(	O
library	array
,	O
RTLD_NOW	int
)	O
)	O
==	O
NULL	O
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
data	union
.	O
emodule	pointer
=	O
_module	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EMODULE	int
,	O
&	O
data	union
,	O
"cannot open module: %s"	pointer
,	O
dlerror	function
(	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
(	O
reg	pointer
=	O
dlsym	function
(	O
dev	pointer
->	O
handle	pointer
,	O
"module_register"	pointer
)	O
)	O
==	O
NULL	O
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
dlclose	function
(	O
dev	pointer
->	O
handle	pointer
)	O
;	O
dev	pointer
->	O
handle	pointer
=	O
NULL	O
;	O
data	union
.	O
emodule	pointer
=	O
_module	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EMODULE	int
,	O
&	O
data	union
,	O
"error register module `%s': %s"	pointer
,	O
library	array
,	O
dlerror	function
(	O
)	O
)	O
;	O
}	O
if	O
(	O
gnufdisk_exception_register_unwind_handler	function
(	O
&	O
close_dlhandle	function
,	O
dev	pointer
->	O
handle	pointer
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_register_unwind_handler failed. Missing GNUFDISK_TRY?"	pointer
)	O
;	O
(	O
*	O
reg	pointer
)	O
(	O
_options	pointer
,	O
&	O
dev	pointer
->	O
operations	struct
,	O
&	O
dev	pointer
->	O
implementation_data	pointer
)	O
;	O
dev	pointer
->	O
nref	int
=	O
1	int
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"new struct gnufdisk_device* %p"	pointer
,	O
dev	pointer
)	O
)	O
;	O
if	O
(	O
gnufdisk_exception_unregister_unwind_handler	function
(	O
&	O
close_dlhandle	function
,	O
dev	pointer
->	O
handle	pointer
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_unregister_unwind_handler failed. Missing GNUFDISK_TRY?"	pointer
)	O
;	O
if	O
(	O
gnufdisk_exception_unregister_unwind_handler	function
(	O
&	O
free_pointer	function
,	O
dev	pointer
)	O
!=	O
0	int
)	O
GNUFDISK_WARNING	O
(	O
"gnufdisk_exception_unregister_unwind_handler failed. Missing GNUFDISK_TRY?"	pointer
)	O
;	O
return	O
dev	pointer
;	O
}	O
void	O
gnufdisk_device_delete	function
(	O
struct	O
gnufdisk_device	struct
*	O
_d	pointer
)	O
{	O
check_device	function
(	O
&	O
_d	pointer
)	O
;	O
if	O
(	O
_d	pointer
->	O
nref	int
<	O
2	int
)	O
{	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"delete struct gnufdisk_device* %p"	pointer
,	O
_d	pointer
)	O
)	O
;	O
if	O
(	O
_d	pointer
->	O
implementation_data	pointer
!=	O
NULL	O
&&	O
_d	pointer
->	O
operations	struct
.	O
delete	pointer
!=	O
NULL	O
)	O
{	O
void	O
*	O
data	union
;	O
data	union
=	O
_d	pointer
->	O
implementation_data	pointer
;	O
_d	pointer
->	O
implementation_data	pointer
=	O
NULL	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
delete	pointer
)	O
(	O
data	union
)	O
;	O
}	O
if	O
(	O
_d	pointer
->	O
handle	pointer
)	O
{	O
dlclose	function
(	O
_d	pointer
->	O
handle	pointer
)	O
;	O
_d	pointer
->	O
handle	pointer
=	O
NULL	O
;	O
}	O
free	function
(	O
_d	pointer
)	O
;	O
}	O
else	O
{	O
_d	pointer
->	O
nref	int
--	O
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"struct gnufdisk_device* %p has now %d references"	pointer
,	O
_d	pointer
,	O
_d	pointer
->	O
nref	int
)	O
)	O
;	O
}	O
}	O
void	O
gnufdisk_device_ref	function
(	O
struct	O
gnufdisk_device	struct
*	O
_d	pointer
)	O
{	O
check_device	function
(	O
&	O
_d	pointer
)	O
;	O
_d	pointer
->	O
nref	int
++	O
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"struct gnufdisk_device* %p has now %d references"	pointer
,	O
_d	pointer
,	O
_d	pointer
->	O
nref	int
)	O
)	O
;	O
}	O
void	O
gnufdisk_device_open	function
(	O
struct	O
gnufdisk_device	struct
*	O
_d	pointer
,	O
struct	O
gnufdisk_string	O
*	O
_path	pointer
)	O
{	O
GNUFDISK_RETRY	O
rp0	array
;	O
check_device	function
(	O
&	O
_d	pointer
)	O
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_path	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
data	union
.	O
epathpointer	pointer
=	O
&	O
_path	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EPATHPOINTER	int
,	O
&	O
data	union
,	O
"invalid istruct gnufdisk_string* %p"	pointer
,	O
_path	pointer
)	O
;	O
}	O
else	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
open	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `open'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
open	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
,	O
_path	pointer
)	O
;	O
_d	pointer
->	O
is_open	int
=	O
1	int
;	O
}	O
struct	O
gnufdisk_disklabel	O
*	O
gnufdisk_device_disklabel	function
(	O
struct	O
gnufdisk_device	struct
*	O
_d	pointer
)	O
{	O
struct	O
gnufdisk_disklabel_operations	struct
operations	struct
;	O
void	O
*	O
implementation_data	pointer
;	O
check_device	function
(	O
&	O
_d	pointer
)	O
;	O
check_is_open	function
(	O
_d	pointer
)	O
;	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
disklabel	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `disklabel'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
disklabel	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
,	O
&	O
operations	struct
,	O
&	O
implementation_data	pointer
)	O
;	O
return	O
gnufdisk_device_internals__allocate_disklabel	function
(	O
_d	pointer
,	O
&	O
operations	struct
,	O
implementation_data	pointer
)	O
;	O
}	O
struct	O
gnufdisk_disklabel	O
*	O
gnufdisk_device_create_disklabel	function
(	O
struct	O
gnufdisk_device	struct
*	O
_d	pointer
,	O
struct	O
gnufdisk_string	O
*	O
_type	pointer
)	O
{	O
struct	O
gnufdisk_disklabel_operations	struct
operations	struct
;	O
void	O
*	O
implementation_data	pointer
;	O
GNUFDISK_RETRY	O
rp0	array
;	O
check_device	function
(	O
&	O
_d	pointer
)	O
;	O
check_is_open	function
(	O
_d	pointer
)	O
;	O
GNUFDISK_RETRY_SET	O
(	O
rp0	array
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_type	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
{	O
union	O
gnufdisk_device_exception_data	union
data	union
;	O
data	union
.	O
edisklabelsystempointer	pointer
=	O
&	O
_type	pointer
;	O
GNUFDISK_THROW	O
(	O
GNUFDISK_EXCEPTION_ALL	int
,	O
&	O
rp0	array
,	O
GNUFDISK_DEVICE_EDISKLABELSYSTEMPOINTER	int
,	O
&	O
data	union
,	O
"invalid struct gnufdisk_string* %p"	pointer
,	O
_type	pointer
)	O
;	O
}	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
create_disklabel	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `create disklabel'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
create_disklabel	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
,	O
_type	pointer
,	O
&	O
operations	struct
,	O
&	O
implementation_data	pointer
)	O
;	O
return	O
gnufdisk_device_internals__allocate_disklabel	function
(	O
_d	pointer
,	O
&	O
operations	struct
,	O
implementation_data	pointer
)	O
;	O
}	O
void	O
gnufdisk_device_set_parameter	function
(	O
struct	O
gnufdisk_device	struct
*	O
_d	pointer
,	O
struct	O
gnufdisk_string	O
*	O
_parameter	pointer
,	O
const	O
void	O
*	O
_data	pointer
,	O
size_t	long
_size	long
)	O
{	O
check_device	function
(	O
&	O
_d	pointer
)	O
;	O
check_is_open	function
(	O
_d	pointer
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_parameter	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERPOINTER	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_string* %p"	pointer
,	O
_parameter	pointer
)	O
;	O
else	O
if	O
(	O
gnufdisk_check_memory	function
(	O
(	O
void	O
*	O
)	O
_data	pointer
,	O
_size	long
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERDATA	int
,	O
NULL	O
,	O
"invalid device parameter data: %p"	pointer
,	O
_data	pointer
)	O
;	O
else	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
set_parameter	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `set parameter'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
set_parameter	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
,	O
_parameter	pointer
,	O
_data	pointer
,	O
_size	long
)	O
;	O
}	O
void	O
gnufdisk_device_get_parameter	function
(	O
struct	O
gnufdisk_device	struct
*	O
_d	pointer
,	O
struct	O
gnufdisk_string	O
*	O
_parameter	pointer
,	O
void	O
*	O
_data	pointer
,	O
size_t	long
_size	long
)	O
{	O
check_device	function
(	O
&	O
_d	pointer
)	O
;	O
check_is_open	function
(	O
_d	pointer
)	O
;	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_parameter	pointer
,	O
1	int
,	O
1	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERPOINTER	int
,	O
NULL	O
,	O
"invalid struct gnufdisk_string* %p"	pointer
,	O
_parameter	pointer
)	O
;	O
else	O
if	O
(	O
gnufdisk_check_memory	function
(	O
_data	pointer
,	O
_size	long
,	O
0	int
)	O
!=	O
0	int
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_EPARAMETERDATA	int
,	O
NULL	O
,	O
"invalid device parameter data: %p"	pointer
,	O
_data	pointer
)	O
;	O
else	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
get_parameter	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `get parameter'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
get_parameter	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
,	O
_parameter	pointer
,	O
_data	pointer
,	O
_size	long
)	O
;	O
}	O
void	O
gnufdisk_device_commit	function
(	O
struct	O
gnufdisk_device	struct
*	O
_d	pointer
)	O
{	O
check_device	function
(	O
&	O
_d	pointer
)	O
;	O
check_is_open	function
(	O
_d	pointer
)	O
;	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
commit	pointer
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `commit'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
commit	pointer
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
)	O
;	O
}	O
void	O
gnufdisk_device_close	function
(	O
struct	O
gnufdisk_device	struct
*	O
_d	pointer
)	O
{	O
check_device	function
(	O
&	O
_d	pointer
)	O
;	O
check_is_open	function
(	O
_d	pointer
)	O
;	O
GNUFDISK_LOG	O
(	O
(	O
DEVICE	O
,	O
"close device %p"	pointer
,	O
_d	pointer
)	O
)	O
;	O
if	O
(	O
_d	pointer
->	O
operations	struct
.	O
close	function
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
GNUFDISK_DEVICE_ENOTSUP	int
,	O
NULL	O
,	O
"operation not supported `close'"	pointer
)	O
;	O
(	O
*	O
_d	pointer
->	O
operations	struct
.	O
close	function
)	O
(	O
_d	pointer
->	O
implementation_data	pointer
)	O
;	O
_d	pointer
->	O
is_open	int
=	O
0	int
;	O
}	O
