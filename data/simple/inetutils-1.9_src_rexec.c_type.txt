const	O
char	O
doc	pointer
[	O
]	O
=	O
"remote execution client"	pointer
;	O
static	O
char	O
args_doc	pointer
[	O
]	O
=	O
"COMMAND"	pointer
;	O
const	O
char	O
*	O
program_authors	array
[	O
]	O
=	O
{	O
"Giuseppe Scrivano"	pointer
,	O
NULL	O
}	O
;	O
static	O
struct	O
argp_option	struct
options	pointer
[	O
]	O
=	O
{	O
{	O
"user"	pointer
,	O
'u'	O
,	O
"user"	pointer
,	O
0	int
,	O
"Specify the user"	pointer
}	O
,	O
{	O
"host"	pointer
,	O
'h'	O
,	O
"host"	pointer
,	O
0	int
,	O
"Specify the host"	pointer
}	O
,	O
{	O
"password"	pointer
,	O
'p'	O
,	O
"password"	pointer
,	O
0	int
,	O
"Specify the password"	pointer
}	O
,	O
{	O
"port"	pointer
,	O
'P'	O
,	O
"port"	pointer
,	O
0	int
,	O
"Specify the port to connect to"	pointer
}	O
,	O
{	O
"noerr"	pointer
,	O
'n'	O
,	O
NULL	O
,	O
0	int
,	O
"Disable the stderr stream"	pointer
}	O
,	O
{	O
"error"	pointer
,	O
'e'	O
,	O
"error"	pointer
,	O
0	int
,	O
"Specify a TCP port to use for stderr"	pointer
}	O
,	O
{	O
0	int
}	O
}	O
;	O
struct	O
arguments	struct
{	O
const	O
char	O
*	O
host	pointer
;	O
const	O
char	O
*	O
user	pointer
;	O
const	O
char	O
*	O
password	pointer
;	O
const	O
char	O
*	O
command	pointer
;	O
int	O
port	int
;	O
int	O
use_err	int
;	O
int	O
err_port	int
;	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
struct	O
arguments	struct
*	O
arguments	struct
=	O
state	pointer
->	O
input	pointer
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'u'	O
:	O
arguments	struct
->	O
user	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'p'	O
:	O
arguments	struct
->	O
password	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'P'	O
:	O
arguments	struct
->	O
port	int
=	O
atoi	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
arguments	struct
->	O
err_port	int
=	O
atoi	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
arguments	struct
->	O
host	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'n'	O
:	O
arguments	struct
->	O
use_err	int
=	O
0	int
;	O
break	O
;	O
case	O
ARGP_KEY_ARG	int
:	O
arguments	struct
->	O
command	pointer
=	O
arg	pointer
;	O
state	pointer
->	O
next	int
=	O
state	pointer
->	O
argc	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
options	pointer
,	O
parse_opt	function
,	O
args_doc	pointer
,	O
doc	pointer
}	O
;	O
static	O
void	O
do_rexec	function
(	O
struct	O
arguments	struct
*	O
arguments	struct
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
arguments	struct
arguments	struct
;	O
int	O
failed	int
=	O
0	int
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"rexec"	pointer
,	O
program_authors	array
)	O
;	O
arguments	struct
.	O
user	pointer
=	O
NULL	O
;	O
arguments	struct
.	O
password	pointer
=	O
NULL	O
;	O
arguments	struct
.	O
host	pointer
=	O
NULL	O
;	O
arguments	struct
.	O
command	pointer
=	O
NULL	O
;	O
arguments	struct
.	O
err_port	int
=	O
0	int
;	O
arguments	struct
.	O
use_err	int
=	O
1	int
;	O
arguments	struct
.	O
port	int
=	O
512	int
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
ARGP_IN_ORDER	int
,	O
0	int
,	O
&	O
arguments	struct
)	O
;	O
if	O
(	O
arguments	struct
.	O
user	pointer
==	O
NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
"user not specified"	pointer
)	O
;	O
failed	int
++	O
;	O
}	O
if	O
(	O
arguments	struct
.	O
password	pointer
==	O
NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
"password not specified"	pointer
)	O
;	O
failed	int
++	O
;	O
}	O
if	O
(	O
arguments	struct
.	O
host	pointer
==	O
NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
"host not specified"	pointer
)	O
;	O
failed	int
++	O
;	O
}	O
if	O
(	O
arguments	struct
.	O
command	pointer
==	O
NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
"command not specified"	pointer
)	O
;	O
failed	int
++	O
;	O
}	O
if	O
(	O
failed	int
>	O
0	int
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
do_rexec	function
(	O
&	O
arguments	struct
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
safe_write	function
(	O
int	O
socket	function
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
)	O
{	O
if	O
(	O
write	pointer
(	O
socket	function
,	O
str	pointer
,	O
len	long
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"error sending data"	pointer
)	O
;	O
}	O
void	O
do_rexec	function
(	O
struct	O
arguments	struct
*	O
arguments	struct
)	O
{	O
int	O
err	long
;	O
char	O
buffer	array
[	O
1024	int
]	O
;	O
int	O
sock	int
;	O
char	O
port_str	array
[	O
6	int
]	O
;	O
struct	O
sockaddr_in	struct
addr	struct
;	O
struct	O
hostent	struct
*	O
host	pointer
;	O
int	O
stdin_fd	int
=	O
STDIN_FILENO	int
;	O
int	O
err_sock	int
=	O
-	O
1	int
;	O
sock	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
sock	int
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot open socket"	pointer
)	O
;	O
host	pointer
=	O
gethostbyname	function
(	O
arguments	struct
->	O
host	pointer
)	O
;	O
if	O
(	O
host	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot find host %s"	pointer
,	O
arguments	struct
->	O
host	pointer
)	O
;	O
memset	function
(	O
&	O
addr	struct
,	O
0	int
,	O
sizeof	O
(	O
addr	struct
)	O
)	O
;	O
addr	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
memmove	function
(	O
(	O
caddr_t	pointer
)	O
&	O
addr	struct
.	O
sin_addr	struct
,	O
host	pointer
->	O
h_addr_list	pointer
[	O
0	int
]	O
,	O
host	pointer
->	O
h_length	int
)	O
;	O
addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
(	O
short	O
)	O
arguments	struct
->	O
port	int
)	O
;	O
if	O
(	O
connect	function
(	O
sock	int
,	O
&	O
addr	struct
,	O
sizeof	O
(	O
addr	struct
)	O
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot connect to the specified host"	pointer
)	O
;	O
if	O
(	O
!	O
arguments	struct
->	O
use_err	int
)	O
{	O
port_str	array
[	O
0	int
]	O
=	O
'0'	O
;	O
port_str	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
safe_write	function
(	O
sock	int
,	O
port_str	array
,	O
2	int
)	O
;	O
arguments	struct
->	O
err_port	int
=	O
0	int
;	O
}	O
else	O
{	O
struct	O
sockaddr_in	struct
serv_addr	struct
;	O
socklen_t	int
len	long
;	O
int	O
serv_sock	int
=	O
socket	function
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
serv_sock	int
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot open socket"	pointer
)	O
;	O
memset	function
(	O
&	O
serv_addr	struct
,	O
0	int
,	O
sizeof	O
(	O
serv_addr	struct
)	O
)	O
;	O
serv_addr	struct
.	O
sin_port	short
=	O
arguments	struct
->	O
err_port	int
;	O
if	O
(	O
bind	function
(	O
serv_sock	int
,	O
&	O
serv_addr	struct
,	O
sizeof	O
(	O
serv_addr	struct
)	O
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot bind socket"	pointer
)	O
;	O
len	long
=	O
sizeof	O
(	O
serv_addr	struct
)	O
;	O
if	O
(	O
getsockname	function
(	O
serv_sock	int
,	O
&	O
serv_addr	struct
,	O
&	O
len	long
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"error reading socket port"	pointer
)	O
;	O
if	O
(	O
listen	function
(	O
serv_sock	int
,	O
1	int
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"error listening on socket"	pointer
)	O
;	O
arguments	struct
->	O
err_port	int
=	O
ntohs	function
(	O
serv_addr	struct
.	O
sin_port	short
)	O
;	O
sprintf	function
(	O
port_str	array
,	O
"%i"	pointer
,	O
arguments	struct
->	O
err_port	int
)	O
;	O
safe_write	function
(	O
sock	int
,	O
port_str	array
,	O
strlen	function
(	O
port_str	array
)	O
+	O
1	int
)	O
;	O
err_sock	int
=	O
accept	function
(	O
serv_sock	int
,	O
&	O
serv_addr	struct
,	O
&	O
len	long
)	O
;	O
if	O
(	O
err_sock	int
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"error accepting connection"	pointer
)	O
;	O
shutdown	function
(	O
err_sock	int
,	O
SHUT_WR	int
)	O
;	O
close	pointer
(	O
serv_sock	int
)	O
;	O
}	O
safe_write	function
(	O
sock	int
,	O
arguments	struct
->	O
user	pointer
,	O
strlen	function
(	O
arguments	struct
->	O
user	pointer
)	O
+	O
1	int
)	O
;	O
safe_write	function
(	O
sock	int
,	O
arguments	struct
->	O
password	pointer
,	O
strlen	function
(	O
arguments	struct
->	O
password	pointer
)	O
+	O
1	int
)	O
;	O
safe_write	function
(	O
sock	int
,	O
arguments	struct
->	O
command	pointer
,	O
strlen	function
(	O
arguments	struct
->	O
command	pointer
)	O
+	O
1	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
ret	int
;	O
fd_set	struct
rsocks	struct
;	O
if	O
(	O
sock	int
<	O
0	int
&&	O
err_sock	int
<	O
0	int
)	O
break	O
;	O
FD_ZERO	O
(	O
&	O
rsocks	struct
)	O
;	O
if	O
(	O
0	int
<=	O
sock	int
)	O
FD_SET	O
(	O
sock	int
,	O
&	O
rsocks	struct
)	O
;	O
if	O
(	O
0	int
<=	O
stdin_fd	int
)	O
FD_SET	O
(	O
stdin_fd	int
,	O
&	O
rsocks	struct
)	O
;	O
if	O
(	O
0	int
<=	O
err_sock	int
)	O
FD_SET	O
(	O
err_sock	int
,	O
&	O
rsocks	struct
)	O
;	O
ret	int
=	O
select	function
(	O
MAX3	O
(	O
sock	int
,	O
stdin_fd	int
,	O
err_sock	int
)	O
+	O
1	int
,	O
&	O
rsocks	struct
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
==	O
-	O
1	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"error select"	pointer
)	O
;	O
if	O
(	O
0	int
<=	O
stdin_fd	int
&&	O
FD_ISSET	O
(	O
stdin_fd	int
,	O
&	O
rsocks	struct
)	O
)	O
{	O
err	long
=	O
read	pointer
(	O
stdin_fd	int
,	O
buffer	array
,	O
1024	int
)	O
;	O
if	O
(	O
err	long
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"error reading stdin"	pointer
)	O
;	O
if	O
(	O
!	O
err	long
)	O
{	O
shutdown	function
(	O
sock	int
,	O
SHUT_WR	int
)	O
;	O
close	pointer
(	O
stdin_fd	int
)	O
;	O
stdin_fd	int
=	O
-	O
1	int
;	O
continue	O
;	O
}	O
if	O
(	O
write	pointer
(	O
STDOUT_FILENO	int
,	O
buffer	array
,	O
err	long
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"error writing"	pointer
)	O
;	O
}	O
if	O
(	O
0	int
<=	O
sock	int
&&	O
FD_ISSET	O
(	O
sock	int
,	O
&	O
rsocks	struct
)	O
)	O
{	O
err	long
=	O
read	pointer
(	O
sock	int
,	O
buffer	array
,	O
1024	int
)	O
;	O
if	O
(	O
err	long
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"error reading out stream"	pointer
)	O
;	O
if	O
(	O
!	O
err	long
)	O
{	O
close	pointer
(	O
sock	int
)	O
;	O
sock	int
=	O
-	O
1	int
;	O
continue	O
;	O
}	O
if	O
(	O
write	pointer
(	O
STDOUT_FILENO	int
,	O
buffer	array
,	O
err	long
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"error writing"	pointer
)	O
;	O
}	O
if	O
(	O
0	int
<=	O
err_sock	int
&&	O
FD_ISSET	O
(	O
err_sock	int
,	O
&	O
rsocks	struct
)	O
)	O
{	O
err	long
=	O
read	pointer
(	O
err_sock	int
,	O
buffer	array
,	O
1024	int
)	O
;	O
if	O
(	O
err	long
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"error reading err stream"	pointer
)	O
;	O
if	O
(	O
!	O
err	long
)	O
{	O
close	pointer
(	O
err_sock	int
)	O
;	O
err_sock	int
=	O
-	O
1	int
;	O
continue	O
;	O
}	O
if	O
(	O
write	pointer
(	O
STDERR_FILENO	int
,	O
buffer	array
,	O
err	long
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"error writing to stderr"	pointer
)	O
;	O
}	O
}	O
}	O
