local	O
void	O
fixedtables	function
OF	O
(	O
(	O
struct	O
inflate_state	struct
FAR	O
*	O
state	pointer
)	O
)	O
;	O
int	O
ZEXPORT	O
inflateBackInit_	function
(	O
strm	pointer
,	O
windowBits	int
,	O
window	pointer
,	O
version	pointer
,	O
stream_size	int
)	O
z_streamp	pointer
strm	pointer
;	O
int	O
windowBits	int
;	O
unsigned	O
char	O
FAR	O
*	O
window	pointer
;	O
const	O
char	O
*	O
version	pointer
;	O
int	O
stream_size	int
;	O
{	O
struct	O
inflate_state	struct
FAR	O
*	O
state	pointer
;	O
if	O
(	O
version	pointer
==	O
Z_NULL	int
||	O
version	pointer
[	O
0	int
]	O
!=	O
ZLIB_VERSION	pointer
[	O
0	int
]	O
||	O
stream_size	int
!=	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
z_stream	struct
)	O
)	O
)	O
return	O
Z_VERSION_ERROR	O
;	O
if	O
(	O
strm	pointer
==	O
Z_NULL	int
||	O
window	pointer
==	O
Z_NULL	int
||	O
windowBits	int
<	O
8	int
||	O
windowBits	int
>	O
15	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
strm	pointer
->	O
msg	pointer
=	O
Z_NULL	int
;	O
if	O
(	O
strm	pointer
->	O
zalloc	pointer
==	O
(	O
alloc_func	pointer
)	O
0	int
)	O
{	O
strm	pointer
->	O
zalloc	pointer
=	O
zcalloc	function
;	O
strm	pointer
->	O
opaque	pointer
=	O
(	O
voidpf	pointer
)	O
0	int
;	O
}	O
if	O
(	O
strm	pointer
->	O
zfree	pointer
==	O
(	O
free_func	pointer
)	O
0	int
)	O
strm	pointer
->	O
zfree	pointer
=	O
zcfree	function
;	O
state	pointer
=	O
(	O
struct	O
inflate_state	struct
FAR	O
*	O
)	O
ZALLOC	O
(	O
strm	pointer
,	O
1	int
,	O
sizeof	O
(	O
struct	O
inflate_state	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
Z_NULL	int
)	O
return	O
Z_MEM_ERROR	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate: allocated\n"	pointer
)	O
)	O
;	O
strm	pointer
->	O
state	pointer
=	O
(	O
struct	O
internal_state	O
FAR	O
*	O
)	O
state	pointer
;	O
state	pointer
->	O
dmax	int
=	O
32768U	int
;	O
state	pointer
->	O
wbits	int
=	O
(	O
uInt	int
)	O
windowBits	int
;	O
state	pointer
->	O
wsize	int
=	O
1U	int
<<	O
windowBits	int
;	O
state	pointer
->	O
window	pointer
=	O
window	pointer
;	O
state	pointer
->	O
wnext	int
=	O
0	int
;	O
state	pointer
->	O
whave	int
=	O
0	int
;	O
return	O
Z_OK	int
;	O
}	O
local	O
void	O
fixedtables	function
(	O
state	pointer
)	O
struct	O
inflate_state	struct
FAR	O
*	O
state	pointer
;	O
{	O
state	pointer
->	O
lencode	pointer
=	O
lenfix	array
;	O
state	pointer
->	O
lenbits	int
=	O
9	int
;	O
state	pointer
->	O
distcode	pointer
=	O
distfix	array
;	O
state	pointer
->	O
distbits	int
=	O
5	int
;	O
}	O
int	O
ZEXPORT	O
inflateBack	function
(	O
strm	pointer
,	O
in	pointer
,	O
in_desc	pointer
,	O
out	pointer
,	O
out_desc	pointer
)	O
z_streamp	pointer
strm	pointer
;	O
in_func	pointer
in	pointer
;	O
void	O
FAR	O
*	O
in_desc	pointer
;	O
out_func	pointer
out	pointer
;	O
void	O
FAR	O
*	O
out_desc	pointer
;	O
{	O
struct	O
inflate_state	struct
FAR	O
*	O
state	pointer
;	O
z_const	O
unsigned	O
char	O
FAR	O
*	O
next	pointer
;	O
unsigned	O
char	O
FAR	O
*	O
put	pointer
;	O
unsigned	O
have	int
,	O
left	int
;	O
unsigned	O
long	O
hold	long
;	O
unsigned	O
bits	pointer
;	O
unsigned	O
copy	int
;	O
unsigned	O
char	O
FAR	O
*	O
from	pointer
;	O
code	struct
here	struct
;	O
code	struct
last	int
;	O
unsigned	O
len	int
;	O
int	O
ret	int
;	O
static	O
const	O
unsigned	O
short	O
order	array
[	O
19	int
]	O
=	O
{	O
16	int
,	O
17	int
,	O
18	int
,	O
0	int
,	O
8	int
,	O
7	int
,	O
9	int
,	O
6	int
,	O
10	int
,	O
5	int
,	O
11	int
,	O
4	int
,	O
12	int
,	O
3	int
,	O
13	int
,	O
2	int
,	O
14	int
,	O
1	int
,	O
15	int
}	O
;	O
if	O
(	O
strm	pointer
==	O
Z_NULL	int
||	O
strm	pointer
->	O
state	pointer
==	O
Z_NULL	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
state	pointer
=	O
(	O
struct	O
inflate_state	struct
FAR	O
*	O
)	O
strm	pointer
->	O
state	pointer
;	O
strm	pointer
->	O
msg	pointer
=	O
Z_NULL	int
;	O
state	pointer
->	O
mode	pointer
=	O
TYPE	int
;	O
state	pointer
->	O
last	int
=	O
0	int
;	O
state	pointer
->	O
whave	int
=	O
0	int
;	O
next	pointer
=	O
strm	pointer
->	O
next_in	pointer
;	O
have	int
=	O
next	pointer
!=	O
Z_NULL	int
?	O
strm	pointer
->	O
avail_in	int
:	O
0	int
;	O
hold	long
=	O
0	int
;	O
bits	pointer
=	O
0	int
;	O
put	pointer
=	O
state	pointer
->	O
window	pointer
;	O
left	int
=	O
state	pointer
->	O
wsize	int
;	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
state	pointer
->	O
mode	pointer
)	O
{	O
case	O
TYPE	int
:	O
if	O
(	O
state	pointer
->	O
last	int
)	O
{	O
BYTEBITS	O
(	O
)	O
;	O
state	pointer
->	O
mode	pointer
=	O
DONE	int
;	O
break	O
;	O
}	O
NEEDBITS	O
(	O
3	int
)	O
;	O
state	pointer
->	O
last	int
=	O
BITS	O
(	O
1	int
)	O
;	O
DROPBITS	O
(	O
1	int
)	O
;	O
switch	O
(	O
BITS	O
(	O
2	int
)	O
)	O
{	O
case	O
0	int
:	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:     stored block%s\n"	pointer
,	O
state	pointer
->	O
last	int
?	O
" (last)"	pointer
:	O
""	pointer
)	O
)	O
;	O
state	pointer
->	O
mode	pointer
=	O
STORED	int
;	O
break	O
;	O
case	O
1	int
:	O
fixedtables	function
(	O
state	pointer
)	O
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:     fixed codes block%s\n"	pointer
,	O
state	pointer
->	O
last	int
?	O
" (last)"	pointer
:	O
""	pointer
)	O
)	O
;	O
state	pointer
->	O
mode	pointer
=	O
LEN	int
;	O
break	O
;	O
case	O
2	int
:	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:     dynamic codes block%s\n"	pointer
,	O
state	pointer
->	O
last	int
?	O
" (last)"	pointer
:	O
""	pointer
)	O
)	O
;	O
state	pointer
->	O
mode	pointer
=	O
TABLE	int
;	O
break	O
;	O
case	O
3	int
:	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid block type"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
}	O
DROPBITS	O
(	O
2	int
)	O
;	O
break	O
;	O
case	O
STORED	int
:	O
BYTEBITS	O
(	O
)	O
;	O
NEEDBITS	O
(	O
32	int
)	O
;	O
if	O
(	O
(	O
hold	long
&	O
0xffff	int
)	O
!=	O
(	O
(	O
hold	long
>>	O
16	int
)	O
^	O
0xffff	int
)	O
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid stored block lengths"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
state	pointer
->	O
length	int
=	O
(	O
unsigned	O
)	O
hold	long
&	O
0xffff	int
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       stored length %u\n"	pointer
,	O
state	pointer
->	O
length	int
)	O
)	O
;	O
INITBITS	O
(	O
)	O
;	O
while	O
(	O
state	pointer
->	O
length	int
!=	O
0	int
)	O
{	O
copy	int
=	O
state	pointer
->	O
length	int
;	O
PULL	O
(	O
)	O
;	O
ROOM	O
(	O
)	O
;	O
if	O
(	O
copy	int
>	O
have	int
)	O
copy	int
=	O
have	int
;	O
if	O
(	O
copy	int
>	O
left	int
)	O
copy	int
=	O
left	int
;	O
zmemcpy	O
(	O
put	pointer
,	O
next	pointer
,	O
copy	int
)	O
;	O
have	int
-=	O
copy	int
;	O
next	pointer
+=	O
copy	int
;	O
left	int
-=	O
copy	int
;	O
put	pointer
+=	O
copy	int
;	O
state	pointer
->	O
length	int
-=	O
copy	int
;	O
}	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       stored end\n"	pointer
)	O
)	O
;	O
state	pointer
->	O
mode	pointer
=	O
TYPE	int
;	O
break	O
;	O
case	O
TABLE	int
:	O
NEEDBITS	O
(	O
14	int
)	O
;	O
state	pointer
->	O
nlen	int
=	O
BITS	O
(	O
5	int
)	O
+	O
257	int
;	O
DROPBITS	O
(	O
5	int
)	O
;	O
state	pointer
->	O
ndist	int
=	O
BITS	O
(	O
5	int
)	O
+	O
1	int
;	O
DROPBITS	O
(	O
5	int
)	O
;	O
state	pointer
->	O
ncode	int
=	O
BITS	O
(	O
4	int
)	O
+	O
4	int
;	O
DROPBITS	O
(	O
4	int
)	O
;	O
if	O
(	O
state	pointer
->	O
nlen	int
>	O
286	int
||	O
state	pointer
->	O
ndist	int
>	O
30	int
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"too many length or distance symbols"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       table sizes ok\n"	pointer
)	O
)	O
;	O
state	pointer
->	O
have	int
=	O
0	int
;	O
while	O
(	O
state	pointer
->	O
have	int
<	O
state	pointer
->	O
ncode	int
)	O
{	O
NEEDBITS	O
(	O
3	int
)	O
;	O
state	pointer
->	O
lens	pointer
[	O
order	array
[	O
state	pointer
->	O
have	int
++	O
]	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
BITS	O
(	O
3	int
)	O
;	O
DROPBITS	O
(	O
3	int
)	O
;	O
}	O
while	O
(	O
state	pointer
->	O
have	int
<	O
19	int
)	O
state	pointer
->	O
lens	pointer
[	O
order	array
[	O
state	pointer
->	O
have	int
++	O
]	O
]	O
=	O
0	int
;	O
state	pointer
->	O
next	pointer
=	O
state	pointer
->	O
codes	int
;	O
state	pointer
->	O
lencode	pointer
=	O
(	O
code	struct
const	O
FAR	O
*	O
)	O
(	O
state	pointer
->	O
next	pointer
)	O
;	O
state	pointer
->	O
lenbits	int
=	O
7	int
;	O
ret	int
=	O
inflate_table	function
(	O
CODES	int
,	O
state	pointer
->	O
lens	pointer
,	O
19	int
,	O
&	O
(	O
state	pointer
->	O
next	pointer
)	O
,	O
&	O
(	O
state	pointer
->	O
lenbits	int
)	O
,	O
state	pointer
->	O
work	pointer
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid code lengths set"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       code lengths ok\n"	pointer
)	O
)	O
;	O
state	pointer
->	O
have	int
=	O
0	int
;	O
while	O
(	O
state	pointer
->	O
have	int
<	O
state	pointer
->	O
nlen	int
+	O
state	pointer
->	O
ndist	int
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
here	struct
=	O
state	pointer
->	O
lencode	pointer
[	O
BITS	O
(	O
state	pointer
->	O
lenbits	int
)	O
]	O
;	O
if	O
(	O
(	O
unsigned	O
)	O
(	O
here	struct
.	O
bits	pointer
)	O
<=	O
bits	pointer
)	O
break	O
;	O
PULLBYTE	O
(	O
)	O
;	O
}	O
if	O
(	O
here	struct
.	O
val	short
<	O
16	int
)	O
{	O
DROPBITS	O
(	O
here	struct
.	O
bits	pointer
)	O
;	O
state	pointer
->	O
lens	pointer
[	O
state	pointer
->	O
have	int
++	O
]	O
=	O
here	struct
.	O
val	short
;	O
}	O
else	O
{	O
if	O
(	O
here	struct
.	O
val	short
==	O
16	int
)	O
{	O
NEEDBITS	O
(	O
here	struct
.	O
bits	pointer
+	O
2	int
)	O
;	O
DROPBITS	O
(	O
here	struct
.	O
bits	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
have	int
==	O
0	int
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid bit length repeat"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
len	int
=	O
(	O
unsigned	O
)	O
(	O
state	pointer
->	O
lens	pointer
[	O
state	pointer
->	O
have	int
-	O
1	int
]	O
)	O
;	O
copy	int
=	O
3	int
+	O
BITS	O
(	O
2	int
)	O
;	O
DROPBITS	O
(	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
here	struct
.	O
val	short
==	O
17	int
)	O
{	O
NEEDBITS	O
(	O
here	struct
.	O
bits	pointer
+	O
3	int
)	O
;	O
DROPBITS	O
(	O
here	struct
.	O
bits	pointer
)	O
;	O
len	int
=	O
0	int
;	O
copy	int
=	O
3	int
+	O
BITS	O
(	O
3	int
)	O
;	O
DROPBITS	O
(	O
3	int
)	O
;	O
}	O
else	O
{	O
NEEDBITS	O
(	O
here	struct
.	O
bits	pointer
+	O
7	int
)	O
;	O
DROPBITS	O
(	O
here	struct
.	O
bits	pointer
)	O
;	O
len	int
=	O
0	int
;	O
copy	int
=	O
11	int
+	O
BITS	O
(	O
7	int
)	O
;	O
DROPBITS	O
(	O
7	int
)	O
;	O
}	O
if	O
(	O
state	pointer
->	O
have	int
+	O
copy	int
>	O
state	pointer
->	O
nlen	int
+	O
state	pointer
->	O
ndist	int
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid bit length repeat"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
while	O
(	O
copy	int
--	O
)	O
state	pointer
->	O
lens	pointer
[	O
state	pointer
->	O
have	int
++	O
]	O
=	O
(	O
unsigned	O
short	O
)	O
len	int
;	O
}	O
}	O
if	O
(	O
state	pointer
->	O
mode	pointer
==	O
BAD	int
)	O
break	O
;	O
if	O
(	O
state	pointer
->	O
lens	pointer
[	O
256	int
]	O
==	O
0	int
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid code -- missing end-of-block"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
state	pointer
->	O
next	pointer
=	O
state	pointer
->	O
codes	int
;	O
state	pointer
->	O
lencode	pointer
=	O
(	O
code	struct
const	O
FAR	O
*	O
)	O
(	O
state	pointer
->	O
next	pointer
)	O
;	O
state	pointer
->	O
lenbits	int
=	O
9	int
;	O
ret	int
=	O
inflate_table	function
(	O
LENS	int
,	O
state	pointer
->	O
lens	pointer
,	O
state	pointer
->	O
nlen	int
,	O
&	O
(	O
state	pointer
->	O
next	pointer
)	O
,	O
&	O
(	O
state	pointer
->	O
lenbits	int
)	O
,	O
state	pointer
->	O
work	pointer
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid literal/lengths set"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
state	pointer
->	O
distcode	pointer
=	O
(	O
code	struct
const	O
FAR	O
*	O
)	O
(	O
state	pointer
->	O
next	pointer
)	O
;	O
state	pointer
->	O
distbits	int
=	O
6	int
;	O
ret	int
=	O
inflate_table	function
(	O
DISTS	int
,	O
state	pointer
->	O
lens	pointer
+	O
state	pointer
->	O
nlen	int
,	O
state	pointer
->	O
ndist	int
,	O
&	O
(	O
state	pointer
->	O
next	pointer
)	O
,	O
&	O
(	O
state	pointer
->	O
distbits	int
)	O
,	O
state	pointer
->	O
work	pointer
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid distances set"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate:       codes ok\n"	pointer
)	O
)	O
;	O
state	pointer
->	O
mode	pointer
=	O
LEN	int
;	O
case	O
LEN	int
:	O
if	O
(	O
have	int
>=	O
6	int
&&	O
left	int
>=	O
258	int
)	O
{	O
RESTORE	O
(	O
)	O
;	O
if	O
(	O
state	pointer
->	O
whave	int
<	O
state	pointer
->	O
wsize	int
)	O
state	pointer
->	O
whave	int
=	O
state	pointer
->	O
wsize	int
-	O
left	int
;	O
inflate_fast	function
(	O
strm	pointer
,	O
state	pointer
->	O
wsize	int
)	O
;	O
LOAD	O
(	O
)	O
;	O
break	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
here	struct
=	O
state	pointer
->	O
lencode	pointer
[	O
BITS	O
(	O
state	pointer
->	O
lenbits	int
)	O
]	O
;	O
if	O
(	O
(	O
unsigned	O
)	O
(	O
here	struct
.	O
bits	pointer
)	O
<=	O
bits	pointer
)	O
break	O
;	O
PULLBYTE	O
(	O
)	O
;	O
}	O
if	O
(	O
here	struct
.	O
op	char
&&	O
(	O
here	struct
.	O
op	char
&	O
0xf0	int
)	O
==	O
0	int
)	O
{	O
last	int
=	O
here	struct
;	O
for	O
(	O
;	O
;	O
)	O
{	O
here	struct
=	O
state	pointer
->	O
lencode	pointer
[	O
last	int
.	O
val	short
+	O
(	O
BITS	O
(	O
last	int
.	O
bits	pointer
+	O
last	int
.	O
op	char
)	O
>>	O
last	int
.	O
bits	pointer
)	O
]	O
;	O
if	O
(	O
(	O
unsigned	O
)	O
(	O
last	int
.	O
bits	pointer
+	O
here	struct
.	O
bits	pointer
)	O
<=	O
bits	pointer
)	O
break	O
;	O
PULLBYTE	O
(	O
)	O
;	O
}	O
DROPBITS	O
(	O
last	int
.	O
bits	pointer
)	O
;	O
}	O
DROPBITS	O
(	O
here	struct
.	O
bits	pointer
)	O
;	O
state	pointer
->	O
length	int
=	O
(	O
unsigned	O
)	O
here	struct
.	O
val	short
;	O
if	O
(	O
here	struct
.	O
op	char
==	O
0	int
)	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
here	struct
.	O
val	short
>=	O
0x20	int
&&	O
here	struct
.	O
val	short
<	O
0x7f	int
?	O
"inflate:         literal '%c'\n"	pointer
:	O
"inflate:         literal 0x%02x\n"	pointer
,	O
here	struct
.	O
val	short
)	O
)	O
;	O
ROOM	O
(	O
)	O
;	O
*	O
put	pointer
++	O
=	O
(	O
unsigned	O
char	O
)	O
(	O
state	pointer
->	O
length	int
)	O
;	O
left	int
--	O
;	O
state	pointer
->	O
mode	pointer
=	O
LEN	int
;	O
break	O
;	O
}	O
if	O
(	O
here	struct
.	O
op	char
&	O
32	int
)	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         end of block\n"	pointer
)	O
)	O
;	O
state	pointer
->	O
mode	pointer
=	O
TYPE	int
;	O
break	O
;	O
}	O
if	O
(	O
here	struct
.	O
op	char
&	O
64	int
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid literal/length code"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
state	pointer
->	O
extra	pointer
=	O
(	O
unsigned	O
)	O
(	O
here	struct
.	O
op	char
)	O
&	O
15	int
;	O
if	O
(	O
state	pointer
->	O
extra	pointer
!=	O
0	int
)	O
{	O
NEEDBITS	O
(	O
state	pointer
->	O
extra	pointer
)	O
;	O
state	pointer
->	O
length	int
+=	O
BITS	O
(	O
state	pointer
->	O
extra	pointer
)	O
;	O
DROPBITS	O
(	O
state	pointer
->	O
extra	pointer
)	O
;	O
}	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         length %u\n"	pointer
,	O
state	pointer
->	O
length	int
)	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
here	struct
=	O
state	pointer
->	O
distcode	pointer
[	O
BITS	O
(	O
state	pointer
->	O
distbits	int
)	O
]	O
;	O
if	O
(	O
(	O
unsigned	O
)	O
(	O
here	struct
.	O
bits	pointer
)	O
<=	O
bits	pointer
)	O
break	O
;	O
PULLBYTE	O
(	O
)	O
;	O
}	O
if	O
(	O
(	O
here	struct
.	O
op	char
&	O
0xf0	int
)	O
==	O
0	int
)	O
{	O
last	int
=	O
here	struct
;	O
for	O
(	O
;	O
;	O
)	O
{	O
here	struct
=	O
state	pointer
->	O
distcode	pointer
[	O
last	int
.	O
val	short
+	O
(	O
BITS	O
(	O
last	int
.	O
bits	pointer
+	O
last	int
.	O
op	char
)	O
>>	O
last	int
.	O
bits	pointer
)	O
]	O
;	O
if	O
(	O
(	O
unsigned	O
)	O
(	O
last	int
.	O
bits	pointer
+	O
here	struct
.	O
bits	pointer
)	O
<=	O
bits	pointer
)	O
break	O
;	O
PULLBYTE	O
(	O
)	O
;	O
}	O
DROPBITS	O
(	O
last	int
.	O
bits	pointer
)	O
;	O
}	O
DROPBITS	O
(	O
here	struct
.	O
bits	pointer
)	O
;	O
if	O
(	O
here	struct
.	O
op	char
&	O
64	int
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid distance code"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
state	pointer
->	O
offset	int
=	O
(	O
unsigned	O
)	O
here	struct
.	O
val	short
;	O
state	pointer
->	O
extra	pointer
=	O
(	O
unsigned	O
)	O
(	O
here	struct
.	O
op	char
)	O
&	O
15	int
;	O
if	O
(	O
state	pointer
->	O
extra	pointer
!=	O
0	int
)	O
{	O
NEEDBITS	O
(	O
state	pointer
->	O
extra	pointer
)	O
;	O
state	pointer
->	O
offset	int
+=	O
BITS	O
(	O
state	pointer
->	O
extra	pointer
)	O
;	O
DROPBITS	O
(	O
state	pointer
->	O
extra	pointer
)	O
;	O
}	O
if	O
(	O
state	pointer
->	O
offset	int
>	O
state	pointer
->	O
wsize	int
-	O
(	O
state	pointer
->	O
whave	int
<	O
state	pointer
->	O
wsize	int
?	O
left	int
:	O
0	int
)	O
)	O
{	O
strm	pointer
->	O
msg	pointer
=	O
(	O
char	O
*	O
)	O
"invalid distance too far back"	pointer
;	O
state	pointer
->	O
mode	pointer
=	O
BAD	int
;	O
break	O
;	O
}	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"inflate:         distance %u\n"	pointer
,	O
state	pointer
->	O
offset	int
)	O
)	O
;	O
do	O
{	O
ROOM	O
(	O
)	O
;	O
copy	int
=	O
state	pointer
->	O
wsize	int
-	O
state	pointer
->	O
offset	int
;	O
if	O
(	O
copy	int
<	O
left	int
)	O
{	O
from	pointer
=	O
put	pointer
+	O
copy	int
;	O
copy	int
=	O
left	int
-	O
copy	int
;	O
}	O
else	O
{	O
from	pointer
=	O
put	pointer
-	O
state	pointer
->	O
offset	int
;	O
copy	int
=	O
left	int
;	O
}	O
if	O
(	O
copy	int
>	O
state	pointer
->	O
length	int
)	O
copy	int
=	O
state	pointer
->	O
length	int
;	O
state	pointer
->	O
length	int
-=	O
copy	int
;	O
left	int
-=	O
copy	int
;	O
do	O
{	O
*	O
put	pointer
++	O
=	O
*	O
from	pointer
++	O
;	O
}	O
while	O
(	O
--	O
copy	int
)	O
;	O
}	O
while	O
(	O
state	pointer
->	O
length	int
!=	O
0	int
)	O
;	O
break	O
;	O
case	O
DONE	int
:	O
ret	int
=	O
Z_STREAM_END	int
;	O
if	O
(	O
left	int
<	O
state	pointer
->	O
wsize	int
)	O
{	O
if	O
(	O
out	pointer
(	O
out_desc	pointer
,	O
state	pointer
->	O
window	pointer
,	O
state	pointer
->	O
wsize	int
-	O
left	int
)	O
)	O
ret	int
=	O
Z_BUF_ERROR	O
;	O
}	O
goto	O
inf_leave	O
;	O
case	O
BAD	int
:	O
ret	int
=	O
Z_DATA_ERROR	O
;	O
goto	O
inf_leave	O
;	O
default	O
:	O
ret	int
=	O
Z_STREAM_ERROR	O
;	O
goto	O
inf_leave	O
;	O
}	O
inf_leave	O
:	O
strm	pointer
->	O
next_in	pointer
=	O
next	pointer
;	O
strm	pointer
->	O
avail_in	int
=	O
have	int
;	O
return	O
ret	int
;	O
}	O
int	O
ZEXPORT	O
inflateBackEnd	function
(	O
strm	pointer
)	O
z_streamp	pointer
strm	pointer
;	O
{	O
if	O
(	O
strm	pointer
==	O
Z_NULL	int
||	O
strm	pointer
->	O
state	pointer
==	O
Z_NULL	int
||	O
strm	pointer
->	O
zfree	pointer
==	O
(	O
free_func	pointer
)	O
0	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
ZFREE	O
(	O
strm	pointer
,	O
strm	pointer
->	O
state	pointer
)	O
;	O
strm	pointer
->	O
state	pointer
=	O
Z_NULL	int
;	O
Tracev	O
(	O
(	O
stderr	O
,	O
"inflate: end\n"	pointer
)	O
)	O
;	O
return	O
Z_OK	int
;	O
}	O
