int	O
_API_fspace2	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
double	O
x0	double
,	O
double	O
y0	function
,	O
double	O
x1	double
,	O
double	O
y1	function
,	O
double	O
x2	double
,	O
double	O
y2	double
)	O
{	O
double	O
s	pointer
[	O
6	int
]	O
;	O
double	O
v0x	double
,	O
v0y	double
,	O
v1x	double
,	O
v1y	double
,	O
v2x	double
,	O
v2y	double
;	O
double	O
cross	double
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"fspace2: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
v0x	double
=	O
x0	double
;	O
v0y	double
=	O
y0	function
;	O
v1x	double
=	O
x1	double
-	O
x0	double
;	O
v1y	double
=	O
y1	function
-	O
y0	function
;	O
v2x	double
=	O
x2	double
-	O
x0	double
;	O
v2y	double
=	O
y2	double
-	O
y0	function
;	O
cross	double
=	O
v1x	double
*	O
v2y	double
-	O
v1y	double
*	O
v2x	double
;	O
if	O
(	O
cross	double
==	O
0.0	int
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"the requested singular affine transformation cannot be performed"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
s	pointer
[	O
0	int
]	O
=	O
v2y	double
/	O
cross	double
;	O
s	pointer
[	O
1	int
]	O
=	O
-	O
v1y	double
/	O
cross	double
;	O
s	pointer
[	O
2	int
]	O
=	O
-	O
v2x	double
/	O
cross	double
;	O
s	pointer
[	O
3	int
]	O
=	O
v1x	double
/	O
cross	double
;	O
s	pointer
[	O
4	int
]	O
=	O
-	O
(	O
v0x	double
*	O
v2y	double
-	O
v0y	double
*	O
v2x	double
)	O
/	O
cross	double
;	O
s	pointer
[	O
5	int
]	O
=	O
(	O
v0x	double
*	O
v1y	double
-	O
v0y	double
*	O
v1x	double
)	O
/	O
cross	double
;	O
return	O
_API_fsetmatrix	O
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
[	O
0	int
]	O
,	O
s	pointer
[	O
1	int
]	O
,	O
s	pointer
[	O
2	int
]	O
,	O
s	pointer
[	O
3	int
]	O
,	O
s	pointer
[	O
4	int
]	O
,	O
s	pointer
[	O
5	int
]	O
)	O
;	O
}	O
int	O
_API_fspace	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
double	O
x0	double
,	O
double	O
y0	function
,	O
double	O
x1	double
,	O
double	O
y1	function
)	O
{	O
return	O
_API_fspace2	O
(	O
R___	O
(	O
_plotter	pointer
)	O
x0	double
,	O
y0	function
,	O
x1	double
,	O
y0	function
,	O
x0	double
,	O
y1	function
)	O
;	O
}	O
int	O
_API_fsetmatrix	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
double	O
m0	double
,	O
double	O
m1	double
,	O
double	O
m2	double
,	O
double	O
m3	double
,	O
double	O
m4	double
,	O
double	O
m5	double
)	O
{	O
int	O
i	int
;	O
double	O
s	pointer
[	O
6	int
]	O
,	O
t	array
[	O
6	int
]	O
;	O
double	O
norm	double
,	O
min_sing_val	pointer
,	O
max_sing_val	pointer
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"fsetmatrix: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
s	pointer
[	O
0	int
]	O
=	O
m0	double
;	O
s	pointer
[	O
1	int
]	O
=	O
m1	double
;	O
s	pointer
[	O
2	int
]	O
=	O
m2	double
;	O
s	pointer
[	O
3	int
]	O
=	O
m3	double
;	O
s	pointer
[	O
4	int
]	O
=	O
m4	double
;	O
s	pointer
[	O
5	int
]	O
=	O
m5	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
[	O
i	int
]	O
=	O
s	pointer
[	O
i	int
]	O
;	O
_matrix_product	function
(	O
s	pointer
,	O
_plotter	pointer
->	O
data	pointer
->	O
m_ndc_to_device	array
,	O
t	array
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
[	O
i	int
]	O
=	O
t	array
[	O
i	int
]	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
axes_preserved	enum
=	O
(	O
t	array
[	O
1	int
]	O
==	O
0.0	int
&&	O
t	array
[	O
2	int
]	O
==	O
0.0	int
)	O
?	O
true	int
:	O
false	int
;	O
if	O
(	O
IS_ZERO	O
(	O
t	array
[	O
0	int
]	O
*	O
t	array
[	O
0	int
]	O
+	O
t	array
[	O
1	int
]	O
*	O
t	array
[	O
1	int
]	O
-	O
t	array
[	O
2	int
]	O
*	O
t	array
[	O
2	int
]	O
-	O
t	array
[	O
3	int
]	O
*	O
t	array
[	O
3	int
]	O
)	O
&&	O
IS_ZERO	O
(	O
t	array
[	O
0	int
]	O
*	O
t	array
[	O
2	int
]	O
+	O
t	array
[	O
1	int
]	O
*	O
t	array
[	O
3	int
]	O
)	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
uniform	enum
=	O
true	int
;	O
else	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
uniform	enum
=	O
false	int
;	O
{	O
double	O
det	double
;	O
det	double
=	O
t	array
[	O
0	int
]	O
*	O
t	array
[	O
3	int
]	O
-	O
t	array
[	O
1	int
]	O
*	O
t	array
[	O
2	int
]	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
nonreflection	enum
=	O
(	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
flipped_y	enum
?	O
-	O
1	int
:	O
1	int
)	O
*	O
det	double
>=	O
0	int
)	O
?	O
true	int
:	O
false	int
;	O
}	O
_matrix_sing_vals	function
(	O
s	pointer
,	O
&	O
min_sing_val	pointer
,	O
&	O
max_sing_val	pointer
)	O
;	O
norm	double
=	O
min_sing_val	pointer
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
display_coors_type	int
==	O
(	O
int	O
)	O
DISP_DEVICE_COORS_INTEGER_LIBXMI	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
default_line_width	double
=	O
0.0	int
;	O
else	O
{	O
if	O
(	O
norm	double
==	O
0.0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
default_line_width	double
=	O
0.0	int
;	O
else	O
_plotter	pointer
->	O
drawstate	pointer
->	O
default_line_width	double
=	O
PL_DEFAULT_LINE_WIDTH_AS_FRACTION_OF_DISPLAY_SIZE	O
/	O
norm	double
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
linewidth_invoked	enum
==	O
false	int
)	O
{	O
_API_flinewidth	O
(	O
R___	O
(	O
_plotter	pointer
)	O
-	O
1.0	int
)	O
;	O
_plotter	pointer
->	O
data	pointer
->	O
linewidth_invoked	enum
=	O
false	int
;	O
}	O
else	O
_API_flinewidth	O
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width	double
)	O
;	O
if	O
(	O
norm	double
==	O
0.0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
default_font_size	double
=	O
0.0	int
;	O
else	O
_plotter	pointer
->	O
drawstate	pointer
->	O
default_font_size	double
=	O
PL_DEFAULT_FONT_SIZE_AS_FRACTION_OF_DISPLAY_SIZE	O
/	O
norm	double
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
fontsize_invoked	enum
==	O
false	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
default_font_size	double
;	O
return	O
0	int
;	O
}	O
int	O
_API_fconcat	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
double	O
m0	double
,	O
double	O
m1	double
,	O
double	O
m2	double
,	O
double	O
m3	double
,	O
double	O
m4	double
,	O
double	O
m5	double
)	O
{	O
double	O
m	array
[	O
6	int
]	O
,	O
s	pointer
[	O
6	int
]	O
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"fconcat: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
m	array
[	O
0	int
]	O
=	O
m0	double
;	O
m	array
[	O
1	int
]	O
=	O
m1	double
;	O
m	array
[	O
2	int
]	O
=	O
m2	double
;	O
m	array
[	O
3	int
]	O
=	O
m3	double
;	O
m	array
[	O
4	int
]	O
=	O
m4	double
;	O
m	array
[	O
5	int
]	O
=	O
m5	double
;	O
_matrix_product	function
(	O
m	array
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m_user_to_ndc	array
,	O
s	pointer
)	O
;	O
return	O
_API_fsetmatrix	O
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
[	O
0	int
]	O
,	O
s	pointer
[	O
1	int
]	O
,	O
s	pointer
[	O
2	int
]	O
,	O
s	pointer
[	O
3	int
]	O
,	O
s	pointer
[	O
4	int
]	O
,	O
s	pointer
[	O
5	int
]	O
)	O
;	O
}	O
bool	enum
_compute_ndc_to_device_map	function
(	O
plPlotterData	struct
*	O
data	pointer
)	O
{	O
double	O
t	array
[	O
6	int
]	O
;	O
double	O
map_1	array
[	O
6	int
]	O
,	O
map_2	array
[	O
6	int
]	O
,	O
map_1a	array
[	O
6	int
]	O
,	O
map_1b	array
[	O
6	int
]	O
,	O
map_1ab	array
[	O
6	int
]	O
,	O
map_1c	array
[	O
6	int
]	O
;	O
double	O
device_x_left	double
,	O
device_x_right	double
,	O
device_y_bottom	double
,	O
device_y_top	double
;	O
const	O
char	O
*	O
rotation_s	pointer
;	O
double	O
rotation_angle	double
;	O
int	O
i	int
;	O
switch	O
(	O
data	pointer
->	O
display_model_type	int
)	O
{	O
case	O
(	O
int	O
)	O
DISP_MODEL_PHYSICAL	int
:	O
{	O
device_x_left	double
=	O
data	pointer
->	O
xmin	double
;	O
device_x_right	double
=	O
data	pointer
->	O
xmax	double
;	O
device_y_bottom	double
=	O
data	pointer
->	O
ymin	double
;	O
device_y_top	double
=	O
data	pointer
->	O
ymax	double
;	O
}	O
break	O
;	O
case	O
(	O
int	O
)	O
DISP_MODEL_VIRTUAL	int
:	O
default	O
:	O
{	O
switch	O
(	O
(	O
int	O
)	O
data	pointer
->	O
display_coors_type	int
)	O
{	O
case	O
(	O
int	O
)	O
DISP_DEVICE_COORS_REAL	int
:	O
default	O
:	O
device_x_left	double
=	O
data	pointer
->	O
xmin	double
;	O
device_x_right	double
=	O
data	pointer
->	O
xmax	double
;	O
device_y_bottom	double
=	O
data	pointer
->	O
ymin	double
;	O
device_y_top	double
=	O
data	pointer
->	O
ymax	double
;	O
break	O
;	O
case	O
(	O
int	O
)	O
DISP_DEVICE_COORS_INTEGER_LIBXMI	int
:	O
case	O
(	O
int	O
)	O
DISP_DEVICE_COORS_INTEGER_NON_LIBXMI	int
:	O
{	O
double	O
x_sign	double
=	O
(	O
data	pointer
->	O
imin	int
<	O
data	pointer
->	O
imax	int
?	O
1.0	int
:	O
-	O
1.0	int
)	O
;	O
double	O
y_sign	double
=	O
(	O
data	pointer
->	O
jmin	int
<	O
data	pointer
->	O
jmax	int
?	O
1.0	int
:	O
-	O
1.0	int
)	O
;	O
device_x_left	double
=	O
(	O
(	O
double	O
)	O
(	O
data	pointer
->	O
imin	int
)	O
+	O
x_sign	double
*	O
(	O
-	O
0.5	int
+	O
ROUNDING_FUZZ	int
)	O
)	O
;	O
device_x_right	double
=	O
(	O
(	O
double	O
)	O
(	O
data	pointer
->	O
imax	int
)	O
+	O
x_sign	double
*	O
(	O
0.5	int
-	O
ROUNDING_FUZZ	int
)	O
)	O
;	O
device_y_bottom	double
=	O
(	O
(	O
double	O
)	O
(	O
data	pointer
->	O
jmin	int
)	O
+	O
y_sign	double
*	O
(	O
-	O
0.5	int
+	O
ROUNDING_FUZZ	int
)	O
)	O
;	O
device_y_top	double
=	O
(	O
(	O
double	O
)	O
(	O
data	pointer
->	O
jmax	int
)	O
+	O
y_sign	double
*	O
(	O
0.5	int
-	O
ROUNDING_FUZZ	int
)	O
)	O
;	O
}	O
break	O
;	O
}	O
}	O
break	O
;	O
}	O
rotation_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_plot_param	function
(	O
data	pointer
,	O
"ROTATION"	pointer
)	O
;	O
if	O
(	O
rotation_s	pointer
==	O
NULL	O
)	O
rotation_s	pointer
=	O
(	O
const	O
char	O
*	O
)	O
_get_default_plot_param	function
(	O
"ROTATION"	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
rotation_s	pointer
,	O
"no"	pointer
)	O
==	O
0	int
)	O
rotation_angle	double
=	O
0.0	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
rotation_s	pointer
,	O
"yes"	pointer
)	O
==	O
0	int
)	O
rotation_angle	double
=	O
90.0	int
;	O
else	O
if	O
(	O
sscanf	function
(	O
rotation_s	pointer
,	O
"%lf"	pointer
,	O
&	O
rotation_angle	double
)	O
<=	O
0	int
)	O
rotation_angle	double
=	O
0.0	int
;	O
rotation_angle	double
*=	O
(	O
M_PI	int
/	O
180.0	int
)	O
;	O
map_1a	array
[	O
0	int
]	O
=	O
map_1a	array
[	O
3	int
]	O
=	O
1.0	int
;	O
map_1a	array
[	O
1	int
]	O
=	O
map_1a	array
[	O
2	int
]	O
=	O
0.0	int
;	O
map_1a	array
[	O
4	int
]	O
=	O
map_1a	array
[	O
5	int
]	O
=	O
-	O
0.5	int
;	O
map_1b	array
[	O
0	int
]	O
=	O
cos	function
(	O
rotation_angle	double
)	O
;	O
map_1b	array
[	O
1	int
]	O
=	O
sin	function
(	O
rotation_angle	double
)	O
;	O
map_1b	array
[	O
2	int
]	O
=	O
-	O
sin	function
(	O
rotation_angle	double
)	O
;	O
map_1b	array
[	O
3	int
]	O
=	O
cos	function
(	O
rotation_angle	double
)	O
;	O
map_1b	array
[	O
4	int
]	O
=	O
map_1b	array
[	O
5	int
]	O
=	O
0.0	int
;	O
map_1c	array
[	O
0	int
]	O
=	O
map_1c	array
[	O
3	int
]	O
=	O
1.0	int
;	O
map_1c	array
[	O
1	int
]	O
=	O
map_1c	array
[	O
2	int
]	O
=	O
0.0	int
;	O
map_1c	array
[	O
4	int
]	O
=	O
map_1c	array
[	O
5	int
]	O
=	O
0.5	int
;	O
_matrix_product	function
(	O
map_1a	array
,	O
map_1b	array
,	O
map_1ab	array
)	O
;	O
_matrix_product	function
(	O
map_1ab	array
,	O
map_1c	array
,	O
map_1	array
)	O
;	O
map_2	array
[	O
4	int
]	O
=	O
device_x_left	double
;	O
map_2	array
[	O
5	int
]	O
=	O
device_y_bottom	double
;	O
map_2	array
[	O
0	int
]	O
=	O
device_x_right	double
-	O
device_x_left	double
;	O
map_2	array
[	O
1	int
]	O
=	O
0.0	int
;	O
map_2	array
[	O
2	int
]	O
=	O
0.0	int
;	O
map_2	array
[	O
3	int
]	O
=	O
device_y_top	double
-	O
device_y_bottom	double
;	O
_matrix_product	function
(	O
map_1	array
,	O
map_2	array
,	O
t	array
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
data	pointer
->	O
m_ndc_to_device	array
[	O
i	int
]	O
=	O
t	array
[	O
i	int
]	O
;	O
return	O
true	int
;	O
}	O
