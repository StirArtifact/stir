static	O
int	O
ahc_echo	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	long
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
static	O
int	O
aptr	int
;	O
const	O
char	O
*	O
me	pointer
=	O
cls	pointer
;	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
int	O
ret	int
;	O
char	O
*	O
user	pointer
;	O
char	O
*	O
pass	pointer
;	O
int	O
fail	int
;	O
(	O
void	O
)	O
url	pointer
;	O
(	O
void	O
)	O
version	pointer
;	O
(	O
void	O
)	O
upload_data	pointer
;	O
(	O
void	O
)	O
upload_data_size	pointer
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
method	pointer
,	O
"GET"	pointer
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
&	O
aptr	int
!=	O
*	O
ptr	pointer
)	O
{	O
*	O
ptr	pointer
=	O
&	O
aptr	int
;	O
return	O
MHD_YES	int
;	O
}	O
*	O
ptr	pointer
=	O
NULL	O
;	O
pass	pointer
=	O
NULL	O
;	O
user	pointer
=	O
MHD_basic_auth_get_username_password	function
(	O
connection	pointer
,	O
&	O
pass	pointer
)	O
;	O
fail	int
=	O
(	O
(	O
NULL	O
==	O
user	pointer
)	O
||	O
(	O
0	int
!=	O
strcmp	function
(	O
user	pointer
,	O
"Aladdin"	pointer
)	O
)	O
||	O
(	O
0	int
!=	O
strcmp	function
(	O
pass	pointer
,	O
"open sesame"	pointer
)	O
)	O
)	O
;	O
if	O
(	O
fail	int
)	O
{	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
DENIED	pointer
)	O
,	O
(	O
void	O
*	O
)	O
DENIED	pointer
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
ret	int
=	O
MHD_queue_basic_auth_fail_response	function
(	O
connection	pointer
,	O
"TestRealm"	pointer
,	O
response	pointer
)	O
;	O
}	O
else	O
{	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
me	pointer
)	O
,	O
(	O
void	O
*	O
)	O
me	pointer
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
ret	int
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_OK	int
,	O
response	pointer
)	O
;	O
}	O
if	O
(	O
NULL	O
!=	O
user	pointer
)	O
MHD_free	function
(	O
user	pointer
)	O
;	O
if	O
(	O
NULL	O
!=	O
pass	pointer
)	O
MHD_free	function
(	O
pass	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	pointer
;	O
unsigned	O
int	O
port	short
;	O
if	O
(	O
(	O
argc	int
!=	O
2	int
)	O
||	O
(	O
1	int
!=	O
sscanf	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"%u"	pointer
,	O
&	O
port	short
)	O
)	O
||	O
(	O
UINT16_MAX	O
<	O
port	short
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s PORT\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	pointer
=	O
MHD_start_daemon	function
(	O
MHD_USE_THREAD_PER_CONNECTION	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_ERROR_LOG	int
,	O
atoi	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	function
,	O
PAGE	pointer
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
d	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"HTTP server running. Press ENTER to stop the server\n"	pointer
)	O
;	O
(	O
void	O
)	O
getc	function
(	O
stdin	pointer
)	O
;	O
MHD_stop_daemon	function
(	O
d	pointer
)	O
;	O
return	O
0	int
;	O
}	O
