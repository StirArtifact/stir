int	O
gsl_spblas_dgemm	function
(	O
const	O
double	O
alpha	long double
,	O
const	O
gsl_spmatrix	struct
*	O
A	pointer
,	O
const	O
gsl_spmatrix	struct
*	O
B	pointer
,	O
gsl_spmatrix	struct
*	O
C	pointer
)	O
{	O
if	O
(	O
A	pointer
->	O
size2	long
!=	O
B	pointer
->	O
size1	long
||	O
A	pointer
->	O
size1	long
!=	O
C	pointer
->	O
size1	long
||	O
B	pointer
->	O
size2	long
!=	O
C	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix dimensions do not match"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
A	pointer
->	O
sptype	int
!=	O
B	pointer
->	O
sptype	int
||	O
A	pointer
->	O
sptype	int
!=	O
C	pointer
->	O
sptype	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix storage formats do not match"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
GSL_SPMATRIX_ISCCS	O
(	O
A	pointer
)	O
)	O
{	O
GSL_ERROR	O
(	O
"compressed column format required"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
const	O
size_t	long
M	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
B	pointer
->	O
size2	long
;	O
int	O
*	O
Bi	pointer
=	O
B	pointer
->	O
i	long
;	O
int	O
*	O
Bp	pointer
=	O
B	pointer
->	O
p	int
;	O
double	O
*	O
Bd	pointer
=	O
B	pointer
->	O
data	pointer
;	O
int	O
*	O
w	pointer
=	O
A	pointer
->	O
work	union
.	O
work_int	pointer
;	O
double	O
*	O
x	double
=	O
C	pointer
->	O
work	union
.	O
work_atomic	pointer
;	O
int	O
*	O
Cp	pointer
,	O
*	O
Ci	pointer
;	O
double	O
*	O
Cd	pointer
;	O
size_t	long
j	long
;	O
int	O
p	int
;	O
size_t	long
nz	long
=	O
0	int
;	O
if	O
(	O
C	pointer
->	O
nzmax	long
<	O
A	pointer
->	O
nz	long
+	O
B	pointer
->	O
nz	long
)	O
{	O
status	int
=	O
gsl_spmatrix_realloc	function
(	O
A	pointer
->	O
nz	long
+	O
B	pointer
->	O
nz	long
,	O
C	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
GSL_ERROR	O
(	O
"unable to realloc matrix C"	pointer
,	O
status	int
)	O
;	O
}	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
M	int
;	O
++	O
j	long
)	O
w	pointer
[	O
j	long
]	O
=	O
0	int
;	O
Cp	pointer
=	O
C	pointer
->	O
p	int
;	O
Ci	pointer
=	O
C	pointer
->	O
i	long
;	O
Cd	pointer
=	O
C	pointer
->	O
data	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
if	O
(	O
nz	long
+	O
M	int
>	O
C	pointer
->	O
nzmax	long
)	O
{	O
status	int
=	O
gsl_spmatrix_realloc	function
(	O
2	int
*	O
C	pointer
->	O
nzmax	long
+	O
M	int
,	O
C	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
GSL_ERROR	O
(	O
"unable to realloc matrix C"	pointer
,	O
status	int
)	O
;	O
}	O
Ci	pointer
=	O
C	pointer
->	O
i	long
;	O
Cd	pointer
=	O
C	pointer
->	O
data	pointer
;	O
}	O
Cp	pointer
[	O
j	long
]	O
=	O
nz	long
;	O
for	O
(	O
p	int
=	O
Bp	pointer
[	O
j	long
]	O
;	O
p	int
<	O
Bp	pointer
[	O
j	long
+	O
1	int
]	O
;	O
++	O
p	int
)	O
{	O
nz	long
=	O
gsl_spblas_scatter	function
(	O
A	pointer
,	O
Bi	pointer
[	O
p	int
]	O
,	O
Bd	pointer
[	O
p	int
]	O
,	O
w	pointer
,	O
x	double
,	O
(	O
int	O
)	O
(	O
j	long
+	O
1	int
)	O
,	O
C	pointer
,	O
nz	long
)	O
;	O
}	O
for	O
(	O
p	int
=	O
Cp	pointer
[	O
j	long
]	O
;	O
p	int
<	O
(	O
int	O
)	O
nz	long
;	O
++	O
p	int
)	O
Cd	pointer
[	O
p	int
]	O
=	O
x	double
[	O
Ci	pointer
[	O
p	int
]	O
]	O
;	O
}	O
Cp	pointer
[	O
N	int
]	O
=	O
nz	long
;	O
C	pointer
->	O
nz	long
=	O
nz	long
;	O
gsl_spmatrix_scale	function
(	O
C	pointer
,	O
alpha	long double
)	O
;	O
return	O
status	int
;	O
}	O
}	O
size_t	long
gsl_spblas_scatter	function
(	O
const	O
gsl_spmatrix	struct
*	O
A	pointer
,	O
const	O
size_t	long
j	long
,	O
const	O
double	O
alpha	long double
,	O
int	O
*	O
w	pointer
,	O
double	O
*	O
x	double
,	O
const	O
int	O
mark	int
,	O
gsl_spmatrix	struct
*	O
C	pointer
,	O
size_t	long
nz	long
)	O
{	O
int	O
p	int
;	O
int	O
*	O
Ai	pointer
=	O
A	pointer
->	O
i	long
;	O
int	O
*	O
Ap	pointer
=	O
A	pointer
->	O
p	int
;	O
double	O
*	O
Ad	pointer
=	O
A	pointer
->	O
data	pointer
;	O
int	O
*	O
Ci	pointer
=	O
C	pointer
->	O
i	long
;	O
for	O
(	O
p	int
=	O
Ap	pointer
[	O
j	long
]	O
;	O
p	int
<	O
Ap	pointer
[	O
j	long
+	O
1	int
]	O
;	O
++	O
p	int
)	O
{	O
size_t	long
i	long
=	O
Ai	pointer
[	O
p	int
]	O
;	O
if	O
(	O
w	pointer
[	O
i	long
]	O
<	O
mark	int
)	O
{	O
w	pointer
[	O
i	long
]	O
=	O
mark	int
;	O
Ci	pointer
[	O
nz	long
++	O
]	O
=	O
i	long
;	O
x	double
[	O
i	long
]	O
=	O
alpha	long double
*	O
Ad	pointer
[	O
p	int
]	O
;	O
}	O
else	O
{	O
x	double
[	O
i	long
]	O
+=	O
alpha	long double
*	O
Ad	pointer
[	O
p	int
]	O
;	O
}	O
}	O
return	O
(	O
nz	long
)	O
;	O
}	O
