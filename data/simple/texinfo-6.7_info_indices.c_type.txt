int	O
show_index_match	int
=	O
1	int
;	O
static	O
REFERENCE	struct
*	O
*	O
index_index	pointer
=	O
NULL	O
;	O
static	O
int	O
index_offset	int
=	O
0	int
;	O
static	O
int	O
index_initial	int
=	O
0	int
;	O
static	O
int	O
index_partial	int
=	O
0	int
;	O
static	O
char	O
*	O
index_search	pointer
=	O
NULL	O
;	O
static	O
char	O
*	O
initial_index_filename	pointer
=	O
NULL	O
;	O
static	O
char	O
*	O
initial_index_nodename	pointer
=	O
NULL	O
;	O
typedef	O
struct	O
{	O
char	O
*	O
name	pointer
;	O
int	O
first	int
;	O
int	O
last	int
;	O
}	O
INDEX_NAME_ASSOC	struct
;	O
static	O
INDEX_NAME_ASSOC	struct
*	O
*	O
index_nodenames	pointer
=	O
NULL	O
;	O
static	O
size_t	long
index_nodenames_index	long
=	O
0	int
;	O
static	O
size_t	long
index_nodenames_slots	long
=	O
0	int
;	O
static	O
void	O
add_index_to_index_nodenames	function
(	O
REFERENCE	struct
*	O
*	O
array	pointer
,	O
NODE	struct
*	O
node	pointer
)	O
{	O
register	O
int	O
i	int
,	O
last	int
;	O
INDEX_NAME_ASSOC	struct
*	O
assoc	pointer
;	O
for	O
(	O
last	int
=	O
0	int
;	O
array	pointer
[	O
last	int
+	O
1	int
]	O
;	O
last	int
++	O
)	O
;	O
assoc	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
INDEX_NAME_ASSOC	struct
)	O
)	O
;	O
assoc	pointer
->	O
name	pointer
=	O
xstrdup	function
(	O
node	pointer
->	O
nodename	pointer
)	O
;	O
if	O
(	O
!	O
index_nodenames_index	long
)	O
{	O
assoc	pointer
->	O
first	int
=	O
0	int
;	O
assoc	pointer
->	O
last	int
=	O
last	int
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
index_nodenames	pointer
[	O
i	int
+	O
1	int
]	O
;	O
i	int
++	O
)	O
;	O
assoc	pointer
->	O
first	int
=	O
1	int
+	O
index_nodenames	pointer
[	O
i	int
]	O
->	O
last	int
;	O
assoc	pointer
->	O
last	int
=	O
assoc	pointer
->	O
first	int
+	O
last	int
;	O
}	O
add_pointer_to_array	O
(	O
assoc	pointer
,	O
index_nodenames_index	long
,	O
index_nodenames	pointer
,	O
index_nodenames_slots	long
,	O
10	int
)	O
;	O
}	O
static	O
void	O
info_indices_of_file_buffer	function
(	O
FILE_BUFFER	struct
*	O
file_buffer	pointer
)	O
{	O
register	O
int	O
i	int
;	O
REFERENCE	struct
*	O
*	O
result	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
file_buffer	pointer
)	O
{	O
free	function
(	O
index_index	pointer
)	O
;	O
index_index	pointer
=	O
0	int
;	O
return	O
;	O
}	O
if	O
(	O
initial_index_filename	pointer
&&	O
FILENAME_CMP	O
(	O
initial_index_filename	pointer
,	O
file_buffer	pointer
->	O
filename	pointer
)	O
==	O
0	int
)	O
{	O
return	O
;	O
}	O
if	O
(	O
info_windows_initialized_p	int
)	O
window_message_in_echo_area	function
(	O
_	O
(	O
"Finding index entries..."	pointer
)	O
)	O
;	O
free	function
(	O
initial_index_filename	pointer
)	O
;	O
free	function
(	O
initial_index_nodename	pointer
)	O
;	O
initial_index_filename	pointer
=	O
NULL	O
;	O
initial_index_nodename	pointer
=	O
NULL	O
;	O
if	O
(	O
index_nodenames	pointer
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
index_nodenames	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
free	function
(	O
index_nodenames	pointer
[	O
i	int
]	O
->	O
name	pointer
)	O
;	O
free	function
(	O
index_nodenames	pointer
[	O
i	int
]	O
)	O
;	O
}	O
index_nodenames_index	long
=	O
0	int
;	O
index_nodenames	pointer
[	O
0	int
]	O
=	O
NULL	O
;	O
}	O
if	O
(	O
file_buffer	pointer
->	O
tags	pointer
)	O
{	O
TAG	struct
*	O
tag	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
tag	pointer
=	O
file_buffer	pointer
->	O
tags	pointer
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
strcasestr	function
(	O
tag	pointer
->	O
nodename	pointer
,	O
"Index"	pointer
)	O
&&	O
tag	pointer
->	O
cache	struct
.	O
nodelen	long
!=	O
0	int
)	O
{	O
NODE	struct
*	O
node	pointer
;	O
REFERENCE	struct
*	O
*	O
menu	int
;	O
node	pointer
=	O
info_node_of_tag	function
(	O
file_buffer	pointer
,	O
&	O
file_buffer	pointer
->	O
tags	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
!	O
node	pointer
)	O
continue	O
;	O
if	O
(	O
!	O
initial_index_filename	pointer
)	O
{	O
initial_index_filename	pointer
=	O
xstrdup	function
(	O
file_buffer	pointer
->	O
filename	pointer
)	O
;	O
initial_index_nodename	pointer
=	O
xstrdup	function
(	O
tag	pointer
->	O
nodename	pointer
)	O
;	O
}	O
menu	int
=	O
node	pointer
->	O
references	pointer
;	O
if	O
(	O
menu	int
&&	O
menu	int
[	O
0	int
]	O
)	O
{	O
add_index_to_index_nodenames	function
(	O
menu	int
,	O
node	pointer
)	O
;	O
{	O
REFERENCE	struct
*	O
*	O
old_result	pointer
=	O
result	pointer
;	O
result	pointer
=	O
info_concatenate_references	function
(	O
result	pointer
,	O
menu	int
)	O
;	O
free	function
(	O
old_result	pointer
)	O
;	O
}	O
}	O
free_history_node	function
(	O
node	pointer
)	O
;	O
}	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
result	pointer
&&	O
result	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
result	pointer
[	O
i	int
]	O
->	O
filename	pointer
)	O
result	pointer
[	O
i	int
]	O
->	O
filename	pointer
=	O
xstrdup	function
(	O
file_buffer	pointer
->	O
filename	pointer
)	O
;	O
free	function
(	O
index_index	pointer
)	O
;	O
index_index	pointer
=	O
result	pointer
;	O
if	O
(	O
info_windows_initialized_p	int
)	O
window_clear_echo_area	function
(	O
)	O
;	O
}	O
void	O
info_next_index_match	function
(	O
WINDOW	struct
*	O
window	pointer
,	O
int	O
count	pointer
)	O
;	O
DECLARE_INFO_COMMAND	O
(	O
info_index_search	function
,	O
_	O
(	O
"Look up a string in the index for this file"	pointer
)	O
)	O
{	O
FILE_BUFFER	struct
*	O
fb	pointer
;	O
char	O
*	O
line	pointer
;	O
int	O
old_offset	int
;	O
fb	pointer
=	O
file_buffer_of_window	function
(	O
window	pointer
)	O
;	O
if	O
(	O
fb	pointer
)	O
info_indices_of_file_buffer	function
(	O
fb	pointer
)	O
;	O
if	O
(	O
!	O
fb	pointer
||	O
!	O
index_index	pointer
)	O
{	O
info_error	function
(	O
_	O
(	O
"No indices found"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
line	pointer
=	O
info_read_maybe_completing	function
(	O
_	O
(	O
"Index entry: "	pointer
)	O
,	O
index_index	pointer
)	O
;	O
if	O
(	O
!	O
line	pointer
)	O
{	O
info_abort_key	function
(	O
window	pointer
,	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
*	O
line	pointer
)	O
{	O
free	function
(	O
line	pointer
)	O
;	O
if	O
(	O
initial_index_filename	pointer
&&	O
initial_index_nodename	pointer
)	O
{	O
NODE	struct
*	O
node	pointer
;	O
node	pointer
=	O
info_get_node	function
(	O
initial_index_filename	pointer
,	O
initial_index_nodename	pointer
)	O
;	O
info_set_node_of_window	function
(	O
window	pointer
,	O
node	pointer
)	O
;	O
}	O
return	O
;	O
}	O
if	O
(	O
count	pointer
<	O
0	int
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
index_index	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
;	O
index_offset	int
=	O
i	int
;	O
}	O
else	O
{	O
index_offset	int
=	O
-	O
1	int
;	O
index_initial	int
=	O
0	int
;	O
index_partial	int
=	O
0	int
;	O
}	O
old_offset	int
=	O
index_offset	int
;	O
free	function
(	O
index_search	pointer
)	O
;	O
index_search	pointer
=	O
line	pointer
;	O
info_next_index_match	function
(	O
window	pointer
,	O
count	pointer
)	O
;	O
if	O
(	O
index_offset	int
==	O
old_offset	int
)	O
index_offset	int
=	O
0	int
;	O
}	O
static	O
int	O
index_entry_matches	function
(	O
REFERENCE	struct
*	O
ent	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
strncmp	function
(	O
ent	pointer
->	O
label	pointer
,	O
str	pointer
,	O
len	long
)	O
)	O
return	O
0	int
;	O
p	pointer
=	O
ent	pointer
->	O
label	pointer
+	O
len	long
;	O
if	O
(	O
!	O
*	O
p	pointer
)	O
return	O
1	int
;	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
' '	O
&&	O
p	pointer
[	O
1	int
]	O
==	O
'<'	O
)	O
{	O
for	O
(	O
p	pointer
+=	O
2	int
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
'>'	O
&&	O
p	pointer
[	O
1	int
]	O
==	O
0	int
)	O
return	O
1	int
;	O
else	O
if	O
(	O
!	O
isdigit	function
(	O
*	O
p	pointer
)	O
)	O
return	O
0	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
REFERENCE	struct
*	O
next_index_match	function
(	O
FILE_BUFFER	struct
*	O
fb	pointer
,	O
char	O
*	O
string	pointer
,	O
int	O
offset	long
,	O
int	O
dir	int
,	O
int	O
*	O
found_offset	pointer
,	O
int	O
*	O
match_offset	pointer
)	O
{	O
int	O
i	int
;	O
int	O
partial_match	int
;	O
size_t	long
search_len	long
;	O
REFERENCE	struct
*	O
result	pointer
;	O
partial_match	int
=	O
0	int
;	O
search_len	long
=	O
strlen	function
(	O
string	pointer
)	O
;	O
info_indices_of_file_buffer	function
(	O
fb	pointer
)	O
;	O
if	O
(	O
!	O
index_index	pointer
)	O
{	O
info_error	function
(	O
_	O
(	O
"No indices found."	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
index_search	pointer
!=	O
string	pointer
)	O
{	O
free	function
(	O
index_search	pointer
)	O
;	O
index_search	pointer
=	O
string	pointer
;	O
}	O
if	O
(	O
!	O
index_initial	int
&&	O
!	O
index_partial	int
)	O
{	O
for	O
(	O
i	int
=	O
offset	long
+	O
dir	int
;	O
i	int
>	O
-	O
1	int
&&	O
index_index	pointer
[	O
i	int
]	O
;	O
i	int
+=	O
dir	int
)	O
if	O
(	O
index_entry_matches	function
(	O
index_index	pointer
[	O
i	int
]	O
,	O
string	pointer
,	O
search_len	long
)	O
)	O
{	O
*	O
match_offset	pointer
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
i	int
<	O
0	int
||	O
!	O
index_index	pointer
[	O
i	int
]	O
)	O
{	O
offset	long
=	O
0	int
;	O
index_initial	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
index_initial	int
)	O
{	O
for	O
(	O
i	int
=	O
offset	long
+	O
dir	int
;	O
i	int
>	O
-	O
1	int
&&	O
index_index	pointer
[	O
i	int
]	O
;	O
i	int
+=	O
dir	int
)	O
if	O
(	O
!	O
index_entry_matches	function
(	O
index_index	pointer
[	O
i	int
]	O
,	O
string	pointer
,	O
search_len	long
)	O
&&	O
!	O
strncmp	function
(	O
index_index	pointer
[	O
i	int
]	O
->	O
label	pointer
,	O
string	pointer
,	O
search_len	long
)	O
)	O
{	O
*	O
match_offset	pointer
=	O
search_len	long
;	O
break	O
;	O
}	O
if	O
(	O
i	int
<	O
0	int
||	O
!	O
index_index	pointer
[	O
i	int
]	O
)	O
{	O
offset	long
=	O
0	int
;	O
index_initial	int
=	O
0	int
;	O
index_partial	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
index_partial	int
)	O
{	O
for	O
(	O
i	int
=	O
offset	long
+	O
dir	int
;	O
i	int
>	O
-	O
1	int
&&	O
index_index	pointer
[	O
i	int
]	O
;	O
i	int
+=	O
dir	int
)	O
{	O
if	O
(	O
strncmp	function
(	O
index_index	pointer
[	O
i	int
]	O
->	O
label	pointer
,	O
string	pointer
,	O
search_len	long
)	O
!=	O
0	int
)	O
{	O
partial_match	int
=	O
string_in_line	function
(	O
string	pointer
,	O
index_index	pointer
[	O
i	int
]	O
->	O
label	pointer
)	O
;	O
if	O
(	O
partial_match	int
!=	O
-	O
1	int
)	O
{	O
*	O
match_offset	pointer
=	O
partial_match	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
partial_match	int
<=	O
0	int
)	O
index_partial	int
=	O
0	int
;	O
}	O
if	O
(	O
i	int
<	O
0	int
||	O
!	O
index_index	pointer
[	O
i	int
]	O
)	O
result	pointer
=	O
0	int
;	O
else	O
{	O
index_offset	int
=	O
i	int
;	O
result	pointer
=	O
index_index	pointer
[	O
i	int
]	O
;	O
}	O
*	O
found_offset	pointer
=	O
i	int
;	O
return	O
result	pointer
;	O
}	O
void	O
report_index_match	function
(	O
int	O
i	int
,	O
int	O
match_offset	pointer
)	O
{	O
register	O
int	O
j	int
;	O
const	O
char	O
*	O
name	pointer
=	O
"CAN'T SEE THIS"	pointer
;	O
char	O
*	O
match	pointer
;	O
for	O
(	O
j	int
=	O
0	int
;	O
index_nodenames	pointer
[	O
j	int
]	O
;	O
j	int
++	O
)	O
{	O
if	O
(	O
(	O
i	int
>=	O
index_nodenames	pointer
[	O
j	int
]	O
->	O
first	int
)	O
&&	O
(	O
i	int
<=	O
index_nodenames	pointer
[	O
j	int
]	O
->	O
last	int
)	O
)	O
{	O
name	pointer
=	O
index_nodenames	pointer
[	O
j	int
]	O
->	O
name	pointer
;	O
break	O
;	O
}	O
}	O
match	pointer
=	O
xstrdup	function
(	O
index_index	pointer
[	O
i	int
]	O
->	O
label	pointer
)	O
;	O
if	O
(	O
match_offset	pointer
>	O
0	int
&&	O
show_index_match	int
)	O
{	O
int	O
k	int
,	O
ls	int
,	O
start	int
,	O
upper	int
;	O
ls	int
=	O
strlen	function
(	O
index_search	pointer
)	O
;	O
start	int
=	O
match_offset	pointer
-	O
ls	int
;	O
upper	int
=	O
isupper	function
(	O
match	pointer
[	O
start	int
]	O
)	O
?	O
1	int
:	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
ls	int
;	O
k	int
++	O
)	O
if	O
(	O
upper	int
)	O
match	pointer
[	O
k	int
+	O
start	int
]	O
=	O
tolower	function
(	O
match	pointer
[	O
k	int
+	O
start	int
]	O
)	O
;	O
else	O
match	pointer
[	O
k	int
+	O
start	int
]	O
=	O
toupper	function
(	O
match	pointer
[	O
k	int
+	O
start	int
]	O
)	O
;	O
}	O
{	O
char	O
*	O
format	pointer
;	O
format	pointer
=	O
replace_in_documentation	function
(	O
_	O
(	O
"Found '%s' in %s. ('\\[next-index-match]' tries to find next.)"	pointer
)	O
,	O
0	int
)	O
;	O
window_message_in_echo_area	function
(	O
format	pointer
,	O
match	pointer
,	O
(	O
char	O
*	O
)	O
name	pointer
)	O
;	O
}	O
free	function
(	O
match	pointer
)	O
;	O
}	O
DECLARE_INFO_COMMAND	O
(	O
info_next_index_match	function
,	O
_	O
(	O
"Go to the next matching index item from the last '\\[index-search]' command"	pointer
)	O
)	O
{	O
int	O
i	int
;	O
int	O
match_offset	pointer
;	O
int	O
dir	int
;	O
REFERENCE	struct
*	O
result	pointer
;	O
if	O
(	O
!	O
index_search	pointer
)	O
{	O
info_error	function
(	O
_	O
(	O
"No previous index search string"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
count	pointer
<	O
0	int
)	O
dir	int
=	O
-	O
1	int
;	O
else	O
dir	int
=	O
1	int
;	O
result	pointer
=	O
next_index_match	function
(	O
file_buffer_of_window	function
(	O
window	pointer
)	O
,	O
index_search	pointer
,	O
index_offset	int
,	O
dir	int
,	O
&	O
i	int
,	O
&	O
match_offset	pointer
)	O
;	O
if	O
(	O
!	O
result	pointer
)	O
{	O
info_error	function
(	O
index_offset	int
>	O
0	int
?	O
_	O
(	O
"No more index entries containing '%s'"	pointer
)	O
:	O
_	O
(	O
"No index entries containing '%s'"	pointer
)	O
,	O
index_search	pointer
)	O
;	O
index_offset	int
=	O
0	int
;	O
return	O
;	O
}	O
report_index_match	function
(	O
i	int
,	O
match_offset	pointer
)	O
;	O
info_select_reference	function
(	O
window	pointer
,	O
result	pointer
)	O
;	O
}	O
REFERENCE	struct
*	O
look_in_indices	function
(	O
FILE_BUFFER	struct
*	O
fb	pointer
,	O
char	O
*	O
string	pointer
,	O
int	O
sloppy	int
)	O
{	O
REFERENCE	struct
*	O
*	O
index_ptr	pointer
;	O
REFERENCE	struct
*	O
nearest	pointer
=	O
0	int
;	O
free	function
(	O
index_search	pointer
)	O
;	O
index_search	pointer
=	O
xstrdup	function
(	O
string	pointer
)	O
;	O
info_indices_of_file_buffer	function
(	O
fb	pointer
)	O
;	O
if	O
(	O
!	O
index_index	pointer
)	O
return	O
0	int
;	O
for	O
(	O
index_ptr	pointer
=	O
index_index	pointer
;	O
*	O
index_ptr	pointer
;	O
index_ptr	pointer
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
string	pointer
,	O
(	O
*	O
index_ptr	pointer
)	O
->	O
label	pointer
)	O
)	O
{	O
nearest	pointer
=	O
*	O
index_ptr	pointer
;	O
break	O
;	O
}	O
if	O
(	O
sloppy	int
&&	O
!	O
nearest	pointer
&&	O
!	O
mbsncasecmp	function
(	O
string	pointer
,	O
(	O
*	O
index_ptr	pointer
)	O
->	O
label	pointer
,	O
mbslen	function
(	O
string	pointer
)	O
)	O
)	O
{	O
nearest	pointer
=	O
*	O
index_ptr	pointer
;	O
}	O
}	O
return	O
nearest	pointer
;	O
}	O
REFERENCE	struct
*	O
*	O
apropos_in_all_indices	function
(	O
char	O
*	O
search_string	pointer
,	O
int	O
inform	int
)	O
{	O
size_t	long
i	int
,	O
dir_index	long
;	O
REFERENCE	struct
*	O
*	O
all_indices	pointer
=	O
NULL	O
;	O
REFERENCE	struct
*	O
*	O
dir_menu	pointer
=	O
NULL	O
;	O
NODE	struct
*	O
dir_node	pointer
;	O
dir_node	pointer
=	O
get_dir_node	function
(	O
)	O
;	O
if	O
(	O
dir_node	pointer
)	O
dir_menu	pointer
=	O
dir_node	pointer
->	O
references	pointer
;	O
if	O
(	O
!	O
dir_menu	pointer
)	O
{	O
free	function
(	O
dir_node	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
for	O
(	O
dir_index	long
=	O
0	int
;	O
dir_menu	pointer
[	O
dir_index	long
]	O
;	O
dir_index	long
++	O
)	O
{	O
REFERENCE	struct
*	O
*	O
this_index	pointer
,	O
*	O
this_item	pointer
;	O
FILE_BUFFER	struct
*	O
this_fb	pointer
,	O
*	O
loaded_file	pointer
=	O
0	int
;	O
this_item	pointer
=	O
dir_menu	pointer
[	O
dir_index	long
]	O
;	O
if	O
(	O
!	O
this_item	pointer
->	O
filename	pointer
)	O
continue	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dir_index	long
;	O
i	int
++	O
)	O
if	O
(	O
dir_menu	pointer
[	O
i	int
]	O
->	O
filename	pointer
&&	O
FILENAME_CMP	O
(	O
this_item	pointer
->	O
filename	pointer
,	O
dir_menu	pointer
[	O
i	int
]	O
->	O
filename	pointer
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
i	int
<	O
dir_index	long
)	O
continue	O
;	O
this_fb	pointer
=	O
check_loaded_file	function
(	O
this_item	pointer
->	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
this_fb	pointer
)	O
this_fb	pointer
=	O
loaded_file	pointer
=	O
info_find_file	function
(	O
this_item	pointer
->	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
this_fb	pointer
)	O
continue	O
;	O
if	O
(	O
this_fb	pointer
&&	O
inform	int
)	O
message_in_echo_area	function
(	O
_	O
(	O
"Scanning indices of '%s'..."	pointer
)	O
,	O
this_item	pointer
->	O
filename	pointer
)	O
;	O
info_indices_of_file_buffer	function
(	O
this_fb	pointer
)	O
;	O
this_index	pointer
=	O
index_index	pointer
;	O
if	O
(	O
this_fb	pointer
&&	O
inform	int
)	O
unmessage_in_echo_area	function
(	O
)	O
;	O
if	O
(	O
this_index	pointer
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
this_index	pointer
&&	O
this_index	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
this_index	pointer
[	O
i	int
]	O
->	O
filename	pointer
)	O
this_index	pointer
[	O
i	int
]	O
->	O
filename	pointer
=	O
xstrdup	function
(	O
this_fb	pointer
->	O
filename	pointer
)	O
;	O
{	O
REFERENCE	struct
*	O
*	O
old_indices	pointer
=	O
all_indices	pointer
;	O
all_indices	pointer
=	O
info_concatenate_references	function
(	O
all_indices	pointer
,	O
this_index	pointer
)	O
;	O
free	function
(	O
old_indices	pointer
)	O
;	O
}	O
}	O
if	O
(	O
loaded_file	pointer
)	O
{	O
free	function
(	O
loaded_file	pointer
->	O
contents	pointer
)	O
;	O
loaded_file	pointer
->	O
contents	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
all_indices	pointer
)	O
{	O
REFERENCE	struct
*	O
entry	pointer
,	O
*	O
*	O
apropos_list	pointer
=	O
NULL	O
;	O
size_t	long
apropos_list_index	long
=	O
0	int
;	O
size_t	long
apropos_list_slots	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
entry	pointer
=	O
all_indices	pointer
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
string_in_line	function
(	O
search_string	pointer
,	O
entry	pointer
->	O
label	pointer
)	O
!=	O
-	O
1	int
)	O
{	O
add_pointer_to_array	O
(	O
entry	pointer
,	O
apropos_list_index	long
,	O
apropos_list	pointer
,	O
apropos_list_slots	long
,	O
100	int
)	O
;	O
}	O
}	O
free	function
(	O
all_indices	pointer
)	O
;	O
all_indices	pointer
=	O
apropos_list	pointer
;	O
}	O
free	function
(	O
dir_node	pointer
)	O
;	O
return	O
all_indices	pointer
;	O
}	O
static	O
char	O
*	O
apropos_list_nodename	pointer
=	O
"*Apropos*"	pointer
;	O
DECLARE_INFO_COMMAND	O
(	O
info_index_apropos	function
,	O
_	O
(	O
"Grovel all known info file's indices for a string and build a menu"	pointer
)	O
)	O
{	O
char	O
*	O
line	pointer
,	O
*	O
prompt	pointer
;	O
REFERENCE	struct
*	O
*	O
apropos_list	pointer
;	O
NODE	struct
*	O
apropos_node	pointer
;	O
struct	O
text_buffer	struct
message	pointer
;	O
if	O
(	O
index_search	pointer
)	O
asprintf	function
(	O
&	O
prompt	pointer
,	O
"%s [%s]: "	pointer
,	O
_	O
(	O
"Index apropos"	pointer
)	O
,	O
index_search	pointer
)	O
;	O
else	O
asprintf	function
(	O
&	O
prompt	pointer
,	O
"%s: "	pointer
,	O
_	O
(	O
"Index apropos"	pointer
)	O
)	O
;	O
line	pointer
=	O
info_read_in_echo_area	function
(	O
prompt	pointer
)	O
;	O
free	function
(	O
prompt	pointer
)	O
;	O
window	pointer
=	O
active_window	pointer
;	O
if	O
(	O
!	O
line	pointer
)	O
{	O
info_abort_key	function
(	O
window	pointer
,	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
line	pointer
)	O
{	O
free	function
(	O
index_search	pointer
)	O
;	O
index_search	pointer
=	O
line	pointer
;	O
}	O
else	O
free	function
(	O
line	pointer
)	O
;	O
if	O
(	O
index_search	pointer
&&	O
*	O
index_search	pointer
)	O
{	O
apropos_list	pointer
=	O
apropos_in_all_indices	function
(	O
index_search	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
apropos_list	pointer
)	O
{	O
info_error	function
(	O
_	O
(	O
APROPOS_NONE	O
)	O
,	O
index_search	pointer
)	O
;	O
return	O
;	O
}	O
else	O
{	O
register	O
int	O
i	int
;	O
text_buffer_init	function
(	O
&	O
message	pointer
)	O
;	O
text_buffer_add_char	function
(	O
&	O
message	pointer
,	O
'\n'	O
)	O
;	O
text_buffer_printf	function
(	O
&	O
message	pointer
,	O
_	O
(	O
"Index entries containing "	pointer
"'%s':\n"	pointer
)	O
,	O
index_search	pointer
)	O
;	O
text_buffer_printf	function
(	O
&	O
message	pointer
,	O
"\n* Menu:"	pointer
)	O
;	O
text_buffer_add_string	function
(	O
&	O
message	pointer
,	O
"\0\b[index\0\b]"	pointer
,	O
11	int
)	O
;	O
text_buffer_add_char	function
(	O
&	O
message	pointer
,	O
'\n'	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
apropos_list	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
int	O
line_start	int
=	O
text_buffer_off	O
(	O
&	O
message	pointer
)	O
;	O
char	O
*	O
filename	pointer
;	O
filename	pointer
=	O
program_name_from_file_name	function
(	O
apropos_list	pointer
[	O
i	int
]	O
->	O
filename	pointer
)	O
;	O
text_buffer_printf	function
(	O
&	O
message	pointer
,	O
"* %s [%s]: "	pointer
,	O
apropos_list	pointer
[	O
i	int
]	O
->	O
label	pointer
,	O
filename	pointer
)	O
;	O
while	O
(	O
text_buffer_off	O
(	O
&	O
message	pointer
)	O
-	O
line_start	int
<	O
40	int
)	O
text_buffer_add_char	function
(	O
&	O
message	pointer
,	O
' '	O
)	O
;	O
text_buffer_printf	function
(	O
&	O
message	pointer
,	O
"(%s)%s."	pointer
,	O
filename	pointer
,	O
apropos_list	pointer
[	O
i	int
]	O
->	O
nodename	pointer
)	O
;	O
text_buffer_printf	function
(	O
&	O
message	pointer
,	O
" (line %ld)\n"	pointer
,	O
apropos_list	pointer
[	O
i	int
]	O
->	O
line_number	long
)	O
;	O
free	function
(	O
filename	pointer
)	O
;	O
}	O
}	O
apropos_node	pointer
=	O
text_buffer_to_node	function
(	O
&	O
message	pointer
)	O
;	O
{	O
char	O
*	O
old_contents	pointer
=	O
apropos_node	pointer
->	O
contents	pointer
;	O
scan_node_contents	function
(	O
apropos_node	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
old_contents	pointer
!=	O
apropos_node	pointer
->	O
contents	pointer
)	O
free	function
(	O
old_contents	pointer
)	O
;	O
}	O
name_internal_node	function
(	O
apropos_node	pointer
,	O
xstrdup	function
(	O
apropos_list_nodename	pointer
)	O
)	O
;	O
{	O
WINDOW	struct
*	O
new	pointer
;	O
NODE	struct
*	O
node	pointer
;	O
for	O
(	O
new	pointer
=	O
windows	pointer
;	O
new	pointer
;	O
new	pointer
=	O
new	pointer
->	O
next	pointer
)	O
{	O
node	pointer
=	O
new	pointer
->	O
node	pointer
;	O
if	O
(	O
internal_info_node_p	function
(	O
node	pointer
)	O
&&	O
(	O
strcmp	function
(	O
node	pointer
->	O
nodename	pointer
,	O
apropos_list_nodename	pointer
)	O
==	O
0	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
new	pointer
&&	O
window	pointer
->	O
next	pointer
)	O
new	pointer
=	O
window	pointer
->	O
next	pointer
;	O
if	O
(	O
!	O
new	pointer
)	O
new	pointer
=	O
window_make_window	function
(	O
)	O
;	O
if	O
(	O
!	O
new	pointer
)	O
new	pointer
=	O
window	pointer
;	O
new	pointer
->	O
flags	int
|=	O
W_NoWrap	int
;	O
info_set_node_of_window	function
(	O
new	pointer
,	O
apropos_node	pointer
)	O
;	O
active_window	pointer
=	O
new	pointer
;	O
}	O
free	function
(	O
apropos_list	pointer
)	O
;	O
}	O
}	O
static	O
void	O
format_reference	function
(	O
REFERENCE	struct
*	O
ref	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
struct	O
text_buffer	struct
*	O
buf	array
)	O
{	O
size_t	long
n	long
;	O
n	long
=	O
text_buffer_printf	function
(	O
buf	array
,	O
"* %s: "	pointer
,	O
ref	pointer
->	O
label	pointer
)	O
;	O
if	O
(	O
n	long
<	O
NODECOL	int
)	O
n	long
+=	O
text_buffer_fill	function
(	O
buf	array
,	O
' '	O
,	O
NODECOL	int
-	O
n	long
)	O
;	O
if	O
(	O
ref	pointer
->	O
filename	pointer
&&	O
strcmp	function
(	O
ref	pointer
->	O
filename	pointer
,	O
filename	pointer
)	O
)	O
n	long
+=	O
text_buffer_printf	function
(	O
buf	array
,	O
"(%s)"	pointer
,	O
ref	pointer
->	O
filename	pointer
)	O
;	O
n	long
+=	O
text_buffer_printf	function
(	O
buf	array
,	O
"%s. "	pointer
,	O
ref	pointer
->	O
nodename	pointer
)	O
;	O
if	O
(	O
n	long
<	O
LINECOL	int
)	O
n	long
+=	O
text_buffer_fill	function
(	O
buf	array
,	O
' '	O
,	O
LINECOL	int
-	O
n	long
)	O
;	O
else	O
{	O
text_buffer_add_char	function
(	O
buf	array
,	O
'\n'	O
)	O
;	O
text_buffer_fill	function
(	O
buf	array
,	O
' '	O
,	O
LINECOL	int
)	O
;	O
}	O
text_buffer_printf	function
(	O
buf	array
,	O
"(line %4d)\n"	pointer
,	O
ref	pointer
->	O
line_number	long
)	O
;	O
}	O
NODE	struct
*	O
create_virtual_index	function
(	O
FILE_BUFFER	struct
*	O
file_buffer	pointer
,	O
char	O
*	O
index_search	pointer
)	O
{	O
struct	O
text_buffer	struct
text	struct
;	O
int	O
i	int
;	O
size_t	long
cnt	long
;	O
NODE	struct
*	O
node	pointer
;	O
text_buffer_init	function
(	O
&	O
text	struct
)	O
;	O
text_buffer_printf	function
(	O
&	O
text	struct
,	O
"File: %s,  Node: Index for '%s'\n\n"	pointer
,	O
file_buffer	pointer
->	O
filename	pointer
,	O
index_search	pointer
)	O
;	O
text_buffer_printf	function
(	O
&	O
text	struct
,	O
_	O
(	O
"Virtual Index\n"	pointer
"*************\n\n"	pointer
"Index entries that match '%s':\n"	pointer
)	O
,	O
index_search	pointer
)	O
;	O
text_buffer_add_string	function
(	O
&	O
text	struct
,	O
"\0\b[index\0\b]"	pointer
,	O
11	int
)	O
;	O
text_buffer_printf	function
(	O
&	O
text	struct
,	O
"\n* Menu:\n\n"	pointer
)	O
;	O
cnt	long
=	O
0	int
;	O
index_offset	int
=	O
0	int
;	O
index_initial	int
=	O
0	int
;	O
index_partial	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
REFERENCE	struct
*	O
result	pointer
;	O
int	O
match_offset	pointer
;	O
result	pointer
=	O
next_index_match	function
(	O
file_buffer	pointer
,	O
index_search	pointer
,	O
index_offset	int
,	O
1	int
,	O
&	O
i	int
,	O
&	O
match_offset	pointer
)	O
;	O
if	O
(	O
!	O
result	pointer
)	O
break	O
;	O
format_reference	function
(	O
index_index	pointer
[	O
i	int
]	O
,	O
file_buffer	pointer
->	O
filename	pointer
,	O
&	O
text	struct
)	O
;	O
cnt	long
++	O
;	O
}	O
text_buffer_add_char	function
(	O
&	O
text	struct
,	O
'\0'	O
)	O
;	O
if	O
(	O
cnt	long
==	O
0	int
)	O
{	O
text_buffer_free	function
(	O
&	O
text	struct
)	O
;	O
return	O
0	int
;	O
}	O
node	pointer
=	O
info_create_node	function
(	O
)	O
;	O
asprintf	function
(	O
&	O
node	pointer
->	O
nodename	pointer
,	O
"Index for '%s'"	pointer
,	O
index_search	pointer
)	O
;	O
node	pointer
->	O
fullpath	pointer
=	O
file_buffer	pointer
->	O
filename	pointer
;	O
node	pointer
->	O
contents	pointer
=	O
text_buffer_base	O
(	O
&	O
text	struct
)	O
;	O
node	pointer
->	O
nodelen	long
=	O
text_buffer_off	O
(	O
&	O
text	struct
)	O
-	O
1	int
;	O
node	pointer
->	O
body_start	long
=	O
strcspn	function
(	O
node	pointer
->	O
contents	pointer
,	O
"\n"	pointer
)	O
;	O
node	pointer
->	O
flags	int
|=	O
N_IsInternal	int
|	O
N_WasRewritten	int
;	O
scan_node_contents	function
(	O
node	pointer
,	O
0	int
,	O
0	int
)	O
;	O
return	O
node	pointer
;	O
}	O
DECLARE_INFO_COMMAND	O
(	O
info_virtual_index	function
,	O
_	O
(	O
"List all matches of a string in the index"	pointer
)	O
)	O
{	O
char	O
*	O
prompt	pointer
,	O
*	O
line	pointer
;	O
FILE_BUFFER	struct
*	O
fb	pointer
;	O
NODE	struct
*	O
node	pointer
;	O
fb	pointer
=	O
file_buffer_of_window	function
(	O
window	pointer
)	O
;	O
if	O
(	O
!	O
initial_index_filename	pointer
||	O
!	O
fb	pointer
||	O
(	O
FILENAME_CMP	O
(	O
initial_index_filename	pointer
,	O
fb	pointer
->	O
filename	pointer
)	O
!=	O
0	int
)	O
)	O
{	O
window_message_in_echo_area	function
(	O
_	O
(	O
"Finding index entries..."	pointer
)	O
)	O
;	O
info_indices_of_file_buffer	function
(	O
fb	pointer
)	O
;	O
}	O
if	O
(	O
!	O
index_index	pointer
)	O
{	O
info_error	function
(	O
_	O
(	O
"No indices found."	pointer
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
index_search	pointer
)	O
asprintf	function
(	O
&	O
prompt	pointer
,	O
"%s [%s]: "	pointer
,	O
_	O
(	O
"Index topic"	pointer
)	O
,	O
index_search	pointer
)	O
;	O
else	O
asprintf	function
(	O
&	O
prompt	pointer
,	O
"%s: "	pointer
,	O
_	O
(	O
"Index topic"	pointer
)	O
)	O
;	O
line	pointer
=	O
info_read_maybe_completing	function
(	O
prompt	pointer
,	O
index_index	pointer
)	O
;	O
free	function
(	O
prompt	pointer
)	O
;	O
if	O
(	O
!	O
line	pointer
)	O
{	O
info_abort_key	function
(	O
window	pointer
,	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
line	pointer
)	O
{	O
free	function
(	O
index_search	pointer
)	O
;	O
index_search	pointer
=	O
line	pointer
;	O
}	O
else	O
if	O
(	O
!	O
index_search	pointer
)	O
{	O
free	function
(	O
line	pointer
)	O
;	O
return	O
;	O
}	O
node	pointer
=	O
create_virtual_index	function
(	O
fb	pointer
,	O
index_search	pointer
)	O
;	O
if	O
(	O
!	O
node	pointer
)	O
{	O
info_error	function
(	O
_	O
(	O
"No index entries containing '%s'."	pointer
)	O
,	O
index_search	pointer
)	O
;	O
return	O
;	O
}	O
info_set_node_of_window	function
(	O
window	pointer
,	O
node	pointer
)	O
;	O
}	O
