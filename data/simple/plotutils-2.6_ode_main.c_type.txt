struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"input-file"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"precision"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"adams-moulton"	pointer
,	O
ARG_OPTIONAL	int
,	O
NULL	O
,	O
'A'	O
}	O
,	O
{	O
"euler"	pointer
,	O
ARG_OPTIONAL	int
,	O
NULL	O
,	O
'E'	O
}	O
,	O
{	O
"runge-kutta"	pointer
,	O
ARG_OPTIONAL	int
,	O
NULL	O
,	O
'R'	O
}	O
,	O
{	O
"absolute-error-bound"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"step-size-bound"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"relative-error-bound"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'r'	O
}	O
,	O
{	O
"suppress-error-bound"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"title"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
't'	O
}	O
,	O
{	O
"version"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'V'	O
<<	O
8	int
}	O
,	O
{	O
"help"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'h'	O
<<	O
8	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
int	O
hidden_options	array
[	O
]	O
=	O
{	O
0	int
}	O
;	O
static	O
void	O
fatal	function
(	O
const	O
char	O
*	O
s	pointer
)	O
;	O
static	O
void	O
fatal	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s\n"	pointer
,	O
progname	pointer
,	O
s	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
option	struct
;	O
int	O
opt_index	int
;	O
int	O
errcnt	int
=	O
0	int
;	O
bool	enum
show_version	enum
=	O
false	int
;	O
bool	enum
show_usage	enum
=	O
false	int
;	O
double	O
local_tstep	double
,	O
local_hmax	double
;	O
FILE	struct
*	O
infile	pointer
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
option	struct
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"e:f:h:p:r:stA::E::R::V"	pointer
,	O
long_options	array
,	O
&	O
opt_index	int
)	O
;	O
if	O
(	O
option	struct
==	O
0	int
)	O
option	struct
=	O
long_options	array
[	O
opt_index	int
]	O
.	O
val	int
;	O
switch	O
(	O
option	struct
)	O
{	O
case	O
's'	O
:	O
sflag	enum
=	O
true	int
;	O
break	O
;	O
case	O
't'	O
:	O
tflag	enum
=	O
true	int
;	O
if	O
(	O
!	O
pflag	enum
)	O
{	O
prec	int
=	O
6	int
;	O
fwd	int
=	O
13	int
;	O
}	O
break	O
;	O
case	O
'V'	O
<<	O
8	int
:	O
show_version	enum
=	O
true	int
;	O
break	O
;	O
case	O
'h'	O
<<	O
8	int
:	O
show_usage	enum
=	O
true	int
;	O
break	O
;	O
case	O
'f'	O
:	O
filename	pointer
=	O
xstrdup	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'p'	O
:	O
pflag	enum
=	O
true	int
;	O
if	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%d"	pointer
,	O
&	O
prec	int
)	O
<=	O
0	int
)	O
fatal	function
(	O
"-p: bad argument"	pointer
)	O
;	O
prec	int
--	O
;	O
if	O
(	O
prec	int
<=	O
0	int
||	O
prec	int
>	O
18	int
)	O
fatal	function
(	O
"-p: argument must be in the range 2..19"	pointer
)	O
;	O
fwd	int
=	O
prec	int
+	O
7	int
;	O
if	O
(	O
fwd	int
<	O
9	int
)	O
fwd	int
=	O
9	int
;	O
break	O
;	O
case	O
'A'	O
:	O
algorithm	enum
=	O
A_ADAMS_MOULTON	int
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"%lf"	pointer
,	O
&	O
local_tstep	double
)	O
<=	O
0	int
)	O
break	O
;	O
tstep	double
=	O
local_tstep	double
;	O
optind	int
++	O
;	O
conflag	enum
=	O
true	int
;	O
break	O
;	O
case	O
'E'	O
:	O
algorithm	enum
=	O
A_EULER	int
;	O
conflag	enum
=	O
true	int
;	O
tstep	double
=	O
0.1	int
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"%lf"	pointer
,	O
&	O
local_tstep	double
)	O
<=	O
0	int
)	O
break	O
;	O
tstep	double
=	O
local_tstep	double
;	O
optind	int
++	O
;	O
break	O
;	O
case	O
'R'	O
:	O
algorithm	enum
=	O
A_RUNGE_KUTTA_FEHLBERG	int
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"%lf"	pointer
,	O
&	O
local_tstep	double
)	O
<=	O
0	int
)	O
break	O
;	O
tstep	double
=	O
local_tstep	double
;	O
optind	int
++	O
;	O
conflag	enum
=	O
true	int
;	O
break	O
;	O
case	O
'h'	O
:	O
if	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%lf"	pointer
,	O
&	O
hmin	double
)	O
<=	O
0	int
)	O
fatal	function
(	O
"-h: bad argument"	pointer
)	O
;	O
if	O
(	O
hmin	double
<	O
HMIN	O
)	O
fatal	function
(	O
"-h: value too small"	pointer
)	O
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"%lf"	pointer
,	O
&	O
local_hmax	double
)	O
<=	O
0	int
)	O
break	O
;	O
hmax	double
=	O
local_hmax	double
;	O
optind	int
++	O
;	O
hflag	enum
=	O
true	int
;	O
break	O
;	O
case	O
'r'	O
:	O
rflag	enum
=	O
true	int
;	O
if	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%lf"	pointer
,	O
&	O
ssmax	double
)	O
<=	O
0	int
)	O
fatal	function
(	O
"-r: bad argument"	pointer
)	O
;	O
if	O
(	O
ssmax	double
<	O
HMIN	O
)	O
fatal	function
(	O
"-r: max value too small"	pointer
)	O
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"%lf"	pointer
,	O
&	O
ssmin	double
)	O
<=	O
0	int
)	O
{	O
ssmin	double
=	O
ssmax	double
*	O
SCALE	O
;	O
break	O
;	O
}	O
optind	int
++	O
;	O
break	O
;	O
case	O
'e'	O
:	O
eflag	enum
=	O
true	int
;	O
if	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%lf"	pointer
,	O
&	O
abmax	double
)	O
<=	O
0	int
)	O
fatal	function
(	O
"-e: bad argument"	pointer
)	O
;	O
if	O
(	O
abmax	double
<	O
HMIN	O
)	O
fatal	function
(	O
"-e: max value too small"	pointer
)	O
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"%lf"	pointer
,	O
&	O
abmin	double
)	O
<=	O
0	int
)	O
{	O
abmin	double
=	O
abmax	double
*	O
SCALE	O
;	O
break	O
;	O
}	O
optind	int
++	O
;	O
break	O
;	O
default	O
:	O
errcnt	int
++	O
;	O
break	O
;	O
}	O
if	O
(	O
(	O
option	struct
==	O
EOF	O
)	O
)	O
{	O
errcnt	int
--	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: there are too many arguments\n"	pointer
,	O
progname	pointer
)	O
;	O
errcnt	int
++	O
;	O
}	O
if	O
(	O
errcnt	int
>	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Try `%s --help' for more information\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
show_version	enum
)	O
{	O
display_version	function
(	O
progname	pointer
,	O
written	pointer
,	O
copyright	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
show_usage	enum
)	O
{	O
display_usage	function
(	O
progname	pointer
,	O
hidden_options	array
,	O
NULL	O
,	O
0	int
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
algorithm	enum
==	O
A_EULER	int
&&	O
(	O
eflag	enum
||	O
rflag	enum
)	O
)	O
fatal	function
(	O
"-E [Euler] illegal with -e or -r"	pointer
)	O
;	O
if	O
(	O
filename	pointer
!=	O
NULL	O
)	O
{	O
infile	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
infile	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: %s\n"	pointer
,	O
progname	pointer
,	O
filename	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
yyin	pointer
=	O
infile	pointer
;	O
}	O
else	O
{	O
yyin	pointer
=	O
stdin	pointer
;	O
filename	pointer
=	O
""	pointer
;	O
}	O
yyparse	function
(	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
