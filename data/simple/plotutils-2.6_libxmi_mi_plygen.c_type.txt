void	O
miFillGeneralPoly	O
(	O
miPaintedSet	struct
*	O
paintedSet	pointer
,	O
const	O
miGC	struct
*	O
pGC	pointer
,	O
int	O
count	int
,	O
const	O
miPoint	struct
*	O
ptsIn	pointer
)	O
{	O
EdgeTableEntry	struct
*	O
pAET	pointer
;	O
int	O
y	int
;	O
int	O
nPts	int
=	O
0	int
;	O
EdgeTableEntry	struct
*	O
pWETE	pointer
;	O
ScanLineList	struct
*	O
pSLL	pointer
;	O
miPoint	struct
*	O
ptsOut	pointer
;	O
unsigned	O
int	O
*	O
width	int
;	O
miPoint	struct
FirstPoint	array
[	O
NUMPTSTOBUFFER	int
]	O
;	O
unsigned	O
int	O
FirstWidth	array
[	O
NUMPTSTOBUFFER	int
]	O
;	O
EdgeTableEntry	struct
*	O
pPrevAET	pointer
;	O
EdgeTable	struct
ET	pointer
;	O
EdgeTableEntry	struct
AET	pointer
;	O
EdgeTableEntry	struct
*	O
pETEs	pointer
;	O
ScanLineListBlock	struct
SLLBlock	struct
;	O
bool	enum
fixWAET	enum
=	O
false	int
;	O
if	O
(	O
count	int
<=	O
2	int
)	O
return	O
;	O
pETEs	pointer
=	O
(	O
EdgeTableEntry	struct
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
EdgeTableEntry	struct
)	O
*	O
count	int
)	O
;	O
ptsOut	pointer
=	O
FirstPoint	array
;	O
width	int
=	O
FirstWidth	array
;	O
miCreateETandAET	O
(	O
count	int
,	O
ptsIn	pointer
,	O
&	O
ET	pointer
,	O
&	O
AET	pointer
,	O
pETEs	pointer
,	O
&	O
SLLBlock	struct
)	O
;	O
pSLL	pointer
=	O
ET	pointer
.	O
scanlines	struct
.	O
next	pointer
;	O
if	O
(	O
pGC	pointer
->	O
fillRule	int
==	O
(	O
int	O
)	O
MI_EVEN_ODD_RULE	int
)	O
{	O
for	O
(	O
y	int
=	O
ET	pointer
.	O
ymin	int
;	O
y	int
<	O
ET	pointer
.	O
ymax	int
;	O
y	int
++	O
)	O
{	O
if	O
(	O
pSLL	pointer
&&	O
y	int
==	O
pSLL	pointer
->	O
scanline	int
)	O
{	O
miloadAET	O
(	O
&	O
AET	pointer
,	O
pSLL	pointer
->	O
edgelist	pointer
)	O
;	O
pSLL	pointer
=	O
pSLL	pointer
->	O
next	pointer
;	O
}	O
pPrevAET	pointer
=	O
&	O
AET	pointer
;	O
pAET	pointer
=	O
AET	pointer
.	O
next	pointer
;	O
while	O
(	O
pAET	pointer
)	O
{	O
ptsOut	pointer
->	O
x	int
=	O
pAET	pointer
->	O
bres	struct
.	O
minor_axis	int
;	O
ptsOut	pointer
++	O
->	O
y	int
=	O
y	int
;	O
*	O
width	int
++	O
=	O
(	O
unsigned	O
int	O
)	O
(	O
pAET	pointer
->	O
next	pointer
->	O
bres	struct
.	O
minor_axis	int
-	O
pAET	pointer
->	O
bres	struct
.	O
minor_axis	int
)	O
;	O
nPts	int
++	O
;	O
if	O
(	O
nPts	int
==	O
NUMPTSTOBUFFER	int
)	O
{	O
MI_COPY_AND_PAINT_SPANS	O
(	O
paintedSet	pointer
,	O
pGC	pointer
->	O
pixels	pointer
[	O
1	int
]	O
,	O
nPts	int
,	O
FirstPoint	array
,	O
FirstWidth	array
)	O
ptsOut	pointer
=	O
FirstPoint	array
;	O
width	int
=	O
FirstWidth	array
;	O
nPts	int
=	O
0	int
;	O
}	O
EVALUATEEDGEEVENODD	O
(	O
pAET	pointer
,	O
pPrevAET	pointer
,	O
y	int
)	O
EVALUATEEDGEEVENODD	O
(	O
pAET	pointer
,	O
pPrevAET	pointer
,	O
y	int
)	O
;	O
}	O
miInsertionSort	O
(	O
&	O
AET	pointer
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
y	int
=	O
ET	pointer
.	O
ymin	int
;	O
y	int
<	O
ET	pointer
.	O
ymax	int
;	O
y	int
++	O
)	O
{	O
if	O
(	O
pSLL	pointer
&&	O
y	int
==	O
pSLL	pointer
->	O
scanline	int
)	O
{	O
miloadAET	O
(	O
&	O
AET	pointer
,	O
pSLL	pointer
->	O
edgelist	pointer
)	O
;	O
micomputeWAET	O
(	O
&	O
AET	pointer
)	O
;	O
pSLL	pointer
=	O
pSLL	pointer
->	O
next	pointer
;	O
}	O
pPrevAET	pointer
=	O
&	O
AET	pointer
;	O
pAET	pointer
=	O
AET	pointer
.	O
next	pointer
;	O
pWETE	pointer
=	O
pAET	pointer
;	O
while	O
(	O
pAET	pointer
)	O
{	O
if	O
(	O
pWETE	pointer
==	O
pAET	pointer
)	O
{	O
ptsOut	pointer
->	O
x	int
=	O
pAET	pointer
->	O
bres	struct
.	O
minor_axis	int
;	O
ptsOut	pointer
++	O
->	O
y	int
=	O
y	int
;	O
*	O
width	int
++	O
=	O
(	O
unsigned	O
int	O
)	O
(	O
pAET	pointer
->	O
nextWETE	pointer
->	O
bres	struct
.	O
minor_axis	int
-	O
pAET	pointer
->	O
bres	struct
.	O
minor_axis	int
)	O
;	O
nPts	int
++	O
;	O
if	O
(	O
nPts	int
==	O
NUMPTSTOBUFFER	int
)	O
{	O
MI_COPY_AND_PAINT_SPANS	O
(	O
paintedSet	pointer
,	O
pGC	pointer
->	O
pixels	pointer
[	O
1	int
]	O
,	O
nPts	int
,	O
FirstPoint	array
,	O
FirstWidth	array
)	O
ptsOut	pointer
=	O
FirstPoint	array
;	O
width	int
=	O
FirstWidth	array
;	O
nPts	int
=	O
0	int
;	O
}	O
pWETE	pointer
=	O
pWETE	pointer
->	O
nextWETE	pointer
;	O
while	O
(	O
pWETE	pointer
!=	O
pAET	pointer
)	O
EVALUATEEDGEWINDING	O
(	O
pAET	pointer
,	O
pPrevAET	pointer
,	O
y	int
,	O
fixWAET	enum
)	O
;	O
pWETE	pointer
=	O
pWETE	pointer
->	O
nextWETE	pointer
;	O
}	O
EVALUATEEDGEWINDING	O
(	O
pAET	pointer
,	O
pPrevAET	pointer
,	O
y	int
,	O
fixWAET	enum
)	O
;	O
}	O
if	O
(	O
miInsertionSort	O
(	O
&	O
AET	pointer
)	O
||	O
fixWAET	enum
)	O
{	O
micomputeWAET	O
(	O
&	O
AET	pointer
)	O
;	O
fixWAET	enum
=	O
false	int
;	O
}	O
}	O
}	O
MI_COPY_AND_PAINT_SPANS	O
(	O
paintedSet	pointer
,	O
pGC	pointer
->	O
pixels	pointer
[	O
1	int
]	O
,	O
nPts	int
,	O
FirstPoint	array
,	O
FirstWidth	array
)	O
free	function
(	O
pETEs	pointer
)	O
;	O
miFreeStorage	O
(	O
SLLBlock	struct
.	O
next	pointer
)	O
;	O
}	O
