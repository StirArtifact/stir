int	O
gsl_sf_bessel_Jnupos_e	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
if	O
(	O
nu	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
*	O
x	double
<	O
10.0	int
*	O
(	O
nu	double
+	O
1.0	int
)	O
)	O
{	O
return	O
gsl_sf_bessel_IJ_taylor_e	function
(	O
nu	double
,	O
x	double
,	O
-	O
1	int
,	O
100	int
,	O
GSL_DBL_EPSILON	int
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
nu	double
>	O
50.0	int
)	O
{	O
return	O
gsl_sf_bessel_Jnu_asymp_Olver_e	function
(	O
nu	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
1000.0	int
)	O
{	O
return	O
gsl_sf_bessel_Jnu_asympx_e	function
(	O
nu	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
int	O
N	int
=	O
(	O
int	O
)	O
(	O
nu	double
+	O
0.5	int
)	O
;	O
double	O
mu	double
=	O
nu	double
-	O
N	int
;	O
double	O
Jnup1_Jnu	double
;	O
double	O
sgn_Jnu	double
;	O
const	O
int	O
stat_CF1	int
=	O
gsl_sf_bessel_J_CF1	function
(	O
nu	double
,	O
x	double
,	O
&	O
Jnup1_Jnu	double
,	O
&	O
sgn_Jnu	double
)	O
;	O
if	O
(	O
x	double
<	O
2.0	int
)	O
{	O
gsl_sf_result	struct
Y_mu	struct
,	O
Y_mup1	struct
;	O
const	O
int	O
stat_mu	int
=	O
gsl_sf_bessel_Y_temme	function
(	O
mu	double
,	O
x	double
,	O
&	O
Y_mu	struct
,	O
&	O
Y_mup1	struct
)	O
;	O
double	O
Ynm1	double
=	O
Y_mu	struct
.	O
val	double
;	O
double	O
Yn	double
=	O
Y_mup1	struct
.	O
val	double
;	O
double	O
Ynp1	double
=	O
0.0	int
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
1	int
;	O
n	int
<	O
N	int
;	O
n	int
++	O
)	O
{	O
Ynp1	double
=	O
2.0	int
*	O
(	O
mu	double
+	O
n	int
)	O
/	O
x	double
*	O
Yn	double
-	O
Ynm1	double
;	O
Ynm1	double
=	O
Yn	double
;	O
Yn	double
=	O
Ynp1	double
;	O
}	O
result	pointer
->	O
val	double
=	O
2.0	int
/	O
(	O
M_PI	int
*	O
x	double
)	O
/	O
(	O
Jnup1_Jnu	double
*	O
Yn	double
-	O
Ynp1	double
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
N	int
+	O
2.0	int
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_mu	int
,	O
stat_CF1	int
)	O
;	O
}	O
else	O
{	O
double	O
Jmu	pointer
;	O
double	O
Jmup1_Jmu	double
;	O
double	O
sgn_Jmu	double
;	O
double	O
Jmuprime_Jmu	double
;	O
double	O
P	pointer
,	O
Q	pointer
;	O
const	O
int	O
stat_CF2	int
=	O
gsl_sf_bessel_JY_steed_CF2	function
(	O
mu	double
,	O
x	double
,	O
&	O
P	pointer
,	O
&	O
Q	pointer
)	O
;	O
double	O
gamma	function
;	O
double	O
Jnp1	double
=	O
sgn_Jnu	double
*	O
GSL_SQRT_DBL_MIN	int
*	O
Jnup1_Jnu	double
;	O
double	O
Jn	double
=	O
sgn_Jnu	double
*	O
GSL_SQRT_DBL_MIN	int
;	O
double	O
Jnm1	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
N	int
;	O
n	int
>	O
0	int
;	O
n	int
--	O
)	O
{	O
Jnm1	double
=	O
2.0	int
*	O
(	O
mu	double
+	O
n	int
)	O
/	O
x	double
*	O
Jn	double
-	O
Jnp1	double
;	O
Jnp1	double
=	O
Jn	double
;	O
Jn	double
=	O
Jnm1	double
;	O
}	O
Jmup1_Jmu	double
=	O
Jnp1	double
/	O
Jn	double
;	O
sgn_Jmu	double
=	O
GSL_SIGN	O
(	O
Jn	double
)	O
;	O
Jmuprime_Jmu	double
=	O
mu	double
/	O
x	double
-	O
Jmup1_Jmu	double
;	O
gamma	function
=	O
(	O
P	pointer
-	O
Jmuprime_Jmu	double
)	O
/	O
Q	pointer
;	O
Jmu	pointer
=	O
sgn_Jmu	double
*	O
sqrt	function
(	O
2.0	int
/	O
(	O
M_PI	int
*	O
x	double
)	O
/	O
(	O
Q	pointer
+	O
gamma	function
*	O
(	O
P	pointer
-	O
Jmuprime_Jmu	double
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
Jmu	pointer
*	O
(	O
sgn_Jnu	double
*	O
GSL_SQRT_DBL_MIN	int
)	O
/	O
Jn	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
N	int
+	O
2.0	int
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_CF2	int
,	O
stat_CF1	int
)	O
;	O
}	O
}	O
}	O
int	O
gsl_sf_bessel_Jnu_e	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
nu	double
<	O
0.0	int
)	O
{	O
int	O
Jstatus	int
=	O
gsl_sf_bessel_Jnupos_e	function
(	O
-	O
nu	double
,	O
x	double
,	O
result	pointer
)	O
;	O
double	O
Jval	double
=	O
result	pointer
->	O
val	double
;	O
double	O
Jerr	double
=	O
result	pointer
->	O
err	double
;	O
int	O
Ystatus	int
=	O
gsl_sf_bessel_Ynupos_e	function
(	O
-	O
nu	double
,	O
x	double
,	O
result	pointer
)	O
;	O
double	O
Yval	double
=	O
result	pointer
->	O
val	double
;	O
double	O
Yerr	double
=	O
result	pointer
->	O
err	double
;	O
int	O
sinstatus	int
=	O
gsl_sf_sin_pi_e	function
(	O
nu	double
,	O
result	pointer
)	O
;	O
double	O
s	int
=	O
result	pointer
->	O
val	double
;	O
double	O
serr	double
=	O
result	pointer
->	O
err	double
;	O
int	O
cosstatus	int
=	O
gsl_sf_cos_pi_e	function
(	O
nu	double
,	O
result	pointer
)	O
;	O
double	O
c	double
=	O
result	pointer
->	O
val	double
;	O
double	O
cerr	double
=	O
result	pointer
->	O
err	double
;	O
result	pointer
->	O
val	double
=	O
s	int
*	O
Yval	double
+	O
c	double
*	O
Jval	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
c	double
*	O
Yerr	double
)	O
+	O
fabs	function
(	O
s	int
*	O
Jerr	double
)	O
+	O
fabs	function
(	O
cerr	double
*	O
Yval	double
)	O
+	O
fabs	function
(	O
serr	double
*	O
Jval	double
)	O
;	O
return	O
GSL_ERROR_SELECT_4	O
(	O
Jstatus	int
,	O
Ystatus	int
,	O
sinstatus	int
,	O
cosstatus	int
)	O
;	O
}	O
else	O
return	O
gsl_sf_bessel_Jnupos_e	function
(	O
nu	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
double	O
gsl_sf_bessel_Jnu	function
(	O
const	O
double	O
nu	double
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_Jnu_e	function
(	O
nu	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
