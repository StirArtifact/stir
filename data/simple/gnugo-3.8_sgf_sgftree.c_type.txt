void	O
sgftree_clear	function
(	O
SGFTree	struct
*	O
tree	pointer
)	O
{	O
tree	pointer
->	O
root	pointer
=	O
NULL	O
;	O
tree	pointer
->	O
lastnode	pointer
=	O
NULL	O
;	O
}	O
int	O
sgftree_readfile	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
const	O
char	O
*	O
infilename	pointer
)	O
{	O
SGFNode	struct
*	O
savetree	pointer
=	O
tree	pointer
->	O
root	pointer
;	O
tree	pointer
->	O
root	pointer
=	O
readsgffile	function
(	O
infilename	pointer
)	O
;	O
if	O
(	O
tree	pointer
->	O
root	pointer
==	O
NULL	O
)	O
{	O
tree	pointer
->	O
root	pointer
=	O
savetree	pointer
;	O
return	O
0	int
;	O
}	O
sgfFreeNode	function
(	O
savetree	pointer
)	O
;	O
tree	pointer
->	O
lastnode	pointer
=	O
NULL	O
;	O
return	O
1	int
;	O
}	O
int	O
sgftreeBack	function
(	O
SGFTree	struct
*	O
tree	pointer
)	O
{	O
if	O
(	O
tree	pointer
->	O
lastnode	pointer
)	O
{	O
if	O
(	O
tree	pointer
->	O
lastnode	pointer
->	O
parent	pointer
)	O
tree	pointer
->	O
lastnode	pointer
=	O
tree	pointer
->	O
lastnode	pointer
->	O
parent	pointer
;	O
else	O
return	O
0	int
;	O
}	O
else	O
while	O
(	O
sgftreeForward	function
(	O
tree	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
int	O
sgftreeForward	function
(	O
SGFTree	struct
*	O
tree	pointer
)	O
{	O
if	O
(	O
tree	pointer
->	O
lastnode	pointer
)	O
{	O
if	O
(	O
tree	pointer
->	O
lastnode	pointer
->	O
child	pointer
)	O
tree	pointer
->	O
lastnode	pointer
=	O
tree	pointer
->	O
lastnode	pointer
->	O
child	pointer
;	O
else	O
return	O
0	int
;	O
}	O
else	O
tree	pointer
->	O
lastnode	pointer
=	O
tree	pointer
->	O
root	pointer
;	O
return	O
1	int
;	O
}	O
SGFNode	struct
*	O
sgftreeNodeCheck	function
(	O
SGFTree	struct
*	O
tree	pointer
)	O
{	O
SGFNode	struct
*	O
node	pointer
=	O
NULL	O
;	O
assert	O
(	O
tree	pointer
->	O
root	pointer
)	O
;	O
if	O
(	O
tree	pointer
->	O
lastnode	pointer
)	O
node	pointer
=	O
tree	pointer
->	O
lastnode	pointer
;	O
else	O
{	O
node	pointer
=	O
tree	pointer
->	O
root	pointer
;	O
while	O
(	O
node	pointer
->	O
child	pointer
)	O
node	pointer
=	O
node	pointer
->	O
child	pointer
;	O
}	O
return	O
node	pointer
;	O
}	O
void	O
sgftreeAddStone	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
int	O
color	int
,	O
int	O
movex	int
,	O
int	O
movey	int
)	O
{	O
SGFNode	struct
*	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
sgfAddStone	function
(	O
node	pointer
,	O
color	int
,	O
movex	int
,	O
movey	int
)	O
;	O
}	O
void	O
sgftreeAddPlay	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
int	O
color	int
,	O
int	O
movex	int
,	O
int	O
movey	int
)	O
{	O
SGFNode	struct
*	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
tree	pointer
->	O
lastnode	pointer
=	O
sgfAddPlay	function
(	O
node	pointer
,	O
color	int
,	O
movex	int
,	O
movey	int
)	O
;	O
}	O
void	O
sgftreeAddPlayLast	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
int	O
color	int
,	O
int	O
movex	int
,	O
int	O
movey	int
)	O
{	O
SGFNode	struct
*	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
tree	pointer
->	O
lastnode	pointer
=	O
sgfAddPlayLast	function
(	O
node	pointer
,	O
color	int
,	O
movex	int
,	O
movey	int
)	O
;	O
}	O
void	O
sgftreeCreateHeaderNode	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
int	O
boardsize	int
,	O
float	O
komi	float
,	O
int	O
handicap	int
)	O
{	O
SGFNode	struct
*	O
root	pointer
=	O
sgfNewNode	function
(	O
)	O
;	O
sgfAddPropertyInt	function
(	O
root	pointer
,	O
"SZ"	pointer
,	O
boardsize	int
)	O
;	O
sgfAddPropertyFloat	function
(	O
root	pointer
,	O
"KM"	pointer
,	O
komi	float
)	O
;	O
sgfAddPropertyInt	function
(	O
root	pointer
,	O
"HA"	pointer
,	O
handicap	int
)	O
;	O
tree	pointer
->	O
root	pointer
=	O
root	pointer
;	O
tree	pointer
->	O
lastnode	pointer
=	O
root	pointer
;	O
}	O
void	O
sgftreeAddComment	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
const	O
char	O
*	O
comment	pointer
)	O
{	O
SGFNode	struct
*	O
node	pointer
;	O
assert	O
(	O
tree	pointer
&&	O
tree	pointer
->	O
root	pointer
)	O
;	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
sgfAddComment	function
(	O
node	pointer
,	O
comment	pointer
)	O
;	O
}	O
void	O
sgftreeBoardText	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
int	O
i	int
,	O
int	O
j	int
,	O
const	O
char	O
*	O
text	pointer
)	O
{	O
SGFNode	struct
*	O
node	pointer
;	O
assert	O
(	O
tree	pointer
->	O
root	pointer
)	O
;	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
sgfBoardText	function
(	O
node	pointer
,	O
i	int
,	O
j	int
,	O
text	pointer
)	O
;	O
}	O
void	O
sgftreeBoardChar	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
int	O
i	int
,	O
int	O
j	int
,	O
char	O
c	int
)	O
{	O
SGFNode	struct
*	O
node	pointer
;	O
assert	O
(	O
tree	pointer
->	O
root	pointer
)	O
;	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
sgfBoardChar	function
(	O
node	pointer
,	O
i	int
,	O
j	int
,	O
c	int
)	O
;	O
}	O
void	O
sgftreeBoardNumber	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
int	O
i	int
,	O
int	O
j	int
,	O
int	O
number	int
)	O
{	O
SGFNode	struct
*	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
sgfBoardNumber	function
(	O
node	pointer
,	O
i	int
,	O
j	int
,	O
number	int
)	O
;	O
}	O
void	O
sgftreeTriangle	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
int	O
i	int
,	O
int	O
j	int
)	O
{	O
SGFNode	struct
*	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
sgfTriangle	function
(	O
node	pointer
,	O
i	int
,	O
j	int
)	O
;	O
}	O
void	O
sgftreeCircle	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
int	O
i	int
,	O
int	O
j	int
)	O
{	O
SGFNode	struct
*	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
sgfCircle	function
(	O
node	pointer
,	O
i	int
,	O
j	int
)	O
;	O
}	O
void	O
sgftreeSquare	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
int	O
i	int
,	O
int	O
j	int
)	O
{	O
SGFNode	struct
*	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
sgfSquare	function
(	O
node	pointer
,	O
i	int
,	O
j	int
)	O
;	O
}	O
void	O
sgftreeMark	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
int	O
i	int
,	O
int	O
j	int
)	O
{	O
SGFNode	struct
*	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
sgfMark	function
(	O
node	pointer
,	O
i	int
,	O
j	int
)	O
;	O
}	O
void	O
sgftreeStartVariant	function
(	O
SGFTree	struct
*	O
tree	pointer
)	O
{	O
SGFNode	struct
*	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
tree	pointer
->	O
lastnode	pointer
=	O
sgfStartVariant	function
(	O
node	pointer
)	O
;	O
}	O
void	O
sgftreeStartVariantFirst	function
(	O
SGFTree	struct
*	O
tree	pointer
)	O
{	O
SGFNode	struct
*	O
node	pointer
=	O
sgftreeNodeCheck	function
(	O
tree	pointer
)	O
;	O
tree	pointer
->	O
lastnode	pointer
=	O
sgfStartVariantFirst	function
(	O
node	pointer
)	O
;	O
}	O
void	O
sgftreeWriteResult	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
float	O
score	float
,	O
int	O
overwrite	int
)	O
{	O
assert	O
(	O
tree	pointer
->	O
root	pointer
)	O
;	O
sgfWriteResult	function
(	O
tree	pointer
->	O
root	pointer
,	O
score	float
,	O
overwrite	int
)	O
;	O
}	O
void	O
sgftreeSetLastNode	function
(	O
SGFTree	struct
*	O
tree	pointer
,	O
SGFNode	struct
*	O
last_node	pointer
)	O
{	O
tree	pointer
->	O
lastnode	pointer
=	O
last_node	pointer
;	O
}	O
