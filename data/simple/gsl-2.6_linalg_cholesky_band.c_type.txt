static	O
double	O
cholesky_band_norm1	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
)	O
;	O
static	O
int	O
cholesky_band_Ainv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
;	O
int	O
gsl_linalg_cholesky_band_decomp	function
(	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
ndiag	long
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
ndiag	long
>	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"invalid matrix dimensions"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
p	int
=	O
ndiag	long
-	O
1	int
;	O
const	O
int	O
kld	int
=	O
(	O
int	O
)	O
GSL_MAX	O
(	O
1	int
,	O
p	int
)	O
;	O
size_t	long
j	long
;	O
if	O
(	O
ndiag	long
>	O
1	int
)	O
{	O
double	O
Anorm	double
=	O
cholesky_band_norm1	function
(	O
A	pointer
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
N	int
-	O
1	int
,	O
p	int
,	O
Anorm	double
)	O
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
double	O
ajj	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
j	long
,	O
0	int
)	O
;	O
size_t	long
lenv	long
;	O
if	O
(	O
ajj	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix is not positive definite"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
ajj	double
=	O
sqrt	function
(	O
ajj	double
)	O
;	O
gsl_matrix_set	function
(	O
A	pointer
,	O
j	long
,	O
0	int
,	O
ajj	double
)	O
;	O
lenv	long
=	O
GSL_MIN	O
(	O
p	int
,	O
N	int
-	O
j	long
-	O
1	int
)	O
;	O
if	O
(	O
lenv	long
>	O
0	int
)	O
{	O
gsl_vector_view	struct
v	pointer
=	O
gsl_matrix_subrow	function
(	O
A	pointer
,	O
j	long
,	O
1	int
,	O
lenv	long
)	O
;	O
gsl_matrix_view	struct
m	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
j	long
+	O
1	int
,	O
0	int
,	O
lenv	long
,	O
lenv	long
)	O
;	O
gsl_blas_dscal	function
(	O
1.0	int
/	O
ajj	double
,	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
m	pointer
.	O
matrix	struct
.	O
tda	long
=	O
kld	int
;	O
gsl_blas_dsyr	function
(	O
CblasUpper	int
,	O
-	O
1.0	int
,	O
&	O
v	pointer
.	O
vector	struct
,	O
&	O
m	pointer
.	O
matrix	struct
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_band_solve	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
const	O
gsl_vector	struct
*	O
b	double
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_memcpy	function
(	O
x	double
,	O
b	double
)	O
;	O
status	int
=	O
gsl_linalg_cholesky_band_svx	function
(	O
LLT	pointer
,	O
x	double
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_band_svx	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
gsl_vector	struct
*	O
x	double
)	O
{	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
cblas_dtbsv	function
(	O
CblasColMajor	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
(	O
int	O
)	O
LLT	pointer
->	O
size1	long
,	O
(	O
int	O
)	O
(	O
LLT	pointer
->	O
size2	long
-	O
1	int
)	O
,	O
LLT	pointer
->	O
data	pointer
,	O
LLT	pointer
->	O
tda	long
,	O
x	double
->	O
data	pointer
,	O
x	double
->	O
stride	long
)	O
;	O
cblas_dtbsv	function
(	O
CblasColMajor	int
,	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
(	O
int	O
)	O
LLT	pointer
->	O
size1	long
,	O
(	O
int	O
)	O
(	O
LLT	pointer
->	O
size2	long
-	O
1	int
)	O
,	O
LLT	pointer
->	O
data	pointer
,	O
LLT	pointer
->	O
tda	long
,	O
x	double
->	O
data	pointer
,	O
x	double
->	O
stride	long
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_band_invert	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
gsl_matrix	struct
*	O
Ainv	pointer
)	O
{	O
if	O
(	O
Ainv	pointer
->	O
size1	long
!=	O
Ainv	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Ainv must be square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LLT	pointer
->	O
size1	long
!=	O
Ainv	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix has different dimensions from Ainv"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_band_unpack	function
(	O
LLT	pointer
,	O
Ainv	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_invert	function
(	O
Ainv	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_band_unpack	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
gsl_matrix	struct
*	O
L	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
LLT	pointer
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
L	pointer
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"L matrix does not match LLT dimensions"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
L	pointer
->	O
size1	long
!=	O
L	pointer
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"L matrix is not square"	pointer
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
p	int
=	O
LLT	pointer
->	O
size2	long
-	O
1	int
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	int
+	O
1	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_const_view	struct
v	pointer
=	O
gsl_matrix_const_subcolumn	function
(	O
LLT	pointer
,	O
i	long
,	O
0	int
,	O
N	int
-	O
i	long
)	O
;	O
gsl_vector_view	struct
w	pointer
=	O
gsl_matrix_subdiagonal	function
(	O
L	pointer
,	O
i	long
)	O
;	O
gsl_vector_memcpy	function
(	O
&	O
w	pointer
.	O
vector	struct
,	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
}	O
for	O
(	O
i	long
=	O
p	int
+	O
1	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_view	struct
w	pointer
=	O
gsl_matrix_subdiagonal	function
(	O
L	pointer
,	O
i	long
)	O
;	O
gsl_vector_set_zero	function
(	O
&	O
w	pointer
.	O
vector	struct
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_cholesky_band_rcond	function
(	O
const	O
gsl_matrix	struct
*	O
LLT	pointer
,	O
double	O
*	O
rcond	pointer
,	O
gsl_vector	struct
*	O
work	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
LLT	pointer
->	O
size1	long
;	O
if	O
(	O
work	pointer
->	O
size	long
!=	O
3	int
*	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"work vector must have length 3*N"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
ndiag	long
=	O
LLT	pointer
->	O
size2	long
;	O
double	O
Anorm	double
;	O
double	O
Ainvnorm	pointer
;	O
if	O
(	O
ndiag	long
==	O
1	int
)	O
{	O
gsl_vector_const_view	struct
v	pointer
=	O
gsl_matrix_const_column	function
(	O
LLT	pointer
,	O
0	int
)	O
;	O
Anorm	double
=	O
gsl_vector_max	function
(	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
Anorm	double
=	O
Anorm	double
*	O
Anorm	double
;	O
}	O
else	O
{	O
Anorm	double
=	O
gsl_matrix_get	function
(	O
LLT	pointer
,	O
N	int
-	O
1	int
,	O
ndiag	long
-	O
1	int
)	O
;	O
}	O
*	O
rcond	pointer
=	O
0.0	int
;	O
if	O
(	O
Anorm	double
==	O
0.0	int
)	O
return	O
GSL_SUCCESS	int
;	O
status	int
=	O
gsl_linalg_invnorm1	function
(	O
N	int
,	O
cholesky_band_Ainv	function
,	O
(	O
void	O
*	O
)	O
LLT	pointer
,	O
&	O
Ainvnorm	pointer
,	O
work	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Ainvnorm	pointer
!=	O
0.0	int
)	O
*	O
rcond	pointer
=	O
(	O
1.0	int
/	O
Anorm	double
)	O
/	O
Ainvnorm	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
double	O
cholesky_band_norm1	function
(	O
const	O
gsl_matrix	struct
*	O
A	pointer
)	O
{	O
const	O
size_t	long
N	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
ndiag	long
=	O
A	pointer
->	O
size2	long
;	O
double	O
value	double
;	O
if	O
(	O
ndiag	long
==	O
1	int
)	O
{	O
gsl_vector_const_view	struct
v	pointer
=	O
gsl_matrix_const_column	function
(	O
A	pointer
,	O
0	int
)	O
;	O
CBLAS_INDEX_t	long
idx	long
=	O
gsl_blas_idamax	function
(	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
value	double
=	O
gsl_vector_get	function
(	O
&	O
v	pointer
.	O
vector	struct
,	O
idx	long
)	O
;	O
}	O
else	O
{	O
size_t	long
j	long
;	O
value	double
=	O
0.0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
size_t	long
ncol	long
=	O
GSL_MIN	O
(	O
ndiag	long
,	O
N	int
-	O
j	long
)	O
;	O
gsl_vector_const_view	struct
v	pointer
=	O
gsl_matrix_const_subrow	function
(	O
A	pointer
,	O
j	long
,	O
0	int
,	O
ncol	long
)	O
;	O
double	O
sum	double
=	O
gsl_blas_dasum	function
(	O
&	O
v	pointer
.	O
vector	struct
)	O
;	O
size_t	long
k	long
,	O
l	long
;	O
k	long
=	O
j	long
;	O
l	long
=	O
1	int
;	O
while	O
(	O
k	long
>	O
0	int
&&	O
l	long
<	O
ndiag	long
)	O
{	O
double	O
Akl	double
=	O
gsl_matrix_get	function
(	O
A	pointer
,	O
--	O
k	long
,	O
l	long
++	O
)	O
;	O
sum	double
+=	O
fabs	function
(	O
Akl	double
)	O
;	O
}	O
value	double
=	O
GSL_MAX	O
(	O
value	double
,	O
sum	double
)	O
;	O
}	O
}	O
return	O
value	double
;	O
}	O
static	O
int	O
cholesky_band_Ainv	function
(	O
CBLAS_TRANSPOSE_t	enum
TransA	enum
,	O
gsl_vector	struct
*	O
x	double
,	O
void	O
*	O
params	pointer
)	O
{	O
gsl_matrix	struct
*	O
LLT	pointer
=	O
(	O
gsl_matrix	struct
*	O
)	O
params	pointer
;	O
(	O
void	O
)	O
TransA	enum
;	O
cblas_dtbsv	function
(	O
CblasColMajor	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
(	O
int	O
)	O
LLT	pointer
->	O
size1	long
,	O
(	O
int	O
)	O
(	O
LLT	pointer
->	O
size2	long
-	O
1	int
)	O
,	O
LLT	pointer
->	O
data	pointer
,	O
LLT	pointer
->	O
tda	long
,	O
x	double
->	O
data	pointer
,	O
x	double
->	O
stride	long
)	O
;	O
cblas_dtbsv	function
(	O
CblasColMajor	int
,	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
(	O
int	O
)	O
LLT	pointer
->	O
size1	long
,	O
(	O
int	O
)	O
(	O
LLT	pointer
->	O
size2	long
-	O
1	int
)	O
,	O
LLT	pointer
->	O
data	pointer
,	O
LLT	pointer
->	O
tda	long
,	O
x	double
->	O
data	pointer
,	O
x	double
->	O
stride	long
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
