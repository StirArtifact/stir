static	O
int	O
word_sel	function
(	O
int	O
cmd	int
,	O
dico_key_t	pointer
key	pointer
,	O
const	O
char	O
*	O
dict_word	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
char	O
const	O
*	O
key_word	pointer
=	O
key	pointer
->	O
word	pointer
;	O
struct	O
dico_tokbuf	struct
tb	struct
;	O
int	O
i	int
;	O
switch	O
(	O
cmd	int
)	O
{	O
case	O
DICO_SELECT_BEGIN	int
:	O
break	O
;	O
case	O
DICO_SELECT_RUN	int
:	O
dico_tokenize_begin	function
(	O
&	O
tb	struct
)	O
;	O
if	O
(	O
dico_tokenize_string	function
(	O
&	O
tb	struct
,	O
(	O
char	O
*	O
)	O
dict_word	pointer
)	O
)	O
{	O
dico_tokenize_end	function
(	O
&	O
tb	struct
)	O
;	O
return	O
0	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
tb	struct
.	O
tb_tokc	int
;	O
i	int
++	O
)	O
if	O
(	O
utf8_strcasecmp	function
(	O
tb	struct
.	O
tb_tokv	pointer
[	O
i	int
]	O
,	O
(	O
char	O
*	O
)	O
key_word	pointer
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
1	int
;	O
break	O
;	O
}	O
dico_tokenize_end	function
(	O
&	O
tb	struct
)	O
;	O
break	O
;	O
case	O
DICO_SELECT_END	int
:	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
first_sel	function
(	O
int	O
cmd	int
,	O
dico_key_t	pointer
key	pointer
,	O
const	O
char	O
*	O
dict_word	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
char	O
const	O
*	O
key_word	pointer
=	O
key	pointer
->	O
word	pointer
;	O
struct	O
dico_tokbuf	struct
tb	struct
;	O
switch	O
(	O
cmd	int
)	O
{	O
case	O
DICO_SELECT_BEGIN	int
:	O
break	O
;	O
case	O
DICO_SELECT_RUN	int
:	O
dico_tokenize_begin	function
(	O
&	O
tb	struct
)	O
;	O
if	O
(	O
dico_tokenize_string	function
(	O
&	O
tb	struct
,	O
(	O
char	O
*	O
)	O
dict_word	pointer
)	O
==	O
0	int
&&	O
tb	struct
.	O
tb_tokc	int
)	O
rc	int
=	O
utf8_strcasecmp	function
(	O
tb	struct
.	O
tb_tokv	pointer
[	O
0	int
]	O
,	O
(	O
char	O
*	O
)	O
key_word	pointer
)	O
==	O
0	int
;	O
dico_tokenize_end	function
(	O
&	O
tb	struct
)	O
;	O
break	O
;	O
case	O
DICO_SELECT_END	int
:	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
last_sel	function
(	O
int	O
cmd	int
,	O
dico_key_t	pointer
key	pointer
,	O
const	O
char	O
*	O
dict_word	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
char	O
const	O
*	O
key_word	pointer
=	O
key	pointer
->	O
word	pointer
;	O
struct	O
dico_tokbuf	struct
tb	struct
;	O
switch	O
(	O
cmd	int
)	O
{	O
case	O
DICO_SELECT_BEGIN	int
:	O
break	O
;	O
case	O
DICO_SELECT_RUN	int
:	O
dico_tokenize_begin	function
(	O
&	O
tb	struct
)	O
;	O
if	O
(	O
dico_tokenize_string	function
(	O
&	O
tb	struct
,	O
(	O
char	O
*	O
)	O
dict_word	pointer
)	O
==	O
0	int
&&	O
tb	struct
.	O
tb_tokc	int
)	O
rc	int
=	O
utf8_strcasecmp	function
(	O
tb	struct
.	O
tb_tokv	pointer
[	O
tb	struct
.	O
tb_tokc	int
-	O
1	int
]	O
,	O
(	O
char	O
*	O
)	O
key_word	pointer
)	O
==	O
0	int
;	O
dico_tokenize_end	function
(	O
&	O
tb	struct
)	O
;	O
break	O
;	O
case	O
DICO_SELECT_END	int
:	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
struct	O
dico_strategy	struct
strats	array
[	O
]	O
=	O
{	O
{	O
"word"	pointer
,	O
"Match a word anywhere in the headword"	pointer
,	O
word_sel	function
}	O
,	O
{	O
"first"	pointer
,	O
"Match the first word within headwords"	pointer
,	O
first_sel	function
}	O
,	O
{	O
"last"	pointer
,	O
"Match the last word within headwords"	pointer
,	O
last_sel	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
dico_strategy	struct
*	O
findstrat	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
dico_strategy	struct
*	O
sp	pointer
;	O
for	O
(	O
sp	pointer
=	O
strats	array
;	O
sp	pointer
->	O
name	pointer
;	O
sp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
sp	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
sp	pointer
;	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"unknown strategy: %s"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
word_init	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
dico_strategy	struct
*	O
sp	pointer
;	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
for	O
(	O
sp	pointer
=	O
strats	array
;	O
sp	pointer
->	O
name	pointer
;	O
sp	pointer
++	O
)	O
dico_strategy_add	function
(	O
sp	pointer
)	O
;	O
}	O
else	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
if	O
(	O
(	O
sp	pointer
=	O
findstrat	function
(	O
argv	pointer
[	O
i	int
]	O
)	O
)	O
)	O
dico_strategy_add	function
(	O
sp	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
dico_database_module	struct
DICO_EXPORT	O
(	O
word	pointer
,	O
module	O
)	O
=	O
{	O
DICO_MODULE_VERSION	int
,	O
DICO_CAPA_NODB	int
,	O
word_init	function
,	O
}	O
;	O
