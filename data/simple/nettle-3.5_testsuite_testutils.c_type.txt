void	O
die	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
format	pointer
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
format	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
void	O
*	O
xalloc	function
(	O
size_t	long
size	long
)	O
{	O
void	O
*	O
p	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
size	long
&&	O
!	O
p	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Virtual memory exhausted.\n"	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
return	O
p	pointer
;	O
}	O
static	O
struct	O
tstring	struct
*	O
tstring_first	pointer
=	O
NULL	O
;	O
struct	O
tstring	struct
*	O
tstring_alloc	function
(	O
size_t	long
length	long
)	O
{	O
struct	O
tstring	struct
*	O
s	pointer
=	O
xalloc	function
(	O
sizeof	O
(	O
struct	O
tstring	struct
)	O
+	O
length	long
)	O
;	O
s	pointer
->	O
length	long
=	O
length	long
;	O
s	pointer
->	O
next	pointer
=	O
tstring_first	pointer
;	O
s	pointer
->	O
data	array
[	O
length	long
]	O
=	O
'\0'	O
;	O
tstring_first	pointer
=	O
s	pointer
;	O
return	O
s	pointer
;	O
}	O
void	O
tstring_clear	function
(	O
void	O
)	O
{	O
while	O
(	O
tstring_first	pointer
)	O
{	O
struct	O
tstring	struct
*	O
s	pointer
=	O
tstring_first	pointer
;	O
tstring_first	pointer
=	O
s	pointer
->	O
next	pointer
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
}	O
struct	O
tstring	struct
*	O
tstring_data	function
(	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	array
)	O
{	O
struct	O
tstring	struct
*	O
s	pointer
=	O
tstring_alloc	function
(	O
length	long
)	O
;	O
memcpy	function
(	O
s	pointer
->	O
data	array
,	O
data	array
,	O
length	long
)	O
;	O
return	O
s	pointer
;	O
}	O
struct	O
tstring	struct
*	O
tstring_hex	function
(	O
const	O
char	O
*	O
hex	pointer
)	O
{	O
struct	O
base16_decode_ctx	struct
ctx	pointer
;	O
struct	O
tstring	struct
*	O
s	pointer
;	O
size_t	long
length	long
=	O
strlen	function
(	O
hex	pointer
)	O
;	O
s	pointer
=	O
tstring_alloc	function
(	O
BASE16_DECODE_LENGTH	O
(	O
length	long
)	O
)	O
;	O
base16_decode_init	O
(	O
&	O
ctx	pointer
)	O
;	O
ASSERT	O
(	O
base16_decode_update	O
(	O
&	O
ctx	pointer
,	O
&	O
s	pointer
->	O
length	long
,	O
s	pointer
->	O
data	array
,	O
length	long
,	O
hex	pointer
)	O
)	O
;	O
ASSERT	O
(	O
base16_decode_final	O
(	O
&	O
ctx	pointer
)	O
)	O
;	O
return	O
s	pointer
;	O
}	O
void	O
tstring_print_hex	function
(	O
const	O
struct	O
tstring	struct
*	O
s	pointer
)	O
{	O
print_hex	function
(	O
s	pointer
->	O
length	long
,	O
s	pointer
->	O
data	array
)	O
;	O
}	O
void	O
print_hex	function
(	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	array
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
length	long
;	O
i	long
++	O
)	O
{	O
switch	O
(	O
i	long
%	O
16	int
)	O
{	O
default	O
:	O
break	O
;	O
case	O
0	int
:	O
printf	function
(	O
"\n"	pointer
)	O
;	O
break	O
;	O
case	O
8	int
:	O
printf	function
(	O
" "	pointer
)	O
;	O
break	O
;	O
}	O
printf	function
(	O
"%02x"	pointer
,	O
data	array
[	O
i	long
]	O
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
int	O
verbose	int
=	O
0	int
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
if	O
(	O
argc	int
==	O
2	int
&&	O
!	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"-v"	pointer
)	O
)	O
verbose	int
=	O
1	int
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Invalid argument `%s', only accepted option is `-v'.\n"	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
test_main	function
(	O
)	O
;	O
tstring_clear	function
(	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
void	O
test_cipher	function
(	O
const	O
struct	O
nettle_cipher	struct
*	O
cipher	pointer
,	O
const	O
struct	O
tstring	struct
*	O
key	pointer
,	O
const	O
struct	O
tstring	struct
*	O
cleartext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
ciphertext	pointer
)	O
{	O
void	O
*	O
ctx	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
context_size	int
)	O
;	O
uint8_t	char
*	O
data	array
=	O
xalloc	function
(	O
cleartext	pointer
->	O
length	long
)	O
;	O
size_t	long
length	long
;	O
ASSERT	O
(	O
cleartext	pointer
->	O
length	long
==	O
ciphertext	pointer
->	O
length	long
)	O
;	O
length	long
=	O
cleartext	pointer
->	O
length	long
;	O
ASSERT	O
(	O
key	pointer
->	O
length	long
==	O
cipher	pointer
->	O
key_size	int
)	O
;	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
cipher	pointer
->	O
encrypt	pointer
(	O
ctx	pointer
,	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Encrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_decrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
cipher	pointer
->	O
decrypt	pointer
(	O
ctx	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Decrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
free	function
(	O
ctx	pointer
)	O
;	O
free	function
(	O
data	array
)	O
;	O
}	O
void	O
test_cipher_cbc	function
(	O
const	O
struct	O
nettle_cipher	struct
*	O
cipher	pointer
,	O
const	O
struct	O
tstring	struct
*	O
key	pointer
,	O
const	O
struct	O
tstring	struct
*	O
cleartext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
ciphertext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
iiv	pointer
)	O
{	O
void	O
*	O
ctx	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
context_size	int
)	O
;	O
uint8_t	char
*	O
data	array
;	O
uint8_t	char
*	O
iv	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
block_size	int
)	O
;	O
size_t	long
length	long
;	O
ASSERT	O
(	O
cleartext	pointer
->	O
length	long
==	O
ciphertext	pointer
->	O
length	long
)	O
;	O
length	long
=	O
cleartext	pointer
->	O
length	long
;	O
ASSERT	O
(	O
key	pointer
->	O
length	long
==	O
cipher	pointer
->	O
key_size	int
)	O
;	O
ASSERT	O
(	O
iiv	pointer
->	O
length	long
==	O
cipher	pointer
->	O
block_size	int
)	O
;	O
data	array
=	O
xalloc	function
(	O
length	long
)	O
;	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cbc_encrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CBC encrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_decrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cbc_decrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
decrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CBC decrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
free	function
(	O
ctx	pointer
)	O
;	O
free	function
(	O
data	array
)	O
;	O
free	function
(	O
iv	pointer
)	O
;	O
}	O
void	O
test_cipher_cfb	function
(	O
const	O
struct	O
nettle_cipher	struct
*	O
cipher	pointer
,	O
const	O
struct	O
tstring	struct
*	O
key	pointer
,	O
const	O
struct	O
tstring	struct
*	O
cleartext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
ciphertext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
iiv	pointer
)	O
{	O
void	O
*	O
ctx	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
context_size	int
)	O
;	O
uint8_t	char
*	O
data	array
,	O
*	O
data2	pointer
;	O
uint8_t	char
*	O
iv	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
block_size	int
)	O
;	O
size_t	long
length	long
;	O
ASSERT	O
(	O
cleartext	pointer
->	O
length	long
==	O
ciphertext	pointer
->	O
length	long
)	O
;	O
length	long
=	O
cleartext	pointer
->	O
length	long
;	O
ASSERT	O
(	O
key	pointer
->	O
length	long
==	O
cipher	pointer
->	O
key_size	int
)	O
;	O
ASSERT	O
(	O
iiv	pointer
->	O
length	long
==	O
cipher	pointer
->	O
block_size	int
)	O
;	O
data	array
=	O
xalloc	function
(	O
length	long
)	O
;	O
data2	pointer
=	O
xalloc	function
(	O
length	long
)	O
;	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb_encrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB encrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb_decrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data2	pointer
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data2	pointer
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB decrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data2	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
memcpy	function
(	O
data	array
,	O
cleartext	pointer
->	O
data	array
,	O
length	long
)	O
;	O
cfb_encrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB inplace encrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb_decrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB inplace decrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
length	long
-=	O
1	int
;	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb_encrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB encrypt failed:\nInput:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
ciphertext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb_decrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data2	pointer
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data2	pointer
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB decrypt failed:\nInput:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
ciphertext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data2	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
memcpy	function
(	O
data	array
,	O
cleartext	pointer
->	O
data	array
,	O
length	long
)	O
;	O
cfb_encrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB inplace encrypt failed:\nInput:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
ciphertext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb_decrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB inplace decrypt failed:\nInput:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
ciphertext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
free	function
(	O
ctx	pointer
)	O
;	O
free	function
(	O
data	array
)	O
;	O
free	function
(	O
data2	pointer
)	O
;	O
free	function
(	O
iv	pointer
)	O
;	O
}	O
void	O
test_cipher_cfb8	function
(	O
const	O
struct	O
nettle_cipher	struct
*	O
cipher	pointer
,	O
const	O
struct	O
tstring	struct
*	O
key	pointer
,	O
const	O
struct	O
tstring	struct
*	O
cleartext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
ciphertext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
iiv	pointer
)	O
{	O
void	O
*	O
ctx	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
context_size	int
)	O
;	O
uint8_t	char
*	O
data	array
,	O
*	O
data2	pointer
;	O
uint8_t	char
*	O
iv	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
block_size	int
)	O
;	O
size_t	long
length	long
;	O
ASSERT	O
(	O
cleartext	pointer
->	O
length	long
==	O
ciphertext	pointer
->	O
length	long
)	O
;	O
length	long
=	O
cleartext	pointer
->	O
length	long
;	O
ASSERT	O
(	O
key	pointer
->	O
length	long
==	O
cipher	pointer
->	O
key_size	int
)	O
;	O
ASSERT	O
(	O
iiv	pointer
->	O
length	long
==	O
cipher	pointer
->	O
block_size	int
)	O
;	O
data	array
=	O
xalloc	function
(	O
length	long
)	O
;	O
data2	pointer
=	O
xalloc	function
(	O
length	long
)	O
;	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb8_encrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB8 encrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb8_decrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data2	pointer
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data2	pointer
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB8 decrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data2	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
memcpy	function
(	O
data	array
,	O
cleartext	pointer
->	O
data	array
,	O
length	long
)	O
;	O
cfb8_encrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB8 inplace encrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb8_decrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB8 inplace decrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
length	long
-=	O
1	int
;	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb8_encrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB8 encrypt failed:\nInput:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
ciphertext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb8_decrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data2	pointer
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data2	pointer
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB8 decrypt failed:\nInput:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
ciphertext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data2	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
memcpy	function
(	O
data	array
,	O
cleartext	pointer
->	O
data	array
,	O
length	long
)	O
;	O
cfb8_encrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB8 inplace encrypt failed:\nInput:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
ciphertext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
memcpy	function
(	O
iv	pointer
,	O
iiv	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
cfb8_decrypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
iv	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CFB8 inplace decrypt failed:\nInput:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
ciphertext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
free	function
(	O
ctx	pointer
)	O
;	O
free	function
(	O
data	array
)	O
;	O
free	function
(	O
data2	pointer
)	O
;	O
free	function
(	O
iv	pointer
)	O
;	O
}	O
void	O
test_cipher_ctr	function
(	O
const	O
struct	O
nettle_cipher	struct
*	O
cipher	pointer
,	O
const	O
struct	O
tstring	struct
*	O
key	pointer
,	O
const	O
struct	O
tstring	struct
*	O
cleartext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
ciphertext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
ictr	pointer
)	O
{	O
void	O
*	O
ctx	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
context_size	int
)	O
;	O
uint8_t	char
*	O
data	array
;	O
uint8_t	char
*	O
ctr	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
block_size	int
)	O
;	O
uint8_t	char
*	O
octr	pointer
=	O
xalloc	function
(	O
cipher	pointer
->	O
block_size	int
)	O
;	O
size_t	long
length	long
,	O
nblocks	long
;	O
unsigned	O
low	int
;	O
size_t	long
i	long
;	O
ASSERT	O
(	O
cleartext	pointer
->	O
length	long
==	O
ciphertext	pointer
->	O
length	long
)	O
;	O
length	long
=	O
cleartext	pointer
->	O
length	long
;	O
ASSERT	O
(	O
key	pointer
->	O
length	long
==	O
cipher	pointer
->	O
key_size	int
)	O
;	O
ASSERT	O
(	O
ictr	pointer
->	O
length	long
==	O
cipher	pointer
->	O
block_size	int
)	O
;	O
nblocks	long
=	O
(	O
length	long
+	O
cipher	pointer
->	O
block_size	int
-	O
1	int
)	O
/	O
cipher	pointer
->	O
block_size	int
;	O
ASSERT	O
(	O
nblocks	long
<	O
0x100	int
)	O
;	O
memcpy	function
(	O
octr	pointer
,	O
ictr	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
-	O
1	int
)	O
;	O
low	int
=	O
ictr	pointer
->	O
data	array
[	O
cipher	pointer
->	O
block_size	int
-	O
1	int
]	O
+	O
nblocks	long
;	O
octr	pointer
[	O
cipher	pointer
->	O
block_size	int
-	O
1	int
]	O
=	O
low	int
;	O
if	O
(	O
low	int
>=	O
0x100	int
)	O
INCREMENT	O
(	O
cipher	pointer
->	O
block_size	int
-	O
1	int
,	O
octr	pointer
)	O
;	O
data	array
=	O
xalloc	function
(	O
length	long
)	O
;	O
cipher	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
length	long
;	O
i	long
++	O
)	O
{	O
memcpy	function
(	O
ctr	pointer
,	O
ictr	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
memset	function
(	O
data	array
,	O
17	int
,	O
length	long
)	O
;	O
ctr_crypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
ctr	pointer
,	O
i	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
i	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
||	O
(	O
i	long
<	O
length	long
&&	O
data	array
[	O
i	long
]	O
!=	O
17	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CTR encrypt failed (length %d of %d):\nInput:"	pointer
,	O
(	O
int	O
)	O
i	long
,	O
(	O
int	O
)	O
length	long
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
}	O
ASSERT	O
(	O
MEMEQ	O
(	O
cipher	pointer
->	O
block_size	int
,	O
ctr	pointer
,	O
octr	pointer
)	O
)	O
;	O
memcpy	function
(	O
ctr	pointer
,	O
ictr	pointer
->	O
data	array
,	O
cipher	pointer
->	O
block_size	int
)	O
;	O
ctr_crypt	O
(	O
ctx	pointer
,	O
cipher	pointer
->	O
encrypt	pointer
,	O
cipher	pointer
->	O
block_size	int
,	O
ctr	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
if	O
(	O
!	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"CTR decrypt failed:\nInput:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
ciphertext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nOutput: "	pointer
)	O
;	O
print_hex	function
(	O
length	long
,	O
data	array
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\nExpected:"	pointer
)	O
;	O
tstring_print_hex	function
(	O
cleartext	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
FAIL	O
(	O
)	O
;	O
}	O
ASSERT	O
(	O
MEMEQ	O
(	O
cipher	pointer
->	O
block_size	int
,	O
ctr	pointer
,	O
octr	pointer
)	O
)	O
;	O
free	function
(	O
ctx	pointer
)	O
;	O
free	function
(	O
data	array
)	O
;	O
free	function
(	O
octr	pointer
)	O
;	O
free	function
(	O
ctr	pointer
)	O
;	O
}	O
void	O
test_aead	function
(	O
const	O
struct	O
nettle_aead	struct
*	O
aead	pointer
,	O
nettle_hash_update_func	function
*	O
set_nonce	pointer
,	O
const	O
struct	O
tstring	struct
*	O
key	pointer
,	O
const	O
struct	O
tstring	struct
*	O
authtext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
cleartext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
ciphertext	pointer
,	O
const	O
struct	O
tstring	struct
*	O
nonce	pointer
,	O
const	O
struct	O
tstring	struct
*	O
digest	pointer
)	O
{	O
void	O
*	O
ctx	pointer
=	O
xalloc	function
(	O
aead	pointer
->	O
context_size	int
)	O
;	O
uint8_t	char
*	O
data	array
;	O
uint8_t	char
*	O
buffer	pointer
=	O
xalloc	function
(	O
aead	pointer
->	O
digest_size	int
)	O
;	O
size_t	long
length	long
;	O
ASSERT	O
(	O
cleartext	pointer
->	O
length	long
==	O
ciphertext	pointer
->	O
length	long
)	O
;	O
length	long
=	O
cleartext	pointer
->	O
length	long
;	O
ASSERT	O
(	O
key	pointer
->	O
length	long
==	O
aead	pointer
->	O
key_size	int
)	O
;	O
ASSERT	O
(	O
digest	pointer
->	O
length	long
<=	O
aead	pointer
->	O
digest_size	int
)	O
;	O
data	array
=	O
xalloc	function
(	O
length	long
)	O
;	O
memset	function
(	O
buffer	pointer
,	O
0	int
,	O
aead	pointer
->	O
digest_size	int
)	O
;	O
aead	pointer
->	O
set_encrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
if	O
(	O
nonce	pointer
->	O
length	long
!=	O
aead	pointer
->	O
nonce_size	int
)	O
{	O
ASSERT	O
(	O
set_nonce	pointer
)	O
;	O
set_nonce	pointer
(	O
ctx	pointer
,	O
nonce	pointer
->	O
length	long
,	O
nonce	pointer
->	O
data	array
)	O
;	O
}	O
else	O
aead	pointer
->	O
set_nonce	pointer
(	O
ctx	pointer
,	O
nonce	pointer
->	O
data	array
)	O
;	O
if	O
(	O
authtext	pointer
->	O
length	long
)	O
aead	pointer
->	O
update	pointer
(	O
ctx	pointer
,	O
authtext	pointer
->	O
length	long
,	O
authtext	pointer
->	O
data	array
)	O
;	O
if	O
(	O
length	long
)	O
aead	pointer
->	O
encrypt	pointer
(	O
ctx	pointer
,	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
;	O
aead	pointer
->	O
digest	pointer
(	O
ctx	pointer
,	O
digest	pointer
->	O
length	long
,	O
buffer	pointer
)	O
;	O
ASSERT	O
(	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
ciphertext	pointer
->	O
data	array
)	O
)	O
;	O
ASSERT	O
(	O
MEMEQ	O
(	O
digest	pointer
->	O
length	long
,	O
buffer	pointer
,	O
digest	pointer
->	O
data	array
)	O
)	O
;	O
memset	function
(	O
buffer	pointer
,	O
0	int
,	O
aead	pointer
->	O
digest_size	int
)	O
;	O
aead	pointer
->	O
set_decrypt_key	pointer
(	O
ctx	pointer
,	O
key	pointer
->	O
data	array
)	O
;	O
if	O
(	O
nonce	pointer
->	O
length	long
!=	O
aead	pointer
->	O
nonce_size	int
)	O
{	O
ASSERT	O
(	O
set_nonce	pointer
)	O
;	O
set_nonce	pointer
(	O
ctx	pointer
,	O
nonce	pointer
->	O
length	long
,	O
nonce	pointer
->	O
data	array
)	O
;	O
}	O
else	O
aead	pointer
->	O
set_nonce	pointer
(	O
ctx	pointer
,	O
nonce	pointer
->	O
data	array
)	O
;	O
if	O
(	O
authtext	pointer
->	O
length	long
)	O
aead	pointer
->	O
update	pointer
(	O
ctx	pointer
,	O
authtext	pointer
->	O
length	long
,	O
authtext	pointer
->	O
data	array
)	O
;	O
if	O
(	O
length	long
)	O
aead	pointer
->	O
decrypt	pointer
(	O
ctx	pointer
,	O
length	long
,	O
data	array
,	O
data	array
)	O
;	O
aead	pointer
->	O
digest	pointer
(	O
ctx	pointer
,	O
digest	pointer
->	O
length	long
,	O
buffer	pointer
)	O
;	O
ASSERT	O
(	O
MEMEQ	O
(	O
length	long
,	O
data	array
,	O
cleartext	pointer
->	O
data	array
)	O
)	O
;	O
ASSERT	O
(	O
MEMEQ	O
(	O
digest	pointer
->	O
length	long
,	O
buffer	pointer
,	O
digest	pointer
->	O
data	array
)	O
)	O
;	O
free	function
(	O
ctx	pointer
)	O
;	O
free	function
(	O
data	array
)	O
;	O
free	function
(	O
buffer	pointer
)	O
;	O
}	O
void	O
test_hash	function
(	O
const	O
struct	O
nettle_hash	struct
*	O
hash	pointer
,	O
const	O
struct	O
tstring	struct
*	O
msg	pointer
,	O
const	O
struct	O
tstring	struct
*	O
digest	pointer
)	O
{	O
void	O
*	O
ctx	pointer
=	O
xalloc	function
(	O
hash	pointer
->	O
context_size	int
)	O
;	O
uint8_t	char
*	O
buffer	pointer
=	O
xalloc	function
(	O
hash	pointer
->	O
digest_size	int
)	O
;	O
uint8_t	char
*	O
input	pointer
;	O
unsigned	O
offset	int
;	O
ASSERT	O
(	O
digest	pointer
->	O
length	long
==	O
hash	pointer
->	O
digest_size	int
)	O
;	O
hash	pointer
->	O
init	pointer
(	O
ctx	pointer
)	O
;	O
hash	pointer
->	O
update	pointer
(	O
ctx	pointer
,	O
msg	pointer
->	O
length	long
,	O
msg	pointer
->	O
data	array
)	O
;	O
hash	pointer
->	O
digest	pointer
(	O
ctx	pointer
,	O
hash	pointer
->	O
digest_size	int
,	O
buffer	pointer
)	O
;	O
if	O
(	O
MEMEQ	O
(	O
hash	pointer
->	O
digest_size	int
,	O
digest	pointer
->	O
data	array
,	O
buffer	pointer
)	O
==	O
0	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"\nGot:\n"	pointer
)	O
;	O
print_hex	function
(	O
hash	pointer
->	O
digest_size	int
,	O
buffer	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\nExpected:\n"	pointer
)	O
;	O
print_hex	function
(	O
hash	pointer
->	O
digest_size	int
,	O
digest	pointer
->	O
data	array
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
memset	function
(	O
buffer	pointer
,	O
0	int
,	O
hash	pointer
->	O
digest_size	int
)	O
;	O
hash	pointer
->	O
update	pointer
(	O
ctx	pointer
,	O
msg	pointer
->	O
length	long
,	O
msg	pointer
->	O
data	array
)	O
;	O
hash	pointer
->	O
digest	pointer
(	O
ctx	pointer
,	O
hash	pointer
->	O
digest_size	int
-	O
1	int
,	O
buffer	pointer
)	O
;	O
ASSERT	O
(	O
MEMEQ	O
(	O
hash	pointer
->	O
digest_size	int
-	O
1	int
,	O
digest	pointer
->	O
data	array
,	O
buffer	pointer
)	O
)	O
;	O
ASSERT	O
(	O
buffer	pointer
[	O
hash	pointer
->	O
digest_size	int
-	O
1	int
]	O
==	O
0	int
)	O
;	O
input	pointer
=	O
xalloc	function
(	O
msg	pointer
->	O
length	long
+	O
16	int
)	O
;	O
for	O
(	O
offset	int
=	O
0	int
;	O
offset	int
<	O
16	int
;	O
offset	int
++	O
)	O
{	O
memset	function
(	O
input	pointer
,	O
0	int
,	O
msg	pointer
->	O
length	long
+	O
16	int
)	O
;	O
memcpy	function
(	O
input	pointer
+	O
offset	int
,	O
msg	pointer
->	O
data	array
,	O
msg	pointer
->	O
length	long
)	O
;	O
hash	pointer
->	O
update	pointer
(	O
ctx	pointer
,	O
msg	pointer
->	O
length	long
,	O
input	pointer
+	O
offset	int
)	O
;	O
hash	pointer
->	O
digest	pointer
(	O
ctx	pointer
,	O
hash	pointer
->	O
digest_size	int
,	O
buffer	pointer
)	O
;	O
if	O
(	O
MEMEQ	O
(	O
hash	pointer
->	O
digest_size	int
,	O
digest	pointer
->	O
data	array
,	O
buffer	pointer
)	O
==	O
0	int
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"hash input address: %p\nGot:\n"	pointer
,	O
input	pointer
+	O
offset	int
)	O
;	O
print_hex	function
(	O
hash	pointer
->	O
digest_size	int
,	O
buffer	pointer
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\nExpected:\n"	pointer
)	O
;	O
print_hex	function
(	O
hash	pointer
->	O
digest_size	int
,	O
digest	pointer
->	O
data	array
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
}	O
free	function
(	O
ctx	pointer
)	O
;	O
free	function
(	O
buffer	pointer
)	O
;	O
free	function
(	O
input	pointer
)	O
;	O
}	O
void	O
test_hash_large	function
(	O
const	O
struct	O
nettle_hash	struct
*	O
hash	pointer
,	O
size_t	long
count	long
,	O
size_t	long
length	long
,	O
uint8_t	char
c	int
,	O
const	O
struct	O
tstring	struct
*	O
digest	pointer
)	O
{	O
void	O
*	O
ctx	pointer
=	O
xalloc	function
(	O
hash	pointer
->	O
context_size	int
)	O
;	O
uint8_t	char
*	O
buffer	pointer
=	O
xalloc	function
(	O
hash	pointer
->	O
digest_size	int
)	O
;	O
uint8_t	char
*	O
data	array
=	O
xalloc	function
(	O
length	long
)	O
;	O
size_t	long
i	long
;	O
ASSERT	O
(	O
digest	pointer
->	O
length	long
==	O
hash	pointer
->	O
digest_size	int
)	O
;	O
memset	function
(	O
data	array
,	O
c	int
,	O
length	long
)	O
;	O
hash	pointer
->	O
init	pointer
(	O
ctx	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
{	O
hash	pointer
->	O
update	pointer
(	O
ctx	pointer
,	O
length	long
,	O
data	array
)	O
;	O
if	O
(	O
i	long
%	O
(	O
count	long
/	O
50	int
)	O
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"."	pointer
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
hash	pointer
->	O
digest	pointer
(	O
ctx	pointer
,	O
hash	pointer
->	O
digest_size	int
,	O
buffer	pointer
)	O
;	O
print_hex	function
(	O
hash	pointer
->	O
digest_size	int
,	O
buffer	pointer
)	O
;	O
ASSERT	O
(	O
MEMEQ	O
(	O
hash	pointer
->	O
digest_size	int
,	O
digest	pointer
->	O
data	array
,	O
buffer	pointer
)	O
)	O
;	O
free	function
(	O
ctx	pointer
)	O
;	O
free	function
(	O
buffer	pointer
)	O
;	O
free	function
(	O
data	array
)	O
;	O
}	O
void	O
test_armor	function
(	O
const	O
struct	O
nettle_armor	struct
*	O
armor	pointer
,	O
size_t	long
data_length	long
,	O
const	O
uint8_t	char
*	O
data	array
,	O
const	O
char	O
*	O
ascii	pointer
)	O
{	O
size_t	long
ascii_length	long
=	O
strlen	function
(	O
ascii	pointer
)	O
;	O
char	O
*	O
buffer	pointer
=	O
xalloc	function
(	O
1	int
+	O
ascii_length	long
)	O
;	O
uint8_t	char
*	O
check	pointer
=	O
xalloc	function
(	O
1	int
+	O
armor	pointer
->	O
decode_length	pointer
(	O
ascii_length	long
)	O
)	O
;	O
void	O
*	O
encode	pointer
=	O
xalloc	function
(	O
armor	pointer
->	O
encode_context_size	int
)	O
;	O
void	O
*	O
decode	pointer
=	O
xalloc	function
(	O
armor	pointer
->	O
decode_context_size	int
)	O
;	O
size_t	long
done	long
;	O
ASSERT	O
(	O
ascii_length	long
<=	O
(	O
armor	pointer
->	O
encode_length	pointer
(	O
data_length	long
)	O
+	O
armor	pointer
->	O
encode_final_length	int
)	O
)	O
;	O
ASSERT	O
(	O
data_length	long
<=	O
armor	pointer
->	O
decode_length	pointer
(	O
ascii_length	long
)	O
)	O
;	O
memset	function
(	O
buffer	pointer
,	O
0x33	int
,	O
1	int
+	O
ascii_length	long
)	O
;	O
memset	function
(	O
check	pointer
,	O
0x55	int
,	O
1	int
+	O
data_length	long
)	O
;	O
armor	pointer
->	O
encode_init	pointer
(	O
encode	pointer
)	O
;	O
done	long
=	O
armor	pointer
->	O
encode_update	pointer
(	O
encode	pointer
,	O
buffer	pointer
,	O
data_length	long
,	O
data	array
)	O
;	O
done	long
+=	O
armor	pointer
->	O
encode_final	pointer
(	O
encode	pointer
,	O
buffer	pointer
+	O
done	long
)	O
;	O
ASSERT	O
(	O
done	long
==	O
ascii_length	long
)	O
;	O
ASSERT	O
(	O
MEMEQ	O
(	O
ascii_length	long
,	O
buffer	pointer
,	O
ascii	pointer
)	O
)	O
;	O
ASSERT	O
(	O
0x33	int
==	O
buffer	pointer
[	O
strlen	function
(	O
ascii	pointer
)	O
]	O
)	O
;	O
armor	pointer
->	O
decode_init	pointer
(	O
decode	pointer
)	O
;	O
done	long
=	O
armor	pointer
->	O
decode_length	pointer
(	O
ascii_length	long
)	O
;	O
ASSERT	O
(	O
armor	pointer
->	O
decode_update	pointer
(	O
decode	pointer
,	O
&	O
done	long
,	O
check	pointer
,	O
ascii_length	long
,	O
buffer	pointer
)	O
)	O
;	O
ASSERT	O
(	O
done	long
==	O
data_length	long
)	O
;	O
ASSERT	O
(	O
armor	pointer
->	O
decode_final	pointer
(	O
decode	pointer
)	O
)	O
;	O
ASSERT	O
(	O
MEMEQ	O
(	O
data_length	long
,	O
check	pointer
,	O
data	array
)	O
)	O
;	O
ASSERT	O
(	O
0x55	int
==	O
check	pointer
[	O
data_length	long
]	O
)	O
;	O
free	function
(	O
buffer	pointer
)	O
;	O
free	function
(	O
check	pointer
)	O
;	O
free	function
(	O
encode	pointer
)	O
;	O
free	function
(	O
decode	pointer
)	O
;	O
}	O
