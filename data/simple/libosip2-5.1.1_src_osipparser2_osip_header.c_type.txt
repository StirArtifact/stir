int	O
osip_message_set_header	function
(	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
hname	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
osip_header_t	struct
*	O
h	pointer
;	O
int	O
i	int
;	O
if	O
(	O
sip	pointer
==	O
NULL	O
||	O
hname	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_header_init	function
(	O
&	O
h	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
h	pointer
->	O
hname	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	function
(	O
hname	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	pointer
->	O
hname	pointer
==	O
NULL	O
)	O
{	O
osip_header_free	function
(	O
h	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	function
(	O
h	pointer
->	O
hname	pointer
,	O
hname	pointer
,	O
strlen	function
(	O
hname	pointer
)	O
)	O
;	O
if	O
(	O
hvalue	pointer
!=	O
NULL	O
)	O
{	O
h	pointer
->	O
hvalue	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	function
(	O
hvalue	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	pointer
->	O
hvalue	pointer
==	O
NULL	O
)	O
{	O
osip_header_free	function
(	O
h	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	function
(	O
h	pointer
->	O
hvalue	pointer
,	O
hvalue	pointer
,	O
strlen	function
(	O
hvalue	pointer
)	O
)	O
;	O
}	O
else	O
h	pointer
->	O
hvalue	pointer
=	O
NULL	O
;	O
sip	pointer
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	function
(	O
&	O
sip	pointer
->	O
headers	pointer
,	O
h	pointer
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_replace_header	function
(	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
hname	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
osip_header_t	struct
*	O
h	pointer
,	O
*	O
oldh	pointer
;	O
int	O
i	int
,	O
oldpos	int
=	O
-	O
1	int
;	O
if	O
(	O
sip	pointer
==	O
NULL	O
||	O
hname	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
oldpos	int
=	O
osip_message_header_get_byname	function
(	O
sip	pointer
,	O
hname	pointer
,	O
0	int
,	O
&	O
oldh	pointer
)	O
;	O
i	int
=	O
osip_header_init	function
(	O
&	O
h	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
h	pointer
->	O
hname	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	function
(	O
hname	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	pointer
->	O
hname	pointer
==	O
NULL	O
)	O
{	O
osip_header_free	function
(	O
h	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	function
(	O
h	pointer
->	O
hname	pointer
,	O
hname	pointer
,	O
strlen	function
(	O
hname	pointer
)	O
)	O
;	O
if	O
(	O
hvalue	pointer
!=	O
NULL	O
)	O
{	O
h	pointer
->	O
hvalue	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	function
(	O
hvalue	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	pointer
->	O
hvalue	pointer
==	O
NULL	O
)	O
{	O
osip_header_free	function
(	O
h	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	function
(	O
h	pointer
->	O
hvalue	pointer
,	O
hvalue	pointer
,	O
strlen	function
(	O
hvalue	pointer
)	O
)	O
;	O
}	O
else	O
h	pointer
->	O
hvalue	pointer
=	O
NULL	O
;	O
if	O
(	O
oldpos	int
!=	O
-	O
1	int
)	O
{	O
osip_list_remove	function
(	O
&	O
sip	pointer
->	O
headers	pointer
,	O
oldpos	int
)	O
;	O
osip_header_free	function
(	O
oldh	pointer
)	O
;	O
}	O
sip	pointer
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	function
(	O
&	O
sip	pointer
->	O
headers	pointer
,	O
h	pointer
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_set_topheader	function
(	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
hname	pointer
,	O
const	O
char	O
*	O
hvalue	pointer
)	O
{	O
osip_header_t	struct
*	O
h	pointer
;	O
int	O
i	int
;	O
if	O
(	O
sip	pointer
==	O
NULL	O
||	O
hname	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_header_init	function
(	O
&	O
h	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
h	pointer
->	O
hname	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	function
(	O
hname	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	pointer
->	O
hname	pointer
==	O
NULL	O
)	O
{	O
osip_header_free	function
(	O
h	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	function
(	O
h	pointer
->	O
hname	pointer
,	O
hname	pointer
,	O
strlen	function
(	O
hname	pointer
)	O
)	O
;	O
if	O
(	O
hvalue	pointer
!=	O
NULL	O
)	O
{	O
h	pointer
->	O
hvalue	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
strlen	function
(	O
hvalue	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
h	pointer
->	O
hvalue	pointer
==	O
NULL	O
)	O
{	O
osip_header_free	function
(	O
h	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	function
(	O
h	pointer
->	O
hvalue	pointer
,	O
hvalue	pointer
,	O
strlen	function
(	O
hvalue	pointer
)	O
)	O
;	O
}	O
else	O
h	pointer
->	O
hvalue	pointer
=	O
NULL	O
;	O
sip	pointer
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	function
(	O
&	O
sip	pointer
->	O
headers	pointer
,	O
h	pointer
,	O
0	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_get_header	function
(	O
const	O
osip_message_t	struct
*	O
sip	pointer
,	O
int	O
pos	int
,	O
osip_header_t	struct
*	O
*	O
dest	pointer
)	O
{	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
osip_list_size	function
(	O
&	O
sip	pointer
->	O
headers	pointer
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
*	O
dest	pointer
=	O
(	O
osip_header_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sip	pointer
->	O
headers	pointer
,	O
pos	int
)	O
;	O
return	O
pos	int
;	O
}	O
int	O
osip_message_header_get_byname	function
(	O
const	O
osip_message_t	struct
*	O
sip	pointer
,	O
const	O
char	O
*	O
hname	pointer
,	O
int	O
pos	int
,	O
osip_header_t	struct
*	O
*	O
dest	pointer
)	O
{	O
int	O
i	int
;	O
osip_header_t	struct
*	O
tmp	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
i	int
=	O
pos	int
;	O
if	O
(	O
osip_list_size	function
(	O
&	O
sip	pointer
->	O
headers	pointer
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
while	O
(	O
osip_list_size	function
(	O
&	O
sip	pointer
->	O
headers	pointer
)	O
>	O
i	int
)	O
{	O
tmp	pointer
=	O
(	O
osip_header_t	struct
*	O
)	O
osip_list_get	function
(	O
&	O
sip	pointer
->	O
headers	pointer
,	O
i	int
)	O
;	O
if	O
(	O
osip_strcasecmp	function
(	O
tmp	pointer
->	O
hname	pointer
,	O
hname	pointer
)	O
==	O
0	int
)	O
{	O
*	O
dest	pointer
=	O
tmp	pointer
;	O
return	O
i	int
;	O
}	O
i	int
++	O
;	O
}	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
}	O
int	O
osip_header_init	function
(	O
osip_header_t	struct
*	O
*	O
header	pointer
)	O
{	O
*	O
header	pointer
=	O
(	O
osip_header_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_header_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
header	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
header	pointer
)	O
->	O
hname	pointer
=	O
NULL	O
;	O
(	O
*	O
header	pointer
)	O
->	O
hvalue	pointer
=	O
NULL	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_header_free	function
(	O
osip_header_t	struct
*	O
header	pointer
)	O
{	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
header	pointer
->	O
hname	pointer
)	O
;	O
osip_free	O
(	O
header	pointer
->	O
hvalue	pointer
)	O
;	O
header	pointer
->	O
hname	pointer
=	O
NULL	O
;	O
header	pointer
->	O
hvalue	pointer
=	O
NULL	O
;	O
osip_free	O
(	O
header	pointer
)	O
;	O
}	O
int	O
osip_header_to_str	function
(	O
const	O
osip_header_t	struct
*	O
header	pointer
,	O
char	O
*	O
*	O
dest	pointer
)	O
{	O
size_t	long
len	long
,	O
hlen	long
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
header	pointer
==	O
NULL	O
)	O
||	O
(	O
header	pointer
->	O
hname	pointer
==	O
NULL	O
)	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
len	long
=	O
0	int
;	O
hlen	long
=	O
strlen	function
(	O
header	pointer
->	O
hname	pointer
)	O
;	O
if	O
(	O
header	pointer
->	O
hvalue	pointer
!=	O
NULL	O
)	O
len	long
=	O
strlen	function
(	O
header	pointer
->	O
hvalue	pointer
)	O
;	O
*	O
dest	pointer
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
hlen	long
+	O
len	long
+	O
3	int
)	O
;	O
if	O
(	O
*	O
dest	pointer
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
if	O
(	O
header	pointer
->	O
hvalue	pointer
!=	O
NULL	O
)	O
snprintf	function
(	O
*	O
dest	pointer
,	O
hlen	long
+	O
len	long
+	O
3	int
,	O
"%s: %s"	pointer
,	O
header	pointer
->	O
hname	pointer
,	O
header	pointer
->	O
hvalue	pointer
)	O
;	O
else	O
snprintf	function
(	O
*	O
dest	pointer
,	O
hlen	long
+	O
len	long
+	O
3	int
,	O
"%s: "	pointer
,	O
header	pointer
->	O
hname	pointer
)	O
;	O
if	O
(	O
*	O
dest	pointer
[	O
0	int
]	O
>=	O
'a'	O
&&	O
*	O
dest	pointer
[	O
0	int
]	O
<=	O
'z'	O
)	O
*	O
dest	pointer
[	O
0	int
]	O
=	O
(	O
*	O
dest	pointer
[	O
0	int
]	O
-	O
32	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
char	O
*	O
osip_header_get_name	function
(	O
const	O
osip_header_t	struct
*	O
header	pointer
)	O
{	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
header	pointer
->	O
hname	pointer
;	O
}	O
void	O
osip_header_set_name	function
(	O
osip_header_t	struct
*	O
header	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
header	pointer
->	O
hname	pointer
=	O
name	pointer
;	O
}	O
char	O
*	O
osip_header_get_value	function
(	O
const	O
osip_header_t	struct
*	O
header	pointer
)	O
{	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
header	pointer
->	O
hvalue	pointer
;	O
}	O
void	O
osip_header_set_value	function
(	O
osip_header_t	struct
*	O
header	pointer
,	O
char	O
*	O
value	pointer
)	O
{	O
header	pointer
->	O
hvalue	pointer
=	O
value	pointer
;	O
}	O
int	O
osip_header_clone	function
(	O
const	O
osip_header_t	struct
*	O
header	pointer
,	O
osip_header_t	struct
*	O
*	O
dest	pointer
)	O
{	O
int	O
i	int
;	O
osip_header_t	struct
*	O
he	pointer
;	O
*	O
dest	pointer
=	O
NULL	O
;	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
header	pointer
->	O
hname	pointer
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_header_init	function
(	O
&	O
he	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
he	pointer
->	O
hname	pointer
=	O
osip_strdup	function
(	O
header	pointer
->	O
hname	pointer
)	O
;	O
if	O
(	O
he	pointer
->	O
hname	pointer
==	O
NULL	O
)	O
{	O
osip_header_free	function
(	O
he	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
if	O
(	O
header	pointer
->	O
hvalue	pointer
!=	O
NULL	O
)	O
{	O
he	pointer
->	O
hvalue	pointer
=	O
osip_strdup	function
(	O
header	pointer
->	O
hvalue	pointer
)	O
;	O
if	O
(	O
he	pointer
->	O
hvalue	pointer
==	O
NULL	O
)	O
{	O
osip_header_free	function
(	O
he	pointer
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
*	O
dest	pointer
=	O
he	pointer
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
