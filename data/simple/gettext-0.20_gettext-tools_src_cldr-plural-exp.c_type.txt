void	O
cldr_plural_range_free	function
(	O
struct	O
cldr_plural_range_ty	struct
*	O
range	pointer
)	O
{	O
if	O
(	O
range	pointer
->	O
start	pointer
!=	O
range	pointer
->	O
end	pointer
)	O
free	function
(	O
range	pointer
->	O
start	pointer
)	O
;	O
free	function
(	O
range	pointer
->	O
end	pointer
)	O
;	O
free	function
(	O
range	pointer
)	O
;	O
}	O
void	O
cldr_plural_range_list_free	function
(	O
struct	O
cldr_plural_range_list_ty	struct
*	O
ranges	pointer
)	O
{	O
while	O
(	O
ranges	pointer
->	O
nitems	long
--	O
>	O
0	int
)	O
cldr_plural_range_free	function
(	O
ranges	pointer
->	O
items	pointer
[	O
ranges	pointer
->	O
nitems	long
]	O
)	O
;	O
free	function
(	O
ranges	pointer
->	O
items	pointer
)	O
;	O
free	function
(	O
ranges	pointer
)	O
;	O
}	O
void	O
cldr_plural_condition_free	function
(	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition	pointer
)	O
{	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
||	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
{	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
)	O
;	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_RELATION	int
)	O
cldr_plural_relation_free	function
(	O
condition	pointer
->	O
value	union
.	O
relation	pointer
)	O
;	O
free	function
(	O
condition	pointer
)	O
;	O
}	O
void	O
cldr_plural_relation_free	function
(	O
struct	O
cldr_plural_relation_ty	struct
*	O
relation	pointer
)	O
{	O
free	function
(	O
relation	pointer
->	O
expression	pointer
)	O
;	O
cldr_plural_range_list_free	function
(	O
relation	pointer
->	O
ranges	pointer
)	O
;	O
free	function
(	O
relation	pointer
)	O
;	O
}	O
static	O
void	O
cldr_plural_rule_free	function
(	O
struct	O
cldr_plural_rule_ty	struct
*	O
rule	pointer
)	O
{	O
free	function
(	O
rule	pointer
->	O
name	pointer
)	O
;	O
cldr_plural_condition_free	function
(	O
rule	pointer
->	O
condition	pointer
)	O
;	O
free	function
(	O
rule	pointer
)	O
;	O
}	O
void	O
cldr_plural_rule_list_free	function
(	O
struct	O
cldr_plural_rule_list_ty	struct
*	O
rules	pointer
)	O
{	O
while	O
(	O
rules	pointer
->	O
nitems	long
--	O
>	O
0	int
)	O
cldr_plural_rule_free	function
(	O
rules	pointer
->	O
items	pointer
[	O
rules	pointer
->	O
nitems	long
]	O
)	O
;	O
free	function
(	O
rules	pointer
->	O
items	pointer
)	O
;	O
free	function
(	O
rules	pointer
)	O
;	O
}	O
struct	O
cldr_plural_rule_list_ty	struct
*	O
cldr_plural_parse	function
(	O
const	O
char	O
*	O
input	pointer
)	O
{	O
struct	O
cldr_plural_parse_args	struct
arg	pointer
;	O
memset	function
(	O
&	O
arg	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
cldr_plural_parse_args	struct
)	O
)	O
;	O
arg	pointer
.	O
cp	pointer
=	O
input	pointer
;	O
arg	pointer
.	O
cp_end	pointer
=	O
input	pointer
+	O
strlen	function
(	O
input	pointer
)	O
;	O
arg	pointer
.	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
cldr_plural_rule_list_ty	struct
)	O
;	O
memset	function
(	O
arg	pointer
.	O
result	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
cldr_plural_rule_list_ty	struct
)	O
)	O
;	O
if	O
(	O
yyparse	function
(	O
&	O
arg	pointer
)	O
!=	O
0	int
)	O
return	O
NULL	O
;	O
return	O
arg	pointer
.	O
result	pointer
;	O
}	O
static	O
enum	O
cldr_plural_condition	enum
eval_relation	function
(	O
struct	O
cldr_plural_relation_ty	struct
*	O
relation	pointer
)	O
{	O
switch	O
(	O
relation	pointer
->	O
expression	pointer
->	O
operand	int
)	O
{	O
case	O
'n'	O
:	O
case	O
'i'	O
:	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct
*	O
range	pointer
=	O
relation	pointer
->	O
ranges	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
if	O
(	O
range	pointer
->	O
start	pointer
->	O
type	enum
==	O
CLDR_PLURAL_OPERAND_DECIMAL	int
)	O
{	O
int	O
truncated	int
=	O
(	O
int	O
)	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
dval	struct
.	O
d	double
;	O
range	pointer
->	O
start	pointer
->	O
type	enum
=	O
CLDR_PLURAL_OPERAND_INTEGER	int
;	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
ival	int
=	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
dval	struct
.	O
d	double
==	O
truncated	int
?	O
truncated	int
:	O
truncated	int
+	O
1	int
;	O
}	O
if	O
(	O
range	pointer
->	O
end	pointer
->	O
type	enum
==	O
CLDR_PLURAL_OPERAND_DECIMAL	int
)	O
{	O
range	pointer
->	O
end	pointer
->	O
type	enum
=	O
CLDR_PLURAL_OPERAND_INTEGER	int
;	O
range	pointer
->	O
end	pointer
->	O
value	union
.	O
ival	int
=	O
(	O
int	O
)	O
(	O
range	pointer
->	O
end	pointer
->	O
value	union
.	O
dval	struct
.	O
d	double
)	O
;	O
}	O
}	O
relation	pointer
->	O
expression	pointer
->	O
operand	int
=	O
'i'	O
;	O
}	O
break	O
;	O
case	O
'f'	O
:	O
case	O
't'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct
*	O
range	pointer
=	O
relation	pointer
->	O
ranges	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
if	O
(	O
(	O
relation	pointer
->	O
type	enum
==	O
CLDR_PLURAL_RELATION_EQUAL	int
&&	O
(	O
!	O
OPERAND_ZERO_P	O
(	O
range	pointer
->	O
start	pointer
)	O
||	O
!	O
OPERAND_ZERO_P	O
(	O
range	pointer
->	O
end	pointer
)	O
)	O
)	O
||	O
(	O
relation	pointer
->	O
type	enum
==	O
CLDR_PLURAL_RELATION_NOT_EQUAL	int
&&	O
(	O
OPERAND_ZERO_P	O
(	O
range	pointer
->	O
start	pointer
)	O
||	O
OPERAND_ZERO_P	O
(	O
range	pointer
->	O
end	pointer
)	O
)	O
)	O
)	O
return	O
CLDR_PLURAL_CONDITION_FALSE	int
;	O
}	O
return	O
CLDR_PLURAL_CONDITION_TRUE	int
;	O
}	O
break	O
;	O
}	O
return	O
CLDR_PLURAL_CONDITION_RELATION	int
;	O
}	O
static	O
void	O
eval_condition	function
(	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition	pointer
)	O
{	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
)	O
{	O
eval_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
)	O
;	O
eval_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_FALSE	int
||	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_FALSE	int
)	O
{	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
)	O
;	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
)	O
;	O
condition	pointer
->	O
type	enum
=	O
CLDR_PLURAL_CONDITION_FALSE	int
;	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_TRUE	int
&&	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_TRUE	int
)	O
{	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
)	O
;	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
)	O
;	O
condition	pointer
->	O
type	enum
=	O
CLDR_PLURAL_CONDITION_TRUE	int
;	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_TRUE	int
)	O
{	O
struct	O
cldr_plural_condition_ty	struct
*	O
original	pointer
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
;	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
)	O
;	O
condition	pointer
->	O
type	enum
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
->	O
type	enum
;	O
condition	pointer
->	O
value	union
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
->	O
value	union
;	O
free	function
(	O
original	pointer
)	O
;	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_TRUE	int
)	O
{	O
struct	O
cldr_plural_condition_ty	struct
*	O
original	pointer
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
;	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
)	O
;	O
condition	pointer
->	O
type	enum
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
->	O
type	enum
;	O
condition	pointer
->	O
value	union
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
->	O
value	union
;	O
free	function
(	O
original	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
{	O
eval_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
)	O
;	O
eval_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_TRUE	int
||	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_TRUE	int
)	O
{	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
)	O
;	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
)	O
;	O
condition	pointer
->	O
type	enum
=	O
CLDR_PLURAL_CONDITION_TRUE	int
;	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_FALSE	int
&&	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_FALSE	int
)	O
{	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
)	O
;	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
)	O
;	O
condition	pointer
->	O
type	enum
=	O
CLDR_PLURAL_CONDITION_FALSE	int
;	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_FALSE	int
)	O
{	O
struct	O
cldr_plural_condition_ty	struct
*	O
original	pointer
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
;	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
)	O
;	O
condition	pointer
->	O
type	enum
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
->	O
type	enum
;	O
condition	pointer
->	O
value	union
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
->	O
value	union
;	O
free	function
(	O
original	pointer
)	O
;	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_FALSE	int
)	O
{	O
struct	O
cldr_plural_condition_ty	struct
*	O
original	pointer
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
;	O
cldr_plural_condition_free	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
)	O
;	O
condition	pointer
->	O
type	enum
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
->	O
type	enum
;	O
condition	pointer
->	O
value	union
=	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
->	O
value	union
;	O
free	function
(	O
original	pointer
)	O
;	O
}	O
}	O
else	O
{	O
enum	O
cldr_plural_condition	enum
value	union
=	O
eval_relation	function
(	O
condition	pointer
->	O
value	union
.	O
relation	pointer
)	O
;	O
if	O
(	O
value	union
==	O
CLDR_PLURAL_CONDITION_TRUE	int
||	O
value	union
==	O
CLDR_PLURAL_CONDITION_FALSE	int
)	O
{	O
cldr_plural_relation_free	function
(	O
condition	pointer
->	O
value	union
.	O
relation	pointer
)	O
;	O
condition	pointer
->	O
type	enum
=	O
value	union
;	O
}	O
}	O
}	O
static	O
int	O
find_largest_modulus	function
(	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition	pointer
)	O
{	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
||	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
{	O
int	O
modulus0	int
=	O
find_largest_modulus	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
)	O
;	O
int	O
modulus1	int
=	O
find_largest_modulus	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
)	O
;	O
return	O
MAX	O
(	O
modulus0	int
,	O
modulus1	int
)	O
;	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_RELATION	int
)	O
return	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
expression	pointer
->	O
mod	int
;	O
else	O
return	O
0	int
;	O
}	O
static	O
int	O
find_largest_number	function
(	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition	pointer
)	O
{	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
||	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
{	O
int	O
number0	int
=	O
find_largest_number	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
)	O
;	O
int	O
number1	int
=	O
find_largest_number	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
)	O
;	O
return	O
MAX	O
(	O
number0	int
,	O
number1	int
)	O
;	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_RELATION	int
)	O
{	O
int	O
number	int
=	O
0	int
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
cldr_plural_operand_ty	struct
*	O
operand	int
;	O
operand	int
=	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
ranges	pointer
->	O
items	pointer
[	O
i	long
]	O
->	O
end	pointer
;	O
if	O
(	O
operand	int
->	O
type	enum
==	O
CLDR_PLURAL_OPERAND_INTEGER	int
&&	O
operand	int
->	O
value	union
.	O
ival	int
>	O
number	int
)	O
number	int
=	O
operand	int
->	O
value	union
.	O
ival	int
;	O
else	O
if	O
(	O
operand	int
->	O
type	enum
==	O
CLDR_PLURAL_OPERAND_DECIMAL	int
&&	O
operand	int
->	O
value	union
.	O
dval	struct
.	O
d	double
>	O
number	int
)	O
number	int
=	O
(	O
int	O
)	O
operand	int
->	O
value	union
.	O
dval	struct
.	O
d	double
;	O
}	O
return	O
number	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
static	O
bool	bool
apply_condition	function
(	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition	pointer
,	O
int	O
value	union
)	O
{	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
)	O
return	O
apply_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
,	O
value	union
)	O
&&	O
apply_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
,	O
value	union
)	O
;	O
else	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
return	O
apply_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
,	O
value	union
)	O
||	O
apply_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
,	O
value	union
)	O
;	O
else	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_RELATION	int
)	O
{	O
struct	O
cldr_plural_relation_ty	struct
*	O
relation	pointer
=	O
condition	pointer
->	O
value	union
.	O
relation	pointer
;	O
int	O
number	int
=	O
value	union
;	O
size_t	long
i	long
;	O
if	O
(	O
relation	pointer
->	O
expression	pointer
->	O
mod	int
>	O
0	int
)	O
number	int
%=	O
relation	pointer
->	O
expression	pointer
->	O
mod	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct
*	O
range	pointer
=	O
relation	pointer
->	O
ranges	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
if	O
(	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
ival	int
<=	O
number	int
&&	O
number	int
<=	O
range	pointer
->	O
end	pointer
->	O
value	union
.	O
ival	int
)	O
return	O
relation	pointer
->	O
type	enum
==	O
CLDR_PLURAL_RELATION_EQUAL	int
;	O
}	O
return	O
relation	pointer
->	O
type	enum
!=	O
CLDR_PLURAL_RELATION_EQUAL	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
void	O
print_expression	function
(	O
struct	O
cldr_plural_expression_ty	struct
*	O
expression	pointer
,	O
bool	bool
space	bool
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
if	O
(	O
expression	pointer
->	O
mod	int
==	O
0	int
)	O
fprintf	function
(	O
fp	pointer
,	O
"n"	pointer
)	O
;	O
else	O
fprintf	function
(	O
fp	pointer
,	O
space	bool
?	O
"n %% %d"	pointer
:	O
"n%%%d"	pointer
,	O
expression	pointer
->	O
mod	int
)	O
;	O
}	O
static	O
void	O
print_relation	function
(	O
struct	O
cldr_plural_relation_ty	struct
*	O
relation	pointer
,	O
enum	O
cldr_plural_condition	enum
parent	enum
,	O
bool	bool
space	bool
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
if	O
(	O
relation	pointer
->	O
type	enum
==	O
CLDR_PLURAL_RELATION_EQUAL	int
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
&&	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
>	O
1	int
)	O
fputc	function
(	O
'('	O
,	O
fp	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct
*	O
range	pointer
=	O
relation	pointer
->	O
ranges	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
if	O
(	O
i	long
>	O
0	int
)	O
fprintf	function
(	O
fp	pointer
,	O
" || "	pointer
)	O
;	O
if	O
(	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
ival	int
==	O
range	pointer
->	O
end	pointer
->	O
value	union
.	O
ival	int
)	O
{	O
print_expression	function
(	O
relation	pointer
->	O
expression	pointer
,	O
space	bool
,	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
space	bool
&&	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
==	O
1	int
?	O
" == %d"	pointer
:	O
"==%d"	pointer
,	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
ival	int
)	O
;	O
}	O
else	O
if	O
(	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
ival	int
==	O
0	int
)	O
{	O
print_expression	function
(	O
relation	pointer
->	O
expression	pointer
,	O
false	int
,	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"<=%d"	pointer
,	O
range	pointer
->	O
end	pointer
->	O
value	union
.	O
ival	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
||	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
>	O
1	int
)	O
fputc	function
(	O
'('	O
,	O
fp	pointer
)	O
;	O
print_expression	function
(	O
relation	pointer
->	O
expression	pointer
,	O
false	int
,	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
">=%d"	pointer
,	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
ival	int
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
" && "	pointer
)	O
;	O
print_expression	function
(	O
relation	pointer
->	O
expression	pointer
,	O
false	int
,	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"<=%d"	pointer
,	O
range	pointer
->	O
end	pointer
->	O
value	union
.	O
ival	int
)	O
;	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
||	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
>	O
1	int
)	O
fputc	function
(	O
')'	O
,	O
fp	pointer
)	O
;	O
}	O
}	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
&&	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
>	O
1	int
)	O
fputc	function
(	O
')'	O
,	O
fp	pointer
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
&&	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
>	O
1	int
)	O
fputc	function
(	O
'('	O
,	O
fp	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct
*	O
range	pointer
=	O
relation	pointer
->	O
ranges	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
if	O
(	O
i	long
>	O
0	int
)	O
fprintf	function
(	O
fp	pointer
,	O
" && "	pointer
)	O
;	O
if	O
(	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
ival	int
==	O
range	pointer
->	O
end	pointer
->	O
value	union
.	O
ival	int
)	O
{	O
print_expression	function
(	O
relation	pointer
->	O
expression	pointer
,	O
space	bool
,	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
space	bool
&&	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
==	O
1	int
?	O
" != %d"	pointer
:	O
"!=%d"	pointer
,	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
ival	int
)	O
;	O
}	O
else	O
if	O
(	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
ival	int
==	O
0	int
)	O
{	O
print_expression	function
(	O
relation	pointer
->	O
expression	pointer
,	O
false	int
,	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
">%d"	pointer
,	O
range	pointer
->	O
end	pointer
->	O
value	union
.	O
ival	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
||	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
>	O
1	int
)	O
fputc	function
(	O
'('	O
,	O
fp	pointer
)	O
;	O
print_expression	function
(	O
relation	pointer
->	O
expression	pointer
,	O
false	int
,	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"<%d"	pointer
,	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
ival	int
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
" || "	pointer
)	O
;	O
print_expression	function
(	O
relation	pointer
->	O
expression	pointer
,	O
false	int
,	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
">%d"	pointer
,	O
range	pointer
->	O
end	pointer
->	O
value	union
.	O
ival	int
)	O
;	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
||	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
>	O
1	int
)	O
fputc	function
(	O
')'	O
,	O
fp	pointer
)	O
;	O
}	O
}	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
&&	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
>	O
1	int
)	O
fputc	function
(	O
')'	O
,	O
fp	pointer
)	O
;	O
}	O
}	O
static	O
bool	bool
print_condition	function
(	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition	pointer
,	O
enum	O
cldr_plural_condition	enum
parent	enum
,	O
bool	bool
space	bool
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
)	O
{	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
fputc	function
(	O
'('	O
,	O
fp	pointer
)	O
;	O
print_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
,	O
CLDR_PLURAL_CONDITION_AND	int
,	O
false	int
,	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
" && "	pointer
)	O
;	O
print_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
,	O
CLDR_PLURAL_CONDITION_AND	int
,	O
false	int
,	O
fp	pointer
)	O
;	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
fputc	function
(	O
')'	O
,	O
fp	pointer
)	O
;	O
return	O
true	int
;	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_OR	int
)	O
{	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
)	O
fputc	function
(	O
'('	O
,	O
fp	pointer
)	O
;	O
print_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
0	int
]	O
,	O
CLDR_PLURAL_CONDITION_OR	int
,	O
false	int
,	O
fp	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
" || "	pointer
)	O
;	O
print_condition	function
(	O
condition	pointer
->	O
value	union
.	O
conditions	array
[	O
1	int
]	O
,	O
CLDR_PLURAL_CONDITION_OR	int
,	O
false	int
,	O
fp	pointer
)	O
;	O
if	O
(	O
parent	enum
==	O
CLDR_PLURAL_CONDITION_AND	int
)	O
fputc	function
(	O
')'	O
,	O
fp	pointer
)	O
;	O
return	O
true	int
;	O
}	O
else	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_RELATION	int
)	O
{	O
print_relation	function
(	O
condition	pointer
->	O
value	union
.	O
relation	pointer
,	O
parent	enum
,	O
space	bool
,	O
fp	pointer
)	O
;	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
print_condition_negation	function
(	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_RELATION	int
&&	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
type	enum
==	O
CLDR_PLURAL_RELATION_EQUAL	int
&&	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
==	O
1	int
&&	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
ranges	pointer
->	O
items	pointer
[	O
0	int
]	O
->	O
start	pointer
==	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
ranges	pointer
->	O
items	pointer
[	O
0	int
]	O
->	O
end	pointer
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"nplurals=2; plural=(n != %d);\n"	pointer
,	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
ranges	pointer
->	O
items	pointer
[	O
0	int
]	O
->	O
start	pointer
->	O
value	union
.	O
ival	int
)	O
;	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
print_condition_greater	function
(	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
if	O
(	O
condition	pointer
->	O
type	enum
==	O
CLDR_PLURAL_CONDITION_RELATION	int
&&	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
type	enum
==	O
CLDR_PLURAL_RELATION_EQUAL	int
)	O
{	O
int	O
last	int
=	O
-	O
1	int
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
cldr_plural_range_ty	struct
*	O
range	pointer
=	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
ranges	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
if	O
(	O
range	pointer
->	O
start	pointer
->	O
type	enum
!=	O
CLDR_PLURAL_OPERAND_INTEGER	int
||	O
range	pointer
->	O
end	pointer
->	O
type	enum
!=	O
CLDR_PLURAL_OPERAND_INTEGER	int
||	O
range	pointer
->	O
start	pointer
->	O
value	union
.	O
ival	int
!=	O
last	int
+	O
1	int
)	O
break	O
;	O
last	int
=	O
range	pointer
->	O
end	pointer
->	O
value	union
.	O
ival	int
;	O
}	O
if	O
(	O
i	long
==	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
ranges	pointer
->	O
nitems	long
)	O
{	O
struct	O
cldr_plural_range_ty	struct
*	O
range	pointer
=	O
condition	pointer
->	O
value	union
.	O
relation	pointer
->	O
ranges	pointer
->	O
items	pointer
[	O
i	long
-	O
1	int
]	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"nplurals=2; plural=(n > %d);\n"	pointer
,	O
range	pointer
->	O
end	pointer
->	O
value	union
.	O
ival	int
)	O
;	O
return	O
true	int
;	O
}	O
}	O
return	O
false	int
;	O
}	O
typedef	O
bool	bool
(	O
*	O
print_condition_function_ty	pointer
)	O
(	O
struct	O
cldr_plural_condition_ty	struct
*	O
,	O
FILE	struct
*	O
)	O
;	O
static	O
print_condition_function_ty	pointer
print_condition_functions	array
[	O
]	O
=	O
{	O
print_condition_negation	function
,	O
print_condition_greater	function
}	O
;	O
void	O
cldr_plural_rule_list_print	function
(	O
struct	O
cldr_plural_rule_list_ty	struct
*	O
rules	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
size_t	long
i	long
;	O
size_t	long
count	long
;	O
size_t	long
nplurals	long
;	O
int	O
modulus_max	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rules	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
cldr_plural_rule_ty	struct
*	O
rule	pointer
=	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
eval_condition	function
(	O
rule	pointer
->	O
condition	pointer
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rules	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
cldr_plural_rule_ty	struct
*	O
rule	pointer
=	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
int	O
modulus	int
=	O
find_largest_modulus	function
(	O
rule	pointer
->	O
condition	pointer
)	O
;	O
int	O
number	int
=	O
find_largest_number	function
(	O
rule	pointer
->	O
condition	pointer
)	O
;	O
if	O
(	O
modulus	int
>=	O
number	int
&&	O
modulus	int
>	O
modulus_max	int
)	O
modulus_max	int
=	O
modulus	int
;	O
}	O
if	O
(	O
modulus_max	int
>	O
0	int
)	O
{	O
bool	bool
*	O
values	pointer
=	O
XNMALLOC	O
(	O
modulus_max	int
,	O
bool	bool
)	O
;	O
memset	function
(	O
values	pointer
,	O
0	int
,	O
sizeof	O
(	O
bool	bool
)	O
*	O
modulus_max	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rules	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
cldr_plural_rule_ty	struct
*	O
rule	pointer
=	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
modulus_max	int
;	O
j	int
++	O
)	O
{	O
bool	bool
result	pointer
=	O
apply_condition	function
(	O
rule	pointer
->	O
condition	pointer
,	O
j	int
+	O
1	int
)	O
;	O
if	O
(	O
result	pointer
)	O
values	pointer
[	O
j	int
]	O
=	O
true	int
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
modulus_max	int
;	O
j	int
++	O
)	O
if	O
(	O
values	pointer
[	O
j	int
]	O
==	O
false	int
)	O
break	O
;	O
if	O
(	O
j	int
==	O
modulus_max	int
)	O
break	O
;	O
}	O
free	function
(	O
values	pointer
)	O
;	O
while	O
(	O
i	long
<	O
rules	pointer
->	O
nitems	long
)	O
cldr_plural_rule_free	function
(	O
rules	pointer
->	O
items	pointer
[	O
--	O
rules	pointer
->	O
nitems	long
]	O
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
,	O
nplurals	long
=	O
1	int
;	O
i	long
<	O
rules	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
if	O
(	O
RULE_PRINTABLE_P	O
(	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
)	O
)	O
nplurals	long
++	O
;	O
if	O
(	O
nplurals	long
==	O
1	int
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"nplurals=1; plural=0;\n"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
nplurals	long
==	O
2	int
)	O
{	O
struct	O
cldr_plural_condition_ty	struct
*	O
condition	pointer
;	O
size_t	long
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
rules	pointer
->	O
nitems	long
;	O
j	int
++	O
)	O
if	O
(	O
RULE_PRINTABLE_P	O
(	O
rules	pointer
->	O
items	pointer
[	O
j	int
]	O
)	O
)	O
break	O
;	O
condition	pointer
=	O
rules	pointer
->	O
items	pointer
[	O
j	int
]	O
->	O
condition	pointer
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
SIZEOF	O
(	O
print_condition_functions	array
)	O
;	O
j	int
++	O
)	O
if	O
(	O
print_condition_functions	array
[	O
j	int
]	O
(	O
condition	pointer
,	O
fp	pointer
)	O
)	O
return	O
;	O
}	O
fprintf	function
(	O
fp	pointer
,	O
"nplurals=%lu; plural=("	pointer
,	O
(	O
unsigned	O
long	O
)	O
nplurals	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
,	O
count	long
=	O
0	int
;	O
i	long
<	O
rules	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
cldr_plural_rule_ty	struct
*	O
rule	pointer
=	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
if	O
(	O
print_condition	function
(	O
rule	pointer
->	O
condition	pointer
,	O
CLDR_PLURAL_CONDITION_FALSE	int
,	O
nplurals	long
==	O
2	int
,	O
fp	pointer
)	O
&&	O
rules	pointer
->	O
nitems	long
>	O
1	int
)	O
{	O
bool	bool
printable_left	bool
=	O
false	int
;	O
size_t	long
j	int
;	O
for	O
(	O
j	int
=	O
i	long
+	O
1	int
;	O
j	int
<	O
rules	pointer
->	O
nitems	long
;	O
j	int
++	O
)	O
if	O
(	O
RULE_PRINTABLE_P	O
(	O
rules	pointer
->	O
items	pointer
[	O
j	int
]	O
)	O
)	O
printable_left	bool
=	O
true	int
;	O
if	O
(	O
i	long
<	O
rules	pointer
->	O
nitems	long
-	O
1	int
&&	O
printable_left	bool
)	O
fprintf	function
(	O
fp	pointer
,	O
" ? %lu : "	pointer
,	O
(	O
unsigned	O
long	O
)	O
count	long
++	O
)	O
;	O
}	O
}	O
if	O
(	O
rules	pointer
->	O
nitems	long
>	O
1	int
)	O
fprintf	function
(	O
fp	pointer
,	O
" ? %lu : %lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
count	long
,	O
(	O
unsigned	O
long	O
)	O
(	O
count	long
+	O
1	int
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
");\n"	pointer
)	O
;	O
}	O
