void	O
decide_string	function
(	O
int	O
pos	int
)	O
{	O
int	O
aa	int
,	O
dd	int
;	O
int	O
acode	int
,	O
dcode	int
;	O
SGFTree	struct
tree	pointer
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"gnugo: --decide-string called on an empty vertex\n"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
outfilename	array
)	O
sgffile_begindump	function
(	O
&	O
tree	pointer
)	O
;	O
reset_engine	function
(	O
)	O
;	O
count_variations	int
=	O
1	int
;	O
acode	int
=	O
attack	function
(	O
pos	int
,	O
&	O
aa	int
)	O
;	O
if	O
(	O
acode	int
)	O
{	O
if	O
(	O
acode	int
==	O
WIN	int
)	O
gprintf	function
(	O
"%1m can be attacked at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
aa	int
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
KO_A	int
)	O
gprintf	function
(	O
"%1m can be attacked with ko (good) at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
aa	int
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
KO_B	int
)	O
gprintf	function
(	O
"%1m can be attacked with ko (bad) at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
aa	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_READING_PERFORMANCE	int
)	O
{	O
gprintf	function
(	O
"Reading shadow: \n"	pointer
)	O
;	O
draw_reading_shadow	function
(	O
)	O
;	O
}	O
count_variations	int
=	O
1	int
;	O
dcode	int
=	O
find_defense	function
(	O
pos	int
,	O
&	O
dd	int
)	O
;	O
if	O
(	O
dcode	int
)	O
{	O
if	O
(	O
dcode	int
==	O
WIN	int
)	O
gprintf	function
(	O
"%1m can be defended at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
dd	int
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
KO_A	int
)	O
gprintf	function
(	O
"%1m can be defended with ko (good) at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
dd	int
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
KO_B	int
)	O
gprintf	function
(	O
"%1m can be defended with ko (bad) at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
dd	int
,	O
count_variations	int
)	O
;	O
}	O
else	O
gprintf	function
(	O
"%1m cannot be defended (%d variations)\n"	pointer
,	O
pos	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_READING_PERFORMANCE	int
)	O
{	O
gprintf	function
(	O
"Reading shadow: \n"	pointer
)	O
;	O
draw_reading_shadow	function
(	O
)	O
;	O
}	O
}	O
else	O
{	O
gprintf	function
(	O
"%1m cannot be attacked (%d variations)\n"	pointer
,	O
pos	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
debug	int
&	O
DEBUG_READING_PERFORMANCE	int
)	O
{	O
gprintf	function
(	O
"Reading shadow: \n"	pointer
)	O
;	O
draw_reading_shadow	function
(	O
)	O
;	O
}	O
}	O
sgffile_enddump	function
(	O
outfilename	array
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_connection	function
(	O
int	O
apos	int
,	O
int	O
bpos	int
)	O
{	O
int	O
move	pointer
;	O
int	O
result	int
;	O
SGFTree	struct
tree	pointer
;	O
ASSERT_ON_BOARD1	O
(	O
apos	int
)	O
;	O
ASSERT_ON_BOARD1	O
(	O
bpos	int
)	O
;	O
if	O
(	O
board	pointer
[	O
apos	int
]	O
==	O
EMPTY	int
||	O
board	pointer
[	O
bpos	int
]	O
==	O
EMPTY	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"gnugo: --decide-connection called on an empty vertex\n"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
board	pointer
[	O
apos	int
]	O
!=	O
board	pointer
[	O
bpos	int
]	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"gnugo: --decide-connection called for strings of different colors\n"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
outfilename	array
)	O
sgffile_begindump	function
(	O
&	O
tree	pointer
)	O
;	O
reset_engine	function
(	O
)	O
;	O
count_variations	int
=	O
1	int
;	O
result	int
=	O
string_connect	function
(	O
apos	int
,	O
bpos	int
,	O
&	O
move	pointer
)	O
;	O
if	O
(	O
result	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	pointer
==	O
NO_MOVE	O
)	O
gprintf	function
(	O
"%1m and %1m are connected as it stands (%d variations)\n"	pointer
,	O
apos	int
,	O
bpos	int
,	O
count_variations	int
)	O
;	O
else	O
gprintf	function
(	O
"%1m and %1m can be connected at %1m (%d variations)\n"	pointer
,	O
apos	int
,	O
bpos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
result	int
==	O
KO_A	int
)	O
gprintf	function
(	O
"%1m and %1m can be connected with ko (good) at %1m (%d variations)\n"	pointer
,	O
apos	int
,	O
bpos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
result	int
==	O
KO_B	int
)	O
gprintf	function
(	O
"%1m and %1m can be connected with ko (bad) at %1m (%d variations)\n"	pointer
,	O
apos	int
,	O
bpos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
gprintf	function
(	O
"%1m and %1m cannot be connected (%d variations)\n"	pointer
,	O
apos	int
,	O
bpos	int
,	O
count_variations	int
)	O
;	O
count_variations	int
=	O
1	int
;	O
result	int
=	O
disconnect	function
(	O
apos	int
,	O
bpos	int
,	O
&	O
move	pointer
)	O
;	O
if	O
(	O
result	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	pointer
==	O
NO_MOVE	O
)	O
gprintf	function
(	O
"%1m and %1m are disconnected as it stands (%d variations)\n"	pointer
,	O
apos	int
,	O
bpos	int
,	O
count_variations	int
)	O
;	O
else	O
gprintf	function
(	O
"%1m and %1m can be disconnected at %1m (%d variations)\n"	pointer
,	O
apos	int
,	O
bpos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
result	int
==	O
KO_A	int
)	O
gprintf	function
(	O
"%1m and %1m can be disconnected with ko (good) at %1m (%d variations)\n"	pointer
,	O
apos	int
,	O
bpos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
result	int
==	O
KO_B	int
)	O
gprintf	function
(	O
"%1m and %1m can be disconnected with ko (bad) at %1m (%d variations)\n"	pointer
,	O
apos	int
,	O
bpos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
gprintf	function
(	O
"%1m and %1m cannot be disconnected (%d variations)\n"	pointer
,	O
apos	int
,	O
bpos	int
,	O
count_variations	int
)	O
;	O
sgffile_enddump	function
(	O
outfilename	array
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_owl	function
(	O
int	O
pos	int
)	O
{	O
int	O
move	pointer
=	O
NO_MOVE	O
;	O
int	O
acode	int
,	O
dcode	int
;	O
SGFTree	struct
tree	pointer
;	O
int	O
result_certain	int
;	O
int	O
kworm	int
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"gnugo: --decide-dragon called on an empty vertex\n"	pointer
)	O
;	O
return	O
;	O
}	O
reset_engine	function
(	O
)	O
;	O
silent_examine_position	function
(	O
EXAMINE_DRAGONS_WITHOUT_OWL	int
)	O
;	O
gprintf	function
(	O
"finished examine_position\n"	pointer
)	O
;	O
reading_cache_clear	function
(	O
)	O
;	O
if	O
(	O
*	O
outfilename	array
)	O
sgffile_begindump	function
(	O
&	O
tree	pointer
)	O
;	O
count_variations	int
=	O
1	int
;	O
acode	int
=	O
owl_attack	function
(	O
pos	int
,	O
&	O
move	pointer
,	O
&	O
result_certain	int
,	O
&	O
kworm	int
)	O
;	O
if	O
(	O
acode	int
)	O
{	O
if	O
(	O
acode	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	pointer
==	O
NO_MOVE	O
)	O
gprintf	function
(	O
"%1m is dead as it stands"	pointer
,	O
pos	int
)	O
;	O
else	O
gprintf	function
(	O
"%1m can be attacked at %1m (%d variations)"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
acode	int
==	O
KO_A	int
)	O
gprintf	function
(	O
"%1m can be attacked with ko (good) at %1m (%d variations)"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
KO_B	int
)	O
gprintf	function
(	O
"%1m can be attacked with ko (bad) at %1m (%d variations)"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
GAIN	int
)	O
gprintf	function
(	O
"%1m can be attacked with gain (captures %1m) at %1m (%d variations)"	pointer
,	O
pos	int
,	O
kworm	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
}	O
else	O
gprintf	function
(	O
"%1m cannot be attacked (%d variations)"	pointer
,	O
pos	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
result_certain	int
)	O
gprintf	function
(	O
"\n"	pointer
)	O
;	O
else	O
gprintf	function
(	O
" result uncertain\n"	pointer
)	O
;	O
reading_cache_clear	function
(	O
)	O
;	O
count_variations	int
=	O
1	int
;	O
dcode	int
=	O
owl_defend	function
(	O
pos	int
,	O
&	O
move	pointer
,	O
&	O
result_certain	int
,	O
&	O
kworm	int
)	O
;	O
if	O
(	O
dcode	int
)	O
{	O
if	O
(	O
dcode	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	pointer
==	O
NO_MOVE	O
)	O
gprintf	function
(	O
"%1m is alive as it stands"	pointer
,	O
pos	int
)	O
;	O
else	O
gprintf	function
(	O
"%1m can be defended at %1m (%d variations)"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
dcode	int
==	O
KO_A	int
)	O
gprintf	function
(	O
"%1m can be defended with ko (good) at %1m (%d variations)"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
KO_B	int
)	O
gprintf	function
(	O
"%1m can be defended with ko (bad) at %1m (%d variations)"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
LOSS	int
)	O
gprintf	function
(	O
"%1m can be defended with loss (loses %1m) at %1m (%d variations)"	pointer
,	O
pos	int
,	O
kworm	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
}	O
else	O
gprintf	function
(	O
"%1m cannot be defended (%d variations)"	pointer
,	O
pos	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
result_certain	int
)	O
gprintf	function
(	O
"\n"	pointer
)	O
;	O
else	O
gprintf	function
(	O
" result uncertain\n"	pointer
)	O
;	O
sgffile_enddump	function
(	O
outfilename	array
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_dragon_data	function
(	O
int	O
pos	int
)	O
{	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"gnugo: --decide-dragon-data called on an empty vertex\n"	pointer
)	O
;	O
return	O
;	O
}	O
reset_engine	function
(	O
)	O
;	O
silent_examine_position	function
(	O
FULL_EXAMINE_DRAGONS	int
)	O
;	O
gprintf	function
(	O
"Dragon at %1m:\n"	pointer
,	O
pos	int
)	O
;	O
report_dragon	function
(	O
stderr	pointer
,	O
pos	int
)	O
;	O
}	O
void	O
decide_semeai	function
(	O
int	O
apos	int
,	O
int	O
bpos	int
)	O
{	O
SGFTree	struct
tree	pointer
;	O
int	O
resulta	pointer
,	O
resultb	pointer
,	O
move	pointer
,	O
result_certain	int
;	O
int	O
color	int
=	O
board	pointer
[	O
apos	int
]	O
;	O
if	O
(	O
color	int
==	O
EMPTY	int
||	O
board	pointer
[	O
bpos	int
]	O
!=	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
{	O
gprintf	function
(	O
"gnugo: --decide-semeai called on invalid data\n"	pointer
)	O
;	O
return	O
;	O
}	O
reset_engine	function
(	O
)	O
;	O
silent_examine_position	function
(	O
EXAMINE_DRAGONS_WITHOUT_OWL	int
)	O
;	O
gprintf	function
(	O
"finished examine_position\n"	pointer
)	O
;	O
count_variations	int
=	O
1	int
;	O
reading_cache_clear	function
(	O
)	O
;	O
if	O
(	O
*	O
outfilename	array
)	O
sgffile_begindump	function
(	O
&	O
tree	pointer
)	O
;	O
gprintf	function
(	O
"Analyzing semeai between %1m and %1m, %C moves first\n"	pointer
,	O
apos	int
,	O
bpos	int
,	O
board	pointer
[	O
apos	int
]	O
)	O
;	O
owl_analyze_semeai	function
(	O
apos	int
,	O
bpos	int
,	O
&	O
resulta	pointer
,	O
&	O
resultb	pointer
,	O
&	O
move	pointer
,	O
1	int
,	O
&	O
result_certain	int
)	O
;	O
gprintf	function
(	O
"Semeai defense of %1m: result %s %1m\n"	pointer
,	O
apos	int
,	O
result_to_string	function
(	O
resulta	pointer
)	O
,	O
move	pointer
)	O
;	O
gprintf	function
(	O
"Semeai attack of %1m: result %s %1m\n"	pointer
,	O
bpos	int
,	O
result_to_string	function
(	O
resultb	pointer
)	O
,	O
move	pointer
)	O
;	O
gprintf	function
(	O
"%d nodes%s\n\n"	pointer
,	O
count_variations	int
,	O
result_certain	int
?	O
""	pointer
:	O
", uncertain result"	pointer
)	O
;	O
gprintf	function
(	O
"Analyzing semeai between %1m and %1m, %C moves first\n"	pointer
,	O
bpos	int
,	O
apos	int
,	O
board	pointer
[	O
bpos	int
]	O
)	O
;	O
owl_analyze_semeai	function
(	O
bpos	int
,	O
apos	int
,	O
&	O
resultb	pointer
,	O
&	O
resulta	pointer
,	O
&	O
move	pointer
,	O
1	int
,	O
&	O
result_certain	int
)	O
;	O
gprintf	function
(	O
"Semeai defense of %1m: result %s %1m\n"	pointer
,	O
bpos	int
,	O
result_to_string	function
(	O
resultb	pointer
)	O
,	O
move	pointer
)	O
;	O
gprintf	function
(	O
"Semeai attack of %1m: result %s %1m\n"	pointer
,	O
apos	int
,	O
result_to_string	function
(	O
resulta	pointer
)	O
,	O
move	pointer
)	O
;	O
gprintf	function
(	O
"%d nodes%s\n"	pointer
,	O
count_variations	int
,	O
result_certain	int
?	O
""	pointer
:	O
", uncertain result"	pointer
)	O
;	O
sgffile_enddump	function
(	O
outfilename	array
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_tactical_semeai	function
(	O
int	O
apos	int
,	O
int	O
bpos	int
)	O
{	O
SGFTree	struct
tree	pointer
;	O
int	O
resulta	pointer
,	O
resultb	pointer
,	O
move	pointer
,	O
dummy	int
;	O
int	O
color	int
=	O
board	pointer
[	O
apos	int
]	O
;	O
if	O
(	O
color	int
==	O
EMPTY	int
||	O
board	pointer
[	O
bpos	int
]	O
!=	O
OTHER_COLOR	O
(	O
color	int
)	O
)	O
{	O
gprintf	function
(	O
"gnugo: --decide-semeai called on invalid data\n"	pointer
)	O
;	O
return	O
;	O
}	O
reset_engine	function
(	O
)	O
;	O
silent_examine_position	function
(	O
EXAMINE_DRAGONS_WITHOUT_OWL	int
)	O
;	O
gprintf	function
(	O
"finished examine_position\n"	pointer
)	O
;	O
count_variations	int
=	O
1	int
;	O
reading_cache_clear	function
(	O
)	O
;	O
if	O
(	O
*	O
outfilename	array
)	O
sgffile_begindump	function
(	O
&	O
tree	pointer
)	O
;	O
owl_analyze_semeai	function
(	O
apos	int
,	O
bpos	int
,	O
&	O
resulta	pointer
,	O
&	O
resultb	pointer
,	O
&	O
move	pointer
,	O
0	int
,	O
&	O
dummy	int
)	O
;	O
gprintf	function
(	O
"After %s at %1m, %1m is %s, %1m is %s (%d nodes)\n"	pointer
,	O
color_to_string	function
(	O
color	int
)	O
,	O
move	pointer
,	O
apos	int
,	O
status_to_string	function
(	O
resulta	pointer
)	O
,	O
bpos	int
,	O
status_to_string	function
(	O
resultb	pointer
)	O
,	O
count_variations	int
)	O
;	O
owl_analyze_semeai	function
(	O
bpos	int
,	O
apos	int
,	O
&	O
resultb	pointer
,	O
&	O
resulta	pointer
,	O
&	O
move	pointer
,	O
0	int
,	O
&	O
dummy	int
)	O
;	O
gprintf	function
(	O
"After %s at %1m, %1m is %s, %1m is %s (%d nodes)\n"	pointer
,	O
color_to_string	function
(	O
color	int
)	O
,	O
move	pointer
,	O
apos	int
,	O
status_to_string	function
(	O
resulta	pointer
)	O
,	O
bpos	int
,	O
status_to_string	function
(	O
resultb	pointer
)	O
,	O
count_variations	int
)	O
;	O
sgffile_enddump	function
(	O
outfilename	array
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_position	function
(	O
)	O
{	O
int	O
pos	int
;	O
int	O
move	pointer
=	O
NO_MOVE	O
;	O
int	O
acode	int
=	O
0	int
,	O
dcode	int
=	O
0	int
;	O
int	O
kworm	int
;	O
static	O
const	O
char	O
*	O
snames	array
[	O
]	O
=	O
{	O
"dead"	pointer
,	O
"alive"	pointer
,	O
"critical"	pointer
,	O
"unknown"	pointer
}	O
;	O
SGFTree	struct
tree	pointer
;	O
reset_engine	function
(	O
)	O
;	O
silent_examine_position	function
(	O
EXAMINE_DRAGONS_WITHOUT_OWL	int
)	O
;	O
reading_cache_clear	function
(	O
)	O
;	O
if	O
(	O
*	O
outfilename	array
)	O
sgffile_begindump	function
(	O
&	O
tree	pointer
)	O
;	O
count_variations	int
=	O
1	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
!	O
ON_BOARD	O
(	O
pos	int
)	O
||	O
dragon	int
[	O
pos	int
]	O
.	O
origin	int
!=	O
pos	int
||	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
||	O
DRAGON2	O
(	O
pos	int
)	O
.	O
escape_route	float
>=	O
6	int
)	O
continue	O
;	O
gprintf	function
(	O
"\nanalyzing %1m\n"	pointer
,	O
pos	int
)	O
;	O
gprintf	function
(	O
"status=%s, escape=%d\n"	pointer
,	O
snames	array
[	O
dragon	int
[	O
pos	int
]	O
.	O
crude_status	function
]	O
,	O
DRAGON2	O
(	O
pos	int
)	O
.	O
escape_route	float
)	O
;	O
acode	int
=	O
owl_attack	function
(	O
pos	int
,	O
&	O
move	pointer
,	O
NULL	O
,	O
&	O
kworm	int
)	O
;	O
if	O
(	O
acode	int
)	O
{	O
if	O
(	O
acode	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	pointer
==	O
NO_MOVE	O
)	O
gprintf	function
(	O
"%1m is dead as it stands\n"	pointer
,	O
pos	int
)	O
;	O
else	O
gprintf	function
(	O
"%1m can be attacked at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
acode	int
==	O
KO_A	int
)	O
gprintf	function
(	O
"%1m can be attacked with ko (good) at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
KO_B	int
)	O
gprintf	function
(	O
"%1m can be attacked with ko (bad) at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
acode	int
==	O
GAIN	int
)	O
gprintf	function
(	O
"%1m can be attacked with gain (captures %1m) at %1m (%d variations)"	pointer
,	O
pos	int
,	O
kworm	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
count_variations	int
=	O
1	int
;	O
dcode	int
=	O
owl_defend	function
(	O
pos	int
,	O
&	O
move	pointer
,	O
NULL	O
,	O
&	O
kworm	int
)	O
;	O
if	O
(	O
dcode	int
)	O
{	O
if	O
(	O
dcode	int
==	O
WIN	int
)	O
{	O
if	O
(	O
move	pointer
==	O
NO_MOVE	O
)	O
gprintf	function
(	O
"%1m is alive as it stands\n"	pointer
,	O
pos	int
)	O
;	O
else	O
gprintf	function
(	O
"%1m can be defended at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
}	O
else	O
if	O
(	O
dcode	int
==	O
KO_A	int
)	O
gprintf	function
(	O
"%1m can be defended with ko (good) at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
KO_B	int
)	O
gprintf	function
(	O
"%1m can be defended with ko (bad) at %1m (%d variations)\n"	pointer
,	O
pos	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
else	O
if	O
(	O
dcode	int
==	O
LOSS	int
)	O
gprintf	function
(	O
"%1m can be defended with loss (loses %1m) at %1m (%d variations)"	pointer
,	O
pos	int
,	O
kworm	int
,	O
move	pointer
,	O
count_variations	int
)	O
;	O
}	O
else	O
gprintf	function
(	O
"%1m cannot be defended (%d variations)\n"	pointer
,	O
pos	int
,	O
count_variations	int
)	O
;	O
}	O
else	O
gprintf	function
(	O
"%1m cannot be attacked (%d variations)\n"	pointer
,	O
pos	int
,	O
count_variations	int
)	O
;	O
if	O
(	O
acode	int
)	O
{	O
if	O
(	O
dcode	int
)	O
gprintf	function
(	O
"status of %1m revised to CRITICAL\n"	pointer
,	O
pos	int
)	O
;	O
else	O
gprintf	function
(	O
"status of %1m revised to DEAD\n"	pointer
,	O
pos	int
)	O
;	O
}	O
else	O
gprintf	function
(	O
"status of %1m revised to ALIVE\n"	pointer
,	O
pos	int
)	O
;	O
}	O
sgffile_enddump	function
(	O
outfilename	array
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_eye	function
(	O
int	O
pos	int
)	O
{	O
int	O
color	int
;	O
struct	O
eyevalue	struct
value	pointer
;	O
int	O
attack_point	pointer
;	O
int	O
defense_point	pointer
;	O
int	O
eyepos	int
;	O
SGFTree	struct
tree	pointer
;	O
reset_engine	function
(	O
)	O
;	O
silent_examine_position	function
(	O
EXAMINE_DRAGONS_WITHOUT_OWL	int
)	O
;	O
color	int
=	O
black_eye	array
[	O
pos	int
]	O
.	O
color	int
;	O
if	O
(	O
!	O
IS_STONE	O
(	O
color	int
)	O
)	O
{	O
gprintf	function
(	O
"The eye at %1m is not of a single color.\n"	pointer
,	O
pos	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
printboard	int
)	O
showboard	function
(	O
0	int
)	O
;	O
if	O
(	O
*	O
outfilename	array
)	O
sgffile_begindump	function
(	O
&	O
tree	pointer
)	O
;	O
count_variations	int
=	O
1	int
;	O
if	O
(	O
black_eye	array
[	O
pos	int
]	O
.	O
color	int
==	O
BLACK	int
)	O
{	O
eyepos	int
=	O
black_eye	array
[	O
pos	int
]	O
.	O
origin	int
;	O
compute_eyes	function
(	O
eyepos	int
,	O
&	O
value	pointer
,	O
&	O
attack_point	pointer
,	O
&	O
defense_point	pointer
,	O
black_eye	array
,	O
half_eye	array
,	O
0	int
)	O
;	O
gprintf	function
(	O
"Black eyespace at %1m: %s\n"	pointer
,	O
eyepos	int
,	O
eyevalue_to_string	function
(	O
&	O
value	pointer
)	O
)	O
;	O
if	O
(	O
eye_move_urgency	function
(	O
&	O
value	pointer
)	O
>	O
0	int
)	O
{	O
gprintf	function
(	O
"  vital points: %1m (attack) %1m (defense)\n"	pointer
,	O
attack_point	pointer
,	O
defense_point	pointer
)	O
;	O
}	O
}	O
if	O
(	O
white_eye	array
[	O
pos	int
]	O
.	O
color	int
==	O
WHITE	int
)	O
{	O
eyepos	int
=	O
white_eye	array
[	O
pos	int
]	O
.	O
origin	int
;	O
compute_eyes	function
(	O
eyepos	int
,	O
&	O
value	pointer
,	O
&	O
attack_point	pointer
,	O
&	O
defense_point	pointer
,	O
white_eye	array
,	O
half_eye	array
,	O
0	int
)	O
;	O
gprintf	function
(	O
"White eyespace at %1m: %s\n"	pointer
,	O
eyepos	int
,	O
eyevalue_to_string	function
(	O
&	O
value	pointer
)	O
)	O
;	O
if	O
(	O
eye_move_urgency	function
(	O
&	O
value	pointer
)	O
>	O
0	int
)	O
{	O
gprintf	function
(	O
"  vital points: %1m (attack) %1m (defense)\n"	pointer
,	O
attack_point	pointer
,	O
defense_point	pointer
)	O
;	O
}	O
}	O
sgffile_enddump	function
(	O
outfilename	array
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_combination	function
(	O
int	O
color	int
)	O
{	O
int	O
attack_move	pointer
;	O
signed	O
char	O
defense_moves	array
[	O
BOARDMAX	O
]	O
;	O
SGFTree	struct
tree	pointer
;	O
int	O
first	int
=	O
1	int
;	O
int	O
pos	int
;	O
reset_engine	function
(	O
)	O
;	O
silent_examine_position	function
(	O
EXAMINE_ALL	int
)	O
;	O
if	O
(	O
*	O
outfilename	array
)	O
sgffile_begindump	function
(	O
&	O
tree	pointer
)	O
;	O
count_variations	int
=	O
1	int
;	O
if	O
(	O
atari_atari	function
(	O
color	int
,	O
&	O
attack_move	pointer
,	O
defense_moves	array
,	O
verbose	int
)	O
)	O
{	O
gprintf	function
(	O
"Combination attack for %C at %1m, defense at "	pointer
,	O
color	int
,	O
attack_move	pointer
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
)	O
&&	O
defense_moves	array
[	O
pos	int
]	O
)	O
{	O
if	O
(	O
first	int
)	O
first	int
=	O
0	int
;	O
else	O
gprintf	function
(	O
", "	pointer
)	O
;	O
gprintf	function
(	O
"%1m"	pointer
,	O
pos	int
)	O
;	O
}	O
}	O
gprintf	function
(	O
"\n"	pointer
)	O
;	O
}	O
else	O
gprintf	function
(	O
"No Combination attack for %C\n"	pointer
,	O
color	int
)	O
;	O
sgffile_enddump	function
(	O
outfilename	array
)	O
;	O
count_variations	int
=	O
0	int
;	O
}	O
void	O
decide_surrounded	function
(	O
int	O
pos	int
)	O
{	O
int	O
surround_status	int
;	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"location must not be empty!\n"	pointer
)	O
;	O
return	O
;	O
}	O
reset_engine	function
(	O
)	O
;	O
silent_examine_position	function
(	O
EXAMINE_ALL	int
)	O
;	O
surround_status	int
=	O
compute_surroundings	function
(	O
pos	int
,	O
NO_MOVE	O
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
surround_status	int
==	O
1	int
)	O
gprintf	function
(	O
"the dragon at %1m is SURROUNDED!\n"	pointer
,	O
pos	int
)	O
;	O
else	O
if	O
(	O
surround_status	int
==	O
2	int
)	O
gprintf	function
(	O
"the dragon at %1m is WEAKLY SURROUNDED!\n"	pointer
,	O
pos	int
)	O
;	O
else	O
gprintf	function
(	O
"the dragon at %1m is not surrounded.\n"	pointer
,	O
pos	int
)	O
;	O
}	O
