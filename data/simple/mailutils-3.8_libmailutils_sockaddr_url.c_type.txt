static	O
struct	O
mu_kwd	struct
famtab	array
[	O
]	O
=	O
{	O
{	O
"unix"	pointer
,	O
AF_UNIX	O
}	O
,	O
{	O
"local"	pointer
,	O
AF_UNIX	O
}	O
,	O
{	O
"inet4"	pointer
,	O
AF_INET	O
}	O
,	O
{	O
"inet6"	pointer
,	O
AF_INET6	O
}	O
,	O
{	O
"inet"	pointer
,	O
AF_UNSPEC	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
mu_sockaddr_from_url	function
(	O
struct	O
mu_sockaddr	struct
*	O
*	O
retval	pointer
,	O
mu_url_t	pointer
url	pointer
,	O
struct	O
mu_sockaddr_hints	struct
*	O
mh	pointer
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
scheme	pointer
;	O
const	O
char	O
*	O
node	pointer
=	O
NULL	O
,	O
*	O
serv	pointer
=	O
NULL	O
;	O
struct	O
mu_sockaddr_hints	struct
hints	pointer
;	O
if	O
(	O
mh	pointer
)	O
memcpy	function
(	O
&	O
hints	pointer
,	O
mh	pointer
,	O
sizeof	O
(	O
hints	pointer
)	O
)	O
;	O
else	O
{	O
memset	function
(	O
&	O
hints	pointer
,	O
0	int
,	O
sizeof	O
(	O
hints	pointer
)	O
)	O
;	O
hints	pointer
.	O
family	int
=	O
AF_UNSPEC	O
;	O
hints	pointer
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
hints	pointer
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
}	O
if	O
(	O
hints	pointer
.	O
family	int
==	O
AF_UNSPEC	O
)	O
{	O
rc	int
=	O
mu_url_sget_scheme	function
(	O
url	pointer
,	O
&	O
scheme	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_kwd_xlat_name	function
(	O
famtab	array
,	O
scheme	pointer
,	O
&	O
hints	pointer
.	O
family	int
)	O
)	O
{	O
if	O
(	O
hints	pointer
.	O
flags	int
&	O
MU_AH_DETECT_FAMILY	int
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
mu_url_get_flags	function
(	O
url	pointer
,	O
&	O
flags	int
)	O
;	O
if	O
(	O
flags	int
&	O
MU_URL_IPV6	int
)	O
hints	pointer
.	O
family	int
=	O
AF_INET6	O
;	O
else	O
if	O
(	O
flags	int
&	O
(	O
MU_URL_HOST	int
|	O
MU_URL_PORT	int
)	O
)	O
hints	pointer
.	O
family	int
=	O
AF_INET	O
;	O
else	O
if	O
(	O
flags	int
&	O
MU_URL_PATH	int
)	O
hints	pointer
.	O
family	int
=	O
AF_UNIX	O
;	O
else	O
return	O
MU_ERR_FAMILY	O
;	O
}	O
else	O
return	O
MU_ERR_FAMILY	O
;	O
}	O
}	O
if	O
(	O
hints	pointer
.	O
family	int
==	O
AF_UNIX	O
)	O
{	O
rc	int
=	O
mu_url_sget_path	function
(	O
url	pointer
,	O
&	O
node	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
rc	int
=	O
mu_url_sget_host	function
(	O
url	pointer
,	O
&	O
node	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
return	O
MU_ERR_NONAME	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
hints	pointer
.	O
family	int
==	O
AF_UNSPEC	O
)	O
hints	pointer
.	O
family	int
=	O
mu_url_has_flag	function
(	O
url	pointer
,	O
MU_URL_IPV6	int
)	O
?	O
AF_INET6	O
:	O
AF_INET	O
;	O
rc	int
=	O
mu_url_sget_host	function
(	O
url	pointer
,	O
&	O
node	pointer
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
MU_ERR_NONAME	O
;	O
rc	int
=	O
mu_url_sget_portstr	function
(	O
url	pointer
,	O
&	O
serv	pointer
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
MU_ERR_NONAME	O
;	O
}	O
return	O
mu_sockaddr_from_node	function
(	O
retval	pointer
,	O
node	pointer
,	O
serv	pointer
,	O
&	O
hints	pointer
)	O
;	O
}	O
