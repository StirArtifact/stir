int	O
disconnect_helper	function
(	O
int	O
apos	int
,	O
int	O
bpos	int
)	O
{	O
int	O
color	int
=	O
board	pointer
[	O
apos	int
]	O
;	O
int	O
move	pointer
;	O
ASSERT1	O
(	O
color	int
==	O
board	pointer
[	O
bpos	int
]	O
&&	O
IS_STONE	O
(	O
color	int
)	O
,	O
apos	int
)	O
;	O
if	O
(	O
disconnect	function
(	O
apos	int
,	O
bpos	int
,	O
&	O
move	pointer
)	O
)	O
{	O
add_cut	function
(	O
apos	int
,	O
bpos	int
,	O
move	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
cut_connect_callback	function
(	O
int	O
anchor	int
,	O
int	O
color	int
,	O
struct	O
pattern	pointer
*	O
pattern	pointer
,	O
int	O
ll	int
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
move	pointer
;	O
int	O
k	int
;	O
int	O
first_dragon	int
=	O
NO_MOVE	O
;	O
int	O
second_dragon	int
=	O
NO_MOVE	O
;	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
UNUSED	O
(	O
data	pointer
)	O
;	O
move	pointer
=	O
AFFINE_TRANSFORM	O
(	O
pattern	pointer
->	O
move_offset	int
,	O
ll	int
,	O
anchor	int
)	O
;	O
if	O
(	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_B	int
)	O
&&	O
!	O
safe_move	function
(	O
move	pointer
,	O
other	int
)	O
)	O
return	O
;	O
if	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_C	int
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
pattern	pointer
->	O
patlen	int
;	O
++	O
k	int
)	O
{	O
int	O
pos	int
=	O
AFFINE_TRANSFORM	O
(	O
pattern	pointer
->	O
patn	pointer
[	O
k	int
]	O
.	O
offset	short
,	O
ll	int
,	O
anchor	int
)	O
;	O
if	O
(	O
pattern	pointer
->	O
patn	pointer
[	O
k	int
]	O
.	O
att	char
==	O
ATT_O	int
)	O
{	O
if	O
(	O
first_dragon	int
==	O
NO_MOVE	O
)	O
first_dragon	int
=	O
dragon	int
[	O
pos	int
]	O
.	O
origin	int
;	O
else	O
if	O
(	O
second_dragon	int
==	O
NO_MOVE	O
&&	O
dragon	int
[	O
pos	int
]	O
.	O
origin	int
!=	O
first_dragon	int
)	O
{	O
second_dragon	int
=	O
dragon	int
[	O
pos	int
]	O
.	O
origin	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
second_dragon	int
==	O
NO_MOVE	O
)	O
return	O
;	O
}	O
if	O
(	O
pattern	pointer
->	O
autohelper_flag	int
&	O
HAVE_CONSTRAINT	int
)	O
{	O
if	O
(	O
!	O
pattern	pointer
->	O
autohelper	pointer
(	O
ll	int
,	O
move	pointer
,	O
color	int
,	O
0	int
)	O
)	O
return	O
;	O
}	O
if	O
(	O
pattern	pointer
->	O
helper	pointer
)	O
{	O
if	O
(	O
!	O
pattern	pointer
->	O
helper	pointer
(	O
pattern	pointer
,	O
ll	int
,	O
move	pointer
,	O
color	int
)	O
)	O
return	O
;	O
}	O
if	O
(	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_B	int
)	O
&&	O
!	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_s	int
)	O
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
pattern	pointer
->	O
patlen	int
;	O
++	O
k	int
)	O
{	O
if	O
(	O
pattern	pointer
->	O
patn	pointer
[	O
k	int
]	O
.	O
att	char
==	O
ATT_X	int
)	O
{	O
int	O
pos	int
=	O
AFFINE_TRANSFORM	O
(	O
pattern	pointer
->	O
patn	pointer
[	O
k	int
]	O
.	O
offset	short
,	O
ll	int
,	O
anchor	int
)	O
;	O
if	O
(	O
attack	function
(	O
pos	int
,	O
NULL	O
)	O
==	O
WIN	int
&&	O
(	O
move	pointer
==	O
NO_MOVE	O
||	O
!	O
does_defend	function
(	O
move	pointer
,	O
pos	int
)	O
)	O
)	O
return	O
;	O
}	O
}	O
}	O
if	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_B	int
)	O
{	O
DEBUG	O
(	O
DEBUG_DRAGONS	int
,	O
"Cutting pattern %s+%d found at %1m\n"	pointer
,	O
pattern	pointer
->	O
name	short
,	O
ll	int
,	O
anchor	int
)	O
;	O
DEBUG	O
(	O
DEBUG_DRAGONS	int
,	O
"cutting point %1m\n"	pointer
,	O
move	pointer
)	O
;	O
}	O
else	O
if	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_C	int
)	O
DEBUG	O
(	O
DEBUG_DRAGONS	int
,	O
"Connecting pattern %s+%d found at %1m\n"	pointer
,	O
pattern	pointer
->	O
name	short
,	O
ll	int
,	O
anchor	int
)	O
;	O
if	O
(	O
pattern	pointer
->	O
autohelper_flag	int
&	O
HAVE_ACTION	int
)	O
{	O
pattern	pointer
->	O
autohelper	pointer
(	O
ll	int
,	O
move	pointer
,	O
color	int
,	O
1	int
)	O
;	O
}	O
if	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_B	int
)	O
{	O
cutting_points	array
[	O
move	pointer
]	O
|=	O
color	int
;	O
}	O
else	O
if	O
(	O
!	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_C	int
)	O
)	O
return	O
;	O
first_dragon	int
=	O
NO_MOVE	O
;	O
second_dragon	int
=	O
NO_MOVE	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
pattern	pointer
->	O
patlen	int
;	O
++	O
k	int
)	O
{	O
int	O
pos	int
=	O
AFFINE_TRANSFORM	O
(	O
pattern	pointer
->	O
patn	pointer
[	O
k	int
]	O
.	O
offset	short
,	O
ll	int
,	O
anchor	int
)	O
;	O
if	O
(	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_C	int
)	O
&&	O
board	pointer
[	O
pos	int
]	O
==	O
color	int
&&	O
pattern	pointer
->	O
patn	pointer
[	O
k	int
]	O
.	O
att	char
==	O
ATT_O	int
&&	O
(	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_s	int
)	O
||	O
attack	function
(	O
pos	int
,	O
NULL	O
)	O
==	O
0	int
)	O
)	O
{	O
if	O
(	O
first_dragon	int
==	O
NO_MOVE	O
)	O
first_dragon	int
=	O
dragon	int
[	O
pos	int
]	O
.	O
origin	int
;	O
else	O
if	O
(	O
second_dragon	int
==	O
NO_MOVE	O
&&	O
dragon	int
[	O
pos	int
]	O
.	O
origin	int
!=	O
first_dragon	int
)	O
{	O
second_dragon	int
=	O
dragon	int
[	O
pos	int
]	O
.	O
origin	int
;	O
if	O
(	O
verbose	int
||	O
(	O
debug	int
&	O
DEBUG_DRAGONS	int
)	O
)	O
gprintf	function
(	O
"Pattern %s joins %C dragons %1m, %1m\n"	pointer
,	O
pattern	pointer
->	O
name	short
,	O
color	int
,	O
first_dragon	int
,	O
second_dragon	int
)	O
;	O
join_dragons	function
(	O
second_dragon	int
,	O
first_dragon	int
)	O
;	O
second_dragon	int
=	O
NO_MOVE	O
;	O
first_dragon	int
=	O
dragon	int
[	O
pos	int
]	O
.	O
origin	int
;	O
}	O
}	O
if	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_B	int
)	O
{	O
if	O
(	O
pattern	pointer
->	O
patn	pointer
[	O
k	int
]	O
.	O
att	char
!=	O
ATT_not	int
)	O
break	O
;	O
cutting_points	array
[	O
pos	int
]	O
|=	O
color	int
;	O
DEBUG	O
(	O
DEBUG_DRAGONS	int
,	O
"inhibiting connection at %1m\n"	pointer
,	O
pos	int
)	O
;	O
}	O
}	O
}	O
static	O
void	O
cut_callback	function
(	O
int	O
anchor	int
,	O
int	O
color	int
,	O
struct	O
pattern	pointer
*	O
pattern	pointer
,	O
int	O
ll	int
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_B	int
)	O
cut_connect_callback	function
(	O
anchor	int
,	O
color	int
,	O
pattern	pointer
,	O
ll	int
,	O
data	pointer
)	O
;	O
}	O
static	O
void	O
conn_callback	function
(	O
int	O
anchor	int
,	O
int	O
color	int
,	O
struct	O
pattern	pointer
*	O
pattern	pointer
,	O
int	O
ll	int
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
!	O
(	O
pattern	pointer
->	O
class	int
&	O
CLASS_B	int
)	O
)	O
cut_connect_callback	function
(	O
anchor	int
,	O
color	int
,	O
pattern	pointer
,	O
ll	int
,	O
data	pointer
)	O
;	O
}	O
void	O
find_cuts	function
(	O
void	O
)	O
{	O
matchpat	function
(	O
cut_callback	function
,	O
ANCHOR_COLOR	int
,	O
&	O
conn_db	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
void	O
find_connections	function
(	O
void	O
)	O
{	O
matchpat	function
(	O
conn_callback	function
,	O
ANCHOR_COLOR	int
,	O
&	O
conn_db	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
