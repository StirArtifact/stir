static	O
unsigned	O
long	O
ring_clock	long
=	O
0	int
;	O
int	O
ring_init	function
(	O
Ring	struct
*	O
ring	pointer
,	O
unsigned	O
char	O
*	O
buffer	pointer
,	O
int	O
count	int
)	O
{	O
memset	function
(	O
(	O
char	O
*	O
)	O
ring	pointer
,	O
0	int
,	O
sizeof	O
*	O
ring	pointer
)	O
;	O
ring	pointer
->	O
size	int
=	O
count	int
;	O
ring	pointer
->	O
supply	pointer
=	O
ring	pointer
->	O
consume	pointer
=	O
ring	pointer
->	O
bottom	pointer
=	O
buffer	pointer
;	O
ring	pointer
->	O
top	pointer
=	O
ring	pointer
->	O
bottom	pointer
+	O
ring	pointer
->	O
size	int
;	O
return	O
1	int
;	O
}	O
void	O
ring_mark	function
(	O
Ring	struct
*	O
ring	pointer
)	O
{	O
ring	pointer
->	O
mark	pointer
=	O
ring_decrement	O
(	O
ring	pointer
,	O
ring	pointer
->	O
supply	pointer
,	O
1	int
)	O
;	O
}	O
int	O
ring_at_mark	function
(	O
Ring	struct
*	O
ring	pointer
)	O
{	O
if	O
(	O
ring	pointer
->	O
mark	pointer
==	O
ring	pointer
->	O
consume	pointer
)	O
{	O
return	O
1	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
void	O
ring_clear_mark	function
(	O
Ring	struct
*	O
ring	pointer
)	O
{	O
ring	pointer
->	O
mark	pointer
=	O
0	int
;	O
}	O
void	O
ring_supplied	function
(	O
Ring	struct
*	O
ring	pointer
,	O
int	O
count	int
)	O
{	O
ring	pointer
->	O
supply	pointer
=	O
ring_increment	O
(	O
ring	pointer
,	O
ring	pointer
->	O
supply	pointer
,	O
count	int
)	O
;	O
ring	pointer
->	O
supplytime	long
=	O
++	O
ring_clock	long
;	O
}	O
void	O
ring_consumed	function
(	O
Ring	struct
*	O
ring	pointer
,	O
int	O
count	int
)	O
{	O
if	O
(	O
count	int
==	O
0	int
)	O
return	O
;	O
if	O
(	O
ring	pointer
->	O
mark	pointer
&&	O
(	O
ring_subtract	O
(	O
ring	pointer
,	O
ring	pointer
->	O
mark	pointer
,	O
ring	pointer
->	O
consume	pointer
)	O
<	O
count	int
)	O
)	O
{	O
ring	pointer
->	O
mark	pointer
=	O
0	int
;	O
}	O
ring	pointer
->	O
consume	pointer
=	O
ring_increment	O
(	O
ring	pointer
,	O
ring	pointer
->	O
consume	pointer
,	O
count	int
)	O
;	O
ring	pointer
->	O
consumetime	long
=	O
++	O
ring_clock	long
;	O
if	O
(	O
ring_empty	O
(	O
ring	pointer
)	O
)	O
{	O
ring	pointer
->	O
consume	pointer
=	O
ring	pointer
->	O
supply	pointer
=	O
ring	pointer
->	O
bottom	pointer
;	O
}	O
}	O
int	O
ring_empty_count	function
(	O
Ring	struct
*	O
ring	pointer
)	O
{	O
if	O
(	O
ring_empty	O
(	O
ring	pointer
)	O
)	O
{	O
return	O
ring	pointer
->	O
size	int
;	O
}	O
else	O
{	O
return	O
ring_subtract	O
(	O
ring	pointer
,	O
ring	pointer
->	O
consume	pointer
,	O
ring	pointer
->	O
supply	pointer
)	O
;	O
}	O
}	O
int	O
ring_empty_consecutive	function
(	O
Ring	struct
*	O
ring	pointer
)	O
{	O
if	O
(	O
(	O
ring	pointer
->	O
consume	pointer
<	O
ring	pointer
->	O
supply	pointer
)	O
||	O
ring_empty	O
(	O
ring	pointer
)	O
)	O
{	O
return	O
ring_subtract	O
(	O
ring	pointer
,	O
ring	pointer
->	O
top	pointer
,	O
ring	pointer
->	O
supply	pointer
)	O
;	O
}	O
else	O
{	O
return	O
ring_subtract	O
(	O
ring	pointer
,	O
ring	pointer
->	O
consume	pointer
,	O
ring	pointer
->	O
supply	pointer
)	O
;	O
}	O
}	O
int	O
ring_full_count	function
(	O
Ring	struct
*	O
ring	pointer
)	O
{	O
if	O
(	O
(	O
ring	pointer
->	O
mark	pointer
==	O
0	int
)	O
||	O
(	O
ring	pointer
->	O
mark	pointer
==	O
ring	pointer
->	O
consume	pointer
)	O
)	O
{	O
if	O
(	O
ring_full	O
(	O
ring	pointer
)	O
)	O
{	O
return	O
ring	pointer
->	O
size	int
;	O
}	O
else	O
{	O
return	O
ring_subtract	O
(	O
ring	pointer
,	O
ring	pointer
->	O
supply	pointer
,	O
ring	pointer
->	O
consume	pointer
)	O
;	O
}	O
}	O
else	O
{	O
return	O
ring_subtract	O
(	O
ring	pointer
,	O
ring	pointer
->	O
mark	pointer
,	O
ring	pointer
->	O
consume	pointer
)	O
;	O
}	O
}	O
int	O
ring_full_consecutive	function
(	O
Ring	struct
*	O
ring	pointer
)	O
{	O
if	O
(	O
(	O
ring	pointer
->	O
mark	pointer
==	O
0	int
)	O
||	O
(	O
ring	pointer
->	O
mark	pointer
==	O
ring	pointer
->	O
consume	pointer
)	O
)	O
{	O
if	O
(	O
(	O
ring	pointer
->	O
supply	pointer
<	O
ring	pointer
->	O
consume	pointer
)	O
||	O
ring_full	O
(	O
ring	pointer
)	O
)	O
{	O
return	O
ring_subtract	O
(	O
ring	pointer
,	O
ring	pointer
->	O
top	pointer
,	O
ring	pointer
->	O
consume	pointer
)	O
;	O
}	O
else	O
{	O
return	O
ring_subtract	O
(	O
ring	pointer
,	O
ring	pointer
->	O
supply	pointer
,	O
ring	pointer
->	O
consume	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
ring	pointer
->	O
mark	pointer
<	O
ring	pointer
->	O
consume	pointer
)	O
{	O
return	O
ring_subtract	O
(	O
ring	pointer
,	O
ring	pointer
->	O
top	pointer
,	O
ring	pointer
->	O
consume	pointer
)	O
;	O
}	O
else	O
{	O
return	O
ring_subtract	O
(	O
ring	pointer
,	O
ring	pointer
->	O
mark	pointer
,	O
ring	pointer
->	O
consume	pointer
)	O
;	O
}	O
}	O
}	O
void	O
ring_supply_data	function
(	O
Ring	struct
*	O
ring	pointer
,	O
unsigned	O
char	O
*	O
buffer	pointer
,	O
int	O
count	int
)	O
{	O
int	O
i	int
;	O
while	O
(	O
count	int
)	O
{	O
i	int
=	O
MIN	O
(	O
count	int
,	O
ring_empty_consecutive	function
(	O
ring	pointer
)	O
)	O
;	O
memmove	function
(	O
ring	pointer
->	O
supply	pointer
,	O
buffer	pointer
,	O
i	int
)	O
;	O
ring_supplied	function
(	O
ring	pointer
,	O
i	int
)	O
;	O
count	int
-=	O
i	int
;	O
buffer	pointer
+=	O
i	int
;	O
}	O
}	O
