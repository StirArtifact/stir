struct	O
list_entry	struct
{	O
struct	O
list_entry	struct
*	O
next	pointer
,	O
*	O
prev	pointer
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
struct	O
dico_list	struct
{	O
size_t	long
count	long
;	O
struct	O
list_entry	struct
*	O
head	pointer
,	O
*	O
tail	pointer
;	O
int	O
flags	int
;	O
struct	O
iterator	struct
*	O
itr	pointer
;	O
dico_list_comp_t	pointer
comp_fun	pointer
;	O
void	O
*	O
comp_data	pointer
;	O
dico_list_iterator_t	pointer
free_item	pointer
;	O
void	O
*	O
free_data	pointer
;	O
}	O
;	O
struct	O
iterator	struct
{	O
struct	O
iterator	struct
*	O
next	pointer
;	O
dico_list_t	pointer
list	array
;	O
struct	O
list_entry	struct
*	O
cur	pointer
;	O
int	O
advanced	int
;	O
size_t	long
pos	long
;	O
}	O
;	O
static	O
int	O
cmp_ptr	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
return	O
a	pointer
!=	O
b	pointer
;	O
}	O
struct	O
dico_list	struct
*	O
dico_list_create	function
(	O
void	O
)	O
{	O
struct	O
dico_list	struct
*	O
p	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
p	pointer
->	O
count	long
=	O
0	int
;	O
p	pointer
->	O
head	pointer
=	O
p	pointer
->	O
tail	pointer
=	O
NULL	O
;	O
p	pointer
->	O
flags	int
=	O
0	int
;	O
p	pointer
->	O
itr	pointer
=	O
NULL	O
;	O
p	pointer
->	O
comp_fun	pointer
=	O
cmp_ptr	function
;	O
p	pointer
->	O
comp_data	pointer
=	O
NULL	O
;	O
p	pointer
->	O
free_item	pointer
=	O
NULL	O
;	O
p	pointer
->	O
free_data	pointer
=	O
NULL	O
;	O
}	O
return	O
p	pointer
;	O
}	O
int	O
dico_list_clear	function
(	O
struct	O
dico_list	struct
*	O
list	array
)	O
{	O
struct	O
list_entry	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
p	pointer
=	O
list	array
->	O
head	pointer
;	O
list	array
->	O
head	pointer
=	O
list	array
->	O
tail	pointer
=	O
NULL	O
;	O
list	array
->	O
count	long
=	O
0	int
;	O
while	O
(	O
p	pointer
)	O
{	O
struct	O
list_entry	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
list	array
->	O
free_item	pointer
)	O
list	array
->	O
free_item	pointer
(	O
p	pointer
->	O
data	pointer
,	O
list	array
->	O
free_data	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
}	O
return	O
0	int
;	O
}	O
void	O
dico_list_destroy	function
(	O
struct	O
dico_list	struct
*	O
*	O
plist	pointer
)	O
{	O
struct	O
dico_list	struct
*	O
list	array
;	O
if	O
(	O
!	O
plist	pointer
||	O
!	O
*	O
plist	pointer
)	O
return	O
;	O
list	array
=	O
*	O
plist	pointer
;	O
*	O
plist	pointer
=	O
NULL	O
;	O
dico_list_clear	function
(	O
list	array
)	O
;	O
free	function
(	O
list	array
)	O
;	O
}	O
void	O
dico_list_free_item	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
void	O
*	O
item	pointer
)	O
{	O
if	O
(	O
list	array
->	O
free_item	pointer
)	O
list	array
->	O
free_item	pointer
(	O
item	pointer
,	O
list	array
->	O
free_data	pointer
)	O
;	O
}	O
void	O
*	O
dico_iterator_current	function
(	O
dico_iterator_t	pointer
ip	pointer
)	O
{	O
if	O
(	O
!	O
ip	pointer
)	O
return	O
NULL	O
;	O
return	O
ip	pointer
->	O
cur	pointer
?	O
ip	pointer
->	O
cur	pointer
->	O
data	pointer
:	O
NULL	O
;	O
}	O
size_t	long
dico_iterator_position	function
(	O
dico_iterator_t	pointer
ip	pointer
)	O
{	O
if	O
(	O
!	O
ip	pointer
)	O
return	O
0	int
;	O
return	O
ip	pointer
->	O
pos	long
;	O
}	O
static	O
void	O
dico_iterator_attach	function
(	O
dico_iterator_t	pointer
itr	pointer
,	O
dico_list_t	pointer
list	array
)	O
{	O
itr	pointer
->	O
list	array
=	O
list	array
;	O
itr	pointer
->	O
cur	pointer
=	O
list	array
->	O
head	pointer
;	O
itr	pointer
->	O
next	pointer
=	O
list	array
->	O
itr	pointer
;	O
itr	pointer
->	O
advanced	int
=	O
0	int
;	O
itr	pointer
->	O
pos	long
=	O
0	int
;	O
list	array
->	O
itr	pointer
=	O
itr	pointer
;	O
}	O
static	O
dico_iterator_t	pointer
dico_iterator_detach	function
(	O
dico_iterator_t	pointer
iter	pointer
)	O
{	O
dico_iterator_t	pointer
cur	pointer
,	O
prev	pointer
;	O
for	O
(	O
cur	pointer
=	O
iter	pointer
->	O
list	array
->	O
itr	pointer
,	O
prev	pointer
=	O
NULL	O
;	O
cur	pointer
;	O
prev	pointer
=	O
cur	pointer
,	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
)	O
if	O
(	O
cur	pointer
==	O
iter	pointer
)	O
break	O
;	O
if	O
(	O
cur	pointer
)	O
{	O
if	O
(	O
prev	pointer
)	O
prev	pointer
->	O
next	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
else	O
cur	pointer
->	O
list	array
->	O
itr	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
}	O
return	O
cur	pointer
;	O
}	O
dico_iterator_t	pointer
dico_list_iterator	function
(	O
dico_list_t	pointer
list	array
)	O
{	O
dico_iterator_t	pointer
itr	pointer
;	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
NULL	O
;	O
}	O
itr	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
itr	pointer
)	O
)	O
;	O
if	O
(	O
itr	pointer
)	O
dico_iterator_attach	function
(	O
itr	pointer
,	O
list	array
)	O
;	O
return	O
itr	pointer
;	O
}	O
void	O
dico_iterator_destroy	function
(	O
dico_iterator_t	pointer
*	O
ip	pointer
)	O
{	O
dico_iterator_t	pointer
itr	pointer
;	O
if	O
(	O
!	O
ip	pointer
||	O
!	O
*	O
ip	pointer
)	O
return	O
;	O
itr	pointer
=	O
dico_iterator_detach	function
(	O
*	O
ip	pointer
)	O
;	O
if	O
(	O
itr	pointer
)	O
free	function
(	O
itr	pointer
)	O
;	O
*	O
ip	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
_iterator_increase_pos	function
(	O
dico_iterator_t	pointer
ip	pointer
,	O
size_t	long
after	long
)	O
{	O
for	O
(	O
;	O
ip	pointer
;	O
ip	pointer
=	O
ip	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
ip	pointer
->	O
pos	long
>	O
after	long
)	O
ip	pointer
->	O
pos	long
++	O
;	O
}	O
}	O
static	O
void	O
_iterator_advance	function
(	O
dico_iterator_t	pointer
ip	pointer
,	O
struct	O
list_entry	struct
*	O
e	pointer
)	O
{	O
for	O
(	O
;	O
ip	pointer
;	O
ip	pointer
=	O
ip	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
ip	pointer
->	O
cur	pointer
==	O
e	pointer
)	O
{	O
ip	pointer
->	O
cur	pointer
=	O
e	pointer
->	O
next	pointer
;	O
ip	pointer
->	O
advanced	int
++	O
;	O
}	O
}	O
}	O
void	O
*	O
dico_iterator_first	function
(	O
dico_iterator_t	pointer
ip	pointer
)	O
{	O
if	O
(	O
!	O
ip	pointer
)	O
return	O
NULL	O
;	O
ip	pointer
->	O
cur	pointer
=	O
ip	pointer
->	O
list	array
->	O
head	pointer
;	O
ip	pointer
->	O
advanced	int
=	O
0	int
;	O
ip	pointer
->	O
pos	long
=	O
0	int
;	O
return	O
dico_iterator_current	function
(	O
ip	pointer
)	O
;	O
}	O
void	O
*	O
dico_iterator_next	function
(	O
dico_iterator_t	pointer
ip	pointer
)	O
{	O
if	O
(	O
!	O
ip	pointer
||	O
!	O
ip	pointer
->	O
cur	pointer
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
ip	pointer
->	O
advanced	int
)	O
{	O
ip	pointer
->	O
cur	pointer
=	O
ip	pointer
->	O
cur	pointer
->	O
next	pointer
;	O
ip	pointer
->	O
pos	long
++	O
;	O
}	O
ip	pointer
->	O
advanced	int
=	O
0	int
;	O
return	O
dico_iterator_current	function
(	O
ip	pointer
)	O
;	O
}	O
void	O
*	O
dico_iterator_prev	function
(	O
dico_iterator_t	pointer
ip	pointer
)	O
{	O
if	O
(	O
!	O
ip	pointer
||	O
!	O
ip	pointer
->	O
cur	pointer
)	O
return	O
NULL	O
;	O
ip	pointer
->	O
cur	pointer
=	O
ip	pointer
->	O
cur	pointer
->	O
prev	pointer
;	O
if	O
(	O
!	O
ip	pointer
->	O
advanced	int
)	O
ip	pointer
->	O
pos	long
--	O
;	O
ip	pointer
->	O
advanced	int
=	O
0	int
;	O
return	O
dico_iterator_current	function
(	O
ip	pointer
)	O
;	O
}	O
void	O
*	O
dico_iterator_item	function
(	O
dico_iterator_t	pointer
ip	pointer
,	O
size_t	long
n	long
)	O
{	O
if	O
(	O
n	long
>	O
ip	pointer
->	O
pos	long
)	O
{	O
if	O
(	O
!	O
ip	pointer
->	O
advanced	int
)	O
{	O
ip	pointer
->	O
cur	pointer
=	O
ip	pointer
->	O
cur	pointer
->	O
next	pointer
;	O
ip	pointer
->	O
pos	long
++	O
;	O
}	O
ip	pointer
->	O
advanced	int
=	O
0	int
;	O
while	O
(	O
ip	pointer
->	O
cur	pointer
&&	O
ip	pointer
->	O
pos	long
<	O
n	long
)	O
{	O
ip	pointer
->	O
cur	pointer
=	O
ip	pointer
->	O
cur	pointer
->	O
next	pointer
;	O
ip	pointer
->	O
pos	long
++	O
;	O
}	O
}	O
else	O
if	O
(	O
n	long
<	O
ip	pointer
->	O
pos	long
)	O
{	O
if	O
(	O
!	O
ip	pointer
->	O
advanced	int
)	O
ip	pointer
->	O
pos	long
--	O
;	O
ip	pointer
->	O
advanced	int
=	O
0	int
;	O
while	O
(	O
ip	pointer
->	O
cur	pointer
&&	O
ip	pointer
->	O
pos	long
>	O
n	long
)	O
{	O
ip	pointer
->	O
cur	pointer
=	O
ip	pointer
->	O
cur	pointer
->	O
prev	pointer
;	O
ip	pointer
->	O
pos	long
--	O
;	O
}	O
}	O
return	O
dico_iterator_current	function
(	O
ip	pointer
)	O
;	O
}	O
static	O
void	O
_dico_list_remove_item	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
struct	O
list_entry	struct
*	O
p	pointer
,	O
void	O
*	O
*	O
pptr	pointer
)	O
;	O
void	O
dico_iterator_remove_current	function
(	O
dico_iterator_t	pointer
ip	pointer
,	O
void	O
*	O
*	O
pptr	pointer
)	O
{	O
_dico_list_remove_item	function
(	O
ip	pointer
->	O
list	array
,	O
ip	pointer
->	O
cur	pointer
,	O
pptr	pointer
)	O
;	O
}	O
void	O
dico_iterator_set_data	function
(	O
dico_iterator_t	pointer
ip	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
ip	pointer
->	O
cur	pointer
->	O
data	pointer
=	O
data	pointer
;	O
}	O
void	O
*	O
dico_list_head	function
(	O
struct	O
dico_list	struct
*	O
list	array
)	O
{	O
return	O
list	array
->	O
head	pointer
?	O
list	array
->	O
head	pointer
->	O
data	pointer
:	O
NULL	O
;	O
}	O
void	O
*	O
dico_list_tail	function
(	O
struct	O
dico_list	struct
*	O
list	array
)	O
{	O
return	O
list	array
->	O
tail	pointer
?	O
list	array
->	O
tail	pointer
->	O
data	pointer
:	O
NULL	O
;	O
}	O
void	O
*	O
dico_list_item	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
size_t	long
n	long
)	O
{	O
struct	O
list_entry	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
list	array
||	O
n	long
>=	O
list	array
->	O
count	long
)	O
return	O
NULL	O
;	O
for	O
(	O
p	pointer
=	O
list	array
->	O
head	pointer
;	O
n	long
>	O
0	int
&&	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
,	O
n	long
--	O
)	O
;	O
return	O
p	pointer
->	O
data	pointer
;	O
}	O
size_t	long
dico_list_count	function
(	O
struct	O
dico_list	struct
*	O
list	array
)	O
{	O
if	O
(	O
!	O
list	array
)	O
return	O
0	int
;	O
return	O
list	array
->	O
count	long
;	O
}	O
int	O
dico_list_set_free_item	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
dico_list_iterator_t	pointer
free_item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
list	array
->	O
free_item	pointer
=	O
free_item	pointer
;	O
list	array
->	O
free_data	pointer
=	O
data	pointer
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_set_comparator	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
dico_list_comp_t	pointer
comp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
list	array
->	O
comp_fun	pointer
=	O
comp	pointer
;	O
list	array
->	O
comp_data	pointer
=	O
data	pointer
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_set_comparator_data	function
(	O
dico_list_t	pointer
list	array
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
list	array
->	O
comp_data	pointer
=	O
data	pointer
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_set_flags	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
list	array
->	O
flags	int
=	O
flags	int
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_get_flags	function
(	O
struct	O
dico_list	struct
*	O
list	array
)	O
{	O
if	O
(	O
list	array
)	O
return	O
list	array
->	O
flags	int
;	O
return	O
0	int
;	O
}	O
dico_list_comp_t	pointer
dico_list_get_comparator	function
(	O
struct	O
dico_list	struct
*	O
list	array
)	O
{	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
NULL	O
;	O
}	O
return	O
list	array
->	O
comp_fun	pointer
;	O
}	O
void	O
*	O
dico_list_get_comparator_data	function
(	O
struct	O
dico_list	struct
*	O
list	array
)	O
{	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
NULL	O
;	O
}	O
return	O
list	array
->	O
comp_data	pointer
;	O
}	O
int	O
_dico_list_append	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
list_entry	struct
*	O
ep	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
ep	pointer
)	O
)	O
;	O
if	O
(	O
!	O
ep	pointer
)	O
return	O
1	int
;	O
ep	pointer
->	O
next	pointer
=	O
NULL	O
;	O
ep	pointer
->	O
prev	pointer
=	O
list	array
->	O
tail	pointer
;	O
ep	pointer
->	O
data	pointer
=	O
data	pointer
;	O
if	O
(	O
list	array
->	O
tail	pointer
)	O
list	array
->	O
tail	pointer
->	O
next	pointer
=	O
ep	pointer
;	O
else	O
list	array
->	O
head	pointer
=	O
ep	pointer
;	O
list	array
->	O
tail	pointer
=	O
ep	pointer
;	O
list	array
->	O
count	long
++	O
;	O
return	O
0	int
;	O
}	O
int	O
_dico_list_prepend	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
list_entry	struct
*	O
ep	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
ep	pointer
)	O
)	O
;	O
if	O
(	O
!	O
ep	pointer
)	O
return	O
1	int
;	O
ep	pointer
->	O
data	pointer
=	O
data	pointer
;	O
ep	pointer
->	O
next	pointer
=	O
list	array
->	O
head	pointer
;	O
ep	pointer
->	O
prev	pointer
=	O
NULL	O
;	O
list	array
->	O
head	pointer
=	O
ep	pointer
;	O
if	O
(	O
!	O
list	array
->	O
tail	pointer
)	O
list	array
->	O
tail	pointer
=	O
list	array
->	O
head	pointer
;	O
list	array
->	O
count	long
++	O
;	O
_iterator_increase_pos	function
(	O
list	array
->	O
itr	pointer
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_append	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
(	O
list	array
->	O
flags	int
&	O
DICO_LIST_COMPARE_TAIL	int
)	O
&&	O
list	array
->	O
comp_fun	pointer
&&	O
list	array
->	O
tail	pointer
&&	O
list	array
->	O
comp_fun	pointer
(	O
list	array
->	O
tail	pointer
->	O
data	pointer
,	O
data	pointer
,	O
list	array
->	O
comp_data	pointer
)	O
==	O
0	int
)	O
{	O
errno	O
=	O
EEXIST	int
;	O
return	O
1	int
;	O
}	O
return	O
_dico_list_append	function
(	O
list	array
,	O
data	pointer
)	O
;	O
}	O
int	O
dico_list_prepend	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
(	O
list	array
->	O
flags	int
&	O
DICO_LIST_COMPARE_HEAD	int
)	O
&&	O
list	array
->	O
comp_fun	pointer
&&	O
list	array
->	O
head	pointer
&&	O
list	array
->	O
comp_fun	pointer
(	O
list	array
->	O
head	pointer
->	O
data	pointer
,	O
data	pointer
,	O
list	array
->	O
comp_data	pointer
)	O
==	O
0	int
)	O
{	O
errno	O
=	O
EEXIST	int
;	O
return	O
1	int
;	O
}	O
return	O
_dico_list_prepend	function
(	O
list	array
,	O
data	pointer
)	O
;	O
}	O
static	O
void	O
_dico_list_remove_item	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
struct	O
list_entry	struct
*	O
p	pointer
,	O
void	O
*	O
*	O
pptr	pointer
)	O
{	O
struct	O
list_entry	struct
*	O
prev	pointer
;	O
_iterator_advance	function
(	O
list	array
->	O
itr	pointer
,	O
p	pointer
)	O
;	O
prev	pointer
=	O
p	pointer
->	O
prev	pointer
;	O
if	O
(	O
prev	pointer
)	O
prev	pointer
->	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
else	O
list	array
->	O
head	pointer
=	O
list	array
->	O
head	pointer
->	O
next	pointer
;	O
if	O
(	O
p	pointer
->	O
next	pointer
)	O
p	pointer
->	O
next	pointer
->	O
prev	pointer
=	O
prev	pointer
;	O
else	O
list	array
->	O
tail	pointer
=	O
prev	pointer
;	O
list	array
->	O
count	long
--	O
;	O
if	O
(	O
pptr	pointer
)	O
*	O
pptr	pointer
=	O
p	pointer
->	O
data	pointer
;	O
else	O
if	O
(	O
list	array
->	O
free_item	pointer
)	O
list	array
->	O
free_item	pointer
(	O
p	pointer
->	O
data	pointer
,	O
list	array
->	O
free_data	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
int	O
_dico_list_remove	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
void	O
*	O
data	pointer
,	O
dico_list_comp_t	pointer
cmp	pointer
,	O
void	O
*	O
cmpdata	pointer
,	O
void	O
*	O
*	O
pptr	pointer
)	O
{	O
struct	O
list_entry	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
list	array
||	O
!	O
list	array
->	O
head	pointer
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
cmp	pointer
)	O
cmp	pointer
=	O
cmp_ptr	function
;	O
for	O
(	O
p	pointer
=	O
list	array
->	O
head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
cmp	pointer
(	O
p	pointer
->	O
data	pointer
,	O
data	pointer
,	O
cmpdata	pointer
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
return	O
1	int
;	O
}	O
_dico_list_remove_item	function
(	O
list	array
,	O
p	pointer
,	O
pptr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dico_list_remove	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
void	O
*	O
data	pointer
,	O
void	O
*	O
*	O
pret	pointer
)	O
{	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
return	O
_dico_list_remove	function
(	O
list	array
,	O
data	pointer
,	O
list	array
->	O
comp_fun	pointer
,	O
list	array
->	O
comp_data	pointer
,	O
pret	pointer
)	O
;	O
}	O
void	O
*	O
dico_list_pop	function
(	O
struct	O
dico_list	struct
*	O
list	array
)	O
{	O
void	O
*	O
p	pointer
;	O
if	O
(	O
!	O
list	array
->	O
tail	pointer
)	O
return	O
NULL	O
;	O
_dico_list_remove_item	function
(	O
list	array
,	O
list	array
->	O
tail	pointer
,	O
&	O
p	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
void	O
dico_list_iterate	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
dico_list_iterator_t	pointer
func	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
iterator	struct
itr	pointer
;	O
void	O
*	O
p	pointer
;	O
if	O
(	O
!	O
list	array
)	O
return	O
;	O
dico_iterator_attach	function
(	O
&	O
itr	pointer
,	O
list	array
)	O
;	O
for	O
(	O
p	pointer
=	O
dico_iterator_first	function
(	O
&	O
itr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
dico_iterator_next	function
(	O
&	O
itr	pointer
)	O
)	O
{	O
if	O
(	O
func	pointer
(	O
p	pointer
,	O
data	pointer
)	O
)	O
break	O
;	O
}	O
dico_iterator_detach	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
void	O
*	O
_dico_list_locate	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
void	O
*	O
data	pointer
,	O
dico_list_comp_t	pointer
cmp	pointer
,	O
void	O
*	O
cmpdata	pointer
)	O
{	O
struct	O
list_entry	struct
*	O
cur	pointer
;	O
if	O
(	O
!	O
list	array
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
cmp	pointer
)	O
cmp	pointer
=	O
cmp_ptr	function
;	O
for	O
(	O
cur	pointer
=	O
list	array
->	O
head	pointer
;	O
cur	pointer
;	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
)	O
if	O
(	O
cmp	pointer
(	O
cur	pointer
->	O
data	pointer
,	O
data	pointer
,	O
cmpdata	pointer
)	O
==	O
0	int
)	O
break	O
;	O
return	O
cur	pointer
?	O
cur	pointer
->	O
data	pointer
:	O
NULL	O
;	O
}	O
void	O
*	O
dico_list_locate	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
!	O
list	array
)	O
return	O
NULL	O
;	O
return	O
_dico_list_locate	function
(	O
list	array
,	O
data	pointer
,	O
list	array
->	O
comp_fun	pointer
,	O
list	array
->	O
comp_data	pointer
)	O
;	O
}	O
int	O
_dico_list_insert_sorted	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
void	O
*	O
data	pointer
,	O
dico_list_comp_t	pointer
cmp	pointer
,	O
void	O
*	O
cmpdata	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
list_entry	struct
*	O
cur	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
cmp	pointer
)	O
cmp	pointer
=	O
cmp_ptr	function
;	O
if	O
(	O
!	O
list	array
->	O
head	pointer
)	O
return	O
_dico_list_append	function
(	O
list	array
,	O
data	pointer
)	O
;	O
for	O
(	O
cur	pointer
=	O
list	array
->	O
head	pointer
,	O
i	long
=	O
0	int
;	O
cur	pointer
;	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
,	O
i	long
++	O
)	O
{	O
int	O
res	int
=	O
cmp	pointer
(	O
cur	pointer
->	O
data	pointer
,	O
data	pointer
,	O
cmpdata	pointer
)	O
;	O
if	O
(	O
res	int
>	O
0	int
)	O
break	O
;	O
else	O
if	O
(	O
res	int
==	O
0	int
&&	O
list	array
->	O
flags	int
)	O
return	O
EEXIST	int
;	O
}	O
if	O
(	O
cur	pointer
&&	O
!	O
cur	pointer
->	O
prev	pointer
)	O
{	O
rc	int
=	O
_dico_list_prepend	function
(	O
list	array
,	O
data	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
cur	pointer
)	O
{	O
rc	int
=	O
_dico_list_append	function
(	O
list	array
,	O
data	pointer
)	O
;	O
}	O
else	O
{	O
struct	O
list_entry	struct
*	O
ep	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
ep	pointer
)	O
)	O
;	O
if	O
(	O
ep	pointer
)	O
{	O
struct	O
list_entry	struct
*	O
prev	pointer
=	O
cur	pointer
->	O
prev	pointer
;	O
rc	int
=	O
0	int
;	O
ep	pointer
->	O
data	pointer
=	O
data	pointer
;	O
ep	pointer
->	O
next	pointer
=	O
cur	pointer
;	O
cur	pointer
->	O
prev	pointer
=	O
ep	pointer
;	O
ep	pointer
->	O
prev	pointer
=	O
prev	pointer
;	O
prev	pointer
->	O
next	pointer
=	O
ep	pointer
;	O
_iterator_increase_pos	function
(	O
list	array
->	O
itr	pointer
,	O
i	long
-	O
1	int
)	O
;	O
list	array
->	O
count	long
++	O
;	O
}	O
else	O
rc	int
=	O
1	int
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
dico_list_insert_sorted	function
(	O
struct	O
dico_list	struct
*	O
list	array
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
!	O
list	array
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
return	O
_dico_list_insert_sorted	function
(	O
list	array
,	O
data	pointer
,	O
list	array
->	O
comp_fun	pointer
,	O
list	array
->	O
comp_data	pointer
)	O
;	O
}	O
dico_list_t	pointer
dico_list_intersect	function
(	O
dico_list_t	pointer
a	pointer
,	O
dico_list_t	pointer
b	pointer
,	O
dico_list_comp_t	pointer
cmp	pointer
,	O
void	O
*	O
cmpdata	pointer
)	O
{	O
dico_list_t	pointer
res	int
;	O
dico_iterator_t	pointer
itr	pointer
=	O
dico_list_iterator	function
(	O
a	pointer
)	O
;	O
void	O
*	O
p	pointer
;	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
NULL	O
;	O
res	int
=	O
dico_list_create	function
(	O
)	O
;	O
if	O
(	O
!	O
res	int
)	O
return	O
NULL	O
;	O
for	O
(	O
p	pointer
=	O
dico_iterator_first	function
(	O
itr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
dico_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
if	O
(	O
_dico_list_locate	function
(	O
b	pointer
,	O
p	pointer
,	O
cmp	pointer
,	O
cmpdata	pointer
)	O
)	O
_dico_list_append	function
(	O
res	int
,	O
p	pointer
)	O
;	O
}	O
dico_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
res	int
;	O
}	O
int	O
dico_list_intersect_p	function
(	O
dico_list_t	pointer
a	pointer
,	O
dico_list_t	pointer
b	pointer
,	O
dico_list_comp_t	pointer
cmp	pointer
,	O
void	O
*	O
cmpdata	pointer
)	O
{	O
dico_iterator_t	pointer
itr	pointer
=	O
dico_list_iterator	function
(	O
a	pointer
)	O
;	O
void	O
*	O
p	pointer
;	O
int	O
rc	int
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
dico_iterator_first	function
(	O
itr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
dico_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
if	O
(	O
_dico_list_locate	function
(	O
b	pointer
,	O
p	pointer
,	O
cmp	pointer
,	O
cmpdata	pointer
)	O
)	O
{	O
rc	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
dico_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
