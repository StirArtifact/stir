void	O
let_var_list	function
(	O
object	O
var_list	int
)	O
{	O
object	O
x	O
,	O
y	O
;	O
for	O
(	O
x	O
=	O
var_list	int
;	O
!	O
endp	function
(	O
x	O
)	O
;	O
x	O
=	O
x	O
->	O
c	O
.	O
c_cdr	O
)	O
{	O
y	O
=	O
x	O
->	O
c	O
.	O
c_car	O
;	O
if	O
(	O
type_of	function
(	O
y	O
)	O
==	O
t_symbol	O
)	O
{	O
check_var	function
(	O
y	O
)	O
;	O
vs_push	function
(	O
y	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
}	O
else	O
{	O
endp	function
(	O
y	O
)	O
;	O
check_var	function
(	O
y	O
->	O
c	O
.	O
c_car	O
)	O
;	O
vs_push	function
(	O
y	O
->	O
c	O
.	O
c_car	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
y	O
=	O
y	O
->	O
c	O
.	O
c_cdr	O
;	O
if	O
(	O
endp	function
(	O
y	O
)	O
)	O
;	O
else	O
if	O
(	O
!	O
endp	function
(	O
y	O
->	O
c	O
.	O
c_cdr	O
)	O
)	O
FEerror	function
(	O
"Too many initial forms to the variable ~S."	pointer
,	O
1	int
,	O
vs_top	O
[	O
-	O
2	int
]	O
)	O
;	O
vs_push	function
(	O
y	O
->	O
c	O
.	O
c_car	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
}	O
}	O
}	O
static	O
void	O
FFN	function
(	O
Flet	int
)	O
(	O
object	O
form	int
)	O
{	O
object	O
body	O
;	O
struct	O
bind_temp	O
*	O
start	pointer
;	O
object	O
*	O
old_lex	O
;	O
bds_ptr	O
old_bds_top	O
;	O
if	O
(	O
endp	function
(	O
form	int
)	O
)	O
FEerror	function
(	O
"No argument to LET."	pointer
,	O
0	int
)	O
;	O
old_lex	O
=	O
lex_env	O
;	O
lex_copy	function
(	O
)	O
;	O
old_bds_top	O
=	O
bds_top	O
;	O
start	pointer
=	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
;	O
let_var_list	function
(	O
form	int
->	O
c	O
.	O
c_car	O
)	O
;	O
body	O
=	O
let_bind	function
(	O
form	int
->	O
c	O
.	O
c_cdr	O
,	O
start	pointer
,	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
)	O
;	O
vs_top	O
=	O
(	O
object	O
*	O
)	O
start	pointer
;	O
vs_push	function
(	O
body	O
)	O
;	O
Fprogn	function
(	O
body	O
)	O
;	O
lex_env	O
=	O
old_lex	O
;	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
}	O
static	O
void	O
FFN	function
(	O
FletA	int
)	O
(	O
object	O
form	int
)	O
{	O
object	O
body	O
;	O
struct	O
bind_temp	O
*	O
start	pointer
;	O
object	O
*	O
old_lex	O
;	O
bds_ptr	O
old_bds_top	O
;	O
if	O
(	O
endp	function
(	O
form	int
)	O
)	O
FEerror	function
(	O
"No argument to LET*."	pointer
,	O
0	int
)	O
;	O
old_lex	O
=	O
lex_env	O
;	O
lex_copy	function
(	O
)	O
;	O
old_bds_top	O
=	O
bds_top	O
;	O
start	pointer
=	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
;	O
let_var_list	function
(	O
form	int
->	O
c	O
.	O
c_car	O
)	O
;	O
body	O
=	O
letA_bind	function
(	O
form	int
->	O
c	O
.	O
c_cdr	O
,	O
start	pointer
,	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
)	O
;	O
vs_top	O
=	O
(	O
object	O
*	O
)	O
start	pointer
;	O
vs_push	function
(	O
body	O
)	O
;	O
Fprogn	function
(	O
body	O
)	O
;	O
lex_env	O
=	O
old_lex	O
;	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Fmultiple_value_bind	int
)	O
(	O
object	O
form	int
)	O
{	O
object	O
body	O
,	O
values_form	O
,	O
x	O
,	O
y	O
;	O
int	O
n	int
,	O
m	int
,	O
i	int
;	O
object	O
*	O
base	O
;	O
object	O
*	O
old_lex	O
;	O
bds_ptr	O
old_bds_top	O
;	O
struct	O
bind_temp	O
*	O
start	pointer
;	O
if	O
(	O
endp	function
(	O
form	int
)	O
)	O
FEerror	function
(	O
"No argument to MULTIPLE-VALUE-BIND."	pointer
,	O
0	int
)	O
;	O
body	O
=	O
form	int
->	O
c	O
.	O
c_cdr	O
;	O
if	O
(	O
endp	function
(	O
body	O
)	O
)	O
FEerror	function
(	O
"No values-form to MULTIPLE-VALUE-BIND."	pointer
,	O
0	int
)	O
;	O
values_form	O
=	O
body	O
->	O
c	O
.	O
c_car	O
;	O
body	O
=	O
body	O
->	O
c	O
.	O
c_cdr	O
;	O
old_lex	O
=	O
lex_env	O
;	O
lex_copy	function
(	O
)	O
;	O
old_bds_top	O
=	O
bds_top	O
;	O
eval	function
(	O
values_form	O
)	O
;	O
base	O
=	O
vs_base	O
;	O
m	int
=	O
vs_top	O
-	O
vs_base	O
;	O
start	pointer
=	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
;	O
for	O
(	O
n	int
=	O
0	int
,	O
x	O
=	O
form	int
->	O
c	O
.	O
c_car	O
;	O
!	O
endp	function
(	O
x	O
)	O
;	O
n	int
++	O
,	O
x	O
=	O
x	O
->	O
c	O
.	O
c_cdr	O
)	O
{	O
y	O
=	O
x	O
->	O
c	O
.	O
c_car	O
;	O
check_var	function
(	O
y	O
)	O
;	O
vs_push	function
(	O
y	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
}	O
{	O
object	O
*	O
vt	O
=	O
vs_top	O
;	O
vs_push	function
(	O
find_special	function
(	O
body	O
,	O
start	pointer
,	O
(	O
struct	O
bind_temp	O
*	O
)	O
vt	O
)	O
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
bind_var	function
(	O
start	pointer
[	O
i	int
]	O
.	O
bt_var	O
,	O
(	O
i	int
<	O
m	int
?	O
base	O
[	O
i	int
]	O
:	O
Cnil	O
)	O
,	O
start	pointer
[	O
i	int
]	O
.	O
bt_spp	O
)	O
;	O
body	O
=	O
vs_pop	O
;	O
vs_top	O
=	O
vs_base	O
=	O
base	O
;	O
vs_push	function
(	O
body	O
)	O
;	O
Fprogn	function
(	O
body	O
)	O
;	O
lex_env	O
=	O
old_lex	O
;	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Fcompiler_let	int
)	O
(	O
object	O
form	int
)	O
{	O
object	O
body	O
;	O
object	O
*	O
old_lex	O
;	O
bds_ptr	O
old_bds_top	O
;	O
struct	O
bind_temp	O
*	O
start	pointer
,	O
*	O
end	pointer
,	O
*	O
bt	pointer
;	O
if	O
(	O
endp	function
(	O
form	int
)	O
)	O
FEerror	function
(	O
"No argument to COMPILER-LET."	pointer
,	O
0	int
)	O
;	O
body	O
=	O
form	int
->	O
c	O
.	O
c_cdr	O
;	O
old_lex	O
=	O
lex_env	O
;	O
lex_copy	function
(	O
)	O
;	O
old_bds_top	O
=	O
bds_top	O
;	O
start	pointer
=	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
;	O
let_var_list	function
(	O
form	int
->	O
c	O
.	O
c_car	O
)	O
;	O
end	pointer
=	O
(	O
struct	O
bind_temp	O
*	O
)	O
vs_top	O
;	O
for	O
(	O
bt	pointer
=	O
start	pointer
;	O
bt	pointer
<	O
end	pointer
;	O
bt	pointer
++	O
)	O
{	O
eval_assign	function
(	O
bt	pointer
->	O
bt_init	O
,	O
bt	pointer
->	O
bt_init	O
)	O
;	O
}	O
for	O
(	O
bt	pointer
=	O
start	pointer
;	O
bt	pointer
<	O
end	pointer
;	O
bt	pointer
++	O
)	O
bind_var	function
(	O
bt	pointer
->	O
bt_var	O
,	O
bt	pointer
->	O
bt_init	O
,	O
Ct	O
)	O
;	O
vs_top	O
=	O
(	O
object	O
*	O
)	O
start	pointer
;	O
Fprogn	function
(	O
body	O
)	O
;	O
lex_env	O
=	O
old_lex	O
;	O
bds_unwind	function
(	O
old_bds_top	O
)	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Fflet	int
)	O
(	O
object	O
args	int
)	O
{	O
object	O
def_list	O
;	O
object	O
def	O
;	O
object	O
*	O
lex	O
=	O
lex_env	O
;	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
if	O
(	O
endp	function
(	O
args	int
)	O
)	O
FEtoo_few_argumentsF	function
(	O
args	int
)	O
;	O
def_list	O
=	O
MMcar	function
(	O
args	int
)	O
;	O
lex_copy	function
(	O
)	O
;	O
while	O
(	O
!	O
endp	function
(	O
def_list	O
)	O
)	O
{	O
def	O
=	O
MMcar	function
(	O
def_list	O
)	O
;	O
if	O
(	O
endp	function
(	O
def	O
)	O
||	O
endp	function
(	O
MMcdr	function
(	O
def	O
)	O
)	O
||	O
type_of	function
(	O
MMcar	function
(	O
def	O
)	O
)	O
!=	O
t_symbol	O
)	O
FEerror	function
(	O
"~S~%is an illegal function definition in FLET."	pointer
,	O
1	int
,	O
def	O
)	O
;	O
top	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
lex	O
[	O
2	int
]	O
,	O
def	O
)	O
;	O
top	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
lex	O
[	O
1	int
]	O
,	O
top	O
[	O
0	int
]	O
)	O
;	O
top	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
lex	O
[	O
0	int
]	O
,	O
top	O
[	O
0	int
]	O
)	O
;	O
top	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
sLlambda_block_closure	O
,	O
top	O
[	O
0	int
]	O
)	O
;	O
lex_fun_bind	function
(	O
MMcar	function
(	O
def	O
)	O
,	O
top	O
[	O
0	int
]	O
)	O
;	O
def_list	O
=	O
MMcdr	function
(	O
def_list	O
)	O
;	O
}	O
vs_push	function
(	O
find_special	function
(	O
MMcdr	function
(	O
args	int
)	O
,	O
NULL	O
,	O
NULL	O
)	O
)	O
;	O
Fprogn	function
(	O
vs_head	O
)	O
;	O
lex_env	O
=	O
lex	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Flabels	int
)	O
(	O
object	O
args	int
)	O
{	O
object	O
def_list	O
;	O
object	O
def	O
;	O
object	O
closure_list	O
;	O
object	O
*	O
lex	O
=	O
lex_env	O
;	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
if	O
(	O
endp	function
(	O
args	int
)	O
)	O
FEtoo_few_argumentsF	function
(	O
args	int
)	O
;	O
def_list	O
=	O
MMcar	function
(	O
args	int
)	O
;	O
lex_copy	function
(	O
)	O
;	O
while	O
(	O
!	O
endp	function
(	O
def_list	O
)	O
)	O
{	O
def	O
=	O
MMcar	function
(	O
def_list	O
)	O
;	O
if	O
(	O
endp	function
(	O
def	O
)	O
||	O
endp	function
(	O
MMcdr	function
(	O
def	O
)	O
)	O
||	O
type_of	function
(	O
MMcar	function
(	O
def	O
)	O
)	O
!=	O
t_symbol	O
)	O
FEerror	function
(	O
"~S~%is an illegal function definition in LABELS."	pointer
,	O
1	int
,	O
def	O
)	O
;	O
top	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
lex	O
[	O
2	int
]	O
,	O
def	O
)	O
;	O
top	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
Cnil	O
,	O
top	O
[	O
0	int
]	O
)	O
;	O
top	O
[	O
1	int
]	O
=	O
MMcons	function
(	O
top	O
[	O
0	int
]	O
,	O
top	O
[	O
1	int
]	O
)	O
;	O
top	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
lex	O
[	O
0	int
]	O
,	O
top	O
[	O
0	int
]	O
)	O
;	O
top	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
sLlambda_block_closure	O
,	O
top	O
[	O
0	int
]	O
)	O
;	O
lex_fun_bind	function
(	O
MMcar	function
(	O
def	O
)	O
,	O
top	O
[	O
0	int
]	O
)	O
;	O
def_list	O
=	O
MMcdr	function
(	O
def_list	O
)	O
;	O
}	O
closure_list	O
=	O
top	O
[	O
1	int
]	O
;	O
while	O
(	O
!	O
endp	function
(	O
closure_list	O
)	O
)	O
{	O
MMcaar	function
(	O
closure_list	O
)	O
=	O
lex_env	O
[	O
1	int
]	O
;	O
closure_list	O
=	O
MMcdr	function
(	O
closure_list	O
)	O
;	O
}	O
vs_push	function
(	O
find_special	function
(	O
MMcdr	function
(	O
args	int
)	O
,	O
NULL	O
,	O
NULL	O
)	O
)	O
;	O
Fprogn	function
(	O
vs_head	O
)	O
;	O
lex_env	O
=	O
lex	O
;	O
}	O
static	O
void	O
FFN	function
(	O
Fmacrolet	int
)	O
(	O
object	O
args	int
)	O
{	O
object	O
def_list	O
;	O
object	O
def	O
;	O
object	O
*	O
lex	O
=	O
lex_env	O
;	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
if	O
(	O
endp	function
(	O
args	int
)	O
)	O
FEtoo_few_argumentsF	function
(	O
args	int
)	O
;	O
def_list	O
=	O
MMcar	function
(	O
args	int
)	O
;	O
lex_copy	function
(	O
)	O
;	O
while	O
(	O
!	O
endp	function
(	O
def_list	O
)	O
)	O
{	O
def	O
=	O
MMcar	function
(	O
def_list	O
)	O
;	O
if	O
(	O
endp	function
(	O
def	O
)	O
||	O
endp	function
(	O
MMcdr	function
(	O
def	O
)	O
)	O
||	O
type_of	function
(	O
MMcar	function
(	O
def	O
)	O
)	O
!=	O
t_symbol	O
)	O
FEerror	function
(	O
"~S~%is an illegal macro definition in MACROFLET."	pointer
,	O
1	int
,	O
def	O
)	O
;	O
top	O
[	O
0	int
]	O
=	O
ifuncall3	function
(	O
sSdefmacroA	O
,	O
MMcar	function
(	O
def	O
)	O
,	O
MMcadr	function
(	O
def	O
)	O
,	O
MMcddr	function
(	O
def	O
)	O
)	O
;	O
lex_macro_bind	function
(	O
MMcar	function
(	O
def	O
)	O
,	O
MMcaddr	function
(	O
top	O
[	O
0	int
]	O
)	O
)	O
;	O
def_list	O
=	O
MMcdr	function
(	O
def_list	O
)	O
;	O
}	O
vs_push	function
(	O
find_special	function
(	O
MMcdr	function
(	O
args	int
)	O
,	O
NULL	O
,	O
NULL	O
)	O
)	O
;	O
Fprogn	function
(	O
vs_head	O
)	O
;	O
lex_env	O
=	O
lex	O
;	O
}	O
void	O
gcl_init_let	function
(	O
void	O
)	O
{	O
make_special_form	function
(	O
"LET"	pointer
,	O
Flet	int
)	O
;	O
make_special_form	function
(	O
"LET*"	pointer
,	O
FletA	int
)	O
;	O
make_special_form	function
(	O
"MULTIPLE-VALUE-BIND"	pointer
,	O
Fmultiple_value_bind	int
)	O
;	O
make_special_form	function
(	O
"COMPILER-LET"	pointer
,	O
Fcompiler_let	int
)	O
;	O
make_special_form	function
(	O
"FLET"	pointer
,	O
Fflet	int
)	O
;	O
make_special_form	function
(	O
"LABELS"	pointer
,	O
Flabels	int
)	O
;	O
make_special_form	function
(	O
"MACROLET"	pointer
,	O
Fmacrolet	int
)	O
;	O
}	O
