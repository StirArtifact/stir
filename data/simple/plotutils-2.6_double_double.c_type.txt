typedef	O
enum	O
{	O
T_ASCII	int
,	O
T_SINGLE	int
,	O
T_DOUBLE	int
,	O
T_INTEGER	int
}	O
data_type	enum
;	O
data_type	enum
input_type	enum
=	O
T_ASCII	int
;	O
data_type	enum
output_type	enum
=	O
T_ASCII	int
;	O
const	O
char	O
*	O
progname	pointer
=	O
"double"	pointer
;	O
const	O
char	O
*	O
written	pointer
=	O
"Written by Robert S. Maier and Rich Murphey."	pointer
;	O
const	O
char	O
*	O
copyright	pointer
=	O
"Copyright (C) 2009 Free Software Foundation, Inc."	pointer
;	O
const	O
char	O
*	O
usage_appendage	pointer
=	O
" [FILE]...\nWith no FILE, or when FILE is -, read standard input.\n"	pointer
;	O
int	O
precision	int
=	O
8	int
;	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"input-type"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'I'	O
}	O
,	O
{	O
"output-type"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'O'	O
}	O
,	O
{	O
"precision"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'q'	O
}	O
,	O
{	O
"times-file"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'T'	O
}	O
,	O
{	O
"plus-file"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'P'	O
}	O
,	O
{	O
"pre-join-file"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'j'	O
}	O
,	O
{	O
"post-join-file"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'J'	O
}	O
,	O
{	O
"times"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
't'	O
}	O
,	O
{	O
"plus"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"record-length"	pointer
,	O
ARG_REQUIRED	int
,	O
NULL	O
,	O
'R'	O
}	O
,	O
{	O
"fields"	pointer
,	O
ARG_OPTIONAL	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"dataset-limits"	pointer
,	O
ARG_OPTIONAL	int
,	O
NULL	O
,	O
'd'	O
}	O
,	O
{	O
"version"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'V'	O
<<	O
8	int
}	O
,	O
{	O
"help"	pointer
,	O
ARG_NONE	int
,	O
NULL	O
,	O
'h'	O
<<	O
8	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
int	O
hidden_options	array
[	O
]	O
=	O
{	O
0	int
}	O
;	O
bool	enum
mung_dataset	function
(	O
FILE	struct
*	O
input	pointer
,	O
int	O
record_length	int
,	O
int	O
*	O
field_array	pointer
,	O
int	O
field_array_len	int
,	O
double	O
scale	double
,	O
double	O
baseline	double
,	O
FILE	struct
*	O
add_fp	pointer
,	O
FILE	struct
*	O
mult_fp	pointer
,	O
FILE	struct
*	O
pre_join_fp	pointer
,	O
FILE	struct
*	O
post_join_fp	pointer
,	O
int	O
precision	int
,	O
bool	enum
suppress	enum
)	O
;	O
bool	enum
read_float	function
(	O
FILE	struct
*	O
input	pointer
,	O
double	O
*	O
dptr	pointer
)	O
;	O
bool	enum
skip_whitespace	function
(	O
FILE	struct
*	O
stream	pointer
)	O
;	O
bool	enum
write_float	function
(	O
double	O
data	double
,	O
int	O
precision	int
)	O
;	O
int	O
get_record	function
(	O
FILE	struct
*	O
input	pointer
,	O
double	O
*	O
record	pointer
,	O
int	O
record_length	int
)	O
;	O
void	O
maybe_emit_oob_warning	function
(	O
void	O
)	O
;	O
void	O
open_file	function
(	O
char	O
*	O
name	pointer
,	O
FILE	struct
*	O
*	O
fpp	pointer
)	O
;	O
void	O
output_dataset_separator	function
(	O
void	O
)	O
;	O
void	O
set_format_type	function
(	O
char	O
*	O
s	pointer
,	O
data_type	enum
*	O
typep	pointer
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
option	struct
;	O
int	O
opt_index	int
;	O
int	O
errcnt	int
=	O
0	int
;	O
int	O
i	int
;	O
bool	enum
show_version	enum
=	O
false	int
;	O
bool	enum
show_usage	enum
=	O
false	int
;	O
char	O
*	O
add_file	pointer
=	O
NULL	O
,	O
*	O
mult_file	pointer
=	O
NULL	O
;	O
char	O
*	O
pre_join_file	pointer
=	O
NULL	O
,	O
*	O
post_join_file	pointer
=	O
NULL	O
;	O
FILE	struct
*	O
add_fp	pointer
=	O
NULL	O
,	O
*	O
mult_fp	pointer
=	O
NULL	O
;	O
FILE	struct
*	O
pre_join_fp	pointer
=	O
NULL	O
,	O
*	O
post_join_fp	pointer
=	O
NULL	O
;	O
double	O
scale	double
=	O
1.0	int
,	O
baseline	double
=	O
0.0	int
;	O
int	O
record_length	int
=	O
1	int
;	O
int	O
dataset_min	int
=	O
0	int
,	O
dataset_max	int
=	O
INT_MAX	O
,	O
dataset_spacing	int
=	O
1	int
;	O
int	O
local_dataset_min	int
,	O
local_dataset_max	int
,	O
local_dataset_spacing	int
;	O
int	O
*	O
field_array	pointer
=	O
NULL	O
;	O
int	O
field_array_len	int
=	O
0	int
;	O
int	O
dataset_index	int
=	O
0	int
;	O
bool	enum
more_points	enum
,	O
dataset_printed	enum
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
option	struct
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"I:O:q:T:P:j:J:t:p:R:f::d::"	pointer
,	O
long_options	array
,	O
&	O
opt_index	int
)	O
;	O
if	O
(	O
option	struct
==	O
0	int
)	O
option	struct
=	O
long_options	array
[	O
opt_index	int
]	O
.	O
val	int
;	O
switch	O
(	O
option	struct
)	O
{	O
case	O
'V'	O
<<	O
8	int
:	O
show_version	enum
=	O
true	int
;	O
break	O
;	O
case	O
'h'	O
<<	O
8	int
:	O
show_usage	enum
=	O
true	int
;	O
break	O
;	O
case	O
'I'	O
:	O
set_format_type	function
(	O
optarg	pointer
,	O
&	O
input_type	enum
)	O
;	O
break	O
;	O
case	O
'O'	O
:	O
set_format_type	function
(	O
optarg	pointer
,	O
&	O
output_type	enum
)	O
;	O
break	O
;	O
case	O
'T'	O
:	O
mult_file	pointer
=	O
xstrdup	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'P'	O
:	O
add_file	pointer
=	O
xstrdup	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'j'	O
:	O
pre_join_file	pointer
=	O
xstrdup	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'J'	O
:	O
post_join_file	pointer
=	O
xstrdup	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
if	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%lf"	pointer
,	O
&	O
scale	double
)	O
<=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the multiplicative constant `%s' is bad\n"	pointer
,	O
progname	pointer
,	O
optarg	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
break	O
;	O
case	O
'p'	O
:	O
if	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%lf"	pointer
,	O
&	O
baseline	double
)	O
<=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the additive constant `%s' is bad\n"	pointer
,	O
progname	pointer
,	O
optarg	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
break	O
;	O
case	O
'q'	O
:	O
if	O
(	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%d"	pointer
,	O
&	O
precision	int
)	O
<=	O
0	int
)	O
||	O
(	O
precision	int
<	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the precision `%s' is bad (it should be an integer greater than or equal to 1)\n"	pointer
,	O
progname	pointer
,	O
optarg	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
break	O
;	O
case	O
'R'	O
:	O
if	O
(	O
(	O
sscanf	function
(	O
optarg	pointer
,	O
"%d"	pointer
,	O
&	O
record_length	int
)	O
<=	O
0	int
)	O
||	O
(	O
record_length	int
<	O
1	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the record length `%s' is bad (it should be an integer greater than or equal to 1)\n"	pointer
,	O
progname	pointer
,	O
optarg	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
break	O
;	O
case	O
'd'	O
:	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"%d"	pointer
,	O
&	O
local_dataset_min	int
)	O
<=	O
0	int
)	O
break	O
;	O
dataset_min	int
=	O
local_dataset_min	int
;	O
optind	int
++	O
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"%d"	pointer
,	O
&	O
local_dataset_max	int
)	O
<=	O
0	int
)	O
break	O
;	O
dataset_max	int
=	O
local_dataset_max	int
;	O
optind	int
++	O
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"%d"	pointer
,	O
&	O
local_dataset_spacing	int
)	O
<=	O
0	int
)	O
break	O
;	O
dataset_spacing	int
=	O
local_dataset_spacing	int
;	O
optind	int
++	O
;	O
break	O
;	O
case	O
'f'	O
:	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
field_index	int
;	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
break	O
;	O
if	O
(	O
sscanf	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"%d"	pointer
,	O
&	O
field_index	int
)	O
<=	O
0	int
)	O
break	O
;	O
if	O
(	O
field_index	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the field index `%d' is bad (it should be greater than or equal to 0)\n"	pointer
,	O
progname	pointer
,	O
field_index	int
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
field_array_len	int
==	O
0	int
)	O
field_array	pointer
=	O
(	O
int	O
*	O
)	O
xmalloc	function
(	O
(	O
++	O
field_array_len	int
)	O
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
else	O
field_array	pointer
=	O
(	O
int	O
*	O
)	O
xrealloc	function
(	O
field_array	pointer
,	O
(	O
++	O
field_array_len	int
)	O
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
field_array	pointer
[	O
field_array_len	int
-	O
1	int
]	O
=	O
field_index	int
;	O
optind	int
++	O
;	O
}	O
break	O
;	O
default	O
:	O
errcnt	int
++	O
;	O
break	O
;	O
}	O
if	O
(	O
(	O
option	struct
==	O
EOF	O
)	O
)	O
{	O
errcnt	int
--	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
errcnt	int
>	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Try `%s --help' for more information\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
show_version	enum
)	O
{	O
display_version	function
(	O
progname	pointer
,	O
written	pointer
,	O
copyright	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
show_usage	enum
)	O
{	O
display_usage	function
(	O
progname	pointer
,	O
hidden_options	array
,	O
usage_appendage	pointer
,	O
0	int
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
if	O
(	O
dataset_spacing	int
<	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the dataset spacing `%d' is bad (it should be positive)\n"	pointer
,	O
progname	pointer
,	O
dataset_spacing	int
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
field_array_len	int
;	O
i	int
++	O
)	O
if	O
(	O
field_array	pointer
[	O
i	int
]	O
>=	O
record_length	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: at least one field index is out of bounds\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
field_array_len	int
==	O
0	int
)	O
{	O
field_array	pointer
=	O
(	O
int	O
*	O
)	O
xmalloc	function
(	O
(	O
record_length	int
)	O
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
field_array_len	int
=	O
record_length	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
field_array_len	int
;	O
i	int
++	O
)	O
field_array	pointer
[	O
i	int
]	O
=	O
i	int
;	O
}	O
if	O
(	O
add_file	pointer
)	O
open_file	function
(	O
add_file	pointer
,	O
&	O
add_fp	pointer
)	O
;	O
if	O
(	O
mult_file	pointer
)	O
open_file	function
(	O
mult_file	pointer
,	O
&	O
mult_fp	pointer
)	O
;	O
if	O
(	O
pre_join_file	pointer
)	O
open_file	function
(	O
pre_join_file	pointer
,	O
&	O
pre_join_fp	pointer
)	O
;	O
if	O
(	O
post_join_file	pointer
)	O
open_file	function
(	O
post_join_file	pointer
,	O
&	O
post_join_fp	pointer
)	O
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
optind	int
++	O
)	O
{	O
FILE	struct
*	O
data_fp	pointer
;	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
"-"	pointer
)	O
==	O
0	int
)	O
data_fp	pointer
=	O
stdin	pointer
;	O
else	O
open_file	function
(	O
argv	pointer
[	O
optind	int
]	O
,	O
&	O
data_fp	pointer
)	O
;	O
do	O
{	O
bool	enum
dataset_ok	enum
;	O
dataset_ok	enum
=	O
(	O
(	O
dataset_index	int
>=	O
dataset_min	int
)	O
&&	O
(	O
dataset_index	int
<=	O
dataset_max	int
)	O
&&	O
(	O
(	O
dataset_index	int
-	O
dataset_min	int
)	O
%	O
dataset_spacing	int
==	O
0	int
)	O
)	O
?	O
true	int
:	O
false	int
;	O
if	O
(	O
dataset_printed	enum
&&	O
dataset_ok	enum
)	O
output_dataset_separator	function
(	O
)	O
;	O
more_points	enum
=	O
mung_dataset	function
(	O
data_fp	pointer
,	O
record_length	int
,	O
field_array	pointer
,	O
field_array_len	int
,	O
scale	double
,	O
baseline	double
,	O
add_fp	pointer
,	O
mult_fp	pointer
,	O
pre_join_fp	pointer
,	O
post_join_fp	pointer
,	O
precision	int
,	O
dataset_ok	enum
?	O
false	int
:	O
true	int
)	O
;	O
if	O
(	O
dataset_ok	enum
)	O
dataset_printed	enum
=	O
true	int
;	O
dataset_index	int
++	O
;	O
}	O
while	O
(	O
more_points	enum
)	O
;	O
if	O
(	O
data_fp	pointer
!=	O
stdin	pointer
&&	O
fclose	function
(	O
data_fp	pointer
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the input file could not be closed\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
}	O
}	O
else	O
do	O
{	O
bool	enum
dataset_ok	enum
;	O
dataset_ok	enum
=	O
(	O
(	O
dataset_index	int
>=	O
dataset_min	int
)	O
&&	O
(	O
dataset_index	int
<=	O
dataset_max	int
)	O
&&	O
(	O
(	O
dataset_index	int
-	O
dataset_min	int
)	O
%	O
dataset_spacing	int
==	O
0	int
)	O
)	O
?	O
true	int
:	O
false	int
;	O
if	O
(	O
dataset_printed	enum
&&	O
dataset_ok	enum
)	O
output_dataset_separator	function
(	O
)	O
;	O
more_points	enum
=	O
mung_dataset	function
(	O
stdin	pointer
,	O
record_length	int
,	O
field_array	pointer
,	O
field_array_len	int
,	O
scale	double
,	O
baseline	double
,	O
add_fp	pointer
,	O
mult_fp	pointer
,	O
pre_join_fp	pointer
,	O
post_join_fp	pointer
,	O
precision	int
,	O
dataset_ok	enum
?	O
false	int
:	O
true	int
)	O
;	O
if	O
(	O
dataset_ok	enum
)	O
dataset_printed	enum
=	O
true	int
;	O
dataset_index	int
++	O
;	O
}	O
while	O
(	O
more_points	enum
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
bool	enum
read_float	function
(	O
FILE	struct
*	O
input	pointer
,	O
double	O
*	O
dptr	pointer
)	O
{	O
int	O
num_read	int
;	O
double	O
dval	double
;	O
float	O
fval	float
;	O
int	O
ival	int
;	O
switch	O
(	O
input_type	enum
)	O
{	O
case	O
T_ASCII	int
:	O
default	O
:	O
num_read	int
=	O
fscanf	function
(	O
input	pointer
,	O
"%lf"	pointer
,	O
&	O
dval	double
)	O
;	O
break	O
;	O
case	O
T_SINGLE	int
:	O
num_read	int
=	O
fread	function
(	O
(	O
void	O
*	O
)	O
&	O
fval	float
,	O
sizeof	O
(	O
fval	float
)	O
,	O
1	int
,	O
input	pointer
)	O
;	O
dval	double
=	O
fval	float
;	O
break	O
;	O
case	O
T_DOUBLE	int
:	O
num_read	int
=	O
fread	function
(	O
(	O
void	O
*	O
)	O
&	O
dval	double
,	O
sizeof	O
(	O
dval	double
)	O
,	O
1	int
,	O
input	pointer
)	O
;	O
break	O
;	O
case	O
T_INTEGER	int
:	O
num_read	int
=	O
fread	function
(	O
(	O
void	O
*	O
)	O
&	O
ival	int
,	O
sizeof	O
(	O
ival	int
)	O
,	O
1	int
,	O
input	pointer
)	O
;	O
dval	double
=	O
ival	int
;	O
break	O
;	O
}	O
if	O
(	O
num_read	int
<=	O
0	int
)	O
return	O
false	int
;	O
if	O
(	O
dval	double
!=	O
dval	double
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: a NaN (not-a-number) was encountered in a binary-format input file\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
false	int
;	O
}	O
else	O
{	O
*	O
dptr	pointer
=	O
dval	double
;	O
return	O
true	int
;	O
}	O
}	O
int	O
get_record	function
(	O
FILE	struct
*	O
input	pointer
,	O
double	O
*	O
record	pointer
,	O
int	O
record_length	int
)	O
{	O
bool	enum
success	enum
;	O
int	O
i	int
,	O
items_read	int
,	O
lookahead	int
;	O
head	O
:	O
if	O
(	O
input_type	enum
==	O
T_ASCII	int
)	O
{	O
bool	enum
two_newlines	enum
;	O
two_newlines	enum
=	O
skip_whitespace	function
(	O
input	pointer
)	O
;	O
if	O
(	O
two_newlines	enum
)	O
return	O
2	int
;	O
}	O
if	O
(	O
feof	function
(	O
input	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
input_type	enum
==	O
T_ASCII	int
)	O
{	O
lookahead	int
=	O
getc	function
(	O
input	pointer
)	O
;	O
ungetc	function
(	O
lookahead	int
,	O
input	pointer
)	O
;	O
if	O
(	O
lookahead	int
==	O
(	O
int	O
)	O
'#'	O
)	O
{	O
char	O
c	char
;	O
do	O
{	O
items_read	int
=	O
fread	function
(	O
&	O
c	char
,	O
sizeof	O
(	O
c	char
)	O
,	O
1	int
,	O
input	pointer
)	O
;	O
if	O
(	O
items_read	int
<=	O
0	int
)	O
return	O
1	int
;	O
}	O
while	O
(	O
c	char
!=	O
'\n'	O
)	O
;	O
ungetc	function
(	O
(	O
int	O
)	O
'\n'	O
,	O
input	pointer
)	O
;	O
goto	O
head	O
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
record_length	int
;	O
i	int
++	O
)	O
{	O
double	O
val	int
;	O
success	enum
=	O
read_float	function
(	O
input	pointer
,	O
&	O
val	int
)	O
;	O
if	O
(	O
i	int
==	O
0	int
&&	O
(	O
(	O
input_type	enum
==	O
T_DOUBLE	int
&&	O
val	int
==	O
DBL_MAX	O
)	O
||	O
(	O
input_type	enum
==	O
T_SINGLE	int
&&	O
val	int
==	O
(	O
double	O
)	O
FLT_MAX	O
)	O
||	O
(	O
input_type	enum
==	O
T_INTEGER	int
&&	O
val	int
==	O
(	O
double	O
)	O
INT_MAX	O
)	O
)	O
)	O
return	O
2	int
;	O
if	O
(	O
!	O
success	enum
)	O
{	O
if	O
(	O
i	int
>	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: the input file terminated prematurely\n"	pointer
,	O
progname	pointer
)	O
;	O
return	O
1	int
;	O
}	O
record	pointer
[	O
i	int
]	O
=	O
val	int
;	O
}	O
return	O
0	int
;	O
}	O
bool	enum
write_float	function
(	O
double	O
x	double
,	O
int	O
precision	int
)	O
{	O
int	O
num_written	int
=	O
0	int
;	O
float	O
fx	float
;	O
int	O
ix	int
;	O
switch	O
(	O
output_type	enum
)	O
{	O
case	O
T_ASCII	int
:	O
default	O
:	O
num_written	int
=	O
printf	function
(	O
"%.*g "	pointer
,	O
precision	int
,	O
x	double
)	O
;	O
break	O
;	O
case	O
T_SINGLE	int
:	O
fx	float
=	O
FROUND	O
(	O
x	double
)	O
;	O
if	O
(	O
fx	float
==	O
FLT_MAX	O
||	O
fx	float
==	O
-	O
(	O
FLT_MAX	O
)	O
)	O
{	O
maybe_emit_oob_warning	function
(	O
)	O
;	O
if	O
(	O
fx	float
==	O
FLT_MAX	O
)	O
fx	float
*=	O
0.99999	int
;	O
}	O
num_written	int
=	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
&	O
fx	float
,	O
sizeof	O
(	O
fx	float
)	O
,	O
1	int
,	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
T_DOUBLE	int
:	O
num_written	int
=	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
&	O
x	double
,	O
sizeof	O
(	O
x	double
)	O
,	O
1	int
,	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
T_INTEGER	int
:	O
ix	int
=	O
IROUND	O
(	O
x	double
)	O
;	O
if	O
(	O
ix	int
==	O
INT_MAX	O
||	O
ix	int
==	O
-	O
(	O
INT_MAX	O
)	O
)	O
{	O
maybe_emit_oob_warning	function
(	O
)	O
;	O
if	O
(	O
ix	int
==	O
INT_MAX	O
)	O
ix	int
--	O
;	O
}	O
num_written	int
=	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
&	O
ix	int
,	O
sizeof	O
(	O
ix	int
)	O
,	O
1	int
,	O
stdout	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
num_written	int
<	O
0	int
)	O
return	O
false	int
;	O
else	O
return	O
true	int
;	O
}	O
void	O
open_file	function
(	O
char	O
*	O
name	pointer
,	O
FILE	struct
*	O
*	O
fpp	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
fp	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: %s\n"	pointer
,	O
progname	pointer
,	O
name	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
*	O
fpp	pointer
=	O
fp	pointer
;	O
}	O
void	O
set_format_type	function
(	O
char	O
*	O
s	pointer
,	O
data_type	enum
*	O
typep	pointer
)	O
{	O
switch	O
(	O
s	pointer
[	O
0	int
]	O
)	O
{	O
case	O
'a'	O
:	O
case	O
'A'	O
:	O
*	O
typep	pointer
=	O
T_ASCII	int
;	O
break	O
;	O
case	O
'f'	O
:	O
case	O
'F'	O
:	O
*	O
typep	pointer
=	O
T_SINGLE	int
;	O
break	O
;	O
case	O
'd'	O
:	O
case	O
'D'	O
:	O
*	O
typep	pointer
=	O
T_DOUBLE	int
;	O
break	O
;	O
case	O
'i'	O
:	O
case	O
'I'	O
:	O
*	O
typep	pointer
=	O
T_INTEGER	int
;	O
break	O
;	O
default	O
:	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the data format type `%s' is invalid\n"	pointer
,	O
progname	pointer
,	O
s	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
break	O
;	O
}	O
}	O
bool	enum
mung_dataset	function
(	O
FILE	struct
*	O
input	pointer
,	O
int	O
record_length	int
,	O
int	O
*	O
field_array	pointer
,	O
int	O
field_array_len	int
,	O
double	O
scale	double
,	O
double	O
baseline	double
,	O
FILE	struct
*	O
add_fp	pointer
,	O
FILE	struct
*	O
mult_fp	pointer
,	O
FILE	struct
*	O
pre_join_fp	pointer
,	O
FILE	struct
*	O
post_join_fp	pointer
,	O
int	O
precision	int
,	O
bool	enum
suppress	enum
)	O
{	O
double	O
*	O
record	pointer
=	O
(	O
double	O
*	O
)	O
xmalloc	function
(	O
record_length	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
bool	enum
in_trouble	enum
=	O
suppress	enum
;	O
if	O
(	O
!	O
in_trouble	enum
)	O
{	O
if	O
(	O
add_fp	pointer
)	O
fseek	function
(	O
add_fp	pointer
,	O
0L	int
,	O
0	int
)	O
;	O
if	O
(	O
mult_fp	pointer
)	O
fseek	function
(	O
mult_fp	pointer
,	O
0L	int
,	O
0	int
)	O
;	O
if	O
(	O
pre_join_fp	pointer
)	O
fseek	function
(	O
pre_join_fp	pointer
,	O
0L	int
,	O
0	int
)	O
;	O
if	O
(	O
post_join_fp	pointer
)	O
fseek	function
(	O
post_join_fp	pointer
,	O
0L	int
,	O
0	int
)	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
i	int
;	O
int	O
success	enum
;	O
double	O
add_data	double
,	O
mult_data	double
,	O
pre_join_data	double
,	O
post_join_data	double
;	O
if	O
(	O
!	O
in_trouble	enum
&&	O
add_fp	pointer
&&	O
read_float	function
(	O
add_fp	pointer
,	O
&	O
add_data	double
)	O
==	O
false	int
)	O
in_trouble	enum
=	O
true	int
;	O
if	O
(	O
!	O
in_trouble	enum
&&	O
mult_fp	pointer
&&	O
read_float	function
(	O
mult_fp	pointer
,	O
&	O
mult_data	double
)	O
==	O
false	int
)	O
in_trouble	enum
=	O
true	int
;	O
if	O
(	O
!	O
in_trouble	enum
&&	O
pre_join_fp	pointer
&&	O
read_float	function
(	O
pre_join_fp	pointer
,	O
&	O
pre_join_data	double
)	O
==	O
false	int
)	O
in_trouble	enum
=	O
true	int
;	O
if	O
(	O
!	O
in_trouble	enum
&&	O
post_join_fp	pointer
&&	O
read_float	function
(	O
post_join_fp	pointer
,	O
&	O
post_join_data	double
)	O
==	O
false	int
)	O
in_trouble	enum
=	O
true	int
;	O
success	enum
=	O
get_record	function
(	O
input	pointer
,	O
record	pointer
,	O
record_length	int
)	O
;	O
switch	O
(	O
success	enum
)	O
{	O
case	O
0	int
:	O
if	O
(	O
in_trouble	enum
)	O
continue	O
;	O
if	O
(	O
pre_join_fp	pointer
)	O
write_float	function
(	O
pre_join_data	double
,	O
precision	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
field_array_len	int
;	O
i	int
++	O
)	O
{	O
double	O
datum	double
;	O
datum	double
=	O
record	pointer
[	O
field_array	pointer
[	O
i	int
]	O
]	O
;	O
if	O
(	O
mult_fp	pointer
)	O
datum	double
*=	O
mult_data	double
;	O
if	O
(	O
add_fp	pointer
)	O
datum	double
+=	O
add_data	double
;	O
datum	double
*=	O
scale	double
;	O
datum	double
+=	O
baseline	double
;	O
write_float	function
(	O
datum	double
,	O
precision	int
)	O
;	O
}	O
if	O
(	O
post_join_fp	pointer
)	O
write_float	function
(	O
post_join_data	double
,	O
precision	int
)	O
;	O
if	O
(	O
output_type	enum
==	O
T_ASCII	int
)	O
printf	function
(	O
"\n"	pointer
)	O
;	O
break	O
;	O
case	O
1	int
:	O
return	O
false	int
;	O
case	O
2	int
:	O
return	O
true	int
;	O
}	O
}	O
}	O
bool	enum
skip_whitespace	function
(	O
FILE	struct
*	O
stream	pointer
)	O
{	O
int	O
lookahead	int
;	O
int	O
nlcount	int
=	O
0	int
;	O
do	O
{	O
lookahead	int
=	O
getc	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
lookahead	int
==	O
(	O
int	O
)	O
'\n'	O
)	O
nlcount	int
++	O
;	O
}	O
while	O
(	O
lookahead	int
!=	O
EOF	O
&&	O
isspace	function
(	O
(	O
unsigned	O
char	O
)	O
lookahead	int
)	O
&&	O
nlcount	int
<	O
2	int
)	O
;	O
if	O
(	O
lookahead	int
==	O
EOF	O
)	O
return	O
false	int
;	O
ungetc	function
(	O
lookahead	int
,	O
stream	pointer
)	O
;	O
return	O
(	O
nlcount	int
==	O
2	int
?	O
true	int
:	O
false	int
)	O
;	O
}	O
void	O
output_dataset_separator	function
(	O
void	O
)	O
{	O
double	O
ddummy	double
;	O
float	O
fdummy	float
;	O
int	O
idummy	int
;	O
switch	O
(	O
output_type	enum
)	O
{	O
case	O
T_ASCII	int
:	O
default	O
:	O
printf	function
(	O
"\n"	pointer
)	O
;	O
break	O
;	O
case	O
T_DOUBLE	int
:	O
ddummy	double
=	O
DBL_MAX	O
;	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
&	O
ddummy	double
,	O
sizeof	O
(	O
ddummy	double
)	O
,	O
1	int
,	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
T_SINGLE	int
:	O
fdummy	float
=	O
FLT_MAX	O
;	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
&	O
fdummy	float
,	O
sizeof	O
(	O
fdummy	float
)	O
,	O
1	int
,	O
stdout	pointer
)	O
;	O
break	O
;	O
case	O
T_INTEGER	int
:	O
idummy	int
=	O
INT_MAX	O
;	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
&	O
idummy	int
,	O
sizeof	O
(	O
idummy	int
)	O
,	O
1	int
,	O
stdout	pointer
)	O
;	O
break	O
;	O
}	O
}	O
void	O
maybe_emit_oob_warning	function
(	O
void	O
)	O
{	O
static	O
bool	enum
warning_written	enum
=	O
false	int
;	O
if	O
(	O
!	O
warning_written	enum
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: one or more out-of-bounds output values are approximated\n"	pointer
,	O
progname	pointer
)	O
;	O
warning_written	enum
=	O
true	int
;	O
}	O
}	O
