static	O
int	O
ahc_echo	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	long
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
char	O
*	O
username	pointer
;	O
const	O
char	O
*	O
password	pointer
=	O
"testpass"	pointer
;	O
const	O
char	O
*	O
realm	pointer
=	O
"test@example.com"	pointer
;	O
int	O
ret	int
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
url	pointer
;	O
(	O
void	O
)	O
method	pointer
;	O
(	O
void	O
)	O
version	pointer
;	O
(	O
void	O
)	O
upload_data	pointer
;	O
(	O
void	O
)	O
upload_data_size	pointer
;	O
(	O
void	O
)	O
ptr	pointer
;	O
username	pointer
=	O
MHD_digest_auth_get_username	function
(	O
connection	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
username	pointer
)	O
{	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
DENIED	pointer
)	O
,	O
DENIED	pointer
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
ret	int
=	O
MHD_queue_auth_fail_response	function
(	O
connection	pointer
,	O
realm	pointer
,	O
MY_OPAQUE_STR	pointer
,	O
response	pointer
,	O
MHD_NO	int
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
ret	int
=	O
MHD_digest_auth_check	function
(	O
connection	pointer
,	O
realm	pointer
,	O
username	pointer
,	O
password	pointer
,	O
300	int
)	O
;	O
MHD_free	function
(	O
username	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
==	O
MHD_INVALID_NONCE	O
)	O
||	O
(	O
ret	int
==	O
MHD_NO	int
)	O
)	O
{	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
DENIED	pointer
)	O
,	O
DENIED	pointer
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	pointer
)	O
return	O
MHD_NO	int
;	O
ret	int
=	O
MHD_queue_auth_fail_response	function
(	O
connection	pointer
,	O
realm	pointer
,	O
MY_OPAQUE_STR	pointer
,	O
response	pointer
,	O
(	O
ret	int
==	O
MHD_INVALID_NONCE	O
)	O
?	O
MHD_YES	int
:	O
MHD_NO	int
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
PAGE	pointer
)	O
,	O
PAGE	pointer
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
ret	int
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_OK	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
int	O
fd	int
;	O
char	O
rnd	array
[	O
8	int
]	O
;	O
ssize_t	long
len	long
;	O
size_t	long
off	long
;	O
struct	O
MHD_Daemon	O
*	O
d	pointer
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	function
(	O
"%s PORT\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
fd	int
=	O
open	function
(	O
"/dev/urandom"	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
-	O
1	int
==	O
fd	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to open `%s': %s\n"	pointer
,	O
"/dev/urandom"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
off	long
=	O
0	int
;	O
while	O
(	O
off	long
<	O
8	int
)	O
{	O
len	long
=	O
read	pointer
(	O
fd	int
,	O
rnd	array
,	O
8	int
)	O
;	O
if	O
(	O
len	long
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to read `%s': %s\n"	pointer
,	O
"/dev/urandom"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
(	O
void	O
)	O
close	pointer
(	O
fd	int
)	O
;	O
return	O
1	int
;	O
}	O
off	long
+=	O
len	long
;	O
}	O
(	O
void	O
)	O
close	pointer
(	O
fd	int
)	O
;	O
d	pointer
=	O
MHD_start_daemon	function
(	O
MHD_USE_THREAD_PER_CONNECTION	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_ERROR_LOG	int
,	O
atoi	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	function
,	O
PAGE	pointer
,	O
MHD_OPTION_DIGEST_AUTH_RANDOM	int
,	O
sizeof	O
(	O
rnd	array
)	O
,	O
rnd	array
,	O
MHD_OPTION_NONCE_NC_SIZE	int
,	O
300	int
,	O
MHD_OPTION_CONNECTION_TIMEOUT	int
,	O
(	O
unsigned	O
int	O
)	O
120	int
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
d	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getc	function
(	O
stdin	pointer
)	O
;	O
MHD_stop_daemon	function
(	O
d	pointer
)	O
;	O
return	O
0	int
;	O
}	O
