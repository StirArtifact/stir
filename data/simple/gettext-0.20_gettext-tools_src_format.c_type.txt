struct	O
formatstring_parser	struct
*	O
formatstring_parsers	array
[	O
NFORMATS	int
]	O
=	O
{	O
&	O
formatstring_c	struct
,	O
&	O
formatstring_objc	struct
,	O
&	O
formatstring_sh	struct
,	O
&	O
formatstring_python	struct
,	O
&	O
formatstring_python_brace	struct
,	O
&	O
formatstring_lisp	struct
,	O
&	O
formatstring_elisp	struct
,	O
&	O
formatstring_librep	struct
,	O
&	O
formatstring_scheme	struct
,	O
&	O
formatstring_smalltalk	struct
,	O
&	O
formatstring_java	struct
,	O
&	O
formatstring_csharp	struct
,	O
&	O
formatstring_awk	struct
,	O
&	O
formatstring_pascal	struct
,	O
&	O
formatstring_ycp	struct
,	O
&	O
formatstring_tcl	struct
,	O
&	O
formatstring_perl	struct
,	O
&	O
formatstring_perl_brace	struct
,	O
&	O
formatstring_php	struct
,	O
&	O
formatstring_gcc_internal	struct
,	O
&	O
formatstring_gfc_internal	struct
,	O
&	O
formatstring_qt	struct
,	O
&	O
formatstring_qt_plural	struct
,	O
&	O
formatstring_kde	struct
,	O
&	O
formatstring_kde_kuit	struct
,	O
&	O
formatstring_boost	struct
,	O
&	O
formatstring_lua	struct
,	O
&	O
formatstring_javascript	struct
}	O
;	O
int	O
check_msgid_msgstr_format_i	function
(	O
const	O
char	O
*	O
msgid	pointer
,	O
const	O
char	O
*	O
msgid_plural	pointer
,	O
const	O
char	O
*	O
msgstr	pointer
,	O
size_t	long
msgstr_len	long
,	O
size_t	long
i	long
,	O
struct	O
argument_range	struct
range	struct
,	O
const	O
struct	O
plural_distribution	struct
*	O
distribution	pointer
,	O
formatstring_error_logger_t	pointer
error_logger	pointer
)	O
{	O
int	O
seen_errors	int
=	O
0	int
;	O
struct	O
formatstring_parser	struct
*	O
parser	pointer
=	O
formatstring_parsers	array
[	O
i	long
]	O
;	O
char	O
*	O
invalid_reason	pointer
=	O
NULL	O
;	O
void	O
*	O
msgid_descr	pointer
=	O
parser	pointer
->	O
parse	pointer
(	O
msgid_plural	pointer
!=	O
NULL	O
?	O
msgid_plural	pointer
:	O
msgid	pointer
,	O
false	int
,	O
NULL	O
,	O
&	O
invalid_reason	pointer
)	O
;	O
if	O
(	O
msgid_descr	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
pretty_msgid	pointer
=	O
(	O
msgid_plural	pointer
!=	O
NULL	O
?	O
"msgid_plural"	pointer
:	O
"msgid"	pointer
)	O
;	O
char	O
buf	array
[	O
18	int
+	O
1	int
]	O
;	O
const	O
char	O
*	O
pretty_msgstr	pointer
=	O
"msgstr"	pointer
;	O
bool	bool
has_plural_translations	bool
=	O
(	O
strlen	function
(	O
msgstr	pointer
)	O
+	O
1	int
<	O
msgstr_len	long
)	O
;	O
const	O
char	O
*	O
p_end	pointer
=	O
msgstr	pointer
+	O
msgstr_len	long
;	O
const	O
char	O
*	O
p	pointer
;	O
unsigned	O
int	O
j	long
;	O
for	O
(	O
p	pointer
=	O
msgstr	pointer
,	O
j	long
=	O
0	int
;	O
p	pointer
<	O
p_end	pointer
;	O
p	pointer
+=	O
strlen	function
(	O
p	pointer
)	O
+	O
1	int
,	O
j	long
++	O
)	O
{	O
void	O
*	O
msgstr_descr	pointer
;	O
if	O
(	O
msgid_plural	pointer
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
buf	array
,	O
"msgstr[%u]"	pointer
,	O
j	long
)	O
;	O
pretty_msgstr	pointer
=	O
buf	array
;	O
}	O
msgstr_descr	pointer
=	O
parser	pointer
->	O
parse	pointer
(	O
p	pointer
,	O
true	int
,	O
NULL	O
,	O
&	O
invalid_reason	pointer
)	O
;	O
if	O
(	O
msgstr_descr	pointer
!=	O
NULL	O
)	O
{	O
bool	bool
strict_checking	bool
=	O
(	O
msgid_plural	pointer
==	O
NULL	O
||	O
!	O
has_plural_translations	bool
||	O
(	O
distribution	pointer
!=	O
NULL	O
&&	O
distribution	pointer
->	O
often	pointer
!=	O
NULL	O
&&	O
j	long
<	O
distribution	pointer
->	O
often_length	long
&&	O
distribution	pointer
->	O
often	pointer
[	O
j	long
]	O
&&	O
!	O
(	O
has_range_p	O
(	O
range	struct
)	O
&&	O
distribution	pointer
->	O
histogram	pointer
(	O
distribution	pointer
,	O
range	struct
.	O
min	int
,	O
range	struct
.	O
max	int
,	O
j	long
)	O
<=	O
1	int
)	O
)	O
)	O
;	O
if	O
(	O
parser	pointer
->	O
check	pointer
(	O
msgid_descr	pointer
,	O
msgstr_descr	pointer
,	O
strict_checking	bool
,	O
error_logger	pointer
,	O
pretty_msgid	pointer
,	O
pretty_msgstr	pointer
)	O
)	O
seen_errors	int
++	O
;	O
parser	pointer
->	O
free	pointer
(	O
msgstr_descr	pointer
)	O
;	O
}	O
else	O
{	O
error_logger	pointer
(	O
_	O
(	O
"'%s' is not a valid %s format string, unlike '%s'. Reason: %s"	pointer
)	O
,	O
pretty_msgstr	pointer
,	O
format_language_pretty	array
[	O
i	long
]	O
,	O
pretty_msgid	pointer
,	O
invalid_reason	pointer
)	O
;	O
seen_errors	int
++	O
;	O
free	pointer
(	O
invalid_reason	pointer
)	O
;	O
}	O
}	O
parser	pointer
->	O
free	pointer
(	O
msgid_descr	pointer
)	O
;	O
}	O
else	O
free	pointer
(	O
invalid_reason	pointer
)	O
;	O
return	O
seen_errors	int
;	O
}	O
int	O
check_msgid_msgstr_format	function
(	O
const	O
char	O
*	O
msgid	pointer
,	O
const	O
char	O
*	O
msgid_plural	pointer
,	O
const	O
char	O
*	O
msgstr	pointer
,	O
size_t	long
msgstr_len	long
,	O
const	O
enum	O
is_format	enum
is_format	enum
[	O
NFORMATS	int
]	O
,	O
struct	O
argument_range	struct
range	struct
,	O
const	O
struct	O
plural_distribution	struct
*	O
distribution	pointer
,	O
formatstring_error_logger_t	pointer
error_logger	pointer
)	O
{	O
int	O
seen_errors	int
=	O
0	int
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
possible_format_p	function
(	O
is_format	enum
[	O
i	long
]	O
)	O
)	O
seen_errors	int
+=	O
check_msgid_msgstr_format_i	function
(	O
msgid	pointer
,	O
msgid_plural	pointer
,	O
msgstr	pointer
,	O
msgstr_len	long
,	O
i	long
,	O
range	struct
,	O
distribution	pointer
,	O
error_logger	pointer
)	O
;	O
return	O
seen_errors	int
;	O
}	O
