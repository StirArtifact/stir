static	O
mp_limb_t	long
powlimb	function
(	O
mp_limb_t	long
a	int
,	O
mp_limb_t	long
e	long
)	O
{	O
mp_limb_t	long
r	long
=	O
1	int
;	O
mp_limb_t	long
s	array
=	O
a	int
;	O
for	O
(	O
r	long
=	O
1	int
,	O
s	array
=	O
a	int
;	O
e	long
>	O
0	int
;	O
e	long
>>=	O
1	int
,	O
s	array
*=	O
s	array
)	O
if	O
(	O
e	long
&	O
1	int
)	O
r	long
*=	O
s	array
;	O
return	O
r	long
;	O
}	O
void	O
mpn_brootinv	O
(	O
mp_ptr	pointer
rp	pointer
,	O
mp_srcptr	pointer
yp	pointer
,	O
mp_size_t	long
bn	long
,	O
mp_limb_t	long
k	int
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_ptr	pointer
tp2	pointer
,	O
tp3	pointer
;	O
mp_limb_t	long
kinv	long
,	O
k2	long
,	O
r0	long
,	O
y0	long
;	O
mp_size_t	long
order	array
[	O
GMP_LIMB_BITS	int
+	O
1	int
]	O
;	O
int	O
i	long
,	O
d	long
;	O
ASSERT	O
(	O
bn	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
(	O
k	int
&	O
1	int
)	O
!=	O
0	int
)	O
;	O
tp2	pointer
=	O
tp	pointer
+	O
bn	long
;	O
tp3	pointer
=	O
tp	pointer
+	O
2	int
*	O
bn	long
;	O
k2	long
=	O
k	int
+	O
1	int
;	O
binvert_limb	O
(	O
kinv	long
,	O
k	int
)	O
;	O
y0	long
=	O
yp	pointer
[	O
0	int
]	O
;	O
r0	long
=	O
y0	long
^	O
(	O
(	O
(	O
y0	long
<<	O
1	int
)	O
^	O
(	O
y0	long
<<	O
2	int
)	O
)	O
&	O
~	O
(	O
k	int
<<	O
2	int
)	O
&	O
8	int
)	O
;	O
r0	long
=	O
kinv	long
*	O
(	O
k2	long
*	O
r0	long
-	O
y0	long
*	O
powlimb	function
(	O
r0	long
,	O
k2	long
&	O
0x7f	int
)	O
)	O
;	O
r0	long
=	O
kinv	long
*	O
(	O
k2	long
*	O
r0	long
-	O
y0	long
*	O
powlimb	function
(	O
r0	long
,	O
k2	long
&	O
0xffff	int
)	O
)	O
;	O
r0	long
=	O
kinv	long
*	O
(	O
k2	long
*	O
r0	long
-	O
y0	long
*	O
powlimb	function
(	O
r0	long
,	O
k2	long
)	O
)	O
;	O
{	O
unsigned	O
prec	int
=	O
32	int
;	O
do	O
{	O
r0	long
=	O
kinv	long
*	O
(	O
k2	long
*	O
r0	long
-	O
y0	long
*	O
powlimb	function
(	O
r0	long
,	O
k2	long
)	O
)	O
;	O
prec	int
*=	O
2	int
;	O
}	O
while	O
(	O
prec	int
<	O
GMP_NUMB_BITS	O
)	O
;	O
}	O
rp	pointer
[	O
0	int
]	O
=	O
r0	long
;	O
if	O
(	O
bn	long
==	O
1	int
)	O
return	O
;	O
MPN_ZERO	O
(	O
rp	pointer
+	O
1	int
,	O
bn	long
-	O
1	int
)	O
;	O
d	long
=	O
0	int
;	O
for	O
(	O
;	O
bn	long
>	O
1	int
;	O
bn	long
=	O
(	O
bn	long
+	O
1	int
)	O
>>	O
1	int
)	O
order	array
[	O
d	long
++	O
]	O
=	O
bn	long
;	O
for	O
(	O
i	long
=	O
d	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
bn	long
=	O
order	array
[	O
i	long
]	O
;	O
mpn_mul_1	O
(	O
tp	pointer
,	O
rp	pointer
,	O
bn	long
,	O
k2	long
)	O
;	O
mpn_powlo	O
(	O
tp2	pointer
,	O
rp	pointer
,	O
&	O
k2	long
,	O
1	int
,	O
bn	long
,	O
tp3	pointer
)	O
;	O
mpn_mullo_n	O
(	O
rp	pointer
,	O
yp	pointer
,	O
tp2	pointer
,	O
bn	long
)	O
;	O
mpn_sub_n	O
(	O
tp2	pointer
,	O
tp	pointer
,	O
rp	pointer
,	O
bn	long
)	O
;	O
mpn_pi1_bdiv_q_1	O
(	O
rp	pointer
,	O
tp2	pointer
,	O
bn	long
,	O
k	int
,	O
kinv	long
,	O
0	int
)	O
;	O
}	O
}	O
