static	O
gsl_odeiv2_driver	struct
*	O
driver_alloc	function
(	O
const	O
gsl_odeiv2_system	struct
*	O
sys	pointer
,	O
const	O
double	O
hstart	double
,	O
const	O
gsl_odeiv2_step_type	struct
*	O
T	pointer
)	O
{	O
gsl_odeiv2_driver	struct
*	O
state	pointer
;	O
if	O
(	O
sys	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"gsl_odeiv2_system must be defined"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	pointer
=	O
(	O
gsl_odeiv2_driver	struct
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
gsl_odeiv2_driver	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for driver state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
{	O
const	O
size_t	long
dim	long
=	O
sys	pointer
->	O
dimension	long
;	O
if	O
(	O
dim	long
==	O
0	int
)	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"gsl_odeiv2_system dimension must be a positive integer"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	pointer
->	O
sys	pointer
=	O
sys	pointer
;	O
state	pointer
->	O
s	pointer
=	O
gsl_odeiv2_step_alloc	function
(	O
T	pointer
,	O
dim	long
)	O
;	O
if	O
(	O
state	pointer
->	O
s	pointer
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate step object"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
e	pointer
=	O
gsl_odeiv2_evolve_alloc	function
(	O
dim	long
)	O
;	O
}	O
if	O
(	O
state	pointer
->	O
e	pointer
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate evolve object"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
if	O
(	O
hstart	double
>	O
0.0	int
||	O
hstart	double
<	O
0.0	int
)	O
{	O
state	pointer
->	O
h	double
=	O
hstart	double
;	O
}	O
else	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"invalid hstart"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	pointer
->	O
h	double
=	O
hstart	double
;	O
state	pointer
->	O
hmin	double
=	O
0.0	int
;	O
state	pointer
->	O
hmax	double
=	O
GSL_DBL_MAX	int
;	O
state	pointer
->	O
nmax	long
=	O
0	int
;	O
state	pointer
->	O
n	long
=	O
0	int
;	O
state	pointer
->	O
c	pointer
=	O
NULL	O
;	O
return	O
state	pointer
;	O
}	O
int	O
gsl_odeiv2_driver_set_hmin	function
(	O
gsl_odeiv2_driver	struct
*	O
d	pointer
,	O
const	O
double	O
hmin	double
)	O
{	O
if	O
(	O
(	O
fabs	function
(	O
hmin	double
)	O
>	O
fabs	function
(	O
d	pointer
->	O
h	double
)	O
)	O
||	O
(	O
fabs	function
(	O
hmin	double
)	O
>	O
d	pointer
->	O
hmax	double
)	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"hmin <= fabs(h) <= hmax required"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
d	pointer
->	O
hmin	double
=	O
fabs	function
(	O
hmin	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_odeiv2_driver_set_hmax	function
(	O
gsl_odeiv2_driver	struct
*	O
d	pointer
,	O
const	O
double	O
hmax	double
)	O
{	O
if	O
(	O
(	O
fabs	function
(	O
hmax	double
)	O
<	O
fabs	function
(	O
d	pointer
->	O
h	double
)	O
)	O
||	O
(	O
fabs	function
(	O
hmax	double
)	O
<	O
d	pointer
->	O
hmin	double
)	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"hmin <= fabs(h) <= hmax required"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
hmax	double
>	O
0.0	int
||	O
hmax	double
<	O
0.0	int
)	O
{	O
d	pointer
->	O
hmax	double
=	O
fabs	function
(	O
hmax	double
)	O
;	O
}	O
else	O
{	O
GSL_ERROR_NULL	O
(	O
"invalid hmax"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_odeiv2_driver_set_nmax	function
(	O
gsl_odeiv2_driver	struct
*	O
d	pointer
,	O
const	O
unsigned	O
long	O
int	O
nmax	long
)	O
{	O
d	pointer
->	O
nmax	long
=	O
nmax	long
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
gsl_odeiv2_driver	struct
*	O
gsl_odeiv2_driver_alloc_y_new	function
(	O
const	O
gsl_odeiv2_system	struct
*	O
sys	pointer
,	O
const	O
gsl_odeiv2_step_type	struct
*	O
T	pointer
,	O
const	O
double	O
hstart	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
)	O
{	O
gsl_odeiv2_driver	struct
*	O
state	pointer
=	O
driver_alloc	function
(	O
sys	pointer
,	O
hstart	double
,	O
T	pointer
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate driver object"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
if	O
(	O
epsabs	double
>=	O
0.0	int
&&	O
epsrel	double
>=	O
0.0	int
)	O
{	O
state	pointer
->	O
c	pointer
=	O
gsl_odeiv2_control_y_new	function
(	O
epsabs	double
,	O
epsrel	double
)	O
;	O
if	O
(	O
state	pointer
->	O
c	pointer
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate control object"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
}	O
else	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"epsabs and epsrel must be positive"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
gsl_odeiv2_step_set_driver	function
(	O
state	pointer
->	O
s	pointer
,	O
state	pointer
)	O
;	O
gsl_odeiv2_evolve_set_driver	function
(	O
state	pointer
->	O
e	pointer
,	O
state	pointer
)	O
;	O
gsl_odeiv2_control_set_driver	function
(	O
state	pointer
->	O
c	pointer
,	O
state	pointer
)	O
;	O
return	O
state	pointer
;	O
}	O
gsl_odeiv2_driver	struct
*	O
gsl_odeiv2_driver_alloc_yp_new	function
(	O
const	O
gsl_odeiv2_system	struct
*	O
sys	pointer
,	O
const	O
gsl_odeiv2_step_type	struct
*	O
T	pointer
,	O
const	O
double	O
hstart	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
)	O
{	O
gsl_odeiv2_driver	struct
*	O
state	pointer
=	O
driver_alloc	function
(	O
sys	pointer
,	O
hstart	double
,	O
T	pointer
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate driver object"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
if	O
(	O
epsabs	double
>=	O
0.0	int
&&	O
epsrel	double
>=	O
0.0	int
)	O
{	O
state	pointer
->	O
c	pointer
=	O
gsl_odeiv2_control_yp_new	function
(	O
epsabs	double
,	O
epsrel	double
)	O
;	O
if	O
(	O
state	pointer
->	O
c	pointer
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate control object"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
}	O
else	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"epsabs and epsrel must be positive"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
gsl_odeiv2_step_set_driver	function
(	O
state	pointer
->	O
s	pointer
,	O
state	pointer
)	O
;	O
gsl_odeiv2_evolve_set_driver	function
(	O
state	pointer
->	O
e	pointer
,	O
state	pointer
)	O
;	O
gsl_odeiv2_control_set_driver	function
(	O
state	pointer
->	O
c	pointer
,	O
state	pointer
)	O
;	O
return	O
state	pointer
;	O
}	O
gsl_odeiv2_driver	struct
*	O
gsl_odeiv2_driver_alloc_standard_new	function
(	O
const	O
gsl_odeiv2_system	struct
*	O
sys	pointer
,	O
const	O
gsl_odeiv2_step_type	struct
*	O
T	pointer
,	O
const	O
double	O
hstart	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
,	O
const	O
double	O
a_y	double
,	O
const	O
double	O
a_dydt	double
)	O
{	O
gsl_odeiv2_driver	struct
*	O
state	pointer
=	O
driver_alloc	function
(	O
sys	pointer
,	O
hstart	double
,	O
T	pointer
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate driver object"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
if	O
(	O
epsabs	double
>=	O
0.0	int
&&	O
epsrel	double
>=	O
0.0	int
)	O
{	O
state	pointer
->	O
c	pointer
=	O
gsl_odeiv2_control_standard_new	function
(	O
epsabs	double
,	O
epsrel	double
,	O
a_y	double
,	O
a_dydt	double
)	O
;	O
if	O
(	O
state	pointer
->	O
c	pointer
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate control object"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
}	O
else	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"epsabs and epsrel must be positive"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
gsl_odeiv2_step_set_driver	function
(	O
state	pointer
->	O
s	pointer
,	O
state	pointer
)	O
;	O
gsl_odeiv2_evolve_set_driver	function
(	O
state	pointer
->	O
e	pointer
,	O
state	pointer
)	O
;	O
gsl_odeiv2_control_set_driver	function
(	O
state	pointer
->	O
c	pointer
,	O
state	pointer
)	O
;	O
return	O
state	pointer
;	O
}	O
gsl_odeiv2_driver	struct
*	O
gsl_odeiv2_driver_alloc_scaled_new	function
(	O
const	O
gsl_odeiv2_system	struct
*	O
sys	pointer
,	O
const	O
gsl_odeiv2_step_type	struct
*	O
T	pointer
,	O
const	O
double	O
hstart	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
,	O
const	O
double	O
a_y	double
,	O
const	O
double	O
a_dydt	double
,	O
const	O
double	O
scale_abs	array
[	O
]	O
)	O
{	O
gsl_odeiv2_driver	struct
*	O
state	pointer
=	O
driver_alloc	function
(	O
sys	pointer
,	O
hstart	double
,	O
T	pointer
)	O
;	O
if	O
(	O
state	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate driver object"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
if	O
(	O
epsabs	double
>=	O
0.0	int
&&	O
epsrel	double
>=	O
0.0	int
)	O
{	O
state	pointer
->	O
c	pointer
=	O
gsl_odeiv2_control_scaled_new	function
(	O
epsabs	double
,	O
epsrel	double
,	O
a_y	double
,	O
a_dydt	double
,	O
scale_abs	array
,	O
sys	pointer
->	O
dimension	long
)	O
;	O
if	O
(	O
state	pointer
->	O
c	pointer
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate control object"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
}	O
else	O
{	O
gsl_odeiv2_driver_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"epsabs and epsrel must be positive"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
gsl_odeiv2_step_set_driver	function
(	O
state	pointer
->	O
s	pointer
,	O
state	pointer
)	O
;	O
gsl_odeiv2_evolve_set_driver	function
(	O
state	pointer
->	O
e	pointer
,	O
state	pointer
)	O
;	O
gsl_odeiv2_control_set_driver	function
(	O
state	pointer
->	O
c	pointer
,	O
state	pointer
)	O
;	O
return	O
state	pointer
;	O
}	O
int	O
gsl_odeiv2_driver_apply	function
(	O
gsl_odeiv2_driver	struct
*	O
d	pointer
,	O
double	O
*	O
t	double
,	O
const	O
double	O
t1	double
,	O
double	O
y	array
[	O
]	O
)	O
{	O
int	O
sign	int
=	O
0	int
;	O
d	pointer
->	O
n	long
=	O
0	int
;	O
if	O
(	O
d	pointer
->	O
h	double
>	O
0.0	int
)	O
{	O
sign	int
=	O
1	int
;	O
}	O
else	O
{	O
sign	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
sign	int
*	O
(	O
t1	double
-	O
*	O
t	double
)	O
<	O
0.0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"integration limits and/or step direction not consistent"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
while	O
(	O
sign	int
*	O
(	O
t1	double
-	O
*	O
t	double
)	O
>	O
0.0	int
)	O
{	O
int	O
s	pointer
=	O
gsl_odeiv2_evolve_apply	function
(	O
d	pointer
->	O
e	pointer
,	O
d	pointer
->	O
c	pointer
,	O
d	pointer
->	O
s	pointer
,	O
d	pointer
->	O
sys	pointer
,	O
t	double
,	O
t1	double
,	O
&	O
(	O
d	pointer
->	O
h	double
)	O
,	O
y	array
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
if	O
(	O
(	O
d	pointer
->	O
nmax	long
>	O
0	int
)	O
&&	O
(	O
d	pointer
->	O
n	long
>	O
d	pointer
->	O
nmax	long
)	O
)	O
{	O
return	O
GSL_EMAXITER	int
;	O
}	O
if	O
(	O
fabs	function
(	O
d	pointer
->	O
h	double
)	O
>	O
d	pointer
->	O
hmax	double
)	O
{	O
d	pointer
->	O
h	double
=	O
sign	int
*	O
d	pointer
->	O
hmax	double
;	O
}	O
if	O
(	O
fabs	function
(	O
d	pointer
->	O
h	double
)	O
<	O
d	pointer
->	O
hmin	double
)	O
{	O
return	O
GSL_ENOPROG	int
;	O
}	O
d	pointer
->	O
n	long
++	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_odeiv2_driver_apply_fixed_step	function
(	O
gsl_odeiv2_driver	struct
*	O
d	pointer
,	O
double	O
*	O
t	double
,	O
const	O
double	O
h	double
,	O
const	O
unsigned	O
long	O
int	O
n	long
,	O
double	O
y	array
[	O
]	O
)	O
{	O
unsigned	O
long	O
int	O
i	long
;	O
d	pointer
->	O
n	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
{	O
int	O
s	pointer
=	O
gsl_odeiv2_evolve_apply_fixed_step	function
(	O
d	pointer
->	O
e	pointer
,	O
d	pointer
->	O
c	pointer
,	O
d	pointer
->	O
s	pointer
,	O
d	pointer
->	O
sys	pointer
,	O
t	double
,	O
h	double
,	O
y	array
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
d	pointer
->	O
n	long
++	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_odeiv2_driver_reset	function
(	O
gsl_odeiv2_driver	struct
*	O
d	pointer
)	O
{	O
{	O
int	O
s	pointer
=	O
gsl_odeiv2_evolve_reset	function
(	O
d	pointer
->	O
e	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
{	O
int	O
s	pointer
=	O
gsl_odeiv2_step_reset	function
(	O
d	pointer
->	O
s	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_odeiv2_driver_reset_hstart	function
(	O
gsl_odeiv2_driver	struct
*	O
d	pointer
,	O
const	O
double	O
hstart	double
)	O
{	O
gsl_odeiv2_driver_reset	function
(	O
d	pointer
)	O
;	O
if	O
(	O
(	O
d	pointer
->	O
hmin	double
>	O
fabs	function
(	O
hstart	double
)	O
)	O
||	O
(	O
fabs	function
(	O
hstart	double
)	O
>	O
d	pointer
->	O
hmax	double
)	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"hmin <= fabs(h) <= hmax required"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
hstart	double
>	O
0.0	int
||	O
hstart	double
<	O
0.0	int
)	O
{	O
d	pointer
->	O
h	double
=	O
hstart	double
;	O
}	O
else	O
{	O
GSL_ERROR_NULL	O
(	O
"invalid hstart"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
void	O
gsl_odeiv2_driver_free	function
(	O
gsl_odeiv2_driver	struct
*	O
state	pointer
)	O
{	O
if	O
(	O
state	pointer
->	O
c	pointer
)	O
gsl_odeiv2_control_free	function
(	O
state	pointer
->	O
c	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
e	pointer
)	O
gsl_odeiv2_evolve_free	function
(	O
state	pointer
->	O
e	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
s	pointer
)	O
gsl_odeiv2_step_free	function
(	O
state	pointer
->	O
s	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
