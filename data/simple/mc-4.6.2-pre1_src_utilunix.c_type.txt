struct	O
sigaction	struct
startup_handler	struct
;	O
typedef	O
struct	O
{	O
int	O
index	function
;	O
char	O
*	O
string	pointer
;	O
}	O
int_cache	struct
;	O
static	O
int_cache	struct
uid_cache	array
[	O
UID_CACHE_SIZE	int
]	O
;	O
static	O
int_cache	struct
gid_cache	array
[	O
GID_CACHE_SIZE	int
]	O
;	O
static	O
char	O
*	O
i_cache_match	function
(	O
int	O
id	int
,	O
int_cache	struct
*	O
cache	pointer
,	O
int	O
size	long
)	O
{	O
int	O
i	array
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
size	long
;	O
i	array
++	O
)	O
if	O
(	O
cache	pointer
[	O
i	array
]	O
.	O
index	function
==	O
id	int
)	O
return	O
cache	pointer
[	O
i	array
]	O
.	O
string	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
i_cache_add	function
(	O
int	O
id	int
,	O
int_cache	struct
*	O
cache	pointer
,	O
int	O
size	long
,	O
char	O
*	O
text	pointer
,	O
int	O
*	O
last	pointer
)	O
{	O
g_free	function
(	O
cache	pointer
[	O
*	O
last	pointer
]	O
.	O
string	pointer
)	O
;	O
cache	pointer
[	O
*	O
last	pointer
]	O
.	O
string	pointer
=	O
g_strdup	function
(	O
text	pointer
)	O
;	O
cache	pointer
[	O
*	O
last	pointer
]	O
.	O
index	function
=	O
id	int
;	O
*	O
last	pointer
=	O
(	O
(	O
*	O
last	pointer
)	O
+	O
1	int
)	O
%	O
size	long
;	O
}	O
char	O
*	O
get_owner	function
(	O
int	O
uid	int
)	O
{	O
struct	O
passwd	struct
*	O
pwd	pointer
;	O
static	O
char	O
ibuf	array
[	O
10	int
]	O
;	O
char	O
*	O
name	pointer
;	O
static	O
int	O
uid_last	int
;	O
if	O
(	O
(	O
name	pointer
=	O
i_cache_match	function
(	O
uid	int
,	O
uid_cache	array
,	O
UID_CACHE_SIZE	int
)	O
)	O
!=	O
NULL	O
)	O
return	O
name	pointer
;	O
pwd	pointer
=	O
getpwuid	function
(	O
uid	int
)	O
;	O
if	O
(	O
pwd	pointer
)	O
{	O
i_cache_add	function
(	O
uid	int
,	O
uid_cache	array
,	O
UID_CACHE_SIZE	int
,	O
pwd	pointer
->	O
pw_name	pointer
,	O
&	O
uid_last	int
)	O
;	O
return	O
pwd	pointer
->	O
pw_name	pointer
;	O
}	O
else	O
{	O
g_snprintf	function
(	O
ibuf	array
,	O
sizeof	O
(	O
ibuf	array
)	O
,	O
"%d"	pointer
,	O
uid	int
)	O
;	O
return	O
ibuf	array
;	O
}	O
}	O
char	O
*	O
get_group	function
(	O
int	O
gid	int
)	O
{	O
struct	O
group	struct
*	O
grp	pointer
;	O
static	O
char	O
gbuf	array
[	O
10	int
]	O
;	O
char	O
*	O
name	pointer
;	O
static	O
int	O
gid_last	int
;	O
if	O
(	O
(	O
name	pointer
=	O
i_cache_match	function
(	O
gid	int
,	O
gid_cache	array
,	O
GID_CACHE_SIZE	int
)	O
)	O
!=	O
NULL	O
)	O
return	O
name	pointer
;	O
grp	pointer
=	O
getgrgid	function
(	O
gid	int
)	O
;	O
if	O
(	O
grp	pointer
)	O
{	O
i_cache_add	function
(	O
gid	int
,	O
gid_cache	array
,	O
GID_CACHE_SIZE	int
,	O
grp	pointer
->	O
gr_name	pointer
,	O
&	O
gid_last	int
)	O
;	O
return	O
grp	pointer
->	O
gr_name	pointer
;	O
}	O
else	O
{	O
g_snprintf	function
(	O
gbuf	array
,	O
sizeof	O
(	O
gbuf	array
)	O
,	O
"%d"	pointer
,	O
gid	int
)	O
;	O
return	O
gbuf	array
;	O
}	O
}	O
void	O
save_stop_handler	function
(	O
void	O
)	O
{	O
sigaction	struct
(	O
SIGTSTP	int
,	O
NULL	O
,	O
&	O
startup_handler	struct
)	O
;	O
}	O
int	O
my_system	function
(	O
int	O
flags	enum
,	O
const	O
char	O
*	O
shell	pointer
,	O
const	O
char	O
*	O
command	pointer
)	O
{	O
struct	O
sigaction	struct
ignore	struct
,	O
save_intr	struct
,	O
save_quit	struct
,	O
save_stop	struct
;	O
pid_t	int
pid	int
;	O
int	O
status	int
=	O
0	int
;	O
ignore	struct
.	O
sa_handler	pointer
=	O
SIG_IGN	O
;	O
sigemptyset	function
(	O
&	O
ignore	struct
.	O
sa_mask	struct
)	O
;	O
ignore	struct
.	O
sa_flags	int
=	O
0	int
;	O
sigaction	struct
(	O
SIGINT	int
,	O
&	O
ignore	struct
,	O
&	O
save_intr	struct
)	O
;	O
sigaction	struct
(	O
SIGQUIT	int
,	O
&	O
ignore	struct
,	O
&	O
save_quit	struct
)	O
;	O
sigaction	struct
(	O
SIGTSTP	int
,	O
&	O
startup_handler	struct
,	O
&	O
save_stop	struct
)	O
;	O
if	O
(	O
(	O
pid	int
=	O
fork	function
(	O
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"\n\nfork () = -1\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
signal	function
(	O
SIGINT	int
,	O
SIG_DFL	O
)	O
;	O
signal	function
(	O
SIGQUIT	int
,	O
SIG_DFL	O
)	O
;	O
signal	function
(	O
SIGTSTP	int
,	O
SIG_DFL	O
)	O
;	O
signal	function
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
;	O
if	O
(	O
flags	enum
&	O
EXECUTE_AS_SHELL	O
)	O
execl	function
(	O
shell	pointer
,	O
shell	pointer
,	O
"-c"	pointer
,	O
command	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
else	O
execlp	function
(	O
shell	pointer
,	O
shell	pointer
,	O
command	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
_exit	function
(	O
127	int
)	O
;	O
}	O
else	O
{	O
while	O
(	O
waitpid	function
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
<	O
0	int
)	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
{	O
status	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
}	O
sigaction	struct
(	O
SIGINT	int
,	O
&	O
save_intr	struct
,	O
NULL	O
)	O
;	O
sigaction	struct
(	O
SIGQUIT	int
,	O
&	O
save_quit	struct
,	O
NULL	O
)	O
;	O
sigaction	struct
(	O
SIGTSTP	int
,	O
&	O
save_stop	struct
,	O
NULL	O
)	O
;	O
return	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
}	O
char	O
*	O
tilde_expand	function
(	O
const	O
char	O
*	O
directory	enum
)	O
{	O
struct	O
passwd	struct
*	O
passwd	struct
;	O
const	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
char	O
*	O
name	pointer
;	O
if	O
(	O
*	O
directory	enum
!=	O
'~'	O
)	O
return	O
g_strdup	function
(	O
directory	enum
)	O
;	O
p	pointer
=	O
directory	enum
+	O
1	int
;	O
if	O
(	O
!	O
(	O
*	O
p	pointer
)	O
||	O
(	O
*	O
p	pointer
==	O
PATH_SEP	char
)	O
)	O
{	O
passwd	struct
=	O
getpwuid	function
(	O
geteuid	function
(	O
)	O
)	O
;	O
q	pointer
=	O
(	O
*	O
p	pointer
==	O
PATH_SEP	char
)	O
?	O
p	pointer
+	O
1	int
:	O
""	pointer
;	O
}	O
else	O
{	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
PATH_SEP	char
)	O
;	O
if	O
(	O
!	O
q	pointer
)	O
{	O
passwd	struct
=	O
getpwnam	function
(	O
p	pointer
)	O
;	O
}	O
else	O
{	O
name	pointer
=	O
g_strndup	function
(	O
p	pointer
,	O
q	pointer
-	O
p	pointer
)	O
;	O
passwd	struct
=	O
getpwnam	function
(	O
name	pointer
)	O
;	O
q	pointer
++	O
;	O
g_free	function
(	O
name	pointer
)	O
;	O
}	O
}	O
if	O
(	O
!	O
passwd	struct
)	O
return	O
g_strdup	function
(	O
directory	enum
)	O
;	O
return	O
g_strconcat	function
(	O
passwd	struct
->	O
pw_dir	pointer
,	O
PATH_SEP_STR	pointer
,	O
q	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
static	O
void	O
mc_setenv	function
(	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
value	pointer
,	O
int	O
overwrite_flag	int
)	O
{	O
setenv	function
(	O
name	pointer
,	O
value	pointer
,	O
overwrite_flag	int
)	O
;	O
}	O
const	O
char	O
*	O
mc_tmpdir	function
(	O
void	O
)	O
{	O
static	O
char	O
buffer	pointer
[	O
64	int
]	O
;	O
static	O
const	O
char	O
*	O
tmpdir	pointer
;	O
const	O
char	O
*	O
sys_tmp	pointer
;	O
struct	O
passwd	struct
*	O
pwd	pointer
;	O
struct	O
stat	struct
st	struct
;	O
const	O
char	O
*	O
error	pointer
=	O
NULL	O
;	O
if	O
(	O
tmpdir	pointer
&&	O
lstat	function
(	O
tmpdir	pointer
,	O
&	O
st	struct
)	O
==	O
0	int
&&	O
S_ISDIR	O
(	O
st	struct
.	O
st_mode	int
)	O
&&	O
st	struct
.	O
st_uid	int
==	O
getuid	function
(	O
)	O
&&	O
(	O
st	struct
.	O
st_mode	int
&	O
0777	int
)	O
==	O
0700	int
)	O
return	O
tmpdir	pointer
;	O
sys_tmp	pointer
=	O
getenv	function
(	O
"TMPDIR"	pointer
)	O
;	O
if	O
(	O
!	O
sys_tmp	pointer
||	O
sys_tmp	pointer
[	O
0	int
]	O
!=	O
'/'	O
)	O
{	O
sys_tmp	pointer
=	O
TMPDIR_DEFAULT	pointer
;	O
}	O
pwd	pointer
=	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
if	O
(	O
pwd	pointer
)	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%s/mc-%s"	pointer
,	O
sys_tmp	pointer
,	O
pwd	pointer
->	O
pw_name	pointer
)	O
;	O
else	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%s/mc-%lu"	pointer
,	O
sys_tmp	pointer
,	O
(	O
unsigned	O
long	O
)	O
getuid	function
(	O
)	O
)	O
;	O
canonicalize_pathname	function
(	O
buffer	pointer
)	O
;	O
if	O
(	O
lstat	function
(	O
buffer	pointer
,	O
&	O
st	struct
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
S_ISDIR	O
(	O
st	struct
.	O
st_mode	int
)	O
)	O
error	pointer
=	O
_	O
(	O
"%s is not a directory\n"	pointer
)	O
;	O
else	O
if	O
(	O
st	struct
.	O
st_uid	int
!=	O
getuid	function
(	O
)	O
)	O
error	pointer
=	O
_	O
(	O
"Directory %s is not owned by you\n"	pointer
)	O
;	O
else	O
if	O
(	O
(	O
(	O
st	struct
.	O
st_mode	int
&	O
0777	int
)	O
!=	O
0700	int
)	O
&&	O
(	O
chmod	function
(	O
buffer	pointer
,	O
0700	int
)	O
!=	O
0	int
)	O
)	O
error	pointer
=	O
_	O
(	O
"Cannot set correct permissions for directory %s\n"	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
mkdir	function
(	O
buffer	pointer
,	O
S_IRWXU	O
)	O
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Cannot create temporary directory %s: %s\n"	pointer
)	O
,	O
buffer	pointer
,	O
unix_error_string	function
(	O
errno	O
)	O
)	O
;	O
error	pointer
=	O
""	pointer
;	O
}	O
}	O
if	O
(	O
error	pointer
!=	O
NULL	O
)	O
{	O
int	O
test_fd	int
;	O
char	O
*	O
test_fn	pointer
,	O
*	O
fallback_prefix	pointer
;	O
int	O
fallback_ok	int
=	O
0	int
;	O
if	O
(	O
*	O
error	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
error	pointer
,	O
buffer	pointer
)	O
;	O
fallback_prefix	pointer
=	O
g_strdup_printf	function
(	O
"%s/mctest"	pointer
,	O
sys_tmp	pointer
)	O
;	O
test_fd	int
=	O
mc_mkstemps	function
(	O
&	O
test_fn	pointer
,	O
fallback_prefix	pointer
,	O
NULL	O
)	O
;	O
g_free	function
(	O
fallback_prefix	pointer
)	O
;	O
if	O
(	O
test_fd	int
!=	O
-	O
1	int
)	O
{	O
close	pointer
(	O
test_fd	int
)	O
;	O
test_fd	int
=	O
open	function
(	O
test_fn	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
test_fd	int
!=	O
-	O
1	int
)	O
{	O
close	pointer
(	O
test_fd	int
)	O
;	O
unlink	function
(	O
test_fn	pointer
)	O
;	O
fallback_ok	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
fallback_ok	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Temporary files will be created in %s\n"	pointer
)	O
,	O
sys_tmp	pointer
)	O
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%s"	pointer
,	O
sys_tmp	pointer
)	O
;	O
error	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Temporary files will not be created\n"	pointer
)	O
)	O
;	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%s"	pointer
,	O
"/dev/null/"	pointer
)	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
_	O
(	O
"Press any key to continue..."	pointer
)	O
)	O
;	O
getc	function
(	O
stdin	pointer
)	O
;	O
}	O
tmpdir	pointer
=	O
buffer	pointer
;	O
if	O
(	O
!	O
error	pointer
)	O
mc_setenv	function
(	O
"MC_TMPDIR"	pointer
,	O
tmpdir	pointer
,	O
1	int
)	O
;	O
return	O
tmpdir	pointer
;	O
}	O
static	O
int	O
error_pipe	array
[	O
2	int
]	O
;	O
static	O
int	O
old_error	int
;	O
void	O
open_error_pipe	function
(	O
void	O
)	O
{	O
if	O
(	O
pipe	function
(	O
error_pipe	array
)	O
<	O
0	int
)	O
{	O
message	pointer
(	O
0	int
,	O
_	O
(	O
"Warning"	pointer
)	O
,	O
_	O
(	O
" Pipe failed "	pointer
)	O
)	O
;	O
}	O
old_error	int
=	O
dup	function
(	O
2	int
)	O
;	O
if	O
(	O
old_error	int
<	O
0	int
||	O
close	pointer
(	O
2	int
)	O
||	O
dup	function
(	O
error_pipe	array
[	O
1	int
]	O
)	O
!=	O
2	int
)	O
{	O
message	pointer
(	O
0	int
,	O
_	O
(	O
"Warning"	pointer
)	O
,	O
_	O
(	O
" Dup failed "	pointer
)	O
)	O
;	O
close	pointer
(	O
error_pipe	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
error_pipe	array
[	O
1	int
]	O
)	O
;	O
}	O
close	pointer
(	O
error_pipe	array
[	O
1	int
]	O
)	O
;	O
}	O
int	O
close_error_pipe	function
(	O
int	O
error	pointer
,	O
const	O
char	O
*	O
text	pointer
)	O
{	O
const	O
char	O
*	O
title	pointer
;	O
char	O
msg	pointer
[	O
MAX_PIPE_SIZE	int
]	O
;	O
int	O
len	int
=	O
0	int
;	O
if	O
(	O
error	pointer
)	O
title	pointer
=	O
MSG_ERROR	O
;	O
else	O
title	pointer
=	O
_	O
(	O
"Warning"	pointer
)	O
;	O
if	O
(	O
old_error	int
>=	O
0	int
)	O
{	O
close	pointer
(	O
2	int
)	O
;	O
dup	function
(	O
old_error	int
)	O
;	O
close	pointer
(	O
old_error	int
)	O
;	O
len	int
=	O
read	pointer
(	O
error_pipe	array
[	O
0	int
]	O
,	O
msg	pointer
,	O
MAX_PIPE_SIZE	int
-	O
1	int
)	O
;	O
if	O
(	O
len	int
>=	O
0	int
)	O
msg	pointer
[	O
len	int
]	O
=	O
0	int
;	O
close	pointer
(	O
error_pipe	array
[	O
0	int
]	O
)	O
;	O
}	O
if	O
(	O
error	pointer
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
text	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
len	int
<=	O
0	int
)	O
return	O
0	int
;	O
message	pointer
(	O
error	pointer
,	O
title	pointer
,	O
"%s"	pointer
,	O
msg	pointer
)	O
;	O
}	O
else	O
{	O
message	pointer
(	O
error	pointer
,	O
title	pointer
,	O
" %s \n %s "	pointer
,	O
text	pointer
,	O
msg	pointer
)	O
;	O
}	O
return	O
1	int
;	O
}	O
void	O
canonicalize_pathname	function
(	O
char	O
*	O
path	pointer
)	O
{	O
char	O
*	O
p	pointer
,	O
*	O
s	pointer
;	O
int	O
len	int
;	O
char	O
*	O
lpath	pointer
=	O
path	pointer
;	O
if	O
(	O
path	pointer
[	O
0	int
]	O
==	O
PATH_SEP	char
&&	O
path	pointer
[	O
1	int
]	O
==	O
PATH_SEP	char
)	O
{	O
p	pointer
=	O
path	pointer
+	O
2	int
;	O
while	O
(	O
p	pointer
[	O
0	int
]	O
&&	O
p	pointer
[	O
0	int
]	O
!=	O
'/'	O
)	O
p	pointer
++	O
;	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
'/'	O
&&	O
p	pointer
>	O
path	pointer
+	O
2	int
)	O
lpath	pointer
=	O
p	pointer
;	O
}	O
if	O
(	O
!	O
lpath	pointer
[	O
0	int
]	O
||	O
!	O
lpath	pointer
[	O
1	int
]	O
)	O
return	O
;	O
p	pointer
=	O
lpath	pointer
;	O
while	O
(	O
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
PATH_SEP	char
&&	O
p	pointer
[	O
1	int
]	O
==	O
PATH_SEP	char
)	O
{	O
s	pointer
=	O
p	pointer
+	O
1	int
;	O
while	O
(	O
*	O
(	O
++	O
s	pointer
)	O
==	O
PATH_SEP	char
)	O
;	O
strcpy	function
(	O
p	pointer
+	O
1	int
,	O
s	pointer
)	O
;	O
}	O
p	pointer
++	O
;	O
}	O
p	pointer
=	O
lpath	pointer
;	O
while	O
(	O
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
PATH_SEP	char
&&	O
p	pointer
[	O
1	int
]	O
==	O
'.'	O
&&	O
p	pointer
[	O
2	int
]	O
==	O
PATH_SEP	char
)	O
strcpy	function
(	O
p	pointer
,	O
p	pointer
+	O
2	int
)	O
;	O
else	O
p	pointer
++	O
;	O
}	O
p	pointer
=	O
lpath	pointer
+	O
strlen	function
(	O
lpath	pointer
)	O
-	O
1	int
;	O
while	O
(	O
p	pointer
>	O
lpath	pointer
&&	O
*	O
p	pointer
==	O
PATH_SEP	char
)	O
*	O
p	pointer
--	O
=	O
0	int
;	O
if	O
(	O
lpath	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
lpath	pointer
[	O
1	int
]	O
==	O
PATH_SEP	char
)	O
{	O
if	O
(	O
lpath	pointer
[	O
2	int
]	O
==	O
0	int
)	O
{	O
lpath	pointer
[	O
1	int
]	O
=	O
0	int
;	O
return	O
;	O
}	O
else	O
{	O
strcpy	function
(	O
lpath	pointer
,	O
lpath	pointer
+	O
2	int
)	O
;	O
}	O
}	O
len	int
=	O
strlen	function
(	O
lpath	pointer
)	O
;	O
if	O
(	O
len	int
<	O
2	int
)	O
return	O
;	O
if	O
(	O
lpath	pointer
[	O
len	int
-	O
1	int
]	O
==	O
PATH_SEP	char
)	O
{	O
lpath	pointer
[	O
len	int
-	O
1	int
]	O
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
lpath	pointer
[	O
len	int
-	O
1	int
]	O
==	O
'.'	O
&&	O
lpath	pointer
[	O
len	int
-	O
2	int
]	O
==	O
PATH_SEP	char
)	O
{	O
if	O
(	O
len	int
==	O
2	int
)	O
{	O
lpath	pointer
[	O
1	int
]	O
=	O
0	int
;	O
return	O
;	O
}	O
else	O
{	O
lpath	pointer
[	O
len	int
-	O
2	int
]	O
=	O
0	int
;	O
}	O
}	O
}	O
p	pointer
=	O
lpath	pointer
;	O
while	O
(	O
p	pointer
[	O
0	int
]	O
&&	O
p	pointer
[	O
1	int
]	O
&&	O
p	pointer
[	O
2	int
]	O
)	O
{	O
if	O
(	O
(	O
p	pointer
[	O
0	int
]	O
!=	O
PATH_SEP	char
||	O
p	pointer
[	O
1	int
]	O
!=	O
'.'	O
||	O
p	pointer
[	O
2	int
]	O
!=	O
'.'	O
)	O
||	O
(	O
p	pointer
[	O
3	int
]	O
!=	O
PATH_SEP	char
&&	O
p	pointer
[	O
3	int
]	O
!=	O
0	int
)	O
)	O
{	O
p	pointer
++	O
;	O
continue	O
;	O
}	O
s	pointer
=	O
p	pointer
-	O
1	int
;	O
while	O
(	O
s	pointer
>=	O
lpath	pointer
&&	O
*	O
s	pointer
!=	O
PATH_SEP	char
)	O
s	pointer
--	O
;	O
s	pointer
++	O
;	O
if	O
(	O
s	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
s	pointer
[	O
1	int
]	O
==	O
'.'	O
&&	O
s	pointer
+	O
2	int
==	O
p	pointer
)	O
{	O
p	pointer
+=	O
3	int
;	O
continue	O
;	O
}	O
if	O
(	O
p	pointer
[	O
3	int
]	O
!=	O
0	int
)	O
{	O
if	O
(	O
s	pointer
==	O
lpath	pointer
&&	O
*	O
s	pointer
==	O
PATH_SEP	char
)	O
{	O
strcpy	function
(	O
s	pointer
+	O
1	int
,	O
p	pointer
+	O
4	int
)	O
;	O
}	O
else	O
{	O
strcpy	function
(	O
s	pointer
,	O
p	pointer
+	O
4	int
)	O
;	O
}	O
p	pointer
=	O
(	O
s	pointer
>	O
lpath	pointer
)	O
?	O
s	pointer
-	O
1	int
:	O
s	pointer
;	O
continue	O
;	O
}	O
if	O
(	O
s	pointer
==	O
lpath	pointer
)	O
{	O
if	O
(	O
lpath	pointer
[	O
0	int
]	O
!=	O
PATH_SEP	char
)	O
{	O
lpath	pointer
[	O
0	int
]	O
=	O
'.'	O
;	O
}	O
lpath	pointer
[	O
1	int
]	O
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
s	pointer
==	O
lpath	pointer
+	O
1	int
)	O
s	pointer
[	O
0	int
]	O
=	O
0	int
;	O
else	O
s	pointer
[	O
-	O
1	int
]	O
=	O
0	int
;	O
break	O
;	O
}	O
break	O
;	O
}	O
}	O
char	O
*	O
mc_realpath	function
(	O
const	O
char	O
*	O
path	pointer
,	O
char	O
resolved_path	array
[	O
]	O
)	O
{	O
char	O
copy_path	array
[	O
PATH_MAX	int
]	O
;	O
char	O
link_path	array
[	O
PATH_MAX	int
]	O
;	O
char	O
got_path	array
[	O
PATH_MAX	int
]	O
;	O
char	O
*	O
new_path	pointer
=	O
got_path	array
;	O
char	O
*	O
max_path	pointer
;	O
int	O
readlinks	int
=	O
0	int
;	O
int	O
n	long
;	O
if	O
(	O
strlen	function
(	O
path	pointer
)	O
>=	O
PATH_MAX	int
-	O
2	int
)	O
{	O
errno	O
=	O
ENAMETOOLONG	int
;	O
return	O
NULL	O
;	O
}	O
strcpy	function
(	O
copy_path	array
,	O
path	pointer
)	O
;	O
path	pointer
=	O
copy_path	array
;	O
max_path	pointer
=	O
copy_path	array
+	O
PATH_MAX	int
-	O
2	int
;	O
if	O
(	O
*	O
path	pointer
!=	O
'/'	O
)	O
{	O
getcwd	function
(	O
new_path	pointer
,	O
PATH_MAX	int
-	O
1	int
)	O
;	O
new_path	pointer
+=	O
strlen	function
(	O
new_path	pointer
)	O
;	O
if	O
(	O
new_path	pointer
[	O
-	O
1	int
]	O
!=	O
'/'	O
)	O
*	O
new_path	pointer
++	O
=	O
'/'	O
;	O
}	O
else	O
{	O
*	O
new_path	pointer
++	O
=	O
'/'	O
;	O
path	pointer
++	O
;	O
}	O
while	O
(	O
*	O
path	pointer
!=	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
path	pointer
==	O
'/'	O
)	O
{	O
path	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
*	O
path	pointer
==	O
'.'	O
)	O
{	O
if	O
(	O
path	pointer
[	O
1	int
]	O
==	O
'\0'	O
||	O
path	pointer
[	O
1	int
]	O
==	O
'/'	O
)	O
{	O
path	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
path	pointer
[	O
1	int
]	O
==	O
'.'	O
)	O
{	O
if	O
(	O
path	pointer
[	O
2	int
]	O
==	O
'\0'	O
||	O
path	pointer
[	O
2	int
]	O
==	O
'/'	O
)	O
{	O
path	pointer
+=	O
2	int
;	O
if	O
(	O
new_path	pointer
==	O
got_path	array
+	O
1	int
)	O
continue	O
;	O
while	O
(	O
(	O
--	O
new_path	pointer
)	O
[	O
-	O
1	int
]	O
!=	O
'/'	O
)	O
;	O
continue	O
;	O
}	O
}	O
}	O
while	O
(	O
*	O
path	pointer
!=	O
'\0'	O
&&	O
*	O
path	pointer
!=	O
'/'	O
)	O
{	O
if	O
(	O
path	pointer
>	O
max_path	pointer
)	O
{	O
errno	O
=	O
ENAMETOOLONG	int
;	O
return	O
NULL	O
;	O
}	O
*	O
new_path	pointer
++	O
=	O
*	O
path	pointer
++	O
;	O
}	O
if	O
(	O
readlinks	int
++	O
>	O
MAXSYMLINKS	int
)	O
{	O
errno	O
=	O
ELOOP	int
;	O
return	O
NULL	O
;	O
}	O
*	O
new_path	pointer
=	O
'\0'	O
;	O
n	long
=	O
readlink	function
(	O
got_path	array
,	O
link_path	array
,	O
PATH_MAX	int
-	O
1	int
)	O
;	O
if	O
(	O
n	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINVAL	int
)	O
{	O
*	O
new_path	pointer
=	O
'\0'	O
;	O
strcpy	function
(	O
resolved_path	array
,	O
got_path	array
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
link_path	array
[	O
n	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
link_path	array
==	O
'/'	O
)	O
new_path	pointer
=	O
got_path	array
;	O
else	O
while	O
(	O
*	O
(	O
--	O
new_path	pointer
)	O
!=	O
'/'	O
)	O
;	O
if	O
(	O
strlen	function
(	O
path	pointer
)	O
+	O
n	long
>=	O
PATH_MAX	int
-	O
2	int
)	O
{	O
errno	O
=	O
ENAMETOOLONG	int
;	O
return	O
NULL	O
;	O
}	O
strcat	function
(	O
link_path	array
,	O
path	pointer
)	O
;	O
strcpy	function
(	O
copy_path	array
,	O
link_path	array
)	O
;	O
path	pointer
=	O
copy_path	array
;	O
}	O
*	O
new_path	pointer
++	O
=	O
'/'	O
;	O
}	O
if	O
(	O
new_path	pointer
!=	O
got_path	array
+	O
1	int
&&	O
new_path	pointer
[	O
-	O
1	int
]	O
==	O
'/'	O
)	O
new_path	pointer
--	O
;	O
*	O
new_path	pointer
=	O
'\0'	O
;	O
strcpy	function
(	O
resolved_path	array
,	O
got_path	array
)	O
;	O
return	O
resolved_path	array
;	O
}	O
int	O
get_user_permissions	function
(	O
struct	O
stat	struct
*	O
st	struct
)	O
{	O
static	O
gboolean	int
initialized	int
=	O
FALSE	O
;	O
static	O
gid_t	int
*	O
groups	pointer
;	O
static	O
int	O
ngroups	int
;	O
static	O
uid_t	int
uid	int
;	O
int	O
i	array
;	O
if	O
(	O
!	O
initialized	int
)	O
{	O
uid	int
=	O
geteuid	function
(	O
)	O
;	O
ngroups	int
=	O
getgroups	function
(	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
ngroups	int
==	O
-	O
1	int
)	O
ngroups	int
=	O
0	int
;	O
groups	pointer
=	O
g_new	O
(	O
gid_t	int
,	O
ngroups	int
+	O
1	int
)	O
;	O
if	O
(	O
ngroups	int
!=	O
0	int
)	O
{	O
ngroups	int
=	O
getgroups	function
(	O
ngroups	int
,	O
groups	pointer
)	O
;	O
if	O
(	O
ngroups	int
==	O
-	O
1	int
)	O
ngroups	int
=	O
0	int
;	O
}	O
groups	pointer
[	O
ngroups	int
++	O
]	O
=	O
getegid	function
(	O
)	O
;	O
initialized	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
st	struct
->	O
st_uid	int
==	O
uid	int
||	O
uid	int
==	O
0	int
)	O
return	O
0	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
ngroups	int
;	O
i	array
++	O
)	O
{	O
if	O
(	O
st	struct
->	O
st_gid	int
==	O
groups	pointer
[	O
i	array
]	O
)	O
return	O
1	int
;	O
}	O
return	O
2	int
;	O
}	O
