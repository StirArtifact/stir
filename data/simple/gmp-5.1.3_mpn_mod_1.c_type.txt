static	O
mp_limb_t	long
mpn_mod_1_unnorm	function
(	O
mp_srcptr	pointer
up	pointer
,	O
mp_size_t	long
un	long
,	O
mp_limb_t	long
d	long
)	O
{	O
mp_size_t	long
i	long
;	O
mp_limb_t	long
n1	long
,	O
n0	long
,	O
r	long
;	O
mp_limb_t	long
dummy	long
;	O
int	O
cnt	int
;	O
ASSERT	O
(	O
un	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
d	long
!=	O
0	int
)	O
;	O
d	long
<<=	O
GMP_NAIL_BITS	int
;	O
r	long
=	O
up	pointer
[	O
un	long
-	O
1	int
]	O
<<	O
GMP_NAIL_BITS	int
;	O
if	O
(	O
r	long
<	O
d	long
)	O
{	O
r	long
>>=	O
GMP_NAIL_BITS	int
;	O
un	long
--	O
;	O
if	O
(	O
un	long
==	O
0	int
)	O
return	O
r	long
;	O
}	O
else	O
r	long
=	O
0	int
;	O
if	O
(	O
!	O
UDIV_NEEDS_NORMALIZATION	int
&&	O
BELOW_THRESHOLD	O
(	O
un	long
,	O
MOD_1_UNNORM_THRESHOLD	int
)	O
)	O
{	O
for	O
(	O
i	long
=	O
un	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
n0	long
=	O
up	pointer
[	O
i	long
]	O
<<	O
GMP_NAIL_BITS	int
;	O
udiv_qrnnd	O
(	O
dummy	long
,	O
r	long
,	O
r	long
,	O
n0	long
,	O
d	long
)	O
;	O
r	long
>>=	O
GMP_NAIL_BITS	int
;	O
}	O
return	O
r	long
;	O
}	O
count_leading_zeros	O
(	O
cnt	int
,	O
d	long
)	O
;	O
d	long
<<=	O
cnt	int
;	O
n1	long
=	O
up	pointer
[	O
un	long
-	O
1	int
]	O
<<	O
GMP_NAIL_BITS	int
;	O
r	long
=	O
(	O
r	long
<<	O
cnt	int
)	O
|	O
(	O
n1	long
>>	O
(	O
GMP_LIMB_BITS	int
-	O
cnt	int
)	O
)	O
;	O
if	O
(	O
UDIV_NEEDS_NORMALIZATION	int
&&	O
BELOW_THRESHOLD	O
(	O
un	long
,	O
MOD_1_UNNORM_THRESHOLD	int
)	O
)	O
{	O
mp_limb_t	long
nshift	long
;	O
for	O
(	O
i	long
=	O
un	long
-	O
2	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
n0	long
=	O
up	pointer
[	O
i	long
]	O
<<	O
GMP_NAIL_BITS	int
;	O
nshift	long
=	O
(	O
n1	long
<<	O
cnt	int
)	O
|	O
(	O
n0	long
>>	O
(	O
GMP_NUMB_BITS	O
-	O
cnt	int
)	O
)	O
;	O
udiv_qrnnd	O
(	O
dummy	long
,	O
r	long
,	O
r	long
,	O
nshift	long
,	O
d	long
)	O
;	O
r	long
>>=	O
GMP_NAIL_BITS	int
;	O
n1	long
=	O
n0	long
;	O
}	O
udiv_qrnnd	O
(	O
dummy	long
,	O
r	long
,	O
r	long
,	O
n1	long
<<	O
cnt	int
,	O
d	long
)	O
;	O
r	long
>>=	O
GMP_NAIL_BITS	int
;	O
return	O
r	long
>>	O
cnt	int
;	O
}	O
else	O
{	O
mp_limb_t	long
inv	long
,	O
nshift	long
;	O
invert_limb	O
(	O
inv	long
,	O
d	long
)	O
;	O
for	O
(	O
i	long
=	O
un	long
-	O
2	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
n0	long
=	O
up	pointer
[	O
i	long
]	O
<<	O
GMP_NAIL_BITS	int
;	O
nshift	long
=	O
(	O
n1	long
<<	O
cnt	int
)	O
|	O
(	O
n0	long
>>	O
(	O
GMP_NUMB_BITS	O
-	O
cnt	int
)	O
)	O
;	O
udiv_rnnd_preinv	O
(	O
r	long
,	O
r	long
,	O
nshift	long
,	O
d	long
,	O
inv	long
)	O
;	O
r	long
>>=	O
GMP_NAIL_BITS	int
;	O
n1	long
=	O
n0	long
;	O
}	O
udiv_rnnd_preinv	O
(	O
r	long
,	O
r	long
,	O
n1	long
<<	O
cnt	int
,	O
d	long
,	O
inv	long
)	O
;	O
r	long
>>=	O
GMP_NAIL_BITS	int
;	O
return	O
r	long
>>	O
cnt	int
;	O
}	O
}	O
static	O
mp_limb_t	long
mpn_mod_1_norm	function
(	O
mp_srcptr	pointer
up	pointer
,	O
mp_size_t	long
un	long
,	O
mp_limb_t	long
d	long
)	O
{	O
mp_size_t	long
i	long
;	O
mp_limb_t	long
n0	long
,	O
r	long
;	O
mp_limb_t	long
dummy	long
;	O
ASSERT	O
(	O
un	long
>	O
0	int
)	O
;	O
d	long
<<=	O
GMP_NAIL_BITS	int
;	O
ASSERT	O
(	O
d	long
&	O
GMP_LIMB_HIGHBIT	O
)	O
;	O
r	long
=	O
up	pointer
[	O
un	long
-	O
1	int
]	O
<<	O
GMP_NAIL_BITS	int
;	O
if	O
(	O
r	long
>=	O
d	long
)	O
r	long
-=	O
d	long
;	O
r	long
>>=	O
GMP_NAIL_BITS	int
;	O
un	long
--	O
;	O
if	O
(	O
un	long
==	O
0	int
)	O
return	O
r	long
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
un	long
,	O
MOD_1_NORM_THRESHOLD	int
)	O
)	O
{	O
for	O
(	O
i	long
=	O
un	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
n0	long
=	O
up	pointer
[	O
i	long
]	O
<<	O
GMP_NAIL_BITS	int
;	O
udiv_qrnnd	O
(	O
dummy	long
,	O
r	long
,	O
r	long
,	O
n0	long
,	O
d	long
)	O
;	O
r	long
>>=	O
GMP_NAIL_BITS	int
;	O
}	O
return	O
r	long
;	O
}	O
else	O
{	O
mp_limb_t	long
inv	long
;	O
invert_limb	O
(	O
inv	long
,	O
d	long
)	O
;	O
for	O
(	O
i	long
=	O
un	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
n0	long
=	O
up	pointer
[	O
i	long
]	O
<<	O
GMP_NAIL_BITS	int
;	O
udiv_rnnd_preinv	O
(	O
r	long
,	O
r	long
,	O
n0	long
,	O
d	long
,	O
inv	long
)	O
;	O
r	long
>>=	O
GMP_NAIL_BITS	int
;	O
}	O
return	O
r	long
;	O
}	O
}	O
mp_limb_t	long
mpn_mod_1	O
(	O
mp_srcptr	pointer
ap	pointer
,	O
mp_size_t	long
n	long
,	O
mp_limb_t	long
b	int
)	O
{	O
ASSERT	O
(	O
n	long
>=	O
0	int
)	O
;	O
ASSERT	O
(	O
b	int
!=	O
0	int
)	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
UNLIKELY	O
(	O
(	O
b	int
&	O
GMP_NUMB_HIGHBIT	O
)	O
!=	O
0	int
)	O
)	O
{	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
MOD_1N_TO_MOD_1_1_THRESHOLD	int
)	O
)	O
{	O
return	O
mpn_mod_1_norm	function
(	O
ap	pointer
,	O
n	long
,	O
b	int
)	O
;	O
}	O
else	O
{	O
mp_limb_t	long
pre	array
[	O
4	int
]	O
;	O
mpn_mod_1_1p_cps	O
(	O
pre	array
,	O
b	int
)	O
;	O
return	O
mpn_mod_1_1p	O
(	O
ap	pointer
,	O
n	long
,	O
b	int
,	O
pre	array
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
MOD_1U_TO_MOD_1_1_THRESHOLD	int
)	O
)	O
{	O
return	O
mpn_mod_1_unnorm	function
(	O
ap	pointer
,	O
n	long
,	O
b	int
)	O
;	O
}	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
MOD_1_1_TO_MOD_1_2_THRESHOLD	int
)	O
)	O
{	O
mp_limb_t	long
pre	array
[	O
4	int
]	O
;	O
mpn_mod_1_1p_cps	O
(	O
pre	array
,	O
b	int
)	O
;	O
return	O
mpn_mod_1_1p	O
(	O
ap	pointer
,	O
n	long
,	O
b	int
<<	O
pre	array
[	O
1	int
]	O
,	O
pre	array
)	O
;	O
}	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
MOD_1_2_TO_MOD_1_4_THRESHOLD	int
)	O
||	O
UNLIKELY	O
(	O
b	int
>	O
GMP_NUMB_MASK	O
/	O
4	int
)	O
)	O
{	O
mp_limb_t	long
pre	array
[	O
5	int
]	O
;	O
mpn_mod_1s_2p_cps	O
(	O
pre	array
,	O
b	int
)	O
;	O
return	O
mpn_mod_1s_2p	O
(	O
ap	pointer
,	O
n	long
,	O
b	int
<<	O
pre	array
[	O
1	int
]	O
,	O
pre	array
)	O
;	O
}	O
else	O
{	O
mp_limb_t	long
pre	array
[	O
7	int
]	O
;	O
mpn_mod_1s_4p_cps	O
(	O
pre	array
,	O
b	int
)	O
;	O
return	O
mpn_mod_1s_4p	O
(	O
ap	pointer
,	O
n	long
,	O
b	int
<<	O
pre	array
[	O
1	int
]	O
,	O
pre	array
)	O
;	O
}	O
}	O
}	O
