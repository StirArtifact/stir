static	O
int	O
print_links	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
;	O
static	O
void	O
topsf_i_package_close	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
;	O
static	O
void	O
topsf_i_bail	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
;	O
static	O
TOPSF	struct
*	O
topsf_i_package_open	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
oflags	int
)	O
;	O
static	O
int	O
topsf_rpm_find_linkname	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
char	O
*	O
baselink	pointer
,	O
int	O
fd	int
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
int	O
format	pointer
)	O
;	O
static	O
int	O
topsf_rpm_do_audit_hard_links	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
fd	int
,	O
int	O
oflags	int
,	O
char	O
*	O
decomp	pointer
)	O
;	O
static	O
int	O
is_blank_line	function
(	O
char	O
*	O
s	pointer
)	O
{	O
while	O
(	O
*	O
s	pointer
&&	O
*	O
s	pointer
!=	O
':'	O
&&	O
*	O
s	pointer
!=	O
'\n'	O
)	O
{	O
if	O
(	O
isspace	function
(	O
*	O
s	pointer
)	O
)	O
{	O
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
s	pointer
++	O
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
is_name	function
(	O
char	O
*	O
s	pointer
)	O
{	O
while	O
(	O
*	O
s	pointer
&&	O
*	O
s	pointer
!=	O
':'	O
&&	O
*	O
s	pointer
!=	O
'\n'	O
)	O
{	O
if	O
(	O
isalpha	function
(	O
*	O
s	pointer
)	O
||	O
isdigit	function
(	O
*	O
s	pointer
)	O
||	O
*	O
s	pointer
==	O
'_'	O
||	O
*	O
s	pointer
==	O
'-'	O
)	O
{	O
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
s	pointer
++	O
;	O
}	O
if	O
(	O
*	O
s	pointer
!=	O
':'	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
void	O
topsf_add_excludes	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
STROB	struct
*	O
buf	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
int	O
i	int
;	O
i	int
=	O
0	int
;	O
if	O
(	O
topsf	pointer
->	O
exclude_listM	pointer
==	O
NULL	O
)	O
return	O
;	O
while	O
(	O
(	O
s	pointer
=	O
strar_get	function
(	O
topsf	pointer
->	O
exclude_listM	pointer
,	O
i	int
++	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
strob_sprintf	function
(	O
buf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_exclude	pointer
" %s\n"	pointer
,	O
s	pointer
)	O
;	O
}	O
}	O
int	O
parse_slack_desc	function
(	O
STROB	struct
*	O
desc	int
,	O
STROB	struct
*	O
title	pointer
,	O
char	O
*	O
src	pointer
)	O
{	O
int	O
n	int
;	O
int	O
fd	int
;	O
STROB	struct
*	O
tmp	pointer
;	O
char	O
*	O
line	int
;	O
char	O
*	O
s	pointer
;	O
char	O
*	O
t	pointer
;	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
fd	int
=	O
swlib_open_memfd	function
(	O
)	O
;	O
uxfio_write	function
(	O
fd	int
,	O
src	pointer
,	O
strlen	function
(	O
src	pointer
)	O
)	O
;	O
uxfio_lseek	function
(	O
fd	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
strob_strcpy	function
(	O
title	pointer
,	O
""	pointer
)	O
;	O
strob_strcpy	function
(	O
desc	int
,	O
""	pointer
)	O
;	O
while	O
(	O
(	O
n	int
=	O
swgp_read_line	function
(	O
fd	int
,	O
(	O
STROB	struct
*	O
)	O
tmp	pointer
,	O
DO_NOT_APPEND	int
)	O
)	O
>	O
0	int
)	O
{	O
line	int
=	O
strob_str	function
(	O
tmp	pointer
)	O
;	O
s	pointer
=	O
line	int
;	O
if	O
(	O
*	O
s	pointer
==	O
'#'	O
)	O
{	O
;	O
}	O
else	O
if	O
(	O
is_blank_line	function
(	O
s	pointer
)	O
)	O
{	O
;	O
}	O
else	O
if	O
(	O
is_name	function
(	O
s	pointer
)	O
)	O
{	O
t	pointer
=	O
strchr	function
(	O
s	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
t	pointer
)	O
return	O
-	O
1	int
;	O
t	pointer
++	O
;	O
if	O
(	O
*	O
t	pointer
==	O
' '	O
)	O
t	pointer
++	O
;	O
if	O
(	O
strob_strlen	function
(	O
title	pointer
)	O
==	O
0	int
)	O
{	O
strob_strcpy	function
(	O
title	pointer
,	O
t	pointer
)	O
;	O
}	O
else	O
if	O
(	O
is_blank_line	function
(	O
t	pointer
)	O
)	O
{	O
;	O
}	O
else	O
{	O
strob_strcat	function
(	O
desc	int
,	O
t	pointer
)	O
;	O
}	O
}	O
else	O
{	O
;	O
}	O
}	O
strob_strcpy	function
(	O
tmp	pointer
,	O
strob_str	function
(	O
desc	int
)	O
)	O
;	O
swlib_expand_escapes	function
(	O
NULL	O
,	O
NULL	O
,	O
strob_str	function
(	O
tmp	pointer
)	O
,	O
desc	int
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
uxfio_close	function
(	O
fd	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
topsf_parse_slack_pkg_name	function
(	O
char	O
*	O
pkgfilename	pointer
,	O
STRAR	struct
*	O
st	pointer
)	O
{	O
char	O
*	O
n	int
;	O
char	O
*	O
s	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
char	O
*	O
name	pointer
=	O
NULL	O
;	O
char	O
*	O
version	pointer
=	O
NULL	O
;	O
char	O
*	O
arch	pointer
=	O
NULL	O
;	O
char	O
*	O
build_num	pointer
=	O
NULL	O
;	O
int	O
ret	int
;	O
ret	int
=	O
0	int
;	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
strob_strcpy	function
(	O
tmp	pointer
,	O
pkgfilename	pointer
)	O
;	O
n	int
=	O
strob_str	function
(	O
tmp	pointer
)	O
;	O
s	pointer
=	O
strrchr	function
(	O
n	int
,	O
'.'	O
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
-	O
1	int
;	O
*	O
s	pointer
=	O
'\0'	O
;	O
s	pointer
=	O
strrchr	function
(	O
n	int
,	O
':'	O
)	O
;	O
if	O
(	O
s	pointer
)	O
{	O
s	pointer
++	O
;	O
n	int
=	O
s	pointer
;	O
}	O
s	pointer
=	O
strrchr	function
(	O
n	int
,	O
'/'	O
)	O
;	O
if	O
(	O
s	pointer
)	O
{	O
s	pointer
++	O
;	O
n	int
=	O
s	pointer
;	O
}	O
s	pointer
=	O
strrchr	function
(	O
n	int
,	O
'-'	O
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
-	O
1	int
;	O
*	O
s	pointer
=	O
'\0'	O
;	O
s	pointer
++	O
;	O
build_num	pointer
=	O
s	pointer
;	O
s	pointer
=	O
strrchr	function
(	O
n	int
,	O
'-'	O
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
-	O
1	int
;	O
*	O
s	pointer
=	O
'\0'	O
;	O
s	pointer
++	O
;	O
arch	pointer
=	O
s	pointer
;	O
s	pointer
=	O
strrchr	function
(	O
n	int
,	O
'-'	O
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
-	O
1	int
;	O
*	O
s	pointer
=	O
'\0'	O
;	O
s	pointer
++	O
;	O
version	pointer
=	O
s	pointer
;	O
name	pointer
=	O
n	int
;	O
if	O
(	O
strpbrk	function
(	O
name	pointer
,	O
"/:"	pointer
)	O
)	O
{	O
ret	int
=	O
-	O
2	int
;	O
}	O
strar_add	function
(	O
st	pointer
,	O
name	pointer
)	O
;	O
strar_add	function
(	O
st	pointer
,	O
version	pointer
)	O
;	O
strar_add	function
(	O
st	pointer
,	O
arch	pointer
)	O
;	O
strar_add	function
(	O
st	pointer
,	O
build_num	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
parse_src_pkg_name	function
(	O
char	O
*	O
pkgfilename	pointer
,	O
STRAR	struct
*	O
st	pointer
)	O
{	O
char	O
*	O
n	int
;	O
char	O
*	O
s	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
char	O
*	O
name	pointer
=	O
NULL	O
;	O
char	O
*	O
version	pointer
=	O
NULL	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
strob_strcpy	function
(	O
tmp	pointer
,	O
pkgfilename	pointer
)	O
;	O
n	int
=	O
strob_str	function
(	O
tmp	pointer
)	O
;	O
s	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
s	pointer
)	O
s	pointer
=	O
strstr	function
(	O
n	int
,	O
".tgz"	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
s	pointer
=	O
strstr	function
(	O
n	int
,	O
".tar"	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
s	pointer
=	O
strstr	function
(	O
n	int
,	O
".tbz"	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
{	O
;	O
}	O
else	O
{	O
*	O
s	pointer
=	O
'\0'	O
;	O
}	O
s	pointer
=	O
strrchr	function
(	O
n	int
,	O
'-'	O
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
-	O
1	int
;	O
*	O
s	pointer
=	O
'\0'	O
;	O
s	pointer
++	O
;	O
version	pointer
=	O
s	pointer
;	O
name	pointer
=	O
n	int
;	O
strar_add	function
(	O
st	pointer
,	O
name	pointer
)	O
;	O
strar_add	function
(	O
st	pointer
,	O
version	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
plain_source_tarball_write_psf_buf	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
STROB	struct
*	O
psf	pointer
)	O
{	O
unsigned	O
long	O
int	O
prefix_mode	long
;	O
unsigned	O
long	O
ul_dir_mtime	long
;	O
time_t	long
dir_mtime	long
;	O
int	O
ret	int
;	O
STROB	struct
*	O
tmp	pointer
;	O
STROB	struct
*	O
xtmp	pointer
;	O
STROB	struct
*	O
desc	int
;	O
STROB	struct
*	O
title	pointer
;	O
STRAR	struct
*	O
name_fields	pointer
;	O
XFORMAT	struct
*	O
xformat	pointer
;	O
AHS	struct
*	O
ahs	pointer
;	O
char	O
*	O
name	pointer
;	O
dir_mtime	long
=	O
(	O
time_t	long
)	O
0	int
;	O
name_fields	pointer
=	O
strar_open	function
(	O
)	O
;	O
xtmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
desc	int
=	O
strob_open	function
(	O
32	int
)	O
;	O
title	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
if	O
(	O
topsf	pointer
->	O
format_desc_	pointer
->	O
pathname_prefixM	pointer
==	O
NULL	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
ret	int
=	O
parse_src_pkg_name	function
(	O
topsf	pointer
->	O
format_desc_	pointer
->	O
pathname_prefixM	pointer
,	O
name_fields	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error parsing name, should be name-version{.tar|.tgz|*}: %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
topsf	pointer
->	O
format_desc_	pointer
->	O
pathname_prefixM	pointer
)	O
;	O
return	O
-	O
2	int
;	O
}	O
if	O
(	O
topsf	pointer
->	O
format_desc_	pointer
->	O
slackheaderM	pointer
)	O
{	O
struct	O
tar_header	struct
*	O
tar_hdr	pointer
;	O
tar_hdr	pointer
=	O
(	O
struct	O
tar_header	struct
*	O
)	O
(	O
topsf	pointer
->	O
format_desc_	pointer
->	O
slackheaderM	pointer
)	O
;	O
taru_otoul	function
(	O
tar_hdr	pointer
->	O
mode	int
,	O
&	O
prefix_mode	long
)	O
;	O
taru_otoul	function
(	O
tar_hdr	pointer
->	O
mtime	array
,	O
&	O
ul_dir_mtime	long
)	O
;	O
dir_mtime	long
=	O
(	O
time_t	long
)	O
ul_dir_mtime	long
;	O
}	O
else	O
{	O
prefix_mode	long
=	O
0	int
;	O
}	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_NO_APPEND	int
,	O
""	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_distribution	pointer
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_layout_version	pointer
" 1.0\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"dfiles dfiles\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"pfiles pfiles\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_control_directory	pointer
" %s\n"	pointer
,	O
topsf	pointer
->	O
format_desc_	pointer
->	O
pathname_prefixM	pointer
)	O
;	O
if	O
(	O
topsf	pointer
->	O
checkdigestnameM	pointer
)	O
{	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"checkdigest <catalog/checkdigest\n"	pointer
)	O
;	O
}	O
if	O
(	O
prefix_mode	long
)	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_mode	pointer
" %04o\n"	pointer
,	O
prefix_mode	long
&	O
(	O
S_IRWXU	O
|	O
S_IRWXG	O
|	O
S_IRWXO	O
|	O
S_ISUID	O
|	O
S_ISGID	O
|	O
S_ISVTX	O
)	O
)	O
;	O
if	O
(	O
dir_mtime	long
)	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_mtime	pointer
" %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
dir_mtime	long
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_owner	pointer
" 0\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_group	pointer
" 0\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"\n"	pointer
)	O
;	O
xformat	pointer
=	O
xformat_open	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
arf_ustar	int
)	O
;	O
ret	int
=	O
uxfio_lseek	function
(	O
topsf	pointer
->	O
fd_	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
return	O
-	O
2	int
;	O
}	O
ret	int
=	O
xformat_open_archive_by_fd	function
(	O
xformat	pointer
,	O
topsf	pointer
->	O
fd_	int
,	O
UINFILE_DETECT_OTARFORCE	O
|	O
UINFILE_DETECT_DEB_CONTROL	O
,	O
(	O
mode_t	int
)	O
(	O
0	int
)	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
return	O
-	O
3	int
;	O
}	O
ret	int
=	O
xformat_read_header	function
(	O
xformat	pointer
)	O
;	O
if	O
(	O
xformat_is_end_of_archive	function
(	O
xformat	pointer
)	O
)	O
{	O
ret	int
=	O
-	O
5	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: empty data archive [%d]\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
ret	int
)	O
;	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
if	O
(	O
xformat_get_tar_typeflag	function
(	O
xformat	pointer
)	O
!=	O
DIRTYPE	char
)	O
{	O
ret	int
=	O
-	O
6	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: first file not a directory  [%d]\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
ret	int
)	O
;	O
return	O
ret	int
;	O
}	O
ahs	pointer
=	O
xformat_ahs_object	function
(	O
xformat	pointer
)	O
;	O
name	pointer
=	O
ahsStaticGetTarFilename	function
(	O
ahs	pointer
->	O
file_hdrM	pointer
)	O
;	O
if	O
(	O
swlib_dir_compare	function
(	O
name	pointer
,	O
topsf	pointer
->	O
format_desc_	pointer
->	O
pathname_prefixM	pointer
,	O
0	int
)	O
)	O
{	O
ret	int
=	O
-	O
7	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: first file not %s %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
topsf	pointer
->	O
format_desc_	pointer
->	O
pathname_prefixM	pointer
,	O
name	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
strob_sprintf	function
(	O
xtmp	pointer
,	O
STROB_NO_APPEND	int
,	O
SW_A_file	pointer
" -t d -o 0 -g 0 -m %o %s\n"	pointer
,	O
(	O
unsigned	O
int	O
)	O
(	O
ahs_get_perms	function
(	O
ahs	pointer
)	O
)	O
,	O
topsf	pointer
->	O
format_desc_	pointer
->	O
pathname_prefixM	pointer
)	O
;	O
E_DEBUG2	O
(	O
"title: [%s]"	pointer
,	O
strob_str	function
(	O
title	pointer
)	O
)	O
;	O
E_DEBUG2	O
(	O
"description: [%s]"	pointer
,	O
strob_str	function
(	O
desc	int
)	O
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swlib_squash_illegal_tag_chars	function
(	O
strar_get	function
(	O
name_fields	pointer
,	O
0	int
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_product	pointer
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_tag	pointer
" %s\n"	pointer
,	O
strar_get	function
(	O
name_fields	pointer
,	O
0	int
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_revision	pointer
" %s\n"	pointer
,	O
strar_get	function
(	O
name_fields	pointer
,	O
1	int
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_control_directory	pointer
" \"\"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_fileset	pointer
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_tag	pointer
" bin\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_control_directory	pointer
" \"\"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_directory	pointer
" . #/\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"file_permissions -o 0 -g 0\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_file	pointer
" *\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_exclude	pointer
" PSF\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_exclude	pointer
" catalog\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_exclude	pointer
" catalog/*\n"	pointer
)	O
;	O
topsf_add_excludes	function
(	O
topsf	pointer
,	O
psf	pointer
)	O
;	O
strar_close	function
(	O
name_fields	pointer
)	O
;	O
strob_close	function
(	O
xtmp	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
strob_close	function
(	O
desc	int
)	O
;	O
strob_close	function
(	O
title	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
slack_write_psf_buf	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
STROB	struct
*	O
psf	pointer
)	O
{	O
int	O
ret	int
;	O
STROB	struct
*	O
tmp	pointer
;	O
STROB	struct
*	O
xtmp	pointer
;	O
STROB	struct
*	O
desc	int
;	O
STROB	struct
*	O
title	pointer
;	O
STROB	struct
*	O
slack_desc	pointer
;	O
STROB	struct
*	O
doinst	pointer
;	O
STROB	struct
*	O
vola	pointer
;	O
STRAR	struct
*	O
name_fields	pointer
;	O
XFORMAT	struct
*	O
xformat	pointer
;	O
AHS	struct
*	O
ahs	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
char	O
*	O
sb	pointer
;	O
char	O
*	O
name	pointer
;	O
slack_desc	pointer
=	O
NULL	O
;	O
doinst	pointer
=	O
NULL	O
;	O
name_fields	pointer
=	O
strar_open	function
(	O
)	O
;	O
xtmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
desc	int
=	O
strob_open	function
(	O
32	int
)	O
;	O
title	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
vola	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
if	O
(	O
topsf	pointer
->	O
pkgfilenameM	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: must specify a slackware package as a regular file arg\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
ret	int
=	O
topsf_parse_slack_pkg_name	function
(	O
topsf	pointer
->	O
pkgfilenameM	pointer
,	O
name_fields	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
return	O
-	O
2	int
;	O
}	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_NO_APPEND	int
,	O
""	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_distribution	pointer
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_layout_version	pointer
" 1.0\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"dfiles dfiles\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"pfiles pfiles\n"	pointer
)	O
;	O
if	O
(	O
topsf	pointer
->	O
ownerM	pointer
)	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_owner	pointer
" %s\n"	pointer
,	O
topsf	pointer
->	O
ownerM	pointer
)	O
;	O
if	O
(	O
topsf	pointer
->	O
groupM	pointer
)	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_group	pointer
" %s\n"	pointer
,	O
topsf	pointer
->	O
groupM	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"vendor\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"the_term_vendor_is_misleading True\n"	pointer
)	O
;	O
swlib_squash_illegal_tag_chars	function
(	O
strar_get	function
(	O
name_fields	pointer
,	O
3	int
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"tag \"%s\"\n"	pointer
,	O
strar_get	function
(	O
name_fields	pointer
,	O
3	int
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"title The Slackware Linux Project\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"url \"http://www.slackware.com\"\n"	pointer
)	O
;	O
xformat	pointer
=	O
xformat_open	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
arf_ustar	int
)	O
;	O
ret	int
=	O
uxfio_lseek	function
(	O
topsf	pointer
->	O
fd_	int
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
return	O
-	O
2	int
;	O
}	O
ret	int
=	O
xformat_open_archive_by_fd	function
(	O
xformat	pointer
,	O
topsf	pointer
->	O
fd_	int
,	O
UINFILE_DETECT_OTARFORCE	O
|	O
UINFILE_DETECT_DEB_CONTROL	O
,	O
(	O
mode_t	int
)	O
(	O
0	int
)	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
return	O
-	O
3	int
;	O
}	O
ret	int
=	O
xformat_read_header	function
(	O
xformat	pointer
)	O
;	O
if	O
(	O
xformat_is_end_of_archive	function
(	O
xformat	pointer
)	O
)	O
{	O
ret	int
=	O
-	O
5	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: empty data archive [%d]\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
ret	int
)	O
;	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
if	O
(	O
xformat_get_tar_typeflag	function
(	O
xformat	pointer
)	O
!=	O
DIRTYPE	char
)	O
{	O
ret	int
=	O
-	O
6	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: first file not a directory  [%d]\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
ret	int
)	O
;	O
return	O
ret	int
;	O
}	O
ahs	pointer
=	O
xformat_ahs_object	function
(	O
xformat	pointer
)	O
;	O
name	pointer
=	O
ahsStaticGetTarFilename	function
(	O
ahs	pointer
->	O
file_hdrM	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"./"	pointer
)	O
)	O
{	O
ret	int
=	O
-	O
7	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: first file not ./\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
return	O
ret	int
;	O
}	O
strob_sprintf	function
(	O
xtmp	pointer
,	O
STROB_NO_APPEND	int
,	O
SW_A_file	pointer
" -t d -o %s -g %s -m %o /\n"	pointer
,	O
ahsStaticGetTarUsername	function
(	O
ahs	pointer
->	O
file_hdrM	pointer
)	O
,	O
ahsStaticGetTarGroupname	function
(	O
ahs	pointer
->	O
file_hdrM	pointer
)	O
,	O
(	O
unsigned	O
int	O
)	O
(	O
ahs_get_perms	function
(	O
ahs	pointer
)	O
)	O
)	O
;	O
name	pointer
=	O
xformat_get_next_dirent	function
(	O
xformat	pointer
,	O
&	O
st	pointer
)	O
;	O
while	O
(	O
name	pointer
)	O
{	O
if	O
(	O
strstr	function
(	O
name	pointer
,	O
"./install/"	pointer
)	O
==	O
name	pointer
||	O
strstr	function
(	O
name	pointer
,	O
"install/"	pointer
)	O
==	O
name	pointer
)	O
{	O
if	O
(	O
strstr	function
(	O
name	pointer
,	O
"./install/"	pointer
)	O
==	O
name	pointer
)	O
name	pointer
+=	O
2	int
;	O
E_DEBUG2	O
(	O
"NAME=%s"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"install/doinst.sh"	pointer
)	O
==	O
0	int
)	O
{	O
topsf_h_write_to_buf	function
(	O
xformat	pointer
,	O
name	pointer
,	O
&	O
doinst	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"install/"	pointer
)	O
==	O
0	int
)	O
{	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"install/slack-desc"	pointer
)	O
==	O
0	int
)	O
{	O
topsf_h_write_to_buf	function
(	O
xformat	pointer
,	O
name	pointer
,	O
&	O
slack_desc	pointer
)	O
;	O
}	O
else	O
{	O
topsf_h_write_to_buf	function
(	O
xformat	pointer
,	O
name	pointer
,	O
NULL	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unrecognized skackware control file: %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
name	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
sb	pointer
=	O
strstr	function
(	O
name	pointer
,	O
".new"	pointer
)	O
)	O
!=	O
NULL	O
&&	O
(	O
*	O
(	O
sb	pointer
+	O
4	int
)	O
==	O
'\0'	O
)	O
)	O
{	O
strob_sprintf	function
(	O
vola	pointer
,	O
1	int
,	O
"file\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
vola	pointer
,	O
1	int
,	O
"source %s\n"	pointer
,	O
name	pointer
)	O
;	O
strob_sprintf	function
(	O
vola	pointer
,	O
1	int
,	O
"path /%s\n"	pointer
,	O
name	pointer
)	O
;	O
strob_sprintf	function
(	O
vola	pointer
,	O
1	int
,	O
"is_volatile true\n"	pointer
)	O
;	O
}	O
name	pointer
=	O
xformat_get_next_dirent	function
(	O
xformat	pointer
,	O
&	O
st	pointer
)	O
;	O
}	O
if	O
(	O
slack_desc	pointer
)	O
{	O
parse_slack_desc	function
(	O
desc	int
,	O
title	pointer
,	O
strob_str	function
(	O
slack_desc	pointer
)	O
)	O
;	O
if	O
(	O
strrchr	function
(	O
strob_str	function
(	O
desc	int
)	O
,	O
'\n'	O
)	O
)	O
*	O
strrchr	function
(	O
strob_str	function
(	O
desc	int
)	O
,	O
'\n'	O
)	O
=	O
'\0'	O
;	O
if	O
(	O
strrchr	function
(	O
strob_str	function
(	O
desc	int
)	O
,	O
'\r'	O
)	O
)	O
*	O
strrchr	function
(	O
strob_str	function
(	O
desc	int
)	O
,	O
'\r'	O
)	O
=	O
'\0'	O
;	O
if	O
(	O
strrchr	function
(	O
strob_str	function
(	O
title	pointer
)	O
,	O
'\n'	O
)	O
)	O
*	O
strrchr	function
(	O
strob_str	function
(	O
title	pointer
)	O
,	O
'\n'	O
)	O
=	O
'\0'	O
;	O
if	O
(	O
strrchr	function
(	O
strob_str	function
(	O
title	pointer
)	O
,	O
'\r'	O
)	O
)	O
*	O
strrchr	function
(	O
strob_str	function
(	O
title	pointer
)	O
,	O
'\r'	O
)	O
=	O
'\0'	O
;	O
}	O
E_DEBUG2	O
(	O
"title: [%s]"	pointer
,	O
strob_str	function
(	O
title	pointer
)	O
)	O
;	O
E_DEBUG2	O
(	O
"description: [%s]"	pointer
,	O
strob_str	function
(	O
desc	int
)	O
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swlib_squash_illegal_tag_chars	function
(	O
strar_get	function
(	O
name_fields	pointer
,	O
0	int
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_product	pointer
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_tag	pointer
" %s\n"	pointer
,	O
strar_get	function
(	O
name_fields	pointer
,	O
0	int
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_vendor_tag	pointer
" %s\n"	pointer
,	O
strar_get	function
(	O
name_fields	pointer
,	O
3	int
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_title	pointer
" \"%s\"\n"	pointer
,	O
strob_str	function
(	O
title	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_description	pointer
" \"%s\"\n"	pointer
,	O
strob_str	function
(	O
desc	int
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_revision	pointer
" %s\n"	pointer
,	O
strar_get	function
(	O
name_fields	pointer
,	O
1	int
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_control_directory	pointer
" \"\"\n"	pointer
)	O
;	O
if	O
(	O
doinst	pointer
)	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_postinstall	pointer
" install/doinst.sh\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_fileset	pointer
"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_tag	pointer
" bin\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_control_directory	pointer
" \"\"\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_directory	pointer
" . /\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"%s"	pointer
,	O
strob_str	function
(	O
xtmp	pointer
)	O
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_file	pointer
" *\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
SW_A_exclude	pointer
" PSF\n"	pointer
)	O
;	O
topsf_add_excludes	function
(	O
topsf	pointer
,	O
psf	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"#"	pointer
SW_A_exclude	pointer
" control\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"#"	pointer
SW_A_exclude	pointer
" control/*\n"	pointer
)	O
;	O
strob_sprintf	function
(	O
psf	pointer
,	O
STROB_DO_APPEND	int
,	O
"%s\n"	pointer
,	O
strob_str	function
(	O
vola	pointer
)	O
)	O
;	O
strar_close	function
(	O
name_fields	pointer
)	O
;	O
strob_close	function
(	O
xtmp	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
strob_close	function
(	O
desc	int
)	O
;	O
strob_close	function
(	O
title	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
slack_write_psf	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
fd_out	int
)	O
{	O
int	O
ret	int
;	O
STROB	struct
*	O
psf	pointer
;	O
psf	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
ret	int
=	O
slack_write_psf_buf	function
(	O
topsf	pointer
,	O
psf	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
ret	int
=	O
uxfio_write	function
(	O
fd_out	int
,	O
strob_str	function
(	O
psf	pointer
)	O
,	O
strob_strlen	function
(	O
psf	pointer
)	O
)	O
;	O
if	O
(	O
ret	int
!=	O
(	O
int	O
)	O
strob_strlen	function
(	O
psf	pointer
)	O
)	O
{	O
ret	int
=	O
-	O
1	int
;	O
}	O
strob_close	function
(	O
psf	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
plain_source_tarball_psf	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
fd_out	int
)	O
{	O
int	O
ret	int
;	O
STROB	struct
*	O
psf	pointer
;	O
psf	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
ret	int
=	O
plain_source_tarball_write_psf_buf	function
(	O
topsf	pointer
,	O
psf	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
ret	int
=	O
uxfio_write	function
(	O
fd_out	int
,	O
strob_str	function
(	O
psf	pointer
)	O
,	O
strob_strlen	function
(	O
psf	pointer
)	O
)	O
;	O
if	O
(	O
ret	int
!=	O
(	O
int	O
)	O
strob_strlen	function
(	O
psf	pointer
)	O
)	O
{	O
ret	int
=	O
-	O
1	int
;	O
}	O
strob_close	function
(	O
psf	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
find_link	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
char	O
*	O
keyname	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
name	pointer
;	O
char	O
*	O
linkname	array
;	O
CPLOB	struct
*	O
node_names	pointer
=	O
topsf	pointer
->	O
hl_node_names_	pointer
,	O
*	O
linkto_names	pointer
=	O
topsf	pointer
->	O
hl_linkto_names_	pointer
;	O
if	O
(	O
strstr	function
(	O
keyname	pointer
,	O
"./"	pointer
)	O
==	O
keyname	pointer
)	O
keyname	pointer
+=	O
2	int
;	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
name	pointer
=	O
cplob_val	function
(	O
node_names	pointer
,	O
i	int
)	O
)	O
)	O
{	O
linkname	array
=	O
cplob_val	function
(	O
linkto_names	pointer
,	O
i	int
)	O
;	O
if	O
(	O
swlib_compare_8859	function
(	O
keyname	pointer
,	O
name	pointer
)	O
==	O
0	int
||	O
swlib_compare_8859	function
(	O
keyname	pointer
,	O
linkname	array
)	O
==	O
0	int
)	O
return	O
1	int
;	O
i	int
++	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
topsf_set_taru	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
TARU	struct
*	O
taru	pointer
)	O
{	O
topsf	pointer
->	O
taruM	pointer
=	O
taru	pointer
;	O
}	O
TOPSF	struct
*	O
topsf_open	function
(	O
char	O
*	O
filename	pointer
,	O
int	O
oflags	int
,	O
char	O
*	O
package_name	pointer
)	O
{	O
TOPSF	struct
*	O
topsf	pointer
=	O
(	O
TOPSF	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
TOPSF	struct
)	O
)	O
;	O
oflags	int
|=	O
UINFILE_DETECT_FORCEUNIXFD	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
topsf	pointer
->	O
swacfl_	pointer
=	O
swacfl_open	function
(	O
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
filename	pointer
,	O
"-"	pointer
)	O
==	O
0	int
&&	O
package_name	pointer
!=	O
NULL	O
)	O
{	O
topsf	pointer
->	O
fd_	int
=	O
uinfile_open_with_name	function
(	O
filename	pointer
,	O
(	O
mode_t	int
)	O
(	O
0	int
)	O
,	O
&	O
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
,	O
oflags	int
,	O
package_name	pointer
)	O
;	O
}	O
else	O
{	O
topsf	pointer
->	O
fd_	int
=	O
uinfile_open	function
(	O
filename	pointer
,	O
(	O
mode_t	int
)	O
(	O
0	int
)	O
,	O
&	O
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
,	O
oflags	int
)	O
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
topsf	pointer
->	O
fd_	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error opening package.\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
swacfl_close	function
(	O
topsf	pointer
->	O
swacfl_	pointer
)	O
;	O
swbis_free	O
(	O
topsf	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
topsf	pointer
->	O
cwd_prefix_	pointer
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
topsf	pointer
->	O
prefix_	pointer
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
topsf	pointer
->	O
hl_node_names_	pointer
=	O
cplob_open	function
(	O
1	int
)	O
;	O
topsf	pointer
->	O
hl_linkto_names_	pointer
=	O
cplob_open	function
(	O
1	int
)	O
;	O
topsf	pointer
->	O
archive_namesM	pointer
=	O
strar_open	function
(	O
)	O
;	O
topsf	pointer
->	O
file_status_arrayM	pointer
=	O
strob_open	function
(	O
1	int
)	O
;	O
topsf	pointer
->	O
header_namesM	pointer
=	O
strar_open	function
(	O
)	O
;	O
strob_set_fill_char	function
(	O
topsf	pointer
->	O
file_status_arrayM	pointer
,	O
(	O
int	O
)	O
'0'	O
)	O
;	O
cplob_additem	function
(	O
topsf	pointer
->	O
hl_node_names_	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
cplob_additem	function
(	O
topsf	pointer
->	O
hl_linkto_names_	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
topsf	pointer
->	O
user_addr	pointer
=	O
NULL	O
;	O
topsf	pointer
->	O
use_recursive_	int
=	O
0	int
;	O
topsf	pointer
->	O
reverse_links_	int
=	O
0	int
;	O
topsf	pointer
->	O
debug_link_	int
=	O
0	int
;	O
topsf	pointer
->	O
single_fileset_	int
=	O
0	int
;	O
topsf	pointer
->	O
info_only_	int
=	O
0	int
;	O
topsf	pointer
->	O
smart_path_	int
=	O
0	int
;	O
topsf	pointer
->	O
form_	int
=	O
0	int
;	O
topsf	pointer
->	O
control_directoryM	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
topsf	pointer
->	O
taruM	pointer
=	O
taru_create	function
(	O
)	O
;	O
time	struct
(	O
&	O
(	O
topsf	pointer
->	O
mtimeM	long
)	O
)	O
;	O
topsf	pointer
->	O
debpsfM	pointer
=	O
NULL	O
;	O
topsf	pointer
->	O
rpmpsfM	pointer
=	O
NULL	O
;	O
if	O
(	O
strcmp	function
(	O
filename	pointer
,	O
"-"	pointer
)	O
==	O
0	int
)	O
topsf	pointer
->	O
pkgfilenameM	pointer
=	O
NULL	O
;	O
else	O
topsf	pointer
->	O
pkgfilenameM	pointer
=	O
strdup	function
(	O
filename	pointer
)	O
;	O
topsf	pointer
->	O
checkdigestnameM	pointer
=	O
NULL	O
;	O
topsf	pointer
->	O
ownerM	pointer
=	O
NULL	O
;	O
topsf	pointer
->	O
groupM	pointer
=	O
NULL	O
;	O
topsf	pointer
->	O
exclude_listM	pointer
=	O
NULL	O
;	O
topsf	pointer
->	O
rpmtag_default_prefixM	pointer
=	O
NULL	O
;	O
topsf	pointer
->	O
verboseM	int
=	O
0	int
;	O
topsf	pointer
->	O
usebuf1M	pointer
=	O
strob_open	function
(	O
40	int
)	O
;	O
return	O
topsf_i_package_open	function
(	O
topsf	pointer
,	O
oflags	int
)	O
;	O
}	O
static	O
void	O
topsf_i_bail	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
swacfl_close	function
(	O
topsf	pointer
->	O
swacfl_	pointer
)	O
;	O
uinfile_close	function
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
;	O
uxfio_close	function
(	O
topsf	pointer
->	O
fd_	int
)	O
;	O
swbis_free	O
(	O
topsf	pointer
)	O
;	O
}	O
void	O
topsf_close	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
switch	O
(	O
uinfile_get_type	function
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
)	O
{	O
case	O
PLAIN_TARBALL_SRC_FILEFORMAT	int
:	O
break	O
;	O
case	O
SLACK_FILEFORMAT	int
:	O
break	O
;	O
case	O
DEB_FILEFORMAT	int
:	O
debpsf_close	function
(	O
(	O
DEBPSF	struct
*	O
)	O
(	O
topsf	pointer
->	O
debpsfM	pointer
)	O
)	O
;	O
break	O
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swacfl_close	function
(	O
topsf	pointer
->	O
swacfl_	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
topsf_i_package_close	function
(	O
topsf	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
uinfile_close	function
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
uxfio_close	function
(	O
topsf	pointer
->	O
fd_	int
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
topsf	pointer
->	O
prefix_	pointer
)	O
swbis_free	O
(	O
topsf	pointer
->	O
prefix_	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swbis_free	O
(	O
topsf	pointer
)	O
;	O
}	O
static	O
TOPSF	struct
*	O
topsf_i_package_open	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
oflags	int
)	O
{	O
int	O
rc	int
,	O
isSource	pointer
;	O
STROB	struct
*	O
tagval	pointer
=	O
strob_open	function
(	O
12	int
)	O
;	O
char	O
*	O
uncompressor	pointer
;	O
int	O
tagret	int
=	O
-	O
1	int
;	O
int	O
ret	int
;	O
E_DEBUG	O
(	O
"FUNCTION ENTER"	pointer
)	O
;	O
switch	O
(	O
uinfile_get_type	function
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
)	O
{	O
case	O
RPMRHS_FILEFORMAT	int
:	O
topsf	pointer
->	O
rpmfd_	pointer
=	O
rpmfd_open	function
(	O
(	O
FD_t	pointer
)	O
NULL	O
,	O
topsf	pointer
->	O
fd_	int
)	O
;	O
rc	int
=	O
rpmReadPackageHeader	function
(	O
topsf_rpmFD	function
(	O
topsf	pointer
)	O
,	O
&	O
(	O
topsf	pointer
->	O
h_	pointer
)	O
,	O
&	O
isSource	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
||	O
!	O
topsf	pointer
->	O
h_	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"lxpsf: error reading package in rpmReadPackageHeader().\n"	pointer
)	O
;	O
topsf_i_bail	function
(	O
topsf	pointer
)	O
;	O
E_DEBUG	O
(	O
"ABNORMAL FUNCTION EXIT"	pointer
)	O
;	O
strob_close	function
(	O
tagval	pointer
)	O
;	O
return	O
(	O
TOPSF	struct
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
tagret	int
=	O
rpmpsf_get_rpmtagvalue	function
(	O
topsf	pointer
->	O
h_	pointer
,	O
RPMTAG_PAYLOADCOMPRESSOR	int
,	O
0	int
,	O
(	O
int	O
*	O
)	O
(	O
NULL	O
)	O
,	O
tagval	pointer
)	O
;	O
if	O
(	O
tagret	int
!=	O
0	int
)	O
{	O
strob_strcpy	function
(	O
tagval	pointer
,	O
"gzip"	pointer
)	O
;	O
}	O
uncompressor	pointer
=	O
strdup	function
(	O
strob_str	function
(	O
tagval	pointer
)	O
)	O
;	O
tagret	int
=	O
rpmpsf_get_rpmtagvalue	function
(	O
topsf	pointer
->	O
h_	pointer
,	O
RPMTAG_DEFAULTPREFIX	int
,	O
0	int
,	O
(	O
int	O
*	O
)	O
(	O
NULL	O
)	O
,	O
tagval	pointer
)	O
;	O
if	O
(	O
tagret	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: Warning: RPM file uses deprecated RPMTAG_DEFAULTPREFIX(1056): %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
strob_str	function
(	O
tagval	pointer
)	O
)	O
;	O
topsf	pointer
->	O
rpmtag_default_prefixM	pointer
=	O
strdup	function
(	O
strob_str	function
(	O
tagval	pointer
)	O
)	O
;	O
}	O
if	O
(	O
(	O
oflags	int
&	O
TOPSF_OPEN_NO_AUDIT	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
topsf_rpm_do_audit_hard_links	function
(	O
topsf	pointer
,	O
topsf	pointer
->	O
fd_	int
,	O
oflags	int
,	O
uncompressor	pointer
)	O
)	O
{	O
E_DEBUG	O
(	O
"ABNORMAL FUNCTION EXIT"	pointer
)	O
;	O
strob_close	function
(	O
tagval	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
break	O
;	O
case	O
PLAIN_TARBALL_SRC_FILEFORMAT	int
:	O
break	O
;	O
case	O
SLACK_FILEFORMAT	int
:	O
break	O
;	O
case	O
DEB_FILEFORMAT	int
:	O
{	O
DEBPSF	struct
*	O
d	pointer
;	O
d	pointer
=	O
debpsf_create	function
(	O
)	O
;	O
ret	int
=	O
debpsf_open	function
(	O
d	pointer
,	O
(	O
void	O
*	O
)	O
topsf	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"error decoding deb format, retval=%d\n"	pointer
,	O
ret	int
)	O
;	O
}	O
topsf	pointer
->	O
debpsfM	pointer
=	O
(	O
void	O
*	O
)	O
d	pointer
;	O
}	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"lxpsf: unrecognized package format.\n"	pointer
)	O
;	O
topsf_i_bail	function
(	O
topsf	pointer
)	O
;	O
E_DEBUG	O
(	O
"ABNORMAL FUNCTION EXIT"	pointer
)	O
;	O
strob_close	function
(	O
tagval	pointer
)	O
;	O
return	O
(	O
TOPSF	struct
*	O
)	O
(	O
NULL	O
)	O
;	O
break	O
;	O
}	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
strob_close	function
(	O
tagval	pointer
)	O
;	O
return	O
topsf	pointer
;	O
}	O
static	O
void	O
topsf_i_package_close	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
E_DEBUG	O
(	O
"FUNCTION ENTER"	pointer
)	O
;	O
switch	O
(	O
uinfile_get_type	function
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
)	O
{	O
case	O
RPMRHS_FILEFORMAT	int
:	O
headerFree	function
(	O
topsf	pointer
->	O
h_	pointer
)	O
;	O
break	O
;	O
case	O
DEB_FILEFORMAT	int
:	O
break	O
;	O
case	O
PLAIN_TARBALL_SRC_FILEFORMAT	int
:	O
break	O
;	O
case	O
SLACK_FILEFORMAT	int
:	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"unrecognized format in topsf_close().\n"	pointer
)	O
;	O
break	O
;	O
}	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
}	O
o__inline__	O
int	O
topsf_get_fd	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
return	O
topsf	pointer
->	O
fd_	int
;	O
}	O
void	O
topsf_set_mtime	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
time_t	long
tm	struct
)	O
{	O
topsf	pointer
->	O
mtimeM	long
=	O
tm	struct
;	O
}	O
o__inline__	O
void	O
topsf_set_fd	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
fd	int
)	O
{	O
topsf	pointer
->	O
fd_	int
=	O
fd	int
;	O
}	O
o__inline__	O
UINFORMAT	struct
*	O
topsf_get_format_desc	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
return	O
topsf	pointer
->	O
format_desc_	pointer
;	O
}	O
o__inline__	O
Header	pointer
topsf_get_rpmheader	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
return	O
topsf	pointer
->	O
h_	pointer
;	O
}	O
o__inline__	O
SWACFL	struct
*	O
topsf_get_archive_filelist	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
return	O
topsf	pointer
->	O
swacfl_	pointer
;	O
}	O
void	O
topsf_add_fl_entry	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
char	O
*	O
to_name	pointer
,	O
char	O
*	O
from_name	pointer
,	O
int	O
source_code	int
)	O
{	O
E_DEBUG	O
(	O
"FUNCTION ENTER"	pointer
)	O
;	O
E_DEBUG3	O
(	O
"BEGINNING: to_name=[%s] from_name=[%s]"	pointer
,	O
to_name	pointer
,	O
from_name	pointer
)	O
;	O
if	O
(	O
topsf	pointer
->	O
cwd_prefix_	pointer
)	O
{	O
if	O
(	O
!	O
strstr	function
(	O
from_name	pointer
,	O
topsf	pointer
->	O
cwd_prefix_	pointer
)	O
)	O
{	O
E_DEBUG	O
(	O
"exception"	pointer
)	O
;	O
}	O
else	O
{	O
from_name	pointer
+=	O
strlen	function
(	O
topsf	pointer
->	O
cwd_prefix_	pointer
)	O
;	O
from_name	pointer
--	O
;	O
}	O
}	O
E_DEBUG3	O
(	O
"ADDDING ENTRY: to_name=[%s] from_name=[%s]"	pointer
,	O
to_name	pointer
,	O
from_name	pointer
)	O
;	O
swacfl_add	function
(	O
topsf	pointer
->	O
swacfl_	pointer
,	O
to_name	pointer
,	O
from_name	pointer
,	O
source_code	int
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
}	O
o__inline__	O
char	O
*	O
topsf_get_cwd_prefix	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
return	O
topsf	pointer
->	O
cwd_prefix_	pointer
;	O
}	O
o__inline__	O
char	O
*	O
topsf_get_psf_prefix	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
return	O
topsf	pointer
->	O
prefix_	pointer
;	O
}	O
o__inline__	O
void	O
topsf_set_cwd_prefix	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
char	O
*	O
p	pointer
)	O
{	O
topsf	pointer
->	O
cwd_prefix_	pointer
=	O
swlib_strdup	function
(	O
p	pointer
)	O
;	O
}	O
o__inline__	O
void	O
topsf_set_psf_prefix	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
char	O
*	O
p	pointer
)	O
{	O
topsf	pointer
->	O
prefix_	pointer
=	O
swlib_strdup	function
(	O
p	pointer
)	O
;	O
}	O
static	O
int	O
topsf_rpm_do_audit_hard_links	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
fd	int
,	O
int	O
oflags	int
,	O
char	O
*	O
decomp	pointer
)	O
{	O
char	O
buf	pointer
[	O
6	int
]	O
;	O
int	O
buffertype	int
;	O
int	O
uxfio_fd	int
,	O
pid	int
;	O
int	O
opipe	array
[	O
2	int
]	O
;	O
SHCMD	struct
*	O
cmd	int
[	O
100	int
]	O
;	O
UINFORMAT	struct
*	O
uinformat	pointer
;	O
E_DEBUG	O
(	O
"FUNCTION ENTER"	pointer
)	O
;	O
buffertype	int
=	O
uinfile_decode_buftype	function
(	O
oflags	int
,	O
UXFIO_BUFTYPE_DYNAMIC_MEM	int
)	O
;	O
cmd	int
[	O
0	int
]	O
=	O
shcmd_open	function
(	O
)	O
;	O
shcmd_add_arg	function
(	O
cmd	int
[	O
0	int
]	O
,	O
decomp	pointer
)	O
;	O
shcmd_add_arg	function
(	O
cmd	int
[	O
0	int
]	O
,	O
"-d"	pointer
)	O
;	O
shcmd_set_exec_function	function
(	O
cmd	int
[	O
0	int
]	O
,	O
"execvp"	pointer
)	O
;	O
cmd	int
[	O
1	int
]	O
=	O
NULL	O
;	O
uinformat	pointer
=	O
topsf_get_format_desc	function
(	O
topsf	pointer
)	O
;	O
pipe	function
(	O
opipe	array
)	O
;	O
pid	int
=	O
swfork	O
(	O
(	O
sigset_t	struct
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
if	O
(	O
!	O
pid	int
)	O
{	O
close	pointer
(	O
opipe	array
[	O
0	int
]	O
)	O
;	O
shcmd_set_srcfd	function
(	O
cmd	int
[	O
0	int
]	O
,	O
fd	int
)	O
;	O
shcmd_set_dstfd	function
(	O
cmd	int
[	O
0	int
]	O
,	O
opipe	array
[	O
1	int
]	O
)	O
;	O
swlib_exec_filter	function
(	O
cmd	int
,	O
-	O
1	int
,	O
NULL	O
)	O
;	O
uxfio_close	function
(	O
fd	int
)	O
;	O
_exit	function
(	O
0	int
)	O
;	O
}	O
close	pointer
(	O
opipe	array
[	O
1	int
]	O
)	O
;	O
E_DEBUG	O
(	O
"just before uxfio_opendup"	pointer
)	O
;	O
uxfio_fd	int
=	O
uxfio_opendup	function
(	O
opipe	array
[	O
0	int
]	O
,	O
buffertype	int
)	O
;	O
E_DEBUG	O
(	O
"just after uxfio_opendup"	pointer
)	O
;	O
if	O
(	O
uxfio_sfread	function
(	O
uxfio_fd	int
,	O
buf	pointer
,	O
6	int
)	O
!=	O
6	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
strncmp	function
(	O
buf	pointer
,	O
"070701"	pointer
,	O
6	int
)	O
)	O
{	O
uinfile_set_type	function
(	O
uinformat	pointer
,	O
CPIO_NEWC_FILEFORMAT	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	function
(	O
buf	pointer
,	O
"070702"	pointer
,	O
6	int
)	O
)	O
{	O
uinfile_set_type	function
(	O
uinformat	pointer
,	O
CPIO_CRC_FILEFORMAT	int
)	O
;	O
}	O
else	O
{	O
E_DEBUG	O
(	O
"error"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
uxfio_lseek	function
(	O
uxfio_fd	int
,	O
(	O
long	O
int	O
)	O
(	O
-	O
6	int
)	O
,	O
SEEK_CUR	int
)	O
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"uxfio_lseek error"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
topsf_rpm_audit_hard_links	function
(	O
topsf	pointer
,	O
uxfio_fd	int
)	O
)	O
{	O
SWBIS_E_FAIL	O
(	O
"error in topsf_audit_hard_links, exiting..."	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
uxfio_lseek	function
(	O
uxfio_fd	int
,	O
0L	int
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
SWBIS_E_FAIL	O
(	O
"error from uxfio_lseek"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
E_DEBUG2	O
(	O
"closing fd=[%d]"	pointer
,	O
fd	int
)	O
;	O
uxfio_close	function
(	O
fd	int
)	O
;	O
E_DEBUG2	O
(	O
"setting topsf fd to [%d]"	pointer
,	O
uxfio_fd	int
)	O
;	O
topsf_set_fd	function
(	O
topsf	pointer
,	O
uxfio_fd	int
)	O
;	O
uinfile_set_type	function
(	O
uinformat	pointer
,	O
RPMRHS_FILEFORMAT	int
)	O
;	O
if	O
(	O
topsf	pointer
->	O
debug_link_	int
)	O
print_links	function
(	O
topsf	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
add_link_pair	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
char	O
*	O
base_link	pointer
,	O
char	O
*	O
link	function
)	O
{	O
if	O
(	O
find_link	function
(	O
topsf	pointer
,	O
link	function
)	O
)	O
return	O
;	O
if	O
(	O
topsf	pointer
->	O
debug_link_	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"ADD:  Adding [%s] ==  [%s]\n"	pointer
,	O
base_link	pointer
,	O
link	function
)	O
;	O
cplob_additem	function
(	O
topsf	pointer
->	O
hl_node_names_	pointer
,	O
cplob_get_nused	function
(	O
topsf	pointer
->	O
hl_node_names_	pointer
)	O
-	O
1	int
,	O
strdup	function
(	O
base_link	pointer
)	O
)	O
;	O
cplob_additem	function
(	O
topsf	pointer
->	O
hl_node_names_	pointer
,	O
cplob_get_nused	function
(	O
topsf	pointer
->	O
hl_node_names_	pointer
)	O
,	O
NULL	O
)	O
;	O
cplob_additem	function
(	O
topsf	pointer
->	O
hl_linkto_names_	pointer
,	O
cplob_get_nused	function
(	O
topsf	pointer
->	O
hl_linkto_names_	pointer
)	O
-	O
1	int
,	O
strdup	function
(	O
link	function
)	O
)	O
;	O
cplob_additem	function
(	O
topsf	pointer
->	O
hl_linkto_names_	pointer
,	O
cplob_get_nused	function
(	O
topsf	pointer
->	O
hl_linkto_names_	pointer
)	O
,	O
NULL	O
)	O
;	O
}	O
int	O
topsf_rpm_audit_hard_links	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
fd	int
)	O
{	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
int	O
format	pointer
=	O
uinfile_get_type	function
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION ENTER"	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
taru_read_header	function
(	O
topsf	pointer
->	O
taruM	pointer
,	O
file_hdr	pointer
,	O
fd	int
,	O
format	pointer
,	O
NULL	O
,	O
0	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"header error %s\n"	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
strcmp	function
(	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
,	O
"TRAILER!!!"	pointer
)	O
)	O
{	O
break	O
;	O
}	O
strar_add	function
(	O
topsf	pointer
->	O
archive_namesM	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
)	O
;	O
if	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFREG	int
)	O
{	O
if	O
(	O
taru_write_archive_member_data	function
(	O
topsf	pointer
->	O
taruM	pointer
,	O
file_hdr	pointer
,	O
-	O
1	int
,	O
fd	int
,	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
,	O
format	pointer
,	O
-	O
1	int
,	O
NULL	O
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"data error %s\n"	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
)	O
;	O
return	O
-	O
2	int
;	O
}	O
taru_tape_skip_padding	function
(	O
fd	int
,	O
file_hdr	pointer
->	O
c_filesize	long
,	O
format	pointer
)	O
;	O
}	O
if	O
(	O
file_hdr	pointer
->	O
c_nlink	short
>	O
1	int
&&	O
(	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFREG	int
)	O
||	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFBLK	int
)	O
||	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFCHR	int
)	O
||	O
(	O
(	O
file_hdr	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFSOCK	int
)	O
)	O
)	O
{	O
if	O
(	O
topsf	pointer
->	O
debug_link_	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Found First : name = %s linkname=[%s]\n"	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
,	O
ahsStaticGetTarLinkname	function
(	O
file_hdr	pointer
)	O
)	O
;	O
add_link_pair	function
(	O
topsf	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
)	O
;	O
strob_strcpy	function
(	O
tmp	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr	pointer
)	O
)	O
;	O
topsf_rpm_find_linkname	function
(	O
topsf	pointer
,	O
strob_str	function
(	O
tmp	pointer
)	O
,	O
fd	int
,	O
file_hdr	pointer
,	O
format	pointer
)	O
;	O
}	O
else	O
if	O
(	O
file_hdr	pointer
->	O
c_nlink	short
>	O
1	int
)	O
{	O
;	O
}	O
}	O
ahsStaticDeleteFilehdr	function
(	O
file_hdr	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
FD_t	pointer
topsf_rpmFD	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
return	O
rpmfd_getfd	function
(	O
topsf	pointer
->	O
rpmfd_	pointer
)	O
;	O
}	O
static	O
int	O
print_links	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
char	O
*	O
name	pointer
;	O
char	O
*	O
linkname	array
;	O
CPLOB	struct
*	O
node_names	pointer
=	O
topsf	pointer
->	O
hl_node_names_	pointer
,	O
*	O
linkto_names	pointer
=	O
topsf	pointer
->	O
hl_linkto_names_	pointer
;	O
while	O
(	O
(	O
name	pointer
=	O
cplob_val	function
(	O
node_names	pointer
,	O
i	int
)	O
)	O
)	O
{	O
linkname	array
=	O
cplob_val	function
(	O
linkto_names	pointer
,	O
i	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"PRINT: name = [%s], linkname = [%s]\n"	pointer
,	O
name	pointer
,	O
linkname	array
?	O
linkname	array
:	O
"<nil>"	pointer
)	O
;	O
i	int
++	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
topsf_rpm_find_linkname	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
char	O
*	O
base_link	pointer
,	O
int	O
fd	int
,	O
struct	O
new_cpio_header	struct
*	O
base_file_hdr	pointer
,	O
int	O
format	pointer
)	O
{	O
char	O
*	O
lastmatch	pointer
=	O
NULL	O
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr1	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
int	O
oldoffset	int
=	O
uxfio_lseek	function
(	O
fd	int
,	O
0L	int
,	O
SEEK_CUR	int
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION ENTER"	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
taru_read_header	function
(	O
topsf	pointer
->	O
taruM	pointer
,	O
file_hdr1	pointer
,	O
fd	int
,	O
format	pointer
,	O
NULL	O
,	O
0	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"header error %s\n"	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr1	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
file_hdr1	pointer
->	O
c_mode	short
&	O
CP_IFMT	int
)	O
==	O
CP_IFREG	int
)	O
{	O
if	O
(	O
taru_write_archive_member_data	function
(	O
topsf	pointer
->	O
taruM	pointer
,	O
file_hdr1	pointer
,	O
-	O
1	int
,	O
fd	int
,	O
(	O
int	O
(	O
*	O
)	O
(	O
int	O
)	O
)	O
NULL	O
,	O
format	pointer
,	O
-	O
1	int
,	O
NULL	O
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"data error %s\n"	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr1	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
taru_tape_skip_padding	function
(	O
fd	int
,	O
file_hdr1	pointer
->	O
c_filesize	long
,	O
format	pointer
)	O
;	O
}	O
if	O
(	O
file_hdr1	pointer
->	O
c_ino	short
==	O
base_file_hdr	pointer
->	O
c_ino	short
)	O
{	O
if	O
(	O
lastmatch	pointer
)	O
swbis_free	O
(	O
lastmatch	pointer
)	O
;	O
if	O
(	O
topsf	pointer
->	O
debug_link_	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"*Found linked files %s %s\n"	pointer
,	O
base_link	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr1	pointer
)	O
)	O
;	O
add_link_pair	function
(	O
topsf	pointer
,	O
base_link	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr1	pointer
)	O
)	O
;	O
lastmatch	pointer
=	O
swlib_strdup	function
(	O
ahsStaticGetTarFilename	function
(	O
file_hdr1	pointer
)	O
)	O
;	O
}	O
if	O
(	O
!	O
strcmp	function
(	O
ahsStaticGetTarFilename	function
(	O
file_hdr1	pointer
)	O
,	O
"TRAILER!!!"	pointer
)	O
)	O
break	O
;	O
}	O
ahsStaticSetPaxLinkname	function
(	O
base_file_hdr	pointer
,	O
lastmatch	pointer
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
file_hdr1	pointer
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
if	O
(	O
uxfio_lseek	function
(	O
fd	int
,	O
oldoffset	int
,	O
SEEK_SET	int
)	O
!=	O
oldoffset	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"error seeking back in topsf_rpm_find_linkname\n"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
topsf_copypass_swacfl_write_missing_files	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
XFORMAT	struct
*	O
xux	pointer
,	O
SWVARFS	struct
*	O
swvarfs	pointer
,	O
int	O
ofd	int
)	O
{	O
char	O
*	O
missing_array	pointer
;	O
char	O
*	O
ch	int
;	O
int	O
c	int
;	O
int	O
headerindex	int
;	O
int	O
fnameindex	int
;	O
int	O
hret	int
;	O
char	O
*	O
name	pointer
;	O
STROB	struct
*	O
fname	pointer
;	O
STROB	struct
*	O
strb	pointer
;	O
STROB	struct
*	O
linkname	array
;	O
mode_t	int
mode	int
;	O
Header	pointer
h	pointer
;	O
int	O
ret	int
;	O
AHS	struct
*	O
ahs	pointer
;	O
time_t	long
tm	struct
;	O
int	O
nullfd	int
;	O
tm	struct
=	O
time	struct
(	O
NULL	O
)	O
;	O
h	pointer
=	O
topsf	pointer
->	O
h_	pointer
;	O
fname	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
strb	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
linkname	array
=	O
strob_open	function
(	O
32	int
)	O
;	O
missing_array	pointer
=	O
strob_str	function
(	O
topsf	pointer
->	O
file_status_arrayM	pointer
)	O
;	O
ch	int
=	O
missing_array	pointer
;	O
E_DEBUG	O
(	O
"START"	pointer
)	O
;	O
while	O
(	O
*	O
ch	int
)	O
{	O
c	int
=	O
(	O
int	O
)	O
(	O
*	O
ch	int
)	O
;	O
headerindex	int
=	O
(	O
int	O
)	O
(	O
ch	int
-	O
missing_array	pointer
)	O
;	O
if	O
(	O
c	int
==	O
TOPSF_FILE_STATUS_IN_HEADER	int
&&	O
topsf	pointer
->	O
rpm_construct_missing_filesM	int
==	O
0	int
)	O
{	O
rpmpsf_get_rpm_filenames_tagvalue	function
(	O
h	pointer
,	O
headerindex	int
,	O
(	O
int	O
*	O
)	O
NULL	O
,	O
fname	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: RPM file entry missing from archive: %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
strob_str	function
(	O
fname	pointer
)	O
)	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
TOPSF_FILE_STATUS_IN_HEADER	int
&&	O
topsf	pointer
->	O
rpm_construct_missing_filesM	int
)	O
{	O
E_DEBUG2	O
(	O
"found missing at index=%d"	pointer
,	O
headerindex	int
)	O
;	O
rpmpsf_get_rpm_filenames_tagvalue	function
(	O
h	pointer
,	O
headerindex	int
,	O
(	O
int	O
*	O
)	O
NULL	O
,	O
fname	pointer
)	O
;	O
E_DEBUG2	O
(	O
"missing filename=%s"	pointer
,	O
strob_str	function
(	O
fname	pointer
)	O
)	O
;	O
ret	int
+=	O
rpmpsf_get_rpmtagvalue	function
(	O
h	pointer
,	O
RPMTAG_FILEMODES	int
,	O
headerindex	int
,	O
(	O
int	O
*	O
)	O
NULL	O
,	O
strb	pointer
)	O
;	O
mode	int
=	O
(	O
mode_t	int
)	O
swlib_atoi	function
(	O
strob_str	function
(	O
strb	pointer
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
S_ISREG	O
(	O
mode	int
)	O
||	O
S_ISDIR	O
(	O
mode	int
)	O
||	O
S_ISLNK	O
(	O
mode	int
)	O
)	O
{	O
ahs	pointer
=	O
xformat_ahs_object	function
(	O
xux	pointer
)	O
;	O
ahs_init_header	function
(	O
ahs	pointer
)	O
;	O
if	O
(	O
S_ISLNK	O
(	O
mode	int
)	O
)	O
{	O
fnameindex	int
=	O
rpmpsf_get_index_by_name	function
(	O
topsf	pointer
,	O
strob_str	function
(	O
fname	pointer
)	O
)	O
;	O
if	O
(	O
fnameindex	int
>=	O
0	int
)	O
{	O
hret	int
=	O
rpmpsf_get_rpmtagvalue	function
(	O
h	pointer
,	O
RPMTAG_FILELINKTOS	int
,	O
fnameindex	int
,	O
(	O
NULL	O
)	O
,	O
linkname	array
)	O
;	O
if	O
(	O
hret	int
)	O
{	O
ret	int
=	O
-	O
1	int
;	O
goto	O
SKIPLINK	O
;	O
}	O
xformat_set_linkname	function
(	O
xux	pointer
,	O
strob_str	function
(	O
linkname	array
)	O
)	O
;	O
xformat_set_mode	function
(	O
xux	pointer
,	O
(	O
mode_t	int
)	O
(	O
C_ISLNK	int
|	O
0777	int
)	O
)	O
;	O
if	O
(	O
topsf	pointer
->	O
verboseM	int
>	O
1	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: setting perms 0777 for symlink in archive: %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
strob_str	function
(	O
fname	pointer
)	O
)	O
;	O
}	O
else	O
{	O
;	O
ret	int
=	O
-	O
1	int
;	O
goto	O
SKIPLINK	O
;	O
}	O
}	O
else	O
{	O
xformat_set_mode	function
(	O
xux	pointer
,	O
mode	int
)	O
;	O
}	O
swlib_squash_leading_slash	function
(	O
strob_str	function
(	O
fname	pointer
)	O
)	O
;	O
xformat_set_name	function
(	O
xux	pointer
,	O
strob_str	function
(	O
fname	pointer
)	O
)	O
;	O
ret	int
+=	O
rpmpsf_get_rpmtagvalue	function
(	O
h	pointer
,	O
RPMTAG_FILEUSERNAME	int
,	O
headerindex	int
,	O
(	O
int	O
*	O
)	O
NULL	O
,	O
strb	pointer
)	O
;	O
xformat_set_username	function
(	O
xux	pointer
,	O
strob_str	function
(	O
strb	pointer
)	O
)	O
;	O
xformat_set_uid	function
(	O
xux	pointer
,	O
(	O
uid_t	int
)	O
99	int
)	O
;	O
xformat_set_user_systempair	function
(	O
xux	pointer
,	O
strob_str	function
(	O
strb	pointer
)	O
)	O
;	O
ret	int
+=	O
rpmpsf_get_rpmtagvalue	function
(	O
h	pointer
,	O
RPMTAG_FILEGROUPNAME	int
,	O
headerindex	int
,	O
(	O
int	O
*	O
)	O
NULL	O
,	O
strb	pointer
)	O
;	O
xformat_set_groupname	function
(	O
xux	pointer
,	O
strob_str	function
(	O
strb	pointer
)	O
)	O
;	O
xformat_set_gid	function
(	O
xux	pointer
,	O
(	O
gid_t	int
)	O
99	int
)	O
;	O
xformat_set_group_systempair	function
(	O
xux	pointer
,	O
strob_str	function
(	O
strb	pointer
)	O
)	O
;	O
xformat_set_mtime	function
(	O
xux	pointer
,	O
tm	struct
)	O
;	O
xformat_set_filesize	function
(	O
xux	pointer
,	O
0	int
)	O
;	O
nullfd	int
=	O
open	function
(	O
"/dev/null"	pointer
,	O
O_RDWR	int
,	O
0	int
)	O
;	O
ret	int
=	O
xformat_write_by_fd	function
(	O
xux	pointer
,	O
nullfd	int
,	O
ahs_vfile_hdr	function
(	O
ahs	pointer
)	O
)	O
;	O
close	pointer
(	O
nullfd	int
)	O
;	O
SKIPLINK	O
:	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error constructing missing file: %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
strob_str	function
(	O
fname	pointer
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
topsf	pointer
->	O
verboseM	int
>	O
1	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: file constructed for RPM Header entry with missing file: %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
strob_str	function
(	O
fname	pointer
)	O
)	O
;	O
}	O
E_DEBUG2	O
(	O
"writing missing file: xformat_write_by_fd returned [%d]"	pointer
,	O
(	O
int	O
)	O
ret	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: not creating missing file (filetype not supported): %s\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
strob_str	function
(	O
fname	pointer
)	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
TOPSF_FILE_STATUS_IN_ARCHIVE	int
)	O
{	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"fatal error in topsf_copypass_swacfl_write_missing_files\n"	pointer
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
ch	int
++	O
;	O
}	O
strob_close	function
(	O
linkname	array
)	O
;	O
strob_close	function
(	O
fname	pointer
)	O
;	O
strob_close	function
(	O
strb	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
topsf_copypass_swacfl_header_list	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
XFORMAT	struct
*	O
xxformat	pointer
,	O
SWVARFS	struct
*	O
swvarfs	pointer
,	O
int	O
ofd	int
)	O
{	O
int	O
done	int
;	O
int	O
en_index	int
=	O
0	int
;	O
int	O
pheader	array
[	O
2	int
]	O
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
savep	pointer
;	O
pid_t	int
pid	int
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
swacfl_entry	struct
*	O
en	pointer
;	O
SWACFL	struct
*	O
swacfl	pointer
=	O
topsf	pointer
->	O
swacfl_	pointer
;	O
int	O
(	O
*	O
do_write_file	pointer
)	O
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
o_fd	int
)	O
;	O
done	int
=	O
0	int
;	O
while	O
(	O
!	O
done	int
&&	O
(	O
en	pointer
=	O
(	O
swacfl_entry	struct
*	O
)	O
cplob_val	function
(	O
swacfl	pointer
->	O
entry_array_	pointer
,	O
en_index	int
++	O
)	O
)	O
)	O
{	O
savep	pointer
=	O
swlib_strdup	function
(	O
strob_str	function
(	O
en	pointer
->	O
archiveNameM	pointer
)	O
)	O
;	O
p	pointer
=	O
savep	pointer
;	O
if	O
(	O
*	O
p	pointer
==	O
'/'	O
)	O
p	pointer
++	O
;	O
switch	O
(	O
en	pointer
->	O
source_code_	int
)	O
{	O
case	O
SWACFL_SRCCODE_ARCHIVE_STREAM	int
:	O
done	int
=	O
1	int
;	O
break	O
;	O
case	O
SWACFL_SRCCODE_RPMHEADER	int
:	O
case	O
SWACFL_SRCCODE_PSF	int
:	O
E_DEBUG	O
(	O
"in SWACFL_SRCCODE_PSF"	pointer
)	O
;	O
file_hdr	pointer
->	O
c_magic	short
=	O
CPIO_NEWASCII_MAGIC	int
;	O
file_hdr	pointer
->	O
c_ino	short
=	O
1	int
;	O
file_hdr	pointer
->	O
c_mode	short
=	O
(	O
0644	int
)	O
;	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFREG	int
;	O
file_hdr	pointer
->	O
c_uid	short
=	O
getuid	function
(	O
)	O
;	O
file_hdr	pointer
->	O
c_gid	short
=	O
getgid	function
(	O
)	O
;	O
file_hdr	pointer
->	O
c_nlink	short
=	O
1	int
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
file_hdr	pointer
->	O
c_mtime	long
=	O
topsf	pointer
->	O
mtimeM	long
;	O
file_hdr	pointer
->	O
c_filesize	long
=	O
0	int
;	O
file_hdr	pointer
->	O
c_namesize	short
=	O
strlen	function
(	O
en	pointer
->	O
from_name_	pointer
)	O
+	O
1	int
;	O
file_hdr	pointer
->	O
c_chksum	long
=	O
0	int
;	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
en	pointer
->	O
from_name_	pointer
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
switch	O
(	O
en	pointer
->	O
source_code_	int
)	O
{	O
case	O
SWACFL_SRCCODE_RPMHEADER	int
:	O
E_DEBUG	O
(	O
"in SWACFL_SRCCODE_PSF: SWACFL_SRCCODE_RPMHEADER"	pointer
)	O
;	O
topsf	pointer
->	O
user_addr	pointer
=	O
p	pointer
;	O
file_hdr	pointer
->	O
c_filesize	long
=	O
rpmpsf_get_rpmtag_length	function
(	O
topsf	pointer
,	O
p	pointer
)	O
+	O
1	int
;	O
do_write_file	pointer
=	O
rpmpsf_write_out_tag	function
;	O
E_DEBUG	O
(	O
"leaving SWACFL_SRCCODE_PSF: SWACFL_SRCCODE_RPMHEADER"	pointer
)	O
;	O
break	O
;	O
case	O
SWACFL_SRCCODE_PSF	int
:	O
E_DEBUG	O
(	O
"in SWACFL_SRCCODE_PSF: SWACFL_SRCCODE_PSF"	pointer
)	O
;	O
file_hdr	pointer
->	O
c_filesize	long
=	O
rpmpsf_get_psf_size	function
(	O
topsf	pointer
)	O
;	O
do_write_file	pointer
=	O
rpmpsf_write_beautify_psf	function
;	O
E_DEBUG	O
(	O
"leaving SWACFL_SRCCODE_PSF: SWACFL_SRCCODE_PSF"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
SWBIS_E_FAIL	O
(	O
"fatal"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
pipe	function
(	O
pheader	array
)	O
;	O
pid	int
=	O
swfork	O
(	O
(	O
sigset_t	struct
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
SWBIS_E_FAIL	O
(	O
"fatal, fork error"	pointer
)	O
;	O
_exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
close	pointer
(	O
pheader	array
[	O
0	int
]	O
)	O
;	O
(	O
*	O
do_write_file	pointer
)	O
(	O
topsf	pointer
,	O
pheader	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
en	pointer
->	O
source_code_	int
==	O
SWACFL_SRCCODE_RPMHEADER	int
)	O
{	O
uxfio_unix_safe_write	function
(	O
pheader	array
[	O
1	int
]	O
,	O
"\n"	pointer
,	O
1	int
)	O
;	O
}	O
_exit	function
(	O
0	int
)	O
;	O
}	O
close	pointer
(	O
pheader	array
[	O
1	int
]	O
)	O
;	O
xformat_write_by_fd	function
(	O
xxformat	pointer
,	O
pheader	array
[	O
0	int
]	O
,	O
file_hdr	pointer
)	O
;	O
E_DEBUG3	O
(	O
"OK %s %s"	pointer
,	O
p	pointer
,	O
en	pointer
->	O
from_name_	pointer
)	O
;	O
E_DEBUG	O
(	O
"leaving SWACFL_SRCCODE_PSF"	pointer
)	O
;	O
break	O
;	O
case	O
SWACFL_SRCCODE_FILESYSTEM	int
:	O
SWBIS_E_FAIL	O
(	O
"bad case error"	pointer
)	O
;	O
break	O
;	O
}	O
}	O
ahsStaticDeleteFilehdr	function
(	O
file_hdr	pointer
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
topsf_copypass_swacfl_archive_list	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
XFORMAT	struct
*	O
xxformat	pointer
,	O
SWVARFS	struct
*	O
swvarfs	pointer
,	O
int	O
ofd	int
)	O
{	O
int	O
u_fd	int
;	O
int	O
pheader	array
[	O
2	int
]	O
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
savep	pointer
=	O
NULL	O
;	O
pid_t	int
pid	int
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
swacfl_entry	struct
*	O
en	pointer
;	O
SWACFL	struct
*	O
swacfl	pointer
=	O
topsf	pointer
->	O
swacfl_	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
int	O
(	O
*	O
do_write_file	pointer
)	O
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
o_fd	int
)	O
;	O
int	O
archive_name_index	int
=	O
0	int
;	O
char	O
*	O
archive_name	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
tmp	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
while	O
(	O
(	O
archive_name	pointer
=	O
strar_get	function
(	O
topsf	pointer
->	O
archive_namesM	pointer
,	O
archive_name_index	int
++	O
)	O
)	O
)	O
{	O
E_DEBUG2	O
(	O
"archive_name=[%s]"	pointer
,	O
archive_name	pointer
?	O
archive_name	pointer
:	O
"<NULL>"	pointer
)	O
;	O
if	O
(	O
topsf	pointer
->	O
rpmtag_default_prefixM	pointer
)	O
{	O
strob_strcpy	function
(	O
tmp	pointer
,	O
topsf	pointer
->	O
rpmtag_default_prefixM	pointer
)	O
;	O
swlib_add_trailing_slash	function
(	O
tmp	pointer
)	O
;	O
strob_strcat	function
(	O
tmp	pointer
,	O
archive_name	pointer
)	O
;	O
E_DEBUG2	O
(	O
"will FIND ENTY prefix: tmp=[%s]"	pointer
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
en	pointer
=	O
swacfl_find_entry	function
(	O
swacfl	pointer
,	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
}	O
else	O
{	O
E_DEBUG2	O
(	O
"will FIND ENTY no prefix: archive_name=[%s]"	pointer
,	O
archive_name	pointer
)	O
;	O
en	pointer
=	O
swacfl_find_entry	function
(	O
swacfl	pointer
,	O
archive_name	pointer
)	O
;	O
}	O
if	O
(	O
!	O
en	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"lxpsf: Internal fatal error, swacfl entry not found for [%s]\n"	pointer
,	O
archive_name	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
savep	pointer
)	O
free	function
(	O
savep	pointer
)	O
;	O
if	O
(	O
topsf	pointer
->	O
rpmtag_default_prefixM	pointer
)	O
{	O
savep	pointer
=	O
swlib_strdup	function
(	O
archive_name	pointer
)	O
;	O
}	O
else	O
{	O
savep	pointer
=	O
swlib_strdup	function
(	O
strob_str	function
(	O
en	pointer
->	O
archiveNameM	pointer
)	O
)	O
;	O
}	O
E_DEBUG2	O
(	O
"WILL OPEN: savep = [%s]"	pointer
,	O
savep	pointer
)	O
;	O
E_DEBUG2	O
(	O
"en->from_name_ = [%s]"	pointer
,	O
en	pointer
->	O
from_name_	pointer
)	O
;	O
p	pointer
=	O
savep	pointer
;	O
swlib_process_hex_escapes	function
(	O
p	pointer
)	O
;	O
swlib_unexpand_escapes	function
(	O
NULL	O
,	O
p	pointer
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'/'	O
)	O
p	pointer
++	O
;	O
switch	O
(	O
en	pointer
->	O
source_code_	int
)	O
{	O
case	O
SWACFL_SRCCODE_ARCHIVE_STREAM	int
:	O
E_DEBUG	O
(	O
"in SWACFL_SRCCODE_ARCHIVE_STREAM"	pointer
)	O
;	O
E_DEBUG	O
(	O
"SWACFL_SRCCODE_ARCHIVE_STREAM #1a"	pointer
)	O
;	O
u_fd	int
=	O
swvarfs_u_open	function
(	O
swvarfs	pointer
,	O
p	pointer
)	O
;	O
E_DEBUG	O
(	O
"SWACFL_SRCCODE_ARCHIVE_STREAM #1b"	pointer
)	O
;	O
if	O
(	O
u_fd	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"SWACFL_SRCCODE_ARCHIVE_STREAM #1c"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"swvarfs_u_open error: file %s not found\n"	pointer
,	O
p	pointer
)	O
;	O
break	O
;	O
}	O
E_DEBUG	O
(	O
"SWACFL_SRCCODE_ARCHIVE_STREAM #1"	pointer
)	O
;	O
swvarfs_u_fstat	function
(	O
swvarfs	pointer
,	O
u_fd	int
,	O
&	O
st	pointer
)	O
;	O
E_DEBUG	O
(	O
"SWACFL_SRCCODE_ARCHIVE_STREAM #2"	pointer
)	O
;	O
if	O
(	O
topsf	pointer
->	O
rpmtag_default_prefixM	pointer
)	O
{	O
taru_statbuf2filehdr	function
(	O
file_hdr	pointer
,	O
&	O
st	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
en	pointer
->	O
from_name_	pointer
,	O
swvarfs_u_get_linkname	function
(	O
swvarfs	pointer
,	O
u_fd	int
)	O
)	O
;	O
}	O
else	O
{	O
taru_statbuf2filehdr	function
(	O
file_hdr	pointer
,	O
&	O
st	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
p	pointer
,	O
swvarfs_u_get_linkname	function
(	O
swvarfs	pointer
,	O
u_fd	int
)	O
)	O
;	O
}	O
E_DEBUG	O
(	O
"SWACFL_SRCCODE_ARCHIVE_STREAM #3"	pointer
)	O
;	O
file_hdr	pointer
->	O
c_uid	short
=	O
getuid	function
(	O
)	O
;	O
file_hdr	pointer
->	O
c_gid	short
=	O
getgid	function
(	O
)	O
;	O
xformat_write_by_fd	function
(	O
xxformat	pointer
,	O
u_fd	int
,	O
file_hdr	pointer
)	O
;	O
E_DEBUG3	O
(	O
"OK %s %s"	pointer
,	O
p	pointer
,	O
en	pointer
->	O
from_name_	pointer
)	O
;	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
swvarfs_u_close	function
(	O
swvarfs	pointer
,	O
u_fd	int
)	O
;	O
if	O
(	O
topsf_check_header_list	function
(	O
topsf	pointer
,	O
topsf	pointer
->	O
header_namesM	pointer
,	O
archive_name	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: topsf_check_header_list() indicates not found: [%s]\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
,	O
archive_name	pointer
)	O
;	O
}	O
E_DEBUG	O
(	O
"leaving SWACFL_SRCCODE_ARCHIVE_STREAM"	pointer
)	O
;	O
break	O
;	O
case	O
SWACFL_SRCCODE_RPMHEADER	int
:	O
case	O
SWACFL_SRCCODE_PSF	int
:	O
E_DEBUG	O
(	O
"in SWACFL_SRCCODE_PSF"	pointer
)	O
;	O
file_hdr	pointer
->	O
c_magic	short
=	O
CPIO_NEWASCII_MAGIC	int
;	O
file_hdr	pointer
->	O
c_ino	short
=	O
1	int
;	O
file_hdr	pointer
->	O
c_mode	short
=	O
(	O
0644	int
)	O
;	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFREG	int
;	O
file_hdr	pointer
->	O
c_uid	short
=	O
getuid	function
(	O
)	O
;	O
file_hdr	pointer
->	O
c_gid	short
=	O
getgid	function
(	O
)	O
;	O
file_hdr	pointer
->	O
c_nlink	short
=	O
1	int
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
file_hdr	pointer
->	O
c_mtime	long
=	O
topsf	pointer
->	O
mtimeM	long
;	O
file_hdr	pointer
->	O
c_filesize	long
=	O
0	int
;	O
file_hdr	pointer
->	O
c_namesize	short
=	O
strlen	function
(	O
en	pointer
->	O
from_name_	pointer
)	O
+	O
1	int
;	O
file_hdr	pointer
->	O
c_chksum	long
=	O
0	int
;	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
en	pointer
->	O
from_name_	pointer
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
NULL	O
)	O
;	O
switch	O
(	O
en	pointer
->	O
source_code_	int
)	O
{	O
case	O
SWACFL_SRCCODE_RPMHEADER	int
:	O
E_DEBUG	O
(	O
"in SWACFL_SRCCODE_PSF: SWACFL_SRCCODE_RPMHEADER"	pointer
)	O
;	O
topsf	pointer
->	O
user_addr	pointer
=	O
p	pointer
;	O
file_hdr	pointer
->	O
c_filesize	long
=	O
rpmpsf_get_rpmtag_length	function
(	O
topsf	pointer
,	O
p	pointer
)	O
;	O
do_write_file	pointer
=	O
rpmpsf_write_out_tag	function
;	O
E_DEBUG	O
(	O
"leaving SWACFL_SRCCODE_PSF: SWACFL_SRCCODE_RPMHEADER"	pointer
)	O
;	O
break	O
;	O
case	O
SWACFL_SRCCODE_PSF	int
:	O
E_DEBUG	O
(	O
"in SWACFL_SRCCODE_PSF: SWACFL_SRCCODE_PSF"	pointer
)	O
;	O
file_hdr	pointer
->	O
c_filesize	long
=	O
rpmpsf_get_psf_size	function
(	O
topsf	pointer
)	O
;	O
do_write_file	pointer
=	O
rpmpsf_write_beautify_psf	function
;	O
E_DEBUG	O
(	O
"leaving SWACFL_SRCCODE_PSF: SWACFL_SRCCODE_PSF"	pointer
)	O
;	O
break	O
;	O
default	O
:	O
SWBIS_E_FAIL	O
(	O
"fatal"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
pipe	function
(	O
pheader	array
)	O
;	O
pid	int
=	O
swfork	O
(	O
(	O
sigset_t	struct
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
SWBIS_E_FAIL	O
(	O
"fatal, fork error"	pointer
)	O
;	O
_exit	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
close	pointer
(	O
pheader	array
[	O
0	int
]	O
)	O
;	O
(	O
*	O
do_write_file	pointer
)	O
(	O
topsf	pointer
,	O
pheader	array
[	O
1	int
]	O
)	O
;	O
_exit	function
(	O
0	int
)	O
;	O
}	O
close	pointer
(	O
pheader	array
[	O
1	int
]	O
)	O
;	O
xformat_write_by_fd	function
(	O
xxformat	pointer
,	O
pheader	array
[	O
0	int
]	O
,	O
file_hdr	pointer
)	O
;	O
E_DEBUG3	O
(	O
"OK %s %s"	pointer
,	O
p	pointer
,	O
en	pointer
->	O
from_name_	pointer
)	O
;	O
E_DEBUG	O
(	O
"leaving SWACFL_SRCCODE_PSF"	pointer
)	O
;	O
break	O
;	O
case	O
SWACFL_SRCCODE_FILESYSTEM	int
:	O
SWBIS_E_FAIL	O
(	O
"bad case error"	pointer
)	O
;	O
break	O
;	O
}	O
}	O
E_DEBUG2	O
(	O
"status_array [%s]"	pointer
,	O
strob_str	function
(	O
topsf	pointer
->	O
file_status_arrayM	pointer
)	O
)	O
;	O
if	O
(	O
savep	pointer
)	O
free	function
(	O
savep	pointer
)	O
;	O
ahsStaticDeleteFilehdr	function
(	O
file_hdr	pointer
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
topsf_copypass_swacfl_list	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
ofd	int
)	O
{	O
int	O
ret	int
;	O
SWVARFS	struct
*	O
swvarfs	pointer
;	O
XFORMAT	struct
*	O
xxformat	pointer
;	O
xxformat	pointer
=	O
xformat_open	function
(	O
-	O
1	int
,	O
ofd	int
,	O
(	O
int	O
)	O
(	O
arf_newascii	int
)	O
)	O
;	O
swvarfs	pointer
=	O
swvarfs_opendup	function
(	O
topsf	pointer
->	O
fd_	int
,	O
UINFILE_DETECT_FORCEUXFIOFD	O
|	O
UINFILE_UXFIO_BUFTYPE_DYNAMIC_MEM	O
,	O
(	O
mode_t	int
)	O
(	O
NULL	O
)	O
)	O
;	O
if	O
(	O
!	O
swvarfs	pointer
)	O
{	O
return	O
-	O
1	int
;	O
}	O
E_DEBUG	O
(	O
"running topsf_copypass_swacfl_header_list"	pointer
)	O
;	O
ret	int
=	O
topsf_copypass_swacfl_header_list	function
(	O
topsf	pointer
,	O
xxformat	pointer
,	O
swvarfs	pointer
,	O
ofd	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"topsf_copypass_swacfl_list: error writing header files\n"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
E_DEBUG	O
(	O
"running topsf_copypass_swacfl_archive_list"	pointer
)	O
;	O
ret	int
=	O
topsf_copypass_swacfl_archive_list	function
(	O
topsf	pointer
,	O
xxformat	pointer
,	O
swvarfs	pointer
,	O
ofd	int
)	O
;	O
if	O
(	O
topsf	pointer
->	O
rpmtag_default_prefixM	pointer
!=	O
NULL	O
)	O
{	O
;	O
}	O
else	O
{	O
topsf_copypass_swacfl_write_missing_files	function
(	O
topsf	pointer
,	O
xxformat	pointer
,	O
swvarfs	pointer
,	O
ofd	int
)	O
;	O
}	O
swvarfs_close	function
(	O
swvarfs	pointer
)	O
;	O
xformat_write_trailer	function
(	O
xxformat	pointer
)	O
;	O
xformat_close	function
(	O
xxformat	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
topsf_get_fd_fd	function
(	O
TOPSF	struct
*	O
topsf	pointer
)	O
{	O
int	O
ret	int
;	O
E_DEBUG	O
(	O
"FUNCTION ENTER"	pointer
)	O
;	O
switch	O
(	O
uinfile_get_type	function
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
)	O
{	O
case	O
RPMRHS_FILEFORMAT	int
:	O
ret	int
=	O
rpmfd_get_fd_fd	function
(	O
topsf	pointer
->	O
rpmfd_	pointer
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
ret	int
;	O
default	O
:	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
topsf	pointer
->	O
fd_	int
;	O
break	O
;	O
}	O
}	O
char	O
*	O
topsf_make_package_prefix	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
char	O
*	O
cwdir	pointer
)	O
{	O
char	O
*	O
ret	int
;	O
E_DEBUG	O
(	O
"FUNCTION ENTER"	pointer
)	O
;	O
switch	O
(	O
uinfile_get_type	function
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
)	O
{	O
case	O
RPMRHS_FILEFORMAT	int
:	O
ret	int
=	O
rpmpsf_make_package_prefix	function
(	O
topsf	pointer
,	O
cwdir	pointer
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
ret	int
;	O
break	O
;	O
case	O
PLAIN_TARBALL_SRC_FILEFORMAT	int
:	O
break	O
;	O
case	O
SLACK_FILEFORMAT	int
:	O
break	O
;	O
case	O
DEB_FILEFORMAT	int
:	O
ret	int
=	O
strdup	function
(	O
""	pointer
)	O
;	O
return	O
ret	int
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"unrecognized package type.\n"	pointer
)	O
;	O
break	O
;	O
}	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
int	O
topsf_write_psf	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
fd_out	int
,	O
int	O
do_indent	int
)	O
{	O
int	O
ret	int
;	O
E_DEBUG	O
(	O
"FUNCTION ENTER"	pointer
)	O
;	O
switch	O
(	O
uinfile_get_type	function
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
)	O
{	O
case	O
RPMRHS_FILEFORMAT	int
:	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
do_indent	int
)	O
{	O
ret	int
=	O
rpmpsf_write_beautify_psf	function
(	O
topsf	pointer
,	O
fd_out	int
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
else	O
{	O
ret	int
=	O
rpmpsf_write_psf	function
(	O
topsf	pointer
,	O
fd_out	int
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
break	O
;	O
case	O
DEB_FILEFORMAT	int
:	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
debpsf_write_psf	function
(	O
(	O
void	O
*	O
)	O
topsf	pointer
,	O
fd_out	int
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
return	O
ret	int
;	O
break	O
;	O
case	O
SLACK_FILEFORMAT	int
:	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
ret	int
=	O
slack_write_psf	function
(	O
topsf	pointer
,	O
fd_out	int
)	O
;	O
return	O
ret	int
;	O
break	O
;	O
case	O
PLAIN_TARBALL_SRC_FILEFORMAT	int
:	O
ret	int
=	O
plain_source_tarball_psf	function
(	O
topsf	pointer
,	O
fd_out	int
)	O
;	O
return	O
ret	int
;	O
break	O
;	O
default	O
:	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"unrecognized package type.\n"	pointer
)	O
;	O
break	O
;	O
}	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
topsf_write_info	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
int	O
fd_out	int
,	O
int	O
do_indent	int
)	O
{	O
int	O
ret	int
;	O
E_DEBUG	O
(	O
"FUNCTION ENTER"	pointer
)	O
;	O
switch	O
(	O
uinfile_get_type	function
(	O
topsf	pointer
->	O
format_desc_	pointer
)	O
)	O
{	O
case	O
RPMRHS_FILEFORMAT	int
:	O
if	O
(	O
do_indent	int
)	O
{	O
ret	int
=	O
rpmpsf_write_beautify_info	function
(	O
topsf	pointer
,	O
fd_out	int
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
else	O
{	O
ret	int
=	O
rpmpsf_write_info	function
(	O
topsf	pointer
,	O
fd_out	int
)	O
;	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"unrecognized package type.\n"	pointer
)	O
;	O
break	O
;	O
}	O
E_DEBUG	O
(	O
"FUNCTION EXIT"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
topsf_h_write_to_buf	function
(	O
XFORMAT	struct
*	O
xformat	pointer
,	O
char	O
*	O
name	pointer
,	O
STROB	struct
*	O
*	O
buf	pointer
)	O
{	O
int	O
ufd	int
;	O
int	O
ret	int
;	O
if	O
(	O
buf	pointer
)	O
*	O
buf	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
ufd	int
=	O
xformat_u_open_file	function
(	O
xformat	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
ufd	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
buf	pointer
)	O
{	O
ret	int
=	O
swlib_ascii_text_fd_to_buf	function
(	O
*	O
buf	pointer
,	O
ufd	int
)	O
;	O
}	O
else	O
{	O
STROB	struct
*	O
tmp	pointer
=	O
strob_open	function
(	O
32	int
)	O
;	O
ret	int
=	O
swlib_ascii_text_fd_to_buf	function
(	O
tmp	pointer
,	O
ufd	int
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
ret	int
=	O
0	int
;	O
}	O
xformat_u_close_file	function
(	O
xformat	pointer
,	O
ufd	int
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
topsf_search_list	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
STRAR	struct
*	O
list	pointer
,	O
char	O
*	O
archive_name	pointer
)	O
{	O
char	O
*	O
s1	pointer
;	O
int	O
ret	int
;	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
s1	pointer
=	O
strar_get	function
(	O
list	pointer
,	O
i	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
E_DEBUG3	O
(	O
"comparing [%s] [%s]"	pointer
,	O
s1	pointer
,	O
archive_name	pointer
)	O
;	O
if	O
(	O
(	O
!	O
strcmp	function
(	O
archive_name	pointer
,	O
"/"	pointer
)	O
&&	O
!	O
strcmp	function
(	O
s1	pointer
,	O
"./"	pointer
)	O
)	O
||	O
(	O
!	O
strcmp	function
(	O
archive_name	pointer
,	O
"./"	pointer
)	O
&&	O
!	O
strcmp	function
(	O
s1	pointer
,	O
"/"	pointer
)	O
)	O
)	O
{	O
E_DEBUG3	O
(	O
"found special case [%s] [%s]"	pointer
,	O
s1	pointer
,	O
archive_name	pointer
)	O
;	O
return	O
i	int
;	O
}	O
else	O
{	O
ret	int
=	O
swlib_dir_compare	function
(	O
s1	pointer
,	O
archive_name	pointer
,	O
SWC_FC_NOAB	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
return	O
i	int
;	O
}	O
}	O
i	int
++	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
topsf_check_header_list	function
(	O
TOPSF	struct
*	O
topsf	pointer
,	O
STRAR	struct
*	O
list	pointer
,	O
char	O
*	O
archive_name	pointer
)	O
{	O
char	O
*	O
s1	pointer
;	O
int	O
ret	int
;	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
topsf	pointer
->	O
rpmtag_default_prefixM	pointer
)	O
{	O
E_DEBUG2	O
(	O
"archive name [%s]"	pointer
,	O
archive_name	pointer
)	O
;	O
strob_strcpy	function
(	O
topsf	pointer
->	O
usebuf1M	pointer
,	O
topsf	pointer
->	O
rpmtag_default_prefixM	pointer
)	O
;	O
swlib_unix_dircat	function
(	O
topsf	pointer
->	O
usebuf1M	pointer
,	O
archive_name	pointer
)	O
;	O
E_DEBUG2	O
(	O
"HAS prefix, searching for [%s]"	pointer
,	O
strob_str	function
(	O
topsf	pointer
->	O
usebuf1M	pointer
)	O
)	O
;	O
ret	int
=	O
topsf_search_list	function
(	O
topsf	pointer
,	O
list	pointer
,	O
strob_str	function
(	O
topsf	pointer
->	O
usebuf1M	pointer
)	O
)	O
;	O
}	O
else	O
{	O
E_DEBUG2	O
(	O
"searching for [%s]"	pointer
,	O
archive_name	pointer
)	O
;	O
ret	int
=	O
topsf_search_list	function
(	O
topsf	pointer
,	O
list	pointer
,	O
archive_name	pointer
)	O
;	O
}	O
if	O
(	O
ret	int
>=	O
0	int
)	O
{	O
strob_chr_index	function
(	O
topsf	pointer
->	O
file_status_arrayM	pointer
,	O
ret	int
,	O
TOPSF_FILE_STATUS_IN_ARCHIVE	int
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
}	O
