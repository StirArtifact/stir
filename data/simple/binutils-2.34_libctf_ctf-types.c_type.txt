int	O
ctf_type_isparent	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
id	int
)	O
{	O
return	O
(	O
LCTF_TYPE_ISPARENT	O
(	O
fp	pointer
,	O
id	int
)	O
)	O
;	O
}	O
int	O
ctf_type_ischild	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
id	int
)	O
{	O
return	O
(	O
LCTF_TYPE_ISCHILD	O
(	O
fp	pointer
,	O
id	int
)	O
)	O
;	O
}	O
int	O
ctf_member_iter	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
ctf_member_f	function
*	O
func	pointer
,	O
void	O
*	O
arg	pointer
)	O
{	O
ctf_file_t	struct
*	O
ofp	pointer
=	O
fp	pointer
;	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
ssize_t	long
size	long
,	O
increment	long
;	O
uint32_t	int
kind	int
,	O
n	int
;	O
int	O
rc	int
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
&	O
size	long
,	O
&	O
increment	long
)	O
;	O
kind	int
=	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
if	O
(	O
kind	int
!=	O
CTF_K_STRUCT	int
&&	O
kind	int
!=	O
CTF_K_UNION	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTSOU	int
)	O
)	O
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
size	long
<	O
CTF_LSTRUCT_THRESH	int
)	O
{	O
const	O
ctf_member_t	struct
*	O
mp	pointer
=	O
(	O
const	O
ctf_member_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
for	O
(	O
n	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
n	int
!=	O
0	int
;	O
n	int
--	O
,	O
mp	pointer
++	O
)	O
{	O
const	O
char	O
*	O
name	pointer
=	O
ctf_strptr	function
(	O
fp	pointer
,	O
mp	pointer
->	O
ctm_name	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
func	pointer
(	O
name	pointer
,	O
mp	pointer
->	O
ctm_type	short
,	O
mp	pointer
->	O
ctm_offset	short
,	O
arg	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
else	O
{	O
const	O
ctf_lmember_t	struct
*	O
lmp	pointer
=	O
(	O
const	O
ctf_lmember_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
for	O
(	O
n	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
n	int
!=	O
0	int
;	O
n	int
--	O
,	O
lmp	pointer
++	O
)	O
{	O
const	O
char	O
*	O
name	pointer
=	O
ctf_strptr	function
(	O
fp	pointer
,	O
lmp	pointer
->	O
ctlm_name	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
func	pointer
(	O
name	pointer
,	O
lmp	pointer
->	O
ctlm_type	short
,	O
(	O
unsigned	O
long	O
)	O
CTF_LMEM_OFFSET	O
(	O
lmp	pointer
)	O
,	O
arg	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	struct
*	O
dmd	pointer
;	O
for	O
(	O
dmd	pointer
=	O
ctf_list_next	O
(	O
&	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_members	struct
)	O
;	O
dmd	pointer
!=	O
NULL	O
;	O
dmd	pointer
=	O
ctf_list_next	O
(	O
dmd	pointer
)	O
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
func	pointer
(	O
dmd	pointer
->	O
dmd_name	pointer
,	O
dmd	pointer
->	O
dmd_type	long
,	O
dmd	pointer
->	O
dmd_offset	long
,	O
arg	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_enum_iter	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
ctf_enum_f	function
*	O
func	pointer
,	O
void	O
*	O
arg	pointer
)	O
{	O
ctf_file_t	struct
*	O
ofp	pointer
=	O
fp	pointer
;	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
const	O
ctf_enum_t	struct
*	O
ep	pointer
;	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
ssize_t	long
increment	long
;	O
uint32_t	int
n	int
;	O
int	O
rc	int
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve_unsliced	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
!=	O
CTF_K_ENUM	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTENUM	int
)	O
)	O
;	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
NULL	O
,	O
&	O
increment	long
)	O
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
ofp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
ep	pointer
=	O
(	O
const	O
ctf_enum_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
for	O
(	O
n	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
n	int
!=	O
0	int
;	O
n	int
--	O
,	O
ep	pointer
++	O
)	O
{	O
const	O
char	O
*	O
name	pointer
=	O
ctf_strptr	function
(	O
fp	pointer
,	O
ep	pointer
->	O
cte_name	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
func	pointer
(	O
name	pointer
,	O
ep	pointer
->	O
cte_value	int
,	O
arg	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	struct
*	O
dmd	pointer
;	O
for	O
(	O
dmd	pointer
=	O
ctf_list_next	O
(	O
&	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_members	struct
)	O
;	O
dmd	pointer
!=	O
NULL	O
;	O
dmd	pointer
=	O
ctf_list_next	O
(	O
dmd	pointer
)	O
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
func	pointer
(	O
dmd	pointer
->	O
dmd_name	pointer
,	O
dmd	pointer
->	O
dmd_value	int
,	O
arg	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_type_iter	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_type_f	function
*	O
func	pointer
,	O
void	O
*	O
arg	pointer
)	O
{	O
ctf_id_t	long
id	int
,	O
max	long
=	O
fp	pointer
->	O
ctf_typemax	long
;	O
int	O
rc	int
,	O
child	int
=	O
(	O
fp	pointer
->	O
ctf_flags	int
&	O
LCTF_CHILD	int
)	O
;	O
for	O
(	O
id	int
=	O
1	int
;	O
id	int
<=	O
max	long
;	O
id	int
++	O
)	O
{	O
const	O
ctf_type_t	struct
*	O
tp	pointer
=	O
LCTF_INDEX_TO_TYPEPTR	O
(	O
fp	pointer
,	O
id	int
)	O
;	O
if	O
(	O
LCTF_INFO_ISROOT	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
&&	O
(	O
rc	int
=	O
func	pointer
(	O
LCTF_INDEX_TO_TYPE	O
(	O
fp	pointer
,	O
id	int
,	O
child	int
)	O
,	O
arg	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_type_iter_all	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_type_all_f	function
*	O
func	pointer
,	O
void	O
*	O
arg	pointer
)	O
{	O
ctf_id_t	long
id	int
,	O
max	long
=	O
fp	pointer
->	O
ctf_typemax	long
;	O
int	O
rc	int
,	O
child	int
=	O
(	O
fp	pointer
->	O
ctf_flags	int
&	O
LCTF_CHILD	int
)	O
;	O
for	O
(	O
id	int
=	O
1	int
;	O
id	int
<=	O
max	long
;	O
id	int
++	O
)	O
{	O
const	O
ctf_type_t	struct
*	O
tp	pointer
=	O
LCTF_INDEX_TO_TYPEPTR	O
(	O
fp	pointer
,	O
id	int
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
func	pointer
(	O
LCTF_INDEX_TO_TYPE	O
(	O
fp	pointer
,	O
id	int
,	O
child	int
)	O
,	O
LCTF_INFO_ISROOT	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
?	O
CTF_ADD_ROOT	int
:	O
CTF_ADD_NONROOT	int
,	O
arg	pointer
)	O
!=	O
0	int
)	O
)	O
return	O
rc	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_variable_iter	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_variable_f	function
*	O
func	pointer
,	O
void	O
*	O
arg	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
(	O
fp	pointer
->	O
ctf_flags	int
&	O
LCTF_CHILD	int
)	O
&&	O
(	O
fp	pointer
->	O
ctf_parent	pointer
==	O
NULL	O
)	O
)	O
return	O
ECTF_NOPARENT	int
;	O
if	O
(	O
!	O
(	O
fp	pointer
->	O
ctf_flags	int
&	O
LCTF_RDWR	int
)	O
)	O
{	O
unsigned	O
long	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
fp	pointer
->	O
ctf_nvars	long
;	O
i	pointer
++	O
)	O
if	O
(	O
(	O
rc	int
=	O
func	pointer
(	O
ctf_strptr	function
(	O
fp	pointer
,	O
fp	pointer
->	O
ctf_vars	pointer
[	O
i	pointer
]	O
.	O
ctv_name	int
)	O
,	O
fp	pointer
->	O
ctf_vars	pointer
[	O
i	pointer
]	O
.	O
ctv_type	int
,	O
arg	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
else	O
{	O
ctf_dvdef_t	struct
*	O
dvd	pointer
;	O
for	O
(	O
dvd	pointer
=	O
ctf_list_next	O
(	O
&	O
fp	pointer
->	O
ctf_dvdefs	struct
)	O
;	O
dvd	pointer
!=	O
NULL	O
;	O
dvd	pointer
=	O
ctf_list_next	O
(	O
dvd	pointer
)	O
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
func	pointer
(	O
dvd	pointer
->	O
dvd_name	pointer
,	O
dvd	pointer
->	O
dvd_type	long
,	O
arg	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
ctf_id_t	long
ctf_type_resolve	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
)	O
{	O
ctf_id_t	long
prev	pointer
=	O
type	long
,	O
otype	long
=	O
type	long
;	O
ctf_file_t	struct
*	O
ofp	pointer
=	O
fp	pointer
;	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
if	O
(	O
type	long
==	O
0	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NONREPRESENTABLE	int
)	O
)	O
;	O
while	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
!=	O
NULL	O
)	O
{	O
switch	O
(	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
)	O
{	O
case	O
CTF_K_TYPEDEF	int
:	O
case	O
CTF_K_VOLATILE	int
:	O
case	O
CTF_K_CONST	int
:	O
case	O
CTF_K_RESTRICT	int
:	O
if	O
(	O
tp	pointer
->	O
ctt_type	short
==	O
type	long
||	O
tp	pointer
->	O
ctt_type	short
==	O
otype	long
||	O
tp	pointer
->	O
ctt_type	short
==	O
prev	pointer
)	O
{	O
ctf_dprintf	function
(	O
"type %ld cycle detected\n"	pointer
,	O
otype	long
)	O
;	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_CORRUPT	int
)	O
)	O
;	O
}	O
prev	pointer
=	O
type	long
;	O
type	long
=	O
tp	pointer
->	O
ctt_type	short
;	O
break	O
;	O
default	O
:	O
return	O
type	long
;	O
}	O
if	O
(	O
type	long
==	O
0	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NONREPRESENTABLE	int
)	O
)	O
;	O
}	O
return	O
CTF_ERR	O
;	O
}	O
ctf_id_t	long
ctf_type_resolve_unsliced	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
)	O
{	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
CTF_ERR	O
;	O
if	O
(	O
(	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
)	O
==	O
CTF_K_SLICE	int
)	O
return	O
ctf_type_reference	function
(	O
fp	pointer
,	O
type	long
)	O
;	O
return	O
type	long
;	O
}	O
ctf_id_t	long
ctf_lookup_by_rawname	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
int	O
kind	int
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
ctf_lookup_by_rawhash	function
(	O
fp	pointer
,	O
ctf_name_table	function
(	O
fp	pointer
,	O
kind	int
)	O
,	O
name	pointer
)	O
;	O
}	O
ctf_id_t	long
ctf_lookup_by_rawhash	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_names_t	struct
*	O
np	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
ctf_id_t	long
id	int
;	O
if	O
(	O
fp	pointer
->	O
ctf_flags	int
&	O
LCTF_RDWR	int
)	O
id	int
=	O
(	O
ctf_id_t	long
)	O
ctf_dynhash_lookup	function
(	O
np	pointer
->	O
ctn_writable	pointer
,	O
name	pointer
)	O
;	O
else	O
id	int
=	O
ctf_hash_lookup_type	function
(	O
np	pointer
->	O
ctn_readonly	pointer
,	O
fp	pointer
,	O
name	pointer
)	O
;	O
return	O
id	int
;	O
}	O
char	O
*	O
ctf_type_aname	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
)	O
{	O
ctf_decl_t	struct
cd	pointer
;	O
ctf_decl_node_t	struct
*	O
cdp	pointer
;	O
ctf_decl_prec_t	enum
prec	enum
,	O
lp	pointer
,	O
rp	enum
;	O
int	O
ptr	pointer
,	O
arr	int
;	O
uint32_t	int
k	int
;	O
char	O
*	O
buf	pointer
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
&&	O
type	long
==	O
CTF_ERR	O
)	O
return	O
NULL	O
;	O
ctf_decl_init	function
(	O
&	O
cd	pointer
)	O
;	O
ctf_decl_push	function
(	O
&	O
cd	pointer
,	O
fp	pointer
,	O
type	long
)	O
;	O
if	O
(	O
cd	pointer
.	O
cd_err	int
!=	O
0	int
)	O
{	O
ctf_decl_fini	function
(	O
&	O
cd	pointer
)	O
;	O
ctf_set_errno	function
(	O
fp	pointer
,	O
cd	pointer
.	O
cd_err	int
)	O
;	O
return	O
NULL	O
;	O
}	O
ptr	pointer
=	O
cd	pointer
.	O
cd_order	array
[	O
CTF_PREC_POINTER	int
]	O
>	O
CTF_PREC_POINTER	int
;	O
arr	int
=	O
cd	pointer
.	O
cd_order	array
[	O
CTF_PREC_ARRAY	int
]	O
>	O
CTF_PREC_ARRAY	int
;	O
rp	enum
=	O
arr	int
?	O
CTF_PREC_ARRAY	int
:	O
ptr	pointer
?	O
CTF_PREC_POINTER	int
:	O
-	O
1	int
;	O
lp	pointer
=	O
ptr	pointer
?	O
CTF_PREC_POINTER	int
:	O
arr	int
?	O
CTF_PREC_ARRAY	int
:	O
-	O
1	int
;	O
k	int
=	O
CTF_K_POINTER	int
;	O
for	O
(	O
prec	enum
=	O
CTF_PREC_BASE	int
;	O
prec	enum
<	O
CTF_PREC_MAX	int
;	O
prec	enum
++	O
)	O
{	O
for	O
(	O
cdp	pointer
=	O
ctf_list_next	O
(	O
&	O
cd	pointer
.	O
cd_nodes	array
[	O
prec	enum
]	O
)	O
;	O
cdp	pointer
!=	O
NULL	O
;	O
cdp	pointer
=	O
ctf_list_next	O
(	O
cdp	pointer
)	O
)	O
{	O
ctf_file_t	struct
*	O
rfp	pointer
=	O
fp	pointer
;	O
const	O
ctf_type_t	struct
*	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
rfp	pointer
,	O
cdp	pointer
->	O
cd_type	long
)	O
;	O
const	O
char	O
*	O
name	pointer
=	O
ctf_strptr	function
(	O
rfp	pointer
,	O
tp	pointer
->	O
ctt_name	int
)	O
;	O
if	O
(	O
k	int
!=	O
CTF_K_POINTER	int
&&	O
k	int
!=	O
CTF_K_ARRAY	int
)	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
lp	pointer
==	O
prec	enum
)	O
{	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
"("	pointer
)	O
;	O
lp	pointer
=	O
-	O
1	int
;	O
}	O
switch	O
(	O
cdp	pointer
->	O
cd_kind	int
)	O
{	O
case	O
CTF_K_INTEGER	int
:	O
case	O
CTF_K_FLOAT	int
:	O
case	O
CTF_K_TYPEDEF	int
:	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
"%s"	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
case	O
CTF_K_POINTER	int
:	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
"*"	pointer
)	O
;	O
break	O
;	O
case	O
CTF_K_ARRAY	int
:	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
"[%u]"	pointer
,	O
cdp	pointer
->	O
cd_n	int
)	O
;	O
break	O
;	O
case	O
CTF_K_FUNCTION	int
:	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
"()"	pointer
)	O
;	O
break	O
;	O
case	O
CTF_K_STRUCT	int
:	O
case	O
CTF_K_FORWARD	int
:	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
"struct %s"	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
case	O
CTF_K_UNION	int
:	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
"union %s"	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
case	O
CTF_K_ENUM	int
:	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
"enum %s"	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
case	O
CTF_K_VOLATILE	int
:	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
"volatile"	pointer
)	O
;	O
break	O
;	O
case	O
CTF_K_CONST	int
:	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
"const"	pointer
)	O
;	O
break	O
;	O
case	O
CTF_K_RESTRICT	int
:	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
"restrict"	pointer
)	O
;	O
break	O
;	O
case	O
CTF_K_SLICE	int
:	O
break	O
;	O
}	O
k	int
=	O
cdp	pointer
->	O
cd_kind	int
;	O
}	O
if	O
(	O
rp	enum
==	O
prec	enum
)	O
ctf_decl_sprintf	function
(	O
&	O
cd	pointer
,	O
")"	pointer
)	O
;	O
}	O
if	O
(	O
cd	pointer
.	O
cd_enomem	int
)	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ENOMEM	int
)	O
;	O
buf	pointer
=	O
ctf_decl_buf	function
(	O
&	O
cd	pointer
)	O
;	O
ctf_decl_fini	function
(	O
&	O
cd	pointer
)	O
;	O
return	O
buf	pointer
;	O
}	O
ssize_t	long
ctf_type_lname	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	int
)	O
{	O
char	O
*	O
str	pointer
=	O
ctf_type_aname	function
(	O
fp	pointer
,	O
type	long
)	O
;	O
size_t	long
slen	long
;	O
if	O
(	O
str	pointer
==	O
NULL	O
)	O
return	O
CTF_ERR	O
;	O
slen	long
=	O
strlen	function
(	O
str	pointer
)	O
;	O
snprintf	function
(	O
buf	pointer
,	O
len	int
,	O
"%s"	pointer
,	O
str	pointer
)	O
;	O
free	function
(	O
str	pointer
)	O
;	O
if	O
(	O
slen	long
>=	O
len	int
)	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NAMELEN	int
)	O
;	O
return	O
slen	long
;	O
}	O
char	O
*	O
ctf_type_name	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	int
)	O
{	O
ssize_t	long
rv	long
=	O
ctf_type_lname	function
(	O
fp	pointer
,	O
type	long
,	O
buf	pointer
,	O
len	int
)	O
;	O
return	O
(	O
rv	long
>=	O
0	int
&&	O
(	O
size_t	long
)	O
rv	long
<	O
len	int
?	O
buf	pointer
:	O
NULL	O
)	O
;	O
}	O
char	O
*	O
ctf_type_aname_raw	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
)	O
{	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
ctf_strraw	function
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_name	int
)	O
!=	O
NULL	O
)	O
return	O
strdup	function
(	O
ctf_strraw	function
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_name	int
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
ssize_t	long
ctf_type_size	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
)	O
{	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
ssize_t	long
size	long
;	O
ctf_arinfo_t	struct
ar	struct
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
switch	O
(	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
)	O
{	O
case	O
CTF_K_POINTER	int
:	O
return	O
fp	pointer
->	O
ctf_dmodel	struct
->	O
ctd_pointer	long
;	O
case	O
CTF_K_FUNCTION	int
:	O
return	O
0	int
;	O
case	O
CTF_K_ENUM	int
:	O
return	O
fp	pointer
->	O
ctf_dmodel	struct
->	O
ctd_int	long
;	O
case	O
CTF_K_ARRAY	int
:	O
if	O
(	O
(	O
size	long
=	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
NULL	O
,	O
NULL	O
)	O
)	O
>	O
0	int
)	O
return	O
size	long
;	O
if	O
(	O
ctf_array_info	function
(	O
fp	pointer
,	O
type	long
,	O
&	O
ar	struct
)	O
<	O
0	int
||	O
(	O
size	long
=	O
ctf_type_size	function
(	O
fp	pointer
,	O
ar	struct
.	O
ctr_contents	long
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
size	long
*	O
ar	struct
.	O
ctr_nelems	int
;	O
default	O
:	O
return	O
(	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
NULL	O
,	O
NULL	O
)	O
)	O
;	O
}	O
}	O
ssize_t	long
ctf_type_align	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
)	O
{	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
ctf_file_t	struct
*	O
ofp	pointer
=	O
fp	pointer
;	O
int	O
kind	int
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
kind	int
=	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
switch	O
(	O
kind	int
)	O
{	O
case	O
CTF_K_POINTER	int
:	O
case	O
CTF_K_FUNCTION	int
:	O
return	O
fp	pointer
->	O
ctf_dmodel	struct
->	O
ctd_pointer	long
;	O
case	O
CTF_K_ARRAY	int
:	O
{	O
ctf_arinfo_t	struct
r	struct
;	O
if	O
(	O
ctf_array_info	function
(	O
fp	pointer
,	O
type	long
,	O
&	O
r	struct
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
(	O
ctf_type_align	function
(	O
fp	pointer
,	O
r	struct
.	O
ctr_contents	long
)	O
)	O
;	O
}	O
case	O
CTF_K_STRUCT	int
:	O
case	O
CTF_K_UNION	int
:	O
{	O
size_t	long
align	long
=	O
0	int
;	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
ofp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
uint32_t	int
n	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
ssize_t	long
size	long
,	O
increment	long
;	O
const	O
void	O
*	O
vmp	pointer
;	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
&	O
size	long
,	O
&	O
increment	long
)	O
;	O
vmp	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
tp	pointer
+	O
increment	long
;	O
if	O
(	O
kind	int
==	O
CTF_K_STRUCT	int
)	O
n	int
=	O
MIN	O
(	O
n	int
,	O
1	int
)	O
;	O
if	O
(	O
size	long
<	O
CTF_LSTRUCT_THRESH	int
)	O
{	O
const	O
ctf_member_t	struct
*	O
mp	pointer
=	O
vmp	pointer
;	O
for	O
(	O
;	O
n	int
!=	O
0	int
;	O
n	int
--	O
,	O
mp	pointer
++	O
)	O
{	O
ssize_t	long
am	long
=	O
ctf_type_align	function
(	O
fp	pointer
,	O
mp	pointer
->	O
ctm_type	short
)	O
;	O
align	long
=	O
MAX	O
(	O
align	long
,	O
(	O
size_t	long
)	O
am	long
)	O
;	O
}	O
}	O
else	O
{	O
const	O
ctf_lmember_t	struct
*	O
lmp	pointer
=	O
vmp	pointer
;	O
for	O
(	O
;	O
n	int
!=	O
0	int
;	O
n	int
--	O
,	O
lmp	pointer
++	O
)	O
{	O
ssize_t	long
am	long
=	O
ctf_type_align	function
(	O
fp	pointer
,	O
lmp	pointer
->	O
ctlm_type	short
)	O
;	O
align	long
=	O
MAX	O
(	O
align	long
,	O
(	O
size_t	long
)	O
am	long
)	O
;	O
}	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	struct
*	O
dmd	pointer
;	O
for	O
(	O
dmd	pointer
=	O
ctf_list_next	O
(	O
&	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_members	struct
)	O
;	O
dmd	pointer
!=	O
NULL	O
;	O
dmd	pointer
=	O
ctf_list_next	O
(	O
dmd	pointer
)	O
)	O
{	O
ssize_t	long
am	long
=	O
ctf_type_align	function
(	O
fp	pointer
,	O
dmd	pointer
->	O
dmd_type	long
)	O
;	O
align	long
=	O
MAX	O
(	O
align	long
,	O
(	O
size_t	long
)	O
am	long
)	O
;	O
if	O
(	O
kind	int
==	O
CTF_K_STRUCT	int
)	O
break	O
;	O
}	O
}	O
return	O
align	long
;	O
}	O
case	O
CTF_K_ENUM	int
:	O
return	O
fp	pointer
->	O
ctf_dmodel	struct
->	O
ctd_int	long
;	O
default	O
:	O
return	O
(	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
NULL	O
,	O
NULL	O
)	O
)	O
;	O
}	O
}	O
int	O
ctf_type_kind_unsliced	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
)	O
{	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
return	O
(	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
)	O
;	O
}	O
int	O
ctf_type_kind	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
)	O
{	O
int	O
kind	int
;	O
if	O
(	O
(	O
kind	int
=	O
ctf_type_kind_unsliced	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
kind	int
==	O
CTF_K_SLICE	int
)	O
{	O
if	O
(	O
(	O
type	long
=	O
ctf_type_reference	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
kind	int
=	O
ctf_type_kind_unsliced	function
(	O
fp	pointer
,	O
type	long
)	O
;	O
}	O
return	O
kind	int
;	O
}	O
ctf_id_t	long
ctf_type_reference	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
)	O
{	O
ctf_file_t	struct
*	O
ofp	pointer
=	O
fp	pointer
;	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
CTF_ERR	O
;	O
switch	O
(	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
)	O
{	O
case	O
CTF_K_POINTER	int
:	O
case	O
CTF_K_TYPEDEF	int
:	O
case	O
CTF_K_VOLATILE	int
:	O
case	O
CTF_K_CONST	int
:	O
case	O
CTF_K_RESTRICT	int
:	O
return	O
tp	pointer
->	O
ctt_type	short
;	O
case	O
CTF_K_SLICE	int
:	O
{	O
const	O
ctf_slice_t	struct
*	O
sp	pointer
;	O
ssize_t	long
increment	long
;	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
NULL	O
,	O
&	O
increment	long
)	O
;	O
sp	pointer
=	O
(	O
const	O
ctf_slice_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
return	O
sp	pointer
->	O
cts_type	int
;	O
}	O
default	O
:	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTREF	int
)	O
)	O
;	O
}	O
}	O
ctf_id_t	long
ctf_type_pointer	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
)	O
{	O
ctf_file_t	struct
*	O
ofp	pointer
=	O
fp	pointer
;	O
ctf_id_t	long
ntype	long
;	O
if	O
(	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
==	O
NULL	O
)	O
return	O
CTF_ERR	O
;	O
if	O
(	O
(	O
ntype	long
=	O
fp	pointer
->	O
ctf_ptrtab	pointer
[	O
LCTF_TYPE_TO_INDEX	O
(	O
fp	pointer
,	O
type	long
)	O
]	O
)	O
!=	O
0	int
)	O
return	O
(	O
LCTF_INDEX_TO_TYPE	O
(	O
fp	pointer
,	O
ntype	long
,	O
(	O
fp	pointer
->	O
ctf_flags	int
&	O
LCTF_CHILD	int
)	O
)	O
)	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTYPE	int
)	O
)	O
;	O
if	O
(	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
==	O
NULL	O
)	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTYPE	int
)	O
)	O
;	O
if	O
(	O
(	O
ntype	long
=	O
fp	pointer
->	O
ctf_ptrtab	pointer
[	O
LCTF_TYPE_TO_INDEX	O
(	O
fp	pointer
,	O
type	long
)	O
]	O
)	O
!=	O
0	int
)	O
return	O
(	O
LCTF_INDEX_TO_TYPE	O
(	O
fp	pointer
,	O
ntype	long
,	O
(	O
fp	pointer
->	O
ctf_flags	int
&	O
LCTF_CHILD	int
)	O
)	O
)	O
;	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTYPE	int
)	O
)	O
;	O
}	O
int	O
ctf_type_encoding	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
ctf_encoding_t	struct
*	O
ep	pointer
)	O
{	O
ctf_file_t	struct
*	O
ofp	pointer
=	O
fp	pointer
;	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
ssize_t	long
increment	long
;	O
uint32_t	int
data	pointer
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
ofp	pointer
,	O
type	long
)	O
)	O
!=	O
NULL	O
)	O
{	O
switch	O
(	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
)	O
{	O
case	O
CTF_K_INTEGER	int
:	O
case	O
CTF_K_FLOAT	int
:	O
*	O
ep	pointer
=	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_enc	struct
;	O
break	O
;	O
case	O
CTF_K_SLICE	int
:	O
{	O
const	O
ctf_slice_t	struct
*	O
slice	pointer
;	O
ctf_encoding_t	struct
underlying_en	struct
;	O
slice	pointer
=	O
&	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_slice	struct
;	O
data	pointer
=	O
ctf_type_encoding	function
(	O
fp	pointer
,	O
slice	pointer
->	O
cts_type	int
,	O
&	O
underlying_en	struct
)	O
;	O
ep	pointer
->	O
cte_format	int
=	O
underlying_en	struct
.	O
cte_format	int
;	O
ep	pointer
->	O
cte_offset	int
=	O
slice	pointer
->	O
cts_offset	short
;	O
ep	pointer
->	O
cte_bits	int
=	O
slice	pointer
->	O
cts_bits	short
;	O
break	O
;	O
}	O
default	O
:	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTINTFP	int
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
NULL	O
,	O
&	O
increment	long
)	O
;	O
switch	O
(	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
)	O
{	O
case	O
CTF_K_INTEGER	int
:	O
data	pointer
=	O
*	O
(	O
const	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
ep	pointer
->	O
cte_format	int
=	O
CTF_INT_ENCODING	O
(	O
data	pointer
)	O
;	O
ep	pointer
->	O
cte_offset	int
=	O
CTF_INT_OFFSET	O
(	O
data	pointer
)	O
;	O
ep	pointer
->	O
cte_bits	int
=	O
CTF_INT_BITS	O
(	O
data	pointer
)	O
;	O
break	O
;	O
case	O
CTF_K_FLOAT	int
:	O
data	pointer
=	O
*	O
(	O
const	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
ep	pointer
->	O
cte_format	int
=	O
CTF_FP_ENCODING	O
(	O
data	pointer
)	O
;	O
ep	pointer
->	O
cte_offset	int
=	O
CTF_FP_OFFSET	O
(	O
data	pointer
)	O
;	O
ep	pointer
->	O
cte_bits	int
=	O
CTF_FP_BITS	O
(	O
data	pointer
)	O
;	O
break	O
;	O
case	O
CTF_K_SLICE	int
:	O
{	O
const	O
ctf_slice_t	struct
*	O
slice	pointer
;	O
ctf_encoding_t	struct
underlying_en	struct
;	O
slice	pointer
=	O
(	O
ctf_slice_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
data	pointer
=	O
ctf_type_encoding	function
(	O
fp	pointer
,	O
slice	pointer
->	O
cts_type	int
,	O
&	O
underlying_en	struct
)	O
;	O
ep	pointer
->	O
cte_format	int
=	O
underlying_en	struct
.	O
cte_format	int
;	O
ep	pointer
->	O
cte_offset	int
=	O
slice	pointer
->	O
cts_offset	short
;	O
ep	pointer
->	O
cte_bits	int
=	O
slice	pointer
->	O
cts_bits	short
;	O
break	O
;	O
}	O
default	O
:	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTINTFP	int
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_type_cmp	function
(	O
ctf_file_t	struct
*	O
lfp	pointer
,	O
ctf_id_t	long
ltype	long
,	O
ctf_file_t	struct
*	O
rfp	pointer
,	O
ctf_id_t	long
rtype	long
)	O
{	O
int	O
rval	int
;	O
if	O
(	O
ltype	long
<	O
rtype	long
)	O
rval	int
=	O
-	O
1	int
;	O
else	O
if	O
(	O
ltype	long
>	O
rtype	long
)	O
rval	int
=	O
1	int
;	O
else	O
rval	int
=	O
0	int
;	O
if	O
(	O
lfp	pointer
==	O
rfp	pointer
)	O
return	O
rval	int
;	O
if	O
(	O
LCTF_TYPE_ISPARENT	O
(	O
lfp	pointer
,	O
ltype	long
)	O
&&	O
lfp	pointer
->	O
ctf_parent	pointer
!=	O
NULL	O
)	O
lfp	pointer
=	O
lfp	pointer
->	O
ctf_parent	pointer
;	O
if	O
(	O
LCTF_TYPE_ISPARENT	O
(	O
rfp	pointer
,	O
rtype	long
)	O
&&	O
rfp	pointer
->	O
ctf_parent	pointer
!=	O
NULL	O
)	O
rfp	pointer
=	O
rfp	pointer
->	O
ctf_parent	pointer
;	O
if	O
(	O
lfp	pointer
<	O
rfp	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
lfp	pointer
>	O
rfp	pointer
)	O
return	O
1	int
;	O
return	O
rval	int
;	O
}	O
int	O
ctf_type_compat	function
(	O
ctf_file_t	struct
*	O
lfp	pointer
,	O
ctf_id_t	long
ltype	long
,	O
ctf_file_t	struct
*	O
rfp	pointer
,	O
ctf_id_t	long
rtype	long
)	O
{	O
const	O
ctf_type_t	struct
*	O
ltp	pointer
,	O
*	O
rtp	pointer
;	O
ctf_encoding_t	struct
le	struct
,	O
re	struct
;	O
ctf_arinfo_t	struct
la	struct
,	O
ra	struct
;	O
uint32_t	int
lkind	int
,	O
rkind	int
;	O
int	O
same_names	int
=	O
0	int
;	O
if	O
(	O
ctf_type_cmp	function
(	O
lfp	pointer
,	O
ltype	long
,	O
rfp	pointer
,	O
rtype	long
)	O
==	O
0	int
)	O
return	O
1	int
;	O
ltype	long
=	O
ctf_type_resolve	function
(	O
lfp	pointer
,	O
ltype	long
)	O
;	O
lkind	int
=	O
ctf_type_kind	function
(	O
lfp	pointer
,	O
ltype	long
)	O
;	O
rtype	long
=	O
ctf_type_resolve	function
(	O
rfp	pointer
,	O
rtype	long
)	O
;	O
rkind	int
=	O
ctf_type_kind	function
(	O
rfp	pointer
,	O
rtype	long
)	O
;	O
ltp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
lfp	pointer
,	O
ltype	long
)	O
;	O
rtp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
rfp	pointer
,	O
rtype	long
)	O
;	O
if	O
(	O
ltp	pointer
!=	O
NULL	O
&&	O
rtp	pointer
!=	O
NULL	O
)	O
same_names	int
=	O
(	O
strcmp	function
(	O
ctf_strptr	function
(	O
lfp	pointer
,	O
ltp	pointer
->	O
ctt_name	int
)	O
,	O
ctf_strptr	function
(	O
rfp	pointer
,	O
rtp	pointer
->	O
ctt_name	int
)	O
)	O
==	O
0	int
)	O
;	O
if	O
(	O
(	O
(	O
lkind	int
==	O
CTF_K_ENUM	int
)	O
&&	O
(	O
rkind	int
==	O
CTF_K_INTEGER	int
)	O
)	O
||	O
(	O
(	O
rkind	int
==	O
CTF_K_ENUM	int
)	O
&&	O
(	O
lkind	int
==	O
CTF_K_INTEGER	int
)	O
)	O
)	O
return	O
1	int
;	O
if	O
(	O
lkind	int
!=	O
rkind	int
)	O
return	O
0	int
;	O
switch	O
(	O
lkind	int
)	O
{	O
case	O
CTF_K_INTEGER	int
:	O
case	O
CTF_K_FLOAT	int
:	O
memset	function
(	O
&	O
le	struct
,	O
0	int
,	O
sizeof	O
(	O
le	struct
)	O
)	O
;	O
memset	function
(	O
&	O
re	struct
,	O
0	int
,	O
sizeof	O
(	O
re	struct
)	O
)	O
;	O
return	O
(	O
ctf_type_encoding	function
(	O
lfp	pointer
,	O
ltype	long
,	O
&	O
le	struct
)	O
==	O
0	int
&&	O
ctf_type_encoding	function
(	O
rfp	pointer
,	O
rtype	long
,	O
&	O
re	struct
)	O
==	O
0	int
&&	O
memcmp	function
(	O
&	O
le	struct
,	O
&	O
re	struct
,	O
sizeof	O
(	O
ctf_encoding_t	struct
)	O
)	O
==	O
0	int
)	O
;	O
case	O
CTF_K_POINTER	int
:	O
return	O
(	O
ctf_type_compat	function
(	O
lfp	pointer
,	O
ctf_type_reference	function
(	O
lfp	pointer
,	O
ltype	long
)	O
,	O
rfp	pointer
,	O
ctf_type_reference	function
(	O
rfp	pointer
,	O
rtype	long
)	O
)	O
)	O
;	O
case	O
CTF_K_ARRAY	int
:	O
return	O
(	O
ctf_array_info	function
(	O
lfp	pointer
,	O
ltype	long
,	O
&	O
la	struct
)	O
==	O
0	int
&&	O
ctf_array_info	function
(	O
rfp	pointer
,	O
rtype	long
,	O
&	O
ra	struct
)	O
==	O
0	int
&&	O
la	struct
.	O
ctr_nelems	int
==	O
ra	struct
.	O
ctr_nelems	int
&&	O
ctf_type_compat	function
(	O
lfp	pointer
,	O
la	struct
.	O
ctr_contents	long
,	O
rfp	pointer
,	O
ra	struct
.	O
ctr_contents	long
)	O
&&	O
ctf_type_compat	function
(	O
lfp	pointer
,	O
la	struct
.	O
ctr_index	long
,	O
rfp	pointer
,	O
ra	struct
.	O
ctr_index	long
)	O
)	O
;	O
case	O
CTF_K_STRUCT	int
:	O
case	O
CTF_K_UNION	int
:	O
return	O
(	O
same_names	int
&&	O
(	O
ctf_type_size	function
(	O
lfp	pointer
,	O
ltype	long
)	O
==	O
ctf_type_size	function
(	O
rfp	pointer
,	O
rtype	long
)	O
)	O
)	O
;	O
case	O
CTF_K_ENUM	int
:	O
{	O
int	O
lencoded	int
,	O
rencoded	int
;	O
lencoded	int
=	O
ctf_type_encoding	function
(	O
lfp	pointer
,	O
ltype	long
,	O
&	O
le	struct
)	O
;	O
rencoded	int
=	O
ctf_type_encoding	function
(	O
rfp	pointer
,	O
rtype	long
,	O
&	O
re	struct
)	O
;	O
if	O
(	O
(	O
lencoded	int
!=	O
rencoded	int
)	O
||	O
(	O
(	O
lencoded	int
==	O
0	int
)	O
&&	O
memcmp	function
(	O
&	O
le	struct
,	O
&	O
re	struct
,	O
sizeof	O
(	O
ctf_encoding_t	struct
)	O
)	O
!=	O
0	int
)	O
)	O
return	O
0	int
;	O
}	O
case	O
CTF_K_FORWARD	int
:	O
return	O
same_names	int
;	O
default	O
:	O
return	O
0	int
;	O
}	O
}	O
int	O
ctf_member_info	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
const	O
char	O
*	O
name	pointer
,	O
ctf_membinfo_t	struct
*	O
mip	pointer
)	O
{	O
ctf_file_t	struct
*	O
ofp	pointer
=	O
fp	pointer
;	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
ssize_t	long
size	long
,	O
increment	long
;	O
uint32_t	int
kind	int
,	O
n	int
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
&	O
size	long
,	O
&	O
increment	long
)	O
;	O
kind	int
=	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
if	O
(	O
kind	int
!=	O
CTF_K_STRUCT	int
&&	O
kind	int
!=	O
CTF_K_UNION	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTSOU	int
)	O
)	O
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
size	long
<	O
CTF_LSTRUCT_THRESH	int
)	O
{	O
const	O
ctf_member_t	struct
*	O
mp	pointer
=	O
(	O
const	O
ctf_member_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
for	O
(	O
n	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
n	int
!=	O
0	int
;	O
n	int
--	O
,	O
mp	pointer
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
ctf_strptr	function
(	O
fp	pointer
,	O
mp	pointer
->	O
ctm_name	int
)	O
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
mip	pointer
->	O
ctm_type	short
=	O
mp	pointer
->	O
ctm_type	short
;	O
mip	pointer
->	O
ctm_offset	short
=	O
mp	pointer
->	O
ctm_offset	short
;	O
return	O
0	int
;	O
}	O
}	O
}	O
else	O
{	O
const	O
ctf_lmember_t	struct
*	O
lmp	pointer
=	O
(	O
const	O
ctf_lmember_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
for	O
(	O
n	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
n	int
!=	O
0	int
;	O
n	int
--	O
,	O
lmp	pointer
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
ctf_strptr	function
(	O
fp	pointer
,	O
lmp	pointer
->	O
ctlm_name	int
)	O
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
mip	pointer
->	O
ctm_type	short
=	O
lmp	pointer
->	O
ctlm_type	short
;	O
mip	pointer
->	O
ctm_offset	short
=	O
(	O
unsigned	O
long	O
)	O
CTF_LMEM_OFFSET	O
(	O
lmp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	struct
*	O
dmd	pointer
;	O
for	O
(	O
dmd	pointer
=	O
ctf_list_next	O
(	O
&	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_members	struct
)	O
;	O
dmd	pointer
!=	O
NULL	O
;	O
dmd	pointer
=	O
ctf_list_next	O
(	O
dmd	pointer
)	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
dmd	pointer
->	O
dmd_name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
mip	pointer
->	O
ctm_type	short
=	O
dmd	pointer
->	O
dmd_type	long
;	O
mip	pointer
->	O
ctm_offset	short
=	O
dmd	pointer
->	O
dmd_offset	long
;	O
return	O
0	int
;	O
}	O
}	O
}	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOMEMBNAM	int
)	O
)	O
;	O
}	O
int	O
ctf_array_info	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
ctf_arinfo_t	struct
*	O
arp	pointer
)	O
{	O
ctf_file_t	struct
*	O
ofp	pointer
=	O
fp	pointer
;	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
const	O
ctf_array_t	struct
*	O
ap	pointer
;	O
const	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
ssize_t	long
increment	long
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
!=	O
CTF_K_ARRAY	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTARRAY	int
)	O
)	O
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
ofp	pointer
,	O
type	long
)	O
)	O
!=	O
NULL	O
)	O
{	O
*	O
arp	pointer
=	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_arr	struct
;	O
return	O
0	int
;	O
}	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
NULL	O
,	O
&	O
increment	long
)	O
;	O
ap	pointer
=	O
(	O
const	O
ctf_array_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
arp	pointer
->	O
ctr_contents	long
=	O
ap	pointer
->	O
cta_contents	short
;	O
arp	pointer
->	O
ctr_index	long
=	O
ap	pointer
->	O
cta_index	short
;	O
arp	pointer
->	O
ctr_nelems	int
=	O
ap	pointer
->	O
cta_nelems	int
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
ctf_enum_name	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
int	O
value	int
)	O
{	O
ctf_file_t	struct
*	O
ofp	pointer
=	O
fp	pointer
;	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
const	O
ctf_enum_t	struct
*	O
ep	pointer
;	O
const	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
ssize_t	long
increment	long
;	O
uint32_t	int
n	int
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve_unsliced	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
!=	O
CTF_K_ENUM	int
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTENUM	int
)	O
;	O
return	O
NULL	O
;	O
}	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
NULL	O
,	O
&	O
increment	long
)	O
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
ofp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
ep	pointer
=	O
(	O
const	O
ctf_enum_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
for	O
(	O
n	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
n	int
!=	O
0	int
;	O
n	int
--	O
,	O
ep	pointer
++	O
)	O
{	O
if	O
(	O
ep	pointer
->	O
cte_value	int
==	O
value	int
)	O
return	O
(	O
ctf_strptr	function
(	O
fp	pointer
,	O
ep	pointer
->	O
cte_name	int
)	O
)	O
;	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	struct
*	O
dmd	pointer
;	O
for	O
(	O
dmd	pointer
=	O
ctf_list_next	O
(	O
&	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_members	struct
)	O
;	O
dmd	pointer
!=	O
NULL	O
;	O
dmd	pointer
=	O
ctf_list_next	O
(	O
dmd	pointer
)	O
)	O
{	O
if	O
(	O
dmd	pointer
->	O
dmd_value	int
==	O
value	int
)	O
return	O
dmd	pointer
->	O
dmd_name	pointer
;	O
}	O
}	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOENUMNAM	int
)	O
;	O
return	O
NULL	O
;	O
}	O
int	O
ctf_enum_value	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
valp	pointer
)	O
{	O
ctf_file_t	struct
*	O
ofp	pointer
=	O
fp	pointer
;	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
const	O
ctf_enum_t	struct
*	O
ep	pointer
;	O
const	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
ssize_t	long
increment	long
;	O
uint32_t	int
n	int
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve_unsliced	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
!=	O
CTF_K_ENUM	int
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOTENUM	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
NULL	O
,	O
&	O
increment	long
)	O
;	O
ep	pointer
=	O
(	O
const	O
ctf_enum_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
ofp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
for	O
(	O
n	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
n	int
!=	O
0	int
;	O
n	int
--	O
,	O
ep	pointer
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
ctf_strptr	function
(	O
fp	pointer
,	O
ep	pointer
->	O
cte_name	int
)	O
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
valp	pointer
!=	O
NULL	O
)	O
*	O
valp	pointer
=	O
ep	pointer
->	O
cte_value	int
;	O
return	O
0	int
;	O
}	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	struct
*	O
dmd	pointer
;	O
for	O
(	O
dmd	pointer
=	O
ctf_list_next	O
(	O
&	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_members	struct
)	O
;	O
dmd	pointer
!=	O
NULL	O
;	O
dmd	pointer
=	O
ctf_list_next	O
(	O
dmd	pointer
)	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
dmd	pointer
->	O
dmd_name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
valp	pointer
!=	O
NULL	O
)	O
*	O
valp	pointer
=	O
dmd	pointer
->	O
dmd_value	int
;	O
return	O
0	int
;	O
}	O
}	O
}	O
(	O
void	O
)	O
ctf_set_errno	function
(	O
ofp	pointer
,	O
ECTF_NOENUMNAM	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
ctf_func_type_info	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
ctf_funcinfo_t	struct
*	O
fip	pointer
)	O
{	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
uint32_t	int
kind	int
;	O
const	O
uint32_t	int
*	O
args	pointer
;	O
const	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
ssize_t	long
size	long
,	O
increment	long
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
&	O
size	long
,	O
&	O
increment	long
)	O
;	O
kind	int
=	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
if	O
(	O
kind	int
!=	O
CTF_K_FUNCTION	int
)	O
return	O
(	O
ctf_set_errno	function
(	O
fp	pointer
,	O
ECTF_NOTFUNC	int
)	O
)	O
;	O
fip	pointer
->	O
ctc_return	long
=	O
tp	pointer
->	O
ctt_type	short
;	O
fip	pointer
->	O
ctc_flags	int
=	O
0	int
;	O
fip	pointer
->	O
ctc_argc	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
args	pointer
=	O
(	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
else	O
args	pointer
=	O
(	O
uint32_t	int
*	O
)	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_argv	pointer
;	O
if	O
(	O
fip	pointer
->	O
ctc_argc	int
!=	O
0	int
&&	O
args	pointer
[	O
fip	pointer
->	O
ctc_argc	int
-	O
1	int
]	O
==	O
0	int
)	O
{	O
fip	pointer
->	O
ctc_flags	int
|=	O
CTF_FUNC_VARARG	int
;	O
fip	pointer
->	O
ctc_argc	int
--	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_func_type_args	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
uint32_t	int
argc	int
,	O
ctf_id_t	long
*	O
argv	pointer
)	O
{	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
const	O
uint32_t	int
*	O
args	pointer
;	O
const	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
ssize_t	long
size	long
,	O
increment	long
;	O
ctf_funcinfo_t	struct
f	struct
;	O
if	O
(	O
ctf_func_type_info	function
(	O
fp	pointer
,	O
type	long
,	O
&	O
f	struct
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
&	O
size	long
,	O
&	O
increment	long
)	O
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
args	pointer
=	O
(	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
else	O
args	pointer
=	O
(	O
uint32_t	int
*	O
)	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_argv	pointer
;	O
for	O
(	O
argc	int
=	O
MIN	O
(	O
argc	int
,	O
f	struct
.	O
ctc_argc	int
)	O
;	O
argc	int
!=	O
0	int
;	O
argc	int
--	O
)	O
*	O
argv	pointer
++	O
=	O
*	O
args	pointer
++	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
ctf_type_rvisit	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
ctf_visit_f	function
*	O
func	pointer
,	O
void	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
unsigned	O
long	O
offset	long
,	O
int	O
depth	int
)	O
{	O
ctf_id_t	long
otype	long
=	O
type	long
;	O
const	O
ctf_type_t	struct
*	O
tp	pointer
;	O
const	O
ctf_dtdef_t	struct
*	O
dtd	pointer
;	O
ssize_t	long
size	long
,	O
increment	long
;	O
uint32_t	int
kind	int
,	O
n	int
;	O
int	O
rc	int
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	pointer
=	O
ctf_lookup_by_id	function
(	O
&	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
rc	int
=	O
func	pointer
(	O
name	pointer
,	O
otype	long
,	O
offset	long
,	O
depth	int
,	O
arg	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
kind	int
=	O
LCTF_INFO_KIND	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
if	O
(	O
kind	int
!=	O
CTF_K_STRUCT	int
&&	O
kind	int
!=	O
CTF_K_UNION	int
)	O
return	O
0	int
;	O
(	O
void	O
)	O
ctf_get_ctt_size	function
(	O
fp	pointer
,	O
tp	pointer
,	O
&	O
size	long
,	O
&	O
increment	long
)	O
;	O
if	O
(	O
(	O
dtd	pointer
=	O
ctf_dynamic_type	function
(	O
fp	pointer
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
size	long
<	O
CTF_LSTRUCT_THRESH	int
)	O
{	O
const	O
ctf_member_t	struct
*	O
mp	pointer
=	O
(	O
const	O
ctf_member_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
for	O
(	O
n	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
n	int
!=	O
0	int
;	O
n	int
--	O
,	O
mp	pointer
++	O
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
ctf_type_rvisit	function
(	O
fp	pointer
,	O
mp	pointer
->	O
ctm_type	short
,	O
func	pointer
,	O
arg	pointer
,	O
ctf_strptr	function
(	O
fp	pointer
,	O
mp	pointer
->	O
ctm_name	int
)	O
,	O
offset	long
+	O
mp	pointer
->	O
ctm_offset	short
,	O
depth	int
+	O
1	int
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
else	O
{	O
const	O
ctf_lmember_t	struct
*	O
lmp	pointer
=	O
(	O
const	O
ctf_lmember_t	struct
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	pointer
+	O
increment	long
)	O
;	O
for	O
(	O
n	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	pointer
,	O
tp	pointer
->	O
ctt_info	short
)	O
;	O
n	int
!=	O
0	int
;	O
n	int
--	O
,	O
lmp	pointer
++	O
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
ctf_type_rvisit	function
(	O
fp	pointer
,	O
lmp	pointer
->	O
ctlm_type	short
,	O
func	pointer
,	O
arg	pointer
,	O
ctf_strptr	function
(	O
fp	pointer
,	O
lmp	pointer
->	O
ctlm_name	int
)	O
,	O
offset	long
+	O
(	O
unsigned	O
long	O
)	O
CTF_LMEM_OFFSET	O
(	O
lmp	pointer
)	O
,	O
depth	int
+	O
1	int
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	struct
*	O
dmd	pointer
;	O
for	O
(	O
dmd	pointer
=	O
ctf_list_next	O
(	O
&	O
dtd	pointer
->	O
dtd_u	union
.	O
dtu_members	struct
)	O
;	O
dmd	pointer
!=	O
NULL	O
;	O
dmd	pointer
=	O
ctf_list_next	O
(	O
dmd	pointer
)	O
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
ctf_type_rvisit	function
(	O
fp	pointer
,	O
dmd	pointer
->	O
dmd_type	long
,	O
func	pointer
,	O
arg	pointer
,	O
dmd	pointer
->	O
dmd_name	pointer
,	O
dmd	pointer
->	O
dmd_offset	long
,	O
depth	int
+	O
1	int
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_type_visit	function
(	O
ctf_file_t	struct
*	O
fp	pointer
,	O
ctf_id_t	long
type	long
,	O
ctf_visit_f	function
*	O
func	pointer
,	O
void	O
*	O
arg	pointer
)	O
{	O
return	O
(	O
ctf_type_rvisit	function
(	O
fp	pointer
,	O
type	long
,	O
func	pointer
,	O
arg	pointer
,	O
""	pointer
,	O
0	int
,	O
0	int
)	O
)	O
;	O
}	O
