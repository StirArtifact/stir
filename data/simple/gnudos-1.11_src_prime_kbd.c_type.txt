unsigned	O
short	O
mask	array
[	O
]	O
=	O
{	O
192	int
,	O
224	int
,	O
240	int
}	O
;	O
static	O
struct	O
termios	struct
tty_attr_old	struct
;	O
int	O
initTerminal	function
(	O
)	O
{	O
struct	O
termios	struct
tty_attr	struct
;	O
tcgetattr	function
(	O
0	int
,	O
&	O
tty_attr_old	struct
)	O
;	O
tty_attr	struct
.	O
c_iflag	int
&=	O
~	O
(	O
IGNBRK	int
|	O
BRKINT	int
|	O
PARMRK	int
|	O
ISTRIP	int
|	O
INLCR	int
|	O
IGNCR	int
|	O
ICRNL	int
|	O
IXON	int
)	O
;	O
tty_attr	struct
.	O
c_oflag	int
&=	O
~	O
OPOST	int
;	O
tty_attr	struct
.	O
c_lflag	int
&=	O
~	O
(	O
ECHO	int
|	O
ECHONL	int
|	O
ICANON	int
|	O
ISIG	int
|	O
IEXTEN	int
)	O
;	O
tty_attr	struct
.	O
c_cflag	int
&=	O
~	O
(	O
CSIZE	int
|	O
PARENB	int
)	O
;	O
tty_attr	struct
.	O
c_cflag	int
|=	O
CS8	int
;	O
tty_attr	struct
.	O
c_cc	array
[	O
VMIN	int
]	O
=	O
1	int
;	O
tty_attr	struct
.	O
c_cc	array
[	O
VTIME	int
]	O
=	O
0	int
;	O
if	O
(	O
(	O
tcsetattr	function
(	O
0	int
,	O
TCSAFLUSH	int
,	O
&	O
tty_attr	struct
)	O
==	O
-	O
1	int
)	O
)	O
return	O
0	int
;	O
ALT	int
=	O
0	int
;	O
CTRL	int
=	O
0	int
;	O
SHIFT	int
=	O
0	int
;	O
return	O
1	int
;	O
}	O
void	O
restoreTerminal	function
(	O
)	O
{	O
tcsetattr	function
(	O
0	int
,	O
TCSAFLUSH	int
,	O
&	O
tty_attr_old	struct
)	O
;	O
}	O
int	O
getKey	function
(	O
)	O
{	O
static	O
int	O
bytes	int
=	O
0	int
;	O
static	O
char	O
*	O
sc	pointer
=	O
uc	array
;	O
int	O
c	int
;	O
if	O
(	O
bytes	int
)	O
{	O
c	int
=	O
*	O
sc	pointer
++	O
;	O
bytes	int
--	O
;	O
return	O
c	int
;	O
}	O
bytes	int
=	O
0	int
;	O
sc	pointer
=	O
uc	array
;	O
char	O
*	O
ch	pointer
=	O
uc	array
;	O
int	O
esc	int
=	O
0	int
;	O
c	int
=	O
getchar	function
(	O
)	O
;	O
int	O
extra	int
;	O
ALT	int
=	O
0	int
;	O
CTRL	int
=	O
0	int
;	O
SHIFT	int
=	O
0	int
;	O
if	O
(	O
(	O
c	int
&	O
mask	array
[	O
0	int
]	O
)	O
==	O
mask	array
[	O
0	int
]	O
)	O
bytes	int
++	O
;	O
if	O
(	O
(	O
c	int
&	O
mask	array
[	O
1	int
]	O
)	O
==	O
mask	array
[	O
1	int
]	O
)	O
bytes	int
++	O
;	O
if	O
(	O
(	O
c	int
&	O
mask	array
[	O
2	int
]	O
)	O
==	O
mask	array
[	O
2	int
]	O
)	O
bytes	int
++	O
;	O
if	O
(	O
bytes	int
)	O
{	O
int	O
b	int
=	O
bytes	int
;	O
*	O
ch	pointer
++	O
=	O
c	int
;	O
while	O
(	O
bytes	int
--	O
)	O
{	O
c	int
=	O
getchar	function
(	O
)	O
;	O
*	O
ch	pointer
++	O
=	O
c	int
;	O
}	O
bytes	int
=	O
b	int
;	O
c	int
=	O
*	O
sc	pointer
++	O
;	O
return	O
c	int
;	O
}	O
if	O
(	O
c	int
==	O
0x1b	int
)	O
{	O
esc	int
=	O
1	int
;	O
c	int
=	O
getchar	function
(	O
)	O
;	O
}	O
switchkey	O
:	O
switch	O
(	O
c	int
)	O
{	O
case	O
0x07	int
:	O
case	O
0x08	int
:	O
case	O
0x09	int
:	O
case	O
0x0a	int
:	O
case	O
0x0b	int
:	O
case	O
0x0c	int
:	O
case	O
0x0d	int
:	O
case	O
0x1b	int
:	O
break	O
;	O
case	O
0x5b	int
:	O
c	int
=	O
getchar	function
(	O
)	O
;	O
extra	int
=	O
1	int
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
0x31	int
:	O
c	int
=	O
getchar	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
0x3b	int
:	O
CTRL	int
=	O
1	int
;	O
c	int
=	O
getchar	function
(	O
)	O
;	O
c	int
=	O
0x5b	int
;	O
goto	O
switchkey	O
;	O
case	O
0x7e	int
:	O
c	int
=	O
HOME_KEY	int
;	O
break	O
;	O
default	O
:	O
c	int
=	O
'['	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
0x32	int
:	O
c	int
=	O
getchar	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
0x7e	int
:	O
c	int
=	O
INS_KEY	int
;	O
break	O
;	O
default	O
:	O
c	int
=	O
'['	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
0x33	int
:	O
c	int
=	O
getchar	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
0x3b	int
:	O
CTRL	int
=	O
1	int
;	O
c	int
=	O
getchar	function
(	O
)	O
;	O
goto	O
switchkey	O
;	O
case	O
0x7e	int
:	O
c	int
=	O
DEL_KEY	int
;	O
break	O
;	O
default	O
:	O
c	int
=	O
'['	O
;	O
break	O
;	O
}	O
extra	int
=	O
0	int
;	O
break	O
;	O
case	O
0x34	int
:	O
c	int
=	O
END_KEY	int
;	O
break	O
;	O
case	O
0x35	int
:	O
c	int
=	O
PGUP_KEY	int
;	O
break	O
;	O
case	O
0x36	int
:	O
c	int
=	O
PGDOWN_KEY	int
;	O
break	O
;	O
case	O
0x41	int
:	O
c	int
=	O
UP_KEY	int
;	O
extra	int
=	O
0	int
;	O
break	O
;	O
case	O
0x42	int
:	O
c	int
=	O
DOWN_KEY	int
;	O
extra	int
=	O
0	int
;	O
break	O
;	O
case	O
0x43	int
:	O
c	int
=	O
RIGHT_KEY	int
;	O
extra	int
=	O
0	int
;	O
break	O
;	O
case	O
0x44	int
:	O
c	int
=	O
LEFT_KEY	int
;	O
extra	int
=	O
0	int
;	O
break	O
;	O
case	O
0x46	int
:	O
c	int
=	O
END_KEY	int
;	O
extra	int
=	O
0	int
;	O
break	O
;	O
case	O
0x47	int
:	O
c	int
=	O
'5'	O
;	O
extra	int
=	O
0	int
;	O
break	O
;	O
case	O
0x48	int
:	O
c	int
=	O
HOME_KEY	int
;	O
extra	int
=	O
0	int
;	O
break	O
;	O
case	O
0x50	int
:	O
c	int
=	O
'['	O
;	O
extra	int
=	O
0	int
;	O
break	O
;	O
case	O
0x5b	int
:	O
c	int
=	O
getchar	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
0x33	int
:	O
c	int
=	O
DEL_KEY	int
;	O
break	O
;	O
default	O
:	O
c	int
=	O
'['	O
;	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
extra	int
)	O
{	O
while	O
(	O
getchar	function
(	O
)	O
!=	O
0x7e	int
)	O
;	O
}	O
esc	int
=	O
0	int
;	O
break	O
;	O
case	O
0x7f	int
:	O
c	int
=	O
'\b'	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
c	int
<	O
0x20	int
)	O
{	O
CTRL	int
=	O
1	int
;	O
c	int
+=	O
0x40	int
;	O
}	O
break	O
;	O
}	O
*	O
ch	pointer
++	O
=	O
c	int
;	O
*	O
ch	pointer
=	O
'\0'	O
;	O
if	O
(	O
esc	int
)	O
ALT	int
=	O
1	int
;	O
return	O
c	int
;	O
}	O
