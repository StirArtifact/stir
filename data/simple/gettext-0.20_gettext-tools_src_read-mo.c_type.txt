enum	O
mo_endianness	enum
{	O
MO_LITTLE_ENDIAN	int
,	O
MO_BIG_ENDIAN	int
}	O
;	O
struct	O
binary_mo_file	struct
{	O
const	O
char	O
*	O
filename	pointer
;	O
char	O
*	O
data	pointer
;	O
size_t	long
size	long
;	O
enum	O
mo_endianness	enum
endian	enum
;	O
}	O
;	O
static	O
void	O
read_binary_mo_file	function
(	O
struct	O
binary_mo_file	struct
*	O
bfp	pointer
,	O
FILE	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
alloc	long
=	O
0	int
;	O
size_t	long
size	long
=	O
0	int
;	O
size_t	long
count	long
;	O
while	O
(	O
!	O
feof	function
(	O
fp	pointer
)	O
)	O
{	O
const	O
size_t	long
increment	long
=	O
4096	int
;	O
if	O
(	O
size	long
+	O
increment	long
>	O
alloc	long
)	O
{	O
alloc	long
=	O
alloc	long
+	O
alloc	long
/	O
2	int
;	O
if	O
(	O
alloc	long
<	O
size	long
+	O
increment	long
)	O
alloc	long
=	O
size	long
+	O
increment	long
;	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
buf	pointer
,	O
alloc	long
)	O
;	O
}	O
count	long
=	O
fread	function
(	O
buf	pointer
+	O
size	long
,	O
1	int
,	O
increment	long
,	O
fp	pointer
)	O
;	O
if	O
(	O
count	long
==	O
0	int
)	O
{	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
else	O
size	long
+=	O
count	long
;	O
}	O
buf	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
buf	pointer
,	O
size	long
)	O
;	O
bfp	pointer
->	O
filename	pointer
=	O
filename	pointer
;	O
bfp	pointer
->	O
data	pointer
=	O
buf	pointer
;	O
bfp	pointer
->	O
size	long
=	O
size	long
;	O
}	O
static	O
nls_uint32	int
get_uint32	function
(	O
const	O
struct	O
binary_mo_file	struct
*	O
bfp	pointer
,	O
size_t	long
offset	int
)	O
{	O
nls_uint32	int
b0	int
,	O
b1	int
,	O
b2	int
,	O
b3	int
;	O
size_t	long
end	long
=	O
xsum	function
(	O
offset	int
,	O
4	int
)	O
;	O
if	O
(	O
size_overflow_p	O
(	O
end	long
)	O
||	O
end	long
>	O
bfp	pointer
->	O
size	long
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is truncated"	pointer
)	O
,	O
bfp	pointer
->	O
filename	pointer
)	O
;	O
b0	int
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
bfp	pointer
->	O
data	pointer
+	O
offset	int
+	O
0	int
)	O
;	O
b1	int
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
bfp	pointer
->	O
data	pointer
+	O
offset	int
+	O
1	int
)	O
;	O
b2	int
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
bfp	pointer
->	O
data	pointer
+	O
offset	int
+	O
2	int
)	O
;	O
b3	int
=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
bfp	pointer
->	O
data	pointer
+	O
offset	int
+	O
3	int
)	O
;	O
if	O
(	O
bfp	pointer
->	O
endian	enum
==	O
MO_LITTLE_ENDIAN	int
)	O
return	O
b0	int
|	O
(	O
b1	int
<<	O
8	int
)	O
|	O
(	O
b2	int
<<	O
16	int
)	O
|	O
(	O
b3	int
<<	O
24	int
)	O
;	O
else	O
return	O
(	O
b0	int
<<	O
24	int
)	O
|	O
(	O
b1	int
<<	O
16	int
)	O
|	O
(	O
b2	int
<<	O
8	int
)	O
|	O
b3	int
;	O
}	O
static	O
char	O
*	O
get_string	function
(	O
const	O
struct	O
binary_mo_file	struct
*	O
bfp	pointer
,	O
size_t	long
offset	int
,	O
size_t	long
*	O
lengthp	pointer
)	O
{	O
nls_uint32	int
s_length	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
offset	int
)	O
;	O
nls_uint32	int
s_offset	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
offset	int
+	O
4	int
)	O
;	O
size_t	long
s_end	long
=	O
xsum3	function
(	O
s_offset	int
,	O
s_length	int
,	O
1	int
)	O
;	O
if	O
(	O
size_overflow_p	O
(	O
s_end	long
)	O
||	O
s_end	long
>	O
bfp	pointer
->	O
size	long
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is truncated"	pointer
)	O
,	O
bfp	pointer
->	O
filename	pointer
)	O
;	O
if	O
(	O
bfp	pointer
->	O
data	pointer
[	O
s_offset	int
+	O
s_length	int
]	O
!=	O
'\0'	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" contains a not NUL terminated string"	pointer
)	O
,	O
bfp	pointer
->	O
filename	pointer
)	O
;	O
*	O
lengthp	pointer
=	O
s_length	int
+	O
1	int
;	O
return	O
bfp	pointer
->	O
data	pointer
+	O
s_offset	int
;	O
}	O
static	O
char	O
*	O
get_sysdep_string	function
(	O
const	O
struct	O
binary_mo_file	struct
*	O
bfp	pointer
,	O
size_t	long
offset	int
,	O
const	O
struct	O
mo_file_header	struct
*	O
header	pointer
,	O
size_t	long
*	O
lengthp	pointer
)	O
{	O
size_t	long
length	int
;	O
char	O
*	O
string	pointer
;	O
size_t	long
i	long
;	O
char	O
*	O
p	pointer
;	O
nls_uint32	int
s_offset	int
;	O
s_offset	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
offset	int
)	O
;	O
length	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
4	int
;	O
;	O
i	long
+=	O
8	int
)	O
{	O
nls_uint32	int
segsize	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
offset	int
+	O
i	long
)	O
;	O
nls_uint32	int
sysdepref	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
offset	int
+	O
i	long
+	O
4	int
)	O
;	O
nls_uint32	int
sysdep_segment_offset	int
;	O
nls_uint32	int
ss_length	int
;	O
nls_uint32	int
ss_offset	int
;	O
size_t	long
ss_end	long
;	O
size_t	long
s_end	long
;	O
size_t	long
n	long
;	O
s_end	long
=	O
xsum	function
(	O
s_offset	int
,	O
segsize	int
)	O
;	O
if	O
(	O
size_overflow_p	O
(	O
s_end	long
)	O
||	O
s_end	long
>	O
bfp	pointer
->	O
size	long
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is truncated"	pointer
)	O
,	O
bfp	pointer
->	O
filename	pointer
)	O
;	O
length	int
+=	O
segsize	int
;	O
s_offset	int
+=	O
segsize	int
;	O
if	O
(	O
sysdepref	int
==	O
SEGMENTS_END	O
)	O
{	O
if	O
(	O
!	O
(	O
segsize	int
>	O
0	int
&&	O
bfp	pointer
->	O
data	pointer
[	O
s_offset	int
-	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" contains a not NUL terminated system dependent string"	pointer
)	O
,	O
bfp	pointer
->	O
filename	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
sysdepref	int
>=	O
header	pointer
->	O
n_sysdep_segments	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is not in GNU .mo format"	pointer
)	O
,	O
bfp	pointer
->	O
filename	pointer
)	O
;	O
sysdep_segment_offset	int
=	O
header	pointer
->	O
sysdep_segments_offset	int
+	O
sysdepref	int
*	O
8	int
;	O
ss_length	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
sysdep_segment_offset	int
)	O
;	O
ss_offset	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
sysdep_segment_offset	int
+	O
4	int
)	O
;	O
ss_end	long
=	O
xsum	function
(	O
ss_offset	int
,	O
ss_length	int
)	O
;	O
if	O
(	O
size_overflow_p	O
(	O
ss_end	long
)	O
||	O
ss_end	long
>	O
bfp	pointer
->	O
size	long
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is truncated"	pointer
)	O
,	O
bfp	pointer
->	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
(	O
ss_length	int
>	O
0	int
&&	O
bfp	pointer
->	O
data	pointer
[	O
ss_end	long
-	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
{	O
char	O
location	array
[	O
30	int
]	O
;	O
sprintf	function
(	O
location	array
,	O
"sysdep_segment[%u]"	pointer
,	O
(	O
unsigned	O
int	O
)	O
sysdepref	int
)	O
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" contains a not NUL terminated string, at %s"	pointer
)	O
,	O
bfp	pointer
->	O
filename	pointer
,	O
location	array
)	O
;	O
}	O
n	long
=	O
strlen	function
(	O
bfp	pointer
->	O
data	pointer
+	O
ss_offset	int
)	O
;	O
length	int
+=	O
(	O
n	long
>	O
1	int
?	O
1	int
+	O
n	long
+	O
1	int
:	O
n	long
)	O
;	O
}	O
string	pointer
=	O
XNMALLOC	O
(	O
length	int
,	O
char	O
)	O
;	O
p	pointer
=	O
string	pointer
;	O
s_offset	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
offset	int
)	O
;	O
for	O
(	O
i	long
=	O
4	int
;	O
;	O
i	long
+=	O
8	int
)	O
{	O
nls_uint32	int
segsize	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
offset	int
+	O
i	long
)	O
;	O
nls_uint32	int
sysdepref	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
offset	int
+	O
i	long
+	O
4	int
)	O
;	O
nls_uint32	int
sysdep_segment_offset	int
;	O
nls_uint32	int
ss_length	int
;	O
nls_uint32	int
ss_offset	int
;	O
size_t	long
n	long
;	O
memcpy	function
(	O
p	pointer
,	O
bfp	pointer
->	O
data	pointer
+	O
s_offset	int
,	O
segsize	int
)	O
;	O
p	pointer
+=	O
segsize	int
;	O
s_offset	int
+=	O
segsize	int
;	O
if	O
(	O
sysdepref	int
==	O
SEGMENTS_END	O
)	O
break	O
;	O
if	O
(	O
sysdepref	int
>=	O
header	pointer
->	O
n_sysdep_segments	int
)	O
abort	function
(	O
)	O
;	O
sysdep_segment_offset	int
=	O
header	pointer
->	O
sysdep_segments_offset	int
+	O
sysdepref	int
*	O
8	int
;	O
ss_length	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
sysdep_segment_offset	int
)	O
;	O
ss_offset	int
=	O
get_uint32	function
(	O
bfp	pointer
,	O
sysdep_segment_offset	int
+	O
4	int
)	O
;	O
if	O
(	O
ss_offset	int
+	O
ss_length	int
>	O
bfp	pointer
->	O
size	long
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
!	O
(	O
ss_length	int
>	O
0	int
&&	O
bfp	pointer
->	O
data	pointer
[	O
ss_offset	int
+	O
ss_length	int
-	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
abort	function
(	O
)	O
;	O
n	long
=	O
strlen	function
(	O
bfp	pointer
->	O
data	pointer
+	O
ss_offset	int
)	O
;	O
if	O
(	O
n	long
>	O
1	int
)	O
*	O
p	pointer
++	O
=	O
'<'	O
;	O
memcpy	function
(	O
p	pointer
,	O
bfp	pointer
->	O
data	pointer
+	O
ss_offset	int
,	O
n	long
)	O
;	O
p	pointer
+=	O
n	long
;	O
if	O
(	O
n	long
>	O
1	int
)	O
*	O
p	pointer
++	O
=	O
'>'	O
;	O
}	O
if	O
(	O
p	pointer
!=	O
string	pointer
+	O
length	int
)	O
abort	function
(	O
)	O
;	O
*	O
lengthp	pointer
=	O
length	int
;	O
return	O
string	pointer
;	O
}	O
void	O
read_mo_file	function
(	O
message_list_ty	struct
*	O
mlp	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
struct	O
binary_mo_file	struct
bf	struct
;	O
struct	O
mo_file_header	struct
header	pointer
;	O
unsigned	O
int	O
i	long
;	O
static	O
lex_pos_ty	struct
pos	struct
=	O
{	O
__FILE__	O
,	O
__LINE__	O
}	O
;	O
if	O
(	O
strcmp	function
(	O
filename	pointer
,	O
"-"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
filename	pointer
,	O
"/dev/stdin"	pointer
)	O
==	O
0	int
)	O
{	O
fp	pointer
=	O
stdin	pointer
;	O
SET_BINARY	O
(	O
fileno	function
(	O
fp	pointer
)	O
)	O
;	O
}	O
else	O
{	O
fp	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while opening \"%s\" for reading"	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
read_binary_mo_file	function
(	O
&	O
bf	struct
,	O
fp	pointer
,	O
filename	pointer
)	O
;	O
bf	struct
.	O
endian	enum
=	O
MO_BIG_ENDIAN	int
;	O
header	pointer
.	O
magic	int
=	O
GET_HEADER_FIELD	O
(	O
magic	int
)	O
;	O
if	O
(	O
header	pointer
.	O
magic	int
!=	O
_MAGIC	int
)	O
{	O
bf	struct
.	O
endian	enum
=	O
MO_LITTLE_ENDIAN	int
;	O
header	pointer
.	O
magic	int
=	O
GET_HEADER_FIELD	O
(	O
magic	int
)	O
;	O
if	O
(	O
header	pointer
.	O
magic	int
!=	O
_MAGIC	int
)	O
{	O
unrecognised	O
:	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"file \"%s\" is not in GNU .mo format"	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
}	O
header	pointer
.	O
revision	int
=	O
GET_HEADER_FIELD	O
(	O
revision	int
)	O
;	O
switch	O
(	O
header	pointer
.	O
revision	int
>>	O
16	int
)	O
{	O
case	O
0	int
:	O
case	O
1	int
:	O
header	pointer
.	O
nstrings	int
=	O
GET_HEADER_FIELD	O
(	O
nstrings	int
)	O
;	O
header	pointer
.	O
orig_tab_offset	int
=	O
GET_HEADER_FIELD	O
(	O
orig_tab_offset	int
)	O
;	O
header	pointer
.	O
trans_tab_offset	int
=	O
GET_HEADER_FIELD	O
(	O
trans_tab_offset	int
)	O
;	O
header	pointer
.	O
hash_tab_size	int
=	O
GET_HEADER_FIELD	O
(	O
hash_tab_size	int
)	O
;	O
header	pointer
.	O
hash_tab_offset	int
=	O
GET_HEADER_FIELD	O
(	O
hash_tab_offset	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
header	pointer
.	O
nstrings	int
;	O
i	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
;	O
char	O
*	O
msgctxt	pointer
;	O
char	O
*	O
msgid	pointer
;	O
size_t	long
msgid_len	long
;	O
char	O
*	O
separator	pointer
;	O
char	O
*	O
msgstr	pointer
;	O
size_t	long
msgstr_len	long
;	O
msgid	pointer
=	O
get_string	function
(	O
&	O
bf	struct
,	O
header	pointer
.	O
orig_tab_offset	int
+	O
i	long
*	O
8	int
,	O
&	O
msgid_len	long
)	O
;	O
separator	pointer
=	O
strchr	function
(	O
msgid	pointer
,	O
MSGCTXT_SEPARATOR	char
)	O
;	O
if	O
(	O
separator	pointer
!=	O
NULL	O
)	O
{	O
*	O
separator	pointer
=	O
'\0'	O
;	O
msgctxt	pointer
=	O
msgid	pointer
;	O
msgid	pointer
=	O
separator	pointer
+	O
1	int
;	O
msgid_len	long
-=	O
msgid	pointer
-	O
msgctxt	pointer
;	O
}	O
else	O
msgctxt	pointer
=	O
NULL	O
;	O
msgstr	pointer
=	O
get_string	function
(	O
&	O
bf	struct
,	O
header	pointer
.	O
trans_tab_offset	int
+	O
i	long
*	O
8	int
,	O
&	O
msgstr_len	long
)	O
;	O
mp	pointer
=	O
message_alloc	function
(	O
msgctxt	pointer
,	O
msgid	pointer
,	O
(	O
strlen	function
(	O
msgid	pointer
)	O
+	O
1	int
<	O
msgid_len	long
?	O
msgid	pointer
+	O
strlen	function
(	O
msgid	pointer
)	O
+	O
1	int
:	O
NULL	O
)	O
,	O
msgstr	pointer
,	O
msgstr_len	long
,	O
&	O
pos	struct
)	O
;	O
message_list_append	function
(	O
mlp	pointer
,	O
mp	pointer
)	O
;	O
}	O
switch	O
(	O
header	pointer
.	O
revision	int
&	O
0xffff	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
default	O
:	O
header	pointer
.	O
n_sysdep_segments	int
=	O
GET_HEADER_FIELD	O
(	O
n_sysdep_segments	int
)	O
;	O
header	pointer
.	O
sysdep_segments_offset	int
=	O
GET_HEADER_FIELD	O
(	O
sysdep_segments_offset	int
)	O
;	O
header	pointer
.	O
n_sysdep_strings	int
=	O
GET_HEADER_FIELD	O
(	O
n_sysdep_strings	int
)	O
;	O
header	pointer
.	O
orig_sysdep_tab_offset	int
=	O
GET_HEADER_FIELD	O
(	O
orig_sysdep_tab_offset	int
)	O
;	O
header	pointer
.	O
trans_sysdep_tab_offset	int
=	O
GET_HEADER_FIELD	O
(	O
trans_sysdep_tab_offset	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
header	pointer
.	O
n_sysdep_strings	int
;	O
i	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
;	O
char	O
*	O
msgctxt	pointer
;	O
char	O
*	O
msgid	pointer
;	O
size_t	long
msgid_len	long
;	O
char	O
*	O
separator	pointer
;	O
char	O
*	O
msgstr	pointer
;	O
size_t	long
msgstr_len	long
;	O
nls_uint32	int
offset	int
;	O
size_t	long
f	long
;	O
offset	int
=	O
get_uint32	function
(	O
&	O
bf	struct
,	O
header	pointer
.	O
orig_sysdep_tab_offset	int
+	O
i	long
*	O
4	int
)	O
;	O
msgid	pointer
=	O
get_sysdep_string	function
(	O
&	O
bf	struct
,	O
offset	int
,	O
&	O
header	pointer
,	O
&	O
msgid_len	long
)	O
;	O
separator	pointer
=	O
strchr	function
(	O
msgid	pointer
,	O
MSGCTXT_SEPARATOR	char
)	O
;	O
if	O
(	O
separator	pointer
!=	O
NULL	O
)	O
{	O
*	O
separator	pointer
=	O
'\0'	O
;	O
msgctxt	pointer
=	O
msgid	pointer
;	O
msgid	pointer
=	O
separator	pointer
+	O
1	int
;	O
msgid_len	long
-=	O
msgid	pointer
-	O
msgctxt	pointer
;	O
}	O
else	O
msgctxt	pointer
=	O
NULL	O
;	O
offset	int
=	O
get_uint32	function
(	O
&	O
bf	struct
,	O
header	pointer
.	O
trans_sysdep_tab_offset	int
+	O
i	long
*	O
4	int
)	O
;	O
msgstr	pointer
=	O
get_sysdep_string	function
(	O
&	O
bf	struct
,	O
offset	int
,	O
&	O
header	pointer
,	O
&	O
msgstr_len	long
)	O
;	O
mp	pointer
=	O
message_alloc	function
(	O
msgctxt	pointer
,	O
msgid	pointer
,	O
(	O
strlen	function
(	O
msgid	pointer
)	O
+	O
1	int
<	O
msgid_len	long
?	O
msgid	pointer
+	O
strlen	function
(	O
msgid	pointer
)	O
+	O
1	int
:	O
NULL	O
)	O
,	O
msgstr	pointer
,	O
msgstr_len	long
,	O
&	O
pos	struct
)	O
;	O
for	O
(	O
f	long
=	O
format_c	int
;	O
;	O
f	long
=	O
format_objc	int
)	O
{	O
bool	bool
valid	bool
=	O
true	int
;	O
struct	O
formatstring_parser	struct
*	O
parser	pointer
=	O
formatstring_parsers	array
[	O
f	long
]	O
;	O
const	O
char	O
*	O
str_end	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
str_end	pointer
=	O
msgid	pointer
+	O
msgid_len	long
;	O
for	O
(	O
str	pointer
=	O
msgid	pointer
;	O
str	pointer
<	O
str_end	pointer
;	O
str	pointer
+=	O
strlen	function
(	O
str	pointer
)	O
+	O
1	int
)	O
{	O
char	O
*	O
invalid_reason	pointer
=	O
NULL	O
;	O
void	O
*	O
descr	pointer
=	O
parser	pointer
->	O
parse	pointer
(	O
str	pointer
,	O
false	int
,	O
NULL	O
,	O
&	O
invalid_reason	pointer
)	O
;	O
if	O
(	O
descr	pointer
!=	O
NULL	O
)	O
parser	pointer
->	O
free	function
(	O
descr	pointer
)	O
;	O
else	O
{	O
free	function
(	O
invalid_reason	pointer
)	O
;	O
valid	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
valid	bool
)	O
{	O
str_end	pointer
=	O
msgstr	pointer
+	O
msgstr_len	long
;	O
for	O
(	O
str	pointer
=	O
msgstr	pointer
;	O
str	pointer
<	O
str_end	pointer
;	O
str	pointer
+=	O
strlen	function
(	O
str	pointer
)	O
+	O
1	int
)	O
{	O
char	O
*	O
invalid_reason	pointer
=	O
NULL	O
;	O
void	O
*	O
descr	pointer
=	O
parser	pointer
->	O
parse	pointer
(	O
str	pointer
,	O
true	int
,	O
NULL	O
,	O
&	O
invalid_reason	pointer
)	O
;	O
if	O
(	O
descr	pointer
!=	O
NULL	O
)	O
parser	pointer
->	O
free	function
(	O
descr	pointer
)	O
;	O
else	O
{	O
free	function
(	O
invalid_reason	pointer
)	O
;	O
valid	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
valid	bool
)	O
{	O
mp	pointer
->	O
is_format	enum
[	O
f	long
]	O
=	O
yes	int
;	O
break	O
;	O
}	O
if	O
(	O
f	long
==	O
format_objc	int
)	O
break	O
;	O
}	O
message_list_append	function
(	O
mlp	pointer
,	O
mp	pointer
)	O
;	O
}	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
goto	O
unrecognised	O
;	O
}	O
if	O
(	O
fp	pointer
!=	O
stdin	pointer
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
