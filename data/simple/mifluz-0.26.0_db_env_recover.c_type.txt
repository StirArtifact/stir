static	O
const	O
char	O
copyright	array
[	O
]	O
=	O
"Copyright (c) 1996-2000\nSleepycat Software Inc.  All rights reserved.\n"	pointer
;	O
static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: env_recover.c,v 1.3 2000/06/28 16:47:01 loic Exp $"	pointer
;	O
static	O
float	O
__lsn_diff	function
__P	O
(	O
(	O
DB_LSN	struct
*	O
,	O
DB_LSN	struct
*	O
,	O
DB_LSN	struct
*	O
,	O
u_int32_t	int
,	O
int	O
)	O
)	O
;	O
static	O
int	O
__log_earliest	function
__P	O
(	O
(	O
DB_ENV	struct
*	O
,	O
int32_t	int
*	O
,	O
DB_LSN	struct
*	O
)	O
)	O
;	O
int	O
CDB___db_apprec	function
(	O
dbenv	pointer
,	O
flags	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
DBT	struct
data	pointer
;	O
DB_LSN	struct
ckp_lsn	struct
,	O
first_lsn	struct
,	O
last_lsn	struct
,	O
lowlsn	struct
,	O
lsn	struct
,	O
open_lsn	struct
;	O
DB_TXNREGION	struct
*	O
region	pointer
;	O
__txn_ckp_args	struct
*	O
ckp_args	pointer
;	O
time_t	long
now	long
,	O
tlow	long
;	O
float	O
nfiles	float
;	O
int32_t	int
low	int
;	O
int	O
is_thread	int
,	O
progress	int
,	O
ret	int
;	O
void	O
*	O
txninfo	pointer
;	O
COMPQUIET	O
(	O
nfiles	float
,	O
(	O
float	O
)	O
0	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_txnlist_init	function
(	O
dbenv	pointer
,	O
&	O
txninfo	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
is_thread	int
=	O
F_ISSET	O
(	O
dbenv	pointer
,	O
DB_ENV_THREAD	int
)	O
?	O
1	int
:	O
0	int
;	O
F_CLR	O
(	O
dbenv	pointer
,	O
DB_ENV_THREAD	int
)	O
;	O
F_SET	O
(	O
(	O
DB_LOG	struct
*	O
)	O
dbenv	pointer
->	O
lg_handle	pointer
,	O
DBLOG_RECOVER	int
)	O
;	O
ZERO_LSN	O
(	O
lowlsn	struct
)	O
;	O
if	O
(	O
dbenv	pointer
->	O
tx_timestamp	long
!=	O
0	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
__log_earliest	function
(	O
dbenv	pointer
,	O
&	O
low	int
,	O
&	O
lowlsn	struct
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
int32_t	int
)	O
dbenv	pointer
->	O
tx_timestamp	long
<	O
low	int
)	O
{	O
tlow	long
=	O
(	O
time_t	long
)	O
low	int
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s (%s, %s).\n"	pointer
,	O
"Invalid recovery timestamp specified"	pointer
,	O
ctime	function
(	O
&	O
tlow	long
)	O
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
}	O
if	O
(	O
dbenv	pointer
->	O
db_feedback	pointer
!=	O
NULL	O
&&	O
(	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
last_lsn	struct
,	O
&	O
data	pointer
,	O
DB_LAST	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
data	pointer
)	O
)	O
;	O
ckp_args	pointer
=	O
NULL	O
;	O
if	O
(	O
LF_ISSET	O
(	O
DB_RECOVER_FATAL	int
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
ckp_lsn	struct
,	O
&	O
data	pointer
,	O
DB_FIRST	int
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
ret	int
==	O
DB_NOTFOUND	O
)	O
ret	int
=	O
0	int
;	O
else	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"First log record not found"	pointer
)	O
;	O
goto	O
out	O
;	O
}	O
open_lsn	struct
=	O
ckp_lsn	struct
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
ckp_lsn	struct
,	O
&	O
data	pointer
,	O
DB_CHECKPOINT	int
)	O
)	O
!=	O
0	int
)	O
{	O
first	O
:	O
if	O
(	O
(	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
ckp_lsn	struct
,	O
&	O
data	pointer
,	O
DB_FIRST	int
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
ret	int
==	O
DB_NOTFOUND	O
)	O
ret	int
=	O
0	int
;	O
else	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"First log record not found"	pointer
)	O
;	O
goto	O
out	O
;	O
}	O
open_lsn	struct
=	O
ckp_lsn	struct
;	O
}	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB___txn_ckp_read	function
(	O
dbenv	pointer
,	O
data	pointer
.	O
data	pointer
,	O
&	O
ckp_args	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"Invalid checkpoint record at [%ld][%ld]\n"	pointer
,	O
(	O
u_long	long
)	O
ckp_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
ckp_lsn	struct
.	O
offset	long
)	O
;	O
goto	O
out	O
;	O
}	O
else	O
if	O
(	O
IS_ZERO_LSN	O
(	O
ckp_args	pointer
->	O
last_ckp	struct
)	O
||	O
(	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
ckp_args	pointer
->	O
last_ckp	struct
,	O
&	O
data	pointer
,	O
DB_SET	int
)	O
)	O
!=	O
0	int
)	O
goto	O
first	O
;	O
else	O
open_lsn	struct
=	O
ckp_args	pointer
->	O
last_ckp	struct
;	O
if	O
(	O
dbenv	pointer
->	O
db_feedback	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
last_lsn	struct
.	O
file	int
==	O
open_lsn	struct
.	O
file	int
)	O
nfiles	float
=	O
(	O
float	O
)	O
(	O
last_lsn	struct
.	O
offset	long
-	O
open_lsn	struct
.	O
offset	long
)	O
/	O
dbenv	pointer
->	O
lg_max	int
;	O
else	O
nfiles	float
=	O
(	O
float	O
)	O
(	O
last_lsn	struct
.	O
file	int
-	O
open_lsn	struct
.	O
file	int
)	O
+	O
(	O
float	O
)	O
(	O
dbenv	pointer
->	O
lg_max	int
-	O
open_lsn	struct
.	O
offset	long
+	O
last_lsn	struct
.	O
offset	long
)	O
/	O
dbenv	pointer
->	O
lg_max	int
;	O
if	O
(	O
nfiles	float
==	O
0	int
)	O
nfiles	float
=	O
(	O
float	O
)	O
0.001	int
;	O
}	O
lsn	struct
=	O
open_lsn	struct
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
dbenv	pointer
->	O
db_feedback	pointer
!=	O
NULL	O
)	O
{	O
progress	int
=	O
(	O
int	O
)	O
(	O
33	int
*	O
(	O
__lsn_diff	function
(	O
&	O
open_lsn	struct
,	O
&	O
last_lsn	struct
,	O
&	O
lsn	struct
,	O
dbenv	pointer
->	O
lg_max	int
,	O
1	int
)	O
/	O
nfiles	float
)	O
)	O
;	O
dbenv	pointer
->	O
db_feedback	pointer
(	O
dbenv	pointer
,	O
DB_RECOVER	int
,	O
progress	int
)	O
;	O
}	O
if	O
(	O
dbenv	pointer
->	O
tx_recover	pointer
!=	O
NULL	O
)	O
ret	int
=	O
dbenv	pointer
->	O
tx_recover	pointer
(	O
dbenv	pointer
,	O
&	O
data	pointer
,	O
&	O
lsn	struct
,	O
DB_TXN_OPENFILES	int
,	O
txninfo	pointer
)	O
;	O
else	O
ret	int
=	O
CDB___db_dispatch	function
(	O
dbenv	pointer
,	O
&	O
data	pointer
,	O
&	O
lsn	struct
,	O
DB_TXN_OPENFILES	int
,	O
txninfo	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
&&	O
ret	int
!=	O
DB_TXN_CKP	O
)	O
goto	O
msgerr	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
lsn	struct
,	O
&	O
data	pointer
,	O
DB_NEXT	int
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
ret	int
==	O
DB_NOTFOUND	O
)	O
break	O
;	O
goto	O
out	O
;	O
}	O
}	O
if	O
(	O
LF_ISSET	O
(	O
DB_RECOVER_FATAL	int
)	O
)	O
{	O
ZERO_LSN	O
(	O
first_lsn	struct
)	O
;	O
}	O
else	O
if	O
(	O
dbenv	pointer
->	O
tx_timestamp	long
!=	O
0	int
)	O
first_lsn	struct
=	O
lowlsn	struct
;	O
else	O
if	O
(	O
(	O
ret	int
=	O
CDB___log_findckp	function
(	O
dbenv	pointer
,	O
&	O
first_lsn	struct
)	O
)	O
==	O
DB_NOTFOUND	O
)	O
{	O
ret	int
=	O
0	int
;	O
goto	O
out	O
;	O
}	O
if	O
(	O
FLD_ISSET	O
(	O
dbenv	pointer
->	O
verbose	int
,	O
DB_VERB_RECOVERY	int
)	O
)	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"Recovery starting from [%lu][%lu]"	pointer
,	O
(	O
u_long	long
)	O
first_lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
first_lsn	struct
.	O
offset	long
)	O
;	O
for	O
(	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
lsn	struct
,	O
&	O
data	pointer
,	O
DB_LAST	int
)	O
;	O
ret	int
==	O
0	int
&&	O
CDB_log_compare	function
(	O
&	O
lsn	struct
,	O
&	O
first_lsn	struct
)	O
>	O
0	int
;	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
lsn	struct
,	O
&	O
data	pointer
,	O
DB_PREV	int
)	O
)	O
{	O
if	O
(	O
dbenv	pointer
->	O
db_feedback	pointer
!=	O
NULL	O
)	O
{	O
progress	int
=	O
34	int
+	O
(	O
int	O
)	O
(	O
33	int
*	O
(	O
__lsn_diff	function
(	O
&	O
open_lsn	struct
,	O
&	O
last_lsn	struct
,	O
&	O
lsn	struct
,	O
dbenv	pointer
->	O
lg_max	int
,	O
0	int
)	O
/	O
nfiles	float
)	O
)	O
;	O
dbenv	pointer
->	O
db_feedback	pointer
(	O
dbenv	pointer
,	O
DB_RECOVER	int
,	O
progress	int
)	O
;	O
}	O
if	O
(	O
dbenv	pointer
->	O
tx_recover	pointer
!=	O
NULL	O
)	O
ret	int
=	O
dbenv	pointer
->	O
tx_recover	pointer
(	O
dbenv	pointer
,	O
&	O
data	pointer
,	O
&	O
lsn	struct
,	O
DB_TXN_BACKWARD_ROLL	int
,	O
txninfo	pointer
)	O
;	O
else	O
ret	int
=	O
CDB___db_dispatch	function
(	O
dbenv	pointer
,	O
&	O
data	pointer
,	O
&	O
lsn	struct
,	O
DB_TXN_BACKWARD_ROLL	int
,	O
txninfo	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
if	O
(	O
ret	int
!=	O
DB_TXN_CKP	O
)	O
goto	O
msgerr	O
;	O
else	O
ret	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
ret	int
!=	O
0	int
&&	O
ret	int
!=	O
DB_NOTFOUND	O
)	O
goto	O
out	O
;	O
for	O
(	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
lsn	struct
,	O
&	O
data	pointer
,	O
DB_NEXT	int
)	O
;	O
ret	int
==	O
0	int
;	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
lsn	struct
,	O
&	O
data	pointer
,	O
DB_NEXT	int
)	O
)	O
{	O
if	O
(	O
dbenv	pointer
->	O
db_feedback	pointer
!=	O
NULL	O
)	O
{	O
progress	int
=	O
67	int
+	O
(	O
int	O
)	O
(	O
33	int
*	O
(	O
__lsn_diff	function
(	O
&	O
open_lsn	struct
,	O
&	O
last_lsn	struct
,	O
&	O
lsn	struct
,	O
dbenv	pointer
->	O
lg_max	int
,	O
1	int
)	O
/	O
nfiles	float
)	O
)	O
;	O
dbenv	pointer
->	O
db_feedback	pointer
(	O
dbenv	pointer
,	O
DB_RECOVER	int
,	O
progress	int
)	O
;	O
}	O
if	O
(	O
dbenv	pointer
->	O
tx_recover	pointer
!=	O
NULL	O
)	O
ret	int
=	O
dbenv	pointer
->	O
tx_recover	pointer
(	O
dbenv	pointer
,	O
&	O
data	pointer
,	O
&	O
lsn	struct
,	O
DB_TXN_FORWARD_ROLL	int
,	O
txninfo	pointer
)	O
;	O
else	O
ret	int
=	O
CDB___db_dispatch	function
(	O
dbenv	pointer
,	O
&	O
data	pointer
,	O
&	O
lsn	struct
,	O
DB_TXN_FORWARD_ROLL	int
,	O
txninfo	pointer
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
{	O
if	O
(	O
ret	int
!=	O
DB_TXN_CKP	O
)	O
goto	O
msgerr	O
;	O
else	O
ret	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
ret	int
!=	O
DB_NOTFOUND	O
)	O
goto	O
out	O
;	O
(	O
void	O
)	O
time	struct
(	O
&	O
now	long
)	O
;	O
region	pointer
=	O
(	O
(	O
DB_TXNMGR	struct
*	O
)	O
dbenv	pointer
->	O
tx_handle	pointer
)	O
->	O
reginfo	pointer
.	O
primary	int
;	O
region	pointer
->	O
last_ckp	struct
=	O
ckp_lsn	struct
;	O
region	pointer
->	O
time_ckp	long
=	O
(	O
u_int32_t	int
)	O
now	long
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_txn_checkpoint	function
(	O
dbenv	pointer
,	O
0	int
,	O
0	int
,	O
DB_FORCE	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
CDB___log_close_files	function
(	O
dbenv	pointer
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_txn_checkpoint	function
(	O
dbenv	pointer
,	O
0	int
,	O
0	int
,	O
DB_FORCE	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
region	pointer
->	O
last_txnid	int
=	O
TXN_MINIMUM	int
;	O
if	O
(	O
FLD_ISSET	O
(	O
dbenv	pointer
->	O
verbose	int
,	O
DB_VERB_RECOVERY	int
)	O
)	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"Recovery complete at %.24s"	pointer
,	O
ctime	function
(	O
&	O
now	long
)	O
)	O
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s %lx %s [%lu][%lu]"	pointer
,	O
"Maximum transaction ID"	pointer
,	O
(	O
(	O
DB_TXNHEAD	struct
*	O
)	O
txninfo	pointer
)	O
->	O
maxid	int
,	O
"Recovery checkpoint"	pointer
,	O
(	O
u_long	long
)	O
region	pointer
->	O
last_ckp	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
region	pointer
->	O
last_ckp	struct
.	O
offset	long
)	O
;	O
}	O
if	O
(	O
0	int
)	O
{	O
msgerr	O
:	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"Recovery function for LSN %lu %lu failed"	pointer
,	O
(	O
u_long	long
)	O
lsn	struct
.	O
file	int
,	O
(	O
u_long	long
)	O
lsn	struct
.	O
offset	long
)	O
;	O
}	O
out	O
:	O
if	O
(	O
is_thread	int
)	O
F_SET	O
(	O
dbenv	pointer
,	O
DB_ENV_THREAD	int
)	O
;	O
CDB___db_txnlist_end	function
(	O
dbenv	pointer
,	O
txninfo	pointer
)	O
;	O
if	O
(	O
ckp_args	pointer
!=	O
NULL	O
)	O
CDB___os_free	function
(	O
ckp_args	pointer
,	O
sizeof	O
(	O
*	O
ckp_args	pointer
)	O
)	O
;	O
F_CLR	O
(	O
(	O
DB_LOG	struct
*	O
)	O
dbenv	pointer
->	O
lg_handle	pointer
,	O
DBLOG_RECOVER	int
)	O
;	O
dbenv	pointer
->	O
tx_timestamp	long
=	O
0	int
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
static	O
float	O
__lsn_diff	function
(	O
low	int
,	O
high	pointer
,	O
current	pointer
,	O
max	int
,	O
is_forward	int
)	O
DB_LSN	struct
*	O
low	int
,	O
*	O
high	pointer
,	O
*	O
current	pointer
;	O
u_int32_t	int
max	int
;	O
int	O
is_forward	int
;	O
{	O
float	O
nf	float
;	O
if	O
(	O
is_forward	int
)	O
{	O
if	O
(	O
current	pointer
->	O
file	int
==	O
low	int
->	O
file	int
)	O
nf	float
=	O
(	O
float	O
)	O
(	O
current	pointer
->	O
offset	long
-	O
low	int
->	O
offset	long
)	O
/	O
max	int
;	O
else	O
if	O
(	O
current	pointer
->	O
offset	long
<	O
low	int
->	O
offset	long
)	O
nf	float
=	O
(	O
float	O
)	O
(	O
current	pointer
->	O
file	int
-	O
low	int
->	O
file	int
-	O
1	int
)	O
+	O
(	O
float	O
)	O
(	O
max	int
-	O
low	int
->	O
offset	long
+	O
current	pointer
->	O
offset	long
)	O
/	O
max	int
;	O
else	O
nf	float
=	O
(	O
float	O
)	O
(	O
current	pointer
->	O
file	int
-	O
low	int
->	O
file	int
)	O
+	O
(	O
float	O
)	O
(	O
current	pointer
->	O
offset	long
-	O
low	int
->	O
offset	long
)	O
/	O
max	int
;	O
}	O
else	O
{	O
if	O
(	O
current	pointer
->	O
file	int
==	O
high	pointer
->	O
file	int
)	O
nf	float
=	O
(	O
float	O
)	O
(	O
high	pointer
->	O
offset	long
-	O
current	pointer
->	O
offset	long
)	O
/	O
max	int
;	O
else	O
if	O
(	O
current	pointer
->	O
offset	long
>	O
high	pointer
->	O
offset	long
)	O
nf	float
=	O
(	O
float	O
)	O
(	O
high	pointer
->	O
file	int
-	O
current	pointer
->	O
file	int
-	O
1	int
)	O
+	O
(	O
float	O
)	O
(	O
max	int
-	O
current	pointer
->	O
offset	long
+	O
high	pointer
->	O
offset	long
)	O
/	O
max	int
;	O
else	O
nf	float
=	O
(	O
float	O
)	O
(	O
high	pointer
->	O
file	int
-	O
current	pointer
->	O
file	int
)	O
+	O
(	O
float	O
)	O
(	O
high	pointer
->	O
offset	long
-	O
current	pointer
->	O
offset	long
)	O
/	O
max	int
;	O
}	O
return	O
(	O
nf	float
)	O
;	O
}	O
static	O
int	O
__log_earliest	function
(	O
dbenv	pointer
,	O
lowtime	pointer
,	O
lowlsn	struct
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int32_t	int
*	O
lowtime	pointer
;	O
DB_LSN	struct
*	O
lowlsn	struct
;	O
{	O
DB_LSN	struct
first_lsn	struct
,	O
lsn	struct
;	O
DBT	struct
data	pointer
;	O
__txn_ckp_args	struct
*	O
ckpargs	pointer
;	O
u_int32_t	int
rectype	int
;	O
int	O
cmp	int
,	O
ret	int
;	O
memset	function
(	O
&	O
data	pointer
,	O
0	int
,	O
sizeof	O
(	O
data	pointer
)	O
)	O
;	O
for	O
(	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
first_lsn	struct
,	O
&	O
data	pointer
,	O
DB_FIRST	int
)	O
;	O
ret	int
==	O
0	int
;	O
ret	int
=	O
CDB_log_get	function
(	O
dbenv	pointer
,	O
&	O
lsn	struct
,	O
&	O
data	pointer
,	O
DB_NEXT	int
)	O
)	O
{	O
if	O
(	O
ret	int
!=	O
0	int
)	O
break	O
;	O
memcpy	function
(	O
&	O
rectype	int
,	O
data	pointer
.	O
data	pointer
,	O
sizeof	O
(	O
rectype	int
)	O
)	O
;	O
if	O
(	O
rectype	int
!=	O
DB_txn_ckp	int
)	O
continue	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___txn_ckp_read	function
(	O
dbenv	pointer
,	O
data	pointer
.	O
data	pointer
,	O
&	O
ckpargs	pointer
)	O
)	O
==	O
0	int
)	O
{	O
cmp	int
=	O
CDB_log_compare	function
(	O
&	O
ckpargs	pointer
->	O
ckp_lsn	struct
,	O
&	O
first_lsn	struct
)	O
;	O
*	O
lowlsn	struct
=	O
ckpargs	pointer
->	O
ckp_lsn	struct
;	O
*	O
lowtime	pointer
=	O
ckpargs	pointer
->	O
timestamp	int
;	O
CDB___os_free	function
(	O
ckpargs	pointer
,	O
0	int
)	O
;	O
if	O
(	O
cmp	int
>=	O
0	int
)	O
break	O
;	O
}	O
}	O
return	O
(	O
ret	int
)	O
;	O
}	O
