char	O
const	O
*	O
root_name	function
(	O
char	O
const	O
*	O
path	pointer
)	O
;	O
char	O
const	O
*	O
suff_name	function
(	O
char	O
const	O
*	O
path	pointer
)	O
;	O
int	O
common_prefix_suffix	function
(	O
struct	O
file_link	struct
const	O
*	O
flink_1	pointer
,	O
struct	O
file_link	struct
const	O
*	O
flink_2	pointer
)	O
;	O
extern	O
void	O
usage	function
(	O
void	O
)	O
;	O
extern	O
struct	O
file_link	struct
*	O
cw_dlink	pointer
;	O
char	O
const	O
*	O
root_name	function
(	O
char	O
const	O
*	O
file_name	pointer
)	O
{	O
static	O
char	O
file_name_buffer	array
[	O
BUFSIZ	int
]	O
;	O
char	O
const	O
*	O
dot	pointer
=	O
strrchr	function
(	O
file_name	pointer
,	O
'.'	O
)	O
;	O
if	O
(	O
dot	pointer
)	O
{	O
int	O
length	int
=	O
dot	pointer
-	O
file_name	pointer
;	O
strncpy	function
(	O
file_name_buffer	array
,	O
file_name	pointer
,	O
length	int
)	O
;	O
file_name_buffer	array
[	O
length	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
strcpy	function
(	O
file_name_buffer	array
,	O
file_name	pointer
)	O
;	O
return	O
file_name_buffer	array
;	O
}	O
char	O
const	O
*	O
suff_name	function
(	O
char	O
const	O
*	O
file_name	pointer
)	O
{	O
char	O
const	O
*	O
dot	pointer
=	O
strrchr	function
(	O
file_name	pointer
,	O
'.'	O
)	O
;	O
return	O
dot	pointer
?	O
dot	pointer
:	O
""	pointer
;	O
}	O
int	O
common_prefix_suffix	function
(	O
struct	O
file_link	struct
const	O
*	O
flink_1	pointer
,	O
struct	O
file_link	struct
const	O
*	O
flink_2	pointer
)	O
{	O
return	O
(	O
flink_1	pointer
->	O
fl_parent	O
==	O
flink_2	pointer
->	O
fl_parent	O
&&	O
strequ	O
(	O
suff_name	function
(	O
flink_1	pointer
->	O
fl_name	array
)	O
,	O
suff_name	function
(	O
flink_2	pointer
->	O
fl_name	array
)	O
)	O
)	O
;	O
}	O
void	O
print_filenames	function
(	O
struct	O
file_link	struct
*	O
*	O
flinkv	pointer
,	O
enum	O
separator_style	enum
separator_style	enum
)	O
{	O
struct	O
file_link	struct
const	O
*	O
arg	pointer
;	O
struct	O
file_link	struct
const	O
*	O
dlink	pointer
;	O
int	O
brace_is_open	int
=	O
0	int
;	O
char	O
*	O
file_name	pointer
=	O
alloca	O
(	O
sizeof	O
(	O
char	O
)	O
*	O
PATH_MAX	int
)	O
;	O
while	O
(	O
*	O
flinkv	pointer
)	O
{	O
arg	pointer
=	O
*	O
flinkv	pointer
++	O
;	O
if	O
(	O
*	O
flinkv	pointer
&&	O
(	O
separator_style	enum
==	O
ss_braces	int
)	O
&&	O
common_prefix_suffix	function
(	O
arg	pointer
,	O
*	O
flinkv	pointer
)	O
)	O
{	O
if	O
(	O
brace_is_open	int
)	O
printf	function
(	O
",%s"	pointer
,	O
root_name	function
(	O
arg	pointer
->	O
fl_name	array
)	O
)	O
;	O
else	O
{	O
dlink	pointer
=	O
arg	pointer
->	O
fl_parent	O
;	O
if	O
(	O
dlink	pointer
&&	O
dlink	pointer
!=	O
cw_dlink	pointer
)	O
{	O
maybe_relative_file_name	function
(	O
file_name	pointer
,	O
dlink	pointer
,	O
cw_dlink	pointer
)	O
;	O
fputs	function
(	O
file_name	pointer
,	O
stdout	pointer
)	O
;	O
putchar	function
(	O
'/'	O
)	O
;	O
}	O
printf	function
(	O
"{%s"	pointer
,	O
root_name	function
(	O
arg	pointer
->	O
fl_name	array
)	O
)	O
;	O
}	O
brace_is_open	int
=	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
brace_is_open	int
)	O
printf	function
(	O
",%s}%s"	pointer
,	O
root_name	function
(	O
arg	pointer
->	O
fl_name	array
)	O
,	O
suff_name	function
(	O
arg	pointer
->	O
fl_name	array
)	O
)	O
;	O
else	O
{	O
maybe_relative_file_name	function
(	O
file_name	pointer
,	O
arg	pointer
,	O
cw_dlink	pointer
)	O
;	O
fputs	function
(	O
file_name	pointer
,	O
stdout	pointer
)	O
;	O
}	O
brace_is_open	int
=	O
0	int
;	O
if	O
(	O
*	O
flinkv	pointer
)	O
{	O
if	O
(	O
separator_style	enum
==	O
ss_newline	int
)	O
putchar	function
(	O
'\n'	O
)	O
;	O
else	O
putchar	function
(	O
' '	O
)	O
;	O
}	O
}	O
}	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
enum	O
separator_style	enum
parse_separator_style	function
(	O
char	O
const	O
*	O
arg	pointer
)	O
{	O
MAYBE_RETURN_PREFIX_MATCH	O
(	O
arg	pointer
,	O
"braces"	pointer
,	O
ss_braces	int
)	O
;	O
MAYBE_RETURN_PREFIX_MATCH	O
(	O
arg	pointer
,	O
"space"	pointer
,	O
ss_space	int
)	O
;	O
MAYBE_RETURN_PREFIX_MATCH	O
(	O
arg	pointer
,	O
"newline"	pointer
,	O
ss_newline	int
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"invalid `--separator' style: `%s'"	pointer
)	O
,	O
arg	pointer
)	O
;	O
usage	function
(	O
)	O
;	O
return	O
ss_bogus	int
;	O
}	O
