static	O
const	O
int	O
_hpgl_line_type	array
[	O
PL_NUM_LINE_TYPES	int
]	O
=	O
{	O
HPGL_L_SOLID	O
,	O
HPGL_L_DOTTED	int
,	O
HPGL_L_DOTDASHED	int
,	O
HPGL_L_SHORTDASHED	int
,	O
HPGL_L_LONGDASHED	int
,	O
HPGL_L_DOTDOTDASHED	int
,	O
HPGL_L_DOTDOTDOTDASHED	O
}	O
;	O
static	O
const	O
int	O
_hpgl_join_style	array
[	O
]	O
=	O
{	O
HPGL_JOIN_MITER_BEVEL	int
,	O
HPGL_JOIN_ROUND	int
,	O
HPGL_JOIN_BEVEL	int
,	O
HPGL_JOIN_TRIANGULAR	int
}	O
;	O
static	O
const	O
int	O
_hpgl_cap_style	array
[	O
]	O
=	O
{	O
HPGL_CAP_BUTT	int
,	O
HPGL_CAP_ROUND	int
,	O
HPGL_CAP_PROJECT	int
,	O
HPGL_CAP_TRIANGULAR	int
}	O
;	O
void	O
_pl_h_set_attributes	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
double	O
desired_hpgl_pen_width	double
;	O
double	O
width	array
,	O
height	double
,	O
diagonal_p1_p2_distance	double
;	O
width	array
=	O
(	O
double	O
)	O
(	O
HPGL_SCALED_DEVICE_RIGHT	int
-	O
HPGL_SCALED_DEVICE_LEFT	int
)	O
;	O
height	double
=	O
(	O
double	O
)	O
(	O
HPGL_SCALED_DEVICE_TOP	int
-	O
HPGL_SCALED_DEVICE_BOTTOM	int
)	O
;	O
diagonal_p1_p2_distance	double
=	O
sqrt	function
(	O
width	array
*	O
width	array
+	O
height	double
*	O
height	double
)	O
;	O
desired_hpgl_pen_width	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
device_line_width	double
/	O
diagonal_p1_p2_distance	double
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
||	O
(	O
_plotter	pointer
->	O
hpgl_line_type	int
!=	O
_hpgl_line_type	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
]	O
)	O
||	O
(	O
_plotter	pointer
->	O
hpgl_pen_width	double
!=	O
desired_hpgl_pen_width	double
)	O
)	O
)	O
{	O
double	O
min_sing_val	pointer
,	O
max_sing_val	pointer
;	O
double	O
*	O
dashbuf	pointer
,	O
dash_cycle_length	double
;	O
int	O
i	int
,	O
num_dashes	int
;	O
_matrix_sing_vals	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
,	O
&	O
min_sing_val	pointer
,	O
&	O
max_sing_val	pointer
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
)	O
{	O
num_dashes	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
;	O
if	O
(	O
num_dashes	int
>	O
0	int
)	O
dashbuf	pointer
=	O
(	O
double	O
*	O
)	O
_pl_xmalloc	function
(	O
num_dashes	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
else	O
dashbuf	pointer
=	O
NULL	O
;	O
dash_cycle_length	double
=	O
0.0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_dashes	int
;	O
i	int
++	O
)	O
{	O
dashbuf	pointer
[	O
i	int
]	O
=	O
min_sing_val	pointer
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
i	int
]	O
;	O
dash_cycle_length	double
+=	O
dashbuf	pointer
[	O
i	int
]	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
==	O
PL_L_SOLID	int
)	O
{	O
num_dashes	int
=	O
0	int
;	O
dash_cycle_length	double
=	O
0.0	int
;	O
dashbuf	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
const	O
int	O
*	O
dash_array	pointer
;	O
double	O
scale	double
;	O
num_dashes	int
=	O
_pl_g_line_styles	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
]	O
.	O
dash_array_len	int
;	O
dashbuf	pointer
=	O
(	O
double	O
*	O
)	O
_pl_xmalloc	function
(	O
num_dashes	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
dash_array	pointer
=	O
_pl_g_line_styles	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
]	O
.	O
dash_array	pointer
;	O
scale	double
=	O
DMAX	O
(	O
MIN_DASH_UNIT	O
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
device_line_width	double
)	O
;	O
dash_cycle_length	double
=	O
0.0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_dashes	int
;	O
i	int
++	O
)	O
{	O
dashbuf	pointer
[	O
i	int
]	O
=	O
scale	double
*	O
dash_array	pointer
[	O
i	int
]	O
;	O
dash_cycle_length	double
+=	O
dashbuf	pointer
[	O
i	int
]	O
;	O
}	O
}	O
}	O
if	O
(	O
num_dashes	int
==	O
0	int
||	O
dash_cycle_length	double
==	O
0.0	int
)	O
{	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"LT;"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_line_type	int
=	O
HPGL_L_SOLID	O
;	O
}	O
else	O
{	O
bool	enum
odd_length	enum
=	O
(	O
num_dashes	int
&	O
1	int
?	O
true	int
:	O
false	int
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"UL%d"	pointer
,	O
SPECIAL_HPGL_LINE_TYPE	int
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_dashes	int
;	O
i	int
++	O
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
",%.3f"	pointer
,	O
100.0	int
*	O
(	O
odd_length	enum
?	O
0.5	int
:	O
1.0	int
)	O
*	O
dashbuf	pointer
[	O
i	int
]	O
/	O
dash_cycle_length	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
if	O
(	O
odd_length	enum
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_dashes	int
;	O
i	int
++	O
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
",%.3f"	pointer
,	O
100.0	int
*	O
(	O
odd_length	enum
?	O
0.5	int
:	O
1.0	int
)	O
*	O
dashbuf	pointer
[	O
i	int
]	O
/	O
dash_cycle_length	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
}	O
}	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
";"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
{	O
double	O
width	array
,	O
height	double
,	O
diagonal_p1_p2_distance	double
;	O
double	O
iter_interval	double
;	O
width	array
=	O
(	O
double	O
)	O
(	O
HPGL_SCALED_DEVICE_RIGHT	int
-	O
HPGL_SCALED_DEVICE_LEFT	int
)	O
;	O
height	double
=	O
(	O
double	O
)	O
(	O
HPGL_SCALED_DEVICE_TOP	int
-	O
HPGL_SCALED_DEVICE_BOTTOM	int
)	O
;	O
diagonal_p1_p2_distance	double
=	O
sqrt	function
(	O
width	array
*	O
width	array
+	O
height	double
*	O
height	double
)	O
;	O
iter_interval	double
=	O
100	int
*	O
(	O
odd_length	enum
?	O
2	int
:	O
1	int
)	O
*	O
(	O
dash_cycle_length	double
/	O
diagonal_p1_p2_distance	double
)	O
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"LT%d,%.4f;"	pointer
,	O
SPECIAL_HPGL_LINE_TYPE	int
,	O
iter_interval	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
)	O
_plotter	pointer
->	O
hpgl_line_type	int
=	O
SPECIAL_HPGL_LINE_TYPE	int
;	O
else	O
_plotter	pointer
->	O
hpgl_line_type	int
=	O
_hpgl_line_type	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
]	O
;	O
}	O
}	O
free	function
(	O
dashbuf	pointer
)	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
<	O
2	int
&&	O
(	O
(	O
_plotter	pointer
->	O
hpgl_line_type	int
!=	O
_hpgl_line_type	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
]	O
)	O
||	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
==	O
2	int
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
1	int
]	O
==	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
0	int
]	O
)	O
)	O
||	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
==	O
2	int
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
1	int
]	O
>	O
(	O
3	int
-	O
FUZZ	int
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
0	int
]	O
)	O
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
1	int
]	O
<	O
(	O
3	int
+	O
FUZZ	int
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
0	int
]	O
)	O
)	O
)	O
)	O
{	O
double	O
dash_cycle_length	double
,	O
iter_interval	double
;	O
double	O
min_sing_val	pointer
,	O
max_sing_val	pointer
;	O
int	O
line_type	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
==	O
2	int
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
1	int
]	O
==	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
0	int
]	O
)	O
)	O
{	O
_matrix_sing_vals	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
,	O
&	O
min_sing_val	pointer
,	O
&	O
max_sing_val	pointer
)	O
;	O
dash_cycle_length	double
=	O
min_sing_val	pointer
*	O
2.0	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
0	int
]	O
;	O
line_type	int
=	O
PL_L_SHORTDASHED	int
;	O
}	O
else	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_in_effect	enum
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array_len	int
==	O
2	int
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
1	int
]	O
>	O
(	O
3	int
-	O
FUZZ	int
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
0	int
]	O
)	O
&&	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
1	int
]	O
<	O
(	O
3	int
+	O
FUZZ	int
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
0	int
]	O
)	O
)	O
{	O
_matrix_sing_vals	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
transform	struct
.	O
m	array
,	O
&	O
min_sing_val	pointer
,	O
&	O
max_sing_val	pointer
)	O
;	O
dash_cycle_length	double
=	O
min_sing_val	pointer
*	O
2.0	int
*	O
4.0	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
dash_array	pointer
[	O
0	int
]	O
;	O
line_type	int
=	O
PL_L_DOTTED	int
;	O
}	O
else	O
{	O
const	O
int	O
*	O
dash_array	pointer
;	O
int	O
i	int
,	O
num_dashes	int
;	O
double	O
scale	double
;	O
dash_array	pointer
=	O
_pl_g_line_styles	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
]	O
.	O
dash_array	pointer
;	O
num_dashes	int
=	O
_pl_g_line_styles	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
]	O
.	O
dash_array_len	int
;	O
scale	double
=	O
DMAX	O
(	O
MIN_DASH_UNIT	O
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
device_line_width	double
)	O
;	O
if	O
(	O
scale	double
<	O
1.0	int
)	O
scale	double
=	O
1.0	int
;	O
dash_cycle_length	double
=	O
0.0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_dashes	int
;	O
i	int
++	O
)	O
dash_cycle_length	double
+=	O
scale	double
*	O
dash_array	pointer
[	O
i	int
]	O
;	O
line_type	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
;	O
}	O
{	O
double	O
width	array
,	O
height	double
,	O
diagonal_p1_p2_distance	double
;	O
width	array
=	O
(	O
double	O
)	O
(	O
HPGL_SCALED_DEVICE_RIGHT	int
-	O
HPGL_SCALED_DEVICE_LEFT	int
)	O
;	O
height	double
=	O
(	O
double	O
)	O
(	O
HPGL_SCALED_DEVICE_TOP	int
-	O
HPGL_SCALED_DEVICE_BOTTOM	int
)	O
;	O
diagonal_p1_p2_distance	double
=	O
sqrt	function
(	O
width	array
*	O
width	array
+	O
height	double
*	O
height	double
)	O
;	O
iter_interval	double
=	O
100	int
*	O
(	O
dash_cycle_length	double
/	O
diagonal_p1_p2_distance	double
)	O
;	O
}	O
switch	O
(	O
line_type	int
)	O
{	O
case	O
PL_L_SOLID	int
:	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"LT;"	pointer
)	O
;	O
break	O
;	O
case	O
PL_L_DOTTED	int
:	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"LT%d,%.4f;"	pointer
,	O
HPGL_L_SHORTDASHED	int
,	O
0.5	int
*	O
iter_interval	double
)	O
;	O
break	O
;	O
case	O
PL_L_DOTDOTDOTDASHED	int
:	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"LT%d,%.4f;"	pointer
,	O
HPGL_L_DOTDOTDASHED	int
,	O
iter_interval	double
)	O
;	O
break	O
;	O
default	O
:	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"LT%d,%.4f;"	pointer
,	O
_hpgl_line_type	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
]	O
,	O
iter_interval	double
)	O
;	O
}	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_line_type	int
=	O
_hpgl_line_type	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_type	int
]	O
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
)	O
{	O
if	O
(	O
(	O
_plotter	pointer
->	O
hpgl_cap_style	int
!=	O
_hpgl_cap_style	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
]	O
)	O
||	O
(	O
_plotter	pointer
->	O
hpgl_join_style	int
!=	O
_hpgl_join_style	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
]	O
)	O
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"LA1,%d,2,%d;"	pointer
,	O
_hpgl_cap_style	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
]	O
,	O
_hpgl_join_style	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
]	O
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_cap_style	int
=	O
_hpgl_cap_style	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
cap_type	int
]	O
;	O
_plotter	pointer
->	O
hpgl_join_style	int
=	O
_hpgl_join_style	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
join_type	int
]	O
;	O
}	O
}	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
&&	O
_plotter	pointer
->	O
hpgl_miter_limit	double
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
miter_limit	double
)	O
{	O
double	O
new_limit	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
miter_limit	double
;	O
int	O
new_limit_integer	int
;	O
if	O
(	O
new_limit	double
>	O
32767.0	int
)	O
new_limit	double
=	O
32767.0	int
;	O
else	O
if	O
(	O
new_limit	double
<	O
1.0	int
)	O
new_limit	double
=	O
1.0	int
;	O
new_limit_integer	int
=	O
(	O
int	O
)	O
new_limit	double
;	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"LA3,%d;"	pointer
,	O
new_limit_integer	int
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_miter_limit	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
miter_limit	double
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
==	O
2	int
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
hpgl_pen_width	double
!=	O
desired_hpgl_pen_width	double
)	O
{	O
sprintf	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"PW%.4f;"	pointer
,	O
100.0	int
*	O
desired_hpgl_pen_width	double
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_pen_width	double
=	O
desired_hpgl_pen_width	double
;	O
}	O
}	O
}	O
