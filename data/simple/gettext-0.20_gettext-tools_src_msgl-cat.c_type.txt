int	O
more_than	int
;	O
int	O
less_than	int
;	O
bool	bool
use_first	bool
;	O
bool	bool
msgcomm_mode	bool
=	O
false	int
;	O
bool	bool
omit_header	bool
=	O
false	int
;	O
static	O
bool	bool
is_message_selected	function
(	O
const	O
message_ty	struct
*	O
tmp	pointer
)	O
{	O
int	O
used	int
=	O
(	O
tmp	pointer
->	O
used	int
>=	O
0	int
?	O
tmp	pointer
->	O
used	int
:	O
-	O
tmp	pointer
->	O
used	int
)	O
;	O
return	O
(	O
is_header	O
(	O
tmp	pointer
)	O
?	O
!	O
omit_header	bool
:	O
(	O
used	int
>	O
more_than	int
&&	O
used	int
<	O
less_than	int
)	O
)	O
;	O
}	O
static	O
bool	bool
is_message_needed	function
(	O
const	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
if	O
(	O
!	O
msgcomm_mode	bool
&&	O
(	O
(	O
!	O
is_header	O
(	O
mp	pointer
)	O
&&	O
mp	pointer
->	O
is_fuzzy	bool
)	O
||	O
mp	pointer
->	O
msgstr	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
)	O
return	O
mp	pointer
->	O
tmp	pointer
->	O
used	int
<	O
0	int
&&	O
is_message_selected	function
(	O
mp	pointer
->	O
tmp	pointer
)	O
;	O
else	O
return	O
is_message_selected	function
(	O
mp	pointer
->	O
tmp	pointer
)	O
;	O
}	O
static	O
bool	bool
is_message_first_needed	function
(	O
const	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
if	O
(	O
mp	pointer
->	O
tmp	pointer
->	O
obsolete	bool
&&	O
is_message_needed	function
(	O
mp	pointer
)	O
)	O
{	O
mp	pointer
->	O
tmp	pointer
->	O
obsolete	bool
=	O
false	int
;	O
return	O
true	int
;	O
}	O
else	O
return	O
false	int
;	O
}	O
msgdomain_list_ty	struct
*	O
catenate_msgdomain_list	function
(	O
string_list_ty	struct
*	O
file_list	pointer
,	O
catalog_input_format_ty	pointer
input_syntax	pointer
,	O
const	O
char	O
*	O
to_code	pointer
)	O
{	O
const	O
char	O
*	O
const	O
*	O
files	pointer
=	O
file_list	pointer
->	O
item	pointer
;	O
size_t	long
nfiles	long
=	O
file_list	pointer
->	O
nitems	long
;	O
msgdomain_list_ty	struct
*	O
*	O
mdlps	pointer
;	O
const	O
char	O
*	O
*	O
*	O
canon_charsets	pointer
;	O
const	O
char	O
*	O
*	O
*	O
identifications	pointer
;	O
msgdomain_list_ty	struct
*	O
total_mdlp	pointer
;	O
const	O
char	O
*	O
canon_to_code	pointer
;	O
size_t	long
n	long
,	O
j	long
;	O
mdlps	pointer
=	O
XNMALLOC	O
(	O
nfiles	long
,	O
msgdomain_list_ty	struct
*	O
)	O
;	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<	O
nfiles	long
;	O
n	long
++	O
)	O
mdlps	pointer
[	O
n	long
]	O
=	O
read_catalog_file	function
(	O
files	pointer
[	O
n	long
]	O
,	O
input_syntax	pointer
)	O
;	O
canon_charsets	pointer
=	O
XNMALLOC	O
(	O
nfiles	long
,	O
const	O
char	O
*	O
*	O
)	O
;	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<	O
nfiles	long
;	O
n	long
++	O
)	O
{	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
=	O
mdlps	pointer
[	O
n	long
]	O
;	O
size_t	long
k	long
;	O
canon_charsets	pointer
[	O
n	long
]	O
=	O
XNMALLOC	O
(	O
mdlp	pointer
->	O
nitems	long
,	O
const	O
char	O
*	O
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
const	O
char	O
*	O
canon_from_code	pointer
=	O
NULL	O
;	O
if	O
(	O
mlp	pointer
->	O
nitems	long
>	O
0	int
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
&&	O
!	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
obsolete	bool
)	O
{	O
const	O
char	O
*	O
header	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
msgstr	pointer
;	O
if	O
(	O
header	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
charsetstr	pointer
=	O
c_strstr	function
(	O
header	pointer
,	O
"charset="	pointer
)	O
;	O
if	O
(	O
charsetstr	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
len	long
;	O
char	O
*	O
charset	pointer
;	O
const	O
char	O
*	O
canon_charset	pointer
;	O
charsetstr	pointer
+=	O
strlen	function
(	O
"charset="	pointer
)	O
;	O
len	long
=	O
strcspn	function
(	O
charsetstr	pointer
,	O
" \t\n"	pointer
)	O
;	O
charset	pointer
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
charset	pointer
,	O
charsetstr	pointer
,	O
len	long
)	O
;	O
charset	pointer
[	O
len	long
]	O
=	O
'\0'	O
;	O
canon_charset	pointer
=	O
po_charset_canonicalize	function
(	O
charset	pointer
)	O
;	O
if	O
(	O
canon_charset	pointer
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
filename	pointer
=	O
files	pointer
[	O
n	long
]	O
;	O
size_t	long
filenamelen	long
=	O
strlen	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
filenamelen	long
>=	O
4	int
&&	O
memcmp	function
(	O
filename	pointer
+	O
filenamelen	long
-	O
4	int
,	O
".pot"	pointer
,	O
4	int
)	O
==	O
0	int
&&	O
strcmp	function
(	O
charset	pointer
,	O
"CHARSET"	pointer
)	O
==	O
0	int
)	O
canon_charset	pointer
=	O
po_charset_ascii	pointer
;	O
else	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"present charset \"%s\" is not a portable encoding name"	pointer
)	O
,	O
charset	pointer
)	O
;	O
}	O
freea	function
(	O
charset	pointer
)	O
;	O
if	O
(	O
canon_from_code	pointer
==	O
NULL	O
)	O
canon_from_code	pointer
=	O
canon_charset	pointer
;	O
else	O
if	O
(	O
canon_from_code	pointer
!=	O
canon_charset	pointer
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"two different charsets \"%s\" and \"%s\" in input file"	pointer
)	O
,	O
canon_from_code	pointer
,	O
canon_charset	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
canon_from_code	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
is_ascii_message_list	function
(	O
mlp	pointer
)	O
)	O
canon_from_code	pointer
=	O
po_charset_ascii	pointer
;	O
else	O
if	O
(	O
mdlp	pointer
->	O
encoding	pointer
!=	O
NULL	O
)	O
canon_from_code	pointer
=	O
mdlp	pointer
->	O
encoding	pointer
;	O
else	O
{	O
if	O
(	O
k	long
==	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"input file '%s' doesn't contain a header entry with a charset specification"	pointer
)	O
,	O
files	pointer
[	O
n	long
]	O
)	O
;	O
else	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"domain \"%s\" in input file '%s' doesn't contain a header entry with a charset specification"	pointer
)	O
,	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
domain	pointer
,	O
files	pointer
[	O
n	long
]	O
)	O
;	O
}	O
}	O
}	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
=	O
canon_from_code	pointer
;	O
}	O
}	O
identifications	pointer
=	O
XNMALLOC	O
(	O
nfiles	long
,	O
const	O
char	O
*	O
*	O
)	O
;	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<	O
nfiles	long
;	O
n	long
++	O
)	O
{	O
const	O
char	O
*	O
filename	pointer
=	O
basename	function
(	O
files	pointer
[	O
n	long
]	O
)	O
;	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
=	O
mdlps	pointer
[	O
n	long
]	O
;	O
size_t	long
k	long
;	O
identifications	pointer
[	O
n	long
]	O
=	O
XNMALLOC	O
(	O
mdlp	pointer
->	O
nitems	long
,	O
const	O
char	O
*	O
)	O
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
const	O
char	O
*	O
domain	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
domain	pointer
;	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
char	O
*	O
project_id	pointer
=	O
NULL	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
if	O
(	O
is_header	O
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
&&	O
!	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
obsolete	bool
)	O
{	O
const	O
char	O
*	O
header	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
->	O
msgstr	pointer
;	O
if	O
(	O
header	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
cp	pointer
=	O
c_strstr	function
(	O
header	pointer
,	O
"Project-Id-Version:"	pointer
)	O
;	O
if	O
(	O
cp	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
endp	pointer
;	O
cp	pointer
+=	O
sizeof	O
(	O
"Project-Id-Version:"	pointer
)	O
-	O
1	int
;	O
endp	pointer
=	O
strchr	function
(	O
cp	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
endp	pointer
==	O
NULL	O
)	O
endp	pointer
=	O
cp	pointer
+	O
strlen	function
(	O
cp	pointer
)	O
;	O
while	O
(	O
cp	pointer
<	O
endp	pointer
&&	O
*	O
cp	pointer
==	O
' '	O
)	O
cp	pointer
++	O
;	O
if	O
(	O
cp	pointer
<	O
endp	pointer
)	O
{	O
size_t	long
len	long
=	O
endp	pointer
-	O
cp	pointer
;	O
project_id	pointer
=	O
XNMALLOC	O
(	O
len	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
project_id	pointer
,	O
cp	pointer
,	O
len	long
)	O
;	O
project_id	pointer
[	O
len	long
]	O
=	O
'\0'	O
;	O
}	O
break	O
;	O
}	O
}	O
}	O
identifications	pointer
[	O
n	long
]	O
[	O
k	long
]	O
=	O
(	O
project_id	pointer
!=	O
NULL	O
?	O
(	O
k	long
>	O
0	int
?	O
xasprintf	function
(	O
"%s:%s (%s)"	pointer
,	O
filename	pointer
,	O
domain	pointer
,	O
project_id	pointer
)	O
:	O
xasprintf	function
(	O
"%s (%s)"	pointer
,	O
filename	pointer
,	O
project_id	pointer
)	O
)	O
:	O
(	O
k	long
>	O
0	int
?	O
xasprintf	function
(	O
"%s:%s"	pointer
,	O
filename	pointer
,	O
domain	pointer
)	O
:	O
xasprintf	function
(	O
"%s"	pointer
,	O
filename	pointer
)	O
)	O
)	O
;	O
}	O
}	O
total_mdlp	pointer
=	O
msgdomain_list_alloc	function
(	O
true	int
)	O
;	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<	O
nfiles	long
;	O
n	long
++	O
)	O
{	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
=	O
mdlps	pointer
[	O
n	long
]	O
;	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
const	O
char	O
*	O
domain	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
domain	pointer
;	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
message_list_ty	struct
*	O
total_mlp	pointer
;	O
total_mlp	pointer
=	O
msgdomain_list_sublist	function
(	O
total_mdlp	pointer
,	O
domain	pointer
,	O
true	int
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
message_ty	struct
*	O
tmp	pointer
;	O
size_t	long
i	long
;	O
tmp	pointer
=	O
message_list_search	function
(	O
total_mlp	pointer
,	O
mp	pointer
->	O
msgctxt	pointer
,	O
mp	pointer
->	O
msgid	pointer
)	O
;	O
if	O
(	O
tmp	pointer
==	O
NULL	O
)	O
{	O
tmp	pointer
=	O
message_alloc	function
(	O
mp	pointer
->	O
msgctxt	pointer
,	O
mp	pointer
->	O
msgid	pointer
,	O
mp	pointer
->	O
msgid_plural	pointer
,	O
NULL	O
,	O
0	int
,	O
&	O
mp	pointer
->	O
pos	struct
)	O
;	O
tmp	pointer
->	O
is_fuzzy	bool
=	O
true	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
tmp	pointer
->	O
is_format	enum
[	O
i	long
]	O
=	O
undecided	int
;	O
tmp	pointer
->	O
range	struct
.	O
min	int
=	O
-	O
INT_MAX	O
;	O
tmp	pointer
->	O
range	struct
.	O
max	int
=	O
-	O
INT_MAX	O
;	O
tmp	pointer
->	O
do_wrap	enum
=	O
yes	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
tmp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
=	O
undecided	int
;	O
tmp	pointer
->	O
obsolete	bool
=	O
true	int
;	O
tmp	pointer
->	O
alternative_count	int
=	O
0	int
;	O
tmp	pointer
->	O
alternative	pointer
=	O
NULL	O
;	O
message_list_append	function
(	O
total_mlp	pointer
,	O
tmp	pointer
)	O
;	O
}	O
if	O
(	O
!	O
msgcomm_mode	bool
&&	O
(	O
(	O
!	O
is_header	O
(	O
mp	pointer
)	O
&&	O
mp	pointer
->	O
is_fuzzy	bool
)	O
||	O
mp	pointer
->	O
msgstr	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
)	O
{	O
if	O
(	O
tmp	pointer
->	O
used	int
<=	O
0	int
)	O
tmp	pointer
->	O
used	int
--	O
;	O
}	O
else	O
{	O
if	O
(	O
tmp	pointer
->	O
used	int
<	O
0	int
)	O
tmp	pointer
->	O
used	int
=	O
0	int
;	O
tmp	pointer
->	O
used	int
++	O
;	O
}	O
mp	pointer
->	O
tmp	pointer
=	O
tmp	pointer
;	O
}	O
}	O
}	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<	O
nfiles	long
;	O
n	long
++	O
)	O
{	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
=	O
mdlps	pointer
[	O
n	long
]	O
;	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
message_list_remove_if_not	function
(	O
mlp	pointer
,	O
use_first	bool
?	O
is_message_first_needed	function
:	O
is_message_needed	function
)	O
;	O
if	O
(	O
mlp	pointer
->	O
nitems	long
==	O
0	int
)	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
=	O
NULL	O
;	O
}	O
}	O
{	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
total_mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
total_mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
message_list_remove_if_not	function
(	O
mlp	pointer
,	O
is_message_selected	function
)	O
;	O
}	O
}	O
if	O
(	O
nfiles	long
>	O
0	int
)	O
{	O
bool	bool
all_same_encoding	bool
=	O
true	int
;	O
for	O
(	O
n	long
=	O
1	int
;	O
n	long
<	O
nfiles	long
;	O
n	long
++	O
)	O
if	O
(	O
mdlps	pointer
[	O
n	long
]	O
->	O
encoding	pointer
!=	O
mdlps	pointer
[	O
0	int
]	O
->	O
encoding	pointer
)	O
{	O
all_same_encoding	bool
=	O
false	int
;	O
break	O
;	O
}	O
if	O
(	O
all_same_encoding	bool
)	O
total_mdlp	pointer
->	O
encoding	pointer
=	O
mdlps	pointer
[	O
0	int
]	O
->	O
encoding	pointer
;	O
}	O
if	O
(	O
to_code	pointer
!=	O
NULL	O
)	O
{	O
canon_to_code	pointer
=	O
po_charset_canonicalize	function
(	O
to_code	pointer
)	O
;	O
if	O
(	O
canon_to_code	pointer
==	O
NULL	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"target charset \"%s\" is not a portable encoding name."	pointer
)	O
,	O
to_code	pointer
)	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
first	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
second	pointer
=	O
NULL	O
;	O
bool	bool
with_ASCII	bool
=	O
false	int
;	O
bool	bool
with_UTF8	bool
=	O
false	int
;	O
bool	bool
all_ASCII_compatible	bool
=	O
true	int
;	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<	O
nfiles	long
;	O
n	long
++	O
)	O
{	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
=	O
mdlps	pointer
[	O
n	long
]	O
;	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
if	O
(	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
==	O
po_charset_ascii	pointer
)	O
with_ASCII	bool
=	O
true	int
;	O
else	O
{	O
if	O
(	O
first	pointer
==	O
NULL	O
)	O
first	pointer
=	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
;	O
else	O
if	O
(	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
!=	O
first	pointer
&&	O
second	pointer
==	O
NULL	O
)	O
second	pointer
=	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
;	O
if	O
(	O
strcmp	function
(	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
,	O
"UTF-8"	pointer
)	O
==	O
0	int
)	O
with_UTF8	bool
=	O
true	int
;	O
if	O
(	O
!	O
po_charset_ascii_compatible	function
(	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
)	O
)	O
all_ASCII_compatible	bool
=	O
false	int
;	O
}	O
}	O
}	O
if	O
(	O
with_ASCII	bool
&&	O
!	O
all_ASCII_compatible	bool
)	O
{	O
if	O
(	O
second	pointer
==	O
NULL	O
)	O
second	pointer
=	O
po_charset_ascii	pointer
;	O
}	O
if	O
(	O
second	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
with_UTF8	bool
)	O
multiline_warning	function
(	O
xasprintf	function
(	O
_	O
(	O
"warning: "	pointer
)	O
)	O
,	O
xasprintf	function
(	O
_	O
(	O
"Input files contain messages in different encodings, UTF-8 among others.\nConverting the output to UTF-8.\n"	pointer
)	O
)	O
)	O
;	O
else	O
multiline_warning	function
(	O
xasprintf	function
(	O
_	O
(	O
"warning: "	pointer
)	O
)	O
,	O
xasprintf	function
(	O
_	O
(	O
"Input files contain messages in different encodings, %s and %s among others.\nConverting the output to UTF-8.\nTo select a different output encoding, use the --to-code option.\n"	pointer
)	O
,	O
first	pointer
,	O
second	pointer
)	O
)	O
;	O
canon_to_code	pointer
=	O
po_charset_utf8	pointer
;	O
}	O
else	O
if	O
(	O
first	pointer
!=	O
NULL	O
&&	O
with_ASCII	bool
&&	O
all_ASCII_compatible	bool
)	O
{	O
canon_to_code	pointer
=	O
first	pointer
;	O
}	O
else	O
{	O
canon_to_code	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
canon_to_code	pointer
!=	O
NULL	O
)	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<	O
nfiles	long
;	O
n	long
++	O
)	O
{	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
=	O
mdlps	pointer
[	O
n	long
]	O
;	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
if	O
(	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
!=	O
NULL	O
)	O
if	O
(	O
!	O
(	O
to_code	pointer
==	O
NULL	O
&&	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
==	O
canon_to_code	pointer
)	O
)	O
if	O
(	O
iconv_message_list	function
(	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
,	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
,	O
canon_to_code	pointer
,	O
files	pointer
[	O
n	long
]	O
)	O
)	O
{	O
multiline_error	function
(	O
xstrdup	function
(	O
""	pointer
)	O
,	O
xasprintf	function
(	O
_	O
(	O
"Conversion of file %s from %s encoding to %s encoding\nchanges some msgids or msgctxts.\nEither change all msgids and msgctxts to be pure ASCII, or ensure they are\nUTF-8 encoded from the beginning, i.e. already in your source code files.\n"	pointer
)	O
,	O
files	pointer
[	O
n	long
]	O
,	O
canon_charsets	pointer
[	O
n	long
]	O
[	O
k	long
]	O
,	O
canon_to_code	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<	O
nfiles	long
;	O
n	long
++	O
)	O
{	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
=	O
mdlps	pointer
[	O
n	long
]	O
;	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
message_ty	struct
*	O
tmp	pointer
=	O
mp	pointer
->	O
tmp	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
use_first	bool
||	O
tmp	pointer
->	O
used	int
==	O
1	int
||	O
tmp	pointer
->	O
used	int
==	O
-	O
1	int
)	O
{	O
tmp	pointer
->	O
msgstr	pointer
=	O
mp	pointer
->	O
msgstr	pointer
;	O
tmp	pointer
->	O
msgstr_len	long
=	O
mp	pointer
->	O
msgstr_len	long
;	O
tmp	pointer
->	O
pos	struct
=	O
mp	pointer
->	O
pos	struct
;	O
if	O
(	O
mp	pointer
->	O
comment	pointer
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mp	pointer
->	O
comment	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
message_comment_append	function
(	O
tmp	pointer
,	O
mp	pointer
->	O
comment	pointer
->	O
item	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
mp	pointer
->	O
comment_dot	pointer
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mp	pointer
->	O
comment_dot	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
message_comment_dot_append	function
(	O
tmp	pointer
,	O
mp	pointer
->	O
comment_dot	pointer
->	O
item	pointer
[	O
i	long
]	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mp	pointer
->	O
filepos_count	long
;	O
i	long
++	O
)	O
message_comment_filepos	function
(	O
tmp	pointer
,	O
mp	pointer
->	O
filepos	pointer
[	O
i	long
]	O
.	O
file_name	pointer
,	O
mp	pointer
->	O
filepos	pointer
[	O
i	long
]	O
.	O
line_number	long
)	O
;	O
tmp	pointer
->	O
is_fuzzy	bool
=	O
mp	pointer
->	O
is_fuzzy	bool
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
tmp	pointer
->	O
is_format	enum
[	O
i	long
]	O
=	O
mp	pointer
->	O
is_format	enum
[	O
i	long
]	O
;	O
tmp	pointer
->	O
range	struct
=	O
mp	pointer
->	O
range	struct
;	O
tmp	pointer
->	O
do_wrap	enum
=	O
mp	pointer
->	O
do_wrap	enum
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
tmp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
=	O
mp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
;	O
tmp	pointer
->	O
prev_msgctxt	pointer
=	O
mp	pointer
->	O
prev_msgctxt	pointer
;	O
tmp	pointer
->	O
prev_msgid	pointer
=	O
mp	pointer
->	O
prev_msgid	pointer
;	O
tmp	pointer
->	O
prev_msgid_plural	pointer
=	O
mp	pointer
->	O
prev_msgid_plural	pointer
;	O
tmp	pointer
->	O
obsolete	bool
=	O
mp	pointer
->	O
obsolete	bool
;	O
}	O
else	O
if	O
(	O
msgcomm_mode	bool
)	O
{	O
if	O
(	O
tmp	pointer
->	O
msgstr	pointer
==	O
NULL	O
)	O
{	O
tmp	pointer
->	O
msgstr	pointer
=	O
mp	pointer
->	O
msgstr	pointer
;	O
tmp	pointer
->	O
msgstr_len	long
=	O
mp	pointer
->	O
msgstr_len	long
;	O
tmp	pointer
->	O
pos	struct
=	O
mp	pointer
->	O
pos	struct
;	O
tmp	pointer
->	O
is_fuzzy	bool
=	O
mp	pointer
->	O
is_fuzzy	bool
;	O
tmp	pointer
->	O
prev_msgctxt	pointer
=	O
mp	pointer
->	O
prev_msgctxt	pointer
;	O
tmp	pointer
->	O
prev_msgid	pointer
=	O
mp	pointer
->	O
prev_msgid	pointer
;	O
tmp	pointer
->	O
prev_msgid_plural	pointer
=	O
mp	pointer
->	O
prev_msgid_plural	pointer
;	O
}	O
if	O
(	O
mp	pointer
->	O
comment	pointer
&&	O
tmp	pointer
->	O
comment	pointer
==	O
NULL	O
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mp	pointer
->	O
comment	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
message_comment_append	function
(	O
tmp	pointer
,	O
mp	pointer
->	O
comment	pointer
->	O
item	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
mp	pointer
->	O
comment_dot	pointer
&&	O
tmp	pointer
->	O
comment_dot	pointer
==	O
NULL	O
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mp	pointer
->	O
comment_dot	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
message_comment_dot_append	function
(	O
tmp	pointer
,	O
mp	pointer
->	O
comment_dot	pointer
->	O
item	pointer
[	O
i	long
]	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mp	pointer
->	O
filepos_count	long
;	O
i	long
++	O
)	O
message_comment_filepos	function
(	O
tmp	pointer
,	O
mp	pointer
->	O
filepos	pointer
[	O
i	long
]	O
.	O
file_name	pointer
,	O
mp	pointer
->	O
filepos	pointer
[	O
i	long
]	O
.	O
line_number	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
tmp	pointer
->	O
is_format	enum
[	O
i	long
]	O
==	O
undecided	int
)	O
tmp	pointer
->	O
is_format	enum
[	O
i	long
]	O
=	O
mp	pointer
->	O
is_format	enum
[	O
i	long
]	O
;	O
if	O
(	O
tmp	pointer
->	O
range	struct
.	O
min	int
==	O
-	O
INT_MAX	O
&&	O
tmp	pointer
->	O
range	struct
.	O
max	int
==	O
-	O
INT_MAX	O
)	O
tmp	pointer
->	O
range	struct
=	O
mp	pointer
->	O
range	struct
;	O
else	O
if	O
(	O
has_range_p	O
(	O
mp	pointer
->	O
range	struct
)	O
&&	O
has_range_p	O
(	O
tmp	pointer
->	O
range	struct
)	O
)	O
{	O
if	O
(	O
mp	pointer
->	O
range	struct
.	O
min	int
<	O
tmp	pointer
->	O
range	struct
.	O
min	int
)	O
tmp	pointer
->	O
range	struct
.	O
min	int
=	O
mp	pointer
->	O
range	struct
.	O
min	int
;	O
if	O
(	O
mp	pointer
->	O
range	struct
.	O
max	int
>	O
tmp	pointer
->	O
range	struct
.	O
max	int
)	O
tmp	pointer
->	O
range	struct
.	O
max	int
=	O
mp	pointer
->	O
range	struct
.	O
max	int
;	O
}	O
else	O
{	O
tmp	pointer
->	O
range	struct
.	O
min	int
=	O
-	O
1	int
;	O
tmp	pointer
->	O
range	struct
.	O
max	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
tmp	pointer
->	O
do_wrap	enum
==	O
undecided	int
)	O
tmp	pointer
->	O
do_wrap	enum
=	O
mp	pointer
->	O
do_wrap	enum
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
if	O
(	O
tmp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
==	O
undecided	int
)	O
tmp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
=	O
mp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
;	O
tmp	pointer
->	O
obsolete	bool
=	O
false	int
;	O
}	O
else	O
{	O
char	O
*	O
id	pointer
=	O
xasprintf	function
(	O
"#-#-#-#-#  %s  #-#-#-#-#"	pointer
,	O
identifications	pointer
[	O
n	long
]	O
[	O
k	long
]	O
)	O
;	O
size_t	long
nbytes	long
;	O
if	O
(	O
tmp	pointer
->	O
alternative_count	int
==	O
0	int
)	O
tmp	pointer
->	O
pos	struct
=	O
mp	pointer
->	O
pos	struct
;	O
i	long
=	O
tmp	pointer
->	O
alternative_count	int
;	O
nbytes	long
=	O
(	O
i	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
struct	O
altstr	struct
)	O
;	O
tmp	pointer
->	O
alternative	pointer
=	O
xrealloc	function
(	O
tmp	pointer
->	O
alternative	pointer
,	O
nbytes	long
)	O
;	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr	pointer
=	O
mp	pointer
->	O
msgstr	pointer
;	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr_len	long
=	O
mp	pointer
->	O
msgstr_len	long
;	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr_end	pointer
=	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr	pointer
+	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr_len	long
;	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
comment	pointer
=	O
mp	pointer
->	O
comment	pointer
;	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
comment_dot	pointer
=	O
mp	pointer
->	O
comment_dot	pointer
;	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
id	pointer
=	O
id	pointer
;	O
tmp	pointer
->	O
alternative_count	int
=	O
i	long
+	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mp	pointer
->	O
filepos_count	long
;	O
i	long
++	O
)	O
message_comment_filepos	function
(	O
tmp	pointer
,	O
mp	pointer
->	O
filepos	pointer
[	O
i	long
]	O
.	O
file_name	pointer
,	O
mp	pointer
->	O
filepos	pointer
[	O
i	long
]	O
.	O
line_number	long
)	O
;	O
if	O
(	O
!	O
mp	pointer
->	O
is_fuzzy	bool
)	O
tmp	pointer
->	O
is_fuzzy	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
mp	pointer
->	O
is_format	enum
[	O
i	long
]	O
==	O
yes	int
)	O
tmp	pointer
->	O
is_format	enum
[	O
i	long
]	O
=	O
yes	int
;	O
else	O
if	O
(	O
mp	pointer
->	O
is_format	enum
[	O
i	long
]	O
==	O
no	int
&&	O
tmp	pointer
->	O
is_format	enum
[	O
i	long
]	O
==	O
undecided	int
)	O
tmp	pointer
->	O
is_format	enum
[	O
i	long
]	O
=	O
no	int
;	O
if	O
(	O
tmp	pointer
->	O
range	struct
.	O
min	int
==	O
-	O
INT_MAX	O
&&	O
tmp	pointer
->	O
range	struct
.	O
max	int
==	O
-	O
INT_MAX	O
)	O
tmp	pointer
->	O
range	struct
=	O
mp	pointer
->	O
range	struct
;	O
else	O
if	O
(	O
has_range_p	O
(	O
mp	pointer
->	O
range	struct
)	O
&&	O
has_range_p	O
(	O
tmp	pointer
->	O
range	struct
)	O
)	O
{	O
if	O
(	O
mp	pointer
->	O
range	struct
.	O
min	int
<	O
tmp	pointer
->	O
range	struct
.	O
min	int
)	O
tmp	pointer
->	O
range	struct
.	O
min	int
=	O
mp	pointer
->	O
range	struct
.	O
min	int
;	O
if	O
(	O
mp	pointer
->	O
range	struct
.	O
max	int
>	O
tmp	pointer
->	O
range	struct
.	O
max	int
)	O
tmp	pointer
->	O
range	struct
.	O
max	int
=	O
mp	pointer
->	O
range	struct
.	O
max	int
;	O
}	O
else	O
{	O
tmp	pointer
->	O
range	struct
.	O
min	int
=	O
-	O
1	int
;	O
tmp	pointer
->	O
range	struct
.	O
max	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
mp	pointer
->	O
do_wrap	enum
==	O
no	int
)	O
tmp	pointer
->	O
do_wrap	enum
=	O
no	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
if	O
(	O
mp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
==	O
yes	int
)	O
tmp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
=	O
yes	int
;	O
else	O
if	O
(	O
mp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
==	O
no	int
&&	O
tmp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
==	O
undecided	int
)	O
tmp	pointer
->	O
do_syntax_check	array
[	O
i	long
]	O
=	O
no	int
;	O
if	O
(	O
!	O
mp	pointer
->	O
obsolete	bool
)	O
tmp	pointer
->	O
obsolete	bool
=	O
false	int
;	O
}	O
}	O
}	O
}	O
{	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
total_mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	pointer
=	O
total_mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
message_ty	struct
*	O
tmp	pointer
=	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
;	O
if	O
(	O
tmp	pointer
->	O
alternative_count	int
>	O
0	int
)	O
{	O
struct	O
altstr	struct
*	O
first	pointer
=	O
&	O
tmp	pointer
->	O
alternative	pointer
[	O
0	int
]	O
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
tmp	pointer
->	O
alternative_count	int
;	O
i	long
++	O
)	O
if	O
(	O
!	O
(	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr_len	long
==	O
first	pointer
->	O
msgstr_len	long
&&	O
memcmp	function
(	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr	pointer
,	O
first	pointer
->	O
msgstr	pointer
,	O
first	pointer
->	O
msgstr_len	long
)	O
==	O
0	int
)	O
)	O
break	O
;	O
if	O
(	O
i	long
==	O
tmp	pointer
->	O
alternative_count	int
)	O
{	O
tmp	pointer
->	O
msgstr	pointer
=	O
first	pointer
->	O
msgstr	pointer
;	O
tmp	pointer
->	O
msgstr_len	long
=	O
first	pointer
->	O
msgstr_len	long
;	O
}	O
else	O
{	O
size_t	long
len	long
;	O
const	O
char	O
*	O
p	pointer
;	O
const	O
char	O
*	O
p_end	pointer
;	O
char	O
*	O
new_msgstr	pointer
;	O
char	O
*	O
np	pointer
;	O
len	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
tmp	pointer
->	O
alternative_count	int
;	O
i	long
++	O
)	O
{	O
size_t	long
id_len	long
=	O
strlen	function
(	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
id	pointer
)	O
;	O
len	long
+=	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr_len	long
;	O
p	pointer
=	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr	pointer
;	O
p_end	pointer
=	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr_end	pointer
;	O
for	O
(	O
;	O
p	pointer
<	O
p_end	pointer
;	O
p	pointer
+=	O
strlen	function
(	O
p	pointer
)	O
+	O
1	int
)	O
len	long
+=	O
id_len	long
+	O
2	int
;	O
}	O
new_msgstr	pointer
=	O
XNMALLOC	O
(	O
len	long
,	O
char	O
)	O
;	O
np	pointer
=	O
new_msgstr	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
tmp	pointer
->	O
alternative_count	int
;	O
i	long
++	O
)	O
if	O
(	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr	pointer
<	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr_end	pointer
)	O
break	O
;	O
if	O
(	O
i	long
==	O
tmp	pointer
->	O
alternative_count	int
)	O
break	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
tmp	pointer
->	O
alternative_count	int
;	O
i	long
++	O
)	O
if	O
(	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr	pointer
<	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr_end	pointer
)	O
{	O
if	O
(	O
np	pointer
>	O
new_msgstr	pointer
&&	O
np	pointer
[	O
-	O
1	int
]	O
!=	O
'\0'	O
&&	O
np	pointer
[	O
-	O
1	int
]	O
!=	O
'\n'	O
)	O
*	O
np	pointer
++	O
=	O
'\n'	O
;	O
len	long
=	O
strlen	function
(	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
id	pointer
)	O
;	O
memcpy	function
(	O
np	pointer
,	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
id	pointer
,	O
len	long
)	O
;	O
np	pointer
+=	O
len	long
;	O
*	O
np	pointer
++	O
=	O
'\n'	O
;	O
len	long
=	O
strlen	function
(	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr	pointer
)	O
;	O
memcpy	function
(	O
np	pointer
,	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr	pointer
,	O
len	long
)	O
;	O
np	pointer
+=	O
len	long
;	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
msgstr	pointer
+=	O
len	long
+	O
1	int
;	O
}	O
*	O
np	pointer
++	O
=	O
'\0'	O
;	O
}	O
tmp	pointer
->	O
msgstr	pointer
=	O
new_msgstr	pointer
;	O
tmp	pointer
->	O
msgstr_len	long
=	O
np	pointer
-	O
new_msgstr	pointer
;	O
tmp	pointer
->	O
is_fuzzy	bool
=	O
true	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
tmp	pointer
->	O
alternative_count	int
;	O
i	long
++	O
)	O
if	O
(	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
comment	pointer
==	O
NULL	O
||	O
!	O
string_list_equal	function
(	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
comment	pointer
,	O
first	pointer
->	O
comment	pointer
)	O
)	O
break	O
;	O
if	O
(	O
i	long
==	O
tmp	pointer
->	O
alternative_count	int
)	O
tmp	pointer
->	O
comment	pointer
=	O
first	pointer
->	O
comment	pointer
;	O
else	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
tmp	pointer
->	O
alternative_count	int
;	O
i	long
++	O
)	O
{	O
string_list_ty	struct
*	O
slp	pointer
=	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
comment	pointer
;	O
if	O
(	O
slp	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
l	long
;	O
message_comment_append	function
(	O
tmp	pointer
,	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
id	pointer
)	O
;	O
for	O
(	O
l	long
=	O
0	int
;	O
l	long
<	O
slp	pointer
->	O
nitems	long
;	O
l	long
++	O
)	O
message_comment_append	function
(	O
tmp	pointer
,	O
slp	pointer
->	O
item	pointer
[	O
l	long
]	O
)	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
tmp	pointer
->	O
alternative_count	int
;	O
i	long
++	O
)	O
if	O
(	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
comment_dot	pointer
==	O
NULL	O
||	O
!	O
string_list_equal	function
(	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
comment_dot	pointer
,	O
first	pointer
->	O
comment_dot	pointer
)	O
)	O
break	O
;	O
if	O
(	O
i	long
==	O
tmp	pointer
->	O
alternative_count	int
)	O
tmp	pointer
->	O
comment_dot	pointer
=	O
first	pointer
->	O
comment_dot	pointer
;	O
else	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
tmp	pointer
->	O
alternative_count	int
;	O
i	long
++	O
)	O
{	O
string_list_ty	struct
*	O
slp	pointer
=	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
comment_dot	pointer
;	O
if	O
(	O
slp	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
l	long
;	O
message_comment_dot_append	function
(	O
tmp	pointer
,	O
tmp	pointer
->	O
alternative	pointer
[	O
i	long
]	O
.	O
id	pointer
)	O
;	O
for	O
(	O
l	long
=	O
0	int
;	O
l	long
<	O
slp	pointer
->	O
nitems	long
;	O
l	long
++	O
)	O
message_comment_dot_append	function
(	O
tmp	pointer
,	O
slp	pointer
->	O
item	pointer
[	O
l	long
]	O
)	O
;	O
}	O
}	O
}	O
}	O
}	O
}	O
return	O
total_mdlp	pointer
;	O
}	O
