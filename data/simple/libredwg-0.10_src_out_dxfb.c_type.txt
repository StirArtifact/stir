static	O
unsigned	O
int	O
loglevel	int
;	O
static	O
unsigned	O
int	O
cur_ver	int
=	O
0	int
;	O
static	O
char	O
buf	array
[	O
4096	int
]	O
;	O
static	O
int	O
dxfb_common_entity_handle_data	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
)	O
;	O
static	O
int	O
dwg_dxfb_object	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
)	O
;	O
static	O
int	O
dxfb_3dsolid	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
,	O
Dwg_Entity_3DSOLID	O
*	O
restrict	O
_obj	pointer
)	O
;	O
static	O
int	O
dxfb_block_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
mspace	pointer
,	O
Dwg_Object	struct
*	O
restrict	O
hdr	pointer
,	O
int	O
*	O
restrict	O
i	pointer
)	O
;	O
static	O
void	O
dxfb_cvt_tablerecord	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
,	O
char	O
*	O
restrict	O
name	pointer
,	O
const	O
int	O
dxf	int
)	O
;	O
static	O
int	O
dwg_dxfb_TABLECONTENT	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
)	O
{	O
(	O
void	O
)	O
dat	pointer
;	O
(	O
void	O
)	O
obj	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
dxfb_write_xdata	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
,	O
Dwg_Resbuf	struct
*	O
restrict	O
rbuf	pointer
,	O
BITCODE_BL	int
size	char
)	O
{	O
Dwg_Resbuf	struct
*	O
tmp	pointer
;	O
int	O
i	pointer
;	O
while	O
(	O
rbuf	pointer
)	O
{	O
short	O
type	short
=	O
get_base_value_type	function
(	O
rbuf	pointer
->	O
type	short
)	O
;	O
int	O
dxftype	int
=	O
(	O
rbuf	pointer
->	O
type	short
>	O
1000	int
||	O
obj	pointer
->	O
fixedtype	enum
==	O
DWG_TYPE_XRECORD	int
)	O
?	O
rbuf	pointer
->	O
type	short
:	O
rbuf	pointer
->	O
type	short
+	O
1000	int
;	O
tmp	pointer
=	O
rbuf	pointer
->	O
next	pointer
;	O
switch	O
(	O
type	short
)	O
{	O
case	O
VT_STRING	int
:	O
UNTIL	O
(	O
R_2007	int
)	O
{	O
VALUE_TV	O
(	O
rbuf	pointer
->	O
value	double
.	O
str	struct
.	O
u	union
.	O
data	pointer
,	O
dxftype	int
)	O
}	O
LATER_VERSIONS	O
{	O
VALUE_TU	O
(	O
rbuf	pointer
->	O
value	double
.	O
str	struct
.	O
u	union
.	O
wdata	pointer
,	O
dxftype	int
)	O
}	O
break	O
;	O
case	O
VT_REAL	int
:	O
VALUE_RD	O
(	O
rbuf	pointer
->	O
value	double
.	O
dbl	double
,	O
dxftype	int
)	O
;	O
break	O
;	O
case	O
VT_BOOL	int
:	O
case	O
VT_INT8	int
:	O
VALUE_RC	O
(	O
rbuf	pointer
->	O
value	double
.	O
i8	char
,	O
dxftype	int
)	O
;	O
break	O
;	O
case	O
VT_INT16	int
:	O
VALUE_RS	O
(	O
rbuf	pointer
->	O
value	double
.	O
i16	short
,	O
dxftype	int
)	O
;	O
break	O
;	O
case	O
VT_INT32	int
:	O
VALUE_RL	O
(	O
rbuf	pointer
->	O
value	double
.	O
i32	int
,	O
dxftype	int
)	O
;	O
break	O
;	O
case	O
VT_POINT3D	int
:	O
VALUE_RD	O
(	O
rbuf	pointer
->	O
value	double
.	O
pt	array
[	O
0	int
]	O
,	O
dxftype	int
)	O
;	O
VALUE_RD	O
(	O
rbuf	pointer
->	O
value	double
.	O
pt	array
[	O
1	int
]	O
,	O
dxftype	int
+	O
1	int
)	O
;	O
VALUE_RD	O
(	O
rbuf	pointer
->	O
value	double
.	O
pt	array
[	O
2	int
]	O
,	O
dxftype	int
+	O
2	int
)	O
;	O
break	O
;	O
case	O
VT_BINARY	int
:	O
VALUE_BINARY	O
(	O
rbuf	pointer
->	O
value	double
.	O
str	struct
.	O
u	union
.	O
data	pointer
,	O
rbuf	pointer
->	O
value	double
.	O
str	struct
.	O
size	char
,	O
dxftype	int
)	O
;	O
break	O
;	O
case	O
VT_HANDLE	int
:	O
case	O
VT_OBJECTID	int
:	O
GROUP	pointer
(	O
dxftype	int
)	O
;	O
fwrite	function
(	O
&	O
rbuf	pointer
->	O
value	double
.	O
hdl	array
,	O
sizeof	O
(	O
uint32_t	int
)	O
,	O
1	int
,	O
dat	pointer
->	O
fh	pointer
)	O
;	O
break	O
;	O
case	O
VT_INVALID	int
:	O
default	O
:	O
break	O
;	O
}	O
rbuf	pointer
=	O
tmp	pointer
;	O
}	O
}	O
static	O
void	O
dxfb_cvt_tablerecord	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
,	O
char	O
*	O
restrict	O
name	pointer
,	O
const	O
int	O
dxf	int
)	O
{	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
&&	O
name	pointer
)	O
{	O
if	O
(	O
dat	pointer
->	O
version	short
>=	O
R_2007	int
)	O
{	O
name	pointer
=	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
name	pointer
)	O
;	O
}	O
if	O
(	O
dat	pointer
->	O
from_version	enum
>=	O
R_2000	int
&&	O
dat	pointer
->	O
version	short
<	O
R_2000	int
)	O
{	O
if	O
(	O
strEQc	O
(	O
name	pointer
,	O
"Standard"	pointer
)	O
)	O
VALUE_TV	O
(	O
"STANDARD"	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
strEQc	O
(	O
name	pointer
,	O
"ByLayer"	pointer
)	O
)	O
VALUE_TV	O
(	O
"BYLAYER"	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
strEQc	O
(	O
name	pointer
,	O
"ByBlock"	pointer
)	O
)	O
VALUE_TV	O
(	O
"BYBLOCK"	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
strEQc	O
(	O
name	pointer
,	O
"*Active"	pointer
)	O
)	O
VALUE_TV	O
(	O
"*ACTIVE"	pointer
,	O
dxf	int
)	O
else	O
VALUE_TV	O
(	O
name	pointer
,	O
dxf	int
)	O
}	O
else	O
{	O
if	O
(	O
dat	pointer
->	O
version	short
>=	O
R_2000	int
&&	O
strEQc	O
(	O
name	pointer
,	O
"STANDARD"	pointer
)	O
)	O
VALUE_TV	O
(	O
"Standard"	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
dat	pointer
->	O
version	short
>=	O
R_2000	int
&&	O
strEQc	O
(	O
name	pointer
,	O
"BYLAYER"	pointer
)	O
)	O
VALUE_TV	O
(	O
"ByLayer"	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
dat	pointer
->	O
version	short
>=	O
R_2000	int
&&	O
strEQc	O
(	O
name	pointer
,	O
"BYBLOCK"	pointer
)	O
)	O
VALUE_TV	O
(	O
"ByBlock"	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
dat	pointer
->	O
version	short
>=	O
R_2000	int
&&	O
strEQc	O
(	O
name	pointer
,	O
"*ACTIVE"	pointer
)	O
)	O
VALUE_TV	O
(	O
"*Active"	pointer
,	O
dxf	int
)	O
else	O
VALUE_TV	O
(	O
name	pointer
,	O
dxf	int
)	O
}	O
if	O
(	O
dat	pointer
->	O
version	short
>=	O
R_2007	int
)	O
free	function
(	O
name	pointer
)	O
;	O
}	O
else	O
{	O
VALUE_TV	O
(	O
""	pointer
,	O
dxf	int
)	O
}	O
}	O
static	O
void	O
dxfb_cvt_blockname	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
char	O
*	O
restrict	O
name	pointer
,	O
const	O
int	O
dxf	int
)	O
{	O
if	O
(	O
!	O
name	pointer
)	O
{	O
VALUE_TV	O
(	O
""	pointer
,	O
dxf	int
)	O
return	O
;	O
}	O
if	O
(	O
dat	pointer
->	O
from_version	enum
>=	O
R_2007	int
)	O
{	O
name	pointer
=	O
bit_convert_TU	function
(	O
(	O
BITCODE_TU	pointer
)	O
name	pointer
)	O
;	O
}	O
if	O
(	O
dat	pointer
->	O
version	short
==	O
dat	pointer
->	O
from_version	enum
)	O
{	O
VALUE_TV	O
(	O
name	pointer
,	O
dxf	int
)	O
}	O
else	O
if	O
(	O
dat	pointer
->	O
version	short
<	O
R_13	int
&&	O
dat	pointer
->	O
from_version	enum
>=	O
R_13	int
)	O
{	O
if	O
(	O
strlen	function
(	O
name	pointer
)	O
<	O
10	int
)	O
VALUE_TV	O
(	O
name	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
strEQc	O
(	O
name	pointer
,	O
"*Model_Space"	pointer
)	O
)	O
VALUE_TV	O
(	O
"$MODEL_SPACE"	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
strEQc	O
(	O
name	pointer
,	O
"*Paper_Space"	pointer
)	O
)	O
VALUE_TV	O
(	O
"$PAPER_SPACE"	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
name	pointer
,	O
"*Paper_Space"	pointer
,	O
sizeof	O
(	O
"*Paper_Space"	pointer
)	O
-	O
1	int
)	O
)	O
{	O
GROUP	pointer
(	O
dxf	int
)	O
;	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"$PAPER_SPACE%s%c"	pointer
,	O
&	O
name	pointer
[	O
12	int
]	O
,	O
0	int
)	O
;	O
}	O
else	O
VALUE_TV	O
(	O
name	pointer
,	O
dxf	int
)	O
}	O
else	O
if	O
(	O
dat	pointer
->	O
version	short
>=	O
R_13	int
&&	O
dat	pointer
->	O
from_version	enum
<	O
R_13	int
)	O
{	O
if	O
(	O
strlen	function
(	O
name	pointer
)	O
<	O
10	int
)	O
VALUE_TV	O
(	O
name	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
strEQc	O
(	O
name	pointer
,	O
"$MODEL_SPACE"	pointer
)	O
)	O
VALUE_TV	O
(	O
"*Model_Space"	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
strEQc	O
(	O
name	pointer
,	O
"$PAPER_SPACE"	pointer
)	O
)	O
VALUE_TV	O
(	O
"*Paper_Space"	pointer
,	O
dxf	int
)	O
else	O
if	O
(	O
!	O
memcmp	function
(	O
name	pointer
,	O
"$PAPER_SPACE"	pointer
,	O
sizeof	O
(	O
"$PAPER_SPACE"	pointer
)	O
-	O
1	int
)	O
)	O
{	O
GROUP	pointer
(	O
dxf	int
)	O
;	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"*Paper_Space%s%c"	pointer
,	O
&	O
name	pointer
[	O
12	int
]	O
,	O
0	int
)	O
;	O
}	O
else	O
VALUE_TV	O
(	O
name	pointer
,	O
dxf	int
)	O
}	O
if	O
(	O
dat	pointer
->	O
from_version	enum
>=	O
R_2007	int
)	O
free	function
(	O
name	pointer
)	O
;	O
}	O
static	O
int	O
dxfb_3dsolid	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
,	O
Dwg_Entity_3DSOLID	O
*	O
restrict	O
_obj	pointer
)	O
{	O
unsigned	O
long	O
j	short
;	O
BITCODE_BL	int
vcount	int
,	O
rcount1	int
,	O
rcount2	int
;	O
BITCODE_BL	int
i	pointer
;	O
int	O
error	int
=	O
0	int
;	O
int	O
index	short
;	O
int	O
total_size	int
=	O
0	int
;	O
int	O
num_blocks	int
=	O
0	int
;	O
COMMON_ENTITY_HANDLE_DATA	O
;	O
FIELD_B	O
(	O
acis_empty	char
,	O
0	int
)	O
;	O
if	O
(	O
!	O
FIELD_VALUE	O
(	O
acis_empty	char
)	O
)	O
{	O
FIELD_B	O
(	O
unknown	char
,	O
0	int
)	O
;	O
FIELD_BS	O
(	O
version	short
,	O
70	int
)	O
;	O
if	O
(	O
FIELD_VALUE	O
(	O
version	short
)	O
==	O
1	int
)	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
FIELD_VALUE	O
(	O
num_blocks	int
)	O
;	O
i	pointer
++	O
)	O
{	O
char	O
*	O
s	pointer
=	O
FIELD_VALUE	O
(	O
encr_sat_data	pointer
[	O
i	pointer
]	O
)	O
;	O
int	O
len	long
=	O
strlen	function
(	O
s	pointer
)	O
;	O
while	O
(	O
len	long
>	O
0	int
)	O
{	O
char	O
*	O
n	pointer
=	O
strchr	function
(	O
s	pointer
,	O
'\n'	O
)	O
;	O
int	O
l	long
=	O
len	long
>	O
255	int
?	O
255	int
:	O
len	long
;	O
if	O
(	O
n	pointer
&&	O
(	O
n	pointer
-	O
s	pointer
<	O
len	long
)	O
)	O
l	long
=	O
n	pointer
-	O
s	pointer
;	O
if	O
(	O
l	long
)	O
{	O
if	O
(	O
l	long
<	O
255	int
)	O
GROUP	pointer
(	O
1	int
)	O
else	O
GROUP	pointer
(	O
3	int
)	O
if	O
(	O
s	pointer
[	O
l	long
-	O
1	int
]	O
==	O
'\r'	O
)	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"%.*s\n"	pointer
,	O
l	long
,	O
s	pointer
)	O
;	O
else	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"%.*s\r\n"	pointer
,	O
l	long
,	O
s	pointer
)	O
;	O
l	long
++	O
;	O
len	long
-=	O
l	long
;	O
s	pointer
+=	O
l	long
;	O
}	O
else	O
{	O
len	long
--	O
;	O
s	pointer
++	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
LOG_ERROR	O
(	O
"TODO: Implement parsing of SAT file (version 2) "	pointer
"in entities 37,38 and 39."	pointer
)	O
;	O
}	O
FIELD_B	O
(	O
acis_empty_bit	char
,	O
0	int
)	O
;	O
if	O
(	O
!	O
FIELD_VALUE	O
(	O
acis_empty_bit	char
)	O
)	O
{	O
LOG_ERROR	O
(	O
"TODO: Implement parsing of ACIS data at the end "	pointer
"of 3dsolid object parsing (acis_empty_bit==0)."	pointer
)	O
;	O
}	O
SINCE	O
(	O
R_2007	int
)	O
{	O
FIELD_BL	O
(	O
unknown_2007	int
,	O
0	int
)	O
;	O
FIELD_HANDLE	O
(	O
history_id	pointer
,	O
ANYCODE	O
,	O
350	int
)	O
;	O
}	O
}	O
return	O
error	int
;	O
}	O
static	O
int	O
dwg_dxfb_variable_type	function
(	O
const	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
,	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
)	O
{	O
int	O
i	pointer
;	O
Dwg_Class	struct
*	O
klass	pointer
;	O
int	O
is_entity	int
;	O
i	pointer
=	O
obj	pointer
->	O
type	short
-	O
500	int
;	O
if	O
(	O
i	pointer
<	O
0	int
||	O
i	pointer
>=	O
dwg	pointer
->	O
num_classes	short
)	O
return	O
DWG_ERR_INVALIDTYPE	int
;	O
klass	pointer
=	O
&	O
dwg	pointer
->	O
dwg_class	pointer
[	O
i	pointer
]	O
;	O
if	O
(	O
!	O
klass	pointer
||	O
!	O
klass	pointer
->	O
dxfname	pointer
)	O
return	O
DWG_ERR_INTERNALERROR	int
;	O
is_entity	int
=	O
dwg_class_is_entity	function
(	O
klass	pointer
)	O
;	O
return	O
DWG_ERR_UNHANDLEDCLASS	int
;	O
}	O
decl_dxfb_process_VERTEX	O
(	O
2D	int
)	O
decl_dxfb_process_VERTEX	O
(	O
3D	int
)	O
decl_dxfb_process_VERTEX	O
(	O
MESH	pointer
)	O
decl_dxfb_process_VERTEX	O
(	O
PFACE	O
)	O
decl_dxfb_process_INSERT	O
(	O
INSERT	pointer
)	O
decl_dxfb_process_INSERT	O
(	O
MINSERT	pointer
)	O
static	O
int	O
dwg_dxfb_object	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
,	O
int	O
*	O
restrict	O
i	pointer
)	O
{	O
int	O
error	int
=	O
0	int
;	O
int	O
minimal	int
;	O
if	O
(	O
!	O
obj	pointer
||	O
!	O
obj	pointer
->	O
parent	pointer
)	O
return	O
DWG_ERR_INTERNALERROR	int
;	O
minimal	int
=	O
obj	pointer
->	O
parent	pointer
->	O
opts	int
&	O
DWG_OPTS_MINIMAL	int
;	O
switch	O
(	O
obj	pointer
->	O
type	short
)	O
{	O
case	O
DWG_TYPE_TEXT	int
:	O
return	O
dwg_dxfb_TEXT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_ATTDEF	int
:	O
return	O
dwg_dxfb_ATTDEF	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_BLOCK	int
:	O
return	O
dwg_dxfb_BLOCK	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_ENDBLK	int
:	O
return	O
dwg_dxfb_ENDBLK	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_SEQEND	int
:	O
return	O
dwg_dxfb_SEQEND	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_INSERT	int
:	O
error	int
=	O
dwg_dxfb_INSERT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
{	O
Dwg_Entity_INSERT	struct
*	O
_obj	pointer
=	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
INSERT	pointer
;	O
if	O
(	O
_obj	pointer
->	O
has_attribs	char
)	O
return	O
error	int
|	O
dxfb_process_INSERT	function
(	O
dat	pointer
,	O
obj	pointer
,	O
i	pointer
)	O
;	O
else	O
return	O
error	int
;	O
}	O
case	O
DWG_TYPE_MINSERT	int
:	O
error	int
=	O
dwg_dxfb_MINSERT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
{	O
Dwg_Entity_MINSERT	struct
*	O
_obj	pointer
=	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
MINSERT	pointer
;	O
if	O
(	O
_obj	pointer
->	O
has_attribs	char
)	O
return	O
error	int
|	O
dxfb_process_MINSERT	function
(	O
dat	pointer
,	O
obj	pointer
,	O
i	pointer
)	O
;	O
else	O
return	O
error	int
;	O
}	O
case	O
DWG_TYPE_POLYLINE_2D	int
:	O
error	int
=	O
dwg_dxfb_POLYLINE_2D	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
return	O
error	int
|	O
dxfb_process_VERTEX_2D	function
(	O
dat	pointer
,	O
obj	pointer
,	O
i	pointer
)	O
;	O
case	O
DWG_TYPE_POLYLINE_3D	int
:	O
error	int
=	O
dwg_dxfb_POLYLINE_3D	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
return	O
error	int
|	O
dxfb_process_VERTEX_3D	function
(	O
dat	pointer
,	O
obj	pointer
,	O
i	pointer
)	O
;	O
case	O
DWG_TYPE_POLYLINE_PFACE	int
:	O
error	int
=	O
dwg_dxfb_POLYLINE_PFACE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
return	O
error	int
|	O
dxfb_process_VERTEX_PFACE	function
(	O
dat	pointer
,	O
obj	pointer
,	O
i	pointer
)	O
;	O
case	O
DWG_TYPE_POLYLINE_MESH	int
:	O
error	int
=	O
dwg_dxfb_POLYLINE_MESH	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
return	O
error	int
|	O
dxfb_process_VERTEX_MESH	function
(	O
dat	pointer
,	O
obj	pointer
,	O
i	pointer
)	O
;	O
case	O
DWG_TYPE_ATTRIB	int
:	O
LOG_WARN	O
(	O
"stale %s subentity"	pointer
,	O
obj	pointer
->	O
dxfname	pointer
)	O
;	O
return	O
dwg_dxfb_ATTRIB	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VERTEX_2D	int
:	O
LOG_WARN	O
(	O
"stale %s subentity"	pointer
,	O
obj	pointer
->	O
dxfname	pointer
)	O
;	O
return	O
dwg_dxfb_VERTEX_2D	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VERTEX_3D	int
:	O
LOG_WARN	O
(	O
"stale %s subentity"	pointer
,	O
obj	pointer
->	O
dxfname	pointer
)	O
;	O
return	O
dwg_dxfb_VERTEX_3D	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VERTEX_MESH	int
:	O
LOG_WARN	O
(	O
"stale %s subentity"	pointer
,	O
obj	pointer
->	O
dxfname	pointer
)	O
;	O
return	O
dwg_dxfb_VERTEX_MESH	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VERTEX_PFACE	int
:	O
LOG_WARN	O
(	O
"stale %s subentity"	pointer
,	O
obj	pointer
->	O
dxfname	pointer
)	O
;	O
return	O
dwg_dxfb_VERTEX_PFACE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VERTEX_PFACE_FACE	int
:	O
LOG_WARN	O
(	O
"stale %s subentity"	pointer
,	O
obj	pointer
->	O
dxfname	pointer
)	O
;	O
return	O
dwg_dxfb_VERTEX_PFACE_FACE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_ARC	int
:	O
return	O
dwg_dxfb_ARC	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_CIRCLE	int
:	O
return	O
dwg_dxfb_CIRCLE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_LINE	int
:	O
return	O
dwg_dxfb_LINE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_ORDINATE	int
:	O
return	O
dwg_dxfb_DIMENSION_ORDINATE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_LINEAR	int
:	O
return	O
dwg_dxfb_DIMENSION_LINEAR	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_ALIGNED	int
:	O
return	O
dwg_dxfb_DIMENSION_ALIGNED	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_ANG3PT	int
:	O
return	O
dwg_dxfb_DIMENSION_ANG3PT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_ANG2LN	int
:	O
return	O
dwg_dxfb_DIMENSION_ANG2LN	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_RADIUS	int
:	O
return	O
dwg_dxfb_DIMENSION_RADIUS	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DIMENSION_DIAMETER	int
:	O
return	O
dwg_dxfb_DIMENSION_DIAMETER	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_POINT	int
:	O
return	O
dwg_dxfb_POINT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE__3DFACE	int
:	O
return	O
dwg_dxfb__3DFACE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_SOLID	int
:	O
return	O
dwg_dxfb_SOLID	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_TRACE	int
:	O
return	O
dwg_dxfb_TRACE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_SHAPE	int
:	O
return	O
dwg_dxfb_SHAPE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VIEWPORT	int
:	O
return	O
minimal	int
?	O
0	int
:	O
dwg_dxfb_VIEWPORT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_ELLIPSE	int
:	O
return	O
dwg_dxfb_ELLIPSE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_SPLINE	int
:	O
return	O
dwg_dxfb_SPLINE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_REGION	int
:	O
return	O
dwg_dxfb_REGION	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE__3DSOLID	int
:	O
return	O
dwg_dxfb__3DSOLID	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_BODY	int
:	O
return	O
dwg_dxfb_BODY	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_RAY	int
:	O
return	O
dwg_dxfb_RAY	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_XLINE	int
:	O
return	O
dwg_dxfb_XLINE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DICTIONARY	int
:	O
return	O
minimal	int
?	O
0	int
:	O
dwg_dxfb_DICTIONARY	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_MTEXT	int
:	O
return	O
dwg_dxfb_MTEXT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_LEADER	int
:	O
return	O
dwg_dxfb_LEADER	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_TOLERANCE	int
:	O
return	O
dwg_dxfb_TOLERANCE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_MLINE	int
:	O
LOG_WARN	O
(	O
"Unhandled Entity MLINE in out_dxfb %u/%lX"	pointer
,	O
obj	pointer
->	O
index	short
,	O
obj	pointer
->	O
handle	pointer
.	O
value	double
)	O
if	O
(	O
0	int
)	O
dwg_dxfb_MLINE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
return	O
DWG_ERR_UNHANDLEDCLASS	int
;	O
case	O
DWG_TYPE_BLOCK_CONTROL	int
:	O
case	O
DWG_TYPE_BLOCK_HEADER	int
:	O
case	O
DWG_TYPE_LAYER_CONTROL	int
:	O
case	O
DWG_TYPE_LAYER	int
:	O
case	O
DWG_TYPE_STYLE_CONTROL	int
:	O
case	O
DWG_TYPE_STYLE	int
:	O
case	O
DWG_TYPE_LTYPE_CONTROL	int
:	O
case	O
DWG_TYPE_LTYPE	int
:	O
case	O
DWG_TYPE_VIEW_CONTROL	int
:	O
case	O
DWG_TYPE_VIEW	int
:	O
case	O
DWG_TYPE_UCS_CONTROL	int
:	O
case	O
DWG_TYPE_UCS	int
:	O
case	O
DWG_TYPE_VPORT_CONTROL	int
:	O
case	O
DWG_TYPE_VPORT	int
:	O
case	O
DWG_TYPE_APPID_CONTROL	int
:	O
case	O
DWG_TYPE_APPID	int
:	O
case	O
DWG_TYPE_DIMSTYLE_CONTROL	int
:	O
case	O
DWG_TYPE_DIMSTYLE	int
:	O
case	O
DWG_TYPE_VPORT_ENTITY_CONTROL	int
:	O
case	O
DWG_TYPE_VPORT_ENTITY_HEADER	int
:	O
break	O
;	O
case	O
DWG_TYPE_GROUP	int
:	O
return	O
dwg_dxfb_GROUP	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_MLINESTYLE	int
:	O
return	O
minimal	int
?	O
0	int
:	O
dwg_dxfb_MLINESTYLE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_OLE2FRAME	int
:	O
return	O
minimal	int
?	O
0	int
:	O
dwg_dxfb_OLE2FRAME	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_DUMMY	int
:	O
return	O
0	int
;	O
case	O
DWG_TYPE_LONG_TRANSACTION	int
:	O
return	O
minimal	int
?	O
0	int
:	O
dwg_dxfb_LONG_TRANSACTION	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_LWPOLYLINE	int
:	O
return	O
dwg_dxfb_LWPOLYLINE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_HATCH	int
:	O
return	O
dwg_dxfb_HATCH	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_XRECORD	int
:	O
return	O
minimal	int
?	O
0	int
:	O
dwg_dxfb_XRECORD	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_PLACEHOLDER	int
:	O
return	O
minimal	int
?	O
0	int
:	O
dwg_dxfb_PLACEHOLDER	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_PROXY_ENTITY	int
:	O
return	O
DWG_ERR_UNHANDLEDCLASS	int
;	O
case	O
DWG_TYPE_OLEFRAME	int
:	O
return	O
minimal	int
?	O
0	int
:	O
dwg_dxfb_OLEFRAME	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
case	O
DWG_TYPE_VBA_PROJECT	int
:	O
if	O
(	O
!	O
minimal	int
)	O
{	O
LOG_ERROR	O
(	O
"Unhandled Object VBA_PROJECT"	pointer
)	O
;	O
return	O
DWG_ERR_UNHANDLEDCLASS	int
;	O
}	O
return	O
0	int
;	O
case	O
DWG_TYPE_LAYOUT	int
:	O
return	O
minimal	int
?	O
0	int
:	O
dwg_dxfb_LAYOUT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
default	O
:	O
if	O
(	O
obj	pointer
->	O
type	short
==	O
obj	pointer
->	O
parent	pointer
->	O
layout_type	int
)	O
{	O
return	O
minimal	int
?	O
0	int
:	O
dwg_dxfb_LAYOUT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
else	O
if	O
(	O
DWG_ERR_UNHANDLEDCLASS	int
&	O
(	O
error	int
=	O
dwg_dxfb_variable_type	function
(	O
obj	pointer
->	O
parent	pointer
,	O
dat	pointer
,	O
(	O
Dwg_Object	struct
*	O
)	O
obj	pointer
)	O
)	O
)	O
{	O
Dwg_Data	struct
*	O
dwg	pointer
=	O
obj	pointer
->	O
parent	pointer
;	O
int	O
j	short
=	O
obj	pointer
->	O
type	short
-	O
500	int
;	O
Dwg_Class	struct
*	O
klass	pointer
=	O
NULL	O
;	O
if	O
(	O
j	short
>=	O
0	int
&&	O
j	short
<	O
(	O
int	O
)	O
dwg	pointer
->	O
num_classes	short
)	O
klass	pointer
=	O
&	O
dwg	pointer
->	O
dwg_class	pointer
[	O
j	short
]	O
;	O
if	O
(	O
!	O
klass	pointer
)	O
{	O
LOG_WARN	O
(	O
"Unknown object, skipping eed/reactors/xdic"	pointer
)	O
;	O
return	O
DWG_ERR_INVALIDTYPE	int
;	O
}	O
return	O
error	int
;	O
}	O
}	O
return	O
DWG_ERR_UNHANDLEDCLASS	int
;	O
}	O
static	O
int	O
dxfb_common_entity_handle_data	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
)	O
{	O
Dwg_Object_Entity	struct
*	O
ent	pointer
;	O
Dwg_Object_Entity	struct
*	O
_obj	pointer
;	O
int	O
error	int
=	O
0	int
;	O
BITCODE_BL	int
vcount	int
=	O
0	int
;	O
ent	pointer
=	O
obj	pointer
->	O
tio	union
.	O
entity	long
;	O
_obj	pointer
=	O
ent	pointer
;	O
return	O
error	int
;	O
}	O
AFL_GCC_TOOBIG	O
static	O
int	O
dxfb_header_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
Dwg_Header_Variables	struct
*	O
_obj	pointer
=	O
&	O
dwg	pointer
->	O
header_vars	struct
;	O
Dwg_Object	struct
*	O
obj	pointer
=	O
NULL	O
;	O
double	O
ms	int
;	O
const	O
int	O
minimal	int
=	O
dwg	pointer
->	O
opts	int
&	O
DWG_OPTS_MINIMAL	int
;	O
const	O
char	O
*	O
codepage	int
=	O
dxf_codepage	function
(	O
dwg	pointer
->	O
header	struct
.	O
codepage	int
,	O
dwg	pointer
)	O
;	O
if	O
(	O
dwg	pointer
->	O
header	struct
.	O
codepage	int
!=	O
30	int
&&	O
dwg	pointer
->	O
header	struct
.	O
codepage	int
!=	O
29	int
&&	O
dwg	pointer
->	O
header	struct
.	O
codepage	int
!=	O
0	int
&&	O
dwg	pointer
->	O
header	struct
.	O
version	short
<	O
R_2007	int
)	O
{	O
LOG_WARN	O
(	O
"Unknown codepage %d, assuming ANSI_1252"	pointer
,	O
dwg	pointer
->	O
header	struct
.	O
codepage	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
AFL_GCC_POP	O
static	O
int	O
dxfb_classes_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
BITCODE_BS	short
j	short
;	O
SECTION	O
(	O
CLASSES	O
)	O
;	O
LOG_TRACE	O
(	O
"num_classes: %u\n"	pointer
,	O
dwg	pointer
->	O
num_classes	short
)	O
;	O
for	O
(	O
j	short
=	O
0	int
;	O
j	short
<	O
dwg	pointer
->	O
num_classes	short
;	O
j	short
++	O
)	O
{	O
const	O
char	O
*	O
dxfname	pointer
=	O
dwg	pointer
->	O
dwg_class	pointer
[	O
j	short
]	O
.	O
dxfname	pointer
;	O
if	O
(	O
dat	pointer
->	O
version	short
>=	O
R_2004	int
&&	O
(	O
strEQc	O
(	O
dxfname	pointer
,	O
"ACDBPLACEHOLDER"	pointer
)	O
||	O
strEQc	O
(	O
dxfname	pointer
,	O
"LAYOUT"	pointer
)	O
)	O
)	O
continue	O
;	O
RECORD	O
(	O
CLASS	O
)	O
;	O
VALUE_TV	O
(	O
dxfname	pointer
,	O
1	int
)	O
;	O
VALUE_T	O
(	O
dwg	pointer
->	O
dwg_class	pointer
[	O
j	short
]	O
.	O
cppname	pointer
,	O
2	int
)	O
;	O
VALUE_T	O
(	O
dwg	pointer
->	O
dwg_class	pointer
[	O
j	short
]	O
.	O
appname	pointer
,	O
3	int
)	O
;	O
VALUE_RS	O
(	O
dwg	pointer
->	O
dwg_class	pointer
[	O
j	short
]	O
.	O
proxyflag	short
,	O
90	int
)	O
;	O
SINCE	O
(	O
R_2004	int
)	O
{	O
VALUE_RC	O
(	O
dwg	pointer
->	O
dwg_class	pointer
[	O
j	short
]	O
.	O
num_instances	int
,	O
91	int
)	O
;	O
}	O
VALUE_RC	O
(	O
dwg	pointer
->	O
dwg_class	pointer
[	O
j	short
]	O
.	O
is_zombie	char
,	O
280	int
)	O
;	O
VALUE_RC	O
(	O
dwg	pointer
->	O
dwg_class	pointer
[	O
j	short
]	O
.	O
item_class_id	short
==	O
0x1F2	int
?	O
1	int
:	O
0	int
,	O
281	int
)	O
;	O
}	O
ENDSEC	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dxfb_tables_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
int	O
error	int
=	O
0	int
;	O
unsigned	O
int	O
i	pointer
;	O
SECTION	O
(	O
TABLES	O
)	O
;	O
{	O
Dwg_Object_VPORT_CONTROL	struct
*	O
_ctrl	pointer
=	O
&	O
dwg	pointer
->	O
vport_control	struct
;	O
Dwg_Object	struct
*	O
ctrl	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
_ctrl	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
ctrl	pointer
)	O
{	O
TABLE	pointer
(	O
VPORT	pointer
)	O
;	O
COMMON_TABLE_CONTROL_FLAGS	O
;	O
error	int
|=	O
dwg_dxfb_VPORT_CONTROL	function
(	O
dat	pointer
,	O
ctrl	pointer
)	O
;	O
if	O
(	O
dat	pointer
->	O
version	short
!=	O
dat	pointer
->	O
from_version	enum
&&	O
dat	pointer
->	O
from_version	enum
>=	O
R_2000	int
)	O
{	O
VALUE_TV	O
(	O
"ACAD"	pointer
,	O
1001	int
)	O
;	O
VALUE_TV	O
(	O
"DbSaveVer"	pointer
,	O
1000	int
)	O
;	O
VALUE_RS	O
(	O
(	O
dat	pointer
->	O
from_version	enum
*	O
3	int
)	O
+	O
15	int
,	O
1071	int
)	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
dwg	pointer
->	O
vport_control	struct
.	O
num_entries	short
;	O
i	pointer
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_ctrl	pointer
->	O
entries	pointer
[	O
i	pointer
]	O
)	O
;	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_VPORT	int
)	O
{	O
error	int
|=	O
dwg_dxfb_VPORT	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
}	O
ENDTAB	O
(	O
)	O
;	O
}	O
}	O
{	O
Dwg_Object_LTYPE_CONTROL	struct
*	O
_ctrl	pointer
=	O
&	O
dwg	pointer
->	O
ltype_control	struct
;	O
Dwg_Object	struct
*	O
ctrl	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
_ctrl	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
ctrl	pointer
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
;	O
TABLE	pointer
(	O
LTYPE	pointer
)	O
;	O
COMMON_TABLE_CONTROL_FLAGS	O
;	O
error	int
|=	O
dwg_dxfb_LTYPE_CONTROL	function
(	O
dat	pointer
,	O
ctrl	pointer
)	O
;	O
if	O
(	O
(	O
obj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
dwg	pointer
->	O
header_vars	struct
.	O
LTYPE_BYBLOCK	pointer
)	O
)	O
)	O
{	O
dwg_dxfb_LTYPE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
if	O
(	O
(	O
obj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
dwg	pointer
->	O
header_vars	struct
.	O
LTYPE_BYLAYER	pointer
)	O
)	O
)	O
{	O
error	int
|=	O
dwg_dxfb_LTYPE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
dwg	pointer
->	O
ltype_control	struct
.	O
num_entries	short
;	O
i	pointer
++	O
)	O
{	O
obj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_ctrl	pointer
->	O
entries	pointer
[	O
i	pointer
]	O
)	O
;	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_LTYPE	int
)	O
{	O
error	int
|=	O
dwg_dxfb_LTYPE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
}	O
ENDTAB	O
(	O
)	O
;	O
}	O
}	O
{	O
Dwg_Object_LAYER_CONTROL	struct
*	O
_ctrl	pointer
=	O
&	O
dwg	pointer
->	O
layer_control	struct
;	O
Dwg_Object	struct
*	O
ctrl	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
_ctrl	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
ctrl	pointer
)	O
{	O
TABLE	pointer
(	O
LAYER	pointer
)	O
;	O
COMMON_TABLE_CONTROL_FLAGS	O
;	O
error	int
|=	O
dwg_dxfb_LAYER_CONTROL	function
(	O
dat	pointer
,	O
ctrl	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
dwg	pointer
->	O
layer_control	struct
.	O
num_entries	short
;	O
i	pointer
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_ctrl	pointer
->	O
entries	pointer
[	O
i	pointer
]	O
)	O
;	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_LAYER	int
)	O
{	O
error	int
|=	O
dwg_dxfb_LAYER	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
}	O
ENDTAB	O
(	O
)	O
;	O
}	O
}	O
{	O
Dwg_Object_STYLE_CONTROL	struct
*	O
_ctrl	pointer
=	O
&	O
dwg	pointer
->	O
style_control	struct
;	O
Dwg_Object	struct
*	O
ctrl	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
_ctrl	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
ctrl	pointer
)	O
{	O
TABLE	pointer
(	O
STYLE	pointer
)	O
;	O
COMMON_TABLE_CONTROL_FLAGS	O
;	O
error	int
|=	O
dwg_dxfb_STYLE_CONTROL	function
(	O
dat	pointer
,	O
ctrl	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
dwg	pointer
->	O
style_control	struct
.	O
num_entries	short
;	O
i	pointer
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_ctrl	pointer
->	O
entries	pointer
[	O
i	pointer
]	O
)	O
;	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_STYLE	int
)	O
{	O
error	int
|=	O
dwg_dxfb_STYLE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
}	O
ENDTAB	O
(	O
)	O
;	O
}	O
}	O
{	O
Dwg_Object_VIEW_CONTROL	struct
*	O
_ctrl	pointer
=	O
&	O
dwg	pointer
->	O
view_control	struct
;	O
Dwg_Object	struct
*	O
ctrl	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
_ctrl	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
ctrl	pointer
)	O
{	O
TABLE	pointer
(	O
VIEW	pointer
)	O
;	O
COMMON_TABLE_CONTROL_FLAGS	O
;	O
error	int
|=	O
dwg_dxfb_VIEW_CONTROL	function
(	O
dat	pointer
,	O
ctrl	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
dwg	pointer
->	O
view_control	struct
.	O
num_entries	short
;	O
i	pointer
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_ctrl	pointer
->	O
entries	pointer
[	O
i	pointer
]	O
)	O
;	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_VIEW	int
)	O
error	int
|=	O
dwg_dxfb_VIEW	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
ENDTAB	O
(	O
)	O
;	O
}	O
}	O
{	O
Dwg_Object_UCS_CONTROL	struct
*	O
_ctrl	pointer
=	O
&	O
dwg	pointer
->	O
ucs_control	struct
;	O
Dwg_Object	struct
*	O
ctrl	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
_ctrl	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
ctrl	pointer
)	O
{	O
TABLE	pointer
(	O
UCS	pointer
)	O
;	O
COMMON_TABLE_CONTROL_FLAGS	O
;	O
error	int
|=	O
dwg_dxfb_UCS_CONTROL	function
(	O
dat	pointer
,	O
ctrl	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
dwg	pointer
->	O
ucs_control	struct
.	O
num_entries	short
;	O
i	pointer
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_ctrl	pointer
->	O
entries	pointer
[	O
i	pointer
]	O
)	O
;	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_UCS	int
)	O
{	O
error	int
|=	O
dwg_dxfb_UCS	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
}	O
ENDTAB	O
(	O
)	O
;	O
}	O
}	O
SINCE	O
(	O
R_13	int
)	O
{	O
Dwg_Object_APPID_CONTROL	struct
*	O
_ctrl	pointer
=	O
&	O
dwg	pointer
->	O
appid_control	struct
;	O
Dwg_Object	struct
*	O
ctrl	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
_ctrl	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
ctrl	pointer
)	O
{	O
TABLE	pointer
(	O
APPID	pointer
)	O
;	O
COMMON_TABLE_CONTROL_FLAGS	O
;	O
error	int
|=	O
dwg_dxfb_APPID_CONTROL	function
(	O
dat	pointer
,	O
ctrl	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
dwg	pointer
->	O
appid_control	struct
.	O
num_entries	short
;	O
i	pointer
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_ctrl	pointer
->	O
entries	pointer
[	O
i	pointer
]	O
)	O
;	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_APPID	int
)	O
{	O
error	int
|=	O
dwg_dxfb_APPID	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
}	O
ENDTAB	O
(	O
)	O
;	O
}	O
}	O
{	O
Dwg_Object_DIMSTYLE_CONTROL	struct
*	O
_ctrl	pointer
=	O
&	O
dwg	pointer
->	O
dimstyle_control	struct
;	O
Dwg_Object	struct
*	O
ctrl	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
_ctrl	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
ctrl	pointer
)	O
{	O
TABLE	pointer
(	O
DIMSTYLE	pointer
)	O
;	O
COMMON_TABLE_CONTROL_FLAGS	O
;	O
dwg_dxfb_DIMSTYLE_CONTROL	function
(	O
dat	pointer
,	O
ctrl	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
dwg	pointer
->	O
dimstyle_control	struct
.	O
num_entries	short
;	O
i	pointer
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_ctrl	pointer
->	O
entries	pointer
[	O
i	pointer
]	O
)	O
;	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_DIMSTYLE	int
)	O
{	O
error	int
|=	O
dwg_dxfb_DIMSTYLE	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
}	O
ENDTAB	O
(	O
)	O
;	O
}	O
}	O
if	O
(	O
0	int
&&	O
dwg	pointer
->	O
vport_entity_control	struct
.	O
num_entries	short
)	O
{	O
Dwg_Object_VPORT_ENTITY_CONTROL	struct
*	O
_ctrl	pointer
=	O
&	O
dwg	pointer
->	O
vport_entity_control	struct
;	O
Dwg_Object	struct
*	O
ctrl	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
_ctrl	pointer
->	O
objid	int
]	O
;	O
if	O
(	O
ctrl	pointer
)	O
{	O
TABLE	pointer
(	O
VPORT_ENTITY	O
)	O
;	O
COMMON_TABLE_CONTROL_FLAGS	O
;	O
error	int
|=	O
dwg_dxfb_VPORT_ENTITY_CONTROL	function
(	O
dat	pointer
,	O
ctrl	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
dwg	pointer
->	O
vport_entity_control	struct
.	O
num_entries	short
;	O
i	pointer
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
dwg_ref_object	function
(	O
dwg	pointer
,	O
_ctrl	pointer
->	O
entries	pointer
[	O
i	pointer
]	O
)	O
;	O
if	O
(	O
obj	pointer
&&	O
obj	pointer
->	O
type	short
==	O
DWG_TYPE_VPORT_ENTITY_HEADER	int
)	O
{	O
error	int
|=	O
dwg_dxfb_VPORT_ENTITY_HEADER	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
}	O
}	O
dwg_dxfb_PROXY_ENTITY	function
(	O
dat	pointer
,	O
&	O
dwg	pointer
->	O
object	pointer
[	O
0	int
]	O
)	O
;	O
ENDTAB	O
(	O
)	O
;	O
}	O
}	O
SINCE	O
(	O
R_13	int
)	O
{	O
Dwg_Object_BLOCK_CONTROL	struct
*	O
_ctrl	pointer
=	O
&	O
dwg	pointer
->	O
block_control	struct
;	O
Dwg_Object	struct
*	O
ctrl	pointer
=	O
_ctrl	pointer
?	O
&	O
dwg	pointer
->	O
object	pointer
[	O
_ctrl	pointer
->	O
objid	int
]	O
:	O
NULL	O
;	O
if	O
(	O
!	O
ctrl	pointer
)	O
{	O
LOG_ERROR	O
(	O
"BLOCK_CONTROL missing"	pointer
)	O
;	O
return	O
DWG_ERR_INVALIDDWG	int
;	O
}	O
TABLE	pointer
(	O
BLOCK_RECORD	O
)	O
;	O
COMMON_TABLE_CONTROL_FLAGS	O
;	O
error	int
|=	O
dwg_dxfb_BLOCK_CONTROL	function
(	O
dat	pointer
,	O
ctrl	pointer
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
dwg	pointer
->	O
num_objects	int
;	O
i	pointer
++	O
)	O
{	O
Dwg_Object	struct
*	O
hdr	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
i	pointer
]	O
;	O
if	O
(	O
hdr	pointer
&&	O
hdr	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
&&	O
hdr	pointer
->	O
type	short
==	O
DWG_TYPE_BLOCK_HEADER	int
)	O
{	O
RECORD	O
(	O
BLOCK_RECORD	O
)	O
;	O
error	int
|=	O
dwg_dxfb_BLOCK_HEADER	function
(	O
dat	pointer
,	O
hdr	pointer
)	O
;	O
}	O
}	O
ENDTAB	O
(	O
)	O
;	O
}	O
ENDSEC	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
dxfb_ENDBLK_empty	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
hdr	pointer
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
Dwg_Object	struct
)	O
)	O
;	O
obj	pointer
->	O
parent	pointer
=	O
hdr	pointer
->	O
parent	pointer
;	O
obj	pointer
->	O
index	short
=	O
obj	pointer
->	O
parent	pointer
->	O
num_objects	int
;	O
dwg_add_ENDBLK	function
(	O
obj	pointer
)	O
;	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
ownerhandle	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
Dwg_Object_Ref	struct
)	O
)	O
;	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
ownerhandle	pointer
->	O
obj	pointer
=	O
(	O
Dwg_Object	struct
*	O
)	O
hdr	pointer
;	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
ownerhandle	pointer
->	O
handleref	struct
=	O
hdr	pointer
->	O
handle	pointer
;	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
ownerhandle	pointer
->	O
absolute_ref	long
=	O
hdr	pointer
->	O
handle	pointer
.	O
value	double
;	O
dwg_dxfb_ENDBLK	function
(	O
dat	pointer
,	O
obj	pointer
)	O
;	O
free	function
(	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
ENDBLK	pointer
)	O
;	O
free	function
(	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
ownerhandle	pointer
)	O
;	O
free	function
(	O
obj	pointer
->	O
tio	union
.	O
entity	long
)	O
;	O
free	function
(	O
obj	pointer
)	O
;	O
}	O
static	O
int	O
dxfb_block_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
const	O
Dwg_Object	struct
*	O
restrict	O
mspace	pointer
,	O
Dwg_Object	struct
*	O
restrict	O
hdr	pointer
,	O
int	O
*	O
restrict	O
i	pointer
)	O
{	O
int	O
error	int
=	O
0	int
;	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
=	O
get_first_owned_block	function
(	O
hdr	pointer
)	O
;	O
const	O
Dwg_Object_BLOCK_HEADER	struct
*	O
restrict	O
_hdr	pointer
=	O
hdr	pointer
->	O
tio	union
.	O
object	pointer
->	O
tio	union
.	O
BLOCK_HEADER	pointer
;	O
Dwg_Object	struct
*	O
restrict	O
endblk	pointer
;	O
Dwg_Data	struct
*	O
dwg	pointer
=	O
hdr	pointer
->	O
parent	pointer
;	O
unsigned	O
long	O
int	O
mspace_ref	long
=	O
mspace	pointer
->	O
handle	pointer
.	O
value	double
;	O
if	O
(	O
obj	pointer
)	O
error	int
|=	O
dwg_dxfb_object	function
(	O
dat	pointer
,	O
obj	pointer
,	O
i	pointer
)	O
;	O
else	O
{	O
LOG_ERROR	O
(	O
"BLOCK_HEADER.block_entity missing"	pointer
)	O
;	O
return	O
DWG_ERR_INVALIDDWG	int
;	O
}	O
if	O
(	O
(	O
hdr	pointer
==	O
mspace	pointer
)	O
||	O
(	O
hdr	pointer
->	O
index	short
==	O
mspace	pointer
->	O
index	short
)	O
)	O
obj	pointer
=	O
NULL	O
;	O
else	O
obj	pointer
=	O
get_first_owned_entity	function
(	O
hdr	pointer
)	O
;	O
while	O
(	O
obj	pointer
)	O
{	O
if	O
(	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_ENTITY	int
&&	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
ownerhandle	pointer
!=	O
NULL	O
&&	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
ownerhandle	pointer
->	O
absolute_ref	long
!=	O
mspace_ref	long
)	O
error	int
|=	O
dwg_dxfb_object	function
(	O
dat	pointer
,	O
obj	pointer
,	O
i	pointer
)	O
;	O
obj	pointer
=	O
get_next_owned_entity	function
(	O
hdr	pointer
,	O
obj	pointer
)	O
;	O
}	O
endblk	pointer
=	O
get_last_owned_block	function
(	O
hdr	pointer
)	O
;	O
if	O
(	O
endblk	pointer
)	O
error	int
|=	O
dwg_dxfb_ENDBLK	function
(	O
dat	pointer
,	O
endblk	pointer
)	O
;	O
else	O
{	O
LOG_WARN	O
(	O
"Empty ENDBLK for \"%s\" "	pointer
FORMAT_BL	O
,	O
_hdr	pointer
->	O
name	pointer
,	O
hdr	pointer
?	O
hdr	pointer
->	O
tio	union
.	O
object	pointer
->	O
objid	int
:	O
0	int
)	O
;	O
dxfb_ENDBLK_empty	function
(	O
dat	pointer
,	O
hdr	pointer
)	O
;	O
}	O
return	O
error	int
;	O
}	O
static	O
int	O
dxfb_blocks_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
int	O
error	int
=	O
0	int
;	O
int	O
i	pointer
=	O
0	int
;	O
Dwg_Object	struct
*	O
mspace	pointer
=	O
dwg_model_space_object	function
(	O
dwg	pointer
)	O
;	O
if	O
(	O
!	O
mspace	pointer
)	O
return	O
DWG_ERR_UNHANDLEDCLASS	int
;	O
SECTION	O
(	O
BLOCKS	O
)	O
;	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
(	O
BITCODE_BL	int
)	O
i	pointer
<	O
dwg	pointer
->	O
num_objects	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
dwg	pointer
->	O
object	pointer
[	O
i	pointer
]	O
.	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
&&	O
dwg	pointer
->	O
object	pointer
[	O
i	pointer
]	O
.	O
type	short
==	O
DWG_TYPE_BLOCK_HEADER	int
)	O
{	O
error	int
|=	O
dxfb_block_write	function
(	O
dat	pointer
,	O
mspace	pointer
,	O
&	O
dwg	pointer
->	O
object	pointer
[	O
i	pointer
]	O
,	O
&	O
i	pointer
)	O
;	O
}	O
}	O
}	O
ENDSEC	O
(	O
)	O
;	O
return	O
error	int
;	O
}	O
static	O
int	O
dxfb_entities_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
int	O
error	int
=	O
0	int
;	O
int	O
i	pointer
;	O
Dwg_Object	struct
*	O
mspace	pointer
=	O
dwg_model_space_object	function
(	O
dwg	pointer
)	O
;	O
if	O
(	O
!	O
mspace	pointer
)	O
return	O
DWG_ERR_INVALIDDWG	int
;	O
SECTION	O
(	O
ENTITIES	O
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
(	O
BITCODE_BL	int
)	O
i	pointer
<	O
dwg	pointer
->	O
num_objects	int
;	O
i	pointer
++	O
)	O
{	O
Dwg_Object	struct
*	O
obj	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
i	pointer
]	O
;	O
if	O
(	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_ENTITY	int
&&	O
obj	pointer
->	O
type	short
!=	O
DWG_TYPE_BLOCK	int
&&	O
obj	pointer
->	O
type	short
!=	O
DWG_TYPE_ENDBLK	int
)	O
{	O
Dwg_Object_Ref	struct
*	O
owner	pointer
=	O
obj	pointer
->	O
tio	union
.	O
entity	long
->	O
ownerhandle	pointer
;	O
if	O
(	O
!	O
owner	pointer
||	O
(	O
owner	pointer
&&	O
owner	pointer
->	O
obj	pointer
==	O
mspace	pointer
)	O
)	O
error	int
|=	O
dwg_dxfb_object	function
(	O
dat	pointer
,	O
obj	pointer
,	O
&	O
i	pointer
)	O
;	O
}	O
}	O
ENDSEC	O
(	O
)	O
;	O
return	O
error	int
;	O
}	O
static	O
int	O
dxfb_objects_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
int	O
error	int
=	O
0	int
;	O
int	O
i	pointer
;	O
SECTION	O
(	O
OBJECTS	O
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
(	O
BITCODE_BL	int
)	O
i	pointer
<	O
dwg	pointer
->	O
num_objects	int
;	O
i	pointer
++	O
)	O
{	O
const	O
Dwg_Object	struct
*	O
restrict	O
obj	pointer
=	O
&	O
dwg	pointer
->	O
object	pointer
[	O
i	pointer
]	O
;	O
if	O
(	O
obj	pointer
->	O
supertype	enum
==	O
DWG_SUPERTYPE_OBJECT	int
&&	O
obj	pointer
->	O
type	short
!=	O
DWG_TYPE_BLOCK_HEADER	int
&&	O
!	O
dwg_obj_is_control	function
(	O
obj	pointer
)	O
)	O
error	int
|=	O
dwg_dxfb_object	function
(	O
dat	pointer
,	O
obj	pointer
,	O
&	O
i	pointer
)	O
;	O
}	O
ENDSEC	O
(	O
)	O
;	O
return	O
error	int
;	O
}	O
static	O
int	O
dxfb_thumbnail_write	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
Bit_Chain	struct
*	O
pic	pointer
=	O
(	O
Bit_Chain	struct
*	O
)	O
&	O
dwg	pointer
->	O
thumbnail	struct
;	O
if	O
(	O
pic	pointer
->	O
chain	pointer
&&	O
pic	pointer
->	O
size	char
&&	O
pic	pointer
->	O
size	char
>	O
10	int
)	O
{	O
SECTION	O
(	O
THUMBNAILIMAGE	O
)	O
;	O
VALUE_RL	O
(	O
pic	pointer
->	O
size	char
,	O
90	int
)	O
;	O
VALUE_BINARY	O
(	O
pic	pointer
->	O
chain	pointer
,	O
pic	pointer
->	O
size	char
,	O
310	int
)	O
;	O
ENDSEC	O
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
dwg_write_dxfb	function
(	O
Bit_Chain	struct
*	O
restrict	O
dat	pointer
,	O
Dwg_Data	struct
*	O
restrict	O
dwg	pointer
)	O
{	O
const	O
int	O
minimal	int
=	O
dwg	pointer
->	O
opts	int
&	O
DWG_OPTS_MINIMAL	int
;	O
loglevel	int
=	O
dwg	pointer
->	O
opts	int
&	O
DWG_OPTS_LOGLEVEL	int
;	O
if	O
(	O
dat	pointer
->	O
from_version	enum
==	O
R_INVALID	int
)	O
dat	pointer
->	O
from_version	enum
=	O
dat	pointer
->	O
version	short
;	O
fprintf	function
(	O
dat	pointer
->	O
fh	pointer
,	O
"AutoCAD Binary DXF\r\n%c%c"	pointer
,	O
0x1a	int
,	O
0	int
)	O
;	O
VALUE_TV	O
(	O
PACKAGE_STRING	pointer
,	O
999	int
)	O
;	O
dxfb_header_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
;	O
if	O
(	O
!	O
minimal	int
)	O
{	O
if	O
(	O
(	O
dat	pointer
->	O
from_version	enum
>=	O
R_2000	int
&&	O
dwg	pointer
->	O
num_classes	short
)	O
||	O
dat	pointer
->	O
version	short
>=	O
R_2000	int
)	O
{	O
if	O
(	O
dxfb_classes_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
>=	O
DWG_ERR_CRITICAL	O
)	O
goto	O
fail	O
;	O
}	O
if	O
(	O
dxfb_tables_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
>=	O
DWG_ERR_CRITICAL	O
)	O
goto	O
fail	O
;	O
if	O
(	O
dxfb_blocks_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
>=	O
DWG_ERR_CRITICAL	O
)	O
goto	O
fail	O
;	O
}	O
if	O
(	O
dxfb_entities_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
>=	O
DWG_ERR_CRITICAL	O
)	O
goto	O
fail	O
;	O
if	O
(	O
!	O
minimal	int
)	O
{	O
SINCE	O
(	O
R_13	int
)	O
{	O
if	O
(	O
dxfb_objects_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
>=	O
DWG_ERR_CRITICAL	O
)	O
goto	O
fail	O
;	O
}	O
SINCE	O
(	O
R_2000	int
)	O
{	O
if	O
(	O
dxfb_thumbnail_write	function
(	O
dat	pointer
,	O
dwg	pointer
)	O
>=	O
DWG_ERR_CRITICAL	O
)	O
goto	O
fail	O
;	O
}	O
}	O
RECORD	O
(	O
EOF	O
)	O
;	O
return	O
0	int
;	O
fail	O
:	O
return	O
1	int
;	O
}	O
