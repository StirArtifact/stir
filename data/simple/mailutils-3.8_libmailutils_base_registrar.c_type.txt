static	O
mu_list_t	pointer
registrar_list	pointer
;	O
struct	O
mu_monitor	struct
registrar_monitor	struct
=	O
MU_MONITOR_INITIALIZER	O
;	O
static	O
mu_record_t	pointer
mu_default_record	pointer
;	O
void	O
mu_registrar_set_default_record	function
(	O
mu_record_t	pointer
record	pointer
)	O
{	O
mu_default_record	pointer
=	O
record	pointer
;	O
}	O
int	O
mu_registrar_get_default_record	function
(	O
mu_record_t	pointer
*	O
prec	pointer
)	O
{	O
if	O
(	O
mu_default_record	pointer
)	O
{	O
if	O
(	O
prec	pointer
)	O
*	O
prec	pointer
=	O
mu_default_record	pointer
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
int	O
mu_registrar_set_default_scheme	function
(	O
const	O
char	O
*	O
scheme	pointer
)	O
{	O
int	O
status	int
;	O
mu_record_t	pointer
rec	pointer
;	O
status	int
=	O
mu_registrar_lookup_scheme	function
(	O
scheme	pointer
,	O
&	O
rec	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_registrar_set_default_record	function
(	O
rec	pointer
)	O
;	O
return	O
status	int
;	O
}	O
const	O
char	O
*	O
mu_registrar_get_default_scheme	function
(	O
void	O
)	O
{	O
return	O
mu_default_record	pointer
?	O
mu_default_record	pointer
->	O
scheme	pointer
:	O
NULL	O
;	O
}	O
static	O
int	O
_registrar_get_list	function
(	O
mu_list_t	pointer
*	O
plist	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
plist	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
mu_monitor_wrlock	function
(	O
&	O
registrar_monitor	struct
)	O
;	O
if	O
(	O
registrar_list	pointer
==	O
NULL	O
)	O
status	int
=	O
mu_list_create	function
(	O
&	O
registrar_list	pointer
)	O
;	O
*	O
plist	pointer
=	O
registrar_list	pointer
;	O
mu_monitor_unlock	function
(	O
&	O
registrar_monitor	struct
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_registrar_get_list	function
(	O
mu_list_t	pointer
*	O
plist	pointer
)	O
{	O
static	O
int	O
warned	int
;	O
if	O
(	O
!	O
warned	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"program uses mu_registrar_get_list(), which is deprecated"	pointer
)	O
)	O
;	O
warned	int
=	O
1	int
;	O
}	O
return	O
_registrar_get_list	function
(	O
plist	pointer
)	O
;	O
}	O
int	O
mu_registrar_get_iterator	function
(	O
mu_iterator_t	pointer
*	O
pitr	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
pitr	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
mu_monitor_wrlock	function
(	O
&	O
registrar_monitor	struct
)	O
;	O
if	O
(	O
registrar_list	pointer
==	O
NULL	O
)	O
{	O
status	int
=	O
mu_list_create	function
(	O
&	O
registrar_list	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
status	int
=	O
mu_list_get_iterator	function
(	O
registrar_list	pointer
,	O
pitr	pointer
)	O
;	O
mu_monitor_unlock	function
(	O
&	O
registrar_monitor	struct
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_registrar_lookup_scheme	function
(	O
const	O
char	O
*	O
scheme	pointer
,	O
mu_record_t	pointer
*	O
precord	pointer
)	O
{	O
size_t	long
len	int
;	O
mu_iterator_t	pointer
iterator	pointer
;	O
int	O
status	int
=	O
mu_registrar_get_iterator	function
(	O
&	O
iterator	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
status	int
=	O
MU_ERR_NOENT	O
;	O
len	int
=	O
strcspn	function
(	O
scheme	pointer
,	O
":"	pointer
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
iterator	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
iterator	pointer
)	O
;	O
mu_iterator_next	function
(	O
iterator	pointer
)	O
)	O
{	O
mu_record_t	pointer
record	pointer
;	O
mu_iterator_current	function
(	O
iterator	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
record	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
record	pointer
->	O
scheme	pointer
)	O
==	O
len	int
&&	O
memcmp	function
(	O
record	pointer
->	O
scheme	pointer
,	O
scheme	pointer
,	O
len	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
precord	pointer
)	O
*	O
precord	pointer
=	O
record	pointer
;	O
status	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
iterator	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_registrar_lookup_url	function
(	O
mu_url_t	pointer
url	pointer
,	O
int	O
flags	int
,	O
mu_record_t	pointer
*	O
precord	pointer
,	O
int	O
*	O
pflags	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
;	O
mu_record_t	pointer
last_record	pointer
=	O
NULL	O
;	O
int	O
last_flags	int
=	O
0	int
;	O
int	O
status	int
=	O
mu_registrar_get_iterator	function
(	O
&	O
iterator	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
status	int
=	O
MU_ERR_NOENT	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
iterator	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
iterator	pointer
)	O
;	O
mu_iterator_next	function
(	O
iterator	pointer
)	O
)	O
{	O
int	O
rc	int
;	O
mu_record_t	pointer
record	pointer
;	O
mu_iterator_current	function
(	O
iterator	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
record	pointer
)	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_record_is_scheme	function
(	O
record	pointer
,	O
url	pointer
,	O
flags	int
)	O
)	O
)	O
{	O
if	O
(	O
rc	int
==	O
flags	int
)	O
{	O
status	int
=	O
0	int
;	O
last_record	pointer
=	O
record	pointer
;	O
last_flags	int
=	O
rc	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
rc	int
>	O
last_flags	int
)	O
{	O
status	int
=	O
0	int
;	O
last_record	pointer
=	O
record	pointer
;	O
last_flags	int
=	O
rc	int
;	O
}	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
iterator	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
precord	pointer
)	O
*	O
precord	pointer
=	O
last_record	pointer
;	O
if	O
(	O
pflags	pointer
)	O
*	O
pflags	pointer
=	O
last_flags	int
;	O
}	O
else	O
if	O
(	O
!	O
mu_is_proto	function
(	O
mu_url_to_string	function
(	O
url	pointer
)	O
)	O
&&	O
mu_registrar_get_default_record	function
(	O
precord	pointer
)	O
==	O
0	int
)	O
{	O
status	int
=	O
0	int
;	O
if	O
(	O
pflags	pointer
)	O
*	O
pflags	pointer
=	O
flags	int
&	O
MU_FOLDER_ATTRIBUTE_FILE	int
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_registrar_lookup	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
flags	int
,	O
mu_record_t	pointer
*	O
precord	pointer
,	O
int	O
*	O
pflags	pointer
)	O
{	O
int	O
rc	int
;	O
mu_url_t	pointer
url	pointer
;	O
rc	int
=	O
mu_url_create	function
(	O
&	O
url	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_registrar_lookup_url	function
(	O
url	pointer
,	O
flags	int
,	O
precord	pointer
,	O
pflags	pointer
)	O
;	O
mu_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_compare_prio	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
value	pointer
)	O
{	O
const	O
mu_record_t	pointer
a	pointer
=	O
(	O
const	O
mu_record_t	pointer
)	O
item	pointer
;	O
const	O
mu_record_t	pointer
b	pointer
=	O
(	O
const	O
mu_record_t	pointer
)	O
value	pointer
;	O
if	O
(	O
a	pointer
->	O
priority	int
>	O
b	pointer
->	O
priority	int
)	O
return	O
0	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
mu_registrar_record	function
(	O
mu_record_t	pointer
record	pointer
)	O
{	O
int	O
status	int
;	O
mu_list_t	pointer
list	pointer
;	O
mu_list_comparator_t	pointer
comp	pointer
;	O
if	O
(	O
!	O
record	pointer
)	O
return	O
0	int
;	O
_registrar_get_list	function
(	O
&	O
list	pointer
)	O
;	O
comp	pointer
=	O
mu_list_set_comparator	function
(	O
list	pointer
,	O
_compare_prio	function
)	O
;	O
status	int
=	O
mu_list_insert	function
(	O
list	pointer
,	O
record	pointer
,	O
record	pointer
,	O
1	int
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
status	int
=	O
mu_list_append	function
(	O
list	pointer
,	O
record	pointer
)	O
;	O
mu_list_set_comparator	function
(	O
list	pointer
,	O
comp	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_unregistrar_record	function
(	O
mu_record_t	pointer
record	pointer
)	O
{	O
mu_list_t	pointer
list	pointer
;	O
_registrar_get_list	function
(	O
&	O
list	pointer
)	O
;	O
mu_list_remove	function
(	O
list	pointer
,	O
record	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_record_is_scheme	function
(	O
mu_record_t	pointer
record	pointer
,	O
mu_url_t	pointer
url	pointer
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
record	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
record	pointer
->	O
_is_scheme	pointer
)	O
return	O
record	pointer
->	O
_is_scheme	pointer
(	O
record	pointer
,	O
url	pointer
,	O
flags	int
)	O
;	O
if	O
(	O
mu_url_is_scheme	function
(	O
url	pointer
,	O
record	pointer
->	O
scheme	pointer
)	O
)	O
return	O
MU_FOLDER_ATTRIBUTE_ALL	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_record_is_local	function
(	O
mu_record_t	pointer
record	pointer
)	O
{	O
return	O
record	pointer
->	O
flags	int
&	O
MU_RECORD_LOCAL	int
;	O
}	O
int	O
mu_record_get_url	function
(	O
mu_record_t	pointer
record	pointer
,	O
int	O
(	O
*	O
(	O
*	O
_purl	pointer
)	O
)	O
(	O
mu_url_t	pointer
)	O
)	O
{	O
if	O
(	O
record	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
_purl	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
record	pointer
->	O
_get_url	pointer
)	O
return	O
record	pointer
->	O
_get_url	pointer
(	O
record	pointer
,	O
_purl	pointer
)	O
;	O
*	O
_purl	pointer
=	O
record	pointer
->	O
_url	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_record_get_mailbox	function
(	O
mu_record_t	pointer
record	pointer
,	O
int	O
(	O
*	O
(	O
*	O
_pmailbox	pointer
)	O
)	O
(	O
mu_mailbox_t	pointer
)	O
)	O
{	O
if	O
(	O
record	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
_pmailbox	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
record	pointer
->	O
_get_mailbox	pointer
)	O
return	O
record	pointer
->	O
_get_mailbox	pointer
(	O
record	pointer
,	O
_pmailbox	pointer
)	O
;	O
*	O
_pmailbox	pointer
=	O
record	pointer
->	O
_mailbox	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_record_get_mailer	function
(	O
mu_record_t	pointer
record	pointer
,	O
int	O
(	O
*	O
(	O
*	O
_pmailer	pointer
)	O
)	O
(	O
mu_mailer_t	pointer
)	O
)	O
{	O
if	O
(	O
record	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
_pmailer	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
record	pointer
->	O
_get_mailer	pointer
)	O
return	O
record	pointer
->	O
_get_mailer	pointer
(	O
record	pointer
,	O
_pmailer	pointer
)	O
;	O
*	O
_pmailer	pointer
=	O
record	pointer
->	O
_mailer	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_record_get_folder	function
(	O
mu_record_t	pointer
record	pointer
,	O
int	O
(	O
*	O
(	O
*	O
_pfolder	pointer
)	O
)	O
(	O
mu_folder_t	pointer
)	O
)	O
{	O
if	O
(	O
record	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
_pfolder	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
record	pointer
->	O
_get_folder	pointer
)	O
return	O
record	pointer
->	O
_get_folder	pointer
(	O
record	pointer
,	O
_pfolder	pointer
)	O
;	O
*	O
_pfolder	pointer
=	O
record	pointer
->	O
_folder	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_record_list_p	function
(	O
mu_record_t	pointer
record	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
flags	int
)	O
{	O
return	O
record	pointer
==	O
NULL	O
||	O
!	O
record	pointer
->	O
_list_p	pointer
||	O
record	pointer
->	O
_list_p	pointer
(	O
record	pointer
,	O
name	pointer
,	O
flags	int
)	O
;	O
}	O
int	O
mu_record_check_url	function
(	O
mu_record_t	pointer
record	pointer
,	O
mu_url_t	pointer
url	pointer
,	O
int	O
*	O
pmask	pointer
)	O
{	O
int	O
mask	int
;	O
int	O
flags	int
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
record	pointer
||	O
!	O
url	pointer
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_url_get_flags	function
(	O
url	pointer
,	O
&	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mask	int
=	O
flags	int
&	O
record	pointer
->	O
url_must_have	int
;	O
if	O
(	O
mask	int
!=	O
record	pointer
->	O
url_must_have	int
)	O
{	O
if	O
(	O
pmask	pointer
)	O
*	O
pmask	pointer
=	O
record	pointer
->	O
url_must_have	int
&	O
~	O
mask	int
;	O
return	O
MU_ERR_URL_MISS_PARTS	O
;	O
}	O
mask	int
=	O
flags	int
&	O
~	O
(	O
record	pointer
->	O
url_may_have	int
|	O
record	pointer
->	O
url_must_have	int
)	O
;	O
if	O
(	O
mask	int
)	O
{	O
if	O
(	O
pmask	pointer
)	O
*	O
pmask	pointer
=	O
mask	int
;	O
return	O
MU_ERR_URL_EXTRA_PARTS	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_registrar_test_local_url	function
(	O
mu_url_t	pointer
url	pointer
,	O
int	O
*	O
pres	pointer
)	O
{	O
int	O
rc	int
;	O
mu_record_t	pointer
rec	pointer
;	O
if	O
(	O
!	O
url	pointer
||	O
!	O
pres	pointer
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_registrar_lookup_url	function
(	O
url	pointer
,	O
MU_FOLDER_ATTRIBUTE_ALL	O
,	O
&	O
rec	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
pres	pointer
=	O
mu_record_is_local	function
(	O
rec	pointer
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
listable_closure	struct
{	O
char	O
const	O
*	O
name	pointer
;	O
int	O
flags	int
;	O
}	O
;	O
static	O
int	O
record_listable	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_record_t	pointer
record	pointer
=	O
item	pointer
;	O
struct	O
listable_closure	struct
*	O
cls	pointer
=	O
data	pointer
;	O
return	O
!	O
mu_record_list_p	function
(	O
record	pointer
,	O
cls	pointer
->	O
name	pointer
,	O
cls	pointer
->	O
flags	int
)	O
;	O
}	O
int	O
mu_registrar_list_p	function
(	O
mu_list_t	pointer
rlist	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
listable_closure	struct
cls	pointer
=	O
{	O
name	pointer
,	O
flags	int
}	O
;	O
if	O
(	O
!	O
rlist	pointer
)	O
rlist	pointer
=	O
registrar_list	pointer
;	O
return	O
!	O
mu_list_foreach	function
(	O
rlist	pointer
,	O
record_listable	function
,	O
&	O
cls	pointer
)	O
;	O
}	O
int	O
mu_registrar_apply_filter	function
(	O
int	O
(	O
*	O
flt	pointer
)	O
(	O
mu_record_t	pointer
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
;	O
int	O
status	int
=	O
mu_registrar_get_iterator	function
(	O
&	O
iterator	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
mu_monitor_wrlock	function
(	O
&	O
registrar_monitor	struct
)	O
;	O
for	O
(	O
mu_iterator_first	function
(	O
iterator	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
iterator	pointer
)	O
;	O
mu_iterator_next	function
(	O
iterator	pointer
)	O
)	O
{	O
mu_record_t	pointer
record	pointer
;	O
mu_iterator_current	function
(	O
iterator	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
record	pointer
)	O
;	O
if	O
(	O
flt	pointer
(	O
record	pointer
,	O
data	pointer
)	O
)	O
mu_list_remove	function
(	O
registrar_list	pointer
,	O
record	pointer
)	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
iterator	pointer
)	O
;	O
mu_monitor_unlock	function
(	O
&	O
registrar_monitor	struct
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
match_closure	struct
{	O
mu_url_t	pointer
url	pointer
;	O
int	O
flags	int
;	O
int	O
err	int
;	O
}	O
;	O
static	O
int	O
select_match	function
(	O
void	O
*	O
*	O
itmv	pointer
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	pointer
)	O
{	O
struct	O
match_closure	struct
*	O
mc	pointer
=	O
call_data	pointer
;	O
int	O
rc	int
=	O
mu_record_is_scheme	function
(	O
itmv	pointer
[	O
0	int
]	O
,	O
mc	pointer
->	O
url	pointer
,	O
mc	pointer
->	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
struct	O
mu_record_match	struct
*	O
match	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
match	pointer
)	O
)	O
;	O
if	O
(	O
!	O
match	pointer
)	O
{	O
mc	pointer
->	O
err	int
=	O
errno	O
;	O
return	O
MU_LIST_MAP_STOP	int
;	O
}	O
match	pointer
->	O
record	pointer
=	O
itmv	pointer
[	O
0	int
]	O
;	O
match	pointer
->	O
flags	int
=	O
rc	int
;	O
itmv	pointer
[	O
0	int
]	O
=	O
match	pointer
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
return	O
MU_LIST_MAP_SKIP	int
;	O
}	O
int	O
mu_registrar_match_records	function
(	O
char	O
const	O
*	O
name	pointer
,	O
int	O
flags	int
,	O
mu_list_t	pointer
*	O
ret	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
match_closure	struct
mc	pointer
;	O
mu_list_t	pointer
lst	pointer
;	O
rc	int
=	O
mu_url_create	function
(	O
&	O
mc	pointer
.	O
url	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mc	pointer
.	O
flags	int
=	O
flags	int
;	O
mc	pointer
.	O
err	int
=	O
0	int
;	O
mu_monitor_wrlock	function
(	O
&	O
registrar_monitor	struct
)	O
;	O
rc	int
=	O
mu_list_map	function
(	O
registrar_list	pointer
,	O
select_match	function
,	O
&	O
mc	pointer
,	O
1	int
,	O
&	O
lst	pointer
)	O
;	O
mu_monitor_unlock	function
(	O
&	O
registrar_monitor	struct
)	O
;	O
mu_url_destroy	function
(	O
&	O
mc	pointer
.	O
url	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_list_set_destroy_item	function
(	O
lst	pointer
,	O
mu_list_free_item	function
)	O
;	O
if	O
(	O
mc	pointer
.	O
err	int
)	O
{	O
mu_list_destroy	function
(	O
&	O
lst	pointer
)	O
;	O
rc	int
=	O
mc	pointer
.	O
err	int
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
ret	pointer
=	O
lst	pointer
;	O
return	O
rc	int
;	O
}	O
