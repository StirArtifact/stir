static	O
void	O
print_tree_structure	function
(	O
const	O
struct	O
avl_node	struct
*	O
node	pointer
,	O
int	O
level	int
)	O
{	O
if	O
(	O
level	int
>	O
16	int
)	O
{	O
printf	function
(	O
"[...]"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
;	O
printf	function
(	O
"%d"	pointer
,	O
*	O
(	O
int	O
*	O
)	O
node	pointer
->	O
avl_data	pointer
)	O
;	O
if	O
(	O
node	pointer
->	O
avl_link	array
[	O
0	int
]	O
!=	O
NULL	O
||	O
node	pointer
->	O
avl_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
putchar	function
(	O
'('	O
)	O
;	O
print_tree_structure	function
(	O
node	pointer
->	O
avl_link	array
[	O
0	int
]	O
,	O
level	int
+	O
1	int
)	O
;	O
if	O
(	O
node	pointer
->	O
avl_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
putchar	function
(	O
','	O
)	O
;	O
print_tree_structure	function
(	O
node	pointer
->	O
avl_link	array
[	O
1	int
]	O
,	O
level	int
+	O
1	int
)	O
;	O
}	O
putchar	function
(	O
')'	O
)	O
;	O
}	O
}	O
void	O
print_whole_tree	function
(	O
const	O
struct	O
avl_table	struct
*	O
tree	pointer
,	O
const	O
char	O
*	O
title	pointer
)	O
{	O
printf	function
(	O
"%s: "	pointer
,	O
title	pointer
)	O
;	O
print_tree_structure	function
(	O
tree	pointer
->	O
avl_root	pointer
,	O
0	int
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
static	O
int	O
check_traverser	function
(	O
struct	O
avl_traverser	struct
*	O
trav	pointer
,	O
int	O
i	int
,	O
int	O
n	int
,	O
const	O
char	O
*	O
label	pointer
)	O
{	O
int	O
okay	int
=	O
1	int
;	O
int	O
*	O
cur	pointer
,	O
*	O
prev	pointer
,	O
*	O
next	pointer
;	O
prev	pointer
=	O
avl_t_prev	function
(	O
trav	pointer
)	O
;	O
if	O
(	O
(	O
i	int
==	O
0	int
&&	O
prev	pointer
!=	O
NULL	O
)	O
||	O
(	O
i	int
>	O
0	int
&&	O
(	O
prev	pointer
==	O
NULL	O
||	O
*	O
prev	pointer
!=	O
i	int
-	O
1	int
)	O
)	O
)	O
{	O
printf	function
(	O
"   %s traverser ahead of %d, but should be ahead of %d.\n"	pointer
,	O
label	pointer
,	O
prev	pointer
!=	O
NULL	O
?	O
*	O
prev	pointer
:	O
-	O
1	int
,	O
i	int
==	O
0	int
?	O
-	O
1	int
:	O
i	int
-	O
1	int
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
avl_t_next	function
(	O
trav	pointer
)	O
;	O
cur	pointer
=	O
avl_t_cur	function
(	O
trav	pointer
)	O
;	O
if	O
(	O
cur	pointer
==	O
NULL	O
||	O
*	O
cur	pointer
!=	O
i	int
)	O
{	O
printf	function
(	O
"   %s traverser at %d, but should be at %d.\n"	pointer
,	O
label	pointer
,	O
cur	pointer
!=	O
NULL	O
?	O
*	O
cur	pointer
:	O
-	O
1	int
,	O
i	int
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
next	pointer
=	O
avl_t_next	function
(	O
trav	pointer
)	O
;	O
if	O
(	O
(	O
i	int
==	O
n	int
-	O
1	int
&&	O
next	pointer
!=	O
NULL	O
)	O
||	O
(	O
i	int
!=	O
n	int
-	O
1	int
&&	O
(	O
next	pointer
==	O
NULL	O
||	O
*	O
next	pointer
!=	O
i	int
+	O
1	int
)	O
)	O
)	O
{	O
printf	function
(	O
"   %s traverser behind %d, but should be behind %d.\n"	pointer
,	O
label	pointer
,	O
next	pointer
!=	O
NULL	O
?	O
*	O
next	pointer
:	O
-	O
1	int
,	O
i	int
==	O
n	int
-	O
1	int
?	O
-	O
1	int
:	O
i	int
+	O
1	int
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
avl_t_prev	function
(	O
trav	pointer
)	O
;	O
return	O
okay	int
;	O
}	O
static	O
int	O
compare_trees	function
(	O
struct	O
avl_node	struct
*	O
a	pointer
,	O
struct	O
avl_node	struct
*	O
b	pointer
)	O
{	O
int	O
okay	int
;	O
if	O
(	O
a	pointer
==	O
NULL	O
||	O
b	pointer
==	O
NULL	O
)	O
{	O
assert	O
(	O
a	pointer
==	O
NULL	O
&&	O
b	pointer
==	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
*	O
(	O
int	O
*	O
)	O
a	pointer
->	O
avl_data	pointer
!=	O
*	O
(	O
int	O
*	O
)	O
b	pointer
->	O
avl_data	pointer
||	O
(	O
(	O
a	pointer
->	O
avl_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
!=	O
(	O
b	pointer
->	O
avl_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
)	O
||	O
(	O
(	O
a	pointer
->	O
avl_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
!=	O
(	O
b	pointer
->	O
avl_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
)	O
||	O
a	pointer
->	O
avl_balance	char
!=	O
b	pointer
->	O
avl_balance	char
)	O
{	O
printf	function
(	O
" Copied nodes differ: a=%d (bal=%d) b=%d (bal=%d) a:"	pointer
,	O
*	O
(	O
int	O
*	O
)	O
a	pointer
->	O
avl_data	pointer
,	O
a	pointer
->	O
avl_balance	char
,	O
*	O
(	O
int	O
*	O
)	O
b	pointer
->	O
avl_data	pointer
,	O
b	pointer
->	O
avl_balance	char
)	O
;	O
if	O
(	O
a	pointer
->	O
avl_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
printf	function
(	O
"l"	pointer
)	O
;	O
if	O
(	O
a	pointer
->	O
avl_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
printf	function
(	O
"r"	pointer
)	O
;	O
printf	function
(	O
" b:"	pointer
)	O
;	O
if	O
(	O
b	pointer
->	O
avl_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
printf	function
(	O
"l"	pointer
)	O
;	O
if	O
(	O
b	pointer
->	O
avl_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
printf	function
(	O
"r"	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
okay	int
=	O
1	int
;	O
if	O
(	O
a	pointer
->	O
avl_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
okay	int
&=	O
compare_trees	function
(	O
a	pointer
->	O
avl_link	array
[	O
0	int
]	O
,	O
b	pointer
->	O
avl_link	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
a	pointer
->	O
avl_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
okay	int
&=	O
compare_trees	function
(	O
a	pointer
->	O
avl_link	array
[	O
1	int
]	O
,	O
b	pointer
->	O
avl_link	array
[	O
1	int
]	O
)	O
;	O
return	O
okay	int
;	O
}	O
static	O
void	O
recurse_verify_tree	function
(	O
struct	O
avl_node	struct
*	O
node	pointer
,	O
int	O
*	O
okay	int
,	O
size_t	long
*	O
count	pointer
,	O
int	O
min	int
,	O
int	O
max	int
,	O
int	O
*	O
height	pointer
)	O
{	O
int	O
d	int
;	O
size_t	long
subcount	array
[	O
2	int
]	O
;	O
int	O
subheight	array
[	O
2	int
]	O
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
{	O
*	O
count	pointer
=	O
0	int
;	O
*	O
height	pointer
=	O
0	int
;	O
return	O
;	O
}	O
d	int
=	O
*	O
(	O
int	O
*	O
)	O
node	pointer
->	O
avl_data	pointer
;	O
if	O
(	O
min	int
>	O
max	int
)	O
{	O
printf	function
(	O
" Parents of node %d constrain it to empty range %d...%d.\n"	pointer
,	O
d	int
,	O
min	int
,	O
max	int
)	O
;	O
*	O
okay	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
d	int
<	O
min	int
||	O
d	int
>	O
max	int
)	O
{	O
printf	function
(	O
" Node %d is not in range %d...%d implied by its parents.\n"	pointer
,	O
d	int
,	O
min	int
,	O
max	int
)	O
;	O
*	O
okay	int
=	O
0	int
;	O
}	O
recurse_verify_tree	function
(	O
node	pointer
->	O
avl_link	array
[	O
0	int
]	O
,	O
okay	int
,	O
&	O
subcount	array
[	O
0	int
]	O
,	O
min	int
,	O
d	int
-	O
1	int
,	O
&	O
subheight	array
[	O
0	int
]	O
)	O
;	O
recurse_verify_tree	function
(	O
node	pointer
->	O
avl_link	array
[	O
1	int
]	O
,	O
okay	int
,	O
&	O
subcount	array
[	O
1	int
]	O
,	O
d	int
+	O
1	int
,	O
max	int
,	O
&	O
subheight	array
[	O
1	int
]	O
)	O
;	O
*	O
count	pointer
=	O
1	int
+	O
subcount	array
[	O
0	int
]	O
+	O
subcount	array
[	O
1	int
]	O
;	O
*	O
height	pointer
=	O
1	int
+	O
(	O
subheight	array
[	O
0	int
]	O
>	O
subheight	array
[	O
1	int
]	O
?	O
subheight	array
[	O
0	int
]	O
:	O
subheight	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
subheight	array
[	O
1	int
]	O
-	O
subheight	array
[	O
0	int
]	O
!=	O
node	pointer
->	O
avl_balance	char
)	O
{	O
printf	function
(	O
" Balance factor of node %d is %d, but should be %d.\n"	pointer
,	O
d	int
,	O
node	pointer
->	O
avl_balance	char
,	O
subheight	array
[	O
1	int
]	O
-	O
subheight	array
[	O
0	int
]	O
)	O
;	O
*	O
okay	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
node	pointer
->	O
avl_balance	char
<	O
-	O
1	int
||	O
node	pointer
->	O
avl_balance	char
>	O
+	O
1	int
)	O
{	O
printf	function
(	O
" Balance factor of node %d is %d.\n"	pointer
,	O
d	int
,	O
node	pointer
->	O
avl_balance	char
)	O
;	O
*	O
okay	int
=	O
0	int
;	O
}	O
}	O
static	O
int	O
verify_tree	function
(	O
struct	O
avl_table	struct
*	O
tree	pointer
,	O
int	O
array	array
[	O
]	O
,	O
size_t	long
n	int
)	O
{	O
int	O
okay	int
=	O
1	int
;	O
if	O
(	O
avl_count	long
(	O
tree	pointer
)	O
!=	O
n	int
)	O
{	O
printf	function
(	O
" Tree count is %lu, but should be %lu.\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
avl_count	long
(	O
tree	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
n	int
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
if	O
(	O
okay	int
)	O
{	O
size_t	long
count	pointer
;	O
int	O
height	pointer
;	O
recurse_verify_tree	function
(	O
tree	pointer
->	O
avl_root	pointer
,	O
&	O
okay	int
,	O
&	O
count	pointer
,	O
0	int
,	O
INT_MAX	O
,	O
&	O
height	pointer
)	O
;	O
if	O
(	O
count	pointer
!=	O
n	int
)	O
{	O
printf	function
(	O
" Tree has %lu nodes, but should have %lu.\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
count	pointer
,	O
(	O
unsigned	O
long	O
)	O
n	int
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
okay	int
)	O
{	O
size_t	long
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
if	O
(	O
avl_find	function
(	O
tree	pointer
,	O
&	O
array	array
[	O
i	int
]	O
)	O
==	O
NULL	O
)	O
{	O
printf	function
(	O
" Tree does not contain expected value %d.\n"	pointer
,	O
array	array
[	O
i	int
]	O
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
okay	int
)	O
{	O
struct	O
avl_traverser	struct
trav	pointer
;	O
size_t	long
i	int
;	O
int	O
prev	pointer
=	O
-	O
1	int
;	O
int	O
*	O
item	pointer
;	O
for	O
(	O
i	int
=	O
0	int
,	O
item	pointer
=	O
avl_t_first	function
(	O
&	O
trav	pointer
,	O
tree	pointer
)	O
;	O
i	int
<	O
2	int
*	O
n	int
&&	O
item	pointer
!=	O
NULL	O
;	O
i	int
++	O
,	O
item	pointer
=	O
avl_t_next	function
(	O
&	O
trav	pointer
)	O
)	O
{	O
if	O
(	O
*	O
item	pointer
<=	O
prev	pointer
)	O
{	O
printf	function
(	O
" Tree out of order: %d follows %d in traversal\n"	pointer
,	O
*	O
item	pointer
,	O
prev	pointer
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
prev	pointer
=	O
*	O
item	pointer
;	O
}	O
if	O
(	O
i	int
!=	O
n	int
)	O
{	O
printf	function
(	O
" Tree should have %lu items, but has %lu in traversal\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
n	int
,	O
(	O
unsigned	O
long	O
)	O
i	int
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
okay	int
)	O
{	O
struct	O
avl_traverser	struct
trav	pointer
;	O
size_t	long
i	int
;	O
int	O
next	pointer
=	O
INT_MAX	O
;	O
int	O
*	O
item	pointer
;	O
for	O
(	O
i	int
=	O
0	int
,	O
item	pointer
=	O
avl_t_last	function
(	O
&	O
trav	pointer
,	O
tree	pointer
)	O
;	O
i	int
<	O
2	int
*	O
n	int
&&	O
item	pointer
!=	O
NULL	O
;	O
i	int
++	O
,	O
item	pointer
=	O
avl_t_prev	function
(	O
&	O
trav	pointer
)	O
)	O
{	O
if	O
(	O
*	O
item	pointer
>=	O
next	pointer
)	O
{	O
printf	function
(	O
" Tree out of order: %d precedes %d in traversal\n"	pointer
,	O
*	O
item	pointer
,	O
next	pointer
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
next	pointer
=	O
*	O
item	pointer
;	O
}	O
if	O
(	O
i	int
!=	O
n	int
)	O
{	O
printf	function
(	O
" Tree should have %lu items, but has %lu in reverse\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
n	int
,	O
(	O
unsigned	O
long	O
)	O
i	int
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
okay	int
)	O
{	O
struct	O
avl_traverser	struct
init	struct
,	O
first	struct
,	O
last	struct
;	O
int	O
*	O
cur	pointer
,	O
*	O
prev	pointer
,	O
*	O
next	pointer
;	O
avl_t_init	function
(	O
&	O
init	struct
,	O
tree	pointer
)	O
;	O
avl_t_first	function
(	O
&	O
first	struct
,	O
tree	pointer
)	O
;	O
avl_t_last	function
(	O
&	O
last	struct
,	O
tree	pointer
)	O
;	O
cur	pointer
=	O
avl_t_cur	function
(	O
&	O
init	struct
)	O
;	O
if	O
(	O
cur	pointer
!=	O
NULL	O
)	O
{	O
printf	function
(	O
" Inited traverser should be null, but is actually %d.\n"	pointer
,	O
*	O
cur	pointer
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
next	pointer
=	O
avl_t_next	function
(	O
&	O
init	struct
)	O
;	O
if	O
(	O
next	pointer
!=	O
avl_t_cur	function
(	O
&	O
first	struct
)	O
)	O
{	O
printf	function
(	O
" Next after null should be %d, but is actually %d.\n"	pointer
,	O
*	O
(	O
int	O
*	O
)	O
avl_t_cur	function
(	O
&	O
first	struct
)	O
,	O
*	O
next	pointer
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
avl_t_prev	function
(	O
&	O
init	struct
)	O
;	O
prev	pointer
=	O
avl_t_prev	function
(	O
&	O
init	struct
)	O
;	O
if	O
(	O
prev	pointer
!=	O
avl_t_cur	function
(	O
&	O
last	struct
)	O
)	O
{	O
printf	function
(	O
" Previous before null should be %d, but is actually %d.\n"	pointer
,	O
*	O
(	O
int	O
*	O
)	O
avl_t_cur	function
(	O
&	O
last	struct
)	O
,	O
*	O
prev	pointer
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
avl_t_next	function
(	O
&	O
init	struct
)	O
;	O
}	O
return	O
okay	int
;	O
}	O
int	O
test_correctness	function
(	O
struct	O
libavl_allocator	struct
*	O
allocator	pointer
,	O
int	O
insert	array
[	O
]	O
,	O
int	O
delete	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
verbosity	int
)	O
{	O
struct	O
avl_table	struct
*	O
tree	pointer
;	O
int	O
okay	int
=	O
1	int
;	O
int	O
i	int
;	O
tree	pointer
=	O
avl_create	function
(	O
compare_ints	function
,	O
NULL	O
,	O
allocator	pointer
)	O
;	O
if	O
(	O
tree	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
verbosity	int
>=	O
0	int
)	O
printf	function
(	O
"  Out of memory creating tree.\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
verbosity	int
>=	O
2	int
)	O
printf	function
(	O
"  Inserting %d...\n"	pointer
,	O
insert	array
[	O
i	int
]	O
)	O
;	O
{	O
void	O
*	O
*	O
p	pointer
=	O
avl_probe	function
(	O
tree	pointer
,	O
&	O
insert	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
verbosity	int
>=	O
0	int
)	O
printf	function
(	O
"    Out of memory in insertion.\n"	pointer
)	O
;	O
avl_destroy	function
(	O
tree	pointer
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
*	O
p	pointer
!=	O
&	O
insert	array
[	O
i	int
]	O
)	O
printf	function
(	O
"    Duplicate item in tree!\n"	pointer
)	O
;	O
}	O
if	O
(	O
verbosity	int
>=	O
3	int
)	O
print_whole_tree	function
(	O
tree	pointer
,	O
"    Afterward"	pointer
)	O
;	O
if	O
(	O
!	O
verify_tree	function
(	O
tree	pointer
,	O
insert	array
,	O
i	int
+	O
1	int
)	O
)	O
return	O
0	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
struct	O
avl_traverser	struct
x	struct
,	O
y	struct
,	O
z	struct
;	O
int	O
*	O
deleted	pointer
;	O
if	O
(	O
insert	array
[	O
i	int
]	O
==	O
delete	array
[	O
i	int
]	O
)	O
continue	O
;	O
if	O
(	O
verbosity	int
>=	O
2	int
)	O
printf	function
(	O
"   Checking traversal from item %d...\n"	pointer
,	O
insert	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
avl_t_find	function
(	O
&	O
x	struct
,	O
tree	pointer
,	O
&	O
insert	array
[	O
i	int
]	O
)	O
==	O
NULL	O
)	O
{	O
printf	function
(	O
"    Can't find item %d in tree!\n"	pointer
,	O
insert	array
[	O
i	int
]	O
)	O
;	O
continue	O
;	O
}	O
okay	int
&=	O
check_traverser	function
(	O
&	O
x	struct
,	O
insert	array
[	O
i	int
]	O
,	O
n	int
,	O
"Predeletion"	pointer
)	O
;	O
if	O
(	O
verbosity	int
>=	O
3	int
)	O
printf	function
(	O
"    Deleting item %d.\n"	pointer
,	O
delete	array
[	O
i	int
]	O
)	O
;	O
deleted	pointer
=	O
avl_delete	function
(	O
tree	pointer
,	O
&	O
delete	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
deleted	pointer
==	O
NULL	O
||	O
*	O
deleted	pointer
!=	O
delete	array
[	O
i	int
]	O
)	O
{	O
okay	int
=	O
0	int
;	O
if	O
(	O
deleted	pointer
==	O
NULL	O
)	O
printf	function
(	O
"    Deletion failed.\n"	pointer
)	O
;	O
else	O
printf	function
(	O
"    Wrong node %d returned.\n"	pointer
,	O
*	O
deleted	pointer
)	O
;	O
}	O
avl_t_copy	function
(	O
&	O
y	struct
,	O
&	O
x	struct
)	O
;	O
if	O
(	O
verbosity	int
>=	O
3	int
)	O
printf	function
(	O
"    Re-inserting item %d.\n"	pointer
,	O
delete	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
avl_t_insert	function
(	O
&	O
z	struct
,	O
tree	pointer
,	O
&	O
delete	array
[	O
i	int
]	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
verbosity	int
>=	O
0	int
)	O
printf	function
(	O
"    Out of memory re-inserting item.\n"	pointer
)	O
;	O
avl_destroy	function
(	O
tree	pointer
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
okay	int
&=	O
check_traverser	function
(	O
&	O
x	struct
,	O
insert	array
[	O
i	int
]	O
,	O
n	int
,	O
"Postdeletion"	pointer
)	O
;	O
okay	int
&=	O
check_traverser	function
(	O
&	O
y	struct
,	O
insert	array
[	O
i	int
]	O
,	O
n	int
,	O
"Copied"	pointer
)	O
;	O
okay	int
&=	O
check_traverser	function
(	O
&	O
z	struct
,	O
delete	array
[	O
i	int
]	O
,	O
n	int
,	O
"Insertion"	pointer
)	O
;	O
if	O
(	O
!	O
verify_tree	function
(	O
tree	pointer
,	O
insert	array
,	O
n	int
)	O
)	O
return	O
0	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
int	O
*	O
deleted	pointer
;	O
if	O
(	O
verbosity	int
>=	O
2	int
)	O
printf	function
(	O
"  Deleting %d...\n"	pointer
,	O
delete	array
[	O
i	int
]	O
)	O
;	O
deleted	pointer
=	O
avl_delete	function
(	O
tree	pointer
,	O
&	O
delete	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
deleted	pointer
==	O
NULL	O
||	O
*	O
deleted	pointer
!=	O
delete	array
[	O
i	int
]	O
)	O
{	O
okay	int
=	O
0	int
;	O
if	O
(	O
deleted	pointer
==	O
NULL	O
)	O
printf	function
(	O
"    Deletion failed.\n"	pointer
)	O
;	O
else	O
printf	function
(	O
"    Wrong node %d returned.\n"	pointer
,	O
*	O
deleted	pointer
)	O
;	O
}	O
if	O
(	O
verbosity	int
>=	O
3	int
)	O
print_whole_tree	function
(	O
tree	pointer
,	O
"    Afterward"	pointer
)	O
;	O
if	O
(	O
!	O
verify_tree	function
(	O
tree	pointer
,	O
delete	array
+	O
i	int
+	O
1	int
,	O
n	int
-	O
i	int
-	O
1	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
verbosity	int
>=	O
2	int
)	O
printf	function
(	O
"  Copying tree and comparing...\n"	pointer
)	O
;	O
{	O
struct	O
avl_table	struct
*	O
copy	pointer
=	O
avl_copy	function
(	O
tree	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
copy	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
verbosity	int
>=	O
0	int
)	O
printf	function
(	O
"  Out of memory in copy\n"	pointer
)	O
;	O
avl_destroy	function
(	O
tree	pointer
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
okay	int
&=	O
compare_trees	function
(	O
tree	pointer
->	O
avl_root	pointer
,	O
copy	pointer
->	O
avl_root	pointer
)	O
;	O
avl_destroy	function
(	O
copy	pointer
,	O
NULL	O
)	O
;	O
}	O
}	O
if	O
(	O
avl_delete	function
(	O
tree	pointer
,	O
&	O
insert	array
[	O
0	int
]	O
)	O
!=	O
NULL	O
)	O
{	O
printf	function
(	O
" Deletion from empty tree succeeded.\n"	pointer
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
avl_destroy	function
(	O
tree	pointer
,	O
NULL	O
)	O
;	O
return	O
okay	int
;	O
}	O
static	O
int	O
test_bst_t_first	function
(	O
struct	O
avl_table	struct
*	O
tree	pointer
,	O
int	O
n	int
)	O
{	O
struct	O
avl_traverser	struct
trav	pointer
;	O
int	O
*	O
first	struct
;	O
first	struct
=	O
avl_t_first	function
(	O
&	O
trav	pointer
,	O
tree	pointer
)	O
;	O
if	O
(	O
first	struct
==	O
NULL	O
||	O
*	O
first	struct
!=	O
0	int
)	O
{	O
printf	function
(	O
"    First item test failed: expected 0, got %d\n"	pointer
,	O
first	struct
!=	O
NULL	O
?	O
*	O
first	struct
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_t_last	function
(	O
struct	O
avl_table	struct
*	O
tree	pointer
,	O
int	O
n	int
)	O
{	O
struct	O
avl_traverser	struct
trav	pointer
;	O
int	O
*	O
last	struct
;	O
last	struct
=	O
avl_t_last	function
(	O
&	O
trav	pointer
,	O
tree	pointer
)	O
;	O
if	O
(	O
last	struct
==	O
NULL	O
||	O
*	O
last	struct
!=	O
n	int
-	O
1	int
)	O
{	O
printf	function
(	O
"    Last item test failed: expected %d, got %d\n"	pointer
,	O
n	int
-	O
1	int
,	O
last	struct
!=	O
NULL	O
?	O
*	O
last	struct
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_t_find	function
(	O
struct	O
avl_table	struct
*	O
tree	pointer
,	O
int	O
n	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
struct	O
avl_traverser	struct
trav	pointer
;	O
int	O
*	O
iter	pointer
;	O
iter	pointer
=	O
avl_t_find	function
(	O
&	O
trav	pointer
,	O
tree	pointer
,	O
&	O
i	int
)	O
;	O
if	O
(	O
iter	pointer
==	O
NULL	O
||	O
*	O
iter	pointer
!=	O
i	int
)	O
{	O
printf	function
(	O
"    Find item test failed: looked for %d, got %d\n"	pointer
,	O
i	int
,	O
iter	pointer
!=	O
NULL	O
?	O
*	O
iter	pointer
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_t_insert	function
(	O
struct	O
avl_table	struct
*	O
tree	pointer
,	O
int	O
n	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
struct	O
avl_traverser	struct
trav	pointer
;	O
int	O
*	O
iter	pointer
;	O
iter	pointer
=	O
avl_t_insert	function
(	O
&	O
trav	pointer
,	O
tree	pointer
,	O
&	O
i	int
)	O
;	O
if	O
(	O
iter	pointer
==	O
NULL	O
||	O
iter	pointer
==	O
&	O
i	int
||	O
*	O
iter	pointer
!=	O
i	int
)	O
{	O
printf	function
(	O
"    Insert item test failed: inserted dup %d, got %d\n"	pointer
,	O
i	int
,	O
iter	pointer
!=	O
NULL	O
?	O
*	O
iter	pointer
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_t_next	function
(	O
struct	O
avl_table	struct
*	O
tree	pointer
,	O
int	O
n	int
)	O
{	O
struct	O
avl_traverser	struct
trav	pointer
;	O
int	O
i	int
;	O
avl_t_init	function
(	O
&	O
trav	pointer
,	O
tree	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
int	O
*	O
iter	pointer
=	O
avl_t_next	function
(	O
&	O
trav	pointer
)	O
;	O
if	O
(	O
iter	pointer
==	O
NULL	O
||	O
*	O
iter	pointer
!=	O
i	int
)	O
{	O
printf	function
(	O
"    Next item test failed: expected %d, got %d\n"	pointer
,	O
i	int
,	O
iter	pointer
!=	O
NULL	O
?	O
*	O
iter	pointer
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_t_prev	function
(	O
struct	O
avl_table	struct
*	O
tree	pointer
,	O
int	O
n	int
)	O
{	O
struct	O
avl_traverser	struct
trav	pointer
;	O
int	O
i	int
;	O
avl_t_init	function
(	O
&	O
trav	pointer
,	O
tree	pointer
)	O
;	O
for	O
(	O
i	int
=	O
n	int
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
int	O
*	O
iter	pointer
=	O
avl_t_prev	function
(	O
&	O
trav	pointer
)	O
;	O
if	O
(	O
iter	pointer
==	O
NULL	O
||	O
*	O
iter	pointer
!=	O
i	int
)	O
{	O
printf	function
(	O
"    Previous item test failed: expected %d, got %d\n"	pointer
,	O
i	int
,	O
iter	pointer
!=	O
NULL	O
?	O
*	O
iter	pointer
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_copy	function
(	O
struct	O
avl_table	struct
*	O
tree	pointer
,	O
int	O
n	int
)	O
{	O
struct	O
avl_table	struct
*	O
copy	pointer
=	O
avl_copy	function
(	O
tree	pointer
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
int	O
okay	int
=	O
compare_trees	function
(	O
tree	pointer
->	O
avl_root	pointer
,	O
copy	pointer
->	O
avl_root	pointer
)	O
;	O
avl_destroy	function
(	O
copy	pointer
,	O
NULL	O
)	O
;	O
return	O
okay	int
;	O
}	O
int	O
test_overflow	function
(	O
struct	O
libavl_allocator	struct
*	O
allocator	pointer
,	O
int	O
order	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
verbosity	int
)	O
{	O
typedef	O
int	O
test_func	function
(	O
struct	O
avl_table	struct
*	O
,	O
int	O
n	int
)	O
;	O
struct	O
test	struct
{	O
test_func	function
*	O
func	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
}	O
;	O
static	O
const	O
struct	O
test	struct
test	struct
[	O
]	O
=	O
{	O
{	O
test_bst_t_first	function
,	O
"first item"	pointer
}	O
,	O
{	O
test_bst_t_last	function
,	O
"last item"	pointer
}	O
,	O
{	O
test_bst_t_find	function
,	O
"find item"	pointer
}	O
,	O
{	O
test_bst_t_insert	function
,	O
"insert item"	pointer
}	O
,	O
{	O
test_bst_t_next	function
,	O
"next item"	pointer
}	O
,	O
{	O
test_bst_t_prev	function
,	O
"previous item"	pointer
}	O
,	O
{	O
test_bst_copy	function
,	O
"copy tree"	pointer
}	O
,	O
}	O
;	O
const	O
struct	O
test	struct
*	O
i	int
;	O
for	O
(	O
i	int
=	O
test	struct
;	O
i	int
<	O
test	struct
+	O
sizeof	O
test	struct
/	O
sizeof	O
*	O
test	struct
;	O
i	int
++	O
)	O
{	O
struct	O
avl_table	struct
*	O
tree	pointer
;	O
int	O
j	int
;	O
if	O
(	O
verbosity	int
>=	O
2	int
)	O
printf	function
(	O
"  Running %s test...\n"	pointer
,	O
i	int
->	O
name	pointer
)	O
;	O
tree	pointer
=	O
avl_create	function
(	O
compare_ints	function
,	O
NULL	O
,	O
allocator	pointer
)	O
;	O
if	O
(	O
tree	pointer
==	O
NULL	O
)	O
{	O
printf	function
(	O
"    Out of memory creating tree.\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
n	int
;	O
j	int
++	O
)	O
{	O
void	O
*	O
*	O
p	pointer
=	O
avl_probe	function
(	O
tree	pointer
,	O
&	O
order	array
[	O
j	int
]	O
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
||	O
*	O
p	pointer
!=	O
&	O
order	array
[	O
j	int
]	O
)	O
{	O
if	O
(	O
p	pointer
==	O
NULL	O
&&	O
verbosity	int
>=	O
0	int
)	O
printf	function
(	O
"    Out of memory in insertion.\n"	pointer
)	O
;	O
else	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
printf	function
(	O
"    Duplicate item in tree!\n"	pointer
)	O
;	O
avl_destroy	function
(	O
tree	pointer
,	O
NULL	O
)	O
;	O
return	O
p	pointer
==	O
NULL	O
;	O
}	O
}	O
if	O
(	O
i	int
->	O
func	pointer
(	O
tree	pointer
,	O
n	int
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
verify_tree	function
(	O
tree	pointer
,	O
order	array
,	O
n	int
)	O
==	O
0	int
)	O
return	O
0	int
;	O
avl_destroy	function
(	O
tree	pointer
,	O
NULL	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
