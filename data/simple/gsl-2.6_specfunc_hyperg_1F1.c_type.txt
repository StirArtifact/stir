static	O
int	O
hyperg_1F1_asymp_negx	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
gsl_sf_result	struct
lg_b	struct
;	O
gsl_sf_result	struct
lg_bma	struct
;	O
double	O
sgn_b	double
;	O
double	O
sgn_bma	double
;	O
int	O
stat_b	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
b	double
,	O
&	O
lg_b	struct
,	O
&	O
sgn_b	double
)	O
;	O
int	O
stat_bma	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
b	double
-	O
a	double
,	O
&	O
lg_bma	struct
,	O
&	O
sgn_bma	double
)	O
;	O
if	O
(	O
stat_b	int
==	O
GSL_SUCCESS	int
&&	O
stat_bma	int
==	O
GSL_SUCCESS	int
)	O
{	O
gsl_sf_result	struct
F	struct
;	O
int	O
stat_F	int
=	O
gsl_sf_hyperg_2F0_series_e	function
(	O
a	double
,	O
1.0	int
+	O
a	double
-	O
b	double
,	O
-	O
1.0	int
/	O
x	double
,	O
-	O
1	int
,	O
&	O
F	struct
)	O
;	O
if	O
(	O
F	struct
.	O
val	double
!=	O
0	int
)	O
{	O
double	O
ln_term_val	double
=	O
a	double
*	O
log	function
(	O
-	O
x	double
)	O
;	O
double	O
ln_term_err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
a	double
)	O
+	O
fabs	function
(	O
ln_term_val	double
)	O
)	O
;	O
double	O
ln_pre_val	double
=	O
lg_b	struct
.	O
val	double
-	O
lg_bma	struct
.	O
val	double
-	O
ln_term_val	double
;	O
double	O
ln_pre_err	double
=	O
lg_b	struct
.	O
err	double
+	O
lg_bma	struct
.	O
err	double
+	O
ln_term_err	double
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
ln_pre_val	double
,	O
ln_pre_err	double
,	O
sgn_bma	double
*	O
sgn_b	double
*	O
F	struct
.	O
val	double
,	O
F	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_F	int
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_F	int
;	O
}	O
}	O
else	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
static	O
int	O
hyperg_1F1_asymp_posx	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
gsl_sf_result	struct
lg_b	struct
;	O
gsl_sf_result	struct
lg_a	struct
;	O
double	O
sgn_b	double
;	O
double	O
sgn_a	double
;	O
int	O
stat_b	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
b	double
,	O
&	O
lg_b	struct
,	O
&	O
sgn_b	double
)	O
;	O
int	O
stat_a	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
a	double
,	O
&	O
lg_a	struct
,	O
&	O
sgn_a	double
)	O
;	O
if	O
(	O
stat_a	int
==	O
GSL_SUCCESS	int
&&	O
stat_b	int
==	O
GSL_SUCCESS	int
)	O
{	O
gsl_sf_result	struct
F	struct
;	O
int	O
stat_F	int
=	O
gsl_sf_hyperg_2F0_series_e	function
(	O
b	double
-	O
a	double
,	O
1.0	int
-	O
a	double
,	O
1.0	int
/	O
x	double
,	O
-	O
1	int
,	O
&	O
F	struct
)	O
;	O
if	O
(	O
stat_F	int
==	O
GSL_SUCCESS	int
&&	O
F	struct
.	O
val	double
!=	O
0	int
)	O
{	O
double	O
lnx	double
=	O
log	function
(	O
x	double
)	O
;	O
double	O
ln_term_val	double
=	O
(	O
a	double
-	O
b	double
)	O
*	O
lnx	double
;	O
double	O
ln_term_err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
a	double
)	O
+	O
fabs	function
(	O
b	double
)	O
)	O
*	O
fabs	function
(	O
lnx	double
)	O
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
a	double
-	O
b	double
)	O
;	O
double	O
ln_pre_val	double
=	O
lg_b	struct
.	O
val	double
-	O
lg_a	struct
.	O
val	double
+	O
ln_term_val	double
+	O
x	double
;	O
double	O
ln_pre_err	double
=	O
lg_b	struct
.	O
err	double
+	O
lg_a	struct
.	O
err	double
+	O
ln_term_err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
ln_pre_val	double
,	O
ln_pre_err	double
,	O
sgn_a	double
*	O
sgn_b	double
*	O
F	struct
.	O
val	double
,	O
F	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_F	int
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_F	int
;	O
}	O
}	O
else	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
static	O
int	O
hyperg_1F1_largebx	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
y	double
=	O
x	double
/	O
b	double
;	O
double	O
f	pointer
=	O
exp	function
(	O
-	O
a	double
*	O
log1p	function
(	O
-	O
y	double
)	O
)	O
;	O
double	O
t1	double
=	O
-	O
(	O
(	O
a	double
*	O
(	O
a	double
+	O
1.0	int
)	O
)	O
/	O
(	O
2	int
*	O
b	double
)	O
)	O
*	O
pow	function
(	O
(	O
y	double
/	O
(	O
1.0	int
-	O
y	double
)	O
)	O
,	O
2.0	int
)	O
;	O
double	O
t2	double
=	O
(	O
1	int
/	O
(	O
24	int
*	O
b	double
*	O
b	double
)	O
)	O
*	O
(	O
(	O
a	double
*	O
(	O
a	double
+	O
1	int
)	O
*	O
y	double
*	O
y	double
)	O
/	O
pow	function
(	O
1	int
-	O
y	double
,	O
4	int
)	O
)	O
*	O
(	O
12	int
+	O
8	int
*	O
(	O
2	int
*	O
a	double
+	O
1	int
)	O
*	O
y	double
+	O
(	O
3	int
*	O
a	double
*	O
a	double
-	O
a	double
-	O
2	int
)	O
*	O
y	double
*	O
y	double
)	O
;	O
double	O
t3	double
=	O
(	O
-	O
1	int
/	O
(	O
48	int
*	O
b	double
*	O
b	double
*	O
b	double
*	O
pow	function
(	O
1	int
-	O
y	double
,	O
6	int
)	O
)	O
)	O
*	O
a	double
*	O
(	O
(	O
a	double
+	O
1	int
)	O
*	O
(	O
(	O
y	double
*	O
(	O
(	O
a	double
+	O
1	int
)	O
*	O
(	O
a	double
*	O
(	O
y	double
*	O
(	O
y	double
*	O
(	O
(	O
y	double
*	O
(	O
a	double
-	O
2	int
)	O
+	O
16	int
)	O
*	O
(	O
a	double
-	O
1	int
)	O
)	O
+	O
72	int
)	O
)	O
+	O
96	int
)	O
)	O
+	O
24	int
)	O
*	O
pow	function
(	O
y	double
,	O
2	int
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
f	pointer
*	O
(	O
1	int
+	O
t1	double
+	O
t2	double
+	O
t3	double
)	O
;	O
result	pointer
->	O
err	double
=	O
2	int
*	O
fabs	function
(	O
f	pointer
*	O
t3	double
)	O
+	O
2	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
hyperg_1F1_large2bm4a	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
eta	double
=	O
2.0	int
*	O
b	double
-	O
4.0	int
*	O
a	double
;	O
double	O
cos2th	double
=	O
x	double
/	O
eta	double
;	O
double	O
sin2th	double
=	O
1.0	int
-	O
cos2th	double
;	O
double	O
th	double
=	O
acos	function
(	O
sqrt	function
(	O
cos2th	double
)	O
)	O
;	O
double	O
pre_h	double
=	O
0.25	int
*	O
M_PI	int
*	O
M_PI	int
*	O
eta	double
*	O
eta	double
*	O
cos2th	double
*	O
sin2th	double
;	O
gsl_sf_result	struct
lg_b	struct
;	O
int	O
stat_lg	int
=	O
gsl_sf_lngamma_e	function
(	O
b	double
,	O
&	O
lg_b	struct
)	O
;	O
double	O
t1	double
=	O
0.5	int
*	O
(	O
1.0	int
-	O
b	double
)	O
*	O
log	function
(	O
0.25	int
*	O
x	double
*	O
eta	double
)	O
;	O
double	O
t2	double
=	O
0.25	int
*	O
log	function
(	O
pre_h	double
)	O
;	O
double	O
lnpre_val	double
=	O
lg_b	struct
.	O
val	double
+	O
0.5	int
*	O
x	double
+	O
t1	double
-	O
t2	double
;	O
double	O
lnpre_err	double
=	O
lg_b	struct
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
0.5	int
*	O
x	double
)	O
+	O
fabs	function
(	O
t1	double
)	O
+	O
fabs	function
(	O
t2	double
)	O
)	O
;	O
double	O
s1	double
=	O
sin	function
(	O
a	double
*	O
M_PI	int
)	O
;	O
double	O
s2	double
=	O
sin	function
(	O
0.25	int
*	O
eta	double
*	O
(	O
2.0	int
*	O
th	double
-	O
sin	function
(	O
2.0	int
*	O
th	double
)	O
)	O
+	O
0.25	int
*	O
M_PI	int
)	O
;	O
double	O
ser_val	double
=	O
s1	double
+	O
s2	double
;	O
double	O
ser_err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
s1	double
)	O
+	O
fabs	function
(	O
s2	double
)	O
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
lnpre_val	double
,	O
lnpre_err	double
,	O
ser_val	double
,	O
ser_err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_lg	int
)	O
;	O
}	O
static	O
int	O
hyperg_1F1_luke	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
c	double
,	O
const	O
double	O
xin	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
RECUR_BIG	double
=	O
1.0e+50	int
;	O
const	O
int	O
nmax	int
=	O
5000	int
;	O
int	O
n	int
=	O
3	int
;	O
const	O
double	O
x	double
=	O
-	O
xin	double
;	O
const	O
double	O
x3	double
=	O
x	double
*	O
x	double
*	O
x	double
;	O
const	O
double	O
t0	double
=	O
a	double
/	O
c	double
;	O
const	O
double	O
t1	double
=	O
(	O
a	double
+	O
1.0	int
)	O
/	O
(	O
2.0	int
*	O
c	double
)	O
;	O
const	O
double	O
t2	double
=	O
(	O
a	double
+	O
2.0	int
)	O
/	O
(	O
2.0	int
*	O
(	O
c	double
+	O
1.0	int
)	O
)	O
;	O
double	O
F	struct
=	O
1.0	int
;	O
double	O
prec	double
;	O
double	O
Bnm3	double
=	O
1.0	int
;	O
double	O
Bnm2	double
=	O
1.0	int
+	O
t1	double
*	O
x	double
;	O
double	O
Bnm1	double
=	O
1.0	int
+	O
t2	double
*	O
x	double
*	O
(	O
1.0	int
+	O
t1	double
/	O
3.0	int
*	O
x	double
)	O
;	O
double	O
Anm3	double
=	O
1.0	int
;	O
double	O
Anm2	double
=	O
Bnm2	double
-	O
t0	double
*	O
x	double
;	O
double	O
Anm1	double
=	O
Bnm1	double
-	O
t0	double
*	O
(	O
1.0	int
+	O
t2	double
*	O
x	double
)	O
*	O
x	double
+	O
t0	double
*	O
t1	double
*	O
(	O
c	double
/	O
(	O
c	double
+	O
1.0	int
)	O
)	O
*	O
x	double
*	O
x	double
;	O
while	O
(	O
1	int
)	O
{	O
double	O
npam1	double
=	O
n	int
+	O
a	double
-	O
1	int
;	O
double	O
npcm1	double
=	O
n	int
+	O
c	double
-	O
1	int
;	O
double	O
npam2	double
=	O
n	int
+	O
a	double
-	O
2	int
;	O
double	O
npcm2	double
=	O
n	int
+	O
c	double
-	O
2	int
;	O
double	O
tnm1	double
=	O
2	int
*	O
n	int
-	O
1	int
;	O
double	O
tnm3	double
=	O
2	int
*	O
n	int
-	O
3	int
;	O
double	O
tnm5	double
=	O
2	int
*	O
n	int
-	O
5	int
;	O
double	O
F1	double
=	O
(	O
n	int
-	O
a	double
-	O
2	int
)	O
/	O
(	O
2	int
*	O
tnm3	double
*	O
npcm1	double
)	O
;	O
double	O
F2	double
=	O
(	O
n	int
+	O
a	double
)	O
*	O
npam1	double
/	O
(	O
4	int
*	O
tnm1	double
*	O
tnm3	double
*	O
npcm2	double
*	O
npcm1	double
)	O
;	O
double	O
F3	double
=	O
-	O
npam2	double
*	O
npam1	double
*	O
(	O
n	int
-	O
a	double
-	O
2	int
)	O
/	O
(	O
8	int
*	O
tnm3	double
*	O
tnm3	double
*	O
tnm5	double
*	O
(	O
n	int
+	O
c	double
-	O
3	int
)	O
*	O
npcm2	double
*	O
npcm1	double
)	O
;	O
double	O
E	double
=	O
-	O
npam1	double
*	O
(	O
n	int
-	O
c	double
-	O
1	int
)	O
/	O
(	O
2	int
*	O
tnm3	double
*	O
npcm2	double
*	O
npcm1	double
)	O
;	O
double	O
An	double
=	O
(	O
1.0	int
+	O
F1	double
*	O
x	double
)	O
*	O
Anm1	double
+	O
(	O
E	double
+	O
F2	double
*	O
x	double
)	O
*	O
x	double
*	O
Anm2	double
+	O
F3	double
*	O
x3	double
*	O
Anm3	double
;	O
double	O
Bn	double
=	O
(	O
1.0	int
+	O
F1	double
*	O
x	double
)	O
*	O
Bnm1	double
+	O
(	O
E	double
+	O
F2	double
*	O
x	double
)	O
*	O
x	double
*	O
Bnm2	double
+	O
F3	double
*	O
x3	double
*	O
Bnm3	double
;	O
double	O
r	pointer
=	O
An	double
/	O
Bn	double
;	O
prec	double
=	O
fabs	function
(	O
(	O
F	struct
-	O
r	pointer
)	O
/	O
F	struct
)	O
;	O
F	struct
=	O
r	pointer
;	O
if	O
(	O
prec	double
<	O
GSL_DBL_EPSILON	int
||	O
n	int
>	O
nmax	int
)	O
break	O
;	O
if	O
(	O
fabs	function
(	O
An	double
)	O
>	O
RECUR_BIG	double
||	O
fabs	function
(	O
Bn	double
)	O
>	O
RECUR_BIG	double
)	O
{	O
An	double
/=	O
RECUR_BIG	double
;	O
Bn	double
/=	O
RECUR_BIG	double
;	O
Anm1	double
/=	O
RECUR_BIG	double
;	O
Bnm1	double
/=	O
RECUR_BIG	double
;	O
Anm2	double
/=	O
RECUR_BIG	double
;	O
Bnm2	double
/=	O
RECUR_BIG	double
;	O
Anm3	double
/=	O
RECUR_BIG	double
;	O
Bnm3	double
/=	O
RECUR_BIG	double
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
An	double
)	O
<	O
1.0	int
/	O
RECUR_BIG	double
||	O
fabs	function
(	O
Bn	double
)	O
<	O
1.0	int
/	O
RECUR_BIG	double
)	O
{	O
An	double
*=	O
RECUR_BIG	double
;	O
Bn	double
*=	O
RECUR_BIG	double
;	O
Anm1	double
*=	O
RECUR_BIG	double
;	O
Bnm1	double
*=	O
RECUR_BIG	double
;	O
Anm2	double
*=	O
RECUR_BIG	double
;	O
Bnm2	double
*=	O
RECUR_BIG	double
;	O
Anm3	double
*=	O
RECUR_BIG	double
;	O
Bnm3	double
*=	O
RECUR_BIG	double
;	O
}	O
n	int
++	O
;	O
Bnm3	double
=	O
Bnm2	double
;	O
Bnm2	double
=	O
Bnm1	double
;	O
Bnm1	double
=	O
Bn	double
;	O
Anm3	double
=	O
Anm2	double
;	O
Anm2	double
=	O
Anm1	double
;	O
Anm1	double
=	O
An	double
;	O
}	O
result	pointer
->	O
val	double
=	O
F	struct
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
fabs	function
(	O
F	struct
*	O
prec	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
n	int
-	O
1.0	int
)	O
*	O
fabs	function
(	O
F	struct
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
hyperg_1F1_1_series	function
(	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
sum_val	double
=	O
1.0	int
;	O
double	O
sum_err	double
=	O
0.0	int
;	O
double	O
term	double
=	O
1.0	int
;	O
double	O
n	int
=	O
1.0	int
;	O
while	O
(	O
fabs	function
(	O
term	double
/	O
sum_val	double
)	O
>	O
0.25	int
*	O
GSL_DBL_EPSILON	int
)	O
{	O
term	double
*=	O
x	double
/	O
(	O
b	double
+	O
n	int
-	O
1	int
)	O
;	O
sum_val	double
+=	O
term	double
;	O
sum_err	double
+=	O
8.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
term	double
)	O
+	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
sum_val	double
)	O
;	O
n	int
+=	O
1.0	int
;	O
}	O
result	pointer
->	O
val	double
=	O
sum_val	double
;	O
result	pointer
->	O
err	double
=	O
sum_err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
fabs	function
(	O
term	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
hyperg_1F1_1_int	function
(	O
const	O
int	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
b	double
<	O
1	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
==	O
1	int
)	O
{	O
return	O
gsl_sf_exp_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
==	O
2	int
)	O
{	O
return	O
gsl_sf_exprel_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
==	O
3	int
)	O
{	O
return	O
gsl_sf_exprel_2_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
return	O
gsl_sf_exprel_n_e	function
(	O
b	double
-	O
1	int
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
static	O
int	O
hyperg_1F1_1	function
(	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
double	O
ib	double
=	O
floor	function
(	O
b	double
+	O
0.1	int
)	O
;	O
if	O
(	O
b	double
<	O
1.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
==	O
1.0	int
)	O
{	O
return	O
gsl_sf_exp_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
>=	O
1.4	int
*	O
ax	double
)	O
{	O
return	O
hyperg_1F1_1_series	function
(	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
b	double
-	O
ib	double
)	O
<	O
_1F1_INT_THRESHOLD	O
&&	O
ib	double
<	O
INT_MAX	O
)	O
{	O
return	O
hyperg_1F1_1_int	function
(	O
(	O
int	O
)	O
ib	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
0.0	int
)	O
{	O
if	O
(	O
x	double
>	O
100.0	int
&&	O
b	double
<	O
0.75	int
*	O
x	double
)	O
{	O
return	O
hyperg_1F1_asymp_posx	function
(	O
1.0	int
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
<	O
1.0e+05	int
)	O
{	O
const	O
double	O
off	double
=	O
ceil	function
(	O
1.4	int
*	O
x	double
-	O
b	double
)	O
+	O
1.0	int
;	O
double	O
bp	double
=	O
b	double
+	O
off	double
;	O
gsl_sf_result	struct
M	struct
;	O
int	O
stat_s	int
=	O
hyperg_1F1_1_series	function
(	O
bp	double
,	O
x	double
,	O
&	O
M	struct
)	O
;	O
const	O
double	O
err_rat	double
=	O
M	struct
.	O
err	double
/	O
fabs	function
(	O
M	struct
.	O
val	double
)	O
;	O
while	O
(	O
bp	double
>	O
b	double
+	O
0.1	int
)	O
{	O
bp	double
-=	O
1.0	int
;	O
M	struct
.	O
val	double
=	O
1.0	int
+	O
x	double
/	O
bp	double
*	O
M	struct
.	O
val	double
;	O
}	O
result	pointer
->	O
val	double
=	O
M	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
err_rat	double
*	O
fabs	function
(	O
M	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
off	double
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
M	struct
.	O
val	double
)	O
;	O
return	O
stat_s	int
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
fabs	function
(	O
b	double
)	O
&&	O
fabs	function
(	O
x	double
)	O
<	O
sqrt	function
(	O
fabs	function
(	O
b	double
)	O
)	O
*	O
fabs	function
(	O
b	double
-	O
x	double
)	O
)	O
{	O
return	O
hyperg_1F1_largebx	function
(	O
1.0	int
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
)	O
>	O
fabs	function
(	O
b	double
)	O
)	O
{	O
return	O
hyperg_1F1_1_series	function
(	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
return	O
hyperg_1F1_large2bm4a	function
(	O
1.0	int
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
ax	double
<	O
10.0	int
&&	O
b	double
<	O
10.0	int
)	O
{	O
return	O
hyperg_1F1_1_series	function
(	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ax	double
>=	O
100.0	int
&&	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
2.0	int
-	O
b	double
)	O
,	O
1.0	int
)	O
<	O
0.99	int
*	O
ax	double
)	O
{	O
return	O
hyperg_1F1_asymp_negx	function
(	O
1.0	int
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
return	O
hyperg_1F1_luke	function
(	O
1.0	int
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
}	O
static	O
int	O
hyperg_1F1_renorm_b0	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
eta	double
=	O
a	double
*	O
x	double
;	O
if	O
(	O
eta	double
>	O
0.0	int
)	O
{	O
double	O
root_eta	double
=	O
sqrt	function
(	O
eta	double
)	O
;	O
gsl_sf_result	struct
I1_scaled	struct
;	O
int	O
stat_I	int
=	O
gsl_sf_bessel_I1_scaled_e	function
(	O
2.0	int
*	O
root_eta	double
,	O
&	O
I1_scaled	struct
)	O
;	O
if	O
(	O
I1_scaled	struct
.	O
val	double
<=	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_I	int
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
const	O
double	O
corr1	double
=	O
(	O
2.0	int
/	O
3.0	int
)	O
*	O
a	double
*	O
pow	function
(	O
x	double
/	O
(	O
4.0	int
*	O
a	double
)	O
,	O
1.5	int
)	O
*	O
gsl_sf_bessel_In_scaled	function
(	O
2	int
,	O
2.0	int
*	O
root_eta	double
)	O
;	O
const	O
double	O
lnr_val	double
=	O
0.5	int
*	O
x	double
+	O
0.5	int
*	O
log	function
(	O
eta	double
)	O
+	O
fabs	function
(	O
2.0	int
*	O
root_eta	double
)	O
+	O
log	function
(	O
I1_scaled	struct
.	O
val	double
+	O
corr1	double
)	O
;	O
const	O
double	O
lnr_err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
1.5	int
*	O
fabs	function
(	O
x	double
)	O
+	O
1.0	int
)	O
+	O
fabs	function
(	O
(	O
I1_scaled	struct
.	O
err	double
+	O
corr1	double
)	O
/	O
I1_scaled	struct
.	O
val	double
)	O
;	O
return	O
gsl_sf_exp_err_e	function
(	O
lnr_val	double
,	O
lnr_err	double
,	O
result	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
eta	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
root_eta	double
=	O
sqrt	function
(	O
-	O
eta	double
)	O
;	O
gsl_sf_result	struct
J1	struct
;	O
int	O
stat_J	int
=	O
gsl_sf_bessel_J1_e	function
(	O
2.0	int
*	O
root_eta	double
,	O
&	O
J1	struct
)	O
;	O
if	O
(	O
J1	struct
.	O
val	double
<=	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_J	int
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
const	O
double	O
t1	double
=	O
0.5	int
*	O
x	double
;	O
const	O
double	O
t2	double
=	O
0.5	int
*	O
log	function
(	O
-	O
eta	double
)	O
;	O
const	O
double	O
t3	double
=	O
fabs	function
(	O
x	double
)	O
;	O
const	O
double	O
t4	double
=	O
log	function
(	O
J1	struct
.	O
val	double
)	O
;	O
const	O
double	O
lnr_val	double
=	O
t1	double
+	O
t2	double
+	O
t3	double
+	O
t4	double
;	O
const	O
double	O
lnr_err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
1.5	int
*	O
fabs	function
(	O
x	double
)	O
+	O
1.0	int
)	O
+	O
fabs	function
(	O
J1	struct
.	O
err	double
/	O
J1	struct
.	O
val	double
)	O
;	O
gsl_sf_result	struct
ex	struct
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_err_e	function
(	O
lnr_val	double
,	O
lnr_err	double
,	O
&	O
ex	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
-	O
ex	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
ex	struct
.	O
err	double
;	O
return	O
stat_e	int
;	O
}	O
}	O
}	O
static	O
int	O
hyperg_1F1_CF1_p_ser	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result	pointer
)	O
{	O
if	O
(	O
a	double
==	O
0.0	int
)	O
{	O
*	O
result	pointer
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
int	O
maxiter	int
=	O
5000	int
;	O
double	O
sum	double
=	O
1.0	int
;	O
double	O
pk	double
=	O
1.0	int
;	O
double	O
rhok	double
=	O
0.0	int
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<	O
maxiter	int
;	O
k	int
++	O
)	O
{	O
double	O
ak	double
=	O
(	O
a	double
+	O
k	int
)	O
*	O
x	double
/	O
(	O
(	O
b	double
-	O
x	double
+	O
k	int
-	O
1.0	int
)	O
*	O
(	O
b	double
-	O
x	double
+	O
k	int
)	O
)	O
;	O
rhok	double
=	O
-	O
ak	double
*	O
(	O
1.0	int
+	O
rhok	double
)	O
/	O
(	O
1.0	int
+	O
ak	double
*	O
(	O
1.0	int
+	O
rhok	double
)	O
)	O
;	O
pk	double
*=	O
rhok	double
;	O
sum	double
+=	O
pk	double
;	O
if	O
(	O
fabs	function
(	O
pk	double
/	O
sum	double
)	O
<	O
2.0	int
*	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
*	O
result	pointer
=	O
a	double
/	O
(	O
b	double
-	O
x	double
)	O
*	O
sum	double
;	O
if	O
(	O
k	int
==	O
maxiter	int
)	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EMAXITER	int
)	O
;	O
else	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
hyperg_1F1_small_a_bgt0	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
bma	double
=	O
b	double
-	O
a	double
;	O
const	O
double	O
oma	double
=	O
1.0	int
-	O
a	double
;	O
const	O
double	O
ap1mb	double
=	O
1.0	int
+	O
a	double
-	O
b	double
;	O
const	O
double	O
abs_bma	double
=	O
fabs	function
(	O
bma	double
)	O
;	O
const	O
double	O
abs_oma	double
=	O
fabs	function
(	O
oma	double
)	O
;	O
const	O
double	O
abs_ap1mb	double
=	O
fabs	function
(	O
ap1mb	double
)	O
;	O
const	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
a	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
a	double
==	O
1.0	int
&&	O
b	double
>=	O
1.0	int
)	O
{	O
return	O
hyperg_1F1_1	function
(	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
a	double
==	O
-	O
1.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
+	O
a	double
/	O
b	double
*	O
x	double
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
1.0	int
+	O
fabs	function
(	O
a	double
/	O
b	double
*	O
x	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
b	double
>=	O
1.4	int
*	O
ax	double
)	O
{	O
return	O
gsl_sf_hyperg_1F1_series_e	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
0.0	int
)	O
{	O
if	O
(	O
x	double
>	O
100.0	int
&&	O
abs_bma	double
*	O
abs_oma	double
<	O
0.5	int
*	O
x	double
)	O
{	O
return	O
hyperg_1F1_asymp_posx	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
<	O
5.0e+06	int
)	O
{	O
const	O
double	O
b_del	double
=	O
ceil	function
(	O
1.4	int
*	O
x	double
-	O
b	double
)	O
+	O
1.0	int
;	O
double	O
bp	double
=	O
b	double
+	O
b_del	double
;	O
gsl_sf_result	struct
r_Mbp1	struct
;	O
gsl_sf_result	struct
r_Mb	struct
;	O
double	O
Mbp1	double
;	O
double	O
Mb	double
;	O
double	O
Mbm1	double
;	O
int	O
stat_0	int
=	O
gsl_sf_hyperg_1F1_series_e	function
(	O
a	double
,	O
bp	double
+	O
1.0	int
,	O
x	double
,	O
&	O
r_Mbp1	struct
)	O
;	O
int	O
stat_1	int
=	O
gsl_sf_hyperg_1F1_series_e	function
(	O
a	double
,	O
bp	double
,	O
x	double
,	O
&	O
r_Mb	struct
)	O
;	O
const	O
double	O
err_rat	double
=	O
fabs	function
(	O
r_Mbp1	struct
.	O
err	double
/	O
r_Mbp1	struct
.	O
val	double
)	O
+	O
fabs	function
(	O
r_Mb	struct
.	O
err	double
/	O
r_Mb	struct
.	O
val	double
)	O
;	O
Mbp1	double
=	O
r_Mbp1	struct
.	O
val	double
;	O
Mb	double
=	O
r_Mb	struct
.	O
val	double
;	O
while	O
(	O
bp	double
>	O
b	double
+	O
0.1	int
)	O
{	O
Mbm1	double
=	O
(	O
(	O
x	double
+	O
bp	double
-	O
1.0	int
)	O
*	O
Mb	double
-	O
x	double
*	O
(	O
bp	double
-	O
a	double
)	O
/	O
bp	double
*	O
Mbp1	double
)	O
/	O
(	O
bp	double
-	O
1.0	int
)	O
;	O
bp	double
-=	O
1.0	int
;	O
Mbp1	double
=	O
Mb	double
;	O
Mb	double
=	O
Mbm1	double
;	O
}	O
result	pointer
->	O
val	double
=	O
Mb	double
;	O
result	pointer
->	O
err	double
=	O
err_rat	double
*	O
(	O
fabs	function
(	O
b_del	double
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
Mb	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
Mb	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_0	int
,	O
stat_1	int
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
)	O
<	O
fabs	function
(	O
b	double
)	O
&&	O
fabs	function
(	O
a	double
*	O
x	double
)	O
<	O
sqrt	function
(	O
fabs	function
(	O
b	double
)	O
)	O
*	O
fabs	function
(	O
b	double
-	O
x	double
)	O
)	O
{	O
return	O
hyperg_1F1_largebx	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
return	O
hyperg_1F1_large2bm4a	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
ax	double
<	O
10.0	int
&&	O
b	double
<	O
10.0	int
)	O
{	O
return	O
gsl_sf_hyperg_1F1_series_e	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
ax	double
>=	O
100.0	int
&&	O
GSL_MAX	O
(	O
abs_ap1mb	double
,	O
1.0	int
)	O
<	O
0.99	int
*	O
ax	double
)	O
{	O
return	O
hyperg_1F1_asymp_negx	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
return	O
hyperg_1F1_luke	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
}	O
static	O
int	O
hyperg_1F1_beps_bgt0	function
(	O
const	O
double	O
eps	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
b	double
>	O
fabs	function
(	O
x	double
)	O
&&	O
fabs	function
(	O
eps	double
)	O
<	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
double	O
a	double
=	O
b	double
+	O
eps	double
;	O
gsl_sf_result	struct
exab	struct
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_e	function
(	O
a	double
*	O
x	double
/	O
b	double
,	O
&	O
exab	struct
)	O
;	O
double	O
v2	double
=	O
a	double
/	O
(	O
2.0	int
*	O
b	double
*	O
b	double
*	O
(	O
b	double
+	O
1.0	int
)	O
)	O
;	O
double	O
v3	double
=	O
a	double
*	O
(	O
b	double
-	O
2.0	int
*	O
a	double
)	O
/	O
(	O
3.0	int
*	O
b	double
*	O
b	double
*	O
b	double
*	O
(	O
b	double
+	O
1.0	int
)	O
*	O
(	O
b	double
+	O
2.0	int
)	O
)	O
;	O
double	O
v	pointer
=	O
v2	double
+	O
v3	double
*	O
x	double
;	O
double	O
f	pointer
=	O
(	O
1.0	int
-	O
eps	double
*	O
x	double
*	O
x	double
*	O
v	pointer
)	O
;	O
result	pointer
->	O
val	double
=	O
exab	struct
.	O
val	double
*	O
f	pointer
;	O
result	pointer
->	O
err	double
=	O
exab	struct
.	O
err	double
*	O
fabs	function
(	O
f	pointer
)	O
;	O
result	pointer
->	O
err	double
+=	O
fabs	function
(	O
exab	struct
.	O
val	double
)	O
*	O
GSL_DBL_EPSILON	int
*	O
(	O
1.0	int
+	O
fabs	function
(	O
eps	double
*	O
x	double
*	O
x	double
*	O
v	pointer
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat_e	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
Kummer_1F1	struct
;	O
int	O
stat_K	int
=	O
hyperg_1F1_small_a_bgt0	function
(	O
-	O
eps	double
,	O
b	double
,	O
-	O
x	double
,	O
&	O
Kummer_1F1	struct
)	O
;	O
if	O
(	O
Kummer_1F1	struct
.	O
val	double
!=	O
0.0	int
)	O
{	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
x	double
,	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
,	O
Kummer_1F1	struct
.	O
val	double
,	O
Kummer_1F1	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K	int
)	O
;	O
}	O
else	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_K	int
;	O
}	O
}	O
}	O
static	O
int	O
hyperg_1F1_beq2a_pos	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
I	struct
;	O
int	O
stat_I	int
=	O
gsl_sf_bessel_Inu_scaled_e	function
(	O
a	double
-	O
0.5	int
,	O
0.5	int
*	O
fabs	function
(	O
x	double
)	O
,	O
&	O
I	struct
)	O
;	O
gsl_sf_result	struct
lg	struct
;	O
int	O
stat_g	int
=	O
gsl_sf_lngamma_e	function
(	O
a	double
+	O
0.5	int
,	O
&	O
lg	struct
)	O
;	O
double	O
ln_term	double
=	O
(	O
0.5	int
-	O
a	double
)	O
*	O
log	function
(	O
0.25	int
*	O
fabs	function
(	O
x	double
)	O
)	O
;	O
double	O
lnpre_val	double
=	O
lg	struct
.	O
val	double
+	O
GSL_MAX_DBL	function
(	O
x	double
,	O
0.0	int
)	O
+	O
ln_term	double
;	O
double	O
lnpre_err	double
=	O
lg	struct
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
ln_term	double
)	O
+	O
fabs	function
(	O
x	double
)	O
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
lnpre_val	double
,	O
lnpre_err	double
,	O
I	struct
.	O
val	double
,	O
I	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_e	int
,	O
stat_g	int
,	O
stat_I	int
)	O
;	O
}	O
}	O
static	O
int	O
hyperg_1F1_ab_posint	function
(	O
const	O
int	O
a	double
,	O
const	O
int	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
a	double
==	O
b	double
)	O
{	O
return	O
gsl_sf_exp_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
a	double
==	O
1	int
)	O
{	O
return	O
gsl_sf_exprel_n_e	function
(	O
b	double
-	O
1	int
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
==	O
a	double
+	O
1	int
)	O
{	O
gsl_sf_result	struct
K	struct
;	O
int	O
stat_K	int
=	O
gsl_sf_exprel_n_e	function
(	O
a	double
,	O
-	O
x	double
,	O
&	O
K	struct
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
x	double
,	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
,	O
K	struct
.	O
val	double
,	O
K	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K	int
)	O
;	O
}	O
else	O
if	O
(	O
a	double
==	O
b	double
+	O
1	int
)	O
{	O
gsl_sf_result	struct
ex	struct
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_e	function
(	O
x	double
,	O
&	O
ex	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
ex	struct
.	O
val	double
*	O
(	O
1.0	int
+	O
x	double
/	O
b	double
)	O
;	O
result	pointer
->	O
err	double
=	O
ex	struct
.	O
err	double
*	O
(	O
1.0	int
+	O
x	double
/	O
b	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
ex	struct
.	O
val	double
*	O
GSL_DBL_EPSILON	int
*	O
(	O
1.0	int
+	O
fabs	function
(	O
x	double
/	O
b	double
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat_e	int
;	O
}	O
else	O
if	O
(	O
a	double
==	O
b	double
+	O
2	int
)	O
{	O
gsl_sf_result	struct
ex	struct
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_e	function
(	O
x	double
,	O
&	O
ex	struct
)	O
;	O
double	O
poly	double
=	O
(	O
1.0	int
+	O
x	double
/	O
b	double
*	O
(	O
2.0	int
+	O
x	double
/	O
(	O
b	double
+	O
1.0	int
)	O
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
ex	struct
.	O
val	double
*	O
poly	double
;	O
result	pointer
->	O
err	double
=	O
ex	struct
.	O
err	double
*	O
fabs	function
(	O
poly	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
ex	struct
.	O
val	double
*	O
GSL_DBL_EPSILON	int
*	O
(	O
1.0	int
+	O
fabs	function
(	O
x	double
/	O
b	double
)	O
*	O
(	O
2.0	int
+	O
fabs	function
(	O
x	double
/	O
(	O
b	double
+	O
1.0	int
)	O
)	O
)	O
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat_e	int
;	O
}	O
else	O
if	O
(	O
b	double
==	O
2	int
*	O
a	double
)	O
{	O
return	O
hyperg_1F1_beq2a_pos	function
(	O
a	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
b	double
<	O
10	int
&&	O
a	double
<	O
10	int
&&	O
ax	double
<	O
5.0	int
)	O
||	O
(	O
b	double
>	O
a	double
*	O
ax	double
)	O
||	O
(	O
b	double
>	O
a	double
&&	O
ax	double
<	O
5.0	int
)	O
)	O
{	O
return	O
gsl_sf_hyperg_1F1_series_e	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
>	O
a	double
&&	O
b	double
>=	O
2	int
*	O
a	double
+	O
x	double
)	O
{	O
double	O
rap	double
;	O
int	O
stat_CF1	int
=	O
hyperg_1F1_CF1_p_ser	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
&	O
rap	double
)	O
;	O
double	O
ra	double
=	O
1.0	int
+	O
x	double
/	O
a	double
*	O
rap	double
;	O
double	O
Ma	double
=	O
GSL_SQRT_DBL_MIN	int
;	O
double	O
Map1	double
=	O
ra	double
*	O
Ma	double
;	O
double	O
Mnp1	double
=	O
Map1	double
;	O
double	O
Mn	double
=	O
Ma	double
;	O
double	O
Mnm1	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
a	double
;	O
n	int
>	O
0	int
;	O
n	int
--	O
)	O
{	O
Mnm1	double
=	O
(	O
n	int
*	O
Mnp1	double
-	O
(	O
2	int
*	O
n	int
-	O
b	double
+	O
x	double
)	O
*	O
Mn	double
)	O
/	O
(	O
b	double
-	O
n	int
)	O
;	O
Mnp1	double
=	O
Mn	double
;	O
Mn	double
=	O
Mnm1	double
;	O
}	O
result	pointer
->	O
val	double
=	O
Ma	double
/	O
Mn	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
a	double
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
Ma	double
/	O
Mn	double
)	O
;	O
return	O
stat_CF1	int
;	O
}	O
else	O
if	O
(	O
b	double
>	O
a	double
&&	O
b	double
<	O
2	int
*	O
a	double
+	O
x	double
&&	O
b	double
>	O
x	double
)	O
{	O
double	O
rap	double
;	O
int	O
stat_CF1	int
=	O
hyperg_1F1_CF1_p_ser	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
&	O
rap	double
)	O
;	O
double	O
ra	double
=	O
1.0	int
+	O
x	double
/	O
a	double
*	O
rap	double
;	O
gsl_sf_result	struct
ex	struct
;	O
int	O
stat_ex	int
;	O
double	O
Ma	double
=	O
GSL_SQRT_DBL_MIN	int
;	O
double	O
Map1	double
=	O
ra	double
*	O
Ma	double
;	O
double	O
Mnm1	double
=	O
Ma	double
;	O
double	O
Mn	double
=	O
Map1	double
;	O
double	O
Mnp1	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
a	double
+	O
1	int
;	O
n	int
<	O
b	double
;	O
n	int
++	O
)	O
{	O
Mnp1	double
=	O
(	O
(	O
b	double
-	O
n	int
)	O
*	O
Mnm1	double
+	O
(	O
2	int
*	O
n	int
-	O
b	double
+	O
x	double
)	O
*	O
Mn	double
)	O
/	O
n	int
;	O
Mnm1	double
=	O
Mn	double
;	O
Mn	double
=	O
Mnp1	double
;	O
}	O
stat_ex	int
=	O
gsl_sf_exp_e	function
(	O
x	double
,	O
&	O
ex	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
ex	struct
.	O
val	double
*	O
Ma	double
/	O
Mn	double
;	O
result	pointer
->	O
err	double
=	O
ex	struct
.	O
err	double
*	O
fabs	function
(	O
Ma	double
/	O
Mn	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
b	double
-	O
a	double
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_ex	int
,	O
stat_CF1	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>=	O
0.0	int
)	O
{	O
if	O
(	O
b	double
<	O
a	double
)	O
{	O
if	O
(	O
x	double
+	O
log	function
(	O
fabs	function
(	O
x	double
/	O
b	double
)	O
)	O
<	O
GSL_LOG_DBL_MAX	int
-	O
2.0	int
)	O
{	O
double	O
ex	struct
=	O
exp	function
(	O
x	double
)	O
;	O
int	O
n	int
;	O
double	O
Mnm1	double
=	O
ex	struct
;	O
double	O
Mn	double
=	O
ex	struct
*	O
(	O
1.0	int
+	O
x	double
/	O
b	double
)	O
;	O
double	O
Mnp1	double
;	O
for	O
(	O
n	int
=	O
b	double
+	O
1	int
;	O
n	int
<	O
a	double
;	O
n	int
++	O
)	O
{	O
Mnp1	double
=	O
(	O
(	O
b	double
-	O
n	int
)	O
*	O
Mnm1	double
+	O
(	O
2	int
*	O
n	int
-	O
b	double
+	O
x	double
)	O
*	O
Mn	double
)	O
/	O
n	int
;	O
Mnm1	double
=	O
Mn	double
;	O
Mn	double
=	O
Mnp1	double
;	O
}	O
result	pointer
->	O
val	double
=	O
Mn	double
;	O
result	pointer
->	O
err	double
=	O
(	O
x	double
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
Mn	double
)	O
;	O
result	pointer
->	O
err	double
*=	O
fabs	function
(	O
a	double
-	O
b	double
)	O
+	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
}	O
else	O
{	O
gsl_sf_result	struct
r_Mn	struct
;	O
double	O
Mnm1	double
=	O
1.0	int
;	O
double	O
Mn	double
;	O
double	O
Mnp1	double
;	O
int	O
n	int
;	O
gsl_sf_exprel_n_e	function
(	O
b	double
-	O
1	int
,	O
x	double
,	O
&	O
r_Mn	struct
)	O
;	O
Mn	double
=	O
r_Mn	struct
.	O
val	double
;	O
for	O
(	O
n	int
=	O
1	int
;	O
n	int
<	O
a	double
;	O
n	int
++	O
)	O
{	O
Mnp1	double
=	O
(	O
(	O
b	double
-	O
n	int
)	O
*	O
Mnm1	double
+	O
(	O
2	int
*	O
n	int
-	O
b	double
+	O
x	double
)	O
*	O
Mn	double
)	O
/	O
n	int
;	O
Mnm1	double
=	O
Mn	double
;	O
Mn	double
=	O
Mnp1	double
;	O
}	O
result	pointer
->	O
val	double
=	O
Mn	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
Mn	double
)	O
*	O
(	O
1.0	int
+	O
fabs	function
(	O
a	double
)	O
)	O
*	O
fabs	function
(	O
r_Mn	struct
.	O
err	double
/	O
r_Mn	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
Mn	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
a	double
<=	O
0.5	int
*	O
(	O
b	double
-	O
x	double
)	O
||	O
a	double
>=	O
-	O
x	double
)	O
{	O
double	O
ex	struct
=	O
exp	function
(	O
x	double
)	O
;	O
double	O
Manp1	double
=	O
ex	struct
;	O
double	O
Man	double
=	O
ex	struct
*	O
(	O
1.0	int
+	O
x	double
/	O
(	O
a	double
-	O
1.0	int
)	O
)	O
;	O
double	O
Manm1	double
;	O
int	O
n	int
;	O
for	O
(	O
n	int
=	O
a	double
-	O
1	int
;	O
n	int
>	O
b	double
;	O
n	int
--	O
)	O
{	O
Manm1	double
=	O
(	O
-	O
n	int
*	O
(	O
1	int
-	O
n	int
-	O
x	double
)	O
*	O
Man	double
-	O
x	double
*	O
(	O
n	int
-	O
a	double
)	O
*	O
Manp1	double
)	O
/	O
(	O
n	int
*	O
(	O
n	int
-	O
1.0	int
)	O
)	O
;	O
Manp1	double
=	O
Man	double
;	O
Man	double
=	O
Manm1	double
;	O
}	O
result	pointer
->	O
val	double
=	O
Man	double
;	O
result	pointer
->	O
err	double
=	O
(	O
fabs	function
(	O
x	double
)	O
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
Man	double
)	O
;	O
result	pointer
->	O
err	double
*=	O
fabs	function
(	O
b	double
-	O
a	double
)	O
+	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
a0	int
=	O
(	O
int	O
)	O
ceil	function
(	O
0.5	int
*	O
(	O
b	double
-	O
x	double
)	O
)	O
;	O
double	O
Ma0b	double
;	O
double	O
Ma0bp1	double
;	O
double	O
Ma0p1b	double
;	O
double	O
Mnm1	double
;	O
double	O
Mn	double
;	O
double	O
Mnp1	double
;	O
int	O
n	int
;	O
{	O
double	O
ex	struct
=	O
exp	function
(	O
x	double
)	O
;	O
double	O
Ma0np1	double
=	O
ex	struct
;	O
double	O
Ma0n	double
=	O
ex	struct
*	O
(	O
1.0	int
+	O
x	double
/	O
(	O
a0	int
-	O
1.0	int
)	O
)	O
;	O
double	O
Ma0nm1	double
;	O
for	O
(	O
n	int
=	O
a0	int
-	O
1	int
;	O
n	int
>	O
b	double
;	O
n	int
--	O
)	O
{	O
Ma0nm1	double
=	O
(	O
-	O
n	int
*	O
(	O
1	int
-	O
n	int
-	O
x	double
)	O
*	O
Ma0n	double
-	O
x	double
*	O
(	O
n	int
-	O
a0	int
)	O
*	O
Ma0np1	double
)	O
/	O
(	O
n	int
*	O
(	O
n	int
-	O
1.0	int
)	O
)	O
;	O
Ma0np1	double
=	O
Ma0n	double
;	O
Ma0n	double
=	O
Ma0nm1	double
;	O
}	O
Ma0bp1	double
=	O
Ma0np1	double
;	O
Ma0b	double
=	O
Ma0n	double
;	O
Ma0p1b	double
=	O
(	O
b	double
*	O
(	O
a0	int
+	O
x	double
)	O
*	O
Ma0b	double
+	O
x	double
*	O
(	O
a0	int
-	O
b	double
)	O
*	O
Ma0bp1	double
)	O
/	O
(	O
a0	int
*	O
b	double
)	O
;	O
}	O
if	O
(	O
a0	int
>=	O
a	double
)	O
{	O
Mn	double
=	O
Ma0b	double
;	O
}	O
else	O
if	O
(	O
a0	int
+	O
1	int
>=	O
a	double
)	O
{	O
Mn	double
=	O
Ma0p1b	double
;	O
}	O
else	O
{	O
Mnm1	double
=	O
Ma0b	double
;	O
Mn	double
=	O
Ma0p1b	double
;	O
for	O
(	O
n	int
=	O
a0	int
+	O
1	int
;	O
n	int
<	O
a	double
;	O
n	int
++	O
)	O
{	O
Mnp1	double
=	O
(	O
(	O
b	double
-	O
n	int
)	O
*	O
Mnm1	double
+	O
(	O
2	int
*	O
n	int
-	O
b	double
+	O
x	double
)	O
*	O
Mn	double
)	O
/	O
n	int
;	O
Mnm1	double
=	O
Mn	double
;	O
Mn	double
=	O
Mnp1	double
;	O
}	O
}	O
result	pointer
->	O
val	double
=	O
Mn	double
;	O
result	pointer
->	O
err	double
=	O
(	O
fabs	function
(	O
x	double
)	O
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
Mn	double
)	O
;	O
result	pointer
->	O
err	double
*=	O
fabs	function
(	O
b	double
-	O
a	double
)	O
+	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
static	O
int	O
hyperg_1F1_a_negint_poly	function
(	O
const	O
int	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
a	double
==	O
0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
N	int
=	O
-	O
a	double
;	O
double	O
poly	double
=	O
1.0	int
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
N	int
-	O
1	int
;	O
k	int
>=	O
0	int
;	O
k	int
--	O
)	O
{	O
double	O
t	double
=	O
(	O
a	double
+	O
k	int
)	O
/	O
(	O
b	double
+	O
k	int
)	O
*	O
(	O
x	double
/	O
(	O
k	int
+	O
1	int
)	O
)	O
;	O
double	O
r	pointer
=	O
t	double
+	O
1.0	int
/	O
poly	double
;	O
if	O
(	O
r	pointer
>	O
0.9	int
*	O
GSL_DBL_MAX	int
/	O
poly	double
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
poly	double
*=	O
r	pointer
;	O
}	O
}	O
result	pointer
->	O
val	double
=	O
poly	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
(	O
sqrt	function
(	O
N	int
)	O
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
poly	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
hyperg_1F1_a_negint_lag	function
(	O
const	O
int	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
int	O
n	int
=	O
-	O
a	double
;	O
gsl_sf_result	struct
lag	struct
;	O
const	O
int	O
stat_l	int
=	O
gsl_sf_laguerre_n_e	function
(	O
n	int
,	O
b	double
-	O
1.0	int
,	O
x	double
,	O
&	O
lag	struct
)	O
;	O
if	O
(	O
b	double
<	O
0.0	int
)	O
{	O
gsl_sf_result	struct
lnfact	struct
;	O
gsl_sf_result	struct
lng1	struct
;	O
gsl_sf_result	struct
lng2	struct
;	O
double	O
s1	double
,	O
s2	double
;	O
const	O
int	O
stat_f	int
=	O
gsl_sf_lnfact_e	function
(	O
n	int
,	O
&	O
lnfact	struct
)	O
;	O
const	O
int	O
stat_g1	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
b	double
+	O
n	int
,	O
&	O
lng1	struct
,	O
&	O
s1	double
)	O
;	O
const	O
int	O
stat_g2	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
b	double
,	O
&	O
lng2	struct
,	O
&	O
s2	double
)	O
;	O
const	O
double	O
lnpre_val	double
=	O
lnfact	struct
.	O
val	double
-	O
(	O
lng1	struct
.	O
val	double
-	O
lng2	struct
.	O
val	double
)	O
;	O
const	O
double	O
lnpre_err	double
=	O
lnfact	struct
.	O
err	double
+	O
lng1	struct
.	O
err	double
+	O
lng2	struct
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
lnpre_val	double
)	O
;	O
const	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
lnpre_val	double
,	O
lnpre_err	double
,	O
s1	double
*	O
s2	double
*	O
lag	struct
.	O
val	double
,	O
lag	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_5	O
(	O
stat_e	int
,	O
stat_l	int
,	O
stat_g1	int
,	O
stat_g2	int
,	O
stat_f	int
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct
lnbeta	struct
;	O
gsl_sf_lnbeta_e	function
(	O
b	double
,	O
n	int
,	O
&	O
lnbeta	struct
)	O
;	O
if	O
(	O
fabs	function
(	O
lnbeta	struct
.	O
val	double
)	O
<	O
0.1	int
)	O
{	O
const	O
double	O
ln_term_val	double
=	O
log	function
(	O
1.25	int
*	O
n	int
)	O
;	O
const	O
double	O
ln_term_err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
ln_term_val	double
;	O
gsl_sf_result	struct
beta	struct
;	O
int	O
stat_b	int
=	O
gsl_sf_beta_e	function
(	O
b	double
,	O
n	int
,	O
&	O
beta	struct
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
ln_term_val	double
,	O
ln_term_err	double
,	O
lag	struct
.	O
val	double
,	O
lag	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
result	pointer
->	O
val	double
*=	O
beta	struct
.	O
val	double
/	O
1.25	int
;	O
result	pointer
->	O
err	double
*=	O
beta	struct
.	O
val	double
/	O
1.25	int
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_e	int
,	O
stat_l	int
,	O
stat_b	int
)	O
;	O
}	O
else	O
{	O
const	O
double	O
ln_n	double
=	O
log	function
(	O
n	int
)	O
;	O
const	O
double	O
ln_term_val	double
=	O
lnbeta	struct
.	O
val	double
+	O
ln_n	double
;	O
const	O
double	O
ln_term_err	double
=	O
lnbeta	struct
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
ln_n	double
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
ln_term_val	double
,	O
ln_term_err	double
,	O
lag	struct
.	O
val	double
,	O
lag	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_l	int
)	O
;	O
}	O
}	O
}	O
static	O
int	O
hyperg_1F1_ab_negint	function
(	O
const	O
int	O
a	double
,	O
const	O
int	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
>	O
0.0	int
)	O
{	O
return	O
hyperg_1F1_a_negint_poly	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct
K	struct
;	O
int	O
stat_K	int
=	O
hyperg_1F1_a_negint_poly	function
(	O
b	double
-	O
a	double
,	O
b	double
,	O
-	O
x	double
,	O
&	O
K	struct
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
x	double
,	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
,	O
K	struct
.	O
val	double
,	O
K	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K	int
)	O
;	O
}	O
}	O
static	O
int	O
hyperg_1F1_U	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
bp	double
=	O
2.0	int
-	O
b	double
;	O
const	O
double	O
ap	double
=	O
a	double
-	O
b	double
+	O
1.0	int
;	O
gsl_sf_result	struct
lg_ap	struct
,	O
lg_bp	struct
;	O
double	O
sg_ap	double
;	O
int	O
stat_lg0	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
ap	double
,	O
&	O
lg_ap	struct
,	O
&	O
sg_ap	double
)	O
;	O
int	O
stat_lg1	int
=	O
gsl_sf_lngamma_e	function
(	O
bp	double
,	O
&	O
lg_bp	struct
)	O
;	O
int	O
stat_lg2	int
=	O
GSL_ERROR_SELECT_2	O
(	O
stat_lg0	int
,	O
stat_lg1	int
)	O
;	O
double	O
t1	double
=	O
(	O
bp	double
-	O
1.0	int
)	O
*	O
log	function
(	O
x	double
)	O
;	O
double	O
lnpre_val	double
=	O
lg_ap	struct
.	O
val	double
-	O
lg_bp	struct
.	O
val	double
+	O
t1	double
;	O
double	O
lnpre_err	double
=	O
lg_ap	struct
.	O
err	double
+	O
lg_bp	struct
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
t1	double
)	O
;	O
gsl_sf_result	struct
lg_2mbp	struct
,	O
lg_1papmbp	struct
;	O
double	O
sg_2mbp	double
,	O
sg_1papmbp	double
;	O
int	O
stat_lg3	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
2.0	int
-	O
bp	double
,	O
&	O
lg_2mbp	struct
,	O
&	O
sg_2mbp	double
)	O
;	O
int	O
stat_lg4	int
=	O
gsl_sf_lngamma_sgn_e	function
(	O
1.0	int
+	O
ap	double
-	O
bp	double
,	O
&	O
lg_1papmbp	struct
,	O
&	O
sg_1papmbp	double
)	O
;	O
int	O
stat_lg5	int
=	O
GSL_ERROR_SELECT_2	O
(	O
stat_lg3	int
,	O
stat_lg4	int
)	O
;	O
double	O
lnc1_val	double
=	O
lg_2mbp	struct
.	O
val	double
-	O
lg_1papmbp	struct
.	O
val	double
;	O
double	O
lnc1_err	double
=	O
lg_2mbp	struct
.	O
err	double
+	O
lg_1papmbp	struct
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
lg_2mbp	struct
.	O
val	double
)	O
+	O
fabs	function
(	O
lg_1papmbp	struct
.	O
val	double
)	O
)	O
;	O
gsl_sf_result	struct
M	struct
;	O
gsl_sf_result_e10	struct
U	struct
;	O
int	O
stat_F	int
=	O
gsl_sf_hyperg_1F1_e	function
(	O
ap	double
,	O
bp	double
,	O
x	double
,	O
&	O
M	struct
)	O
;	O
int	O
stat_U	int
=	O
gsl_sf_hyperg_U_e10_e	function
(	O
ap	double
,	O
bp	double
,	O
x	double
,	O
&	O
U	struct
)	O
;	O
int	O
stat_FU	int
=	O
GSL_ERROR_SELECT_2	O
(	O
stat_F	int
,	O
stat_U	int
)	O
;	O
gsl_sf_result_e10	struct
term_M	struct
;	O
int	O
stat_e0	int
=	O
gsl_sf_exp_mult_err_e10_e	function
(	O
lnc1_val	double
,	O
lnc1_err	double
,	O
sg_2mbp	double
*	O
sg_1papmbp	double
*	O
M	struct
.	O
val	double
,	O
M	struct
.	O
err	double
,	O
&	O
term_M	struct
)	O
;	O
const	O
double	O
ombp	double
=	O
1.0	int
-	O
bp	double
;	O
const	O
double	O
Uee_val	double
=	O
U	struct
.	O
e10	int
*	O
M_LN10	int
;	O
const	O
double	O
Uee_err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
Uee_val	double
)	O
;	O
const	O
double	O
Mee_val	double
=	O
term_M	struct
.	O
e10	int
*	O
M_LN10	int
;	O
const	O
double	O
Mee_err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
Mee_val	double
)	O
;	O
int	O
stat_e1	int
;	O
if	O
(	O
Uee_val	double
>	O
Mee_val	double
)	O
{	O
const	O
double	O
factorM_val	double
=	O
exp	function
(	O
Mee_val	double
-	O
Uee_val	double
)	O
;	O
const	O
double	O
factorM_err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
Mee_val	double
-	O
Uee_val	double
)	O
+	O
1.0	int
)	O
*	O
factorM_val	double
;	O
const	O
double	O
inner_val	double
=	O
term_M	struct
.	O
val	double
*	O
factorM_val	double
-	O
ombp	double
*	O
U	struct
.	O
val	double
;	O
const	O
double	O
inner_err	double
=	O
term_M	struct
.	O
err	double
*	O
factorM_val	double
+	O
fabs	function
(	O
ombp	double
)	O
*	O
U	struct
.	O
err	double
+	O
fabs	function
(	O
term_M	struct
.	O
val	double
)	O
*	O
factorM_err	double
+	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
term_M	struct
.	O
val	double
*	O
factorM_val	double
)	O
+	O
fabs	function
(	O
ombp	double
*	O
U	struct
.	O
val	double
)	O
)	O
;	O
stat_e1	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
lnpre_val	double
+	O
Uee_val	double
,	O
lnpre_err	double
+	O
Uee_err	double
,	O
sg_ap	double
*	O
inner_val	double
,	O
inner_err	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
const	O
double	O
factorU_val	double
=	O
exp	function
(	O
Uee_val	double
-	O
Mee_val	double
)	O
;	O
const	O
double	O
factorU_err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
Mee_val	double
-	O
Uee_val	double
)	O
+	O
1.0	int
)	O
*	O
factorU_val	double
;	O
const	O
double	O
inner_val	double
=	O
term_M	struct
.	O
val	double
-	O
ombp	double
*	O
factorU_val	double
*	O
U	struct
.	O
val	double
;	O
const	O
double	O
inner_err	double
=	O
term_M	struct
.	O
err	double
+	O
fabs	function
(	O
ombp	double
*	O
factorU_val	double
*	O
U	struct
.	O
err	double
)	O
+	O
fabs	function
(	O
ombp	double
*	O
factorU_err	double
*	O
U	struct
.	O
val	double
)	O
+	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
term_M	struct
.	O
val	double
)	O
+	O
fabs	function
(	O
ombp	double
*	O
factorU_val	double
*	O
U	struct
.	O
val	double
)	O
)	O
;	O
stat_e1	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
lnpre_val	double
+	O
Mee_val	double
,	O
lnpre_err	double
+	O
Mee_err	double
,	O
sg_ap	double
*	O
inner_val	double
,	O
inner_err	double
,	O
result	pointer
)	O
;	O
}	O
return	O
GSL_ERROR_SELECT_5	O
(	O
stat_e1	int
,	O
stat_e0	int
,	O
stat_FU	int
,	O
stat_lg5	int
,	O
stat_lg2	int
)	O
;	O
}	O
static	O
int	O
hyperg_1F1_ab_pos	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
ax	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
(	O
b	double
<	O
10.0	int
&&	O
a	double
<	O
10.0	int
&&	O
ax	double
<	O
5.0	int
)	O
||	O
(	O
b	double
>	O
a	double
*	O
ax	double
)	O
||	O
(	O
b	double
>	O
a	double
&&	O
ax	double
<	O
5.0	int
)	O
)	O
{	O
return	O
gsl_sf_hyperg_1F1_series_e	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
100.0	int
&&	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
a	double
)	O
,	O
1.0	int
)	O
*	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
1.0	int
+	O
a	double
-	O
b	double
)	O
,	O
1.0	int
)	O
<	O
0.7	int
*	O
fabs	function
(	O
x	double
)	O
)	O
{	O
return	O
hyperg_1F1_asymp_negx	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
100.0	int
&&	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
b	double
-	O
a	double
)	O
,	O
1.0	int
)	O
*	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
1.0	int
-	O
a	double
)	O
,	O
1.0	int
)	O
<	O
0.7	int
*	O
fabs	function
(	O
x	double
)	O
)	O
{	O
return	O
hyperg_1F1_asymp_posx	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
b	double
-	O
a	double
)	O
<=	O
1.0	int
)	O
{	O
return	O
hyperg_1F1_beps_bgt0	function
(	O
a	double
-	O
b	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
>	O
a	double
&&	O
b	double
>=	O
2	int
*	O
a	double
+	O
x	double
)	O
{	O
double	O
rap	double
;	O
int	O
stat_CF1	int
=	O
hyperg_1F1_CF1_p_ser	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
&	O
rap	double
)	O
;	O
double	O
ra	double
=	O
1.0	int
+	O
x	double
/	O
a	double
*	O
rap	double
;	O
double	O
Ma	double
=	O
GSL_SQRT_DBL_MIN	int
;	O
double	O
Map1	double
=	O
ra	double
*	O
Ma	double
;	O
double	O
Mnp1	double
=	O
Map1	double
;	O
double	O
Mn	double
=	O
Ma	double
;	O
double	O
Mnm1	double
;	O
gsl_sf_result	struct
Mn_true	struct
;	O
int	O
stat_Mt	int
;	O
double	O
n	int
;	O
for	O
(	O
n	int
=	O
a	double
;	O
n	int
>	O
0.5	int
;	O
n	int
-=	O
1.0	int
)	O
{	O
Mnm1	double
=	O
(	O
n	int
*	O
Mnp1	double
-	O
(	O
2.0	int
*	O
n	int
-	O
b	double
+	O
x	double
)	O
*	O
Mn	double
)	O
/	O
(	O
b	double
-	O
n	int
)	O
;	O
Mnp1	double
=	O
Mn	double
;	O
Mn	double
=	O
Mnm1	double
;	O
}	O
stat_Mt	int
=	O
hyperg_1F1_small_a_bgt0	function
(	O
n	int
,	O
b	double
,	O
x	double
,	O
&	O
Mn_true	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
(	O
Ma	double
/	O
Mn	double
)	O
*	O
Mn_true	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
Ma	double
/	O
Mn	double
)	O
*	O
Mn_true	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
a	double
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_Mt	int
,	O
stat_CF1	int
)	O
;	O
}	O
else	O
if	O
(	O
b	double
>	O
a	double
&&	O
b	double
<	O
2	int
*	O
a	double
+	O
x	double
&&	O
b	double
>	O
x	double
)	O
{	O
gsl_sf_result	struct
Mn_true	struct
;	O
int	O
stat_Mt	int
;	O
double	O
rap	double
;	O
int	O
stat_CF1	int
=	O
hyperg_1F1_CF1_p_ser	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
&	O
rap	double
)	O
;	O
double	O
ra	double
=	O
1.0	int
+	O
x	double
/	O
a	double
*	O
rap	double
;	O
double	O
Ma	double
=	O
GSL_SQRT_DBL_MIN	int
;	O
double	O
Mnm1	double
=	O
Ma	double
;	O
double	O
Mn	double
=	O
ra	double
*	O
Mnm1	double
;	O
double	O
Mnp1	double
;	O
double	O
n	int
;	O
for	O
(	O
n	int
=	O
a	double
+	O
1.0	int
;	O
n	int
<	O
b	double
-	O
0.5	int
;	O
n	int
+=	O
1.0	int
)	O
{	O
Mnp1	double
=	O
(	O
(	O
b	double
-	O
n	int
)	O
*	O
Mnm1	double
+	O
(	O
2	int
*	O
n	int
-	O
b	double
+	O
x	double
)	O
*	O
Mn	double
)	O
/	O
n	int
;	O
Mnm1	double
=	O
Mn	double
;	O
Mn	double
=	O
Mnp1	double
;	O
}	O
stat_Mt	int
=	O
hyperg_1F1_beps_bgt0	function
(	O
n	int
-	O
b	double
,	O
b	double
,	O
x	double
,	O
&	O
Mn_true	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
Ma	double
/	O
Mn	double
*	O
Mn_true	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
fabs	function
(	O
Ma	double
/	O
Mn	double
)	O
*	O
Mn_true	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
b	double
-	O
a	double
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_Mt	int
,	O
stat_CF1	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>=	O
0.0	int
)	O
{	O
if	O
(	O
b	double
<	O
a	double
)	O
{	O
double	O
N	int
=	O
floor	function
(	O
a	double
-	O
b	double
)	O
;	O
double	O
eps	double
=	O
a	double
-	O
b	double
-	O
N	int
;	O
gsl_sf_result	struct
r_M0	struct
;	O
gsl_sf_result	struct
r_M1	struct
;	O
int	O
stat_0	int
=	O
hyperg_1F1_beps_bgt0	function
(	O
eps	double
-	O
1.0	int
,	O
b	double
,	O
x	double
,	O
&	O
r_M0	struct
)	O
;	O
int	O
stat_1	int
=	O
hyperg_1F1_beps_bgt0	function
(	O
eps	double
,	O
b	double
,	O
x	double
,	O
&	O
r_M1	struct
)	O
;	O
double	O
M0	double
=	O
r_M0	struct
.	O
val	double
;	O
double	O
M1	double
=	O
r_M1	struct
.	O
val	double
;	O
double	O
Mam1	double
=	O
M0	double
;	O
double	O
Ma	double
=	O
M1	double
;	O
double	O
Map1	double
;	O
double	O
ap	double
;	O
double	O
start_pair	double
=	O
fabs	function
(	O
M0	double
)	O
+	O
fabs	function
(	O
M1	double
)	O
;	O
double	O
minim_pair	double
=	O
GSL_DBL_MAX	int
;	O
double	O
pair_ratio	double
;	O
double	O
rat_0	double
=	O
fabs	function
(	O
r_M0	struct
.	O
err	double
/	O
r_M0	struct
.	O
val	double
)	O
;	O
double	O
rat_1	double
=	O
fabs	function
(	O
r_M1	struct
.	O
err	double
/	O
r_M1	struct
.	O
val	double
)	O
;	O
for	O
(	O
ap	double
=	O
b	double
+	O
eps	double
;	O
ap	double
<	O
a	double
-	O
0.1	int
;	O
ap	double
+=	O
1.0	int
)	O
{	O
Map1	double
=	O
(	O
(	O
b	double
-	O
ap	double
)	O
*	O
Mam1	double
+	O
(	O
2.0	int
*	O
ap	double
-	O
b	double
+	O
x	double
)	O
*	O
Ma	double
)	O
/	O
ap	double
;	O
Mam1	double
=	O
Ma	double
;	O
Ma	double
=	O
Map1	double
;	O
minim_pair	double
=	O
GSL_MIN_DBL	function
(	O
fabs	function
(	O
Mam1	double
)	O
+	O
fabs	function
(	O
Ma	double
)	O
,	O
minim_pair	double
)	O
;	O
}	O
pair_ratio	double
=	O
start_pair	double
/	O
minim_pair	double
;	O
result	pointer
->	O
val	double
=	O
Ma	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
(	O
rat_0	double
+	O
rat_1	double
+	O
GSL_DBL_EPSILON	int
)	O
*	O
(	O
fabs	function
(	O
b	double
-	O
a	double
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
Ma	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
(	O
rat_0	double
+	O
rat_1	double
)	O
*	O
pair_ratio	double
*	O
pair_ratio	double
*	O
fabs	function
(	O
Ma	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
Ma	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_0	int
,	O
stat_1	int
)	O
;	O
}	O
else	O
{	O
double	O
eps	double
=	O
a	double
-	O
floor	function
(	O
a	double
)	O
;	O
gsl_sf_result	struct
r_Mnm1	struct
;	O
gsl_sf_result	struct
r_Mn	struct
;	O
int	O
stat_0	int
=	O
hyperg_1F1_small_a_bgt0	function
(	O
eps	double
,	O
b	double
,	O
x	double
,	O
&	O
r_Mnm1	struct
)	O
;	O
int	O
stat_1	int
=	O
hyperg_1F1_small_a_bgt0	function
(	O
eps	double
+	O
1.0	int
,	O
b	double
,	O
x	double
,	O
&	O
r_Mn	struct
)	O
;	O
double	O
Mnm1	double
=	O
r_Mnm1	struct
.	O
val	double
;	O
double	O
Mn	double
=	O
r_Mn	struct
.	O
val	double
;	O
double	O
Mnp1	double
;	O
double	O
n	int
;	O
double	O
start_pair	double
=	O
fabs	function
(	O
Mn	double
)	O
+	O
fabs	function
(	O
Mnm1	double
)	O
;	O
double	O
minim_pair	double
=	O
GSL_DBL_MAX	int
;	O
double	O
pair_ratio	double
;	O
double	O
rat_0	double
=	O
fabs	function
(	O
r_Mnm1	struct
.	O
err	double
/	O
r_Mnm1	struct
.	O
val	double
)	O
;	O
double	O
rat_1	double
=	O
fabs	function
(	O
r_Mn	struct
.	O
err	double
/	O
r_Mn	struct
.	O
val	double
)	O
;	O
for	O
(	O
n	int
=	O
eps	double
+	O
1.0	int
;	O
n	int
<	O
a	double
-	O
0.1	int
;	O
n	int
++	O
)	O
{	O
Mnp1	double
=	O
(	O
(	O
b	double
-	O
n	int
)	O
*	O
Mnm1	double
+	O
(	O
2	int
*	O
n	int
-	O
b	double
+	O
x	double
)	O
*	O
Mn	double
)	O
/	O
n	int
;	O
Mnm1	double
=	O
Mn	double
;	O
Mn	double
=	O
Mnp1	double
;	O
minim_pair	double
=	O
GSL_MIN_DBL	function
(	O
fabs	function
(	O
Mn	double
)	O
+	O
fabs	function
(	O
Mnm1	double
)	O
,	O
minim_pair	double
)	O
;	O
}	O
pair_ratio	double
=	O
start_pair	double
/	O
minim_pair	double
;	O
result	pointer
->	O
val	double
=	O
Mn	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
(	O
rat_0	double
+	O
rat_1	double
+	O
GSL_DBL_EPSILON	int
)	O
*	O
(	O
fabs	function
(	O
a	double
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
Mn	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
(	O
rat_0	double
+	O
rat_1	double
)	O
*	O
pair_ratio	double
*	O
pair_ratio	double
*	O
fabs	function
(	O
Mn	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
Mn	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_0	int
,	O
stat_1	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
a	double
<=	O
0.5	int
*	O
(	O
b	double
-	O
x	double
)	O
||	O
a	double
>=	O
-	O
x	double
)	O
{	O
double	O
N	int
=	O
floor	function
(	O
a	double
-	O
b	double
)	O
;	O
double	O
eps	double
=	O
1.0	int
+	O
N	int
-	O
a	double
+	O
b	double
;	O
gsl_sf_result	struct
r_Manp1	struct
;	O
gsl_sf_result	struct
r_Man	struct
;	O
int	O
stat_0	int
=	O
hyperg_1F1_beps_bgt0	function
(	O
-	O
eps	double
,	O
a	double
+	O
eps	double
,	O
x	double
,	O
&	O
r_Manp1	struct
)	O
;	O
int	O
stat_1	int
=	O
hyperg_1F1_beps_bgt0	function
(	O
1.0	int
-	O
eps	double
,	O
a	double
+	O
eps	double
-	O
1.0	int
,	O
x	double
,	O
&	O
r_Man	struct
)	O
;	O
double	O
Manp1	double
=	O
r_Manp1	struct
.	O
val	double
;	O
double	O
Man	double
=	O
r_Man	struct
.	O
val	double
;	O
double	O
Manm1	double
;	O
double	O
n	int
;	O
double	O
start_pair	double
=	O
fabs	function
(	O
Manp1	double
)	O
+	O
fabs	function
(	O
Man	double
)	O
;	O
double	O
minim_pair	double
=	O
GSL_DBL_MAX	int
;	O
double	O
pair_ratio	double
;	O
double	O
rat_0	double
=	O
fabs	function
(	O
r_Manp1	struct
.	O
err	double
/	O
r_Manp1	struct
.	O
val	double
)	O
;	O
double	O
rat_1	double
=	O
fabs	function
(	O
r_Man	struct
.	O
err	double
/	O
r_Man	struct
.	O
val	double
)	O
;	O
for	O
(	O
n	int
=	O
a	double
+	O
eps	double
-	O
1.0	int
;	O
n	int
>	O
b	double
+	O
0.1	int
;	O
n	int
-=	O
1.0	int
)	O
{	O
Manm1	double
=	O
(	O
-	O
n	int
*	O
(	O
1	int
-	O
n	int
-	O
x	double
)	O
*	O
Man	double
-	O
x	double
*	O
(	O
n	int
-	O
a	double
)	O
*	O
Manp1	double
)	O
/	O
(	O
n	int
*	O
(	O
n	int
-	O
1.0	int
)	O
)	O
;	O
Manp1	double
=	O
Man	double
;	O
Man	double
=	O
Manm1	double
;	O
minim_pair	double
=	O
GSL_MIN_DBL	function
(	O
fabs	function
(	O
Manp1	double
)	O
+	O
fabs	function
(	O
Man	double
)	O
,	O
minim_pair	double
)	O
;	O
}	O
pair_ratio	double
=	O
start_pair	double
/	O
minim_pair	double
;	O
result	pointer
->	O
val	double
=	O
Man	double
;	O
result	pointer
->	O
err	double
=	O
2.0	int
*	O
(	O
rat_0	double
+	O
rat_1	double
+	O
GSL_DBL_EPSILON	int
)	O
*	O
(	O
fabs	function
(	O
b	double
-	O
a	double
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
Man	double
)	O
;	O
result	pointer
->	O
err	double
*=	O
pair_ratio	double
*	O
pair_ratio	double
+	O
1.0	int
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_0	int
,	O
stat_1	int
)	O
;	O
}	O
else	O
{	O
double	O
epsa	double
=	O
a	double
-	O
floor	function
(	O
a	double
)	O
;	O
double	O
a0	int
=	O
floor	function
(	O
0.5	int
*	O
(	O
b	double
-	O
x	double
)	O
)	O
+	O
epsa	double
;	O
double	O
N	int
=	O
floor	function
(	O
a0	int
-	O
b	double
)	O
;	O
double	O
epsb	double
=	O
1.0	int
+	O
N	int
-	O
a0	int
+	O
b	double
;	O
double	O
Ma0b	double
;	O
double	O
Ma0bp1	double
;	O
double	O
Ma0p1b	double
;	O
int	O
stat_a0	int
;	O
double	O
Mnm1	double
;	O
double	O
Mn	double
;	O
double	O
Mnp1	double
;	O
double	O
n	int
;	O
double	O
err_rat	double
;	O
{	O
gsl_sf_result	struct
r_Ma0np1	struct
;	O
gsl_sf_result	struct
r_Ma0n	struct
;	O
int	O
stat_0	int
=	O
hyperg_1F1_beps_bgt0	function
(	O
-	O
epsb	double
,	O
a0	int
+	O
epsb	double
,	O
x	double
,	O
&	O
r_Ma0np1	struct
)	O
;	O
int	O
stat_1	int
=	O
hyperg_1F1_beps_bgt0	function
(	O
1.0	int
-	O
epsb	double
,	O
a0	int
+	O
epsb	double
-	O
1.0	int
,	O
x	double
,	O
&	O
r_Ma0n	struct
)	O
;	O
double	O
Ma0np1	double
=	O
r_Ma0np1	struct
.	O
val	double
;	O
double	O
Ma0n	double
=	O
r_Ma0n	struct
.	O
val	double
;	O
double	O
Ma0nm1	double
;	O
err_rat	double
=	O
fabs	function
(	O
r_Ma0np1	struct
.	O
err	double
/	O
r_Ma0np1	struct
.	O
val	double
)	O
+	O
fabs	function
(	O
r_Ma0n	struct
.	O
err	double
/	O
r_Ma0n	struct
.	O
val	double
)	O
;	O
for	O
(	O
n	int
=	O
a0	int
+	O
epsb	double
-	O
1.0	int
;	O
n	int
>	O
b	double
+	O
0.1	int
;	O
n	int
-=	O
1.0	int
)	O
{	O
Ma0nm1	double
=	O
(	O
-	O
n	int
*	O
(	O
1	int
-	O
n	int
-	O
x	double
)	O
*	O
Ma0n	double
-	O
x	double
*	O
(	O
n	int
-	O
a0	int
)	O
*	O
Ma0np1	double
)	O
/	O
(	O
n	int
*	O
(	O
n	int
-	O
1.0	int
)	O
)	O
;	O
Ma0np1	double
=	O
Ma0n	double
;	O
Ma0n	double
=	O
Ma0nm1	double
;	O
}	O
Ma0bp1	double
=	O
Ma0np1	double
;	O
Ma0b	double
=	O
Ma0n	double
;	O
Ma0p1b	double
=	O
(	O
b	double
*	O
(	O
a0	int
+	O
x	double
)	O
*	O
Ma0b	double
+	O
x	double
*	O
(	O
a0	int
-	O
b	double
)	O
*	O
Ma0bp1	double
)	O
/	O
(	O
a0	int
*	O
b	double
)	O
;	O
stat_a0	int
=	O
GSL_ERROR_SELECT_2	O
(	O
stat_0	int
,	O
stat_1	int
)	O
;	O
}	O
if	O
(	O
a0	int
>=	O
a	double
-	O
0.1	int
)	O
{	O
Mn	double
=	O
Ma0b	double
;	O
}	O
else	O
if	O
(	O
a0	int
+	O
1	int
>=	O
a	double
-	O
0.1	int
)	O
{	O
Mn	double
=	O
Ma0p1b	double
;	O
}	O
else	O
{	O
Mnm1	double
=	O
Ma0b	double
;	O
Mn	double
=	O
Ma0p1b	double
;	O
for	O
(	O
n	int
=	O
a0	int
+	O
1.0	int
;	O
n	int
<	O
a	double
-	O
0.1	int
;	O
n	int
+=	O
1.0	int
)	O
{	O
Mnp1	double
=	O
(	O
(	O
b	double
-	O
n	int
)	O
*	O
Mnm1	double
+	O
(	O
2	int
*	O
n	int
-	O
b	double
+	O
x	double
)	O
*	O
Mn	double
)	O
/	O
n	int
;	O
Mnm1	double
=	O
Mn	double
;	O
Mn	double
=	O
Mnp1	double
;	O
}	O
}	O
result	pointer
->	O
val	double
=	O
Mn	double
;	O
result	pointer
->	O
err	double
=	O
(	O
err_rat	double
+	O
GSL_DBL_EPSILON	int
)	O
*	O
(	O
fabs	function
(	O
b	double
-	O
a	double
)	O
+	O
1.0	int
)	O
*	O
fabs	function
(	O
Mn	double
)	O
;	O
return	O
stat_a0	int
;	O
}	O
}	O
}	O
static	O
int	O
hyperg_1F1_ab_neg	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
bma	double
=	O
b	double
-	O
a	double
;	O
const	O
double	O
abs_x	double
=	O
fabs	function
(	O
x	double
)	O
;	O
const	O
double	O
abs_a	double
=	O
fabs	function
(	O
a	double
)	O
;	O
const	O
double	O
abs_b	double
=	O
fabs	function
(	O
b	double
)	O
;	O
const	O
double	O
size_a	double
=	O
GSL_MAX	O
(	O
abs_a	double
,	O
1.0	int
)	O
;	O
const	O
double	O
size_b	double
=	O
GSL_MAX	O
(	O
abs_b	double
,	O
1.0	int
)	O
;	O
const	O
int	O
bma_integer	int
=	O
(	O
bma	double
-	O
floor	function
(	O
bma	double
+	O
0.5	int
)	O
<	O
_1F1_INT_THRESHOLD	O
)	O
;	O
if	O
(	O
(	O
abs_a	double
<	O
10.0	int
&&	O
abs_b	double
<	O
10.0	int
&&	O
abs_x	double
<	O
5.0	int
)	O
||	O
(	O
b	double
>	O
0.8	int
*	O
GSL_MAX	O
(	O
fabs	function
(	O
a	double
)	O
,	O
1.0	int
)	O
*	O
fabs	function
(	O
x	double
)	O
)	O
)	O
{	O
return	O
gsl_sf_hyperg_1F1_series_e	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
0.0	int
&&	O
size_b	double
>	O
size_a	double
&&	O
size_a	double
*	O
log	function
(	O
M_E	int
*	O
x	double
/	O
size_b	double
)	O
<	O
GSL_LOG_DBL_EPSILON	O
+	O
7.0	int
)	O
{	O
return	O
gsl_sf_hyperg_1F1_series_e	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
(	O
abs_x	double
<	O
5.0	int
&&	O
fabs	function
(	O
bma	double
)	O
<	O
10.0	int
&&	O
abs_b	double
<	O
10.0	int
)	O
||	O
(	O
b	double
>	O
0.8	int
*	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
bma	double
)	O
,	O
1.0	int
)	O
*	O
abs_x	double
)	O
)	O
{	O
gsl_sf_result	struct
Kummer_1F1	struct
;	O
int	O
stat_K	int
=	O
gsl_sf_hyperg_1F1_series_e	function
(	O
bma	double
,	O
b	double
,	O
-	O
x	double
,	O
&	O
Kummer_1F1	struct
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
x	double
,	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
,	O
Kummer_1F1	struct
.	O
val	double
,	O
Kummer_1F1	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
30.0	int
&&	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
a	double
)	O
,	O
1.0	int
)	O
*	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
1.0	int
+	O
a	double
-	O
b	double
)	O
,	O
1.0	int
)	O
<	O
0.99	int
*	O
fabs	function
(	O
x	double
)	O
)	O
{	O
return	O
hyperg_1F1_asymp_negx	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
100.0	int
&&	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
bma	double
)	O
,	O
1.0	int
)	O
*	O
GSL_MAX_DBL	function
(	O
fabs	function
(	O
1.0	int
-	O
a	double
)	O
,	O
1.0	int
)	O
<	O
0.99	int
*	O
fabs	function
(	O
x	double
)	O
)	O
{	O
return	O
hyperg_1F1_asymp_posx	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
0.0	int
&&	O
!	O
(	O
bma_integer	int
&&	O
bma	double
>	O
0.0	int
)	O
)	O
{	O
return	O
hyperg_1F1_U	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
int	O
status	int
=	O
gsl_sf_hyperg_1F1_series_e	function
(	O
b	double
-	O
a	double
,	O
b	double
,	O
-	O
x	double
,	O
result	pointer
)	O
;	O
double	O
K_factor	double
=	O
exp	function
(	O
x	double
)	O
;	O
result	pointer
->	O
val	double
*=	O
K_factor	double
;	O
result	pointer
->	O
err	double
*=	O
K_factor	double
;	O
return	O
status	int
;	O
}	O
else	O
{	O
int	O
status	int
=	O
gsl_sf_hyperg_1F1_series_e	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
return	O
status	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_hyperg_1F1_int_e	function
(	O
const	O
int	O
a	double
,	O
const	O
int	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
a	double
==	O
b	double
)	O
{	O
return	O
gsl_sf_exp_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
==	O
0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
a	double
==	O
0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
b	double
<	O
0	int
&&	O
(	O
a	double
<	O
b	double
||	O
a	double
>	O
0	int
)	O
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
>	O
100.0	int
&&	O
GSL_MAX_DBL	function
(	O
1.0	int
,	O
fabs	function
(	O
b	double
-	O
a	double
)	O
)	O
*	O
GSL_MAX_DBL	function
(	O
1.0	int
,	O
fabs	function
(	O
1	int
-	O
a	double
)	O
)	O
<	O
0.5	int
*	O
x	double
)	O
{	O
return	O
hyperg_1F1_asymp_posx	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
100.0	int
&&	O
GSL_MAX_DBL	function
(	O
1.0	int
,	O
fabs	function
(	O
a	double
)	O
)	O
*	O
GSL_MAX_DBL	function
(	O
1.0	int
,	O
fabs	function
(	O
1	int
+	O
a	double
-	O
b	double
)	O
)	O
<	O
0.5	int
*	O
fabs	function
(	O
x	double
)	O
)	O
{	O
return	O
hyperg_1F1_asymp_negx	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
a	double
<	O
0	int
&&	O
b	double
<	O
0	int
)	O
{	O
return	O
hyperg_1F1_ab_negint	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
a	double
<	O
0	int
&&	O
b	double
>	O
0	int
)	O
{	O
gsl_sf_result	struct
Kummer_1F1	struct
;	O
int	O
stat_K	int
=	O
hyperg_1F1_ab_posint	function
(	O
b	double
-	O
a	double
,	O
b	double
,	O
-	O
x	double
,	O
&	O
Kummer_1F1	struct
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
x	double
,	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
,	O
Kummer_1F1	struct
.	O
val	double
,	O
Kummer_1F1	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K	int
)	O
;	O
}	O
else	O
{	O
return	O
hyperg_1F1_ab_posint	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
int	O
gsl_sf_hyperg_1F1_e	function
(	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
bma	double
=	O
b	double
-	O
a	double
;	O
const	O
double	O
rinta	double
=	O
floor	function
(	O
a	double
+	O
0.5	int
)	O
;	O
const	O
double	O
rintb	double
=	O
floor	function
(	O
b	double
+	O
0.5	int
)	O
;	O
const	O
double	O
rintbma	double
=	O
floor	function
(	O
bma	double
+	O
0.5	int
)	O
;	O
const	O
int	O
a_integer	int
=	O
(	O
fabs	function
(	O
a	double
-	O
rinta	double
)	O
<	O
_1F1_INT_THRESHOLD	O
&&	O
rinta	double
>	O
INT_MIN	O
&&	O
rinta	double
<	O
INT_MAX	O
)	O
;	O
const	O
int	O
b_integer	int
=	O
(	O
fabs	function
(	O
b	double
-	O
rintb	double
)	O
<	O
_1F1_INT_THRESHOLD	O
&&	O
rintb	double
>	O
INT_MIN	O
&&	O
rintb	double
<	O
INT_MAX	O
)	O
;	O
const	O
int	O
bma_integer	int
=	O
(	O
fabs	function
(	O
bma	double
-	O
rintbma	double
)	O
<	O
_1F1_INT_THRESHOLD	O
&&	O
rintbma	double
>	O
INT_MIN	O
&&	O
rintbma	double
<	O
INT_MAX	O
)	O
;	O
const	O
int	O
b_neg_integer	int
=	O
(	O
b	double
<	O
-	O
0.1	int
&&	O
b_integer	int
)	O
;	O
const	O
int	O
a_neg_integer	int
=	O
(	O
a	double
<	O
-	O
0.1	int
&&	O
a_integer	int
)	O
;	O
const	O
int	O
bma_neg_integer	int
=	O
(	O
bma	double
<	O
-	O
0.1	int
&&	O
bma_integer	int
)	O
;	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
b	double
==	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
a	double
==	O
0.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
a	double
==	O
b	double
)	O
{	O
return	O
gsl_sf_exp_e	function
(	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
b	double
)	O
<	O
_1F1_INT_THRESHOLD	O
&&	O
fabs	function
(	O
a	double
)	O
<	O
_1F1_INT_THRESHOLD	O
)	O
{	O
gsl_sf_result	struct
exm1	struct
;	O
int	O
stat_e	int
=	O
gsl_sf_expm1_e	function
(	O
x	double
,	O
&	O
exm1	struct
)	O
;	O
double	O
sa	double
=	O
(	O
a	double
>	O
0.0	int
?	O
1.0	int
:	O
-	O
1.0	int
)	O
;	O
double	O
sb	double
=	O
(	O
b	double
>	O
0.0	int
?	O
1.0	int
:	O
-	O
1.0	int
)	O
;	O
double	O
lnab	double
=	O
log	function
(	O
fabs	function
(	O
a	double
/	O
b	double
)	O
)	O
;	O
gsl_sf_result	struct
hx	struct
;	O
int	O
stat_hx	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
lnab	double
,	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
lnab	double
)	O
,	O
sa	double
*	O
sb	double
*	O
exm1	struct
.	O
val	double
,	O
exm1	struct
.	O
err	double
,	O
&	O
hx	struct
)	O
;	O
result	pointer
->	O
val	double
=	O
(	O
hx	struct
.	O
val	double
==	O
GSL_DBL_MAX	int
?	O
hx	struct
.	O
val	double
:	O
1.0	int
+	O
hx	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
hx	struct
.	O
err	double
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_hx	int
,	O
stat_e	int
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
b	double
)	O
<	O
_1F1_INT_THRESHOLD	O
&&	O
fabs	function
(	O
x	double
*	O
a	double
)	O
<	O
1	int
)	O
{	O
const	O
double	O
m_arg	double
=	O
1.0	int
/	O
(	O
0.5	int
*	O
b	double
)	O
;	O
gsl_sf_result	struct
F_renorm	struct
;	O
int	O
stat_F	int
=	O
hyperg_1F1_renorm_b0	function
(	O
a	double
,	O
x	double
,	O
&	O
F_renorm	struct
)	O
;	O
int	O
stat_m	int
=	O
gsl_sf_multiply_err_e	function
(	O
m_arg	double
,	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
m_arg	double
,	O
0.5	int
*	O
F_renorm	struct
.	O
val	double
,	O
0.5	int
*	O
F_renorm	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_m	int
,	O
stat_F	int
)	O
;	O
}	O
else	O
if	O
(	O
a_integer	int
&&	O
b_integer	int
)	O
{	O
return	O
gsl_sf_hyperg_1F1_int_e	function
(	O
(	O
int	O
)	O
rinta	double
,	O
(	O
int	O
)	O
rintb	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b_neg_integer	int
&&	O
!	O
(	O
a_neg_integer	int
&&	O
a	double
>	O
b	double
)	O
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
a_neg_integer	int
)	O
{	O
return	O
hyperg_1F1_a_negint_lag	function
(	O
(	O
int	O
)	O
rinta	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
b	double
>	O
0.0	int
)	O
{	O
if	O
(	O
-	O
1.0	int
<=	O
a	double
&&	O
a	double
<=	O
1.0	int
)	O
{	O
return	O
hyperg_1F1_small_a_bgt0	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
bma_neg_integer	int
)	O
{	O
gsl_sf_result	struct
Kummer_1F1	struct
;	O
int	O
stat_K	int
=	O
hyperg_1F1_a_negint_lag	function
(	O
(	O
int	O
)	O
rintbma	double
,	O
b	double
,	O
-	O
x	double
,	O
&	O
Kummer_1F1	struct
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
x	double
,	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
,	O
Kummer_1F1	struct
.	O
val	double
,	O
Kummer_1F1	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K	int
)	O
;	O
}	O
else	O
if	O
(	O
a	double
<	O
0.0	int
&&	O
fabs	function
(	O
x	double
)	O
<	O
2	int
*	O
GSL_LOG_DBL_MAX	int
)	O
{	O
gsl_sf_result	struct
Kummer_1F1	struct
;	O
int	O
stat_K	int
=	O
hyperg_1F1_ab_pos	function
(	O
b	double
-	O
a	double
,	O
b	double
,	O
-	O
x	double
,	O
&	O
Kummer_1F1	struct
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
x	double
,	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
,	O
Kummer_1F1	struct
.	O
val	double
,	O
Kummer_1F1	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K	int
)	O
;	O
}	O
else	O
if	O
(	O
a	double
>	O
0	int
)	O
{	O
return	O
hyperg_1F1_ab_pos	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
else	O
{	O
return	O
gsl_sf_hyperg_1F1_series_e	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
bma_neg_integer	int
&&	O
x	double
<	O
0.0	int
)	O
{	O
gsl_sf_result	struct
K	struct
;	O
int	O
stat_K	int
;	O
int	O
stat_e	int
;	O
if	O
(	O
a	double
<	O
0.0	int
)	O
{	O
stat_K	int
=	O
hyperg_1F1_a_negint_poly	function
(	O
(	O
int	O
)	O
rintbma	double
,	O
b	double
,	O
-	O
x	double
,	O
&	O
K	struct
)	O
;	O
}	O
else	O
{	O
stat_K	int
=	O
hyperg_1F1_a_negint_lag	function
(	O
(	O
int	O
)	O
rintbma	double
,	O
b	double
,	O
-	O
x	double
,	O
&	O
K	struct
)	O
;	O
}	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
x	double
,	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
,	O
K	struct
.	O
val	double
,	O
K	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K	int
)	O
;	O
}	O
else	O
if	O
(	O
a	double
>	O
0.0	int
)	O
{	O
gsl_sf_result	struct
K	struct
;	O
int	O
stat_K	int
=	O
hyperg_1F1_ab_neg	function
(	O
b	double
-	O
a	double
,	O
b	double
,	O
-	O
x	double
,	O
&	O
K	struct
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	function
(	O
x	double
,	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
x	double
)	O
,	O
K	struct
.	O
val	double
,	O
K	struct
.	O
err	double
,	O
result	pointer
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K	int
)	O
;	O
}	O
else	O
{	O
return	O
hyperg_1F1_ab_neg	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
result	pointer
)	O
;	O
}	O
}	O
}	O
double	O
gsl_sf_hyperg_1F1_int	function
(	O
const	O
int	O
m	int
,	O
const	O
int	O
n	int
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_hyperg_1F1_int_e	function
(	O
m	int
,	O
n	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_hyperg_1F1	function
(	O
double	O
a	double
,	O
double	O
b	double
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_hyperg_1F1_e	function
(	O
a	double
,	O
b	double
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
