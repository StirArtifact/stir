static	O
unsigned	O
char	O
*	O
def_slcbuf	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
0	int
;	O
static	O
int	O
def_slclen	int
=	O
0	int
;	O
static	O
int	O
slcchange	int
;	O
static	O
unsigned	O
char	O
*	O
slcptr	pointer
;	O
static	O
unsigned	O
char	O
slcbuf	array
[	O
NSLC	int
*	O
6	int
]	O
;	O
void	O
send_slc	function
(	O
void	O
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
NSLC	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
slctab	array
[	O
i	int
]	O
.	O
defset	struct
.	O
flag	char
&	O
SLC_LEVELBITS	int
)	O
==	O
SLC_NOSUPPORT	int
)	O
continue	O
;	O
add_slc	function
(	O
(	O
unsigned	O
char	O
)	O
i	int
,	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
flag	char
,	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
val	array
)	O
;	O
}	O
}	O
void	O
default_slc	function
(	O
void	O
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
NSLC	int
;	O
i	int
++	O
)	O
{	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
val	array
=	O
slctab	array
[	O
i	int
]	O
.	O
defset	struct
.	O
val	array
;	O
if	O
(	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
val	array
==	O
(	O
cc_t	char
)	O
(	O
_POSIX_VDISABLE	char
)	O
)	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
flag	char
=	O
SLC_NOSUPPORT	int
;	O
else	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
flag	char
=	O
slctab	array
[	O
i	int
]	O
.	O
defset	struct
.	O
flag	char
;	O
if	O
(	O
slctab	array
[	O
i	int
]	O
.	O
sptr	pointer
)	O
{	O
*	O
(	O
slctab	array
[	O
i	int
]	O
.	O
sptr	pointer
)	O
=	O
slctab	array
[	O
i	int
]	O
.	O
defset	struct
.	O
val	array
;	O
}	O
}	O
slcchange	int
=	O
1	int
;	O
}	O
void	O
get_slc_defaults	function
(	O
void	O
)	O
{	O
register	O
int	O
i	int
;	O
init_termbuf	function
(	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
NSLC	int
;	O
i	int
++	O
)	O
{	O
slctab	array
[	O
i	int
]	O
.	O
defset	struct
.	O
flag	char
=	O
spcset	function
(	O
i	int
,	O
&	O
slctab	array
[	O
i	int
]	O
.	O
defset	struct
.	O
val	array
,	O
&	O
slctab	array
[	O
i	int
]	O
.	O
sptr	pointer
)	O
;	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
flag	char
=	O
SLC_NOSUPPORT	int
;	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
val	array
=	O
0	int
;	O
}	O
}	O
void	O
add_slc	function
(	O
register	O
char	O
func	int
,	O
register	O
char	O
flag	char
,	O
register	O
cc_t	char
val	array
)	O
{	O
if	O
(	O
(	O
*	O
slcptr	pointer
++	O
=	O
(	O
unsigned	O
char	O
)	O
func	int
)	O
==	O
0xff	int
)	O
*	O
slcptr	pointer
++	O
=	O
0xff	int
;	O
if	O
(	O
(	O
*	O
slcptr	pointer
++	O
=	O
(	O
unsigned	O
char	O
)	O
flag	char
)	O
==	O
0xff	int
)	O
*	O
slcptr	pointer
++	O
=	O
0xff	int
;	O
if	O
(	O
(	O
*	O
slcptr	pointer
++	O
=	O
(	O
unsigned	O
char	O
)	O
val	array
)	O
==	O
0xff	int
)	O
*	O
slcptr	pointer
++	O
=	O
0xff	int
;	O
}	O
void	O
start_slc	function
(	O
register	O
int	O
getit	int
)	O
{	O
slcchange	int
=	O
0	int
;	O
if	O
(	O
getit	int
)	O
init_termbuf	function
(	O
)	O
;	O
sprintf	function
(	O
(	O
char	O
*	O
)	O
slcbuf	array
,	O
"%c%c%c%c"	pointer
,	O
IAC	int
,	O
SB	int
,	O
TELOPT_LINEMODE	int
,	O
LM_SLC	int
)	O
;	O
slcptr	pointer
=	O
slcbuf	array
+	O
4	int
;	O
}	O
int	O
end_slc	function
(	O
register	O
unsigned	O
char	O
*	O
*	O
bufp	pointer
)	O
{	O
register	O
int	O
len	long
;	O
void	O
netflush	function
(	O
void	O
)	O
;	O
if	O
(	O
slcchange	int
)	O
{	O
set_termbuf	function
(	O
)	O
;	O
}	O
if	O
(	O
def_slcbuf	pointer
&&	O
(	O
terminit	function
(	O
)	O
==	O
0	int
)	O
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
slcptr	pointer
>	O
(	O
slcbuf	array
+	O
4	int
)	O
)	O
{	O
if	O
(	O
bufp	pointer
)	O
{	O
*	O
bufp	pointer
=	O
&	O
slcbuf	array
[	O
4	int
]	O
;	O
return	O
(	O
slcptr	pointer
-	O
slcbuf	array
-	O
4	int
)	O
;	O
}	O
else	O
{	O
sprintf	function
(	O
(	O
char	O
*	O
)	O
slcptr	pointer
,	O
"%c%c"	pointer
,	O
IAC	int
,	O
SE	int
)	O
;	O
slcptr	pointer
+=	O
2	int
;	O
len	long
=	O
slcptr	pointer
-	O
slcbuf	array
;	O
net_output_datalen	function
(	O
slcbuf	array
,	O
len	long
)	O
;	O
netflush	function
(	O
)	O
;	O
DEBUG	O
(	O
debug_options	int
,	O
1	int
,	O
printsub	pointer
(	O
'>'	O
,	O
slcbuf	array
+	O
2	int
,	O
len	long
-	O
2	int
)	O
)	O
;	O
}	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
void	O
process_slc	function
(	O
register	O
unsigned	O
char	O
func	int
,	O
register	O
unsigned	O
char	O
flag	char
,	O
register	O
cc_t	char
val	array
)	O
{	O
register	O
int	O
hislevel	int
,	O
mylevel	int
,	O
ack	int
;	O
if	O
(	O
func	int
>	O
NSLC	int
)	O
{	O
add_slc	function
(	O
func	int
,	O
SLC_NOSUPPORT	int
,	O
0	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
func	int
==	O
0	int
)	O
{	O
if	O
(	O
(	O
flag	char
=	O
flag	char
&	O
SLC_LEVELBITS	int
)	O
==	O
SLC_DEFAULT	int
)	O
{	O
default_slc	function
(	O
)	O
;	O
send_slc	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
flag	char
==	O
SLC_VARIABLE	int
)	O
{	O
send_slc	function
(	O
)	O
;	O
}	O
return	O
;	O
}	O
hislevel	int
=	O
flag	char
&	O
SLC_LEVELBITS	int
;	O
mylevel	int
=	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
flag	char
&	O
SLC_LEVELBITS	int
;	O
ack	int
=	O
flag	char
&	O
SLC_ACK	int
;	O
if	O
(	O
hislevel	int
==	O
mylevel	int
&&	O
(	O
val	array
==	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
val	array
||	O
ack	int
)	O
)	O
{	O
return	O
;	O
}	O
else	O
if	O
(	O
ack	int
)	O
{	O
return	O
;	O
}	O
else	O
{	O
change_slc	function
(	O
func	int
,	O
flag	char
,	O
val	array
)	O
;	O
}	O
}	O
void	O
change_slc	function
(	O
register	O
char	O
func_c	char
,	O
register	O
char	O
flag	char
,	O
register	O
cc_t	char
val	array
)	O
{	O
register	O
int	O
func	int
=	O
func_c	char
;	O
register	O
int	O
hislevel	int
,	O
mylevel	int
;	O
hislevel	int
=	O
flag	char
&	O
SLC_LEVELBITS	int
;	O
mylevel	int
=	O
slctab	array
[	O
func	int
]	O
.	O
defset	struct
.	O
flag	char
&	O
SLC_LEVELBITS	int
;	O
if	O
(	O
hislevel	int
==	O
SLC_NOSUPPORT	int
)	O
{	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
flag	char
=	O
flag	char
;	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
val	array
=	O
(	O
cc_t	char
)	O
_POSIX_VDISABLE	char
;	O
flag	char
|=	O
SLC_ACK	int
;	O
add_slc	function
(	O
func	int
,	O
flag	char
,	O
val	array
)	O
;	O
return	O
;	O
}	O
if	O
(	O
hislevel	int
==	O
SLC_DEFAULT	int
)	O
{	O
if	O
(	O
mylevel	int
==	O
SLC_DEFAULT	int
)	O
{	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
flag	char
=	O
SLC_NOSUPPORT	int
;	O
}	O
else	O
{	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
flag	char
=	O
slctab	array
[	O
func	int
]	O
.	O
defset	struct
.	O
flag	char
;	O
}	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
val	array
=	O
slctab	array
[	O
func	int
]	O
.	O
defset	struct
.	O
val	array
;	O
add_slc	function
(	O
func	int
,	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
flag	char
,	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
val	array
)	O
;	O
return	O
;	O
}	O
if	O
(	O
slctab	array
[	O
func	int
]	O
.	O
sptr	pointer
)	O
{	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
val	array
=	O
val	array
;	O
*	O
(	O
slctab	array
[	O
func	int
]	O
.	O
sptr	pointer
)	O
=	O
val	array
;	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
flag	char
=	O
flag	char
;	O
flag	char
|=	O
SLC_ACK	int
;	O
slcchange	int
=	O
1	int
;	O
add_slc	function
(	O
func	int
,	O
flag	char
,	O
val	array
)	O
;	O
}	O
else	O
{	O
if	O
(	O
mylevel	int
==	O
SLC_DEFAULT	int
)	O
{	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
flag	char
=	O
flag	char
;	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
val	array
=	O
val	array
;	O
flag	char
|=	O
SLC_ACK	int
;	O
}	O
else	O
if	O
(	O
hislevel	int
==	O
SLC_CANTCHANGE	int
&&	O
mylevel	int
==	O
SLC_CANTCHANGE	int
)	O
{	O
flag	char
&=	O
~	O
SLC_LEVELBITS	int
;	O
flag	char
|=	O
SLC_NOSUPPORT	int
;	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
flag	char
=	O
flag	char
;	O
}	O
else	O
{	O
flag	char
&=	O
~	O
SLC_LEVELBITS	int
;	O
flag	char
|=	O
mylevel	int
;	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
flag	char
=	O
flag	char
;	O
if	O
(	O
mylevel	int
==	O
SLC_CANTCHANGE	int
)	O
{	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
val	array
=	O
slctab	array
[	O
func	int
]	O
.	O
defset	struct
.	O
val	array
;	O
val	array
=	O
slctab	array
[	O
func	int
]	O
.	O
current	struct
.	O
val	array
;	O
}	O
}	O
add_slc	function
(	O
func	int
,	O
flag	char
,	O
val	array
)	O
;	O
}	O
}	O
void	O
check_slc	function
(	O
void	O
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
NSLC	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
==	O
SLC_EOF	int
&&	O
term_change_eof	function
(	O
)	O
)	O
continue	O
;	O
if	O
(	O
slctab	array
[	O
i	int
]	O
.	O
sptr	pointer
&&	O
(	O
*	O
(	O
slctab	array
[	O
i	int
]	O
.	O
sptr	pointer
)	O
!=	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
val	array
)	O
)	O
{	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
val	array
=	O
*	O
(	O
slctab	array
[	O
i	int
]	O
.	O
sptr	pointer
)	O
;	O
if	O
(	O
*	O
(	O
slctab	array
[	O
i	int
]	O
.	O
sptr	pointer
)	O
==	O
(	O
cc_t	char
)	O
_POSIX_VDISABLE	char
)	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
flag	char
=	O
SLC_NOSUPPORT	int
;	O
else	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
flag	char
=	O
slctab	array
[	O
i	int
]	O
.	O
defset	struct
.	O
flag	char
;	O
add_slc	function
(	O
(	O
unsigned	O
char	O
)	O
i	int
,	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
flag	char
,	O
slctab	array
[	O
i	int
]	O
.	O
current	struct
.	O
val	array
)	O
;	O
}	O
}	O
}	O
void	O
do_opt_slc	function
(	O
register	O
unsigned	O
char	O
*	O
ptr	pointer
,	O
register	O
int	O
len	long
)	O
{	O
register	O
unsigned	O
char	O
func	int
,	O
flag	char
;	O
cc_t	char
val	array
;	O
register	O
unsigned	O
char	O
*	O
end	pointer
=	O
ptr	pointer
+	O
len	long
;	O
if	O
(	O
terminit	function
(	O
)	O
)	O
{	O
while	O
(	O
ptr	pointer
<	O
end	pointer
)	O
{	O
func	int
=	O
*	O
ptr	pointer
++	O
;	O
if	O
(	O
ptr	pointer
>=	O
end	pointer
)	O
break	O
;	O
flag	char
=	O
*	O
ptr	pointer
++	O
;	O
if	O
(	O
ptr	pointer
>=	O
end	pointer
)	O
break	O
;	O
val	array
=	O
(	O
cc_t	char
)	O
*	O
ptr	pointer
++	O
;	O
process_slc	function
(	O
func	int
,	O
flag	char
,	O
val	array
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
def_slcbuf	pointer
==	O
(	O
unsigned	O
char	O
*	O
)	O
0	int
)	O
{	O
def_slclen	int
=	O
len	long
;	O
def_slcbuf	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
malloc	function
(	O
(	O
unsigned	O
)	O
len	long
)	O
;	O
if	O
(	O
def_slcbuf	pointer
==	O
(	O
unsigned	O
char	O
*	O
)	O
0	int
)	O
return	O
;	O
memmove	function
(	O
def_slcbuf	pointer
,	O
ptr	pointer
,	O
len	long
)	O
;	O
}	O
}	O
}	O
void	O
deferslc	function
(	O
void	O
)	O
{	O
if	O
(	O
def_slcbuf	pointer
)	O
{	O
start_slc	function
(	O
1	int
)	O
;	O
do_opt_slc	function
(	O
def_slcbuf	pointer
,	O
def_slclen	int
)	O
;	O
end_slc	function
(	O
0	int
)	O
;	O
free	function
(	O
def_slcbuf	pointer
)	O
;	O
def_slcbuf	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
0	int
;	O
def_slclen	int
=	O
0	int
;	O
}	O
}	O
