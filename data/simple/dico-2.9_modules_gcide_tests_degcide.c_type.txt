static	O
void	O
usage	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"usage: %s [-debug] [-struct] [-nopr] [-help] FILE [OFF SIZE]\n"	pointer
,	O
dico_program_name	pointer
)	O
;	O
}	O
struct	O
output_closure	struct
{	O
FILE	struct
*	O
stream	pointer
;	O
int	O
flags	int
;	O
int	O
level	int
;	O
}	O
;	O
static	O
int	O
print_tag	function
(	O
int	O
end	int
,	O
struct	O
gcide_tag	struct
*	O
tag	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
size_t	long
i	long
;	O
struct	O
output_closure	struct
*	O
clos	pointer
=	O
data	pointer
;	O
if	O
(	O
end	int
)	O
{	O
clos	pointer
->	O
level	int
--	O
;	O
printf	function
(	O
"%*.*s"	pointer
,	O
2	int
*	O
clos	pointer
->	O
level	int
,	O
2	int
*	O
clos	pointer
->	O
level	int
,	O
""	pointer
)	O
;	O
printf	function
(	O
"END"	pointer
)	O
;	O
if	O
(	O
tag	pointer
->	O
tag_parmc	long
)	O
printf	function
(	O
" %s"	pointer
,	O
tag	pointer
->	O
tag_name	O
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
return	O
0	int
;	O
}	O
printf	function
(	O
"%*.*s"	pointer
,	O
2	int
*	O
clos	pointer
->	O
level	int
,	O
2	int
*	O
clos	pointer
->	O
level	int
,	O
""	pointer
)	O
;	O
switch	O
(	O
tag	pointer
->	O
tag_type	enum
)	O
{	O
case	O
gcide_content_unspecified	int
:	O
break	O
;	O
case	O
gcide_content_text	int
:	O
printf	function
(	O
"TEXT"	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
tag	pointer
->	O
tag_parmc	long
;	O
i	long
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
tag	pointer
->	O
tag_parmv	pointer
[	O
i	long
]	O
)	O
;	O
printf	function
(	O
":\n%s\n%*.*sENDTEXT"	pointer
,	O
tag	pointer
->	O
tag_v	union
.	O
text	pointer
,	O
2	int
*	O
clos	pointer
->	O
level	int
,	O
2	int
*	O
clos	pointer
->	O
level	int
,	O
""	pointer
)	O
;	O
if	O
(	O
tag	pointer
->	O
tag_parmc	long
)	O
printf	function
(	O
" %s"	pointer
,	O
tag	pointer
->	O
tag_name	O
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
break	O
;	O
case	O
gcide_content_taglist	int
:	O
printf	function
(	O
"BEGIN"	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
tag	pointer
->	O
tag_parmc	long
;	O
i	long
++	O
)	O
printf	function
(	O
" %s"	pointer
,	O
tag	pointer
->	O
tag_parmv	pointer
[	O
i	long
]	O
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
clos	pointer
->	O
level	int
++	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
print_text	function
(	O
int	O
end	int
,	O
struct	O
gcide_tag	struct
*	O
tag	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
output_closure	struct
*	O
clos	pointer
=	O
data	pointer
;	O
static	O
char	O
*	O
quote	pointer
[	O
2	int
]	O
=	O
{	O
"``"	pointer
,	O
"''"	pointer
}	O
;	O
static	O
char	O
*	O
ref	array
[	O
2	int
]	O
=	O
{	O
"{"	pointer
,	O
"}"	pointer
}	O
;	O
switch	O
(	O
tag	pointer
->	O
tag_type	enum
)	O
{	O
case	O
gcide_content_unspecified	int
:	O
break	O
;	O
case	O
gcide_content_text	int
:	O
if	O
(	O
clos	pointer
->	O
flags	int
&	O
GOF_IGNORE	int
)	O
break	O
;	O
if	O
(	O
clos	pointer
->	O
flags	int
&	O
GOF_AS	int
)	O
{	O
char	O
*	O
s	pointer
=	O
tag	pointer
->	O
tag_v	union
.	O
text	pointer
;	O
if	O
(	O
strncmp	function
(	O
s	pointer
,	O
"as"	pointer
,	O
2	int
)	O
==	O
0	int
&&	O
(	O
isspace	function
(	O
s	pointer
[	O
3	int
]	O
)	O
||	O
ispunct	function
(	O
s	pointer
[	O
3	int
]	O
)	O
)	O
)	O
{	O
fwrite	function
(	O
s	pointer
,	O
3	int
,	O
1	int
,	O
clos	pointer
->	O
stream	pointer
)	O
;	O
for	O
(	O
s	pointer
+=	O
3	int
;	O
*	O
s	pointer
&&	O
isspace	function
(	O
*	O
s	pointer
)	O
;	O
s	pointer
++	O
)	O
fputc	function
(	O
*	O
s	pointer
,	O
clos	pointer
->	O
stream	pointer
)	O
;	O
fprintf	function
(	O
clos	pointer
->	O
stream	pointer
,	O
"%s%s"	pointer
,	O
quote	pointer
[	O
0	int
]	O
,	O
s	pointer
)	O
;	O
}	O
else	O
fprintf	function
(	O
clos	pointer
->	O
stream	pointer
,	O
"%s"	pointer
,	O
quote	pointer
[	O
0	int
]	O
)	O
;	O
}	O
else	O
fprintf	function
(	O
clos	pointer
->	O
stream	pointer
,	O
"%s"	pointer
,	O
tag	pointer
->	O
tag_v	union
.	O
text	pointer
)	O
;	O
break	O
;	O
case	O
gcide_content_taglist	int
:	O
if	O
(	O
tag	pointer
->	O
tag_parmc	long
)	O
{	O
clos	pointer
->	O
flags	int
&=	O
~	O
GOF_AS	int
;	O
if	O
(	O
end	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
tag	pointer
->	O
tag_name	O
,	O
"pr"	pointer
)	O
==	O
0	int
&&	O
clos	pointer
->	O
flags	int
&	O
GCIDE_NOPR	int
)	O
clos	pointer
->	O
flags	int
&=	O
~	O
GOF_IGNORE	int
;	O
else	O
if	O
(	O
clos	pointer
->	O
flags	int
&	O
GOF_IGNORE	int
)	O
break	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
tag	pointer
->	O
tag_name	O
,	O
"as"	pointer
)	O
==	O
0	int
)	O
fprintf	function
(	O
clos	pointer
->	O
stream	pointer
,	O
"%s"	pointer
,	O
quote	pointer
[	O
1	int
]	O
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
tag	pointer
->	O
tag_name	O
,	O
"er"	pointer
)	O
==	O
0	int
)	O
fprintf	function
(	O
clos	pointer
->	O
stream	pointer
,	O
"%s"	pointer
,	O
ref	array
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
strcmp	function
(	O
tag	pointer
->	O
tag_name	O
,	O
"pr"	pointer
)	O
==	O
0	int
&&	O
clos	pointer
->	O
flags	int
&	O
GCIDE_NOPR	int
)	O
clos	pointer
->	O
flags	int
|=	O
GOF_IGNORE	int
;	O
else	O
if	O
(	O
clos	pointer
->	O
flags	int
&	O
GOF_IGNORE	int
)	O
break	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
tag	pointer
->	O
tag_name	O
,	O
"sn"	pointer
)	O
==	O
0	int
)	O
fputc	function
(	O
'\n'	O
,	O
clos	pointer
->	O
stream	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
tag	pointer
->	O
tag_name	O
,	O
"as"	pointer
)	O
==	O
0	int
)	O
clos	pointer
->	O
flags	int
|=	O
GOF_AS	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
tag	pointer
->	O
tag_name	O
,	O
"er"	pointer
)	O
==	O
0	int
)	O
fprintf	function
(	O
clos	pointer
->	O
stream	pointer
,	O
"%s"	pointer
,	O
ref	array
[	O
0	int
]	O
)	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
file	pointer
;	O
unsigned	O
long	O
offset	long
=	O
0	int
;	O
unsigned	O
long	O
size	long
=	O
0	int
;	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
textbuf	pointer
;	O
struct	O
gcide_parse_tree	struct
*	O
tree	pointer
;	O
struct	O
output_closure	struct
clos	pointer
;	O
int	O
show_struct	int
=	O
0	int
;	O
int	O
dbglex	int
=	O
0	int
;	O
dico_set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
clos	pointer
.	O
flags	int
=	O
0	int
;	O
clos	pointer
.	O
stream	pointer
=	O
stdout	pointer
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
arg	pointer
=	O
*	O
++	O
argv	pointer
;	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-debug"	pointer
)	O
==	O
0	int
)	O
dbglex	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-h"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
arg	pointer
,	O
"-help"	pointer
)	O
==	O
0	int
)	O
{	O
usage	function
(	O
stdout	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-struct"	pointer
)	O
==	O
0	int
)	O
show_struct	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"-nopr"	pointer
)	O
==	O
0	int
)	O
clos	pointer
.	O
flags	int
=	O
GCIDE_NOPR	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"--"	pointer
)	O
==	O
0	int
)	O
{	O
--	O
argc	int
;	O
++	O
argv	pointer
;	O
break	O
;	O
}	O
else	O
if	O
(	O
arg	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
usage	function
(	O
stderr	pointer
)	O
;	O
exit	function
(	O
EX_USAGE	int
)	O
;	O
}	O
else	O
break	O
;	O
}	O
if	O
(	O
argc	int
==	O
0	int
||	O
argc	int
>	O
3	int
)	O
{	O
usage	function
(	O
stderr	pointer
)	O
;	O
exit	function
(	O
EX_USAGE	int
)	O
;	O
}	O
file	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
offset	long
=	O
atoi	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
argc	int
==	O
3	int
)	O
size	long
=	O
atoi	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
}	O
if	O
(	O
size	long
==	O
0	int
)	O
{	O
struct	O
stat	struct
st	struct
;	O
if	O
(	O
stat	struct
(	O
file	pointer
,	O
&	O
st	struct
)	O
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"stat"	pointer
)	O
;	O
exit	function
(	O
EX_UNAVAILABLE	int
)	O
;	O
}	O
if	O
(	O
st	struct
.	O
st_size	long
<	O
offset	long
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"invalid offset"	pointer
)	O
;	O
exit	function
(	O
EX_UNAVAILABLE	int
)	O
;	O
}	O
size	long
=	O
st	struct
.	O
st_size	long
-	O
offset	long
;	O
}	O
textbuf	pointer
=	O
malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
!	O
textbuf	pointer
)	O
{	O
DICO_LOG_ERRNO	O
(	O
)	O
;	O
exit	function
(	O
EX_UNAVAILABLE	int
)	O
;	O
}	O
fp	pointer
=	O
fopen	function
(	O
file	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"cannot open file %s"	pointer
,	O
file	pointer
)	O
;	O
exit	function
(	O
EX_UNAVAILABLE	int
)	O
;	O
}	O
if	O
(	O
fseek	function
(	O
fp	pointer
,	O
offset	long
,	O
SEEK_SET	int
)	O
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"%s"	pointer
,	O
file	pointer
)	O
;	O
exit	function
(	O
EX_UNAVAILABLE	int
)	O
;	O
}	O
if	O
(	O
fread	function
(	O
textbuf	pointer
,	O
size	long
,	O
1	int
,	O
fp	pointer
)	O
!=	O
1	int
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
errno	O
,	O
"%s: read error"	pointer
,	O
file	pointer
)	O
;	O
exit	function
(	O
EX_UNAVAILABLE	int
)	O
;	O
}	O
tree	pointer
=	O
gcide_markup_parse	function
(	O
textbuf	pointer
,	O
size	long
,	O
dbglex	int
)	O
;	O
if	O
(	O
!	O
tree	pointer
)	O
exit	function
(	O
EX_UNAVAILABLE	int
)	O
;	O
clos	pointer
.	O
level	int
=	O
0	int
;	O
gcide_parse_tree_inorder	function
(	O
tree	pointer
,	O
show_struct	int
?	O
print_tag	function
:	O
print_text	function
,	O
&	O
clos	pointer
)	O
;	O
gcide_parse_tree_free	function
(	O
tree	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
