static	O
unsigned	O
char	O
*	O
esc_esc_string	function
(	O
const	O
unsigned	O
char	O
*	O
s	pointer
)	O
;	O
static	O
bool	enum
simple_string	function
(	O
const	O
unsigned	O
short	O
*	O
codestring	pointer
)	O
;	O
static	O
bool	enum
clean_iso_string	function
(	O
unsigned	O
char	O
*	O
s	pointer
)	O
;	O
int	O
_API_alabel	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
int	O
x_justify	int
,	O
int	O
y_justify	int
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
char	O
*	O
t	pointer
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"alabel: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_endpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
t	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
t	pointer
,	O
s	pointer
)	O
;	O
{	O
bool	enum
was_clean	enum
;	O
was_clean	enum
=	O
clean_iso_string	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
t	pointer
)	O
;	O
if	O
(	O
!	O
was_clean	enum
)	O
_plotter	pointer
->	O
warning	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"ignoring control character (e.g. CR or LF) in label"	pointer
)	O
;	O
}	O
_pl_g_set_font	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
have_escaped_string_support	int
)	O
_plotter	pointer
->	O
paint_text_string_with_escapes	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
unsigned	O
char	O
*	O
)	O
t	pointer
,	O
x_justify	int
,	O
y_justify	int
)	O
;	O
else	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
)	O
_pl_g_alabel_hershey	function
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
unsigned	O
char	O
*	O
)	O
t	pointer
,	O
x_justify	int
,	O
y_justify	int
)	O
;	O
else	O
_pl_g_render_non_hershey_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
t	pointer
,	O
true	int
,	O
x_justify	int
,	O
y_justify	int
)	O
;	O
}	O
free	function
(	O
t	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_API_label	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
s	pointer
)	O
{	O
return	O
_API_alabel	O
(	O
R___	O
(	O
_plotter	pointer
)	O
'l'	O
,	O
'x'	O
,	O
s	pointer
)	O
;	O
}	O
double	O
_API_flabelwidth	O
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
s	pointer
)	O
{	O
double	O
width	array
=	O
0.0	int
;	O
char	O
*	O
t	pointer
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"flabelwidth: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
s	pointer
==	O
NULL	O
)	O
return	O
0.0	int
;	O
t	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
t	pointer
,	O
s	pointer
)	O
;	O
{	O
bool	enum
was_clean	enum
;	O
was_clean	enum
=	O
clean_iso_string	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
t	pointer
)	O
;	O
if	O
(	O
!	O
was_clean	enum
)	O
_plotter	pointer
->	O
warning	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"ignoring control character (e.g. CR or LF) in label"	pointer
)	O
;	O
}	O
_pl_g_set_font	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
)	O
width	array
=	O
_pl_g_flabelwidth_hershey	function
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
unsigned	O
char	O
*	O
)	O
t	pointer
)	O
;	O
else	O
width	array
=	O
_pl_g_render_non_hershey_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
t	pointer
,	O
false	int
,	O
'c'	O
,	O
'c'	O
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
return	O
width	array
;	O
}	O
double	O
_pl_g_render_non_hershey_string	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
char	O
*	O
s	pointer
,	O
bool	enum
do_render	enum
,	O
int	O
x_justify	int
,	O
int	O
y_justify	int
)	O
{	O
int	O
h_just	int
=	O
PL_JUST_LEFT	int
;	O
int	O
v_just	int
=	O
PL_JUST_BASE	int
;	O
unsigned	O
short	O
*	O
codestring	pointer
;	O
unsigned	O
short	O
*	O
cptr	pointer
;	O
double	O
width	array
=	O
0.0	int
,	O
added_width	double
;	O
double	O
pushed_width	double
=	O
0.0	int
;	O
int	O
current_font_index	int
;	O
double	O
initial_font_size	double
;	O
const	O
char	O
*	O
initial_font_name	pointer
;	O
int	O
initial_font_type	int
;	O
double	O
initial_position_x	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
;	O
double	O
initial_position_y	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
;	O
double	O
pushed_position_x	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
;	O
double	O
pushed_position_y	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
;	O
char	O
x_justify_c	char
,	O
y_justify_c	char
;	O
double	O
x_offset	double
,	O
y_offset	double
;	O
double	O
x_displacement	double
=	O
1.0	int
,	O
x_displacement_internal	double
=	O
1.0	int
;	O
double	O
overall_width	double
=	O
0.0	int
;	O
double	O
cap_height	double
,	O
ascent	double
,	O
descent	double
;	O
double	O
userdx	double
,	O
userdy	double
,	O
theta	double
,	O
sintheta	double
=	O
0.0	int
,	O
costheta	double
=	O
1.0	int
;	O
codestring	pointer
=	O
_pl_g_controlify	function
(	O
R___	O
(	O
_plotter	pointer
)	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
s	pointer
)	O
;	O
if	O
(	O
do_render	enum
)	O
{	O
overall_width	double
=	O
_pl_g_render_non_hershey_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
,	O
false	int
,	O
'c'	O
,	O
'c'	O
)	O
;	O
x_justify_c	char
=	O
(	O
char	O
)	O
x_justify	int
;	O
y_justify_c	char
=	O
(	O
char	O
)	O
y_justify	int
;	O
switch	O
(	O
x_justify_c	char
)	O
{	O
case	O
'l'	O
:	O
default	O
:	O
h_just	int
=	O
PL_JUST_LEFT	int
;	O
x_offset	double
=	O
0.0	int
;	O
x_displacement	double
=	O
1.0	int
;	O
x_displacement_internal	double
=	O
1.0	int
;	O
break	O
;	O
case	O
'c'	O
:	O
h_just	int
=	O
PL_JUST_CENTER	int
;	O
x_offset	double
=	O
-	O
0.5	int
;	O
x_displacement	double
=	O
0.0	int
;	O
x_displacement_internal	double
=	O
0.0	int
;	O
break	O
;	O
case	O
'r'	O
:	O
h_just	int
=	O
PL_JUST_RIGHT	int
;	O
x_offset	double
=	O
-	O
1.0	int
;	O
x_displacement	double
=	O
-	O
1.0	int
;	O
x_displacement_internal	double
=	O
-	O
1.0	int
;	O
break	O
;	O
}	O
cap_height	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_cap_height	double
;	O
ascent	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_ascent	double
;	O
descent	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_descent	double
;	O
switch	O
(	O
y_justify_c	char
)	O
{	O
case	O
'b'	O
:	O
v_just	int
=	O
PL_JUST_BOTTOM	int
;	O
y_offset	double
=	O
descent	double
;	O
break	O
;	O
case	O
'x'	O
:	O
default	O
:	O
v_just	int
=	O
PL_JUST_BASE	int
;	O
y_offset	double
=	O
0.0	int
;	O
break	O
;	O
case	O
'c'	O
:	O
v_just	int
=	O
PL_JUST_HALF	int
;	O
y_offset	double
=	O
0.5	int
*	O
(	O
descent	double
-	O
ascent	double
)	O
;	O
break	O
;	O
case	O
'C'	O
:	O
v_just	int
=	O
PL_JUST_CAP	int
;	O
y_offset	double
=	O
-	O
cap_height	double
;	O
break	O
;	O
case	O
't'	O
:	O
v_just	int
=	O
PL_JUST_TOP	int
;	O
y_offset	double
=	O
-	O
ascent	double
;	O
break	O
;	O
}	O
if	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
||	O
_plotter	pointer
->	O
data	pointer
->	O
have_horizontal_justification	enum
)	O
&&	O
simple_string	function
(	O
codestring	pointer
)	O
)	O
x_offset	double
=	O
0.0	int
;	O
else	O
{	O
h_just	int
=	O
PL_JUST_LEFT	int
;	O
x_displacement_internal	double
=	O
1.0	int
;	O
}	O
if	O
(	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
||	O
_plotter	pointer
->	O
data	pointer
->	O
have_vertical_justification	enum
)	O
&&	O
simple_string	function
(	O
codestring	pointer
)	O
)	O
y_offset	double
=	O
0.0	int
;	O
else	O
v_just	int
=	O
PL_JUST_BASE	int
;	O
userdx	double
=	O
x_offset	double
*	O
overall_width	double
;	O
userdy	double
=	O
y_offset	double
;	O
theta	double
=	O
M_PI	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
/	O
180.0	int
;	O
sintheta	double
=	O
sin	function
(	O
theta	double
)	O
;	O
costheta	double
=	O
cos	function
(	O
theta	double
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
+=	O
costheta	double
*	O
userdx	double
-	O
sintheta	double
*	O
userdy	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
+=	O
sintheta	double
*	O
userdx	double
+	O
costheta	double
*	O
userdy	double
;	O
}	O
{	O
char	O
*	O
font_name	pointer
;	O
initial_font_name	pointer
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
;	O
font_name	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
1	int
+	O
strlen	function
(	O
initial_font_name	pointer
)	O
)	O
;	O
strcpy	function
(	O
font_name	pointer
,	O
initial_font_name	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
=	O
font_name	pointer
;	O
}	O
initial_font_size	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size	double
;	O
initial_font_type	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
)	O
{	O
case	O
PL_F_HERSHEY	int
:	O
current_font_index	int
=	O
(	O
_pl_g_hershey_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
break	O
;	O
case	O
PL_F_POSTSCRIPT	int
:	O
current_font_index	int
=	O
(	O
_pl_g_ps_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
break	O
;	O
case	O
PL_F_PCL	int
:	O
current_font_index	int
=	O
(	O
_pl_g_pcl_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
break	O
;	O
case	O
PL_F_STICK	int
:	O
current_font_index	int
=	O
(	O
_pl_g_stick_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
break	O
;	O
case	O
PL_F_OTHER	int
:	O
current_font_index	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
return	O
0.0	int
;	O
}	O
cptr	pointer
=	O
codestring	pointer
;	O
while	O
(	O
*	O
cptr	pointer
)	O
{	O
unsigned	O
short	O
c	char
;	O
c	char
=	O
*	O
cptr	pointer
;	O
if	O
(	O
c	char
&	O
CONTROL_CODE	int
)	O
{	O
switch	O
(	O
c	char
&	O
~	O
CONTROL_CODE	int
)	O
{	O
case	O
C_BEGIN_SUBSCRIPT	int
:	O
width	array
+=	O
SUBSCRIPT_DX	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
if	O
(	O
do_render	enum
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
+=	O
(	O
costheta	double
*	O
SUBSCRIPT_DX	int
-	O
sintheta	double
*	O
SUBSCRIPT_DY	O
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
+=	O
(	O
sintheta	double
*	O
SUBSCRIPT_DX	int
+	O
costheta	double
*	O
SUBSCRIPT_DY	O
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
}	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size	double
*=	O
SCRIPTSIZE	int
;	O
_pl_g_set_font	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
break	O
;	O
case	O
C_BEGIN_SUPERSCRIPT	int
:	O
width	array
+=	O
SUPERSCRIPT_DX	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
if	O
(	O
do_render	enum
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
+=	O
(	O
costheta	double
*	O
SUPERSCRIPT_DX	int
-	O
sintheta	double
*	O
SUPERSCRIPT_DY	int
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
+=	O
(	O
sintheta	double
*	O
SUPERSCRIPT_DX	int
+	O
costheta	double
*	O
SUPERSCRIPT_DY	int
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
}	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size	double
*=	O
SCRIPTSIZE	int
;	O
_pl_g_set_font	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
break	O
;	O
case	O
C_END_SUBSCRIPT	int
:	O
width	array
-=	O
SUBSCRIPT_DX	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size	double
/=	O
SCRIPTSIZE	int
;	O
_pl_g_set_font	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
-=	O
(	O
costheta	double
*	O
SUBSCRIPT_DX	int
-	O
sintheta	double
*	O
SUBSCRIPT_DY	O
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
-=	O
(	O
sintheta	double
*	O
SUBSCRIPT_DX	int
+	O
costheta	double
*	O
SUBSCRIPT_DY	O
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
}	O
break	O
;	O
case	O
C_END_SUPERSCRIPT	int
:	O
width	array
-=	O
SUPERSCRIPT_DX	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size	double
/=	O
SCRIPTSIZE	int
;	O
_pl_g_set_font	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
-=	O
(	O
costheta	double
*	O
SUPERSCRIPT_DX	int
-	O
sintheta	double
*	O
SUPERSCRIPT_DY	int
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
-=	O
(	O
sintheta	double
*	O
SUPERSCRIPT_DX	int
+	O
costheta	double
*	O
SUPERSCRIPT_DY	int
)	O
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
}	O
break	O
;	O
case	O
C_PUSH_LOCATION	int
:	O
pushed_position_x	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
;	O
pushed_position_y	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
;	O
pushed_width	double
=	O
width	array
;	O
break	O
;	O
case	O
C_POP_LOCATION	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
=	O
pushed_position_x	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
=	O
pushed_position_y	double
;	O
}	O
width	array
=	O
pushed_width	double
;	O
break	O
;	O
case	O
C_RIGHT_ONE_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
+=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
+=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
}	O
width	array
+=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
break	O
;	O
case	O
C_RIGHT_HALF_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
2.0	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
2.0	int
;	O
}	O
width	array
+=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
2.0	int
;	O
break	O
;	O
case	O
C_RIGHT_QUARTER_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
4.0	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
4.0	int
;	O
}	O
width	array
+=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
4.0	int
;	O
break	O
;	O
case	O
C_RIGHT_SIXTH_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
6.0	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
6.0	int
;	O
}	O
width	array
+=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
6.0	int
;	O
break	O
;	O
case	O
C_RIGHT_EIGHTH_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
8.0	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
8.0	int
;	O
}	O
width	array
+=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
8.0	int
;	O
break	O
;	O
case	O
C_RIGHT_TWELFTH_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
12.0	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
12.0	int
;	O
}	O
width	array
+=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
8.0	int
;	O
break	O
;	O
case	O
C_RIGHT_RADICAL_SHIFT	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_PCL	int
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
PCL_RADICAL_WIDTH	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
PCL_RADICAL_WIDTH	int
;	O
}	O
else	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
+=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
PS_RADICAL_WIDTH	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
+=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
PS_RADICAL_WIDTH	int
;	O
}	O
}	O
width	array
+=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
PS_RADICAL_WIDTH	int
;	O
break	O
;	O
case	O
C_LEFT_ONE_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
-=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
-=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
}	O
width	array
-=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
;	O
break	O
;	O
case	O
C_LEFT_HALF_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
-=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
2.0	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
-=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
2.0	int
;	O
}	O
width	array
-=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
2.0	int
;	O
break	O
;	O
case	O
C_LEFT_QUARTER_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
-=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
4.0	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
-=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
4.0	int
;	O
}	O
width	array
-=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
4.0	int
;	O
break	O
;	O
case	O
C_LEFT_SIXTH_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
-=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
6.0	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
-=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
6.0	int
;	O
}	O
width	array
-=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
6.0	int
;	O
break	O
;	O
case	O
C_LEFT_EIGHTH_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
-=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
8.0	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
-=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
8.0	int
;	O
}	O
width	array
-=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
8.0	int
;	O
break	O
;	O
case	O
C_LEFT_TWELFTH_EM	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
-=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
12.0	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
-=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
12.0	int
;	O
}	O
width	array
-=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
/	O
8.0	int
;	O
break	O
;	O
case	O
C_LEFT_RADICAL_SHIFT	int
:	O
if	O
(	O
do_render	enum
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_PCL	int
)	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
-=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
PCL_RADICAL_WIDTH	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
-=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
PCL_RADICAL_WIDTH	int
;	O
}	O
else	O
{	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
x	double
-=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
PS_RADICAL_WIDTH	int
;	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
)	O
.	O
y	double
-=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
PS_RADICAL_WIDTH	int
;	O
}	O
}	O
width	array
-=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
PS_RADICAL_WIDTH	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
cptr	pointer
++	O
;	O
}	O
else	O
{	O
unsigned	O
char	O
*	O
s	pointer
,	O
*	O
sptr	pointer
;	O
int	O
new_font_index	int
=	O
(	O
c	char
>>	O
FONT_SHIFT	int
)	O
&	O
ONE_BYTE	int
;	O
if	O
(	O
new_font_index	int
!=	O
current_font_index	int
)	O
{	O
switch	O
(	O
initial_font_type	int
)	O
{	O
case	O
PL_F_HERSHEY	int
:	O
free	function
(	O
(	O
char	O
*	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
)	O
;	O
{	O
char	O
*	O
font_name	pointer
;	O
font_name	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
1	int
+	O
strlen	function
(	O
_pl_g_hershey_font_info	array
[	O
new_font_index	int
]	O
.	O
name	pointer
)	O
)	O
;	O
strcpy	function
(	O
font_name	pointer
,	O
_pl_g_hershey_font_info	array
[	O
new_font_index	int
]	O
.	O
name	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
=	O
font_name	pointer
;	O
}	O
break	O
;	O
case	O
PL_F_POSTSCRIPT	int
:	O
free	function
(	O
(	O
char	O
*	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
)	O
;	O
{	O
char	O
*	O
font_name	pointer
;	O
font_name	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
1	int
+	O
strlen	function
(	O
_pl_g_ps_font_info	array
[	O
new_font_index	int
]	O
.	O
ps_name	pointer
)	O
)	O
;	O
strcpy	function
(	O
font_name	pointer
,	O
_pl_g_ps_font_info	array
[	O
new_font_index	int
]	O
.	O
ps_name	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
=	O
font_name	pointer
;	O
}	O
break	O
;	O
case	O
PL_F_PCL	int
:	O
free	function
(	O
(	O
char	O
*	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
)	O
;	O
{	O
char	O
*	O
font_name	pointer
;	O
font_name	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
1	int
+	O
strlen	function
(	O
_pl_g_pcl_font_info	array
[	O
new_font_index	int
]	O
.	O
ps_name	pointer
)	O
)	O
;	O
strcpy	function
(	O
font_name	pointer
,	O
_pl_g_pcl_font_info	array
[	O
new_font_index	int
]	O
.	O
ps_name	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
=	O
font_name	pointer
;	O
}	O
break	O
;	O
case	O
PL_F_STICK	int
:	O
free	function
(	O
(	O
char	O
*	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
)	O
;	O
{	O
char	O
*	O
font_name	pointer
;	O
font_name	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
1	int
+	O
strlen	function
(	O
_pl_g_stick_font_info	array
[	O
new_font_index	int
]	O
.	O
ps_name	pointer
)	O
)	O
;	O
strcpy	function
(	O
font_name	pointer
,	O
_pl_g_stick_font_info	array
[	O
new_font_index	int
]	O
.	O
ps_name	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
=	O
font_name	pointer
;	O
}	O
break	O
;	O
case	O
PL_F_OTHER	int
:	O
free	function
(	O
(	O
char	O
*	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
)	O
;	O
{	O
char	O
*	O
font_name	pointer
;	O
if	O
(	O
new_font_index	int
==	O
0	int
)	O
{	O
font_name	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
1	int
+	O
strlen	function
(	O
SYMBOL_FONT	pointer
)	O
)	O
;	O
strcpy	function
(	O
font_name	pointer
,	O
SYMBOL_FONT	pointer
)	O
;	O
}	O
else	O
{	O
font_name	pointer
=	O
(	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
1	int
+	O
strlen	function
(	O
initial_font_name	pointer
)	O
)	O
;	O
strcpy	function
(	O
font_name	pointer
,	O
initial_font_name	pointer
)	O
;	O
}	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
=	O
font_name	pointer
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
_pl_g_set_font	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
current_font_index	int
=	O
new_font_index	int
;	O
}	O
sptr	pointer
=	O
s	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
(	O
4	int
*	O
_codestring_len	function
(	O
cptr	pointer
)	O
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
while	O
(	O
*	O
cptr	pointer
&&	O
(	O
*	O
cptr	pointer
&	O
CONTROL_CODE	int
)	O
==	O
0	int
&&	O
(	O
(	O
*	O
cptr	pointer
>>	O
FONT_SHIFT	int
)	O
&	O
ONE_BYTE	int
)	O
==	O
current_font_index	int
)	O
*	O
sptr	pointer
++	O
=	O
(	O
*	O
cptr	pointer
++	O
)	O
&	O
ONE_BYTE	int
;	O
*	O
sptr	pointer
=	O
(	O
unsigned	O
char	O
)	O
'\0'	O
;	O
added_width	double
=	O
_pl_g_render_simple_string	function
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
,	O
do_render	enum
,	O
h_just	int
,	O
v_just	int
)	O
;	O
width	array
+=	O
added_width	double
;	O
if	O
(	O
do_render	enum
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
+=	O
costheta	double
*	O
x_displacement_internal	double
*	O
added_width	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
+=	O
sintheta	double
*	O
x_displacement_internal	double
*	O
added_width	double
;	O
}	O
free	function
(	O
s	pointer
)	O
;	O
}	O
}	O
free	function
(	O
codestring	pointer
)	O
;	O
free	function
(	O
(	O
char	O
*	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_name	pointer
=	O
initial_font_name	pointer
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_size	double
=	O
initial_font_size	double
;	O
_pl_g_set_font	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
do_render	enum
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
=	O
initial_position_x	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
=	O
initial_position_y	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
+=	O
costheta	double
*	O
x_displacement	double
*	O
overall_width	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
+=	O
sintheta	double
*	O
x_displacement	double
*	O
overall_width	double
;	O
}	O
return	O
width	array
;	O
}	O
double	O
_pl_g_render_simple_string	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
char	O
*	O
s	pointer
,	O
bool	enum
do_render	enum
,	O
int	O
h_just	int
,	O
int	O
v_just	int
)	O
{	O
double	O
width	array
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
==	O
PL_F_HERSHEY	int
)	O
{	O
unsigned	O
char	O
*	O
t	pointer
;	O
t	pointer
=	O
esc_esc_string	function
(	O
s	pointer
)	O
;	O
width	array
=	O
_pl_g_flabelwidth_hershey	function
(	O
R___	O
(	O
_plotter	pointer
)	O
t	pointer
)	O
;	O
if	O
(	O
do_render	enum
)	O
{	O
plPoint	struct
initial_pos	struct
;	O
initial_pos	struct
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
;	O
_pl_g_alabel_hershey	function
(	O
R___	O
(	O
_plotter	pointer
)	O
t	pointer
,	O
h_just	int
,	O
v_just	int
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
=	O
initial_pos	struct
;	O
}	O
free	function
(	O
t	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
do_render	enum
)	O
width	array
=	O
_plotter	pointer
->	O
paint_text_string	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
,	O
h_just	int
,	O
v_just	int
)	O
;	O
else	O
width	array
=	O
_plotter	pointer
->	O
get_text_width	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
)	O
;	O
}	O
return	O
width	array
;	O
}	O
double	O
_pl_g_get_text_width	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
char	O
*	O
s	pointer
)	O
{	O
int	O
index	function
;	O
int	O
width	array
=	O
0	int
;	O
double	O
swidth	double
=	O
0.0	int
;	O
unsigned	O
char	O
current_char	char
;	O
int	O
master_font_index	int
;	O
double	O
retval	double
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
)	O
{	O
case	O
PL_F_POSTSCRIPT	int
:	O
master_font_index	int
=	O
(	O
_pl_g_ps_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
for	O
(	O
index	function
=	O
0	int
;	O
s	pointer
[	O
index	function
]	O
!=	O
'\0'	O
;	O
index	function
++	O
)	O
{	O
current_char	char
=	O
(	O
unsigned	O
int	O
)	O
s	pointer
[	O
index	function
]	O
;	O
width	array
+=	O
(	O
(	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
)	O
.	O
width	array
)	O
[	O
current_char	char
]	O
;	O
}	O
retval	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
(	O
double	O
)	O
width	array
/	O
1000.0	int
;	O
break	O
;	O
case	O
PL_F_PCL	int
:	O
master_font_index	int
=	O
(	O
_pl_g_pcl_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
for	O
(	O
index	function
=	O
0	int
;	O
s	pointer
[	O
index	function
]	O
!=	O
'\0'	O
;	O
index	function
++	O
)	O
{	O
current_char	char
=	O
(	O
unsigned	O
int	O
)	O
s	pointer
[	O
index	function
]	O
;	O
width	array
+=	O
(	O
(	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
)	O
.	O
width	array
)	O
[	O
current_char	char
]	O
;	O
}	O
retval	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
(	O
double	O
)	O
width	array
/	O
1000.0	int
;	O
break	O
;	O
case	O
PL_F_STICK	int
:	O
master_font_index	int
=	O
(	O
_pl_g_stick_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
kern_stick_fonts	enum
)	O
{	O
const	O
struct	O
plStickFontSpacingTableStruct	struct
*	O
ktable_lower	pointer
,	O
*	O
ktable_upper	pointer
;	O
const	O
struct	O
plStickCharSpacingTableStruct	struct
*	O
stable_lower	pointer
,	O
*	O
stable_upper	pointer
;	O
const	O
short	O
*	O
lower_spacing	pointer
,	O
*	O
upper_spacing	pointer
;	O
int	O
lower_cols	int
,	O
upper_cols	int
;	O
const	O
char	O
*	O
lower_char_to_row	pointer
,	O
*	O
lower_char_to_col	pointer
;	O
const	O
char	O
*	O
upper_char_to_row	pointer
,	O
*	O
upper_char_to_col	pointer
;	O
bool	enum
halves_use_different_tables	enum
;	O
ktable_lower	pointer
=	O
&	O
(	O
_pl_g_stick_kerning_tables	array
[	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
kerning_table_lower	int
]	O
)	O
;	O
ktable_upper	pointer
=	O
&	O
(	O
_pl_g_stick_kerning_tables	array
[	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
kerning_table_upper	int
]	O
)	O
;	O
stable_lower	pointer
=	O
&	O
(	O
_pl_g_stick_spacing_tables	array
[	O
ktable_lower	pointer
->	O
spacing_table	int
]	O
)	O
;	O
stable_upper	pointer
=	O
&	O
(	O
_pl_g_stick_spacing_tables	array
[	O
ktable_upper	pointer
->	O
spacing_table	int
]	O
)	O
;	O
halves_use_different_tables	enum
=	O
(	O
stable_lower	pointer
!=	O
stable_upper	pointer
?	O
true	int
:	O
false	int
)	O
;	O
lower_cols	int
=	O
stable_lower	pointer
->	O
cols	int
;	O
upper_cols	int
=	O
stable_upper	pointer
->	O
cols	int
;	O
lower_char_to_row	pointer
=	O
ktable_lower	pointer
->	O
row	array
;	O
lower_char_to_col	pointer
=	O
ktable_lower	pointer
->	O
col	array
;	O
upper_char_to_row	pointer
=	O
ktable_upper	pointer
->	O
row	array
;	O
upper_char_to_col	pointer
=	O
ktable_upper	pointer
->	O
col	array
;	O
lower_spacing	pointer
=	O
stable_lower	pointer
->	O
kerns	pointer
;	O
upper_spacing	pointer
=	O
stable_upper	pointer
->	O
kerns	pointer
;	O
swidth	double
+=	O
(	O
(	O
(	O
double	O
)	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
offset	array
)	O
)	O
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_lower	int
)	O
)	O
;	O
for	O
(	O
index	function
=	O
0	int
;	O
s	pointer
[	O
index	function
]	O
!=	O
'\0'	O
;	O
index	function
++	O
)	O
{	O
unsigned	O
char	O
c	char
,	O
d	char
;	O
c	char
=	O
(	O
unsigned	O
int	O
)	O
s	pointer
[	O
index	function
]	O
;	O
if	O
(	O
c	char
<	O
0x80	int
)	O
{	O
double	O
spacefactor	double
,	O
char_width	double
;	O
if	O
(	O
c	char
==	O
' '	O
)	O
spacefactor	double
=	O
1.5	int
;	O
else	O
spacefactor	double
=	O
1.0	int
;	O
char_width	double
=	O
(	O
(	O
(	O
double	O
)	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
width	array
[	O
c	char
]	O
)	O
)	O
*	O
spacefactor	double
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_lower	int
)	O
)	O
;	O
swidth	double
+=	O
char_width	double
;	O
if	O
(	O
(	O
d	char
=	O
(	O
unsigned	O
int	O
)	O
s	pointer
[	O
index	function
+	O
1	int
]	O
)	O
!=	O
'\0'	O
)	O
{	O
int	O
row	array
,	O
col	array
;	O
int	O
spacing	pointer
;	O
row	array
=	O
lower_char_to_row	pointer
[	O
c	char
]	O
;	O
if	O
(	O
d	char
<	O
0x80	int
)	O
{	O
col	array
=	O
lower_char_to_col	pointer
[	O
d	char
]	O
;	O
spacing	pointer
=	O
lower_spacing	pointer
[	O
row	array
*	O
lower_cols	int
+	O
col	array
]	O
;	O
}	O
else	O
if	O
(	O
!	O
halves_use_different_tables	enum
)	O
{	O
col	array
=	O
upper_char_to_col	pointer
[	O
d	char
-	O
0x80	int
]	O
;	O
spacing	pointer
=	O
lower_spacing	pointer
[	O
row	array
*	O
lower_cols	int
+	O
col	array
]	O
;	O
}	O
else	O
if	O
(	O
c	char
==	O
' '	O
||	O
(	O
d	char
==	O
' '	O
+	O
0x80	int
)	O
)	O
spacing	pointer
=	O
0	int
;	O
else	O
spacing	pointer
=	O
-	O
IROUND	O
(	O
spacefactor	double
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
width	array
[	O
c	char
]	O
)	O
+	O
IROUND	O
(	O
1.5	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
width	array
[	O
' '	O
]	O
)	O
;	O
swidth	double
+=	O
(	O
(	O
double	O
)	O
spacing	pointer
)	O
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_lower	int
)	O
;	O
}	O
}	O
else	O
{	O
double	O
spacefactor	double
,	O
char_width	double
;	O
if	O
(	O
c	char
==	O
' '	O
+	O
0x80	int
)	O
spacefactor	double
=	O
1.5	int
;	O
else	O
spacefactor	double
=	O
1.0	int
;	O
char_width	double
=	O
(	O
(	O
(	O
double	O
)	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
width	array
[	O
c	char
]	O
)	O
)	O
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_upper	int
)	O
)	O
;	O
swidth	double
+=	O
char_width	double
;	O
if	O
(	O
(	O
d	char
=	O
(	O
unsigned	O
int	O
)	O
s	pointer
[	O
index	function
+	O
1	int
]	O
)	O
!=	O
'\0'	O
)	O
{	O
int	O
row	array
,	O
col	array
;	O
int	O
spacing	pointer
;	O
row	array
=	O
upper_char_to_row	pointer
[	O
c	char
-	O
0x80	int
]	O
;	O
if	O
(	O
d	char
>=	O
0x80	int
)	O
{	O
col	array
=	O
upper_char_to_col	pointer
[	O
d	char
-	O
0x80	int
]	O
;	O
spacing	pointer
=	O
upper_spacing	pointer
[	O
row	array
*	O
upper_cols	int
+	O
col	array
]	O
;	O
}	O
else	O
if	O
(	O
!	O
halves_use_different_tables	enum
)	O
{	O
col	array
=	O
lower_char_to_col	pointer
[	O
d	char
]	O
;	O
spacing	pointer
=	O
upper_spacing	pointer
[	O
row	array
*	O
upper_cols	int
+	O
col	array
]	O
;	O
}	O
else	O
if	O
(	O
(	O
c	char
==	O
' '	O
+	O
0x80	int
)	O
||	O
d	char
==	O
' '	O
)	O
spacing	pointer
=	O
0	int
;	O
else	O
spacing	pointer
=	O
-	O
IROUND	O
(	O
spacefactor	double
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
width	array
[	O
c	char
]	O
)	O
+	O
IROUND	O
(	O
1.5	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
width	array
[	O
' '	O
]	O
)	O
;	O
swidth	double
+=	O
(	O
(	O
double	O
)	O
spacing	pointer
)	O
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_upper	int
)	O
;	O
}	O
}	O
}	O
swidth	double
+=	O
(	O
(	O
(	O
double	O
)	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
offset	array
)	O
)	O
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_lower	int
)	O
)	O
;	O
}	O
else	O
{	O
for	O
(	O
index	function
=	O
0	int
;	O
s	pointer
[	O
index	function
]	O
!=	O
'\0'	O
;	O
index	function
++	O
)	O
{	O
unsigned	O
char	O
c	char
;	O
c	char
=	O
(	O
unsigned	O
int	O
)	O
s	pointer
[	O
index	function
]	O
;	O
if	O
(	O
c	char
<	O
0x80	int
)	O
{	O
swidth	double
+=	O
(	O
(	O
(	O
double	O
)	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
offset	array
)	O
)	O
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_lower	int
)	O
)	O
;	O
swidth	double
+=	O
(	O
(	O
(	O
double	O
)	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
width	array
[	O
c	char
]	O
)	O
)	O
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_lower	int
)	O
)	O
;	O
swidth	double
+=	O
(	O
(	O
(	O
double	O
)	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
offset	array
)	O
)	O
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_lower	int
)	O
)	O
;	O
}	O
else	O
{	O
swidth	double
+=	O
(	O
(	O
(	O
double	O
)	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
offset	array
)	O
)	O
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_upper	int
)	O
)	O
;	O
swidth	double
+=	O
(	O
(	O
(	O
double	O
)	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
width	array
[	O
c	char
]	O
)	O
)	O
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_upper	int
)	O
)	O
;	O
swidth	double
+=	O
(	O
(	O
(	O
double	O
)	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
offset	array
)	O
)	O
/	O
(	O
2	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_upper	int
)	O
)	O
;	O
}	O
}	O
}	O
retval	double
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
(	O
double	O
)	O
swidth	double
;	O
break	O
;	O
case	O
PL_F_OTHER	int
:	O
retval	double
=	O
0.0	int
;	O
break	O
;	O
default	O
:	O
retval	double
=	O
0.0	int
;	O
break	O
;	O
}	O
return	O
retval	double
;	O
}	O
static	O
bool	enum
simple_string	function
(	O
const	O
unsigned	O
short	O
*	O
codestring	pointer
)	O
{	O
const	O
unsigned	O
short	O
*	O
cptr	pointer
=	O
codestring	pointer
;	O
unsigned	O
short	O
c	char
,	O
d	char
;	O
int	O
font_index	int
;	O
if	O
(	O
*	O
codestring	pointer
==	O
0	int
)	O
return	O
true	int
;	O
c	char
=	O
*	O
codestring	pointer
;	O
if	O
(	O
c	char
&	O
CONTROL_CODE	int
)	O
return	O
false	int
;	O
font_index	int
=	O
(	O
c	char
>>	O
FONT_SHIFT	int
)	O
&	O
ONE_BYTE	int
;	O
while	O
(	O
(	O
d	char
=	O
*	O
cptr	pointer
++	O
)	O
!=	O
0	int
)	O
{	O
int	O
local_font_index	int
;	O
if	O
(	O
d	char
&	O
CONTROL_CODE	int
)	O
return	O
false	int
;	O
local_font_index	int
=	O
(	O
d	char
>>	O
FONT_SHIFT	int
)	O
&	O
ONE_BYTE	int
;	O
if	O
(	O
local_font_index	int
!=	O
font_index	int
)	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	enum
clean_iso_string	function
(	O
unsigned	O
char	O
*	O
s	pointer
)	O
{	O
bool	enum
was_clean	enum
=	O
true	int
;	O
unsigned	O
char	O
*	O
t	pointer
;	O
for	O
(	O
t	pointer
=	O
s	pointer
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
if	O
(	O
GOOD_ISO	O
(	O
*	O
s	pointer
)	O
)	O
{	O
*	O
t	pointer
=	O
*	O
s	pointer
;	O
t	pointer
++	O
;	O
}	O
else	O
was_clean	enum
=	O
false	int
;	O
}	O
*	O
t	pointer
=	O
(	O
unsigned	O
char	O
)	O
'\0'	O
;	O
return	O
was_clean	enum
;	O
}	O
static	O
unsigned	O
char	O
*	O
esc_esc_string	function
(	O
const	O
unsigned	O
char	O
*	O
s	pointer
)	O
{	O
const	O
unsigned	O
char	O
*	O
sptr	pointer
;	O
unsigned	O
char	O
*	O
t	pointer
,	O
*	O
tptr	pointer
;	O
t	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
2	int
*	O
strlen	function
(	O
(	O
char	O
*	O
)	O
s	pointer
)	O
+	O
1	int
)	O
;	O
sptr	pointer
=	O
s	pointer
;	O
tptr	pointer
=	O
t	pointer
;	O
while	O
(	O
*	O
sptr	pointer
)	O
{	O
*	O
tptr	pointer
++	O
=	O
*	O
sptr	pointer
;	O
if	O
(	O
*	O
sptr	pointer
==	O
'\\'	O
)	O
*	O
tptr	pointer
++	O
=	O
*	O
sptr	pointer
;	O
sptr	pointer
++	O
;	O
}	O
*	O
tptr	pointer
=	O
'\0'	O
;	O
return	O
t	pointer
;	O
}	O
void	O
_pl_g_paint_text_string_with_escapes	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
char	O
*	O
s	pointer
,	O
int	O
h_just	int
,	O
int	O
v_just	int
)	O
{	O
return	O
;	O
}	O
double	O
_pl_g_paint_text_string	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
char	O
*	O
s	pointer
,	O
int	O
h_just	int
,	O
int	O
v_just	int
)	O
{	O
return	O
0.0	int
;	O
}	O
