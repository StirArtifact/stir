struct	O
spec	struct
{	O
unsigned	O
int	O
directives	int
;	O
bool	bool
simple	bool
;	O
unsigned	O
int	O
arg_count	int
;	O
bool	bool
args_used	array
[	O
100	int
]	O
;	O
}	O
;	O
static	O
void	O
*	O
format_parse	function
(	O
const	O
char	O
*	O
format	pointer
,	O
bool	bool
translated	bool
,	O
char	O
*	O
fdi	pointer
,	O
char	O
*	O
*	O
invalid_reason	pointer
)	O
{	O
const	O
char	O
*	O
const	O
format_start	pointer
=	O
format	pointer
;	O
struct	O
spec	struct
spec	struct
;	O
struct	O
spec	struct
*	O
result	pointer
;	O
spec	struct
.	O
directives	int
=	O
0	int
;	O
spec	struct
.	O
simple	bool
=	O
true	int
;	O
spec	struct
.	O
arg_count	int
=	O
0	int
;	O
for	O
(	O
;	O
*	O
format	pointer
!=	O
'\0'	O
;	O
)	O
if	O
(	O
*	O
format	pointer
++	O
==	O
'%'	O
)	O
{	O
const	O
char	O
*	O
dir_start	pointer
=	O
format	pointer
-	O
1	int
;	O
bool	bool
locale_flag	bool
=	O
false	int
;	O
if	O
(	O
*	O
format	pointer
==	O
'L'	O
)	O
{	O
locale_flag	bool
=	O
true	int
;	O
format	pointer
++	O
;	O
}	O
if	O
(	O
*	O
format	pointer
>=	O
'0'	O
&&	O
*	O
format	pointer
<=	O
'9'	O
)	O
{	O
unsigned	O
int	O
number	int
;	O
FDI_SET	O
(	O
dir_start	pointer
,	O
FMTDIR_START	int
)	O
;	O
spec	struct
.	O
directives	int
++	O
;	O
if	O
(	O
locale_flag	bool
)	O
spec	struct
.	O
simple	bool
=	O
false	int
;	O
number	int
=	O
*	O
format	pointer
-	O
'0'	O
;	O
if	O
(	O
format	pointer
[	O
1	int
]	O
>=	O
'0'	O
&&	O
format	pointer
[	O
1	int
]	O
<=	O
'9'	O
)	O
{	O
number	int
=	O
10	int
*	O
number	int
+	O
(	O
format	pointer
[	O
1	int
]	O
-	O
'0'	O
)	O
;	O
spec	struct
.	O
simple	bool
=	O
false	int
;	O
format	pointer
++	O
;	O
}	O
while	O
(	O
spec	struct
.	O
arg_count	int
<=	O
number	int
)	O
spec	struct
.	O
args_used	array
[	O
spec	struct
.	O
arg_count	int
++	O
]	O
=	O
false	int
;	O
spec	struct
.	O
args_used	array
[	O
number	int
]	O
=	O
true	int
;	O
FDI_SET	O
(	O
format	pointer
,	O
FMTDIR_END	int
)	O
;	O
format	pointer
++	O
;	O
}	O
}	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
spec	struct
)	O
;	O
*	O
result	pointer
=	O
spec	struct
;	O
return	O
result	pointer
;	O
}	O
static	O
void	O
format_free	function
(	O
void	O
*	O
descr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec	struct
=	O
(	O
struct	O
spec	struct
*	O
)	O
descr	pointer
;	O
free	function
(	O
spec	struct
)	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	function
(	O
void	O
*	O
descr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec	struct
=	O
(	O
struct	O
spec	struct
*	O
)	O
descr	pointer
;	O
return	O
spec	struct
->	O
directives	int
;	O
}	O
static	O
bool	bool
format_check	function
(	O
void	O
*	O
msgid_descr	pointer
,	O
void	O
*	O
msgstr_descr	pointer
,	O
bool	bool
equality	bool
,	O
formatstring_error_logger_t	pointer
error_logger	pointer
,	O
const	O
char	O
*	O
pretty_msgid	pointer
,	O
const	O
char	O
*	O
pretty_msgstr	pointer
)	O
{	O
struct	O
spec	struct
*	O
spec1	pointer
=	O
(	O
struct	O
spec	struct
*	O
)	O
msgid_descr	pointer
;	O
struct	O
spec	struct
*	O
spec2	pointer
=	O
(	O
struct	O
spec	struct
*	O
)	O
msgstr_descr	pointer
;	O
bool	bool
err	bool
=	O
false	int
;	O
unsigned	O
int	O
i	long
;	O
if	O
(	O
spec1	pointer
->	O
simple	bool
&&	O
!	O
spec2	pointer
->	O
simple	bool
)	O
{	O
if	O
(	O
error_logger	pointer
)	O
error_logger	pointer
(	O
_	O
(	O
"'%s' is a simple format string, but '%s' is not: it contains an 'L' flag or a double-digit argument number"	pointer
)	O
,	O
pretty_msgid	pointer
,	O
pretty_msgstr	pointer
)	O
;	O
err	bool
=	O
true	int
;	O
}	O
if	O
(	O
!	O
err	bool
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
spec1	pointer
->	O
arg_count	int
||	O
i	long
<	O
spec2	pointer
->	O
arg_count	int
;	O
i	long
++	O
)	O
{	O
bool	bool
arg_used1	bool
=	O
(	O
i	long
<	O
spec1	pointer
->	O
arg_count	int
&&	O
spec1	pointer
->	O
args_used	array
[	O
i	long
]	O
)	O
;	O
bool	bool
arg_used2	bool
=	O
(	O
i	long
<	O
spec2	pointer
->	O
arg_count	int
&&	O
spec2	pointer
->	O
args_used	array
[	O
i	long
]	O
)	O
;	O
if	O
(	O
arg_used1	bool
!=	O
arg_used2	bool
)	O
{	O
if	O
(	O
error_logger	pointer
)	O
{	O
if	O
(	O
arg_used1	bool
)	O
error_logger	pointer
(	O
_	O
(	O
"a format specification for argument %u doesn't exist in '%s'"	pointer
)	O
,	O
i	long
,	O
pretty_msgstr	pointer
)	O
;	O
else	O
error_logger	pointer
(	O
_	O
(	O
"a format specification for argument %u, as in '%s', doesn't exist in '%s'"	pointer
)	O
,	O
i	long
,	O
pretty_msgstr	pointer
,	O
pretty_msgid	pointer
)	O
;	O
}	O
err	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
return	O
err	bool
;	O
}	O
struct	O
formatstring_parser	struct
formatstring_qt	struct
=	O
{	O
format_parse	function
,	O
format_free	function
,	O
format_get_number_of_directives	function
,	O
NULL	O
,	O
format_check	function
}	O
;	O
