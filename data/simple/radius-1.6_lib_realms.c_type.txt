static	O
grad_list_t	struct
*	O
realms	pointer
;	O
struct	O
_parse_data	struct
{	O
int	O
(	O
*	O
fun	pointer
)	O
(	O
)	O
;	O
int	O
ports	array
[	O
GRAD_PORT_MAX	int
]	O
;	O
grad_locus_t	struct
*	O
loc	struct
;	O
}	O
;	O
static	O
int	O
_parse_server	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
_parse_data	struct
*	O
pd	pointer
,	O
int	O
*	O
np	pointer
,	O
grad_server_t	struct
*	O
srv	pointer
)	O
{	O
memset	function
(	O
srv	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
srv	pointer
)	O
)	O
;	O
srv	pointer
->	O
name	pointer
=	O
argv	pointer
[	O
*	O
np	pointer
]	O
;	O
srv	pointer
->	O
addr	int
=	O
grad_ip_gethostaddr	function
(	O
argv	pointer
[	O
(	O
*	O
np	pointer
)	O
++	O
]	O
)	O
;	O
if	O
(	O
*	O
np	pointer
+	O
1	int
<	O
argc	int
&&	O
argv	pointer
[	O
*	O
np	pointer
]	O
[	O
0	int
]	O
==	O
':'	O
)	O
{	O
char	O
*	O
p	pointer
;	O
srv	pointer
->	O
port	array
[	O
GRAD_PORT_AUTH	int
]	O
=	O
strtoul	function
(	O
argv	pointer
[	O
++	O
*	O
np	pointer
]	O
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
np	pointer
+	O
2	int
<	O
argc	int
&&	O
argv	pointer
[	O
*	O
np	pointer
+	O
1	int
]	O
[	O
0	int
]	O
==	O
':'	O
)	O
{	O
++	O
*	O
np	pointer
;	O
srv	pointer
->	O
port	array
[	O
GRAD_PORT_ACCT	int
]	O
=	O
strtoul	function
(	O
argv	pointer
[	O
++	O
*	O
np	pointer
]	O
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
}	O
else	O
srv	pointer
->	O
port	array
[	O
GRAD_PORT_ACCT	int
]	O
=	O
srv	pointer
->	O
port	array
[	O
GRAD_PORT_AUTH	int
]	O
+	O
1	int
;	O
++	O
*	O
np	pointer
;	O
}	O
else	O
{	O
srv	pointer
->	O
port	array
[	O
GRAD_PORT_AUTH	int
]	O
=	O
pd	pointer
->	O
ports	array
[	O
GRAD_PORT_AUTH	int
]	O
;	O
srv	pointer
->	O
port	array
[	O
GRAD_PORT_ACCT	int
]	O
=	O
pd	pointer
->	O
ports	array
[	O
GRAD_PORT_ACCT	int
]	O
;	O
}	O
if	O
(	O
pd	pointer
->	O
fun	pointer
&&	O
pd	pointer
->	O
fun	pointer
(	O
srv	pointer
)	O
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
pd	pointer
->	O
loc	struct
,	O
_	O
(	O
"can't find secret for %s"	pointer
)	O
,	O
srv	pointer
->	O
name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_parse_server_list	function
(	O
grad_server_queue_t	struct
*	O
qp	pointer
,	O
char	O
*	O
str	pointer
,	O
struct	O
_parse_data	struct
*	O
pd	pointer
)	O
{	O
int	O
i	int
,	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
if	O
(	O
grad_argcv_get	function
(	O
str	pointer
,	O
",:"	pointer
,	O
NULL	O
,	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
)	O
return	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
grad_server_t	struct
srv	pointer
;	O
if	O
(	O
_parse_server	function
(	O
argc	int
,	O
argv	pointer
,	O
pd	pointer
,	O
&	O
i	int
,	O
&	O
srv	pointer
)	O
==	O
0	int
)	O
grad_client_append_server	function
(	O
qp	pointer
,	O
grad_client_alloc_server	function
(	O
&	O
srv	pointer
)	O
)	O
;	O
if	O
(	O
i	int
<	O
argc	int
&&	O
argv	pointer
[	O
i	int
]	O
[	O
0	int
]	O
!=	O
','	O
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
pd	pointer
->	O
loc	struct
,	O
_	O
(	O
"expected , but found %s"	pointer
)	O
,	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
grad_argcv_free	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
grad_argcv_free	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
read_realms_entry	function
(	O
void	O
*	O
closure	pointer
,	O
int	O
fc	int
,	O
char	O
*	O
*	O
fv	pointer
,	O
grad_locus_t	struct
*	O
loc	struct
)	O
{	O
struct	O
_parse_data	struct
*	O
pd	pointer
=	O
closure	pointer
;	O
grad_realm_t	struct
*	O
rp	pointer
;	O
int	O
i	int
;	O
if	O
(	O
fc	int
<	O
2	int
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_ERR	int
,	O
loc	struct
,	O
_	O
(	O
"too few fields (%d)"	pointer
)	O
,	O
fc	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
pd	pointer
->	O
loc	struct
=	O
loc	struct
;	O
rp	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
grad_realm_t	struct
)	O
)	O
;	O
rp	pointer
->	O
queue	pointer
=	O
NULL	O
;	O
if	O
(	O
strcmp	function
(	O
fv	pointer
[	O
1	int
]	O
,	O
"LOCAL"	pointer
)	O
==	O
0	int
)	O
{	O
i	int
=	O
2	int
;	O
}	O
else	O
{	O
rp	pointer
->	O
queue	pointer
=	O
grad_client_create_queue	function
(	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
i	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
_parse_server_list	function
(	O
rp	pointer
->	O
queue	pointer
,	O
fv	pointer
[	O
++	O
i	int
]	O
,	O
pd	pointer
)	O
)	O
{	O
grad_client_clear_server_list	function
(	O
rp	pointer
->	O
queue	pointer
)	O
;	O
break	O
;	O
}	O
}	O
while	O
(	O
fv	pointer
[	O
i	int
]	O
[	O
strlen	function
(	O
fv	pointer
[	O
i	int
]	O
)	O
-	O
1	int
]	O
==	O
','	O
)	O
;	O
i	int
++	O
;	O
if	O
(	O
grad_list_count	function
(	O
rp	pointer
->	O
queue	pointer
->	O
servers	pointer
)	O
==	O
0	int
)	O
{	O
grad_log_loc	function
(	O
GRAD_LOG_NOTICE	int
,	O
loc	struct
,	O
_	O
(	O
"discarding entry"	pointer
)	O
)	O
;	O
grad_client_destroy_queue	function
(	O
rp	pointer
->	O
queue	pointer
)	O
;	O
grad_free	function
(	O
rp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
GRAD_STRING_COPY	O
(	O
rp	pointer
->	O
realm	array
,	O
fv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
i	int
<	O
fc	int
)	O
{	O
rp	pointer
->	O
args	pointer
=	O
grad_envar_parse_argcv	function
(	O
fc	int
-	O
i	int
,	O
&	O
fv	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
rp	pointer
->	O
queue	pointer
)	O
{	O
rp	pointer
->	O
queue	pointer
->	O
timeout	int
=	O
grad_envar_lookup_int	function
(	O
rp	pointer
->	O
args	pointer
,	O
"timeout"	pointer
,	O
1	int
)	O
;	O
rp	pointer
->	O
queue	pointer
->	O
retries	int
=	O
grad_envar_lookup_int	function
(	O
rp	pointer
->	O
args	pointer
,	O
"retries"	pointer
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
realms	pointer
)	O
realms	pointer
=	O
grad_list_create	function
(	O
)	O
;	O
grad_list_prepend	function
(	O
realms	pointer
,	O
rp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_realm_mem_free	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
ARG_UNUSED	O
)	O
{	O
grad_realm_t	struct
*	O
r	pointer
=	O
item	pointer
;	O
grad_client_destroy_queue	function
(	O
r	pointer
->	O
queue	pointer
)	O
;	O
grad_envar_free_list	function
(	O
&	O
r	pointer
->	O
args	pointer
)	O
;	O
grad_free	function
(	O
item	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
grad_read_realms	function
(	O
char	O
*	O
file	pointer
,	O
int	O
auth_port	int
,	O
int	O
acct_port	int
,	O
int	O
(	O
*	O
set_secret	pointer
)	O
(	O
)	O
)	O
{	O
struct	O
_parse_data	struct
pd	pointer
;	O
grad_list_destroy	function
(	O
&	O
realms	pointer
,	O
_realm_mem_free	function
,	O
NULL	O
)	O
;	O
realms	pointer
=	O
NULL	O
;	O
pd	pointer
.	O
fun	pointer
=	O
set_secret	pointer
;	O
pd	pointer
.	O
ports	array
[	O
GRAD_PORT_AUTH	int
]	O
=	O
auth_port	int
;	O
pd	pointer
.	O
ports	array
[	O
GRAD_PORT_ACCT	int
]	O
=	O
acct_port	int
;	O
return	O
grad_read_raddb_file	function
(	O
file	pointer
,	O
1	int
,	O
NULL	O
,	O
read_realms_entry	function
,	O
&	O
pd	pointer
)	O
;	O
}	O
static	O
int	O
realm_match_name_p	function
(	O
const	O
grad_realm_t	struct
*	O
realm	array
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
(	O
grad_envar_lookup_int	function
(	O
realm	array
->	O
args	pointer
,	O
"ignorecase"	pointer
,	O
0	int
)	O
?	O
grad_c_strcasecmp	function
:	O
strcmp	function
)	O
(	O
realm	array
->	O
realm	array
,	O
name	pointer
)	O
==	O
0	int
;	O
}	O
grad_realm_t	struct
*	O
grad_realm_lookup_name	function
(	O
char	O
*	O
realm	array
)	O
{	O
grad_realm_t	struct
*	O
p	pointer
;	O
grad_iterator_t	struct
*	O
itr	pointer
=	O
grad_iterator_create	function
(	O
realms	pointer
)	O
;	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
NULL	O
;	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	function
(	O
itr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
grad_iterator_next	function
(	O
itr	pointer
)	O
)	O
if	O
(	O
realm_match_name_p	function
(	O
p	pointer
,	O
realm	array
)	O
)	O
break	O
;	O
if	O
(	O
!	O
p	pointer
&&	O
strcmp	function
(	O
realm	array
,	O
"NOREALM"	pointer
)	O
)	O
{	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	function
(	O
itr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
grad_iterator_next	function
(	O
itr	pointer
)	O
)	O
if	O
(	O
strcmp	function
(	O
p	pointer
->	O
realm	array
,	O
"DEFAULT"	pointer
)	O
==	O
0	int
)	O
break	O
;	O
}	O
grad_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
int	O
grad_realm_verify_ip	function
(	O
grad_realm_t	struct
*	O
realm	array
,	O
grad_uint32_t	int
ip	pointer
)	O
{	O
grad_server_t	struct
*	O
serv	pointer
;	O
grad_iterator_t	struct
*	O
itr	pointer
;	O
if	O
(	O
!	O
realm	array
->	O
queue	pointer
||	O
(	O
itr	pointer
=	O
grad_iterator_create	function
(	O
realm	array
->	O
queue	pointer
->	O
servers	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
0	int
;	O
for	O
(	O
serv	pointer
=	O
grad_iterator_first	function
(	O
itr	pointer
)	O
;	O
serv	pointer
;	O
serv	pointer
=	O
grad_iterator_next	function
(	O
itr	pointer
)	O
)	O
if	O
(	O
serv	pointer
->	O
addr	int
==	O
ip	pointer
)	O
break	O
;	O
grad_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
serv	pointer
!=	O
NULL	O
;	O
}	O
grad_realm_t	struct
*	O
grad_realm_lookup_ip	function
(	O
grad_uint32_t	int
ip	pointer
)	O
{	O
grad_realm_t	struct
*	O
p	pointer
;	O
grad_iterator_t	struct
*	O
itr	pointer
;	O
if	O
(	O
!	O
(	O
itr	pointer
=	O
grad_iterator_create	function
(	O
realms	pointer
)	O
)	O
)	O
return	O
NULL	O
;	O
for	O
(	O
p	pointer
=	O
grad_iterator_first	function
(	O
itr	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
grad_iterator_next	function
(	O
itr	pointer
)	O
)	O
if	O
(	O
grad_realm_verify_ip	function
(	O
p	pointer
,	O
ip	pointer
)	O
)	O
break	O
;	O
grad_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
int	O
grad_realm_strip_p	function
(	O
grad_realm_t	struct
*	O
r	pointer
)	O
{	O
return	O
grad_envar_lookup_int	function
(	O
r	pointer
->	O
args	pointer
,	O
"strip"	pointer
,	O
1	int
)	O
;	O
}	O
size_t	long
grad_realm_get_quota	function
(	O
grad_realm_t	struct
*	O
r	pointer
)	O
{	O
return	O
grad_envar_lookup_int	function
(	O
r	pointer
->	O
args	pointer
,	O
"quota"	pointer
,	O
0	int
)	O
;	O
}	O
