static	O
POSITION	long
*	O
table	pointer
=	O
NULL	O
;	O
static	O
int	O
table_size	int
;	O
extern	O
int	O
sc_width	int
,	O
sc_height	int
;	O
public	O
POSITION	long
position	function
(	O
sindex	int
)	O
int	O
sindex	int
;	O
{	O
switch	O
(	O
sindex	int
)	O
{	O
case	O
BOTTOM	O
:	O
sindex	int
=	O
sc_height	int
-	O
2	int
;	O
break	O
;	O
case	O
BOTTOM_PLUS_ONE	O
:	O
sindex	int
=	O
sc_height	int
-	O
1	int
;	O
break	O
;	O
case	O
MIDDLE	O
:	O
sindex	int
=	O
(	O
sc_height	int
-	O
1	int
)	O
/	O
2	int
;	O
break	O
;	O
}	O
return	O
(	O
table	pointer
[	O
sindex	int
]	O
)	O
;	O
}	O
public	O
void	O
add_forw_pos	function
(	O
pos	long
)	O
POSITION	long
pos	long
;	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
sc_height	int
;	O
i	int
++	O
)	O
table	pointer
[	O
i	int
-	O
1	int
]	O
=	O
table	pointer
[	O
i	int
]	O
;	O
table	pointer
[	O
sc_height	int
-	O
1	int
]	O
=	O
pos	long
;	O
}	O
public	O
void	O
add_back_pos	function
(	O
pos	long
)	O
POSITION	long
pos	long
;	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
sc_height	int
-	O
1	int
;	O
i	int
>	O
0	int
;	O
i	int
--	O
)	O
table	pointer
[	O
i	int
]	O
=	O
table	pointer
[	O
i	int
-	O
1	int
]	O
;	O
table	pointer
[	O
0	int
]	O
=	O
pos	long
;	O
}	O
public	O
void	O
pos_clear	function
(	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sc_height	int
;	O
i	int
++	O
)	O
table	pointer
[	O
i	int
]	O
=	O
NULL_POSITION	O
;	O
}	O
public	O
void	O
pos_init	function
(	O
)	O
{	O
struct	O
scrpos	struct
scrpos	struct
;	O
if	O
(	O
sc_height	int
<=	O
table_size	int
)	O
return	O
;	O
if	O
(	O
table	pointer
!=	O
NULL	O
)	O
{	O
get_scrpos	function
(	O
&	O
scrpos	struct
,	O
TOP	O
)	O
;	O
free	function
(	O
(	O
char	O
*	O
)	O
table	pointer
)	O
;	O
}	O
else	O
scrpos	struct
.	O
pos	long
=	O
NULL_POSITION	O
;	O
table	pointer
=	O
(	O
POSITION	long
*	O
)	O
ecalloc	function
(	O
sc_height	int
,	O
sizeof	O
(	O
POSITION	long
)	O
)	O
;	O
table_size	int
=	O
sc_height	int
;	O
pos_clear	function
(	O
)	O
;	O
if	O
(	O
scrpos	struct
.	O
pos	long
!=	O
NULL_POSITION	O
)	O
table	pointer
[	O
scrpos	struct
.	O
ln	int
-	O
1	int
]	O
=	O
scrpos	struct
.	O
pos	long
;	O
}	O
public	O
int	O
onscreen	function
(	O
pos	long
)	O
POSITION	long
pos	long
;	O
{	O
int	O
i	int
;	O
if	O
(	O
pos	long
<	O
table	pointer
[	O
0	int
]	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
sc_height	int
;	O
i	int
++	O
)	O
if	O
(	O
pos	long
<	O
table	pointer
[	O
i	int
]	O
)	O
return	O
(	O
i	int
-	O
1	int
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
public	O
int	O
empty_screen	function
(	O
)	O
{	O
return	O
(	O
empty_lines	function
(	O
0	int
,	O
sc_height	int
-	O
1	int
)	O
)	O
;	O
}	O
public	O
int	O
empty_lines	function
(	O
s	pointer
,	O
e	int
)	O
int	O
s	pointer
;	O
int	O
e	int
;	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
s	pointer
;	O
i	int
<=	O
e	int
;	O
i	int
++	O
)	O
if	O
(	O
table	pointer
[	O
i	int
]	O
!=	O
NULL_POSITION	O
&&	O
table	pointer
[	O
i	int
]	O
!=	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
public	O
void	O
get_scrpos	function
(	O
scrpos	struct
,	O
where	int
)	O
struct	O
scrpos	struct
*	O
scrpos	struct
;	O
int	O
where	int
;	O
{	O
int	O
i	int
;	O
int	O
dir	int
;	O
int	O
last	long
;	O
switch	O
(	O
where	int
)	O
{	O
case	O
TOP	O
:	O
i	int
=	O
0	int
;	O
dir	int
=	O
+	O
1	int
;	O
last	long
=	O
sc_height	int
-	O
2	int
;	O
break	O
;	O
default	O
:	O
i	int
=	O
sc_height	int
-	O
2	int
;	O
dir	int
=	O
-	O
1	int
;	O
last	long
=	O
0	int
;	O
break	O
;	O
}	O
for	O
(	O
;	O
;	O
i	int
+=	O
dir	int
)	O
{	O
if	O
(	O
table	pointer
[	O
i	int
]	O
!=	O
NULL_POSITION	O
)	O
{	O
scrpos	struct
->	O
ln	int
=	O
i	int
+	O
1	int
;	O
scrpos	struct
->	O
pos	long
=	O
table	pointer
[	O
i	int
]	O
;	O
return	O
;	O
}	O
if	O
(	O
i	int
==	O
last	long
)	O
break	O
;	O
}	O
scrpos	struct
->	O
pos	long
=	O
NULL_POSITION	O
;	O
}	O
public	O
int	O
sindex_from_sline	function
(	O
sline	int
)	O
int	O
sline	int
;	O
{	O
if	O
(	O
sline	int
<	O
0	int
)	O
sline	int
+=	O
sc_height	int
;	O
if	O
(	O
sline	int
<=	O
0	int
)	O
sline	int
=	O
1	int
;	O
if	O
(	O
sline	int
>	O
sc_height	int
)	O
sline	int
=	O
sc_height	int
;	O
return	O
(	O
sline	int
-	O
1	int
)	O
;	O
}	O
