mach_port_t	O
proc	int
;	O
int	O
pause_startup	int
=	O
0	int
;	O
void	O
reap	function
(	O
pid_t	int
waitfor	int
)	O
{	O
pid_t	int
pid	int
;	O
int	O
status	int
;	O
while	O
(	O
1	int
)	O
{	O
pid	int
=	O
waitpid	function
(	O
WAIT_ANY	O
,	O
&	O
status	int
,	O
WUNTRACED	O
|	O
(	O
waitfor	int
?	O
0	int
:	O
WNOHANG	O
)	O
)	O
;	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
!=	O
ECHILD	O
&&	O
errno	O
!=	O
EWOULDBLOCK	O
)	O
error	function
(	O
0	int
,	O
errno	O
,	O
"waitpid"	pointer
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
WIFEXITED	function
(	O
status	int
)	O
)	O
printf	function
(	O
"PID %d exit status %d\n"	pointer
,	O
pid	int
,	O
WEXITSTATUS	function
(	O
status	int
)	O
)	O
;	O
else	O
if	O
(	O
WIFSIGNALED	function
(	O
status	int
)	O
)	O
printf	function
(	O
"PID %d %s\n"	pointer
,	O
pid	int
,	O
strsignal	function
(	O
WTERMSIG	function
(	O
status	int
)	O
)	O
)	O
;	O
else	O
if	O
(	O
WIFSTOPPED	function
(	O
status	int
)	O
)	O
printf	function
(	O
"PID %d stopped: %s\n"	pointer
,	O
pid	int
,	O
strsignal	function
(	O
WSTOPSIG	function
(	O
status	int
)	O
)	O
)	O
;	O
else	O
printf	function
(	O
"PID %d bizarre status %#x\n"	pointer
,	O
pid	int
,	O
status	int
)	O
;	O
if	O
(	O
pid	int
==	O
waitfor	int
)	O
waitfor	int
=	O
0	int
;	O
}	O
}	O
pid_t	int
run	function
(	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
fd0	int
,	O
int	O
fd1	int
)	O
{	O
file_t	O
file	O
;	O
char	O
*	O
program	pointer
;	O
error_t	O
err	O
;	O
if	O
(	O
strchr	O
(	O
argv	pointer
[	O
0	int
]	O
,	O
'/'	O
)	O
!=	O
NULL	O
)	O
program	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
else	O
{	O
size_t	long
len	long
=	O
strlen	O
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
const	O
char	O
bin	array
[	O
]	O
=	O
"/bin/"	pointer
;	O
program	pointer
=	O
alloca	O
(	O
sizeof	O
bin	array
+	O
len	long
)	O
;	O
memcpy	O
(	O
program	pointer
,	O
bin	array
,	O
sizeof	O
bin	array
-	O
1	int
)	O
;	O
memcpy	O
(	O
&	O
program	pointer
[	O
sizeof	O
bin	array
-	O
1	int
]	O
,	O
argv	pointer
[	O
0	int
]	O
,	O
len	long
+	O
1	int
)	O
;	O
}	O
file	O
=	O
file_name_lookup	function
(	O
program	pointer
,	O
O_EXEC	O
,	O
0	int
)	O
;	O
if	O
(	O
file	O
==	O
MACH_PORT_NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"%s"	pointer
,	O
program	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
task_t	O
task	O
;	O
pid_t	int
pid	int
;	O
err	O
=	O
task_create	function
(	O
mach_task_self	function
(	O
)	O
,	O
0	int
,	O
&	O
task	O
)	O
;	O
if	O
(	O
err	O
)	O
{	O
error	function
(	O
0	int
,	O
err	O
,	O
"task_create"	pointer
)	O
;	O
pid	int
=	O
-	O
1	int
;	O
}	O
else	O
{	O
int	O
save0	int
=	O
-	O
1	int
;	O
int	O
save1	int
;	O
inline	O
int	O
movefd	function
(	O
int	O
from	int
,	O
int	O
to	int
,	O
int	O
*	O
save	pointer
)	O
{	O
if	O
(	O
from	int
==	O
to	int
)	O
return	O
0	int
;	O
*	O
save	pointer
=	O
dup	O
(	O
to	int
)	O
;	O
if	O
(	O
*	O
save	pointer
<	O
0	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"dup"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
dup2	O
(	O
from	int
,	O
to	int
)	O
!=	O
to	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"dup2"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
close	pointer
(	O
from	int
)	O
;	O
return	O
0	int
;	O
}	O
inline	O
int	O
restorefd	function
(	O
int	O
from	int
,	O
int	O
to	int
,	O
int	O
*	O
save	pointer
)	O
{	O
if	O
(	O
from	int
==	O
to	int
)	O
return	O
0	int
;	O
if	O
(	O
dup2	O
(	O
*	O
save	pointer
,	O
to	int
)	O
!=	O
to	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"dup2"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
close	pointer
(	O
*	O
save	pointer
)	O
;	O
return	O
0	int
;	O
}	O
pid	int
=	O
task2pid	function
(	O
task	O
)	O
;	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"task2pid"	pointer
)	O
;	O
pid	int
=	O
0	int
;	O
}	O
err	O
=	O
proc_child	function
(	O
proc	int
,	O
task	O
)	O
;	O
if	O
(	O
err	O
)	O
error	function
(	O
0	int
,	O
err	O
,	O
"proc_child"	pointer
)	O
;	O
if	O
(	O
pause_startup	int
)	O
{	O
printf	function
(	O
"Pausing (child PID %d)..."	pointer
,	O
pid	int
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
getchar	function
(	O
)	O
;	O
}	O
if	O
(	O
movefd	function
(	O
fd0	int
,	O
0	int
,	O
&	O
save0	int
)	O
||	O
movefd	function
(	O
fd1	int
,	O
1	int
,	O
&	O
save1	int
)	O
)	O
return	O
-	O
1	int
;	O
err	O
=	O
_hurd_exec	function
(	O
task	O
,	O
file	O
,	O
argv	pointer
,	O
environ	O
)	O
;	O
if	O
(	O
restorefd	function
(	O
fd0	int
,	O
0	int
,	O
&	O
save0	int
)	O
||	O
restorefd	function
(	O
fd1	int
,	O
1	int
,	O
&	O
save1	int
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
err	O
)	O
{	O
error	function
(	O
0	int
,	O
err	O
,	O
"_hurd_exec"	pointer
)	O
;	O
err	O
=	O
task_terminate	function
(	O
task	O
)	O
;	O
if	O
(	O
err	O
)	O
error	function
(	O
0	int
,	O
err	O
,	O
"task_terminate"	pointer
)	O
;	O
}	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
task	O
)	O
;	O
}	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
file	O
)	O
;	O
errno	O
=	O
err	O
;	O
return	O
pid	int
;	O
}	O
}	O
void	O
command	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
pid_t	int
pid	int
;	O
int	O
bg	int
;	O
int	O
i	int
,	O
start	int
;	O
int	O
fds	array
[	O
2	int
]	O
=	O
{	O
0	int
,	O
1	int
}	O
;	O
bg	int
=	O
!	O
strcmp	O
(	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
,	O
"&"	pointer
)	O
;	O
if	O
(	O
bg	int
)	O
argv	pointer
[	O
--	O
argc	int
]	O
=	O
NULL	O
;	O
start	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
++	O
i	int
)	O
if	O
(	O
!	O
strcmp	O
(	O
argv	pointer
[	O
i	int
]	O
,	O
"|"	pointer
)	O
)	O
{	O
int	O
fd0	int
=	O
fds	array
[	O
0	int
]	O
;	O
argv	pointer
[	O
i	int
]	O
=	O
NULL	O
;	O
if	O
(	O
pipe	function
(	O
fds	array
)	O
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"pipe"	pointer
)	O
;	O
return	O
;	O
}	O
pid	int
=	O
run	function
(	O
argv	pointer
+	O
start	int
,	O
fd0	int
,	O
fds	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
pid	int
<	O
0	int
)	O
return	O
;	O
start	int
=	O
i	int
+	O
1	int
;	O
}	O
pid	int
=	O
run	function
(	O
argv	pointer
+	O
start	int
,	O
fds	array
[	O
0	int
]	O
,	O
1	int
)	O
;	O
if	O
(	O
fds	array
[	O
0	int
]	O
!=	O
0	int
)	O
close	pointer
(	O
fds	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
fds	array
[	O
1	int
]	O
!=	O
1	int
)	O
close	pointer
(	O
fds	array
[	O
1	int
]	O
)	O
;	O
reap	function
(	O
bg	int
?	O
0	int
:	O
pid	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
char	O
*	O
linebuf	pointer
=	O
NULL	O
;	O
size_t	long
linebufsize	long
=	O
0	int
;	O
proc	int
=	O
getproc	function
(	O
)	O
;	O
assert	function
(	O
proc	int
)	O
;	O
exec_init	function
(	O
getdport	function
(	O
0	int
)	O
,	O
getauth	function
(	O
)	O
,	O
MACH_PORT_NULL	O
,	O
MACH_MSG_TYPE_COPY_SEND	O
)	O
;	O
if	O
(	O
(	O
fcntl	function
(	O
0	int
,	O
F_GETFL	O
)	O
&	O
O_READ	O
)	O
==	O
0	int
)	O
{	O
int	O
ttyd	int
=	O
open	function
(	O
"/dev/tty"	pointer
,	O
O_RDWR	O
|	O
O_IGNORE_CTTY	O
)	O
;	O
if	O
(	O
ttyd	int
>=	O
0	int
)	O
{	O
fcntl	function
(	O
ttyd	int
,	O
F_SETFD	O
,	O
FD_CLOEXEC	O
)	O
;	O
stdin	pointer
=	O
fdopen	function
(	O
ttyd	int
,	O
"r"	pointer
)	O
;	O
stdout	pointer
=	O
stderr	pointer
=	O
fdopen	function
(	O
ttyd	int
,	O
"w"	pointer
)	O
;	O
}	O
}	O
atexit	function
(	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
)	O
)	O
&	O
sync	function
)	O
;	O
while	O
(	O
1	int
)	O
{	O
ssize_t	long
n	long
;	O
sync	function
(	O
)	O
;	O
printf	function
(	O
"# "	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
n	long
=	O
getline	function
(	O
&	O
linebuf	pointer
,	O
&	O
linebufsize	long
,	O
stdin	pointer
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
feof	function
(	O
stdin	pointer
)	O
)	O
return	O
0	int
;	O
error	function
(	O
0	int
,	O
errno	O
,	O
"getline"	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
linebuf	pointer
[	O
n	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
linebuf	pointer
[	O
--	O
n	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
n	long
>	O
0	int
)	O
{	O
char	O
*	O
argv	pointer
[	O
(	O
n	long
+	O
1	int
)	O
/	O
2	int
+	O
1	int
]	O
;	O
int	O
argc	int
;	O
char	O
*	O
line	pointer
,	O
*	O
p	pointer
;	O
line	pointer
=	O
linebuf	pointer
;	O
argc	int
=	O
0	int
;	O
while	O
(	O
(	O
p	pointer
=	O
strsep	function
(	O
&	O
line	pointer
,	O
" \t\n\f\v"	pointer
)	O
)	O
!=	O
NULL	O
)	O
argv	pointer
[	O
argc	int
++	O
]	O
=	O
p	pointer
;	O
argv	pointer
[	O
argc	int
]	O
=	O
NULL	O
;	O
if	O
(	O
!	O
strcmp	O
(	O
argv	pointer
[	O
0	int
]	O
,	O
"exit"	pointer
)	O
)	O
{	O
reap	function
(	O
0	int
)	O
;	O
exit	O
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	O
(	O
argv	pointer
[	O
0	int
]	O
,	O
"pause"	pointer
)	O
)	O
pause_startup	int
=	O
1	int
;	O
else	O
if	O
(	O
!	O
strcmp	O
(	O
argv	pointer
[	O
0	int
]	O
,	O
"nopause"	pointer
)	O
)	O
pause_startup	int
=	O
0	int
;	O
else	O
if	O
(	O
!	O
strcmp	O
(	O
argv	pointer
[	O
0	int
]	O
,	O
"kill"	pointer
)	O
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: kill PID ...\n"	pointer
)	O
;	O
else	O
{	O
int	O
pid	int
;	O
task_t	O
task	O
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
pid	int
=	O
atoi	function
(	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
printf	function
(	O
"Killing pid %d\n"	pointer
,	O
pid	int
)	O
;	O
if	O
(	O
pid	int
)	O
{	O
proc_pid2task	function
(	O
proc	int
,	O
pid	int
,	O
&	O
task	O
)	O
;	O
task_terminate	function
(	O
task	O
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
task	O
)	O
;	O
}	O
}	O
}	O
}	O
else	O
if	O
(	O
!	O
strcmp	O
(	O
argv	pointer
[	O
0	int
]	O
,	O
"cd"	pointer
)	O
)	O
{	O
if	O
(	O
argc	int
!=	O
2	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: cd DIRECTORY\n"	pointer
)	O
;	O
else	O
if	O
(	O
chdir	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
)	O
error	function
(	O
0	int
,	O
errno	O
,	O
"chdir"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	O
(	O
argv	pointer
[	O
0	int
]	O
,	O
"exec"	pointer
)	O
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: exec PROGRAM [ARGS...]\n"	pointer
)	O
;	O
else	O
{	O
char	O
*	O
program	pointer
;	O
if	O
(	O
strchr	O
(	O
argv	pointer
[	O
1	int
]	O
,	O
'/'	O
)	O
!=	O
NULL	O
)	O
program	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
else	O
{	O
size_t	long
len	long
=	O
strlen	O
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
const	O
char	O
bin	array
[	O
]	O
=	O
"/bin/"	pointer
;	O
program	pointer
=	O
alloca	O
(	O
sizeof	O
bin	array
+	O
len	long
)	O
;	O
memcpy	O
(	O
program	pointer
,	O
bin	array
,	O
sizeof	O
bin	array
-	O
1	int
)	O
;	O
memcpy	O
(	O
&	O
program	pointer
[	O
sizeof	O
bin	array
-	O
1	int
]	O
,	O
argv	pointer
[	O
1	int
]	O
,	O
len	long
+	O
1	int
)	O
;	O
}	O
if	O
(	O
execv	function
(	O
program	pointer
,	O
&	O
argv	pointer
[	O
1	int
]	O
)	O
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"execv (%s) returned 0!\n"	pointer
,	O
program	pointer
)	O
;	O
else	O
error	function
(	O
0	int
,	O
errno	O
,	O
"execv"	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
strcmp	O
(	O
argv	pointer
[	O
0	int
]	O
,	O
"setenv"	pointer
)	O
)	O
{	O
if	O
(	O
argc	int
!=	O
3	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: setenv VAR VALUE\n"	pointer
)	O
;	O
else	O
if	O
(	O
setenv	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
argv	pointer
[	O
2	int
]	O
,	O
1	int
)	O
)	O
error	function
(	O
0	int
,	O
errno	O
,	O
"setenv"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	O
(	O
argv	pointer
[	O
0	int
]	O
,	O
"fork"	pointer
)	O
)	O
{	O
pid_t	int
pid	int
=	O
fork	function
(	O
)	O
;	O
switch	O
(	O
pid	int
)	O
{	O
case	O
-	O
1	int
:	O
error	function
(	O
0	int
,	O
errno	O
,	O
"fork"	pointer
)	O
;	O
break	O
;	O
case	O
0	int
:	O
printf	function
(	O
"I am the child, PID %d.\n"	pointer
,	O
(	O
int	O
)	O
getpid	function
(	O
)	O
)	O
;	O
break	O
;	O
default	O
:	O
printf	function
(	O
"I am the parent of child with PID %d.\n"	pointer
,	O
pid	int
)	O
;	O
reap	function
(	O
argc	int
==	O
2	int
&&	O
!	O
strcmp	O
(	O
argv	pointer
[	O
1	int
]	O
,	O
"&"	pointer
)	O
?	O
0	int
:	O
pid	int
)	O
;	O
break	O
;	O
}	O
}	O
else	O
command	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
}	O
reap	function
(	O
0	int
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
}	O
}	O
