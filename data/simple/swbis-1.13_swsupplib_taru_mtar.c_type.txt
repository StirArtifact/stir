char	O
*	O
taru_dup_tar_linkname	function
(	O
void	O
*	O
pt	pointer
)	O
{	O
char	O
*	O
tar_hdr	pointer
=	O
(	O
char	O
*	O
)	O
pt	pointer
;	O
char	O
*	O
hold_tar_linkname	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
101	int
)	O
;	O
strncpy	function
(	O
hold_tar_linkname	pointer
,	O
tar_hdr	pointer
+	O
157	int
,	O
TARLINKNAMESIZE	int
)	O
;	O
hold_tar_linkname	pointer
[	O
TARLINKNAMESIZE	int
]	O
=	O
'\0'	O
;	O
return	O
hold_tar_linkname	pointer
;	O
}	O
static	O
char	O
*	O
stash_tar_filename	function
(	O
char	O
*	O
prefix	pointer
,	O
char	O
*	O
filename	pointer
)	O
{	O
char	O
*	O
hold_tar_filename	pointer
;	O
static	O
STROB	struct
*	O
htf	pointer
;	O
if	O
(	O
!	O
htf	pointer
)	O
htf	pointer
=	O
strob_open	function
(	O
512	int
)	O
;	O
hold_tar_filename	pointer
=	O
strob_str	function
(	O
htf	pointer
)	O
;	O
if	O
(	O
prefix	pointer
==	O
NULL	O
||	O
*	O
prefix	pointer
==	O
'\0'	O
)	O
{	O
strncpy	function
(	O
hold_tar_filename	pointer
,	O
filename	pointer
,	O
TARNAMESIZE	int
)	O
;	O
hold_tar_filename	pointer
[	O
TARNAMESIZE	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
strncpy	function
(	O
hold_tar_filename	pointer
,	O
prefix	pointer
,	O
TARPREFIXSIZE	int
)	O
;	O
hold_tar_filename	pointer
[	O
TARPREFIXSIZE	int
]	O
=	O
'\0'	O
;	O
strcat	function
(	O
hold_tar_filename	pointer
,	O
"/"	pointer
)	O
;	O
strncat	function
(	O
hold_tar_filename	pointer
,	O
filename	pointer
,	O
TARNAMESIZE	int
)	O
;	O
hold_tar_filename	pointer
[	O
TARPREFIXSIZE	int
+	O
TARNAMESIZE	int
]	O
=	O
'\0'	O
;	O
}	O
return	O
hold_tar_filename	pointer
;	O
}	O
char	O
*	O
taru_dup_tar_name	function
(	O
void	O
*	O
pt	pointer
)	O
{	O
char	O
*	O
tar_hdr	pointer
=	O
(	O
char	O
*	O
)	O
pt	pointer
;	O
if	O
(	O
strncmp	function
(	O
tar_hdr	pointer
+	O
257	int
,	O
TMAGIC	pointer
,	O
5	int
)	O
)	O
return	O
stash_tar_filename	function
(	O
NULL	O
,	O
tar_hdr	pointer
)	O
;	O
else	O
return	O
stash_tar_filename	function
(	O
tar_hdr	pointer
+	O
345	int
,	O
tar_hdr	pointer
)	O
;	O
}	O
int	O
taru_is_tar_linkname_too_long	function
(	O
char	O
*	O
name	pointer
,	O
int	O
tarheaderflags	int
,	O
int	O
*	O
p_do_gnu_long_link	pointer
)	O
{	O
int	O
too_long	int
=	O
1	int
;	O
int	O
do_gnu_longlinks	int
=	O
0	int
;	O
int	O
do_exthdr	int
=	O
0	int
;	O
do_gnu_longlinks	int
=	O
tarheaderflags	int
&	O
TARU_TAR_GNU_LONG_LINKS	O
;	O
do_exthdr	int
=	O
tarheaderflags	int
&	O
TARU_TAR_PAXEXTHDR	O
;	O
if	O
(	O
p_do_gnu_long_link	pointer
)	O
*	O
p_do_gnu_long_link	pointer
=	O
0	int
;	O
if	O
(	O
strlen	function
(	O
name	pointer
)	O
<=	O
TARLINKNAMESIZE	int
)	O
{	O
too_long	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
strlen	function
(	O
name	pointer
)	O
>	O
TARLINKNAMESIZE	int
)	O
{	O
if	O
(	O
do_gnu_longlinks	int
)	O
{	O
if	O
(	O
strlen	function
(	O
name	pointer
)	O
<	O
TARRECORDSIZE	int
)	O
{	O
too_long	int
=	O
0	int
;	O
if	O
(	O
p_do_gnu_long_link	pointer
)	O
*	O
p_do_gnu_long_link	pointer
=	O
1	int
;	O
}	O
else	O
{	O
;	O
}	O
}	O
else	O
if	O
(	O
do_exthdr	int
)	O
{	O
too_long	int
=	O
0	int
;	O
}	O
else	O
{	O
;	O
}	O
}	O
else	O
{	O
;	O
}	O
return	O
too_long	int
;	O
}	O
int	O
taru_is_tar_filename_too_long	function
(	O
char	O
*	O
name	pointer
,	O
int	O
tarheaderflags	int
,	O
int	O
*	O
p_do_gnu_long_link	pointer
,	O
int	O
is_dir	int
)	O
{	O
int	O
retval	int
=	O
1	int
;	O
int	O
whole_name_len	int
;	O
char	O
*	O
p	pointer
;	O
int	O
did_squash	int
=	O
0	int
;	O
int	O
tarnamesize	int
=	O
TARNAMESIZE	int
;	O
int	O
do_gnu_longlinks	int
=	O
0	int
;	O
int	O
do_exthdr	int
=	O
0	int
;	O
if	O
(	O
strlen	function
(	O
name	pointer
)	O
>	O
1	int
&&	O
name	pointer
[	O
strlen	function
(	O
name	pointer
)	O
-	O
1	int
]	O
==	O
'/'	O
)	O
{	O
name	pointer
[	O
strlen	function
(	O
name	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
did_squash	int
=	O
1	int
;	O
}	O
do_gnu_longlinks	int
=	O
tarheaderflags	int
&	O
TARU_TAR_GNU_LONG_LINKS	O
;	O
do_exthdr	int
=	O
tarheaderflags	int
&	O
TARU_TAR_PAXEXTHDR	O
;	O
if	O
(	O
(	O
do_gnu_longlinks	int
&&	O
(	O
tarheaderflags	int
&	O
TARU_TAR_NAMESIZE_99	O
)	O
)	O
||	O
(	O
(	O
tarheaderflags	int
&	O
TARU_TAR_GNU_OLDGNUTAR	O
)	O
)	O
)	O
{	O
tarnamesize	int
=	O
TARNAMESIZE	int
-	O
1	int
;	O
}	O
else	O
{	O
tarnamesize	int
=	O
TARNAMESIZE	int
;	O
}	O
if	O
(	O
is_dir	int
)	O
tarnamesize	int
--	O
;	O
if	O
(	O
p_do_gnu_long_link	pointer
)	O
*	O
p_do_gnu_long_link	pointer
=	O
0	int
;	O
whole_name_len	int
=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
whole_name_len	int
<	O
tarnamesize	int
)	O
{	O
retval	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
(	O
whole_name_len	int
>	O
(	O
tarnamesize	int
+	O
TARPREFIXSIZE	int
+	O
1	int
)	O
)	O
&&	O
(	O
do_gnu_longlinks	int
==	O
0	int
&&	O
do_exthdr	int
==	O
0	int
)	O
)	O
{	O
retval	int
=	O
1	int
;	O
}	O
else	O
{	O
char	O
*	O
oldp	pointer
;	O
char	O
*	O
start	pointer
=	O
name	pointer
;	O
p	pointer
=	O
oldp	pointer
=	O
start	pointer
;	O
while	O
(	O
*	O
p	pointer
!=	O
'\0'	O
)	O
{	O
while	O
(	O
*	O
p	pointer
!=	O
'/'	O
&&	O
*	O
p	pointer
!=	O
'\0'	O
)	O
++	O
p	pointer
;	O
if	O
(	O
*	O
p	pointer
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
(	O
(	O
p	pointer
-	O
start	pointer
)	O
<	O
TARPREFIXSIZE	int
)	O
&&	O
(	O
(	O
(	O
int	O
)	O
(	O
strlen	function
(	O
p	pointer
)	O
-	O
1	int
)	O
<=	O
tarnamesize	int
)	O
&&	O
p	pointer
!=	O
start	pointer
)	O
)	O
{	O
retval	int
=	O
0	int
;	O
break	O
;	O
}	O
else	O
{	O
p	pointer
++	O
;	O
}	O
}	O
if	O
(	O
*	O
p	pointer
==	O
'\0'	O
)	O
retval	int
=	O
1	int
;	O
}	O
if	O
(	O
retval	int
)	O
{	O
if	O
(	O
do_gnu_longlinks	int
)	O
{	O
if	O
(	O
whole_name_len	int
>=	O
512	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"tar filename too long, location = 3\n"	pointer
)	O
;	O
retval	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
whole_name_len	int
>	O
tarnamesize	int
)	O
{	O
if	O
(	O
p_do_gnu_long_link	pointer
)	O
*	O
p_do_gnu_long_link	pointer
=	O
1	int
;	O
retval	int
=	O
0	int
;	O
}	O
else	O
{	O
retval	int
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
do_exthdr	int
)	O
{	O
if	O
(	O
p_do_gnu_long_link	pointer
)	O
*	O
p_do_gnu_long_link	pointer
=	O
0	int
;	O
retval	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
did_squash	int
)	O
name	pointer
[	O
strlen	function
(	O
name	pointer
)	O
]	O
=	O
'/'	O
;	O
return	O
retval	int
;	O
}	O
int	O
taru_filehdr2statbuf	function
(	O
struct	O
stat	struct
*	O
statbuf	pointer
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
)	O
{	O
gid_t	int
gid	int
;	O
uid_t	int
uid	int
;	O
time_t	long
tim	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
statbuf	pointer
->	O
st_mode	int
=	O
(	O
mode_t	int
)	O
(	O
file_hdr	pointer
->	O
c_mode	short
)	O
;	O
statbuf	pointer
->	O
st_ino	long
=	O
(	O
ino_t	long
)	O
(	O
file_hdr	pointer
->	O
c_ino	short
)	O
;	O
statbuf	pointer
->	O
st_dev	long
=	O
(	O
dev_t	long
)	O
(	O
makedev	O
(	O
file_hdr	pointer
->	O
c_dev_maj	long
,	O
file_hdr	pointer
->	O
c_dev_min	long
)	O
)	O
;	O
statbuf	pointer
->	O
st_rdev	long
=	O
(	O
dev_t	long
)	O
(	O
makedev	O
(	O
file_hdr	pointer
->	O
c_rdev_maj	long
,	O
file_hdr	pointer
->	O
c_rdev_min	long
)	O
)	O
;	O
statbuf	pointer
->	O
st_nlink	long
=	O
(	O
nlink_t	long
)	O
(	O
file_hdr	pointer
->	O
c_nlink	short
)	O
;	O
statbuf	pointer
->	O
st_uid	int
=	O
(	O
uid_t	int
)	O
(	O
file_hdr	pointer
->	O
c_uid	short
)	O
;	O
statbuf	pointer
->	O
st_gid	int
=	O
(	O
gid_t	int
)	O
(	O
file_hdr	pointer
->	O
c_gid	short
)	O
;	O
statbuf	pointer
->	O
st_size	long
=	O
(	O
off_t	long
)	O
taru_hdr_get_filesize	function
(	O
file_hdr	pointer
)	O
;	O
statbuf	pointer
->	O
st_atime	O
=	O
(	O
time_t	long
)	O
(	O
tim	long
)	O
;	O
statbuf	pointer
->	O
st_ctime	O
=	O
(	O
time_t	long
)	O
(	O
tim	long
)	O
;	O
statbuf	pointer
->	O
st_mtime	O
=	O
(	O
time_t	long
)	O
(	O
file_hdr	pointer
->	O
c_mtime	long
)	O
;	O
statbuf	pointer
->	O
st_blksize	long
=	O
(	O
long	O
)	O
(	O
512	int
)	O
;	O
statbuf	pointer
->	O
st_blocks	long
=	O
(	O
long	O
)	O
(	O
(	O
statbuf	pointer
->	O
st_size	long
)	O
/	O
512	int
+	O
1	int
)	O
;	O
if	O
(	O
file_hdr	pointer
->	O
c_cu	char
==	O
TARU_C_BY_UNAME	int
)	O
{	O
if	O
(	O
taru_get_gid_by_name	function
(	O
ahsStaticGetTarGroupname	function
(	O
file_hdr	pointer
)	O
,	O
&	O
gid	int
)	O
==	O
0	int
)	O
{	O
statbuf	pointer
->	O
st_gid	int
=	O
(	O
gid	int
)	O
;	O
}	O
}	O
if	O
(	O
file_hdr	pointer
->	O
c_cg	char
==	O
TARU_C_BY_GNAME	int
)	O
{	O
if	O
(	O
taru_get_uid_by_name	function
(	O
ahsStaticGetTarUsername	function
(	O
file_hdr	pointer
)	O
,	O
&	O
uid	int
)	O
==	O
0	int
)	O
{	O
statbuf	pointer
->	O
st_uid	int
=	O
(	O
uid	int
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
taru_filehdr2filehdr	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr_dst	pointer
,	O
struct	O
new_cpio_header	struct
*	O
file_hdr_src	pointer
)	O
{	O
file_hdr_dst	pointer
->	O
c_magic	short
=	O
file_hdr_src	pointer
->	O
c_magic	short
;	O
file_hdr_dst	pointer
->	O
c_ino	short
=	O
file_hdr_src	pointer
->	O
c_ino	short
;	O
file_hdr_dst	pointer
->	O
c_mode	short
=	O
file_hdr_src	pointer
->	O
c_mode	short
;	O
file_hdr_dst	pointer
->	O
c_uid	short
=	O
file_hdr_src	pointer
->	O
c_uid	short
;	O
file_hdr_dst	pointer
->	O
c_gid	short
=	O
file_hdr_src	pointer
->	O
c_gid	short
;	O
file_hdr_dst	pointer
->	O
c_nlink	short
=	O
file_hdr_src	pointer
->	O
c_nlink	short
;	O
file_hdr_dst	pointer
->	O
c_mtime	long
=	O
file_hdr_src	pointer
->	O
c_mtime	long
;	O
file_hdr_dst	pointer
->	O
c_ctime	long
=	O
file_hdr_src	pointer
->	O
c_ctime	long
;	O
file_hdr_dst	pointer
->	O
c_ctime_nsec	long
=	O
file_hdr_src	pointer
->	O
c_ctime_nsec	long
;	O
file_hdr_dst	pointer
->	O
c_atime	long
=	O
file_hdr_src	pointer
->	O
c_atime	long
;	O
file_hdr_dst	pointer
->	O
c_atime_nsec	long
=	O
file_hdr_src	pointer
->	O
c_atime_nsec	long
;	O
file_hdr_dst	pointer
->	O
c_filesize	long
=	O
file_hdr_src	pointer
->	O
c_filesize	long
;	O
file_hdr_dst	pointer
->	O
c_dev_maj	long
=	O
file_hdr_src	pointer
->	O
c_dev_maj	long
;	O
file_hdr_dst	pointer
->	O
c_dev_min	long
=	O
file_hdr_src	pointer
->	O
c_dev_min	long
;	O
file_hdr_dst	pointer
->	O
c_rdev_maj	long
=	O
file_hdr_src	pointer
->	O
c_rdev_maj	long
;	O
file_hdr_dst	pointer
->	O
c_rdev_min	long
=	O
file_hdr_src	pointer
->	O
c_rdev_min	long
;	O
file_hdr_dst	pointer
->	O
c_namesize	short
=	O
file_hdr_src	pointer
->	O
c_namesize	short
;	O
file_hdr_dst	pointer
->	O
c_chksum	long
=	O
file_hdr_src	pointer
->	O
c_chksum	long
;	O
file_hdr_dst	pointer
->	O
c_cu	char
=	O
file_hdr_src	pointer
->	O
c_cu	char
;	O
file_hdr_dst	pointer
->	O
c_cg	char
=	O
file_hdr_src	pointer
->	O
c_cg	char
;	O
file_hdr_dst	pointer
->	O
c_is_tar_lnktype	char
=	O
file_hdr_src	pointer
->	O
c_is_tar_lnktype	char
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr_dst	pointer
,	O
ahsStaticGetTarLinkname	function
(	O
file_hdr_src	pointer
)	O
)	O
;	O
ahsStaticSetTarFilename	function
(	O
file_hdr_dst	pointer
,	O
ahsStaticGetTarFilename	function
(	O
file_hdr_src	pointer
)	O
)	O
;	O
ahsStaticSetTarUsername	function
(	O
file_hdr_dst	pointer
,	O
ahsStaticGetTarUsername	function
(	O
file_hdr_src	pointer
)	O
)	O
;	O
ahsStaticSetTarGroupname	function
(	O
file_hdr_dst	pointer
,	O
ahsStaticGetTarGroupname	function
(	O
file_hdr_src	pointer
)	O
)	O
;	O
if	O
(	O
file_hdr_src	pointer
->	O
extattlistM	pointer
)	O
(	O
(	O
CPLOB	struct
*	O
)	O
(	O
file_hdr_src	pointer
->	O
extattlistM	pointer
)	O
)	O
->	O
refcountM	int
++	O
;	O
file_hdr_dst	pointer
->	O
extattlistM	pointer
=	O
file_hdr_src	pointer
->	O
extattlistM	pointer
;	O
return	O
0	int
;	O
}	O
int	O
taru_statbuf2filehdr	function
(	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
,	O
struct	O
stat	struct
*	O
statbuf	pointer
,	O
char	O
*	O
sourcefilename	pointer
,	O
char	O
*	O
filename	pointer
,	O
char	O
*	O
linkname	pointer
)	O
{	O
char	O
symbuf	array
[	O
1024	int
]	O
;	O
int	O
amount	long
;	O
file_hdr	pointer
->	O
c_mode	short
=	O
(	O
statbuf	pointer
->	O
st_mode	int
&	O
07777	int
)	O
;	O
if	O
(	O
!	O
sourcefilename	pointer
)	O
{	O
sourcefilename	pointer
=	O
filename	pointer
;	O
}	O
if	O
(	O
S_ISREG	O
(	O
statbuf	pointer
->	O
st_mode	int
)	O
)	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFREG	int
;	O
else	O
if	O
(	O
S_ISDIR	O
(	O
statbuf	pointer
->	O
st_mode	int
)	O
)	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFDIR	int
;	O
else	O
if	O
(	O
S_ISBLK	O
(	O
statbuf	pointer
->	O
st_mode	int
)	O
)	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFBLK	int
;	O
else	O
if	O
(	O
S_ISCHR	O
(	O
statbuf	pointer
->	O
st_mode	int
)	O
)	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFCHR	int
;	O
else	O
if	O
(	O
S_ISFIFO	O
(	O
statbuf	pointer
->	O
st_mode	int
)	O
)	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFIFO	int
;	O
else	O
if	O
(	O
S_ISDOOR	int
(	O
statbuf	pointer
->	O
st_mode	int
)	O
)	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFDOOR	int
;	O
else	O
if	O
(	O
S_ISLNK	O
(	O
statbuf	pointer
->	O
st_mode	int
)	O
)	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFLNK	int
;	O
else	O
if	O
(	O
S_ISSOCK	O
(	O
statbuf	pointer
->	O
st_mode	int
)	O
)	O
file_hdr	pointer
->	O
c_mode	short
|=	O
CP_IFSOCK	int
;	O
file_hdr	pointer
->	O
c_ino	short
=	O
statbuf	pointer
->	O
st_ino	long
;	O
file_hdr	pointer
->	O
c_nlink	short
=	O
statbuf	pointer
->	O
st_nlink	long
;	O
file_hdr	pointer
->	O
c_uid	short
=	O
statbuf	pointer
->	O
st_uid	int
;	O
file_hdr	pointer
->	O
c_gid	short
=	O
statbuf	pointer
->	O
st_gid	int
;	O
file_hdr	pointer
->	O
c_filesize	long
=	O
(	O
uintmax_t	long
)	O
(	O
statbuf	pointer
->	O
st_size	long
)	O
;	O
file_hdr	pointer
->	O
c_mtime	long
=	O
statbuf	pointer
->	O
st_mtime	O
;	O
file_hdr	pointer
->	O
c_ctime	long
=	O
statbuf	pointer
->	O
st_ctime	O
;	O
file_hdr	pointer
->	O
c_atime	long
=	O
statbuf	pointer
->	O
st_atime	O
;	O
file_hdr	pointer
->	O
c_atime_nsec	long
=	O
0	int
;	O
file_hdr	pointer
->	O
c_ctime_nsec	long
=	O
0	int
;	O
file_hdr	pointer
->	O
c_dev_maj	long
=	O
major	O
(	O
statbuf	pointer
->	O
st_dev	long
)	O
;	O
file_hdr	pointer
->	O
c_dev_min	long
=	O
minor	O
(	O
statbuf	pointer
->	O
st_dev	long
)	O
;	O
file_hdr	pointer
->	O
c_rdev_maj	long
=	O
major	O
(	O
statbuf	pointer
->	O
st_rdev	long
)	O
;	O
file_hdr	pointer
->	O
c_rdev_min	long
=	O
minor	O
(	O
statbuf	pointer
->	O
st_rdev	long
)	O
;	O
if	O
(	O
filename	pointer
)	O
{	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
filename	pointer
)	O
;	O
file_hdr	pointer
->	O
c_namesize	short
=	O
strlen	function
(	O
filename	pointer
)	O
+	O
1	int
;	O
}	O
else	O
{	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
""	pointer
)	O
;	O
file_hdr	pointer
->	O
c_namesize	short
=	O
1	int
;	O
}	O
if	O
(	O
filename	pointer
&&	O
strlen	function
(	O
filename	pointer
)	O
)	O
{	O
if	O
(	O
S_ISLNK	O
(	O
statbuf	pointer
->	O
st_mode	int
)	O
&&	O
linkname	pointer
&&	O
!	O
strlen	function
(	O
linkname	pointer
)	O
)	O
{	O
amount	long
=	O
readlink	function
(	O
sourcefilename	pointer
,	O
symbuf	array
,	O
sizeof	O
(	O
symbuf	array
)	O
)	O
;	O
if	O
(	O
amount	long
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"readlink failed on %s\n"	pointer
,	O
filename	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
amount	long
>	O
100	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"warning: linkname too long for tar format: %s\n"	pointer
,	O
sourcefilename	pointer
)	O
;	O
}	O
strncpy	function
(	O
linkname	pointer
,	O
symbuf	array
,	O
amount	long
)	O
;	O
linkname	pointer
[	O
amount	long
]	O
=	O
'\0'	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
linkname	pointer
)	O
;	O
}	O
else	O
if	O
(	O
S_ISLNK	O
(	O
statbuf	pointer
->	O
st_mode	int
)	O
&&	O
linkname	pointer
&&	O
strlen	function
(	O
linkname	pointer
)	O
)	O
{	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
linkname	pointer
)	O
;	O
}	O
else	O
{	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
linkname	pointer
)	O
;	O
}	O
}	O
file_hdr	pointer
->	O
c_is_tar_lnktype	char
=	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
taru_set_tar_header_sum	function
(	O
struct	O
tar_header	struct
*	O
fp_tar_hdr	pointer
,	O
int	O
tar_iflags	int
)	O
{	O
int	O
termch	int
;	O
unsigned	O
long	O
sum	long
;	O
struct	O
tar_header	struct
*	O
tar_hdr	pointer
;	O
int	O
tar_iflags_like_star	int
;	O
int	O
tar_iflags_like_pax	int
;	O
tar_iflags_like_star	int
=	O
(	O
tar_iflags	int
&	O
TARU_TAR_BE_LIKE_STAR	O
)	O
;	O
tar_iflags_like_pax	int
=	O
(	O
tar_iflags	int
&	O
TARU_TAR_BE_LIKE_PAX	O
)	O
;	O
if	O
(	O
tar_iflags_like_star	int
)	O
{	O
termch	int
=	O
'\040'	O
;	O
}	O
else	O
{	O
termch	int
=	O
0	int
;	O
}	O
if	O
(	O
fp_tar_hdr	pointer
)	O
{	O
tar_hdr	pointer
=	O
fp_tar_hdr	pointer
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: internal error in taru_set_header_sum\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
exit	function
(	O
34	int
)	O
;	O
}	O
sum	long
=	O
taru_tar_checksum	function
(	O
tar_hdr	pointer
)	O
;	O
if	O
(	O
tar_iflags_like_pax	int
||	O
tar_iflags_like_star	int
)	O
{	O
uintmax_to_chars	function
(	O
sum	long
,	O
tar_hdr	pointer
->	O
chksum	array
,	O
8	int
,	O
POSIX_FORMAT	int
,	O
termch	int
)	O
;	O
}	O
else	O
{	O
uintmax_to_chars	function
(	O
sum	long
,	O
tar_hdr	pointer
->	O
chksum	array
,	O
7	int
,	O
POSIX_FORMAT	int
,	O
termch	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
taru_set_new_linkname	function
(	O
TARU	struct
*	O
taru	pointer
,	O
struct	O
tar_header	struct
*	O
fp_tar_hdr	pointer
,	O
char	O
*	O
name	pointer
)	O
{	O
int	O
retval	int
=	O
0	int
;	O
struct	O
tar_header	struct
*	O
tar_hdr	pointer
;	O
if	O
(	O
strlen	function
(	O
name	pointer
)	O
>	O
sizeof	O
(	O
tar_hdr	pointer
->	O
linkname	pointer
)	O
)	O
{	O
retval	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
fp_tar_hdr	pointer
)	O
tar_hdr	pointer
=	O
fp_tar_hdr	pointer
;	O
else	O
tar_hdr	pointer
=	O
(	O
struct	O
tar_header	struct
*	O
)	O
(	O
strob_str	function
(	O
taru	pointer
->	O
headerM	pointer
)	O
)	O
;	O
memset	function
(	O
tar_hdr	pointer
->	O
linkname	pointer
,	O
'\0'	O
,	O
sizeof	O
(	O
tar_hdr	pointer
->	O
linkname	pointer
)	O
)	O
;	O
strncpy	function
(	O
tar_hdr	pointer
->	O
linkname	pointer
,	O
name	pointer
,	O
sizeof	O
(	O
tar_hdr	pointer
->	O
linkname	pointer
)	O
)	O
;	O
return	O
retval	int
;	O
}	O
int	O
taru_set_new_name	function
(	O
struct	O
tar_header	struct
*	O
fp_tar_hdr	pointer
,	O
int	O
len	int
,	O
char	O
*	O
fpname	pointer
,	O
int	O
tar_iflags	int
)	O
{	O
int	O
ret	int
;	O
struct	O
tar_header	struct
*	O
tar_hdr	pointer
;	O
char	O
*	O
name	pointer
=	O
fpname	pointer
;	O
STROB	struct
*	O
tmp	pointer
=	O
NULL	O
;	O
if	O
(	O
strstr	function
(	O
fpname	pointer
,	O
"\\x"	pointer
)	O
)	O
{	O
tmp	pointer
=	O
strob_open	function
(	O
64	int
)	O
;	O
strob_strcpy	function
(	O
tmp	pointer
,	O
name	pointer
)	O
;	O
swlib_process_hex_escapes	function
(	O
strob_str	function
(	O
tmp	pointer
)	O
)	O
;	O
name	pointer
=	O
strob_str	function
(	O
tmp	pointer
)	O
;	O
}	O
if	O
(	O
fp_tar_hdr	pointer
)	O
{	O
tar_hdr	pointer
=	O
fp_tar_hdr	pointer
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: internal error in taru_set_new_name\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
exit	function
(	O
33	int
)	O
;	O
}	O
if	O
(	O
strlen	function
(	O
name	pointer
)	O
<=	O
TARNAMESIZE	int
)	O
{	O
strncpy	function
(	O
tar_hdr	pointer
->	O
name	pointer
,	O
name	pointer
,	O
TARNAMESIZE	int
)	O
;	O
ret	int
=	O
0	int
;	O
}	O
else	O
{	O
ret	int
=	O
taru_split_name_ustar	function
(	O
tar_hdr	pointer
,	O
name	pointer
,	O
tar_iflags	int
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error splitting name\n"	pointer
,	O
swlib_utilname_get	function
(	O
)	O
)	O
;	O
return	O
ret	int
;	O
}	O
}	O
taru_set_tar_header_sum	function
(	O
fp_tar_hdr	pointer
,	O
tar_iflags	int
)	O
;	O
if	O
(	O
tmp	pointer
)	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
taru_write_long_link_member	function
(	O
TARU	struct
*	O
taru	pointer
,	O
int	O
out_file_des	int
,	O
char	O
*	O
filename	pointer
,	O
int	O
gnu_long_type	int
,	O
unsigned	O
long	O
c_type	long
,	O
int	O
tarheaderflags	int
)	O
{	O
int	O
ret	int
;	O
int	O
is_dir	int
;	O
struct	O
stat	struct
foo	struct
;	O
char	O
namebuf	array
[	O
512	int
]	O
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
=	O
ahsStaticCreateFilehdr	function
(	O
)	O
;	O
int	O
do_add_trailing_slash	int
=	O
0	int
;	O
is_dir	int
=	O
(	O
c_type	long
&	O
CP_IFMT	int
)	O
==	O
CP_IFDIR	int
;	O
E_DEBUG2	O
(	O
"filename=[%s]"	pointer
,	O
filename	pointer
)	O
;	O
E_DEBUG2	O
(	O
"type dir : [%d]"	pointer
,	O
(	O
c_type	long
&	O
CP_IFMT	int
)	O
==	O
CP_IFDIR	int
)	O
;	O
E_DEBUG2	O
(	O
"type reg : [%d]"	pointer
,	O
(	O
c_type	long
&	O
CP_IFMT	int
)	O
==	O
CP_IFREG	int
)	O
;	O
E_DEBUG2	O
(	O
"type sym : [%d]"	pointer
,	O
(	O
c_type	long
&	O
CP_IFMT	int
)	O
==	O
CP_IFLNK	int
)	O
;	O
if	O
(	O
is_dir	int
&&	O
strlen	function
(	O
filename	pointer
)	O
&&	O
filename	pointer
[	O
strlen	function
(	O
filename	pointer
)	O
-	O
1	int
]	O
!=	O
'/'	O
&&	O
strlen	function
(	O
filename	pointer
)	O
<	O
511	int
)	O
{	O
do_add_trailing_slash	int
=	O
1	int
;	O
}	O
if	O
(	O
strlen	function
(	O
filename	pointer
)	O
>=	O
510	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
memset	function
(	O
&	O
foo	struct
,	O
'\0'	O
,	O
sizeof	O
(	O
foo	struct
)	O
)	O
;	O
taru_statbuf2filehdr	function
(	O
file_hdr	pointer
,	O
&	O
foo	struct
,	O
NULL	O
,	O
NULL	O
,	O
""	pointer
)	O
;	O
if	O
(	O
(	O
c_type	long
&	O
CP_IFMT	int
)	O
==	O
CP_IFREG	int
||	O
(	O
c_type	long
&	O
CP_IFMT	int
)	O
==	O
CP_IFDIR	int
)	O
{	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
GNU_LONG_LINK	pointer
)	O
;	O
if	O
(	O
gnu_long_type	int
==	O
GNUTYPE_LONGNAME	char
)	O
{	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
""	pointer
)	O
;	O
}	O
else	O
{	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
filename	pointer
)	O
;	O
}	O
file_hdr	pointer
->	O
c_mode	short
=	O
0	int
;	O
}	O
else	O
{	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
GNU_LONG_LINK	pointer
)	O
;	O
ahsStaticSetPaxLinkname	function
(	O
file_hdr	pointer
,	O
filename	pointer
)	O
;	O
file_hdr	pointer
->	O
c_mode	short
=	O
c_type	long
;	O
}	O
file_hdr	pointer
->	O
c_namesize	short
=	O
strlen	function
(	O
GNU_LONG_LINK	pointer
)	O
+	O
1	int
;	O
file_hdr	pointer
->	O
c_ino	short
=	O
0	int
;	O
file_hdr	pointer
->	O
c_nlink	short
=	O
0	int
;	O
file_hdr	pointer
->	O
c_uid	short
=	O
0	int
;	O
file_hdr	pointer
->	O
c_gid	short
=	O
0	int
;	O
file_hdr	pointer
->	O
c_filesize	long
=	O
strlen	function
(	O
filename	pointer
)	O
+	O
1	int
+	O
do_add_trailing_slash	int
;	O
file_hdr	pointer
->	O
c_mtime	long
=	O
0	int
;	O
file_hdr	pointer
->	O
c_dev_maj	long
=	O
0	int
;	O
file_hdr	pointer
->	O
c_dev_min	long
=	O
0	int
;	O
file_hdr	pointer
->	O
c_rdev_maj	long
=	O
0	int
;	O
ret	int
=	O
taru_write_out_tar_header2	function
(	O
taru	pointer
,	O
file_hdr	pointer
,	O
out_file_des	int
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
"root"	pointer
,	O
"root"	pointer
,	O
tarheaderflags	int
)	O
;	O
if	O
(	O
ret	int
==	O
512	int
)	O
{	O
memset	function
(	O
namebuf	array
,	O
'\0'	O
,	O
sizeof	O
(	O
namebuf	array
)	O
)	O
;	O
strncpy	function
(	O
namebuf	array
,	O
filename	pointer
,	O
sizeof	O
(	O
namebuf	array
)	O
)	O
;	O
namebuf	array
[	O
sizeof	O
(	O
namebuf	array
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
do_add_trailing_slash	int
)	O
{	O
namebuf	array
[	O
strlen	function
(	O
namebuf	array
)	O
]	O
=	O
'/'	O
;	O
}	O
if	O
(	O
taru_safewrite	function
(	O
out_file_des	int
,	O
namebuf	array
,	O
512	int
)	O
!=	O
512	int
)	O
{	O
;	O
}	O
else	O
{	O
ret	int
+=	O
512	int
;	O
}	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
ahsStaticDeleteFilehdr	function
(	O
file_hdr	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
