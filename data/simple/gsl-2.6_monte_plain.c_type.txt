int	O
gsl_monte_plain_integrate	function
(	O
const	O
gsl_monte_function	struct
*	O
f	pointer
,	O
const	O
double	O
xl	array
[	O
]	O
,	O
const	O
double	O
xu	array
[	O
]	O
,	O
const	O
size_t	long
dim	long
,	O
const	O
size_t	long
calls	long
,	O
gsl_rng	struct
*	O
r	pointer
,	O
gsl_monte_plain_state	struct
*	O
state	pointer
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
)	O
{	O
double	O
vol	double
,	O
m	double
=	O
0	int
,	O
q	double
=	O
0	int
;	O
double	O
*	O
x	double
=	O
state	pointer
->	O
x	double
;	O
size_t	long
n	int
,	O
i	long
;	O
if	O
(	O
dim	long
!=	O
state	pointer
->	O
dim	long
)	O
{	O
GSL_ERROR	O
(	O
"number of dimensions must match allocated size"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
xu	array
[	O
i	long
]	O
<=	O
xl	array
[	O
i	long
]	O
)	O
{	O
GSL_ERROR	O
(	O
"xu must be greater than xl"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
xu	array
[	O
i	long
]	O
-	O
xl	array
[	O
i	long
]	O
>	O
GSL_DBL_MAX	int
)	O
{	O
GSL_ERROR	O
(	O
"Range of integration is too large, please rescale"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
}	O
vol	double
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
vol	double
*=	O
xu	array
[	O
i	long
]	O
-	O
xl	array
[	O
i	long
]	O
;	O
}	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
calls	long
;	O
n	int
++	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
x	double
[	O
i	long
]	O
=	O
xl	array
[	O
i	long
]	O
+	O
gsl_rng_uniform_pos	function
(	O
r	pointer
)	O
*	O
(	O
xu	array
[	O
i	long
]	O
-	O
xl	array
[	O
i	long
]	O
)	O
;	O
}	O
{	O
double	O
fval	double
=	O
GSL_MONTE_FN_EVAL	O
(	O
f	pointer
,	O
x	double
)	O
;	O
double	O
d	double
=	O
fval	double
-	O
m	double
;	O
m	double
+=	O
d	double
/	O
(	O
n	int
+	O
1.0	int
)	O
;	O
q	double
+=	O
d	double
*	O
d	double
*	O
(	O
n	int
/	O
(	O
n	int
+	O
1.0	int
)	O
)	O
;	O
}	O
}	O
*	O
result	pointer
=	O
vol	double
*	O
m	double
;	O
if	O
(	O
calls	long
<	O
2	int
)	O
{	O
*	O
abserr	pointer
=	O
GSL_POSINF	O
;	O
}	O
else	O
{	O
*	O
abserr	pointer
=	O
vol	double
*	O
sqrt	function
(	O
q	double
/	O
(	O
calls	long
*	O
(	O
calls	long
-	O
1.0	int
)	O
)	O
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
gsl_monte_plain_state	struct
*	O
gsl_monte_plain_alloc	function
(	O
size_t	long
dim	long
)	O
{	O
gsl_monte_plain_state	struct
*	O
s	pointer
=	O
(	O
gsl_monte_plain_state	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
gsl_monte_plain_state	struct
)	O
)	O
;	O
if	O
(	O
s	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for state struct"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
x	double
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
s	pointer
->	O
x	double
==	O
0	int
)	O
{	O
free	function
(	O
s	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for working vector"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
dim	long
=	O
dim	long
;	O
return	O
s	pointer
;	O
}	O
int	O
gsl_monte_plain_init	function
(	O
gsl_monte_plain_state	struct
*	O
s	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
s	pointer
->	O
dim	long
;	O
i	long
++	O
)	O
{	O
s	pointer
->	O
x	double
[	O
i	long
]	O
=	O
0.0	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
void	O
gsl_monte_plain_free	function
(	O
gsl_monte_plain_state	struct
*	O
s	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
->	O
x	double
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
