void	O
adns__procdgram	function
(	O
adns_state	pointer
ads	pointer
,	O
const	O
byte	char
*	O
dgram	pointer
,	O
int	O
dglen	int
,	O
int	O
serv	int
,	O
int	O
viatcp	int
,	O
struct	O
timeval	struct
now	pointer
)	O
{	O
int	O
cbyte	int
,	O
rrstart	int
,	O
wantedrrs	int
,	O
rri	int
,	O
foundsoa	int
,	O
foundns	int
,	O
cname_here	int
;	O
int	O
id	int
,	O
f1	int
,	O
f2	int
,	O
qdcount	int
,	O
ancount	int
,	O
nscount	int
,	O
arcount	int
;	O
int	O
flg_ra	int
,	O
flg_rd	int
,	O
flg_tc	int
,	O
flg_qr	int
,	O
opcode	int
;	O
int	O
rrtype	int
,	O
rrclass	int
,	O
rdlength	int
,	O
rdstart	int
;	O
int	O
anstart	int
,	O
nsstart	int
,	O
arstart	int
;	O
int	O
ownermatched	int
,	O
l	long
,	O
nrrs	int
;	O
unsigned	O
long	O
ttl	long
,	O
soattl	long
;	O
const	O
typeinfo	struct
*	O
typei	pointer
;	O
adns_query	pointer
qu	pointer
,	O
nqu	pointer
;	O
dns_rcode	enum
rcode	enum
;	O
adns_status	enum
st	enum
;	O
vbuf	struct
tempvb	struct
;	O
byte	char
*	O
newquery	pointer
,	O
*	O
rrsdata	pointer
;	O
parseinfo	struct
pai	pointer
;	O
if	O
(	O
dglen	int
<	O
DNS_HDRSIZE	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
serv	int
,	O
0	int
,	O
"received datagram"	pointer
" too short for message header (%d)"	pointer
,	O
dglen	int
)	O
;	O
return	O
;	O
}	O
cbyte	int
=	O
0	int
;	O
GET_W	O
(	O
cbyte	int
,	O
id	int
)	O
;	O
GET_B	O
(	O
cbyte	int
,	O
f1	int
)	O
;	O
GET_B	O
(	O
cbyte	int
,	O
f2	int
)	O
;	O
GET_W	O
(	O
cbyte	int
,	O
qdcount	int
)	O
;	O
GET_W	O
(	O
cbyte	int
,	O
ancount	int
)	O
;	O
GET_W	O
(	O
cbyte	int
,	O
nscount	int
)	O
;	O
GET_W	O
(	O
cbyte	int
,	O
arcount	int
)	O
;	O
assert	O
(	O
cbyte	int
==	O
DNS_HDRSIZE	int
)	O
;	O
flg_qr	int
=	O
f1	int
&	O
0x80	int
;	O
opcode	int
=	O
(	O
f1	int
&	O
0x78	int
)	O
>>	O
3	int
;	O
flg_tc	int
=	O
f1	int
&	O
0x02	int
;	O
flg_rd	int
=	O
f1	int
&	O
0x01	int
;	O
flg_ra	int
=	O
f2	int
&	O
0x80	int
;	O
rcode	enum
=	O
(	O
f2	int
&	O
0x0f	int
)	O
;	O
cname_here	int
=	O
0	int
;	O
if	O
(	O
!	O
flg_qr	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
serv	int
,	O
0	int
,	O
"server sent us a query, not a response"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
opcode	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
serv	int
,	O
0	int
,	O
"server sent us unknown opcode"	pointer
" %d (wanted 0=QUERY)"	pointer
,	O
opcode	int
)	O
;	O
return	O
;	O
}	O
qu	pointer
=	O
0	int
;	O
if	O
(	O
qdcount	int
==	O
1	int
)	O
{	O
for	O
(	O
qu	pointer
=	O
viatcp	int
?	O
ads	pointer
->	O
tcpw	struct
.	O
head	pointer
:	O
ads	pointer
->	O
udpw	struct
.	O
head	pointer
;	O
qu	pointer
;	O
qu	pointer
=	O
nqu	pointer
)	O
{	O
nqu	pointer
=	O
qu	pointer
->	O
next	pointer
;	O
if	O
(	O
qu	pointer
->	O
id	int
!=	O
id	int
)	O
continue	O
;	O
if	O
(	O
dglen	int
<	O
qu	pointer
->	O
query_dglen	int
)	O
continue	O
;	O
if	O
(	O
memcmp	function
(	O
qu	pointer
->	O
query_dgram	pointer
+	O
DNS_HDRSIZE	int
,	O
dgram	pointer
+	O
DNS_HDRSIZE	int
,	O
qu	pointer
->	O
query_dglen	int
-	O
DNS_HDRSIZE	int
)	O
)	O
continue	O
;	O
if	O
(	O
viatcp	int
)	O
{	O
assert	O
(	O
qu	pointer
->	O
state	pointer
==	O
query_tcpw	int
)	O
;	O
}	O
else	O
{	O
assert	O
(	O
qu	pointer
->	O
state	pointer
==	O
query_tosend	int
)	O
;	O
if	O
(	O
!	O
(	O
qu	pointer
->	O
udpsent	long
&	O
(	O
1	int
<<	O
serv	int
)	O
)	O
)	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
qu	pointer
)	O
{	O
if	O
(	O
viatcp	int
)	O
LIST_UNLINK	O
(	O
ads	pointer
->	O
tcpw	struct
,	O
qu	pointer
)	O
;	O
else	O
LIST_UNLINK	O
(	O
ads	pointer
->	O
udpw	struct
,	O
qu	pointer
)	O
;	O
}	O
}	O
switch	O
(	O
rcode	enum
)	O
{	O
case	O
rcode_noerror	int
:	O
case	O
rcode_nxdomain	int
:	O
break	O
;	O
case	O
rcode_formaterror	int
:	O
adns__warn	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"server cannot understand our query"	pointer
" (Format Error)"	pointer
)	O
;	O
if	O
(	O
qu	pointer
)	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_rcodeformaterror	int
)	O
;	O
return	O
;	O
case	O
rcode_servfail	int
:	O
if	O
(	O
qu	pointer
)	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_rcodeservfail	int
)	O
;	O
else	O
adns__debug	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"server failure on unidentifiable query"	pointer
)	O
;	O
return	O
;	O
case	O
rcode_notimp	int
:	O
adns__warn	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"server claims not to implement our query"	pointer
)	O
;	O
if	O
(	O
qu	pointer
)	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_rcodenotimplemented	int
)	O
;	O
return	O
;	O
case	O
rcode_refused	int
:	O
adns__debug	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"server refused our query"	pointer
)	O
;	O
if	O
(	O
qu	pointer
)	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_rcoderefused	int
)	O
;	O
return	O
;	O
default	O
:	O
adns__warn	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"server gave unknown response code %d"	pointer
,	O
rcode	enum
)	O
;	O
if	O
(	O
qu	pointer
)	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_rcodeunknown	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
qu	pointer
)	O
{	O
if	O
(	O
!	O
qdcount	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
serv	int
,	O
0	int
,	O
"server sent reply without quoting our question"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
qdcount	int
>	O
1	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
serv	int
,	O
0	int
,	O
"server claimed to answer %d"	pointer
" questions with one message"	pointer
,	O
qdcount	int
)	O
;	O
}	O
else	O
if	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_debug	int
)	O
{	O
adns__vbuf_init	function
(	O
&	O
tempvb	struct
)	O
;	O
adns__debug	function
(	O
ads	pointer
,	O
serv	int
,	O
0	int
,	O
"reply not found, id %02x, query owner %s"	pointer
,	O
id	int
,	O
adns__diag_domain	function
(	O
ads	pointer
,	O
serv	int
,	O
0	int
,	O
&	O
tempvb	struct
,	O
dgram	pointer
,	O
dglen	int
,	O
DNS_HDRSIZE	int
)	O
)	O
;	O
adns__vbuf_free	function
(	O
&	O
tempvb	struct
)	O
;	O
}	O
return	O
;	O
}	O
anstart	int
=	O
qu	pointer
->	O
query_dglen	int
;	O
arstart	int
=	O
-	O
1	int
;	O
wantedrrs	int
=	O
0	int
;	O
cbyte	int
=	O
anstart	int
;	O
for	O
(	O
rri	int
=	O
0	int
;	O
rri	int
<	O
ancount	int
;	O
rri	int
++	O
)	O
{	O
rrstart	int
=	O
cbyte	int
;	O
st	enum
=	O
adns__findrr	function
(	O
qu	pointer
,	O
serv	int
,	O
dgram	pointer
,	O
dglen	int
,	O
&	O
cbyte	int
,	O
&	O
rrtype	int
,	O
&	O
rrclass	int
,	O
&	O
ttl	long
,	O
&	O
rdlength	int
,	O
&	O
rdstart	int
,	O
&	O
ownermatched	int
)	O
;	O
if	O
(	O
st	enum
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
st	enum
)	O
;	O
return	O
;	O
}	O
if	O
(	O
rrtype	int
==	O
-	O
1	int
)	O
goto	O
x_truncated	O
;	O
if	O
(	O
rrclass	int
!=	O
DNS_CLASS_IN	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"ignoring answer RR with wrong class %d"	pointer
" (expected IN=%d)"	pointer
,	O
rrclass	int
,	O
DNS_CLASS_IN	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
ownermatched	int
)	O
{	O
if	O
(	O
ads	pointer
->	O
iflags	enum
&	O
adns_if_debug	int
)	O
{	O
adns__debug	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"ignoring RR with an unexpected owner %s"	pointer
,	O
adns__diag_domain	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
&	O
qu	pointer
->	O
vb	pointer
,	O
dgram	pointer
,	O
dglen	int
,	O
rrstart	int
)	O
)	O
;	O
}	O
continue	O
;	O
}	O
if	O
(	O
rrtype	int
==	O
adns_r_cname	int
&&	O
(	O
qu	pointer
->	O
answer	pointer
->	O
type	enum
&	O
adns_rrt_typemask	int
)	O
!=	O
adns_r_cname	int
)	O
{	O
if	O
(	O
qu	pointer
->	O
flags	enum
&	O
adns_qf_cname_forbid	int
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_prohibitedcname	int
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
qu	pointer
->	O
cname_dgram	pointer
)	O
{	O
adns__debug	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"allegedly canonical name %s"	pointer
" is actually alias for %s"	pointer
,	O
qu	pointer
->	O
answer	pointer
->	O
cname	pointer
,	O
adns__diag_domain	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
&	O
qu	pointer
->	O
vb	pointer
,	O
dgram	pointer
,	O
dglen	int
,	O
rdstart	int
)	O
)	O
;	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_prohibitedcname	int
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
wantedrrs	int
)	O
{	O
adns__debug	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"ignoring CNAME (to %s) coexisting with RR"	pointer
,	O
adns__diag_domain	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
&	O
qu	pointer
->	O
vb	pointer
,	O
dgram	pointer
,	O
dglen	int
,	O
rdstart	int
)	O
)	O
;	O
}	O
else	O
{	O
qu	pointer
->	O
cname_begin	int
=	O
rdstart	int
;	O
qu	pointer
->	O
cname_dglen	int
=	O
dglen	int
;	O
st	enum
=	O
adns__parse_domain	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
&	O
qu	pointer
->	O
vb	pointer
,	O
qu	pointer
->	O
flags	enum
&	O
adns_qf_quotefail_cname	int
?	O
0	int
:	O
pdf_quoteok	int
,	O
dgram	pointer
,	O
dglen	int
,	O
&	O
rdstart	int
,	O
rdstart	int
+	O
rdlength	int
)	O
;	O
if	O
(	O
!	O
qu	pointer
->	O
vb	pointer
.	O
used	int
)	O
goto	O
x_truncated	O
;	O
if	O
(	O
st	enum
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
st	enum
)	O
;	O
return	O
;	O
}	O
l	long
=	O
strlen	function
(	O
qu	pointer
->	O
vb	pointer
.	O
buf	pointer
)	O
+	O
1	int
;	O
qu	pointer
->	O
answer	pointer
->	O
cname	pointer
=	O
adns__alloc_preserved	function
(	O
qu	pointer
,	O
l	long
)	O
;	O
if	O
(	O
!	O
qu	pointer
->	O
answer	pointer
->	O
cname	pointer
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_nomemory	int
)	O
;	O
return	O
;	O
}	O
qu	pointer
->	O
cname_dgram	pointer
=	O
adns__alloc_mine	function
(	O
qu	pointer
,	O
dglen	int
)	O
;	O
memcpy	function
(	O
qu	pointer
->	O
cname_dgram	pointer
,	O
dgram	pointer
,	O
dglen	int
)	O
;	O
memcpy	function
(	O
qu	pointer
->	O
answer	pointer
->	O
cname	pointer
,	O
qu	pointer
->	O
vb	pointer
.	O
buf	pointer
,	O
l	long
)	O
;	O
cname_here	int
=	O
1	int
;	O
adns__update_expires	function
(	O
qu	pointer
,	O
ttl	long
,	O
now	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
rrtype	int
==	O
(	O
qu	pointer
->	O
answer	pointer
->	O
type	enum
&	O
adns_rrt_typemask	int
)	O
)	O
{	O
wantedrrs	int
++	O
;	O
}	O
else	O
{	O
adns__debug	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"ignoring answer RR"	pointer
" with irrelevant type %d"	pointer
,	O
rrtype	int
)	O
;	O
}	O
}	O
if	O
(	O
flg_tc	int
)	O
goto	O
x_truncated	O
;	O
nsstart	int
=	O
cbyte	int
;	O
if	O
(	O
!	O
wantedrrs	int
)	O
{	O
foundsoa	int
=	O
0	int
;	O
soattl	long
=	O
0	int
;	O
foundns	int
=	O
0	int
;	O
for	O
(	O
rri	int
=	O
0	int
;	O
rri	int
<	O
nscount	int
;	O
rri	int
++	O
)	O
{	O
rrstart	int
=	O
cbyte	int
;	O
st	enum
=	O
adns__findrr	function
(	O
qu	pointer
,	O
serv	int
,	O
dgram	pointer
,	O
dglen	int
,	O
&	O
cbyte	int
,	O
&	O
rrtype	int
,	O
&	O
rrclass	int
,	O
&	O
ttl	long
,	O
&	O
rdlength	int
,	O
&	O
rdstart	int
,	O
0	int
)	O
;	O
if	O
(	O
st	enum
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
st	enum
)	O
;	O
return	O
;	O
}	O
if	O
(	O
rrtype	int
==	O
-	O
1	int
)	O
goto	O
x_truncated	O
;	O
if	O
(	O
rrclass	int
!=	O
DNS_CLASS_IN	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"ignoring authority RR with wrong class %d"	pointer
" (expected IN=%d)"	pointer
,	O
rrclass	int
,	O
DNS_CLASS_IN	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
rrtype	int
==	O
adns_r_soa_raw	int
)	O
{	O
foundsoa	int
=	O
1	int
;	O
soattl	long
=	O
ttl	long
;	O
break	O
;	O
}	O
else	O
if	O
(	O
rrtype	int
==	O
adns_r_ns_raw	int
)	O
{	O
foundns	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
rcode	enum
==	O
rcode_nxdomain	int
)	O
{	O
adns__update_expires	function
(	O
qu	pointer
,	O
soattl	long
,	O
now	pointer
)	O
;	O
if	O
(	O
qu	pointer
->	O
flags	enum
&	O
adns_qf_search	int
&&	O
!	O
qu	pointer
->	O
cname_dgram	pointer
)	O
{	O
adns__search_next	function
(	O
ads	pointer
,	O
qu	pointer
,	O
now	pointer
)	O
;	O
}	O
else	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_nxdomain	int
)	O
;	O
}	O
return	O
;	O
}	O
if	O
(	O
foundsoa	int
||	O
!	O
foundns	int
)	O
{	O
adns__update_expires	function
(	O
qu	pointer
,	O
soattl	long
,	O
now	pointer
)	O
;	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_nodata	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
cname_here	int
)	O
goto	O
x_restartquery	O
;	O
if	O
(	O
!	O
flg_ra	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"server is not willing"	pointer
" to do recursive lookups for us"	pointer
)	O
;	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_norecurse	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
flg_rd	int
)	O
adns__diag	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"server thinks"	pointer
" we didn't ask for recursive lookup"	pointer
)	O
;	O
else	O
adns__debug	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"server claims to do recursion,"	pointer
" but gave us a referral"	pointer
)	O
;	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_invalidresponse	int
)	O
;	O
}	O
return	O
;	O
}	O
qu	pointer
->	O
answer	pointer
->	O
rrs	union
.	O
untyped	pointer
=	O
adns__alloc_interim	function
(	O
qu	pointer
,	O
qu	pointer
->	O
typei	pointer
->	O
rrsz	int
*	O
wantedrrs	int
)	O
;	O
if	O
(	O
!	O
qu	pointer
->	O
answer	pointer
->	O
rrs	union
.	O
untyped	pointer
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_nomemory	int
)	O
;	O
return	O
;	O
}	O
typei	pointer
=	O
qu	pointer
->	O
typei	pointer
;	O
cbyte	int
=	O
anstart	int
;	O
rrsdata	pointer
=	O
qu	pointer
->	O
answer	pointer
->	O
rrs	union
.	O
bytes	pointer
;	O
pai	pointer
.	O
ads	pointer
=	O
qu	pointer
->	O
ads	pointer
;	O
pai	pointer
.	O
qu	pointer
=	O
qu	pointer
;	O
pai	pointer
.	O
serv	int
=	O
serv	int
;	O
pai	pointer
.	O
dgram	pointer
=	O
dgram	pointer
;	O
pai	pointer
.	O
dglen	int
=	O
dglen	int
;	O
pai	pointer
.	O
nsstart	int
=	O
nsstart	int
;	O
pai	pointer
.	O
nscount	int
=	O
nscount	int
;	O
pai	pointer
.	O
arcount	int
=	O
arcount	int
;	O
pai	pointer
.	O
now	pointer
=	O
now	pointer
;	O
for	O
(	O
rri	int
=	O
0	int
,	O
nrrs	int
=	O
0	int
;	O
rri	int
<	O
ancount	int
;	O
rri	int
++	O
)	O
{	O
st	enum
=	O
adns__findrr	function
(	O
qu	pointer
,	O
serv	int
,	O
dgram	pointer
,	O
dglen	int
,	O
&	O
cbyte	int
,	O
&	O
rrtype	int
,	O
&	O
rrclass	int
,	O
&	O
ttl	long
,	O
&	O
rdlength	int
,	O
&	O
rdstart	int
,	O
&	O
ownermatched	int
)	O
;	O
assert	O
(	O
!	O
st	enum
)	O
;	O
assert	O
(	O
rrtype	int
!=	O
-	O
1	int
)	O
;	O
if	O
(	O
rrclass	int
!=	O
DNS_CLASS_IN	int
||	O
rrtype	int
!=	O
(	O
qu	pointer
->	O
answer	pointer
->	O
type	enum
&	O
adns_rrt_typemask	int
)	O
||	O
!	O
ownermatched	int
)	O
continue	O
;	O
adns__update_expires	function
(	O
qu	pointer
,	O
ttl	long
,	O
now	pointer
)	O
;	O
st	enum
=	O
typei	pointer
->	O
parse	pointer
(	O
&	O
pai	pointer
,	O
rdstart	int
,	O
rdstart	int
+	O
rdlength	int
,	O
rrsdata	pointer
+	O
nrrs	int
*	O
typei	pointer
->	O
rrsz	int
)	O
;	O
if	O
(	O
st	enum
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
st	enum
)	O
;	O
return	O
;	O
}	O
if	O
(	O
rdstart	int
==	O
-	O
1	int
)	O
goto	O
x_truncated	O
;	O
nrrs	int
++	O
;	O
}	O
assert	O
(	O
nrrs	int
==	O
wantedrrs	int
)	O
;	O
qu	pointer
->	O
answer	pointer
->	O
nrrs	int
=	O
nrrs	int
;	O
if	O
(	O
qu	pointer
->	O
children	struct
.	O
head	pointer
)	O
{	O
qu	pointer
->	O
state	pointer
=	O
query_childw	int
;	O
LIST_LINK_TAIL	O
(	O
ads	pointer
->	O
childw	struct
,	O
qu	pointer
)	O
;	O
return	O
;	O
}	O
adns__query_done	function
(	O
qu	pointer
)	O
;	O
return	O
;	O
x_truncated	O
:	O
if	O
(	O
!	O
flg_tc	int
)	O
{	O
adns__diag	function
(	O
ads	pointer
,	O
serv	int
,	O
qu	pointer
,	O
"server sent datagram which points outside itself"	pointer
)	O
;	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_invalidresponse	int
)	O
;	O
return	O
;	O
}	O
qu	pointer
->	O
flags	enum
|=	O
adns_qf_usevc	int
;	O
x_restartquery	O
:	O
if	O
(	O
qu	pointer
->	O
cname_dgram	pointer
)	O
{	O
st	enum
=	O
adns__mkquery_frdgram	function
(	O
qu	pointer
->	O
ads	pointer
,	O
&	O
qu	pointer
->	O
vb	pointer
,	O
&	O
qu	pointer
->	O
id	int
,	O
qu	pointer
->	O
cname_dgram	pointer
,	O
qu	pointer
->	O
cname_dglen	int
,	O
qu	pointer
->	O
cname_begin	int
,	O
qu	pointer
->	O
answer	pointer
->	O
type	enum
,	O
qu	pointer
->	O
flags	enum
)	O
;	O
if	O
(	O
st	enum
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
st	enum
)	O
;	O
return	O
;	O
}	O
newquery	pointer
=	O
realloc	function
(	O
qu	pointer
->	O
query_dgram	pointer
,	O
qu	pointer
->	O
vb	pointer
.	O
used	int
)	O
;	O
if	O
(	O
!	O
newquery	pointer
)	O
{	O
adns__query_fail	function
(	O
qu	pointer
,	O
adns_s_nomemory	int
)	O
;	O
return	O
;	O
}	O
qu	pointer
->	O
query_dgram	pointer
=	O
newquery	pointer
;	O
qu	pointer
->	O
query_dglen	int
=	O
qu	pointer
->	O
vb	pointer
.	O
used	int
;	O
memcpy	function
(	O
newquery	pointer
,	O
qu	pointer
->	O
vb	pointer
.	O
buf	pointer
,	O
qu	pointer
->	O
vb	pointer
.	O
used	int
)	O
;	O
}	O
if	O
(	O
qu	pointer
->	O
state	pointer
==	O
query_tcpw	int
)	O
qu	pointer
->	O
state	pointer
=	O
query_tosend	int
;	O
qu	pointer
->	O
retries	int
=	O
0	int
;	O
adns__reset_preserved	function
(	O
qu	pointer
)	O
;	O
adns__query_send	function
(	O
qu	pointer
,	O
now	pointer
)	O
;	O
}	O
