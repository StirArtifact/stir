void	O
print_function_name	function
(	O
Symbol	struct
*	O
sym	pointer
,	O
int	O
has_subtree	int
)	O
{	O
fprintf	function
(	O
outfile	pointer
,	O
"%s"	pointer
,	O
sym	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
sym	pointer
->	O
arity	int
>=	O
0	int
)	O
fprintf	function
(	O
outfile	pointer
,	O
"()"	pointer
)	O
;	O
if	O
(	O
sym	pointer
->	O
decl	pointer
)	O
fprintf	function
(	O
outfile	pointer
,	O
" <%s at %s:%d>"	pointer
,	O
sym	pointer
->	O
decl	pointer
,	O
sym	pointer
->	O
source	pointer
,	O
sym	pointer
->	O
def_line	int
)	O
;	O
if	O
(	O
sym	pointer
->	O
active	int
)	O
{	O
fprintf	function
(	O
outfile	pointer
,	O
" (recursive: see %d)"	pointer
,	O
sym	pointer
->	O
active	int
-	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
sym	pointer
->	O
recursive	int
)	O
fprintf	function
(	O
outfile	pointer
,	O
" (R)"	pointer
)	O
;	O
if	O
(	O
!	O
print_as_tree	int
&&	O
has_subtree	int
)	O
fprintf	function
(	O
outfile	pointer
,	O
":"	pointer
)	O
;	O
}	O
static	O
int	O
print_symbol	function
(	O
FILE	struct
*	O
outfile	pointer
,	O
int	O
line	int
,	O
struct	O
output_symbol	struct
*	O
s	long
)	O
{	O
int	O
has_subtree	int
=	O
s	long
->	O
direct	int
?	O
s	long
->	O
sym	pointer
->	O
callee	pointer
!=	O
NULL	O
:	O
s	long
->	O
sym	pointer
->	O
caller	pointer
!=	O
NULL	O
;	O
print_level	function
(	O
s	long
->	O
level	int
,	O
s	long
->	O
last	int
)	O
;	O
print_function_name	function
(	O
s	long
->	O
sym	pointer
,	O
has_subtree	int
)	O
;	O
if	O
(	O
brief_listing	int
)	O
{	O
if	O
(	O
s	long
->	O
sym	pointer
->	O
expand_line	int
)	O
{	O
fprintf	function
(	O
outfile	pointer
,	O
" [see %d]"	pointer
,	O
s	long
->	O
sym	pointer
->	O
expand_line	int
)	O
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
s	long
->	O
sym	pointer
->	O
callee	pointer
)	O
s	long
->	O
sym	pointer
->	O
expand_line	int
=	O
line	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
gnu_output_handler	function
(	O
cflow_output_command	enum
cmd	enum
,	O
FILE	struct
*	O
outfile	pointer
,	O
int	O
line	int
,	O
void	O
*	O
data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
cflow_output_begin	int
:	O
if	O
(	O
emacs_option	int
)	O
{	O
fprintf	function
(	O
outfile	pointer
,	O
";; This file is generated by %s. -*- cflow -*-"	pointer
,	O
PACKAGE_STRING	pointer
)	O
;	O
newline	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
cflow_output_init	int
:	O
case	O
cflow_output_end	int
:	O
case	O
cflow_output_separator	int
:	O
break	O
;	O
case	O
cflow_output_newline	int
:	O
fprintf	function
(	O
outfile	pointer
,	O
"\n"	pointer
)	O
;	O
break	O
;	O
case	O
cflow_output_text	int
:	O
fprintf	function
(	O
outfile	pointer
,	O
"%s"	pointer
,	O
(	O
char	O
*	O
)	O
data	pointer
)	O
;	O
break	O
;	O
case	O
cflow_output_symbol	int
:	O
return	O
print_symbol	function
(	O
outfile	pointer
,	O
line	int
,	O
data	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
