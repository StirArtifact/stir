inline	O
object	O
fixnum_big_shift	function
(	O
fixnum	function
x	int
,	O
fixnum	function
w	int
)	O
{	O
MPOP	function
(	O
return	O
,	O
shifti	O
,	O
SI_TO_MP	function
(	O
x	int
,	O
big_fixnum1	O
)	O
,	O
w	int
)	O
;	O
}	O
inline	O
object	O
integer_fix_shift	function
(	O
object	O
x	int
,	O
fixnum	function
w	int
)	O
{	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_fixnum	O
)	O
{	O
fixnum	function
fx	O
=	O
fix	function
(	O
x	int
)	O
;	O
return	O
(	O
fx	O
!=	O
MOST_NEGATIVE_FIX	O
||	O
w	int
<	O
0	int
)	O
?	O
fixnum_shft	function
(	O
fx	O
,	O
w	int
)	O
:	O
fixnum_big_shift	function
(	O
fx	O
,	O
w	int
)	O
;	O
}	O
MPOP	function
(	O
return	O
,	O
shifti	O
,	O
MP	function
(	O
x	int
)	O
,	O
w	int
)	O
;	O
}	O
inline	O
object	O
integer_shift	function
(	O
object	O
x	int
,	O
object	O
y	int
)	O
{	O
enum	O
type	O
tx	enum
=	O
type_of	function
(	O
x	int
)	O
,	O
ty	enum
=	O
type_of	function
(	O
y	int
)	O
;	O
if	O
(	O
ty	enum
==	O
t_fixnum	O
)	O
return	O
integer_fix_shift	function
(	O
x	int
,	O
fix	function
(	O
y	int
)	O
)	O
;	O
else	O
{	O
if	O
(	O
eql	function
(	O
x	int
,	O
make_fixnum	function
(	O
0	int
)	O
)	O
)	O
return	O
x	int
;	O
if	O
(	O
big_sign	function
(	O
y	int
)	O
<	O
0	int
)	O
return	O
make_fixnum	function
(	O
(	O
tx	enum
==	O
t_fixnum	O
?	O
fix	function
(	O
x	int
)	O
:	O
big_sign	function
(	O
x	int
)	O
)	O
<	O
0	int
?	O
-	O
1	int
:	O
0	int
)	O
;	O
FEerror	function
(	O
"Insufficient memory"	pointer
,	O
0	int
)	O
;	O
return	O
Cnil	O
;	O
}	O
}	O
inline	O
object	O
integer_length	function
(	O
object	O
x	int
)	O
{	O
return	O
make_fixnum	function
(	O
type_of	function
(	O
x	int
)	O
==	O
t_fixnum	O
?	O
fixnum_length	function
(	O
fix	function
(	O
x	int
)	O
)	O
:	O
MP_SIZE_IN_BASE2	function
(	O
MP	function
(	O
x	int
)	O
)	O
)	O
;	O
}	O
inline	O
object	O
integer_count	function
(	O
object	O
x	int
)	O
{	O
return	O
make_fixnum	function
(	O
type_of	function
(	O
x	int
)	O
==	O
t_fixnum	O
?	O
fixnum_count	function
(	O
fix	function
(	O
x	int
)	O
)	O
:	O
MP_BITCOUNT	function
(	O
MP	function
(	O
x	int
)	O
)	O
)	O
;	O
}	O
DEFLOG	O
(	O
Llogior	int
,	O
BOOLIOR	O
,	O
small_fixnum	function
(	O
0	int
)	O
)	O
;	O
DEFLOG	O
(	O
Llogxor	int
,	O
BOOLXOR	O
,	O
small_fixnum	function
(	O
0	int
)	O
)	O
;	O
DEFLOG	O
(	O
Llogand	int
,	O
BOOLAND	O
,	O
small_fixnum	function
(	O
-	O
1	int
)	O
)	O
;	O
DEFLOG	O
(	O
Llogeqv	int
,	O
BOOLEQV	O
,	O
small_fixnum	function
(	O
-	O
1	int
)	O
)	O
;	O
LFD	function
(	O
Lboole	int
)	O
(	O
void	O
)	O
{	O
object	O
x	int
;	O
object	O
o	O
;	O
check_arg	function
(	O
3	int
)	O
;	O
check_type_integer	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
check_type_integer	function
(	O
&	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
check_type_integer	function
(	O
&	O
vs_base	O
[	O
2	int
]	O
)	O
;	O
o	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_base	O
++	O
;	O
x	int
=	O
log_op	function
(	O
fix	function
(	O
o	O
)	O
)	O
;	O
vs_base	O
--	O
;	O
vs_top	O
=	O
vs_base	O
;	O
vs_push	function
(	O
x	int
)	O
;	O
}	O
inline	O
bool	O
integer_bitp	function
(	O
object	O
p	int
,	O
object	O
x	int
)	O
{	O
enum	O
type	O
tp	enum
=	O
type_of	function
(	O
p	int
)	O
,	O
tx	enum
=	O
type_of	function
(	O
x	int
)	O
;	O
if	O
(	O
tp	enum
==	O
t_fixnum	O
)	O
{	O
if	O
(	O
tx	enum
==	O
t_fixnum	O
)	O
return	O
fixnum_bitp	function
(	O
fix	function
(	O
p	int
)	O
,	O
fix	function
(	O
x	int
)	O
)	O
;	O
else	O
return	O
big_bitp	function
(	O
x	int
,	O
fix	function
(	O
p	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
big_sign	function
(	O
p	int
)	O
<	O
0	int
)	O
return	O
0	int
;	O
else	O
if	O
(	O
tx	enum
==	O
t_fixnum	O
)	O
return	O
fix	function
(	O
x	int
)	O
<	O
0	int
;	O
else	O
return	O
big_sign	function
(	O
x	int
)	O
<	O
0	int
;	O
}	O
LFD	function
(	O
Llogbitp	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
2	int
)	O
;	O
check_type_integer	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
check_type_integer	function
(	O
&	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
vs_top	O
=	O
vs_base	O
;	O
vs_push	function
(	O
integer_bitp	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
vs_base	O
[	O
1	int
]	O
)	O
?	O
Ct	O
:	O
Cnil	O
)	O
;	O
}	O
LFD	function
(	O
Lash	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
2	int
)	O
;	O
check_type_integer	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
check_type_integer	function
(	O
&	O
vs_base	O
[	O
1	int
]	O
)	O
;	O
vs_top	O
=	O
vs_base	O
;	O
vs_push	function
(	O
integer_shift	function
(	O
vs_base	O
[	O
0	int
]	O
,	O
vs_base	O
[	O
1	int
]	O
)	O
)	O
;	O
}	O
LFD	function
(	O
Llogcount	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_integer	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
integer_count	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
LFD	function
(	O
Linteger_length	int
)	O
(	O
void	O
)	O
{	O
check_arg	function
(	O
1	int
)	O
;	O
check_type_integer	function
(	O
&	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
vs_base	O
[	O
0	int
]	O
=	O
integer_length	function
(	O
vs_base	O
[	O
0	int
]	O
)	O
;	O
}	O
static	O
fixnum	function
ior_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
i	int
|	O
j	int
)	O
;	O
}	O
static	O
fixnum	function
xor_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
i	int
^	O
j	int
)	O
;	O
}	O
static	O
fixnum	function
and_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
i	int
&	O
j	int
)	O
;	O
}	O
static	O
fixnum	function
eqv_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
~	O
(	O
i	int
^	O
j	int
)	O
)	O
;	O
}	O
static	O
fixnum	function
nand_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
~	O
(	O
i	int
&	O
j	int
)	O
)	O
;	O
}	O
static	O
fixnum	function
nor_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
~	O
(	O
i	int
|	O
j	int
)	O
)	O
;	O
}	O
static	O
fixnum	function
andc1_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
(	O
~	O
i	int
)	O
&	O
j	int
)	O
;	O
}	O
static	O
fixnum	function
andc2_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
i	int
&	O
(	O
~	O
j	int
)	O
)	O
;	O
}	O
static	O
fixnum	function
orc1_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
(	O
~	O
i	int
)	O
|	O
j	int
)	O
;	O
}	O
static	O
fixnum	function
orc2_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
i	int
|	O
(	O
~	O
j	int
)	O
)	O
;	O
}	O
static	O
fixnum	function
b_clr_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
fixnum	function
b_set_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
static	O
fixnum	function
b_1_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
i	int
)	O
;	O
}	O
static	O
fixnum	function
b_2_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
j	int
)	O
;	O
}	O
static	O
fixnum	function
b_c1_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
~	O
i	int
)	O
;	O
}	O
static	O
fixnum	function
b_c2_op	function
(	O
fixnum	function
i	int
,	O
fixnum	function
j	int
)	O
{	O
return	O
(	O
~	O
j	int
)	O
;	O
}	O
LFD	function
(	O
siLbit_array_op	int
)	O
(	O
void	O
)	O
{	O
fixnum	function
i	int
,	O
j	int
,	O
n	O
,	O
d	O
;	O
object	O
o	O
,	O
x	int
,	O
y	int
,	O
r	O
,	O
r0	O
=	O
Cnil	O
;	O
fixnum	function
(	O
*	O
op	O
)	O
(	O
)	O
=	O
NULL	O
;	O
bool	O
replace	O
=	O
FALSE	O
;	O
fixnum	function
xi	O
,	O
yi	O
,	O
ri	O
;	O
char	O
*	O
xp	pointer
,	O
*	O
yp	pointer
,	O
*	O
rp	pointer
;	O
fixnum	function
xo	O
,	O
yo	O
,	O
ro	O
;	O
object	O
*	O
base	O
=	O
vs_base	O
;	O
check_arg	function
(	O
4	int
)	O
;	O
o	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
x	int
=	O
vs_base	O
[	O
1	int
]	O
;	O
y	int
=	O
vs_base	O
[	O
2	int
]	O
;	O
r	O
=	O
vs_base	O
[	O
3	int
]	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_bitvector	O
)	O
{	O
d	O
=	O
x	int
->	O
bv	O
.	O
bv_dim	O
;	O
xp	pointer
=	O
x	int
->	O
bv	O
.	O
bv_self	O
;	O
xo	O
=	O
BV_OFFSET	function
(	O
x	int
)	O
;	O
if	O
(	O
type_of	function
(	O
y	int
)	O
!=	O
t_bitvector	O
)	O
goto	O
ERROR	O
;	O
if	O
(	O
d	O
!=	O
y	int
->	O
bv	O
.	O
bv_dim	O
)	O
goto	O
ERROR	O
;	O
yp	pointer
=	O
y	int
->	O
bv	O
.	O
bv_self	O
;	O
yo	O
=	O
BV_OFFSET	function
(	O
y	int
)	O
;	O
if	O
(	O
r	O
==	O
Ct	O
)	O
r	O
=	O
x	int
;	O
if	O
(	O
r	O
!=	O
Cnil	O
)	O
{	O
if	O
(	O
type_of	function
(	O
r	O
)	O
!=	O
t_bitvector	O
)	O
goto	O
ERROR	O
;	O
if	O
(	O
r	O
->	O
bv	O
.	O
bv_dim	O
!=	O
d	O
)	O
goto	O
ERROR	O
;	O
i	int
=	O
(	O
r	O
->	O
bv	O
.	O
bv_self	O
-	O
xp	pointer
)	O
*	O
8	int
+	O
(	O
BV_OFFSET	function
(	O
r	O
)	O
-	O
xo	O
)	O
;	O
if	O
(	O
(	O
i	int
>	O
0	int
&&	O
i	int
<	O
d	O
)	O
||	O
(	O
i	int
<	O
0	int
&&	O
-	O
i	int
<	O
d	O
)	O
)	O
{	O
r0	O
=	O
r	O
;	O
r	O
=	O
Cnil	O
;	O
replace	O
=	O
TRUE	O
;	O
goto	O
L1	O
;	O
}	O
i	int
=	O
(	O
r	O
->	O
bv	O
.	O
bv_self	O
-	O
yp	pointer
)	O
*	O
8	int
+	O
(	O
BV_OFFSET	function
(	O
r	O
)	O
-	O
yo	O
)	O
;	O
if	O
(	O
(	O
i	int
>	O
0	int
&&	O
i	int
<	O
d	O
)	O
||	O
(	O
i	int
<	O
0	int
&&	O
-	O
i	int
<	O
d	O
)	O
)	O
{	O
r0	O
=	O
r	O
;	O
r	O
=	O
Cnil	O
;	O
replace	O
=	O
TRUE	O
;	O
}	O
}	O
L1	O
:	O
if	O
(	O
r	O
==	O
Cnil	O
)	O
{	O
vs_base	O
=	O
vs_top	O
;	O
vs_push	function
(	O
sLbit	O
)	O
;	O
vs_push	function
(	O
make_fixnum	function
(	O
d	O
)	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
siLmake_vector	function
(	O
)	O
;	O
r	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
type_of	function
(	O
x	int
)	O
!=	O
t_array	O
)	O
goto	O
ERROR	O
;	O
if	O
(	O
(	O
enum	O
aelttype	O
)	O
x	int
->	O
a	O
.	O
a_elttype	O
!=	O
aet_bit	O
)	O
goto	O
ERROR	O
;	O
d	O
=	O
x	int
->	O
a	O
.	O
a_dim	O
;	O
xp	pointer
=	O
x	int
->	O
bv	O
.	O
bv_self	O
;	O
xo	O
=	O
BV_OFFSET	function
(	O
x	int
)	O
;	O
if	O
(	O
type_of	function
(	O
y	int
)	O
!=	O
t_array	O
)	O
goto	O
ERROR	O
;	O
if	O
(	O
(	O
enum	O
aelttype	O
)	O
y	int
->	O
a	O
.	O
a_elttype	O
!=	O
aet_bit	O
)	O
goto	O
ERROR	O
;	O
if	O
(	O
x	int
->	O
a	O
.	O
a_rank	O
!=	O
y	int
->	O
a	O
.	O
a_rank	O
)	O
goto	O
ERROR	O
;	O
yp	pointer
=	O
y	int
->	O
bv	O
.	O
bv_self	O
;	O
yo	O
=	O
BV_OFFSET	function
(	O
y	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
x	int
->	O
a	O
.	O
a_rank	O
;	O
i	int
++	O
)	O
if	O
(	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
i	int
]	O
!=	O
y	int
->	O
a	O
.	O
a_dims	O
[	O
i	int
]	O
)	O
goto	O
ERROR	O
;	O
if	O
(	O
r	O
==	O
Ct	O
)	O
r	O
=	O
x	int
;	O
if	O
(	O
r	O
!=	O
Cnil	O
)	O
{	O
if	O
(	O
type_of	function
(	O
r	O
)	O
!=	O
t_array	O
)	O
goto	O
ERROR	O
;	O
if	O
(	O
(	O
enum	O
aelttype	O
)	O
r	O
->	O
a	O
.	O
a_elttype	O
!=	O
aet_bit	O
)	O
goto	O
ERROR	O
;	O
if	O
(	O
r	O
->	O
a	O
.	O
a_rank	O
!=	O
x	int
->	O
a	O
.	O
a_rank	O
)	O
goto	O
ERROR	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
x	int
->	O
a	O
.	O
a_rank	O
;	O
i	int
++	O
)	O
if	O
(	O
r	O
->	O
a	O
.	O
a_dims	O
[	O
i	int
]	O
!=	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
i	int
]	O
)	O
goto	O
ERROR	O
;	O
i	int
=	O
(	O
r	O
->	O
bv	O
.	O
bv_self	O
-	O
xp	pointer
)	O
*	O
8	int
+	O
(	O
BV_OFFSET	function
(	O
r	O
)	O
-	O
xo	O
)	O
;	O
if	O
(	O
(	O
i	int
>	O
0	int
&&	O
i	int
<	O
d	O
)	O
||	O
(	O
i	int
<	O
0	int
&&	O
-	O
i	int
<	O
d	O
)	O
)	O
{	O
r0	O
=	O
r	O
;	O
r	O
=	O
Cnil	O
;	O
replace	O
=	O
TRUE	O
;	O
goto	O
L2	O
;	O
}	O
i	int
=	O
(	O
r	O
->	O
bv	O
.	O
bv_self	O
-	O
yp	pointer
)	O
*	O
8	int
+	O
(	O
BV_OFFSET	function
(	O
r	O
)	O
-	O
yo	O
)	O
;	O
if	O
(	O
(	O
i	int
>	O
0	int
&&	O
i	int
<	O
d	O
)	O
||	O
(	O
i	int
<	O
0	int
&&	O
-	O
i	int
<	O
d	O
)	O
)	O
{	O
r0	O
=	O
r	O
;	O
r	O
=	O
Cnil	O
;	O
replace	O
=	O
TRUE	O
;	O
}	O
}	O
L2	O
:	O
if	O
(	O
r	O
==	O
Cnil	O
)	O
{	O
object	O
b	O
;	O
struct	O
cons	O
*	O
p	int
=	O
alloca	function
(	O
x	int
->	O
a	O
.	O
a_rank	O
*	O
sizeof	O
(	O
struct	O
cons	O
)	O
)	O
;	O
if	O
(	O
x	int
->	O
a	O
.	O
a_rank	O
)	O
{	O
object	O
b1	O
;	O
b	O
=	O
(	O
object	O
)	O
p	int
;	O
for	O
(	O
b1	O
=	O
b	O
,	O
i	int
=	O
0	int
;	O
i	int
<	O
x	int
->	O
a	O
.	O
a_rank	O
;	O
i	int
++	O
,	O
b1	O
=	O
b1	O
->	O
c	O
.	O
c_cdr	O
)	O
{	O
b1	O
->	O
c	O
.	O
c_car	O
=	O
make_fixnum	function
(	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
i	int
]	O
)	O
;	O
b1	O
->	O
c	O
.	O
c_cdr	O
=	O
i	int
<	O
x	int
->	O
a	O
.	O
a_rank	O
-	O
1	int
?	O
(	O
object	O
)	O
++	O
p	int
:	O
Cnil	O
;	O
}	O
}	O
else	O
b	O
=	O
Cnil	O
;	O
r	O
=	O
fSmake_array1	function
(	O
aet_bit	O
,	O
Cnil	O
,	O
small_fixnum	function
(	O
0	int
)	O
,	O
Cnil	O
,	O
0	int
,	O
b	O
)	O
;	O
}	O
}	O
rp	pointer
=	O
r	O
->	O
bv	O
.	O
bv_self	O
;	O
ro	O
=	O
BV_OFFSET	function
(	O
r	O
)	O
;	O
switch	O
(	O
fixint	function
(	O
o	O
)	O
)	O
{	O
case	O
BOOLCLR	O
:	O
op	O
=	O
b_clr_op	function
;	O
break	O
;	O
case	O
BOOLSET	O
:	O
op	O
=	O
b_set_op	function
;	O
break	O
;	O
case	O
BOOL1	O
:	O
op	O
=	O
b_1_op	function
;	O
break	O
;	O
case	O
BOOL2	O
:	O
op	O
=	O
b_2_op	function
;	O
break	O
;	O
case	O
BOOLC1	O
:	O
op	O
=	O
b_c1_op	function
;	O
break	O
;	O
case	O
BOOLC2	O
:	O
op	O
=	O
b_c2_op	function
;	O
break	O
;	O
case	O
BOOLAND	O
:	O
op	O
=	O
and_op	function
;	O
break	O
;	O
case	O
BOOLIOR	O
:	O
op	O
=	O
ior_op	function
;	O
break	O
;	O
case	O
BOOLXOR	O
:	O
op	O
=	O
xor_op	function
;	O
break	O
;	O
case	O
BOOLEQV	O
:	O
op	O
=	O
eqv_op	function
;	O
break	O
;	O
case	O
BOOLNAND	O
:	O
op	O
=	O
nand_op	function
;	O
break	O
;	O
case	O
BOOLNOR	O
:	O
op	O
=	O
nor_op	function
;	O
break	O
;	O
case	O
BOOLANDC1	O
:	O
op	O
=	O
andc1_op	function
;	O
break	O
;	O
case	O
BOOLANDC2	O
:	O
op	O
=	O
andc2_op	function
;	O
break	O
;	O
case	O
BOOLORC1	O
:	O
op	O
=	O
orc1_op	function
;	O
break	O
;	O
case	O
BOOLORC2	O
:	O
op	O
=	O
orc2_op	function
;	O
break	O
;	O
default	O
:	O
FEerror	function
(	O
"~S is an invalid logical operator."	pointer
,	O
1	int
,	O
o	O
)	O
;	O
}	O
if	O
(	O
xo	O
==	O
0	int
&&	O
yo	O
==	O
0	int
&&	O
ro	O
==	O
0	int
)	O
{	O
for	O
(	O
n	O
=	O
d	O
/	O
8	int
,	O
i	int
=	O
0	int
;	O
i	int
<	O
n	O
;	O
i	int
++	O
)	O
rp	pointer
[	O
i	int
]	O
=	O
(	O
*	O
op	O
)	O
(	O
xp	pointer
[	O
i	int
]	O
,	O
yp	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
(	O
j	int
=	O
d	O
%	O
8	int
)	O
>	O
0	int
)	O
set_high	O
(	O
rp	pointer
[	O
n	O
]	O
,	O
j	int
,	O
(	O
*	O
op	O
)	O
(	O
xp	pointer
[	O
n	O
]	O
,	O
yp	pointer
[	O
n	O
]	O
)	O
)	O
;	O
if	O
(	O
!	O
replace	O
)	O
{	O
vs_top	O
=	O
vs_base	O
=	O
base	O
;	O
vs_push	function
(	O
r	O
)	O
;	O
return	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
n	O
=	O
d	O
/	O
8	int
,	O
i	int
=	O
0	int
;	O
i	int
<=	O
n	O
;	O
i	int
++	O
)	O
{	O
extract_byte	O
(	O
xi	O
,	O
xp	pointer
,	O
i	int
,	O
xo	O
)	O
;	O
extract_byte	O
(	O
yi	O
,	O
yp	pointer
,	O
i	int
,	O
yo	O
)	O
;	O
if	O
(	O
i	int
==	O
n	O
)	O
{	O
if	O
(	O
(	O
j	int
=	O
d	O
%	O
8	int
)	O
==	O
0	int
)	O
break	O
;	O
extract_byte	O
(	O
ri	O
,	O
rp	pointer
,	O
n	O
,	O
ro	O
)	O
;	O
set_high	O
(	O
ri	O
,	O
j	int
,	O
(	O
*	O
op	O
)	O
(	O
xi	O
,	O
yi	O
)	O
)	O
;	O
}	O
else	O
ri	O
=	O
(	O
*	O
op	O
)	O
(	O
xi	O
,	O
yi	O
)	O
;	O
store_byte	O
(	O
rp	pointer
,	O
i	int
,	O
ro	O
,	O
ri	O
)	O
;	O
}	O
if	O
(	O
!	O
replace	O
)	O
{	O
vs_top	O
=	O
vs_base	O
=	O
base	O
;	O
vs_push	function
(	O
r	O
)	O
;	O
return	O
;	O
}	O
}	O
rp	pointer
=	O
r0	O
->	O
bv	O
.	O
bv_self	O
;	O
ro	O
=	O
BV_OFFSET	function
(	O
r0	O
)	O
;	O
for	O
(	O
n	O
=	O
d	O
/	O
8	int
,	O
i	int
=	O
0	int
;	O
i	int
<=	O
n	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
==	O
n	O
)	O
{	O
if	O
(	O
(	O
j	int
=	O
d	O
%	O
8	int
)	O
==	O
0	int
)	O
break	O
;	O
extract_byte	O
(	O
ri	O
,	O
rp	pointer
,	O
n	O
,	O
ro	O
)	O
;	O
set_high	O
(	O
ri	O
,	O
j	int
,	O
r	O
->	O
bv	O
.	O
bv_self	O
[	O
n	O
]	O
)	O
;	O
}	O
else	O
ri	O
=	O
r	O
->	O
bv	O
.	O
bv_self	O
[	O
i	int
]	O
;	O
store_byte	O
(	O
rp	pointer
,	O
i	int
,	O
ro	O
,	O
ri	O
)	O
;	O
}	O
vs_top	O
=	O
vs_base	O
=	O
base	O
;	O
vs_push	function
(	O
r0	O
)	O
;	O
return	O
;	O
ERROR	O
:	O
FEerror	function
(	O
"Illegal arguments for bit-array operation."	pointer
,	O
0	int
)	O
;	O
}	O
void	O
gcl_init_num_log	function
(	O
void	O
)	O
{	O
make_constant	function
(	O
"BOOLE-CLR"	pointer
,	O
make_fixnum	function
(	O
BOOLCLR	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-SET"	pointer
,	O
make_fixnum	function
(	O
BOOLSET	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-1"	pointer
,	O
make_fixnum	function
(	O
BOOL1	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-2"	pointer
,	O
make_fixnum	function
(	O
BOOL2	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-C1"	pointer
,	O
make_fixnum	function
(	O
BOOLC1	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-C2"	pointer
,	O
make_fixnum	function
(	O
BOOLC2	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-AND"	pointer
,	O
make_fixnum	function
(	O
BOOLAND	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-IOR"	pointer
,	O
make_fixnum	function
(	O
BOOLIOR	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-XOR"	pointer
,	O
make_fixnum	function
(	O
BOOLXOR	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-EQV"	pointer
,	O
make_fixnum	function
(	O
BOOLEQV	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-NAND"	pointer
,	O
make_fixnum	function
(	O
BOOLNAND	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-NOR"	pointer
,	O
make_fixnum	function
(	O
BOOLNOR	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-ANDC1"	pointer
,	O
make_fixnum	function
(	O
BOOLANDC1	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-ANDC2"	pointer
,	O
make_fixnum	function
(	O
BOOLANDC2	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-ORC1"	pointer
,	O
make_fixnum	function
(	O
BOOLORC1	O
)	O
)	O
;	O
make_constant	function
(	O
"BOOLE-ORC2"	pointer
,	O
make_fixnum	function
(	O
BOOLORC2	O
)	O
)	O
;	O
make_function	function
(	O
"LOGIOR"	pointer
,	O
Llogior	int
)	O
;	O
make_function	function
(	O
"LOGXOR"	pointer
,	O
Llogxor	int
)	O
;	O
make_function	function
(	O
"LOGAND"	pointer
,	O
Llogand	int
)	O
;	O
make_function	function
(	O
"LOGEQV"	pointer
,	O
Llogeqv	int
)	O
;	O
make_function	function
(	O
"BOOLE"	pointer
,	O
Lboole	int
)	O
;	O
make_function	function
(	O
"LOGBITP"	pointer
,	O
Llogbitp	int
)	O
;	O
make_function	function
(	O
"ASH"	pointer
,	O
Lash	int
)	O
;	O
make_function	function
(	O
"LOGCOUNT"	pointer
,	O
Llogcount	int
)	O
;	O
make_function	function
(	O
"INTEGER-LENGTH"	pointer
,	O
Linteger_length	int
)	O
;	O
sLbit	O
=	O
make_ordinary	function
(	O
"BIT"	pointer
)	O
;	O
make_si_function	function
(	O
"BIT-ARRAY-OP"	pointer
,	O
siLbit_array_op	int
)	O
;	O
}	O
