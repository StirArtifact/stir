static	O
int	O
moderator_filter_message	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
int	O
*	O
pdiscard	pointer
)	O
{	O
int	O
rc	int
;	O
mu_sieve_machine_t	pointer
newmach	pointer
;	O
mu_attribute_t	pointer
attr	pointer
;	O
char	O
*	O
arg	pointer
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"source"	pointer
,	O
SVT_STRING	int
,	O
&	O
arg	pointer
)	O
)	O
{	O
rc	int
=	O
mu_sieve_machine_clone	function
(	O
mach	pointer
,	O
&	O
newmach	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot initialize sieve machine: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_sieve_compile	function
(	O
newmach	pointer
,	O
arg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot compile source `%s'"	pointer
)	O
,	O
arg	pointer
)	O
;	O
}	O
else	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"program"	pointer
,	O
SVT_STRING	int
,	O
&	O
arg	pointer
)	O
)	O
{	O
struct	O
mu_locus_range	struct
locrange	struct
=	O
MU_LOCUS_RANGE_INITIALIZER	O
;	O
rc	int
=	O
mu_sieve_machine_clone	function
(	O
mach	pointer
,	O
&	O
newmach	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot initialize sieve machine: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_sieve_get_locus	function
(	O
mach	pointer
,	O
&	O
locrange	struct
)	O
;	O
rc	int
=	O
mu_sieve_compile_text	function
(	O
newmach	pointer
,	O
arg	pointer
,	O
strlen	function
(	O
arg	pointer
)	O
,	O
&	O
locrange	struct
.	O
beg	struct
)	O
;	O
if	O
(	O
rc	int
)	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot compile subprogram"	pointer
)	O
)	O
;	O
}	O
else	O
rc	int
=	O
mu_sieve_machine_dup	function
(	O
mach	pointer
,	O
&	O
newmach	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
mu_attribute_unset_deleted	function
(	O
attr	pointer
)	O
;	O
rc	int
=	O
mu_sieve_message	function
(	O
newmach	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_sieve_error	function
(	O
newmach	pointer
,	O
_	O
(	O
"failed to run inferior sieve machine"	pointer
)	O
)	O
;	O
else	O
*	O
pdiscard	pointer
=	O
mu_attribute_is_deleted	function
(	O
attr	pointer
)	O
;	O
mu_sieve_machine_destroy	function
(	O
&	O
newmach	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
copy_header	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_header_t	pointer
to_hdr	pointer
,	O
char	O
*	O
to	pointer
,	O
mu_header_t	pointer
from_hdr	pointer
,	O
char	O
*	O
from	pointer
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
value	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
rc	int
=	O
mu_header_sget_value	O
(	O
from_hdr	pointer
,	O
from	pointer
,	O
&	O
value	pointer
)	O
)	O
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot get `%s:' header: %s"	pointer
)	O
,	O
from	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_header_set_value	function
(	O
to_hdr	pointer
,	O
to	pointer
,	O
value	pointer
,	O
1	int
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
moderator_discard_message	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_message_t	pointer
request	pointer
,	O
const	O
char	O
*	O
from	pointer
)	O
{	O
int	O
rc	int
;	O
mu_message_t	pointer
reply	pointer
;	O
mu_header_t	pointer
repl_hdr	pointer
,	O
req_hdr	pointer
;	O
mu_mailer_t	pointer
mailer	pointer
;	O
rc	int
=	O
mu_message_create	function
(	O
&	O
reply	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_header	function
(	O
reply	pointer
,	O
&	O
repl_hdr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_message_destroy	function
(	O
&	O
reply	pointer
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_message_get_header	function
(	O
request	pointer
,	O
&	O
req_hdr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_message_destroy	function
(	O
&	O
reply	pointer
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
copy_header	function
(	O
mach	pointer
,	O
repl_hdr	pointer
,	O
MU_HEADER_TO	pointer
,	O
req_hdr	pointer
,	O
MU_HEADER_FROM	pointer
)	O
||	O
copy_header	function
(	O
mach	pointer
,	O
repl_hdr	pointer
,	O
MU_HEADER_SUBJECT	pointer
,	O
req_hdr	pointer
,	O
MU_HEADER_SUBJECT	pointer
)	O
)	O
{	O
mu_message_destroy	function
(	O
&	O
reply	pointer
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
from	pointer
)	O
mu_header_set_value	function
(	O
repl_hdr	pointer
,	O
MU_HEADER_FROM	pointer
,	O
from	pointer
,	O
1	int
)	O
;	O
mailer	pointer
=	O
mu_sieve_get_mailer	function
(	O
mach	pointer
)	O
;	O
rc	int
=	O
mu_mailer_open	function
(	O
mailer	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot open mailer: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
{	O
rc	int
=	O
mu_mailer_send_message	function
(	O
mailer	pointer
,	O
reply	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
mu_mailer_close	function
(	O
mailer	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot send message: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
mu_message_destroy	function
(	O
&	O
reply	pointer
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
moderator_message_get_part	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
index	function
,	O
mu_message_t	pointer
*	O
pmsg	pointer
)	O
{	O
int	O
rc	int
;	O
mu_message_t	pointer
tmp	pointer
;	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
value	pointer
;	O
if	O
(	O
(	O
rc	int
=	O
mu_message_get_part	function
(	O
msg	pointer
,	O
index	function
,	O
&	O
tmp	pointer
)	O
)	O
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot get message part #%lu: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
index	function
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_message_get_header	function
(	O
tmp	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
&	O
value	pointer
)	O
==	O
0	int
&&	O
memcmp	function
(	O
value	pointer
,	O
"message/rfc822"	pointer
,	O
14	int
)	O
==	O
0	int
)	O
{	O
mu_stream_t	pointer
str	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
mu_message_get_body	function
(	O
tmp	pointer
,	O
&	O
body	pointer
)	O
;	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
str	pointer
)	O
;	O
rc	int
=	O
mu_stream_to_message	function
(	O
str	pointer
,	O
pmsg	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot convert MIME part stream to message: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
value	pointer
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"expected message type message/rfc822, but found %s"	pointer
)	O
,	O
value	pointer
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"no Content-Type header found"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
moderator_action	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
,	O
orig	pointer
;	O
int	O
rc	int
;	O
size_t	long
nparts	pointer
=	O
0	int
;	O
int	O
discard	int
=	O
0	int
;	O
int	O
ismime	int
;	O
msg	pointer
=	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
;	O
mu_message_is_multipart	function
(	O
msg	pointer
,	O
&	O
ismime	int
)	O
;	O
if	O
(	O
!	O
ismime	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"message is not multipart"	pointer
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
rc	int
=	O
mu_message_get_num_parts	function
(	O
msg	pointer
,	O
&	O
nparts	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"mu_message_get_num_parts: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
if	O
(	O
nparts	pointer
!=	O
3	int
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"expected 3 parts, but found %lu"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
nparts	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
moderator_message_get_part	function
(	O
mach	pointer
,	O
msg	pointer
,	O
2	int
,	O
&	O
orig	pointer
)	O
)	O
)	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
rc	int
=	O
moderator_filter_message	function
(	O
mach	pointer
,	O
orig	pointer
,	O
&	O
discard	int
)	O
;	O
mu_message_unref	function
(	O
orig	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
if	O
(	O
discard	int
&&	O
!	O
mu_sieve_is_dry_run	function
(	O
mach	pointer
)	O
)	O
{	O
mu_message_t	pointer
request	pointer
;	O
char	O
*	O
from	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
rc	int
=	O
moderator_message_get_part	function
(	O
mach	pointer
,	O
msg	pointer
,	O
3	int
,	O
&	O
request	pointer
)	O
)	O
)	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
_	O
(	O
"cannot get message part #3: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"address"	pointer
,	O
SVT_STRING	int
,	O
&	O
from	pointer
)	O
;	O
if	O
(	O
moderator_discard_message	function
(	O
mach	pointer
,	O
request	pointer
,	O
from	pointer
)	O
)	O
discard	int
=	O
0	int
;	O
else	O
{	O
if	O
(	O
!	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"keep"	pointer
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
{	O
mu_attribute_t	pointer
attr	pointer
=	O
0	int
;	O
if	O
(	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
==	O
0	int
)	O
mu_attribute_set_deleted	function
(	O
attr	pointer
)	O
;	O
}	O
else	O
discard	int
=	O
0	int
;	O
}	O
mu_message_unref	function
(	O
request	pointer
)	O
;	O
}	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"MODERATOR"	pointer
,	O
discard	int
?	O
_	O
(	O
"discarding message"	pointer
)	O
:	O
_	O
(	O
"keeping message"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
mu_sieve_data_type	enum
moderator_req_args	array
[	O
]	O
=	O
{	O
SVT_VOID	int
}	O
;	O
static	O
mu_sieve_tag_def_t	struct
moderator_tags	array
[	O
]	O
=	O
{	O
{	O
"keep"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"address"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"source"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
"program"	pointer
,	O
SVT_STRING	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
moderator_tag_groups	array
[	O
]	O
=	O
{	O
{	O
moderator_tags	array
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
SIEVE_EXPORT	O
(	O
moderator	O
,	O
init	O
)	O
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"moderator"	pointer
,	O
moderator_action	function
,	O
moderator_req_args	array
,	O
moderator_tag_groups	array
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
