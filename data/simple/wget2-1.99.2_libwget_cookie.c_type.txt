struct	O
wget_cookie_db_st	struct
{	O
wget_vector	struct
*	O
cookies	pointer
;	O
wget_thread_mutex	pointer
mutex	pointer
;	O
unsigned	O
int	O
age	int
;	O
bool	bool
keep_session_cookies	bool
:	O
1	int
;	O
}	O
;	O
int	O
wget_cookie_db_load_psl	function
(	O
wget_cookie_db	struct
*	O
cookie_db	pointer
,	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
(	O
void	O
)	O
cookie_db	pointer
;	O
(	O
void	O
)	O
fname	pointer
;	O
return	O
-	O
1	int
;	O
}	O
WGET_GCC_NONNULL_ALL	O
WGET_GCC_PURE	O
static	O
int	O
compare_cookie	function
(	O
const	O
wget_cookie	struct
*	O
c1	pointer
,	O
const	O
wget_cookie	struct
*	O
c2	pointer
)	O
{	O
int	O
n	long
;	O
if	O
(	O
!	O
(	O
n	long
=	O
wget_strcmp	function
(	O
c1	pointer
->	O
domain	pointer
,	O
c2	pointer
->	O
domain	pointer
)	O
)	O
)	O
{	O
if	O
(	O
!	O
(	O
n	long
=	O
wget_strcmp	function
(	O
c1	pointer
->	O
name	pointer
,	O
c2	pointer
->	O
name	pointer
)	O
)	O
)	O
{	O
n	long
=	O
wget_strcmp	function
(	O
c1	pointer
->	O
path	pointer
,	O
c2	pointer
->	O
path	pointer
)	O
;	O
}	O
}	O
return	O
n	long
;	O
}	O
WGET_GCC_NONNULL_ALL	O
WGET_GCC_PURE	O
static	O
int	O
compare_cookie2	function
(	O
const	O
wget_cookie	struct
*	O
c1	pointer
,	O
const	O
wget_cookie	struct
*	O
c2	pointer
)	O
{	O
size_t	long
len1	long
=	O
strlen	function
(	O
c1	pointer
->	O
path	pointer
)	O
;	O
size_t	long
len2	long
=	O
strlen	function
(	O
c2	pointer
->	O
path	pointer
)	O
;	O
if	O
(	O
len1	long
<	O
len2	long
)	O
return	O
1	int
;	O
if	O
(	O
len1	long
>	O
len2	long
)	O
return	O
-	O
1	int
;	O
if	O
(	O
c1	pointer
->	O
sort_age	int
<	O
c2	pointer
->	O
sort_age	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
c1	pointer
->	O
sort_age	int
>	O
c2	pointer
->	O
sort_age	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
wget_cookie_check_psl	function
(	O
const	O
wget_cookie_db	struct
*	O
cookie_db	pointer
,	O
const	O
wget_cookie	struct
*	O
cookie	pointer
)	O
{	O
(	O
void	O
)	O
cookie_db	pointer
;	O
(	O
void	O
)	O
cookie	pointer
;	O
int	O
ret	int
=	O
0	int
;	O
return	O
ret	int
;	O
}	O
int	O
wget_cookie_store_cookie	function
(	O
wget_cookie_db	struct
*	O
cookie_db	pointer
,	O
wget_cookie	struct
*	O
cookie	pointer
)	O
{	O
wget_cookie	struct
*	O
old	pointer
;	O
int	O
pos	int
;	O
if	O
(	O
!	O
cookie	pointer
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
cookie_db	pointer
)	O
{	O
wget_cookie_free	function
(	O
&	O
cookie	pointer
)	O
;	O
return	O
WGET_E_INVALID	int
;	O
}	O
debug_printf	O
(	O
"got cookie %s=%s\n"	pointer
,	O
cookie	pointer
->	O
name	pointer
,	O
cookie	pointer
->	O
value	pointer
)	O
;	O
if	O
(	O
!	O
cookie	pointer
->	O
normalized	bool
)	O
{	O
debug_printf	O
(	O
"cookie '%s' dropped, it wasn't normalized\n"	pointer
,	O
cookie	pointer
->	O
name	pointer
)	O
;	O
wget_cookie_free	function
(	O
&	O
cookie	pointer
)	O
;	O
return	O
WGET_E_INVALID	int
;	O
}	O
if	O
(	O
wget_cookie_check_psl	function
(	O
cookie_db	pointer
,	O
cookie	pointer
)	O
!=	O
0	int
)	O
{	O
debug_printf	O
(	O
"cookie '%s' dropped, domain '%s' is a public suffix\n"	pointer
,	O
cookie	pointer
->	O
name	pointer
,	O
cookie	pointer
->	O
domain	pointer
)	O
;	O
wget_cookie_free	function
(	O
&	O
cookie	pointer
)	O
;	O
return	O
WGET_E_INVALID	int
;	O
}	O
wget_thread_mutex_lock	function
(	O
cookie_db	pointer
->	O
mutex	pointer
)	O
;	O
old	pointer
=	O
wget_vector_get	function
(	O
cookie_db	pointer
->	O
cookies	pointer
,	O
pos	int
=	O
wget_vector_find	function
(	O
cookie_db	pointer
->	O
cookies	pointer
,	O
cookie	pointer
)	O
)	O
;	O
if	O
(	O
old	pointer
)	O
{	O
debug_printf	O
(	O
"replace old cookie %s=%s\n"	pointer
,	O
cookie	pointer
->	O
name	pointer
,	O
cookie	pointer
->	O
value	pointer
)	O
;	O
cookie	pointer
->	O
creation	long
=	O
old	pointer
->	O
creation	long
;	O
cookie	pointer
->	O
sort_age	int
=	O
old	pointer
->	O
sort_age	int
;	O
wget_vector_replace	function
(	O
cookie_db	pointer
->	O
cookies	pointer
,	O
cookie	pointer
,	O
pos	int
)	O
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"store new cookie %s=%s\n"	pointer
,	O
cookie	pointer
->	O
name	pointer
,	O
cookie	pointer
->	O
value	pointer
)	O
;	O
cookie	pointer
->	O
sort_age	int
=	O
++	O
cookie_db	pointer
->	O
age	int
;	O
wget_vector_insert_sorted	function
(	O
cookie_db	pointer
->	O
cookies	pointer
,	O
cookie	pointer
)	O
;	O
}	O
wget_thread_mutex_unlock	function
(	O
cookie_db	pointer
->	O
mutex	pointer
)	O
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
void	O
wget_cookie_store_cookies	function
(	O
wget_cookie_db	struct
*	O
cookie_db	pointer
,	O
wget_vector	struct
*	O
cookies	pointer
)	O
{	O
if	O
(	O
cookie_db	pointer
)	O
{	O
int	O
it	int
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
cookies	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_cookie	struct
*	O
cookie	pointer
=	O
wget_vector_get	function
(	O
cookies	pointer
,	O
it	int
)	O
;	O
wget_cookie_store_cookie	function
(	O
cookie_db	pointer
,	O
cookie	pointer
)	O
;	O
}	O
wget_vector_clear_nofree	function
(	O
cookies	pointer
)	O
;	O
}	O
}	O
char	O
*	O
wget_cookie_create_request_header	function
(	O
wget_cookie_db	struct
*	O
cookie_db	pointer
,	O
const	O
wget_iri	struct
*	O
iri	pointer
)	O
{	O
int	O
it	int
,	O
init	pointer
=	O
0	int
;	O
time_t	long
now	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
wget_vector	struct
*	O
cookies	pointer
=	O
NULL	O
;	O
wget_buffer	struct
buf	pointer
;	O
if	O
(	O
!	O
cookie_db	pointer
||	O
!	O
iri	pointer
)	O
return	O
NULL	O
;	O
debug_printf	O
(	O
"cookie_create_request_header for host=%s path=%s\n"	pointer
,	O
iri	pointer
->	O
host	pointer
,	O
iri	pointer
->	O
path	pointer
)	O
;	O
wget_thread_mutex_lock	function
(	O
cookie_db	pointer
->	O
mutex	pointer
)	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
cookie_db	pointer
->	O
cookies	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_cookie	struct
*	O
cookie	pointer
=	O
wget_vector_get	function
(	O
cookie_db	pointer
->	O
cookies	pointer
,	O
it	int
)	O
;	O
if	O
(	O
cookie	pointer
->	O
host_only	bool
&&	O
strcmp	function
(	O
cookie	pointer
->	O
domain	pointer
,	O
iri	pointer
->	O
host	pointer
)	O
)	O
{	O
debug_printf	O
(	O
"cookie host match failed (%s,%s)\n"	pointer
,	O
cookie	pointer
->	O
domain	pointer
,	O
iri	pointer
->	O
host	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
cookie	pointer
->	O
host_only	bool
&&	O
!	O
cookie_domain_match	function
(	O
cookie	pointer
->	O
domain	pointer
,	O
iri	pointer
->	O
host	pointer
)	O
)	O
{	O
debug_printf	O
(	O
"cookie domain match failed (%s,%s)\n"	pointer
,	O
cookie	pointer
->	O
domain	pointer
,	O
iri	pointer
->	O
host	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
cookie	pointer
->	O
expires	long
&&	O
cookie	pointer
->	O
expires	long
<=	O
now	long
)	O
{	O
debug_printf	O
(	O
"cookie expired (%lld <= %lld)\n"	pointer
,	O
(	O
long	O
long	O
)	O
cookie	pointer
->	O
expires	long
,	O
(	O
long	O
long	O
)	O
now	long
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
cookie	pointer
->	O
secure_only	bool
&&	O
iri	pointer
->	O
scheme	enum
!=	O
WGET_IRI_SCHEME_HTTPS	int
)	O
{	O
debug_printf	O
(	O
"cookie ignored, not secure\n"	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
cookie_path_match	function
(	O
cookie	pointer
->	O
path	pointer
,	O
iri	pointer
->	O
path	pointer
)	O
)	O
{	O
debug_printf	O
(	O
"cookie path doesn't match (%s, %s)\n"	pointer
,	O
cookie	pointer
->	O
path	pointer
,	O
iri	pointer
->	O
path	pointer
)	O
;	O
continue	O
;	O
}	O
debug_printf	O
(	O
"found %s=%s\n"	pointer
,	O
cookie	pointer
->	O
name	pointer
,	O
cookie	pointer
->	O
value	pointer
)	O
;	O
if	O
(	O
!	O
cookies	pointer
)	O
cookies	pointer
=	O
wget_vector_create	function
(	O
16	int
,	O
(	O
wget_vector_compare_fn	function
*	O
)	O
compare_cookie2	function
)	O
;	O
wget_vector_add	function
(	O
cookies	pointer
,	O
cookie	pointer
)	O
;	O
}	O
wget_vector_sort	function
(	O
cookies	pointer
)	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
cookies	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_cookie	struct
*	O
cookie	pointer
=	O
wget_vector_get	function
(	O
cookies	pointer
,	O
it	int
)	O
;	O
if	O
(	O
!	O
init	pointer
)	O
{	O
wget_buffer_init	function
(	O
&	O
buf	pointer
,	O
NULL	O
,	O
128	int
)	O
;	O
init	pointer
=	O
1	int
;	O
}	O
if	O
(	O
buf	pointer
.	O
length	long
)	O
wget_buffer_printf_append	function
(	O
&	O
buf	pointer
,	O
"; %s=%s"	pointer
,	O
cookie	pointer
->	O
name	pointer
,	O
cookie	pointer
->	O
value	pointer
)	O
;	O
else	O
wget_buffer_printf_append	function
(	O
&	O
buf	pointer
,	O
"%s=%s"	pointer
,	O
cookie	pointer
->	O
name	pointer
,	O
cookie	pointer
->	O
value	pointer
)	O
;	O
}	O
wget_vector_clear_nofree	function
(	O
cookies	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
cookies	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
cookie_db	pointer
->	O
mutex	pointer
)	O
;	O
return	O
init	pointer
?	O
buf	pointer
.	O
data	pointer
:	O
NULL	O
;	O
}	O
wget_cookie_db	struct
*	O
wget_cookie_db_init	function
(	O
wget_cookie_db	struct
*	O
cookie_db	pointer
)	O
{	O
if	O
(	O
!	O
cookie_db	pointer
)	O
{	O
cookie_db	pointer
=	O
wget_malloc	function
(	O
sizeof	O
(	O
wget_cookie_db	struct
)	O
)	O
;	O
if	O
(	O
!	O
cookie_db	pointer
)	O
return	O
NULL	O
;	O
}	O
memset	function
(	O
cookie_db	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
cookie_db	pointer
)	O
)	O
;	O
cookie_db	pointer
->	O
cookies	pointer
=	O
wget_vector_create	function
(	O
32	int
,	O
(	O
wget_vector_compare_fn	function
*	O
)	O
compare_cookie	function
)	O
;	O
wget_vector_set_destructor	function
(	O
cookie_db	pointer
->	O
cookies	pointer
,	O
cookie_free	function
)	O
;	O
wget_thread_mutex_init	function
(	O
&	O
cookie_db	pointer
->	O
mutex	pointer
)	O
;	O
return	O
cookie_db	pointer
;	O
}	O
void	O
wget_cookie_db_deinit	function
(	O
wget_cookie_db	struct
*	O
cookie_db	pointer
)	O
{	O
if	O
(	O
cookie_db	pointer
)	O
{	O
wget_thread_mutex_lock	function
(	O
cookie_db	pointer
->	O
mutex	pointer
)	O
;	O
wget_vector_free	function
(	O
&	O
cookie_db	pointer
->	O
cookies	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
cookie_db	pointer
->	O
mutex	pointer
)	O
;	O
wget_thread_mutex_destroy	function
(	O
&	O
cookie_db	pointer
->	O
mutex	pointer
)	O
;	O
}	O
}	O
void	O
wget_cookie_db_free	function
(	O
wget_cookie_db	struct
*	O
*	O
cookie_db	pointer
)	O
{	O
if	O
(	O
cookie_db	pointer
)	O
{	O
wget_cookie_db_deinit	function
(	O
*	O
cookie_db	pointer
)	O
;	O
xfree	O
(	O
*	O
cookie_db	pointer
)	O
;	O
}	O
}	O
void	O
wget_cookie_set_keep_session_cookies	function
(	O
wget_cookie_db	struct
*	O
cookie_db	pointer
,	O
int	O
keep	int
)	O
{	O
if	O
(	O
cookie_db	pointer
)	O
cookie_db	pointer
->	O
keep_session_cookies	bool
=	O
!	O
!	O
keep	int
;	O
}	O
static	O
int	O
cookie_db_load	function
(	O
wget_cookie_db	struct
*	O
cookie_db	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
wget_cookie	struct
cookie	pointer
;	O
int	O
ncookies	int
=	O
0	int
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
,	O
*	O
linep	pointer
,	O
*	O
p	pointer
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
ssize_t	long
buflen	long
;	O
time_t	long
now	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
wget_cookie_init	function
(	O
&	O
cookie	pointer
)	O
;	O
while	O
(	O
(	O
buflen	long
=	O
wget_getline	function
(	O
&	O
buf	pointer
,	O
&	O
bufsize	long
,	O
fp	pointer
)	O
)	O
>=	O
0	int
)	O
{	O
linep	pointer
=	O
buf	pointer
;	O
while	O
(	O
isspace	function
(	O
*	O
linep	pointer
)	O
)	O
linep	pointer
++	O
;	O
if	O
(	O
!	O
*	O
linep	pointer
)	O
continue	O
;	O
if	O
(	O
*	O
linep	pointer
==	O
'#'	O
)	O
{	O
if	O
(	O
strncmp	function
(	O
linep	pointer
,	O
"#HttpOnly_"	pointer
,	O
10	int
)	O
)	O
continue	O
;	O
linep	pointer
=	O
linep	pointer
+	O
10	int
;	O
cookie	pointer
.	O
http_only	bool
=	O
1	int
;	O
}	O
else	O
{	O
cookie	pointer
.	O
http_only	bool
=	O
0	int
;	O
}	O
while	O
(	O
buflen	long
>	O
0	int
&&	O
(	O
buf	pointer
[	O
buflen	long
]	O
==	O
'\n'	O
||	O
buf	pointer
[	O
buflen	long
]	O
==	O
'\r'	O
)	O
)	O
buf	pointer
[	O
--	O
buflen	long
]	O
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
*	O
linep	pointer
!=	O
'\t'	O
;	O
)	O
linep	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
)	O
{	O
p	pointer
++	O
;	O
cookie	pointer
.	O
domain_dot	bool
=	O
1	int
;	O
}	O
cookie	pointer
.	O
domain	pointer
=	O
wget_strmemdup	function
(	O
p	pointer
,	O
linep	pointer
-	O
p	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
*	O
linep	pointer
?	O
++	O
linep	pointer
:	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
*	O
linep	pointer
!=	O
'\t'	O
;	O
)	O
linep	pointer
++	O
;	O
cookie	pointer
.	O
host_only	bool
=	O
wget_strncasecmp_ascii	function
(	O
p	pointer
,	O
"TRUE"	pointer
,	O
4	int
)	O
;	O
for	O
(	O
p	pointer
=	O
*	O
linep	pointer
?	O
++	O
linep	pointer
:	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
*	O
linep	pointer
!=	O
'\t'	O
;	O
)	O
linep	pointer
++	O
;	O
if	O
(	O
p	pointer
!=	O
linep	pointer
)	O
cookie	pointer
.	O
path	pointer
=	O
wget_strmemdup	function
(	O
p	pointer
,	O
linep	pointer
-	O
p	pointer
)	O
;	O
else	O
cookie	pointer
.	O
path	pointer
=	O
wget_strmemdup	function
(	O
"/"	pointer
,	O
1	int
)	O
;	O
for	O
(	O
p	pointer
=	O
*	O
linep	pointer
?	O
++	O
linep	pointer
:	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
*	O
linep	pointer
!=	O
'\t'	O
;	O
)	O
linep	pointer
++	O
;	O
cookie	pointer
.	O
secure_only	bool
=	O
!	O
wget_strncasecmp_ascii	function
(	O
p	pointer
,	O
"TRUE"	pointer
,	O
4	int
)	O
;	O
for	O
(	O
p	pointer
=	O
*	O
linep	pointer
?	O
++	O
linep	pointer
:	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
*	O
linep	pointer
!=	O
'\t'	O
;	O
)	O
linep	pointer
++	O
;	O
cookie	pointer
.	O
expires	long
=	O
(	O
time_t	long
)	O
atoll	function
(	O
p	pointer
)	O
;	O
if	O
(	O
cookie	pointer
.	O
expires	long
&&	O
cookie	pointer
.	O
expires	long
<=	O
now	long
)	O
{	O
wget_cookie_deinit	function
(	O
&	O
cookie	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
cookie	pointer
.	O
expires	long
&&	O
!	O
cookie_db	pointer
->	O
keep_session_cookies	bool
)	O
{	O
wget_cookie_deinit	function
(	O
&	O
cookie	pointer
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
p	pointer
=	O
*	O
linep	pointer
?	O
++	O
linep	pointer
:	O
linep	pointer
;	O
*	O
linep	pointer
&&	O
*	O
linep	pointer
!=	O
'\t'	O
;	O
)	O
linep	pointer
++	O
;	O
if	O
(	O
linep	pointer
==	O
p	pointer
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Incomplete cookie entry: %s\n"	pointer
)	O
,	O
buf	pointer
)	O
;	O
wget_cookie_deinit	function
(	O
&	O
cookie	pointer
)	O
;	O
continue	O
;	O
}	O
cookie	pointer
.	O
name	pointer
=	O
wget_strmemdup	function
(	O
p	pointer
,	O
linep	pointer
-	O
p	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
*	O
linep	pointer
?	O
++	O
linep	pointer
:	O
linep	pointer
;	O
*	O
linep	pointer
;	O
)	O
linep	pointer
++	O
;	O
cookie	pointer
.	O
value	pointer
=	O
wget_strmemdup	function
(	O
p	pointer
,	O
linep	pointer
-	O
p	pointer
)	O
;	O
if	O
(	O
wget_cookie_normalize	function
(	O
NULL	O
,	O
&	O
cookie	pointer
)	O
==	O
0	int
&&	O
wget_cookie_check_psl	function
(	O
cookie_db	pointer
,	O
&	O
cookie	pointer
)	O
==	O
0	int
)	O
{	O
ncookies	int
++	O
;	O
wget_cookie_store_cookie	function
(	O
cookie_db	pointer
,	O
wget_memdup	function
(	O
&	O
cookie	pointer
,	O
sizeof	O
(	O
cookie	pointer
)	O
)	O
)	O
;	O
}	O
else	O
wget_cookie_deinit	function
(	O
&	O
cookie	pointer
)	O
;	O
}	O
xfree	O
(	O
buf	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
return	O
ncookies	int
;	O
}	O
int	O
wget_cookie_db_load	function
(	O
wget_cookie_db	struct
*	O
cookie_db	pointer
,	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
if	O
(	O
!	O
cookie_db	pointer
||	O
!	O
fname	pointer
||	O
!	O
*	O
fname	pointer
)	O
return	O
0	int
;	O
if	O
(	O
wget_update_file	function
(	O
fname	pointer
,	O
(	O
wget_update_load_fn	function
*	O
)	O
cookie_db_load	function
,	O
NULL	O
,	O
cookie_db	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to read cookies\n"	pointer
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"Fetched cookies from '%s'\n"	pointer
,	O
fname	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
static	O
int	O
cookie_db_save	function
(	O
wget_cookie_db	struct
*	O
cookie_db	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
if	O
(	O
wget_vector_size	function
(	O
cookie_db	pointer
->	O
cookies	pointer
)	O
>	O
0	int
)	O
{	O
int	O
it	int
;	O
time_t	long
now	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
fputs	function
(	O
"# HTTP cookie file\n"	pointer
,	O
fp	pointer
)	O
;	O
fputs	function
(	O
"#Generated by Wget "	pointer
PACKAGE_VERSION	pointer
". Edit at your own risk.\n\n"	pointer
,	O
fp	pointer
)	O
;	O
for	O
(	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
cookie_db	pointer
->	O
cookies	pointer
)	O
;	O
it	int
++	O
)	O
{	O
wget_cookie	struct
*	O
cookie	pointer
=	O
wget_vector_get	function
(	O
cookie_db	pointer
->	O
cookies	pointer
,	O
it	int
)	O
;	O
if	O
(	O
cookie	pointer
->	O
persistent	bool
)	O
{	O
if	O
(	O
cookie	pointer
->	O
expires	long
<=	O
now	long
)	O
continue	O
;	O
}	O
else	O
if	O
(	O
!	O
cookie_db	pointer
->	O
keep_session_cookies	bool
)	O
continue	O
;	O
wget_fprintf	function
(	O
fp	pointer
,	O
"%s%s%s\t%s\t%s\t%s\t%lld\t%s\t%s\n"	pointer
,	O
cookie	pointer
->	O
http_only	bool
?	O
"#HttpOnly_"	pointer
:	O
""	pointer
,	O
cookie	pointer
->	O
domain_dot	bool
?	O
"."	pointer
:	O
""	pointer
,	O
cookie	pointer
->	O
domain	pointer
,	O
cookie	pointer
->	O
host_only	bool
?	O
"FALSE"	pointer
:	O
"TRUE"	pointer
,	O
cookie	pointer
->	O
path	pointer
,	O
cookie	pointer
->	O
secure_only	bool
?	O
"TRUE"	pointer
:	O
"FALSE"	pointer
,	O
(	O
long	O
long	O
)	O
cookie	pointer
->	O
expires	long
,	O
cookie	pointer
->	O
name	pointer
,	O
cookie	pointer
->	O
value	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
return	O
-	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
wget_cookie_db_save	function
(	O
wget_cookie_db	struct
*	O
cookie_db	pointer
,	O
const	O
char	O
*	O
fname	pointer
)	O
{	O
int	O
size	pointer
;	O
if	O
(	O
!	O
cookie_db	pointer
||	O
!	O
fname	pointer
||	O
!	O
*	O
fname	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
wget_update_file	function
(	O
fname	pointer
,	O
(	O
wget_update_load_fn	function
*	O
)	O
cookie_db_load	function
,	O
(	O
wget_update_save_fn	function
*	O
)	O
cookie_db_save	function
,	O
cookie_db	pointer
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to write cookie file '%s'\n"	pointer
)	O
,	O
fname	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
size	pointer
=	O
wget_vector_size	function
(	O
cookie_db	pointer
->	O
cookies	pointer
)	O
)	O
)	O
debug_printf	O
(	O
"Saved %d cookie%s into '%s'\n"	pointer
,	O
size	pointer
,	O
size	pointer
!=	O
1	int
?	O
"s"	pointer
:	O
""	pointer
,	O
fname	pointer
)	O
;	O
else	O
debug_printf	O
(	O
"No cookies to save. Table is empty.\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
