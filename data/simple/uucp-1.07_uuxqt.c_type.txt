const	O
char	O
uuxqt_rcsid	array
[	O
]	O
=	O
"$Id: uuxqt.c,v 1.92 2002/03/05 19:10:42 ian Rel $"	pointer
;	O
static	O
int	O
iQlock_seq	int
=	O
-	O
1	int
;	O
static	O
const	O
char	O
*	O
zQunlock_cmd	pointer
;	O
static	O
const	O
char	O
*	O
zQunlock_file	pointer
;	O
static	O
boolean	int
fQunlock_directory	int
;	O
int	O
cQmaxuuxqts	int
;	O
static	O
char	O
*	O
zQoutput	pointer
;	O
static	O
char	O
*	O
zQmail	pointer
;	O
static	O
void	O
uqusage	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
uqhelp	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
uqabort	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
uqdo_xqt_file	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
const	O
char	O
*	O
zfile	pointer
,	O
const	O
char	O
*	O
zbase	pointer
,	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
,	O
const	O
char	O
*	O
zlocalname	pointer
,	O
const	O
char	O
*	O
zcmd	pointer
,	O
boolean	int
*	O
pfprocessed	pointer
)	O
)	O
;	O
static	O
void	O
uqcleanup	function
P	O
(	O
(	O
const	O
char	O
*	O
zfile	pointer
,	O
int	O
iflags	int
)	O
)	O
;	O
static	O
int	O
isave_files	function
P	O
(	O
(	O
const	O
struct	O
uuconf_system	struct
*	O
,	O
const	O
char	O
*	O
zmail	pointer
,	O
const	O
char	O
*	O
zfile	pointer
,	O
int	O
iclean	int
)	O
)	O
;	O
static	O
boolean	int
fqforward	function
P	O
(	O
(	O
const	O
char	O
*	O
zfile	pointer
,	O
char	O
*	O
*	O
pzallowed	pointer
,	O
const	O
char	O
*	O
zlog	pointer
,	O
const	O
char	O
*	O
zmail	pointer
)	O
)	O
;	O
static	O
const	O
struct	O
option	struct
asQlongopts	array
[	O
]	O
=	O
{	O
{	O
"command"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'c'	O
}	O
,	O
{	O
"system"	pointer
,	O
required_argument	int
,	O
0	int
,	O
's'	O
}	O
,	O
{	O
"config"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'I'	O
}	O
,	O
{	O
"debug"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'x'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
int	O
main	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
const	O
char	O
*	O
zcmd	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
zconfig	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
zdosys	pointer
=	O
NULL	O
;	O
int	O
iopt	int
;	O
pointer	pointer
puuconf	pointer
;	O
int	O
iuuconf	int
;	O
const	O
char	O
*	O
zlocalname	pointer
;	O
boolean	int
fany	int
;	O
char	O
*	O
z	pointer
,	O
*	O
zgetsys	pointer
;	O
boolean	int
ferr	int
;	O
boolean	int
fsys	int
;	O
struct	O
uuconf_system	struct
ssys	struct
;	O
zProgram	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
while	O
(	O
(	O
iopt	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"c:I:s:vx:"	pointer
,	O
asQlongopts	array
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
iopt	int
)	O
{	O
case	O
'c'	O
:	O
zcmd	pointer
=	O
optarg	O
;	O
break	O
;	O
case	O
'I'	O
:	O
if	O
(	O
fsysdep_other_config	function
(	O
optarg	O
)	O
)	O
zconfig	pointer
=	O
optarg	O
;	O
break	O
;	O
case	O
's'	O
:	O
zdosys	pointer
=	O
optarg	O
;	O
break	O
;	O
case	O
'x'	O
:	O
iDebug	int
|=	O
idebug_parse	function
(	O
optarg	O
)	O
;	O
break	O
;	O
case	O
'v'	O
:	O
printf	function
(	O
"uuxqt (Taylor UUCP) %s\n"	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
"Copyright (C) 1991, 92, 93, 94, 1995, 2002 Ian Lance Taylor\n"	pointer
)	O
;	O
printf	function
(	O
"This program is free software; you may redistribute it under the terms of\n"	pointer
)	O
;	O
printf	function
(	O
"the GNU General Public LIcense.  This program has ABSOLUTELY NO WARRANTY.\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
1	int
:	O
uqhelp	function
(	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
uqusage	function
(	O
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
optind	O
!=	O
argc	int
)	O
uqusage	function
(	O
)	O
;	O
iuuconf	int
=	O
uuconf_init	function
(	O
&	O
puuconf	pointer
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
zconfig	pointer
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
{	O
const	O
char	O
*	O
zdebug	pointer
;	O
iuuconf	int
=	O
uuconf_debuglevel	function
(	O
puuconf	pointer
,	O
&	O
zdebug	pointer
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
if	O
(	O
zdebug	pointer
!=	O
NULL	O
)	O
iDebug	int
|=	O
idebug_parse	function
(	O
zdebug	pointer
)	O
;	O
}	O
iuuconf	int
=	O
uuconf_maxuuxqts	function
(	O
puuconf	pointer
,	O
&	O
cQmaxuuxqts	int
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
usysdep_signal	function
(	O
SIGINT	int
)	O
;	O
usysdep_signal	function
(	O
SIGHUP	int
)	O
;	O
usysdep_signal	function
(	O
SIGQUIT	int
)	O
;	O
usysdep_signal	function
(	O
SIGTERM	int
)	O
;	O
usysdep_signal	function
(	O
SIGPIPE	int
)	O
;	O
usysdep_initialize	function
(	O
puuconf	pointer
,	O
INIT_SUID	O
)	O
;	O
ulog_to_file	function
(	O
puuconf	pointer
,	O
TRUE	O
)	O
;	O
ulog_fatal_fn	function
(	O
uqabort	function
)	O
;	O
iuuconf	int
=	O
uuconf_localname	function
(	O
puuconf	pointer
,	O
&	O
zlocalname	pointer
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
{	O
zlocalname	pointer
=	O
zsysdep_localname	function
(	O
)	O
;	O
if	O
(	O
zlocalname	pointer
==	O
NULL	O
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
fsys	int
=	O
FALSE	O
;	O
if	O
(	O
zdosys	pointer
!=	O
NULL	O
)	O
{	O
iuuconf	int
=	O
uuconf_system_info	function
(	O
puuconf	pointer
,	O
zdosys	pointer
,	O
&	O
ssys	struct
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_NOT_FOUND	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
if	O
(	O
strcmp	function
(	O
zdosys	pointer
,	O
zlocalname	pointer
)	O
==	O
0	int
)	O
{	O
iuuconf	int
=	O
uuconf_system_local	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	function
(	O
LOG_FATAL	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
ssys	struct
.	O
uuconf_zname	pointer
=	O
(	O
char	O
*	O
)	O
zlocalname	pointer
;	O
}	O
else	O
{	O
if	O
(	O
!	O
funknown_system	function
(	O
puuconf	pointer
,	O
zdosys	pointer
,	O
&	O
ssys	struct
)	O
)	O
ulog	function
(	O
LOG_FATAL	int
,	O
"%s: system not found"	pointer
,	O
zdosys	pointer
)	O
;	O
}	O
}	O
zdosys	pointer
=	O
zbufcpy	function
(	O
ssys	struct
.	O
uuconf_zname	pointer
)	O
;	O
fsys	int
=	O
TRUE	O
;	O
}	O
iQlock_seq	int
=	O
ixsysdep_lock_uuxqt	function
(	O
zcmd	pointer
,	O
cQmaxuuxqts	int
)	O
;	O
if	O
(	O
iQlock_seq	int
<	O
0	int
)	O
{	O
ulog_close	function
(	O
)	O
;	O
usysdep_exit	function
(	O
TRUE	O
)	O
;	O
}	O
zQunlock_cmd	pointer
=	O
zcmd	pointer
;	O
do	O
{	O
fany	int
=	O
FALSE	O
;	O
if	O
(	O
!	O
fsysdep_get_xqt_init	function
(	O
zdosys	pointer
)	O
)	O
{	O
ulog_close	function
(	O
)	O
;	O
usysdep_exit	function
(	O
FALSE	O
)	O
;	O
}	O
while	O
(	O
(	O
z	pointer
=	O
zsysdep_get_xqt	function
(	O
zdosys	pointer
,	O
&	O
zgetsys	pointer
,	O
&	O
ferr	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
zloc	pointer
;	O
boolean	int
fprocessed	int
;	O
char	O
*	O
zbase	pointer
;	O
if	O
(	O
!	O
fsys	int
||	O
strcmp	function
(	O
ssys	struct
.	O
uuconf_zname	pointer
,	O
zgetsys	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
fsys	int
)	O
(	O
void	O
)	O
uuconf_system_free	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
)	O
;	O
iuuconf	int
=	O
uuconf_system_info	function
(	O
puuconf	pointer
,	O
zgetsys	pointer
,	O
&	O
ssys	struct
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_NOT_FOUND	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
ubuffree	function
(	O
z	pointer
)	O
;	O
ubuffree	function
(	O
zgetsys	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
zgetsys	pointer
,	O
zlocalname	pointer
)	O
==	O
0	int
)	O
{	O
iuuconf	int
=	O
uuconf_system_local	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
ubuffree	function
(	O
z	pointer
)	O
;	O
ubuffree	function
(	O
zgetsys	pointer
)	O
;	O
continue	O
;	O
}	O
ssys	struct
.	O
uuconf_zname	pointer
=	O
(	O
char	O
*	O
)	O
zlocalname	pointer
;	O
}	O
else	O
{	O
if	O
(	O
!	O
funknown_system	function
(	O
puuconf	pointer
,	O
zgetsys	pointer
,	O
&	O
ssys	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"%s: Execute file for unknown system %s"	pointer
,	O
z	pointer
,	O
zgetsys	pointer
)	O
;	O
(	O
void	O
)	O
remove	function
(	O
z	pointer
)	O
;	O
ubuffree	function
(	O
z	pointer
)	O
;	O
ubuffree	function
(	O
zgetsys	pointer
)	O
;	O
continue	O
;	O
}	O
}	O
}	O
fsys	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
FGOT_SIGNAL	O
(	O
)	O
)	O
{	O
ubuffree	function
(	O
z	pointer
)	O
;	O
ubuffree	function
(	O
zgetsys	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
zdosys	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
zdosys	pointer
,	O
ssys	struct
.	O
uuconf_zname	pointer
)	O
!=	O
0	int
)	O
{	O
ubuffree	function
(	O
z	pointer
)	O
;	O
ubuffree	function
(	O
zgetsys	pointer
)	O
;	O
continue	O
;	O
}	O
zloc	pointer
=	O
ssys	struct
.	O
uuconf_zlocalname	pointer
;	O
if	O
(	O
zloc	pointer
==	O
NULL	O
)	O
zloc	pointer
=	O
zlocalname	pointer
;	O
ulog_system	function
(	O
ssys	struct
.	O
uuconf_zname	pointer
)	O
;	O
zbase	pointer
=	O
zsysdep_base_name	function
(	O
z	pointer
)	O
;	O
uqdo_xqt_file	function
(	O
puuconf	pointer
,	O
z	pointer
,	O
zbase	pointer
,	O
&	O
ssys	struct
,	O
zloc	pointer
,	O
zcmd	pointer
,	O
&	O
fprocessed	int
)	O
;	O
ubuffree	function
(	O
zbase	pointer
)	O
;	O
ulog_system	function
(	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
ulog_user	function
(	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
fprocessed	int
)	O
fany	int
=	O
TRUE	O
;	O
ubuffree	function
(	O
z	pointer
)	O
;	O
ubuffree	function
(	O
zgetsys	pointer
)	O
;	O
}	O
usysdep_get_xqt_free	function
(	O
zdosys	pointer
)	O
;	O
}	O
while	O
(	O
fany	int
&&	O
!	O
FGOT_SIGNAL	O
(	O
)	O
)	O
;	O
(	O
void	O
)	O
fsysdep_unlock_uuxqt	function
(	O
iQlock_seq	int
,	O
zcmd	pointer
,	O
cQmaxuuxqts	int
)	O
;	O
iQlock_seq	int
=	O
-	O
1	int
;	O
ulog_close	function
(	O
)	O
;	O
if	O
(	O
FGOT_SIGNAL	O
(	O
)	O
)	O
ferr	int
=	O
TRUE	O
;	O
usysdep_exit	function
(	O
!	O
ferr	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
uqhelp	function
(	O
)	O
{	O
printf	function
(	O
"Taylor UUCP %s, copyright (C) 1991, 92, 93, 94, 1995, 2002 Ian Lance Taylor\n"	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
"Usage: %s [-c,--command cmd] [-s,--system system]\n"	pointer
,	O
zProgram	pointer
)	O
;	O
printf	function
(	O
" -c,--command cmd: Set type of command to execute\n"	pointer
)	O
;	O
printf	function
(	O
" -s,--system system: Execute commands only for named system\n"	pointer
)	O
;	O
printf	function
(	O
" -x,--debug debug: Set debugging level\n"	pointer
)	O
;	O
printf	function
(	O
" -I,--config file: Set configuration file to use\n"	pointer
)	O
;	O
printf	function
(	O
" -v,--version: Print version and exit\n"	pointer
)	O
;	O
printf	function
(	O
" --help: Print help and exit\n"	pointer
)	O
;	O
printf	function
(	O
"Report bugs to taylor-uucp@gnu.org\n"	pointer
)	O
;	O
}	O
static	O
void	O
uqusage	function
(	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s [-c,--command cmd] [-s,--system system]\n"	pointer
,	O
zProgram	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Use %s --help for help\n"	pointer
,	O
zProgram	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
void	O
uqabort	function
(	O
)	O
{	O
ulog_system	function
(	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
ulog_user	function
(	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
fQunlock_directory	int
)	O
(	O
void	O
)	O
fsysdep_unlock_uuxqt_dir	function
(	O
iQlock_seq	int
)	O
;	O
if	O
(	O
zQunlock_file	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
fsysdep_unlock_uuxqt_file	function
(	O
zQunlock_file	pointer
)	O
;	O
if	O
(	O
iQlock_seq	int
>=	O
0	int
)	O
(	O
void	O
)	O
fsysdep_unlock_uuxqt	function
(	O
iQlock_seq	int
,	O
zQunlock_cmd	pointer
,	O
cQmaxuuxqts	int
)	O
;	O
ulog_close	function
(	O
)	O
;	O
usysdep_exit	function
(	O
FALSE	O
)	O
;	O
}	O
static	O
char	O
*	O
*	O
azQargs	pointer
;	O
static	O
char	O
*	O
zQcmd	pointer
;	O
static	O
char	O
*	O
zQinput	pointer
;	O
static	O
char	O
*	O
zQoutfile	pointer
;	O
static	O
char	O
*	O
zQoutsys	pointer
;	O
static	O
int	O
cQfiles	int
;	O
static	O
char	O
*	O
*	O
azQfiles	pointer
;	O
static	O
char	O
*	O
*	O
azQfiles_to	pointer
;	O
static	O
char	O
*	O
zQrequestor	pointer
;	O
static	O
const	O
char	O
*	O
zQuser	pointer
;	O
static	O
const	O
char	O
*	O
zQsystem	pointer
;	O
static	O
boolean	int
fQno_ack	int
;	O
static	O
boolean	int
fQsuccess_ack	int
;	O
static	O
boolean	int
fQsend_input	int
;	O
static	O
boolean	int
fQuse_exec	int
;	O
static	O
const	O
char	O
*	O
zQstatus_file	pointer
;	O
static	O
boolean	int
fQquoted	int
;	O
static	O
int	O
iqcmd	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
pointer	pointer
pvar	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
int	O
iqout	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
pointer	pointer
pvar	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
int	O
iqfile	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
pointer	pointer
pvar	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
int	O
iqrequestor	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
pointer	pointer
pvar	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
int	O
iquser	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
pointer	pointer
pvar	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
int	O
iqset	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
pointer	pointer
pvar	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
const	O
struct	O
uuconf_cmdtab	struct
asQcmds	array
[	O
]	O
=	O
{	O
{	O
"C"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
0	int
,	O
NULL	O
,	O
iqcmd	function
}	O
,	O
{	O
"I"	pointer
,	O
UUCONF_CMDTABTYPE_STRING	O
,	O
(	O
pointer	pointer
)	O
&	O
zQinput	pointer
,	O
NULL	O
}	O
,	O
{	O
"O"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
0	int
,	O
NULL	O
,	O
iqout	function
}	O
,	O
{	O
"F"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
0	int
,	O
NULL	O
,	O
iqfile	function
}	O
,	O
{	O
"R"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
0	int
,	O
NULL	O
,	O
iqrequestor	function
}	O
,	O
{	O
"U"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
0	int
,	O
NULL	O
,	O
iquser	function
}	O
,	O
{	O
"N"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
0	int
,	O
(	O
pointer	pointer
)	O
&	O
fQno_ack	int
,	O
iqset	function
}	O
,	O
{	O
"n"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
0	int
,	O
(	O
pointer	pointer
)	O
&	O
fQsuccess_ack	int
,	O
iqset	function
}	O
,	O
{	O
"B"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
0	int
,	O
(	O
pointer	pointer
)	O
&	O
fQsend_input	int
,	O
iqset	function
}	O
,	O
{	O
"E"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
0	int
,	O
(	O
pointer	pointer
)	O
&	O
fQuse_exec	int
,	O
iqset	function
}	O
,	O
{	O
"M"	pointer
,	O
UUCONF_CMDTABTYPE_STRING	O
,	O
(	O
pointer	pointer
)	O
&	O
zQstatus_file	pointer
,	O
NULL	O
}	O
,	O
{	O
"Q"	pointer
,	O
UUCONF_CMDTABTYPE_FN	O
|	O
0	int
,	O
(	O
pointer	pointer
)	O
&	O
fQquoted	int
,	O
iqset	function
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
static	O
int	O
iqcmd	function
(	O
puuconf	pointer
,	O
argc	int
,	O
argv	pointer
,	O
pvar	pointer
,	O
pinfo	pointer
)	O
pointer	pointer
puuconf	pointer
ATTRIBUTE_UNUSED	O
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
pointer	pointer
pvar	pointer
ATTRIBUTE_UNUSED	O
;	O
pointer	pointer
pinfo	pointer
ATTRIBUTE_UNUSED	O
;	O
{	O
int	O
i	int
;	O
size_t	long
clen	long
;	O
if	O
(	O
argc	int
<=	O
1	int
)	O
return	O
UUCONF_CMDTABRET_CONTINUE	O
;	O
azQargs	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
argc	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
clen	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
azQargs	pointer
[	O
i	int
-	O
1	int
]	O
=	O
zbufcpy	function
(	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
clen	long
+=	O
strlen	function
(	O
argv	pointer
[	O
i	int
]	O
)	O
+	O
1	int
;	O
}	O
azQargs	pointer
[	O
i	int
-	O
1	int
]	O
=	O
NULL	O
;	O
zQcmd	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
clen	long
)	O
;	O
zQcmd	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
-	O
1	int
;	O
i	int
++	O
)	O
{	O
strcat	function
(	O
zQcmd	pointer
,	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
strcat	function
(	O
zQcmd	pointer
,	O
" "	pointer
)	O
;	O
}	O
strcat	function
(	O
zQcmd	pointer
,	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
return	O
UUCONF_CMDTABRET_CONTINUE	O
;	O
}	O
static	O
int	O
iqout	function
(	O
puuconf	pointer
,	O
argc	int
,	O
argv	pointer
,	O
pvar	pointer
,	O
pinfo	pointer
)	O
pointer	pointer
puuconf	pointer
ATTRIBUTE_UNUSED	O
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
pointer	pointer
pvar	pointer
ATTRIBUTE_UNUSED	O
;	O
pointer	pointer
pinfo	pointer
ATTRIBUTE_UNUSED	O
;	O
{	O
if	O
(	O
argc	int
>	O
1	int
)	O
zQoutfile	pointer
=	O
zbufcpy	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
argc	int
>	O
2	int
)	O
zQoutsys	pointer
=	O
zbufcpy	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
return	O
UUCONF_CMDTABRET_CONTINUE	O
;	O
}	O
static	O
int	O
iqfile	function
(	O
puuconf	pointer
,	O
argc	int
,	O
argv	pointer
,	O
pvar	pointer
,	O
pinfo	pointer
)	O
pointer	pointer
puuconf	pointer
ATTRIBUTE_UNUSED	O
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
pointer	pointer
pvar	pointer
ATTRIBUTE_UNUSED	O
;	O
pointer	pointer
pinfo	pointer
ATTRIBUTE_UNUSED	O
;	O
{	O
if	O
(	O
argc	int
<	O
2	int
)	O
return	O
UUCONF_CMDTABRET_CONTINUE	O
;	O
if	O
(	O
!	O
fspool_file	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
)	O
return	O
UUCONF_CMDTABRET_CONTINUE	O
;	O
++	O
cQfiles	int
;	O
azQfiles	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xrealloc	function
(	O
(	O
pointer	pointer
)	O
azQfiles	pointer
,	O
cQfiles	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
azQfiles_to	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xrealloc	function
(	O
(	O
pointer	pointer
)	O
azQfiles_to	pointer
,	O
cQfiles	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
azQfiles	pointer
[	O
cQfiles	int
-	O
1	int
]	O
=	O
zbufcpy	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
argc	int
>	O
2	int
)	O
azQfiles_to	pointer
[	O
cQfiles	int
-	O
1	int
]	O
=	O
zbufcpy	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
else	O
azQfiles_to	pointer
[	O
cQfiles	int
-	O
1	int
]	O
=	O
NULL	O
;	O
return	O
UUCONF_CMDTABRET_CONTINUE	O
;	O
}	O
static	O
int	O
iqrequestor	function
(	O
puuconf	pointer
,	O
argc	int
,	O
argv	pointer
,	O
pvar	pointer
,	O
pinfo	pointer
)	O
pointer	pointer
puuconf	pointer
ATTRIBUTE_UNUSED	O
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
pointer	pointer
pvar	pointer
ATTRIBUTE_UNUSED	O
;	O
pointer	pointer
pinfo	pointer
ATTRIBUTE_UNUSED	O
;	O
{	O
if	O
(	O
argc	int
==	O
2	int
)	O
zQrequestor	pointer
=	O
zbufcpy	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
else	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
zQrequestor	pointer
=	O
zbufalc	function
(	O
strlen	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
+	O
strlen	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
+	O
sizeof	O
"!"	pointer
)	O
;	O
sprintf	function
(	O
zQrequestor	pointer
,	O
"%s!%s"	pointer
,	O
argv	pointer
[	O
2	int
]	O
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
}	O
return	O
UUCONF_CMDTABRET_CONTINUE	O
;	O
}	O
static	O
int	O
iquser	function
(	O
puuconf	pointer
,	O
argc	int
,	O
argv	pointer
,	O
pvar	pointer
,	O
pinfo	pointer
)	O
pointer	pointer
puuconf	pointer
ATTRIBUTE_UNUSED	O
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
pointer	pointer
pvar	pointer
ATTRIBUTE_UNUSED	O
;	O
pointer	pointer
pinfo	pointer
ATTRIBUTE_UNUSED	O
;	O
{	O
if	O
(	O
argc	int
>	O
1	int
)	O
zQuser	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
if	O
(	O
argc	int
>	O
2	int
)	O
zQsystem	pointer
=	O
argv	pointer
[	O
2	int
]	O
;	O
return	O
UUCONF_CMDTABRET_KEEP	O
;	O
}	O
static	O
int	O
iqset	function
(	O
puuconf	pointer
,	O
argc	int
,	O
argv	pointer
,	O
pvar	pointer
,	O
pinfo	pointer
)	O
pointer	pointer
puuconf	pointer
ATTRIBUTE_UNUSED	O
;	O
int	O
argc	int
ATTRIBUTE_UNUSED	O
;	O
char	O
*	O
*	O
argv	pointer
ATTRIBUTE_UNUSED	O
;	O
pointer	pointer
pvar	pointer
;	O
pointer	pointer
pinfo	pointer
ATTRIBUTE_UNUSED	O
;	O
{	O
boolean	int
*	O
pf	pointer
=	O
(	O
boolean	int
*	O
)	O
pvar	pointer
;	O
*	O
pf	pointer
=	O
TRUE	O
;	O
return	O
UUCONF_CMDTABRET_CONTINUE	O
;	O
}	O
static	O
void	O
uqdo_xqt_file	function
(	O
puuconf	pointer
,	O
zfile	pointer
,	O
zbase	pointer
,	O
qsys	pointer
,	O
zlocalname	pointer
,	O
zcmd	pointer
,	O
pfprocessed	pointer
)	O
pointer	pointer
puuconf	pointer
;	O
const	O
char	O
*	O
zfile	pointer
;	O
const	O
char	O
*	O
zbase	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
const	O
char	O
*	O
zlocalname	pointer
;	O
const	O
char	O
*	O
zcmd	pointer
;	O
boolean	int
*	O
pfprocessed	pointer
;	O
{	O
char	O
*	O
zabsolute	pointer
;	O
boolean	int
ferr	int
;	O
FILE	struct
*	O
e	pointer
;	O
int	O
iuuconf	int
;	O
int	O
i	int
;	O
int	O
iclean	int
;	O
const	O
char	O
*	O
zmail	pointer
;	O
char	O
*	O
zoutput	pointer
;	O
char	O
*	O
zinput	pointer
;	O
boolean	int
fbadname	int
;	O
char	O
abtemp	array
[	O
CFILE_NAME_LEN	O
]	O
;	O
char	O
abdata	array
[	O
CFILE_NAME_LEN	O
]	O
;	O
char	O
*	O
zerror	pointer
;	O
struct	O
uuconf_system	struct
soutsys	struct
;	O
const	O
struct	O
uuconf_system	struct
*	O
qoutsys	pointer
;	O
boolean	int
fshell	int
;	O
size_t	long
clen	long
;	O
char	O
*	O
zfullcmd	pointer
;	O
boolean	int
ftemp	int
;	O
*	O
pfprocessed	pointer
=	O
FALSE	O
;	O
e	pointer
=	O
fopen	function
(	O
zfile	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
return	O
;	O
azQargs	pointer
=	O
NULL	O
;	O
zQcmd	pointer
=	O
NULL	O
;	O
zQinput	pointer
=	O
NULL	O
;	O
zQoutfile	pointer
=	O
NULL	O
;	O
zQoutsys	pointer
=	O
NULL	O
;	O
cQfiles	int
=	O
0	int
;	O
azQfiles	pointer
=	O
NULL	O
;	O
azQfiles_to	pointer
=	O
NULL	O
;	O
zQrequestor	pointer
=	O
NULL	O
;	O
zQuser	pointer
=	O
NULL	O
;	O
zQsystem	pointer
=	O
NULL	O
;	O
fQno_ack	int
=	O
FALSE	O
;	O
fQsuccess_ack	int
=	O
FALSE	O
;	O
fQsend_input	int
=	O
FALSE	O
;	O
fQuse_exec	int
=	O
FALSE	O
;	O
zQstatus_file	pointer
=	O
NULL	O
;	O
fQquoted	int
=	O
FALSE	O
;	O
iuuconf	int
=	O
uuconf_cmd_file	function
(	O
puuconf	pointer
,	O
e	pointer
,	O
asQcmds	array
,	O
(	O
pointer	pointer
)	O
zbase	pointer
,	O
(	O
uuconf_cmdtabfn	pointer
)	O
NULL	O
,	O
(	O
UUCONF_CMDTABFLAG_CASE	O
|	O
UUCONF_CMDTABFLAG_NOCOMMENTS	O
)	O
,	O
(	O
pointer	pointer
)	O
NULL	O
)	O
;	O
(	O
void	O
)	O
fclose	function
(	O
e	pointer
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
if	O
(	O
UUCONF_ERROR_VALUE	O
(	O
iuuconf	int
)	O
==	O
UUCONF_SYNTAX_ERROR	O
||	O
UUCONF_ERROR_VALUE	O
(	O
iuuconf	int
)	O
==	O
UUCONF_UNKNOWN_COMMAND	O
)	O
{	O
const	O
char	O
*	O
az	array
[	O
20	int
]	O
;	O
char	O
*	O
znew	pointer
;	O
i	int
=	O
0	int
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"The execution file\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
zfile	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\nfor system\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
qsys	pointer
->	O
uuconf_zname	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\nwas corrupt.  "	pointer
;	O
znew	pointer
=	O
zsysdep_save_corrupt_file	function
(	O
zfile	pointer
)	O
;	O
if	O
(	O
znew	pointer
==	O
NULL	O
)	O
{	O
az	array
[	O
i	int
++	O
]	O
=	O
"The file could not be preserved.\n"	pointer
;	O
(	O
void	O
)	O
remove	function
(	O
zfile	pointer
)	O
;	O
}	O
else	O
{	O
az	array
[	O
i	int
++	O
]	O
=	O
"It has been moved to\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
znew	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\n"	pointer
;	O
}	O
(	O
void	O
)	O
fsysdep_mail	function
(	O
OWNER	pointer
,	O
"Corrupt execution file"	pointer
,	O
i	int
,	O
az	array
)	O
;	O
ubuffree	function
(	O
znew	pointer
)	O
;	O
}	O
return	O
;	O
}	O
if	O
(	O
fQquoted	int
)	O
{	O
if	O
(	O
azQargs	pointer
!=	O
NULL	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
azQargs	pointer
[	O
i	int
]	O
!=	O
NULL	O
;	O
++	O
i	int
)	O
(	O
void	O
)	O
cescape	function
(	O
azQargs	pointer
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
zQcmd	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
zQcmd	pointer
)	O
;	O
if	O
(	O
zQinput	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
zQinput	pointer
)	O
;	O
if	O
(	O
zQoutfile	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
zQoutfile	pointer
)	O
;	O
if	O
(	O
zQoutsys	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
zQoutsys	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cQfiles	int
;	O
++	O
i	int
)	O
{	O
(	O
void	O
)	O
cescape	function
(	O
azQfiles	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
azQfiles_to	pointer
[	O
i	int
]	O
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
azQfiles_to	pointer
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
zQrequestor	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
zQrequestor	pointer
)	O
;	O
if	O
(	O
zQuser	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
(	O
char	O
*	O
)	O
zQuser	pointer
)	O
;	O
if	O
(	O
zQsystem	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
(	O
char	O
*	O
)	O
zQsystem	pointer
)	O
;	O
if	O
(	O
zQstatus_file	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
cescape	function
(	O
(	O
char	O
*	O
)	O
zQstatus_file	pointer
)	O
;	O
}	O
iclean	int
=	O
0	int
;	O
if	O
(	O
azQargs	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"%s: No command given"	pointer
,	O
zbase	pointer
)	O
;	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
|	O
REMOVE_FILE	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
zcmd	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
zcmd	pointer
,	O
azQargs	pointer
[	O
0	int
]	O
)	O
!=	O
0	int
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
fsysdep_uuxqt_locked	function
(	O
azQargs	pointer
[	O
0	int
]	O
)	O
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
}	O
if	O
(	O
!	O
fsysdep_lock_uuxqt_file	function
(	O
zfile	pointer
)	O
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
zQunlock_file	pointer
=	O
zfile	pointer
;	O
if	O
(	O
!	O
fsysdep_file_exists	function
(	O
zfile	pointer
)	O
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
zQuser	pointer
!=	O
NULL	O
)	O
ulog_user	function
(	O
zQuser	pointer
)	O
;	O
else	O
if	O
(	O
zQrequestor	pointer
!=	O
NULL	O
)	O
ulog_user	function
(	O
zQrequestor	pointer
)	O
;	O
else	O
ulog_user	function
(	O
"unknown"	pointer
)	O
;	O
if	O
(	O
zQsystem	pointer
==	O
NULL	O
||	O
strncmp	function
(	O
zQsystem	pointer
,	O
qsys	pointer
->	O
uuconf_zname	pointer
,	O
strlen	function
(	O
qsys	pointer
->	O
uuconf_zname	pointer
)	O
)	O
!=	O
0	int
)	O
zQsystem	pointer
=	O
qsys	pointer
->	O
uuconf_zname	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cQfiles	int
;	O
i	int
++	O
)	O
{	O
char	O
*	O
zreal	pointer
;	O
zreal	pointer
=	O
zsysdep_spool_file_name	function
(	O
qsys	pointer
,	O
azQfiles	pointer
[	O
i	int
]	O
,	O
(	O
pointer	pointer
)	O
NULL	O
)	O
;	O
if	O
(	O
zreal	pointer
==	O
NULL	O
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
fsysdep_file_exists	function
(	O
zreal	pointer
)	O
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
ubuffree	function
(	O
azQfiles	pointer
[	O
i	int
]	O
)	O
;	O
azQfiles	pointer
[	O
i	int
]	O
=	O
zbufcpy	function
(	O
zreal	pointer
)	O
;	O
ubuffree	function
(	O
zreal	pointer
)	O
;	O
}	O
if	O
(	O
!	O
fsysdep_lock_uuxqt_dir	function
(	O
iQlock_seq	int
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Could not lock execute directory"	pointer
)	O
;	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
fQunlock_directory	int
=	O
TRUE	O
;	O
iclean	int
|=	O
REMOVE_FILE	O
|	O
REMOVE_NEEDED	O
;	O
*	O
pfprocessed	pointer
=	O
TRUE	O
;	O
zmail	pointer
=	O
NULL	O
;	O
if	O
(	O
zQrequestor	pointer
!=	O
NULL	O
)	O
zmail	pointer
=	O
zQrequestor	pointer
;	O
else	O
if	O
(	O
zQuser	pointer
!=	O
NULL	O
)	O
zmail	pointer
=	O
zQuser	pointer
;	O
if	O
(	O
zmail	pointer
!=	O
NULL	O
&&	O
strchr	function
(	O
zmail	pointer
,	O
'@'	O
)	O
==	O
NULL	O
&&	O
strcmp	function
(	O
zQsystem	pointer
,	O
zlocalname	pointer
)	O
!=	O
0	int
)	O
{	O
char	O
*	O
zset	pointer
;	O
zset	pointer
=	O
zbufalc	function
(	O
strlen	function
(	O
zQsystem	pointer
)	O
+	O
strlen	function
(	O
zmail	pointer
)	O
+	O
2	int
)	O
;	O
sprintf	function
(	O
zset	pointer
,	O
"%s!%s"	pointer
,	O
zQsystem	pointer
,	O
zmail	pointer
)	O
;	O
zmail	pointer
=	O
zset	pointer
;	O
zQmail	pointer
=	O
zset	pointer
;	O
iclean	int
|=	O
FREE_MAIL	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
azQargs	pointer
[	O
0	int
]	O
,	O
"uucp"	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
zfrom	pointer
,	O
*	O
zto	pointer
;	O
boolean	int
fmany	int
;	O
boolean	int
finoptions	int
;	O
char	O
*	O
*	O
azargs	pointer
;	O
const	O
char	O
*	O
zuser	pointer
;	O
zfrom	pointer
=	O
NULL	O
;	O
zto	pointer
=	O
NULL	O
;	O
fmany	int
=	O
FALSE	O
;	O
finoptions	int
=	O
TRUE	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
azQargs	pointer
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
azQargs	pointer
[	O
i	int
]	O
[	O
0	int
]	O
==	O
'-'	O
&&	O
finoptions	int
)	O
{	O
if	O
(	O
azQargs	pointer
[	O
i	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
azQargs	pointer
[	O
i	int
]	O
[	O
2	int
]	O
==	O
'\0'	O
)	O
finoptions	int
=	O
FALSE	O
;	O
else	O
if	O
(	O
strncmp	function
(	O
azQargs	pointer
[	O
i	int
]	O
+	O
2	int
,	O
"g"	pointer
,	O
1	int
)	O
==	O
0	int
||	O
strncmp	function
(	O
azQargs	pointer
[	O
i	int
]	O
+	O
2	int
,	O
"not"	pointer
,	O
3	int
)	O
==	O
0	int
||	O
strncmp	function
(	O
azQargs	pointer
[	O
i	int
]	O
+	O
2	int
,	O
"s"	pointer
,	O
1	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
strchr	function
(	O
azQargs	pointer
[	O
i	int
]	O
+	O
2	int
,	O
'='	O
)	O
==	O
NULL	O
)	O
++	O
i	int
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
azQargs	pointer
[	O
i	int
]	O
+	O
2	int
,	O
"con"	pointer
,	O
3	int
)	O
==	O
0	int
||	O
strncmp	function
(	O
azQargs	pointer
[	O
i	int
]	O
+	O
2	int
,	O
"us"	pointer
,	O
2	int
)	O
==	O
0	int
||	O
strncmp	function
(	O
azQargs	pointer
[	O
i	int
]	O
+	O
2	int
,	O
"de"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
{	O
azQargs	pointer
[	O
i	int
]	O
[	O
1	int
]	O
=	O
'r'	O
;	O
azQargs	pointer
[	O
i	int
]	O
[	O
2	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
strchr	function
(	O
azQargs	pointer
[	O
i	int
]	O
+	O
3	int
,	O
'='	O
)	O
==	O
NULL	O
)	O
{	O
++	O
i	int
;	O
azQargs	pointer
[	O
i	int
]	O
=	O
zbufcpy	function
(	O
"-r"	pointer
)	O
;	O
}	O
}	O
}	O
else	O
{	O
char	O
*	O
zopts	pointer
;	O
for	O
(	O
zopts	pointer
=	O
azQargs	pointer
[	O
i	int
]	O
+	O
1	int
;	O
*	O
zopts	pointer
!=	O
'\0'	O
;	O
zopts	pointer
++	O
)	O
{	O
if	O
(	O
*	O
zopts	pointer
==	O
'g'	O
||	O
*	O
zopts	pointer
==	O
'n'	O
||	O
*	O
zopts	pointer
==	O
's'	O
)	O
{	O
if	O
(	O
zopts	pointer
[	O
1	int
]	O
==	O
'\0'	O
)	O
++	O
i	int
;	O
break	O
;	O
}	O
if	O
(	O
*	O
zopts	pointer
==	O
'I'	O
||	O
*	O
zopts	pointer
==	O
'u'	O
||	O
*	O
zopts	pointer
==	O
'x'	O
)	O
{	O
*	O
zopts	pointer
=	O
'r'	O
;	O
if	O
(	O
zopts	pointer
[	O
1	int
]	O
!=	O
'\0'	O
)	O
zopts	pointer
[	O
1	int
]	O
=	O
'\0'	O
;	O
else	O
{	O
++	O
i	int
;	O
azQargs	pointer
[	O
i	int
]	O
=	O
zbufcpy	function
(	O
"-r"	pointer
)	O
;	O
}	O
break	O
;	O
}	O
}	O
}	O
}	O
else	O
if	O
(	O
zfrom	pointer
==	O
NULL	O
)	O
zfrom	pointer
=	O
azQargs	pointer
[	O
i	int
]	O
;	O
else	O
if	O
(	O
zto	pointer
==	O
NULL	O
)	O
zto	pointer
=	O
azQargs	pointer
[	O
i	int
]	O
;	O
else	O
{	O
fmany	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
azQargs	pointer
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
;	O
azargs	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
(	O
i	int
+	O
2	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
azargs	pointer
[	O
0	int
]	O
=	O
azQargs	pointer
[	O
0	int
]	O
;	O
zuser	pointer
=	O
zQuser	pointer
;	O
if	O
(	O
zuser	pointer
==	O
NULL	O
)	O
zuser	pointer
=	O
"uucp"	pointer
;	O
azargs	pointer
[	O
1	int
]	O
=	O
zbufalc	function
(	O
strlen	function
(	O
zQsystem	pointer
)	O
+	O
strlen	function
(	O
zuser	pointer
)	O
+	O
sizeof	O
"-u!"	pointer
)	O
;	O
sprintf	function
(	O
azargs	pointer
[	O
1	int
]	O
,	O
"-u%s!%s"	pointer
,	O
zQsystem	pointer
,	O
zuser	pointer
)	O
;	O
memcpy	function
(	O
azargs	pointer
+	O
2	int
,	O
azQargs	pointer
+	O
1	int
,	O
i	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
azQargs	pointer
)	O
;	O
azQargs	pointer
=	O
azargs	pointer
;	O
zabsolute	pointer
=	O
zsysdep_find_command	function
(	O
"uucp"	pointer
,	O
qsys	pointer
->	O
uuconf_pzcmds	pointer
,	O
qsys	pointer
->	O
uuconf_pzpath	pointer
,	O
&	O
ferr	int
)	O
;	O
if	O
(	O
zabsolute	pointer
==	O
NULL	O
&&	O
!	O
ferr	int
)	O
{	O
const	O
char	O
*	O
azcmds	array
[	O
2	int
]	O
;	O
if	O
(	O
!	O
fqforward	function
(	O
zfrom	pointer
,	O
qsys	pointer
->	O
uuconf_pzforward_from	pointer
,	O
"from"	pointer
,	O
zmail	pointer
)	O
||	O
!	O
fqforward	function
(	O
zto	pointer
,	O
qsys	pointer
->	O
uuconf_pzforward_to	pointer
,	O
"to"	pointer
,	O
zmail	pointer
)	O
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
fmany	int
||	O
zfrom	pointer
==	O
NULL	O
||	O
zto	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Bad uucp request %s"	pointer
,	O
zQcmd	pointer
)	O
;	O
if	O
(	O
zmail	pointer
!=	O
NULL	O
&&	O
!	O
fQno_ack	int
)	O
{	O
const	O
char	O
*	O
az	array
[	O
20	int
]	O
;	O
i	int
=	O
0	int
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"Your execution request failed because it was an"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
" unsupported uucp request.\n"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"Execution requested was:\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
zQcmd	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\n"	pointer
;	O
(	O
void	O
)	O
fsysdep_mail	function
(	O
zmail	pointer
,	O
"Execution failed"	pointer
,	O
i	int
,	O
az	array
)	O
;	O
}	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
azcmds	array
[	O
0	int
]	O
=	O
"uucp"	pointer
;	O
azcmds	array
[	O
1	int
]	O
=	O
NULL	O
;	O
zabsolute	pointer
=	O
zsysdep_find_command	function
(	O
"uucp"	pointer
,	O
(	O
char	O
*	O
*	O
)	O
azcmds	array
,	O
qsys	pointer
->	O
uuconf_pzpath	pointer
,	O
&	O
ferr	int
)	O
;	O
}	O
if	O
(	O
zabsolute	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
ferr	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't find uucp executable"	pointer
)	O
;	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
&	O
~	O
(	O
REMOVE_FILE	O
|	O
REMOVE_NEEDED	O
)	O
)	O
;	O
*	O
pfprocessed	pointer
=	O
FALSE	O
;	O
return	O
;	O
}	O
}	O
else	O
{	O
zabsolute	pointer
=	O
zsysdep_find_command	function
(	O
azQargs	pointer
[	O
0	int
]	O
,	O
qsys	pointer
->	O
uuconf_pzcmds	pointer
,	O
qsys	pointer
->	O
uuconf_pzpath	pointer
,	O
&	O
ferr	int
)	O
;	O
if	O
(	O
zabsolute	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
ferr	int
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
&	O
~	O
(	O
REMOVE_FILE	O
|	O
REMOVE_NEEDED	O
)	O
)	O
;	O
*	O
pfprocessed	pointer
=	O
FALSE	O
;	O
return	O
;	O
}	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Not permitted to execute %s"	pointer
,	O
azQargs	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
zmail	pointer
!=	O
NULL	O
&&	O
!	O
fQno_ack	int
)	O
{	O
const	O
char	O
*	O
az	array
[	O
20	int
]	O
;	O
i	int
=	O
0	int
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"Your execution request failed because you are not"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
" permitted to execute\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
azQargs	pointer
[	O
0	int
]	O
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\non this system.\n"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"Execution requested was:\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
zQcmd	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\n"	pointer
;	O
(	O
void	O
)	O
fsysdep_mail	function
(	O
zmail	pointer
,	O
"Execution failed"	pointer
,	O
i	int
,	O
az	array
)	O
;	O
}	O
iclean	int
=	O
isave_files	function
(	O
qsys	pointer
,	O
zmail	pointer
,	O
zfile	pointer
,	O
iclean	int
)	O
;	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
}	O
ubuffree	function
(	O
azQargs	pointer
[	O
0	int
]	O
)	O
;	O
azQargs	pointer
[	O
0	int
]	O
=	O
zabsolute	pointer
;	O
for	O
(	O
i	int
=	O
1	int
;	O
azQargs	pointer
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
{	O
char	O
*	O
zlocal	pointer
;	O
zlocal	pointer
=	O
zsysdep_xqt_local_file	function
(	O
qsys	pointer
,	O
azQargs	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
zlocal	pointer
!=	O
NULL	O
)	O
{	O
ubuffree	function
(	O
azQargs	pointer
[	O
i	int
]	O
)	O
;	O
azQargs	pointer
[	O
i	int
]	O
=	O
zlocal	pointer
;	O
}	O
}	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Executing %s (%s)"	pointer
,	O
zbase	pointer
,	O
zQcmd	pointer
)	O
;	O
if	O
(	O
zQinput	pointer
!=	O
NULL	O
)	O
{	O
boolean	int
fspool	int
;	O
char	O
*	O
zreal	pointer
;	O
fspool	int
=	O
fspool_file	function
(	O
zQinput	pointer
)	O
;	O
if	O
(	O
!	O
fspool	int
)	O
zreal	pointer
=	O
zsysdep_local_file	function
(	O
zQinput	pointer
,	O
qsys	pointer
->	O
uuconf_zpubdir	pointer
,	O
&	O
fbadname	int
)	O
;	O
else	O
{	O
zreal	pointer
=	O
zsysdep_spool_file_name	function
(	O
qsys	pointer
,	O
zQinput	pointer
,	O
(	O
pointer	pointer
)	O
NULL	O
)	O
;	O
fbadname	int
=	O
FALSE	O
;	O
}	O
if	O
(	O
zreal	pointer
==	O
NULL	O
&&	O
!	O
fbadname	int
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
&	O
~	O
(	O
REMOVE_FILE	O
|	O
REMOVE_NEEDED	O
)	O
)	O
;	O
*	O
pfprocessed	pointer
=	O
FALSE	O
;	O
return	O
;	O
}	O
if	O
(	O
zreal	pointer
!=	O
NULL	O
)	O
{	O
zQinput	pointer
=	O
zreal	pointer
;	O
iclean	int
|=	O
FREE_QINPUT	O
;	O
if	O
(	O
fspool	int
)	O
iclean	int
|=	O
REMOVE_QINPUT	O
;	O
}	O
if	O
(	O
zreal	pointer
==	O
NULL	O
||	O
(	O
!	O
fspool	int
&&	O
!	O
fin_directory_list	function
(	O
zQinput	pointer
,	O
qsys	pointer
->	O
uuconf_pzremote_send	pointer
,	O
qsys	pointer
->	O
uuconf_zpubdir	pointer
,	O
TRUE	O
,	O
TRUE	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Not permitted to read %s"	pointer
,	O
zQinput	pointer
)	O
;	O
if	O
(	O
zmail	pointer
!=	O
NULL	O
&&	O
!	O
fQno_ack	int
)	O
{	O
const	O
char	O
*	O
az	array
[	O
20	int
]	O
;	O
i	int
=	O
0	int
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"Your execution request failed because you are"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
" not permitted to read\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
zQinput	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\non this system.\n"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"Execution requested was:\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
zQcmd	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\n"	pointer
;	O
(	O
void	O
)	O
fsysdep_mail	function
(	O
zmail	pointer
,	O
"Execution failed"	pointer
,	O
i	int
,	O
az	array
)	O
;	O
}	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
}	O
zoutput	pointer
=	O
NULL	O
;	O
if	O
(	O
zQoutfile	pointer
==	O
NULL	O
)	O
qoutsys	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
zQoutsys	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
zQoutsys	pointer
,	O
zlocalname	pointer
)	O
!=	O
0	int
)	O
{	O
char	O
*	O
zdata	pointer
;	O
if	O
(	O
strcmp	function
(	O
zQoutsys	pointer
,	O
qsys	pointer
->	O
uuconf_zname	pointer
)	O
==	O
0	int
)	O
qoutsys	pointer
=	O
qsys	pointer
;	O
else	O
{	O
iuuconf	int
=	O
uuconf_system_info	function
(	O
puuconf	pointer
,	O
zQoutsys	pointer
,	O
&	O
soutsys	struct
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_NOT_FOUND	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
&	O
~	O
(	O
REMOVE_FILE	O
|	O
REMOVE_NEEDED	O
)	O
)	O
;	O
*	O
pfprocessed	pointer
=	O
FALSE	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
funknown_system	function
(	O
puuconf	pointer
,	O
zQoutsys	pointer
,	O
&	O
soutsys	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Can't send standard output to unknown system %s"	pointer
,	O
zQoutsys	pointer
)	O
;	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
}	O
qoutsys	pointer
=	O
&	O
soutsys	struct
;	O
}	O
zdata	pointer
=	O
zsysdep_data_file_name	function
(	O
qoutsys	pointer
,	O
zlocalname	pointer
,	O
BDEFAULT_UUX_GRADE	O
,	O
FALSE	O
,	O
abtemp	array
,	O
abdata	array
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
zdata	pointer
==	O
NULL	O
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
&	O
~	O
(	O
REMOVE_FILE	O
|	O
REMOVE_NEEDED	O
)	O
)	O
;	O
*	O
pfprocessed	pointer
=	O
FALSE	O
;	O
return	O
;	O
}	O
zoutput	pointer
=	O
zdata	pointer
;	O
zQoutput	pointer
=	O
zoutput	pointer
;	O
iclean	int
|=	O
FREE_OUTPUT	O
;	O
}	O
else	O
{	O
boolean	int
fok	int
;	O
qoutsys	pointer
=	O
NULL	O
;	O
if	O
(	O
fspool_file	function
(	O
zQoutfile	pointer
)	O
)	O
fok	int
=	O
FALSE	O
;	O
else	O
{	O
zoutput	pointer
=	O
zsysdep_local_file	function
(	O
zQoutfile	pointer
,	O
qsys	pointer
->	O
uuconf_zpubdir	pointer
,	O
&	O
fbadname	int
)	O
;	O
if	O
(	O
zoutput	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
fbadname	int
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
&	O
~	O
(	O
REMOVE_FILE	O
|	O
REMOVE_NEEDED	O
)	O
)	O
;	O
*	O
pfprocessed	pointer
=	O
FALSE	O
;	O
return	O
;	O
}	O
fok	int
=	O
FALSE	O
;	O
}	O
else	O
{	O
ubuffree	function
(	O
zQoutfile	pointer
)	O
;	O
zQoutfile	pointer
=	O
zoutput	pointer
;	O
fok	int
=	O
fin_directory_list	function
(	O
zQoutfile	pointer
,	O
qsys	pointer
->	O
uuconf_pzremote_receive	pointer
,	O
qsys	pointer
->	O
uuconf_zpubdir	pointer
,	O
TRUE	O
,	O
FALSE	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
}	O
if	O
(	O
!	O
fok	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Not permitted to write to %s"	pointer
,	O
zQoutfile	pointer
)	O
;	O
if	O
(	O
zmail	pointer
!=	O
NULL	O
&&	O
!	O
fQno_ack	int
)	O
{	O
const	O
char	O
*	O
az	array
[	O
20	int
]	O
;	O
i	int
=	O
0	int
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"Your execution request failed because you are"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
" not permitted to write to\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
zQoutfile	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\non this system.\n"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"Execution requested was:\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
zQcmd	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\n"	pointer
;	O
(	O
void	O
)	O
fsysdep_mail	function
(	O
zmail	pointer
,	O
"Execution failed"	pointer
,	O
i	int
,	O
az	array
)	O
;	O
}	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
return	O
;	O
}	O
}	O
zinput	pointer
=	O
zQinput	pointer
;	O
if	O
(	O
!	O
fsysdep_copy_uuxqt_files	function
(	O
cQfiles	int
,	O
(	O
const	O
char	O
*	O
*	O
)	O
azQfiles	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
azQfiles_to	pointer
,	O
iQlock_seq	int
,	O
&	O
zinput	pointer
)	O
)	O
{	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
&	O
~	O
(	O
REMOVE_FILE	O
|	O
REMOVE_NEEDED	O
)	O
)	O
;	O
*	O
pfprocessed	pointer
=	O
FALSE	O
;	O
return	O
;	O
}	O
if	O
(	O
zQinput	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
zQinput	pointer
,	O
zinput	pointer
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
(	O
iclean	int
&	O
FREE_QINPUT	O
)	O
!=	O
0	int
)	O
ubuffree	function
(	O
zQinput	pointer
)	O
;	O
zQinput	pointer
=	O
zinput	pointer
;	O
iclean	int
|=	O
FREE_QINPUT	O
;	O
}	O
fshell	int
=	O
FALSE	O
;	O
clen	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
azQargs	pointer
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
clen	long
+=	O
strlen	function
(	O
azQargs	pointer
[	O
i	int
]	O
)	O
+	O
1	int
;	O
zfullcmd	pointer
=	O
zbufalc	function
(	O
clen	long
)	O
;	O
strcpy	function
(	O
zfullcmd	pointer
,	O
azQargs	pointer
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
azQargs	pointer
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
{	O
strcat	function
(	O
zfullcmd	pointer
,	O
" "	pointer
)	O
;	O
strcat	function
(	O
zfullcmd	pointer
,	O
azQargs	pointer
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
!	O
fsysdep_execute	function
(	O
qsys	pointer
,	O
zQuser	pointer
==	O
NULL	O
?	O
(	O
const	O
char	O
*	O
)	O
"uucp"	pointer
:	O
zQuser	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
azQargs	pointer
,	O
zfullcmd	pointer
,	O
zQinput	pointer
,	O
zoutput	pointer
,	O
fshell	int
,	O
iQlock_seq	int
,	O
&	O
zerror	pointer
,	O
&	O
ftemp	int
)	O
)	O
{	O
ubuffree	function
(	O
zfullcmd	pointer
)	O
;	O
if	O
(	O
ftemp	int
)	O
{	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Will retry later (%s)"	pointer
,	O
zbase	pointer
)	O
;	O
if	O
(	O
zoutput	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
remove	function
(	O
zoutput	pointer
)	O
;	O
if	O
(	O
zerror	pointer
!=	O
NULL	O
)	O
{	O
(	O
void	O
)	O
remove	function
(	O
zerror	pointer
)	O
;	O
ubuffree	function
(	O
zerror	pointer
)	O
;	O
}	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
&	O
~	O
(	O
REMOVE_FILE	O
|	O
REMOVE_NEEDED	O
)	O
)	O
;	O
*	O
pfprocessed	pointer
=	O
FALSE	O
;	O
return	O
;	O
}	O
ulog	function
(	O
LOG_NORMAL	int
,	O
"Execution failed (%s)"	pointer
,	O
zbase	pointer
)	O
;	O
if	O
(	O
zmail	pointer
!=	O
NULL	O
&&	O
!	O
fQno_ack	int
)	O
{	O
const	O
char	O
*	O
*	O
pz	pointer
;	O
int	O
cgot	int
;	O
FILE	struct
*	O
eerr	pointer
;	O
int	O
istart	int
;	O
cgot	int
=	O
20	int
;	O
pz	pointer
=	O
(	O
const	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
cgot	int
*	O
sizeof	O
(	O
const	O
char	O
*	O
)	O
)	O
;	O
i	int
=	O
0	int
;	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"Execution request failed:\n\t"	pointer
;	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
zQcmd	pointer
;	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"\n"	pointer
;	O
if	O
(	O
zerror	pointer
==	O
NULL	O
)	O
eerr	pointer
=	O
NULL	O
;	O
else	O
eerr	pointer
=	O
fopen	function
(	O
zerror	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
eerr	pointer
==	O
NULL	O
)	O
{	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"There was no output on standard error\n"	pointer
;	O
istart	int
=	O
i	int
;	O
}	O
else	O
{	O
char	O
*	O
zline	pointer
;	O
size_t	long
cline	long
;	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"Standard error output was:\n"	pointer
;	O
istart	int
=	O
i	int
;	O
zline	pointer
=	O
NULL	O
;	O
cline	long
=	O
0	int
;	O
while	O
(	O
getline	function
(	O
&	O
zline	pointer
,	O
&	O
cline	long
,	O
eerr	pointer
)	O
>	O
0	int
)	O
{	O
if	O
(	O
i	int
>=	O
cgot	int
)	O
{	O
cgot	int
+=	O
20	int
;	O
pz	pointer
=	O
(	O
(	O
const	O
char	O
*	O
*	O
)	O
xrealloc	function
(	O
(	O
pointer	pointer
)	O
pz	pointer
,	O
cgot	int
*	O
sizeof	O
(	O
const	O
char	O
*	O
)	O
)	O
)	O
;	O
}	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
zbufcpy	function
(	O
zline	pointer
)	O
;	O
}	O
(	O
void	O
)	O
fclose	function
(	O
eerr	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zline	pointer
)	O
;	O
}	O
(	O
void	O
)	O
fsysdep_mail	function
(	O
zmail	pointer
,	O
"Execution failed"	pointer
,	O
i	int
,	O
pz	pointer
)	O
;	O
for	O
(	O
;	O
istart	int
<	O
i	int
;	O
istart	int
++	O
)	O
ubuffree	function
(	O
(	O
char	O
*	O
)	O
pz	pointer
[	O
istart	int
]	O
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
pz	pointer
)	O
;	O
}	O
if	O
(	O
qoutsys	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
remove	function
(	O
zoutput	pointer
)	O
;	O
iclean	int
=	O
isave_files	function
(	O
qsys	pointer
,	O
zmail	pointer
,	O
zfile	pointer
,	O
iclean	int
)	O
;	O
}	O
else	O
{	O
ubuffree	function
(	O
zfullcmd	pointer
)	O
;	O
if	O
(	O
zmail	pointer
!=	O
NULL	O
&&	O
fQsuccess_ack	int
)	O
{	O
const	O
char	O
*	O
az	array
[	O
20	int
]	O
;	O
i	int
=	O
0	int
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\nExecution request succeeded:\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
zQcmd	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\n"	pointer
;	O
(	O
void	O
)	O
fsysdep_mail	function
(	O
zmail	pointer
,	O
"Execution succeded"	pointer
,	O
i	int
,	O
az	array
)	O
;	O
}	O
if	O
(	O
qoutsys	pointer
!=	O
NULL	O
)	O
{	O
struct	O
scmd	struct
s	struct
;	O
s	struct
.	O
bcmd	char
=	O
'S'	O
;	O
s	struct
.	O
bgrade	char
=	O
BDEFAULT_UUX_GRADE	O
;	O
s	struct
.	O
pseq	pointer
=	O
NULL	O
;	O
s	struct
.	O
zfrom	pointer
=	O
abtemp	array
;	O
s	struct
.	O
zto	pointer
=	O
zQoutfile	pointer
;	O
if	O
(	O
zQuser	pointer
!=	O
NULL	O
)	O
s	struct
.	O
zuser	pointer
=	O
zQuser	pointer
;	O
else	O
s	struct
.	O
zuser	pointer
=	O
"uucp"	pointer
;	O
if	O
(	O
zmail	pointer
!=	O
NULL	O
&&	O
fQsuccess_ack	int
)	O
s	struct
.	O
zoptions	pointer
=	O
"Cn"	pointer
;	O
else	O
s	struct
.	O
zoptions	pointer
=	O
"C"	pointer
;	O
s	struct
.	O
ztemp	pointer
=	O
abtemp	array
;	O
s	struct
.	O
imode	int
=	O
0666	int
;	O
if	O
(	O
zmail	pointer
!=	O
NULL	O
&&	O
fQsuccess_ack	int
)	O
s	struct
.	O
znotify	pointer
=	O
zmail	pointer
;	O
else	O
s	struct
.	O
znotify	pointer
=	O
""	pointer
;	O
s	struct
.	O
cbytes	long
=	O
-	O
1	int
;	O
s	struct
.	O
zcmd	pointer
=	O
NULL	O
;	O
s	struct
.	O
ipos	long
=	O
0	int
;	O
ubuffree	function
(	O
zsysdep_spool_commands	function
(	O
qoutsys	pointer
,	O
BDEFAULT_UUX_GRADE	O
,	O
1	int
,	O
&	O
s	struct
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
)	O
;	O
}	O
}	O
if	O
(	O
zerror	pointer
!=	O
NULL	O
)	O
{	O
(	O
void	O
)	O
remove	function
(	O
zerror	pointer
)	O
;	O
ubuffree	function
(	O
zerror	pointer
)	O
;	O
}	O
uqcleanup	function
(	O
zfile	pointer
,	O
iclean	int
)	O
;	O
}	O
static	O
int	O
isave_files	function
(	O
qsys	pointer
,	O
zmail	pointer
,	O
zfile	pointer
,	O
iclean	int
)	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
const	O
char	O
*	O
zmail	pointer
;	O
const	O
char	O
*	O
zfile	pointer
;	O
int	O
iclean	int
;	O
{	O
long	O
cspace	long
;	O
char	O
*	O
zsavecmd	pointer
;	O
char	O
*	O
*	O
pzsave	pointer
;	O
int	O
c	int
;	O
int	O
ifile	int
;	O
char	O
*	O
zsaveinput	pointer
;	O
const	O
char	O
*	O
*	O
pz	pointer
;	O
int	O
i	int
;	O
cspace	long
=	O
csysdep_bytes_free	function
(	O
zfile	pointer
)	O
;	O
if	O
(	O
cspace	long
==	O
-	O
1	int
)	O
cspace	long
=	O
FREE_SPACE_DELTA	O
;	O
cspace	long
-=	O
qsys	pointer
->	O
uuconf_cfree_space	long
+	O
qsys	pointer
->	O
uuconf_cfree_space	long
/	O
2	int
;	O
if	O
(	O
cspace	long
<	O
0	int
)	O
return	O
iclean	int
;	O
zsavecmd	pointer
=	O
zsysdep_save_failed_file	function
(	O
zfile	pointer
)	O
;	O
if	O
(	O
zsavecmd	pointer
==	O
NULL	O
)	O
return	O
iclean	int
;	O
c	int
=	O
1	int
;	O
pzsave	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
cQfiles	int
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
for	O
(	O
ifile	int
=	O
0	int
;	O
ifile	int
<	O
cQfiles	int
;	O
ifile	int
++	O
)	O
{	O
if	O
(	O
azQfiles	pointer
[	O
ifile	int
]	O
!=	O
NULL	O
)	O
{	O
++	O
c	int
;	O
pzsave	pointer
[	O
ifile	int
]	O
=	O
zsysdep_save_failed_file	function
(	O
azQfiles	pointer
[	O
ifile	int
]	O
)	O
;	O
if	O
(	O
pzsave	pointer
[	O
ifile	int
]	O
==	O
NULL	O
)	O
{	O
ubuffree	function
(	O
zsavecmd	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ifile	int
;	O
i	int
++	O
)	O
if	O
(	O
azQfiles	pointer
[	O
i	int
]	O
!=	O
NULL	O
)	O
ubuffree	function
(	O
pzsave	pointer
[	O
i	int
]	O
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
pzsave	pointer
)	O
;	O
return	O
iclean	int
;	O
}	O
}	O
}	O
zsaveinput	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
iclean	int
&	O
REMOVE_QINPUT	O
)	O
!=	O
0	int
&&	O
fsysdep_file_exists	function
(	O
zQinput	pointer
)	O
)	O
{	O
zsaveinput	pointer
=	O
zsysdep_save_failed_file	function
(	O
zQinput	pointer
)	O
;	O
if	O
(	O
zsaveinput	pointer
==	O
NULL	O
)	O
{	O
ubuffree	function
(	O
zsavecmd	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cQfiles	int
;	O
i	int
++	O
)	O
if	O
(	O
azQfiles	pointer
[	O
i	int
]	O
!=	O
NULL	O
)	O
ubuffree	function
(	O
pzsave	pointer
[	O
i	int
]	O
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
pzsave	pointer
)	O
;	O
return	O
iclean	int
;	O
}	O
}	O
pz	pointer
=	O
(	O
const	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
(	O
20	int
+	O
2	int
*	O
cQfiles	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
i	int
=	O
0	int
;	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"A UUCP execution request failed:\n\t"	pointer
;	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
zQcmd	pointer
;	O
if	O
(	O
zmail	pointer
!=	O
NULL	O
)	O
{	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"\nThe request was made by\n\t"	pointer
;	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
zmail	pointer
;	O
}	O
else	O
{	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"\nThe request came from system\n\t"	pointer
;	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
qsys	pointer
->	O
uuconf_zname	pointer
;	O
}	O
if	O
(	O
c	int
==	O
1	int
&&	O
zsaveinput	pointer
==	O
NULL	O
)	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"\nThe following file has been saved:\n\t"	pointer
;	O
else	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"\nThe following files have been saved:\n\t"	pointer
;	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
zsavecmd	pointer
;	O
for	O
(	O
ifile	int
=	O
0	int
;	O
ifile	int
<	O
cQfiles	int
;	O
ifile	int
++	O
)	O
{	O
if	O
(	O
azQfiles	pointer
[	O
ifile	int
]	O
!=	O
NULL	O
)	O
{	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"\n\t"	pointer
;	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
pzsave	pointer
[	O
ifile	int
]	O
;	O
}	O
}	O
if	O
(	O
zsaveinput	pointer
!=	O
NULL	O
)	O
{	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"\n\t"	pointer
;	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
zsaveinput	pointer
;	O
}	O
pz	pointer
[	O
i	int
++	O
]	O
=	O
"\n"	pointer
;	O
(	O
void	O
)	O
fsysdep_mail	function
(	O
OWNER	pointer
,	O
"UUCP execution files saved after failure"	pointer
,	O
i	int
,	O
pz	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
pz	pointer
)	O
;	O
ubuffree	function
(	O
zsavecmd	pointer
)	O
;	O
for	O
(	O
ifile	int
=	O
0	int
;	O
ifile	int
<	O
cQfiles	int
;	O
ifile	int
++	O
)	O
if	O
(	O
azQfiles	pointer
[	O
ifile	int
]	O
!=	O
NULL	O
)	O
ubuffree	function
(	O
pzsave	pointer
[	O
ifile	int
]	O
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
pzsave	pointer
)	O
;	O
ubuffree	function
(	O
zsaveinput	pointer
)	O
;	O
return	O
iclean	int
&	O
~	O
(	O
REMOVE_FILE	O
|	O
REMOVE_NEEDED	O
)	O
;	O
}	O
static	O
void	O
uqcleanup	function
(	O
zfile	pointer
,	O
iflags	int
)	O
const	O
char	O
*	O
zfile	pointer
;	O
int	O
iflags	int
;	O
{	O
int	O
i	int
;	O
DEBUG_MESSAGE2	O
(	O
DEBUG_SPOOLDIR	O
,	O
"uqcleanup: %s, %d"	pointer
,	O
zfile	pointer
,	O
iflags	int
)	O
;	O
if	O
(	O
(	O
iflags	int
&	O
REMOVE_FILE	O
)	O
!=	O
0	int
)	O
(	O
void	O
)	O
remove	function
(	O
zfile	pointer
)	O
;	O
if	O
(	O
(	O
iflags	int
&	O
REMOVE_NEEDED	O
)	O
!=	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cQfiles	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
azQfiles	pointer
[	O
i	int
]	O
!=	O
NULL	O
)	O
(	O
void	O
)	O
remove	function
(	O
azQfiles	pointer
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
(	O
iflags	int
&	O
REMOVE_QINPUT	O
)	O
!=	O
0	int
)	O
(	O
void	O
)	O
remove	function
(	O
zQinput	pointer
)	O
;	O
}	O
if	O
(	O
zQunlock_file	pointer
!=	O
NULL	O
)	O
{	O
(	O
void	O
)	O
fsysdep_unlock_uuxqt_file	function
(	O
zQunlock_file	pointer
)	O
;	O
zQunlock_file	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
(	O
iflags	int
&	O
FREE_QINPUT	O
)	O
!=	O
0	int
)	O
ubuffree	function
(	O
zQinput	pointer
)	O
;	O
if	O
(	O
(	O
iflags	int
&	O
FREE_OUTPUT	O
)	O
!=	O
0	int
)	O
ubuffree	function
(	O
zQoutput	pointer
)	O
;	O
if	O
(	O
(	O
iflags	int
&	O
FREE_MAIL	O
)	O
!=	O
0	int
)	O
ubuffree	function
(	O
zQmail	pointer
)	O
;	O
if	O
(	O
fQunlock_directory	int
)	O
{	O
(	O
void	O
)	O
fsysdep_unlock_uuxqt_dir	function
(	O
iQlock_seq	int
)	O
;	O
fQunlock_directory	int
=	O
FALSE	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cQfiles	int
;	O
i	int
++	O
)	O
{	O
ubuffree	function
(	O
azQfiles	pointer
[	O
i	int
]	O
)	O
;	O
ubuffree	function
(	O
azQfiles_to	pointer
[	O
i	int
]	O
)	O
;	O
}	O
ubuffree	function
(	O
zQoutfile	pointer
)	O
;	O
ubuffree	function
(	O
zQoutsys	pointer
)	O
;	O
ubuffree	function
(	O
zQrequestor	pointer
)	O
;	O
if	O
(	O
azQargs	pointer
!=	O
NULL	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
azQargs	pointer
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
ubuffree	function
(	O
azQargs	pointer
[	O
i	int
]	O
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
azQargs	pointer
)	O
;	O
azQargs	pointer
=	O
NULL	O
;	O
}	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zQcmd	pointer
)	O
;	O
zQcmd	pointer
=	O
NULL	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
azQfiles	pointer
)	O
;	O
azQfiles	pointer
=	O
NULL	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
azQfiles_to	pointer
)	O
;	O
azQfiles_to	pointer
=	O
NULL	O
;	O
}	O
static	O
boolean	int
fqforward	function
(	O
zfile	pointer
,	O
pzallowed	pointer
,	O
zlog	pointer
,	O
zmail	pointer
)	O
const	O
char	O
*	O
zfile	pointer
;	O
char	O
*	O
*	O
pzallowed	pointer
;	O
const	O
char	O
*	O
zlog	pointer
;	O
const	O
char	O
*	O
zmail	pointer
;	O
{	O
const	O
char	O
*	O
zexclam	pointer
;	O
if	O
(	O
zfile	pointer
==	O
NULL	O
)	O
return	O
TRUE	O
;	O
zexclam	pointer
=	O
strchr	function
(	O
zfile	pointer
,	O
'!'	O
)	O
;	O
if	O
(	O
zexclam	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
clen	long
;	O
char	O
*	O
zsys	pointer
;	O
boolean	int
fret	int
;	O
clen	long
=	O
zexclam	pointer
-	O
zfile	pointer
;	O
zsys	pointer
=	O
zbufalc	function
(	O
clen	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
zsys	pointer
,	O
zfile	pointer
,	O
clen	long
)	O
;	O
zsys	pointer
[	O
clen	long
]	O
=	O
'\0'	O
;	O
fret	int
=	O
FALSE	O
;	O
if	O
(	O
pzallowed	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
for	O
(	O
pz	pointer
=	O
pzallowed	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
*	O
pz	pointer
,	O
"ANY"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
*	O
pz	pointer
,	O
zsys	pointer
)	O
==	O
0	int
)	O
{	O
fret	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
fret	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Not permitted to forward %s %s (%s)"	pointer
,	O
zlog	pointer
,	O
zsys	pointer
,	O
zQcmd	pointer
)	O
;	O
if	O
(	O
zmail	pointer
!=	O
NULL	O
&&	O
!	O
fQno_ack	int
)	O
{	O
int	O
i	int
;	O
const	O
char	O
*	O
az	array
[	O
20	int
]	O
;	O
i	int
=	O
0	int
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"Your execution request failed because you are"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
" not permitted to forward files\n"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
zlog	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
" the system\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
zsys	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\n"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"Execution requested was:\n\t"	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
zQcmd	pointer
;	O
az	array
[	O
i	int
++	O
]	O
=	O
"\n"	pointer
;	O
(	O
void	O
)	O
fsysdep_mail	function
(	O
zmail	pointer
,	O
"Execution failed"	pointer
,	O
i	int
,	O
az	array
)	O
;	O
}	O
}	O
ubuffree	function
(	O
zsys	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
return	O
TRUE	O
;	O
}	O
