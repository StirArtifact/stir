typedef	O
struct	O
{	O
size_t	long
p	int
;	O
int	O
nblocks	int
;	O
double	O
rnorm	pointer
;	O
int	O
svd	int
;	O
gsl_matrix	struct
*	O
T	pointer
;	O
gsl_matrix	struct
*	O
R	pointer
;	O
gsl_vector	struct
*	O
QTb	pointer
;	O
gsl_vector	struct
*	O
work	pointer
;	O
gsl_vector	struct
*	O
work3	pointer
;	O
gsl_multifit_linear_workspace	struct
*	O
multifit_workspace_p	pointer
;	O
}	O
tsqr_state_t	struct
;	O
static	O
void	O
*	O
tsqr_alloc	function
(	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
tsqr_free	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
tsqr_reset	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
tsqr_accumulate	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
b	double
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
tsqr_solve	function
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct
*	O
x	double
,	O
double	O
*	O
rnorm	pointer
,	O
double	O
*	O
snorm	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
tsqr_rcond	function
(	O
double	O
*	O
rcond	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
tsqr_lcurve	function
(	O
gsl_vector	struct
*	O
reg_param	pointer
,	O
gsl_vector	struct
*	O
rho	pointer
,	O
gsl_vector	struct
*	O
eta	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
tsqr_svd	function
(	O
tsqr_state_t	struct
*	O
state	pointer
)	O
;	O
static	O
void	O
*	O
tsqr_alloc	function
(	O
const	O
size_t	long
p	int
)	O
{	O
tsqr_state_t	struct
*	O
state	pointer
;	O
if	O
(	O
p	int
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"p must be a positive integer"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
tsqr_state_t	struct
)	O
)	O
;	O
if	O
(	O
!	O
state	pointer
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate tsqr state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
p	int
=	O
p	int
;	O
state	pointer
->	O
nblocks	int
=	O
0	int
;	O
state	pointer
->	O
rnorm	pointer
=	O
0.0	int
;	O
state	pointer
->	O
R	pointer
=	O
gsl_matrix_alloc	function
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
R	pointer
==	O
NULL	O
)	O
{	O
tsqr_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate R matrix"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
QTb	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
QTb	pointer
==	O
NULL	O
)	O
{	O
tsqr_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate QTb vector"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
T	pointer
=	O
gsl_matrix_alloc	function
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
T	pointer
==	O
NULL	O
)	O
{	O
tsqr_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate T matrix"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
work	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
work	pointer
==	O
NULL	O
)	O
{	O
tsqr_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate workspace vector"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
work3	pointer
=	O
gsl_vector_alloc	function
(	O
3	int
*	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
work3	pointer
==	O
NULL	O
)	O
{	O
tsqr_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate work3 vector"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
multifit_workspace_p	pointer
=	O
gsl_multifit_linear_alloc	function
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
multifit_workspace_p	pointer
==	O
NULL	O
)	O
{	O
tsqr_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate multifit workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
state	pointer
;	O
}	O
static	O
void	O
tsqr_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
tsqr_state_t	struct
*	O
state	pointer
=	O
(	O
tsqr_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
R	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
R	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
QTb	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
QTb	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
T	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
T	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
work	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
work	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
work3	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
work3	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
multifit_workspace_p	pointer
)	O
gsl_multifit_linear_free	function
(	O
state	pointer
->	O
multifit_workspace_p	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
tsqr_reset	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
tsqr_state_t	struct
*	O
state	pointer
=	O
(	O
tsqr_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_matrix_set_zero	function
(	O
state	pointer
->	O
R	pointer
)	O
;	O
gsl_vector_set_zero	function
(	O
state	pointer
->	O
QTb	pointer
)	O
;	O
state	pointer
->	O
nblocks	int
=	O
0	int
;	O
state	pointer
->	O
rnorm	pointer
=	O
0.0	int
;	O
state	pointer
->	O
svd	int
=	O
0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
tsqr_accumulate	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
b	double
,	O
void	O
*	O
vstate	pointer
)	O
{	O
tsqr_state_t	struct
*	O
state	pointer
=	O
(	O
tsqr_state_t	struct
*	O
)	O
vstate	pointer
;	O
const	O
size_t	long
n	int
=	O
A	pointer
->	O
size1	long
;	O
const	O
size_t	long
p	int
=	O
A	pointer
->	O
size2	long
;	O
if	O
(	O
p	int
!=	O
state	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"columns of A do not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"A and b have different numbers of rows"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
state	pointer
->	O
nblocks	int
==	O
0	int
&&	O
n	int
<	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"n must be >= p"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
state	pointer
->	O
nblocks	int
==	O
0	int
)	O
{	O
int	O
status	int
;	O
gsl_matrix_view	struct
R	pointer
=	O
gsl_matrix_submatrix	function
(	O
A	pointer
,	O
0	int
,	O
0	int
,	O
p	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct
QTb	pointer
=	O
gsl_vector_subvector	function
(	O
state	pointer
->	O
QTb	pointer
,	O
0	int
,	O
p	int
)	O
;	O
gsl_vector_view	struct
b1	pointer
=	O
gsl_vector_subvector	function
(	O
b	double
,	O
0	int
,	O
p	int
)	O
;	O
status	int
=	O
gsl_linalg_QR_decomp_r	function
(	O
A	pointer
,	O
state	pointer
->	O
T	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_matrix_tricpy	function
(	O
CblasUpper	int
,	O
CblasNonUnit	int
,	O
state	pointer
->	O
R	pointer
,	O
&	O
R	pointer
.	O
matrix	struct
)	O
;	O
gsl_linalg_QR_QTvec_r	function
(	O
A	pointer
,	O
state	pointer
->	O
T	pointer
,	O
b	double
,	O
state	pointer
->	O
work	pointer
)	O
;	O
gsl_vector_memcpy	function
(	O
&	O
QTb	pointer
.	O
vector	struct
,	O
&	O
b1	pointer
.	O
vector	struct
)	O
;	O
if	O
(	O
n	int
>	O
p	int
)	O
{	O
gsl_vector_view	struct
b2	float
=	O
gsl_vector_subvector	function
(	O
b	double
,	O
p	int
,	O
n	int
-	O
p	int
)	O
;	O
state	pointer
->	O
rnorm	pointer
=	O
gsl_blas_dnrm2	function
(	O
&	O
b2	float
.	O
vector	struct
)	O
;	O
}	O
else	O
state	pointer
->	O
rnorm	pointer
=	O
0.0	int
;	O
state	pointer
->	O
nblocks	int
=	O
1	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_linalg_QR_TR_decomp	function
(	O
state	pointer
->	O
R	pointer
,	O
A	pointer
,	O
state	pointer
->	O
T	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
work	pointer
,	O
state	pointer
->	O
QTb	pointer
)	O
;	O
gsl_blas_dgemv	function
(	O
CblasTrans	int
,	O
1.0	int
,	O
A	pointer
,	O
b	double
,	O
1.0	int
,	O
state	pointer
->	O
work	pointer
)	O
;	O
gsl_blas_dtrmv	function
(	O
CblasUpper	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
state	pointer
->	O
T	pointer
,	O
state	pointer
->	O
work	pointer
)	O
;	O
gsl_vector_sub	function
(	O
state	pointer
->	O
QTb	pointer
,	O
state	pointer
->	O
work	pointer
)	O
;	O
gsl_blas_dgemv	function
(	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
A	pointer
,	O
state	pointer
->	O
work	pointer
,	O
1.0	int
,	O
b	double
)	O
;	O
state	pointer
->	O
rnorm	pointer
=	O
gsl_hypot	function
(	O
state	pointer
->	O
rnorm	pointer
,	O
gsl_blas_dnrm2	function
(	O
b	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
tsqr_solve	function
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct
*	O
x	double
,	O
double	O
*	O
rnorm	pointer
,	O
double	O
*	O
snorm	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
tsqr_state_t	struct
*	O
state	pointer
=	O
(	O
tsqr_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
x	double
->	O
size	long
!=	O
state	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"solution vector does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
lambda	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"regularization parameter should be non-negative"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
lambda	double
==	O
0.0	int
)	O
{	O
gsl_vector_memcpy	function
(	O
x	double
,	O
state	pointer
->	O
QTb	pointer
)	O
;	O
gsl_blas_dtrsv	function
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
state	pointer
->	O
R	pointer
,	O
x	double
)	O
;	O
*	O
rnorm	pointer
=	O
state	pointer
->	O
rnorm	pointer
;	O
*	O
snorm	pointer
=	O
gsl_blas_dnrm2	function
(	O
x	double
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
if	O
(	O
state	pointer
->	O
svd	int
==	O
0	int
)	O
{	O
status	int
=	O
tsqr_svd	function
(	O
state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
status	int
=	O
gsl_multifit_linear_solve	function
(	O
lambda	double
,	O
state	pointer
->	O
R	pointer
,	O
state	pointer
->	O
QTb	pointer
,	O
x	double
,	O
rnorm	pointer
,	O
snorm	pointer
,	O
state	pointer
->	O
multifit_workspace_p	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
*	O
rnorm	pointer
=	O
gsl_hypot	function
(	O
*	O
rnorm	pointer
,	O
state	pointer
->	O
rnorm	pointer
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
tsqr_lcurve	function
(	O
gsl_vector	struct
*	O
reg_param	pointer
,	O
gsl_vector	struct
*	O
rho	pointer
,	O
gsl_vector	struct
*	O
eta	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
tsqr_state_t	struct
*	O
state	pointer
=	O
(	O
tsqr_state_t	struct
*	O
)	O
vstate	pointer
;	O
int	O
status	int
;	O
size_t	long
i	long
;	O
if	O
(	O
state	pointer
->	O
svd	int
==	O
0	int
)	O
{	O
status	int
=	O
tsqr_svd	function
(	O
state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
status	int
=	O
gsl_multifit_linear_lcurve	function
(	O
state	pointer
->	O
QTb	pointer
,	O
reg_param	pointer
,	O
rho	pointer
,	O
eta	pointer
,	O
state	pointer
->	O
multifit_workspace_p	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rho	pointer
->	O
size	long
;	O
++	O
i	long
)	O
{	O
double	O
*	O
rhoi	pointer
=	O
gsl_vector_ptr	function
(	O
rho	pointer
,	O
i	long
)	O
;	O
*	O
rhoi	pointer
=	O
gsl_hypot	function
(	O
*	O
rhoi	pointer
,	O
state	pointer
->	O
rnorm	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
tsqr_rcond	function
(	O
double	O
*	O
rcond	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
tsqr_state_t	struct
*	O
state	pointer
=	O
(	O
tsqr_state_t	struct
*	O
)	O
vstate	pointer
;	O
return	O
gsl_linalg_tri_rcond	function
(	O
CblasUpper	int
,	O
state	pointer
->	O
R	pointer
,	O
rcond	pointer
,	O
state	pointer
->	O
work3	pointer
)	O
;	O
}	O
static	O
int	O
tsqr_svd	function
(	O
tsqr_state_t	struct
*	O
state	pointer
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_multifit_linear_svd	function
(	O
state	pointer
->	O
R	pointer
,	O
state	pointer
->	O
multifit_workspace_p	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
GSL_ERROR	O
(	O
"error computing SVD of R"	pointer
,	O
status	int
)	O
;	O
}	O
state	pointer
->	O
svd	int
=	O
1	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multilarge_linear_type	struct
tsqr_type	struct
=	O
{	O
"tsqr"	pointer
,	O
tsqr_alloc	function
,	O
tsqr_reset	function
,	O
tsqr_accumulate	function
,	O
tsqr_solve	function
,	O
tsqr_rcond	function
,	O
tsqr_lcurve	function
,	O
tsqr_free	function
}	O
;	O
const	O
gsl_multilarge_linear_type	struct
*	O
gsl_multilarge_linear_tsqr	pointer
=	O
&	O
tsqr_type	struct
;	O
