static	O
const	O
unsigned	O
char	O
fillbuf	array
[	O
64	int
]	O
=	O
{	O
0x80	int
,	O
0	int
}	O
;	O
void	O
sha_init_ctx	function
(	O
struct	O
sha_ctx	struct
*	O
ctx	pointer
)	O
{	O
ctx	pointer
->	O
A	int
=	O
0x67452301	int
;	O
ctx	pointer
->	O
B	int
=	O
0xefcdab89	int
;	O
ctx	pointer
->	O
C	int
=	O
0x98badcfe	int
;	O
ctx	pointer
->	O
D	int
=	O
0x10325476	int
;	O
ctx	pointer
->	O
E	int
=	O
0xc3d2e1f0	int
;	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
=	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
=	O
0	int
;	O
ctx	pointer
->	O
buflen	int
=	O
0	int
;	O
}	O
void	O
*	O
sha_read_ctx	function
(	O
const	O
struct	O
sha_ctx	struct
*	O
ctx	pointer
,	O
void	O
*	O
resbuf	pointer
)	O
{	O
(	O
(	O
md5_uint32	int
*	O
)	O
resbuf	pointer
)	O
[	O
0	int
]	O
=	O
NOTSWAP	O
(	O
ctx	pointer
->	O
A	int
)	O
;	O
(	O
(	O
md5_uint32	int
*	O
)	O
resbuf	pointer
)	O
[	O
1	int
]	O
=	O
NOTSWAP	O
(	O
ctx	pointer
->	O
B	int
)	O
;	O
(	O
(	O
md5_uint32	int
*	O
)	O
resbuf	pointer
)	O
[	O
2	int
]	O
=	O
NOTSWAP	O
(	O
ctx	pointer
->	O
C	int
)	O
;	O
(	O
(	O
md5_uint32	int
*	O
)	O
resbuf	pointer
)	O
[	O
3	int
]	O
=	O
NOTSWAP	O
(	O
ctx	pointer
->	O
D	int
)	O
;	O
(	O
(	O
md5_uint32	int
*	O
)	O
resbuf	pointer
)	O
[	O
4	int
]	O
=	O
NOTSWAP	O
(	O
ctx	pointer
->	O
E	int
)	O
;	O
return	O
resbuf	pointer
;	O
}	O
void	O
*	O
sha_finish_ctx	function
(	O
struct	O
sha_ctx	struct
*	O
ctx	pointer
,	O
void	O
*	O
resbuf	pointer
)	O
{	O
md5_uint32	int
bytes	int
=	O
ctx	pointer
->	O
buflen	int
;	O
size_t	long
pad	long
;	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
+=	O
bytes	int
;	O
if	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
<	O
bytes	int
)	O
++	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
;	O
pad	long
=	O
bytes	int
>=	O
56	int
?	O
64	int
+	O
56	int
-	O
bytes	int
:	O
56	int
-	O
bytes	int
;	O
memcpy	function
(	O
&	O
ctx	pointer
->	O
buffer	array
[	O
bytes	int
]	O
,	O
fillbuf	array
,	O
pad	long
)	O
;	O
*	O
(	O
md5_uint32	int
*	O
)	O
&	O
ctx	pointer
->	O
buffer	array
[	O
bytes	int
+	O
pad	long
+	O
4	int
]	O
=	O
NOTSWAP	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
<<	O
3	int
)	O
;	O
*	O
(	O
md5_uint32	int
*	O
)	O
&	O
ctx	pointer
->	O
buffer	array
[	O
bytes	int
+	O
pad	long
]	O
=	O
NOTSWAP	O
(	O
(	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
<<	O
3	int
)	O
|	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
>>	O
29	int
)	O
)	O
;	O
sha_process_block	function
(	O
ctx	pointer
->	O
buffer	array
,	O
bytes	int
+	O
pad	long
+	O
8	int
,	O
ctx	pointer
)	O
;	O
return	O
sha_read_ctx	function
(	O
ctx	pointer
,	O
resbuf	pointer
)	O
;	O
}	O
int	O
sha_block	function
(	O
void	O
*	O
thisisa	pointer
,	O
void	O
*	O
resblock	pointer
,	O
unsigned	O
char	O
*	O
iblock	pointer
,	O
int	O
icount	int
)	O
{	O
struct	O
sha_ctx	struct
*	O
ctx	pointer
=	O
(	O
struct	O
sha_ctx	struct
*	O
)	O
thisisa	pointer
;	O
char	O
buffer	array
[	O
SHA_MEM_BLOCKSIZE	int
+	O
72	int
]	O
;	O
size_t	long
sum	long
;	O
if	O
(	O
iblock	pointer
==	O
NULL	O
&&	O
icount	int
<	O
0	int
)	O
{	O
sha_init_ctx	function
(	O
ctx	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
icount	int
==	O
SHA_MEM_BLOCKSIZE	int
)	O
{	O
int	O
n	int
;	O
sum	long
=	O
0	int
;	O
n	int
=	O
icount	int
;	O
sum	long
+=	O
n	int
;	O
memcpy	function
(	O
buffer	array
,	O
iblock	pointer
,	O
icount	int
)	O
;	O
sha_process_block	function
(	O
buffer	array
,	O
SHA_MEM_BLOCKSIZE	int
,	O
ctx	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
icount	int
>=	O
0	int
&&	O
iblock	pointer
)	O
{	O
if	O
(	O
icount	int
)	O
sha_process_bytes	function
(	O
iblock	pointer
,	O
icount	int
,	O
ctx	pointer
)	O
;	O
return	O
0	int
;	O
}	O
sha_finish_ctx	function
(	O
ctx	pointer
,	O
resblock	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
sha_stream	function
(	O
int	O
ifd	int
,	O
void	O
*	O
resblock	pointer
)	O
{	O
struct	O
sha_ctx	struct
ctx	pointer
;	O
char	O
buffer	array
[	O
BLOCKSIZE	int
+	O
72	int
]	O
;	O
size_t	long
sum	long
;	O
sha_init_ctx	function
(	O
&	O
ctx	pointer
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
n	int
;	O
sum	long
=	O
0	int
;	O
do	O
{	O
n	int
=	O
uxfio_sfread	function
(	O
ifd	int
,	O
buffer	array
+	O
sum	long
,	O
BLOCKSIZE	int
-	O
sum	long
)	O
;	O
sum	long
+=	O
n	int
;	O
}	O
while	O
(	O
sum	long
<	O
BLOCKSIZE	int
&&	O
n	int
>	O
0	int
)	O
;	O
if	O
(	O
n	int
<	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
n	int
==	O
0	int
)	O
break	O
;	O
sha_process_block	function
(	O
buffer	array
,	O
BLOCKSIZE	int
,	O
&	O
ctx	pointer
)	O
;	O
}	O
if	O
(	O
sum	long
>	O
0	int
)	O
sha_process_bytes	function
(	O
buffer	array
,	O
sum	long
,	O
&	O
ctx	pointer
)	O
;	O
sha_finish_ctx	function
(	O
&	O
ctx	pointer
,	O
resblock	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
sha_process_bytes	function
(	O
const	O
void	O
*	O
buffer	array
,	O
size_t	long
len	long
,	O
struct	O
sha_ctx	struct
*	O
ctx	pointer
)	O
{	O
if	O
(	O
ctx	pointer
->	O
buflen	int
!=	O
0	int
)	O
{	O
size_t	long
left_over	long
=	O
ctx	pointer
->	O
buflen	int
;	O
size_t	long
add	long
=	O
128	int
-	O
left_over	long
>	O
len	long
?	O
len	long
:	O
128	int
-	O
left_over	long
;	O
memcpy	function
(	O
&	O
ctx	pointer
->	O
buffer	array
[	O
left_over	long
]	O
,	O
buffer	array
,	O
add	long
)	O
;	O
ctx	pointer
->	O
buflen	int
+=	O
add	long
;	O
if	O
(	O
left_over	long
+	O
add	long
>	O
64	int
)	O
{	O
sha_process_block	function
(	O
ctx	pointer
->	O
buffer	array
,	O
(	O
left_over	long
+	O
add	long
)	O
&	O
~	O
63	int
,	O
ctx	pointer
)	O
;	O
memcpy	function
(	O
ctx	pointer
->	O
buffer	array
,	O
&	O
ctx	pointer
->	O
buffer	array
[	O
(	O
left_over	long
+	O
add	long
)	O
&	O
~	O
63	int
]	O
,	O
(	O
left_over	long
+	O
add	long
)	O
&	O
63	int
)	O
;	O
ctx	pointer
->	O
buflen	int
=	O
(	O
left_over	long
+	O
add	long
)	O
&	O
63	int
;	O
}	O
buffer	array
=	O
(	O
const	O
char	O
*	O
)	O
buffer	array
+	O
add	long
;	O
len	long
-=	O
add	long
;	O
}	O
if	O
(	O
len	long
>	O
64	int
)	O
{	O
sha_process_block	function
(	O
buffer	array
,	O
len	long
&	O
~	O
63	int
,	O
ctx	pointer
)	O
;	O
buffer	array
=	O
(	O
const	O
char	O
*	O
)	O
buffer	array
+	O
(	O
len	long
&	O
~	O
63	int
)	O
;	O
len	long
&=	O
63	int
;	O
}	O
if	O
(	O
len	long
>	O
0	int
)	O
{	O
memcpy	function
(	O
ctx	pointer
->	O
buffer	array
,	O
buffer	array
,	O
len	long
)	O
;	O
ctx	pointer
->	O
buflen	int
=	O
len	long
;	O
}	O
}	O
void	O
sha_process_block	function
(	O
const	O
void	O
*	O
buffer	array
,	O
size_t	long
len	long
,	O
struct	O
sha_ctx	struct
*	O
ctx	pointer
)	O
{	O
const	O
md5_uint32	int
*	O
words	pointer
=	O
buffer	array
;	O
size_t	long
nwords	long
=	O
len	long
/	O
sizeof	O
(	O
md5_uint32	int
)	O
;	O
const	O
md5_uint32	int
*	O
endp	pointer
=	O
words	pointer
+	O
nwords	long
;	O
md5_uint32	int
x	array
[	O
16	int
]	O
;	O
md5_uint32	int
a	int
=	O
ctx	pointer
->	O
A	int
;	O
md5_uint32	int
b	int
=	O
ctx	pointer
->	O
B	int
;	O
md5_uint32	int
c	int
=	O
ctx	pointer
->	O
C	int
;	O
md5_uint32	int
d	int
=	O
ctx	pointer
->	O
D	int
;	O
md5_uint32	int
e	int
=	O
ctx	pointer
->	O
E	int
;	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
+=	O
len	long
;	O
if	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
<	O
len	long
)	O
++	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
;	O
while	O
(	O
words	pointer
<	O
endp	pointer
)	O
{	O
md5_uint32	int
tm	int
;	O
int	O
t	int
;	O
for	O
(	O
t	int
=	O
0	int
;	O
t	int
<	O
16	int
;	O
t	int
++	O
)	O
{	O
x	array
[	O
t	int
]	O
=	O
NOTSWAP	O
(	O
*	O
words	pointer
)	O
;	O
words	pointer
++	O
;	O
}	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
0	int
]	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
1	int
]	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
2	int
]	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
3	int
]	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
4	int
]	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
5	int
]	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
6	int
]	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
7	int
]	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
8	int
]	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
9	int
]	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
10	int
]	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
11	int
]	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
12	int
]	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
13	int
]	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
14	int
]	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F1	O
,	O
K1	int
,	O
x	array
[	O
15	int
]	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F1	O
,	O
K1	int
,	O
M	O
(	O
16	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F1	O
,	O
K1	int
,	O
M	O
(	O
17	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F1	O
,	O
K1	int
,	O
M	O
(	O
18	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F1	O
,	O
K1	int
,	O
M	O
(	O
19	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
20	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
21	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
22	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
23	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
24	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
25	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
26	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
27	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
28	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
29	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
30	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
31	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
32	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
33	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
34	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
35	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
36	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
37	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
38	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F2	O
,	O
K2	int
,	O
M	O
(	O
39	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
40	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
41	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
42	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
43	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
44	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
45	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
46	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
47	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
48	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
49	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
50	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
51	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
52	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
53	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
54	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
55	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
56	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
57	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
58	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F3	O
,	O
K3	int
,	O
M	O
(	O
59	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
60	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
61	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
62	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
63	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
64	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
65	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
66	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
67	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
68	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
69	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
70	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
71	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
72	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
73	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
74	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
75	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
76	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
77	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
b	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
78	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
a	int
,	O
F4	O
,	O
K4	int
,	O
M	O
(	O
79	int
)	O
)	O
;	O
a	int
=	O
ctx	pointer
->	O
A	int
+=	O
a	int
;	O
b	int
=	O
ctx	pointer
->	O
B	int
+=	O
b	int
;	O
c	int
=	O
ctx	pointer
->	O
C	int
+=	O
c	int
;	O
d	int
=	O
ctx	pointer
->	O
D	int
+=	O
d	int
;	O
e	int
=	O
ctx	pointer
->	O
E	int
+=	O
e	int
;	O
}	O
}	O
