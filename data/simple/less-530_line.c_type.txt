static	O
char	O
*	O
linebuf	pointer
=	O
NULL	O
;	O
static	O
char	O
*	O
attr	int
=	O
NULL	O
;	O
public	O
int	O
size_linebuf	int
=	O
0	int
;	O
static	O
int	O
cshift	int
;	O
public	O
int	O
hshift	int
;	O
public	O
int	O
tabstops	array
[	O
TABSTOP_MAX	int
]	O
=	O
{	O
0	int
}	O
;	O
public	O
int	O
ntabstops	int
=	O
1	int
;	O
public	O
int	O
tabdefault	int
=	O
8	int
;	O
public	O
POSITION	long
highest_hilite	long
;	O
static	O
int	O
curr	int
;	O
static	O
int	O
column	int
;	O
static	O
int	O
right_curr	int
;	O
static	O
int	O
right_column	int
;	O
static	O
int	O
overstrike	int
;	O
static	O
int	O
last_overstrike	int
=	O
AT_NORMAL	O
;	O
static	O
int	O
is_null_line	int
;	O
static	O
int	O
lmargin	int
;	O
static	O
LWCHAR	long
pendc	long
;	O
static	O
POSITION	long
pendpos	long
;	O
static	O
char	O
*	O
end_ansi_chars	pointer
;	O
static	O
char	O
*	O
mid_ansi_chars	pointer
;	O
static	O
int	O
attr_swidth	function
LESSPARAMS	O
(	O
(	O
int	O
a	int
)	O
)	O
;	O
static	O
int	O
attr_ewidth	function
LESSPARAMS	O
(	O
(	O
int	O
a	int
)	O
)	O
;	O
static	O
int	O
do_append	function
LESSPARAMS	O
(	O
(	O
LWCHAR	long
ch	long
,	O
char	O
*	O
rep	pointer
,	O
POSITION	long
pos	long
)	O
)	O
;	O
extern	O
int	O
sigs	int
;	O
extern	O
int	O
bs_mode	int
;	O
extern	O
int	O
linenums	int
;	O
extern	O
int	O
ctldisp	int
;	O
extern	O
int	O
twiddle	int
;	O
extern	O
int	O
binattr	int
;	O
extern	O
int	O
status_col	int
;	O
extern	O
int	O
auto_wrap	int
,	O
ignaw	int
;	O
extern	O
int	O
bo_s_width	int
,	O
bo_e_width	int
;	O
extern	O
int	O
ul_s_width	int
,	O
ul_e_width	int
;	O
extern	O
int	O
bl_s_width	int
,	O
bl_e_width	int
;	O
extern	O
int	O
so_s_width	int
,	O
so_e_width	int
;	O
extern	O
int	O
sc_width	int
,	O
sc_height	int
;	O
extern	O
int	O
utf_mode	int
;	O
extern	O
POSITION	long
start_attnpos	long
;	O
extern	O
POSITION	long
end_attnpos	long
;	O
extern	O
LWCHAR	long
rscroll_char	long
;	O
extern	O
int	O
rscroll_attr	int
;	O
static	O
char	O
mbc_buf	array
[	O
MAX_UTF_CHAR_LEN	int
]	O
;	O
static	O
int	O
mbc_buf_len	int
=	O
0	int
;	O
static	O
int	O
mbc_buf_index	int
=	O
0	int
;	O
static	O
POSITION	long
mbc_pos	long
;	O
public	O
void	O
init_line	function
(	O
)	O
{	O
end_ansi_chars	pointer
=	O
lgetenv	function
(	O
"LESSANSIENDCHARS"	pointer
)	O
;	O
if	O
(	O
end_ansi_chars	pointer
==	O
NULL	O
||	O
*	O
end_ansi_chars	pointer
==	O
'\0'	O
)	O
end_ansi_chars	pointer
=	O
"m"	pointer
;	O
mid_ansi_chars	pointer
=	O
lgetenv	function
(	O
"LESSANSIMIDCHARS"	pointer
)	O
;	O
if	O
(	O
mid_ansi_chars	pointer
==	O
NULL	O
||	O
*	O
mid_ansi_chars	pointer
==	O
'\0'	O
)	O
mid_ansi_chars	pointer
=	O
"0123456789:;[?!\"'#%()*+ "	pointer
;	O
linebuf	pointer
=	O
(	O
char	O
*	O
)	O
ecalloc	function
(	O
LINEBUF_SIZE	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
attr	int
=	O
(	O
char	O
*	O
)	O
ecalloc	function
(	O
LINEBUF_SIZE	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
size_linebuf	int
=	O
LINEBUF_SIZE	int
;	O
}	O
static	O
int	O
expand_linebuf	function
(	O
)	O
{	O
int	O
new_size	int
=	O
size_linebuf	int
*	O
2	int
;	O
char	O
*	O
new_buf	pointer
=	O
(	O
char	O
*	O
)	O
calloc	function
(	O
new_size	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
char	O
*	O
new_attr	pointer
=	O
(	O
char	O
*	O
)	O
calloc	function
(	O
new_size	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
if	O
(	O
new_buf	pointer
==	O
NULL	O
||	O
new_attr	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
new_attr	pointer
!=	O
NULL	O
)	O
free	function
(	O
new_attr	pointer
)	O
;	O
if	O
(	O
new_buf	pointer
!=	O
NULL	O
)	O
free	function
(	O
new_buf	pointer
)	O
;	O
return	O
1	int
;	O
}	O
memcpy	function
(	O
new_buf	pointer
,	O
linebuf	pointer
,	O
size_linebuf	int
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
memcpy	function
(	O
new_attr	pointer
,	O
attr	int
,	O
size_linebuf	int
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
free	function
(	O
attr	int
)	O
;	O
free	function
(	O
linebuf	pointer
)	O
;	O
linebuf	pointer
=	O
new_buf	pointer
;	O
attr	int
=	O
new_attr	pointer
;	O
size_linebuf	int
=	O
new_size	int
;	O
return	O
0	int
;	O
}	O
public	O
int	O
is_ascii_char	function
(	O
ch	long
)	O
LWCHAR	long
ch	long
;	O
{	O
return	O
(	O
ch	long
<=	O
0x7F	int
)	O
;	O
}	O
public	O
void	O
prewind	function
(	O
)	O
{	O
curr	int
=	O
0	int
;	O
column	int
=	O
0	int
;	O
right_curr	int
=	O
0	int
;	O
right_column	int
=	O
0	int
;	O
cshift	int
=	O
0	int
;	O
overstrike	int
=	O
0	int
;	O
last_overstrike	int
=	O
AT_NORMAL	O
;	O
mbc_buf_len	int
=	O
0	int
;	O
is_null_line	int
=	O
0	int
;	O
pendc	long
=	O
'\0'	O
;	O
lmargin	int
=	O
0	int
;	O
if	O
(	O
status_col	int
)	O
lmargin	int
+=	O
2	int
;	O
}	O
static	O
void	O
set_linebuf	function
(	O
n	int
,	O
ch	long
,	O
a	int
)	O
int	O
n	int
;	O
LWCHAR	long
ch	long
;	O
char	O
a	int
;	O
{	O
linebuf	pointer
[	O
n	int
]	O
=	O
ch	long
;	O
attr	int
[	O
n	int
]	O
=	O
a	int
;	O
}	O
static	O
void	O
add_linebuf	function
(	O
ch	long
,	O
a	int
,	O
w	int
)	O
LWCHAR	long
ch	long
;	O
char	O
a	int
;	O
int	O
w	int
;	O
{	O
set_linebuf	function
(	O
curr	int
++	O
,	O
ch	long
,	O
a	int
)	O
;	O
column	int
+=	O
w	int
;	O
}	O
public	O
void	O
plinenum	function
(	O
pos	long
)	O
POSITION	long
pos	long
;	O
{	O
LINENUM	long
linenum	long
=	O
0	int
;	O
int	O
i	int
;	O
if	O
(	O
linenums	int
==	O
OPT_ONPLUS	int
)	O
{	O
linenum	long
=	O
find_linenum	function
(	O
pos	long
)	O
;	O
}	O
if	O
(	O
status_col	int
)	O
{	O
int	O
a	int
=	O
AT_NORMAL	O
;	O
char	O
c	int
=	O
posmark	function
(	O
pos	long
)	O
;	O
if	O
(	O
c	int
!=	O
0	int
)	O
a	int
|=	O
AT_HILITE	O
;	O
else	O
{	O
c	int
=	O
' '	O
;	O
if	O
(	O
start_attnpos	long
!=	O
NULL_POSITION	O
&&	O
pos	long
>=	O
start_attnpos	long
&&	O
pos	long
<=	O
end_attnpos	long
)	O
a	int
|=	O
AT_HILITE	O
;	O
}	O
add_linebuf	function
(	O
c	int
,	O
a	int
,	O
1	int
)	O
;	O
add_linebuf	function
(	O
' '	O
,	O
AT_NORMAL	O
,	O
1	int
)	O
;	O
}	O
if	O
(	O
linenums	int
==	O
OPT_ONPLUS	int
)	O
{	O
char	O
buf	pointer
[	O
INT_STRLEN_BOUND	O
(	O
linenum	long
)	O
+	O
2	int
]	O
;	O
int	O
pad	int
=	O
0	int
;	O
int	O
n	int
;	O
linenumtoa	function
(	O
linenum	long
,	O
buf	pointer
)	O
;	O
n	int
=	O
(	O
int	O
)	O
strlen	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
n	int
<	O
MIN_LINENUM_WIDTH	int
)	O
pad	int
=	O
MIN_LINENUM_WIDTH	int
-	O
n	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pad	int
;	O
i	int
++	O
)	O
add_linebuf	function
(	O
' '	O
,	O
AT_NORMAL	O
,	O
1	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
add_linebuf	function
(	O
buf	pointer
[	O
i	int
]	O
,	O
AT_BOLD	O
,	O
1	int
)	O
;	O
add_linebuf	function
(	O
' '	O
,	O
AT_NORMAL	O
,	O
1	int
)	O
;	O
lmargin	int
+=	O
n	int
+	O
pad	int
+	O
1	int
;	O
}	O
while	O
(	O
column	int
<	O
lmargin	int
)	O
{	O
add_linebuf	function
(	O
' '	O
,	O
AT_NORMAL	O
,	O
1	int
)	O
;	O
}	O
}	O
static	O
void	O
pshift	function
(	O
shift	int
)	O
int	O
shift	int
;	O
{	O
LWCHAR	long
prev_ch	long
=	O
0	int
;	O
unsigned	O
char	O
c	int
;	O
int	O
shifted	int
=	O
0	int
;	O
int	O
to	int
;	O
int	O
from	int
;	O
int	O
len	int
;	O
int	O
width	int
;	O
int	O
prev_attr	int
;	O
int	O
next_attr	int
;	O
if	O
(	O
shift	int
>	O
column	int
-	O
lmargin	int
)	O
shift	int
=	O
column	int
-	O
lmargin	int
;	O
if	O
(	O
shift	int
>	O
curr	int
-	O
lmargin	int
)	O
shift	int
=	O
curr	int
-	O
lmargin	int
;	O
to	int
=	O
from	int
=	O
lmargin	int
;	O
while	O
(	O
shifted	int
<=	O
shift	int
&&	O
from	int
<	O
curr	int
)	O
{	O
c	int
=	O
linebuf	pointer
[	O
from	int
]	O
;	O
if	O
(	O
ctldisp	int
==	O
OPT_ONPLUS	int
&&	O
IS_CSI_START	O
(	O
c	int
)	O
)	O
{	O
linebuf	pointer
[	O
to	int
]	O
=	O
c	int
;	O
attr	int
[	O
to	int
++	O
]	O
=	O
attr	int
[	O
from	int
++	O
]	O
;	O
while	O
(	O
from	int
<	O
curr	int
&&	O
linebuf	pointer
[	O
from	int
]	O
)	O
{	O
linebuf	pointer
[	O
to	int
]	O
=	O
linebuf	pointer
[	O
from	int
]	O
;	O
attr	int
[	O
to	int
++	O
]	O
=	O
attr	int
[	O
from	int
]	O
;	O
if	O
(	O
!	O
is_ansi_middle	function
(	O
linebuf	pointer
[	O
from	int
++	O
]	O
)	O
)	O
break	O
;	O
}	O
continue	O
;	O
}	O
width	int
=	O
0	int
;	O
if	O
(	O
!	O
IS_ASCII_OCTET	O
(	O
c	int
)	O
&&	O
utf_mode	int
)	O
{	O
LWCHAR	long
ch	long
;	O
len	int
=	O
utf_len	function
(	O
c	int
)	O
;	O
if	O
(	O
from	int
+	O
len	int
>	O
curr	int
)	O
break	O
;	O
ch	long
=	O
get_wchar	function
(	O
linebuf	pointer
+	O
from	int
)	O
;	O
if	O
(	O
!	O
is_composing_char	function
(	O
ch	long
)	O
&&	O
!	O
is_combining_char	function
(	O
prev_ch	long
,	O
ch	long
)	O
)	O
width	int
=	O
is_wide_char	function
(	O
ch	long
)	O
?	O
2	int
:	O
1	int
;	O
prev_ch	long
=	O
ch	long
;	O
}	O
else	O
{	O
len	int
=	O
1	int
;	O
if	O
(	O
c	int
==	O
'\b'	O
)	O
width	int
=	O
(	O
utf_mode	int
&&	O
is_wide_char	function
(	O
prev_ch	long
)	O
)	O
?	O
-	O
2	int
:	O
-	O
1	int
;	O
else	O
if	O
(	O
!	O
control_char	function
(	O
c	int
)	O
)	O
width	int
=	O
1	int
;	O
prev_ch	long
=	O
0	int
;	O
}	O
if	O
(	O
width	int
==	O
2	int
&&	O
shift	int
-	O
shifted	int
==	O
1	int
)	O
{	O
attr	int
[	O
to	int
]	O
=	O
attr	int
[	O
from	int
]	O
;	O
prev_ch	long
=	O
linebuf	pointer
[	O
to	int
++	O
]	O
=	O
' '	O
;	O
from	int
+=	O
len	int
;	O
shifted	int
++	O
;	O
continue	O
;	O
}	O
prev_attr	int
=	O
(	O
to	int
>	O
0	int
)	O
?	O
attr	int
[	O
to	int
-	O
1	int
]	O
:	O
AT_NORMAL	O
;	O
next_attr	int
=	O
(	O
from	int
+	O
len	int
<	O
curr	int
)	O
?	O
attr	int
[	O
from	int
+	O
len	int
]	O
:	O
prev_attr	int
;	O
if	O
(	O
!	O
is_at_equiv	function
(	O
attr	int
[	O
from	int
]	O
,	O
prev_attr	int
)	O
&&	O
!	O
is_at_equiv	function
(	O
attr	int
[	O
from	int
]	O
,	O
next_attr	int
)	O
)	O
{	O
width	int
+=	O
attr_swidth	function
(	O
attr	int
[	O
from	int
]	O
)	O
;	O
if	O
(	O
from	int
+	O
len	int
<	O
curr	int
)	O
width	int
+=	O
attr_ewidth	function
(	O
attr	int
[	O
from	int
]	O
)	O
;	O
if	O
(	O
is_at_equiv	function
(	O
prev_attr	int
,	O
next_attr	int
)	O
)	O
{	O
width	int
+=	O
attr_ewidth	function
(	O
prev_attr	int
)	O
;	O
if	O
(	O
from	int
+	O
len	int
<	O
curr	int
)	O
width	int
+=	O
attr_swidth	function
(	O
next_attr	int
)	O
;	O
}	O
}	O
if	O
(	O
shift	int
-	O
shifted	int
<	O
width	int
)	O
break	O
;	O
from	int
+=	O
len	int
;	O
shifted	int
+=	O
width	int
;	O
if	O
(	O
shifted	int
<	O
0	int
)	O
shifted	int
=	O
0	int
;	O
}	O
while	O
(	O
from	int
<	O
curr	int
)	O
{	O
linebuf	pointer
[	O
to	int
]	O
=	O
linebuf	pointer
[	O
from	int
]	O
;	O
attr	int
[	O
to	int
++	O
]	O
=	O
attr	int
[	O
from	int
++	O
]	O
;	O
}	O
curr	int
=	O
to	int
;	O
column	int
-=	O
shifted	int
;	O
cshift	int
+=	O
shifted	int
;	O
}	O
public	O
void	O
pshift_all	function
(	O
)	O
{	O
pshift	function
(	O
column	int
)	O
;	O
}	O
static	O
int	O
attr_swidth	function
(	O
a	int
)	O
int	O
a	int
;	O
{	O
int	O
w	int
=	O
0	int
;	O
a	int
=	O
apply_at_specials	function
(	O
a	int
)	O
;	O
if	O
(	O
a	int
&	O
AT_UNDERLINE	O
)	O
w	int
+=	O
ul_s_width	int
;	O
if	O
(	O
a	int
&	O
AT_BOLD	O
)	O
w	int
+=	O
bo_s_width	int
;	O
if	O
(	O
a	int
&	O
AT_BLINK	O
)	O
w	int
+=	O
bl_s_width	int
;	O
if	O
(	O
a	int
&	O
AT_STANDOUT	O
)	O
w	int
+=	O
so_s_width	int
;	O
return	O
w	int
;	O
}	O
static	O
int	O
attr_ewidth	function
(	O
a	int
)	O
int	O
a	int
;	O
{	O
int	O
w	int
=	O
0	int
;	O
a	int
=	O
apply_at_specials	function
(	O
a	int
)	O
;	O
if	O
(	O
a	int
&	O
AT_UNDERLINE	O
)	O
w	int
+=	O
ul_e_width	int
;	O
if	O
(	O
a	int
&	O
AT_BOLD	O
)	O
w	int
+=	O
bo_e_width	int
;	O
if	O
(	O
a	int
&	O
AT_BLINK	O
)	O
w	int
+=	O
bl_e_width	int
;	O
if	O
(	O
a	int
&	O
AT_STANDOUT	O
)	O
w	int
+=	O
so_e_width	int
;	O
return	O
w	int
;	O
}	O
static	O
int	O
pwidth	function
(	O
ch	long
,	O
a	int
,	O
prev_ch	long
)	O
LWCHAR	long
ch	long
;	O
int	O
a	int
;	O
LWCHAR	long
prev_ch	long
;	O
{	O
int	O
w	int
;	O
if	O
(	O
ch	long
==	O
'\b'	O
)	O
return	O
(	O
utf_mode	int
&&	O
is_wide_char	function
(	O
prev_ch	long
)	O
)	O
?	O
-	O
2	int
:	O
-	O
1	int
;	O
if	O
(	O
!	O
utf_mode	int
||	O
is_ascii_char	function
(	O
ch	long
)	O
)	O
{	O
if	O
(	O
control_char	function
(	O
(	O
char	O
)	O
ch	long
)	O
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
is_composing_char	function
(	O
ch	long
)	O
||	O
is_combining_char	function
(	O
prev_ch	long
,	O
ch	long
)	O
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
w	int
=	O
1	int
;	O
if	O
(	O
is_wide_char	function
(	O
ch	long
)	O
)	O
w	int
++	O
;	O
if	O
(	O
curr	int
>	O
0	int
&&	O
!	O
is_at_equiv	function
(	O
attr	int
[	O
curr	int
-	O
1	int
]	O
,	O
a	int
)	O
)	O
w	int
+=	O
attr_ewidth	function
(	O
attr	int
[	O
curr	int
-	O
1	int
]	O
)	O
;	O
if	O
(	O
(	O
apply_at_specials	function
(	O
a	int
)	O
!=	O
AT_NORMAL	O
)	O
&&	O
(	O
curr	int
==	O
0	int
||	O
!	O
is_at_equiv	function
(	O
attr	int
[	O
curr	int
-	O
1	int
]	O
,	O
a	int
)	O
)	O
)	O
w	int
+=	O
attr_swidth	function
(	O
a	int
)	O
;	O
return	O
(	O
w	int
)	O
;	O
}	O
static	O
int	O
backc	function
(	O
)	O
{	O
LWCHAR	long
prev_ch	long
;	O
char	O
*	O
p	pointer
=	O
linebuf	pointer
+	O
curr	int
;	O
LWCHAR	long
ch	long
=	O
step_char	function
(	O
&	O
p	pointer
,	O
-	O
1	int
,	O
linebuf	pointer
+	O
lmargin	int
)	O
;	O
int	O
width	int
;	O
while	O
(	O
curr	int
>	O
lmargin	int
&&	O
column	int
>	O
lmargin	int
&&	O
(	O
!	O
(	O
attr	int
[	O
curr	int
-	O
1	int
]	O
&	O
(	O
AT_ANSI	O
|	O
AT_BINARY	O
)	O
)	O
)	O
)	O
{	O
curr	int
=	O
(	O
int	O
)	O
(	O
p	pointer
-	O
linebuf	pointer
)	O
;	O
prev_ch	long
=	O
step_char	function
(	O
&	O
p	pointer
,	O
-	O
1	int
,	O
linebuf	pointer
+	O
lmargin	int
)	O
;	O
width	int
=	O
pwidth	function
(	O
ch	long
,	O
attr	int
[	O
curr	int
]	O
,	O
prev_ch	long
)	O
;	O
column	int
-=	O
width	int
;	O
if	O
(	O
width	int
>	O
0	int
)	O
return	O
1	int
;	O
ch	long
=	O
prev_ch	long
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
in_ansi_esc_seq	function
(	O
)	O
{	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
&	O
linebuf	pointer
[	O
curr	int
]	O
;	O
p	pointer
>	O
linebuf	pointer
;	O
)	O
{	O
LWCHAR	long
ch	long
=	O
step_char	function
(	O
&	O
p	pointer
,	O
-	O
1	int
,	O
linebuf	pointer
)	O
;	O
if	O
(	O
IS_CSI_START	O
(	O
ch	long
)	O
)	O
return	O
(	O
1	int
)	O
;	O
if	O
(	O
!	O
is_ansi_middle	function
(	O
ch	long
)	O
)	O
return	O
(	O
0	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
public	O
int	O
is_ansi_end	function
(	O
ch	long
)	O
LWCHAR	long
ch	long
;	O
{	O
if	O
(	O
!	O
is_ascii_char	function
(	O
ch	long
)	O
)	O
return	O
(	O
0	int
)	O
;	O
return	O
(	O
strchr	function
(	O
end_ansi_chars	pointer
,	O
(	O
char	O
)	O
ch	long
)	O
!=	O
NULL	O
)	O
;	O
}	O
public	O
int	O
is_ansi_middle	function
(	O
ch	long
)	O
LWCHAR	long
ch	long
;	O
{	O
if	O
(	O
!	O
is_ascii_char	function
(	O
ch	long
)	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
is_ansi_end	function
(	O
ch	long
)	O
)	O
return	O
(	O
0	int
)	O
;	O
return	O
(	O
strchr	function
(	O
mid_ansi_chars	pointer
,	O
(	O
char	O
)	O
ch	long
)	O
!=	O
NULL	O
)	O
;	O
}	O
public	O
void	O
skip_ansi	function
(	O
pp	pointer
,	O
limit	pointer
)	O
char	O
*	O
*	O
pp	pointer
;	O
constant	O
char	O
*	O
limit	pointer
;	O
{	O
LWCHAR	long
c	int
;	O
do	O
{	O
c	int
=	O
step_char	function
(	O
pp	pointer
,	O
+	O
1	int
,	O
limit	pointer
)	O
;	O
}	O
while	O
(	O
*	O
pp	pointer
<	O
limit	pointer
&&	O
is_ansi_middle	function
(	O
c	int
)	O
)	O
;	O
}	O
static	O
int	O
store_char	function
(	O
ch	long
,	O
a	int
,	O
rep	pointer
,	O
pos	long
)	O
LWCHAR	long
ch	long
;	O
int	O
a	int
;	O
char	O
*	O
rep	pointer
;	O
POSITION	long
pos	long
;	O
{	O
int	O
w	int
;	O
int	O
replen	int
;	O
char	O
cs	char
;	O
w	int
=	O
(	O
a	int
&	O
(	O
AT_UNDERLINE	O
|	O
AT_BOLD	O
)	O
)	O
;	O
if	O
(	O
w	int
!=	O
AT_NORMAL	O
)	O
last_overstrike	int
=	O
w	int
;	O
{	O
int	O
matches	int
;	O
if	O
(	O
is_hilited	function
(	O
pos	long
,	O
pos	long
+	O
1	int
,	O
0	int
,	O
&	O
matches	int
)	O
)	O
{	O
if	O
(	O
a	int
!=	O
AT_ANSI	O
)	O
{	O
if	O
(	O
highest_hilite	long
!=	O
NULL_POSITION	O
&&	O
pos	long
>	O
highest_hilite	long
)	O
highest_hilite	long
=	O
pos	long
;	O
a	int
|=	O
AT_HILITE	O
;	O
}	O
}	O
}	O
if	O
(	O
ctldisp	int
==	O
OPT_ONPLUS	int
&&	O
in_ansi_esc_seq	function
(	O
)	O
)	O
{	O
if	O
(	O
!	O
is_ansi_end	function
(	O
ch	long
)	O
&&	O
!	O
is_ansi_middle	function
(	O
ch	long
)	O
)	O
{	O
char	O
*	O
p	pointer
=	O
&	O
linebuf	pointer
[	O
curr	int
]	O
;	O
LWCHAR	long
bch	long
;	O
do	O
{	O
bch	long
=	O
step_char	function
(	O
&	O
p	pointer
,	O
-	O
1	int
,	O
linebuf	pointer
)	O
;	O
}	O
while	O
(	O
p	pointer
>	O
linebuf	pointer
&&	O
!	O
IS_CSI_START	O
(	O
bch	long
)	O
)	O
;	O
curr	int
=	O
(	O
int	O
)	O
(	O
p	pointer
-	O
linebuf	pointer
)	O
;	O
return	O
0	int
;	O
}	O
a	int
=	O
AT_ANSI	O
;	O
w	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
ctldisp	int
==	O
OPT_ONPLUS	int
&&	O
IS_CSI_START	O
(	O
ch	long
)	O
)	O
{	O
a	int
=	O
AT_ANSI	O
;	O
w	int
=	O
0	int
;	O
}	O
else	O
{	O
char	O
*	O
p	pointer
=	O
&	O
linebuf	pointer
[	O
curr	int
]	O
;	O
LWCHAR	long
prev_ch	long
=	O
step_char	function
(	O
&	O
p	pointer
,	O
-	O
1	int
,	O
linebuf	pointer
)	O
;	O
w	int
=	O
pwidth	function
(	O
ch	long
,	O
a	int
,	O
prev_ch	long
)	O
;	O
}	O
if	O
(	O
ctldisp	int
!=	O
OPT_ON	int
&&	O
column	int
+	O
w	int
+	O
attr_ewidth	function
(	O
a	int
)	O
>	O
sc_width	int
)	O
return	O
(	O
1	int
)	O
;	O
if	O
(	O
rep	pointer
==	O
NULL	O
)	O
{	O
cs	char
=	O
(	O
char	O
)	O
ch	long
;	O
rep	pointer
=	O
&	O
cs	char
;	O
replen	int
=	O
1	int
;	O
}	O
else	O
{	O
replen	int
=	O
utf_len	function
(	O
rep	pointer
[	O
0	int
]	O
)	O
;	O
}	O
if	O
(	O
curr	int
+	O
replen	int
>=	O
size_linebuf	int
-	O
6	int
)	O
{	O
if	O
(	O
expand_linebuf	function
(	O
)	O
)	O
return	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
column	int
>	O
right_column	int
&&	O
w	int
>	O
0	int
)	O
{	O
right_column	int
=	O
column	int
;	O
right_curr	int
=	O
curr	int
;	O
}	O
while	O
(	O
replen	int
--	O
>	O
0	int
)	O
{	O
add_linebuf	function
(	O
*	O
rep	pointer
++	O
,	O
a	int
,	O
0	int
)	O
;	O
}	O
column	int
+=	O
w	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
store_tab	function
(	O
attr	int
,	O
pos	long
)	O
int	O
attr	int
;	O
POSITION	long
pos	long
;	O
{	O
int	O
to_tab	int
=	O
column	int
+	O
cshift	int
-	O
lmargin	int
;	O
int	O
i	int
;	O
if	O
(	O
ntabstops	int
<	O
2	int
||	O
to_tab	int
>=	O
tabstops	array
[	O
ntabstops	int
-	O
1	int
]	O
)	O
to_tab	int
=	O
tabdefault	int
-	O
(	O
(	O
to_tab	int
-	O
tabstops	array
[	O
ntabstops	int
-	O
1	int
]	O
)	O
%	O
tabdefault	int
)	O
;	O
else	O
{	O
for	O
(	O
i	int
=	O
ntabstops	int
-	O
2	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
if	O
(	O
to_tab	int
>=	O
tabstops	array
[	O
i	int
]	O
)	O
break	O
;	O
to_tab	int
=	O
tabstops	array
[	O
i	int
+	O
1	int
]	O
-	O
to_tab	int
;	O
}	O
if	O
(	O
column	int
+	O
to_tab	int
-	O
1	int
+	O
pwidth	function
(	O
' '	O
,	O
attr	int
,	O
0	int
)	O
+	O
attr_ewidth	function
(	O
attr	int
)	O
>	O
sc_width	int
)	O
return	O
1	int
;	O
do	O
{	O
STORE_CHAR	O
(	O
' '	O
,	O
attr	int
,	O
" "	pointer
,	O
pos	long
)	O
;	O
}	O
while	O
(	O
--	O
to_tab	int
>	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
store_prchar	function
(	O
c	int
,	O
pos	long
)	O
LWCHAR	long
c	int
;	O
POSITION	long
pos	long
;	O
{	O
char	O
*	O
s	pointer
;	O
s	pointer
=	O
prchar	function
(	O
c	int
)	O
;	O
if	O
(	O
column	int
+	O
(	O
int	O
)	O
strlen	function
(	O
s	pointer
)	O
-	O
1	int
+	O
pwidth	function
(	O
' '	O
,	O
binattr	int
,	O
0	int
)	O
+	O
attr_ewidth	function
(	O
binattr	int
)	O
>	O
sc_width	int
)	O
return	O
1	int
;	O
for	O
(	O
;	O
*	O
s	pointer
!=	O
0	int
;	O
s	pointer
++	O
)	O
STORE_CHAR	O
(	O
*	O
s	pointer
,	O
AT_BINARY	O
,	O
NULL	O
,	O
pos	long
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
flush_mbc_buf	function
(	O
pos	long
)	O
POSITION	long
pos	long
;	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
mbc_buf_index	int
;	O
i	int
++	O
)	O
if	O
(	O
store_prchar	function
(	O
mbc_buf	array
[	O
i	int
]	O
,	O
pos	long
)	O
)	O
return	O
mbc_buf_index	int
-	O
i	int
;	O
return	O
0	int
;	O
}	O
public	O
int	O
pappend	function
(	O
c	int
,	O
pos	long
)	O
unsigned	O
char	O
c	int
;	O
POSITION	long
pos	long
;	O
{	O
int	O
r	int
;	O
if	O
(	O
pendc	long
)	O
{	O
if	O
(	O
c	int
==	O
'\r'	O
&&	O
pendc	long
==	O
'\r'	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
do_append	function
(	O
pendc	long
,	O
NULL	O
,	O
pendpos	long
)	O
)	O
return	O
(	O
1	int
)	O
;	O
pendc	long
=	O
'\0'	O
;	O
}	O
if	O
(	O
c	int
==	O
'\r'	O
&&	O
bs_mode	int
==	O
BS_SPECIAL	int
)	O
{	O
if	O
(	O
mbc_buf_len	int
>	O
0	int
)	O
{	O
r	int
=	O
flush_mbc_buf	function
(	O
mbc_pos	long
)	O
;	O
mbc_buf_index	int
=	O
r	int
+	O
1	int
;	O
mbc_buf_len	int
=	O
0	int
;	O
if	O
(	O
r	int
)	O
return	O
(	O
mbc_buf_index	int
)	O
;	O
}	O
pendc	long
=	O
c	int
;	O
pendpos	long
=	O
pos	long
;	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
!	O
utf_mode	int
)	O
{	O
r	int
=	O
do_append	function
(	O
c	int
,	O
NULL	O
,	O
pos	long
)	O
;	O
}	O
else	O
{	O
if	O
(	O
mbc_buf_len	int
==	O
0	int
)	O
{	O
retry	O
:	O
mbc_buf_index	int
=	O
1	int
;	O
*	O
mbc_buf	array
=	O
c	int
;	O
if	O
(	O
IS_ASCII_OCTET	O
(	O
c	int
)	O
)	O
r	int
=	O
do_append	function
(	O
c	int
,	O
NULL	O
,	O
pos	long
)	O
;	O
else	O
if	O
(	O
IS_UTF8_LEAD	O
(	O
c	int
)	O
)	O
{	O
mbc_buf_len	int
=	O
utf_len	function
(	O
c	int
)	O
;	O
mbc_pos	long
=	O
pos	long
;	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
r	int
=	O
flush_mbc_buf	function
(	O
pos	long
)	O
;	O
}	O
else	O
if	O
(	O
IS_UTF8_TRAIL	O
(	O
c	int
)	O
)	O
{	O
mbc_buf	array
[	O
mbc_buf_index	int
++	O
]	O
=	O
c	int
;	O
if	O
(	O
mbc_buf_index	int
<	O
mbc_buf_len	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
is_utf8_well_formed	function
(	O
mbc_buf	array
,	O
mbc_buf_index	int
)	O
)	O
r	int
=	O
do_append	function
(	O
get_wchar	function
(	O
mbc_buf	array
)	O
,	O
mbc_buf	array
,	O
mbc_pos	long
)	O
;	O
else	O
mbc_buf_index	int
=	O
r	int
=	O
flush_mbc_buf	function
(	O
mbc_pos	long
)	O
;	O
mbc_buf_len	int
=	O
0	int
;	O
}	O
else	O
{	O
r	int
=	O
flush_mbc_buf	function
(	O
mbc_pos	long
)	O
;	O
mbc_buf_index	int
=	O
r	int
+	O
1	int
;	O
mbc_buf_len	int
=	O
0	int
;	O
if	O
(	O
!	O
r	int
)	O
goto	O
retry	O
;	O
}	O
}	O
if	O
(	O
cshift	int
<	O
hshift	int
&&	O
column	int
>	O
sc_width	int
/	O
2	int
)	O
{	O
linebuf	pointer
[	O
curr	int
]	O
=	O
'\0'	O
;	O
pshift	function
(	O
hshift	int
-	O
cshift	int
)	O
;	O
}	O
if	O
(	O
r	int
)	O
{	O
r	int
=	O
(	O
!	O
utf_mode	int
)	O
?	O
1	int
:	O
mbc_buf_index	int
;	O
}	O
return	O
(	O
r	int
)	O
;	O
}	O
static	O
int	O
do_append	function
(	O
ch	long
,	O
rep	pointer
,	O
pos	long
)	O
LWCHAR	long
ch	long
;	O
char	O
*	O
rep	pointer
;	O
POSITION	long
pos	long
;	O
{	O
int	O
a	int
;	O
LWCHAR	long
prev_ch	long
;	O
a	int
=	O
AT_NORMAL	O
;	O
if	O
(	O
ch	long
==	O
'\b'	O
)	O
{	O
if	O
(	O
bs_mode	int
==	O
BS_CONTROL	int
)	O
goto	O
do_control_char	O
;	O
if	O
(	O
curr	int
<=	O
lmargin	int
||	O
column	int
<=	O
lmargin	int
||	O
(	O
attr	int
[	O
curr	int
-	O
1	int
]	O
&	O
(	O
AT_ANSI	O
|	O
AT_BINARY	O
)	O
)	O
)	O
STORE_PRCHAR	O
(	O
'\b'	O
,	O
pos	long
)	O
;	O
else	O
if	O
(	O
bs_mode	int
==	O
BS_NORMAL	int
)	O
STORE_CHAR	O
(	O
ch	long
,	O
AT_NORMAL	O
,	O
NULL	O
,	O
pos	long
)	O
;	O
else	O
if	O
(	O
bs_mode	int
==	O
BS_SPECIAL	int
)	O
overstrike	int
=	O
backc	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
overstrike	int
>	O
0	int
)	O
{	O
overstrike	int
=	O
utf_mode	int
?	O
-	O
1	int
:	O
0	int
;	O
if	O
(	O
utf_mode	int
)	O
{	O
prev_ch	long
=	O
get_wchar	function
(	O
linebuf	pointer
+	O
curr	int
)	O
;	O
}	O
else	O
{	O
prev_ch	long
=	O
(	O
unsigned	O
char	O
)	O
linebuf	pointer
[	O
curr	int
]	O
;	O
}	O
a	int
=	O
attr	int
[	O
curr	int
]	O
;	O
if	O
(	O
ch	long
==	O
prev_ch	long
)	O
{	O
if	O
(	O
ch	long
==	O
'_'	O
)	O
{	O
if	O
(	O
(	O
a	int
&	O
(	O
AT_BOLD	O
|	O
AT_UNDERLINE	O
)	O
)	O
!=	O
AT_NORMAL	O
)	O
a	int
|=	O
(	O
AT_BOLD	O
|	O
AT_UNDERLINE	O
)	O
;	O
else	O
if	O
(	O
last_overstrike	int
!=	O
AT_NORMAL	O
)	O
a	int
|=	O
last_overstrike	int
;	O
else	O
a	int
|=	O
AT_BOLD	O
;	O
}	O
else	O
a	int
|=	O
AT_BOLD	O
;	O
}	O
else	O
if	O
(	O
ch	long
==	O
'_'	O
)	O
{	O
a	int
|=	O
AT_UNDERLINE	O
;	O
ch	long
=	O
prev_ch	long
;	O
rep	pointer
=	O
linebuf	pointer
+	O
curr	int
;	O
}	O
else	O
if	O
(	O
prev_ch	long
==	O
'_'	O
)	O
{	O
a	int
|=	O
AT_UNDERLINE	O
;	O
}	O
}	O
else	O
if	O
(	O
overstrike	int
<	O
0	int
)	O
{	O
if	O
(	O
is_composing_char	function
(	O
ch	long
)	O
||	O
is_combining_char	function
(	O
get_wchar	function
(	O
linebuf	pointer
+	O
curr	int
)	O
,	O
ch	long
)	O
)	O
a	int
=	O
last_overstrike	int
;	O
else	O
overstrike	int
=	O
0	int
;	O
}	O
if	O
(	O
ch	long
==	O
'\t'	O
)	O
{	O
switch	O
(	O
bs_mode	int
)	O
{	O
case	O
BS_CONTROL	int
:	O
goto	O
do_control_char	O
;	O
case	O
BS_NORMAL	int
:	O
case	O
BS_SPECIAL	int
:	O
STORE_TAB	O
(	O
a	int
,	O
pos	long
)	O
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
(	O
!	O
utf_mode	int
||	O
is_ascii_char	function
(	O
ch	long
)	O
)	O
&&	O
control_char	function
(	O
(	O
char	O
)	O
ch	long
)	O
)	O
{	O
do_control_char	O
:	O
if	O
(	O
ctldisp	int
==	O
OPT_ON	int
||	O
(	O
ctldisp	int
==	O
OPT_ONPLUS	int
&&	O
IS_CSI_START	O
(	O
ch	long
)	O
)	O
)	O
{	O
STORE_CHAR	O
(	O
ch	long
,	O
AT_NORMAL	O
,	O
rep	pointer
,	O
pos	long
)	O
;	O
}	O
else	O
{	O
STORE_PRCHAR	O
(	O
(	O
char	O
)	O
ch	long
,	O
pos	long
)	O
;	O
}	O
}	O
else	O
if	O
(	O
utf_mode	int
&&	O
ctldisp	int
!=	O
OPT_ON	int
&&	O
is_ubin_char	function
(	O
ch	long
)	O
)	O
{	O
char	O
*	O
s	pointer
;	O
s	pointer
=	O
prutfchar	function
(	O
ch	long
)	O
;	O
if	O
(	O
column	int
+	O
(	O
int	O
)	O
strlen	function
(	O
s	pointer
)	O
-	O
1	int
+	O
pwidth	function
(	O
' '	O
,	O
binattr	int
,	O
0	int
)	O
+	O
attr_ewidth	function
(	O
binattr	int
)	O
>	O
sc_width	int
)	O
return	O
(	O
1	int
)	O
;	O
for	O
(	O
;	O
*	O
s	pointer
!=	O
0	int
;	O
s	pointer
++	O
)	O
STORE_CHAR	O
(	O
*	O
s	pointer
,	O
AT_BINARY	O
,	O
NULL	O
,	O
pos	long
)	O
;	O
}	O
else	O
{	O
STORE_CHAR	O
(	O
ch	long
,	O
a	int
,	O
rep	pointer
,	O
pos	long
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
public	O
int	O
pflushmbc	function
(	O
)	O
{	O
int	O
r	int
=	O
0	int
;	O
if	O
(	O
mbc_buf_len	int
>	O
0	int
)	O
{	O
r	int
=	O
flush_mbc_buf	function
(	O
mbc_pos	long
)	O
;	O
mbc_buf_len	int
=	O
0	int
;	O
}	O
return	O
r	int
;	O
}	O
static	O
void	O
add_attr_normal	function
(	O
)	O
{	O
char	O
*	O
p	pointer
=	O
"\033[m"	pointer
;	O
if	O
(	O
ctldisp	int
!=	O
OPT_ONPLUS	int
||	O
!	O
is_ansi_end	function
(	O
'm'	O
)	O
)	O
return	O
;	O
for	O
(	O
;	O
*	O
p	pointer
!=	O
'\0'	O
;	O
p	pointer
++	O
)	O
add_linebuf	function
(	O
*	O
p	pointer
,	O
AT_ANSI	O
,	O
0	int
)	O
;	O
}	O
public	O
void	O
pdone	function
(	O
endline	int
,	O
chopped	int
,	O
forw	function
)	O
int	O
endline	int
;	O
int	O
chopped	int
;	O
int	O
forw	function
;	O
{	O
(	O
void	O
)	O
pflushmbc	function
(	O
)	O
;	O
if	O
(	O
pendc	long
&&	O
(	O
pendc	long
!=	O
'\r'	O
||	O
!	O
endline	int
)	O
)	O
(	O
void	O
)	O
do_append	function
(	O
pendc	long
,	O
NULL	O
,	O
pendpos	long
)	O
;	O
if	O
(	O
cshift	int
<	O
hshift	int
)	O
pshift	function
(	O
hshift	int
-	O
cshift	int
)	O
;	O
if	O
(	O
chopped	int
&&	O
rscroll_char	long
)	O
{	O
if	O
(	O
column	int
>=	O
sc_width	int
)	O
{	O
column	int
=	O
right_column	int
;	O
curr	int
=	O
right_curr	int
;	O
}	O
add_attr_normal	function
(	O
)	O
;	O
while	O
(	O
column	int
<	O
sc_width	int
-	O
1	int
)	O
{	O
add_linebuf	function
(	O
' '	O
,	O
AT_NORMAL	O
,	O
1	int
)	O
;	O
}	O
add_linebuf	function
(	O
rscroll_char	long
,	O
rscroll_attr	int
,	O
1	int
)	O
;	O
}	O
else	O
{	O
add_attr_normal	function
(	O
)	O
;	O
}	O
if	O
(	O
column	int
<	O
sc_width	int
||	O
!	O
auto_wrap	int
||	O
(	O
endline	int
&&	O
ignaw	int
)	O
||	O
ctldisp	int
==	O
OPT_ON	int
)	O
{	O
add_linebuf	function
(	O
'\n'	O
,	O
AT_NORMAL	O
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
ignaw	int
&&	O
column	int
>=	O
sc_width	int
&&	O
forw	function
)	O
{	O
add_linebuf	function
(	O
' '	O
,	O
AT_NORMAL	O
,	O
1	int
)	O
;	O
add_linebuf	function
(	O
'\b'	O
,	O
AT_NORMAL	O
,	O
-	O
1	int
)	O
;	O
}	O
set_linebuf	function
(	O
curr	int
,	O
'\0'	O
,	O
AT_NORMAL	O
)	O
;	O
}	O
public	O
void	O
set_status_col	function
(	O
c	int
)	O
char	O
c	int
;	O
{	O
set_linebuf	function
(	O
0	int
,	O
c	int
,	O
AT_NORMAL	O
|	O
AT_HILITE	O
)	O
;	O
}	O
public	O
int	O
gline	function
(	O
i	int
,	O
ap	pointer
)	O
int	O
i	int
;	O
int	O
*	O
ap	pointer
;	O
{	O
if	O
(	O
is_null_line	int
)	O
{	O
if	O
(	O
twiddle	int
)	O
{	O
if	O
(	O
i	int
==	O
0	int
)	O
{	O
*	O
ap	pointer
=	O
AT_BOLD	O
;	O
return	O
'~'	O
;	O
}	O
--	O
i	int
;	O
}	O
*	O
ap	pointer
=	O
AT_NORMAL	O
;	O
return	O
i	int
?	O
'\0'	O
:	O
'\n'	O
;	O
}	O
*	O
ap	pointer
=	O
attr	int
[	O
i	int
]	O
;	O
return	O
(	O
linebuf	pointer
[	O
i	int
]	O
&	O
0xFF	int
)	O
;	O
}	O
public	O
void	O
null_line	function
(	O
)	O
{	O
is_null_line	int
=	O
1	int
;	O
cshift	int
=	O
0	int
;	O
}	O
public	O
POSITION	long
forw_raw_line	function
(	O
curr_pos	long
,	O
linep	pointer
,	O
line_lenp	pointer
)	O
POSITION	long
curr_pos	long
;	O
char	O
*	O
*	O
linep	pointer
;	O
int	O
*	O
line_lenp	pointer
;	O
{	O
int	O
n	int
;	O
int	O
c	int
;	O
POSITION	long
new_pos	long
;	O
if	O
(	O
curr_pos	long
==	O
NULL_POSITION	O
||	O
ch_seek	function
(	O
curr_pos	long
)	O
||	O
(	O
c	int
=	O
ch_forw_get	function
(	O
)	O
)	O
==	O
EOI	O
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
n	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
EOI	O
||	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
new_pos	long
=	O
ch_tell	function
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
n	int
>=	O
size_linebuf	int
-	O
1	int
)	O
{	O
if	O
(	O
expand_linebuf	function
(	O
)	O
)	O
{	O
new_pos	long
=	O
ch_tell	function
(	O
)	O
-	O
1	int
;	O
break	O
;	O
}	O
}	O
linebuf	pointer
[	O
n	int
++	O
]	O
=	O
c	int
;	O
c	int
=	O
ch_forw_get	function
(	O
)	O
;	O
}	O
linebuf	pointer
[	O
n	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
linep	pointer
!=	O
NULL	O
)	O
*	O
linep	pointer
=	O
linebuf	pointer
;	O
if	O
(	O
line_lenp	pointer
!=	O
NULL	O
)	O
*	O
line_lenp	pointer
=	O
n	int
;	O
return	O
(	O
new_pos	long
)	O
;	O
}	O
public	O
POSITION	long
back_raw_line	function
(	O
curr_pos	long
,	O
linep	pointer
,	O
line_lenp	pointer
)	O
POSITION	long
curr_pos	long
;	O
char	O
*	O
*	O
linep	pointer
;	O
int	O
*	O
line_lenp	pointer
;	O
{	O
int	O
n	int
;	O
int	O
c	int
;	O
POSITION	long
new_pos	long
;	O
if	O
(	O
curr_pos	long
==	O
NULL_POSITION	O
||	O
curr_pos	long
<=	O
ch_zero	O
(	O
)	O
||	O
ch_seek	function
(	O
curr_pos	long
-	O
1	int
)	O
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
n	int
=	O
size_linebuf	int
;	O
linebuf	pointer
[	O
--	O
n	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
ch_back_get	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
new_pos	long
=	O
ch_tell	function
(	O
)	O
+	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
c	int
==	O
EOI	O
)	O
{	O
new_pos	long
=	O
ch_zero	O
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
n	int
<=	O
0	int
)	O
{	O
int	O
old_size_linebuf	int
=	O
size_linebuf	int
;	O
char	O
*	O
fm	pointer
;	O
char	O
*	O
to	int
;	O
if	O
(	O
expand_linebuf	function
(	O
)	O
)	O
{	O
new_pos	long
=	O
ch_tell	function
(	O
)	O
+	O
1	int
;	O
break	O
;	O
}	O
for	O
(	O
fm	pointer
=	O
linebuf	pointer
+	O
old_size_linebuf	int
-	O
1	int
,	O
to	int
=	O
linebuf	pointer
+	O
size_linebuf	int
-	O
1	int
;	O
fm	pointer
>=	O
linebuf	pointer
;	O
fm	pointer
--	O
,	O
to	int
--	O
)	O
*	O
to	int
=	O
*	O
fm	pointer
;	O
n	int
=	O
size_linebuf	int
-	O
old_size_linebuf	int
;	O
}	O
linebuf	pointer
[	O
--	O
n	int
]	O
=	O
c	int
;	O
}	O
if	O
(	O
linep	pointer
!=	O
NULL	O
)	O
*	O
linep	pointer
=	O
&	O
linebuf	pointer
[	O
n	int
]	O
;	O
if	O
(	O
line_lenp	pointer
!=	O
NULL	O
)	O
*	O
line_lenp	pointer
=	O
size_linebuf	int
-	O
1	int
-	O
n	int
;	O
return	O
(	O
new_pos	long
)	O
;	O
}	O
public	O
int	O
rrshift	function
(	O
)	O
{	O
POSITION	long
pos	long
;	O
int	O
save_width	int
;	O
int	O
line	pointer
;	O
int	O
longest	int
=	O
0	int
;	O
save_width	int
=	O
sc_width	int
;	O
sc_width	int
=	O
INT_MAX	O
;	O
hshift	int
=	O
0	int
;	O
pos	long
=	O
position	function
(	O
TOP	O
)	O
;	O
for	O
(	O
line	pointer
=	O
0	int
;	O
line	pointer
<	O
sc_height	int
&&	O
pos	long
!=	O
NULL_POSITION	O
;	O
line	pointer
++	O
)	O
{	O
pos	long
=	O
forw_line	function
(	O
pos	long
)	O
;	O
if	O
(	O
column	int
>	O
longest	int
)	O
longest	int
=	O
column	int
;	O
}	O
sc_width	int
=	O
save_width	int
;	O
if	O
(	O
longest	int
<	O
sc_width	int
)	O
return	O
0	int
;	O
return	O
longest	int
-	O
sc_width	int
;	O
}	O
