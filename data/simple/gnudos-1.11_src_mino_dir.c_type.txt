struct	O
dirent	struct
*	O
*	O
eps	pointer
;	O
int	O
epscount	int
;	O
static	O
int	O
one	function
(	O
const	O
struct	O
dirent	struct
*	O
unused	pointer
)	O
{	O
return	O
1	int
;	O
}	O
char	O
*	O
getCwd	function
(	O
)	O
{	O
if	O
(	O
cwd	pointer
!=	O
NULL	O
)	O
free	function
(	O
cwd	pointer
)	O
;	O
cwd	pointer
=	O
getcwd	function
(	O
NULL	O
,	O
0	int
)	O
;	O
return	O
cwd	pointer
;	O
}	O
int	O
scanDir	function
(	O
char	O
*	O
dir	pointer
,	O
char	O
*	O
*	O
*	O
dirs	pointer
,	O
char	O
*	O
*	O
*	O
files	pointer
,	O
int	O
*	O
totalDirs	pointer
,	O
int	O
*	O
totalFiles	pointer
)	O
{	O
int	O
dcount	int
=	O
0	int
;	O
int	O
fcount	int
=	O
0	int
;	O
int	O
n	int
;	O
struct	O
stat	struct
st	struct
;	O
char	O
*	O
ldirs	array
[	O
MAXDIRS	int
]	O
;	O
char	O
*	O
lfiles	array
[	O
MAXFILES	int
]	O
;	O
char	O
*	O
oldcwd	pointer
=	O
getcwd	function
(	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
eps	pointer
!=	O
NULL	O
)	O
{	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
epscount	int
;	O
n	int
++	O
)	O
free	function
(	O
eps	pointer
[	O
n	int
]	O
)	O
;	O
free	function
(	O
eps	pointer
)	O
;	O
eps	pointer
=	O
NULL	O
;	O
}	O
int	O
x	int
=	O
chdir	function
(	O
dir	pointer
)	O
;	O
if	O
(	O
x	int
==	O
-	O
1	int
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
if	O
(	O
!	O
getCwd	function
(	O
)	O
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
x	int
=	O
lstat	function
(	O
dir	pointer
,	O
&	O
st	struct
)	O
;	O
if	O
(	O
x	int
==	O
-	O
1	int
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
if	O
(	O
S_ISDIR	O
(	O
st	struct
.	O
st_mode	int
)	O
)	O
{	O
n	int
=	O
scandir	function
(	O
dir	pointer
,	O
&	O
eps	pointer
,	O
one	function
,	O
alphasort	function
)	O
;	O
if	O
(	O
n	int
>=	O
0	int
)	O
{	O
int	O
cnt	int
;	O
for	O
(	O
cnt	int
=	O
0	int
;	O
cnt	int
<	O
n	int
;	O
++	O
cnt	int
)	O
{	O
x	int
=	O
lstat	function
(	O
eps	pointer
[	O
cnt	int
]	O
->	O
d_name	array
,	O
&	O
st	struct
)	O
;	O
if	O
(	O
x	int
==	O
-	O
1	int
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
if	O
(	O
S_ISDIR	O
(	O
st	struct
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
eps	pointer
[	O
cnt	int
]	O
->	O
d_name	array
,	O
"."	pointer
)	O
==	O
0	int
)	O
continue	O
;	O
ldirs	array
[	O
dcount	int
++	O
]	O
=	O
eps	pointer
[	O
cnt	int
]	O
->	O
d_name	array
;	O
}	O
else	O
{	O
lfiles	array
[	O
fcount	int
++	O
]	O
=	O
eps	pointer
[	O
cnt	int
]	O
->	O
d_name	array
;	O
}	O
}	O
}	O
free	function
(	O
oldcwd	pointer
)	O
;	O
*	O
totalDirs	pointer
=	O
dcount	int
;	O
*	O
totalFiles	pointer
=	O
fcount	int
;	O
*	O
dirs	pointer
=	O
(	O
char	O
*	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
*	O
dcount	int
)	O
;	O
if	O
(	O
!	O
*	O
dirs	pointer
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
memcpy	function
(	O
*	O
dirs	pointer
,	O
ldirs	array
,	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
*	O
dcount	int
)	O
;	O
*	O
files	pointer
=	O
(	O
char	O
*	O
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
*	O
fcount	int
)	O
;	O
if	O
(	O
!	O
*	O
files	pointer
)	O
DIR_RETURN_ERROR	O
(	O
)	O
;	O
memcpy	function
(	O
*	O
files	pointer
,	O
lfiles	array
,	O
sizeof	O
(	O
char	O
*	O
*	O
)	O
*	O
fcount	int
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
char	O
*	O
tmp	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
dir	pointer
)	O
+	O
21	int
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
{	O
msgBox	function
(	O
"Insufficient memory"	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
0	int
;	O
}	O
sprintf	function
(	O
tmp	pointer
,	O
"Error opening dir:\n%s"	pointer
,	O
dir	pointer
)	O
;	O
strcat	function
(	O
tmp	pointer
,	O
"\0"	pointer
)	O
;	O
msgBox	function
(	O
tmp	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
free	function
(	O
oldcwd	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
