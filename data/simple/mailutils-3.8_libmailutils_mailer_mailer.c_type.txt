static	O
char	O
*	O
mailer_url_default	pointer
;	O
int	O
mu_mailer_set_url_default	function
(	O
const	O
char	O
*	O
url	pointer
)	O
{	O
char	O
*	O
n	long
=	O
NULL	O
;	O
if	O
(	O
!	O
url	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
(	O
n	long
=	O
strdup	function
(	O
url	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
mailer_url_default	pointer
)	O
free	function
(	O
mailer_url_default	pointer
)	O
;	O
mailer_url_default	pointer
=	O
n	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_get_url_default	function
(	O
const	O
char	O
*	O
*	O
url	pointer
)	O
{	O
if	O
(	O
!	O
url	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mailer_url_default	pointer
)	O
*	O
url	pointer
=	O
mailer_url_default	pointer
;	O
else	O
*	O
url	pointer
=	O
MAILER_URL_DEFAULT	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_create_from_url	function
(	O
mu_mailer_t	pointer
*	O
pmailer	pointer
,	O
mu_url_t	pointer
url	pointer
)	O
{	O
mu_record_t	pointer
record	pointer
;	O
if	O
(	O
mu_registrar_lookup_url	function
(	O
url	pointer
,	O
MU_FOLDER_ATTRIBUTE_FILE	int
,	O
&	O
record	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
int	O
(	O
*	O
m_init	pointer
)	O
(	O
mu_mailer_t	pointer
)	O
=	O
NULL	O
;	O
mu_record_get_mailer	function
(	O
record	pointer
,	O
&	O
m_init	pointer
)	O
;	O
if	O
(	O
m_init	pointer
)	O
{	O
int	O
status	int
;	O
mu_mailer_t	pointer
mailer	pointer
;	O
int	O
(	O
*	O
u_init	pointer
)	O
(	O
mu_url_t	pointer
)	O
=	O
NULL	O
;	O
mailer	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
mailer	pointer
)	O
)	O
;	O
if	O
(	O
mailer	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
status	int
=	O
mu_monitor_create	function
(	O
&	O
mailer	pointer
->	O
monitor	pointer
,	O
0	int
,	O
mailer	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_mailer_destroy	function
(	O
&	O
mailer	pointer
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
m_init	pointer
(	O
mailer	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_mailer_destroy	function
(	O
&	O
mailer	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_record_get_url	function
(	O
record	pointer
,	O
&	O
u_init	pointer
)	O
;	O
if	O
(	O
u_init	pointer
&&	O
(	O
status	int
=	O
u_init	pointer
(	O
url	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_mailer_destroy	function
(	O
&	O
mailer	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mailer	pointer
->	O
url	pointer
=	O
url	pointer
;	O
*	O
pmailer	pointer
=	O
mailer	pointer
;	O
return	O
status	int
;	O
}	O
}	O
return	O
MU_ERR_MAILER_BAD_URL	O
;	O
}	O
int	O
mu_mailer_create	function
(	O
mu_mailer_t	pointer
*	O
pmailer	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
status	int
;	O
mu_url_t	pointer
url	pointer
;	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
mu_mailer_get_url_default	function
(	O
&	O
name	pointer
)	O
;	O
status	int
=	O
mu_url_create	function
(	O
&	O
url	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_mailer_create_from_url	function
(	O
pmailer	pointer
,	O
url	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
return	O
status	int
;	O
}	O
void	O
mu_mailer_destroy	function
(	O
mu_mailer_t	pointer
*	O
pmailer	pointer
)	O
{	O
if	O
(	O
pmailer	pointer
&&	O
*	O
pmailer	pointer
)	O
{	O
mu_mailer_t	pointer
mailer	pointer
=	O
*	O
pmailer	pointer
;	O
mu_monitor_t	pointer
monitor	pointer
=	O
mailer	pointer
->	O
monitor	pointer
;	O
if	O
(	O
mailer	pointer
->	O
observable	pointer
)	O
{	O
mu_observable_notify	function
(	O
mailer	pointer
->	O
observable	pointer
,	O
MU_EVT_MAILER_DESTROY	int
,	O
mailer	pointer
)	O
;	O
mu_observable_destroy	function
(	O
&	O
mailer	pointer
->	O
observable	pointer
,	O
mailer	pointer
)	O
;	O
}	O
if	O
(	O
mailer	pointer
->	O
_destroy	pointer
)	O
mailer	pointer
->	O
_destroy	pointer
(	O
mailer	pointer
)	O
;	O
mu_monitor_wrlock	function
(	O
monitor	pointer
)	O
;	O
if	O
(	O
mailer	pointer
->	O
stream	pointer
)	O
{	O
mu_stream_destroy	function
(	O
&	O
mailer	pointer
->	O
stream	pointer
)	O
;	O
}	O
if	O
(	O
mailer	pointer
->	O
url	pointer
)	O
mu_url_destroy	function
(	O
&	O
(	O
mailer	pointer
->	O
url	pointer
)	O
)	O
;	O
if	O
(	O
mailer	pointer
->	O
property	pointer
)	O
mu_property_destroy	function
(	O
&	O
mailer	pointer
->	O
property	pointer
)	O
;	O
free	function
(	O
mailer	pointer
)	O
;	O
*	O
pmailer	pointer
=	O
NULL	O
;	O
mu_monitor_unlock	function
(	O
monitor	pointer
)	O
;	O
mu_monitor_destroy	function
(	O
&	O
monitor	pointer
,	O
mailer	pointer
)	O
;	O
}	O
}	O
int	O
mu_mailer_open	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
int	O
flag	int
)	O
{	O
if	O
(	O
mailer	pointer
==	O
NULL	O
||	O
mailer	pointer
->	O
_open	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
mailer	pointer
->	O
_open	pointer
(	O
mailer	pointer
,	O
flag	int
)	O
;	O
}	O
int	O
mu_mailer_close	function
(	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
if	O
(	O
mailer	pointer
==	O
NULL	O
||	O
mailer	pointer
->	O
_close	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
return	O
mailer	pointer
->	O
_close	pointer
(	O
mailer	pointer
)	O
;	O
}	O
int	O
mu_mailer_check_from	function
(	O
mu_address_t	pointer
from	pointer
)	O
{	O
size_t	long
n	long
=	O
0	int
;	O
if	O
(	O
!	O
from	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_address_get_count	function
(	O
from	pointer
,	O
&	O
n	long
)	O
||	O
n	long
!=	O
1	int
)	O
return	O
MU_ERR_MAILER_BAD_FROM	O
;	O
if	O
(	O
mu_address_get_email_count	function
(	O
from	pointer
,	O
&	O
n	long
)	O
||	O
n	long
==	O
0	int
)	O
return	O
MU_ERR_MAILER_BAD_FROM	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_check_to	function
(	O
mu_address_t	pointer
to	pointer
)	O
{	O
size_t	long
count	long
=	O
0	int
;	O
size_t	long
emails	long
=	O
0	int
;	O
size_t	long
groups	long
=	O
0	int
;	O
if	O
(	O
!	O
to	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_address_get_count	function
(	O
to	pointer
,	O
&	O
count	long
)	O
)	O
return	O
MU_ERR_MAILER_BAD_TO	O
;	O
if	O
(	O
mu_address_get_email_count	function
(	O
to	pointer
,	O
&	O
emails	long
)	O
)	O
return	O
MU_ERR_MAILER_BAD_TO	O
;	O
if	O
(	O
emails	long
==	O
0	int
)	O
return	O
MU_ERR_MAILER_NO_RCPT_TO	O
;	O
if	O
(	O
mu_address_get_group_count	function
(	O
to	pointer
,	O
&	O
groups	long
)	O
)	O
return	O
MU_ERR_MAILER_BAD_TO	O
;	O
if	O
(	O
count	long
-	O
emails	long
-	O
groups	long
!=	O
0	int
)	O
return	O
MU_ERR_MAILER_BAD_TO	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
save_fcc	function
(	O
mu_message_t	pointer
msg	pointer
)	O
{	O
mu_header_t	pointer
hdr	pointer
;	O
size_t	long
count	long
=	O
0	int
,	O
i	long
;	O
const	O
char	O
*	O
buf	pointer
;	O
char	O
*	O
fcc	pointer
;	O
if	O
(	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
)	O
return	O
;	O
if	O
(	O
mu_header_get_value	O
(	O
hdr	pointer
,	O
MU_HEADER_FCC	pointer
,	O
NULL	O
,	O
0	int
,	O
NULL	O
)	O
)	O
return	O
;	O
mu_header_get_field_count	function
(	O
hdr	pointer
,	O
&	O
count	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	long
;	O
i	long
++	O
)	O
{	O
mu_mailbox_t	pointer
mbox	pointer
;	O
mu_header_sget_field_name	function
(	O
hdr	pointer
,	O
i	long
,	O
&	O
buf	pointer
)	O
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
buf	pointer
,	O
MU_HEADER_FCC	pointer
)	O
==	O
0	int
&&	O
mu_header_aget_field_value	function
(	O
hdr	pointer
,	O
i	long
,	O
&	O
fcc	pointer
)	O
==	O
0	int
)	O
{	O
size_t	long
i	long
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
","	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
fcc	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_WS	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot split line `%s': %s"	pointer
)	O
,	O
fcc	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	long
+=	O
2	int
)	O
{	O
if	O
(	O
mu_mailbox_create_default	function
(	O
&	O
mbox	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
)	O
)	O
continue	O
;	O
if	O
(	O
mu_mailbox_open	function
(	O
mbox	pointer
,	O
MU_STREAM_RDWR	O
|	O
MU_STREAM_CREAT	int
|	O
MU_STREAM_APPEND	int
)	O
==	O
0	int
)	O
{	O
mu_mailbox_append_message	function
(	O
mbox	pointer
,	O
msg	pointer
)	O
;	O
mu_mailbox_flush	function
(	O
mbox	pointer
,	O
0	int
)	O
;	O
}	O
mu_mailbox_close	function
(	O
mbox	pointer
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
mbox	pointer
)	O
;	O
}	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
free	function
(	O
fcc	pointer
)	O
;	O
}	O
}	O
}	O
static	O
int	O
copy_fragment	function
(	O
char	O
*	O
*	O
pretender	pointer
,	O
const	O
char	O
*	O
p	pointer
,	O
const	O
char	O
*	O
q	pointer
)	O
{	O
size_t	long
len	long
=	O
q	pointer
-	O
p	pointer
+	O
1	int
;	O
*	O
pretender	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
*	O
pretender	pointer
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
*	O
pretender	pointer
,	O
p	pointer
,	O
len	long
)	O
;	O
(	O
*	O
pretender	pointer
)	O
[	O
len	long
]	O
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
recover_email	function
(	O
const	O
char	O
*	O
string	pointer
,	O
char	O
*	O
*	O
pretender	pointer
)	O
{	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
p	pointer
=	O
strchr	function
(	O
string	pointer
,	O
'<'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'>'	O
)	O
;	O
if	O
(	O
q	pointer
)	O
return	O
copy_fragment	function
(	O
pretender	pointer
,	O
p	pointer
,	O
q	pointer
)	O
;	O
}	O
p	pointer
=	O
mu_str_skip_class	function
(	O
string	pointer
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
*	O
p	pointer
&&	O
mu_parse822_is_atom_char	function
(	O
*	O
p	pointer
)	O
)	O
{	O
q	pointer
=	O
p	pointer
;	O
while	O
(	O
*	O
++	O
q	pointer
&&	O
(	O
mu_parse822_is_atom_char	function
(	O
*	O
q	pointer
)	O
||	O
*	O
q	pointer
==	O
'.'	O
)	O
)	O
;	O
if	O
(	O
*	O
q	pointer
==	O
'@'	O
)	O
while	O
(	O
*	O
++	O
q	pointer
&&	O
(	O
mu_parse822_is_atom_char	function
(	O
*	O
q	pointer
)	O
||	O
*	O
q	pointer
==	O
'.'	O
)	O
)	O
;	O
q	pointer
--	O
;	O
if	O
(	O
q	pointer
>	O
p	pointer
)	O
return	O
copy_fragment	function
(	O
pretender	pointer
,	O
p	pointer
,	O
q	pointer
)	O
;	O
}	O
return	O
MU_ERR_NOENT	O
;	O
}	O
static	O
int	O
safe_address_create	function
(	O
mu_address_t	pointer
*	O
paddr	pointer
,	O
const	O
char	O
*	O
addr_str	pointer
,	O
const	O
char	O
*	O
who	pointer
)	O
{	O
int	O
status	int
=	O
mu_address_create	function
(	O
paddr	pointer
,	O
addr_str	pointer
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_INVALID_EMAIL	O
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
p	pointer
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"bad %s address: %s"	pointer
,	O
who	pointer
,	O
addr_str	pointer
)	O
)	O
;	O
rc	int
=	O
recover_email	function
(	O
addr_str	pointer
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"%s address recovery failed: %s"	pointer
,	O
who	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
else	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"recovered possible %s address: %s"	pointer
,	O
who	pointer
,	O
p	pointer
)	O
)	O
;	O
rc	int
=	O
mu_address_create	function
(	O
paddr	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
status	int
=	O
0	int
;	O
else	O
if	O
(	O
rc	int
==	O
MU_ERR_INVALID_EMAIL	O
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE1	int
,	O
(	O
"%s address guess failed"	pointer
,	O
who	pointer
)	O
)	O
;	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot convert %s address '%s': %s"	pointer
,	O
who	pointer
,	O
p	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
_set_from	function
(	O
mu_address_t	pointer
*	O
pfrom	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
mu_address_t	pointer
from	pointer
,	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
*	O
pfrom	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
from	pointer
)	O
{	O
const	O
char	O
*	O
type	long
;	O
mu_envelope_t	pointer
env	pointer
;	O
const	O
char	O
*	O
mail_from	pointer
;	O
status	int
=	O
mu_url_sget_param	function
(	O
mailer	pointer
->	O
url	pointer
,	O
"from"	pointer
,	O
&	O
mail_from	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
status	int
=	O
mu_message_get_envelope	function
(	O
msg	pointer
,	O
&	O
env	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_envelope_sget_sender	function
(	O
env	pointer
,	O
&	O
mail_from	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_header_t	pointer
header	pointer
;	O
status	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	pointer
,	O
MU_HEADER_FROM	pointer
,	O
&	O
mail_from	pointer
)	O
;	O
}	O
}	O
switch	O
(	O
status	int
)	O
{	O
default	O
:	O
return	O
status	int
;	O
case	O
0	int
:	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"mu_mailer_send_message(): using From: %s"	pointer
,	O
mail_from	pointer
)	O
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
if	O
(	O
mu_property_sget_value	function
(	O
mailer	pointer
->	O
property	pointer
,	O
"TYPE"	pointer
,	O
&	O
type	long
)	O
==	O
0	int
&&	O
strcmp	function
(	O
type	long
,	O
"SENDMAIL"	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
mail_from	pointer
=	O
mu_get_user_email	function
(	O
NULL	O
)	O
;	O
if	O
(	O
mail_from	pointer
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"mu_mailer_send_message(): using user's address: %s"	pointer
,	O
mail_from	pointer
)	O
)	O
;	O
else	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_mailer_send_message(): "	pointer
"no user's address, failing"	pointer
)	O
)	O
;	O
return	O
errno	O
;	O
}	O
break	O
;	O
}	O
status	int
=	O
safe_address_create	function
(	O
pfrom	pointer
,	O
mail_from	pointer
,	O
"sender"	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
_set_to	function
(	O
mu_address_t	pointer
*	O
paddr	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
mu_address_t	pointer
to	pointer
,	O
mu_mailer_t	pointer
mailer	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
*	O
paddr	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
to	pointer
)	O
{	O
const	O
char	O
*	O
rcpt_to	pointer
;	O
status	int
=	O
mu_url_sget_param	function
(	O
mailer	pointer
->	O
url	pointer
,	O
"to"	pointer
,	O
&	O
rcpt_to	pointer
)	O
;	O
switch	O
(	O
status	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
return	O
0	int
;	O
default	O
:	O
return	O
status	int
;	O
}	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"mu_mailer_send_message(): using RCPT TO: %s"	pointer
,	O
rcpt_to	pointer
)	O
)	O
;	O
status	int
=	O
safe_address_create	function
(	O
paddr	pointer
,	O
rcpt_to	pointer
,	O
"recipient"	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
int	O
create_part	function
(	O
mu_mime_t	pointer
mime	pointer
,	O
mu_stream_t	pointer
istr	pointer
,	O
size_t	long
fragsize	long
,	O
size_t	long
n	long
,	O
size_t	long
nparts	pointer
,	O
char	O
*	O
msgid	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
mu_message_t	pointer
newmsg	pointer
;	O
mu_header_t	pointer
newhdr	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
mu_stream_t	pointer
ostr	pointer
;	O
char	O
buffer	pointer
[	O
512	int
]	O
,	O
*	O
str	pointer
;	O
size_t	long
slen	long
;	O
mu_message_create	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
mu_message_get_header	function
(	O
newmsg	pointer
,	O
&	O
newhdr	pointer
)	O
;	O
str	pointer
=	O
NULL	O
;	O
slen	long
=	O
0	int
;	O
mu_asnprintf	function
(	O
&	O
str	pointer
,	O
&	O
slen	long
,	O
"message/partial; id=\"%s\"; number=%lu; total=%lu"	pointer
,	O
msgid	pointer
,	O
(	O
unsigned	O
long	O
)	O
n	long
,	O
(	O
unsigned	O
long	O
)	O
nparts	pointer
)	O
;	O
mu_header_append	function
(	O
newhdr	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
,	O
str	pointer
)	O
;	O
mu_asnprintf	function
(	O
&	O
str	pointer
,	O
&	O
slen	long
,	O
"part %lu of %lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
n	long
,	O
(	O
unsigned	O
long	O
)	O
nparts	pointer
)	O
;	O
mu_header_append	function
(	O
newhdr	pointer
,	O
MU_HEADER_CONTENT_DESCRIPTION	pointer
,	O
str	pointer
)	O
;	O
free	function
(	O
str	pointer
)	O
;	O
mu_message_get_body	function
(	O
newmsg	pointer
,	O
&	O
body	pointer
)	O
;	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
ostr	pointer
)	O
;	O
status	int
=	O
mu_stream_seek	function
(	O
ostr	pointer
,	O
0	int
,	O
SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
while	O
(	O
fragsize	long
)	O
{	O
size_t	long
rds	long
=	O
fragsize	long
;	O
if	O
(	O
rds	long
>	O
sizeof	O
buffer	pointer
)	O
rds	long
=	O
sizeof	O
buffer	pointer
;	O
status	int
=	O
mu_stream_read	function
(	O
istr	pointer
,	O
buffer	pointer
,	O
rds	long
,	O
&	O
rds	long
)	O
;	O
if	O
(	O
status	int
||	O
rds	long
==	O
0	int
)	O
break	O
;	O
status	int
=	O
mu_stream_write	function
(	O
ostr	pointer
,	O
buffer	pointer
,	O
rds	long
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
fragsize	long
-=	O
rds	long
;	O
}	O
mu_stream_destroy	function
(	O
&	O
ostr	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_mime_add_part	function
(	O
mime	pointer
,	O
newmsg	pointer
)	O
;	O
mu_message_unref	function
(	O
newmsg	pointer
)	O
;	O
}	O
return	O
status	int
;	O
}	O
static	O
void	O
merge_headers	function
(	O
mu_message_t	pointer
newmsg	pointer
,	O
mu_header_t	pointer
hdr	pointer
)	O
{	O
size_t	long
i	long
,	O
count	long
;	O
mu_header_t	pointer
newhdr	pointer
;	O
mu_message_get_header	function
(	O
newmsg	pointer
,	O
&	O
newhdr	pointer
)	O
;	O
mu_header_get_field_count	function
(	O
hdr	pointer
,	O
&	O
count	long
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	long
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
fn	pointer
,	O
*	O
fv	pointer
;	O
mu_header_sget_field_name	function
(	O
hdr	pointer
,	O
i	long
,	O
&	O
fn	pointer
)	O
;	O
mu_header_sget_field_value	function
(	O
hdr	pointer
,	O
i	long
,	O
&	O
fv	pointer
)	O
;	O
if	O
(	O
mu_c_strcasecmp	function
(	O
fn	pointer
,	O
MU_HEADER_MESSAGE_ID	pointer
)	O
==	O
0	int
)	O
continue	O
;	O
else	O
if	O
(	O
mu_c_strcasecmp	function
(	O
fn	pointer
,	O
MU_HEADER_MIME_VERSION	pointer
)	O
==	O
0	int
)	O
mu_header_append	function
(	O
newhdr	pointer
,	O
"X-Orig-"	pointer
MU_HEADER_MIME_VERSION	pointer
,	O
fv	pointer
)	O
;	O
else	O
if	O
(	O
mu_c_strcasecmp	function
(	O
fn	pointer
,	O
MU_HEADER_CONTENT_TYPE	pointer
)	O
==	O
0	int
)	O
mu_header_append	function
(	O
newhdr	pointer
,	O
"X-Orig-"	pointer
MU_HEADER_CONTENT_TYPE	pointer
,	O
fv	pointer
)	O
;	O
else	O
if	O
(	O
mu_c_strcasecmp	function
(	O
fn	pointer
,	O
MU_HEADER_CONTENT_DESCRIPTION	pointer
)	O
==	O
0	int
)	O
mu_header_append	function
(	O
newhdr	pointer
,	O
"X-Orig-"	pointer
MU_HEADER_CONTENT_DESCRIPTION	pointer
,	O
fv	pointer
)	O
;	O
else	O
mu_header_append	function
(	O
newhdr	pointer
,	O
fn	pointer
,	O
fv	pointer
)	O
;	O
}	O
}	O
int	O
send_fragments	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_header_t	pointer
hdr	pointer
,	O
mu_stream_t	pointer
str	pointer
,	O
size_t	long
nparts	pointer
,	O
size_t	long
fragsize	long
,	O
struct	O
timeval	struct
*	O
delay	pointer
,	O
mu_address_t	pointer
from	pointer
,	O
mu_address_t	pointer
to	pointer
)	O
{	O
int	O
status	int
=	O
0	int
;	O
size_t	long
i	long
;	O
char	O
*	O
msgid	pointer
=	O
NULL	O
;	O
if	O
(	O
mu_header_aget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_MESSAGE_ID	pointer
,	O
&	O
msgid	pointer
)	O
)	O
mu_rfc2822_msg_id	function
(	O
0	int
,	O
&	O
msgid	pointer
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
nparts	pointer
;	O
i	long
++	O
)	O
{	O
mu_message_t	pointer
newmsg	pointer
;	O
mu_mime_t	pointer
mime	pointer
;	O
mu_mime_create	function
(	O
&	O
mime	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
status	int
=	O
create_part	function
(	O
mime	pointer
,	O
str	pointer
,	O
fragsize	long
,	O
i	long
,	O
nparts	pointer
,	O
msgid	pointer
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
mu_mime_to_message	function
(	O
mime	pointer
,	O
&	O
newmsg	pointer
)	O
;	O
merge_headers	function
(	O
newmsg	pointer
,	O
hdr	pointer
)	O
;	O
status	int
=	O
mailer	pointer
->	O
_send_message	pointer
(	O
mailer	pointer
,	O
newmsg	pointer
,	O
from	pointer
,	O
to	pointer
)	O
;	O
mu_message_unref	function
(	O
newmsg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
if	O
(	O
delay	pointer
)	O
{	O
struct	O
timeval	struct
t	struct
=	O
*	O
delay	pointer
;	O
select	function
(	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
t	struct
)	O
;	O
}	O
}	O
free	function
(	O
msgid	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_mailer_send_fragments	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
size_t	long
fragsize	long
,	O
struct	O
timeval	struct
*	O
delay	pointer
,	O
mu_address_t	pointer
from	pointer
,	O
mu_address_t	pointer
to	pointer
)	O
{	O
int	O
status	int
;	O
mu_address_t	pointer
sender_addr	pointer
=	O
NULL	O
,	O
rcpt_addr	pointer
=	O
NULL	O
;	O
if	O
(	O
mailer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mailer	pointer
->	O
_send_message	pointer
==	O
NULL	O
)	O
return	O
ENOSYS	int
;	O
status	int
=	O
_set_from	function
(	O
&	O
sender_addr	pointer
,	O
msg	pointer
,	O
from	pointer
,	O
mailer	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
sender_addr	pointer
)	O
from	pointer
=	O
sender_addr	pointer
;	O
status	int
=	O
_set_to	function
(	O
&	O
rcpt_addr	pointer
,	O
msg	pointer
,	O
to	pointer
,	O
mailer	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
rcpt_addr	pointer
)	O
to	pointer
=	O
rcpt_addr	pointer
;	O
if	O
(	O
(	O
!	O
from	pointer
||	O
(	O
status	int
=	O
mu_mailer_check_from	function
(	O
from	pointer
)	O
)	O
==	O
0	int
)	O
&&	O
(	O
!	O
to	pointer
||	O
(	O
status	int
=	O
mu_mailer_check_to	function
(	O
to	pointer
)	O
)	O
==	O
0	int
)	O
)	O
{	O
save_fcc	function
(	O
msg	pointer
)	O
;	O
if	O
(	O
fragsize	long
==	O
0	int
)	O
status	int
=	O
mailer	pointer
->	O
_send_message	pointer
(	O
mailer	pointer
,	O
msg	pointer
,	O
from	pointer
,	O
to	pointer
)	O
;	O
else	O
{	O
mu_header_t	pointer
hdr	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
size_t	long
bsize	long
;	O
size_t	long
nparts	pointer
;	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
;	O
mu_body_size	function
(	O
body	pointer
,	O
&	O
bsize	long
)	O
;	O
nparts	pointer
=	O
bsize	long
+	O
fragsize	long
-	O
1	int
;	O
if	O
(	O
nparts	pointer
<	O
bsize	long
)	O
return	O
EINVAL	int
;	O
nparts	pointer
/=	O
fragsize	long
;	O
if	O
(	O
nparts	pointer
==	O
1	int
)	O
status	int
=	O
mailer	pointer
->	O
_send_message	pointer
(	O
mailer	pointer
,	O
msg	pointer
,	O
from	pointer
,	O
to	pointer
)	O
;	O
else	O
{	O
mu_stream_t	pointer
str	pointer
;	O
status	int
=	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
str	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
status	int
=	O
send_fragments	function
(	O
mailer	pointer
,	O
hdr	pointer
,	O
str	pointer
,	O
nparts	pointer
,	O
fragsize	long
,	O
delay	pointer
,	O
from	pointer
,	O
to	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
}	O
}	O
}	O
}	O
mu_address_destroy	function
(	O
&	O
sender_addr	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
rcpt_addr	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_mailer_send_message	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_message_t	pointer
msg	pointer
,	O
mu_address_t	pointer
from	pointer
,	O
mu_address_t	pointer
to	pointer
)	O
{	O
return	O
mu_mailer_send_fragments	function
(	O
mailer	pointer
,	O
msg	pointer
,	O
0	int
,	O
NULL	O
,	O
from	pointer
,	O
to	pointer
)	O
;	O
}	O
int	O
mu_mailer_set_stream	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
if	O
(	O
mailer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mailer	pointer
->	O
stream	pointer
=	O
stream	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_get_stream	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_stream_t	pointer
*	O
pstream	pointer
)	O
{	O
if	O
(	O
mailer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pstream	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
pstream	pointer
=	O
mailer	pointer
->	O
stream	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_get_streamref	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_stream_t	pointer
*	O
pstream	pointer
)	O
{	O
if	O
(	O
mailer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pstream	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
return	O
mu_streamref_create	function
(	O
pstream	pointer
,	O
mailer	pointer
->	O
stream	pointer
)	O
;	O
}	O
int	O
mu_mailer_get_observable	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_observable_t	pointer
*	O
pobservable	pointer
)	O
{	O
if	O
(	O
mailer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pobservable	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mailer	pointer
->	O
observable	pointer
==	O
NULL	O
)	O
{	O
int	O
status	int
=	O
mu_observable_create	function
(	O
&	O
(	O
mailer	pointer
->	O
observable	pointer
)	O
,	O
mailer	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
pobservable	pointer
=	O
mailer	pointer
->	O
observable	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_set_property	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_property_t	pointer
property	pointer
)	O
{	O
if	O
(	O
mailer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mailer	pointer
->	O
property	pointer
)	O
mu_property_unref	function
(	O
mailer	pointer
->	O
property	pointer
)	O
;	O
mailer	pointer
->	O
property	pointer
=	O
property	pointer
;	O
mu_property_ref	function
(	O
property	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_get_property	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_property_t	pointer
*	O
pproperty	pointer
)	O
{	O
if	O
(	O
mailer	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pproperty	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
mailer	pointer
->	O
property	pointer
==	O
NULL	O
)	O
{	O
int	O
status	int
;	O
if	O
(	O
mailer	pointer
->	O
_get_property	pointer
)	O
status	int
=	O
mailer	pointer
->	O
_get_property	pointer
(	O
mailer	pointer
,	O
&	O
mailer	pointer
->	O
property	pointer
)	O
;	O
else	O
status	int
=	O
mu_property_create_init	function
(	O
&	O
mailer	pointer
->	O
property	pointer
,	O
mu_assoc_property_init	function
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
}	O
*	O
pproperty	pointer
=	O
mailer	pointer
->	O
property	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_mailer_get_url	function
(	O
mu_mailer_t	pointer
mailer	pointer
,	O
mu_url_t	pointer
*	O
purl	pointer
)	O
{	O
if	O
(	O
!	O
mailer	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
purl	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
purl	pointer
=	O
mailer	pointer
->	O
url	pointer
;	O
return	O
0	int
;	O
}	O
