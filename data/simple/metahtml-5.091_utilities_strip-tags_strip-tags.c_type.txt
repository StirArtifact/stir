static	O
void	O
process_data	function
(	O
FILE	struct
*	O
input	pointer
,	O
FILE	struct
*	O
output	pointer
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
FILE	struct
*	O
input_stream	pointer
=	O
stdin	pointer
;	O
FILE	struct
*	O
output_stream	pointer
=	O
stdout	pointer
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
process_data	function
(	O
input_stream	pointer
,	O
output_stream	pointer
)	O
;	O
else	O
{	O
register	O
int	O
i	int
;	O
char	O
*	O
filename	pointer
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
input_stream	pointer
=	O
fopen	function
(	O
argv	array
[	O
i	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
input_stream	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cannot open input stream: %s\n"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
}	O
else	O
{	O
filename	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
11	int
+	O
strlen	function
(	O
argv	array
[	O
i	int
]	O
)	O
)	O
;	O
sprintf	function
(	O
filename	pointer
,	O
"%s-stripped"	pointer
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
output_stream	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
output_stream	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cannot open output stream: %s\n"	pointer
,	O
filename	pointer
)	O
;	O
}	O
else	O
{	O
process_data	function
(	O
input_stream	pointer
,	O
output_stream	pointer
)	O
;	O
fclose	function
(	O
output_stream	pointer
)	O
;	O
}	O
free	function
(	O
filename	pointer
)	O
;	O
fclose	function
(	O
input_stream	pointer
)	O
;	O
}	O
}	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
process_data	function
(	O
FILE	struct
*	O
input	pointer
,	O
FILE	struct
*	O
output	pointer
)	O
{	O
register	O
int	O
i	int
,	O
c	int
,	O
cache_index	int
=	O
0	int
;	O
int	O
quoted	int
=	O
0	int
,	O
depth	int
=	O
0	int
,	O
skip_processing_next	int
=	O
0	int
;	O
BPRINTF_BUFFER	O
*	O
buffer	O
=	O
bprintf_create_buffer	function
(	O
)	O
;	O
char	O
*	O
cache	pointer
;	O
char	O
fgets_buffer	array
[	O
1024	int
]	O
;	O
char	O
*	O
line	pointer
;	O
while	O
(	O
(	O
line	pointer
=	O
fgets	function
(	O
fgets_buffer	array
,	O
sizeof	O
(	O
fgets_buffer	array
)	O
-	O
1	int
,	O
input	pointer
)	O
)	O
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
bprintf	function
(	O
buffer	O
,	O
"%s"	pointer
,	O
line	pointer
)	O
;	O
cache	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
1	int
+	O
buffer	O
->	O
bindex	O
)	O
;	O
cache_index	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
buffer	O
->	O
bindex	O
;	O
i	int
++	O
)	O
{	O
c	int
=	O
buffer	O
->	O
buffer	O
[	O
i	int
]	O
;	O
if	O
(	O
skip_processing_next	int
)	O
{	O
skip_processing_next	int
=	O
0	int
;	O
}	O
else	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\\'	O
:	O
skip_processing_next	int
=	O
1	int
;	O
break	O
;	O
case	O
'"'	O
:	O
quoted	int
=	O
!	O
quoted	int
;	O
break	O
;	O
case	O
'<'	O
:	O
depth	int
++	O
;	O
break	O
;	O
case	O
'>'	O
:	O
if	O
(	O
depth	int
)	O
{	O
depth	int
--	O
;	O
if	O
(	O
depth	int
==	O
0	int
)	O
c	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
';'	O
:	O
if	O
(	O
(	O
(	O
i	int
+	O
2	int
)	O
<	O
buffer	O
->	O
bindex	O
)	O
&&	O
(	O
buffer	O
->	O
buffer	O
[	O
i	int
+	O
1	int
]	O
==	O
';'	O
)	O
&&	O
(	O
buffer	O
->	O
buffer	O
[	O
i	int
+	O
2	int
]	O
==	O
';'	O
)	O
)	O
{	O
while	O
(	O
buffer	O
->	O
buffer	O
[	O
i	int
]	O
!=	O
'\n'	O
)	O
i	int
++	O
;	O
c	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
!	O
depth	int
&&	O
c	int
)	O
cache	pointer
[	O
cache_index	int
++	O
]	O
=	O
c	int
;	O
}	O
}	O
cache	pointer
[	O
cache_index	int
]	O
=	O
'\0'	O
;	O
fprintf	function
(	O
output	pointer
,	O
"%s"	pointer
,	O
cache	pointer
)	O
;	O
free	function
(	O
cache	pointer
)	O
;	O
bprintf_free_buffer	function
(	O
buffer	O
)	O
;	O
}	O
