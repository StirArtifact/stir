struct	O
datbuf	struct
{	O
unsigned	O
char	O
*	O
buffer	pointer
;	O
size_t	long
size	int
;	O
}	O
;	O
struct	O
dump_file	struct
{	O
FILE	struct
*	O
fp	pointer
;	O
size_t	long
line	pointer
;	O
char	O
*	O
linebuf	pointer
;	O
size_t	long
lbsize	long
;	O
size_t	long
lblevel	long
;	O
char	O
*	O
buffer	pointer
;	O
size_t	long
bufsize	long
;	O
size_t	long
buflevel	long
;	O
size_t	long
parmc	long
;	O
struct	O
datbuf	struct
data	pointer
[	O
2	int
]	O
;	O
char	O
*	O
header	pointer
;	O
}	O
;	O
static	O
void	O
dump_file_free	function
(	O
struct	O
dump_file	struct
*	O
file	pointer
)	O
{	O
free	function
(	O
file	pointer
->	O
linebuf	pointer
)	O
;	O
free	function
(	O
file	pointer
->	O
buffer	pointer
)	O
;	O
free	function
(	O
file	pointer
->	O
data	pointer
[	O
0	int
]	O
.	O
buffer	pointer
)	O
;	O
free	function
(	O
file	pointer
->	O
data	pointer
[	O
1	int
]	O
.	O
buffer	pointer
)	O
;	O
free	function
(	O
file	pointer
->	O
header	pointer
)	O
;	O
}	O
static	O
const	O
char	O
*	O
getparm	function
(	O
const	O
char	O
*	O
buf	pointer
,	O
const	O
char	O
*	O
parm	pointer
)	O
{	O
if	O
(	O
!	O
buf	pointer
)	O
return	O
NULL	O
;	O
while	O
(	O
*	O
buf	pointer
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
parm	pointer
;	O
*	O
p	pointer
==	O
*	O
buf	pointer
;	O
p	pointer
++	O
,	O
buf	pointer
++	O
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
0	int
&&	O
*	O
buf	pointer
==	O
'='	O
)	O
return	O
buf	pointer
+	O
1	int
;	O
buf	pointer
+=	O
strlen	function
(	O
buf	pointer
)	O
+	O
1	int
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
size_t	long
get_dump_line	function
(	O
struct	O
dump_file	struct
*	O
file	pointer
)	O
{	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
if	O
(	O
file	pointer
->	O
lblevel	long
==	O
0	int
)	O
{	O
while	O
(	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
file	pointer
->	O
fp	pointer
)	O
)	O
{	O
size_t	long
n	int
=	O
strlen	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
buf	pointer
[	O
n	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
file	pointer
->	O
line	pointer
++	O
;	O
--	O
n	int
;	O
}	O
if	O
(	O
n	int
+	O
1	int
+	O
file	pointer
->	O
lblevel	long
>	O
file	pointer
->	O
lbsize	long
)	O
{	O
size_t	long
s	long
=	O
(	O
(	O
file	pointer
->	O
lblevel	long
+	O
n	int
+	O
_GDBM_MAX_DUMP_LINE_LEN	int
)	O
/	O
_GDBM_MAX_DUMP_LINE_LEN	int
)	O
*	O
_GDBM_MAX_DUMP_LINE_LEN	int
;	O
char	O
*	O
newp	pointer
=	O
realloc	function
(	O
file	pointer
->	O
linebuf	pointer
,	O
s	long
)	O
;	O
if	O
(	O
!	O
newp	pointer
)	O
return	O
GDBM_MALLOC_ERROR	int
;	O
file	pointer
->	O
linebuf	pointer
=	O
newp	pointer
;	O
file	pointer
->	O
lbsize	long
=	O
s	long
;	O
}	O
memcpy	function
(	O
file	pointer
->	O
linebuf	pointer
+	O
file	pointer
->	O
lblevel	long
,	O
buf	pointer
,	O
n	int
)	O
;	O
file	pointer
->	O
lblevel	long
+=	O
n	int
;	O
if	O
(	O
buf	pointer
[	O
n	int
]	O
)	O
{	O
file	pointer
->	O
linebuf	pointer
[	O
file	pointer
->	O
lblevel	long
]	O
=	O
0	int
;	O
break	O
;	O
}	O
}	O
}	O
return	O
file	pointer
->	O
lblevel	long
;	O
}	O
static	O
int	O
get_data	function
(	O
struct	O
dump_file	struct
*	O
file	pointer
)	O
{	O
size_t	long
n	int
;	O
file	pointer
->	O
buflevel	long
=	O
0	int
;	O
file	pointer
->	O
parmc	long
=	O
0	int
;	O
while	O
(	O
(	O
n	int
=	O
get_dump_line	function
(	O
file	pointer
)	O
)	O
)	O
{	O
if	O
(	O
file	pointer
->	O
linebuf	pointer
[	O
0	int
]	O
==	O
'#'	O
)	O
return	O
0	int
;	O
if	O
(	O
n	int
+	O
file	pointer
->	O
buflevel	long
>	O
file	pointer
->	O
bufsize	long
)	O
{	O
size_t	long
s	long
=	O
(	O
(	O
file	pointer
->	O
buflevel	long
+	O
n	int
+	O
_GDBM_MAX_DUMP_LINE_LEN	int
-	O
1	int
)	O
/	O
_GDBM_MAX_DUMP_LINE_LEN	int
)	O
*	O
_GDBM_MAX_DUMP_LINE_LEN	int
;	O
char	O
*	O
newp	pointer
=	O
realloc	function
(	O
file	pointer
->	O
buffer	pointer
,	O
s	long
)	O
;	O
if	O
(	O
!	O
newp	pointer
)	O
return	O
GDBM_MALLOC_ERROR	int
;	O
file	pointer
->	O
buffer	pointer
=	O
newp	pointer
;	O
file	pointer
->	O
bufsize	long
=	O
s	long
;	O
}	O
memcpy	function
(	O
file	pointer
->	O
buffer	pointer
+	O
file	pointer
->	O
buflevel	long
,	O
file	pointer
->	O
linebuf	pointer
,	O
n	int
)	O
;	O
file	pointer
->	O
buflevel	long
+=	O
n	int
;	O
file	pointer
->	O
lblevel	long
=	O
0	int
;	O
}	O
return	O
ferror	function
(	O
file	pointer
->	O
fp	pointer
)	O
?	O
GDBM_FILE_READ_ERROR	int
:	O
0	int
;	O
}	O
static	O
int	O
get_parms	function
(	O
struct	O
dump_file	struct
*	O
file	pointer
)	O
{	O
size_t	long
n	int
;	O
file	pointer
->	O
buflevel	long
=	O
0	int
;	O
file	pointer
->	O
parmc	long
=	O
0	int
;	O
while	O
(	O
(	O
n	int
=	O
get_dump_line	function
(	O
file	pointer
)	O
)	O
)	O
{	O
char	O
*	O
p	pointer
;	O
p	pointer
=	O
file	pointer
->	O
linebuf	pointer
;	O
if	O
(	O
*	O
p	pointer
!=	O
'#'	O
)	O
return	O
0	int
;	O
if	O
(	O
n	int
==	O
0	int
||	O
*	O
++	O
p	pointer
!=	O
':'	O
)	O
{	O
file	pointer
->	O
lblevel	long
=	O
0	int
;	O
continue	O
;	O
}	O
if	O
(	O
--	O
n	int
==	O
0	int
)	O
{	O
file	pointer
->	O
lblevel	long
=	O
0	int
;	O
continue	O
;	O
}	O
if	O
(	O
n	int
+	O
1	int
+	O
file	pointer
->	O
buflevel	long
>	O
file	pointer
->	O
bufsize	long
)	O
{	O
size_t	long
s	long
=	O
(	O
(	O
file	pointer
->	O
buflevel	long
+	O
n	int
+	O
_GDBM_MAX_DUMP_LINE_LEN	int
)	O
/	O
_GDBM_MAX_DUMP_LINE_LEN	int
)	O
*	O
_GDBM_MAX_DUMP_LINE_LEN	int
;	O
char	O
*	O
newp	pointer
=	O
realloc	function
(	O
file	pointer
->	O
buffer	pointer
,	O
s	long
)	O
;	O
if	O
(	O
!	O
newp	pointer
)	O
return	O
GDBM_MALLOC_ERROR	int
;	O
file	pointer
->	O
buffer	pointer
=	O
newp	pointer
;	O
file	pointer
->	O
bufsize	long
=	O
s	long
;	O
}	O
while	O
(	O
*	O
p	pointer
)	O
{	O
p	pointer
++	O
;	O
while	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
)	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
while	O
(	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
'='	O
)	O
file	pointer
->	O
buffer	pointer
[	O
file	pointer
->	O
buflevel	long
++	O
]	O
=	O
*	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'='	O
)	O
{	O
file	pointer
->	O
buffer	pointer
[	O
file	pointer
->	O
buflevel	long
++	O
]	O
=	O
*	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'"'	O
)	O
{	O
p	pointer
++	O
;	O
while	O
(	O
*	O
p	pointer
&&	O
*	O
p	pointer
!=	O
'"'	O
)	O
file	pointer
->	O
buffer	pointer
[	O
file	pointer
->	O
buflevel	long
++	O
]	O
=	O
*	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'"'	O
)	O
p	pointer
++	O
;	O
}	O
else	O
{	O
while	O
(	O
!	O
(	O
*	O
p	pointer
==	O
0	int
||	O
*	O
p	pointer
==	O
','	O
)	O
)	O
file	pointer
->	O
buffer	pointer
[	O
file	pointer
->	O
buflevel	long
++	O
]	O
=	O
*	O
p	pointer
++	O
;	O
}	O
file	pointer
->	O
parmc	long
++	O
;	O
file	pointer
->	O
buffer	pointer
[	O
file	pointer
->	O
buflevel	long
++	O
]	O
=	O
0	int
;	O
}	O
else	O
return	O
GDBM_ILLEGAL_DATA	int
;	O
}	O
else	O
break	O
;	O
}	O
file	pointer
->	O
lblevel	long
=	O
0	int
;	O
}	O
if	O
(	O
file	pointer
->	O
buffer	pointer
)	O
file	pointer
->	O
buffer	pointer
[	O
file	pointer
->	O
buflevel	long
]	O
=	O
0	int
;	O
return	O
ferror	function
(	O
file	pointer
->	O
fp	pointer
)	O
?	O
GDBM_FILE_READ_ERROR	int
:	O
0	int
;	O
}	O
int	O
get_len	function
(	O
const	O
char	O
*	O
param	pointer
,	O
size_t	long
*	O
plen	pointer
)	O
{	O
unsigned	O
long	O
n	int
;	O
const	O
char	O
*	O
p	pointer
=	O
getparm	function
(	O
param	pointer
,	O
"len"	pointer
)	O
;	O
char	O
*	O
end	pointer
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
GDBM_ITEM_NOT_FOUND	int
;	O
errno	O
=	O
0	int
;	O
n	int
=	O
strtoul	function
(	O
p	pointer
,	O
&	O
end	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
end	pointer
==	O
0	int
&&	O
errno	O
==	O
0	int
)	O
{	O
*	O
plen	pointer
=	O
n	int
;	O
return	O
0	int
;	O
}	O
return	O
GDBM_ILLEGAL_DATA	int
;	O
}	O
int	O
read_record	function
(	O
struct	O
dump_file	struct
*	O
file	pointer
,	O
char	O
*	O
param	pointer
,	O
int	O
n	int
,	O
datum	struct
*	O
dat	pointer
)	O
{	O
int	O
rc	int
;	O
size_t	long
len	long
,	O
consumed_size	long
,	O
decoded_size	long
;	O
if	O
(	O
!	O
param	pointer
)	O
{	O
rc	int
=	O
get_parms	function
(	O
file	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
file	pointer
->	O
parmc	long
==	O
0	int
)	O
return	O
GDBM_ITEM_NOT_FOUND	int
;	O
param	pointer
=	O
file	pointer
->	O
buffer	pointer
;	O
}	O
rc	int
=	O
get_len	function
(	O
param	pointer
,	O
&	O
len	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
dat	pointer
->	O
dsize	int
=	O
len	long
;	O
rc	int
=	O
get_data	function
(	O
file	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
_gdbm_base64_decode	function
(	O
(	O
unsigned	O
char	O
*	O
)	O
file	pointer
->	O
buffer	pointer
,	O
file	pointer
->	O
buflevel	long
,	O
&	O
file	pointer
->	O
data	pointer
[	O
n	int
]	O
.	O
buffer	pointer
,	O
&	O
file	pointer
->	O
data	pointer
[	O
n	int
]	O
.	O
size	int
,	O
&	O
consumed_size	long
,	O
&	O
decoded_size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
consumed_size	long
!=	O
file	pointer
->	O
buflevel	long
||	O
decoded_size	long
!=	O
len	long
)	O
return	O
GDBM_ILLEGAL_DATA	int
;	O
dat	pointer
->	O
dptr	pointer
=	O
(	O
void	O
*	O
)	O
file	pointer
->	O
data	pointer
[	O
n	int
]	O
.	O
buffer	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_set_gdbm_meta_info	function
(	O
GDBM_FILE	pointer
dbf	pointer
,	O
char	O
*	O
param	pointer
,	O
int	O
meta_mask	int
)	O
{	O
unsigned	O
long	O
n	int
;	O
uid_t	int
owner_uid	int
;	O
uid_t	int
owner_gid	int
;	O
mode_t	int
mode	int
;	O
int	O
meta_flags	int
=	O
0	int
;	O
const	O
char	O
*	O
p	pointer
;	O
char	O
*	O
end	pointer
;	O
if	O
(	O
!	O
(	O
meta_mask	int
&	O
GDBM_META_MASK_OWNER	int
)	O
)	O
{	O
p	pointer
=	O
getparm	function
(	O
param	pointer
,	O
"user"	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
struct	O
passwd	struct
*	O
pw	pointer
=	O
getpwnam	function
(	O
p	pointer
)	O
;	O
if	O
(	O
pw	pointer
)	O
{	O
owner_uid	int
=	O
pw	pointer
->	O
pw_uid	int
;	O
meta_flags	int
|=	O
META_UID	int
;	O
}	O
}	O
if	O
(	O
!	O
(	O
meta_flags	int
&	O
META_UID	int
)	O
&&	O
(	O
p	pointer
=	O
getparm	function
(	O
param	pointer
,	O
"uid"	pointer
)	O
)	O
)	O
{	O
errno	O
=	O
0	int
;	O
n	int
=	O
strtoul	function
(	O
p	pointer
,	O
&	O
end	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
end	pointer
==	O
0	int
&&	O
errno	O
==	O
0	int
)	O
{	O
owner_uid	int
=	O
n	int
;	O
meta_flags	int
|=	O
META_UID	int
;	O
}	O
}	O
p	pointer
=	O
getparm	function
(	O
param	pointer
,	O
"group"	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
struct	O
group	struct
*	O
gr	pointer
=	O
getgrnam	function
(	O
p	pointer
)	O
;	O
if	O
(	O
gr	pointer
)	O
{	O
owner_gid	int
=	O
gr	pointer
->	O
gr_gid	int
;	O
meta_flags	int
|=	O
META_GID	int
;	O
}	O
}	O
if	O
(	O
!	O
(	O
meta_flags	int
&	O
META_GID	int
)	O
&&	O
(	O
p	pointer
=	O
getparm	function
(	O
param	pointer
,	O
"gid"	pointer
)	O
)	O
)	O
{	O
errno	O
=	O
0	int
;	O
n	int
=	O
strtoul	function
(	O
p	pointer
,	O
&	O
end	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
end	pointer
==	O
0	int
&&	O
errno	O
==	O
0	int
)	O
{	O
owner_gid	int
=	O
n	int
;	O
meta_flags	int
|=	O
META_GID	int
;	O
}	O
}	O
}	O
if	O
(	O
!	O
(	O
meta_mask	int
&	O
GDBM_META_MASK_MODE	int
)	O
)	O
{	O
p	pointer
=	O
getparm	function
(	O
param	pointer
,	O
"mode"	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
errno	O
=	O
0	int
;	O
n	int
=	O
strtoul	function
(	O
p	pointer
,	O
&	O
end	pointer
,	O
8	int
)	O
;	O
if	O
(	O
*	O
end	pointer
==	O
0	int
&&	O
errno	O
==	O
0	int
)	O
{	O
mode	int
=	O
n	int
&	O
0777	int
;	O
meta_flags	int
|=	O
META_MODE	int
;	O
}	O
}	O
}	O
if	O
(	O
meta_flags	int
)	O
{	O
int	O
fd	int
=	O
gdbm_fdesc	function
(	O
dbf	pointer
)	O
;	O
if	O
(	O
getuid	function
(	O
)	O
==	O
0	int
&&	O
(	O
meta_flags	int
&	O
(	O
META_UID	int
|	O
META_GID	int
)	O
)	O
)	O
{	O
if	O
(	O
(	O
meta_flags	int
&	O
(	O
META_UID	int
|	O
META_GID	int
)	O
)	O
!=	O
(	O
META_UID	int
|	O
META_GID	int
)	O
)	O
{	O
struct	O
stat	struct
st	struct
;	O
if	O
(	O
fstat	function
(	O
fd	int
,	O
&	O
st	struct
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_FILE_STAT_ERROR	int
,	O
FALSE	int
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
(	O
meta_flags	int
&	O
META_UID	int
)	O
)	O
owner_uid	int
=	O
st	struct
.	O
st_uid	int
;	O
if	O
(	O
!	O
(	O
meta_flags	int
&	O
META_GID	int
)	O
)	O
owner_gid	int
=	O
st	struct
.	O
st_gid	int
;	O
}	O
if	O
(	O
fchown	function
(	O
fd	int
,	O
owner_uid	int
,	O
owner_gid	int
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_ERR_FILE_OWNER	int
,	O
FALSE	int
)	O
;	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
(	O
meta_flags	int
&	O
META_MODE	int
)	O
&&	O
fchmod	function
(	O
fd	int
,	O
mode	int
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	pointer
,	O
GDBM_ERR_FILE_OWNER	int
,	O
FALSE	int
)	O
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
_gdbm_load_file	function
(	O
struct	O
dump_file	struct
*	O
file	pointer
,	O
GDBM_FILE	pointer
dbf	pointer
,	O
GDBM_FILE	pointer
*	O
ofp	pointer
,	O
int	O
replace	int
,	O
int	O
meta_mask	int
)	O
{	O
char	O
*	O
param	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
GDBM_FILE	pointer
tmp	pointer
=	O
NULL	O
;	O
rc	int
=	O
get_parms	function
(	O
file	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
file	pointer
->	O
parmc	long
)	O
{	O
file	pointer
->	O
header	pointer
=	O
file	pointer
->	O
buffer	pointer
;	O
file	pointer
->	O
buffer	pointer
=	O
NULL	O
;	O
file	pointer
->	O
bufsize	long
=	O
file	pointer
->	O
buflevel	long
=	O
0	int
;	O
}	O
else	O
return	O
GDBM_ILLEGAL_DATA	int
;	O
if	O
(	O
!	O
dbf	pointer
)	O
{	O
const	O
char	O
*	O
filename	pointer
=	O
getparm	function
(	O
file	pointer
->	O
header	pointer
,	O
"file"	pointer
)	O
;	O
if	O
(	O
!	O
filename	pointer
)	O
return	O
GDBM_NO_DBNAME	int
;	O
tmp	pointer
=	O
gdbm_open	function
(	O
filename	pointer
,	O
0	int
,	O
replace	int
?	O
GDBM_WRCREAT	int
:	O
GDBM_NEWDB	int
,	O
0600	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
gdbm_errno	O
;	O
dbf	pointer
=	O
tmp	pointer
;	O
}	O
param	pointer
=	O
file	pointer
->	O
header	pointer
;	O
while	O
(	O
1	int
)	O
{	O
datum	struct
key	struct
,	O
content	struct
;	O
rc	int
=	O
read_record	function
(	O
file	pointer
,	O
param	pointer
,	O
0	int
,	O
&	O
key	struct
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
GDBM_ITEM_NOT_FOUND	int
&&	O
feof	function
(	O
file	pointer
->	O
fp	pointer
)	O
)	O
rc	int
=	O
0	int
;	O
break	O
;	O
}	O
param	pointer
=	O
NULL	O
;	O
rc	int
=	O
read_record	function
(	O
file	pointer
,	O
NULL	O
,	O
1	int
,	O
&	O
content	struct
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
if	O
(	O
gdbm_store	function
(	O
dbf	pointer
,	O
key	struct
,	O
content	struct
,	O
replace	int
)	O
)	O
{	O
rc	int
=	O
gdbm_errno	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
_set_gdbm_meta_info	function
(	O
dbf	pointer
,	O
file	pointer
->	O
header	pointer
,	O
meta_mask	int
)	O
;	O
*	O
ofp	pointer
=	O
dbf	pointer
;	O
}	O
else	O
if	O
(	O
tmp	pointer
)	O
gdbm_close	function
(	O
tmp	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
read_bdb_header	function
(	O
struct	O
dump_file	struct
*	O
file	pointer
)	O
{	O
char	O
buf	pointer
[	O
256	int
]	O
;	O
file	pointer
->	O
line	pointer
=	O
1	int
;	O
if	O
(	O
!	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
file	pointer
->	O
fp	pointer
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
buf	pointer
,	O
"VERSION=3\n"	pointer
)	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
file	pointer
->	O
fp	pointer
)	O
)	O
{	O
++	O
file	pointer
->	O
line	pointer
;	O
if	O
(	O
strcmp	function
(	O
buf	pointer
,	O
"HEADER=END\n"	pointer
)	O
==	O
0	int
)	O
return	O
0	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
c2x	function
(	O
int	O
c	int
)	O
{	O
static	O
char	O
xdig	array
[	O
]	O
=	O
"0123456789abcdef"	pointer
;	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
xdig	array
,	O
c	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
-	O
1	int
;	O
return	O
p	pointer
-	O
xdig	array
;	O
}	O
static	O
int	O
xdatum_read	function
(	O
FILE	struct
*	O
fp	pointer
,	O
datum	struct
*	O
d	pointer
,	O
size_t	long
*	O
pdmax	pointer
)	O
{	O
int	O
c	int
;	O
size_t	long
dmax	long
=	O
*	O
pdmax	pointer
;	O
d	pointer
->	O
dsize	int
=	O
0	int
;	O
while	O
(	O
(	O
c	int
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
!=	O
EOF	O
&&	O
c	int
!=	O
'\n'	O
)	O
{	O
int	O
t	int
,	O
n	int
;	O
t	int
=	O
c2x	function
(	O
c	int
)	O
;	O
if	O
(	O
t	int
==	O
-	O
1	int
)	O
return	O
EOF	O
;	O
t	int
<<=	O
4	int
;	O
if	O
(	O
(	O
c	int
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
==	O
EOF	O
)	O
break	O
;	O
n	int
=	O
c2x	function
(	O
c	int
)	O
;	O
if	O
(	O
n	int
==	O
-	O
1	int
)	O
return	O
EOF	O
;	O
t	int
+=	O
n	int
;	O
if	O
(	O
d	pointer
->	O
dsize	int
==	O
dmax	long
)	O
{	O
char	O
*	O
np	pointer
=	O
realloc	function
(	O
d	pointer
->	O
dptr	pointer
,	O
dmax	long
+	O
DINCR	int
)	O
;	O
if	O
(	O
!	O
np	pointer
)	O
return	O
GDBM_MALLOC_ERROR	int
;	O
d	pointer
->	O
dptr	pointer
=	O
np	pointer
;	O
dmax	long
+=	O
DINCR	int
;	O
}	O
d	pointer
->	O
dptr	pointer
[	O
d	pointer
->	O
dsize	int
++	O
]	O
=	O
t	int
;	O
}	O
*	O
pdmax	pointer
=	O
dmax	long
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
return	O
0	int
;	O
return	O
c	int
;	O
}	O
int	O
gdbm_load_bdb_dump	function
(	O
struct	O
dump_file	struct
*	O
file	pointer
,	O
GDBM_FILE	pointer
dbf	pointer
,	O
int	O
replace	int
)	O
{	O
datum	struct
xd	array
[	O
2	int
]	O
;	O
size_t	long
xs	array
[	O
2	int
]	O
;	O
int	O
rc	int
,	O
c	int
;	O
int	O
i	int
;	O
if	O
(	O
read_bdb_header	function
(	O
file	pointer
)	O
)	O
return	O
-	O
1	int
;	O
memset	function
(	O
&	O
xd	array
,	O
0	int
,	O
sizeof	O
(	O
xd	array
)	O
)	O
;	O
xs	array
[	O
0	int
]	O
=	O
xs	array
[	O
1	int
]	O
=	O
0	int
;	O
i	int
=	O
0	int
;	O
rc	int
=	O
0	int
;	O
while	O
(	O
(	O
c	int
=	O
fgetc	function
(	O
file	pointer
->	O
fp	pointer
)	O
)	O
==	O
' '	O
)	O
{	O
rc	int
=	O
xdatum_read	function
(	O
file	pointer
->	O
fp	pointer
,	O
&	O
xd	array
[	O
i	int
]	O
,	O
&	O
xs	array
[	O
i	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
++	O
file	pointer
->	O
line	pointer
;	O
if	O
(	O
i	int
==	O
1	int
)	O
{	O
if	O
(	O
gdbm_store	function
(	O
dbf	pointer
,	O
xd	array
[	O
0	int
]	O
,	O
xd	array
[	O
1	int
]	O
,	O
replace	int
)	O
)	O
return	O
gdbm_errno	O
;	O
}	O
i	int
=	O
!	O
i	int
;	O
}	O
free	function
(	O
xd	array
[	O
0	int
]	O
.	O
dptr	pointer
)	O
;	O
free	function
(	O
xd	array
[	O
1	int
]	O
.	O
dptr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
i	int
)	O
rc	int
=	O
EOF	O
;	O
return	O
rc	int
;	O
}	O
int	O
gdbm_load_from_file	function
(	O
GDBM_FILE	pointer
*	O
pdbf	pointer
,	O
FILE	struct
*	O
fp	pointer
,	O
int	O
replace	int
,	O
int	O
meta_mask	int
,	O
unsigned	O
long	O
*	O
line	pointer
)	O
{	O
struct	O
dump_file	struct
df	struct
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
pdbf	pointer
||	O
!	O
fp	pointer
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
fgetc	function
(	O
fp	pointer
)	O
;	O
ungetc	function
(	O
rc	int
,	O
fp	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
'!'	O
)	O
{	O
if	O
(	O
line	pointer
)	O
*	O
line	pointer
=	O
0	int
;	O
if	O
(	O
!	O
*	O
pdbf	pointer
)	O
{	O
GDBM_SET_ERRNO	O
(	O
NULL	O
,	O
GDBM_NO_DBNAME	int
,	O
FALSE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
gdbm_import_from_file	function
(	O
*	O
pdbf	pointer
,	O
fp	pointer
,	O
replace	int
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
memset	function
(	O
&	O
df	struct
,	O
0	int
,	O
sizeof	O
df	struct
)	O
;	O
df	struct
.	O
fp	pointer
=	O
fp	pointer
;	O
if	O
(	O
rc	int
==	O
'V'	O
)	O
{	O
if	O
(	O
!	O
*	O
pdbf	pointer
)	O
{	O
GDBM_SET_ERRNO	O
(	O
NULL	O
,	O
GDBM_NO_DBNAME	int
,	O
FALSE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
gdbm_load_bdb_dump	function
(	O
&	O
df	struct
,	O
*	O
pdbf	pointer
,	O
replace	int
)	O
;	O
}	O
else	O
rc	int
=	O
_gdbm_load_file	function
(	O
&	O
df	struct
,	O
*	O
pdbf	pointer
,	O
pdbf	pointer
,	O
replace	int
,	O
meta_mask	int
)	O
;	O
dump_file_free	function
(	O
&	O
df	struct
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
line	pointer
)	O
*	O
line	pointer
=	O
df	struct
.	O
line	pointer
;	O
GDBM_SET_ERRNO	O
(	O
NULL	O
,	O
rc	int
,	O
FALSE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
gdbm_load	function
(	O
GDBM_FILE	pointer
*	O
pdbf	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
replace	int
,	O
int	O
meta_mask	int
,	O
unsigned	O
long	O
*	O
line	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
int	O
rc	int
;	O
fp	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
GDBM_SET_ERRNO	O
(	O
NULL	O
,	O
GDBM_FILE_OPEN_ERROR	int
,	O
FALSE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
gdbm_load_from_file	function
(	O
pdbf	pointer
,	O
fp	pointer
,	O
replace	int
,	O
meta_mask	int
,	O
line	pointer
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
