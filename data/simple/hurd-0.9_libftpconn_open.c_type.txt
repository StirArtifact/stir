static	O
error_t	int
ftp_conn_login	function
(	O
struct	O
ftp_conn	struct
*	O
conn	pointer
)	O
{	O
int	O
reply	pointer
;	O
error_t	int
err	int
=	O
0	int
;	O
const	O
struct	O
ftp_conn_params	struct
*	O
p	pointer
=	O
conn	pointer
->	O
params	pointer
;	O
err	int
=	O
ftp_conn_cmd	function
(	O
conn	pointer
,	O
"user"	pointer
,	O
p	pointer
->	O
user	pointer
?	O
:	O
"anonymous"	pointer
,	O
&	O
reply	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
err	int
&&	O
reply	pointer
==	O
REPLY_NEED_ACCT	int
)	O
{	O
char	O
*	O
acct	function
=	O
p	pointer
->	O
acct	function
;	O
if	O
(	O
!	O
acct	function
&&	O
conn	pointer
->	O
hooks	pointer
&&	O
conn	pointer
->	O
hooks	pointer
->	O
get_login_param	pointer
)	O
err	int
=	O
(	O
*	O
conn	pointer
->	O
hooks	pointer
->	O
get_login_param	pointer
)	O
(	O
conn	pointer
,	O
FTP_CONN_GET_LOGIN_PARAM_ACCT	int
,	O
&	O
acct	function
)	O
;	O
if	O
(	O
!	O
err	int
)	O
err	int
=	O
acct	function
?	O
ftp_conn_cmd	function
(	O
conn	pointer
,	O
"acct"	pointer
,	O
acct	function
,	O
&	O
reply	pointer
,	O
0	int
)	O
:	O
EACCES	int
;	O
if	O
(	O
acct	function
&&	O
!	O
p	pointer
->	O
acct	function
)	O
free	function
(	O
acct	function
)	O
;	O
}	O
if	O
(	O
!	O
err	int
&&	O
reply	pointer
==	O
REPLY_NEED_PASS	int
)	O
{	O
char	O
*	O
pass	pointer
=	O
p	pointer
->	O
pass	pointer
;	O
if	O
(	O
!	O
pass	pointer
&&	O
conn	pointer
->	O
hooks	pointer
&&	O
conn	pointer
->	O
hooks	pointer
->	O
get_login_param	pointer
)	O
err	int
=	O
(	O
*	O
conn	pointer
->	O
hooks	pointer
->	O
get_login_param	pointer
)	O
(	O
conn	pointer
,	O
FTP_CONN_GET_LOGIN_PARAM_PASS	int
,	O
&	O
pass	pointer
)	O
;	O
if	O
(	O
!	O
err	int
)	O
{	O
if	O
(	O
pass	pointer
)	O
err	int
=	O
ftp_conn_cmd	function
(	O
conn	pointer
,	O
"pass"	pointer
,	O
pass	pointer
,	O
&	O
reply	pointer
,	O
0	int
)	O
;	O
else	O
{	O
pass	pointer
=	O
getenv	function
(	O
"USER"	pointer
)	O
;	O
if	O
(	O
!	O
pass	pointer
)	O
pass	pointer
=	O
getenv	function
(	O
"LOGNAME"	pointer
)	O
;	O
if	O
(	O
!	O
pass	pointer
)	O
{	O
struct	O
passwd	struct
*	O
pe	pointer
=	O
getpwuid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
pass	pointer
=	O
pe	pointer
?	O
pe	pointer
->	O
pw_name	pointer
:	O
"?"	pointer
;	O
}	O
pass	pointer
=	O
strdup	function
(	O
pass	pointer
)	O
;	O
if	O
(	O
pass	pointer
)	O
pass	pointer
=	O
realloc	function
(	O
pass	pointer
,	O
strlen	function
(	O
pass	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
pass	pointer
)	O
{	O
strcat	function
(	O
pass	pointer
,	O
"@"	pointer
)	O
;	O
err	int
=	O
ftp_conn_cmd	function
(	O
conn	pointer
,	O
"pass"	pointer
,	O
pass	pointer
,	O
&	O
reply	pointer
,	O
0	int
)	O
;	O
}	O
else	O
err	int
=	O
ENOMEM	int
;	O
}	O
}	O
if	O
(	O
pass	pointer
&&	O
!	O
p	pointer
->	O
pass	pointer
)	O
free	function
(	O
pass	pointer
)	O
;	O
}	O
if	O
(	O
!	O
err	int
&&	O
reply	pointer
!=	O
REPLY_LOGIN_OK	int
)	O
{	O
if	O
(	O
REPLY_IS_FAILURE	O
(	O
reply	pointer
)	O
)	O
err	int
=	O
EACCES	int
;	O
else	O
err	int
=	O
unexpected_reply	function
(	O
conn	pointer
,	O
reply	pointer
,	O
0	int
,	O
0	int
)	O
;	O
}	O
return	O
err	int
;	O
}	O
static	O
error_t	int
ftp_conn_hello	function
(	O
struct	O
ftp_conn	struct
*	O
conn	pointer
)	O
{	O
int	O
reply	pointer
;	O
error_t	int
err	int
;	O
do	O
err	int
=	O
ftp_conn_get_reply	function
(	O
conn	pointer
,	O
&	O
reply	pointer
,	O
0	int
)	O
;	O
while	O
(	O
!	O
err	int
&&	O
reply	pointer
==	O
REPLY_DELAY	int
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
if	O
(	O
reply	pointer
==	O
REPLY_CLOSED	int
)	O
return	O
ECONNREFUSED	int
;	O
if	O
(	O
reply	pointer
!=	O
REPLY_HELLO	int
)	O
return	O
EGRATUITOUS	O
;	O
return	O
0	int
;	O
}	O
void	O
ftp_conn_set_syshooks	function
(	O
struct	O
ftp_conn	struct
*	O
conn	pointer
,	O
struct	O
ftp_conn_syshooks	struct
*	O
syshooks	struct
)	O
{	O
conn	pointer
->	O
syshooks	struct
=	O
*	O
syshooks	struct
;	O
}	O
void	O
ftp_conn_choose_syshooks	function
(	O
struct	O
ftp_conn	struct
*	O
conn	pointer
,	O
const	O
char	O
*	O
syst	pointer
)	O
{	O
if	O
(	O
!	O
syst	pointer
||	O
(	O
strncasecmp	function
(	O
syst	pointer
,	O
"UNIX"	pointer
,	O
4	int
)	O
==	O
0	int
&&	O
!	O
isalnum	function
(	O
syst	pointer
[	O
4	int
]	O
)	O
)	O
)	O
ftp_conn_set_syshooks	function
(	O
conn	pointer
,	O
&	O
ftp_conn_unix_syshooks	struct
)	O
;	O
}	O
static	O
error_t	int
ftp_conn_sysify	function
(	O
struct	O
ftp_conn	struct
*	O
conn	pointer
)	O
{	O
int	O
reply	pointer
;	O
const	O
char	O
*	O
txt	pointer
;	O
error_t	int
err	int
=	O
ftp_conn_cmd	function
(	O
conn	pointer
,	O
"syst"	pointer
,	O
0	int
,	O
&	O
reply	pointer
,	O
&	O
txt	pointer
)	O
;	O
if	O
(	O
!	O
err	int
)	O
{	O
if	O
(	O
reply	pointer
==	O
REPLY_SYSTYPE	int
||	O
reply	pointer
==	O
REPLY_BAD_CMD	int
||	O
reply	pointer
==	O
REPLY_UNIMP_CMD	int
||	O
REPLY_NO_LOGIN	int
)	O
{	O
if	O
(	O
reply	pointer
==	O
REPLY_BAD_CMD	int
||	O
reply	pointer
==	O
REPLY_UNIMP_CMD	int
||	O
reply	pointer
==	O
REPLY_NO_LOGIN	int
)	O
txt	pointer
=	O
0	int
;	O
if	O
(	O
conn	pointer
->	O
hooks	pointer
&&	O
conn	pointer
->	O
hooks	pointer
->	O
choose_syshooks	pointer
)	O
(	O
*	O
conn	pointer
->	O
hooks	pointer
->	O
choose_syshooks	pointer
)	O
(	O
conn	pointer
,	O
txt	pointer
)	O
;	O
else	O
ftp_conn_choose_syshooks	function
(	O
conn	pointer
,	O
txt	pointer
)	O
;	O
conn	pointer
->	O
syshooks_valid	int
=	O
1	int
;	O
}	O
else	O
err	int
=	O
unexpected_reply	function
(	O
conn	pointer
,	O
reply	pointer
,	O
txt	pointer
,	O
0	int
)	O
;	O
}	O
return	O
err	int
;	O
}	O
error_t	int
ftp_conn_open	function
(	O
struct	O
ftp_conn	struct
*	O
conn	pointer
)	O
{	O
static	O
int	O
ftp_port	int
=	O
0	int
;	O
int	O
csock	int
;	O
error_t	int
err	int
;	O
struct	O
sockaddr_in	struct
ftp_addr	struct
;	O
if	O
(	O
conn	pointer
->	O
params	pointer
->	O
addr_type	int
!=	O
AF_INET	O
)	O
return	O
EAFNOSUPPORT	int
;	O
if	O
(	O
!	O
ftp_port	int
)	O
{	O
struct	O
servent	struct
*	O
se	pointer
=	O
getservbyname	function
(	O
"ftp"	pointer
,	O
"tcp"	pointer
)	O
;	O
if	O
(	O
!	O
se	pointer
)	O
return	O
EGRATUITOUS	O
;	O
ftp_port	int
=	O
se	pointer
->	O
s_port	int
;	O
}	O
if	O
(	O
conn	pointer
->	O
control	int
>=	O
0	int
)	O
{	O
close	function
(	O
conn	pointer
->	O
control	int
)	O
;	O
conn	pointer
->	O
control	int
=	O
-	O
1	int
;	O
}	O
memset	function
(	O
&	O
conn	pointer
->	O
syshooks	struct
,	O
0	int
,	O
sizeof	O
conn	pointer
->	O
syshooks	struct
)	O
;	O
csock	int
=	O
socket	function
(	O
PF_INET	int
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
csock	int
<	O
0	int
)	O
return	O
errno	O
;	O
ftp_addr	struct
.	O
sin_len	O
=	O
sizeof	O
ftp_addr	struct
;	O
ftp_addr	struct
.	O
sin_family	short
=	O
conn	pointer
->	O
params	pointer
->	O
addr_type	int
;	O
ftp_addr	struct
.	O
sin_addr	struct
=	O
*	O
(	O
struct	O
in_addr	struct
*	O
)	O
conn	pointer
->	O
params	pointer
->	O
addr	pointer
;	O
ftp_addr	struct
.	O
sin_port	short
=	O
ftp_port	int
;	O
if	O
(	O
connect	function
(	O
csock	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
ftp_addr	struct
,	O
sizeof	O
ftp_addr	struct
)	O
<	O
0	int
)	O
{	O
err	int
=	O
errno	O
;	O
close	function
(	O
csock	int
)	O
;	O
return	O
err	int
;	O
}	O
conn	pointer
->	O
control	int
=	O
csock	int
;	O
err	int
=	O
ftp_conn_hello	function
(	O
conn	pointer
)	O
;	O
if	O
(	O
!	O
err	int
&&	O
conn	pointer
->	O
hooks	pointer
&&	O
conn	pointer
->	O
hooks	pointer
->	O
opened	pointer
)	O
(	O
*	O
conn	pointer
->	O
hooks	pointer
->	O
opened	pointer
)	O
(	O
conn	pointer
)	O
;	O
if	O
(	O
!	O
err	int
)	O
ftp_conn_sysify	function
(	O
conn	pointer
)	O
;	O
if	O
(	O
!	O
err	int
)	O
err	int
=	O
ftp_conn_login	function
(	O
conn	pointer
)	O
;	O
if	O
(	O
!	O
err	int
&&	O
!	O
conn	pointer
->	O
syshooks_valid	int
)	O
err	int
=	O
ftp_conn_sysify	function
(	O
conn	pointer
)	O
;	O
if	O
(	O
!	O
err	int
&&	O
conn	pointer
->	O
type	int
)	O
{	O
int	O
reply	pointer
;	O
err	int
=	O
ftp_conn_cmd	function
(	O
conn	pointer
,	O
"type"	pointer
,	O
conn	pointer
->	O
type	int
,	O
&	O
reply	pointer
,	O
0	int
)	O
;	O
if	O
(	O
!	O
err	int
&&	O
reply	pointer
!=	O
REPLY_OK	int
)	O
err	int
=	O
unexpected_reply	function
(	O
conn	pointer
,	O
reply	pointer
,	O
0	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
err	int
)	O
ftp_conn_close	function
(	O
conn	pointer
)	O
;	O
return	O
err	int
;	O
}	O
void	O
ftp_conn_close	function
(	O
struct	O
ftp_conn	struct
*	O
conn	pointer
)	O
{	O
if	O
(	O
conn	pointer
->	O
control	int
>=	O
0	int
)	O
close	function
(	O
conn	pointer
->	O
control	int
)	O
;	O
conn	pointer
->	O
control	int
=	O
-	O
1	int
;	O
if	O
(	O
conn	pointer
->	O
hooks	pointer
&&	O
conn	pointer
->	O
hooks	pointer
->	O
closed	pointer
)	O
(	O
*	O
conn	pointer
->	O
hooks	pointer
->	O
closed	pointer
)	O
(	O
conn	pointer
)	O
;	O
}	O
