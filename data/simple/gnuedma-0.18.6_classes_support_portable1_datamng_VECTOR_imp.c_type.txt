typedef	O
struct	O
{	O
ESint32	int
capacity	int
;	O
ESint32	int
num_items	int
;	O
ESint32	int
size_items	int
;	O
EDMAT_BUFFER	struct
items	struct
;	O
EUint32	long
capacity_incr	long
;	O
}	O
DtVECTOR	struct
;	O
ESint32	int
EDMAPROC	O
VECTORaddPrS32	function
(	O
OBJID	int
IdObj	int
,	O
EPVoid	pointer
data	pointer
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
EPVoid	pointer
*	O
item	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	pointer
->	O
capacity	int
==	O
m	pointer
->	O
num_items	int
)	O
{	O
m	pointer
->	O
capacity	int
+=	O
m	pointer
->	O
capacity_incr	long
;	O
edma_buffer_realloc	function
(	O
&	O
m	pointer
->	O
items	struct
,	O
m	pointer
->	O
capacity	int
*	O
m	pointer
->	O
size_items	int
)	O
;	O
}	O
item	pointer
=	O
(	O
EPVoid	pointer
*	O
)	O
m	pointer
->	O
items	struct
.	O
dat	pointer
;	O
item	pointer
[	O
m	pointer
->	O
num_items	int
]	O
=	O
data	pointer
;	O
m	pointer
->	O
num_items	int
++	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORdelS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
indx	int
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
EPVoid	pointer
*	O
item	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
indx	int
<	O
0	int
)	O
||	O
(	O
indx	int
>	O
m	pointer
->	O
num_items	int
-	O
1	int
)	O
)	O
{	O
edma_printf_err	function
(	O
"[%s] Invalid index %d"	pointer
,	O
__FUNCTION__	O
,	O
indx	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
item	pointer
=	O
(	O
EPVoid	pointer
*	O
)	O
m	pointer
->	O
items	struct
.	O
dat	pointer
;	O
item	pointer
[	O
indx	int
]	O
=	O
NULL	O
;	O
memmove	function
(	O
&	O
item	pointer
[	O
indx	int
]	O
,	O
&	O
item	pointer
[	O
indx	int
+	O
1	int
]	O
,	O
(	O
m	pointer
->	O
num_items	int
-	O
indx	int
-	O
1	int
)	O
*	O
m	pointer
->	O
size_items	int
)	O
;	O
m	pointer
->	O
num_items	int
--	O
;	O
return	O
0	int
;	O
}	O
EPVoid	pointer
EDMAPROC	O
VECTORgetS32rP	function
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
indx	int
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
EPVoid	pointer
*	O
item	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
indx	int
<	O
0	int
)	O
||	O
(	O
indx	int
>	O
m	pointer
->	O
num_items	int
-	O
1	int
)	O
)	O
{	O
edma_printf_err	function
(	O
"[%s] Invalid index %d"	pointer
,	O
__FUNCTION__	O
,	O
indx	int
)	O
;	O
return	O
NULL	O
;	O
}	O
item	pointer
=	O
(	O
EPVoid	pointer
*	O
)	O
m	pointer
->	O
items	struct
.	O
dat	pointer
;	O
return	O
item	pointer
[	O
indx	int
]	O
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORsetS32PrS32	function
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
indx	int
,	O
EPVoid	pointer
data	pointer
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
EPVoid	pointer
*	O
item	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
indx	int
<	O
0	int
)	O
||	O
(	O
indx	int
>	O
m	pointer
->	O
num_items	int
-	O
1	int
)	O
)	O
{	O
edma_printf_err	function
(	O
"[%s] Invalid index %d"	pointer
,	O
__FUNCTION__	O
,	O
indx	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
item	pointer
=	O
(	O
EPVoid	pointer
*	O
)	O
m	pointer
->	O
items	struct
.	O
dat	pointer
;	O
item	pointer
[	O
indx	int
]	O
=	O
data	pointer
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORclear	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	pointer
->	O
num_items	int
==	O
0	int
)	O
{	O
edma_printf_err	function
(	O
"[%s] Vector is empty"	pointer
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
m	pointer
->	O
num_items	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORcreateS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
capacity_incr	long
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	pointer
->	O
capacity	int
!=	O
0	int
)	O
{	O
edma_printf_err	function
(	O
"[%s] Vector already initialised"	pointer
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
capacity_incr	long
<	O
0	int
)	O
{	O
edma_printf_err	function
(	O
"[%s] Invalid capacity value. Must be > 0"	pointer
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
m	pointer
->	O
capacity	int
=	O
m	pointer
->	O
capacity_incr	long
=	O
capacity_incr	long
;	O
edma_buffer_alloc	function
(	O
&	O
m	pointer
->	O
items	struct
,	O
m	pointer
->	O
size_items	int
*	O
m	pointer
->	O
capacity	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORget_n_itemsrS32	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
m	pointer
->	O
num_items	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORget_items_sizerS32	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
m	pointer
->	O
size_items	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORset_items_sizeU32rS32	function
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
size	int
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	pointer
->	O
num_items	int
!=	O
0	int
)	O
{	O
edma_printf_err	function
(	O
"[%s] Cannot change item size on a populated array"	pointer
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
m	pointer
->	O
size_items	int
=	O
size	int
;	O
if	O
(	O
m	pointer
->	O
capacity	int
!=	O
0	int
)	O
edma_buffer_realloc	function
(	O
&	O
m	pointer
->	O
items	struct
,	O
m	pointer
->	O
size_items	int
*	O
m	pointer
->	O
capacity	int
)	O
;	O
return	O
0	int
;	O
}	O
EDMAT_BUFFER	struct
EDMAPROC	O
VECTORget_itemsrA	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
m	pointer
->	O
items	struct
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORget_capacityrS32	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
return	O
m	pointer
->	O
capacity	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORset_capacityS32rS32	function
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
cap	int
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
cap	int
<	O
m	pointer
->	O
num_items	int
)	O
{	O
edma_printf_err	function
(	O
"[%s] Cannot reduce capacity beyond current vector size"	pointer
,	O
__FUNCTION__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
m	pointer
->	O
capacity	int
=	O
cap	int
;	O
edma_buffer_realloc	function
(	O
&	O
m	pointer
->	O
items	struct
,	O
m	pointer
->	O
size_items	int
*	O
m	pointer
->	O
capacity	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORborn	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
m	pointer
->	O
capacity	int
=	O
0	int
;	O
m	pointer
->	O
num_items	int
=	O
0	int
;	O
m	pointer
->	O
capacity_incr	long
=	O
10	int
;	O
m	pointer
->	O
size_items	int
=	O
sizeof	O
(	O
OBJID	int
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
VECTORrip	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtVECTOR	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtVECTOR	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_buffer_free	function
(	O
&	O
m	pointer
->	O
items	struct
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
VECTOR_class_factory	function
(	O
)	O
{	O
CLASSID	int
cid	int
;	O
cid	int
=	O
edma_idf_get_free_class_id	function
(	O
EDMA_LOCAL_CLASS	int
)	O
;	O
edma_idf_set_class_name	function
(	O
cid	int
,	O
"VECTOR"	pointer
)	O
;	O
edma_idf_set_class_namespace	function
(	O
cid	int
,	O
"system/data_structs"	pointer
)	O
;	O
edma_idf_set_class_version	function
(	O
cid	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_property	function
(	O
cid	int
,	O
"capacity"	pointer
,	O
DT_ESINT32	int
,	O
E_L	int
,	O
0	int
)	O
;	O
edma_add_local_class_property	function
(	O
cid	int
,	O
"num_items"	pointer
,	O
DT_ESINT32	int
,	O
E_L	int
,	O
0	int
)	O
;	O
edma_add_local_class_property	function
(	O
cid	int
,	O
"size_items"	pointer
,	O
DT_ESINT32	int
,	O
E_L	int
,	O
0	int
)	O
;	O
edma_add_local_class_property	function
(	O
cid	int
,	O
"items"	pointer
,	O
DT_EBUFFER	int
,	O
E_L	int
,	O
0	int
)	O
;	O
edma_add_local_class_property	function
(	O
cid	int
,	O
"capacity_incr"	pointer
,	O
DT_EUINT32	int
,	O
E_L	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"add"	pointer
,	O
"PrS32"	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORaddPrS32	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"del"	pointer
,	O
"S32rS32"	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORdelS32rS32	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"get"	pointer
,	O
"S32rP"	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORgetS32rP	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"set"	pointer
,	O
"S32PrS32"	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORsetS32PrS32	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"clear"	pointer
,	O
""	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORclear	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"create"	pointer
,	O
"S32rS32"	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORcreateS32rS32	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"get_n_items"	pointer
,	O
"rS32"	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORget_n_itemsrS32	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"get_items_size"	pointer
,	O
"rS32"	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORget_items_sizerS32	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"set_items_size"	pointer
,	O
"U32rS32"	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORset_items_sizeU32rS32	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"get_items"	pointer
,	O
"rA"	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORget_itemsrA	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"get_capacity"	pointer
,	O
"rS32"	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORget_capacityrS32	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_add_local_class_method	function
(	O
cid	int
,	O
"set_capacity"	pointer
,	O
"S32rS32"	pointer
,	O
(	O
PPROC	pointer
)	O
VECTORset_capacityS32rS32	function
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
edma_idf_set_class_id	function
(	O
cid	int
)	O
;	O
return	O
0	int
;	O
}	O
