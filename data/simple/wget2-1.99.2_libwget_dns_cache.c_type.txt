struct	O
cache_entry	struct
{	O
const	O
char	O
*	O
host	pointer
;	O
struct	O
addrinfo	struct
*	O
addrinfo	struct
;	O
uint16_t	short
port	short
;	O
}	O
;	O
struct	O
wget_dns_cache_st	struct
{	O
wget_hashmap	struct
*	O
cache	pointer
;	O
wget_thread_mutex	pointer
mutex	pointer
;	O
}	O
;	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	pointer
)	O
)	O
)	O
static	O
unsigned	O
int	O
WGET_GCC_PURE	O
_hash_dns	function
(	O
const	O
struct	O
cache_entry	struct
*	O
entry	pointer
)	O
{	O
unsigned	O
int	O
hash	pointer
=	O
entry	pointer
->	O
port	short
;	O
const	O
unsigned	O
char	O
*	O
p	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
entry	pointer
->	O
host	pointer
;	O
while	O
(	O
*	O
p	pointer
)	O
hash	pointer
=	O
hash	pointer
*	O
101	int
+	O
*	O
p	pointer
++	O
;	O
return	O
hash	pointer
;	O
}	O
static	O
int	O
WGET_GCC_PURE	O
_compare_dns	function
(	O
const	O
struct	O
cache_entry	struct
*	O
a1	pointer
,	O
const	O
struct	O
cache_entry	struct
*	O
a2	pointer
)	O
{	O
if	O
(	O
a1	pointer
->	O
port	short
<	O
a2	pointer
->	O
port	short
)	O
return	O
-	O
1	int
;	O
if	O
(	O
a1	pointer
->	O
port	short
>	O
a2	pointer
->	O
port	short
)	O
return	O
1	int
;	O
return	O
wget_strcasecmp	function
(	O
a1	pointer
->	O
host	pointer
,	O
a2	pointer
->	O
host	pointer
)	O
;	O
}	O
static	O
void	O
_free_dns	function
(	O
struct	O
cache_entry	struct
*	O
entry	pointer
)	O
{	O
freeaddrinfo	function
(	O
entry	pointer
->	O
addrinfo	struct
)	O
;	O
xfree	O
(	O
entry	pointer
)	O
;	O
}	O
int	O
wget_dns_cache_init	function
(	O
wget_dns_cache	struct
*	O
*	O
cache	pointer
)	O
{	O
wget_dns_cache	struct
*	O
_cache	pointer
=	O
wget_calloc	function
(	O
1	int
,	O
sizeof	O
(	O
wget_dns_cache	struct
)	O
)	O
;	O
if	O
(	O
!	O
_cache	pointer
)	O
return	O
WGET_E_MEMORY	int
;	O
if	O
(	O
wget_thread_mutex_init	function
(	O
&	O
_cache	pointer
->	O
mutex	pointer
)	O
)	O
{	O
xfree	O
(	O
_cache	pointer
)	O
;	O
return	O
WGET_E_INVALID	int
;	O
}	O
if	O
(	O
!	O
(	O
_cache	pointer
->	O
cache	pointer
=	O
wget_hashmap_create	function
(	O
16	int
,	O
(	O
wget_hashmap_hash_fn	function
*	O
)	O
_hash_dns	function
,	O
(	O
wget_hashmap_compare_fn	function
*	O
)	O
_compare_dns	function
)	O
)	O
)	O
{	O
wget_dns_cache_free	function
(	O
&	O
_cache	pointer
)	O
;	O
return	O
WGET_E_MEMORY	int
;	O
}	O
wget_hashmap_set_key_destructor	function
(	O
_cache	pointer
->	O
cache	pointer
,	O
(	O
wget_hashmap_key_destructor	function
*	O
)	O
_free_dns	function
)	O
;	O
wget_hashmap_set_value_destructor	function
(	O
_cache	pointer
->	O
cache	pointer
,	O
(	O
wget_hashmap_value_destructor	function
*	O
)	O
_free_dns	function
)	O
;	O
*	O
cache	pointer
=	O
_cache	pointer
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
void	O
wget_dns_cache_free	function
(	O
wget_dns_cache	struct
*	O
*	O
cache	pointer
)	O
{	O
if	O
(	O
cache	pointer
&&	O
*	O
cache	pointer
)	O
{	O
wget_thread_mutex_lock	function
(	O
(	O
*	O
cache	pointer
)	O
->	O
mutex	pointer
)	O
;	O
wget_hashmap_free	function
(	O
&	O
(	O
*	O
cache	pointer
)	O
->	O
cache	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
(	O
*	O
cache	pointer
)	O
->	O
mutex	pointer
)	O
;	O
wget_thread_mutex_destroy	function
(	O
&	O
(	O
*	O
cache	pointer
)	O
->	O
mutex	pointer
)	O
;	O
xfree	O
(	O
*	O
cache	pointer
)	O
;	O
}	O
}	O
struct	O
addrinfo	struct
*	O
wget_dns_cache_get	function
(	O
wget_dns_cache	struct
*	O
cache	pointer
,	O
const	O
char	O
*	O
host	pointer
,	O
uint16_t	short
port	short
)	O
{	O
if	O
(	O
cache	pointer
)	O
{	O
struct	O
cache_entry	struct
*	O
entryp	pointer
,	O
entry	pointer
=	O
{	O
.	O
host	pointer
=	O
host	pointer
,	O
.	O
port	short
=	O
port	short
}	O
;	O
wget_thread_mutex_lock	function
(	O
cache	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
!	O
wget_hashmap_get	function
(	O
cache	pointer
->	O
cache	pointer
,	O
&	O
entry	pointer
,	O
&	O
entryp	pointer
)	O
)	O
entryp	pointer
=	O
NULL	O
;	O
wget_thread_mutex_unlock	function
(	O
cache	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
entryp	pointer
)	O
{	O
debug_printf	O
(	O
"Found dns cache entry %s:%d\n"	pointer
,	O
entryp	pointer
->	O
host	pointer
,	O
entryp	pointer
->	O
port	short
)	O
;	O
return	O
entryp	pointer
->	O
addrinfo	struct
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
int	O
wget_dns_cache_add	function
(	O
wget_dns_cache	struct
*	O
cache	pointer
,	O
const	O
char	O
*	O
host	pointer
,	O
uint16_t	short
port	short
,	O
struct	O
addrinfo	struct
*	O
*	O
addrinfo	struct
)	O
{	O
if	O
(	O
!	O
cache	pointer
||	O
!	O
host	pointer
|	O
!	O
addrinfo	struct
)	O
return	O
WGET_E_INVALID	int
;	O
struct	O
cache_entry	struct
entry	pointer
=	O
{	O
.	O
host	pointer
=	O
host	pointer
,	O
.	O
port	short
=	O
port	short
}	O
;	O
struct	O
addrinfo	struct
*	O
ai	pointer
;	O
wget_thread_mutex_lock	function
(	O
cache	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
wget_hashmap_get	function
(	O
cache	pointer
->	O
cache	pointer
,	O
&	O
entry	pointer
,	O
&	O
ai	pointer
)	O
)	O
{	O
wget_thread_mutex_unlock	function
(	O
cache	pointer
->	O
mutex	pointer
)	O
;	O
if	O
(	O
*	O
addrinfo	struct
!=	O
ai	pointer
)	O
freeaddrinfo	function
(	O
*	O
addrinfo	struct
)	O
;	O
*	O
addrinfo	struct
=	O
ai	pointer
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
size_t	long
hostlen	long
=	O
strlen	function
(	O
host	pointer
)	O
+	O
1	int
;	O
struct	O
cache_entry	struct
*	O
entryp	pointer
=	O
wget_malloc	function
(	O
sizeof	O
(	O
struct	O
cache_entry	struct
)	O
+	O
hostlen	long
)	O
;	O
if	O
(	O
!	O
entryp	pointer
)	O
{	O
wget_thread_mutex_unlock	function
(	O
cache	pointer
->	O
mutex	pointer
)	O
;	O
return	O
WGET_E_MEMORY	int
;	O
}	O
entryp	pointer
->	O
port	short
=	O
port	short
;	O
entryp	pointer
->	O
host	pointer
=	O
(	O
(	O
char	O
*	O
)	O
entryp	pointer
)	O
+	O
sizeof	O
(	O
struct	O
cache_entry	struct
)	O
;	O
memcpy	function
(	O
(	O
char	O
*	O
)	O
entryp	pointer
->	O
host	pointer
,	O
host	pointer
,	O
hostlen	long
)	O
;	O
entryp	pointer
->	O
addrinfo	struct
=	O
*	O
addrinfo	struct
;	O
wget_hashmap_put	function
(	O
cache	pointer
->	O
cache	pointer
,	O
entryp	pointer
,	O
entryp	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
cache	pointer
->	O
mutex	pointer
)	O
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
