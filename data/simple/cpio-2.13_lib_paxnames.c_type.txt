static	O
size_t	long
hash_string_hasher	function
(	O
void	O
const	O
*	O
name	pointer
,	O
size_t	long
n_buckets	long
)	O
{	O
return	O
hash_string	function
(	O
name	pointer
,	O
n_buckets	long
)	O
;	O
}	O
static	O
bool	bool
hash_string_compare	function
(	O
void	O
const	O
*	O
name1	pointer
,	O
void	O
const	O
*	O
name2	pointer
)	O
{	O
return	O
strcmp	function
(	O
name1	pointer
,	O
name2	pointer
)	O
==	O
0	int
;	O
}	O
static	O
bool	bool
hash_string_insert_prefix	function
(	O
Hash_table	struct
*	O
*	O
table	pointer
,	O
char	O
const	O
*	O
string	pointer
,	O
size_t	long
len	long
,	O
const	O
char	O
*	O
*	O
return_prefix	pointer
)	O
{	O
Hash_table	struct
*	O
t	pointer
=	O
*	O
table	pointer
;	O
char	O
*	O
s	long
;	O
char	O
*	O
e	pointer
;	O
if	O
(	O
len	long
)	O
{	O
s	long
=	O
xmalloc	function
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
s	long
,	O
string	pointer
,	O
len	long
)	O
;	O
s	long
[	O
len	long
]	O
=	O
0	int
;	O
}	O
else	O
s	long
=	O
xstrdup	function
(	O
string	pointer
)	O
;	O
if	O
(	O
!	O
(	O
(	O
t	pointer
||	O
(	O
*	O
table	pointer
=	O
t	pointer
=	O
hash_initialize	function
(	O
0	int
,	O
0	int
,	O
hash_string_hasher	function
,	O
hash_string_compare	function
,	O
0	int
)	O
)	O
)	O
&&	O
(	O
e	pointer
=	O
hash_insert	function
(	O
t	pointer
,	O
s	long
)	O
)	O
)	O
)	O
xalloc_die	function
(	O
)	O
;	O
if	O
(	O
e	pointer
==	O
s	long
)	O
{	O
if	O
(	O
return_prefix	pointer
)	O
*	O
return_prefix	pointer
=	O
s	long
;	O
return	O
1	int
;	O
}	O
else	O
{	O
free	function
(	O
s	long
)	O
;	O
return	O
0	int
;	O
}	O
}	O
static	O
Hash_table	struct
*	O
prefix_table	array
[	O
2	int
]	O
;	O
bool	bool
removed_prefixes_p	function
(	O
void	O
)	O
{	O
return	O
(	O
prefix_table	array
[	O
0	int
]	O
&&	O
hash_get_n_entries	function
(	O
prefix_table	array
[	O
0	int
]	O
)	O
!=	O
0	int
)	O
||	O
(	O
prefix_table	array
[	O
1	int
]	O
&&	O
hash_get_n_entries	function
(	O
prefix_table	array
[	O
1	int
]	O
)	O
!=	O
0	int
)	O
;	O
}	O
char	O
*	O
safer_name_suffix	function
(	O
char	O
const	O
*	O
file_name	pointer
,	O
bool	bool
link_target	bool
,	O
bool	bool
absolute_names	bool
)	O
{	O
char	O
const	O
*	O
p	pointer
;	O
if	O
(	O
absolute_names	bool
)	O
p	pointer
=	O
file_name	pointer
;	O
else	O
{	O
size_t	long
prefix_len	long
=	O
FILE_SYSTEM_PREFIX_LEN	int
(	O
file_name	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
file_name	pointer
+	O
prefix_len	long
;	O
*	O
p	pointer
;	O
)	O
{	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
p	pointer
[	O
1	int
]	O
==	O
'.'	O
&&	O
(	O
ISSLASH	O
(	O
p	pointer
[	O
2	int
]	O
)	O
||	O
!	O
p	pointer
[	O
2	int
]	O
)	O
)	O
prefix_len	long
=	O
p	pointer
+	O
2	int
-	O
file_name	pointer
;	O
do	O
{	O
char	O
c	char
=	O
*	O
p	pointer
++	O
;	O
if	O
(	O
ISSLASH	O
(	O
c	char
)	O
)	O
break	O
;	O
}	O
while	O
(	O
*	O
p	pointer
)	O
;	O
}	O
for	O
(	O
p	pointer
=	O
file_name	pointer
+	O
prefix_len	long
;	O
ISSLASH	O
(	O
*	O
p	pointer
)	O
;	O
p	pointer
++	O
)	O
continue	O
;	O
prefix_len	long
=	O
p	pointer
-	O
file_name	pointer
;	O
if	O
(	O
prefix_len	long
)	O
{	O
const	O
char	O
*	O
prefix	pointer
;	O
if	O
(	O
hash_string_insert_prefix	function
(	O
&	O
prefix_table	array
[	O
link_target	bool
]	O
,	O
file_name	pointer
,	O
prefix_len	long
,	O
&	O
prefix	pointer
)	O
)	O
{	O
static	O
char	O
const	O
*	O
const	O
diagnostic	array
[	O
]	O
=	O
{	O
N_	O
(	O
"Removing leading `%s' from member names"	pointer
)	O
,	O
N_	O
(	O
"Removing leading `%s' from hard link targets"	pointer
)	O
}	O
;	O
WARN	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
diagnostic	array
[	O
link_target	bool
]	O
)	O
,	O
prefix	pointer
)	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
==	O
file_name	pointer
)	O
{	O
static	O
char	O
const	O
*	O
const	O
diagnostic	array
[	O
]	O
=	O
{	O
N_	O
(	O
"Substituting `.' for empty member name"	pointer
)	O
,	O
N_	O
(	O
"Substituting `.' for empty hard link target"	pointer
)	O
}	O
;	O
WARN	O
(	O
(	O
0	int
,	O
0	int
,	O
"%s"	pointer
,	O
_	O
(	O
diagnostic	array
[	O
link_target	bool
]	O
)	O
)	O
)	O
;	O
}	O
p	pointer
=	O
"."	pointer
;	O
}	O
return	O
(	O
char	O
*	O
)	O
p	pointer
;	O
}	O
