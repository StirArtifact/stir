static	O
int	O
DISPLAY_X	int
=	O
45	int
,	O
DISPLAY_Y	int
=	O
14	int
;	O
static	O
Dlg_head	struct
*	O
dd	pointer
;	O
static	O
WRadio	struct
*	O
my_radio	pointer
;	O
static	O
WInput	struct
*	O
user	pointer
;	O
static	O
WInput	struct
*	O
status	int
;	O
static	O
WCheck	struct
*	O
check_status	pointer
;	O
static	O
int	O
current_mode	int
;	O
static	O
char	O
*	O
*	O
displays_status	pointer
;	O
static	O
const	O
char	O
*	O
displays	array
[	O
LIST_TYPES	int
]	O
=	O
{	O
N_	O
(	O
"&Full file list"	pointer
)	O
,	O
N_	O
(	O
"&Brief file list"	pointer
)	O
,	O
N_	O
(	O
"&Long file list"	pointer
)	O
,	O
N_	O
(	O
"&User defined:"	pointer
)	O
}	O
;	O
static	O
int	O
user_hotkey	int
=	O
'u'	O
;	O
static	O
cb_ret_t	enum
display_callback	function
(	O
struct	O
Dlg_head	struct
*	O
h	pointer
,	O
dlg_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
DLG_UNFOCUS	int
:	O
if	O
(	O
dlg_widget_active	function
(	O
my_radio	pointer
)	O
)	O
{	O
assign_text	function
(	O
status	int
,	O
displays_status	pointer
[	O
my_radio	pointer
->	O
sel	int
]	O
)	O
;	O
input_set_point	function
(	O
status	int
,	O
0	int
)	O
;	O
}	O
return	O
MSG_HANDLED	int
;	O
case	O
DLG_KEY	int
:	O
if	O
(	O
parm	int
==	O
'\n'	O
)	O
{	O
if	O
(	O
dlg_widget_active	function
(	O
my_radio	pointer
)	O
)	O
{	O
assign_text	function
(	O
status	int
,	O
displays_status	pointer
[	O
my_radio	pointer
->	O
sel	int
]	O
)	O
;	O
dlg_stop	function
(	O
h	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
if	O
(	O
dlg_widget_active	function
(	O
user	pointer
)	O
)	O
{	O
h	pointer
->	O
ret_value	int
=	O
B_USER	int
+	O
6	int
;	O
dlg_stop	function
(	O
h	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
if	O
(	O
dlg_widget_active	function
(	O
status	int
)	O
)	O
{	O
h	pointer
->	O
ret_value	int
=	O
B_USER	int
+	O
7	int
;	O
dlg_stop	function
(	O
h	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
}	O
if	O
(	O
tolower	function
(	O
parm	int
)	O
==	O
user_hotkey	int
&&	O
dlg_widget_active	function
(	O
user	pointer
)	O
&&	O
dlg_widget_active	function
(	O
status	int
)	O
)	O
{	O
my_radio	pointer
->	O
sel	int
=	O
3	int
;	O
dlg_select_widget	function
(	O
my_radio	pointer
)	O
;	O
dlg_select_widget	function
(	O
user	pointer
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
return	O
MSG_NOT_HANDLED	int
;	O
default	O
:	O
return	O
default_dlg_callback	function
(	O
h	pointer
,	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
static	O
void	O
display_init	function
(	O
int	O
radio_sel	int
,	O
char	O
*	O
init_text	pointer
,	O
int	O
_check_status	int
,	O
char	O
*	O
*	O
_status	pointer
)	O
{	O
static	O
const	O
char	O
*	O
display_title	pointer
=	O
N_	O
(	O
"Listing mode"	pointer
)	O
;	O
static	O
int	O
i18n_displays_flag	int
;	O
const	O
char	O
*	O
user_mini_status	int
=	O
_	O
(	O
"user &Mini status"	pointer
)	O
;	O
const	O
char	O
*	O
ok_button	pointer
=	O
_	O
(	O
"&OK"	pointer
)	O
;	O
const	O
char	O
*	O
cancel_button	pointer
=	O
_	O
(	O
"&Cancel"	pointer
)	O
;	O
static	O
int	O
button_start	int
=	O
30	int
;	O
displays_status	pointer
=	O
_status	pointer
;	O
if	O
(	O
!	O
i18n_displays_flag	int
)	O
{	O
int	O
i	array
,	O
l	pointer
,	O
maxlen	int
=	O
0	int
;	O
const	O
char	O
*	O
cp	pointer
;	O
display_title	pointer
=	O
_	O
(	O
display_title	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
LIST_TYPES	int
;	O
i	array
++	O
)	O
{	O
displays	array
[	O
i	array
]	O
=	O
_	O
(	O
displays	array
[	O
i	array
]	O
)	O
;	O
if	O
(	O
(	O
l	pointer
=	O
strlen	function
(	O
displays	array
[	O
i	array
]	O
)	O
)	O
>	O
maxlen	int
)	O
maxlen	int
=	O
l	pointer
;	O
}	O
i	array
=	O
strlen	function
(	O
ok_button	pointer
)	O
+	O
5	int
;	O
l	pointer
=	O
strlen	function
(	O
cancel_button	pointer
)	O
+	O
3	int
;	O
l	pointer
=	O
max	long
(	O
i	array
,	O
l	pointer
)	O
;	O
i	array
=	O
maxlen	int
+	O
l	pointer
+	O
16	int
;	O
if	O
(	O
i	array
>	O
DISPLAY_X	int
)	O
DISPLAY_X	int
=	O
i	array
;	O
i	array
=	O
strlen	function
(	O
user_mini_status	int
)	O
+	O
13	int
;	O
if	O
(	O
i	array
>	O
DISPLAY_X	int
)	O
DISPLAY_X	int
=	O
i	array
;	O
i	array
=	O
strlen	function
(	O
display_title	pointer
)	O
+	O
10	int
;	O
if	O
(	O
i	array
>	O
DISPLAY_X	int
)	O
DISPLAY_X	int
=	O
i	array
;	O
button_start	int
=	O
DISPLAY_X	int
-	O
l	pointer
-	O
5	int
;	O
cp	pointer
=	O
strchr	function
(	O
displays	array
[	O
USER_TYPE	int
]	O
,	O
'&'	O
)	O
;	O
if	O
(	O
cp	pointer
!=	O
NULL	O
&&	O
*	O
++	O
cp	pointer
!=	O
'\0'	O
)	O
user_hotkey	int
=	O
tolower	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
cp	pointer
)	O
;	O
i18n_displays_flag	int
=	O
1	int
;	O
}	O
dd	pointer
=	O
create_dlg	function
(	O
0	int
,	O
0	int
,	O
DISPLAY_Y	int
,	O
DISPLAY_X	int
,	O
dialog_colors	array
,	O
display_callback	function
,	O
"[Listing Mode...]"	pointer
,	O
display_title	pointer
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
add_widget	function
(	O
dd	pointer
,	O
button_new	function
(	O
4	int
,	O
button_start	int
,	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
cancel_button	pointer
,	O
0	int
)	O
)	O
;	O
add_widget	function
(	O
dd	pointer
,	O
button_new	function
(	O
3	int
,	O
button_start	int
,	O
B_ENTER	int
,	O
DEFPUSH_BUTTON	int
,	O
ok_button	pointer
,	O
0	int
)	O
)	O
;	O
status	int
=	O
input_new	function
(	O
10	int
,	O
9	int
,	O
INPUT_COLOR	O
,	O
DISPLAY_X	int
-	O
14	int
,	O
_status	pointer
[	O
radio_sel	int
]	O
,	O
"mini-input"	pointer
)	O
;	O
add_widget	function
(	O
dd	pointer
,	O
status	int
)	O
;	O
input_set_point	function
(	O
status	int
,	O
0	int
)	O
;	O
check_status	pointer
=	O
check_new	function
(	O
9	int
,	O
5	int
,	O
_check_status	int
,	O
user_mini_status	int
)	O
;	O
add_widget	function
(	O
dd	pointer
,	O
check_status	pointer
)	O
;	O
user	pointer
=	O
input_new	function
(	O
7	int
,	O
9	int
,	O
INPUT_COLOR	O
,	O
DISPLAY_X	int
-	O
14	int
,	O
init_text	pointer
,	O
"user-fmt-input"	pointer
)	O
;	O
add_widget	function
(	O
dd	pointer
,	O
user	pointer
)	O
;	O
input_set_point	function
(	O
user	pointer
,	O
0	int
)	O
;	O
my_radio	pointer
=	O
radio_new	function
(	O
3	int
,	O
5	int
,	O
LIST_TYPES	int
,	O
displays	array
)	O
;	O
my_radio	pointer
->	O
sel	int
=	O
my_radio	pointer
->	O
pos	pointer
=	O
current_mode	int
;	O
add_widget	function
(	O
dd	pointer
,	O
my_radio	pointer
)	O
;	O
}	O
int	O
display_box	function
(	O
WPanel	struct
*	O
panel	pointer
,	O
char	O
*	O
*	O
userp	pointer
,	O
char	O
*	O
*	O
minip	pointer
,	O
int	O
*	O
use_msformat	pointer
,	O
int	O
num	int
)	O
{	O
int	O
result	long
,	O
i	array
;	O
char	O
*	O
section	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
panel	pointer
)	O
{	O
p	pointer
=	O
get_nth_panel_name	function
(	O
num	int
)	O
;	O
panel	pointer
=	O
g_new	O
(	O
WPanel	struct
,	O
1	int
)	O
;	O
panel	pointer
->	O
list_type	int
=	O
list_full	int
;	O
panel	pointer
->	O
user_format	pointer
=	O
g_strdup	function
(	O
DEFAULT_USER_FORMAT	pointer
)	O
;	O
panel	pointer
->	O
user_mini_status	int
=	O
0	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
LIST_TYPES	int
;	O
i	array
++	O
)	O
panel	pointer
->	O
user_status_format	array
[	O
i	array
]	O
=	O
g_strdup	function
(	O
DEFAULT_USER_FORMAT	pointer
)	O
;	O
section	pointer
=	O
g_strconcat	function
(	O
"Temporal:"	pointer
,	O
p	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
!	O
profile_has_section	function
(	O
section	pointer
,	O
profile_name	pointer
)	O
)	O
{	O
g_free	function
(	O
section	pointer
)	O
;	O
section	pointer
=	O
g_strdup	function
(	O
p	pointer
)	O
;	O
}	O
panel_load_setup	function
(	O
panel	pointer
,	O
section	pointer
)	O
;	O
g_free	function
(	O
section	pointer
)	O
;	O
}	O
current_mode	int
=	O
panel	pointer
->	O
list_type	int
;	O
display_init	function
(	O
current_mode	int
,	O
panel	pointer
->	O
user_format	pointer
,	O
panel	pointer
->	O
user_mini_status	int
,	O
panel	pointer
->	O
user_status_format	array
)	O
;	O
run_dlg	function
(	O
dd	pointer
)	O
;	O
result	long
=	O
-	O
1	int
;	O
if	O
(	O
section	pointer
)	O
{	O
g_free	function
(	O
panel	pointer
->	O
user_format	pointer
)	O
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
LIST_TYPES	int
;	O
i	array
++	O
)	O
g_free	function
(	O
panel	pointer
->	O
user_status_format	array
[	O
i	array
]	O
)	O
;	O
g_free	function
(	O
panel	pointer
)	O
;	O
}	O
if	O
(	O
dd	pointer
->	O
ret_value	int
!=	O
B_CANCEL	int
)	O
{	O
result	long
=	O
my_radio	pointer
->	O
sel	int
;	O
*	O
userp	pointer
=	O
g_strdup	function
(	O
user	pointer
->	O
buffer	pointer
)	O
;	O
*	O
minip	pointer
=	O
g_strdup	function
(	O
status	int
->	O
buffer	pointer
)	O
;	O
*	O
use_msformat	pointer
=	O
check_status	pointer
->	O
state	pointer
&	O
C_BOOL	int
;	O
}	O
destroy_dlg	function
(	O
dd	pointer
)	O
;	O
return	O
result	long
;	O
}	O
static	O
int	O
SORT_X	int
=	O
40	int
,	O
SORT_Y	int
=	O
14	int
;	O
static	O
const	O
char	O
*	O
sort_orders_names	array
[	O
SORT_TYPES	int
]	O
;	O
sortfn	function
*	O
sort_box	function
(	O
sortfn	function
*	O
sort_fn	pointer
,	O
int	O
*	O
reverse	int
,	O
int	O
*	O
case_sensitive	int
)	O
{	O
int	O
i	array
,	O
r	pointer
,	O
l	pointer
;	O
sortfn	function
*	O
result	long
;	O
WCheck	struct
*	O
c	int
,	O
*	O
case_sense	pointer
;	O
const	O
char	O
*	O
ok_button	pointer
=	O
_	O
(	O
"&OK"	pointer
)	O
;	O
const	O
char	O
*	O
cancel_button	pointer
=	O
_	O
(	O
"&Cancel"	pointer
)	O
;	O
const	O
char	O
*	O
reverse_label	pointer
=	O
_	O
(	O
"&Reverse"	pointer
)	O
;	O
const	O
char	O
*	O
case_label	pointer
=	O
_	O
(	O
"case sensi&tive"	pointer
)	O
;	O
const	O
char	O
*	O
sort_title	pointer
=	O
_	O
(	O
"Sort order"	pointer
)	O
;	O
static	O
int	O
i18n_sort_flag	int
=	O
0	int
,	O
check_pos	int
=	O
0	int
,	O
button_pos	int
=	O
0	int
;	O
if	O
(	O
!	O
i18n_sort_flag	int
)	O
{	O
int	O
maxlen	int
=	O
0	int
;	O
for	O
(	O
i	array
=	O
SORT_TYPES	int
-	O
1	int
;	O
i	array
>=	O
0	int
;	O
i	array
--	O
)	O
{	O
sort_orders_names	array
[	O
i	array
]	O
=	O
_	O
(	O
sort_orders	array
[	O
i	array
]	O
.	O
sort_name	function
)	O
;	O
r	pointer
=	O
strlen	function
(	O
sort_orders_names	array
[	O
i	array
]	O
)	O
;	O
if	O
(	O
r	pointer
>	O
maxlen	int
)	O
maxlen	int
=	O
r	pointer
;	O
}	O
check_pos	int
=	O
maxlen	int
+	O
9	int
;	O
r	pointer
=	O
strlen	function
(	O
reverse_label	pointer
)	O
+	O
4	int
;	O
i	array
=	O
strlen	function
(	O
case_label	pointer
)	O
+	O
4	int
;	O
if	O
(	O
i	array
>	O
r	pointer
)	O
r	pointer
=	O
i	array
;	O
l	pointer
=	O
strlen	function
(	O
ok_button	pointer
)	O
+	O
6	int
;	O
i	array
=	O
strlen	function
(	O
cancel_button	pointer
)	O
+	O
4	int
;	O
if	O
(	O
i	array
>	O
l	pointer
)	O
l	pointer
=	O
i	array
;	O
i	array
=	O
check_pos	int
+	O
max	long
(	O
r	pointer
,	O
l	pointer
)	O
+	O
2	int
;	O
if	O
(	O
i	array
>	O
SORT_X	int
)	O
SORT_X	int
=	O
i	array
;	O
i	array
=	O
strlen	function
(	O
sort_title	pointer
)	O
+	O
6	int
;	O
if	O
(	O
i	array
>	O
SORT_X	int
)	O
SORT_X	int
=	O
i	array
;	O
button_pos	int
=	O
SORT_X	int
-	O
l	pointer
-	O
2	int
;	O
i18n_sort_flag	int
=	O
1	int
;	O
}	O
result	long
=	O
0	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
SORT_TYPES	int
;	O
i	array
++	O
)	O
if	O
(	O
(	O
sortfn	function
*	O
)	O
(	O
sort_orders	array
[	O
i	array
]	O
.	O
sort_fn	pointer
)	O
==	O
sort_fn	pointer
)	O
{	O
current_mode	int
=	O
i	array
;	O
break	O
;	O
}	O
dd	pointer
=	O
create_dlg	function
(	O
0	int
,	O
0	int
,	O
SORT_Y	int
,	O
SORT_X	int
,	O
dialog_colors	array
,	O
NULL	O
,	O
"[Sort Order...]"	pointer
,	O
sort_title	pointer
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
add_widget	function
(	O
dd	pointer
,	O
button_new	function
(	O
10	int
,	O
button_pos	int
,	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
cancel_button	pointer
,	O
0	int
)	O
)	O
;	O
add_widget	function
(	O
dd	pointer
,	O
button_new	function
(	O
9	int
,	O
button_pos	int
,	O
B_ENTER	int
,	O
DEFPUSH_BUTTON	int
,	O
ok_button	pointer
,	O
0	int
)	O
)	O
;	O
case_sense	pointer
=	O
check_new	function
(	O
4	int
,	O
check_pos	int
,	O
*	O
case_sensitive	int
,	O
case_label	pointer
)	O
;	O
add_widget	function
(	O
dd	pointer
,	O
case_sense	pointer
)	O
;	O
c	int
=	O
check_new	function
(	O
3	int
,	O
check_pos	int
,	O
*	O
reverse	int
,	O
reverse_label	pointer
)	O
;	O
add_widget	function
(	O
dd	pointer
,	O
c	int
)	O
;	O
my_radio	pointer
=	O
radio_new	function
(	O
3	int
,	O
3	int
,	O
SORT_TYPES	int
,	O
sort_orders_names	array
)	O
;	O
my_radio	pointer
->	O
sel	int
=	O
my_radio	pointer
->	O
pos	pointer
=	O
current_mode	int
;	O
add_widget	function
(	O
dd	pointer
,	O
my_radio	pointer
)	O
;	O
run_dlg	function
(	O
dd	pointer
)	O
;	O
r	pointer
=	O
dd	pointer
->	O
ret_value	int
;	O
if	O
(	O
r	pointer
!=	O
B_CANCEL	int
)	O
{	O
result	long
=	O
(	O
sortfn	function
*	O
)	O
sort_orders	array
[	O
my_radio	pointer
->	O
sel	int
]	O
.	O
sort_fn	pointer
;	O
*	O
reverse	int
=	O
c	int
->	O
state	pointer
&	O
C_BOOL	int
;	O
*	O
case_sensitive	int
=	O
case_sense	pointer
->	O
state	pointer
&	O
C_BOOL	int
;	O
}	O
else	O
result	long
=	O
sort_fn	pointer
;	O
destroy_dlg	function
(	O
dd	pointer
)	O
;	O
return	O
result	long
;	O
}	O
static	O
int	O
my_delete	int
;	O
static	O
int	O
my_directory_hotlist_delete	int
;	O
static	O
int	O
my_overwrite	int
;	O
static	O
int	O
my_execute	int
;	O
static	O
int	O
my_exit	int
;	O
static	O
QuickWidget	struct
conf_widgets	array
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
4	int
,	O
6	int
,	O
4	int
,	O
CONFY	int
,	O
N_	O
(	O
"&Cancel"	pointer
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
4	int
,	O
6	int
,	O
3	int
,	O
CONFY	int
,	O
N_	O
(	O
"&OK"	pointer
)	O
,	O
0	int
,	O
B_ENTER	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
1	int
,	O
13	int
,	O
7	int
,	O
CONFY	int
,	O
N_	O
(	O
" confirm di&Rectory hotlist delete "	pointer
)	O
,	O
11	int
,	O
0	int
,	O
&	O
my_directory_hotlist_delete	int
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
1	int
,	O
13	int
,	O
6	int
,	O
CONFY	int
,	O
N_	O
(	O
" confirm &Exit "	pointer
)	O
,	O
9	int
,	O
0	int
,	O
&	O
my_exit	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
1	int
,	O
13	int
,	O
5	int
,	O
CONFY	int
,	O
N_	O
(	O
" confirm e&Xecute "	pointer
)	O
,	O
10	int
,	O
0	int
,	O
&	O
my_execute	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
1	int
,	O
13	int
,	O
4	int
,	O
CONFY	int
,	O
N_	O
(	O
" confirm o&Verwrite "	pointer
)	O
,	O
10	int
,	O
0	int
,	O
&	O
my_overwrite	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
1	int
,	O
13	int
,	O
3	int
,	O
CONFY	int
,	O
N_	O
(	O
" confirm &Delete "	pointer
)	O
,	O
9	int
,	O
0	int
,	O
&	O
my_delete	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
static	O
QuickDialog	struct
confirmation	struct
=	O
{	O
CONFX	int
,	O
CONFY	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
N_	O
(	O
" Confirmation "	pointer
)	O
,	O
"[Confirmation]"	pointer
,	O
conf_widgets	array
,	O
0	int
}	O
;	O
void	O
confirm_box	function
(	O
void	O
)	O
{	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
register	O
int	O
i	array
=	O
sizeof	O
(	O
conf_widgets	array
)	O
/	O
sizeof	O
(	O
QuickWidget	struct
)	O
-	O
1	int
;	O
int	O
l1	int
,	O
maxlen	int
=	O
0	int
;	O
while	O
(	O
i	array
--	O
)	O
{	O
conf_widgets	array
[	O
i	array
]	O
.	O
text	pointer
=	O
_	O
(	O
conf_widgets	array
[	O
i	array
]	O
.	O
text	pointer
)	O
;	O
l1	int
=	O
strlen	function
(	O
conf_widgets	array
[	O
i	array
]	O
.	O
text	pointer
)	O
+	O
3	int
;	O
if	O
(	O
l1	int
>	O
maxlen	int
)	O
maxlen	int
=	O
l1	int
;	O
}	O
confirmation	struct
.	O
xlen	int
=	O
(	O
maxlen	int
+	O
5	int
)	O
*	O
6	int
/	O
4	int
;	O
l1	int
=	O
strlen	function
(	O
conf_widgets	array
[	O
0	int
]	O
.	O
text	pointer
)	O
+	O
3	int
;	O
i	array
=	O
strlen	function
(	O
conf_widgets	array
[	O
1	int
]	O
.	O
text	pointer
)	O
+	O
5	int
;	O
if	O
(	O
i	array
>	O
l1	int
)	O
l1	int
=	O
i	array
;	O
i	array
=	O
(	O
l1	int
+	O
3	int
)	O
*	O
6	int
/	O
2	int
;	O
if	O
(	O
i	array
>	O
confirmation	struct
.	O
xlen	int
)	O
confirmation	struct
.	O
xlen	int
=	O
i	array
;	O
confirmation	struct
.	O
title	pointer
=	O
_	O
(	O
confirmation	struct
.	O
title	pointer
)	O
;	O
i18n_flag	int
=	O
confirmation	struct
.	O
i18n	int
=	O
1	int
;	O
}	O
my_delete	int
=	O
confirm_delete	int
;	O
my_overwrite	int
=	O
confirm_overwrite	int
;	O
my_execute	int
=	O
confirm_execute	int
;	O
my_exit	int
=	O
confirm_exit	int
;	O
my_directory_hotlist_delete	int
=	O
confirm_directory_hotlist_delete	int
;	O
if	O
(	O
quick_dialog	function
(	O
&	O
confirmation	struct
)	O
!=	O
B_CANCEL	int
)	O
{	O
confirm_delete	int
=	O
my_delete	int
;	O
confirm_overwrite	int
=	O
my_overwrite	int
;	O
confirm_execute	int
=	O
my_execute	int
;	O
confirm_exit	int
=	O
my_exit	int
;	O
confirm_directory_hotlist_delete	int
=	O
my_directory_hotlist_delete	int
;	O
}	O
}	O
static	O
int	O
new_mode	int
;	O
static	O
int	O
new_meta	int
;	O
static	O
const	O
char	O
*	O
display_bits_str	array
[	O
]	O
=	O
{	O
N_	O
(	O
"Full 8 bits output"	pointer
)	O
,	O
N_	O
(	O
"ISO 8859-1"	pointer
)	O
,	O
N_	O
(	O
"7 bits"	pointer
)	O
}	O
;	O
static	O
QuickWidget	struct
display_widgets	array
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
4	int
,	O
6	int
,	O
4	int
,	O
DISPY	int
,	O
N_	O
(	O
"&Cancel"	pointer
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
4	int
,	O
6	int
,	O
3	int
,	O
DISPY	int
,	O
N_	O
(	O
"&OK"	pointer
)	O
,	O
0	int
,	O
B_ENTER	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
4	int
,	O
DISPX	int
,	O
7	int
,	O
DISPY	int
,	O
N_	O
(	O
"F&ull 8 bits input"	pointer
)	O
,	O
0	int
,	O
0	int
,	O
&	O
new_meta	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_radio	int
,	O
4	int
,	O
DISPX	int
,	O
3	int
,	O
DISPY	int
,	O
""	pointer
,	O
3	int
,	O
0	int
,	O
&	O
new_mode	int
,	O
const_cast	O
(	O
char	O
*	O
*	O
,	O
display_bits_str	array
)	O
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
static	O
QuickDialog	struct
display_bits	struct
=	O
{	O
DISPX	int
,	O
DISPY	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
N_	O
(	O
" Display bits "	pointer
)	O
,	O
"[Display bits]"	pointer
,	O
display_widgets	array
,	O
0	int
}	O
;	O
void	O
display_bits_box	function
(	O
void	O
)	O
{	O
int	O
current_mode	int
;	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
register	O
int	O
i	array
;	O
int	O
l1	int
,	O
maxlen	int
=	O
0	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
3	int
;	O
i	array
++	O
)	O
{	O
display_widgets	array
[	O
i	array
]	O
.	O
text	pointer
=	O
_	O
(	O
display_widgets	array
[	O
i	array
]	O
.	O
text	pointer
)	O
;	O
display_bits_str	array
[	O
i	array
]	O
=	O
_	O
(	O
display_bits_str	array
[	O
i	array
]	O
)	O
;	O
l1	int
=	O
strlen	function
(	O
display_bits_str	array
[	O
i	array
]	O
)	O
;	O
if	O
(	O
l1	int
>	O
maxlen	int
)	O
maxlen	int
=	O
l1	int
;	O
}	O
l1	int
=	O
strlen	function
(	O
display_widgets	array
[	O
2	int
]	O
.	O
text	pointer
)	O
;	O
if	O
(	O
l1	int
>	O
maxlen	int
)	O
maxlen	int
=	O
l1	int
;	O
display_bits	struct
.	O
xlen	int
=	O
(	O
maxlen	int
+	O
5	int
)	O
*	O
6	int
/	O
4	int
;	O
l1	int
=	O
strlen	function
(	O
display_widgets	array
[	O
0	int
]	O
.	O
text	pointer
)	O
+	O
3	int
;	O
i	array
=	O
strlen	function
(	O
display_widgets	array
[	O
1	int
]	O
.	O
text	pointer
)	O
+	O
5	int
;	O
if	O
(	O
i	array
>	O
l1	int
)	O
l1	int
=	O
i	array
;	O
i	array
=	O
(	O
l1	int
+	O
3	int
)	O
*	O
6	int
/	O
2	int
;	O
if	O
(	O
i	array
>	O
display_bits	struct
.	O
xlen	int
)	O
display_bits	struct
.	O
xlen	int
=	O
i	array
;	O
display_bits	struct
.	O
title	pointer
=	O
_	O
(	O
display_bits	struct
.	O
title	pointer
)	O
;	O
i18n_flag	int
=	O
display_bits	struct
.	O
i18n	int
=	O
1	int
;	O
}	O
if	O
(	O
full_eight_bits	int
)	O
current_mode	int
=	O
0	int
;	O
else	O
if	O
(	O
eight_bit_clean	int
)	O
current_mode	int
=	O
1	int
;	O
else	O
current_mode	int
=	O
2	int
;	O
display_widgets	array
[	O
3	int
]	O
.	O
value	pointer
=	O
current_mode	int
;	O
new_meta	int
=	O
!	O
use_8th_bit_as_meta	int
;	O
if	O
(	O
quick_dialog	function
(	O
&	O
display_bits	struct
)	O
!=	O
B_ENTER	int
)	O
return	O
;	O
eight_bit_clean	int
=	O
new_mode	int
<	O
2	int
;	O
full_eight_bits	int
=	O
new_mode	int
==	O
0	int
;	O
SLsmg_Display_Eight_Bit	int
=	O
full_eight_bits	int
?	O
128	int
:	O
160	int
;	O
use_8th_bit_as_meta	int
=	O
!	O
new_meta	int
;	O
}	O
static	O
cb_ret_t	enum
tree_callback	function
(	O
struct	O
Dlg_head	struct
*	O
h	pointer
,	O
dlg_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
DLG_POST_KEY	int
:	O
if	O
(	O
parm	int
==	O
'\n'	O
)	O
{	O
h	pointer
->	O
ret_value	int
=	O
B_ENTER	int
;	O
dlg_stop	function
(	O
h	pointer
)	O
;	O
}	O
return	O
MSG_HANDLED	int
;	O
default	O
:	O
return	O
default_dlg_callback	function
(	O
h	pointer
,	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
char	O
*	O
tree_box	function
(	O
const	O
char	O
*	O
current_dir	pointer
)	O
{	O
WTree	struct
*	O
mytree	pointer
;	O
Dlg_head	struct
*	O
dlg	pointer
;	O
char	O
*	O
val	array
;	O
WButtonBar	struct
*	O
bar	pointer
;	O
dlg	pointer
=	O
create_dlg	function
(	O
0	int
,	O
0	int
,	O
TREE_Y	int
,	O
TREE_X	int
,	O
dialog_colors	array
,	O
tree_callback	function
,	O
"[Directory Tree]"	pointer
,	O
NULL	O
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
mytree	pointer
=	O
tree_new	function
(	O
0	int
,	O
2	int
,	O
2	int
,	O
TREE_Y	int
-	O
6	int
,	O
TREE_X	int
-	O
5	int
)	O
;	O
add_widget	function
(	O
dlg	pointer
,	O
mytree	pointer
)	O
;	O
bar	pointer
=	O
buttonbar_new	function
(	O
1	int
)	O
;	O
add_widget	function
(	O
dlg	pointer
,	O
bar	pointer
)	O
;	O
(	O
(	O
Widget	struct
*	O
)	O
bar	pointer
)	O
->	O
x	array
=	O
0	int
;	O
(	O
(	O
Widget	struct
*	O
)	O
bar	pointer
)	O
->	O
y	short
=	O
LINES	O
-	O
1	int
;	O
run_dlg	function
(	O
dlg	pointer
)	O
;	O
if	O
(	O
dlg	pointer
->	O
ret_value	int
==	O
B_ENTER	int
)	O
val	array
=	O
g_strdup	function
(	O
tree_selected_name	function
(	O
mytree	pointer
)	O
)	O
;	O
else	O
val	array
=	O
0	int
;	O
destroy_dlg	function
(	O
dlg	pointer
)	O
;	O
return	O
val	array
;	O
}	O
static	O
char	O
*	O
ret_timeout	pointer
;	O
static	O
char	O
*	O
ret_passwd	pointer
;	O
static	O
char	O
*	O
ret_directory_timeout	pointer
;	O
static	O
char	O
*	O
ret_ftp_proxy	pointer
;	O
static	O
int	O
ret_use_netrc	int
;	O
static	O
int	O
ret_ftpfs_use_passive_connections	int
;	O
static	O
int	O
ret_ftpfs_use_passive_connections_over_proxy	int
;	O
static	O
QuickWidget	struct
confvfs_widgets	array
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
30	int
,	O
VFSX	int
,	O
VFSY	int
-	O
3	int
,	O
VFSY	int
,	O
N_	O
(	O
"&Cancel"	pointer
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
12	int
,	O
VFSX	int
,	O
VFSY	int
-	O
3	int
,	O
VFSY	int
,	O
N_	O
(	O
"&OK"	pointer
)	O
,	O
0	int
,	O
B_ENTER	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
4	int
,	O
VFSX	int
,	O
12	int
,	O
VFSY	int
,	O
N_	O
(	O
"Use passive mode over pro&xy"	pointer
)	O
,	O
0	int
,	O
0	int
,	O
&	O
ret_ftpfs_use_passive_connections_over_proxy	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
4	int
,	O
VFSX	int
,	O
11	int
,	O
VFSY	int
,	O
N_	O
(	O
"Use &passive mode"	pointer
)	O
,	O
0	int
,	O
0	int
,	O
&	O
ret_ftpfs_use_passive_connections	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
4	int
,	O
VFSX	int
,	O
10	int
,	O
VFSY	int
,	O
N_	O
(	O
"&Use ~/.netrc"	pointer
)	O
,	O
0	int
,	O
0	int
,	O
&	O
ret_use_netrc	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
VFSX	int
,	O
9	int
,	O
VFSY	int
,	O
""	pointer
,	O
48	int
,	O
0	int
,	O
0	int
,	O
&	O
ret_ftp_proxy	pointer
,	O
"input-ftp-proxy"	pointer
}	O
,	O
{	O
quick_checkbox	int
,	O
4	int
,	O
VFSX	int
,	O
8	int
,	O
VFSY	int
,	O
N_	O
(	O
"&Always use ftp proxy"	pointer
)	O
,	O
0	int
,	O
0	int
,	O
&	O
ftpfs_always_use_proxy	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_label	int
,	O
49	int
,	O
VFSX	int
,	O
7	int
,	O
VFSY	int
,	O
N_	O
(	O
"sec"	pointer
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
38	int
,	O
VFSX	int
,	O
7	int
,	O
VFSY	int
,	O
""	pointer
,	O
10	int
,	O
0	int
,	O
0	int
,	O
&	O
ret_directory_timeout	pointer
,	O
"input-timeout"	pointer
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
VFSX	int
,	O
7	int
,	O
VFSY	int
,	O
N_	O
(	O
"ftpfs directory cache timeout:"	pointer
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
VFSX	int
,	O
6	int
,	O
VFSY	int
,	O
""	pointer
,	O
48	int
,	O
0	int
,	O
0	int
,	O
&	O
ret_passwd	pointer
,	O
"input-passwd"	pointer
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
VFSX	int
,	O
5	int
,	O
VFSY	int
,	O
N_	O
(	O
"ftp anonymous password:"	pointer
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_label	int
,	O
49	int
,	O
VFSX	int
,	O
3	int
,	O
VFSY	int
,	O
"sec"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
38	int
,	O
VFSX	int
,	O
3	int
,	O
VFSY	int
,	O
""	pointer
,	O
10	int
,	O
0	int
,	O
0	int
,	O
&	O
ret_timeout	pointer
,	O
"input-timo-vfs"	pointer
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
VFSX	int
,	O
3	int
,	O
VFSY	int
,	O
N_	O
(	O
"Timeout for freeing VFSs:"	pointer
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
static	O
QuickDialog	struct
confvfs_dlg	struct
=	O
{	O
VFSX	int
,	O
VFSY	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
N_	O
(	O
" Virtual File System Setting "	pointer
)	O
,	O
"[Virtual FS]"	pointer
,	O
confvfs_widgets	array
,	O
0	int
}	O
;	O
void	O
configure_vfs	function
(	O
void	O
)	O
{	O
char	O
buffer2	array
[	O
BUF_TINY	int
]	O
;	O
char	O
buffer3	array
[	O
BUF_TINY	int
]	O
;	O
ret_use_netrc	int
=	O
use_netrc	int
;	O
ret_ftpfs_use_passive_connections	int
=	O
ftpfs_use_passive_connections	int
;	O
ret_ftpfs_use_passive_connections_over_proxy	int
=	O
ftpfs_use_passive_connections_over_proxy	int
;	O
g_snprintf	function
(	O
buffer3	array
,	O
sizeof	O
(	O
buffer3	array
)	O
,	O
"%i"	pointer
,	O
ftpfs_directory_timeout	int
)	O
;	O
confvfs_widgets	array
[	O
8	int
]	O
.	O
text	pointer
=	O
buffer3	array
;	O
confvfs_widgets	array
[	O
10	int
]	O
.	O
text	pointer
=	O
ftpfs_anonymous_passwd	pointer
;	O
confvfs_widgets	array
[	O
5	int
]	O
.	O
text	pointer
=	O
ftpfs_proxy_host	pointer
;	O
g_snprintf	function
(	O
buffer2	array
,	O
sizeof	O
(	O
buffer2	array
)	O
,	O
"%i"	pointer
,	O
vfs_timeout	int
)	O
;	O
confvfs_widgets	array
[	O
3	int
+	O
VFS_WIDGETBASE	int
]	O
.	O
text	pointer
=	O
buffer2	array
;	O
if	O
(	O
quick_dialog	function
(	O
&	O
confvfs_dlg	struct
)	O
!=	O
B_CANCEL	int
)	O
{	O
vfs_timeout	int
=	O
atoi	function
(	O
ret_timeout	pointer
)	O
;	O
g_free	function
(	O
ret_timeout	pointer
)	O
;	O
if	O
(	O
vfs_timeout	int
<	O
0	int
||	O
vfs_timeout	int
>	O
10000	int
)	O
vfs_timeout	int
=	O
10	int
;	O
g_free	function
(	O
ftpfs_anonymous_passwd	pointer
)	O
;	O
ftpfs_anonymous_passwd	pointer
=	O
ret_passwd	pointer
;	O
g_free	function
(	O
ftpfs_proxy_host	pointer
)	O
;	O
ftpfs_proxy_host	pointer
=	O
ret_ftp_proxy	pointer
;	O
ftpfs_directory_timeout	int
=	O
atoi	function
(	O
ret_directory_timeout	pointer
)	O
;	O
use_netrc	int
=	O
ret_use_netrc	int
;	O
ftpfs_use_passive_connections	int
=	O
ret_ftpfs_use_passive_connections	int
;	O
ftpfs_use_passive_connections_over_proxy	int
=	O
ret_ftpfs_use_passive_connections_over_proxy	int
;	O
g_free	function
(	O
ret_directory_timeout	pointer
)	O
;	O
}	O
}	O
char	O
*	O
cd_dialog	function
(	O
void	O
)	O
{	O
QuickDialog	struct
Quick_input	struct
;	O
QuickWidget	struct
quick_widgets	array
[	O
]	O
=	O
{	O
{	O
quick_input	int
,	O
6	int
,	O
57	int
,	O
2	int
,	O
0	int
,	O
""	pointer
,	O
50	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input"	pointer
}	O
,	O
{	O
quick_label	int
,	O
3	int
,	O
57	int
,	O
2	int
,	O
0	int
,	O
""	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
char	O
*	O
my_str	pointer
;	O
int	O
len	int
;	O
Quick_input	struct
.	O
xlen	int
=	O
57	int
;	O
Quick_input	struct
.	O
title	pointer
=	O
_	O
(	O
"Quick cd"	pointer
)	O
;	O
Quick_input	struct
.	O
help	pointer
=	O
"[Quick cd]"	pointer
;	O
quick_widgets	array
[	O
0	int
]	O
.	O
value	pointer
=	O
2	int
;	O
quick_widgets	array
[	O
1	int
]	O
.	O
text	pointer
=	O
_	O
(	O
"cd"	pointer
)	O
;	O
quick_widgets	array
[	O
1	int
]	O
.	O
y_divisions	int
=	O
quick_widgets	array
[	O
0	int
]	O
.	O
y_divisions	int
=	O
Quick_input	struct
.	O
ylen	int
=	O
5	int
;	O
len	int
=	O
strlen	function
(	O
quick_widgets	array
[	O
1	int
]	O
.	O
text	pointer
)	O
;	O
quick_widgets	array
[	O
0	int
]	O
.	O
relative_x	int
=	O
quick_widgets	array
[	O
1	int
]	O
.	O
relative_x	int
+	O
len	int
+	O
1	int
;	O
Quick_input	struct
.	O
xlen	int
=	O
len	int
+	O
quick_widgets	array
[	O
0	int
]	O
.	O
hotkey_pos	int
+	O
7	int
;	O
quick_widgets	array
[	O
0	int
]	O
.	O
x_divisions	int
=	O
quick_widgets	array
[	O
1	int
]	O
.	O
x_divisions	int
=	O
Quick_input	struct
.	O
xlen	int
;	O
Quick_input	struct
.	O
i18n	int
=	O
1	int
;	O
Quick_input	struct
.	O
xpos	int
=	O
2	int
;	O
Quick_input	struct
.	O
ypos	int
=	O
LINES	O
-	O
2	int
-	O
Quick_input	struct
.	O
ylen	int
;	O
quick_widgets	array
[	O
0	int
]	O
.	O
str_result	pointer
=	O
&	O
my_str	pointer
;	O
Quick_input	struct
.	O
widgets	pointer
=	O
quick_widgets	array
;	O
if	O
(	O
quick_dialog	function
(	O
&	O
Quick_input	struct
)	O
!=	O
B_CANCEL	int
)	O
{	O
return	O
my_str	pointer
;	O
}	O
else	O
return	O
0	int
;	O
}	O
void	O
symlink_dialog	function
(	O
const	O
char	O
*	O
existing	pointer
,	O
const	O
char	O
*	O
new	pointer
,	O
char	O
*	O
*	O
ret_existing	pointer
,	O
char	O
*	O
*	O
ret_new	pointer
)	O
{	O
QuickDialog	struct
Quick_input	struct
;	O
QuickWidget	struct
quick_widgets	array
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
50	int
,	O
80	int
,	O
6	int
,	O
8	int
,	O
N_	O
(	O
"&Cancel"	pointer
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
16	int
,	O
80	int
,	O
6	int
,	O
8	int
,	O
N_	O
(	O
"&OK"	pointer
)	O
,	O
0	int
,	O
B_ENTER	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
5	int
,	O
8	int
,	O
""	pointer
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input-1"	pointer
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
80	int
,	O
4	int
,	O
8	int
,	O
N_	O
(	O
"Symbolic link filename:"	pointer
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
3	int
,	O
8	int
,	O
""	pointer
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input-2"	pointer
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
80	int
,	O
2	int
,	O
8	int
,	O
N_	O
(	O
"Existing filename (filename symlink will point to):"	pointer
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
Quick_input	struct
.	O
xlen	int
=	O
64	int
;	O
Quick_input	struct
.	O
ylen	int
=	O
12	int
;	O
Quick_input	struct
.	O
title	pointer
=	O
N_	O
(	O
"Symbolic link"	pointer
)	O
;	O
Quick_input	struct
.	O
help	pointer
=	O
"[File Menu]"	pointer
;	O
Quick_input	struct
.	O
i18n	int
=	O
0	int
;	O
quick_widgets	array
[	O
2	int
]	O
.	O
text	pointer
=	O
new	pointer
;	O
quick_widgets	array
[	O
4	int
]	O
.	O
text	pointer
=	O
existing	pointer
;	O
Quick_input	struct
.	O
xpos	int
=	O
-	O
1	int
;	O
quick_widgets	array
[	O
2	int
]	O
.	O
str_result	pointer
=	O
ret_new	pointer
;	O
quick_widgets	array
[	O
4	int
]	O
.	O
str_result	pointer
=	O
ret_existing	pointer
;	O
Quick_input	struct
.	O
widgets	pointer
=	O
quick_widgets	array
;	O
if	O
(	O
quick_dialog	function
(	O
&	O
Quick_input	struct
)	O
==	O
B_CANCEL	int
)	O
{	O
*	O
ret_new	pointer
=	O
NULL	O
;	O
*	O
ret_existing	pointer
=	O
NULL	O
;	O
}	O
}	O
static	O
int	O
JOBS_X	int
=	O
60	int
;	O
static	O
WListbox	struct
*	O
bg_list	pointer
;	O
static	O
Dlg_head	struct
*	O
jobs_dlg	pointer
;	O
static	O
void	O
jobs_fill_listbox	function
(	O
void	O
)	O
{	O
static	O
const	O
char	O
*	O
state_str	array
[	O
2	int
]	O
;	O
TaskList	struct
*	O
tl	pointer
=	O
task_list	pointer
;	O
if	O
(	O
!	O
state_str	array
[	O
0	int
]	O
)	O
{	O
state_str	array
[	O
0	int
]	O
=	O
_	O
(	O
"Running "	pointer
)	O
;	O
state_str	array
[	O
1	int
]	O
=	O
_	O
(	O
"Stopped"	pointer
)	O
;	O
}	O
while	O
(	O
tl	pointer
)	O
{	O
char	O
*	O
s	pointer
;	O
s	pointer
=	O
g_strconcat	function
(	O
state_str	array
[	O
tl	pointer
->	O
state	pointer
]	O
,	O
" "	pointer
,	O
tl	pointer
->	O
info	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
listbox_add_item	function
(	O
bg_list	pointer
,	O
LISTBOX_APPEND_AT_END	int
,	O
0	int
,	O
s	pointer
,	O
(	O
void	O
*	O
)	O
tl	pointer
)	O
;	O
g_free	function
(	O
s	pointer
)	O
;	O
tl	pointer
=	O
tl	pointer
->	O
next	pointer
;	O
}	O
}	O
static	O
int	O
task_cb	function
(	O
int	O
action	int
)	O
{	O
TaskList	struct
*	O
tl	pointer
;	O
int	O
sig	int
=	O
0	int
;	O
if	O
(	O
!	O
bg_list	pointer
->	O
list	pointer
)	O
return	O
0	int
;	O
tl	pointer
=	O
(	O
TaskList	struct
*	O
)	O
bg_list	pointer
->	O
current	pointer
->	O
data	pointer
;	O
if	O
(	O
action	int
==	O
B_STOP	O
)	O
{	O
sig	int
=	O
SIGSTOP	int
;	O
tl	pointer
->	O
state	pointer
=	O
Task_Stopped	int
;	O
}	O
else	O
if	O
(	O
action	int
==	O
B_RESUME	O
)	O
{	O
sig	int
=	O
SIGCONT	int
;	O
tl	pointer
->	O
state	pointer
=	O
Task_Running	int
;	O
}	O
else	O
if	O
(	O
action	int
==	O
B_KILL	O
)	O
{	O
sig	int
=	O
SIGKILL	int
;	O
}	O
if	O
(	O
sig	int
==	O
SIGINT	int
)	O
unregister_task_running	function
(	O
tl	pointer
->	O
pid	int
,	O
tl	pointer
->	O
fd	int
)	O
;	O
kill	function
(	O
tl	pointer
->	O
pid	int
,	O
sig	int
)	O
;	O
listbox_remove_list	function
(	O
bg_list	pointer
)	O
;	O
jobs_fill_listbox	function
(	O
)	O
;	O
dlg_redraw	function
(	O
jobs_dlg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
{	O
const	O
char	O
*	O
name	pointer
;	O
int	O
xpos	int
;	O
int	O
value	pointer
;	O
int	O
(	O
*	O
callback	pointer
)	O
(	O
int	O
)	O
;	O
}	O
job_buttons	array
[	O
]	O
=	O
{	O
{	O
N_	O
(	O
"&Stop"	pointer
)	O
,	O
3	int
,	O
B_STOP	O
,	O
task_cb	function
}	O
,	O
{	O
N_	O
(	O
"&Resume"	pointer
)	O
,	O
12	int
,	O
B_RESUME	O
,	O
task_cb	function
}	O
,	O
{	O
N_	O
(	O
"&Kill"	pointer
)	O
,	O
23	int
,	O
B_KILL	O
,	O
task_cb	function
}	O
,	O
{	O
N_	O
(	O
"&OK"	pointer
)	O
,	O
35	int
,	O
B_CANCEL	int
,	O
NULL	O
}	O
}	O
;	O
void	O
jobs_cmd	function
(	O
void	O
)	O
{	O
register	O
int	O
i	array
;	O
int	O
n_buttons	int
=	O
sizeof	O
(	O
job_buttons	array
)	O
/	O
sizeof	O
(	O
job_buttons	array
[	O
0	int
]	O
)	O
;	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
int	O
startx	int
=	O
job_buttons	array
[	O
0	int
]	O
.	O
xpos	int
;	O
int	O
len	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
n_buttons	int
;	O
i	array
++	O
)	O
{	O
job_buttons	array
[	O
i	array
]	O
.	O
name	pointer
=	O
_	O
(	O
job_buttons	array
[	O
i	array
]	O
.	O
name	pointer
)	O
;	O
len	int
=	O
strlen	function
(	O
job_buttons	array
[	O
i	array
]	O
.	O
name	pointer
)	O
+	O
4	int
;	O
JOBS_X	int
=	O
max	long
(	O
JOBS_X	int
,	O
startx	int
+	O
len	int
+	O
3	int
)	O
;	O
job_buttons	array
[	O
i	array
]	O
.	O
xpos	int
=	O
startx	int
;	O
startx	int
+=	O
len	int
;	O
}	O
job_buttons	array
[	O
n_buttons	int
-	O
1	int
]	O
.	O
xpos	int
=	O
JOBS_X	int
-	O
strlen	function
(	O
job_buttons	array
[	O
n_buttons	int
-	O
1	int
]	O
.	O
name	pointer
)	O
-	O
7	int
;	O
i18n_flag	int
=	O
1	int
;	O
}	O
jobs_dlg	pointer
=	O
create_dlg	function
(	O
0	int
,	O
0	int
,	O
JOBS_Y	int
,	O
JOBS_X	int
,	O
dialog_colors	array
,	O
NULL	O
,	O
"[Background jobs]"	pointer
,	O
_	O
(	O
"Background Jobs"	pointer
)	O
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
bg_list	pointer
=	O
listbox_new	function
(	O
2	int
,	O
3	int
,	O
JOBS_X	int
-	O
7	int
,	O
JOBS_Y	int
-	O
9	int
,	O
0	int
)	O
;	O
add_widget	function
(	O
jobs_dlg	pointer
,	O
bg_list	pointer
)	O
;	O
i	array
=	O
n_buttons	int
;	O
while	O
(	O
i	array
--	O
)	O
{	O
add_widget	function
(	O
jobs_dlg	pointer
,	O
button_new	function
(	O
JOBS_Y	int
-	O
4	int
,	O
job_buttons	array
[	O
i	array
]	O
.	O
xpos	int
,	O
job_buttons	array
[	O
i	array
]	O
.	O
value	pointer
,	O
NORMAL_BUTTON	int
,	O
job_buttons	array
[	O
i	array
]	O
.	O
name	pointer
,	O
job_buttons	array
[	O
i	array
]	O
.	O
callback	pointer
)	O
)	O
;	O
}	O
jobs_fill_listbox	function
(	O
)	O
;	O
run_dlg	function
(	O
jobs_dlg	pointer
)	O
;	O
destroy_dlg	function
(	O
jobs_dlg	pointer
)	O
;	O
}	O
