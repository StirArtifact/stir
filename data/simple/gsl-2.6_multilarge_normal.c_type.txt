typedef	O
struct	O
{	O
size_t	long
p	int
;	O
gsl_matrix	struct
*	O
ATA	pointer
;	O
gsl_vector	struct
*	O
ATb	pointer
;	O
double	O
normb	double
;	O
gsl_matrix	struct
*	O
work_ATA	pointer
;	O
gsl_vector	struct
*	O
workp	pointer
;	O
gsl_vector	struct
*	O
work3p	pointer
;	O
gsl_vector	struct
*	O
D	pointer
;	O
gsl_vector	struct
*	O
c	pointer
;	O
int	O
eigen	int
;	O
double	O
eval_min	double
;	O
double	O
eval_max	double
;	O
gsl_eigen_symm_workspace	struct
*	O
eigen_p	pointer
;	O
}	O
normal_state_t	struct
;	O
static	O
void	O
*	O
normal_alloc	function
(	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
normal_free	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
normal_reset	function
(	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
normal_accumulate	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
b	double
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
normal_solve	function
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct
*	O
x	double
,	O
double	O
*	O
rnorm	pointer
,	O
double	O
*	O
snorm	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
normal_rcond	function
(	O
double	O
*	O
rcond	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
normal_lcurve	function
(	O
gsl_vector	struct
*	O
reg_param	pointer
,	O
gsl_vector	struct
*	O
rho	pointer
,	O
gsl_vector	struct
*	O
eta	pointer
,	O
void	O
*	O
vstate	pointer
)	O
;	O
static	O
int	O
normal_solve_system	function
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct
*	O
x	double
,	O
normal_state_t	struct
*	O
state	pointer
)	O
;	O
static	O
int	O
normal_solve_cholesky	function
(	O
gsl_matrix	struct
*	O
ATA	pointer
,	O
const	O
gsl_vector	struct
*	O
ATb	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
normal_state_t	struct
*	O
state	pointer
)	O
;	O
static	O
int	O
normal_calc_norms	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
double	O
*	O
rnorm	pointer
,	O
double	O
*	O
snorm	pointer
,	O
normal_state_t	struct
*	O
state	pointer
)	O
;	O
static	O
int	O
normal_eigen	function
(	O
normal_state_t	struct
*	O
state	pointer
)	O
;	O
static	O
void	O
*	O
normal_alloc	function
(	O
const	O
size_t	long
p	int
)	O
{	O
normal_state_t	struct
*	O
state	pointer
;	O
if	O
(	O
p	int
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"p must be a positive integer"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
normal_state_t	struct
)	O
)	O
;	O
if	O
(	O
!	O
state	pointer
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate normal state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
p	int
=	O
p	int
;	O
state	pointer
->	O
ATA	pointer
=	O
gsl_matrix_alloc	function
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
ATA	pointer
==	O
NULL	O
)	O
{	O
normal_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate ATA matrix"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
work_ATA	pointer
=	O
gsl_matrix_alloc	function
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
work_ATA	pointer
==	O
NULL	O
)	O
{	O
normal_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate temporary ATA matrix"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
ATb	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
ATb	pointer
==	O
NULL	O
)	O
{	O
normal_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate ATb vector"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
D	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
D	pointer
==	O
NULL	O
)	O
{	O
normal_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate D vector"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
workp	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
==	O
NULL	O
)	O
{	O
normal_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate temporary ATb vector"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
work3p	pointer
=	O
gsl_vector_alloc	function
(	O
3	int
*	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
work3p	pointer
==	O
NULL	O
)	O
{	O
normal_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate work3p"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
c	pointer
=	O
gsl_vector_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
c	pointer
==	O
NULL	O
)	O
{	O
normal_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate c vector"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
eigen_p	pointer
=	O
gsl_eigen_symm_alloc	function
(	O
p	int
)	O
;	O
if	O
(	O
state	pointer
->	O
eigen_p	pointer
==	O
NULL	O
)	O
{	O
normal_free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate eigen workspace"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
normal_reset	function
(	O
state	pointer
)	O
;	O
return	O
state	pointer
;	O
}	O
static	O
void	O
normal_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
normal_state_t	struct
*	O
state	pointer
=	O
(	O
normal_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
state	pointer
->	O
ATA	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
ATA	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
work_ATA	pointer
)	O
gsl_matrix_free	function
(	O
state	pointer
->	O
work_ATA	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
ATb	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
ATb	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
D	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
D	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
workp	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
workp	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
work3p	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
work3p	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
c	pointer
)	O
gsl_vector_free	function
(	O
state	pointer
->	O
c	pointer
)	O
;	O
if	O
(	O
state	pointer
->	O
eigen_p	pointer
)	O
gsl_eigen_symm_free	function
(	O
state	pointer
->	O
eigen_p	pointer
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
int	O
normal_reset	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
normal_state_t	struct
*	O
state	pointer
=	O
(	O
normal_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_matrix_set_zero	function
(	O
state	pointer
->	O
ATA	pointer
)	O
;	O
gsl_vector_set_zero	function
(	O
state	pointer
->	O
ATb	pointer
)	O
;	O
state	pointer
->	O
normb	double
=	O
0.0	int
;	O
state	pointer
->	O
eigen	int
=	O
0	int
;	O
state	pointer
->	O
eval_min	double
=	O
0.0	int
;	O
state	pointer
->	O
eval_max	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
normal_accumulate	function
(	O
gsl_matrix	struct
*	O
A	pointer
,	O
gsl_vector	struct
*	O
b	double
,	O
void	O
*	O
vstate	pointer
)	O
{	O
normal_state_t	struct
*	O
state	pointer
=	O
(	O
normal_state_t	struct
*	O
)	O
vstate	pointer
;	O
const	O
size_t	long
n	int
=	O
A	pointer
->	O
size1	long
;	O
if	O
(	O
A	pointer
->	O
size2	long
!=	O
state	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"columns of A do not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
n	int
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"A and b have different numbers of rows"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	pointer
;	O
s	pointer
=	O
gsl_blas_dsyrk	function
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
1.0	int
,	O
A	pointer
,	O
1.0	int
,	O
state	pointer
->	O
ATA	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
return	O
s	pointer
;	O
s	pointer
=	O
gsl_blas_dgemv	function
(	O
CblasTrans	int
,	O
1.0	int
,	O
A	pointer
,	O
b	double
,	O
1.0	int
,	O
state	pointer
->	O
ATb	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
return	O
s	pointer
;	O
state	pointer
->	O
normb	double
=	O
gsl_hypot	function
(	O
state	pointer
->	O
normb	double
,	O
gsl_blas_dnrm2	function
(	O
b	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
normal_solve	function
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct
*	O
x	double
,	O
double	O
*	O
rnorm	pointer
,	O
double	O
*	O
snorm	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
normal_state_t	struct
*	O
state	pointer
=	O
(	O
normal_state_t	struct
*	O
)	O
vstate	pointer
;	O
if	O
(	O
x	double
->	O
size	long
!=	O
state	pointer
->	O
p	int
)	O
{	O
GSL_ERROR	O
(	O
"solution vector does not match workspace"	pointer
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
status	int
=	O
normal_solve_system	function
(	O
lambda	double
,	O
x	double
,	O
state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to solve normal equations"	pointer
,	O
status	int
)	O
;	O
}	O
normal_calc_norms	function
(	O
x	double
,	O
rnorm	pointer
,	O
snorm	pointer
,	O
state	pointer
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
normal_rcond	function
(	O
double	O
*	O
rcond	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
normal_state_t	struct
*	O
state	pointer
=	O
(	O
normal_state_t	struct
*	O
)	O
vstate	pointer
;	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
double	O
rcond_ATA	double
;	O
status	int
=	O
gsl_linalg_cholesky_rcond	function
(	O
state	pointer
->	O
work_ATA	pointer
,	O
&	O
rcond_ATA	double
,	O
state	pointer
->	O
work3p	pointer
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
*	O
rcond	pointer
=	O
sqrt	function
(	O
rcond_ATA	double
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
normal_lcurve	function
(	O
gsl_vector	struct
*	O
reg_param	pointer
,	O
gsl_vector	struct
*	O
rho	pointer
,	O
gsl_vector	struct
*	O
eta	pointer
,	O
void	O
*	O
vstate	pointer
)	O
{	O
normal_state_t	struct
*	O
state	pointer
=	O
(	O
normal_state_t	struct
*	O
)	O
vstate	pointer
;	O
int	O
status	int
;	O
double	O
smin	double
,	O
smax	double
;	O
size_t	long
i	long
;	O
if	O
(	O
state	pointer
->	O
eigen	int
==	O
0	int
)	O
{	O
status	int
=	O
normal_eigen	function
(	O
state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
if	O
(	O
state	pointer
->	O
eval_max	double
<	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix is not positive definite"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
smax	double
=	O
sqrt	function
(	O
state	pointer
->	O
eval_max	double
)	O
;	O
if	O
(	O
state	pointer
->	O
eval_min	double
>	O
0.0	int
)	O
smin	double
=	O
sqrt	function
(	O
state	pointer
->	O
eval_min	double
)	O
;	O
else	O
smin	double
=	O
0.0	int
;	O
gsl_multifit_linear_lreg	function
(	O
smin	double
,	O
smax	double
,	O
reg_param	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
reg_param	pointer
->	O
size	long
;	O
++	O
i	long
)	O
{	O
double	O
lambda	double
=	O
gsl_vector_get	function
(	O
reg_param	pointer
,	O
i	long
)	O
;	O
double	O
rnorm	pointer
,	O
snorm	pointer
;	O
status	int
=	O
normal_solve_system	function
(	O
lambda	double
,	O
state	pointer
->	O
c	pointer
,	O
state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
normal_calc_norms	function
(	O
state	pointer
->	O
c	pointer
,	O
&	O
rnorm	pointer
,	O
&	O
snorm	pointer
,	O
state	pointer
)	O
;	O
gsl_vector_set	function
(	O
rho	pointer
,	O
i	long
,	O
rnorm	pointer
)	O
;	O
gsl_vector_set	function
(	O
eta	pointer
,	O
i	long
,	O
snorm	pointer
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
normal_solve_system	function
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct
*	O
x	double
,	O
normal_state_t	struct
*	O
state	pointer
)	O
{	O
int	O
status	int
;	O
const	O
double	O
lambda_sq	double
=	O
lambda	double
*	O
lambda	double
;	O
gsl_vector_view	struct
d	pointer
=	O
gsl_matrix_diagonal	function
(	O
state	pointer
->	O
work_ATA	pointer
)	O
;	O
gsl_matrix_tricpy	function
(	O
CblasLower	int
,	O
CblasNonUnit	int
,	O
state	pointer
->	O
work_ATA	pointer
,	O
state	pointer
->	O
ATA	pointer
)	O
;	O
gsl_vector_add_constant	function
(	O
&	O
d	pointer
.	O
vector	struct
,	O
lambda_sq	double
)	O
;	O
status	int
=	O
normal_solve_cholesky	function
(	O
state	pointer
->	O
work_ATA	pointer
,	O
state	pointer
->	O
ATb	pointer
,	O
x	double
,	O
state	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
status	int
;	O
}	O
static	O
int	O
normal_solve_cholesky	function
(	O
gsl_matrix	struct
*	O
ATA	pointer
,	O
const	O
gsl_vector	struct
*	O
ATb	pointer
,	O
gsl_vector	struct
*	O
x	double
,	O
normal_state_t	struct
*	O
state	pointer
)	O
{	O
int	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_decomp2	function
(	O
ATA	pointer
,	O
state	pointer
->	O
D	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_cholesky_solve2	function
(	O
ATA	pointer
,	O
state	pointer
->	O
D	pointer
,	O
ATb	pointer
,	O
x	double
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
normal_calc_norms	function
(	O
const	O
gsl_vector	struct
*	O
x	double
,	O
double	O
*	O
rnorm	pointer
,	O
double	O
*	O
snorm	pointer
,	O
normal_state_t	struct
*	O
state	pointer
)	O
{	O
double	O
r2	double
;	O
*	O
snorm	pointer
=	O
gsl_blas_dnrm2	function
(	O
x	double
)	O
;	O
gsl_vector_memcpy	function
(	O
state	pointer
->	O
workp	pointer
,	O
state	pointer
->	O
ATb	pointer
)	O
;	O
gsl_blas_dsymv	function
(	O
CblasLower	int
,	O
1.0	int
,	O
state	pointer
->	O
ATA	pointer
,	O
x	double
,	O
-	O
2.0	int
,	O
state	pointer
->	O
workp	pointer
)	O
;	O
gsl_blas_ddot	function
(	O
x	double
,	O
state	pointer
->	O
workp	pointer
,	O
&	O
r2	double
)	O
;	O
r2	double
+=	O
state	pointer
->	O
normb	double
*	O
state	pointer
->	O
normb	double
;	O
*	O
rnorm	pointer
=	O
sqrt	function
(	O
r2	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
normal_eigen	function
(	O
normal_state_t	struct
*	O
state	pointer
)	O
{	O
int	O
status	int
;	O
gsl_matrix_tricpy	function
(	O
CblasLower	int
,	O
CblasNonUnit	int
,	O
state	pointer
->	O
work_ATA	pointer
,	O
state	pointer
->	O
ATA	pointer
)	O
;	O
status	int
=	O
gsl_eigen_symm	function
(	O
state	pointer
->	O
work_ATA	pointer
,	O
state	pointer
->	O
workp	pointer
,	O
state	pointer
->	O
eigen_p	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_vector_minmax	function
(	O
state	pointer
->	O
workp	pointer
,	O
&	O
state	pointer
->	O
eval_min	double
,	O
&	O
state	pointer
->	O
eval_max	double
)	O
;	O
state	pointer
->	O
eigen	int
=	O
1	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multilarge_linear_type	struct
normal_type	struct
=	O
{	O
"normal"	pointer
,	O
normal_alloc	function
,	O
normal_reset	function
,	O
normal_accumulate	function
,	O
normal_solve	function
,	O
normal_rcond	function
,	O
normal_lcurve	function
,	O
normal_free	function
}	O
;	O
const	O
gsl_multilarge_linear_type	struct
*	O
gsl_multilarge_linear_normal	pointer
=	O
&	O
normal_type	struct
;	O
