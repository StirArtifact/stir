struct	O
hash_list_st	struct
{	O
struct	O
hash_list_st	struct
*	O
next	pointer
;	O
char	O
*	O
key	pointer
;	O
int	O
keylen	int
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
typedef	O
struct	O
hash_list_st	struct
HashList	struct
;	O
typedef	O
HashList	struct
*	O
HashTable	pointer
;	O
typedef	O
struct	O
stringhash_st	struct
{	O
HashTable	pointer
*	O
hash_table	pointer
;	O
unsigned	O
int	O
next_idx	int
;	O
HashList	struct
*	O
next_item	pointer
;	O
}	O
*	O
hash_t	pointer
;	O
static	O
int	O
count_hash	function
___P	O
(	O
(	O
const	O
char	O
*	O
key	pointer
,	O
int	O
keylen	int
)	O
)	O
;	O
StringHashPtr	pointer
strhash_init	function
(	O
)	O
{	O
StringHashPtr	pointer
tmp	pointer
;	O
tmp	pointer
=	O
(	O
StringHashPtr	pointer
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
tmp	pointer
)	O
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
NULL	O
;	O
tmp	pointer
->	O
hash_table	pointer
=	O
(	O
HashTable	pointer
*	O
)	O
calloc	function
(	O
HASH_SIZE	int
,	O
sizeof	O
(	O
HashTable	pointer
)	O
)	O
;	O
if	O
(	O
!	O
tmp	pointer
->	O
hash_table	pointer
)	O
{	O
free	function
(	O
tmp	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
tmp	pointer
;	O
}	O
void	O
strhash_free	function
(	O
StringHashPtr	pointer
hash	pointer
)	O
{	O
HashList	struct
*	O
list	pointer
,	O
*	O
list_next	pointer
;	O
int	O
i	int
;	O
if	O
(	O
!	O
hash	pointer
)	O
return	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
HASH_SIZE	int
;	O
i	int
++	O
)	O
for	O
(	O
list	pointer
=	O
hash	pointer
->	O
hash_table	pointer
[	O
i	int
]	O
;	O
list	pointer
;	O
list	pointer
=	O
list_next	pointer
)	O
{	O
list_next	pointer
=	O
list	pointer
->	O
next	pointer
;	O
free	function
(	O
list	pointer
->	O
key	pointer
)	O
;	O
free	function
(	O
list	pointer
)	O
;	O
}	O
free	function
(	O
hash	pointer
->	O
hash_table	pointer
)	O
;	O
free	function
(	O
hash	pointer
)	O
;	O
}	O
int	O
strhash_put	function
(	O
StringHashPtr	pointer
hash	pointer
,	O
char	O
*	O
key	pointer
,	O
int	O
keylen	int
,	O
void	O
*	O
data	pointer
,	O
void	O
*	O
*	O
old_data	pointer
)	O
{	O
HashList	struct
*	O
list	pointer
,	O
*	O
prev	pointer
=	O
NULL	O
;	O
int	O
pos	int
,	O
cmp_val	int
;	O
if	O
(	O
!	O
hash	pointer
||	O
!	O
key	pointer
||	O
keylen	int
<=	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
old_data	pointer
)	O
*	O
old_data	pointer
=	O
NULL	O
;	O
pos	int
=	O
count_hash	function
(	O
key	pointer
,	O
keylen	int
)	O
;	O
for	O
(	O
list	pointer
=	O
hash	pointer
->	O
hash_table	pointer
[	O
pos	int
]	O
;	O
list	pointer
;	O
prev	pointer
=	O
list	pointer
,	O
list	pointer
=	O
list	pointer
->	O
next	pointer
)	O
if	O
(	O
list	pointer
->	O
keylen	int
==	O
keylen	int
)	O
{	O
cmp_val	int
=	O
memcmp	function
(	O
key	pointer
,	O
list	pointer
->	O
key	pointer
,	O
keylen	int
)	O
;	O
if	O
(	O
cmp_val	int
==	O
0	int
)	O
{	O
if	O
(	O
old_data	pointer
)	O
*	O
old_data	pointer
=	O
list	pointer
->	O
data	pointer
;	O
list	pointer
->	O
data	pointer
=	O
data	pointer
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_val	int
<	O
0	int
)	O
{	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
list	pointer
->	O
keylen	int
>	O
keylen	int
)	O
break	O
;	O
list	pointer
=	O
(	O
HashList	struct
*	O
)	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
HashList	struct
)	O
)	O
;	O
if	O
(	O
!	O
list	pointer
)	O
return	O
0	int
;	O
list	pointer
->	O
key	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
keylen	int
)	O
;	O
if	O
(	O
!	O
list	pointer
->	O
key	pointer
)	O
{	O
free	function
(	O
list	pointer
)	O
;	O
return	O
0	int
;	O
}	O
memcpy	function
(	O
list	pointer
->	O
key	pointer
,	O
key	pointer
,	O
keylen	int
)	O
;	O
list	pointer
->	O
keylen	int
=	O
keylen	int
;	O
list	pointer
->	O
data	pointer
=	O
data	pointer
;	O
if	O
(	O
!	O
prev	pointer
)	O
{	O
list	pointer
->	O
next	pointer
=	O
hash	pointer
->	O
hash_table	pointer
[	O
pos	int
]	O
;	O
hash	pointer
->	O
hash_table	pointer
[	O
pos	int
]	O
=	O
list	pointer
;	O
}	O
else	O
{	O
list	pointer
->	O
next	pointer
=	O
prev	pointer
->	O
next	pointer
;	O
prev	pointer
->	O
next	pointer
=	O
list	pointer
;	O
}	O
return	O
1	int
;	O
}	O
int	O
strhash_get	function
(	O
StringHashPtr	pointer
hash	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
int	O
keylen	int
,	O
void	O
*	O
*	O
data	pointer
)	O
{	O
HashList	struct
*	O
list	pointer
;	O
int	O
pos	int
,	O
cmp_val	int
;	O
if	O
(	O
!	O
hash	pointer
||	O
!	O
key	pointer
||	O
keylen	int
<=	O
0	int
||	O
!	O
data	pointer
)	O
return	O
0	int
;	O
*	O
data	pointer
=	O
NULL	O
;	O
pos	int
=	O
count_hash	function
(	O
key	pointer
,	O
keylen	int
)	O
;	O
for	O
(	O
list	pointer
=	O
hash	pointer
->	O
hash_table	pointer
[	O
pos	int
]	O
;	O
list	pointer
;	O
list	pointer
=	O
list	pointer
->	O
next	pointer
)	O
if	O
(	O
list	pointer
->	O
keylen	int
==	O
keylen	int
)	O
{	O
cmp_val	int
=	O
memcmp	function
(	O
key	pointer
,	O
list	pointer
->	O
key	pointer
,	O
keylen	int
)	O
;	O
if	O
(	O
cmp_val	int
==	O
0	int
)	O
{	O
*	O
data	pointer
=	O
list	pointer
->	O
data	pointer
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_val	int
<	O
0	int
)	O
break	O
;	O
}	O
else	O
if	O
(	O
list	pointer
->	O
keylen	int
>	O
keylen	int
)	O
break	O
;	O
return	O
0	int
;	O
}	O
int	O
strhash_delete	function
(	O
StringHashPtr	pointer
hash	pointer
,	O
const	O
char	O
*	O
key	pointer
,	O
int	O
keylen	int
,	O
void	O
*	O
*	O
data	pointer
)	O
{	O
HashList	struct
*	O
list	pointer
,	O
*	O
prev	pointer
=	O
NULL	O
;	O
int	O
pos	int
,	O
cmp_val	int
;	O
if	O
(	O
!	O
hash	pointer
||	O
!	O
key	pointer
||	O
keylen	int
<=	O
0	int
||	O
!	O
data	pointer
)	O
return	O
0	int
;	O
*	O
data	pointer
=	O
NULL	O
;	O
pos	int
=	O
count_hash	function
(	O
key	pointer
,	O
keylen	int
)	O
;	O
for	O
(	O
list	pointer
=	O
hash	pointer
->	O
hash_table	pointer
[	O
pos	int
]	O
;	O
list	pointer
;	O
prev	pointer
=	O
list	pointer
,	O
list	pointer
=	O
list	pointer
->	O
next	pointer
)	O
if	O
(	O
list	pointer
->	O
keylen	int
==	O
keylen	int
)	O
{	O
cmp_val	int
=	O
memcmp	function
(	O
key	pointer
,	O
list	pointer
->	O
key	pointer
,	O
keylen	int
)	O
;	O
if	O
(	O
cmp_val	int
==	O
0	int
)	O
{	O
if	O
(	O
prev	pointer
==	O
NULL	O
)	O
hash	pointer
->	O
hash_table	pointer
[	O
pos	int
]	O
=	O
list	pointer
->	O
next	pointer
;	O
else	O
prev	pointer
->	O
next	pointer
=	O
list	pointer
->	O
next	pointer
;	O
*	O
data	pointer
=	O
list	pointer
->	O
data	pointer
;	O
free	function
(	O
list	pointer
->	O
key	pointer
)	O
;	O
free	function
(	O
list	pointer
)	O
;	O
hash	pointer
->	O
next_idx	int
=	O
0	int
;	O
hash	pointer
->	O
next_item	pointer
=	O
NULL	O
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_val	int
<	O
0	int
)	O
break	O
;	O
}	O
else	O
if	O
(	O
list	pointer
->	O
keylen	int
>	O
keylen	int
)	O
break	O
;	O
return	O
0	int
;	O
}	O
int	O
strhash_get_first	function
(	O
StringHashPtr	pointer
hash	pointer
,	O
char	O
*	O
*	O
key_return	pointer
,	O
int	O
*	O
keylen_return	pointer
,	O
void	O
*	O
*	O
data_return	pointer
)	O
{	O
if	O
(	O
!	O
hash	pointer
||	O
!	O
key_return	pointer
||	O
!	O
keylen_return	pointer
||	O
!	O
data_return	pointer
)	O
return	O
0	int
;	O
for	O
(	O
hash	pointer
->	O
next_idx	int
=	O
0	int
;	O
hash	pointer
->	O
next_idx	int
<	O
HASH_SIZE	int
;	O
hash	pointer
->	O
next_idx	int
++	O
)	O
{	O
hash	pointer
->	O
next_item	pointer
=	O
hash	pointer
->	O
hash_table	pointer
[	O
hash	pointer
->	O
next_idx	int
]	O
;	O
if	O
(	O
hash	pointer
->	O
next_item	pointer
)	O
{	O
*	O
key_return	pointer
=	O
hash	pointer
->	O
next_item	pointer
->	O
key	pointer
;	O
*	O
keylen_return	pointer
=	O
hash	pointer
->	O
next_item	pointer
->	O
keylen	int
;	O
*	O
data_return	pointer
=	O
hash	pointer
->	O
next_item	pointer
->	O
data	pointer
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
strhash_get_next	function
(	O
StringHashPtr	pointer
hash	pointer
,	O
char	O
*	O
*	O
key_return	pointer
,	O
int	O
*	O
keylen_return	pointer
,	O
void	O
*	O
*	O
data_return	pointer
)	O
{	O
if	O
(	O
!	O
hash	pointer
||	O
!	O
key_return	pointer
||	O
!	O
keylen_return	pointer
||	O
!	O
data_return	pointer
)	O
return	O
0	int
;	O
for	O
(	O
;	O
hash	pointer
->	O
next_idx	int
<	O
HASH_SIZE	int
;	O
hash	pointer
->	O
next_idx	int
++	O
)	O
{	O
if	O
(	O
hash	pointer
->	O
next_item	pointer
==	O
NULL	O
)	O
hash	pointer
->	O
next_item	pointer
=	O
hash	pointer
->	O
hash_table	pointer
[	O
hash	pointer
->	O
next_idx	int
]	O
;	O
else	O
hash	pointer
->	O
next_item	pointer
=	O
hash	pointer
->	O
next_item	pointer
->	O
next	pointer
;	O
if	O
(	O
hash	pointer
->	O
next_item	pointer
)	O
{	O
*	O
key_return	pointer
=	O
hash	pointer
->	O
next_item	pointer
->	O
key	pointer
;	O
*	O
keylen_return	pointer
=	O
hash	pointer
->	O
next_item	pointer
->	O
keylen	int
;	O
*	O
data_return	pointer
=	O
hash	pointer
->	O
next_item	pointer
->	O
data	pointer
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
count_hash	function
(	O
const	O
char	O
*	O
key	pointer
,	O
int	O
keylen	int
)	O
{	O
unsigned	O
int	O
val	array
=	O
0	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
keylen	int
;	O
i	int
++	O
)	O
val	array
=	O
(	O
val	array
<<	O
5	int
)	O
^	O
(	O
unsigned	O
char	O
)	O
key	pointer
[	O
i	int
]	O
^	O
(	O
val	array
>>	O
16	int
)	O
^	O
(	O
val	array
>>	O
7	int
)	O
;	O
return	O
val	array
%	O
HASH_SIZE	int
;	O
}	O
