static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: db_err.c,v 1.3 2000/06/28 16:47:00 loic Exp $"	pointer
;	O
static	O
void	O
__db_errcall	function
__P	O
(	O
(	O
const	O
DB_ENV	struct
*	O
,	O
int	O
,	O
int	O
,	O
const	O
char	O
*	O
,	O
va_list	array
)	O
)	O
;	O
static	O
void	O
__db_errfile	function
__P	O
(	O
(	O
const	O
DB_ENV	struct
*	O
,	O
int	O
,	O
int	O
,	O
const	O
char	O
*	O
,	O
va_list	array
)	O
)	O
;	O
int	O
CDB___db_fchk	function
(	O
dbenv	pointer
,	O
name	pointer
,	O
flags	int
,	O
ok_flags	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
u_int32_t	int
flags	int
,	O
ok_flags	int
;	O
{	O
return	O
(	O
LF_ISSET	O
(	O
~	O
ok_flags	int
)	O
?	O
CDB___db_ferr	function
(	O
dbenv	pointer
,	O
name	pointer
,	O
0	int
)	O
:	O
0	int
)	O
;	O
}	O
int	O
CDB___db_fcchk	function
(	O
dbenv	pointer
,	O
name	pointer
,	O
flags	int
,	O
flag1	int
,	O
flag2	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
u_int32_t	int
flags	int
,	O
flag1	int
,	O
flag2	int
;	O
{	O
return	O
(	O
LF_ISSET	O
(	O
flag1	int
)	O
&&	O
LF_ISSET	O
(	O
flag2	int
)	O
?	O
CDB___db_ferr	function
(	O
dbenv	pointer
,	O
name	pointer
,	O
1	int
)	O
:	O
0	int
)	O
;	O
}	O
int	O
CDB___db_ferr	function
(	O
dbenv	pointer
,	O
name	pointer
,	O
iscombo	int
)	O
const	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
const	O
char	O
*	O
name	pointer
;	O
int	O
iscombo	int
;	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"illegal flag %sspecified to %s"	pointer
,	O
iscombo	int
?	O
"combination "	pointer
:	O
""	pointer
,	O
name	pointer
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
int	O
CDB___db_pgerr	function
(	O
dbp	pointer
,	O
pgno	int
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
{	O
CDB___db_err	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"unable to create/retrieve page %lu"	pointer
,	O
(	O
u_long	long
)	O
pgno	int
)	O
;	O
return	O
(	O
CDB___db_panic	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
EIO	int
)	O
)	O
;	O
}	O
int	O
CDB___db_pgfmt	function
(	O
dbp	pointer
,	O
pgno	int
)	O
DB	struct
*	O
dbp	pointer
;	O
db_pgno_t	int
pgno	int
;	O
{	O
CDB___db_err	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"page %lu: illegal page type or format"	pointer
,	O
(	O
u_long	long
)	O
pgno	int
)	O
;	O
return	O
(	O
CDB___db_panic	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
EINVAL	int
)	O
)	O
;	O
}	O
int	O
CDB___db_eopnotsup	function
(	O
dbenv	pointer
)	O
const	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"operation not supported"	pointer
)	O
;	O
return	O
(	O
EOPNOTSUPP	int
)	O
;	O
}	O
int	O
CDB___db_panic_msg	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"region error detected; run recovery."	pointer
)	O
;	O
return	O
(	O
DB_RUNRECOVERY	O
)	O
;	O
}	O
int	O
CDB___db_panic	function
(	O
dbenv	pointer
,	O
errval	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int	O
errval	int
;	O
{	O
DB_ASSERT	O
(	O
0	int
)	O
;	O
if	O
(	O
dbenv	pointer
!=	O
NULL	O
)	O
{	O
(	O
(	O
REGENV	struct
*	O
)	O
(	O
(	O
REGINFO	struct
*	O
)	O
dbenv	pointer
->	O
reginfo	pointer
)	O
->	O
addr	pointer
)	O
->	O
panic	int
=	O
1	int
;	O
dbenv	pointer
->	O
db_panic	int
=	O
errval	int
;	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"PANIC: %s"	pointer
,	O
CDB_db_strerror	function
(	O
errval	int
)	O
)	O
;	O
if	O
(	O
dbenv	pointer
->	O
db_paniccall	pointer
!=	O
NULL	O
)	O
dbenv	pointer
->	O
db_paniccall	pointer
(	O
dbenv	pointer
,	O
errval	int
)	O
;	O
}	O
return	O
(	O
DB_RUNRECOVERY	O
)	O
;	O
}	O
char	O
*	O
CDB_db_strerror	function
(	O
error	int
)	O
int	O
error	int
;	O
{	O
if	O
(	O
error	int
==	O
0	int
)	O
return	O
(	O
"Successful return: 0"	pointer
)	O
;	O
if	O
(	O
error	int
>	O
0	int
)	O
return	O
(	O
strerror	function
(	O
error	int
)	O
)	O
;	O
switch	O
(	O
error	int
)	O
{	O
case	O
DB_INCOMPLETE	O
:	O
return	O
(	O
"DB_INCOMPLETE: Cache flush was unable to complete"	pointer
)	O
;	O
case	O
DB_KEYEMPTY	O
:	O
return	O
(	O
"DB_KEYEMPTY: Non-existent key/data pair"	pointer
)	O
;	O
case	O
DB_KEYEXIST	O
:	O
return	O
(	O
"DB_KEYEXIST: Key/data pair already exists"	pointer
)	O
;	O
case	O
DB_LOCK_DEADLOCK	O
:	O
return	O
(	O
"DB_LOCK_DEADLOCK: Locker killed to resolve a deadlock"	pointer
)	O
;	O
case	O
DB_LOCK_NOTGRANTED	O
:	O
return	O
(	O
"DB_LOCK_NOTGRANTED: Lock not granted"	pointer
)	O
;	O
case	O
DB_NOSERVER	O
:	O
return	O
(	O
"DB_NOSERVER: Fatal error, no server"	pointer
)	O
;	O
case	O
DB_NOSERVER_HOME	O
:	O
return	O
(	O
"DB_NOSERVER_HOME: Home unrecognized at server"	pointer
)	O
;	O
case	O
DB_NOSERVER_ID	O
:	O
return	O
(	O
"DB_NOSERVER_ID: Identifier unrecognized at server"	pointer
)	O
;	O
case	O
DB_NOTFOUND	O
:	O
return	O
(	O
"DB_NOTFOUND: No matching key/data pair found"	pointer
)	O
;	O
case	O
DB_OLD_VERSION	O
:	O
return	O
(	O
"DB_OLDVERSION: Database requires a version upgrade"	pointer
)	O
;	O
case	O
DB_RUNRECOVERY	O
:	O
return	O
(	O
"DB_RUNRECOVERY: Fatal error, run database recovery"	pointer
)	O
;	O
case	O
DB_VERIFY_BAD	O
:	O
return	O
(	O
"DB_VERIFY_BAD: Database verification failed"	pointer
)	O
;	O
default	O
:	O
{	O
static	O
char	O
ebuf	array
[	O
40	int
]	O
;	O
(	O
void	O
)	O
snprintf	function
(	O
ebuf	array
,	O
sizeof	O
(	O
ebuf	array
)	O
,	O
"Unknown error: %d"	pointer
,	O
error	int
)	O
;	O
return	O
(	O
ebuf	array
)	O
;	O
}	O
}	O
}	O
void	O
CDB___db_err	function
(	O
const	O
DB_ENV	struct
*	O
dbenv	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
CDB___db_real_err	function
(	O
dbenv	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
CDB___db_real_err	function
(	O
dbenv	pointer
,	O
error	int
,	O
error_set	int
,	O
stderr_default	int
,	O
fmt	pointer
,	O
ap	array
)	O
const	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int	O
error	int
,	O
error_set	int
,	O
stderr_default	int
;	O
const	O
char	O
*	O
fmt	pointer
;	O
va_list	array
ap	array
;	O
{	O
if	O
(	O
dbenv	pointer
!=	O
NULL	O
&&	O
dbenv	pointer
->	O
db_errcall	pointer
!=	O
NULL	O
)	O
__db_errcall	function
(	O
dbenv	pointer
,	O
error	int
,	O
error_set	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
if	O
(	O
dbenv	pointer
!=	O
NULL	O
&&	O
dbenv	pointer
->	O
db_errfile	pointer
!=	O
NULL	O
)	O
__db_errfile	function
(	O
dbenv	pointer
,	O
error	int
,	O
error_set	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
if	O
(	O
stderr_default	int
&&	O
(	O
dbenv	pointer
==	O
NULL	O
||	O
(	O
dbenv	pointer
->	O
db_errcall	pointer
==	O
NULL	O
&&	O
dbenv	pointer
->	O
db_errfile	pointer
==	O
NULL	O
)	O
)	O
)	O
__db_errfile	function
(	O
NULL	O
,	O
error	int
,	O
error_set	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
}	O
static	O
void	O
__db_errcall	function
(	O
dbenv	pointer
,	O
error	int
,	O
error_set	int
,	O
fmt	pointer
,	O
ap	array
)	O
const	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int	O
error	int
,	O
error_set	int
;	O
const	O
char	O
*	O
fmt	pointer
;	O
va_list	array
ap	array
;	O
{	O
char	O
*	O
p	pointer
;	O
char	O
__errbuf	array
[	O
2048	int
]	O
;	O
p	pointer
=	O
__errbuf	array
;	O
if	O
(	O
fmt	pointer
!=	O
NULL	O
)	O
{	O
p	pointer
+=	O
vsnprintf	function
(	O
__errbuf	array
,	O
sizeof	O
(	O
__errbuf	array
)	O
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
if	O
(	O
error_set	int
)	O
{	O
*	O
p	pointer
++	O
=	O
':'	O
;	O
*	O
p	pointer
++	O
=	O
' '	O
;	O
}	O
}	O
if	O
(	O
error_set	int
)	O
(	O
void	O
)	O
strcpy	function
(	O
p	pointer
,	O
CDB_db_strerror	function
(	O
error	int
)	O
)	O
;	O
dbenv	pointer
->	O
db_errcall	pointer
(	O
dbenv	pointer
->	O
db_errpfx	pointer
,	O
__errbuf	array
)	O
;	O
}	O
static	O
void	O
__db_errfile	function
(	O
dbenv	pointer
,	O
error	int
,	O
error_set	int
,	O
fmt	pointer
,	O
ap	array
)	O
const	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
int	O
error	int
,	O
error_set	int
;	O
const	O
char	O
*	O
fmt	pointer
;	O
va_list	array
ap	array
;	O
{	O
FILE	struct
*	O
fp	pointer
;	O
fp	pointer
=	O
dbenv	pointer
==	O
NULL	O
||	O
dbenv	pointer
->	O
db_errfile	pointer
==	O
NULL	O
?	O
stderr	pointer
:	O
dbenv	pointer
->	O
db_errfile	pointer
;	O
if	O
(	O
dbenv	pointer
!=	O
NULL	O
&&	O
dbenv	pointer
->	O
db_errpfx	pointer
!=	O
NULL	O
)	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"%s: "	pointer
,	O
dbenv	pointer
->	O
db_errpfx	pointer
)	O
;	O
if	O
(	O
fmt	pointer
!=	O
NULL	O
)	O
{	O
(	O
void	O
)	O
vfprintf	function
(	O
fp	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
if	O
(	O
error_set	int
)	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
": "	pointer
)	O
;	O
}	O
if	O
(	O
error_set	int
)	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"%s"	pointer
,	O
CDB_db_strerror	function
(	O
error	int
)	O
)	O
;	O
(	O
void	O
)	O
fprintf	function
(	O
fp	pointer
,	O
"\n"	pointer
)	O
;	O
(	O
void	O
)	O
fflush	function
(	O
fp	pointer
)	O
;	O
}	O
void	O
CDB___db_logmsg	function
(	O
const	O
DB_ENV	struct
*	O
dbenv	pointer
,	O
DB_TXN	struct
*	O
txnid	int
,	O
const	O
char	O
*	O
opname	pointer
,	O
u_int32_t	int
flags	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
CDB___db_real_log	function
(	O
dbenv	pointer
,	O
txnid	int
,	O
opname	pointer
,	O
flags	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
CDB___db_real_log	function
(	O
const	O
DB_ENV	struct
*	O
dbenv	pointer
,	O
DB_TXN	struct
*	O
txnid	int
,	O
const	O
char	O
*	O
opname	pointer
,	O
u_int32_t	int
flags	int
,	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
ap	array
)	O
{	O
DBT	struct
opdbt	struct
,	O
msgdbt	struct
;	O
DB_LSN	struct
lsn	struct
;	O
char	O
__logbuf	array
[	O
2048	int
]	O
;	O
if	O
(	O
!	O
LOGGING_ON	O
(	O
dbenv	pointer
)	O
)	O
return	O
;	O
memset	function
(	O
&	O
opdbt	struct
,	O
0	int
,	O
sizeof	O
(	O
opdbt	struct
)	O
)	O
;	O
opdbt	struct
.	O
data	pointer
=	O
(	O
void	O
*	O
)	O
opname	pointer
;	O
opdbt	struct
.	O
size	int
=	O
strlen	function
(	O
opname	pointer
)	O
+	O
1	int
;	O
memset	function
(	O
&	O
msgdbt	struct
,	O
0	int
,	O
sizeof	O
(	O
msgdbt	struct
)	O
)	O
;	O
msgdbt	struct
.	O
data	pointer
=	O
__logbuf	array
;	O
msgdbt	struct
.	O
size	int
=	O
vsnprintf	function
(	O
__logbuf	array
,	O
sizeof	O
(	O
__logbuf	array
)	O
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
CDB___db_debug_log	function
(	O
(	O
DB_ENV	struct
*	O
)	O
dbenv	pointer
,	O
txnid	int
,	O
&	O
lsn	struct
,	O
flags	int
,	O
&	O
opdbt	struct
,	O
-	O
1	int
,	O
&	O
msgdbt	struct
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
int	O
CDB___db_unknown_flag	function
(	O
dbenv	pointer
,	O
routine	pointer
,	O
flag	int
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
char	O
*	O
routine	pointer
;	O
u_int32_t	int
flag	int
;	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: Unknown flag: 0x%x"	pointer
,	O
routine	pointer
,	O
flag	int
)	O
;	O
DB_ASSERT	O
(	O
0	int
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
int	O
CDB___db_unknown_type	function
(	O
dbenv	pointer
,	O
routine	pointer
,	O
type	enum
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
char	O
*	O
routine	pointer
;	O
u_int32_t	int
type	enum
;	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"%s: Unknown db type: 0x%x"	pointer
,	O
routine	pointer
,	O
type	enum
)	O
;	O
DB_ASSERT	O
(	O
0	int
)	O
;	O
return	O
(	O
EINVAL	int
)	O
;	O
}	O
int	O
CDB___db_child_active_err	function
(	O
dbenv	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
{	O
CDB___db_err	function
(	O
dbenv	pointer
,	O
"Child transaction is active"	pointer
)	O
;	O
return	O
(	O
EPERM	int
)	O
;	O
}	O
