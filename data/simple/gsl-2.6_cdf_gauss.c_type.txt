static	O
double	O
get_del	function
(	O
double	O
x	double
,	O
double	O
rational	double
)	O
{	O
double	O
xsq	double
=	O
0.0	int
;	O
double	O
del	double
=	O
0.0	int
;	O
double	O
result	double
=	O
0.0	int
;	O
xsq	double
=	O
floor	function
(	O
x	double
*	O
GAUSS_SCALE	O
)	O
/	O
GAUSS_SCALE	O
;	O
del	double
=	O
(	O
x	double
-	O
xsq	double
)	O
*	O
(	O
x	double
+	O
xsq	double
)	O
;	O
del	double
*=	O
0.5	int
;	O
result	double
=	O
exp	function
(	O
-	O
0.5	int
*	O
xsq	double
*	O
xsq	double
)	O
*	O
exp	function
(	O
-	O
1.0	int
*	O
del	double
)	O
*	O
rational	double
;	O
return	O
result	double
;	O
}	O
static	O
double	O
gauss_small	function
(	O
const	O
double	O
x	double
)	O
{	O
unsigned	O
int	O
i	int
;	O
double	O
result	double
=	O
0.0	int
;	O
double	O
xsq	double
;	O
double	O
xnum	double
;	O
double	O
xden	double
;	O
const	O
double	O
a	double
[	O
5	int
]	O
=	O
{	O
2.2352520354606839287	int
,	O
161.02823106855587881	int
,	O
1067.6894854603709582	int
,	O
18154.981253343561249	int
,	O
0.065682337918207449113	int
}	O
;	O
const	O
double	O
b	double
[	O
4	int
]	O
=	O
{	O
47.20258190468824187	int
,	O
976.09855173777669322	int
,	O
10260.932208618978205	int
,	O
45507.789335026729956	int
}	O
;	O
xsq	double
=	O
x	double
*	O
x	double
;	O
xnum	double
=	O
a	double
[	O
4	int
]	O
*	O
xsq	double
;	O
xden	double
=	O
xsq	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
{	O
xnum	double
=	O
(	O
xnum	double
+	O
a	double
[	O
i	int
]	O
)	O
*	O
xsq	double
;	O
xden	double
=	O
(	O
xden	double
+	O
b	double
[	O
i	int
]	O
)	O
*	O
xsq	double
;	O
}	O
result	double
=	O
x	double
*	O
(	O
xnum	double
+	O
a	double
[	O
3	int
]	O
)	O
/	O
(	O
xden	double
+	O
b	double
[	O
3	int
]	O
)	O
;	O
return	O
result	double
;	O
}	O
static	O
double	O
gauss_medium	function
(	O
const	O
double	O
x	double
)	O
{	O
unsigned	O
int	O
i	int
;	O
double	O
temp	double
=	O
0.0	int
;	O
double	O
result	double
=	O
0.0	int
;	O
double	O
xnum	double
;	O
double	O
xden	double
;	O
double	O
absx	double
;	O
const	O
double	O
c	array
[	O
9	int
]	O
=	O
{	O
0.39894151208813466764	int
,	O
8.8831497943883759412	int
,	O
93.506656132177855979	int
,	O
597.27027639480026226	int
,	O
2494.5375852903726711	int
,	O
6848.1904505362823326	int
,	O
11602.651437647350124	int
,	O
9842.7148383839780218	int
,	O
1.0765576773720192317e-8	int
}	O
;	O
const	O
double	O
d	array
[	O
8	int
]	O
=	O
{	O
22.266688044328115691	int
,	O
235.38790178262499861	int
,	O
1519.377599407554805	int
,	O
6485.558298266760755	int
,	O
18615.571640885098091	int
,	O
34900.952721145977266	int
,	O
38912.003286093271411	int
,	O
19685.429676859990727	int
}	O
;	O
absx	double
=	O
fabs	function
(	O
x	double
)	O
;	O
xnum	double
=	O
c	array
[	O
8	int
]	O
*	O
absx	double
;	O
xden	double
=	O
absx	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
7	int
;	O
i	int
++	O
)	O
{	O
xnum	double
=	O
(	O
xnum	double
+	O
c	array
[	O
i	int
]	O
)	O
*	O
absx	double
;	O
xden	double
=	O
(	O
xden	double
+	O
d	array
[	O
i	int
]	O
)	O
*	O
absx	double
;	O
}	O
temp	double
=	O
(	O
xnum	double
+	O
c	array
[	O
7	int
]	O
)	O
/	O
(	O
xden	double
+	O
d	array
[	O
7	int
]	O
)	O
;	O
result	double
=	O
get_del	function
(	O
x	double
,	O
temp	double
)	O
;	O
return	O
result	double
;	O
}	O
static	O
double	O
gauss_large	function
(	O
const	O
double	O
x	double
)	O
{	O
int	O
i	int
;	O
double	O
result	double
;	O
double	O
xsq	double
;	O
double	O
temp	double
;	O
double	O
xnum	double
;	O
double	O
xden	double
;	O
double	O
absx	double
;	O
const	O
double	O
p	double
[	O
6	int
]	O
=	O
{	O
0.21589853405795699	int
,	O
0.1274011611602473639	int
,	O
0.022235277870649807	int
,	O
0.001421619193227893466	int
,	O
2.9112874951168792e-5	int
,	O
0.02307344176494017303	int
}	O
;	O
const	O
double	O
q	array
[	O
5	int
]	O
=	O
{	O
1.28426009614491121	int
,	O
0.468238212480865118	int
,	O
0.0659881378689285515	int
,	O
0.00378239633202758244	int
,	O
7.29751555083966205e-5	int
}	O
;	O
absx	double
=	O
fabs	function
(	O
x	double
)	O
;	O
xsq	double
=	O
1.0	int
/	O
(	O
x	double
*	O
x	double
)	O
;	O
xnum	double
=	O
p	double
[	O
5	int
]	O
*	O
xsq	double
;	O
xden	double
=	O
xsq	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
xnum	double
=	O
(	O
xnum	double
+	O
p	double
[	O
i	int
]	O
)	O
*	O
xsq	double
;	O
xden	double
=	O
(	O
xden	double
+	O
q	array
[	O
i	int
]	O
)	O
*	O
xsq	double
;	O
}	O
temp	double
=	O
xsq	double
*	O
(	O
xnum	double
+	O
p	double
[	O
4	int
]	O
)	O
/	O
(	O
xden	double
+	O
q	array
[	O
4	int
]	O
)	O
;	O
temp	double
=	O
(	O
M_1_SQRT2PI	O
-	O
temp	double
)	O
/	O
absx	double
;	O
result	double
=	O
get_del	function
(	O
x	double
,	O
temp	double
)	O
;	O
return	O
result	double
;	O
}	O
double	O
gsl_cdf_ugaussian_P	function
(	O
const	O
double	O
x	double
)	O
{	O
double	O
result	double
;	O
double	O
absx	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
absx	double
<	O
GAUSS_EPSILON	O
)	O
{	O
result	double
=	O
0.5	int
;	O
return	O
result	double
;	O
}	O
else	O
if	O
(	O
absx	double
<	O
0.66291	int
)	O
{	O
result	double
=	O
0.5	int
+	O
gauss_small	function
(	O
x	double
)	O
;	O
return	O
result	double
;	O
}	O
else	O
if	O
(	O
absx	double
<	O
SQRT32	O
)	O
{	O
result	double
=	O
gauss_medium	function
(	O
x	double
)	O
;	O
if	O
(	O
x	double
>	O
0.0	int
)	O
{	O
result	double
=	O
1.0	int
-	O
result	double
;	O
}	O
return	O
result	double
;	O
}	O
else	O
if	O
(	O
x	double
>	O
GAUSS_XUPPER	O
)	O
{	O
result	double
=	O
1.0	int
;	O
return	O
result	double
;	O
}	O
else	O
if	O
(	O
x	double
<	O
GAUSS_XLOWER	O
)	O
{	O
result	double
=	O
0.0	int
;	O
return	O
result	double
;	O
}	O
else	O
{	O
result	double
=	O
gauss_large	function
(	O
x	double
)	O
;	O
if	O
(	O
x	double
>	O
0.0	int
)	O
{	O
result	double
=	O
1.0	int
-	O
result	double
;	O
}	O
}	O
return	O
result	double
;	O
}	O
double	O
gsl_cdf_ugaussian_Q	function
(	O
const	O
double	O
x	double
)	O
{	O
double	O
result	double
;	O
double	O
absx	double
=	O
fabs	function
(	O
x	double
)	O
;	O
if	O
(	O
absx	double
<	O
GAUSS_EPSILON	O
)	O
{	O
result	double
=	O
0.5	int
;	O
return	O
result	double
;	O
}	O
else	O
if	O
(	O
absx	double
<	O
0.66291	int
)	O
{	O
result	double
=	O
gauss_small	function
(	O
x	double
)	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
result	double
=	O
fabs	function
(	O
result	double
)	O
+	O
0.5	int
;	O
}	O
else	O
{	O
result	double
=	O
0.5	int
-	O
result	double
;	O
}	O
return	O
result	double
;	O
}	O
else	O
if	O
(	O
absx	double
<	O
SQRT32	O
)	O
{	O
result	double
=	O
gauss_medium	function
(	O
x	double
)	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
result	double
=	O
1.0	int
-	O
result	double
;	O
}	O
return	O
result	double
;	O
}	O
else	O
if	O
(	O
x	double
>	O
-	O
(	O
GAUSS_XLOWER	O
)	O
)	O
{	O
result	double
=	O
0.0	int
;	O
return	O
result	double
;	O
}	O
else	O
if	O
(	O
x	double
<	O
-	O
(	O
GAUSS_XUPPER	O
)	O
)	O
{	O
result	double
=	O
1.0	int
;	O
return	O
result	double
;	O
}	O
else	O
{	O
result	double
=	O
gauss_large	function
(	O
x	double
)	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
result	double
=	O
1.0	int
-	O
result	double
;	O
}	O
}	O
return	O
result	double
;	O
}	O
double	O
gsl_cdf_gaussian_P	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
sigma	double
)	O
{	O
return	O
gsl_cdf_ugaussian_P	function
(	O
x	double
/	O
sigma	double
)	O
;	O
}	O
double	O
gsl_cdf_gaussian_Q	function
(	O
const	O
double	O
x	double
,	O
const	O
double	O
sigma	double
)	O
{	O
return	O
gsl_cdf_ugaussian_Q	function
(	O
x	double
/	O
sigma	double
)	O
;	O
}	O
