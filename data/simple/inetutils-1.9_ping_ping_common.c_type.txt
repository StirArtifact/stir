extern	O
unsigned	O
char	O
*	O
data_buffer	pointer
;	O
extern	O
size_t	long
data_length	long
;	O
static	O
void	O
_ping_freebuf	function
(	O
PING	struct
*	O
p	pointer
)	O
;	O
size_t	long
ping_cvt_number	function
(	O
const	O
char	O
*	O
optarg	pointer
,	O
size_t	long
maxval	long
,	O
int	O
allow_zero	int
)	O
{	O
char	O
*	O
p	pointer
;	O
unsigned	O
long	O
int	O
n	long
;	O
n	long
=	O
strtoul	function
(	O
optarg	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"invalid value (`%s' near `%s')"	pointer
,	O
optarg	pointer
,	O
p	pointer
)	O
;	O
if	O
(	O
n	long
==	O
0	int
&&	O
!	O
allow_zero	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"option value too small: %s"	pointer
,	O
optarg	pointer
)	O
;	O
if	O
(	O
maxval	long
&&	O
n	long
>	O
maxval	long
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"option value too big: %s"	pointer
,	O
optarg	pointer
)	O
;	O
return	O
n	long
;	O
}	O
void	O
init_data_buffer	function
(	O
unsigned	O
char	O
*	O
pat	pointer
,	O
int	O
len	char
)	O
{	O
int	O
i	int
=	O
0	int
;	O
unsigned	O
char	O
*	O
p	pointer
;	O
if	O
(	O
data_length	long
==	O
0	int
)	O
return	O
;	O
data_buffer	pointer
=	O
xmalloc	function
(	O
data_length	long
)	O
;	O
if	O
(	O
pat	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
data_buffer	pointer
;	O
p	pointer
<	O
data_buffer	pointer
+	O
data_length	long
;	O
p	pointer
++	O
)	O
{	O
*	O
p	pointer
=	O
pat	pointer
[	O
i	int
]	O
;	O
if	O
(	O
i	int
++	O
>=	O
len	char
)	O
i	int
=	O
0	int
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
data_length	long
;	O
i	int
++	O
)	O
data_buffer	pointer
[	O
i	int
]	O
=	O
i	int
;	O
}	O
}	O
void	O
decode_pattern	function
(	O
const	O
char	O
*	O
text	pointer
,	O
int	O
*	O
pattern_len	pointer
,	O
unsigned	O
char	O
*	O
pattern_data	pointer
)	O
{	O
int	O
i	int
,	O
c	int
,	O
off	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
text	pointer
&&	O
i	int
<	O
*	O
pattern_len	pointer
;	O
i	int
++	O
)	O
{	O
if	O
(	O
sscanf	function
(	O
text	pointer
,	O
"%2x%n"	pointer
,	O
&	O
c	int
,	O
&	O
off	long
)	O
!=	O
1	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"error in pattern near %s"	pointer
,	O
text	pointer
)	O
;	O
text	pointer
+=	O
off	long
;	O
}	O
*	O
pattern_len	pointer
=	O
i	int
;	O
}	O
void	O
tvsub	function
(	O
struct	O
timeval	struct
*	O
out	pointer
,	O
struct	O
timeval	struct
*	O
in	pointer
)	O
{	O
if	O
(	O
(	O
out	pointer
->	O
tv_usec	long
-=	O
in	pointer
->	O
tv_usec	long
)	O
<	O
0	int
)	O
{	O
--	O
out	pointer
->	O
tv_sec	long
;	O
out	pointer
->	O
tv_usec	long
+=	O
1000000	int
;	O
}	O
out	pointer
->	O
tv_sec	long
-=	O
in	pointer
->	O
tv_sec	long
;	O
}	O
double	O
nabs	function
(	O
double	O
a	double
)	O
{	O
return	O
(	O
a	double
<	O
0	int
)	O
?	O
-	O
a	double
:	O
a	double
;	O
}	O
double	O
nsqrt	function
(	O
double	O
a	double
,	O
double	O
prec	double
)	O
{	O
double	O
x0	double
,	O
x1	double
;	O
if	O
(	O
a	double
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
a	double
<	O
prec	double
)	O
return	O
0	int
;	O
x1	double
=	O
a	double
/	O
2	int
;	O
do	O
{	O
x0	double
=	O
x1	double
;	O
x1	double
=	O
(	O
x0	double
+	O
a	double
/	O
x0	double
)	O
/	O
2	int
;	O
}	O
while	O
(	O
nabs	function
(	O
x1	double
-	O
x0	double
)	O
>	O
prec	double
)	O
;	O
return	O
x1	double
;	O
}	O
int	O
_ping_setbuf	function
(	O
PING	struct
*	O
p	pointer
,	O
bool	bool
use_ipv6	bool
)	O
{	O
if	O
(	O
!	O
p	pointer
->	O
ping_buffer	pointer
)	O
{	O
p	pointer
->	O
ping_buffer	pointer
=	O
malloc	function
(	O
_PING_BUFLEN	O
(	O
p	pointer
,	O
use_ipv6	bool
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
->	O
ping_buffer	pointer
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
p	pointer
->	O
ping_cktab	pointer
)	O
{	O
p	pointer
->	O
ping_cktab	pointer
=	O
malloc	function
(	O
p	pointer
->	O
ping_cktab_size	int
)	O
;	O
if	O
(	O
!	O
p	pointer
->	O
ping_cktab	pointer
)	O
return	O
-	O
1	int
;	O
memset	function
(	O
p	pointer
->	O
ping_cktab	pointer
,	O
0	int
,	O
p	pointer
->	O
ping_cktab_size	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ping_set_data	function
(	O
PING	struct
*	O
p	pointer
,	O
void	O
*	O
data	array
,	O
size_t	long
off	long
,	O
size_t	long
len	char
,	O
bool	bool
use_ipv6	bool
)	O
{	O
icmphdr_t	struct
*	O
icmp	pointer
;	O
if	O
(	O
_ping_setbuf	function
(	O
p	pointer
,	O
use_ipv6	bool
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
p	pointer
->	O
ping_datalen	long
<	O
off	long
+	O
len	char
)	O
return	O
-	O
1	int
;	O
icmp	pointer
=	O
(	O
icmphdr_t	struct
*	O
)	O
p	pointer
->	O
ping_buffer	pointer
;	O
memcpy	function
(	O
icmp	pointer
->	O
icmp_data	O
+	O
off	long
,	O
data	array
,	O
len	char
)	O
;	O
return	O
0	int
;	O
}	O
void	O
ping_set_count	function
(	O
PING	struct
*	O
ping	pointer
,	O
size_t	long
count	long
)	O
{	O
ping	pointer
->	O
ping_count	long
=	O
count	long
;	O
}	O
void	O
ping_set_sockopt	function
(	O
PING	struct
*	O
ping	pointer
,	O
int	O
opt	int
,	O
void	O
*	O
val	array
,	O
int	O
valsize	int
)	O
{	O
setsockopt	function
(	O
ping	pointer
->	O
ping_fd	int
,	O
SOL_SOCKET	int
,	O
opt	int
,	O
(	O
char	O
*	O
)	O
&	O
val	array
,	O
valsize	int
)	O
;	O
}	O
void	O
ping_set_interval	function
(	O
PING	struct
*	O
ping	pointer
,	O
size_t	long
interval	long
)	O
{	O
ping	pointer
->	O
ping_interval	long
=	O
interval	long
;	O
}	O
void	O
_ping_freebuf	function
(	O
PING	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
ping_buffer	pointer
)	O
{	O
free	function
(	O
p	pointer
->	O
ping_buffer	pointer
)	O
;	O
p	pointer
->	O
ping_buffer	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
p	pointer
->	O
ping_cktab	pointer
)	O
{	O
free	function
(	O
p	pointer
->	O
ping_cktab	pointer
)	O
;	O
p	pointer
->	O
ping_cktab	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
ping_unset_data	function
(	O
PING	struct
*	O
p	pointer
)	O
{	O
_ping_freebuf	function
(	O
p	pointer
)	O
;	O
}	O
int	O
ping_timeout_p	function
(	O
struct	O
timeval	struct
*	O
start_time	pointer
,	O
int	O
timeout	int
)	O
{	O
struct	O
timeval	struct
now	struct
;	O
gettimeofday	function
(	O
&	O
now	struct
,	O
NULL	O
)	O
;	O
if	O
(	O
timeout	int
!=	O
-	O
1	int
)	O
{	O
tvsub	function
(	O
&	O
now	struct
,	O
start_time	pointer
)	O
;	O
if	O
(	O
now	struct
.	O
tv_sec	long
>=	O
timeout	int
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
