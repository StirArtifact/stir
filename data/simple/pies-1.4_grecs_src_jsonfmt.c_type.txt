static	O
void	O
json_writez	function
(	O
struct	O
json_format	struct
*	O
fmt	pointer
,	O
char	O
const	O
*	O
str	pointer
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
str	pointer
)	O
;	O
fmt	pointer
->	O
write	pointer
(	O
fmt	pointer
->	O
data	pointer
,	O
str	pointer
,	O
len	long
)	O
;	O
}	O
static	O
void	O
json_writec	function
(	O
struct	O
json_format	struct
*	O
fmt	pointer
,	O
char	O
c	long
)	O
{	O
fmt	pointer
->	O
write	pointer
(	O
fmt	pointer
->	O
data	pointer
,	O
&	O
c	long
,	O
1	int
)	O
;	O
}	O
static	O
void	O
json_indent	function
(	O
struct	O
json_format	struct
*	O
fmt	pointer
,	O
size_t	long
level	int
)	O
{	O
level	int
*=	O
fmt	pointer
->	O
indent	long
;	O
while	O
(	O
level	int
--	O
)	O
json_writec	function
(	O
fmt	pointer
,	O
' '	O
)	O
;	O
}	O
static	O
void	O
json_format_delim	function
(	O
struct	O
json_format	struct
*	O
fmt	pointer
,	O
size_t	long
level	int
)	O
{	O
json_writec	function
(	O
fmt	pointer
,	O
','	O
)	O
;	O
if	O
(	O
fmt	pointer
->	O
indent	long
)	O
{	O
json_writec	function
(	O
fmt	pointer
,	O
'\n'	O
)	O
;	O
json_indent	function
(	O
fmt	pointer
,	O
level	int
)	O
;	O
}	O
else	O
json_writec	function
(	O
fmt	pointer
,	O
' '	O
)	O
;	O
}	O
static	O
int	O
escape	function
(	O
char	O
c	long
,	O
char	O
*	O
o	pointer
)	O
{	O
static	O
char	O
transtab	array
[	O
]	O
=	O
"\\\\\"\"b\bf\fn\nr\rt\t"	pointer
;	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
transtab	array
;	O
*	O
p	pointer
;	O
p	pointer
+=	O
2	int
)	O
{	O
if	O
(	O
p	pointer
[	O
1	int
]	O
==	O
c	long
)	O
{	O
*	O
o	pointer
=	O
p	pointer
[	O
0	int
]	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
void	O
json_format_string	function
(	O
struct	O
json_format	struct
*	O
fmt	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
json_writec	function
(	O
fmt	pointer
,	O
'"'	O
)	O
;	O
for	O
(	O
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
char	O
c	long
;	O
if	O
(	O
!	O
escape	function
(	O
*	O
s	pointer
,	O
&	O
c	long
)	O
)	O
{	O
json_writec	function
(	O
fmt	pointer
,	O
'\\'	O
)	O
;	O
json_writec	function
(	O
fmt	pointer
,	O
c	long
)	O
;	O
}	O
else	O
json_writec	function
(	O
fmt	pointer
,	O
*	O
s	pointer
)	O
;	O
}	O
json_writec	function
(	O
fmt	pointer
,	O
'"'	O
)	O
;	O
}	O
static	O
void	O
json_format_number	function
(	O
struct	O
json_format	struct
*	O
fmt	pointer
,	O
double	O
n	long
)	O
{	O
char	O
*	O
buffer	pointer
=	O
NULL	O
;	O
size_t	long
size	pointer
=	O
0	int
;	O
if	O
(	O
fmt	pointer
->	O
precision	int
==	O
-	O
1	int
)	O
grecs_asprintf	function
(	O
&	O
buffer	pointer
,	O
&	O
size	pointer
,	O
"%e"	pointer
,	O
n	long
)	O
;	O
else	O
grecs_asprintf	function
(	O
&	O
buffer	pointer
,	O
&	O
size	pointer
,	O
"%.*f"	pointer
,	O
fmt	pointer
->	O
precision	int
,	O
n	long
)	O
;	O
json_writez	function
(	O
fmt	pointer
,	O
buffer	pointer
)	O
;	O
free	function
(	O
buffer	pointer
)	O
;	O
}	O
static	O
int	O
collect_keypairs	function
(	O
void	O
*	O
sym	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
json_pair	struct
*	O
p	pointer
=	O
sym	pointer
;	O
struct	O
json_pair	struct
*	O
*	O
*	O
kp	pointer
=	O
data	pointer
;	O
*	O
*	O
kp	pointer
=	O
p	pointer
;	O
++	O
*	O
kp	pointer
;	O
return	O
0	int
;	O
}	O
static	O
void	O
json_formatter	function
(	O
struct	O
json_format	struct
*	O
fmt	pointer
,	O
struct	O
json_value	struct
*	O
obj	pointer
,	O
size_t	long
level	int
)	O
;	O
static	O
int	O
keypair_cmp_name	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
json_pair	struct
const	O
*	O
const	O
*	O
kpa	pointer
=	O
a	pointer
;	O
struct	O
json_pair	struct
const	O
*	O
const	O
*	O
kpb	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
(	O
*	O
kpa	pointer
)	O
->	O
k	pointer
,	O
(	O
*	O
kpb	pointer
)	O
->	O
k	pointer
)	O
;	O
}	O
static	O
void	O
json_format_obj	function
(	O
struct	O
json_format	struct
*	O
fmt	pointer
,	O
struct	O
json_value	struct
*	O
obj	pointer
,	O
size_t	long
level	int
)	O
{	O
size_t	long
count	long
,	O
i	long
;	O
struct	O
json_pair	struct
*	O
*	O
keypairs	pointer
,	O
*	O
*	O
kp	pointer
;	O
count	long
=	O
grecs_symtab_count	function
(	O
obj	pointer
->	O
v	pointer
.	O
o	pointer
)	O
;	O
keypairs	pointer
=	O
grecs_calloc	function
(	O
count	long
,	O
sizeof	O
(	O
*	O
keypairs	pointer
)	O
)	O
;	O
kp	pointer
=	O
keypairs	pointer
;	O
grecs_symtab_foreach	function
(	O
obj	pointer
->	O
v	pointer
.	O
o	pointer
,	O
collect_keypairs	function
,	O
&	O
kp	pointer
)	O
;	O
qsort	function
(	O
keypairs	pointer
,	O
count	long
,	O
sizeof	O
(	O
*	O
keypairs	pointer
)	O
,	O
keypair_cmp_name	function
)	O
;	O
json_writec	function
(	O
fmt	pointer
,	O
'{'	O
)	O
;	O
if	O
(	O
count	long
)	O
{	O
if	O
(	O
fmt	pointer
->	O
indent	long
)	O
json_writec	function
(	O
fmt	pointer
,	O
'\n'	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
{	O
(	O
i	long
?	O
json_format_delim	function
:	O
json_indent	function
)	O
(	O
fmt	pointer
,	O
level	int
)	O
;	O
json_format_string	function
(	O
fmt	pointer
,	O
keypairs	pointer
[	O
i	long
]	O
->	O
k	pointer
)	O
;	O
json_writec	function
(	O
fmt	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
fmt	pointer
->	O
indent	long
)	O
json_writec	function
(	O
fmt	pointer
,	O
' '	O
)	O
;	O
json_formatter	function
(	O
fmt	pointer
,	O
keypairs	pointer
[	O
i	long
]	O
->	O
v	pointer
,	O
level	int
)	O
;	O
}	O
if	O
(	O
fmt	pointer
->	O
indent	long
)	O
{	O
json_writec	function
(	O
fmt	pointer
,	O
'\n'	O
)	O
;	O
json_indent	function
(	O
fmt	pointer
,	O
level	int
-	O
1	int
)	O
;	O
}	O
}	O
json_writec	function
(	O
fmt	pointer
,	O
'}'	O
)	O
;	O
grecs_free	function
(	O
keypairs	pointer
)	O
;	O
}	O
static	O
void	O
json_format_array	function
(	O
struct	O
json_format	struct
*	O
fmt	pointer
,	O
struct	O
json_value	struct
*	O
obj	pointer
,	O
size_t	long
level	int
)	O
{	O
size_t	long
i	long
;	O
json_array_flatten	function
(	O
obj	pointer
)	O
;	O
json_writec	function
(	O
fmt	pointer
,	O
'['	O
)	O
;	O
if	O
(	O
obj	pointer
->	O
v	pointer
.	O
a	pointer
->	O
oc	long
)	O
{	O
if	O
(	O
fmt	pointer
->	O
indent	long
)	O
json_writec	function
(	O
fmt	pointer
,	O
'\n'	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
obj	pointer
->	O
v	pointer
.	O
a	pointer
->	O
oc	long
;	O
i	long
++	O
)	O
{	O
(	O
i	long
?	O
json_format_delim	function
:	O
json_indent	function
)	O
(	O
fmt	pointer
,	O
level	int
)	O
;	O
json_formatter	function
(	O
fmt	pointer
,	O
obj	pointer
->	O
v	pointer
.	O
a	pointer
->	O
ov	pointer
[	O
i	long
]	O
,	O
level	int
)	O
;	O
}	O
if	O
(	O
fmt	pointer
->	O
indent	long
)	O
{	O
json_writec	function
(	O
fmt	pointer
,	O
'\n'	O
)	O
;	O
json_indent	function
(	O
fmt	pointer
,	O
level	int
-	O
1	int
)	O
;	O
}	O
}	O
json_writec	function
(	O
fmt	pointer
,	O
']'	O
)	O
;	O
}	O
static	O
void	O
json_formatter	function
(	O
struct	O
json_format	struct
*	O
fmt	pointer
,	O
struct	O
json_value	struct
*	O
obj	pointer
,	O
size_t	long
level	int
)	O
{	O
if	O
(	O
!	O
obj	pointer
)	O
{	O
json_writez	function
(	O
fmt	pointer
,	O
"null"	pointer
)	O
;	O
return	O
;	O
}	O
++	O
level	int
;	O
switch	O
(	O
obj	pointer
->	O
type	int
)	O
{	O
case	O
json_null	int
:	O
json_writez	function
(	O
fmt	pointer
,	O
"null"	pointer
)	O
;	O
break	O
;	O
case	O
json_bool	int
:	O
json_writez	function
(	O
fmt	pointer
,	O
obj	pointer
->	O
v	pointer
.	O
b	pointer
?	O
"true"	pointer
:	O
"false"	pointer
)	O
;	O
break	O
;	O
case	O
json_number	int
:	O
json_format_number	function
(	O
fmt	pointer
,	O
obj	pointer
->	O
v	pointer
.	O
n	long
)	O
;	O
break	O
;	O
case	O
json_string	int
:	O
json_format_string	function
(	O
fmt	pointer
,	O
obj	pointer
->	O
v	pointer
.	O
s	pointer
)	O
;	O
break	O
;	O
case	O
json_arr	int
:	O
json_format_array	function
(	O
fmt	pointer
,	O
obj	pointer
,	O
level	int
)	O
;	O
break	O
;	O
case	O
json_object	int
:	O
json_format_obj	function
(	O
fmt	pointer
,	O
obj	pointer
,	O
level	int
)	O
;	O
break	O
;	O
}	O
}	O
void	O
json_format_value	function
(	O
struct	O
json_value	struct
*	O
obj	pointer
,	O
struct	O
json_format	struct
*	O
fmt	pointer
)	O
{	O
json_formatter	function
(	O
fmt	pointer
,	O
obj	pointer
,	O
0	int
)	O
;	O
}	O
