static	O
void	O
compute_moments	function
(	O
double	O
par	double
,	O
double	O
*	O
cheb	pointer
)	O
;	O
static	O
int	O
dgtsl	function
(	O
size_t	long
n	int
,	O
double	O
*	O
c	double
,	O
double	O
*	O
d	pointer
,	O
double	O
*	O
e	int
,	O
double	O
*	O
b	double
)	O
;	O
gsl_integration_qawo_table	struct
*	O
gsl_integration_qawo_table_alloc	function
(	O
double	O
omega	double
,	O
double	O
L	double
,	O
enum	O
gsl_integration_qawo_enum	enum
sine	enum
,	O
size_t	long
n	int
)	O
{	O
gsl_integration_qawo_table	struct
*	O
t	pointer
;	O
double	O
*	O
chebmo	pointer
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"table length n must be positive integer"	pointer
,	O
GSL_EDOM	int
,	O
0	int
)	O
;	O
}	O
t	pointer
=	O
(	O
gsl_integration_qawo_table	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
gsl_integration_qawo_table	struct
)	O
)	O
;	O
if	O
(	O
t	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for qawo_table struct"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
chebmo	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
25	int
*	O
n	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
chebmo	pointer
==	O
0	int
)	O
{	O
free	function
(	O
t	pointer
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for chebmo block"	pointer
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
t	pointer
->	O
n	int
=	O
n	int
;	O
t	pointer
->	O
sine	enum
=	O
sine	enum
;	O
t	pointer
->	O
omega	double
=	O
omega	double
;	O
t	pointer
->	O
L	double
=	O
L	double
;	O
t	pointer
->	O
par	double
=	O
0.5	int
*	O
omega	double
*	O
L	double
;	O
t	pointer
->	O
chebmo	pointer
=	O
chebmo	pointer
;	O
{	O
size_t	long
i	long
;	O
double	O
scale	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
t	pointer
->	O
n	int
;	O
i	long
++	O
)	O
{	O
compute_moments	function
(	O
t	pointer
->	O
par	double
*	O
scale	double
,	O
t	pointer
->	O
chebmo	pointer
+	O
25	int
*	O
i	long
)	O
;	O
scale	double
*=	O
0.5	int
;	O
}	O
}	O
return	O
t	pointer
;	O
}	O
int	O
gsl_integration_qawo_table_set	function
(	O
gsl_integration_qawo_table	struct
*	O
t	pointer
,	O
double	O
omega	double
,	O
double	O
L	double
,	O
enum	O
gsl_integration_qawo_enum	enum
sine	enum
)	O
{	O
t	pointer
->	O
omega	double
=	O
omega	double
;	O
t	pointer
->	O
sine	enum
=	O
sine	enum
;	O
t	pointer
->	O
L	double
=	O
L	double
;	O
t	pointer
->	O
par	double
=	O
0.5	int
*	O
omega	double
*	O
L	double
;	O
{	O
size_t	long
i	long
;	O
double	O
scale	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
t	pointer
->	O
n	int
;	O
i	long
++	O
)	O
{	O
compute_moments	function
(	O
t	pointer
->	O
par	double
*	O
scale	double
,	O
t	pointer
->	O
chebmo	pointer
+	O
25	int
*	O
i	long
)	O
;	O
scale	double
*=	O
0.5	int
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_integration_qawo_table_set_length	function
(	O
gsl_integration_qawo_table	struct
*	O
t	pointer
,	O
double	O
L	double
)	O
{	O
if	O
(	O
L	double
==	O
t	pointer
->	O
L	double
)	O
return	O
GSL_SUCCESS	int
;	O
t	pointer
->	O
L	double
=	O
L	double
;	O
t	pointer
->	O
par	double
=	O
0.5	int
*	O
t	pointer
->	O
omega	double
*	O
L	double
;	O
{	O
size_t	long
i	long
;	O
double	O
scale	double
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
t	pointer
->	O
n	int
;	O
i	long
++	O
)	O
{	O
compute_moments	function
(	O
t	pointer
->	O
par	double
*	O
scale	double
,	O
t	pointer
->	O
chebmo	pointer
+	O
25	int
*	O
i	long
)	O
;	O
scale	double
*=	O
0.5	int
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
void	O
gsl_integration_qawo_table_free	function
(	O
gsl_integration_qawo_table	struct
*	O
t	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
t	pointer
)	O
;	O
free	function
(	O
t	pointer
->	O
chebmo	pointer
)	O
;	O
free	function
(	O
t	pointer
)	O
;	O
}	O
static	O
void	O
compute_moments	function
(	O
double	O
par	double
,	O
double	O
*	O
chebmo	pointer
)	O
{	O
double	O
v	array
[	O
28	int
]	O
,	O
d	pointer
[	O
25	int
]	O
,	O
d1	array
[	O
25	int
]	O
,	O
d2	array
[	O
25	int
]	O
;	O
const	O
size_t	long
noeq	long
=	O
25	int
;	O
const	O
double	O
par2	double
=	O
par	double
*	O
par	double
;	O
const	O
double	O
par4	double
=	O
par2	double
*	O
par2	double
;	O
const	O
double	O
par22	double
=	O
par2	double
+	O
2.0	int
;	O
const	O
double	O
sinpar	double
=	O
sin	function
(	O
par	double
)	O
;	O
const	O
double	O
cospar	double
=	O
cos	function
(	O
par	double
)	O
;	O
size_t	long
i	long
;	O
double	O
ac	double
=	O
8	int
*	O
cospar	double
;	O
double	O
as	double
=	O
24	int
*	O
par	double
*	O
sinpar	double
;	O
v	array
[	O
0	int
]	O
=	O
2	int
*	O
sinpar	double
/	O
par	double
;	O
v	array
[	O
1	int
]	O
=	O
(	O
8	int
*	O
cospar	double
+	O
(	O
2	int
*	O
par2	double
-	O
8	int
)	O
*	O
sinpar	double
/	O
par	double
)	O
/	O
par2	double
;	O
v	array
[	O
2	int
]	O
=	O
(	O
32	int
*	O
(	O
par2	double
-	O
12	int
)	O
*	O
cospar	double
+	O
(	O
2	int
*	O
(	O
(	O
par2	double
-	O
80	int
)	O
*	O
par2	double
+	O
192	int
)	O
*	O
sinpar	double
)	O
/	O
par	double
)	O
/	O
par4	double
;	O
if	O
(	O
fabs	function
(	O
par	double
)	O
<=	O
24	int
)	O
{	O
double	O
an2	double
,	O
ass	double
,	O
asap	double
;	O
double	O
an	double
=	O
6	int
;	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
noeq	long
-	O
1	int
;	O
k	long
++	O
)	O
{	O
an2	double
=	O
an	double
*	O
an	double
;	O
d	pointer
[	O
k	long
]	O
=	O
-	O
2	int
*	O
(	O
an2	double
-	O
4	int
)	O
*	O
(	O
par22	double
-	O
2	int
*	O
an2	double
)	O
;	O
d2	array
[	O
k	long
]	O
=	O
(	O
an	double
-	O
1	int
)	O
*	O
(	O
an	double
-	O
2	int
)	O
*	O
par2	double
;	O
d1	array
[	O
k	long
+	O
1	int
]	O
=	O
(	O
an	double
+	O
3	int
)	O
*	O
(	O
an	double
+	O
4	int
)	O
*	O
par2	double
;	O
v	array
[	O
k	long
+	O
3	int
]	O
=	O
as	double
-	O
(	O
an2	double
-	O
4	int
)	O
*	O
ac	double
;	O
an	double
=	O
an	double
+	O
2.0	int
;	O
}	O
an2	double
=	O
an	double
*	O
an	double
;	O
d	pointer
[	O
noeq	long
-	O
1	int
]	O
=	O
-	O
2	int
*	O
(	O
an2	double
-	O
4	int
)	O
*	O
(	O
par22	double
-	O
2	int
*	O
an2	double
)	O
;	O
v	array
[	O
noeq	long
+	O
2	int
]	O
=	O
as	double
-	O
(	O
an2	double
-	O
4	int
)	O
*	O
ac	double
;	O
v	array
[	O
3	int
]	O
=	O
v	array
[	O
3	int
]	O
-	O
56	int
*	O
par2	double
*	O
v	array
[	O
2	int
]	O
;	O
ass	double
=	O
par	double
*	O
sinpar	double
;	O
asap	double
=	O
(	O
(	O
(	O
(	O
(	O
210	int
*	O
par2	double
-	O
1	int
)	O
*	O
cospar	double
-	O
(	O
105	int
*	O
par2	double
-	O
63	int
)	O
*	O
ass	double
)	O
/	O
an2	double
-	O
(	O
1	int
-	O
15	int
*	O
par2	double
)	O
*	O
cospar	double
+	O
15	int
*	O
ass	double
)	O
/	O
an2	double
-	O
cospar	double
+	O
3	int
*	O
ass	double
)	O
/	O
an2	double
-	O
cospar	double
)	O
/	O
an2	double
;	O
v	array
[	O
noeq	long
+	O
2	int
]	O
=	O
v	array
[	O
noeq	long
+	O
2	int
]	O
-	O
2	int
*	O
asap	double
*	O
par2	double
*	O
(	O
an	double
-	O
1	int
)	O
*	O
(	O
an	double
-	O
2	int
)	O
;	O
dgtsl	function
(	O
noeq	long
,	O
d1	array
,	O
d	pointer
,	O
d2	array
,	O
v	array
+	O
3	int
)	O
;	O
}	O
else	O
{	O
size_t	long
k	long
;	O
double	O
an	double
=	O
4	int
;	O
for	O
(	O
k	long
=	O
3	int
;	O
k	long
<	O
13	int
;	O
k	long
++	O
)	O
{	O
double	O
an2	double
=	O
an	double
*	O
an	double
;	O
v	array
[	O
k	long
]	O
=	O
(	O
(	O
an2	double
-	O
4	int
)	O
*	O
(	O
2	int
*	O
(	O
par22	double
-	O
2	int
*	O
an2	double
)	O
*	O
v	array
[	O
k	long
-	O
1	int
]	O
-	O
ac	double
)	O
+	O
as	double
-	O
par2	double
*	O
(	O
an	double
+	O
1	int
)	O
*	O
(	O
an	double
+	O
2	int
)	O
*	O
v	array
[	O
k	long
-	O
2	int
]	O
)	O
/	O
(	O
par2	double
*	O
(	O
an	double
-	O
1	int
)	O
*	O
(	O
an	double
-	O
2	int
)	O
)	O
;	O
an	double
=	O
an	double
+	O
2.0	int
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
13	int
;	O
i	long
++	O
)	O
{	O
chebmo	pointer
[	O
2	int
*	O
i	long
]	O
=	O
v	array
[	O
i	long
]	O
;	O
}	O
v	array
[	O
0	int
]	O
=	O
2	int
*	O
(	O
sinpar	double
-	O
par	double
*	O
cospar	double
)	O
/	O
par2	double
;	O
v	array
[	O
1	int
]	O
=	O
(	O
18	int
-	O
48	int
/	O
par2	double
)	O
*	O
sinpar	double
/	O
par2	double
+	O
(	O
-	O
2	int
+	O
48	int
/	O
par2	double
)	O
*	O
cospar	double
/	O
par	double
;	O
ac	double
=	O
-	O
24	int
*	O
par	double
*	O
cospar	double
;	O
as	double
=	O
-	O
8	int
*	O
sinpar	double
;	O
if	O
(	O
fabs	function
(	O
par	double
)	O
<=	O
24	int
)	O
{	O
size_t	long
k	long
;	O
double	O
an2	double
,	O
ass	double
,	O
asap	double
;	O
double	O
an	double
=	O
5	int
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
noeq	long
-	O
1	int
;	O
k	long
++	O
)	O
{	O
an2	double
=	O
an	double
*	O
an	double
;	O
d	pointer
[	O
k	long
]	O
=	O
-	O
2	int
*	O
(	O
an2	double
-	O
4	int
)	O
*	O
(	O
par22	double
-	O
2	int
*	O
an2	double
)	O
;	O
d2	array
[	O
k	long
]	O
=	O
(	O
an	double
-	O
1	int
)	O
*	O
(	O
an	double
-	O
2	int
)	O
*	O
par2	double
;	O
d1	array
[	O
k	long
+	O
1	int
]	O
=	O
(	O
an	double
+	O
3	int
)	O
*	O
(	O
an	double
+	O
4	int
)	O
*	O
par2	double
;	O
v	array
[	O
k	long
+	O
2	int
]	O
=	O
ac	double
+	O
(	O
an2	double
-	O
4	int
)	O
*	O
as	double
;	O
an	double
=	O
an	double
+	O
2.0	int
;	O
}	O
an2	double
=	O
an	double
*	O
an	double
;	O
d	pointer
[	O
noeq	long
-	O
1	int
]	O
=	O
-	O
2	int
*	O
(	O
an2	double
-	O
4	int
)	O
*	O
(	O
par22	double
-	O
2	int
*	O
an2	double
)	O
;	O
v	array
[	O
noeq	long
+	O
1	int
]	O
=	O
ac	double
+	O
(	O
an2	double
-	O
4	int
)	O
*	O
as	double
;	O
v	array
[	O
2	int
]	O
=	O
v	array
[	O
2	int
]	O
-	O
42	int
*	O
par2	double
*	O
v	array
[	O
1	int
]	O
;	O
ass	double
=	O
par	double
*	O
cospar	double
;	O
asap	double
=	O
(	O
(	O
(	O
(	O
(	O
105	int
*	O
par2	double
-	O
63	int
)	O
*	O
ass	double
-	O
(	O
210	int
*	O
par2	double
-	O
1	int
)	O
*	O
sinpar	double
)	O
/	O
an2	double
+	O
(	O
15	int
*	O
par2	double
-	O
1	int
)	O
*	O
sinpar	double
-	O
15	int
*	O
ass	double
)	O
/	O
an2	double
-	O
sinpar	double
-	O
3	int
*	O
ass	double
)	O
/	O
an2	double
-	O
sinpar	double
)	O
/	O
an2	double
;	O
v	array
[	O
noeq	long
+	O
1	int
]	O
=	O
v	array
[	O
noeq	long
+	O
1	int
]	O
-	O
2	int
*	O
asap	double
*	O
par2	double
*	O
(	O
an	double
-	O
1	int
)	O
*	O
(	O
an	double
-	O
2	int
)	O
;	O
dgtsl	function
(	O
noeq	long
,	O
d1	array
,	O
d	pointer
,	O
d2	array
,	O
v	array
+	O
2	int
)	O
;	O
}	O
else	O
{	O
size_t	long
k	long
;	O
double	O
an	double
=	O
3	int
;	O
for	O
(	O
k	long
=	O
2	int
;	O
k	long
<	O
12	int
;	O
k	long
++	O
)	O
{	O
double	O
an2	double
=	O
an	double
*	O
an	double
;	O
v	array
[	O
k	long
]	O
=	O
(	O
(	O
an2	double
-	O
4	int
)	O
*	O
(	O
2	int
*	O
(	O
par22	double
-	O
2	int
*	O
an2	double
)	O
*	O
v	array
[	O
k	long
-	O
1	int
]	O
+	O
as	double
)	O
+	O
ac	double
-	O
par2	double
*	O
(	O
an	double
+	O
1	int
)	O
*	O
(	O
an	double
+	O
2	int
)	O
*	O
v	array
[	O
k	long
-	O
2	int
]	O
)	O
/	O
(	O
par2	double
*	O
(	O
an	double
-	O
1	int
)	O
*	O
(	O
an	double
-	O
2	int
)	O
)	O
;	O
an	double
=	O
an	double
+	O
2.0	int
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
12	int
;	O
i	long
++	O
)	O
{	O
chebmo	pointer
[	O
2	int
*	O
i	long
+	O
1	int
]	O
=	O
v	array
[	O
i	long
]	O
;	O
}	O
}	O
static	O
int	O
dgtsl	function
(	O
size_t	long
n	int
,	O
double	O
*	O
c	double
,	O
double	O
*	O
d	pointer
,	O
double	O
*	O
e	int
,	O
double	O
*	O
b	double
)	O
{	O
size_t	long
k	long
;	O
c	double
[	O
0	int
]	O
=	O
d	pointer
[	O
0	int
]	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
b	double
[	O
0	int
]	O
=	O
b	double
[	O
0	int
]	O
/	O
d	pointer
[	O
0	int
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
d	pointer
[	O
0	int
]	O
=	O
e	int
[	O
0	int
]	O
;	O
e	int
[	O
0	int
]	O
=	O
0	int
;	O
e	int
[	O
n	int
-	O
1	int
]	O
=	O
0	int
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
n	int
-	O
1	int
;	O
k	long
++	O
)	O
{	O
size_t	long
k1	long
=	O
k	long
+	O
1	int
;	O
if	O
(	O
fabs	function
(	O
c	double
[	O
k1	long
]	O
)	O
>=	O
fabs	function
(	O
c	double
[	O
k	long
]	O
)	O
)	O
{	O
{	O
double	O
t	pointer
=	O
c	double
[	O
k1	long
]	O
;	O
c	double
[	O
k1	long
]	O
=	O
c	double
[	O
k	long
]	O
;	O
c	double
[	O
k	long
]	O
=	O
t	pointer
;	O
}	O
;	O
{	O
double	O
t	pointer
=	O
d	pointer
[	O
k1	long
]	O
;	O
d	pointer
[	O
k1	long
]	O
=	O
d	pointer
[	O
k	long
]	O
;	O
d	pointer
[	O
k	long
]	O
=	O
t	pointer
;	O
}	O
;	O
{	O
double	O
t	pointer
=	O
e	int
[	O
k1	long
]	O
;	O
e	int
[	O
k1	long
]	O
=	O
e	int
[	O
k	long
]	O
;	O
e	int
[	O
k	long
]	O
=	O
t	pointer
;	O
}	O
;	O
{	O
double	O
t	pointer
=	O
b	double
[	O
k1	long
]	O
;	O
b	double
[	O
k1	long
]	O
=	O
b	double
[	O
k	long
]	O
;	O
b	double
[	O
k	long
]	O
=	O
t	pointer
;	O
}	O
;	O
}	O
if	O
(	O
c	double
[	O
k	long
]	O
==	O
0	int
)	O
{	O
return	O
GSL_FAILURE	int
;	O
}	O
{	O
double	O
t	pointer
=	O
-	O
c	double
[	O
k1	long
]	O
/	O
c	double
[	O
k	long
]	O
;	O
c	double
[	O
k1	long
]	O
=	O
d	pointer
[	O
k1	long
]	O
+	O
t	pointer
*	O
d	pointer
[	O
k	long
]	O
;	O
d	pointer
[	O
k1	long
]	O
=	O
e	int
[	O
k1	long
]	O
+	O
t	pointer
*	O
e	int
[	O
k	long
]	O
;	O
e	int
[	O
k1	long
]	O
=	O
0	int
;	O
b	double
[	O
k1	long
]	O
=	O
b	double
[	O
k1	long
]	O
+	O
t	pointer
*	O
b	double
[	O
k	long
]	O
;	O
}	O
}	O
if	O
(	O
c	double
[	O
n	int
-	O
1	int
]	O
==	O
0	int
)	O
{	O
return	O
GSL_FAILURE	int
;	O
}	O
b	double
[	O
n	int
-	O
1	int
]	O
=	O
b	double
[	O
n	int
-	O
1	int
]	O
/	O
c	double
[	O
n	int
-	O
1	int
]	O
;	O
b	double
[	O
n	int
-	O
2	int
]	O
=	O
(	O
b	double
[	O
n	int
-	O
2	int
]	O
-	O
d	pointer
[	O
n	int
-	O
2	int
]	O
*	O
b	double
[	O
n	int
-	O
1	int
]	O
)	O
/	O
c	double
[	O
n	int
-	O
2	int
]	O
;	O
for	O
(	O
k	long
=	O
n	int
;	O
k	long
>	O
2	int
;	O
k	long
--	O
)	O
{	O
size_t	long
kb	long
=	O
k	long
-	O
3	int
;	O
b	double
[	O
kb	long
]	O
=	O
(	O
b	double
[	O
kb	long
]	O
-	O
d	pointer
[	O
kb	long
]	O
*	O
b	double
[	O
kb	long
+	O
1	int
]	O
-	O
e	int
[	O
kb	long
]	O
*	O
b	double
[	O
kb	long
+	O
2	int
]	O
)	O
/	O
c	double
[	O
kb	long
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
