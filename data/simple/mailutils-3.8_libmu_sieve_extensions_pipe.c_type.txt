int	O
sieve_pipe	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
,	O
int	O
test	pointer
)	O
{	O
int	O
retval	pointer
=	O
0	int
;	O
int	O
rc	int
,	O
result	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
char	O
*	O
cmd	enum
;	O
mu_stream_t	pointer
pstr	pointer
;	O
mu_envelope_t	pointer
env	pointer
;	O
const	O
char	O
*	O
error_diag	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
error_arg	pointer
=	O
NULL	O
;	O
int	O
pipe_mask	int
=	O
0	int
;	O
mu_sieve_get_arg	function
(	O
mach	pointer
,	O
0	int
,	O
SVT_STRING	int
,	O
&	O
cmd	enum
)	O
;	O
if	O
(	O
mu_sieve_is_dry_run	function
(	O
mach	pointer
)	O
)	O
return	O
0	int
;	O
msg	pointer
=	O
mu_sieve_get_message	function
(	O
mach	pointer
)	O
;	O
mu_message_get_envelope	function
(	O
msg	pointer
,	O
&	O
env	pointer
)	O
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"envelope"	pointer
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
pipe_mask	int
|=	O
PIPE_ENVELOPE	int
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"header"	pointer
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
pipe_mask	int
|=	O
PIPE_HEADERS	int
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"body"	pointer
,	O
SVT_VOID	int
,	O
NULL	O
)	O
)	O
pipe_mask	int
|=	O
PIPE_BODY	int
;	O
if	O
(	O
pipe_mask	int
==	O
0	int
)	O
pipe_mask	int
=	O
PIPE_ALL	O
;	O
do	O
{	O
mu_stream_t	pointer
mstr	pointer
=	O
NULL	O
;	O
rc	int
=	O
mu_command_stream_create	function
(	O
&	O
pstr	pointer
,	O
cmd	enum
,	O
MU_STREAM_WRITE	int
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"cannot create command stream"	pointer
)	O
,	O
cmd	enum
)	O
;	O
if	O
(	O
pipe_mask	int
&	O
PIPE_ENVELOPE	int
)	O
{	O
char	O
*	O
p	pointer
;	O
rc	int
=	O
mu_envelope_aget_sender	function
(	O
env	pointer
,	O
&	O
p	pointer
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"cannot get envelope sender"	pointer
)	O
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_write	function
(	O
pstr	pointer
,	O
"From "	pointer
,	O
5	int
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"stream write failed"	pointer
)	O
,	O
NULL	O
)	O
;	O
mu_stream_write	function
(	O
pstr	pointer
,	O
p	pointer
,	O
strlen	function
(	O
p	pointer
)	O
,	O
NULL	O
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
rc	int
=	O
mu_stream_write	function
(	O
pstr	pointer
,	O
" "	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"stream write failed"	pointer
)	O
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_envelope_aget_date	function
(	O
env	pointer
,	O
&	O
p	pointer
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"cannot get envelope date"	pointer
)	O
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_write	function
(	O
pstr	pointer
,	O
p	pointer
,	O
strlen	function
(	O
p	pointer
)	O
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"stream write failed"	pointer
)	O
,	O
NULL	O
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
rc	int
=	O
mu_stream_write	function
(	O
pstr	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"stream write failed"	pointer
)	O
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
pipe_mask	int
&	O
PIPE_HEADERS	int
)	O
{	O
mu_header_t	pointer
hdr	pointer
;	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_header_get_streamref	function
(	O
hdr	pointer
,	O
&	O
mstr	pointer
)	O
;	O
rc	int
=	O
mu_stream_copy	function
(	O
pstr	pointer
,	O
mstr	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"copying headers failed"	pointer
)	O
,	O
cmd	enum
)	O
;	O
mu_stream_destroy	function
(	O
&	O
mstr	pointer
)	O
;	O
}	O
if	O
(	O
pipe_mask	int
&	O
PIPE_BODY	int
)	O
{	O
mu_body_t	pointer
body	pointer
;	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
;	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
mstr	pointer
)	O
;	O
rc	int
=	O
mu_stream_copy	function
(	O
pstr	pointer
,	O
mstr	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
ONERR	O
(	O
rc	int
,	O
_	O
(	O
"copying body failed"	pointer
)	O
,	O
cmd	enum
)	O
;	O
mu_stream_destroy	function
(	O
&	O
mstr	pointer
)	O
;	O
}	O
}	O
while	O
(	O
0	int
)	O
;	O
result	pointer
=	O
mu_stream_close	function
(	O
pstr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
error_arg	pointer
)	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: %s: %s: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
error_diag	pointer
,	O
error_arg	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: %s: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
error_diag	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
pstr	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
if	O
(	O
test	pointer
)	O
{	O
int	O
code	int
=	O
0	int
;	O
int	O
status	int
;	O
size_t	long
n	pointer
;	O
rc	int
=	O
mu_stream_ioctl	function
(	O
pstr	pointer
,	O
MU_IOCTL_PROGSTREAM	int
,	O
MU_IOCTL_PROG_STATUS	int
,	O
&	O
status	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_destroy	function
(	O
&	O
pstr	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"exit"	pointer
,	O
SVT_NUMBER	int
,	O
&	O
n	pointer
)	O
)	O
code	int
=	O
n	pointer
;	O
if	O
(	O
result	pointer
==	O
0	int
)	O
retval	pointer
=	O
code	int
==	O
0	int
;	O
else	O
if	O
(	O
result	pointer
==	O
MU_ERR_PROCESS_EXITED	O
)	O
retval	pointer
=	O
code	int
==	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
else	O
if	O
(	O
result	pointer
==	O
MU_ERR_PROCESS_SIGNALED	O
)	O
{	O
int	O
signo	int
=	O
WTERMSIG	O
(	O
status	int
)	O
;	O
size_t	long
n	pointer
;	O
if	O
(	O
mu_sieve_get_tag	function
(	O
mach	pointer
,	O
"signal"	pointer
,	O
SVT_NUMBER	int
,	O
&	O
n	pointer
)	O
)	O
retval	pointer
=	O
signo	int
==	O
n	pointer
;	O
else	O
{	O
mu_stream_destroy	function
(	O
&	O
pstr	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
}	O
else	O
{	O
mu_sieve_error	function
(	O
mach	pointer
,	O
"%lu: %s"	pointer
,	O
(	O
unsigned	O
long	O
)	O
mu_sieve_get_message_num	function
(	O
mach	pointer
)	O
,	O
mu_strerror	function
(	O
result	pointer
)	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
pstr	pointer
)	O
;	O
mu_sieve_abort	function
(	O
mach	pointer
)	O
;	O
}	O
}	O
mu_stream_destroy	function
(	O
&	O
pstr	pointer
)	O
;	O
return	O
retval	pointer
;	O
}	O
int	O
sieve_action_pipe	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_log_action	function
(	O
mach	pointer
,	O
"PIPE"	pointer
,	O
NULL	O
)	O
;	O
return	O
sieve_pipe	function
(	O
mach	pointer
,	O
0	int
)	O
;	O
}	O
int	O
sieve_test_pipe	function
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
return	O
sieve_pipe	function
(	O
mach	pointer
,	O
1	int
)	O
;	O
}	O
static	O
mu_sieve_tag_def_t	struct
pipe_tags	array
[	O
]	O
=	O
{	O
{	O
"envelope"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"body"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
"header"	pointer
,	O
SVT_VOID	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
pipe_action_tag_groups	array
[	O
]	O
=	O
{	O
{	O
pipe_tags	array
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_def_t	struct
pipe_test_tags	array
[	O
]	O
=	O
{	O
{	O
"exit"	pointer
,	O
SVT_NUMBER	int
}	O
,	O
{	O
"signal"	pointer
,	O
SVT_NUMBER	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_tag_group_t	struct
pipe_test_tag_groups	array
[	O
]	O
=	O
{	O
{	O
pipe_tags	array
,	O
NULL	O
}	O
,	O
{	O
pipe_test_tags	array
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
mu_sieve_data_type	enum
pipe_args	array
[	O
]	O
=	O
{	O
SVT_STRING	int
,	O
SVT_VOID	int
}	O
;	O
int	O
SIEVE_EXPORT	O
(	O
pipe	function
,	O
init	O
)	O
(	O
mu_sieve_machine_t	pointer
mach	pointer
)	O
{	O
mu_sieve_register_action	function
(	O
mach	pointer
,	O
"pipe"	pointer
,	O
sieve_action_pipe	function
,	O
pipe_args	array
,	O
pipe_action_tag_groups	array
,	O
1	int
)	O
;	O
mu_sieve_register_test	function
(	O
mach	pointer
,	O
"pipe"	pointer
,	O
sieve_test_pipe	function
,	O
pipe_args	array
,	O
pipe_test_tag_groups	array
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
