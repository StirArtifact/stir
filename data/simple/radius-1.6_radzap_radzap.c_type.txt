int	O
confirm_flag	int
;	O
struct	O
arguments	struct
{	O
char	O
*	O
radutmp	struct
;	O
char	O
*	O
user	pointer
;	O
char	O
*	O
nas	pointer
;	O
int	O
port	array
;	O
}	O
;	O
const	O
char	O
*	O
argp_program_version	pointer
=	O
"radzap ("	pointer
PACKAGE	pointer
") "	pointer
VERSION	pointer
;	O
static	O
char	O
doc	pointer
[	O
]	O
=	O
N_	O
(	O
"delete Radius login records"	pointer
)	O
;	O
static	O
struct	O
argp_option	struct
options	pointer
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"radzap specific switches:"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"confirm"	pointer
,	O
'c'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"ask for confirmation before zapping"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"log-directory"	pointer
,	O
'l'	O
,	O
"DIR"	pointer
,	O
0	int
,	O
N_	O
(	O
"set logging directory"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"file"	pointer
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"operate on FILE instead of /var/log/radutmp"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"nas"	pointer
,	O
'n'	O
,	O
N_	O
(	O
"NASNAME"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"zap user from given NAS"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"port"	pointer
,	O
'p'	O
,	O
N_	O
(	O
"NUMBER"	pointer
)	O
,	O
0	int
,	O
N_	O
(	O
"zap user coming from given port"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
"quiet"	pointer
,	O
'q'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"do not ask for confirmation before zapping"	pointer
)	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
struct	O
arguments	struct
*	O
args	pointer
=	O
state	pointer
->	O
input	pointer
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'c'	O
:	O
confirm_flag	int
=	O
1	int
;	O
break	O
;	O
case	O
'l'	O
:	O
grad_log_dir	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'f'	O
:	O
args	pointer
->	O
radutmp	struct
=	O
arg	pointer
;	O
break	O
;	O
case	O
'n'	O
:	O
args	pointer
->	O
nas	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'p'	O
:	O
if	O
(	O
*	O
arg	pointer
==	O
's'	O
||	O
*	O
arg	pointer
==	O
'S'	O
)	O
++	O
arg	pointer
;	O
args	pointer
->	O
port	array
=	O
atoi	function
(	O
arg	pointer
)	O
;	O
break	O
;	O
case	O
'q'	O
:	O
confirm_flag	int
=	O
0	int
;	O
break	O
;	O
case	O
ARGP_KEY_ARG	int
:	O
args	pointer
->	O
user	pointer
=	O
state	pointer
->	O
argv	pointer
[	O
state	pointer
->	O
next	pointer
-	O
1	int
]	O
;	O
break	O
;	O
case	O
ARGP_KEY_FINI	int
:	O
if	O
(	O
!	O
args	pointer
->	O
user	pointer
&&	O
!	O
args	pointer
->	O
nas	pointer
&&	O
args	pointer
->	O
port	array
==	O
-	O
1	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"at least one port, nas or user must be specified"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
options	pointer
,	O
parse_opt	function
,	O
NULL	O
,	O
doc	pointer
,	O
grad_common_argp_child	array
,	O
NULL	O
,	O
NULL	O
}	O
;	O
int	O
radzap	function
(	O
grad_netdef_t	struct
*	O
netdef	struct
,	O
int	O
port	array
,	O
char	O
*	O
user	pointer
,	O
time_t	long
t	long
)	O
{	O
struct	O
radutmp	struct
*	O
up	pointer
;	O
radut_file_t	pointer
file	pointer
;	O
grad_uint32_t	int
netaddr	int
;	O
if	O
(	O
t	long
==	O
0	int
)	O
time	struct
(	O
&	O
t	long
)	O
;	O
if	O
(	O
(	O
file	pointer
=	O
grad_ut_setent	function
(	O
grad_utmp_file	pointer
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't open file %s"	pointer
)	O
,	O
grad_utmp_file	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
while	O
(	O
up	pointer
=	O
grad_ut_getent	function
(	O
file	pointer
)	O
)	O
{	O
if	O
(	O
(	O
netdef	struct
&&	O
!	O
grad_ip_in_net_p	function
(	O
netdef	struct
,	O
htonl	function
(	O
up	pointer
->	O
nas_address	int
)	O
)	O
)	O
||	O
(	O
port	array
>=	O
0	int
&&	O
port	array
!=	O
up	pointer
->	O
nas_port	int
)	O
||	O
(	O
user	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
up	pointer
->	O
login	array
,	O
user	pointer
)	O
)	O
!=	O
0	int
||	O
up	pointer
->	O
type	enum
!=	O
P_LOGIN	int
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
!	O
confirm	function
(	O
up	pointer
)	O
)	O
continue	O
;	O
up	pointer
->	O
type	enum
=	O
P_IDLE	int
;	O
up	pointer
->	O
time	struct
=	O
t	long
;	O
grad_ut_putent	function
(	O
file	pointer
,	O
up	pointer
)	O
;	O
write_wtmp	function
(	O
up	pointer
)	O
;	O
}	O
grad_ut_endent	function
(	O
file	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
confirm	function
(	O
struct	O
radutmp	struct
*	O
utp	pointer
)	O
{	O
char	O
buf	pointer
[	O
GRAD_MAX_LONGNAME	int
]	O
;	O
grad_nas_t	struct
*	O
cl	pointer
;	O
char	O
*	O
s	pointer
=	O
NULL	O
;	O
if	O
(	O
cl	pointer
=	O
grad_nas_lookup_ip	function
(	O
ntohl	function
(	O
utp	pointer
->	O
nas_address	int
)	O
)	O
)	O
s	pointer
=	O
cl	pointer
->	O
shortname	array
;	O
if	O
(	O
s	pointer
==	O
NULL	O
||	O
s	pointer
[	O
0	int
]	O
==	O
0	int
)	O
s	pointer
=	O
grad_ip_gethostname	function
(	O
ntohl	function
(	O
utp	pointer
->	O
nas_address	int
)	O
,	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"radzap: zapping %s from %s, port %d"	pointer
)	O
,	O
utp	pointer
->	O
login	array
,	O
s	pointer
,	O
utp	pointer
->	O
nas_port	int
)	O
;	O
if	O
(	O
confirm_flag	int
)	O
{	O
printf	function
(	O
": Ok?"	pointer
)	O
;	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
stdin	pointer
)	O
;	O
if	O
(	O
buf	pointer
[	O
0	int
]	O
!=	O
'y'	O
&&	O
buf	pointer
[	O
0	int
]	O
!=	O
'Y'	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Not confirmed\n"	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
return	O
1	int
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
int	O
write_wtmp	function
(	O
struct	O
radutmp	struct
*	O
ut	pointer
)	O
{	O
return	O
grad_radwtmp_putent	function
(	O
grad_wtmp_file	pointer
,	O
ut	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
grad_netdef_t	struct
netdef	struct
,	O
*	O
netdefp	pointer
=	O
NULL	O
;	O
time_t	long
t	long
;	O
char	O
*	O
path	pointer
;	O
char	O
*	O
s	pointer
;	O
struct	O
arguments	struct
args	pointer
;	O
grad_app_setup	function
(	O
)	O
;	O
if	O
(	O
s	pointer
=	O
getenv	function
(	O
"RADZAP_CONFIRM"	pointer
)	O
)	O
confirm_flag	int
=	O
atoi	function
(	O
s	pointer
)	O
;	O
args	pointer
.	O
radutmp	struct
=	O
NULL	O
;	O
args	pointer
.	O
user	pointer
=	O
NULL	O
;	O
args	pointer
.	O
nas	pointer
=	O
NULL	O
;	O
args	pointer
.	O
port	array
=	O
-	O
1	int
;	O
if	O
(	O
grad_argp_parse	function
(	O
&	O
argp	struct
,	O
&	O
argc	int
,	O
&	O
argv	pointer
,	O
0	int
,	O
NULL	O
,	O
&	O
args	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
args	pointer
.	O
radutmp	struct
)	O
grad_utmp_file	pointer
=	O
args	pointer
.	O
radutmp	struct
;	O
path	pointer
=	O
grad_mkfilename	function
(	O
grad_config_dir	pointer
,	O
RADIUS_NASLIST	pointer
)	O
;	O
if	O
(	O
grad_nas_read_file	function
(	O
path	pointer
)	O
<	O
0	int
)	O
exit	function
(	O
1	int
)	O
;	O
grad_free	function
(	O
path	pointer
)	O
;	O
if	O
(	O
args	pointer
.	O
nas	pointer
)	O
{	O
grad_nas_t	struct
*	O
np	pointer
;	O
np	pointer
=	O
grad_nas_lookup_name	function
(	O
args	pointer
.	O
nas	pointer
)	O
;	O
if	O
(	O
np	pointer
)	O
{	O
netdefp	pointer
=	O
&	O
np	pointer
->	O
netdef	struct
;	O
}	O
else	O
{	O
if	O
(	O
grad_ip_getnetaddr	function
(	O
args	pointer
.	O
nas	pointer
,	O
&	O
netdef	struct
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: host not found.\n"	pointer
)	O
,	O
args	pointer
.	O
nas	pointer
)	O
;	O
return	O
1	int
;	O
}	O
netdefp	pointer
=	O
&	O
netdef	struct
;	O
}	O
}	O
t	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
radzap	function
(	O
netdefp	pointer
,	O
args	pointer
.	O
port	array
,	O
args	pointer
.	O
user	pointer
,	O
t	long
)	O
;	O
return	O
0	int
;	O
}	O
