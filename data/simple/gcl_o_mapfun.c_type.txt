LFD	function
(	O
Lmapcar	int
)	O
(	O
void	O
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
object	O
*	O
base	O
=	O
vs_base	O
;	O
object	O
x	O
,	O
handy	O
;	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
-	O
1	int
;	O
int	O
i	int
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
vs_top	O
=	O
base	O
+	O
1	int
;	O
vs_base	O
=	O
base	O
;	O
return	O
;	O
}	O
vs_push	function
(	O
MMcar	function
(	O
x	O
)	O
)	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
handy	O
=	O
top	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
Cnil	O
,	O
Cnil	O
)	O
;	O
LOOP	O
:	O
vs_base	O
=	O
top	O
+	O
1	int
;	O
super_funcall	function
(	O
base	O
[	O
0	int
]	O
)	O
;	O
MMcar	function
(	O
handy	O
)	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
vs_base	O
=	O
top	O
;	O
vs_top	O
=	O
top	O
+	O
1	int
;	O
return	O
;	O
}	O
top	O
[	O
i	int
]	O
=	O
MMcar	function
(	O
x	O
)	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
vs_top	O
=	O
top	O
+	O
n	int
+	O
1	int
;	O
handy	O
=	O
MMcdr	function
(	O
handy	O
)	O
=	O
MMcons	function
(	O
Cnil	O
,	O
Cnil	O
)	O
;	O
goto	O
LOOP	O
;	O
}	O
LFD	function
(	O
Lmaplist	int
)	O
(	O
void	O
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
object	O
*	O
base	O
=	O
vs_base	O
;	O
object	O
x	O
,	O
handy	O
;	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
-	O
1	int
;	O
int	O
i	int
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
vs_top	O
=	O
base	O
+	O
1	int
;	O
vs_base	O
=	O
base	O
;	O
return	O
;	O
}	O
vs_push	function
(	O
x	O
)	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
handy	O
=	O
top	O
[	O
0	int
]	O
=	O
MMcons	function
(	O
Cnil	O
,	O
Cnil	O
)	O
;	O
LOOP	O
:	O
vs_base	O
=	O
top	O
+	O
1	int
;	O
super_funcall	function
(	O
base	O
[	O
0	int
]	O
)	O
;	O
MMcar	function
(	O
handy	O
)	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
vs_base	O
=	O
top	O
;	O
vs_top	O
=	O
top	O
+	O
1	int
;	O
return	O
;	O
}	O
top	O
[	O
i	int
]	O
=	O
x	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
vs_top	O
=	O
top	O
+	O
n	int
+	O
1	int
;	O
handy	O
=	O
MMcdr	function
(	O
handy	O
)	O
=	O
MMcons	function
(	O
Cnil	O
,	O
Cnil	O
)	O
;	O
goto	O
LOOP	O
;	O
}	O
LFD	function
(	O
Lmapc	int
)	O
(	O
void	O
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
object	O
*	O
base	O
=	O
vs_base	O
;	O
object	O
x	O
;	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
-	O
1	int
;	O
int	O
i	int
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
vs_push	function
(	O
base	O
[	O
1	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
vs_top	O
=	O
top	O
+	O
1	int
;	O
vs_base	O
=	O
top	O
;	O
return	O
;	O
}	O
vs_push	function
(	O
MMcar	function
(	O
x	O
)	O
)	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
LOOP	O
:	O
vs_base	O
=	O
top	O
+	O
1	int
;	O
super_funcall	function
(	O
base	O
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
vs_base	O
=	O
top	O
;	O
vs_top	O
=	O
top	O
+	O
1	int
;	O
return	O
;	O
}	O
top	O
[	O
i	int
]	O
=	O
MMcar	function
(	O
x	O
)	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
vs_top	O
=	O
top	O
+	O
n	int
+	O
1	int
;	O
goto	O
LOOP	O
;	O
}	O
LFD	function
(	O
Lmapl	int
)	O
(	O
void	O
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
object	O
*	O
base	O
=	O
vs_base	O
;	O
object	O
x	O
;	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
-	O
1	int
;	O
int	O
i	int
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
vs_push	function
(	O
base	O
[	O
1	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
vs_top	O
=	O
top	O
+	O
1	int
;	O
vs_base	O
=	O
top	O
;	O
return	O
;	O
}	O
vs_push	function
(	O
x	O
)	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
LOOP	O
:	O
vs_base	O
=	O
top	O
+	O
1	int
;	O
super_funcall	function
(	O
base	O
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
vs_base	O
=	O
top	O
;	O
vs_top	O
=	O
top	O
+	O
1	int
;	O
return	O
;	O
}	O
top	O
[	O
i	int
]	O
=	O
x	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
vs_top	O
=	O
top	O
+	O
n	int
+	O
1	int
;	O
goto	O
LOOP	O
;	O
}	O
LFD	function
(	O
Lmapcan	int
)	O
(	O
void	O
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
object	O
*	O
base	O
=	O
vs_base	O
;	O
object	O
x	O
,	O
handy	O
;	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
-	O
1	int
;	O
int	O
i	int
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
vs_top	O
=	O
base	O
+	O
1	int
;	O
vs_base	O
=	O
base	O
;	O
return	O
;	O
}	O
vs_push	function
(	O
MMcar	function
(	O
x	O
)	O
)	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
handy	O
=	O
Cnil	O
;	O
LOOP	O
:	O
vs_base	O
=	O
top	O
+	O
1	int
;	O
super_funcall	function
(	O
base	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
endp	function
(	O
handy	O
)	O
)	O
handy	O
=	O
top	O
[	O
0	int
]	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
else	O
{	O
x	O
=	O
MMcdr	function
(	O
handy	O
)	O
;	O
while	O
(	O
!	O
endp	function
(	O
x	O
)	O
)	O
{	O
handy	O
=	O
x	O
;	O
x	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
MMcdr	function
(	O
handy	O
)	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
}	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
vs_base	O
=	O
top	O
;	O
vs_top	O
=	O
top	O
+	O
1	int
;	O
return	O
;	O
}	O
top	O
[	O
i	int
]	O
=	O
MMcar	function
(	O
x	O
)	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
vs_top	O
=	O
top	O
+	O
n	int
+	O
1	int
;	O
goto	O
LOOP	O
;	O
}	O
LFD	function
(	O
Lmapcon	int
)	O
(	O
void	O
)	O
{	O
object	O
*	O
top	O
=	O
vs_top	O
;	O
object	O
*	O
base	O
=	O
vs_base	O
;	O
object	O
x	O
,	O
handy	O
;	O
int	O
n	int
=	O
vs_top	O
-	O
vs_base	O
-	O
1	int
;	O
int	O
i	int
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
too_few_arguments	function
(	O
)	O
;	O
vs_push	function
(	O
Cnil	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
base	O
[	O
0	int
]	O
=	O
Cnil	O
;	O
vs_top	O
=	O
base	O
+	O
1	int
;	O
vs_base	O
=	O
base	O
;	O
return	O
;	O
}	O
vs_push	function
(	O
x	O
)	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
handy	O
=	O
Cnil	O
;	O
LOOP	O
:	O
vs_base	O
=	O
top	O
+	O
1	int
;	O
super_funcall	function
(	O
base	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
endp	function
(	O
handy	O
)	O
)	O
handy	O
=	O
top	O
[	O
0	int
]	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
else	O
{	O
x	O
=	O
MMcdr	function
(	O
handy	O
)	O
;	O
while	O
(	O
!	O
endp	function
(	O
x	O
)	O
)	O
{	O
handy	O
=	O
x	O
;	O
x	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
MMcdr	function
(	O
handy	O
)	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
}	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
n	int
;	O
i	int
++	O
)	O
{	O
x	O
=	O
base	O
[	O
i	int
]	O
;	O
if	O
(	O
endp	function
(	O
x	O
)	O
)	O
{	O
vs_base	O
=	O
top	O
;	O
vs_top	O
=	O
top	O
+	O
1	int
;	O
return	O
;	O
}	O
top	O
[	O
i	int
]	O
=	O
x	O
;	O
base	O
[	O
i	int
]	O
=	O
MMcdr	function
(	O
x	O
)	O
;	O
}	O
vs_top	O
=	O
top	O
+	O
n	int
+	O
1	int
;	O
goto	O
LOOP	O
;	O
}	O
void	O
gcl_init_mapfun	function
(	O
void	O
)	O
{	O
make_function	function
(	O
"MAPCAR"	pointer
,	O
Lmapcar	int
)	O
;	O
make_function	function
(	O
"MAPLIST"	pointer
,	O
Lmaplist	int
)	O
;	O
make_function	function
(	O
"MAPC"	pointer
,	O
Lmapc	int
)	O
;	O
make_function	function
(	O
"MAPL"	pointer
,	O
Lmapl	int
)	O
;	O
make_function	function
(	O
"MAPCAN"	pointer
,	O
Lmapcan	int
)	O
;	O
make_function	function
(	O
"MAPCON"	pointer
,	O
Lmapcon	int
)	O
;	O
}	O
