static	O
void	O
build_link_order	function
(	O
lang_statement_union_type	union
*	O
statement	pointer
)	O
{	O
switch	O
(	O
statement	pointer
->	O
header	struct
.	O
type	enum
)	O
{	O
case	O
lang_data_statement_enum	int
:	O
{	O
asection	struct
*	O
output_section	pointer
;	O
struct	O
bfd_link_order	struct
*	O
link_order	pointer
;	O
bfd_vma	long
value	long
;	O
output_section	pointer
=	O
statement	pointer
->	O
data_statement	struct
.	O
output_section	pointer
;	O
ASSERT	O
(	O
output_section	pointer
->	O
owner	pointer
==	O
link_info	struct
.	O
output_bfd	pointer
)	O
;	O
if	O
(	O
!	O
(	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_HAS_CONTENTS	int
)	O
!=	O
0	int
||	O
(	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_LOAD	int
)	O
!=	O
0	int
&&	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_THREAD_LOCAL	int
)	O
)	O
)	O
)	O
break	O
;	O
link_order	pointer
=	O
bfd_new_link_order	function
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
output_section	pointer
)	O
;	O
if	O
(	O
link_order	pointer
==	O
NULL	O
)	O
einfo	pointer
(	O
_	O
(	O
"%F%P: bfd_new_link_order failed\n"	pointer
)	O
)	O
;	O
link_order	pointer
->	O
type	enum
=	O
bfd_data_link_order	int
;	O
link_order	pointer
->	O
offset	long
=	O
statement	pointer
->	O
data_statement	struct
.	O
output_offset	long
;	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
contents	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
xmalloc	function
(	O
QUAD_SIZE	O
)	O
;	O
value	long
=	O
statement	pointer
->	O
data_statement	struct
.	O
value	long
;	O
if	O
(	O
!	O
bfd_big_endian	function
(	O
link_info	struct
.	O
output_bfd	pointer
)	O
&&	O
!	O
bfd_little_endian	function
(	O
link_info	struct
.	O
output_bfd	pointer
)	O
&&	O
!	O
link_info	struct
.	O
big_endian	int
)	O
{	O
bfd_byte	char
buffer	array
[	O
8	int
]	O
;	O
switch	O
(	O
statement	pointer
->	O
data_statement	struct
.	O
type	enum
)	O
{	O
case	O
QUAD	int
:	O
case	O
SQUAD	int
:	O
if	O
(	O
sizeof	O
(	O
bfd_vma	long
)	O
>=	O
QUAD_SIZE	O
)	O
{	O
bfd_putl64	function
(	O
value	long
,	O
buffer	array
)	O
;	O
value	long
=	O
bfd_getb64	function
(	O
buffer	array
)	O
;	O
break	O
;	O
}	O
case	O
LONG	int
:	O
bfd_putl32	function
(	O
value	long
,	O
buffer	array
)	O
;	O
value	long
=	O
bfd_getb32	function
(	O
buffer	array
)	O
;	O
break	O
;	O
case	O
SHORT	int
:	O
bfd_putl16	function
(	O
value	long
,	O
buffer	array
)	O
;	O
value	long
=	O
bfd_getb16	function
(	O
buffer	array
)	O
;	O
break	O
;	O
case	O
BYTE	int
:	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
ASSERT	O
(	O
output_section	pointer
->	O
owner	pointer
==	O
link_info	struct
.	O
output_bfd	pointer
)	O
;	O
switch	O
(	O
statement	pointer
->	O
data_statement	struct
.	O
type	enum
)	O
{	O
case	O
QUAD	int
:	O
case	O
SQUAD	int
:	O
if	O
(	O
sizeof	O
(	O
bfd_vma	long
)	O
>=	O
QUAD_SIZE	O
)	O
bfd_put_64	O
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
value	long
,	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
contents	pointer
)	O
;	O
else	O
{	O
bfd_vma	long
high	long
;	O
if	O
(	O
statement	pointer
->	O
data_statement	struct
.	O
type	enum
==	O
QUAD	int
)	O
high	long
=	O
0	int
;	O
else	O
if	O
(	O
(	O
value	long
&	O
0x80000000	int
)	O
==	O
0	int
)	O
high	long
=	O
0	int
;	O
else	O
high	long
=	O
(	O
bfd_vma	long
)	O
-	O
1	int
;	O
bfd_put_32	O
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
high	long
,	O
(	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
contents	pointer
+	O
(	O
link_info	struct
.	O
big_endian	int
?	O
0	int
:	O
4	int
)	O
)	O
)	O
;	O
bfd_put_32	O
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
value	long
,	O
(	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
contents	pointer
+	O
(	O
link_info	struct
.	O
big_endian	int
?	O
4	int
:	O
0	int
)	O
)	O
)	O
;	O
}	O
link_order	pointer
->	O
size	int
=	O
QUAD_SIZE	O
;	O
break	O
;	O
case	O
LONG	int
:	O
bfd_put_32	O
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
value	long
,	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
contents	pointer
)	O
;	O
link_order	pointer
->	O
size	int
=	O
LONG_SIZE	O
;	O
break	O
;	O
case	O
SHORT	int
:	O
bfd_put_16	O
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
value	long
,	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
contents	pointer
)	O
;	O
link_order	pointer
->	O
size	int
=	O
SHORT_SIZE	O
;	O
break	O
;	O
case	O
BYTE	int
:	O
bfd_put_8	O
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
value	long
,	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
contents	pointer
)	O
;	O
link_order	pointer
->	O
size	int
=	O
BYTE_SIZE	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
size	int
=	O
link_order	pointer
->	O
size	int
;	O
}	O
break	O
;	O
case	O
lang_reloc_statement_enum	int
:	O
{	O
lang_reloc_statement_type	struct
*	O
rs	pointer
;	O
asection	struct
*	O
output_section	pointer
;	O
struct	O
bfd_link_order	struct
*	O
link_order	pointer
;	O
rs	pointer
=	O
&	O
statement	pointer
->	O
reloc_statement	struct
;	O
output_section	pointer
=	O
rs	pointer
->	O
output_section	pointer
;	O
ASSERT	O
(	O
output_section	pointer
->	O
owner	pointer
==	O
link_info	struct
.	O
output_bfd	pointer
)	O
;	O
if	O
(	O
!	O
(	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_HAS_CONTENTS	int
)	O
!=	O
0	int
||	O
(	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_LOAD	int
)	O
!=	O
0	int
&&	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_THREAD_LOCAL	int
)	O
)	O
)	O
)	O
break	O
;	O
link_order	pointer
=	O
bfd_new_link_order	function
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
output_section	pointer
)	O
;	O
if	O
(	O
link_order	pointer
==	O
NULL	O
)	O
einfo	pointer
(	O
_	O
(	O
"%F%P: bfd_new_link_order failed\n"	pointer
)	O
)	O
;	O
link_order	pointer
->	O
offset	long
=	O
rs	pointer
->	O
output_offset	long
;	O
link_order	pointer
->	O
size	int
=	O
bfd_get_reloc_size	function
(	O
rs	pointer
->	O
howto	pointer
)	O
;	O
link_order	pointer
->	O
u	union
.	O
reloc	enum
.	O
p	pointer
=	O
(	O
struct	O
bfd_link_order_reloc	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
bfd_link_order_reloc	struct
)	O
)	O
;	O
link_order	pointer
->	O
u	union
.	O
reloc	enum
.	O
p	pointer
->	O
reloc	enum
=	O
rs	pointer
->	O
reloc	enum
;	O
link_order	pointer
->	O
u	union
.	O
reloc	enum
.	O
p	pointer
->	O
addend	long
=	O
rs	pointer
->	O
addend_value	long
;	O
if	O
(	O
rs	pointer
->	O
name	pointer
==	O
NULL	O
)	O
{	O
link_order	pointer
->	O
type	enum
=	O
bfd_section_reloc_link_order	int
;	O
if	O
(	O
rs	pointer
->	O
section	pointer
->	O
owner	pointer
==	O
link_info	struct
.	O
output_bfd	pointer
)	O
link_order	pointer
->	O
u	union
.	O
reloc	enum
.	O
p	pointer
->	O
u	union
.	O
section	pointer
=	O
rs	pointer
->	O
section	pointer
;	O
else	O
{	O
link_order	pointer
->	O
u	union
.	O
reloc	enum
.	O
p	pointer
->	O
u	union
.	O
section	pointer
=	O
rs	pointer
->	O
section	pointer
->	O
output_section	pointer
;	O
link_order	pointer
->	O
u	union
.	O
reloc	enum
.	O
p	pointer
->	O
addend	long
+=	O
rs	pointer
->	O
section	pointer
->	O
output_offset	long
;	O
}	O
}	O
else	O
{	O
link_order	pointer
->	O
type	enum
=	O
bfd_symbol_reloc_link_order	int
;	O
link_order	pointer
->	O
u	union
.	O
reloc	enum
.	O
p	pointer
->	O
u	union
.	O
name	pointer
=	O
rs	pointer
->	O
name	pointer
;	O
}	O
}	O
break	O
;	O
case	O
lang_input_section_enum	int
:	O
{	O
asection	struct
*	O
i	pointer
=	O
statement	pointer
->	O
input_section	pointer
.	O
section	pointer
;	O
if	O
(	O
i	pointer
->	O
sec_info_type	int
!=	O
SEC_INFO_TYPE_JUST_SYMS	int
&&	O
(	O
i	pointer
->	O
flags	int
&	O
SEC_EXCLUDE	int
)	O
==	O
0	int
)	O
{	O
asection	struct
*	O
output_section	pointer
=	O
i	pointer
->	O
output_section	pointer
;	O
struct	O
bfd_link_order	struct
*	O
link_order	pointer
;	O
ASSERT	O
(	O
output_section	pointer
->	O
owner	pointer
==	O
link_info	struct
.	O
output_bfd	pointer
)	O
;	O
if	O
(	O
!	O
(	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_HAS_CONTENTS	int
)	O
!=	O
0	int
||	O
(	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_LOAD	int
)	O
!=	O
0	int
&&	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_THREAD_LOCAL	int
)	O
)	O
)	O
)	O
break	O
;	O
link_order	pointer
=	O
bfd_new_link_order	function
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
output_section	pointer
)	O
;	O
if	O
(	O
link_order	pointer
==	O
NULL	O
)	O
einfo	pointer
(	O
_	O
(	O
"%F%P: bfd_new_link_order failed\n"	pointer
)	O
)	O
;	O
if	O
(	O
(	O
i	pointer
->	O
flags	int
&	O
SEC_NEVER_LOAD	int
)	O
!=	O
0	int
&&	O
(	O
i	pointer
->	O
flags	int
&	O
SEC_DEBUGGING	int
)	O
==	O
0	int
)	O
{	O
link_order	pointer
->	O
type	enum
=	O
bfd_data_link_order	int
;	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
contents	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
""	pointer
;	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
size	int
=	O
1	int
;	O
}	O
else	O
{	O
link_order	pointer
->	O
type	enum
=	O
bfd_indirect_link_order	int
;	O
link_order	pointer
->	O
u	union
.	O
indirect	struct
.	O
section	pointer
=	O
i	pointer
;	O
ASSERT	O
(	O
i	pointer
->	O
output_section	pointer
==	O
output_section	pointer
)	O
;	O
}	O
link_order	pointer
->	O
size	int
=	O
i	pointer
->	O
size	int
;	O
link_order	pointer
->	O
offset	long
=	O
i	pointer
->	O
output_offset	long
;	O
}	O
}	O
break	O
;	O
case	O
lang_padding_statement_enum	int
:	O
{	O
asection	struct
*	O
output_section	pointer
;	O
struct	O
bfd_link_order	struct
*	O
link_order	pointer
;	O
output_section	pointer
=	O
statement	pointer
->	O
padding_statement	struct
.	O
output_section	pointer
;	O
ASSERT	O
(	O
statement	pointer
->	O
padding_statement	struct
.	O
output_section	pointer
->	O
owner	pointer
==	O
link_info	struct
.	O
output_bfd	pointer
)	O
;	O
if	O
(	O
!	O
(	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_HAS_CONTENTS	int
)	O
!=	O
0	int
||	O
(	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_LOAD	int
)	O
!=	O
0	int
&&	O
(	O
output_section	pointer
->	O
flags	int
&	O
SEC_THREAD_LOCAL	int
)	O
)	O
)	O
)	O
break	O
;	O
link_order	pointer
=	O
bfd_new_link_order	function
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
output_section	pointer
)	O
;	O
if	O
(	O
link_order	pointer
==	O
NULL	O
)	O
einfo	pointer
(	O
_	O
(	O
"%F%P: bfd_new_link_order failed\n"	pointer
)	O
)	O
;	O
link_order	pointer
->	O
type	enum
=	O
bfd_data_link_order	int
;	O
link_order	pointer
->	O
size	int
=	O
statement	pointer
->	O
padding_statement	struct
.	O
size	int
;	O
link_order	pointer
->	O
offset	long
=	O
statement	pointer
->	O
padding_statement	struct
.	O
output_offset	long
;	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
contents	pointer
=	O
statement	pointer
->	O
padding_statement	struct
.	O
fill	pointer
->	O
data	pointer
;	O
link_order	pointer
->	O
u	union
.	O
data	pointer
.	O
size	int
=	O
statement	pointer
->	O
padding_statement	struct
.	O
fill	pointer
->	O
size	int
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
bfd_boolean	int
unsplittable_name	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
CONST_STRNEQ	O
(	O
name	pointer
,	O
".stab"	pointer
)	O
)	O
{	O
unsigned	O
len	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
&	O
name	pointer
[	O
len	long
-	O
3	int
]	O
,	O
"str"	pointer
)	O
==	O
0	int
)	O
return	O
TRUE	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"$GDB_STRINGS$"	pointer
)	O
==	O
0	int
)	O
return	O
TRUE	int
;	O
return	O
FALSE	int
;	O
}	O
static	O
asection	struct
*	O
clone_section	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
s	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
count	int
)	O
{	O
char	O
*	O
tname	pointer
;	O
char	O
*	O
sname	pointer
;	O
unsigned	O
int	O
len	long
;	O
asection	struct
*	O
n	pointer
;	O
struct	O
bfd_link_hash_entry	struct
*	O
h	pointer
;	O
len	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
tname	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	function
(	O
tname	pointer
,	O
name	pointer
,	O
len	long
+	O
1	int
)	O
;	O
while	O
(	O
len	long
&&	O
ISDIGIT	O
(	O
tname	pointer
[	O
len	long
-	O
1	int
]	O
)	O
)	O
len	long
--	O
;	O
if	O
(	O
len	long
>	O
1	int
&&	O
tname	pointer
[	O
len	long
-	O
1	int
]	O
==	O
'.'	O
)	O
tname	pointer
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
bfd_family_coff	function
(	O
abfd	pointer
)	O
&&	O
strlen	function
(	O
tname	pointer
)	O
>	O
5	int
)	O
{	O
if	O
(	O
CONST_STRNEQ	O
(	O
name	pointer
,	O
".stab"	pointer
)	O
||	O
strcmp	function
(	O
name	pointer
,	O
"$GDB_SYMBOLS$"	pointer
)	O
==	O
0	int
)	O
{	O
einfo	pointer
(	O
_	O
(	O
"%F%P: cannot create split section name for %s\n"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
tname	pointer
[	O
5	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
(	O
sname	pointer
=	O
bfd_get_unique_section_name	function
(	O
abfd	pointer
,	O
tname	pointer
,	O
count	int
)	O
)	O
==	O
NULL	O
||	O
(	O
n	pointer
=	O
bfd_make_section_anyway	function
(	O
abfd	pointer
,	O
sname	pointer
)	O
)	O
==	O
NULL	O
||	O
(	O
h	pointer
=	O
bfd_link_hash_lookup	function
(	O
link_info	struct
.	O
hash	long
,	O
sname	pointer
,	O
TRUE	int
,	O
TRUE	int
,	O
FALSE	int
)	O
)	O
==	O
NULL	O
)	O
{	O
einfo	pointer
(	O
_	O
(	O
"%F%P: clone section failed: %E\n"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
free	function
(	O
tname	pointer
)	O
;	O
h	pointer
->	O
type	enum
=	O
bfd_link_hash_defined	int
;	O
h	pointer
->	O
u	union
.	O
def	struct
.	O
value	long
=	O
0	int
;	O
h	pointer
->	O
u	union
.	O
def	struct
.	O
section	pointer
=	O
n	pointer
;	O
n	pointer
->	O
flags	int
=	O
s	pointer
->	O
flags	int
;	O
n	pointer
->	O
vma	long
=	O
s	pointer
->	O
vma	long
;	O
n	pointer
->	O
user_set_vma	int
=	O
s	pointer
->	O
user_set_vma	int
;	O
n	pointer
->	O
lma	long
=	O
s	pointer
->	O
lma	long
;	O
n	pointer
->	O
size	int
=	O
0	int
;	O
n	pointer
->	O
output_offset	long
=	O
s	pointer
->	O
output_offset	long
;	O
n	pointer
->	O
output_section	pointer
=	O
n	pointer
;	O
n	pointer
->	O
orelocation	pointer
=	O
0	int
;	O
n	pointer
->	O
reloc_count	int
=	O
0	int
;	O
n	pointer
->	O
alignment_power	int
=	O
s	pointer
->	O
alignment_power	int
;	O
bfd_copy_private_section_data	function
(	O
abfd	pointer
,	O
s	pointer
,	O
abfd	pointer
,	O
n	pointer
)	O
;	O
return	O
n	pointer
;	O
}	O
static	O
void	O
split_sections	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
bfd_link_info	struct
*	O
info	pointer
)	O
{	O
asection	struct
*	O
original_sec	pointer
;	O
int	O
nsecs	int
=	O
abfd	pointer
->	O
section_count	int
;	O
sanity_check	O
(	O
abfd	pointer
)	O
;	O
for	O
(	O
original_sec	pointer
=	O
abfd	pointer
->	O
sections	pointer
;	O
original_sec	pointer
&&	O
nsecs	int
;	O
original_sec	pointer
=	O
original_sec	pointer
->	O
next	pointer
,	O
nsecs	int
--	O
)	O
{	O
int	O
count	int
=	O
0	int
;	O
unsigned	O
int	O
lines	int
=	O
0	int
;	O
unsigned	O
int	O
relocs	int
=	O
0	int
;	O
bfd_size_type	long
sec_size	long
=	O
0	int
;	O
struct	O
bfd_link_order	struct
*	O
l	pointer
;	O
struct	O
bfd_link_order	struct
*	O
p	pointer
;	O
bfd_vma	long
vma	long
=	O
original_sec	pointer
->	O
vma	long
;	O
asection	struct
*	O
cursor	pointer
=	O
original_sec	pointer
;	O
for	O
(	O
l	pointer
=	O
NULL	O
,	O
p	pointer
=	O
cursor	pointer
->	O
map_head	union
.	O
link_order	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
l	pointer
->	O
next	pointer
)	O
{	O
unsigned	O
int	O
thislines	int
=	O
0	int
;	O
unsigned	O
int	O
thisrelocs	int
=	O
0	int
;	O
bfd_size_type	long
thissize	long
=	O
0	int
;	O
if	O
(	O
p	pointer
->	O
type	enum
==	O
bfd_indirect_link_order	int
)	O
{	O
asection	struct
*	O
sec	pointer
;	O
sec	pointer
=	O
p	pointer
->	O
u	union
.	O
indirect	struct
.	O
section	pointer
;	O
if	O
(	O
info	pointer
->	O
strip	enum
==	O
strip_none	int
||	O
info	pointer
->	O
strip	enum
==	O
strip_some	int
)	O
thislines	int
=	O
sec	pointer
->	O
lineno_count	int
;	O
if	O
(	O
bfd_link_relocatable	O
(	O
info	pointer
)	O
)	O
thisrelocs	int
=	O
sec	pointer
->	O
reloc_count	int
;	O
thissize	long
=	O
sec	pointer
->	O
size	int
;	O
}	O
else	O
if	O
(	O
bfd_link_relocatable	O
(	O
info	pointer
)	O
&&	O
(	O
p	pointer
->	O
type	enum
==	O
bfd_section_reloc_link_order	int
||	O
p	pointer
->	O
type	enum
==	O
bfd_symbol_reloc_link_order	int
)	O
)	O
thisrelocs	int
++	O
;	O
if	O
(	O
l	pointer
!=	O
NULL	O
&&	O
(	O
thisrelocs	int
+	O
relocs	int
>=	O
config	struct
.	O
split_by_reloc	int
||	O
thislines	int
+	O
lines	int
>=	O
config	struct
.	O
split_by_reloc	int
||	O
(	O
thissize	long
+	O
sec_size	long
>=	O
config	struct
.	O
split_by_file	long
)	O
)	O
&&	O
!	O
unsplittable_name	function
(	O
cursor	pointer
->	O
name	pointer
)	O
)	O
{	O
bfd_vma	long
shift_offset	long
;	O
asection	struct
*	O
n	pointer
;	O
n	pointer
=	O
clone_section	function
(	O
abfd	pointer
,	O
cursor	pointer
,	O
original_sec	pointer
->	O
name	pointer
,	O
&	O
count	int
)	O
;	O
n	pointer
->	O
map_head	union
.	O
link_order	pointer
=	O
p	pointer
;	O
n	pointer
->	O
map_tail	union
.	O
link_order	pointer
=	O
cursor	pointer
->	O
map_tail	union
.	O
link_order	pointer
;	O
cursor	pointer
->	O
map_tail	union
.	O
link_order	pointer
=	O
l	pointer
;	O
l	pointer
->	O
next	pointer
=	O
NULL	O
;	O
l	pointer
=	O
p	pointer
;	O
dump	O
(	O
"before snip"	pointer
,	O
cursor	pointer
,	O
n	pointer
)	O
;	O
shift_offset	long
=	O
p	pointer
->	O
offset	long
;	O
n	pointer
->	O
size	int
=	O
cursor	pointer
->	O
size	int
-	O
shift_offset	long
;	O
cursor	pointer
->	O
size	int
=	O
shift_offset	long
;	O
vma	long
+=	O
shift_offset	long
;	O
n	pointer
->	O
lma	long
=	O
n	pointer
->	O
vma	long
=	O
vma	long
;	O
do	O
{	O
p	pointer
->	O
offset	long
-=	O
shift_offset	long
;	O
if	O
(	O
p	pointer
->	O
type	enum
==	O
bfd_indirect_link_order	int
)	O
{	O
p	pointer
->	O
u	union
.	O
indirect	struct
.	O
section	pointer
->	O
output_section	pointer
=	O
n	pointer
;	O
p	pointer
->	O
u	union
.	O
indirect	struct
.	O
section	pointer
->	O
output_offset	long
=	O
p	pointer
->	O
offset	long
;	O
}	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
}	O
while	O
(	O
p	pointer
)	O
;	O
dump	O
(	O
"after snip"	pointer
,	O
cursor	pointer
,	O
n	pointer
)	O
;	O
cursor	pointer
=	O
n	pointer
;	O
relocs	int
=	O
thisrelocs	int
;	O
lines	int
=	O
thislines	int
;	O
sec_size	long
=	O
thissize	long
;	O
}	O
else	O
{	O
l	pointer
=	O
p	pointer
;	O
relocs	int
+=	O
thisrelocs	int
;	O
lines	int
+=	O
thislines	int
;	O
sec_size	long
+=	O
thissize	long
;	O
}	O
}	O
}	O
sanity_check	O
(	O
abfd	pointer
)	O
;	O
}	O
void	O
ldwrite	function
(	O
void	O
)	O
{	O
bfd_set_error	function
(	O
bfd_error_no_error	int
)	O
;	O
lang_clear_os_map	function
(	O
)	O
;	O
lang_for_each_statement	function
(	O
build_link_order	function
)	O
;	O
if	O
(	O
config	struct
.	O
split_by_reloc	int
!=	O
(	O
unsigned	O
)	O
-	O
1	int
||	O
config	struct
.	O
split_by_file	long
!=	O
(	O
bfd_size_type	long
)	O
-	O
1	int
)	O
split_sections	function
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
&	O
link_info	struct
)	O
;	O
if	O
(	O
!	O
bfd_final_link	O
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
&	O
link_info	struct
)	O
)	O
{	O
if	O
(	O
bfd_get_error	function
(	O
)	O
!=	O
bfd_error_no_error	int
)	O
einfo	pointer
(	O
_	O
(	O
"%F%P: final link failed: %E\n"	pointer
)	O
)	O
;	O
else	O
xexit	function
(	O
1	int
)	O
;	O
}	O
}	O
