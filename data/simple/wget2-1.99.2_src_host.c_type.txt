static	O
wget_hashmap	struct
*	O
hosts	pointer
;	O
static	O
wget_thread_mutex	pointer
hosts_mutex	pointer
;	O
static	O
int	O
qsize	int
;	O
void	O
host_init	function
(	O
void	O
)	O
{	O
wget_thread_mutex_init	function
(	O
&	O
hosts_mutex	pointer
)	O
;	O
}	O
void	O
host_exit	function
(	O
void	O
)	O
{	O
wget_thread_mutex_destroy	function
(	O
&	O
hosts_mutex	pointer
)	O
;	O
}	O
static	O
int	O
_host_compare	function
(	O
const	O
HOST	struct
*	O
host1	pointer
,	O
const	O
HOST	struct
*	O
host2	pointer
)	O
{	O
int	O
n	long
;	O
if	O
(	O
host1	pointer
->	O
scheme	enum
!=	O
host2	pointer
->	O
scheme	enum
)	O
return	O
host1	pointer
->	O
scheme	enum
<	O
host2	pointer
->	O
scheme	enum
?	O
-	O
1	int
:	O
1	int
;	O
if	O
(	O
(	O
n	long
=	O
wget_strcmp	function
(	O
host1	pointer
->	O
host	pointer
,	O
host2	pointer
->	O
host	pointer
)	O
)	O
)	O
return	O
n	long
;	O
return	O
host1	pointer
->	O
port	short
<	O
host2	pointer
->	O
port	short
?	O
-	O
1	int
:	O
(	O
host1	pointer
->	O
port	short
>	O
host2	pointer
->	O
port	short
?	O
1	int
:	O
0	int
)	O
;	O
}	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	pointer
)	O
)	O
)	O
static	O
unsigned	O
int	O
_host_hash	function
(	O
const	O
HOST	struct
*	O
host	pointer
)	O
{	O
unsigned	O
int	O
hash	pointer
=	O
host	pointer
->	O
port	short
;	O
const	O
unsigned	O
char	O
*	O
p	pointer
;	O
hash	pointer
=	O
hash	pointer
*	O
101	int
+	O
host	pointer
->	O
scheme	enum
;	O
for	O
(	O
p	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
host	pointer
->	O
host	pointer
;	O
p	pointer
&&	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
hash	pointer
=	O
hash	pointer
*	O
101	int
+	O
*	O
p	pointer
;	O
return	O
hash	pointer
;	O
}	O
static	O
void	O
_free_host_entry	function
(	O
HOST	struct
*	O
host	pointer
)	O
{	O
if	O
(	O
host	pointer
)	O
{	O
host_queue_free	function
(	O
host	pointer
)	O
;	O
wget_robots_free	function
(	O
&	O
host	pointer
->	O
robots	pointer
)	O
;	O
wget_xfree	O
(	O
host	pointer
)	O
;	O
}	O
}	O
HOST	struct
*	O
host_add	function
(	O
wget_iri	struct
*	O
iri	pointer
)	O
{	O
wget_thread_mutex_lock	function
(	O
hosts_mutex	pointer
)	O
;	O
if	O
(	O
!	O
hosts	pointer
)	O
{	O
hosts	pointer
=	O
wget_hashmap_create	function
(	O
16	int
,	O
(	O
wget_hashmap_hash_fn	function
*	O
)	O
_host_hash	function
,	O
(	O
wget_hashmap_compare_fn	function
*	O
)	O
_host_compare	function
)	O
;	O
wget_hashmap_set_key_destructor	function
(	O
hosts	pointer
,	O
(	O
wget_hashmap_key_destructor	function
*	O
)	O
_free_host_entry	function
)	O
;	O
}	O
HOST	struct
*	O
hostp	pointer
=	O
NULL	O
,	O
host	pointer
=	O
{	O
.	O
scheme	enum
=	O
iri	pointer
->	O
scheme	enum
,	O
.	O
host	pointer
=	O
iri	pointer
->	O
host	pointer
,	O
.	O
port	short
=	O
iri	pointer
->	O
port	short
}	O
;	O
if	O
(	O
!	O
wget_hashmap_contains	function
(	O
hosts	pointer
,	O
&	O
host	pointer
)	O
)	O
{	O
hostp	pointer
=	O
wget_memdup	function
(	O
&	O
host	pointer
,	O
sizeof	O
(	O
host	pointer
)	O
)	O
;	O
wget_hashmap_put	function
(	O
hosts	pointer
,	O
hostp	pointer
,	O
hostp	pointer
)	O
;	O
}	O
wget_thread_mutex_unlock	function
(	O
hosts_mutex	pointer
)	O
;	O
return	O
hostp	pointer
;	O
}	O
HOST	struct
*	O
host_get	function
(	O
wget_iri	struct
*	O
iri	pointer
)	O
{	O
HOST	struct
*	O
hostp	pointer
,	O
host	pointer
=	O
{	O
.	O
scheme	enum
=	O
iri	pointer
->	O
scheme	enum
,	O
.	O
host	pointer
=	O
iri	pointer
->	O
host	pointer
,	O
.	O
port	short
=	O
iri	pointer
->	O
port	short
}	O
;	O
wget_thread_mutex_lock	function
(	O
hosts_mutex	pointer
)	O
;	O
if	O
(	O
!	O
hosts	pointer
||	O
!	O
wget_hashmap_get	function
(	O
hosts	pointer
,	O
&	O
host	pointer
,	O
&	O
hostp	pointer
)	O
)	O
hostp	pointer
=	O
NULL	O
;	O
wget_thread_mutex_unlock	function
(	O
hosts_mutex	pointer
)	O
;	O
return	O
hostp	pointer
;	O
}	O
struct	O
_find_free_job_context	struct
{	O
JOB	struct
*	O
job	pointer
;	O
long	O
long	O
now	long long
;	O
long	O
long	O
pause	function
;	O
}	O
;	O
static	O
int	O
_search_queue_for_free_job	function
(	O
struct	O
_find_free_job_context	struct
*	O
ctx	pointer
,	O
JOB	struct
*	O
job	pointer
)	O
{	O
if	O
(	O
job	pointer
->	O
parts	pointer
)	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
job	pointer
->	O
parts	pointer
)	O
;	O
it	int
++	O
)	O
{	O
PART	struct
*	O
part	pointer
=	O
wget_vector_get	function
(	O
job	pointer
->	O
parts	pointer
,	O
it	int
)	O
;	O
if	O
(	O
!	O
part	pointer
->	O
inuse	bool
)	O
{	O
part	pointer
->	O
inuse	bool
=	O
1	int
;	O
part	pointer
->	O
used_by	long
=	O
wget_thread_self	function
(	O
)	O
;	O
job	pointer
->	O
part	pointer
=	O
part	pointer
;	O
ctx	pointer
->	O
job	pointer
=	O
job	pointer
;	O
debug_printf	O
(	O
"dequeue chunk %d/%d %s\n"	pointer
,	O
it	int
+	O
1	int
,	O
wget_vector_size	function
(	O
job	pointer
->	O
parts	pointer
)	O
,	O
job	pointer
->	O
metalink	pointer
->	O
name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
!	O
job	pointer
->	O
inuse	bool
)	O
{	O
job	pointer
->	O
inuse	bool
=	O
job	pointer
->	O
done	bool
=	O
1	int
;	O
job	pointer
->	O
used_by	long
=	O
wget_thread_self	function
(	O
)	O
;	O
job	pointer
->	O
part	pointer
=	O
NULL	O
;	O
ctx	pointer
->	O
job	pointer
=	O
job	pointer
;	O
debug_printf	O
(	O
"dequeue job %s\n"	pointer
,	O
job	pointer
->	O
iri	pointer
->	O
uri	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
WGET_GCC_NONNULL_ALL	O
_search_host_for_free_job	function
(	O
struct	O
_find_free_job_context	struct
*	O
ctx	pointer
,	O
HOST	struct
*	O
host	pointer
)	O
{	O
if	O
(	O
host	pointer
->	O
blocked	bool
)	O
{	O
debug_printf	O
(	O
"host %s is blocked (qsize=%d)\n"	pointer
,	O
host	pointer
->	O
host	pointer
,	O
host	pointer
->	O
qsize	int
)	O
;	O
return	O
0	int
;	O
}	O
long	O
long	O
pause	function
=	O
host	pointer
->	O
retry_ts	long long
-	O
ctx	pointer
->	O
now	long long
;	O
if	O
(	O
pause	function
>	O
0	int
)	O
{	O
debug_printf	O
(	O
"host %s is paused %lldms\n"	pointer
,	O
host	pointer
->	O
host	pointer
,	O
pause	function
)	O
;	O
if	O
(	O
!	O
ctx	pointer
->	O
pause	function
||	O
ctx	pointer
->	O
pause	function
<	O
pause	function
)	O
ctx	pointer
->	O
pause	function
=	O
pause	function
;	O
return	O
0	int
;	O
}	O
if	O
(	O
host	pointer
->	O
robot_job	pointer
)	O
{	O
if	O
(	O
!	O
host	pointer
->	O
robot_job	pointer
->	O
inuse	bool
)	O
{	O
host	pointer
->	O
robot_job	pointer
->	O
inuse	bool
=	O
host	pointer
->	O
robot_job	pointer
->	O
done	bool
=	O
1	int
;	O
host	pointer
->	O
robot_job	pointer
->	O
used_by	long
=	O
wget_thread_self	function
(	O
)	O
;	O
ctx	pointer
->	O
job	pointer
=	O
host	pointer
->	O
robot_job	pointer
;	O
debug_printf	O
(	O
"host %s dequeue robot job\n"	pointer
,	O
host	pointer
->	O
host	pointer
)	O
;	O
return	O
1	int
;	O
}	O
debug_printf	O
(	O
"robot job still in progress\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
wget_list_browse	function
(	O
host	pointer
->	O
queue	pointer
,	O
(	O
wget_list_browse_fn	function
*	O
)	O
_search_queue_for_free_job	function
,	O
ctx	pointer
)	O
;	O
return	O
!	O
!	O
ctx	pointer
->	O
job	pointer
;	O
}	O
JOB	struct
*	O
host_get_job	function
(	O
HOST	struct
*	O
host	pointer
,	O
long	O
long	O
*	O
pause	function
)	O
{	O
struct	O
_find_free_job_context	struct
ctx	pointer
=	O
{	O
.	O
now	long long
=	O
wget_get_timemillis	function
(	O
)	O
}	O
;	O
if	O
(	O
host	pointer
)	O
{	O
_search_host_for_free_job	function
(	O
&	O
ctx	pointer
,	O
host	pointer
)	O
;	O
}	O
else	O
{	O
wget_thread_mutex_lock	function
(	O
hosts_mutex	pointer
)	O
;	O
wget_hashmap_browse	function
(	O
hosts	pointer
,	O
(	O
wget_hashmap_browse_fn	function
*	O
)	O
_search_host_for_free_job	function
,	O
&	O
ctx	pointer
)	O
;	O
wget_thread_mutex_unlock	function
(	O
hosts_mutex	pointer
)	O
;	O
}	O
if	O
(	O
pause	function
)	O
*	O
pause	function
=	O
ctx	pointer
.	O
pause	function
;	O
return	O
ctx	pointer
.	O
job	pointer
;	O
}	O
static	O
int	O
_release_job	function
(	O
wget_thread_id	long
*	O
ctx	pointer
,	O
JOB	struct
*	O
job	pointer
)	O
{	O
wget_thread_id	long
self	long
=	O
*	O
ctx	pointer
;	O
if	O
(	O
job	pointer
->	O
parts	pointer
)	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	function
(	O
job	pointer
->	O
parts	pointer
)	O
;	O
it	int
++	O
)	O
{	O
PART	struct
*	O
part	pointer
=	O
wget_vector_get	function
(	O
job	pointer
->	O
parts	pointer
,	O
it	int
)	O
;	O
if	O
(	O
part	pointer
->	O
inuse	bool
&&	O
part	pointer
->	O
used_by	long
==	O
self	long
)	O
{	O
part	pointer
->	O
inuse	bool
=	O
0	int
;	O
part	pointer
->	O
used_by	long
=	O
0	int
;	O
debug_printf	O
(	O
"released chunk %d/%d %s\n"	pointer
,	O
it	int
+	O
1	int
,	O
wget_vector_size	function
(	O
job	pointer
->	O
parts	pointer
)	O
,	O
job	pointer
->	O
local_filename	pointer
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
job	pointer
->	O
inuse	bool
&&	O
job	pointer
->	O
used_by	long
==	O
self	long
)	O
{	O
job	pointer
->	O
inuse	bool
=	O
job	pointer
->	O
done	bool
=	O
0	int
;	O
job	pointer
->	O
used_by	long
=	O
0	int
;	O
debug_printf	O
(	O
"released job %s\n"	pointer
,	O
job	pointer
->	O
iri	pointer
->	O
uri	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
host_release_jobs	function
(	O
HOST	struct
*	O
host	pointer
)	O
{	O
if	O
(	O
!	O
host	pointer
)	O
return	O
;	O
wget_thread_id	long
self	long
=	O
wget_thread_self	function
(	O
)	O
;	O
wget_thread_mutex_lock	function
(	O
hosts_mutex	pointer
)	O
;	O
if	O
(	O
host	pointer
->	O
robot_job	pointer
)	O
{	O
if	O
(	O
host	pointer
->	O
robot_job	pointer
->	O
inuse	bool
&&	O
host	pointer
->	O
robot_job	pointer
->	O
used_by	long
==	O
self	long
)	O
{	O
host	pointer
->	O
robot_job	pointer
->	O
inuse	bool
=	O
host	pointer
->	O
robot_job	pointer
->	O
done	bool
=	O
0	int
;	O
host	pointer
->	O
robot_job	pointer
->	O
used_by	long
=	O
0	int
;	O
debug_printf	O
(	O
"released robots.txt job\n"	pointer
)	O
;	O
}	O
}	O
wget_list_browse	function
(	O
host	pointer
->	O
queue	pointer
,	O
(	O
wget_list_browse_fn	function
*	O
)	O
_release_job	function
,	O
&	O
self	long
)	O
;	O
wget_thread_mutex_unlock	function
(	O
hosts_mutex	pointer
)	O
;	O
}	O
void	O
host_add_job	function
(	O
HOST	struct
*	O
host	pointer
,	O
const	O
JOB	struct
*	O
job	pointer
)	O
{	O
JOB	struct
*	O
jobp	pointer
;	O
debug_printf	O
(	O
"%s: job fname %s\n"	pointer
,	O
__func__	O
,	O
job	pointer
->	O
local_filename	pointer
)	O
;	O
wget_thread_mutex_lock	function
(	O
hosts_mutex	pointer
)	O
;	O
jobp	pointer
=	O
wget_list_append	function
(	O
&	O
host	pointer
->	O
queue	pointer
,	O
job	pointer
,	O
sizeof	O
(	O
JOB	struct
)	O
)	O
;	O
host	pointer
->	O
qsize	int
++	O
;	O
if	O
(	O
!	O
host	pointer
->	O
blocked	bool
)	O
qsize	int
++	O
;	O
jobp	pointer
->	O
host	pointer
=	O
host	pointer
;	O
if	O
(	O
jobp	pointer
->	O
iri	pointer
)	O
debug_printf	O
(	O
"%s: %p %s\n"	pointer
,	O
__func__	O
,	O
(	O
void	O
*	O
)	O
jobp	pointer
,	O
jobp	pointer
->	O
iri	pointer
->	O
uri	pointer
)	O
;	O
else	O
if	O
(	O
jobp	pointer
->	O
metalink	pointer
)	O
debug_printf	O
(	O
"%s: %p %s\n"	pointer
,	O
__func__	O
,	O
(	O
void	O
*	O
)	O
jobp	pointer
,	O
jobp	pointer
->	O
metalink	pointer
->	O
name	pointer
)	O
;	O
debug_printf	O
(	O
"%s: qsize %d host-qsize=%d\n"	pointer
,	O
__func__	O
,	O
qsize	int
,	O
host	pointer
->	O
qsize	int
)	O
;	O
wget_thread_mutex_unlock	function
(	O
hosts_mutex	pointer
)	O
;	O
}	O
void	O
host_add_robotstxt_job	function
(	O
HOST	struct
*	O
host	pointer
,	O
wget_iri	struct
*	O
iri	pointer
,	O
bool	bool
http_fallback	bool
)	O
{	O
JOB	struct
*	O
job	pointer
;	O
job	pointer
=	O
job_init	function
(	O
NULL	O
,	O
iri	pointer
,	O
http_fallback	bool
)	O
;	O
job	pointer
->	O
host	pointer
=	O
host	pointer
;	O
job	pointer
->	O
robotstxt	bool
=	O
1	int
;	O
job	pointer
->	O
local_filename	pointer
=	O
get_local_filename	function
(	O
job	pointer
->	O
iri	pointer
)	O
;	O
wget_thread_mutex_lock	function
(	O
hosts_mutex	pointer
)	O
;	O
host	pointer
->	O
robot_job	pointer
=	O
job	pointer
;	O
host	pointer
->	O
qsize	int
++	O
;	O
if	O
(	O
!	O
host	pointer
->	O
blocked	bool
)	O
qsize	int
++	O
;	O
debug_printf	O
(	O
"%s: %p %s\n"	pointer
,	O
__func__	O
,	O
(	O
void	O
*	O
)	O
job	pointer
,	O
job	pointer
->	O
iri	pointer
->	O
uri	pointer
)	O
;	O
debug_printf	O
(	O
"%s: qsize %d host-qsize=%d\n"	pointer
,	O
__func__	O
,	O
qsize	int
,	O
host	pointer
->	O
qsize	int
)	O
;	O
wget_thread_mutex_unlock	function
(	O
hosts_mutex	pointer
)	O
;	O
}	O
static	O
void	O
_host_remove_job	function
(	O
HOST	struct
*	O
host	pointer
,	O
JOB	struct
*	O
job	pointer
)	O
{	O
debug_printf	O
(	O
"%s: %p\n"	pointer
,	O
__func__	O
,	O
(	O
void	O
*	O
)	O
job	pointer
)	O
;	O
if	O
(	O
job	pointer
==	O
host	pointer
->	O
robot_job	pointer
)	O
{	O
if	O
(	O
host	pointer
->	O
robots	pointer
)	O
{	O
JOB	struct
*	O
next	pointer
,	O
*	O
thejob	pointer
=	O
wget_list_getfirst	function
(	O
host	pointer
->	O
queue	pointer
)	O
;	O
for	O
(	O
int	O
max	int
=	O
host	pointer
->	O
qsize	int
-	O
1	int
;	O
max	int
>	O
0	int
;	O
max	int
--	O
,	O
thejob	pointer
=	O
next	pointer
)	O
{	O
next	pointer
=	O
wget_list_getnext	function
(	O
thejob	pointer
)	O
;	O
if	O
(	O
thejob	pointer
->	O
requested_by_user	bool
)	O
continue	O
;	O
if	O
(	O
thejob	pointer
->	O
sitemap	pointer
)	O
continue	O
;	O
for	O
(	O
int	O
it	int
=	O
0	int
,	O
n	long
=	O
wget_robots_get_path_count	function
(	O
host	pointer
->	O
robots	pointer
)	O
;	O
it	int
<	O
n	long
;	O
it	int
++	O
)	O
{	O
wget_string	struct
*	O
path	pointer
=	O
wget_robots_get_path	function
(	O
host	pointer
->	O
robots	pointer
,	O
it	int
)	O
;	O
if	O
(	O
path	pointer
->	O
len	long
&&	O
!	O
strncmp	function
(	O
path	pointer
->	O
p	pointer
+	O
1	int
,	O
thejob	pointer
->	O
iri	pointer
->	O
path	pointer
?	O
thejob	pointer
->	O
iri	pointer
->	O
path	pointer
:	O
""	pointer
,	O
path	pointer
->	O
len	long
-	O
1	int
)	O
)	O
{	O
info_printf	O
(	O
_	O
(	O
"URL '%s' not followed (disallowed by robots.txt)\n"	pointer
)	O
,	O
thejob	pointer
->	O
iri	pointer
->	O
uri	pointer
)	O
;	O
_host_remove_job	function
(	O
host	pointer
,	O
thejob	pointer
)	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
job_free	function
(	O
job	pointer
)	O
;	O
xfree	O
(	O
host	pointer
->	O
robot_job	pointer
)	O
;	O
}	O
else	O
{	O
job_free	function
(	O
job	pointer
)	O
;	O
wget_list_remove	function
(	O
&	O
host	pointer
->	O
queue	pointer
,	O
job	pointer
)	O
;	O
}	O
host	pointer
->	O
qsize	int
--	O
;	O
if	O
(	O
!	O
host	pointer
->	O
blocked	bool
)	O
qsize	int
--	O
;	O
}	O
void	O
host_remove_job	function
(	O
HOST	struct
*	O
host	pointer
,	O
JOB	struct
*	O
job	pointer
)	O
{	O
wget_thread_mutex_lock	function
(	O
hosts_mutex	pointer
)	O
;	O
_host_remove_job	function
(	O
host	pointer
,	O
job	pointer
)	O
;	O
debug_printf	O
(	O
"%s: qsize=%d host->qsize=%d\n"	pointer
,	O
__func__	O
,	O
qsize	int
,	O
host	pointer
->	O
qsize	int
)	O
;	O
wget_thread_mutex_unlock	function
(	O
hosts_mutex	pointer
)	O
;	O
}	O
void	O
hosts_free	function
(	O
void	O
)	O
{	O
wget_hashmap_free	function
(	O
&	O
hosts	pointer
)	O
;	O
}	O
void	O
host_increase_failure	function
(	O
HOST	struct
*	O
host	pointer
)	O
{	O
wget_thread_mutex_lock	function
(	O
hosts_mutex	pointer
)	O
;	O
host	pointer
->	O
failures	int
++	O
;	O
host	pointer
->	O
retry_ts	long long
=	O
wget_get_timemillis	function
(	O
)	O
+	O
host	pointer
->	O
failures	int
*	O
1000	int
;	O
debug_printf	O
(	O
"%s: %s failures=%d\n"	pointer
,	O
__func__	O
,	O
host	pointer
->	O
host	pointer
,	O
host	pointer
->	O
failures	int
)	O
;	O
if	O
(	O
config	struct
.	O
tries	int
&&	O
host	pointer
->	O
failures	int
>=	O
config	struct
.	O
tries	int
)	O
{	O
if	O
(	O
!	O
host	pointer
->	O
blocked	bool
)	O
{	O
host	pointer
->	O
blocked	bool
=	O
1	int
;	O
qsize	int
-=	O
host	pointer
->	O
qsize	int
;	O
debug_printf	O
(	O
"%s: qsize=%d\n"	pointer
,	O
__func__	O
,	O
qsize	int
)	O
;	O
}	O
}	O
wget_thread_mutex_unlock	function
(	O
hosts_mutex	pointer
)	O
;	O
}	O
void	O
host_final_failure	function
(	O
HOST	struct
*	O
host	pointer
)	O
{	O
wget_thread_mutex_lock	function
(	O
hosts_mutex	pointer
)	O
;	O
if	O
(	O
!	O
host	pointer
->	O
blocked	bool
)	O
{	O
host	pointer
->	O
blocked	bool
=	O
1	int
;	O
qsize	int
-=	O
host	pointer
->	O
qsize	int
;	O
debug_printf	O
(	O
"%s: qsize=%d\n"	pointer
,	O
__func__	O
,	O
qsize	int
)	O
;	O
}	O
wget_thread_mutex_unlock	function
(	O
hosts_mutex	pointer
)	O
;	O
}	O
void	O
host_reset_failure	function
(	O
HOST	struct
*	O
host	pointer
)	O
{	O
wget_thread_mutex_lock	function
(	O
hosts_mutex	pointer
)	O
;	O
host	pointer
->	O
failures	int
=	O
0	int
;	O
host	pointer
->	O
retry_ts	long long
=	O
0	int
;	O
if	O
(	O
host	pointer
->	O
blocked	bool
)	O
{	O
host	pointer
->	O
blocked	bool
=	O
0	int
;	O
qsize	int
+=	O
host	pointer
->	O
qsize	int
;	O
debug_printf	O
(	O
"%s: qsize=%d\n"	pointer
,	O
__func__	O
,	O
qsize	int
)	O
;	O
}	O
wget_thread_mutex_unlock	function
(	O
hosts_mutex	pointer
)	O
;	O
}	O
int	O
queue_empty	function
(	O
void	O
)	O
{	O
return	O
!	O
qsize	int
;	O
}	O
static	O
int	O
_queue_free_func	function
(	O
void	O
*	O
context	pointer
WGET_GCC_UNUSED	O
,	O
JOB	struct
*	O
job	pointer
)	O
{	O
job_free	function
(	O
job	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
host_queue_free	function
(	O
HOST	struct
*	O
host	pointer
)	O
{	O
wget_thread_mutex_lock	function
(	O
hosts_mutex	pointer
)	O
;	O
wget_list_browse	function
(	O
host	pointer
->	O
queue	pointer
,	O
(	O
wget_list_browse_fn	function
*	O
)	O
_queue_free_func	function
,	O
NULL	O
)	O
;	O
wget_list_free	function
(	O
&	O
host	pointer
->	O
queue	pointer
)	O
;	O
if	O
(	O
host	pointer
->	O
robot_job	pointer
)	O
{	O
job_free	function
(	O
host	pointer
->	O
robot_job	pointer
)	O
;	O
xfree	O
(	O
host	pointer
->	O
robot_job	pointer
)	O
;	O
}	O
if	O
(	O
!	O
host	pointer
->	O
blocked	bool
)	O
qsize	int
-=	O
host	pointer
->	O
qsize	int
;	O
host	pointer
->	O
qsize	int
=	O
0	int
;	O
wget_thread_mutex_unlock	function
(	O
hosts_mutex	pointer
)	O
;	O
}	O
int	O
queue_size	function
(	O
void	O
)	O
{	O
debug_printf	O
(	O
"%s: qsize=%d\n"	pointer
,	O
__func__	O
,	O
qsize	int
)	O
;	O
return	O
qsize	int
;	O
}	O
