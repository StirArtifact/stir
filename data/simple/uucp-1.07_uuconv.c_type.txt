const	O
char	O
uuconv_rcsid	array
[	O
]	O
=	O
"$Id: uuconv.c,v 1.30 2002/03/05 19:10:42 ian Rel $"	pointer
;	O
static	O
void	O
uvusage	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
uvhelp	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
uvwrite_time	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
struct	O
uuconf_timespan	struct
*	O
qtime	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_string	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
const	O
char	O
*	O
zarg	pointer
,	O
const	O
char	O
*	O
zcmd	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_size	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
struct	O
uuconf_timespan	struct
*	O
qsize	pointer
,	O
const	O
char	O
*	O
zcmd	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_boolean	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
int	O
iarg	int
,	O
const	O
char	O
*	O
zcmd	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_string_array	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
char	O
*	O
*	O
pz	pointer
,	O
const	O
char	O
*	O
zcmd	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_chat_script	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
char	O
*	O
*	O
pz	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_chat	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
const	O
struct	O
uuconf_chat	struct
*	O
qchat	pointer
,	O
const	O
struct	O
uuconf_chat	struct
*	O
qlast	pointer
,	O
const	O
char	O
*	O
zprefix	pointer
,	O
boolean	int
fforce	int
)	O
)	O
;	O
static	O
void	O
uvwrite_proto_params	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
const	O
struct	O
uuconf_proto_param	struct
*	O
qparam	pointer
,	O
const	O
char	O
*	O
zprefix	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_taylor_system	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_v2_system	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_hdb_system	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
)	O
)	O
;	O
static	O
boolean	int
fvperm_string_cmp	function
P	O
(	O
(	O
const	O
char	O
*	O
z1	pointer
,	O
const	O
char	O
*	O
z2	pointer
)	O
)	O
;	O
static	O
boolean	int
fvperm_array_cmp	function
P	O
(	O
(	O
const	O
char	O
*	O
*	O
pz1	pointer
,	O
const	O
char	O
*	O
*	O
pz2	pointer
)	O
)	O
;	O
static	O
void	O
uvadd_perm	function
P	O
(	O
(	O
struct	O
shpermissions	struct
*	O
qadd	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_perms	function
P	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
uvwrite_perm_array	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
const	O
char	O
*	O
*	O
pz	pointer
,	O
const	O
char	O
*	O
zcmd	pointer
,	O
size_t	long
*	O
pccol	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_perm_boolean	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
int	O
f	int
,	O
const	O
char	O
*	O
zcmd	pointer
,	O
size_t	long
*	O
pccol	pointer
,	O
boolean	int
fsendfiles	int
)	O
)	O
;	O
static	O
void	O
uvwrite_perm_rw_array	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
const	O
char	O
*	O
*	O
pz	pointer
,	O
const	O
char	O
*	O
zcmd	pointer
,	O
size_t	long
*	O
pccol	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_perm_string	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
const	O
char	O
*	O
z	pointer
,	O
const	O
char	O
*	O
zcmd	pointer
,	O
size_t	long
*	O
pccol	pointer
)	O
)	O
;	O
static	O
int	O
ivwrite_taylor_port	function
P	O
(	O
(	O
struct	O
uuconf_port	struct
*	O
qport	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
int	O
ivwrite_v2_port	function
P	O
(	O
(	O
struct	O
uuconf_port	struct
*	O
qport	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
int	O
ivwrite_hdb_port	function
P	O
(	O
(	O
struct	O
uuconf_port	struct
*	O
qport	pointer
,	O
pointer	pointer
pinfo	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_taylor_port	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
struct	O
uuconf_port	struct
*	O
qport	pointer
,	O
const	O
char	O
*	O
zprefix	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_taylor_dialer	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
,	O
const	O
char	O
*	O
zprefix	pointer
)	O
)	O
;	O
static	O
void	O
uvwrite_hdb_dialer	function
P	O
(	O
(	O
FILE	struct
*	O
e	pointer
,	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
)	O
)	O
;	O
static	O
void	O
uvuuconf_error	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
int	O
iret	int
)	O
)	O
;	O
const	O
char	O
*	O
zProgram	pointer
;	O
static	O
struct	O
shpermissions	struct
*	O
qVperms	pointer
;	O
enum	O
tconfig	enum
{	O
CONFIG_TAYLOR	int
,	O
CONFIG_V2	int
,	O
CONFIG_HDB	int
}	O
;	O
static	O
const	O
struct	O
option	struct
asVlongopts	array
[	O
]	O
=	O
{	O
{	O
"input"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"output"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"program"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"config"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'I'	O
}	O
,	O
{	O
"debug"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'x'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'v'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
int	O
main	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
const	O
char	O
*	O
zconfig	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
zinput	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
zoutput	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
zprogram	pointer
=	O
NULL	O
;	O
int	O
iopt	int
;	O
enum	O
tconfig	enum
tinput	enum
,	O
toutput	enum
;	O
int	O
iret	int
;	O
pointer	pointer
pinput	pointer
;	O
zProgram	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
while	O
(	O
(	O
iopt	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:I:o:p:vx:"	pointer
,	O
asVlongopts	array
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
iopt	int
)	O
{	O
case	O
'i'	O
:	O
zinput	pointer
=	O
optarg	O
;	O
break	O
;	O
case	O
'o'	O
:	O
zoutput	pointer
=	O
optarg	O
;	O
break	O
;	O
case	O
'p'	O
:	O
zprogram	pointer
=	O
optarg	O
;	O
break	O
;	O
case	O
'I'	O
:	O
zconfig	pointer
=	O
optarg	O
;	O
break	O
;	O
case	O
'x'	O
:	O
break	O
;	O
case	O
'v'	O
:	O
printf	function
(	O
"uuconv (Taylor UUCP) %s\n"	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
"Copyright (C) 1991, 92, 93, 94, 1995, 2002 Ian Lance Taylor\n"	pointer
)	O
;	O
printf	function
(	O
"This program is free software; you may redistribute it under the terms of\n"	pointer
)	O
;	O
printf	function
(	O
"the GNU General Public LIcense.  This program has ABSOLUTELY NO WARRANTY.\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
1	int
:	O
uvhelp	function
(	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
uvusage	function
(	O
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
optind	O
!=	O
argc	int
||	O
zinput	pointer
==	O
NULL	O
||	O
zoutput	pointer
==	O
NULL	O
)	O
uvusage	function
(	O
)	O
;	O
if	O
(	O
strcasecmp	function
(	O
zinput	pointer
,	O
"taylor"	pointer
)	O
==	O
0	int
)	O
tinput	enum
=	O
CONFIG_TAYLOR	int
;	O
else	O
if	O
(	O
strcasecmp	function
(	O
zinput	pointer
,	O
"v2"	pointer
)	O
==	O
0	int
)	O
tinput	enum
=	O
CONFIG_V2	int
;	O
else	O
if	O
(	O
strcasecmp	function
(	O
zinput	pointer
,	O
"hdb"	pointer
)	O
==	O
0	int
)	O
tinput	enum
=	O
CONFIG_HDB	int
;	O
else	O
{	O
uvusage	function
(	O
)	O
;	O
tinput	enum
=	O
CONFIG_TAYLOR	int
;	O
}	O
if	O
(	O
strcasecmp	function
(	O
zoutput	pointer
,	O
"taylor"	pointer
)	O
==	O
0	int
)	O
toutput	enum
=	O
CONFIG_TAYLOR	int
;	O
else	O
if	O
(	O
strcasecmp	function
(	O
zoutput	pointer
,	O
"v2"	pointer
)	O
==	O
0	int
)	O
toutput	enum
=	O
CONFIG_V2	int
;	O
else	O
if	O
(	O
strcasecmp	function
(	O
zoutput	pointer
,	O
"hdb"	pointer
)	O
==	O
0	int
)	O
toutput	enum
=	O
CONFIG_HDB	int
;	O
else	O
{	O
uvusage	function
(	O
)	O
;	O
toutput	enum
=	O
CONFIG_TAYLOR	int
;	O
}	O
if	O
(	O
tinput	enum
==	O
toutput	enum
)	O
uvusage	function
(	O
)	O
;	O
iret	int
=	O
UUCONF_SUCCESS	O
;	O
pinput	pointer
=	O
NULL	O
;	O
switch	O
(	O
tinput	enum
)	O
{	O
case	O
CONFIG_TAYLOR	int
:	O
iret	int
=	O
uuconf_taylor_init	function
(	O
&	O
pinput	pointer
,	O
zprogram	pointer
,	O
zconfig	pointer
)	O
;	O
break	O
;	O
case	O
CONFIG_V2	int
:	O
iret	int
=	O
uuconf_v2_init	function
(	O
&	O
pinput	pointer
)	O
;	O
break	O
;	O
case	O
CONFIG_HDB	int
:	O
iret	int
=	O
uuconf_hdb_init	function
(	O
&	O
pinput	pointer
,	O
zprogram	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
uvuuconf_error	function
(	O
pinput	pointer
,	O
iret	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
{	O
char	O
*	O
*	O
pzsystems	pointer
;	O
char	O
*	O
zsys	pointer
;	O
char	O
abtaylor	array
[	O
sizeof	O
ZCURDIR	pointer
+	O
sizeof	O
SYSFILE	pointer
-	O
1	int
]	O
;	O
char	O
abv2	array
[	O
sizeof	O
ZCURDIR	pointer
+	O
sizeof	O
V2_SYSTEMS	pointer
-	O
1	int
]	O
;	O
char	O
abhdb	array
[	O
sizeof	O
ZCURDIR	pointer
+	O
sizeof	O
HDB_SYSTEMS	pointer
-	O
1	int
]	O
;	O
FILE	struct
*	O
esys	pointer
;	O
char	O
*	O
*	O
pz	pointer
;	O
switch	O
(	O
tinput	enum
)	O
{	O
case	O
CONFIG_TAYLOR	int
:	O
iret	int
=	O
uuconf_taylor_system_names	function
(	O
pinput	pointer
,	O
&	O
pzsystems	pointer
,	O
FALSE	O
)	O
;	O
break	O
;	O
case	O
CONFIG_V2	int
:	O
iret	int
=	O
uuconf_v2_system_names	function
(	O
pinput	pointer
,	O
&	O
pzsystems	pointer
,	O
FALSE	O
)	O
;	O
break	O
;	O
case	O
CONFIG_HDB	int
:	O
iret	int
=	O
uuconf_hdb_system_names	function
(	O
pinput	pointer
,	O
&	O
pzsystems	pointer
,	O
FALSE	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
uvuuconf_error	function
(	O
pinput	pointer
,	O
iret	int
)	O
;	O
else	O
{	O
switch	O
(	O
toutput	enum
)	O
{	O
default	O
:	O
case	O
CONFIG_TAYLOR	int
:	O
sprintf	function
(	O
abtaylor	array
,	O
"%s%s"	pointer
,	O
ZCURDIR	pointer
,	O
SYSFILE	pointer
)	O
;	O
zsys	pointer
=	O
abtaylor	array
;	O
break	O
;	O
case	O
CONFIG_V2	int
:	O
sprintf	function
(	O
abv2	array
,	O
"%s%s"	pointer
,	O
ZCURDIR	pointer
,	O
V2_SYSTEMS	pointer
)	O
;	O
zsys	pointer
=	O
abv2	array
;	O
break	O
;	O
case	O
CONFIG_HDB	int
:	O
sprintf	function
(	O
abhdb	array
,	O
"%s%s"	pointer
,	O
ZCURDIR	pointer
,	O
HDB_SYSTEMS	pointer
)	O
;	O
zsys	pointer
=	O
abhdb	array
;	O
break	O
;	O
}	O
esys	pointer
=	O
fopen	function
(	O
zsys	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
esys	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uuchk:%s: "	pointer
,	O
zsys	pointer
)	O
;	O
perror	function
(	O
"fopen"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
fprintf	function
(	O
esys	pointer
,	O
"# %s file automatically generated by uuconv.\n"	pointer
,	O
zsys	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
pzsystems	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
struct	O
uuconf_system	struct
ssys	struct
;	O
switch	O
(	O
tinput	enum
)	O
{	O
case	O
CONFIG_TAYLOR	int
:	O
iret	int
=	O
_uuconf_itaylor_system_internal	function
(	O
pinput	pointer
,	O
*	O
pz	pointer
,	O
&	O
ssys	struct
)	O
;	O
break	O
;	O
case	O
CONFIG_V2	int
:	O
iret	int
=	O
_uuconf_iv2_system_internal	function
(	O
pinput	pointer
,	O
*	O
pz	pointer
,	O
&	O
ssys	struct
)	O
;	O
break	O
;	O
case	O
CONFIG_HDB	int
:	O
iret	int
=	O
_uuconf_ihdb_system_internal	function
(	O
pinput	pointer
,	O
*	O
pz	pointer
,	O
&	O
ssys	struct
)	O
;	O
break	O
;	O
}	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
uvuuconf_error	function
(	O
pinput	pointer
,	O
iret	int
)	O
;	O
else	O
{	O
switch	O
(	O
toutput	enum
)	O
{	O
case	O
CONFIG_TAYLOR	int
:	O
uvwrite_taylor_system	function
(	O
esys	pointer
,	O
&	O
ssys	struct
)	O
;	O
break	O
;	O
case	O
CONFIG_V2	int
:	O
uvwrite_v2_system	function
(	O
esys	pointer
,	O
&	O
ssys	struct
)	O
;	O
break	O
;	O
case	O
CONFIG_HDB	int
:	O
uvwrite_hdb_system	function
(	O
esys	pointer
,	O
&	O
ssys	struct
)	O
;	O
break	O
;	O
}	O
if	O
(	O
toutput	enum
!=	O
CONFIG_HDB	int
)	O
(	O
void	O
)	O
uuconf_system_free	function
(	O
pinput	pointer
,	O
&	O
ssys	struct
)	O
;	O
}	O
}	O
if	O
(	O
toutput	enum
==	O
CONFIG_HDB	int
)	O
uvwrite_perms	function
(	O
)	O
;	O
if	O
(	O
ferror	function
(	O
esys	pointer
)	O
||	O
fclose	function
(	O
esys	pointer
)	O
==	O
EOF	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uuchk:%s: error during output\n"	pointer
,	O
zsys	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
{	O
char	O
*	O
zport	pointer
;	O
char	O
abtaylor	array
[	O
sizeof	O
ZCURDIR	pointer
+	O
sizeof	O
PORTFILE	pointer
-	O
1	int
]	O
;	O
char	O
abv2	array
[	O
sizeof	O
ZCURDIR	pointer
+	O
sizeof	O
V2_DEVICES	pointer
-	O
1	int
]	O
;	O
char	O
abhdb	array
[	O
sizeof	O
ZCURDIR	pointer
+	O
sizeof	O
HDB_DEVICES	pointer
-	O
1	int
]	O
;	O
FILE	struct
*	O
eport	pointer
;	O
int	O
(	O
*	O
piportfn	pointer
)	O
P	O
(	O
(	O
struct	O
uuconf_port	struct
*	O
,	O
pointer	pointer
)	O
)	O
;	O
struct	O
uuconf_port	struct
sport	struct
;	O
switch	O
(	O
toutput	enum
)	O
{	O
default	O
:	O
case	O
CONFIG_TAYLOR	int
:	O
sprintf	function
(	O
abtaylor	array
,	O
"%s%s"	pointer
,	O
ZCURDIR	pointer
,	O
PORTFILE	pointer
)	O
;	O
zport	pointer
=	O
abtaylor	array
;	O
piportfn	pointer
=	O
ivwrite_taylor_port	function
;	O
break	O
;	O
case	O
CONFIG_V2	int
:	O
sprintf	function
(	O
abv2	array
,	O
"%s%s"	pointer
,	O
ZCURDIR	pointer
,	O
V2_DEVICES	pointer
)	O
;	O
zport	pointer
=	O
abv2	array
;	O
piportfn	pointer
=	O
ivwrite_v2_port	function
;	O
break	O
;	O
case	O
CONFIG_HDB	int
:	O
sprintf	function
(	O
abhdb	array
,	O
"%s%s"	pointer
,	O
ZCURDIR	pointer
,	O
HDB_DEVICES	pointer
)	O
;	O
zport	pointer
=	O
abhdb	array
;	O
piportfn	pointer
=	O
ivwrite_hdb_port	function
;	O
break	O
;	O
}	O
eport	pointer
=	O
fopen	function
(	O
zport	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
eport	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uuchk:%s: "	pointer
,	O
zport	pointer
)	O
;	O
perror	function
(	O
"fopen"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
fprintf	function
(	O
eport	pointer
,	O
"# %s file automatically generated by uuconv.\n"	pointer
,	O
zport	pointer
)	O
;	O
switch	O
(	O
tinput	enum
)	O
{	O
case	O
CONFIG_TAYLOR	int
:	O
iret	int
=	O
uuconf_taylor_find_port	function
(	O
pinput	pointer
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
0L	int
,	O
0L	int
,	O
piportfn	pointer
,	O
(	O
pointer	pointer
)	O
eport	pointer
,	O
&	O
sport	struct
)	O
;	O
break	O
;	O
case	O
CONFIG_V2	int
:	O
iret	int
=	O
uuconf_v2_find_port	function
(	O
pinput	pointer
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
0L	int
,	O
0L	int
,	O
piportfn	pointer
,	O
(	O
pointer	pointer
)	O
eport	pointer
,	O
&	O
sport	struct
)	O
;	O
break	O
;	O
case	O
CONFIG_HDB	int
:	O
iret	int
=	O
uuconf_hdb_find_port	function
(	O
pinput	pointer
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
0L	int
,	O
0L	int
,	O
piportfn	pointer
,	O
(	O
pointer	pointer
)	O
eport	pointer
,	O
&	O
sport	struct
)	O
;	O
break	O
;	O
}	O
if	O
(	O
iret	int
!=	O
UUCONF_NOT_FOUND	O
)	O
uvuuconf_error	function
(	O
pinput	pointer
,	O
iret	int
)	O
;	O
if	O
(	O
ferror	function
(	O
eport	pointer
)	O
||	O
fclose	function
(	O
eport	pointer
)	O
==	O
EOF	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uuchk:%s: error during output\n"	pointer
,	O
zport	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
tinput	enum
!=	O
CONFIG_V2	int
&&	O
toutput	enum
!=	O
CONFIG_V2	int
)	O
{	O
char	O
*	O
*	O
pzdialers	pointer
;	O
char	O
*	O
zdialer	pointer
;	O
char	O
abtaylor	array
[	O
sizeof	O
ZCURDIR	pointer
+	O
sizeof	O
DIALFILE	pointer
-	O
1	int
]	O
;	O
char	O
abhdb	array
[	O
sizeof	O
ZCURDIR	pointer
+	O
sizeof	O
HDB_DIALERS	pointer
-	O
1	int
]	O
;	O
FILE	struct
*	O
edialer	pointer
;	O
char	O
*	O
*	O
pz	pointer
;	O
switch	O
(	O
tinput	enum
)	O
{	O
default	O
:	O
case	O
CONFIG_TAYLOR	int
:	O
iret	int
=	O
uuconf_taylor_dialer_names	function
(	O
pinput	pointer
,	O
&	O
pzdialers	pointer
)	O
;	O
break	O
;	O
case	O
CONFIG_HDB	int
:	O
iret	int
=	O
uuconf_hdb_dialer_names	function
(	O
pinput	pointer
,	O
&	O
pzdialers	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
uvuuconf_error	function
(	O
pinput	pointer
,	O
iret	int
)	O
;	O
else	O
{	O
switch	O
(	O
toutput	enum
)	O
{	O
default	O
:	O
case	O
CONFIG_TAYLOR	int
:	O
sprintf	function
(	O
abtaylor	array
,	O
"%s%s"	pointer
,	O
ZCURDIR	pointer
,	O
DIALFILE	pointer
)	O
;	O
zdialer	pointer
=	O
abtaylor	array
;	O
break	O
;	O
case	O
CONFIG_HDB	int
:	O
sprintf	function
(	O
abhdb	array
,	O
"%s%s"	pointer
,	O
ZCURDIR	pointer
,	O
HDB_DIALERS	pointer
)	O
;	O
zdialer	pointer
=	O
abhdb	array
;	O
break	O
;	O
}	O
edialer	pointer
=	O
fopen	function
(	O
zdialer	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
edialer	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uuchk:%s: "	pointer
,	O
zdialer	pointer
)	O
;	O
perror	function
(	O
"fopen"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
fprintf	function
(	O
edialer	pointer
,	O
"# %s file automatically generated by uuconv.\n"	pointer
,	O
zdialer	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
pzdialers	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
struct	O
uuconf_dialer	struct
sdialer	struct
;	O
switch	O
(	O
tinput	enum
)	O
{	O
default	O
:	O
case	O
CONFIG_TAYLOR	int
:	O
iret	int
=	O
uuconf_taylor_dialer_info	function
(	O
pinput	pointer
,	O
*	O
pz	pointer
,	O
&	O
sdialer	struct
)	O
;	O
break	O
;	O
case	O
CONFIG_HDB	int
:	O
iret	int
=	O
uuconf_hdb_dialer_info	function
(	O
pinput	pointer
,	O
*	O
pz	pointer
,	O
&	O
sdialer	struct
)	O
;	O
break	O
;	O
}	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
uvuuconf_error	function
(	O
pinput	pointer
,	O
iret	int
)	O
;	O
else	O
{	O
switch	O
(	O
toutput	enum
)	O
{	O
default	O
:	O
case	O
CONFIG_TAYLOR	int
:	O
fprintf	function
(	O
edialer	pointer
,	O
"# Start of dialer %s\n"	pointer
,	O
sdialer	struct
.	O
uuconf_zname	pointer
)	O
;	O
fprintf	function
(	O
edialer	pointer
,	O
"dialer %s\n"	pointer
,	O
sdialer	struct
.	O
uuconf_zname	pointer
)	O
;	O
uvwrite_taylor_dialer	function
(	O
edialer	pointer
,	O
&	O
sdialer	struct
,	O
""	pointer
)	O
;	O
break	O
;	O
case	O
CONFIG_HDB	int
:	O
uvwrite_hdb_dialer	function
(	O
edialer	pointer
,	O
&	O
sdialer	struct
)	O
;	O
break	O
;	O
}	O
(	O
void	O
)	O
uuconf_dialer_free	function
(	O
pinput	pointer
,	O
&	O
sdialer	struct
)	O
;	O
}	O
}	O
if	O
(	O
ferror	function
(	O
edialer	pointer
)	O
||	O
fclose	function
(	O
edialer	pointer
)	O
==	O
EOF	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uuchk:%s: error during output\n"	pointer
,	O
zdialer	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
uvusage	function
(	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s -i input-type -o output-type [-p program]\n"	pointer
,	O
zProgram	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Use %s --help for help\n"	pointer
,	O
zProgram	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
void	O
uvhelp	function
(	O
)	O
{	O
printf	function
(	O
"Taylor UUCP %s, copyright (C) 1991, 92, 93, 94, 1995, 2002 Ian Lance Taylor\n"	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
"Converts UUCP configuration files from one format to another.\n"	pointer
)	O
;	O
printf	function
(	O
"Usage: %s -i input -o output [-p program] [-I file]\n"	pointer
,	O
zProgram	pointer
)	O
;	O
printf	function
(	O
" -i,--input input: Set input type (one of taylor, v2, hdb)\n"	pointer
)	O
;	O
printf	function
(	O
" -o,--output output: Set output type (one of taylor, v2, hdb)\n"	pointer
)	O
;	O
printf	function
(	O
" -p,--program program: Program to convert (e.g., uucp or cu)\n"	pointer
)	O
;	O
printf	function
(	O
" -I,--config file: Set Taylor UUCP configuration file to use\n"	pointer
)	O
;	O
printf	function
(	O
" -v,--version: Print version and exit\n"	pointer
)	O
;	O
printf	function
(	O
" --help: Print help and exit\n"	pointer
)	O
;	O
printf	function
(	O
"Report bugs to taylor-uucp@gnu.org\n"	pointer
)	O
;	O
}	O
static	O
void	O
uvwrite_time	function
(	O
e	pointer
,	O
qtime	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
struct	O
uuconf_timespan	struct
*	O
qtime	pointer
;	O
{	O
if	O
(	O
qtime	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"Never"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
qtime	pointer
->	O
uuconf_istart	int
==	O
0	int
&&	O
qtime	pointer
->	O
uuconf_iend	int
==	O
7	int
*	O
24	int
*	O
60	int
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"Any"	pointer
)	O
;	O
return	O
;	O
}	O
for	O
(	O
;	O
qtime	pointer
!=	O
NULL	O
;	O
qtime	pointer
=	O
qtime	pointer
->	O
uuconf_qnext	pointer
)	O
{	O
int	O
idaystart	int
,	O
idayend	int
;	O
int	O
ihourstart	int
,	O
ihourend	int
;	O
int	O
iminutestart	int
,	O
iminuteend	int
;	O
const	O
char	O
*	O
const	O
zdays	pointer
=	O
"Su\0Mo\0Tu\0We\0Th\0Fr\0Sa"	pointer
;	O
idaystart	int
=	O
qtime	pointer
->	O
uuconf_istart	int
/	O
(	O
24	int
*	O
60	int
)	O
;	O
ihourstart	int
=	O
(	O
qtime	pointer
->	O
uuconf_istart	int
%	O
(	O
24	int
*	O
60	int
)	O
)	O
/	O
60	int
;	O
iminutestart	int
=	O
qtime	pointer
->	O
uuconf_istart	int
%	O
60	int
;	O
if	O
(	O
qtime	pointer
->	O
uuconf_iend	int
>=	O
7	int
*	O
24	int
*	O
60	int
)	O
qtime	pointer
->	O
uuconf_iend	int
=	O
7	int
*	O
24	int
*	O
60	int
-	O
1	int
;	O
idayend	int
=	O
qtime	pointer
->	O
uuconf_iend	int
/	O
(	O
24	int
*	O
60	int
)	O
;	O
ihourend	int
=	O
(	O
qtime	pointer
->	O
uuconf_iend	int
%	O
(	O
24	int
*	O
60	int
)	O
)	O
/	O
60	int
;	O
iminuteend	int
=	O
qtime	pointer
->	O
uuconf_iend	int
%	O
60	int
;	O
if	O
(	O
ihourend	int
==	O
0	int
&&	O
iminuteend	int
==	O
0	int
)	O
--	O
idayend	int
;	O
if	O
(	O
idaystart	int
==	O
idayend	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%s%02d%02d-%02d%02d"	pointer
,	O
zdays	pointer
+	O
idaystart	int
*	O
3	int
,	O
ihourstart	int
,	O
iminutestart	int
,	O
ihourend	int
,	O
iminuteend	int
)	O
;	O
else	O
{	O
int	O
i	int
;	O
fprintf	function
(	O
e	pointer
,	O
"%s%02d%02d-0000"	pointer
,	O
zdays	pointer
+	O
idaystart	int
*	O
3	int
,	O
ihourstart	int
,	O
iminutestart	int
)	O
;	O
for	O
(	O
i	int
=	O
idaystart	int
+	O
1	int
;	O
i	int
<	O
idayend	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
e	pointer
,	O
",%s"	pointer
,	O
zdays	pointer
+	O
i	int
*	O
3	int
)	O
;	O
if	O
(	O
ihourend	int
!=	O
0	int
||	O
iminuteend	int
!=	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
",%s0000-%02d%02d"	pointer
,	O
zdays	pointer
+	O
idayend	int
*	O
3	int
,	O
ihourend	int
,	O
iminuteend	int
)	O
;	O
}	O
if	O
(	O
qtime	pointer
->	O
uuconf_qnext	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
","	pointer
)	O
;	O
}	O
}	O
static	O
void	O
uvwrite_string	function
(	O
e	pointer
,	O
zarg	pointer
,	O
zcmd	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
const	O
char	O
*	O
zarg	pointer
;	O
const	O
char	O
*	O
zcmd	pointer
;	O
{	O
if	O
(	O
zarg	pointer
!=	O
(	O
const	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
fprintf	function
(	O
e	pointer
,	O
"%s %s\n"	pointer
,	O
zcmd	pointer
,	O
zarg	pointer
==	O
NULL	O
?	O
(	O
const	O
char	O
*	O
)	O
""	pointer
:	O
zarg	pointer
)	O
;	O
}	O
static	O
void	O
uvwrite_size	function
(	O
e	pointer
,	O
qtime	pointer
,	O
zcmd	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
struct	O
uuconf_timespan	struct
*	O
qtime	pointer
;	O
const	O
char	O
*	O
zcmd	pointer
;	O
{	O
if	O
(	O
qtime	pointer
!=	O
(	O
struct	O
uuconf_timespan	struct
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
{	O
for	O
(	O
;	O
qtime	pointer
!=	O
NULL	O
;	O
qtime	pointer
=	O
qtime	pointer
->	O
uuconf_qnext	pointer
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"%s %ld"	pointer
,	O
zcmd	pointer
,	O
qtime	pointer
->	O
uuconf_ival	long
)	O
;	O
uvwrite_time	function
(	O
e	pointer
,	O
qtime	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
}	O
static	O
void	O
uvwrite_boolean	function
(	O
e	pointer
,	O
fval	int
,	O
zcmd	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
int	O
fval	int
;	O
const	O
char	O
*	O
zcmd	pointer
;	O
{	O
if	O
(	O
fval	int
>=	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%s %s\n"	pointer
,	O
zcmd	pointer
,	O
fval	int
>	O
0	int
?	O
"true"	pointer
:	O
"false"	pointer
)	O
;	O
}	O
static	O
void	O
uvwrite_string_array	function
(	O
e	pointer
,	O
pz	pointer
,	O
zcmd	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
char	O
*	O
*	O
pz	pointer
;	O
const	O
char	O
*	O
zcmd	pointer
;	O
{	O
if	O
(	O
pz	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
zcmd	pointer
)	O
;	O
if	O
(	O
pz	pointer
!=	O
NULL	O
)	O
for	O
(	O
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
fprintf	function
(	O
e	pointer
,	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
uvwrite_chat_script	function
(	O
e	pointer
,	O
pzarg	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
char	O
*	O
*	O
pzarg	pointer
;	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
if	O
(	O
pzarg	pointer
==	O
NULL	O
||	O
pzarg	pointer
==	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
return	O
;	O
for	O
(	O
pz	pointer
=	O
pzarg	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
if	O
(	O
(	O
*	O
pz	pointer
)	O
[	O
0	int
]	O
!=	O
'-'	O
&&	O
pz	pointer
!=	O
pzarg	pointer
)	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
*	O
pz	pointer
)	O
;	O
}	O
}	O
static	O
void	O
uvwrite_chat	function
(	O
e	pointer
,	O
q	pointer
,	O
qlast	pointer
,	O
zprefix	pointer
,	O
fforce	int
)	O
FILE	struct
*	O
e	pointer
;	O
const	O
struct	O
uuconf_chat	struct
*	O
q	pointer
;	O
const	O
struct	O
uuconf_chat	struct
*	O
qlast	pointer
;	O
const	O
char	O
*	O
zprefix	pointer
;	O
boolean	int
fforce	int
;	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
char	O
ab	array
[	O
100	int
]	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_pzchat	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
(	O
qlast	pointer
==	O
NULL	O
?	O
(	O
fforce	int
||	O
q	pointer
->	O
uuconf_pzchat	pointer
!=	O
NULL	O
)	O
:	O
qlast	pointer
->	O
uuconf_pzchat	pointer
!=	O
q	pointer
->	O
uuconf_pzchat	pointer
)	O
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"%schat "	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_chat_script	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_pzchat	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
q	pointer
->	O
uuconf_pzprogram	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
(	O
qlast	pointer
==	O
NULL	O
?	O
q	pointer
->	O
uuconf_pzprogram	pointer
!=	O
NULL	O
:	O
qlast	pointer
->	O
uuconf_pzprogram	pointer
!=	O
q	pointer
->	O
uuconf_pzprogram	pointer
)	O
)	O
{	O
sprintf	function
(	O
ab	array
,	O
"%schat-program"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_string_array	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_pzprogram	pointer
,	O
ab	array
)	O
;	O
}	O
if	O
(	O
q	pointer
->	O
uuconf_ctimeout	int
>=	O
0	int
&&	O
(	O
qlast	pointer
==	O
NULL	O
||	O
qlast	pointer
->	O
uuconf_ctimeout	int
!=	O
q	pointer
->	O
uuconf_ctimeout	int
)	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%schat-timeout %d\n"	pointer
,	O
zprefix	pointer
,	O
q	pointer
->	O
uuconf_ctimeout	int
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_pzfail	pointer
!=	O
NULL	O
&&	O
q	pointer
->	O
uuconf_pzfail	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
(	O
qlast	pointer
==	O
NULL	O
||	O
qlast	pointer
->	O
uuconf_pzfail	pointer
!=	O
q	pointer
->	O
uuconf_pzfail	pointer
)	O
)	O
for	O
(	O
pz	pointer
=	O
q	pointer
->	O
uuconf_pzfail	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%schat-fail %s\n"	pointer
,	O
zprefix	pointer
,	O
*	O
pz	pointer
)	O
;	O
if	O
(	O
qlast	pointer
==	O
NULL	O
||	O
qlast	pointer
->	O
uuconf_fstrip	int
!=	O
q	pointer
->	O
uuconf_fstrip	int
)	O
{	O
sprintf	function
(	O
ab	array
,	O
"%schat-strip"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_fstrip	int
,	O
ab	array
)	O
;	O
}	O
}	O
static	O
void	O
uvwrite_proto_params	function
(	O
e	pointer
,	O
qparams	pointer
,	O
zprefix	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
const	O
struct	O
uuconf_proto_param	struct
*	O
qparams	pointer
;	O
const	O
char	O
*	O
zprefix	pointer
;	O
{	O
const	O
struct	O
uuconf_proto_param	struct
*	O
qp	pointer
;	O
if	O
(	O
qparams	pointer
==	O
NULL	O
||	O
qparams	pointer
==	O
(	O
struct	O
uuconf_proto_param	struct
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
return	O
;	O
for	O
(	O
qp	pointer
=	O
qparams	pointer
;	O
qp	pointer
->	O
uuconf_bproto	int
!=	O
'\0'	O
;	O
qp	pointer
++	O
)	O
{	O
const	O
struct	O
uuconf_proto_param_entry	struct
*	O
qe	pointer
;	O
for	O
(	O
qe	pointer
=	O
qp	pointer
->	O
uuconf_qentries	pointer
;	O
qe	pointer
->	O
uuconf_cargs	int
>	O
0	int
;	O
qe	pointer
++	O
)	O
{	O
int	O
i	int
;	O
fprintf	function
(	O
e	pointer
,	O
"%sprotocol-parameter %c"	pointer
,	O
zprefix	pointer
,	O
qp	pointer
->	O
uuconf_bproto	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
qe	pointer
->	O
uuconf_cargs	int
;	O
i	int
++	O
)	O
fprintf	function
(	O
e	pointer
,	O
" %s"	pointer
,	O
qe	pointer
->	O
uuconf_pzargs	pointer
[	O
i	int
]	O
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
}	O
static	O
void	O
uvwrite_taylor_system	function
(	O
e	pointer
,	O
q	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
q	pointer
;	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
qlast	pointer
;	O
fprintf	function
(	O
e	pointer
,	O
"# Start of system %s\n"	pointer
,	O
q	pointer
->	O
uuconf_zname	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"system %s\n"	pointer
,	O
q	pointer
->	O
uuconf_zname	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_pzalias	pointer
!=	O
NULL	O
&&	O
q	pointer
->	O
uuconf_pzalias	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
for	O
(	O
pz	pointer
=	O
q	pointer
->	O
uuconf_pzalias	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
uvwrite_string	function
(	O
e	pointer
,	O
*	O
pz	pointer
,	O
"alias"	pointer
)	O
;	O
for	O
(	O
qlast	pointer
=	O
NULL	O
;	O
q	pointer
!=	O
NULL	O
;	O
qlast	pointer
=	O
q	pointer
,	O
q	pointer
=	O
q	pointer
->	O
uuconf_qalternate	pointer
)	O
{	O
struct	O
uuconf_timespan	struct
*	O
qtime	pointer
;	O
if	O
(	O
qlast	pointer
!=	O
NULL	O
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"alternate"	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_zalternate	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_zalternate	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
" %s"	pointer
,	O
q	pointer
->	O
uuconf_zalternate	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
CHANGED	O
(	O
uuconf_qtimegrade	pointer
)	O
&&	O
(	O
q	pointer
->	O
uuconf_qtimegrade	pointer
!=	O
(	O
struct	O
uuconf_timespan	struct
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
)	O
{	O
if	O
(	O
q	pointer
->	O
uuconf_qtimegrade	pointer
==	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"time never\n"	pointer
)	O
;	O
else	O
{	O
for	O
(	O
qtime	pointer
=	O
q	pointer
->	O
uuconf_qtimegrade	pointer
;	O
qtime	pointer
!=	O
NULL	O
;	O
qtime	pointer
=	O
qtime	pointer
->	O
uuconf_qnext	pointer
)	O
{	O
if	O
(	O
(	O
char	O
)	O
qtime	pointer
->	O
uuconf_ival	long
==	O
UUCONF_GRADE_LOW	O
)	O
fprintf	function
(	O
e	pointer
,	O
"time "	pointer
)	O
;	O
else	O
fprintf	function
(	O
e	pointer
,	O
"timegrade %c "	pointer
,	O
(	O
char	O
)	O
qtime	pointer
->	O
uuconf_ival	long
)	O
;	O
uvwrite_time	function
(	O
e	pointer
,	O
qtime	pointer
)	O
;	O
if	O
(	O
qtime	pointer
->	O
uuconf_cretry	int
!=	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
" %d"	pointer
,	O
qtime	pointer
->	O
uuconf_cretry	int
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
CHANGED	O
(	O
uuconf_qcalltimegrade	pointer
)	O
&&	O
(	O
q	pointer
->	O
uuconf_qcalltimegrade	pointer
!=	O
(	O
struct	O
uuconf_timespan	struct
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
)	O
{	O
for	O
(	O
qtime	pointer
=	O
q	pointer
->	O
uuconf_qcalltimegrade	pointer
;	O
qtime	pointer
!=	O
NULL	O
;	O
qtime	pointer
=	O
qtime	pointer
->	O
uuconf_qnext	pointer
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"call-timegrade %c "	pointer
,	O
(	O
char	O
)	O
qtime	pointer
->	O
uuconf_ival	long
)	O
;	O
uvwrite_time	function
(	O
e	pointer
,	O
qtime	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
CHANGED	O
(	O
uuconf_qcalledtimegrade	pointer
)	O
&&	O
(	O
q	pointer
->	O
uuconf_qcalledtimegrade	pointer
!=	O
(	O
struct	O
uuconf_timespan	struct
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
)	O
{	O
for	O
(	O
qtime	pointer
=	O
q	pointer
->	O
uuconf_qcalledtimegrade	pointer
;	O
qtime	pointer
!=	O
NULL	O
;	O
qtime	pointer
=	O
qtime	pointer
->	O
uuconf_qnext	pointer
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"called-timegrade %c "	pointer
,	O
(	O
char	O
)	O
qtime	pointer
->	O
uuconf_ival	long
)	O
;	O
uvwrite_time	function
(	O
e	pointer
,	O
qtime	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
CHANGED	O
(	O
uuconf_qcall_local_size	pointer
)	O
)	O
uvwrite_size	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_qcall_local_size	pointer
,	O
"call-local-size"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_qcall_remote_size	pointer
)	O
)	O
uvwrite_size	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_qcall_remote_size	pointer
,	O
"call-remote-size"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_qcalled_local_size	pointer
)	O
)	O
uvwrite_size	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_qcalled_local_size	pointer
,	O
"called-local-size"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_qcalled_remote_size	pointer
)	O
)	O
uvwrite_size	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_qcalled_remote_size	pointer
,	O
"called-remote-size"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_ibaud	long
)	O
||	O
CHANGED	O
(	O
uuconf_ihighbaud	long
)	O
)	O
{	O
if	O
(	O
q	pointer
->	O
uuconf_ibaud	long
>=	O
0	int
)	O
{	O
if	O
(	O
q	pointer
->	O
uuconf_ihighbaud	long
>	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
"baud-range %ld %ld\n"	pointer
,	O
q	pointer
->	O
uuconf_ibaud	long
,	O
q	pointer
->	O
uuconf_ihighbaud	long
)	O
;	O
else	O
fprintf	function
(	O
e	pointer
,	O
"baud %ld\n"	pointer
,	O
q	pointer
->	O
uuconf_ibaud	long
)	O
;	O
}	O
}	O
if	O
(	O
CHANGED	O
(	O
uuconf_zport	pointer
)	O
||	O
CHANGED	O
(	O
uuconf_qport	pointer
)	O
)	O
{	O
if	O
(	O
q	pointer
->	O
uuconf_zport	pointer
!=	O
NULL	O
&&	O
q	pointer
->	O
uuconf_zport	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
uvwrite_string	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_zport	pointer
,	O
"port"	pointer
)	O
;	O
else	O
if	O
(	O
q	pointer
->	O
uuconf_qport	pointer
!=	O
NULL	O
&&	O
(	O
q	pointer
->	O
uuconf_qport	pointer
!=	O
(	O
struct	O
uuconf_port	struct
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
)	O
uvwrite_taylor_port	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_qport	pointer
,	O
"port "	pointer
)	O
;	O
}	O
if	O
(	O
CHANGED	O
(	O
uuconf_zphone	pointer
)	O
)	O
{	O
const	O
char	O
*	O
zcmd	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_qport	pointer
!=	O
NULL	O
&&	O
q	pointer
->	O
uuconf_qport	pointer
!=	O
(	O
struct	O
uuconf_port	struct
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
(	O
q	pointer
->	O
uuconf_qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_TCP	int
||	O
q	pointer
->	O
uuconf_qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_TLI	int
)	O
)	O
zcmd	pointer
=	O
"address"	pointer
;	O
else	O
zcmd	pointer
=	O
"phone"	pointer
;	O
uvwrite_string	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_zphone	pointer
,	O
zcmd	pointer
)	O
;	O
}	O
uvwrite_chat	function
(	O
e	pointer
,	O
&	O
q	pointer
->	O
uuconf_schat	struct
,	O
(	O
qlast	pointer
==	O
NULL	O
?	O
(	O
struct	O
uuconf_chat	struct
*	O
)	O
NULL	O
:	O
&	O
qlast	pointer
->	O
uuconf_schat	struct
)	O
,	O
""	pointer
,	O
TRUE	O
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_zcall_login	pointer
)	O
)	O
uvwrite_string	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_zcall_login	pointer
,	O
"call-login"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_zcall_password	pointer
)	O
)	O
uvwrite_string	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_zcall_password	pointer
,	O
"call-password"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_zcalled_login	pointer
)	O
)	O
uvwrite_string	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_zcalled_login	pointer
,	O
"called-login"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_fcallback	int
)	O
)	O
uvwrite_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_fcallback	int
,	O
"callback"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_fsequence	int
)	O
)	O
uvwrite_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_fsequence	int
,	O
"sequence"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_zprotocols	pointer
)	O
)	O
uvwrite_string	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_zprotocols	pointer
,	O
"protocol"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_qproto_params	pointer
)	O
)	O
uvwrite_proto_params	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_qproto_params	pointer
,	O
""	pointer
)	O
;	O
uvwrite_chat	function
(	O
e	pointer
,	O
&	O
q	pointer
->	O
uuconf_scalled_chat	struct
,	O
(	O
qlast	pointer
==	O
NULL	O
?	O
(	O
struct	O
uuconf_chat	struct
*	O
)	O
NULL	O
:	O
&	O
qlast	pointer
->	O
uuconf_scalled_chat	struct
)	O
,	O
"called-"	pointer
,	O
FALSE	O
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_zdebug	pointer
)	O
)	O
uvwrite_string	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_zdebug	pointer
,	O
"debug"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_zmax_remote_debug	pointer
)	O
)	O
uvwrite_string	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_zmax_remote_debug	pointer
,	O
"max-remote-debug"	pointer
)	O
;	O
if	O
(	O
(	O
CHANGED	O
(	O
uuconf_fsend_request	int
)	O
||	O
CHANGED	O
(	O
uuconf_frec_request	int
)	O
)	O
&&	O
(	O
q	pointer
->	O
uuconf_fsend_request	int
>=	O
0	int
||	O
q	pointer
->	O
uuconf_frec_request	int
>=	O
0	int
)	O
)	O
{	O
if	O
(	O
q	pointer
->	O
uuconf_fsend_request	int
>=	O
0	int
&&	O
(	O
q	pointer
->	O
uuconf_fsend_request	int
>	O
0	int
?	O
q	pointer
->	O
uuconf_frec_request	int
>	O
0	int
:	O
q	pointer
->	O
uuconf_frec_request	int
==	O
0	int
)	O
)	O
uvwrite_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_fsend_request	int
,	O
"request"	pointer
)	O
;	O
else	O
{	O
uvwrite_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_fsend_request	int
,	O
"send-request"	pointer
)	O
;	O
uvwrite_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_frec_request	int
,	O
"receive-request"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
CHANGED	O
(	O
uuconf_fcall_transfer	int
)	O
||	O
CHANGED	O
(	O
uuconf_fcalled_transfer	int
)	O
)	O
&&	O
(	O
q	pointer
->	O
uuconf_fcall_transfer	int
>=	O
0	int
||	O
q	pointer
->	O
uuconf_fcalled_transfer	int
>=	O
0	int
)	O
)	O
{	O
if	O
(	O
q	pointer
->	O
uuconf_fcall_transfer	int
>=	O
0	int
&&	O
(	O
q	pointer
->	O
uuconf_fcall_transfer	int
>	O
0	int
?	O
q	pointer
->	O
uuconf_fcalled_transfer	int
>	O
0	int
:	O
q	pointer
->	O
uuconf_fcalled_transfer	int
==	O
0	int
)	O
)	O
uvwrite_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_fcall_transfer	int
,	O
"transfer"	pointer
)	O
;	O
else	O
{	O
uvwrite_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_fcall_transfer	int
,	O
"call-transfer"	pointer
)	O
;	O
uvwrite_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_fcalled_transfer	int
,	O
"called-transfer"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
CHANGED	O
(	O
uuconf_pzlocal_send	pointer
)	O
)	O
uvwrite_string_array	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_pzlocal_send	pointer
,	O
"local-send"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_pzremote_send	pointer
)	O
)	O
uvwrite_string_array	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_pzremote_send	pointer
,	O
"remote-send"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_pzlocal_receive	pointer
)	O
)	O
uvwrite_string_array	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_pzlocal_receive	pointer
,	O
"local-receive"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_pzremote_receive	pointer
)	O
)	O
uvwrite_string_array	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_pzremote_receive	pointer
,	O
"remote-receive"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_pzpath	pointer
)	O
)	O
uvwrite_string_array	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_pzpath	pointer
,	O
"command-path"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_pzcmds	pointer
)	O
)	O
uvwrite_string_array	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_pzcmds	pointer
,	O
"commands"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_cfree_space	long
)	O
&&	O
q	pointer
->	O
uuconf_cfree_space	long
>=	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
"free-space %ld\n"	pointer
,	O
q	pointer
->	O
uuconf_cfree_space	long
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_pzforward_from	pointer
)	O
)	O
uvwrite_string_array	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_pzforward_from	pointer
,	O
"forward-from"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_pzforward_to	pointer
)	O
)	O
uvwrite_string_array	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_pzforward_to	pointer
,	O
"forward-to"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_zpubdir	pointer
)	O
)	O
uvwrite_string	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_zpubdir	pointer
,	O
"pubdir"	pointer
)	O
;	O
if	O
(	O
CHANGED	O
(	O
uuconf_zlocalname	pointer
)	O
)	O
uvwrite_string	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_zlocalname	pointer
,	O
"myname"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
uvwrite_v2_system	function
(	O
e	pointer
,	O
q	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
q	pointer
;	O
{	O
for	O
(	O
;	O
q	pointer
!=	O
NULL	O
;	O
q	pointer
=	O
q	pointer
->	O
uuconf_qalternate	pointer
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
q	pointer
->	O
uuconf_zname	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_qtimegrade	pointer
!=	O
(	O
struct	O
uuconf_timespan	struct
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
uvwrite_time	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_qtimegrade	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_zport	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
||	O
q	pointer
->	O
uuconf_qport	pointer
!=	O
(	O
struct	O
uuconf_port	struct
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
{	O
struct	O
uuconf_port	struct
*	O
qp	pointer
;	O
boolean	int
ftcp	int
;	O
qp	pointer
=	O
q	pointer
->	O
uuconf_qport	pointer
;	O
ftcp	int
=	O
(	O
qp	pointer
!=	O
(	O
struct	O
uuconf_port	struct
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
qp	pointer
!=	O
NULL	O
&&	O
qp	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_TCP	int
)	O
;	O
if	O
(	O
ftcp	int
||	O
(	O
q	pointer
->	O
uuconf_zport	pointer
!=	O
NULL	O
&&	O
q	pointer
->	O
uuconf_zport	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
)	O
{	O
if	O
(	O
ftcp	int
)	O
fprintf	function
(	O
e	pointer
,	O
" TCP"	pointer
)	O
;	O
else	O
fprintf	function
(	O
e	pointer
,	O
" %s"	pointer
,	O
q	pointer
->	O
uuconf_zport	pointer
)	O
;	O
if	O
(	O
ftcp	int
||	O
q	pointer
->	O
uuconf_ibaud	long
>=	O
0	int
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
ftcp	int
)	O
{	O
const	O
char	O
*	O
zport	pointer
;	O
zport	pointer
=	O
qp	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_zport	pointer
;	O
if	O
(	O
zport	pointer
==	O
NULL	O
)	O
zport	pointer
=	O
"uucp"	pointer
;	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
zport	pointer
)	O
;	O
}	O
else	O
fprintf	function
(	O
e	pointer
,	O
"%ld"	pointer
,	O
q	pointer
->	O
uuconf_ibaud	long
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_zphone	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_zphone	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
*	O
pzc	pointer
;	O
fprintf	function
(	O
e	pointer
,	O
" %s"	pointer
,	O
q	pointer
->	O
uuconf_zphone	pointer
)	O
;	O
pzc	pointer
=	O
q	pointer
->	O
uuconf_schat	struct
.	O
uuconf_pzchat	pointer
;	O
if	O
(	O
pzc	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
pzc	pointer
!=	O
NULL	O
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
uvwrite_chat_script	function
(	O
e	pointer
,	O
pzc	pointer
)	O
;	O
}	O
}	O
}	O
}	O
}	O
}	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
uvwrite_hdb_system	function
(	O
e	pointer
,	O
qsys	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
{	O
const	O
struct	O
uuconf_system	struct
*	O
q	pointer
;	O
struct	O
shpermissions	struct
sperm	struct
;	O
char	O
*	O
azmachine	array
[	O
2	int
]	O
;	O
char	O
*	O
azlogname	array
[	O
2	int
]	O
;	O
for	O
(	O
q	pointer
=	O
qsys	pointer
;	O
q	pointer
!=	O
NULL	O
;	O
q	pointer
=	O
q	pointer
->	O
uuconf_qalternate	pointer
)	O
{	O
if	O
(	O
q	pointer
->	O
uuconf_fcall	int
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
q	pointer
->	O
uuconf_zname	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_qtimegrade	pointer
!=	O
(	O
struct	O
uuconf_timespan	struct
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
{	O
const	O
char	O
*	O
zport	pointer
;	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
uvwrite_time	function
(	O
e	pointer
,	O
q	pointer
->	O
uuconf_qtimegrade	pointer
)	O
;	O
zport	pointer
=	O
q	pointer
->	O
uuconf_zport	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_qport	pointer
!=	O
NULL	O
&&	O
q	pointer
->	O
uuconf_qport	pointer
!=	O
(	O
struct	O
uuconf_port	struct
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_TCP	int
)	O
zport	pointer
=	O
"TCP"	pointer
;	O
if	O
(	O
zport	pointer
!=	O
NULL	O
&&	O
zport	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
" %s"	pointer
,	O
zport	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_zprotocols	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
",%s"	pointer
,	O
q	pointer
->	O
uuconf_zprotocols	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_ibaud	long
>=	O
0	int
||	O
q	pointer
->	O
uuconf_zphone	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_ibaud	long
<	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
"Any"	pointer
)	O
;	O
else	O
{	O
fprintf	function
(	O
e	pointer
,	O
"%ld"	pointer
,	O
q	pointer
->	O
uuconf_ibaud	long
)	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_ihighbaud	long
>=	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
"-%ld"	pointer
,	O
q	pointer
->	O
uuconf_ihighbaud	long
)	O
;	O
}	O
if	O
(	O
q	pointer
->	O
uuconf_zphone	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_zphone	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
*	O
pzc	pointer
;	O
fprintf	function
(	O
e	pointer
,	O
" %s"	pointer
,	O
q	pointer
->	O
uuconf_zphone	pointer
)	O
;	O
pzc	pointer
=	O
q	pointer
->	O
uuconf_schat	struct
.	O
uuconf_pzchat	pointer
;	O
if	O
(	O
pzc	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
pzc	pointer
!=	O
NULL	O
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
uvwrite_chat_script	function
(	O
e	pointer
,	O
pzc	pointer
)	O
;	O
}	O
}	O
}	O
}	O
}	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
for	O
(	O
q	pointer
=	O
qsys	pointer
;	O
q	pointer
!=	O
NULL	O
;	O
q	pointer
=	O
q	pointer
->	O
uuconf_qalternate	pointer
)	O
if	O
(	O
q	pointer
->	O
uuconf_fcall	int
)	O
break	O
;	O
if	O
(	O
q	pointer
!=	O
NULL	O
)	O
{	O
sperm	struct
.	O
qnext	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
pzlogname	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
pzmachine	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
frequest	int
=	O
-	O
1	int
;	O
sperm	struct
.	O
fsendfiles	int
=	O
-	O
1	int
;	O
sperm	struct
.	O
pzread	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
pzwrite	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
fcallback	int
=	O
-	O
1	int
;	O
sperm	struct
.	O
pzcommands	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
pzvalidate	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
zmyname	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
zpubdir	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
pzalias	pointer
=	O
NULL	O
;	O
azmachine	array
[	O
0	int
]	O
=	O
q	pointer
->	O
uuconf_zname	pointer
;	O
azmachine	array
[	O
1	int
]	O
=	O
NULL	O
;	O
sperm	struct
.	O
pzmachine	pointer
=	O
azmachine	array
;	O
if	O
(	O
q	pointer
->	O
uuconf_fsend_request	int
>=	O
0	int
)	O
sperm	struct
.	O
frequest	int
=	O
q	pointer
->	O
uuconf_fsend_request	int
;	O
if	O
(	O
q	pointer
->	O
uuconf_pzremote_send	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_pzremote_send	pointer
!=	O
NULL	O
)	O
sperm	struct
.	O
pzread	pointer
=	O
q	pointer
->	O
uuconf_pzremote_send	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_pzremote_receive	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_pzremote_receive	pointer
!=	O
NULL	O
)	O
sperm	struct
.	O
pzwrite	pointer
=	O
q	pointer
->	O
uuconf_pzremote_receive	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_pzcmds	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_pzcmds	pointer
!=	O
NULL	O
)	O
sperm	struct
.	O
pzcommands	pointer
=	O
q	pointer
->	O
uuconf_pzcmds	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_zlocalname	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_zlocalname	pointer
!=	O
NULL	O
)	O
sperm	struct
.	O
zmyname	pointer
=	O
q	pointer
->	O
uuconf_zlocalname	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_zpubdir	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_zpubdir	pointer
!=	O
NULL	O
)	O
sperm	struct
.	O
zpubdir	pointer
=	O
q	pointer
->	O
uuconf_zpubdir	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_pzalias	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_pzalias	pointer
!=	O
NULL	O
)	O
sperm	struct
.	O
pzalias	pointer
=	O
q	pointer
->	O
uuconf_pzalias	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_fcalled	int
&&	O
q	pointer
->	O
uuconf_zcalled_login	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_zcalled_login	pointer
!=	O
NULL	O
)	O
{	O
azlogname	array
[	O
0	int
]	O
=	O
q	pointer
->	O
uuconf_zcalled_login	pointer
;	O
azlogname	array
[	O
1	int
]	O
=	O
NULL	O
;	O
sperm	struct
.	O
pzlogname	pointer
=	O
azlogname	array
;	O
if	O
(	O
q	pointer
->	O
uuconf_fcalled_transfer	int
>=	O
0	int
)	O
sperm	struct
.	O
fsendfiles	int
=	O
q	pointer
->	O
uuconf_fcalled_transfer	int
;	O
if	O
(	O
q	pointer
->	O
uuconf_fcallback	int
>=	O
0	int
)	O
sperm	struct
.	O
fcallback	int
=	O
q	pointer
->	O
uuconf_fcallback	int
;	O
sperm	struct
.	O
pzvalidate	pointer
=	O
azmachine	array
;	O
}	O
uvadd_perm	function
(	O
&	O
sperm	struct
)	O
;	O
}	O
for	O
(	O
q	pointer
=	O
qsys	pointer
;	O
q	pointer
!=	O
NULL	O
;	O
q	pointer
=	O
q	pointer
->	O
uuconf_qalternate	pointer
)	O
{	O
if	O
(	O
!	O
q	pointer
->	O
uuconf_fcalled	int
||	O
q	pointer
->	O
uuconf_fcall	int
)	O
continue	O
;	O
sperm	struct
.	O
qnext	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
pzlogname	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
pzmachine	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
frequest	int
=	O
-	O
1	int
;	O
sperm	struct
.	O
fsendfiles	int
=	O
-	O
1	int
;	O
sperm	struct
.	O
pzread	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
pzwrite	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
fcallback	int
=	O
-	O
1	int
;	O
sperm	struct
.	O
pzcommands	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
pzvalidate	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
zmyname	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
zpubdir	pointer
=	O
NULL	O
;	O
sperm	struct
.	O
pzalias	pointer
=	O
NULL	O
;	O
if	O
(	O
q	pointer
->	O
uuconf_zcalled_login	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_zcalled_login	pointer
!=	O
NULL	O
)	O
azlogname	array
[	O
0	int
]	O
=	O
q	pointer
->	O
uuconf_zcalled_login	pointer
;	O
else	O
azlogname	array
[	O
0	int
]	O
=	O
(	O
char	O
*	O
)	O
"OTHER"	pointer
;	O
azlogname	array
[	O
1	int
]	O
=	O
NULL	O
;	O
sperm	struct
.	O
pzlogname	pointer
=	O
azlogname	array
;	O
if	O
(	O
q	pointer
->	O
uuconf_fsend_request	int
>=	O
0	int
)	O
sperm	struct
.	O
frequest	int
=	O
q	pointer
->	O
uuconf_fsend_request	int
;	O
if	O
(	O
q	pointer
->	O
uuconf_fcalled_transfer	int
>=	O
0	int
)	O
sperm	struct
.	O
fsendfiles	int
=	O
q	pointer
->	O
uuconf_fcalled_transfer	int
;	O
if	O
(	O
q	pointer
->	O
uuconf_pzremote_send	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_pzremote_send	pointer
!=	O
NULL	O
)	O
sperm	struct
.	O
pzread	pointer
=	O
q	pointer
->	O
uuconf_pzremote_send	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_pzremote_receive	pointer
!=	O
(	O
char	O
*	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_pzremote_receive	pointer
!=	O
NULL	O
)	O
sperm	struct
.	O
pzwrite	pointer
=	O
q	pointer
->	O
uuconf_pzremote_receive	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_fcallback	int
>=	O
0	int
)	O
sperm	struct
.	O
fcallback	int
=	O
q	pointer
->	O
uuconf_fcallback	int
;	O
if	O
(	O
q	pointer
->	O
uuconf_zlocalname	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_zlocalname	pointer
!=	O
NULL	O
)	O
sperm	struct
.	O
zmyname	pointer
=	O
q	pointer
->	O
uuconf_zlocalname	pointer
;	O
if	O
(	O
q	pointer
->	O
uuconf_zpubdir	pointer
!=	O
(	O
char	O
*	O
)	O
&	O
_uuconf_unset	pointer
&&	O
q	pointer
->	O
uuconf_zpubdir	pointer
!=	O
NULL	O
)	O
sperm	struct
.	O
zpubdir	pointer
=	O
q	pointer
->	O
uuconf_zpubdir	pointer
;	O
uvadd_perm	function
(	O
&	O
sperm	struct
)	O
;	O
}	O
}	O
static	O
boolean	int
fvperm_string_cmp	function
(	O
z1	pointer
,	O
z2	pointer
)	O
const	O
char	O
*	O
z1	pointer
;	O
const	O
char	O
*	O
z2	pointer
;	O
{	O
if	O
(	O
z1	pointer
==	O
NULL	O
)	O
return	O
z2	pointer
==	O
NULL	O
;	O
if	O
(	O
z2	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
return	O
strcmp	function
(	O
z1	pointer
,	O
z2	pointer
)	O
==	O
0	int
;	O
}	O
static	O
boolean	int
fvperm_array_cmp	function
(	O
pz1	pointer
,	O
pz2	pointer
)	O
const	O
char	O
*	O
*	O
pz1	pointer
;	O
const	O
char	O
*	O
*	O
pz2	pointer
;	O
{	O
if	O
(	O
pz1	pointer
==	O
NULL	O
)	O
return	O
pz2	pointer
==	O
NULL	O
;	O
if	O
(	O
pz2	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
for	O
(	O
;	O
*	O
pz1	pointer
!=	O
NULL	O
&&	O
*	O
pz2	pointer
!=	O
NULL	O
;	O
pz1	pointer
++	O
,	O
pz2	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
*	O
pz1	pointer
,	O
*	O
pz2	pointer
)	O
!=	O
0	int
)	O
break	O
;	O
return	O
*	O
pz1	pointer
==	O
NULL	O
&&	O
*	O
pz2	pointer
==	O
NULL	O
;	O
}	O
static	O
void	O
uvadd_perm	function
(	O
qadd	pointer
)	O
struct	O
shpermissions	struct
*	O
qadd	pointer
;	O
{	O
struct	O
shpermissions	struct
*	O
qlook	pointer
;	O
struct	O
shpermissions	struct
*	O
qnew	pointer
;	O
int	O
iret	int
;	O
if	O
(	O
qadd	pointer
->	O
pzlogname	pointer
==	O
NULL	O
&&	O
qadd	pointer
->	O
frequest	int
<	O
0	int
&&	O
qadd	pointer
->	O
fsendfiles	int
<	O
0	int
&&	O
qadd	pointer
->	O
pzread	pointer
==	O
NULL	O
&&	O
qadd	pointer
->	O
pzwrite	pointer
==	O
NULL	O
&&	O
qadd	pointer
->	O
fcallback	int
<	O
0	int
&&	O
qadd	pointer
->	O
pzcommands	pointer
==	O
NULL	O
&&	O
qadd	pointer
->	O
pzvalidate	pointer
==	O
NULL	O
&&	O
qadd	pointer
->	O
zmyname	pointer
==	O
NULL	O
&&	O
qadd	pointer
->	O
zpubdir	pointer
==	O
NULL	O
&&	O
qadd	pointer
->	O
pzalias	pointer
==	O
NULL	O
)	O
return	O
;	O
for	O
(	O
qlook	pointer
=	O
qVperms	pointer
;	O
qlook	pointer
!=	O
NULL	O
;	O
qlook	pointer
=	O
qlook	pointer
->	O
qnext	pointer
)	O
{	O
if	O
(	O
qadd	pointer
->	O
pzlogname	pointer
==	O
NULL	O
?	O
qlook	pointer
->	O
pzlogname	pointer
!=	O
NULL	O
:	O
qlook	pointer
->	O
pzlogname	pointer
==	O
NULL	O
)	O
continue	O
;	O
if	O
(	O
qadd	pointer
->	O
pzmachine	pointer
==	O
NULL	O
?	O
qlook	pointer
->	O
pzmachine	pointer
!=	O
NULL	O
:	O
qlook	pointer
->	O
pzmachine	pointer
==	O
NULL	O
)	O
continue	O
;	O
if	O
(	O
qadd	pointer
->	O
frequest	int
!=	O
qlook	pointer
->	O
frequest	int
||	O
qadd	pointer
->	O
fsendfiles	int
!=	O
qlook	pointer
->	O
fsendfiles	int
||	O
qadd	pointer
->	O
fcallback	int
!=	O
qlook	pointer
->	O
fcallback	int
)	O
continue	O
;	O
if	O
(	O
!	O
fvperm_string_cmp	function
(	O
qadd	pointer
->	O
zmyname	pointer
,	O
qlook	pointer
->	O
zmyname	pointer
)	O
||	O
!	O
fvperm_string_cmp	function
(	O
qadd	pointer
->	O
zpubdir	pointer
,	O
qlook	pointer
->	O
zpubdir	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
!	O
fvperm_array_cmp	function
(	O
(	O
const	O
char	O
*	O
*	O
)	O
qadd	pointer
->	O
pzread	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
qlook	pointer
->	O
pzread	pointer
)	O
||	O
!	O
fvperm_array_cmp	function
(	O
(	O
const	O
char	O
*	O
*	O
)	O
qadd	pointer
->	O
pzwrite	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
qlook	pointer
->	O
pzwrite	pointer
)	O
||	O
!	O
fvperm_array_cmp	function
(	O
(	O
const	O
char	O
*	O
*	O
)	O
qadd	pointer
->	O
pzcommands	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
qlook	pointer
->	O
pzcommands	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
qadd	pointer
->	O
pzmachine	pointer
!=	O
NULL	O
)	O
{	O
iret	int
=	O
_uuconf_iadd_string	function
(	O
(	O
struct	O
sglobal	struct
*	O
)	O
NULL	O
,	O
qadd	pointer
->	O
pzmachine	pointer
[	O
0	int
]	O
,	O
FALSE	O
,	O
TRUE	O
,	O
&	O
qlook	pointer
->	O
pzmachine	pointer
,	O
(	O
pointer	pointer
)	O
NULL	O
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
uvuuconf_error	function
(	O
(	O
pointer	pointer
)	O
NULL	O
,	O
iret	int
)	O
;	O
}	O
if	O
(	O
qadd	pointer
->	O
pzlogname	pointer
!=	O
NULL	O
)	O
{	O
iret	int
=	O
_uuconf_iadd_string	function
(	O
(	O
struct	O
sglobal	struct
*	O
)	O
NULL	O
,	O
qadd	pointer
->	O
pzlogname	pointer
[	O
0	int
]	O
,	O
FALSE	O
,	O
TRUE	O
,	O
&	O
qlook	pointer
->	O
pzlogname	pointer
,	O
(	O
pointer	pointer
)	O
NULL	O
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
uvuuconf_error	function
(	O
(	O
pointer	pointer
)	O
NULL	O
,	O
iret	int
)	O
;	O
}	O
if	O
(	O
qadd	pointer
->	O
pzalias	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
for	O
(	O
pz	pointer
=	O
qadd	pointer
->	O
pzalias	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
iret	int
=	O
_uuconf_iadd_string	function
(	O
(	O
struct	O
sglobal	struct
*	O
)	O
NULL	O
,	O
*	O
pz	pointer
,	O
FALSE	O
,	O
TRUE	O
,	O
&	O
qlook	pointer
->	O
pzalias	pointer
,	O
(	O
pointer	pointer
)	O
NULL	O
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
uvuuconf_error	function
(	O
(	O
pointer	pointer
)	O
NULL	O
,	O
iret	int
)	O
;	O
}	O
}	O
return	O
;	O
}	O
qnew	pointer
=	O
(	O
struct	O
shpermissions	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
shpermissions	struct
)	O
)	O
;	O
if	O
(	O
qnew	pointer
==	O
NULL	O
)	O
uvuuconf_error	function
(	O
(	O
pointer	pointer
)	O
NULL	O
,	O
UUCONF_MALLOC_FAILED	O
)	O
;	O
*	O
qnew	pointer
=	O
*	O
qadd	pointer
;	O
if	O
(	O
qadd	pointer
->	O
pzmachine	pointer
!=	O
NULL	O
)	O
{	O
qnew	pointer
->	O
pzmachine	pointer
=	O
NULL	O
;	O
iret	int
=	O
_uuconf_iadd_string	function
(	O
(	O
struct	O
sglobal	struct
*	O
)	O
NULL	O
,	O
qadd	pointer
->	O
pzmachine	pointer
[	O
0	int
]	O
,	O
FALSE	O
,	O
FALSE	O
,	O
&	O
qnew	pointer
->	O
pzmachine	pointer
,	O
(	O
pointer	pointer
)	O
NULL	O
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
uvuuconf_error	function
(	O
(	O
pointer	pointer
)	O
NULL	O
,	O
iret	int
)	O
;	O
}	O
if	O
(	O
qadd	pointer
->	O
pzlogname	pointer
!=	O
NULL	O
)	O
{	O
qnew	pointer
->	O
pzlogname	pointer
=	O
NULL	O
;	O
iret	int
=	O
_uuconf_iadd_string	function
(	O
(	O
struct	O
sglobal	struct
*	O
)	O
NULL	O
,	O
qadd	pointer
->	O
pzlogname	pointer
[	O
0	int
]	O
,	O
FALSE	O
,	O
FALSE	O
,	O
&	O
qnew	pointer
->	O
pzlogname	pointer
,	O
(	O
pointer	pointer
)	O
NULL	O
)	O
;	O
if	O
(	O
iret	int
!=	O
UUCONF_SUCCESS	O
)	O
uvuuconf_error	function
(	O
(	O
pointer	pointer
)	O
NULL	O
,	O
iret	int
)	O
;	O
}	O
if	O
(	O
qadd	pointer
->	O
pzvalidate	pointer
!=	O
NULL	O
)	O
qnew	pointer
->	O
pzvalidate	pointer
=	O
qnew	pointer
->	O
pzmachine	pointer
;	O
qnew	pointer
->	O
qnext	pointer
=	O
qVperms	pointer
;	O
qVperms	pointer
=	O
qnew	pointer
;	O
}	O
static	O
void	O
uvwrite_perms	function
(	O
)	O
{	O
char	O
ab	array
[	O
sizeof	O
ZCURDIR	pointer
+	O
sizeof	O
HDB_PERMISSIONS	pointer
-	O
1	int
]	O
;	O
FILE	struct
*	O
e	pointer
;	O
struct	O
shpermissions	struct
*	O
q	pointer
;	O
sprintf	function
(	O
ab	array
,	O
"%s%s"	pointer
,	O
ZCURDIR	pointer
,	O
HDB_PERMISSIONS	pointer
)	O
;	O
e	pointer
=	O
fopen	function
(	O
ab	array
,	O
"w"	pointer
)	O
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uuchk:%s: "	pointer
,	O
ab	array
)	O
;	O
perror	function
(	O
"fopen"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
fprintf	function
(	O
e	pointer
,	O
"# Permissions file automatically generated by uuconv.\n"	pointer
)	O
;	O
for	O
(	O
q	pointer
=	O
qVperms	pointer
;	O
q	pointer
!=	O
NULL	O
;	O
q	pointer
=	O
q	pointer
->	O
qnext	pointer
)	O
{	O
size_t	long
ccol	long
;	O
ccol	long
=	O
0	int
;	O
uvwrite_perm_array	function
(	O
e	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
q	pointer
->	O
pzlogname	pointer
,	O
"LOGNAME"	pointer
,	O
&	O
ccol	long
)	O
;	O
uvwrite_perm_array	function
(	O
e	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
q	pointer
->	O
pzmachine	pointer
,	O
"MACHINE"	pointer
,	O
&	O
ccol	long
)	O
;	O
uvwrite_perm_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
frequest	int
,	O
"REQUEST"	pointer
,	O
&	O
ccol	long
,	O
FALSE	O
)	O
;	O
uvwrite_perm_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
fsendfiles	int
,	O
"SENDFILES"	pointer
,	O
&	O
ccol	long
,	O
TRUE	O
)	O
;	O
uvwrite_perm_rw_array	function
(	O
e	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
q	pointer
->	O
pzread	pointer
,	O
"READ"	pointer
,	O
&	O
ccol	long
)	O
;	O
uvwrite_perm_rw_array	function
(	O
e	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
q	pointer
->	O
pzwrite	pointer
,	O
"WRITE"	pointer
,	O
&	O
ccol	long
)	O
;	O
uvwrite_perm_boolean	function
(	O
e	pointer
,	O
q	pointer
->	O
fcallback	int
,	O
"CALLBACK"	pointer
,	O
&	O
ccol	long
,	O
FALSE	O
)	O
;	O
uvwrite_perm_array	function
(	O
e	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
q	pointer
->	O
pzcommands	pointer
,	O
"COMMANDS"	pointer
,	O
&	O
ccol	long
)	O
;	O
uvwrite_perm_array	function
(	O
e	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
q	pointer
->	O
pzvalidate	pointer
,	O
"VALIDATE"	pointer
,	O
&	O
ccol	long
)	O
;	O
uvwrite_perm_string	function
(	O
e	pointer
,	O
q	pointer
->	O
zmyname	pointer
,	O
"MYNAME"	pointer
,	O
&	O
ccol	long
)	O
;	O
uvwrite_perm_string	function
(	O
e	pointer
,	O
q	pointer
->	O
zpubdir	pointer
,	O
"PUBDIR"	pointer
,	O
&	O
ccol	long
)	O
;	O
uvwrite_perm_array	function
(	O
e	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
q	pointer
->	O
pzalias	pointer
,	O
"ALIAS"	pointer
,	O
&	O
ccol	long
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
ferror	function
(	O
e	pointer
)	O
||	O
fclose	function
(	O
e	pointer
)	O
==	O
EOF	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"uuchk:%s: error during output\n"	pointer
,	O
HDB_PERMISSIONS	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
static	O
void	O
uvwrite_perm_array	function
(	O
e	pointer
,	O
pzarg	pointer
,	O
zcmd	pointer
,	O
pccol	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
const	O
char	O
*	O
*	O
pzarg	pointer
;	O
const	O
char	O
*	O
zcmd	pointer
;	O
size_t	long
*	O
pccol	pointer
;	O
{	O
size_t	long
c	long
;	O
const	O
char	O
*	O
*	O
pz	pointer
;	O
if	O
(	O
pzarg	pointer
==	O
NULL	O
)	O
return	O
;	O
c	long
=	O
strlen	function
(	O
zcmd	pointer
)	O
+	O
1	int
;	O
for	O
(	O
pz	pointer
=	O
pzarg	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
c	long
+=	O
strlen	function
(	O
*	O
pz	pointer
)	O
+	O
1	int
;	O
if	O
(	O
*	O
pccol	pointer
>	O
20	int
&&	O
c	long
+	O
*	O
pccol	pointer
>	O
75	int
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
" \\\n"	pointer
)	O
;	O
*	O
pccol	pointer
=	O
c	long
-	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
*	O
pccol	pointer
!=	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
*	O
pccol	pointer
+=	O
c	long
;	O
}	O
fprintf	function
(	O
e	pointer
,	O
"%s="	pointer
,	O
zcmd	pointer
)	O
;	O
for	O
(	O
pz	pointer
=	O
pzarg	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
{	O
if	O
(	O
pz	pointer
!=	O
pzarg	pointer
)	O
fprintf	function
(	O
e	pointer
,	O
":"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
}	O
}	O
static	O
void	O
uvwrite_perm_boolean	function
(	O
e	pointer
,	O
f	int
,	O
zcmd	pointer
,	O
pccol	pointer
,	O
fsendfiles	int
)	O
FILE	struct
*	O
e	pointer
;	O
int	O
f	int
;	O
const	O
char	O
*	O
zcmd	pointer
;	O
size_t	long
*	O
pccol	pointer
;	O
boolean	int
fsendfiles	int
;	O
{	O
const	O
char	O
*	O
az	array
[	O
2	int
]	O
;	O
if	O
(	O
f	int
<	O
0	int
)	O
return	O
;	O
if	O
(	O
f	int
)	O
az	array
[	O
0	int
]	O
=	O
"yes"	pointer
;	O
else	O
az	array
[	O
0	int
]	O
=	O
fsendfiles	int
?	O
"call"	pointer
:	O
"no"	pointer
;	O
az	array
[	O
1	int
]	O
=	O
NULL	O
;	O
uvwrite_perm_array	function
(	O
e	pointer
,	O
az	array
,	O
zcmd	pointer
,	O
pccol	pointer
)	O
;	O
}	O
static	O
void	O
uvwrite_perm_rw_array	function
(	O
e	pointer
,	O
pzarg	pointer
,	O
zcmd	pointer
,	O
pccol	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
const	O
char	O
*	O
*	O
pzarg	pointer
;	O
const	O
char	O
*	O
zcmd	pointer
;	O
size_t	long
*	O
pccol	pointer
;	O
{	O
size_t	long
c	long
;	O
const	O
char	O
*	O
*	O
pz	pointer
,	O
*	O
*	O
pzcopy	pointer
,	O
*	O
*	O
pzset	pointer
;	O
if	O
(	O
pzarg	pointer
==	O
NULL	O
)	O
return	O
;	O
c	long
=	O
0	int
;	O
for	O
(	O
pz	pointer
=	O
pzarg	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
c	long
++	O
;	O
pzcopy	pointer
=	O
(	O
const	O
char	O
*	O
*	O
)	O
malloc	function
(	O
(	O
c	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
if	O
(	O
pzcopy	pointer
==	O
NULL	O
)	O
uvuuconf_error	function
(	O
(	O
pointer	pointer
)	O
NULL	O
,	O
UUCONF_MALLOC_FAILED	O
)	O
;	O
pzset	pointer
=	O
pzcopy	pointer
;	O
for	O
(	O
pz	pointer
=	O
pzarg	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
if	O
(	O
(	O
*	O
pz	pointer
)	O
[	O
0	int
]	O
!=	O
'!'	O
)	O
*	O
pzset	pointer
++	O
=	O
*	O
pz	pointer
;	O
*	O
pzset	pointer
=	O
NULL	O
;	O
if	O
(	O
pzset	pointer
!=	O
pzcopy	pointer
)	O
uvwrite_perm_array	function
(	O
e	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
pzcopy	pointer
,	O
zcmd	pointer
,	O
pccol	pointer
)	O
;	O
pzset	pointer
=	O
pzcopy	pointer
;	O
for	O
(	O
pz	pointer
=	O
pzarg	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
if	O
(	O
(	O
*	O
pz	pointer
)	O
[	O
0	int
]	O
==	O
'!'	O
)	O
*	O
pzset	pointer
++	O
=	O
*	O
pz	pointer
;	O
*	O
pzset	pointer
=	O
NULL	O
;	O
if	O
(	O
pzset	pointer
!=	O
pzcopy	pointer
)	O
{	O
char	O
ab	array
[	O
20	int
]	O
;	O
sprintf	function
(	O
ab	array
,	O
"NO%s"	pointer
,	O
zcmd	pointer
)	O
;	O
uvwrite_perm_array	function
(	O
e	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
pzcopy	pointer
,	O
ab	array
,	O
pccol	pointer
)	O
;	O
}	O
}	O
static	O
void	O
uvwrite_perm_string	function
(	O
e	pointer
,	O
z	pointer
,	O
zcmd	pointer
,	O
pccol	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
const	O
char	O
*	O
z	pointer
;	O
const	O
char	O
*	O
zcmd	pointer
;	O
size_t	long
*	O
pccol	pointer
;	O
{	O
const	O
char	O
*	O
az	array
[	O
2	int
]	O
;	O
if	O
(	O
z	pointer
==	O
NULL	O
)	O
return	O
;	O
az	array
[	O
0	int
]	O
=	O
z	pointer
;	O
az	array
[	O
1	int
]	O
=	O
NULL	O
;	O
uvwrite_perm_array	function
(	O
e	pointer
,	O
az	array
,	O
zcmd	pointer
,	O
pccol	pointer
)	O
;	O
}	O
static	O
int	O
ivwrite_taylor_port	function
(	O
qport	pointer
,	O
pinfo	pointer
)	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
pointer	pointer
pinfo	pointer
;	O
{	O
FILE	struct
*	O
e	pointer
=	O
(	O
FILE	struct
*	O
)	O
pinfo	pointer
;	O
fprintf	function
(	O
e	pointer
,	O
"port %s\n"	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
)	O
;	O
uvwrite_taylor_port	function
(	O
e	pointer
,	O
qport	pointer
,	O
""	pointer
)	O
;	O
return	O
UUCONF_NOT_FOUND	O
;	O
}	O
static	O
void	O
uvwrite_taylor_port	function
(	O
e	pointer
,	O
qport	pointer
,	O
zprefix	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
const	O
char	O
*	O
zprefix	pointer
;	O
{	O
const	O
char	O
*	O
ztype	pointer
;	O
char	O
ab	array
[	O
100	int
]	O
;	O
switch	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
)	O
{	O
default	O
:	O
case	O
UUCONF_PORTTYPE_UNKNOWN	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"uuconv: Bad port type\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_STDIN	int
:	O
ztype	pointer
=	O
"stdin"	pointer
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_MODEM	int
:	O
ztype	pointer
=	O
"modem"	pointer
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_DIRECT	int
:	O
ztype	pointer
=	O
"direct"	pointer
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_TCP	int
:	O
ztype	pointer
=	O
"tcp"	pointer
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_TLI	int
:	O
ztype	pointer
=	O
"tli"	pointer
;	O
break	O
;	O
case	O
UUCONF_PORTTYPE_PIPE	int
:	O
ztype	pointer
=	O
"pipe"	pointer
;	O
break	O
;	O
}	O
fprintf	function
(	O
e	pointer
,	O
"%stype %s\n"	pointer
,	O
zprefix	pointer
,	O
ztype	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%sprotocol %s\n"	pointer
,	O
zprefix	pointer
,	O
qport	pointer
->	O
uuconf_zprotocols	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_qproto_params	pointer
!=	O
NULL	O
)	O
uvwrite_proto_params	function
(	O
e	pointer
,	O
qport	pointer
->	O
uuconf_qproto_params	pointer
,	O
zprefix	pointer
)	O
;	O
if	O
(	O
(	O
qport	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_SPECIFIED	O
)	O
!=	O
0	int
)	O
{	O
sprintf	function
(	O
ab	array
,	O
"%sseven-bit"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_boolean	function
(	O
e	pointer
,	O
(	O
(	O
qport	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_EIGHT	O
)	O
==	O
0	int
)	O
,	O
ab	array
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%sreliable"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_boolean	function
(	O
e	pointer
,	O
(	O
(	O
qport	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_RELIABLE	O
)	O
!=	O
0	int
)	O
,	O
ab	array
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%shalf-duplex"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_boolean	function
(	O
e	pointer
,	O
(	O
(	O
qport	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_FULLDUPLEX	O
)	O
==	O
0	int
)	O
,	O
ab	array
)	O
;	O
}	O
if	O
(	O
qport	pointer
->	O
uuconf_zlockname	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%slockname %s\n"	pointer
,	O
zprefix	pointer
,	O
qport	pointer
->	O
uuconf_zlockname	pointer
)	O
;	O
switch	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
)	O
{	O
default	O
:	O
break	O
;	O
case	O
UUCONF_PORTTYPE_MODEM	int
:	O
{	O
struct	O
uuconf_modem_port	struct
*	O
qm	pointer
;	O
qm	pointer
=	O
&	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
;	O
if	O
(	O
qm	pointer
->	O
uuconf_zdevice	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%sdevice %s\n"	pointer
,	O
zprefix	pointer
,	O
qm	pointer
->	O
uuconf_zdevice	pointer
)	O
;	O
if	O
(	O
qm	pointer
->	O
uuconf_zdial_device	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%sdial-device %s\n"	pointer
,	O
zprefix	pointer
,	O
qm	pointer
->	O
uuconf_zdial_device	pointer
)	O
;	O
if	O
(	O
qm	pointer
->	O
uuconf_ibaud	long
!=	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%sbaud %ld\n"	pointer
,	O
zprefix	pointer
,	O
qm	pointer
->	O
uuconf_ibaud	long
)	O
;	O
if	O
(	O
qm	pointer
->	O
uuconf_ilowbaud	long
!=	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%sbaud-range %ld %ld\n"	pointer
,	O
zprefix	pointer
,	O
qm	pointer
->	O
uuconf_ilowbaud	long
,	O
qm	pointer
->	O
uuconf_ihighbaud	long
)	O
;	O
if	O
(	O
!	O
qm	pointer
->	O
uuconf_fcarrier	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%scarrier false\n"	pointer
,	O
zprefix	pointer
)	O
;	O
if	O
(	O
!	O
qm	pointer
->	O
uuconf_fhardflow	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%shardflow false\n"	pointer
,	O
zprefix	pointer
)	O
;	O
if	O
(	O
qm	pointer
->	O
uuconf_pzdialer	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
qm	pointer
->	O
uuconf_pzdialer	pointer
[	O
1	int
]	O
==	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%sdialer %s\n"	pointer
,	O
zprefix	pointer
,	O
qm	pointer
->	O
uuconf_pzdialer	pointer
[	O
0	int
]	O
)	O
;	O
else	O
{	O
sprintf	function
(	O
ab	array
,	O
"%sdialer-sequence"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_string_array	function
(	O
e	pointer
,	O
qm	pointer
->	O
uuconf_pzdialer	pointer
,	O
ab	array
)	O
;	O
}	O
}	O
if	O
(	O
qm	pointer
->	O
uuconf_qdialer	pointer
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
ab	array
,	O
"%sdialer "	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_taylor_dialer	function
(	O
e	pointer
,	O
qm	pointer
->	O
uuconf_qdialer	pointer
,	O
ab	array
)	O
;	O
}	O
}	O
break	O
;	O
case	O
UUCONF_PORTTYPE_DIRECT	int
:	O
{	O
struct	O
uuconf_direct_port	struct
*	O
qd	pointer
;	O
qd	pointer
=	O
&	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
;	O
if	O
(	O
qd	pointer
->	O
uuconf_zdevice	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%sdevice %s\n"	pointer
,	O
zprefix	pointer
,	O
qd	pointer
->	O
uuconf_zdevice	pointer
)	O
;	O
if	O
(	O
qd	pointer
->	O
uuconf_ibaud	long
!=	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%sbaud %ld\n"	pointer
,	O
zprefix	pointer
,	O
qd	pointer
->	O
uuconf_ibaud	long
)	O
;	O
if	O
(	O
qd	pointer
->	O
uuconf_fcarrier	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%scarrier true\n"	pointer
,	O
zprefix	pointer
)	O
;	O
if	O
(	O
!	O
qd	pointer
->	O
uuconf_fhardflow	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%shardflow false\n"	pointer
,	O
zprefix	pointer
)	O
;	O
}	O
break	O
;	O
case	O
UUCONF_PORTTYPE_TCP	int
:	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_zport	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%sservice %s\n"	pointer
,	O
zprefix	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_zport	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_pzdialer	pointer
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
ab	array
,	O
"%sdialer-sequence"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_string_array	function
(	O
e	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_pzdialer	pointer
,	O
ab	array
)	O
;	O
}	O
break	O
;	O
case	O
UUCONF_PORTTYPE_TLI	int
:	O
{	O
struct	O
uuconf_tli_port	struct
*	O
qt	pointer
;	O
qt	pointer
=	O
&	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stli	struct
;	O
if	O
(	O
qt	pointer
->	O
uuconf_zdevice	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%sdevice %s\n"	pointer
,	O
zprefix	pointer
,	O
qt	pointer
->	O
uuconf_zdevice	pointer
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%sstream"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_boolean	function
(	O
e	pointer
,	O
qt	pointer
->	O
uuconf_fstream	int
,	O
ab	array
)	O
;	O
if	O
(	O
qt	pointer
->	O
uuconf_pzpush	pointer
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
ab	array
,	O
"%spush"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_string_array	function
(	O
e	pointer
,	O
qt	pointer
->	O
uuconf_pzpush	pointer
,	O
ab	array
)	O
;	O
}	O
if	O
(	O
qt	pointer
->	O
uuconf_pzdialer	pointer
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
ab	array
,	O
"%sdialer-sequence"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_string_array	function
(	O
e	pointer
,	O
qt	pointer
->	O
uuconf_pzdialer	pointer
,	O
ab	array
)	O
;	O
}	O
if	O
(	O
qt	pointer
->	O
uuconf_zservaddr	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%sserver-address %s\n"	pointer
,	O
zprefix	pointer
,	O
qt	pointer
->	O
uuconf_zservaddr	pointer
)	O
;	O
}	O
break	O
;	O
case	O
UUCONF_PORTTYPE_PIPE	int
:	O
{	O
struct	O
uuconf_pipe_port	struct
*	O
qp	pointer
;	O
qp	pointer
=	O
&	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_spipe	struct
;	O
if	O
(	O
qp	pointer
->	O
uuconf_pzcmd	pointer
!=	O
NULL	O
)	O
{	O
sprintf	function
(	O
ab	array
,	O
"%scommad"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_string_array	function
(	O
e	pointer
,	O
qp	pointer
->	O
uuconf_pzcmd	pointer
,	O
ab	array
)	O
;	O
}	O
}	O
break	O
;	O
}	O
}	O
static	O
int	O
ivwrite_v2_port	function
(	O
qport	pointer
,	O
pinfo	pointer
)	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
pointer	pointer
pinfo	pointer
;	O
{	O
FILE	struct
*	O
e	pointer
=	O
(	O
FILE	struct
*	O
)	O
pinfo	pointer
;	O
if	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_DIRECT	int
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"DIR %s - %ld direct"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_zdevice	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_ibaud	long
)	O
;	O
}	O
else	O
if	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_MODEM	int
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"%s %s "	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdevice	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdial_device	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdial_device	pointer
)	O
;	O
else	O
fprintf	function
(	O
e	pointer
,	O
"-"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_ilowbaud	long
!=	O
0L	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%ld-%ld"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_ilowbaud	long
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_ihighbaud	long
)	O
;	O
else	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_ibaud	long
!=	O
0L	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%ld"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_ibaud	long
)	O
;	O
else	O
fprintf	function
(	O
e	pointer
,	O
"Any"	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_pzdialer	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
" %s"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_pzdialer	pointer
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
e	pointer
,	O
"# Ignoring port %s with unsupported type"	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
)	O
;	O
}	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
return	O
UUCONF_NOT_FOUND	O
;	O
}	O
static	O
int	O
ivwrite_hdb_port	function
(	O
qport	pointer
,	O
pinfo	pointer
)	O
struct	O
uuconf_port	struct
*	O
qport	pointer
;	O
pointer	pointer
pinfo	pointer
;	O
{	O
FILE	struct
*	O
e	pointer
=	O
(	O
FILE	struct
*	O
)	O
pinfo	pointer
;	O
if	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_DIRECT	int
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"Direct"	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
",%s"	pointer
,	O
qport	pointer
->	O
uuconf_zprotocols	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_zdevice	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_zdevice	pointer
)	O
;	O
else	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
" - %ld"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_sdirect	struct
.	O
uuconf_ibaud	long
)	O
;	O
}	O
else	O
if	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_MODEM	int
)	O
{	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
",%s"	pointer
,	O
qport	pointer
->	O
uuconf_zprotocols	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdevice	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdevice	pointer
)	O
;	O
else	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdial_device	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdial_device	pointer
)	O
;	O
else	O
fprintf	function
(	O
e	pointer
,	O
"-"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_ilowbaud	long
!=	O
0L	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%ld-%ld"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_ilowbaud	long
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_ihighbaud	long
)	O
;	O
else	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_ibaud	long
!=	O
0L	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%ld"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_ibaud	long
)	O
;	O
else	O
fprintf	function
(	O
e	pointer
,	O
"Any"	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_pzdialer	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
for	O
(	O
pz	pointer
=	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_pzdialer	pointer
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
fprintf	function
(	O
e	pointer
,	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_TCP	int
)	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
fprintf	function
(	O
e	pointer
,	O
"TCP"	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
",%s"	pointer
,	O
qport	pointer
->	O
uuconf_zprotocols	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_zport	pointer
==	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"uucp"	pointer
)	O
;	O
else	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_zport	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
" - -"	pointer
)	O
;	O
pz	pointer
=	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stcp	struct
.	O
uuconf_pzdialer	pointer
;	O
if	O
(	O
pz	pointer
!=	O
NULL	O
)	O
for	O
(	O
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
fprintf	function
(	O
e	pointer
,	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
}	O
else	O
if	O
(	O
qport	pointer
->	O
uuconf_ttype	enum
==	O
UUCONF_PORTTYPE_TLI	int
)	O
{	O
char	O
*	O
*	O
pz	pointer
;	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_zprotocols	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
",%s"	pointer
,	O
qport	pointer
->	O
uuconf_zprotocols	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
if	O
(	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stli	struct
.	O
uuconf_zdevice	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"%s"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_smodem	struct
.	O
uuconf_zdevice	pointer
)	O
;	O
else	O
fprintf	function
(	O
e	pointer
,	O
"-"	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
" - -"	pointer
)	O
;	O
pz	pointer
=	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stli	struct
.	O
uuconf_pzdialer	pointer
;	O
if	O
(	O
pz	pointer
==	O
NULL	O
||	O
*	O
pz	pointer
==	O
NULL	O
||	O
(	O
strcmp	function
(	O
*	O
pz	pointer
,	O
"TLI"	pointer
)	O
!=	O
0	int
&&	O
strcmp	function
(	O
*	O
pz	pointer
,	O
"TLIS"	pointer
)	O
!=	O
0	int
)	O
)	O
fprintf	function
(	O
e	pointer
,	O
" TLI%s \\D"	pointer
,	O
qport	pointer
->	O
uuconf_u	union
.	O
uuconf_stli	struct
.	O
uuconf_fstream	int
?	O
"S"	pointer
:	O
""	pointer
)	O
;	O
if	O
(	O
pz	pointer
!=	O
NULL	O
)	O
for	O
(	O
;	O
*	O
pz	pointer
!=	O
NULL	O
;	O
pz	pointer
++	O
)	O
fprintf	function
(	O
e	pointer
,	O
" %s"	pointer
,	O
*	O
pz	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
e	pointer
,	O
"# Ignoring port %s with unsupported type"	pointer
,	O
qport	pointer
->	O
uuconf_zname	pointer
)	O
;	O
}	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
return	O
UUCONF_NOT_FOUND	O
;	O
}	O
static	O
void	O
uvwrite_taylor_dialer	function
(	O
e	pointer
,	O
qdialer	pointer
,	O
zprefix	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
;	O
const	O
char	O
*	O
zprefix	pointer
;	O
{	O
char	O
ab	array
[	O
100	int
]	O
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_schat	struct
.	O
uuconf_ctimeout	int
==	O
60	int
)	O
qdialer	pointer
->	O
uuconf_schat	struct
.	O
uuconf_ctimeout	int
=	O
-	O
1	int
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_schat	struct
.	O
uuconf_fstrip	int
)	O
qdialer	pointer
->	O
uuconf_schat	struct
.	O
uuconf_fstrip	int
=	O
-	O
1	int
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_scomplete	struct
.	O
uuconf_ctimeout	int
==	O
60	int
)	O
qdialer	pointer
->	O
uuconf_scomplete	struct
.	O
uuconf_ctimeout	int
=	O
-	O
1	int
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_scomplete	struct
.	O
uuconf_fstrip	int
)	O
qdialer	pointer
->	O
uuconf_scomplete	struct
.	O
uuconf_fstrip	int
=	O
-	O
1	int
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_sabort	struct
.	O
uuconf_ctimeout	int
==	O
60	int
)	O
qdialer	pointer
->	O
uuconf_sabort	struct
.	O
uuconf_ctimeout	int
=	O
-	O
1	int
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_sabort	struct
.	O
uuconf_fstrip	int
)	O
qdialer	pointer
->	O
uuconf_sabort	struct
.	O
uuconf_fstrip	int
=	O
-	O
1	int
;	O
uvwrite_chat	function
(	O
e	pointer
,	O
&	O
qdialer	pointer
->	O
uuconf_schat	struct
,	O
(	O
struct	O
uuconf_chat	struct
*	O
)	O
NULL	O
,	O
zprefix	pointer
,	O
FALSE	O
)	O
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_zdialtone	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
qdialer	pointer
->	O
uuconf_zdialtone	pointer
,	O
","	pointer
)	O
!=	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%sdialtone %s\n"	pointer
,	O
zprefix	pointer
,	O
qdialer	pointer
->	O
uuconf_zdialtone	pointer
)	O
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_zpause	pointer
!=	O
NULL	O
&&	O
strcmp	function
(	O
qdialer	pointer
->	O
uuconf_zpause	pointer
,	O
","	pointer
)	O
!=	O
0	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%spause %s\n"	pointer
,	O
zprefix	pointer
,	O
qdialer	pointer
->	O
uuconf_zpause	pointer
)	O
;	O
if	O
(	O
!	O
qdialer	pointer
->	O
uuconf_fcarrier	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%scarrier false\n"	pointer
,	O
zprefix	pointer
)	O
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_ccarrier_wait	int
!=	O
60	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%scarrier-wait %d\n"	pointer
,	O
zprefix	pointer
,	O
qdialer	pointer
->	O
uuconf_ccarrier_wait	int
)	O
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_fdtr_toggle	int
)	O
fprintf	function
(	O
e	pointer
,	O
"%sdtr-toggle %s %s\n"	pointer
,	O
zprefix	pointer
,	O
qdialer	pointer
->	O
uuconf_fdtr_toggle	int
?	O
"true"	pointer
:	O
"false"	pointer
,	O
qdialer	pointer
->	O
uuconf_fdtr_toggle_wait	int
?	O
"true"	pointer
:	O
"false"	pointer
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%scomplete-"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_chat	function
(	O
e	pointer
,	O
&	O
qdialer	pointer
->	O
uuconf_scomplete	struct
,	O
(	O
struct	O
uuconf_chat	struct
*	O
)	O
NULL	O
,	O
ab	array
,	O
FALSE	O
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%sabort-"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_chat	function
(	O
e	pointer
,	O
&	O
qdialer	pointer
->	O
uuconf_sabort	struct
,	O
(	O
struct	O
uuconf_chat	struct
*	O
)	O
NULL	O
,	O
ab	array
,	O
FALSE	O
)	O
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_qproto_params	pointer
!=	O
NULL	O
)	O
uvwrite_proto_params	function
(	O
e	pointer
,	O
qdialer	pointer
->	O
uuconf_qproto_params	pointer
,	O
zprefix	pointer
)	O
;	O
if	O
(	O
(	O
qdialer	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_SPECIFIED	O
)	O
!=	O
0	int
)	O
{	O
sprintf	function
(	O
ab	array
,	O
"%sseven-bit"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_boolean	function
(	O
e	pointer
,	O
(	O
(	O
qdialer	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_EIGHT	O
)	O
==	O
0	int
)	O
,	O
ab	array
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%sreliable"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_boolean	function
(	O
e	pointer
,	O
(	O
(	O
qdialer	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_RELIABLE	O
)	O
!=	O
0	int
)	O
,	O
ab	array
)	O
;	O
sprintf	function
(	O
ab	array
,	O
"%shalf-duplex"	pointer
,	O
zprefix	pointer
)	O
;	O
uvwrite_boolean	function
(	O
e	pointer
,	O
(	O
(	O
qdialer	pointer
->	O
uuconf_ireliable	int
&	O
UUCONF_RELIABLE_FULLDUPLEX	O
)	O
==	O
0	int
)	O
,	O
ab	array
)	O
;	O
}	O
}	O
static	O
void	O
uvwrite_hdb_dialer	function
(	O
e	pointer
,	O
qdialer	pointer
)	O
FILE	struct
*	O
e	pointer
;	O
struct	O
uuconf_dialer	struct
*	O
qdialer	pointer
;	O
{	O
fprintf	function
(	O
e	pointer
,	O
"%s "	pointer
,	O
qdialer	pointer
->	O
uuconf_zname	pointer
)	O
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_zdialtone	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"=%c"	pointer
,	O
qdialer	pointer
->	O
uuconf_zdialtone	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_zpause	pointer
!=	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"-%c"	pointer
,	O
qdialer	pointer
->	O
uuconf_zpause	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
qdialer	pointer
->	O
uuconf_schat	struct
.	O
uuconf_pzchat	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
qdialer	pointer
->	O
uuconf_zdialtone	pointer
==	O
NULL	O
&&	O
qdialer	pointer
->	O
uuconf_zpause	pointer
==	O
NULL	O
)	O
fprintf	function
(	O
e	pointer
,	O
"\"\""	pointer
)	O
;	O
fprintf	function
(	O
e	pointer
,	O
" "	pointer
)	O
;	O
uvwrite_chat_script	function
(	O
e	pointer
,	O
qdialer	pointer
->	O
uuconf_schat	struct
.	O
uuconf_pzchat	pointer
)	O
;	O
}	O
fprintf	function
(	O
e	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
uvuuconf_error	function
(	O
puuconf	pointer
,	O
iret	int
)	O
pointer	pointer
puuconf	pointer
;	O
int	O
iret	int
;	O
{	O
char	O
ab	array
[	O
512	int
]	O
;	O
(	O
void	O
)	O
uuconf_error_string	function
(	O
puuconf	pointer
,	O
iret	int
,	O
ab	array
,	O
sizeof	O
ab	array
)	O
;	O
if	O
(	O
(	O
iret	int
&	O
UUCONF_ERROR_FILENAME	O
)	O
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"uuconv: %s\n"	pointer
,	O
ab	array
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"uuconv:%s\n"	pointer
,	O
ab	array
)	O
;	O
if	O
(	O
UUCONF_ERROR_VALUE	O
(	O
iret	int
)	O
!=	O
UUCONF_FOPEN_FAILED	O
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
