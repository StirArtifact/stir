char	O
*	O
text	pointer
=	O
"From: root\n\nThis is a test message.\noo\n"	pointer
;	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
i	long
;	O
char	O
*	O
p	pointer
;	O
mu_message_t	pointer
msg	pointer
;	O
mu_stream_t	pointer
stream	pointer
=	O
NULL	O
;	O
mu_header_t	pointer
hdr	pointer
;	O
mu_body_t	pointer
body	pointer
;	O
mu_set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
mu_static_memory_stream_create	function
(	O
&	O
stream	pointer
,	O
text	pointer
,	O
strlen	function
(	O
text	pointer
)	O
)	O
;	O
assert	O
(	O
mu_stream_to_message	function
(	O
stream	pointer
,	O
&	O
msg	pointer
)	O
==	O
0	int
)	O
;	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
assert	O
(	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
==	O
0	int
)	O
;	O
assert	O
(	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
==	O
0	int
)	O
;	O
assert	O
(	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
stream	pointer
)	O
==	O
0	int
)	O
;	O
assert	O
(	O
mu_stream_seek	function
(	O
stream	pointer
,	O
0	int
,	O
MU_SEEK_END	int
,	O
NULL	O
)	O
==	O
0	int
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"-h"	pointer
)	O
==	O
0	int
)	O
{	O
mu_printf	function
(	O
"usage: %s [-a HDR:VAL] [-t TEXT]\n"	pointer
,	O
mu_program_name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"-a"	pointer
)	O
==	O
0	int
)	O
{	O
i	long
++	O
;	O
assert	O
(	O
argv	pointer
[	O
i	long
]	O
!=	O
NULL	O
)	O
;	O
p	pointer
=	O
strchr	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
':'	O
)	O
;	O
assert	O
(	O
p	pointer
!=	O
NULL	O
)	O
;	O
*	O
p	pointer
++	O
=	O
0	int
;	O
while	O
(	O
*	O
p	pointer
&&	O
mu_isspace	O
(	O
*	O
p	pointer
)	O
)	O
p	pointer
++	O
;	O
assert	O
(	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
p	pointer
,	O
1	int
)	O
==	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"-l"	pointer
)	O
==	O
0	int
)	O
{	O
mu_off_t	long
off	long
;	O
int	O
whence	int
=	O
MU_SEEK_SET	int
;	O
i	long
++	O
;	O
assert	O
(	O
argv	pointer
[	O
i	long
]	O
!=	O
NULL	O
)	O
;	O
off	long
=	O
strtol	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
assert	O
(	O
*	O
p	pointer
==	O
0	int
)	O
;	O
if	O
(	O
off	long
<	O
0	int
)	O
whence	int
=	O
MU_SEEK_END	int
;	O
assert	O
(	O
mu_stream_seek	function
(	O
stream	pointer
,	O
off	long
,	O
whence	int
,	O
NULL	O
)	O
==	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
"-t"	pointer
)	O
==	O
0	int
)	O
{	O
mu_wordsplit_t	struct
ws	pointer
;	O
i	long
++	O
;	O
assert	O
(	O
argv	pointer
[	O
i	long
]	O
!=	O
NULL	O
)	O
;	O
if	O
(	O
mu_wordsplit	struct
(	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
ws	pointer
,	O
MU_WRDSF_NOSPLIT	O
|	O
MU_WRDSF_DEFFLAGS	O
)	O
)	O
{	O
mu_error	function
(	O
"mu_wordsplit: %s"	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
else	O
assert	O
(	O
mu_stream_write	function
(	O
stream	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
strlen	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
,	O
NULL	O
)	O
==	O
0	int
)	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
else	O
mu_error	function
(	O
"ignoring unknown argument %s"	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
}	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
assert	O
(	O
mu_message_get_streamref	function
(	O
msg	pointer
,	O
&	O
stream	pointer
)	O
==	O
0	int
)	O
;	O
assert	O
(	O
mu_stream_copy	function
(	O
mu_strout	pointer
,	O
stream	pointer
,	O
0	int
,	O
NULL	O
)	O
==	O
0	int
)	O
;	O
mu_stream_unref	function
(	O
stream	pointer
)	O
;	O
return	O
0	int
;	O
}	O
