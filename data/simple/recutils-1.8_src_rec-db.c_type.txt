struct	O
rec_db_s	struct
{	O
size_t	long
size	pointer
;	O
gl_list_t	pointer
rset_list	pointer
;	O
rec_aggregate_reg_t	pointer
aggregates	pointer
;	O
}	O
;	O
static	O
bool	bool
rec_db_rset_equals_fn	function
(	O
const	O
void	O
*	O
elt1	pointer
,	O
const	O
void	O
*	O
elt2	pointer
)	O
;	O
static	O
void	O
rec_db_rset_dispose_fn	function
(	O
const	O
void	O
*	O
elt	pointer
)	O
;	O
static	O
rec_record_t	pointer
rec_db_process_fex	function
(	O
rec_db_t	pointer
db	pointer
,	O
rec_rset_t	pointer
rset	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_fex_t	pointer
fex	pointer
)	O
;	O
static	O
bool	bool
rec_db_record_selected_p	function
(	O
size_t	long
num_rec	long
,	O
rec_record_t	pointer
record	pointer
,	O
size_t	long
*	O
index	function
,	O
rec_sex_t	pointer
sex	pointer
,	O
const	O
char	O
*	O
fast_string	pointer
,	O
bool	bool
case_insensitive_p	bool
)	O
;	O
static	O
void	O
rec_db_add_random_indexes	function
(	O
size_t	long
*	O
*	O
index	function
,	O
size_t	long
num	pointer
,	O
size_t	long
limit	long
)	O
;	O
static	O
bool	bool
rec_db_index_p	function
(	O
size_t	long
*	O
index	function
,	O
size_t	long
num	pointer
)	O
;	O
static	O
bool	bool
rec_db_set_act_rename	function
(	O
rec_rset_t	pointer
rset	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_fex_t	pointer
fex	pointer
,	O
bool	bool
rename_descriptor	bool
,	O
const	O
char	O
*	O
arg	pointer
)	O
;	O
static	O
bool	bool
rec_db_set_act_set	function
(	O
rec_rset_t	pointer
rset	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_fex_t	pointer
fex	pointer
,	O
bool	bool
xxx	bool
,	O
const	O
char	O
*	O
arg	pointer
)	O
;	O
static	O
bool	bool
rec_db_set_act_add	function
(	O
rec_rset_t	pointer
rset	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_fex_t	pointer
fex	pointer
,	O
const	O
char	O
*	O
arg	pointer
)	O
;	O
static	O
bool	bool
rec_db_set_act_delete	function
(	O
rec_rset_t	pointer
rset	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_fex_t	pointer
fex	pointer
,	O
bool	bool
comment_out	bool
)	O
;	O
static	O
rec_rset_t	pointer
rec_db_join	function
(	O
rec_db_t	pointer
db	pointer
,	O
const	O
char	O
*	O
type1	pointer
,	O
const	O
char	O
*	O
field	pointer
,	O
const	O
char	O
*	O
type2	int
)	O
;	O
static	O
rec_record_t	pointer
rec_db_merge_records	function
(	O
rec_record_t	pointer
record1	pointer
,	O
rec_record_t	pointer
record2	pointer
,	O
const	O
char	O
*	O
prefix	pointer
)	O
;	O
rec_db_t	pointer
rec_db_new	function
(	O
void	O
)	O
{	O
rec_db_t	pointer
new	pointer
;	O
new	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_db_s	struct
)	O
)	O
;	O
if	O
(	O
new	pointer
)	O
{	O
new	pointer
->	O
size	pointer
=	O
0	int
;	O
new	pointer
->	O
rset_list	pointer
=	O
gl_list_nx_create_empty	function
(	O
GL_ARRAY_LIST	O
,	O
rec_db_rset_equals_fn	function
,	O
NULL	O
,	O
rec_db_rset_dispose_fn	function
,	O
true	int
)	O
;	O
if	O
(	O
new	pointer
->	O
rset_list	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
new	pointer
)	O
;	O
new	pointer
=	O
NULL	O
;	O
}	O
new	pointer
->	O
aggregates	pointer
=	O
rec_aggregate_reg_new	function
(	O
)	O
;	O
if	O
(	O
!	O
new	pointer
->	O
aggregates	pointer
)	O
{	O
free	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
rec_aggregate_reg_add_standard	function
(	O
new	pointer
->	O
aggregates	pointer
)	O
;	O
}	O
return	O
new	pointer
;	O
}	O
void	O
rec_db_destroy	function
(	O
rec_db_t	pointer
db	pointer
)	O
{	O
if	O
(	O
db	pointer
)	O
{	O
rec_aggregate_reg_destroy	function
(	O
db	pointer
->	O
aggregates	pointer
)	O
;	O
gl_list_free	function
(	O
db	pointer
->	O
rset_list	pointer
)	O
;	O
free	function
(	O
db	pointer
)	O
;	O
}	O
}	O
size_t	long
rec_db_size	function
(	O
rec_db_t	pointer
db	pointer
)	O
{	O
return	O
db	pointer
->	O
size	pointer
;	O
}	O
rec_rset_t	pointer
rec_db_get_rset	function
(	O
rec_db_t	pointer
db	pointer
,	O
size_t	long
position	long
)	O
{	O
rec_rset_t	pointer
rset	pointer
;	O
rset	pointer
=	O
NULL	O
;	O
if	O
(	O
db	pointer
->	O
size	pointer
>	O
0	int
)	O
{	O
if	O
(	O
position	long
>=	O
db	pointer
->	O
size	pointer
)	O
{	O
position	long
=	O
db	pointer
->	O
size	pointer
-	O
1	int
;	O
}	O
rset	pointer
=	O
(	O
rec_rset_t	pointer
)	O
gl_list_get_at	function
(	O
db	pointer
->	O
rset_list	pointer
,	O
position	long
)	O
;	O
}	O
return	O
rset	pointer
;	O
}	O
bool	bool
rec_db_insert_rset	function
(	O
rec_db_t	pointer
db	pointer
,	O
rec_rset_t	pointer
rset	pointer
,	O
size_t	long
position	long
)	O
{	O
gl_list_node_t	pointer
node	pointer
;	O
node	pointer
=	O
NULL	O
;	O
if	O
(	O
position	long
==	O
0	int
)	O
{	O
node	pointer
=	O
gl_list_nx_add_first	function
(	O
db	pointer
->	O
rset_list	pointer
,	O
(	O
void	O
*	O
)	O
rset	pointer
)	O
;	O
}	O
else	O
if	O
(	O
position	long
>=	O
db	pointer
->	O
size	pointer
)	O
{	O
node	pointer
=	O
gl_list_nx_add_last	function
(	O
db	pointer
->	O
rset_list	pointer
,	O
(	O
void	O
*	O
)	O
rset	pointer
)	O
;	O
}	O
else	O
{	O
node	pointer
=	O
gl_list_nx_add_at	function
(	O
db	pointer
->	O
rset_list	pointer
,	O
position	long
,	O
(	O
void	O
*	O
)	O
rset	pointer
)	O
;	O
}	O
if	O
(	O
node	pointer
!=	O
NULL	O
)	O
{	O
db	pointer
->	O
size	pointer
++	O
;	O
return	O
true	int
;	O
}	O
return	O
false	int
;	O
}	O
bool	bool
rec_db_remove_rset	function
(	O
rec_db_t	pointer
db	pointer
,	O
size_t	long
position	long
)	O
{	O
bool	bool
removed	bool
;	O
removed	bool
=	O
false	int
;	O
if	O
(	O
db	pointer
->	O
size	pointer
>	O
0	int
)	O
{	O
if	O
(	O
position	long
>=	O
db	pointer
->	O
size	pointer
)	O
{	O
position	long
=	O
db	pointer
->	O
size	pointer
-	O
1	int
;	O
}	O
if	O
(	O
gl_list_remove_at	function
(	O
db	pointer
->	O
rset_list	pointer
,	O
position	long
)	O
)	O
{	O
db	pointer
->	O
size	pointer
--	O
;	O
removed	bool
=	O
true	int
;	O
}	O
}	O
return	O
removed	bool
;	O
}	O
bool	bool
rec_db_type_p	function
(	O
rec_db_t	pointer
db	pointer
,	O
const	O
char	O
*	O
type	enum
)	O
{	O
return	O
(	O
rec_db_get_rset_by_type	function
(	O
db	pointer
,	O
type	enum
)	O
!=	O
NULL	O
)	O
;	O
}	O
rec_rset_t	pointer
rec_db_get_rset_by_type	function
(	O
rec_db_t	pointer
db	pointer
,	O
const	O
char	O
*	O
type	enum
)	O
{	O
int	O
i	long
;	O
rec_rset_t	pointer
rset	pointer
;	O
bool	bool
found	bool
;	O
char	O
*	O
rtype	pointer
;	O
found	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_db_size	function
(	O
db	pointer
)	O
;	O
i	long
++	O
)	O
{	O
rset	pointer
=	O
rec_db_get_rset	function
(	O
db	pointer
,	O
i	long
)	O
;	O
rtype	pointer
=	O
rec_rset_type	function
(	O
rset	pointer
)	O
;	O
if	O
(	O
rtype	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
type	enum
==	O
NULL	O
)	O
{	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
type	enum
!=	O
NULL	O
)	O
&&	O
(	O
strcmp	function
(	O
rtype	pointer
,	O
type	enum
)	O
==	O
0	int
)	O
)	O
{	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
found	bool
)	O
{	O
rset	pointer
=	O
NULL	O
;	O
}	O
return	O
rset	pointer
;	O
}	O
rec_rset_t	pointer
rec_db_query	function
(	O
rec_db_t	pointer
db	pointer
,	O
const	O
char	O
*	O
type	enum
,	O
const	O
char	O
*	O
join	pointer
,	O
size_t	long
*	O
index	function
,	O
rec_sex_t	pointer
sex	pointer
,	O
const	O
char	O
*	O
fast_string	pointer
,	O
size_t	long
random	function
,	O
rec_fex_t	pointer
fex	pointer
,	O
const	O
char	O
*	O
password	pointer
,	O
rec_fex_t	pointer
group_by	pointer
,	O
rec_fex_t	pointer
sort_by	pointer
,	O
int	O
flags	int
)	O
{	O
rec_rset_t	pointer
res	pointer
=	O
NULL	O
;	O
rec_rset_t	pointer
rset	pointer
=	O
NULL	O
;	O
res	pointer
=	O
rec_rset_new	function
(	O
)	O
;	O
if	O
(	O
!	O
res	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
rset	pointer
=	O
rec_db_get_rset_by_type	function
(	O
db	pointer
,	O
type	enum
)	O
;	O
if	O
(	O
!	O
rset	pointer
)	O
{	O
if	O
(	O
!	O
type	enum
&&	O
(	O
rec_db_size	function
(	O
db	pointer
)	O
==	O
1	int
)	O
)	O
{	O
rset	pointer
=	O
rec_db_get_rset	function
(	O
db	pointer
,	O
0	int
)	O
;	O
}	O
else	O
{	O
return	O
res	pointer
;	O
}	O
}	O
else	O
{	O
if	O
(	O
join	pointer
)	O
{	O
rec_type_t	pointer
ref_type	pointer
=	O
rec_rset_get_field_type	function
(	O
rset	pointer
,	O
join	pointer
)	O
;	O
if	O
(	O
ref_type	pointer
&&	O
(	O
rec_type_kind	function
(	O
ref_type	pointer
)	O
==	O
REC_TYPE_REC	int
)	O
)	O
{	O
const	O
char	O
*	O
referred_type	pointer
=	O
rec_type_rec	function
(	O
ref_type	pointer
)	O
;	O
if	O
(	O
rec_db_get_rset_by_type	function
(	O
db	pointer
,	O
referred_type	pointer
)	O
)	O
{	O
rset	pointer
=	O
rec_db_join	function
(	O
db	pointer
,	O
type	enum
,	O
join	pointer
,	O
referred_type	pointer
)	O
;	O
if	O
(	O
!	O
rset	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
}	O
}	O
}	O
if	O
(	O
flags	int
&	O
REC_F_DESCRIPTOR	int
)	O
{	O
rec_record_t	pointer
descriptor	pointer
=	O
rec_rset_descriptor	function
(	O
rset	pointer
)	O
;	O
if	O
(	O
descriptor	pointer
)	O
{	O
descriptor	pointer
=	O
rec_record_dup	function
(	O
descriptor	pointer
)	O
;	O
if	O
(	O
!	O
descriptor	pointer
)	O
{	O
free	function
(	O
res	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
rec_rset_set_descriptor	function
(	O
res	pointer
,	O
descriptor	pointer
)	O
;	O
}	O
if	O
(	O
random	function
>	O
0	int
)	O
{	O
rec_db_add_random_indexes	function
(	O
&	O
index	function
,	O
random	function
,	O
rec_rset_num_records	function
(	O
rset	pointer
)	O
)	O
;	O
if	O
(	O
!	O
index	function
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
fex	pointer
&&	O
!	O
group_by	pointer
&&	O
rec_fex_all_calls_p	function
(	O
fex	pointer
)	O
)	O
{	O
rec_record_t	pointer
record	pointer
=	O
rec_db_process_fex	function
(	O
db	pointer
,	O
rset	pointer
,	O
NULL	O
,	O
fex	pointer
)	O
;	O
if	O
(	O
record	pointer
)	O
{	O
rec_record_set_container	function
(	O
record	pointer
,	O
res	pointer
)	O
;	O
if	O
(	O
!	O
rec_mset_append	function
(	O
rec_rset_mset	function
(	O
res	pointer
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
record	pointer
,	O
MSET_RECORD	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
}	O
else	O
{	O
rec_record_t	pointer
record	pointer
=	O
NULL	O
;	O
size_t	long
num_rec	long
=	O
-	O
1	int
;	O
if	O
(	O
group_by	pointer
)	O
{	O
if	O
(	O
!	O
rec_rset_sort	function
(	O
rset	pointer
,	O
group_by	pointer
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
rec_rset_group	function
(	O
rset	pointer
,	O
group_by	pointer
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
!	O
rec_rset_sort	function
(	O
rset	pointer
,	O
sort_by	pointer
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
rec_mset_iterator_t	struct
iter	struct
=	O
rec_mset_iterator	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	pointer
,	O
NULL	O
)	O
)	O
{	O
rec_record_t	pointer
res_record	pointer
;	O
num_rec	long
++	O
;	O
if	O
(	O
!	O
rec_db_record_selected_p	function
(	O
num_rec	long
,	O
record	pointer
,	O
index	function
,	O
sex	pointer
,	O
fast_string	pointer
,	O
flags	int
&	O
REC_F_ICASE	int
)	O
)	O
{	O
continue	O
;	O
}	O
res_record	pointer
=	O
rec_db_process_fex	function
(	O
db	pointer
,	O
rset	pointer
,	O
record	pointer
,	O
fex	pointer
)	O
;	O
if	O
(	O
!	O
res_record	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
rec_record_num_elems	function
(	O
res_record	pointer
)	O
==	O
0	int
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
flags	int
&	O
REC_F_UNIQ	int
)	O
{	O
rec_record_uniq	function
(	O
res_record	pointer
)	O
;	O
}	O
rec_record_set_container	function
(	O
res_record	pointer
,	O
res	pointer
)	O
;	O
if	O
(	O
!	O
rec_mset_append	function
(	O
rec_rset_mset	function
(	O
res	pointer
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
res_record	pointer
,	O
MSET_RECORD	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
}	O
return	O
res	pointer
;	O
}	O
bool	bool
rec_db_insert	function
(	O
rec_db_t	pointer
db	pointer
,	O
const	O
char	O
*	O
type	enum
,	O
size_t	long
*	O
index	function
,	O
rec_sex_t	pointer
sex	pointer
,	O
const	O
char	O
*	O
fast_string	pointer
,	O
size_t	long
random	function
,	O
const	O
char	O
*	O
password	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
!	O
record	pointer
||	O
(	O
rec_record_num_fields	function
(	O
record	pointer
)	O
==	O
0	int
)	O
)	O
{	O
return	O
true	int
;	O
}	O
if	O
(	O
index	function
||	O
sex	pointer
||	O
fast_string	pointer
||	O
(	O
random	function
>	O
0	int
)	O
)	O
{	O
rec_rset_t	pointer
rset	pointer
=	O
rec_db_get_rset_by_type	function
(	O
db	pointer
,	O
type	enum
)	O
;	O
if	O
(	O
rset	pointer
)	O
{	O
size_t	long
num_rec	long
=	O
-	O
1	int
;	O
if	O
(	O
random	function
>	O
0	int
)	O
{	O
rec_db_add_random_indexes	function
(	O
&	O
index	function
,	O
random	function
,	O
rec_rset_num_records	function
(	O
rset	pointer
)	O
)	O
;	O
if	O
(	O
!	O
index	function
)	O
{	O
return	O
false	int
;	O
}	O
}	O
if	O
(	O
!	O
(	O
flags	int
&	O
REC_F_NOAUTO	int
)	O
)	O
{	O
if	O
(	O
!	O
rec_rset_add_auto_fields	function
(	O
rset	pointer
,	O
record	pointer
)	O
)	O
{	O
return	O
false	int
;	O
}	O
}	O
{	O
rec_record_t	pointer
rset_record	pointer
=	O
NULL	O
;	O
rec_mset_elem_t	pointer
elem	pointer
;	O
rec_mset_iterator_t	struct
iter	struct
=	O
rec_mset_iterator	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
rset_record	pointer
,	O
&	O
elem	pointer
)	O
)	O
{	O
num_rec	long
++	O
;	O
if	O
(	O
!	O
rec_db_record_selected_p	function
(	O
num_rec	long
,	O
rset_record	pointer
,	O
index	function
,	O
sex	pointer
,	O
fast_string	pointer
,	O
flags	int
&	O
REC_F_ICASE	int
)	O
)	O
{	O
continue	O
;	O
}	O
rec_record_set_container	function
(	O
record	pointer
,	O
rset	pointer
)	O
;	O
rec_mset_elem_set_data	function
(	O
elem	pointer
,	O
(	O
void	O
*	O
)	O
rec_record_dup	function
(	O
record	pointer
)	O
)	O
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
}	O
}	O
}	O
else	O
{	O
rec_rset_t	pointer
rset	pointer
=	O
rec_db_get_rset_by_type	function
(	O
db	pointer
,	O
type	enum
)	O
;	O
if	O
(	O
rset	pointer
)	O
{	O
rec_record_set_container	function
(	O
record	pointer
,	O
rset	pointer
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
REC_F_NOAUTO	int
)	O
)	O
{	O
if	O
(	O
!	O
rec_rset_add_auto_fields	function
(	O
rset	pointer
,	O
record	pointer
)	O
)	O
{	O
return	O
false	int
;	O
}	O
}	O
if	O
(	O
rec_rset_num_records	function
(	O
rset	pointer
)	O
==	O
0	int
)	O
{	O
rec_mset_insert_at	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
record	pointer
,	O
rec_rset_descriptor_pos	function
(	O
rset	pointer
)	O
)	O
;	O
}	O
else	O
{	O
rec_mset_t	pointer
mset	pointer
=	O
rec_rset_mset	function
(	O
rset	pointer
)	O
;	O
rec_record_t	pointer
last_record	pointer
=	O
(	O
rec_record_t	pointer
)	O
rec_mset_get_at	function
(	O
mset	pointer
,	O
MSET_RECORD	int
,	O
rec_rset_num_records	function
(	O
rset	pointer
)	O
-	O
1	int
)	O
;	O
if	O
(	O
!	O
rec_mset_insert_after	function
(	O
mset	pointer
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
record	pointer
,	O
rec_mset_search	function
(	O
mset	pointer
,	O
(	O
void	O
*	O
)	O
last_record	pointer
)	O
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
}	O
else	O
{	O
rset	pointer
=	O
rec_rset_new	function
(	O
)	O
;	O
if	O
(	O
!	O
rset	pointer
)	O
{	O
return	O
false	int
;	O
}	O
rec_rset_set_type	function
(	O
rset	pointer
,	O
type	enum
)	O
;	O
rec_record_set_container	function
(	O
record	pointer
,	O
rset	pointer
)	O
;	O
if	O
(	O
!	O
rec_mset_append	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
record	pointer
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
if	O
(	O
type	enum
)	O
{	O
rec_db_insert_rset	function
(	O
db	pointer
,	O
rset	pointer
,	O
rec_db_size	function
(	O
db	pointer
)	O
)	O
;	O
}	O
else	O
{	O
rec_db_insert_rset	function
(	O
db	pointer
,	O
rset	pointer
,	O
0	int
)	O
;	O
}	O
}	O
}	O
return	O
true	int
;	O
}	O
bool	bool
rec_db_delete	function
(	O
rec_db_t	pointer
db	pointer
,	O
const	O
char	O
*	O
type	enum
,	O
size_t	long
*	O
index	function
,	O
rec_sex_t	pointer
sex	pointer
,	O
const	O
char	O
*	O
fast_string	pointer
,	O
size_t	long
random	function
,	O
int	O
flags	int
)	O
{	O
rec_rset_t	pointer
rset	pointer
=	O
rec_db_get_rset_by_type	function
(	O
db	pointer
,	O
type	enum
)	O
;	O
if	O
(	O
!	O
type	enum
&&	O
!	O
rset	pointer
&&	O
(	O
rec_db_size	function
(	O
db	pointer
)	O
==	O
1	int
)	O
)	O
{	O
rset	pointer
=	O
rec_db_get_rset	function
(	O
db	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
rec_rset_num_records	function
(	O
rset	pointer
)	O
==	O
0	int
)	O
{	O
return	O
true	int
;	O
}	O
if	O
(	O
random	function
>	O
0	int
)	O
{	O
rec_db_add_random_indexes	function
(	O
&	O
index	function
,	O
random	function
,	O
rec_rset_num_records	function
(	O
rset	pointer
)	O
)	O
;	O
if	O
(	O
!	O
index	function
)	O
{	O
return	O
false	int
;	O
}	O
}	O
{	O
rec_record_t	pointer
record	pointer
=	O
NULL	O
;	O
rec_mset_elem_t	pointer
elem	pointer
;	O
size_t	long
num_rec	long
=	O
-	O
1	int
;	O
rec_mset_iterator_t	struct
iter	struct
=	O
rec_mset_iterator	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	pointer
,	O
&	O
elem	pointer
)	O
)	O
{	O
num_rec	long
++	O
;	O
if	O
(	O
!	O
rec_db_record_selected_p	function
(	O
num_rec	long
,	O
record	pointer
,	O
index	function
,	O
sex	pointer
,	O
fast_string	pointer
,	O
flags	int
&	O
REC_F_ICASE	int
)	O
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
flags	int
&	O
REC_F_COMMENT_OUT	int
)	O
{	O
rec_comment_t	pointer
comment	pointer
=	O
rec_record_to_comment	function
(	O
record	pointer
)	O
;	O
if	O
(	O
!	O
comment	pointer
)	O
{	O
return	O
false	int
;	O
}	O
rec_record_destroy	function
(	O
record	pointer
)	O
;	O
rec_mset_elem_set_data	function
(	O
elem	pointer
,	O
(	O
void	O
*	O
)	O
comment	pointer
)	O
;	O
rec_mset_elem_set_type	function
(	O
elem	pointer
,	O
MSET_COMMENT	int
)	O
;	O
}	O
else	O
{	O
rec_mset_remove_elem	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
,	O
elem	pointer
)	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
}	O
return	O
true	int
;	O
}	O
bool	bool
rec_db_set	function
(	O
rec_db_t	pointer
db	pointer
,	O
const	O
char	O
*	O
type	enum
,	O
size_t	long
*	O
index	function
,	O
rec_sex_t	pointer
sex	pointer
,	O
const	O
char	O
*	O
fast_string	pointer
,	O
size_t	long
random	function
,	O
rec_fex_t	pointer
fex	pointer
,	O
int	O
action	int
,	O
const	O
char	O
*	O
action_arg	pointer
,	O
int	O
flags	int
)	O
{	O
rec_rset_t	pointer
rset	pointer
=	O
rec_db_get_rset_by_type	function
(	O
db	pointer
,	O
type	enum
)	O
;	O
if	O
(	O
!	O
type	enum
&&	O
!	O
rset	pointer
&&	O
(	O
rec_db_size	function
(	O
db	pointer
)	O
==	O
1	int
)	O
)	O
{	O
rset	pointer
=	O
rec_db_get_rset	function
(	O
db	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
rec_rset_num_records	function
(	O
rset	pointer
)	O
==	O
0	int
)	O
{	O
return	O
true	int
;	O
}	O
if	O
(	O
random	function
>	O
0	int
)	O
{	O
rec_db_add_random_indexes	function
(	O
&	O
index	function
,	O
random	function
,	O
rec_rset_num_records	function
(	O
rset	pointer
)	O
)	O
;	O
if	O
(	O
!	O
index	function
)	O
{	O
return	O
false	int
;	O
}	O
}	O
{	O
rec_record_t	pointer
record	pointer
=	O
NULL	O
;	O
size_t	long
num_rec	long
=	O
-	O
1	int
;	O
rec_mset_iterator_t	struct
iter	struct
=	O
rec_mset_iterator	function
(	O
rec_rset_mset	function
(	O
rset	pointer
)	O
)	O
;	O
bool	bool
descriptor_renamed	bool
=	O
false	int
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record	pointer
,	O
NULL	O
)	O
)	O
{	O
num_rec	long
++	O
;	O
if	O
(	O
!	O
rec_db_record_selected_p	function
(	O
num_rec	long
,	O
record	pointer
,	O
index	function
,	O
sex	pointer
,	O
fast_string	pointer
,	O
flags	int
&	O
REC_F_ICASE	int
)	O
)	O
{	O
continue	O
;	O
}	O
switch	O
(	O
action	int
)	O
{	O
case	O
REC_SET_ACT_RENAME	int
:	O
{	O
bool	bool
rename_descriptor	bool
=	O
false	int
;	O
if	O
(	O
!	O
descriptor_renamed	bool
&&	O
(	O
sex	pointer
==	O
NULL	O
)	O
&&	O
(	O
index	function
==	O
NULL	O
)	O
&&	O
(	O
random	function
==	O
0	int
)	O
&&	O
(	O
fast_string	pointer
==	O
NULL	O
)	O
)	O
{	O
rename_descriptor	bool
=	O
true	int
;	O
descriptor_renamed	bool
=	O
true	int
;	O
}	O
if	O
(	O
!	O
rec_db_set_act_rename	function
(	O
rset	pointer
,	O
record	pointer
,	O
fex	pointer
,	O
rename_descriptor	bool
,	O
action_arg	pointer
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
case	O
REC_SET_ACT_SET	int
:	O
{	O
if	O
(	O
!	O
rec_db_set_act_set	function
(	O
rset	pointer
,	O
record	pointer
,	O
fex	pointer
,	O
false	int
,	O
action_arg	pointer
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
case	O
REC_SET_ACT_ADD	int
:	O
{	O
if	O
(	O
!	O
rec_db_set_act_add	function
(	O
rset	pointer
,	O
record	pointer
,	O
fex	pointer
,	O
action_arg	pointer
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
case	O
REC_SET_ACT_SETADD	int
:	O
{	O
if	O
(	O
!	O
rec_db_set_act_set	function
(	O
rset	pointer
,	O
record	pointer
,	O
fex	pointer
,	O
true	int
,	O
action_arg	pointer
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
case	O
REC_SET_ACT_DELETE	int
:	O
{	O
if	O
(	O
!	O
rec_db_set_act_delete	function
(	O
rset	pointer
,	O
record	pointer
,	O
fex	pointer
,	O
false	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
case	O
REC_SET_ACT_COMMENT	int
:	O
{	O
if	O
(	O
!	O
rec_db_set_act_delete	function
(	O
rset	pointer
,	O
record	pointer
,	O
fex	pointer
,	O
true	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
break	O
;	O
}	O
default	O
:	O
{	O
return	O
true	int
;	O
}	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
}	O
return	O
true	int
;	O
}	O
rec_aggregate_reg_t	pointer
rec_db_aggregates	function
(	O
rec_db_t	pointer
db	pointer
)	O
{	O
return	O
db	pointer
->	O
aggregates	pointer
;	O
}	O
static	O
rec_record_t	pointer
rec_db_merge_records	function
(	O
rec_record_t	pointer
record1	pointer
,	O
rec_record_t	pointer
record2	pointer
,	O
const	O
char	O
*	O
prefix	pointer
)	O
{	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_field_t	pointer
field	pointer
;	O
rec_record_t	pointer
merge	pointer
=	O
NULL	O
;	O
merge	pointer
=	O
rec_record_dup	function
(	O
record1	pointer
)	O
;	O
if	O
(	O
!	O
merge	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
iter	struct
=	O
rec_mset_iterator	function
(	O
rec_record_mset	function
(	O
record2	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	pointer
,	O
NULL	O
)	O
)	O
{	O
rec_field_t	pointer
new_field	pointer
=	O
rec_field_dup	function
(	O
field	pointer
)	O
;	O
if	O
(	O
!	O
new_field	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
{	O
const	O
char	O
*	O
field_name	pointer
=	O
rec_field_name	function
(	O
new_field	pointer
)	O
;	O
char	O
*	O
new_name	pointer
=	O
malloc	function
(	O
strlen	function
(	O
field_name	pointer
)	O
+	O
strlen	function
(	O
prefix	pointer
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
new_name	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
memcpy	function
(	O
new_name	pointer
,	O
prefix	pointer
,	O
strlen	function
(	O
prefix	pointer
)	O
)	O
;	O
new_name	pointer
[	O
strlen	function
(	O
prefix	pointer
)	O
]	O
=	O
'_'	O
;	O
memcpy	function
(	O
new_name	pointer
+	O
strlen	function
(	O
prefix	pointer
)	O
+	O
1	int
,	O
field_name	pointer
,	O
strlen	function
(	O
field_name	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
rec_field_set_name	function
(	O
new_field	pointer
,	O
new_name	pointer
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
free	function
(	O
new_name	pointer
)	O
;	O
}	O
if	O
(	O
!	O
rec_mset_append	function
(	O
rec_record_mset	function
(	O
merge	pointer
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
new_field	pointer
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
merge	pointer
;	O
}	O
static	O
rec_rset_t	pointer
rec_db_join	function
(	O
rec_db_t	pointer
db	pointer
,	O
const	O
char	O
*	O
type1	pointer
,	O
const	O
char	O
*	O
field	pointer
,	O
const	O
char	O
*	O
type2	int
)	O
{	O
const	O
char	O
*	O
key	pointer
=	O
NULL	O
;	O
rec_rset_t	pointer
join	pointer
=	O
NULL	O
;	O
rec_rset_t	pointer
rset1	pointer
=	O
rec_db_get_rset_by_type	function
(	O
db	pointer
,	O
type1	pointer
)	O
;	O
rec_rset_t	pointer
rset2	pointer
=	O
rec_db_get_rset_by_type	function
(	O
db	pointer
,	O
type2	int
)	O
;	O
if	O
(	O
!	O
rset1	pointer
||	O
!	O
rset2	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
key	pointer
=	O
rec_rset_key	function
(	O
rset2	pointer
)	O
;	O
if	O
(	O
!	O
key	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
join	pointer
=	O
rec_rset_new	function
(	O
)	O
;	O
if	O
(	O
!	O
join	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
else	O
{	O
rec_record_t	pointer
record1	pointer
=	O
NULL	O
;	O
rec_mset_iterator_t	struct
iter1	struct
=	O
rec_mset_iterator	function
(	O
rec_rset_mset	function
(	O
rset1	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter1	struct
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record1	pointer
,	O
NULL	O
)	O
)	O
{	O
size_t	long
num_foreign_keys	long
=	O
rec_record_get_num_fields_by_name	function
(	O
record1	pointer
,	O
field	pointer
)	O
;	O
size_t	long
num_foreign_key	long
=	O
0	int
;	O
for	O
(	O
num_foreign_key	long
=	O
0	int
;	O
num_foreign_key	long
<	O
num_foreign_keys	long
;	O
num_foreign_key	long
++	O
)	O
{	O
rec_record_t	pointer
record2	pointer
=	O
NULL	O
;	O
rec_mset_iterator_t	struct
iter2	struct
=	O
rec_mset_iterator	function
(	O
rec_rset_mset	function
(	O
rset2	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter2	struct
,	O
MSET_RECORD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
record2	pointer
,	O
NULL	O
)	O
)	O
{	O
bool	bool
found	bool
=	O
false	int
;	O
size_t	long
i	long
=	O
0	int
;	O
rec_field_t	pointer
key_field	pointer
=	O
rec_record_get_field_by_name	function
(	O
record2	pointer
,	O
key	pointer
,	O
num_foreign_key	long
)	O
;	O
if	O
(	O
!	O
key_field	pointer
)	O
{	O
break	O
;	O
}	O
found	bool
=	O
false	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_record_get_num_fields_by_name	function
(	O
record1	pointer
,	O
field	pointer
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
rec_field_value	function
(	O
key_field	pointer
)	O
,	O
rec_field_value	function
(	O
rec_record_get_field_by_name	function
(	O
record1	pointer
,	O
field	pointer
,	O
i	long
)	O
)	O
)	O
==	O
0	int
)	O
{	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
found	bool
)	O
{	O
continue	O
;	O
}	O
rec_record_t	pointer
record	pointer
=	O
rec_db_merge_records	function
(	O
record1	pointer
,	O
record2	pointer
,	O
field	pointer
)	O
;	O
if	O
(	O
!	O
record	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
while	O
(	O
rec_record_get_num_fields_by_name	function
(	O
record	pointer
,	O
field	pointer
)	O
>	O
0	int
)	O
{	O
rec_record_remove_field_by_name	function
(	O
record	pointer
,	O
field	pointer
,	O
0	int
)	O
;	O
}	O
rec_record_set_container	function
(	O
record	pointer
,	O
join	pointer
)	O
;	O
if	O
(	O
!	O
rec_mset_append	function
(	O
rec_rset_mset	function
(	O
join	pointer
)	O
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
record	pointer
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter2	struct
)	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter1	struct
)	O
;	O
}	O
{	O
rec_record_t	pointer
new_descriptor	pointer
=	O
rec_record_new	function
(	O
)	O
;	O
if	O
(	O
!	O
new_descriptor	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
{	O
rec_field_t	pointer
new_field	pointer
=	O
NULL	O
;	O
char	O
*	O
new_rset_type	pointer
=	O
rec_concat_strings	function
(	O
type1	pointer
,	O
"_"	pointer
,	O
field	pointer
)	O
;	O
if	O
(	O
!	O
new_rset_type	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
new_field	pointer
=	O
rec_field_new	function
(	O
rec_std_field_name	function
(	O
REC_FIELD_REC	int
)	O
,	O
new_rset_type	pointer
)	O
;	O
if	O
(	O
!	O
rec_mset_append	function
(	O
rec_record_mset	function
(	O
new_descriptor	pointer
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
new_field	pointer
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
rec_rset_set_descriptor	function
(	O
join	pointer
,	O
new_descriptor	pointer
)	O
;	O
}	O
return	O
join	pointer
;	O
}	O
static	O
bool	bool
rec_db_set_act_rename	function
(	O
rec_rset_t	pointer
rset	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_fex_t	pointer
fex	pointer
,	O
bool	bool
rename_descriptor	bool
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
size_t	long
j	long
,	O
min	int
,	O
max	int
,	O
renamed	long
;	O
size_t	long
num_fields	long
;	O
rec_fex_elem_t	pointer
fex_elem	pointer
;	O
rec_field_t	pointer
field	pointer
;	O
const	O
char	O
*	O
field_name	pointer
;	O
fex_elem	pointer
=	O
rec_fex_get	function
(	O
fex	pointer
,	O
0	int
)	O
;	O
field_name	pointer
=	O
rec_fex_elem_field_name	function
(	O
fex_elem	pointer
)	O
;	O
min	int
=	O
rec_fex_elem_min	function
(	O
fex_elem	pointer
)	O
;	O
max	int
=	O
rec_fex_elem_max	function
(	O
fex_elem	pointer
)	O
;	O
num_fields	long
=	O
rec_record_get_num_fields_by_name	function
(	O
record	pointer
,	O
field_name	pointer
)	O
;	O
if	O
(	O
min	int
==	O
-	O
1	int
)	O
{	O
min	int
=	O
0	int
;	O
max	int
=	O
num_fields	long
-	O
1	int
;	O
}	O
if	O
(	O
max	int
==	O
-	O
1	int
)	O
{	O
max	int
=	O
min	int
;	O
}	O
renamed	long
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
num_fields	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
(	O
j	long
>=	O
min	int
)	O
&&	O
(	O
j	long
<=	O
max	int
)	O
)	O
{	O
field	pointer
=	O
rec_record_get_field_by_name	function
(	O
record	pointer
,	O
field_name	pointer
,	O
j	long
-	O
renamed	long
)	O
;	O
if	O
(	O
field	pointer
)	O
{	O
rec_field_set_name	function
(	O
field	pointer
,	O
arg	pointer
)	O
;	O
renamed	long
++	O
;	O
}	O
if	O
(	O
rename_descriptor	bool
)	O
{	O
rec_rset_rename_field	function
(	O
rset	pointer
,	O
field_name	pointer
,	O
arg	pointer
)	O
;	O
}	O
}	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
rec_db_set_act_set	function
(	O
rec_rset_t	pointer
rset	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_fex_t	pointer
fex	pointer
,	O
bool	bool
add_p	bool
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
size_t	long
i	long
,	O
j	long
,	O
min	int
,	O
max	int
;	O
size_t	long
num_fields	long
;	O
rec_fex_elem_t	pointer
fex_elem	pointer
;	O
rec_field_t	pointer
field	pointer
;	O
const	O
char	O
*	O
field_name	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	function
(	O
fex	pointer
)	O
;	O
i	long
++	O
)	O
{	O
fex_elem	pointer
=	O
rec_fex_get	function
(	O
fex	pointer
,	O
i	long
)	O
;	O
field_name	pointer
=	O
rec_fex_elem_field_name	function
(	O
fex_elem	pointer
)	O
;	O
min	int
=	O
rec_fex_elem_min	function
(	O
fex_elem	pointer
)	O
;	O
max	int
=	O
rec_fex_elem_max	function
(	O
fex_elem	pointer
)	O
;	O
num_fields	long
=	O
rec_record_get_num_fields_by_name	function
(	O
record	pointer
,	O
field_name	pointer
)	O
;	O
if	O
(	O
min	int
==	O
-	O
1	int
)	O
{	O
min	int
=	O
0	int
;	O
max	int
=	O
num_fields	long
-	O
1	int
;	O
}	O
if	O
(	O
max	int
==	O
-	O
1	int
)	O
{	O
max	int
=	O
min	int
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
num_fields	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
(	O
j	long
>=	O
min	int
)	O
&&	O
(	O
j	long
<=	O
max	int
)	O
)	O
{	O
field	pointer
=	O
rec_record_get_field_by_name	function
(	O
record	pointer
,	O
field_name	pointer
,	O
j	long
)	O
;	O
if	O
(	O
field	pointer
)	O
{	O
rec_field_set_value	function
(	O
field	pointer
,	O
arg	pointer
)	O
;	O
}	O
}	O
}	O
if	O
(	O
add_p	bool
&&	O
(	O
num_fields	long
==	O
0	int
)	O
)	O
{	O
field	pointer
=	O
rec_field_new	function
(	O
field_name	pointer
,	O
arg	pointer
)	O
;	O
if	O
(	O
!	O
rec_mset_append	function
(	O
rec_record_mset	function
(	O
record	pointer
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
field	pointer
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
}	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
rec_db_set_act_add	function
(	O
rec_rset_t	pointer
rset	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_fex_t	pointer
fex	pointer
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	function
(	O
fex	pointer
)	O
;	O
i	long
++	O
)	O
{	O
rec_fex_elem_t	pointer
fex_elem	pointer
=	O
rec_fex_get	function
(	O
fex	pointer
,	O
i	long
)	O
;	O
const	O
char	O
*	O
field_name	pointer
=	O
rec_fex_elem_field_name	function
(	O
fex_elem	pointer
)	O
;	O
rec_field_t	pointer
field	pointer
=	O
rec_field_new	function
(	O
field_name	pointer
,	O
arg	pointer
)	O
;	O
if	O
(	O
!	O
field	pointer
)	O
{	O
return	O
false	int
;	O
}	O
if	O
(	O
!	O
rec_mset_append	function
(	O
rec_record_mset	function
(	O
record	pointer
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
field	pointer
,	O
MSET_ANY	int
)	O
)	O
{	O
return	O
false	int
;	O
}	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
rec_db_set_act_delete	function
(	O
rec_rset_t	pointer
rset	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_fex_t	pointer
fex	pointer
,	O
bool	bool
comment_out	bool
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
size_t	long
num_fields	long
;	O
bool	bool
*	O
deletion_mask	pointer
;	O
rec_field_t	pointer
field	pointer
;	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_mset_elem_t	pointer
elem	pointer
;	O
deletion_mask	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
bool	bool
)	O
*	O
rec_record_num_fields	function
(	O
record	pointer
)	O
)	O
;	O
if	O
(	O
!	O
deletion_mask	pointer
)	O
{	O
return	O
false	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_record_num_fields	function
(	O
record	pointer
)	O
;	O
i	long
++	O
)	O
{	O
deletion_mask	pointer
[	O
i	long
]	O
=	O
false	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rec_fex_size	function
(	O
fex	pointer
)	O
;	O
i	long
++	O
)	O
{	O
rec_fex_elem_t	pointer
fex_elem	pointer
=	O
rec_fex_get	function
(	O
fex	pointer
,	O
i	long
)	O
;	O
const	O
char	O
*	O
field_name	pointer
=	O
rec_fex_elem_field_name	function
(	O
fex_elem	pointer
)	O
;	O
size_t	long
min	int
=	O
rec_fex_elem_min	function
(	O
fex_elem	pointer
)	O
;	O
size_t	long
max	int
=	O
rec_fex_elem_max	function
(	O
fex_elem	pointer
)	O
;	O
num_fields	long
=	O
rec_record_get_num_fields_by_name	function
(	O
record	pointer
,	O
field_name	pointer
)	O
;	O
if	O
(	O
min	int
==	O
-	O
1	int
)	O
{	O
min	int
=	O
0	int
;	O
max	int
=	O
num_fields	long
-	O
1	int
;	O
}	O
if	O
(	O
max	int
==	O
-	O
1	int
)	O
{	O
max	int
=	O
min	int
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
num_fields	long
;	O
j	long
++	O
)	O
{	O
if	O
(	O
(	O
j	long
>=	O
min	int
)	O
&&	O
(	O
j	long
<=	O
max	int
)	O
)	O
{	O
field	pointer
=	O
rec_record_get_field_by_name	function
(	O
record	pointer
,	O
rec_fex_elem_field_name	function
(	O
fex_elem	pointer
)	O
,	O
j	long
)	O
;	O
deletion_mask	pointer
[	O
rec_record_get_field_index	function
(	O
record	pointer
,	O
field	pointer
)	O
]	O
=	O
true	int
;	O
}	O
}	O
}	O
i	long
=	O
0	int
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
rec_record_mset	function
(	O
record	pointer
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	pointer
,	O
&	O
elem	pointer
)	O
)	O
{	O
if	O
(	O
deletion_mask	pointer
[	O
i	long
]	O
)	O
{	O
if	O
(	O
comment_out	bool
)	O
{	O
rec_comment_t	pointer
comment	pointer
=	O
rec_field_to_comment	function
(	O
field	pointer
)	O
;	O
if	O
(	O
!	O
comment	pointer
)	O
{	O
return	O
false	int
;	O
}	O
rec_field_destroy	function
(	O
field	pointer
)	O
;	O
rec_mset_elem_set_data	function
(	O
elem	pointer
,	O
(	O
void	O
*	O
)	O
comment	pointer
)	O
;	O
rec_mset_elem_set_type	function
(	O
elem	pointer
,	O
MSET_COMMENT	int
)	O
;	O
}	O
else	O
{	O
rec_mset_remove_elem	function
(	O
rec_record_mset	function
(	O
record	pointer
)	O
,	O
elem	pointer
)	O
;	O
}	O
}	O
i	long
++	O
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
rec_db_index_p	function
(	O
size_t	long
*	O
index	function
,	O
size_t	long
num	pointer
)	O
{	O
while	O
(	O
(	O
index	function
[	O
0	int
]	O
!=	O
REC_Q_NOINDEX	O
)	O
||	O
(	O
index	function
[	O
1	int
]	O
!=	O
REC_Q_NOINDEX	O
)	O
)	O
{	O
bool	bool
found	bool
=	O
false	int
;	O
size_t	long
min	int
=	O
index	function
[	O
0	int
]	O
;	O
size_t	long
max	int
=	O
index	function
[	O
1	int
]	O
;	O
if	O
(	O
max	int
==	O
REC_Q_NOINDEX	O
)	O
{	O
found	bool
=	O
(	O
num	pointer
==	O
min	int
)	O
;	O
}	O
else	O
{	O
found	bool
=	O
(	O
(	O
num	pointer
>=	O
min	int
)	O
&&	O
(	O
num	pointer
<=	O
max	int
)	O
)	O
;	O
}	O
if	O
(	O
found	bool
)	O
{	O
return	O
true	int
;	O
}	O
index	function
=	O
index	function
+	O
2	int
;	O
}	O
return	O
false	int
;	O
}	O
static	O
void	O
rec_db_add_random_indexes	function
(	O
size_t	long
*	O
*	O
index	function
,	O
size_t	long
num	pointer
,	O
size_t	long
limit	long
)	O
{	O
size_t	long
i	long
;	O
char	O
random_state	array
[	O
128	int
]	O
;	O
struct	O
random_data	struct
random_data	struct
;	O
*	O
index	function
=	O
malloc	function
(	O
sizeof	O
(	O
size_t	long
)	O
*	O
(	O
(	O
num	pointer
+	O
1	int
)	O
*	O
2	int
)	O
)	O
;	O
if	O
(	O
*	O
index	function
==	O
NULL	O
)	O
{	O
return	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
(	O
(	O
num	pointer
+	O
1	int
)	O
*	O
2	int
)	O
;	O
i	long
++	O
)	O
{	O
(	O
*	O
index	function
)	O
[	O
i	long
]	O
=	O
REC_Q_NOINDEX	O
;	O
}	O
memset	function
(	O
&	O
random_data	struct
,	O
0	int
,	O
sizeof	O
(	O
random_data	struct
)	O
)	O
;	O
initstate_r	function
(	O
time	struct
(	O
NULL	O
)	O
,	O
(	O
char	O
*	O
)	O
&	O
random_state	array
,	O
128	int
,	O
&	O
random_data	struct
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
(	O
num	pointer
*	O
2	int
)	O
;	O
i	long
=	O
i	long
+	O
2	int
)	O
{	O
size_t	long
random_value	long
=	O
0	int
;	O
random_r	function
(	O
&	O
random_data	struct
,	O
(	O
int32_t	int
*	O
)	O
&	O
random_value	long
)	O
;	O
random_value	long
=	O
random_value	long
%	O
limit	long
;	O
if	O
(	O
rec_db_index_p	function
(	O
*	O
index	function
,	O
random_value	long
)	O
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
limit	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
!	O
rec_db_index_p	function
(	O
*	O
index	function
,	O
i	long
)	O
)	O
{	O
random_value	long
=	O
i	long
;	O
break	O
;	O
}	O
}	O
}	O
(	O
*	O
index	function
)	O
[	O
i	long
]	O
=	O
random_value	long
;	O
(	O
*	O
index	function
)	O
[	O
i	long
+	O
1	int
]	O
=	O
REC_Q_NOINDEX	O
;	O
}	O
}	O
static	O
bool	bool
rec_db_record_selected_p	function
(	O
size_t	long
num_record	long
,	O
rec_record_t	pointer
record	pointer
,	O
size_t	long
*	O
index	function
,	O
rec_sex_t	pointer
sex	pointer
,	O
const	O
char	O
*	O
fast_string	pointer
,	O
bool	bool
case_insensitive_p	bool
)	O
{	O
if	O
(	O
fast_string	pointer
)	O
{	O
return	O
rec_record_contains_value	function
(	O
record	pointer
,	O
fast_string	pointer
,	O
case_insensitive_p	bool
)	O
;	O
}	O
if	O
(	O
sex	pointer
)	O
{	O
bool	bool
eval_status	bool
;	O
return	O
rec_sex_eval	function
(	O
sex	pointer
,	O
record	pointer
,	O
&	O
eval_status	bool
)	O
;	O
}	O
if	O
(	O
index	function
)	O
{	O
return	O
rec_db_index_p	function
(	O
index	function
,	O
num_record	long
)	O
;	O
}	O
return	O
true	int
;	O
}	O
static	O
rec_record_t	pointer
rec_db_process_fex	function
(	O
rec_db_t	pointer
db	pointer
,	O
rec_rset_t	pointer
rset	pointer
,	O
rec_record_t	pointer
record	pointer
,	O
rec_fex_t	pointer
fex	pointer
)	O
{	O
rec_record_t	pointer
res	pointer
=	O
NULL	O
;	O
size_t	long
fex_size	long
,	O
i	long
,	O
j	long
=	O
0	int
;	O
if	O
(	O
!	O
fex	pointer
)	O
{	O
return	O
rec_record_dup	function
(	O
record	pointer
)	O
;	O
}	O
res	pointer
=	O
rec_record_new	function
(	O
)	O
;	O
if	O
(	O
!	O
res	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
fex_size	long
=	O
rec_fex_size	function
(	O
fex	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex_size	long
;	O
i	long
++	O
)	O
{	O
rec_fex_elem_t	pointer
elem	pointer
=	O
rec_fex_get	function
(	O
fex	pointer
,	O
i	long
)	O
;	O
const	O
char	O
*	O
field_name	pointer
=	O
rec_fex_elem_field_name	function
(	O
elem	pointer
)	O
;	O
const	O
char	O
*	O
alias	pointer
=	O
rec_fex_elem_rewrite_to	function
(	O
elem	pointer
)	O
;	O
const	O
char	O
*	O
function_name	pointer
=	O
rec_fex_elem_function_name	function
(	O
elem	pointer
)	O
;	O
size_t	long
min	int
=	O
rec_fex_elem_min	function
(	O
elem	pointer
)	O
;	O
size_t	long
max	int
=	O
rec_fex_elem_max	function
(	O
elem	pointer
)	O
;	O
if	O
(	O
function_name	pointer
)	O
{	O
rec_aggregate_t	pointer
func	pointer
=	O
rec_aggregate_reg_get	function
(	O
rec_db_aggregates	function
(	O
db	pointer
)	O
,	O
function_name	pointer
)	O
;	O
if	O
(	O
func	pointer
)	O
{	O
char	O
*	O
func_res	pointer
=	O
(	O
func	pointer
)	O
(	O
rset	pointer
,	O
record	pointer
,	O
field_name	pointer
)	O
;	O
if	O
(	O
func_res	pointer
)	O
{	O
rec_field_t	pointer
agg_field	pointer
=	O
NULL	O
;	O
char	O
*	O
agg_field_name	pointer
=	O
NULL	O
;	O
char	O
*	O
agg_field_value	pointer
=	O
func_res	pointer
;	O
if	O
(	O
alias	pointer
)	O
{	O
agg_field_name	pointer
=	O
strdup	function
(	O
alias	pointer
)	O
;	O
if	O
(	O
!	O
agg_field_name	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
agg_field_name	pointer
=	O
malloc	function
(	O
strlen	function
(	O
function_name	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
field_name	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
agg_field_name	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
memcpy	function
(	O
agg_field_name	pointer
,	O
function_name	pointer
,	O
strlen	function
(	O
function_name	pointer
)	O
+	O
1	int
)	O
;	O
strcat	function
(	O
agg_field_name	pointer
,	O
"_"	pointer
)	O
;	O
strcat	function
(	O
agg_field_name	pointer
,	O
field_name	pointer
)	O
;	O
}	O
agg_field	pointer
=	O
rec_field_new	function
(	O
agg_field_name	pointer
,	O
agg_field_value	pointer
)	O
;	O
if	O
(	O
!	O
agg_field	pointer
)	O
{	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
rec_mset_append	function
(	O
rec_record_mset	function
(	O
res	pointer
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
agg_field	pointer
,	O
MSET_FIELD	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
free	function
(	O
agg_field_name	pointer
)	O
;	O
free	function
(	O
func_res	pointer
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
min	int
==	O
-	O
1	int
)	O
&&	O
(	O
max	int
==	O
-	O
1	int
)	O
)	O
{	O
min	int
=	O
0	int
;	O
max	int
=	O
rec_record_get_num_fields_by_name	function
(	O
record	pointer
,	O
field_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
max	int
==	O
-	O
1	int
)	O
{	O
max	int
=	O
min	int
+	O
1	int
;	O
}	O
else	O
{	O
max	int
++	O
;	O
}	O
for	O
(	O
j	long
=	O
min	int
;	O
j	long
<	O
max	int
;	O
j	long
++	O
)	O
{	O
rec_field_t	pointer
res_field	pointer
=	O
NULL	O
;	O
rec_field_t	pointer
field	pointer
=	O
rec_record_get_field_by_name	function
(	O
record	pointer
,	O
field_name	pointer
,	O
j	long
)	O
;	O
if	O
(	O
!	O
field	pointer
)	O
{	O
continue	O
;	O
}	O
res_field	pointer
=	O
rec_field_dup	function
(	O
field	pointer
)	O
;	O
if	O
(	O
alias	pointer
)	O
{	O
if	O
(	O
!	O
rec_field_set_name	function
(	O
res_field	pointer
,	O
alias	pointer
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
!	O
rec_mset_append	function
(	O
rec_record_mset	function
(	O
res	pointer
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
res_field	pointer
,	O
MSET_FIELD	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
record	pointer
)	O
{	O
rec_record_set_location	function
(	O
res	pointer
,	O
rec_record_location	function
(	O
record	pointer
)	O
)	O
;	O
rec_record_set_char_location	function
(	O
res	pointer
,	O
rec_record_char_location	function
(	O
record	pointer
)	O
)	O
;	O
}	O
return	O
res	pointer
;	O
}	O
static	O
bool	bool
rec_db_rset_equals_fn	function
(	O
const	O
void	O
*	O
elt1	pointer
,	O
const	O
void	O
*	O
elt2	pointer
)	O
{	O
return	O
false	int
;	O
}	O
static	O
void	O
rec_db_rset_dispose_fn	function
(	O
const	O
void	O
*	O
elt	pointer
)	O
{	O
rec_rset_t	pointer
rset	pointer
;	O
rset	pointer
=	O
(	O
rec_rset_t	pointer
)	O
elt	pointer
;	O
rec_rset_destroy	function
(	O
rset	pointer
)	O
;	O
}	O
