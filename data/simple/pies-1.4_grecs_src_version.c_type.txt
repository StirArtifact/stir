const	O
char	O
*	O
grecs_vcs_id	pointer
=	O
"$Id: "	pointer
GRECS_GIT_ID	pointer
" $"	pointer
;	O
struct	O
grecs_version_info	struct
*	O
grecs_version_split	function
(	O
const	O
char	O
*	O
vstr	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
len	long
;	O
struct	O
grecs_version_info	struct
*	O
pv	pointer
=	O
grecs_zalloc	function
(	O
sizeof	O
(	O
*	O
pv	pointer
)	O
)	O
;	O
pv	pointer
->	O
buffer	pointer
=	O
grecs_strdup	function
(	O
vstr	pointer
)	O
;	O
len	long
=	O
strcspn	function
(	O
pv	pointer
->	O
buffer	pointer
,	O
" \t"	pointer
)	O
;	O
if	O
(	O
pv	pointer
->	O
buffer	pointer
[	O
len	long
]	O
)	O
{	O
pv	pointer
->	O
package	pointer
=	O
pv	pointer
->	O
buffer	pointer
;	O
pv	pointer
->	O
buffer	pointer
[	O
len	long
++	O
]	O
=	O
0	int
;	O
for	O
(	O
;	O
pv	pointer
->	O
buffer	pointer
[	O
len	long
]	O
&&	O
isspace	function
(	O
pv	pointer
->	O
buffer	pointer
[	O
len	long
]	O
)	O
;	O
len	long
++	O
)	O
;	O
}	O
else	O
{	O
pv	pointer
->	O
package	pointer
=	O
NULL	O
;	O
len	long
=	O
0	int
;	O
}	O
if	O
(	O
!	O
pv	pointer
->	O
buffer	pointer
[	O
len	long
]	O
)	O
{	O
free	function
(	O
pv	pointer
->	O
buffer	pointer
)	O
;	O
free	function
(	O
pv	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
pv	pointer
->	O
version	pointer
=	O
pv	pointer
->	O
buffer	pointer
+	O
len	long
;	O
pv	pointer
->	O
major	int
=	O
strtoul	function
(	O
pv	pointer
->	O
version	pointer
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
&&	O
*	O
p	pointer
==	O
'.'	O
)	O
{	O
pv	pointer
->	O
minor	int
=	O
strtoul	function
(	O
p	pointer
+	O
1	int
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
&&	O
*	O
p	pointer
==	O
'.'	O
)	O
{	O
char	O
*	O
q	pointer
;	O
pv	pointer
->	O
patch	int
=	O
strtoul	function
(	O
p	pointer
+	O
1	int
,	O
&	O
q	pointer
,	O
10	int
)	O
;	O
if	O
(	O
q	pointer
==	O
p	pointer
+	O
1	int
)	O
pv	pointer
->	O
patch	int
=	O
0	int
;	O
else	O
p	pointer
=	O
q	pointer
;	O
}	O
}	O
pv	pointer
->	O
suffix	pointer
=	O
p	pointer
;	O
return	O
pv	pointer
;	O
}	O
void	O
grecs_version_info_free	function
(	O
struct	O
grecs_version_info	struct
*	O
pv	pointer
)	O
{	O
if	O
(	O
pv	pointer
)	O
{	O
if	O
(	O
pv	pointer
->	O
buffer	pointer
)	O
grecs_free	function
(	O
pv	pointer
->	O
buffer	pointer
)	O
;	O
free	function
(	O
pv	pointer
)	O
;	O
}	O
}	O
struct	O
grecs_version_info	struct
*	O
grecs_version	function
(	O
void	O
)	O
{	O
struct	O
grecs_version_info	struct
*	O
pv	pointer
=	O
grecs_zalloc	function
(	O
sizeof	O
(	O
*	O
pv	pointer
)	O
)	O
;	O
size_t	long
size	pointer
=	O
0	int
;	O
pv	pointer
->	O
package	pointer
=	O
PACKAGE_NAME	pointer
;	O
grecs_asprintf	function
(	O
&	O
pv	pointer
->	O
buffer	pointer
,	O
&	O
size	pointer
,	O
"%d.%d"	pointer
,	O
GRECS_VERSION_MAJOR	int
,	O
GRECS_VERSION_MINOR	int
)	O
;	O
pv	pointer
->	O
version	pointer
=	O
pv	pointer
->	O
buffer	pointer
;	O
pv	pointer
->	O
major	int
=	O
GRECS_VERSION_MAJOR	int
;	O
pv	pointer
->	O
minor	int
=	O
GRECS_VERSION_MINOR	int
;	O
pv	pointer
->	O
id	pointer
=	O
GRECS_GIT_ID	pointer
;	O
return	O
pv	pointer
;	O
}	O
int	O
grecs_version_info_cmp	function
(	O
struct	O
grecs_version_info	struct
*	O
vx	pointer
,	O
struct	O
grecs_version_info	struct
*	O
vy	pointer
,	O
int	O
*	O
pres	pointer
)	O
{	O
if	O
(	O
vx	pointer
->	O
package	pointer
&&	O
vy	pointer
->	O
package	pointer
&&	O
strcmp	function
(	O
vx	pointer
->	O
package	pointer
,	O
vy	pointer
->	O
package	pointer
)	O
)	O
return	O
1	int
;	O
else	O
if	O
(	O
vx	pointer
->	O
major	int
>	O
vy	pointer
->	O
major	int
)	O
*	O
pres	pointer
=	O
1	int
;	O
else	O
if	O
(	O
vx	pointer
->	O
major	int
<	O
vy	pointer
->	O
major	int
)	O
*	O
pres	pointer
=	O
-	O
1	int
;	O
else	O
if	O
(	O
vx	pointer
->	O
minor	int
>	O
vy	pointer
->	O
minor	int
)	O
*	O
pres	pointer
=	O
1	int
;	O
else	O
if	O
(	O
vx	pointer
->	O
minor	int
<	O
vy	pointer
->	O
minor	int
)	O
*	O
pres	pointer
=	O
-	O
1	int
;	O
else	O
if	O
(	O
vx	pointer
->	O
patch	int
>	O
vy	pointer
->	O
patch	int
)	O
*	O
pres	pointer
=	O
1	int
;	O
else	O
if	O
(	O
vx	pointer
->	O
patch	int
<	O
vy	pointer
->	O
patch	int
)	O
*	O
pres	pointer
=	O
-	O
1	int
;	O
else	O
if	O
(	O
vx	pointer
->	O
suffix	pointer
&&	O
vy	pointer
->	O
suffix	pointer
)	O
*	O
pres	pointer
=	O
strcmp	function
(	O
vx	pointer
->	O
suffix	pointer
,	O
vy	pointer
->	O
suffix	pointer
)	O
;	O
else	O
*	O
pres	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
grecs_version_cmp	function
(	O
const	O
char	O
*	O
vstr1	pointer
,	O
const	O
char	O
*	O
vstr2	pointer
,	O
int	O
*	O
pres	pointer
)	O
{	O
struct	O
grecs_version_info	struct
*	O
v1	pointer
,	O
*	O
v2	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
vstr1	pointer
||	O
!	O
vstr2	pointer
)	O
return	O
-	O
1	int
;	O
v1	pointer
=	O
grecs_version_split	function
(	O
vstr1	pointer
)	O
;	O
if	O
(	O
!	O
v1	pointer
)	O
return	O
-	O
1	int
;	O
v2	pointer
=	O
grecs_version_split	function
(	O
vstr2	pointer
)	O
;	O
if	O
(	O
!	O
v2	pointer
)	O
{	O
grecs_version_info_free	function
(	O
v1	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
grecs_version_info_cmp	function
(	O
v1	pointer
,	O
v2	pointer
,	O
pres	pointer
)	O
;	O
grecs_version_info_free	function
(	O
v1	pointer
)	O
;	O
grecs_version_info_free	function
(	O
v2	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
grecs_version_ok	function
(	O
const	O
char	O
*	O
vstr	pointer
)	O
{	O
struct	O
grecs_version_info	struct
*	O
vmy	pointer
,	O
*	O
vreq	pointer
;	O
int	O
rc	int
,	O
res	int
;	O
if	O
(	O
!	O
vstr	pointer
)	O
return	O
-	O
1	int
;	O
vreq	pointer
=	O
grecs_version_split	function
(	O
vstr	pointer
)	O
;	O
if	O
(	O
!	O
vreq	pointer
)	O
return	O
-	O
1	int
;	O
vmy	pointer
=	O
grecs_version	function
(	O
)	O
;	O
if	O
(	O
vreq	pointer
->	O
suffix	pointer
&&	O
!	O
vmy	pointer
->	O
suffix	pointer
)	O
vmy	pointer
->	O
suffix	pointer
=	O
""	pointer
;	O
rc	int
=	O
grecs_version_info_cmp	function
(	O
vmy	pointer
,	O
vreq	pointer
,	O
&	O
res	int
)	O
;	O
grecs_version_info_free	function
(	O
vmy	pointer
)	O
;	O
grecs_version_info_free	function
(	O
vreq	pointer
)	O
;	O
return	O
rc	int
==	O
0	int
&&	O
res	int
>=	O
0	int
;	O
}	O
