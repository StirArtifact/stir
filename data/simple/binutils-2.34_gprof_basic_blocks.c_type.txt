static	O
int	O
cmp_bb	function
(	O
const	O
PTR	O
,	O
const	O
PTR	O
)	O
;	O
static	O
int	O
cmp_ncalls	function
(	O
const	O
PTR	O
,	O
const	O
PTR	O
)	O
;	O
static	O
void	O
fskip_string	function
(	O
FILE	struct
*	O
)	O
;	O
static	O
void	O
annotate_with_count	function
(	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
int	O
,	O
PTR	O
)	O
;	O
bfd_boolean	int
bb_annotate_all_lines	int
=	O
FALSE	int
;	O
unsigned	O
long	O
bb_min_calls	long
=	O
1	int
;	O
int	O
bb_table_length	int
=	O
10	int
;	O
static	O
long	O
num_executable_lines	long
;	O
static	O
long	O
num_lines_executed	long
;	O
static	O
int	O
cmp_bb	function
(	O
const	O
PTR	O
lp	pointer
,	O
const	O
PTR	O
rp	pointer
)	O
{	O
int	O
r	int
;	O
const	O
Sym	struct
*	O
left	pointer
=	O
*	O
(	O
const	O
Sym	struct
*	O
*	O
)	O
lp	pointer
;	O
const	O
Sym	struct
*	O
right	pointer
=	O
*	O
(	O
const	O
Sym	struct
*	O
*	O
)	O
rp	pointer
;	O
if	O
(	O
left	pointer
->	O
file	pointer
&&	O
right	pointer
->	O
file	pointer
)	O
{	O
r	int
=	O
filename_cmp	function
(	O
left	pointer
->	O
file	pointer
->	O
name	pointer
,	O
right	pointer
->	O
file	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
r	int
)	O
return	O
r	int
;	O
if	O
(	O
left	pointer
->	O
line_num	int
!=	O
right	pointer
->	O
line_num	int
)	O
return	O
left	pointer
->	O
line_num	int
-	O
right	pointer
->	O
line_num	int
;	O
}	O
if	O
(	O
left	pointer
->	O
addr	pointer
<	O
right	pointer
->	O
addr	pointer
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
left	pointer
->	O
addr	pointer
>	O
right	pointer
->	O
addr	pointer
)	O
return	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
static	O
int	O
cmp_ncalls	function
(	O
const	O
PTR	O
lp	pointer
,	O
const	O
PTR	O
rp	pointer
)	O
{	O
const	O
Sym	struct
*	O
left	pointer
=	O
*	O
(	O
const	O
Sym	struct
*	O
*	O
)	O
lp	pointer
;	O
const	O
Sym	struct
*	O
right	pointer
=	O
*	O
(	O
const	O
Sym	struct
*	O
*	O
)	O
rp	pointer
;	O
if	O
(	O
!	O
left	pointer
)	O
return	O
1	int
;	O
else	O
if	O
(	O
!	O
right	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
left	pointer
->	O
ncalls	long
<	O
right	pointer
->	O
ncalls	long
)	O
return	O
1	int
;	O
else	O
if	O
(	O
left	pointer
->	O
ncalls	long
>	O
right	pointer
->	O
ncalls	long
)	O
return	O
-	O
1	int
;	O
return	O
left	pointer
->	O
line_num	int
-	O
right	pointer
->	O
line_num	int
;	O
}	O
static	O
void	O
fskip_string	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
int	O
ch	int
;	O
while	O
(	O
(	O
ch	int
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
ch	int
==	O
'\0'	O
)	O
break	O
;	O
}	O
}	O
void	O
bb_read_rec	function
(	O
FILE	struct
*	O
ifp	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
unsigned	O
int	O
nblocks	int
,	O
b	pointer
;	O
bfd_vma	long
addr	pointer
,	O
ncalls	long
;	O
Sym	struct
*	O
sym	pointer
;	O
if	O
(	O
gmon_io_read_32	function
(	O
ifp	pointer
,	O
&	O
nblocks	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: %s: unexpected end of file\n"	pointer
)	O
,	O
whoami	pointer
,	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
nblocks	int
=	O
bfd_get_32	O
(	O
core_bfd	pointer
,	O
(	O
bfd_byte	char
*	O
)	O
&	O
nblocks	int
)	O
;	O
if	O
(	O
gmon_file_version	int
==	O
0	int
)	O
fskip_string	function
(	O
ifp	pointer
)	O
;	O
for	O
(	O
b	pointer
=	O
0	int
;	O
b	pointer
<	O
nblocks	int
;	O
++	O
b	pointer
)	O
{	O
if	O
(	O
gmon_file_version	int
==	O
0	int
)	O
{	O
int	O
line_num	int
;	O
if	O
(	O
(	O
fread	function
(	O
&	O
ncalls	long
,	O
sizeof	O
(	O
ncalls	long
)	O
,	O
1	int
,	O
ifp	pointer
)	O
!=	O
1	int
)	O
||	O
(	O
fread	function
(	O
&	O
addr	pointer
,	O
sizeof	O
(	O
addr	pointer
)	O
,	O
1	int
,	O
ifp	pointer
)	O
!=	O
1	int
)	O
||	O
(	O
fskip_string	function
(	O
ifp	pointer
)	O
,	O
FALSE	int
)	O
||	O
(	O
fskip_string	function
(	O
ifp	pointer
)	O
,	O
FALSE	int
)	O
||	O
(	O
fread	function
(	O
&	O
line_num	int
,	O
sizeof	O
(	O
line_num	int
)	O
,	O
1	int
,	O
ifp	pointer
)	O
!=	O
1	int
)	O
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
gmon_io_read_vma	function
(	O
ifp	pointer
,	O
&	O
addr	pointer
)	O
||	O
gmon_io_read_vma	function
(	O
ifp	pointer
,	O
&	O
ncalls	long
)	O
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
line_granularity	int
)	O
{	O
sym	pointer
=	O
sym_lookup	function
(	O
&	O
symtab	struct
,	O
addr	pointer
)	O
;	O
if	O
(	O
sym	pointer
)	O
{	O
int	O
i	pointer
;	O
DBG	O
(	O
BBDEBUG	O
,	O
printf	function
(	O
"[bb_read_rec] 0x%lx->0x%lx (%s:%d) cnt=%lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
addr	pointer
,	O
(	O
unsigned	O
long	O
)	O
sym	pointer
->	O
addr	pointer
,	O
sym	pointer
->	O
name	pointer
,	O
sym	pointer
->	O
line_num	int
,	O
(	O
unsigned	O
long	O
)	O
ncalls	long
)	O
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
NBBS	int
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
!	O
sym	pointer
->	O
bb_addr	array
[	O
i	pointer
]	O
||	O
sym	pointer
->	O
bb_addr	array
[	O
i	pointer
]	O
==	O
addr	pointer
)	O
{	O
sym	pointer
->	O
bb_addr	array
[	O
i	pointer
]	O
=	O
addr	pointer
;	O
sym	pointer
->	O
bb_calls	array
[	O
i	pointer
]	O
+=	O
ncalls	long
;	O
break	O
;	O
}	O
}	O
}	O
}	O
else	O
{	O
static	O
bfd_boolean	int
user_warned	int
=	O
FALSE	int
;	O
if	O
(	O
!	O
user_warned	int
)	O
{	O
user_warned	int
=	O
TRUE	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: warning: ignoring basic-block exec counts (use -l or --line)\n"	pointer
)	O
,	O
whoami	pointer
)	O
;	O
}	O
}	O
}	O
return	O
;	O
}	O
void	O
bb_write_blocks	function
(	O
FILE	struct
*	O
ofp	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
unsigned	O
int	O
nblocks	int
=	O
0	int
;	O
Sym	struct
*	O
sym	pointer
;	O
int	O
i	pointer
;	O
for	O
(	O
sym	pointer
=	O
symtab	struct
.	O
base	int
;	O
sym	pointer
<	O
symtab	struct
.	O
limit	pointer
;	O
++	O
sym	pointer
)	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
NBBS	int
&&	O
sym	pointer
->	O
bb_addr	array
[	O
i	pointer
]	O
;	O
i	pointer
++	O
)	O
;	O
nblocks	int
+=	O
i	pointer
;	O
}	O
if	O
(	O
gmon_io_write_8	function
(	O
ofp	pointer
,	O
GMON_TAG_BB_COUNT	int
)	O
||	O
gmon_io_write_32	function
(	O
ofp	pointer
,	O
nblocks	int
)	O
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
sym	pointer
=	O
symtab	struct
.	O
base	int
;	O
sym	pointer
<	O
symtab	struct
.	O
limit	pointer
;	O
++	O
sym	pointer
)	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
NBBS	int
&&	O
sym	pointer
->	O
bb_addr	array
[	O
i	pointer
]	O
;	O
i	pointer
++	O
)	O
{	O
if	O
(	O
gmon_io_write_vma	function
(	O
ofp	pointer
,	O
sym	pointer
->	O
bb_addr	array
[	O
i	pointer
]	O
)	O
||	O
gmon_io_write_vma	function
(	O
ofp	pointer
,	O
(	O
bfd_vma	long
)	O
sym	pointer
->	O
bb_calls	array
[	O
i	pointer
]	O
)	O
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
}	O
void	O
print_exec_counts	function
(	O
void	O
)	O
{	O
Sym	struct
*	O
*	O
sorted_bbs	pointer
,	O
*	O
sym	pointer
;	O
unsigned	O
int	O
i	pointer
,	O
j	int
,	O
len	long
;	O
if	O
(	O
first_output	int
)	O
first_output	int
=	O
FALSE	int
;	O
else	O
printf	function
(	O
"\f\n"	pointer
)	O
;	O
sorted_bbs	pointer
=	O
(	O
Sym	struct
*	O
*	O
)	O
xmalloc	function
(	O
symtab	struct
.	O
len	long
*	O
sizeof	O
(	O
sorted_bbs	pointer
[	O
0	int
]	O
)	O
)	O
;	O
len	long
=	O
0	int
;	O
for	O
(	O
sym	pointer
=	O
symtab	struct
.	O
base	int
;	O
sym	pointer
<	O
symtab	struct
.	O
limit	pointer
;	O
++	O
sym	pointer
)	O
{	O
if	O
(	O
sym_lookup	function
(	O
&	O
syms	pointer
[	O
INCL_EXEC	int
]	O
,	O
sym	pointer
->	O
addr	pointer
)	O
||	O
(	O
syms	pointer
[	O
INCL_EXEC	int
]	O
.	O
len	long
==	O
0	int
&&	O
!	O
sym_lookup	function
(	O
&	O
syms	pointer
[	O
EXCL_EXEC	int
]	O
,	O
sym	pointer
->	O
addr	pointer
)	O
)	O
)	O
{	O
sorted_bbs	pointer
[	O
len	long
++	O
]	O
=	O
sym	pointer
;	O
}	O
}	O
qsort	function
(	O
sorted_bbs	pointer
,	O
len	long
,	O
sizeof	O
(	O
sorted_bbs	pointer
[	O
0	int
]	O
)	O
,	O
cmp_bb	function
)	O
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
len	long
;	O
++	O
i	pointer
)	O
{	O
sym	pointer
=	O
sorted_bbs	pointer
[	O
i	pointer
]	O
;	O
if	O
(	O
sym	pointer
->	O
ncalls	long
>	O
0	int
||	O
!	O
ignore_zeros	int
)	O
{	O
printf	function
(	O
_	O
(	O
"%s:%d: (%s:0x%lx) %lu executions\n"	pointer
)	O
,	O
sym	pointer
->	O
file	pointer
?	O
sym	pointer
->	O
file	pointer
->	O
name	pointer
:	O
_	O
(	O
"<unknown>"	pointer
)	O
,	O
sym	pointer
->	O
line_num	int
,	O
sym	pointer
->	O
name	pointer
,	O
(	O
unsigned	O
long	O
)	O
sym	pointer
->	O
addr	pointer
,	O
sym	pointer
->	O
ncalls	long
)	O
;	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
NBBS	int
&&	O
sym	pointer
->	O
bb_addr	array
[	O
j	int
]	O
;	O
j	int
++	O
)	O
{	O
if	O
(	O
sym	pointer
->	O
bb_calls	array
[	O
j	int
]	O
>	O
0	int
||	O
!	O
ignore_zeros	int
)	O
{	O
printf	function
(	O
_	O
(	O
"%s:%d: (%s:0x%lx) %lu executions\n"	pointer
)	O
,	O
sym	pointer
->	O
file	pointer
?	O
sym	pointer
->	O
file	pointer
->	O
name	pointer
:	O
_	O
(	O
"<unknown>"	pointer
)	O
,	O
sym	pointer
->	O
line_num	int
,	O
sym	pointer
->	O
name	pointer
,	O
(	O
unsigned	O
long	O
)	O
sym	pointer
->	O
bb_addr	array
[	O
j	int
]	O
,	O
sym	pointer
->	O
bb_calls	array
[	O
j	int
]	O
)	O
;	O
}	O
}	O
}	O
free	function
(	O
sorted_bbs	pointer
)	O
;	O
}	O
static	O
void	O
annotate_with_count	function
(	O
char	O
*	O
buf	pointer
,	O
unsigned	O
int	O
width	int
,	O
int	O
line_num	int
,	O
PTR	O
arg	pointer
)	O
{	O
Source_File	struct
*	O
sf	pointer
=	O
(	O
Source_File	struct
*	O
)	O
arg	pointer
;	O
Sym	struct
*	O
b	pointer
;	O
unsigned	O
int	O
i	pointer
;	O
static	O
unsigned	O
long	O
last_count	long
;	O
unsigned	O
long	O
last_print	long
=	O
(	O
unsigned	O
long	O
)	O
-	O
1	int
;	O
b	pointer
=	O
NULL	O
;	O
if	O
(	O
line_num	int
<=	O
sf	pointer
->	O
num_lines	int
)	O
b	pointer
=	O
(	O
Sym	struct
*	O
)	O
sf	pointer
->	O
line	pointer
[	O
line_num	int
-	O
1	int
]	O
;	O
if	O
(	O
!	O
b	pointer
)	O
{	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
width	int
;	O
i	pointer
++	O
)	O
buf	pointer
[	O
i	pointer
]	O
=	O
' '	O
;	O
buf	pointer
[	O
width	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
char	O
tmpbuf	array
[	O
NBBS	int
*	O
30	int
]	O
;	O
char	O
*	O
p	pointer
;	O
unsigned	O
long	O
ncalls	long
;	O
int	O
ncalls_set	int
;	O
unsigned	O
int	O
len	long
;	O
++	O
num_executable_lines	long
;	O
p	pointer
=	O
tmpbuf	array
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
ncalls	long
=	O
0	int
;	O
ncalls_set	int
=	O
0	int
;	O
if	O
(	O
b	pointer
->	O
is_func	int
)	O
{	O
sprintf	function
(	O
p	pointer
,	O
"%lu"	pointer
,	O
b	pointer
->	O
ncalls	long
)	O
;	O
p	pointer
+=	O
strlen	function
(	O
p	pointer
)	O
;	O
last_count	long
=	O
b	pointer
->	O
ncalls	long
;	O
last_print	long
=	O
last_count	long
;	O
ncalls	long
=	O
b	pointer
->	O
ncalls	long
;	O
ncalls_set	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
bb_annotate_all_lines	int
&&	O
b	pointer
->	O
bb_addr	array
[	O
0	int
]	O
&&	O
b	pointer
->	O
bb_addr	array
[	O
0	int
]	O
>	O
b	pointer
->	O
addr	pointer
)	O
{	O
sprintf	function
(	O
p	pointer
,	O
"%lu"	pointer
,	O
last_count	long
)	O
;	O
p	pointer
+=	O
strlen	function
(	O
p	pointer
)	O
;	O
last_print	long
=	O
last_count	long
;	O
ncalls	long
=	O
last_count	long
;	O
ncalls_set	int
=	O
1	int
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
NBBS	int
&&	O
b	pointer
->	O
bb_addr	array
[	O
i	pointer
]	O
;	O
i	pointer
++	O
)	O
{	O
last_count	long
=	O
b	pointer
->	O
bb_calls	array
[	O
i	pointer
]	O
;	O
if	O
(	O
!	O
ncalls_set	int
)	O
{	O
ncalls	long
=	O
0	int
;	O
ncalls_set	int
=	O
1	int
;	O
}	O
ncalls	long
+=	O
last_count	long
;	O
if	O
(	O
bb_annotate_all_lines	int
&&	O
last_count	long
==	O
last_print	long
)	O
continue	O
;	O
if	O
(	O
p	pointer
>	O
tmpbuf	array
)	O
*	O
p	pointer
++	O
=	O
','	O
;	O
sprintf	function
(	O
p	pointer
,	O
"%lu"	pointer
,	O
last_count	long
)	O
;	O
p	pointer
+=	O
strlen	function
(	O
p	pointer
)	O
;	O
last_print	long
=	O
last_count	long
;	O
}	O
if	O
(	O
bb_annotate_all_lines	int
&&	O
p	pointer
==	O
tmpbuf	array
)	O
{	O
sprintf	function
(	O
p	pointer
,	O
"%lu"	pointer
,	O
last_count	long
)	O
;	O
p	pointer
+=	O
strlen	function
(	O
p	pointer
)	O
;	O
ncalls	long
=	O
last_count	long
;	O
ncalls_set	int
=	O
1	int
;	O
}	O
if	O
(	O
!	O
ncalls_set	int
)	O
{	O
unsigned	O
int	O
c	int
;	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
width	int
;	O
c	int
++	O
)	O
buf	pointer
[	O
c	int
]	O
=	O
' '	O
;	O
buf	pointer
[	O
width	int
]	O
=	O
'\0'	O
;	O
return	O
;	O
}	O
++	O
num_lines_executed	long
;	O
if	O
(	O
ncalls	long
<	O
bb_min_calls	long
)	O
{	O
strcpy	function
(	O
tmpbuf	array
,	O
"#####"	pointer
)	O
;	O
p	pointer
=	O
tmpbuf	array
+	O
5	int
;	O
}	O
strcpy	function
(	O
p	pointer
,	O
" -> "	pointer
)	O
;	O
p	pointer
+=	O
4	int
;	O
len	long
=	O
p	pointer
-	O
tmpbuf	array
;	O
if	O
(	O
len	long
>=	O
width	int
)	O
{	O
strncpy	function
(	O
buf	pointer
,	O
tmpbuf	array
,	O
width	int
)	O
;	O
buf	pointer
[	O
width	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
unsigned	O
int	O
c	int
;	O
strcpy	function
(	O
buf	pointer
+	O
width	int
-	O
len	long
,	O
tmpbuf	array
)	O
;	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
width	int
-	O
len	long
;	O
++	O
c	int
)	O
buf	pointer
[	O
c	int
]	O
=	O
' '	O
;	O
}	O
}	O
}	O
void	O
print_annotated_source	function
(	O
void	O
)	O
{	O
Sym	struct
*	O
sym	pointer
,	O
*	O
line_stats	pointer
,	O
*	O
new_line	pointer
;	O
Source_File	struct
*	O
sf	pointer
;	O
int	O
i	pointer
,	O
table_len	int
;	O
FILE	struct
*	O
ofp	pointer
;	O
for	O
(	O
sym	pointer
=	O
symtab	struct
.	O
base	int
;	O
sym	pointer
<	O
symtab	struct
.	O
limit	pointer
;	O
++	O
sym	pointer
)	O
{	O
if	O
(	O
sym	pointer
->	O
file	pointer
&&	O
sym	pointer
->	O
line_num	int
>	O
sym	pointer
->	O
file	pointer
->	O
num_lines	int
&&	O
(	O
sym_lookup	function
(	O
&	O
syms	pointer
[	O
INCL_ANNO	int
]	O
,	O
sym	pointer
->	O
addr	pointer
)	O
||	O
(	O
syms	pointer
[	O
INCL_ANNO	int
]	O
.	O
len	long
==	O
0	int
&&	O
!	O
sym_lookup	function
(	O
&	O
syms	pointer
[	O
EXCL_ANNO	int
]	O
,	O
sym	pointer
->	O
addr	pointer
)	O
)	O
)	O
)	O
{	O
sym	pointer
->	O
file	pointer
->	O
num_lines	int
=	O
sym	pointer
->	O
line_num	int
;	O
}	O
}	O
for	O
(	O
sf	pointer
=	O
first_src_file	pointer
;	O
sf	pointer
;	O
sf	pointer
=	O
sf	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
sf	pointer
->	O
num_lines	int
>	O
0	int
)	O
{	O
sf	pointer
->	O
line	pointer
=	O
(	O
void	O
*	O
*	O
)	O
xmalloc	function
(	O
sf	pointer
->	O
num_lines	int
*	O
sizeof	O
(	O
sf	pointer
->	O
line	pointer
[	O
0	int
]	O
)	O
)	O
;	O
memset	function
(	O
sf	pointer
->	O
line	pointer
,	O
0	int
,	O
sf	pointer
->	O
num_lines	int
*	O
sizeof	O
(	O
sf	pointer
->	O
line	pointer
[	O
0	int
]	O
)	O
)	O
;	O
}	O
}	O
for	O
(	O
sym	pointer
=	O
symtab	struct
.	O
base	int
;	O
sym	pointer
<	O
symtab	struct
.	O
limit	pointer
;	O
++	O
sym	pointer
)	O
{	O
if	O
(	O
sym	pointer
->	O
file	pointer
&&	O
sym	pointer
->	O
file	pointer
->	O
num_lines	int
&&	O
(	O
sym_lookup	function
(	O
&	O
syms	pointer
[	O
INCL_ANNO	int
]	O
,	O
sym	pointer
->	O
addr	pointer
)	O
||	O
(	O
syms	pointer
[	O
INCL_ANNO	int
]	O
.	O
len	long
==	O
0	int
&&	O
!	O
sym_lookup	function
(	O
&	O
syms	pointer
[	O
EXCL_ANNO	int
]	O
,	O
sym	pointer
->	O
addr	pointer
)	O
)	O
)	O
)	O
{	O
sym	pointer
->	O
file	pointer
->	O
ncalls	long
+=	O
sym	pointer
->	O
ncalls	long
;	O
line_stats	pointer
=	O
(	O
Sym	struct
*	O
)	O
sym	pointer
->	O
file	pointer
->	O
line	pointer
[	O
sym	pointer
->	O
line_num	int
-	O
1	int
]	O
;	O
if	O
(	O
!	O
line_stats	pointer
)	O
{	O
sym	pointer
->	O
file	pointer
->	O
line	pointer
[	O
sym	pointer
->	O
line_num	int
-	O
1	int
]	O
=	O
sym	pointer
;	O
}	O
else	O
if	O
(	O
!	O
line_stats	pointer
->	O
addr	pointer
)	O
{	O
line_stats	pointer
->	O
ncalls	long
+=	O
sym	pointer
->	O
ncalls	long
;	O
}	O
else	O
{	O
new_line	pointer
=	O
(	O
Sym	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
new_line	pointer
)	O
)	O
;	O
*	O
new_line	pointer
=	O
*	O
line_stats	pointer
;	O
new_line	pointer
->	O
addr	pointer
=	O
0	int
;	O
new_line	pointer
->	O
ncalls	long
+=	O
sym	pointer
->	O
ncalls	long
;	O
sym	pointer
->	O
file	pointer
->	O
line	pointer
[	O
sym	pointer
->	O
line_num	int
-	O
1	int
]	O
=	O
new_line	pointer
;	O
}	O
}	O
}	O
for	O
(	O
sf	pointer
=	O
first_src_file	pointer
;	O
sf	pointer
;	O
sf	pointer
=	O
sf	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
!	O
sf	pointer
->	O
num_lines	int
||	O
(	O
ignore_zeros	int
&&	O
sf	pointer
->	O
ncalls	long
==	O
0	int
)	O
)	O
continue	O
;	O
num_executable_lines	long
=	O
num_lines_executed	long
=	O
0	int
;	O
ofp	pointer
=	O
annotate_source	function
(	O
sf	pointer
,	O
16	int
,	O
annotate_with_count	function
,	O
sf	pointer
)	O
;	O
if	O
(	O
!	O
ofp	pointer
)	O
continue	O
;	O
if	O
(	O
bb_table_length	int
>	O
0	int
)	O
{	O
fprintf	function
(	O
ofp	pointer
,	O
_	O
(	O
"\n\nTop %d Lines:\n\n     Line      Count\n\n"	pointer
)	O
,	O
bb_table_length	int
)	O
;	O
qsort	function
(	O
sf	pointer
->	O
line	pointer
,	O
sf	pointer
->	O
num_lines	int
,	O
sizeof	O
(	O
sf	pointer
->	O
line	pointer
[	O
0	int
]	O
)	O
,	O
cmp_ncalls	function
)	O
;	O
table_len	int
=	O
bb_table_length	int
;	O
if	O
(	O
table_len	int
>	O
sf	pointer
->	O
num_lines	int
)	O
table_len	int
=	O
sf	pointer
->	O
num_lines	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
table_len	int
;	O
++	O
i	pointer
)	O
{	O
sym	pointer
=	O
(	O
Sym	struct
*	O
)	O
sf	pointer
->	O
line	pointer
[	O
i	pointer
]	O
;	O
if	O
(	O
!	O
sym	pointer
||	O
sym	pointer
->	O
ncalls	long
==	O
0	int
)	O
break	O
;	O
fprintf	function
(	O
ofp	pointer
,	O
"%9d %10lu\n"	pointer
,	O
sym	pointer
->	O
line_num	int
,	O
sym	pointer
->	O
ncalls	long
)	O
;	O
}	O
}	O
free	function
(	O
sf	pointer
->	O
line	pointer
)	O
;	O
sf	pointer
->	O
line	pointer
=	O
0	int
;	O
fprintf	function
(	O
ofp	pointer
,	O
_	O
(	O
"\nExecution Summary:\n\n"	pointer
)	O
)	O
;	O
fprintf	function
(	O
ofp	pointer
,	O
_	O
(	O
"%9ld   Executable lines in this file\n"	pointer
)	O
,	O
num_executable_lines	long
)	O
;	O
fprintf	function
(	O
ofp	pointer
,	O
_	O
(	O
"%9ld   Lines executed\n"	pointer
)	O
,	O
num_lines_executed	long
)	O
;	O
fprintf	function
(	O
ofp	pointer
,	O
_	O
(	O
"%9.2f   Percent of the file executed\n"	pointer
)	O
,	O
num_executable_lines	long
?	O
100.0	int
*	O
num_lines_executed	long
/	O
(	O
double	O
)	O
num_executable_lines	long
:	O
100.0	int
)	O
;	O
fprintf	function
(	O
ofp	pointer
,	O
_	O
(	O
"\n%9lu   Total number of line executions\n"	pointer
)	O
,	O
sf	pointer
->	O
ncalls	long
)	O
;	O
fprintf	function
(	O
ofp	pointer
,	O
_	O
(	O
"%9.2f   Average executions per line\n"	pointer
)	O
,	O
num_executable_lines	long
?	O
(	O
double	O
)	O
sf	pointer
->	O
ncalls	long
/	O
(	O
double	O
)	O
num_executable_lines	long
:	O
0.0	int
)	O
;	O
if	O
(	O
ofp	pointer
!=	O
stdout	pointer
)	O
fclose	function
(	O
ofp	pointer
)	O
;	O
}	O
}	O
