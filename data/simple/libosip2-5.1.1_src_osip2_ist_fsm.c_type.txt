transition_t	struct
ist_transition	array
[	O
11	int
]	O
=	O
{	O
{	O
IST_PRE_PROCEEDING	int
,	O
RCV_REQINVITE	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ist_rcv_invite	function
,	O
&	O
ist_transition	array
[	O
1	int
]	O
,	O
NULL	O
}	O
,	O
{	O
IST_PROCEEDING	int
,	O
RCV_REQINVITE	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ist_rcv_invite	function
,	O
&	O
ist_transition	array
[	O
2	int
]	O
,	O
NULL	O
}	O
,	O
{	O
IST_COMPLETED	int
,	O
RCV_REQINVITE	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ist_rcv_invite	function
,	O
&	O
ist_transition	array
[	O
3	int
]	O
,	O
NULL	O
}	O
,	O
{	O
IST_COMPLETED	int
,	O
TIMEOUT_G	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
osip_ist_timeout_g_event	function
,	O
&	O
ist_transition	array
[	O
4	int
]	O
,	O
NULL	O
}	O
,	O
{	O
IST_COMPLETED	int
,	O
TIMEOUT_H	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
osip_ist_timeout_h_event	function
,	O
&	O
ist_transition	array
[	O
5	int
]	O
,	O
NULL	O
}	O
,	O
{	O
IST_PROCEEDING	int
,	O
SND_STATUS_1XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ist_snd_1xx	function
,	O
&	O
ist_transition	array
[	O
6	int
]	O
,	O
NULL	O
}	O
,	O
{	O
IST_PROCEEDING	int
,	O
SND_STATUS_2XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ist_snd_2xx	function
,	O
&	O
ist_transition	array
[	O
7	int
]	O
,	O
NULL	O
}	O
,	O
{	O
IST_PROCEEDING	int
,	O
SND_STATUS_3456XX	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ist_snd_3456xx	function
,	O
&	O
ist_transition	array
[	O
8	int
]	O
,	O
NULL	O
}	O
,	O
{	O
IST_COMPLETED	int
,	O
RCV_REQACK	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ist_rcv_ack	function
,	O
&	O
ist_transition	array
[	O
9	int
]	O
,	O
NULL	O
}	O
,	O
{	O
IST_CONFIRMED	int
,	O
RCV_REQACK	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
ist_rcv_ack	function
,	O
&	O
ist_transition	array
[	O
10	int
]	O
,	O
NULL	O
}	O
,	O
{	O
IST_CONFIRMED	int
,	O
TIMEOUT_I	int
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
)	O
&	O
osip_ist_timeout_i_event	function
,	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
osip_statemachine_t	struct
ist_fsm	struct
=	O
{	O
ist_transition	array
}	O
;	O
static	O
void	O
ist_handle_transport_error	function
(	O
osip_transaction_t	struct
*	O
ist	pointer
,	O
int	O
err	int
)	O
{	O
__osip_transport_error_callback	function
(	O
OSIP_IST_TRANSPORT_ERROR	int
,	O
ist	pointer
,	O
err	int
)	O
;	O
__osip_transaction_set_state	function
(	O
ist	pointer
,	O
IST_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_IST_KILL_TRANSACTION	int
,	O
ist	pointer
)	O
;	O
}	O
void	O
ist_rcv_invite	function
(	O
osip_transaction_t	struct
*	O
ist	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
ist	pointer
->	O
state	pointer
==	O
IST_PRE_PROCEEDING	int
)	O
{	O
ist	pointer
->	O
orig_request	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
__osip_message_callback	function
(	O
OSIP_IST_INVITE_RECEIVED	int
,	O
ist	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
}	O
else	O
{	O
osip_message_free	function
(	O
evt	pointer
->	O
sip	pointer
)	O
;	O
__osip_message_callback	function
(	O
OSIP_IST_INVITE_RECEIVED_AGAIN	int
,	O
ist	pointer
,	O
ist	pointer
->	O
orig_request	pointer
)	O
;	O
if	O
(	O
ist	pointer
->	O
last_response	pointer
!=	O
NULL	O
)	O
{	O
i	int
=	O
__osip_transaction_snd_xxx	function
(	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
ist_handle_transport_error	function
(	O
ist	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
else	O
{	O
if	O
(	O
MSG_IS_STATUS_1XX	O
(	O
ist	pointer
->	O
last_response	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_IST_STATUS_1XX_SENT	int
,	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_STATUS_2XX	O
(	O
ist	pointer
->	O
last_response	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_IST_STATUS_2XX_SENT_AGAIN	int
,	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
else	O
__osip_message_callback	function
(	O
OSIP_IST_STATUS_3456XX_SENT_AGAIN	int
,	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
}	O
}	O
return	O
;	O
}	O
__osip_transaction_set_state	function
(	O
ist	pointer
,	O
IST_PROCEEDING	int
)	O
;	O
}	O
void	O
osip_ist_timeout_g_event	function
(	O
osip_transaction_t	struct
*	O
ist	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
int	O
i	int
;	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_g_length	int
=	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_g_length	int
*	O
2	int
;	O
if	O
(	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_g_length	int
>	O
DEFAULT_T2	int
)	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_g_length	int
=	O
DEFAULT_T2	int
;	O
osip_gettimeofday	function
(	O
&	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_g_start	struct
,	O
NULL	O
)	O
;	O
add_gettimeofday	function
(	O
&	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_g_start	struct
,	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_g_length	int
)	O
;	O
i	int
=	O
__osip_transaction_snd_xxx	function
(	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
ist_handle_transport_error	function
(	O
ist	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
__osip_message_callback	function
(	O
OSIP_IST_STATUS_3456XX_SENT_AGAIN	int
,	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
}	O
void	O
osip_ist_timeout_h_event	function
(	O
osip_transaction_t	struct
*	O
ist	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_h_length	int
=	O
-	O
1	int
;	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_h_start	struct
.	O
tv_sec	long
=	O
-	O
1	int
;	O
__osip_transaction_set_state	function
(	O
ist	pointer
,	O
IST_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_IST_KILL_TRANSACTION	int
,	O
ist	pointer
)	O
;	O
}	O
void	O
osip_ist_timeout_i_event	function
(	O
osip_transaction_t	struct
*	O
ist	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_i_length	int
=	O
-	O
1	int
;	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_i_start	struct
.	O
tv_sec	long
=	O
-	O
1	int
;	O
__osip_transaction_set_state	function
(	O
ist	pointer
,	O
IST_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_IST_KILL_TRANSACTION	int
,	O
ist	pointer
)	O
;	O
}	O
void	O
ist_snd_1xx	function
(	O
osip_transaction_t	struct
*	O
ist	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
ist	pointer
->	O
last_response	pointer
!=	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
}	O
ist	pointer
->	O
last_response	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
i	int
=	O
__osip_transaction_snd_xxx	function
(	O
ist	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
ist_handle_transport_error	function
(	O
ist	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
else	O
__osip_message_callback	function
(	O
OSIP_IST_STATUS_1XX_SENT	int
,	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
return	O
;	O
}	O
void	O
ist_snd_2xx	function
(	O
osip_transaction_t	struct
*	O
ist	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
ist	pointer
->	O
last_response	pointer
!=	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
}	O
ist	pointer
->	O
last_response	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
i	int
=	O
__osip_transaction_snd_xxx	function
(	O
ist	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
ist_handle_transport_error	function
(	O
ist	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
else	O
{	O
__osip_message_callback	function
(	O
OSIP_IST_STATUS_2XX_SENT	int
,	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
__osip_transaction_set_state	function
(	O
ist	pointer
,	O
IST_TERMINATED	int
)	O
;	O
__osip_kill_transaction_callback	function
(	O
OSIP_IST_KILL_TRANSACTION	int
,	O
ist	pointer
)	O
;	O
}	O
return	O
;	O
}	O
void	O
ist_snd_3456xx	function
(	O
osip_transaction_t	struct
*	O
ist	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
ist	pointer
->	O
last_response	pointer
!=	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
}	O
ist	pointer
->	O
last_response	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
i	int
=	O
__osip_transaction_snd_xxx	function
(	O
ist	pointer
,	O
evt	pointer
->	O
sip	pointer
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
ist_handle_transport_error	function
(	O
ist	pointer
,	O
i	int
)	O
;	O
return	O
;	O
}	O
else	O
{	O
if	O
(	O
MSG_IS_STATUS_3XX	O
(	O
ist	pointer
->	O
last_response	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_IST_STATUS_3XX_SENT	int
,	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_STATUS_4XX	O
(	O
ist	pointer
->	O
last_response	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_IST_STATUS_4XX_SENT	int
,	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
else	O
if	O
(	O
MSG_IS_STATUS_5XX	O
(	O
ist	pointer
->	O
last_response	pointer
)	O
)	O
__osip_message_callback	function
(	O
OSIP_IST_STATUS_5XX_SENT	int
,	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
else	O
__osip_message_callback	function
(	O
OSIP_IST_STATUS_6XX_SENT	int
,	O
ist	pointer
,	O
ist	pointer
->	O
last_response	pointer
)	O
;	O
}	O
if	O
(	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_g_length	int
!=	O
-	O
1	int
)	O
{	O
osip_gettimeofday	function
(	O
&	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_g_start	struct
,	O
NULL	O
)	O
;	O
add_gettimeofday	function
(	O
&	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_g_start	struct
,	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_g_length	int
)	O
;	O
}	O
osip_gettimeofday	function
(	O
&	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_h_start	struct
,	O
NULL	O
)	O
;	O
add_gettimeofday	function
(	O
&	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_h_start	struct
,	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_h_length	int
)	O
;	O
__osip_transaction_set_state	function
(	O
ist	pointer
,	O
IST_COMPLETED	int
)	O
;	O
return	O
;	O
}	O
void	O
ist_rcv_ack	function
(	O
osip_transaction_t	struct
*	O
ist	pointer
,	O
osip_event_t	struct
*	O
evt	pointer
)	O
{	O
if	O
(	O
ist	pointer
->	O
ack	pointer
!=	O
NULL	O
)	O
{	O
osip_message_free	function
(	O
ist	pointer
->	O
ack	pointer
)	O
;	O
}	O
ist	pointer
->	O
ack	pointer
=	O
evt	pointer
->	O
sip	pointer
;	O
if	O
(	O
ist	pointer
->	O
state	pointer
==	O
IST_COMPLETED	int
)	O
__osip_message_callback	function
(	O
OSIP_IST_ACK_RECEIVED	int
,	O
ist	pointer
,	O
ist	pointer
->	O
ack	pointer
)	O
;	O
else	O
__osip_message_callback	function
(	O
OSIP_IST_ACK_RECEIVED_AGAIN	int
,	O
ist	pointer
,	O
ist	pointer
->	O
ack	pointer
)	O
;	O
osip_gettimeofday	function
(	O
&	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_i_start	struct
,	O
NULL	O
)	O
;	O
add_gettimeofday	function
(	O
&	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_i_start	struct
,	O
ist	pointer
->	O
ist_context	pointer
->	O
timer_i_length	int
)	O
;	O
__osip_transaction_set_state	function
(	O
ist	pointer
,	O
IST_CONFIRMED	int
)	O
;	O
}	O
