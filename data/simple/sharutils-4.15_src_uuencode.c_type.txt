static	O
const	O
char	O
cright_years_z	array
[	O
]	O
=	O
"1994-2015"	pointer
;	O
char	O
*	O
output_name	pointer
=	O
NULL	O
;	O
char	O
*	O
input_name	pointer
=	O
NULL	O
;	O
static	O
inline	O
void	O
try_putchar	function
(	O
int	O
)	O
;	O
static	O
void	O
encode	function
(	O
void	O
)	O
;	O
const	O
char	O
uu_std	array
[	O
64	int
]	O
=	O
{	O
'`'	O
,	O
'!'	O
,	O
'"'	O
,	O
'#'	O
,	O
'$'	O
,	O
'%'	O
,	O
'&'	O
,	O
'\''	O
,	O
'('	O
,	O
')'	O
,	O
'*'	O
,	O
'+'	O
,	O
','	O
,	O
'-'	O
,	O
'.'	O
,	O
'/'	O
,	O
'0'	O
,	O
'1'	O
,	O
'2'	O
,	O
'3'	O
,	O
'4'	O
,	O
'5'	O
,	O
'6'	O
,	O
'7'	O
,	O
'8'	O
,	O
'9'	O
,	O
':'	O
,	O
';'	O
,	O
'<'	O
,	O
'='	O
,	O
'>'	O
,	O
'?'	O
,	O
'@'	O
,	O
'A'	O
,	O
'B'	O
,	O
'C'	O
,	O
'D'	O
,	O
'E'	O
,	O
'F'	O
,	O
'G'	O
,	O
'H'	O
,	O
'I'	O
,	O
'J'	O
,	O
'K'	O
,	O
'L'	O
,	O
'M'	O
,	O
'N'	O
,	O
'O'	O
,	O
'P'	O
,	O
'Q'	O
,	O
'R'	O
,	O
'S'	O
,	O
'T'	O
,	O
'U'	O
,	O
'V'	O
,	O
'W'	O
,	O
'X'	O
,	O
'Y'	O
,	O
'Z'	O
,	O
'['	O
,	O
'\\'	O
,	O
']'	O
,	O
'^'	O
,	O
'_'	O
}	O
;	O
const	O
char	O
*	O
trans_ptr	pointer
=	O
uu_std	array
;	O
static	O
inline	O
void	O
try_putchar	function
(	O
int	O
c	char
)	O
{	O
if	O
(	O
putchar	function
(	O
c	char
)	O
==	O
EOF	O
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
"putchar"	pointer
,	O
_	O
(	O
"standard output"	pointer
)	O
)	O
;	O
}	O
static	O
size_t	long
encode_block	function
(	O
char	O
*	O
out	pointer
,	O
unsigned	O
char	O
const	O
*	O
in	pointer
,	O
size_t	long
in_len	long
)	O
{	O
char	O
*	O
start	pointer
=	O
out	pointer
;	O
while	O
(	O
in_len	long
>=	O
3	int
)	O
{	O
*	O
(	O
out	pointer
++	O
)	O
=	O
ENC	O
(	O
in	pointer
[	O
0	int
]	O
>>	O
2	int
)	O
;	O
*	O
(	O
out	pointer
++	O
)	O
=	O
ENC	O
(	O
(	O
(	O
in	pointer
[	O
0	int
]	O
&	O
0x03	int
)	O
<<	O
4	int
)	O
+	O
(	O
(	O
in	pointer
[	O
1	int
]	O
>>	O
4	int
)	O
&	O
0x0F	int
)	O
)	O
;	O
*	O
(	O
out	pointer
++	O
)	O
=	O
ENC	O
(	O
(	O
(	O
in	pointer
[	O
1	int
]	O
&	O
0x0F	int
)	O
<<	O
2	int
)	O
+	O
(	O
(	O
in	pointer
[	O
2	int
]	O
>>	O
6	int
)	O
&	O
0x03	int
)	O
)	O
;	O
*	O
(	O
out	pointer
++	O
)	O
=	O
ENC	O
(	O
in	pointer
[	O
2	int
]	O
&	O
0x3F	int
)	O
;	O
in_len	long
-=	O
3	int
;	O
in	pointer
+=	O
3	int
;	O
}	O
if	O
(	O
in_len	long
>	O
0	int
)	O
{	O
unsigned	O
char	O
lc	char
=	O
(	O
in_len	long
>	O
1	int
)	O
?	O
in	pointer
[	O
1	int
]	O
:	O
'\0'	O
;	O
*	O
(	O
out	pointer
++	O
)	O
=	O
ENC	O
(	O
in	pointer
[	O
0	int
]	O
>>	O
2	int
)	O
;	O
*	O
(	O
out	pointer
++	O
)	O
=	O
ENC	O
(	O
(	O
(	O
in	pointer
[	O
0	int
]	O
&	O
0x03	int
)	O
<<	O
4	int
)	O
+	O
(	O
(	O
lc	char
>>	O
4	int
)	O
&	O
0x0F	int
)	O
)	O
;	O
*	O
(	O
out	pointer
++	O
)	O
=	O
ENC	O
(	O
(	O
lc	char
&	O
0x0F	int
)	O
<<	O
2	int
)	O
;	O
*	O
(	O
out	pointer
++	O
)	O
=	O
ENC	O
(	O
0	int
)	O
;	O
}	O
return	O
out	pointer
-	O
start	pointer
;	O
}	O
static	O
void	O
encode	function
(	O
void	O
)	O
{	O
int	O
finishing	int
=	O
0	int
;	O
do	O
{	O
unsigned	O
char	O
buf	array
[	O
45	int
]	O
;	O
char	O
buf_out	array
[	O
64	int
]	O
;	O
int	O
rdct	int
=	O
fread	function
(	O
buf	array
,	O
1	int
,	O
sizeof	O
(	O
buf	array
)	O
,	O
stdin	pointer
)	O
;	O
size_t	long
wrct	long
=	O
sizeof	O
(	O
buf_out	array
)	O
;	O
if	O
(	O
rdct	int
<=	O
0	int
)	O
{	O
if	O
(	O
ferror	function
(	O
stdin	pointer
)	O
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
"fread"	pointer
,	O
input_name	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
rdct	int
<	O
45	int
)	O
{	O
if	O
(	O
!	O
feof	function
(	O
stdin	pointer
)	O
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
"fread"	pointer
,	O
input_name	pointer
)	O
;	O
finishing	int
=	O
1	int
;	O
}	O
if	O
(	O
!	O
HAVE_OPT	O
(	O
BASE64	O
)	O
)	O
{	O
try_putchar	function
(	O
ENC	O
(	O
(	O
unsigned	O
int	O
)	O
rdct	int
)	O
)	O
;	O
wrct	long
=	O
encode_block	function
(	O
buf_out	array
,	O
buf	array
,	O
rdct	int
)	O
;	O
}	O
else	O
{	O
base64_encode	function
(	O
(	O
char	O
*	O
)	O
buf	array
,	O
(	O
size_t	long
)	O
rdct	int
,	O
buf_out	array
,	O
wrct	long
)	O
;	O
wrct	long
=	O
strlen	function
(	O
buf_out	array
)	O
;	O
}	O
buf_out	array
[	O
wrct	long
++	O
]	O
=	O
'\n'	O
;	O
if	O
(	O
fwrite	function
(	O
buf_out	array
,	O
1	int
,	O
wrct	long
,	O
stdout	pointer
)	O
!=	O
wrct	long
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
"fwrite"	pointer
,	O
_	O
(	O
"standard output"	pointer
)	O
)	O
;	O
}	O
while	O
(	O
!	O
finishing	int
)	O
;	O
if	O
(	O
fclose	function
(	O
stdin	pointer
)	O
!=	O
0	int
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
"fclose"	pointer
,	O
input_name	pointer
)	O
;	O
if	O
(	O
!	O
HAVE_OPT	O
(	O
BASE64	O
)	O
)	O
{	O
try_putchar	function
(	O
ENC	O
(	O
'\0'	O
)	O
)	O
;	O
try_putchar	function
(	O
'\n'	O
)	O
;	O
}	O
}	O
static	O
void	O
process_opts	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
*	O
mode	pointer
)	O
{	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
input_name	pointer
=	O
_	O
(	O
"standard input"	pointer
)	O
;	O
{	O
int	O
ct	int
=	O
optionProcess	function
(	O
&	O
uuencodeOptions	struct
,	O
argc	int
,	O
argv	pointer
)	O
;	O
argc	int
-=	O
ct	int
;	O
argv	pointer
+=	O
ct	int
;	O
}	O
switch	O
(	O
argc	int
)	O
{	O
case	O
2	int
:	O
{	O
struct	O
stat	struct
sb	struct
;	O
FILE	struct
*	O
fp	pointer
=	O
freopen	function
(	O
*	O
argv	pointer
,	O
FOPEN_READ_BINARY	pointer
,	O
stdin	pointer
)	O
;	O
input_name	pointer
=	O
*	O
argv	pointer
;	O
if	O
(	O
fp	pointer
!=	O
stdin	pointer
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
_	O
(	O
"freopen of stdin"	pointer
)	O
,	O
input_name	pointer
)	O
;	O
if	O
(	O
fstat	function
(	O
fileno	function
(	O
stdin	pointer
)	O
,	O
&	O
sb	struct
)	O
!=	O
0	int
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
"fstat"	pointer
,	O
input_name	pointer
)	O
;	O
*	O
mode	pointer
=	O
sb	struct
.	O
st_mode	int
&	O
(	O
S_IRWXU	O
|	O
S_IRWXG	O
|	O
S_IRWXO	O
)	O
;	O
output_name	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
break	O
;	O
}	O
case	O
1	int
:	O
*	O
mode	pointer
=	O
IRWALL_MODE	O
&	O
~	O
umask	function
(	O
IRWALL_MODE	O
)	O
;	O
output_name	pointer
=	O
*	O
argv	pointer
;	O
break	O
;	O
case	O
0	int
:	O
default	O
:	O
USAGE	O
(	O
UUENCODE_EXIT_USAGE_ERROR	int
)	O
;	O
}	O
if	O
(	O
HAVE_OPT	O
(	O
ENCODE_FILE_NAME	O
)	O
)	O
{	O
size_t	long
nmlen	long
=	O
strlen	function
(	O
output_name	pointer
)	O
;	O
size_t	long
bfsz	long
=	O
nmlen	long
+	O
(	O
nmlen	long
/	O
3	int
)	O
+	O
4	int
;	O
;	O
char	O
*	O
p	pointer
=	O
malloc	function
(	O
bfsz	long
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
"malloc"	pointer
,	O
_	O
(	O
"file name"	pointer
)	O
)	O
;	O
base64_encode	function
(	O
(	O
char	O
*	O
)	O
output_name	pointer
,	O
nmlen	long
,	O
p	pointer
,	O
bfsz	long
)	O
;	O
output_name	pointer
=	O
p	pointer
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
mode	pointer
;	O
process_opts	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
mode	pointer
)	O
;	O
if	O
(	O
printf	function
(	O
"begin%s%s %o %s\n"	pointer
,	O
HAVE_OPT	O
(	O
BASE64	O
)	O
?	O
"-base64"	pointer
:	O
""	pointer
,	O
HAVE_OPT	O
(	O
ENCODE_FILE_NAME	O
)	O
?	O
"-encoded"	pointer
:	O
""	pointer
,	O
mode	pointer
,	O
output_name	pointer
)	O
<	O
0	int
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
"printf"	pointer
,	O
_	O
(	O
"standard output"	pointer
)	O
)	O
;	O
encode	function
(	O
)	O
;	O
if	O
(	O
ferror	function
(	O
stdout	pointer
)	O
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
"ferror"	pointer
,	O
_	O
(	O
"standard output"	pointer
)	O
)	O
;	O
if	O
(	O
puts	function
(	O
HAVE_OPT	O
(	O
BASE64	O
)	O
?	O
"===="	pointer
:	O
"end"	pointer
)	O
==	O
EOF	O
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
"puts"	pointer
,	O
_	O
(	O
"standard output"	pointer
)	O
)	O
;	O
if	O
(	O
fclose	function
(	O
stdout	pointer
)	O
!=	O
0	int
)	O
fserr	function
(	O
UUENCODE_EXIT_FAILURE	int
,	O
"fclose"	pointer
,	O
_	O
(	O
"standard output"	pointer
)	O
)	O
;	O
exit	function
(	O
UUENCODE_EXIT_SUCCESS	int
)	O
;	O
}	O
