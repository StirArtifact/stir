static	O
struct	O
dict_connection	struct
*	O
conn	pointer
;	O
int	O
set_bool	function
(	O
int	O
*	O
pval	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
str	pointer
,	O
"yes"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
str	pointer
,	O
"on"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
str	pointer
,	O
"true"	pointer
)	O
==	O
0	int
)	O
*	O
pval	pointer
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
str	pointer
,	O
"no"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
str	pointer
,	O
"off"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
str	pointer
,	O
"false"	pointer
)	O
==	O
0	int
)	O
*	O
pval	pointer
=	O
0	int
;	O
else	O
{	O
script_error	function
(	O
_	O
(	O
"Expected boolean value"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
ds_silent_close	function
(	O
void	O
)	O
{	O
if	O
(	O
conn	pointer
)	O
{	O
stream_printf	function
(	O
conn	pointer
->	O
str	pointer
,	O
"QUIT\r\n"	pointer
)	O
;	O
dict_read_reply	function
(	O
conn	pointer
)	O
;	O
dict_conn_close	function
(	O
conn	pointer
)	O
;	O
conn	pointer
=	O
NULL	O
;	O
}	O
}	O
static	O
int	O
get_list	function
(	O
struct	O
dict_result	struct
*	O
*	O
pres	pointer
,	O
char	O
*	O
cmd	pointer
,	O
char	O
*	O
code	int
)	O
{	O
if	O
(	O
conn	pointer
&&	O
*	O
pres	pointer
==	O
NULL	O
)	O
{	O
stream_printf	function
(	O
conn	pointer
->	O
str	pointer
,	O
"%s\r\n"	pointer
,	O
cmd	pointer
)	O
;	O
dict_read_reply	function
(	O
conn	pointer
)	O
;	O
if	O
(	O
dict_status_p	function
(	O
conn	pointer
,	O
code	int
)	O
)	O
{	O
unsigned	O
long	O
count	long
;	O
char	O
*	O
p	pointer
;	O
count	long
=	O
strtoul	function
(	O
conn	pointer
->	O
buf	pointer
+	O
3	int
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
dict_multiline_reply	function
(	O
conn	pointer
)	O
;	O
dict_result_create	function
(	O
conn	pointer
,	O
dict_result_match	int
,	O
count	long
,	O
obstack_finish	O
(	O
&	O
conn	pointer
->	O
stk	struct
)	O
)	O
;	O
dict_read_reply	function
(	O
conn	pointer
)	O
;	O
*	O
pres	pointer
=	O
dict_conn_last_result	O
(	O
conn	pointer
)	O
;	O
}	O
else	O
{	O
script_error	function
(	O
_	O
(	O
"Cannot get listing: %s"	pointer
)	O
,	O
conn	pointer
->	O
buf	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
void	O
check_disconnect	function
(	O
void	O
)	O
{	O
if	O
(	O
conn	pointer
)	O
{	O
int	O
rc	int
;	O
fd_set	struct
rd	struct
,	O
wr	struct
,	O
ex	struct
;	O
FD_ZERO	O
(	O
&	O
rd	struct
)	O
;	O
FD_SET	O
(	O
conn	pointer
->	O
fd	int
,	O
&	O
rd	struct
)	O
;	O
FD_ZERO	O
(	O
&	O
wr	struct
)	O
;	O
FD_SET	O
(	O
conn	pointer
->	O
fd	int
,	O
&	O
wr	struct
)	O
;	O
FD_ZERO	O
(	O
&	O
ex	struct
)	O
;	O
FD_SET	O
(	O
conn	pointer
->	O
fd	int
,	O
&	O
ex	struct
)	O
;	O
do	O
rc	int
=	O
select	function
(	O
conn	pointer
->	O
fd	int
+	O
1	int
,	O
&	O
rd	struct
,	O
&	O
wr	struct
,	O
&	O
ex	struct
,	O
NULL	O
)	O
;	O
while	O
(	O
rc	int
==	O
-	O
1	int
&&	O
errno	O
==	O
EINTR	int
)	O
;	O
if	O
(	O
rc	int
<	O
0	int
||	O
FD_ISSET	O
(	O
conn	pointer
->	O
fd	int
,	O
&	O
rd	struct
)	O
)	O
{	O
dict_conn_close	function
(	O
conn	pointer
)	O
;	O
conn	pointer
=	O
NULL	O
;	O
}	O
}	O
}	O
int	O
ensure_connection	function
(	O
void	O
)	O
{	O
check_disconnect	function
(	O
)	O
;	O
if	O
(	O
!	O
conn	pointer
)	O
{	O
if	O
(	O
!	O
dico_url	struct
.	O
host	pointer
&&	O
!	O
dico_url	struct
.	O
path	pointer
)	O
{	O
script_error	function
(	O
_	O
(	O
"Please specify server name or IP address"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
dict_connect	function
(	O
&	O
conn	pointer
,	O
&	O
dico_url	struct
)	O
)	O
{	O
script_error	function
(	O
_	O
(	O
"Cannot connect to the server"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
XDICO_DEBUG	O
(	O
1	int
,	O
_	O
(	O
"Getting list of databases\n"	pointer
)	O
)	O
;	O
get_list	function
(	O
&	O
conn	pointer
->	O
db_result	pointer
,	O
"SHOW DATABASES"	pointer
,	O
"110"	pointer
)	O
;	O
XDICO_DEBUG	O
(	O
1	int
,	O
_	O
(	O
"Getting list of strategies\n"	pointer
)	O
)	O
;	O
get_list	function
(	O
&	O
conn	pointer
->	O
strat_result	pointer
,	O
"SHOW STRATEGIES"	pointer
,	O
"111"	pointer
)	O
;	O
XDICO_DEBUG	O
(	O
1	int
,	O
_	O
(	O
"Finished getting server information\n"	pointer
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
ds_open	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
xdico_assign_string	function
(	O
&	O
dico_url	struct
.	O
string	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
argv	pointer
[	O
1	int
]	O
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
xdico_assign_string	function
(	O
&	O
dico_url	struct
.	O
host	pointer
,	O
NULL	O
)	O
;	O
xdico_assign_string	function
(	O
&	O
dico_url	struct
.	O
port	pointer
,	O
NULL	O
)	O
;	O
xdico_assign_string	function
(	O
&	O
dico_url	struct
.	O
path	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
xdico_assign_string	function
(	O
&	O
dico_url	struct
.	O
host	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
xdico_assign_string	function
(	O
&	O
dico_url	struct
.	O
port	pointer
,	O
argc	int
==	O
3	int
?	O
argv	pointer
[	O
2	int
]	O
:	O
DICO_DICT_PORT_STR	pointer
)	O
;	O
}	O
}	O
if	O
(	O
!	O
dico_url	struct
.	O
host	pointer
&&	O
!	O
dico_url	struct
.	O
path	pointer
)	O
{	O
script_error	function
(	O
_	O
(	O
"Please specify server name or IP address"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
ds_silent_close	function
(	O
)	O
;	O
ensure_connection	function
(	O
)	O
;	O
}	O
void	O
ds_close	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
!	O
conn	pointer
)	O
script_error	function
(	O
_	O
(	O
"Nothing to close"	pointer
)	O
)	O
;	O
else	O
ds_silent_close	function
(	O
)	O
;	O
}	O
void	O
ds_autologin	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
if	O
(	O
!	O
autologin_file	pointer
)	O
printf	function
(	O
"%s\n"	pointer
,	O
_	O
(	O
"No autologin file."	pointer
)	O
)	O
;	O
else	O
printf	function
(	O
"%s\n"	pointer
,	O
autologin_file	pointer
)	O
;	O
}	O
else	O
{	O
char	O
*	O
str	pointer
;	O
if	O
(	O
ds_tilde_expand	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
str	pointer
)	O
)	O
{	O
free	function
(	O
autologin_file	pointer
)	O
;	O
autologin_file	pointer
=	O
str	pointer
;	O
}	O
else	O
xdico_assign_string	function
(	O
&	O
autologin_file	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
}	O
}	O
void	O
ds_sasl	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
printf	function
(	O
"%s\n"	pointer
,	O
sasl_enabled_p	function
(	O
)	O
?	O
_	O
(	O
"on"	pointer
)	O
:	O
_	O
(	O
"off"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
int	O
val	array
;	O
if	O
(	O
set_bool	function
(	O
&	O
val	array
,	O
argv	pointer
[	O
1	int
]	O
)	O
==	O
0	int
)	O
sasl_enable	function
(	O
val	array
)	O
;	O
}	O
}	O
void	O
ds_database	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
printf	function
(	O
"%s\n"	pointer
,	O
dico_url	struct
.	O
req	struct
.	O
database	pointer
?	O
dico_url	struct
.	O
req	struct
.	O
database	pointer
:	O
"!"	pointer
)	O
;	O
}	O
else	O
xdico_assign_string	function
(	O
&	O
dico_url	struct
.	O
req	struct
.	O
database	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
}	O
static	O
char	O
*	O
result_generator	function
(	O
struct	O
dict_result	struct
*	O
res	pointer
,	O
const	O
char	O
*	O
text	pointer
,	O
int	O
state	pointer
)	O
{	O
static	O
int	O
i	long
,	O
len	long
;	O
if	O
(	O
!	O
state	pointer
)	O
{	O
i	long
=	O
0	int
;	O
len	long
=	O
strlen	function
(	O
text	pointer
)	O
;	O
}	O
while	O
(	O
i	long
<	O
res	pointer
->	O
count	long
)	O
{	O
char	O
*	O
s	long
=	O
res	pointer
->	O
set	union
.	O
mat	pointer
[	O
i	long
]	O
.	O
database	pointer
;	O
i	long
++	O
;	O
if	O
(	O
strncmp	function
(	O
s	long
,	O
text	pointer
,	O
len	long
)	O
==	O
0	int
)	O
return	O
strdup	function
(	O
s	long
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
db_generator	function
(	O
const	O
char	O
*	O
text	pointer
,	O
int	O
state	pointer
)	O
{	O
return	O
result_generator	function
(	O
conn	pointer
->	O
db_result	pointer
,	O
text	pointer
,	O
state	pointer
)	O
;	O
}	O
char	O
*	O
*	O
ds_compl_database	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
ws	pointer
)	O
{	O
return	O
dict_completion_matches	function
(	O
argc	int
,	O
argv	pointer
,	O
ws	pointer
,	O
db_generator	function
)	O
;	O
}	O
void	O
ds_strategy	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
printf	function
(	O
"%s\n"	pointer
,	O
dico_url	struct
.	O
req	struct
.	O
strategy	pointer
)	O
;	O
}	O
else	O
xdico_assign_string	function
(	O
&	O
dico_url	struct
.	O
req	struct
.	O
strategy	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
}	O
static	O
char	O
*	O
strat_generator	function
(	O
const	O
char	O
*	O
text	pointer
,	O
int	O
state	pointer
)	O
{	O
return	O
result_generator	function
(	O
conn	pointer
->	O
strat_result	pointer
,	O
text	pointer
,	O
state	pointer
)	O
;	O
}	O
char	O
*	O
*	O
ds_compl_strategy	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
ws	pointer
)	O
{	O
return	O
dict_completion_matches	function
(	O
argc	int
,	O
argv	pointer
,	O
ws	pointer
,	O
strat_generator	function
)	O
;	O
}	O
void	O
ds_verbose	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
printf	function
(	O
"%d\n"	pointer
,	O
debug_level	int
)	O
;	O
else	O
{	O
char	O
*	O
p	pointer
;	O
int	O
n	long
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
script_error	function
(	O
_	O
(	O
"invalid number"	pointer
)	O
)	O
;	O
else	O
debug_level	int
=	O
n	long
;	O
}	O
}	O
void	O
ds_transcript	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
printf	function
(	O
_	O
(	O
"transcript is %s\n"	pointer
)	O
,	O
transcript	int
?	O
_	O
(	O
"on"	pointer
)	O
:	O
_	O
(	O
"off"	pointer
)	O
)	O
;	O
else	O
{	O
set_bool	function
(	O
&	O
transcript	int
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
conn	pointer
)	O
dict_transcript	function
(	O
conn	pointer
,	O
transcript	int
)	O
;	O
}	O
}	O
void	O
ds_define	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
ensure_connection	function
(	O
)	O
)	O
return	O
;	O
dico_url	struct
.	O
req	struct
.	O
type	enum
=	O
DICO_REQUEST_DEFINE	int
;	O
xdico_assign_string	function
(	O
&	O
dico_url	struct
.	O
req	struct
.	O
word	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
dict_lookup	function
(	O
conn	pointer
,	O
&	O
dico_url	struct
)	O
;	O
}	O
void	O
ds_match	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
ensure_connection	function
(	O
)	O
)	O
return	O
;	O
if	O
(	O
argc	int
==	O
2	int
&&	O
argv	pointer
[	O
1	int
]	O
[	O
0	int
]	O
)	O
{	O
dict_result_free	function
(	O
conn	pointer
->	O
match_result	struct
)	O
;	O
conn	pointer
->	O
match_result	struct
=	O
NULL	O
;	O
dico_url	struct
.	O
req	struct
.	O
type	enum
=	O
DICO_REQUEST_MATCH	int
;	O
xdico_assign_string	function
(	O
&	O
dico_url	struct
.	O
req	struct
.	O
word	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
rc	int
=	O
dict_match	function
(	O
conn	pointer
,	O
quotearg_n	function
(	O
0	int
,	O
dico_url	struct
.	O
req	struct
.	O
database	pointer
)	O
,	O
quotearg_n	function
(	O
1	int
,	O
dico_url	struct
.	O
req	struct
.	O
strategy	pointer
)	O
,	O
quotearg_n	function
(	O
2	int
,	O
dico_url	struct
.	O
req	struct
.	O
word	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
conn	pointer
->	O
match_result	struct
=	O
dict_conn_last_result	O
(	O
conn	pointer
)	O
;	O
else	O
{	O
print_reply	function
(	O
conn	pointer
)	O
;	O
return	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
conn	pointer
->	O
match_result	struct
)	O
{	O
script_error	function
(	O
_	O
(	O
"No previous match"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
print_match_result	function
(	O
conn	pointer
->	O
match_result	struct
)	O
;	O
}	O
void	O
ds_define_nth	function
(	O
size_t	long
num	int
)	O
{	O
struct	O
dico_url	struct
url	pointer
=	O
dico_url	struct
;	O
if	O
(	O
ensure_connection	function
(	O
)	O
)	O
return	O
;	O
if	O
(	O
!	O
conn	pointer
->	O
match_result	struct
)	O
{	O
script_error	function
(	O
_	O
(	O
"No previous match"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
num	int
>=	O
conn	pointer
->	O
match_result	struct
->	O
count	long
)	O
{	O
script_error	function
(	O
_	O
(	O
"Invalid match number.  Type / to see the matches."	pointer
)	O
)	O
;	O
return	O
;	O
}	O
url	pointer
.	O
req	struct
.	O
type	enum
=	O
DICO_REQUEST_DEFINE	int
;	O
url	pointer
.	O
req	struct
.	O
database	pointer
=	O
conn	pointer
->	O
match_result	struct
->	O
set	union
.	O
mat	pointer
[	O
num	int
]	O
.	O
database	pointer
;	O
url	pointer
.	O
req	struct
.	O
word	pointer
=	O
conn	pointer
->	O
match_result	struct
->	O
set	union
.	O
mat	pointer
[	O
num	int
]	O
.	O
word	pointer
;	O
dict_lookup	function
(	O
conn	pointer
,	O
&	O
url	pointer
)	O
;	O
}	O
void	O
ds_distance	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
if	O
(	O
conn	pointer
)	O
{	O
if	O
(	O
!	O
dict_capa	function
(	O
conn	pointer
,	O
"xlev"	pointer
)	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Server does not support XLEV extension"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
stream_printf	function
(	O
conn	pointer
->	O
str	pointer
,	O
"XLEV TELL\r\n"	pointer
)	O
;	O
dict_read_reply	function
(	O
conn	pointer
)	O
;	O
if	O
(	O
dict_status_p	function
(	O
conn	pointer
,	O
"280"	pointer
)	O
)	O
printf	function
(	O
_	O
(	O
"Reported Levenshtein distance:%s\n"	pointer
)	O
,	O
conn	pointer
->	O
buf	pointer
+	O
3	int
)	O
;	O
else	O
{	O
printf	function
(	O
"%s\n"	pointer
,	O
_	O
(	O
"Cannot query Levenshtein distance.  Server responded:"	pointer
)	O
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
conn	pointer
->	O
buf	pointer
)	O
;	O
}	O
}	O
if	O
(	O
levenshtein_threshold	int
==	O
0	int
)	O
printf	function
(	O
_	O
(	O
"No distance configured\n"	pointer
)	O
)	O
;	O
else	O
printf	function
(	O
_	O
(	O
"Configured Levenshtein distance: %u\n"	pointer
)	O
,	O
levenshtein_threshold	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
p	pointer
;	O
levenshtein_threshold	int
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
script_error	function
(	O
_	O
(	O
"invalid number"	pointer
)	O
)	O
;	O
}	O
}	O
void	O
ds_show_db	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
ensure_connection	function
(	O
)	O
)	O
return	O
;	O
print_result	function
(	O
conn	pointer
->	O
db_result	pointer
)	O
;	O
}	O
void	O
ds_show_strat	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
if	O
(	O
ensure_connection	function
(	O
)	O
)	O
return	O
;	O
print_result	function
(	O
conn	pointer
->	O
strat_result	pointer
)	O
;	O
}	O
void	O
ds_show_info	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
const	O
char	O
*	O
dbname	pointer
;	O
if	O
(	O
argc	int
==	O
1	int
)	O
dbname	pointer
=	O
dico_url	struct
.	O
req	struct
.	O
database	pointer
?	O
dico_url	struct
.	O
req	struct
.	O
database	pointer
:	O
"!"	pointer
;	O
else	O
dbname	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
if	O
(	O
strcmp	function
(	O
dbname	pointer
,	O
"!"	pointer
)	O
==	O
0	int
)	O
printf	function
(	O
_	O
(	O
"Search all of the databases until a match is found,\n"	pointer
"and display all matches in that database.\n"	pointer
)	O
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
dbname	pointer
,	O
"*"	pointer
)	O
==	O
0	int
)	O
printf	function
(	O
_	O
(	O
"Search all of the databases and display all matches."	pointer
)	O
)	O
;	O
else	O
{	O
if	O
(	O
ensure_connection	function
(	O
)	O
)	O
return	O
;	O
dict_run_single_command	function
(	O
conn	pointer
,	O
"SHOW INFO"	pointer
,	O
dbname	pointer
,	O
"112"	pointer
)	O
;	O
}	O
}	O
void	O
ds_version	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
printf	function
(	O
"%s\n"	pointer
,	O
PACKAGE_STRING	pointer
)	O
;	O
}	O
