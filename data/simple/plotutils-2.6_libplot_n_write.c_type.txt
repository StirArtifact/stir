static	O
int	O
best_image_type	function
(	O
miPixel	struct
*	O
*	O
pixmap	pointer
,	O
int	O
width	array
,	O
int	O
height	int
)	O
;	O
int	O
_pl_n_maybe_output_image	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
data	pointer
->	O
page_number	int
==	O
1	int
)	O
_pl_n_write_pnm	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
return	O
true	int
;	O
}	O
void	O
_pl_n_write_pnm	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
type	enum
;	O
int	O
width	array
,	O
height	int
;	O
miPixel	struct
*	O
*	O
pixmap	pointer
;	O
width	array
=	O
_plotter	pointer
->	O
b_xn	int
;	O
height	int
=	O
_plotter	pointer
->	O
b_yn	int
;	O
pixmap	pointer
=	O
(	O
(	O
miCanvas	struct
*	O
)	O
(	O
_plotter	pointer
->	O
b_canvas	pointer
)	O
)	O
->	O
drawable	pointer
->	O
pixmap	pointer
;	O
type	enum
=	O
best_image_type	function
(	O
pixmap	pointer
,	O
width	array
,	O
height	int
)	O
;	O
switch	O
(	O
type	enum
)	O
{	O
case	O
0	int
:	O
_pl_n_write_pbm	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
break	O
;	O
case	O
1	int
:	O
_pl_n_write_pgm	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
default	O
:	O
_pl_n_write_ppm	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
break	O
;	O
}	O
}	O
void	O
_pl_n_write_pbm	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
i	int
,	O
j	int
;	O
bool	enum
portable	enum
=	O
_plotter	pointer
->	O
n_portable_output	enum
;	O
miPixel	struct
*	O
*	O
pixmap	pointer
=	O
(	O
(	O
miCanvas	struct
*	O
)	O
(	O
_plotter	pointer
->	O
b_canvas	pointer
)	O
)	O
->	O
drawable	pointer
->	O
pixmap	pointer
;	O
int	O
width	array
=	O
_plotter	pointer
->	O
b_xn	int
;	O
int	O
height	int
=	O
_plotter	pointer
->	O
b_yn	int
;	O
FILE	struct
*	O
fp	pointer
=	O
_plotter	pointer
->	O
data	pointer
->	O
outfp	pointer
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
fp	pointer
)	O
{	O
if	O
(	O
portable	enum
)	O
{	O
unsigned	O
char	O
linebuf	array
[	O
MAX_PBM_PIXELS_PER_LINE	int
]	O
;	O
int	O
pos	struct
=	O
0	int
;	O
fprintf	function
(	O
fp	pointer
,	O
"P1\n# CREATOR: GNU libplot drawing library, version %s\n%d %d\n"	pointer
,	O
PL_LIBPLOT_VER_STRING	pointer
,	O
width	array
,	O
height	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
height	int
;	O
j	int
++	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
width	array
;	O
i	int
++	O
)	O
{	O
if	O
(	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
.	O
u	union
.	O
rgb	array
[	O
0	int
]	O
==	O
0	int
)	O
linebuf	array
[	O
pos	struct
++	O
]	O
=	O
'1'	O
;	O
else	O
linebuf	array
[	O
pos	struct
++	O
]	O
=	O
'0'	O
;	O
if	O
(	O
pos	struct
>=	O
MAX_PBM_PIXELS_PER_LINE	int
||	O
i	int
==	O
(	O
width	array
-	O
1	int
)	O
)	O
{	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
linebuf	array
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
,	O
pos	struct
,	O
fp	pointer
)	O
;	O
putc	function
(	O
'\n'	O
,	O
fp	pointer
)	O
;	O
pos	struct
=	O
0	int
;	O
}	O
}	O
}	O
else	O
{	O
int	O
bitcount	int
,	O
bytecount	int
;	O
unsigned	O
char	O
outbyte	char
,	O
set	char
;	O
unsigned	O
char	O
*	O
rowbuf	pointer
;	O
fprintf	function
(	O
fp	pointer
,	O
"P4\n# CREATOR: GNU libplot drawing library, version %s\n%d %d\n"	pointer
,	O
PL_LIBPLOT_VER_STRING	pointer
,	O
width	array
,	O
height	int
)	O
;	O
rowbuf	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
(	O
(	O
width	array
+	O
7	int
)	O
/	O
8	int
)	O
*	O
sizeof	O
(	O
unsigned	O
char	O
)	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
height	int
;	O
j	int
++	O
)	O
{	O
bitcount	int
=	O
0	int
;	O
bytecount	int
=	O
0	int
;	O
outbyte	char
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
width	array
;	O
i	int
++	O
)	O
{	O
set	char
=	O
(	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
.	O
u	union
.	O
rgb	array
[	O
0	int
]	O
==	O
0	int
?	O
1	int
:	O
0	int
)	O
;	O
outbyte	char
=	O
(	O
outbyte	char
<<	O
1	int
)	O
|	O
set	char
;	O
bitcount	int
++	O
;	O
if	O
(	O
bitcount	int
==	O
8	int
)	O
{	O
rowbuf	pointer
[	O
bytecount	int
++	O
]	O
=	O
outbyte	char
;	O
outbyte	char
=	O
0	int
;	O
bitcount	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
bitcount	int
)	O
{	O
outbyte	char
=	O
(	O
outbyte	char
<<	O
(	O
8	int
-	O
bitcount	int
)	O
)	O
;	O
rowbuf	pointer
[	O
bytecount	int
++	O
]	O
=	O
outbyte	char
;	O
}	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
rowbuf	pointer
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
,	O
bytecount	int
,	O
fp	pointer
)	O
;	O
}	O
free	function
(	O
rowbuf	pointer
)	O
;	O
}	O
}	O
}	O
void	O
_pl_n_write_pgm	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
i	int
,	O
j	int
;	O
bool	enum
portable	enum
=	O
_plotter	pointer
->	O
n_portable_output	enum
;	O
miPixel	struct
*	O
*	O
pixmap	pointer
=	O
(	O
(	O
miCanvas	struct
*	O
)	O
(	O
_plotter	pointer
->	O
b_canvas	pointer
)	O
)	O
->	O
drawable	pointer
->	O
pixmap	pointer
;	O
int	O
width	array
=	O
_plotter	pointer
->	O
b_xn	int
;	O
int	O
height	int
=	O
_plotter	pointer
->	O
b_yn	int
;	O
FILE	struct
*	O
fp	pointer
=	O
_plotter	pointer
->	O
data	pointer
->	O
outfp	pointer
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
fp	pointer
)	O
{	O
if	O
(	O
portable	enum
)	O
{	O
unsigned	O
char	O
linebuf	array
[	O
4	int
*	O
MAX_PGM_PIXELS_PER_LINE	int
]	O
;	O
int	O
pos	struct
=	O
0	int
;	O
int	O
num_pixels	int
=	O
0	int
;	O
fprintf	function
(	O
fp	pointer
,	O
"P2\n# CREATOR: GNU libplot drawing library, version %s\n%d %d\n255\n"	pointer
,	O
PL_LIBPLOT_VER_STRING	pointer
,	O
width	array
,	O
height	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
height	int
;	O
j	int
++	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
width	array
;	O
i	int
++	O
)	O
{	O
FAST_PRINT	O
(	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
.	O
u	union
.	O
rgb	array
[	O
0	int
]	O
,	O
linebuf	array
,	O
pos	struct
)	O
num_pixels	int
++	O
;	O
if	O
(	O
num_pixels	int
>=	O
MAX_PGM_PIXELS_PER_LINE	int
||	O
i	int
==	O
(	O
width	array
-	O
1	int
)	O
)	O
{	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
linebuf	array
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
,	O
pos	struct
,	O
fp	pointer
)	O
;	O
putc	function
(	O
'\n'	O
,	O
fp	pointer
)	O
;	O
num_pixels	int
=	O
0	int
;	O
pos	struct
=	O
0	int
;	O
}	O
else	O
linebuf	array
[	O
pos	struct
++	O
]	O
=	O
' '	O
;	O
}	O
}	O
else	O
{	O
unsigned	O
char	O
*	O
rowbuf	pointer
;	O
rowbuf	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
width	array
*	O
sizeof	O
(	O
unsigned	O
char	O
)	O
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"P5\n# CREATOR: GNU libplot drawing library, version %s\n%d %d\n255\n"	pointer
,	O
PL_LIBPLOT_VER_STRING	pointer
,	O
width	array
,	O
height	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
height	int
;	O
j	int
++	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
width	array
;	O
i	int
++	O
)	O
rowbuf	pointer
[	O
i	int
]	O
=	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
.	O
u	union
.	O
rgb	array
[	O
0	int
]	O
;	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
rowbuf	pointer
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
,	O
width	array
,	O
fp	pointer
)	O
;	O
}	O
free	function
(	O
rowbuf	pointer
)	O
;	O
}	O
}	O
}	O
void	O
_pl_n_write_ppm	function
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
i	int
,	O
j	int
;	O
bool	enum
portable	enum
=	O
_plotter	pointer
->	O
n_portable_output	enum
;	O
miPixel	struct
*	O
*	O
pixmap	pointer
=	O
(	O
(	O
miCanvas	struct
*	O
)	O
(	O
_plotter	pointer
->	O
b_canvas	pointer
)	O
)	O
->	O
drawable	pointer
->	O
pixmap	pointer
;	O
int	O
width	array
=	O
_plotter	pointer
->	O
b_xn	int
;	O
int	O
height	int
=	O
_plotter	pointer
->	O
b_yn	int
;	O
FILE	struct
*	O
fp	pointer
=	O
_plotter	pointer
->	O
data	pointer
->	O
outfp	pointer
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
fp	pointer
)	O
{	O
if	O
(	O
portable	enum
)	O
{	O
unsigned	O
char	O
linebuf	array
[	O
4	int
*	O
MAX_PGM_PIXELS_PER_LINE	int
]	O
;	O
int	O
pos	struct
=	O
0	int
;	O
int	O
num_pixels	int
=	O
0	int
;	O
fprintf	function
(	O
fp	pointer
,	O
"P3\n# CREATOR: GNU libplot drawing library, version %s\n%d %d\n255\n"	pointer
,	O
PL_LIBPLOT_VER_STRING	pointer
,	O
width	array
,	O
height	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
height	int
;	O
j	int
++	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
width	array
;	O
i	int
++	O
)	O
{	O
FAST_PRINT	O
(	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
.	O
u	union
.	O
rgb	array
[	O
0	int
]	O
,	O
linebuf	array
,	O
pos	struct
)	O
linebuf	array
[	O
pos	struct
++	O
]	O
=	O
' '	O
;	O
FAST_PRINT	O
(	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
.	O
u	union
.	O
rgb	array
[	O
1	int
]	O
,	O
linebuf	array
,	O
pos	struct
)	O
linebuf	array
[	O
pos	struct
++	O
]	O
=	O
' '	O
;	O
FAST_PRINT	O
(	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
.	O
u	union
.	O
rgb	array
[	O
2	int
]	O
,	O
linebuf	array
,	O
pos	struct
)	O
num_pixels	int
++	O
;	O
if	O
(	O
num_pixels	int
>=	O
MAX_PPM_PIXELS_PER_LINE	int
||	O
i	int
==	O
(	O
width	array
-	O
1	int
)	O
)	O
{	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
linebuf	array
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
,	O
pos	struct
,	O
fp	pointer
)	O
;	O
putc	function
(	O
'\n'	O
,	O
fp	pointer
)	O
;	O
num_pixels	int
=	O
0	int
;	O
pos	struct
=	O
0	int
;	O
}	O
else	O
linebuf	array
[	O
pos	struct
++	O
]	O
=	O
' '	O
;	O
}	O
}	O
else	O
{	O
unsigned	O
char	O
*	O
rowbuf	pointer
;	O
int	O
component	int
;	O
fprintf	function
(	O
fp	pointer
,	O
"P6\n# CREATOR: GNU libplot drawing library, version %s\n%d %d\n255\n"	pointer
,	O
PL_LIBPLOT_VER_STRING	pointer
,	O
width	array
,	O
height	int
)	O
;	O
rowbuf	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
3	int
*	O
width	array
*	O
sizeof	O
(	O
unsigned	O
char	O
)	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
height	int
;	O
j	int
++	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
width	array
;	O
i	int
++	O
)	O
for	O
(	O
component	int
=	O
0	int
;	O
component	int
<	O
3	int
;	O
component	int
++	O
)	O
rowbuf	pointer
[	O
3	int
*	O
i	int
+	O
component	int
]	O
=	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
.	O
u	union
.	O
rgb	array
[	O
component	int
]	O
;	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
rowbuf	pointer
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
,	O
3	int
*	O
width	array
,	O
fp	pointer
)	O
;	O
}	O
free	function
(	O
rowbuf	pointer
)	O
;	O
}	O
}	O
}	O
static	O
int	O
best_image_type	function
(	O
miPixel	struct
*	O
*	O
pixmap	pointer
,	O
int	O
width	array
,	O
int	O
height	int
)	O
{	O
int	O
i	int
,	O
j	int
;	O
int	O
type	enum
=	O
0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
height	int
;	O
j	int
++	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
width	array
;	O
i	int
++	O
)	O
{	O
unsigned	O
char	O
red	int
,	O
green	int
,	O
blue	int
;	O
red	int
=	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
.	O
u	union
.	O
rgb	array
[	O
0	int
]	O
;	O
green	int
=	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
.	O
u	union
.	O
rgb	array
[	O
1	int
]	O
;	O
blue	int
=	O
pixmap	pointer
[	O
j	int
]	O
[	O
i	int
]	O
.	O
u	union
.	O
rgb	array
[	O
2	int
]	O
;	O
if	O
(	O
type	enum
==	O
0	int
)	O
{	O
if	O
(	O
!	O
(	O
(	O
red	int
==	O
(	O
unsigned	O
char	O
)	O
0	int
&&	O
green	int
==	O
(	O
unsigned	O
char	O
)	O
0	int
&&	O
blue	int
==	O
(	O
unsigned	O
char	O
)	O
0	int
)	O
||	O
(	O
red	int
==	O
(	O
unsigned	O
char	O
)	O
255	int
&&	O
green	int
==	O
(	O
unsigned	O
char	O
)	O
255	int
&&	O
blue	int
==	O
(	O
unsigned	O
char	O
)	O
255	int
)	O
)	O
)	O
{	O
if	O
(	O
red	int
==	O
green	int
&&	O
red	int
==	O
blue	int
)	O
type	enum
=	O
1	int
;	O
else	O
{	O
type	enum
=	O
2	int
;	O
return	O
type	enum
;	O
}	O
}	O
}	O
else	O
if	O
(	O
type	enum
==	O
1	int
)	O
{	O
if	O
(	O
red	int
!=	O
green	int
||	O
red	int
!=	O
blue	int
)	O
{	O
type	enum
=	O
2	int
;	O
return	O
type	enum
;	O
}	O
}	O
}	O
return	O
type	enum
;	O
}	O
