int	O
main	function
(	O
void	O
)	O
{	O
char	O
buf	pointer
[	O
200	int
]	O
,	O
keybuf	array
[	O
200	int
]	O
,	O
plainbuf	array
[	O
200	int
]	O
,	O
cipherbuf	array
[	O
200	int
]	O
,	O
comparebuf	array
[	O
200	int
]	O
,	O
ivbuf	array
[	O
200	int
]	O
;	O
char	O
keytxt	array
[	O
sizeof	O
(	O
buf	pointer
)	O
+	O
1	int
]	O
,	O
plaintxt	array
[	O
sizeof	O
(	O
buf	pointer
)	O
+	O
1	int
]	O
,	O
ciphertxt	array
[	O
sizeof	O
(	O
buf	pointer
)	O
+	O
1	int
]	O
;	O
uint8_t	char
key	pointer
[	O
BLOWFISH_MAXKEYBYTES	int
*	O
2	int
]	O
,	O
plain	array
[	O
100	int
]	O
,	O
cipher	array
[	O
100	int
]	O
,	O
compare	array
[	O
100	int
]	O
;	O
uint8_t	char
iv	array
[	O
BLOWFISH_BLOCKBYTES	int
]	O
;	O
int	O
keysz	int
,	O
plainsz	int
,	O
ciphersz	int
,	O
cskey	int
,	O
csiv	int
,	O
csplain	int
,	O
i	int
;	O
struct	O
blowfish_expandedkey	struct
ek	pointer
;	O
struct	O
blowfish_cbc_state	struct
cs	pointer
;	O
setvbuf	function
(	O
stdout	pointer
,	O
0	int
,	O
_IOLBF	int
,	O
BUFSIZ	int
)	O
;	O
buf	pointer
[	O
sizeof	O
(	O
buf	pointer
)	O
-	O
2	int
]	O
=	O
0	int
;	O
keytxt	array
[	O
sizeof	O
(	O
buf	pointer
)	O
]	O
=	O
0	int
;	O
plaintxt	array
[	O
sizeof	O
(	O
buf	pointer
)	O
]	O
=	O
0	int
;	O
ciphertxt	array
[	O
sizeof	O
(	O
buf	pointer
)	O
]	O
=	O
0	int
;	O
cskey	int
=	O
csiv	int
=	O
csplain	int
=	O
0	int
;	O
while	O
(	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
stdin	pointer
)	O
)	O
{	O
if	O
(	O
buf	pointer
[	O
sizeof	O
(	O
buf	pointer
)	O
-	O
2	int
]	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"line too long %s...\n"	pointer
,	O
buf	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
sscanf	function
(	O
buf	pointer
,	O
"ecb %s %s %s\n"	pointer
,	O
keytxt	array
,	O
plaintxt	array
,	O
ciphertxt	array
)	O
==	O
3	int
)	O
{	O
unhex	function
(	O
"ecb key"	pointer
,	O
keytxt	array
,	O
key	pointer
,	O
&	O
keysz	int
,	O
1	int
,	O
sizeof	O
(	O
key	pointer
)	O
)	O
;	O
unhex	function
(	O
"ecb plain"	pointer
,	O
plaintxt	array
,	O
plain	array
,	O
0	int
,	O
BLOWFISH_BLOCKBYTES	int
,	O
BLOWFISH_BLOCKBYTES	int
)	O
;	O
unhex	function
(	O
"ecb cipher"	pointer
,	O
ciphertxt	array
,	O
cipher	array
,	O
0	int
,	O
BLOWFISH_BLOCKBYTES	int
,	O
BLOWFISH_BLOCKBYTES	int
)	O
;	O
printf	function
(	O
"ecb %s %s %s\n"	pointer
,	O
tohex	function
(	O
key	pointer
,	O
keysz	int
,	O
keybuf	array
)	O
,	O
tohex	function
(	O
plain	array
,	O
BLOWFISH_BLOCKBYTES	int
,	O
plainbuf	array
)	O
,	O
tohex	function
(	O
cipher	array
,	O
BLOWFISH_BLOCKBYTES	int
,	O
cipherbuf	array
)	O
)	O
;	O
blowfish_loadkey	function
(	O
&	O
ek	pointer
,	O
key	pointer
,	O
keysz	int
)	O
;	O
blowfish_encrypt	function
(	O
&	O
ek	pointer
,	O
plain	array
,	O
compare	array
)	O
;	O
if	O
(	O
memcmp	function
(	O
cipher	array
,	O
compare	array
,	O
BLOWFISH_BLOCKBYTES	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"encryption mismatch - got %s\n"	pointer
,	O
tohex	function
(	O
compare	array
,	O
BLOWFISH_BLOCKBYTES	int
,	O
comparebuf	array
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
blowfish_decrypt	function
(	O
&	O
ek	pointer
,	O
cipher	array
,	O
compare	array
)	O
;	O
if	O
(	O
memcmp	function
(	O
plain	array
,	O
compare	array
,	O
BLOWFISH_BLOCKBYTES	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"decryption mismatch - got %s\n"	pointer
,	O
tohex	function
(	O
compare	array
,	O
BLOWFISH_BLOCKBYTES	int
,	O
comparebuf	array
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
sscanf	function
(	O
buf	pointer
,	O
"key %s\n"	pointer
,	O
keytxt	array
)	O
)	O
{	O
unhex	function
(	O
"key"	pointer
,	O
keytxt	array
,	O
key	pointer
,	O
&	O
keysz	int
,	O
1	int
,	O
sizeof	O
(	O
key	pointer
)	O
)	O
;	O
blowfish_loadkey	function
(	O
&	O
cs	pointer
.	O
ek	pointer
,	O
key	pointer
,	O
keysz	int
)	O
;	O
cskey	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
sscanf	function
(	O
buf	pointer
,	O
"iv %s\n"	pointer
,	O
keytxt	array
)	O
)	O
{	O
unhex	function
(	O
"iv"	pointer
,	O
keytxt	array
,	O
iv	array
,	O
0	int
,	O
BLOWFISH_BLOCKBYTES	int
,	O
BLOWFISH_BLOCKBYTES	int
)	O
;	O
csiv	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
sscanf	function
(	O
buf	pointer
,	O
"plain %s\n"	pointer
,	O
plaintxt	array
)	O
)	O
{	O
unhex	function
(	O
"plain"	pointer
,	O
plaintxt	array
,	O
plain	array
,	O
&	O
plainsz	int
,	O
0	int
,	O
sizeof	O
(	O
plain	array
)	O
)	O
;	O
csplain	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
sscanf	function
(	O
buf	pointer
,	O
"cbc %s\n"	pointer
,	O
ciphertxt	array
)	O
)	O
{	O
if	O
(	O
!	O
cskey	int
||	O
!	O
csiv	int
||	O
!	O
csplain	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"failed to specify%s%s%s\n"	pointer
,	O
cskey	int
?	O
""	pointer
:	O
" key"	pointer
,	O
csiv	int
?	O
""	pointer
:	O
" iv"	pointer
,	O
csplain	int
?	O
""	pointer
:	O
" plain"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
unhex	function
(	O
"cbc cipher"	pointer
,	O
ciphertxt	array
,	O
cipher	array
,	O
&	O
ciphersz	int
,	O
0	int
,	O
sizeof	O
(	O
cipher	array
)	O
)	O
;	O
printf	function
(	O
"key %s\niv %s\nplain %s\ncipher %s\n"	pointer
,	O
tohex	function
(	O
key	pointer
,	O
keysz	int
,	O
keybuf	array
)	O
,	O
tohex	function
(	O
iv	array
,	O
BLOWFISH_BLOCKBYTES	int
,	O
ivbuf	array
)	O
,	O
tohex	function
(	O
plain	array
,	O
plainsz	int
,	O
plainbuf	array
)	O
,	O
tohex	function
(	O
cipher	array
,	O
ciphersz	int
,	O
cipherbuf	array
)	O
)	O
;	O
if	O
(	O
plainsz	int
%	O
BLOWFISH_BLOCKBYTES	int
||	O
ciphersz	int
%	O
BLOWFISH_BLOCKBYTES	int
||	O
plainsz	int
!=	O
ciphersz	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"size mismatch plain=%d cipher=%d block=%d\n"	pointer
,	O
plainsz	int
,	O
ciphersz	int
,	O
BLOWFISH_BLOCKBYTES	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
blowfish_cbc_setiv	function
(	O
&	O
cs	pointer
,	O
iv	array
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
plainsz	int
;	O
i	int
+=	O
BLOWFISH_BLOCKBYTES	int
)	O
blowfish_cbc_decrypt	function
(	O
&	O
cs	pointer
,	O
cipher	array
+	O
i	int
,	O
compare	array
+	O
i	int
)	O
;	O
if	O
(	O
memcmp	function
(	O
plain	array
,	O
compare	array
,	O
BLOWFISH_BLOCKBYTES	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"decryption mismatch - got %s\n"	pointer
,	O
tohex	function
(	O
compare	array
,	O
plainsz	int
,	O
comparebuf	array
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
blowfish_cbc_setiv	function
(	O
&	O
cs	pointer
,	O
iv	array
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
plainsz	int
;	O
i	int
+=	O
BLOWFISH_BLOCKBYTES	int
)	O
blowfish_cbc_encrypt	function
(	O
&	O
cs	pointer
,	O
plain	array
+	O
i	int
,	O
compare	array
+	O
i	int
)	O
;	O
if	O
(	O
memcmp	function
(	O
cipher	array
,	O
compare	array
,	O
BLOWFISH_BLOCKBYTES	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"encryption mismatch - got %s\n"	pointer
,	O
tohex	function
(	O
compare	array
,	O
plainsz	int
,	O
comparebuf	array
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
buf	pointer
[	O
0	int
]	O
==	O
'#'	O
||	O
buf	pointer
[	O
0	int
]	O
==	O
'\n'	O
)	O
{	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"huh ? %s"	pointer
,	O
buf	pointer
)	O
;	O
}	O
}	O
if	O
(	O
ferror	function
(	O
stdin	pointer
)	O
)	O
{	O
perror	function
(	O
"stdin"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
