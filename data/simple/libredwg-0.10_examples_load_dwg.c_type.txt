static	O
int	O
help	function
(	O
void	O
)	O
;	O
int	O
verbosity	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
i	int
,	O
unsigned	O
int	O
*	O
opts	int
)	O
;	O
static	O
int	O
usage	function
(	O
void	O
)	O
{	O
printf	function
(	O
"\nUsage: load_dwg [-v[0-9]] DWGFILE\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
opt_version	function
(	O
void	O
)	O
{	O
printf	function
(	O
"load_dwg %s\n"	pointer
,	O
PACKAGE_VERSION	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
help	function
(	O
void	O
)	O
{	O
printf	function
(	O
"\nUsage: load_dwg [OPTION]... DWGFILE\n"	pointer
)	O
;	O
printf	function
(	O
"Example to add fingerprint elements to a DWG.\n"	pointer
"\n"	pointer
)	O
;	O
printf	function
(	O
"  -v[0-9], --verbose [0-9]  verbosity\n"	pointer
)	O
;	O
printf	function
(	O
"           --help           display this help and exit\n"	pointer
)	O
;	O
printf	function
(	O
"           --version        output version information and exit\n"	pointer
"\n"	pointer
)	O
;	O
printf	function
(	O
"GNU LibreDWG online manual: "	pointer
"<https://www.gnu.org/software/libredwg/>\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
add_line	function
(	O
double	O
x1	double
,	O
double	O
y1	double
,	O
double	O
x2	double
,	O
double	O
y2	double
)	O
{	O
(	O
void	O
)	O
x1	double
;	O
(	O
void	O
)	O
y1	double
;	O
(	O
void	O
)	O
x2	double
;	O
(	O
void	O
)	O
y2	double
;	O
}	O
static	O
void	O
add_circle	function
(	O
double	O
x	double
,	O
double	O
y	double
,	O
double	O
R	double
)	O
{	O
(	O
void	O
)	O
x	double
;	O
(	O
void	O
)	O
y	double
;	O
(	O
void	O
)	O
R	double
;	O
}	O
static	O
void	O
add_text	function
(	O
double	O
x	double
,	O
double	O
y	double
,	O
char	O
*	O
txt	struct
)	O
{	O
(	O
void	O
)	O
x	double
;	O
(	O
void	O
)	O
y	double
;	O
(	O
void	O
)	O
txt	struct
;	O
}	O
static	O
int	O
load_dwg	function
(	O
char	O
*	O
filename	pointer
,	O
unsigned	O
int	O
opts	int
)	O
{	O
BITCODE_BL	int
i	int
;	O
int	O
success	int
;	O
Dwg_Data	struct
dwg	pointer
;	O
memset	function
(	O
&	O
dwg	pointer
,	O
0	int
,	O
sizeof	O
(	O
Dwg_Data	struct
)	O
)	O
;	O
dwg	pointer
.	O
opts	int
=	O
opts	int
;	O
success	int
=	O
dwg_read_file	function
(	O
filename	pointer
,	O
&	O
dwg	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dwg	pointer
.	O
num_objects	int
;	O
i	int
++	O
)	O
{	O
Dwg_Entity_LINE	struct
*	O
line	pointer
;	O
Dwg_Entity_CIRCLE	struct
*	O
circle	pointer
;	O
Dwg_Entity_TEXT	struct
*	O
text	pointer
;	O
switch	O
(	O
dwg	pointer
.	O
object	pointer
[	O
i	int
]	O
.	O
type	short
)	O
{	O
case	O
DWG_TYPE_LINE	int
:	O
line	pointer
=	O
dwg	pointer
.	O
object	pointer
[	O
i	int
]	O
.	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
LINE	pointer
;	O
add_line	function
(	O
line	pointer
->	O
start	struct
.	O
x	double
,	O
line	pointer
->	O
end	struct
.	O
x	double
,	O
line	pointer
->	O
start	struct
.	O
y	double
,	O
line	pointer
->	O
end	struct
.	O
y	double
)	O
;	O
break	O
;	O
case	O
DWG_TYPE_CIRCLE	int
:	O
circle	pointer
=	O
dwg	pointer
.	O
object	pointer
[	O
i	int
]	O
.	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
CIRCLE	pointer
;	O
add_circle	function
(	O
circle	pointer
->	O
center	struct
.	O
x	double
,	O
circle	pointer
->	O
center	struct
.	O
y	double
,	O
circle	pointer
->	O
radius	double
)	O
;	O
break	O
;	O
case	O
DWG_TYPE_TEXT	int
:	O
text	pointer
=	O
dwg	pointer
.	O
object	pointer
[	O
i	int
]	O
.	O
tio	union
.	O
entity	long
->	O
tio	union
.	O
TEXT	pointer
;	O
add_text	function
(	O
text	pointer
->	O
insertion_pt	struct
.	O
x	double
,	O
text	pointer
->	O
insertion_pt	struct
.	O
y	double
,	O
text	pointer
->	O
text_value	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
dwg_free	function
(	O
&	O
dwg	pointer
)	O
;	O
return	O
success	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
i	int
=	O
1	int
;	O
unsigned	O
int	O
opts	int
=	O
1	int
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
return	O
usage	function
(	O
)	O
;	O
if	O
(	O
argc	int
>	O
2	int
&&	O
(	O
!	O
strcmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"--verbose"	pointer
)	O
||	O
!	O
strncmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"-v"	pointer
,	O
2	int
)	O
)	O
)	O
{	O
int	O
num_args	int
=	O
verbosity	function
(	O
argc	int
,	O
argv	pointer
,	O
i	int
,	O
&	O
opts	int
)	O
;	O
argc	int
-=	O
num_args	int
;	O
i	int
+=	O
num_args	int
;	O
}	O
if	O
(	O
argc	int
>	O
1	int
&&	O
!	O
strcmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"--help"	pointer
)	O
)	O
return	O
help	function
(	O
)	O
;	O
if	O
(	O
argc	int
>	O
1	int
&&	O
!	O
strcmp	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"--version"	pointer
)	O
)	O
return	O
opt_version	function
(	O
)	O
;	O
REQUIRE_INPUT_FILE_ARG	O
(	O
argc	int
)	O
;	O
load_dwg	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
opts	int
)	O
;	O
return	O
0	int
;	O
}	O
