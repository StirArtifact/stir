static	O
enum	O
MHD_StatusCode	enum
suspend_action	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Request	struct
*	O
request	pointer
)	O
{	O
(	O
void	O
)	O
cls	pointer
;	O
struct	O
MHD_Connection	struct
*	O
connection	pointer
=	O
request	pointer
->	O
connection	pointer
;	O
struct	O
MHD_Daemon	struct
*	O
daemon	function
=	O
connection	pointer
->	O
daemon	function
;	O
MHD_mutex_lock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
if	O
(	O
connection	pointer
->	O
resuming	bool
)	O
{	O
connection	pointer
->	O
resuming	bool
=	O
false	int
;	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
return	O
MHD_SC_OK	int
;	O
}	O
if	O
(	O
daemon	function
->	O
threading_mode	enum
!=	O
MHD_TM_THREAD_PER_CONNECTION	int
)	O
{	O
if	O
(	O
connection	pointer
->	O
connection_timeout	int
==	O
daemon	function
->	O
connection_default_timeout	long
)	O
XDLL_remove	O
(	O
daemon	function
->	O
normal_timeout_head	pointer
,	O
daemon	function
->	O
normal_timeout_tail	pointer
,	O
connection	pointer
)	O
;	O
else	O
XDLL_remove	O
(	O
daemon	function
->	O
manual_timeout_head	pointer
,	O
daemon	function
->	O
manual_timeout_tail	pointer
,	O
connection	pointer
)	O
;	O
}	O
DLL_remove	O
(	O
daemon	function
->	O
connections_head	pointer
,	O
daemon	function
->	O
connections_tail	pointer
,	O
connection	pointer
)	O
;	O
mhd_assert	O
(	O
!	O
connection	pointer
->	O
suspended	enum
)	O
;	O
DLL_insert	O
(	O
daemon	function
->	O
suspended_connections_head	pointer
,	O
daemon	function
->	O
suspended_connections_tail	pointer
,	O
connection	pointer
)	O
;	O
connection	pointer
->	O
suspended	enum
=	O
true	int
;	O
if	O
(	O
MHD_ELS_EPOLL	int
==	O
daemon	function
->	O
event_loop_syscall	enum
)	O
{	O
if	O
(	O
0	int
!=	O
(	O
connection	pointer
->	O
epoll_state	enum
&	O
MHD_EPOLL_STATE_IN_EREADY_EDLL	int
)	O
)	O
{	O
EDLL_remove	O
(	O
daemon	function
->	O
eready_head	pointer
,	O
daemon	function
->	O
eready_tail	pointer
,	O
connection	pointer
)	O
;	O
connection	pointer
->	O
epoll_state	enum
&=	O
~	O
MHD_EPOLL_STATE_IN_EREADY_EDLL	int
;	O
}	O
if	O
(	O
0	int
!=	O
(	O
connection	pointer
->	O
epoll_state	enum
&	O
MHD_EPOLL_STATE_IN_EPOLL_SET	int
)	O
)	O
{	O
if	O
(	O
0	int
!=	O
epoll_ctl	function
(	O
daemon	function
->	O
epoll_fd	int
,	O
EPOLL_CTL_DEL	int
,	O
connection	pointer
->	O
socket_fd	int
,	O
NULL	O
)	O
)	O
MHD_PANIC	O
(	O
_	O
(	O
"Failed to remove FD from epoll set\n"	pointer
)	O
)	O
;	O
connection	pointer
->	O
epoll_state	enum
&=	O
~	O
MHD_EPOLL_STATE_IN_EPOLL_SET	int
;	O
}	O
connection	pointer
->	O
epoll_state	enum
|=	O
MHD_EPOLL_STATE_SUSPENDED	int
;	O
}	O
MHD_mutex_unlock_chk_	O
(	O
&	O
daemon	function
->	O
cleanup_connection_mutex	union
)	O
;	O
return	O
MHD_SC_OK	int
;	O
}	O
const	O
struct	O
MHD_Action	struct
*	O
MHD_action_suspend	function
(	O
void	O
)	O
{	O
static	O
const	O
struct	O
MHD_Action	struct
suspend	struct
=	O
{	O
.	O
action	pointer
=	O
&	O
suspend_action	function
,	O
.	O
action_cls	pointer
=	O
NULL	O
}	O
;	O
return	O
&	O
suspend	struct
;	O
}	O
