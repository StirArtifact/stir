EUint32	long
EDMAPROC	O
edma_print	function
(	O
EPChar	pointer
a	pointer
)	O
{	O
printf	function
(	O
"%s\n"	pointer
,	O
a	pointer
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_printf	function
(	O
EPChar	pointer
f	pointer
,	O
...	O
)	O
{	O
va_list	pointer
p	pointer
;	O
EChar	char
msg	pointer
[	O
MSG_LEN	int
]	O
;	O
va_start	O
(	O
p	pointer
,	O
f	pointer
)	O
;	O
vsnprintf	function
(	O
msg	pointer
,	O
MSG_LEN	int
,	O
f	pointer
,	O
p	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
msg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_log	function
(	O
EPChar	pointer
f	pointer
,	O
...	O
)	O
{	O
va_list	pointer
p	pointer
;	O
EChar	char
msg	pointer
[	O
MSG_LEN	int
]	O
;	O
if	O
(	O
GVar	pointer
->	O
DebugLevel	long
>	O
DEBUG_LEVEL_LOG	int
)	O
return	O
0	int
;	O
va_start	O
(	O
p	pointer
,	O
f	pointer
)	O
;	O
vsnprintf	function
(	O
msg	pointer
,	O
MSG_LEN	int
,	O
f	pointer
,	O
p	pointer
)	O
;	O
printf	function
(	O
"LOG: %s\n"	pointer
,	O
msg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_printf_obj	function
(	O
OBJID	long
IdObj	long
,	O
EPChar	pointer
f	pointer
,	O
...	O
)	O
{	O
va_list	pointer
p	pointer
;	O
EChar	char
msg	pointer
[	O
MSG_LEN	int
]	O
;	O
EChar	char
msg1	array
[	O
MSG_LEN	int
]	O
;	O
if	O
(	O
(	O
edma_check_obj_id	function
(	O
IdObj	long
,	O
"edma_printf_obj"	pointer
)	O
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
va_start	O
(	O
p	pointer
,	O
f	pointer
)	O
;	O
snprintf	function
(	O
msg1	array
,	O
MSG_LEN	int
,	O
"(%s)"	pointer
,	O
gClass	O
[	O
gObj	O
[	O
IdObj	long
]	O
->	O
IdClass	long
]	O
->	O
ClassName	array
)	O
;	O
vsnprintf	function
(	O
msg	pointer
,	O
MSG_LEN	int
,	O
f	pointer
,	O
p	pointer
)	O
;	O
strncat	function
(	O
msg1	array
,	O
msg	pointer
,	O
MSG_LEN	int
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
msg1	array
)	O
;	O
va_end	O
(	O
p	pointer
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_printf_err	function
(	O
EPChar	pointer
f	pointer
,	O
...	O
)	O
{	O
va_list	pointer
p	pointer
;	O
EChar	char
msg	pointer
[	O
MSG_LEN	int
]	O
;	O
EChar	char
msg1	array
[	O
MSG_LEN	int
]	O
;	O
va_start	O
(	O
p	pointer
,	O
f	pointer
)	O
;	O
strncpy	function
(	O
msg1	array
,	O
"**ERROR**"	pointer
,	O
MSG_LEN	int
)	O
;	O
vsnprintf	function
(	O
msg	pointer
,	O
MSG_LEN	int
,	O
f	pointer
,	O
p	pointer
)	O
;	O
strncat	function
(	O
msg1	array
,	O
msg	pointer
,	O
MSG_LEN	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
msg1	array
)	O
;	O
va_end	O
(	O
p	pointer
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_printf_dbg	function
(	O
EUint32	long
l	long
,	O
OBJID	long
IdObj	long
,	O
EPChar	pointer
f	pointer
,	O
...	O
)	O
{	O
va_list	pointer
p	pointer
;	O
EChar	char
msg	pointer
[	O
MSG_LEN	int
]	O
;	O
EChar	char
msg1	array
[	O
MSG_LEN	int
]	O
;	O
if	O
(	O
l	long
>=	O
GVar	pointer
->	O
DebugLevel	long
)	O
{	O
va_start	O
(	O
p	pointer
,	O
f	pointer
)	O
;	O
if	O
(	O
IdObj	long
==	O
-	O
1	int
)	O
strncpy	function
(	O
msg1	array
,	O
"(DEBUG-System)"	pointer
,	O
MSG_LEN	int
)	O
;	O
else	O
snprintf	function
(	O
msg1	array
,	O
MSG_LEN	int
,	O
"(DEBUG-%s)"	pointer
,	O
gClass	O
[	O
gObj	O
[	O
IdObj	long
]	O
->	O
IdClass	long
]	O
->	O
ClassName	array
)	O
;	O
vsnprintf	function
(	O
msg	pointer
,	O
MSG_LEN	int
,	O
f	pointer
,	O
p	pointer
)	O
;	O
strncat	function
(	O
msg1	array
,	O
msg	pointer
,	O
MSG_LEN	int
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
msg1	array
)	O
;	O
va_end	O
(	O
p	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
edma_set_app_name	function
(	O
EPChar	pointer
n	pointer
)	O
{	O
if	O
(	O
n	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_set_app_name] Invalid Application Name"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
strncpy	function
(	O
AppName	array
,	O
n	pointer
,	O
EDMA_GENERAL_ID_LEN	int
)	O
;	O
return	O
0	int
;	O
}	O
EPChar	pointer
EDMAPROC	O
edma_get_system_path	function
(	O
EPChar	pointer
c	pointer
)	O
{	O
return	O
strdup	function
(	O
GVar	pointer
->	O
SystemPath	array
)	O
;	O
}	O
EUint32	long
EDMAPROC	O
edma_set_debug_level	function
(	O
EUint32	long
l	long
)	O
{	O
EUint32	long
o	long
;	O
o	long
=	O
GVar	pointer
->	O
DebugLevel	long
;	O
GVar	pointer
->	O
DebugLevel	long
=	O
l	long
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_buffer_alloc	function
(	O
EDMAT_BUFFER	struct
*	O
Buf	pointer
,	O
EUint32	long
Size	long
)	O
{	O
if	O
(	O
Buf	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_buffer_alloc] Invalid target buffer"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
Buf	pointer
->	O
h	long
=	O
edma_palloc	function
(	O
Size	long
)	O
;	O
if	O
(	O
Buf	pointer
->	O
h	long
==	O
0	int
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_buffer_alloc] Can't allocate buffer"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
Buf	pointer
->	O
dat	pointer
=	O
(	O
EPVoid	pointer
)	O
edma_pget	function
(	O
Buf	pointer
->	O
h	long
)	O
;	O
Buf	pointer
->	O
Size	long
=	O
Size	long
;	O
memset	function
(	O
Buf	pointer
->	O
dat	pointer
,	O
0	int
,	O
Size	long
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_buffer_free	function
(	O
EDMAT_BUFFER	struct
*	O
Buf	pointer
)	O
{	O
if	O
(	O
Buf	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_buffer_free] Invalid target buffer"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
Buf	pointer
->	O
Size	long
!=	O
0	int
)	O
edma_pfree	function
(	O
Buf	pointer
->	O
h	long
,	O
Buf	pointer
->	O
dat	pointer
)	O
;	O
Buf	pointer
->	O
Size	long
=	O
0	int
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_buffer_realloc	function
(	O
EDMAT_BUFFER	struct
*	O
Buf	pointer
,	O
EUint32	long
Size	long
)	O
{	O
if	O
(	O
Buf	pointer
==	O
NULL	O
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_buffer_realloc] Invalid target buffer"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
Buf	pointer
->	O
h	long
=	O
edma_prealloc	function
(	O
Buf	pointer
->	O
h	long
,	O
Size	long
)	O
;	O
if	O
(	O
Buf	pointer
->	O
h	long
==	O
0	int
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_buffer_realloc] Can't reallocate buffer"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
Buf	pointer
->	O
dat	pointer
=	O
(	O
EPVoid	pointer
)	O
edma_pget	function
(	O
Buf	pointer
->	O
h	long
)	O
;	O
Buf	pointer
->	O
Size	long
=	O
Size	long
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAINLINE	O
edma_dict_map_string	function
(	O
EDMA_DICT	pointer
d	pointer
,	O
EPChar	pointer
str	pointer
)	O
{	O
ESint32	long
i	long
,	O
hash	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
str	pointer
[	O
i	long
]	O
!=	O
0	int
;	O
i	long
++	O
)	O
hash	long
+=	O
str	pointer
[	O
i	long
]	O
;	O
hash	long
=	O
(	O
EUint32	long
)	O
(	O
hash	long
%	O
d	pointer
->	O
size	long
)	O
;	O
return	O
hash	long
;	O
}	O
EDMA_DICT	pointer
EDMAPROC	O
edma_dict_new	function
(	O
ESint32	long
size	long
)	O
{	O
HMEM	long
h	long
;	O
EDMA_DICT	pointer
the_dict	pointer
;	O
ESint32	long
i	long
;	O
if	O
(	O
size	long
<=	O
0	int
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
h	long
=	O
edma_palloc	function
(	O
sizeof	O
(	O
EDMA_DICT_T	struct
)	O
)	O
)	O
==	O
(	O
HMEM	long
)	O
0	int
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_dict_new] Can't allocate memory "	pointer
"to create Dictionary"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
the_dict	pointer
=	O
edma_pget	function
(	O
h	long
)	O
;	O
the_dict	pointer
->	O
h_myself	long
=	O
h	long
;	O
if	O
(	O
(	O
h	long
=	O
edma_palloc	function
(	O
sizeof	O
(	O
EDMA_DICT_ITEM	struct
)	O
*	O
size	long
*	O
2	int
)	O
)	O
==	O
(	O
HMEM	long
)	O
0	int
)	O
{	O
edma_printf_err	function
(	O
"%s"	pointer
,	O
"[edma_dict_new] Can't allocate memory "	pointer
"for dictionary entries"	pointer
)	O
;	O
edma_pfree	function
(	O
the_dict	pointer
->	O
h_myself	long
,	O
the_dict	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
the_dict	pointer
->	O
h_entry	long
=	O
h	long
;	O
the_dict	pointer
->	O
entry	pointer
=	O
edma_pget	function
(	O
h	long
)	O
;	O
memset	function
(	O
the_dict	pointer
->	O
entry	pointer
,	O
0	int
,	O
sizeof	O
(	O
EDMA_DICT_ITEM	struct
)	O
*	O
2	int
*	O
size	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
size	long
*	O
2	int
;	O
i	long
++	O
)	O
the_dict	pointer
->	O
entry	pointer
[	O
i	long
]	O
.	O
next	long
=	O
-	O
1	int
;	O
the_dict	pointer
->	O
size	long
=	O
size	long
;	O
the_dict	pointer
->	O
over_size	long
=	O
size	long
;	O
the_dict	pointer
->	O
over_indx	long
=	O
0	int
;	O
return	O
the_dict	pointer
;	O
}	O
ESint32	long
EDMAPROC	O
edma_dict_free	function
(	O
EDMA_DICT	pointer
d	pointer
)	O
{	O
if	O
(	O
!	O
d	pointer
)	O
return	O
-	O
1	int
;	O
edma_pfree	function
(	O
d	pointer
->	O
h_entry	long
,	O
d	pointer
->	O
entry	pointer
)	O
;	O
edma_pfree	function
(	O
d	pointer
->	O
h_myself	long
,	O
d	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_dict_add_entry	function
(	O
EDMA_DICT	pointer
d	pointer
,	O
EPChar	pointer
name	pointer
,	O
ESint32	long
indx	long
)	O
{	O
EUint32	long
pos	long
;	O
if	O
(	O
!	O
d	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
name	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
edma_dict_get_index	function
(	O
d	pointer
,	O
name	pointer
)	O
>=	O
0	int
)	O
{	O
edma_log	function
(	O
"[edma_dict_add_entry] WARNNING: Entry '%s' already exists"	pointer
,	O
name	pointer
)	O
;	O
}	O
pos	long
=	O
edma_dict_map_string	function
(	O
d	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
data	pointer
==	O
NULL	O
)	O
{	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
data	pointer
=	O
name	pointer
;	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
indx	long
=	O
indx	long
;	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
next	long
=	O
-	O
1	int
;	O
}	O
else	O
{	O
while	O
(	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
next	long
>=	O
0	int
)	O
pos	long
=	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
next	long
;	O
d	pointer
->	O
entry	pointer
[	O
d	pointer
->	O
size	long
+	O
d	pointer
->	O
over_indx	long
]	O
.	O
data	pointer
=	O
name	pointer
;	O
d	pointer
->	O
entry	pointer
[	O
d	pointer
->	O
size	long
+	O
d	pointer
->	O
over_indx	long
]	O
.	O
indx	long
=	O
indx	long
;	O
d	pointer
->	O
entry	pointer
[	O
d	pointer
->	O
size	long
+	O
d	pointer
->	O
over_indx	long
]	O
.	O
next	long
=	O
-	O
1	int
;	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
next	long
=	O
d	pointer
->	O
size	long
+	O
d	pointer
->	O
over_indx	long
;	O
d	pointer
->	O
over_indx	long
++	O
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_dict_get_index	function
(	O
EDMA_DICT	pointer
d	pointer
,	O
EPChar	pointer
name	pointer
)	O
{	O
ESint32	long
found	long
;	O
ESint32	long
pos	long
;	O
if	O
(	O
!	O
d	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
name	pointer
)	O
return	O
-	O
1	int
;	O
pos	long
=	O
edma_dict_map_string	function
(	O
d	pointer
,	O
name	pointer
)	O
;	O
found	long
=	O
-	O
1	int
;	O
do	O
{	O
if	O
(	O
(	O
pos	long
==	O
-	O
1	int
)	O
||	O
(	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
data	pointer
==	O
NULL	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
strcmp	function
(	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
data	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
found	long
=	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
indx	long
;	O
break	O
;	O
}	O
pos	long
=	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
next	long
;	O
if	O
(	O
pos	long
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
}	O
while	O
(	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
data	pointer
!=	O
NULL	O
)	O
;	O
return	O
found	long
;	O
}	O
ESint32	long
EDMAPROC	O
edma_dict_get_next_index	function
(	O
EDMA_DICT	pointer
d	pointer
,	O
EPChar	pointer
name	pointer
,	O
ESint32	long
*	O
cpos	pointer
)	O
{	O
ESint32	long
found	long
;	O
ESint32	long
pos	long
;	O
if	O
(	O
!	O
d	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
name	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
*	O
cpos	pointer
<	O
0	int
)	O
pos	long
=	O
edma_dict_map_string	function
(	O
d	pointer
,	O
name	pointer
)	O
;	O
else	O
pos	long
=	O
d	pointer
->	O
entry	pointer
[	O
*	O
cpos	pointer
]	O
.	O
next	long
;	O
found	long
=	O
-	O
1	int
;	O
do	O
{	O
if	O
(	O
(	O
pos	long
==	O
-	O
1	int
)	O
||	O
(	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
data	pointer
==	O
NULL	O
)	O
)	O
{	O
*	O
cpos	pointer
=	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
strcmp	function
(	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
data	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
found	long
=	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
indx	long
;	O
break	O
;	O
}	O
pos	long
=	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
next	long
;	O
if	O
(	O
pos	long
==	O
-	O
1	int
)	O
{	O
*	O
cpos	pointer
=	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
while	O
(	O
d	pointer
->	O
entry	pointer
[	O
pos	long
]	O
.	O
data	pointer
!=	O
NULL	O
)	O
;	O
*	O
cpos	pointer
=	O
pos	long
;	O
return	O
found	long
;	O
}	O
