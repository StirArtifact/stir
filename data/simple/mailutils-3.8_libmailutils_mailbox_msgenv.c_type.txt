static	O
int	O
get_received_date	function
(	O
mu_message_t	pointer
msg	pointer
,	O
struct	O
tm	struct
*	O
tm	struct
,	O
struct	O
mu_timezone	struct
*	O
tz	pointer
)	O
{	O
mu_header_t	pointer
hdr	pointer
;	O
int	O
rc	int
;	O
char	O
*	O
val	array
;	O
char	O
*	O
p	pointer
;	O
rc	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_aget_value_unfold_n	function
(	O
hdr	pointer
,	O
MU_HEADER_RECEIVED	pointer
,	O
-	O
1	int
,	O
&	O
val	array
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
MU_ERR_NOENT	O
;	O
p	pointer
=	O
strchr	function
(	O
val	array
,	O
';'	O
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
p	pointer
=	O
mu_str_skip_class	function
(	O
p	pointer
+	O
1	int
,	O
MU_CTYPE_SPACE	int
)	O
;	O
if	O
(	O
*	O
p	pointer
&&	O
mu_scan_datetime	function
(	O
p	pointer
,	O
MU_DATETIME_SCAN_RFC822	pointer
,	O
tm	struct
,	O
tz	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
rc	int
=	O
0	int
;	O
}	O
free	function
(	O
val	array
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
message_envelope_date	function
(	O
mu_envelope_t	pointer
envelope	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	int
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_envelope_get_owner	function
(	O
envelope	pointer
)	O
;	O
size_t	long
n	long
;	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
||	O
len	int
==	O
0	int
)	O
{	O
n	long
=	O
MU_DATETIME_FROM_LENGTH	int
;	O
}	O
else	O
{	O
struct	O
tm	struct
tm	struct
;	O
struct	O
mu_timezone	struct
tz	pointer
;	O
time_t	long
t	long
;	O
char	O
tmpbuf	array
[	O
MU_DATETIME_FROM_LENGTH	int
+	O
1	int
]	O
;	O
mu_stream_t	pointer
str	pointer
;	O
mu_off_t	long
size	long
;	O
rc	int
=	O
get_received_date	function
(	O
msg	pointer
,	O
&	O
tm	struct
,	O
&	O
tz	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
t	long
=	O
mu_datetime_to_utc	function
(	O
&	O
tm	struct
,	O
&	O
tz	pointer
)	O
;	O
rc	int
=	O
mu_fixed_memory_stream_create	function
(	O
&	O
str	pointer
,	O
tmpbuf	array
,	O
sizeof	O
(	O
tmpbuf	array
)	O
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_c_streamftime	function
(	O
str	pointer
,	O
MU_DATETIME_FROM	pointer
,	O
gmtime	function
(	O
&	O
t	long
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_unref	function
(	O
str	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
mu_stream_seek	function
(	O
str	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_stream_unref	function
(	O
str	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
size	long
>	O
len	int
)	O
size	long
=	O
len	int
;	O
mu_stream_seek	function
(	O
str	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_read	function
(	O
str	pointer
,	O
buf	pointer
,	O
size	long
,	O
&	O
n	long
)	O
;	O
if	O
(	O
n	long
<	O
len	int
)	O
buf	pointer
[	O
n	long
]	O
=	O
0	int
;	O
mu_stream_unref	function
(	O
str	pointer
)	O
;	O
}	O
if	O
(	O
pnwrite	pointer
)	O
*	O
pnwrite	pointer
=	O
n	long
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
message_envelope_sender	function
(	O
mu_envelope_t	pointer
envelope	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
len	int
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
mu_envelope_get_owner	function
(	O
envelope	pointer
)	O
;	O
mu_header_t	pointer
header	pointer
;	O
int	O
status	int
;	O
const	O
char	O
*	O
sender	pointer
;	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
=	O
NULL	O
;	O
static	O
char	O
*	O
hdrnames	array
[	O
]	O
=	O
{	O
"Return-Path"	pointer
,	O
"X-Envelope-Sender"	pointer
,	O
"X-Envelope-From"	pointer
,	O
"X-Original-Sender"	pointer
,	O
"From"	pointer
,	O
NULL	O
}	O
;	O
mu_address_t	pointer
address	array
=	O
NULL	O
;	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_header_sget_firstof	function
(	O
header	pointer
,	O
hdrnames	array
,	O
&	O
sender	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
auth	pointer
=	O
mu_get_auth_by_uid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
if	O
(	O
!	O
auth	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
sender	pointer
=	O
auth	pointer
->	O
name	pointer
;	O
}	O
status	int
=	O
mu_address_create	function
(	O
&	O
address	array
,	O
sender	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_address_sget_email	function
(	O
address	array
,	O
1	int
,	O
&	O
sender	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
sender	pointer
==	O
NULL	O
)	O
status	int
=	O
MU_ERR_NOENT	O
;	O
else	O
{	O
size_t	long
n	long
=	O
strlen	function
(	O
sender	pointer
)	O
;	O
if	O
(	O
buf	pointer
&&	O
len	int
>	O
0	int
)	O
{	O
len	int
--	O
;	O
n	long
=	O
(	O
n	long
<	O
len	int
)	O
?	O
n	long
:	O
len	int
;	O
memcpy	function
(	O
buf	pointer
,	O
sender	pointer
,	O
n	long
)	O
;	O
buf	pointer
[	O
n	long
]	O
=	O
'\0'	O
;	O
}	O
if	O
(	O
pnwrite	pointer
)	O
*	O
pnwrite	pointer
=	O
n	long
;	O
}	O
}	O
mu_address_destroy	function
(	O
&	O
address	array
)	O
;	O
}	O
if	O
(	O
auth	pointer
)	O
mu_auth_data_free	function
(	O
auth	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_message_get_envelope	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_envelope_t	pointer
*	O
penvelope	pointer
)	O
{	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
penvelope	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
msg	pointer
->	O
envelope	pointer
==	O
NULL	O
)	O
{	O
mu_envelope_t	pointer
envelope	pointer
;	O
int	O
status	int
=	O
mu_envelope_create	function
(	O
&	O
envelope	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
return	O
status	int
;	O
mu_envelope_set_sender	function
(	O
envelope	pointer
,	O
message_envelope_sender	function
,	O
msg	pointer
)	O
;	O
mu_envelope_set_date	function
(	O
envelope	pointer
,	O
message_envelope_date	function
,	O
msg	pointer
)	O
;	O
msg	pointer
->	O
envelope	pointer
=	O
envelope	pointer
;	O
}	O
*	O
penvelope	pointer
=	O
msg	pointer
->	O
envelope	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_message_set_envelope	function
(	O
mu_message_t	pointer
msg	pointer
,	O
mu_envelope_t	pointer
envelope	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
if	O
(	O
msg	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
msg	pointer
->	O
owner	pointer
!=	O
owner	pointer
)	O
return	O
EACCES	int
;	O
if	O
(	O
msg	pointer
->	O
envelope	pointer
)	O
mu_envelope_destroy	function
(	O
&	O
msg	pointer
->	O
envelope	pointer
,	O
msg	pointer
)	O
;	O
msg	pointer
->	O
envelope	pointer
=	O
envelope	pointer
;	O
msg	pointer
->	O
flags	int
|=	O
MESSAGE_MODIFIED	int
;	O
return	O
0	int
;	O
}	O
