static	O
struct	O
linked_list	struct
*	O
deref_linked_list	function
(	O
struct	O
linked_list	struct
*	O
*	O
plist	pointer
)	O
{	O
if	O
(	O
!	O
*	O
plist	pointer
)	O
{	O
struct	O
linked_list	struct
*	O
list	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
list	pointer
)	O
)	O
;	O
list	pointer
->	O
free_data	pointer
=	O
NULL	O
;	O
list	pointer
->	O
head	pointer
=	O
list	pointer
->	O
tail	pointer
=	O
NULL	O
;	O
*	O
plist	pointer
=	O
list	pointer
;	O
}	O
return	O
*	O
plist	pointer
;	O
}	O
struct	O
linked_list	struct
*	O
linked_list_create	function
(	O
linked_list_free_data_fp	pointer
fun	pointer
)	O
{	O
struct	O
linked_list	struct
*	O
list	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
list	pointer
)	O
)	O
;	O
list	pointer
->	O
free_data	pointer
=	O
fun	pointer
;	O
list	pointer
->	O
head	pointer
=	O
list	pointer
->	O
tail	pointer
=	O
NULL	O
;	O
return	O
list	pointer
;	O
}	O
void	O
linked_list_append	function
(	O
struct	O
linked_list	struct
*	O
*	O
plist	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
linked_list	struct
*	O
list	pointer
=	O
deref_linked_list	function
(	O
plist	pointer
)	O
;	O
struct	O
linked_list_entry	struct
*	O
entry	pointer
=	O
xmalloc	function
(	O
sizeof	O
(	O
*	O
entry	pointer
)	O
)	O
;	O
entry	pointer
->	O
list	pointer
=	O
list	pointer
;	O
entry	pointer
->	O
data	pointer
=	O
data	pointer
;	O
entry	pointer
->	O
next	pointer
=	O
NULL	O
;	O
entry	pointer
->	O
prev	pointer
=	O
list	pointer
->	O
tail	pointer
;	O
if	O
(	O
list	pointer
->	O
tail	pointer
)	O
list	pointer
->	O
tail	pointer
->	O
next	pointer
=	O
entry	pointer
;	O
else	O
list	pointer
->	O
head	pointer
=	O
entry	pointer
;	O
list	pointer
->	O
tail	pointer
=	O
entry	pointer
;	O
}	O
void	O
linked_list_destroy	function
(	O
struct	O
linked_list	struct
*	O
*	O
plist	pointer
)	O
{	O
if	O
(	O
plist	pointer
&&	O
*	O
plist	pointer
)	O
{	O
struct	O
linked_list	struct
*	O
list	pointer
=	O
*	O
plist	pointer
;	O
struct	O
linked_list_entry	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
list	pointer
->	O
head	pointer
;	O
p	pointer
;	O
)	O
{	O
struct	O
linked_list_entry	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
list	pointer
->	O
free_data	pointer
)	O
list	pointer
->	O
free_data	pointer
(	O
p	pointer
->	O
data	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
}	O
free	function
(	O
list	pointer
)	O
;	O
*	O
plist	pointer
=	O
NULL	O
;	O
}	O
}	O
void	O
linked_list_unlink	function
(	O
struct	O
linked_list	struct
*	O
list	pointer
,	O
struct	O
linked_list_entry	struct
*	O
ent	pointer
)	O
{	O
struct	O
linked_list_entry	struct
*	O
p	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
ent	pointer
->	O
prev	pointer
)	O
)	O
p	pointer
->	O
next	pointer
=	O
ent	pointer
->	O
next	pointer
;	O
else	O
list	pointer
->	O
head	pointer
=	O
ent	pointer
->	O
next	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
ent	pointer
->	O
next	pointer
)	O
)	O
p	pointer
->	O
prev	pointer
=	O
ent	pointer
->	O
prev	pointer
;	O
else	O
list	pointer
->	O
tail	pointer
=	O
ent	pointer
->	O
prev	pointer
;	O
if	O
(	O
list	pointer
->	O
free_data	pointer
)	O
list	pointer
->	O
free_data	pointer
(	O
ent	pointer
->	O
data	pointer
)	O
;	O
free	function
(	O
ent	pointer
)	O
;	O
}	O
void	O
linked_list_iterate	function
(	O
struct	O
linked_list	struct
*	O
*	O
plist	pointer
,	O
int	O
(	O
*	O
itr	pointer
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
linked_list	struct
*	O
list	pointer
;	O
struct	O
linked_list_entry	struct
*	O
p	pointer
;	O
if	O
(	O
!	O
*	O
plist	pointer
)	O
return	O
;	O
list	pointer
=	O
*	O
plist	pointer
;	O
for	O
(	O
p	pointer
=	O
linked_list_head	O
(	O
list	pointer
)	O
;	O
p	pointer
;	O
)	O
{	O
struct	O
linked_list_entry	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
if	O
(	O
itr	pointer
(	O
p	pointer
->	O
data	pointer
,	O
data	pointer
)	O
)	O
linked_list_unlink	function
(	O
list	pointer
,	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
}	O
if	O
(	O
!	O
list	pointer
->	O
head	pointer
)	O
linked_list_destroy	function
(	O
&	O
list	pointer
)	O
;	O
*	O
plist	pointer
=	O
list	pointer
;	O
}	O
int	O
data_in_list	function
(	O
void	O
*	O
data	pointer
,	O
struct	O
linked_list	struct
*	O
list	pointer
)	O
{	O
struct	O
linked_list_entry	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
linked_list_head	O
(	O
list	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
p	pointer
->	O
data	pointer
==	O
data	pointer
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
size_t	long
linked_list_size	function
(	O
struct	O
linked_list	struct
*	O
list	pointer
)	O
{	O
size_t	long
size	long
=	O
0	int
;	O
if	O
(	O
list	pointer
)	O
{	O
struct	O
linked_list_entry	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
linked_list_head	O
(	O
list	pointer
)	O
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
size	long
++	O
;	O
}	O
return	O
size	long
;	O
}	O
