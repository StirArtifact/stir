static	O
int	O
get_notify_fd	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
int	O
fd	int
=	O
mbox	pointer
->	O
notify_fd	int
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
struct	O
sockaddr_in	struct
biff_in	struct
;	O
struct	O
servent	struct
*	O
sp	pointer
;	O
if	O
(	O
(	O
sp	pointer
=	O
getservbyname	function
(	O
"biff"	pointer
,	O
"udp"	pointer
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
biff_in	struct
.	O
sin_family	short
=	O
AF_INET	O
;	O
biff_in	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
htonl	function
(	O
INADDR_LOOPBACK	O
)	O
;	O
biff_in	struct
.	O
sin_port	short
=	O
sp	pointer
->	O
s_port	int
;	O
fd	int
=	O
socket	function
(	O
PF_INET	int
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
mbox	pointer
->	O
notify_sa	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
biff_in	struct
)	O
)	O
;	O
if	O
(	O
!	O
mbox	pointer
->	O
notify_sa	pointer
)	O
{	O
close	function
(	O
fd	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memcpy	function
(	O
mbox	pointer
->	O
notify_sa	pointer
,	O
&	O
biff_in	struct
,	O
sizeof	O
(	O
biff_in	struct
)	O
)	O
;	O
mbox	pointer
->	O
notify_fd	int
=	O
fd	int
;	O
}	O
return	O
fd	int
;	O
}	O
static	O
int	O
biff_notify	function
(	O
mu_observer_t	pointer
obs	pointer
,	O
size_t	long
type	long
,	O
void	O
*	O
data	pointer
,	O
void	O
*	O
action_data	pointer
)	O
{	O
mu_mailbox_t	pointer
mbox	pointer
=	O
mu_observer_get_owner	function
(	O
obs	pointer
)	O
;	O
if	O
(	O
type	long
==	O
MU_EVT_MAILBOX_MESSAGE_APPEND	int
&&	O
mbox	pointer
->	O
notify_user	pointer
)	O
{	O
mu_message_qid_t	pointer
qid	pointer
=	O
data	pointer
;	O
mu_url_t	pointer
url	pointer
;	O
char	O
*	O
buf	array
;	O
int	O
fd	int
=	O
get_notify_fd	function
(	O
mbox	pointer
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
mu_observable_t	pointer
observable	pointer
;	O
mu_mailbox_get_observable	function
(	O
mbox	pointer
,	O
&	O
observable	pointer
)	O
;	O
mu_observable_detach	function
(	O
observable	pointer
,	O
obs	pointer
)	O
;	O
return	O
0	int
;	O
}	O
mu_mailbox_get_url	function
(	O
mbox	pointer
,	O
&	O
url	pointer
)	O
;	O
if	O
(	O
mu_asprintf	function
(	O
&	O
buf	array
,	O
"%s@%s:%s"	pointer
,	O
mbox	pointer
->	O
notify_user	pointer
,	O
qid	pointer
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
)	O
)	O
return	O
0	int
;	O
mu_mailbox_flush	function
(	O
mbox	pointer
,	O
0	int
)	O
;	O
if	O
(	O
buf	array
)	O
{	O
sendto	function
(	O
fd	int
,	O
buf	array
,	O
strlen	function
(	O
buf	array
)	O
,	O
0	int
,	O
mbox	pointer
->	O
notify_sa	pointer
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct
)	O
)	O
;	O
free	function
(	O
buf	array
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_set_notify	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
const	O
char	O
*	O
user	pointer
)	O
{	O
mu_observer_t	pointer
observer	pointer
;	O
mu_observable_t	pointer
observable	pointer
;	O
if	O
(	O
!	O
mbox	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
user	pointer
)	O
user	pointer
=	O
strdup	function
(	O
user	pointer
)	O
;	O
else	O
{	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
=	O
NULL	O
;	O
auth	pointer
=	O
mu_get_auth_by_uid	function
(	O
getuid	function
(	O
)	O
)	O
;	O
if	O
(	O
!	O
auth	pointer
)	O
return	O
MU_ERR_NO_SUCH_USER	O
;	O
user	pointer
=	O
strdup	function
(	O
auth	pointer
->	O
name	pointer
)	O
;	O
}	O
if	O
(	O
!	O
user	pointer
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
mbox	pointer
->	O
notify_user	pointer
)	O
free	function
(	O
mbox	pointer
->	O
notify_user	pointer
)	O
;	O
mbox	pointer
->	O
notify_user	pointer
=	O
(	O
char	O
*	O
)	O
user	pointer
;	O
if	O
(	O
!	O
(	O
mbox	pointer
->	O
flags	int
&	O
_MU_MAILBOX_NOTIFY	int
)	O
)	O
{	O
mu_observer_create	function
(	O
&	O
observer	pointer
,	O
mbox	pointer
)	O
;	O
mu_observer_set_action	function
(	O
observer	pointer
,	O
biff_notify	function
,	O
mbox	pointer
)	O
;	O
mu_mailbox_get_observable	function
(	O
mbox	pointer
,	O
&	O
observable	pointer
)	O
;	O
mu_observable_attach	function
(	O
observable	pointer
,	O
MU_EVT_MAILBOX_MESSAGE_APPEND	int
,	O
observer	pointer
)	O
;	O
mbox	pointer
->	O
flags	int
|=	O
_MU_MAILBOX_NOTIFY	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_mailbox_unset_notify	function
(	O
mu_mailbox_t	pointer
mbox	pointer
)	O
{	O
if	O
(	O
!	O
mbox	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
mbox	pointer
->	O
notify_user	pointer
)	O
return	O
EINVAL	int
;	O
free	function
(	O
mbox	pointer
->	O
notify_user	pointer
)	O
;	O
mbox	pointer
->	O
notify_user	pointer
=	O
NULL	O
;	O
close	function
(	O
mbox	pointer
->	O
notify_fd	int
)	O
;	O
mbox	pointer
->	O
notify_fd	int
=	O
-	O
1	int
;	O
free	function
(	O
mbox	pointer
->	O
notify_sa	pointer
)	O
;	O
mbox	pointer
->	O
notify_sa	pointer
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
