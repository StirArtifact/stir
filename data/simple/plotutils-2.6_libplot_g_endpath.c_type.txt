int	O
_API_endpath	O
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
int	O
i	int
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"endpath: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
_API_endsubpath	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
!	O
_plotter	pointer
->	O
drawstate	pointer
->	O
points_are_connected	enum
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
!=	O
0	int
)	O
{	O
plPath	struct
*	O
*	O
saved_paths	pointer
;	O
int	O
saved_num_paths	int
;	O
double	O
radius	double
=	O
0.5	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
line_width	double
;	O
int	O
i	int
;	O
saved_paths	pointer
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
;	O
saved_num_paths	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
=	O
(	O
plPath	struct
*	O
*	O
)	O
NULL	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
=	O
0	int
;	O
_API_savestate	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_API_filltype	O
(	O
R___	O
(	O
_plotter	pointer
)	O
1	int
)	O
;	O
_API_fillcolor	O
(	O
R___	O
(	O
_plotter	pointer
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
red	int
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
green	int
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fgcolor	struct
.	O
blue	int
)	O
;	O
_API_pentype	O
(	O
R___	O
(	O
_plotter	pointer
)	O
0	int
)	O
;	O
_API_linemod	O
(	O
R___	O
(	O
_plotter	pointer
)	O
"solid"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
saved_num_paths	int
;	O
i	int
++	O
)	O
{	O
plPath	struct
*	O
path	pointer
;	O
bool	enum
closed	enum
;	O
int	O
j	int
;	O
path	pointer
=	O
saved_paths	pointer
[	O
i	int
]	O
;	O
if	O
(	O
path	pointer
->	O
type	enum
!=	O
PATH_SEGMENT_LIST	int
||	O
path	pointer
->	O
num_segments	int
<	O
2	int
)	O
continue	O
;	O
if	O
(	O
(	O
path	pointer
->	O
num_segments	int
>=	O
3	int
)	O
&&	O
(	O
path	pointer
->	O
segments	pointer
[	O
path	pointer
->	O
num_segments	int
-	O
1	int
]	O
.	O
p	struct
.	O
x	double
==	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
x	double
)	O
&&	O
(	O
path	pointer
->	O
segments	pointer
[	O
path	pointer
->	O
num_segments	int
-	O
1	int
]	O
.	O
p	struct
.	O
y	double
==	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
.	O
y	double
)	O
)	O
closed	enum
=	O
true	int
;	O
else	O
closed	enum
=	O
false	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
path	pointer
->	O
num_segments	int
-	O
(	O
closed	enum
?	O
1	int
:	O
0	int
)	O
;	O
j	int
++	O
)	O
_API_fcircle	O
(	O
R___	O
(	O
_plotter	pointer
)	O
path	pointer
->	O
segments	pointer
[	O
j	int
]	O
.	O
p	struct
.	O
x	double
,	O
path	pointer
->	O
segments	pointer
[	O
j	int
]	O
.	O
p	struct
.	O
y	double
,	O
radius	double
)	O
;	O
if	O
(	O
closed	enum
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
=	O
path	pointer
->	O
segments	pointer
[	O
0	int
]	O
.	O
p	struct
;	O
}	O
_API_restorestate	O
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
=	O
saved_paths	pointer
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
=	O
saved_num_paths	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
==	O
1	int
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
[	O
0	int
]	O
;	O
_plotter	pointer
->	O
paint_path	pointer
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
=	O
(	O
plPath	struct
*	O
)	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
_plotter	pointer
->	O
paint_paths	pointer
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
==	O
false	int
)	O
{	O
int	O
fill_type	int
,	O
pen_type	int
;	O
fill_type	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
;	O
pen_type	int
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
;	O
if	O
(	O
fill_type	int
&&	O
_plotter	pointer
->	O
data	pointer
->	O
have_solid_fill	int
)	O
{	O
plPath	struct
*	O
*	O
merged_paths	pointer
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
=	O
fill_type	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
=	O
0	int
;	O
merged_paths	pointer
=	O
_merge_paths	function
(	O
(	O
const	O
plPath	struct
*	O
*	O
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
,	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
merged_paths	pointer
[	O
i	int
]	O
==	O
(	O
plPath	struct
*	O
)	O
NULL	O
)	O
continue	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
=	O
merged_paths	pointer
[	O
i	int
]	O
;	O
_plotter	pointer
->	O
paint_path	pointer
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
if	O
(	O
merged_paths	pointer
[	O
i	int
]	O
!=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
[	O
i	int
]	O
)	O
_delete_plPath	function
(	O
merged_paths	pointer
[	O
i	int
]	O
)	O
;	O
}	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
=	O
(	O
plPath	struct
*	O
)	O
NULL	O
;	O
}	O
if	O
(	O
pen_type	int
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
=	O
pen_type	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
;	O
i	int
++	O
)	O
{	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
[	O
i	int
]	O
;	O
_plotter	pointer
->	O
paint_path	pointer
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
}	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
=	O
(	O
plPath	struct
*	O
)	O
NULL	O
;	O
}	O
_plotter	pointer
->	O
drawstate	pointer
->	O
fill_type	int
=	O
fill_type	int
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pen_type	int
=	O
pen_type	int
;	O
}	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
;	O
i	int
++	O
)	O
_delete_plPath	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
[	O
i	int
]	O
)	O
;	O
free	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
=	O
(	O
plPath	struct
*	O
*	O
)	O
NULL	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
_API_endsubpath	O
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"endsubpath: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
)	O
{	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
==	O
0	int
)	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
=	O
(	O
plPath	struct
*	O
*	O
)	O
_pl_xmalloc	function
(	O
sizeof	O
(	O
plPath	struct
*	O
)	O
)	O
;	O
else	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
=	O
(	O
plPath	struct
*	O
*	O
)	O
_pl_xrealloc	function
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
,	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
plPath	struct
*	O
)	O
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
paths	pointer
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
num_paths	int
++	O
]	O
=	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
path	pointer
=	O
(	O
plPath	struct
*	O
)	O
NULL	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
_API_closepath	O
(	O
S___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
)	O
{	O
if	O
(	O
!	O
_plotter	pointer
->	O
data	pointer
->	O
open	enum
)	O
{	O
_plotter	pointer
->	O
error	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
"closepath: invalid operation"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
