static	O
void	O
*	O
dico_mergesort	function
(	O
void	O
*	O
a	pointer
,	O
void	O
*	O
b	pointer
,	O
size_t	long
nmemb	long
,	O
size_t	long
size	long
,	O
int	O
(	O
*	O
comp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
closure	pointer
)	O
;	O
static	O
void	O
merge	function
(	O
void	O
*	O
source	pointer
,	O
void	O
*	O
work	pointer
,	O
size_t	long
size	long
,	O
size_t	long
left	long
,	O
size_t	long
right	long
,	O
size_t	long
end	int
,	O
int	O
(	O
*	O
comp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
closure	pointer
)	O
;	O
int	O
dico_sort	function
(	O
void	O
*	O
base	pointer
,	O
size_t	long
nmemb	long
,	O
size_t	long
size	long
,	O
int	O
(	O
*	O
comp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
closure	pointer
)	O
{	O
void	O
*	O
tmp	pointer
,	O
*	O
res	pointer
;	O
tmp	pointer
=	O
calloc	function
(	O
nmemb	long
,	O
size	long
)	O
;	O
if	O
(	O
!	O
tmp	pointer
)	O
return	O
-	O
1	int
;	O
res	pointer
=	O
dico_mergesort	function
(	O
base	pointer
,	O
tmp	pointer
,	O
nmemb	long
,	O
size	long
,	O
comp	pointer
,	O
closure	pointer
)	O
;	O
if	O
(	O
res	pointer
!=	O
base	pointer
)	O
memcpy	function
(	O
base	pointer
,	O
res	pointer
,	O
nmemb	long
*	O
size	long
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
inline	O
size_t	long
min	function
(	O
size_t	long
a	pointer
,	O
size_t	long
b	pointer
)	O
{	O
return	O
a	pointer
<	O
b	pointer
?	O
a	pointer
:	O
b	pointer
;	O
}	O
static	O
void	O
*	O
dico_mergesort	function
(	O
void	O
*	O
a	pointer
,	O
void	O
*	O
b	pointer
,	O
size_t	long
nmemb	long
,	O
size_t	long
size	long
,	O
int	O
(	O
*	O
comp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
closure	pointer
)	O
{	O
size_t	long
width	long
;	O
for	O
(	O
width	long
=	O
1	int
;	O
width	long
<	O
nmemb	long
;	O
width	long
<<=	O
1	int
)	O
{	O
size_t	long
i	long
;	O
void	O
*	O
t	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nmemb	long
;	O
i	long
+=	O
2	int
*	O
width	long
)	O
{	O
merge	function
(	O
a	pointer
,	O
b	pointer
,	O
size	long
,	O
i	long
,	O
min	function
(	O
i	long
+	O
width	long
,	O
nmemb	long
)	O
,	O
min	function
(	O
i	long
+	O
2	int
*	O
width	long
,	O
nmemb	long
)	O
,	O
comp	pointer
,	O
closure	pointer
)	O
;	O
}	O
t	pointer
=	O
a	pointer
;	O
a	pointer
=	O
b	pointer
;	O
b	pointer
=	O
t	pointer
;	O
}	O
return	O
a	pointer
;	O
}	O
static	O
void	O
merge	function
(	O
void	O
*	O
source	pointer
,	O
void	O
*	O
work	pointer
,	O
size_t	long
size	long
,	O
size_t	long
left	long
,	O
size_t	long
right	long
,	O
size_t	long
end	int
,	O
int	O
(	O
*	O
comp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
closure	pointer
)	O
{	O
size_t	long
i	long
=	O
left	long
;	O
size_t	long
j	long
=	O
right	long
;	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
left	long
;	O
k	long
<	O
end	int
;	O
k	long
++	O
)	O
{	O
if	O
(	O
i	long
<	O
right	long
&&	O
(	O
j	long
>=	O
end	int
||	O
comp	pointer
(	O
MEMB	O
(	O
source	pointer
,	O
i	long
)	O
,	O
MEMB	O
(	O
source	pointer
,	O
j	long
)	O
,	O
closure	pointer
)	O
<=	O
0	int
)	O
)	O
{	O
COPY	O
(	O
work	pointer
,	O
k	long
,	O
source	pointer
,	O
i	long
)	O
;	O
i	long
++	O
;	O
}	O
else	O
{	O
COPY	O
(	O
work	pointer
,	O
k	long
,	O
source	pointer
,	O
j	long
)	O
;	O
j	long
++	O
;	O
}	O
}	O
}	O
