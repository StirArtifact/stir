typedef	O
struct	O
{	O
double	O
*	O
z	double
;	O
double	O
*	O
zbackup	pointer
;	O
double	O
*	O
ytmp	pointer
;	O
double	O
*	O
ytmp2	pointer
;	O
double	O
*	O
l	pointer
;	O
double	O
*	O
hprev	pointer
;	O
double	O
*	O
hprevbackup	pointer
;	O
size_t	long
*	O
ordprev	pointer
;	O
size_t	long
*	O
ordprevbackup	pointer
;	O
double	O
*	O
errlev	pointer
;	O
gsl_vector	struct
*	O
abscor	pointer
;	O
gsl_vector	struct
*	O
abscorscaled	pointer
;	O
gsl_vector	struct
*	O
relcor	pointer
;	O
gsl_vector	struct
*	O
svec	pointer
;	O
gsl_vector	struct
*	O
tempvec	pointer
;	O
const	O
gsl_odeiv2_driver	struct
*	O
driver	pointer
;	O
gsl_matrix	struct
*	O
dfdy	pointer
;	O
double	O
*	O
dfdt	array
;	O
gsl_matrix	struct
*	O
M	int
;	O
gsl_permutation	struct
*	O
p	int
;	O
gsl_vector	struct
*	O
rhs	pointer
;	O
long	O
int	O
ni	long
;	O
size_t	long
ord	int
;	O
double	O
tprev	double
;	O
size_t	long
ordwait	long
;	O
size_t	long
ordwaitbackup	long
;	O
size_t	long
failord	long
;	O
double	O
failt	double
;	O
double	O
ordp1coeffprev	double
;	O
size_t	long
nJ	long
;	O
size_t	long
nM	long
;	O
double	O
gammaprev	double
;	O
double	O
gammaprevbackup	double
;	O
size_t	long
failcount	long
;	O
}	O
msbdf_state_t	struct
;	O
static	O
int	O
msbdf_reset	function
(	O
void	O
*	O
,	O
size_t	long
)	O
;	O
static	O
void	O
*	O
msbdf_alloc	function
(	O
size_t	long
dim	long
)	O
{	O
msbdf_state_t	struct
*	O
state	pointer
=	O
(	O
msbdf_state_t	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
msbdf_state_t	struct
)	O
)	O
;	O
if	O
(	O
state	pointer
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for msbdf_state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
z	double
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
(	O
MSBDF_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
z	double
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for z"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
zbackup	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
(	O
MSBDF_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
zbackup	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for zbackup"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
ytmp	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
ytmp	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ytmp"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
ytmp2	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
ytmp2	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ytmp2"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
l	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
(	O
MSBDF_MAX_ORD	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
l	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for l"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
hprev	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
MSBDF_MAX_ORD	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
hprev	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for hprev"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
hprevbackup	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
MSBDF_MAX_ORD	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
hprevbackup	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for hprevbackup"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
ordprev	pointer
=	O
(	O
size_t	long
*	O
)	O
malloc	function
(	O
MSBDF_MAX_ORD	int
*	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
ordprev	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ordprev"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
ordprevbackup	pointer
=	O
(	O
size_t	long
*	O
)	O
malloc	function
(	O
MSBDF_MAX_ORD	int
*	O
sizeof	O
(	O
size_t	long
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
ordprevbackup	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ordprevbackup"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
errlev	pointer
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
errlev	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for errlev"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
abscor	pointer
=	O
gsl_vector_alloc	function
(	O
dim	long
)	O
;	O
if	O
(	O
state	pointer
->	O
abscor	pointer
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for abscor"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
relcor	pointer
=	O
gsl_vector_alloc	function
(	O
dim	long
)	O
;	O
if	O
(	O
state	pointer
->	O
relcor	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	pointer
->	O
abscor	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for relcor"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
svec	pointer
=	O
gsl_vector_alloc	function
(	O
dim	long
)	O
;	O
if	O
(	O
state	pointer
->	O
svec	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	pointer
->	O
relcor	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
abscor	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for svec"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
tempvec	pointer
=	O
gsl_vector_alloc	function
(	O
dim	long
)	O
;	O
if	O
(	O
state	pointer
->	O
tempvec	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	pointer
->	O
svec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
relcor	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
abscor	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for tempvec"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
dfdy	pointer
=	O
gsl_matrix_alloc	function
(	O
dim	long
,	O
dim	long
)	O
;	O
if	O
(	O
state	pointer
->	O
dfdy	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	pointer
->	O
tempvec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
svec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
relcor	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
abscor	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dfdy"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
dfdt	array
=	O
(	O
double	O
*	O
)	O
malloc	function
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	pointer
->	O
dfdt	array
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
state	pointer
->	O
dfdy	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
tempvec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
svec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
relcor	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
abscor	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dfdt"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
M	int
=	O
gsl_matrix_alloc	function
(	O
dim	long
,	O
dim	long
)	O
;	O
if	O
(	O
state	pointer
->	O
M	int
==	O
0	int
)	O
{	O
free	function
(	O
state	pointer
->	O
dfdt	array
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
dfdy	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
tempvec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
svec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
relcor	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
abscor	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for M"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
p	int
=	O
gsl_permutation_alloc	function
(	O
dim	long
)	O
;	O
if	O
(	O
state	pointer
->	O
p	int
==	O
0	int
)	O
{	O
gsl_matrix_free	function
(	O
state	pointer
->	O
M	int
)	O
;	O
free	function
(	O
state	pointer
->	O
dfdt	array
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
dfdy	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
tempvec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
svec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
relcor	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
abscor	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for p"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
rhs	pointer
=	O
gsl_vector_alloc	function
(	O
dim	long
)	O
;	O
if	O
(	O
state	pointer
->	O
rhs	pointer
==	O
0	int
)	O
{	O
gsl_permutation_free	function
(	O
state	pointer
->	O
p	int
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
M	int
)	O
;	O
free	function
(	O
state	pointer
->	O
dfdt	array
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
dfdy	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
tempvec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
svec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
relcor	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
abscor	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for rhs"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	pointer
->	O
abscorscaled	pointer
=	O
gsl_vector_alloc	function
(	O
dim	long
)	O
;	O
if	O
(	O
state	pointer
->	O
abscorscaled	pointer
==	O
0	int
)	O
{	O
gsl_vector_free	function
(	O
state	pointer
->	O
rhs	pointer
)	O
;	O
gsl_permutation_free	function
(	O
state	pointer
->	O
p	int
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
M	int
)	O
;	O
free	function
(	O
state	pointer
->	O
dfdt	array
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
dfdy	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
tempvec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
svec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
relcor	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
abscor	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for abscorscaled"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
msbdf_reset	function
(	O
(	O
void	O
*	O
)	O
state	pointer
,	O
dim	long
)	O
;	O
state	pointer
->	O
driver	pointer
=	O
NULL	O
;	O
return	O
state	pointer
;	O
}	O
static	O
int	O
msbdf_failurehandler	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
size_t	long
dim	long
,	O
const	O
double	O
t	double
)	O
{	O
msbdf_state_t	struct
*	O
state	pointer
=	O
(	O
msbdf_state_t	struct
*	O
)	O
vstate	pointer
;	O
const	O
size_t	long
ord	int
=	O
state	pointer
->	O
ord	int
;	O
if	O
(	O
ord	int
>	O
1	int
&&	O
(	O
ord	int
-	O
state	pointer
->	O
ordprev	pointer
[	O
0	int
]	O
==	O
0	int
)	O
&&	O
ord	int
==	O
state	pointer
->	O
failord	long
&&	O
t	double
==	O
state	pointer
->	O
failt	double
)	O
{	O
state	pointer
->	O
ord	int
--	O
;	O
}	O
state	pointer
->	O
failord	long
=	O
ord	int
;	O
state	pointer
->	O
failt	double
=	O
t	double
;	O
state	pointer
->	O
ni	long
++	O
;	O
if	O
(	O
ord	int
==	O
1	int
)	O
{	O
msbdf_reset	function
(	O
vstate	pointer
,	O
dim	long
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msbdf_calccoeffs	function
(	O
const	O
size_t	long
ord	int
,	O
const	O
size_t	long
ordwait	long
,	O
const	O
double	O
h	double
,	O
const	O
double	O
hprev	pointer
[	O
]	O
,	O
double	O
l	pointer
[	O
]	O
,	O
double	O
*	O
errcoeff	pointer
,	O
double	O
*	O
ordm1coeff	pointer
,	O
double	O
*	O
ordp1coeff	pointer
,	O
double	O
*	O
ordp2coeff	pointer
,	O
double	O
*	O
gamma	function
)	O
{	O
if	O
(	O
ord	int
==	O
1	int
)	O
{	O
l	pointer
[	O
0	int
]	O
=	O
1.0	int
;	O
l	pointer
[	O
1	int
]	O
=	O
1.0	int
;	O
*	O
errcoeff	pointer
=	O
0.5	int
;	O
*	O
ordp1coeff	pointer
=	O
2.0	int
;	O
{	O
const	O
double	O
hsum	double
=	O
h	double
+	O
hprev	pointer
[	O
0	int
]	O
;	O
const	O
double	O
a5	double
=	O
-	O
1.5	int
;	O
const	O
double	O
a6	double
=	O
-	O
1.0	int
-	O
h	double
/	O
hsum	double
;	O
const	O
double	O
c2	double
=	O
2.0	int
/	O
(	O
1.0	int
-	O
a6	double
+	O
a5	double
)	O
;	O
*	O
ordp2coeff	pointer
=	O
fabs	function
(	O
c2	double
*	O
(	O
h	double
/	O
hsum	double
)	O
*	O
3.0	int
*	O
a5	double
)	O
;	O
}	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
;	O
double	O
hsum	double
=	O
h	double
;	O
double	O
coeff1	double
=	O
-	O
1.0	int
;	O
double	O
x	double
;	O
DBL_ZERO_MEMSET	O
(	O
l	pointer
,	O
MSBDF_MAX_ORD	int
+	O
1	int
)	O
;	O
l	pointer
[	O
0	int
]	O
=	O
1.0	int
;	O
l	pointer
[	O
1	int
]	O
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
ord	int
;	O
i	long
++	O
)	O
{	O
hsum	double
+=	O
hprev	pointer
[	O
i	long
-	O
2	int
]	O
;	O
coeff1	double
+=	O
-	O
1.0	int
/	O
i	long
;	O
for	O
(	O
j	long
=	O
i	long
;	O
j	long
>	O
0	int
;	O
j	long
--	O
)	O
{	O
l	pointer
[	O
j	long
]	O
+=	O
h	double
/	O
hsum	double
*	O
l	pointer
[	O
j	long
-	O
1	int
]	O
;	O
}	O
}	O
coeff1	double
+=	O
-	O
1.0	int
/	O
ord	int
;	O
x	double
=	O
-	O
l	pointer
[	O
1	int
]	O
-	O
coeff1	double
;	O
for	O
(	O
i	long
=	O
ord	int
;	O
i	long
>	O
0	int
;	O
i	long
--	O
)	O
{	O
l	pointer
[	O
i	long
]	O
+=	O
l	pointer
[	O
i	long
-	O
1	int
]	O
*	O
x	double
;	O
}	O
hsum	double
+=	O
hprev	pointer
[	O
ord	int
-	O
2	int
]	O
;	O
{	O
const	O
double	O
coeff2	double
=	O
-	O
l	pointer
[	O
1	int
]	O
-	O
h	double
/	O
hsum	double
;	O
const	O
double	O
a1	double
=	O
1.0	int
-	O
coeff2	double
+	O
coeff1	double
;	O
const	O
double	O
a2	double
=	O
1.0	int
+	O
ord	int
*	O
a1	double
;	O
*	O
errcoeff	pointer
=	O
fabs	function
(	O
a1	double
/	O
(	O
coeff1	double
*	O
a2	double
)	O
)	O
;	O
if	O
(	O
ordwait	long
<	O
2	int
)	O
{	O
const	O
double	O
a3	double
=	O
coeff1	double
+	O
1.0	int
/	O
ord	int
;	O
const	O
double	O
a4	double
=	O
coeff2	double
+	O
h	double
/	O
hsum	double
;	O
const	O
double	O
c1	double
=	O
a3	double
/	O
(	O
1.0	int
-	O
a4	double
+	O
a3	double
)	O
;	O
*	O
ordm1coeff	pointer
=	O
fabs	function
(	O
c1	double
/	O
(	O
x	double
/	O
l	pointer
[	O
ord	int
]	O
)	O
)	O
;	O
*	O
ordp1coeff	pointer
=	O
fabs	function
(	O
a2	double
/	O
(	O
l	pointer
[	O
ord	int
]	O
*	O
(	O
h	double
/	O
hsum	double
)	O
/	O
x	double
)	O
)	O
;	O
hsum	double
+=	O
hprev	pointer
[	O
ord	int
-	O
1	int
]	O
;	O
{	O
const	O
double	O
a5	double
=	O
coeff1	double
-	O
1.0	int
/	O
(	O
ord	int
+	O
1.0	int
)	O
;	O
const	O
double	O
a6	double
=	O
coeff2	double
-	O
h	double
/	O
hsum	double
;	O
const	O
double	O
c2	double
=	O
a2	double
/	O
(	O
1.0	int
-	O
a6	double
+	O
a5	double
)	O
;	O
*	O
ordp2coeff	pointer
=	O
fabs	function
(	O
c2	double
*	O
(	O
h	double
/	O
hsum	double
)	O
*	O
(	O
ord	int
+	O
2	int
)	O
*	O
a5	double
)	O
;	O
}	O
}	O
}	O
}	O
*	O
gamma	function
=	O
h	double
/	O
l	pointer
[	O
1	int
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msbdf_update	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
size_t	long
dim	long
,	O
gsl_matrix	struct
*	O
dfdy	pointer
,	O
double	O
*	O
dfdt	array
,	O
const	O
double	O
t	double
,	O
const	O
double	O
*	O
y	double
,	O
const	O
gsl_odeiv2_system	struct
*	O
sys	pointer
,	O
gsl_matrix	struct
*	O
M	int
,	O
gsl_permutation	struct
*	O
p	int
,	O
const	O
size_t	long
iter	long
,	O
size_t	long
*	O
nJ	long
,	O
size_t	long
*	O
nM	long
,	O
const	O
double	O
tprev	double
,	O
const	O
double	O
failt	double
,	O
const	O
double	O
gamma	function
,	O
const	O
double	O
gammaprev	double
,	O
const	O
double	O
hratio	double
)	O
{	O
const	O
double	O
c	pointer
=	O
0.2	int
;	O
const	O
double	O
gammarel	double
=	O
fabs	function
(	O
gamma	function
/	O
gammaprev	double
-	O
1.0	int
)	O
;	O
if	O
(	O
*	O
nJ	long
==	O
0	int
||	O
*	O
nJ	long
>	O
MSBDF_JAC_WAIT	int
||	O
(	O
t	double
==	O
failt	double
&&	O
(	O
gammarel	double
<	O
c	pointer
||	O
hratio	double
<	O
1.0	int
)	O
)	O
)	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_JA_EVAL	O
(	O
sys	pointer
,	O
t	double
,	O
y	double
,	O
dfdy	pointer
->	O
data	pointer
,	O
dfdt	array
)	O
;	O
if	O
(	O
s	pointer
==	O
GSL_EBADFUNC	int
)	O
{	O
return	O
s	pointer
;	O
}	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
msbdf_failurehandler	function
(	O
vstate	pointer
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
s	pointer
;	O
}	O
*	O
nJ	long
=	O
0	int
;	O
}	O
if	O
(	O
*	O
nM	long
==	O
0	int
||	O
*	O
nM	long
>	O
MSBDF_M_WAIT	int
||	O
gammarel	double
>=	O
c	pointer
||	O
t	double
==	O
tprev	double
||	O
t	double
==	O
failt	double
)	O
{	O
size_t	long
i	long
;	O
gsl_matrix_memcpy	function
(	O
M	int
,	O
dfdy	pointer
)	O
;	O
gsl_matrix_scale	function
(	O
M	int
,	O
-	O
gamma	function
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
gsl_matrix_set	function
(	O
M	int
,	O
i	long
,	O
i	long
,	O
gsl_matrix_get	function
(	O
M	int
,	O
i	long
,	O
i	long
)	O
+	O
1.0	int
)	O
;	O
}	O
{	O
int	O
signum	pointer
;	O
int	O
s	pointer
=	O
gsl_linalg_LU_decomp	function
(	O
M	int
,	O
p	int
,	O
&	O
signum	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
GSL_FAILURE	int
;	O
}	O
}	O
*	O
nM	long
=	O
0	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msbdf_corrector	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_odeiv2_system	struct
*	O
sys	pointer
,	O
const	O
double	O
t	double
,	O
const	O
double	O
h	double
,	O
const	O
size_t	long
dim	long
,	O
const	O
double	O
z	double
[	O
]	O
,	O
const	O
double	O
errlev	pointer
[	O
]	O
,	O
const	O
double	O
l	pointer
[	O
]	O
,	O
const	O
double	O
errcoeff	pointer
,	O
gsl_vector	struct
*	O
abscor	pointer
,	O
gsl_vector	struct
*	O
relcor	pointer
,	O
double	O
ytmp	pointer
[	O
]	O
,	O
double	O
ytmp2	pointer
[	O
]	O
,	O
gsl_matrix	struct
*	O
dfdy	pointer
,	O
double	O
dfdt	array
[	O
]	O
,	O
gsl_matrix	struct
*	O
M	int
,	O
gsl_permutation	struct
*	O
p	int
,	O
gsl_vector	struct
*	O
rhs	pointer
,	O
size_t	long
*	O
nJ	long
,	O
size_t	long
*	O
nM	long
,	O
const	O
double	O
tprev	double
,	O
const	O
double	O
failt	double
,	O
const	O
double	O
gamma	function
,	O
const	O
double	O
gammaprev	double
,	O
const	O
double	O
hprev0	double
)	O
{	O
size_t	long
mi	long
,	O
i	long
;	O
const	O
size_t	long
max_iter	long
=	O
3	int
;	O
double	O
convrate	double
=	O
1.0	int
;	O
double	O
stepnorm	double
=	O
0.0	int
;	O
double	O
stepnormprev	double
=	O
0.0	int
;	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
h	double
,	O
z	double
,	O
ytmp	pointer
)	O
;	O
if	O
(	O
s	pointer
==	O
GSL_EBADFUNC	int
)	O
{	O
return	O
s	pointer
;	O
}	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
msbdf_failurehandler	function
(	O
vstate	pointer
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
s	pointer
;	O
}	O
}	O
gsl_vector_set_zero	function
(	O
abscor	pointer
)	O
;	O
for	O
(	O
mi	long
=	O
0	int
;	O
mi	long
<	O
max_iter	long
;	O
mi	long
++	O
)	O
{	O
const	O
double	O
safety	double
=	O
0.3	int
;	O
const	O
double	O
safety2	double
=	O
0.1	int
;	O
if	O
(	O
mi	long
==	O
0	int
)	O
{	O
int	O
s	pointer
=	O
msbdf_update	function
(	O
vstate	pointer
,	O
dim	long
,	O
dfdy	pointer
,	O
dfdt	array
,	O
t	double
+	O
h	double
,	O
z	double
,	O
sys	pointer
,	O
M	int
,	O
p	int
,	O
mi	long
,	O
nJ	long
,	O
nM	long
,	O
tprev	double
,	O
failt	double
,	O
gamma	function
,	O
gammaprev	double
,	O
h	double
/	O
hprev0	double
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
r	pointer
=	O
-	O
1.0	int
*	O
gsl_vector_get	function
(	O
abscor	pointer
,	O
i	long
)	O
-	O
z	double
[	O
1	int
*	O
dim	long
+	O
i	long
]	O
/	O
l	pointer
[	O
1	int
]	O
+	O
gamma	function
*	O
ytmp	pointer
[	O
i	long
]	O
;	O
gsl_vector_set	function
(	O
rhs	pointer
,	O
i	long
,	O
r	pointer
)	O
;	O
}	O
{	O
int	O
s	pointer
=	O
gsl_linalg_LU_solve	function
(	O
M	int
,	O
p	int
,	O
rhs	pointer
,	O
relcor	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
msbdf_failurehandler	function
(	O
vstate	pointer
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
GSL_FAILURE	int
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
const	O
double	O
r	pointer
=	O
gsl_vector_get	function
(	O
abscor	pointer
,	O
i	long
)	O
+	O
gsl_vector_get	function
(	O
relcor	pointer
,	O
i	long
)	O
;	O
gsl_vector_set	function
(	O
abscor	pointer
,	O
i	long
,	O
r	pointer
)	O
;	O
ytmp2	pointer
[	O
i	long
]	O
=	O
z	double
[	O
i	long
]	O
+	O
r	pointer
;	O
gsl_vector_set	function
(	O
relcor	pointer
,	O
i	long
,	O
gsl_vector_get	function
(	O
relcor	pointer
,	O
i	long
)	O
/	O
errlev	pointer
[	O
i	long
]	O
)	O
;	O
}	O
stepnorm	double
=	O
gsl_blas_dnrm2	function
(	O
relcor	pointer
)	O
/	O
sqrt	function
(	O
dim	long
)	O
;	O
if	O
(	O
mi	long
>	O
0	int
)	O
{	O
convrate	double
=	O
GSL_MAX_DBL	function
(	O
safety	double
*	O
convrate	double
,	O
stepnorm	double
/	O
stepnormprev	double
)	O
;	O
}	O
else	O
{	O
convrate	double
=	O
1.0	int
;	O
}	O
{	O
const	O
double	O
convtest	double
=	O
GSL_MIN_DBL	function
(	O
convrate	double
,	O
1.0	int
)	O
*	O
stepnorm	double
*	O
errcoeff	pointer
/	O
safety2	double
;	O
if	O
(	O
convtest	double
<=	O
1.0	int
)	O
{	O
break	O
;	O
}	O
}	O
{	O
const	O
double	O
div_const	double
=	O
2.0	int
;	O
if	O
(	O
mi	long
>	O
1	int
&&	O
stepnorm	double
>	O
div_const	double
*	O
stepnormprev	double
)	O
{	O
msbdf_failurehandler	function
(	O
vstate	pointer
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
GSL_FAILURE	int
;	O
}	O
}	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
h	double
,	O
ytmp2	pointer
,	O
ytmp	pointer
)	O
;	O
if	O
(	O
s	pointer
==	O
GSL_EBADFUNC	int
)	O
{	O
return	O
s	pointer
;	O
}	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
msbdf_failurehandler	function
(	O
vstate	pointer
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
s	pointer
;	O
}	O
}	O
stepnormprev	double
=	O
stepnorm	double
;	O
}	O
if	O
(	O
mi	long
==	O
max_iter	long
)	O
{	O
msbdf_failurehandler	function
(	O
vstate	pointer
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
GSL_FAILURE	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msbdf_eval_order	function
(	O
gsl_vector	struct
*	O
abscorscaled	pointer
,	O
gsl_vector	struct
*	O
tempvec	pointer
,	O
gsl_vector	struct
*	O
svec	pointer
,	O
const	O
double	O
errcoeff	pointer
,	O
const	O
size_t	long
dim	long
,	O
const	O
double	O
errlev	pointer
[	O
]	O
,	O
const	O
double	O
ordm1coeff	pointer
,	O
const	O
double	O
ordp1coeff	pointer
,	O
const	O
double	O
ordp1coeffprev	double
,	O
const	O
double	O
ordp2coeff	pointer
,	O
const	O
double	O
hprev	pointer
[	O
]	O
,	O
const	O
double	O
h	double
,	O
const	O
double	O
z	double
[	O
]	O
,	O
size_t	long
*	O
ord	int
)	O
{	O
size_t	long
i	long
;	O
double	O
ordest	double
=	O
0.0	int
;	O
double	O
ordm1est	double
=	O
0.0	int
;	O
double	O
ordp1est	double
=	O
0.0	int
;	O
const	O
double	O
safety	double
=	O
1e-6	int
;	O
const	O
double	O
bias	double
=	O
6.0	int
;	O
const	O
double	O
bias2	double
=	O
10.0	int
;	O
const	O
double	O
min_incr	double
=	O
1.5	int
;	O
ordest	double
=	O
1.0	int
/	O
(	O
pow	function
(	O
bias	double
*	O
gsl_blas_dnrm2	function
(	O
abscorscaled	pointer
)	O
/	O
sqrt	function
(	O
dim	long
)	O
*	O
errcoeff	pointer
,	O
1.0	int
/	O
(	O
*	O
ord	int
+	O
1	int
)	O
)	O
+	O
safety	double
)	O
;	O
if	O
(	O
*	O
ord	int
>	O
1	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	function
(	O
tempvec	pointer
,	O
i	long
,	O
z	double
[	O
*	O
ord	int
*	O
dim	long
+	O
i	long
]	O
/	O
errlev	pointer
[	O
i	long
]	O
)	O
;	O
}	O
ordm1est	double
=	O
1.0	int
/	O
(	O
pow	function
(	O
bias	double
*	O
gsl_blas_dnrm2	function
(	O
tempvec	pointer
)	O
/	O
sqrt	function
(	O
dim	long
)	O
/	O
ordm1coeff	pointer
,	O
1.0	int
/	O
(	O
*	O
ord	int
)	O
)	O
+	O
safety	double
)	O
;	O
}	O
else	O
{	O
ordm1est	double
=	O
0.0	int
;	O
}	O
if	O
(	O
*	O
ord	int
<	O
MSBDF_MAX_ORD	int
)	O
{	O
const	O
double	O
c	pointer
=	O
-	O
ordp1coeff	pointer
/	O
ordp1coeffprev	double
*	O
pow	function
(	O
h	double
/	O
hprev	pointer
[	O
1	int
]	O
,	O
*	O
ord	int
+	O
1	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	function
(	O
svec	pointer
,	O
i	long
,	O
gsl_vector_get	function
(	O
svec	pointer
,	O
i	long
)	O
*	O
c	pointer
+	O
gsl_vector_get	function
(	O
abscorscaled	pointer
,	O
i	long
)	O
)	O
;	O
}	O
ordp1est	double
=	O
1.0	int
/	O
(	O
pow	function
(	O
bias2	double
*	O
gsl_blas_dnrm2	function
(	O
svec	pointer
)	O
/	O
sqrt	function
(	O
dim	long
)	O
/	O
ordp2coeff	pointer
,	O
1.0	int
/	O
(	O
*	O
ord	int
+	O
2	int
)	O
)	O
+	O
safety	double
)	O
;	O
}	O
else	O
{	O
ordp1est	double
=	O
0.0	int
;	O
}	O
if	O
(	O
ordm1est	double
>	O
ordest	double
&&	O
ordm1est	double
>	O
ordp1est	double
&&	O
ordm1est	double
>	O
min_incr	double
)	O
{	O
*	O
ord	int
-=	O
1	int
;	O
}	O
else	O
if	O
(	O
ordp1est	double
>	O
ordest	double
&&	O
ordp1est	double
>	O
ordm1est	double
&&	O
ordp1est	double
>	O
min_incr	double
)	O
{	O
*	O
ord	int
+=	O
1	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msbdf_check_no_order_decrease	function
(	O
size_t	long
const	O
ordprev	pointer
[	O
]	O
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
MSBDF_MAX_ORD	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
ordprev	pointer
[	O
i	long
+	O
1	int
]	O
>	O
ordprev	pointer
[	O
i	long
]	O
)	O
{	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
msbdf_check_step_size_decrease	function
(	O
double	O
const	O
hprev	pointer
[	O
]	O
)	O
{	O
size_t	long
i	long
;	O
double	O
max	double
=	O
fabs	function
(	O
hprev	pointer
[	O
0	int
]	O
)	O
;	O
const	O
double	O
min	double
=	O
fabs	function
(	O
hprev	pointer
[	O
0	int
]	O
)	O
;	O
const	O
double	O
decrease_limit	double
=	O
0.5	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
MSBDF_MAX_ORD	int
;	O
i	long
++	O
)	O
{	O
const	O
double	O
h	double
=	O
fabs	function
(	O
hprev	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
h	double
>	O
min	double
&&	O
h	double
>	O
max	double
)	O
{	O
max	double
=	O
h	double
;	O
}	O
}	O
if	O
(	O
min	double
/	O
max	double
<	O
decrease_limit	double
)	O
{	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
msbdf_apply	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
dim	long
,	O
double	O
t	double
,	O
double	O
h	double
,	O
double	O
y	double
[	O
]	O
,	O
double	O
yerr	array
[	O
]	O
,	O
const	O
double	O
dydt_in	array
[	O
]	O
,	O
double	O
dydt_out	array
[	O
]	O
,	O
const	O
gsl_odeiv2_system	struct
*	O
sys	pointer
)	O
{	O
msbdf_state_t	struct
*	O
state	pointer
=	O
(	O
msbdf_state_t	struct
*	O
)	O
vstate	pointer
;	O
double	O
*	O
const	O
z	double
=	O
state	pointer
->	O
z	double
;	O
double	O
*	O
const	O
zbackup	pointer
=	O
state	pointer
->	O
zbackup	pointer
;	O
double	O
*	O
const	O
ytmp	pointer
=	O
state	pointer
->	O
ytmp	pointer
;	O
double	O
*	O
const	O
ytmp2	pointer
=	O
state	pointer
->	O
ytmp2	pointer
;	O
double	O
*	O
const	O
l	pointer
=	O
state	pointer
->	O
l	pointer
;	O
double	O
*	O
const	O
hprev	pointer
=	O
state	pointer
->	O
hprev	pointer
;	O
double	O
*	O
const	O
hprevbackup	pointer
=	O
state	pointer
->	O
hprevbackup	pointer
;	O
size_t	long
*	O
const	O
ordprev	pointer
=	O
state	pointer
->	O
ordprev	pointer
;	O
size_t	long
*	O
const	O
ordprevbackup	pointer
=	O
state	pointer
->	O
ordprevbackup	pointer
;	O
double	O
*	O
const	O
errlev	pointer
=	O
state	pointer
->	O
errlev	pointer
;	O
gsl_vector	struct
*	O
const	O
abscor	pointer
=	O
state	pointer
->	O
abscor	pointer
;	O
gsl_vector	struct
*	O
const	O
abscorscaled	pointer
=	O
state	pointer
->	O
abscorscaled	pointer
;	O
gsl_vector	struct
*	O
const	O
relcor	pointer
=	O
state	pointer
->	O
relcor	pointer
;	O
gsl_vector	struct
*	O
const	O
svec	pointer
=	O
state	pointer
->	O
svec	pointer
;	O
gsl_vector	struct
*	O
const	O
tempvec	pointer
=	O
state	pointer
->	O
tempvec	pointer
;	O
size_t	long
ord	int
=	O
state	pointer
->	O
ord	int
;	O
double	O
ordm1coeff	pointer
=	O
0.0	int
;	O
double	O
ordp1coeff	pointer
=	O
0.0	int
;	O
double	O
ordp2coeff	pointer
=	O
0.0	int
;	O
double	O
errcoeff	pointer
=	O
0.0	int
;	O
double	O
gamma	function
=	O
0.0	int
;	O
const	O
size_t	long
max_failcount	long
=	O
3	int
;	O
size_t	long
i	long
;	O
if	O
(	O
state	pointer
->	O
ni	long
>	O
0	int
&&	O
(	O
t	double
==	O
state	pointer
->	O
tprev	double
||	O
t	double
==	O
state	pointer
->	O
failt	double
)	O
)	O
{	O
if	O
(	O
state	pointer
->	O
ni	long
==	O
1	int
)	O
{	O
msbdf_reset	function
(	O
vstate	pointer
,	O
dim	long
)	O
;	O
}	O
else	O
{	O
if	O
(	O
ord	int
>	O
ordprev	pointer
[	O
0	int
]	O
)	O
{	O
state	pointer
->	O
ord	int
=	O
ordprev	pointer
[	O
0	int
]	O
;	O
ord	int
=	O
state	pointer
->	O
ord	int
;	O
}	O
DBL_MEMCPY	O
(	O
z	double
,	O
zbackup	pointer
,	O
(	O
MSBDF_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
)	O
;	O
DBL_MEMCPY	O
(	O
hprev	pointer
,	O
hprevbackup	pointer
,	O
MSBDF_MAX_ORD	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
MSBDF_MAX_ORD	int
;	O
i	long
++	O
)	O
{	O
ordprev	pointer
[	O
i	long
]	O
=	O
ordprevbackup	pointer
[	O
i	long
]	O
;	O
}	O
state	pointer
->	O
ordwait	long
=	O
state	pointer
->	O
ordwaitbackup	long
;	O
state	pointer
->	O
gammaprev	double
=	O
state	pointer
->	O
gammaprevbackup	double
;	O
}	O
state	pointer
->	O
failcount	long
++	O
;	O
if	O
(	O
state	pointer
->	O
failcount	long
>	O
max_failcount	long
&&	O
state	pointer
->	O
ni	long
>	O
1	int
)	O
{	O
msbdf_reset	function
(	O
vstate	pointer
,	O
dim	long
)	O
;	O
ord	int
=	O
state	pointer
->	O
ord	int
;	O
}	O
}	O
else	O
{	O
DBL_MEMCPY	O
(	O
zbackup	pointer
,	O
z	double
,	O
(	O
MSBDF_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
)	O
;	O
DBL_MEMCPY	O
(	O
hprevbackup	pointer
,	O
hprev	pointer
,	O
MSBDF_MAX_ORD	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
MSBDF_MAX_ORD	int
;	O
i	long
++	O
)	O
{	O
ordprevbackup	pointer
[	O
i	long
]	O
=	O
ordprev	pointer
[	O
i	long
]	O
;	O
}	O
state	pointer
->	O
ordwaitbackup	long
=	O
state	pointer
->	O
ordwait	long
;	O
state	pointer
->	O
gammaprevbackup	double
=	O
state	pointer
->	O
gammaprev	double
;	O
state	pointer
->	O
failcount	long
=	O
0	int
;	O
}	O
if	O
(	O
state	pointer
->	O
driver	pointer
==	O
NULL	O
)	O
{	O
return	O
GSL_EFAULT	int
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
dydt_in	array
!=	O
NULL	O
)	O
{	O
gsl_odeiv2_control_errlevel	function
(	O
state	pointer
->	O
driver	pointer
->	O
c	pointer
,	O
y	double
[	O
i	long
]	O
,	O
dydt_in	array
[	O
i	long
]	O
,	O
h	double
,	O
i	long
,	O
&	O
errlev	pointer
[	O
i	long
]	O
)	O
;	O
}	O
else	O
{	O
gsl_odeiv2_control_errlevel	function
(	O
state	pointer
->	O
driver	pointer
->	O
c	pointer
,	O
y	double
[	O
i	long
]	O
,	O
0.0	int
,	O
h	double
,	O
i	long
,	O
&	O
errlev	pointer
[	O
i	long
]	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
state	pointer
->	O
ni	long
==	O
0	int
)	O
{	O
size_t	long
i	long
;	O
DBL_ZERO_MEMSET	O
(	O
z	double
,	O
(	O
MSBDF_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
)	O
;	O
if	O
(	O
dydt_in	array
!=	O
NULL	O
)	O
{	O
DBL_MEMCPY	O
(	O
ytmp	pointer
,	O
dydt_in	array
,	O
dim	long
)	O
;	O
}	O
else	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
,	O
y	double
,	O
ytmp	pointer
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
DBL_MEMCPY	O
(	O
&	O
z	double
[	O
0	int
*	O
dim	long
]	O
,	O
y	double
,	O
dim	long
)	O
;	O
DBL_MEMCPY	O
(	O
&	O
z	double
[	O
1	int
*	O
dim	long
]	O
,	O
ytmp	pointer
,	O
dim	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
z	double
[	O
1	int
*	O
dim	long
+	O
i	long
]	O
*=	O
h	double
;	O
}	O
}	O
if	O
(	O
ord	int
>	O
1	int
&&	O
ord	int
-	O
ordprev	pointer
[	O
0	int
]	O
==	O
0	int
&&	O
msbdf_check_no_order_decrease	function
(	O
ordprev	pointer
)	O
&&	O
msbdf_check_step_size_decrease	function
(	O
hprev	pointer
)	O
)	O
{	O
state	pointer
->	O
ord	int
--	O
;	O
state	pointer
->	O
ordwait	long
=	O
ord	int
+	O
2	int
;	O
ord	int
=	O
state	pointer
->	O
ord	int
;	O
}	O
{	O
const	O
int	O
deltaord	int
=	O
ord	int
-	O
ordprev	pointer
[	O
0	int
]	O
;	O
if	O
(	O
deltaord	int
>	O
1	int
||	O
deltaord	int
<	O
-	O
1	int
)	O
{	O
printf	function
(	O
"-- order change %d\n"	pointer
,	O
deltaord	int
)	O
;	O
GSL_ERROR_NULL	O
(	O
"msbdf_apply too large order change"	pointer
,	O
GSL_ESANITY	int
)	O
;	O
}	O
if	O
(	O
deltaord	int
==	O
1	int
)	O
{	O
if	O
(	O
ord	int
>	O
2	int
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
double	O
hsum	double
=	O
h	double
;	O
double	O
coeff1	double
=	O
-	O
1.0	int
;	O
double	O
coeff2	double
=	O
1.0	int
;	O
double	O
hrelprev	double
=	O
1.0	int
;	O
double	O
hrelprod	double
=	O
1.0	int
;	O
double	O
hrel	double
=	O
0.0	int
;	O
DBL_ZERO_MEMSET	O
(	O
l	pointer
,	O
MSBDF_MAX_ORD	int
+	O
1	int
)	O
;	O
l	pointer
[	O
2	int
]	O
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ord	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
hsum	double
+=	O
hprev	pointer
[	O
i	long
]	O
;	O
hrel	double
=	O
hsum	double
/	O
h	double
;	O
hrelprod	double
*=	O
hrel	double
;	O
coeff1	double
-=	O
1.0	int
/	O
(	O
i	long
+	O
1	int
)	O
;	O
coeff2	double
+=	O
1.0	int
/	O
hrel	double
;	O
for	O
(	O
j	long
=	O
i	long
+	O
2	int
;	O
j	long
>	O
1	int
;	O
j	long
--	O
)	O
{	O
l	pointer
[	O
j	long
]	O
*=	O
hrelprev	double
;	O
l	pointer
[	O
j	long
]	O
+=	O
l	pointer
[	O
j	long
-	O
1	int
]	O
;	O
}	O
hrelprev	double
=	O
hrel	double
;	O
}	O
{	O
const	O
double	O
c	pointer
=	O
(	O
-	O
coeff1	double
-	O
coeff2	double
)	O
/	O
hrelprod	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
z	double
[	O
ord	int
*	O
dim	long
+	O
i	long
]	O
=	O
c	pointer
*	O
gsl_vector_get	function
(	O
abscor	pointer
,	O
i	long
)	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
ord	int
;	O
i	long
++	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim	long
;	O
j	long
++	O
)	O
{	O
z	double
[	O
i	long
*	O
dim	long
+	O
j	long
]	O
+=	O
l	pointer
[	O
i	long
]	O
*	O
z	double
[	O
ord	int
*	O
dim	long
+	O
j	long
]	O
;	O
}	O
}	O
else	O
{	O
DBL_ZERO_MEMSET	O
(	O
&	O
z	double
[	O
ord	int
*	O
dim	long
]	O
,	O
dim	long
)	O
;	O
}	O
}	O
if	O
(	O
deltaord	int
==	O
-	O
1	int
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
double	O
hsum	double
=	O
0.0	int
;	O
DBL_ZERO_MEMSET	O
(	O
l	pointer
,	O
MSBDF_MAX_ORD	int
+	O
1	int
)	O
;	O
l	pointer
[	O
2	int
]	O
=	O
1.0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ord	int
;	O
i	long
++	O
)	O
{	O
hsum	double
+=	O
hprev	pointer
[	O
i	long
-	O
1	int
]	O
;	O
for	O
(	O
j	long
=	O
i	long
+	O
2	int
;	O
j	long
>	O
1	int
;	O
j	long
--	O
)	O
{	O
l	pointer
[	O
j	long
]	O
*=	O
hsum	double
/	O
h	double
;	O
l	pointer
[	O
j	long
]	O
+=	O
l	pointer
[	O
j	long
-	O
1	int
]	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
ord	int
+	O
1	int
;	O
i	long
++	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim	long
;	O
j	long
++	O
)	O
{	O
z	double
[	O
i	long
*	O
dim	long
+	O
j	long
]	O
+=	O
-	O
l	pointer
[	O
i	long
]	O
*	O
z	double
[	O
(	O
ord	int
+	O
1	int
)	O
*	O
dim	long
+	O
j	long
]	O
;	O
}	O
}	O
if	O
(	O
state	pointer
->	O
ni	long
>	O
0	int
&&	O
h	double
!=	O
hprev	pointer
[	O
0	int
]	O
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
const	O
double	O
hrel	double
=	O
h	double
/	O
hprev	pointer
[	O
0	int
]	O
;	O
double	O
coeff	double
=	O
hrel	double
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ord	int
+	O
1	int
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim	long
;	O
j	long
++	O
)	O
{	O
z	double
[	O
i	long
*	O
dim	long
+	O
j	long
]	O
*=	O
coeff	double
;	O
}	O
coeff	double
*=	O
hrel	double
;	O
}	O
}	O
msbdf_calccoeffs	function
(	O
ord	int
,	O
state	pointer
->	O
ordwait	long
,	O
h	double
,	O
hprev	pointer
,	O
l	pointer
,	O
&	O
errcoeff	pointer
,	O
&	O
ordm1coeff	pointer
,	O
&	O
ordp1coeff	pointer
,	O
&	O
ordp2coeff	pointer
,	O
&	O
gamma	function
)	O
;	O
{	O
size_t	long
i	long
,	O
j	long
,	O
k	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
ord	int
+	O
1	int
;	O
i	long
++	O
)	O
for	O
(	O
j	long
=	O
ord	int
;	O
j	long
>	O
i	long
-	O
1	int
;	O
j	long
--	O
)	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
dim	long
;	O
k	long
++	O
)	O
{	O
z	double
[	O
(	O
j	long
-	O
1	int
)	O
*	O
dim	long
+	O
k	long
]	O
+=	O
z	double
[	O
j	long
*	O
dim	long
+	O
k	long
]	O
;	O
}	O
}	O
{	O
int	O
s	pointer
;	O
s	pointer
=	O
msbdf_corrector	function
(	O
vstate	pointer
,	O
sys	pointer
,	O
t	double
,	O
h	double
,	O
dim	long
,	O
z	double
,	O
errlev	pointer
,	O
l	pointer
,	O
errcoeff	pointer
,	O
abscor	pointer
,	O
relcor	pointer
,	O
ytmp	pointer
,	O
ytmp2	pointer
,	O
state	pointer
->	O
dfdy	pointer
,	O
state	pointer
->	O
dfdt	array
,	O
state	pointer
->	O
M	int
,	O
state	pointer
->	O
p	int
,	O
state	pointer
->	O
rhs	pointer
,	O
&	O
(	O
state	pointer
->	O
nJ	long
)	O
,	O
&	O
(	O
state	pointer
->	O
nM	long
)	O
,	O
state	pointer
->	O
tprev	double
,	O
state	pointer
->	O
failt	double
,	O
gamma	function
,	O
state	pointer
->	O
gammaprev	double
,	O
hprev	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	pointer
;	O
}	O
}	O
{	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ord	int
+	O
1	int
;	O
i	long
++	O
)	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
dim	long
;	O
j	long
++	O
)	O
{	O
z	double
[	O
i	long
*	O
dim	long
+	O
j	long
]	O
+=	O
l	pointer
[	O
i	long
]	O
*	O
gsl_vector_get	function
(	O
abscor	pointer
,	O
j	long
)	O
;	O
}	O
if	O
(	O
dydt_out	array
!=	O
NULL	O
)	O
{	O
int	O
s	pointer
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	pointer
,	O
t	double
+	O
h	double
,	O
z	double
,	O
dydt_out	array
)	O
;	O
if	O
(	O
s	pointer
==	O
GSL_EBADFUNC	int
)	O
{	O
return	O
s	pointer
;	O
}	O
if	O
(	O
s	pointer
!=	O
GSL_SUCCESS	int
)	O
{	O
msbdf_failurehandler	function
(	O
vstate	pointer
,	O
dim	long
,	O
t	double
)	O
;	O
return	O
s	pointer
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
yerr	array
[	O
i	long
]	O
=	O
fabs	function
(	O
gsl_vector_get	function
(	O
abscor	pointer
,	O
i	long
)	O
)	O
*	O
errcoeff	pointer
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
y	double
[	O
i	long
]	O
=	O
z	double
[	O
0	int
*	O
dim	long
+	O
i	long
]	O
;	O
}	O
}	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	function
(	O
abscorscaled	pointer
,	O
i	long
,	O
gsl_vector_get	function
(	O
abscor	pointer
,	O
i	long
)	O
/	O
errlev	pointer
[	O
i	long
]	O
)	O
;	O
}	O
}	O
if	O
(	O
state	pointer
->	O
ordwait	long
==	O
1	int
&&	O
ord	int
<	O
MSBDF_MAX_ORD	int
)	O
{	O
size_t	long
i	long
;	O
state	pointer
->	O
ordp1coeffprev	double
=	O
ordp1coeff	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
gsl_vector_set	function
(	O
svec	pointer
,	O
i	long
,	O
gsl_vector_get	function
(	O
abscorscaled	pointer
,	O
i	long
)	O
)	O
;	O
}	O
}	O
if	O
(	O
state	pointer
->	O
ordwait	long
==	O
0	int
)	O
{	O
if	O
(	O
ord	int
-	O
ordprev	pointer
[	O
0	int
]	O
==	O
0	int
)	O
{	O
msbdf_eval_order	function
(	O
abscorscaled	pointer
,	O
tempvec	pointer
,	O
svec	pointer
,	O
errcoeff	pointer
,	O
dim	long
,	O
errlev	pointer
,	O
ordm1coeff	pointer
,	O
ordp1coeff	pointer
,	O
state	pointer
->	O
ordp1coeffprev	double
,	O
ordp2coeff	pointer
,	O
hprev	pointer
,	O
h	double
,	O
z	double
,	O
&	O
(	O
state	pointer
->	O
ord	int
)	O
)	O
;	O
state	pointer
->	O
ordwait	long
=	O
state	pointer
->	O
ord	int
+	O
2	int
;	O
}	O
else	O
{	O
state	pointer
->	O
ordwait	long
=	O
2	int
;	O
}	O
}	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
MSBDF_MAX_ORD	int
-	O
1	int
;	O
i	long
>	O
0	int
;	O
i	long
--	O
)	O
{	O
hprev	pointer
[	O
i	long
]	O
=	O
hprev	pointer
[	O
i	long
-	O
1	int
]	O
;	O
ordprev	pointer
[	O
i	long
]	O
=	O
ordprev	pointer
[	O
i	long
-	O
1	int
]	O
;	O
}	O
}	O
hprev	pointer
[	O
0	int
]	O
=	O
h	double
;	O
ordprev	pointer
[	O
0	int
]	O
=	O
ord	int
;	O
state	pointer
->	O
tprev	double
=	O
t	double
;	O
state	pointer
->	O
ordwait	long
--	O
;	O
state	pointer
->	O
ni	long
++	O
;	O
state	pointer
->	O
gammaprev	double
=	O
gamma	function
;	O
state	pointer
->	O
nJ	long
++	O
;	O
state	pointer
->	O
nM	long
++	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msbdf_set_driver	function
(	O
void	O
*	O
vstate	pointer
,	O
const	O
gsl_odeiv2_driver	struct
*	O
d	pointer
)	O
{	O
msbdf_state_t	struct
*	O
state	pointer
=	O
(	O
msbdf_state_t	struct
*	O
)	O
vstate	pointer
;	O
state	pointer
->	O
driver	pointer
=	O
d	pointer
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
msbdf_reset	function
(	O
void	O
*	O
vstate	pointer
,	O
size_t	long
dim	long
)	O
{	O
msbdf_state_t	struct
*	O
state	pointer
=	O
(	O
msbdf_state_t	struct
*	O
)	O
vstate	pointer
;	O
size_t	long
i	long
;	O
state	pointer
->	O
ni	long
=	O
0	int
;	O
state	pointer
->	O
ord	int
=	O
1	int
;	O
state	pointer
->	O
ordwait	long
=	O
2	int
;	O
state	pointer
->	O
ordwaitbackup	long
=	O
2	int
;	O
state	pointer
->	O
failord	long
=	O
0	int
;	O
state	pointer
->	O
failt	double
=	O
GSL_NAN	O
;	O
state	pointer
->	O
tprev	double
=	O
GSL_NAN	O
;	O
state	pointer
->	O
gammaprev	double
=	O
1.0	int
;	O
state	pointer
->	O
gammaprevbackup	double
=	O
1.0	int
;	O
state	pointer
->	O
nJ	long
=	O
0	int
;	O
state	pointer
->	O
nM	long
=	O
0	int
;	O
state	pointer
->	O
failcount	long
=	O
0	int
;	O
state	pointer
->	O
ordp1coeffprev	double
=	O
0.0	int
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
hprev	pointer
,	O
MSBDF_MAX_ORD	int
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
hprevbackup	pointer
,	O
MSBDF_MAX_ORD	int
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
z	double
,	O
(	O
MSBDF_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	pointer
->	O
zbackup	pointer
,	O
(	O
MSBDF_MAX_ORD	int
+	O
1	int
)	O
*	O
dim	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
MSBDF_MAX_ORD	int
;	O
i	long
++	O
)	O
{	O
state	pointer
->	O
ordprev	pointer
[	O
i	long
]	O
=	O
1	int
;	O
state	pointer
->	O
ordprevbackup	pointer
[	O
i	long
]	O
=	O
1	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
unsigned	O
int	O
msbdf_order	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
msbdf_state_t	struct
*	O
state	pointer
=	O
(	O
msbdf_state_t	struct
*	O
)	O
vstate	pointer
;	O
return	O
state	pointer
->	O
ord	int
;	O
}	O
static	O
void	O
msbdf_free	function
(	O
void	O
*	O
vstate	pointer
)	O
{	O
msbdf_state_t	struct
*	O
state	pointer
=	O
(	O
msbdf_state_t	struct
*	O
)	O
vstate	pointer
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
rhs	pointer
)	O
;	O
gsl_permutation_free	function
(	O
state	pointer
->	O
p	int
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
M	int
)	O
;	O
free	function
(	O
state	pointer
->	O
dfdt	array
)	O
;	O
gsl_matrix_free	function
(	O
state	pointer
->	O
dfdy	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
tempvec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
svec	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
relcor	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
abscor	pointer
)	O
;	O
gsl_vector_free	function
(	O
state	pointer
->	O
abscorscaled	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
errlev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ordprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprevbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
hprev	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
l	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp2	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
ytmp	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
zbackup	pointer
)	O
;	O
free	function
(	O
state	pointer
->	O
z	double
)	O
;	O
free	function
(	O
state	pointer
)	O
;	O
}	O
static	O
const	O
gsl_odeiv2_step_type	struct
msbdf_type	struct
=	O
{	O
"msbdf"	pointer
,	O
1	int
,	O
1	int
,	O
&	O
msbdf_alloc	function
,	O
&	O
msbdf_apply	function
,	O
&	O
msbdf_set_driver	function
,	O
&	O
msbdf_reset	function
,	O
&	O
msbdf_order	function
,	O
&	O
msbdf_free	function
}	O
;	O
const	O
gsl_odeiv2_step_type	struct
*	O
gsl_odeiv2_step_msbdf	pointer
=	O
&	O
msbdf_type	struct
;	O
