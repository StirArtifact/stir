static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: bt_stat.c,v 1.3 2000/06/28 16:47:00 loic Exp $"	pointer
;	O
int	O
CDB___bam_stat	function
(	O
dbp	pointer
,	O
spp	pointer
,	O
db_malloc	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
void	O
*	O
spp	pointer
;	O
void	O
*	O
(	O
*	O
db_malloc	pointer
)	O
__P	O
(	O
(	O
size_t	long
)	O
)	O
;	O
u_int32_t	int
flags	int
;	O
{	O
BTMETA	struct
*	O
meta	pointer
;	O
BTREE	struct
*	O
t	pointer
;	O
BTREE_CURSOR	struct
*	O
cp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_BTREE_STAT	struct
*	O
sp	pointer
;	O
DB_LOCK	struct
lock	struct
;	O
PAGE	struct
*	O
h	pointer
;	O
db_pgno_t	int
pgno	int
;	O
int	O
ret	int
,	O
t_ret	int
;	O
PANIC_CHECK	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
;	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"DB->stat"	pointer
)	O
;	O
meta	pointer
=	O
NULL	O
;	O
t	pointer
=	O
dbp	pointer
->	O
bt_internal	pointer
;	O
sp	pointer
=	O
NULL	O
;	O
lock	struct
.	O
off	long
=	O
LOCK_INVALID	O
;	O
h	pointer
=	O
NULL	O
;	O
ret	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_statchk	function
(	O
dbp	pointer
,	O
flags	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
cursor	pointer
(	O
dbp	pointer
,	O
NULL	O
,	O
&	O
dbc	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
cp	pointer
=	O
(	O
BTREE_CURSOR	struct
*	O
)	O
dbc	pointer
->	O
internal	pointer
;	O
DEBUG_LWRITE	O
(	O
dbc	pointer
,	O
NULL	O
,	O
"bam_stat"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
flags	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
sizeof	O
(	O
*	O
sp	pointer
)	O
,	O
db_malloc	pointer
,	O
&	O
sp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
memset	function
(	O
sp	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
sp	pointer
)	O
)	O
;	O
if	O
(	O
flags	int
==	O
DB_RECORDCOUNT	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
cp	pointer
->	O
root	int
,	O
DB_LOCK_READ	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
cp	pointer
->	O
root	int
,	O
0	int
,	O
(	O
PAGE	struct
*	O
*	O
)	O
&	O
h	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
sp	pointer
->	O
bt_nkeys	int
=	O
RE_NREC	O
(	O
h	pointer
)	O
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
flags	int
==	O
DB_CACHED_COUNTS	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
t	pointer
->	O
bt_meta	int
,	O
DB_LOCK_READ	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
t	pointer
->	O
bt_meta	int
,	O
0	int
,	O
(	O
PAGE	struct
*	O
*	O
)	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
sp	pointer
->	O
bt_nkeys	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
key_count	int
;	O
sp	pointer
->	O
bt_ndata	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
record_count	int
;	O
goto	O
done	O
;	O
}	O
pgno	int
=	O
PGNO_BASE_MD	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
pgno	int
,	O
DB_LOCK_READ	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
(	O
PAGE	struct
*	O
*	O
)	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
for	O
(	O
sp	pointer
->	O
bt_free	int
=	O
0	int
,	O
pgno	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
free	int
;	O
pgno	int
!=	O
PGNO_INVALID	int
;	O
)	O
{	O
++	O
sp	pointer
->	O
bt_free	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
h	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
pgno	int
=	O
h	pointer
->	O
next_pgno	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
h	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
h	pointer
=	O
NULL	O
;	O
}	O
pgno	int
=	O
cp	pointer
->	O
root	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
pgno	int
,	O
DB_LOCK_READ	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
h	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
sp	pointer
->	O
bt_levels	int
=	O
h	pointer
->	O
level	char
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
h	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
h	pointer
=	O
NULL	O
;	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_traverse	function
(	O
dbc	pointer
,	O
DB_LOCK_READ	int
,	O
cp	pointer
->	O
root	int
,	O
CDB___bam_stat_callback	function
,	O
sp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
t	pointer
->	O
bt_meta	int
!=	O
PGNO_BASE_MD	int
||	O
!	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
meta	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
meta	pointer
=	O
NULL	O
;	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
t	pointer
->	O
bt_meta	int
,	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
?	O
DB_LOCK_READ	int
:	O
DB_LOCK_WRITE	int
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
t	pointer
->	O
bt_meta	int
,	O
0	int
,	O
(	O
PAGE	struct
*	O
*	O
)	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
}	O
sp	pointer
->	O
bt_metaflags	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
flags	int
;	O
sp	pointer
->	O
bt_maxkey	int
=	O
meta	pointer
->	O
maxkey	int
;	O
sp	pointer
->	O
bt_minkey	int
=	O
meta	pointer
->	O
minkey	int
;	O
sp	pointer
->	O
bt_re_len	int
=	O
meta	pointer
->	O
re_len	int
;	O
sp	pointer
->	O
bt_re_pad	int
=	O
meta	pointer
->	O
re_pad	int
;	O
sp	pointer
->	O
bt_pagesize	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
pagesize	long
;	O
sp	pointer
->	O
bt_magic	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
magic	int
;	O
sp	pointer
->	O
bt_version	int
=	O
meta	pointer
->	O
dbmeta	struct
.	O
version	int
;	O
if	O
(	O
!	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
)	O
{	O
meta	pointer
->	O
dbmeta	struct
.	O
key_count	int
=	O
sp	pointer
->	O
bt_nkeys	int
;	O
meta	pointer
->	O
dbmeta	struct
.	O
record_count	int
=	O
sp	pointer
->	O
bt_ndata	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
meta	pointer
,	O
F_ISSET	O
(	O
dbp	pointer
,	O
DB_AM_RDONLY	int
)	O
?	O
0	int
:	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
meta	pointer
=	O
NULL	O
;	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
done	O
:	O
*	O
(	O
DB_BTREE_STAT	struct
*	O
*	O
)	O
spp	pointer
=	O
sp	pointer
;	O
if	O
(	O
0	int
)	O
{	O
err	pointer
:	O
if	O
(	O
sp	pointer
!=	O
NULL	O
)	O
CDB___os_free	function
(	O
sp	pointer
,	O
sizeof	O
(	O
*	O
sp	pointer
)	O
)	O
;	O
}	O
if	O
(	O
h	pointer
!=	O
NULL	O
&&	O
(	O
t_ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
h	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
if	O
(	O
meta	pointer
!=	O
NULL	O
&&	O
(	O
t_ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
meta	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
if	O
(	O
lock	struct
.	O
off	long
!=	O
LOCK_INVALID	O
)	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
if	O
(	O
(	O
t_ret	int
=	O
dbc	pointer
->	O
c_close	pointer
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_traverse	function
(	O
dbc	pointer
,	O
mode	enum
,	O
root_pgno	int
,	O
callback	pointer
,	O
cookie	pointer
)	O
DBC	struct
*	O
dbc	pointer
;	O
db_lockmode_t	enum
mode	enum
;	O
db_pgno_t	int
root_pgno	int
;	O
int	O
(	O
*	O
callback	pointer
)	O
__P	O
(	O
(	O
DB	struct
*	O
,	O
PAGE	struct
*	O
,	O
void	O
*	O
,	O
int	O
*	O
)	O
)	O
;	O
void	O
*	O
cookie	pointer
;	O
{	O
BINTERNAL	struct
*	O
bi	pointer
;	O
BKEYDATA	struct
*	O
bk	pointer
;	O
DB	struct
*	O
dbp	pointer
;	O
DB_LOCK	struct
lock	struct
;	O
PAGE	struct
*	O
h	pointer
;	O
RINTERNAL	struct
*	O
ri	pointer
;	O
db_indx_t	short
indx	short
;	O
int	O
already_put	int
,	O
ret	int
,	O
t_ret	int
;	O
dbp	pointer
=	O
dbc	pointer
->	O
dbp	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_lget	function
(	O
dbc	pointer
,	O
0	int
,	O
root_pgno	int
,	O
mode	enum
,	O
0	int
,	O
&	O
lock	struct
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
&	O
root_pgno	int
,	O
0	int
,	O
&	O
h	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
switch	O
(	O
TYPE	O
(	O
h	pointer
)	O
)	O
{	O
case	O
P_IBTREE	int
:	O
for	O
(	O
indx	short
=	O
0	int
;	O
indx	short
<	O
NUM_ENT	O
(	O
h	pointer
)	O
;	O
indx	short
+=	O
O_INDX	int
)	O
{	O
bi	pointer
=	O
GET_BINTERNAL	O
(	O
h	pointer
,	O
indx	short
)	O
;	O
if	O
(	O
B_TYPE	O
(	O
bi	pointer
->	O
type	enum
)	O
==	O
B_OVERFLOW	int
&&	O
(	O
ret	int
=	O
CDB___db_traverse_big	function
(	O
dbp	pointer
,	O
(	O
(	O
BOVERFLOW	struct
*	O
)	O
bi	pointer
->	O
data	pointer
)	O
->	O
pgno	int
,	O
callback	pointer
,	O
cookie	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_traverse	function
(	O
dbc	pointer
,	O
mode	enum
,	O
bi	pointer
->	O
pgno	int
,	O
callback	pointer
,	O
cookie	pointer
)	O
)	O
!=	O
0	int
)	O
break	O
;	O
}	O
break	O
;	O
case	O
P_IRECNO	int
:	O
for	O
(	O
indx	short
=	O
0	int
;	O
indx	short
<	O
NUM_ENT	O
(	O
h	pointer
)	O
;	O
indx	short
+=	O
O_INDX	int
)	O
{	O
ri	pointer
=	O
GET_RINTERNAL	O
(	O
h	pointer
,	O
indx	short
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_traverse	function
(	O
dbc	pointer
,	O
mode	enum
,	O
ri	pointer
->	O
pgno	int
,	O
callback	pointer
,	O
cookie	pointer
)	O
)	O
!=	O
0	int
)	O
break	O
;	O
}	O
break	O
;	O
case	O
P_LBTREE	int
:	O
for	O
(	O
indx	short
=	O
0	int
;	O
indx	short
<	O
NUM_ENT	O
(	O
h	pointer
)	O
;	O
indx	short
+=	O
P_INDX	int
)	O
{	O
bk	pointer
=	O
GET_BKEYDATA	O
(	O
h	pointer
,	O
indx	short
)	O
;	O
if	O
(	O
B_TYPE	O
(	O
bk	pointer
->	O
type	enum
)	O
==	O
B_OVERFLOW	int
&&	O
(	O
ret	int
=	O
CDB___db_traverse_big	function
(	O
dbp	pointer
,	O
GET_BOVERFLOW	O
(	O
h	pointer
,	O
indx	short
)	O
->	O
pgno	int
,	O
callback	pointer
,	O
cookie	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
bk	pointer
=	O
GET_BKEYDATA	O
(	O
h	pointer
,	O
indx	short
+	O
O_INDX	int
)	O
;	O
if	O
(	O
B_TYPE	O
(	O
bk	pointer
->	O
type	enum
)	O
==	O
B_DUPLICATE	int
&&	O
(	O
ret	int
=	O
CDB___bam_traverse	function
(	O
dbc	pointer
,	O
mode	enum
,	O
GET_BOVERFLOW	O
(	O
h	pointer
,	O
indx	short
+	O
O_INDX	int
)	O
->	O
pgno	int
,	O
callback	pointer
,	O
cookie	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
B_TYPE	O
(	O
bk	pointer
->	O
type	enum
)	O
==	O
B_OVERFLOW	int
&&	O
(	O
ret	int
=	O
CDB___db_traverse_big	function
(	O
dbp	pointer
,	O
GET_BOVERFLOW	O
(	O
h	pointer
,	O
indx	short
+	O
O_INDX	int
)	O
->	O
pgno	int
,	O
callback	pointer
,	O
cookie	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
}	O
break	O
;	O
}	O
already_put	int
=	O
0	int
;	O
if	O
(	O
(	O
ret	int
=	O
callback	pointer
(	O
dbp	pointer
,	O
h	pointer
,	O
cookie	pointer
,	O
&	O
already_put	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
err	pointer
:	O
if	O
(	O
!	O
already_put	int
&&	O
(	O
t_ret	int
=	O
CDB_memp_fput	function
(	O
dbp	pointer
->	O
mpf	pointer
,	O
h	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
!=	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
__LPUT	O
(	O
dbc	pointer
,	O
lock	struct
)	O
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
int	O
CDB___bam_stat_callback	function
(	O
dbp	pointer
,	O
h	pointer
,	O
cookie	pointer
,	O
putp	pointer
)	O
DB	struct
*	O
dbp	pointer
;	O
PAGE	struct
*	O
h	pointer
;	O
void	O
*	O
cookie	pointer
;	O
int	O
*	O
putp	pointer
;	O
{	O
DB_BTREE_STAT	struct
*	O
sp	pointer
;	O
db_indx_t	short
indx	short
,	O
top	short
;	O
u_int8_t	char
type	enum
;	O
sp	pointer
=	O
cookie	pointer
;	O
*	O
putp	pointer
=	O
0	int
;	O
top	short
=	O
NUM_ENT	O
(	O
h	pointer
)	O
;	O
switch	O
(	O
TYPE	O
(	O
h	pointer
)	O
)	O
{	O
case	O
P_IBTREE	int
:	O
case	O
P_IRECNO	int
:	O
++	O
sp	pointer
->	O
bt_int_pg	int
;	O
sp	pointer
->	O
bt_int_pgfree	int
+=	O
P_FREESPACE	O
(	O
h	pointer
)	O
;	O
break	O
;	O
case	O
P_LBTREE	int
:	O
for	O
(	O
indx	short
=	O
0	int
;	O
indx	short
<	O
top	short
;	O
indx	short
+=	O
P_INDX	int
)	O
{	O
if	O
(	O
indx	short
+	O
P_INDX	int
>=	O
top	short
||	O
h	pointer
->	O
inp	array
[	O
indx	short
]	O
!=	O
h	pointer
->	O
inp	array
[	O
indx	short
+	O
P_INDX	int
]	O
)	O
++	O
sp	pointer
->	O
bt_nkeys	int
;	O
type	enum
=	O
GET_BKEYDATA	O
(	O
h	pointer
,	O
indx	short
+	O
O_INDX	int
)	O
->	O
type	enum
;	O
if	O
(	O
!	O
B_DISSET	O
(	O
type	enum
)	O
&&	O
B_TYPE	O
(	O
type	enum
)	O
!=	O
B_DUPLICATE	int
)	O
++	O
sp	pointer
->	O
bt_ndata	int
;	O
}	O
++	O
sp	pointer
->	O
bt_leaf_pg	int
;	O
sp	pointer
->	O
bt_leaf_pgfree	int
+=	O
P_FREESPACE	O
(	O
h	pointer
)	O
;	O
break	O
;	O
case	O
P_LRECNO	int
:	O
if	O
(	O
dbp	pointer
->	O
type	enum
==	O
DB_RECNO	int
)	O
{	O
sp	pointer
->	O
bt_nkeys	int
+=	O
top	short
;	O
sp	pointer
->	O
bt_ndata	int
+=	O
top	short
;	O
++	O
sp	pointer
->	O
bt_leaf_pg	int
;	O
sp	pointer
->	O
bt_leaf_pgfree	int
+=	O
P_FREESPACE	O
(	O
h	pointer
)	O
;	O
}	O
else	O
{	O
sp	pointer
->	O
bt_ndata	int
+=	O
top	short
;	O
++	O
sp	pointer
->	O
bt_dup_pg	int
;	O
sp	pointer
->	O
bt_dup_pgfree	int
+=	O
P_FREESPACE	O
(	O
h	pointer
)	O
;	O
}	O
break	O
;	O
case	O
P_LDUP	int
:	O
for	O
(	O
indx	short
=	O
0	int
;	O
indx	short
<	O
top	short
;	O
indx	short
+=	O
O_INDX	int
)	O
if	O
(	O
!	O
B_DISSET	O
(	O
GET_BKEYDATA	O
(	O
h	pointer
,	O
indx	short
)	O
->	O
type	enum
)	O
)	O
++	O
sp	pointer
->	O
bt_ndata	int
;	O
++	O
sp	pointer
->	O
bt_dup_pg	int
;	O
sp	pointer
->	O
bt_dup_pgfree	int
+=	O
P_FREESPACE	O
(	O
h	pointer
)	O
;	O
break	O
;	O
case	O
P_OVERFLOW	int
:	O
++	O
sp	pointer
->	O
bt_over_pg	int
;	O
sp	pointer
->	O
bt_over_pgfree	int
+=	O
P_OVFLSPACE	O
(	O
dbp	pointer
->	O
pgsize	int
,	O
h	pointer
)	O
;	O
break	O
;	O
case	O
P_CMPR_FREE	int
:	O
case	O
P_CMPR_INTERNAL	int
:	O
break	O
;	O
default	O
:	O
return	O
(	O
CDB___db_pgfmt	function
(	O
dbp	pointer
,	O
h	pointer
->	O
pgno	int
)	O
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
CDB___bam_key_range	function
(	O
dbp	pointer
,	O
txn	pointer
,	O
dbt	struct
,	O
kp	pointer
,	O
flags	int
)	O
DB	struct
*	O
dbp	pointer
;	O
DB_TXN	struct
*	O
txn	pointer
;	O
DBT	struct
*	O
dbt	struct
;	O
DB_KEY_RANGE	struct
*	O
kp	pointer
;	O
u_int32_t	int
flags	int
;	O
{	O
BTREE_CURSOR	struct
*	O
cp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
EPG	struct
*	O
sp	pointer
;	O
double	O
factor	double
;	O
int	O
exact	int
,	O
ret	int
,	O
t_ret	int
;	O
PANIC_CHECK	O
(	O
dbp	pointer
->	O
dbenv	pointer
)	O
;	O
DB_ILLEGAL_BEFORE_OPEN	O
(	O
dbp	pointer
,	O
"DB->key_range"	pointer
)	O
;	O
if	O
(	O
flags	int
!=	O
0	int
)	O
return	O
(	O
CDB___db_ferr	function
(	O
dbp	pointer
->	O
dbenv	pointer
,	O
"DB->key_range"	pointer
,	O
0	int
)	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
dbp	pointer
->	O
cursor	pointer
(	O
dbp	pointer
,	O
txn	pointer
,	O
&	O
dbc	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
)	O
return	O
(	O
ret	int
)	O
;	O
DEBUG_LWRITE	O
(	O
dbc	pointer
,	O
NULL	O
,	O
"bam_key_range"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_search	function
(	O
dbc	pointer
,	O
dbt	struct
,	O
S_STK_ONLY	int
,	O
1	int
,	O
NULL	O
,	O
&	O
exact	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
cp	pointer
=	O
(	O
BTREE_CURSOR	struct
*	O
)	O
dbc	pointer
->	O
internal	pointer
;	O
kp	pointer
->	O
less	double
=	O
kp	pointer
->	O
greater	double
=	O
0.0	int
;	O
factor	double
=	O
1.0	int
;	O
cp	pointer
->	O
csp	pointer
->	O
entries	short
/=	O
2	int
;	O
cp	pointer
->	O
csp	pointer
->	O
indx	short
/=	O
2	int
;	O
for	O
(	O
sp	pointer
=	O
cp	pointer
->	O
sp	pointer
;	O
sp	pointer
<=	O
cp	pointer
->	O
csp	pointer
;	O
++	O
sp	pointer
)	O
{	O
if	O
(	O
sp	pointer
->	O
indx	short
==	O
0	int
)	O
kp	pointer
->	O
greater	double
+=	O
factor	double
*	O
(	O
sp	pointer
->	O
entries	short
-	O
1	int
)	O
/	O
sp	pointer
->	O
entries	short
;	O
else	O
if	O
(	O
sp	pointer
->	O
indx	short
==	O
sp	pointer
->	O
entries	short
)	O
kp	pointer
->	O
less	double
+=	O
factor	double
;	O
else	O
{	O
kp	pointer
->	O
less	double
+=	O
factor	double
*	O
sp	pointer
->	O
indx	short
/	O
sp	pointer
->	O
entries	short
;	O
kp	pointer
->	O
greater	double
+=	O
factor	double
*	O
(	O
sp	pointer
->	O
entries	short
-	O
sp	pointer
->	O
indx	short
-	O
1	int
)	O
/	O
sp	pointer
->	O
entries	short
;	O
}	O
factor	double
*=	O
1.0	int
/	O
sp	pointer
->	O
entries	short
;	O
}	O
if	O
(	O
exact	int
)	O
kp	pointer
->	O
equal	double
=	O
factor	double
;	O
else	O
{	O
if	O
(	O
kp	pointer
->	O
less	double
!=	O
1	int
)	O
kp	pointer
->	O
greater	double
+=	O
factor	double
;	O
kp	pointer
->	O
equal	double
=	O
0	int
;	O
}	O
BT_STK_CLR	O
(	O
cp	pointer
)	O
;	O
err	pointer
:	O
if	O
(	O
(	O
t_ret	int
=	O
dbc	pointer
->	O
c_close	pointer
(	O
dbc	pointer
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
return	O
(	O
ret	int
)	O
;	O
}	O
