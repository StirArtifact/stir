static	O
void	O
displace	function
(	O
object	O
,	O
object	O
,	O
int	O
)	O
;	O
static	O
enum	O
aelttype	O
Iarray_element_type	function
(	O
object	O
)	O
;	O
DEFCONST	function
(	O
"ARRAY-RANK-LIMIT"	pointer
,	O
sLarray_rank_limit	O
,	O
LISP	O
,	O
make_fixnum	function
(	O
ARRAY_RANK_LIMIT	O
)	O
,	O
""	pointer
)	O
;	O
DEFCONST	function
(	O
"ARRAY-DIMENSION-LIMIT"	pointer
,	O
sLarray_dimension_limit	O
,	O
LISP	O
,	O
make_fixnum	function
(	O
MOST_POSITIVE_FIX	O
)	O
,	O
""	pointer
)	O
;	O
DEFCONST	function
(	O
"ARRAY-TOTAL-SIZE-LIMIT"	pointer
,	O
sLarray_total_size_limit	O
,	O
LISP	O
,	O
make_fixnum	function
(	O
MOST_POSITIVE_FIX	O
)	O
,	O
""	pointer
)	O
;	O
DEF_ORDINARY	function
(	O
"BIT"	pointer
,	O
sLbit	O
,	O
LISP	O
,	O
""	pointer
)	O
;	O
extern	O
short	O
aet_sizes	array
[	O
]	O
;	O
DEFUNO_NEW	function
(	O
"AREF"	pointer
,	O
object	O
,	O
fLaref	O
,	O
LISP	O
,	O
1	int
,	O
ARRAY_RANK_LIMIT	O
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Laref	O
,	O
(	O
object	O
x	int
,	O
object	O
oi	O
,	O
...	O
)	O
,	O
""	pointer
)	O
{	O
int	O
n	int
=	O
VFUN_NARGS	O
;	O
int	O
i1	int
;	O
fixnum	O
i	int
=	O
n	int
>	O
1	int
?	O
fix	function
(	O
oi	O
)	O
:	O
0	int
;	O
va_list	O
ap	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_array	O
)	O
{	O
int	O
m	int
;	O
unsigned	O
int	O
k	int
;	O
int	O
rank	int
=	O
n	int
-	O
1	int
;	O
if	O
(	O
x	int
->	O
a	O
.	O
a_rank	O
!=	O
rank	int
)	O
FEerror	function
(	O
" ~a has wrong rank"	pointer
,	O
1	int
,	O
x	int
)	O
;	O
if	O
(	O
rank	int
==	O
1	int
)	O
return	O
fLrow_major_aref	function
(	O
x	int
,	O
i	int
)	O
;	O
if	O
(	O
rank	int
==	O
0	int
)	O
return	O
fLrow_major_aref	function
(	O
x	int
,	O
0	int
)	O
;	O
va_start	O
(	O
ap	O
,	O
oi	O
)	O
;	O
m	int
=	O
0	int
;	O
k	int
=	O
i	int
;	O
i1	int
=	O
0	int
;	O
rank	int
--	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
k	int
>=	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
m	int
]	O
)	O
FEerror	function
(	O
"Index ~a to array is too large"	pointer
,	O
1	int
,	O
make_fixnum	function
(	O
m	int
)	O
)	O
;	O
i1	int
+=	O
k	int
;	O
m	int
++	O
;	O
if	O
(	O
m	int
<=	O
rank	int
)	O
{	O
i1	int
=	O
i1	int
*	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
m	int
]	O
;	O
if	O
(	O
m	int
<	O
N_FIXNUM_ARGS	int
)	O
{	O
k	int
=	O
fixint	function
(	O
va_arg	function
(	O
ap	O
,	O
object	O
)	O
)	O
;	O
}	O
else	O
{	O
object	O
x	int
=	O
va_arg	function
(	O
ap	O
,	O
object	O
)	O
;	O
check_type	function
(	O
x	int
,	O
t_fixnum	O
)	O
;	O
k	int
=	O
Mfix	function
(	O
x	int
)	O
;	O
}	O
}	O
else	O
break	O
;	O
}	O
va_end	O
(	O
ap	O
)	O
;	O
return	O
fLrow_major_aref	function
(	O
x	int
,	O
i1	int
)	O
;	O
}	O
if	O
(	O
n	int
>	O
2	int
)	O
{	O
FEerror	function
(	O
"Too many args (~a) to aref"	pointer
,	O
1	int
,	O
make_fixnum	function
(	O
n	int
)	O
)	O
;	O
}	O
return	O
fLrow_major_aref	function
(	O
x	int
,	O
i	int
)	O
;	O
}	O
static	O
void	O
fScheck_bounds_bounds	function
(	O
object	O
x	int
,	O
int	O
i	int
)	O
{	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_array	O
:	O
case	O
t_vector	O
:	O
case	O
t_bitvector	O
:	O
case	O
t_string	O
:	O
if	O
(	O
(	O
unsigned	O
int	O
)	O
i	int
>=	O
x	int
->	O
a	O
.	O
a_dim	O
)	O
FEerror	function
(	O
"Array index ~a out of bounds for ~a"	pointer
,	O
2	int
,	O
make_fixnum	function
(	O
i	int
)	O
,	O
x	int
)	O
;	O
default	O
:	O
FEerror	function
(	O
"not an array"	pointer
,	O
0	int
)	O
;	O
}	O
}	O
DEFUNO_NEW	function
(	O
"SVREF"	pointer
,	O
object	O
,	O
fLsvref	O
,	O
LISP	O
,	O
2	int
,	O
2	int
,	O
ONE_VAL	O
,	O
OO	O
,	O
IO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Lsvref	O
,	O
(	O
object	O
x	int
,	O
ufixnum	O
i	int
)	O
,	O
"For array X and index I it returns (aref x i) "	pointer
)	O
{	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_vector	O
&&	O
(	O
enum	O
aelttype	O
)	O
x	int
->	O
v	int
.	O
v_elttype	O
==	O
aet_object	O
&&	O
x	int
->	O
v	int
.	O
v_dim	O
>	O
i	int
)	O
RETURN1	function
(	O
x	int
->	O
v	int
.	O
v_self	O
[	O
i	int
]	O
)	O
;	O
if	O
(	O
x	int
->	O
v	int
.	O
v_dim	O
>	O
i	int
)	O
illegal_index	function
(	O
x	int
,	O
make_fixnum	function
(	O
i	int
)	O
)	O
;	O
FEerror	function
(	O
"Bad simple vector ~a"	pointer
,	O
1	int
,	O
x	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"ROW-MAJOR-AREF"	pointer
,	O
object	O
,	O
fLrow_major_aref	function
,	O
LISP	O
,	O
2	int
,	O
2	int
,	O
NONE	O
,	O
OO	O
,	O
IO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
x	int
,	O
fixnum	O
i	int
)	O
,	O
"For array X and index I it returns (aref x i) as if x were 1 dimensional, even though its rank may be bigger than 1"	pointer
)	O
{	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_array	O
:	O
case	O
t_vector	O
:	O
case	O
t_bitvector	O
:	O
if	O
(	O
x	int
->	O
v	int
.	O
v_dim	O
<=	O
(	O
unsigned	O
int	O
)	O
i	int
)	O
fScheck_bounds_bounds	function
(	O
x	int
,	O
i	int
)	O
;	O
switch	O
(	O
x	int
->	O
v	int
.	O
v_elttype	O
)	O
{	O
case	O
aet_object	O
:	O
return	O
x	int
->	O
v	int
.	O
v_self	O
[	O
i	int
]	O
;	O
case	O
aet_ch	O
:	O
return	O
code_char	function
(	O
x	int
->	O
st	O
.	O
st_self	O
[	O
i	int
]	O
)	O
;	O
case	O
aet_bit	O
:	O
i	int
+=	O
BV_OFFSET	function
(	O
x	int
)	O
;	O
return	O
make_fixnum	function
(	O
BITREF	O
(	O
x	int
,	O
i	int
)	O
)	O
;	O
case	O
aet_fix	O
:	O
return	O
make_fixnum	function
(	O
x	int
->	O
fixa	O
.	O
fixa_self	O
[	O
i	int
]	O
)	O
;	O
case	O
aet_sf	O
:	O
return	O
make_shortfloat	function
(	O
x	int
->	O
sfa	O
.	O
sfa_self	O
[	O
i	int
]	O
)	O
;	O
case	O
aet_lf	O
:	O
return	O
make_longfloat	function
(	O
x	int
->	O
lfa	O
.	O
lfa_self	O
[	O
i	int
]	O
)	O
;	O
case	O
aet_char	O
:	O
return	O
small_fixnum	function
(	O
x	int
->	O
st	O
.	O
st_self	O
[	O
i	int
]	O
)	O
;	O
case	O
aet_uchar	O
:	O
return	O
small_fixnum	function
(	O
x	int
->	O
ust	O
.	O
ust_self	O
[	O
i	int
]	O
)	O
;	O
case	O
aet_short	O
:	O
return	O
make_fixnum	function
(	O
SHORT_GCL	function
(	O
x	int
,	O
i	int
)	O
)	O
;	O
case	O
aet_ushort	O
:	O
return	O
make_fixnum	function
(	O
USHORT_GCL	function
(	O
x	int
,	O
i	int
)	O
)	O
;	O
default	O
:	O
FEerror	function
(	O
"unknown array type"	pointer
,	O
0	int
)	O
;	O
}	O
case	O
t_string	O
:	O
if	O
(	O
x	int
->	O
v	int
.	O
v_dim	O
<=	O
i	int
)	O
fScheck_bounds_bounds	function
(	O
x	int
,	O
i	int
)	O
;	O
return	O
code_char	function
(	O
x	int
->	O
st	O
.	O
st_self	O
[	O
i	int
]	O
)	O
;	O
default	O
:	O
FEerror	function
(	O
"not an array"	pointer
,	O
0	int
)	O
;	O
return	O
(	O
Cnil	O
)	O
;	O
}	O
}	O
object	O
aset1	function
(	O
object	O
x	int
,	O
fixnum	O
i	int
,	O
object	O
val	int
)	O
{	O
return	O
fSaset1	function
(	O
x	int
,	O
i	int
,	O
val	int
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"ASET1"	pointer
,	O
object	O
,	O
fSaset1	function
,	O
SI	O
,	O
3	int
,	O
3	int
,	O
NONE	O
,	O
OO	O
,	O
IO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
x	int
,	O
fixnum	O
i	int
,	O
object	O
val	int
)	O
,	O
""	pointer
)	O
{	O
switch	O
(	O
type_of	function
(	O
x	int
)	O
)	O
{	O
case	O
t_array	O
:	O
case	O
t_vector	O
:	O
case	O
t_bitvector	O
:	O
if	O
(	O
x	int
->	O
v	int
.	O
v_dim	O
<=	O
i	int
)	O
fScheck_bounds_bounds	function
(	O
x	int
,	O
i	int
)	O
;	O
switch	O
(	O
x	int
->	O
v	int
.	O
v_elttype	O
)	O
{	O
case	O
aet_object	O
:	O
x	int
->	O
v	int
.	O
v_self	O
[	O
i	int
]	O
=	O
val	int
;	O
break	O
;	O
case	O
aet_ch	O
:	O
ASSURE_TYPE	function
(	O
val	int
,	O
t_character	O
)	O
;	O
x	int
->	O
st	O
.	O
st_self	O
[	O
i	int
]	O
=	O
char_code	function
(	O
val	int
)	O
;	O
break	O
;	O
case	O
aet_bit	O
:	O
i	int
+=	O
BV_OFFSET	function
(	O
x	int
)	O
;	O
AGAIN_BIT	O
:	O
ASSURE_TYPE	function
(	O
val	int
,	O
t_fixnum	O
)	O
;	O
{	O
int	O
v	int
=	O
Mfix	function
(	O
val	int
)	O
;	O
if	O
(	O
v	int
==	O
0	int
)	O
CLEAR_BITREF	O
(	O
x	int
,	O
i	int
)	O
;	O
else	O
if	O
(	O
v	int
==	O
1	int
)	O
SET_BITREF	O
(	O
x	int
,	O
i	int
)	O
;	O
else	O
{	O
val	int
=	O
fSincorrect_type	function
(	O
val	int
,	O
sLbit	O
)	O
;	O
goto	O
AGAIN_BIT	O
;	O
}	O
break	O
;	O
}	O
case	O
aet_fix	O
:	O
ASSURE_TYPE	function
(	O
val	int
,	O
t_fixnum	O
)	O
;	O
(	O
x	int
->	O
fixa	O
.	O
fixa_self	O
[	O
i	int
]	O
)	O
=	O
Mfix	function
(	O
val	int
)	O
;	O
break	O
;	O
case	O
aet_sf	O
:	O
ASSURE_TYPE	function
(	O
val	int
,	O
t_shortfloat	O
)	O
;	O
(	O
x	int
->	O
sfa	O
.	O
sfa_self	O
[	O
i	int
]	O
)	O
=	O
Msf	function
(	O
val	int
)	O
;	O
break	O
;	O
case	O
aet_lf	O
:	O
ASSURE_TYPE	function
(	O
val	int
,	O
t_longfloat	O
)	O
;	O
(	O
x	int
->	O
lfa	O
.	O
lfa_self	O
[	O
i	int
]	O
)	O
=	O
Mlf	function
(	O
val	int
)	O
;	O
break	O
;	O
case	O
aet_char	O
:	O
ASSURE_TYPE	function
(	O
val	int
,	O
t_fixnum	O
)	O
;	O
x	int
->	O
st	O
.	O
st_self	O
[	O
i	int
]	O
=	O
Mfix	function
(	O
val	int
)	O
;	O
break	O
;	O
case	O
aet_uchar	O
:	O
ASSURE_TYPE	function
(	O
val	int
,	O
t_fixnum	O
)	O
;	O
(	O
x	int
->	O
ust	O
.	O
ust_self	O
[	O
i	int
]	O
)	O
=	O
Mfix	function
(	O
val	int
)	O
;	O
break	O
;	O
case	O
aet_short	O
:	O
ASSURE_TYPE	function
(	O
val	int
,	O
t_fixnum	O
)	O
;	O
SHORT_GCL	function
(	O
x	int
,	O
i	int
)	O
=	O
Mfix	function
(	O
val	int
)	O
;	O
break	O
;	O
case	O
aet_ushort	O
:	O
ASSURE_TYPE	function
(	O
val	int
,	O
t_fixnum	O
)	O
;	O
USHORT_GCL	function
(	O
x	int
,	O
i	int
)	O
=	O
Mfix	function
(	O
val	int
)	O
;	O
break	O
;	O
default	O
:	O
FEerror	function
(	O
"unknown array type"	pointer
,	O
0	int
)	O
;	O
}	O
break	O
;	O
case	O
t_string	O
:	O
if	O
(	O
x	int
->	O
v	int
.	O
v_dim	O
<=	O
i	int
)	O
fScheck_bounds_bounds	function
(	O
x	int
,	O
i	int
)	O
;	O
ASSURE_TYPE	function
(	O
val	int
,	O
t_character	O
)	O
;	O
x	int
->	O
st	O
.	O
st_self	O
[	O
i	int
]	O
=	O
char_code	function
(	O
val	int
)	O
;	O
break	O
;	O
default	O
:	O
FEerror	function
(	O
"not an array"	pointer
,	O
0	int
)	O
;	O
}	O
return	O
val	int
;	O
}	O
DEFUNO_NEW	function
(	O
"ASET"	pointer
,	O
object	O
,	O
fSaset	O
,	O
SI	O
,	O
1	int
,	O
ARG_LIMIT	O
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
siLaset	O
,	O
(	O
object	O
x	int
,	O
object	O
ii	O
,	O
object	O
y	O
,	O
...	O
)	O
,	O
""	pointer
)	O
{	O
int	O
i	int
,	O
i1	int
;	O
int	O
n	int
=	O
VFUN_NARGS	O
;	O
va_list	O
ap	O
;	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_array	O
)	O
{	O
int	O
m	int
;	O
unsigned	O
int	O
k	int
;	O
int	O
rank	int
=	O
n	int
-	O
2	int
;	O
if	O
(	O
x	int
->	O
a	O
.	O
a_rank	O
!=	O
rank	int
)	O
FEerror	function
(	O
" ~a has wrong rank"	pointer
,	O
1	int
,	O
x	int
)	O
;	O
if	O
(	O
rank	int
==	O
0	int
)	O
return	O
fSaset1	function
(	O
x	int
,	O
0	int
,	O
ii	O
)	O
;	O
ASSURE_TYPE	function
(	O
ii	O
,	O
t_fixnum	O
)	O
;	O
i	int
=	O
fix	function
(	O
ii	O
)	O
;	O
if	O
(	O
rank	int
==	O
1	int
)	O
return	O
fSaset1	function
(	O
x	int
,	O
i	int
,	O
y	O
)	O
;	O
va_start	O
(	O
ap	O
,	O
y	O
)	O
;	O
m	int
=	O
0	int
;	O
k	int
=	O
i	int
;	O
i1	int
=	O
0	int
;	O
rank	int
--	O
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
k	int
>=	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
m	int
]	O
)	O
{	O
object	O
x	int
,	O
x1	O
;	O
x	int
=	O
make_fixnum	function
(	O
m	int
)	O
;	O
x1	O
=	O
make_fixnum	function
(	O
k	int
)	O
;	O
FEerror	function
(	O
"Index number  ~a: ~a to array is out of bounds"	pointer
,	O
2	int
,	O
x	int
,	O
x1	O
)	O
;	O
}	O
i1	int
+=	O
k	int
;	O
if	O
(	O
m	int
<	O
rank	int
)	O
{	O
object	O
u	union
;	O
if	O
(	O
m	int
==	O
0	int
)	O
{	O
u	union
=	O
y	O
;	O
}	O
else	O
{	O
u	union
=	O
va_arg	function
(	O
ap	O
,	O
object	O
)	O
;	O
}	O
check_type	function
(	O
u	union
,	O
t_fixnum	O
)	O
;	O
k	int
=	O
Mfix	function
(	O
u	union
)	O
;	O
m	int
++	O
;	O
i1	int
=	O
i1	int
*	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
m	int
]	O
;	O
}	O
else	O
{	O
y	O
=	O
va_arg	function
(	O
ap	O
,	O
object	O
)	O
;	O
break	O
;	O
}	O
}	O
va_end	O
(	O
ap	O
)	O
;	O
return	O
fSaset1	function
(	O
x	int
,	O
i1	int
,	O
y	O
)	O
;	O
}	O
else	O
{	O
ASSURE_TYPE	function
(	O
ii	O
,	O
t_fixnum	O
)	O
;	O
i	int
=	O
fix	function
(	O
ii	O
)	O
;	O
return	O
fSaset1	function
(	O
x	int
,	O
i	int
,	O
y	O
)	O
;	O
}	O
}	O
DEFUNO_NEW	function
(	O
"SVSET"	pointer
,	O
object	O
,	O
fSsvset	O
,	O
SI	O
,	O
3	int
,	O
3	int
,	O
NONE	O
,	O
OO	O
,	O
IO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
siLsvset	O
,	O
(	O
object	O
x	int
,	O
fixnum	O
i	int
,	O
object	O
val	int
)	O
,	O
""	pointer
)	O
{	O
if	O
(	O
TYPE_OF	function
(	O
x	int
)	O
!=	O
t_vector	O
||	O
DISPLACED_TO	function
(	O
x	int
)	O
!=	O
Cnil	O
)	O
Wrong_type_error	function
(	O
"simple array"	pointer
,	O
0	int
)	O
;	O
if	O
(	O
i	int
>	O
x	int
->	O
v	int
.	O
v_dim	O
)	O
{	O
FEerror	function
(	O
"out of bounds"	pointer
,	O
0	int
)	O
;	O
}	O
return	O
x	int
->	O
v	int
.	O
v_self	O
[	O
i	int
]	O
=	O
val	int
;	O
}	O
DEFUN_NEW	function
(	O
"MAKE-VECTOR1"	pointer
,	O
object	O
,	O
fSmake_vector1	O
,	O
SI	O
,	O
3	int
,	O
8	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
on	O
,	O
object	O
oelt_type	O
,	O
object	O
staticp	int
,	O
...	O
)	O
,	O
""	pointer
)	O
{	O
int	O
displaced_index_offset	int
=	O
0	int
;	O
int	O
Inargs	int
=	O
VFUN_NARGS	O
-	O
3	int
;	O
fixnum	O
n	int
=	O
fixint	function
(	O
on	O
)	O
,	O
elt_type	int
=	O
fixint	function
(	O
oelt_type	O
)	O
;	O
va_list	O
Iap	O
;	O
object	O
fillp	O
;	O
object	O
initial_element	O
;	O
object	O
displaced_to	O
;	O
object	O
V9	O
;	O
Inargs	int
=	O
VFUN_NARGS	O
-	O
3	int
;	O
{	O
object	O
x	int
;	O
BEGIN_NO_INTERRUPT	O
;	O
switch	O
(	O
elt_type	int
)	O
{	O
case	O
aet_ch	O
:	O
x	int
=	O
alloc_object	function
(	O
t_string	O
)	O
;	O
x	int
->	O
ust	O
.	O
ust_adjustable	O
=	O
1	int
;	O
goto	O
a_string	O
;	O
break	O
;	O
case	O
aet_bit	O
:	O
x	int
=	O
alloc_object	function
(	O
t_bitvector	O
)	O
;	O
x	int
->	O
v	int
.	O
v_elttype	O
=	O
elt_type	int
;	O
x	int
->	O
v	int
.	O
v_adjustable	O
=	O
1	int
;	O
break	O
;	O
default	O
:	O
x	int
=	O
alloc_object	function
(	O
t_vector	O
)	O
;	O
}	O
x	int
->	O
v	int
.	O
v_elttype	O
=	O
elt_type	int
;	O
x	int
->	O
v	int
.	O
v_adjustable	O
=	O
1	int
;	O
a_string	O
:	O
x	int
->	O
v	int
.	O
v_dim	O
=	O
n	int
;	O
x	int
->	O
v	int
.	O
v_self	O
=	O
0	int
;	O
x	int
->	O
v	int
.	O
v_displaced	O
=	O
Cnil	O
;	O
if	O
(	O
--	O
Inargs	int
<	O
0	int
)	O
goto	O
LA1	O
;	O
else	O
{	O
va_start	O
(	O
Iap	O
,	O
staticp	int
)	O
;	O
fillp	O
=	O
va_arg	function
(	O
Iap	O
,	O
object	O
)	O
;	O
if	O
(	O
fillp	O
==	O
Cnil	O
)	O
{	O
x	int
->	O
v	int
.	O
v_hasfillp	O
=	O
0	int
;	O
x	int
->	O
v	int
.	O
v_fillp	O
=	O
n	int
;	O
}	O
else	O
if	O
(	O
type_of	function
(	O
fillp	O
)	O
==	O
t_fixnum	O
)	O
{	O
x	int
->	O
v	int
.	O
v_fillp	O
=	O
Mfix	function
(	O
fillp	O
)	O
;	O
if	O
(	O
x	int
->	O
v	int
.	O
v_fillp	O
>	O
n	int
||	O
x	int
->	O
v	int
.	O
v_fillp	O
<	O
0	int
)	O
FEerror	function
(	O
"bad fillp"	pointer
,	O
0	int
)	O
;	O
x	int
->	O
v	int
.	O
v_hasfillp	O
=	O
1	int
;	O
}	O
else	O
{	O
x	int
->	O
v	int
.	O
v_fillp	O
=	O
n	int
;	O
x	int
->	O
v	int
.	O
v_hasfillp	O
=	O
1	int
;	O
}	O
}	O
if	O
(	O
--	O
Inargs	int
<	O
0	int
)	O
goto	O
LA2	O
;	O
else	O
{	O
initial_element	O
=	O
va_arg	function
(	O
Iap	O
,	O
object	O
)	O
;	O
}	O
if	O
(	O
--	O
Inargs	int
<	O
0	int
)	O
goto	O
LA4	O
;	O
else	O
{	O
displaced_to	O
=	O
va_arg	function
(	O
Iap	O
,	O
object	O
)	O
;	O
}	O
if	O
(	O
--	O
Inargs	int
<	O
0	int
)	O
goto	O
LA5	O
;	O
else	O
{	O
V9	O
=	O
va_arg	function
(	O
Iap	O
,	O
object	O
)	O
;	O
if	O
(	O
displaced_to	O
!=	O
Cnil	O
)	O
{	O
ASSURE_TYPE	function
(	O
V9	O
,	O
t_fixnum	O
)	O
;	O
displaced_index_offset	int
=	O
Mfix	function
(	O
V9	O
)	O
;	O
}	O
}	O
goto	O
LA6	O
;	O
LA1	O
:	O
x	int
->	O
v	int
.	O
v_hasfillp	O
=	O
0	int
;	O
x	int
->	O
v	int
.	O
v_fillp	O
=	O
n	int
;	O
LA2	O
:	O
initial_element	O
=	O
Cnil	O
;	O
LA4	O
:	O
displaced_to	O
=	O
Cnil	O
;	O
LA5	O
:	O
displaced_index_offset	int
=	O
0	int
;	O
LA6	O
:	O
va_end	O
(	O
Iap	O
)	O
;	O
{	O
if	O
(	O
displaced_to	O
==	O
Cnil	O
)	O
array_allocself	function
(	O
x	int
,	O
staticp	int
!=	O
Cnil	O
,	O
initial_element	O
)	O
;	O
else	O
{	O
displace	function
(	O
x	int
,	O
displaced_to	O
,	O
displaced_index_offset	int
)	O
;	O
}	O
END_NO_INTERRUPT	O
;	O
return	O
x	int
;	O
}	O
}	O
}	O
object	O
fSmake_vector1_1	function
(	O
fixnum	O
n	int
,	O
fixnum	O
elt_type	int
,	O
object	O
staticp	int
)	O
{	O
VFUN_NARGS	O
=	O
3	int
;	O
return	O
FFN	function
(	O
fSmake_vector1	O
)	O
(	O
make_fixnum	function
(	O
n	int
)	O
,	O
make_fixnum	function
(	O
elt_type	int
)	O
,	O
staticp	int
)	O
;	O
}	O
static	O
object	O
DFLT_aet_object	int
=	O
Cnil	O
;	O
static	O
char	O
DFLT_aet_ch	char
=	O
' '	O
;	O
static	O
char	O
DFLT_aet_char	char
=	O
0	int
;	O
static	O
fixnum	O
DFLT_aet_fix	int
=	O
0	int
;	O
static	O
short	O
DFLT_aet_short	short
=	O
0	int
;	O
static	O
shortfloat	O
DFLT_aet_sf	int
=	O
0.0	int
;	O
static	O
longfloat	O
DFLT_aet_lf	int
=	O
0.0	int
;	O
static	O
object	O
Iname_t	int
=	O
sLt	O
;	O
static	O
struct	O
{	O
char	O
*	O
dflt	pointer
;	O
object	O
*	O
namep	pointer
;	O
}	O
aet_types	array
[	O
]	O
=	O
{	O
{	O
(	O
char	O
*	O
)	O
&	O
DFLT_aet_object	int
,	O
&	O
Iname_t	int
,	O
}	O
,	O
{	O
(	O
char	O
*	O
)	O
&	O
DFLT_aet_ch	char
,	O
&	O
sLstring_char	O
,	O
}	O
,	O
{	O
(	O
char	O
*	O
)	O
&	O
DFLT_aet_fix	int
,	O
&	O
sLbit	O
,	O
}	O
,	O
{	O
(	O
char	O
*	O
)	O
&	O
DFLT_aet_fix	int
,	O
&	O
sLfixnum	O
,	O
}	O
,	O
{	O
(	O
char	O
*	O
)	O
&	O
DFLT_aet_sf	int
,	O
&	O
sLshort_float	O
,	O
}	O
,	O
{	O
(	O
char	O
*	O
)	O
&	O
DFLT_aet_lf	int
,	O
&	O
sLlong_float	O
,	O
}	O
,	O
{	O
(	O
char	O
*	O
)	O
&	O
DFLT_aet_char	char
,	O
&	O
sLsigned_char	O
,	O
}	O
,	O
{	O
(	O
char	O
*	O
)	O
&	O
DFLT_aet_char	char
,	O
&	O
sLunsigned_char	O
,	O
}	O
,	O
{	O
(	O
char	O
*	O
)	O
&	O
DFLT_aet_short	short
,	O
&	O
sLsigned_short	O
,	O
}	O
,	O
{	O
(	O
char	O
*	O
)	O
&	O
DFLT_aet_short	short
,	O
&	O
sLunsigned_short	O
}	O
,	O
}	O
;	O
DEFUN_NEW	function
(	O
"GET-AELTTYPE"	pointer
,	O
object	O
,	O
fSget_aelttype	function
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
x	int
)	O
,	O
""	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
aet_last	O
;	O
i	int
++	O
)	O
if	O
(	O
x	int
==	O
*	O
aet_types	array
[	O
i	int
]	O
.	O
namep	pointer
)	O
return	O
make_fixnum	function
(	O
(	O
enum	O
aelttype	O
)	O
i	int
)	O
;	O
if	O
(	O
x	int
==	O
sLlong_float	O
||	O
x	int
==	O
sLsingle_float	O
||	O
x	int
==	O
sLdouble_float	O
)	O
return	O
make_fixnum	function
(	O
aet_lf	O
)	O
;	O
return	O
make_fixnum	function
(	O
aet_object	O
)	O
;	O
}	O
DEFUNO_NEW	function
(	O
"MAKE-VECTOR"	pointer
,	O
object	O
,	O
fSmake_vector	O
,	O
SI	O
,	O
7	int
,	O
8	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
siLmake_vector	O
,	O
(	O
object	O
x0	O
,	O
object	O
x1	O
,	O
object	O
x2	O
,	O
object	O
x3	O
,	O
object	O
x4	O
,	O
object	O
x5	O
,	O
object	O
x6	O
,	O
...	O
)	O
,	O
""	pointer
)	O
{	O
int	O
narg	int
=	O
VFUN_NARGS	O
;	O
object	O
initial_elt	O
;	O
va_list	O
ap	O
;	O
object	O
x	int
;	O
{	O
va_start	O
(	O
ap	O
,	O
x6	O
)	O
;	O
if	O
(	O
narg	int
>=	O
8	int
)	O
initial_elt	O
=	O
va_arg	function
(	O
ap	O
,	O
object	O
)	O
;	O
else	O
goto	O
LDEFAULT8	O
;	O
goto	O
LEND_VARARG	O
;	O
LDEFAULT8	O
:	O
initial_elt	O
=	O
Cnil	O
;	O
LEND_VARARG	O
:	O
va_end	O
(	O
ap	O
)	O
;	O
}	O
VFUN_NARGS	O
=	O
8	int
;	O
x	int
=	O
FFN	function
(	O
fSmake_vector1	O
)	O
(	O
x1	O
,	O
fSget_aelttype	function
(	O
x0	O
)	O
,	O
x6	O
,	O
x3	O
,	O
initial_elt	O
,	O
x4	O
,	O
x5	O
)	O
;	O
x0	O
=	O
x	int
;	O
RETURN1	function
(	O
x0	O
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"MAKE-ARRAY1"	pointer
,	O
object	O
,	O
fSmake_array1	O
,	O
SI	O
,	O
6	int
,	O
6	int
,	O
NONE	O
,	O
OI	O
,	O
OO	O
,	O
OI	O
,	O
OO	O
,	O
(	O
fixnum	O
elt_type	int
,	O
object	O
staticp	int
,	O
object	O
initial_element	O
,	O
object	O
displaced_to	O
,	O
fixnum	O
displaced_index_offset	int
,	O
object	O
dimensions	O
)	O
,	O
""	pointer
)	O
{	O
int	O
rank	int
=	O
length	function
(	O
dimensions	O
)	O
;	O
if	O
(	O
rank	int
>	O
ARRAY_RANK_LIMIT	O
)	O
FEerror	function
(	O
"Array rank limit exceeded."	pointer
,	O
0	int
)	O
;	O
{	O
object	O
x	int
,	O
v	int
;	O
char	O
*	O
tmp_alloc	pointer
;	O
int	O
dim	int
=	O
1	int
,	O
i	int
;	O
BEGIN_NO_INTERRUPT	O
;	O
x	int
=	O
alloc_object	function
(	O
t_array	O
)	O
;	O
x	int
->	O
a	O
.	O
a_elttype	O
=	O
elt_type	int
;	O
x	int
->	O
a	O
.	O
a_self	O
=	O
0	int
;	O
x	int
->	O
a	O
.	O
a_rank	O
=	O
rank	int
;	O
x	int
->	O
a	O
.	O
a_displaced	O
=	O
Cnil	O
;	O
x	int
->	O
a	O
.	O
a_dims	O
=	O
AR_ALLOC	function
(	O
alloc_relblock	O
,	O
rank	int
,	O
int	O
)	O
;	O
i	int
=	O
0	int
;	O
v	int
=	O
dimensions	O
;	O
while	O
(	O
i	int
<	O
rank	int
)	O
{	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
i	int
]	O
=	O
FIX_CHECK	function
(	O
Mcar	function
(	O
v	int
)	O
)	O
;	O
if	O
(	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
i	int
]	O
<	O
0	int
)	O
{	O
FEerror	function
(	O
"Dimension must be non negative"	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
dim	int
&&	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
i	int
]	O
>	O
(	O
(	O
1UL	int
<<	O
(	O
sizeof	O
(	O
dim	int
)	O
*	O
8	int
-	O
1	int
)	O
)	O
-	O
1	int
)	O
/	O
dim	int
)	O
FEerror	function
(	O
"Total dimension overflow on dimensions ~s"	pointer
,	O
1	int
,	O
dimensions	O
)	O
;	O
dim	int
*=	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
i	int
++	O
]	O
;	O
v	int
=	O
Mcdr	function
(	O
v	int
)	O
;	O
}	O
x	int
->	O
a	O
.	O
a_dim	O
=	O
dim	int
;	O
x	int
->	O
a	O
.	O
a_adjustable	O
=	O
1	int
;	O
{	O
if	O
(	O
displaced_to	O
==	O
Cnil	O
)	O
array_allocself	function
(	O
x	int
,	O
staticp	int
!=	O
Cnil	O
,	O
initial_element	O
)	O
;	O
else	O
{	O
displace	function
(	O
x	int
,	O
displaced_to	O
,	O
displaced_index_offset	int
)	O
;	O
}	O
END_NO_INTERRUPT	O
;	O
return	O
x	int
;	O
}	O
}	O
}	O
static	O
void	O
FFN	function
(	O
Larray_displacement	int
)	O
(	O
void	O
)	O
{	O
object	O
array	O
,	O
a	O
;	O
int	O
s	int
,	O
n	int
;	O
BEGIN_NO_INTERRUPT	O
;	O
n	int
=	O
vs_top	O
-	O
vs_base	O
;	O
if	O
(	O
n	int
<	O
1	int
)	O
FEtoo_few_arguments	function
(	O
vs_base	O
,	O
vs_top	O
)	O
;	O
if	O
(	O
n	int
>	O
1	int
)	O
FEtoo_many_arguments	function
(	O
vs_base	O
,	O
vs_top	O
)	O
;	O
array	O
=	O
vs_base	O
[	O
0	int
]	O
;	O
vs_base	O
=	O
vs_top	O
;	O
IisArray	function
(	O
array	O
)	O
;	O
a	O
=	O
array	O
->	O
a	O
.	O
a_displaced	O
->	O
c	char
.	O
c_car	O
;	O
if	O
(	O
a	O
==	O
Cnil	O
)	O
{	O
vs_push	function
(	O
Cnil	O
)	O
;	O
vs_push	function
(	O
make_fixnum	function
(	O
0	int
)	O
)	O
;	O
END_NO_INTERRUPT	O
;	O
return	O
;	O
}	O
s	int
=	O
aet_sizes	array
[	O
Iarray_element_type	function
(	O
a	O
)	O
]	O
;	O
n	int
=	O
(	O
void	O
*	O
)	O
array	O
->	O
a	O
.	O
a_self	O
-	O
(	O
void	O
*	O
)	O
a	O
->	O
a	O
.	O
a_self	O
;	O
if	O
(	O
n	int
%	O
s	int
)	O
FEerror	function
(	O
"Array is displaced by fractional elements"	pointer
,	O
0	int
)	O
;	O
vs_push	function
(	O
a	O
)	O
;	O
vs_push	function
(	O
make_fixnum	function
(	O
n	int
/	O
s	int
)	O
)	O
;	O
END_NO_INTERRUPT	O
;	O
return	O
;	O
}	O
static	O
void	O
displace	function
(	O
object	O
from_array	int
,	O
object	O
dest_array	int
,	O
int	O
offset	int
)	O
{	O
enum	O
aelttype	O
typ	enum
;	O
IisArray	function
(	O
from_array	int
)	O
;	O
IisArray	function
(	O
dest_array	int
)	O
;	O
typ	enum
=	O
Iarray_element_type	function
(	O
from_array	int
)	O
;	O
if	O
(	O
typ	enum
!=	O
Iarray_element_type	function
(	O
dest_array	int
)	O
)	O
{	O
Wrong_type_error	function
(	O
"same element type"	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
offset	int
+	O
from_array	int
->	O
a	O
.	O
a_dim	O
>	O
dest_array	int
->	O
a	O
.	O
a_dim	O
)	O
{	O
FEerror	function
(	O
"Destination array too small to hold other array"	pointer
,	O
0	int
)	O
;	O
}	O
if	O
(	O
dest_array	int
->	O
a	O
.	O
a_displaced	O
==	O
Cnil	O
)	O
{	O
dest_array	int
->	O
a	O
.	O
a_displaced	O
=	O
list	function
(	O
2	int
,	O
Cnil	O
,	O
from_array	int
)	O
;	O
}	O
else	O
Mcdr	function
(	O
dest_array	int
->	O
a	O
.	O
a_displaced	O
)	O
=	O
make_cons	function
(	O
from_array	int
,	O
Mcdr	function
(	O
dest_array	int
->	O
a	O
.	O
a_displaced	O
)	O
)	O
;	O
from_array	int
->	O
a	O
.	O
a_displaced	O
=	O
make_cons	function
(	O
dest_array	int
,	O
sLnil	O
)	O
;	O
if	O
(	O
typ	enum
==	O
aet_bit	O
)	O
{	O
offset	int
+=	O
BV_OFFSET	function
(	O
dest_array	int
)	O
;	O
from_array	int
->	O
bv	O
.	O
bv_self	O
=	O
dest_array	int
->	O
bv	O
.	O
bv_self	O
+	O
offset	int
/	O
BV_BITS	int
;	O
SET_BV_OFFSET	function
(	O
from_array	int
,	O
offset	int
%	O
BV_BITS	int
)	O
;	O
}	O
else	O
from_array	int
->	O
a	O
.	O
a_self	O
=	O
ARRAY_BODY_PTR	O
(	O
dest_array	int
,	O
offset	int
)	O
;	O
}	O
static	O
enum	O
aelttype	O
Iarray_element_type	function
(	O
object	O
x	int
)	O
{	O
enum	O
aelttype	O
t	enum
=	O
aet_last	O
;	O
switch	O
(	O
TYPE_OF	function
(	O
x	int
)	O
)	O
{	O
case	O
t_array	O
:	O
t	enum
=	O
(	O
enum	O
aelttype	O
)	O
x	int
->	O
a	O
.	O
a_elttype	O
;	O
break	O
;	O
case	O
t_vector	O
:	O
t	enum
=	O
(	O
enum	O
aelttype	O
)	O
x	int
->	O
v	int
.	O
v_elttype	O
;	O
break	O
;	O
case	O
t_bitvector	O
:	O
t	enum
=	O
aet_bit	O
;	O
break	O
;	O
case	O
t_string	O
:	O
t	enum
=	O
aet_ch	O
;	O
break	O
;	O
default	O
:	O
FEerror	function
(	O
"Not an array ~a "	pointer
,	O
1	int
,	O
x	int
)	O
;	O
}	O
return	O
t	enum
;	O
}	O
void	O
adjust_displaced	function
(	O
object	O
x	int
,	O
long	O
diff	long
)	O
{	O
if	O
(	O
x	int
->	O
ust	O
.	O
ust_self	O
!=	O
NULL	O
)	O
x	int
->	O
ust	O
.	O
ust_self	O
=	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
(	O
long	O
)	O
(	O
x	int
->	O
a	O
.	O
a_self	O
)	O
+	O
diff	long
)	O
;	O
for	O
(	O
x	int
=	O
Scdr	function
(	O
x	int
->	O
ust	O
.	O
ust_displaced	O
)	O
;	O
x	int
!=	O
Cnil	O
;	O
x	int
=	O
Scdr	function
(	O
x	int
)	O
)	O
adjust_displaced	function
(	O
Mcar	function
(	O
x	int
)	O
,	O
diff	long
)	O
;	O
}	O
static	O
char	O
*	O
raw_aet_ptr	function
(	O
object	O
x	int
,	O
short	O
int	O
typ	enum
)	O
{	O
static	O
union	O
{	O
object	O
o	int
;	O
char	O
c	char
;	O
fixnum	O
i	int
;	O
shortfloat	O
f	int
;	O
longfloat	O
d	int
;	O
unsigned	O
char	O
uc	char
;	O
short	O
s	int
;	O
unsigned	O
short	O
us	short
;	O
}	O
u	union
;	O
if	O
(	O
x	int
==	O
Cnil	O
)	O
return	O
aet_types	array
[	O
typ	enum
]	O
.	O
dflt	pointer
;	O
switch	O
(	O
typ	enum
)	O
{	O
case	O
aet_object	O
:	O
u	union
.	O
o	int
=	O
x	int
;	O
break	O
;	O
case	O
aet_ch	O
:	O
u	union
.	O
c	char
=	O
char_code	function
(	O
x	int
)	O
;	O
break	O
;	O
case	O
aet_bit	O
:	O
u	union
.	O
i	int
=	O
-	O
Mfix	function
(	O
x	int
)	O
;	O
break	O
;	O
case	O
aet_fix	O
:	O
u	union
.	O
i	int
=	O
Mfix	function
(	O
x	int
)	O
;	O
break	O
;	O
case	O
aet_sf	O
:	O
u	union
.	O
f	int
=	O
Msf	function
(	O
x	int
)	O
;	O
break	O
;	O
case	O
aet_lf	O
:	O
u	union
.	O
d	int
=	O
Mlf	function
(	O
x	int
)	O
;	O
break	O
;	O
case	O
aet_char	O
:	O
u	union
.	O
c	char
=	O
(	O
char	O
)	O
Mfix	function
(	O
x	int
)	O
;	O
break	O
;	O
case	O
aet_uchar	O
:	O
u	union
.	O
uc	char
=	O
(	O
unsigned	O
char	O
)	O
Mfix	function
(	O
x	int
)	O
;	O
break	O
;	O
case	O
aet_short	O
:	O
u	union
.	O
s	int
=	O
(	O
short	O
)	O
Mfix	function
(	O
x	int
)	O
;	O
break	O
;	O
case	O
aet_ushort	O
:	O
u	union
.	O
us	short
=	O
(	O
unsigned	O
short	O
)	O
Mfix	function
(	O
x	int
)	O
;	O
break	O
;	O
default	O
:	O
FEerror	function
(	O
"bad elttype"	pointer
,	O
0	int
)	O
;	O
break	O
;	O
}	O
return	O
(	O
char	O
*	O
)	O
&	O
u	union
;	O
}	O
void	O
gset	function
(	O
void	O
*	O
p1	pointer
,	O
void	O
*	O
val	int
,	O
int	O
n	int
,	O
int	O
typ	enum
)	O
{	O
if	O
(	O
val	int
==	O
0	int
)	O
val	int
=	O
aet_types	array
[	O
typ	enum
]	O
.	O
dflt	pointer
;	O
switch	O
(	O
typ	enum
)	O
{	O
case	O
aet_object	O
:	O
GSET	O
(	O
p1	pointer
,	O
n	int
,	O
object	O
,	O
val	int
)	O
;	O
case	O
aet_ch	O
:	O
GSET	O
(	O
p1	pointer
,	O
n	int
,	O
char	O
,	O
val	int
)	O
;	O
case	O
aet_bit	O
:	O
GSET	O
(	O
p1	pointer
,	O
n	int
,	O
fixnum	O
,	O
val	int
)	O
;	O
case	O
aet_fix	O
:	O
GSET	O
(	O
p1	pointer
,	O
n	int
,	O
fixnum	O
,	O
val	int
)	O
;	O
case	O
aet_sf	O
:	O
GSET	O
(	O
p1	pointer
,	O
n	int
,	O
shortfloat	O
,	O
val	int
)	O
;	O
case	O
aet_lf	O
:	O
GSET	O
(	O
p1	pointer
,	O
n	int
,	O
longfloat	O
,	O
val	int
)	O
;	O
case	O
aet_char	O
:	O
GSET	O
(	O
p1	pointer
,	O
n	int
,	O
char	O
,	O
val	int
)	O
;	O
case	O
aet_uchar	O
:	O
GSET	O
(	O
p1	pointer
,	O
n	int
,	O
unsigned	O
char	O
,	O
val	int
)	O
;	O
case	O
aet_short	O
:	O
GSET	O
(	O
p1	pointer
,	O
n	int
,	O
short	O
,	O
val	int
)	O
;	O
case	O
aet_ushort	O
:	O
GSET	O
(	O
p1	pointer
,	O
n	int
,	O
unsigned	O
short	O
,	O
val	int
)	O
;	O
default	O
:	O
FEerror	function
(	O
"bad elttype"	pointer
,	O
0	int
)	O
;	O
}	O
}	O
DEFUN_NEW	function
(	O
"COPY-ARRAY-PORTION"	pointer
,	O
object	O
,	O
fScopy_array_portion	O
,	O
SI	O
,	O
4	int
,	O
5	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
x	int
,	O
object	O
y	O
,	O
object	O
oi1	O
,	O
object	O
oi2	O
,	O
object	O
n1o	O
)	O
,	O
"Copy elements from X to Y starting at x[i1] to x[i2] and doing N1 elements if N1 is supplied otherwise, doing the length of X - I1 elements.  If the types of the arrays are not the same, this has implementation dependent results."	pointer
)	O
{	O
fixnum	O
i1	int
=	O
fix	function
(	O
oi1	O
)	O
,	O
i2	O
=	O
fix	function
(	O
oi2	O
)	O
;	O
enum	O
aelttype	O
typ1	enum
=	O
Iarray_element_type	function
(	O
x	int
)	O
;	O
enum	O
aelttype	O
typ2	enum
=	O
Iarray_element_type	function
(	O
y	O
)	O
;	O
int	O
n1	int
=	O
fix	function
(	O
n1o	O
)	O
,	O
nc	int
;	O
if	O
(	O
VFUN_NARGS	O
==	O
4	int
)	O
{	O
n1	int
=	O
x	int
->	O
v	int
.	O
v_dim	O
-	O
i1	int
;	O
}	O
if	O
(	O
typ1	enum
==	O
aet_bit	O
)	O
{	O
if	O
(	O
i1	int
%	O
CHAR_SIZE	O
)	O
badcopy	O
:	O
FEerror	function
(	O
"Bit copies only if aligned"	pointer
,	O
0	int
)	O
;	O
else	O
{	O
int	O
rest	int
=	O
n1	int
%	O
CHAR_SIZE	O
;	O
if	O
(	O
rest	int
!=	O
0	int
)	O
{	O
if	O
(	O
typ2	enum
!=	O
aet_bit	O
)	O
goto	O
badcopy	O
;	O
{	O
while	O
(	O
rest	int
>	O
0	int
)	O
{	O
fSaset1	function
(	O
y	O
,	O
i2	O
+	O
n1	int
-	O
rest	int
,	O
(	O
fLrow_major_aref	function
(	O
x	int
,	O
i1	int
+	O
n1	int
-	O
rest	int
)	O
)	O
)	O
;	O
rest	int
--	O
;	O
}	O
}	O
}	O
i1	int
=	O
i1	int
/	O
CHAR_SIZE	O
;	O
n1	int
=	O
n1	int
/	O
CHAR_SIZE	O
;	O
typ1	enum
=	O
aet_char	O
;	O
}	O
}	O
;	O
if	O
(	O
typ2	enum
==	O
aet_bit	O
)	O
{	O
if	O
(	O
i2	O
%	O
CHAR_SIZE	O
)	O
goto	O
badcopy	O
;	O
i2	O
=	O
i2	O
/	O
CHAR_SIZE	O
;	O
}	O
if	O
(	O
(	O
typ1	enum
==	O
aet_object	O
||	O
typ2	enum
==	O
aet_object	O
)	O
&&	O
typ1	enum
!=	O
typ2	enum
)	O
FEerror	function
(	O
"Can't copy between different array types"	pointer
,	O
0	int
)	O
;	O
nc	int
=	O
n1	int
*	O
aet_sizes	array
[	O
(	O
int	O
)	O
typ1	enum
]	O
;	O
if	O
(	O
i1	int
+	O
n1	int
>	O
x	int
->	O
a	O
.	O
a_dim	O
||	O
(	O
(	O
y	O
->	O
a	O
.	O
a_dim	O
-	O
i2	O
)	O
*	O
aet_sizes	array
[	O
(	O
int	O
)	O
typ2	enum
]	O
)	O
<	O
nc	int
)	O
FEerror	function
(	O
"Copy  out of bounds"	pointer
,	O
0	int
)	O
;	O
bcopy	function
(	O
x	int
->	O
ust	O
.	O
ust_self	O
+	O
(	O
i1	int
*	O
aet_sizes	array
[	O
(	O
int	O
)	O
typ1	enum
]	O
)	O
,	O
y	O
->	O
ust	O
.	O
ust_self	O
+	O
(	O
i2	O
*	O
aet_sizes	array
[	O
(	O
int	O
)	O
typ2	enum
]	O
)	O
,	O
nc	int
)	O
;	O
return	O
x	int
;	O
}	O
void	O
array_allocself	function
(	O
object	O
x	int
,	O
int	O
staticp	int
,	O
object	O
dflt	pointer
)	O
{	O
int	O
n	int
;	O
void	O
*	O
(	O
*	O
fun	pointer
)	O
(	O
size_t	long
)	O
,	O
*	O
tmp_alloc	pointer
;	O
enum	O
aelttype	O
typ	enum
;	O
fun	pointer
=	O
(	O
staticp	int
?	O
alloc_contblock	O
:	O
alloc_relblock	O
)	O
;	O
{	O
n	int
=	O
x	int
->	O
a	O
.	O
a_dim	O
;	O
typ	enum
=	O
Iarray_element_type	function
(	O
x	int
)	O
;	O
switch	O
(	O
typ	enum
)	O
{	O
case	O
aet_object	O
:	O
x	int
->	O
a	O
.	O
a_self	O
=	O
AR_ALLOC	function
(	O
*	O
fun	pointer
,	O
n	int
,	O
object	O
)	O
;	O
break	O
;	O
case	O
aet_ch	O
:	O
case	O
aet_char	O
:	O
case	O
aet_uchar	O
:	O
x	int
->	O
st	O
.	O
st_self	O
=	O
AR_ALLOC	function
(	O
*	O
fun	pointer
,	O
n	int
,	O
char	O
)	O
;	O
break	O
;	O
case	O
aet_short	O
:	O
case	O
aet_ushort	O
:	O
x	int
->	O
ust	O
.	O
ust_self	O
=	O
(	O
unsigned	O
char	O
*	O
)	O
AR_ALLOC	function
(	O
*	O
fun	pointer
,	O
n	int
,	O
short	O
)	O
;	O
break	O
;	O
case	O
aet_bit	O
:	O
n	int
=	O
(	O
n	int
+	O
W_SIZE	O
-	O
1	int
)	O
/	O
W_SIZE	O
;	O
SET_BV_OFFSET	function
(	O
x	int
,	O
0	int
)	O
;	O
case	O
aet_fix	O
:	O
x	int
->	O
fixa	O
.	O
fixa_self	O
=	O
AR_ALLOC	function
(	O
*	O
fun	pointer
,	O
n	int
,	O
fixnum	O
)	O
;	O
break	O
;	O
case	O
aet_sf	O
:	O
x	int
->	O
sfa	O
.	O
sfa_self	O
=	O
AR_ALLOC	function
(	O
*	O
fun	pointer
,	O
n	int
,	O
shortfloat	O
)	O
;	O
break	O
;	O
case	O
aet_lf	O
:	O
x	int
->	O
lfa	O
.	O
lfa_self	O
=	O
AR_ALLOC	function
(	O
*	O
fun	pointer
,	O
n	int
,	O
longfloat	O
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
dflt	pointer
!=	O
OBJNULL	O
)	O
gset	function
(	O
x	int
->	O
st	O
.	O
st_self	O
,	O
raw_aet_ptr	function
(	O
dflt	pointer
,	O
typ	enum
)	O
,	O
n	int
,	O
typ	enum
)	O
;	O
}	O
}	O
DEFUNO_NEW	function
(	O
"FILL-POINTER-SET"	pointer
,	O
object	O
,	O
fSfill_pointer_set	O
,	O
SI	O
,	O
2	int
,	O
2	int
,	O
NONE	O
,	O
OO	O
,	O
IO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
siLfill_pointer_set	O
,	O
(	O
object	O
x	int
,	O
fixnum	O
i	int
)	O
,	O
""	pointer
)	O
{	O
if	O
(	O
!	O
(	O
TS_MEMBER	function
(	O
type_of	function
(	O
x	int
)	O
,	O
TS	function
(	O
t_vector	O
)	O
|	O
TS	function
(	O
t_bitvector	O
)	O
|	O
TS	function
(	O
t_string	O
)	O
)	O
)	O
)	O
goto	O
no_fillp	O
;	O
if	O
(	O
x	int
->	O
v	int
.	O
v_hasfillp	O
==	O
0	int
)	O
{	O
goto	O
no_fillp	O
;	O
}	O
if	O
(	O
i	int
<	O
0	int
||	O
i	int
>	O
x	int
->	O
a	O
.	O
a_dim	O
)	O
{	O
FEerror	function
(	O
"~a is not suitable for a fill pointer for ~a"	pointer
,	O
2	int
,	O
make_fixnum	function
(	O
i	int
)	O
,	O
x	int
)	O
;	O
}	O
x	int
->	O
v	int
.	O
v_fillp	O
=	O
i	int
;	O
return	O
make_fixnum	function
(	O
i	int
)	O
;	O
no_fillp	O
:	O
FEerror	function
(	O
"~a does not have a fill pointer"	pointer
,	O
1	int
,	O
x	int
)	O
;	O
return	O
make_fixnum	function
(	O
0	int
)	O
;	O
}	O
DEFUNO_NEW	function
(	O
"FILL-POINTER"	pointer
,	O
object	O
,	O
fLfill_pointer	O
,	O
LISP	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Lfill_pointer	O
,	O
(	O
object	O
x	int
)	O
,	O
""	pointer
)	O
{	O
if	O
(	O
!	O
(	O
TS_MEMBER	function
(	O
type_of	function
(	O
x	int
)	O
,	O
TS	function
(	O
t_vector	O
)	O
|	O
TS	function
(	O
t_bitvector	O
)	O
|	O
TS	function
(	O
t_string	O
)	O
)	O
)	O
)	O
goto	O
no_fillp	O
;	O
if	O
(	O
x	int
->	O
v	int
.	O
v_hasfillp	O
==	O
0	int
)	O
{	O
goto	O
no_fillp	O
;	O
}	O
return	O
make_fixnum	function
(	O
x	int
->	O
v	int
.	O
v_fillp	O
)	O
;	O
no_fillp	O
:	O
FEwrong_type_argument	function
(	O
sLvector	O
,	O
x	int
)	O
;	O
return	O
make_fixnum	function
(	O
0	int
)	O
;	O
}	O
DEFUN_NEW	function
(	O
"ARRAY-HAS-FILL-POINTER-P"	pointer
,	O
object	O
,	O
fLarray_has_fill_pointer_p	O
,	O
LISP	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
x	int
)	O
,	O
""	pointer
)	O
{	O
if	O
(	O
TS_MEMBER	function
(	O
type_of	function
(	O
x	int
)	O
,	O
TS	function
(	O
t_vector	O
)	O
|	O
TS	function
(	O
t_bitvector	O
)	O
|	O
TS	function
(	O
t_string	O
)	O
)	O
)	O
return	O
(	O
x	int
->	O
v	int
.	O
v_hasfillp	O
==	O
0	int
?	O
Cnil	O
:	O
sLt	O
)	O
;	O
else	O
if	O
(	O
TYPE_OF	function
(	O
x	int
)	O
==	O
t_array	O
)	O
{	O
return	O
Cnil	O
;	O
}	O
else	O
IisArray	function
(	O
x	int
)	O
;	O
return	O
Cnil	O
;	O
}	O
DEFUNO_NEW	function
(	O
"ARRAY-ELEMENT-TYPE"	pointer
,	O
object	O
,	O
fLarray_element_type	O
,	O
LISP	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Larray_element_type	O
,	O
(	O
object	O
x	int
)	O
,	O
""	pointer
)	O
{	O
enum	O
aelttype	O
t	enum
;	O
t	enum
=	O
Iarray_element_type	function
(	O
x	int
)	O
;	O
return	O
*	O
aet_types	array
[	O
(	O
int	O
)	O
t	enum
]	O
.	O
namep	pointer
;	O
}	O
DEFUNO_NEW	function
(	O
"ADJUSTABLE-ARRAY-P"	pointer
,	O
object	O
,	O
fLadjustable_array_p	O
,	O
LISP	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Ladjustable_array_p	O
,	O
(	O
object	O
x	int
)	O
,	O
""	pointer
)	O
{	O
IisArray	function
(	O
x	int
)	O
;	O
return	O
sLt	O
;	O
}	O
DEFUNO_NEW	function
(	O
"DISPLACED-ARRAY-P"	pointer
,	O
object	O
,	O
fSdisplaced_array_p	O
,	O
SI	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
siLdisplaced_array_p	O
,	O
(	O
object	O
x	int
)	O
,	O
""	pointer
)	O
{	O
IisArray	function
(	O
x	int
)	O
;	O
return	O
(	O
x	int
->	O
a	O
.	O
a_displaced	O
==	O
Cnil	O
?	O
Cnil	O
:	O
sLt	O
)	O
;	O
}	O
DEFUNO_NEW	function
(	O
"ARRAY-RANK"	pointer
,	O
object	O
,	O
fLarray_rank	O
,	O
LISP	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Larray_rank	O
,	O
(	O
object	O
x	int
)	O
,	O
""	pointer
)	O
{	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_array	O
)	O
return	O
make_fixnum	function
(	O
x	int
->	O
a	O
.	O
a_rank	O
)	O
;	O
IisArray	function
(	O
x	int
)	O
;	O
return	O
make_fixnum	function
(	O
1	int
)	O
;	O
}	O
DEFUNO_NEW	function
(	O
"ARRAY-DIMENSION"	pointer
,	O
object	O
,	O
fLarray_dimension	O
,	O
LISP	O
,	O
2	int
,	O
2	int
,	O
NONE	O
,	O
OO	O
,	O
IO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
Larray_dimension	O
,	O
(	O
object	O
x	int
,	O
fixnum	O
i	int
)	O
,	O
""	pointer
)	O
{	O
if	O
(	O
type_of	function
(	O
x	int
)	O
==	O
t_array	O
)	O
{	O
if	O
(	O
(	O
unsigned	O
int	O
)	O
i	int
>=	O
x	int
->	O
a	O
.	O
a_rank	O
)	O
FEerror	function
(	O
"Index ~a out of bounds for array-dimension"	pointer
,	O
1	int
,	O
make_fixnum	function
(	O
i	int
)	O
)	O
;	O
else	O
{	O
return	O
make_fixnum	function
(	O
x	int
->	O
a	O
.	O
a_dims	O
[	O
i	int
]	O
)	O
;	O
}	O
}	O
IisArray	function
(	O
x	int
)	O
;	O
return	O
make_fixnum	function
(	O
x	int
->	O
v	int
.	O
v_dim	O
)	O
;	O
}	O
static	O
void	O
Icheck_displaced	function
(	O
object	O
displaced_list	int
,	O
object	O
ar	int
,	O
int	O
dim	int
)	O
{	O
while	O
(	O
displaced_list	int
!=	O
Cnil	O
)	O
{	O
object	O
u	union
=	O
Mcar	function
(	O
displaced_list	int
)	O
;	O
displaced_list	int
=	O
Mcdr	function
(	O
displaced_list	int
)	O
;	O
if	O
(	O
u	union
->	O
a	O
.	O
a_self	O
==	O
NULL	O
)	O
continue	O
;	O
if	O
(	O
(	O
Iarray_element_type	function
(	O
u	union
)	O
==	O
aet_bit	O
&&	O
(	O
u	union
->	O
bv	O
.	O
bv_self	O
-	O
ar	int
->	O
bv	O
.	O
bv_self	O
)	O
*	O
BV_BITS	int
+	O
u	union
->	O
bv	O
.	O
bv_dim	O
-	O
dim	int
+	O
BV_OFFSET	function
(	O
u	union
)	O
-	O
BV_OFFSET	function
(	O
ar	int
)	O
>	O
0	int
)	O
||	O
(	O
ARRAY_BODY_PTR	O
(	O
u	union
,	O
u	union
->	O
a	O
.	O
a_dim	O
)	O
>	O
ARRAY_BODY_PTR	O
(	O
ar	int
,	O
dim	int
)	O
)	O
)	O
FEerror	function
(	O
"Bad displacement"	pointer
,	O
0	int
)	O
;	O
Icheck_displaced	function
(	O
DISPLACED_FROM	function
(	O
u	union
)	O
,	O
ar	int
,	O
dim	int
)	O
;	O
}	O
}	O
DEFUNO_NEW	function
(	O
"REPLACE-ARRAY"	pointer
,	O
object	O
,	O
fSreplace_array	O
,	O
SI	O
,	O
2	int
,	O
2	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
void	O
,	O
siLreplace_array	O
,	O
(	O
object	O
old	O
,	O
object	O
new	O
)	O
,	O
""	pointer
)	O
{	O
struct	O
dummy	O
fw	struct
;	O
fw	struct
=	O
old	O
->	O
d	int
;	O
old	O
=	O
IisArray	function
(	O
old	O
)	O
;	O
if	O
(	O
TYPE_OF	function
(	O
old	O
)	O
!=	O
TYPE_OF	function
(	O
new	O
)	O
||	O
(	O
TYPE_OF	function
(	O
old	O
)	O
==	O
t_array	O
&&	O
old	O
->	O
a	O
.	O
a_rank	O
!=	O
new	O
->	O
a	O
.	O
a_rank	O
)	O
)	O
{	O
FEerror	function
(	O
"Cannot do array replacement ~a by ~a"	pointer
,	O
2	int
,	O
old	O
,	O
new	O
)	O
;	O
}	O
{	O
int	O
offset	int
=	O
new	O
->	O
ust	O
.	O
ust_self	O
-	O
old	O
->	O
ust	O
.	O
ust_self	O
;	O
object	O
displaced	O
=	O
make_cons	function
(	O
DISPLACED_TO	function
(	O
new	O
)	O
,	O
DISPLACED_FROM	function
(	O
old	O
)	O
)	O
;	O
Icheck_displaced	function
(	O
DISPLACED_FROM	function
(	O
old	O
)	O
,	O
old	O
,	O
new	O
->	O
a	O
.	O
a_dim	O
)	O
;	O
adjust_displaced	function
(	O
old	O
,	O
offset	int
)	O
;	O
if	O
(	O
TYPE_OF	function
(	O
old	O
)	O
==	O
t_vector	O
&&	O
old	O
->	O
v	int
.	O
v_hasfillp	O
)	O
{	O
new	O
->	O
v	int
.	O
v_hasfillp	O
=	O
1	int
;	O
new	O
->	O
v	int
.	O
v_fillp	O
=	O
old	O
->	O
v	int
.	O
v_fillp	O
;	O
}	O
if	O
(	O
TYPE_OF	function
(	O
old	O
)	O
==	O
t_string	O
)	O
old	O
->	O
st	O
=	O
new	O
->	O
st	O
;	O
else	O
old	O
->	O
a	O
=	O
new	O
->	O
a	O
;	O
new	O
->	O
a	O
.	O
a_dim	O
=	O
0	int
;	O
new	O
->	O
a	O
.	O
a_self	O
=	O
0	int
;	O
old	O
->	O
d	int
=	O
fw	struct
;	O
old	O
->	O
a	O
.	O
a_displaced	O
=	O
displaced	O
;	O
}	O
return	O
old	O
;	O
}	O
DEFUN_NEW	function
(	O
"ARRAY-TOTAL-SIZE"	pointer
,	O
object	O
,	O
fLarray_total_size	O
,	O
LISP	O
,	O
1	int
,	O
1	int
,	O
NONE	O
,	O
IO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
x	int
)	O
,	O
""	pointer
)	O
{	O
x	int
=	O
IisArray	function
(	O
x	int
)	O
;	O
return	O
(	O
object	O
)	O
(	O
fixnum	O
)	O
x	int
->	O
a	O
.	O
a_dim	O
;	O
}	O
DEFUN_NEW	function
(	O
"ASET-BY-CURSOR"	pointer
,	O
object	O
,	O
fSaset_by_cursor	O
,	O
SI	O
,	O
3	int
,	O
3	int
,	O
NONE	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
OO	O
,	O
(	O
object	O
array	O
,	O
object	O
val	int
,	O
object	O
cursor	O
)	O
,	O
""	pointer
)	O
{	O
object	O
x	int
;	O
int	O
i	int
;	O
object	O
ind	O
[	O
ARRAY_RANK_LIMIT	O
]	O
;	O
ind	O
[	O
0	int
]	O
=	O
array	O
;	O
if	O
(	O
cursor	O
==	O
sLnil	O
)	O
{	O
fSaset1	function
(	O
array	O
,	O
0	int
,	O
val	int
)	O
;	O
RETURN1	function
(	O
array	O
)	O
;	O
}	O
ind	O
[	O
1	int
]	O
=	O
MMcar	function
(	O
cursor	O
)	O
;	O
ASSURE_TYPE	function
(	O
ind	O
[	O
1	int
]	O
,	O
t_fixnum	O
)	O
;	O
i	int
=	O
2	int
;	O
for	O
(	O
x	int
=	O
MMcdr	function
(	O
cursor	O
)	O
;	O
!	O
endp	function
(	O
x	int
)	O
;	O
x	int
=	O
MMcdr	function
(	O
x	int
)	O
)	O
{	O
ind	O
[	O
i	int
++	O
]	O
=	O
MMcar	function
(	O
x	int
)	O
;	O
}	O
ind	O
[	O
i	int
]	O
=	O
val	int
;	O
VFUN_NARGS	O
=	O
i	int
+	O
1	int
;	O
switch	O
(	O
i	int
+	O
1	int
)	O
{	O
case	O
3	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
)	O
;	O
break	O
;	O
case	O
4	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
)	O
;	O
break	O
;	O
case	O
5	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
)	O
;	O
break	O
;	O
case	O
6	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
)	O
;	O
break	O
;	O
case	O
7	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
)	O
;	O
break	O
;	O
case	O
8	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
)	O
;	O
break	O
;	O
case	O
9	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
)	O
;	O
break	O
;	O
case	O
10	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
)	O
;	O
break	O
;	O
case	O
11	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
)	O
;	O
break	O
;	O
case	O
12	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
)	O
;	O
break	O
;	O
case	O
13	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
)	O
;	O
break	O
;	O
case	O
14	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
)	O
;	O
break	O
;	O
case	O
15	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
)	O
;	O
break	O
;	O
case	O
16	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
)	O
;	O
break	O
;	O
case	O
17	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
)	O
;	O
break	O
;	O
case	O
18	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
)	O
;	O
break	O
;	O
case	O
19	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
)	O
;	O
break	O
;	O
case	O
20	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
)	O
;	O
break	O
;	O
case	O
21	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
)	O
;	O
break	O
;	O
case	O
22	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
)	O
;	O
break	O
;	O
case	O
23	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
)	O
;	O
break	O
;	O
case	O
24	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
)	O
;	O
break	O
;	O
case	O
25	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
)	O
;	O
break	O
;	O
case	O
26	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
)	O
;	O
break	O
;	O
case	O
27	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
)	O
;	O
break	O
;	O
case	O
28	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
)	O
;	O
break	O
;	O
case	O
29	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
)	O
;	O
break	O
;	O
case	O
30	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
)	O
;	O
break	O
;	O
case	O
31	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
)	O
;	O
break	O
;	O
case	O
32	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
)	O
;	O
break	O
;	O
case	O
33	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
)	O
;	O
break	O
;	O
case	O
34	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
)	O
;	O
break	O
;	O
case	O
35	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
)	O
;	O
break	O
;	O
case	O
36	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
)	O
;	O
break	O
;	O
case	O
37	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
)	O
;	O
break	O
;	O
case	O
38	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
)	O
;	O
break	O
;	O
case	O
39	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
)	O
;	O
break	O
;	O
case	O
40	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
)	O
;	O
break	O
;	O
case	O
41	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
)	O
;	O
break	O
;	O
case	O
42	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
)	O
;	O
break	O
;	O
case	O
43	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
)	O
;	O
break	O
;	O
case	O
44	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
)	O
;	O
break	O
;	O
case	O
45	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
)	O
;	O
break	O
;	O
case	O
46	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
)	O
;	O
break	O
;	O
case	O
47	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
)	O
;	O
break	O
;	O
case	O
48	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
)	O
;	O
break	O
;	O
case	O
49	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
)	O
;	O
break	O
;	O
case	O
50	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
)	O
;	O
break	O
;	O
case	O
51	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
)	O
;	O
break	O
;	O
case	O
52	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
)	O
;	O
break	O
;	O
case	O
53	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
,	O
ind	O
[	O
52	int
]	O
)	O
;	O
break	O
;	O
case	O
54	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
,	O
ind	O
[	O
52	int
]	O
,	O
ind	O
[	O
53	int
]	O
)	O
;	O
break	O
;	O
case	O
55	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
,	O
ind	O
[	O
52	int
]	O
,	O
ind	O
[	O
53	int
]	O
,	O
ind	O
[	O
54	int
]	O
)	O
;	O
break	O
;	O
case	O
56	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
,	O
ind	O
[	O
52	int
]	O
,	O
ind	O
[	O
53	int
]	O
,	O
ind	O
[	O
54	int
]	O
,	O
ind	O
[	O
55	int
]	O
)	O
;	O
break	O
;	O
case	O
57	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
,	O
ind	O
[	O
52	int
]	O
,	O
ind	O
[	O
53	int
]	O
,	O
ind	O
[	O
54	int
]	O
,	O
ind	O
[	O
55	int
]	O
,	O
ind	O
[	O
56	int
]	O
)	O
;	O
break	O
;	O
case	O
58	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
,	O
ind	O
[	O
52	int
]	O
,	O
ind	O
[	O
53	int
]	O
,	O
ind	O
[	O
54	int
]	O
,	O
ind	O
[	O
55	int
]	O
,	O
ind	O
[	O
56	int
]	O
,	O
ind	O
[	O
57	int
]	O
)	O
;	O
break	O
;	O
case	O
59	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
,	O
ind	O
[	O
52	int
]	O
,	O
ind	O
[	O
53	int
]	O
,	O
ind	O
[	O
54	int
]	O
,	O
ind	O
[	O
55	int
]	O
,	O
ind	O
[	O
56	int
]	O
,	O
ind	O
[	O
57	int
]	O
,	O
ind	O
[	O
58	int
]	O
)	O
;	O
break	O
;	O
case	O
60	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
,	O
ind	O
[	O
52	int
]	O
,	O
ind	O
[	O
53	int
]	O
,	O
ind	O
[	O
54	int
]	O
,	O
ind	O
[	O
55	int
]	O
,	O
ind	O
[	O
56	int
]	O
,	O
ind	O
[	O
57	int
]	O
,	O
ind	O
[	O
58	int
]	O
,	O
ind	O
[	O
59	int
]	O
)	O
;	O
break	O
;	O
case	O
61	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
,	O
ind	O
[	O
52	int
]	O
,	O
ind	O
[	O
53	int
]	O
,	O
ind	O
[	O
54	int
]	O
,	O
ind	O
[	O
55	int
]	O
,	O
ind	O
[	O
56	int
]	O
,	O
ind	O
[	O
57	int
]	O
,	O
ind	O
[	O
58	int
]	O
,	O
ind	O
[	O
59	int
]	O
,	O
ind	O
[	O
60	int
]	O
)	O
;	O
break	O
;	O
case	O
62	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
,	O
ind	O
[	O
52	int
]	O
,	O
ind	O
[	O
53	int
]	O
,	O
ind	O
[	O
54	int
]	O
,	O
ind	O
[	O
55	int
]	O
,	O
ind	O
[	O
56	int
]	O
,	O
ind	O
[	O
57	int
]	O
,	O
ind	O
[	O
58	int
]	O
,	O
ind	O
[	O
59	int
]	O
,	O
ind	O
[	O
60	int
]	O
,	O
ind	O
[	O
61	int
]	O
)	O
;	O
break	O
;	O
case	O
63	int
:	O
(	O
*	O
FFN	function
(	O
fSaset	O
)	O
)	O
(	O
ind	O
[	O
0	int
]	O
,	O
ind	O
[	O
1	int
]	O
,	O
ind	O
[	O
2	int
]	O
,	O
ind	O
[	O
3	int
]	O
,	O
ind	O
[	O
4	int
]	O
,	O
ind	O
[	O
5	int
]	O
,	O
ind	O
[	O
6	int
]	O
,	O
ind	O
[	O
7	int
]	O
,	O
ind	O
[	O
8	int
]	O
,	O
ind	O
[	O
9	int
]	O
,	O
ind	O
[	O
10	int
]	O
,	O
ind	O
[	O
11	int
]	O
,	O
ind	O
[	O
12	int
]	O
,	O
ind	O
[	O
13	int
]	O
,	O
ind	O
[	O
14	int
]	O
,	O
ind	O
[	O
15	int
]	O
,	O
ind	O
[	O
16	int
]	O
,	O
ind	O
[	O
17	int
]	O
,	O
ind	O
[	O
18	int
]	O
,	O
ind	O
[	O
19	int
]	O
,	O
ind	O
[	O
20	int
]	O
,	O
ind	O
[	O
21	int
]	O
,	O
ind	O
[	O
22	int
]	O
,	O
ind	O
[	O
23	int
]	O
,	O
ind	O
[	O
24	int
]	O
,	O
ind	O
[	O
25	int
]	O
,	O
ind	O
[	O
26	int
]	O
,	O
ind	O
[	O
27	int
]	O
,	O
ind	O
[	O
28	int
]	O
,	O
ind	O
[	O
29	int
]	O
,	O
ind	O
[	O
30	int
]	O
,	O
ind	O
[	O
31	int
]	O
,	O
ind	O
[	O
32	int
]	O
,	O
ind	O
[	O
33	int
]	O
,	O
ind	O
[	O
34	int
]	O
,	O
ind	O
[	O
35	int
]	O
,	O
ind	O
[	O
36	int
]	O
,	O
ind	O
[	O
37	int
]	O
,	O
ind	O
[	O
38	int
]	O
,	O
ind	O
[	O
39	int
]	O
,	O
ind	O
[	O
40	int
]	O
,	O
ind	O
[	O
41	int
]	O
,	O
ind	O
[	O
42	int
]	O
,	O
ind	O
[	O
43	int
]	O
,	O
ind	O
[	O
44	int
]	O
,	O
ind	O
[	O
45	int
]	O
,	O
ind	O
[	O
46	int
]	O
,	O
ind	O
[	O
47	int
]	O
,	O
ind	O
[	O
48	int
]	O
,	O
ind	O
[	O
49	int
]	O
,	O
ind	O
[	O
50	int
]	O
,	O
ind	O
[	O
51	int
]	O
,	O
ind	O
[	O
52	int
]	O
,	O
ind	O
[	O
53	int
]	O
,	O
ind	O
[	O
54	int
]	O
,	O
ind	O
[	O
55	int
]	O
,	O
ind	O
[	O
56	int
]	O
,	O
ind	O
[	O
57	int
]	O
,	O
ind	O
[	O
58	int
]	O
,	O
ind	O
[	O
59	int
]	O
,	O
ind	O
[	O
60	int
]	O
,	O
ind	O
[	O
61	int
]	O
,	O
ind	O
[	O
62	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
FEerror	function
(	O
"Exceeded call-arguments-limit "	pointer
,	O
0	int
)	O
;	O
}	O
RETURN1	function
(	O
array	O
)	O
;	O
}	O
void	O
gcl_init_array_function	function
(	O
void	O
)	O
{	O
make_function	function
(	O
"ARRAY-DISPLACEMENT"	pointer
,	O
Larray_displacement	int
)	O
;	O
}	O
