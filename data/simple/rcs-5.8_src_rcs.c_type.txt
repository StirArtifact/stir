struct	O
top	struct
*	O
top	struct
;	O
struct	O
u_log	struct
{	O
char	O
const	O
*	O
revno	pointer
;	O
struct	O
cbuf	struct
message	struct
;	O
}	O
;	O
struct	O
u_state	struct
{	O
char	O
const	O
*	O
revno	pointer
;	O
char	O
const	O
*	O
status	int
;	O
}	O
;	O
enum	O
changeaccess	enum
{	O
append	int
,	O
erase	int
}	O
;	O
struct	O
chaccess	struct
{	O
char	O
const	O
*	O
login	pointer
;	O
enum	O
changeaccess	enum
command	enum
;	O
}	O
;	O
struct	O
delrevpair	struct
{	O
char	O
const	O
*	O
strt	pointer
;	O
char	O
const	O
*	O
end	pointer
;	O
int	O
code	int
;	O
}	O
;	O
static	O
struct	O
cbuf	struct
numrev	struct
;	O
static	O
char	O
const	O
*	O
headstate	pointer
;	O
static	O
bool	bool
chgheadstate	bool
,	O
lockhead	bool
,	O
unlockcaller	bool
,	O
suppress_mail	bool
;	O
static	O
int	O
exitstatus	int
;	O
static	O
struct	O
link	struct
*	O
newlocklst	pointer
,	O
*	O
rmvlocklst	pointer
;	O
static	O
struct	O
link	struct
messagelst	struct
;	O
static	O
struct	O
link	struct
statelst	struct
;	O
static	O
struct	O
link	struct
assoclst	struct
;	O
static	O
struct	O
link	struct
chaccess	struct
;	O
static	O
struct	O
delrevpair	struct
delrev	struct
;	O
static	O
struct	O
delta	struct
*	O
cuthead	pointer
,	O
*	O
cuttail	pointer
,	O
*	O
delstrt	pointer
;	O
static	O
void	O
cleanup	function
(	O
void	O
)	O
{	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exitstatus	int
=	O
EXIT_FAILURE	int
;	O
fro_zclose	function
(	O
&	O
FLOW	O
(	O
from	pointer
)	O
)	O
;	O
Ozclose	function
(	O
&	O
FLOW	O
(	O
res	pointer
)	O
)	O
;	O
ORCSclose	function
(	O
)	O
;	O
dirtempunlink	function
(	O
)	O
;	O
}	O
static	O
exiting	O
void	O
exiterr	pointer
(	O
void	O
)	O
{	O
ORCSerror	function
(	O
)	O
;	O
dirtempunlink	function
(	O
)	O
;	O
tempunlink	function
(	O
)	O
;	O
exit_failurefully	function
(	O
)	O
;	O
}	O
static	O
void	O
getassoclst	function
(	O
struct	O
link	struct
*	O
*	O
tp	pointer
,	O
char	O
*	O
sp	pointer
)	O
{	O
char	O
option	pointer
=	O
*	O
sp	pointer
++	O
;	O
struct	O
u_symdef	struct
*	O
ud	pointer
;	O
char	O
const	O
*	O
name	pointer
;	O
size_t	long
len	char
;	O
int	O
c	int
=	O
*	O
sp	pointer
;	O
SKIPWS	O
(	O
)	O
;	O
name	pointer
=	O
SHSNIP	O
(	O
&	O
len	char
,	O
sp	pointer
,	O
checksym	function
(	O
sp	pointer
,	O
':'	O
)	O
)	O
;	O
sp	pointer
+=	O
len	char
;	O
c	int
=	O
*	O
sp	pointer
;	O
SKIPWS	O
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
':'	O
&&	O
c	int
!=	O
'\0'	O
)	O
{	O
PERR	O
(	O
"invalid string `%s' after option `-%c'"	pointer
,	O
sp	pointer
,	O
option	pointer
)	O
;	O
return	O
;	O
}	O
ud	pointer
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
u_symdef	struct
)	O
;	O
ud	pointer
->	O
u	struct
.	O
meaningful	pointer
=	O
name	pointer
;	O
ud	pointer
->	O
override	bool
=	O
(	O
'N'	O
==	O
option	pointer
)	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
ud	pointer
->	O
u	struct
.	O
underlying	pointer
=	O
NULL	O
;	O
else	O
{	O
c	int
=	O
*	O
++	O
sp	pointer
;	O
SKIPWS	O
(	O
)	O
;	O
ud	pointer
->	O
u	struct
.	O
underlying	pointer
=	O
sp	pointer
;	O
}	O
*	O
tp	pointer
=	O
extend	function
(	O
*	O
tp	pointer
,	O
ud	pointer
,	O
PLEXUS	O
)	O
;	O
}	O
static	O
void	O
getchaccess	function
(	O
struct	O
link	struct
*	O
*	O
tp	pointer
,	O
char	O
const	O
*	O
login	pointer
,	O
enum	O
changeaccess	enum
command	enum
)	O
{	O
register	O
struct	O
chaccess	struct
*	O
ch	pointer
;	O
ch	pointer
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
chaccess	struct
)	O
;	O
ch	pointer
->	O
login	pointer
=	O
login	pointer
;	O
ch	pointer
->	O
command	enum
=	O
command	enum
;	O
*	O
tp	pointer
=	O
extend	function
(	O
*	O
tp	pointer
,	O
ch	pointer
,	O
PLEXUS	O
)	O
;	O
}	O
static	O
void	O
getaccessor	function
(	O
struct	O
link	struct
*	O
*	O
tp	pointer
,	O
char	O
*	O
opt	pointer
,	O
enum	O
changeaccess	enum
command	enum
)	O
{	O
register	O
int	O
c	int
;	O
register	O
char	O
*	O
sp	pointer
;	O
sp	pointer
=	O
opt	pointer
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
sp	pointer
)	O
==	O
' '	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
','	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
if	O
(	O
command	enum
==	O
erase	int
&&	O
sp	pointer
-	O
opt	pointer
==	O
1	int
)	O
{	O
getchaccess	function
(	O
tp	pointer
,	O
NULL	O
,	O
command	enum
)	O
;	O
return	O
;	O
}	O
PERR	O
(	O
"missing login name after option -a or -e"	pointer
)	O
;	O
return	O
;	O
}	O
while	O
(	O
c	int
!=	O
'\0'	O
)	O
{	O
size_t	long
len	char
;	O
getchaccess	function
(	O
tp	pointer
,	O
SHSNIP	O
(	O
&	O
len	char
,	O
sp	pointer
,	O
checkid	function
(	O
sp	pointer
,	O
','	O
)	O
)	O
,	O
command	enum
)	O
;	O
sp	pointer
+=	O
len	char
;	O
c	int
=	O
*	O
sp	pointer
;	O
while	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
','	O
)	O
c	int
=	O
(	O
*	O
++	O
sp	pointer
)	O
;	O
}	O
}	O
static	O
void	O
getmessage	function
(	O
struct	O
link	struct
*	O
*	O
tp	pointer
,	O
char	O
*	O
option	pointer
)	O
{	O
struct	O
u_log	struct
*	O
um	pointer
;	O
struct	O
cbuf	struct
cb	pointer
;	O
char	O
*	O
m	pointer
;	O
if	O
(	O
!	O
(	O
m	pointer
=	O
strchr	function
(	O
option	pointer
,	O
':'	O
)	O
)	O
)	O
{	O
PERR	O
(	O
"-m option lacks %s"	pointer
,	O
ks_revno	array
)	O
;	O
return	O
;	O
}	O
*	O
m	pointer
++	O
=	O
'\0'	O
;	O
cb	pointer
=	O
cleanlogmsg	function
(	O
m	pointer
,	O
strlen	function
(	O
m	pointer
)	O
)	O
;	O
if	O
(	O
!	O
cb	pointer
.	O
size	long
)	O
set_empty_log_message	function
(	O
&	O
cb	pointer
)	O
;	O
um	pointer
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
u_log	struct
)	O
;	O
um	pointer
->	O
revno	pointer
=	O
option	pointer
;	O
um	pointer
->	O
message	struct
=	O
cb	pointer
;	O
*	O
tp	pointer
=	O
extend	function
(	O
*	O
tp	pointer
,	O
um	pointer
,	O
PLEXUS	O
)	O
;	O
}	O
static	O
void	O
getstates	function
(	O
struct	O
link	struct
*	O
*	O
tp	pointer
,	O
char	O
*	O
sp	pointer
)	O
{	O
char	O
const	O
*	O
temp	pointer
;	O
struct	O
u_state	struct
*	O
us	pointer
;	O
register	O
int	O
c	int
;	O
size_t	long
len	char
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
sp	pointer
)	O
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
continue	O
;	O
temp	pointer
=	O
checkid	function
(	O
sp	pointer
,	O
':'	O
)	O
;	O
temp	pointer
=	O
SHSNIP	O
(	O
&	O
len	char
,	O
sp	pointer
,	O
temp	pointer
)	O
;	O
sp	pointer
+=	O
len	char
;	O
c	int
=	O
*	O
sp	pointer
;	O
while	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
c	int
=	O
*	O
++	O
sp	pointer
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
chgheadstate	bool
=	O
true	int
;	O
headstate	pointer
=	O
temp	pointer
;	O
return	O
;	O
}	O
else	O
if	O
(	O
c	int
!=	O
':'	O
)	O
{	O
PERR	O
(	O
"missing ':' after state in option -s"	pointer
)	O
;	O
return	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
sp	pointer
)	O
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
continue	O
;	O
us	pointer
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
u_state	struct
)	O
;	O
us	pointer
->	O
status	int
=	O
temp	pointer
;	O
us	pointer
->	O
revno	pointer
=	O
sp	pointer
;	O
*	O
tp	pointer
=	O
extend	function
(	O
*	O
tp	pointer
,	O
us	pointer
,	O
PLEXUS	O
)	O
;	O
}	O
static	O
void	O
putdelrev	function
(	O
char	O
const	O
*	O
b	pointer
,	O
char	O
const	O
*	O
e	pointer
,	O
bool	bool
sawsep	bool
)	O
{	O
if	O
(	O
delrev	struct
.	O
strt	pointer
||	O
delrev	struct
.	O
end	pointer
)	O
{	O
PWARN	O
(	O
"ignoring spurious `-o' range `%s:%s'"	pointer
,	O
b	pointer
?	O
b	pointer
:	O
"(unspecified)"	pointer
,	O
e	pointer
?	O
e	pointer
:	O
"(unspecified)"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
sawsep	bool
)	O
{	O
delrev	struct
.	O
strt	pointer
=	O
b	pointer
;	O
delrev	struct
.	O
code	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
b	pointer
||	O
!	O
b	pointer
[	O
0	int
]	O
)	O
{	O
delrev	struct
.	O
strt	pointer
=	O
e	pointer
;	O
delrev	struct
.	O
code	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
e	pointer
[	O
0	int
]	O
)	O
{	O
delrev	struct
.	O
strt	pointer
=	O
b	pointer
;	O
delrev	struct
.	O
code	int
=	O
2	int
;	O
}	O
else	O
{	O
delrev	struct
.	O
strt	pointer
=	O
b	pointer
;	O
delrev	struct
.	O
end	pointer
=	O
e	pointer
;	O
delrev	struct
.	O
code	int
=	O
3	int
;	O
}	O
}	O
static	O
void	O
scanlogtext	function
(	O
struct	O
editstuff	O
*	O
es	pointer
,	O
struct	O
wlink	struct
*	O
*	O
ls	pointer
,	O
struct	O
delta	struct
*	O
delta	struct
,	O
bool	bool
edit	bool
)	O
{	O
struct	O
delta	struct
const	O
*	O
nextdelta	pointer
;	O
struct	O
fro	struct
*	O
from	pointer
=	O
FLOW	O
(	O
from	pointer
)	O
;	O
FILE	struct
*	O
to	pointer
;	O
struct	O
atat	pointer
*	O
log	pointer
,	O
*	O
text	pointer
;	O
struct	O
range	struct
range	struct
;	O
for	O
(	O
;	O
;	O
*	O
ls	pointer
=	O
(	O
*	O
ls	pointer
)	O
->	O
next	pointer
)	O
{	O
if	O
(	O
!	O
*	O
ls	pointer
)	O
return	O
;	O
to	pointer
=	O
FLOW	O
(	O
to	pointer
)	O
=	O
NULL	O
;	O
nextdelta	pointer
=	O
(	O
*	O
ls	pointer
)	O
->	O
entry	pointer
;	O
log	pointer
=	O
nextdelta	pointer
->	O
log	pointer
;	O
text	pointer
=	O
nextdelta	pointer
->	O
text	pointer
;	O
range	struct
.	O
beg	pointer
=	O
nextdelta	pointer
->	O
neck	long
;	O
if	O
(	O
nextdelta	pointer
->	O
selector	bool
)	O
{	O
to	pointer
=	O
FLOW	O
(	O
to	pointer
)	O
=	O
FLOW	O
(	O
rewr	pointer
)	O
;	O
range	struct
.	O
end	pointer
=	O
log	pointer
->	O
beg	pointer
;	O
fro_spew_partial	function
(	O
to	pointer
,	O
from	pointer
,	O
&	O
range	struct
)	O
;	O
}	O
if	O
(	O
nextdelta	pointer
==	O
cuttail	pointer
)	O
{	O
if	O
(	O
!	O
delta	struct
->	O
pretty_log	struct
.	O
string	pointer
)	O
{	O
delta	struct
->	O
pretty_log	struct
=	O
string_from_atat	function
(	O
SINGLE	O
,	O
log	pointer
)	O
;	O
delta	struct
->	O
pretty_log	struct
=	O
cleanlogmsg	function
(	O
delta	struct
->	O
pretty_log	struct
.	O
string	pointer
,	O
delta	struct
->	O
pretty_log	struct
.	O
size	long
)	O
;	O
}	O
}	O
else	O
if	O
(	O
nextdelta	pointer
->	O
pretty_log	struct
.	O
string	pointer
&&	O
nextdelta	pointer
->	O
selector	bool
)	O
{	O
afputc	function
(	O
SDELIM	char
,	O
to	pointer
)	O
;	O
putstring	function
(	O
to	pointer
,	O
false	int
,	O
nextdelta	pointer
->	O
pretty_log	struct
,	O
true	int
)	O
;	O
afputc	function
(	O
'\n'	O
,	O
to	pointer
)	O
;	O
}	O
else	O
if	O
(	O
to	pointer
)	O
atat_put	function
(	O
to	pointer
,	O
log	pointer
)	O
;	O
range	struct
.	O
beg	pointer
=	O
ATAT_TEXT_END	O
(	O
log	pointer
)	O
;	O
range	struct
.	O
end	pointer
=	O
text	pointer
->	O
beg	pointer
;	O
if	O
(	O
to	pointer
)	O
fro_spew_partial	function
(	O
to	pointer
,	O
from	pointer
,	O
&	O
range	struct
)	O
;	O
if	O
(	O
delta	struct
==	O
nextdelta	pointer
)	O
break	O
;	O
if	O
(	O
to	pointer
)	O
atat_put	function
(	O
to	pointer
,	O
text	pointer
)	O
;	O
}	O
fro_move	function
(	O
from	pointer
,	O
range	struct
.	O
end	pointer
)	O
;	O
if	O
(	O
edit	bool
)	O
editstring	function
(	O
es	pointer
,	O
text	pointer
,	O
NULL	O
)	O
;	O
else	O
enterstring	function
(	O
es	pointer
,	O
text	pointer
)	O
;	O
}	O
static	O
struct	O
link	struct
*	O
rmnewlocklst	function
(	O
char	O
const	O
*	O
which	pointer
)	O
{	O
struct	O
link	struct
*	O
pt	pointer
,	O
*	O
*	O
pre	pointer
;	O
pre	pointer
=	O
&	O
newlocklst	pointer
;	O
while	O
(	O
(	O
pt	pointer
=	O
*	O
pre	pointer
)	O
)	O
if	O
(	O
STR_DIFF	O
(	O
pt	pointer
->	O
entry	pointer
,	O
which	pointer
)	O
)	O
pre	pointer
=	O
&	O
pt	pointer
->	O
next	pointer
;	O
else	O
*	O
pre	pointer
=	O
pt	pointer
->	O
next	pointer
;	O
return	O
*	O
pre	pointer
;	O
}	O
static	O
bool	bool
doaccess	function
(	O
void	O
)	O
{	O
register	O
bool	bool
changed	int
=	O
false	int
;	O
struct	O
link	struct
*	O
ls	pointer
,	O
box	pointer
,	O
*	O
tp	pointer
;	O
for	O
(	O
ls	pointer
=	O
chaccess	struct
.	O
next	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
struct	O
chaccess	struct
const	O
*	O
ch	pointer
=	O
ls	pointer
->	O
entry	pointer
;	O
char	O
const	O
*	O
login	pointer
=	O
ch	pointer
->	O
login	pointer
;	O
switch	O
(	O
ch	pointer
->	O
command	enum
)	O
{	O
case	O
erase	int
:	O
if	O
(	O
!	O
login	pointer
)	O
{	O
if	O
(	O
GROK	O
(	O
access	pointer
)	O
)	O
{	O
GROK	O
(	O
access	pointer
)	O
=	O
NULL	O
;	O
changed	int
=	O
true	int
;	O
}	O
}	O
else	O
for	O
(	O
box	pointer
.	O
next	pointer
=	O
GROK	O
(	O
access	pointer
)	O
,	O
tp	pointer
=	O
&	O
box	pointer
;	O
tp	pointer
->	O
next	pointer
;	O
tp	pointer
=	O
tp	pointer
->	O
next	pointer
)	O
if	O
(	O
STR_SAME	O
(	O
login	pointer
,	O
tp	pointer
->	O
next	pointer
->	O
entry	pointer
)	O
)	O
{	O
tp	pointer
->	O
next	pointer
=	O
tp	pointer
->	O
next	pointer
->	O
next	pointer
;	O
changed	int
=	O
true	int
;	O
GROK	O
(	O
access	pointer
)	O
=	O
box	pointer
.	O
next	pointer
;	O
break	O
;	O
}	O
break	O
;	O
case	O
append	int
:	O
for	O
(	O
box	pointer
.	O
next	pointer
=	O
GROK	O
(	O
access	pointer
)	O
,	O
tp	pointer
=	O
&	O
box	pointer
;	O
tp	pointer
->	O
next	pointer
;	O
tp	pointer
=	O
tp	pointer
->	O
next	pointer
)	O
if	O
(	O
STR_SAME	O
(	O
login	pointer
,	O
tp	pointer
->	O
next	pointer
->	O
entry	pointer
)	O
)	O
break	O
;	O
if	O
(	O
!	O
tp	pointer
->	O
next	pointer
)	O
{	O
extend	function
(	O
tp	pointer
,	O
login	pointer
,	O
SINGLE	O
)	O
;	O
changed	int
=	O
true	int
;	O
GROK	O
(	O
access	pointer
)	O
=	O
box	pointer
.	O
next	pointer
;	O
}	O
break	O
;	O
}	O
}	O
return	O
changed	int
;	O
}	O
static	O
bool	bool
sendmail	function
(	O
char	O
const	O
*	O
Delta	pointer
,	O
char	O
const	O
*	O
who	pointer
)	O
{	O
complain	function
(	O
"Revision %s is already locked by %s.\n"	pointer
,	O
Delta	pointer
,	O
who	pointer
)	O
;	O
if	O
(	O
suppress_mail	bool
)	O
return	O
true	int
;	O
if	O
(	O
!	O
yesorno	function
(	O
false	int
,	O
"Do you want to break the lock? [ny](n): "	pointer
)	O
)	O
return	O
false	int
;	O
PWARN	O
(	O
"Mail notification of broken locks is not available."	pointer
)	O
;	O
PWARN	O
(	O
"Please tell `%s' why you broke the lock."	pointer
,	O
who	pointer
)	O
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
breaklock	function
(	O
struct	O
delta	struct
const	O
*	O
delta	struct
)	O
{	O
struct	O
rcslock	struct
const	O
*	O
rl	pointer
;	O
struct	O
link	struct
box	pointer
,	O
*	O
tp	pointer
;	O
char	O
const	O
*	O
num	pointer
,	O
*	O
before	pointer
;	O
num	pointer
=	O
delta	struct
->	O
num	pointer
;	O
box	pointer
.	O
next	pointer
=	O
GROK	O
(	O
locks	pointer
)	O
;	O
if	O
(	O
!	O
(	O
tp	pointer
=	O
lock_delta_memq	O
(	O
&	O
box	pointer
,	O
delta	struct
)	O
)	O
)	O
{	O
RERR	O
(	O
"no lock set on revision %s"	pointer
,	O
num	pointer
)	O
;	O
return	O
false	int
;	O
}	O
rl	pointer
=	O
tp	pointer
->	O
next	pointer
->	O
entry	pointer
;	O
before	pointer
=	O
rl	pointer
->	O
login	pointer
;	O
if	O
(	O
!	O
caller_login_p	function
(	O
before	pointer
)	O
&&	O
!	O
sendmail	function
(	O
num	pointer
,	O
before	pointer
)	O
)	O
{	O
RERR	O
(	O
"revision %s still locked by %s"	pointer
,	O
num	pointer
,	O
before	pointer
)	O
;	O
return	O
false	int
;	O
}	O
diagnose	function
(	O
"%s unlocked"	pointer
,	O
num	pointer
)	O
;	O
lock_drop	function
(	O
&	O
box	pointer
,	O
tp	pointer
)	O
;	O
return	O
true	int
;	O
}	O
static	O
struct	O
delta	struct
*	O
searchcutpt	function
(	O
char	O
const	O
*	O
object	pointer
,	O
int	O
length	int
,	O
struct	O
wlink	struct
*	O
store	pointer
)	O
{	O
struct	O
delta	struct
*	O
delta	struct
;	O
cuthead	pointer
=	O
NULL	O
;	O
while	O
(	O
delta	struct
=	O
store	pointer
->	O
entry	pointer
,	O
compartial	function
(	O
delta	struct
->	O
num	pointer
,	O
object	pointer
,	O
length	int
)	O
)	O
{	O
cuthead	pointer
=	O
delta	struct
;	O
store	pointer
=	O
store	pointer
->	O
next	pointer
;	O
}	O
return	O
delta	struct
;	O
}	O
static	O
bool	bool
branchpoint	function
(	O
struct	O
delta	struct
*	O
strt	pointer
,	O
struct	O
delta	struct
*	O
tail	pointer
)	O
{	O
struct	O
delta	struct
*	O
pt	pointer
;	O
for	O
(	O
pt	pointer
=	O
strt	pointer
;	O
pt	pointer
!=	O
tail	pointer
;	O
pt	pointer
=	O
pt	pointer
->	O
ilk	pointer
)	O
{	O
if	O
(	O
pt	pointer
->	O
branches	pointer
)	O
{	O
RERR	O
(	O
"can't remove branch point %s"	pointer
,	O
pt	pointer
->	O
num	pointer
)	O
;	O
return	O
true	int
;	O
}	O
if	O
(	O
lock_on	function
(	O
pt	pointer
)	O
)	O
{	O
RERR	O
(	O
"can't remove locked revision %s"	pointer
,	O
pt	pointer
->	O
num	pointer
)	O
;	O
return	O
true	int
;	O
}	O
pt	pointer
->	O
selector	bool
=	O
false	int
;	O
diagnose	function
(	O
"deleting revision %s"	pointer
,	O
pt	pointer
->	O
num	pointer
)	O
;	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
removerevs	function
(	O
void	O
)	O
{	O
struct	O
delta	struct
*	O
target	pointer
,	O
*	O
target2	pointer
,	O
*	O
temp	pointer
;	O
struct	O
wlink	struct
*	O
ls	pointer
;	O
int	O
length	int
;	O
int	O
cmp	int
;	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct
,	O
delrev	struct
.	O
strt	pointer
)	O
)	O
return	O
false	int
;	O
target	pointer
=	O
GENREV	O
(	O
numrev	struct
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
target	pointer
)	O
return	O
false	int
;	O
cmp	int
=	O
cmpnum	function
(	O
target	pointer
->	O
num	pointer
,	O
numrev	struct
.	O
string	pointer
)	O
;	O
length	int
=	O
countnumflds	function
(	O
numrev	struct
.	O
string	pointer
)	O
;	O
if	O
(	O
delrev	struct
.	O
code	int
==	O
0	int
)	O
{	O
if	O
(	O
length	int
&	O
1	int
)	O
temp	pointer
=	O
SEARCH	O
(	O
target	pointer
->	O
num	pointer
,	O
length	int
+	O
1	int
)	O
;	O
else	O
if	O
(	O
cmp	int
)	O
{	O
RERR	O
(	O
"Revision %s doesn't exist."	pointer
,	O
numrev	struct
.	O
string	pointer
)	O
;	O
return	O
false	int
;	O
}	O
else	O
temp	pointer
=	O
SEARCH	O
(	O
numrev	struct
.	O
string	pointer
,	O
length	int
)	O
;	O
cuttail	pointer
=	O
target	pointer
->	O
ilk	pointer
;	O
if	O
(	O
branchpoint	function
(	O
temp	pointer
,	O
cuttail	pointer
)	O
)	O
{	O
cuttail	pointer
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
delstrt	pointer
=	O
temp	pointer
;	O
return	O
true	int
;	O
}	O
if	O
(	O
length	int
&	O
1	int
)	O
{	O
RERR	O
(	O
"invalid branch range %s after -o"	pointer
,	O
numrev	struct
.	O
string	pointer
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
delrev	struct
.	O
code	int
==	O
1	int
)	O
{	O
if	O
(	O
length	int
>	O
2	int
)	O
{	O
temp	pointer
=	O
SEARCH	O
(	O
target	pointer
->	O
num	pointer
,	O
length	int
-	O
1	int
)	O
;	O
cuttail	pointer
=	O
target	pointer
->	O
ilk	pointer
;	O
}	O
else	O
{	O
temp	pointer
=	O
SEARCH	O
(	O
target	pointer
->	O
num	pointer
,	O
length	int
)	O
;	O
cuttail	pointer
=	O
target	pointer
;	O
while	O
(	O
cuttail	pointer
&&	O
NUMF_EQ	O
(	O
1	int
,	O
target	pointer
->	O
num	pointer
,	O
cuttail	pointer
->	O
num	pointer
)	O
)	O
cuttail	pointer
=	O
cuttail	pointer
->	O
ilk	pointer
;	O
}	O
if	O
(	O
branchpoint	function
(	O
temp	pointer
,	O
cuttail	pointer
)	O
)	O
{	O
cuttail	pointer
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
delstrt	pointer
=	O
temp	pointer
;	O
return	O
true	int
;	O
}	O
if	O
(	O
delrev	struct
.	O
code	int
==	O
2	int
)	O
{	O
if	O
(	O
length	int
==	O
2	int
)	O
{	O
temp	pointer
=	O
SEARCH	O
(	O
target	pointer
->	O
num	pointer
,	O
1	int
)	O
;	O
if	O
(	O
cmp	int
)	O
cuttail	pointer
=	O
target	pointer
;	O
else	O
cuttail	pointer
=	O
target	pointer
->	O
ilk	pointer
;	O
}	O
else	O
{	O
if	O
(	O
cmp	int
)	O
{	O
cuthead	pointer
=	O
target	pointer
;	O
if	O
(	O
!	O
(	O
temp	pointer
=	O
target	pointer
->	O
ilk	pointer
)	O
)	O
return	O
false	int
;	O
}	O
else	O
temp	pointer
=	O
SEARCH	O
(	O
target	pointer
->	O
num	pointer
,	O
length	int
)	O
;	O
GENREV	O
(	O
BRANCHNO	O
(	O
temp	pointer
->	O
num	pointer
)	O
)	O
;	O
}	O
if	O
(	O
branchpoint	function
(	O
temp	pointer
,	O
cuttail	pointer
)	O
)	O
{	O
cuttail	pointer
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
delstrt	pointer
=	O
temp	pointer
;	O
return	O
true	int
;	O
}	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct
,	O
delrev	struct
.	O
end	pointer
)	O
)	O
return	O
false	int
;	O
if	O
(	O
length	int
!=	O
countnumflds	function
(	O
numrev	struct
.	O
string	pointer
)	O
||	O
(	O
length	int
>	O
2	int
&&	O
compartial	function
(	O
numrev	struct
.	O
string	pointer
,	O
target	pointer
->	O
num	pointer
,	O
length	int
-	O
1	int
)	O
)	O
)	O
{	O
RERR	O
(	O
"invalid revision range %s-%s"	pointer
,	O
target	pointer
->	O
num	pointer
,	O
numrev	struct
.	O
string	pointer
)	O
;	O
return	O
false	int
;	O
}	O
target2	pointer
=	O
GENREV	O
(	O
numrev	struct
.	O
string	pointer
)	O
;	O
if	O
(	O
!	O
target2	pointer
)	O
return	O
false	int
;	O
if	O
(	O
length	int
>	O
2	int
)	O
{	O
if	O
(	O
NUM_GT	O
(	O
target	pointer
->	O
num	pointer
,	O
target2	pointer
->	O
num	pointer
)	O
)	O
{	O
cmp	int
=	O
cmpnum	function
(	O
target2	pointer
->	O
num	pointer
,	O
numrev	struct
.	O
string	pointer
)	O
;	O
temp	pointer
=	O
target	pointer
;	O
target	pointer
=	O
target2	pointer
;	O
target2	pointer
=	O
temp	pointer
;	O
}	O
if	O
(	O
cmp	int
)	O
{	O
if	O
(	O
NUM_EQ	O
(	O
target	pointer
->	O
num	pointer
,	O
target2	pointer
->	O
num	pointer
)	O
)	O
{	O
RERR	O
(	O
"Revisions %s-%s don't exist."	pointer
,	O
delrev	struct
.	O
strt	pointer
,	O
delrev	struct
.	O
end	pointer
)	O
;	O
return	O
false	int
;	O
}	O
cuthead	pointer
=	O
target	pointer
;	O
temp	pointer
=	O
target	pointer
->	O
ilk	pointer
;	O
}	O
else	O
temp	pointer
=	O
SEARCH	O
(	O
target	pointer
->	O
num	pointer
,	O
length	int
)	O
;	O
cuttail	pointer
=	O
target2	pointer
->	O
ilk	pointer
;	O
}	O
else	O
{	O
if	O
(	O
NUM_LT	O
(	O
target	pointer
->	O
num	pointer
,	O
target2	pointer
->	O
num	pointer
)	O
)	O
{	O
temp	pointer
=	O
target	pointer
;	O
target	pointer
=	O
target2	pointer
;	O
target2	pointer
=	O
temp	pointer
;	O
}	O
else	O
cmp	int
=	O
cmpnum	function
(	O
target2	pointer
->	O
num	pointer
,	O
numrev	struct
.	O
string	pointer
)	O
;	O
if	O
(	O
cmp	int
)	O
{	O
if	O
(	O
NUM_EQ	O
(	O
target	pointer
->	O
num	pointer
,	O
target2	pointer
->	O
num	pointer
)	O
)	O
{	O
RERR	O
(	O
"Revisions %s-%s don't exist."	pointer
,	O
delrev	struct
.	O
strt	pointer
,	O
delrev	struct
.	O
end	pointer
)	O
;	O
return	O
false	int
;	O
}	O
cuttail	pointer
=	O
target2	pointer
;	O
}	O
else	O
cuttail	pointer
=	O
target2	pointer
->	O
ilk	pointer
;	O
temp	pointer
=	O
SEARCH	O
(	O
target	pointer
->	O
num	pointer
,	O
length	int
)	O
;	O
}	O
if	O
(	O
branchpoint	function
(	O
temp	pointer
,	O
cuttail	pointer
)	O
)	O
{	O
cuttail	pointer
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
delstrt	pointer
=	O
temp	pointer
;	O
return	O
true	int
;	O
}	O
static	O
bool	bool
doassoc	function
(	O
void	O
)	O
{	O
char	O
const	O
*	O
p	pointer
;	O
bool	bool
changed	int
=	O
false	int
;	O
for	O
(	O
struct	O
link	struct
*	O
cur	pointer
=	O
assoclst	struct
.	O
next	pointer
;	O
cur	pointer
;	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
)	O
{	O
struct	O
u_symdef	struct
const	O
*	O
u	struct
=	O
cur	pointer
->	O
entry	pointer
;	O
char	O
const	O
*	O
ssymbol	pointer
=	O
u	struct
->	O
u	struct
.	O
meaningful	pointer
;	O
char	O
const	O
*	O
under	pointer
=	O
u	struct
->	O
u	struct
.	O
underlying	pointer
;	O
if	O
(	O
!	O
under	pointer
)	O
{	O
struct	O
link	struct
box	pointer
,	O
*	O
tp	pointer
;	O
struct	O
symdef	struct
const	O
*	O
d	pointer
=	O
NULL	O
;	O
for	O
(	O
box	pointer
.	O
next	pointer
=	O
GROK	O
(	O
symbols	pointer
)	O
,	O
tp	pointer
=	O
&	O
box	pointer
;	O
tp	pointer
->	O
next	pointer
;	O
tp	pointer
=	O
tp	pointer
->	O
next	pointer
)	O
{	O
d	pointer
=	O
tp	pointer
->	O
next	pointer
->	O
entry	pointer
;	O
if	O
(	O
STR_SAME	O
(	O
ssymbol	pointer
,	O
d	pointer
->	O
meaningful	pointer
)	O
)	O
{	O
tp	pointer
->	O
next	pointer
=	O
tp	pointer
->	O
next	pointer
->	O
next	pointer
;	O
changed	int
=	O
true	int
;	O
break	O
;	O
}	O
}	O
GROK	O
(	O
symbols	pointer
)	O
=	O
box	pointer
.	O
next	pointer
;	O
if	O
(	O
!	O
d	pointer
)	O
RWARN	O
(	O
"can't delete nonexisting symbol %s"	pointer
,	O
ssymbol	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
under	pointer
[	O
0	int
]	O
)	O
p	pointer
=	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct
,	O
under	pointer
)	O
?	O
numrev	struct
.	O
string	pointer
:	O
NULL	O
;	O
else	O
if	O
(	O
!	O
(	O
p	pointer
=	O
tiprev	function
(	O
)	O
)	O
)	O
RERR	O
(	O
"no latest revision to associate with symbol %s"	pointer
,	O
ssymbol	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
changed	int
|=	O
addsymbol	function
(	O
p	pointer
,	O
ssymbol	pointer
,	O
u	struct
->	O
override	bool
)	O
;	O
}	O
}	O
return	O
changed	int
;	O
}	O
static	O
bool	bool
setlock	function
(	O
char	O
const	O
*	O
rev	pointer
,	O
struct	O
wlink	struct
*	O
*	O
tp_deltas	pointer
)	O
{	O
struct	O
delta	struct
*	O
target	pointer
;	O
int	O
r	pointer
;	O
if	O
(	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct
,	O
rev	pointer
)	O
)	O
{	O
target	pointer
=	O
gr_revno	function
(	O
numrev	struct
.	O
string	pointer
,	O
tp_deltas	pointer
)	O
;	O
if	O
(	O
target	pointer
)	O
{	O
if	O
(	O
!	O
(	O
countnumflds	function
(	O
numrev	struct
.	O
string	pointer
)	O
&	O
1	int
)	O
&&	O
!	O
NUM_EQ	O
(	O
target	pointer
->	O
num	pointer
,	O
numrev	struct
.	O
string	pointer
)	O
)	O
RERR	O
(	O
"can't lock nonexisting revision %s"	pointer
,	O
numrev	struct
.	O
string	pointer
)	O
;	O
else	O
{	O
if	O
(	O
(	O
r	pointer
=	O
addlock	function
(	O
target	pointer
,	O
false	int
)	O
)	O
<	O
0	int
&&	O
breaklock	function
(	O
target	pointer
)	O
)	O
r	pointer
=	O
addlock	function
(	O
target	pointer
,	O
true	int
)	O
;	O
if	O
(	O
0	int
<=	O
r	pointer
)	O
{	O
if	O
(	O
r	pointer
)	O
diagnose	function
(	O
"%s locked"	pointer
,	O
target	pointer
->	O
num	pointer
)	O
;	O
return	O
r	pointer
;	O
}	O
}	O
}	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
dolocks	function
(	O
struct	O
wlink	struct
*	O
*	O
tp_deltas	pointer
)	O
{	O
struct	O
link	struct
const	O
*	O
lockpt	pointer
;	O
struct	O
delta	struct
*	O
target	pointer
,	O
*	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
;	O
bool	bool
changed	int
=	O
false	int
;	O
const	O
char	O
*	O
bye	pointer
;	O
if	O
(	O
unlockcaller	bool
)	O
{	O
if	O
(	O
tip	pointer
)	O
{	O
struct	O
link	struct
*	O
locks	pointer
=	O
GROK	O
(	O
locks	pointer
)	O
;	O
if	O
(	O
locks	pointer
)	O
{	O
switch	O
(	O
findlock	function
(	O
true	int
,	O
&	O
target	pointer
)	O
)	O
{	O
case	O
0	int
:	O
{	O
struct	O
rcslock	struct
const	O
*	O
rl	pointer
=	O
locks	pointer
->	O
entry	pointer
;	O
changed	int
|=	O
breaklock	function
(	O
rl	pointer
->	O
delta	struct
)	O
;	O
}	O
break	O
;	O
case	O
1	int
:	O
diagnose	function
(	O
"%s unlocked"	pointer
,	O
target	pointer
->	O
num	pointer
)	O
;	O
changed	int
=	O
true	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
RWARN	O
(	O
"No locks are set."	pointer
)	O
;	O
}	O
}	O
else	O
{	O
RWARN	O
(	O
"can't unlock an empty tree"	pointer
)	O
;	O
}	O
}	O
for	O
(	O
lockpt	pointer
=	O
rmvlocklst	pointer
;	O
lockpt	pointer
;	O
lockpt	pointer
=	O
lockpt	pointer
->	O
next	pointer
)	O
if	O
(	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct
,	O
(	O
bye	pointer
=	O
lockpt	pointer
->	O
entry	pointer
)	O
)	O
)	O
{	O
target	pointer
=	O
gr_revno	function
(	O
numrev	struct
.	O
string	pointer
,	O
tp_deltas	pointer
)	O
;	O
if	O
(	O
target	pointer
)	O
{	O
if	O
(	O
!	O
(	O
countnumflds	function
(	O
numrev	struct
.	O
string	pointer
)	O
&	O
1	int
)	O
&&	O
!	O
NUM_EQ	O
(	O
target	pointer
->	O
num	pointer
,	O
numrev	struct
.	O
string	pointer
)	O
)	O
RERR	O
(	O
"can't unlock nonexisting revision %s"	pointer
,	O
bye	pointer
)	O
;	O
else	O
changed	int
|=	O
breaklock	function
(	O
target	pointer
)	O
;	O
}	O
}	O
for	O
(	O
lockpt	pointer
=	O
newlocklst	pointer
;	O
lockpt	pointer
;	O
lockpt	pointer
=	O
lockpt	pointer
->	O
next	pointer
)	O
changed	int
|=	O
setlock	function
(	O
lockpt	pointer
->	O
entry	pointer
,	O
tp_deltas	pointer
)	O
;	O
if	O
(	O
lockhead	bool
)	O
{	O
char	O
const	O
*	O
defbr	pointer
=	O
GROK	O
(	O
branch	pointer
)	O
;	O
if	O
(	O
defbr	pointer
)	O
changed	int
|=	O
setlock	function
(	O
defbr	pointer
,	O
tp_deltas	pointer
)	O
;	O
else	O
if	O
(	O
tip	pointer
)	O
changed	int
|=	O
setlock	function
(	O
tip	pointer
->	O
num	pointer
,	O
tp_deltas	pointer
)	O
;	O
else	O
RWARN	O
(	O
"can't lock an empty tree"	pointer
)	O
;	O
}	O
return	O
changed	int
;	O
}	O
static	O
bool	bool
domessages	function
(	O
struct	O
wlink	struct
*	O
*	O
tp_deltas	pointer
)	O
{	O
struct	O
delta	struct
*	O
target	pointer
;	O
bool	bool
changed	int
=	O
false	int
;	O
for	O
(	O
struct	O
link	struct
*	O
ls	pointer
=	O
messagelst	struct
.	O
next	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
struct	O
u_log	struct
const	O
*	O
um	pointer
=	O
ls	pointer
->	O
entry	pointer
;	O
if	O
(	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct
,	O
um	pointer
->	O
revno	pointer
)	O
&&	O
(	O
target	pointer
=	O
gr_revno	function
(	O
numrev	struct
.	O
string	pointer
,	O
tp_deltas	pointer
)	O
)	O
)	O
{	O
target	pointer
->	O
pretty_log	struct
=	O
um	pointer
->	O
message	struct
;	O
changed	int
=	O
true	int
;	O
}	O
}	O
return	O
changed	int
;	O
}	O
static	O
bool	bool
rcs_setstate	function
(	O
char	O
const	O
*	O
rev	pointer
,	O
char	O
const	O
*	O
status	int
,	O
struct	O
wlink	struct
*	O
*	O
tp_deltas	pointer
)	O
{	O
struct	O
delta	struct
*	O
target	pointer
;	O
if	O
(	O
fully_numeric_no_k	O
(	O
&	O
numrev	struct
,	O
rev	pointer
)	O
)	O
{	O
target	pointer
=	O
gr_revno	function
(	O
numrev	struct
.	O
string	pointer
,	O
tp_deltas	pointer
)	O
;	O
if	O
(	O
target	pointer
)	O
{	O
if	O
(	O
!	O
(	O
countnumflds	function
(	O
numrev	struct
.	O
string	pointer
)	O
&	O
1	int
)	O
&&	O
!	O
NUM_EQ	O
(	O
target	pointer
->	O
num	pointer
,	O
numrev	struct
.	O
string	pointer
)	O
)	O
RERR	O
(	O
"can't set state of nonexisting revision %s"	pointer
,	O
numrev	struct
.	O
string	pointer
)	O
;	O
else	O
if	O
(	O
STR_DIFF	O
(	O
target	pointer
->	O
state	pointer
,	O
status	int
)	O
)	O
{	O
target	pointer
->	O
state	pointer
=	O
status	int
;	O
return	O
true	int
;	O
}	O
}	O
}	O
return	O
false	int
;	O
}	O
static	O
bool	bool
buildeltatext	function
(	O
struct	O
editstuff	O
*	O
es	pointer
,	O
struct	O
wlink	struct
*	O
*	O
ls	pointer
,	O
struct	O
wlink	struct
const	O
*	O
deltas	pointer
)	O
{	O
FILE	struct
*	O
fcut	pointer
;	O
FILE	struct
*	O
frew	pointer
=	O
FLOW	O
(	O
rewr	pointer
)	O
;	O
fcut	pointer
=	O
NULL	O
;	O
cuttail	pointer
->	O
selector	bool
=	O
false	int
;	O
scanlogtext	function
(	O
es	pointer
,	O
ls	pointer
,	O
deltas	pointer
->	O
entry	pointer
,	O
false	int
)	O
;	O
if	O
(	O
cuthead	pointer
)	O
{	O
if	O
(	O
!	O
(	O
fcut	pointer
=	O
tmpfile	function
(	O
)	O
)	O
)	O
fatal_sys	function
(	O
"tmpfile"	pointer
)	O
;	O
while	O
(	O
deltas	pointer
->	O
entry	pointer
!=	O
cuthead	pointer
)	O
{	O
*	O
ls	pointer
=	O
(	O
*	O
ls	pointer
)	O
->	O
next	pointer
;	O
deltas	pointer
=	O
deltas	pointer
->	O
next	pointer
;	O
scanlogtext	function
(	O
es	pointer
,	O
ls	pointer
,	O
deltas	pointer
->	O
entry	pointer
,	O
true	int
)	O
;	O
}	O
snapshotedit	function
(	O
es	pointer
,	O
fcut	pointer
)	O
;	O
rewind	function
(	O
fcut	pointer
)	O
;	O
aflush	function
(	O
fcut	pointer
)	O
;	O
}	O
while	O
(	O
deltas	pointer
->	O
entry	pointer
!=	O
cuttail	pointer
)	O
{	O
*	O
ls	pointer
=	O
(	O
*	O
ls	pointer
)	O
->	O
next	pointer
;	O
deltas	pointer
=	O
deltas	pointer
->	O
next	pointer
;	O
scanlogtext	function
(	O
es	pointer
,	O
ls	pointer
,	O
deltas	pointer
->	O
entry	pointer
,	O
true	int
)	O
;	O
}	O
finishedit	function
(	O
es	pointer
,	O
NULL	O
,	O
NULL	O
,	O
true	int
)	O
;	O
Ozclose	function
(	O
&	O
FLOW	O
(	O
res	pointer
)	O
)	O
;	O
if	O
(	O
fcut	pointer
)	O
{	O
char	O
const	O
*	O
diffname	pointer
=	O
maketemp	function
(	O
0	int
)	O
;	O
char	O
const	O
*	O
diffv	array
[	O
6	int
+	O
!	O
!	O
OPEN_O_BINARY	int
]	O
;	O
char	O
const	O
*	O
*	O
diffp	pointer
=	O
diffv	array
;	O
*	O
++	O
diffp	pointer
=	O
prog_diff	array
;	O
*	O
++	O
diffp	pointer
=	O
diff_flags	array
;	O
*	O
++	O
diffp	pointer
=	O
"-"	pointer
;	O
*	O
++	O
diffp	pointer
=	O
FLOW	O
(	O
result	pointer
)	O
;	O
*	O
++	O
diffp	pointer
=	O
'\0'	O
;	O
if	O
(	O
DIFF_TROUBLE	int
==	O
runv	function
(	O
fileno	function
(	O
fcut	pointer
)	O
,	O
diffname	pointer
,	O
diffv	array
)	O
)	O
RFATAL	O
(	O
"diff failed"	pointer
)	O
;	O
Ozclose	function
(	O
&	O
fcut	pointer
)	O
;	O
return	O
putdtext	function
(	O
cuttail	pointer
,	O
diffname	pointer
,	O
frew	pointer
,	O
true	int
)	O
;	O
}	O
else	O
return	O
putdtext	function
(	O
cuttail	pointer
,	O
FLOW	O
(	O
result	pointer
)	O
,	O
frew	pointer
,	O
false	int
)	O
;	O
}	O
static	O
void	O
buildtree	function
(	O
void	O
)	O
{	O
struct	O
delta	struct
*	O
Delta	pointer
;	O
if	O
(	O
cuthead	pointer
)	O
if	O
(	O
cuthead	pointer
->	O
ilk	pointer
==	O
delstrt	pointer
)	O
cuthead	pointer
->	O
ilk	pointer
=	O
cuttail	pointer
;	O
else	O
{	O
struct	O
wlink	struct
*	O
pt	pointer
=	O
cuthead	pointer
->	O
branches	pointer
,	O
*	O
pre	pointer
=	O
pt	pointer
;	O
while	O
(	O
pt	pointer
&&	O
pt	pointer
->	O
entry	pointer
!=	O
delstrt	pointer
)	O
{	O
pre	pointer
=	O
pt	pointer
;	O
pt	pointer
=	O
pt	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
cuttail	pointer
)	O
pt	pointer
->	O
entry	pointer
=	O
cuttail	pointer
;	O
else	O
if	O
(	O
pt	pointer
==	O
pre	pointer
)	O
cuthead	pointer
->	O
branches	pointer
=	O
pt	pointer
->	O
next	pointer
;	O
else	O
pre	pointer
->	O
next	pointer
=	O
pt	pointer
->	O
next	pointer
;	O
}	O
else	O
{	O
if	O
(	O
!	O
cuttail	pointer
&&	O
!	O
BE	O
(	O
quiet	bool
)	O
)	O
{	O
if	O
(	O
!	O
yesorno	function
(	O
false	int
,	O
"Do you really want to delete all revisions? [ny](n): "	pointer
)	O
)	O
{	O
RERR	O
(	O
"No revision deleted"	pointer
)	O
;	O
Delta	pointer
=	O
delstrt	pointer
;	O
while	O
(	O
Delta	pointer
)	O
{	O
Delta	pointer
->	O
selector	bool
=	O
true	int
;	O
Delta	pointer
=	O
Delta	pointer
->	O
ilk	pointer
;	O
}	O
return	O
;	O
}	O
}	O
REPO	O
(	O
tip	pointer
)	O
=	O
cuttail	pointer
;	O
}	O
return	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
a	pointer
,	O
*	O
*	O
newargv	pointer
,	O
*	O
textfile	pointer
;	O
char	O
const	O
*	O
branchsym	pointer
,	O
*	O
commsyml	pointer
;	O
bool	bool
branchflag	bool
,	O
initflag	bool
,	O
textflag	bool
;	O
int	O
changed	int
,	O
expmode	int
;	O
bool	bool
strictlock	bool
,	O
strict_selected	bool
,	O
Ttimeflag	bool
;	O
bool	bool
keepRCStime	bool
;	O
size_t	long
commsymlen	long
;	O
struct	O
cbuf	struct
branchnum	struct
;	O
struct	O
link	struct
boxlock	struct
,	O
*	O
tplock	pointer
;	O
struct	O
link	struct
boxrm	struct
,	O
*	O
tprm	pointer
;	O
struct	O
link	struct
*	O
tp_assoc	pointer
,	O
*	O
tp_chacc	pointer
,	O
*	O
tp_log	pointer
,	O
*	O
tp_state	pointer
;	O
struct	O
wlink	struct
*	O
deltas	pointer
;	O
const	O
struct	O
program	struct
program	struct
=	O
{	O
.	O
invoke	pointer
=	O
argv	pointer
[	O
0	int
]	O
,	O
.	O
name	pointer
=	O
"rcs"	pointer
,	O
.	O
help	pointer
=	O
help	pointer
,	O
.	O
exiterr	pointer
=	O
exiterr	pointer
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	function
(	O
&	O
program	struct
)	O
;	O
nosetid	function
(	O
)	O
;	O
tp_assoc	pointer
=	O
&	O
assoclst	struct
;	O
tp_chacc	pointer
=	O
&	O
chaccess	struct
;	O
tp_log	pointer
=	O
&	O
messagelst	struct
;	O
tp_state	pointer
=	O
&	O
statelst	struct
;	O
branchsym	pointer
=	O
commsyml	pointer
=	O
textfile	pointer
=	O
NULL	O
;	O
branchflag	bool
=	O
strictlock	bool
=	O
false	int
;	O
commsymlen	long
=	O
0	int
;	O
boxlock	struct
.	O
next	pointer
=	O
newlocklst	pointer
;	O
tplock	pointer
=	O
&	O
boxlock	struct
;	O
boxrm	struct
.	O
next	pointer
=	O
rmvlocklst	pointer
;	O
tprm	pointer
=	O
&	O
boxrm	struct
;	O
expmode	int
=	O
-	O
1	int
;	O
BE	O
(	O
pe	pointer
)	O
=	O
X_DEFAULT	pointer
;	O
initflag	bool
=	O
textflag	bool
=	O
false	int
;	O
strict_selected	bool
=	O
false	int
;	O
Ttimeflag	bool
=	O
false	int
;	O
if	O
(	O
1	int
<	O
argc	int
&&	O
argv	pointer
[	O
1	int
]	O
[	O
0	int
]	O
!=	O
'-'	O
)	O
PWARN	O
(	O
"No options were given; this usage is obsolescent."	pointer
)	O
;	O
argc	int
=	O
getRCSINIT	function
(	O
argc	int
,	O
argv	pointer
,	O
&	O
newargv	pointer
)	O
;	O
argv	pointer
=	O
newargv	pointer
;	O
while	O
(	O
a	pointer
=	O
*	O
++	O
argv	pointer
,	O
0	int
<	O
--	O
argc	int
&&	O
*	O
a	pointer
++	O
==	O
'-'	O
)	O
{	O
switch	O
(	O
*	O
a	pointer
++	O
)	O
{	O
case	O
'i'	O
:	O
initflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'b'	O
:	O
if	O
(	O
branchflag	bool
)	O
redefined	function
(	O
'b'	O
)	O
;	O
branchflag	bool
=	O
true	int
;	O
branchsym	pointer
=	O
a	pointer
;	O
break	O
;	O
case	O
'c'	O
:	O
if	O
(	O
commsyml	pointer
)	O
redefined	function
(	O
'c'	O
)	O
;	O
commsyml	pointer
=	O
a	pointer
;	O
commsymlen	long
=	O
strlen	function
(	O
a	pointer
)	O
;	O
break	O
;	O
case	O
'a'	O
:	O
getaccessor	function
(	O
&	O
tp_chacc	pointer
,	O
*	O
argv	pointer
+	O
1	int
,	O
append	int
)	O
;	O
break	O
;	O
case	O
'A'	O
:	O
if	O
(	O
!	O
*	O
a	pointer
)	O
{	O
PERR	O
(	O
"missing filename after -A"	pointer
)	O
;	O
break	O
;	O
}	O
*	O
argv	pointer
=	O
a	pointer
;	O
if	O
(	O
0	int
<	O
pairnames	function
(	O
1	int
,	O
argv	pointer
,	O
rcsreadopen	function
,	O
true	int
,	O
false	int
)	O
)	O
{	O
for	O
(	O
struct	O
link	struct
*	O
ls	pointer
=	O
GROK	O
(	O
access	pointer
)	O
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
getchaccess	function
(	O
&	O
tp_chacc	pointer
,	O
str_save	function
(	O
ls	pointer
->	O
entry	pointer
)	O
,	O
append	int
)	O
;	O
fro_zclose	function
(	O
&	O
FLOW	O
(	O
from	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
'e'	O
:	O
getaccessor	function
(	O
&	O
tp_chacc	pointer
,	O
*	O
argv	pointer
+	O
1	int
,	O
erase	int
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
if	O
(	O
!	O
*	O
a	pointer
)	O
{	O
lockhead	bool
=	O
true	int
;	O
break	O
;	O
}	O
tplock	pointer
=	O
extend	function
(	O
tplock	pointer
,	O
a	pointer
,	O
PLEXUS	O
)	O
;	O
break	O
;	O
case	O
'u'	O
:	O
if	O
(	O
!	O
*	O
a	pointer
)	O
{	O
unlockcaller	bool
=	O
true	int
;	O
break	O
;	O
}	O
tprm	pointer
=	O
extend	function
(	O
tprm	pointer
,	O
a	pointer
,	O
PLEXUS	O
)	O
;	O
newlocklst	pointer
=	O
boxlock	struct
.	O
next	pointer
;	O
tplock	pointer
=	O
rmnewlocklst	function
(	O
a	pointer
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
if	O
(	O
strict_selected	bool
)	O
{	O
if	O
(	O
!	O
strictlock	bool
)	O
PWARN	O
(	O
"-U overridden by -L"	pointer
)	O
;	O
}	O
strictlock	bool
=	O
true	int
;	O
strict_selected	bool
=	O
true	int
;	O
break	O
;	O
case	O
'U'	O
:	O
if	O
(	O
strict_selected	bool
)	O
{	O
if	O
(	O
strictlock	bool
)	O
PWARN	O
(	O
"-L overridden by -U"	pointer
)	O
;	O
}	O
strict_selected	bool
=	O
true	int
;	O
break	O
;	O
case	O
'n'	O
:	O
case	O
'N'	O
:	O
if	O
(	O
!	O
*	O
a	pointer
)	O
{	O
PERR	O
(	O
"missing symbolic name after -%c"	pointer
,	O
(	O
*	O
argv	pointer
)	O
[	O
1	int
]	O
)	O
;	O
break	O
;	O
}	O
getassoclst	function
(	O
&	O
tp_assoc	pointer
,	O
(	O
*	O
argv	pointer
)	O
+	O
1	int
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
getmessage	function
(	O
&	O
tp_log	pointer
,	O
a	pointer
)	O
;	O
break	O
;	O
case	O
'M'	O
:	O
suppress_mail	bool
=	O
true	int
;	O
break	O
;	O
case	O
'o'	O
:	O
if	O
(	O
delrev	struct
.	O
strt	pointer
)	O
redefined	function
(	O
'o'	O
)	O
;	O
if	O
(	O
!	O
*	O
a	pointer
)	O
{	O
PERR	O
(	O
"missing revision range after -o"	pointer
)	O
;	O
break	O
;	O
}	O
parse_revpairs	function
(	O
'o'	O
,	O
(	O
*	O
argv	pointer
)	O
+	O
2	int
,	O
putdelrev	function
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
if	O
(	O
!	O
*	O
a	pointer
)	O
{	O
PERR	O
(	O
"state missing after -s"	pointer
)	O
;	O
break	O
;	O
}	O
getstates	function
(	O
&	O
tp_state	pointer
,	O
(	O
*	O
argv	pointer
)	O
+	O
1	int
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
textflag	bool
=	O
true	int
;	O
if	O
(	O
*	O
a	pointer
)	O
{	O
if	O
(	O
textfile	pointer
)	O
redefined	function
(	O
't'	O
)	O
;	O
textfile	pointer
=	O
a	pointer
;	O
}	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
*	O
a	pointer
)	O
goto	O
unknown	O
;	O
Ttimeflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'I'	O
:	O
BE	O
(	O
interactive	bool
)	O
=	O
true	int
;	O
break	O
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
break	O
;	O
case	O
'x'	O
:	O
BE	O
(	O
pe	pointer
)	O
=	O
a	pointer
;	O
break	O
;	O
case	O
'V'	O
:	O
setRCSversion	function
(	O
*	O
argv	pointer
)	O
;	O
break	O
;	O
case	O
'z'	O
:	O
zone_set	function
(	O
a	pointer
)	O
;	O
break	O
;	O
case	O
'k'	O
:	O
if	O
(	O
0	int
<=	O
expmode	int
)	O
redefined	function
(	O
'k'	O
)	O
;	O
if	O
(	O
0	int
<=	O
(	O
expmode	int
=	O
str2expmode	function
(	O
a	pointer
)	O
)	O
)	O
break	O
;	O
default	O
:	O
unknown	O
:	O
bad_option	function
(	O
*	O
argv	pointer
)	O
;	O
}	O
;	O
}	O
newlocklst	pointer
=	O
boxlock	struct
.	O
next	pointer
;	O
rmvlocklst	pointer
=	O
boxrm	struct
.	O
next	pointer
;	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
cleanup	function
(	O
)	O
;	O
else	O
if	O
(	O
argc	int
<	O
1	int
)	O
PFATAL	O
(	O
"no input file"	pointer
)	O
;	O
else	O
for	O
(	O
;	O
0	int
<	O
argc	int
;	O
cleanup	function
(	O
)	O
,	O
++	O
argv	pointer
,	O
--	O
argc	int
)	O
{	O
struct	O
delta	struct
*	O
tip	pointer
;	O
char	O
const	O
*	O
defbr	pointer
;	O
struct	O
stat	struct
*	O
repo_stat	pointer
;	O
struct	O
cbuf	struct
newdesc	struct
=	O
{	O
.	O
string	pointer
=	O
NULL	O
,	O
.	O
size	long
=	O
0	int
}	O
;	O
ffree	function
(	O
)	O
;	O
if	O
(	O
initflag	bool
)	O
{	O
switch	O
(	O
pairnames	function
(	O
argc	int
,	O
argv	pointer
,	O
rcswriteopen	function
,	O
false	int
,	O
false	int
)	O
)	O
{	O
case	O
-	O
1	int
:	O
break	O
;	O
case	O
0	int
:	O
continue	O
;	O
case	O
1	int
:	O
RERR	O
(	O
"already exists"	pointer
)	O
;	O
continue	O
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
pairnames	function
(	O
argc	int
,	O
argv	pointer
,	O
rcswriteopen	function
,	O
true	int
,	O
false	int
)	O
)	O
{	O
case	O
-	O
1	int
:	O
continue	O
;	O
case	O
0	int
:	O
continue	O
;	O
case	O
1	int
:	O
break	O
;	O
}	O
}	O
repo_stat	pointer
=	O
&	O
REPO	O
(	O
stat	struct
)	O
;	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
;	O
defbr	pointer
=	O
GROK	O
(	O
branch	pointer
)	O
;	O
diagnose	function
(	O
"RCS file: %s"	pointer
,	O
REPO	O
(	O
filename	pointer
)	O
)	O
;	O
changed	int
=	O
initflag	bool
|	O
textflag	bool
;	O
keepRCStime	bool
=	O
Ttimeflag	bool
;	O
if	O
(	O
!	O
initflag	bool
)	O
{	O
if	O
(	O
!	O
checkaccesslist	function
(	O
)	O
)	O
continue	O
;	O
}	O
if	O
(	O
strict_selected	bool
)	O
{	O
changed	int
|=	O
BE	O
(	O
strictly_locking	bool
)	O
^	O
strictlock	bool
;	O
BE	O
(	O
strictly_locking	bool
)	O
=	O
strictlock	bool
;	O
}	O
if	O
(	O
commsyml	pointer
&&	O
(	O
commsymlen	long
!=	O
REPO	O
(	O
log_lead	struct
)	O
.	O
size	long
||	O
MEM_DIFF	O
(	O
commsymlen	long
,	O
commsyml	pointer
,	O
REPO	O
(	O
log_lead	struct
)	O
.	O
string	pointer
)	O
)	O
)	O
{	O
REPO	O
(	O
log_lead	struct
)	O
.	O
string	pointer
=	O
commsyml	pointer
;	O
REPO	O
(	O
log_lead	struct
)	O
.	O
size	long
=	O
commsymlen	long
;	O
changed	int
=	O
true	int
;	O
}	O
if	O
(	O
0	int
<=	O
expmode	int
&&	O
BE	O
(	O
kws	int
)	O
!=	O
expmode	int
)	O
{	O
BE	O
(	O
kws	int
)	O
=	O
expmode	int
;	O
changed	int
=	O
true	int
;	O
}	O
if	O
(	O
branchflag	bool
&&	O
fully_numeric_no_k	O
(	O
&	O
branchnum	struct
,	O
branchsym	pointer
)	O
)	O
{	O
if	O
(	O
countnumflds	function
(	O
branchnum	struct
.	O
string	pointer
)	O
)	O
{	O
if	O
(	O
!	O
NUM_EQ	O
(	O
defbr	pointer
,	O
branchnum	struct
.	O
string	pointer
)	O
)	O
{	O
defbr	pointer
=	O
GROK	O
(	O
branch	pointer
)	O
=	O
branchnum	struct
.	O
string	pointer
;	O
changed	int
=	O
true	int
;	O
}	O
}	O
else	O
if	O
(	O
defbr	pointer
)	O
{	O
defbr	pointer
=	O
GROK	O
(	O
branch	pointer
)	O
=	O
NULL	O
;	O
changed	int
=	O
true	int
;	O
}	O
}	O
changed	int
|=	O
doaccess	function
(	O
)	O
;	O
changed	int
|=	O
doassoc	function
(	O
)	O
;	O
changed	int
|=	O
dolocks	function
(	O
&	O
deltas	pointer
)	O
;	O
changed	int
|=	O
domessages	function
(	O
&	O
deltas	pointer
)	O
;	O
if	O
(	O
chgheadstate	bool
)	O
{	O
if	O
(	O
!	O
defbr	pointer
)	O
{	O
if	O
(	O
!	O
tip	pointer
)	O
RWARN	O
(	O
"can't change states in an empty tree"	pointer
)	O
;	O
else	O
if	O
(	O
STR_DIFF	O
(	O
tip	pointer
->	O
state	pointer
,	O
headstate	pointer
)	O
)	O
{	O
tip	pointer
->	O
state	pointer
=	O
headstate	pointer
;	O
changed	int
=	O
true	int
;	O
}	O
}	O
else	O
changed	int
|=	O
rcs_setstate	function
(	O
defbr	pointer
,	O
headstate	pointer
,	O
&	O
deltas	pointer
)	O
;	O
}	O
for	O
(	O
struct	O
link	struct
*	O
ls	pointer
=	O
statelst	struct
.	O
next	pointer
;	O
ls	pointer
;	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
)	O
{	O
struct	O
u_state	struct
const	O
*	O
us	pointer
=	O
ls	pointer
->	O
entry	pointer
;	O
changed	int
|=	O
rcs_setstate	function
(	O
us	pointer
->	O
revno	pointer
,	O
us	pointer
->	O
status	int
,	O
&	O
deltas	pointer
)	O
;	O
}	O
cuthead	pointer
=	O
cuttail	pointer
=	O
NULL	O
;	O
if	O
(	O
delrev	struct
.	O
strt	pointer
&&	O
removerevs	function
(	O
)	O
)	O
{	O
if	O
(	O
cuttail	pointer
)	O
gr_revno	function
(	O
cuttail	pointer
->	O
num	pointer
,	O
&	O
deltas	pointer
)	O
;	O
buildtree	function
(	O
)	O
;	O
tip	pointer
=	O
REPO	O
(	O
tip	pointer
)	O
;	O
changed	int
=	O
true	int
;	O
keepRCStime	bool
=	O
false	int
;	O
}	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
continue	O
;	O
putadmin	function
(	O
)	O
;	O
if	O
(	O
tip	pointer
)	O
puttree	function
(	O
tip	pointer
,	O
FLOW	O
(	O
rewr	pointer
)	O
)	O
;	O
putdesc	function
(	O
&	O
newdesc	struct
,	O
textflag	bool
,	O
textfile	pointer
)	O
;	O
if	O
(	O
1	int
)	O
{	O
if	O
(	O
delrev	struct
.	O
strt	pointer
||	O
messagelst	struct
.	O
next	pointer
)	O
{	O
struct	O
fro	struct
*	O
from	pointer
=	O
FLOW	O
(	O
from	pointer
)	O
;	O
struct	O
editstuff	O
*	O
es	pointer
=	O
make_editstuff	function
(	O
)	O
;	O
struct	O
wlink	struct
*	O
ls	pointer
=	O
GROK	O
(	O
deltas	pointer
)	O
;	O
if	O
(	O
!	O
cuttail	pointer
||	O
buildeltatext	function
(	O
es	pointer
,	O
&	O
ls	pointer
,	O
deltas	pointer
)	O
)	O
{	O
fro_trundling	function
(	O
true	int
,	O
from	pointer
)	O
;	O
if	O
(	O
cuttail	pointer
)	O
ls	pointer
=	O
ls	pointer
->	O
next	pointer
;	O
scanlogtext	function
(	O
es	pointer
,	O
&	O
ls	pointer
,	O
NULL	O
,	O
false	int
)	O
;	O
changed	int
=	O
true	int
;	O
}	O
unmake_editstuff	function
(	O
es	pointer
)	O
;	O
IGNORE_REST	O
(	O
from	pointer
)	O
;	O
}	O
else	O
if	O
(	O
GROK	O
(	O
desc	pointer
)	O
)	O
SAME_AFTER	O
(	O
FLOW	O
(	O
from	pointer
)	O
,	O
GROK	O
(	O
desc	pointer
)	O
)	O
;	O
}	O
if	O
(	O
initflag	bool
)	O
{	O
if	O
(	O
PROB	O
(	O
stat	struct
(	O
MANI	O
(	O
filename	pointer
)	O
,	O
repo_stat	pointer
)	O
)	O
)	O
{	O
changed	int
=	O
-	O
1	int
;	O
}	O
repo_stat	pointer
->	O
st_nlink	long
=	O
0	int
;	O
keepRCStime	bool
=	O
false	int
;	O
}	O
if	O
(	O
PROB	O
(	O
donerewrite	function
(	O
changed	int
,	O
keepRCStime	bool
?	O
repo_stat	pointer
->	O
st_mtime	O
:	O
(	O
time_t	long
)	O
-	O
1	int
)	O
)	O
)	O
break	O
;	O
diagnose	function
(	O
"done"	pointer
)	O
;	O
}	O
tempunlink	function
(	O
)	O
;	O
gnurcs_goodbye	function
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
