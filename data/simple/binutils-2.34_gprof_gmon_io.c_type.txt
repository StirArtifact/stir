enum	O
gmon_ptr_size	enum
{	O
ptr_32bit	int
,	O
ptr_64bit	int
}	O
;	O
enum	O
gmon_ptr_signedness	enum
{	O
ptr_signed	int
,	O
ptr_unsigned	int
}	O
;	O
static	O
enum	O
gmon_ptr_size	enum
gmon_get_ptr_size	function
(	O
void	O
)	O
;	O
static	O
enum	O
gmon_ptr_signedness	enum
gmon_get_ptr_signedness	function
(	O
void	O
)	O
;	O
static	O
int	O
gmon_io_read_64	function
(	O
FILE	struct
*	O
,	O
BFD_HOST_U_64_BIT	O
*	O
)	O
;	O
static	O
int	O
gmon_io_write_64	function
(	O
FILE	struct
*	O
,	O
BFD_HOST_U_64_BIT	O
)	O
;	O
static	O
int	O
gmon_read_raw_arc	function
(	O
FILE	struct
*	O
,	O
bfd_vma	long
*	O
,	O
bfd_vma	long
*	O
,	O
unsigned	O
long	O
*	O
)	O
;	O
static	O
int	O
gmon_write_raw_arc	function
(	O
FILE	struct
*	O
,	O
bfd_vma	long
,	O
bfd_vma	long
,	O
unsigned	O
long	O
)	O
;	O
int	O
gmon_input	int
=	O
0	int
;	O
int	O
gmon_file_version	int
=	O
0	int
;	O
static	O
enum	O
gmon_ptr_size	enum
gmon_get_ptr_size	function
(	O
void	O
)	O
{	O
int	O
size	long
;	O
size	long
=	O
bfd_get_arch_size	function
(	O
core_bfd	pointer
)	O
;	O
if	O
(	O
size	long
==	O
-	O
1	int
)	O
size	long
=	O
bfd_arch_bits_per_address	function
(	O
core_bfd	pointer
)	O
;	O
switch	O
(	O
size	long
)	O
{	O
case	O
32	int
:	O
return	O
ptr_32bit	int
;	O
case	O
64	int
:	O
return	O
ptr_64bit	int
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: address size has unexpected value of %u\n"	pointer
)	O
,	O
whoami	pointer
,	O
size	long
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
}	O
static	O
enum	O
gmon_ptr_signedness	enum
gmon_get_ptr_signedness	function
(	O
void	O
)	O
{	O
int	O
sext	int
;	O
sext	int
=	O
bfd_get_sign_extend_vma	function
(	O
core_bfd	pointer
)	O
;	O
if	O
(	O
sext	int
==	O
-	O
1	int
)	O
return	O
ptr_unsigned	int
;	O
return	O
(	O
sext	int
?	O
ptr_signed	int
:	O
ptr_unsigned	int
)	O
;	O
}	O
int	O
gmon_io_read_32	function
(	O
FILE	struct
*	O
ifp	pointer
,	O
unsigned	O
int	O
*	O
valp	pointer
)	O
{	O
char	O
buf	pointer
[	O
4	int
]	O
;	O
if	O
(	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
4	int
,	O
ifp	pointer
)	O
!=	O
4	int
)	O
return	O
1	int
;	O
*	O
valp	pointer
=	O
bfd_get_32	O
(	O
core_bfd	pointer
,	O
buf	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
gmon_io_read_64	function
(	O
FILE	struct
*	O
ifp	pointer
,	O
BFD_HOST_U_64_BIT	O
*	O
valp	pointer
)	O
{	O
char	O
buf	pointer
[	O
8	int
]	O
;	O
if	O
(	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
8	int
,	O
ifp	pointer
)	O
!=	O
8	int
)	O
return	O
1	int
;	O
*	O
valp	pointer
=	O
bfd_get_64	O
(	O
core_bfd	pointer
,	O
buf	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
gmon_io_read_vma	function
(	O
FILE	struct
*	O
ifp	pointer
,	O
bfd_vma	long
*	O
valp	pointer
)	O
{	O
unsigned	O
int	O
val32	int
;	O
BFD_HOST_U_64_BIT	O
val64	long
;	O
switch	O
(	O
gmon_get_ptr_size	function
(	O
)	O
)	O
{	O
case	O
ptr_32bit	int
:	O
if	O
(	O
gmon_io_read_32	function
(	O
ifp	pointer
,	O
&	O
val32	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
gmon_get_ptr_signedness	function
(	O
)	O
==	O
ptr_signed	int
)	O
*	O
valp	pointer
=	O
(	O
int	O
)	O
val32	int
;	O
else	O
*	O
valp	pointer
=	O
val32	int
;	O
break	O
;	O
case	O
ptr_64bit	int
:	O
if	O
(	O
gmon_io_read_64	function
(	O
ifp	pointer
,	O
&	O
val64	long
)	O
)	O
return	O
1	int
;	O
if	O
(	O
gmon_get_ptr_signedness	function
(	O
)	O
==	O
ptr_signed	int
)	O
*	O
valp	pointer
=	O
(	O
BFD_HOST_64_BIT	long
)	O
val64	long
;	O
else	O
*	O
valp	pointer
=	O
val64	long
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
gmon_io_read	function
(	O
FILE	struct
*	O
ifp	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
n	long
)	O
{	O
if	O
(	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
n	long
,	O
ifp	pointer
)	O
!=	O
n	long
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
gmon_io_write_32	function
(	O
FILE	struct
*	O
ofp	pointer
,	O
unsigned	O
int	O
val	array
)	O
{	O
char	O
buf	pointer
[	O
4	int
]	O
;	O
bfd_put_32	O
(	O
core_bfd	pointer
,	O
(	O
bfd_vma	long
)	O
val	array
,	O
buf	pointer
)	O
;	O
if	O
(	O
fwrite	function
(	O
buf	pointer
,	O
1	int
,	O
4	int
,	O
ofp	pointer
)	O
!=	O
4	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
gmon_io_write_64	function
(	O
FILE	struct
*	O
ofp	pointer
,	O
BFD_HOST_U_64_BIT	O
val	array
)	O
{	O
char	O
buf	pointer
[	O
8	int
]	O
;	O
bfd_put_64	O
(	O
core_bfd	pointer
,	O
(	O
bfd_vma	long
)	O
val	array
,	O
buf	pointer
)	O
;	O
if	O
(	O
fwrite	function
(	O
buf	pointer
,	O
1	int
,	O
8	int
,	O
ofp	pointer
)	O
!=	O
8	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
gmon_io_write_vma	function
(	O
FILE	struct
*	O
ofp	pointer
,	O
bfd_vma	long
val	array
)	O
{	O
switch	O
(	O
gmon_get_ptr_size	function
(	O
)	O
)	O
{	O
case	O
ptr_32bit	int
:	O
if	O
(	O
gmon_io_write_32	function
(	O
ofp	pointer
,	O
(	O
unsigned	O
int	O
)	O
val	array
)	O
)	O
return	O
1	int
;	O
break	O
;	O
case	O
ptr_64bit	int
:	O
if	O
(	O
gmon_io_write_64	function
(	O
ofp	pointer
,	O
(	O
BFD_HOST_U_64_BIT	O
)	O
val	array
)	O
)	O
return	O
1	int
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
gmon_io_write_8	function
(	O
FILE	struct
*	O
ofp	pointer
,	O
unsigned	O
int	O
val	array
)	O
{	O
char	O
buf	pointer
[	O
1	int
]	O
;	O
bfd_put_8	O
(	O
core_bfd	pointer
,	O
val	array
,	O
buf	pointer
)	O
;	O
if	O
(	O
fwrite	function
(	O
buf	pointer
,	O
1	int
,	O
1	int
,	O
ofp	pointer
)	O
!=	O
1	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
gmon_io_write	function
(	O
FILE	struct
*	O
ofp	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
n	long
)	O
{	O
if	O
(	O
fwrite	function
(	O
buf	pointer
,	O
1	int
,	O
n	long
,	O
ofp	pointer
)	O
!=	O
n	long
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
gmon_read_raw_arc	function
(	O
FILE	struct
*	O
ifp	pointer
,	O
bfd_vma	long
*	O
fpc	pointer
,	O
bfd_vma	long
*	O
spc	pointer
,	O
unsigned	O
long	O
*	O
cnt	pointer
)	O
{	O
BFD_HOST_U_64_BIT	O
cnt64	long
;	O
unsigned	O
int	O
cnt32	int
;	O
if	O
(	O
gmon_io_read_vma	function
(	O
ifp	pointer
,	O
fpc	pointer
)	O
||	O
gmon_io_read_vma	function
(	O
ifp	pointer
,	O
spc	pointer
)	O
)	O
return	O
1	int
;	O
switch	O
(	O
gmon_get_ptr_size	function
(	O
)	O
)	O
{	O
case	O
ptr_32bit	int
:	O
if	O
(	O
gmon_io_read_32	function
(	O
ifp	pointer
,	O
&	O
cnt32	int
)	O
)	O
return	O
1	int
;	O
*	O
cnt	pointer
=	O
cnt32	int
;	O
break	O
;	O
case	O
ptr_64bit	int
:	O
if	O
(	O
gmon_io_read_64	function
(	O
ifp	pointer
,	O
&	O
cnt64	long
)	O
)	O
return	O
1	int
;	O
*	O
cnt	pointer
=	O
cnt64	long
;	O
break	O
;	O
default	O
:	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
gmon_write_raw_arc	function
(	O
FILE	struct
*	O
ofp	pointer
,	O
bfd_vma	long
fpc	pointer
,	O
bfd_vma	long
spc	pointer
,	O
unsigned	O
long	O
cnt	pointer
)	O
{	O
if	O
(	O
gmon_io_write_vma	function
(	O
ofp	pointer
,	O
fpc	pointer
)	O
||	O
gmon_io_write_vma	function
(	O
ofp	pointer
,	O
spc	pointer
)	O
)	O
return	O
1	int
;	O
switch	O
(	O
gmon_get_ptr_size	function
(	O
)	O
)	O
{	O
case	O
ptr_32bit	int
:	O
if	O
(	O
gmon_io_write_32	function
(	O
ofp	pointer
,	O
(	O
unsigned	O
int	O
)	O
cnt	pointer
)	O
)	O
return	O
1	int
;	O
break	O
;	O
case	O
ptr_64bit	int
:	O
if	O
(	O
gmon_io_write_64	function
(	O
ofp	pointer
,	O
(	O
BFD_HOST_U_64_BIT	O
)	O
cnt	pointer
)	O
)	O
return	O
1	int
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
gmon_out_read	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
FILE	struct
*	O
ifp	pointer
;	O
struct	O
gmon_hdr	struct
ghdr	struct
;	O
unsigned	O
char	O
tag	char
;	O
int	O
nhist	int
=	O
0	int
,	O
narcs	int
=	O
0	int
,	O
nbbs	int
=	O
0	int
;	O
if	O
(	O
strcmp	function
(	O
filename	pointer
,	O
"-"	pointer
)	O
==	O
0	int
)	O
{	O
ifp	pointer
=	O
stdin	pointer
;	O
SET_BINARY	O
(	O
fileno	function
(	O
stdin	pointer
)	O
)	O
;	O
}	O
else	O
{	O
ifp	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
FOPEN_RB	pointer
)	O
;	O
if	O
(	O
!	O
ifp	pointer
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
fread	function
(	O
&	O
ghdr	struct
,	O
sizeof	O
(	O
struct	O
gmon_hdr	struct
)	O
,	O
1	int
,	O
ifp	pointer
)	O
!=	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: file too short to be a gmon file\n"	pointer
)	O
,	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
file_format	enum
==	O
FF_MAGIC	int
)	O
||	O
(	O
file_format	enum
==	O
FF_AUTO	int
&&	O
!	O
strncmp	function
(	O
&	O
ghdr	struct
.	O
cookie	array
[	O
0	int
]	O
,	O
GMON_MAGIC	pointer
,	O
4	int
)	O
)	O
)	O
{	O
if	O
(	O
file_format	enum
==	O
FF_MAGIC	int
&&	O
strncmp	function
(	O
&	O
ghdr	struct
.	O
cookie	array
[	O
0	int
]	O
,	O
GMON_MAGIC	pointer
,	O
4	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: file `%s' has bad magic cookie\n"	pointer
)	O
,	O
whoami	pointer
,	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
gmon_file_version	int
=	O
bfd_get_32	O
(	O
core_bfd	pointer
,	O
(	O
bfd_byte	char
*	O
)	O
ghdr	struct
.	O
version	array
)	O
;	O
if	O
(	O
gmon_file_version	int
!=	O
GMON_VERSION	int
&&	O
gmon_file_version	int
!=	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: file `%s' has unsupported version %d\n"	pointer
)	O
,	O
whoami	pointer
,	O
filename	pointer
,	O
gmon_file_version	int
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
while	O
(	O
fread	function
(	O
&	O
tag	char
,	O
sizeof	O
(	O
tag	char
)	O
,	O
1	int
,	O
ifp	pointer
)	O
==	O
1	int
)	O
{	O
switch	O
(	O
tag	char
)	O
{	O
case	O
GMON_TAG_TIME_HIST	int
:	O
++	O
nhist	int
;	O
gmon_input	int
|=	O
INPUT_HISTOGRAM	O
;	O
hist_read_rec	function
(	O
ifp	pointer
,	O
filename	pointer
)	O
;	O
break	O
;	O
case	O
GMON_TAG_CG_ARC	int
:	O
++	O
narcs	int
;	O
gmon_input	int
|=	O
INPUT_CALL_GRAPH	O
;	O
cg_read_rec	function
(	O
ifp	pointer
,	O
filename	pointer
)	O
;	O
break	O
;	O
case	O
GMON_TAG_BB_COUNT	int
:	O
++	O
nbbs	int
;	O
gmon_input	int
|=	O
INPUT_BB_COUNTS	O
;	O
bb_read_rec	function
(	O
ifp	pointer
,	O
filename	pointer
)	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: %s: found bad tag %d (file corrupted?)\n"	pointer
)	O
,	O
whoami	pointer
,	O
filename	pointer
,	O
tag	char
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
file_format	enum
==	O
FF_AUTO	int
||	O
file_format	enum
==	O
FF_BSD	int
||	O
file_format	enum
==	O
FF_BSD44	int
)	O
{	O
struct	O
hdr	struct
{	O
bfd_vma	long
low_pc	long
;	O
bfd_vma	long
high_pc	long
;	O
unsigned	O
int	O
ncnt	int
;	O
}	O
;	O
unsigned	O
int	O
i	pointer
;	O
int	O
samp_bytes	int
,	O
header_size	int
=	O
0	int
;	O
unsigned	O
long	O
count	int
;	O
bfd_vma	long
from_pc	long
,	O
self_pc	long
;	O
UNIT	array
raw_bin_count	array
;	O
struct	O
hdr	struct
tmp	struct
;	O
unsigned	O
int	O
version	array
;	O
unsigned	O
int	O
hist_num_bins	int
;	O
gmon_input	int
=	O
INPUT_HISTOGRAM	O
|	O
INPUT_CALL_GRAPH	O
;	O
if	O
(	O
fseek	function
(	O
ifp	pointer
,	O
0	int
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
gmon_io_read_vma	function
(	O
ifp	pointer
,	O
&	O
tmp	struct
.	O
low_pc	long
)	O
||	O
gmon_io_read_vma	function
(	O
ifp	pointer
,	O
&	O
tmp	struct
.	O
high_pc	long
)	O
||	O
gmon_io_read_32	function
(	O
ifp	pointer
,	O
&	O
tmp	struct
.	O
ncnt	int
)	O
)	O
{	O
bad_gmon_file	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: file too short to be a gmon file\n"	pointer
)	O
,	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
gmon_io_read_32	function
(	O
ifp	pointer
,	O
&	O
version	array
)	O
)	O
goto	O
bad_gmon_file	O
;	O
if	O
(	O
version	array
==	O
GMONVERSION	int
)	O
{	O
unsigned	O
int	O
profrate	int
;	O
if	O
(	O
gmon_io_read_32	function
(	O
ifp	pointer
,	O
&	O
profrate	int
)	O
)	O
goto	O
bad_gmon_file	O
;	O
if	O
(	O
!	O
histograms	pointer
)	O
hz	long
=	O
profrate	int
;	O
else	O
if	O
(	O
hz	long
!=	O
(	O
int	O
)	O
profrate	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: profiling rate incompatible with first gmon file\n"	pointer
)	O
,	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
switch	O
(	O
gmon_get_ptr_size	function
(	O
)	O
)	O
{	O
case	O
ptr_32bit	int
:	O
header_size	int
=	O
GMON_HDRSIZE_BSD44_32	O
;	O
break	O
;	O
case	O
ptr_64bit	int
:	O
header_size	int
=	O
GMON_HDRSIZE_BSD44_64	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
file_format	enum
==	O
FF_BSD44	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: file `%s' has bad magic cookie\n"	pointer
)	O
,	O
whoami	pointer
,	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
switch	O
(	O
gmon_get_ptr_size	function
(	O
)	O
)	O
{	O
case	O
ptr_32bit	int
:	O
header_size	int
=	O
GMON_HDRSIZE_OLDBSD_32	O
;	O
break	O
;	O
case	O
ptr_64bit	int
:	O
header_size	int
=	O
GMON_HDRSIZE_OLDBSD_64	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
fseek	function
(	O
ifp	pointer
,	O
header_size	int
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
samp_bytes	int
=	O
tmp	struct
.	O
ncnt	int
-	O
header_size	int
;	O
hist_num_bins	int
=	O
samp_bytes	int
/	O
sizeof	O
(	O
UNIT	array
)	O
;	O
if	O
(	O
histograms	pointer
&&	O
(	O
tmp	struct
.	O
low_pc	long
!=	O
histograms	pointer
->	O
lowpc	long
||	O
tmp	struct
.	O
high_pc	long
!=	O
histograms	pointer
->	O
highpc	long
||	O
(	O
hist_num_bins	int
!=	O
histograms	pointer
->	O
num_bins	int
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: incompatible with first gmon file\n"	pointer
)	O
,	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
histograms	pointer
)	O
{	O
num_histograms	int
=	O
1	int
;	O
histograms	pointer
=	O
(	O
struct	O
histogram	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
histogram	struct
)	O
)	O
;	O
histograms	pointer
->	O
lowpc	long
=	O
tmp	struct
.	O
low_pc	long
;	O
histograms	pointer
->	O
highpc	long
=	O
tmp	struct
.	O
high_pc	long
;	O
histograms	pointer
->	O
num_bins	int
=	O
hist_num_bins	int
;	O
hist_scale	double
=	O
(	O
double	O
)	O
(	O
(	O
tmp	struct
.	O
high_pc	long
-	O
tmp	struct
.	O
low_pc	long
)	O
/	O
sizeof	O
(	O
UNIT	array
)	O
)	O
/	O
hist_num_bins	int
;	O
histograms	pointer
->	O
sample	pointer
=	O
(	O
int	O
*	O
)	O
xmalloc	function
(	O
hist_num_bins	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
memset	function
(	O
histograms	pointer
->	O
sample	pointer
,	O
0	int
,	O
hist_num_bins	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
}	O
DBG	O
(	O
SAMPLEDEBUG	O
,	O
printf	function
(	O
"[gmon_out_read] lowpc 0x%lx highpc 0x%lx ncnt %d\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
tmp	struct
.	O
low_pc	long
,	O
(	O
unsigned	O
long	O
)	O
tmp	struct
.	O
high_pc	long
,	O
tmp	struct
.	O
ncnt	int
)	O
;	O
printf	function
(	O
"[gmon_out_read] samp_bytes %d hist_num_bins %d\n"	pointer
,	O
samp_bytes	int
,	O
hist_num_bins	int
)	O
)	O
;	O
if	O
(	O
samp_bytes	int
<	O
0	int
||	O
histograms	pointer
->	O
lowpc	long
>	O
histograms	pointer
->	O
highpc	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: file '%s' does not appear to be in gmon.out format\n"	pointer
)	O
,	O
whoami	pointer
,	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
hist_num_bins	int
)	O
++	O
nhist	int
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
hist_num_bins	int
;	O
++	O
i	pointer
)	O
{	O
if	O
(	O
fread	function
(	O
raw_bin_count	array
,	O
sizeof	O
(	O
raw_bin_count	array
)	O
,	O
1	int
,	O
ifp	pointer
)	O
!=	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: unexpected EOF after reading %d/%d bins\n"	pointer
)	O
,	O
whoami	pointer
,	O
--	O
i	pointer
,	O
hist_num_bins	int
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
histograms	pointer
->	O
sample	pointer
[	O
i	pointer
]	O
+=	O
bfd_get_16	O
(	O
core_bfd	pointer
,	O
(	O
bfd_byte	char
*	O
)	O
raw_bin_count	array
)	O
;	O
}	O
while	O
(	O
gmon_read_raw_arc	function
(	O
ifp	pointer
,	O
&	O
from_pc	long
,	O
&	O
self_pc	long
,	O
&	O
count	int
)	O
==	O
0	int
)	O
{	O
++	O
narcs	int
;	O
DBG	O
(	O
SAMPLEDEBUG	O
,	O
printf	function
(	O
"[gmon_out_read] frompc 0x%lx selfpc 0x%lx count %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
from_pc	long
,	O
(	O
unsigned	O
long	O
)	O
self_pc	long
,	O
count	int
)	O
)	O
;	O
cg_tally	function
(	O
from_pc	long
,	O
self_pc	long
,	O
count	int
)	O
;	O
}	O
if	O
(	O
hz	long
==	O
HZ_WRONG	int
)	O
{	O
hz	long
=	O
hertz	function
(	O
)	O
;	O
if	O
(	O
hz	long
==	O
HZ_WRONG	int
)	O
{	O
hz	long
=	O
1	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"time is in ticks, not seconds\n"	pointer
)	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: don't know how to deal with file format %d\n"	pointer
)	O
,	O
whoami	pointer
,	O
file_format	enum
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
ifp	pointer
!=	O
stdin	pointer
)	O
fclose	function
(	O
ifp	pointer
)	O
;	O
if	O
(	O
output_style	int
&	O
STYLE_GMON_INFO	O
)	O
{	O
printf	function
(	O
_	O
(	O
"File `%s' (version %d) contains:\n"	pointer
)	O
,	O
filename	pointer
,	O
gmon_file_version	int
)	O
;	O
printf	function
(	O
nhist	int
==	O
1	int
?	O
_	O
(	O
"\t%d histogram record\n"	pointer
)	O
:	O
_	O
(	O
"\t%d histogram records\n"	pointer
)	O
,	O
nhist	int
)	O
;	O
printf	function
(	O
narcs	int
==	O
1	int
?	O
_	O
(	O
"\t%d call-graph record\n"	pointer
)	O
:	O
_	O
(	O
"\t%d call-graph records\n"	pointer
)	O
,	O
narcs	int
)	O
;	O
printf	function
(	O
nbbs	int
==	O
1	int
?	O
_	O
(	O
"\t%d basic-block count record\n"	pointer
)	O
:	O
_	O
(	O
"\t%d basic-block count records\n"	pointer
)	O
,	O
nbbs	int
)	O
;	O
first_output	int
=	O
FALSE	int
;	O
}	O
}	O
void	O
gmon_out_write	function
(	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
FILE	struct
*	O
ofp	pointer
;	O
struct	O
gmon_hdr	struct
ghdr	struct
;	O
ofp	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
FOPEN_WB	pointer
)	O
;	O
if	O
(	O
!	O
ofp	pointer
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
file_format	enum
==	O
FF_AUTO	int
||	O
file_format	enum
==	O
FF_MAGIC	int
)	O
{	O
memcpy	function
(	O
&	O
ghdr	struct
.	O
cookie	array
[	O
0	int
]	O
,	O
GMON_MAGIC	pointer
,	O
4	int
)	O
;	O
bfd_put_32	O
(	O
core_bfd	pointer
,	O
(	O
bfd_vma	long
)	O
GMON_VERSION	int
,	O
(	O
bfd_byte	char
*	O
)	O
ghdr	struct
.	O
version	array
)	O
;	O
if	O
(	O
fwrite	function
(	O
&	O
ghdr	struct
,	O
sizeof	O
(	O
ghdr	struct
)	O
,	O
1	int
,	O
ofp	pointer
)	O
!=	O
1	int
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
gmon_input	int
&	O
INPUT_HISTOGRAM	O
)	O
hist_write_hist	function
(	O
ofp	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
gmon_input	int
&	O
INPUT_CALL_GRAPH	O
)	O
cg_write_arcs	function
(	O
ofp	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
gmon_input	int
&	O
INPUT_BB_COUNTS	O
)	O
bb_write_blocks	function
(	O
ofp	pointer
,	O
filename	pointer
)	O
;	O
}	O
else	O
if	O
(	O
file_format	enum
==	O
FF_BSD	int
||	O
file_format	enum
==	O
FF_BSD44	int
)	O
{	O
UNIT	array
raw_bin_count	array
;	O
unsigned	O
int	O
i	pointer
,	O
hdrsize	int
;	O
unsigned	O
padsize	int
;	O
char	O
pad	array
[	O
3	int
*	O
4	int
]	O
;	O
Arc	struct
*	O
arc	struct
;	O
Sym	struct
*	O
sym	pointer
;	O
memset	function
(	O
pad	array
,	O
0	int
,	O
sizeof	O
(	O
pad	array
)	O
)	O
;	O
hdrsize	int
=	O
0	int
;	O
if	O
(	O
file_format	enum
==	O
FF_BSD44	int
||	O
hz	long
!=	O
hertz	function
(	O
)	O
)	O
{	O
padsize	int
=	O
3	int
*	O
4	int
;	O
switch	O
(	O
gmon_get_ptr_size	function
(	O
)	O
)	O
{	O
case	O
ptr_32bit	int
:	O
hdrsize	int
=	O
GMON_HDRSIZE_BSD44_32	O
;	O
break	O
;	O
case	O
ptr_64bit	int
:	O
hdrsize	int
=	O
GMON_HDRSIZE_BSD44_64	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
padsize	int
=	O
0	int
;	O
switch	O
(	O
gmon_get_ptr_size	function
(	O
)	O
)	O
{	O
case	O
ptr_32bit	int
:	O
hdrsize	int
=	O
GMON_HDRSIZE_OLDBSD_32	O
;	O
break	O
;	O
case	O
ptr_64bit	int
:	O
hdrsize	int
=	O
GMON_HDRSIZE_OLDBSD_64	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
gmon_io_write_vma	function
(	O
ofp	pointer
,	O
histograms	pointer
->	O
lowpc	long
)	O
||	O
gmon_io_write_vma	function
(	O
ofp	pointer
,	O
histograms	pointer
->	O
highpc	long
)	O
||	O
gmon_io_write_32	function
(	O
ofp	pointer
,	O
histograms	pointer
->	O
num_bins	int
*	O
sizeof	O
(	O
UNIT	array
)	O
+	O
hdrsize	int
)	O
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
file_format	enum
==	O
FF_BSD44	int
||	O
hz	long
!=	O
hertz	function
(	O
)	O
)	O
{	O
if	O
(	O
gmon_io_write_32	function
(	O
ofp	pointer
,	O
GMONVERSION	int
)	O
||	O
gmon_io_write_32	function
(	O
ofp	pointer
,	O
(	O
unsigned	O
int	O
)	O
hz	long
)	O
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
padsize	int
!=	O
0	int
&&	O
fwrite	function
(	O
pad	array
,	O
1	int
,	O
padsize	int
,	O
ofp	pointer
)	O
!=	O
padsize	int
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
histograms	pointer
->	O
num_bins	int
;	O
++	O
i	pointer
)	O
{	O
bfd_put_16	O
(	O
core_bfd	pointer
,	O
(	O
bfd_vma	long
)	O
histograms	pointer
->	O
sample	pointer
[	O
i	pointer
]	O
,	O
(	O
bfd_byte	char
*	O
)	O
&	O
raw_bin_count	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
fwrite	function
(	O
&	O
raw_bin_count	array
[	O
0	int
]	O
,	O
sizeof	O
(	O
raw_bin_count	array
)	O
,	O
1	int
,	O
ofp	pointer
)	O
!=	O
1	int
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
}	O
for	O
(	O
sym	pointer
=	O
symtab	struct
.	O
base	int
;	O
sym	pointer
<	O
symtab	struct
.	O
limit	pointer
;	O
++	O
sym	pointer
)	O
{	O
for	O
(	O
arc	struct
=	O
sym	pointer
->	O
cg	struct
.	O
children	pointer
;	O
arc	struct
;	O
arc	struct
=	O
arc	struct
->	O
next_child	pointer
)	O
{	O
if	O
(	O
gmon_write_raw_arc	function
(	O
ofp	pointer
,	O
arc	struct
->	O
parent	pointer
->	O
addr	pointer
,	O
arc	struct
->	O
child	double
->	O
addr	pointer
,	O
arc	struct
->	O
count	int
)	O
)	O
{	O
perror	function
(	O
filename	pointer
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
DBG	O
(	O
SAMPLEDEBUG	O
,	O
printf	function
(	O
"[dumpsum] frompc 0x%lx selfpc 0x%lx count %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
arc	struct
->	O
parent	pointer
->	O
addr	pointer
,	O
(	O
unsigned	O
long	O
)	O
arc	struct
->	O
child	double
->	O
addr	pointer
,	O
arc	struct
->	O
count	int
)	O
)	O
;	O
}	O
}	O
fclose	function
(	O
ofp	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: don't know how to deal with file format %d\n"	pointer
)	O
,	O
whoami	pointer
,	O
file_format	enum
)	O
;	O
done	function
(	O
1	int
)	O
;	O
}	O
}	O
