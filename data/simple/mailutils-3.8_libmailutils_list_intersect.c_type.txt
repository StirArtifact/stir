int	O
mu_list_intersect_dup	function
(	O
mu_list_t	pointer
*	O
pdest	pointer
,	O
mu_list_t	pointer
a	pointer
,	O
mu_list_t	pointer
b	pointer
,	O
int	O
(	O
*	O
dup_item	pointer
)	O
(	O
void	O
*	O
*	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
dup_closure	pointer
)	O
{	O
mu_list_t	pointer
dest	pointer
;	O
int	O
rc	int
;	O
mu_iterator_t	pointer
itr	pointer
;	O
rc	int
=	O
mu_list_create	function
(	O
&	O
dest	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_list_set_comparator	function
(	O
dest	pointer
,	O
b	pointer
->	O
comp	pointer
)	O
;	O
if	O
(	O
dup_item	pointer
)	O
mu_list_set_destroy_item	function
(	O
dest	pointer
,	O
b	pointer
->	O
destroy_item	pointer
)	O
;	O
rc	int
=	O
mu_list_get_iterator	function
(	O
a	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_list_destroy	function
(	O
&	O
dest	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
rc	int
=	O
0	int
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
void	O
*	O
data	pointer
;	O
mu_iterator_current	function
(	O
itr	pointer
,	O
&	O
data	pointer
)	O
;	O
if	O
(	O
mu_list_locate	function
(	O
b	pointer
,	O
data	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
void	O
*	O
new_data	pointer
;	O
if	O
(	O
dup_item	pointer
&&	O
data	pointer
)	O
{	O
rc	int
=	O
dup_item	pointer
(	O
&	O
new_data	pointer
,	O
data	pointer
,	O
dup_closure	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
else	O
new_data	pointer
=	O
data	pointer
;	O
mu_list_append	function
(	O
dest	pointer
,	O
new_data	pointer
)	O
;	O
}	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
*	O
pdest	pointer
=	O
dest	pointer
;	O
return	O
rc	int
;	O
}	O
int	O
mu_list_intersect	function
(	O
mu_list_t	pointer
*	O
pdest	pointer
,	O
mu_list_t	pointer
a	pointer
,	O
mu_list_t	pointer
b	pointer
)	O
{	O
return	O
mu_list_intersect_dup	function
(	O
pdest	pointer
,	O
a	pointer
,	O
b	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
