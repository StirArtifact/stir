int	O
mu_list_replace	function
(	O
mu_list_t	pointer
list	pointer
,	O
void	O
*	O
old_item	pointer
,	O
void	O
*	O
new_item	pointer
)	O
{	O
struct	O
list_data	struct
*	O
current	pointer
;	O
mu_list_comparator_t	pointer
comp	pointer
;	O
int	O
status	int
=	O
MU_ERR_NOENT	O
;	O
if	O
(	O
list	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
comp	pointer
=	O
list	pointer
->	O
comp	pointer
?	O
list	pointer
->	O
comp	pointer
:	O
_mu_list_ptr_comparator	function
;	O
mu_monitor_wrlock	function
(	O
list	pointer
->	O
monitor	pointer
)	O
;	O
for	O
(	O
current	pointer
=	O
list	pointer
->	O
head	struct
.	O
next	pointer
;	O
current	pointer
!=	O
&	O
list	pointer
->	O
head	struct
;	O
current	pointer
=	O
current	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
comp	pointer
(	O
current	pointer
->	O
item	pointer
,	O
old_item	pointer
)	O
==	O
0	int
)	O
{	O
DESTROY_ITEM	O
(	O
list	pointer
,	O
current	pointer
)	O
;	O
current	pointer
->	O
item	pointer
=	O
new_item	pointer
;	O
status	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
mu_monitor_unlock	function
(	O
list	pointer
->	O
monitor	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_list_replace_nd	function
(	O
mu_list_t	pointer
list	pointer
,	O
void	O
*	O
item	pointer
,	O
void	O
*	O
new_item	pointer
)	O
{	O
mu_list_destroy_item_t	pointer
dptr	pointer
=	O
mu_list_set_destroy_item	function
(	O
list	pointer
,	O
NULL	O
)	O
;	O
int	O
rc	int
=	O
mu_list_replace	function
(	O
list	pointer
,	O
item	pointer
,	O
new_item	pointer
)	O
;	O
mu_list_set_destroy_item	function
(	O
list	pointer
,	O
dptr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
