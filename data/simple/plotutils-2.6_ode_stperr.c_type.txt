static	O
double	O
ssemax	double
,	O
abemax	double
,	O
acemax	double
;	O
static	O
char	O
*	O
ssenam	pointer
,	O
*	O
abenam	pointer
,	O
*	O
acenam	pointer
;	O
void	O
maxerr	function
(	O
void	O
)	O
{	O
struct	O
sym	struct
*	O
sp	pointer
,	O
*	O
dq	pointer
;	O
dq	pointer
=	O
symtab	pointer
->	O
sy_link	pointer
;	O
ssemax	double
=	O
abemax	double
=	O
acemax	double
=	O
0.0	int
;	O
for	O
(	O
sp	pointer
=	O
dq	pointer
;	O
sp	pointer
!=	O
NULL	O
;	O
sp	pointer
=	O
sp	pointer
->	O
sy_link	pointer
)	O
{	O
if	O
(	O
ssemax	double
<	O
sp	pointer
->	O
sy_sserr	double
)	O
{	O
ssemax	double
=	O
sp	pointer
->	O
sy_sserr	double
;	O
ssenam	pointer
=	O
sp	pointer
->	O
sy_name	array
;	O
}	O
if	O
(	O
abemax	double
<	O
sp	pointer
->	O
sy_aberr	double
)	O
{	O
abemax	double
=	O
sp	pointer
->	O
sy_aberr	double
;	O
abenam	pointer
=	O
sp	pointer
->	O
sy_name	array
;	O
}	O
if	O
(	O
acmax	double
<	O
sp	pointer
->	O
sy_acerr	double
)	O
{	O
acemax	double
=	O
sp	pointer
->	O
sy_acerr	double
;	O
acenam	pointer
=	O
sp	pointer
->	O
sy_name	array
;	O
}	O
}	O
}	O
bool	enum
hierror	function
(	O
void	O
)	O
{	O
double	O
t	double
=	O
symtab	pointer
->	O
sy_val	array
[	O
0	int
]	O
;	O
if	O
(	O
t	double
+	O
tstep	double
==	O
t	double
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s\n"	pointer
,	O
progname	pointer
,	O
"step size below lower limit"	pointer
)	O
;	O
longjmp	function
(	O
mark	array
,	O
1	int
)	O
;	O
}	O
if	O
(	O
ssemax	double
<=	O
ssmax	double
&&	O
abemax	double
<=	O
abmax	double
&&	O
acemax	double
<=	O
acmax	double
)	O
return	O
false	int
;	O
if	O
(	O
fabs	function
(	O
tstep	double
)	O
>=	O
fabs	function
(	O
hmin	double
)	O
)	O
return	O
true	int
;	O
if	O
(	O
sflag	enum
)	O
return	O
false	int
;	O
if	O
(	O
ssemax	double
>	O
ssmax	double
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: relative error limit exceeded while calculating %.*s'\n"	pointer
,	O
progname	pointer
,	O
NAMMAX	int
,	O
ssenam	pointer
)	O
;	O
else	O
if	O
(	O
abemax	double
>	O
abmax	double
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: absolute error limit exceeded while calculating %.*s'\n"	pointer
,	O
progname	pointer
,	O
NAMMAX	int
,	O
abenam	pointer
)	O
;	O
else	O
if	O
(	O
acemax	double
>	O
acmax	double
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: accumulated error limit exceeded while calculating %.*s'\n"	pointer
,	O
progname	pointer
,	O
NAMMAX	int
,	O
acenam	pointer
)	O
;	O
longjmp	function
(	O
mark	array
,	O
1	int
)	O
;	O
return	O
false	int
;	O
}	O
bool	enum
lowerror	function
(	O
void	O
)	O
{	O
if	O
(	O
ssemax	double
<	O
ssmin	double
||	O
abemax	double
<	O
abmin	double
)	O
if	O
(	O
fabs	function
(	O
tstep	double
)	O
<=	O
fabs	function
(	O
hmax	double
)	O
)	O
return	O
true	int
;	O
return	O
false	int
;	O
}	O
bool	enum
intpr	function
(	O
double	O
t	double
)	O
{	O
if	O
(	O
tstep	double
>	O
0	int
)	O
if	O
(	O
!	O
PASTSTOP	O
(	O
tstep	double
)	O
)	O
return	O
false	int
;	O
if	O
(	O
tstep	double
<	O
0	int
)	O
if	O
(	O
!	O
BEFORESTOP	O
(	O
tstep	double
)	O
)	O
return	O
false	int
;	O
if	O
(	O
tstep	double
>	O
0	int
)	O
while	O
(	O
PASTSTOP	O
(	O
tstep	double
)	O
)	O
tstep	double
=	O
HALF	O
*	O
tstep	double
;	O
if	O
(	O
tstep	double
<	O
0	int
)	O
while	O
(	O
BEFORESTOP	O
(	O
tstep	double
)	O
)	O
tstep	double
=	O
HALF	O
*	O
tstep	double
;	O
return	O
true	int
;	O
}	O
