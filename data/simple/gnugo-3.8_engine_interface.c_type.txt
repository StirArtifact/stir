void	O
init_gnugo	function
(	O
float	O
memory	float
,	O
unsigned	O
int	O
seed	int
)	O
{	O
set_random_seed	function
(	O
HASH_RANDOM_SEED	int
)	O
;	O
reading_cache_init	function
(	O
memory	float
*	O
1024	int
*	O
1024	int
)	O
;	O
set_random_seed	function
(	O
seed	int
)	O
;	O
persistent_cache_init	function
(	O
)	O
;	O
clear_board	function
(	O
)	O
;	O
transformation_init	function
(	O
)	O
;	O
dfa_match_init	function
(	O
)	O
;	O
choose_mc_patterns	function
(	O
NULL	O
)	O
;	O
clear_approxlib_cache	function
(	O
)	O
;	O
clear_accuratelib_cache	function
(	O
)	O
;	O
}	O
int	O
check_boardsize	function
(	O
int	O
boardsize	int
,	O
FILE	struct
*	O
out	pointer
)	O
{	O
int	O
max_board	int
=	O
MAX_BOARD	int
;	O
if	O
(	O
use_monte_carlo_genmove	int
&&	O
max_board	int
>	O
9	int
)	O
max_board	int
=	O
9	int
;	O
if	O
(	O
boardsize	int
<	O
MIN_BOARD	int
||	O
boardsize	int
>	O
max_board	int
)	O
{	O
if	O
(	O
out	pointer
)	O
{	O
fprintf	function
(	O
out	pointer
,	O
"Unsupported board size: %d. "	pointer
,	O
boardsize	int
)	O
;	O
if	O
(	O
boardsize	int
<	O
MIN_BOARD	int
)	O
fprintf	function
(	O
out	pointer
,	O
"Min size is %d.\n"	pointer
,	O
MIN_BOARD	int
)	O
;	O
else	O
{	O
fprintf	function
(	O
out	pointer
,	O
"Max size is %d"	pointer
,	O
max_board	int
)	O
;	O
if	O
(	O
max_board	int
<	O
MAX_BOARD	int
)	O
fprintf	function
(	O
out	pointer
,	O
" (%d without --monte-carlo)"	pointer
,	O
MAX_BOARD	int
)	O
;	O
fprintf	function
(	O
out	pointer
,	O
".\n"	pointer
)	O
;	O
}	O
fprintf	function
(	O
out	pointer
,	O
"Try `gnugo --help' for more information.\n"	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
void	O
gnugo_clear_board	function
(	O
int	O
boardsize	int
)	O
{	O
board_size	int
=	O
boardsize	int
;	O
clear_board	function
(	O
)	O
;	O
init_timers	function
(	O
)	O
;	O
}	O
void	O
gnugo_play_move	function
(	O
int	O
move	pointer
,	O
int	O
color	int
)	O
{	O
play_move	function
(	O
move	pointer
,	O
color	int
)	O
;	O
clock_push_button	function
(	O
color	int
)	O
;	O
}	O
int	O
gnugo_play_sgfnode	function
(	O
SGFNode	struct
*	O
node	pointer
,	O
int	O
to_move	int
)	O
{	O
SGFProperty	struct
*	O
prop	pointer
;	O
for	O
(	O
prop	pointer
=	O
node	pointer
->	O
props	pointer
;	O
prop	pointer
;	O
prop	pointer
=	O
prop	pointer
->	O
next	pointer
)	O
{	O
switch	O
(	O
prop	pointer
->	O
name	short
)	O
{	O
case	O
SGFAB	int
:	O
add_stone	function
(	O
get_sgfmove	function
(	O
prop	pointer
)	O
,	O
BLACK	int
)	O
;	O
break	O
;	O
case	O
SGFAW	int
:	O
add_stone	function
(	O
get_sgfmove	function
(	O
prop	pointer
)	O
,	O
WHITE	int
)	O
;	O
break	O
;	O
case	O
SGFPL	int
:	O
if	O
(	O
prop	pointer
->	O
value	pointer
[	O
0	int
]	O
==	O
'w'	O
||	O
prop	pointer
->	O
value	pointer
[	O
0	int
]	O
==	O
'W'	O
)	O
to_move	int
=	O
WHITE	int
;	O
else	O
to_move	int
=	O
BLACK	int
;	O
break	O
;	O
case	O
SGFW	int
:	O
case	O
SGFB	int
:	O
to_move	int
=	O
(	O
prop	pointer
->	O
name	short
==	O
SGFW	int
)	O
?	O
WHITE	int
:	O
BLACK	int
;	O
gnugo_play_move	function
(	O
get_sgfmove	function
(	O
prop	pointer
)	O
,	O
to_move	int
)	O
;	O
to_move	int
=	O
OTHER_COLOR	O
(	O
to_move	int
)	O
;	O
break	O
;	O
}	O
}	O
return	O
to_move	int
;	O
}	O
int	O
gnugo_sethand	function
(	O
int	O
desired_handicap	int
,	O
SGFNode	struct
*	O
node	pointer
)	O
{	O
place_fixed_handicap	function
(	O
desired_handicap	int
)	O
;	O
sgffile_recordboard	function
(	O
node	pointer
)	O
;	O
return	O
handicap	int
;	O
}	O
float	O
gnugo_estimate_score	function
(	O
float	O
*	O
upper	pointer
,	O
float	O
*	O
lower	pointer
)	O
{	O
silent_examine_position	function
(	O
EXAMINE_DRAGONS	int
)	O
;	O
if	O
(	O
upper	pointer
!=	O
NULL	O
)	O
*	O
upper	pointer
=	O
white_score	float
;	O
if	O
(	O
lower	pointer
!=	O
NULL	O
)	O
*	O
lower	pointer
=	O
black_score	float
;	O
return	O
(	O
(	O
white_score	float
+	O
black_score	float
)	O
/	O
2.0	int
)	O
;	O
}	O
void	O
gameinfo_clear	function
(	O
Gameinfo	struct
*	O
gameinfo	pointer
)	O
{	O
gnugo_clear_board	function
(	O
board_size	int
)	O
;	O
gameinfo	pointer
->	O
handicap	int
=	O
0	int
;	O
gameinfo	pointer
->	O
to_move	int
=	O
BLACK	int
;	O
sgftree_clear	function
(	O
&	O
gameinfo	pointer
->	O
game_record	struct
)	O
;	O
gameinfo	pointer
->	O
computer_player	int
=	O
WHITE	int
;	O
}	O
void	O
gameinfo_print	function
(	O
Gameinfo	struct
*	O
gameinfo	pointer
)	O
{	O
printf	function
(	O
"Board Size:   %d\n"	pointer
,	O
board_size	int
)	O
;	O
printf	function
(	O
"Handicap      %d\n"	pointer
,	O
gameinfo	pointer
->	O
handicap	int
)	O
;	O
printf	function
(	O
"Komi:         %.1f\n"	pointer
,	O
komi	float
)	O
;	O
printf	function
(	O
"Move Number:  %d\n"	pointer
,	O
movenum	int
)	O
;	O
printf	function
(	O
"To Move:      %s\n"	pointer
,	O
color_to_string	function
(	O
gameinfo	pointer
->	O
to_move	int
)	O
)	O
;	O
printf	function
(	O
"Computer player: "	pointer
)	O
;	O
if	O
(	O
gameinfo	pointer
->	O
computer_player	int
==	O
WHITE	int
)	O
printf	function
(	O
"White\n"	pointer
)	O
;	O
else	O
if	O
(	O
gameinfo	pointer
->	O
computer_player	int
==	O
BLACK	int
)	O
printf	function
(	O
"Black\n"	pointer
)	O
;	O
else	O
if	O
(	O
gameinfo	pointer
->	O
computer_player	int
==	O
EMPTY	int
)	O
printf	function
(	O
"Both (solo)\n"	pointer
)	O
;	O
else	O
printf	function
(	O
"Nobody\n"	pointer
)	O
;	O
}	O
int	O
gameinfo_play_sgftree_rot	function
(	O
Gameinfo	struct
*	O
gameinfo	pointer
,	O
SGFTree	struct
*	O
tree	pointer
,	O
const	O
char	O
*	O
untilstr	pointer
,	O
int	O
orientation	int
)	O
{	O
int	O
bs	int
;	O
int	O
next	pointer
=	O
BLACK	int
;	O
int	O
untilmove	int
=	O
-	O
1	int
;	O
int	O
until	int
=	O
9999	int
;	O
if	O
(	O
!	O
sgfGetIntProperty	function
(	O
tree	pointer
->	O
root	pointer
,	O
"SZ"	pointer
,	O
&	O
bs	int
)	O
)	O
bs	int
=	O
19	int
;	O
if	O
(	O
!	O
check_boardsize	function
(	O
bs	int
,	O
stderr	pointer
)	O
)	O
return	O
EMPTY	int
;	O
handicap	int
=	O
0	int
;	O
if	O
(	O
sgfGetIntProperty	function
(	O
tree	pointer
->	O
root	pointer
,	O
"HA"	pointer
,	O
&	O
handicap	int
)	O
&&	O
handicap	int
>	O
1	int
)	O
next	pointer
=	O
WHITE	int
;	O
gameinfo	pointer
->	O
handicap	int
=	O
handicap	int
;	O
if	O
(	O
handicap	int
>	O
bs	int
*	O
bs	int
-	O
1	int
||	O
handicap	int
<	O
0	int
)	O
{	O
gprintf	function
(	O
" Handicap HA[%d] is unreasonable.\n Modify SGF file.\n"	pointer
,	O
handicap	int
)	O
;	O
return	O
EMPTY	int
;	O
}	O
gnugo_clear_board	function
(	O
bs	int
)	O
;	O
if	O
(	O
!	O
sgfGetFloatProperty	function
(	O
tree	pointer
->	O
root	pointer
,	O
"KM"	pointer
,	O
&	O
komi	float
)	O
)	O
{	O
if	O
(	O
gameinfo	pointer
->	O
handicap	int
==	O
0	int
)	O
komi	float
=	O
5.5	int
;	O
else	O
komi	float
=	O
0.5	int
;	O
}	O
if	O
(	O
untilstr	pointer
)	O
{	O
if	O
(	O
*	O
untilstr	pointer
>	O
'0'	O
&&	O
*	O
untilstr	pointer
<=	O
'9'	O
)	O
{	O
until	int
=	O
atoi	function
(	O
untilstr	pointer
)	O
;	O
DEBUG	O
(	O
DEBUG_LOADSGF	int
,	O
"Loading until move %d\n"	pointer
,	O
until	int
)	O
;	O
}	O
else	O
{	O
untilmove	int
=	O
string_to_location	function
(	O
board_size	int
,	O
untilstr	pointer
)	O
;	O
DEBUG	O
(	O
DEBUG_LOADSGF	int
,	O
"Loading until move at %1m\n"	pointer
,	O
untilmove	int
)	O
;	O
}	O
}	O
for	O
(	O
tree	pointer
->	O
lastnode	pointer
=	O
NULL	O
;	O
sgftreeForward	function
(	O
tree	pointer
)	O
;	O
)	O
{	O
SGFProperty	struct
*	O
prop	pointer
;	O
int	O
move	pointer
;	O
for	O
(	O
prop	pointer
=	O
tree	pointer
->	O
lastnode	pointer
->	O
props	pointer
;	O
prop	pointer
;	O
prop	pointer
=	O
prop	pointer
->	O
next	pointer
)	O
{	O
DEBUG	O
(	O
DEBUG_LOADSGF	int
,	O
"%c%c[%s]\n"	pointer
,	O
prop	pointer
->	O
name	short
&	O
0xff	int
,	O
(	O
prop	pointer
->	O
name	short
>>	O
8	int
)	O
,	O
prop	pointer
->	O
value	pointer
)	O
;	O
switch	O
(	O
prop	pointer
->	O
name	short
)	O
{	O
case	O
SGFAB	int
:	O
case	O
SGFAW	int
:	O
move	pointer
=	O
rotate1	function
(	O
get_sgfmove	function
(	O
prop	pointer
)	O
,	O
orientation	int
)	O
;	O
if	O
(	O
board	pointer
[	O
move	pointer
]	O
!=	O
EMPTY	int
)	O
gprintf	function
(	O
"Illegal SGF! attempt to add a stone at occupied point %1m\n"	pointer
,	O
move	pointer
)	O
;	O
else	O
add_stone	function
(	O
move	pointer
,	O
prop	pointer
->	O
name	short
==	O
SGFAB	int
?	O
BLACK	int
:	O
WHITE	int
)	O
;	O
break	O
;	O
case	O
SGFPL	int
:	O
if	O
(	O
prop	pointer
->	O
value	pointer
[	O
0	int
]	O
==	O
'w'	O
||	O
prop	pointer
->	O
value	pointer
[	O
0	int
]	O
==	O
'W'	O
||	O
prop	pointer
->	O
value	pointer
[	O
0	int
]	O
==	O
'2'	O
)	O
next	pointer
=	O
WHITE	int
;	O
else	O
next	pointer
=	O
BLACK	int
;	O
if	O
(	O
stones_on_board	function
(	O
GRAY	int
)	O
==	O
0	int
&&	O
next	pointer
==	O
WHITE	int
)	O
{	O
place_fixed_handicap	function
(	O
gameinfo	pointer
->	O
handicap	int
)	O
;	O
sgfOverwritePropertyInt	function
(	O
tree	pointer
->	O
root	pointer
,	O
"HA"	pointer
,	O
handicap	int
)	O
;	O
}	O
break	O
;	O
case	O
SGFW	int
:	O
case	O
SGFB	int
:	O
next	pointer
=	O
prop	pointer
->	O
name	short
==	O
SGFW	int
?	O
WHITE	int
:	O
BLACK	int
;	O
if	O
(	O
stones_on_board	function
(	O
GRAY	int
)	O
==	O
0	int
&&	O
next	pointer
==	O
WHITE	int
)	O
{	O
place_fixed_handicap	function
(	O
gameinfo	pointer
->	O
handicap	int
)	O
;	O
sgfOverwritePropertyInt	function
(	O
tree	pointer
->	O
root	pointer
,	O
"HA"	pointer
,	O
handicap	int
)	O
;	O
}	O
move	pointer
=	O
get_sgfmove	function
(	O
prop	pointer
)	O
;	O
if	O
(	O
move	pointer
==	O
untilmove	int
||	O
movenum	int
==	O
until	int
-	O
1	int
)	O
{	O
gameinfo	pointer
->	O
to_move	int
=	O
next	pointer
;	O
sgftreeBack	function
(	O
tree	pointer
)	O
;	O
return	O
next	pointer
;	O
}	O
move	pointer
=	O
rotate1	function
(	O
move	pointer
,	O
orientation	int
)	O
;	O
if	O
(	O
move	pointer
==	O
PASS_MOVE	int
||	O
board	pointer
[	O
move	pointer
]	O
==	O
EMPTY	int
)	O
{	O
gnugo_play_move	function
(	O
move	pointer
,	O
next	pointer
)	O
;	O
next	pointer
=	O
OTHER_COLOR	O
(	O
next	pointer
)	O
;	O
}	O
else	O
{	O
gprintf	function
(	O
"WARNING: Move off board or on occupied position found in sgf-file.\n"	pointer
)	O
;	O
gprintf	function
(	O
"Move at %1m ignored, trying to proceed.\n"	pointer
,	O
move	pointer
)	O
;	O
gameinfo	pointer
->	O
to_move	int
=	O
next	pointer
;	O
return	O
next	pointer
;	O
}	O
break	O
;	O
case	O
SGFIL	int
:	O
move	pointer
=	O
rotate1	function
(	O
get_sgfmove	function
(	O
prop	pointer
)	O
,	O
orientation	int
)	O
;	O
if	O
(	O
board_size	int
>	O
1	int
)	O
{	O
int	O
move_color	int
;	O
if	O
(	O
ON_BOARD	O
(	O
NORTH	O
(	O
move	pointer
)	O
)	O
)	O
move_color	int
=	O
OTHER_COLOR	O
(	O
board	pointer
[	O
NORTH	O
(	O
move	pointer
)	O
]	O
)	O
;	O
else	O
move_color	int
=	O
OTHER_COLOR	O
(	O
board	pointer
[	O
SOUTH	O
(	O
move	pointer
)	O
]	O
)	O
;	O
if	O
(	O
is_ko	function
(	O
move	pointer
,	O
move_color	int
,	O
NULL	O
)	O
)	O
board_ko_pos	int
=	O
move	pointer
;	O
}	O
break	O
;	O
}	O
}	O
}	O
gameinfo	pointer
->	O
to_move	int
=	O
next	pointer
;	O
return	O
next	pointer
;	O
}	O
int	O
gameinfo_play_sgftree	function
(	O
Gameinfo	struct
*	O
gameinfo	pointer
,	O
SGFTree	struct
*	O
tree	pointer
,	O
const	O
char	O
*	O
untilstr	pointer
)	O
{	O
return	O
gameinfo_play_sgftree_rot	function
(	O
gameinfo	pointer
,	O
tree	pointer
,	O
untilstr	pointer
,	O
0	int
)	O
;	O
}	O
