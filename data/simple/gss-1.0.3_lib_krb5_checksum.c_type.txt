static	O
void	O
pack_uint32	function
(	O
OM_uint32	int
i	int
,	O
char	O
*	O
buf	pointer
)	O
{	O
buf	pointer
[	O
0	int
]	O
=	O
i	int
&	O
0xFF	int
;	O
buf	pointer
[	O
1	int
]	O
=	O
(	O
i	int
>>	O
8	int
)	O
&	O
0xFF	int
;	O
buf	pointer
[	O
2	int
]	O
=	O
(	O
i	int
>>	O
16	int
)	O
&	O
0xFF	int
;	O
buf	pointer
[	O
3	int
]	O
=	O
(	O
i	int
>>	O
24	int
)	O
&	O
0xFF	int
;	O
}	O
static	O
int	O
hash_cb	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
gss_ctx_id_t	pointer
*	O
context_handle	pointer
,	O
const	O
gss_channel_bindings_t	pointer
input_chan_bindings	pointer
,	O
char	O
*	O
*	O
out	pointer
)	O
{	O
gss_ctx_id_t	pointer
ctx	pointer
=	O
*	O
context_handle	pointer
;	O
_gss_krb5_ctx_t	pointer
k5	pointer
=	O
ctx	pointer
->	O
krb5	O
;	O
char	O
*	O
buf	pointer
,	O
*	O
p	pointer
;	O
size_t	long
len	long
;	O
int	O
res	int
;	O
if	O
(	O
input_chan_bindings	pointer
->	O
initiator_address	struct
.	O
length	int
>	O
UINT32_MAX	O
||	O
input_chan_bindings	pointer
->	O
acceptor_address	struct
.	O
length	int
>	O
UINT32_MAX	O
||	O
input_chan_bindings	pointer
->	O
application_data	struct
.	O
length	int
>	O
UINT32_MAX	O
)	O
return	O
GSS_S_BAD_BINDINGS	O
;	O
len	long
=	O
sizeof	O
(	O
OM_uint32	int
)	O
*	O
5	int
+	O
input_chan_bindings	pointer
->	O
initiator_address	struct
.	O
length	int
+	O
input_chan_bindings	pointer
->	O
acceptor_address	struct
.	O
length	int
+	O
input_chan_bindings	pointer
->	O
application_data	struct
.	O
length	int
;	O
p	pointer
=	O
buf	pointer
=	O
malloc	function
(	O
len	long
)	O
;	O
if	O
(	O
!	O
buf	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
pack_uint32	function
(	O
input_chan_bindings	pointer
->	O
initiator_addrtype	int
,	O
p	pointer
)	O
;	O
p	pointer
+=	O
sizeof	O
(	O
OM_uint32	int
)	O
;	O
pack_uint32	function
(	O
input_chan_bindings	pointer
->	O
initiator_address	struct
.	O
length	int
,	O
p	pointer
)	O
;	O
p	pointer
+=	O
sizeof	O
(	O
OM_uint32	int
)	O
;	O
if	O
(	O
input_chan_bindings	pointer
->	O
initiator_address	struct
.	O
length	int
>	O
0	int
)	O
{	O
memcpy	function
(	O
p	pointer
,	O
input_chan_bindings	pointer
->	O
initiator_address	struct
.	O
value	pointer
,	O
input_chan_bindings	pointer
->	O
initiator_address	struct
.	O
length	int
)	O
;	O
p	pointer
+=	O
input_chan_bindings	pointer
->	O
initiator_address	struct
.	O
length	int
;	O
}	O
pack_uint32	function
(	O
input_chan_bindings	pointer
->	O
acceptor_addrtype	int
,	O
p	pointer
)	O
;	O
p	pointer
+=	O
sizeof	O
(	O
OM_uint32	int
)	O
;	O
pack_uint32	function
(	O
input_chan_bindings	pointer
->	O
acceptor_address	struct
.	O
length	int
,	O
p	pointer
)	O
;	O
p	pointer
+=	O
sizeof	O
(	O
OM_uint32	int
)	O
;	O
if	O
(	O
input_chan_bindings	pointer
->	O
acceptor_address	struct
.	O
length	int
>	O
0	int
)	O
{	O
memcpy	function
(	O
p	pointer
,	O
input_chan_bindings	pointer
->	O
acceptor_address	struct
.	O
value	pointer
,	O
input_chan_bindings	pointer
->	O
acceptor_address	struct
.	O
length	int
)	O
;	O
p	pointer
+=	O
input_chan_bindings	pointer
->	O
acceptor_address	struct
.	O
length	int
;	O
}	O
pack_uint32	function
(	O
input_chan_bindings	pointer
->	O
application_data	struct
.	O
length	int
,	O
p	pointer
)	O
;	O
p	pointer
+=	O
sizeof	O
(	O
OM_uint32	int
)	O
;	O
if	O
(	O
input_chan_bindings	pointer
->	O
application_data	struct
.	O
length	int
>	O
0	int
)	O
memcpy	function
(	O
p	pointer
,	O
input_chan_bindings	pointer
->	O
application_data	struct
.	O
value	pointer
,	O
input_chan_bindings	pointer
->	O
application_data	struct
.	O
length	int
)	O
;	O
res	int
=	O
shishi_md5	function
(	O
k5	pointer
->	O
sh	pointer
,	O
buf	pointer
,	O
len	long
,	O
out	pointer
)	O
;	O
free	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
res	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
_gss_krb5_checksum_pack	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
const	O
gss_cred_id_t	pointer
initiator_cred_handle	pointer
,	O
gss_ctx_id_t	pointer
*	O
context_handle	pointer
,	O
const	O
gss_channel_bindings_t	pointer
input_chan_bindings	pointer
,	O
OM_uint32	int
req_flags	int
,	O
char	O
*	O
*	O
data	pointer
,	O
size_t	long
*	O
datalen	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
*	O
datalen	pointer
=	O
24	int
;	O
p	pointer
=	O
*	O
data	pointer
=	O
malloc	function
(	O
*	O
datalen	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
memcpy	function
(	O
&	O
p	pointer
[	O
0	int
]	O
,	O
"\x10\x00\x00\x00"	pointer
,	O
4	int
)	O
;	O
if	O
(	O
input_chan_bindings	pointer
!=	O
GSS_C_NO_CHANNEL_BINDINGS	O
)	O
{	O
char	O
*	O
md5hash	pointer
;	O
int	O
res	int
;	O
res	int
=	O
hash_cb	function
(	O
minor_status	pointer
,	O
context_handle	pointer
,	O
input_chan_bindings	pointer
,	O
&	O
md5hash	pointer
)	O
;	O
if	O
(	O
res	int
!=	O
GSS_S_COMPLETE	int
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
return	O
res	int
;	O
}	O
memcpy	function
(	O
&	O
p	pointer
[	O
4	int
]	O
,	O
md5hash	pointer
,	O
16	int
)	O
;	O
free	function
(	O
md5hash	pointer
)	O
;	O
}	O
else	O
memset	function
(	O
&	O
p	pointer
[	O
4	int
]	O
,	O
0	int
,	O
16	int
)	O
;	O
req_flags	int
&=	O
GSS_C_MUTUAL_FLAG	int
|	O
GSS_C_REPLAY_FLAG	int
|	O
GSS_C_SEQUENCE_FLAG	int
|	O
GSS_C_CONF_FLAG	int
|	O
GSS_C_INTEG_FLAG	int
;	O
p	pointer
[	O
20	int
]	O
=	O
req_flags	int
&	O
0xFF	int
;	O
p	pointer
[	O
21	int
]	O
=	O
(	O
req_flags	int
>>	O
8	int
)	O
&	O
0xFF	int
;	O
p	pointer
[	O
22	int
]	O
=	O
(	O
req_flags	int
>>	O
16	int
)	O
&	O
0xFF	int
;	O
p	pointer
[	O
23	int
]	O
=	O
(	O
req_flags	int
>>	O
24	int
)	O
&	O
0xFF	int
;	O
if	O
(	O
req_flags	int
&	O
GSS_C_DELEG_FLAG	int
)	O
{	O
}	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
_gss_krb5_checksum_parse	function
(	O
OM_uint32	int
*	O
minor_status	pointer
,	O
gss_ctx_id_t	pointer
*	O
context_handle	pointer
,	O
const	O
gss_channel_bindings_t	pointer
input_chan_bindings	pointer
)	O
{	O
gss_ctx_id_t	pointer
ctx	pointer
=	O
*	O
context_handle	pointer
;	O
_gss_krb5_ctx_t	pointer
k5	pointer
=	O
ctx	pointer
->	O
krb5	O
;	O
char	O
*	O
out	pointer
=	O
NULL	O
;	O
size_t	long
len	long
=	O
0	int
;	O
int	O
rc	int
;	O
char	O
*	O
md5hash	pointer
;	O
if	O
(	O
shishi_ap_authenticator_cksumtype	function
(	O
k5	pointer
->	O
ap	pointer
)	O
!=	O
0x8003	int
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
GSS_KRB5_S_G_VALIDATE_FAILED	O
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_ap_authenticator_cksumdata	function
(	O
k5	pointer
->	O
ap	pointer
,	O
out	pointer
,	O
&	O
len	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_TOO_SMALL_BUFFER	O
)	O
return	O
GSS_S_FAILURE	O
;	O
out	pointer
=	O
malloc	function
(	O
len	long
)	O
;	O
if	O
(	O
!	O
out	pointer
)	O
{	O
if	O
(	O
minor_status	pointer
)	O
*	O
minor_status	pointer
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_ap_authenticator_cksumdata	function
(	O
k5	pointer
->	O
ap	pointer
,	O
out	pointer
,	O
&	O
len	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
free	function
(	O
out	pointer
)	O
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
if	O
(	O
memcmp	function
(	O
out	pointer
,	O
"\x10\x00\x00\x00"	pointer
,	O
4	int
)	O
!=	O
0	int
)	O
{	O
free	function
(	O
out	pointer
)	O
;	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
}	O
if	O
(	O
input_chan_bindings	pointer
!=	O
GSS_C_NO_CHANNEL_BINDINGS	O
)	O
{	O
rc	int
=	O
hash_cb	function
(	O
minor_status	pointer
,	O
context_handle	pointer
,	O
input_chan_bindings	pointer
,	O
&	O
md5hash	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
GSS_S_COMPLETE	int
)	O
{	O
free	function
(	O
out	pointer
)	O
;	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
}	O
rc	int
=	O
memcmp	function
(	O
&	O
out	pointer
[	O
4	int
]	O
,	O
md5hash	pointer
,	O
16	int
)	O
;	O
free	function
(	O
md5hash	pointer
)	O
;	O
}	O
else	O
{	O
char	O
zeros	array
[	O
16	int
]	O
;	O
memset	function
(	O
&	O
zeros	array
[	O
0	int
]	O
,	O
0	int
,	O
sizeof	O
zeros	array
)	O
;	O
rc	int
=	O
memcmp	function
(	O
&	O
out	pointer
[	O
4	int
]	O
,	O
zeros	array
,	O
16	int
)	O
;	O
}	O
free	function
(	O
out	pointer
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
