elf_property	struct
*	O
_bfd_elf_get_property	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
unsigned	O
int	O
type	enum
,	O
unsigned	O
int	O
datasz	int
)	O
{	O
elf_property_list	struct
*	O
p	pointer
,	O
*	O
*	O
lastp	pointer
;	O
if	O
(	O
bfd_get_flavour	function
(	O
abfd	pointer
)	O
!=	O
bfd_target_elf_flavour	int
)	O
{	O
abort	function
(	O
)	O
;	O
}	O
lastp	pointer
=	O
&	O
elf_properties	O
(	O
abfd	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
*	O
lastp	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
type	enum
==	O
p	pointer
->	O
property	struct
.	O
pr_type	int
)	O
{	O
if	O
(	O
datasz	int
>	O
p	pointer
->	O
property	struct
.	O
pr_datasz	int
)	O
{	O
p	pointer
->	O
property	struct
.	O
pr_datasz	int
=	O
datasz	int
;	O
}	O
return	O
&	O
p	pointer
->	O
property	struct
;	O
}	O
else	O
if	O
(	O
type	enum
<	O
p	pointer
->	O
property	struct
.	O
pr_type	int
)	O
break	O
;	O
lastp	pointer
=	O
&	O
p	pointer
->	O
next	pointer
;	O
}	O
p	pointer
=	O
(	O
elf_property_list	struct
*	O
)	O
bfd_alloc	function
(	O
abfd	pointer
,	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"%pB: out of memory in _bfd_elf_get_property"	pointer
)	O
,	O
abfd	pointer
)	O
;	O
_exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
memset	function
(	O
p	pointer
,	O
0	int
,	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
property	struct
.	O
pr_type	int
=	O
type	enum
;	O
p	pointer
->	O
property	struct
.	O
pr_datasz	int
=	O
datasz	int
;	O
p	pointer
->	O
next	pointer
=	O
*	O
lastp	pointer
;	O
*	O
lastp	pointer
=	O
p	pointer
;	O
return	O
&	O
p	pointer
->	O
property	struct
;	O
}	O
bfd_boolean	int
_bfd_elf_parse_gnu_properties	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
Elf_Internal_Note	struct
*	O
note	pointer
)	O
{	O
const	O
struct	O
elf_backend_data	struct
*	O
bed	pointer
=	O
get_elf_backend_data	O
(	O
abfd	pointer
)	O
;	O
unsigned	O
int	O
align_size	int
=	O
bed	pointer
->	O
s	pointer
->	O
elfclass	char
==	O
ELFCLASS64	int
?	O
8	int
:	O
4	int
;	O
bfd_byte	char
*	O
ptr	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
note	pointer
->	O
descdata	pointer
;	O
bfd_byte	char
*	O
ptr_end	pointer
=	O
ptr	pointer
+	O
note	pointer
->	O
descsz	array
;	O
if	O
(	O
note	pointer
->	O
descsz	array
<	O
8	int
||	O
(	O
note	pointer
->	O
descsz	array
%	O
align_size	int
)	O
!=	O
0	int
)	O
{	O
bad_size	O
:	O
_bfd_error_handler	function
(	O
_	O
(	O
"warning: %pB: corrupt GNU_PROPERTY_TYPE (%ld) size: %#lx"	pointer
)	O
,	O
abfd	pointer
,	O
note	pointer
->	O
type	enum
,	O
note	pointer
->	O
descsz	array
)	O
;	O
return	O
FALSE	int
;	O
}	O
while	O
(	O
ptr	pointer
!=	O
ptr_end	pointer
)	O
{	O
unsigned	O
int	O
type	enum
;	O
unsigned	O
int	O
datasz	int
;	O
elf_property	struct
*	O
prop	pointer
;	O
if	O
(	O
(	O
size_t	long
)	O
(	O
ptr_end	pointer
-	O
ptr	pointer
)	O
<	O
8	int
)	O
goto	O
bad_size	O
;	O
type	enum
=	O
bfd_h_get_32	O
(	O
abfd	pointer
,	O
ptr	pointer
)	O
;	O
datasz	int
=	O
bfd_h_get_32	O
(	O
abfd	pointer
,	O
ptr	pointer
+	O
4	int
)	O
;	O
ptr	pointer
+=	O
8	int
;	O
if	O
(	O
datasz	int
>	O
(	O
size_t	long
)	O
(	O
ptr_end	pointer
-	O
ptr	pointer
)	O
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"warning: %pB: corrupt GNU_PROPERTY_TYPE (%ld) type (0x%x) datasz: 0x%x"	pointer
)	O
,	O
abfd	pointer
,	O
note	pointer
->	O
type	enum
,	O
type	enum
,	O
datasz	int
)	O
;	O
elf_properties	O
(	O
abfd	pointer
)	O
=	O
NULL	O
;	O
return	O
FALSE	int
;	O
}	O
if	O
(	O
type	enum
>=	O
GNU_PROPERTY_LOPROC	int
)	O
{	O
if	O
(	O
bed	pointer
->	O
elf_machine_code	int
==	O
EM_NONE	int
)	O
{	O
goto	O
next	pointer
;	O
}	O
else	O
if	O
(	O
type	enum
<	O
GNU_PROPERTY_LOUSER	int
&&	O
bed	pointer
->	O
parse_gnu_properties	pointer
)	O
{	O
enum	O
elf_property_kind	enum
kind	enum
=	O
bed	pointer
->	O
parse_gnu_properties	pointer
(	O
abfd	pointer
,	O
type	enum
,	O
ptr	pointer
,	O
datasz	int
)	O
;	O
if	O
(	O
kind	enum
==	O
property_corrupt	int
)	O
{	O
elf_properties	O
(	O
abfd	pointer
)	O
=	O
NULL	O
;	O
return	O
FALSE	int
;	O
}	O
else	O
if	O
(	O
kind	enum
!=	O
property_ignored	int
)	O
goto	O
next	pointer
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
type	enum
)	O
{	O
case	O
GNU_PROPERTY_STACK_SIZE	int
:	O
if	O
(	O
datasz	int
!=	O
align_size	int
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"warning: %pB: corrupt stack size: 0x%x"	pointer
)	O
,	O
abfd	pointer
,	O
datasz	int
)	O
;	O
elf_properties	O
(	O
abfd	pointer
)	O
=	O
NULL	O
;	O
return	O
FALSE	int
;	O
}	O
prop	pointer
=	O
_bfd_elf_get_property	function
(	O
abfd	pointer
,	O
type	enum
,	O
datasz	int
)	O
;	O
if	O
(	O
datasz	int
==	O
8	int
)	O
prop	pointer
->	O
u	union
.	O
number	long
=	O
bfd_h_get_64	O
(	O
abfd	pointer
,	O
ptr	pointer
)	O
;	O
else	O
prop	pointer
->	O
u	union
.	O
number	long
=	O
bfd_h_get_32	O
(	O
abfd	pointer
,	O
ptr	pointer
)	O
;	O
prop	pointer
->	O
pr_kind	enum
=	O
property_number	int
;	O
goto	O
next	pointer
;	O
case	O
GNU_PROPERTY_NO_COPY_ON_PROTECTED	int
:	O
if	O
(	O
datasz	int
!=	O
0	int
)	O
{	O
_bfd_error_handler	function
(	O
_	O
(	O
"warning: %pB: corrupt no copy on protected size: 0x%x"	pointer
)	O
,	O
abfd	pointer
,	O
datasz	int
)	O
;	O
elf_properties	O
(	O
abfd	pointer
)	O
=	O
NULL	O
;	O
return	O
FALSE	int
;	O
}	O
prop	pointer
=	O
_bfd_elf_get_property	function
(	O
abfd	pointer
,	O
type	enum
,	O
datasz	int
)	O
;	O
elf_has_no_copy_on_protected	O
(	O
abfd	pointer
)	O
=	O
TRUE	int
;	O
prop	pointer
->	O
pr_kind	enum
=	O
property_number	int
;	O
goto	O
next	pointer
;	O
default	O
:	O
break	O
;	O
}	O
}	O
_bfd_error_handler	function
(	O
_	O
(	O
"warning: %pB: unsupported GNU_PROPERTY_TYPE (%ld) type: 0x%x"	pointer
)	O
,	O
abfd	pointer
,	O
note	pointer
->	O
type	enum
,	O
type	enum
)	O
;	O
next	pointer
:	O
ptr	pointer
+=	O
(	O
datasz	int
+	O
(	O
align_size	int
-	O
1	int
)	O
)	O
&	O
~	O
(	O
align_size	int
-	O
1	int
)	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
elf_merge_gnu_properties	function
(	O
struct	O
bfd_link_info	struct
*	O
info	pointer
,	O
bfd	struct
*	O
abfd	pointer
,	O
bfd	struct
*	O
bbfd	pointer
,	O
elf_property	struct
*	O
aprop	pointer
,	O
elf_property	struct
*	O
bprop	pointer
)	O
{	O
const	O
struct	O
elf_backend_data	struct
*	O
bed	pointer
=	O
get_elf_backend_data	O
(	O
abfd	pointer
)	O
;	O
unsigned	O
int	O
pr_type	int
=	O
aprop	pointer
!=	O
NULL	O
?	O
aprop	pointer
->	O
pr_type	int
:	O
bprop	pointer
->	O
pr_type	int
;	O
if	O
(	O
bed	pointer
->	O
merge_gnu_properties	pointer
!=	O
NULL	O
&&	O
pr_type	int
>=	O
GNU_PROPERTY_LOPROC	int
&&	O
pr_type	int
<	O
GNU_PROPERTY_LOUSER	int
)	O
return	O
bed	pointer
->	O
merge_gnu_properties	pointer
(	O
info	pointer
,	O
abfd	pointer
,	O
bbfd	pointer
,	O
aprop	pointer
,	O
bprop	pointer
)	O
;	O
switch	O
(	O
pr_type	int
)	O
{	O
case	O
GNU_PROPERTY_STACK_SIZE	int
:	O
if	O
(	O
aprop	pointer
!=	O
NULL	O
&&	O
bprop	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
bprop	pointer
->	O
u	union
.	O
number	long
>	O
aprop	pointer
->	O
u	union
.	O
number	long
)	O
{	O
aprop	pointer
->	O
u	union
.	O
number	long
=	O
bprop	pointer
->	O
u	union
.	O
number	long
;	O
return	O
TRUE	int
;	O
}	O
break	O
;	O
}	O
case	O
GNU_PROPERTY_NO_COPY_ON_PROTECTED	int
:	O
return	O
aprop	pointer
==	O
NULL	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
return	O
FALSE	int
;	O
}	O
static	O
elf_property	struct
*	O
elf_find_and_remove_property	function
(	O
elf_property_list	struct
*	O
*	O
listp	pointer
,	O
unsigned	O
int	O
type	enum
,	O
bfd_boolean	int
rm	int
)	O
{	O
elf_property_list	struct
*	O
list	pointer
;	O
for	O
(	O
list	pointer
=	O
*	O
listp	pointer
;	O
list	pointer
;	O
list	pointer
=	O
list	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
type	enum
==	O
list	pointer
->	O
property	struct
.	O
pr_type	int
)	O
{	O
if	O
(	O
rm	int
)	O
*	O
listp	pointer
=	O
list	pointer
->	O
next	pointer
;	O
return	O
&	O
list	pointer
->	O
property	struct
;	O
}	O
else	O
if	O
(	O
type	enum
<	O
list	pointer
->	O
property	struct
.	O
pr_type	int
)	O
break	O
;	O
listp	pointer
=	O
&	O
list	pointer
->	O
next	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
elf_merge_gnu_property_list	function
(	O
struct	O
bfd_link_info	struct
*	O
info	pointer
,	O
bfd	struct
*	O
first_pbfd	pointer
,	O
bfd	struct
*	O
abfd	pointer
,	O
elf_property_list	struct
*	O
*	O
listp	pointer
)	O
{	O
elf_property_list	struct
*	O
p	pointer
,	O
*	O
*	O
lastp	pointer
;	O
elf_property	struct
*	O
pr	pointer
;	O
bfd_boolean	int
number_p	int
;	O
bfd_vma	long
number	long
=	O
0	int
;	O
lastp	pointer
=	O
&	O
elf_properties	O
(	O
first_pbfd	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
*	O
lastp	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
p	pointer
->	O
property	struct
.	O
pr_kind	enum
!=	O
property_remove	int
)	O
{	O
if	O
(	O
p	pointer
->	O
property	struct
.	O
pr_kind	enum
==	O
property_number	int
)	O
{	O
number_p	int
=	O
TRUE	int
;	O
number	long
=	O
p	pointer
->	O
property	struct
.	O
u	union
.	O
number	long
;	O
}	O
else	O
number_p	int
=	O
FALSE	int
;	O
pr	pointer
=	O
elf_find_and_remove_property	function
(	O
listp	pointer
,	O
p	pointer
->	O
property	struct
.	O
pr_type	int
,	O
TRUE	int
)	O
;	O
elf_merge_gnu_properties	function
(	O
info	pointer
,	O
first_pbfd	pointer
,	O
abfd	pointer
,	O
&	O
p	pointer
->	O
property	struct
,	O
pr	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
property	struct
.	O
pr_kind	enum
==	O
property_remove	int
)	O
{	O
if	O
(	O
info	pointer
->	O
has_map_file	int
)	O
{	O
if	O
(	O
number_p	int
)	O
{	O
if	O
(	O
pr	pointer
!=	O
NULL	O
)	O
info	pointer
->	O
callbacks	pointer
->	O
minfo	pointer
(	O
_	O
(	O
"Removed property %W to merge %pB (0x%v) "	pointer
"and %pB (0x%v)\n"	pointer
)	O
,	O
(	O
bfd_vma	long
)	O
p	pointer
->	O
property	struct
.	O
pr_type	int
,	O
first_pbfd	pointer
,	O
number	long
,	O
abfd	pointer
,	O
pr	pointer
->	O
u	union
.	O
number	long
)	O
;	O
else	O
info	pointer
->	O
callbacks	pointer
->	O
minfo	pointer
(	O
_	O
(	O
"Removed property %W to merge %pB (0x%v) "	pointer
"and %pB (not found)\n"	pointer
)	O
,	O
(	O
bfd_vma	long
)	O
p	pointer
->	O
property	struct
.	O
pr_type	int
,	O
first_pbfd	pointer
,	O
number	long
,	O
abfd	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
pr	pointer
!=	O
NULL	O
)	O
info	pointer
->	O
callbacks	pointer
->	O
minfo	pointer
(	O
_	O
(	O
"Removed property %W to merge %pB and %pB\n"	pointer
)	O
,	O
(	O
bfd_vma	long
)	O
p	pointer
->	O
property	struct
.	O
pr_type	int
,	O
first_pbfd	pointer
,	O
abfd	pointer
)	O
;	O
else	O
info	pointer
->	O
callbacks	pointer
->	O
minfo	pointer
(	O
_	O
(	O
"Removed property %W to merge %pB and %pB "	pointer
"(not found)\n"	pointer
)	O
,	O
(	O
bfd_vma	long
)	O
p	pointer
->	O
property	struct
.	O
pr_type	int
,	O
first_pbfd	pointer
,	O
abfd	pointer
)	O
;	O
}	O
}	O
*	O
lastp	pointer
=	O
p	pointer
->	O
next	pointer
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
number_p	int
)	O
{	O
if	O
(	O
pr	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
p	pointer
->	O
property	struct
.	O
u	union
.	O
number	long
!=	O
number	long
||	O
p	pointer
->	O
property	struct
.	O
u	union
.	O
number	long
!=	O
pr	pointer
->	O
u	union
.	O
number	long
)	O
info	pointer
->	O
callbacks	pointer
->	O
minfo	pointer
(	O
_	O
(	O
"Updated property %W (0x%v) to merge %pB (0x%v) "	pointer
"and %pB (0x%v)\n"	pointer
)	O
,	O
(	O
bfd_vma	long
)	O
p	pointer
->	O
property	struct
.	O
pr_type	int
,	O
p	pointer
->	O
property	struct
.	O
u	union
.	O
number	long
,	O
first_pbfd	pointer
,	O
number	long
,	O
abfd	pointer
,	O
pr	pointer
->	O
u	union
.	O
number	long
)	O
;	O
}	O
else	O
{	O
if	O
(	O
p	pointer
->	O
property	struct
.	O
u	union
.	O
number	long
!=	O
number	long
)	O
info	pointer
->	O
callbacks	pointer
->	O
minfo	pointer
(	O
_	O
(	O
"Updated property %W (%v) to merge %pB (0x%v) "	pointer
"and %pB (not found)\n"	pointer
)	O
,	O
(	O
bfd_vma	long
)	O
p	pointer
->	O
property	struct
.	O
pr_type	int
,	O
p	pointer
->	O
property	struct
.	O
u	union
.	O
number	long
,	O
first_pbfd	pointer
,	O
number	long
,	O
abfd	pointer
)	O
;	O
}	O
}	O
lastp	pointer
=	O
&	O
p	pointer
->	O
next	pointer
;	O
}	O
for	O
(	O
p	pointer
=	O
*	O
listp	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
property	struct
.	O
pr_kind	enum
==	O
property_number	int
)	O
{	O
number_p	int
=	O
TRUE	int
;	O
number	long
=	O
p	pointer
->	O
property	struct
.	O
u	union
.	O
number	long
;	O
}	O
else	O
number_p	int
=	O
FALSE	int
;	O
if	O
(	O
elf_merge_gnu_properties	function
(	O
info	pointer
,	O
first_pbfd	pointer
,	O
abfd	pointer
,	O
NULL	O
,	O
&	O
p	pointer
->	O
property	struct
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
property	struct
.	O
pr_type	int
==	O
GNU_PROPERTY_NO_COPY_ON_PROTECTED	int
)	O
elf_has_no_copy_on_protected	O
(	O
first_pbfd	pointer
)	O
=	O
TRUE	int
;	O
pr	pointer
=	O
_bfd_elf_get_property	function
(	O
first_pbfd	pointer
,	O
p	pointer
->	O
property	struct
.	O
pr_type	int
,	O
p	pointer
->	O
property	struct
.	O
pr_datasz	int
)	O
;	O
if	O
(	O
pr	pointer
->	O
pr_kind	enum
!=	O
property_unknown	int
)	O
abort	function
(	O
)	O
;	O
*	O
pr	pointer
=	O
p	pointer
->	O
property	struct
;	O
}	O
else	O
{	O
pr	pointer
=	O
elf_find_and_remove_property	function
(	O
&	O
elf_properties	O
(	O
first_pbfd	pointer
)	O
,	O
p	pointer
->	O
property	struct
.	O
pr_type	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
pr	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
number_p	int
)	O
info	pointer
->	O
callbacks	pointer
->	O
minfo	pointer
(	O
_	O
(	O
"Removed property %W to merge %pB (not found) and "	pointer
"%pB (0x%v)\n"	pointer
)	O
,	O
(	O
bfd_vma	long
)	O
p	pointer
->	O
property	struct
.	O
pr_type	int
,	O
first_pbfd	pointer
,	O
abfd	pointer
,	O
number	long
)	O
;	O
else	O
info	pointer
->	O
callbacks	pointer
->	O
minfo	pointer
(	O
_	O
(	O
"Removed property %W to merge %pB and %pB\n"	pointer
)	O
,	O
(	O
bfd_vma	long
)	O
p	pointer
->	O
property	struct
.	O
pr_type	int
,	O
first_pbfd	pointer
,	O
abfd	pointer
)	O
;	O
}	O
else	O
if	O
(	O
pr	pointer
->	O
pr_kind	enum
!=	O
property_remove	int
)	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
static	O
bfd_size_type	long
elf_get_gnu_property_section_size	function
(	O
elf_property_list	struct
*	O
list	pointer
,	O
unsigned	O
int	O
align_size	int
)	O
{	O
bfd_size_type	long
size	long
;	O
unsigned	O
int	O
descsz	array
;	O
descsz	array
=	O
offsetof	O
(	O
Elf_External_Note	struct
,	O
name	pointer
[	O
sizeof	O
"GNU"	pointer
]	O
)	O
;	O
descsz	array
=	O
(	O
descsz	array
+	O
3	int
)	O
&	O
-	O
(	O
unsigned	O
int	O
)	O
4	int
;	O
size	long
=	O
descsz	array
;	O
for	O
(	O
;	O
list	pointer
!=	O
NULL	O
;	O
list	pointer
=	O
list	pointer
->	O
next	pointer
)	O
{	O
unsigned	O
int	O
datasz	int
;	O
if	O
(	O
list	pointer
->	O
property	struct
.	O
pr_kind	enum
==	O
property_remove	int
)	O
continue	O
;	O
if	O
(	O
list	pointer
->	O
property	struct
.	O
pr_type	int
==	O
GNU_PROPERTY_STACK_SIZE	int
)	O
datasz	int
=	O
align_size	int
;	O
else	O
datasz	int
=	O
list	pointer
->	O
property	struct
.	O
pr_datasz	int
;	O
size	long
+=	O
4	int
+	O
4	int
+	O
datasz	int
;	O
size	long
=	O
(	O
size	long
+	O
(	O
align_size	int
-	O
1	int
)	O
)	O
&	O
~	O
(	O
align_size	int
-	O
1	int
)	O
;	O
}	O
return	O
size	long
;	O
}	O
static	O
void	O
elf_write_gnu_properties	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
bfd_byte	char
*	O
contents	pointer
,	O
elf_property_list	struct
*	O
list	pointer
,	O
unsigned	O
int	O
size	long
,	O
unsigned	O
int	O
align_size	int
)	O
{	O
unsigned	O
int	O
descsz	array
;	O
unsigned	O
int	O
datasz	int
;	O
Elf_External_Note	struct
*	O
e_note	pointer
;	O
e_note	pointer
=	O
(	O
Elf_External_Note	struct
*	O
)	O
contents	pointer
;	O
descsz	array
=	O
offsetof	O
(	O
Elf_External_Note	struct
,	O
name	pointer
[	O
sizeof	O
"GNU"	pointer
]	O
)	O
;	O
descsz	array
=	O
(	O
descsz	array
+	O
3	int
)	O
&	O
-	O
(	O
unsigned	O
int	O
)	O
4	int
;	O
bfd_h_put_32	O
(	O
abfd	pointer
,	O
sizeof	O
"GNU"	pointer
,	O
&	O
e_note	pointer
->	O
namesz	array
)	O
;	O
bfd_h_put_32	O
(	O
abfd	pointer
,	O
size	long
-	O
descsz	array
,	O
&	O
e_note	pointer
->	O
descsz	array
)	O
;	O
bfd_h_put_32	O
(	O
abfd	pointer
,	O
NT_GNU_PROPERTY_TYPE_0	int
,	O
&	O
e_note	pointer
->	O
type	enum
)	O
;	O
memcpy	function
(	O
e_note	pointer
->	O
name	pointer
,	O
"GNU"	pointer
,	O
sizeof	O
"GNU"	pointer
)	O
;	O
size	long
=	O
descsz	array
;	O
for	O
(	O
;	O
list	pointer
!=	O
NULL	O
;	O
list	pointer
=	O
list	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
list	pointer
->	O
property	struct
.	O
pr_kind	enum
==	O
property_remove	int
)	O
continue	O
;	O
if	O
(	O
list	pointer
->	O
property	struct
.	O
pr_type	int
==	O
GNU_PROPERTY_STACK_SIZE	int
)	O
datasz	int
=	O
align_size	int
;	O
else	O
datasz	int
=	O
list	pointer
->	O
property	struct
.	O
pr_datasz	int
;	O
bfd_h_put_32	O
(	O
abfd	pointer
,	O
list	pointer
->	O
property	struct
.	O
pr_type	int
,	O
contents	pointer
+	O
size	long
)	O
;	O
bfd_h_put_32	O
(	O
abfd	pointer
,	O
datasz	int
,	O
contents	pointer
+	O
size	long
+	O
4	int
)	O
;	O
size	long
+=	O
4	int
+	O
4	int
;	O
switch	O
(	O
list	pointer
->	O
property	struct
.	O
pr_kind	enum
)	O
{	O
case	O
property_number	int
:	O
switch	O
(	O
datasz	int
)	O
{	O
default	O
:	O
abort	function
(	O
)	O
;	O
case	O
0	int
:	O
break	O
;	O
case	O
4	int
:	O
bfd_h_put_32	O
(	O
abfd	pointer
,	O
list	pointer
->	O
property	struct
.	O
u	union
.	O
number	long
,	O
contents	pointer
+	O
size	long
)	O
;	O
break	O
;	O
case	O
8	int
:	O
bfd_h_put_64	O
(	O
abfd	pointer
,	O
list	pointer
->	O
property	struct
.	O
u	union
.	O
number	long
,	O
contents	pointer
+	O
size	long
)	O
;	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
size	long
+=	O
datasz	int
;	O
size	long
=	O
(	O
size	long
+	O
(	O
align_size	int
-	O
1	int
)	O
)	O
&	O
~	O
(	O
align_size	int
-	O
1	int
)	O
;	O
}	O
}	O
bfd	struct
*	O
_bfd_elf_link_setup_gnu_properties	function
(	O
struct	O
bfd_link_info	struct
*	O
info	pointer
)	O
{	O
bfd	struct
*	O
abfd	pointer
,	O
*	O
first_pbfd	pointer
=	O
NULL	O
;	O
elf_property_list	struct
*	O
list	pointer
;	O
asection	struct
*	O
sec	pointer
;	O
bfd_boolean	int
has_properties	int
=	O
FALSE	int
;	O
const	O
struct	O
elf_backend_data	struct
*	O
bed	pointer
=	O
get_elf_backend_data	O
(	O
info	pointer
->	O
output_bfd	pointer
)	O
;	O
unsigned	O
int	O
elfclass	char
=	O
bed	pointer
->	O
s	pointer
->	O
elfclass	char
;	O
int	O
elf_machine_code	int
=	O
bed	pointer
->	O
elf_machine_code	int
;	O
for	O
(	O
abfd	pointer
=	O
info	pointer
->	O
input_bfds	pointer
;	O
abfd	pointer
!=	O
NULL	O
;	O
abfd	pointer
=	O
abfd	pointer
->	O
link	function
.	O
next	pointer
)	O
if	O
(	O
bfd_get_flavour	function
(	O
abfd	pointer
)	O
==	O
bfd_target_elf_flavour	int
&&	O
(	O
abfd	pointer
->	O
flags	int
&	O
DYNAMIC	int
)	O
==	O
0	int
&&	O
elf_properties	O
(	O
abfd	pointer
)	O
!=	O
NULL	O
)	O
{	O
has_properties	int
=	O
TRUE	int
;	O
if	O
(	O
(	O
elf_machine_code	int
==	O
get_elf_backend_data	O
(	O
abfd	pointer
)	O
->	O
elf_machine_code	int
)	O
&&	O
(	O
elfclass	char
==	O
get_elf_backend_data	O
(	O
abfd	pointer
)	O
->	O
s	pointer
->	O
elfclass	char
)	O
&&	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
NOTE_GNU_PROPERTY_SECTION_NAME	pointer
)	O
!=	O
NULL	O
)	O
{	O
first_pbfd	pointer
=	O
abfd	pointer
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
has_properties	int
)	O
return	O
NULL	O
;	O
info	pointer
->	O
callbacks	pointer
->	O
minfo	pointer
(	O
_	O
(	O
"\n"	pointer
)	O
)	O
;	O
info	pointer
->	O
callbacks	pointer
->	O
minfo	pointer
(	O
_	O
(	O
"Merging program properties\n"	pointer
)	O
)	O
;	O
info	pointer
->	O
callbacks	pointer
->	O
minfo	pointer
(	O
_	O
(	O
"\n"	pointer
)	O
)	O
;	O
for	O
(	O
abfd	pointer
=	O
info	pointer
->	O
input_bfds	pointer
;	O
abfd	pointer
!=	O
NULL	O
;	O
abfd	pointer
=	O
abfd	pointer
->	O
link	function
.	O
next	pointer
)	O
if	O
(	O
abfd	pointer
!=	O
first_pbfd	pointer
&&	O
(	O
abfd	pointer
->	O
flags	int
&	O
(	O
DYNAMIC	int
|	O
BFD_PLUGIN	int
|	O
BFD_LINKER_CREATED	int
)	O
)	O
==	O
0	int
)	O
{	O
elf_property_list	struct
*	O
null_ptr	pointer
=	O
NULL	O
;	O
elf_property_list	struct
*	O
*	O
listp	pointer
=	O
&	O
null_ptr	pointer
;	O
if	O
(	O
bfd_get_flavour	function
(	O
abfd	pointer
)	O
==	O
bfd_target_elf_flavour	int
)	O
{	O
list	pointer
=	O
elf_properties	O
(	O
abfd	pointer
)	O
;	O
if	O
(	O
list	pointer
!=	O
NULL	O
&&	O
(	O
elf_machine_code	int
==	O
get_elf_backend_data	O
(	O
abfd	pointer
)	O
->	O
elf_machine_code	int
)	O
)	O
listp	pointer
=	O
&	O
elf_properties	O
(	O
abfd	pointer
)	O
;	O
}	O
else	O
list	pointer
=	O
NULL	O
;	O
if	O
(	O
first_pbfd	pointer
!=	O
NULL	O
)	O
elf_merge_gnu_property_list	function
(	O
info	pointer
,	O
first_pbfd	pointer
,	O
abfd	pointer
,	O
listp	pointer
)	O
;	O
if	O
(	O
list	pointer
!=	O
NULL	O
)	O
{	O
sec	pointer
=	O
bfd_get_section_by_name	function
(	O
abfd	pointer
,	O
NOTE_GNU_PROPERTY_SECTION_NAME	pointer
)	O
;	O
if	O
(	O
sec	pointer
!=	O
NULL	O
)	O
sec	pointer
->	O
output_section	pointer
=	O
bfd_abs_section_ptr	O
;	O
}	O
}	O
if	O
(	O
first_pbfd	pointer
!=	O
NULL	O
)	O
{	O
bfd_size_type	long
size	long
;	O
bfd_byte	char
*	O
contents	pointer
;	O
unsigned	O
int	O
align_size	int
=	O
elfclass	char
==	O
ELFCLASS64	int
?	O
8	int
:	O
4	int
;	O
sec	pointer
=	O
bfd_get_section_by_name	function
(	O
first_pbfd	pointer
,	O
NOTE_GNU_PROPERTY_SECTION_NAME	pointer
)	O
;	O
BFD_ASSERT	O
(	O
sec	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
info	pointer
->	O
stacksize	long
>	O
0	int
)	O
{	O
elf_property	struct
*	O
p	pointer
;	O
bfd_vma	long
stacksize	long
=	O
info	pointer
->	O
stacksize	long
;	O
p	pointer
=	O
_bfd_elf_get_property	function
(	O
first_pbfd	pointer
,	O
GNU_PROPERTY_STACK_SIZE	int
,	O
align_size	int
)	O
;	O
if	O
(	O
p	pointer
->	O
pr_kind	enum
==	O
property_unknown	int
)	O
{	O
p	pointer
->	O
u	union
.	O
number	long
=	O
stacksize	long
;	O
p	pointer
->	O
pr_kind	enum
=	O
property_number	int
;	O
}	O
else	O
if	O
(	O
stacksize	long
>	O
p	pointer
->	O
u	union
.	O
number	long
)	O
p	pointer
->	O
u	union
.	O
number	long
=	O
stacksize	long
;	O
}	O
else	O
if	O
(	O
elf_properties	O
(	O
first_pbfd	pointer
)	O
==	O
NULL	O
)	O
{	O
sec	pointer
->	O
output_section	pointer
=	O
bfd_abs_section_ptr	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
bed	pointer
->	O
fixup_gnu_properties	pointer
)	O
bed	pointer
->	O
fixup_gnu_properties	pointer
(	O
info	pointer
,	O
&	O
elf_properties	O
(	O
first_pbfd	pointer
)	O
)	O
;	O
if	O
(	O
elf_properties	O
(	O
first_pbfd	pointer
)	O
==	O
NULL	O
)	O
{	O
sec	pointer
->	O
output_section	pointer
=	O
bfd_abs_section_ptr	O
;	O
return	O
NULL	O
;	O
}	O
list	pointer
=	O
elf_properties	O
(	O
first_pbfd	pointer
)	O
;	O
size	long
=	O
elf_get_gnu_property_section_size	function
(	O
list	pointer
,	O
align_size	int
)	O
;	O
sec	pointer
->	O
size	long
=	O
size	long
;	O
contents	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_zalloc	function
(	O
first_pbfd	pointer
,	O
size	long
)	O
;	O
elf_write_gnu_properties	function
(	O
first_pbfd	pointer
,	O
contents	pointer
,	O
list	pointer
,	O
size	long
,	O
align_size	int
)	O
;	O
elf_section_data	O
(	O
sec	pointer
)	O
->	O
this_hdr	struct
.	O
contents	pointer
=	O
contents	pointer
;	O
if	O
(	O
elf_has_no_copy_on_protected	O
(	O
first_pbfd	pointer
)	O
)	O
info	pointer
->	O
extern_protected_data	int
=	O
FALSE	int
;	O
}	O
return	O
first_pbfd	pointer
;	O
}	O
bfd_size_type	long
_bfd_elf_convert_gnu_property_size	function
(	O
bfd	struct
*	O
ibfd	pointer
,	O
bfd	struct
*	O
obfd	pointer
)	O
{	O
unsigned	O
int	O
align_size	int
;	O
const	O
struct	O
elf_backend_data	struct
*	O
bed	pointer
;	O
elf_property_list	struct
*	O
list	pointer
=	O
elf_properties	O
(	O
ibfd	pointer
)	O
;	O
bed	pointer
=	O
get_elf_backend_data	O
(	O
obfd	pointer
)	O
;	O
align_size	int
=	O
bed	pointer
->	O
s	pointer
->	O
elfclass	char
==	O
ELFCLASS64	int
?	O
8	int
:	O
4	int
;	O
return	O
elf_get_gnu_property_section_size	function
(	O
list	pointer
,	O
align_size	int
)	O
;	O
}	O
bfd_boolean	int
_bfd_elf_convert_gnu_properties	function
(	O
bfd	struct
*	O
ibfd	pointer
,	O
asection	struct
*	O
isec	pointer
,	O
bfd	struct
*	O
obfd	pointer
,	O
bfd_byte	char
*	O
*	O
ptr	pointer
,	O
bfd_size_type	long
*	O
ptr_size	pointer
)	O
{	O
unsigned	O
int	O
size	long
;	O
bfd_byte	char
*	O
contents	pointer
;	O
unsigned	O
int	O
align_shift	int
;	O
const	O
struct	O
elf_backend_data	struct
*	O
bed	pointer
;	O
elf_property_list	struct
*	O
list	pointer
=	O
elf_properties	O
(	O
ibfd	pointer
)	O
;	O
bed	pointer
=	O
get_elf_backend_data	O
(	O
obfd	pointer
)	O
;	O
align_shift	int
=	O
bed	pointer
->	O
s	pointer
->	O
elfclass	char
==	O
ELFCLASS64	int
?	O
3	int
:	O
2	int
;	O
size	long
=	O
bfd_section_size	function
(	O
isec	pointer
->	O
output_section	pointer
)	O
;	O
bfd_set_section_alignment	function
(	O
isec	pointer
->	O
output_section	pointer
,	O
align_shift	int
)	O
;	O
if	O
(	O
size	long
>	O
bfd_section_size	function
(	O
isec	pointer
)	O
)	O
{	O
contents	pointer
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_malloc	function
(	O
size	long
)	O
;	O
if	O
(	O
contents	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
free	function
(	O
*	O
ptr	pointer
)	O
;	O
*	O
ptr	pointer
=	O
contents	pointer
;	O
}	O
else	O
contents	pointer
=	O
*	O
ptr	pointer
;	O
*	O
ptr_size	pointer
=	O
size	long
;	O
elf_write_gnu_properties	function
(	O
ibfd	pointer
,	O
contents	pointer
,	O
list	pointer
,	O
size	long
,	O
1	int
<<	O
align_shift	int
)	O
;	O
return	O
TRUE	int
;	O
}	O
