DStr_string_descriptor	struct
*	O
dstrcat	function
(	O
target	pointer
,	O
append	pointer
)	O
DStr_string_descriptor	struct
*	O
target	pointer
;	O
DStr_string_descriptor	struct
*	O
append	pointer
;	O
{	O
char	O
*	O
string_pointer	pointer
;	O
if	O
(	O
DSTR_INVALID	O
(	O
target	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
append	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
append	pointer
->	O
length	long
==	O
0	int
)	O
return	O
target	pointer
;	O
if	O
(	O
target	pointer
->	O
own_string	enum
==	O
DStr_not_own	int
)	O
{	O
DStr_string_descriptor	struct
*	O
temp_string	pointer
;	O
temp_string	pointer
=	O
dstrmakeown	function
(	O
target	pointer
)	O
;	O
if	O
(	O
temp_string	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
if	O
(	O
target	pointer
->	O
length	long
==	O
0	int
)	O
string_pointer	pointer
=	O
malloc	function
(	O
append	pointer
->	O
length	long
)	O
;	O
else	O
string_pointer	pointer
=	O
realloc	function
(	O
target	pointer
->	O
string	pointer
,	O
target	pointer
->	O
length	long
+	O
append	pointer
->	O
length	long
)	O
;	O
if	O
(	O
string_pointer	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target	pointer
->	O
string	pointer
=	O
string_pointer	pointer
;	O
memmove	function
(	O
target	pointer
->	O
string	pointer
+	O
target	pointer
->	O
length	long
,	O
append	pointer
->	O
string	pointer
,	O
append	pointer
->	O
length	long
)	O
;	O
target	pointer
->	O
length	long
=	O
target	pointer
->	O
length	long
+	O
append	pointer
->	O
length	long
;	O
return	O
target	pointer
;	O
}	O
DStr_string_descriptor	struct
*	O
dstrncat	function
(	O
target	pointer
,	O
append	pointer
,	O
len	long
)	O
DStr_string_descriptor	struct
*	O
target	pointer
;	O
DStr_string_descriptor	struct
*	O
append	pointer
;	O
size_t	long
len	long
;	O
{	O
char	O
*	O
string_pointer	pointer
;	O
size_t	long
move_length	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
target	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
append	pointer
)	O
)	O
return	O
NULL	O
;	O
move_length	long
=	O
min	O
(	O
append	pointer
->	O
length	long
,	O
len	long
)	O
;	O
if	O
(	O
move_length	long
==	O
0	int
)	O
return	O
target	pointer
;	O
if	O
(	O
target	pointer
->	O
own_string	enum
==	O
DStr_not_own	int
)	O
{	O
DStr_string_descriptor	struct
*	O
temp_string	pointer
;	O
temp_string	pointer
=	O
dstrmakeown	function
(	O
target	pointer
)	O
;	O
if	O
(	O
temp_string	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
if	O
(	O
target	pointer
->	O
length	long
==	O
0	int
)	O
string_pointer	pointer
=	O
malloc	function
(	O
move_length	long
)	O
;	O
else	O
string_pointer	pointer
=	O
realloc	function
(	O
target	pointer
->	O
string	pointer
,	O
target	pointer
->	O
length	long
+	O
move_length	long
)	O
;	O
if	O
(	O
string_pointer	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target	pointer
->	O
string	pointer
=	O
string_pointer	pointer
;	O
memmove	function
(	O
target	pointer
->	O
string	pointer
+	O
target	pointer
->	O
length	long
,	O
append	pointer
->	O
string	pointer
,	O
move_length	long
)	O
;	O
target	pointer
->	O
length	long
=	O
target	pointer
->	O
length	long
+	O
move_length	long
;	O
return	O
target	pointer
;	O
}	O
DSTR_SIZE_TYPE	O
dstrchr	function
(	O
string	pointer
,	O
c	int
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
unsigned	O
int	O
c	int
;	O
{	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
c	int
>	O
255	int
)	O
return	O
DSTR_EINVALID	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
string	pointer
->	O
length	long
;	O
i	long
++	O
)	O
if	O
(	O
string	pointer
->	O
string	pointer
[	O
i	long
]	O
==	O
c	int
)	O
return	O
i	long
+	O
1	int
;	O
return	O
0	int
;	O
}	O
DSTR_SIZE_TYPE	O
dstrrchr	function
(	O
string	pointer
,	O
c	int
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
unsigned	O
int	O
c	int
;	O
{	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
c	int
>	O
255	int
)	O
return	O
DSTR_EINVALID	O
;	O
for	O
(	O
i	long
=	O
string	pointer
->	O
length	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
if	O
(	O
string	pointer
->	O
string	pointer
[	O
i	long
]	O
==	O
c	int
)	O
return	O
i	long
+	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
dstrcmp	function
(	O
string1	pointer
,	O
string2	pointer
)	O
DStr_string_descriptor	struct
*	O
string1	pointer
;	O
DStr_string_descriptor	struct
*	O
string2	pointer
;	O
{	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string1	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string2	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
string1	pointer
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
string2	pointer
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
string2	pointer
->	O
length	long
==	O
0	int
)	O
return	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
min	O
(	O
string1	pointer
->	O
length	long
,	O
string2	pointer
->	O
length	long
)	O
;	O
i	long
++	O
)	O
if	O
(	O
string1	pointer
->	O
string	pointer
[	O
i	long
]	O
!=	O
string2	pointer
->	O
string	pointer
[	O
i	long
]	O
)	O
return	O
string1	pointer
->	O
string	pointer
[	O
i	long
]	O
-	O
string2	pointer
->	O
string	pointer
[	O
i	long
]	O
;	O
return	O
string1	pointer
->	O
length	long
-	O
string2	pointer
->	O
length	long
;	O
}	O
int	O
dstrncmp	function
(	O
string1	pointer
,	O
string2	pointer
,	O
len	long
)	O
DStr_string_descriptor	struct
*	O
string1	pointer
;	O
DStr_string_descriptor	struct
*	O
string2	pointer
;	O
size_t	long
len	long
;	O
{	O
DSTR_SIZE_TYPE	O
i	long
;	O
DSTR_SIZE_TYPE	O
upper_common_length	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string1	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string2	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
string1	pointer
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
string2	pointer
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
string2	pointer
->	O
length	long
==	O
0	int
)	O
return	O
1	int
;	O
upper_common_length	long
=	O
min	O
(	O
string1	pointer
->	O
length	long
,	O
string2	pointer
->	O
length	long
)	O
;	O
if	O
(	O
len	long
<	O
upper_common_length	long
)	O
upper_common_length	long
=	O
len	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
upper_common_length	long
;	O
i	long
++	O
)	O
if	O
(	O
string1	pointer
->	O
string	pointer
[	O
i	long
]	O
!=	O
string2	pointer
->	O
string	pointer
[	O
i	long
]	O
)	O
return	O
string1	pointer
->	O
string	pointer
[	O
i	long
]	O
-	O
string2	pointer
->	O
string	pointer
[	O
i	long
]	O
;	O
if	O
(	O
string1	pointer
->	O
length	long
>=	O
len	long
&&	O
string2	pointer
->	O
length	long
>=	O
len	long
)	O
return	O
0	int
;	O
return	O
string1	pointer
->	O
length	long
-	O
string2	pointer
->	O
length	long
;	O
}	O
int	O
dstrcasecmp	function
(	O
string1	pointer
,	O
string2	pointer
)	O
DStr_string_descriptor	struct
*	O
string1	pointer
;	O
DStr_string_descriptor	struct
*	O
string2	pointer
;	O
{	O
int	O
return_value	int
;	O
DSTR_SIZE_TYPE	O
upper_common_length	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string1	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string2	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
string1	pointer
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
string2	pointer
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
string2	pointer
->	O
length	long
==	O
0	int
)	O
return	O
1	int
;	O
upper_common_length	long
=	O
min	O
(	O
string1	pointer
->	O
length	long
,	O
string2	pointer
->	O
length	long
)	O
;	O
return_value	int
=	O
strncasecmp	function
(	O
string1	pointer
->	O
string	pointer
,	O
string2	pointer
->	O
string	pointer
,	O
upper_common_length	long
)	O
;	O
if	O
(	O
return_value	int
==	O
0	int
)	O
return_value	int
=	O
string1	pointer
->	O
length	long
-	O
string2	pointer
->	O
length	long
;	O
return	O
return_value	int
;	O
}	O
int	O
dstrncasecmp	function
(	O
string1	pointer
,	O
string2	pointer
,	O
len	long
)	O
DStr_string_descriptor	struct
*	O
string1	pointer
;	O
DStr_string_descriptor	struct
*	O
string2	pointer
;	O
size_t	long
len	long
;	O
{	O
int	O
return_value	int
;	O
DSTR_SIZE_TYPE	O
upper_common_length	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string1	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string2	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
string1	pointer
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
string2	pointer
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
string2	pointer
->	O
length	long
==	O
0	int
)	O
return	O
1	int
;	O
upper_common_length	long
=	O
min	O
(	O
string1	pointer
->	O
length	long
,	O
string2	pointer
->	O
length	long
)	O
;	O
if	O
(	O
len	long
<	O
upper_common_length	long
)	O
upper_common_length	long
=	O
len	long
;	O
return_value	int
=	O
strncasecmp	function
(	O
string1	pointer
->	O
string	pointer
,	O
string2	pointer
->	O
string	pointer
,	O
upper_common_length	long
)	O
;	O
if	O
(	O
return_value	int
==	O
0	int
)	O
{	O
if	O
(	O
string1	pointer
->	O
length	long
>=	O
len	long
&&	O
string2	pointer
->	O
length	long
>=	O
len	long
)	O
return_value	int
=	O
0	int
;	O
else	O
return_value	int
=	O
string1	pointer
->	O
length	long
-	O
string2	pointer
->	O
length	long
;	O
}	O
return	O
return_value	int
;	O
}	O
DStr_string_descriptor	struct
*	O
dstrcpy	function
(	O
target	pointer
,	O
source	pointer
)	O
DStr_string_descriptor	struct
*	O
target	pointer
;	O
DStr_string_descriptor	struct
*	O
source	pointer
;	O
{	O
char	O
*	O
string_pointer	pointer
;	O
if	O
(	O
DSTR_INVALID	O
(	O
target	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
source	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
target	pointer
->	O
own_string	enum
==	O
DStr_not_own	int
)	O
{	O
DStr_string_descriptor	struct
*	O
temp_string	pointer
;	O
temp_string	pointer
=	O
dstrmakeown	function
(	O
target	pointer
)	O
;	O
if	O
(	O
temp_string	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
if	O
(	O
source	pointer
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
target	pointer
->	O
string	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
target	pointer
->	O
string	pointer
)	O
;	O
target	pointer
->	O
string	pointer
=	O
NULL	O
;	O
}	O
target	pointer
->	O
length	long
=	O
0	int
;	O
target	pointer
->	O
own_string	enum
=	O
DStr_not_own	int
;	O
}	O
if	O
(	O
target	pointer
->	O
length	long
==	O
0	int
)	O
string_pointer	pointer
=	O
malloc	function
(	O
source	pointer
->	O
length	long
)	O
;	O
else	O
string_pointer	pointer
=	O
realloc	function
(	O
target	pointer
->	O
string	pointer
,	O
source	pointer
->	O
length	long
)	O
;	O
if	O
(	O
string_pointer	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target	pointer
->	O
string	pointer
=	O
string_pointer	pointer
;	O
memmove	function
(	O
target	pointer
->	O
string	pointer
,	O
source	pointer
->	O
string	pointer
,	O
source	pointer
->	O
length	long
)	O
;	O
target	pointer
->	O
length	long
=	O
source	pointer
->	O
length	long
;	O
return	O
target	pointer
;	O
}	O
DStr_string_descriptor	struct
*	O
dstrncpy	function
(	O
target	pointer
,	O
source	pointer
,	O
len	long
)	O
DStr_string_descriptor	struct
*	O
target	pointer
;	O
DStr_string_descriptor	struct
*	O
source	pointer
;	O
size_t	long
len	long
;	O
{	O
char	O
*	O
string_pointer	pointer
;	O
if	O
(	O
DSTR_INVALID	O
(	O
target	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
source	pointer
)	O
)	O
return	O
NULL	O
;	O
len	long
=	O
min	O
(	O
source	pointer
->	O
length	long
,	O
len	long
)	O
;	O
if	O
(	O
target	pointer
->	O
own_string	enum
==	O
DStr_not_own	int
)	O
{	O
DStr_string_descriptor	struct
*	O
temp_string	pointer
;	O
temp_string	pointer
=	O
dstrmakeown	function
(	O
target	pointer
)	O
;	O
if	O
(	O
temp_string	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
if	O
(	O
len	long
==	O
0	int
)	O
{	O
if	O
(	O
target	pointer
->	O
string	pointer
!=	O
NULL	O
)	O
{	O
free	function
(	O
target	pointer
->	O
string	pointer
)	O
;	O
target	pointer
->	O
string	pointer
=	O
NULL	O
;	O
}	O
target	pointer
->	O
length	long
=	O
0	int
;	O
target	pointer
->	O
own_string	enum
=	O
DStr_not_own	int
;	O
}	O
if	O
(	O
target	pointer
->	O
length	long
==	O
0	int
)	O
string_pointer	pointer
=	O
malloc	function
(	O
len	long
)	O
;	O
else	O
string_pointer	pointer
=	O
realloc	function
(	O
target	pointer
->	O
string	pointer
,	O
len	long
)	O
;	O
if	O
(	O
string_pointer	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target	pointer
->	O
string	pointer
=	O
string_pointer	pointer
;	O
memmove	function
(	O
target	pointer
->	O
string	pointer
,	O
source	pointer
->	O
string	pointer
,	O
len	long
)	O
;	O
target	pointer
->	O
length	long
=	O
len	long
;	O
return	O
target	pointer
;	O
}	O
DStr_string_descriptor	struct
*	O
dstrerror	function
(	O
errcode	int
)	O
int	O
errcode	int
;	O
{	O
return	O
dstrdupstr	function
(	O
strerror	function
(	O
errcode	int
)	O
)	O
;	O
}	O
size_t	long
dstrlen	function
(	O
string	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
{	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
return	O
string	pointer
->	O
length	long
;	O
}	O
DSTR_SIZE_TYPE	O
dstrpbrk	function
(	O
string	pointer
,	O
charset	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
DStr_string_descriptor	struct
*	O
charset	pointer
;	O
{	O
char	O
charlist	array
[	O
256	int
]	O
;	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
charset	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
charset	pointer
->	O
length	long
==	O
0	int
)	O
return	O
string	pointer
->	O
length	long
+	O
1	int
;	O
if	O
(	O
string	pointer
->	O
length	long
==	O
0	int
)	O
return	O
string	pointer
->	O
length	long
+	O
1	int
;	O
bzero	function
(	O
charlist	array
,	O
256	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
charset	pointer
->	O
length	long
;	O
i	long
++	O
)	O
charlist	array
[	O
charset	pointer
->	O
string	pointer
[	O
i	long
]	O
]	O
=	O
-	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
string	pointer
->	O
length	long
;	O
i	long
++	O
)	O
if	O
(	O
charlist	array
[	O
string	pointer
->	O
string	pointer
[	O
i	long
]	O
]	O
!=	O
0	int
)	O
return	O
i	long
+	O
1	int
;	O
return	O
string	pointer
->	O
length	long
+	O
1	int
;	O
}	O
DSTR_SIZE_TYPE	O
dstrrpbrk	function
(	O
string	pointer
,	O
charset	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
DStr_string_descriptor	struct
*	O
charset	pointer
;	O
{	O
char	O
charlist	array
[	O
256	int
]	O
;	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
charset	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
charset	pointer
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
string	pointer
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
bzero	function
(	O
charlist	array
,	O
256	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
charset	pointer
->	O
length	long
;	O
i	long
++	O
)	O
charlist	array
[	O
charset	pointer
->	O
string	pointer
[	O
i	long
]	O
]	O
=	O
-	O
1	int
;	O
for	O
(	O
i	long
=	O
string	pointer
->	O
length	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
if	O
(	O
charlist	array
[	O
string	pointer
->	O
string	pointer
[	O
i	long
]	O
]	O
!=	O
0	int
)	O
return	O
i	long
+	O
1	int
;	O
return	O
0	int
;	O
}	O
DStr_string_descriptor	struct
*	O
dstrsep	function
(	O
string	pointer
,	O
charset	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
DStr_string_descriptor	struct
*	O
charset	pointer
;	O
{	O
DStr_string_descriptor	struct
*	O
return_value	int
;	O
char	O
*	O
temp_string	pointer
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
charset	pointer
)	O
)	O
return	O
NULL	O
;	O
return_value	int
=	O
dstrnew	function
(	O
)	O
;	O
if	O
(	O
return_value	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_value	int
->	O
length	long
=	O
dstrpbrk	function
(	O
string	pointer
,	O
charset	pointer
)	O
-	O
1	int
;	O
return_value	int
->	O
own_string	enum
=	O
DStr_own	int
;	O
return_value	int
->	O
string	pointer
=	O
malloc	function
(	O
return_value	int
->	O
length	long
)	O
;	O
if	O
(	O
return_value	int
->	O
string	pointer
==	O
NULL	O
)	O
{	O
dstrfree	function
(	O
return_value	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	function
(	O
return_value	int
->	O
string	pointer
,	O
string	pointer
->	O
string	pointer
,	O
return_value	int
->	O
length	long
)	O
;	O
string	pointer
->	O
length	long
=	O
string	pointer
->	O
length	long
-	O
return_value	int
->	O
length	long
-	O
1	int
;	O
if	O
(	O
string	pointer
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
string	pointer
->	O
own_string	enum
==	O
DStr_own	int
)	O
free	function
(	O
string	pointer
->	O
string	pointer
)	O
;	O
string	pointer
->	O
string	pointer
=	O
NULL	O
;	O
string	pointer
->	O
own_string	enum
=	O
DStr_not_own	int
;	O
}	O
else	O
{	O
temp_string	pointer
=	O
malloc	function
(	O
string	pointer
->	O
length	long
)	O
;	O
if	O
(	O
temp_string	pointer
==	O
NULL	O
)	O
{	O
dstrfree	function
(	O
return_value	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	function
(	O
temp_string	pointer
,	O
string	pointer
->	O
string	pointer
+	O
return_value	int
->	O
length	long
+	O
1	int
,	O
string	pointer
->	O
length	long
)	O
;	O
if	O
(	O
string	pointer
->	O
own_string	enum
==	O
DStr_own	int
)	O
free	function
(	O
string	pointer
->	O
string	pointer
)	O
;	O
string	pointer
->	O
string	pointer
=	O
temp_string	pointer
;	O
string	pointer
->	O
own_string	enum
=	O
DStr_own	int
;	O
}	O
return	O
return_value	int
;	O
}	O
size_t	long
dstrspn	function
(	O
string	pointer
,	O
charset	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
DStr_string_descriptor	struct
*	O
charset	pointer
;	O
{	O
char	O
charlist	array
[	O
256	int
]	O
;	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
charset	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
bzero	function
(	O
charlist	array
,	O
256	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
charset	pointer
->	O
length	long
;	O
i	long
++	O
)	O
charlist	array
[	O
charset	pointer
->	O
string	pointer
[	O
i	long
]	O
]	O
=	O
-	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
string	pointer
->	O
length	long
;	O
i	long
++	O
)	O
if	O
(	O
charlist	array
[	O
string	pointer
->	O
string	pointer
[	O
i	long
]	O
]	O
==	O
0	int
)	O
return	O
i	long
;	O
return	O
string	pointer
->	O
length	long
;	O
}	O
size_t	long
dstrcspn	function
(	O
string	pointer
,	O
charset	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
DStr_string_descriptor	struct
*	O
charset	pointer
;	O
{	O
return	O
dstrpbrk	function
(	O
string	pointer
,	O
charset	pointer
)	O
-	O
1	int
;	O
}	O
DSTR_SIZE_TYPE	O
dstrstr	function
(	O
string	pointer
,	O
substring	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
DStr_string_descriptor	struct
*	O
substring	pointer
;	O
{	O
unsigned	O
char	O
*	O
curr_string_pos	pointer
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
substring	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
string	pointer
->	O
length	long
<	O
substring	pointer
->	O
length	long
||	O
string	pointer
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
substring	pointer
->	O
length	long
==	O
0	int
)	O
return	O
2	int
;	O
curr_string_pos	pointer
=	O
string	pointer
->	O
string	pointer
;	O
while	O
(	O
curr_string_pos	pointer
+	O
(	O
substring	pointer
->	O
length	long
)	O
-	O
1	int
<	O
string	pointer
->	O
string	pointer
+	O
string	pointer
->	O
length	long
)	O
{	O
unsigned	O
char	O
*	O
curr_substring_pos	pointer
;	O
curr_substring_pos	pointer
=	O
substring	pointer
->	O
string	pointer
;	O
while	O
(	O
*	O
curr_substring_pos	pointer
==	O
*	O
curr_string_pos	pointer
&&	O
curr_substring_pos	pointer
<	O
substring	pointer
->	O
string	pointer
+	O
substring	pointer
->	O
length	long
)	O
{	O
curr_substring_pos	pointer
++	O
;	O
curr_string_pos	pointer
++	O
;	O
}	O
if	O
(	O
(	O
curr_substring_pos	pointer
-	O
substring	pointer
->	O
string	pointer
)	O
==	O
substring	pointer
->	O
length	long
)	O
return	O
(	O
curr_string_pos	pointer
-	O
string	pointer
->	O
string	pointer
)	O
-	O
(	O
curr_substring_pos	pointer
-	O
substring	pointer
->	O
string	pointer
)	O
+	O
1	int
;	O
else	O
curr_string_pos	pointer
=	O
curr_string_pos	pointer
-	O
(	O
curr_substring_pos	pointer
-	O
substring	pointer
->	O
string	pointer
)	O
;	O
curr_string_pos	pointer
++	O
;	O
}	O
return	O
0	int
;	O
}	O
DStr_string_descriptor	struct
*	O
dstrdup	function
(	O
string	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
{	O
DStr_string_descriptor	struct
*	O
return_value	int
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
NULL	O
;	O
return_value	int
=	O
dstrnew	function
(	O
)	O
;	O
if	O
(	O
return_value	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_value	int
->	O
length	long
=	O
string	pointer
->	O
length	long
;	O
if	O
(	O
string	pointer
->	O
length	long
==	O
0	int
)	O
{	O
return_value	int
->	O
string	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
return_value	int
->	O
own_string	enum
=	O
DStr_own	int
;	O
return_value	int
->	O
string	pointer
=	O
malloc	function
(	O
return_value	int
->	O
length	long
)	O
;	O
if	O
(	O
return_value	int
->	O
string	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
return_value	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	function
(	O
return_value	int
->	O
string	pointer
,	O
string	pointer
->	O
string	pointer
,	O
return_value	int
->	O
length	long
)	O
;	O
}	O
return	O
return_value	int
;	O
}	O
DStr_string_descriptor	struct
*	O
dstrdupstr	function
(	O
cstring	pointer
)	O
char	O
*	O
cstring	pointer
;	O
{	O
DStr_string_descriptor	struct
*	O
return_value	int
;	O
return_value	int
=	O
dstrnew	function
(	O
)	O
;	O
if	O
(	O
return_value	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_value	int
->	O
length	long
=	O
strlen	function
(	O
cstring	pointer
)	O
;	O
if	O
(	O
return_value	int
->	O
length	long
==	O
0	int
)	O
{	O
return_value	int
->	O
string	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
return_value	int
->	O
own_string	enum
=	O
DStr_own	int
;	O
return_value	int
->	O
string	pointer
=	O
malloc	function
(	O
return_value	int
->	O
length	long
)	O
;	O
if	O
(	O
return_value	int
->	O
string	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
return_value	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	function
(	O
return_value	int
->	O
string	pointer
,	O
cstring	pointer
,	O
return_value	int
->	O
length	long
)	O
;	O
}	O
return	O
return_value	int
;	O
}	O
char	O
*	O
strdupdstr	function
(	O
string	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
{	O
char	O
*	O
return_value	int
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
NULL	O
;	O
return_value	int
=	O
malloc	function
(	O
string	pointer
->	O
length	long
+	O
1	int
)	O
;	O
if	O
(	O
return_value	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
strncpy	function
(	O
return_value	int
,	O
string	pointer
->	O
string	pointer
,	O
string	pointer
->	O
length	long
)	O
;	O
return_value	int
[	O
string	pointer
->	O
length	long
]	O
=	O
'\0'	O
;	O
return	O
return_value	int
;	O
}	O
int	O
dstrmapstr	function
(	O
descriptor	pointer
,	O
cstring	pointer
,	O
own_string	enum
)	O
DStr_string_descriptor	struct
*	O
descriptor	pointer
;	O
char	O
*	O
cstring	pointer
;	O
DStr_codes	enum
own_string	enum
;	O
{	O
if	O
(	O
DSTR_INVALID	O
(	O
descriptor	pointer
)	O
)	O
return	O
EXIT_FAILURE	int
;	O
if	O
(	O
descriptor	pointer
->	O
own_string	enum
==	O
DStr_own	int
)	O
free	function
(	O
descriptor	pointer
->	O
string	pointer
)	O
;	O
descriptor	pointer
->	O
length	long
=	O
strlen	function
(	O
cstring	pointer
)	O
;	O
descriptor	pointer
->	O
own_string	enum
=	O
own_string	enum
;	O
descriptor	pointer
->	O
string	pointer
=	O
cstring	pointer
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
DStr_string_descriptor	struct
*	O
dstrnew	function
(	O
)	O
{	O
DStr_string_descriptor	struct
*	O
return_value	int
;	O
return_value	int
=	O
malloc	function
(	O
sizeof	O
(	O
DStr_string_descriptor	struct
)	O
)	O
;	O
if	O
(	O
return_value	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_value	int
->	O
length	long
=	O
0	int
;	O
return_value	int
->	O
own_string	enum
=	O
DStr_not_own	int
;	O
return_value	int
->	O
string	pointer
=	O
NULL	O
;	O
return	O
return_value	int
;	O
}	O
void	O
dstrfree	function
(	O
string	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
{	O
if	O
(	O
string	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
string	pointer
->	O
own_string	enum
==	O
DStr_own	int
&&	O
string	pointer
->	O
string	pointer
!=	O
NULL	O
)	O
free	function
(	O
string	pointer
->	O
string	pointer
)	O
;	O
string	pointer
->	O
string	pointer
=	O
NULL	O
;	O
free	function
(	O
string	pointer
)	O
;	O
}	O
DStr_string_descriptor	struct
*	O
dstrmakeown	function
(	O
string	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
{	O
char	O
*	O
new_string	pointer
;	O
if	O
(	O
string	pointer
->	O
length	long
!=	O
0	int
)	O
{	O
new_string	pointer
=	O
malloc	function
(	O
string	pointer
->	O
length	long
)	O
;	O
if	O
(	O
new_string	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memmove	function
(	O
new_string	pointer
,	O
string	pointer
->	O
string	pointer
,	O
string	pointer
->	O
length	long
)	O
;	O
string	pointer
->	O
string	pointer
=	O
new_string	pointer
;	O
}	O
else	O
if	O
(	O
string	pointer
->	O
string	pointer
!=	O
NULL	O
)	O
{	O
new_string	pointer
=	O
malloc	function
(	O
1	int
)	O
;	O
if	O
(	O
new_string	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
new_string	pointer
[	O
0	int
]	O
=	O
'\0'	O
;	O
string	pointer
->	O
string	pointer
=	O
new_string	pointer
;	O
}	O
string	pointer
->	O
own_string	enum
=	O
DStr_own	int
;	O
return	O
string	pointer
;	O
}	O
DStr_string_descriptor	struct
*	O
dstrsubstr	function
(	O
string	pointer
,	O
start	long
,	O
end	long
,	O
length	long
,	O
own_string	enum
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
size_t	long
start	long
;	O
size_t	long
end	long
;	O
size_t	long
length	long
;	O
DStr_codes	enum
own_string	enum
;	O
{	O
DStr_string_descriptor	struct
*	O
return_val	pointer
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
end	long
==	O
0	int
&&	O
length	long
==	O
0	int
)	O
||	O
string	pointer
->	O
length	long
==	O
0	int
)	O
{	O
return_val	pointer
=	O
dstrnew	function
(	O
)	O
;	O
if	O
(	O
return_val	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_val	pointer
->	O
string	pointer
=	O
NULL	O
;	O
return_val	pointer
->	O
length	long
=	O
0	int
;	O
return_val	pointer
->	O
own_string	enum
=	O
DStr_not_own	int
;	O
return	O
return_val	pointer
;	O
}	O
if	O
(	O
length	long
==	O
0	int
)	O
length	long
=	O
end	long
-	O
start	long
+	O
1	int
;	O
else	O
if	O
(	O
end	long
==	O
0	int
)	O
end	long
=	O
start	long
+	O
length	long
-	O
1	int
;	O
else	O
if	O
(	O
start	long
==	O
0	int
)	O
start	long
=	O
end	long
-	O
length	long
+	O
1	int
;	O
if	O
(	O
end	long
<	O
start	long
||	O
start	long
+	O
length	long
-	O
1	int
!=	O
end	long
)	O
return	O
NULL	O
;	O
if	O
(	O
end	long
>	O
string	pointer
->	O
length	long
)	O
return	O
NULL	O
;	O
return_val	pointer
=	O
dstrnew	function
(	O
)	O
;	O
if	O
(	O
return_val	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_val	pointer
->	O
own_string	enum
=	O
own_string	enum
;	O
return_val	pointer
->	O
length	long
=	O
length	long
;	O
if	O
(	O
return_val	pointer
->	O
own_string	enum
==	O
DStr_own	int
)	O
{	O
return_val	pointer
->	O
string	pointer
=	O
malloc	function
(	O
return_val	pointer
->	O
length	long
)	O
;	O
if	O
(	O
return_val	pointer
->	O
string	pointer
==	O
NULL	O
)	O
{	O
dstrfree	function
(	O
return_val	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	function
(	O
return_val	pointer
->	O
string	pointer
,	O
string	pointer
->	O
string	pointer
+	O
(	O
start	long
-	O
1	int
)	O
,	O
return_val	pointer
->	O
length	long
)	O
;	O
}	O
else	O
{	O
return_val	pointer
->	O
string	pointer
=	O
(	O
string	pointer
->	O
string	pointer
+	O
(	O
start	long
-	O
1	int
)	O
)	O
;	O
}	O
return	O
return_val	pointer
;	O
}	O
DStr_string_descriptor	struct
*	O
dstrextend	function
(	O
string	pointer
,	O
len	long
,	O
c	int
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
size_t	long
len	long
;	O
int	O
c	int
;	O
{	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
string	pointer
->	O
length	long
==	O
0	int
)	O
string	pointer
->	O
string	pointer
=	O
malloc	function
(	O
len	long
)	O
;	O
else	O
string	pointer
->	O
string	pointer
=	O
realloc	function
(	O
string	pointer
->	O
string	pointer
,	O
string	pointer
->	O
length	long
+	O
len	long
)	O
;	O
if	O
(	O
string	pointer
->	O
string	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memset	function
(	O
string	pointer
->	O
string	pointer
+	O
string	pointer
->	O
length	long
,	O
c	int
,	O
len	long
)	O
;	O
string	pointer
->	O
length	long
+=	O
len	long
;	O
return	O
string	pointer
;	O
}	O
int	O
dstrsplit	function
(	O
string	pointer
,	O
delimiter	pointer
,	O
return_array	pointer
,	O
return_length	pointer
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
DStr_string_descriptor	struct
*	O
delimiter	pointer
;	O
DStr_string_descriptor	struct
*	O
*	O
*	O
return_array	pointer
;	O
int	O
*	O
return_length	pointer
;	O
{	O
DStr_string_descriptor	struct
*	O
remaining_string	pointer
;	O
int	O
next_pos	int
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
delimiter	pointer
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
*	O
return_length	pointer
=	O
0	int
;	O
*	O
return_array	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
*	O
return_array	pointer
)	O
)	O
;	O
if	O
(	O
*	O
return_array	pointer
==	O
NULL	O
)	O
return	O
DSTR_EMEMORY	O
;	O
remaining_string	pointer
=	O
dstrsubstr	function
(	O
string	pointer
,	O
1	int
,	O
0	int
,	O
string	pointer
->	O
length	long
,	O
DStr_not_own	int
)	O
;	O
next_pos	int
=	O
dstrstr	function
(	O
remaining_string	pointer
,	O
delimiter	pointer
)	O
;	O
while	O
(	O
next_pos	int
>	O
0	int
)	O
{	O
(	O
*	O
return_length	pointer
)	O
++	O
;	O
*	O
return_array	pointer
=	O
realloc	function
(	O
*	O
return_array	pointer
,	O
(	O
*	O
return_length	pointer
)	O
*	O
sizeof	O
(	O
*	O
return_array	pointer
)	O
)	O
;	O
if	O
(	O
*	O
return_array	pointer
==	O
NULL	O
)	O
return	O
DSTR_EMEMORY	O
;	O
(	O
*	O
return_array	pointer
)	O
[	O
*	O
return_length	pointer
-	O
1	int
]	O
=	O
dstrsubstr	function
(	O
remaining_string	pointer
,	O
1	int
,	O
next_pos	int
-	O
1	int
,	O
0	int
,	O
DStr_not_own	int
)	O
;	O
if	O
(	O
(	O
*	O
return_array	pointer
)	O
[	O
*	O
return_length	pointer
-	O
1	int
]	O
==	O
NULL	O
)	O
return	O
DSTR_EMEMORY	O
;	O
remaining_string	pointer
->	O
string	pointer
+=	O
(	O
next_pos	int
-	O
1	int
)	O
+	O
delimiter	pointer
->	O
length	long
;	O
remaining_string	pointer
->	O
length	long
-=	O
(	O
next_pos	int
-	O
1	int
)	O
+	O
delimiter	pointer
->	O
length	long
;	O
next_pos	int
=	O
dstrstr	function
(	O
remaining_string	pointer
,	O
delimiter	pointer
)	O
;	O
}	O
(	O
*	O
return_length	pointer
)	O
++	O
;	O
*	O
return_array	pointer
=	O
realloc	function
(	O
*	O
return_array	pointer
,	O
(	O
*	O
return_length	pointer
)	O
*	O
sizeof	O
(	O
*	O
return_array	pointer
)	O
)	O
;	O
if	O
(	O
*	O
return_array	pointer
==	O
NULL	O
)	O
return	O
DSTR_EMEMORY	O
;	O
if	O
(	O
remaining_string	pointer
->	O
length	long
>	O
0	int
)	O
(	O
*	O
return_array	pointer
)	O
[	O
*	O
return_length	pointer
-	O
1	int
]	O
=	O
dstrsubstr	function
(	O
remaining_string	pointer
,	O
1	int
,	O
0	int
,	O
remaining_string	pointer
->	O
length	long
,	O
DStr_not_own	int
)	O
;	O
else	O
(	O
*	O
return_array	pointer
)	O
[	O
*	O
return_length	pointer
-	O
1	int
]	O
=	O
dstrdupstr	function
(	O
""	pointer
)	O
;	O
if	O
(	O
(	O
*	O
return_array	pointer
)	O
[	O
*	O
return_length	pointer
-	O
1	int
]	O
==	O
NULL	O
)	O
return	O
DSTR_EMEMORY	O
;	O
dstrfree	function
(	O
remaining_string	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
BIGNUMBER	long
dstrtonum	function
(	O
string	pointer
,	O
remainder	pointer
,	O
base	int
)	O
DStr_string_descriptor	struct
*	O
string	pointer
;	O
DStr_string_descriptor	struct
*	O
*	O
remainder	pointer
;	O
int	O
base	int
;	O
{	O
BIGNUMBER	long
return_val	pointer
;	O
char	O
*	O
temp_string	pointer
;	O
char	O
*	O
temp_remainder	pointer
;	O
if	O
(	O
remainder	pointer
!=	O
NULL	O
)	O
*	O
remainder	pointer
=	O
string	pointer
;	O
temp_string	pointer
=	O
malloc	function
(	O
string	pointer
->	O
length	long
+	O
1	int
)	O
;	O
if	O
(	O
temp_string	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
memcpy	function
(	O
temp_string	pointer
,	O
string	pointer
->	O
string	pointer
,	O
string	pointer
->	O
length	long
)	O
;	O
temp_string	pointer
[	O
string	pointer
->	O
length	long
]	O
=	O
'\0'	O
;	O
return_val	pointer
=	O
STRTOBIGNUMBER	O
(	O
temp_string	pointer
,	O
&	O
temp_remainder	pointer
,	O
base	int
)	O
;	O
if	O
(	O
*	O
temp_remainder	pointer
==	O
'\0'	O
)	O
{	O
if	O
(	O
temp_remainder	pointer
-	O
temp_string	pointer
==	O
string	pointer
->	O
length	long
)	O
{	O
if	O
(	O
remainder	pointer
!=	O
NULL	O
)	O
*	O
remainder	pointer
=	O
NULL	O
;	O
free	function
(	O
temp_string	pointer
)	O
;	O
return	O
return_val	pointer
;	O
}	O
}	O
if	O
(	O
remainder	pointer
!=	O
NULL	O
)	O
{	O
*	O
remainder	pointer
=	O
dstrnew	function
(	O
)	O
;	O
if	O
(	O
*	O
remainder	pointer
==	O
NULL	O
)	O
{	O
*	O
remainder	pointer
=	O
string	pointer
;	O
free	function
(	O
temp_string	pointer
)	O
;	O
return	O
return_val	pointer
;	O
}	O
(	O
*	O
remainder	pointer
)	O
->	O
length	long
=	O
string	pointer
->	O
length	long
-	O
(	O
temp_remainder	pointer
-	O
temp_string	pointer
)	O
;	O
(	O
*	O
remainder	pointer
)	O
->	O
string	pointer
=	O
string	pointer
->	O
string	pointer
+	O
(	O
temp_remainder	pointer
-	O
temp_string	pointer
)	O
;	O
}	O
return	O
return_val	pointer
;	O
}	O
