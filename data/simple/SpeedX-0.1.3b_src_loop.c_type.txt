int	O
player	int
;	O
XEvent	union
XEv	union
;	O
int	O
inv_radius	int
=	O
0	int
;	O
int	O
counter	int
=	O
0	int
;	O
int	O
drawing	int
=	O
1	int
;	O
int	O
_trace2	array
[	O
]	O
=	O
{	O
30	int
,	O
40	int
,	O
60	int
,	O
40	int
,	O
30	int
,	O
50	int
,	O
60	int
,	O
30	int
,	O
20	int
,	O
30	int
,	O
20	int
,	O
20	int
,	O
10	int
,	O
40	int
,	O
20	int
,	O
50	int
,	O
30	int
,	O
20	int
,	O
30	int
,	O
40	int
,	O
30	int
,	O
50	int
,	O
60	int
,	O
30	int
,	O
20	int
,	O
30	int
,	O
20	int
,	O
20	int
,	O
30	int
,	O
40	int
,	O
20	int
,	O
50	int
}	O
;	O
int	O
_trace	array
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
-	O
3	int
,	O
6	int
,	O
-	O
5	int
,	O
4	int
,	O
-	O
3	int
,	O
0	int
,	O
0	int
,	O
-	O
4	int
,	O
-	O
5	int
,	O
3	int
,	O
0	int
,	O
-	O
5	int
,	O
3	int
,	O
-	O
5	int
,	O
3	int
,	O
0	int
,	O
-	O
4	int
,	O
7	int
,	O
0	int
,	O
-	O
5	int
,	O
2	int
,	O
0	int
,	O
-	O
5	int
,	O
0	int
,	O
-	O
5	int
,	O
5	int
,	O
-	O
2	int
,	O
0	int
,	O
-	O
1	int
,	O
0	int
}	O
;	O
int	O
road_length	int
=	O
LENGTH	int
;	O
float	O
gros	float
=	O
1.4	int
;	O
int	O
End	int
=	O
0	int
;	O
extern	O
int	O
CompletionType	int
;	O
extern	O
int	O
mikmod	int
;	O
extern	O
World	struct
*	O
world	pointer
;	O
unsigned	O
int	O
touche	int
;	O
int	O
loop	function
(	O
Display	struct
*	O
dpy	pointer
)	O
{	O
int	O
finish	int
=	O
0	int
;	O
unsigned	O
int	O
etat	int
;	O
int	O
num_dpy	int
=	O
-	O
1	int
;	O
int	O
i	int
;	O
int	O
refresh_ready	int
;	O
float	O
g	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NB_ADV	int
;	O
i	int
++	O
)	O
world	pointer
->	O
mask	array
[	O
i	int
]	O
=	O
0	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Player : %d\n"	pointer
,	O
player	int
)	O
;	O
if	O
(	O
DEBUG	int
)	O
{	O
signal	function
(	O
SIGALRM	int
,	O
fps	function
)	O
;	O
alarm	function
(	O
10	int
)	O
;	O
}	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
menu	function
(	O
screen_buffer	pointer
,	O
dpy	pointer
)	O
;	O
start_world	function
(	O
)	O
;	O
while	O
(	O
!	O
finish	int
)	O
{	O
if	O
(	O
refresh_ready	int
==	O
CAN_REFRESH	int
)	O
{	O
counter	int
++	O
;	O
refresh_ready	int
=	O
REFRESH_BUSY	int
;	O
inv_radius	int
=	O
world	pointer
->	O
trace	array
[	O
(	O
world	pointer
->	O
Sorting	array
[	O
player	int
]	O
.	O
ypos	int
>>	O
6	int
)	O
%	O
(	O
64	int
*	O
road_length	int
)	O
]	O
;	O
refresh	function
(	O
screen_buffer	pointer
,	O
sky	pointer
,	O
inv_radius	int
,	O
player	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NB_ADV	int
;	O
i	int
++	O
)	O
{	O
int	O
sens	int
=	O
0	int
;	O
if	O
(	O
world	pointer
->	O
Sorting	array
[	O
i	int
]	O
.	O
yvit	int
>=	O
0	int
)	O
sens	int
=	O
1	int
;	O
else	O
if	O
(	O
world	pointer
->	O
Sorting	array
[	O
i	int
]	O
.	O
yvit	int
<=	O
0	int
)	O
sens	int
=	O
-	O
1	int
;	O
g	int
=	O
(	O
(	O
world	pointer
->	O
Sorting	array
[	O
i	int
]	O
.	O
ypos	int
-	O
world	pointer
->	O
Sorting	array
[	O
player	int
]	O
.	O
ypos	int
+	O
(	O
world	pointer
->	O
Sorting	array
[	O
player	int
]	O
.	O
yvit	int
>>	O
5	int
)	O
+	O
CAMERA	int
)	O
)	O
%	O
(	O
(	O
64	int
*	O
LENGTH	int
)	O
<<	O
6	int
)	O
;	O
g	int
=	O
(	O
g	int
/	O
HVISION	int
)	O
+	O
1	int
;	O
if	O
(	O
g	int
>	O
1.2	int
)	O
Draw_car	function
(	O
screen_buffer	pointer
,	O
world	pointer
->	O
num_veh	int
,	O
(	O
(	O
world	pointer
->	O
Sorting	array
[	O
i	int
]	O
.	O
xvit	int
>>	O
3	int
)	O
-	O
(	O
(	O
world	pointer
->	O
Sorting	array
[	O
i	int
]	O
.	O
xpos	int
-	O
world	pointer
->	O
Sorting	array
[	O
player	int
]	O
.	O
xpos	int
)	O
/	O
64	int
)	O
)	O
*	O
sens	int
,	O
world	pointer
->	O
Sorting	array
[	O
i	int
]	O
.	O
xpos	int
,	O
g	int
)	O
;	O
}	O
if	O
(	O
dble	int
==	O
0	int
)	O
{	O
aff	function
(	O
win	long
)	O
;	O
}	O
else	O
aff2	function
(	O
win	long
)	O
;	O
}	O
if	O
(	O
!	O
mit_shm	int
)	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
while	O
(	O
XPending	function
(	O
dpy	pointer
)	O
)	O
{	O
XNextEvent	function
(	O
dpy	pointer
,	O
&	O
XEv	union
)	O
;	O
if	O
(	O
mit_shm	int
)	O
{	O
if	O
(	O
XEv	union
.	O
type	pointer
==	O
CompletionType	int
)	O
{	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
break	O
;	O
}	O
}	O
touche	int
=	O
XEv	union
.	O
xkey	struct
.	O
keycode	int
;	O
etat	int
=	O
XEv	union
.	O
xkey	struct
.	O
state	pointer
;	O
if	O
(	O
XEv	union
.	O
xkey	struct
.	O
display	pointer
==	O
dpy	pointer
)	O
num_dpy	int
=	O
0	int
;	O
else	O
num_dpy	int
=	O
1	int
;	O
switch	O
(	O
XEv	union
.	O
xkey	struct
.	O
type	pointer
)	O
{	O
case	O
KeyPress	int
:	O
if	O
(	O
touche	int
==	O
KEY_UP	char
)	O
{	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
&	O
(	O
~	O
DOWN	int
)	O
;	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
|	O
UP	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_DOWN	char
)	O
{	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
&	O
(	O
~	O
UP	int
)	O
;	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
|	O
DOWN	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_RIGHT	char
)	O
{	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
&	O
(	O
~	O
LEFT	int
)	O
;	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
|	O
RIGHT	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_LEFT	char
)	O
{	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
&	O
(	O
~	O
RIGHT	int
)	O
;	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
|	O
LEFT	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_UP2	char
)	O
{	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
&	O
(	O
~	O
DOWN	int
)	O
;	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
|	O
UP	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_DOWN2	char
)	O
{	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
&	O
(	O
~	O
UP	int
)	O
;	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
|	O
DOWN	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_RIGHT2	char
)	O
{	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
&	O
(	O
~	O
LEFT	int
)	O
;	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
|	O
RIGHT	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_LEFT2	char
)	O
{	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
&	O
(	O
~	O
RIGHT	int
)	O
;	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
|	O
LEFT	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_ESC	char
)	O
{	O
perror	function
(	O
"Esc : Menu"	pointer
)	O
;	O
}	O
break	O
;	O
case	O
KeyRelease	int
:	O
if	O
(	O
touche	int
==	O
KEY_UP	char
)	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
&	O
(	O
~	O
UP	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_DOWN	char
)	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
&	O
(	O
~	O
DOWN	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_RIGHT	char
)	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
&	O
(	O
~	O
RIGHT	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_LEFT	char
)	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
player	int
]	O
&	O
(	O
~	O
LEFT	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_UP2	char
)	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
&	O
(	O
~	O
UP	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_DOWN2	char
)	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
&	O
(	O
~	O
DOWN	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_RIGHT2	char
)	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
&	O
(	O
~	O
RIGHT	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_LEFT2	char
)	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
=	O
world	pointer
->	O
mask	array
[	O
1	int
]	O
&	O
(	O
~	O
LEFT	int
)	O
;	O
break	O
;	O
if	O
(	O
touche	int
==	O
KEY_ESC	char
)	O
{	O
perror	function
(	O
"Esc"	pointer
)	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
(	O
touche	int
==	O
KEY_QUIT	char
)	O
||	O
(	O
world	pointer
->	O
finish	int
)	O
)	O
{	O
finish	int
=	O
1	int
;	O
if	O
(	O
player	int
==	O
0	int
)	O
world	pointer
->	O
finish	int
=	O
1	int
;	O
}	O
}	O
}	O
printf	function
(	O
"Position = %d\n"	pointer
,	O
world	pointer
->	O
Sorting	array
[	O
0	int
]	O
.	O
position	short
)	O
;	O
if	O
(	O
world	pointer
->	O
finish	int
==	O
1	int
)	O
{	O
printf	function
(	O
"The server quit the game.\n"	pointer
)	O
;	O
printf	function
(	O
"Everybody must quit !\n"	pointer
)	O
;	O
}	O
stop_world	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
auto_run	function
(	O
void	O
)	O
{	O
int	O
refresh_ready	int
;	O
world	pointer
->	O
Sorting	array
[	O
0	int
]	O
.	O
autopilot	int
=	O
1	int
;	O
start_world	function
(	O
)	O
;	O
if	O
(	O
DEBUG	int
)	O
{	O
signal	function
(	O
SIGALRM	int
,	O
fps	function
)	O
;	O
alarm	function
(	O
10	int
)	O
;	O
}	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
refresh_ready	int
==	O
CAN_REFRESH	int
)	O
{	O
refresh_ready	int
=	O
REFRESH_BUSY	int
;	O
counter	int
++	O
;	O
inv_radius	int
=	O
world	pointer
->	O
trace	array
[	O
(	O
world	pointer
->	O
Sorting	array
[	O
0	int
]	O
.	O
ypos	int
>>	O
6	int
)	O
%	O
(	O
64	int
*	O
road_length	int
)	O
]	O
;	O
refresh	function
(	O
screen_buffer	pointer
,	O
sky	pointer
,	O
inv_radius	int
,	O
0	int
)	O
;	O
Draw_car	function
(	O
screen_buffer	pointer
,	O
world	pointer
->	O
num_veh	int
,	O
world	pointer
->	O
Sorting	array
[	O
0	int
]	O
.	O
xvit	int
>>	O
3	int
,	O
world	pointer
->	O
Sorting	array
[	O
0	int
]	O
.	O
xpos	int
,	O
gros	float
)	O
;	O
fog	function
(	O
255	int
,	O
255	int
,	O
255	int
)	O
;	O
if	O
(	O
dble	int
==	O
0	int
)	O
aff	function
(	O
win	long
)	O
;	O
else	O
aff2	function
(	O
win	long
)	O
;	O
if	O
(	O
!	O
mit_shm	int
)	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
while	O
(	O
XPending	function
(	O
display	pointer
)	O
)	O
{	O
XNextEvent	function
(	O
display	pointer
,	O
&	O
XEv	union
)	O
;	O
if	O
(	O
mit_shm	int
)	O
{	O
if	O
(	O
XEv	union
.	O
type	pointer
==	O
CompletionType	int
)	O
{	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
}	O
stop_world	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
