static	O
unsigned	O
int	O
hash_size	array
[	O
]	O
=	O
{	O
37	int
,	O
101	int
,	O
229	int
,	O
487	int
,	O
1009	int
,	O
2039	int
,	O
4091	int
,	O
8191	int
,	O
16411	int
}	O
;	O
static	O
unsigned	O
int	O
max_rehash	int
=	O
sizeof	O
(	O
hash_size	array
)	O
/	O
sizeof	O
(	O
hash_size	array
[	O
0	int
]	O
)	O
;	O
struct	O
_mu_assoc_elem	struct
{	O
char	O
*	O
name	pointer
;	O
struct	O
_mu_assoc_elem	struct
*	O
next	pointer
,	O
*	O
prev	pointer
;	O
int	O
mark	int
:	O
1	int
;	O
char	O
*	O
data	pointer
;	O
}	O
;	O
struct	O
_mu_assoc	struct
{	O
int	O
flags	int
;	O
unsigned	O
int	O
hash_num	int
;	O
struct	O
_mu_assoc_elem	struct
*	O
*	O
tab	pointer
;	O
struct	O
_mu_assoc_elem	struct
*	O
head	pointer
,	O
*	O
tail	pointer
;	O
mu_deallocator_t	pointer
free	function
;	O
mu_iterator_t	pointer
itr	pointer
;	O
}	O
;	O
static	O
void	O
assoc_elem_unlink	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
int	O
idx	int
)	O
{	O
struct	O
_mu_assoc_elem	struct
*	O
p	pointer
;	O
p	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
prev	pointer
;	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
next	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
next	pointer
;	O
else	O
assoc	pointer
->	O
head	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
next	pointer
;	O
p	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
next	pointer
;	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
prev	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
prev	pointer
;	O
else	O
assoc	pointer
->	O
tail	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
prev	pointer
;	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
prev	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
next	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
assoc_elem_link	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
int	O
idx	int
)	O
{	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
next	pointer
=	O
NULL	O
;	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
prev	pointer
=	O
assoc	pointer
->	O
tail	pointer
;	O
if	O
(	O
assoc	pointer
->	O
tail	pointer
)	O
assoc	pointer
->	O
tail	pointer
->	O
next	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
;	O
else	O
assoc	pointer
->	O
head	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
;	O
assoc	pointer
->	O
tail	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
;	O
}	O
static	O
unsigned	O
hash	function
(	O
const	O
char	O
*	O
name	pointer
,	O
unsigned	O
long	O
hash_num	int
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
name	pointer
;	O
name	pointer
++	O
)	O
{	O
i	int
<<=	O
1	int
;	O
i	int
^=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
name	pointer
;	O
}	O
return	O
i	int
%	O
hash_size	array
[	O
hash_num	int
]	O
;	O
}	O
;	O
static	O
int	O
assoc_find_slot	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
install	pointer
,	O
unsigned	O
*	O
slot	pointer
)	O
;	O
static	O
int	O
assoc_rehash	function
(	O
mu_assoc_t	pointer
assoc	pointer
)	O
{	O
struct	O
_mu_assoc_elem	struct
*	O
*	O
old_tab	pointer
=	O
assoc	pointer
->	O
tab	pointer
;	O
struct	O
_mu_assoc_elem	struct
*	O
*	O
new_tab	pointer
;	O
unsigned	O
int	O
i	int
;	O
unsigned	O
int	O
hash_num	int
=	O
assoc	pointer
->	O
hash_num	int
+	O
1	int
;	O
if	O
(	O
hash_num	int
>=	O
max_rehash	int
)	O
return	O
MU_ERR_BUFSPACE	O
;	O
new_tab	pointer
=	O
calloc	function
(	O
hash_size	array
[	O
hash_num	int
]	O
,	O
sizeof	O
(	O
new_tab	pointer
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
new_tab	pointer
)	O
return	O
errno	O
;	O
assoc	pointer
->	O
tab	pointer
=	O
new_tab	pointer
;	O
if	O
(	O
old_tab	pointer
)	O
{	O
assoc	pointer
->	O
hash_num	int
=	O
hash_num	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array
[	O
hash_num	int
-	O
1	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
old_tab	pointer
[	O
i	int
]	O
)	O
{	O
int	O
tmp	int
;	O
unsigned	O
slot	pointer
;	O
int	O
rc	int
=	O
assoc_find_slot	function
(	O
assoc	pointer
,	O
old_tab	pointer
[	O
i	int
]	O
->	O
name	pointer
,	O
&	O
tmp	int
,	O
&	O
slot	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
assoc	pointer
->	O
tab	pointer
[	O
slot	pointer
]	O
=	O
old_tab	pointer
[	O
i	int
]	O
;	O
}	O
}	O
free	function
(	O
old_tab	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
assoc_free_elem	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
unsigned	O
idx	int
)	O
{	O
if	O
(	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
)	O
{	O
assoc_elem_unlink	function
(	O
assoc	pointer
,	O
idx	int
)	O
;	O
if	O
(	O
assoc	pointer
->	O
free	function
)	O
assoc	pointer
->	O
free	function
(	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
data	pointer
)	O
;	O
if	O
(	O
!	O
(	O
assoc	pointer
->	O
flags	int
&	O
MU_ASSOC_COPY_KEY	int
)	O
)	O
free	function
(	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
name	pointer
)	O
;	O
free	function
(	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
)	O
;	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
=	O
NULL	O
;	O
}	O
}	O
static	O
int	O
assoc_remove	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
unsigned	O
idx	int
)	O
{	O
unsigned	O
int	O
i	int
,	O
j	int
,	O
r	int
;	O
if	O
(	O
!	O
(	O
idx	int
<	O
hash_size	array
[	O
assoc	pointer
->	O
hash_num	int
]	O
)	O
)	O
return	O
EINVAL	int
;	O
mu_iterator_delitem	function
(	O
assoc	pointer
->	O
itr	pointer
,	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
)	O
;	O
assoc_free_elem	function
(	O
assoc	pointer
,	O
idx	int
)	O
;	O
for	O
(	O
i	int
=	O
idx	int
;	O
;	O
)	O
{	O
assoc	pointer
->	O
tab	pointer
[	O
i	int
]	O
=	O
NULL	O
;	O
j	int
=	O
i	int
;	O
do	O
{	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array
[	O
assoc	pointer
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
!	O
assoc	pointer
->	O
tab	pointer
[	O
i	int
]	O
)	O
return	O
0	int
;	O
r	int
=	O
hash	function
(	O
assoc	pointer
->	O
tab	pointer
[	O
i	int
]	O
->	O
name	pointer
,	O
assoc	pointer
->	O
hash_num	int
)	O
;	O
}	O
while	O
(	O
(	O
j	int
<	O
r	int
&&	O
r	int
<=	O
i	int
)	O
||	O
(	O
i	int
<	O
j	int
&&	O
j	int
<	O
r	int
)	O
||	O
(	O
r	int
<=	O
i	int
&&	O
i	int
<	O
j	int
)	O
)	O
;	O
if	O
(	O
j	int
!=	O
i	int
)	O
assoc	pointer
->	O
tab	pointer
[	O
j	int
]	O
=	O
assoc	pointer
->	O
tab	pointer
[	O
i	int
]	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
assoc_find_slot	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
install	pointer
,	O
unsigned	O
*	O
slot	pointer
)	O
{	O
int	O
rc	int
;	O
unsigned	O
i	int
,	O
pos	int
;	O
struct	O
_mu_assoc_elem	struct
*	O
elem	pointer
;	O
if	O
(	O
!	O
assoc	pointer
->	O
tab	pointer
)	O
{	O
if	O
(	O
install	pointer
)	O
{	O
rc	int
=	O
assoc_rehash	function
(	O
assoc	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
return	O
MU_ERR_NOENT	O
;	O
}	O
pos	int
=	O
hash	function
(	O
name	pointer
,	O
assoc	pointer
->	O
hash_num	int
)	O
;	O
for	O
(	O
i	int
=	O
pos	int
;	O
(	O
elem	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
i	int
]	O
)	O
;	O
)	O
{	O
if	O
(	O
name_cmp	O
(	O
assoc	pointer
,	O
elem	pointer
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
install	pointer
)	O
*	O
install	pointer
=	O
0	int
;	O
*	O
slot	pointer
=	O
i	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array
[	O
assoc	pointer
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
pos	int
)	O
break	O
;	O
}	O
if	O
(	O
!	O
install	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
elem	pointer
)	O
{	O
*	O
slot	pointer
=	O
i	int
;	O
*	O
install	pointer
=	O
1	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
assoc_rehash	function
(	O
assoc	pointer
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
return	O
assoc_find_slot	function
(	O
assoc	pointer
,	O
name	pointer
,	O
install	pointer
,	O
slot	pointer
)	O
;	O
}	O
int	O
mu_assoc_create	function
(	O
mu_assoc_t	pointer
*	O
passoc	pointer
,	O
int	O
flags	int
)	O
{	O
mu_assoc_t	pointer
assoc	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
assoc	pointer
)	O
)	O
;	O
if	O
(	O
!	O
assoc	pointer
)	O
return	O
ENOMEM	int
;	O
assoc	pointer
->	O
flags	int
=	O
flags	int
;	O
*	O
passoc	pointer
=	O
assoc	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_assoc_clear	function
(	O
mu_assoc_t	pointer
assoc	pointer
)	O
{	O
unsigned	O
i	int
,	O
hs	int
;	O
if	O
(	O
!	O
assoc	pointer
||	O
!	O
assoc	pointer
->	O
tab	pointer
)	O
return	O
;	O
hs	int
=	O
hash_size	array
[	O
assoc	pointer
->	O
hash_num	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hs	int
;	O
i	int
++	O
)	O
assoc_free_elem	function
(	O
assoc	pointer
,	O
i	int
)	O
;	O
}	O
void	O
mu_assoc_destroy	function
(	O
mu_assoc_t	pointer
*	O
passoc	pointer
)	O
{	O
mu_assoc_t	pointer
assoc	pointer
;	O
if	O
(	O
passoc	pointer
&&	O
(	O
assoc	pointer
=	O
*	O
passoc	pointer
)	O
!=	O
NULL	O
)	O
{	O
mu_assoc_clear	function
(	O
assoc	pointer
)	O
;	O
free	function
(	O
assoc	pointer
->	O
tab	pointer
)	O
;	O
free	function
(	O
assoc	pointer
)	O
;	O
*	O
passoc	pointer
=	O
NULL	O
;	O
}	O
}	O
int	O
mu_assoc_set_destroy_item	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
mu_deallocator_t	pointer
fn	pointer
)	O
{	O
if	O
(	O
!	O
assoc	pointer
)	O
return	O
EINVAL	int
;	O
assoc	pointer
->	O
free	function
=	O
fn	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_lookup	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
dataptr	pointer
)	O
{	O
int	O
rc	int
;	O
unsigned	O
idx	int
;	O
if	O
(	O
!	O
assoc	pointer
||	O
!	O
name	pointer
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
assoc_find_slot	function
(	O
assoc	pointer
,	O
name	pointer
,	O
NULL	O
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
dataptr	pointer
)	O
*	O
(	O
void	O
*	O
*	O
)	O
dataptr	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
data	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
void	O
*	O
mu_assoc_get	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
rc	int
;	O
unsigned	O
idx	int
;	O
if	O
(	O
!	O
assoc	pointer
||	O
!	O
name	pointer
)	O
return	O
NULL	O
;	O
rc	int
=	O
assoc_find_slot	function
(	O
assoc	pointer
,	O
name	pointer
,	O
NULL	O
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
return	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
data	pointer
;	O
return	O
NULL	O
;	O
}	O
int	O
mu_assoc_install	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
value	pointer
)	O
{	O
int	O
rc	int
;	O
int	O
inst	int
;	O
unsigned	O
idx	int
;	O
struct	O
_mu_assoc_elem	struct
*	O
elem	pointer
;	O
if	O
(	O
!	O
assoc	pointer
||	O
!	O
name	pointer
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
assoc_find_slot	function
(	O
assoc	pointer
,	O
name	pointer
,	O
&	O
inst	int
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
inst	int
)	O
return	O
MU_ERR_EXISTS	O
;	O
elem	pointer
=	O
malloc	function
(	O
sizeof	O
*	O
elem	pointer
)	O
;	O
if	O
(	O
!	O
elem	pointer
)	O
return	O
errno	O
;	O
if	O
(	O
assoc	pointer
->	O
flags	int
&	O
MU_ASSOC_COPY_KEY	int
)	O
elem	pointer
->	O
name	pointer
=	O
(	O
char	O
*	O
)	O
name	pointer
;	O
else	O
{	O
elem	pointer
->	O
name	pointer
=	O
strdup	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
elem	pointer
->	O
name	pointer
)	O
{	O
int	O
rc	int
=	O
errno	O
;	O
free	function
(	O
elem	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
elem	pointer
->	O
data	pointer
=	O
value	pointer
;	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
=	O
elem	pointer
;	O
assoc_elem_link	function
(	O
assoc	pointer
,	O
idx	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_lookup_ref	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
dataptr	pointer
)	O
{	O
int	O
rc	int
;	O
unsigned	O
idx	int
;	O
if	O
(	O
!	O
assoc	pointer
||	O
!	O
name	pointer
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
assoc_find_slot	function
(	O
assoc	pointer
,	O
name	pointer
,	O
NULL	O
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
dataptr	pointer
)	O
*	O
(	O
void	O
*	O
*	O
)	O
dataptr	pointer
=	O
&	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
data	pointer
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_assoc_install_ref2	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
ret_val	pointer
,	O
const	O
char	O
*	O
*	O
ret_name	pointer
)	O
{	O
int	O
rc	int
;	O
int	O
inst	int
;	O
unsigned	O
idx	int
;	O
if	O
(	O
!	O
assoc	pointer
||	O
!	O
name	pointer
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
assoc_find_slot	function
(	O
assoc	pointer
,	O
name	pointer
,	O
&	O
inst	int
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
inst	int
)	O
{	O
struct	O
_mu_assoc_elem	struct
*	O
elem	pointer
;	O
elem	pointer
=	O
malloc	function
(	O
sizeof	O
*	O
elem	pointer
)	O
;	O
if	O
(	O
!	O
elem	pointer
)	O
return	O
errno	O
;	O
if	O
(	O
assoc	pointer
->	O
flags	int
&	O
MU_ASSOC_COPY_KEY	int
)	O
elem	pointer
->	O
name	pointer
=	O
(	O
char	O
*	O
)	O
name	pointer
;	O
else	O
{	O
elem	pointer
->	O
name	pointer
=	O
strdup	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
elem	pointer
->	O
name	pointer
)	O
{	O
int	O
rc	int
=	O
errno	O
;	O
free	function
(	O
elem	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
elem	pointer
->	O
data	pointer
=	O
NULL	O
;	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
=	O
elem	pointer
;	O
assoc_elem_link	function
(	O
assoc	pointer
,	O
idx	int
)	O
;	O
}	O
*	O
(	O
void	O
*	O
*	O
)	O
ret_val	pointer
=	O
&	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
data	pointer
;	O
if	O
(	O
ret_name	pointer
)	O
*	O
ret_name	pointer
=	O
assoc	pointer
->	O
tab	pointer
[	O
idx	int
]	O
->	O
name	pointer
;	O
return	O
inst	int
?	O
0	int
:	O
MU_ERR_EXISTS	O
;	O
}	O
int	O
mu_assoc_install_ref	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
pval	pointer
)	O
{	O
return	O
mu_assoc_install_ref2	function
(	O
assoc	pointer
,	O
name	pointer
,	O
pval	pointer
,	O
NULL	O
)	O
;	O
}	O
int	O
mu_assoc_remove	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
int	O
rc	int
;	O
unsigned	O
idx	int
;	O
if	O
(	O
!	O
assoc	pointer
||	O
!	O
name	pointer
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
assoc_find_slot	function
(	O
assoc	pointer
,	O
name	pointer
,	O
NULL	O
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
assoc_remove	function
(	O
assoc	pointer
,	O
idx	int
)	O
;	O
}	O
struct	O
assoc_iterator	struct
{	O
mu_assoc_t	pointer
assoc	pointer
;	O
struct	O
_mu_assoc_elem	struct
*	O
elem	pointer
;	O
int	O
backwards	int
;	O
}	O
;	O
static	O
int	O
itrctl	pointer
(	O
void	O
*	O
owner	pointer
,	O
enum	O
mu_itrctl_req	enum
req	enum
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
assoc_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
mu_assoc_t	pointer
assoc	pointer
=	O
itr	pointer
->	O
assoc	pointer
;	O
switch	O
(	O
req	enum
)	O
{	O
case	O
mu_itrctl_tell	int
:	O
{	O
size_t	long
n	int
=	O
0	int
;	O
struct	O
_mu_assoc_elem	struct
*	O
elem	pointer
;	O
for	O
(	O
elem	pointer
=	O
itr	pointer
->	O
elem	pointer
;	O
elem	pointer
;	O
elem	pointer
=	O
elem	pointer
->	O
prev	pointer
)	O
n	int
++	O
;	O
*	O
(	O
size_t	long
*	O
)	O
arg	pointer
=	O
n	int
;	O
}	O
break	O
;	O
case	O
mu_itrctl_delete	int
:	O
case	O
mu_itrctl_delete_nd	int
:	O
if	O
(	O
itr	pointer
->	O
elem	pointer
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array
[	O
assoc	pointer
->	O
hash_num	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
assoc	pointer
->	O
tab	pointer
[	O
i	int
]	O
==	O
itr	pointer
->	O
elem	pointer
)	O
{	O
if	O
(	O
req	enum
==	O
mu_itrctl_delete_nd	int
)	O
assoc	pointer
->	O
tab	pointer
[	O
i	int
]	O
->	O
data	pointer
=	O
NULL	O
;	O
assoc_remove	function
(	O
assoc	pointer
,	O
i	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
}	O
return	O
MU_ERR_NOENT	O
;	O
case	O
mu_itrctl_replace	int
:	O
case	O
mu_itrctl_replace_nd	int
:	O
if	O
(	O
itr	pointer
->	O
elem	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
req	enum
==	O
mu_itrctl_replace	int
&&	O
assoc	pointer
->	O
free	function
)	O
assoc	pointer
->	O
free	function
(	O
itr	pointer
->	O
elem	pointer
->	O
data	pointer
)	O
;	O
itr	pointer
->	O
elem	pointer
->	O
data	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
mu_itrctl_qry_direction	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
*	O
(	O
int	O
*	O
)	O
arg	pointer
=	O
itr	pointer
->	O
backwards	int
;	O
break	O
;	O
case	O
mu_itrctl_set_direction	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
itr	pointer
->	O
backwards	int
=	O
!	O
!	O
*	O
(	O
int	O
*	O
)	O
arg	pointer
;	O
break	O
;	O
case	O
mu_itrctl_count	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
return	O
mu_assoc_count	function
(	O
assoc	pointer
,	O
arg	pointer
)	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
first	pointer
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
assoc_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
mu_assoc_t	pointer
assoc	pointer
=	O
itr	pointer
->	O
assoc	pointer
;	O
itr	pointer
->	O
elem	pointer
=	O
itr	pointer
->	O
backwards	int
?	O
assoc	pointer
->	O
tail	pointer
:	O
assoc	pointer
->	O
head	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
next	pointer
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
assoc_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
itr	pointer
->	O
elem	pointer
=	O
itr	pointer
->	O
backwards	int
?	O
itr	pointer
->	O
elem	pointer
->	O
prev	pointer
:	O
itr	pointer
->	O
elem	pointer
->	O
next	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
getitem	pointer
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
*	O
pret	pointer
,	O
const	O
void	O
*	O
*	O
pkey	pointer
)	O
{	O
struct	O
assoc_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
if	O
(	O
!	O
itr	pointer
->	O
elem	pointer
)	O
return	O
EINVAL	int
;	O
*	O
pret	pointer
=	O
itr	pointer
->	O
elem	pointer
->	O
data	pointer
;	O
if	O
(	O
pkey	pointer
)	O
*	O
pkey	pointer
=	O
itr	pointer
->	O
elem	pointer
->	O
name	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
finished_p	pointer
(	O
void	O
*	O
owner	pointer
)	O
{	O
struct	O
assoc_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
return	O
itr	pointer
->	O
elem	pointer
==	O
NULL	O
;	O
}	O
static	O
int	O
destroy	pointer
(	O
mu_iterator_t	pointer
iterator	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
assoc_iterator	struct
*	O
itr	pointer
=	O
data	pointer
;	O
mu_iterator_detach	function
(	O
&	O
itr	pointer
->	O
assoc	pointer
->	O
itr	pointer
,	O
iterator	pointer
)	O
;	O
free	function
(	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
delitem	pointer
(	O
void	O
*	O
owner	pointer
,	O
void	O
*	O
item	pointer
)	O
{	O
struct	O
assoc_iterator	struct
*	O
itr	pointer
=	O
owner	pointer
;	O
return	O
itr	pointer
->	O
elem	pointer
==	O
item	pointer
?	O
MU_ITR_DELITEM_NEXT	int
:	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O
static	O
int	O
assoc_data_dup	function
(	O
void	O
*	O
*	O
ptr	pointer
,	O
void	O
*	O
owner	pointer
)	O
{	O
*	O
ptr	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
assoc_iterator	struct
)	O
)	O
;	O
if	O
(	O
*	O
ptr	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
memcpy	function
(	O
*	O
ptr	pointer
,	O
owner	pointer
,	O
sizeof	O
(	O
struct	O
assoc_iterator	struct
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_get_iterator	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
mu_iterator_t	pointer
*	O
piterator	pointer
)	O
{	O
mu_iterator_t	pointer
iterator	pointer
;	O
int	O
status	int
;	O
struct	O
assoc_iterator	struct
*	O
itr	pointer
;	O
if	O
(	O
!	O
assoc	pointer
)	O
return	O
EINVAL	int
;	O
itr	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
*	O
itr	pointer
)	O
;	O
if	O
(	O
!	O
itr	pointer
)	O
return	O
ENOMEM	int
;	O
itr	pointer
->	O
assoc	pointer
=	O
assoc	pointer
;	O
itr	pointer
->	O
elem	pointer
=	O
NULL	O
;	O
status	int
=	O
mu_iterator_create	function
(	O
&	O
iterator	pointer
,	O
itr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
itr	pointer
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	function
(	O
iterator	pointer
,	O
first	pointer
)	O
;	O
mu_iterator_set_next	function
(	O
iterator	pointer
,	O
next	pointer
)	O
;	O
mu_iterator_set_getitem	function
(	O
iterator	pointer
,	O
getitem	pointer
)	O
;	O
mu_iterator_set_finished_p	function
(	O
iterator	pointer
,	O
finished_p	pointer
)	O
;	O
mu_iterator_set_delitem	function
(	O
iterator	pointer
,	O
delitem	pointer
)	O
;	O
mu_iterator_set_destroy	function
(	O
iterator	pointer
,	O
destroy	pointer
)	O
;	O
mu_iterator_set_dup	function
(	O
iterator	pointer
,	O
assoc_data_dup	function
)	O
;	O
mu_iterator_set_itrctl	function
(	O
iterator	pointer
,	O
itrctl	pointer
)	O
;	O
mu_iterator_attach	function
(	O
&	O
assoc	pointer
->	O
itr	pointer
,	O
iterator	pointer
)	O
;	O
*	O
piterator	pointer
=	O
iterator	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_count	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
size_t	long
length	long
=	O
0	int
;	O
if	O
(	O
!	O
pcount	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
assoc	pointer
)	O
{	O
struct	O
_mu_assoc_elem	struct
*	O
elt	pointer
;	O
for	O
(	O
elt	pointer
=	O
assoc	pointer
->	O
head	pointer
;	O
elt	pointer
;	O
elt	pointer
=	O
elt	pointer
->	O
next	pointer
)	O
length	long
++	O
;	O
}	O
*	O
pcount	pointer
=	O
length	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_is_empty	function
(	O
mu_assoc_t	pointer
assoc	pointer
)	O
{	O
return	O
assoc	pointer
==	O
NULL	O
||	O
assoc	pointer
->	O
head	pointer
==	O
NULL	O
;	O
}	O
int	O
mu_assoc_foreach	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
mu_assoc_action_t	pointer
action	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_iterator_t	pointer
itr	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
assoc	pointer
||	O
!	O
action	pointer
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_assoc_get_iterator	function
(	O
assoc	pointer
,	O
&	O
itr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
mu_iterator_first	function
(	O
itr	pointer
)	O
;	O
!	O
mu_iterator_is_done	function
(	O
itr	pointer
)	O
;	O
mu_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
char	O
*	O
name	pointer
;	O
void	O
*	O
value	pointer
;	O
rc	int
=	O
mu_iterator_current_kv	function
(	O
itr	pointer
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
name	pointer
,	O
(	O
void	O
*	O
*	O
)	O
&	O
value	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
action	pointer
(	O
name	pointer
,	O
value	pointer
,	O
data	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
mu_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
struct	O
_mu_assoc_elem	struct
*	O
merge	function
(	O
struct	O
_mu_assoc_elem	struct
*	O
left	pointer
,	O
struct	O
_mu_assoc_elem	struct
*	O
right	pointer
,	O
mu_assoc_comparator_t	pointer
cmp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
_mu_assoc_elem	struct
*	O
head	pointer
=	O
NULL	O
,	O
*	O
*	O
tailptr	pointer
=	O
&	O
head	pointer
,	O
*	O
tmp	int
;	O
while	O
(	O
left	pointer
&&	O
right	pointer
)	O
{	O
if	O
(	O
cmp	pointer
(	O
left	pointer
->	O
name	pointer
,	O
left	pointer
->	O
data	pointer
,	O
right	pointer
->	O
name	pointer
,	O
right	pointer
->	O
data	pointer
,	O
data	pointer
)	O
<=	O
0	int
)	O
{	O
tmp	int
=	O
left	pointer
->	O
next	pointer
;	O
*	O
tailptr	pointer
=	O
left	pointer
;	O
tailptr	pointer
=	O
&	O
left	pointer
->	O
next	pointer
;	O
left	pointer
=	O
tmp	int
;	O
}	O
else	O
{	O
tmp	int
=	O
right	pointer
->	O
next	pointer
;	O
*	O
tailptr	pointer
=	O
right	pointer
;	O
tailptr	pointer
=	O
&	O
right	pointer
->	O
next	pointer
;	O
right	pointer
=	O
tmp	int
;	O
}	O
}	O
*	O
tailptr	pointer
=	O
left	pointer
?	O
left	pointer
:	O
right	pointer
;	O
return	O
head	pointer
;	O
}	O
static	O
struct	O
_mu_assoc_elem	struct
*	O
merge_sort	function
(	O
struct	O
_mu_assoc_elem	struct
*	O
list	pointer
,	O
size_t	long
length	long
,	O
mu_assoc_comparator_t	pointer
cmp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
_mu_assoc_elem	struct
*	O
left	pointer
,	O
*	O
right	pointer
;	O
size_t	long
left_len	long
,	O
right_len	long
,	O
i	int
;	O
struct	O
_mu_assoc_elem	struct
*	O
elt	pointer
;	O
if	O
(	O
length	long
==	O
1	int
)	O
return	O
list	pointer
;	O
if	O
(	O
length	long
==	O
2	int
)	O
{	O
elt	pointer
=	O
list	pointer
->	O
next	pointer
;	O
if	O
(	O
cmp	pointer
(	O
list	pointer
->	O
name	pointer
,	O
list	pointer
->	O
data	pointer
,	O
elt	pointer
->	O
name	pointer
,	O
elt	pointer
->	O
data	pointer
,	O
data	pointer
)	O
>	O
0	int
)	O
{	O
elt	pointer
->	O
next	pointer
=	O
list	pointer
;	O
list	pointer
->	O
next	pointer
=	O
NULL	O
;	O
return	O
elt	pointer
;	O
}	O
return	O
list	pointer
;	O
}	O
left	pointer
=	O
list	pointer
;	O
left_len	long
=	O
(	O
length	long
+	O
1	int
)	O
/	O
2	int
;	O
right_len	long
=	O
length	long
/	O
2	int
;	O
for	O
(	O
elt	pointer
=	O
list	pointer
,	O
i	int
=	O
left_len	long
-	O
1	int
;	O
i	int
;	O
i	int
--	O
)	O
elt	pointer
=	O
elt	pointer
->	O
next	pointer
;	O
right	pointer
=	O
elt	pointer
->	O
next	pointer
;	O
elt	pointer
->	O
next	pointer
=	O
NULL	O
;	O
left	pointer
=	O
merge_sort	function
(	O
left	pointer
,	O
left_len	long
,	O
cmp	pointer
,	O
data	pointer
)	O
;	O
right	pointer
=	O
merge_sort	function
(	O
right	pointer
,	O
right_len	long
,	O
cmp	pointer
,	O
data	pointer
)	O
;	O
return	O
merge	function
(	O
left	pointer
,	O
right	pointer
,	O
cmp	pointer
,	O
data	pointer
)	O
;	O
}	O
int	O
mu_assoc_sort_r	function
(	O
mu_assoc_t	pointer
assoc	pointer
,	O
mu_assoc_comparator_t	pointer
cmp	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
_mu_assoc_elem	struct
*	O
head	pointer
,	O
*	O
prev	pointer
,	O
*	O
p	pointer
;	O
size_t	long
length	long
;	O
if	O
(	O
!	O
assoc	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
cmp	pointer
)	O
return	O
0	int
;	O
mu_assoc_count	function
(	O
assoc	pointer
,	O
&	O
length	long
)	O
;	O
head	pointer
=	O
merge_sort	function
(	O
assoc	pointer
->	O
head	pointer
,	O
length	long
,	O
cmp	pointer
,	O
data	pointer
)	O
;	O
for	O
(	O
prev	pointer
=	O
NULL	O
,	O
p	pointer
=	O
head	pointer
;	O
p	pointer
;	O
prev	pointer
=	O
p	pointer
,	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
p	pointer
->	O
prev	pointer
=	O
prev	pointer
;	O
assoc	pointer
->	O
head	pointer
=	O
head	pointer
;	O
assoc	pointer
->	O
tail	pointer
=	O
prev	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_mark	function
(	O
mu_assoc_t	pointer
asc	pointer
,	O
int	O
(	O
*	O
cond	pointer
)	O
(	O
char	O
const	O
*	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
_mu_assoc_elem	struct
*	O
elt	pointer
;	O
if	O
(	O
!	O
asc	pointer
)	O
return	O
EINVAL	int
;	O
for	O
(	O
elt	pointer
=	O
asc	pointer
->	O
head	pointer
;	O
elt	pointer
;	O
elt	pointer
=	O
elt	pointer
->	O
next	pointer
)	O
elt	pointer
->	O
mark	int
=	O
!	O
!	O
cond	pointer
(	O
elt	pointer
->	O
name	pointer
,	O
elt	pointer
->	O
data	pointer
,	O
data	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_sweep	function
(	O
mu_assoc_t	pointer
asc	pointer
)	O
{	O
unsigned	O
i	int
;	O
if	O
(	O
!	O
asc	pointer
)	O
return	O
EINVAL	int
;	O
for	O
(	O
i	int
=	O
hash_size	array
[	O
asc	pointer
->	O
hash_num	int
]	O
;	O
i	int
>	O
0	int
;	O
i	int
--	O
)	O
{	O
if	O
(	O
asc	pointer
->	O
tab	pointer
[	O
i	int
-	O
1	int
]	O
&&	O
asc	pointer
->	O
tab	pointer
[	O
i	int
-	O
1	int
]	O
->	O
mark	int
)	O
assoc_remove	function
(	O
asc	pointer
,	O
i	int
-	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
