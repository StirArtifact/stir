int	O
do_driver	function
(	O
char	O
*	O
driver	pointer
,	O
int	O
*	O
ofd	pointer
,	O
int	O
*	O
ifd	pointer
)	O
{	O
pid_t	int
child	int
;	O
int	O
pipe0	array
[	O
2	int
]	O
;	O
int	O
pipe1	array
[	O
2	int
]	O
;	O
if	O
(	O
pipe	function
(	O
pipe0	array
)	O
<	O
0	int
)	O
err_sys	function
(	O
"can't create stream pipe"	pointer
)	O
;	O
if	O
(	O
pipe	function
(	O
pipe1	array
)	O
<	O
0	int
)	O
err_sys	function
(	O
"can't create stream pipe"	pointer
)	O
;	O
if	O
(	O
(	O
child	int
=	O
fork	function
(	O
)	O
)	O
<	O
0	int
)	O
err_sys	function
(	O
"fork error"	pointer
)	O
;	O
else	O
if	O
(	O
child	int
==	O
0	int
)	O
{	O
close	function
(	O
pipe0	array
[	O
1	int
]	O
)	O
;	O
close	function
(	O
pipe1	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
dup2	function
(	O
pipe0	array
[	O
0	int
]	O
,	O
STDIN_FILENO	int
)	O
!=	O
STDIN_FILENO	int
)	O
err_sys	function
(	O
"dup2 error to stdin"	pointer
)	O
;	O
if	O
(	O
dup2	function
(	O
pipe1	array
[	O
1	int
]	O
,	O
STDOUT_FILENO	int
)	O
!=	O
STDOUT_FILENO	int
)	O
err_sys	function
(	O
"dup2 error to stdout"	pointer
)	O
;	O
close	function
(	O
pipe0	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
pipe1	array
[	O
1	int
]	O
)	O
;	O
execlp	function
(	O
driver	pointer
,	O
driver	pointer
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
err_sys	function
(	O
"execlp error for: %s"	pointer
,	O
driver	pointer
)	O
;	O
_exit	function
(	O
0	int
)	O
;	O
}	O
close	function
(	O
pipe0	array
[	O
0	int
]	O
)	O
;	O
close	function
(	O
pipe1	array
[	O
1	int
]	O
)	O
;	O
*	O
ifd	pointer
=	O
pipe0	array
[	O
1	int
]	O
;	O
*	O
ofd	pointer
=	O
pipe1	array
[	O
0	int
]	O
;	O
return	O
(	O
int	O
)	O
child	int
;	O
}	O
