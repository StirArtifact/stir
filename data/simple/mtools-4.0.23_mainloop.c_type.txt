static	O
const	O
char	O
*	O
fix_mcwd	function
(	O
char	O
*	O
ans	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
s	pointer
;	O
char	O
buf	pointer
[	O
MAX_PATH	int
]	O
;	O
fp	pointer
=	O
open_mcwd	function
(	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
||	O
!	O
fgets	function
(	O
buf	pointer
,	O
MAX_PATH	int
,	O
fp	pointer
)	O
)	O
{	O
if	O
(	O
fp	pointer
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
ans	pointer
[	O
0	int
]	O
=	O
get_default_drive	function
(	O
)	O
;	O
strcpy	function
(	O
ans	pointer
+	O
1	int
,	O
":/"	pointer
)	O
;	O
return	O
ans	pointer
;	O
}	O
buf	pointer
[	O
strlen	function
(	O
buf	pointer
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
s	pointer
=	O
buf	pointer
;	O
if	O
(	O
buf	pointer
[	O
0	int
]	O
&&	O
buf	pointer
[	O
1	int
]	O
==	O
':'	O
)	O
{	O
memcpy	function
(	O
ans	pointer
,	O
buf	pointer
,	O
2	int
)	O
;	O
ans	pointer
[	O
2	int
]	O
=	O
'\0'	O
;	O
s	pointer
=	O
&	O
buf	pointer
[	O
2	int
]	O
;	O
}	O
else	O
{	O
ans	pointer
[	O
0	int
]	O
=	O
get_default_drive	function
(	O
)	O
;	O
strcpy	function
(	O
ans	pointer
+	O
1	int
,	O
":"	pointer
)	O
;	O
}	O
if	O
(	O
*	O
s	pointer
!=	O
'/'	O
&&	O
*	O
s	pointer
!=	O
'\\'	O
)	O
{	O
strcat	function
(	O
ans	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
ans	pointer
,	O
s	pointer
)	O
;	O
}	O
else	O
strcat	function
(	O
ans	pointer
,	O
s	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
ans	pointer
)	O
==	O
3	int
)	O
return	O
(	O
ans	pointer
)	O
;	O
if	O
(	O
*	O
--	O
s	pointer
==	O
'/'	O
)	O
*	O
s	pointer
=	O
'\0'	O
;	O
return	O
ans	pointer
;	O
}	O
int	O
unix_dir_loop	function
(	O
Stream_t	struct
*	O
Stream	pointer
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
;	O
int	O
unix_loop	function
(	O
Stream_t	struct
*	O
Stream	pointer
UNUSEDP	O
,	O
MainParam_t	struct
*	O
mp	pointer
,	O
char	O
*	O
arg	pointer
,	O
int	O
follow_dir_link	int
)	O
;	O
static	O
int	O
_unix_loop	function
(	O
Stream_t	struct
*	O
Dir	pointer
,	O
MainParam_t	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
filename	pointer
UNUSEDP	O
)	O
{	O
return	O
unix_dir_loop	function
(	O
Dir	pointer
,	O
mp	pointer
)	O
;	O
}	O
int	O
unix_loop	function
(	O
Stream_t	struct
*	O
Stream	pointer
UNUSEDP	O
,	O
MainParam_t	struct
*	O
mp	pointer
,	O
char	O
*	O
arg	pointer
,	O
int	O
follow_dir_link	int
)	O
{	O
int	O
ret	int
;	O
int	O
isdir	int
=	O
0	int
;	O
int	O
unixNameLength	int
;	O
mp	pointer
->	O
File	pointer
=	O
NULL	O
;	O
mp	pointer
->	O
direntry	pointer
=	O
NULL	O
;	O
unixNameLength	int
=	O
strlen	function
(	O
arg	pointer
)	O
;	O
if	O
(	O
unixNameLength	int
>	O
1	int
&&	O
arg	pointer
[	O
unixNameLength	int
-	O
1	int
]	O
==	O
'/'	O
)	O
{	O
char	O
*	O
name	pointer
=	O
strdup	function
(	O
arg	pointer
)	O
;	O
name	pointer
[	O
unixNameLength	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
mp	pointer
->	O
unixSourceName	pointer
=	O
name	pointer
;	O
}	O
else	O
{	O
mp	pointer
->	O
unixSourceName	pointer
=	O
arg	pointer
;	O
}	O
mp	pointer
->	O
loop	pointer
=	O
_unix_loop	function
;	O
if	O
(	O
(	O
mp	pointer
->	O
lookupflags	int
&	O
DO_OPEN	int
)	O
)	O
{	O
mp	pointer
->	O
File	pointer
=	O
SimpleFileOpen	function
(	O
0	int
,	O
0	int
,	O
arg	pointer
,	O
O_RDONLY	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
mp	pointer
->	O
File	pointer
)	O
{	O
perror	function
(	O
arg	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
GET_DATA	O
(	O
mp	pointer
->	O
File	pointer
,	O
0	int
,	O
0	int
,	O
&	O
isdir	int
,	O
0	int
)	O
;	O
if	O
(	O
isdir	int
)	O
{	O
struct	O
MT_STAT	O
buf	pointer
;	O
FREE	O
(	O
&	O
mp	pointer
->	O
File	pointer
)	O
;	O
if	O
(	O
!	O
follow_dir_link	int
&&	O
MT_LSTAT	O
(	O
arg	pointer
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
S_ISLNK	O
(	O
buf	pointer
.	O
st_mode	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"skipping directory symlink %s\n"	pointer
,	O
arg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
(	O
mp	pointer
->	O
lookupflags	int
&	O
ACCEPT_DIR	int
)	O
)	O
return	O
0	int
;	O
mp	pointer
->	O
File	pointer
=	O
OpenDir	function
(	O
arg	pointer
)	O
;	O
}	O
}	O
if	O
(	O
isdir	int
)	O
ret	int
=	O
mp	pointer
->	O
dirCallback	pointer
(	O
0	int
,	O
mp	pointer
)	O
;	O
else	O
ret	int
=	O
mp	pointer
->	O
unixcallback	pointer
(	O
mp	pointer
)	O
;	O
FREE	O
(	O
&	O
mp	pointer
->	O
File	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
isSpecial	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
name	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
strcmp	function
(	O
name	pointer
,	O
"."	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
strcmp	function
(	O
name	pointer
,	O
".."	pointer
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
isSpecialW	function
(	O
const	O
wchar_t	int
*	O
name	pointer
)	O
{	O
if	O
(	O
name	pointer
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
wcscmp	function
(	O
name	pointer
,	O
L"."	O
)	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
wcscmp	function
(	O
name	pointer
,	O
L".."	O
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
checkForDot	function
(	O
int	O
lookupflags	int
,	O
const	O
wchar_t	int
*	O
name	pointer
)	O
{	O
return	O
(	O
lookupflags	int
&	O
NO_DOTS	int
)	O
&&	O
isSpecialW	function
(	O
name	pointer
)	O
;	O
}	O
typedef	O
struct	O
lookupState_t	struct
{	O
Stream_t	struct
*	O
container	pointer
;	O
int	O
nbContainers	int
;	O
Stream_t	struct
*	O
Dir	pointer
;	O
int	O
nbDirs	int
;	O
const	O
char	O
*	O
filename	pointer
;	O
}	O
lookupState_t	struct
;	O
static	O
int	O
isUniqueTarget	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
name	pointer
&&	O
strcmp	function
(	O
name	pointer
,	O
"-"	pointer
)	O
;	O
}	O
static	O
int	O
handle_leaf	function
(	O
direntry_t	struct
*	O
direntry	pointer
,	O
MainParam_t	struct
*	O
mp	pointer
,	O
lookupState_t	struct
*	O
lookupState	pointer
)	O
{	O
Stream_t	struct
*	O
MyFile	pointer
=	O
0	int
;	O
int	O
ret	int
;	O
if	O
(	O
got_signal	int
)	O
return	O
ERROR_ONE	int
;	O
if	O
(	O
lookupState	pointer
)	O
{	O
switch	O
(	O
lookupState	pointer
->	O
nbDirs	int
)	O
{	O
case	O
0	int
:	O
lookupState	pointer
->	O
Dir	pointer
=	O
OpenFileByDirentry	function
(	O
direntry	pointer
)	O
;	O
lookupState	pointer
->	O
nbDirs	int
++	O
;	O
FREE	O
(	O
&	O
lookupState	pointer
->	O
container	pointer
)	O
;	O
return	O
0	int
;	O
case	O
1	int
:	O
FREE	O
(	O
&	O
lookupState	pointer
->	O
Dir	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Ambiguous\n"	pointer
)	O
;	O
return	O
STOP_NOW	int
|	O
ERROR_ONE	int
;	O
default	O
:	O
return	O
STOP_NOW	int
|	O
ERROR_ONE	int
;	O
}	O
}	O
mp	pointer
->	O
direntry	pointer
=	O
direntry	pointer
;	O
if	O
(	O
IS_DIR	O
(	O
direntry	pointer
)	O
)	O
{	O
if	O
(	O
mp	pointer
->	O
lookupflags	int
&	O
(	O
DO_OPEN	int
|	O
DO_OPEN_DIRS	int
)	O
)	O
MyFile	pointer
=	O
mp	pointer
->	O
File	pointer
=	O
OpenFileByDirentry	function
(	O
direntry	pointer
)	O
;	O
ret	int
=	O
mp	pointer
->	O
dirCallback	pointer
(	O
direntry	pointer
,	O
mp	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
mp	pointer
->	O
lookupflags	int
&	O
DO_OPEN	int
)	O
MyFile	pointer
=	O
mp	pointer
->	O
File	pointer
=	O
OpenFileByDirentry	function
(	O
direntry	pointer
)	O
;	O
ret	int
=	O
mp	pointer
->	O
callback	pointer
(	O
direntry	pointer
,	O
mp	pointer
)	O
;	O
}	O
FREE	O
(	O
&	O
MyFile	pointer
)	O
;	O
if	O
(	O
isUniqueTarget	function
(	O
mp	pointer
->	O
targetName	pointer
)	O
)	O
ret	int
|=	O
STOP_NOW	int
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
_dos_loop	function
(	O
Stream_t	struct
*	O
Dir	pointer
,	O
MainParam_t	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
Stream_t	struct
*	O
MyFile	pointer
=	O
0	int
;	O
direntry_t	struct
entry	int
;	O
int	O
ret	int
;	O
int	O
r	int
;	O
ret	int
=	O
0	int
;	O
r	int
=	O
0	int
;	O
initializeDirentry	function
(	O
&	O
entry	int
,	O
Dir	pointer
)	O
;	O
while	O
(	O
!	O
got_signal	int
&&	O
(	O
r	int
=	O
vfat_lookup	function
(	O
&	O
entry	int
,	O
filename	pointer
,	O
-	O
1	int
,	O
mp	pointer
->	O
lookupflags	int
,	O
mp	pointer
->	O
shortname	pointer
.	O
data	pointer
,	O
mp	pointer
->	O
shortname	pointer
.	O
len	long
,	O
mp	pointer
->	O
longname	pointer
.	O
data	pointer
,	O
mp	pointer
->	O
longname	pointer
.	O
len	long
)	O
)	O
==	O
0	int
)	O
{	O
mp	pointer
->	O
File	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
checkForDot	function
(	O
mp	pointer
->	O
lookupflags	int
,	O
entry	int
.	O
name	pointer
)	O
)	O
{	O
MyFile	pointer
=	O
0	int
;	O
if	O
(	O
(	O
mp	pointer
->	O
lookupflags	int
&	O
DO_OPEN	int
)	O
||	O
(	O
IS_DIR	O
(	O
&	O
entry	int
)	O
&&	O
(	O
mp	pointer
->	O
lookupflags	int
&	O
DO_OPEN_DIRS	int
)	O
)	O
)	O
{	O
MyFile	pointer
=	O
mp	pointer
->	O
File	pointer
=	O
OpenFileByDirentry	function
(	O
&	O
entry	int
)	O
;	O
}	O
if	O
(	O
got_signal	int
)	O
break	O
;	O
mp	pointer
->	O
direntry	pointer
=	O
&	O
entry	int
;	O
if	O
(	O
IS_DIR	O
(	O
&	O
entry	int
)	O
)	O
ret	int
|=	O
mp	pointer
->	O
dirCallback	pointer
(	O
&	O
entry	int
,	O
mp	pointer
)	O
;	O
else	O
ret	int
|=	O
mp	pointer
->	O
callback	pointer
(	O
&	O
entry	int
,	O
mp	pointer
)	O
;	O
FREE	O
(	O
&	O
MyFile	pointer
)	O
;	O
}	O
if	O
(	O
fat_error	function
(	O
Dir	pointer
)	O
)	O
ret	int
|=	O
ERROR_ONE	int
;	O
if	O
(	O
mp	pointer
->	O
fast_quit	int
&&	O
(	O
ret	int
&	O
ERROR_ONE	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
r	int
==	O
-	O
2	int
)	O
return	O
ERROR_ONE	int
;	O
if	O
(	O
got_signal	int
)	O
ret	int
|=	O
ERROR_ONE	int
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
recurs_dos_loop	function
(	O
MainParam_t	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
filename0	pointer
,	O
const	O
char	O
*	O
filename1	pointer
,	O
lookupState_t	struct
*	O
lookupState	pointer
)	O
{	O
const	O
char	O
*	O
ptr	pointer
;	O
direntry_t	struct
entry	int
;	O
int	O
length	int
;	O
int	O
lookupflags	int
;	O
int	O
ret	int
;	O
int	O
have_one	int
;	O
int	O
doing_mcwd	int
;	O
int	O
r	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
!	O
strncmp	function
(	O
filename0	pointer
,	O
"./"	pointer
,	O
2	int
)	O
)	O
{	O
filename0	pointer
+=	O
2	int
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
strcmp	function
(	O
filename0	pointer
,	O
"."	pointer
)	O
&&	O
filename1	pointer
)	O
{	O
filename0	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
filename0	pointer
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
filename0	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
filename0	pointer
[	O
0	int
]	O
)	O
{	O
if	O
(	O
!	O
filename1	pointer
)	O
break	O
;	O
filename0	pointer
=	O
filename1	pointer
;	O
filename1	pointer
=	O
0	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
!	O
strncmp	function
(	O
filename0	pointer
,	O
"../"	pointer
,	O
3	int
)	O
||	O
(	O
!	O
strcmp	function
(	O
filename0	pointer
,	O
".."	pointer
)	O
&&	O
filename1	pointer
)	O
)	O
{	O
mp	pointer
->	O
File	pointer
=	O
getDirentry	function
(	O
mp	pointer
->	O
File	pointer
)	O
->	O
Dir	pointer
;	O
return	O
recurs_dos_loop	function
(	O
mp	pointer
,	O
filename0	pointer
+	O
2	int
,	O
filename1	pointer
,	O
lookupState	pointer
)	O
;	O
}	O
doing_mcwd	int
=	O
!	O
!	O
filename1	pointer
;	O
ptr	pointer
=	O
strchr	function
(	O
filename0	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
ptr	pointer
)	O
{	O
length	int
=	O
strlen	function
(	O
filename0	pointer
)	O
;	O
ptr	pointer
=	O
filename1	pointer
;	O
filename1	pointer
=	O
0	int
;	O
}	O
else	O
{	O
length	int
=	O
ptr	pointer
-	O
filename0	pointer
;	O
ptr	pointer
++	O
;	O
}	O
if	O
(	O
!	O
ptr	pointer
)	O
{	O
if	O
(	O
mp	pointer
->	O
lookupflags	int
&	O
OPEN_PARENT	int
)	O
{	O
mp	pointer
->	O
targetName	pointer
=	O
filename0	pointer
;	O
ret	int
=	O
handle_leaf	function
(	O
getDirentry	function
(	O
mp	pointer
->	O
File	pointer
)	O
,	O
mp	pointer
,	O
lookupState	pointer
)	O
;	O
mp	pointer
->	O
targetName	pointer
=	O
0	int
;	O
return	O
ret	int
;	O
}	O
if	O
(	O
!	O
strcmp	function
(	O
filename0	pointer
,	O
"."	pointer
)	O
||	O
!	O
filename0	pointer
[	O
0	int
]	O
)	O
{	O
return	O
handle_leaf	function
(	O
getDirentry	function
(	O
mp	pointer
->	O
File	pointer
)	O
,	O
mp	pointer
,	O
lookupState	pointer
)	O
;	O
}	O
if	O
(	O
!	O
strcmp	function
(	O
filename0	pointer
,	O
".."	pointer
)	O
)	O
{	O
return	O
handle_leaf	function
(	O
getParent	function
(	O
getDirentry	function
(	O
mp	pointer
->	O
File	pointer
)	O
)	O
,	O
mp	pointer
,	O
lookupState	pointer
)	O
;	O
}	O
lookupflags	int
=	O
mp	pointer
->	O
lookupflags	int
;	O
if	O
(	O
lookupState	pointer
)	O
{	O
lookupState	pointer
->	O
filename	pointer
=	O
filename0	pointer
;	O
if	O
(	O
lookupState	pointer
->	O
nbContainers	int
+	O
lookupState	pointer
->	O
nbDirs	int
>	O
0	int
)	O
{	O
FREE	O
(	O
&	O
lookupState	pointer
->	O
container	pointer
)	O
;	O
}	O
else	O
{	O
lookupState	pointer
->	O
container	pointer
=	O
COPY	O
(	O
mp	pointer
->	O
File	pointer
)	O
;	O
}	O
lookupState	pointer
->	O
nbContainers	int
++	O
;	O
}	O
}	O
else	O
lookupflags	int
=	O
ACCEPT_DIR	int
|	O
DO_OPEN	int
|	O
NO_DOTS	int
;	O
ret	int
=	O
0	int
;	O
r	int
=	O
0	int
;	O
have_one	int
=	O
0	int
;	O
initializeDirentry	function
(	O
&	O
entry	int
,	O
mp	pointer
->	O
File	pointer
)	O
;	O
while	O
(	O
!	O
(	O
ret	int
&	O
STOP_NOW	int
)	O
&&	O
!	O
got_signal	int
&&	O
(	O
r	int
=	O
vfat_lookup	function
(	O
&	O
entry	int
,	O
filename0	pointer
,	O
length	int
,	O
lookupflags	int
|	O
NO_MSG	int
,	O
mp	pointer
->	O
shortname	pointer
.	O
data	pointer
,	O
mp	pointer
->	O
shortname	pointer
.	O
len	long
,	O
mp	pointer
->	O
longname	pointer
.	O
data	pointer
,	O
mp	pointer
->	O
longname	pointer
.	O
len	long
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
checkForDot	function
(	O
lookupflags	int
,	O
entry	int
.	O
name	pointer
)	O
)	O
continue	O
;	O
have_one	int
=	O
1	int
;	O
if	O
(	O
ptr	pointer
)	O
{	O
Stream_t	struct
*	O
SubDir	pointer
;	O
SubDir	pointer
=	O
mp	pointer
->	O
File	pointer
=	O
OpenFileByDirentry	function
(	O
&	O
entry	int
)	O
;	O
ret	int
|=	O
recurs_dos_loop	function
(	O
mp	pointer
,	O
ptr	pointer
,	O
filename1	pointer
,	O
lookupState	pointer
)	O
;	O
FREE	O
(	O
&	O
SubDir	pointer
)	O
;	O
}	O
else	O
{	O
ret	int
|=	O
handle_leaf	function
(	O
&	O
entry	int
,	O
mp	pointer
,	O
lookupState	pointer
)	O
;	O
if	O
(	O
isUniqueTarget	function
(	O
mp	pointer
->	O
targetName	pointer
)	O
)	O
return	O
ret	int
|	O
STOP_NOW	int
;	O
}	O
if	O
(	O
doing_mcwd	int
)	O
break	O
;	O
}	O
if	O
(	O
r	int
==	O
-	O
2	int
)	O
return	O
ERROR_ONE	int
;	O
if	O
(	O
got_signal	int
)	O
return	O
ret	int
|	O
ERROR_ONE	int
;	O
if	O
(	O
doing_mcwd	int
&&	O
!	O
have_one	int
)	O
return	O
NO_CWD	int
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
common_dos_loop	function
(	O
MainParam_t	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
pathname	pointer
,	O
lookupState_t	struct
*	O
lookupState	pointer
,	O
int	O
open_mode	int
)	O
{	O
Stream_t	struct
*	O
RootDir	pointer
;	O
const	O
char	O
*	O
cwd	short
;	O
char	O
drive	char
;	O
int	O
ret	int
;	O
mp	pointer
->	O
loop	pointer
=	O
_dos_loop	function
;	O
drive	char
=	O
'\0'	O
;	O
cwd	short
=	O
""	pointer
;	O
if	O
(	O
*	O
pathname	pointer
&&	O
pathname	pointer
[	O
1	int
]	O
==	O
':'	O
)	O
{	O
drive	char
=	O
ch_toupper	function
(	O
*	O
pathname	pointer
)	O
;	O
pathname	pointer
+=	O
2	int
;	O
if	O
(	O
mp	pointer
->	O
mcwd	array
[	O
0	int
]	O
==	O
drive	char
)	O
cwd	short
=	O
mp	pointer
->	O
mcwd	array
+	O
2	int
;	O
}	O
else	O
if	O
(	O
mp	pointer
->	O
mcwd	array
[	O
0	int
]	O
)	O
{	O
drive	char
=	O
mp	pointer
->	O
mcwd	array
[	O
0	int
]	O
;	O
cwd	short
=	O
mp	pointer
->	O
mcwd	array
+	O
2	int
;	O
}	O
else	O
{	O
drive	char
=	O
get_default_drive	function
(	O
)	O
;	O
}	O
if	O
(	O
*	O
pathname	pointer
==	O
'/'	O
)	O
cwd	short
=	O
""	pointer
;	O
RootDir	pointer
=	O
mp	pointer
->	O
File	pointer
=	O
open_root_dir	function
(	O
drive	char
,	O
open_mode	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
mp	pointer
->	O
File	pointer
)	O
return	O
ERROR_ONE	int
;	O
ret	int
=	O
recurs_dos_loop	function
(	O
mp	pointer
,	O
cwd	short
,	O
pathname	pointer
,	O
lookupState	pointer
)	O
;	O
if	O
(	O
ret	int
&	O
NO_CWD	int
)	O
{	O
*	O
mp	pointer
->	O
mcwd	array
=	O
'\0'	O
;	O
unlink_mcwd	function
(	O
)	O
;	O
ret	int
=	O
recurs_dos_loop	function
(	O
mp	pointer
,	O
""	pointer
,	O
pathname	pointer
,	O
lookupState	pointer
)	O
;	O
}	O
FREE	O
(	O
&	O
RootDir	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
dos_loop	function
(	O
MainParam_t	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
return	O
common_dos_loop	function
(	O
mp	pointer
,	O
arg	pointer
,	O
0	int
,	O
mp	pointer
->	O
openflags	int
)	O
;	O
}	O
static	O
int	O
dos_target_lookup	function
(	O
MainParam_t	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
lookupState_t	struct
lookupState	pointer
;	O
int	O
ret	int
;	O
int	O
lookupflags	int
;	O
lookupState	pointer
.	O
nbDirs	int
=	O
0	int
;	O
lookupState	pointer
.	O
Dir	pointer
=	O
0	int
;	O
lookupState	pointer
.	O
nbContainers	int
=	O
0	int
;	O
lookupState	pointer
.	O
container	pointer
=	O
0	int
;	O
lookupflags	int
=	O
mp	pointer
->	O
lookupflags	int
;	O
mp	pointer
->	O
lookupflags	int
=	O
DO_OPEN	int
|	O
ACCEPT_DIR	int
;	O
ret	int
=	O
common_dos_loop	function
(	O
mp	pointer
,	O
arg	pointer
,	O
&	O
lookupState	pointer
,	O
O_RDWR	int
)	O
;	O
mp	pointer
->	O
lookupflags	int
=	O
lookupflags	int
;	O
if	O
(	O
ret	int
&	O
ERROR_ONE	int
)	O
return	O
ret	int
;	O
if	O
(	O
lookupState	pointer
.	O
nbDirs	int
)	O
{	O
mp	pointer
->	O
targetName	pointer
=	O
0	int
;	O
mp	pointer
->	O
targetDir	pointer
=	O
lookupState	pointer
.	O
Dir	pointer
;	O
FREE	O
(	O
&	O
lookupState	pointer
.	O
container	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
switch	O
(	O
lookupState	pointer
.	O
nbContainers	int
)	O
{	O
case	O
0	int
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: no match for target\n"	pointer
,	O
arg	pointer
)	O
;	O
return	O
MISSED_ONE	int
;	O
case	O
1	int
:	O
mp	pointer
->	O
targetName	pointer
=	O
strdup	function
(	O
lookupState	pointer
.	O
filename	pointer
)	O
;	O
mp	pointer
->	O
targetDir	pointer
=	O
lookupState	pointer
.	O
container	pointer
;	O
return	O
ret	int
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"Ambiguous %s\n"	pointer
,	O
arg	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
}	O
static	O
int	O
unix_target_lookup	function
(	O
MainParam_t	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
char	O
*	O
ptr	pointer
;	O
mp	pointer
->	O
unixTarget	pointer
=	O
strdup	function
(	O
arg	pointer
)	O
;	O
if	O
(	O
access	function
(	O
mp	pointer
->	O
unixTarget	pointer
,	O
F_OK	int
)	O
==	O
0	int
)	O
return	O
GOT_ONE	int
;	O
ptr	pointer
=	O
strrchr	function
(	O
mp	pointer
->	O
unixTarget	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
ptr	pointer
)	O
{	O
mp	pointer
->	O
targetName	pointer
=	O
mp	pointer
->	O
unixTarget	pointer
;	O
mp	pointer
->	O
unixTarget	pointer
=	O
strdup	function
(	O
"."	pointer
)	O
;	O
return	O
GOT_ONE	int
;	O
}	O
else	O
{	O
*	O
ptr	pointer
=	O
'\0'	O
;	O
mp	pointer
->	O
targetName	pointer
=	O
ptr	pointer
+	O
1	int
;	O
return	O
GOT_ONE	int
;	O
}	O
}	O
int	O
target_lookup	function
(	O
MainParam_t	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
(	O
mp	pointer
->	O
lookupflags	int
&	O
NO_UNIX	int
)	O
||	O
(	O
arg	pointer
[	O
0	int
]	O
&&	O
arg	pointer
[	O
1	int
]	O
==	O
':'	O
)	O
)	O
return	O
dos_target_lookup	function
(	O
mp	pointer
,	O
arg	pointer
)	O
;	O
else	O
return	O
unix_target_lookup	function
(	O
mp	pointer
,	O
arg	pointer
)	O
;	O
}	O
int	O
main_loop	function
(	O
MainParam_t	struct
*	O
mp	pointer
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
argc	int
)	O
{	O
int	O
i	int
;	O
int	O
ret	int
,	O
Bret	int
;	O
Bret	int
=	O
0	int
;	O
if	O
(	O
argc	int
!=	O
1	int
&&	O
mp	pointer
->	O
targetName	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Several file names given, but last argument (%s) not a directory\n"	pointer
,	O
mp	pointer
->	O
targetName	pointer
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
got_signal	int
)	O
break	O
;	O
mp	pointer
->	O
originalArg	pointer
=	O
argv	pointer
[	O
i	int
]	O
;	O
mp	pointer
->	O
basenameHasWildcard	int
=	O
strpbrk	function
(	O
_basename	function
(	O
mp	pointer
->	O
originalArg	pointer
)	O
,	O
"*[?"	pointer
)	O
!=	O
0	int
;	O
if	O
(	O
mp	pointer
->	O
unixcallback	pointer
&&	O
(	O
!	O
argv	pointer
[	O
i	int
]	O
[	O
0	int
]	O
||	O
argv	pointer
[	O
i	int
]	O
[	O
1	int
]	O
!=	O
':'	O
)	O
)	O
ret	int
=	O
unix_loop	function
(	O
0	int
,	O
mp	pointer
,	O
argv	pointer
[	O
i	int
]	O
,	O
1	int
)	O
;	O
else	O
ret	int
=	O
dos_loop	function
(	O
mp	pointer
,	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
!	O
(	O
ret	int
&	O
(	O
GOT_ONE	int
|	O
ERROR_ONE	int
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: File \"%s\" not found\n"	pointer
,	O
progname	pointer
,	O
argv	pointer
[	O
i	int
]	O
)	O
;	O
ret	int
|=	O
ERROR_ONE	int
;	O
}	O
Bret	int
|=	O
ret	int
;	O
if	O
(	O
mp	pointer
->	O
fast_quit	int
&&	O
(	O
Bret	int
&	O
(	O
MISSED_ONE	int
|	O
ERROR_ONE	int
)	O
)	O
)	O
break	O
;	O
}	O
FREE	O
(	O
&	O
mp	pointer
->	O
targetDir	pointer
)	O
;	O
if	O
(	O
Bret	int
&	O
ERROR_ONE	int
)	O
return	O
1	int
;	O
if	O
(	O
(	O
Bret	int
&	O
GOT_ONE	int
)	O
&&	O
(	O
Bret	int
&	O
MISSED_ONE	int
)	O
)	O
return	O
2	int
;	O
if	O
(	O
Bret	int
&	O
MISSED_ONE	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
dispatchToFile	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
if	O
(	O
entry	int
)	O
return	O
mp	pointer
->	O
callback	pointer
(	O
entry	int
,	O
mp	pointer
)	O
;	O
else	O
return	O
mp	pointer
->	O
unixcallback	pointer
(	O
mp	pointer
)	O
;	O
}	O
void	O
init_mp	function
(	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
fix_mcwd	function
(	O
mp	pointer
->	O
mcwd	array
)	O
;	O
mp	pointer
->	O
openflags	int
=	O
O_RDONLY	int
;	O
mp	pointer
->	O
targetName	pointer
=	O
0	int
;	O
mp	pointer
->	O
targetDir	pointer
=	O
0	int
;	O
mp	pointer
->	O
unixTarget	pointer
=	O
0	int
;	O
mp	pointer
->	O
dirCallback	pointer
=	O
dispatchToFile	function
;	O
mp	pointer
->	O
unixcallback	pointer
=	O
NULL	O
;	O
mp	pointer
->	O
shortname	pointer
.	O
data	pointer
=	O
mp	pointer
->	O
longname	pointer
.	O
data	pointer
=	O
0	int
;	O
mp	pointer
->	O
shortname	pointer
.	O
len	long
=	O
mp	pointer
->	O
longname	pointer
.	O
len	long
=	O
0	int
;	O
mp	pointer
->	O
File	pointer
=	O
0	int
;	O
mp	pointer
->	O
fast_quit	int
=	O
0	int
;	O
}	O
const	O
char	O
*	O
mpGetBasename	function
(	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
if	O
(	O
mp	pointer
->	O
direntry	pointer
)	O
{	O
wchar_to_native	function
(	O
mp	pointer
->	O
direntry	pointer
->	O
name	pointer
,	O
mp	pointer
->	O
targetBuffer	array
,	O
MAX_VNAMELEN	O
+	O
1	int
,	O
sizeof	O
(	O
mp	pointer
->	O
targetBuffer	array
)	O
)	O
;	O
return	O
mp	pointer
->	O
targetBuffer	array
;	O
}	O
else	O
return	O
_basename	function
(	O
mp	pointer
->	O
unixSourceName	pointer
)	O
;	O
}	O
void	O
mpPrintFilename	function
(	O
FILE	struct
*	O
fp	pointer
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
if	O
(	O
mp	pointer
->	O
direntry	pointer
)	O
fprintPwd	function
(	O
fp	pointer
,	O
mp	pointer
->	O
direntry	pointer
,	O
0	int
)	O
;	O
else	O
fprintf	function
(	O
fp	pointer
,	O
"%s"	pointer
,	O
mp	pointer
->	O
originalArg	pointer
)	O
;	O
}	O
const	O
char	O
*	O
mpPickTargetName	function
(	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
if	O
(	O
mp	pointer
->	O
targetName	pointer
)	O
return	O
mp	pointer
->	O
targetName	pointer
;	O
else	O
return	O
mpGetBasename	function
(	O
mp	pointer
)	O
;	O
}	O
char	O
*	O
mpBuildUnixFilename	function
(	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
const	O
char	O
*	O
target	pointer
;	O
char	O
*	O
ret	int
;	O
char	O
*	O
tmp	pointer
;	O
target	pointer
=	O
mpPickTargetName	function
(	O
mp	pointer
)	O
;	O
ret	int
=	O
malloc	function
(	O
strlen	function
(	O
mp	pointer
->	O
unixTarget	pointer
)	O
+	O
2	int
+	O
strlen	function
(	O
target	pointer
)	O
)	O
;	O
if	O
(	O
!	O
ret	int
)	O
return	O
0	int
;	O
strcpy	function
(	O
ret	int
,	O
mp	pointer
->	O
unixTarget	pointer
)	O
;	O
if	O
(	O
*	O
target	pointer
)	O
{	O
if	O
(	O
!	O
mp	pointer
->	O
targetName	pointer
&&	O
!	O
mp	pointer
->	O
targetDir	pointer
)	O
{	O
struct	O
MT_STAT	O
buf	pointer
;	O
if	O
(	O
!	O
MT_STAT	O
(	O
ret	int
,	O
&	O
buf	pointer
)	O
&&	O
!	O
S_ISDIR	O
(	O
buf	pointer
.	O
st_mode	int
)	O
)	O
return	O
ret	int
;	O
}	O
strcat	function
(	O
ret	int
,	O
"/"	pointer
)	O
;	O
if	O
(	O
!	O
strcmp	function
(	O
target	pointer
,	O
"."	pointer
)	O
)	O
{	O
target	pointer
=	O
"DOT"	pointer
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
target	pointer
,	O
".."	pointer
)	O
)	O
{	O
target	pointer
=	O
"DOTDOT"	pointer
;	O
}	O
while	O
(	O
(	O
tmp	pointer
=	O
strchr	function
(	O
target	pointer
,	O
'/'	O
)	O
)	O
)	O
{	O
strncat	function
(	O
ret	int
,	O
target	pointer
,	O
tmp	pointer
-	O
target	pointer
)	O
;	O
strcat	function
(	O
ret	int
,	O
"\\"	pointer
)	O
;	O
target	pointer
=	O
tmp	pointer
+	O
1	int
;	O
}	O
strcat	function
(	O
ret	int
,	O
target	pointer
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
