struct	O
cref_ref	struct
{	O
struct	O
cref_ref	struct
*	O
next	pointer
;	O
bfd	struct
*	O
abfd	pointer
;	O
unsigned	O
int	O
def	struct
:	O
1	int
;	O
unsigned	O
int	O
common	int
:	O
1	int
;	O
unsigned	O
int	O
undef	struct
:	O
1	int
;	O
}	O
;	O
struct	O
cref_hash_entry	struct
{	O
struct	O
bfd_hash_entry	struct
root	struct
;	O
const	O
char	O
*	O
demangled	pointer
;	O
struct	O
cref_ref	struct
*	O
refs	pointer
;	O
}	O
;	O
struct	O
cref_hash_table	struct
{	O
struct	O
bfd_hash_table	struct
root	struct
;	O
}	O
;	O
static	O
void	O
output_one_cref	function
(	O
FILE	struct
*	O
,	O
struct	O
cref_hash_entry	struct
*	O
)	O
;	O
static	O
void	O
check_local_sym_xref	function
(	O
lang_input_statement_type	struct
*	O
)	O
;	O
static	O
bfd_boolean	int
check_nocrossref	function
(	O
struct	O
cref_hash_entry	struct
*	O
,	O
void	O
*	O
)	O
;	O
static	O
void	O
check_refs	function
(	O
const	O
char	O
*	O
,	O
bfd_boolean	int
,	O
asection	struct
*	O
,	O
bfd	struct
*	O
,	O
struct	O
lang_nocrossrefs	struct
*	O
)	O
;	O
static	O
void	O
check_reloc_refs	function
(	O
bfd	struct
*	O
,	O
asection	struct
*	O
,	O
void	O
*	O
)	O
;	O
static	O
struct	O
cref_hash_table	struct
cref_table	struct
;	O
static	O
bfd_boolean	int
cref_initialized	int
;	O
static	O
size_t	long
cref_symcount	long
;	O
static	O
struct	O
bfd_hash_entry	struct
*	O
*	O
old_table	pointer
;	O
static	O
unsigned	O
int	O
old_size	int
;	O
static	O
unsigned	O
int	O
old_count	int
;	O
static	O
void	O
*	O
old_tab	pointer
;	O
static	O
void	O
*	O
alloc_mark	pointer
;	O
static	O
size_t	long
tabsize	long
,	O
entsize	int
,	O
refsize	long
;	O
static	O
size_t	long
old_symcount	long
;	O
static	O
struct	O
bfd_hash_entry	struct
*	O
cref_hash_newfunc	function
(	O
struct	O
bfd_hash_entry	struct
*	O
entry	pointer
,	O
struct	O
bfd_hash_table	struct
*	O
table	pointer
,	O
const	O
char	O
*	O
string	pointer
)	O
{	O
struct	O
cref_hash_entry	struct
*	O
ret	pointer
=	O
(	O
struct	O
cref_hash_entry	struct
*	O
)	O
entry	pointer
;	O
if	O
(	O
ret	pointer
==	O
NULL	O
)	O
ret	pointer
=	O
(	O
(	O
struct	O
cref_hash_entry	struct
*	O
)	O
bfd_hash_allocate	function
(	O
table	pointer
,	O
sizeof	O
(	O
struct	O
cref_hash_entry	struct
)	O
)	O
)	O
;	O
if	O
(	O
ret	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
ret	pointer
=	O
(	O
(	O
struct	O
cref_hash_entry	struct
*	O
)	O
bfd_hash_newfunc	function
(	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
ret	pointer
,	O
table	pointer
,	O
string	pointer
)	O
)	O
;	O
if	O
(	O
ret	pointer
!=	O
NULL	O
)	O
{	O
ret	pointer
->	O
demangled	pointer
=	O
NULL	O
;	O
ret	pointer
->	O
refs	pointer
=	O
NULL	O
;	O
++	O
cref_symcount	long
;	O
}	O
return	O
&	O
ret	pointer
->	O
root	struct
;	O
}	O
void	O
add_cref	function
(	O
const	O
char	O
*	O
name	pointer
,	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
section	pointer
,	O
bfd_vma	long
value	long
ATTRIBUTE_UNUSED	O
)	O
{	O
struct	O
cref_hash_entry	struct
*	O
h	pointer
;	O
struct	O
cref_ref	struct
*	O
r	pointer
;	O
if	O
(	O
!	O
cref_initialized	int
)	O
{	O
if	O
(	O
!	O
bfd_hash_table_init	function
(	O
&	O
cref_table	struct
.	O
root	struct
,	O
cref_hash_newfunc	function
,	O
sizeof	O
(	O
struct	O
cref_hash_entry	struct
)	O
)	O
)	O
einfo	pointer
(	O
_	O
(	O
"%X%P: bfd_hash_table_init of cref table failed: %E\n"	pointer
)	O
)	O
;	O
cref_initialized	int
=	O
TRUE	int
;	O
}	O
h	pointer
=	O
cref_hash_lookup	O
(	O
&	O
cref_table	struct
,	O
name	pointer
,	O
TRUE	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
h	pointer
==	O
NULL	O
)	O
einfo	pointer
(	O
_	O
(	O
"%X%P: cref_hash_lookup failed: %E\n"	pointer
)	O
)	O
;	O
for	O
(	O
r	pointer
=	O
h	pointer
->	O
refs	pointer
;	O
r	pointer
!=	O
NULL	O
;	O
r	pointer
=	O
r	pointer
->	O
next	pointer
)	O
if	O
(	O
r	pointer
->	O
abfd	pointer
==	O
abfd	pointer
)	O
break	O
;	O
if	O
(	O
r	pointer
==	O
NULL	O
)	O
{	O
r	pointer
=	O
(	O
struct	O
cref_ref	struct
*	O
)	O
bfd_hash_allocate	function
(	O
&	O
cref_table	struct
.	O
root	struct
,	O
sizeof	O
*	O
r	pointer
)	O
;	O
if	O
(	O
r	pointer
==	O
NULL	O
)	O
einfo	pointer
(	O
_	O
(	O
"%X%P: cref alloc failed: %E\n"	pointer
)	O
)	O
;	O
r	pointer
->	O
next	pointer
=	O
h	pointer
->	O
refs	pointer
;	O
h	pointer
->	O
refs	pointer
=	O
r	pointer
;	O
r	pointer
->	O
abfd	pointer
=	O
abfd	pointer
;	O
r	pointer
->	O
def	struct
=	O
FALSE	int
;	O
r	pointer
->	O
common	int
=	O
FALSE	int
;	O
r	pointer
->	O
undef	struct
=	O
FALSE	int
;	O
}	O
if	O
(	O
bfd_is_und_section	function
(	O
section	pointer
)	O
)	O
r	pointer
->	O
undef	struct
=	O
TRUE	int
;	O
else	O
if	O
(	O
bfd_is_com_section	function
(	O
section	pointer
)	O
)	O
r	pointer
->	O
common	int
=	O
TRUE	int
;	O
else	O
r	pointer
->	O
def	struct
=	O
TRUE	int
;	O
}	O
bfd_boolean	int
handle_asneeded_cref	function
(	O
bfd	struct
*	O
abfd	pointer
ATTRIBUTE_UNUSED	O
,	O
enum	O
notice_asneeded_action	enum
act	enum
)	O
{	O
unsigned	O
int	O
i	pointer
;	O
if	O
(	O
!	O
cref_initialized	int
)	O
return	O
TRUE	int
;	O
if	O
(	O
act	enum
==	O
notice_as_needed	int
)	O
{	O
char	O
*	O
old_ent	pointer
,	O
*	O
old_ref	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
cref_table	struct
.	O
root	struct
.	O
size	int
;	O
i	pointer
++	O
)	O
{	O
struct	O
bfd_hash_entry	struct
*	O
p	pointer
;	O
struct	O
cref_hash_entry	struct
*	O
c	struct
;	O
struct	O
cref_ref	struct
*	O
r	pointer
;	O
for	O
(	O
p	pointer
=	O
cref_table	struct
.	O
root	struct
.	O
table	pointer
[	O
i	pointer
]	O
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
entsize	int
+=	O
cref_table	struct
.	O
root	struct
.	O
entsize	int
;	O
c	struct
=	O
(	O
struct	O
cref_hash_entry	struct
*	O
)	O
p	pointer
;	O
for	O
(	O
r	pointer
=	O
c	struct
->	O
refs	pointer
;	O
r	pointer
!=	O
NULL	O
;	O
r	pointer
=	O
r	pointer
->	O
next	pointer
)	O
refsize	long
+=	O
sizeof	O
(	O
struct	O
cref_ref	struct
)	O
;	O
}	O
}	O
tabsize	long
=	O
cref_table	struct
.	O
root	struct
.	O
size	int
*	O
sizeof	O
(	O
struct	O
bfd_hash_entry	struct
*	O
)	O
;	O
old_tab	pointer
=	O
xmalloc	function
(	O
tabsize	long
+	O
entsize	int
+	O
refsize	long
)	O
;	O
alloc_mark	pointer
=	O
bfd_hash_allocate	function
(	O
&	O
cref_table	struct
.	O
root	struct
,	O
1	int
)	O
;	O
if	O
(	O
alloc_mark	pointer
==	O
NULL	O
)	O
return	O
FALSE	int
;	O
memcpy	function
(	O
old_tab	pointer
,	O
cref_table	struct
.	O
root	struct
.	O
table	pointer
,	O
tabsize	long
)	O
;	O
old_ent	pointer
=	O
(	O
char	O
*	O
)	O
old_tab	pointer
+	O
tabsize	long
;	O
old_ref	pointer
=	O
(	O
char	O
*	O
)	O
old_ent	pointer
+	O
entsize	int
;	O
old_table	pointer
=	O
cref_table	struct
.	O
root	struct
.	O
table	pointer
;	O
old_size	int
=	O
cref_table	struct
.	O
root	struct
.	O
size	int
;	O
old_count	int
=	O
cref_table	struct
.	O
root	struct
.	O
count	int
;	O
old_symcount	long
=	O
cref_symcount	long
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
cref_table	struct
.	O
root	struct
.	O
size	int
;	O
i	pointer
++	O
)	O
{	O
struct	O
bfd_hash_entry	struct
*	O
p	pointer
;	O
struct	O
cref_hash_entry	struct
*	O
c	struct
;	O
struct	O
cref_ref	struct
*	O
r	pointer
;	O
for	O
(	O
p	pointer
=	O
cref_table	struct
.	O
root	struct
.	O
table	pointer
[	O
i	pointer
]	O
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
memcpy	function
(	O
old_ent	pointer
,	O
p	pointer
,	O
cref_table	struct
.	O
root	struct
.	O
entsize	int
)	O
;	O
old_ent	pointer
=	O
(	O
char	O
*	O
)	O
old_ent	pointer
+	O
cref_table	struct
.	O
root	struct
.	O
entsize	int
;	O
c	struct
=	O
(	O
struct	O
cref_hash_entry	struct
*	O
)	O
p	pointer
;	O
for	O
(	O
r	pointer
=	O
c	struct
->	O
refs	pointer
;	O
r	pointer
!=	O
NULL	O
;	O
r	pointer
=	O
r	pointer
->	O
next	pointer
)	O
{	O
memcpy	function
(	O
old_ref	pointer
,	O
r	pointer
,	O
sizeof	O
(	O
struct	O
cref_ref	struct
)	O
)	O
;	O
old_ref	pointer
=	O
(	O
char	O
*	O
)	O
old_ref	pointer
+	O
sizeof	O
(	O
struct	O
cref_ref	struct
)	O
;	O
}	O
}	O
}	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
act	enum
==	O
notice_not_needed	int
)	O
{	O
char	O
*	O
old_ent	pointer
,	O
*	O
old_ref	pointer
;	O
if	O
(	O
old_tab	pointer
==	O
NULL	O
)	O
{	O
bfd_hash_table_free	function
(	O
&	O
cref_table	struct
.	O
root	struct
)	O
;	O
cref_initialized	int
=	O
FALSE	int
;	O
return	O
TRUE	int
;	O
}	O
old_ent	pointer
=	O
(	O
char	O
*	O
)	O
old_tab	pointer
+	O
tabsize	long
;	O
old_ref	pointer
=	O
(	O
char	O
*	O
)	O
old_ent	pointer
+	O
entsize	int
;	O
cref_table	struct
.	O
root	struct
.	O
table	pointer
=	O
old_table	pointer
;	O
cref_table	struct
.	O
root	struct
.	O
size	int
=	O
old_size	int
;	O
cref_table	struct
.	O
root	struct
.	O
count	int
=	O
old_count	int
;	O
memcpy	function
(	O
cref_table	struct
.	O
root	struct
.	O
table	pointer
,	O
old_tab	pointer
,	O
tabsize	long
)	O
;	O
cref_symcount	long
=	O
old_symcount	long
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
i	pointer
<	O
cref_table	struct
.	O
root	struct
.	O
size	int
;	O
i	pointer
++	O
)	O
{	O
struct	O
bfd_hash_entry	struct
*	O
p	pointer
;	O
struct	O
cref_hash_entry	struct
*	O
c	struct
;	O
struct	O
cref_ref	struct
*	O
r	pointer
;	O
for	O
(	O
p	pointer
=	O
cref_table	struct
.	O
root	struct
.	O
table	pointer
[	O
i	pointer
]	O
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
memcpy	function
(	O
p	pointer
,	O
old_ent	pointer
,	O
cref_table	struct
.	O
root	struct
.	O
entsize	int
)	O
;	O
old_ent	pointer
=	O
(	O
char	O
*	O
)	O
old_ent	pointer
+	O
cref_table	struct
.	O
root	struct
.	O
entsize	int
;	O
c	struct
=	O
(	O
struct	O
cref_hash_entry	struct
*	O
)	O
p	pointer
;	O
for	O
(	O
r	pointer
=	O
c	struct
->	O
refs	pointer
;	O
r	pointer
!=	O
NULL	O
;	O
r	pointer
=	O
r	pointer
->	O
next	pointer
)	O
{	O
memcpy	function
(	O
r	pointer
,	O
old_ref	pointer
,	O
sizeof	O
(	O
struct	O
cref_ref	struct
)	O
)	O
;	O
old_ref	pointer
=	O
(	O
char	O
*	O
)	O
old_ref	pointer
+	O
sizeof	O
(	O
struct	O
cref_ref	struct
)	O
;	O
}	O
}	O
}	O
objalloc_free_block	function
(	O
(	O
struct	O
objalloc	struct
*	O
)	O
cref_table	struct
.	O
root	struct
.	O
memory	pointer
,	O
alloc_mark	pointer
)	O
;	O
}	O
else	O
if	O
(	O
act	enum
!=	O
notice_needed	int
)	O
return	O
FALSE	int
;	O
free	function
(	O
old_tab	pointer
)	O
;	O
old_tab	pointer
=	O
NULL	O
;	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
cref_fill_array	function
(	O
struct	O
cref_hash_entry	struct
*	O
h	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
cref_hash_entry	struct
*	O
*	O
*	O
pph	pointer
=	O
(	O
struct	O
cref_hash_entry	struct
*	O
*	O
*	O
)	O
data	pointer
;	O
ASSERT	O
(	O
h	pointer
->	O
demangled	pointer
==	O
NULL	O
)	O
;	O
h	pointer
->	O
demangled	pointer
=	O
bfd_demangle	function
(	O
link_info	struct
.	O
output_bfd	pointer
,	O
h	pointer
->	O
root	struct
.	O
string	pointer
,	O
DMGL_ANSI	O
|	O
DMGL_PARAMS	O
)	O
;	O
if	O
(	O
h	pointer
->	O
demangled	pointer
==	O
NULL	O
)	O
h	pointer
->	O
demangled	pointer
=	O
h	pointer
->	O
root	struct
.	O
string	pointer
;	O
*	O
*	O
pph	pointer
=	O
h	pointer
;	O
++	O
*	O
pph	pointer
;	O
return	O
TRUE	int
;	O
}	O
static	O
int	O
cref_sort_array	function
(	O
const	O
void	O
*	O
a1	pointer
,	O
const	O
void	O
*	O
a2	pointer
)	O
{	O
const	O
struct	O
cref_hash_entry	struct
*	O
const	O
*	O
p1	pointer
=	O
(	O
const	O
struct	O
cref_hash_entry	struct
*	O
const	O
*	O
)	O
a1	pointer
;	O
const	O
struct	O
cref_hash_entry	struct
*	O
const	O
*	O
p2	pointer
=	O
(	O
const	O
struct	O
cref_hash_entry	struct
*	O
const	O
*	O
)	O
a2	pointer
;	O
if	O
(	O
demangling	int
)	O
return	O
strcmp	function
(	O
(	O
*	O
p1	pointer
)	O
->	O
demangled	pointer
,	O
(	O
*	O
p2	pointer
)	O
->	O
demangled	pointer
)	O
;	O
else	O
return	O
strcmp	function
(	O
(	O
*	O
p1	pointer
)	O
->	O
root	struct
.	O
string	pointer
,	O
(	O
*	O
p2	pointer
)	O
->	O
root	struct
.	O
string	pointer
)	O
;	O
}	O
void	O
output_cref	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
int	O
len	long
;	O
struct	O
cref_hash_entry	struct
*	O
*	O
csyms	pointer
,	O
*	O
*	O
csym_fill	pointer
,	O
*	O
*	O
csym	pointer
,	O
*	O
*	O
csym_end	pointer
;	O
const	O
char	O
*	O
msg	pointer
;	O
fprintf	function
(	O
fp	pointer
,	O
_	O
(	O
"\nCross Reference Table\n\n"	pointer
)	O
)	O
;	O
msg	pointer
=	O
_	O
(	O
"Symbol"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"%s"	pointer
,	O
msg	pointer
)	O
;	O
len	long
=	O
strlen	function
(	O
msg	pointer
)	O
;	O
while	O
(	O
len	long
<	O
FILECOL	O
)	O
{	O
putc	function
(	O
' '	O
,	O
fp	pointer
)	O
;	O
++	O
len	long
;	O
}	O
fprintf	function
(	O
fp	pointer
,	O
_	O
(	O
"File\n"	pointer
)	O
)	O
;	O
if	O
(	O
!	O
cref_initialized	int
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
_	O
(	O
"No symbols\n"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
csyms	pointer
=	O
(	O
struct	O
cref_hash_entry	struct
*	O
*	O
)	O
xmalloc	function
(	O
cref_symcount	long
*	O
sizeof	O
(	O
*	O
csyms	pointer
)	O
)	O
;	O
csym_fill	pointer
=	O
csyms	pointer
;	O
cref_hash_traverse	O
(	O
&	O
cref_table	struct
,	O
cref_fill_array	function
,	O
&	O
csym_fill	pointer
)	O
;	O
ASSERT	O
(	O
(	O
size_t	long
)	O
(	O
csym_fill	pointer
-	O
csyms	pointer
)	O
==	O
cref_symcount	long
)	O
;	O
qsort	function
(	O
csyms	pointer
,	O
cref_symcount	long
,	O
sizeof	O
(	O
*	O
csyms	pointer
)	O
,	O
cref_sort_array	function
)	O
;	O
csym_end	pointer
=	O
csyms	pointer
+	O
cref_symcount	long
;	O
for	O
(	O
csym	pointer
=	O
csyms	pointer
;	O
csym	pointer
<	O
csym_end	pointer
;	O
csym	pointer
++	O
)	O
output_one_cref	function
(	O
fp	pointer
,	O
*	O
csym	pointer
)	O
;	O
}	O
static	O
void	O
output_one_cref	function
(	O
FILE	struct
*	O
fp	pointer
,	O
struct	O
cref_hash_entry	struct
*	O
h	pointer
)	O
{	O
int	O
len	long
;	O
struct	O
bfd_link_hash_entry	struct
*	O
hl	pointer
;	O
struct	O
cref_ref	struct
*	O
r	pointer
;	O
hl	pointer
=	O
bfd_link_hash_lookup	function
(	O
link_info	struct
.	O
hash	long
,	O
h	pointer
->	O
root	struct
.	O
string	pointer
,	O
FALSE	int
,	O
FALSE	int
,	O
TRUE	int
)	O
;	O
if	O
(	O
hl	pointer
==	O
NULL	O
)	O
einfo	pointer
(	O
_	O
(	O
"%P: symbol `%pT' missing from main hash table\n"	pointer
)	O
,	O
h	pointer
->	O
root	struct
.	O
string	pointer
)	O
;	O
else	O
{	O
if	O
(	O
hl	pointer
->	O
type	enum
==	O
bfd_link_hash_defined	int
)	O
{	O
if	O
(	O
hl	pointer
->	O
u	union
.	O
def	struct
.	O
section	pointer
->	O
output_section	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
hl	pointer
->	O
u	union
.	O
def	struct
.	O
section	pointer
->	O
owner	pointer
!=	O
NULL	O
&&	O
(	O
hl	pointer
->	O
u	union
.	O
def	struct
.	O
section	pointer
->	O
owner	pointer
->	O
flags	int
&	O
DYNAMIC	int
)	O
!=	O
0	int
)	O
{	O
for	O
(	O
r	pointer
=	O
h	pointer
->	O
refs	pointer
;	O
r	pointer
!=	O
NULL	O
;	O
r	pointer
=	O
r	pointer
->	O
next	pointer
)	O
if	O
(	O
(	O
r	pointer
->	O
abfd	pointer
->	O
flags	int
&	O
DYNAMIC	int
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
r	pointer
==	O
NULL	O
)	O
return	O
;	O
}	O
}	O
}	O
if	O
(	O
demangling	int
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"%s "	pointer
,	O
h	pointer
->	O
demangled	pointer
)	O
;	O
len	long
=	O
strlen	function
(	O
h	pointer
->	O
demangled	pointer
)	O
+	O
1	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"%s "	pointer
,	O
h	pointer
->	O
root	struct
.	O
string	pointer
)	O
;	O
len	long
=	O
strlen	function
(	O
h	pointer
->	O
root	struct
.	O
string	pointer
)	O
+	O
1	int
;	O
}	O
for	O
(	O
r	pointer
=	O
h	pointer
->	O
refs	pointer
;	O
r	pointer
!=	O
NULL	O
;	O
r	pointer
=	O
r	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
r	pointer
->	O
def	struct
)	O
{	O
while	O
(	O
len	long
<	O
FILECOL	O
)	O
{	O
putc	function
(	O
' '	O
,	O
fp	pointer
)	O
;	O
++	O
len	long
;	O
}	O
lfinfo	function
(	O
fp	pointer
,	O
"%pB\n"	pointer
,	O
r	pointer
->	O
abfd	pointer
)	O
;	O
len	long
=	O
0	int
;	O
}	O
}	O
for	O
(	O
r	pointer
=	O
h	pointer
->	O
refs	pointer
;	O
r	pointer
!=	O
NULL	O
;	O
r	pointer
=	O
r	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
r	pointer
->	O
common	int
)	O
{	O
while	O
(	O
len	long
<	O
FILECOL	O
)	O
{	O
putc	function
(	O
' '	O
,	O
fp	pointer
)	O
;	O
++	O
len	long
;	O
}	O
lfinfo	function
(	O
fp	pointer
,	O
"%pB\n"	pointer
,	O
r	pointer
->	O
abfd	pointer
)	O
;	O
len	long
=	O
0	int
;	O
}	O
}	O
for	O
(	O
r	pointer
=	O
h	pointer
->	O
refs	pointer
;	O
r	pointer
!=	O
NULL	O
;	O
r	pointer
=	O
r	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
!	O
r	pointer
->	O
def	struct
&&	O
!	O
r	pointer
->	O
common	int
)	O
{	O
while	O
(	O
len	long
<	O
FILECOL	O
)	O
{	O
putc	function
(	O
' '	O
,	O
fp	pointer
)	O
;	O
++	O
len	long
;	O
}	O
lfinfo	function
(	O
fp	pointer
,	O
"%pB\n"	pointer
,	O
r	pointer
->	O
abfd	pointer
)	O
;	O
len	long
=	O
0	int
;	O
}	O
}	O
ASSERT	O
(	O
len	long
==	O
0	int
)	O
;	O
}	O
void	O
check_nocrossrefs	function
(	O
void	O
)	O
{	O
if	O
(	O
!	O
cref_initialized	int
)	O
return	O
;	O
cref_hash_traverse	O
(	O
&	O
cref_table	struct
,	O
check_nocrossref	function
,	O
NULL	O
)	O
;	O
lang_for_each_file	function
(	O
check_local_sym_xref	function
)	O
;	O
}	O
static	O
void	O
check_local_sym_xref	function
(	O
lang_input_statement_type	struct
*	O
statement	pointer
)	O
{	O
bfd	struct
*	O
abfd	pointer
;	O
asymbol	struct
*	O
*	O
syms	pointer
;	O
abfd	pointer
=	O
statement	pointer
->	O
the_bfd	pointer
;	O
if	O
(	O
abfd	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
!	O
bfd_generic_link_read_symbols	function
(	O
abfd	pointer
)	O
)	O
einfo	pointer
(	O
_	O
(	O
"%F%P: %pB: could not read symbols: %E\n"	pointer
)	O
,	O
abfd	pointer
)	O
;	O
for	O
(	O
syms	pointer
=	O
bfd_get_outsymbols	function
(	O
abfd	pointer
)	O
;	O
*	O
syms	pointer
;	O
++	O
syms	pointer
)	O
{	O
asymbol	struct
*	O
sym	pointer
=	O
*	O
syms	pointer
;	O
if	O
(	O
sym	pointer
->	O
flags	int
&	O
(	O
BSF_GLOBAL	O
|	O
BSF_WARNING	O
|	O
BSF_INDIRECT	O
|	O
BSF_FILE	O
)	O
)	O
continue	O
;	O
if	O
(	O
(	O
sym	pointer
->	O
flags	int
&	O
(	O
BSF_LOCAL	O
|	O
BSF_SECTION_SYM	O
)	O
)	O
!=	O
0	int
&&	O
sym	pointer
->	O
section	pointer
->	O
output_section	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
outsecname	pointer
,	O
*	O
symname	pointer
;	O
struct	O
lang_nocrossrefs	struct
*	O
ncrs	pointer
;	O
struct	O
lang_nocrossref	struct
*	O
ncr	pointer
;	O
outsecname	pointer
=	O
sym	pointer
->	O
section	pointer
->	O
output_section	pointer
->	O
name	pointer
;	O
symname	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
sym	pointer
->	O
flags	int
&	O
BSF_SECTION_SYM	O
)	O
==	O
0	int
)	O
symname	pointer
=	O
sym	pointer
->	O
name	pointer
;	O
for	O
(	O
ncrs	pointer
=	O
nocrossref_list	pointer
;	O
ncrs	pointer
!=	O
NULL	O
;	O
ncrs	pointer
=	O
ncrs	pointer
->	O
next	pointer
)	O
for	O
(	O
ncr	pointer
=	O
ncrs	pointer
->	O
list	pointer
;	O
ncr	pointer
!=	O
NULL	O
;	O
ncr	pointer
=	O
ncr	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
ncr	pointer
->	O
name	pointer
,	O
outsecname	pointer
)	O
==	O
0	int
)	O
check_refs	function
(	O
symname	pointer
,	O
FALSE	int
,	O
sym	pointer
->	O
section	pointer
,	O
abfd	pointer
,	O
ncrs	pointer
)	O
;	O
if	O
(	O
ncrs	pointer
->	O
onlyfirst	int
)	O
break	O
;	O
}	O
}	O
}	O
}	O
static	O
bfd_boolean	int
check_nocrossref	function
(	O
struct	O
cref_hash_entry	struct
*	O
h	pointer
,	O
void	O
*	O
ignore	pointer
ATTRIBUTE_UNUSED	O
)	O
{	O
struct	O
bfd_link_hash_entry	struct
*	O
hl	pointer
;	O
asection	struct
*	O
defsec	pointer
;	O
const	O
char	O
*	O
defsecname	pointer
;	O
struct	O
lang_nocrossrefs	struct
*	O
ncrs	pointer
;	O
struct	O
lang_nocrossref	struct
*	O
ncr	pointer
;	O
struct	O
cref_ref	struct
*	O
ref	pointer
;	O
hl	pointer
=	O
bfd_link_hash_lookup	function
(	O
link_info	struct
.	O
hash	long
,	O
h	pointer
->	O
root	struct
.	O
string	pointer
,	O
FALSE	int
,	O
FALSE	int
,	O
TRUE	int
)	O
;	O
if	O
(	O
hl	pointer
==	O
NULL	O
)	O
{	O
einfo	pointer
(	O
_	O
(	O
"%P: symbol `%pT' missing from main hash table\n"	pointer
)	O
,	O
h	pointer
->	O
root	struct
.	O
string	pointer
)	O
;	O
return	O
TRUE	int
;	O
}	O
if	O
(	O
hl	pointer
->	O
type	enum
!=	O
bfd_link_hash_defined	int
&&	O
hl	pointer
->	O
type	enum
!=	O
bfd_link_hash_defweak	int
)	O
return	O
TRUE	int
;	O
defsec	pointer
=	O
hl	pointer
->	O
u	union
.	O
def	struct
.	O
section	pointer
->	O
output_section	pointer
;	O
if	O
(	O
defsec	pointer
==	O
NULL	O
)	O
return	O
TRUE	int
;	O
defsecname	pointer
=	O
bfd_section_name	function
(	O
defsec	pointer
)	O
;	O
for	O
(	O
ncrs	pointer
=	O
nocrossref_list	pointer
;	O
ncrs	pointer
!=	O
NULL	O
;	O
ncrs	pointer
=	O
ncrs	pointer
->	O
next	pointer
)	O
for	O
(	O
ncr	pointer
=	O
ncrs	pointer
->	O
list	pointer
;	O
ncr	pointer
!=	O
NULL	O
;	O
ncr	pointer
=	O
ncr	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
ncr	pointer
->	O
name	pointer
,	O
defsecname	pointer
)	O
==	O
0	int
)	O
for	O
(	O
ref	pointer
=	O
h	pointer
->	O
refs	pointer
;	O
ref	pointer
!=	O
NULL	O
;	O
ref	pointer
=	O
ref	pointer
->	O
next	pointer
)	O
check_refs	function
(	O
hl	pointer
->	O
root	struct
.	O
string	pointer
,	O
TRUE	int
,	O
hl	pointer
->	O
u	union
.	O
def	struct
.	O
section	pointer
,	O
ref	pointer
->	O
abfd	pointer
,	O
ncrs	pointer
)	O
;	O
if	O
(	O
ncrs	pointer
->	O
onlyfirst	int
)	O
break	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
struct	O
check_refs_info	struct
{	O
const	O
char	O
*	O
sym_name	pointer
;	O
asection	struct
*	O
defsec	pointer
;	O
struct	O
lang_nocrossrefs	struct
*	O
ncrs	pointer
;	O
asymbol	struct
*	O
*	O
asymbols	pointer
;	O
bfd_boolean	int
global	int
;	O
}	O
;	O
static	O
void	O
check_refs	function
(	O
const	O
char	O
*	O
name	pointer
,	O
bfd_boolean	int
global	int
,	O
asection	struct
*	O
sec	pointer
,	O
bfd	struct
*	O
abfd	pointer
,	O
struct	O
lang_nocrossrefs	struct
*	O
ncrs	pointer
)	O
{	O
struct	O
check_refs_info	struct
info	pointer
;	O
if	O
(	O
!	O
bfd_generic_link_read_symbols	function
(	O
abfd	pointer
)	O
)	O
einfo	pointer
(	O
_	O
(	O
"%F%P: %pB: could not read symbols: %E\n"	pointer
)	O
,	O
abfd	pointer
)	O
;	O
info	pointer
.	O
sym_name	pointer
=	O
name	pointer
;	O
info	pointer
.	O
global	int
=	O
global	int
;	O
info	pointer
.	O
defsec	pointer
=	O
sec	pointer
;	O
info	pointer
.	O
ncrs	pointer
=	O
ncrs	pointer
;	O
info	pointer
.	O
asymbols	pointer
=	O
bfd_get_outsymbols	function
(	O
abfd	pointer
)	O
;	O
bfd_map_over_sections	function
(	O
abfd	pointer
,	O
check_reloc_refs	function
,	O
&	O
info	pointer
)	O
;	O
}	O
static	O
void	O
check_reloc_refs	function
(	O
bfd	struct
*	O
abfd	pointer
,	O
asection	struct
*	O
sec	pointer
,	O
void	O
*	O
iarg	pointer
)	O
{	O
struct	O
check_refs_info	struct
*	O
info	pointer
=	O
(	O
struct	O
check_refs_info	struct
*	O
)	O
iarg	pointer
;	O
asection	struct
*	O
outsec	pointer
;	O
const	O
char	O
*	O
outsecname	pointer
;	O
asection	struct
*	O
outdefsec	pointer
;	O
const	O
char	O
*	O
outdefsecname	pointer
;	O
struct	O
lang_nocrossref	struct
*	O
ncr	pointer
;	O
const	O
char	O
*	O
symname	pointer
;	O
bfd_boolean	int
global	int
;	O
long	O
relsize	long
;	O
arelent	struct
*	O
*	O
relpp	pointer
;	O
long	O
relcount	long
;	O
arelent	struct
*	O
*	O
p	pointer
,	O
*	O
*	O
pend	pointer
;	O
outsec	pointer
=	O
sec	pointer
->	O
output_section	pointer
;	O
outsecname	pointer
=	O
bfd_section_name	function
(	O
outsec	pointer
)	O
;	O
outdefsec	pointer
=	O
info	pointer
->	O
defsec	pointer
->	O
output_section	pointer
;	O
outdefsecname	pointer
=	O
bfd_section_name	function
(	O
outdefsec	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
outsecname	pointer
,	O
outdefsecname	pointer
)	O
==	O
0	int
)	O
return	O
;	O
for	O
(	O
ncr	pointer
=	O
info	pointer
->	O
ncrs	pointer
->	O
list	pointer
;	O
ncr	pointer
!=	O
NULL	O
;	O
ncr	pointer
=	O
ncr	pointer
->	O
next	pointer
)	O
if	O
(	O
strcmp	function
(	O
outsecname	pointer
,	O
ncr	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
ncr	pointer
==	O
NULL	O
)	O
return	O
;	O
symname	pointer
=	O
info	pointer
->	O
sym_name	pointer
;	O
global	int
=	O
info	pointer
->	O
global	int
;	O
relsize	long
=	O
bfd_get_reloc_upper_bound	function
(	O
abfd	pointer
,	O
sec	pointer
)	O
;	O
if	O
(	O
relsize	long
<	O
0	int
)	O
einfo	pointer
(	O
_	O
(	O
"%F%P: %pB: could not read relocs: %E\n"	pointer
)	O
,	O
abfd	pointer
)	O
;	O
if	O
(	O
relsize	long
==	O
0	int
)	O
return	O
;	O
relpp	pointer
=	O
(	O
arelent	struct
*	O
*	O
)	O
xmalloc	function
(	O
relsize	long
)	O
;	O
relcount	long
=	O
bfd_canonicalize_reloc	function
(	O
abfd	pointer
,	O
sec	pointer
,	O
relpp	pointer
,	O
info	pointer
->	O
asymbols	pointer
)	O
;	O
if	O
(	O
relcount	long
<	O
0	int
)	O
einfo	pointer
(	O
_	O
(	O
"%F%P: %pB: could not read relocs: %E\n"	pointer
)	O
,	O
abfd	pointer
)	O
;	O
p	pointer
=	O
relpp	pointer
;	O
pend	pointer
=	O
p	pointer
+	O
relcount	long
;	O
for	O
(	O
;	O
p	pointer
<	O
pend	pointer
&&	O
*	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
++	O
)	O
{	O
arelent	struct
*	O
q	pointer
=	O
*	O
p	pointer
;	O
if	O
(	O
q	pointer
->	O
sym_ptr_ptr	pointer
!=	O
NULL	O
&&	O
*	O
q	pointer
->	O
sym_ptr_ptr	pointer
!=	O
NULL	O
&&	O
(	O
(	O
global	int
&&	O
(	O
bfd_is_und_section	function
(	O
bfd_asymbol_section	function
(	O
*	O
q	pointer
->	O
sym_ptr_ptr	pointer
)	O
)	O
||	O
bfd_is_com_section	function
(	O
bfd_asymbol_section	function
(	O
*	O
q	pointer
->	O
sym_ptr_ptr	pointer
)	O
)	O
||	O
(	O
(	O
*	O
q	pointer
->	O
sym_ptr_ptr	pointer
)	O
->	O
flags	int
&	O
(	O
BSF_GLOBAL	O
|	O
BSF_WEAK	O
)	O
)	O
!=	O
0	int
)	O
)	O
||	O
(	O
!	O
global	int
&&	O
(	O
(	O
*	O
q	pointer
->	O
sym_ptr_ptr	pointer
)	O
->	O
flags	int
&	O
(	O
BSF_LOCAL	O
|	O
BSF_SECTION_SYM	O
)	O
)	O
!=	O
0	int
&&	O
bfd_asymbol_section	function
(	O
*	O
q	pointer
->	O
sym_ptr_ptr	pointer
)	O
==	O
info	pointer
->	O
defsec	pointer
)	O
)	O
&&	O
(	O
symname	pointer
!=	O
NULL	O
?	O
strcmp	function
(	O
bfd_asymbol_name	function
(	O
*	O
q	pointer
->	O
sym_ptr_ptr	pointer
)	O
,	O
symname	pointer
)	O
==	O
0	int
:	O
(	O
(	O
*	O
q	pointer
->	O
sym_ptr_ptr	pointer
)	O
->	O
flags	int
&	O
BSF_SECTION_SYM	O
)	O
!=	O
0	int
)	O
)	O
{	O
einfo	pointer
(	O
_	O
(	O
"%X%P: %C: prohibited cross reference from %s to `%pT' in %s\n"	pointer
)	O
,	O
abfd	pointer
,	O
sec	pointer
,	O
q	pointer
->	O
address	long
,	O
outsecname	pointer
,	O
bfd_asymbol_name	function
(	O
*	O
q	pointer
->	O
sym_ptr_ptr	pointer
)	O
,	O
outdefsecname	pointer
)	O
;	O
}	O
}	O
free	function
(	O
relpp	pointer
)	O
;	O
}	O
