static	O
const	O
unsigned	O
char	O
fillbuf	array
[	O
64	int
]	O
=	O
{	O
0x80	int
,	O
0	int
}	O
;	O
void	O
sha256_init_ctx	function
(	O
struct	O
sha256_ctx	struct
*	O
ctx	pointer
)	O
{	O
ctx	pointer
->	O
state	array
[	O
0	int
]	O
=	O
0x6a09e667UL	int
;	O
ctx	pointer
->	O
state	array
[	O
1	int
]	O
=	O
0xbb67ae85UL	int
;	O
ctx	pointer
->	O
state	array
[	O
2	int
]	O
=	O
0x3c6ef372UL	int
;	O
ctx	pointer
->	O
state	array
[	O
3	int
]	O
=	O
0xa54ff53aUL	int
;	O
ctx	pointer
->	O
state	array
[	O
4	int
]	O
=	O
0x510e527fUL	int
;	O
ctx	pointer
->	O
state	array
[	O
5	int
]	O
=	O
0x9b05688cUL	int
;	O
ctx	pointer
->	O
state	array
[	O
6	int
]	O
=	O
0x1f83d9abUL	int
;	O
ctx	pointer
->	O
state	array
[	O
7	int
]	O
=	O
0x5be0cd19UL	int
;	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
=	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
=	O
0	int
;	O
ctx	pointer
->	O
buflen	long
=	O
0	int
;	O
}	O
void	O
sha224_init_ctx	function
(	O
struct	O
sha256_ctx	struct
*	O
ctx	pointer
)	O
{	O
ctx	pointer
->	O
state	array
[	O
0	int
]	O
=	O
0xc1059ed8UL	int
;	O
ctx	pointer
->	O
state	array
[	O
1	int
]	O
=	O
0x367cd507UL	int
;	O
ctx	pointer
->	O
state	array
[	O
2	int
]	O
=	O
0x3070dd17UL	int
;	O
ctx	pointer
->	O
state	array
[	O
3	int
]	O
=	O
0xf70e5939UL	int
;	O
ctx	pointer
->	O
state	array
[	O
4	int
]	O
=	O
0xffc00b31UL	int
;	O
ctx	pointer
->	O
state	array
[	O
5	int
]	O
=	O
0x68581511UL	int
;	O
ctx	pointer
->	O
state	array
[	O
6	int
]	O
=	O
0x64f98fa7UL	int
;	O
ctx	pointer
->	O
state	array
[	O
7	int
]	O
=	O
0xbefa4fa4UL	int
;	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
=	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
=	O
0	int
;	O
ctx	pointer
->	O
buflen	long
=	O
0	int
;	O
}	O
static	O
void	O
set_uint32	function
(	O
char	O
*	O
cp	pointer
,	O
uint32_t	int
v	int
)	O
{	O
memcpy	function
(	O
cp	pointer
,	O
&	O
v	int
,	O
sizeof	O
v	int
)	O
;	O
}	O
void	O
*	O
sha256_read_ctx	function
(	O
const	O
struct	O
sha256_ctx	struct
*	O
ctx	pointer
,	O
void	O
*	O
resbuf	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
r	pointer
=	O
resbuf	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
8	int
;	O
i	int
++	O
)	O
set_uint32	function
(	O
r	pointer
+	O
i	int
*	O
sizeof	O
ctx	pointer
->	O
state	array
[	O
0	int
]	O
,	O
SWAP	O
(	O
ctx	pointer
->	O
state	array
[	O
i	int
]	O
)	O
)	O
;	O
return	O
resbuf	pointer
;	O
}	O
void	O
*	O
sha224_read_ctx	function
(	O
const	O
struct	O
sha256_ctx	struct
*	O
ctx	pointer
,	O
void	O
*	O
resbuf	pointer
)	O
{	O
int	O
i	int
;	O
char	O
*	O
r	pointer
=	O
resbuf	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
7	int
;	O
i	int
++	O
)	O
set_uint32	function
(	O
r	pointer
+	O
i	int
*	O
sizeof	O
ctx	pointer
->	O
state	array
[	O
0	int
]	O
,	O
SWAP	O
(	O
ctx	pointer
->	O
state	array
[	O
i	int
]	O
)	O
)	O
;	O
return	O
resbuf	pointer
;	O
}	O
static	O
void	O
sha256_conclude_ctx	function
(	O
struct	O
sha256_ctx	struct
*	O
ctx	pointer
)	O
{	O
size_t	long
bytes	long
=	O
ctx	pointer
->	O
buflen	long
;	O
size_t	long
size	long
=	O
(	O
bytes	long
<	O
56	int
)	O
?	O
64	int
/	O
4	int
:	O
64	int
*	O
2	int
/	O
4	int
;	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
+=	O
bytes	long
;	O
if	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
<	O
bytes	long
)	O
++	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
;	O
set_uint32	function
(	O
(	O
char	O
*	O
)	O
&	O
ctx	pointer
->	O
buffer	array
[	O
size	long
-	O
2	int
]	O
,	O
SWAP	O
(	O
(	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
<<	O
3	int
)	O
|	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
>>	O
29	int
)	O
)	O
)	O
;	O
set_uint32	function
(	O
(	O
char	O
*	O
)	O
&	O
ctx	pointer
->	O
buffer	array
[	O
size	long
-	O
1	int
]	O
,	O
SWAP	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
<<	O
3	int
)	O
)	O
;	O
memcpy	function
(	O
&	O
(	O
(	O
char	O
*	O
)	O
ctx	pointer
->	O
buffer	array
)	O
[	O
bytes	long
]	O
,	O
fillbuf	array
,	O
(	O
size	long
-	O
2	int
)	O
*	O
4	int
-	O
bytes	long
)	O
;	O
sha256_process_block	function
(	O
ctx	pointer
->	O
buffer	array
,	O
size	long
*	O
4	int
,	O
ctx	pointer
)	O
;	O
}	O
void	O
*	O
sha256_finish_ctx	function
(	O
struct	O
sha256_ctx	struct
*	O
ctx	pointer
,	O
void	O
*	O
resbuf	pointer
)	O
{	O
sha256_conclude_ctx	function
(	O
ctx	pointer
)	O
;	O
return	O
sha256_read_ctx	function
(	O
ctx	pointer
,	O
resbuf	pointer
)	O
;	O
}	O
void	O
*	O
sha224_finish_ctx	function
(	O
struct	O
sha256_ctx	struct
*	O
ctx	pointer
,	O
void	O
*	O
resbuf	pointer
)	O
{	O
sha256_conclude_ctx	function
(	O
ctx	pointer
)	O
;	O
return	O
sha224_read_ctx	function
(	O
ctx	pointer
,	O
resbuf	pointer
)	O
;	O
}	O
static	O
int	O
shaxxx_stream	function
(	O
FILE	struct
*	O
stream	pointer
,	O
char	O
const	O
*	O
alg	pointer
,	O
void	O
*	O
resblock	pointer
,	O
ssize_t	long
hashlen	long
,	O
void	O
(	O
*	O
init_ctx	pointer
)	O
(	O
struct	O
sha256_ctx	struct
*	O
)	O
,	O
void	O
*	O
(	O
*	O
finish_ctx	pointer
)	O
(	O
struct	O
sha256_ctx	struct
*	O
,	O
void	O
*	O
)	O
)	O
{	O
switch	O
(	O
afalg_stream	function
(	O
stream	pointer
,	O
alg	pointer
,	O
resblock	pointer
,	O
hashlen	long
)	O
)	O
{	O
case	O
0	int
:	O
return	O
0	int
;	O
case	O
-	O
EIO	int
:	O
return	O
1	int
;	O
}	O
char	O
*	O
buffer	array
=	O
malloc	function
(	O
BLOCKSIZE	int
+	O
72	int
)	O
;	O
if	O
(	O
!	O
buffer	array
)	O
return	O
1	int
;	O
struct	O
sha256_ctx	struct
ctx	pointer
;	O
init_ctx	pointer
(	O
&	O
ctx	pointer
)	O
;	O
size_t	long
sum	long
;	O
while	O
(	O
1	int
)	O
{	O
size_t	long
n	long
;	O
sum	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
feof	function
(	O
stream	pointer
)	O
)	O
goto	O
process_partial_block	O
;	O
n	long
=	O
fread	function
(	O
buffer	array
+	O
sum	long
,	O
1	int
,	O
BLOCKSIZE	int
-	O
sum	long
,	O
stream	pointer
)	O
;	O
sum	long
+=	O
n	long
;	O
if	O
(	O
sum	long
==	O
BLOCKSIZE	int
)	O
break	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
if	O
(	O
ferror	function
(	O
stream	pointer
)	O
)	O
{	O
free	function
(	O
buffer	array
)	O
;	O
return	O
1	int
;	O
}	O
goto	O
process_partial_block	O
;	O
}	O
}	O
sha256_process_block	function
(	O
buffer	array
,	O
BLOCKSIZE	int
,	O
&	O
ctx	pointer
)	O
;	O
}	O
process_partial_block	O
:	O
;	O
if	O
(	O
sum	long
>	O
0	int
)	O
sha256_process_bytes	function
(	O
buffer	array
,	O
sum	long
,	O
&	O
ctx	pointer
)	O
;	O
finish_ctx	pointer
(	O
&	O
ctx	pointer
,	O
resblock	pointer
)	O
;	O
free	function
(	O
buffer	array
)	O
;	O
return	O
0	int
;	O
}	O
int	O
sha256_stream	function
(	O
FILE	struct
*	O
stream	pointer
,	O
void	O
*	O
resblock	pointer
)	O
{	O
return	O
shaxxx_stream	function
(	O
stream	pointer
,	O
"sha256"	pointer
,	O
resblock	pointer
,	O
SHA256_DIGEST_SIZE	int
,	O
sha256_init_ctx	function
,	O
sha256_finish_ctx	function
)	O
;	O
}	O
int	O
sha224_stream	function
(	O
FILE	struct
*	O
stream	pointer
,	O
void	O
*	O
resblock	pointer
)	O
{	O
return	O
shaxxx_stream	function
(	O
stream	pointer
,	O
"sha224"	pointer
,	O
resblock	pointer
,	O
SHA224_DIGEST_SIZE	int
,	O
sha224_init_ctx	function
,	O
sha224_finish_ctx	function
)	O
;	O
}	O
void	O
*	O
sha256_buffer	function
(	O
const	O
char	O
*	O
buffer	array
,	O
size_t	long
len	long
,	O
void	O
*	O
resblock	pointer
)	O
{	O
struct	O
sha256_ctx	struct
ctx	pointer
;	O
sha256_init_ctx	function
(	O
&	O
ctx	pointer
)	O
;	O
sha256_process_bytes	function
(	O
buffer	array
,	O
len	long
,	O
&	O
ctx	pointer
)	O
;	O
return	O
sha256_finish_ctx	function
(	O
&	O
ctx	pointer
,	O
resblock	pointer
)	O
;	O
}	O
void	O
*	O
sha224_buffer	function
(	O
const	O
char	O
*	O
buffer	array
,	O
size_t	long
len	long
,	O
void	O
*	O
resblock	pointer
)	O
{	O
struct	O
sha256_ctx	struct
ctx	pointer
;	O
sha224_init_ctx	function
(	O
&	O
ctx	pointer
)	O
;	O
sha256_process_bytes	function
(	O
buffer	array
,	O
len	long
,	O
&	O
ctx	pointer
)	O
;	O
return	O
sha224_finish_ctx	function
(	O
&	O
ctx	pointer
,	O
resblock	pointer
)	O
;	O
}	O
void	O
sha256_process_bytes	function
(	O
const	O
void	O
*	O
buffer	array
,	O
size_t	long
len	long
,	O
struct	O
sha256_ctx	struct
*	O
ctx	pointer
)	O
{	O
if	O
(	O
ctx	pointer
->	O
buflen	long
!=	O
0	int
)	O
{	O
size_t	long
left_over	long
=	O
ctx	pointer
->	O
buflen	long
;	O
size_t	long
add	long
=	O
128	int
-	O
left_over	long
>	O
len	long
?	O
len	long
:	O
128	int
-	O
left_over	long
;	O
memcpy	function
(	O
&	O
(	O
(	O
char	O
*	O
)	O
ctx	pointer
->	O
buffer	array
)	O
[	O
left_over	long
]	O
,	O
buffer	array
,	O
add	long
)	O
;	O
ctx	pointer
->	O
buflen	long
+=	O
add	long
;	O
if	O
(	O
ctx	pointer
->	O
buflen	long
>	O
64	int
)	O
{	O
sha256_process_block	function
(	O
ctx	pointer
->	O
buffer	array
,	O
ctx	pointer
->	O
buflen	long
&	O
~	O
63	int
,	O
ctx	pointer
)	O
;	O
ctx	pointer
->	O
buflen	long
&=	O
63	int
;	O
memcpy	function
(	O
ctx	pointer
->	O
buffer	array
,	O
&	O
(	O
(	O
char	O
*	O
)	O
ctx	pointer
->	O
buffer	array
)	O
[	O
(	O
left_over	long
+	O
add	long
)	O
&	O
~	O
63	int
]	O
,	O
ctx	pointer
->	O
buflen	long
)	O
;	O
}	O
buffer	array
=	O
(	O
const	O
char	O
*	O
)	O
buffer	array
+	O
add	long
;	O
len	long
-=	O
add	long
;	O
}	O
if	O
(	O
len	long
>=	O
64	int
)	O
{	O
if	O
(	O
UNALIGNED_P	O
(	O
buffer	array
)	O
)	O
while	O
(	O
len	long
>	O
64	int
)	O
{	O
sha256_process_block	function
(	O
memcpy	function
(	O
ctx	pointer
->	O
buffer	array
,	O
buffer	array
,	O
64	int
)	O
,	O
64	int
,	O
ctx	pointer
)	O
;	O
buffer	array
=	O
(	O
const	O
char	O
*	O
)	O
buffer	array
+	O
64	int
;	O
len	long
-=	O
64	int
;	O
}	O
else	O
{	O
sha256_process_block	function
(	O
buffer	array
,	O
len	long
&	O
~	O
63	int
,	O
ctx	pointer
)	O
;	O
buffer	array
=	O
(	O
const	O
char	O
*	O
)	O
buffer	array
+	O
(	O
len	long
&	O
~	O
63	int
)	O
;	O
len	long
&=	O
63	int
;	O
}	O
}	O
if	O
(	O
len	long
>	O
0	int
)	O
{	O
size_t	long
left_over	long
=	O
ctx	pointer
->	O
buflen	long
;	O
memcpy	function
(	O
&	O
(	O
(	O
char	O
*	O
)	O
ctx	pointer
->	O
buffer	array
)	O
[	O
left_over	long
]	O
,	O
buffer	array
,	O
len	long
)	O
;	O
left_over	long
+=	O
len	long
;	O
if	O
(	O
left_over	long
>=	O
64	int
)	O
{	O
sha256_process_block	function
(	O
ctx	pointer
->	O
buffer	array
,	O
64	int
,	O
ctx	pointer
)	O
;	O
left_over	long
-=	O
64	int
;	O
memcpy	function
(	O
ctx	pointer
->	O
buffer	array
,	O
&	O
ctx	pointer
->	O
buffer	array
[	O
16	int
]	O
,	O
left_over	long
)	O
;	O
}	O
ctx	pointer
->	O
buflen	long
=	O
left_over	long
;	O
}	O
}	O
static	O
const	O
uint32_t	int
sha256_round_constants	array
[	O
64	int
]	O
=	O
{	O
0x428a2f98UL	int
,	O
0x71374491UL	int
,	O
0xb5c0fbcfUL	int
,	O
0xe9b5dba5UL	int
,	O
0x3956c25bUL	int
,	O
0x59f111f1UL	int
,	O
0x923f82a4UL	int
,	O
0xab1c5ed5UL	int
,	O
0xd807aa98UL	int
,	O
0x12835b01UL	int
,	O
0x243185beUL	int
,	O
0x550c7dc3UL	int
,	O
0x72be5d74UL	int
,	O
0x80deb1feUL	int
,	O
0x9bdc06a7UL	int
,	O
0xc19bf174UL	int
,	O
0xe49b69c1UL	int
,	O
0xefbe4786UL	int
,	O
0x0fc19dc6UL	int
,	O
0x240ca1ccUL	int
,	O
0x2de92c6fUL	int
,	O
0x4a7484aaUL	int
,	O
0x5cb0a9dcUL	int
,	O
0x76f988daUL	int
,	O
0x983e5152UL	int
,	O
0xa831c66dUL	int
,	O
0xb00327c8UL	int
,	O
0xbf597fc7UL	int
,	O
0xc6e00bf3UL	int
,	O
0xd5a79147UL	int
,	O
0x06ca6351UL	int
,	O
0x14292967UL	int
,	O
0x27b70a85UL	int
,	O
0x2e1b2138UL	int
,	O
0x4d2c6dfcUL	int
,	O
0x53380d13UL	int
,	O
0x650a7354UL	int
,	O
0x766a0abbUL	int
,	O
0x81c2c92eUL	int
,	O
0x92722c85UL	int
,	O
0xa2bfe8a1UL	int
,	O
0xa81a664bUL	int
,	O
0xc24b8b70UL	int
,	O
0xc76c51a3UL	int
,	O
0xd192e819UL	int
,	O
0xd6990624UL	int
,	O
0xf40e3585UL	int
,	O
0x106aa070UL	int
,	O
0x19a4c116UL	int
,	O
0x1e376c08UL	int
,	O
0x2748774cUL	int
,	O
0x34b0bcb5UL	int
,	O
0x391c0cb3UL	int
,	O
0x4ed8aa4aUL	int
,	O
0x5b9cca4fUL	int
,	O
0x682e6ff3UL	int
,	O
0x748f82eeUL	int
,	O
0x78a5636fUL	int
,	O
0x84c87814UL	int
,	O
0x8cc70208UL	int
,	O
0x90befffaUL	int
,	O
0xa4506cebUL	int
,	O
0xbef9a3f7UL	int
,	O
0xc67178f2UL	int
,	O
}	O
;	O
void	O
sha256_process_block	function
(	O
const	O
void	O
*	O
buffer	array
,	O
size_t	long
len	long
,	O
struct	O
sha256_ctx	struct
*	O
ctx	pointer
)	O
{	O
const	O
uint32_t	int
*	O
words	pointer
=	O
buffer	array
;	O
size_t	long
nwords	long
=	O
len	long
/	O
sizeof	O
(	O
uint32_t	int
)	O
;	O
const	O
uint32_t	int
*	O
endp	pointer
=	O
words	pointer
+	O
nwords	long
;	O
uint32_t	int
x	array
[	O
16	int
]	O
;	O
uint32_t	int
a	int
=	O
ctx	pointer
->	O
state	array
[	O
0	int
]	O
;	O
uint32_t	int
b	int
=	O
ctx	pointer
->	O
state	array
[	O
1	int
]	O
;	O
uint32_t	int
c	int
=	O
ctx	pointer
->	O
state	array
[	O
2	int
]	O
;	O
uint32_t	int
d	int
=	O
ctx	pointer
->	O
state	array
[	O
3	int
]	O
;	O
uint32_t	int
e	int
=	O
ctx	pointer
->	O
state	array
[	O
4	int
]	O
;	O
uint32_t	int
f	int
=	O
ctx	pointer
->	O
state	array
[	O
5	int
]	O
;	O
uint32_t	int
g	int
=	O
ctx	pointer
->	O
state	array
[	O
6	int
]	O
;	O
uint32_t	int
h	int
=	O
ctx	pointer
->	O
state	array
[	O
7	int
]	O
;	O
uint32_t	int
lolen	int
=	O
len	long
;	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
+=	O
lolen	int
;	O
ctx	pointer
->	O
total	array
[	O
1	int
]	O
+=	O
(	O
len	long
>>	O
31	int
>>	O
1	int
)	O
+	O
(	O
ctx	pointer
->	O
total	array
[	O
0	int
]	O
<	O
lolen	int
)	O
;	O
while	O
(	O
words	pointer
<	O
endp	pointer
)	O
{	O
uint32_t	int
tm	int
;	O
uint32_t	int
t0	int
,	O
t1	int
;	O
int	O
t	int
;	O
for	O
(	O
t	int
=	O
0	int
;	O
t	int
<	O
16	int
;	O
t	int
++	O
)	O
{	O
x	array
[	O
t	int
]	O
=	O
SWAP	O
(	O
*	O
words	pointer
)	O
;	O
words	pointer
++	O
;	O
}	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
K	O
(	O
0	int
)	O
,	O
x	array
[	O
0	int
]	O
)	O
;	O
R	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
K	O
(	O
1	int
)	O
,	O
x	array
[	O
1	int
]	O
)	O
;	O
R	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
K	O
(	O
2	int
)	O
,	O
x	array
[	O
2	int
]	O
)	O
;	O
R	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
K	O
(	O
3	int
)	O
,	O
x	array
[	O
3	int
]	O
)	O
;	O
R	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
K	O
(	O
4	int
)	O
,	O
x	array
[	O
4	int
]	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
K	O
(	O
5	int
)	O
,	O
x	array
[	O
5	int
]	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
K	O
(	O
6	int
)	O
,	O
x	array
[	O
6	int
]	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
K	O
(	O
7	int
)	O
,	O
x	array
[	O
7	int
]	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
K	O
(	O
8	int
)	O
,	O
x	array
[	O
8	int
]	O
)	O
;	O
R	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
K	O
(	O
9	int
)	O
,	O
x	array
[	O
9	int
]	O
)	O
;	O
R	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
K	O
(	O
10	int
)	O
,	O
x	array
[	O
10	int
]	O
)	O
;	O
R	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
K	O
(	O
11	int
)	O
,	O
x	array
[	O
11	int
]	O
)	O
;	O
R	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
K	O
(	O
12	int
)	O
,	O
x	array
[	O
12	int
]	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
K	O
(	O
13	int
)	O
,	O
x	array
[	O
13	int
]	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
K	O
(	O
14	int
)	O
,	O
x	array
[	O
14	int
]	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
K	O
(	O
15	int
)	O
,	O
x	array
[	O
15	int
]	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
K	O
(	O
16	int
)	O
,	O
M	O
(	O
16	int
)	O
)	O
;	O
R	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
K	O
(	O
17	int
)	O
,	O
M	O
(	O
17	int
)	O
)	O
;	O
R	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
K	O
(	O
18	int
)	O
,	O
M	O
(	O
18	int
)	O
)	O
;	O
R	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
K	O
(	O
19	int
)	O
,	O
M	O
(	O
19	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
K	O
(	O
20	int
)	O
,	O
M	O
(	O
20	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
K	O
(	O
21	int
)	O
,	O
M	O
(	O
21	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
K	O
(	O
22	int
)	O
,	O
M	O
(	O
22	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
K	O
(	O
23	int
)	O
,	O
M	O
(	O
23	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
K	O
(	O
24	int
)	O
,	O
M	O
(	O
24	int
)	O
)	O
;	O
R	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
K	O
(	O
25	int
)	O
,	O
M	O
(	O
25	int
)	O
)	O
;	O
R	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
K	O
(	O
26	int
)	O
,	O
M	O
(	O
26	int
)	O
)	O
;	O
R	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
K	O
(	O
27	int
)	O
,	O
M	O
(	O
27	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
K	O
(	O
28	int
)	O
,	O
M	O
(	O
28	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
K	O
(	O
29	int
)	O
,	O
M	O
(	O
29	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
K	O
(	O
30	int
)	O
,	O
M	O
(	O
30	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
K	O
(	O
31	int
)	O
,	O
M	O
(	O
31	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
K	O
(	O
32	int
)	O
,	O
M	O
(	O
32	int
)	O
)	O
;	O
R	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
K	O
(	O
33	int
)	O
,	O
M	O
(	O
33	int
)	O
)	O
;	O
R	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
K	O
(	O
34	int
)	O
,	O
M	O
(	O
34	int
)	O
)	O
;	O
R	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
K	O
(	O
35	int
)	O
,	O
M	O
(	O
35	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
K	O
(	O
36	int
)	O
,	O
M	O
(	O
36	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
K	O
(	O
37	int
)	O
,	O
M	O
(	O
37	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
K	O
(	O
38	int
)	O
,	O
M	O
(	O
38	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
K	O
(	O
39	int
)	O
,	O
M	O
(	O
39	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
K	O
(	O
40	int
)	O
,	O
M	O
(	O
40	int
)	O
)	O
;	O
R	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
K	O
(	O
41	int
)	O
,	O
M	O
(	O
41	int
)	O
)	O
;	O
R	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
K	O
(	O
42	int
)	O
,	O
M	O
(	O
42	int
)	O
)	O
;	O
R	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
K	O
(	O
43	int
)	O
,	O
M	O
(	O
43	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
K	O
(	O
44	int
)	O
,	O
M	O
(	O
44	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
K	O
(	O
45	int
)	O
,	O
M	O
(	O
45	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
K	O
(	O
46	int
)	O
,	O
M	O
(	O
46	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
K	O
(	O
47	int
)	O
,	O
M	O
(	O
47	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
K	O
(	O
48	int
)	O
,	O
M	O
(	O
48	int
)	O
)	O
;	O
R	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
K	O
(	O
49	int
)	O
,	O
M	O
(	O
49	int
)	O
)	O
;	O
R	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
K	O
(	O
50	int
)	O
,	O
M	O
(	O
50	int
)	O
)	O
;	O
R	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
K	O
(	O
51	int
)	O
,	O
M	O
(	O
51	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
K	O
(	O
52	int
)	O
,	O
M	O
(	O
52	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
K	O
(	O
53	int
)	O
,	O
M	O
(	O
53	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
K	O
(	O
54	int
)	O
,	O
M	O
(	O
54	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
K	O
(	O
55	int
)	O
,	O
M	O
(	O
55	int
)	O
)	O
;	O
R	O
(	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
K	O
(	O
56	int
)	O
,	O
M	O
(	O
56	int
)	O
)	O
;	O
R	O
(	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
K	O
(	O
57	int
)	O
,	O
M	O
(	O
57	int
)	O
)	O
;	O
R	O
(	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
K	O
(	O
58	int
)	O
,	O
M	O
(	O
58	int
)	O
)	O
;	O
R	O
(	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
K	O
(	O
59	int
)	O
,	O
M	O
(	O
59	int
)	O
)	O
;	O
R	O
(	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
d	int
,	O
K	O
(	O
60	int
)	O
,	O
M	O
(	O
60	int
)	O
)	O
;	O
R	O
(	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
c	int
,	O
K	O
(	O
61	int
)	O
,	O
M	O
(	O
61	int
)	O
)	O
;	O
R	O
(	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
b	int
,	O
K	O
(	O
62	int
)	O
,	O
M	O
(	O
62	int
)	O
)	O
;	O
R	O
(	O
b	int
,	O
c	int
,	O
d	int
,	O
e	int
,	O
f	int
,	O
g	int
,	O
h	int
,	O
a	int
,	O
K	O
(	O
63	int
)	O
,	O
M	O
(	O
63	int
)	O
)	O
;	O
a	int
=	O
ctx	pointer
->	O
state	array
[	O
0	int
]	O
+=	O
a	int
;	O
b	int
=	O
ctx	pointer
->	O
state	array
[	O
1	int
]	O
+=	O
b	int
;	O
c	int
=	O
ctx	pointer
->	O
state	array
[	O
2	int
]	O
+=	O
c	int
;	O
d	int
=	O
ctx	pointer
->	O
state	array
[	O
3	int
]	O
+=	O
d	int
;	O
e	int
=	O
ctx	pointer
->	O
state	array
[	O
4	int
]	O
+=	O
e	int
;	O
f	int
=	O
ctx	pointer
->	O
state	array
[	O
5	int
]	O
+=	O
f	int
;	O
g	int
=	O
ctx	pointer
->	O
state	array
[	O
6	int
]	O
+=	O
g	int
;	O
h	int
=	O
ctx	pointer
->	O
state	array
[	O
7	int
]	O
+=	O
h	int
;	O
}	O
}	O
