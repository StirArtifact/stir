extern	O
Sworld	struct
world	struct
;	O
extern	O
int	O
debug	int
;	O
struct	O
exec_cmd	struct
{	O
char	O
name	array
[	O
NAMELEN	int
]	O
;	O
void	O
(	O
*	O
func	pointer
)	O
(	O
)	O
;	O
}	O
;	O
void	O
cmd_sname	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
x	int
,	O
y	int
;	O
char	O
name	array
[	O
NAMELEN	int
]	O
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
strcpy	function
(	O
name	array
,	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
str	array
)	O
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Naming sector %d,%d as %s.\n"	pointer
,	O
x	int
,	O
y	int
,	O
name	array
)	O
;	O
if	O
(	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
.	O
name	array
)	O
{	O
free	function
(	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
.	O
name	array
)	O
;	O
}	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
.	O
name	array
=	O
malloc	function
(	O
strlen	function
(	O
name	array
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
.	O
name	array
,	O
name	array
)	O
;	O
}	O
void	O
cmd_aname	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
id	short
;	O
char	O
*	O
name	array
;	O
Sarmy	struct
*	O
ap	pointer
,	O
*	O
get_army	function
(	O
)	O
;	O
id	short
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
name	array
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
str	array
;	O
if	O
(	O
(	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
id	short
)	O
)	O
)	O
{	O
if	O
(	O
debug	int
>=	O
2	int
)	O
{	O
printf	function
(	O
"Naming army %d as %s.\n"	pointer
,	O
id	short
,	O
name	array
)	O
;	O
}	O
strcpy	function
(	O
ap	pointer
->	O
name	array
,	O
name	array
)	O
;	O
}	O
else	O
{	O
printf	function
(	O
"funny:  cannot find army %d\n"	pointer
,	O
id	short
)	O
;	O
}	O
}	O
void	O
cmd_amove	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Sarmy	struct
*	O
armypt	pointer
;	O
Ssector	struct
*	O
sp	int
;	O
int	O
a	int
,	O
x	int
,	O
y	int
,	O
fm	int
;	O
a	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
x	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
fm	int
=	O
args	array
[	O
4	int
]	O
.	O
data	union
.	O
num	int
;	O
armypt	pointer
=	O
np	pointer
->	O
armies	pointer
;	O
while	O
(	O
armypt	pointer
->	O
id	short
!=	O
a	int
&&	O
armypt	pointer
->	O
next	pointer
!=	O
NULL	O
)	O
armypt	pointer
=	O
armypt	pointer
->	O
next	pointer
;	O
if	O
(	O
armypt	pointer
->	O
id	short
==	O
a	int
)	O
{	O
if	O
(	O
debug	int
>=	O
2	int
)	O
{	O
printf	function
(	O
"Moving army %d from %d,%d to %d,%d\n"	pointer
,	O
a	int
,	O
armypt	pointer
->	O
pos	struct
.	O
x	int
,	O
armypt	pointer
->	O
pos	struct
.	O
y	int
,	O
x	int
,	O
y	int
)	O
;	O
}	O
sp	int
=	O
&	O
(	O
world	struct
.	O
map	pointer
[	O
armypt	pointer
->	O
pos	struct
.	O
x	int
]	O
[	O
armypt	pointer
->	O
pos	struct
.	O
y	int
]	O
)	O
;	O
delete_army_sector	function
(	O
sp	int
,	O
armypt	pointer
)	O
;	O
armypt	pointer
->	O
pos	struct
.	O
x	int
=	O
x	int
;	O
armypt	pointer
->	O
pos	struct
.	O
y	int
=	O
y	int
;	O
armypt	pointer
->	O
mvpts	int
=	O
fm	int
;	O
sp	int
=	O
&	O
(	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
)	O
;	O
insert_army_sector	function
(	O
sp	int
,	O
armypt	pointer
)	O
;	O
}	O
else	O
printf	function
(	O
"Error! Could not find army!\n"	pointer
)	O
;	O
}	O
void	O
cmd_astat	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
a	int
,	O
s	array
;	O
Sarmy	struct
*	O
ap	pointer
,	O
*	O
get_army	function
(	O
)	O
;	O
a	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
s	array
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Changing status of army %d to %d\n"	pointer
,	O
a	int
,	O
s	array
)	O
;	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
a	int
)	O
;	O
if	O
(	O
ap	pointer
)	O
{	O
if	O
(	O
s	array
==	O
A_OCCUPY	int
&&	O
ap	pointer
->	O
status	int
!=	O
A_OCCUPY	int
)	O
{	O
ap	pointer
->	O
mvratio	int
=	O
(	O
int	O
)	O
(	O
100.0	int
*	O
(	O
float	O
)	O
(	O
ap	pointer
->	O
mvpts	int
)	O
/	O
basic_move_rate	function
(	O
np	pointer
)	O
)	O
;	O
ap	pointer
->	O
mvpts	int
=	O
0	int
;	O
}	O
if	O
(	O
s	array
==	O
A_PATROL	int
&&	O
ap	pointer
->	O
status	int
!=	O
A_PATROL	int
)	O
{	O
ap	pointer
->	O
mvpts	int
=	O
ap	pointer
->	O
mvpts	int
/	O
2	int
;	O
}	O
if	O
(	O
s	array
==	O
A_INTERCEPT	int
&&	O
ap	pointer
->	O
status	int
!=	O
A_INTERCEPT	int
)	O
{	O
ap	pointer
->	O
mvpts	int
=	O
ap	pointer
->	O
mvpts	int
/	O
4	int
;	O
}	O
if	O
(	O
s	array
==	O
A_GARRISON	int
&&	O
ap	pointer
->	O
status	int
!=	O
A_GARRISON	int
)	O
{	O
ap	pointer
->	O
mvpts	int
=	O
ap	pointer
->	O
mvpts	int
/	O
2	int
;	O
}	O
ap	pointer
->	O
status	int
=	O
s	array
;	O
}	O
else	O
{	O
printf	function
(	O
"Trying to change status on army %d which does not exist\n"	pointer
,	O
a	int
)	O
;	O
}	O
}	O
void	O
cmd_aflag_set	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
id	short
,	O
flag	int
;	O
Sarmy	struct
*	O
ap	pointer
,	O
*	O
get_army	function
(	O
)	O
;	O
id	short
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
flag	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Setting bit %x of army %d\n"	pointer
,	O
flag	int
,	O
id	short
)	O
;	O
if	O
(	O
(	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
id	short
)	O
)	O
)	O
{	O
ap	pointer
->	O
flags	long
|=	O
flag	int
;	O
}	O
}	O
void	O
cmd_aflag_clear	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
id	short
,	O
flag	int
;	O
Sarmy	struct
*	O
ap	pointer
,	O
*	O
get_army	function
(	O
)	O
;	O
id	short
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
flag	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Clearing bit %x of army %d\n"	pointer
,	O
flag	int
,	O
id	short
)	O
;	O
if	O
(	O
(	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
id	short
)	O
)	O
)	O
{	O
ap	pointer
->	O
flags	long
&=	O
~	O
flag	int
;	O
}	O
}	O
void	O
cmd_flag_set_sector	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
x	int
,	O
y	int
,	O
flag	int
;	O
Ssector	struct
*	O
sp	int
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
flag	int
=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
;	O
sp	int
->	O
flags	long
|=	O
flag	int
;	O
}	O
void	O
cmd_flag_clear_sector	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
x	int
,	O
y	int
,	O
flag	int
;	O
Ssector	struct
*	O
sp	int
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
flag	int
=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
;	O
sp	int
->	O
flags	long
&=	O
~	O
flag	int
;	O
}	O
void	O
cmd_acargo	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
id	short
;	O
Sarmy	struct
*	O
ap	pointer
,	O
*	O
get_army	function
(	O
)	O
;	O
id	short
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Changing cargo of army %d\n"	pointer
,	O
id	short
)	O
;	O
if	O
(	O
(	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
id	short
)	O
)	O
!=	O
NULL	O
)	O
{	O
ap	pointer
->	O
cargo	struct
.	O
money	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
ap	pointer
->	O
cargo	struct
.	O
metal	int
=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
ap	pointer
->	O
cargo	struct
.	O
jewels	int
=	O
args	array
[	O
4	int
]	O
.	O
data	union
.	O
num	int
;	O
ap	pointer
->	O
cargo	struct
.	O
food	int
=	O
args	array
[	O
5	int
]	O
.	O
data	union
.	O
num	int
;	O
ap	pointer
->	O
cargo	struct
.	O
people	int
=	O
args	array
[	O
6	int
]	O
.	O
data	union
.	O
num	int
;	O
ap	pointer
->	O
cargo	struct
.	O
army	int
=	O
args	array
[	O
7	int
]	O
.	O
data	union
.	O
num	int
;	O
ap	pointer
->	O
cargo	struct
.	O
title	struct
.	O
x	int
=	O
args	array
[	O
8	int
]	O
.	O
data	union
.	O
num	int
;	O
ap	pointer
->	O
cargo	struct
.	O
title	struct
.	O
y	int
=	O
args	array
[	O
9	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
else	O
{	O
printf	function
(	O
"[%s] Could not find army %d, nation %d\n"	pointer
,	O
args	array
[	O
0	int
]	O
.	O
data	union
.	O
str	array
,	O
id	short
,	O
np	pointer
->	O
id	short
)	O
;	O
}	O
}	O
void	O
cmd_taxrate	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
t	int
;	O
t	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Taxes changed from %d to %d.\n"	pointer
,	O
np	pointer
->	O
taxes	int
,	O
t	int
)	O
;	O
np	pointer
->	O
taxes	int
=	O
t	int
;	O
}	O
void	O
cmd_desig_sector	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
x	int
,	O
y	int
,	O
d	int
;	O
Snation	struct
*	O
owner_np	pointer
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
d	int
=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
owner_np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
.	O
owner	int
]	O
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Redesignating %d,%d to %d.\n"	pointer
,	O
x	int
,	O
y	int
,	O
d	int
)	O
;	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
.	O
designation	short
=	O
d	int
;	O
if	O
(	O
d	int
==	O
D_CAPITAL	int
)	O
{	O
owner_np	pointer
->	O
capital	struct
.	O
x	int
=	O
x	int
;	O
owner_np	pointer
->	O
capital	struct
.	O
y	int
=	O
y	int
;	O
}	O
}	O
void	O
cmd_amake	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Sarmy	struct
army	int
,	O
make_army	function
(	O
)	O
;	O
Ssector	struct
*	O
sp	int
;	O
int	O
a	int
,	O
no_sold	int
,	O
x	int
,	O
y	int
;	O
char	O
*	O
type	array
,	O
*	O
name	array
;	O
a	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
no_sold	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
x	int
=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
4	int
]	O
.	O
data	union
.	O
num	int
;	O
type	array
=	O
args	array
[	O
5	int
]	O
.	O
data	union
.	O
str	array
;	O
name	array
=	O
args	array
[	O
6	int
]	O
.	O
data	union
.	O
str	array
;	O
sp	int
=	O
&	O
(	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
)	O
;	O
army	int
=	O
make_army	function
(	O
type	array
,	O
name	array
,	O
no_sold	int
,	O
A_DEFEND	int
,	O
np	pointer
->	O
id	short
,	O
sp	int
->	O
loc	struct
)	O
;	O
army	int
.	O
id	short
=	O
a	int
;	O
army	int
.	O
next	pointer
=	O
NULL	O
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Permanently drafting army #%d\n"	pointer
,	O
army	int
.	O
id	short
)	O
;	O
if	O
(	O
np	pointer
->	O
armies	pointer
==	O
NULL	O
)	O
{	O
np	pointer
->	O
armies	pointer
=	O
(	O
Sarmy	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
Sarmy	struct
)	O
)	O
;	O
*	O
(	O
np	pointer
->	O
armies	pointer
)	O
=	O
army	int
;	O
}	O
else	O
{	O
insert_army_nation	function
(	O
np	pointer
,	O
&	O
army	int
,	O
a	int
)	O
;	O
}	O
insert_army_sector	function
(	O
sp	int
,	O
&	O
army	int
)	O
;	O
++	O
np	pointer
->	O
n_armies	int
;	O
}	O
void	O
cmd_cmoney	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
change	int
,	O
nat_id	int
;	O
nat_id	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
change	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
nat_id	int
]	O
;	O
np	pointer
->	O
money	int
=	O
np	pointer
->	O
money	int
+	O
change	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"New nation money (after difference of %d) = %d\n"	pointer
,	O
change	int
,	O
np	pointer
->	O
money	int
)	O
;	O
}	O
void	O
cmd_cmetal	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
change	int
,	O
nat_id	int
;	O
nat_id	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
change	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
nat_id	int
]	O
;	O
np	pointer
->	O
metal	int
=	O
np	pointer
->	O
metal	int
+	O
change	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"New nation metal (after difference %d) = %d\n"	pointer
,	O
change	int
,	O
np	pointer
->	O
metal	int
)	O
;	O
}	O
void	O
cmd_cjewels	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
change	int
,	O
nat_id	int
;	O
nat_id	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
change	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
nat_id	int
]	O
;	O
np	pointer
->	O
jewels	int
=	O
np	pointer
->	O
jewels	int
+	O
change	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"New nation jewel (after difference %d) = %d\n"	pointer
,	O
change	int
,	O
np	pointer
->	O
jewels	int
)	O
;	O
}	O
void	O
cmd_cspell_pts	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
change	int
,	O
nat_id	int
;	O
nat_id	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
change	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
nat_id	int
]	O
;	O
np	pointer
->	O
spell_pts	int
=	O
np	pointer
->	O
spell_pts	int
+	O
change	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"New nation spell pts (after difference %d) = %d\n"	pointer
,	O
change	int
,	O
np	pointer
->	O
spell_pts	int
)	O
;	O
}	O
void	O
cmd_ctech_skill	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
change	int
,	O
nat_id	int
;	O
nat_id	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
change	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
nat_id	int
]	O
;	O
np	pointer
->	O
tech_skill	int
=	O
np	pointer
->	O
tech_skill	int
+	O
change	int
;	O
}	O
void	O
cmd_cmag_skill	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
change	int
,	O
nat_id	int
;	O
nat_id	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
change	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
nat_id	int
]	O
;	O
np	pointer
->	O
mag_skill	int
=	O
np	pointer
->	O
mag_skill	int
+	O
change	int
;	O
}	O
void	O
cmd_cfood	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
change	int
,	O
nat_id	int
;	O
nat_id	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
change	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
nat_id	int
]	O
;	O
np	pointer
->	O
food	int
=	O
np	pointer
->	O
food	int
+	O
change	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"New nation food (after difference %d) = %d\n"	pointer
,	O
change	int
,	O
np	pointer
->	O
food	int
)	O
;	O
}	O
void	O
cmd_tech_money	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
tech_r_d	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Tech R&D money changed to %d\n"	pointer
,	O
np	pointer
->	O
tech_r_d	int
)	O
;	O
}	O
void	O
cmd_tech_metal	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
tech_r_d_metal	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Tech R&D metal changed to %d\n"	pointer
,	O
np	pointer
->	O
tech_r_d_metal	int
)	O
;	O
}	O
void	O
cmd_spy_money	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
spy_r_d	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_mag_money	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
mag_r_d	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Magic money changed to %d\n"	pointer
,	O
np	pointer
->	O
mag_r_d	int
)	O
;	O
}	O
void	O
cmd_mag_jewels	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
mag_r_d_jewels	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"Magic jewels changed to %d\n"	pointer
,	O
np	pointer
->	O
mag_r_d_jewels	int
)	O
;	O
}	O
void	O
cmd_cmax_roads	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
consts	struct
.	O
roads	short
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cmax_fort	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
consts	struct
.	O
forts	short
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cmine	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
mine_skill	int
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cfarm	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
farm_skill	int
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cspeed	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
race	struct
.	O
speed	int
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_nation_name	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Snation	struct
*	O
changed_np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
]	O
;	O
strcpy	function
(	O
changed_np	pointer
->	O
name	array
,	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
str	array
)	O
;	O
}	O
void	O
cmd_nation_leader	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Snation	struct
*	O
changed_np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
]	O
;	O
strcpy	function
(	O
changed_np	pointer
->	O
leader	array
,	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
str	array
)	O
;	O
}	O
void	O
cmd_nation_order	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Snation	struct
*	O
changed_np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
]	O
;	O
strcpy	function
(	O
changed_np	pointer
->	O
mag_order	array
,	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
str	array
)	O
;	O
}	O
void	O
cmd_nation_mark	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Snation	struct
*	O
changed_np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
]	O
;	O
changed_np	pointer
->	O
mark	char
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
str	array
[	O
0	int
]	O
;	O
}	O
void	O
cmd_set_cn	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Snation	struct
*	O
changed_nation	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
]	O
;	O
int	O
new_val	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
new_val	int
>	O
0	int
||	O
new_val	int
<	O
2	int
)	O
{	O
changed_nation	pointer
->	O
cn_flag	int
=	O
new_val	int
;	O
}	O
}	O
void	O
cmd_ccombat	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
combat_bonus	int
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_crepro	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
race	struct
.	O
repro	int
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cmortality	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
if	O
(	O
(	O
np	pointer
->	O
race	struct
.	O
mortality	int
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
)	O
<	O
1	int
)	O
{	O
np	pointer
->	O
race	struct
.	O
mortality	int
=	O
1	int
;	O
}	O
}	O
void	O
cmd_cintel	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
if	O
(	O
(	O
np	pointer
->	O
race	struct
.	O
intel	int
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
)	O
<	O
1	int
)	O
{	O
np	pointer
->	O
race	struct
.	O
intel	int
=	O
1	int
;	O
}	O
}	O
void	O
cmd_cmag_apt	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
if	O
(	O
(	O
np	pointer
->	O
race	struct
.	O
mag_apt	int
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
)	O
<	O
1	int
)	O
{	O
np	pointer
->	O
race	struct
.	O
mag_apt	int
=	O
1	int
;	O
}	O
}	O
void	O
cmd_cstrength	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
if	O
(	O
(	O
np	pointer
->	O
race	struct
.	O
strength	int
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
)	O
<	O
1	int
)	O
{	O
np	pointer
->	O
race	struct
.	O
strength	int
=	O
1	int
;	O
}	O
np	pointer
->	O
combat_bonus	int
+=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
/	O
2.5	int
;	O
}	O
void	O
cmd_cpeople_sector	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Ssector	struct
*	O
sp	int
;	O
int	O
x	int
,	O
y	int
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
;	O
sp	int
->	O
n_people	int
+=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cowner_sector	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Ssector	struct
*	O
sp	int
;	O
int	O
x	int
,	O
y	int
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
;	O
sp	int
->	O
owner	int
=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
addsector	function
(	O
&	O
world	struct
.	O
nations	pointer
[	O
sp	int
->	O
owner	int
]	O
,	O
x	int
,	O
y	int
)	O
;	O
if	O
(	O
debug	int
>=	O
2	int
)	O
printf	function
(	O
"sector (%d,%d) owned by %s\n"	pointer
,	O
x	int
,	O
y	int
,	O
world	struct
.	O
nations	pointer
[	O
sp	int
->	O
owner	int
]	O
.	O
name	array
)	O
;	O
}	O
void	O
cmd_csoil_sector	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Ssector	struct
*	O
sp	int
;	O
int	O
x	int
,	O
y	int
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
;	O
sp	int
->	O
soil	short
+=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cmetal_sector	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Ssector	struct
*	O
sp	int
;	O
int	O
x	int
,	O
y	int
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
;	O
sp	int
->	O
metal	int
+=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cjewels_sector	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Ssector	struct
*	O
sp	int
;	O
int	O
x	int
,	O
y	int
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
;	O
sp	int
->	O
jewels	int
+=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_caltitude_sector	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Ssector	struct
*	O
sp	int
;	O
int	O
x	int
,	O
y	int
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
;	O
sp	int
->	O
altitude	short
+=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_new_army_type	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Savail_army	struct
*	O
aa	pointer
;	O
extern	O
Suser	struct
user	struct
;	O
int	O
falready	int
=	O
0	int
;	O
aa	pointer
=	O
user	struct
.	O
avail_armies	pointer
;	O
if	O
(	O
aa	pointer
!=	O
NULL	O
)	O
{	O
do	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
aa	pointer
->	O
type	array
,	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
str	array
)	O
)	O
{	O
falready	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
while	O
(	O
aa	pointer
->	O
next	pointer
&&	O
(	O
aa	pointer
=	O
aa	pointer
->	O
next	pointer
)	O
)	O
;	O
}	O
if	O
(	O
aa	pointer
==	O
NULL	O
)	O
{	O
aa	pointer
=	O
(	O
Savail_army	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
Savail_army	struct
)	O
)	O
;	O
strcpy	function
(	O
aa	pointer
->	O
type	array
,	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
str	array
)	O
;	O
user	struct
.	O
n_army_types	int
++	O
;	O
}	O
else	O
if	O
(	O
!	O
falready	int
)	O
{	O
do	O
{	O
;	O
}	O
while	O
(	O
aa	pointer
->	O
next	pointer
&&	O
(	O
aa	pointer
=	O
aa	pointer
->	O
next	pointer
)	O
)	O
;	O
aa	pointer
->	O
next	pointer
=	O
(	O
Savail_army	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
Savail_army	struct
)	O
)	O
;	O
aa	pointer
->	O
next	pointer
->	O
next	pointer
=	O
NULL	O
;	O
strcpy	function
(	O
aa	pointer
->	O
next	pointer
->	O
type	array
,	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
str	array
)	O
;	O
user	struct
.	O
n_army_types	int
++	O
;	O
}	O
}	O
void	O
cmd_new_construct	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
str	array
,	O
"Bubble"	pointer
)	O
)	O
{	O
np	pointer
->	O
consts	struct
.	O
flags	long
|=	O
CF_BUBBLE	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
str	array
,	O
"Refinery"	pointer
)	O
)	O
{	O
np	pointer
->	O
consts	struct
.	O
flags	long
|=	O
CF_REFINE	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error! Unknown construction %s\n"	pointer
,	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
str	array
)	O
;	O
}	O
}	O
void	O
cmd_amerge	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Sarmy	struct
*	O
ap	pointer
,	O
*	O
ap2	pointer
;	O
Ssector	struct
*	O
sp	int
;	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
)	O
;	O
ap2	pointer
=	O
get_army	function
(	O
np	pointer
,	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
)	O
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
ap	pointer
->	O
pos	struct
.	O
x	int
]	O
[	O
ap	pointer
->	O
pos	struct
.	O
y	int
]	O
;	O
ap	pointer
->	O
n_soldiers	int
+=	O
ap2	pointer
->	O
n_soldiers	int
;	O
ap	pointer
->	O
sp_bonus	int
=	O
dom_min_int	function
(	O
ap2	pointer
->	O
sp_bonus	int
,	O
ap	pointer
->	O
sp_bonus	int
)	O
;	O
ap	pointer
->	O
mvpts	int
=	O
dom_min_int	function
(	O
ap2	pointer
->	O
mvpts	int
,	O
ap	pointer
->	O
mvpts	int
)	O
;	O
ap	pointer
->	O
mvratio	int
=	O
dom_min_int	function
(	O
ap2	pointer
->	O
mvratio	int
,	O
ap	pointer
->	O
mvratio	int
)	O
;	O
delete_army_sector	function
(	O
sp	int
,	O
ap2	pointer
)	O
;	O
delete_army_nation	function
(	O
np	pointer
,	O
ap2	pointer
)	O
;	O
}	O
void	O
cmd_aincrease	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Sarmy	struct
*	O
ap	pointer
;	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
)	O
;	O
ap	pointer
->	O
n_soldiers	int
+=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
ap	pointer
->	O
mvpts	int
=	O
0	int
;	O
ap	pointer
->	O
mvratio	int
=	O
0	int
;	O
}	O
void	O
cmd_asplit	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Sarmy	struct
*	O
ap	pointer
,	O
army2	struct
,	O
make_army	function
(	O
)	O
,	O
*	O
get_army	function
(	O
)	O
;	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
)	O
;	O
army2	struct
=	O
make_army	function
(	O
ap	pointer
->	O
type	array
,	O
""	pointer
,	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
,	O
ap	pointer
->	O
status	int
,	O
ap	pointer
->	O
owner	int
,	O
ap	pointer
->	O
pos	struct
)	O
;	O
ap	pointer
->	O
n_soldiers	int
-=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
army2	struct
.	O
mvpts	int
=	O
ap	pointer
->	O
mvpts	int
;	O
army2	struct
.	O
mvratio	int
=	O
ap	pointer
->	O
mvratio	int
;	O
army2	struct
.	O
flags	long
=	O
ap	pointer
->	O
flags	long
;	O
army2	struct
.	O
sp_bonus	int
=	O
ap	pointer
->	O
sp_bonus	int
;	O
army2	struct
.	O
money_maint	int
=	O
ap	pointer
->	O
money_maint	int
;	O
army2	struct
.	O
metal_maint	int
=	O
ap	pointer
->	O
metal_maint	int
;	O
army2	struct
.	O
jewel_maint	int
=	O
ap	pointer
->	O
jewel_maint	int
;	O
army2	struct
.	O
spell_pts_maint	int
=	O
ap	pointer
->	O
spell_pts_maint	int
;	O
sprintf	function
(	O
army2	struct
.	O
name	array
,	O
"%s %d"	pointer
,	O
army2	struct
.	O
type	array
,	O
army2	struct
.	O
id	short
)	O
;	O
np	pointer
->	O
n_armies	int
++	O
;	O
insert_army_nation	function
(	O
np	pointer
,	O
&	O
army2	struct
,	O
-	O
1	int
)	O
;	O
insert_army_sector	function
(	O
&	O
world	struct
.	O
map	pointer
[	O
army2	struct
.	O
pos	struct
.	O
x	int
]	O
[	O
army2	struct
.	O
pos	struct
.	O
y	int
]	O
,	O
&	O
army2	struct
)	O
;	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
army2	struct
.	O
id	short
)	O
;	O
sprintf	function
(	O
ap	pointer
->	O
name	array
,	O
"%s %d"	pointer
,	O
army2	struct
.	O
type	array
,	O
army2	struct
.	O
id	short
)	O
;	O
}	O
void	O
cmd_adisband	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Sarmy	struct
*	O
ap	pointer
;	O
Ssector	struct
*	O
sp	int
;	O
Sh_spell	struct
*	O
h_spell	pointer
;	O
extern	O
Sh_spell	struct
*	O
is_spelled	function
(	O
)	O
;	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
)	O
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
ap	pointer
->	O
pos	struct
.	O
x	int
]	O
[	O
ap	pointer
->	O
pos	struct
.	O
y	int
]	O
;	O
if	O
(	O
!	O
is_spirit	function
(	O
ap	pointer
)	O
&&	O
!	O
is_in_transport	O
(	O
ap	pointer
)	O
)	O
{	O
sp	int
->	O
n_people	int
+=	O
ap	pointer
->	O
n_soldiers	int
;	O
}	O
if	O
(	O
(	O
h_spell	pointer
=	O
is_spelled	function
(	O
ap	pointer
)	O
)	O
)	O
{	O
delete_hanging_spell	function
(	O
h_spell	pointer
)	O
;	O
}	O
delete_army_sector	function
(	O
sp	int
,	O
ap	pointer
)	O
;	O
delete_army_nation	function
(	O
np	pointer
,	O
ap	pointer
)	O
;	O
}	O
void	O
cmd_cabonus	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Sarmy	struct
*	O
ap	pointer
;	O
int	O
bonus_change	int
;	O
bonus_change	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
(	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
)	O
)	O
)	O
{	O
ap	pointer
->	O
sp_bonus	int
+=	O
bonus_change	int
;	O
}	O
}	O
void	O
cmd_cfort_sector	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Ssector	struct
*	O
sp	int
;	O
int	O
x	int
,	O
y	int
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
;	O
sp	int
->	O
defense	short
+=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_croads_sector	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Ssector	struct
*	O
sp	int
;	O
int	O
x	int
,	O
y	int
;	O
x	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
y	int
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
num	int
;	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
x	int
]	O
[	O
y	int
]	O
;	O
sp	int
->	O
roads	short
+=	O
args	array
[	O
3	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cpass	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
Snation	struct
*	O
dest_np	pointer
;	O
int	O
id	short
;	O
char	O
*	O
new_pass	pointer
;	O
id	short
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
new_pass	pointer
=	O
args	array
[	O
2	int
]	O
.	O
data	union
.	O
str	array
;	O
dest_np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
id	short
]	O
;	O
strcpy	function
(	O
dest_np	pointer
->	O
passwd	array
,	O
new_pass	pointer
)	O
;	O
}	O
void	O
cmd_cur_mag_money	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
cur_mag_r_d	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cur_tech_money	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
cur_tech_r_d	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cur_mag_jewels	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
cur_mag_r_d_jewels	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cur_tech_metal	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
cur_tech_r_d_metal	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_cur_spy_money	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
np	pointer
->	O
cur_spy_r_d	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
}	O
void	O
cmd_destroy	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
id	short
;	O
id	short
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
destroy_nation	function
(	O
id	short
)	O
;	O
}	O
void	O
cmd_acastle	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
army_id	int
;	O
Ssector	struct
*	O
sp	int
;	O
Ssector	struct
*	O
capital	struct
=	O
&	O
world	struct
.	O
map	pointer
[	O
np	pointer
->	O
capital	struct
.	O
x	int
]	O
[	O
np	pointer
->	O
capital	struct
.	O
y	int
]	O
;	O
Sarmy	struct
*	O
ap	pointer
;	O
army_id	int
=	O
args	array
[	O
1	int
]	O
.	O
data	union
.	O
num	int
;	O
if	O
(	O
(	O
ap	pointer
=	O
get_army	function
(	O
np	pointer
,	O
army_id	int
)	O
)	O
==	O
NULL	O
)	O
{	O
printf	function
(	O
"funny, can't find army %d\n"	pointer
,	O
army_id	int
)	O
;	O
}	O
sp	int
=	O
&	O
world	struct
.	O
map	pointer
[	O
ap	pointer
->	O
pos	struct
.	O
x	int
]	O
[	O
ap	pointer
->	O
pos	struct
.	O
y	int
]	O
;	O
delete_army_sector	function
(	O
sp	int
,	O
ap	pointer
)	O
;	O
ap	pointer
->	O
pos	struct
.	O
x	int
=	O
capital	struct
->	O
loc	struct
.	O
x	int
;	O
ap	pointer
->	O
pos	struct
.	O
y	int
=	O
capital	struct
->	O
loc	struct
.	O
y	int
;	O
insert_army_sector	function
(	O
capital	struct
,	O
ap	pointer
)	O
;	O
}	O
void	O
load_master_execs	function
(	O
)	O
{	O
int	O
argc	int
;	O
Snation	struct
*	O
np	pointer
=	O
&	O
world	struct
.	O
nations	pointer
[	O
0	int
]	O
;	O
FILE	struct
*	O
exec_file	pointer
,	O
*	O
fopen	function
(	O
)	O
;	O
struct	O
argument	struct
args	array
[	O
N_EXEC_ARGS	int
]	O
;	O
char	O
filename	pointer
[	O
NAMELEN	int
]	O
;	O
sprintf	function
(	O
filename	pointer
,	O
"exec/exec%d"	pointer
,	O
np	pointer
->	O
id	short
)	O
;	O
exec_file	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
exec_file	pointer
&&	O
np	pointer
->	O
cn_flag	int
==	O
0	int
)	O
{	O
}	O
else	O
{	O
while	O
(	O
(	O
argc	int
=	O
getexec	function
(	O
exec_file	pointer
,	O
args	array
)	O
!=	O
-	O
1	int
)	O
)	O
{	O
run_exec_line	function
(	O
np	pointer
,	O
args	array
)	O
;	O
}	O
if	O
(	O
exec_file	pointer
!=	O
NULL	O
)	O
{	O
fclose	function
(	O
exec_file	pointer
)	O
;	O
}	O
}	O
}	O
static	O
struct	O
exec_cmd	struct
commands	array
[	O
]	O
=	O
{	O
{	O
"AMOVE"	pointer
,	O
cmd_amove	function
}	O
,	O
{	O
"ASTAT"	pointer
,	O
cmd_astat	function
}	O
,	O
{	O
"AMAKE"	pointer
,	O
cmd_amake	function
}	O
,	O
{	O
"AFLAG_SET"	pointer
,	O
cmd_aflag_set	function
}	O
,	O
{	O
"AFLAG_CLEAR"	pointer
,	O
cmd_aflag_clear	function
}	O
,	O
{	O
"FLAG_SET_SECTOR"	pointer
,	O
cmd_flag_set_sector	function
}	O
,	O
{	O
"FLAG_CLEAR_SECTOR"	pointer
,	O
cmd_flag_clear_sector	function
}	O
,	O
{	O
"ACARGO"	pointer
,	O
cmd_acargo	function
}	O
,	O
{	O
"SNAME"	pointer
,	O
cmd_sname	function
}	O
,	O
{	O
"ANAME"	pointer
,	O
cmd_aname	function
}	O
,	O
{	O
"DESIG_SECTOR"	pointer
,	O
cmd_desig_sector	function
}	O
,	O
{	O
"TAXRATE"	pointer
,	O
cmd_taxrate	function
}	O
,	O
{	O
"CMONEY"	pointer
,	O
cmd_cmoney	function
}	O
,	O
{	O
"CJEWELS"	pointer
,	O
cmd_cjewels	function
}	O
,	O
{	O
"CMETAL"	pointer
,	O
cmd_cmetal	function
}	O
,	O
{	O
"CUR_MAGR&Dmoney"	pointer
,	O
cmd_cur_mag_money	function
}	O
,	O
{	O
"CUR_TECHR&Dmoney"	pointer
,	O
cmd_cur_tech_money	function
}	O
,	O
{	O
"CUR_TECHR&Dmetal"	pointer
,	O
cmd_cur_tech_metal	function
}	O
,	O
{	O
"CUR_MAGR&Djewels"	pointer
,	O
cmd_cur_mag_jewels	function
}	O
,	O
{	O
"CUR_SPYR&Dmoney"	pointer
,	O
cmd_cur_spy_money	function
}	O
,	O
{	O
"CSPELL_PTS"	pointer
,	O
cmd_cspell_pts	function
}	O
,	O
{	O
"CTECH_SKILL"	pointer
,	O
cmd_ctech_skill	function
}	O
,	O
{	O
"CMAG_SKILL"	pointer
,	O
cmd_cmag_skill	function
}	O
,	O
{	O
"CFOOD"	pointer
,	O
cmd_cfood	function
}	O
,	O
{	O
"TECHR&Dmoney"	pointer
,	O
cmd_tech_money	function
}	O
,	O
{	O
"TECHR&Dmetal"	pointer
,	O
cmd_tech_metal	function
}	O
,	O
{	O
"SPYR&Dmoney"	pointer
,	O
cmd_spy_money	function
}	O
,	O
{	O
"MAGR&Dmoney"	pointer
,	O
cmd_mag_money	function
}	O
,	O
{	O
"MAGR&Djewels"	pointer
,	O
cmd_mag_jewels	function
}	O
,	O
{	O
"CMINE"	pointer
,	O
cmd_cmine	function
}	O
,	O
{	O
"CFARM"	pointer
,	O
cmd_cfarm	function
}	O
,	O
{	O
"CSPEED"	pointer
,	O
cmd_cspeed	function
}	O
,	O
{	O
"NATION_NAME"	pointer
,	O
cmd_nation_name	function
}	O
,	O
{	O
"NATION_LEADER"	pointer
,	O
cmd_nation_leader	function
}	O
,	O
{	O
"NATION_ORDER"	pointer
,	O
cmd_nation_order	function
}	O
,	O
{	O
"NATION_MARK"	pointer
,	O
cmd_nation_mark	function
}	O
,	O
{	O
"SET_CN"	pointer
,	O
cmd_set_cn	function
}	O
,	O
{	O
"CCOMBAT"	pointer
,	O
cmd_ccombat	function
}	O
,	O
{	O
"CREPRO"	pointer
,	O
cmd_crepro	function
}	O
,	O
{	O
"CINTEL"	pointer
,	O
cmd_cintel	function
}	O
,	O
{	O
"CMAG_APT"	pointer
,	O
cmd_cmag_apt	function
}	O
,	O
{	O
"CSTRENGTH"	pointer
,	O
cmd_cstrength	function
}	O
,	O
{	O
"CMORTALITY"	pointer
,	O
cmd_cmortality	function
}	O
,	O
{	O
"CPEOPLE_SECTOR"	pointer
,	O
cmd_cpeople_sector	function
}	O
,	O
{	O
"COWNER_SECTOR"	pointer
,	O
cmd_cowner_sector	function
}	O
,	O
{	O
"CSOIL_SECTOR"	pointer
,	O
cmd_csoil_sector	function
}	O
,	O
{	O
"CMETAL_SECTOR"	pointer
,	O
cmd_cmetal_sector	function
}	O
,	O
{	O
"CJEWELS_SECTOR"	pointer
,	O
cmd_cjewels_sector	function
}	O
,	O
{	O
"CALTITUDE_SECTOR"	pointer
,	O
cmd_caltitude_sector	function
}	O
,	O
{	O
"NEW_ARMY_TYPE"	pointer
,	O
cmd_new_army_type	function
}	O
,	O
{	O
"AMERGE"	pointer
,	O
cmd_amerge	function
}	O
,	O
{	O
"AINCREASE"	pointer
,	O
cmd_aincrease	function
}	O
,	O
{	O
"ASPLIT"	pointer
,	O
cmd_asplit	function
}	O
,	O
{	O
"ADISBAND"	pointer
,	O
cmd_adisband	function
}	O
,	O
{	O
"CABONUS"	pointer
,	O
cmd_cabonus	function
}	O
,	O
{	O
"CFORT_SECTOR"	pointer
,	O
cmd_cfort_sector	function
}	O
,	O
{	O
"CROADS_SECTOR"	pointer
,	O
cmd_croads_sector	function
}	O
,	O
{	O
"CPASS"	pointer
,	O
cmd_cpass	function
}	O
,	O
{	O
"DESTROY"	pointer
,	O
cmd_destroy	function
}	O
,	O
{	O
"ACASTLE"	pointer
,	O
cmd_acastle	function
}	O
,	O
{	O
"NEW_CONSTRUCT"	pointer
,	O
cmd_new_construct	function
}	O
,	O
{	O
"CMAX_ROADS"	pointer
,	O
cmd_cmax_roads	function
}	O
,	O
{	O
"CMAX_FORT"	pointer
,	O
cmd_cmax_fort	function
}	O
}	O
;	O
void	O
load_nation	function
(	O
int	O
id	short
,	O
Snation	struct
*	O
np	pointer
)	O
{	O
FILE	struct
*	O
exec_file	pointer
;	O
struct	O
argument	struct
args	array
[	O
N_EXEC_ARGS	int
]	O
;	O
char	O
filename	pointer
[	O
NAMELEN	int
]	O
;	O
int	O
argc	int
;	O
extern	O
Suser	struct
user	struct
;	O
*	O
np	pointer
=	O
world	struct
.	O
nations	pointer
[	O
id	short
]	O
;	O
user	struct
.	O
np	pointer
=	O
np	pointer
;	O
user	struct
.	O
init_money	int
=	O
user	struct
.	O
np	pointer
->	O
money	int
;	O
user	struct
.	O
init_metal	int
=	O
user	struct
.	O
np	pointer
->	O
metal	int
;	O
user	struct
.	O
init_jewels	int
=	O
user	struct
.	O
np	pointer
->	O
jewels	int
;	O
user	struct
.	O
init_food	int
=	O
user	struct
.	O
np	pointer
->	O
food	int
;	O
user	struct
.	O
id	short
=	O
np	pointer
->	O
id	short
;	O
load_options	function
(	O
np	pointer
)	O
;	O
load_params	function
(	O
np	pointer
)	O
;	O
sprintf	function
(	O
filename	pointer
,	O
"exec/exec%d"	pointer
,	O
np	pointer
->	O
id	short
)	O
;	O
exec_file	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
exec_file	pointer
&&	O
np	pointer
->	O
cn_flag	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Nation %d (%s) has not yet played this turn.\n"	pointer
,	O
np	pointer
->	O
id	short
,	O
np	pointer
->	O
name	array
)	O
;	O
}	O
else	O
{	O
while	O
(	O
(	O
argc	int
=	O
getexec	function
(	O
exec_file	pointer
,	O
args	array
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
run_exec_line	function
(	O
np	pointer
,	O
args	array
)	O
;	O
}	O
if	O
(	O
exec_file	pointer
!=	O
NULL	O
)	O
{	O
fclose	function
(	O
exec_file	pointer
)	O
;	O
}	O
}	O
}	O
int	O
getexec	function
(	O
FILE	struct
*	O
fp	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
char	O
buff	array
[	O
EXECLEN	int
]	O
;	O
if	O
(	O
fp	pointer
==	O
NULL	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
fgets	function
(	O
buff	array
,	O
EXECLEN	int
,	O
fp	pointer
)	O
!=	O
NULL	O
)	O
{	O
return	O
parse_exec_line	function
(	O
buff	array
,	O
args	array
)	O
;	O
}	O
else	O
return	O
-	O
1	int
;	O
}	O
void	O
run_exec_line	function
(	O
Snation	struct
*	O
np	pointer
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
int	O
i	int
,	O
found	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sizeof	O
(	O
commands	array
)	O
/	O
sizeof	O
(	O
struct	O
exec_cmd	struct
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
(	O
strcmp	function
(	O
commands	array
[	O
i	int
]	O
.	O
name	array
,	O
args	array
[	O
0	int
]	O
.	O
data	union
.	O
str	array
)	O
)	O
)	O
{	O
found	int
=	O
1	int
;	O
(	O
*	O
commands	array
[	O
i	int
]	O
.	O
func	pointer
)	O
(	O
np	pointer
,	O
args	array
)	O
;	O
}	O
}	O
if	O
(	O
!	O
found	int
)	O
{	O
printf	function
(	O
"Error: exec command <%s> not implemented\n"	pointer
,	O
args	array
[	O
0	int
]	O
.	O
data	union
.	O
str	array
)	O
;	O
}	O
}	O
int	O
parse_exec_line	function
(	O
char	O
line	array
[	O
]	O
,	O
struct	O
argument	struct
args	array
[	O
]	O
)	O
{	O
char	O
arg_tmp	array
[	O
NAMELEN	int
]	O
;	O
int	O
count	int
=	O
0	int
,	O
place	int
;	O
if	O
(	O
line	array
[	O
strlen	function
(	O
line	array
)	O
-	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
line	array
[	O
strlen	function
(	O
line	array
)	O
+	O
1	int
]	O
=	O
'\0'	O
;	O
line	array
[	O
strlen	function
(	O
line	array
)	O
]	O
=	O
'\n'	O
;	O
}	O
sscanf	function
(	O
line	array
,	O
"%[^:]"	pointer
,	O
args	array
[	O
0	int
]	O
.	O
data	union
.	O
str	array
)	O
;	O
place	int
=	O
strlen	function
(	O
args	array
[	O
0	int
]	O
.	O
data	union
.	O
str	array
)	O
+	O
1	int
;	O
args	array
[	O
0	int
]	O
.	O
type	array
=	O
TXT	int
;	O
do	O
{	O
sscanf	function
(	O
&	O
line	array
[	O
place	int
]	O
,	O
"%[^:\n]"	pointer
,	O
arg_tmp	array
)	O
;	O
place	int
+=	O
strlen	function
(	O
arg_tmp	array
)	O
+	O
1	int
;	O
count	int
++	O
;	O
if	O
(	O
(	O
isdigit	function
(	O
arg_tmp	array
[	O
0	int
]	O
)	O
||	O
(	O
arg_tmp	array
[	O
0	int
]	O
==	O
'-'	O
)	O
)	O
&&	O
are_all_digits	function
(	O
arg_tmp	array
+	O
1	int
)	O
)	O
{	O
args	array
[	O
count	int
]	O
.	O
type	array
=	O
NUM	int
;	O
args	array
[	O
count	int
]	O
.	O
data	union
.	O
num	int
=	O
atoi	function
(	O
arg_tmp	array
)	O
;	O
}	O
else	O
{	O
args	array
[	O
count	int
]	O
.	O
type	array
=	O
TXT	int
;	O
strcpy	function
(	O
args	array
[	O
count	int
]	O
.	O
data	union
.	O
str	array
,	O
arg_tmp	array
)	O
;	O
}	O
}	O
while	O
(	O
place	int
+	O
1	int
<	O
strlen	function
(	O
line	array
)	O
)	O
;	O
return	O
count	int
;	O
}	O
int	O
get_nation_id	function
(	O
char	O
name	array
[	O
]	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
world	struct
.	O
n_nations	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
world	struct
.	O
nations	pointer
[	O
i	int
]	O
.	O
name	array
,	O
name	array
)	O
)	O
{	O
return	O
i	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
