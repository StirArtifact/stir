struct	O
Request	struct
{	O
struct	O
MHD_Connection	O
*	O
connection	pointer
;	O
int	O
timerfd	int
;	O
}	O
;	O
static	O
int	O
epfd	int
;	O
static	O
struct	O
epoll_event	struct
evt	struct
;	O
static	O
int	O
ahc_echo	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	long
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
int	O
ret	int
;	O
struct	O
Request	struct
*	O
req	pointer
;	O
struct	O
itimerspec	struct
ts	struct
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
url	pointer
;	O
(	O
void	O
)	O
method	pointer
;	O
(	O
void	O
)	O
version	pointer
;	O
(	O
void	O
)	O
upload_data	pointer
;	O
(	O
void	O
)	O
upload_data_size	pointer
;	O
req	pointer
=	O
*	O
ptr	pointer
;	O
if	O
(	O
NULL	O
==	O
req	pointer
)	O
{	O
req	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
Request	struct
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
req	pointer
)	O
return	O
MHD_NO	int
;	O
req	pointer
->	O
connection	pointer
=	O
connection	pointer
;	O
req	pointer
->	O
timerfd	int
=	O
-	O
1	int
;	O
*	O
ptr	pointer
=	O
req	pointer
;	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
-	O
1	int
!=	O
req	pointer
->	O
timerfd	int
)	O
{	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
url	pointer
)	O
,	O
(	O
void	O
*	O
)	O
url	pointer
,	O
MHD_RESPMEM_MUST_COPY	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	pointer
)	O
return	O
MHD_NO	int
;	O
ret	int
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_OK	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
req	pointer
->	O
timerfd	int
=	O
timerfd_create	function
(	O
CLOCK_MONOTONIC	int
,	O
TFD_NONBLOCK	int
)	O
;	O
if	O
(	O
-	O
1	int
==	O
req	pointer
->	O
timerfd	int
)	O
{	O
printf	function
(	O
"timerfd_create: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
evt	struct
.	O
events	int
=	O
EPOLLIN	int
;	O
evt	struct
.	O
data	pointer
.	O
ptr	pointer
=	O
req	pointer
;	O
if	O
(	O
-	O
1	int
==	O
epoll_ctl	function
(	O
epfd	int
,	O
EPOLL_CTL_ADD	int
,	O
req	pointer
->	O
timerfd	int
,	O
&	O
evt	struct
)	O
)	O
{	O
printf	function
(	O
"epoll_ctl: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
ts	struct
.	O
it_value	struct
.	O
tv_sec	long
=	O
1	int
;	O
ts	struct
.	O
it_value	struct
.	O
tv_nsec	long
=	O
0	int
;	O
ts	struct
.	O
it_interval	struct
.	O
tv_sec	long
=	O
0	int
;	O
ts	struct
.	O
it_interval	struct
.	O
tv_nsec	long
=	O
0	int
;	O
if	O
(	O
-	O
1	int
==	O
timerfd_settime	function
(	O
req	pointer
->	O
timerfd	int
,	O
0	int
,	O
&	O
ts	struct
,	O
NULL	O
)	O
)	O
{	O
printf	function
(	O
"timerfd_settime: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
MHD_suspend_connection	function
(	O
connection	pointer
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
static	O
void	O
connection_done	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
void	O
*	O
*	O
con_cls	pointer
,	O
enum	O
MHD_RequestTerminationCode	enum
toe	enum
)	O
{	O
struct	O
Request	struct
*	O
req	pointer
=	O
*	O
con_cls	pointer
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
connection	pointer
;	O
(	O
void	O
)	O
toe	enum
;	O
if	O
(	O
-	O
1	int
!=	O
req	pointer
->	O
timerfd	int
)	O
if	O
(	O
0	int
!=	O
close	pointer
(	O
req	pointer
->	O
timerfd	int
)	O
)	O
abort	function
(	O
)	O
;	O
free	function
(	O
req	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	pointer
;	O
const	O
union	O
MHD_DaemonInfo	union
*	O
info	pointer
;	O
int	O
current_event_count	int
;	O
struct	O
epoll_event	struct
events_list	array
[	O
1	int
]	O
;	O
struct	O
Request	struct
*	O
req	pointer
;	O
uint64_t	long
timer_expirations	long
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	function
(	O
"%s PORT\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	pointer
=	O
MHD_start_daemon	function
(	O
MHD_USE_EPOLL	int
|	O
MHD_ALLOW_SUSPEND_RESUME	int
,	O
atoi	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	function
,	O
NULL	O
,	O
MHD_OPTION_NOTIFY_COMPLETED	int
,	O
&	O
connection_done	function
,	O
NULL	O
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
d	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
info	pointer
=	O
MHD_get_daemon_info	function
(	O
d	pointer
,	O
MHD_DAEMON_INFO_EPOLL_FD	int
)	O
;	O
if	O
(	O
info	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
epfd	int
=	O
epoll_create1	function
(	O
EPOLL_CLOEXEC	int
)	O
;	O
if	O
(	O
-	O
1	int
==	O
epfd	int
)	O
return	O
1	int
;	O
evt	struct
.	O
events	int
=	O
EPOLLIN	int
;	O
evt	struct
.	O
data	pointer
.	O
ptr	pointer
=	O
NULL	O
;	O
if	O
(	O
-	O
1	int
==	O
epoll_ctl	function
(	O
epfd	int
,	O
EPOLL_CTL_ADD	int
,	O
info	pointer
->	O
epoll_fd	int
,	O
&	O
evt	struct
)	O
)	O
return	O
1	int
;	O
while	O
(	O
1	int
)	O
{	O
int	O
timeout	pointer
;	O
MHD_UNSIGNED_LONG_LONG	O
to	long long
;	O
if	O
(	O
MHD_YES	int
!=	O
MHD_get_timeout	function
(	O
d	pointer
,	O
&	O
to	long long
)	O
)	O
timeout	pointer
=	O
TIMEOUT_INFINITE	O
;	O
else	O
timeout	pointer
=	O
(	O
to	long long
<	O
INT_MAX	O
-	O
1	int
)	O
?	O
(	O
int	O
)	O
to	long long
:	O
(	O
INT_MAX	O
-	O
1	int
)	O
;	O
current_event_count	int
=	O
epoll_wait	function
(	O
epfd	int
,	O
events_list	array
,	O
1	int
,	O
timeout	pointer
)	O
;	O
if	O
(	O
1	int
==	O
current_event_count	int
)	O
{	O
if	O
(	O
events_list	array
[	O
0	int
]	O
.	O
data	pointer
.	O
ptr	pointer
)	O
{	O
req	pointer
=	O
events_list	array
[	O
0	int
]	O
.	O
data	pointer
.	O
ptr	pointer
;	O
if	O
(	O
-	O
1	int
==	O
read	pointer
(	O
req	pointer
->	O
timerfd	int
,	O
&	O
timer_expirations	long
,	O
sizeof	O
(	O
timer_expirations	long
)	O
)	O
)	O
{	O
return	O
1	int
;	O
}	O
MHD_resume_connection	function
(	O
req	pointer
->	O
connection	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
0	int
==	O
current_event_count	int
)	O
{	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
MHD_run	function
(	O
d	pointer
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
