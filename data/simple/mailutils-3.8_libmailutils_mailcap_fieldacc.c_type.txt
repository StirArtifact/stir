int	O
mu_mailcap_entry_sget_field	function
(	O
mu_mailcap_entry_t	pointer
ent	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
char	O
const	O
*	O
*	O
pval	pointer
)	O
{	O
struct	O
mailcap_field	struct
*	O
fp	pointer
;	O
if	O
(	O
!	O
ent	pointer
||	O
!	O
name	pointer
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
pval	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
fp	pointer
=	O
mu_assoc_get	function
(	O
ent	pointer
->	O
fields	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
pval	pointer
)	O
{	O
if	O
(	O
fp	pointer
->	O
type	pointer
==	O
fld_string	int
)	O
*	O
pval	pointer
=	O
fp	pointer
->	O
strval	pointer
;	O
else	O
*	O
pval	pointer
=	O
NULL	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_mailcap_entry_aget_field	function
(	O
mu_mailcap_entry_t	pointer
ent	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
const	O
*	O
val	array
;	O
rc	int
=	O
mu_mailcap_entry_sget_field	function
(	O
ent	pointer
,	O
name	pointer
,	O
&	O
val	array
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
val	array
)	O
{	O
char	O
*	O
copy	pointer
=	O
strdup	function
(	O
val	array
)	O
;	O
if	O
(	O
!	O
copy	pointer
)	O
return	O
ENOMEM	int
;	O
*	O
pval	pointer
=	O
copy	pointer
;	O
}	O
else	O
*	O
pval	pointer
=	O
NULL	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_mailcap_entry_get_field	function
(	O
mu_mailcap_entry_t	pointer
ent	pointer
,	O
char	O
const	O
*	O
name	pointer
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
pn	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
const	O
*	O
val	array
;	O
size_t	long
len	int
;	O
if	O
(	O
!	O
ent	pointer
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_mailcap_entry_sget_field	function
(	O
ent	pointer
,	O
name	pointer
,	O
&	O
val	array
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
val	array
)	O
{	O
len	int
=	O
strlen	function
(	O
val	array
)	O
;	O
if	O
(	O
buffer	pointer
)	O
{	O
if	O
(	O
len	int
>	O
buflen	long
)	O
len	int
=	O
buflen	long
;	O
memcpy	function
(	O
buffer	pointer
,	O
val	array
,	O
len	int
)	O
;	O
buffer	pointer
[	O
len	int
]	O
=	O
0	int
;	O
}	O
}	O
else	O
{	O
len	int
=	O
0	int
;	O
if	O
(	O
buffer	pointer
)	O
buffer	pointer
[	O
0	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
pn	pointer
)	O
*	O
pn	pointer
=	O
len	int
;	O
return	O
0	int
;	O
}	O
