typedef	O
struct	O
{	O
EUint32	long
Status	long
;	O
EUint32	long
pid	long
;	O
EUint32	long
fdR	long
;	O
EUint32	long
fdW	long
;	O
}	O
DtPROCEXEC	struct
;	O
EUint32	long
EDMAPROC	O
PROCEXECRunZ	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
cmd1	pointer
)	O
{	O
DtPROCEXEC	struct
*	O
m	pointer
;	O
EChar	char
*	O
argv	array
[	O
20	int
]	O
;	O
EChar	char
cmd	array
[	O
256	int
]	O
;	O
EUint32	long
i	int
,	O
n	long
;	O
EPChar	pointer
p	pointer
,	O
p1	pointer
;	O
m	pointer
=	O
(	O
DtPROCEXEC	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
strncpy	function
(	O
cmd	array
,	O
cmd1	pointer
,	O
256	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Building exec parameter array..."	pointer
)	O
;	O
n	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	function
(	O
cmd	array
)	O
;	O
i	int
++	O
)	O
if	O
(	O
cmd	array
[	O
i	int
]	O
==	O
' '	O
)	O
n	long
++	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"  %d parameters located..."	pointer
,	O
n	long
+	O
1	int
)	O
;	O
p	pointer
=	O
cmd	array
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
{	O
p1	pointer
=	O
strchr	function
(	O
p	pointer
,	O
' '	O
)	O
;	O
*	O
p1	pointer
=	O
0	int
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Parameter isolated : %s"	pointer
,	O
p	pointer
)	O
;	O
argv	array
[	O
i	int
]	O
=	O
p	pointer
;	O
p	pointer
=	O
p1	pointer
+	O
1	int
;	O
}	O
argv	array
[	O
n	long
]	O
=	O
p	pointer
;	O
argv	array
[	O
n	long
+	O
1	int
]	O
=	O
0	int
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Parameter Isolated : %s"	pointer
,	O
p	pointer
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Parameters added to parameter array..."	pointer
)	O
;	O
m	pointer
->	O
pid	long
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
m	pointer
->	O
pid	long
==	O
0	int
)	O
{	O
if	O
(	O
execvp	function
(	O
argv	array
[	O
0	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
argv	array
)	O
<	O
0	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Could not exec %s\n"	pointer
,	O
argv	array
[	O
0	int
]	O
)	O
;	O
}	O
exit	function
(	O
0	int
)	O
;	O
}	O
m	pointer
->	O
Status	long
=	O
RUNNING	int
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECRunPipedZ	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
cmd1	pointer
)	O
{	O
DtPROCEXEC	struct
*	O
m	pointer
;	O
EChar	char
*	O
argv	array
[	O
20	int
]	O
;	O
EChar	char
cmd	array
[	O
256	int
]	O
;	O
EUint32	long
i	int
,	O
n	long
;	O
EPChar	pointer
p	pointer
,	O
p1	pointer
;	O
int	O
fd	array
[	O
2	int
]	O
;	O
m	pointer
=	O
(	O
DtPROCEXEC	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
strncpy	function
(	O
cmd	array
,	O
cmd1	pointer
,	O
256	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Building exec parameter array..."	pointer
)	O
;	O
n	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	function
(	O
cmd	array
)	O
;	O
i	int
++	O
)	O
if	O
(	O
cmd	array
[	O
i	int
]	O
==	O
' '	O
)	O
n	long
++	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"  %d parameters located..."	pointer
,	O
n	long
+	O
1	int
)	O
;	O
p	pointer
=	O
cmd	array
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
{	O
p1	pointer
=	O
strchr	function
(	O
p	pointer
,	O
' '	O
)	O
;	O
*	O
p1	pointer
=	O
0	int
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Parameter isolated : %s"	pointer
,	O
p	pointer
)	O
;	O
argv	array
[	O
i	int
]	O
=	O
p	pointer
;	O
p	pointer
=	O
p1	pointer
+	O
1	int
;	O
}	O
argv	array
[	O
n	long
]	O
=	O
p	pointer
;	O
argv	array
[	O
n	long
+	O
1	int
]	O
=	O
0	int
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Parameter Isolated : %s"	pointer
,	O
p	pointer
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Parameters added to parameter array..."	pointer
)	O
;	O
if	O
(	O
pipe	function
(	O
fd	array
)	O
<	O
0	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Can't create pipe\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
m	pointer
->	O
fdR	long
=	O
fd	array
[	O
0	int
]	O
;	O
m	pointer
->	O
fdW	long
=	O
fd	array
[	O
1	int
]	O
;	O
m	pointer
->	O
pid	long
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
m	pointer
->	O
pid	long
==	O
0	int
)	O
{	O
dup2	function
(	O
fd	array
[	O
1	int
]	O
,	O
STDOUT_FILENO	int
)	O
;	O
close	function
(	O
fd	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
execvp	function
(	O
argv	array
[	O
0	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
argv	array
)	O
<	O
0	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Could not exec %s\n"	pointer
,	O
argv	array
[	O
0	int
]	O
)	O
;	O
}	O
exit	function
(	O
0	int
)	O
;	O
}	O
m	pointer
->	O
Status	long
=	O
PIPED_PROCESS	int
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECWait	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtPROCEXEC	struct
*	O
m	pointer
;	O
pid_t	int
p	pointer
;	O
m	pointer
=	O
(	O
DtPROCEXEC	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
wait	function
(	O
&	O
p	pointer
)	O
;	O
return	O
p	pointer
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECGetMsgsZsS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
msg	pointer
,	O
EUint32	long
*	O
n	long
)	O
{	O
DtPROCEXEC	struct
*	O
m	pointer
;	O
ESint32	int
r	int
;	O
m	pointer
=	O
(	O
DtPROCEXEC	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Ready for Retrieve data"	pointer
)	O
;	O
if	O
(	O
m	pointer
->	O
Status	long
==	O
PIPED_PROCESS	int
)	O
r	int
=	O
read	function
(	O
m	pointer
->	O
fdR	long
,	O
msg	pointer
,	O
*	O
n	long
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"%s"	pointer
,	O
"Data retrieved from pipe"	pointer
)	O
;	O
*	O
n	long
=	O
r	int
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECKill	function
(	O
OBJID	int
IdObj	int
)	O
{	O
DtPROCEXEC	struct
*	O
m	pointer
;	O
pid_t	int
s	int
;	O
m	pointer
=	O
(	O
DtPROCEXEC	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
kill	function
(	O
m	pointer
->	O
pid	long
,	O
9	int
)	O
;	O
waitpid	function
(	O
m	pointer
->	O
pid	long
,	O
&	O
s	int
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECRunPiped2Z	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
cmd1	pointer
)	O
{	O
DtPROCEXEC	struct
*	O
m	pointer
;	O
m	pointer
=	O
(	O
DtPROCEXEC	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"Running PIPED Process Type II : '%s'"	pointer
,	O
cmd1	pointer
)	O
;	O
if	O
(	O
(	O
m	pointer
->	O
fdR	long
=	O
(	O
EUint32	long
)	O
popen	function
(	O
cmd1	pointer
,	O
"r"	pointer
)	O
)	O
<	O
0	int
)	O
{	O
edma_printf_obj	function
(	O
IdObj	int
,	O
"popen Fails... Cannot execute command '%s'"	pointer
,	O
cmd1	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_printf_obj	function
(	O
IdObj	int
,	O
" -- Stream located : %d"	pointer
,	O
m	pointer
->	O
fdR	long
)	O
;	O
m	pointer
->	O
Status	long
=	O
PIPED_PROCESS2	int
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECGetMsg2sZsS32	function
(	O
OBJID	int
IdObj	int
,	O
EPChar	pointer
msg	pointer
,	O
EUint32	long
*	O
n	long
)	O
{	O
DtPROCEXEC	struct
*	O
m	pointer
;	O
EChar	char
*	O
r	int
;	O
m	pointer
=	O
(	O
DtPROCEXEC	struct
*	O
)	O
edma_get_data_ref	function
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	pointer
->	O
Status	long
==	O
PIPED_PROCESS2	int
)	O
r	int
=	O
fgets	function
(	O
msg	pointer
,	O
*	O
n	long
,	O
(	O
FILE	struct
*	O
)	O
m	pointer
->	O
fdR	long
)	O
;	O
if	O
(	O
r	int
==	O
NULL	O
)	O
*	O
n	long
=	O
0	int
;	O
else	O
*	O
n	long
=	O
strlen	function
(	O
msg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
