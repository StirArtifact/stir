static	O
const	O
char	O
*	O
sub_name	pointer
;	O
static	O
const	O
char	O
*	O
sub_path	pointer
;	O
static	O
char	O
*	O
*	O
sub_argv	pointer
;	O
static	O
int	O
sub_argc	int
;	O
static	O
bool	bool
newline	bool
;	O
static	O
int	O
exitcode	int
;	O
static	O
const	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"directory"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'D'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"input"	pointer
,	O
required_argument	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"newline"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
2	int
}	O
,	O
{	O
"properties-input"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'P'	O
}	O
,	O
{	O
"stringtable-input"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
1	int
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
process_msgdomain_list	function
(	O
const	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
opt	int
;	O
bool	bool
do_help	bool
;	O
bool	bool
do_version	bool
;	O
const	O
char	O
*	O
input_file	pointer
;	O
msgdomain_list_ty	struct
*	O
result	pointer
;	O
catalog_input_format_ty	pointer
input_syntax	pointer
=	O
&	O
input_format_po	struct
;	O
size_t	long
i	long
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
error_print_progname	pointer
=	O
maybe_print_progname	function
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
bindtextdomain	function
(	O
"bison-runtime"	pointer
,	O
relocate	O
(	O
BISON_LOCALEDIR	O
)	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
atexit	function
(	O
close_stdout	function
)	O
;	O
do_help	bool
=	O
false	int
;	O
do_version	bool
=	O
false	int
;	O
input_file	pointer
=	O
NULL	O
;	O
while	O
(	O
(	O
opt	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"+D:hi:PV"	pointer
,	O
long_options	array
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'D'	O
:	O
dir_list_append	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
do_help	bool
=	O
true	int
;	O
break	O
;	O
case	O
'i'	O
:	O
if	O
(	O
input_file	pointer
!=	O
NULL	O
)	O
{	O
error	function
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"at most one input file allowed"	pointer
)	O
)	O
;	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
input_file	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'P'	O
:	O
input_syntax	pointer
=	O
&	O
input_format_properties	struct
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	bool
=	O
true	int
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
1	int
:	O
input_syntax	pointer
=	O
&	O
input_format_stringtable	struct
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
2	int
:	O
newline	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
do_version	bool
)	O
{	O
printf	function
(	O
"%s (GNU %s) %s\n"	pointer
,	O
basename	function
(	O
program_name	pointer
)	O
,	O
PACKAGE	pointer
,	O
VERSION	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	pointer
)	O
,	O
"2001-2019"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Written by %s.\n"	pointer
)	O
,	O
proper_name	function
(	O
"Bruno Haible"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
do_help	bool
)	O
usage	function
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
optind	int
==	O
argc	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"missing command name"	pointer
)	O
)	O
;	O
sub_name	pointer
=	O
argv	pointer
[	O
optind	int
]	O
;	O
sub_argc	int
=	O
argc	int
-	O
optind	int
;	O
sub_argv	pointer
=	O
XNMALLOC	O
(	O
sub_argc	int
+	O
1	int
,	O
char	O
*	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sub_argc	int
;	O
i	long
++	O
)	O
sub_argv	pointer
[	O
i	long
]	O
=	O
argv	pointer
[	O
optind	int
+	O
i	long
]	O
;	O
sub_argv	pointer
[	O
i	long
]	O
=	O
NULL	O
;	O
if	O
(	O
input_file	pointer
==	O
NULL	O
)	O
input_file	pointer
=	O
"-"	pointer
;	O
result	pointer
=	O
read_catalog_file	function
(	O
input_file	pointer
,	O
input_syntax	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
sub_name	pointer
,	O
"0"	pointer
)	O
!=	O
0	int
)	O
{	O
compare_po_locale_charsets	function
(	O
result	pointer
)	O
;	O
{	O
sigset_t	struct
sigpipe_set	struct
;	O
sigemptyset	function
(	O
&	O
sigpipe_set	struct
)	O
;	O
sigaddset	function
(	O
&	O
sigpipe_set	struct
,	O
SIGPIPE	int
)	O
;	O
sigprocmask	function
(	O
SIG_UNBLOCK	int
,	O
&	O
sigpipe_set	struct
,	O
NULL	O
)	O
;	O
}	O
sub_path	pointer
=	O
find_in_path	function
(	O
sub_name	pointer
)	O
;	O
sub_argv	pointer
[	O
0	int
]	O
=	O
(	O
char	O
*	O
)	O
sub_path	pointer
;	O
}	O
exitcode	int
=	O
0	int
;	O
process_msgdomain_list	function
(	O
result	pointer
)	O
;	O
exit	function
(	O
exitcode	int
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
else	O
{	O
printf	function
(	O
_	O
(	O
"Usage: %s [OPTION] COMMAND [COMMAND-OPTION]\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Applies a command to all translations of a translation catalog.\nThe COMMAND can be any program that reads a translation from standard\ninput.  It is invoked once for each translation.  Its output becomes\nmsgexec's output.  msgexec's return code is the maximum return code\nacross all invocations.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"A special builtin command called '0' outputs the translation, followed by a\nnull byte.  The output of \"msgexec 0\" is suitable as input for \"xargs -0\".\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Command input:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  --newline                   add newline at the end of input\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Input file location:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -i, --input=INPUTFILE       input PO file\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -D, --directory=DIRECTORY   add DIRECTORY to list for input files search\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"If no input file is given or if it is -, standard input is read.\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Input file syntax:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -P, --properties-input      input file is in Java .properties syntax\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"      --stringtable-input     input file is in NeXTstep/GNUstep .strings syntax\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Informative output:\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	pointer
)	O
)	O
;	O
printf	function
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	pointer
)	O
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
}	O
exit	function
(	O
status	int
)	O
;	O
}	O
static	O
inline	O
int	O
nonintr_close	function
(	O
int	O
fd	array
)	O
{	O
int	O
retval	int
;	O
do	O
retval	int
=	O
close	pointer
(	O
fd	array
)	O
;	O
while	O
(	O
retval	int
<	O
0	int
&&	O
errno	O
==	O
EINTR	int
)	O
;	O
return	O
retval	int
;	O
}	O
static	O
void	O
process_string	function
(	O
const	O
message_ty	struct
*	O
mp	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
)	O
{	O
if	O
(	O
strcmp	function
(	O
sub_name	pointer
,	O
"0"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
full_write	function
(	O
STDOUT_FILENO	int
,	O
str	pointer
,	O
len	long
+	O
1	int
)	O
<	O
len	long
+	O
1	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"write to stdout failed"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
char	O
*	O
location	pointer
;	O
pid_t	int
child	int
;	O
int	O
fd	array
[	O
1	int
]	O
;	O
void	O
(	O
*	O
orig_sigpipe_handler	pointer
)	O
(	O
int	O
)	O
;	O
int	O
exitstatus	int
;	O
char	O
*	O
newstr	pointer
;	O
if	O
(	O
mp	pointer
->	O
msgctxt	pointer
!=	O
NULL	O
)	O
xsetenv	function
(	O
"MSGEXEC_MSGCTXT"	pointer
,	O
mp	pointer
->	O
msgctxt	pointer
,	O
1	int
)	O
;	O
else	O
unsetenv	function
(	O
"MSGEXEC_MSGCTXT"	pointer
)	O
;	O
xsetenv	function
(	O
"MSGEXEC_MSGID"	pointer
,	O
mp	pointer
->	O
msgid	pointer
,	O
1	int
)	O
;	O
if	O
(	O
mp	pointer
->	O
msgid_plural	pointer
!=	O
NULL	O
)	O
xsetenv	function
(	O
"MSGEXEC_MSGID_PLURAL"	pointer
,	O
mp	pointer
->	O
msgid_plural	pointer
,	O
1	int
)	O
;	O
else	O
unsetenv	function
(	O
"MSGEXEC_MSGID_PLURAL"	pointer
)	O
;	O
location	pointer
=	O
xasprintf	function
(	O
"%s:%ld"	pointer
,	O
mp	pointer
->	O
pos	struct
.	O
file_name	pointer
,	O
(	O
long	O
)	O
mp	pointer
->	O
pos	struct
.	O
line_number	long
)	O
;	O
xsetenv	function
(	O
"MSGEXEC_LOCATION"	pointer
,	O
location	pointer
,	O
1	int
)	O
;	O
free	function
(	O
location	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
prev_msgctxt	pointer
!=	O
NULL	O
)	O
xsetenv	function
(	O
"MSGEXEC_PREV_MSGCTXT"	pointer
,	O
mp	pointer
->	O
prev_msgctxt	pointer
,	O
1	int
)	O
;	O
else	O
unsetenv	function
(	O
"MSGEXEC_PREV_MSGCTXT"	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
prev_msgid	pointer
!=	O
NULL	O
)	O
xsetenv	function
(	O
"MSGEXEC_PREV_MSGID"	pointer
,	O
mp	pointer
->	O
prev_msgid	pointer
,	O
1	int
)	O
;	O
else	O
unsetenv	function
(	O
"MSGEXEC_PREV_MSGID"	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
prev_msgid_plural	pointer
!=	O
NULL	O
)	O
xsetenv	function
(	O
"MSGEXEC_PREV_MSGID_PLURAL"	pointer
,	O
mp	pointer
->	O
prev_msgid_plural	pointer
,	O
1	int
)	O
;	O
else	O
unsetenv	function
(	O
"MSGEXEC_PREV_MSGID_PLURAL"	pointer
)	O
;	O
child	int
=	O
create_pipe_out	function
(	O
sub_name	pointer
,	O
sub_path	pointer
,	O
sub_argv	pointer
,	O
NULL	O
,	O
false	int
,	O
true	int
,	O
true	int
,	O
fd	array
)	O
;	O
orig_sigpipe_handler	pointer
=	O
signal	function
(	O
SIGPIPE	int
,	O
SIG_IGN	O
)	O
;	O
if	O
(	O
newline	bool
)	O
{	O
newstr	pointer
=	O
XNMALLOC	O
(	O
len	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
newstr	pointer
,	O
str	pointer
,	O
len	long
)	O
;	O
newstr	pointer
[	O
len	long
++	O
]	O
=	O
'\n'	O
;	O
}	O
else	O
newstr	pointer
=	O
(	O
char	O
*	O
)	O
str	pointer
;	O
if	O
(	O
full_write	function
(	O
fd	array
[	O
0	int
]	O
,	O
newstr	pointer
,	O
len	long
)	O
<	O
len	long
)	O
if	O
(	O
errno	O
!=	O
EPIPE	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"write to %s subprocess failed"	pointer
)	O
,	O
sub_name	pointer
)	O
;	O
if	O
(	O
newstr	pointer
!=	O
str	pointer
)	O
free	function
(	O
newstr	pointer
)	O
;	O
close	pointer
(	O
fd	array
[	O
0	int
]	O
)	O
;	O
signal	function
(	O
SIGPIPE	int
,	O
orig_sigpipe_handler	pointer
)	O
;	O
exitstatus	int
=	O
wait_subprocess	function
(	O
child	int
,	O
sub_name	pointer
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitcode	int
<	O
exitstatus	int
)	O
exitcode	int
=	O
exitstatus	int
;	O
}	O
}	O
static	O
void	O
process_message	function
(	O
const	O
message_ty	struct
*	O
mp	pointer
)	O
{	O
const	O
char	O
*	O
msgstr	pointer
=	O
mp	pointer
->	O
msgstr	pointer
;	O
size_t	long
msgstr_len	long
=	O
mp	pointer
->	O
msgstr_len	long
;	O
const	O
char	O
*	O
p	pointer
;	O
size_t	long
k	long
;	O
for	O
(	O
p	pointer
=	O
msgstr	pointer
,	O
k	long
=	O
0	int
;	O
p	pointer
<	O
msgstr	pointer
+	O
msgstr_len	long
;	O
k	long
++	O
)	O
{	O
size_t	long
length	long
=	O
strlen	function
(	O
p	pointer
)	O
;	O
if	O
(	O
mp	pointer
->	O
msgid_plural	pointer
!=	O
NULL	O
)	O
{	O
char	O
*	O
plural_form_string	pointer
=	O
xasprintf	function
(	O
"%lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
k	long
)	O
;	O
xsetenv	function
(	O
"MSGEXEC_PLURAL_FORM"	pointer
,	O
plural_form_string	pointer
,	O
1	int
)	O
;	O
free	function
(	O
plural_form_string	pointer
)	O
;	O
}	O
else	O
unsetenv	function
(	O
"MSGEXEC_PLURAL_FORM"	pointer
)	O
;	O
process_string	function
(	O
mp	pointer
,	O
p	pointer
,	O
length	long
)	O
;	O
p	pointer
+=	O
length	long
+	O
1	int
;	O
}	O
}	O
static	O
void	O
process_message_list	function
(	O
const	O
message_list_ty	struct
*	O
mlp	pointer
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
mlp	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
process_message	function
(	O
mlp	pointer
->	O
item	pointer
[	O
j	long
]	O
)	O
;	O
}	O
static	O
void	O
process_msgdomain_list	function
(	O
const	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
size_t	long
k	long
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
mdlp	pointer
->	O
nitems	long
;	O
k	long
++	O
)	O
process_message_list	function
(	O
mdlp	pointer
->	O
item	pointer
[	O
k	long
]	O
->	O
messages	pointer
)	O
;	O
}	O
