struct	O
divvy	struct
*	O
plexus	pointer
;	O
struct	O
divvy	struct
*	O
single	pointer
;	O
void	O
oom	function
(	O
void	O
)	O
{	O
PFATAL	O
(	O
"out of memory"	pointer
)	O
;	O
}	O
static	O
void	O
*	O
allocate	function
(	O
size_t	long
size	long
,	O
bool	bool
clearp	bool
)	O
{	O
void	O
*	O
p	pointer
=	O
(	O
clearp	bool
?	O
calloc	function
(	O
1	int
,	O
size	long
)	O
:	O
malloc	function
(	O
size	long
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
oom	function
(	O
)	O
;	O
return	O
p	pointer
;	O
}	O
static	O
void	O
*	O
xmalloc	function
(	O
size_t	long
size	long
)	O
{	O
return	O
allocate	function
(	O
size	long
,	O
false	int
)	O
;	O
}	O
struct	O
divvy	struct
*	O
make_space	function
(	O
char	O
const	O
name	pointer
[	O
]	O
)	O
{	O
struct	O
divvy	struct
*	O
divvy	struct
=	O
TCALLOC	O
(	O
struct	O
divvy	struct
)	O
;	O
divvy	struct
->	O
name	pointer
=	O
name	pointer
;	O
divvy	struct
->	O
space	pointer
=	O
TCALLOC	O
(	O
struct	O
obstack	struct
)	O
;	O
obstack_alloc_failed_handler	pointer
=	O
oom	function
;	O
obstack_init	O
(	O
divvy	struct
->	O
space	pointer
)	O
;	O
{	O
size_t	long
widest	long
=	O
sizeof	O
(	O
off_t	long
)	O
;	O
if	O
(	O
widest	long
<	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
widest	long
=	O
sizeof	O
(	O
void	O
*	O
)	O
;	O
obstack_alignment_mask	O
(	O
divvy	struct
->	O
space	pointer
)	O
=	O
widest	long
-	O
1	int
;	O
}	O
divvy	struct
->	O
first	pointer
=	O
obstack_next_free	O
(	O
divvy	struct
->	O
space	pointer
)	O
;	O
divvy	struct
->	O
count	long
=	O
0	int
;	O
return	O
divvy	struct
;	O
}	O
void	O
*	O
alloc	function
(	O
struct	O
divvy	struct
*	O
divvy	struct
,	O
char	O
const	O
*	O
what	pointer
USED_FOR_DEBUG	O
,	O
size_t	long
len	char
)	O
{	O
divvy	struct
->	O
count	long
++	O
;	O
return	O
obstack_alloc	O
(	O
divvy	struct
->	O
space	pointer
,	O
len	char
)	O
;	O
}	O
void	O
*	O
zlloc	function
(	O
struct	O
divvy	struct
*	O
divvy	struct
,	O
char	O
const	O
*	O
what	pointer
,	O
size_t	long
len	char
)	O
{	O
return	O
memset	function
(	O
alloc	function
(	O
divvy	struct
,	O
what	pointer
,	O
len	char
)	O
,	O
0	int
,	O
len	char
)	O
;	O
}	O
char	O
*	O
intern	function
(	O
struct	O
divvy	struct
*	O
divvy	struct
,	O
char	O
const	O
*	O
s	pointer
,	O
size_t	long
len	char
)	O
{	O
divvy	struct
->	O
count	long
++	O
;	O
return	O
obstack_copy0	O
(	O
divvy	struct
->	O
space	pointer
,	O
s	pointer
,	O
len	char
)	O
;	O
}	O
void	O
brush_off	function
(	O
struct	O
divvy	struct
*	O
divvy	struct
,	O
void	O
*	O
ptr	pointer
)	O
{	O
divvy	struct
->	O
count	long
--	O
;	O
obstack_free	function
(	O
divvy	struct
->	O
space	pointer
,	O
ptr	pointer
)	O
;	O
}	O
void	O
forget	function
(	O
struct	O
divvy	struct
*	O
divvy	struct
)	O
{	O
obstack_free	function
(	O
divvy	struct
->	O
space	pointer
,	O
divvy	struct
->	O
first	pointer
)	O
;	O
divvy	struct
->	O
count	long
=	O
0	int
;	O
}	O
void	O
accf	function
(	O
struct	O
divvy	struct
*	O
divvy	struct
,	O
char	O
const	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
args	pointer
;	O
va_start	O
(	O
args	pointer
,	O
fmt	pointer
)	O
;	O
obstack_vprintf	function
(	O
divvy	struct
->	O
space	pointer
,	O
fmt	pointer
,	O
args	pointer
)	O
;	O
va_end	O
(	O
args	pointer
)	O
;	O
}	O
void	O
accumulate_byte	function
(	O
struct	O
divvy	struct
*	O
divvy	struct
,	O
int	O
c	int
)	O
{	O
obstack_1grow	O
(	O
divvy	struct
->	O
space	pointer
,	O
c	int
)	O
;	O
}	O
void	O
accumulate_range	function
(	O
struct	O
divvy	struct
*	O
divvy	struct
,	O
char	O
const	O
*	O
beg	pointer
,	O
char	O
const	O
*	O
end	pointer
)	O
{	O
struct	O
obstack	struct
*	O
o	pointer
=	O
divvy	struct
->	O
space	pointer
;	O
while	O
(	O
beg	pointer
<	O
end	pointer
)	O
obstack_1grow	O
(	O
o	pointer
,	O
*	O
beg	pointer
++	O
)	O
;	O
}	O
char	O
*	O
finish_string	function
(	O
struct	O
divvy	struct
*	O
divvy	struct
,	O
size_t	long
*	O
result_len	pointer
)	O
{	O
struct	O
obstack	struct
*	O
o	pointer
=	O
divvy	struct
->	O
space	pointer
;	O
char	O
*	O
rv	pointer
;	O
*	O
result_len	pointer
=	O
obstack_object_size	O
(	O
o	pointer
)	O
;	O
obstack_1grow	O
(	O
o	pointer
,	O
'\0'	O
)	O
;	O
rv	pointer
=	O
obstack_finish	O
(	O
o	pointer
)	O
;	O
return	O
rv	pointer
;	O
}	O
void	O
*	O
pointer_array	function
(	O
struct	O
divvy	struct
*	O
divvy	struct
,	O
size_t	long
count	long
)	O
{	O
struct	O
obstack	struct
*	O
o	pointer
=	O
divvy	struct
->	O
space	pointer
;	O
while	O
(	O
count	long
--	O
)	O
obstack_ptr_grow	O
(	O
o	pointer
,	O
NULL	O
)	O
;	O
return	O
obstack_finish	O
(	O
o	pointer
)	O
;	O
}	O
void	O
close_space	function
(	O
struct	O
divvy	struct
*	O
divvy	struct
)	O
{	O
obstack_free	function
(	O
divvy	struct
->	O
space	pointer
,	O
NULL	O
)	O
;	O
divvy	struct
->	O
count	long
=	O
0	int
;	O
divvy	struct
->	O
first	pointer
=	O
NULL	O
;	O
free	function
(	O
divvy	struct
->	O
space	pointer
)	O
;	O
divvy	struct
->	O
space	pointer
=	O
NULL	O
;	O
free	function
(	O
divvy	struct
)	O
;	O
}	O
