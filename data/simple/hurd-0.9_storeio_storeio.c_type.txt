static	O
struct	O
argp_option	struct
options	pointer
[	O
]	O
=	O
{	O
{	O
"readonly"	pointer
,	O
'r'	O
,	O
0	int
,	O
0	int
,	O
"Disallow writing"	pointer
}	O
,	O
{	O
"writable"	pointer
,	O
'w'	O
,	O
0	int
,	O
0	int
,	O
"Allow writing"	pointer
}	O
,	O
{	O
"no-cache"	pointer
,	O
'c'	O
,	O
0	int
,	O
0	int
,	O
"Never cache data--user io does direct device io"	pointer
}	O
,	O
{	O
"no-file-io"	pointer
,	O
'F'	O
,	O
0	int
,	O
0	int
,	O
"Never perform io via plain file io RPCs"	pointer
}	O
,	O
{	O
"no-fileio"	pointer
,	O
0	int
,	O
0	int
,	O
OPTION_ALIAS	int
|	O
OPTION_HIDDEN	int
}	O
,	O
{	O
"enforced"	pointer
,	O
'e'	O
,	O
0	int
,	O
0	int
,	O
"Never reveal underlying devices, even to root"	pointer
}	O
,	O
{	O
"rdev"	pointer
,	O
'n'	O
,	O
"ID"	pointer
,	O
0	int
,	O
"The stat rdev number for this node; may be either a"	pointer
" single integer, or of the form MAJOR,MINOR"	pointer
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
const	O
char	O
doc	pointer
[	O
]	O
=	O
"Translator for devices and other stores"	pointer
;	O
const	O
char	O
*	O
argp_program_version	pointer
=	O
STANDARD_HURD_VERSION	function
(	O
storeio	O
)	O
;	O
struct	O
storeio_argp_params	struct
{	O
struct	O
store_argp_params	O
store_params	struct
;	O
struct	O
dev	pointer
*	O
dev	pointer
;	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
struct	O
storeio_argp_params	struct
*	O
params	pointer
=	O
state	pointer
->	O
input	pointer
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'r'	O
:	O
params	pointer
->	O
dev	pointer
->	O
readonly	O
=	O
1	int
;	O
break	O
;	O
case	O
'w'	O
:	O
params	pointer
->	O
dev	pointer
->	O
readonly	O
=	O
0	int
;	O
break	O
;	O
case	O
'c'	O
:	O
params	pointer
->	O
dev	pointer
->	O
inhibit_cache	O
=	O
1	int
;	O
break	O
;	O
case	O
'e'	O
:	O
params	pointer
->	O
dev	pointer
->	O
enforced	O
=	O
1	int
;	O
break	O
;	O
case	O
'F'	O
:	O
params	pointer
->	O
dev	pointer
->	O
no_fileio	O
=	O
1	int
;	O
break	O
;	O
case	O
'n'	O
:	O
{	O
char	O
*	O
start	pointer
=	O
arg	pointer
,	O
*	O
end	pointer
;	O
dev_t	O
rdev	O
;	O
rdev	O
=	O
strtoul	O
(	O
start	pointer
,	O
&	O
end	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
end	pointer
==	O
','	O
)	O
{	O
start	pointer
=	O
end	pointer
+	O
1	int
;	O
rdev	O
=	O
makedev	function
(	O
rdev	O
,	O
strtoul	O
(	O
start	pointer
,	O
&	O
end	pointer
,	O
0	int
)	O
)	O
;	O
}	O
if	O
(	O
end	pointer
==	O
start	pointer
||	O
*	O
end	pointer
!=	O
'\0'	O
)	O
{	O
argp_error	function
(	O
state	pointer
,	O
"%s: Invalid argument to --rdev"	pointer
,	O
arg	pointer
)	O
;	O
return	O
EINVAL	int
;	O
}	O
params	pointer
->	O
dev	pointer
->	O
rdev	O
=	O
rdev	O
;	O
}	O
break	O
;	O
case	O
ARGP_KEY_INIT	int
:	O
memset	function
(	O
&	O
params	pointer
->	O
store_params	struct
,	O
0	int
,	O
sizeof	O
params	pointer
->	O
store_params	struct
)	O
;	O
params	pointer
->	O
store_params	struct
.	O
default_type	O
=	O
"device"	pointer
;	O
params	pointer
->	O
store_params	struct
.	O
store_optional	O
=	O
1	int
;	O
state	pointer
->	O
child_inputs	pointer
[	O
0	int
]	O
=	O
&	O
params	pointer
->	O
store_params	struct
;	O
break	O
;	O
case	O
ARGP_KEY_SUCCESS	int
:	O
params	pointer
->	O
dev	pointer
->	O
store_name	O
=	O
params	pointer
->	O
store_params	struct
.	O
result	O
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
const	O
struct	O
argp_child	struct
argp_kids	array
[	O
]	O
=	O
{	O
{	O
&	O
store_argp	O
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
const	O
struct	O
argp	struct
argp	struct
=	O
{	O
options	pointer
,	O
parse_opt	function
,	O
0	int
,	O
doc	pointer
,	O
argp_kids	array
}	O
;	O
struct	O
trivfs_control	pointer
*	O
storeio_fsys	pointer
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
error_t	int
err	int
;	O
mach_port_t	O
bootstrap	O
;	O
struct	O
dev	pointer
device	struct
;	O
struct	O
storeio_argp_params	struct
params	pointer
;	O
memset	function
(	O
&	O
device	struct
,	O
0	int
,	O
sizeof	O
device	struct
)	O
;	O
pthread_mutex_init	function
(	O
&	O
device	struct
.	O
lock	O
,	O
NULL	O
)	O
;	O
params	pointer
.	O
dev	pointer
=	O
&	O
device	struct
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
0	int
,	O
&	O
params	pointer
)	O
;	O
task_get_bootstrap_port	function
(	O
mach_task_self	function
(	O
)	O
,	O
&	O
bootstrap	O
)	O
;	O
if	O
(	O
bootstrap	O
==	O
MACH_PORT_NULL	O
)	O
error	function
(	O
2	int
,	O
0	int
,	O
"Must be started as a translator"	pointer
)	O
;	O
err	int
=	O
trivfs_startup	function
(	O
bootstrap	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
&	O
storeio_fsys	pointer
)	O
;	O
if	O
(	O
err	int
)	O
error	function
(	O
3	int
,	O
err	int
,	O
"trivfs_startup"	pointer
)	O
;	O
storeio_fsys	pointer
->	O
hook	pointer
=	O
&	O
device	struct
;	O
ports_manage_port_operations_multithread	function
(	O
storeio_fsys	pointer
->	O
pi	O
.	O
bucket	O
,	O
trivfs_demuxer	O
,	O
30	int
*	O
1000	int
,	O
5	int
*	O
60	int
*	O
1000	int
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
error_t	int
trivfs_append_args	function
(	O
struct	O
trivfs_control	pointer
*	O
trivfs_control	pointer
,	O
char	O
*	O
*	O
argz	pointer
,	O
size_t	long
*	O
argz_len	pointer
)	O
{	O
struct	O
dev	pointer
*	O
const	O
dev	pointer
=	O
trivfs_control	pointer
->	O
hook	pointer
;	O
error_t	int
err	int
=	O
0	int
;	O
if	O
(	O
dev	pointer
->	O
rdev	O
!=	O
(	O
dev_t	O
)	O
0	int
)	O
{	O
char	O
buf	array
[	O
40	int
]	O
;	O
snprintf	function
(	O
buf	array
,	O
sizeof	O
buf	array
,	O
"--rdev=%d,%d"	pointer
,	O
major	function
(	O
dev	pointer
->	O
rdev	O
)	O
,	O
minor	function
(	O
dev	pointer
->	O
rdev	O
)	O
)	O
;	O
err	int
=	O
argz_add	function
(	O
argz	pointer
,	O
argz_len	pointer
,	O
buf	array
)	O
;	O
}	O
if	O
(	O
!	O
err	int
&&	O
dev	pointer
->	O
inhibit_cache	O
)	O
err	int
=	O
argz_add	function
(	O
argz	pointer
,	O
argz_len	pointer
,	O
"--no-cache"	pointer
)	O
;	O
if	O
(	O
!	O
err	int
&&	O
dev	pointer
->	O
enforced	O
)	O
err	int
=	O
argz_add	function
(	O
argz	pointer
,	O
argz_len	pointer
,	O
"--enforced"	pointer
)	O
;	O
if	O
(	O
!	O
err	int
&&	O
dev	pointer
->	O
no_fileio	O
)	O
err	int
=	O
argz_add	function
(	O
argz	pointer
,	O
argz_len	pointer
,	O
"--no-file-io"	pointer
)	O
;	O
if	O
(	O
!	O
err	int
)	O
err	int
=	O
argz_add	function
(	O
argz	pointer
,	O
argz_len	pointer
,	O
dev	pointer
->	O
readonly	O
?	O
"--readonly"	pointer
:	O
"--writable"	pointer
)	O
;	O
if	O
(	O
!	O
err	int
)	O
err	int
=	O
store_parsed_append_args	function
(	O
dev	pointer
->	O
store_name	O
,	O
argz	pointer
,	O
argz_len	pointer
)	O
;	O
return	O
err	int
;	O
}	O
static	O
error_t	int
getroot_hook	function
(	O
struct	O
trivfs_control	pointer
*	O
cntl	pointer
,	O
mach_port_t	O
reply_port	int
,	O
mach_msg_type_name_t	O
reply_port_type	int
,	O
mach_port_t	O
dotdot	int
,	O
uid_t	O
*	O
uids	pointer
,	O
u_int	O
nuids	int
,	O
uid_t	O
*	O
gids	pointer
,	O
u_int	O
ngids	int
,	O
int	O
flags	int
,	O
retry_type	O
*	O
do_retry	pointer
,	O
char	O
*	O
retry_name	pointer
,	O
mach_port_t	O
*	O
node	pointer
,	O
mach_msg_type_name_t	O
*	O
node_type	pointer
)	O
{	O
struct	O
dev	pointer
*	O
const	O
dev	pointer
=	O
cntl	pointer
->	O
hook	pointer
;	O
return	O
(	O
dev_is_readonly	function
(	O
dev	pointer
)	O
&&	O
(	O
flags	int
&	O
O_WRITE	O
)	O
)	O
?	O
EROFS	int
:	O
EAGAIN	int
;	O
}	O
static	O
error_t	int
check_open_hook	function
(	O
struct	O
trivfs_control	pointer
*	O
trivfs_control	pointer
,	O
struct	O
iouser	O
*	O
user	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
dev	pointer
*	O
const	O
dev	pointer
=	O
trivfs_control	pointer
->	O
hook	pointer
;	O
error_t	int
err	int
=	O
0	int
;	O
if	O
(	O
!	O
err	int
&&	O
dev_is_readonly	function
(	O
dev	pointer
)	O
&&	O
(	O
flags	int
&	O
O_WRITE	O
)	O
)	O
return	O
EROFS	int
;	O
pthread_mutex_lock	function
(	O
&	O
dev	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
dev	pointer
->	O
store	pointer
==	O
NULL	O
)	O
{	O
err	int
=	O
dev_open	function
(	O
dev	pointer
)	O
;	O
if	O
(	O
err	int
&&	O
(	O
flags	int
&	O
(	O
O_READ	O
|	O
O_WRITE	O
)	O
)	O
==	O
0	int
)	O
err	int
=	O
0	int
;	O
}	O
pthread_mutex_unlock	function
(	O
&	O
dev	pointer
->	O
lock	O
)	O
;	O
return	O
err	int
;	O
}	O
static	O
error_t	int
open_hook	function
(	O
struct	O
trivfs_peropen	O
*	O
peropen	pointer
)	O
{	O
error_t	int
err	int
=	O
0	int
;	O
struct	O
dev	pointer
*	O
const	O
dev	pointer
=	O
peropen	pointer
->	O
cntl	pointer
->	O
hook	pointer
;	O
if	O
(	O
dev	pointer
->	O
store	pointer
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
dev	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
dev	pointer
->	O
nperopens	O
++	O
==	O
0	int
)	O
err	int
=	O
store_clear_flags	function
(	O
dev	pointer
->	O
store	pointer
,	O
STORE_INACTIVE	O
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
dev	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
!	O
err	int
)	O
err	int
=	O
open_create	function
(	O
dev	pointer
,	O
(	O
struct	O
open	function
*	O
*	O
)	O
&	O
peropen	pointer
->	O
hook	pointer
)	O
;	O
}	O
return	O
err	int
;	O
}	O
static	O
void	O
close_hook	function
(	O
struct	O
trivfs_peropen	O
*	O
peropen	pointer
)	O
{	O
struct	O
dev	pointer
*	O
const	O
dev	pointer
=	O
peropen	pointer
->	O
cntl	pointer
->	O
hook	pointer
;	O
if	O
(	O
peropen	pointer
->	O
hook	pointer
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
dev	pointer
->	O
lock	O
)	O
;	O
if	O
(	O
--	O
dev	pointer
->	O
nperopens	O
==	O
0	int
)	O
store_set_flags	function
(	O
dev	pointer
->	O
store	pointer
,	O
STORE_INACTIVE	O
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
dev	pointer
->	O
lock	O
)	O
;	O
open_free	function
(	O
peropen	pointer
->	O
hook	pointer
)	O
;	O
}	O
}	O
int	O
trivfs_fstype	int
=	O
FSTYPE_DEV	O
;	O
int	O
trivfs_fsid	int
=	O
0	int
;	O
int	O
trivfs_support_read	int
=	O
1	int
;	O
int	O
trivfs_support_write	int
=	O
1	int
;	O
int	O
trivfs_support_exec	int
=	O
0	int
;	O
int	O
trivfs_allow_open	int
=	O
O_READ	O
|	O
O_WRITE	O
;	O
void	O
trivfs_modify_stat	function
(	O
struct	O
trivfs_protid	O
*	O
cred	pointer
,	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
struct	O
dev	pointer
*	O
const	O
dev	pointer
=	O
cred	pointer
->	O
po	O
->	O
cntl	pointer
->	O
hook	pointer
;	O
struct	O
open	function
*	O
open	function
=	O
cred	pointer
->	O
po	O
->	O
hook	pointer
;	O
st	pointer
->	O
st_mode	int
&=	O
~	O
S_IFMT	O
;	O
if	O
(	O
open	function
)	O
{	O
struct	O
store	pointer
*	O
store	pointer
=	O
open	function
->	O
dev	pointer
->	O
store	pointer
;	O
store_offset_t	O
size	O
=	O
store	pointer
->	O
size	O
;	O
if	O
(	O
store	pointer
->	O
block_size	O
>	O
1	int
)	O
st	pointer
->	O
st_blksize	long
=	O
store	pointer
->	O
block_size	O
;	O
st	pointer
->	O
st_size	long
=	O
size	O
;	O
st	pointer
->	O
st_mode	int
|=	O
(	O
(	O
dev	pointer
->	O
inhibit_cache	O
||	O
store	pointer
->	O
block_size	O
==	O
1	int
)	O
?	O
S_IFCHR	O
:	O
S_IFBLK	O
)	O
;	O
}	O
else	O
{	O
st	pointer
->	O
st_blksize	long
=	O
0	int
;	O
st	pointer
->	O
st_size	long
=	O
0	int
;	O
st	pointer
->	O
st_mode	int
|=	O
dev	pointer
->	O
inhibit_cache	O
?	O
S_IFCHR	O
:	O
S_IFBLK	O
;	O
}	O
st	pointer
->	O
st_rdev	long
=	O
dev	pointer
->	O
rdev	O
;	O
if	O
(	O
dev_is_readonly	function
(	O
dev	pointer
)	O
)	O
st	pointer
->	O
st_mode	int
&=	O
~	O
(	O
S_IWUSR	O
|	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
;	O
}	O
error_t	int
trivfs_goaway	function
(	O
struct	O
trivfs_control	pointer
*	O
fsys	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
dev	pointer
*	O
const	O
device	struct
=	O
fsys	pointer
->	O
hook	pointer
;	O
error_t	int
err	int
;	O
int	O
force	int
=	O
(	O
flags	int
&	O
FSYS_GOAWAY_FORCE	O
)	O
;	O
int	O
nosync	int
=	O
(	O
flags	int
&	O
FSYS_GOAWAY_NOSYNC	O
)	O
;	O
struct	O
port_class	O
*	O
root_port_class	pointer
=	O
fsys	pointer
->	O
protid_class	O
;	O
pthread_mutex_lock	function
(	O
&	O
device	struct
->	O
lock	O
)	O
;	O
if	O
(	O
device	struct
->	O
store	pointer
==	O
NULL	O
)	O
exit	O
(	O
0	int
)	O
;	O
err	int
=	O
ports_inhibit_class_rpcs	function
(	O
root_port_class	pointer
)	O
;	O
if	O
(	O
err	int
==	O
EINTR	int
||	O
(	O
err	int
&&	O
!	O
force	int
)	O
)	O
{	O
pthread_mutex_unlock	function
(	O
&	O
device	struct
->	O
lock	O
)	O
;	O
return	O
err	int
;	O
}	O
if	O
(	O
force	int
&&	O
nosync	int
)	O
exit	O
(	O
0	int
)	O
;	O
if	O
(	O
!	O
force	int
&&	O
ports_count_class	function
(	O
root_port_class	pointer
)	O
>	O
0	int
)	O
goto	O
busy	O
;	O
if	O
(	O
!	O
nosync	int
)	O
dev_sync	function
(	O
device	struct
,	O
1	int
)	O
;	O
if	O
(	O
dev_stop_paging	function
(	O
device	struct
,	O
nosync	int
)	O
||	O
force	int
)	O
{	O
if	O
(	O
!	O
nosync	int
)	O
dev_close	function
(	O
device	struct
)	O
;	O
exit	O
(	O
0	int
)	O
;	O
}	O
busy	O
:	O
ports_enable_class	function
(	O
root_port_class	pointer
)	O
;	O
ports_resume_class_rpcs	function
(	O
root_port_class	pointer
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
device	struct
->	O
lock	O
)	O
;	O
return	O
EBUSY	int
;	O
}	O
error_t	int
(	O
*	O
trivfs_getroot_hook	pointer
)	O
(	O
struct	O
trivfs_control	pointer
*	O
cntl	pointer
,	O
mach_port_t	O
reply_port	int
,	O
mach_msg_type_name_t	O
reply_port_type	int
,	O
mach_port_t	O
dotdot	int
,	O
uid_t	O
*	O
uids	pointer
,	O
u_int	O
nuids	int
,	O
uid_t	O
*	O
gids	pointer
,	O
u_int	O
ngids	int
,	O
int	O
flags	int
,	O
retry_type	O
*	O
do_retry	pointer
,	O
char	O
*	O
retry_name	pointer
,	O
mach_port_t	O
*	O
node	pointer
,	O
mach_msg_type_name_t	O
*	O
node_type	pointer
)	O
=	O
getroot_hook	function
;	O
error_t	int
(	O
*	O
trivfs_check_open_hook	pointer
)	O
(	O
struct	O
trivfs_control	pointer
*	O
trivfs_control	pointer
,	O
struct	O
iouser	O
*	O
user	pointer
,	O
int	O
flags	int
)	O
=	O
check_open_hook	function
;	O
error_t	int
(	O
*	O
trivfs_peropen_create_hook	pointer
)	O
(	O
struct	O
trivfs_peropen	O
*	O
)	O
=	O
open_hook	function
;	O
void	O
(	O
*	O
trivfs_peropen_destroy_hook	pointer
)	O
(	O
struct	O
trivfs_peropen	O
*	O
)	O
=	O
close_hook	function
;	O
kern_return_t	O
trivfs_S_fsys_syncfs	function
(	O
struct	O
trivfs_control	pointer
*	O
cntl	pointer
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
replytype	int
,	O
int	O
wait	int
,	O
int	O
dochildren	int
)	O
{	O
struct	O
dev	pointer
*	O
dev	pointer
=	O
cntl	pointer
->	O
hook	pointer
;	O
if	O
(	O
dev	pointer
)	O
return	O
dev_sync	function
(	O
dev	pointer
,	O
wait	int
)	O
;	O
else	O
return	O
0	int
;	O
}	O
