int	O
auto_footnotes_p	int
=	O
0	int
;	O
static	O
char	O
*	O
footnote_nodename	pointer
=	O
"*Footnotes*"	pointer
;	O
static	O
WINDOW	struct
*	O
find_footnotes_window	function
(	O
void	O
)	O
{	O
WINDOW	struct
*	O
win	pointer
;	O
for	O
(	O
win	pointer
=	O
windows	pointer
;	O
win	pointer
;	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
if	O
(	O
internal_info_node_p	function
(	O
win	pointer
->	O
node	pointer
)	O
&&	O
(	O
strcmp	function
(	O
win	pointer
->	O
node	pointer
->	O
nodename	pointer
,	O
footnote_nodename	pointer
)	O
==	O
0	int
)	O
)	O
break	O
;	O
return	O
win	pointer
;	O
}	O
NODE	struct
*	O
make_footnotes_node	function
(	O
NODE	struct
*	O
node	pointer
)	O
{	O
NODE	struct
*	O
fn_node	pointer
,	O
*	O
footnotes_node	pointer
=	O
NULL	O
,	O
*	O
result	pointer
=	O
NULL	O
;	O
long	O
fn_start	long
=	O
-	O
1	int
;	O
char	O
*	O
fnptr	pointer
;	O
fn_node	pointer
=	O
node	pointer
;	O
{	O
char	O
saved	char
=	O
node	pointer
->	O
contents	pointer
[	O
node	pointer
->	O
nodelen	long
]	O
;	O
node	pointer
->	O
contents	pointer
[	O
node	pointer
->	O
nodelen	long
]	O
=	O
'\0'	O
;	O
fnptr	pointer
=	O
strstr	function
(	O
node	pointer
->	O
contents	pointer
,	O
FOOTNOTE_LABEL	O
)	O
;	O
node	pointer
->	O
contents	pointer
[	O
node	pointer
->	O
nodelen	long
]	O
=	O
saved	char
;	O
}	O
if	O
(	O
fnptr	pointer
)	O
fn_start	long
=	O
fnptr	pointer
-	O
node	pointer
->	O
contents	pointer
;	O
if	O
(	O
!	O
fnptr	pointer
)	O
{	O
REFERENCE	struct
*	O
*	O
refs	pointer
;	O
refs	pointer
=	O
node	pointer
->	O
references	pointer
;	O
if	O
(	O
refs	pointer
)	O
{	O
register	O
int	O
i	int
;	O
char	O
*	O
refname	pointer
;	O
int	O
reflen	int
=	O
strlen	function
(	O
"-Footnotes"	pointer
)	O
+	O
strlen	function
(	O
node	pointer
->	O
nodename	pointer
)	O
;	O
refname	pointer
=	O
xmalloc	function
(	O
reflen	int
+	O
1	int
)	O
;	O
strcpy	function
(	O
refname	pointer
,	O
node	pointer
->	O
nodename	pointer
)	O
;	O
strcat	function
(	O
refname	pointer
,	O
"-Footnotes"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
refs	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
refs	pointer
[	O
i	int
]	O
->	O
type	enum
==	O
REFERENCE_XREF	int
&&	O
(	O
refs	pointer
[	O
i	int
]	O
->	O
nodename	pointer
!=	O
NULL	O
)	O
&&	O
(	O
strcmp	function
(	O
refs	pointer
[	O
i	int
]	O
->	O
nodename	pointer
,	O
refname	pointer
)	O
==	O
0	int
||	O
(	O
strncmp	function
(	O
refs	pointer
[	O
i	int
]	O
->	O
nodename	pointer
,	O
refname	pointer
,	O
reflen	int
-	O
1	int
)	O
==	O
0	int
&&	O
refs	pointer
[	O
i	int
]	O
->	O
nodename	pointer
[	O
reflen	int
-	O
1	int
]	O
==	O
'-'	O
&&	O
isdigit	function
(	O
refs	pointer
[	O
i	int
]	O
->	O
nodename	pointer
[	O
reflen	int
]	O
)	O
)	O
)	O
)	O
{	O
footnotes_node	pointer
=	O
info_get_node	function
(	O
node	pointer
->	O
fullpath	pointer
,	O
refname	pointer
)	O
;	O
if	O
(	O
footnotes_node	pointer
)	O
{	O
fn_node	pointer
=	O
footnotes_node	pointer
;	O
fn_start	long
=	O
0	int
;	O
}	O
break	O
;	O
}	O
free	function
(	O
refname	pointer
)	O
;	O
}	O
}	O
if	O
(	O
fn_start	long
==	O
-	O
1	int
)	O
return	O
NULL	O
;	O
result	pointer
=	O
info_create_node	function
(	O
)	O
;	O
{	O
char	O
*	O
header	pointer
;	O
long	O
text_start	long
=	O
fn_start	long
;	O
asprintf	function
(	O
&	O
header	pointer
,	O
"*** Footnotes appearing in the node '%s' ***\n"	pointer
,	O
node	pointer
->	O
nodename	pointer
)	O
;	O
while	O
(	O
text_start	long
<	O
fn_node	pointer
->	O
nodelen	long
)	O
if	O
(	O
fn_node	pointer
->	O
contents	pointer
[	O
text_start	long
++	O
]	O
==	O
'\n'	O
)	O
break	O
;	O
result	pointer
->	O
nodelen	long
=	O
strlen	function
(	O
header	pointer
)	O
+	O
fn_node	pointer
->	O
nodelen	long
-	O
text_start	long
;	O
result	pointer
->	O
contents	pointer
=	O
xmalloc	function
(	O
1	int
+	O
result	pointer
->	O
nodelen	long
)	O
;	O
sprintf	function
(	O
result	pointer
->	O
contents	pointer
,	O
"%s"	pointer
,	O
header	pointer
)	O
;	O
memcpy	function
(	O
result	pointer
->	O
contents	pointer
+	O
strlen	function
(	O
header	pointer
)	O
,	O
fn_node	pointer
->	O
contents	pointer
+	O
text_start	long
,	O
fn_node	pointer
->	O
nodelen	long
-	O
text_start	long
)	O
;	O
result	pointer
->	O
contents	pointer
[	O
strlen	function
(	O
header	pointer
)	O
+	O
fn_node	pointer
->	O
nodelen	long
-	O
text_start	long
]	O
=	O
'\0'	O
;	O
{	O
REFERENCE	struct
*	O
*	O
ref	pointer
=	O
fn_node	pointer
->	O
references	pointer
;	O
for	O
(	O
;	O
*	O
ref	pointer
;	O
ref	pointer
++	O
)	O
{	O
if	O
(	O
(	O
*	O
ref	pointer
)	O
->	O
start	int
>	O
text_start	long
)	O
break	O
;	O
}	O
result	pointer
->	O
references	pointer
=	O
info_copy_references	function
(	O
ref	pointer
)	O
;	O
for	O
(	O
ref	pointer
=	O
result	pointer
->	O
references	pointer
;	O
*	O
ref	pointer
;	O
ref	pointer
++	O
)	O
{	O
(	O
*	O
ref	pointer
)	O
->	O
start	int
-=	O
text_start	long
-	O
strlen	function
(	O
header	pointer
)	O
;	O
(	O
*	O
ref	pointer
)	O
->	O
end	int
-=	O
text_start	long
-	O
strlen	function
(	O
header	pointer
)	O
;	O
}	O
}	O
result	pointer
->	O
nodename	pointer
=	O
xstrdup	function
(	O
footnote_nodename	pointer
)	O
;	O
result	pointer
->	O
flags	int
|=	O
N_IsInternal	int
|	O
N_WasRewritten	int
;	O
result	pointer
->	O
fullpath	pointer
=	O
fn_node	pointer
->	O
fullpath	pointer
;	O
result	pointer
->	O
subfile	pointer
=	O
fn_node	pointer
->	O
subfile	pointer
;	O
free	function
(	O
header	pointer
)	O
;	O
}	O
free_history_node	function
(	O
footnotes_node	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
int	O
info_get_or_remove_footnotes	function
(	O
WINDOW	struct
*	O
window	pointer
)	O
{	O
WINDOW	struct
*	O
fn_win	pointer
;	O
NODE	struct
*	O
new_footnotes	pointer
=	O
0	int
;	O
fn_win	pointer
=	O
find_footnotes_window	function
(	O
)	O
;	O
if	O
(	O
fn_win	pointer
==	O
window	pointer
)	O
return	O
FN_FOUND	int
;	O
if	O
(	O
window	pointer
->	O
node	pointer
->	O
nodename	pointer
&&	O
strcmp	function
(	O
"*"	pointer
,	O
window	pointer
->	O
node	pointer
->	O
nodename	pointer
)	O
)	O
new_footnotes	pointer
=	O
make_footnotes_node	function
(	O
window	pointer
->	O
node	pointer
)	O
;	O
if	O
(	O
!	O
new_footnotes	pointer
)	O
{	O
if	O
(	O
fn_win	pointer
&&	O
windows	pointer
->	O
next	pointer
)	O
info_delete_window_internal	function
(	O
fn_win	pointer
)	O
;	O
return	O
FN_UNFOUND	int
;	O
}	O
if	O
(	O
!	O
fn_win	pointer
)	O
{	O
WINDOW	struct
*	O
old_active	pointer
;	O
WINDOW	struct
*	O
last	pointer
,	O
*	O
win	pointer
;	O
for	O
(	O
win	pointer
=	O
windows	pointer
,	O
last	pointer
=	O
windows	pointer
;	O
win	pointer
;	O
last	pointer
=	O
win	pointer
,	O
win	pointer
=	O
win	pointer
->	O
next	pointer
)	O
;	O
old_active	pointer
=	O
active_window	pointer
;	O
active_window	pointer
=	O
last	pointer
;	O
fn_win	pointer
=	O
window_make_window	function
(	O
)	O
;	O
active_window	pointer
=	O
old_active	pointer
;	O
if	O
(	O
!	O
fn_win	pointer
)	O
{	O
if	O
(	O
auto_footnotes_p	int
)	O
info_error	function
(	O
_	O
(	O
"Footnotes could not be displayed"	pointer
)	O
)	O
;	O
return	O
FN_UNABLE	int
;	O
}	O
}	O
info_set_node_of_window	function
(	O
fn_win	pointer
,	O
new_footnotes	pointer
)	O
;	O
fn_win	pointer
->	O
flags	int
|=	O
W_TempWindow	int
;	O
if	O
(	O
new_footnotes	pointer
)	O
window_change_window_height	function
(	O
fn_win	pointer
,	O
fn_win	pointer
->	O
line_count	long
-	O
fn_win	pointer
->	O
height	long
)	O
;	O
return	O
FN_FOUND	int
;	O
}	O
DECLARE_INFO_COMMAND	O
(	O
info_show_footnotes	function
,	O
_	O
(	O
"Show the footnotes associated with this node in another window"	pointer
)	O
)	O
{	O
if	O
(	O
count	pointer
<	O
0	int
)	O
{	O
WINDOW	struct
*	O
fn_win	pointer
=	O
find_footnotes_window	function
(	O
)	O
;	O
if	O
(	O
fn_win	pointer
&&	O
windows	pointer
->	O
next	pointer
)	O
info_delete_window_internal	function
(	O
fn_win	pointer
)	O
;	O
}	O
else	O
{	O
int	O
result	pointer
;	O
result	pointer
=	O
info_get_or_remove_footnotes	function
(	O
window	pointer
)	O
;	O
switch	O
(	O
result	pointer
)	O
{	O
case	O
FN_UNFOUND	int
:	O
info_error	function
(	O
"%s"	pointer
,	O
msg_no_foot_node	pointer
)	O
;	O
break	O
;	O
case	O
FN_UNABLE	int
:	O
info_error	function
(	O
"%s"	pointer
,	O
msg_win_too_small	pointer
)	O
;	O
break	O
;	O
}	O
}	O
}	O
