enum	O
from_decode_state	enum
{	O
from_decode_init	int
,	O
from_decode_nl	int
,	O
from_decode_char	int
}	O
;	O
static	O
enum	O
mu_filter_result	enum
_from_decoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
int	O
*	O
pstate	pointer
=	O
xd	pointer
;	O
const	O
unsigned	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
enum	O
from_decode_state	enum
state	pointer
;	O
size_t	long
i	long
,	O
j	long
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
*	O
pstate	pointer
=	O
from_decode_init	int
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
state	pointer
=	O
*	O
pstate	pointer
;	O
break	O
;	O
}	O
iptr	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
isize	long
&&	O
j	long
<	O
osize	long
;	O
i	long
++	O
)	O
{	O
unsigned	O
char	O
c	char
=	O
*	O
iptr	pointer
++	O
;	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
state	pointer
=	O
from_decode_nl	int
;	O
else	O
if	O
(	O
state	pointer
==	O
from_decode_init	int
||	O
state	pointer
==	O
from_decode_nl	int
)	O
{	O
size_t	long
len	long
=	O
isize	long
-	O
i	long
;	O
if	O
(	O
len	long
<	O
GT_FROM_MARK_LEN	O
)	O
{	O
if	O
(	O
memcmp	function
(	O
iptr	pointer
-	O
1	int
,	O
GT_FROM_MARK_STR	pointer
,	O
len	long
)	O
==	O
0	int
)	O
{	O
if	O
(	O
i	long
==	O
0	int
)	O
{	O
iobuf	pointer
->	O
isize	long
=	O
GT_FROM_MARK_LEN	O
-	O
len	long
;	O
return	O
mu_filter_moreinput	int
;	O
}	O
break	O
;	O
}	O
else	O
state	pointer
=	O
from_decode_char	int
;	O
}	O
else	O
if	O
(	O
memcmp	function
(	O
iptr	pointer
-	O
1	int
,	O
GT_FROM_MARK_STR	pointer
,	O
GT_FROM_MARK_LEN	O
)	O
==	O
0	int
)	O
{	O
state	pointer
=	O
from_decode_char	int
;	O
continue	O
;	O
}	O
}	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
c	char
;	O
}	O
*	O
pstate	pointer
=	O
state	pointer
;	O
iobuf	pointer
->	O
isize	long
=	O
i	long
;	O
iobuf	pointer
->	O
osize	long
=	O
j	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
enum	O
from_encode_state	enum
{	O
from_encode_init	int
,	O
from_encode_nl	int
,	O
from_encode_char	int
,	O
from_encode_gt	int
,	O
from_encode_f	int
,	O
from_encode_r	int
,	O
from_encode_o	int
,	O
from_encode_m	int
,	O
from_encode_sp	int
}	O
;	O
static	O
int	O
length_to_state_tab	array
[	O
]	O
=	O
{	O
from_encode_gt	int
,	O
from_encode_f	int
,	O
from_encode_r	int
,	O
from_encode_o	int
,	O
from_encode_m	int
,	O
from_encode_sp	int
}	O
;	O
static	O
int	O
state_to_length_tab	array
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
GT_FROM_MARK_LEN	O
,	O
GT_FROM_MARK_LEN	O
-	O
1	int
,	O
GT_FROM_MARK_LEN	O
-	O
2	int
,	O
GT_FROM_MARK_LEN	O
-	O
3	int
,	O
GT_FROM_MARK_LEN	O
-	O
4	int
,	O
GT_FROM_MARK_LEN	O
-	O
5	int
}	O
;	O
static	O
enum	O
mu_filter_result	enum
_from_encoder	function
(	O
void	O
*	O
xd	pointer
,	O
enum	O
mu_filter_command	enum
cmd	enum
,	O
struct	O
mu_filter_io	struct
*	O
iobuf	pointer
)	O
{	O
int	O
*	O
pstate	pointer
=	O
xd	pointer
;	O
const	O
unsigned	O
char	O
*	O
iptr	pointer
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	pointer
;	O
size_t	long
osize	long
;	O
enum	O
from_encode_state	enum
state	pointer
;	O
size_t	long
i	long
,	O
j	long
;	O
switch	O
(	O
cmd	enum
)	O
{	O
case	O
mu_filter_init	int
:	O
*	O
pstate	pointer
=	O
from_encode_init	int
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
state	pointer
=	O
*	O
pstate	pointer
;	O
switch	O
(	O
state	pointer
)	O
{	O
case	O
from_encode_init	int
:	O
case	O
from_encode_nl	int
:	O
case	O
from_encode_char	int
:	O
break	O
;	O
default	O
:	O
osize	long
=	O
state_to_length_tab	array
[	O
state	pointer
]	O
;	O
if	O
(	O
iobuf	pointer
->	O
osize	long
<	O
osize	long
)	O
{	O
iobuf	pointer
->	O
osize	long
=	O
osize	long
;	O
return	O
mu_filter_moreoutput	int
;	O
}	O
memcpy	function
(	O
iobuf	pointer
->	O
output	pointer
,	O
GT_FROM_MARK_STR	pointer
+	O
GT_FROM_MARK_LEN	O
-	O
osize	long
,	O
osize	long
)	O
;	O
iobuf	pointer
->	O
osize	long
=	O
osize	long
;	O
iobuf	pointer
->	O
isize	long
=	O
osize	long
;	O
*	O
pstate	pointer
=	O
from_encode_init	int
;	O
return	O
mu_filter_ok	int
;	O
}	O
break	O
;	O
}	O
iptr	pointer
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	pointer
->	O
input	pointer
;	O
isize	long
=	O
iobuf	pointer
->	O
isize	long
;	O
optr	pointer
=	O
iobuf	pointer
->	O
output	pointer
;	O
osize	long
=	O
iobuf	pointer
->	O
osize	long
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
isize	long
&&	O
j	long
<	O
osize	long
;	O
i	long
++	O
)	O
{	O
unsigned	O
char	O
c	char
=	O
*	O
iptr	pointer
++	O
;	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
state	pointer
=	O
from_encode_nl	int
;	O
else	O
if	O
(	O
state	pointer
==	O
from_encode_init	int
||	O
state	pointer
==	O
from_encode_nl	int
)	O
{	O
size_t	long
len	long
=	O
isize	long
-	O
i	long
;	O
if	O
(	O
len	long
<	O
FROM_MARK_LEN	O
)	O
{	O
if	O
(	O
memcmp	function
(	O
iptr	pointer
-	O
1	int
,	O
FROM_MARK_STR	pointer
,	O
len	long
)	O
==	O
0	int
)	O
{	O
if	O
(	O
i	long
==	O
0	int
)	O
{	O
iobuf	pointer
->	O
isize	long
=	O
FROM_MARK_LEN	O
;	O
return	O
mu_filter_moreinput	int
;	O
}	O
break	O
;	O
}	O
else	O
state	pointer
=	O
from_encode_char	int
;	O
}	O
else	O
if	O
(	O
memcmp	function
(	O
iptr	pointer
-	O
1	int
,	O
FROM_MARK_STR	pointer
,	O
FROM_MARK_LEN	O
)	O
==	O
0	int
)	O
{	O
size_t	long
rest	long
=	O
osize	long
-	O
j	long
;	O
if	O
(	O
rest	long
>	O
GT_FROM_MARK_LEN	O
)	O
rest	long
=	O
GT_FROM_MARK_LEN	O
;	O
else	O
if	O
(	O
rest	long
<	O
2	int
)	O
{	O
if	O
(	O
i	long
==	O
0	int
)	O
{	O
iobuf	pointer
->	O
osize	long
=	O
GT_FROM_MARK_LEN	O
;	O
return	O
mu_filter_moreoutput	int
;	O
}	O
break	O
;	O
}	O
memcpy	function
(	O
optr	pointer
+	O
j	long
,	O
GT_FROM_MARK_STR	pointer
,	O
rest	long
)	O
;	O
i	long
+=	O
rest	long
-	O
2	int
;	O
iptr	pointer
+=	O
rest	long
-	O
2	int
;	O
j	long
+=	O
rest	long
;	O
if	O
(	O
rest	long
<	O
GT_FROM_MARK_LEN	O
)	O
state	pointer
=	O
length_to_state_tab	array
[	O
rest	long
]	O
;	O
else	O
state	pointer
=	O
from_encode_char	int
;	O
continue	O
;	O
}	O
else	O
state	pointer
=	O
from_encode_char	int
;	O
}	O
optr	pointer
[	O
j	long
++	O
]	O
=	O
c	char
;	O
}	O
*	O
pstate	pointer
=	O
state	pointer
;	O
iobuf	pointer
->	O
isize	long
=	O
i	long
;	O
iobuf	pointer
->	O
osize	long
=	O
j	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
int	O
_from_alloc_state	function
(	O
void	O
*	O
*	O
pret	pointer
,	O
int	O
mode	int
,	O
int	O
argc	int
MU_ARG_UNUSED	O
,	O
const	O
char	O
*	O
*	O
argv	pointer
MU_ARG_UNUSED	O
)	O
{	O
*	O
pret	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
if	O
(	O
!	O
*	O
pret	pointer
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct
_from_filter	struct
=	O
{	O
"FROM"	pointer
,	O
_from_alloc_state	function
,	O
_from_encoder	function
,	O
_from_decoder	function
}	O
;	O
mu_filter_record_t	pointer
mu_from_filter	pointer
=	O
&	O
_from_filter	struct
;	O
