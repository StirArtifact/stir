void	O
next	function
(	O
dico_iterator_t	pointer
itr	pointer
,	O
char	O
*	O
arg	pointer
)	O
{	O
int	O
skip	int
=	O
arg	pointer
?	O
strtoul	function
(	O
arg	pointer
,	O
NULL	O
,	O
0	int
)	O
:	O
1	int
;	O
if	O
(	O
skip	int
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"next arg?\n"	pointer
)	O
;	O
while	O
(	O
skip	int
--	O
)	O
dico_iterator_next	function
(	O
itr	pointer
)	O
;	O
}	O
void	O
prev	function
(	O
dico_iterator_t	pointer
itr	pointer
,	O
char	O
*	O
arg	pointer
)	O
{	O
int	O
skip	int
=	O
arg	pointer
?	O
strtoul	function
(	O
arg	pointer
,	O
NULL	O
,	O
0	int
)	O
:	O
1	int
;	O
if	O
(	O
skip	int
==	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"next arg?\n"	pointer
)	O
;	O
while	O
(	O
skip	int
--	O
)	O
dico_iterator_prev	function
(	O
itr	pointer
)	O
;	O
}	O
void	O
print	function
(	O
struct	O
itr_shell	struct
*	O
shp	pointer
)	O
{	O
dico_iterator_t	pointer
itr	pointer
=	O
shp	pointer
->	O
get_iterator	pointer
(	O
shp	pointer
->	O
object	pointer
)	O
;	O
void	O
*	O
elt	pointer
;	O
if	O
(	O
shp	pointer
->	O
count	long
)	O
printf	function
(	O
"# items: %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
shp	pointer
->	O
count	long
(	O
shp	pointer
->	O
object	pointer
)	O
)	O
;	O
if	O
(	O
!	O
itr	pointer
)	O
{	O
dico_log	function
(	O
L_ERR	int
,	O
0	int
,	O
"get_iterator failed"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
for	O
(	O
elt	pointer
=	O
dico_iterator_first	function
(	O
itr	pointer
)	O
;	O
elt	pointer
;	O
elt	pointer
=	O
dico_iterator_next	function
(	O
itr	pointer
)	O
)	O
{	O
shp	pointer
->	O
print_item	pointer
(	O
elt	pointer
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
dico_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
int	O
iter	function
(	O
int	O
*	O
pnum	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
n	long
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"iter num?\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
n	long
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
n	long
<	O
0	int
||	O
n	long
>=	O
NITR	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"iter [0-%d]?\n"	pointer
,	O
NITR	int
-	O
1	int
)	O
;	O
return	O
1	int
;	O
}	O
*	O
pnum	pointer
=	O
n	long
;	O
return	O
0	int
;	O
}	O
void	O
help	function
(	O
struct	O
itr_shell	struct
*	O
shp	pointer
)	O
{	O
struct	O
itr_shell_command	struct
*	O
cmd	pointer
;	O
static	O
char	O
format	array
[	O
]	O
=	O
"%-8.8s %-10.10s - %s\n"	pointer
;	O
for	O
(	O
cmd	pointer
=	O
shp	pointer
->	O
cmdtab	pointer
;	O
cmd	pointer
->	O
name	pointer
;	O
cmd	pointer
++	O
)	O
printf	function
(	O
format	array
,	O
cmd	pointer
->	O
name	pointer
,	O
cmd	pointer
->	O
argstr	pointer
?	O
cmd	pointer
->	O
argstr	pointer
:	O
""	pointer
,	O
cmd	pointer
->	O
docstr	pointer
?	O
cmd	pointer
->	O
docstr	pointer
:	O
""	pointer
)	O
;	O
printf	function
(	O
format	array
,	O
"next"	pointer
,	O
"[count]"	pointer
,	O
"go to next item"	pointer
)	O
;	O
printf	function
(	O
format	array
,	O
"first"	pointer
,	O
""	pointer
,	O
"rewind to the first item"	pointer
)	O
;	O
printf	function
(	O
format	array
,	O
"print"	pointer
,	O
""	pointer
,	O
"print all items"	pointer
)	O
;	O
printf	function
(	O
format	array
,	O
"quit"	pointer
,	O
""	pointer
,	O
"quit the shell"	pointer
)	O
;	O
printf	function
(	O
format	array
,	O
"iter"	pointer
,	O
"num"	pointer
,	O
"switch to iterator #num"	pointer
)	O
;	O
printf	function
(	O
format	array
,	O
"help"	pointer
,	O
""	pointer
,	O
"print this help list"	pointer
)	O
;	O
}	O
int	O
num	int
=	O
0	int
;	O
dico_iterator_t	pointer
itr	pointer
[	O
NITR	int
]	O
;	O
void	O
current	function
(	O
struct	O
itr_shell	struct
*	O
shp	pointer
)	O
{	O
char	O
*	O
elt	pointer
=	O
dico_iterator_current	function
(	O
itr	pointer
[	O
num	int
]	O
)	O
;	O
printf	function
(	O
"%lu:"	pointer
,	O
(	O
unsigned	O
long	O
)	O
num	int
)	O
;	O
if	O
(	O
elt	pointer
)	O
shp	pointer
->	O
print_item	pointer
(	O
elt	pointer
)	O
;	O
else	O
printf	function
(	O
"%s"	pointer
,	O
"NUL"	pointer
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
dico_iterator_t	pointer
shell_iterator	function
(	O
void	O
)	O
{	O
return	O
itr	pointer
[	O
num	int
]	O
;	O
}	O
void	O
shell	function
(	O
struct	O
itr_shell	struct
*	O
shp	pointer
)	O
{	O
struct	O
wordsplit	struct
ws	pointer
;	O
int	O
wsflags	int
=	O
WRDSF_DEFFLAGS	O
|	O
WRDSF_SHOWERR	int
;	O
int	O
interactive	int
=	O
isatty	function
(	O
0	int
)	O
;	O
memset	function
(	O
&	O
itr	pointer
,	O
0	int
,	O
sizeof	O
itr	pointer
)	O
;	O
num	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
void	O
*	O
elt	pointer
;	O
if	O
(	O
!	O
itr	pointer
[	O
num	int
]	O
)	O
{	O
itr	pointer
[	O
num	int
]	O
=	O
shp	pointer
->	O
get_iterator	pointer
(	O
shp	pointer
->	O
object	pointer
)	O
;	O
if	O
(	O
!	O
itr	pointer
[	O
num	int
]	O
)	O
{	O
perror	function
(	O
"get_iterator"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
dico_iterator_first	function
(	O
itr	pointer
[	O
num	int
]	O
)	O
;	O
}	O
elt	pointer
=	O
dico_iterator_current	function
(	O
itr	pointer
[	O
num	int
]	O
)	O
;	O
if	O
(	O
interactive	int
)	O
{	O
printf	function
(	O
"%d:("	pointer
,	O
num	int
)	O
;	O
if	O
(	O
elt	pointer
)	O
shp	pointer
->	O
print_item	pointer
(	O
elt	pointer
)	O
;	O
else	O
printf	function
(	O
"NUL"	pointer
)	O
;	O
printf	function
(	O
")> "	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
if	O
(	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
stdin	pointer
)	O
==	O
NULL	O
)	O
break	O
;	O
ws	pointer
.	O
ws_comment	pointer
=	O
"#"	pointer
;	O
if	O
(	O
wordsplit	struct
(	O
buf	pointer
,	O
&	O
ws	pointer
,	O
wsflags	int
|	O
WRDSF_COMMENT	int
)	O
)	O
exit	function
(	O
1	int
)	O
;	O
wsflags	int
|=	O
WRDSF_REUSE	int
;	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
>	O
0	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
"next"	pointer
)	O
==	O
0	int
)	O
next	function
(	O
itr	pointer
[	O
num	int
]	O
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
1	int
]	O
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
"prev"	pointer
)	O
==	O
0	int
)	O
prev	function
(	O
itr	pointer
[	O
num	int
]	O
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
1	int
]	O
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
"first"	pointer
)	O
==	O
0	int
)	O
dico_iterator_first	function
(	O
itr	pointer
[	O
num	int
]	O
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
"print"	pointer
)	O
==	O
0	int
)	O
print	function
(	O
shp	pointer
)	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
"quit"	pointer
)	O
==	O
0	int
)	O
break	O
;	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
"iter"	pointer
)	O
==	O
0	int
)	O
{	O
int	O
n	long
;	O
if	O
(	O
iter	function
(	O
&	O
n	long
,	O
ws	pointer
.	O
ws_wordc	long
,	O
ws	pointer
.	O
ws_wordv	pointer
)	O
==	O
0	int
&&	O
!	O
itr	pointer
[	O
n	long
]	O
)	O
{	O
itr	pointer
[	O
n	long
]	O
=	O
shp	pointer
->	O
get_iterator	pointer
(	O
shp	pointer
->	O
object	pointer
)	O
;	O
if	O
(	O
!	O
itr	pointer
[	O
n	long
]	O
)	O
{	O
perror	function
(	O
"get_iterator"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
dico_iterator_first	function
(	O
itr	pointer
[	O
n	long
]	O
)	O
;	O
}	O
num	int
=	O
n	long
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
"close"	pointer
)	O
==	O
0	int
)	O
{	O
int	O
n	long
;	O
if	O
(	O
iter	function
(	O
&	O
n	long
,	O
ws	pointer
.	O
ws_wordc	long
,	O
ws	pointer
.	O
ws_wordv	pointer
)	O
==	O
0	int
)	O
{	O
dico_iterator_destroy	function
(	O
&	O
itr	pointer
[	O
n	long
]	O
)	O
;	O
if	O
(	O
n	long
==	O
num	int
&&	O
++	O
num	int
==	O
NITR	int
)	O
num	int
=	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
"."	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
"cur"	pointer
)	O
==	O
0	int
)	O
{	O
current	function
(	O
shp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
"help"	pointer
)	O
==	O
0	int
)	O
help	function
(	O
shp	pointer
)	O
;	O
else	O
{	O
struct	O
itr_shell_command	struct
*	O
cmd	pointer
;	O
for	O
(	O
cmd	pointer
=	O
shp	pointer
->	O
cmdtab	pointer
;	O
cmd	pointer
->	O
name	pointer
;	O
cmd	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
cmd	pointer
->	O
name	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
<	O
cmd	pointer
->	O
minargc	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"too few arguments\n"	pointer
)	O
;	O
else	O
if	O
(	O
cmd	pointer
->	O
maxargc	int
&&	O
ws	pointer
.	O
ws_wordc	long
>	O
cmd	pointer
->	O
maxargc	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"too many arguments\n"	pointer
)	O
;	O
else	O
cmd	pointer
->	O
fun	pointer
(	O
shp	pointer
->	O
object	pointer
,	O
ws	pointer
.	O
ws_wordc	long
,	O
ws	pointer
.	O
ws_wordv	pointer
)	O
;	O
break	O
;	O
}	O
if	O
(	O
cmd	pointer
->	O
name	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
cmd	pointer
->	O
fun	pointer
&&	O
ws	pointer
.	O
ws_wordc	long
>=	O
cmd	pointer
->	O
minargc	int
&&	O
(	O
cmd	pointer
->	O
maxargc	int
==	O
0	int
||	O
ws	pointer
.	O
ws_wordc	long
<=	O
cmd	pointer
->	O
maxargc	int
)	O
)	O
cmd	pointer
->	O
fun	pointer
(	O
shp	pointer
->	O
object	pointer
,	O
ws	pointer
.	O
ws_wordc	long
,	O
ws	pointer
.	O
ws_wordv	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"?\n"	pointer
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
wsflags	int
&	O
WRDSF_REUSE	int
)	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
