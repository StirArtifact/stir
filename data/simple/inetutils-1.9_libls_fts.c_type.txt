static	O
FTSENT	struct
*	O
fts_alloc	function
(	O
FTS	struct
*	O
,	O
const	O
char	O
*	O
,	O
int	O
)	O
;	O
static	O
FTSENT	struct
*	O
fts_build	function
(	O
FTS	struct
*	O
,	O
int	O
)	O
;	O
static	O
void	O
fts_lfree	function
(	O
FTSENT	struct
*	O
)	O
;	O
static	O
void	O
fts_load	function
(	O
FTS	struct
*	O
,	O
FTSENT	struct
*	O
)	O
;	O
static	O
size_t	long
fts_maxarglen	function
(	O
char	O
*	O
const	O
*	O
)	O
;	O
static	O
void	O
fts_padjust	function
(	O
FTS	struct
*	O
,	O
void	O
*	O
)	O
;	O
static	O
int	O
fts_palloc	function
(	O
FTS	struct
*	O
,	O
size_t	long
)	O
;	O
static	O
FTSENT	struct
*	O
fts_sort	function
(	O
FTS	struct
*	O
,	O
FTSENT	struct
*	O
,	O
int	O
)	O
;	O
static	O
unsigned	O
short	O
fts_stat	function
(	O
FTS	struct
*	O
,	O
struct	O
dirent	struct
*	O
,	O
FTSENT	struct
*	O
,	O
int	O
)	O
;	O
FTS	struct
*	O
fts_open	function
(	O
char	O
*	O
const	O
*	O
argv	pointer
,	O
register	O
int	O
options	int
,	O
int	O
(	O
*	O
compar	pointer
)	O
(	O
const	O
FTSENT	struct
*	O
*	O
,	O
const	O
FTSENT	struct
*	O
*	O
)	O
)	O
{	O
register	O
FTS	struct
*	O
sp	pointer
;	O
register	O
FTSENT	struct
*	O
p	pointer
,	O
*	O
root	pointer
;	O
register	O
int	O
nitems	int
;	O
FTSENT	struct
*	O
parent	pointer
;	O
FTSENT	struct
*	O
tmp	pointer
=	O
NULL	O
;	O
int	O
len	int
;	O
if	O
(	O
options	int
&	O
~	O
FTS_OPTIONMASK	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
(	O
sp	pointer
=	O
malloc	function
(	O
(	O
u_int	int
)	O
sizeof	O
(	O
FTS	struct
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
memset	function
(	O
sp	pointer
,	O
0	int
,	O
sizeof	O
(	O
FTS	struct
)	O
)	O
;	O
sp	pointer
->	O
fts_compar	pointer
=	O
(	O
int	O
(	O
*	O
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
)	O
compar	pointer
;	O
sp	pointer
->	O
fts_options	int
=	O
options	int
;	O
if	O
(	O
ISSET	O
(	O
FTS_LOGICAL	int
)	O
)	O
SET	O
(	O
FTS_NOCHDIR	int
)	O
;	O
if	O
(	O
fts_palloc	function
(	O
sp	pointer
,	O
MAX	O
(	O
fts_maxarglen	function
(	O
argv	pointer
)	O
,	O
MAXPATHLEN	O
)	O
)	O
)	O
goto	O
mem1	O
;	O
if	O
(	O
(	O
parent	pointer
=	O
fts_alloc	function
(	O
sp	pointer
,	O
""	pointer
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
goto	O
mem2	O
;	O
parent	pointer
->	O
fts_level	short
=	O
FTS_ROOTPARENTLEVEL	O
;	O
for	O
(	O
root	pointer
=	O
NULL	O
,	O
nitems	int
=	O
0	int
;	O
*	O
argv	pointer
;	O
++	O
argv	pointer
,	O
++	O
nitems	int
)	O
{	O
if	O
(	O
(	O
len	int
=	O
strlen	function
(	O
*	O
argv	pointer
)	O
)	O
==	O
0	int
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
goto	O
mem3	O
;	O
}	O
p	pointer
=	O
fts_alloc	function
(	O
sp	pointer
,	O
*	O
argv	pointer
,	O
len	int
)	O
;	O
p	pointer
->	O
fts_level	short
=	O
FTS_ROOTLEVEL	int
;	O
p	pointer
->	O
fts_parent	pointer
=	O
parent	pointer
;	O
p	pointer
->	O
fts_accpath	pointer
=	O
p	pointer
->	O
fts_name	array
;	O
p	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
NULL	O
,	O
p	pointer
,	O
ISSET	O
(	O
FTS_COMFOLLOW	int
)	O
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_DOT	int
)	O
p	pointer
->	O
fts_info	short
=	O
FTS_D	int
;	O
if	O
(	O
compar	pointer
)	O
{	O
p	pointer
->	O
fts_link	pointer
=	O
root	pointer
;	O
root	pointer
=	O
p	pointer
;	O
}	O
else	O
{	O
p	pointer
->	O
fts_link	pointer
=	O
NULL	O
;	O
if	O
(	O
root	pointer
==	O
NULL	O
)	O
tmp	pointer
=	O
root	pointer
=	O
p	pointer
;	O
else	O
{	O
tmp	pointer
->	O
fts_link	pointer
=	O
p	pointer
;	O
tmp	pointer
=	O
p	pointer
;	O
}	O
}	O
}	O
if	O
(	O
compar	pointer
&&	O
nitems	int
>	O
1	int
)	O
root	pointer
=	O
fts_sort	function
(	O
sp	pointer
,	O
root	pointer
,	O
nitems	int
)	O
;	O
if	O
(	O
(	O
sp	pointer
->	O
fts_cur	pointer
=	O
fts_alloc	function
(	O
sp	pointer
,	O
""	pointer
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
goto	O
mem3	O
;	O
sp	pointer
->	O
fts_cur	pointer
->	O
fts_link	pointer
=	O
root	pointer
;	O
sp	pointer
->	O
fts_cur	pointer
->	O
fts_info	short
=	O
FTS_INIT	int
;	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
&&	O
(	O
sp	pointer
->	O
fts_rfd	int
=	O
open	function
(	O
"."	pointer
,	O
O_RDONLY	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
SET	O
(	O
FTS_NOCHDIR	int
)	O
;	O
return	O
(	O
sp	pointer
)	O
;	O
mem3	O
:	O
fts_lfree	function
(	O
root	pointer
)	O
;	O
free	function
(	O
parent	pointer
)	O
;	O
mem2	O
:	O
free	function
(	O
sp	pointer
->	O
fts_path	pointer
)	O
;	O
mem1	O
:	O
free	function
(	O
sp	pointer
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
static	O
void	O
fts_load	function
(	O
FTS	struct
*	O
sp	pointer
,	O
register	O
FTSENT	struct
*	O
p	pointer
)	O
{	O
register	O
int	O
len	int
;	O
register	O
char	O
*	O
cp	pointer
;	O
len	int
=	O
p	pointer
->	O
fts_pathlen	int
=	O
p	pointer
->	O
fts_namelen	short
;	O
memmove	function
(	O
sp	pointer
->	O
fts_path	pointer
,	O
p	pointer
->	O
fts_name	array
,	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
(	O
cp	pointer
=	O
strrchr	function
(	O
p	pointer
->	O
fts_name	array
,	O
'/'	O
)	O
)	O
&&	O
(	O
cp	pointer
!=	O
p	pointer
->	O
fts_name	array
||	O
cp	pointer
[	O
1	int
]	O
)	O
)	O
{	O
len	int
=	O
strlen	function
(	O
++	O
cp	pointer
)	O
;	O
memmove	function
(	O
p	pointer
->	O
fts_name	array
,	O
cp	pointer
,	O
len	int
+	O
1	int
)	O
;	O
p	pointer
->	O
fts_namelen	short
=	O
len	int
;	O
}	O
p	pointer
->	O
fts_accpath	pointer
=	O
p	pointer
->	O
fts_path	pointer
=	O
sp	pointer
->	O
fts_path	pointer
;	O
sp	pointer
->	O
fts_dev	long
=	O
p	pointer
->	O
fts_dev	long
;	O
}	O
int	O
fts_close	function
(	O
FTS	struct
*	O
sp	pointer
)	O
{	O
register	O
FTSENT	struct
*	O
freep	pointer
,	O
*	O
p	pointer
;	O
int	O
saved_errno	int
=	O
0	int
;	O
int	O
retval	int
=	O
0	int
;	O
if	O
(	O
sp	pointer
->	O
fts_cur	pointer
)	O
{	O
for	O
(	O
p	pointer
=	O
sp	pointer
->	O
fts_cur	pointer
;	O
p	pointer
->	O
fts_level	short
>=	O
FTS_ROOTLEVEL	int
;	O
)	O
{	O
freep	pointer
=	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
?	O
p	pointer
->	O
fts_link	pointer
:	O
p	pointer
->	O
fts_parent	pointer
;	O
free	function
(	O
freep	pointer
)	O
;	O
}	O
free	function
(	O
p	pointer
)	O
;	O
}	O
if	O
(	O
sp	pointer
->	O
fts_child	pointer
)	O
fts_lfree	function
(	O
sp	pointer
->	O
fts_child	pointer
)	O
;	O
free	function
(	O
sp	pointer
->	O
fts_array	pointer
)	O
;	O
free	function
(	O
sp	pointer
->	O
fts_path	pointer
)	O
;	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
saved_errno	int
=	O
fchdir	function
(	O
sp	pointer
->	O
fts_rfd	int
)	O
?	O
errno	O
:	O
0	int
;	O
close	function
(	O
sp	pointer
->	O
fts_rfd	int
)	O
;	O
}	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
&&	O
saved_errno	int
)	O
{	O
errno	O
=	O
saved_errno	int
;	O
retval	int
=	O
-	O
1	int
;	O
}	O
free	function
(	O
sp	pointer
)	O
;	O
return	O
retval	int
;	O
}	O
FTSENT	struct
*	O
fts_read	function
(	O
register	O
FTS	struct
*	O
sp	pointer
)	O
{	O
register	O
FTSENT	struct
*	O
p	pointer
;	O
register	O
FTSENT	struct
*	O
tmp	pointer
;	O
register	O
int	O
instr	int
;	O
register	O
char	O
*	O
t	pointer
;	O
int	O
saved_errno	int
;	O
if	O
(	O
sp	pointer
->	O
fts_cur	pointer
==	O
NULL	O
||	O
ISSET	O
(	O
FTS_STOP	int
)	O
)	O
return	O
(	O
NULL	O
)	O
;	O
p	pointer
=	O
sp	pointer
->	O
fts_cur	pointer
;	O
instr	int
=	O
p	pointer
->	O
fts_instr	short
;	O
p	pointer
->	O
fts_instr	short
=	O
FTS_NOINSTR	int
;	O
if	O
(	O
instr	int
==	O
FTS_AGAIN	int
)	O
{	O
p	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
NULL	O
,	O
p	pointer
,	O
0	int
)	O
;	O
return	O
(	O
p	pointer
)	O
;	O
}	O
if	O
(	O
instr	int
==	O
FTS_FOLLOW	int
&&	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_SL	int
||	O
p	pointer
->	O
fts_info	short
==	O
FTS_SLNONE	int
)	O
)	O
{	O
p	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
NULL	O
,	O
p	pointer
,	O
1	int
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_D	int
&&	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
if	O
(	O
(	O
p	pointer
->	O
fts_symfd	int
=	O
open	function
(	O
"."	pointer
,	O
O_RDONLY	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
{	O
p	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
p	pointer
->	O
fts_info	short
=	O
FTS_ERR	int
;	O
}	O
else	O
p	pointer
->	O
fts_flags	short
|=	O
FTS_SYMFOLLOW	int
;	O
}	O
return	O
(	O
p	pointer
)	O
;	O
}	O
if	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_D	int
)	O
{	O
if	O
(	O
instr	int
==	O
FTS_SKIP	int
||	O
(	O
ISSET	O
(	O
FTS_XDEV	int
)	O
&&	O
p	pointer
->	O
fts_dev	long
!=	O
sp	pointer
->	O
fts_dev	long
)	O
)	O
{	O
if	O
(	O
p	pointer
->	O
fts_flags	short
&	O
FTS_SYMFOLLOW	int
)	O
close	function
(	O
p	pointer
->	O
fts_symfd	int
)	O
;	O
if	O
(	O
sp	pointer
->	O
fts_child	pointer
)	O
{	O
fts_lfree	function
(	O
sp	pointer
->	O
fts_child	pointer
)	O
;	O
sp	pointer
->	O
fts_child	pointer
=	O
NULL	O
;	O
}	O
p	pointer
->	O
fts_info	short
=	O
FTS_DP	int
;	O
return	O
(	O
p	pointer
)	O
;	O
}	O
if	O
(	O
sp	pointer
->	O
fts_child	pointer
&&	O
sp	pointer
->	O
fts_options	int
&	O
FTS_NAMEONLY	int
)	O
{	O
sp	pointer
->	O
fts_options	int
&=	O
~	O
FTS_NAMEONLY	int
;	O
fts_lfree	function
(	O
sp	pointer
->	O
fts_child	pointer
)	O
;	O
sp	pointer
->	O
fts_child	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
sp	pointer
->	O
fts_child	pointer
)	O
{	O
if	O
(	O
CHDIR	O
(	O
sp	pointer
,	O
p	pointer
->	O
fts_accpath	pointer
)	O
)	O
{	O
p	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
p	pointer
->	O
fts_flags	short
|=	O
FTS_DONTCHDIR	int
;	O
for	O
(	O
p	pointer
=	O
sp	pointer
->	O
fts_child	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
)	O
p	pointer
->	O
fts_accpath	pointer
=	O
p	pointer
->	O
fts_parent	pointer
->	O
fts_accpath	pointer
;	O
}	O
}	O
else	O
if	O
(	O
(	O
sp	pointer
->	O
fts_child	pointer
=	O
fts_build	function
(	O
sp	pointer
,	O
BREAD	int
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
ISSET	O
(	O
FTS_STOP	int
)	O
)	O
return	O
(	O
NULL	O
)	O
;	O
return	O
(	O
p	pointer
)	O
;	O
}	O
p	pointer
=	O
sp	pointer
->	O
fts_child	pointer
;	O
sp	pointer
->	O
fts_child	pointer
=	O
NULL	O
;	O
goto	O
name	pointer
;	O
}	O
next	O
:	O
tmp	pointer
=	O
p	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
)	O
)	O
{	O
free	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_level	short
==	O
FTS_ROOTLEVEL	int
)	O
{	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
&&	O
FCHDIR	O
(	O
sp	pointer
,	O
sp	pointer
->	O
fts_rfd	int
)	O
)	O
{	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
fts_load	function
(	O
sp	pointer
,	O
p	pointer
)	O
;	O
return	O
(	O
sp	pointer
->	O
fts_cur	pointer
=	O
p	pointer
)	O
;	O
}	O
if	O
(	O
p	pointer
->	O
fts_instr	short
==	O
FTS_SKIP	int
)	O
goto	O
next	O
;	O
if	O
(	O
p	pointer
->	O
fts_instr	short
==	O
FTS_FOLLOW	int
)	O
{	O
p	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
NULL	O
,	O
p	pointer
,	O
1	int
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_D	int
&&	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
if	O
(	O
(	O
p	pointer
->	O
fts_symfd	int
=	O
open	function
(	O
"."	pointer
,	O
O_RDONLY	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
{	O
p	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
p	pointer
->	O
fts_info	short
=	O
FTS_ERR	int
;	O
}	O
else	O
p	pointer
->	O
fts_flags	short
|=	O
FTS_SYMFOLLOW	int
;	O
}	O
p	pointer
->	O
fts_instr	short
=	O
FTS_NOINSTR	int
;	O
}	O
name	pointer
:	O
t	pointer
=	O
sp	pointer
->	O
fts_path	pointer
+	O
NAPPEND	O
(	O
p	pointer
->	O
fts_parent	pointer
)	O
;	O
*	O
t	pointer
++	O
=	O
'/'	O
;	O
memmove	function
(	O
t	pointer
,	O
p	pointer
->	O
fts_name	array
,	O
p	pointer
->	O
fts_namelen	short
+	O
1	int
)	O
;	O
return	O
(	O
sp	pointer
->	O
fts_cur	pointer
=	O
p	pointer
)	O
;	O
}	O
p	pointer
=	O
tmp	pointer
->	O
fts_parent	pointer
;	O
free	function
(	O
tmp	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_level	short
==	O
FTS_ROOTPARENTLEVEL	O
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
errno	O
=	O
0	int
;	O
return	O
(	O
sp	pointer
->	O
fts_cur	pointer
=	O
NULL	O
)	O
;	O
}	O
sp	pointer
->	O
fts_path	pointer
[	O
p	pointer
->	O
fts_pathlen	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
p	pointer
->	O
fts_level	short
==	O
FTS_ROOTLEVEL	int
)	O
{	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
&&	O
FCHDIR	O
(	O
sp	pointer
,	O
sp	pointer
->	O
fts_rfd	int
)	O
)	O
{	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
p	pointer
->	O
fts_flags	short
&	O
FTS_SYMFOLLOW	int
)	O
{	O
if	O
(	O
FCHDIR	O
(	O
sp	pointer
,	O
p	pointer
->	O
fts_symfd	int
)	O
)	O
{	O
saved_errno	int
=	O
errno	O
;	O
close	function
(	O
p	pointer
->	O
fts_symfd	int
)	O
;	O
errno	O
=	O
saved_errno	int
;	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
close	function
(	O
p	pointer
->	O
fts_symfd	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
p	pointer
->	O
fts_flags	short
&	O
FTS_DONTCHDIR	int
)	O
)	O
{	O
if	O
(	O
CHDIR	O
(	O
sp	pointer
,	O
".."	pointer
)	O
)	O
{	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
}	O
p	pointer
->	O
fts_info	short
=	O
p	pointer
->	O
fts_errno	int
?	O
FTS_ERR	int
:	O
FTS_DP	int
;	O
return	O
(	O
sp	pointer
->	O
fts_cur	pointer
=	O
p	pointer
)	O
;	O
}	O
int	O
fts_set	function
(	O
FTS	struct
*	O
sp	pointer
,	O
FTSENT	struct
*	O
p	pointer
,	O
int	O
instr	int
)	O
{	O
if	O
(	O
instr	int
&&	O
instr	int
!=	O
FTS_AGAIN	int
&&	O
instr	int
!=	O
FTS_FOLLOW	int
&&	O
instr	int
!=	O
FTS_NOINSTR	int
&&	O
instr	int
!=	O
FTS_SKIP	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
(	O
1	int
)	O
;	O
}	O
p	pointer
->	O
fts_instr	short
=	O
instr	int
;	O
return	O
(	O
0	int
)	O
;	O
}	O
FTSENT	struct
*	O
fts_children	function
(	O
register	O
FTS	struct
*	O
sp	pointer
,	O
int	O
instr	int
)	O
{	O
register	O
FTSENT	struct
*	O
p	pointer
;	O
int	O
fd	int
;	O
if	O
(	O
instr	int
&&	O
instr	int
!=	O
FTS_NAMEONLY	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
p	pointer
=	O
sp	pointer
->	O
fts_cur	pointer
;	O
errno	O
=	O
0	int
;	O
if	O
(	O
ISSET	O
(	O
FTS_STOP	int
)	O
)	O
return	O
(	O
NULL	O
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_INIT	int
)	O
return	O
(	O
p	pointer
->	O
fts_link	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
fts_info	short
!=	O
FTS_D	int
)	O
return	O
(	O
NULL	O
)	O
;	O
if	O
(	O
sp	pointer
->	O
fts_child	pointer
)	O
fts_lfree	function
(	O
sp	pointer
->	O
fts_child	pointer
)	O
;	O
if	O
(	O
instr	int
==	O
FTS_NAMEONLY	int
)	O
{	O
sp	pointer
->	O
fts_options	int
|=	O
FTS_NAMEONLY	int
;	O
instr	int
=	O
BNAMES	int
;	O
}	O
else	O
instr	int
=	O
BCHILD	int
;	O
if	O
(	O
p	pointer
->	O
fts_level	short
!=	O
FTS_ROOTLEVEL	int
||	O
p	pointer
->	O
fts_accpath	pointer
[	O
0	int
]	O
==	O
'/'	O
||	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
return	O
(	O
sp	pointer
->	O
fts_child	pointer
=	O
fts_build	function
(	O
sp	pointer
,	O
instr	int
)	O
)	O
;	O
if	O
(	O
(	O
fd	int
=	O
open	function
(	O
"."	pointer
,	O
O_RDONLY	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
return	O
(	O
NULL	O
)	O
;	O
sp	pointer
->	O
fts_child	pointer
=	O
fts_build	function
(	O
sp	pointer
,	O
instr	int
)	O
;	O
if	O
(	O
fchdir	function
(	O
fd	int
)	O
)	O
return	O
(	O
NULL	O
)	O
;	O
close	function
(	O
fd	int
)	O
;	O
return	O
(	O
sp	pointer
->	O
fts_child	pointer
)	O
;	O
}	O
static	O
FTSENT	struct
*	O
fts_build	function
(	O
register	O
FTS	struct
*	O
sp	pointer
,	O
int	O
type	enum
)	O
{	O
struct	O
dirent	struct
*	O
dp	pointer
;	O
register	O
FTSENT	struct
*	O
p	pointer
,	O
*	O
head	pointer
;	O
register	O
int	O
nitems	int
;	O
FTSENT	struct
*	O
cur	pointer
,	O
*	O
tail	pointer
;	O
DIR	struct
*	O
dirp	pointer
;	O
void	O
*	O
adjaddr	pointer
;	O
int	O
cderrno	int
,	O
descend	int
,	O
len	int
,	O
level	int
,	O
maxlen	int
,	O
nlinks	int
,	O
saved_errno	int
;	O
char	O
*	O
cp	pointer
=	O
NULL	O
;	O
cur	pointer
=	O
sp	pointer
->	O
fts_cur	pointer
;	O
if	O
(	O
(	O
dirp	pointer
=	O
opendir2	O
(	O
cur	pointer
->	O
fts_accpath	pointer
,	O
oflag	O
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
type	enum
==	O
BREAD	int
)	O
{	O
cur	pointer
->	O
fts_info	short
=	O
FTS_DNR	int
;	O
cur	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
}	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
type	enum
==	O
BNAMES	int
)	O
nlinks	int
=	O
0	int
;	O
else	O
if	O
(	O
ISSET	O
(	O
FTS_NOSTAT	int
)	O
&&	O
ISSET	O
(	O
FTS_PHYSICAL	int
)	O
)	O
nlinks	int
=	O
cur	pointer
->	O
fts_nlink	long
-	O
(	O
ISSET	O
(	O
FTS_SEEDOT	int
)	O
?	O
0	int
:	O
2	int
)	O
;	O
else	O
nlinks	int
=	O
-	O
1	int
;	O
cderrno	int
=	O
0	int
;	O
if	O
(	O
nlinks	int
||	O
type	enum
==	O
BREAD	int
)	O
{	O
if	O
(	O
FCHDIR	O
(	O
sp	pointer
,	O
dirfd	function
(	O
dirp	pointer
)	O
)	O
)	O
{	O
if	O
(	O
nlinks	int
&&	O
type	enum
==	O
BREAD	int
)	O
cur	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
cur	pointer
->	O
fts_flags	short
|=	O
FTS_DONTCHDIR	int
;	O
descend	int
=	O
0	int
;	O
cderrno	int
=	O
errno	O
;	O
}	O
else	O
descend	int
=	O
1	int
;	O
}	O
else	O
descend	int
=	O
0	int
;	O
maxlen	int
=	O
sp	pointer
->	O
fts_pathlen	int
-	O
cur	pointer
->	O
fts_pathlen	int
-	O
1	int
;	O
len	int
=	O
NAPPEND	O
(	O
cur	pointer
)	O
;	O
if	O
(	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
cp	pointer
=	O
sp	pointer
->	O
fts_path	pointer
+	O
len	int
;	O
*	O
cp	pointer
++	O
=	O
'/'	O
;	O
}	O
level	int
=	O
cur	pointer
->	O
fts_level	short
+	O
1	int
;	O
adjaddr	pointer
=	O
NULL	O
;	O
head	pointer
=	O
tail	pointer
=	O
NULL	O
;	O
nitems	int
=	O
0	int
;	O
while	O
(	O
(	O
dp	pointer
=	O
readdir	function
(	O
dirp	pointer
)	O
)	O
)	O
{	O
int	O
namlen	int
;	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_SEEDOT	int
)	O
&&	O
ISDOT	O
(	O
dp	pointer
->	O
d_name	array
)	O
)	O
continue	O
;	O
namlen	int
=	O
strlen	function
(	O
dp	pointer
->	O
d_name	array
)	O
+	O
1	int
;	O
if	O
(	O
(	O
p	pointer
=	O
fts_alloc	function
(	O
sp	pointer
,	O
dp	pointer
->	O
d_name	array
,	O
namlen	int
)	O
)	O
==	O
NULL	O
)	O
goto	O
mem1	O
;	O
if	O
(	O
namlen	int
>	O
maxlen	int
)	O
{	O
if	O
(	O
fts_palloc	function
(	O
sp	pointer
,	O
(	O
size_t	long
)	O
namlen	int
)	O
)	O
{	O
mem1	O
:	O
saved_errno	int
=	O
errno	O
;	O
free	function
(	O
p	pointer
)	O
;	O
fts_lfree	function
(	O
head	pointer
)	O
;	O
closedir	function
(	O
dirp	pointer
)	O
;	O
errno	O
=	O
saved_errno	int
;	O
cur	pointer
->	O
fts_info	short
=	O
FTS_ERR	int
;	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
adjaddr	pointer
=	O
sp	pointer
->	O
fts_path	pointer
;	O
maxlen	int
=	O
sp	pointer
->	O
fts_pathlen	int
-	O
sp	pointer
->	O
fts_cur	pointer
->	O
fts_pathlen	int
-	O
1	int
;	O
}	O
p	pointer
->	O
fts_pathlen	int
=	O
len	int
+	O
namlen	int
+	O
1	int
;	O
p	pointer
->	O
fts_parent	pointer
=	O
sp	pointer
->	O
fts_cur	pointer
;	O
p	pointer
->	O
fts_level	short
=	O
level	int
;	O
if	O
(	O
cderrno	int
)	O
{	O
if	O
(	O
nlinks	int
)	O
{	O
p	pointer
->	O
fts_info	short
=	O
FTS_NS	int
;	O
p	pointer
->	O
fts_errno	int
=	O
cderrno	int
;	O
}	O
else	O
p	pointer
->	O
fts_info	short
=	O
FTS_NSOK	int
;	O
p	pointer
->	O
fts_accpath	pointer
=	O
cur	pointer
->	O
fts_accpath	pointer
;	O
}	O
else	O
if	O
(	O
nlinks	int
==	O
0	int
||	O
(	O
nlinks	int
>	O
0	int
&&	O
dp	pointer
->	O
d_type	char
!=	O
DT_DIR	int
&&	O
dp	pointer
->	O
d_type	char
!=	O
DT_UNKNOWN	int
)	O
)	O
{	O
p	pointer
->	O
fts_accpath	pointer
=	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
?	O
p	pointer
->	O
fts_path	pointer
:	O
p	pointer
->	O
fts_name	array
;	O
p	pointer
->	O
fts_info	short
=	O
FTS_NSOK	int
;	O
}	O
else	O
{	O
if	O
(	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
p	pointer
->	O
fts_accpath	pointer
=	O
p	pointer
->	O
fts_path	pointer
;	O
memmove	function
(	O
p	pointer
->	O
fts_name	array
,	O
cp	pointer
,	O
p	pointer
->	O
fts_namelen	short
+	O
1	int
)	O
;	O
}	O
else	O
p	pointer
->	O
fts_accpath	pointer
=	O
p	pointer
->	O
fts_name	array
;	O
p	pointer
->	O
fts_info	short
=	O
fts_stat	function
(	O
sp	pointer
,	O
dp	pointer
,	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
nlinks	int
>	O
0	int
&&	O
(	O
p	pointer
->	O
fts_info	short
==	O
FTS_D	int
||	O
p	pointer
->	O
fts_info	short
==	O
FTS_DC	int
||	O
p	pointer
->	O
fts_info	short
==	O
FTS_DOT	int
)	O
)	O
--	O
nlinks	int
;	O
}	O
p	pointer
->	O
fts_link	pointer
=	O
NULL	O
;	O
if	O
(	O
head	pointer
==	O
NULL	O
)	O
head	pointer
=	O
tail	pointer
=	O
p	pointer
;	O
else	O
{	O
tail	pointer
->	O
fts_link	pointer
=	O
p	pointer
;	O
tail	pointer
=	O
p	pointer
;	O
}	O
++	O
nitems	int
;	O
}	O
closedir	function
(	O
dirp	pointer
)	O
;	O
if	O
(	O
adjaddr	pointer
)	O
fts_padjust	function
(	O
sp	pointer
,	O
adjaddr	pointer
)	O
;	O
if	O
(	O
ISSET	O
(	O
FTS_NOCHDIR	int
)	O
)	O
{	O
if	O
(	O
cp	pointer
-	O
1	int
>	O
sp	pointer
->	O
fts_path	pointer
)	O
--	O
cp	pointer
;	O
*	O
cp	pointer
=	O
'\0'	O
;	O
}	O
if	O
(	O
descend	int
&&	O
(	O
type	enum
==	O
BCHILD	int
||	O
!	O
nitems	int
)	O
&&	O
(	O
cur	pointer
->	O
fts_level	short
==	O
FTS_ROOTLEVEL	int
?	O
FCHDIR	O
(	O
sp	pointer
,	O
sp	pointer
->	O
fts_rfd	int
)	O
:	O
CHDIR	O
(	O
sp	pointer
,	O
".."	pointer
)	O
)	O
)	O
{	O
cur	pointer
->	O
fts_info	short
=	O
FTS_ERR	int
;	O
SET	O
(	O
FTS_STOP	int
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
!	O
nitems	int
)	O
{	O
if	O
(	O
type	enum
==	O
BREAD	int
)	O
cur	pointer
->	O
fts_info	short
=	O
FTS_DP	int
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
sp	pointer
->	O
fts_compar	pointer
&&	O
nitems	int
>	O
1	int
)	O
head	pointer
=	O
fts_sort	function
(	O
sp	pointer
,	O
head	pointer
,	O
nitems	int
)	O
;	O
return	O
(	O
head	pointer
)	O
;	O
}	O
static	O
unsigned	O
short	O
fts_stat	function
(	O
FTS	struct
*	O
sp	pointer
,	O
struct	O
dirent	struct
*	O
dp	pointer
,	O
register	O
FTSENT	struct
*	O
p	pointer
,	O
int	O
follow	int
)	O
{	O
register	O
FTSENT	struct
*	O
t	pointer
;	O
register	O
dev_t	long
dev	long
;	O
register	O
ino_t	long
ino	long
;	O
struct	O
stat	struct
*	O
sbp	pointer
,	O
sb	struct
;	O
int	O
saved_errno	int
;	O
sbp	pointer
=	O
ISSET	O
(	O
FTS_NOSTAT	int
)	O
?	O
&	O
sb	struct
:	O
p	pointer
->	O
fts_statp	pointer
;	O
if	O
(	O
ISSET	O
(	O
FTS_LOGICAL	int
)	O
||	O
follow	int
)	O
{	O
if	O
(	O
stat	struct
(	O
p	pointer
->	O
fts_accpath	pointer
,	O
sbp	pointer
)	O
)	O
{	O
saved_errno	int
=	O
errno	O
;	O
if	O
(	O
!	O
lstat	function
(	O
p	pointer
->	O
fts_accpath	pointer
,	O
sbp	pointer
)	O
)	O
{	O
errno	O
=	O
0	int
;	O
return	O
(	O
FTS_SLNONE	int
)	O
;	O
}	O
p	pointer
->	O
fts_errno	int
=	O
saved_errno	int
;	O
goto	O
err	long
;	O
}	O
}	O
else	O
if	O
(	O
lstat	function
(	O
p	pointer
->	O
fts_accpath	pointer
,	O
sbp	pointer
)	O
)	O
{	O
p	pointer
->	O
fts_errno	int
=	O
errno	O
;	O
err	long
:	O
memset	function
(	O
sbp	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
stat	struct
)	O
)	O
;	O
return	O
(	O
FTS_NS	int
)	O
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
sbp	pointer
->	O
st_mode	int
)	O
)	O
{	O
dev	long
=	O
p	pointer
->	O
fts_dev	long
=	O
sbp	pointer
->	O
st_dev	long
;	O
ino	long
=	O
p	pointer
->	O
fts_ino	long
=	O
sbp	pointer
->	O
st_ino	long
;	O
p	pointer
->	O
fts_nlink	long
=	O
sbp	pointer
->	O
st_nlink	long
;	O
if	O
(	O
ISDOT	O
(	O
p	pointer
->	O
fts_name	array
)	O
)	O
return	O
(	O
FTS_DOT	int
)	O
;	O
for	O
(	O
t	pointer
=	O
p	pointer
->	O
fts_parent	pointer
;	O
t	pointer
->	O
fts_level	short
>=	O
FTS_ROOTLEVEL	int
;	O
t	pointer
=	O
t	pointer
->	O
fts_parent	pointer
)	O
if	O
(	O
ino	long
==	O
t	pointer
->	O
fts_ino	long
&&	O
dev	long
==	O
t	pointer
->	O
fts_dev	long
)	O
{	O
p	pointer
->	O
fts_cycle	pointer
=	O
t	pointer
;	O
return	O
(	O
FTS_DC	int
)	O
;	O
}	O
return	O
(	O
FTS_D	int
)	O
;	O
}	O
if	O
(	O
S_ISLNK	O
(	O
sbp	pointer
->	O
st_mode	int
)	O
)	O
return	O
(	O
FTS_SL	int
)	O
;	O
if	O
(	O
S_ISREG	O
(	O
sbp	pointer
->	O
st_mode	int
)	O
)	O
return	O
(	O
FTS_F	int
)	O
;	O
return	O
(	O
FTS_DEFAULT	int
)	O
;	O
}	O
static	O
FTSENT	struct
*	O
fts_sort	function
(	O
FTS	struct
*	O
sp	pointer
,	O
FTSENT	struct
*	O
head	pointer
,	O
register	O
int	O
nitems	int
)	O
{	O
register	O
FTSENT	struct
*	O
*	O
ap	pointer
,	O
*	O
p	pointer
;	O
if	O
(	O
nitems	int
>	O
sp	pointer
->	O
fts_nitems	int
)	O
{	O
sp	pointer
->	O
fts_nitems	int
=	O
nitems	int
+	O
40	int
;	O
if	O
(	O
(	O
sp	pointer
->	O
fts_array	pointer
=	O
realloc	function
(	O
sp	pointer
->	O
fts_array	pointer
,	O
(	O
size_t	long
)	O
(	O
sp	pointer
->	O
fts_nitems	int
*	O
sizeof	O
(	O
FTSENT	struct
*	O
)	O
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
sp	pointer
->	O
fts_nitems	int
=	O
0	int
;	O
return	O
(	O
head	pointer
)	O
;	O
}	O
}	O
for	O
(	O
ap	pointer
=	O
sp	pointer
->	O
fts_array	pointer
,	O
p	pointer
=	O
head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
)	O
*	O
ap	pointer
++	O
=	O
p	pointer
;	O
qsort	function
(	O
(	O
void	O
*	O
)	O
sp	pointer
->	O
fts_array	pointer
,	O
nitems	int
,	O
sizeof	O
(	O
FTSENT	struct
*	O
)	O
,	O
sp	pointer
->	O
fts_compar	pointer
)	O
;	O
for	O
(	O
head	pointer
=	O
*	O
(	O
ap	pointer
=	O
sp	pointer
->	O
fts_array	pointer
)	O
;	O
--	O
nitems	int
;	O
++	O
ap	pointer
)	O
ap	pointer
[	O
0	int
]	O
->	O
fts_link	pointer
=	O
ap	pointer
[	O
1	int
]	O
;	O
ap	pointer
[	O
0	int
]	O
->	O
fts_link	pointer
=	O
NULL	O
;	O
return	O
(	O
head	pointer
)	O
;	O
}	O
static	O
FTSENT	struct
*	O
fts_alloc	function
(	O
FTS	struct
*	O
sp	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
register	O
int	O
namelen	int
)	O
{	O
register	O
FTSENT	struct
*	O
p	pointer
;	O
size_t	long
len	int
;	O
len	int
=	O
sizeof	O
(	O
FTSENT	struct
)	O
+	O
namelen	int
;	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_NOSTAT	int
)	O
)	O
len	int
+=	O
sizeof	O
(	O
struct	O
stat	struct
)	O
;	O
if	O
(	O
(	O
p	pointer
=	O
malloc	function
(	O
len	int
)	O
)	O
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
memmove	function
(	O
p	pointer
->	O
fts_name	array
,	O
name	pointer
,	O
namelen	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
ISSET	O
(	O
FTS_NOSTAT	int
)	O
)	O
p	pointer
->	O
fts_statp	pointer
=	O
(	O
struct	O
stat	struct
*	O
)	O
(	O
p	pointer
->	O
fts_name	array
+	O
namelen	int
+	O
2	int
)	O
;	O
p	pointer
->	O
fts_namelen	short
=	O
namelen	int
;	O
p	pointer
->	O
fts_path	pointer
=	O
sp	pointer
->	O
fts_path	pointer
;	O
p	pointer
->	O
fts_errno	int
=	O
0	int
;	O
p	pointer
->	O
fts_flags	short
=	O
0	int
;	O
p	pointer
->	O
fts_instr	short
=	O
FTS_NOINSTR	int
;	O
p	pointer
->	O
fts_number	long
=	O
0	int
;	O
p	pointer
->	O
fts_pointer	pointer
=	O
NULL	O
;	O
return	O
(	O
p	pointer
)	O
;	O
}	O
static	O
void	O
fts_lfree	function
(	O
register	O
FTSENT	struct
*	O
head	pointer
)	O
{	O
register	O
FTSENT	struct
*	O
p	pointer
;	O
while	O
(	O
(	O
p	pointer
=	O
head	pointer
)	O
)	O
{	O
head	pointer
=	O
head	pointer
->	O
fts_link	pointer
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
}	O
static	O
int	O
fts_palloc	function
(	O
FTS	struct
*	O
sp	pointer
,	O
size_t	long
more	long
)	O
{	O
sp	pointer
->	O
fts_pathlen	int
+=	O
more	long
+	O
256	int
;	O
sp	pointer
->	O
fts_path	pointer
=	O
realloc	function
(	O
sp	pointer
->	O
fts_path	pointer
,	O
(	O
size_t	long
)	O
sp	pointer
->	O
fts_pathlen	int
)	O
;	O
return	O
(	O
sp	pointer
->	O
fts_path	pointer
==	O
NULL	O
)	O
;	O
}	O
static	O
void	O
fts_padjust	function
(	O
FTS	struct
*	O
sp	pointer
,	O
void	O
*	O
addr	pointer
)	O
{	O
FTSENT	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
sp	pointer
->	O
fts_child	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
)	O
ADJUST	O
(	O
p	pointer
)	O
;	O
for	O
(	O
p	pointer
=	O
sp	pointer
->	O
fts_cur	pointer
;	O
p	pointer
->	O
fts_level	short
>=	O
FTS_ROOTLEVEL	int
;	O
)	O
{	O
ADJUST	O
(	O
p	pointer
)	O
;	O
p	pointer
=	O
p	pointer
->	O
fts_link	pointer
?	O
p	pointer
->	O
fts_link	pointer
:	O
p	pointer
->	O
fts_parent	pointer
;	O
}	O
}	O
static	O
size_t	long
fts_maxarglen	function
(	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
size_t	long
len	int
,	O
max	long
;	O
for	O
(	O
max	long
=	O
0	int
;	O
*	O
argv	pointer
;	O
++	O
argv	pointer
)	O
if	O
(	O
(	O
len	int
=	O
strlen	function
(	O
*	O
argv	pointer
)	O
)	O
>	O
max	long
)	O
max	long
=	O
len	int
;	O
return	O
(	O
max	long
)	O
;	O
}	O
