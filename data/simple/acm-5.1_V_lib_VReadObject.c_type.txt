extern	O
void	O
VComputeObjectExtent	function
(	O
)	O
;	O
static	O
VPoint	struct
scale	int
=	O
{	O
1.0	int
,	O
1.0	int
,	O
1.0	int
}	O
;	O
void	O
VSetReadObjectScale	function
(	O
VPoint	struct
*	O
p	pointer
)	O
{	O
scale	int
=	O
*	O
p	pointer
;	O
}	O
typedef	O
enum	O
{	O
Nil	int
,	O
EndOfFile	int
,	O
TOKEN_RGB_VALUE	int
,	O
TOKEN_LPAREN	int
,	O
TOKEN_RPAREN	int
,	O
TOKEN_COMMA	int
,	O
TOKEN_STRING	int
,	O
TOKEN_CLIP	int
,	O
TOKEN_DOUBLE	int
,	O
TOKEN_LONG	int
,	O
}	O
field_id	enum
;	O
static	O
field_id	enum
NextToken	function
(	O
)	O
;	O
struct	O
keyword_info	struct
{	O
char	O
*	O
word	pointer
;	O
field_id	enum
id	enum
;	O
}	O
;	O
static	O
struct	O
keyword_info	struct
keywords	array
[	O
]	O
=	O
{	O
{	O
"clip"	pointer
,	O
TOKEN_CLIP	int
}	O
,	O
{	O
(	O
char	O
*	O
)	O
NULL	O
,	O
Nil	int
}	O
,	O
}	O
;	O
static	O
char	O
token	array
[	O
256	int
]	O
;	O
static	O
int	O
token_length	int
=	O
0	int
;	O
typedef	O
union	O
{	O
struct	O
keyword_info	struct
*	O
kw	pointer
;	O
double	O
double_value	double
;	O
char	O
*	O
string_value	pointer
;	O
long	O
long_value	long
;	O
VPoint	struct
point	pointer
;	O
VPolygon	struct
*	O
poly	pointer
;	O
}	O
lex_val	union
;	O
static	O
lex_val	union
lex_value	union
;	O
struct	O
lex_record	struct
{	O
char	O
*	O
name	pointer
;	O
FILE	struct
*	O
f	struct
;	O
int	O
lineno	int
;	O
int	O
lookahead_valid	int
;	O
int	O
lookahead	int
;	O
int	O
stack_top	int
;	O
lex_val	union
value_stack	array
[	O
4	int
]	O
;	O
}	O
;	O
static	O
void	O
ParseError	function
(	O
p	pointer
,	O
s	double
)	O
struct	O
lex_record	struct
*	O
p	pointer
;	O
char	O
*	O
s	double
;	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"error in file %s (line %d):\n\t%s\n"	pointer
,	O
p	pointer
->	O
name	pointer
,	O
p	pointer
->	O
lineno	int
,	O
s	double
)	O
;	O
}	O
static	O
void	O
Resync	function
(	O
p	pointer
,	O
token	array
)	O
struct	O
lex_record	struct
*	O
p	pointer
;	O
field_id	enum
token	array
;	O
{	O
field_id	enum
t	enum
;	O
int	O
c	pointer
;	O
if	O
(	O
token	array
==	O
Nil	int
)	O
{	O
while	O
(	O
(	O
c	pointer
=	O
input	O
(	O
p	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	pointer
==	O
'\n'	O
)	O
break	O
;	O
}	O
}	O
else	O
{	O
while	O
(	O
(	O
t	enum
=	O
NextToken	function
(	O
p	pointer
)	O
)	O
!=	O
EndOfFile	int
)	O
{	O
if	O
(	O
t	enum
==	O
token	array
)	O
break	O
;	O
}	O
}	O
}	O
static	O
field_id	enum
NextTokenx	function
(	O
p	pointer
)	O
struct	O
lex_record	struct
*	O
p	pointer
;	O
{	O
register	O
int	O
c	pointer
,	O
state	int
=	O
STATE_INITIAL	int
,	O
seen_dot	int
=	O
0	int
;	O
register	O
struct	O
keyword_info	struct
*	O
q	pointer
;	O
token_length	int
=	O
0	int
;	O
while	O
(	O
(	O
c	pointer
=	O
input	O
(	O
p	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
state	int
)	O
{	O
case	O
STATE_INITIAL	int
:	O
if	O
(	O
isalpha	function
(	O
c	pointer
)	O
)	O
{	O
token	array
[	O
token_length	int
++	O
]	O
=	O
c	pointer
;	O
state	int
=	O
STATE_WORD	int
;	O
}	O
else	O
if	O
(	O
isspace	function
(	O
c	pointer
)	O
)	O
{	O
continue	O
;	O
}	O
else	O
if	O
(	O
isdigit	function
(	O
c	pointer
)	O
||	O
c	pointer
==	O
'-'	O
||	O
c	pointer
==	O
'+'	O
||	O
c	pointer
==	O
'.'	O
)	O
{	O
if	O
(	O
c	pointer
==	O
'.'	O
)	O
seen_dot	int
=	O
1	int
;	O
token	array
[	O
token_length	int
++	O
]	O
=	O
c	pointer
;	O
state	int
=	O
STATE_NUMBER	int
;	O
}	O
else	O
if	O
(	O
c	pointer
==	O
'"'	O
)	O
{	O
state	int
=	O
STATE_STRING	int
;	O
}	O
else	O
if	O
(	O
c	pointer
==	O
'#'	O
)	O
{	O
token	array
[	O
token_length	int
++	O
]	O
=	O
c	pointer
;	O
state	int
=	O
STATE_RGB	int
;	O
}	O
else	O
{	O
token	array
[	O
0	int
]	O
=	O
c	pointer
;	O
token	array
[	O
1	int
]	O
=	O
'\0'	O
;	O
switch	O
(	O
c	pointer
)	O
{	O
case	O
','	O
:	O
return	O
TOKEN_COMMA	int
;	O
case	O
'('	O
:	O
return	O
TOKEN_LPAREN	int
;	O
case	O
')'	O
:	O
return	O
TOKEN_RPAREN	int
;	O
default	O
:	O
ParseError	function
(	O
p	pointer
,	O
"invalid character"	pointer
)	O
;	O
state	int
=	O
STATE_INITIAL	int
;	O
}	O
}	O
break	O
;	O
case	O
STATE_WORD	int
:	O
case	O
STATE_NUMBER	int
:	O
if	O
(	O
isspace	function
(	O
c	pointer
)	O
||	O
c	pointer
==	O
','	O
||	O
c	pointer
==	O
'('	O
||	O
c	pointer
==	O
')'	O
)	O
{	O
token	array
[	O
token_length	int
]	O
=	O
'\0'	O
;	O
unput	O
(	O
p	pointer
,	O
c	pointer
)	O
;	O
if	O
(	O
state	int
==	O
STATE_WORD	int
)	O
{	O
for	O
(	O
q	pointer
=	O
keywords	array
;	O
q	pointer
->	O
word	pointer
;	O
++	O
q	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
q	pointer
->	O
word	pointer
,	O
token	array
)	O
==	O
0	int
)	O
{	O
lex_value	union
.	O
kw	pointer
=	O
q	pointer
;	O
return	O
q	pointer
->	O
id	enum
;	O
}	O
}	O
return	O
TOKEN_STRING	int
;	O
}	O
else	O
{	O
if	O
(	O
seen_dot	int
)	O
{	O
lex_value	union
.	O
double_value	double
=	O
atof	function
(	O
token	array
)	O
;	O
return	O
TOKEN_DOUBLE	int
;	O
}	O
else	O
{	O
lex_value	union
.	O
long_value	long
=	O
atoi	function
(	O
token	array
)	O
;	O
return	O
TOKEN_LONG	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
c	pointer
==	O
'.'	O
||	O
c	pointer
==	O
'e'	O
||	O
c	pointer
==	O
'E'	O
)	O
{	O
seen_dot	int
=	O
1	int
;	O
}	O
token	array
[	O
token_length	int
++	O
]	O
=	O
c	pointer
;	O
}	O
break	O
;	O
case	O
STATE_STRING	int
:	O
switch	O
(	O
c	pointer
)	O
{	O
case	O
'"'	O
:	O
token	array
[	O
token_length	int
]	O
=	O
'\0'	O
;	O
return	O
TOKEN_STRING	int
;	O
case	O
'\n'	O
:	O
ParseError	function
(	O
p	pointer
,	O
"strings cannot span a line"	pointer
)	O
;	O
unput	O
(	O
p	pointer
,	O
c	pointer
)	O
;	O
state	int
=	O
STATE_INITIAL	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
switch	O
(	O
c	pointer
=	O
input	O
(	O
p	pointer
)	O
)	O
{	O
case	O
EOF	O
:	O
ParseError	function
(	O
p	pointer
,	O
"Premature End-of-file"	pointer
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
token	array
[	O
token_length	int
++	O
]	O
=	O
'\n'	O
;	O
break	O
;	O
case	O
't'	O
:	O
token	array
[	O
token_length	int
++	O
]	O
=	O
'\t'	O
;	O
break	O
;	O
default	O
:	O
token	array
[	O
token_length	int
++	O
]	O
=	O
c	pointer
;	O
break	O
;	O
}	O
default	O
:	O
token	array
[	O
token_length	int
++	O
]	O
=	O
c	pointer
;	O
break	O
;	O
}	O
break	O
;	O
case	O
STATE_RGB	int
:	O
while	O
(	O
isxdigit	function
(	O
c	pointer
)	O
)	O
{	O
token	array
[	O
token_length	int
++	O
]	O
=	O
c	pointer
;	O
c	pointer
=	O
input	O
(	O
p	pointer
)	O
;	O
}	O
unput	O
(	O
p	pointer
,	O
c	pointer
)	O
;	O
token	array
[	O
token_length	int
]	O
=	O
'\0'	O
;	O
state	int
=	O
STATE_INITIAL	int
;	O
return	O
TOKEN_RGB_VALUE	int
;	O
break	O
;	O
}	O
}	O
return	O
EndOfFile	int
;	O
}	O
static	O
field_id	enum
NextToken	function
(	O
p	pointer
)	O
struct	O
lex_record	struct
*	O
p	pointer
;	O
{	O
field_id	enum
t	enum
;	O
t	enum
=	O
NextTokenx	function
(	O
p	pointer
)	O
;	O
return	O
t	enum
;	O
}	O
static	O
int	O
ParseColorInfo	function
(	O
p	pointer
,	O
flag	int
)	O
struct	O
lex_record	struct
*	O
p	pointer
;	O
int	O
flag	int
;	O
{	O
field_id	enum
t	enum
;	O
static	O
VPolygon	struct
template	struct
;	O
int	O
count	int
=	O
0	int
,	O
done	int
=	O
0	int
;	O
template	struct
.	O
color	pointer
=	O
template	struct
.	O
backColor	pointer
=	O
(	O
VColor	struct
*	O
)	O
NULL	O
;	O
template	struct
.	O
flags	short
=	O
0	int
;	O
template	struct
.	O
assignedDepth	short
=	O
-	O
1	int
;	O
t	enum
=	O
NextToken	function
(	O
p	pointer
)	O
;	O
if	O
(	O
t	enum
==	O
TOKEN_RGB_VALUE	int
||	O
t	enum
==	O
TOKEN_STRING	int
)	O
{	O
template	struct
.	O
color	pointer
=	O
VAllocDepthCueuedColor	function
(	O
token	array
,	O
flag	int
)	O
;	O
}	O
else	O
if	O
(	O
t	enum
==	O
TOKEN_LPAREN	int
)	O
{	O
template	struct
.	O
flags	short
=	O
0	int
;	O
while	O
(	O
!	O
done	int
)	O
{	O
t	enum
=	O
NextToken	function
(	O
p	pointer
)	O
;	O
switch	O
(	O
t	enum
)	O
{	O
case	O
TOKEN_RGB_VALUE	int
:	O
case	O
TOKEN_STRING	int
:	O
if	O
(	O
count	int
++	O
==	O
0	int
)	O
{	O
template	struct
.	O
color	pointer
=	O
VAllocDepthCueuedColor	function
(	O
token	array
,	O
flag	int
)	O
;	O
}	O
else	O
{	O
template	struct
.	O
backColor	pointer
=	O
VAllocDepthCueuedColor	function
(	O
token	array
,	O
flag	int
)	O
;	O
}	O
break	O
;	O
case	O
TOKEN_COMMA	int
:	O
break	O
;	O
case	O
TOKEN_CLIP	int
:	O
template	struct
.	O
flags	short
|=	O
PolyClipBackface	int
;	O
break	O
;	O
case	O
TOKEN_RPAREN	int
:	O
done	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
Resync	function
(	O
p	pointer
,	O
Nil	int
)	O
;	O
return	O
1	int
;	O
}	O
push_value	O
(	O
p	pointer
,	O
poly	pointer
,	O
&	O
template	struct
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
ParseVertex	function
(	O
p	pointer
)	O
struct	O
lex_record	struct
*	O
p	pointer
;	O
{	O
field_id	enum
t	enum
;	O
VPoint	struct
pt	pointer
;	O
if	O
(	O
NextToken	function
(	O
p	pointer
)	O
!=	O
TOKEN_LONG	int
)	O
{	O
}	O
t	enum
=	O
NextToken	function
(	O
p	pointer
)	O
;	O
if	O
(	O
t	enum
==	O
TOKEN_DOUBLE	int
)	O
{	O
pt	pointer
.	O
x	double
=	O
lex_value	union
.	O
double_value	double
;	O
}	O
else	O
if	O
(	O
t	enum
==	O
TOKEN_LONG	int
)	O
{	O
pt	pointer
.	O
x	double
=	O
lex_value	union
.	O
long_value	long
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
t	enum
=	O
NextToken	function
(	O
p	pointer
)	O
;	O
if	O
(	O
t	enum
==	O
TOKEN_DOUBLE	int
)	O
{	O
pt	pointer
.	O
y	double
=	O
lex_value	union
.	O
double_value	double
;	O
}	O
else	O
if	O
(	O
t	enum
==	O
TOKEN_LONG	int
)	O
{	O
pt	pointer
.	O
y	double
=	O
lex_value	union
.	O
long_value	long
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
t	enum
=	O
NextToken	function
(	O
p	pointer
)	O
;	O
if	O
(	O
t	enum
==	O
TOKEN_DOUBLE	int
)	O
{	O
pt	pointer
.	O
z	double
=	O
lex_value	union
.	O
double_value	double
;	O
}	O
else	O
if	O
(	O
t	enum
==	O
TOKEN_LONG	int
)	O
{	O
pt	pointer
.	O
z	double
=	O
lex_value	union
.	O
long_value	long
;	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
push_value	O
(	O
p	pointer
,	O
point	pointer
,	O
pt	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
ParsePolygon	function
(	O
p	pointer
,	O
tmp	struct
,	O
pts	pointer
,	O
flag	int
)	O
struct	O
lex_record	struct
*	O
p	pointer
;	O
VPoint	struct
*	O
tmp	struct
;	O
VPoint	struct
*	O
pts	pointer
;	O
int	O
flag	int
;	O
{	O
int	O
num_points	int
,	O
i	int
,	O
id	enum
;	O
VPolygon	struct
template	struct
;	O
if	O
(	O
ParseColorInfo	function
(	O
p	pointer
,	O
flag	int
)	O
!=	O
0	int
)	O
{	O
ParseError	function
(	O
p	pointer
,	O
"invalid color specification"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
template	struct
=	O
*	O
(	O
pop_value	O
(	O
p	pointer
,	O
poly	pointer
)	O
)	O
;	O
if	O
(	O
NextToken	function
(	O
p	pointer
)	O
!=	O
TOKEN_LONG	int
)	O
{	O
ParseError	function
(	O
p	pointer
,	O
"invalid polygon vertex count"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
num_points	int
=	O
lex_value	union
.	O
long_value	long
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_points	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
NextToken	function
(	O
p	pointer
)	O
!=	O
TOKEN_LONG	int
)	O
{	O
ParseError	function
(	O
p	pointer
,	O
"invalid polygon vertex"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
id	enum
=	O
lex_value	union
.	O
long_value	long
;	O
pts	pointer
[	O
i	int
]	O
=	O
tmp	struct
[	O
id	enum
-	O
1	int
]	O
;	O
}	O
push_value	O
(	O
p	pointer
,	O
poly	pointer
,	O
VCreatePolygonFromTemplate	function
(	O
num_points	int
,	O
pts	pointer
,	O
&	O
template	struct
)	O
)	O
;	O
return	O
0	int
;	O
}	O
VObject	struct
*	O
VReadObject	function
(	O
f	struct
)	O
FILE	struct
*	O
f	struct
;	O
{	O
return	O
VReadDepthCueuedObject	function
(	O
f	struct
,	O
0	int
)	O
;	O
}	O
VObject	struct
*	O
VReadDepthCueuedObject	function
(	O
f	struct
,	O
flag	int
)	O
FILE	struct
*	O
f	struct
;	O
int	O
flag	int
;	O
{	O
char	O
*	O
name	pointer
;	O
int	O
num_points	int
,	O
num_polys	int
,	O
i	int
;	O
VPoint	struct
*	O
tmp_points	pointer
,	O
*	O
tmp_points1	pointer
;	O
VPolygon	struct
*	O
*	O
polygons	pointer
;	O
VObject	struct
*	O
object	pointer
;	O
struct	O
lex_record	struct
lr	struct
,	O
*	O
p	pointer
;	O
char	O
line	array
[	O
256	int
]	O
;	O
p	pointer
=	O
&	O
lr	struct
;	O
p	pointer
->	O
f	struct
=	O
f	struct
;	O
p	pointer
->	O
lineno	int
=	O
1	int
;	O
p	pointer
->	O
lookahead_valid	int
=	O
0	int
;	O
p	pointer
->	O
stack_top	int
=	O
0	int
;	O
fgets	function
(	O
line	array
,	O
sizeof	O
(	O
line	array
)	O
,	O
f	struct
)	O
;	O
p	pointer
->	O
lineno	int
=	O
2	int
;	O
p	pointer
->	O
name	pointer
=	O
line	array
;	O
name	pointer
=	O
strdup	function
(	O
line	array
)	O
;	O
if	O
(	O
NextToken	function
(	O
p	pointer
)	O
!=	O
TOKEN_LONG	int
)	O
{	O
return	O
(	O
VObject	struct
*	O
)	O
NULL	O
;	O
}	O
num_points	int
=	O
lex_value	union
.	O
long_value	long
;	O
if	O
(	O
NextToken	function
(	O
p	pointer
)	O
!=	O
TOKEN_LONG	int
)	O
{	O
return	O
(	O
VObject	struct
*	O
)	O
NULL	O
;	O
}	O
num_polys	int
=	O
lex_value	union
.	O
long_value	long
;	O
tmp_points	pointer
=	O
(	O
VPoint	struct
*	O
)	O
Vmalloc	function
(	O
num_points	int
*	O
2	int
*	O
sizeof	O
(	O
VPoint	struct
)	O
)	O
;	O
tmp_points1	pointer
=	O
&	O
tmp_points	pointer
[	O
num_points	int
]	O
;	O
polygons	pointer
=	O
(	O
VPolygon	struct
*	O
*	O
)	O
Vmalloc	function
(	O
num_polys	int
*	O
sizeof	O
(	O
VPolygon	struct
*	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_points	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
ParseVertex	function
(	O
p	pointer
)	O
!=	O
0	int
)	O
{	O
return	O
(	O
VObject	struct
*	O
)	O
NULL	O
;	O
}	O
tmp_points	pointer
[	O
i	int
]	O
=	O
pop_value	O
(	O
p	pointer
,	O
point	pointer
)	O
;	O
tmp_points	pointer
[	O
i	int
]	O
.	O
x	double
*=	O
scale	int
.	O
x	double
;	O
tmp_points	pointer
[	O
i	int
]	O
.	O
y	double
*=	O
scale	int
.	O
y	double
;	O
tmp_points	pointer
[	O
i	int
]	O
.	O
z	double
*=	O
scale	int
.	O
z	double
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_polys	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
ParsePolygon	function
(	O
p	pointer
,	O
tmp_points	pointer
,	O
tmp_points1	pointer
,	O
flag	int
)	O
!=	O
0	int
)	O
{	O
ParseError	function
(	O
p	pointer
,	O
"invalid polygon specification"	pointer
)	O
;	O
return	O
(	O
VObject	struct
*	O
)	O
NULL	O
;	O
}	O
polygons	pointer
[	O
i	int
]	O
=	O
pop_value	O
(	O
p	pointer
,	O
poly	pointer
)	O
;	O
}	O
object	pointer
=	O
(	O
VObject	struct
*	O
)	O
Vmalloc	function
(	O
sizeof	O
(	O
VObject	struct
)	O
)	O
;	O
object	pointer
->	O
name	pointer
=	O
name	pointer
;	O
object	pointer
->	O
numPolys	int
=	O
num_polys	int
;	O
object	pointer
->	O
polygon	pointer
=	O
polygons	pointer
;	O
object	pointer
->	O
order	pointer
=	O
(	O
unsigned	O
short	O
*	O
)	O
NULL	O
;	O
VComputeObjectExtent	function
(	O
object	pointer
)	O
;	O
if	O
(	O
VObjectNeedsOrdering	function
(	O
object	pointer
)	O
)	O
{	O
VComputePolygonOrdering	function
(	O
object	pointer
)	O
;	O
}	O
free	function
(	O
(	O
char	O
*	O
)	O
tmp_points	pointer
)	O
;	O
return	O
object	pointer
;	O
}	O
