typedef	O
struct	O
netcat_server	struct
netcat_server_t	struct
;	O
typedef	O
struct	O
netcat_stream	O
netcat_stream_t	struct
;	O
typedef	O
ssize_t	long
(	O
*	O
netcat_stream_io_t	pointer
)	O
(	O
netcat_server_t	struct
*	O
srv	pointer
)	O
;	O
typedef	O
int	O
(	O
*	O
netcat_stream_disconnect_t	pointer
)	O
(	O
netcat_server_t	struct
*	O
srv	pointer
)	O
;	O
enum	O
{	O
IN	int
,	O
OUT	int
}	O
;	O
struct	O
netcat_server	struct
{	O
char	O
const	O
*	O
id	pointer
;	O
netcat_server_t	struct
*	O
next	pointer
,	O
*	O
prev	pointer
;	O
struct	O
pollfd	struct
*	O
pollfd	struct
;	O
int	O
state	pointer
;	O
netcat_stream_disconnect_t	pointer
disconnect	pointer
;	O
netcat_server_t	struct
*	O
peer	pointer
;	O
struct	O
iobuf	struct
buf	pointer
[	O
2	int
]	O
;	O
}	O
;	O
static	O
netcat_server_t	struct
*	O
server_head	pointer
,	O
*	O
server_tail	pointer
;	O
netcat_server_t	struct
*	O
netcat_server_create	function
(	O
char	O
const	O
*	O
id	pointer
,	O
struct	O
pollfd	struct
*	O
pfd	pointer
,	O
int	O
state	pointer
,	O
netcat_stream_disconnect_t	pointer
dis	pointer
,	O
netcat_server_t	struct
*	O
peer	pointer
)	O
{	O
netcat_server_t	struct
*	O
srv	pointer
=	O
grecs_zalloc	function
(	O
sizeof	O
(	O
*	O
srv	pointer
)	O
)	O
;	O
srv	pointer
->	O
id	pointer
=	O
id	pointer
;	O
srv	pointer
->	O
pollfd	struct
=	O
pfd	pointer
;	O
srv	pointer
->	O
state	pointer
=	O
state	pointer
;	O
srv	pointer
->	O
pollfd	struct
->	O
events	short
|=	O
srv	pointer
->	O
state	pointer
;	O
srv	pointer
->	O
disconnect	pointer
=	O
dis	pointer
;	O
srv	pointer
->	O
peer	pointer
=	O
peer	pointer
;	O
if	O
(	O
peer	pointer
)	O
srv	pointer
->	O
peer	pointer
->	O
peer	pointer
=	O
srv	pointer
;	O
iobuf_reset	function
(	O
&	O
srv	pointer
->	O
buf	pointer
[	O
IN	int
]	O
)	O
;	O
iobuf_reset	function
(	O
&	O
srv	pointer
->	O
buf	pointer
[	O
OUT	int
]	O
)	O
;	O
srv	pointer
->	O
prev	pointer
=	O
server_tail	pointer
;	O
srv	pointer
->	O
next	pointer
=	O
NULL	O
;	O
if	O
(	O
server_tail	pointer
)	O
server_tail	pointer
->	O
next	pointer
=	O
srv	pointer
;	O
else	O
server_head	pointer
=	O
srv	pointer
;	O
server_tail	pointer
=	O
srv	pointer
;	O
return	O
srv	pointer
;	O
}	O
void	O
netcat_server_remove	function
(	O
netcat_server_t	struct
*	O
srv	pointer
)	O
{	O
netcat_server_t	struct
*	O
p	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
srv	pointer
->	O
next	pointer
)	O
!=	O
NULL	O
)	O
p	pointer
->	O
prev	pointer
=	O
srv	pointer
->	O
prev	pointer
;	O
else	O
server_tail	pointer
=	O
srv	pointer
->	O
prev	pointer
;	O
if	O
(	O
(	O
p	pointer
=	O
srv	pointer
->	O
prev	pointer
)	O
!=	O
NULL	O
)	O
p	pointer
->	O
next	pointer
=	O
srv	pointer
->	O
next	pointer
;	O
else	O
server_head	pointer
=	O
srv	pointer
->	O
next	pointer
;	O
if	O
(	O
srv	pointer
->	O
peer	pointer
)	O
srv	pointer
->	O
peer	pointer
->	O
peer	pointer
=	O
NULL	O
;	O
free	function
(	O
srv	pointer
)	O
;	O
}	O
static	O
inline	O
int	O
peer_is_state	function
(	O
netcat_server_t	struct
*	O
srv	pointer
,	O
int	O
state	pointer
)	O
{	O
return	O
srv	pointer
->	O
peer	pointer
&&	O
(	O
srv	pointer
->	O
peer	pointer
->	O
state	pointer
&	O
state	pointer
)	O
;	O
}	O
static	O
void	O
netcat_stream_disconnect	function
(	O
netcat_server_t	struct
*	O
srv	pointer
,	O
int	O
mask	int
)	O
{	O
srv	pointer
->	O
disconnect	pointer
(	O
srv	pointer
)	O
;	O
srv	pointer
->	O
state	pointer
&=	O
~	O
mask	int
;	O
srv	pointer
->	O
pollfd	struct
->	O
events	short
&=	O
~	O
mask	int
;	O
if	O
(	O
srv	pointer
->	O
pollfd	struct
->	O
events	short
==	O
0	int
)	O
srv	pointer
->	O
pollfd	struct
->	O
fd	int
=	O
-	O
1	int
;	O
}	O
ssize_t	long
netcat_stream_read	function
(	O
netcat_server_t	struct
*	O
srv	pointer
)	O
{	O
ssize_t	long
n	long
;	O
if	O
(	O
iobuf_avail_size	function
(	O
&	O
srv	pointer
->	O
buf	pointer
[	O
IN	int
]	O
)	O
)	O
{	O
n	long
=	O
iobuf_fill	function
(	O
&	O
srv	pointer
->	O
buf	pointer
[	O
IN	int
]	O
,	O
srv	pointer
->	O
pollfd	struct
->	O
fd	int
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
return	O
0	int
;	O
grecs_error	function
(	O
NULL	O
,	O
errno	O
,	O
"%s: read"	pointer
,	O
srv	pointer
->	O
id	pointer
)	O
;	O
netcat_stream_disconnect	function
(	O
srv	pointer
,	O
POLLIN	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
n	long
==	O
0	int
||	O
!	O
peer_is_state	function
(	O
srv	pointer
,	O
POLLOUT	int
)	O
)	O
{	O
netcat_stream_disconnect	function
(	O
srv	pointer
,	O
POLLIN	int
)	O
;	O
if	O
(	O
srv	pointer
->	O
peer	pointer
)	O
netcat_stream_disconnect	function
(	O
srv	pointer
->	O
peer	pointer
,	O
POLLOUT	int
)	O
;	O
return	O
0	int
;	O
}	O
else	O
srv	pointer
->	O
peer	pointer
->	O
pollfd	struct
->	O
events	short
|=	O
POLLOUT	int
;	O
}	O
else	O
{	O
srv	pointer
->	O
pollfd	struct
->	O
events	short
&=	O
~	O
POLLIN	int
;	O
n	long
=	O
0	int
;	O
}	O
return	O
n	long
;	O
}	O
ssize_t	long
netcat_stream_write	function
(	O
netcat_server_t	struct
*	O
srv	pointer
)	O
{	O
ssize_t	long
n	long
;	O
if	O
(	O
iobuf_data_size	function
(	O
&	O
srv	pointer
->	O
buf	pointer
[	O
OUT	int
]	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
peer_is_state	function
(	O
srv	pointer
,	O
POLLIN	int
)	O
)	O
{	O
netcat_stream_disconnect	function
(	O
srv	pointer
,	O
POLLOUT	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
iobuf_copy	function
(	O
&	O
srv	pointer
->	O
buf	pointer
[	O
OUT	int
]	O
,	O
&	O
srv	pointer
->	O
peer	pointer
->	O
buf	pointer
[	O
IN	int
]	O
)	O
==	O
0	int
)	O
{	O
srv	pointer
->	O
peer	pointer
->	O
pollfd	struct
->	O
events	short
|=	O
POLLIN	int
;	O
srv	pointer
->	O
pollfd	struct
->	O
events	short
&=	O
~	O
POLLOUT	int
;	O
return	O
0	int
;	O
}	O
}	O
n	long
=	O
iobuf_flush	function
(	O
&	O
srv	pointer
->	O
buf	pointer
[	O
OUT	int
]	O
,	O
srv	pointer
->	O
pollfd	struct
->	O
fd	int
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
return	O
0	int
;	O
grecs_error	function
(	O
NULL	O
,	O
errno	O
,	O
"%s: write"	pointer
,	O
srv	pointer
->	O
id	pointer
)	O
;	O
netcat_stream_disconnect	function
(	O
srv	pointer
,	O
POLLOUT	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
netcat_stream_disconnect	function
(	O
srv	pointer
,	O
POLLOUT	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
disconnect_in	function
(	O
netcat_server_t	struct
*	O
srv	pointer
)	O
{	O
return	O
shutdown	function
(	O
srv	pointer
->	O
pollfd	struct
->	O
fd	int
,	O
SHUT_RD	int
)	O
;	O
}	O
int	O
disconnect_out	function
(	O
netcat_server_t	struct
*	O
srv	pointer
)	O
{	O
return	O
shutdown	function
(	O
srv	pointer
->	O
pollfd	struct
->	O
fd	int
,	O
SHUT_WR	int
)	O
;	O
}	O
int	O
disconnect_stdin	function
(	O
netcat_server_t	struct
*	O
srv	pointer
)	O
{	O
return	O
close	pointer
(	O
srv	pointer
->	O
pollfd	struct
->	O
fd	int
)	O
;	O
}	O
int	O
disconnect_stdout	function
(	O
netcat_server_t	struct
*	O
srv	pointer
)	O
{	O
close	pointer
(	O
srv	pointer
->	O
pollfd	struct
->	O
fd	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
void	O
fd_write	function
(	O
int	O
fd	int
,	O
char	O
const	O
*	O
str	pointer
,	O
size_t	long
len	long
)	O
{	O
while	O
(	O
len	long
)	O
{	O
ssize_t	long
n	long
=	O
write	pointer
(	O
fd	int
,	O
str	pointer
,	O
len	long
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"socket write"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"zero write\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
len	long
-=	O
n	long
;	O
str	pointer
+=	O
n	long
;	O
}	O
}	O
void	O
fd_writeln	function
(	O
int	O
fd	int
,	O
char	O
const	O
*	O
str	pointer
)	O
{	O
fd_write	function
(	O
fd	int
,	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
)	O
;	O
fd_write	function
(	O
fd	int
,	O
"\r\n"	pointer
,	O
2	int
)	O
;	O
}	O
int	O
fd_getc	function
(	O
int	O
fd	int
)	O
{	O
char	O
c	long
;	O
ssize_t	long
n	long
=	O
read	pointer
(	O
fd	int
,	O
&	O
c	long
,	O
1	int
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"socket read"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
n	long
==	O
0	int
)	O
c	long
=	O
EOF	O
;	O
return	O
c	long
;	O
}	O
static	O
void	O
tcpmux_init	function
(	O
int	O
fd	int
,	O
char	O
const	O
*	O
service	pointer
)	O
{	O
int	O
c	long
;	O
fd_writeln	function
(	O
fd	int
,	O
service	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
service	pointer
,	O
"help"	pointer
)	O
==	O
0	int
)	O
{	O
while	O
(	O
(	O
c	long
=	O
fd_getc	function
(	O
fd	int
)	O
)	O
!=	O
EOF	O
)	O
{	O
fputc	function
(	O
c	long
,	O
stdout	pointer
)	O
;	O
}	O
close	pointer
(	O
fd	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
c	long
=	O
fd_getc	function
(	O
fd	int
)	O
;	O
if	O
(	O
c	long
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"socket read: unexpected eof\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
c	long
==	O
'+'	O
)	O
{	O
while	O
(	O
(	O
c	long
=	O
fd_getc	function
(	O
fd	int
)	O
)	O
!=	O
'\n'	O
)	O
{	O
if	O
(	O
c	long
==	O
EOF	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"socket read: unexpected eof\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"service rejected: "	pointer
)	O
;	O
do	O
{	O
if	O
(	O
c	long
!=	O
'\r'	O
)	O
fputc	function
(	O
c	long
,	O
stderr	pointer
)	O
;	O
}	O
while	O
(	O
(	O
c	long
=	O
fd_getc	function
(	O
fd	int
)	O
)	O
!=	O
0	int
&&	O
c	long
!=	O
'\n'	O
)	O
;	O
fputc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
static	O
int	O
netcat	function
(	O
char	O
const	O
*	O
urlstr	pointer
,	O
char	O
const	O
*	O
tcpmux_service	pointer
)	O
{	O
int	O
fd	int
;	O
struct	O
pies_url	struct
*	O
url	pointer
;	O
struct	O
pollfd	struct
pfd	pointer
[	O
3	int
]	O
;	O
int	O
nfd	int
=	O
sizeof	O
(	O
pfd	pointer
)	O
/	O
sizeof	O
(	O
pfd	pointer
[	O
0	int
]	O
)	O
;	O
netcat_server_t	struct
*	O
srvin	pointer
,	O
*	O
srvout	pointer
,	O
*	O
srv	pointer
;	O
if	O
(	O
pies_url_create	function
(	O
&	O
url	pointer
,	O
urlstr	pointer
)	O
)	O
{	O
perror	function
(	O
urlstr	pointer
)	O
;	O
return	O
64	int
;	O
}	O
fd	int
=	O
url_connect	function
(	O
url	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
1	int
;	O
if	O
(	O
tcpmux_service	pointer
)	O
tcpmux_init	function
(	O
fd	int
,	O
tcpmux_service	pointer
)	O
;	O
pfd	pointer
[	O
0	int
]	O
.	O
fd	int
=	O
0	int
;	O
pfd	pointer
[	O
0	int
]	O
.	O
events	short
=	O
0	int
;	O
srvin	pointer
=	O
netcat_server_create	function
(	O
"stdin"	pointer
,	O
&	O
pfd	pointer
[	O
0	int
]	O
,	O
POLLIN	int
,	O
disconnect_stdin	function
,	O
NULL	O
)	O
;	O
pfd	pointer
[	O
1	int
]	O
.	O
fd	int
=	O
1	int
;	O
pfd	pointer
[	O
1	int
]	O
.	O
events	short
=	O
0	int
;	O
srvout	pointer
=	O
netcat_server_create	function
(	O
"stdout"	pointer
,	O
&	O
pfd	pointer
[	O
1	int
]	O
,	O
POLLOUT	int
,	O
disconnect_stdout	function
,	O
NULL	O
)	O
;	O
pfd	pointer
[	O
2	int
]	O
.	O
fd	int
=	O
fd	int
;	O
pfd	pointer
[	O
2	int
]	O
.	O
events	short
=	O
0	int
;	O
netcat_server_create	function
(	O
"netread"	pointer
,	O
&	O
pfd	pointer
[	O
2	int
]	O
,	O
POLLIN	int
,	O
disconnect_in	function
,	O
srvout	pointer
)	O
;	O
netcat_server_create	function
(	O
"netwrite"	pointer
,	O
&	O
pfd	pointer
[	O
2	int
]	O
,	O
POLLOUT	int
,	O
disconnect_out	function
,	O
srvin	pointer
)	O
;	O
while	O
(	O
server_head	pointer
)	O
{	O
ssize_t	long
n	long
=	O
poll	function
(	O
pfd	pointer
,	O
nfd	int
,	O
-	O
1	int
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
grecs_error	function
(	O
NULL	O
,	O
errno	O
,	O
"poll"	pointer
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
srv	pointer
=	O
server_head	pointer
;	O
srv	pointer
;	O
)	O
{	O
netcat_server_t	struct
*	O
next	pointer
=	O
srv	pointer
->	O
next	pointer
;	O
if	O
(	O
(	O
srv	pointer
->	O
pollfd	struct
->	O
revents	short
&	O
srv	pointer
->	O
state	pointer
)	O
&	O
POLLIN	int
)	O
netcat_stream_read	function
(	O
srv	pointer
)	O
;	O
if	O
(	O
(	O
srv	pointer
->	O
pollfd	struct
->	O
revents	short
&	O
srv	pointer
->	O
state	pointer
)	O
&	O
POLLOUT	int
)	O
netcat_stream_write	function
(	O
srv	pointer
)	O
;	O
if	O
(	O
(	O
srv	pointer
->	O
state	pointer
&	O
POLLOUT	int
)	O
&&	O
(	O
srv	pointer
->	O
pollfd	struct
->	O
revents	short
&	O
POLLHUP	int
)	O
)	O
{	O
netcat_stream_disconnect	function
(	O
srv	pointer
,	O
srv	pointer
->	O
state	pointer
)	O
;	O
}	O
if	O
(	O
srv	pointer
->	O
state	pointer
==	O
0	int
||	O
srv	pointer
->	O
pollfd	struct
->	O
fd	int
==	O
-	O
1	int
)	O
{	O
netcat_server_t	struct
*	O
peer	pointer
=	O
srv	pointer
->	O
peer	pointer
;	O
if	O
(	O
peer	pointer
&&	O
peer	pointer
->	O
pollfd	struct
->	O
events	short
==	O
0	int
)	O
{	O
netcat_stream_disconnect	function
(	O
peer	pointer
,	O
peer	pointer
->	O
state	pointer
)	O
;	O
netcat_server_remove	function
(	O
peer	pointer
)	O
;	O
}	O
netcat_server_remove	function
(	O
srv	pointer
)	O
;	O
}	O
srv	pointer
=	O
next	pointer
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
redirect	function
(	O
int	O
sfd	int
,	O
char	O
const	O
*	O
name	pointer
)	O
{	O
int	O
fd	int
;	O
fd	int
=	O
open	function
(	O
name	pointer
,	O
sfd	int
?	O
(	O
O_CREAT	int
|	O
O_TRUNC	int
|	O
O_WRONLY	int
)	O
:	O
O_RDONLY	int
,	O
0644	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
name	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dup2	function
(	O
fd	int
,	O
sfd	int
)	O
==	O
-	O
1	int
)	O
{	O
perror	function
(	O
"dup2"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
static	O
void	O
usage	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"usage: nt [-i IFILE] [-o OFILE] [-t SERVICE] URL\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"Reads data from stdin (or IFILE) and sends them to URL.\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"Reads replies from URL and sends them to stdout (or OFILE).\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"\nOPTIONS\n\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"   -t SERVICE            use TCPMUX service\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"   -i IFILE              read input from IFILE\n"	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"   -o OFILE              write output to OFILE\n"	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
c	long
;	O
char	O
const	O
*	O
tcpmux_service	pointer
=	O
NULL	O
;	O
while	O
(	O
(	O
c	long
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:o:t:"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	long
)	O
{	O
case	O
'i'	O
:	O
redirect	function
(	O
0	int
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'o'	O
:	O
redirect	function
(	O
1	int
,	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
tcpmux_service	pointer
=	O
optarg	pointer
;	O
break	O
;	O
default	O
:	O
exit	function
(	O
64	int
)	O
;	O
}	O
}	O
argc	int
-=	O
optind	int
;	O
argv	pointer
+=	O
optind	int
;	O
if	O
(	O
argc	int
!=	O
1	int
)	O
{	O
usage	function
(	O
stderr	pointer
)	O
;	O
exit	function
(	O
64	int
)	O
;	O
}	O
return	O
netcat	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
tcpmux_service	pointer
)	O
;	O
}	O
