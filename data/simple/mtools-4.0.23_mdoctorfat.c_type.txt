typedef	O
struct	O
Arg_t	struct
{	O
char	O
*	O
target	pointer
;	O
MainParam_t	struct
mp	pointer
;	O
ClashHandling_t	struct
ch	char
;	O
Stream_t	struct
*	O
sourcefile	pointer
;	O
uint32_t	int
fat	int
;	O
int	O
markbad	int
;	O
int	O
setsize	int
;	O
unsigned	O
long	O
size	array
;	O
Fs_t	struct
*	O
Fs	pointer
;	O
}	O
Arg_t	struct
;	O
static	O
int	O
dos_doctorfat	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
Fs_t	struct
*	O
Fs	pointer
=	O
getFs	function
(	O
mp	pointer
->	O
File	pointer
)	O
;	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
mp	pointer
->	O
arg	pointer
;	O
if	O
(	O
!	O
arg	pointer
->	O
markbad	int
&&	O
entry	int
->	O
entry	int
!=	O
-	O
3	int
)	O
{	O
set_word	function
(	O
entry	int
->	O
dir	pointer
.	O
start	array
,	O
arg	pointer
->	O
fat	int
&	O
0xffff	int
)	O
;	O
set_word	function
(	O
entry	int
->	O
dir	pointer
.	O
startHi	array
,	O
arg	pointer
->	O
fat	int
>>	O
16	int
)	O
;	O
if	O
(	O
arg	pointer
->	O
setsize	int
)	O
set_dword	function
(	O
entry	int
->	O
dir	pointer
.	O
size	array
,	O
arg	pointer
->	O
size	array
)	O
;	O
dir_write	function
(	O
entry	int
)	O
;	O
}	O
arg	pointer
->	O
Fs	pointer
=	O
Fs	pointer
;	O
return	O
GOT_ONE	int
;	O
}	O
static	O
int	O
unix_doctorfat	function
(	O
MainParam_t	struct
*	O
mp	pointer
UNUSEDP	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"File does not reside on a Dos fs\n"	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Mtools version %s, dated %s\n"	pointer
,	O
mversion	pointer
,	O
mdate	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: [-b] %s file fat\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
ret	int
)	O
;	O
}	O
void	O
mdoctorfat	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
mtype	int
UNUSEDP	O
)	O
NORETURN	O
;	O
void	O
mdoctorfat	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
mtype	int
UNUSEDP	O
)	O
{	O
Arg_t	struct
arg	pointer
;	O
int	O
c	char
,	O
ret	int
;	O
unsigned	O
int	O
address	long
;	O
unsigned	O
int	O
begin	int
,	O
end	pointer
;	O
char	O
*	O
number	pointer
,	O
*	O
eptr	pointer
;	O
int	O
i	int
;	O
unsigned	O
int	O
offset	long
;	O
init_clash_handling	function
(	O
&	O
arg	pointer
.	O
ch	char
)	O
;	O
offset	long
=	O
0	int
;	O
arg	pointer
.	O
markbad	int
=	O
0	int
;	O
arg	pointer
.	O
setsize	int
=	O
0	int
;	O
if	O
(	O
helpFlag	function
(	O
argc	int
,	O
argv	pointer
)	O
)	O
usage	function
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	char
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:bo:s:h"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	char
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
arg	pointer
.	O
markbad	int
=	O
1	int
;	O
break	O
;	O
case	O
'o'	O
:	O
offset	long
=	O
strtoui	function
(	O
optarg	pointer
,	O
0	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
arg	pointer
.	O
setsize	int
=	O
1	int
;	O
arg	pointer
.	O
size	array
=	O
strtoul	function
(	O
optarg	pointer
,	O
0	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
0	int
)	O
;	O
case	O
'?'	O
:	O
usage	function
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
argc	int
-	O
optind	int
<	O
2	int
)	O
usage	function
(	O
1	int
)	O
;	O
init_mp	function
(	O
&	O
arg	pointer
.	O
mp	pointer
)	O
;	O
arg	pointer
.	O
mp	pointer
.	O
arg	pointer
=	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
;	O
arg	pointer
.	O
mp	pointer
.	O
callback	pointer
=	O
dos_doctorfat	function
;	O
arg	pointer
.	O
mp	pointer
.	O
unixcallback	pointer
=	O
unix_doctorfat	function
;	O
arg	pointer
.	O
mp	pointer
.	O
lookupflags	int
=	O
ACCEPT_PLAIN	int
|	O
ACCEPT_DIR	int
|	O
DO_OPEN	int
;	O
arg	pointer
.	O
mp	pointer
.	O
openflags	int
=	O
O_RDWR	int
;	O
arg	pointer
.	O
fat	int
=	O
strtoui	function
(	O
argv	pointer
[	O
optind	int
+	O
1	int
]	O
,	O
0	int
,	O
0	int
)	O
+	O
offset	long
;	O
ret	int
=	O
main_loop	function
(	O
&	O
arg	pointer
.	O
mp	pointer
,	O
argv	pointer
+	O
optind	int
,	O
1	int
)	O
;	O
if	O
(	O
ret	int
)	O
exit	function
(	O
ret	int
)	O
;	O
address	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
optind	int
+	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
unsigned	O
int	O
j	int
;	O
number	pointer
=	O
argv	pointer
[	O
i	int
]	O
;	O
if	O
(	O
*	O
number	pointer
==	O
'<'	O
)	O
{	O
number	pointer
++	O
;	O
}	O
begin	int
=	O
strtoui	function
(	O
number	pointer
,	O
&	O
eptr	pointer
,	O
0	int
)	O
;	O
if	O
(	O
eptr	pointer
&&	O
*	O
eptr	pointer
==	O
'-'	O
)	O
{	O
number	pointer
=	O
eptr	pointer
+	O
1	int
;	O
end	pointer
=	O
strtoui	function
(	O
number	pointer
,	O
&	O
eptr	pointer
,	O
0	int
)	O
;	O
}	O
else	O
{	O
end	pointer
=	O
begin	int
;	O
}	O
if	O
(	O
eptr	pointer
==	O
number	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Not a number: %s\n"	pointer
,	O
number	pointer
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
eptr	pointer
&&	O
*	O
eptr	pointer
==	O
'>'	O
)	O
{	O
eptr	pointer
++	O
;	O
}	O
if	O
(	O
eptr	pointer
&&	O
*	O
eptr	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Not a number: %s\n"	pointer
,	O
eptr	pointer
)	O
;	O
exit	function
(	O
-	O
1	int
)	O
;	O
}	O
for	O
(	O
j	int
=	O
begin	int
;	O
j	int
<=	O
end	pointer
;	O
j	int
++	O
)	O
{	O
if	O
(	O
arg	pointer
.	O
markbad	int
)	O
{	O
arg	pointer
.	O
Fs	pointer
->	O
fat_encode	pointer
(	O
arg	pointer
.	O
Fs	pointer
,	O
j	int
+	O
offset	long
,	O
arg	pointer
.	O
Fs	pointer
->	O
last_fat	int
^	O
6	int
^	O
8	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
address	long
)	O
{	O
arg	pointer
.	O
Fs	pointer
->	O
fat_encode	pointer
(	O
arg	pointer
.	O
Fs	pointer
,	O
address	long
,	O
j	int
+	O
offset	long
)	O
;	O
}	O
address	long
=	O
j	int
+	O
offset	long
;	O
}	O
}	O
}	O
if	O
(	O
address	long
&&	O
!	O
arg	pointer
.	O
markbad	int
)	O
{	O
arg	pointer
.	O
Fs	pointer
->	O
fat_encode	pointer
(	O
arg	pointer
.	O
Fs	pointer
,	O
address	long
,	O
arg	pointer
.	O
Fs	pointer
->	O
end_fat	int
)	O
;	O
}	O
exit	function
(	O
ret	int
)	O
;	O
}	O
