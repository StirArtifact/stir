static	O
char	O
*	O
default_sockaddr_text	pointer
=	O
"[not enogh memory]"	pointer
;	O
int	O
mu_sys_sockaddr_format	function
(	O
char	O
*	O
*	O
pbuf	pointer
,	O
enum	O
mu_sockaddr_format	enum
fmt	enum
,	O
const	O
struct	O
sockaddr	struct
*	O
sa	pointer
,	O
socklen_t	int
salen	int
)	O
{	O
int	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
switch	O
(	O
sa	pointer
->	O
sa_family	short
)	O
{	O
case	O
AF_INET	O
:	O
case	O
AF_INET6	O
:	O
{	O
char	O
host	array
[	O
NI_MAXHOST	int
]	O
;	O
char	O
srv	array
[	O
NI_MAXSERV	int
]	O
;	O
if	O
(	O
getnameinfo	function
(	O
sa	pointer
,	O
salen	int
,	O
host	array
,	O
sizeof	O
(	O
host	array
)	O
,	O
srv	array
,	O
sizeof	O
(	O
srv	array
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
==	O
0	int
)	O
{	O
switch	O
(	O
fmt	enum
)	O
{	O
case	O
mu_sockaddr_format_default	int
:	O
if	O
(	O
sa	pointer
->	O
sa_family	short
==	O
AF_INET6	O
)	O
rc	int
=	O
mu_asprintf	function
(	O
pbuf	pointer
,	O
"inet6://[%s]:%s"	pointer
,	O
host	array
,	O
srv	array
)	O
;	O
else	O
rc	int
=	O
mu_asprintf	function
(	O
pbuf	pointer
,	O
"inet://%s:%s"	pointer
,	O
host	array
,	O
srv	array
)	O
;	O
break	O
;	O
case	O
mu_sockaddr_format_ehlo	int
:	O
rc	int
=	O
mu_asprintf	function
(	O
pbuf	pointer
,	O
"[%s]"	pointer
,	O
host	array
)	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
fmt	enum
)	O
{	O
case	O
mu_sockaddr_format_default	int
:	O
rc	int
=	O
mu_asprintf	function
(	O
pbuf	pointer
,	O
"%s://[getnameinfo failed]"	pointer
,	O
sa	pointer
->	O
sa_family	short
==	O
AF_INET	O
?	O
"inet"	pointer
:	O
"inet6"	pointer
)	O
;	O
break	O
;	O
case	O
mu_sockaddr_format_ehlo	int
:	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
}	O
break	O
;	O
}	O
case	O
AF_UNIX	O
:	O
{	O
struct	O
sockaddr_un	struct
*	O
s_un	pointer
=	O
(	O
struct	O
sockaddr_un	struct
*	O
)	O
sa	pointer
;	O
switch	O
(	O
fmt	enum
)	O
{	O
case	O
mu_sockaddr_format_default	int
:	O
if	O
(	O
S_UN_NAME	O
(	O
s_un	pointer
,	O
salen	int
)	O
[	O
0	int
]	O
==	O
0	int
)	O
rc	int
=	O
mu_asprintf	function
(	O
pbuf	pointer
,	O
"unix://[anonymous socket]"	pointer
)	O
;	O
else	O
rc	int
=	O
mu_asprintf	function
(	O
pbuf	pointer
,	O
"unix://%s"	pointer
,	O
s_un	pointer
->	O
sun_path	array
)	O
;	O
break	O
;	O
case	O
mu_sockaddr_format_ehlo	int
:	O
rc	int
=	O
mu_asprintf	function
(	O
pbuf	pointer
,	O
"localhost"	pointer
)	O
;	O
}	O
break	O
;	O
}	O
default	O
:	O
rc	int
=	O
mu_asprintf	function
(	O
pbuf	pointer
,	O
"family:%d"	pointer
,	O
sa	pointer
->	O
sa_family	short
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
char	O
*	O
mu_sys_sockaddr_to_astr	function
(	O
const	O
struct	O
sockaddr	struct
*	O
sa	pointer
,	O
int	O
salen	int
)	O
{	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
mu_sys_sockaddr_format	function
(	O
&	O
buf	pointer
,	O
mu_sockaddr_format_default	int
,	O
sa	pointer
,	O
salen	int
)	O
;	O
return	O
buf	pointer
;	O
}	O
int	O
mu_sockaddr_format	enum
(	O
struct	O
mu_sockaddr	struct
*	O
sa	pointer
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
enum	O
mu_sockaddr_format	enum
fmt	enum
)	O
{	O
return	O
mu_sys_sockaddr_format	function
(	O
pbuf	pointer
,	O
fmt	enum
,	O
sa	pointer
->	O
addr	pointer
,	O
sa	pointer
->	O
addrlen	int
)	O
;	O
}	O
const	O
char	O
*	O
mu_sockaddr_str	function
(	O
struct	O
mu_sockaddr	struct
*	O
sa	pointer
)	O
{	O
if	O
(	O
!	O
sa	pointer
->	O
str	pointer
&&	O
mu_sockaddr_format	enum
(	O
sa	pointer
,	O
&	O
sa	pointer
->	O
str	pointer
,	O
mu_sockaddr_format_default	int
)	O
)	O
return	O
default_sockaddr_text	pointer
;	O
return	O
sa	pointer
->	O
str	pointer
;	O
}	O
