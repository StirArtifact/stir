static	O
hurd_ihash_key_t	long
ihash_hash	function
(	O
const	O
void	O
*	O
data	array
)	O
{	O
const	O
struct	O
fhandle	struct
*	O
handle	struct
=	O
(	O
struct	O
fhandle	struct
*	O
)	O
data	array
;	O
return	O
(	O
hurd_ihash_key_t	long
)	O
hurd_ihash_hash32	function
(	O
handle	struct
->	O
data	array
,	O
handle	struct
->	O
size	long
,	O
0	int
)	O
;	O
}	O
static	O
int	O
ihash_compare	function
(	O
const	O
void	O
*	O
key1	pointer
,	O
const	O
void	O
*	O
key2	pointer
)	O
{	O
const	O
struct	O
fhandle	struct
*	O
handle1	pointer
=	O
(	O
struct	O
fhandle	struct
*	O
)	O
key1	pointer
;	O
const	O
struct	O
fhandle	struct
*	O
handle2	pointer
=	O
(	O
struct	O
fhandle	struct
*	O
)	O
key2	pointer
;	O
return	O
handle1	pointer
->	O
size	long
==	O
handle2	pointer
->	O
size	long
&&	O
memcmp	O
(	O
handle1	pointer
->	O
data	array
,	O
handle2	pointer
->	O
data	array
,	O
handle1	pointer
->	O
size	long
)	O
==	O
0	int
;	O
}	O
static	O
struct	O
hurd_ihash	struct
nodehash	struct
=	O
HURD_IHASH_INITIALIZER_GKI	O
(	O
sizeof	O
(	O
struct	O
node	O
)	O
+	O
offsetof	O
(	O
struct	O
netnode	struct
,	O
slot	pointer
)	O
,	O
NULL	O
,	O
NULL	O
,	O
ihash_hash	function
,	O
ihash_compare	function
)	O
;	O
pthread_mutex_t	union
nodehash_ihash_lock	union
=	O
PTHREAD_MUTEX_INITIALIZER	O
;	O
void	O
lookup_fhandle	function
(	O
struct	O
fhandle	struct
*	O
handle	struct
,	O
struct	O
node	O
*	O
*	O
npp	pointer
)	O
{	O
struct	O
node	O
*	O
np	pointer
;	O
struct	O
netnode	struct
*	O
nn	pointer
;	O
pthread_mutex_lock	function
(	O
&	O
nodehash_ihash_lock	union
)	O
;	O
np	pointer
=	O
hurd_ihash_find	function
(	O
&	O
nodehash	struct
,	O
(	O
hurd_ihash_key_t	long
)	O
handle	struct
)	O
;	O
if	O
(	O
np	pointer
)	O
{	O
netfs_nref	function
(	O
np	pointer
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
nodehash_ihash_lock	union
)	O
;	O
pthread_mutex_lock	function
(	O
&	O
np	pointer
->	O
lock	O
)	O
;	O
*	O
npp	pointer
=	O
np	pointer
;	O
return	O
;	O
}	O
np	pointer
=	O
netfs_make_node_alloc	function
(	O
sizeof	O
(	O
struct	O
netnode	struct
)	O
)	O
;	O
assert	function
(	O
np	pointer
)	O
;	O
nn	pointer
=	O
netfs_node_netnode	function
(	O
np	pointer
)	O
;	O
nn	pointer
->	O
handle	struct
.	O
size	long
=	O
handle	struct
->	O
size	long
;	O
memcpy	O
(	O
nn	pointer
->	O
handle	struct
.	O
data	array
,	O
handle	struct
->	O
data	array
,	O
handle	struct
->	O
size	long
)	O
;	O
nn	pointer
->	O
stat_updated	long
=	O
0	int
;	O
nn	pointer
->	O
dtrans	enum
=	O
NOT_POSSIBLE	int
;	O
nn	pointer
->	O
dead_dir	pointer
=	O
0	int
;	O
nn	pointer
->	O
dead_name	pointer
=	O
0	int
;	O
hurd_ihash_add	function
(	O
&	O
nodehash	struct
,	O
(	O
hurd_ihash_key_t	long
)	O
&	O
nn	pointer
->	O
handle	struct
,	O
np	pointer
)	O
;	O
netfs_nref_light	function
(	O
np	pointer
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
nodehash_ihash_lock	union
)	O
;	O
pthread_mutex_lock	function
(	O
&	O
np	pointer
->	O
lock	O
)	O
;	O
*	O
npp	pointer
=	O
np	pointer
;	O
}	O
struct	O
fnd	struct
{	O
struct	O
node	O
*	O
dir	pointer
;	O
char	O
*	O
name	pointer
;	O
}	O
;	O
void	O
*	O
forked_node_delete	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
fnd	struct
*	O
args	pointer
=	O
arg	pointer
;	O
pthread_mutex_lock	function
(	O
&	O
args	pointer
->	O
dir	pointer
->	O
lock	O
)	O
;	O
netfs_attempt_unlink	function
(	O
(	O
struct	O
iouser	O
*	O
)	O
-	O
1	int
,	O
args	pointer
->	O
dir	pointer
,	O
args	pointer
->	O
name	pointer
)	O
;	O
netfs_nput	function
(	O
args	pointer
->	O
dir	pointer
)	O
;	O
free	function
(	O
args	pointer
->	O
name	pointer
)	O
;	O
free	function
(	O
args	pointer
)	O
;	O
return	O
0	int
;	O
}	O
;	O
void	O
netfs_node_norefs	function
(	O
struct	O
node	O
*	O
np	pointer
)	O
{	O
if	O
(	O
np	pointer
->	O
nn	pointer
->	O
dead_dir	pointer
)	O
{	O
struct	O
fnd	struct
*	O
args	pointer
;	O
pthread_t	long
thread	long
;	O
error_t	int
err	int
;	O
args	pointer
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
fnd	struct
)	O
)	O
;	O
assert	function
(	O
args	pointer
)	O
;	O
args	pointer
->	O
dir	pointer
=	O
np	pointer
->	O
nn	pointer
->	O
dead_dir	pointer
;	O
args	pointer
->	O
name	pointer
=	O
np	pointer
->	O
nn	pointer
->	O
dead_name	pointer
;	O
np	pointer
->	O
nn	pointer
->	O
dead_dir	pointer
=	O
0	int
;	O
np	pointer
->	O
nn	pointer
->	O
dead_name	pointer
=	O
0	int
;	O
err	int
=	O
pthread_create	function
(	O
&	O
thread	long
,	O
NULL	O
,	O
forked_node_delete	function
,	O
args	pointer
)	O
;	O
if	O
(	O
!	O
err	int
)	O
pthread_detach	function
(	O
thread	long
)	O
;	O
else	O
{	O
errno	O
=	O
err	int
;	O
perror	function
(	O
"pthread_create"	pointer
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
np	pointer
->	O
nn	pointer
->	O
dtrans	enum
==	O
SYMLINK	int
)	O
free	function
(	O
np	pointer
->	O
nn	pointer
->	O
transarg	union
.	O
name	pointer
)	O
;	O
free	function
(	O
np	pointer
)	O
;	O
}	O
}	O
void	O
netfs_try_dropping_softrefs	function
(	O
struct	O
node	O
*	O
np	pointer
)	O
{	O
pthread_mutex_lock	function
(	O
&	O
nodehash_ihash_lock	union
)	O
;	O
hurd_ihash_locp_remove	function
(	O
&	O
nodehash	struct
,	O
np	pointer
->	O
nn	pointer
->	O
slot	pointer
)	O
;	O
netfs_nrele_light	function
(	O
np	pointer
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
nodehash_ihash_lock	union
)	O
;	O
}	O
int	O
*	O
recache_handle	function
(	O
int	O
*	O
p	pointer
,	O
struct	O
node	O
*	O
np	pointer
)	O
{	O
size_t	long
len	long
;	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
len	long
=	O
NFS2_FHSIZE	int
;	O
else	O
{	O
len	long
=	O
ntohl	function
(	O
*	O
p	pointer
)	O
;	O
p	pointer
++	O
;	O
}	O
pthread_mutex_lock	function
(	O
&	O
nodehash_ihash_lock	union
)	O
;	O
hurd_ihash_locp_remove	function
(	O
&	O
nodehash	struct
,	O
np	pointer
->	O
nn	pointer
->	O
slot	pointer
)	O
;	O
np	pointer
->	O
nn	pointer
->	O
handle	struct
.	O
size	long
=	O
len	long
;	O
memcpy	O
(	O
np	pointer
->	O
nn	pointer
->	O
handle	struct
.	O
data	array
,	O
p	pointer
,	O
len	long
)	O
;	O
hurd_ihash_add	function
(	O
&	O
nodehash	struct
,	O
(	O
hurd_ihash_key_t	long
)	O
&	O
np	pointer
->	O
nn	pointer
->	O
handle	struct
,	O
np	pointer
)	O
;	O
pthread_mutex_unlock	function
(	O
&	O
nodehash_ihash_lock	union
)	O
;	O
return	O
p	pointer
+	O
len	long
/	O
sizeof	O
(	O
int	O
)	O
;	O
}	O
