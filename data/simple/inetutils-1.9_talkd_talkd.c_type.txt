void	O
talkd_init	function
(	O
void	O
)	O
;	O
void	O
talkd_run	function
(	O
int	O
fd	int
)	O
;	O
int	O
debug	int
;	O
unsigned	O
int	O
timeout	int
=	O
30	int
;	O
time_t	long
max_idle_time	long
=	O
120	int
;	O
time_t	long
max_request_ttl	long
=	O
MAX_LIFE	int
;	O
char	O
*	O
acl_file	pointer
;	O
char	O
*	O
hostname	pointer
;	O
const	O
char	O
args_doc	pointer
[	O
]	O
=	O
""	pointer
;	O
const	O
char	O
doc	pointer
[	O
]	O
=	O
"Talk daemon."	pointer
;	O
const	O
char	O
*	O
program_authors	array
[	O
]	O
=	O
{	O
"Sergey Poznyakoff"	pointer
,	O
NULL	O
}	O
;	O
static	O
struct	O
argp_option	struct
argp_options	array
[	O
]	O
=	O
{	O
{	O
"acl"	pointer
,	O
'a'	O
,	O
"FILE"	pointer
,	O
0	int
,	O
"read site-wide ACLs from FILE"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"debug"	pointer
,	O
'd'	O
,	O
NULL	O
,	O
0	int
,	O
"enable debugging"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"idle-timeout"	pointer
,	O
'i'	O
,	O
"SECONDS"	pointer
,	O
0	int
,	O
"set idle timeout value to SECONDS"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"request-ttl"	pointer
,	O
'r'	O
,	O
"SECONDS"	pointer
,	O
0	int
,	O
"set request time-to-live value to "	pointer
"SECONDS"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"timeout"	pointer
,	O
't'	O
,	O
"SECONDS"	pointer
,	O
0	int
,	O
"set timeout value to SECONDS"	pointer
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'a'	O
:	O
acl_file	pointer
=	O
arg	pointer
;	O
break	O
;	O
case	O
'd'	O
:	O
debug	int
++	O
;	O
break	O
;	O
case	O
't'	O
:	O
timeout	int
=	O
strtoul	function
(	O
arg	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
max_idle_time	long
=	O
strtoul	function
(	O
arg	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
max_request_ttl	long
=	O
strtoul	function
(	O
arg	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
argp_options	array
,	O
parse_opt	function
,	O
args_doc	pointer
,	O
doc	pointer
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"talkd"	pointer
,	O
program_authors	array
)	O
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
read_acl	function
(	O
acl_file	pointer
)	O
;	O
talkd_init	function
(	O
)	O
;	O
talkd_run	function
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
talkd_init	function
(	O
void	O
)	O
{	O
openlog	function
(	O
"talkd"	pointer
,	O
LOG_PID	int
,	O
LOG_FACILITY	O
)	O
;	O
hostname	pointer
=	O
localhost	function
(	O
)	O
;	O
if	O
(	O
!	O
hostname	pointer
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"can't determine my hostname: %m"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
time_t	long
last_msg_time	long
;	O
static	O
void	O
alarm_handler	function
(	O
int	O
err	long
_GL_UNUSED_PARAMETER	O
)	O
{	O
if	O
(	O
(	O
time	struct
(	O
NULL	O
)	O
-	O
last_msg_time	long
)	O
>=	O
max_idle_time	long
)	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
alarm	function
(	O
timeout	int
)	O
;	O
}	O
void	O
talkd_run	function
(	O
int	O
fd	int
)	O
{	O
signal	function
(	O
SIGALRM	int
,	O
alarm_handler	function
)	O
;	O
alarm	function
(	O
timeout	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
rc	int
;	O
struct	O
sockaddr_in	struct
sa_in	pointer
;	O
CTL_MSG	struct
msg	pointer
;	O
CTL_RESPONSE	struct
resp	struct
;	O
socklen_t	int
len	int
;	O
len	int
=	O
sizeof	O
sa_in	pointer
;	O
rc	int
=	O
recvfrom	function
(	O
fd	int
,	O
&	O
msg	pointer
,	O
sizeof	O
msg	pointer
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
sa_in	pointer
,	O
&	O
len	int
)	O
;	O
if	O
(	O
rc	int
!=	O
sizeof	O
msg	pointer
)	O
{	O
if	O
(	O
rc	int
<	O
0	int
&&	O
errno	O
!=	O
EINTR	int
)	O
syslog	function
(	O
LOG_WARNING	int
,	O
"recvfrom: %m"	pointer
)	O
;	O
continue	O
;	O
}	O
last_msg_time	long
=	O
time	struct
(	O
NULL	O
)	O
;	O
if	O
(	O
process_request	function
(	O
&	O
msg	pointer
,	O
&	O
sa_in	pointer
,	O
&	O
resp	struct
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
sendto	function
(	O
fd	int
,	O
&	O
resp	struct
,	O
sizeof	O
resp	struct
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
msg	pointer
.	O
ctl_addr	struct
,	O
sizeof	O
(	O
msg	pointer
.	O
ctl_addr	struct
)	O
)	O
;	O
if	O
(	O
rc	int
!=	O
sizeof	O
resp	struct
)	O
syslog	function
(	O
LOG_WARNING	int
,	O
"sendto: %m"	pointer
)	O
;	O
}	O
}	O
}	O
