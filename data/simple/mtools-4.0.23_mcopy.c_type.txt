static	O
void	O
set_mtime	function
(	O
const	O
char	O
*	O
target	pointer
,	O
time_t	long
mtime	long
)	O
{	O
if	O
(	O
target	pointer
&&	O
strcmp	function
(	O
target	pointer
,	O
"-"	pointer
)	O
&&	O
mtime	long
!=	O
0L	int
)	O
{	O
struct	O
timeval	struct
tv	array
[	O
2	int
]	O
;	O
tv	array
[	O
0	int
]	O
.	O
tv_sec	long
=	O
mtime	long
;	O
tv	array
[	O
0	int
]	O
.	O
tv_usec	long
=	O
0	int
;	O
tv	array
[	O
1	int
]	O
.	O
tv_sec	long
=	O
mtime	long
;	O
tv	array
[	O
1	int
]	O
.	O
tv_usec	long
=	O
0	int
;	O
utimes	function
(	O
(	O
char	O
*	O
)	O
target	pointer
,	O
tv	array
)	O
;	O
}	O
return	O
;	O
}	O
typedef	O
struct	O
Arg_t	struct
{	O
int	O
recursive	int
;	O
int	O
preserveAttributes	int
;	O
int	O
preserveTime	int
;	O
unsigned	O
char	O
attr	char
;	O
char	O
*	O
path	pointer
;	O
int	O
textmode	int
;	O
int	O
needfilter	int
;	O
int	O
nowarn	int
;	O
int	O
verbose	int
;	O
int	O
type	enum
;	O
int	O
convertCharset	int
;	O
MainParam_t	struct
mp	pointer
;	O
ClashHandling_t	struct
ch	char
;	O
int	O
noClobber	int
;	O
}	O
Arg_t	struct
;	O
static	O
int	O
_unix_write	function
(	O
MainParam_t	struct
*	O
mp	pointer
,	O
int	O
needfilter	int
,	O
const	O
char	O
*	O
unixFile	pointer
)	O
;	O
static	O
int	O
unix_write	function
(	O
MainParam_t	struct
*	O
mp	pointer
,	O
int	O
needfilter	int
)	O
{	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
mp	pointer
->	O
arg	pointer
;	O
if	O
(	O
arg	pointer
->	O
type	enum
)	O
return	O
_unix_write	function
(	O
mp	pointer
,	O
needfilter	int
,	O
"-"	pointer
)	O
;	O
else	O
{	O
char	O
*	O
unixFile	pointer
=	O
mpBuildUnixFilename	function
(	O
mp	pointer
)	O
;	O
int	O
ret	int
;	O
if	O
(	O
!	O
unixFile	pointer
)	O
{	O
printOom	function
(	O
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
ret	int
=	O
_unix_write	function
(	O
mp	pointer
,	O
needfilter	int
,	O
unixFile	pointer
)	O
;	O
free	function
(	O
unixFile	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
}	O
static	O
int	O
_unix_write	function
(	O
MainParam_t	struct
*	O
mp	pointer
,	O
int	O
needfilter	int
,	O
const	O
char	O
*	O
unixFile	pointer
)	O
{	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
mp	pointer
->	O
arg	pointer
;	O
time_t	long
mtime	long
;	O
Stream_t	struct
*	O
File	pointer
=	O
mp	pointer
->	O
File	pointer
;	O
Stream_t	struct
*	O
Target	pointer
,	O
*	O
Source	pointer
;	O
struct	O
MT_STAT	O
stbuf	struct
;	O
int	O
ret	int
;	O
char	O
errmsg	pointer
[	O
80	int
]	O
;	O
File	pointer
->	O
Class	pointer
->	O
get_data	pointer
(	O
File	pointer
,	O
&	O
mtime	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
->	O
preserveTime	int
)	O
mtime	long
=	O
0L	int
;	O
if	O
(	O
!	O
arg	pointer
->	O
type	enum
)	O
{	O
if	O
(	O
!	O
arg	pointer
->	O
nowarn	int
&&	O
!	O
access	function
(	O
unixFile	pointer
,	O
0	int
)	O
)	O
{	O
if	O
(	O
arg	pointer
->	O
noClobber	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"File \"%s\" exists. To overwrite, try again, and explicitly specify target directory\n"	pointer
,	O
unixFile	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
if	O
(	O
!	O
MT_STAT	O
(	O
unixFile	pointer
,	O
&	O
stbuf	struct
)	O
)	O
{	O
struct	O
MT_STAT	O
srcStbuf	struct
;	O
int	O
sFd	int
;	O
if	O
(	O
!	O
S_ISREG	O
(	O
stbuf	struct
.	O
st_mode	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"\"%s\" is not a regular file\n"	pointer
,	O
unixFile	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
sFd	int
=	O
get_fd	function
(	O
File	pointer
)	O
;	O
if	O
(	O
sFd	int
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Not ok Unix file ==> good\n"	pointer
)	O
;	O
}	O
if	O
(	O
(	O
!	O
MT_FSTAT	O
(	O
sFd	int
,	O
&	O
srcStbuf	struct
)	O
)	O
&&	O
stbuf	struct
.	O
st_dev	long
==	O
srcStbuf	struct
.	O
st_dev	long
&&	O
stbuf	struct
.	O
st_ino	long
==	O
srcStbuf	struct
.	O
st_ino	long
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Attempt to copy file on itself\n"	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
}	O
if	O
(	O
ask_confirmation	function
(	O
"File \"%s\" exists, overwrite (y/n) ? "	pointer
,	O
unixFile	pointer
)	O
)	O
{	O
return	O
ERROR_ONE	int
;	O
}	O
}	O
}	O
if	O
(	O
!	O
arg	pointer
->	O
type	enum
&&	O
arg	pointer
->	O
verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Copying "	pointer
)	O
;	O
mpPrintFilename	function
(	O
stderr	pointer
,	O
mp	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
got_signal	int
)	O
{	O
return	O
ERROR_ONE	int
;	O
}	O
if	O
(	O
(	O
Target	pointer
=	O
SimpleFileOpen	function
(	O
0	int
,	O
0	int
,	O
unixFile	pointer
,	O
O_WRONLY	int
|	O
O_CREAT	int
|	O
O_TRUNC	int
,	O
errmsg	pointer
,	O
0	int
,	O
0	int
,	O
0	int
)	O
)	O
)	O
{	O
ret	int
=	O
0	int
;	O
if	O
(	O
needfilter	int
&&	O
arg	pointer
->	O
textmode	int
)	O
{	O
Source	pointer
=	O
open_filter	function
(	O
COPY	O
(	O
File	pointer
)	O
,	O
arg	pointer
->	O
convertCharset	int
)	O
;	O
if	O
(	O
!	O
Source	pointer
)	O
ret	int
=	O
-	O
1	int
;	O
}	O
else	O
Source	pointer
=	O
COPY	O
(	O
File	pointer
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
ret	int
=	O
copyfile	function
(	O
Source	pointer
,	O
Target	pointer
)	O
;	O
FREE	O
(	O
&	O
Source	pointer
)	O
;	O
FREE	O
(	O
&	O
Target	pointer
)	O
;	O
if	O
(	O
ret	int
<=	O
-	O
1	int
)	O
{	O
if	O
(	O
!	O
arg	pointer
->	O
type	enum
)	O
unlink	function
(	O
unixFile	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
if	O
(	O
!	O
arg	pointer
->	O
type	enum
)	O
set_mtime	function
(	O
unixFile	pointer
,	O
mtime	long
)	O
;	O
return	O
GOT_ONE	int
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
errmsg	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
}	O
static	O
int	O
makeUnixDir	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
if	O
(	O
!	O
mkdir	function
(	O
filename	pointer
,	O
0777	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
errno	O
==	O
EEXIST	int
)	O
{	O
struct	O
MT_STAT	O
buf	pointer
;	O
if	O
(	O
MT_STAT	O
(	O
filename	pointer
,	O
&	O
buf	pointer
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
S_ISDIR	O
(	O
buf	pointer
.	O
st_mode	int
)	O
)	O
return	O
0	int
;	O
errno	O
=	O
ENOTDIR	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
unix_copydir	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
mp	pointer
->	O
arg	pointer
;	O
time_t	long
mtime	long
;	O
Stream_t	struct
*	O
File	pointer
=	O
mp	pointer
->	O
File	pointer
;	O
int	O
ret	int
;	O
char	O
*	O
unixFile	pointer
;	O
if	O
(	O
!	O
arg	pointer
->	O
recursive	int
&&	O
mp	pointer
->	O
basenameHasWildcard	int
)	O
return	O
0	int
;	O
File	pointer
->	O
Class	pointer
->	O
get_data	pointer
(	O
File	pointer
,	O
&	O
mtime	long
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
arg	pointer
->	O
preserveTime	int
)	O
mtime	long
=	O
0L	int
;	O
if	O
(	O
!	O
arg	pointer
->	O
type	enum
&&	O
arg	pointer
->	O
verbose	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Copying "	pointer
)	O
;	O
fprintPwd	function
(	O
stderr	pointer
,	O
entry	int
,	O
0	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
if	O
(	O
got_signal	int
)	O
return	O
ERROR_ONE	int
;	O
unixFile	pointer
=	O
mpBuildUnixFilename	function
(	O
mp	pointer
)	O
;	O
if	O
(	O
!	O
unixFile	pointer
)	O
{	O
printOom	function
(	O
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
if	O
(	O
arg	pointer
->	O
type	enum
||	O
!	O
*	O
mpPickTargetName	function
(	O
mp	pointer
)	O
||	O
!	O
makeUnixDir	function
(	O
unixFile	pointer
)	O
)	O
{	O
Arg_t	struct
newArg	struct
;	O
newArg	struct
=	O
*	O
arg	pointer
;	O
newArg	struct
.	O
mp	pointer
.	O
arg	pointer
=	O
(	O
void	O
*	O
)	O
&	O
newArg	struct
;	O
newArg	struct
.	O
mp	pointer
.	O
unixTarget	pointer
=	O
unixFile	pointer
;	O
newArg	struct
.	O
mp	pointer
.	O
targetName	pointer
=	O
0	int
;	O
newArg	struct
.	O
mp	pointer
.	O
basenameHasWildcard	int
=	O
1	int
;	O
ret	int
=	O
mp	pointer
->	O
loop	pointer
(	O
File	pointer
,	O
&	O
newArg	struct
.	O
mp	pointer
,	O
"*"	pointer
)	O
;	O
set_mtime	function
(	O
unixFile	pointer
,	O
mtime	long
)	O
;	O
free	function
(	O
unixFile	pointer
)	O
;	O
return	O
ret	int
|	O
GOT_ONE	int
;	O
}	O
else	O
{	O
perror	function
(	O
"mkdir"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Failure to make directory %s\n"	pointer
,	O
unixFile	pointer
)	O
;	O
free	function
(	O
unixFile	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
}	O
static	O
int	O
dos_to_unix	function
(	O
direntry_t	struct
*	O
entry	int
UNUSEDP	O
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
return	O
unix_write	function
(	O
mp	pointer
,	O
1	int
)	O
;	O
}	O
static	O
int	O
unix_to_unix	function
(	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
return	O
unix_write	function
(	O
mp	pointer
,	O
0	int
)	O
;	O
}	O
static	O
int	O
directory_dos_to_unix	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
return	O
unix_copydir	function
(	O
entry	int
,	O
mp	pointer
)	O
;	O
}	O
static	O
int	O
writeit	function
(	O
struct	O
dos_name_t	struct
*	O
dosname	pointer
,	O
char	O
*	O
longname	pointer
,	O
void	O
*	O
arg0	pointer
,	O
direntry_t	struct
*	O
entry	int
)	O
{	O
Stream_t	struct
*	O
Target	pointer
;	O
time_t	long
now	pointer
;	O
int	O
type	enum
,	O
fat	int
,	O
ret	int
;	O
time_t	long
date	array
;	O
mt_size_t	long
filesize	long
,	O
newsize	long
;	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
arg0	pointer
;	O
if	O
(	O
arg	pointer
->	O
mp	pointer
.	O
File	pointer
->	O
Class	pointer
->	O
get_data	pointer
(	O
arg	pointer
->	O
mp	pointer
.	O
File	pointer
,	O
&	O
date	array
,	O
&	O
filesize	long
,	O
&	O
type	enum
,	O
0	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Can't stat source file\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
fileTooBig	function
(	O
filesize	long
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"File \"%s\" too big\n"	pointer
,	O
longname	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
type	enum
)	O
{	O
if	O
(	O
arg	pointer
->	O
verbose	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"\"%s\" is a directory\n"	pointer
,	O
longname	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
arg	pointer
->	O
verbose	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Copying %s\n"	pointer
,	O
longname	pointer
)	O
;	O
if	O
(	O
got_signal	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
getfreeMinBytes	function
(	O
arg	pointer
->	O
mp	pointer
.	O
targetDir	pointer
,	O
filesize	long
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
arg	pointer
->	O
preserveTime	int
)	O
now	pointer
=	O
date	array
;	O
else	O
getTimeNow	function
(	O
&	O
now	pointer
)	O
;	O
mk_entry	function
(	O
dosname	pointer
,	O
arg	pointer
->	O
attr	char
,	O
1	int
,	O
0	int
,	O
now	pointer
,	O
&	O
entry	int
->	O
dir	pointer
)	O
;	O
Target	pointer
=	O
OpenFileByDirentry	function
(	O
entry	int
)	O
;	O
if	O
(	O
!	O
Target	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Could not open Target\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
arg	pointer
->	O
needfilter	int
&	O
arg	pointer
->	O
textmode	int
)	O
Target	pointer
=	O
open_filter	function
(	O
Target	pointer
,	O
arg	pointer
->	O
convertCharset	int
)	O
;	O
ret	int
=	O
copyfile	function
(	O
arg	pointer
->	O
mp	pointer
.	O
File	pointer
,	O
Target	pointer
)	O
;	O
GET_DATA	O
(	O
Target	pointer
,	O
0	int
,	O
&	O
newsize	long
,	O
0	int
,	O
&	O
fat	int
)	O
;	O
FREE	O
(	O
&	O
Target	pointer
)	O
;	O
if	O
(	O
arg	pointer
->	O
needfilter	int
&	O
arg	pointer
->	O
textmode	int
)	O
newsize	long
++	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
fat_free	function
(	O
arg	pointer
->	O
mp	pointer
.	O
targetDir	pointer
,	O
fat	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
mk_entry	function
(	O
dosname	pointer
,	O
arg	pointer
->	O
attr	char
,	O
fat	int
,	O
truncBytes32	function
(	O
newsize	long
)	O
,	O
now	pointer
,	O
&	O
entry	int
->	O
dir	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
static	O
int	O
dos_write	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
,	O
int	O
needfilter	int
)	O
{	O
int	O
result	int
;	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
(	O
mp	pointer
->	O
arg	pointer
)	O
;	O
const	O
char	O
*	O
targetName	pointer
=	O
mpPickTargetName	function
(	O
mp	pointer
)	O
;	O
if	O
(	O
entry	int
&&	O
arg	pointer
->	O
preserveAttributes	int
)	O
arg	pointer
->	O
attr	char
=	O
entry	int
->	O
dir	pointer
.	O
attr	char
;	O
else	O
arg	pointer
->	O
attr	char
=	O
ATTR_ARCHIVE	int
;	O
arg	pointer
->	O
needfilter	int
=	O
needfilter	int
;	O
if	O
(	O
entry	int
&&	O
mp	pointer
->	O
targetDir	pointer
==	O
entry	int
->	O
Dir	pointer
)	O
{	O
arg	pointer
->	O
ch	char
.	O
ignore_entry	int
=	O
-	O
1	int
;	O
arg	pointer
->	O
ch	char
.	O
source	short
=	O
entry	int
->	O
entry	int
;	O
}	O
else	O
{	O
arg	pointer
->	O
ch	char
.	O
ignore_entry	int
=	O
-	O
1	int
;	O
arg	pointer
->	O
ch	char
.	O
source	short
=	O
-	O
2	int
;	O
}	O
result	int
=	O
mwrite_one	function
(	O
mp	pointer
->	O
targetDir	pointer
,	O
targetName	pointer
,	O
0	int
,	O
writeit	function
,	O
(	O
void	O
*	O
)	O
arg	pointer
,	O
&	O
arg	pointer
->	O
ch	char
)	O
;	O
if	O
(	O
result	int
==	O
1	int
)	O
return	O
GOT_ONE	int
;	O
else	O
return	O
ERROR_ONE	int
;	O
}	O
static	O
Stream_t	struct
*	O
subDir	function
(	O
Stream_t	struct
*	O
parent	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
direntry_t	struct
entry	int
;	O
initializeDirentry	function
(	O
&	O
entry	int
,	O
parent	pointer
)	O
;	O
switch	O
(	O
vfat_lookup	function
(	O
&	O
entry	int
,	O
filename	pointer
,	O
-	O
1	int
,	O
ACCEPT_DIR	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
)	O
{	O
case	O
0	int
:	O
return	O
OpenFileByDirentry	function
(	O
&	O
entry	int
)	O
;	O
case	O
-	O
1	int
:	O
return	O
NULL	O
;	O
default	O
:	O
return	O
NULL	O
;	O
}	O
}	O
static	O
int	O
dos_copydir	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
Arg_t	struct
*	O
arg	pointer
=	O
(	O
Arg_t	struct
*	O
)	O
(	O
mp	pointer
->	O
arg	pointer
)	O
;	O
Arg_t	struct
newArg	struct
;	O
time_t	long
now	pointer
;	O
time_t	long
date	array
;	O
int	O
ret	int
;	O
const	O
char	O
*	O
targetName	pointer
=	O
mpPickTargetName	function
(	O
mp	pointer
)	O
;	O
if	O
(	O
!	O
arg	pointer
->	O
recursive	int
&&	O
mp	pointer
->	O
basenameHasWildcard	int
)	O
return	O
0	int
;	O
if	O
(	O
entry	int
&&	O
isSubdirOf	function
(	O
mp	pointer
->	O
targetDir	pointer
,	O
mp	pointer
->	O
File	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cannot recursively copy directory "	pointer
)	O
;	O
fprintPwd	function
(	O
stderr	pointer
,	O
entry	int
,	O
0	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
" into one of its own subdirectories "	pointer
)	O
;	O
fprintPwd	function
(	O
stderr	pointer
,	O
getDirentry	function
(	O
mp	pointer
->	O
targetDir	pointer
)	O
,	O
0	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
if	O
(	O
arg	pointer
->	O
mp	pointer
.	O
File	pointer
->	O
Class	pointer
->	O
get_data	pointer
(	O
arg	pointer
->	O
mp	pointer
.	O
File	pointer
,	O
&	O
date	array
,	O
0	int
,	O
0	int
,	O
0	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Can't stat source file\n"	pointer
)	O
;	O
return	O
ERROR_ONE	int
;	O
}	O
if	O
(	O
!	O
arg	pointer
->	O
type	enum
&&	O
arg	pointer
->	O
verbose	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Copying %s\n"	pointer
,	O
mpGetBasename	function
(	O
mp	pointer
)	O
)	O
;	O
if	O
(	O
entry	int
&&	O
arg	pointer
->	O
preserveAttributes	int
)	O
arg	pointer
->	O
attr	char
=	O
entry	int
->	O
dir	pointer
.	O
attr	char
;	O
else	O
arg	pointer
->	O
attr	char
=	O
0	int
;	O
if	O
(	O
entry	int
&&	O
(	O
mp	pointer
->	O
targetDir	pointer
==	O
entry	int
->	O
Dir	pointer
)	O
)	O
{	O
arg	pointer
->	O
ch	char
.	O
ignore_entry	int
=	O
-	O
1	int
;	O
arg	pointer
->	O
ch	char
.	O
source	short
=	O
entry	int
->	O
entry	int
;	O
}	O
else	O
{	O
arg	pointer
->	O
ch	char
.	O
ignore_entry	int
=	O
-	O
1	int
;	O
arg	pointer
->	O
ch	char
.	O
source	short
=	O
-	O
2	int
;	O
}	O
if	O
(	O
arg	pointer
->	O
preserveTime	int
)	O
now	pointer
=	O
date	array
;	O
else	O
getTimeNow	function
(	O
&	O
now	pointer
)	O
;	O
newArg	struct
=	O
*	O
arg	pointer
;	O
newArg	struct
.	O
mp	pointer
.	O
arg	pointer
=	O
&	O
newArg	struct
;	O
newArg	struct
.	O
mp	pointer
.	O
targetName	pointer
=	O
0	int
;	O
newArg	struct
.	O
mp	pointer
.	O
basenameHasWildcard	int
=	O
1	int
;	O
if	O
(	O
*	O
targetName	pointer
)	O
{	O
newArg	struct
.	O
mp	pointer
.	O
targetDir	pointer
=	O
subDir	function
(	O
mp	pointer
->	O
targetDir	pointer
,	O
targetName	pointer
)	O
;	O
if	O
(	O
!	O
newArg	struct
.	O
mp	pointer
.	O
targetDir	pointer
)	O
newArg	struct
.	O
mp	pointer
.	O
targetDir	pointer
=	O
createDir	function
(	O
mp	pointer
->	O
targetDir	pointer
,	O
targetName	pointer
,	O
&	O
arg	pointer
->	O
ch	char
,	O
arg	pointer
->	O
attr	char
,	O
now	pointer
)	O
;	O
}	O
else	O
newArg	struct
.	O
mp	pointer
.	O
targetDir	pointer
=	O
mp	pointer
->	O
targetDir	pointer
;	O
if	O
(	O
!	O
newArg	struct
.	O
mp	pointer
.	O
targetDir	pointer
)	O
return	O
ERROR_ONE	int
;	O
ret	int
=	O
mp	pointer
->	O
loop	pointer
(	O
mp	pointer
->	O
File	pointer
,	O
&	O
newArg	struct
.	O
mp	pointer
,	O
"*"	pointer
)	O
;	O
if	O
(	O
*	O
targetName	pointer
)	O
FREE	O
(	O
&	O
newArg	struct
.	O
mp	pointer
.	O
targetDir	pointer
)	O
;	O
return	O
ret	int
|	O
GOT_ONE	int
;	O
}	O
static	O
int	O
dos_to_dos	function
(	O
direntry_t	struct
*	O
entry	int
,	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
return	O
dos_write	function
(	O
entry	int
,	O
mp	pointer
,	O
0	int
)	O
;	O
}	O
static	O
int	O
unix_to_dos	function
(	O
MainParam_t	struct
*	O
mp	pointer
)	O
{	O
return	O
dos_write	function
(	O
0	int
,	O
mp	pointer
,	O
1	int
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	function
(	O
int	O
ret	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Mtools version %s, dated %s\n"	pointer
,	O
mversion	pointer
,	O
mdate	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s [-spatnmQVBT] [-D clash_option] sourcefile targetfile\n"	pointer
,	O
progname	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"       %s [-spatnmQVBT] [-D clash_option] sourcefile [sourcefiles...] targetdirectory\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
ret	int
)	O
;	O
}	O
void	O
mcopy	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
mtype	int
)	O
NORETURN	O
;	O
void	O
mcopy	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
mtype	int
)	O
{	O
Arg_t	struct
arg	pointer
;	O
int	O
c	char
,	O
fastquit	int
;	O
init_clash_handling	function
(	O
&	O
arg	pointer
.	O
ch	char
)	O
;	O
arg	pointer
.	O
recursive	int
=	O
0	int
;	O
arg	pointer
.	O
preserveTime	int
=	O
0	int
;	O
arg	pointer
.	O
preserveAttributes	int
=	O
0	int
;	O
arg	pointer
.	O
nowarn	int
=	O
0	int
;	O
arg	pointer
.	O
textmode	int
=	O
0	int
;	O
arg	pointer
.	O
verbose	int
=	O
0	int
;	O
arg	pointer
.	O
convertCharset	int
=	O
0	int
;	O
arg	pointer
.	O
type	enum
=	O
mtype	int
;	O
fastquit	int
=	O
0	int
;	O
if	O
(	O
helpFlag	function
(	O
argc	int
,	O
argv	pointer
)	O
)	O
usage	function
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	char
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:abB/sptTnmvQD:oh"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	char
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
case	O
'/'	O
:	O
arg	pointer
.	O
recursive	int
=	O
1	int
;	O
break	O
;	O
case	O
'p'	O
:	O
arg	pointer
.	O
preserveAttributes	int
=	O
1	int
;	O
break	O
;	O
case	O
'T'	O
:	O
arg	pointer
.	O
convertCharset	int
=	O
1	int
;	O
case	O
'a'	O
:	O
case	O
't'	O
:	O
arg	pointer
.	O
textmode	int
=	O
1	int
;	O
break	O
;	O
case	O
'n'	O
:	O
arg	pointer
.	O
nowarn	int
=	O
1	int
;	O
break	O
;	O
case	O
'm'	O
:	O
arg	pointer
.	O
preserveTime	int
=	O
1	int
;	O
break	O
;	O
case	O
'v'	O
:	O
arg	pointer
.	O
verbose	int
=	O
1	int
;	O
break	O
;	O
case	O
'Q'	O
:	O
fastquit	int
=	O
1	int
;	O
break	O
;	O
case	O
'B'	O
:	O
case	O
'b'	O
:	O
batchmode	int
=	O
1	int
;	O
break	O
;	O
case	O
'o'	O
:	O
handle_clash_options	function
(	O
&	O
arg	pointer
.	O
ch	char
,	O
c	char
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
if	O
(	O
handle_clash_options	function
(	O
&	O
arg	pointer
.	O
ch	char
,	O
*	O
optarg	pointer
)	O
)	O
usage	function
(	O
1	int
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	function
(	O
0	int
)	O
;	O
case	O
'?'	O
:	O
usage	function
(	O
1	int
)	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
argc	int
-	O
optind	int
<	O
1	int
)	O
usage	function
(	O
1	int
)	O
;	O
init_mp	function
(	O
&	O
arg	pointer
.	O
mp	pointer
)	O
;	O
arg	pointer
.	O
mp	pointer
.	O
lookupflags	int
=	O
ACCEPT_PLAIN	int
|	O
ACCEPT_DIR	int
|	O
DO_OPEN	int
|	O
NO_DOTS	int
;	O
arg	pointer
.	O
mp	pointer
.	O
fast_quit	int
=	O
fastquit	int
;	O
arg	pointer
.	O
mp	pointer
.	O
arg	pointer
=	O
(	O
void	O
*	O
)	O
&	O
arg	pointer
;	O
arg	pointer
.	O
mp	pointer
.	O
openflags	int
=	O
O_RDONLY	int
;	O
arg	pointer
.	O
noClobber	int
=	O
0	int
;	O
if	O
(	O
!	O
mtype	int
&&	O
!	O
strcmp	function
(	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
,	O
"-"	pointer
)	O
)	O
{	O
arg	pointer
.	O
type	enum
=	O
mtype	int
=	O
1	int
;	O
argc	int
--	O
;	O
}	O
if	O
(	O
mtype	int
)	O
{	O
arg	pointer
.	O
mp	pointer
.	O
targetName	pointer
=	O
strdup	function
(	O
"-"	pointer
)	O
;	O
arg	pointer
.	O
mp	pointer
.	O
unixTarget	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
arg	pointer
.	O
mp	pointer
.	O
callback	pointer
=	O
dos_to_unix	function
;	O
arg	pointer
.	O
mp	pointer
.	O
dirCallback	pointer
=	O
unix_copydir	function
;	O
arg	pointer
.	O
mp	pointer
.	O
unixcallback	pointer
=	O
unix_to_unix	function
;	O
}	O
else	O
{	O
const	O
char	O
*	O
target	pointer
;	O
if	O
(	O
argc	int
-	O
optind	int
==	O
1	int
)	O
{	O
target	pointer
=	O
"."	pointer
;	O
arg	pointer
.	O
noClobber	int
=	O
1	int
;	O
}	O
else	O
{	O
argc	int
--	O
;	O
target	pointer
=	O
argv	pointer
[	O
argc	int
]	O
;	O
}	O
target_lookup	function
(	O
&	O
arg	pointer
.	O
mp	pointer
,	O
target	pointer
)	O
;	O
if	O
(	O
!	O
arg	pointer
.	O
mp	pointer
.	O
targetDir	pointer
&&	O
!	O
arg	pointer
.	O
mp	pointer
.	O
unixTarget	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Bad target %s\n"	pointer
,	O
target	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
arg	pointer
.	O
mp	pointer
.	O
unixTarget	pointer
)	O
{	O
arg	pointer
.	O
mp	pointer
.	O
callback	pointer
=	O
dos_to_unix	function
;	O
arg	pointer
.	O
mp	pointer
.	O
dirCallback	pointer
=	O
directory_dos_to_unix	function
;	O
arg	pointer
.	O
mp	pointer
.	O
unixcallback	pointer
=	O
unix_to_unix	function
;	O
}	O
else	O
{	O
arg	pointer
.	O
mp	pointer
.	O
dirCallback	pointer
=	O
dos_copydir	function
;	O
arg	pointer
.	O
mp	pointer
.	O
callback	pointer
=	O
dos_to_dos	function
;	O
arg	pointer
.	O
mp	pointer
.	O
unixcallback	pointer
=	O
unix_to_dos	function
;	O
}	O
}	O
exit	function
(	O
main_loop	function
(	O
&	O
arg	pointer
.	O
mp	pointer
,	O
argv	pointer
+	O
optind	int
,	O
argc	int
-	O
optind	int
)	O
)	O
;	O
}	O
