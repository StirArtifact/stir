static	O
void	O
usage	function
(	O
char	O
*	O
)	O
;	O
extern	O
int	O
errno	int
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
FILE	struct
*	O
stream	pointer
;	O
gdImagePtr	pointer
image	pointer
;	O
int	O
arg_index	int
=	O
2	int
;	O
if	O
(	O
argc	int
<	O
3	int
)	O
usage	function
(	O
"Less than 3 arguments"	pointer
)	O
;	O
if	O
(	O
(	O
stream	pointer
=	O
fopen	function
(	O
argv	array
[	O
1	int
]	O
,	O
"r"	pointer
)	O
)	O
==	O
(	O
FILE	struct
*	O
)	O
NULL	O
)	O
usage	function
(	O
strerror	function
(	O
errno	int
)	O
)	O
;	O
image	pointer
=	O
gdImageCreateFromGif	function
(	O
stream	pointer
)	O
;	O
fclose	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
!	O
image	pointer
)	O
usage	function
(	O
"Couldn't create internal image"	pointer
)	O
;	O
while	O
(	O
arg_index	int
<	O
argc	int
)	O
{	O
char	O
*	O
arg	pointer
=	O
argv	array
[	O
arg_index	int
++	O
]	O
;	O
if	O
(	O
strcasecmp	function
(	O
arg	pointer
,	O
"width"	pointer
)	O
==	O
0	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"%d\n"	pointer
,	O
gdImageSX	O
(	O
image	pointer
)	O
)	O
;	O
else	O
if	O
(	O
strcasecmp	function
(	O
arg	pointer
,	O
"height"	pointer
)	O
==	O
0	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"%d\n"	pointer
,	O
gdImageSY	O
(	O
image	pointer
)	O
)	O
;	O
else	O
if	O
(	O
strcasecmp	function
(	O
arg	pointer
,	O
"transparent"	pointer
)	O
==	O
0	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"%d\n"	pointer
,	O
gdImageGetTransparent	O
(	O
image	pointer
)	O
)	O
;	O
else	O
if	O
(	O
strcasecmp	function
(	O
arg	pointer
,	O
"interlaced"	pointer
)	O
==	O
0	int
)	O
fprintf	function
(	O
stdout	pointer
,	O
"%d\n"	pointer
,	O
gdImageGetInterlaced	O
(	O
image	pointer
)	O
)	O
;	O
else	O
if	O
(	O
strcasecmp	function
(	O
arg	pointer
,	O
"border-width"	pointer
)	O
==	O
0	int
)	O
{	O
register	O
int	O
x	int
;	O
int	O
start_pixel	int
=	O
gdImageGetPixel	function
(	O
image	pointer
,	O
0	int
,	O
0	int
)	O
;	O
for	O
(	O
x	int
=	O
1	int
;	O
x	int
<	O
gdImageSX	O
(	O
image	pointer
)	O
;	O
x	int
++	O
)	O
if	O
(	O
gdImageGetPixel	function
(	O
image	pointer
,	O
x	int
,	O
0	int
)	O
!=	O
start_pixel	int
)	O
break	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"%d\n"	pointer
,	O
x	int
)	O
;	O
}	O
else	O
if	O
(	O
strcasecmp	function
(	O
arg	pointer
,	O
"colors"	pointer
)	O
==	O
0	int
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
gdImageColorsTotal	O
(	O
image	pointer
)	O
;	O
i	int
++	O
)	O
fprintf	function
(	O
stdout	pointer
,	O
"#%02X%02X%02X "	pointer
,	O
gdImageRed	O
(	O
image	pointer
,	O
i	int
)	O
,	O
gdImageGreen	O
(	O
image	pointer
,	O
i	int
)	O
,	O
gdImageBlue	O
(	O
image	pointer
,	O
i	int
)	O
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
else	O
usage	function
(	O
"Incorrect argument passed"	pointer
)	O
;	O
}	O
gdImageDestroy	function
(	O
image	pointer
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
void	O
usage	function
(	O
char	O
*	O
optional_message	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: gifq IMAGE [width | height | transparent | interlaced | border-width | colors]...\n"	pointer
)	O
;	O
if	O
(	O
optional_message	pointer
!=	O
(	O
char	O
*	O
)	O
NULL	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Message: %s\n"	pointer
,	O
optional_message	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
