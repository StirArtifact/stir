static	O
int	O
create_entry	function
(	O
mu_mailcap_t	pointer
mp	pointer
,	O
char	O
*	O
input	pointer
,	O
mu_mailcap_entry_t	pointer
*	O
pent	pointer
)	O
{	O
mu_mailcap_entry_t	pointer
ent	pointer
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
int	O
rc	int
;	O
size_t	long
i	long
;	O
ws	pointer
.	O
ws_delim	pointer
=	O
";"	pointer
;	O
ws	pointer
.	O
ws_escape	array
[	O
0	int
]	O
=	O
";\\"	pointer
;	O
ws	pointer
.	O
ws_escape	array
[	O
1	int
]	O
=	O
""	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
input	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_DELIM	O
|	O
MU_WRDSF_NOCMD	O
|	O
MU_WRDSF_NOVAR	O
|	O
MU_WRDSF_WS	O
|	O
MU_WRDSF_ESCAPE	O
)	O
)	O
{	O
if	O
(	O
mp	pointer
->	O
error	pointer
.	O
error	pointer
)	O
mp	pointer
->	O
error	pointer
.	O
error	pointer
(	O
mp	pointer
->	O
error	pointer
.	O
data	pointer
,	O
&	O
mp	pointer
->	O
locus	struct
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
<	O
2	int
)	O
{	O
if	O
(	O
mp	pointer
->	O
error	pointer
.	O
error	pointer
)	O
mp	pointer
->	O
error	pointer
.	O
error	pointer
(	O
mp	pointer
->	O
error	pointer
.	O
data	pointer
,	O
&	O
mp	pointer
->	O
locus	struct
,	O
_	O
(	O
"not enough fields"	pointer
)	O
)	O
;	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
MU_ERR_PARSE	O
;	O
}	O
rc	int
=	O
mu_mailcap_entry_create	function
(	O
&	O
ent	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
for	O
(	O
i	long
=	O
2	int
;	O
i	long
<	O
ws	pointer
.	O
ws_wordc	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
,	O
'='	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
*	O
p	pointer
++	O
=	O
0	int
;	O
rc	int
=	O
mu_mailcap_entry_set_string	function
(	O
ent	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
,	O
p	pointer
)	O
;	O
}	O
else	O
rc	int
=	O
mu_mailcap_entry_set_bool	function
(	O
ent	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
}	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
mp	pointer
->	O
flags	int
&	O
MU_MAILCAP_FLAG_LOCUS	int
)	O
{	O
ent	pointer
->	O
lrp	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
ent	pointer
->	O
lrp	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
ent	pointer
->	O
lrp	pointer
)	O
{	O
mu_locus_range_init	function
(	O
ent	pointer
->	O
lrp	pointer
)	O
;	O
rc	int
=	O
mu_locus_range_copy	function
(	O
ent	pointer
->	O
lrp	pointer
,	O
&	O
mp	pointer
->	O
locus	struct
)	O
;	O
}	O
else	O
rc	int
=	O
errno	O
;	O
}	O
}	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
mp	pointer
->	O
error	pointer
.	O
error	pointer
)	O
mp	pointer
->	O
error	pointer
.	O
error	pointer
(	O
mp	pointer
->	O
error	pointer
.	O
data	pointer
,	O
&	O
mp	pointer
->	O
locus	struct
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
mu_mailcap_entry_destroy	function
(	O
&	O
ent	pointer
)	O
;	O
}	O
else	O
*	O
pent	pointer
=	O
ent	pointer
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mailcap_parse	function
(	O
mu_mailcap_t	pointer
mailcap	pointer
,	O
mu_stream_t	pointer
input	pointer
,	O
struct	O
mu_locus_point	struct
const	O
*	O
pt	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
buffer	pointer
=	O
NULL	O
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
size_t	long
nread	long
;	O
mu_opool_t	pointer
acc	pointer
=	O
NULL	O
;	O
mu_stream_t	pointer
flt	pointer
;	O
const	O
char	O
*	O
argv	pointer
[	O
]	O
=	O
{	O
"inline-comment"	pointer
,	O
"#"	pointer
,	O
"-i"	pointer
,	O
"#"	pointer
,	O
NULL	O
}	O
;	O
int	O
err	pointer
=	O
0	int
;	O
rc	int
=	O
mu_filter_create_args	function
(	O
&	O
flt	pointer
,	O
input	pointer
,	O
argv	pointer
[	O
0	int
]	O
,	O
MU_ARRAY_SIZE	O
(	O
argv	pointer
)	O
-	O
1	int
,	O
argv	pointer
,	O
MU_FILTER_DECODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_locus_range_init	function
(	O
&	O
mailcap	pointer
->	O
locus	struct
)	O
;	O
if	O
(	O
pt	pointer
)	O
{	O
mu_locus_point_copy	function
(	O
&	O
mailcap	pointer
->	O
locus	struct
.	O
beg	struct
,	O
pt	pointer
)	O
;	O
mu_locus_point_copy	function
(	O
&	O
mailcap	pointer
->	O
locus	struct
.	O
end	struct
,	O
pt	pointer
)	O
;	O
}	O
while	O
(	O
(	O
rc	int
=	O
mu_stream_getline	function
(	O
flt	pointer
,	O
&	O
buffer	pointer
,	O
&	O
bufsize	long
,	O
&	O
nread	long
)	O
)	O
==	O
0	int
)	O
{	O
mu_mailcap_entry_t	pointer
entry	pointer
;	O
int	O
cont	int
=	O
acc	pointer
&&	O
mu_opool_size	function
(	O
acc	pointer
)	O
>	O
0	int
;	O
if	O
(	O
nread	long
>	O
0	int
)	O
{	O
buffer	pointer
[	O
--	O
nread	long
]	O
=	O
0	int
;	O
if	O
(	O
buffer	pointer
[	O
0	int
]	O
==	O
'#'	O
)	O
{	O
unsigned	O
long	O
n	long
;	O
char	O
*	O
p	pointer
;	O
errno	O
=	O
0	int
;	O
n	long
=	O
strtoul	function
(	O
buffer	pointer
+	O
2	int
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
errno	O
==	O
0	int
&&	O
(	O
*	O
p	pointer
==	O
0	int
||	O
mu_isspace	O
(	O
*	O
p	pointer
)	O
)	O
)	O
mailcap	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_line	int
=	O
mailcap	pointer
->	O
locus	struct
.	O
end	struct
.	O
mu_line	int
=	O
n	long
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
nread	long
&&	O
buffer	pointer
[	O
nread	long
-	O
1	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
--	O
nread	long
>	O
0	int
)	O
{	O
if	O
(	O
!	O
acc	pointer
)	O
{	O
rc	int
=	O
mu_opool_create	function
(	O
&	O
acc	pointer
,	O
MU_OPOOL_DEFAULT	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
rc	int
=	O
mu_opool_append	function
(	O
acc	pointer
,	O
buffer	pointer
,	O
nread	long
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
mailcap	pointer
->	O
locus	struct
.	O
end	struct
.	O
mu_line	int
++	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
cont	int
)	O
{	O
char	O
*	O
p	pointer
;	O
rc	int
=	O
mu_opool_append	function
(	O
acc	pointer
,	O
buffer	pointer
,	O
nread	long
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
mu_opool_append_char	function
(	O
acc	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
p	pointer
=	O
mu_opool_finish	function
(	O
acc	pointer
,	O
NULL	O
)	O
;	O
rc	int
=	O
create_entry	function
(	O
mailcap	pointer
,	O
p	pointer
,	O
&	O
entry	pointer
)	O
;	O
mu_opool_clear	function
(	O
acc	pointer
)	O
;	O
mailcap	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_line	int
=	O
++	O
mailcap	pointer
->	O
locus	struct
.	O
end	struct
.	O
mu_line	int
;	O
}	O
else	O
if	O
(	O
nread	long
==	O
0	int
)	O
{	O
mailcap	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_line	int
=	O
++	O
mailcap	pointer
->	O
locus	struct
.	O
end	struct
.	O
mu_line	int
;	O
continue	O
;	O
}	O
else	O
{	O
rc	int
=	O
create_entry	function
(	O
mailcap	pointer
,	O
buffer	pointer
,	O
&	O
entry	pointer
)	O
;	O
mailcap	pointer
->	O
locus	struct
.	O
beg	struct
.	O
mu_line	int
=	O
++	O
mailcap	pointer
->	O
locus	struct
.	O
end	struct
.	O
mu_line	int
;	O
}	O
}	O
else	O
if	O
(	O
cont	int
)	O
{	O
char	O
*	O
p	pointer
;	O
rc	int
=	O
mu_opool_append_char	function
(	O
acc	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
p	pointer
=	O
mu_opool_finish	function
(	O
acc	pointer
,	O
NULL	O
)	O
;	O
rc	int
=	O
create_entry	function
(	O
mailcap	pointer
,	O
p	pointer
,	O
&	O
entry	pointer
)	O
;	O
mu_opool_clear	function
(	O
acc	pointer
)	O
;	O
}	O
else	O
break	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
mailcap	pointer
->	O
selector	pointer
.	O
selector	pointer
&&	O
mailcap	pointer
->	O
selector	pointer
.	O
selector	pointer
(	O
entry	pointer
,	O
mailcap	pointer
->	O
selector	pointer
.	O
data	pointer
)	O
!=	O
0	int
)	O
{	O
mu_mailcap_entry_destroy	function
(	O
&	O
entry	pointer
)	O
;	O
}	O
else	O
{	O
mu_list_append	function
(	O
mailcap	pointer
->	O
elist	pointer
,	O
entry	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
rc	int
==	O
MU_ERR_PARSE	O
)	O
err	pointer
=	O
1	int
;	O
else	O
break	O
;	O
}	O
mu_stream_destroy	function
(	O
&	O
flt	pointer
)	O
;	O
mu_locus_range_deinit	function
(	O
&	O
mailcap	pointer
->	O
locus	struct
)	O
;	O
mu_opool_destroy	function
(	O
&	O
acc	pointer
)	O
;	O
if	O
(	O
rc	int
&&	O
err	pointer
)	O
rc	int
=	O
MU_ERR_PARSE	O
;	O
return	O
rc	int
;	O
}	O
