static	O
unsigned	O
int	O
small_deltas	array
[	O
SMALL	O
]	O
;	O
static	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
static	O
void	O
completed_callback	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
void	O
*	O
*	O
con_cls	pointer
,	O
enum	O
MHD_RequestTerminationCode	enum
toe	enum
)	O
{	O
struct	O
timeval	struct
*	O
tv	pointer
=	O
*	O
con_cls	pointer
;	O
struct	O
timeval	struct
tve	struct
;	O
uint64_t	long
delta	long
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
connection	pointer
;	O
(	O
void	O
)	O
toe	enum
;	O
if	O
(	O
NULL	O
==	O
tv	pointer
)	O
return	O
;	O
gettimeofday	function
(	O
&	O
tve	struct
,	O
NULL	O
)	O
;	O
delta	long
=	O
0	int
;	O
if	O
(	O
tve	struct
.	O
tv_usec	long
>=	O
tv	pointer
->	O
tv_usec	long
)	O
delta	long
+=	O
(	O
tve	struct
.	O
tv_sec	long
-	O
tv	pointer
->	O
tv_sec	long
)	O
*	O
1000000LL	int
+	O
(	O
tve	struct
.	O
tv_usec	long
-	O
tv	pointer
->	O
tv_usec	long
)	O
;	O
else	O
delta	long
+=	O
(	O
tve	struct
.	O
tv_sec	long
-	O
tv	pointer
->	O
tv_sec	long
)	O
*	O
1000000LL	int
-	O
tv	pointer
->	O
tv_usec	long
+	O
tve	struct
.	O
tv_usec	long
;	O
if	O
(	O
delta	long
<	O
SMALL	O
)	O
small_deltas	array
[	O
delta	long
]	O
++	O
;	O
else	O
fprintf	function
(	O
stdout	pointer
,	O
"D: %llu 1\n"	pointer
,	O
(	O
unsigned	O
long	O
long	O
)	O
delta	long
)	O
;	O
free	function
(	O
tv	pointer
)	O
;	O
}	O
static	O
void	O
*	O
uri_logger_cb	function
(	O
void	O
*	O
cls	pointer
,	O
const	O
char	O
*	O
uri	pointer
)	O
{	O
struct	O
timeval	struct
*	O
tv	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
timeval	struct
)	O
)	O
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
uri	pointer
;	O
if	O
(	O
NULL	O
!=	O
tv	pointer
)	O
gettimeofday	function
(	O
tv	pointer
,	O
NULL	O
)	O
;	O
return	O
tv	pointer
;	O
}	O
static	O
int	O
ahc_echo	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	long
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
url	pointer
;	O
(	O
void	O
)	O
version	pointer
;	O
(	O
void	O
)	O
upload_data	pointer
;	O
(	O
void	O
)	O
upload_data_size	pointer
;	O
(	O
void	O
)	O
ptr	pointer
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
method	pointer
,	O
"GET"	pointer
)	O
)	O
return	O
MHD_NO	int
;	O
return	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_OK	int
,	O
response	pointer
)	O
;	O
}	O
const	O
char	O
srv_signed_key_pem	array
[	O
]	O
=	O
"-----BEGIN RSA PRIVATE KEY-----\n"	pointer
"MIIEowIBAAKCAQEAvfTdv+3fgvVTKRnP/HVNG81cr8TrUP/iiyuve/THMzvFXhCW\n"	pointer
"+K03KwEku55QvnUndwBfU/ROzLlv+5hotgiDRNFT3HxurmhouySBrJNJv7qWp8IL\n"	pointer
"q4sw32vo0fbMu5BZF49bUXK9L3kW2PdhTtSQPWHEzNrCxO+YgCilKHkY3vQNfdJ0\n"	pointer
"20Q5EAAEseD1YtWCIpRvJzYlZMpjYB1ubTl24kwrgOKUJYKqM4jmF4DVQp4oOK/6\n"	pointer
"QYGGh1QmHRPAy3CBII6sbb+sZT9cAqU6GYQVB35lm4XAgibXV6KgmpVxVQQ69U6x\n"	pointer
"yoOl204xuekZOaG9RUPId74Rtmwfi1TLbBzo2wIDAQABAoIBADu09WSICNq5cMe4\n"	pointer
"+NKCLlgAT1NiQpLls1gKRbDhKiHU9j8QWNvWWkJWrCya4QdUfLCfeddCMeiQmv3K\n"	pointer
"lJMvDs+5OjJSHFoOsGiuW2Ias7IjnIojaJalfBml6frhJ84G27IXmdz6gzOiTIer\n"	pointer
"DjeAgcwBaKH5WwIay2TxIaScl7AwHBauQkrLcyb4hTmZuQh6ArVIN6+pzoVuORXM\n"	pointer
"bpeNWl2l/HSN3VtUN6aCAKbN/X3o0GavCCMn5Fa85uJFsab4ss/uP+2PusU71+zP\n"	pointer
"sBm6p/2IbGvF5k3VPDA7X5YX61sukRjRBihY8xSnNYx1UcoOsX6AiPnbhifD8+xQ\n"	pointer
"Tlf8oJUCgYEA0BTfzqNpr9Wxw5/QXaSdw7S/0eP5a0C/nwURvmfSzuTD4equzbEN\n"	pointer
"d+dI/s2JMxrdj/I4uoAfUXRGaabevQIjFzC9uyE3LaOyR2zhuvAzX+vVcs6bSXeU\n"	pointer
"pKpCAcN+3Z3evMaX2f+z/nfSUAl2i4J2R+/LQAWJW4KwRky/m+cxpfUCgYEA6bN1\n"	pointer
"b73bMgM8wpNt6+fcmS+5n0iZihygQ2U2DEud8nZJL4Nrm1dwTnfZfJBnkGj6+0Q0\n"	pointer
"cOwj2KS0/wcEdJBP0jucU4v60VMhp75AQeHqidIde0bTViSRo3HWKXHBIFGYoU3T\n"	pointer
"LyPyKndbqsOObnsFXHn56Nwhr2HLf6nw4taGQY8CgYBoSW36FLCNbd6QGvLFXBGt\n"	pointer
"2lMhEM8az/K58kJ4WXSwOLtr6MD/WjNT2tkcy0puEJLm6BFCd6A6pLn9jaKou/92\n"	pointer
"SfltZjJPb3GUlp9zn5tAAeSSi7YMViBrfuFiHObij5LorefBXISLjuYbMwL03MgH\n"	pointer
"Ocl2JtA2ywMp2KFXs8GQWQKBgFyIVv5ogQrbZ0pvj31xr9HjqK6d01VxIi+tOmpB\n"	pointer
"4ocnOLEcaxX12BzprW55ytfOCVpF1jHD/imAhb3YrHXu0fwe6DXYXfZV4SSG2vB7\n"	pointer
"IB9z14KBN5qLHjNGFpMQXHSMek+b/ftTU0ZnPh9uEM5D3YqRLVd7GcdUhHvG8P8Q\n"	pointer
"C9aXAoGBAJtID6h8wOGMP0XYX5YYnhlC7dOLfk8UYrzlp3xhqVkzKthTQTj6wx9R\n"	pointer
"GtC4k7U1ki8oJsfcIlBNXd768fqDVWjYju5rzShMpo8OCTS6ipAblKjCxPPVhIpv\n"	pointer
"tWPlbSn1qj6wylstJ5/3Z+ZW5H4wIKp5jmLiioDhcP0L/Ex3Zx8O\n"	pointer
"-----END RSA PRIVATE KEY-----\n"	pointer
;	O
const	O
char	O
srv_signed_cert_pem	array
[	O
]	O
=	O
"-----BEGIN CERTIFICATE-----\n"	pointer
"MIIDGzCCAgWgAwIBAgIES0KCvTALBgkqhkiG9w0BAQUwFzEVMBMGA1UEAxMMdGVz\n"	pointer
"dF9jYV9jZXJ0MB4XDTEwMDEwNTAwMDcyNVoXDTQ1MDMxMjAwMDcyNVowFzEVMBMG\n"	pointer
"A1UEAxMMdGVzdF9jYV9jZXJ0MIIBHzALBgkqhkiG9w0BAQEDggEOADCCAQkCggEA\n"	pointer
"vfTdv+3fgvVTKRnP/HVNG81cr8TrUP/iiyuve/THMzvFXhCW+K03KwEku55QvnUn\n"	pointer
"dwBfU/ROzLlv+5hotgiDRNFT3HxurmhouySBrJNJv7qWp8ILq4sw32vo0fbMu5BZ\n"	pointer
"F49bUXK9L3kW2PdhTtSQPWHEzNrCxO+YgCilKHkY3vQNfdJ020Q5EAAEseD1YtWC\n"	pointer
"IpRvJzYlZMpjYB1ubTl24kwrgOKUJYKqM4jmF4DVQp4oOK/6QYGGh1QmHRPAy3CB\n"	pointer
"II6sbb+sZT9cAqU6GYQVB35lm4XAgibXV6KgmpVxVQQ69U6xyoOl204xuekZOaG9\n"	pointer
"RUPId74Rtmwfi1TLbBzo2wIDAQABo3YwdDAMBgNVHRMBAf8EAjAAMBMGA1UdJQQM\n"	pointer
"MAoGCCsGAQUFBwMBMA8GA1UdDwEB/wQFAwMHIAAwHQYDVR0OBBYEFOFi4ilKOP1d\n"	pointer
"XHlWCMwmVKr7mgy8MB8GA1UdIwQYMBaAFP2olB4s2T/xuoQ5pT2RKojFwZo2MAsG\n"	pointer
"CSqGSIb3DQEBBQOCAQEAHVWPxazupbOkG7Did+dY9z2z6RjTzYvurTtEKQgzM2Vz\n"	pointer
"GQBA+3pZ3c5mS97fPIs9hZXfnQeelMeZ2XP1a+9vp35bJjZBBhVH+pqxjCgiUflg\n"	pointer
"A3Zqy0XwwVCgQLE2HyaU3DLUD/aeIFK5gJaOSdNTXZLv43K8kl4cqDbMeRpVTbkt\n"	pointer
"YmG4AyEOYRNKGTqMEJXJoxD5E3rBUNrVI/XyTjYrulxbNPcMWEHKNeeqWpKDYTFo\n"	pointer
"Bb01PCthGXiq/4A2RLAFosadzRa8SBpoSjPPfZ0b2w4MJpReHqKbR5+T2t6hzml6\n"	pointer
"4ToyOKPDmamiTuN5KzLN3cw7DQlvWMvqSOChPLnA3Q==\n"	pointer
"-----END CERTIFICATE-----\n"	pointer
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	pointer
;	O
unsigned	O
int	O
i	int
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	function
(	O
"%s PORT\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
PAGE	pointer
)	O
,	O
(	O
void	O
*	O
)	O
PAGE	pointer
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
d	pointer
=	O
MHD_start_daemon	function
(	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_TLS	int
|	O
MHD_USE_EPOLL	int
|	O
MHD_USE_TURBO	int
,	O
atoi	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	function
,	O
NULL	O
,	O
MHD_OPTION_CONNECTION_TIMEOUT	int
,	O
(	O
unsigned	O
int	O
)	O
120	int
,	O
MHD_OPTION_THREAD_POOL_SIZE	int
,	O
(	O
unsigned	O
int	O
)	O
NUMBER_OF_THREADS	O
,	O
MHD_OPTION_URI_LOG_CALLBACK	int
,	O
&	O
uri_logger_cb	function
,	O
NULL	O
,	O
MHD_OPTION_NOTIFY_COMPLETED	int
,	O
&	O
completed_callback	function
,	O
NULL	O
,	O
MHD_OPTION_CONNECTION_LIMIT	int
,	O
(	O
unsigned	O
int	O
)	O
1000	int
,	O
MHD_OPTION_HTTPS_MEM_KEY	int
,	O
srv_signed_key_pem	array
,	O
MHD_OPTION_HTTPS_MEM_CERT	int
,	O
srv_signed_cert_pem	array
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
d	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getc	function
(	O
stdin	pointer
)	O
;	O
MHD_stop_daemon	function
(	O
d	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SMALL	O
;	O
i	int
++	O
)	O
if	O
(	O
0	int
!=	O
small_deltas	array
[	O
i	int
]	O
)	O
fprintf	function
(	O
stdout	pointer
,	O
"D: %d %u\n"	pointer
,	O
i	int
,	O
small_deltas	array
[	O
i	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
