extern	O
char	O
*	O
*	O
environ	pointer
;	O
char	O
*	O
progname	pointer
;	O
struct	O
kwd	pointer
{	O
const	O
char	O
*	O
name	pointer
;	O
int	O
tok	int
;	O
}	O
;	O
struct	O
kwd	pointer
bool_keytab	array
[	O
]	O
=	O
{	O
{	O
"append"	pointer
,	O
WRDSF_APPEND	int
}	O
,	O
{	O
"undef"	pointer
,	O
WRDSF_UNDEF	int
}	O
,	O
{	O
"novar"	pointer
,	O
WRDSF_NOVAR	int
}	O
,	O
{	O
"nocmd"	pointer
,	O
WRDSF_NOCMD	int
}	O
,	O
{	O
"ws"	pointer
,	O
WRDSF_WS	int
}	O
,	O
{	O
"quote"	pointer
,	O
WRDSF_QUOTE	O
}	O
,	O
{	O
"squote"	pointer
,	O
WRDSF_SQUOTE	int
}	O
,	O
{	O
"dquote"	pointer
,	O
WRDSF_DQUOTE	int
}	O
,	O
{	O
"squeeze_delims"	pointer
,	O
WRDSF_SQUEEZE_DELIMS	int
}	O
,	O
{	O
"return_delims"	pointer
,	O
WRDSF_RETURN_DELIMS	int
}	O
,	O
{	O
"sed"	pointer
,	O
WRDSF_SED_EXPR	int
}	O
,	O
{	O
"debug"	pointer
,	O
WRDSF_SHOWDBG	int
}	O
,	O
{	O
"nosplit"	pointer
,	O
WRDSF_NOSPLIT	int
}	O
,	O
{	O
"keepundef"	pointer
,	O
WRDSF_KEEPUNDEF	int
}	O
,	O
{	O
"warnundef"	pointer
,	O
WRDSF_WARNUNDEF	int
}	O
,	O
{	O
"cescapes"	pointer
,	O
WRDSF_CESCAPES	int
}	O
,	O
{	O
"default"	pointer
,	O
WRDSF_DEFFLAGS	O
}	O
,	O
{	O
"env_kv"	pointer
,	O
WRDSF_ENV_KV	int
}	O
,	O
{	O
"incremental"	pointer
,	O
WRDSF_INCREMENTAL	int
}	O
,	O
{	O
"pathexpand"	pointer
,	O
WRDSF_PATHEXPAND	int
}	O
,	O
{	O
NULL	O
,	O
0	int
}	O
}	O
;	O
struct	O
kwd	pointer
opt_keytab	array
[	O
]	O
=	O
{	O
{	O
"nullglob"	pointer
,	O
WRDSO_NULLGLOB	int
}	O
,	O
{	O
"failglob"	pointer
,	O
WRDSO_FAILGLOB	int
}	O
,	O
{	O
"dotglob"	pointer
,	O
WRDSO_DOTGLOB	int
}	O
,	O
{	O
NULL	O
,	O
0	int
}	O
}	O
;	O
struct	O
kwd	pointer
string_keytab	array
[	O
]	O
=	O
{	O
{	O
"delim"	pointer
,	O
WRDSF_DELIM	int
}	O
,	O
{	O
"comment"	pointer
,	O
WRDSF_COMMENT	int
}	O
,	O
{	O
"escape"	pointer
,	O
WRDSF_ESCAPE	int
}	O
,	O
{	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
int	O
kwxlat	function
(	O
struct	O
kwd	pointer
*	O
kwp	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
int	O
*	O
res	pointer
)	O
{	O
for	O
(	O
;	O
kwp	pointer
->	O
name	pointer
;	O
kwp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
kwp	pointer
->	O
name	pointer
,	O
str	pointer
)	O
==	O
0	int
)	O
{	O
*	O
res	pointer
=	O
kwp	pointer
->	O
tok	int
;	O
return	O
0	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
void	O
help	function
(	O
)	O
{	O
size_t	long
i	long
;	O
printf	function
(	O
"usage: %s [options] [VAR=VALUE...] [-- EXTRA...]\n"	pointer
,	O
progname	pointer
)	O
;	O
printf	function
(	O
"options are:\n"	pointer
)	O
;	O
printf	function
(	O
" [-]trimnl\n"	pointer
)	O
;	O
printf	function
(	O
" [-]plaintext\n"	pointer
)	O
;	O
printf	function
(	O
" -env\n"	pointer
)	O
;	O
printf	function
(	O
" env sys|none|null\n"	pointer
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
bool_keytab	array
[	O
i	long
]	O
.	O
name	pointer
;	O
i	long
++	O
)	O
printf	function
(	O
" [-]%s\n"	pointer
,	O
bool_keytab	array
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
string_keytab	array
[	O
i	long
]	O
.	O
name	pointer
;	O
i	long
++	O
)	O
{	O
printf	function
(	O
" -%s\n"	pointer
,	O
string_keytab	array
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
printf	function
(	O
" %s ARG\n"	pointer
,	O
string_keytab	array
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
}	O
printf	function
(	O
" escape-word ARG\n"	pointer
)	O
;	O
printf	function
(	O
" escape-quote ARG\n"	pointer
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
opt_keytab	array
[	O
i	long
]	O
.	O
name	pointer
;	O
i	long
++	O
)	O
{	O
printf	function
(	O
" [-]%s\n"	pointer
,	O
opt_keytab	array
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
}	O
putchar	function
(	O
'\n'	O
)	O
;	O
printf	function
(	O
" -dooffs\n"	pointer
)	O
;	O
printf	function
(	O
" dooffs COUNT ARGS...\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
void	O
print_qword	function
(	O
const	O
char	O
*	O
word	pointer
,	O
int	O
plaintext	int
)	O
{	O
static	O
char	O
*	O
qbuf	pointer
=	O
NULL	O
;	O
static	O
size_t	long
qlen	long
=	O
0	int
;	O
int	O
quote	pointer
;	O
size_t	long
size	pointer
=	O
wordsplit_c_quoted_length	function
(	O
word	pointer
,	O
0	int
,	O
&	O
quote	pointer
)	O
;	O
if	O
(	O
plaintext	int
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
word	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
word	pointer
==	O
0	int
)	O
quote	pointer
=	O
1	int
;	O
if	O
(	O
size	pointer
>=	O
qlen	long
)	O
{	O
qlen	long
=	O
size	pointer
+	O
1	int
;	O
qbuf	pointer
=	O
realloc	function
(	O
qbuf	pointer
,	O
qlen	long
)	O
;	O
assert	O
(	O
qbuf	pointer
!=	O
NULL	O
)	O
;	O
}	O
wordsplit_c_quote_copy	function
(	O
qbuf	pointer
,	O
word	pointer
,	O
0	int
)	O
;	O
qbuf	pointer
[	O
size	pointer
]	O
=	O
0	int
;	O
if	O
(	O
quote	pointer
)	O
printf	function
(	O
"\"%s\""	pointer
,	O
qbuf	pointer
)	O
;	O
else	O
printf	function
(	O
"%s"	pointer
,	O
qbuf	pointer
)	O
;	O
}	O
static	O
char	O
*	O
*	O
make_env_kv	function
(	O
)	O
{	O
size_t	long
i	long
,	O
j	long
,	O
size	pointer
;	O
char	O
*	O
*	O
newenv	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
environ	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
;	O
size	pointer
=	O
i	long
*	O
2	int
+	O
1	int
;	O
newenv	pointer
=	O
calloc	function
(	O
size	pointer
,	O
sizeof	O
(	O
newenv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
assert	O
(	O
newenv	pointer
!=	O
NULL	O
)	O
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
environ	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
size_t	long
len	long
=	O
strcspn	function
(	O
environ	pointer
[	O
i	long
]	O
,	O
"="	pointer
)	O
;	O
char	O
*	O
p	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
assert	O
(	O
p	pointer
!=	O
NULL	O
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
environ	pointer
[	O
i	long
]	O
,	O
len	long
)	O
;	O
p	pointer
[	O
len	long
]	O
=	O
0	int
;	O
newenv	pointer
[	O
j	long
++	O
]	O
=	O
p	pointer
;	O
p	pointer
=	O
strdup	function
(	O
environ	pointer
[	O
i	long
]	O
+	O
len	long
+	O
1	int
)	O
;	O
assert	O
(	O
p	pointer
!=	O
NULL	O
)	O
;	O
newenv	pointer
[	O
j	long
++	O
]	O
=	O
p	pointer
;	O
}	O
newenv	pointer
[	O
j	long
]	O
=	O
NULL	O
;	O
return	O
newenv	pointer
;	O
}	O
static	O
int	O
wsp_getvar	function
(	O
char	O
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
vptr	pointer
,	O
size_t	long
vlen	long
,	O
void	O
*	O
data	pointer
)	O
{	O
char	O
*	O
*	O
base	pointer
=	O
data	pointer
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
base	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
size_t	long
l	long
=	O
strcspn	function
(	O
base	pointer
[	O
i	long
]	O
,	O
"="	pointer
)	O
;	O
if	O
(	O
l	long
==	O
vlen	long
&&	O
memcmp	function
(	O
base	pointer
[	O
i	long
]	O
,	O
vptr	pointer
,	O
vlen	long
)	O
==	O
0	int
)	O
{	O
char	O
*	O
p	pointer
=	O
strdup	function
(	O
base	pointer
[	O
i	long
]	O
+	O
vlen	long
+	O
1	int
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
WRDSE_NOSPACE	int
;	O
*	O
ret	pointer
=	O
p	pointer
;	O
return	O
WRDSE_OK	int
;	O
}	O
}	O
return	O
WRDSE_UNDEF	int
;	O
}	O
static	O
int	O
cmd_quote	function
(	O
char	O
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
alen	int
;	O
for	O
(	O
alen	int
=	O
0	int
;	O
alen	int
<	O
len	long
&&	O
!	O
(	O
str	pointer
[	O
alen	int
]	O
==	O
' '	O
||	O
str	pointer
[	O
alen	int
]	O
==	O
'\t'	O
)	O
;	O
alen	int
++	O
)	O
;	O
for	O
(	O
;	O
alen	int
<	O
len	long
&&	O
(	O
str	pointer
[	O
alen	int
]	O
==	O
' '	O
||	O
str	pointer
[	O
alen	int
]	O
==	O
'\t'	O
)	O
;	O
alen	int
++	O
)	O
;	O
len	long
-=	O
alen	int
;	O
*	O
ret	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
*	O
ret	pointer
)	O
return	O
WRDSE_NOSPACE	int
;	O
memcpy	function
(	O
*	O
ret	pointer
,	O
str	pointer
+	O
alen	int
,	O
len	long
)	O
;	O
(	O
*	O
ret	pointer
)	O
[	O
len	long
]	O
=	O
0	int
;	O
return	O
WRDSE_OK	int
;	O
}	O
static	O
int	O
cmd_words	function
(	O
char	O
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
i	long
;	O
p	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
WRDSE_NOSPACE	int
;	O
*	O
ret	pointer
=	O
p	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
argv	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
size_t	long
s	pointer
=	O
strlen	function
(	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
i	long
>	O
1	int
)	O
*	O
p	pointer
++	O
=	O
' '	O
;	O
memcpy	function
(	O
p	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
s	pointer
)	O
;	O
p	pointer
+=	O
s	pointer
;	O
}	O
*	O
p	pointer
=	O
0	int
;	O
return	O
WRDSE_OK	int
;	O
}	O
static	O
int	O
cmd_lines	function
(	O
char	O
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
i	long
;	O
p	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
WRDSE_NOSPACE	int
;	O
*	O
ret	pointer
=	O
p	pointer
;	O
for	O
(	O
i	long
=	O
1	int
;	O
argv	pointer
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
size_t	long
s	pointer
=	O
strlen	function
(	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
if	O
(	O
i	long
>	O
1	int
)	O
*	O
p	pointer
++	O
=	O
'\n'	O
;	O
memcpy	function
(	O
p	pointer
,	O
argv	pointer
[	O
i	long
]	O
,	O
s	pointer
)	O
;	O
p	pointer
+=	O
s	pointer
;	O
}	O
*	O
p	pointer
=	O
0	int
;	O
return	O
WRDSE_OK	int
;	O
}	O
static	O
struct	O
command	struct
{	O
char	O
const	O
*	O
name	pointer
;	O
int	O
(	O
*	O
cmd	enum
)	O
(	O
char	O
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
;	O
}	O
comtab	array
[	O
]	O
=	O
{	O
{	O
"quote"	pointer
,	O
cmd_quote	function
}	O
,	O
{	O
"words"	pointer
,	O
cmd_words	function
}	O
,	O
{	O
"lines"	pointer
,	O
cmd_lines	function
}	O
}	O
;	O
static	O
int	O
wsp_runcmd	function
(	O
char	O
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
void	O
*	O
closure	pointer
)	O
{	O
int	O
i	long
;	O
size_t	long
s	pointer
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
==	O
sizeof	O
(	O
comtab	array
)	O
/	O
sizeof	O
(	O
comtab	array
[	O
0	int
]	O
)	O
)	O
break	O
;	O
if	O
(	O
strcmp	function
(	O
comtab	array
[	O
i	long
]	O
.	O
name	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
==	O
0	int
)	O
return	O
comtab	array
[	O
i	long
]	O
.	O
cmd	enum
(	O
ret	pointer
,	O
str	pointer
,	O
len	long
,	O
argv	pointer
)	O
;	O
}	O
*	O
ret	pointer
=	O
NULL	O
;	O
if	O
(	O
grecs_asprintf	function
(	O
ret	pointer
,	O
&	O
s	pointer
,	O
"unknown command: %s"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
return	O
WRDSE_NOSPACE	int
;	O
else	O
return	O
WRDSE_USERERR	int
;	O
}	O
enum	O
env_type	enum
{	O
env_none	int
,	O
env_null	int
,	O
env_sys	int
}	O
;	O
struct	O
kwd	pointer
env_keytab	array
[	O
]	O
=	O
{	O
{	O
"none"	pointer
,	O
env_none	int
}	O
,	O
{	O
"null"	pointer
,	O
env_null	int
}	O
,	O
{	O
"sys"	pointer
,	O
env_sys	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
void	O
set_escape_string	function
(	O
wordsplit_t	struct
*	O
ws	pointer
,	O
int	O
*	O
wsflags	pointer
,	O
int	O
q	int
,	O
const	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
*	O
str	pointer
==	O
':'	O
)	O
{	O
while	O
(	O
*	O
++	O
str	pointer
!=	O
':'	O
)	O
{	O
int	O
f	int
;	O
switch	O
(	O
*	O
str	pointer
)	O
{	O
case	O
'+'	O
:	O
f	int
=	O
WRDSO_BSKEEP	O
;	O
break	O
;	O
case	O
'0'	O
:	O
f	int
=	O
WRDSO_OESC	O
;	O
break	O
;	O
case	O
'x'	O
:	O
f	int
=	O
WRDSO_XESC	O
;	O
break	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid escape flag near %s\n"	pointer
,	O
progname	pointer
,	O
str	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
WRDSO_ESC_SET	O
(	O
ws	pointer
,	O
q	int
,	O
f	int
)	O
;	O
}	O
*	O
wsflags	pointer
|=	O
WRDSF_OPTIONS	int
;	O
++	O
str	pointer
;	O
}	O
ws	pointer
->	O
ws_escape	array
[	O
q	int
]	O
=	O
str	pointer
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
char	O
buf	pointer
[	O
1024	int
]	O
,	O
*	O
ptr	pointer
,	O
*	O
saved_ptr	pointer
;	O
int	O
i	long
,	O
offarg	int
=	O
0	int
;	O
int	O
trimnl_option	int
=	O
0	int
;	O
int	O
plaintext_option	int
=	O
0	int
;	O
int	O
wsflags	pointer
=	O
(	O
WRDSF_DEFFLAGS	O
&	O
~	O
WRDSF_NOVAR	int
)	O
|	O
WRDSF_ENOMEMABRT	int
|	O
WRDSF_SHOWERR	int
;	O
wordsplit_t	struct
ws	pointer
;	O
int	O
next_call	int
=	O
0	int
;	O
char	O
*	O
fenvbase	array
[	O
128	int
]	O
;	O
size_t	long
fenvidx	long
=	O
0	int
;	O
size_t	long
fenvmax	long
=	O
sizeof	O
(	O
fenvbase	array
)	O
/	O
sizeof	O
(	O
fenvbase	array
[	O
0	int
]	O
)	O
;	O
int	O
use_env	int
=	O
env_sys	int
;	O
int	O
appendc	int
=	O
0	int
;	O
char	O
*	O
*	O
appendv	pointer
=	O
NULL	O
;	O
progname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
ws	pointer
.	O
ws_options	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	int
;	O
i	long
++	O
)	O
{	O
char	O
*	O
opt	pointer
=	O
argv	pointer
[	O
i	long
]	O
;	O
int	O
negate	int
;	O
int	O
flag	int
;	O
if	O
(	O
opt	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
opt	pointer
[	O
1	int
]	O
==	O
'-'	O
&&	O
opt	pointer
[	O
2	int
]	O
==	O
0	int
)	O
{	O
appendc	int
=	O
argc	int
-	O
i	long
-	O
1	int
;	O
appendv	pointer
=	O
argv	pointer
+	O
i	long
+	O
1	int
;	O
break	O
;	O
}	O
negate	int
=	O
1	int
;	O
opt	pointer
++	O
;	O
}	O
else	O
if	O
(	O
opt	pointer
[	O
0	int
]	O
==	O
'+'	O
)	O
{	O
negate	int
=	O
0	int
;	O
opt	pointer
++	O
;	O
}	O
else	O
negate	int
=	O
0	int
;	O
if	O
(	O
strcmp	function
(	O
opt	pointer
,	O
"h"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
opt	pointer
,	O
"help"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
opt	pointer
,	O
"-help"	pointer
)	O
==	O
0	int
)	O
{	O
help	function
(	O
)	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
opt	pointer
,	O
"trimnl"	pointer
)	O
==	O
0	int
)	O
{	O
trimnl_option	int
=	O
!	O
negate	int
;	O
continue	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
opt	pointer
,	O
"plaintext"	pointer
)	O
==	O
0	int
)	O
{	O
plaintext_option	int
=	O
!	O
negate	int
;	O
continue	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
opt	pointer
,	O
"env"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
negate	int
)	O
use_env	int
=	O
env_none	int
;	O
else	O
{	O
i	long
++	O
;	O
if	O
(	O
i	long
==	O
argc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: missing argument for env\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
kwxlat	function
(	O
env_keytab	array
,	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
use_env	int
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid argument for env\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
continue	O
;	O
}	O
if	O
(	O
kwxlat	function
(	O
bool_keytab	array
,	O
opt	pointer
,	O
&	O
flag	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
negate	int
)	O
wsflags	pointer
&=	O
~	O
flag	int
;	O
else	O
wsflags	pointer
|=	O
flag	int
;	O
continue	O
;	O
}	O
if	O
(	O
kwxlat	function
(	O
string_keytab	array
,	O
opt	pointer
,	O
&	O
flag	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
negate	int
)	O
wsflags	pointer
&=	O
~	O
flag	int
;	O
else	O
{	O
i	long
++	O
;	O
if	O
(	O
i	long
==	O
argc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: missing argument for %s\n"	pointer
,	O
progname	pointer
,	O
opt	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
switch	O
(	O
flag	int
)	O
{	O
case	O
WRDSF_DELIM	int
:	O
ws	pointer
.	O
ws_delim	pointer
=	O
argv	pointer
[	O
i	long
]	O
;	O
break	O
;	O
case	O
WRDSF_COMMENT	int
:	O
ws	pointer
.	O
ws_comment	pointer
=	O
argv	pointer
[	O
i	long
]	O
;	O
break	O
;	O
case	O
WRDSF_ESCAPE	int
:	O
set_escape_string	function
(	O
&	O
ws	pointer
,	O
&	O
wsflags	pointer
,	O
0	int
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
set_escape_string	function
(	O
&	O
ws	pointer
,	O
&	O
wsflags	pointer
,	O
1	int
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
break	O
;	O
}	O
wsflags	pointer
|=	O
flag	int
;	O
}	O
continue	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
opt	pointer
,	O
"escape-word"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
opt	pointer
,	O
"escape-quote"	pointer
)	O
==	O
0	int
)	O
{	O
int	O
q	int
=	O
opt	pointer
[	O
7	int
]	O
==	O
'q'	O
;	O
i	long
++	O
;	O
if	O
(	O
i	long
==	O
argc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: missing argument for %s\n"	pointer
,	O
progname	pointer
,	O
opt	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
!	O
(	O
wsflags	pointer
&	O
WRDSF_ESCAPE	int
)	O
)	O
{	O
wsflags	pointer
|=	O
WRDSF_ESCAPE	int
;	O
ws	pointer
.	O
ws_escape	array
[	O
!	O
q	int
]	O
=	O
NULL	O
;	O
}	O
set_escape_string	function
(	O
&	O
ws	pointer
,	O
&	O
wsflags	pointer
,	O
q	int
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
opt	pointer
,	O
"dooffs"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
negate	int
)	O
wsflags	pointer
&=	O
~	O
WRDSF_DOOFFS	int
;	O
else	O
{	O
char	O
*	O
p	pointer
;	O
i	long
++	O
;	O
if	O
(	O
i	long
==	O
argc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: missing arguments for %s\n"	pointer
,	O
progname	pointer
,	O
opt	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
ws	pointer
.	O
ws_offs	long
=	O
strtoul	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid number: %s\n"	pointer
,	O
progname	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
i	long
++	O
;	O
if	O
(	O
i	long
+	O
ws	pointer
.	O
ws_offs	long
>	O
argc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: not enough arguments for %s\n"	pointer
,	O
progname	pointer
,	O
opt	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
offarg	int
=	O
i	long
;	O
i	long
+=	O
ws	pointer
.	O
ws_offs	long
-	O
1	int
;	O
wsflags	pointer
|=	O
WRDSF_DOOFFS	int
;	O
}	O
continue	O
;	O
}	O
if	O
(	O
kwxlat	function
(	O
opt_keytab	array
,	O
opt	pointer
,	O
&	O
flag	int
)	O
==	O
0	int
)	O
{	O
wsflags	pointer
|=	O
WRDSF_OPTIONS	int
;	O
if	O
(	O
negate	int
)	O
ws	pointer
.	O
ws_options	int
&=	O
~	O
flag	int
;	O
else	O
ws	pointer
.	O
ws_options	int
|=	O
flag	int
;	O
continue	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
opt	pointer
,	O
"maxwords"	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
p	pointer
;	O
wsflags	pointer
|=	O
WRDSF_OPTIONS	int
;	O
ws	pointer
.	O
ws_options	int
|=	O
WRDSO_MAXWORDS	int
;	O
i	long
++	O
;	O
if	O
(	O
i	long
==	O
argc	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: missing arguments for %s\n"	pointer
,	O
progname	pointer
,	O
opt	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
ws	pointer
.	O
ws_maxwords	long
=	O
strtoul	function
(	O
argv	pointer
[	O
i	long
]	O
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: invalid number: %s\n"	pointer
,	O
progname	pointer
,	O
argv	pointer
[	O
i	long
]	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
continue	O
;	O
}	O
if	O
(	O
strchr	function
(	O
opt	pointer
,	O
'='	O
)	O
)	O
{	O
assert	O
(	O
fenvidx	long
<	O
fenvmax	long
-	O
1	int
)	O
;	O
fenvbase	array
[	O
fenvidx	long
++	O
]	O
=	O
opt	pointer
;	O
continue	O
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: unrecognized argument: %s\n"	pointer
,	O
progname	pointer
,	O
opt	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
fenvidx	long
)	O
{	O
fenvbase	array
[	O
fenvidx	long
]	O
=	O
NULL	O
;	O
wsflags	pointer
|=	O
WRDSF_GETVAR	int
|	O
WRDSF_CLOSURE	int
;	O
ws	pointer
.	O
ws_getvar	pointer
=	O
wsp_getvar	function
;	O
ws	pointer
.	O
ws_closure	pointer
=	O
fenvbase	array
;	O
}	O
switch	O
(	O
use_env	int
)	O
{	O
case	O
env_null	int
:	O
wsflags	pointer
|=	O
WRDSF_ENV	int
;	O
ws	pointer
.	O
ws_env	pointer
=	O
NULL	O
;	O
break	O
;	O
case	O
env_none	int
:	O
break	O
;	O
case	O
env_sys	int
:	O
wsflags	pointer
|=	O
WRDSF_ENV	int
;	O
if	O
(	O
wsflags	pointer
&	O
WRDSF_ENV_KV	int
)	O
ws	pointer
.	O
ws_env	pointer
=	O
(	O
const	O
char	O
*	O
*	O
)	O
make_env_kv	function
(	O
)	O
;	O
else	O
ws	pointer
.	O
ws_env	pointer
=	O
(	O
const	O
char	O
*	O
*	O
)	O
environ	pointer
;	O
break	O
;	O
}	O
if	O
(	O
!	O
(	O
wsflags	pointer
&	O
WRDSF_NOCMD	int
)	O
)	O
ws	pointer
.	O
ws_command	pointer
=	O
wsp_runcmd	function
;	O
if	O
(	O
wsflags	pointer
&	O
WRDSF_INCREMENTAL	int
)	O
trimnl_option	int
=	O
1	int
;	O
next_call	int
=	O
0	int
;	O
while	O
(	O
(	O
ptr	pointer
=	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
(	O
buf	pointer
)	O
,	O
stdin	pointer
)	O
)	O
)	O
{	O
int	O
rc	int
;	O
size_t	long
i	long
;	O
if	O
(	O
trimnl_option	int
)	O
{	O
size_t	long
len	long
=	O
strlen	function
(	O
ptr	pointer
)	O
;	O
if	O
(	O
len	long
&&	O
ptr	pointer
[	O
len	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
ptr	pointer
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
wsflags	pointer
&	O
WRDSF_INCREMENTAL	int
)	O
{	O
if	O
(	O
next_call	int
)	O
{	O
if	O
(	O
*	O
ptr	pointer
==	O
0	int
)	O
ptr	pointer
=	O
NULL	O
;	O
else	O
free	function
(	O
saved_ptr	pointer
)	O
;	O
}	O
else	O
next_call	int
=	O
1	int
;	O
if	O
(	O
ptr	pointer
)	O
{	O
ptr	pointer
=	O
saved_ptr	pointer
=	O
strdup	function
(	O
ptr	pointer
)	O
;	O
assert	O
(	O
ptr	pointer
!=	O
NULL	O
)	O
;	O
}	O
}	O
rc	int
=	O
wordsplit	struct
(	O
ptr	pointer
,	O
&	O
ws	pointer
,	O
wsflags	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
!	O
(	O
wsflags	pointer
&	O
WRDSF_SHOWERR	int
)	O
)	O
wordsplit_perror	function
(	O
&	O
ws	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
offarg	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	pointer
.	O
ws_offs	long
;	O
i	long
++	O
)	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
=	O
argv	pointer
[	O
offarg	int
+	O
i	long
]	O
;	O
offarg	int
=	O
0	int
;	O
}	O
if	O
(	O
appendc	int
)	O
{	O
rc	int
=	O
wordsplit_append	function
(	O
&	O
ws	pointer
,	O
appendc	int
,	O
appendv	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
!	O
(	O
wsflags	pointer
&	O
WRDSF_SHOWERR	int
)	O
)	O
wordsplit_perror	function
(	O
&	O
ws	pointer
)	O
;	O
continue	O
;	O
}	O
}	O
wsflags	pointer
|=	O
WRDSF_REUSE	int
|	O
(	O
ws	pointer
.	O
ws_flags	int
&	O
WRDSF_ENV	int
)	O
;	O
printf	function
(	O
"NF: %lu"	pointer
,	O
(	O
unsigned	O
long	O
)	O
ws	pointer
.	O
ws_wordc	long
)	O
;	O
if	O
(	O
wsflags	pointer
&	O
WRDSF_DOOFFS	int
)	O
printf	function
(	O
" (%lu)"	pointer
,	O
(	O
unsigned	O
long	O
)	O
ws	pointer
.	O
ws_offs	long
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ws	pointer
.	O
ws_offs	long
;	O
i	long
++	O
)	O
{	O
printf	function
(	O
"(%lu): "	pointer
,	O
(	O
unsigned	O
long	O
)	O
i	long
)	O
;	O
print_qword	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
,	O
plaintext_option	int
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
for	O
(	O
;	O
i	long
<	O
ws	pointer
.	O
ws_offs	long
+	O
ws	pointer
.	O
ws_wordc	long
;	O
i	long
++	O
)	O
{	O
printf	function
(	O
"%lu: "	pointer
,	O
(	O
unsigned	O
long	O
)	O
i	long
)	O
;	O
print_qword	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
i	long
]	O
,	O
plaintext_option	int
)	O
;	O
putchar	function
(	O
'\n'	O
)	O
;	O
}	O
printf	function
(	O
"TOTAL: %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
ws	pointer
.	O
ws_wordi	long
)	O
;	O
}	O
return	O
0	int
;	O
}	O
