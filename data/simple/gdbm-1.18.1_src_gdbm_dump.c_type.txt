char	O
*	O
parseopt_program_doc	pointer
=	O
"dump a GDBM database to a file"	pointer
;	O
char	O
*	O
parseopt_program_args	pointer
=	O
"DB_FILE [FILE]"	pointer
;	O
struct	O
gdbm_option	struct
optab	array
[	O
]	O
=	O
{	O
{	O
'H'	O
,	O
"format"	pointer
,	O
"binary|ascii|0|1"	pointer
,	O
N_	O
(	O
"select dump format"	pointer
)	O
}	O
,	O
{	O
0	int
}	O
}	O
;	O
int	O
format	int
=	O
GDBM_DUMP_FMT_ASCII	int
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
GDBM_FILE	pointer
dbf	pointer
;	O
int	O
rc	int
,	O
opt	int
;	O
char	O
*	O
dbname	pointer
,	O
*	O
filename	pointer
;	O
FILE	struct
*	O
fp	pointer
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
set_progname	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
for	O
(	O
opt	int
=	O
parseopt_first	function
(	O
argc	int
,	O
argv	pointer
,	O
optab	array
)	O
;	O
opt	int
!=	O
EOF	O
;	O
opt	int
=	O
parseopt_next	function
(	O
)	O
)	O
{	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'H'	O
:	O
if	O
(	O
strcmp	function
(	O
optarg	pointer
,	O
"binary"	pointer
)	O
==	O
0	int
)	O
format	int
=	O
GDBM_DUMP_FMT_BINARY	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
optarg	pointer
,	O
"ascii"	pointer
)	O
==	O
0	int
)	O
format	int
=	O
GDBM_DUMP_FMT_ASCII	int
;	O
else	O
{	O
format	int
=	O
atoi	function
(	O
optarg	pointer
)	O
;	O
switch	O
(	O
format	int
)	O
{	O
case	O
GDBM_DUMP_FMT_BINARY	int
:	O
case	O
GDBM_DUMP_FMT_ASCII	int
:	O
break	O
;	O
default	O
:	O
error	function
(	O
_	O
(	O
"unknown dump format"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_USAGE	int
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
error	function
(	O
_	O
(	O
"unknown option"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_USAGE	int
)	O
;	O
}	O
}	O
argc	int
-=	O
optind	int
;	O
argv	pointer
+=	O
optind	int
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
{	O
parseopt_print_help	function
(	O
)	O
;	O
exit	function
(	O
EXIT_OK	int
)	O
;	O
}	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
error	function
(	O
_	O
(	O
"too many arguments; try `%s -h' for more info"	pointer
)	O
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_USAGE	int
)	O
;	O
}	O
dbname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
if	O
(	O
argc	int
==	O
2	int
)	O
filename	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
else	O
filename	pointer
=	O
NULL	O
;	O
if	O
(	O
!	O
filename	pointer
||	O
strcmp	function
(	O
filename	pointer
,	O
"-"	pointer
)	O
==	O
0	int
)	O
{	O
filename	pointer
=	O
"<stdout>"	pointer
;	O
fp	pointer
=	O
stdout	pointer
;	O
}	O
else	O
{	O
fp	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
sys_perror	function
(	O
errno	O
,	O
_	O
(	O
"cannot open %s"	pointer
)	O
,	O
filename	pointer
)	O
;	O
exit	function
(	O
EXIT_FATAL	int
)	O
;	O
}	O
}	O
dbf	pointer
=	O
gdbm_open	function
(	O
dbname	pointer
,	O
0	int
,	O
GDBM_READER	int
,	O
0600	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
dbf	pointer
)	O
{	O
gdbm_perror	function
(	O
_	O
(	O
"gdbm_open failed"	pointer
)	O
)	O
;	O
exit	function
(	O
EXIT_FATAL	int
)	O
;	O
}	O
rc	int
=	O
gdbm_dump_to_file	function
(	O
dbf	pointer
,	O
fp	pointer
,	O
format	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
gdbm_perror	function
(	O
_	O
(	O
"dump error"	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
gdbm_close	function
(	O
dbf	pointer
)	O
;	O
exit	function
(	O
rc	int
==	O
GDBM_NO_ERROR	int
?	O
EXIT_OK	int
:	O
EXIT_FATAL	int
)	O
;	O
}	O
