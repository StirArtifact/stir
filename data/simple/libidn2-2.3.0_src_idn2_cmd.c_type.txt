const	O
char	O
*	O
gengetopt_args_info_purpose	pointer
=	O
""	pointer
;	O
const	O
char	O
*	O
gengetopt_args_info_usage	pointer
=	O
"Usage: idn2 [OPTION]... [STRING]..."	pointer
;	O
const	O
char	O
*	O
gengetopt_args_info_versiontext	pointer
=	O
""	pointer
;	O
const	O
char	O
*	O
gengetopt_args_info_description	pointer
=	O
""	pointer
;	O
const	O
char	O
*	O
gengetopt_args_info_help	array
[	O
]	O
=	O
{	O
"  -h, --help                Print help and exit"	pointer
,	O
"  -V, --version             Print version and exit"	pointer
,	O
"  -d, --decode              Decode (punycode) domain name"	pointer
,	O
"  -l, --lookup              Lookup domain name (default)"	pointer
,	O
"  -r, --register            Register label"	pointer
,	O
"  -T, --tr46t               Enable TR46 transitional processing  (default=off)"	pointer
,	O
"  -N, --tr46nt              Enable TR46 non-transitional processing\n                              (default=off)"	pointer
,	O
"      --no-tr46             Disable TR46 processing  (default=off)"	pointer
,	O
"      --usestd3asciirules   Enable STD3 ASCII rules  (default=off)"	pointer
,	O
"      --no-alabelroundtrip  Disable ALabel roundtrip for lookups  (default=off)"	pointer
,	O
"      --debug               Print debugging information  (default=off)"	pointer
,	O
"      --quiet               Silent operation  (default=off)"	pointer
,	O
0	int
}	O
;	O
typedef	O
enum	O
{	O
ARG_NO	int
,	O
ARG_FLAG	int
}	O
cmdline_parser_arg_type	enum
;	O
static	O
void	O
clear_given	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
;	O
static	O
void	O
clear_args	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
;	O
static	O
int	O
cmdline_parser_internal	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
struct	O
cmdline_parser_params	struct
*	O
params	pointer
,	O
const	O
char	O
*	O
additional_error	pointer
)	O
;	O
static	O
char	O
*	O
gengetopt_strdup	function
(	O
const	O
char	O
*	O
s	pointer
)	O
;	O
static	O
void	O
clear_given	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
args_info	pointer
->	O
help_given	int
=	O
0	int
;	O
args_info	pointer
->	O
version_given	int
=	O
0	int
;	O
args_info	pointer
->	O
decode_given	int
=	O
0	int
;	O
args_info	pointer
->	O
lookup_given	int
=	O
0	int
;	O
args_info	pointer
->	O
register_given	int
=	O
0	int
;	O
args_info	pointer
->	O
tr46t_given	int
=	O
0	int
;	O
args_info	pointer
->	O
tr46nt_given	int
=	O
0	int
;	O
args_info	pointer
->	O
no_tr46_given	int
=	O
0	int
;	O
args_info	pointer
->	O
usestd3asciirules_given	int
=	O
0	int
;	O
args_info	pointer
->	O
no_alabelroundtrip_given	int
=	O
0	int
;	O
args_info	pointer
->	O
debug_given	int
=	O
0	int
;	O
args_info	pointer
->	O
quiet_given	int
=	O
0	int
;	O
}	O
static	O
void	O
clear_args	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
FIX_UNUSED	O
(	O
args_info	pointer
)	O
;	O
args_info	pointer
->	O
tr46t_flag	int
=	O
0	int
;	O
args_info	pointer
->	O
tr46nt_flag	int
=	O
0	int
;	O
args_info	pointer
->	O
no_tr46_flag	int
=	O
0	int
;	O
args_info	pointer
->	O
usestd3asciirules_flag	int
=	O
0	int
;	O
args_info	pointer
->	O
no_alabelroundtrip_flag	int
=	O
0	int
;	O
args_info	pointer
->	O
debug_flag	int
=	O
0	int
;	O
args_info	pointer
->	O
quiet_flag	int
=	O
0	int
;	O
}	O
static	O
void	O
init_args_info	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
args_info	pointer
->	O
help_help	pointer
=	O
gengetopt_args_info_help	array
[	O
0	int
]	O
;	O
args_info	pointer
->	O
version_help	pointer
=	O
gengetopt_args_info_help	array
[	O
1	int
]	O
;	O
args_info	pointer
->	O
decode_help	pointer
=	O
gengetopt_args_info_help	array
[	O
2	int
]	O
;	O
args_info	pointer
->	O
lookup_help	pointer
=	O
gengetopt_args_info_help	array
[	O
3	int
]	O
;	O
args_info	pointer
->	O
register_help	pointer
=	O
gengetopt_args_info_help	array
[	O
4	int
]	O
;	O
args_info	pointer
->	O
tr46t_help	pointer
=	O
gengetopt_args_info_help	array
[	O
5	int
]	O
;	O
args_info	pointer
->	O
tr46nt_help	pointer
=	O
gengetopt_args_info_help	array
[	O
6	int
]	O
;	O
args_info	pointer
->	O
no_tr46_help	pointer
=	O
gengetopt_args_info_help	array
[	O
7	int
]	O
;	O
args_info	pointer
->	O
usestd3asciirules_help	pointer
=	O
gengetopt_args_info_help	array
[	O
8	int
]	O
;	O
args_info	pointer
->	O
no_alabelroundtrip_help	pointer
=	O
gengetopt_args_info_help	array
[	O
9	int
]	O
;	O
args_info	pointer
->	O
debug_help	pointer
=	O
gengetopt_args_info_help	array
[	O
10	int
]	O
;	O
args_info	pointer
->	O
quiet_help	pointer
=	O
gengetopt_args_info_help	array
[	O
11	int
]	O
;	O
}	O
void	O
cmdline_parser_print_version	function
(	O
void	O
)	O
{	O
printf	function
(	O
"%s %s\n"	pointer
,	O
(	O
strlen	function
(	O
CMDLINE_PARSER_PACKAGE_NAME	pointer
)	O
?	O
CMDLINE_PARSER_PACKAGE_NAME	pointer
:	O
CMDLINE_PARSER_PACKAGE	pointer
)	O
,	O
CMDLINE_PARSER_VERSION	O
)	O
;	O
if	O
(	O
strlen	function
(	O
gengetopt_args_info_versiontext	pointer
)	O
>	O
0	int
)	O
printf	function
(	O
"\n%s\n"	pointer
,	O
gengetopt_args_info_versiontext	pointer
)	O
;	O
}	O
static	O
void	O
print_help_common	function
(	O
void	O
)	O
{	O
cmdline_parser_print_version	function
(	O
)	O
;	O
if	O
(	O
strlen	function
(	O
gengetopt_args_info_purpose	pointer
)	O
>	O
0	int
)	O
printf	function
(	O
"\n%s\n"	pointer
,	O
gengetopt_args_info_purpose	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
gengetopt_args_info_usage	pointer
)	O
>	O
0	int
)	O
printf	function
(	O
"\n%s\n"	pointer
,	O
gengetopt_args_info_usage	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
if	O
(	O
strlen	function
(	O
gengetopt_args_info_description	pointer
)	O
>	O
0	int
)	O
printf	function
(	O
"%s\n\n"	pointer
,	O
gengetopt_args_info_description	pointer
)	O
;	O
}	O
void	O
cmdline_parser_print_help	function
(	O
void	O
)	O
{	O
int	O
i	int
=	O
0	int
;	O
print_help_common	function
(	O
)	O
;	O
while	O
(	O
gengetopt_args_info_help	array
[	O
i	int
]	O
)	O
printf	function
(	O
"%s\n"	pointer
,	O
gengetopt_args_info_help	array
[	O
i	int
++	O
]	O
)	O
;	O
}	O
void	O
cmdline_parser_init	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
clear_given	function
(	O
args_info	pointer
)	O
;	O
clear_args	function
(	O
args_info	pointer
)	O
;	O
init_args_info	function
(	O
args_info	pointer
)	O
;	O
args_info	pointer
->	O
inputs	pointer
=	O
0	int
;	O
args_info	pointer
->	O
inputs_num	int
=	O
0	int
;	O
}	O
void	O
cmdline_parser_params_init	function
(	O
struct	O
cmdline_parser_params	struct
*	O
params	pointer
)	O
{	O
if	O
(	O
params	pointer
)	O
{	O
params	pointer
->	O
override	int
=	O
0	int
;	O
params	pointer
->	O
initialize	int
=	O
1	int
;	O
params	pointer
->	O
check_required	int
=	O
1	int
;	O
params	pointer
->	O
check_ambiguity	int
=	O
0	int
;	O
params	pointer
->	O
print_errors	int
=	O
1	int
;	O
}	O
}	O
struct	O
cmdline_parser_params	struct
*	O
cmdline_parser_params_create	function
(	O
void	O
)	O
{	O
struct	O
cmdline_parser_params	struct
*	O
params	pointer
=	O
(	O
struct	O
cmdline_parser_params	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
struct	O
cmdline_parser_params	struct
)	O
)	O
;	O
cmdline_parser_params_init	function
(	O
params	pointer
)	O
;	O
return	O
params	pointer
;	O
}	O
static	O
void	O
cmdline_parser_release	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
unsigned	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
args_info	pointer
->	O
inputs_num	int
;	O
++	O
i	int
)	O
free	function
(	O
args_info	pointer
->	O
inputs	pointer
[	O
i	int
]	O
)	O
;	O
if	O
(	O
args_info	pointer
->	O
inputs_num	int
)	O
free	function
(	O
args_info	pointer
->	O
inputs	pointer
)	O
;	O
clear_given	function
(	O
args_info	pointer
)	O
;	O
}	O
static	O
void	O
write_into_file	function
(	O
FILE	struct
*	O
outfile	pointer
,	O
const	O
char	O
*	O
opt	pointer
,	O
const	O
char	O
*	O
arg	pointer
,	O
const	O
char	O
*	O
values	array
[	O
]	O
)	O
{	O
FIX_UNUSED	O
(	O
values	array
)	O
;	O
if	O
(	O
arg	pointer
)	O
{	O
fprintf	function
(	O
outfile	pointer
,	O
"%s=\"%s\"\n"	pointer
,	O
opt	pointer
,	O
arg	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
outfile	pointer
,	O
"%s\n"	pointer
,	O
opt	pointer
)	O
;	O
}	O
}	O
int	O
cmdline_parser_dump	function
(	O
FILE	struct
*	O
outfile	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
int	O
i	int
=	O
0	int
;	O
if	O
(	O
!	O
outfile	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: cannot dump options to stream\n"	pointer
,	O
CMDLINE_PARSER_PACKAGE	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
args_info	pointer
->	O
help_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"help"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
version_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"version"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
decode_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"decode"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
lookup_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"lookup"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
register_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"register"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
tr46t_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"tr46t"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
tr46nt_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"tr46nt"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
no_tr46_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"no-tr46"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
usestd3asciirules_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"usestd3asciirules"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
no_alabelroundtrip_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"no-alabelroundtrip"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
debug_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"debug"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
args_info	pointer
->	O
quiet_given	int
)	O
write_into_file	function
(	O
outfile	pointer
,	O
"quiet"	pointer
,	O
0	int
,	O
0	int
)	O
;	O
i	int
=	O
EXIT_SUCCESS	int
;	O
return	O
i	int
;	O
}	O
int	O
cmdline_parser_file_save	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
FILE	struct
*	O
outfile	pointer
;	O
int	O
i	int
=	O
0	int
;	O
outfile	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
outfile	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: cannot open file for writing: %s\n"	pointer
,	O
CMDLINE_PARSER_PACKAGE	pointer
,	O
filename	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
i	int
=	O
cmdline_parser_dump	function
(	O
outfile	pointer
,	O
args_info	pointer
)	O
;	O
fclose	function
(	O
outfile	pointer
)	O
;	O
return	O
i	int
;	O
}	O
void	O
cmdline_parser_free	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
cmdline_parser_release	function
(	O
args_info	pointer
)	O
;	O
}	O
char	O
*	O
gengetopt_strdup	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
char	O
*	O
result	pointer
=	O
0	int
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
result	pointer
;	O
result	pointer
=	O
(	O
char	O
*	O
)	O
malloc	function
(	O
strlen	function
(	O
s	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
result	pointer
==	O
(	O
char	O
*	O
)	O
0	int
)	O
return	O
(	O
char	O
*	O
)	O
0	int
;	O
strcpy	function
(	O
result	pointer
,	O
s	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
int	O
cmdline_parser	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
)	O
{	O
return	O
cmdline_parser2	function
(	O
argc	int
,	O
argv	pointer
,	O
args_info	pointer
,	O
0	int
,	O
1	int
,	O
1	int
)	O
;	O
}	O
int	O
cmdline_parser_ext	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
struct	O
cmdline_parser_params	struct
*	O
params	pointer
)	O
{	O
int	O
result	pointer
;	O
result	pointer
=	O
cmdline_parser_internal	function
(	O
argc	int
,	O
argv	pointer
,	O
args_info	pointer
,	O
params	pointer
,	O
0	int
)	O
;	O
if	O
(	O
result	pointer
==	O
EXIT_FAILURE	int
)	O
{	O
cmdline_parser_free	function
(	O
args_info	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
return	O
result	pointer
;	O
}	O
int	O
cmdline_parser2	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
int	O
override	int
,	O
int	O
initialize	int
,	O
int	O
check_required	int
)	O
{	O
int	O
result	pointer
;	O
struct	O
cmdline_parser_params	struct
params	pointer
;	O
params	pointer
.	O
override	int
=	O
override	int
;	O
params	pointer
.	O
initialize	int
=	O
initialize	int
;	O
params	pointer
.	O
check_required	int
=	O
check_required	int
;	O
params	pointer
.	O
check_ambiguity	int
=	O
0	int
;	O
params	pointer
.	O
print_errors	int
=	O
1	int
;	O
result	pointer
=	O
cmdline_parser_internal	function
(	O
argc	int
,	O
argv	pointer
,	O
args_info	pointer
,	O
&	O
params	pointer
,	O
0	int
)	O
;	O
if	O
(	O
result	pointer
==	O
EXIT_FAILURE	int
)	O
{	O
cmdline_parser_free	function
(	O
args_info	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
return	O
result	pointer
;	O
}	O
int	O
cmdline_parser_required	function
(	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
const	O
char	O
*	O
prog_name	pointer
)	O
{	O
FIX_UNUSED	O
(	O
args_info	pointer
)	O
;	O
FIX_UNUSED	O
(	O
prog_name	pointer
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
static	O
char	O
*	O
package_name	pointer
=	O
0	int
;	O
static	O
int	O
update_arg	function
(	O
void	O
*	O
field	pointer
,	O
char	O
*	O
*	O
orig_field	pointer
,	O
unsigned	O
int	O
*	O
field_given	pointer
,	O
unsigned	O
int	O
*	O
prev_given	pointer
,	O
char	O
*	O
value	pointer
,	O
const	O
char	O
*	O
possible_values	array
[	O
]	O
,	O
const	O
char	O
*	O
default_value	pointer
,	O
cmdline_parser_arg_type	enum
arg_type	enum
,	O
int	O
check_ambiguity	int
,	O
int	O
override	int
,	O
int	O
no_free	int
,	O
int	O
multiple_option	int
,	O
const	O
char	O
*	O
long_opt	pointer
,	O
char	O
short_opt	char
,	O
const	O
char	O
*	O
additional_error	pointer
)	O
{	O
char	O
*	O
stop_char	pointer
=	O
0	int
;	O
const	O
char	O
*	O
val	int
=	O
value	pointer
;	O
int	O
found	int
;	O
FIX_UNUSED	O
(	O
field	pointer
)	O
;	O
stop_char	pointer
=	O
0	int
;	O
found	int
=	O
0	int
;	O
if	O
(	O
!	O
multiple_option	int
&&	O
prev_given	pointer
&&	O
(	O
*	O
prev_given	pointer
||	O
(	O
check_ambiguity	int
&&	O
*	O
field_given	pointer
)	O
)	O
)	O
{	O
if	O
(	O
short_opt	char
!=	O
'-'	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: `--%s' (`-%c') option given more than once%s\n"	pointer
,	O
package_name	pointer
,	O
long_opt	pointer
,	O
short_opt	char
,	O
(	O
additional_error	pointer
?	O
additional_error	pointer
:	O
""	pointer
)	O
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: `--%s' option given more than once%s\n"	pointer
,	O
package_name	pointer
,	O
long_opt	pointer
,	O
(	O
additional_error	pointer
?	O
additional_error	pointer
:	O
""	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
FIX_UNUSED	O
(	O
default_value	pointer
)	O
;	O
if	O
(	O
field_given	pointer
&&	O
*	O
field_given	pointer
&&	O
!	O
override	int
)	O
return	O
0	int
;	O
if	O
(	O
prev_given	pointer
)	O
(	O
*	O
prev_given	pointer
)	O
++	O
;	O
if	O
(	O
field_given	pointer
)	O
(	O
*	O
field_given	pointer
)	O
++	O
;	O
if	O
(	O
possible_values	array
)	O
val	int
=	O
possible_values	array
[	O
found	int
]	O
;	O
switch	O
(	O
arg_type	enum
)	O
{	O
case	O
ARG_FLAG	int
:	O
*	O
(	O
(	O
int	O
*	O
)	O
field	pointer
)	O
=	O
!	O
*	O
(	O
(	O
int	O
*	O
)	O
field	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
;	O
switch	O
(	O
arg_type	enum
)	O
{	O
case	O
ARG_NO	int
:	O
case	O
ARG_FLAG	int
:	O
break	O
;	O
default	O
:	O
if	O
(	O
value	pointer
&&	O
orig_field	pointer
)	O
{	O
if	O
(	O
no_free	int
)	O
{	O
*	O
orig_field	pointer
=	O
value	pointer
;	O
}	O
else	O
{	O
if	O
(	O
*	O
orig_field	pointer
)	O
free	function
(	O
*	O
orig_field	pointer
)	O
;	O
*	O
orig_field	pointer
=	O
gengetopt_strdup	function
(	O
value	pointer
)	O
;	O
}	O
}	O
}	O
;	O
return	O
0	int
;	O
}	O
int	O
cmdline_parser_internal	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
struct	O
gengetopt_args_info	struct
*	O
args_info	pointer
,	O
struct	O
cmdline_parser_params	struct
*	O
params	pointer
,	O
const	O
char	O
*	O
additional_error	pointer
)	O
{	O
int	O
c	int
;	O
int	O
error_occurred	int
=	O
0	int
;	O
struct	O
gengetopt_args_info	struct
local_args_info	struct
;	O
int	O
override	int
;	O
int	O
initialize	int
;	O
int	O
check_required	int
;	O
int	O
check_ambiguity	int
;	O
package_name	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
override	int
=	O
params	pointer
->	O
override	int
;	O
initialize	int
=	O
params	pointer
->	O
initialize	int
;	O
check_required	int
=	O
params	pointer
->	O
check_required	int
;	O
check_ambiguity	int
=	O
params	pointer
->	O
check_ambiguity	int
;	O
if	O
(	O
initialize	int
)	O
cmdline_parser_init	function
(	O
args_info	pointer
)	O
;	O
cmdline_parser_init	function
(	O
&	O
local_args_info	struct
)	O
;	O
optarg	pointer
=	O
0	int
;	O
optind	int
=	O
0	int
;	O
opterr	int
=	O
params	pointer
->	O
print_errors	int
;	O
optopt	int
=	O
'?'	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct
long_options	array
[	O
]	O
=	O
{	O
{	O
"help"	pointer
,	O
0	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"version"	pointer
,	O
0	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"decode"	pointer
,	O
0	int
,	O
NULL	O
,	O
'd'	O
}	O
,	O
{	O
"lookup"	pointer
,	O
0	int
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"register"	pointer
,	O
0	int
,	O
NULL	O
,	O
'r'	O
}	O
,	O
{	O
"tr46t"	pointer
,	O
0	int
,	O
NULL	O
,	O
'T'	O
}	O
,	O
{	O
"tr46nt"	pointer
,	O
0	int
,	O
NULL	O
,	O
'N'	O
}	O
,	O
{	O
"no-tr46"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"usestd3asciirules"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"no-alabelroundtrip"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"debug"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
"quiet"	pointer
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"hVdlrTN"	pointer
,	O
long_options	array
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'h'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
help_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
help_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"help"	pointer
,	O
'h'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
cmdline_parser_free	function
(	O
&	O
local_args_info	struct
)	O
;	O
return	O
0	int
;	O
break	O
;	O
case	O
'V'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
version_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
version_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"version"	pointer
,	O
'V'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
cmdline_parser_free	function
(	O
&	O
local_args_info	struct
)	O
;	O
return	O
0	int
;	O
break	O
;	O
case	O
'd'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
decode_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
decode_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"decode"	pointer
,	O
'd'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'l'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
lookup_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
lookup_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"lookup"	pointer
,	O
'l'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'r'	O
:	O
if	O
(	O
update_arg	function
(	O
0	int
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
register_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
register_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_NO	int
,	O
check_ambiguity	int
,	O
override	int
,	O
0	int
,	O
0	int
,	O
"register"	pointer
,	O
'r'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
tr46t_flag	int
)	O
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
tr46t_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
tr46t_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_FLAG	int
,	O
check_ambiguity	int
,	O
override	int
,	O
1	int
,	O
0	int
,	O
"tr46t"	pointer
,	O
'T'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
'N'	O
:	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
tr46nt_flag	int
)	O
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
tr46nt_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
tr46nt_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_FLAG	int
,	O
check_ambiguity	int
,	O
override	int
,	O
1	int
,	O
0	int
,	O
"tr46nt"	pointer
,	O
'N'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
break	O
;	O
case	O
0	int
:	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"no-tr46"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
no_tr46_flag	int
)	O
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
no_tr46_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
no_tr46_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_FLAG	int
,	O
check_ambiguity	int
,	O
override	int
,	O
1	int
,	O
0	int
,	O
"no-tr46"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"usestd3asciirules"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
usestd3asciirules_flag	int
)	O
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
usestd3asciirules_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
usestd3asciirules_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_FLAG	int
,	O
check_ambiguity	int
,	O
override	int
,	O
1	int
,	O
0	int
,	O
"usestd3asciirules"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"no-alabelroundtrip"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
no_alabelroundtrip_flag	int
)	O
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
no_alabelroundtrip_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
no_alabelroundtrip_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_FLAG	int
,	O
check_ambiguity	int
,	O
override	int
,	O
1	int
,	O
0	int
,	O
"no-alabelroundtrip"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"debug"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
debug_flag	int
)	O
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
debug_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
debug_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_FLAG	int
,	O
check_ambiguity	int
,	O
override	int
,	O
1	int
,	O
0	int
,	O
"debug"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
long_options	array
[	O
option_index	int
]	O
.	O
name	pointer
,	O
"quiet"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
update_arg	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
args_info	pointer
->	O
quiet_flag	int
)	O
,	O
0	int
,	O
&	O
(	O
args_info	pointer
->	O
quiet_given	int
)	O
,	O
&	O
(	O
local_args_info	struct
.	O
quiet_given	int
)	O
,	O
optarg	pointer
,	O
0	int
,	O
0	int
,	O
ARG_FLAG	int
,	O
check_ambiguity	int
,	O
override	int
,	O
1	int
,	O
0	int
,	O
"quiet"	pointer
,	O
'-'	O
,	O
additional_error	pointer
)	O
)	O
goto	O
failure	O
;	O
}	O
break	O
;	O
case	O
'?'	O
:	O
goto	O
failure	O
;	O
default	O
:	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: option unknown: %c%s\n"	pointer
,	O
CMDLINE_PARSER_PACKAGE	pointer
,	O
c	int
,	O
(	O
additional_error	pointer
?	O
additional_error	pointer
:	O
""	pointer
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
}	O
cmdline_parser_release	function
(	O
&	O
local_args_info	struct
)	O
;	O
if	O
(	O
error_occurred	int
)	O
return	O
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
int	O
i	int
=	O
0	int
;	O
int	O
found_prog_name	int
=	O
0	int
;	O
i	int
=	O
optind	int
;	O
while	O
(	O
i	int
<	O
argc	int
)	O
if	O
(	O
argv	pointer
[	O
i	int
++	O
]	O
==	O
argv	pointer
[	O
0	int
]	O
)	O
{	O
found_prog_name	int
=	O
1	int
;	O
break	O
;	O
}	O
i	int
=	O
0	int
;	O
args_info	pointer
->	O
inputs_num	int
=	O
argc	int
-	O
optind	int
-	O
found_prog_name	int
;	O
args_info	pointer
->	O
inputs	pointer
=	O
(	O
char	O
*	O
*	O
)	O
(	O
malloc	function
(	O
(	O
args_info	pointer
->	O
inputs_num	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
)	O
;	O
while	O
(	O
optind	int
<	O
argc	int
)	O
if	O
(	O
argv	pointer
[	O
optind	int
++	O
]	O
!=	O
argv	pointer
[	O
0	int
]	O
)	O
args_info	pointer
->	O
inputs	pointer
[	O
i	int
++	O
]	O
=	O
gengetopt_strdup	function
(	O
argv	pointer
[	O
optind	int
-	O
1	int
]	O
)	O
;	O
}	O
return	O
0	int
;	O
failure	O
:	O
cmdline_parser_release	function
(	O
&	O
local_args_info	struct
)	O
;	O
return	O
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
