const	O
char	O
statsb_rcsid	array
[	O
]	O
=	O
"$Id: statsb.c,v 1.20 2002/03/05 19:10:42 ian Rel $"	pointer
;	O
static	O
int	O
issettime	function
P	O
(	O
(	O
const	O
char	O
*	O
z	pointer
,	O
time_t	long
inow	long
)	O
)	O
;	O
static	O
boolean	int
fskill_or_rejuv	function
P	O
(	O
(	O
pointer	pointer
puuconf	pointer
,	O
const	O
char	O
*	O
zid	pointer
,	O
boolean	int
fkill	int
)	O
)	O
;	O
static	O
int	O
issettime	function
(	O
z	pointer
,	O
inow	long
)	O
const	O
char	O
*	O
z	pointer
;	O
time_t	long
inow	long
;	O
{	O
struct	O
utimbuf	struct
s	struct
;	O
s	struct
.	O
actime	long
=	O
inow	long
;	O
s	struct
.	O
modtime	long
=	O
inow	long
;	O
return	O
utime	function
(	O
(	O
char	O
*	O
)	O
z	pointer
,	O
&	O
s	struct
)	O
;	O
}	O
boolean	int
fsysdep_kill_job	function
(	O
puuconf	pointer
,	O
zid	pointer
)	O
pointer	pointer
puuconf	pointer
;	O
const	O
char	O
*	O
zid	pointer
;	O
{	O
return	O
fskill_or_rejuv	function
(	O
puuconf	pointer
,	O
zid	pointer
,	O
TRUE	O
)	O
;	O
}	O
boolean	int
fsysdep_rejuvenate_job	function
(	O
puuconf	pointer
,	O
zid	pointer
)	O
pointer	pointer
puuconf	pointer
;	O
const	O
char	O
*	O
zid	pointer
;	O
{	O
return	O
fskill_or_rejuv	function
(	O
puuconf	pointer
,	O
zid	pointer
,	O
FALSE	O
)	O
;	O
}	O
static	O
boolean	int
fskill_or_rejuv	function
(	O
puuconf	pointer
,	O
zid	pointer
,	O
fkill	int
)	O
pointer	pointer
puuconf	pointer
;	O
const	O
char	O
*	O
zid	pointer
;	O
boolean	int
fkill	int
;	O
{	O
char	O
*	O
zfile	pointer
;	O
char	O
*	O
zsys	pointer
;	O
char	O
bgrade	char
;	O
time_t	long
inow	long
=	O
0	int
;	O
int	O
iuuconf	int
;	O
struct	O
uuconf_system	struct
ssys	struct
;	O
FILE	struct
*	O
e	pointer
;	O
boolean	int
fret	int
;	O
char	O
*	O
zline	pointer
;	O
size_t	long
cline	long
;	O
int	O
isys	int
;	O
zfile	pointer
=	O
zsjobid_to_file	function
(	O
zid	pointer
,	O
&	O
zsys	pointer
,	O
&	O
bgrade	char
)	O
;	O
if	O
(	O
zfile	pointer
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
!	O
fkill	int
)	O
inow	long
=	O
time	function
(	O
(	O
time_t	long
*	O
)	O
NULL	O
)	O
;	O
iuuconf	int
=	O
uuconf_system_info	function
(	O
puuconf	pointer
,	O
zsys	pointer
,	O
&	O
ssys	struct
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
{	O
if	O
(	O
!	O
funknown_system	function
(	O
puuconf	pointer
,	O
zsys	pointer
,	O
&	O
ssys	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"%s: Bad job id"	pointer
,	O
zid	pointer
)	O
;	O
ubuffree	function
(	O
zfile	pointer
)	O
;	O
ubuffree	function
(	O
zsys	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
{	O
ulog_uuconf	function
(	O
LOG_ERROR	int
,	O
puuconf	pointer
,	O
iuuconf	int
)	O
;	O
ubuffree	function
(	O
zfile	pointer
)	O
;	O
ubuffree	function
(	O
zsys	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
e	pointer
=	O
fopen	function
(	O
zfile	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
e	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"%s: Job not found"	pointer
,	O
zid	pointer
)	O
;	O
else	O
ulog	function
(	O
LOG_ERROR	int
,	O
"fopen (%s): %s"	pointer
,	O
zfile	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
(	O
void	O
)	O
uuconf_system_free	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
)	O
;	O
ubuffree	function
(	O
zfile	pointer
)	O
;	O
ubuffree	function
(	O
zsys	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
fret	int
=	O
TRUE	O
;	O
zline	pointer
=	O
NULL	O
;	O
cline	long
=	O
0	int
;	O
while	O
(	O
getline	function
(	O
&	O
zline	pointer
,	O
&	O
cline	long
,	O
e	pointer
)	O
>	O
0	int
)	O
{	O
struct	O
scmd	struct
s	struct
;	O
if	O
(	O
!	O
fparse_cmd	function
(	O
zline	pointer
,	O
&	O
s	struct
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"Bad line in command file %s"	pointer
,	O
zfile	pointer
)	O
;	O
fret	int
=	O
FALSE	O
;	O
continue	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
s	struct
.	O
zuser	pointer
,	O
zsysdep_login_name	function
(	O
)	O
)	O
!=	O
0	int
&&	O
!	O
fsysdep_privileged	function
(	O
)	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"%s: Not submitted by you"	pointer
,	O
zid	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zline	pointer
)	O
;	O
(	O
void	O
)	O
fclose	function
(	O
e	pointer
)	O
;	O
(	O
void	O
)	O
uuconf_system_free	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
)	O
;	O
ubuffree	function
(	O
zfile	pointer
)	O
;	O
ubuffree	function
(	O
zsys	pointer
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
s	struct
.	O
bcmd	char
==	O
'S'	O
||	O
s	struct
.	O
bcmd	char
==	O
'E'	O
)	O
{	O
char	O
*	O
ztemp	pointer
;	O
ztemp	pointer
=	O
zsfind_file	function
(	O
s	struct
.	O
ztemp	pointer
,	O
ssys	struct
.	O
uuconf_zname	pointer
,	O
bgrade	char
)	O
;	O
if	O
(	O
ztemp	pointer
==	O
NULL	O
)	O
fret	int
=	O
FALSE	O
;	O
else	O
{	O
if	O
(	O
fkill	int
)	O
isys	int
=	O
remove	function
(	O
ztemp	pointer
)	O
;	O
else	O
isys	int
=	O
issettime	function
(	O
ztemp	pointer
,	O
inow	long
)	O
;	O
if	O
(	O
isys	int
!=	O
0	int
&&	O
errno	O
!=	O
ENOENT	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"%s (%s): %s"	pointer
,	O
fkill	int
?	O
"remove"	pointer
:	O
"utime"	pointer
,	O
ztemp	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
fret	int
=	O
FALSE	O
;	O
}	O
ubuffree	function
(	O
ztemp	pointer
)	O
;	O
}	O
}	O
}	O
xfree	function
(	O
(	O
pointer	pointer
)	O
zline	pointer
)	O
;	O
(	O
void	O
)	O
fclose	function
(	O
e	pointer
)	O
;	O
(	O
void	O
)	O
uuconf_system_free	function
(	O
puuconf	pointer
,	O
&	O
ssys	struct
)	O
;	O
ubuffree	function
(	O
zsys	pointer
)	O
;	O
if	O
(	O
fkill	int
)	O
isys	int
=	O
remove	function
(	O
zfile	pointer
)	O
;	O
else	O
isys	int
=	O
issettime	function
(	O
zfile	pointer
,	O
inow	long
)	O
;	O
if	O
(	O
isys	int
!=	O
0	int
&&	O
errno	O
!=	O
ENOENT	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"%s (%s): %s"	pointer
,	O
fkill	int
?	O
"remove"	pointer
:	O
"utime"	pointer
,	O
zfile	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
fret	int
=	O
FALSE	O
;	O
}	O
ubuffree	function
(	O
zfile	pointer
)	O
;	O
return	O
fret	int
;	O
}	O
long	O
ixsysdep_work_time	function
(	O
qsys	pointer
,	O
pseq	pointer
)	O
const	O
struct	O
uuconf_system	struct
*	O
qsys	pointer
;	O
pointer	pointer
pseq	pointer
;	O
{	O
char	O
*	O
zjobid	pointer
,	O
*	O
zfile	pointer
;	O
long	O
iret	long
;	O
zjobid	pointer
=	O
zsysdep_jobid	function
(	O
qsys	pointer
,	O
pseq	pointer
)	O
;	O
zfile	pointer
=	O
zsjobid_to_file	function
(	O
zjobid	pointer
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
zfile	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
ubuffree	function
(	O
zjobid	pointer
)	O
;	O
iret	long
=	O
ixsysdep_file_time	function
(	O
zfile	pointer
)	O
;	O
ubuffree	function
(	O
zfile	pointer
)	O
;	O
return	O
iret	long
;	O
}	O
long	O
ixsysdep_file_time	function
(	O
zfile	pointer
)	O
const	O
char	O
*	O
zfile	pointer
;	O
{	O
struct	O
stat	struct
s	struct
;	O
if	O
(	O
stat	struct
(	O
(	O
char	O
*	O
)	O
zfile	pointer
,	O
&	O
s	struct
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
ENOENT	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"stat (%s): %s"	pointer
,	O
zfile	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
ixsysdep_time	function
(	O
(	O
long	O
*	O
)	O
NULL	O
)	O
;	O
}	O
return	O
(	O
long	O
)	O
s	struct
.	O
st_mtime	O
;	O
}	O
boolean	int
fsysdep_touch_file	function
(	O
zfile	pointer
)	O
const	O
char	O
*	O
zfile	pointer
;	O
{	O
if	O
(	O
issettime	function
(	O
zfile	pointer
,	O
time	function
(	O
(	O
time_t	long
*	O
)	O
NULL	O
)	O
)	O
!=	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"utime (%s): %s"	pointer
,	O
zfile	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsysdep_all_status_init	function
(	O
phold	pointer
)	O
pointer	pointer
*	O
phold	pointer
;	O
{	O
DIR	struct
*	O
qdir	pointer
;	O
qdir	pointer
=	O
opendir	function
(	O
(	O
char	O
*	O
)	O
".Status"	pointer
)	O
;	O
if	O
(	O
qdir	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"opendir (.Status): %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
*	O
phold	pointer
=	O
(	O
pointer	pointer
)	O
qdir	pointer
;	O
return	O
TRUE	O
;	O
}	O
char	O
*	O
zsysdep_all_status	function
(	O
phold	pointer
,	O
pferr	pointer
,	O
qstat	pointer
)	O
pointer	pointer
phold	pointer
;	O
boolean	int
*	O
pferr	pointer
;	O
struct	O
sstatus	struct
*	O
qstat	pointer
;	O
{	O
DIR	struct
*	O
qdir	pointer
=	O
(	O
DIR	struct
*	O
)	O
phold	pointer
;	O
struct	O
dirent	struct
*	O
qentry	pointer
;	O
while	O
(	O
TRUE	O
)	O
{	O
errno	O
=	O
0	int
;	O
qentry	pointer
=	O
readdir	function
(	O
qdir	pointer
)	O
;	O
if	O
(	O
qentry	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
errno	O
==	O
0	int
)	O
*	O
pferr	pointer
=	O
FALSE	O
;	O
else	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"readdir: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
*	O
pferr	pointer
=	O
TRUE	O
;	O
}	O
return	O
NULL	O
;	O
}	O
if	O
(	O
qentry	pointer
->	O
d_name	array
[	O
0	int
]	O
!=	O
'.'	O
)	O
{	O
struct	O
uuconf_system	struct
ssys	struct
;	O
ssys	struct
.	O
uuconf_zname	pointer
=	O
qentry	pointer
->	O
d_name	array
;	O
if	O
(	O
fsysdep_get_status	function
(	O
&	O
ssys	struct
,	O
qstat	pointer
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
)	O
return	O
zbufcpy	function
(	O
qentry	pointer
->	O
d_name	array
)	O
;	O
}	O
}	O
}	O
void	O
usysdep_all_status_free	function
(	O
phold	pointer
)	O
pointer	pointer
phold	pointer
;	O
{	O
DIR	struct
*	O
qdir	pointer
=	O
(	O
DIR	struct
*	O
)	O
phold	pointer
;	O
(	O
void	O
)	O
closedir	function
(	O
qdir	pointer
)	O
;	O
}	O
boolean	int
fsysdep_lock_status	function
(	O
)	O
{	O
DIR	struct
*	O
qdir	pointer
;	O
struct	O
dirent	struct
*	O
qentry	pointer
;	O
int	O
calc	int
;	O
pid_t	int
*	O
pai	pointer
;	O
int	O
cgot	int
;	O
int	O
aidescs	pointer
[	O
3	int
]	O
;	O
char	O
*	O
zcopy	pointer
,	O
*	O
ztok	pointer
;	O
int	O
cargs	int
,	O
iarg	int
;	O
char	O
*	O
*	O
pazargs	pointer
;	O
qdir	pointer
=	O
opendir	function
(	O
(	O
char	O
*	O
)	O
zSlockdir	pointer
)	O
;	O
if	O
(	O
qdir	pointer
==	O
NULL	O
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"opendir (%s): %s"	pointer
,	O
zSlockdir	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
calc	int
=	O
0	int
;	O
pai	pointer
=	O
NULL	O
;	O
cgot	int
=	O
0	int
;	O
while	O
(	O
(	O
qentry	pointer
=	O
readdir	function
(	O
qdir	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
char	O
*	O
zname	pointer
;	O
int	O
o	int
;	O
char	O
ab	array
[	O
12	int
]	O
;	O
int	O
cread	int
;	O
int	O
ierr	int
;	O
pid_t	int
ipid	int
;	O
int	O
icheck	int
;	O
if	O
(	O
strncmp	function
(	O
qentry	pointer
->	O
d_name	array
,	O
"LCK.."	pointer
,	O
sizeof	O
"LCK.."	pointer
-	O
1	int
)	O
!=	O
0	int
)	O
continue	O
;	O
zname	pointer
=	O
zsysdep_in_dir	function
(	O
zSlockdir	pointer
,	O
qentry	pointer
->	O
d_name	array
)	O
;	O
o	int
=	O
open	function
(	O
(	O
char	O
*	O
)	O
zname	pointer
,	O
O_RDONLY	int
|	O
O_NOCTTY	int
,	O
0	int
)	O
;	O
if	O
(	O
o	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
ENOENT	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"open (%s): %s"	pointer
,	O
zname	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
ubuffree	function
(	O
zname	pointer
)	O
;	O
continue	O
;	O
}	O
cread	int
=	O
read	function
(	O
o	int
,	O
ab	array
,	O
sizeof	O
ab	array
-	O
1	int
)	O
;	O
ierr	int
=	O
errno	O
;	O
(	O
void	O
)	O
close	function
(	O
o	int
)	O
;	O
if	O
(	O
cread	int
<	O
0	int
)	O
{	O
ulog	function
(	O
LOG_ERROR	int
,	O
"read %s: %s"	pointer
,	O
zname	pointer
,	O
strerror	function
(	O
ierr	int
)	O
)	O
;	O
ubuffree	function
(	O
zname	pointer
)	O
;	O
continue	O
;	O
}	O
ubuffree	function
(	O
zname	pointer
)	O
;	O
ab	array
[	O
cread	int
]	O
=	O
'\0'	O
;	O
ipid	int
=	O
(	O
pid_t	int
)	O
strtol	function
(	O
ab	array
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
printf	function
(	O
"%s: %ld\n"	pointer
,	O
qentry	pointer
->	O
d_name	array
,	O
(	O
long	O
)	O
ipid	int
)	O
;	O
for	O
(	O
icheck	int
=	O
0	int
;	O
icheck	int
<	O
cgot	int
;	O
icheck	int
++	O
)	O
if	O
(	O
pai	pointer
[	O
icheck	int
]	O
==	O
ipid	int
)	O
break	O
;	O
if	O
(	O
icheck	int
<	O
cgot	int
)	O
continue	O
;	O
if	O
(	O
cgot	int
>=	O
calc	int
)	O
{	O
calc	int
+=	O
10	int
;	O
pai	pointer
=	O
(	O
pid_t	int
*	O
)	O
xrealloc	function
(	O
(	O
pointer	pointer
)	O
pai	pointer
,	O
calc	int
*	O
sizeof	O
(	O
pid_t	int
)	O
)	O
;	O
}	O
pai	pointer
[	O
cgot	int
]	O
=	O
ipid	int
;	O
++	O
cgot	int
;	O
}	O
if	O
(	O
cgot	int
==	O
0	int
)	O
return	O
TRUE	O
;	O
aidescs	pointer
[	O
0	int
]	O
=	O
SPAWN_NULL	O
;	O
aidescs	pointer
[	O
1	int
]	O
=	O
1	int
;	O
aidescs	pointer
[	O
2	int
]	O
=	O
2	int
;	O
zcopy	pointer
=	O
zbufcpy	function
(	O
PS_PROGRAM	pointer
)	O
;	O
cargs	int
=	O
0	int
;	O
for	O
(	O
ztok	pointer
=	O
strtok	function
(	O
zcopy	pointer
,	O
" \t"	pointer
)	O
;	O
ztok	pointer
!=	O
NULL	O
;	O
ztok	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t"	pointer
)	O
)	O
++	O
cargs	int
;	O
pazargs	pointer
=	O
(	O
char	O
*	O
*	O
)	O
xmalloc	function
(	O
(	O
cargs	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
memcpy	function
(	O
zcopy	pointer
,	O
PS_PROGRAM	pointer
,	O
sizeof	O
PS_PROGRAM	pointer
)	O
;	O
for	O
(	O
ztok	pointer
=	O
strtok	function
(	O
zcopy	pointer
,	O
" \t"	pointer
)	O
,	O
iarg	int
=	O
0	int
;	O
ztok	pointer
!=	O
NULL	O
;	O
ztok	pointer
=	O
strtok	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
" \t"	pointer
)	O
,	O
++	O
iarg	int
)	O
pazargs	pointer
[	O
iarg	int
]	O
=	O
ztok	pointer
;	O
pazargs	pointer
[	O
iarg	int
]	O
=	O
NULL	O
;	O
{	O
int	O
i	int
;	O
char	O
*	O
zlast	pointer
,	O
*	O
zset	pointer
;	O
zlast	pointer
=	O
pazargs	pointer
[	O
cargs	int
-	O
1	int
]	O
;	O
zset	pointer
=	O
zbufalc	function
(	O
strlen	function
(	O
zlast	pointer
)	O
+	O
20	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cgot	int
;	O
i	int
++	O
)	O
{	O
pid_t	int
ipid	int
;	O
sprintf	function
(	O
zset	pointer
,	O
"%s%ld"	pointer
,	O
zlast	pointer
,	O
(	O
long	O
)	O
pai	pointer
[	O
i	int
]	O
)	O
;	O
pazargs	pointer
[	O
cargs	int
-	O
1	int
]	O
=	O
zset	pointer
;	O
ipid	int
=	O
ixsspawn	function
(	O
(	O
const	O
char	O
*	O
*	O
)	O
pazargs	pointer
,	O
aidescs	pointer
,	O
FALSE	O
,	O
FALSE	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
FALSE	O
,	O
TRUE	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
,	O
(	O
const	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
ipid	int
<	O
0	int
)	O
ulog	function
(	O
LOG_ERROR	int
,	O
"ixsspawn: %s"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
else	O
(	O
void	O
)	O
ixswait	function
(	O
(	O
unsigned	O
long	O
)	O
ipid	int
,	O
PS_PROGRAM	pointer
)	O
;	O
}	O
ubuffree	function
(	O
zset	pointer
)	O
;	O
}	O
ubuffree	function
(	O
zcopy	pointer
)	O
;	O
xfree	function
(	O
(	O
pointer	pointer
)	O
pazargs	pointer
)	O
;	O
return	O
TRUE	O
;	O
}	O
