static	O
inline	O
mp_limb_t	long
div1	function
(	O
mp_ptr	pointer
rp	pointer
,	O
mp_limb_t	long
n0	long
,	O
mp_limb_t	long
d0	long
)	O
{	O
mp_limb_t	long
q	int
=	O
0	int
;	O
if	O
(	O
(	O
mp_limb_signed_t	long
)	O
n0	long
<	O
0	int
)	O
{	O
int	O
cnt	int
;	O
for	O
(	O
cnt	int
=	O
1	int
;	O
(	O
mp_limb_signed_t	long
)	O
d0	long
>=	O
0	int
;	O
cnt	int
++	O
)	O
{	O
d0	long
=	O
d0	long
<<	O
1	int
;	O
}	O
q	int
=	O
0	int
;	O
while	O
(	O
cnt	int
)	O
{	O
q	int
<<=	O
1	int
;	O
if	O
(	O
n0	long
>=	O
d0	long
)	O
{	O
n0	long
=	O
n0	long
-	O
d0	long
;	O
q	int
|=	O
1	int
;	O
}	O
d0	long
=	O
d0	long
>>	O
1	int
;	O
cnt	int
--	O
;	O
}	O
}	O
else	O
{	O
int	O
cnt	int
;	O
for	O
(	O
cnt	int
=	O
0	int
;	O
n0	long
>=	O
d0	long
;	O
cnt	int
++	O
)	O
{	O
d0	long
=	O
d0	long
<<	O
1	int
;	O
}	O
q	int
=	O
0	int
;	O
while	O
(	O
cnt	int
)	O
{	O
d0	long
=	O
d0	long
>>	O
1	int
;	O
q	int
<<=	O
1	int
;	O
if	O
(	O
n0	long
>=	O
d0	long
)	O
{	O
n0	long
=	O
n0	long
-	O
d0	long
;	O
q	int
|=	O
1	int
;	O
}	O
cnt	int
--	O
;	O
}	O
}	O
*	O
rp	pointer
=	O
n0	long
;	O
return	O
q	int
;	O
}	O
static	O
inline	O
mp_limb_t	long
div2	function
(	O
mp_ptr	pointer
rp	pointer
,	O
mp_limb_t	long
nh	long
,	O
mp_limb_t	long
nl	long
,	O
mp_limb_t	long
dh	long
,	O
mp_limb_t	long
dl	long
)	O
{	O
mp_limb_t	long
q	int
=	O
0	int
;	O
if	O
(	O
(	O
mp_limb_signed_t	long
)	O
nh	long
<	O
0	int
)	O
{	O
int	O
cnt	int
;	O
for	O
(	O
cnt	int
=	O
1	int
;	O
(	O
mp_limb_signed_t	long
)	O
dh	long
>=	O
0	int
;	O
cnt	int
++	O
)	O
{	O
dh	long
=	O
(	O
dh	long
<<	O
1	int
)	O
|	O
(	O
dl	long
>>	O
(	O
GMP_LIMB_BITS	int
-	O
1	int
)	O
)	O
;	O
dl	long
=	O
dl	long
<<	O
1	int
;	O
}	O
while	O
(	O
cnt	int
)	O
{	O
q	int
<<=	O
1	int
;	O
if	O
(	O
nh	long
>	O
dh	long
||	O
(	O
nh	long
==	O
dh	long
&&	O
nl	long
>=	O
dl	long
)	O
)	O
{	O
sub_ddmmss	O
(	O
nh	long
,	O
nl	long
,	O
nh	long
,	O
nl	long
,	O
dh	long
,	O
dl	long
)	O
;	O
q	int
|=	O
1	int
;	O
}	O
dl	long
=	O
(	O
dh	long
<<	O
(	O
GMP_LIMB_BITS	int
-	O
1	int
)	O
)	O
|	O
(	O
dl	long
>>	O
1	int
)	O
;	O
dh	long
=	O
dh	long
>>	O
1	int
;	O
cnt	int
--	O
;	O
}	O
}	O
else	O
{	O
int	O
cnt	int
;	O
for	O
(	O
cnt	int
=	O
0	int
;	O
nh	long
>	O
dh	long
||	O
(	O
nh	long
==	O
dh	long
&&	O
nl	long
>=	O
dl	long
)	O
;	O
cnt	int
++	O
)	O
{	O
dh	long
=	O
(	O
dh	long
<<	O
1	int
)	O
|	O
(	O
dl	long
>>	O
(	O
GMP_LIMB_BITS	int
-	O
1	int
)	O
)	O
;	O
dl	long
=	O
dl	long
<<	O
1	int
;	O
}	O
while	O
(	O
cnt	int
)	O
{	O
dl	long
=	O
(	O
dh	long
<<	O
(	O
GMP_LIMB_BITS	int
-	O
1	int
)	O
)	O
|	O
(	O
dl	long
>>	O
1	int
)	O
;	O
dh	long
=	O
dh	long
>>	O
1	int
;	O
q	int
<<=	O
1	int
;	O
if	O
(	O
nh	long
>	O
dh	long
||	O
(	O
nh	long
==	O
dh	long
&&	O
nl	long
>=	O
dl	long
)	O
)	O
{	O
sub_ddmmss	O
(	O
nh	long
,	O
nl	long
,	O
nh	long
,	O
nl	long
,	O
dh	long
,	O
dl	long
)	O
;	O
q	int
|=	O
1	int
;	O
}	O
cnt	int
--	O
;	O
}	O
}	O
rp	pointer
[	O
0	int
]	O
=	O
nl	long
;	O
rp	pointer
[	O
1	int
]	O
=	O
nh	long
;	O
return	O
q	int
;	O
}	O
int	O
mpn_hgcd2	O
(	O
mp_limb_t	long
ah	long
,	O
mp_limb_t	long
al	long
,	O
mp_limb_t	long
bh	long
,	O
mp_limb_t	long
bl	long
,	O
struct	O
hgcd_matrix1	struct
*	O
M	pointer
)	O
{	O
mp_limb_t	long
u00	long
,	O
u01	long
,	O
u10	long
,	O
u11	long
;	O
if	O
(	O
ah	long
<	O
2	int
||	O
bh	long
<	O
2	int
)	O
return	O
0	int
;	O
if	O
(	O
ah	long
>	O
bh	long
||	O
(	O
ah	long
==	O
bh	long
&&	O
al	long
>	O
bl	long
)	O
)	O
{	O
sub_ddmmss	O
(	O
ah	long
,	O
al	long
,	O
ah	long
,	O
al	long
,	O
bh	long
,	O
bl	long
)	O
;	O
if	O
(	O
ah	long
<	O
2	int
)	O
return	O
0	int
;	O
u00	long
=	O
u01	long
=	O
u11	long
=	O
1	int
;	O
u10	long
=	O
0	int
;	O
}	O
else	O
{	O
sub_ddmmss	O
(	O
bh	long
,	O
bl	long
,	O
bh	long
,	O
bl	long
,	O
ah	long
,	O
al	long
)	O
;	O
if	O
(	O
bh	long
<	O
2	int
)	O
return	O
0	int
;	O
u00	long
=	O
u10	long
=	O
u11	long
=	O
1	int
;	O
u01	long
=	O
0	int
;	O
}	O
if	O
(	O
ah	long
<	O
bh	long
)	O
goto	O
subtract_a	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
ASSERT	O
(	O
ah	long
>=	O
bh	long
)	O
;	O
if	O
(	O
ah	long
==	O
bh	long
)	O
goto	O
done	O
;	O
if	O
(	O
ah	long
<	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
)	O
)	O
)	O
{	O
ah	long
=	O
(	O
ah	long
<<	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
)	O
)	O
+	O
(	O
al	long
>>	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
)	O
)	O
;	O
bh	long
=	O
(	O
bh	long
<<	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
)	O
)	O
+	O
(	O
bl	long
>>	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
)	O
)	O
;	O
break	O
;	O
}	O
ASSERT	O
(	O
ah	long
>	O
bh	long
)	O
;	O
sub_ddmmss	O
(	O
ah	long
,	O
al	long
,	O
ah	long
,	O
al	long
,	O
bh	long
,	O
bl	long
)	O
;	O
if	O
(	O
ah	long
<	O
2	int
)	O
goto	O
done	O
;	O
if	O
(	O
ah	long
<=	O
bh	long
)	O
{	O
u01	long
+=	O
u00	long
;	O
u11	long
+=	O
u10	long
;	O
}	O
else	O
{	O
mp_limb_t	long
r	array
[	O
2	int
]	O
;	O
mp_limb_t	long
q	int
=	O
div2	function
(	O
r	array
,	O
ah	long
,	O
al	long
,	O
bh	long
,	O
bl	long
)	O
;	O
al	long
=	O
r	array
[	O
0	int
]	O
;	O
ah	long
=	O
r	array
[	O
1	int
]	O
;	O
if	O
(	O
ah	long
<	O
2	int
)	O
{	O
u01	long
+=	O
q	int
*	O
u00	long
;	O
u11	long
+=	O
q	int
*	O
u10	long
;	O
goto	O
done	O
;	O
}	O
q	int
++	O
;	O
u01	long
+=	O
q	int
*	O
u00	long
;	O
u11	long
+=	O
q	int
*	O
u10	long
;	O
}	O
subtract_a	O
:	O
ASSERT	O
(	O
bh	long
>=	O
ah	long
)	O
;	O
if	O
(	O
ah	long
==	O
bh	long
)	O
goto	O
done	O
;	O
if	O
(	O
bh	long
<	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
)	O
)	O
)	O
{	O
ah	long
=	O
(	O
ah	long
<<	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
)	O
)	O
+	O
(	O
al	long
>>	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
)	O
)	O
;	O
bh	long
=	O
(	O
bh	long
<<	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
)	O
)	O
+	O
(	O
bl	long
>>	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
)	O
)	O
;	O
goto	O
subtract_a1	O
;	O
}	O
sub_ddmmss	O
(	O
bh	long
,	O
bl	long
,	O
bh	long
,	O
bl	long
,	O
ah	long
,	O
al	long
)	O
;	O
if	O
(	O
bh	long
<	O
2	int
)	O
goto	O
done	O
;	O
if	O
(	O
bh	long
<=	O
ah	long
)	O
{	O
u00	long
+=	O
u01	long
;	O
u10	long
+=	O
u11	long
;	O
}	O
else	O
{	O
mp_limb_t	long
r	array
[	O
2	int
]	O
;	O
mp_limb_t	long
q	int
=	O
div2	function
(	O
r	array
,	O
bh	long
,	O
bl	long
,	O
ah	long
,	O
al	long
)	O
;	O
bl	long
=	O
r	array
[	O
0	int
]	O
;	O
bh	long
=	O
r	array
[	O
1	int
]	O
;	O
if	O
(	O
bh	long
<	O
2	int
)	O
{	O
u00	long
+=	O
q	int
*	O
u01	long
;	O
u10	long
+=	O
q	int
*	O
u11	long
;	O
goto	O
done	O
;	O
}	O
q	int
++	O
;	O
u00	long
+=	O
q	int
*	O
u01	long
;	O
u10	long
+=	O
q	int
*	O
u11	long
;	O
}	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
ASSERT	O
(	O
ah	long
>=	O
bh	long
)	O
;	O
ah	long
-=	O
bh	long
;	O
if	O
(	O
ah	long
<	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
+	O
1	int
)	O
)	O
)	O
break	O
;	O
if	O
(	O
ah	long
<=	O
bh	long
)	O
{	O
u01	long
+=	O
u00	long
;	O
u11	long
+=	O
u10	long
;	O
}	O
else	O
{	O
mp_limb_t	long
r	array
;	O
mp_limb_t	long
q	int
=	O
div1	function
(	O
&	O
r	array
,	O
ah	long
,	O
bh	long
)	O
;	O
ah	long
=	O
r	array
;	O
if	O
(	O
ah	long
<	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
+	O
1	int
)	O
)	O
)	O
{	O
u01	long
+=	O
q	int
*	O
u00	long
;	O
u11	long
+=	O
q	int
*	O
u10	long
;	O
break	O
;	O
}	O
q	int
++	O
;	O
u01	long
+=	O
q	int
*	O
u00	long
;	O
u11	long
+=	O
q	int
*	O
u10	long
;	O
}	O
subtract_a1	O
:	O
ASSERT	O
(	O
bh	long
>=	O
ah	long
)	O
;	O
bh	long
-=	O
ah	long
;	O
if	O
(	O
bh	long
<	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
+	O
1	int
)	O
)	O
)	O
break	O
;	O
if	O
(	O
bh	long
<=	O
ah	long
)	O
{	O
u00	long
+=	O
u01	long
;	O
u10	long
+=	O
u11	long
;	O
}	O
else	O
{	O
mp_limb_t	long
r	array
;	O
mp_limb_t	long
q	int
=	O
div1	function
(	O
&	O
r	array
,	O
bh	long
,	O
ah	long
)	O
;	O
bh	long
=	O
r	array
;	O
if	O
(	O
bh	long
<	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
GMP_LIMB_BITS	int
/	O
2	int
+	O
1	int
)	O
)	O
)	O
{	O
u00	long
+=	O
q	int
*	O
u01	long
;	O
u10	long
+=	O
q	int
*	O
u11	long
;	O
break	O
;	O
}	O
q	int
++	O
;	O
u00	long
+=	O
q	int
*	O
u01	long
;	O
u10	long
+=	O
q	int
*	O
u11	long
;	O
}	O
}	O
done	O
:	O
M	pointer
->	O
u	array
[	O
0	int
]	O
[	O
0	int
]	O
=	O
u00	long
;	O
M	pointer
->	O
u	array
[	O
0	int
]	O
[	O
1	int
]	O
=	O
u01	long
;	O
M	pointer
->	O
u	array
[	O
1	int
]	O
[	O
0	int
]	O
=	O
u10	long
;	O
M	pointer
->	O
u	array
[	O
1	int
]	O
[	O
1	int
]	O
=	O
u11	long
;	O
return	O
1	int
;	O
}	O
mp_size_t	long
mpn_hgcd_mul_matrix1_vector	O
(	O
const	O
struct	O
hgcd_matrix1	struct
*	O
M	pointer
,	O
mp_ptr	pointer
rp	pointer
,	O
mp_srcptr	pointer
ap	pointer
,	O
mp_ptr	pointer
bp	pointer
,	O
mp_size_t	long
n	long
)	O
{	O
mp_limb_t	long
ah	long
,	O
bh	long
;	O
ah	long
=	O
mpn_addaddmul_1msb0	O
(	O
rp	pointer
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
,	O
M	pointer
->	O
u	array
[	O
0	int
]	O
[	O
0	int
]	O
,	O
M	pointer
->	O
u	array
[	O
1	int
]	O
[	O
0	int
]	O
)	O
;	O
bh	long
=	O
mpn_addaddmul_1msb0	O
(	O
bp	pointer
,	O
bp	pointer
,	O
ap	pointer
,	O
n	long
,	O
M	pointer
->	O
u	array
[	O
1	int
]	O
[	O
1	int
]	O
,	O
M	pointer
->	O
u	array
[	O
0	int
]	O
[	O
1	int
]	O
)	O
;	O
rp	pointer
[	O
n	long
]	O
=	O
ah	long
;	O
bp	pointer
[	O
n	long
]	O
=	O
bh	long
;	O
n	long
+=	O
(	O
ah	long
|	O
bh	long
)	O
>	O
0	int
;	O
return	O
n	long
;	O
}	O
