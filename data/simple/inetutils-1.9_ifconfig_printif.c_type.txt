FILE	struct
*	O
ostream	pointer
;	O
int	O
column_stdout	int
;	O
int	O
column_stderr	int
;	O
int	O
*	O
column	pointer
=	O
&	O
column_stdout	int
;	O
int	O
had_output	int
;	O
struct	O
format_handle	struct
format_handles	array
[	O
]	O
=	O
{	O
SYSTEM_FORMAT_HANDLER	O
{	O
""	pointer
,	O
fh_nothing	function
}	O
,	O
{	O
"format?"	pointer
,	O
fh_format_query	function
}	O
,	O
{	O
"docstr"	pointer
,	O
fh_docstr	function
}	O
,	O
{	O
"defn"	pointer
,	O
fh_defn	function
}	O
,	O
{	O
"foreachformat"	pointer
,	O
fh_foreachformat	function
}	O
,	O
{	O
"verbose?"	pointer
,	O
fh_verbose_query	function
}	O
,	O
{	O
"newline"	pointer
,	O
fh_newline	function
}	O
,	O
{	O
"\\n"	pointer
,	O
fh_newline	function
}	O
,	O
{	O
"\\t"	pointer
,	O
fh_tabulator	function
}	O
,	O
{	O
"rep"	pointer
,	O
fh_rep	function
}	O
,	O
{	O
"first?"	pointer
,	O
fh_first	function
}	O
,	O
{	O
"ifdisplay?"	pointer
,	O
fh_ifdisplay_query	function
}	O
,	O
{	O
"tab"	pointer
,	O
fh_tab	function
}	O
,	O
{	O
"join"	pointer
,	O
fh_join	function
}	O
,	O
{	O
"exists?"	pointer
,	O
fh_exists_query	function
}	O
,	O
{	O
"format"	pointer
,	O
fh_format	function
}	O
,	O
{	O
"error"	pointer
,	O
fh_error	function
}	O
,	O
{	O
"progname"	pointer
,	O
fh_progname	function
}	O
,	O
{	O
"exit"	pointer
,	O
fh_exit	function
}	O
,	O
{	O
"name"	pointer
,	O
fh_name	function
}	O
,	O
{	O
"index?"	pointer
,	O
fh_index_query	function
}	O
,	O
{	O
"index"	pointer
,	O
fh_index	function
}	O
,	O
{	O
"addr?"	pointer
,	O
fh_addr_query	function
}	O
,	O
{	O
"addr"	pointer
,	O
fh_addr	function
}	O
,	O
{	O
"netmask?"	pointer
,	O
fh_netmask_query	function
}	O
,	O
{	O
"netmask"	pointer
,	O
fh_netmask	function
}	O
,	O
{	O
"brdaddr?"	pointer
,	O
fh_brdaddr_query	function
}	O
,	O
{	O
"brdaddr"	pointer
,	O
fh_brdaddr	function
}	O
,	O
{	O
"dstaddr?"	pointer
,	O
fh_dstaddr_query	function
}	O
,	O
{	O
"dstaddr"	pointer
,	O
fh_dstaddr	function
}	O
,	O
{	O
"flags?"	pointer
,	O
fh_flags_query	function
}	O
,	O
{	O
"flags"	pointer
,	O
fh_flags	function
}	O
,	O
{	O
"mtu?"	pointer
,	O
fh_mtu_query	function
}	O
,	O
{	O
"mtu"	pointer
,	O
fh_mtu	function
}	O
,	O
{	O
"metric?"	pointer
,	O
fh_metric_query	function
}	O
,	O
{	O
"metric"	pointer
,	O
fh_metric	function
}	O
,	O
{	O
"map?"	pointer
,	O
fh_map_query	function
}	O
,	O
{	O
"irq?"	pointer
,	O
fh_irq_query	function
}	O
,	O
{	O
"irq"	pointer
,	O
fh_irq	function
}	O
,	O
{	O
"baseaddr?"	pointer
,	O
fh_baseaddr_query	function
}	O
,	O
{	O
"baseaddr"	pointer
,	O
fh_baseaddr	function
}	O
,	O
{	O
"memstart?"	pointer
,	O
fh_memstart_query	function
}	O
,	O
{	O
"memstart"	pointer
,	O
fh_memstart	function
}	O
,	O
{	O
"memend?"	pointer
,	O
fh_memend_query	function
}	O
,	O
{	O
"memend"	pointer
,	O
fh_memend	function
}	O
,	O
{	O
"dma?"	pointer
,	O
fh_dma_query	function
}	O
,	O
{	O
"dma"	pointer
,	O
fh_dma	function
}	O
,	O
{	O
NULL	O
,	O
NULL	O
}	O
}	O
;	O
void	O
put_char	function
(	O
format_data_t	pointer
form	pointer
,	O
char	O
c	char
)	O
{	O
switch	O
(	O
c	char
)	O
{	O
case	O
'\n'	O
:	O
*	O
column	pointer
=	O
0	int
;	O
break	O
;	O
case	O
'\t'	O
:	O
*	O
column	pointer
=	O
(	O
(	O
*	O
column	pointer
/	O
TAB_STOP	int
)	O
+	O
1	int
)	O
*	O
TAB_STOP	int
;	O
break	O
;	O
default	O
:	O
(	O
*	O
column	pointer
)	O
++	O
;	O
}	O
putc	function
(	O
c	char
,	O
ostream	pointer
)	O
;	O
had_output	int
=	O
1	int
;	O
}	O
void	O
put_string	function
(	O
format_data_t	pointer
form	pointer
,	O
const	O
char	O
*	O
s	pointer
)	O
{	O
while	O
(	O
*	O
s	pointer
!=	O
'\0'	O
)	O
put_char	function
(	O
form	pointer
,	O
*	O
(	O
s	pointer
++	O
)	O
)	O
;	O
}	O
void	O
put_int	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
,	O
int	O
nr	int
)	O
{	O
char	O
*	O
fmt	pointer
;	O
if	O
(	O
argc	int
>	O
0	int
)	O
{	O
char	O
*	O
p	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
if	O
(	O
*	O
p	pointer
!=	O
'%'	O
)	O
fmt	pointer
=	O
"%i"	pointer
;	O
else	O
{	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'#'	O
)	O
p	pointer
++	O
;	O
while	O
(	O
isdigit	function
(	O
*	O
p	pointer
)	O
)	O
p	pointer
++	O
;	O
if	O
(	O
(	O
*	O
p	pointer
==	O
'h'	O
||	O
*	O
p	pointer
==	O
'H'	O
)	O
&&	O
p	pointer
[	O
1	int
]	O
)	O
++	O
p	pointer
;	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
default	O
:	O
case	O
'i'	O
:	O
case	O
'd'	O
:	O
case	O
'D'	O
:	O
*	O
p	pointer
=	O
'i'	O
;	O
break	O
;	O
case	O
'x'	O
:	O
case	O
'h'	O
:	O
*	O
p	pointer
=	O
'x'	O
;	O
break	O
;	O
case	O
'X'	O
:	O
case	O
'H'	O
:	O
*	O
p	pointer
=	O
'X'	O
;	O
break	O
;	O
case	O
'o'	O
:	O
case	O
'O'	O
:	O
*	O
p	pointer
=	O
'o'	O
;	O
break	O
;	O
}	O
p	pointer
++	O
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
fmt	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
}	O
}	O
else	O
fmt	pointer
=	O
"%i"	pointer
;	O
*	O
column	pointer
+=	O
printf	function
(	O
fmt	pointer
,	O
nr	int
)	O
;	O
had_output	int
=	O
1	int
;	O
}	O
void	O
put_ulong	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
,	O
unsigned	O
long	O
value	long
)	O
{	O
char	O
*	O
fmt	pointer
;	O
if	O
(	O
argc	int
>	O
0	int
)	O
{	O
char	O
*	O
p	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
if	O
(	O
*	O
p	pointer
!=	O
'%'	O
)	O
fmt	pointer
=	O
"%lu"	pointer
;	O
else	O
{	O
p	pointer
++	O
;	O
while	O
(	O
isdigit	function
(	O
*	O
p	pointer
)	O
)	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'#'	O
)	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'l'	O
)	O
p	pointer
++	O
;	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
default	O
:	O
case	O
'i'	O
:	O
case	O
'd'	O
:	O
case	O
'D'	O
:	O
*	O
p	pointer
=	O
'i'	O
;	O
break	O
;	O
case	O
'x'	O
:	O
case	O
'h'	O
:	O
*	O
p	pointer
=	O
'x'	O
;	O
break	O
;	O
case	O
'X'	O
:	O
case	O
'H'	O
:	O
*	O
p	pointer
=	O
'X'	O
;	O
break	O
;	O
case	O
'o'	O
:	O
case	O
'O'	O
:	O
*	O
p	pointer
=	O
'o'	O
;	O
break	O
;	O
}	O
p	pointer
++	O
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
fmt	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
}	O
}	O
else	O
fmt	pointer
=	O
"%lu"	pointer
;	O
*	O
column	pointer
+=	O
printf	function
(	O
fmt	pointer
,	O
value	long
)	O
;	O
had_output	int
=	O
1	int
;	O
}	O
void	O
select_arg	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
,	O
int	O
nr	int
)	O
{	O
if	O
(	O
nr	int
<	O
argc	int
)	O
{	O
form	pointer
->	O
format	pointer
=	O
argv	array
[	O
nr	int
]	O
;	O
print_interfaceX	function
(	O
form	pointer
,	O
0	int
)	O
;	O
}	O
}	O
void	O
put_addr	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
,	O
struct	O
sockaddr	struct
*	O
sa	pointer
)	O
{	O
struct	O
sockaddr_in	struct
*	O
sin	pointer
=	O
(	O
struct	O
sockaddr_in	struct
*	O
)	O
sa	pointer
;	O
char	O
*	O
addr	pointer
=	O
inet_ntoa	function
(	O
sin	pointer
->	O
sin_addr	struct
)	O
;	O
long	O
byte	array
[	O
4	int
]	O
;	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
addr	pointer
,	O
'.'	O
)	O
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
byte	array
[	O
0	int
]	O
=	O
strtol	function
(	O
addr	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
addr	pointer
=	O
p	pointer
+	O
1	int
;	O
p	pointer
=	O
strchr	function
(	O
addr	pointer
,	O
'.'	O
)	O
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
byte	array
[	O
1	int
]	O
=	O
strtol	function
(	O
addr	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
addr	pointer
=	O
p	pointer
+	O
1	int
;	O
p	pointer
=	O
strchr	function
(	O
addr	pointer
,	O
'.'	O
)	O
;	O
*	O
p	pointer
=	O
'\0'	O
;	O
byte	array
[	O
2	int
]	O
=	O
strtol	function
(	O
addr	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
byte	array
[	O
3	int
]	O
=	O
strtol	function
(	O
p	pointer
+	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
addr	pointer
=	O
inet_ntoa	function
(	O
sin	pointer
->	O
sin_addr	struct
)	O
;	O
if	O
(	O
argc	int
>	O
0	int
)	O
{	O
long	O
i	long
=	O
strtol	function
(	O
argv	array
[	O
0	int
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
i	long
>=	O
0	int
&&	O
i	long
<=	O
3	int
)	O
put_int	function
(	O
form	pointer
,	O
argc	int
-	O
1	int
,	O
&	O
argv	array
[	O
1	int
]	O
,	O
byte	array
[	O
i	long
]	O
)	O
;	O
}	O
else	O
put_string	function
(	O
form	pointer
,	O
addr	pointer
)	O
;	O
}	O
void	O
put_flags	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
,	O
short	O
flags	int
)	O
{	O
unsigned	O
short	O
int	O
f	short
=	O
1	int
;	O
const	O
char	O
*	O
name	pointer
;	O
int	O
first	int
=	O
1	int
;	O
while	O
(	O
flags	int
&&	O
f	short
)	O
{	O
if	O
(	O
f	short
&	O
flags	int
)	O
{	O
name	pointer
=	O
if_flagtoname	function
(	O
f	short
,	O
NULL	O
)	O
;	O
if	O
(	O
name	pointer
)	O
{	O
if	O
(	O
!	O
first	int
)	O
{	O
if	O
(	O
argc	int
>	O
0	int
)	O
put_string	function
(	O
form	pointer
,	O
argv	array
[	O
0	int
]	O
)	O
;	O
else	O
put_char	function
(	O
form	pointer
,	O
' '	O
)	O
;	O
}	O
put_string	function
(	O
form	pointer
,	O
name	pointer
)	O
;	O
flags	int
&=	O
~	O
f	short
;	O
first	int
=	O
0	int
;	O
}	O
}	O
f	short
=	O
f	short
<<	O
1	int
;	O
}	O
if	O
(	O
flags	int
)	O
{	O
if	O
(	O
!	O
first	int
)	O
{	O
if	O
(	O
argc	int
>	O
0	int
)	O
put_string	function
(	O
form	pointer
,	O
argv	array
[	O
0	int
]	O
)	O
;	O
else	O
put_char	function
(	O
form	pointer
,	O
' '	O
)	O
;	O
}	O
put_int	function
(	O
form	pointer
,	O
argc	int
-	O
1	int
,	O
&	O
argv	array
[	O
1	int
]	O
,	O
flags	int
)	O
;	O
}	O
}	O
void	O
put_flags_short	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
,	O
short	O
flags	int
)	O
{	O
char	O
buf	pointer
[	O
IF_FORMAT_FLAGS_BUFSIZE	int
]	O
;	O
if_format_flags	function
(	O
flags	int
,	O
buf	pointer
,	O
sizeof	O
buf	pointer
)	O
;	O
put_string	function
(	O
form	pointer
,	O
buf	pointer
)	O
;	O
}	O
void	O
format_handler	function
(	O
const	O
char	O
*	O
name	pointer
,	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
struct	O
format_handle	struct
*	O
fh	pointer
;	O
for	O
(	O
fh	pointer
=	O
format_handles	array
;	O
fh	pointer
->	O
name	pointer
;	O
fh	pointer
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
fh	pointer
->	O
name	pointer
,	O
name	pointer
)	O
)	O
{	O
if	O
(	O
fh	pointer
->	O
handler	pointer
)	O
(	O
fh	pointer
->	O
handler	pointer
)	O
(	O
form	pointer
,	O
argc	int
,	O
argv	array
)	O
;	O
return	O
;	O
}	O
}	O
*	O
column	pointer
+=	O
printf	function
(	O
"("	pointer
)	O
;	O
put_string	function
(	O
form	pointer
,	O
name	pointer
)	O
;	O
*	O
column	pointer
+=	O
printf	function
(	O
" unknown)"	pointer
)	O
;	O
had_output	int
=	O
1	int
;	O
}	O
void	O
fh_nothing	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
}	O
void	O
fh_format_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
argc	int
<	O
1	int
)	O
return	O
;	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
format_find	function
(	O
argv	array
[	O
0	int
]	O
)	O
?	O
1	int
:	O
2	int
)	O
;	O
}	O
void	O
fh_docstr	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
struct	O
format	pointer
*	O
frm	pointer
;	O
name	pointer
=	O
(	O
argc	int
==	O
0	int
)	O
?	O
form	pointer
->	O
name	pointer
:	O
argv	array
[	O
0	int
]	O
;	O
frm	pointer
=	O
format_find	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
frm	pointer
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"unknown format: `%s'"	pointer
,	O
name	pointer
)	O
;	O
put_string	function
(	O
form	pointer
,	O
frm	pointer
->	O
docstr	pointer
)	O
;	O
}	O
void	O
fh_defn	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
const	O
char	O
*	O
name	pointer
;	O
struct	O
format	pointer
*	O
frm	pointer
;	O
name	pointer
=	O
(	O
argc	int
==	O
0	int
)	O
?	O
form	pointer
->	O
name	pointer
:	O
argv	array
[	O
0	int
]	O
;	O
frm	pointer
=	O
format_find	function
(	O
name	pointer
)	O
;	O
if	O
(	O
!	O
frm	pointer
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"unknown format: `%s'"	pointer
,	O
name	pointer
)	O
;	O
put_string	function
(	O
form	pointer
,	O
frm	pointer
->	O
templ	pointer
)	O
;	O
}	O
void	O
fh_foreachformat	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
struct	O
format	pointer
*	O
frm	pointer
;	O
const	O
char	O
*	O
save_name	pointer
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
return	O
;	O
save_name	pointer
=	O
form	pointer
->	O
name	pointer
;	O
for	O
(	O
frm	pointer
=	O
formats	array
;	O
frm	pointer
->	O
name	pointer
;	O
frm	pointer
++	O
)	O
{	O
form	pointer
->	O
name	pointer
=	O
frm	pointer
->	O
name	pointer
;	O
form	pointer
->	O
format	pointer
=	O
argv	array
[	O
0	int
]	O
;	O
print_interfaceX	function
(	O
form	pointer
,	O
0	int
)	O
;	O
}	O
form	pointer
->	O
name	pointer
=	O
save_name	pointer
;	O
}	O
void	O
fh_newline	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
put_char	function
(	O
form	pointer
,	O
'\n'	O
)	O
;	O
}	O
void	O
fh_tabulator	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
put_char	function
(	O
form	pointer
,	O
'\t'	O
)	O
;	O
}	O
void	O
fh_rep	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
unsigned	O
int	O
count	int
;	O
char	O
*	O
p	pointer
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
return	O
;	O
count	int
=	O
strtoul	function
(	O
argv	array
[	O
0	int
]	O
,	O
&	O
p	pointer
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"invalid repeat count"	pointer
)	O
;	O
while	O
(	O
count	int
--	O
)	O
{	O
form	pointer
->	O
format	pointer
=	O
argv	array
[	O
1	int
]	O
;	O
print_interfaceX	function
(	O
form	pointer
,	O
0	int
)	O
;	O
}	O
}	O
void	O
fh_first	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
form	pointer
->	O
first	int
?	O
0	int
:	O
1	int
)	O
;	O
}	O
void	O
fh_ifdisplay_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
n	int
;	O
int	O
f	short
;	O
int	O
rev	int
;	O
n	int
=	O
!	O
(	O
all_option	int
||	O
ifs_cmdline	int
||	O
(	O
(	O
f	short
=	O
if_nameztoflag	function
(	O
"UP"	pointer
,	O
&	O
rev	int
)	O
)	O
&&	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFFLAGS	int
,	O
form	pointer
->	O
ifr	pointer
)	O
==	O
0	int
&&	O
(	O
f	short
&	O
form	pointer
->	O
ifr	pointer
->	O
ifr_flags	O
)	O
)	O
)	O
;	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
n	int
)	O
;	O
}	O
void	O
fh_verbose_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
verbose	int
?	O
0	int
:	O
1	int
)	O
;	O
}	O
void	O
fh_tab	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
long	O
goal	long
=	O
0	int
;	O
errno	O
=	O
0	int
;	O
if	O
(	O
argc	int
>=	O
1	int
)	O
goal	long
=	O
strtol	function
(	O
argv	array
[	O
0	int
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
goal	long
<=	O
0	int
)	O
goal	long
=	O
(	O
(	O
*	O
column	pointer
/	O
TAB_STOP	int
)	O
+	O
1	int
)	O
*	O
TAB_STOP	int
;	O
while	O
(	O
*	O
column	pointer
<	O
goal	long
)	O
put_char	function
(	O
form	pointer
,	O
' '	O
)	O
;	O
}	O
void	O
fh_join	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
had_output_saved	int
=	O
had_output	int
;	O
int	O
count	int
=	O
0	int
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
return	O
;	O
had_output	int
=	O
0	int
;	O
while	O
(	O
++	O
count	int
<	O
argc	int
)	O
{	O
if	O
(	O
had_output	int
)	O
{	O
put_string	function
(	O
form	pointer
,	O
argv	array
[	O
0	int
]	O
)	O
;	O
had_output	int
=	O
0	int
;	O
had_output_saved	int
=	O
1	int
;	O
}	O
form	pointer
->	O
format	pointer
=	O
argv	array
[	O
count	int
]	O
;	O
print_interfaceX	function
(	O
form	pointer
,	O
0	int
)	O
;	O
}	O
had_output	int
=	O
had_output_saved	int
;	O
}	O
void	O
fh_exists_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
argc	int
>	O
0	int
)	O
{	O
struct	O
format_handle	struct
*	O
fh	pointer
;	O
int	O
sel	int
=	O
2	int
;	O
for	O
(	O
fh	pointer
=	O
format_handles	array
;	O
fh	pointer
->	O
name	pointer
;	O
fh	pointer
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
fh	pointer
->	O
name	pointer
,	O
argv	array
[	O
0	int
]	O
)	O
)	O
{	O
sel	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
sel	int
)	O
;	O
}	O
}	O
void	O
fh_format	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	int
;	O
i	long
++	O
)	O
{	O
struct	O
format	pointer
*	O
frm	pointer
=	O
format_find	function
(	O
argv	array
[	O
i	long
]	O
)	O
;	O
if	O
(	O
frm	pointer
)	O
{	O
form	pointer
->	O
format	pointer
=	O
frm	pointer
->	O
templ	pointer
;	O
print_interfaceX	function
(	O
form	pointer
,	O
0	int
)	O
;	O
break	O
;	O
}	O
}	O
}	O
void	O
fh_error	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
i	long
;	O
FILE	struct
*	O
s	pointer
=	O
ostream	pointer
;	O
int	O
*	O
c	char
=	O
column	pointer
;	O
ostream	pointer
=	O
stderr	pointer
;	O
column	pointer
=	O
&	O
column_stderr	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	int
;	O
i	long
++	O
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
i	long
)	O
;	O
ostream	pointer
=	O
s	pointer
;	O
column	pointer
=	O
c	char
;	O
}	O
void	O
fh_progname	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
put_string	function
(	O
form	pointer
,	O
program_name	pointer
)	O
;	O
}	O
void	O
fh_exit	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
err	int
=	O
0	int
;	O
if	O
(	O
argc	int
>	O
0	int
)	O
err	int
=	O
strtoul	function
(	O
argv	array
[	O
0	int
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
exit	function
(	O
err	int
)	O
;	O
}	O
void	O
fh_name	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
put_string	function
(	O
form	pointer
,	O
form	pointer
->	O
name	pointer
)	O
;	O
}	O
void	O
fh_index_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
(	O
if_nametoindex	function
(	O
form	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
?	O
1	int
:	O
0	int
)	O
;	O
}	O
void	O
fh_index	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
indx	int
=	O
if_nametoindex	function
(	O
form	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
indx	int
==	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"No index number found for interface `%s'"	pointer
,	O
form	pointer
->	O
name	pointer
)	O
;	O
*	O
column	pointer
+=	O
printf	function
(	O
"%i"	pointer
,	O
indx	int
)	O
;	O
had_output	int
=	O
1	int
;	O
}	O
void	O
fh_addr_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFADDR	int
,	O
form	pointer
->	O
ifr	pointer
)	O
>=	O
0	int
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_addr	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFADDR	int
,	O
form	pointer
->	O
ifr	pointer
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"SIOCGIFADDR failed for interface `%s'"	pointer
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_name	O
)	O
;	O
else	O
put_addr	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
&	O
form	pointer
->	O
ifr	pointer
->	O
ifr_addr	O
)	O
;	O
}	O
void	O
fh_netmask_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFNETMASK	int
,	O
form	pointer
->	O
ifr	pointer
)	O
>=	O
0	int
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_netmask	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFNETMASK	int
,	O
form	pointer
->	O
ifr	pointer
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"SIOCGIFNETMASK failed for interface `%s'"	pointer
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_name	O
)	O
;	O
else	O
put_addr	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
&	O
form	pointer
->	O
ifr	pointer
->	O
ifr_netmask	O
)	O
;	O
}	O
void	O
fh_brdaddr_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
f	short
;	O
int	O
rev	int
;	O
if	O
(	O
0	int
==	O
(	O
f	short
=	O
if_nameztoflag	function
(	O
"BROADCAST"	pointer
,	O
&	O
rev	int
)	O
)	O
||	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFFLAGS	int
,	O
form	pointer
->	O
ifr	pointer
)	O
<	O
0	int
)	O
||	O
(	O
(	O
f	short
&	O
form	pointer
->	O
ifr	pointer
->	O
ifr_flags	O
)	O
==	O
0	int
)	O
)	O
{	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFBRDADDR	int
,	O
form	pointer
->	O
ifr	pointer
)	O
>=	O
0	int
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_brdaddr	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFBRDADDR	int
,	O
form	pointer
->	O
ifr	pointer
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"SIOCGIFBRDADDR failed for interface `%s'"	pointer
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_name	O
)	O
;	O
else	O
put_addr	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
&	O
form	pointer
->	O
ifr	pointer
->	O
ifr_broadaddr	O
)	O
;	O
}	O
void	O
fh_dstaddr_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
f	short
;	O
int	O
rev	int
;	O
if	O
(	O
0	int
==	O
(	O
f	short
=	O
if_nameztoflag	function
(	O
"POINTOPOINT"	pointer
,	O
&	O
rev	int
)	O
)	O
||	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFFLAGS	int
,	O
form	pointer
->	O
ifr	pointer
)	O
<	O
0	int
)	O
||	O
(	O
(	O
f	short
&	O
form	pointer
->	O
ifr	pointer
->	O
ifr_flags	O
)	O
==	O
0	int
)	O
)	O
{	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFDSTADDR	int
,	O
form	pointer
->	O
ifr	pointer
)	O
>=	O
0	int
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_dstaddr	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFDSTADDR	int
,	O
form	pointer
->	O
ifr	pointer
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"SIOCGIFDSTADDR failed for interface `%s'"	pointer
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_name	O
)	O
;	O
else	O
put_addr	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
&	O
form	pointer
->	O
ifr	pointer
->	O
ifr_dstaddr	O
)	O
;	O
}	O
void	O
fh_mtu_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFMTU	int
,	O
form	pointer
->	O
ifr	pointer
)	O
>=	O
0	int
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_mtu	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFMTU	int
,	O
form	pointer
->	O
ifr	pointer
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"SIOCGIFMTU failed for interface `%s'"	pointer
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_name	O
)	O
;	O
else	O
put_int	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_mtu	O
)	O
;	O
}	O
void	O
fh_metric_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFMETRIC	int
,	O
form	pointer
->	O
ifr	pointer
)	O
>=	O
0	int
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_metric	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFMETRIC	int
,	O
form	pointer
->	O
ifr	pointer
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"SIOCGIFMETRIC failed for interface `%s'"	pointer
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_name	O
)	O
;	O
else	O
put_int	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_metric	O
?	O
form	pointer
->	O
ifr	pointer
->	O
ifr_metric	O
:	O
1	int
)	O
;	O
}	O
void	O
fh_flags_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFFLAGS	int
,	O
form	pointer
->	O
ifr	pointer
)	O
>=	O
0	int
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_flags	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFFLAGS	int
,	O
form	pointer
->	O
ifr	pointer
)	O
<	O
0	int
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"SIOCGIFFLAGS failed for interface `%s'"	pointer
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_name	O
)	O
;	O
else	O
{	O
if	O
(	O
argc	int
>=	O
1	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
argv	array
[	O
0	int
]	O
,	O
"number"	pointer
)	O
)	O
put_int	function
(	O
form	pointer
,	O
argc	int
-	O
1	int
,	O
&	O
argv	array
[	O
1	int
]	O
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_flags	O
)	O
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
argv	array
[	O
0	int
]	O
,	O
"short"	pointer
)	O
)	O
put_flags_short	function
(	O
form	pointer
,	O
argc	int
-	O
1	int
,	O
&	O
argv	array
[	O
1	int
]	O
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_flags	O
)	O
;	O
else	O
if	O
(	O
!	O
strcmp	function
(	O
argv	array
[	O
0	int
]	O
,	O
"string"	pointer
)	O
)	O
put_flags	function
(	O
form	pointer
,	O
argc	int
-	O
1	int
,	O
&	O
argv	array
[	O
1	int
]	O
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_flags	O
)	O
;	O
}	O
else	O
put_flags	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_flags	O
)	O
;	O
}	O
}	O
void	O
fh_map_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
ioctl	function
(	O
form	pointer
->	O
sfd	int
,	O
SIOCGIFMAP	int
,	O
form	pointer
->	O
ifr	pointer
)	O
>=	O
0	int
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_irq_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
irq	char
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_irq	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
put_int	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
irq	char
)	O
;	O
}	O
void	O
fh_baseaddr_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
base_addr	short
>=	O
0x100	int
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_baseaddr	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
base_addr	short
>=	O
0x100	int
)	O
put_int	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
base_addr	short
)	O
;	O
else	O
put_string	function
(	O
form	pointer
,	O
"(not available)"	pointer
)	O
;	O
}	O
void	O
fh_memstart_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
mem_start	long
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_memstart	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
mem_start	long
)	O
put_ulong	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
mem_start	long
)	O
;	O
else	O
put_string	function
(	O
form	pointer
,	O
"(not available)"	pointer
)	O
;	O
}	O
void	O
fh_memend_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
mem_end	long
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_memend	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
mem_end	long
)	O
put_ulong	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
mem_end	long
)	O
;	O
else	O
put_string	function
(	O
form	pointer
,	O
"(not available)"	pointer
)	O
;	O
}	O
void	O
fh_dma_query	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
dma	char
)	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
0	int
)	O
;	O
else	O
select_arg	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
1	int
)	O
;	O
}	O
void	O
fh_dma	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
if	O
(	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
dma	char
)	O
put_int	function
(	O
form	pointer
,	O
argc	int
,	O
argv	array
,	O
form	pointer
->	O
ifr	pointer
->	O
ifr_map	O
.	O
dma	char
)	O
;	O
else	O
put_string	function
(	O
form	pointer
,	O
"(not available)"	pointer
)	O
;	O
}	O
void	O
print_interfaceX	function
(	O
format_data_t	pointer
form	pointer
,	O
int	O
quiet	int
)	O
{	O
const	O
char	O
*	O
p	pointer
=	O
form	pointer
->	O
format	pointer
;	O
const	O
char	O
*	O
q	pointer
;	O
form	pointer
->	O
depth	int
++	O
;	O
while	O
(	O
!	O
(	O
*	O
p	pointer
==	O
'\0'	O
||	O
(	O
form	pointer
->	O
depth	int
>	O
1	int
&&	O
*	O
p	pointer
==	O
'}'	O
)	O
)	O
)	O
{	O
while	O
(	O
!	O
(	O
*	O
p	pointer
==	O
'$'	O
||	O
*	O
p	pointer
==	O
'\0'	O
||	O
(	O
form	pointer
->	O
depth	int
>	O
1	int
&&	O
*	O
p	pointer
==	O
'}'	O
)	O
)	O
)	O
{	O
quiet	int
||	O
(	O
put_char	function
(	O
form	pointer
,	O
*	O
p	pointer
)	O
,	O
0	int
)	O
;	O
p	pointer
++	O
;	O
}	O
if	O
(	O
*	O
p	pointer
!=	O
'$'	O
)	O
break	O
;	O
switch	O
(	O
*	O
(	O
++	O
p	pointer
)	O
)	O
{	O
default	O
:	O
quiet	int
||	O
(	O
put_char	function
(	O
form	pointer
,	O
'$'	O
)	O
,	O
0	int
)	O
;	O
case	O
'$'	O
:	O
case	O
'}'	O
:	O
quiet	int
||	O
(	O
put_char	function
(	O
form	pointer
,	O
*	O
p	pointer
)	O
,	O
0	int
)	O
;	O
p	pointer
++	O
;	O
continue	O
;	O
case	O
'{'	O
:	O
p	pointer
++	O
;	O
break	O
;	O
}	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'}'	O
)	O
;	O
if	O
(	O
!	O
q	pointer
)	O
{	O
p	pointer
-=	O
2	int
;	O
put_string	function
(	O
form	pointer
,	O
p	pointer
)	O
;	O
p	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'\0'	O
)	O
;	O
continue	O
;	O
}	O
else	O
{	O
char	O
*	O
id	pointer
;	O
id	pointer
=	O
alloca	O
(	O
q	pointer
-	O
p	pointer
+	O
1	int
)	O
;	O
memcpy	function
(	O
id	pointer
,	O
p	pointer
,	O
q	pointer
-	O
p	pointer
)	O
;	O
id	pointer
[	O
q	pointer
-	O
p	pointer
]	O
=	O
'\0'	O
;	O
p	pointer
=	O
q	pointer
+	O
1	int
;	O
if	O
(	O
quiet	int
)	O
{	O
form	pointer
->	O
format	pointer
=	O
p	pointer
;	O
while	O
(	O
*	O
(	O
form	pointer
->	O
format	pointer
)	O
==	O
'{'	O
)	O
{	O
form	pointer
->	O
format	pointer
++	O
;	O
print_interfaceX	function
(	O
form	pointer
,	O
1	int
)	O
;	O
if	O
(	O
*	O
(	O
form	pointer
->	O
format	pointer
)	O
==	O
'}'	O
)	O
form	pointer
->	O
format	pointer
++	O
;	O
}	O
p	pointer
=	O
form	pointer
->	O
format	pointer
;	O
}	O
else	O
{	O
int	O
argc	int
=	O
0	int
;	O
char	O
*	O
*	O
argv	array
;	O
argv	array
=	O
alloca	O
(	O
strlen	function
(	O
q	pointer
)	O
/	O
2	int
)	O
;	O
while	O
(	O
*	O
p	pointer
==	O
'{'	O
)	O
{	O
p	pointer
++	O
;	O
form	pointer
->	O
format	pointer
=	O
p	pointer
;	O
print_interfaceX	function
(	O
form	pointer
,	O
1	int
)	O
;	O
q	pointer
=	O
form	pointer
->	O
format	pointer
;	O
argv	array
[	O
argc	int
]	O
=	O
malloc	function
(	O
q	pointer
-	O
p	pointer
+	O
1	int
)	O
;	O
memcpy	function
(	O
argv	array
[	O
argc	int
]	O
,	O
p	pointer
,	O
q	pointer
-	O
p	pointer
)	O
;	O
argv	array
[	O
argc	int
]	O
[	O
q	pointer
-	O
p	pointer
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
q	pointer
==	O
'}'	O
)	O
q	pointer
++	O
;	O
p	pointer
=	O
q	pointer
;	O
argc	int
++	O
;	O
}	O
format_handler	function
(	O
id	pointer
,	O
form	pointer
,	O
argc	int
,	O
argv	array
)	O
;	O
form	pointer
->	O
format	pointer
=	O
p	pointer
;	O
while	O
(	O
--	O
argc	int
>=	O
0	int
)	O
free	function
(	O
argv	array
[	O
argc	int
]	O
)	O
;	O
}	O
}	O
}	O
form	pointer
->	O
format	pointer
=	O
p	pointer
;	O
form	pointer
->	O
depth	int
--	O
;	O
}	O
void	O
print_interface	function
(	O
int	O
sfd	int
,	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
ifreq	struct
*	O
ifr	pointer
,	O
const	O
char	O
*	O
format	pointer
)	O
{	O
struct	O
format_data	struct
form	pointer
;	O
static	O
int	O
first_passed_already	int
;	O
if	O
(	O
!	O
ostream	pointer
)	O
ostream	pointer
=	O
stdout	pointer
;	O
if	O
(	O
!	O
first_passed_already	int
)	O
first_passed_already	int
=	O
form	pointer
.	O
first	int
=	O
1	int
;	O
else	O
form	pointer
.	O
first	int
=	O
0	int
;	O
form	pointer
.	O
name	pointer
=	O
name	pointer
;	O
form	pointer
.	O
ifr	pointer
=	O
ifr	pointer
;	O
form	pointer
.	O
format	pointer
=	O
format	pointer
;	O
form	pointer
.	O
sfd	int
=	O
sfd	int
;	O
form	pointer
.	O
depth	int
=	O
0	int
;	O
print_interfaceX	function
(	O
&	O
form	pointer
,	O
0	int
)	O
;	O
}	O
