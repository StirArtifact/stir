FILE	struct
*	O
file	pointer
;	O
void	O
purgeLogFile	function
(	O
FILE	struct
*	O
logfile	pointer
,	O
char	O
*	O
logfilename	pointer
)	O
{	O
fseek	function
(	O
logfile	pointer
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
int	O
i	int
=	O
ftell	function
(	O
logfile	pointer
)	O
;	O
if	O
(	O
i	int
>	O
0	int
)	O
{	O
show_readme	function
(	O
logfilename	pointer
,	O
" Error log "	pointer
,	O
GNU_DOS_LEVEL	int
)	O
;	O
}	O
fclose	function
(	O
logfile	pointer
)	O
;	O
}	O
void	O
exportTreeFromCommandLine	function
(	O
char	O
*	O
d	pointer
,	O
char	O
*	O
f	pointer
)	O
{	O
if	O
(	O
!	O
(	O
file	pointer
=	O
fopen	function
(	O
f	pointer
,	O
"w"	pointer
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Error opening export file: '%s'.\nAborting.\n"	pointer
,	O
f	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
fprintf	function
(	O
stdout	pointer
,	O
"Reading directory tree. Please wait..\n"	pointer
)	O
;	O
fprintf	function
(	O
file	pointer
,	O
"\nDirectory tree of '%s/':"	pointer
,	O
d	pointer
)	O
;	O
scanThisDir	function
(	O
d	pointer
,	O
0	int
,	O
0	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"Finished writing directory tree of '%s' to '%s'.\n"	pointer
,	O
d	pointer
,	O
f	pointer
)	O
;	O
fclose	function
(	O
file	pointer
)	O
;	O
return	O
;	O
}	O
void	O
exportTree	function
(	O
int	O
showFileNameDialogBox	int
)	O
{	O
if	O
(	O
showFileNameDialogBox	int
==	O
YES	int
)	O
{	O
char	O
*	O
f	pointer
=	O
getUserInput	function
(	O
"The directory tree of the current dir will be exported.\n"	pointer
"Enter export file name:"	pointer
,	O
"Export"	pointer
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
!	O
(	O
file	pointer
=	O
fopen	function
(	O
f	pointer
,	O
"w"	pointer
)	O
)	O
)	O
{	O
msgBoxH	function
(	O
"Error opening export file. Aborting."	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
free	function
(	O
f	pointer
)	O
;	O
refreshWindows	function
(	O
)	O
;	O
return	O
;	O
}	O
free	function
(	O
f	pointer
)	O
;	O
}	O
fprintf	function
(	O
file	pointer
,	O
"Directory tree of '%s/':"	pointer
,	O
cwd	short
)	O
;	O
scanThisDir	function
(	O
cwd	short
,	O
0	int
,	O
1	int
)	O
;	O
fclose	function
(	O
file	pointer
)	O
;	O
int	O
x	int
=	O
chdir	function
(	O
cwd	short
)	O
;	O
if	O
(	O
x	int
==	O
-	O
1	int
&&	O
showFileNameDialogBox	int
)	O
{	O
showErrorMsgBox	function
(	O
"Error changing directory: "	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
void	O
scanThisDir	function
(	O
char	O
*	O
tmp	array
,	O
int	O
level	int
,	O
int	O
showProgress	int
)	O
{	O
static	O
int	O
nf	int
=	O
0	int
;	O
static	O
int	O
nd	int
=	O
0	int
;	O
int	O
n	int
;	O
struct	O
dirent	struct
*	O
*	O
eps	pointer
;	O
struct	O
stat	struct
statbuf	struct
;	O
int	O
h	int
=	O
SCREEN_H	int
/	O
2	int
;	O
int	O
w	int
=	O
SCREEN_W	int
/	O
2	int
;	O
static	O
char	O
exportingString	array
[	O
]	O
=	O
"Exporting %d of %d"	pointer
;	O
n	int
=	O
scandir	function
(	O
tmp	array
,	O
&	O
eps	pointer
,	O
one	function
,	O
alphasort	function
)	O
;	O
if	O
(	O
n	int
>=	O
0	int
)	O
{	O
int	O
z	int
=	O
chdir	function
(	O
tmp	array
)	O
;	O
if	O
(	O
z	int
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
file	pointer
,	O
"\n%*s (Error: %s)"	pointer
,	O
level	int
,	O
" "	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
int	O
cnt	int
;	O
for	O
(	O
cnt	int
=	O
0	int
;	O
cnt	int
<	O
n	int
;	O
++	O
cnt	int
)	O
{	O
char	O
*	O
d	pointer
=	O
eps	pointer
[	O
cnt	int
]	O
->	O
d_name	array
;	O
if	O
(	O
level	int
==	O
0	int
&&	O
showProgress	int
)	O
{	O
drawBox	function
(	O
h	int
-	O
2	int
,	O
w	int
-	O
12	int
,	O
h	int
+	O
1	int
,	O
w	int
+	O
12	int
,	O
NULL	O
,	O
YES	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
"\e[%d;%dH"	pointer
,	O
h	int
-	O
1	int
,	O
w	int
-	O
11	int
)	O
;	O
fprintf	function
(	O
stdout	pointer
,	O
exportingString	array
,	O
cnt	int
+	O
1	int
,	O
n	int
)	O
;	O
}	O
z	int
=	O
lstat	function
(	O
d	pointer
,	O
&	O
statbuf	struct
)	O
;	O
if	O
(	O
z	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
showProgress	int
)	O
showErrorMsgBox	function
(	O
strerror	function
(	O
errno	O
)	O
,	O
d	pointer
)	O
;	O
chdir	function
(	O
".."	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
statbuf	struct
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
d	pointer
,	O
"."	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
d	pointer
,	O
".."	pointer
)	O
==	O
0	int
)	O
continue	O
;	O
fprintf	function
(	O
file	pointer
,	O
"\n%*s|---- %s"	pointer
,	O
level	int
,	O
" "	pointer
,	O
eps	pointer
[	O
cnt	int
]	O
->	O
d_name	array
)	O
;	O
nd	int
++	O
;	O
scanThisDir	function
(	O
d	pointer
,	O
level	int
+	O
4	int
,	O
showProgress	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
file	pointer
,	O
"\n%*s|-[f] %s"	pointer
,	O
level	int
,	O
" "	pointer
,	O
eps	pointer
[	O
cnt	int
]	O
->	O
d_name	array
)	O
;	O
nf	int
++	O
;	O
}	O
}	O
z	int
=	O
chdir	function
(	O
".."	pointer
)	O
;	O
if	O
(	O
z	int
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
file	pointer
,	O
"\n%*s (Error: %s)"	pointer
,	O
level	int
,	O
" "	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	function
(	O
file	pointer
,	O
" (Failed to open directory)"	pointer
)	O
;	O
}	O
if	O
(	O
level	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
file	pointer
,	O
"\n---------------------------------\n"	pointer
)	O
;	O
fprintf	function
(	O
file	pointer
,	O
"Total dirs: %d, Total files: %d\n"	pointer
,	O
nd	int
,	O
nf	int
)	O
;	O
}	O
}	O
char	O
*	O
file_open_location	function
(	O
)	O
{	O
char	O
*	O
dir	pointer
=	O
getUserInput	function
(	O
"Enter directory path to open:"	pointer
,	O
"Open Location"	pointer
)	O
;	O
hideCursor	function
(	O
)	O
;	O
if	O
(	O
!	O
dir	pointer
)	O
return	O
NULL	O
;	O
scanDir	function
(	O
dir	pointer
)	O
;	O
refreshWindows	function
(	O
)	O
;	O
return	O
dir	pointer
;	O
}	O
void	O
fileMenu_CreateDir	function
(	O
)	O
{	O
char	O
*	O
dir	pointer
=	O
getUserInput	function
(	O
"Enter directory name to create:"	pointer
,	O
"New Directory"	pointer
)	O
;	O
hideCursor	function
(	O
)	O
;	O
if	O
(	O
!	O
dir	pointer
)	O
return	O
;	O
struct	O
stat	struct
st	struct
;	O
if	O
(	O
stat	struct
(	O
dir	pointer
,	O
&	O
st	struct
)	O
==	O
-	O
1	int
)	O
{	O
mkdir	function
(	O
dir	pointer
,	O
0775	int
)	O
;	O
}	O
else	O
{	O
msgBoxH	function
(	O
"Directory already exists!"	pointer
,	O
OK	int
,	O
ERROR	int
)	O
;	O
}	O
free	function
(	O
dir	pointer
)	O
;	O
scanDir	function
(	O
cwd	short
)	O
;	O
refreshWindows	function
(	O
)	O
;	O
}	O
void	O
fileMenu_Open	function
(	O
)	O
{	O
file_open_location	function
(	O
)	O
;	O
}	O
void	O
fileMenu_ExportTree	function
(	O
)	O
{	O
exportTree	function
(	O
YES	int
)	O
;	O
setScreenColorsI	function
(	O
COLOR_WINDOW	int
)	O
;	O
scanDir	function
(	O
cwd	short
)	O
;	O
}	O
void	O
fileMenu_Print	function
(	O
)	O
{	O
msgBoxH	function
(	O
"Oops! This function is currently not implemented."	pointer
,	O
OK	int
,	O
INFO	int
)	O
;	O
refreshFileView	function
(	O
)	O
;	O
refreshDirView	function
(	O
)	O
;	O
}	O
void	O
fileMenu_Exit	function
(	O
)	O
{	O
int	O
i	int
=	O
msgBoxH	function
(	O
"Are you sure you want to exit?"	pointer
,	O
YES	int
|	O
NO	int
,	O
CONFIRM	int
)	O
;	O
if	O
(	O
i	int
==	O
YES	int
)	O
{	O
exit_gracefully	function
(	O
)	O
;	O
}	O
}	O
