static	O
PyObject	O
*	O
_repr	function
(	O
PyObject	O
*	O
self	pointer
)	O
{	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
sprintf	O
(	O
buf	pointer
,	O
"<"	pointer
PY_MODULE	pointer
"."	pointer
PY_CSNAME	pointer
" instance at %p>"	pointer
,	O
self	pointer
)	O
;	O
return	O
PyUnicode_FromString	function
(	O
buf	pointer
)	O
;	O
}	O
static	O
PyTypeObject	O
PyEnvelopeType	int
=	O
{	O
.	O
ob_base	O
=	O
{	O
PyObject_HEAD_INIT	function
(	O
NULL	O
)	O
}	O
,	O
.	O
tp_name	O
=	O
PY_MODULE	pointer
"."	pointer
PY_CSNAME	pointer
,	O
.	O
tp_basicsize	O
=	O
sizeof	O
(	O
PyEnvelope	O
)	O
,	O
.	O
tp_dealloc	O
=	O
(	O
destructor	O
)	O
_py_dealloc	function
,	O
.	O
tp_repr	O
=	O
_repr	function
,	O
.	O
tp_str	O
=	O
_repr	function
,	O
.	O
tp_flags	O
=	O
Py_TPFLAGS_DEFAULT	O
,	O
.	O
tp_doc	O
=	O
""	pointer
,	O
}	O
;	O
PyEnvelope	O
*	O
PyEnvelope_NEW	function
(	O
)	O
{	O
return	O
(	O
PyEnvelope	O
*	O
)	O
PyObject_NEW	O
(	O
PyEnvelope	O
,	O
&	O
PyEnvelopeType	int
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_envelope_create	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
int	O
status	int
;	O
PyEnvelope	O
*	O
py_env	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!"	pointer
,	O
&	O
PyEnvelopeType	int
,	O
&	O
py_env	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_envelope_create	function
(	O
&	O
py_env	O
->	O
env	O
,	O
NULL	O
)	O
;	O
return	O
_ro	function
(	O
PyLong_FromLong	function
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_envelope_destroy	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
PyEnvelope	O
*	O
py_env	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!"	pointer
,	O
&	O
PyEnvelopeType	int
,	O
&	O
py_env	O
)	O
)	O
return	O
NULL	O
;	O
mu_envelope_destroy	function
(	O
&	O
py_env	O
->	O
env	O
,	O
NULL	O
)	O
;	O
return	O
_ro	function
(	O
Py_None	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_envelope_get_sender	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
int	O
status	int
;	O
const	O
char	O
*	O
sender	pointer
=	O
NULL	O
;	O
PyEnvelope	O
*	O
py_env	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!"	pointer
,	O
&	O
PyEnvelopeType	int
,	O
&	O
py_env	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_envelope_sget_sender	function
(	O
py_env	O
->	O
env	O
,	O
&	O
sender	pointer
)	O
;	O
return	O
status_object	function
(	O
status	int
,	O
PyUnicode_FromString	function
(	O
mu_prstr	function
(	O
sender	pointer
)	O
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_envelope_get_date	function
(	O
PyObject	O
*	O
self	pointer
,	O
PyObject	O
*	O
args	pointer
)	O
{	O
int	O
status	int
;	O
const	O
char	O
*	O
date	pointer
=	O
NULL	O
;	O
PyEnvelope	O
*	O
py_env	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	function
(	O
args	pointer
,	O
"O!"	pointer
,	O
&	O
PyEnvelopeType	int
,	O
&	O
py_env	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_envelope_sget_date	function
(	O
py_env	O
->	O
env	O
,	O
&	O
date	pointer
)	O
;	O
return	O
status_object	function
(	O
status	int
,	O
PyUnicode_FromString	function
(	O
mu_prstr	function
(	O
date	pointer
)	O
)	O
)	O
;	O
}	O
static	O
PyMethodDef	O
methods	array
[	O
]	O
=	O
{	O
{	O
"create"	pointer
,	O
(	O
PyCFunction	O
)	O
api_envelope_create	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"destroy"	pointer
,	O
(	O
PyCFunction	O
)	O
api_envelope_destroy	function
,	O
METH_VARARGS	O
,	O
""	pointer
}	O
,	O
{	O
"get_sender"	pointer
,	O
(	O
PyCFunction	O
)	O
api_envelope_get_sender	function
,	O
METH_VARARGS	O
,	O
"Get the address that this message was reportedly received from."	pointer
}	O
,	O
{	O
"get_date"	pointer
,	O
(	O
PyCFunction	O
)	O
api_envelope_get_date	function
,	O
METH_VARARGS	O
,	O
"Get the date that the message was delivered to the mailbox."	pointer
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
PyModuleDef	O
moduledef	struct
=	O
{	O
PyModuleDef_HEAD_INIT	O
,	O
PY_MODULE	pointer
,	O
NULL	O
,	O
-	O
1	int
,	O
methods	array
}	O
;	O
int	O
mu_py_init_envelope	function
(	O
)	O
{	O
PyEnvelopeType	int
.	O
tp_new	O
=	O
PyType_GenericNew	O
;	O
return	O
PyType_Ready	function
(	O
&	O
PyEnvelopeType	int
)	O
;	O
}	O
void	O
_mu_py_attach_envelope	function
(	O
void	O
)	O
{	O
PyObject	O
*	O
m	O
;	O
if	O
(	O
(	O
m	O
=	O
_mu_py_attach_module	function
(	O
&	O
moduledef	struct
)	O
)	O
)	O
{	O
Py_INCREF	function
(	O
&	O
PyEnvelopeType	int
)	O
;	O
PyModule_AddObject	function
(	O
m	O
,	O
PY_CSNAME	pointer
,	O
(	O
PyObject	O
*	O
)	O
&	O
PyEnvelopeType	int
)	O
;	O
}	O
}	O
