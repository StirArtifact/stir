int	O
keepalive	int
=	O
1	int
;	O
int	O
check_all	int
;	O
int	O
log_success	int
;	O
int	O
sent_null	int
;	O
void	O
doit	function
(	O
int	O
,	O
struct	O
sockaddr_in	struct
*	O
)	O
;	O
void	O
rshd_error	function
(	O
const	O
char	O
*	O
,	O
...	O
)	O
;	O
char	O
*	O
getstr	function
(	O
const	O
char	O
*	O
)	O
;	O
int	O
local_domain	function
(	O
const	O
char	O
*	O
)	O
;	O
const	O
char	O
*	O
topdomain	function
(	O
const	O
char	O
*	O
)	O
;	O
static	O
struct	O
argp_option	struct
options	pointer
[	O
]	O
=	O
{	O
{	O
"verify-hostname"	pointer
,	O
'a'	O
,	O
NULL	O
,	O
0	int
,	O
"ask hostname for verification"	pointer
}	O
,	O
{	O
"no-rhosts"	pointer
,	O
'l'	O
,	O
NULL	O
,	O
0	int
,	O
"ignore .rhosts file"	pointer
}	O
,	O
{	O
"no-keepalive"	pointer
,	O
'n'	O
,	O
NULL	O
,	O
0	int
,	O
"do not set SO_KEEPALIVE"	pointer
}	O
,	O
{	O
"log-sessions"	pointer
,	O
'L'	O
,	O
NULL	O
,	O
0	int
,	O
"log successfull logins"	pointer
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
extern	O
int	O
__check_rhosts_file	int
;	O
extern	O
int	O
iruserok	function
(	O
uint32_t	int
raddr	int
,	O
int	O
superuser	int
,	O
const	O
char	O
*	O
ruser	pointer
,	O
const	O
char	O
*	O
luser	pointer
)	O
;	O
static	O
error_t	int
parse_opt	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	struct
*	O
state	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'a'	O
:	O
check_all	int
=	O
1	int
;	O
break	O
;	O
case	O
'l'	O
:	O
__check_rhosts_file	int
=	O
0	int
;	O
break	O
;	O
case	O
'n'	O
:	O
keepalive	int
=	O
0	int
;	O
break	O
;	O
case	O
'L'	O
:	O
log_success	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
const	O
char	O
doc	pointer
[	O
]	O
=	O
"Remote shell server"	pointer
;	O
static	O
struct	O
argp	struct
argp	struct
=	O
{	O
options	pointer
,	O
parse_opt	function
,	O
NULL	O
,	O
doc	pointer
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	pointer
[	O
]	O
)	O
{	O
int	O
index	function
;	O
struct	O
linger	struct
linger	struct
;	O
int	O
on	int
=	O
1	int
;	O
socklen_t	int
fromlen	int
;	O
struct	O
sockaddr_in	struct
from	struct
;	O
int	O
sockfd	int
;	O
set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"rshd"	pointer
,	O
default_program_authors	array
)	O
;	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
&	O
index	function
,	O
NULL	O
)	O
;	O
openlog	function
(	O
"rshd"	pointer
,	O
LOG_PID	int
|	O
LOG_ODELAY	int
,	O
LOG_DAEMON	O
)	O
;	O
argc	int
-=	O
index	function
;	O
if	O
(	O
argc	int
>	O
0	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"%d extra arguments"	pointer
,	O
argc	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
sockfd	int
=	O
STDIN_FILENO	int
;	O
fromlen	int
=	O
sizeof	O
from	struct
;	O
if	O
(	O
getpeername	function
(	O
sockfd	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
from	struct
,	O
&	O
fromlen	int
)	O
<	O
0	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"getpeername: %m"	pointer
)	O
;	O
_exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
keepalive	int
&&	O
setsockopt	function
(	O
sockfd	int
,	O
SOL_SOCKET	int
,	O
SO_KEEPALIVE	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
on	int
)	O
<	O
0	int
)	O
syslog	function
(	O
LOG_WARNING	int
,	O
"setsockopt (SO_KEEPALIVE): %m"	pointer
)	O
;	O
linger	struct
.	O
l_onoff	int
=	O
1	int
;	O
linger	struct
.	O
l_linger	int
=	O
60	int
;	O
if	O
(	O
setsockopt	function
(	O
sockfd	int
,	O
SOL_SOCKET	int
,	O
SO_LINGER	int
,	O
(	O
char	O
*	O
)	O
&	O
linger	struct
,	O
sizeof	O
linger	struct
)	O
<	O
0	int
)	O
syslog	function
(	O
LOG_WARNING	int
,	O
"setsockopt (SO_LINGER): %m"	pointer
)	O
;	O
doit	function
(	O
sockfd	int
,	O
&	O
from	struct
)	O
;	O
return	O
0	int
;	O
}	O
char	O
username	array
[	O
20	int
]	O
=	O
"USER="	pointer
;	O
char	O
logname	array
[	O
23	int
]	O
=	O
"LOGNAME="	pointer
;	O
char	O
homedir	array
[	O
64	int
]	O
=	O
"HOME="	pointer
;	O
char	O
shell	array
[	O
64	int
]	O
=	O
"SHELL="	pointer
;	O
char	O
path	array
[	O
100	int
]	O
=	O
"PATH="	pointer
;	O
char	O
*	O
envinit	array
[	O
]	O
=	O
{	O
homedir	array
,	O
shell	array
,	O
path	array
,	O
logname	array
,	O
username	array
,	O
0	int
}	O
;	O
extern	O
char	O
*	O
*	O
environ	pointer
;	O
void	O
doit	function
(	O
int	O
sockfd	int
,	O
struct	O
sockaddr_in	struct
*	O
fromp	pointer
)	O
{	O
extern	O
char	O
*	O
__rcmd_errstr	pointer
;	O
struct	O
hostent	struct
*	O
hp	pointer
;	O
struct	O
passwd	struct
*	O
pwd	pointer
;	O
unsigned	O
short	O
port	short
;	O
fd_set	struct
ready	struct
,	O
readfrom	struct
;	O
int	O
cc	int
,	O
nfd	int
,	O
pv	array
[	O
2	int
]	O
,	O
pid	int
,	O
s	int
=	O
sockfd	int
;	O
int	O
one	int
=	O
1	int
;	O
const	O
char	O
*	O
hostname	pointer
,	O
*	O
errorstr	pointer
,	O
*	O
errorhost	pointer
=	O
NULL	O
;	O
char	O
*	O
cp	pointer
,	O
sig	char
,	O
buf	array
[	O
BUFSIZ	int
]	O
;	O
char	O
*	O
cmdbuf	pointer
,	O
*	O
locuser	pointer
,	O
*	O
remuser	pointer
;	O
signal	function
(	O
SIGINT	int
,	O
SIG_DFL	O
)	O
;	O
signal	function
(	O
SIGQUIT	int
,	O
SIG_DFL	O
)	O
;	O
signal	function
(	O
SIGTERM	int
,	O
SIG_DFL	O
)	O
;	O
if	O
(	O
fromp	pointer
->	O
sin_family	short
!=	O
AF_INET	O
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"malformed \"from\" address (af %d)\n"	pointer
,	O
fromp	pointer
->	O
sin_family	short
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
{	O
unsigned	O
char	O
optbuf	array
[	O
BUFSIZ	int
/	O
3	int
]	O
,	O
*	O
cp	pointer
;	O
char	O
lbuf	array
[	O
BUFSIZ	int
]	O
,	O
*	O
lp	pointer
;	O
socklen_t	int
optsize	int
=	O
sizeof	O
(	O
optbuf	array
)	O
;	O
int	O
ipproto	int
;	O
struct	O
protoent	struct
*	O
ip	struct
;	O
if	O
(	O
(	O
ip	struct
=	O
getprotobyname	function
(	O
"ip"	pointer
)	O
)	O
!=	O
NULL	O
)	O
ipproto	int
=	O
ip	struct
->	O
p_proto	int
;	O
else	O
ipproto	int
=	O
IPPROTO_IP	int
;	O
if	O
(	O
!	O
getsockopt	function
(	O
sockfd	int
,	O
ipproto	int
,	O
IP_OPTIONS	int
,	O
(	O
char	O
*	O
)	O
optbuf	array
,	O
&	O
optsize	int
)	O
&&	O
optsize	int
!=	O
0	int
)	O
{	O
lp	pointer
=	O
lbuf	array
;	O
for	O
(	O
cp	pointer
=	O
optbuf	array
;	O
optsize	int
>	O
0	int
;	O
)	O
{	O
sprintf	function
(	O
lp	pointer
,	O
" %2.2x"	pointer
,	O
*	O
cp	pointer
)	O
;	O
lp	pointer
+=	O
3	int
;	O
if	O
(	O
*	O
cp	pointer
==	O
IPOPT_SSRR	int
||	O
*	O
cp	pointer
==	O
IPOPT_LSRR	int
)	O
{	O
syslog	function
(	O
LOG_NOTICE	int
,	O
"Discarding connection from %s with set source routing"	pointer
,	O
inet_ntoa	function
(	O
fromp	pointer
->	O
sin_addr	struct
)	O
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
*	O
cp	pointer
==	O
IPOPT_EOL	int
)	O
break	O
;	O
if	O
(	O
*	O
cp	pointer
==	O
IPOPT_NOP	int
)	O
cp	pointer
++	O
,	O
optsize	int
--	O
;	O
else	O
{	O
int	O
inc	int
=	O
cp	pointer
[	O
1	int
]	O
;	O
optsize	int
-=	O
inc	int
;	O
cp	pointer
+=	O
inc	int
;	O
}	O
}	O
syslog	function
(	O
LOG_NOTICE	int
,	O
"Connection received from %s using IP options (erased):%s"	pointer
,	O
inet_ntoa	function
(	O
fromp	pointer
->	O
sin_addr	struct
)	O
,	O
lbuf	array
)	O
;	O
if	O
(	O
setsockopt	function
(	O
sockfd	int
,	O
ipproto	int
,	O
IP_OPTIONS	int
,	O
(	O
char	O
*	O
)	O
NULL	O
,	O
optsize	int
)	O
!=	O
0	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"setsockopt IP_OPTIONS NULL: %m"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
fromp	pointer
->	O
sin_port	short
=	O
ntohs	function
(	O
(	O
unsigned	O
short	O
)	O
fromp	pointer
->	O
sin_port	short
)	O
;	O
if	O
(	O
fromp	pointer
->	O
sin_port	short
>=	O
IPPORT_RESERVED	int
||	O
fromp	pointer
->	O
sin_port	short
<	O
IPPORT_RESERVED	int
/	O
2	int
)	O
{	O
syslog	function
(	O
LOG_NOTICE	int
|	O
LOG_AUTH	O
,	O
"Connection from %s on illegal port %u"	pointer
,	O
inet_ntoa	function
(	O
fromp	pointer
->	O
sin_addr	struct
)	O
,	O
fromp	pointer
->	O
sin_port	short
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
alarm	function
(	O
60	int
)	O
;	O
port	short
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
char	O
c	char
;	O
if	O
(	O
(	O
cc	int
=	O
read	function
(	O
sockfd	int
,	O
&	O
c	char
,	O
1	int
)	O
)	O
!=	O
1	int
)	O
{	O
if	O
(	O
cc	int
<	O
0	int
)	O
syslog	function
(	O
LOG_NOTICE	int
,	O
"read: %m"	pointer
)	O
;	O
shutdown	function
(	O
sockfd	int
,	O
2	int
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
c	char
==	O
0	int
)	O
break	O
;	O
port	short
=	O
port	short
*	O
10	int
+	O
c	char
-	O
'0'	O
;	O
}	O
alarm	function
(	O
0	int
)	O
;	O
if	O
(	O
port	short
!=	O
0	int
)	O
{	O
int	O
lport	int
=	O
IPPORT_RESERVED	int
-	O
1	int
;	O
s	int
=	O
rresvport	function
(	O
&	O
lport	int
)	O
;	O
if	O
(	O
s	int
<	O
0	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"can't get stderr port: %m"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
port	short
>=	O
IPPORT_RESERVED	int
||	O
port	short
<	O
IPPORT_RESERVED	int
/	O
2	int
)	O
{	O
syslog	function
(	O
LOG_ERR	int
,	O
"2nd port not reserved\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
fromp	pointer
->	O
sin_port	short
=	O
htons	function
(	O
port	short
)	O
;	O
if	O
(	O
connect	function
(	O
s	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
fromp	pointer
,	O
sizeof	O
(	O
*	O
fromp	pointer
)	O
)	O
<	O
0	int
)	O
{	O
syslog	function
(	O
LOG_INFO	int
,	O
"connect second port %d: %m"	pointer
,	O
port	short
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
sockfd	int
!=	O
STDIN_FILENO	int
)	O
{	O
dup2	function
(	O
sockfd	int
,	O
STDIN_FILENO	int
)	O
;	O
dup2	function
(	O
sockfd	int
,	O
STDOUT_FILENO	int
)	O
;	O
dup2	function
(	O
sockfd	int
,	O
STDERR_FILENO	int
)	O
;	O
}	O
errorstr	pointer
=	O
NULL	O
;	O
hp	pointer
=	O
gethostbyaddr	function
(	O
(	O
char	O
*	O
)	O
&	O
fromp	pointer
->	O
sin_addr	struct
,	O
sizeof	O
(	O
struct	O
in_addr	struct
)	O
,	O
fromp	pointer
->	O
sin_family	short
)	O
;	O
if	O
(	O
hp	pointer
)	O
{	O
hostname	pointer
=	O
strdup	function
(	O
hp	pointer
->	O
h_name	pointer
)	O
;	O
if	O
(	O
check_all	int
||	O
local_domain	function
(	O
hp	pointer
->	O
h_name	pointer
)	O
)	O
{	O
char	O
*	O
remotehost	pointer
=	O
alloca	O
(	O
strlen	function
(	O
hostname	pointer
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
remotehost	pointer
)	O
errorstr	pointer
=	O
"Out of memory\n"	pointer
;	O
else	O
{	O
strcpy	function
(	O
remotehost	pointer
,	O
hostname	pointer
)	O
;	O
errorhost	pointer
=	O
remotehost	pointer
;	O
hp	pointer
=	O
gethostbyname	function
(	O
remotehost	pointer
)	O
;	O
if	O
(	O
hp	pointer
==	O
NULL	O
)	O
{	O
syslog	function
(	O
LOG_INFO	int
,	O
"Couldn't look up address for %s"	pointer
,	O
remotehost	pointer
)	O
;	O
errorstr	pointer
=	O
"Couldn't look up address for your host (%s)\n"	pointer
;	O
hostname	pointer
=	O
inet_ntoa	function
(	O
fromp	pointer
->	O
sin_addr	struct
)	O
;	O
}	O
else	O
for	O
(	O
;	O
;	O
hp	pointer
->	O
h_addr_list	pointer
++	O
)	O
{	O
if	O
(	O
hp	pointer
->	O
h_addr_list	pointer
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
syslog	function
(	O
LOG_NOTICE	int
,	O
"Host addr %s not listed for host %s"	pointer
,	O
inet_ntoa	function
(	O
fromp	pointer
->	O
sin_addr	struct
)	O
,	O
hp	pointer
->	O
h_name	pointer
)	O
;	O
errorstr	pointer
=	O
"Host address mismatch for %s\n"	pointer
;	O
hostname	pointer
=	O
inet_ntoa	function
(	O
fromp	pointer
->	O
sin_addr	struct
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
memcmp	function
(	O
hp	pointer
->	O
h_addr_list	pointer
[	O
0	int
]	O
,	O
(	O
caddr_t	pointer
)	O
&	O
fromp	pointer
->	O
sin_addr	struct
,	O
sizeof	O
fromp	pointer
->	O
sin_addr	struct
)	O
)	O
{	O
hostname	pointer
=	O
hp	pointer
->	O
h_name	pointer
;	O
break	O
;	O
}	O
}	O
}	O
}	O
}	O
else	O
errorhost	pointer
=	O
hostname	pointer
=	O
inet_ntoa	function
(	O
fromp	pointer
->	O
sin_addr	struct
)	O
;	O
remuser	pointer
=	O
getstr	function
(	O
"remuser"	pointer
)	O
;	O
locuser	pointer
=	O
getstr	function
(	O
"locuser"	pointer
)	O
;	O
cmdbuf	pointer
=	O
getstr	function
(	O
"command"	pointer
)	O
;	O
setpwent	function
(	O
)	O
;	O
pwd	pointer
=	O
getpwnam	function
(	O
locuser	pointer
)	O
;	O
if	O
(	O
pwd	pointer
==	O
NULL	O
)	O
{	O
syslog	function
(	O
LOG_INFO	int
|	O
LOG_AUTH	O
,	O
"%s@%s as %s: unknown login. cmd='%.80s'"	pointer
,	O
remuser	pointer
,	O
hostname	pointer
,	O
locuser	pointer
,	O
cmdbuf	pointer
)	O
;	O
if	O
(	O
errorstr	pointer
==	O
NULL	O
)	O
errorstr	pointer
=	O
"Login incorrect.\n"	pointer
;	O
goto	O
fail	O
;	O
}	O
if	O
(	O
errorstr	pointer
||	O
(	O
pwd	pointer
->	O
pw_passwd	pointer
!=	O
0	int
&&	O
*	O
pwd	pointer
->	O
pw_passwd	pointer
!=	O
'\0'	O
&&	O
(	O
iruserok	function
(	O
fromp	pointer
->	O
sin_addr	struct
.	O
s_addr	int
,	O
pwd	pointer
->	O
pw_uid	int
==	O
0	int
,	O
remuser	pointer
,	O
locuser	pointer
)	O
)	O
<	O
0	int
)	O
)	O
{	O
if	O
(	O
__rcmd_errstr	pointer
)	O
syslog	function
(	O
LOG_INFO	int
|	O
LOG_AUTH	O
,	O
"%s@%s as %s: permission denied (%s). cmd='%.80s'"	pointer
,	O
remuser	pointer
,	O
hostname	pointer
,	O
locuser	pointer
,	O
__rcmd_errstr	pointer
,	O
cmdbuf	pointer
)	O
;	O
else	O
syslog	function
(	O
LOG_INFO	int
|	O
LOG_AUTH	O
,	O
"%s@%s as %s: permission denied. cmd='%.80s'"	pointer
,	O
remuser	pointer
,	O
hostname	pointer
,	O
locuser	pointer
,	O
cmdbuf	pointer
)	O
;	O
fail	O
:	O
if	O
(	O
errorstr	pointer
==	O
NULL	O
)	O
errorstr	pointer
=	O
"Permission denied.\n"	pointer
;	O
rshd_error	function
(	O
errorstr	pointer
,	O
errorhost	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
pwd	pointer
->	O
pw_uid	int
&&	O
!	O
access	function
(	O
PATH_NOLOGIN	O
,	O
F_OK	int
)	O
)	O
{	O
rshd_error	function
(	O
"Logins currently disabled.\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
write	function
(	O
STDERR_FILENO	int
,	O
"\0"	pointer
,	O
1	int
)	O
<	O
0	int
)	O
{	O
rshd_error	function
(	O
"Lost connection.\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
sent_null	int
=	O
1	int
;	O
if	O
(	O
port	short
)	O
{	O
if	O
(	O
pipe	function
(	O
pv	array
)	O
<	O
0	int
)	O
{	O
rshd_error	function
(	O
"Can't make pipe.\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
pid	int
=	O
fork	function
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
rshd_error	function
(	O
"Can't fork; try again.\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
pid	int
)	O
{	O
{	O
close	function
(	O
STDIN_FILENO	int
)	O
;	O
close	function
(	O
STDOUT_FILENO	int
)	O
;	O
}	O
close	function
(	O
STDERR_FILENO	int
)	O
;	O
close	function
(	O
pv	array
[	O
1	int
]	O
)	O
;	O
FD_ZERO	O
(	O
&	O
readfrom	struct
)	O
;	O
FD_SET	O
(	O
s	int
,	O
&	O
readfrom	struct
)	O
;	O
FD_SET	O
(	O
pv	array
[	O
0	int
]	O
,	O
&	O
readfrom	struct
)	O
;	O
if	O
(	O
pv	array
[	O
0	int
]	O
>	O
s	int
)	O
nfd	int
=	O
pv	array
[	O
0	int
]	O
;	O
else	O
nfd	int
=	O
s	int
;	O
ioctl	function
(	O
pv	array
[	O
0	int
]	O
,	O
FIONBIO	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
)	O
;	O
nfd	int
++	O
;	O
do	O
{	O
ready	struct
=	O
readfrom	struct
;	O
if	O
(	O
select	function
(	O
nfd	int
,	O
&	O
ready	struct
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
(	O
fd_set	struct
*	O
)	O
0	int
,	O
(	O
struct	O
timeval	struct
*	O
)	O
0	int
)	O
<	O
0	int
)	O
break	O
;	O
if	O
(	O
FD_ISSET	O
(	O
s	int
,	O
&	O
ready	struct
)	O
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
read	function
(	O
s	int
,	O
&	O
sig	char
,	O
1	int
)	O
;	O
if	O
(	O
ret	int
<=	O
0	int
)	O
FD_CLR	O
(	O
s	int
,	O
&	O
readfrom	struct
)	O
;	O
else	O
killpg	function
(	O
pid	int
,	O
sig	char
)	O
;	O
}	O
if	O
(	O
FD_ISSET	O
(	O
pv	array
[	O
0	int
]	O
,	O
&	O
ready	struct
)	O
)	O
{	O
errno	O
=	O
0	int
;	O
cc	int
=	O
read	function
(	O
pv	array
[	O
0	int
]	O
,	O
buf	array
,	O
sizeof	O
buf	array
)	O
;	O
if	O
(	O
cc	int
<=	O
0	int
)	O
{	O
shutdown	function
(	O
s	int
,	O
1	int
+	O
1	int
)	O
;	O
FD_CLR	O
(	O
pv	array
[	O
0	int
]	O
,	O
&	O
readfrom	struct
)	O
;	O
}	O
else	O
{	O
write	function
(	O
s	int
,	O
buf	array
,	O
cc	int
)	O
;	O
}	O
}	O
}	O
while	O
(	O
FD_ISSET	O
(	O
s	int
,	O
&	O
readfrom	struct
)	O
||	O
FD_ISSET	O
(	O
pv	array
[	O
0	int
]	O
,	O
&	O
readfrom	struct
)	O
)	O
;	O
exit	function
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
setpgid	function
(	O
0	int
,	O
getpid	function
(	O
)	O
)	O
;	O
close	function
(	O
s	int
)	O
;	O
close	function
(	O
pv	array
[	O
0	int
]	O
)	O
;	O
dup2	function
(	O
pv	array
[	O
1	int
]	O
,	O
STDERR_FILENO	int
)	O
;	O
close	function
(	O
pv	array
[	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
*	O
pwd	pointer
->	O
pw_shell	pointer
==	O
'\0'	O
)	O
pwd	pointer
->	O
pw_shell	pointer
=	O
PATH_BSHELL	O
;	O
setegid	function
(	O
(	O
gid_t	int
)	O
pwd	pointer
->	O
pw_gid	int
)	O
;	O
setgid	function
(	O
(	O
gid_t	int
)	O
pwd	pointer
->	O
pw_gid	int
)	O
;	O
initgroups	function
(	O
pwd	pointer
->	O
pw_name	pointer
,	O
pwd	pointer
->	O
pw_gid	int
)	O
;	O
setuid	function
(	O
(	O
uid_t	int
)	O
pwd	pointer
->	O
pw_uid	int
)	O
;	O
if	O
(	O
chdir	function
(	O
pwd	pointer
->	O
pw_dir	pointer
)	O
<	O
0	int
)	O
{	O
chdir	function
(	O
"/"	pointer
)	O
;	O
syslog	function
(	O
LOG_INFO	int
|	O
LOG_AUTH	O
,	O
"%s@%s as %s: no home directory. cmd='%.80s'"	pointer
,	O
remuser	pointer
,	O
hostname	pointer
,	O
locuser	pointer
,	O
cmdbuf	pointer
)	O
;	O
rshd_error	function
(	O
"No remote directory.\n"	pointer
)	O
;	O
}	O
environ	pointer
=	O
envinit	array
;	O
strncat	function
(	O
homedir	array
,	O
pwd	pointer
->	O
pw_dir	pointer
,	O
sizeof	O
(	O
homedir	array
)	O
-	O
6	int
)	O
;	O
strcat	function
(	O
path	array
,	O
PATH_DEFPATH	O
)	O
;	O
strncat	function
(	O
shell	array
,	O
pwd	pointer
->	O
pw_shell	pointer
,	O
sizeof	O
(	O
shell	array
)	O
-	O
7	int
)	O
;	O
strncat	function
(	O
username	array
,	O
pwd	pointer
->	O
pw_name	pointer
,	O
sizeof	O
(	O
username	array
)	O
-	O
6	int
)	O
;	O
cp	pointer
=	O
strrchr	function
(	O
pwd	pointer
->	O
pw_shell	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
cp	pointer
)	O
cp	pointer
++	O
;	O
else	O
cp	pointer
=	O
pwd	pointer
->	O
pw_shell	pointer
;	O
endpwent	function
(	O
)	O
;	O
if	O
(	O
log_success	int
||	O
pwd	pointer
->	O
pw_uid	int
==	O
0	int
)	O
{	O
syslog	function
(	O
LOG_INFO	int
|	O
LOG_AUTH	O
,	O
"%s@%s as %s: cmd='%.80s'"	pointer
,	O
remuser	pointer
,	O
hostname	pointer
,	O
locuser	pointer
,	O
cmdbuf	pointer
)	O
;	O
}	O
execl	function
(	O
pwd	pointer
->	O
pw_shell	pointer
,	O
cp	pointer
,	O
"-c"	pointer
,	O
cmdbuf	pointer
,	O
NULL	O
)	O
;	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot execute %s"	pointer
,	O
pwd	pointer
->	O
pw_shell	pointer
)	O
;	O
}	O
void	O
rshd_error	function
(	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
int	O
len	char
;	O
char	O
*	O
bp	pointer
,	O
buf	array
[	O
BUFSIZ	int
]	O
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
bp	pointer
=	O
buf	array
;	O
if	O
(	O
sent_null	int
==	O
0	int
)	O
{	O
*	O
bp	pointer
++	O
=	O
1	int
;	O
len	char
=	O
1	int
;	O
}	O
else	O
len	char
=	O
0	int
;	O
vsnprintf	function
(	O
bp	pointer
,	O
sizeof	O
(	O
buf	array
)	O
-	O
1	int
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
write	function
(	O
STDERR_FILENO	int
,	O
buf	array
,	O
len	char
+	O
strlen	function
(	O
bp	pointer
)	O
)	O
;	O
}	O
char	O
*	O
getstr	function
(	O
const	O
char	O
*	O
err	long
)	O
{	O
size_t	long
buf_len	long
=	O
100	int
;	O
char	O
*	O
buf	array
=	O
malloc	function
(	O
buf_len	long
)	O
,	O
*	O
end	pointer
=	O
buf	array
;	O
if	O
(	O
!	O
buf	array
)	O
{	O
rshd_error	function
(	O
"Out of space reading %s\n"	pointer
,	O
err	long
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
do	O
{	O
int	O
rd	int
=	O
read	function
(	O
STDIN_FILENO	int
,	O
end	pointer
,	O
1	int
)	O
;	O
if	O
(	O
rd	int
<=	O
0	int
)	O
{	O
if	O
(	O
rd	int
==	O
0	int
)	O
rshd_error	function
(	O
"EOF reading %s\n"	pointer
,	O
err	long
)	O
;	O
else	O
perror	function
(	O
err	long
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
end	pointer
+=	O
rd	int
;	O
if	O
(	O
(	O
buf	array
+	O
buf_len	long
-	O
end	pointer
)	O
<	O
(	O
buf_len	long
>>	O
3	int
)	O
)	O
{	O
size_t	long
end_offs	long
=	O
end	pointer
-	O
buf	array
;	O
buf_len	long
+=	O
buf_len	long
;	O
buf	array
=	O
realloc	function
(	O
buf	array
,	O
buf_len	long
)	O
;	O
if	O
(	O
!	O
buf	array
)	O
{	O
rshd_error	function
(	O
"Out of space reading %s\n"	pointer
,	O
err	long
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
end	pointer
=	O
buf	array
+	O
end_offs	long
;	O
}	O
}	O
while	O
(	O
*	O
(	O
end	pointer
-	O
1	int
)	O
)	O
;	O
return	O
buf	array
;	O
}	O
int	O
local_domain	function
(	O
const	O
char	O
*	O
h	pointer
)	O
{	O
char	O
*	O
hostname	pointer
=	O
localhost	function
(	O
)	O
;	O
if	O
(	O
!	O
hostname	pointer
)	O
return	O
0	int
;	O
else	O
{	O
int	O
is_local	int
=	O
0	int
;	O
const	O
char	O
*	O
p1	pointer
=	O
topdomain	function
(	O
hostname	pointer
)	O
;	O
const	O
char	O
*	O
p2	pointer
=	O
topdomain	function
(	O
h	pointer
)	O
;	O
if	O
(	O
p1	pointer
==	O
NULL	O
||	O
p2	pointer
==	O
NULL	O
||	O
!	O
strcasecmp	function
(	O
p1	pointer
,	O
p2	pointer
)	O
)	O
is_local	int
=	O
1	int
;	O
free	function
(	O
hostname	pointer
)	O
;	O
return	O
is_local	int
;	O
}	O
}	O
const	O
char	O
*	O
topdomain	function
(	O
const	O
char	O
*	O
h	pointer
)	O
{	O
const	O
char	O
*	O
p	pointer
,	O
*	O
maybe	pointer
=	O
NULL	O
;	O
int	O
dots	int
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
h	pointer
+	O
strlen	function
(	O
h	pointer
)	O
;	O
p	pointer
>=	O
h	pointer
;	O
p	pointer
--	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'.'	O
)	O
{	O
if	O
(	O
++	O
dots	int
==	O
2	int
)	O
return	O
p	pointer
;	O
maybe	pointer
=	O
p	pointer
;	O
}	O
}	O
return	O
maybe	pointer
;	O
}	O
