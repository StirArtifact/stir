mp_size_t	long
mpn_hgcd_appr_itch	O
(	O
mp_size_t	long
n	long
)	O
{	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
HGCD_APPR_THRESHOLD	int
)	O
)	O
return	O
n	long
;	O
else	O
{	O
unsigned	O
k	int
;	O
int	O
count	int
;	O
mp_size_t	long
nscaled	long
;	O
nscaled	long
=	O
(	O
n	long
-	O
1	int
)	O
/	O
(	O
HGCD_APPR_THRESHOLD	int
-	O
1	int
)	O
;	O
count_leading_zeros	O
(	O
count	int
,	O
nscaled	long
)	O
;	O
k	int
=	O
GMP_LIMB_BITS	int
-	O
count	int
;	O
return	O
20	int
*	O
(	O
(	O
n	long
+	O
3	int
)	O
/	O
4	int
)	O
+	O
22	int
*	O
k	int
+	O
HGCD_THRESHOLD	int
;	O
}	O
}	O
int	O
mpn_hgcd_appr	O
(	O
mp_ptr	pointer
ap	pointer
,	O
mp_ptr	pointer
bp	pointer
,	O
mp_size_t	long
n	long
,	O
struct	O
hgcd_matrix	struct
*	O
M	pointer
,	O
mp_ptr	pointer
tp	pointer
)	O
{	O
mp_size_t	long
s	array
;	O
int	O
success	int
=	O
0	int
;	O
ASSERT	O
(	O
n	long
>	O
0	int
)	O
;	O
ASSERT	O
(	O
(	O
ap	pointer
[	O
n	long
-	O
1	int
]	O
|	O
bp	pointer
[	O
n	long
-	O
1	int
]	O
)	O
!=	O
0	int
)	O
;	O
if	O
(	O
n	long
<=	O
2	int
)	O
return	O
0	int
;	O
ASSERT	O
(	O
(	O
n	long
+	O
1	int
)	O
/	O
2	int
-	O
1	int
<	O
M	pointer
->	O
alloc	long
)	O
;	O
s	array
=	O
n	long
/	O
2	int
+	O
1	int
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
n	long
,	O
HGCD_APPR_THRESHOLD	int
)	O
)	O
{	O
unsigned	O
extra_bits	int
=	O
0	int
;	O
while	O
(	O
n	long
>	O
2	int
)	O
{	O
mp_size_t	long
nn	long
;	O
ASSERT	O
(	O
n	long
>	O
s	array
)	O
;	O
ASSERT	O
(	O
n	long
<=	O
2	int
*	O
s	array
)	O
;	O
nn	long
=	O
mpn_hgcd_step	O
(	O
n	long
,	O
ap	pointer
,	O
bp	pointer
,	O
s	array
,	O
M	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
!	O
nn	long
)	O
break	O
;	O
n	long
=	O
nn	long
;	O
success	int
=	O
1	int
;	O
if	O
(	O
GMP_NUMB_BITS	O
*	O
(	O
n	long
+	O
1	int
)	O
+	O
2	int
*	O
extra_bits	int
<=	O
2	int
*	O
GMP_NUMB_BITS	O
*	O
s	array
)	O
{	O
mp_size_t	long
p	pointer
=	O
(	O
GMP_NUMB_BITS	O
*	O
(	O
2	int
*	O
s	array
-	O
n	long
)	O
-	O
2	int
*	O
extra_bits	int
)	O
/	O
GMP_NUMB_BITS	O
;	O
if	O
(	O
extra_bits	int
==	O
0	int
)	O
{	O
if	O
(	O
s	array
+	O
1	int
==	O
n	long
||	O
mpn_zero_p	function
(	O
ap	pointer
+	O
s	array
+	O
1	int
,	O
n	long
-	O
s	array
-	O
1	int
)	O
||	O
mpn_zero_p	function
(	O
bp	pointer
+	O
s	array
+	O
1	int
,	O
n	long
-	O
s	array
-	O
1	int
)	O
)	O
continue	O
;	O
extra_bits	int
=	O
GMP_NUMB_BITS	O
-	O
1	int
;	O
s	array
++	O
;	O
}	O
else	O
{	O
extra_bits	int
--	O
;	O
}	O
ap	pointer
+=	O
p	pointer
;	O
bp	pointer
+=	O
p	pointer
;	O
n	long
-=	O
p	pointer
;	O
s	array
-=	O
p	pointer
;	O
}	O
}	O
ASSERT	O
(	O
s	array
>	O
0	int
)	O
;	O
if	O
(	O
extra_bits	int
>	O
0	int
)	O
{	O
ap	pointer
--	O
;	O
bp	pointer
--	O
;	O
ap	pointer
[	O
0	int
]	O
=	O
mpn_rshift	O
(	O
ap	pointer
+	O
1	int
,	O
ap	pointer
+	O
1	int
,	O
n	long
,	O
GMP_NUMB_BITS	O
-	O
extra_bits	int
)	O
;	O
bp	pointer
[	O
0	int
]	O
=	O
mpn_rshift	O
(	O
bp	pointer
+	O
1	int
,	O
bp	pointer
+	O
1	int
,	O
n	long
,	O
GMP_NUMB_BITS	O
-	O
extra_bits	int
)	O
;	O
n	long
+=	O
(	O
ap	pointer
[	O
n	long
]	O
|	O
bp	pointer
[	O
n	long
]	O
)	O
>	O
0	int
;	O
ASSERT	O
(	O
success	int
)	O
;	O
while	O
(	O
n	long
>	O
2	int
)	O
{	O
mp_size_t	long
nn	long
;	O
ASSERT	O
(	O
n	long
>	O
s	array
)	O
;	O
ASSERT	O
(	O
n	long
<=	O
2	int
*	O
s	array
)	O
;	O
nn	long
=	O
mpn_hgcd_step	O
(	O
n	long
,	O
ap	pointer
,	O
bp	pointer
,	O
s	array
,	O
M	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
!	O
nn	long
)	O
return	O
1	int
;	O
n	long
=	O
nn	long
;	O
}	O
}	O
if	O
(	O
n	long
==	O
2	int
)	O
{	O
struct	O
hgcd_matrix1	struct
M1	struct
;	O
ASSERT	O
(	O
s	array
==	O
1	int
)	O
;	O
if	O
(	O
mpn_hgcd2	O
(	O
ap	pointer
[	O
1	int
]	O
,	O
ap	pointer
[	O
0	int
]	O
,	O
bp	pointer
[	O
1	int
]	O
,	O
bp	pointer
[	O
0	int
]	O
,	O
&	O
M1	struct
)	O
)	O
{	O
mpn_hgcd_matrix_mul_1	O
(	O
M	pointer
,	O
&	O
M1	struct
,	O
tp	pointer
)	O
;	O
success	int
=	O
1	int
;	O
}	O
}	O
return	O
success	int
;	O
}	O
else	O
{	O
mp_size_t	long
n2	long
=	O
(	O
3	int
*	O
n	long
)	O
/	O
4	int
+	O
1	int
;	O
mp_size_t	long
p	pointer
=	O
n	long
/	O
2	int
;	O
mp_size_t	long
nn	long
;	O
nn	long
=	O
mpn_hgcd_reduce	O
(	O
M	pointer
,	O
ap	pointer
,	O
bp	pointer
,	O
n	long
,	O
p	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
nn	long
)	O
{	O
n	long
=	O
nn	long
;	O
success	int
=	O
1	int
;	O
}	O
while	O
(	O
n	long
>	O
n2	long
)	O
{	O
mp_size_t	long
nn	long
;	O
nn	long
=	O
mpn_hgcd_step	O
(	O
n	long
,	O
ap	pointer
,	O
bp	pointer
,	O
s	array
,	O
M	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
!	O
nn	long
)	O
return	O
success	int
;	O
n	long
=	O
nn	long
;	O
success	int
=	O
1	int
;	O
}	O
if	O
(	O
n	long
>	O
s	array
+	O
2	int
)	O
{	O
struct	O
hgcd_matrix	struct
M1	struct
;	O
mp_size_t	long
scratch	long
;	O
p	pointer
=	O
2	int
*	O
s	array
-	O
n	long
+	O
1	int
;	O
scratch	long
=	O
MPN_HGCD_MATRIX_INIT_ITCH	O
(	O
n	long
-	O
p	pointer
)	O
;	O
mpn_hgcd_matrix_init	O
(	O
&	O
M1	struct
,	O
n	long
-	O
p	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
mpn_hgcd_appr	O
(	O
ap	pointer
+	O
p	pointer
,	O
bp	pointer
+	O
p	pointer
,	O
n	long
-	O
p	pointer
,	O
&	O
M1	struct
,	O
tp	pointer
+	O
scratch	long
)	O
)	O
{	O
ASSERT	O
(	O
M	pointer
->	O
n	long
+	O
2	int
>=	O
M1	struct
.	O
n	long
)	O
;	O
ASSERT	O
(	O
M	pointer
->	O
n	long
+	O
M1	struct
.	O
n	long
<	O
M	pointer
->	O
alloc	long
)	O
;	O
mpn_hgcd_matrix_mul	O
(	O
M	pointer
,	O
&	O
M1	struct
,	O
tp	pointer
+	O
scratch	long
)	O
;	O
return	O
1	int
;	O
}	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
mp_size_t	long
nn	long
;	O
ASSERT	O
(	O
n	long
>	O
s	array
)	O
;	O
ASSERT	O
(	O
n	long
<=	O
2	int
*	O
s	array
)	O
;	O
nn	long
=	O
mpn_hgcd_step	O
(	O
n	long
,	O
ap	pointer
,	O
bp	pointer
,	O
s	array
,	O
M	pointer
,	O
tp	pointer
)	O
;	O
if	O
(	O
!	O
nn	long
)	O
return	O
success	int
;	O
n	long
=	O
nn	long
;	O
success	int
=	O
1	int
;	O
}	O
}	O
}	O
