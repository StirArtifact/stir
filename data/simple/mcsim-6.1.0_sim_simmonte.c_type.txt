void	O
SetParms	function
(	O
long	O
cParms	long
,	O
HVAR	long
*	O
rghvar	pointer
,	O
double	O
*	O
rgdParm	pointer
)	O
{	O
long	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
cParms	long
;	O
i	long
++	O
)	O
SetVar	function
(	O
rghvar	pointer
[	O
i	long
]	O
,	O
rgdParm	pointer
[	O
i	long
]	O
)	O
;	O
}	O
void	O
SetParmsLog	function
(	O
long	O
cParms	long
,	O
HVAR	long
*	O
rghvar	pointer
,	O
double	O
*	O
rgdParm	pointer
)	O
{	O
long	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
cParms	long
;	O
i	long
++	O
)	O
SetVar	function
(	O
rghvar	pointer
[	O
i	long
]	O
,	O
log	function
(	O
rgdParm	pointer
[	O
i	long
]	O
)	O
)	O
;	O
}	O
void	O
SetParmsExp	function
(	O
long	O
cParms	long
,	O
HVAR	long
*	O
rghvar	pointer
,	O
double	O
*	O
rgdParm	pointer
)	O
{	O
long	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
cParms	long
;	O
i	long
++	O
)	O
SetVar	function
(	O
rghvar	pointer
[	O
i	long
]	O
,	O
exp	function
(	O
rgdParm	pointer
[	O
i	long
]	O
)	O
)	O
;	O
}	O
int	O
CalculateOneMCParm	function
(	O
PMCVAR	pointer
pMCVar	pointer
)	O
{	O
double	O
dParm1	double
,	O
dParm2	double
,	O
dMin	double
,	O
dMax	double
;	O
dParm1	double
=	O
*	O
(	O
pMCVar	pointer
->	O
pdParm	array
[	O
0	int
]	O
)	O
;	O
dParm2	double
=	O
*	O
(	O
pMCVar	pointer
->	O
pdParm	array
[	O
1	int
]	O
)	O
;	O
dMin	double
=	O
*	O
(	O
pMCVar	pointer
->	O
pdParm	array
[	O
2	int
]	O
)	O
;	O
dMax	double
=	O
*	O
(	O
pMCVar	pointer
->	O
pdParm	array
[	O
3	int
]	O
)	O
;	O
switch	O
(	O
pMCVar	pointer
->	O
iType	int
)	O
{	O
default	O
:	O
case	O
MCV_UNIFORM	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
UniformRandom	function
(	O
dParm1	double
,	O
dParm2	double
)	O
;	O
break	O
;	O
case	O
MCV_LOGUNIFORM	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
LogUniformRandom	function
(	O
dParm1	double
,	O
dParm2	double
)	O
;	O
break	O
;	O
case	O
MCV_BETA	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
BetaRandom	function
(	O
dParm1	double
,	O
dParm2	double
,	O
dMin	double
,	O
dMax	double
)	O
;	O
break	O
;	O
case	O
MCV_HALFNORMAL	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
fabs	function
(	O
NormalRandom	function
(	O
dParm1	double
,	O
dParm2	double
)	O
)	O
;	O
break	O
;	O
case	O
MCV_NORMAL	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
NormalRandom	function
(	O
dParm1	double
,	O
dParm2	double
)	O
;	O
break	O
;	O
case	O
MCV_NORMALCV	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
NormalRandom	function
(	O
dParm1	double
,	O
fabs	function
(	O
dParm1	double
*	O
dParm2	double
)	O
)	O
;	O
break	O
;	O
case	O
MCV_NORMALV	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
NormalRandom	function
(	O
dParm1	double
,	O
sqrt	function
(	O
dParm2	double
)	O
)	O
;	O
break	O
;	O
case	O
MCV_TRUNCNORMAL	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
TruncNormalRandom	function
(	O
dParm1	double
,	O
dParm2	double
,	O
dMin	double
,	O
dMax	double
)	O
;	O
break	O
;	O
case	O
MCV_TRUNCNORMALCV	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
TruncNormalRandom	function
(	O
dParm1	double
,	O
fabs	function
(	O
dParm1	double
*	O
dParm2	double
)	O
,	O
dMin	double
,	O
dMax	double
)	O
;	O
break	O
;	O
case	O
MCV_TRUNCNORMALV	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
TruncNormalRandom	function
(	O
dParm1	double
,	O
sqrt	function
(	O
dParm2	double
)	O
,	O
dMin	double
,	O
dMax	double
)	O
;	O
break	O
;	O
case	O
MCV_LOGNORMAL	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
LogNormalRandom	function
(	O
dParm1	double
,	O
dParm2	double
)	O
;	O
break	O
;	O
case	O
MCV_TRUNCLOGNORMAL	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
TruncLogNormalRandom	function
(	O
dParm1	double
,	O
dParm2	double
,	O
dMin	double
,	O
dMax	double
)	O
;	O
break	O
;	O
case	O
MCV_LOGNORMALV	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
LogNormalRandom	function
(	O
dParm1	double
,	O
exp	function
(	O
sqrt	function
(	O
dParm2	double
)	O
)	O
)	O
;	O
break	O
;	O
case	O
MCV_TRUNCLOGNORMALV	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
TruncLogNormalRandom	function
(	O
dParm1	double
,	O
exp	function
(	O
sqrt	function
(	O
dParm2	double
)	O
)	O
,	O
dMin	double
,	O
dMax	double
)	O
;	O
break	O
;	O
case	O
MCV_CHI2	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
Chi2Random	function
(	O
dParm1	double
)	O
;	O
break	O
;	O
case	O
MCV_BINOMIAL	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
BinomialRandom	function
(	O
dParm1	double
,	O
(	O
long	O
)	O
dParm2	double
)	O
;	O
break	O
;	O
case	O
MCV_PIECEWISE	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
PiecewiseRandom	function
(	O
dMin	double
,	O
dParm1	double
,	O
dParm2	double
,	O
dMax	double
)	O
;	O
break	O
;	O
case	O
MCV_EXPONENTIAL	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
ExpRandom	function
(	O
dParm1	double
)	O
;	O
break	O
;	O
case	O
MCV_GGAMMA	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
GGammaRandom	function
(	O
dParm1	double
,	O
dParm2	double
)	O
;	O
break	O
;	O
case	O
MCV_INVGGAMMA	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
InvGGammaRandom	function
(	O
dParm1	double
,	O
dParm2	double
)	O
;	O
break	O
;	O
case	O
MCV_TRUNCINVGGAMMA	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
TruncInvGGammaRandom	function
(	O
dParm1	double
,	O
dParm2	double
,	O
dMin	double
,	O
dMax	double
)	O
;	O
break	O
;	O
case	O
MCV_POISSON	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
PoissonRandom	function
(	O
dParm1	double
)	O
;	O
break	O
;	O
case	O
MCV_BINOMIALBETA	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
BinomialBetaRandom	function
(	O
dParm1	double
,	O
dParm2	double
,	O
dMin	double
)	O
;	O
break	O
;	O
case	O
MCV_GENLOGNORMAL	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
GenLogNormalRandom	function
(	O
dParm1	double
,	O
dParm2	double
,	O
dMin	double
)	O
;	O
break	O
;	O
case	O
MCV_STUDENTT	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
StudentTRandom	function
(	O
dParm1	double
,	O
dParm2	double
,	O
dMin	double
)	O
;	O
break	O
;	O
case	O
MCV_CAUCHY	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
CauchyRandom	function
(	O
dParm1	double
)	O
;	O
break	O
;	O
case	O
MCV_HALFCAUCHY	int
:	O
pMCVar	pointer
->	O
dVal	double
=	O
fabs	function
(	O
CauchyRandom	function
(	O
dParm1	double
)	O
)	O
;	O
break	O
;	O
case	O
MCV_USERLL	int
:	O
ReportError	function
(	O
NULL	O
,	O
RE_BADCONTEXT	int
|	O
RE_FATAL	int
,	O
"UserSpecifiedLL"	pointer
,	O
NULL	O
)	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
CalcMCParms	function
(	O
PMONTECARLO	pointer
pMC	pointer
,	O
double	O
rgParms	array
[	O
]	O
,	O
long	O
iStart	long
)	O
{	O
long	O
i	long
;	O
if	O
(	O
!	O
rgParms	array
)	O
rgParms	array
=	O
pMC	pointer
->	O
rgdParms	pointer
;	O
for	O
(	O
i	long
=	O
iStart	long
;	O
i	long
<	O
pMC	pointer
->	O
nParms	long
;	O
i	long
++	O
)	O
{	O
CalculateOneMCParm	function
(	O
pMC	pointer
->	O
rgpMCVar	pointer
[	O
i	long
]	O
)	O
;	O
rgParms	array
[	O
i	long
]	O
=	O
pMC	pointer
->	O
rgpMCVar	pointer
[	O
i	long
]	O
->	O
dVal	double
;	O
}	O
}	O
BOOL	int
InitSetPoints	function
(	O
PMONTECARLO	pointer
pMC	pointer
)	O
{	O
register	O
char	O
c	char
;	O
PFILE	pointer
pfile	pointer
;	O
if	O
(	O
!	O
(	O
pfile	pointer
=	O
fopen	function
(	O
pMC	pointer
->	O
szSetPointsFilename	pointer
,	O
"r"	pointer
)	O
)	O
)	O
ReportError	function
(	O
NULL	O
,	O
RE_CANNOTOPEN	int
|	O
RE_FATAL	int
,	O
pMC	pointer
->	O
szSetPointsFilename	pointer
,	O
NULL	O
)	O
;	O
pMC	pointer
->	O
pfileSetPoints	pointer
=	O
pfile	pointer
;	O
do	O
{	O
c	char
=	O
getc	function
(	O
pMC	pointer
->	O
pfileSetPoints	pointer
)	O
;	O
}	O
while	O
(	O
c	char
!=	O
'\n'	O
)	O
;	O
if	O
(	O
feof	function
(	O
pMC	pointer
->	O
pfileSetPoints	pointer
)	O
)	O
ReportError	function
(	O
NULL	O
,	O
RE_INSUF_POINTS	int
|	O
RE_FATAL	int
,	O
pMC	pointer
->	O
szSetPointsFilename	pointer
,	O
NULL	O
)	O
;	O
return	O
(	O
!	O
pfile	pointer
)	O
;	O
}	O
BOOL	int
ReadSetPoints	function
(	O
PMONTECARLO	pointer
pMC	pointer
,	O
double	O
rgParms	array
[	O
]	O
)	O
{	O
BOOL	int
bReturn	int
=	O
FALSE	int
;	O
register	O
char	O
c	char
;	O
long	O
i	long
;	O
if	O
(	O
!	O
rgParms	array
)	O
rgParms	array
=	O
pMC	pointer
->	O
rgdParms	pointer
;	O
do	O
{	O
c	char
=	O
getc	function
(	O
pMC	pointer
->	O
pfileSetPoints	pointer
)	O
;	O
if	O
(	O
feof	function
(	O
pMC	pointer
->	O
pfileSetPoints	pointer
)	O
)	O
goto	O
Exit_ReadSetPoints	O
;	O
}	O
while	O
(	O
(	O
c	char
!=	O
'\t'	O
)	O
&&	O
(	O
c	char
!=	O
' '	O
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
pMC	pointer
->	O
nSetParms	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
feof	function
(	O
pMC	pointer
->	O
pfileSetPoints	pointer
)	O
||	O
(	O
fscanf	function
(	O
pMC	pointer
->	O
pfileSetPoints	pointer
,	O
"%lg"	pointer
,	O
&	O
pMC	pointer
->	O
rgpMCVar	pointer
[	O
i	long
]	O
->	O
dVal	double
)	O
==	O
EOF	O
)	O
)	O
{	O
if	O
(	O
pMC	pointer
->	O
nRuns	long
)	O
ReportError	function
(	O
NULL	O
,	O
RE_INSUF_POINTS	int
|	O
RE_FATAL	int
,	O
pMC	pointer
->	O
szSetPointsFilename	pointer
,	O
NULL	O
)	O
;	O
goto	O
Exit_ReadSetPoints	O
;	O
}	O
rgParms	array
[	O
i	long
]	O
=	O
pMC	pointer
->	O
rgpMCVar	pointer
[	O
i	long
]	O
->	O
dVal	double
;	O
}	O
bReturn	int
=	O
TRUE	int
;	O
do	O
{	O
c	char
=	O
getc	function
(	O
pMC	pointer
->	O
pfileSetPoints	pointer
)	O
;	O
}	O
while	O
(	O
(	O
c	char
!=	O
'\n'	O
)	O
&&	O
!	O
feof	function
(	O
pMC	pointer
->	O
pfileSetPoints	pointer
)	O
)	O
;	O
Exit_ReadSetPoints	O
:	O
;	O
return	O
(	O
bReturn	int
)	O
;	O
}	O
BOOL	int
GetSPMods	function
(	O
PANALYSIS	pointer
panal	pointer
,	O
double	O
rgParms	array
[	O
]	O
)	O
{	O
BOOL	int
bOK	int
;	O
bOK	int
=	O
ReadSetPoints	function
(	O
&	O
panal	pointer
->	O
mc	struct
,	O
rgParms	array
)	O
;	O
CalcMCParms	function
(	O
&	O
panal	pointer
->	O
mc	struct
,	O
rgParms	array
,	O
panal	pointer
->	O
mc	struct
.	O
nSetParms	long
)	O
;	O
return	O
bOK	int
;	O
}	O
void	O
SetParents	function
(	O
PMONTECARLO	pointer
pMC	pointer
,	O
long	O
iStart	long
)	O
{	O
long	O
i	long
,	O
j	long
,	O
k	long
;	O
PMCVAR	pointer
pMCVar1	pointer
,	O
pMCVar2	pointer
;	O
BOOL	int
bFound	int
;	O
for	O
(	O
i	long
=	O
iStart	long
;	O
i	long
<	O
pMC	pointer
->	O
nParms	long
;	O
i	long
++	O
)	O
{	O
pMCVar1	pointer
=	O
pMC	pointer
->	O
rgpMCVar	pointer
[	O
i	long
]	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
4	int
;	O
j	long
++	O
)	O
{	O
if	O
(	O
pMCVar1	pointer
->	O
iParmType	array
[	O
j	long
]	O
==	O
MCVP_PARM	int
)	O
{	O
bFound	int
=	O
FALSE	int
;	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
i	long
;	O
k	long
++	O
)	O
{	O
pMCVar2	pointer
=	O
pMC	pointer
->	O
rgpMCVar	pointer
[	O
k	long
]	O
;	O
if	O
(	O
pMCVar1	pointer
->	O
hParm	array
[	O
j	long
]	O
==	O
pMCVar2	pointer
->	O
hvar	long
)	O
{	O
pMCVar1	pointer
->	O
pdParm	array
[	O
j	long
]	O
=	O
&	O
(	O
pMCVar2	pointer
->	O
dVal	double
)	O
;	O
bFound	int
=	O
TRUE	int
;	O
}	O
}	O
if	O
(	O
!	O
bFound	int
)	O
{	O
printf	function
(	O
"\n"	pointer
"Error: parents must be declared before childrens when\n"	pointer
"       creating sampling dependencies - Exiting.\n\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
}	O
}	O
}	O
}	O
