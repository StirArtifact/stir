void	O
_asn1_hierarchical_name	function
(	O
asn1_node_const	pointer
node	pointer
,	O
char	O
*	O
name	pointer
,	O
int	O
name_size	int
)	O
{	O
asn1_node_const	pointer
p	pointer
;	O
char	O
tmp_name	array
[	O
64	int
]	O
;	O
p	pointer
=	O
node	pointer
;	O
name	pointer
[	O
0	int
]	O
=	O
0	int
;	O
while	O
(	O
p	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
p	pointer
->	O
name	pointer
[	O
0	int
]	O
!=	O
0	int
)	O
{	O
_asn1_str_cpy	function
(	O
tmp_name	array
,	O
sizeof	O
(	O
tmp_name	array
)	O
,	O
name	pointer
)	O
,	O
_asn1_str_cpy	function
(	O
name	pointer
,	O
name_size	int
,	O
p	pointer
->	O
name	pointer
)	O
;	O
_asn1_str_cat	function
(	O
name	pointer
,	O
name_size	int
,	O
"."	pointer
)	O
;	O
_asn1_str_cat	function
(	O
name	pointer
,	O
name_size	int
,	O
tmp_name	array
)	O
;	O
}	O
p	pointer
=	O
_asn1_find_up	function
(	O
p	pointer
)	O
;	O
}	O
if	O
(	O
name	pointer
[	O
0	int
]	O
==	O
0	int
)	O
_asn1_str_cpy	function
(	O
name	pointer
,	O
name_size	int
,	O
"ROOT"	pointer
)	O
;	O
}	O
int	O
_asn1_convert_integer	function
(	O
const	O
unsigned	O
char	O
*	O
value	pointer
,	O
unsigned	O
char	O
*	O
value_out	pointer
,	O
int	O
value_out_size	int
,	O
int	O
*	O
len	int
)	O
{	O
char	O
negative	char
;	O
unsigned	O
char	O
val	array
[	O
SIZEOF_UNSIGNED_LONG_INT	int
]	O
;	O
long	O
valtmp	long
;	O
int	O
k	int
,	O
k2	int
;	O
valtmp	long
=	O
_asn1_strtol	O
(	O
value	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
SIZEOF_UNSIGNED_LONG_INT	int
;	O
k	int
++	O
)	O
{	O
val	array
[	O
SIZEOF_UNSIGNED_LONG_INT	int
-	O
k	int
-	O
1	int
]	O
=	O
(	O
valtmp	long
>>	O
(	O
8	int
*	O
k	int
)	O
)	O
&	O
0xFF	int
;	O
}	O
if	O
(	O
val	array
[	O
0	int
]	O
&	O
0x80	int
)	O
negative	char
=	O
1	int
;	O
else	O
negative	char
=	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
SIZEOF_UNSIGNED_LONG_INT	int
-	O
1	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
negative	char
&&	O
(	O
val	array
[	O
k	int
]	O
!=	O
0xFF	int
)	O
)	O
break	O
;	O
else	O
if	O
(	O
!	O
negative	char
&&	O
val	array
[	O
k	int
]	O
)	O
break	O
;	O
}	O
if	O
(	O
(	O
negative	char
&&	O
!	O
(	O
val	array
[	O
k	int
]	O
&	O
0x80	int
)	O
)	O
||	O
(	O
!	O
negative	char
&&	O
(	O
val	array
[	O
k	int
]	O
&	O
0x80	int
)	O
)	O
)	O
k	int
--	O
;	O
*	O
len	int
=	O
SIZEOF_UNSIGNED_LONG_INT	int
-	O
k	int
;	O
if	O
(	O
SIZEOF_UNSIGNED_LONG_INT	int
-	O
k	int
>	O
value_out_size	int
)	O
return	O
ASN1_MEM_ERROR	int
;	O
if	O
(	O
value_out	pointer
!=	O
NULL	O
)	O
{	O
for	O
(	O
k2	int
=	O
k	int
;	O
k2	int
<	O
SIZEOF_UNSIGNED_LONG_INT	int
;	O
k2	int
++	O
)	O
value_out	pointer
[	O
k2	int
-	O
k	int
]	O
=	O
val	array
[	O
k2	int
]	O
;	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
_asn1_append_sequence_set	function
(	O
asn1_node	pointer
node	pointer
,	O
struct	O
node_tail_cache_st	struct
*	O
pcache	pointer
)	O
{	O
asn1_node	pointer
p	pointer
,	O
p2	pointer
;	O
char	O
temp	array
[	O
LTOSTR_MAX_SIZE	int
]	O
;	O
long	O
n	long
;	O
if	O
(	O
!	O
node	pointer
||	O
!	O
(	O
node	pointer
->	O
down	pointer
)	O
)	O
return	O
ASN1_GENERIC_ERROR	int
;	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_TAG	int
)	O
||	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_SIZE	int
)	O
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
p2	pointer
=	O
_asn1_copy_structure3	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p2	pointer
==	O
NULL	O
)	O
return	O
ASN1_GENERIC_ERROR	int
;	O
if	O
(	O
pcache	pointer
==	O
NULL	O
||	O
pcache	pointer
->	O
tail	pointer
==	O
NULL	O
||	O
pcache	pointer
->	O
head	pointer
!=	O
node	pointer
)	O
{	O
while	O
(	O
p	pointer
->	O
right	pointer
)	O
{	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
}	O
}	O
else	O
{	O
p	pointer
=	O
pcache	pointer
->	O
tail	pointer
;	O
}	O
_asn1_set_right	function
(	O
p	pointer
,	O
p2	pointer
)	O
;	O
if	O
(	O
pcache	pointer
)	O
{	O
pcache	pointer
->	O
head	pointer
=	O
node	pointer
;	O
pcache	pointer
->	O
tail	pointer
=	O
p2	pointer
;	O
}	O
if	O
(	O
p	pointer
->	O
name	pointer
[	O
0	int
]	O
==	O
0	int
)	O
_asn1_str_cpy	function
(	O
temp	array
,	O
sizeof	O
(	O
temp	array
)	O
,	O
"?1"	pointer
)	O
;	O
else	O
{	O
n	long
=	O
strtol	function
(	O
p	pointer
->	O
name	pointer
+	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
n	long
++	O
;	O
temp	array
[	O
0	int
]	O
=	O
'?'	O
;	O
_asn1_ltostr	function
(	O
n	long
,	O
temp	array
+	O
1	int
)	O
;	O
}	O
_asn1_set_name	function
(	O
p2	pointer
,	O
temp	array
)	O
;	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
asn1_write_value	function
(	O
asn1_node	pointer
node_root	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
void	O
*	O
ivalue	pointer
,	O
int	O
len	int
)	O
{	O
asn1_node	pointer
node	pointer
,	O
p	pointer
,	O
p2	pointer
;	O
unsigned	O
char	O
*	O
temp	array
,	O
*	O
value_temp	pointer
=	O
NULL	O
,	O
*	O
default_temp	pointer
=	O
NULL	O
;	O
int	O
len2	int
,	O
k	int
,	O
k2	int
,	O
negative	char
;	O
size_t	long
i	long
;	O
const	O
unsigned	O
char	O
*	O
value	pointer
=	O
ivalue	pointer
;	O
unsigned	O
int	O
type	int
;	O
node	pointer
=	O
asn1_find_node	function
(	O
node_root	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
if	O
(	O
(	O
node	pointer
->	O
type	int
&	O
CONST_OPTION	O
)	O
&&	O
(	O
value	pointer
==	O
NULL	O
)	O
&&	O
(	O
len	int
==	O
0	int
)	O
)	O
{	O
asn1_delete_structure	function
(	O
&	O
node	pointer
)	O
;	O
return	O
ASN1_SUCCESS	int
;	O
}	O
type	int
=	O
type_field	function
(	O
node	pointer
->	O
type	int
)	O
;	O
if	O
(	O
(	O
type	int
==	O
ASN1_ETYPE_SEQUENCE_OF	int
||	O
type	int
==	O
ASN1_ETYPE_SET_OF	int
)	O
&&	O
(	O
value	pointer
==	O
NULL	O
)	O
&&	O
(	O
len	int
==	O
0	int
)	O
)	O
{	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_TAG	int
)	O
||	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_SIZE	int
)	O
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
while	O
(	O
p	pointer
->	O
right	pointer
)	O
asn1_delete_structure	function
(	O
&	O
p	pointer
->	O
right	pointer
)	O
;	O
return	O
ASN1_SUCCESS	int
;	O
}	O
if	O
(	O
value	pointer
==	O
NULL	O
)	O
{	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
}	O
switch	O
(	O
type	int
)	O
{	O
case	O
ASN1_ETYPE_BOOLEAN	int
:	O
if	O
(	O
!	O
_asn1_strcmp	O
(	O
value	pointer
,	O
"TRUE"	pointer
)	O
)	O
{	O
if	O
(	O
node	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
{	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_DEFAULT	int
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_TRUE	O
)	O
_asn1_set_value	function
(	O
node	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
else	O
_asn1_set_value	function
(	O
node	pointer
,	O
"T"	pointer
,	O
1	int
)	O
;	O
}	O
else	O
_asn1_set_value	function
(	O
node	pointer
,	O
"T"	pointer
,	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
_asn1_strcmp	O
(	O
value	pointer
,	O
"FALSE"	pointer
)	O
)	O
{	O
if	O
(	O
node	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
{	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_DEFAULT	int
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_FALSE	O
)	O
_asn1_set_value	function
(	O
node	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
else	O
_asn1_set_value	function
(	O
node	pointer
,	O
"F"	pointer
,	O
1	int
)	O
;	O
}	O
else	O
_asn1_set_value	function
(	O
node	pointer
,	O
"F"	pointer
,	O
1	int
)	O
;	O
}	O
else	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
break	O
;	O
case	O
ASN1_ETYPE_INTEGER	int
:	O
case	O
ASN1_ETYPE_ENUMERATED	int
:	O
if	O
(	O
len	int
==	O
0	int
)	O
{	O
if	O
(	O
(	O
c_isdigit	function
(	O
value	pointer
[	O
0	int
]	O
)	O
)	O
||	O
(	O
value	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
)	O
{	O
value_temp	pointer
=	O
malloc	function
(	O
SIZEOF_UNSIGNED_LONG_INT	int
)	O
;	O
if	O
(	O
value_temp	pointer
==	O
NULL	O
)	O
return	O
ASN1_MEM_ALLOC_ERROR	int
;	O
_asn1_convert_integer	function
(	O
value	pointer
,	O
value_temp	pointer
,	O
SIZEOF_UNSIGNED_LONG_INT	int
,	O
&	O
len	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
node	pointer
->	O
type	int
&	O
CONST_LIST	O
)	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_CONSTANT	int
)	O
{	O
if	O
(	O
!	O
_asn1_strcmp	O
(	O
p	pointer
->	O
name	pointer
,	O
value	pointer
)	O
)	O
{	O
value_temp	pointer
=	O
malloc	function
(	O
SIZEOF_UNSIGNED_LONG_INT	int
)	O
;	O
if	O
(	O
value_temp	pointer
==	O
NULL	O
)	O
return	O
ASN1_MEM_ALLOC_ERROR	int
;	O
_asn1_convert_integer	function
(	O
p	pointer
->	O
value	pointer
,	O
value_temp	pointer
,	O
SIZEOF_UNSIGNED_LONG_INT	int
,	O
&	O
len	int
)	O
;	O
break	O
;	O
}	O
}	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
}	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
}	O
}	O
else	O
{	O
value_temp	pointer
=	O
malloc	function
(	O
len	int
)	O
;	O
if	O
(	O
value_temp	pointer
==	O
NULL	O
)	O
return	O
ASN1_MEM_ALLOC_ERROR	int
;	O
memcpy	function
(	O
value_temp	pointer
,	O
value	pointer
,	O
len	int
)	O
;	O
}	O
if	O
(	O
value_temp	pointer
[	O
0	int
]	O
&	O
0x80	int
)	O
negative	char
=	O
1	int
;	O
else	O
negative	char
=	O
0	int
;	O
if	O
(	O
negative	char
&&	O
(	O
type_field	function
(	O
node	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_ENUMERATED	int
)	O
)	O
{	O
free	function
(	O
value_temp	pointer
)	O
;	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
len	int
-	O
1	int
;	O
k	int
++	O
)	O
if	O
(	O
negative	char
&&	O
(	O
value_temp	pointer
[	O
k	int
]	O
!=	O
0xFF	int
)	O
)	O
break	O
;	O
else	O
if	O
(	O
!	O
negative	char
&&	O
value_temp	pointer
[	O
k	int
]	O
)	O
break	O
;	O
if	O
(	O
(	O
negative	char
&&	O
!	O
(	O
value_temp	pointer
[	O
k	int
]	O
&	O
0x80	int
)	O
)	O
||	O
(	O
!	O
negative	char
&&	O
(	O
value_temp	pointer
[	O
k	int
]	O
&	O
0x80	int
)	O
)	O
)	O
k	int
--	O
;	O
_asn1_set_value_lv	function
(	O
node	pointer
,	O
value_temp	pointer
+	O
k	int
,	O
len	int
-	O
k	int
)	O
;	O
if	O
(	O
node	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
{	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_DEFAULT	int
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
if	O
(	O
(	O
c_isdigit	function
(	O
p	pointer
->	O
value	pointer
[	O
0	int
]	O
)	O
)	O
||	O
(	O
p	pointer
->	O
value	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
)	O
{	O
default_temp	pointer
=	O
malloc	function
(	O
SIZEOF_UNSIGNED_LONG_INT	int
)	O
;	O
if	O
(	O
default_temp	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
value_temp	pointer
)	O
;	O
return	O
ASN1_MEM_ALLOC_ERROR	int
;	O
}	O
_asn1_convert_integer	function
(	O
p	pointer
->	O
value	pointer
,	O
default_temp	pointer
,	O
SIZEOF_UNSIGNED_LONG_INT	int
,	O
&	O
len2	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
node	pointer
->	O
type	int
&	O
CONST_LIST	O
)	O
)	O
{	O
free	function
(	O
value_temp	pointer
)	O
;	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
}	O
p2	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
p2	pointer
)	O
{	O
if	O
(	O
type_field	function
(	O
p2	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_CONSTANT	int
)	O
{	O
if	O
(	O
!	O
_asn1_strcmp	O
(	O
p2	pointer
->	O
name	pointer
,	O
p	pointer
->	O
value	pointer
)	O
)	O
{	O
default_temp	pointer
=	O
malloc	function
(	O
SIZEOF_UNSIGNED_LONG_INT	int
)	O
;	O
if	O
(	O
default_temp	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
value_temp	pointer
)	O
;	O
return	O
ASN1_MEM_ALLOC_ERROR	int
;	O
}	O
_asn1_convert_integer	function
(	O
p2	pointer
->	O
value	pointer
,	O
default_temp	pointer
,	O
SIZEOF_UNSIGNED_LONG_INT	int
,	O
&	O
len2	int
)	O
;	O
break	O
;	O
}	O
}	O
p2	pointer
=	O
p2	pointer
->	O
right	pointer
;	O
}	O
if	O
(	O
p2	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
value_temp	pointer
)	O
;	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
}	O
}	O
if	O
(	O
(	O
len	int
-	O
k	int
)	O
==	O
len2	int
)	O
{	O
for	O
(	O
k2	int
=	O
0	int
;	O
k2	int
<	O
len2	int
;	O
k2	int
++	O
)	O
if	O
(	O
value_temp	pointer
[	O
k	int
+	O
k2	int
]	O
!=	O
default_temp	pointer
[	O
k2	int
]	O
)	O
{	O
break	O
;	O
}	O
if	O
(	O
k2	int
==	O
len2	int
)	O
_asn1_set_value	function
(	O
node	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
free	function
(	O
default_temp	pointer
)	O
;	O
}	O
free	function
(	O
value_temp	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_OBJECT_ID	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
_asn1_strlen	O
(	O
value	pointer
)	O
;	O
i	long
++	O
)	O
if	O
(	O
(	O
!	O
c_isdigit	function
(	O
value	pointer
[	O
i	long
]	O
)	O
)	O
&&	O
(	O
value	pointer
[	O
i	long
]	O
!=	O
'.'	O
)	O
&&	O
(	O
value	pointer
[	O
i	long
]	O
!=	O
'+'	O
)	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
if	O
(	O
node	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
{	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_DEFAULT	int
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
if	O
(	O
!	O
_asn1_strcmp	O
(	O
value	pointer
,	O
p	pointer
->	O
value	pointer
)	O
)	O
{	O
_asn1_set_value	function
(	O
node	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
}	O
}	O
_asn1_set_value	function
(	O
node	pointer
,	O
value	pointer
,	O
_asn1_strlen	O
(	O
value	pointer
)	O
+	O
1	int
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_UTC_TIME	int
:	O
{	O
len	int
=	O
_asn1_strlen	O
(	O
value	pointer
)	O
;	O
if	O
(	O
len	int
<	O
11	int
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
10	int
;	O
k	int
++	O
)	O
if	O
(	O
!	O
c_isdigit	function
(	O
value	pointer
[	O
k	int
]	O
)	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
switch	O
(	O
len	int
)	O
{	O
case	O
11	int
:	O
if	O
(	O
value	pointer
[	O
10	int
]	O
!=	O
'Z'	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
break	O
;	O
case	O
13	int
:	O
if	O
(	O
(	O
!	O
c_isdigit	function
(	O
value	pointer
[	O
10	int
]	O
)	O
)	O
||	O
(	O
!	O
c_isdigit	function
(	O
value	pointer
[	O
11	int
]	O
)	O
)	O
||	O
(	O
value	pointer
[	O
12	int
]	O
!=	O
'Z'	O
)	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
break	O
;	O
case	O
15	int
:	O
if	O
(	O
(	O
value	pointer
[	O
10	int
]	O
!=	O
'+'	O
)	O
&&	O
(	O
value	pointer
[	O
10	int
]	O
!=	O
'-'	O
)	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
for	O
(	O
k	int
=	O
11	int
;	O
k	int
<	O
15	int
;	O
k	int
++	O
)	O
if	O
(	O
!	O
c_isdigit	function
(	O
value	pointer
[	O
k	int
]	O
)	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
break	O
;	O
case	O
17	int
:	O
if	O
(	O
(	O
!	O
c_isdigit	function
(	O
value	pointer
[	O
10	int
]	O
)	O
)	O
||	O
(	O
!	O
c_isdigit	function
(	O
value	pointer
[	O
11	int
]	O
)	O
)	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
if	O
(	O
(	O
value	pointer
[	O
12	int
]	O
!=	O
'+'	O
)	O
&&	O
(	O
value	pointer
[	O
12	int
]	O
!=	O
'-'	O
)	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
for	O
(	O
k	int
=	O
13	int
;	O
k	int
<	O
17	int
;	O
k	int
++	O
)	O
if	O
(	O
!	O
c_isdigit	function
(	O
value	pointer
[	O
k	int
]	O
)	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
break	O
;	O
default	O
:	O
return	O
ASN1_VALUE_NOT_FOUND	int
;	O
}	O
_asn1_set_value	function
(	O
node	pointer
,	O
value	pointer
,	O
len	int
)	O
;	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_GENERALIZED_TIME	int
:	O
len	int
=	O
_asn1_strlen	O
(	O
value	pointer
)	O
;	O
_asn1_set_value	function
(	O
node	pointer
,	O
value	pointer
,	O
len	int
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_OCTET_STRING	int
:	O
case	O
ASN1_ETYPE_GENERALSTRING	int
:	O
case	O
ASN1_ETYPE_NUMERIC_STRING	int
:	O
case	O
ASN1_ETYPE_IA5_STRING	int
:	O
case	O
ASN1_ETYPE_TELETEX_STRING	int
:	O
case	O
ASN1_ETYPE_PRINTABLE_STRING	int
:	O
case	O
ASN1_ETYPE_UNIVERSAL_STRING	int
:	O
case	O
ASN1_ETYPE_BMP_STRING	int
:	O
case	O
ASN1_ETYPE_UTF8_STRING	int
:	O
case	O
ASN1_ETYPE_VISIBLE_STRING	int
:	O
if	O
(	O
len	int
==	O
0	int
)	O
len	int
=	O
_asn1_strlen	O
(	O
value	pointer
)	O
;	O
_asn1_set_value_lv	function
(	O
node	pointer
,	O
value	pointer
,	O
len	int
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_BIT_STRING	int
:	O
if	O
(	O
len	int
==	O
0	int
)	O
len	int
=	O
_asn1_strlen	O
(	O
value	pointer
)	O
;	O
asn1_length_der	function
(	O
(	O
len	int
>>	O
3	int
)	O
+	O
2	int
,	O
NULL	O
,	O
&	O
len2	int
)	O
;	O
temp	array
=	O
malloc	function
(	O
(	O
len	int
>>	O
3	int
)	O
+	O
2	int
+	O
len2	int
)	O
;	O
if	O
(	O
temp	array
==	O
NULL	O
)	O
return	O
ASN1_MEM_ALLOC_ERROR	int
;	O
asn1_bit_der	function
(	O
value	pointer
,	O
len	int
,	O
temp	array
,	O
&	O
len2	int
)	O
;	O
_asn1_set_value_m	function
(	O
node	pointer
,	O
temp	array
,	O
len2	int
)	O
;	O
temp	array
=	O
NULL	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_CHOICE	int
:	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
!	O
_asn1_strcmp	O
(	O
p	pointer
->	O
name	pointer
,	O
value	pointer
)	O
)	O
{	O
p2	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
p2	pointer
)	O
{	O
if	O
(	O
p2	pointer
!=	O
p	pointer
)	O
{	O
asn1_delete_structure	function
(	O
&	O
p2	pointer
)	O
;	O
p2	pointer
=	O
node	pointer
->	O
down	pointer
;	O
}	O
else	O
p2	pointer
=	O
p2	pointer
->	O
right	pointer
;	O
}	O
break	O
;	O
}	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
}	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
break	O
;	O
case	O
ASN1_ETYPE_ANY	int
:	O
_asn1_set_value_lv	function
(	O
node	pointer
,	O
value	pointer
,	O
len	int
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_SEQUENCE_OF	int
:	O
case	O
ASN1_ETYPE_SET_OF	int
:	O
if	O
(	O
_asn1_strcmp	O
(	O
value	pointer
,	O
"NEW"	pointer
)	O
)	O
return	O
ASN1_VALUE_NOT_VALID	int
;	O
_asn1_append_sequence_set	function
(	O
node	pointer
,	O
NULL	O
)	O
;	O
break	O
;	O
default	O
:	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
break	O
;	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
asn1_read_value	function
(	O
asn1_node_const	pointer
root	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
ivalue	pointer
,	O
int	O
*	O
len	int
)	O
{	O
return	O
asn1_read_value_type	function
(	O
root	pointer
,	O
name	pointer
,	O
ivalue	pointer
,	O
len	int
,	O
NULL	O
)	O
;	O
}	O
int	O
asn1_read_value_type	function
(	O
asn1_node_const	pointer
root	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
void	O
*	O
ivalue	pointer
,	O
int	O
*	O
len	int
,	O
unsigned	O
int	O
*	O
etype	pointer
)	O
{	O
asn1_node_const	pointer
node	pointer
,	O
p	pointer
,	O
p2	pointer
;	O
int	O
len2	int
,	O
len3	int
,	O
result	int
;	O
int	O
value_size	int
=	O
*	O
len	int
;	O
unsigned	O
char	O
*	O
value	pointer
=	O
ivalue	pointer
;	O
unsigned	O
type	int
;	O
node	pointer
=	O
asn1_find_node	function
(	O
root	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
type	int
=	O
type_field	function
(	O
node	pointer
->	O
type	int
)	O
;	O
if	O
(	O
(	O
type	int
!=	O
ASN1_ETYPE_NULL	int
)	O
&&	O
(	O
type	int
!=	O
ASN1_ETYPE_CHOICE	int
)	O
&&	O
!	O
(	O
node	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
&&	O
!	O
(	O
node	pointer
->	O
type	int
&	O
CONST_ASSIGN	O
)	O
&&	O
(	O
node	pointer
->	O
value	pointer
==	O
NULL	O
)	O
)	O
return	O
ASN1_VALUE_NOT_FOUND	int
;	O
if	O
(	O
etype	pointer
)	O
*	O
etype	pointer
=	O
type	int
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
ASN1_ETYPE_NULL	int
:	O
PUT_STR_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
"NULL"	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_BOOLEAN	int
:	O
if	O
(	O
(	O
node	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
&&	O
(	O
node	pointer
->	O
value	pointer
==	O
NULL	O
)	O
)	O
{	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_DEFAULT	int
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_TRUE	O
)	O
{	O
PUT_STR_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
"TRUE"	pointer
)	O
;	O
}	O
else	O
{	O
PUT_STR_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
"FALSE"	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
node	pointer
->	O
value	pointer
[	O
0	int
]	O
==	O
'T'	O
)	O
{	O
PUT_STR_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
"TRUE"	pointer
)	O
;	O
}	O
else	O
{	O
PUT_STR_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
"FALSE"	pointer
)	O
;	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_INTEGER	int
:	O
case	O
ASN1_ETYPE_ENUMERATED	int
:	O
if	O
(	O
(	O
node	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
&&	O
(	O
node	pointer
->	O
value	pointer
==	O
NULL	O
)	O
)	O
{	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_DEFAULT	int
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
if	O
(	O
(	O
c_isdigit	function
(	O
p	pointer
->	O
value	pointer
[	O
0	int
]	O
)	O
)	O
||	O
(	O
p	pointer
->	O
value	pointer
[	O
0	int
]	O
==	O
'-'	O
)	O
||	O
(	O
p	pointer
->	O
value	pointer
[	O
0	int
]	O
==	O
'+'	O
)	O
)	O
{	O
result	int
=	O
_asn1_convert_integer	function
(	O
p	pointer
->	O
value	pointer
,	O
value	pointer
,	O
value_size	int
,	O
len	int
)	O
;	O
if	O
(	O
result	int
!=	O
ASN1_SUCCESS	int
)	O
return	O
result	int
;	O
}	O
else	O
{	O
p2	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
p2	pointer
)	O
{	O
if	O
(	O
type_field	function
(	O
p2	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_CONSTANT	int
)	O
{	O
if	O
(	O
!	O
_asn1_strcmp	O
(	O
p2	pointer
->	O
name	pointer
,	O
p	pointer
->	O
value	pointer
)	O
)	O
{	O
result	int
=	O
_asn1_convert_integer	function
(	O
p2	pointer
->	O
value	pointer
,	O
value	pointer
,	O
value_size	int
,	O
len	int
)	O
;	O
if	O
(	O
result	int
!=	O
ASN1_SUCCESS	int
)	O
return	O
result	int
;	O
break	O
;	O
}	O
}	O
p2	pointer
=	O
p2	pointer
->	O
right	pointer
;	O
}	O
}	O
}	O
else	O
{	O
len2	int
=	O
-	O
1	int
;	O
result	int
=	O
asn1_get_octet_der	function
(	O
node	pointer
->	O
value	pointer
,	O
node	pointer
->	O
value_len	int
,	O
&	O
len2	int
,	O
value	pointer
,	O
value_size	int
,	O
len	int
)	O
;	O
if	O
(	O
result	int
!=	O
ASN1_SUCCESS	int
)	O
return	O
result	int
;	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_OBJECT_ID	int
:	O
if	O
(	O
node	pointer
->	O
type	int
&	O
CONST_ASSIGN	O
)	O
{	O
*	O
len	int
=	O
0	int
;	O
if	O
(	O
value	pointer
)	O
value	pointer
[	O
0	int
]	O
=	O
0	int
;	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_CONSTANT	int
)	O
{	O
ADD_STR_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
p	pointer
->	O
value	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
right	pointer
)	O
{	O
ADD_STR_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
"."	pointer
)	O
;	O
}	O
}	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
}	O
(	O
*	O
len	int
)	O
++	O
;	O
}	O
else	O
if	O
(	O
(	O
node	pointer
->	O
type	int
&	O
CONST_DEFAULT	O
)	O
&&	O
(	O
node	pointer
->	O
value	pointer
==	O
NULL	O
)	O
)	O
{	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
while	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
!=	O
ASN1_ETYPE_DEFAULT	int
)	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
PUT_STR_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
p	pointer
->	O
value	pointer
)	O
;	O
}	O
else	O
{	O
PUT_STR_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
node	pointer
->	O
value	pointer
)	O
;	O
}	O
break	O
;	O
case	O
ASN1_ETYPE_GENERALIZED_TIME	int
:	O
case	O
ASN1_ETYPE_UTC_TIME	int
:	O
PUT_AS_STR_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
node	pointer
->	O
value	pointer
,	O
node	pointer
->	O
value_len	int
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_OCTET_STRING	int
:	O
case	O
ASN1_ETYPE_GENERALSTRING	int
:	O
case	O
ASN1_ETYPE_NUMERIC_STRING	int
:	O
case	O
ASN1_ETYPE_IA5_STRING	int
:	O
case	O
ASN1_ETYPE_TELETEX_STRING	int
:	O
case	O
ASN1_ETYPE_PRINTABLE_STRING	int
:	O
case	O
ASN1_ETYPE_UNIVERSAL_STRING	int
:	O
case	O
ASN1_ETYPE_BMP_STRING	int
:	O
case	O
ASN1_ETYPE_UTF8_STRING	int
:	O
case	O
ASN1_ETYPE_VISIBLE_STRING	int
:	O
len2	int
=	O
-	O
1	int
;	O
result	int
=	O
asn1_get_octet_der	function
(	O
node	pointer
->	O
value	pointer
,	O
node	pointer
->	O
value_len	int
,	O
&	O
len2	int
,	O
value	pointer
,	O
value_size	int
,	O
len	int
)	O
;	O
if	O
(	O
result	int
!=	O
ASN1_SUCCESS	int
)	O
return	O
result	int
;	O
break	O
;	O
case	O
ASN1_ETYPE_BIT_STRING	int
:	O
len2	int
=	O
-	O
1	int
;	O
result	int
=	O
asn1_get_bit_der	function
(	O
node	pointer
->	O
value	pointer
,	O
node	pointer
->	O
value_len	int
,	O
&	O
len2	int
,	O
value	pointer
,	O
value_size	int
,	O
len	int
)	O
;	O
if	O
(	O
result	int
!=	O
ASN1_SUCCESS	int
)	O
return	O
result	int
;	O
break	O
;	O
case	O
ASN1_ETYPE_CHOICE	int
:	O
PUT_STR_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
node	pointer
->	O
down	pointer
->	O
name	pointer
)	O
;	O
break	O
;	O
case	O
ASN1_ETYPE_ANY	int
:	O
len3	int
=	O
-	O
1	int
;	O
len2	int
=	O
asn1_get_length_der	function
(	O
node	pointer
->	O
value	pointer
,	O
node	pointer
->	O
value_len	int
,	O
&	O
len3	int
)	O
;	O
if	O
(	O
len2	int
<	O
0	int
)	O
return	O
ASN1_DER_ERROR	int
;	O
PUT_VALUE	O
(	O
value	pointer
,	O
value_size	int
,	O
node	pointer
->	O
value	pointer
+	O
len3	int
,	O
len2	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
break	O
;	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
asn1_read_tag	function
(	O
asn1_node_const	pointer
root	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
*	O
tagValue	pointer
,	O
int	O
*	O
classValue	pointer
)	O
{	O
asn1_node	pointer
node	pointer
,	O
p	pointer
,	O
pTag	pointer
;	O
node	pointer
=	O
asn1_find_node	function
(	O
root	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
node	pointer
==	O
NULL	O
)	O
return	O
ASN1_ELEMENT_NOT_FOUND	int
;	O
p	pointer
=	O
node	pointer
->	O
down	pointer
;	O
pTag	pointer
=	O
NULL	O
;	O
if	O
(	O
node	pointer
->	O
type	int
&	O
CONST_TAG	O
)	O
{	O
while	O
(	O
p	pointer
)	O
{	O
if	O
(	O
type_field	function
(	O
p	pointer
->	O
type	int
)	O
==	O
ASN1_ETYPE_TAG	int
)	O
{	O
if	O
(	O
(	O
p	pointer
->	O
type	int
&	O
CONST_IMPLICIT	O
)	O
&&	O
(	O
pTag	pointer
==	O
NULL	O
)	O
)	O
pTag	pointer
=	O
p	pointer
;	O
else	O
if	O
(	O
p	pointer
->	O
type	int
&	O
CONST_EXPLICIT	O
)	O
pTag	pointer
=	O
NULL	O
;	O
}	O
p	pointer
=	O
p	pointer
->	O
right	pointer
;	O
}	O
}	O
if	O
(	O
pTag	pointer
)	O
{	O
*	O
tagValue	pointer
=	O
_asn1_strtoul	O
(	O
pTag	pointer
->	O
value	pointer
,	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
pTag	pointer
->	O
type	int
&	O
CONST_APPLICATION	O
)	O
*	O
classValue	pointer
=	O
ASN1_CLASS_APPLICATION	int
;	O
else	O
if	O
(	O
pTag	pointer
->	O
type	int
&	O
CONST_UNIVERSAL	O
)	O
*	O
classValue	pointer
=	O
ASN1_CLASS_UNIVERSAL	int
;	O
else	O
if	O
(	O
pTag	pointer
->	O
type	int
&	O
CONST_PRIVATE	O
)	O
*	O
classValue	pointer
=	O
ASN1_CLASS_PRIVATE	int
;	O
else	O
*	O
classValue	pointer
=	O
ASN1_CLASS_CONTEXT_SPECIFIC	int
;	O
}	O
else	O
{	O
unsigned	O
type	int
=	O
type_field	function
(	O
node	pointer
->	O
type	int
)	O
;	O
*	O
classValue	pointer
=	O
ASN1_CLASS_UNIVERSAL	int
;	O
switch	O
(	O
type	int
)	O
{	O
CASE_HANDLED_ETYPES	O
:	O
*	O
tagValue	pointer
=	O
_asn1_tags	array
[	O
type	int
]	O
.	O
tag	pointer
;	O
break	O
;	O
case	O
ASN1_ETYPE_TAG	int
:	O
case	O
ASN1_ETYPE_CHOICE	int
:	O
case	O
ASN1_ETYPE_ANY	int
:	O
*	O
tagValue	pointer
=	O
-	O
1	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
return	O
ASN1_SUCCESS	int
;	O
}	O
int	O
asn1_read_node_value	function
(	O
asn1_node_const	pointer
node	pointer
,	O
asn1_data_node_st	struct
*	O
data	pointer
)	O
{	O
data	pointer
->	O
name	pointer
=	O
node	pointer
->	O
name	pointer
;	O
data	pointer
->	O
value	pointer
=	O
node	pointer
->	O
value	pointer
;	O
data	pointer
->	O
value_len	int
=	O
node	pointer
->	O
value_len	int
;	O
data	pointer
->	O
type	int
=	O
type_field	function
(	O
node	pointer
->	O
type	int
)	O
;	O
return	O
ASN1_SUCCESS	int
;	O
}	O
