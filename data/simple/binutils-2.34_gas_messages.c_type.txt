static	O
void	O
identify	function
(	O
const	O
char	O
*	O
)	O
;	O
static	O
void	O
as_show_where	function
(	O
void	O
)	O
;	O
static	O
void	O
as_warn_internal	function
(	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
char	O
*	O
)	O
;	O
static	O
void	O
as_bad_internal	function
(	O
const	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
char	O
*	O
)	O
;	O
static	O
void	O
signal_crash	function
(	O
int	O
)	O
ATTRIBUTE_NORETURN	O
;	O
static	O
void	O
identify	function
(	O
const	O
char	O
*	O
file	pointer
)	O
{	O
static	O
int	O
identified	int
;	O
if	O
(	O
identified	int
)	O
return	O
;	O
identified	int
++	O
;	O
if	O
(	O
!	O
file	pointer
)	O
{	O
unsigned	O
int	O
x	int
;	O
file	pointer
=	O
as_where	function
(	O
&	O
x	int
)	O
;	O
}	O
if	O
(	O
file	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
file	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Assembler messages:\n"	pointer
)	O
)	O
;	O
}	O
static	O
int	O
warning_count	int
;	O
int	O
had_warnings	function
(	O
void	O
)	O
{	O
return	O
warning_count	int
;	O
}	O
static	O
int	O
error_count	int
;	O
int	O
had_errors	function
(	O
void	O
)	O
{	O
return	O
error_count	int
;	O
}	O
static	O
void	O
as_show_where	function
(	O
void	O
)	O
{	O
const	O
char	O
*	O
file	pointer
;	O
unsigned	O
int	O
line	int
;	O
file	pointer
=	O
as_where	function
(	O
&	O
line	int
)	O
;	O
identify	function
(	O
file	pointer
)	O
;	O
if	O
(	O
file	pointer
)	O
{	O
if	O
(	O
line	int
!=	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s:%u: "	pointer
,	O
file	pointer
,	O
line	int
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: "	pointer
,	O
file	pointer
)	O
;	O
}	O
}	O
void	O
as_tsktsk	function
(	O
const	O
char	O
*	O
format	enum
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
as_show_where	function
(	O
)	O
;	O
va_start	O
(	O
args	array
,	O
format	enum
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
format	enum
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
(	O
void	O
)	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
}	O
static	O
void	O
as_warn_internal	function
(	O
const	O
char	O
*	O
file	pointer
,	O
unsigned	O
int	O
line	int
,	O
char	O
*	O
buffer	pointer
)	O
{	O
++	O
warning_count	int
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
file	pointer
=	O
as_where	function
(	O
&	O
line	int
)	O
;	O
identify	function
(	O
file	pointer
)	O
;	O
if	O
(	O
file	pointer
)	O
{	O
if	O
(	O
line	int
!=	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s:%u: %s%s\n"	pointer
,	O
file	pointer
,	O
line	int
,	O
_	O
(	O
"Warning: "	pointer
)	O
,	O
buffer	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s%s\n"	pointer
,	O
file	pointer
,	O
_	O
(	O
"Warning: "	pointer
)	O
,	O
buffer	pointer
)	O
;	O
}	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s%s\n"	pointer
,	O
_	O
(	O
"Warning: "	pointer
)	O
,	O
buffer	pointer
)	O
;	O
listing_warning	function
(	O
buffer	pointer
)	O
;	O
}	O
void	O
as_warn	function
(	O
const	O
char	O
*	O
format	enum
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
char	O
buffer	pointer
[	O
2000	int
]	O
;	O
if	O
(	O
!	O
flag_no_warnings	int
)	O
{	O
va_start	O
(	O
args	array
,	O
format	enum
)	O
;	O
vsnprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
format	enum
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
as_warn_internal	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
0	int
,	O
buffer	pointer
)	O
;	O
}	O
}	O
void	O
as_warn_where	function
(	O
const	O
char	O
*	O
file	pointer
,	O
unsigned	O
int	O
line	int
,	O
const	O
char	O
*	O
format	enum
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
char	O
buffer	pointer
[	O
2000	int
]	O
;	O
if	O
(	O
!	O
flag_no_warnings	int
)	O
{	O
va_start	O
(	O
args	array
,	O
format	enum
)	O
;	O
vsnprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
format	enum
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
as_warn_internal	function
(	O
file	pointer
,	O
line	int
,	O
buffer	pointer
)	O
;	O
}	O
}	O
static	O
void	O
as_bad_internal	function
(	O
const	O
char	O
*	O
file	pointer
,	O
unsigned	O
int	O
line	int
,	O
char	O
*	O
buffer	pointer
)	O
{	O
++	O
error_count	int
;	O
if	O
(	O
file	pointer
==	O
NULL	O
)	O
file	pointer
=	O
as_where	function
(	O
&	O
line	int
)	O
;	O
identify	function
(	O
file	pointer
)	O
;	O
if	O
(	O
file	pointer
)	O
{	O
if	O
(	O
line	int
!=	O
0	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s:%u: %s%s\n"	pointer
,	O
file	pointer
,	O
line	int
,	O
_	O
(	O
"Error: "	pointer
)	O
,	O
buffer	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s%s\n"	pointer
,	O
file	pointer
,	O
_	O
(	O
"Error: "	pointer
)	O
,	O
buffer	pointer
)	O
;	O
}	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s%s\n"	pointer
,	O
_	O
(	O
"Error: "	pointer
)	O
,	O
buffer	pointer
)	O
;	O
listing_error	function
(	O
buffer	pointer
)	O
;	O
}	O
void	O
as_bad	function
(	O
const	O
char	O
*	O
format	enum
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
char	O
buffer	pointer
[	O
2000	int
]	O
;	O
va_start	O
(	O
args	array
,	O
format	enum
)	O
;	O
vsnprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
format	enum
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
as_bad_internal	function
(	O
(	O
char	O
*	O
)	O
NULL	O
,	O
0	int
,	O
buffer	pointer
)	O
;	O
}	O
void	O
as_bad_where	function
(	O
const	O
char	O
*	O
file	pointer
,	O
unsigned	O
int	O
line	int
,	O
const	O
char	O
*	O
format	enum
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
char	O
buffer	pointer
[	O
2000	int
]	O
;	O
va_start	O
(	O
args	array
,	O
format	enum
)	O
;	O
vsnprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
format	enum
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
as_bad_internal	function
(	O
file	pointer
,	O
line	int
,	O
buffer	pointer
)	O
;	O
}	O
void	O
as_fatal	function
(	O
const	O
char	O
*	O
format	enum
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
as_show_where	function
(	O
)	O
;	O
va_start	O
(	O
args	array
,	O
format	enum
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Fatal error: "	pointer
)	O
)	O
;	O
vfprintf	function
(	O
stderr	pointer
,	O
format	enum
,	O
args	array
)	O
;	O
(	O
void	O
)	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
if	O
(	O
out_file_name	pointer
!=	O
NULL	O
)	O
unlink_if_ordinary	function
(	O
out_file_name	pointer
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
void	O
as_abort	function
(	O
const	O
char	O
*	O
file	pointer
,	O
int	O
line	int
,	O
const	O
char	O
*	O
fn	pointer
)	O
{	O
as_show_where	function
(	O
)	O
;	O
if	O
(	O
!	O
file	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Internal error (%s).\n"	pointer
)	O
,	O
fn	pointer
?	O
fn	pointer
:	O
"unknown"	pointer
)	O
;	O
else	O
if	O
(	O
fn	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Internal error in %s at %s:%d.\n"	pointer
)	O
,	O
fn	pointer
,	O
file	pointer
,	O
line	int
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Internal error at %s:%d.\n"	pointer
)	O
,	O
file	pointer
,	O
line	int
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Please report this bug.\n"	pointer
)	O
)	O
;	O
xexit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
void	O
signal_crash	function
(	O
int	O
signo	int
)	O
{	O
signal	int
(	O
signo	int
,	O
SIG_DFL	O
)	O
;	O
as_abort	function
(	O
NULL	O
,	O
0	int
,	O
strsignal	function
(	O
signo	int
)	O
)	O
;	O
}	O
void	O
signal_init	function
(	O
void	O
)	O
{	O
signal	int
(	O
SIGSEGV	int
,	O
signal_crash	function
)	O
;	O
signal	int
(	O
SIGILL	int
,	O
signal_crash	function
)	O
;	O
signal	int
(	O
SIGBUS	int
,	O
signal_crash	function
)	O
;	O
signal	int
(	O
SIGABRT	int
,	O
signal_crash	function
)	O
;	O
signal	int
(	O
SIGFPE	int
,	O
signal_crash	function
)	O
;	O
}	O
void	O
sprint_value	function
(	O
char	O
*	O
buf	pointer
,	O
valueT	long
val	int
)	O
{	O
if	O
(	O
sizeof	O
(	O
val	int
)	O
<=	O
sizeof	O
(	O
long	O
)	O
)	O
{	O
sprintf	function
(	O
buf	pointer
,	O
"%ld"	pointer
,	O
(	O
long	O
)	O
val	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
sizeof	O
(	O
val	int
)	O
<=	O
sizeof	O
(	O
bfd_vma	long
)	O
)	O
{	O
sprintf_vma	O
(	O
buf	pointer
,	O
val	int
)	O
;	O
return	O
;	O
}	O
abort	function
(	O
)	O
;	O
}	O
static	O
void	O
as_internal_value_out_of_range	function
(	O
const	O
char	O
*	O
prefix	pointer
,	O
offsetT	long
val	int
,	O
offsetT	long
min	long
,	O
offsetT	long
max	int
,	O
const	O
char	O
*	O
file	pointer
,	O
unsigned	O
line	int
,	O
int	O
bad	int
)	O
{	O
const	O
char	O
*	O
err	pointer
;	O
if	O
(	O
prefix	pointer
==	O
NULL	O
)	O
prefix	pointer
=	O
""	pointer
;	O
if	O
(	O
val	int
>=	O
min	long
&&	O
val	int
<=	O
max	int
)	O
{	O
addressT	long
right	long
=	O
max	int
&	O
-	O
max	int
;	O
if	O
(	O
max	int
<=	O
1	int
)	O
abort	function
(	O
)	O
;	O
err	pointer
=	O
_	O
(	O
"%s out of domain (%"	pointer
BFD_VMA_FMT	pointer
"d is not a multiple of %"	pointer
BFD_VMA_FMT	pointer
"d)"	pointer
)	O
;	O
if	O
(	O
bad	int
)	O
as_bad_where	function
(	O
file	pointer
,	O
line	int
,	O
err	pointer
,	O
prefix	pointer
,	O
val	int
,	O
right	long
)	O
;	O
else	O
as_warn_where	function
(	O
file	pointer
,	O
line	int
,	O
err	pointer
,	O
prefix	pointer
,	O
val	int
,	O
right	long
)	O
;	O
return	O
;	O
}	O
if	O
(	O
val	int
<	O
HEX_MAX_THRESHOLD	int
&&	O
min	long
<	O
HEX_MAX_THRESHOLD	int
&&	O
max	int
<	O
HEX_MAX_THRESHOLD	int
&&	O
val	int
>	O
HEX_MIN_THRESHOLD	O
&&	O
min	long
>	O
HEX_MIN_THRESHOLD	O
&&	O
max	int
>	O
HEX_MIN_THRESHOLD	O
)	O
{	O
err	pointer
=	O
_	O
(	O
"%s out of range (%"	pointer
BFD_VMA_FMT	pointer
"d is not between %"	pointer
BFD_VMA_FMT	pointer
"d and %"	pointer
BFD_VMA_FMT	pointer
"d)"	pointer
)	O
;	O
if	O
(	O
bad	int
)	O
as_bad_where	function
(	O
file	pointer
,	O
line	int
,	O
err	pointer
,	O
prefix	pointer
,	O
val	int
,	O
min	long
,	O
max	int
)	O
;	O
else	O
as_warn_where	function
(	O
file	pointer
,	O
line	int
,	O
err	pointer
,	O
prefix	pointer
,	O
val	int
,	O
min	long
,	O
max	int
)	O
;	O
}	O
else	O
{	O
char	O
val_buf	array
[	O
sizeof	O
(	O
val	int
)	O
*	O
3	int
+	O
2	int
]	O
;	O
char	O
min_buf	array
[	O
sizeof	O
(	O
val	int
)	O
*	O
3	int
+	O
2	int
]	O
;	O
char	O
max_buf	array
[	O
sizeof	O
(	O
val	int
)	O
*	O
3	int
+	O
2	int
]	O
;	O
if	O
(	O
sizeof	O
(	O
val	int
)	O
>	O
sizeof	O
(	O
bfd_vma	long
)	O
)	O
abort	function
(	O
)	O
;	O
sprintf_vma	O
(	O
val_buf	array
,	O
(	O
bfd_vma	long
)	O
val	int
)	O
;	O
sprintf_vma	O
(	O
min_buf	array
,	O
(	O
bfd_vma	long
)	O
min	long
)	O
;	O
sprintf_vma	O
(	O
max_buf	array
,	O
(	O
bfd_vma	long
)	O
max	int
)	O
;	O
err	pointer
=	O
_	O
(	O
"%s out of range (0x%s is not between 0x%s and 0x%s)"	pointer
)	O
;	O
if	O
(	O
bad	int
)	O
as_bad_where	function
(	O
file	pointer
,	O
line	int
,	O
err	pointer
,	O
prefix	pointer
,	O
val_buf	array
,	O
min_buf	array
,	O
max_buf	array
)	O
;	O
else	O
as_warn_where	function
(	O
file	pointer
,	O
line	int
,	O
err	pointer
,	O
prefix	pointer
,	O
val_buf	array
,	O
min_buf	array
,	O
max_buf	array
)	O
;	O
}	O
}	O
void	O
as_warn_value_out_of_range	function
(	O
const	O
char	O
*	O
prefix	pointer
,	O
offsetT	long
value	long
,	O
offsetT	long
min	long
,	O
offsetT	long
max	int
,	O
const	O
char	O
*	O
file	pointer
,	O
unsigned	O
line	int
)	O
{	O
as_internal_value_out_of_range	function
(	O
prefix	pointer
,	O
value	long
,	O
min	long
,	O
max	int
,	O
file	pointer
,	O
line	int
,	O
0	int
)	O
;	O
}	O
void	O
as_bad_value_out_of_range	function
(	O
const	O
char	O
*	O
prefix	pointer
,	O
offsetT	long
value	long
,	O
offsetT	long
min	long
,	O
offsetT	long
max	int
,	O
const	O
char	O
*	O
file	pointer
,	O
unsigned	O
line	int
)	O
{	O
as_internal_value_out_of_range	function
(	O
prefix	pointer
,	O
value	long
,	O
min	long
,	O
max	int
,	O
file	pointer
,	O
line	int
,	O
1	int
)	O
;	O
}	O
