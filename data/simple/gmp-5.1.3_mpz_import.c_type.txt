void	O
mpz_import	O
(	O
mpz_ptr	pointer
z	pointer
,	O
size_t	long
count	long
,	O
int	O
order	int
,	O
size_t	long
size	long
,	O
int	O
endian	int
,	O
size_t	long
nail	long
,	O
const	O
void	O
*	O
data	pointer
)	O
{	O
mp_size_t	long
zsize	long
;	O
mp_ptr	pointer
zp	pointer
;	O
ASSERT	O
(	O
order	int
==	O
1	int
||	O
order	int
==	O
-	O
1	int
)	O
;	O
ASSERT	O
(	O
endian	int
==	O
1	int
||	O
endian	int
==	O
0	int
||	O
endian	int
==	O
-	O
1	int
)	O
;	O
ASSERT	O
(	O
nail	long
<=	O
8	int
*	O
size	long
)	O
;	O
zsize	long
=	O
(	O
count	long
*	O
(	O
8	int
*	O
size	long
-	O
nail	long
)	O
+	O
GMP_NUMB_BITS	O
-	O
1	int
)	O
/	O
GMP_NUMB_BITS	O
;	O
zp	pointer
=	O
MPZ_REALLOC	O
(	O
z	pointer
,	O
zsize	long
)	O
;	O
if	O
(	O
endian	int
==	O
0	int
)	O
endian	int
=	O
HOST_ENDIAN	O
;	O
if	O
(	O
nail	long
==	O
0	int
&&	O
GMP_NAIL_BITS	int
==	O
0	int
)	O
{	O
unsigned	O
align	int
=	O
(	O
(	O
char	O
*	O
)	O
data	pointer
-	O
(	O
char	O
*	O
)	O
NULL	O
)	O
%	O
sizeof	O
(	O
mp_limb_t	long
)	O
;	O
if	O
(	O
order	int
==	O
-	O
1	int
&&	O
size	long
==	O
sizeof	O
(	O
mp_limb_t	long
)	O
&&	O
endian	int
==	O
HOST_ENDIAN	O
&&	O
align	int
==	O
0	int
)	O
{	O
MPN_COPY	O
(	O
zp	pointer
,	O
(	O
mp_srcptr	pointer
)	O
data	pointer
,	O
(	O
mp_size_t	long
)	O
count	long
)	O
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
order	int
==	O
-	O
1	int
&&	O
size	long
==	O
sizeof	O
(	O
mp_limb_t	long
)	O
&&	O
endian	int
==	O
-	O
HOST_ENDIAN	O
&&	O
align	int
==	O
0	int
)	O
{	O
MPN_BSWAP	O
(	O
zp	pointer
,	O
(	O
mp_srcptr	pointer
)	O
data	pointer
,	O
(	O
mp_size_t	long
)	O
count	long
)	O
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
order	int
==	O
1	int
&&	O
size	long
==	O
sizeof	O
(	O
mp_limb_t	long
)	O
&&	O
endian	int
==	O
HOST_ENDIAN	O
&&	O
align	int
==	O
0	int
)	O
{	O
MPN_REVERSE	O
(	O
zp	pointer
,	O
(	O
mp_srcptr	pointer
)	O
data	pointer
,	O
(	O
mp_size_t	long
)	O
count	long
)	O
;	O
goto	O
done	O
;	O
}	O
}	O
{	O
mp_limb_t	long
limb	long
,	O
byte	long
,	O
wbitsmask	long
;	O
size_t	long
i	long
,	O
j	long
,	O
numb	long
,	O
wbytes	long
;	O
mp_size_t	long
woffset	long
;	O
unsigned	O
char	O
*	O
dp	pointer
;	O
int	O
lbits	int
,	O
wbits	int
;	O
numb	long
=	O
size	long
*	O
8	int
-	O
nail	long
;	O
wbytes	long
=	O
numb	long
/	O
8	int
;	O
wbits	int
=	O
numb	long
%	O
8	int
;	O
wbitsmask	long
=	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
wbits	int
)	O
-	O
1	int
;	O
woffset	long
=	O
(	O
numb	long
+	O
7	int
)	O
/	O
8	int
;	O
woffset	long
=	O
(	O
endian	int
>=	O
0	int
?	O
woffset	long
:	O
-	O
woffset	long
)	O
+	O
(	O
order	int
<	O
0	int
?	O
size	long
:	O
-	O
(	O
mp_size_t	long
)	O
size	long
)	O
;	O
dp	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
data	pointer
+	O
(	O
order	int
>=	O
0	int
?	O
(	O
count	long
-	O
1	int
)	O
*	O
size	long
:	O
0	int
)	O
+	O
(	O
endian	int
>=	O
0	int
?	O
size	long
-	O
1	int
:	O
0	int
)	O
;	O
limb	long
=	O
0	int
;	O
lbits	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
count	long
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
wbytes	long
;	O
j	long
++	O
)	O
{	O
byte	long
=	O
*	O
dp	pointer
;	O
dp	pointer
-=	O
endian	int
;	O
ACCUMULATE	O
(	O
8	int
)	O
;	O
}	O
if	O
(	O
wbits	int
!=	O
0	int
)	O
{	O
byte	long
=	O
*	O
dp	pointer
&	O
wbitsmask	long
;	O
dp	pointer
-=	O
endian	int
;	O
ACCUMULATE	O
(	O
wbits	int
)	O
;	O
}	O
dp	pointer
+=	O
woffset	long
;	O
}	O
if	O
(	O
lbits	int
!=	O
0	int
)	O
{	O
ASSERT	O
(	O
lbits	int
<=	O
GMP_NUMB_BITS	O
)	O
;	O
ASSERT_LIMB	O
(	O
limb	long
)	O
;	O
*	O
zp	pointer
++	O
=	O
limb	long
;	O
}	O
ASSERT	O
(	O
zp	pointer
==	O
PTR	O
(	O
z	pointer
)	O
+	O
zsize	long
)	O
;	O
ASSERT	O
(	O
dp	pointer
==	O
(	O
unsigned	O
char	O
*	O
)	O
data	pointer
+	O
(	O
order	int
<	O
0	int
?	O
count	long
*	O
size	long
:	O
-	O
(	O
mp_size_t	long
)	O
size	long
)	O
+	O
(	O
endian	int
>=	O
0	int
?	O
(	O
mp_size_t	long
)	O
size	long
-	O
1	int
:	O
0	int
)	O
)	O
;	O
}	O
done	O
:	O
zp	pointer
=	O
PTR	O
(	O
z	pointer
)	O
;	O
MPN_NORMALIZE	O
(	O
zp	pointer
,	O
zsize	long
)	O
;	O
SIZ	O
(	O
z	pointer
)	O
=	O
zsize	long
;	O
}	O
