static	O
error_t	function
_fmt_create	function
(	O
char	O
*	O
src	pointer
,	O
int	O
posix	int
,	O
struct	O
ps_fmt_specs	struct
*	O
fmt_specs	pointer
,	O
struct	O
ps_fmt	struct
*	O
*	O
fmt	pointer
,	O
char	O
*	O
*	O
err_string	pointer
)	O
{	O
struct	O
ps_fmt	struct
*	O
new_fmt	pointer
;	O
int	O
needs	int
=	O
0	int
;	O
int	O
fields_alloced	int
=	O
10	int
;	O
int	O
global_clr_flags	int
=	O
0	int
,	O
global_inv_flags	int
=	O
0	int
;	O
struct	O
ps_fmt_field	struct
*	O
fields	pointer
=	O
NEWVEC	function
(	O
struct	O
ps_fmt_field	struct
,	O
fields_alloced	int
)	O
;	O
struct	O
ps_fmt_field	struct
*	O
field	pointer
=	O
fields	pointer
;	O
if	O
(	O
fields	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	O
;	O
new_fmt	pointer
=	O
NEW	function
(	O
struct	O
ps_fmt	struct
)	O
;	O
if	O
(	O
fmt	pointer
==	O
NULL	O
)	O
{	O
FREE	function
(	O
fields	pointer
)	O
;	O
return	O
ENOMEM	O
;	O
}	O
new_fmt	pointer
->	O
src_len	long
=	O
strlen	function
(	O
src	pointer
)	O
+	O
1	int
;	O
new_fmt	pointer
->	O
src	pointer
=	O
strdup	function
(	O
src	pointer
)	O
;	O
if	O
(	O
new_fmt	pointer
->	O
src	pointer
==	O
NULL	O
)	O
{	O
FREE	function
(	O
fields	pointer
)	O
;	O
FREE	function
(	O
new_fmt	pointer
)	O
;	O
return	O
ENOMEM	O
;	O
}	O
src	pointer
=	O
new_fmt	pointer
->	O
src	pointer
;	O
while	O
(	O
*	O
src	pointer
!=	O
'\0'	O
)	O
{	O
char	O
*	O
start	pointer
=	O
src	pointer
;	O
if	O
(	O
field	pointer
-	O
fields	pointer
==	O
fields_alloced	int
)	O
{	O
int	O
offs	int
=	O
field	pointer
-	O
fields	pointer
;	O
fields_alloced	int
+=	O
10	int
;	O
fields	pointer
=	O
GROWVEC	function
(	O
fields	pointer
,	O
struct	O
ps_fmt_field	struct
,	O
fields_alloced	int
)	O
;	O
if	O
(	O
fields	pointer
==	O
NULL	O
)	O
{	O
FREE	function
(	O
new_fmt	pointer
->	O
src	pointer
)	O
;	O
FREE	function
(	O
new_fmt	pointer
)	O
;	O
return	O
ENOMEM	O
;	O
}	O
field	pointer
=	O
fields	pointer
+	O
offs	int
;	O
}	O
if	O
(	O
posix	int
)	O
{	O
field	pointer
->	O
pfx	pointer
=	O
" "	pointer
;	O
field	pointer
->	O
pfx_len	int
=	O
1	int
;	O
}	O
else	O
{	O
field	pointer
->	O
pfx	pointer
=	O
src	pointer
;	O
while	O
(	O
*	O
src	pointer
!=	O
'\0'	O
&&	O
*	O
src	pointer
!=	O
'%'	O
)	O
src	pointer
++	O
;	O
field	pointer
->	O
pfx_len	int
=	O
src	pointer
-	O
field	pointer
->	O
pfx	pointer
;	O
}	O
field	pointer
->	O
spec	pointer
=	O
NULL	O
;	O
field	pointer
->	O
title	pointer
=	O
NULL	O
;	O
field	pointer
->	O
width	int
=	O
0	int
;	O
if	O
(	O
*	O
src	pointer
!=	O
'\0'	O
)	O
{	O
char	O
*	O
name	pointer
;	O
int	O
sign	int
=	O
1	int
;	O
int	O
explicit_width	int
=	O
0	int
,	O
explicit_precision	int
=	O
0	int
;	O
int	O
quoted_name	int
=	O
0	int
;	O
int	O
clr_flags	int
=	O
global_clr_flags	int
,	O
inv_flags	int
=	O
global_inv_flags	int
;	O
if	O
(	O
!	O
posix	int
)	O
src	pointer
++	O
;	O
while	O
(	O
*	O
src	pointer
==	O
'@'	O
||	O
*	O
src	pointer
==	O
':'	O
||	O
*	O
src	pointer
==	O
'!'	O
||	O
*	O
src	pointer
==	O
'?'	O
||	O
*	O
src	pointer
==	O
'^'	O
)	O
{	O
if	O
(	O
*	O
src	pointer
==	O
'@'	O
)	O
inv_flags	int
^=	O
PS_FMT_FIELD_AT_MOD	int
;	O
else	O
if	O
(	O
*	O
src	pointer
==	O
':'	O
)	O
inv_flags	int
^=	O
PS_FMT_FIELD_COLON_MOD	int
;	O
else	O
if	O
(	O
*	O
src	pointer
==	O
'^'	O
)	O
inv_flags	int
^=	O
PS_FMT_FIELD_UPCASE_TITLE	int
;	O
else	O
if	O
(	O
*	O
src	pointer
==	O
'!'	O
)	O
{	O
clr_flags	int
|=	O
PS_FMT_FIELD_KEEP	int
;	O
inv_flags	int
|=	O
PS_FMT_FIELD_KEEP	int
;	O
}	O
else	O
if	O
(	O
*	O
src	pointer
==	O
'?'	O
)	O
{	O
clr_flags	int
|=	O
PS_FMT_FIELD_KEEP	int
;	O
inv_flags	int
&=	O
~	O
PS_FMT_FIELD_KEEP	int
;	O
}	O
src	pointer
++	O
;	O
}	O
field	pointer
->	O
width	int
=	O
0	int
;	O
if	O
(	O
*	O
src	pointer
==	O
'-'	O
)	O
sign	int
=	O
-	O
1	int
,	O
src	pointer
++	O
;	O
while	O
(	O
isdigit	function
(	O
*	O
src	pointer
)	O
)	O
{	O
field	pointer
->	O
width	int
=	O
field	pointer
->	O
width	int
*	O
10	int
+	O
(	O
*	O
src	pointer
++	O
-	O
'0'	O
)	O
;	O
explicit_width	int
=	O
TRUE	O
;	O
}	O
field	pointer
->	O
precision	long
=	O
0	int
;	O
if	O
(	O
*	O
src	pointer
==	O
'.'	O
)	O
while	O
(	O
isdigit	function
(	O
*	O
++	O
src	pointer
)	O
)	O
{	O
field	pointer
->	O
precision	long
=	O
field	pointer
->	O
precision	long
*	O
10	int
+	O
(	O
*	O
src	pointer
-	O
'0'	O
)	O
;	O
explicit_precision	int
=	O
1	int
;	O
}	O
if	O
(	O
*	O
src	pointer
==	O
'{'	O
)	O
{	O
src	pointer
++	O
;	O
quoted_name	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
isalnum	function
(	O
*	O
src	pointer
)	O
&&	O
*	O
src	pointer
!=	O
'_'	O
)	O
{	O
if	O
(	O
src	pointer
==	O
start	pointer
)	O
{	O
if	O
(	O
err_string	pointer
)	O
asprintf	function
(	O
err_string	pointer
,	O
"%s: Unknown format spec"	pointer
,	O
src	pointer
)	O
;	O
FREE	function
(	O
new_fmt	pointer
->	O
src	pointer
)	O
;	O
FREE	function
(	O
new_fmt	pointer
)	O
;	O
FREE	function
(	O
fields	pointer
)	O
;	O
return	O
EINVAL	O
;	O
}	O
global_clr_flags	int
=	O
clr_flags	int
;	O
global_inv_flags	int
=	O
inv_flags	int
;	O
continue	O
;	O
}	O
name	pointer
=	O
src	pointer
;	O
if	O
(	O
posix	int
)	O
{	O
int	O
stop	int
=	O
quoted_name	int
?	O
'}'	O
:	O
','	O
;	O
while	O
(	O
*	O
src	pointer
!=	O
'\0'	O
&&	O
*	O
src	pointer
!=	O
stop	int
&&	O
*	O
src	pointer
!=	O
'='	O
)	O
src	pointer
++	O
;	O
if	O
(	O
*	O
src	pointer
==	O
'='	O
)	O
{	O
*	O
src	pointer
++	O
=	O
'\0'	O
;	O
field	pointer
->	O
title	pointer
=	O
src	pointer
;	O
while	O
(	O
*	O
src	pointer
!=	O
'\0'	O
&&	O
*	O
src	pointer
!=	O
stop	int
)	O
src	pointer
++	O
;	O
}	O
if	O
(	O
*	O
src	pointer
)	O
*	O
src	pointer
++	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
while	O
(	O
quoted_name	int
?	O
(	O
*	O
src	pointer
!=	O
'\0'	O
&&	O
*	O
src	pointer
!=	O
'}'	O
&&	O
*	O
src	pointer
!=	O
':'	O
)	O
:	O
(	O
isalnum	function
(	O
*	O
src	pointer
)	O
||	O
*	O
src	pointer
==	O
'_'	O
)	O
)	O
src	pointer
++	O
;	O
if	O
(	O
quoted_name	int
&&	O
*	O
src	pointer
==	O
':'	O
)	O
{	O
*	O
src	pointer
++	O
=	O
'\0'	O
;	O
field	pointer
->	O
title	pointer
=	O
src	pointer
;	O
while	O
(	O
*	O
src	pointer
!=	O
'\0'	O
&&	O
*	O
src	pointer
!=	O
'}'	O
)	O
src	pointer
++	O
;	O
}	O
bcopy	function
(	O
name	pointer
,	O
name	pointer
-	O
1	int
,	O
src	pointer
-	O
name	pointer
)	O
;	O
name	pointer
--	O
;	O
if	O
(	O
field	pointer
->	O
title	pointer
)	O
field	pointer
->	O
title	pointer
--	O
;	O
src	pointer
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
field	pointer
->	O
spec	pointer
=	O
ps_fmt_specs_find	function
(	O
fmt_specs	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
!	O
field	pointer
->	O
spec	pointer
)	O
{	O
if	O
(	O
err_string	pointer
)	O
asprintf	function
(	O
err_string	pointer
,	O
"%s: Unknown format spec"	pointer
,	O
name	pointer
)	O
;	O
FREE	function
(	O
new_fmt	pointer
->	O
src	pointer
)	O
;	O
FREE	function
(	O
fields	pointer
)	O
;	O
FREE	function
(	O
new_fmt	pointer
)	O
;	O
return	O
EINVAL	O
;	O
}	O
if	O
(	O
!	O
field	pointer
->	O
title	pointer
)	O
{	O
if	O
(	O
field	pointer
->	O
spec	pointer
->	O
title	pointer
)	O
field	pointer
->	O
title	pointer
=	O
field	pointer
->	O
spec	pointer
->	O
title	pointer
;	O
else	O
field	pointer
->	O
title	pointer
=	O
field	pointer
->	O
spec	pointer
->	O
name	pointer
;	O
}	O
needs	int
|=	O
ps_getter_needs	O
(	O
ps_fmt_spec_getter	O
(	O
field	pointer
->	O
spec	pointer
)	O
)	O
;	O
if	O
(	O
!	O
explicit_width	int
)	O
field	pointer
->	O
width	int
=	O
field	pointer
->	O
spec	pointer
->	O
width	int
;	O
if	O
(	O
!	O
explicit_precision	int
)	O
field	pointer
->	O
precision	long
=	O
field	pointer
->	O
spec	pointer
->	O
precision	long
;	O
field	pointer
->	O
flags	int
=	O
(	O
field	pointer
->	O
spec	pointer
->	O
flags	int
&	O
~	O
clr_flags	int
)	O
^	O
inv_flags	int
;	O
if	O
(	O
quoted_name	int
&&	O
*	O
src	pointer
==	O
'}'	O
)	O
src	pointer
++	O
;	O
if	O
(	O
posix	int
)	O
{	O
if	O
(	O
*	O
src	pointer
==	O
','	O
)	O
src	pointer
++	O
;	O
while	O
(	O
isspace	function
(	O
*	O
src	pointer
)	O
)	O
src	pointer
++	O
;	O
}	O
field	pointer
->	O
width	int
*=	O
sign	int
;	O
{	O
int	O
width	int
=	O
field	pointer
->	O
width	int
;	O
int	O
tlen	int
=	O
strlen	function
(	O
field	pointer
->	O
title	pointer
)	O
;	O
if	O
(	O
width	int
!=	O
0	int
&&	O
tlen	int
>	O
ABS	function
(	O
width	int
)	O
)	O
field	pointer
->	O
width	int
=	O
(	O
width	int
>	O
0	int
?	O
tlen	int
:	O
-	O
tlen	int
)	O
;	O
}	O
}	O
field	pointer
++	O
;	O
}	O
new_fmt	pointer
->	O
fields	pointer
=	O
fields	pointer
;	O
new_fmt	pointer
->	O
num_fields	int
=	O
field	pointer
-	O
fields	pointer
;	O
new_fmt	pointer
->	O
needs	int
=	O
needs	int
;	O
new_fmt	pointer
->	O
inapp	int
=	O
posix	int
?	O
"-"	pointer
:	O
0	int
;	O
new_fmt	pointer
->	O
error	pointer
=	O
"?"	pointer
;	O
*	O
fmt	pointer
=	O
new_fmt	pointer
;	O
return	O
0	int
;	O
}	O
error_t	function
ps_fmt_create	function
(	O
char	O
*	O
src	pointer
,	O
int	O
posix	int
,	O
struct	O
ps_fmt_specs	struct
*	O
fmt_specs	pointer
,	O
struct	O
ps_fmt	struct
*	O
*	O
fmt	pointer
)	O
{	O
return	O
_fmt_create	function
(	O
src	pointer
,	O
posix	int
,	O
fmt_specs	pointer
,	O
fmt	pointer
,	O
0	int
)	O
;	O
}	O
void	O
ps_fmt_creation_error	function
(	O
char	O
*	O
src	pointer
,	O
int	O
posix	int
,	O
struct	O
ps_fmt_specs	struct
*	O
fmt_specs	pointer
,	O
char	O
*	O
*	O
error	pointer
)	O
{	O
struct	O
ps_fmt	struct
*	O
fmt	pointer
;	O
error_t	function
err	O
=	O
_fmt_create	function
(	O
src	pointer
,	O
posix	int
,	O
fmt_specs	pointer
,	O
&	O
fmt	pointer
,	O
error	pointer
)	O
;	O
if	O
(	O
err	O
!=	O
EINVAL	O
)	O
asprintf	function
(	O
error	pointer
,	O
"%s"	pointer
,	O
strerror	function
(	O
err	O
)	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
ps_fmt_free	function
(	O
fmt	pointer
)	O
;	O
}	O
void	O
ps_fmt_free	function
(	O
struct	O
ps_fmt	struct
*	O
fmt	pointer
)	O
{	O
FREE	function
(	O
fmt	pointer
->	O
src	pointer
)	O
;	O
FREE	function
(	O
fmt	pointer
->	O
fields	pointer
)	O
;	O
FREE	function
(	O
fmt	pointer
)	O
;	O
}	O
error_t	function
ps_fmt_clone	function
(	O
struct	O
ps_fmt	struct
*	O
fmt	pointer
,	O
struct	O
ps_fmt	struct
*	O
*	O
copy	pointer
)	O
{	O
struct	O
ps_fmt	struct
*	O
new	pointer
=	O
NEW	function
(	O
struct	O
ps_fmt	struct
)	O
;	O
struct	O
ps_fmt_field	struct
*	O
fields	pointer
=	O
NEWVEC	function
(	O
struct	O
ps_fmt_field	struct
,	O
fmt	pointer
->	O
num_fields	int
)	O
;	O
char	O
*	O
src	pointer
=	O
malloc	function
(	O
fmt	pointer
->	O
src_len	long
)	O
;	O
if	O
(	O
!	O
new	pointer
||	O
!	O
fields	pointer
||	O
!	O
src	pointer
)	O
{	O
if	O
(	O
new	pointer
)	O
free	function
(	O
new	pointer
)	O
;	O
if	O
(	O
fields	pointer
)	O
free	function
(	O
fields	pointer
)	O
;	O
if	O
(	O
src	pointer
)	O
free	function
(	O
src	pointer
)	O
;	O
return	O
ENOMEM	O
;	O
}	O
bcopy	function
(	O
fmt	pointer
->	O
src	pointer
,	O
src	pointer
,	O
fmt	pointer
->	O
src_len	long
)	O
;	O
bcopy	function
(	O
fmt	pointer
->	O
fields	pointer
,	O
fields	pointer
,	O
fmt	pointer
->	O
num_fields	int
*	O
sizeof	O
(	O
struct	O
ps_fmt_field	struct
)	O
)	O
;	O
new	pointer
->	O
fields	pointer
=	O
fields	pointer
;	O
new	pointer
->	O
num_fields	int
=	O
fmt	pointer
->	O
num_fields	int
;	O
new	pointer
->	O
src	pointer
=	O
src	pointer
;	O
new	pointer
->	O
src_len	long
=	O
fmt	pointer
->	O
src_len	long
;	O
new	pointer
->	O
inapp	int
=	O
fmt	pointer
->	O
inapp	int
;	O
new	pointer
->	O
error	pointer
=	O
fmt	pointer
->	O
error	pointer
;	O
*	O
copy	pointer
=	O
new	pointer
;	O
return	O
0	int
;	O
}	O
error_t	function
ps_fmt_write_titles	function
(	O
struct	O
ps_fmt	struct
*	O
fmt	pointer
,	O
struct	O
ps_stream	struct
*	O
stream	pointer
)	O
{	O
error_t	function
err	O
=	O
0	int
;	O
struct	O
ps_fmt_field	struct
*	O
field	pointer
=	O
ps_fmt_fields	O
(	O
fmt	pointer
)	O
;	O
int	O
left	int
=	O
ps_fmt_num_fields	O
(	O
fmt	pointer
)	O
;	O
while	O
(	O
left	int
--	O
>	O
0	int
&&	O
!	O
err	O
)	O
{	O
const	O
char	O
*	O
pfx	pointer
=	O
ps_fmt_field_prefix	O
(	O
field	pointer
)	O
;	O
int	O
pfx_len	int
=	O
ps_fmt_field_prefix_length	O
(	O
field	pointer
)	O
;	O
if	O
(	O
pfx_len	int
>	O
0	int
)	O
err	O
=	O
ps_stream_write	function
(	O
stream	pointer
,	O
pfx	pointer
,	O
pfx_len	int
)	O
;	O
if	O
(	O
ps_fmt_field_fmt_spec	O
(	O
field	pointer
)	O
!=	O
NULL	O
&&	O
!	O
err	O
)	O
{	O
const	O
char	O
*	O
title	pointer
=	O
ps_fmt_field_title	O
(	O
field	pointer
)	O
?	O
:	O
"??"	pointer
;	O
int	O
width	int
=	O
ps_fmt_field_width	O
(	O
field	pointer
)	O
;	O
if	O
(	O
field	pointer
->	O
flags	int
&	O
PS_FMT_FIELD_UPCASE_TITLE	int
)	O
{	O
int	O
len	int
=	O
strlen	function
(	O
title	pointer
)	O
,	O
i	int
;	O
char	O
upcase_title	O
[	O
len	int
+	O
1	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
upcase_title	O
[	O
i	int
]	O
=	O
toupper	function
(	O
title	pointer
[	O
i	int
]	O
)	O
;	O
upcase_title	O
[	O
len	int
]	O
=	O
'\0'	O
;	O
err	O
=	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
upcase_title	O
,	O
width	int
)	O
;	O
}	O
else	O
err	O
=	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
title	pointer
,	O
width	int
)	O
;	O
}	O
field	pointer
++	O
;	O
}	O
return	O
err	O
;	O
}	O
error_t	function
ps_fmt_write_proc_stat	function
(	O
struct	O
ps_fmt	struct
*	O
fmt	pointer
,	O
struct	O
proc_stat	struct
*	O
ps	pointer
,	O
struct	O
ps_stream	struct
*	O
stream	pointer
)	O
{	O
error_t	function
err	O
=	O
0	int
;	O
struct	O
ps_fmt_field	struct
*	O
field	pointer
=	O
ps_fmt_fields	O
(	O
fmt	pointer
)	O
;	O
int	O
nfields	int
=	O
ps_fmt_num_fields	O
(	O
fmt	pointer
)	O
;	O
ps_flags_t	int
have	int
=	O
ps	pointer
->	O
flags	int
;	O
ps_flags_t	int
inapp	int
=	O
ps	pointer
->	O
inapp	int
;	O
while	O
(	O
nfields	int
--	O
>	O
0	int
&&	O
!	O
err	O
)	O
{	O
const	O
struct	O
ps_fmt_spec	struct
*	O
spec	pointer
=	O
ps_fmt_field_fmt_spec	O
(	O
field	pointer
)	O
;	O
const	O
char	O
*	O
pfx	pointer
=	O
ps_fmt_field_prefix	O
(	O
field	pointer
)	O
;	O
int	O
pfx_len	int
=	O
ps_fmt_field_prefix_length	O
(	O
field	pointer
)	O
;	O
if	O
(	O
pfx_len	int
>	O
0	int
)	O
err	O
=	O
ps_stream_write	function
(	O
stream	pointer
,	O
pfx	pointer
,	O
pfx_len	int
)	O
;	O
if	O
(	O
spec	pointer
!=	O
NULL	O
&&	O
!	O
err	O
)	O
{	O
ps_flags_t	int
need	int
=	O
ps_getter_needs	O
(	O
ps_fmt_spec_getter	O
(	O
spec	pointer
)	O
)	O
;	O
if	O
(	O
(	O
need	int
&	O
have	int
)	O
==	O
need	int
)	O
err	O
=	O
(	O
*	O
spec	pointer
->	O
output_fn	pointer
)	O
(	O
ps	pointer
,	O
field	pointer
,	O
stream	pointer
)	O
;	O
else	O
if	O
(	O
need	int
&	O
~	O
have	int
&	O
inapp	int
)	O
err	O
=	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
fmt	pointer
->	O
inapp	int
?	O
:	O
""	pointer
,	O
field	pointer
->	O
width	int
)	O
;	O
else	O
err	O
=	O
ps_stream_write_field	function
(	O
stream	pointer
,	O
fmt	pointer
->	O
error	pointer
?	O
:	O
""	pointer
,	O
field	pointer
->	O
width	int
)	O
;	O
}	O
field	pointer
++	O
;	O
}	O
return	O
err	O
;	O
}	O
void	O
ps_fmt_squash	function
(	O
struct	O
ps_fmt	struct
*	O
fmt	pointer
,	O
int	O
(	O
*	O
fn	pointer
)	O
(	O
struct	O
ps_fmt_field	struct
*	O
field	pointer
)	O
)	O
{	O
int	O
nfields	int
=	O
fmt	pointer
->	O
num_fields	int
;	O
struct	O
ps_fmt_field	struct
*	O
fields	pointer
=	O
fmt	pointer
->	O
fields	pointer
,	O
*	O
field	pointer
=	O
fields	pointer
;	O
ps_flags_t	int
need	int
=	O
0	int
;	O
while	O
(	O
(	O
field	pointer
-	O
fields	pointer
)	O
<	O
nfields	int
)	O
if	O
(	O
field	pointer
->	O
spec	pointer
!=	O
NULL	O
&&	O
(	O
*	O
fn	pointer
)	O
(	O
field	pointer
)	O
)	O
{	O
const	O
char	O
*	O
beg_pfx	pointer
=	O
field	pointer
->	O
pfx	pointer
;	O
int	O
beg_pfx_len	int
=	O
field	pointer
->	O
pfx_len	int
;	O
nfields	int
--	O
;	O
if	O
(	O
nfields	int
>	O
0	int
)	O
bcopy	function
(	O
field	pointer
+	O
1	int
,	O
field	pointer
,	O
(	O
nfields	int
-	O
(	O
field	pointer
-	O
fields	pointer
)	O
)	O
*	O
sizeof	O
*	O
field	pointer
)	O
;	O
if	O
(	O
field	pointer
==	O
fields	pointer
)	O
{	O
if	O
(	O
nfields	int
==	O
0	int
)	O
{	O
nfields	int
++	O
;	O
field	pointer
->	O
pfx	pointer
=	O
beg_pfx	pointer
;	O
field	pointer
->	O
pfx_len	int
=	O
beg_pfx_len	int
;	O
field	pointer
->	O
spec	pointer
=	O
NULL	O
;	O
}	O
else	O
if	O
(	O
field	pointer
->	O
spec	pointer
==	O
NULL	O
)	O
{	O
field	pointer
->	O
pfx	pointer
-=	O
beg_pfx_len	int
;	O
field	pointer
->	O
pfx_len	int
+=	O
beg_pfx_len	int
;	O
bcopy	function
(	O
beg_pfx	pointer
,	O
(	O
char	O
*	O
)	O
field	pointer
->	O
pfx	pointer
,	O
beg_pfx_len	int
)	O
;	O
}	O
else	O
{	O
field	pointer
->	O
pfx	pointer
=	O
beg_pfx	pointer
;	O
field	pointer
->	O
pfx_len	int
=	O
beg_pfx_len	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
field	pointer
->	O
spec	pointer
)	O
need	int
|=	O
ps_getter_needs	O
(	O
field	pointer
->	O
spec	pointer
->	O
getter	pointer
)	O
;	O
field	pointer
++	O
;	O
}	O
fmt	pointer
->	O
num_fields	int
=	O
nfields	int
;	O
fmt	pointer
->	O
needs	int
=	O
need	int
;	O
}	O
void	O
ps_fmt_squash_flags	function
(	O
struct	O
ps_fmt	struct
*	O
fmt	pointer
,	O
ps_flags_t	int
flags	int
)	O
{	O
int	O
squashable_field	O
(	O
struct	O
ps_fmt_field	struct
*	O
field	pointer
)	O
{	O
return	O
field	pointer
->	O
spec	pointer
->	O
getter	pointer
->	O
needs	int
&	O
flags	int
;	O
}	O
ps_fmt_squash	function
(	O
fmt	pointer
,	O
squashable_field	O
)	O
;	O
}	O
void	O
ps_fmt_set_output_width	function
(	O
struct	O
ps_fmt	struct
*	O
fmt	pointer
,	O
int	O
width	int
)	O
{	O
struct	O
ps_fmt_field	struct
*	O
field	pointer
=	O
ps_fmt_fields	O
(	O
fmt	pointer
)	O
;	O
int	O
nfields	int
=	O
ps_fmt_num_fields	O
(	O
fmt	pointer
)	O
;	O
while	O
(	O
--	O
nfields	int
>	O
0	int
)	O
{	O
int	O
fw	int
=	O
field	pointer
->	O
width	int
;	O
width	int
-=	O
field	pointer
->	O
pfx_len	int
+	O
(	O
fw	int
<	O
0	int
?	O
-	O
fw	int
:	O
fw	int
)	O
;	O
field	pointer
++	O
;	O
}	O
if	O
(	O
nfields	int
==	O
0	int
&&	O
field	pointer
->	O
width	int
==	O
0	int
&&	O
width	int
>	O
0	int
)	O
field	pointer
->	O
width	int
=	O
width	int
-	O
field	pointer
->	O
pfx_len	int
-	O
1	int
;	O
}	O
