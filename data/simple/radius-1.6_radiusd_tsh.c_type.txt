static	O
int	O
interactive	int
;	O
static	O
grad_request_t	struct
test_req	struct
;	O
static	O
char	O
*	O
tsh_ps1	pointer
=	O
"(radiusd) "	pointer
;	O
static	O
char	O
*	O
tsh_ps2	pointer
=	O
"[radiusd] "	pointer
;	O
static	O
char	O
*	O
tsh_readline	function
(	O
const	O
char	O
*	O
prompt	pointer
)	O
;	O
static	O
void	O
tsh_help	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
;	O
static	O
void	O
tsh_query_nas	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
;	O
static	O
void	O
tsh_run_rewrite	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
;	O
static	O
void	O
tsh_source_rewrite	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
;	O
static	O
void	O
tsh_timespan	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
;	O
static	O
void	O
tsh_debug	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
;	O
static	O
void	O
tsh_quit	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
;	O
static	O
void	O
tsh_req_define	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
;	O
static	O
void	O
tsh_req_print	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
;	O
static	O
void	O
tsh_rewrite_stack	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
;	O
typedef	O
void	O
(	O
*	O
tsh_command	pointer
)	O
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
;	O
struct	O
command_table	struct
{	O
char	O
*	O
shortname	array
;	O
char	O
*	O
longname	array
;	O
char	O
*	O
usage	pointer
;	O
char	O
*	O
doc	pointer
;	O
tsh_command	pointer
handler	pointer
;	O
}	O
command_table	struct
[	O
]	O
=	O
{	O
{	O
"h"	pointer
,	O
"help"	pointer
,	O
NULL	O
,	O
N_	O
(	O
"Print this help screen"	pointer
)	O
,	O
tsh_help	function
}	O
,	O
{	O
"q"	pointer
,	O
"query-nas"	pointer
,	O
N_	O
(	O
"NAS LOGIN SID PORT [IP]"	pointer
)	O
,	O
N_	O
(	O
"Query the given NAS"	pointer
)	O
,	O
tsh_query_nas	function
}	O
,	O
{	O
"rs"	pointer
,	O
"rewrite-stack"	pointer
,	O
N_	O
(	O
"[NUMBER]"	pointer
)	O
,	O
N_	O
(	O
"Print or set the Rewrite stack size"	pointer
)	O
,	O
tsh_rewrite_stack	function
}	O
,	O
{	O
"r"	pointer
,	O
"run-rewrite"	pointer
,	O
N_	O
(	O
"FUNCTION(args..)"	pointer
)	O
,	O
N_	O
(	O
"Run given Rewrite function"	pointer
)	O
,	O
tsh_run_rewrite	function
}	O
,	O
{	O
"s"	pointer
,	O
"source"	pointer
,	O
N_	O
(	O
"FILE"	pointer
)	O
,	O
N_	O
(	O
"Source the given Rewrite file"	pointer
)	O
,	O
tsh_source_rewrite	function
}	O
,	O
{	O
"t"	pointer
,	O
"timespan"	pointer
,	O
N_	O
(	O
"TIMESPAN [DOW [HH [MM]]]"	pointer
)	O
,	O
N_	O
(	O
"Check the timespan interval"	pointer
)	O
,	O
tsh_timespan	function
}	O
,	O
{	O
"d"	pointer
,	O
"debug"	pointer
,	O
N_	O
(	O
"LEVEL"	pointer
)	O
,	O
N_	O
(	O
"Set debugging level"	pointer
)	O
,	O
tsh_debug	function
}	O
,	O
{	O
"rd"	pointer
,	O
"request-define"	pointer
,	O
N_	O
(	O
"[PAIR [,PAIR]]"	pointer
)	O
,	O
N_	O
(	O
"Define a request"	pointer
)	O
,	O
tsh_req_define	function
}	O
,	O
{	O
"rp"	pointer
,	O
"request-print"	pointer
,	O
NULL	O
,	O
N_	O
(	O
"Print the request"	pointer
)	O
,	O
tsh_req_print	function
}	O
,	O
{	O
"quit"	pointer
,	O
"quit"	pointer
,	O
NULL	O
,	O
N_	O
(	O
"Quit the shell"	pointer
)	O
,	O
tsh_quit	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
void	O
print_doc	function
(	O
int	O
n	long
,	O
char	O
*	O
s	pointer
)	O
{	O
if	O
(	O
n	long
>	O
OPT_DOC_COL	int
)	O
{	O
putchar	function
(	O
'\n'	O
)	O
;	O
n	long
=	O
0	int
;	O
}	O
do	O
{	O
char	O
*	O
p	pointer
;	O
char	O
*	O
space	pointer
=	O
NULL	O
;	O
for	O
(	O
;	O
n	long
<	O
OPT_DOC_COL	int
;	O
n	long
++	O
)	O
putchar	function
(	O
' '	O
)	O
;	O
for	O
(	O
p	pointer
=	O
s	pointer
;	O
*	O
p	pointer
&&	O
p	pointer
<	O
s	pointer
+	O
(	O
RMARGIN	int
-	O
OPT_DOC_COL	int
)	O
;	O
p	pointer
++	O
)	O
if	O
(	O
isspace	function
(	O
*	O
p	pointer
)	O
)	O
space	pointer
=	O
p	pointer
;	O
if	O
(	O
!	O
space	pointer
||	O
p	pointer
<	O
s	pointer
+	O
(	O
RMARGIN	int
-	O
OPT_DOC_COL	int
)	O
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
s	pointer
)	O
;	O
s	pointer
+=	O
strlen	function
(	O
s	pointer
)	O
;	O
}	O
else	O
{	O
for	O
(	O
;	O
s	pointer
<	O
space	pointer
;	O
s	pointer
++	O
)	O
putchar	function
(	O
*	O
s	pointer
)	O
;	O
for	O
(	O
;	O
*	O
s	pointer
&&	O
isspace	function
(	O
*	O
s	pointer
)	O
;	O
s	pointer
++	O
)	O
;	O
}	O
putchar	function
(	O
'\n'	O
)	O
;	O
n	long
=	O
1	int
;	O
}	O
while	O
(	O
*	O
s	pointer
)	O
;	O
}	O
static	O
void	O
tsh_help	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
ARG_UNUSED	O
)	O
{	O
struct	O
command_table	struct
*	O
cp	pointer
;	O
int	O
n	long
;	O
for	O
(	O
cp	pointer
=	O
command_table	struct
;	O
cp	pointer
->	O
shortname	array
;	O
cp	pointer
++	O
)	O
{	O
int	O
len	int
=	O
strlen	function
(	O
cp	pointer
->	O
shortname	array
)	O
;	O
n	long
=	O
printf	function
(	O
"%-8.8s%s"	pointer
,	O
cp	pointer
->	O
shortname	array
,	O
cp	pointer
->	O
longname	array
)	O
;	O
if	O
(	O
cp	pointer
->	O
usage	pointer
)	O
n	long
+=	O
printf	function
(	O
" %s"	pointer
,	O
cp	pointer
->	O
usage	pointer
)	O
;	O
print_doc	function
(	O
n	long
,	O
gettext	function
(	O
cp	pointer
->	O
doc	pointer
)	O
)	O
;	O
}	O
}	O
static	O
void	O
tsh_query_nas	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
ARG_UNUSED	O
)	O
{	O
grad_nas_t	struct
*	O
nas	int
;	O
struct	O
radutmp	struct
ut	pointer
;	O
if	O
(	O
argc	int
<	O
5	int
||	O
argc	int
>	O
6	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: wrong number of arguments\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
;	O
}	O
nas	int
=	O
grad_nas_lookup_name	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
nas	int
)	O
{	O
if	O
(	O
nas	int
->	O
netdef	struct
.	O
netmask	int
!=	O
0xffffffffL	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s is a network name\n"	pointer
)	O
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
return	O
;	O
}	O
ut	pointer
.	O
nas_address	int
=	O
nas	int
->	O
netdef	struct
.	O
ipaddr	int
;	O
}	O
else	O
{	O
ut	pointer
.	O
nas_address	int
=	O
grad_ip_gethostaddr	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
ut	pointer
.	O
nas_address	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: unknown nas\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
;	O
}	O
}	O
strncpy	function
(	O
ut	pointer
.	O
orig_login	array
,	O
argv	pointer
[	O
2	int
]	O
,	O
sizeof	O
(	O
ut	pointer
.	O
orig_login	array
)	O
)	O
;	O
strncpy	function
(	O
ut	pointer
.	O
session_id	array
,	O
argv	pointer
[	O
3	int
]	O
,	O
sizeof	O
(	O
ut	pointer
.	O
session_id	array
)	O
)	O
;	O
ut	pointer
.	O
nas_port	int
=	O
atoi	function
(	O
argv	pointer
[	O
4	int
]	O
)	O
;	O
if	O
(	O
argc	int
==	O
6	int
)	O
ut	pointer
.	O
framed_address	int
=	O
grad_ip_strtoip	function
(	O
argv	pointer
[	O
5	int
]	O
)	O
;	O
printf	function
(	O
"%d\n"	pointer
,	O
checkrad	function
(	O
nas	int
,	O
&	O
ut	pointer
)	O
)	O
;	O
}	O
static	O
void	O
tsh_rewrite_stack	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
{	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: wrong number of arguments\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
argc	int
==	O
1	int
)	O
printf	function
(	O
"%lu\n"	pointer
,	O
(	O
long	O
unsigned	O
)	O
rewrite_get_stack_size	function
(	O
)	O
)	O
;	O
else	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
n	long
=	O
strtoul	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	pointer
)	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: argument is not a number\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
else	O
rewrite_set_stack_size	function
(	O
n	long
)	O
;	O
}	O
}	O
static	O
void	O
tsh_run_rewrite	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
{	O
grad_value_t	struct
val	array
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: wrong number of arguments\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
;	O
}	O
while	O
(	O
*	O
cmd	pointer
&&	O
isspace	function
(	O
*	O
cmd	pointer
)	O
)	O
cmd	pointer
++	O
;	O
while	O
(	O
*	O
cmd	pointer
&&	O
!	O
isspace	function
(	O
*	O
cmd	pointer
)	O
)	O
cmd	pointer
++	O
;	O
if	O
(	O
rewrite_interpret	function
(	O
cmd	pointer
,	O
&	O
test_req	struct
,	O
&	O
val	array
)	O
)	O
printf	function
(	O
"?\n"	pointer
)	O
;	O
else	O
{	O
switch	O
(	O
val	array
.	O
type	enum
)	O
{	O
case	O
Integer	int
:	O
printf	function
(	O
"%d (%u)"	pointer
,	O
val	array
.	O
datum	union
.	O
ival	int
,	O
(	O
unsigned	O
)	O
val	array
.	O
datum	union
.	O
ival	int
)	O
;	O
break	O
;	O
case	O
String	int
:	O
printf	function
(	O
"%s"	pointer
,	O
val	array
.	O
datum	union
.	O
sval	struct
.	O
data	pointer
)	O
;	O
break	O
;	O
case	O
Undefined	int
:	O
printf	function
(	O
_	O
(	O
"Undefined"	pointer
)	O
)	O
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
grad_value_free	function
(	O
&	O
val	array
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
}	O
static	O
void	O
tsh_source_rewrite	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
ARG_UNUSED	O
)	O
{	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: wrong number of arguments\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
;	O
}	O
printf	function
(	O
"%d\n"	pointer
,	O
rewrite_load_module	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
)	O
;	O
}	O
static	O
void	O
tsh_timespan	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
ARG_UNUSED	O
)	O
{	O
time_t	long
t	long
;	O
TIMESPAN	struct
*	O
ts	pointer
;	O
char	O
*	O
p	pointer
;	O
unsigned	O
rest	pointer
;	O
int	O
i	int
;	O
struct	O
tm	struct
tm	struct
;	O
int	O
diff	int
,	O
dow	int
;	O
if	O
(	O
argc	int
<	O
2	int
||	O
argc	int
>	O
5	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: wrong number of arguments\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
;	O
}	O
time	struct
(	O
&	O
t	long
)	O
;	O
localtime_r	function
(	O
&	O
t	long
,	O
&	O
tm	struct
)	O
;	O
switch	O
(	O
argc	int
)	O
{	O
default	O
:	O
return	O
;	O
case	O
5	int
:	O
tm	struct
.	O
tm_min	int
=	O
atoi	function
(	O
argv	pointer
[	O
4	int
]	O
)	O
;	O
case	O
4	int
:	O
tm	struct
.	O
tm_hour	int
=	O
atoi	function
(	O
argv	pointer
[	O
3	int
]	O
)	O
;	O
case	O
3	int
:	O
dow	int
=	O
atoi	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
diff	int
=	O
dow	int
-	O
tm	struct
.	O
tm_wday	int
;	O
tm	struct
.	O
tm_wday	int
=	O
dow	int
;	O
tm	struct
.	O
tm_mday	int
+=	O
diff	int
;	O
tm	struct
.	O
tm_yday	int
+=	O
diff	int
;	O
t	long
=	O
mktime	function
(	O
&	O
tm	struct
)	O
;	O
break	O
;	O
case	O
2	int
:	O
break	O
;	O
}	O
printf	function
(	O
"ctime: %s"	pointer
,	O
ctime	function
(	O
&	O
t	long
)	O
)	O
;	O
if	O
(	O
ts_parse	function
(	O
&	O
ts	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
&	O
p	pointer
)	O
)	O
{	O
printf	function
(	O
"bad timestring near %s\n"	pointer
,	O
p	pointer
)	O
;	O
}	O
else	O
{	O
int	O
l	int
=	O
ts_match	function
(	O
ts	pointer
,	O
&	O
t	long
,	O
&	O
rest	pointer
)	O
;	O
if	O
(	O
l	int
==	O
0	int
)	O
printf	function
(	O
"inside %s: %d seconds left\n"	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
rest	pointer
)	O
;	O
else	O
printf	function
(	O
"OUTSIDE %s: %d seconds to wait\n"	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
rest	pointer
)	O
;	O
}	O
}	O
static	O
void	O
tsh_debug	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
ARG_UNUSED	O
)	O
{	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"%s: wrong number of arguments\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
;	O
}	O
while	O
(	O
--	O
argc	int
)	O
grad_set_debug_levels	function
(	O
*	O
++	O
argv	pointer
)	O
;	O
}	O
static	O
void	O
tsh_req_define	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
{	O
char	O
*	O
errp	pointer
;	O
grad_avp_t	struct
*	O
vp	pointer
=	O
NULL	O
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
while	O
(	O
*	O
cmd	pointer
&&	O
isspace	function
(	O
*	O
cmd	pointer
)	O
)	O
cmd	pointer
++	O
;	O
while	O
(	O
*	O
cmd	pointer
&&	O
!	O
isspace	function
(	O
*	O
cmd	pointer
)	O
)	O
cmd	pointer
++	O
;	O
if	O
(	O
userparse	function
(	O
cmd	pointer
,	O
&	O
vp	pointer
,	O
&	O
errp	pointer
)	O
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"%s"	pointer
,	O
errp	pointer
)	O
;	O
return	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
interactive	int
)	O
printf	function
(	O
_	O
(	O
"Enter the pair list. End with end of file\n"	pointer
)	O
)	O
;	O
while	O
(	O
(	O
cmd	pointer
=	O
grad_readline	function
(	O
tsh_ps2	pointer
)	O
)	O
!=	O
NULL	O
&&	O
cmd	pointer
[	O
0	int
]	O
)	O
{	O
if	O
(	O
userparse	function
(	O
cmd	pointer
,	O
&	O
vp	pointer
,	O
&	O
errp	pointer
)	O
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"%s"	pointer
,	O
errp	pointer
)	O
;	O
free	function
(	O
cmd	pointer
)	O
;	O
grad_avl_free	function
(	O
vp	pointer
)	O
;	O
return	O
;	O
}	O
free	function
(	O
cmd	pointer
)	O
;	O
}	O
}	O
grad_avl_free	function
(	O
test_req	struct
.	O
avlist	pointer
)	O
;	O
test_req	struct
.	O
avlist	pointer
=	O
vp	pointer
;	O
}	O
static	O
void	O
tsh_req_print	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
{	O
grad_avl_fprint	function
(	O
stdout	pointer
,	O
"    "	pointer
,	O
1	int
,	O
test_req	struct
.	O
avlist	pointer
)	O
;	O
}	O
static	O
void	O
tsh_quit	function
(	O
int	O
argc	int
ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	pointer
ARG_UNUSED	O
,	O
char	O
*	O
cmd	pointer
ARG_UNUSED	O
)	O
{	O
grad_write_history_file	function
(	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
static	O
struct	O
command_table	struct
*	O
tsh_find_entry	function
(	O
char	O
*	O
cmd	pointer
)	O
{	O
int	O
len	int
=	O
strlen	function
(	O
cmd	pointer
)	O
;	O
struct	O
command_table	struct
*	O
cp	pointer
;	O
for	O
(	O
cp	pointer
=	O
command_table	struct
;	O
cp	pointer
->	O
shortname	array
;	O
cp	pointer
++	O
)	O
{	O
int	O
ll	int
=	O
0	int
,	O
sl	struct
=	O
0	int
;	O
sl	struct
=	O
strlen	function
(	O
cp	pointer
->	O
shortname	array
)	O
;	O
ll	int
=	O
strlen	function
(	O
cp	pointer
->	O
longname	array
)	O
;	O
if	O
(	O
(	O
sl	struct
>	O
ll	int
&&	O
!	O
strncmp	function
(	O
cp	pointer
->	O
shortname	array
,	O
cmd	pointer
,	O
sl	struct
)	O
)	O
||	O
(	O
sl	struct
==	O
len	int
&&	O
!	O
strcmp	function
(	O
cp	pointer
->	O
shortname	array
,	O
cmd	pointer
)	O
)	O
||	O
(	O
sl	struct
<	O
len	int
&&	O
!	O
strncmp	function
(	O
cp	pointer
->	O
longname	array
,	O
cmd	pointer
,	O
len	int
)	O
)	O
)	O
return	O
cp	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
tsh_command	pointer
tsh_find_function	function
(	O
char	O
*	O
name	pointer
)	O
{	O
struct	O
command_table	struct
*	O
cp	pointer
;	O
if	O
(	O
name	pointer
[	O
0	int
]	O
==	O
'?'	O
&&	O
name	pointer
[	O
1	int
]	O
==	O
0	int
)	O
name	pointer
=	O
"help"	pointer
;	O
cp	pointer
=	O
tsh_find_entry	function
(	O
name	pointer
)	O
;	O
return	O
cp	pointer
?	O
cp	pointer
->	O
handler	pointer
:	O
NULL	O
;	O
}	O
static	O
void	O
tsh_run_function	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
cmd	pointer
)	O
{	O
tsh_command	pointer
fp	pointer
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
return	O
;	O
fp	pointer
=	O
tsh_find_function	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
fp	pointer
)	O
fp	pointer
(	O
argc	int
,	O
argv	pointer
,	O
cmd	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Bad command\n"	pointer
)	O
)	O
;	O
}	O
static	O
void	O
tsh_run_command	function
(	O
char	O
*	O
cmd	pointer
)	O
{	O
int	O
argc	int
=	O
0	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
while	O
(	O
*	O
cmd	pointer
&&	O
isspace	function
(	O
*	O
cmd	pointer
)	O
)	O
cmd	pointer
++	O
;	O
if	O
(	O
!	O
cmd	pointer
||	O
cmd	pointer
[	O
0	int
]	O
==	O
'#'	O
)	O
return	O
;	O
if	O
(	O
grad_argcv_get	function
(	O
cmd	pointer
,	O
"="	pointer
,	O
NULL	O
,	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
==	O
0	int
)	O
{	O
grad_add_history	function
(	O
cmd	pointer
)	O
;	O
tsh_run_function	function
(	O
argc	int
,	O
argv	pointer
,	O
cmd	pointer
)	O
;	O
}	O
grad_argcv_free	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
}	O
int	O
tsh	function
(	O
)	O
{	O
char	O
*	O
cmd	pointer
;	O
interactive	int
=	O
isatty	function
(	O
fileno	function
(	O
stdin	pointer
)	O
)	O
;	O
if	O
(	O
interactive	int
)	O
printf	function
(	O
"** TEST SHELL **\n"	pointer
)	O
;	O
grad_readline_init	function
(	O
"radiusd"	pointer
,	O
interactive	int
,	O
tsh_command_completion	O
)	O
;	O
grad_read_history_file	function
(	O
)	O
;	O
while	O
(	O
(	O
cmd	pointer
=	O
grad_readline	function
(	O
tsh_ps1	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
tsh_run_command	function
(	O
cmd	pointer
)	O
;	O
free	function
(	O
cmd	pointer
)	O
;	O
}	O
tsh_quit	function
(	O
0	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
