static	O
mu_list_t	pointer
implist	pointer
;	O
mu_url_t	pointer
mu_dbm_hint	pointer
;	O
static	O
void	O
_implist_free	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
mu_dbm_impl	struct
*	O
impl	pointer
=	O
p	pointer
;	O
free	function
(	O
impl	pointer
->	O
_dbm_name	pointer
)	O
;	O
free	function
(	O
impl	pointer
)	O
;	O
}	O
static	O
int	O
_implist_cmp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
struct	O
mu_dbm_impl	struct
const	O
*	O
ia	pointer
=	O
a	pointer
;	O
struct	O
mu_dbm_impl	struct
const	O
*	O
ib	pointer
=	O
b	pointer
;	O
return	O
strcmp	function
(	O
ia	pointer
->	O
_dbm_name	pointer
,	O
ib	pointer
->	O
_dbm_name	pointer
)	O
;	O
}	O
void	O
mu_dbm_init	function
(	O
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
implist	pointer
)	O
return	O
;	O
rc	int
=	O
mu_list_create	function
(	O
&	O
implist	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot initialize DBM subsystem: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
mu_list_set_destroy_item	function
(	O
implist	pointer
,	O
_implist_free	function
)	O
;	O
mu_list_set_comparator	function
(	O
implist	pointer
,	O
_implist_cmp	function
)	O
;	O
if	O
(	O
!	O
mu_dbm_hint	pointer
)	O
{	O
struct	O
mu_dbm_impl	struct
*	O
impl	pointer
;	O
if	O
(	O
(	O
rc	int
=	O
mu_list_get	function
(	O
implist	pointer
,	O
0	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
impl	pointer
)	O
)	O
||	O
(	O
rc	int
=	O
mu_url_create_null	function
(	O
&	O
mu_dbm_hint	pointer
)	O
)	O
||	O
(	O
rc	int
=	O
mu_url_set_scheme	function
(	O
mu_dbm_hint	pointer
,	O
impl	pointer
->	O
_dbm_name	pointer
)	O
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot initialize DBM hint: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
mu_url_t	pointer
mu_dbm_get_hint	function
(	O
)	O
{	O
mu_dbm_init	function
(	O
)	O
;	O
return	O
mu_dbm_hint	pointer
;	O
}	O
int	O
mu_dbm_register	function
(	O
struct	O
mu_dbm_impl	struct
*	O
impl	pointer
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_dbm_impl	struct
*	O
ptr	pointer
;	O
mu_dbm_init	function
(	O
)	O
;	O
ptr	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
ptr	pointer
)	O
)	O
;	O
if	O
(	O
!	O
ptr	pointer
)	O
return	O
ENOMEM	int
;	O
*	O
ptr	pointer
=	O
*	O
impl	pointer
;	O
ptr	pointer
->	O
_dbm_name	pointer
=	O
strdup	function
(	O
impl	pointer
->	O
_dbm_name	pointer
)	O
;	O
if	O
(	O
!	O
ptr	pointer
->	O
_dbm_name	pointer
)	O
{	O
free	function
(	O
ptr	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
rc	int
=	O
mu_list_append	function
(	O
implist	pointer
,	O
ptr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
_implist_free	function
(	O
ptr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_dbm_create_from_url	function
(	O
mu_url_t	pointer
url	pointer
,	O
mu_dbm_file_t	pointer
*	O
db	pointer
,	O
int	O
defsafety	int
)	O
{	O
mu_dbm_file_t	pointer
p	pointer
;	O
int	O
flags	int
;	O
int	O
rc	int
;	O
const	O
char	O
*	O
db_name	pointer
;	O
struct	O
mu_dbm_impl	struct
impl_key	struct
;	O
struct	O
mu_dbm_impl	struct
*	O
impl	pointer
;	O
struct	O
mu_auth_data	struct
*	O
auth	pointer
;	O
int	O
safety_flags	int
=	O
0	int
;	O
int	O
safety_flags_set	int
=	O
0	int
;	O
uid_t	int
owner_uid	int
=	O
getuid	function
(	O
)	O
;	O
mu_dbm_init	function
(	O
)	O
;	O
mu_url_get_flags	function
(	O
url	pointer
,	O
&	O
flags	int
)	O
;	O
if	O
(	O
(	O
flags	int
&	O
(	O
MU_URL_HOST	int
|	O
MU_URL_PATH	int
)	O
)	O
==	O
(	O
MU_URL_HOST	int
|	O
MU_URL_PATH	int
)	O
)	O
return	O
MU_ERR_URL_EXTRA_PARTS	O
;	O
if	O
(	O
flags	int
&	O
MU_URL_HOST	int
)	O
rc	int
=	O
mu_url_sget_host	function
(	O
url	pointer
,	O
&	O
db_name	pointer
)	O
;	O
else	O
rc	int
=	O
mu_url_sget_path	function
(	O
url	pointer
,	O
&	O
db_name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_url_sget_scheme	function
(	O
url	pointer
,	O
(	O
const	O
char	O
*	O
*	O
)	O
&	O
impl_key	struct
.	O
_dbm_name	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_locate	function
(	O
implist	pointer
,	O
(	O
void	O
*	O
)	O
&	O
impl_key	struct
,	O
(	O
void	O
*	O
*	O
)	O
&	O
impl	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
flags	int
&	O
MU_URL_PARAM	int
)	O
{	O
size_t	long
fvc	pointer
,	O
i	long
;	O
char	O
*	O
*	O
fvp	pointer
;	O
mu_url_sget_fvpairs	function
(	O
url	pointer
,	O
&	O
fvc	pointer
,	O
&	O
fvp	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fvc	pointer
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
name	pointer
=	O
fvp	pointer
[	O
i	long
]	O
;	O
int	O
negate	int
=	O
0	int
;	O
int	O
val	pointer
;	O
if	O
(	O
*	O
name	pointer
==	O
'-'	O
)	O
{	O
if	O
(	O
!	O
safety_flags_set	int
)	O
safety_flags	int
=	O
defsafety	int
;	O
negate	int
=	O
1	int
;	O
name	pointer
++	O
;	O
}	O
else	O
if	O
(	O
*	O
name	pointer
==	O
'+'	O
)	O
name	pointer
++	O
;	O
safety_flags_set	int
=	O
1	int
;	O
if	O
(	O
strncmp	function
(	O
name	pointer
,	O
"owner"	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
val	pointer
=	O
MU_FILE_SAFETY_OWNER_MISMATCH	int
;	O
if	O
(	O
name	pointer
[	O
5	int
]	O
==	O
'='	O
)	O
{	O
auth	pointer
=	O
mu_get_auth_by_name	function
(	O
name	pointer
+	O
6	int
)	O
;	O
if	O
(	O
auth	pointer
)	O
{	O
owner_uid	int
=	O
auth	pointer
->	O
uid	pointer
;	O
mu_auth_data_free	function
(	O
auth	pointer
)	O
;	O
}	O
else	O
{	O
char	O
*	O
end	struct
;	O
unsigned	O
long	O
uid	pointer
;	O
errno	O
=	O
0	int
;	O
uid	pointer
=	O
strtoul	function
(	O
name	pointer
+	O
6	int
,	O
&	O
end	struct
,	O
0	int
)	O
;	O
if	O
(	O
*	O
end	struct
||	O
errno	O
)	O
return	O
MU_ERR_NO_SUCH_USER	O
;	O
owner_uid	int
=	O
uid	pointer
;	O
}	O
}	O
else	O
if	O
(	O
name	pointer
[	O
5	int
]	O
)	O
return	O
MU_ERR_URL_INVALID_PARAMETER	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"none"	pointer
)	O
==	O
0	int
)	O
{	O
safety_flags	int
=	O
negate	int
?	O
MU_FILE_SAFETY_ALL	O
:	O
MU_FILE_SAFETY_NONE	int
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"all"	pointer
)	O
==	O
0	int
)	O
{	O
safety_flags	int
=	O
negate	int
?	O
MU_FILE_SAFETY_NONE	int
:	O
MU_FILE_SAFETY_ALL	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"default"	pointer
)	O
==	O
0	int
)	O
{	O
val	pointer
=	O
defsafety	int
;	O
}	O
else	O
if	O
(	O
mu_file_safety_name_to_code	function
(	O
name	pointer
,	O
&	O
val	pointer
)	O
)	O
return	O
MU_ERR_URL_INVALID_PARAMETER	O
;	O
if	O
(	O
negate	int
)	O
safety_flags	int
&=	O
~	O
val	pointer
;	O
else	O
safety_flags	int
|=	O
val	pointer
;	O
}	O
}	O
p	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
return	O
ENOMEM	int
;	O
p	pointer
->	O
db_name	pointer
=	O
strdup	function
(	O
db_name	pointer
)	O
;	O
if	O
(	O
!	O
p	pointer
->	O
db_name	pointer
)	O
{	O
free	function
(	O
p	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
p	pointer
->	O
db_safety_flags	int
=	O
safety_flags_set	int
?	O
safety_flags	int
:	O
defsafety	int
;	O
p	pointer
->	O
db_owner	int
=	O
owner_uid	int
;	O
p	pointer
->	O
db_sys	pointer
=	O
impl	pointer
;	O
*	O
db	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_dbm_impl_iterator	function
(	O
mu_iterator_t	pointer
*	O
itr	pointer
)	O
{	O
mu_dbm_init	function
(	O
)	O
;	O
return	O
mu_list_get_iterator	function
(	O
implist	pointer
,	O
itr	pointer
)	O
;	O
}	O
