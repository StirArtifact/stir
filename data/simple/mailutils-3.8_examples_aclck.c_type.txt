struct	O
mu_sockaddr	struct
*	O
target_sa	pointer
;	O
mu_acl_t	pointer
acl	pointer
;	O
void	O
read_rules	function
(	O
FILE	struct
*	O
fp	pointer
)	O
{	O
char	O
buf	pointer
[	O
512	int
]	O
;	O
int	O
line	pointer
=	O
0	int
;	O
int	O
wsflags	int
=	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_COMMENT	O
;	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_acl_create	function
(	O
&	O
acl	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"cannot create acl: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
ws	pointer
.	O
ws_comment	pointer
=	O
"#"	pointer
;	O
while	O
(	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
fp	pointer
)	O
)	O
{	O
struct	O
mu_cidr	struct
cidr	pointer
;	O
mu_acl_action_t	enum
action	pointer
;	O
void	O
*	O
data	pointer
=	O
NULL	O
;	O
int	O
len	long
=	O
strlen	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
buf	pointer
[	O
len	long
-	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
mu_error	function
(	O
"%d: line too long"	pointer
,	O
line	pointer
)	O
;	O
continue	O
;	O
}	O
buf	pointer
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
line	pointer
++	O
;	O
if	O
(	O
buf	pointer
[	O
0	int
]	O
==	O
'#'	O
)	O
continue	O
;	O
if	O
(	O
mu_wordsplit	struct
(	O
buf	pointer
,	O
&	O
ws	pointer
,	O
wsflags	int
)	O
)	O
{	O
mu_error	function
(	O
"cannot split line `%s': %s"	pointer
,	O
buf	pointer
,	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
continue	O
;	O
}	O
wsflags	int
|=	O
MU_WRDSF_REUSE	O
;	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
<	O
2	int
)	O
{	O
mu_error	function
(	O
"%d: invalid input"	pointer
,	O
line	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
1	int
]	O
,	O
"any"	pointer
)	O
==	O
0	int
)	O
memset	function
(	O
&	O
cidr	pointer
,	O
0	int
,	O
sizeof	O
(	O
cidr	pointer
)	O
)	O
;	O
else	O
{	O
rc	int
=	O
mu_cidr_from_string	function
(	O
&	O
cidr	pointer
,	O
ws	pointer
.	O
ws_wordv	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"%d: invalid source CIDR: %s"	pointer
,	O
line	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
mu_acl_string_to_action	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
0	int
]	O
,	O
&	O
action	pointer
)	O
)	O
{	O
mu_error	function
(	O
"%d: invalid command"	pointer
,	O
line	pointer
)	O
;	O
continue	O
;	O
}	O
rc	int
=	O
0	int
;	O
switch	O
(	O
action	pointer
)	O
{	O
case	O
mu_acl_accept	int
:	O
case	O
mu_acl_deny	int
:	O
break	O
;	O
case	O
mu_acl_log	int
:	O
case	O
mu_acl_exec	int
:	O
case	O
mu_acl_ifexec	int
:	O
data	pointer
=	O
strdup	function
(	O
ws	pointer
.	O
ws_wordv	pointer
[	O
2	int
]	O
)	O
;	O
if	O
(	O
!	O
data	pointer
)	O
{	O
rc	int
=	O
ENOMEM	int
;	O
mu_error	function
(	O
"%d: %s"	pointer
,	O
line	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_acl_append	function
(	O
acl	pointer
,	O
action	pointer
,	O
data	pointer
,	O
&	O
cidr	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
"%d: cannot append acl entry: %s"	pointer
,	O
line	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
}	O
}	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
rc	int
;	O
FILE	struct
*	O
file	pointer
=	O
NULL	O
;	O
mu_acl_result_t	enum
result	pointer
;	O
mu_set_program_name	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
while	O
(	O
(	O
rc	int
=	O
getopt	function
(	O
argc	long
,	O
argv	pointer
,	O
"Dd:a:f:"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
rc	int
)	O
{	O
case	O
'D'	O
:	O
mu_debug_line_info	int
=	O
1	int
;	O
break	O
;	O
case	O
'd'	O
:	O
mu_debug_parse_spec	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'a'	O
:	O
rc	int
=	O
mu_sockaddr_from_node	function
(	O
&	O
target_sa	pointer
,	O
optarg	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"mu_sockaddr_from_node: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'f'	O
:	O
file	pointer
=	O
fopen	function
(	O
optarg	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
file	pointer
==	O
0	int
)	O
{	O
mu_error	function
(	O
"cannot open file %s: %s"	pointer
,	O
optarg	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
argv	pointer
+=	O
optind	int
;	O
argc	long
-=	O
optind	int
;	O
read_rules	function
(	O
file	pointer
?	O
file	pointer
:	O
stdin	pointer
)	O
;	O
rc	int
=	O
mu_acl_check_sockaddr	function
(	O
acl	pointer
,	O
target_sa	pointer
->	O
addr	int
,	O
target_sa	pointer
->	O
addrlen	int
,	O
&	O
result	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	function
(	O
"mu_acl_check_sockaddr failed: %s"	pointer
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
switch	O
(	O
result	pointer
)	O
{	O
case	O
mu_acl_result_undefined	int
:	O
puts	function
(	O
"undefined"	pointer
)	O
;	O
break	O
;	O
case	O
mu_acl_result_accept	int
:	O
puts	function
(	O
"accept"	pointer
)	O
;	O
break	O
;	O
case	O
mu_acl_result_deny	int
:	O
puts	function
(	O
"deny"	pointer
)	O
;	O
break	O
;	O
}	O
exit	function
(	O
0	int
)	O
;	O
}	O
