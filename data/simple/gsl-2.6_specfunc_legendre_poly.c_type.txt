static	O
double	O
legendre_Pmm	function
(	O
int	O
m	int
,	O
double	O
x	double
)	O
{	O
if	O
(	O
m	int
==	O
0	int
)	O
{	O
return	O
1.0	int
;	O
}	O
else	O
{	O
double	O
p_mm	double
=	O
1.0	int
;	O
double	O
root_factor	double
=	O
sqrt	function
(	O
1.0	int
-	O
x	double
)	O
*	O
sqrt	function
(	O
1.0	int
+	O
x	double
)	O
;	O
double	O
fact_coeff	double
=	O
1.0	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
m	int
;	O
i	int
++	O
)	O
{	O
p_mm	double
*=	O
-	O
fact_coeff	double
*	O
root_factor	double
;	O
fact_coeff	double
+=	O
2.0	int
;	O
}	O
return	O
p_mm	double
;	O
}	O
}	O
int	O
gsl_sf_legendre_P1_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
{	O
result	pointer
->	O
val	double
=	O
x	double
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_legendre_P2_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
{	O
result	pointer
->	O
val	double
=	O
0.5	int
*	O
(	O
3.0	int
*	O
x	double
*	O
x	double
-	O
1.0	int
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
3.0	int
*	O
x	double
*	O
x	double
)	O
+	O
1.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_legendre_P3_e	function
(	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
{	O
result	pointer
->	O
val	double
=	O
0.5	int
*	O
x	double
*	O
(	O
5.0	int
*	O
x	double
*	O
x	double
-	O
3.0	int
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
+	O
0.5	int
*	O
fabs	function
(	O
x	double
)	O
*	O
(	O
fabs	function
(	O
5.0	int
*	O
x	double
*	O
x	double
)	O
+	O
3.0	int
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_legendre_Pl_e	function
(	O
const	O
int	O
l	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
l	int
<	O
0	int
||	O
x	double
<	O
-	O
1.0	int
||	O
x	double
>	O
1.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
l	int
==	O
0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
l	int
==	O
1	int
)	O
{	O
result	pointer
->	O
val	double
=	O
x	double
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
l	int
==	O
2	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.5	int
*	O
(	O
3.0	int
*	O
x	double
*	O
x	double
-	O
1.0	int
)	O
;	O
result	pointer
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	function
(	O
3.0	int
*	O
x	double
*	O
x	double
)	O
+	O
1.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
==	O
1.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
1.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
==	O
-	O
1.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
(	O
GSL_IS_ODD	O
(	O
l	int
)	O
?	O
-	O
1.0	int
:	O
1.0	int
)	O
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
l	int
<	O
100000	int
)	O
{	O
double	O
p_ellm2	double
=	O
1.0	int
;	O
double	O
p_ellm1	double
=	O
x	double
;	O
double	O
p_ell	double
=	O
p_ellm1	double
;	O
double	O
e_ellm2	double
=	O
GSL_DBL_EPSILON	int
;	O
double	O
e_ellm1	double
=	O
fabs	function
(	O
x	double
)	O
*	O
GSL_DBL_EPSILON	int
;	O
double	O
e_ell	double
=	O
e_ellm1	double
;	O
int	O
ell	int
;	O
for	O
(	O
ell	int
=	O
2	int
;	O
ell	int
<=	O
l	int
;	O
ell	int
++	O
)	O
{	O
p_ell	double
=	O
(	O
x	double
*	O
(	O
2	int
*	O
ell	int
-	O
1	int
)	O
*	O
p_ellm1	double
-	O
(	O
ell	int
-	O
1	int
)	O
*	O
p_ellm2	double
)	O
/	O
ell	int
;	O
p_ellm2	double
=	O
p_ellm1	double
;	O
p_ellm1	double
=	O
p_ell	double
;	O
e_ell	double
=	O
0.5	int
*	O
(	O
fabs	function
(	O
x	double
)	O
*	O
(	O
2	int
*	O
ell	int
-	O
1.0	int
)	O
*	O
e_ellm1	double
+	O
(	O
ell	int
-	O
1.0	int
)	O
*	O
e_ellm2	double
)	O
/	O
ell	int
;	O
e_ellm2	double
=	O
e_ellm1	double
;	O
e_ellm1	double
=	O
e_ell	double
;	O
}	O
result	pointer
->	O
val	double
=	O
p_ell	double
;	O
result	pointer
->	O
err	double
=	O
e_ell	double
+	O
l	int
*	O
fabs	function
(	O
p_ell	double
)	O
*	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
u	double
=	O
l	int
+	O
0.5	int
;	O
double	O
th	double
=	O
acos	function
(	O
x	double
)	O
;	O
gsl_sf_result	struct
J0	struct
;	O
gsl_sf_result	struct
Jm1	struct
;	O
int	O
stat_J0	int
=	O
gsl_sf_bessel_J0_e	function
(	O
u	double
*	O
th	double
,	O
&	O
J0	struct
)	O
;	O
int	O
stat_Jm1	int
=	O
gsl_sf_bessel_Jn_e	function
(	O
-	O
1	int
,	O
u	double
*	O
th	double
,	O
&	O
Jm1	struct
)	O
;	O
double	O
pre	double
;	O
double	O
B00	double
;	O
double	O
c1	double
;	O
if	O
(	O
th	double
<	O
GSL_ROOT4_DBL_EPSILON	int
)	O
{	O
B00	double
=	O
(	O
1.0	int
+	O
th	double
*	O
th	double
/	O
15.0	int
)	O
/	O
24.0	int
;	O
pre	double
=	O
1.0	int
+	O
th	double
*	O
th	double
/	O
12.0	int
;	O
}	O
else	O
{	O
double	O
sin_th	double
=	O
sqrt	function
(	O
1.0	int
-	O
x	double
*	O
x	double
)	O
;	O
double	O
cot_th	double
=	O
x	double
/	O
sin_th	double
;	O
B00	double
=	O
1.0	int
/	O
8.0	int
*	O
(	O
1.0	int
-	O
th	double
*	O
cot_th	double
)	O
/	O
(	O
th	double
*	O
th	double
)	O
;	O
pre	double
=	O
sqrt	function
(	O
th	double
/	O
sin_th	double
)	O
;	O
}	O
c1	double
=	O
th	double
/	O
u	double
*	O
B00	double
;	O
result	pointer
->	O
val	double
=	O
pre	double
*	O
(	O
J0	struct
.	O
val	double
+	O
c1	double
*	O
Jm1	struct
.	O
val	double
)	O
;	O
result	pointer
->	O
err	double
=	O
pre	double
*	O
(	O
J0	struct
.	O
err	double
+	O
fabs	function
(	O
c1	double
)	O
*	O
Jm1	struct
.	O
err	double
)	O
;	O
result	pointer
->	O
err	double
+=	O
GSL_SQRT_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_J0	int
,	O
stat_Jm1	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_legendre_Pl_array	function
(	O
const	O
int	O
lmax	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
)	O
{	O
if	O
(	O
lmax	int
<	O
0	int
||	O
x	double
<	O
-	O
1.0	int
||	O
x	double
>	O
1.0	int
)	O
{	O
GSL_ERROR	O
(	O
"domain error"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
lmax	int
==	O
0	int
)	O
{	O
result_array	pointer
[	O
0	int
]	O
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
lmax	int
==	O
1	int
)	O
{	O
result_array	pointer
[	O
0	int
]	O
=	O
1.0	int
;	O
result_array	pointer
[	O
1	int
]	O
=	O
x	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
p_ellm2	double
=	O
1.0	int
;	O
double	O
p_ellm1	double
=	O
x	double
;	O
double	O
p_ell	double
=	O
p_ellm1	double
;	O
int	O
ell	int
;	O
result_array	pointer
[	O
0	int
]	O
=	O
1.0	int
;	O
result_array	pointer
[	O
1	int
]	O
=	O
x	double
;	O
for	O
(	O
ell	int
=	O
2	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
p_ell	double
=	O
(	O
x	double
*	O
(	O
2	int
*	O
ell	int
-	O
1	int
)	O
*	O
p_ellm1	double
-	O
(	O
ell	int
-	O
1	int
)	O
*	O
p_ellm2	double
)	O
/	O
ell	int
;	O
p_ellm2	double
=	O
p_ellm1	double
;	O
p_ellm1	double
=	O
p_ell	double
;	O
result_array	pointer
[	O
ell	int
]	O
=	O
p_ell	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_legendre_Pl_deriv_array	function
(	O
const	O
int	O
lmax	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
,	O
double	O
*	O
result_deriv_array	pointer
)	O
{	O
int	O
stat_array	int
=	O
gsl_sf_legendre_Pl_array	function
(	O
lmax	int
,	O
x	double
,	O
result_array	pointer
)	O
;	O
if	O
(	O
lmax	int
>=	O
0	int
)	O
result_deriv_array	pointer
[	O
0	int
]	O
=	O
0.0	int
;	O
if	O
(	O
lmax	int
>=	O
1	int
)	O
result_deriv_array	pointer
[	O
1	int
]	O
=	O
1.0	int
;	O
if	O
(	O
stat_array	int
==	O
GSL_SUCCESS	int
)	O
{	O
int	O
ell	int
;	O
if	O
(	O
fabs	function
(	O
x	double
-	O
1.0	int
)	O
*	O
(	O
lmax	int
+	O
1.0	int
)	O
*	O
(	O
lmax	int
+	O
1.0	int
)	O
<	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
for	O
(	O
ell	int
=	O
2	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
const	O
double	O
pre	double
=	O
0.5	int
*	O
ell	int
*	O
(	O
ell	int
+	O
1.0	int
)	O
;	O
result_deriv_array	pointer
[	O
ell	int
]	O
=	O
pre	double
*	O
(	O
1.0	int
-	O
0.25	int
*	O
(	O
1.0	int
-	O
x	double
)	O
*	O
(	O
ell	int
+	O
2.0	int
)	O
*	O
(	O
ell	int
-	O
1.0	int
)	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
+	O
1.0	int
)	O
*	O
(	O
lmax	int
+	O
1.0	int
)	O
*	O
(	O
lmax	int
+	O
1.0	int
)	O
<	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
for	O
(	O
ell	int
=	O
2	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
const	O
double	O
sgn	pointer
=	O
(	O
GSL_IS_ODD	O
(	O
ell	int
)	O
?	O
1.0	int
:	O
-	O
1.0	int
)	O
;	O
const	O
double	O
pre	double
=	O
sgn	pointer
*	O
0.5	int
*	O
ell	int
*	O
(	O
ell	int
+	O
1.0	int
)	O
;	O
result_deriv_array	pointer
[	O
ell	int
]	O
=	O
pre	double
*	O
(	O
1.0	int
-	O
0.25	int
*	O
(	O
1.0	int
+	O
x	double
)	O
*	O
(	O
ell	int
+	O
2.0	int
)	O
*	O
(	O
ell	int
-	O
1.0	int
)	O
)	O
;	O
}	O
}	O
else	O
{	O
const	O
double	O
diff_a	double
=	O
1.0	int
+	O
x	double
;	O
const	O
double	O
diff_b	double
=	O
1.0	int
-	O
x	double
;	O
for	O
(	O
ell	int
=	O
2	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
result_deriv_array	pointer
[	O
ell	int
]	O
=	O
-	O
ell	int
*	O
(	O
x	double
*	O
result_array	pointer
[	O
ell	int
]	O
-	O
result_array	pointer
[	O
ell	int
-	O
1	int
]	O
)	O
/	O
(	O
diff_a	double
*	O
diff_b	double
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
return	O
stat_array	int
;	O
}	O
}	O
int	O
gsl_sf_legendre_Plm_e	function
(	O
const	O
int	O
l	int
,	O
const	O
int	O
m	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
const	O
double	O
dif	double
=	O
l	int
-	O
m	int
;	O
const	O
double	O
sum	double
=	O
l	int
+	O
m	int
;	O
const	O
double	O
t_d	double
=	O
(	O
dif	double
==	O
0.0	int
?	O
0.0	int
:	O
0.5	int
*	O
dif	double
*	O
(	O
log	function
(	O
dif	double
)	O
-	O
1.0	int
)	O
)	O
;	O
const	O
double	O
t_s	double
=	O
(	O
dif	double
==	O
0.0	int
?	O
0.0	int
:	O
0.5	int
*	O
sum	double
*	O
(	O
log	function
(	O
sum	double
)	O
-	O
1.0	int
)	O
)	O
;	O
const	O
double	O
exp_check	double
=	O
0.5	int
*	O
log	function
(	O
2.0	int
*	O
l	int
+	O
1.0	int
)	O
+	O
t_d	double
-	O
t_s	double
;	O
if	O
(	O
m	int
<	O
0	int
||	O
l	int
<	O
m	int
||	O
x	double
<	O
-	O
1.0	int
||	O
x	double
>	O
1.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
exp_check	double
<	O
GSL_LOG_DBL_MIN	O
+	O
10.0	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
{	O
const	O
double	O
err_amp	double
=	O
1.0	int
/	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	function
(	O
1.0	int
-	O
fabs	function
(	O
x	double
)	O
)	O
)	O
;	O
double	O
p_mm	double
=	O
legendre_Pmm	function
(	O
m	int
,	O
x	double
)	O
;	O
double	O
p_mmp1	double
=	O
x	double
*	O
(	O
2	int
*	O
m	int
+	O
1	int
)	O
*	O
p_mm	double
;	O
if	O
(	O
l	int
==	O
m	int
)	O
{	O
result	pointer
->	O
val	double
=	O
p_mm	double
;	O
result	pointer
->	O
err	double
=	O
err_amp	double
*	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
p_mm	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
l	int
==	O
m	int
+	O
1	int
)	O
{	O
result	pointer
->	O
val	double
=	O
p_mmp1	double
;	O
result	pointer
->	O
err	double
=	O
err_amp	double
*	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
p_mmp1	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
p_ellm2	double
=	O
p_mm	double
;	O
double	O
p_ellm1	double
=	O
p_mmp1	double
;	O
double	O
p_ell	double
=	O
0.0	int
;	O
int	O
ell	int
;	O
for	O
(	O
ell	int
=	O
m	int
+	O
2	int
;	O
ell	int
<=	O
l	int
;	O
ell	int
++	O
)	O
{	O
p_ell	double
=	O
(	O
x	double
*	O
(	O
2	int
*	O
ell	int
-	O
1	int
)	O
*	O
p_ellm1	double
-	O
(	O
ell	int
+	O
m	int
-	O
1	int
)	O
*	O
p_ellm2	double
)	O
/	O
(	O
ell	int
-	O
m	int
)	O
;	O
p_ellm2	double
=	O
p_ellm1	double
;	O
p_ellm1	double
=	O
p_ell	double
;	O
}	O
result	pointer
->	O
val	double
=	O
p_ell	double
;	O
result	pointer
->	O
err	double
=	O
err_amp	double
*	O
(	O
0.5	int
*	O
(	O
l	int
-	O
m	int
)	O
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
p_ell	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_legendre_sphPlm_e	function
(	O
const	O
int	O
l	int
,	O
int	O
m	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct
*	O
result	pointer
)	O
{	O
if	O
(	O
m	int
<	O
0	int
||	O
l	int
<	O
m	int
||	O
x	double
<	O
-	O
1.0	int
||	O
x	double
>	O
1.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	pointer
)	O
;	O
}	O
else	O
if	O
(	O
m	int
==	O
0	int
)	O
{	O
gsl_sf_result	struct
P	struct
;	O
int	O
stat_P	int
=	O
gsl_sf_legendre_Pl_e	function
(	O
l	int
,	O
x	double
,	O
&	O
P	struct
)	O
;	O
double	O
pre	double
=	O
sqrt	function
(	O
(	O
2.0	int
*	O
l	int
+	O
1.0	int
)	O
/	O
(	O
4.0	int
*	O
M_PI	int
)	O
)	O
;	O
result	pointer
->	O
val	double
=	O
pre	double
*	O
P	struct
.	O
val	double
;	O
result	pointer
->	O
err	double
=	O
pre	double
*	O
P	struct
.	O
err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
result	pointer
->	O
val	double
)	O
;	O
return	O
stat_P	int
;	O
}	O
else	O
if	O
(	O
x	double
==	O
1.0	int
||	O
x	double
==	O
-	O
1.0	int
)	O
{	O
result	pointer
->	O
val	double
=	O
0.0	int
;	O
result	pointer
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct
lncirc	struct
;	O
gsl_sf_result	struct
lnpoch	struct
;	O
double	O
lnpre_val	double
;	O
double	O
lnpre_err	double
;	O
gsl_sf_result	struct
ex_pre	struct
;	O
double	O
sr	double
;	O
const	O
double	O
sgn	pointer
=	O
(	O
GSL_IS_ODD	O
(	O
m	int
)	O
?	O
-	O
1.0	int
:	O
1.0	int
)	O
;	O
const	O
double	O
y_mmp1_factor	double
=	O
x	double
*	O
sqrt	function
(	O
2.0	int
*	O
m	int
+	O
3.0	int
)	O
;	O
double	O
y_mm	double
,	O
y_mm_err	double
;	O
double	O
y_mmp1	double
,	O
y_mmp1_err	double
;	O
gsl_sf_log_1plusx_e	function
(	O
-	O
x	double
*	O
x	double
,	O
&	O
lncirc	struct
)	O
;	O
gsl_sf_lnpoch_e	function
(	O
m	int
,	O
0.5	int
,	O
&	O
lnpoch	struct
)	O
;	O
lnpre_val	double
=	O
-	O
0.25	int
*	O
M_LNPI	int
+	O
0.5	int
*	O
(	O
lnpoch	struct
.	O
val	double
+	O
m	int
*	O
lncirc	struct
.	O
val	double
)	O
;	O
lnpre_err	double
=	O
0.25	int
*	O
M_LNPI	int
*	O
GSL_DBL_EPSILON	int
+	O
0.5	int
*	O
(	O
lnpoch	struct
.	O
err	double
+	O
fabs	function
(	O
m	int
)	O
*	O
lncirc	struct
.	O
err	double
)	O
;	O
ex_pre	struct
.	O
val	double
=	O
exp	function
(	O
lnpre_val	double
)	O
;	O
ex_pre	struct
.	O
err	double
=	O
2.0	int
*	O
(	O
sinh	function
(	O
lnpre_err	double
)	O
+	O
GSL_DBL_EPSILON	int
)	O
*	O
ex_pre	struct
.	O
val	double
;	O
sr	double
=	O
sqrt	function
(	O
(	O
2.0	int
+	O
1.0	int
/	O
m	int
)	O
/	O
(	O
4.0	int
*	O
M_PI	int
)	O
)	O
;	O
y_mm	double
=	O
sgn	pointer
*	O
sr	double
*	O
ex_pre	struct
.	O
val	double
;	O
y_mm_err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
y_mm	double
)	O
+	O
sr	double
*	O
ex_pre	struct
.	O
err	double
;	O
y_mm_err	double
*=	O
1.0	int
+	O
1.0	int
/	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	function
(	O
1.0	int
-	O
x	double
)	O
)	O
;	O
y_mmp1	double
=	O
y_mmp1_factor	double
*	O
y_mm	double
;	O
y_mmp1_err	double
=	O
fabs	function
(	O
y_mmp1_factor	double
)	O
*	O
y_mm_err	double
;	O
if	O
(	O
l	int
==	O
m	int
)	O
{	O
result	pointer
->	O
val	double
=	O
y_mm	double
;	O
result	pointer
->	O
err	double
=	O
y_mm_err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
y_mm	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
l	int
==	O
m	int
+	O
1	int
)	O
{	O
result	pointer
->	O
val	double
=	O
y_mmp1	double
;	O
result	pointer
->	O
err	double
=	O
y_mmp1_err	double
;	O
result	pointer
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
y_mmp1	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
y_ell	double
=	O
0.0	int
;	O
double	O
y_ell_err	double
=	O
0.0	int
;	O
int	O
ell	int
;	O
for	O
(	O
ell	int
=	O
m	int
+	O
2	int
;	O
ell	int
<=	O
l	int
;	O
ell	int
++	O
)	O
{	O
const	O
double	O
rat1	double
=	O
(	O
double	O
)	O
(	O
ell	int
-	O
m	int
)	O
/	O
(	O
double	O
)	O
(	O
ell	int
+	O
m	int
)	O
;	O
const	O
double	O
rat2	double
=	O
(	O
ell	int
-	O
m	int
-	O
1.0	int
)	O
/	O
(	O
ell	int
+	O
m	int
-	O
1.0	int
)	O
;	O
const	O
double	O
factor1	double
=	O
sqrt	function
(	O
rat1	double
*	O
(	O
2.0	int
*	O
ell	int
+	O
1.0	int
)	O
*	O
(	O
2.0	int
*	O
ell	int
-	O
1.0	int
)	O
)	O
;	O
const	O
double	O
factor2	double
=	O
sqrt	function
(	O
rat1	double
*	O
rat2	double
*	O
(	O
2.0	int
*	O
ell	int
+	O
1.0	int
)	O
/	O
(	O
2.0	int
*	O
ell	int
-	O
3.0	int
)	O
)	O
;	O
y_ell	double
=	O
(	O
x	double
*	O
y_mmp1	double
*	O
factor1	double
-	O
(	O
ell	int
+	O
m	int
-	O
1.0	int
)	O
*	O
y_mm	double
*	O
factor2	double
)	O
/	O
(	O
ell	int
-	O
m	int
)	O
;	O
y_mm	double
=	O
y_mmp1	double
;	O
y_mmp1	double
=	O
y_ell	double
;	O
y_ell_err	double
=	O
0.5	int
*	O
(	O
fabs	function
(	O
x	double
*	O
factor1	double
)	O
*	O
y_mmp1_err	double
+	O
fabs	function
(	O
(	O
ell	int
+	O
m	int
-	O
1.0	int
)	O
*	O
factor2	double
)	O
*	O
y_mm_err	double
)	O
/	O
fabs	function
(	O
ell	int
-	O
m	int
)	O
;	O
y_mm_err	double
=	O
y_mmp1_err	double
;	O
y_mmp1_err	double
=	O
y_ell_err	double
;	O
}	O
result	pointer
->	O
val	double
=	O
y_ell	double
;	O
result	pointer
->	O
err	double
=	O
y_ell_err	double
+	O
(	O
0.5	int
*	O
(	O
l	int
-	O
m	int
)	O
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	function
(	O
y_ell	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_legendre_Plm_array	function
(	O
const	O
int	O
lmax	int
,	O
const	O
int	O
m	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
)	O
{	O
const	O
double	O
dif	double
=	O
lmax	int
-	O
m	int
;	O
const	O
double	O
sum	double
=	O
lmax	int
+	O
m	int
;	O
const	O
double	O
t_d	double
=	O
(	O
dif	double
==	O
0.0	int
?	O
0.0	int
:	O
0.5	int
*	O
dif	double
*	O
(	O
log	function
(	O
dif	double
)	O
-	O
1.0	int
)	O
)	O
;	O
const	O
double	O
t_s	double
=	O
(	O
dif	double
==	O
0.0	int
?	O
0.0	int
:	O
0.5	int
*	O
sum	double
*	O
(	O
log	function
(	O
sum	double
)	O
-	O
1.0	int
)	O
)	O
;	O
const	O
double	O
exp_check	double
=	O
0.5	int
*	O
log	function
(	O
2.0	int
*	O
lmax	int
+	O
1.0	int
)	O
+	O
t_d	double
-	O
t_s	double
;	O
if	O
(	O
m	int
<	O
0	int
||	O
lmax	int
<	O
m	int
||	O
x	double
<	O
-	O
1.0	int
||	O
x	double
>	O
1.0	int
)	O
{	O
GSL_ERROR	O
(	O
"domain error"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
m	int
>	O
0	int
&&	O
(	O
x	double
==	O
1.0	int
||	O
x	double
==	O
-	O
1.0	int
)	O
)	O
{	O
int	O
ell	int
;	O
for	O
(	O
ell	int
=	O
m	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
result_array	pointer
[	O
ell	int
-	O
m	int
]	O
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
exp_check	double
<	O
GSL_LOG_DBL_MIN	O
+	O
10.0	int
)	O
{	O
GSL_ERROR	O
(	O
"overflow"	pointer
,	O
GSL_EOVRFLW	int
)	O
;	O
}	O
else	O
{	O
double	O
p_mm	double
=	O
legendre_Pmm	function
(	O
m	int
,	O
x	double
)	O
;	O
double	O
p_mmp1	double
=	O
x	double
*	O
(	O
2.0	int
*	O
m	int
+	O
1.0	int
)	O
*	O
p_mm	double
;	O
if	O
(	O
lmax	int
==	O
m	int
)	O
{	O
result_array	pointer
[	O
0	int
]	O
=	O
p_mm	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
lmax	int
==	O
m	int
+	O
1	int
)	O
{	O
result_array	pointer
[	O
0	int
]	O
=	O
p_mm	double
;	O
result_array	pointer
[	O
1	int
]	O
=	O
p_mmp1	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
p_ellm2	double
=	O
p_mm	double
;	O
double	O
p_ellm1	double
=	O
p_mmp1	double
;	O
double	O
p_ell	double
=	O
0.0	int
;	O
int	O
ell	int
;	O
result_array	pointer
[	O
0	int
]	O
=	O
p_mm	double
;	O
result_array	pointer
[	O
1	int
]	O
=	O
p_mmp1	double
;	O
for	O
(	O
ell	int
=	O
m	int
+	O
2	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
p_ell	double
=	O
(	O
x	double
*	O
(	O
2.0	int
*	O
ell	int
-	O
1.0	int
)	O
*	O
p_ellm1	double
-	O
(	O
ell	int
+	O
m	int
-	O
1	int
)	O
*	O
p_ellm2	double
)	O
/	O
(	O
ell	int
-	O
m	int
)	O
;	O
p_ellm2	double
=	O
p_ellm1	double
;	O
p_ellm1	double
=	O
p_ell	double
;	O
result_array	pointer
[	O
ell	int
-	O
m	int
]	O
=	O
p_ell	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_legendre_Plm_deriv_array	function
(	O
const	O
int	O
lmax	int
,	O
const	O
int	O
m	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
,	O
double	O
*	O
result_deriv_array	pointer
)	O
{	O
if	O
(	O
m	int
<	O
0	int
||	O
m	int
>	O
lmax	int
)	O
{	O
GSL_ERROR	O
(	O
"m < 0 or m > lmax"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
m	int
==	O
0	int
)	O
{	O
return	O
gsl_sf_legendre_Pl_deriv_array	function
(	O
lmax	int
,	O
x	double
,	O
result_array	pointer
,	O
result_deriv_array	pointer
)	O
;	O
}	O
else	O
{	O
int	O
stat_array	int
=	O
gsl_sf_legendre_Plm_array	function
(	O
lmax	int
,	O
m	int
,	O
x	double
,	O
result_array	pointer
)	O
;	O
if	O
(	O
stat_array	int
==	O
GSL_SUCCESS	int
)	O
{	O
int	O
ell	int
;	O
if	O
(	O
m	int
==	O
1	int
&&	O
(	O
1.0	int
-	O
fabs	function
(	O
x	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"divergence near |x| = 1.0 since m = 1"	pointer
,	O
GSL_EOVRFLW	int
)	O
;	O
}	O
else	O
if	O
(	O
m	int
==	O
2	int
&&	O
(	O
1.0	int
-	O
fabs	function
(	O
x	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
)	O
{	O
if	O
(	O
fabs	function
(	O
x	double
-	O
1.0	int
)	O
<	O
GSL_DBL_EPSILON	int
)	O
{	O
for	O
(	O
ell	int
=	O
m	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
result_deriv_array	pointer
[	O
ell	int
-	O
m	int
]	O
=	O
-	O
0.25	int
*	O
x	double
*	O
(	O
ell	int
-	O
1.0	int
)	O
*	O
ell	int
*	O
(	O
ell	int
+	O
1.0	int
)	O
*	O
(	O
ell	int
+	O
2.0	int
)	O
;	O
}	O
else	O
if	O
(	O
fabs	function
(	O
x	double
+	O
1.0	int
)	O
<	O
GSL_DBL_EPSILON	int
)	O
{	O
for	O
(	O
ell	int
=	O
m	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
const	O
double	O
sgn	pointer
=	O
(	O
GSL_IS_ODD	O
(	O
ell	int
)	O
?	O
1.0	int
:	O
-	O
1.0	int
)	O
;	O
result_deriv_array	pointer
[	O
ell	int
-	O
m	int
]	O
=	O
-	O
0.25	int
*	O
sgn	pointer
*	O
x	double
*	O
(	O
ell	int
-	O
1.0	int
)	O
*	O
ell	int
*	O
(	O
ell	int
+	O
1.0	int
)	O
*	O
(	O
ell	int
+	O
2.0	int
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
if	O
(	O
1.0	int
-	O
fabs	function
(	O
x	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
{	O
for	O
(	O
ell	int
=	O
m	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
result_deriv_array	pointer
[	O
ell	int
-	O
m	int
]	O
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
diff_a	double
=	O
1.0	int
+	O
x	double
;	O
const	O
double	O
diff_b	double
=	O
1.0	int
-	O
x	double
;	O
result_deriv_array	pointer
[	O
0	int
]	O
=	O
-	O
m	int
*	O
x	double
/	O
(	O
diff_a	double
*	O
diff_b	double
)	O
*	O
result_array	pointer
[	O
0	int
]	O
;	O
if	O
(	O
lmax	int
-	O
m	int
>=	O
1	int
)	O
result_deriv_array	pointer
[	O
1	int
]	O
=	O
(	O
2.0	int
*	O
m	int
+	O
1.0	int
)	O
*	O
(	O
x	double
*	O
result_deriv_array	pointer
[	O
0	int
]	O
+	O
result_array	pointer
[	O
0	int
]	O
)	O
;	O
for	O
(	O
ell	int
=	O
m	int
+	O
2	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
result_deriv_array	pointer
[	O
ell	int
-	O
m	int
]	O
=	O
-	O
(	O
ell	int
*	O
x	double
*	O
result_array	pointer
[	O
ell	int
-	O
m	int
]	O
-	O
(	O
ell	int
+	O
m	int
)	O
*	O
result_array	pointer
[	O
ell	int
-	O
1	int
-	O
m	int
]	O
)	O
/	O
(	O
diff_a	double
*	O
diff_b	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
else	O
{	O
return	O
stat_array	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_legendre_sphPlm_array	function
(	O
const	O
int	O
lmax	int
,	O
int	O
m	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
)	O
{	O
if	O
(	O
m	int
<	O
0	int
||	O
lmax	int
<	O
m	int
||	O
x	double
<	O
-	O
1.0	int
||	O
x	double
>	O
1.0	int
)	O
{	O
GSL_ERROR	O
(	O
"error"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
m	int
>	O
0	int
&&	O
(	O
x	double
==	O
1.0	int
||	O
x	double
==	O
-	O
1.0	int
)	O
)	O
{	O
int	O
ell	int
;	O
for	O
(	O
ell	int
=	O
m	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
result_array	pointer
[	O
ell	int
-	O
m	int
]	O
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
y_mm	double
;	O
double	O
y_mmp1	double
;	O
if	O
(	O
m	int
==	O
0	int
)	O
{	O
y_mm	double
=	O
0.5	int
/	O
M_SQRTPI	int
;	O
y_mmp1	double
=	O
x	double
*	O
M_SQRT3	int
*	O
y_mm	double
;	O
}	O
else	O
{	O
gsl_sf_result	struct
lncirc	struct
;	O
gsl_sf_result	struct
lnpoch	struct
;	O
double	O
lnpre	double
;	O
const	O
double	O
sgn	pointer
=	O
(	O
GSL_IS_ODD	O
(	O
m	int
)	O
?	O
-	O
1.0	int
:	O
1.0	int
)	O
;	O
gsl_sf_log_1plusx_e	function
(	O
-	O
x	double
*	O
x	double
,	O
&	O
lncirc	struct
)	O
;	O
gsl_sf_lnpoch_e	function
(	O
m	int
,	O
0.5	int
,	O
&	O
lnpoch	struct
)	O
;	O
lnpre	double
=	O
-	O
0.25	int
*	O
M_LNPI	int
+	O
0.5	int
*	O
(	O
lnpoch	struct
.	O
val	double
+	O
m	int
*	O
lncirc	struct
.	O
val	double
)	O
;	O
y_mm	double
=	O
sqrt	function
(	O
(	O
2.0	int
+	O
1.0	int
/	O
m	int
)	O
/	O
(	O
4.0	int
*	O
M_PI	int
)	O
)	O
*	O
sgn	pointer
*	O
exp	function
(	O
lnpre	double
)	O
;	O
y_mmp1	double
=	O
x	double
*	O
sqrt	function
(	O
2.0	int
*	O
m	int
+	O
3.0	int
)	O
*	O
y_mm	double
;	O
}	O
if	O
(	O
lmax	int
==	O
m	int
)	O
{	O
result_array	pointer
[	O
0	int
]	O
=	O
y_mm	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
lmax	int
==	O
m	int
+	O
1	int
)	O
{	O
result_array	pointer
[	O
0	int
]	O
=	O
y_mm	double
;	O
result_array	pointer
[	O
1	int
]	O
=	O
y_mmp1	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
y_ell	double
;	O
int	O
ell	int
;	O
result_array	pointer
[	O
0	int
]	O
=	O
y_mm	double
;	O
result_array	pointer
[	O
1	int
]	O
=	O
y_mmp1	double
;	O
for	O
(	O
ell	int
=	O
m	int
+	O
2	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
const	O
double	O
rat1	double
=	O
(	O
double	O
)	O
(	O
ell	int
-	O
m	int
)	O
/	O
(	O
double	O
)	O
(	O
ell	int
+	O
m	int
)	O
;	O
const	O
double	O
rat2	double
=	O
(	O
ell	int
-	O
m	int
-	O
1.0	int
)	O
/	O
(	O
ell	int
+	O
m	int
-	O
1.0	int
)	O
;	O
const	O
double	O
factor1	double
=	O
sqrt	function
(	O
rat1	double
*	O
(	O
2	int
*	O
ell	int
+	O
1	int
)	O
*	O
(	O
2	int
*	O
ell	int
-	O
1	int
)	O
)	O
;	O
const	O
double	O
factor2	double
=	O
sqrt	function
(	O
rat1	double
*	O
rat2	double
*	O
(	O
2	int
*	O
ell	int
+	O
1	int
)	O
/	O
(	O
2	int
*	O
ell	int
-	O
3	int
)	O
)	O
;	O
y_ell	double
=	O
(	O
x	double
*	O
y_mmp1	double
*	O
factor1	double
-	O
(	O
ell	int
+	O
m	int
-	O
1	int
)	O
*	O
y_mm	double
*	O
factor2	double
)	O
/	O
(	O
ell	int
-	O
m	int
)	O
;	O
y_mm	double
=	O
y_mmp1	double
;	O
y_mmp1	double
=	O
y_ell	double
;	O
result_array	pointer
[	O
ell	int
-	O
m	int
]	O
=	O
y_ell	double
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_legendre_sphPlm_deriv_array	function
(	O
const	O
int	O
lmax	int
,	O
const	O
int	O
m	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	pointer
,	O
double	O
*	O
result_deriv_array	pointer
)	O
{	O
if	O
(	O
m	int
<	O
0	int
||	O
lmax	int
<	O
m	int
||	O
x	double
<	O
-	O
1.0	int
||	O
x	double
>	O
1.0	int
)	O
{	O
GSL_ERROR	O
(	O
"domain"	pointer
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
m	int
==	O
0	int
)	O
{	O
const	O
int	O
stat_array	int
=	O
gsl_sf_legendre_Pl_deriv_array	function
(	O
lmax	int
,	O
x	double
,	O
result_array	pointer
,	O
result_deriv_array	pointer
)	O
;	O
int	O
ell	int
;	O
for	O
(	O
ell	int
=	O
0	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
const	O
double	O
prefactor	double
=	O
sqrt	function
(	O
(	O
2.0	int
*	O
ell	int
+	O
1.0	int
)	O
/	O
(	O
4.0	int
*	O
M_PI	int
)	O
)	O
;	O
result_array	pointer
[	O
ell	int
]	O
*=	O
prefactor	double
;	O
result_deriv_array	pointer
[	O
ell	int
]	O
*=	O
prefactor	double
;	O
}	O
return	O
stat_array	int
;	O
}	O
else	O
if	O
(	O
m	int
==	O
1	int
)	O
{	O
const	O
int	O
stat_array	int
=	O
gsl_sf_legendre_Plm_deriv_array	function
(	O
lmax	int
,	O
m	int
,	O
x	double
,	O
result_array	pointer
,	O
result_deriv_array	pointer
)	O
;	O
int	O
ell	int
;	O
for	O
(	O
ell	int
=	O
1	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
const	O
double	O
prefactor	double
=	O
sqrt	function
(	O
(	O
2.0	int
*	O
ell	int
+	O
1.0	int
)	O
/	O
(	O
ell	int
+	O
1.0	int
)	O
/	O
(	O
4.0	int
*	O
M_PI	int
*	O
ell	int
)	O
)	O
;	O
result_array	pointer
[	O
ell	int
-	O
1	int
]	O
*=	O
prefactor	double
;	O
result_deriv_array	pointer
[	O
ell	int
-	O
1	int
]	O
*=	O
prefactor	double
;	O
}	O
return	O
stat_array	int
;	O
}	O
else	O
{	O
int	O
stat_array	int
=	O
gsl_sf_legendre_sphPlm_array	function
(	O
lmax	int
,	O
m	int
,	O
x	double
,	O
result_array	pointer
)	O
;	O
if	O
(	O
stat_array	int
==	O
GSL_SUCCESS	int
)	O
{	O
int	O
ell	int
;	O
if	O
(	O
1.0	int
-	O
fabs	function
(	O
x	double
)	O
<	O
GSL_DBL_EPSILON	int
)	O
{	O
for	O
(	O
ell	int
=	O
m	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
result_deriv_array	pointer
[	O
ell	int
-	O
m	int
]	O
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
diff_a	double
=	O
1.0	int
+	O
x	double
;	O
const	O
double	O
diff_b	double
=	O
1.0	int
-	O
x	double
;	O
result_deriv_array	pointer
[	O
0	int
]	O
=	O
-	O
m	int
*	O
x	double
/	O
(	O
diff_a	double
*	O
diff_b	double
)	O
*	O
result_array	pointer
[	O
0	int
]	O
;	O
if	O
(	O
lmax	int
-	O
m	int
>=	O
1	int
)	O
result_deriv_array	pointer
[	O
1	int
]	O
=	O
sqrt	function
(	O
2.0	int
*	O
m	int
+	O
3.0	int
)	O
*	O
(	O
x	double
*	O
result_deriv_array	pointer
[	O
0	int
]	O
+	O
result_array	pointer
[	O
0	int
]	O
)	O
;	O
for	O
(	O
ell	int
=	O
m	int
+	O
2	int
;	O
ell	int
<=	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
const	O
double	O
c1	double
=	O
sqrt	function
(	O
(	O
(	O
2.0	int
*	O
ell	int
+	O
1.0	int
)	O
/	O
(	O
2.0	int
*	O
ell	int
-	O
1.0	int
)	O
)	O
*	O
(	O
(	O
double	O
)	O
(	O
ell	int
-	O
m	int
)	O
/	O
(	O
double	O
)	O
(	O
ell	int
+	O
m	int
)	O
)	O
)	O
;	O
result_deriv_array	pointer
[	O
ell	int
-	O
m	int
]	O
=	O
-	O
(	O
ell	int
*	O
x	double
*	O
result_array	pointer
[	O
ell	int
-	O
m	int
]	O
-	O
c1	double
*	O
(	O
ell	int
+	O
m	int
)	O
*	O
result_array	pointer
[	O
ell	int
-	O
1	int
-	O
m	int
]	O
)	O
/	O
(	O
diff_a	double
*	O
diff_b	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
else	O
{	O
return	O
stat_array	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_legendre_array_size	function
(	O
const	O
int	O
lmax	int
,	O
const	O
int	O
m	int
)	O
{	O
return	O
lmax	int
-	O
m	int
+	O
1	int
;	O
}	O
double	O
gsl_sf_legendre_P1	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_legendre_P1_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_legendre_P2	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_legendre_P2_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_legendre_P3	function
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_legendre_P3_e	function
(	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_legendre_Pl	function
(	O
const	O
int	O
l	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_legendre_Pl_e	function
(	O
l	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_legendre_Plm	function
(	O
const	O
int	O
l	int
,	O
const	O
int	O
m	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_legendre_Plm_e	function
(	O
l	int
,	O
m	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
double	O
gsl_sf_legendre_sphPlm	function
(	O
const	O
int	O
l	int
,	O
const	O
int	O
m	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_legendre_sphPlm_e	function
(	O
l	int
,	O
m	int
,	O
x	double
,	O
&	O
result	pointer
)	O
)	O
;	O
}	O
