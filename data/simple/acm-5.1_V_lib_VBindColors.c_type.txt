int	O
_VProcessColor	function
PARAMS	O
(	O
(	O
VWorkContext	struct
*	O
cxt	pointer
,	O
Viewport	struct
*	O
v	struct
,	O
VColor	struct
*	O
vc	pointer
)	O
)	O
;	O
static	O
char	O
*	O
errmsg	pointer
=	O
"Not enough pixel space for all colors\n"	pointer
;	O
static	O
char	O
*	O
errmsg2	pointer
=	O
"Unable to parse color \"%s\".\n"	pointer
;	O
void	O
VSetColorTweakProc	function
(	O
Viewport	struct
*	O
v	struct
,	O
void	O
(	O
*	O
proc	pointer
)	O
(	O
)	O
)	O
{	O
v	struct
->	O
colorTweakProc	pointer
=	O
proc	pointer
;	O
}	O
static	O
int	O
pmap	function
(	O
long	O
unsigned	O
int	O
*	O
vec	pointer
,	O
int	O
n	int
)	O
{	O
static	O
int	O
itbl	array
[	O
]	O
=	O
{	O
1	int
,	O
2	int
,	O
4	int
,	O
8	int
}	O
;	O
register	O
int	O
i	int
,	O
r	pointer
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
++	O
i	int
)	O
if	O
(	O
itbl	array
[	O
i	int
]	O
&	O
n	int
)	O
r	pointer
+=	O
vec	pointer
[	O
i	int
]	O
;	O
return	O
r	pointer
;	O
}	O
int	O
VBindColors	function
(	O
Viewport	struct
*	O
v	struct
,	O
char	O
*	O
background	long
)	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
k	int
,	O
n	int
,	O
c	pointer
;	O
static	O
int	O
parseComplete	int
=	O
0	int
;	O
unsigned	O
int	O
pixel	long
;	O
VColor	struct
*	O
p	pointer
,	O
*	O
bg	pointer
;	O
XColor	struct
*	O
colorSet	pointer
;	O
Display	struct
*	O
dpy	pointer
;	O
unsigned	O
long	O
planemask	array
[	O
PLANECOUNT	int
*	O
2	int
]	O
;	O
unsigned	O
long	O
pixels	array
[	O
1	int
]	O
;	O
int	O
maxpcolors	int
;	O
char	O
realColor	array
[	O
64	int
]	O
;	O
maxpcolors	int
=	O
(	O
v	struct
->	O
flags	short
&	O
VPMono	int
)	O
?	O
256	int
:	O
v	struct
->	O
visual	pointer
->	O
map_entries	int
;	O
dpy	pointer
=	O
v	struct
->	O
dpy	pointer
;	O
_VDefaultWorkContext	pointer
->	O
nextPixel	int
=	O
0	int
;	O
if	O
(	O
v	struct
->	O
flags	short
&	O
(	O
VPPixmap	int
|	O
VPFastAnimation	int
|	O
VPMono	int
|	O
VPDoubleBuffer	int
)	O
)	O
{	O
bg	pointer
=	O
VAllocColor	function
(	O
background	long
)	O
;	O
if	O
(	O
_VProcessColor	function
(	O
_VDefaultWorkContext	pointer
,	O
v	struct
,	O
bg	pointer
)	O
!=	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
(	O
i	int
=	O
0	int
,	O
p	pointer
=	O
_VDefaultWorkContext	pointer
->	O
VColorList	pointer
)	O
;	O
p	pointer
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
>	O
maxpcolors	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Too many colors selected.\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
_VProcessColor	function
(	O
_VDefaultWorkContext	pointer
,	O
v	struct
,	O
p	pointer
)	O
!=	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
}	O
v	struct
->	O
colors	int
=	O
_VDefaultWorkContext	pointer
->	O
nextPixel	int
;	O
v	struct
->	O
set	int
=	O
0	int
;	O
v	struct
->	O
pixel	long
=	O
v	struct
->	O
aPixel	pointer
;	O
v	struct
->	O
mask	long
=	O
AllPlanes	O
;	O
return	O
0	int
;	O
}	O
colorSet	pointer
=	O
(	O
XColor	struct
*	O
)	O
Vmalloc	function
(	O
sizeof	O
(	O
XColor	struct
)	O
*	O
maxpcolors	int
)	O
;	O
n	int
=	O
PLANECOUNT	int
;	O
c	pointer
=	O
1	int
<<	O
n	int
;	O
if	O
(	O
XAllocColorCells	function
(	O
dpy	pointer
,	O
v	struct
->	O
cmap	long
,	O
False	int
,	O
planemask	array
,	O
n	int
*	O
2	int
,	O
pixels	array
,	O
1	int
)	O
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cannot allocate color cells\n"	pointer
)	O
;	O
free	function
(	O
(	O
char	O
*	O
)	O
colorSet	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
1	int
)	O
{	O
if	O
(	O
v	struct
->	O
colorTweakProc	pointer
)	O
{	O
(	O
*	O
v	struct
->	O
colorTweakProc	pointer
)	O
(	O
v	struct
,	O
background	long
,	O
realColor	array
)	O
;	O
}	O
else	O
{	O
strcpy	O
(	O
realColor	array
,	O
background	long
)	O
;	O
}	O
if	O
(	O
XParseColor	function
(	O
dpy	pointer
,	O
v	struct
->	O
cmap	long
,	O
realColor	array
,	O
&	O
colorSet	pointer
[	O
0	int
]	O
)	O
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
errmsg2	pointer
,	O
background	long
)	O
;	O
free	function
(	O
colorSet	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
(	O
i	int
=	O
0	int
,	O
p	pointer
=	O
_VDefaultWorkContext	pointer
->	O
VColorList	pointer
)	O
;	O
p	pointer
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
>	O
c	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Too many colors selected.\n"	pointer
)	O
;	O
free	function
(	O
colorSet	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
v	struct
->	O
colorTweakProc	pointer
)	O
{	O
(	O
*	O
v	struct
->	O
colorTweakProc	pointer
)	O
(	O
v	struct
,	O
p	pointer
->	O
color_name	pointer
,	O
realColor	array
)	O
;	O
}	O
else	O
{	O
strcpy	O
(	O
realColor	array
,	O
p	pointer
->	O
color_name	pointer
)	O
;	O
}	O
if	O
(	O
XParseColor	function
(	O
dpy	pointer
,	O
v	struct
->	O
cmap	long
,	O
realColor	array
,	O
&	O
colorSet	pointer
[	O
i	int
+	O
1	int
]	O
)	O
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
errmsg2	pointer
,	O
p	pointer
->	O
color_name	pointer
)	O
;	O
free	function
(	O
colorSet	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
p	pointer
->	O
cIndex	short
=	O
i	int
+	O
1	int
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
;	O
}	O
parseComplete	int
=	O
1	int
;	O
}	O
v	struct
->	O
colors	int
=	O
i	int
+	O
1	int
;	O
k	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
v	struct
->	O
colors	int
;	O
++	O
i	int
)	O
{	O
pixel	long
=	O
v	struct
->	O
aPixel	pointer
[	O
i	int
]	O
=	O
(	O
Color	short
)	O
(	O
pmap	function
(	O
&	O
planemask	array
[	O
0	int
]	O
,	O
i	int
)	O
|	O
pixels	array
[	O
0	int
]	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
v	struct
->	O
colors	int
;	O
++	O
j	int
)	O
{	O
v	struct
->	O
aColor	array
[	O
k	int
]	O
=	O
colorSet	pointer
[	O
i	int
]	O
;	O
v	struct
->	O
aColor	array
[	O
k	int
++	O
]	O
.	O
pixel	long
=	O
pixel	long
|	O
pmap	function
(	O
&	O
planemask	array
[	O
n	int
]	O
,	O
j	int
)	O
;	O
}	O
}	O
v	struct
->	O
aMask	long
=	O
pmap	function
(	O
&	O
planemask	array
[	O
0	int
]	O
,	O
(	O
c	pointer
-	O
1	int
)	O
)	O
|	O
pixels	array
[	O
0	int
]	O
;	O
k	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
v	struct
->	O
colors	int
;	O
++	O
i	int
)	O
{	O
pixel	long
=	O
v	struct
->	O
bPixel	array
[	O
i	int
]	O
=	O
(	O
Color	short
)	O
(	O
pmap	function
(	O
&	O
planemask	array
[	O
n	int
]	O
,	O
i	int
)	O
|	O
pixels	array
[	O
0	int
]	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
v	struct
->	O
colors	int
;	O
++	O
j	int
)	O
{	O
v	struct
->	O
bColor	array
[	O
k	int
]	O
=	O
colorSet	pointer
[	O
i	int
]	O
;	O
v	struct
->	O
bColor	array
[	O
k	int
++	O
]	O
.	O
pixel	long
=	O
pixel	long
|	O
pmap	function
(	O
&	O
planemask	array
[	O
0	int
]	O
,	O
j	int
)	O
;	O
}	O
}	O
v	struct
->	O
bMask	long
=	O
pmap	function
(	O
&	O
planemask	array
[	O
n	int
]	O
,	O
(	O
c	pointer
-	O
1	int
)	O
)	O
|	O
pixels	array
[	O
0	int
]	O
;	O
free	function
(	O
colorSet	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_VProcessColor	function
(	O
VWorkContext	struct
*	O
cxt	pointer
,	O
Viewport	struct
*	O
v	struct
,	O
VColor	struct
*	O
vc	pointer
)	O
{	O
char	O
realColor	array
[	O
256	int
]	O
;	O
Display	struct
*	O
dpy	pointer
=	O
v	struct
->	O
dpy	pointer
;	O
XColor	struct
xcolor	struct
,	O
xcolor2	struct
,	O
hcolor	struct
;	O
double	O
d	long
;	O
int	O
i	int
,	O
swap	int
=	O
0	int
;	O
unsigned	O
long	O
temp	long
;	O
if	O
(	O
cxt	pointer
->	O
depthCueSteps	int
>	O
1	int
&&	O
(	O
v	struct
->	O
flags	short
&	O
VPDepthCueParsed	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
v	struct
->	O
colorTweakProc	pointer
)	O
{	O
(	O
*	O
v	struct
->	O
colorTweakProc	pointer
)	O
(	O
v	struct
,	O
cxt	pointer
->	O
depthCueColor	pointer
->	O
color_name	pointer
,	O
realColor	array
)	O
;	O
}	O
else	O
{	O
strcpy	O
(	O
realColor	array
,	O
cxt	pointer
->	O
depthCueColor	pointer
->	O
color_name	pointer
)	O
;	O
}	O
if	O
(	O
XParseColor	function
(	O
dpy	pointer
,	O
v	struct
->	O
cmap	long
,	O
realColor	array
,	O
&	O
hcolor	struct
)	O
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
errmsg2	pointer
,	O
cxt	pointer
->	O
depthCueColor	pointer
->	O
color_name	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
v	struct
->	O
AllocColor	pointer
(	O
v	struct
,	O
v	struct
->	O
cmap	long
,	O
&	O
hcolor	struct
)	O
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
errmsg	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
cxt	pointer
->	O
depthCueColor	pointer
->	O
cIndex	short
=	O
cxt	pointer
->	O
nextPixel	int
;	O
v	struct
->	O
aPixel	pointer
[	O
cxt	pointer
->	O
nextPixel	int
++	O
]	O
=	O
hcolor	struct
.	O
pixel	long
;	O
v	struct
->	O
xdepthCueColor	struct
=	O
hcolor	struct
;	O
v	struct
->	O
flags	short
|=	O
VPDepthCueParsed	int
;	O
swap	int
=	O
1	int
;	O
}	O
if	O
(	O
v	struct
->	O
colorTweakProc	pointer
)	O
{	O
(	O
*	O
v	struct
->	O
colorTweakProc	pointer
)	O
(	O
v	struct
,	O
vc	pointer
->	O
color_name	pointer
,	O
realColor	array
)	O
;	O
}	O
else	O
{	O
strcpy	O
(	O
realColor	array
,	O
vc	pointer
->	O
color_name	pointer
)	O
;	O
}	O
if	O
(	O
XParseColor	function
(	O
dpy	pointer
,	O
v	struct
->	O
cmap	long
,	O
realColor	array
,	O
&	O
xcolor	struct
)	O
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
errmsg2	pointer
,	O
vc	pointer
->	O
color_name	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
v	struct
->	O
flags	short
&	O
VPMono	int
)	O
{	O
vc	pointer
->	O
cIndex	short
=	O
cxt	pointer
->	O
nextPixel	int
;	O
v	struct
->	O
aPixel	pointer
[	O
cxt	pointer
->	O
nextPixel	int
++	O
]	O
=	O
(	O
xcolor	struct
.	O
red	short
*	O
299L	int
+	O
xcolor	struct
.	O
green	short
*	O
587L	int
+	O
xcolor	struct
.	O
blue	short
*	O
114L	int
)	O
/	O
(	O
1000	int
*	O
8192	int
)	O
;	O
}	O
else	O
if	O
(	O
v	struct
->	O
flags	short
&	O
VPDepthCueing	int
&&	O
cxt	pointer
->	O
depthCueSteps	int
>	O
1	int
&&	O
vc	pointer
->	O
flags	short
&	O
ColorEnableDepthCueing	int
)	O
{	O
vc	pointer
->	O
cIndex	short
=	O
cxt	pointer
->	O
nextPixel	int
;	O
hcolor	struct
=	O
v	struct
->	O
xdepthCueColor	struct
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cxt	pointer
->	O
depthCueSteps	int
-	O
1	int
;	O
++	O
i	int
)	O
{	O
d	long
=	O
(	O
double	O
)	O
i	int
/	O
(	O
double	O
)	O
cxt	pointer
->	O
depthCueSteps	int
;	O
xcolor2	struct
.	O
red	short
=	O
(	O
unsigned	O
short	O
)	O
(	O
xcolor	struct
.	O
red	short
*	O
(	O
1.0	int
-	O
d	long
)	O
+	O
hcolor	struct
.	O
red	short
*	O
d	long
)	O
;	O
xcolor2	struct
.	O
green	short
=	O
(	O
unsigned	O
short	O
)	O
(	O
xcolor	struct
.	O
green	short
*	O
(	O
1.0	int
-	O
d	long
)	O
+	O
hcolor	struct
.	O
green	short
*	O
d	long
)	O
;	O
xcolor2	struct
.	O
blue	short
=	O
(	O
unsigned	O
short	O
)	O
(	O
xcolor	struct
.	O
blue	short
*	O
(	O
1.0	int
-	O
d	long
)	O
+	O
hcolor	struct
.	O
blue	short
*	O
d	long
)	O
;	O
xcolor2	struct
.	O
flags	short
=	O
xcolor	struct
.	O
flags	short
;	O
if	O
(	O
v	struct
->	O
AllocColor	pointer
(	O
v	struct
,	O
v	struct
->	O
cmap	long
,	O
&	O
xcolor2	struct
)	O
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
errmsg	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
v	struct
->	O
aPixel	pointer
[	O
cxt	pointer
->	O
nextPixel	int
++	O
]	O
=	O
xcolor2	struct
.	O
pixel	long
;	O
}	O
}	O
else	O
{	O
if	O
(	O
v	struct
->	O
AllocColor	pointer
(	O
v	struct
,	O
v	struct
->	O
cmap	long
,	O
&	O
xcolor	struct
)	O
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
errmsg	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
vc	pointer
->	O
cIndex	short
=	O
cxt	pointer
->	O
nextPixel	int
;	O
v	struct
->	O
aPixel	pointer
[	O
cxt	pointer
->	O
nextPixel	int
++	O
]	O
=	O
xcolor	struct
.	O
pixel	long
;	O
}	O
if	O
(	O
swap	int
)	O
{	O
temp	long
=	O
v	struct
->	O
aPixel	pointer
[	O
0	int
]	O
;	O
v	struct
->	O
aPixel	pointer
[	O
0	int
]	O
=	O
v	struct
->	O
aPixel	pointer
[	O
1	int
]	O
;	O
v	struct
->	O
aPixel	pointer
[	O
1	int
]	O
=	O
(	O
Color	short
)	O
temp	long
;	O
temp	long
=	O
cxt	pointer
->	O
depthCueColor	pointer
->	O
cIndex	short
;	O
cxt	pointer
->	O
depthCueColor	pointer
->	O
cIndex	short
=	O
vc	pointer
->	O
cIndex	short
;	O
vc	pointer
->	O
cIndex	short
=	O
(	O
Color	short
)	O
temp	long
;	O
}	O
return	O
0	int
;	O
}	O
