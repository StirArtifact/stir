jmp_buf	array
mainloop	array
;	O
sigset_t	struct
mainsigset	struct
;	O
volatile	O
int	O
pass	int
=	O
0	int
;	O
volatile	O
char	O
*	O
stack_lower_bound	pointer
;	O
volatile	O
char	O
*	O
stack_upper_bound	pointer
;	O
static	O
void	O
stackoverflow_handler_continuation	function
(	O
void	O
*	O
arg1	pointer
,	O
void	O
*	O
arg2	pointer
,	O
void	O
*	O
arg3	pointer
)	O
{	O
int	O
arg	int
=	O
(	O
int	O
)	O
(	O
long	O
)	O
arg1	pointer
;	O
longjmp	function
(	O
mainloop	array
,	O
arg	int
)	O
;	O
}	O
void	O
stackoverflow_handler	function
(	O
int	O
emergency	int
,	O
stackoverflow_context_t	pointer
scp	pointer
)	O
{	O
char	O
dummy	char
;	O
volatile	O
char	O
*	O
addr	pointer
=	O
&	O
dummy	char
;	O
if	O
(	O
!	O
(	O
addr	pointer
>=	O
stack_lower_bound	pointer
&&	O
addr	pointer
<=	O
stack_upper_bound	pointer
)	O
)	O
abort	function
(	O
)	O
;	O
pass	int
++	O
;	O
printf	function
(	O
"Stack overflow %d caught.\n"	pointer
,	O
pass	int
)	O
;	O
sigprocmask	function
(	O
SIG_SETMASK	int
,	O
&	O
mainsigset	struct
,	O
NULL	O
)	O
;	O
sigsegv_leave_handler	function
(	O
stackoverflow_handler_continuation	function
,	O
(	O
void	O
*	O
)	O
(	O
long	O
)	O
(	O
emergency	int
?	O
-	O
1	int
:	O
pass	int
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
volatile	O
int	O
*	O
recurse_1	function
(	O
int	O
n	int
,	O
volatile	O
int	O
*	O
p	pointer
)	O
{	O
if	O
(	O
n	int
<	O
INT_MAX	O
)	O
*	O
recurse_1	function
(	O
n	int
+	O
1	int
,	O
p	pointer
)	O
+=	O
n	int
;	O
return	O
p	pointer
;	O
}	O
int	O
recurse	function
(	O
volatile	O
int	O
n	int
)	O
{	O
return	O
*	O
recurse_1	function
(	O
n	int
,	O
&	O
n	int
)	O
;	O
}	O
int	O
main	function
(	O
)	O
{	O
sigset_t	struct
emptyset	struct
;	O
struct	O
rlimit	struct
rl	struct
;	O
rl	struct
.	O
rlim_cur	long
=	O
rl	struct
.	O
rlim_max	long
=	O
0x100000	int
;	O
setrlimit	function
(	O
RLIMIT_STACK	int
,	O
&	O
rl	struct
)	O
;	O
prepare_alternate_stack	function
(	O
)	O
;	O
if	O
(	O
stackoverflow_install_handler	function
(	O
&	O
stackoverflow_handler	function
,	O
mystack	pointer
,	O
SIGSTKSZ	int
)	O
<	O
0	int
)	O
exit	function
(	O
2	int
)	O
;	O
stack_lower_bound	pointer
=	O
mystack	pointer
;	O
stack_upper_bound	pointer
=	O
mystack	pointer
+	O
SIGSTKSZ	int
-	O
1	int
;	O
sigemptyset	function
(	O
&	O
emptyset	struct
)	O
;	O
sigprocmask	function
(	O
SIG_BLOCK	int
,	O
&	O
emptyset	struct
,	O
&	O
mainsigset	struct
)	O
;	O
switch	O
(	O
setjmp	function
(	O
mainloop	array
)	O
)	O
{	O
case	O
-	O
1	int
:	O
printf	function
(	O
"emergency exit\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
case	O
0	int
:	O
case	O
1	int
:	O
printf	function
(	O
"Starting recursion pass %d.\n"	pointer
,	O
pass	int
+	O
1	int
)	O
;	O
recurse	function
(	O
0	int
)	O
;	O
printf	function
(	O
"no endless recursion?!\n"	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
case	O
2	int
:	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
check_alternate_stack_no_overflow	function
(	O
)	O
;	O
printf	function
(	O
"Test passed.\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
