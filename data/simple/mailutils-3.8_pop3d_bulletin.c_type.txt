static	O
char	O
*	O
bulletin_mbox_name	pointer
;	O
static	O
char	O
*	O
bulletin_db_name	pointer
;	O
void	O
set_bulletin_db	function
(	O
const	O
char	O
*	O
file	pointer
)	O
{	O
bulletin_db_name	pointer
=	O
mu_strdup	function
(	O
file	pointer
)	O
;	O
}	O
static	O
void	O
close_bulletin_mailbox	function
(	O
mu_mailbox_t	pointer
*	O
pmbox	pointer
)	O
{	O
if	O
(	O
pmbox	pointer
)	O
{	O
mu_mailbox_close	function
(	O
*	O
pmbox	pointer
)	O
;	O
mu_mailbox_destroy	function
(	O
pmbox	pointer
)	O
;	O
}	O
}	O
static	O
int	O
open_bulletin_mailbox	function
(	O
mu_mailbox_t	pointer
*	O
pmbox	pointer
)	O
{	O
int	O
status	int
;	O
mu_mailbox_t	pointer
tmbox	pointer
;	O
if	O
(	O
(	O
status	int
=	O
mu_mailbox_create	function
(	O
&	O
tmbox	pointer
,	O
bulletin_mbox_name	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot create bulletin mailbox `%s': %s"	pointer
)	O
,	O
bulletin_mbox_name	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
(	O
status	int
=	O
mu_mailbox_open	function
(	O
tmbox	pointer
,	O
MU_STREAM_READ	int
)	O
)	O
!=	O
0	int
)	O
{	O
mu_mailbox_destroy	function
(	O
&	O
tmbox	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"cannot open bulletin mailbox `%s': %s"	pointer
)	O
,	O
bulletin_mbox_name	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
pmbox	pointer
)	O
close_bulletin_mailbox	function
(	O
&	O
tmbox	pointer
)	O
;	O
else	O
*	O
pmbox	pointer
=	O
tmbox	pointer
;	O
return	O
0	int
;	O
}	O
int	O
set_bulletin_source	function
(	O
const	O
char	O
*	O
source	pointer
)	O
{	O
bulletin_mbox_name	pointer
=	O
mu_strdup	function
(	O
source	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
read_popbull_file	function
(	O
size_t	long
*	O
pnum	pointer
)	O
{	O
int	O
rc	int
=	O
1	int
;	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
filename	pointer
=	O
mu_tilde_expansion	function
(	O
"~/.popbull"	pointer
,	O
MU_HIERARCHY_DELIMITER	char
,	O
auth_data	pointer
->	O
dir	pointer
)	O
;	O
if	O
(	O
!	O
filename	pointer
)	O
return	O
1	int
;	O
fp	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
)	O
{	O
char	O
buf	pointer
[	O
128	int
]	O
;	O
char	O
*	O
p	pointer
=	O
fgets	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
fp	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
*	O
pnum	pointer
=	O
strtoul	function
(	O
buf	pointer
,	O
&	O
p	pointer
,	O
0	int
)	O
;	O
rc	int
=	O
*	O
p	pointer
&&	O
!	O
mu_isspace	O
(	O
*	O
p	pointer
)	O
;	O
}	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
write_popbull_file	function
(	O
size_t	long
num	long
)	O
{	O
int	O
rc	int
=	O
1	int
;	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
filename	pointer
=	O
mu_tilde_expansion	function
(	O
"~/.popbull"	pointer
,	O
MU_HIERARCHY_DELIMITER	char
,	O
auth_data	pointer
->	O
dir	pointer
)	O
;	O
if	O
(	O
!	O
filename	pointer
)	O
return	O
1	int
;	O
fp	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
fp	pointer
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"%s\n"	pointer
,	O
mu_umaxtostr	function
(	O
0	int
,	O
num	long
)	O
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
rc	int
=	O
0	int
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
get_last_delivered_num	function
(	O
size_t	long
*	O
pret	pointer
)	O
{	O
return	O
read_popbull_file	function
(	O
pret	pointer
)	O
;	O
}	O
void	O
store_last_delivered_num	function
(	O
size_t	long
num	long
)	O
{	O
write_popbull_file	function
(	O
num	long
)	O
;	O
}	O
void	O
deliver_pending_bulletins	function
(	O
)	O
{	O
mu_mailbox_t	pointer
bull	pointer
;	O
int	O
rc	int
;	O
size_t	long
lastnum	long
,	O
total	array
;	O
if	O
(	O
!	O
bulletin_mbox_name	pointer
)	O
return	O
;	O
rc	int
=	O
open_bulletin_mailbox	function
(	O
&	O
bull	pointer
)	O
;	O
if	O
(	O
rc	int
||	O
get_last_delivered_num	function
(	O
&	O
lastnum	long
)	O
)	O
return	O
;	O
rc	int
=	O
mu_mailbox_messages_count	function
(	O
bull	pointer
,	O
&	O
total	array
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	function
(	O
_	O
(	O
"cannot count bulletins: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
else	O
{	O
mu_diag_output	function
(	O
MU_DIAG_DEBUG	O
,	O
"user %s, last bulletin %lu, total bulletins %lu"	pointer
,	O
username	pointer
,	O
(	O
unsigned	O
long	O
)	O
lastnum	long
,	O
(	O
unsigned	O
long	O
)	O
total	array
)	O
;	O
if	O
(	O
lastnum	long
<	O
total	array
)	O
{	O
size_t	long
i	long
;	O
size_t	long
count	long
=	O
total	array
-	O
lastnum	long
;	O
mu_diag_output	function
(	O
MU_DIAG_INFO	O
,	O
ngettext	function
(	O
"user %s: delivering %lu pending bulletin"	pointer
,	O
"user %s: delivering %lu pending bulletins"	pointer
,	O
count	long
)	O
,	O
username	pointer
,	O
(	O
unsigned	O
long	O
)	O
count	long
)	O
;	O
for	O
(	O
i	long
=	O
lastnum	long
+	O
1	int
;	O
i	long
<=	O
total	array
;	O
i	long
++	O
)	O
{	O
int	O
rc	int
;	O
mu_message_t	pointer
msg	pointer
;	O
if	O
(	O
(	O
rc	int
=	O
mu_mailbox_get_message	function
(	O
bull	pointer
,	O
i	long
,	O
&	O
msg	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot read bulletin %lu: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
i	long
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
mu_mailbox_append_message	function
(	O
mbox	pointer
,	O
msg	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"cannot append message %lu: %s"	pointer
)	O
,	O
(	O
unsigned	O
long	O
)	O
i	long
,	O
mu_strerror	function
(	O
rc	int
)	O
)	O
;	O
break	O
;	O
}	O
}	O
store_last_delivered_num	function
(	O
i	long
-	O
1	int
)	O
;	O
}	O
}	O
close_bulletin_mailbox	function
(	O
&	O
bull	pointer
)	O
;	O
}	O
