enum	O
Status	enum
{	O
ERR	int
=	O
-	O
2	int
,	O
EMOD	int
=	O
-	O
3	int
,	O
FATAL	int
=	O
-	O
4	int
}	O
;	O
static	O
char	O
def_filename	array
[	O
1024	int
]	O
=	O
""	pointer
;	O
static	O
char	O
errmsg	array
[	O
80	int
]	O
=	O
""	pointer
;	O
static	O
char	O
prompt_str	array
[	O
80	int
]	O
=	O
"*"	pointer
;	O
static	O
const	O
char	O
*	O
ibufp	pointer
=	O
0	int
;	O
static	O
char	O
*	O
shcmd	pointer
=	O
0	int
;	O
static	O
int	O
shcmdsz	int
=	O
0	int
;	O
static	O
int	O
shcmdlen	int
=	O
0	int
;	O
static	O
int	O
first_addr	int
=	O
0	int
,	O
second_addr	int
=	O
0	int
;	O
static	O
char	O
verbose	char
=	O
0	int
;	O
static	O
char	O
prompt_on	char
=	O
0	int
;	O
void	O
set_def_filename	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
strncpy	function
(	O
def_filename	array
,	O
s	pointer
,	O
sizeof	O
(	O
def_filename	array
)	O
)	O
;	O
def_filename	array
[	O
sizeof	O
(	O
def_filename	array
)	O
-	O
1	int
]	O
=	O
0	int
;	O
}	O
void	O
set_prompt	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
prompt_on	char
=	O
1	int
;	O
strncpy	function
(	O
prompt_str	array
,	O
s	pointer
,	O
sizeof	O
(	O
prompt_str	array
)	O
)	O
;	O
prompt_str	array
[	O
sizeof	O
(	O
prompt_str	array
)	O
-	O
1	int
]	O
=	O
0	int
;	O
}	O
void	O
set_verbose	function
(	O
void	O
)	O
{	O
verbose	char
=	O
1	int
;	O
}	O
static	O
const	O
line_t	struct
*	O
mark	array
[	O
26	int
]	O
;	O
static	O
int	O
markno	int
;	O
static	O
char	O
mark_line_node	function
(	O
const	O
line_t	struct
*	O
lp	pointer
,	O
int	O
c	int
)	O
{	O
c	int
-=	O
'a'	O
;	O
if	O
(	O
c	int
<	O
0	int
||	O
c	int
>=	O
26	int
)	O
{	O
set_error_msg	function
(	O
"Invalid mark character"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
mark	array
[	O
c	int
]	O
)	O
++	O
markno	int
;	O
mark	array
[	O
c	int
]	O
=	O
lp	pointer
;	O
return	O
1	int
;	O
}	O
void	O
unmark_line_node	function
(	O
const	O
line_t	struct
*	O
lp	pointer
)	O
{	O
int	O
i	pointer
;	O
for	O
(	O
i	pointer
=	O
0	int
;	O
markno	int
&&	O
i	pointer
<	O
26	int
;	O
++	O
i	pointer
)	O
if	O
(	O
mark	array
[	O
i	pointer
]	O
==	O
lp	pointer
)	O
{	O
mark	array
[	O
i	pointer
]	O
=	O
0	int
;	O
--	O
markno	int
;	O
}	O
}	O
static	O
int	O
get_marked_node_addr	function
(	O
int	O
c	int
)	O
{	O
c	int
-=	O
'a'	O
;	O
if	O
(	O
c	int
<	O
0	int
||	O
c	int
>=	O
26	int
)	O
{	O
set_error_msg	function
(	O
"Invalid mark character"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
get_line_node_addr	function
(	O
mark	array
[	O
c	int
]	O
)	O
;	O
}	O
static	O
int	O
get_shell_command	function
(	O
void	O
)	O
{	O
static	O
char	O
*	O
buf	pointer
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
const	O
char	O
*	O
s	pointer
;	O
int	O
i	pointer
=	O
0	int
,	O
len	int
;	O
if	O
(	O
restricted	function
(	O
)	O
)	O
{	O
set_error_msg	function
(	O
"Shell access restricted"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
s	pointer
=	O
ibufp	pointer
=	O
get_extended_line	function
(	O
ibufp	pointer
,	O
&	O
len	int
,	O
1	int
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
len	int
+	O
1	int
)	O
)	O
return	O
-	O
1	int
;	O
buf	pointer
[	O
i	pointer
++	O
]	O
=	O
'!'	O
;	O
while	O
(	O
*	O
ibufp	pointer
!=	O
'\n'	O
)	O
{	O
if	O
(	O
*	O
ibufp	pointer
==	O
'!'	O
)	O
{	O
if	O
(	O
s	pointer
!=	O
ibufp	pointer
)	O
{	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
i	pointer
+	O
1	int
)	O
)	O
return	O
-	O
1	int
;	O
buf	pointer
[	O
i	pointer
++	O
]	O
=	O
*	O
ibufp	pointer
++	O
;	O
}	O
else	O
if	O
(	O
!	O
shcmd	pointer
||	O
(	O
traditional	function
(	O
)	O
&&	O
!	O
*	O
(	O
shcmd	pointer
+	O
1	int
)	O
)	O
)	O
{	O
set_error_msg	function
(	O
"No previous command"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
i	pointer
+	O
shcmdlen	int
)	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
s	pointer
=	O
shcmd	pointer
+	O
1	int
;	O
s	pointer
<	O
shcmd	pointer
+	O
shcmdlen	int
;	O
)	O
buf	pointer
[	O
i	pointer
++	O
]	O
=	O
*	O
s	pointer
++	O
;	O
s	pointer
=	O
ibufp	pointer
++	O
;	O
}	O
}	O
else	O
if	O
(	O
*	O
ibufp	pointer
==	O
'%'	O
)	O
{	O
if	O
(	O
!	O
def_filename	array
[	O
0	int
]	O
)	O
{	O
set_error_msg	function
(	O
"No current filename"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
len	int
=	O
strlen	function
(	O
s	pointer
=	O
strip_escapes	function
(	O
def_filename	array
)	O
)	O
;	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
i	pointer
+	O
len	int
)	O
)	O
return	O
-	O
1	int
;	O
while	O
(	O
len	int
--	O
)	O
buf	pointer
[	O
i	pointer
++	O
]	O
=	O
*	O
s	pointer
++	O
;	O
s	pointer
=	O
ibufp	pointer
++	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
i	pointer
+	O
2	int
)	O
)	O
return	O
-	O
1	int
;	O
buf	pointer
[	O
i	pointer
++	O
]	O
=	O
*	O
ibufp	pointer
;	O
if	O
(	O
*	O
ibufp	pointer
++	O
==	O
'\\'	O
)	O
buf	pointer
[	O
i	pointer
++	O
]	O
=	O
*	O
ibufp	pointer
++	O
;	O
}	O
}	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
shcmd	pointer
,	O
&	O
shcmdsz	int
,	O
i	pointer
+	O
1	int
)	O
)	O
return	O
-	O
1	int
;	O
memcpy	function
(	O
shcmd	pointer
,	O
buf	pointer
,	O
i	pointer
)	O
;	O
shcmdlen	int
=	O
i	pointer
;	O
shcmd	pointer
[	O
i	pointer
]	O
=	O
0	int
;	O
return	O
(	O
*	O
s	pointer
==	O
'!'	O
||	O
*	O
s	pointer
==	O
'%'	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
skip_blanks	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
while	O
(	O
isspace	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
s	pointer
)	O
&&	O
*	O
s	pointer
!=	O
'\n'	O
)	O
++	O
s	pointer
;	O
return	O
s	pointer
;	O
}	O
static	O
const	O
char	O
*	O
get_filename	function
(	O
void	O
)	O
{	O
static	O
char	O
*	O
buf	pointer
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
int	O
size	pointer
,	O
n	int
;	O
ibufp	pointer
=	O
skip_blanks	function
(	O
ibufp	pointer
)	O
;	O
if	O
(	O
*	O
ibufp	pointer
!=	O
'\n'	O
)	O
{	O
ibufp	pointer
=	O
get_extended_line	function
(	O
ibufp	pointer
,	O
&	O
size	pointer
,	O
1	int
)	O
;	O
if	O
(	O
!	O
ibufp	pointer
)	O
return	O
0	int
;	O
if	O
(	O
*	O
ibufp	pointer
==	O
'!'	O
)	O
{	O
++	O
ibufp	pointer
;	O
n	int
=	O
get_shell_command	function
(	O
)	O
;	O
if	O
(	O
n	int
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
n	int
)	O
printf	function
(	O
"%s\n"	pointer
,	O
shcmd	pointer
+	O
1	int
)	O
;	O
return	O
shcmd	pointer
;	O
}	O
else	O
if	O
(	O
size	pointer
>	O
path_max	function
(	O
0	int
)	O
)	O
{	O
set_error_msg	function
(	O
"Filename too long"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
!	O
traditional	function
(	O
)	O
&&	O
!	O
def_filename	array
[	O
0	int
]	O
)	O
{	O
set_error_msg	function
(	O
"No current filename"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
path_max	function
(	O
0	int
)	O
+	O
1	int
)	O
)	O
return	O
0	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
*	O
ibufp	pointer
!=	O
'\n'	O
;	O
)	O
buf	pointer
[	O
n	int
++	O
]	O
=	O
*	O
ibufp	pointer
++	O
;	O
buf	pointer
[	O
n	int
]	O
=	O
0	int
;	O
return	O
(	O
may_access_filename	function
(	O
buf	pointer
)	O
?	O
buf	pointer
:	O
0	int
)	O
;	O
}	O
static	O
void	O
invalid_address	function
(	O
void	O
)	O
{	O
set_error_msg	function
(	O
"Invalid address"	pointer
)	O
;	O
}	O
static	O
int	O
next_addr	function
(	O
int	O
*	O
addr_cnt	pointer
)	O
{	O
const	O
char	O
*	O
hd	pointer
=	O
ibufp	pointer
=	O
skip_blanks	function
(	O
ibufp	pointer
)	O
;	O
int	O
addr	int
=	O
current_addr	function
(	O
)	O
;	O
int	O
first	int
=	O
1	int
;	O
while	O
(	O
1	int
)	O
{	O
int	O
n	int
;	O
const	O
unsigned	O
char	O
ch	char
=	O
*	O
ibufp	pointer
;	O
if	O
(	O
isdigit	function
(	O
ch	char
)	O
)	O
{	O
if	O
(	O
!	O
first	int
)	O
{	O
invalid_address	function
(	O
)	O
;	O
return	O
-	O
2	int
;	O
}	O
;	O
if	O
(	O
!	O
parse_int	function
(	O
&	O
addr	int
,	O
ibufp	pointer
,	O
&	O
ibufp	pointer
)	O
)	O
return	O
-	O
2	int
;	O
}	O
else	O
switch	O
(	O
ch	char
)	O
{	O
case	O
'+'	O
:	O
case	O
'\t'	O
:	O
case	O
' '	O
:	O
case	O
'-'	O
:	O
ibufp	pointer
=	O
skip_blanks	function
(	O
++	O
ibufp	pointer
)	O
;	O
if	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
ibufp	pointer
)	O
)	O
{	O
if	O
(	O
!	O
parse_int	function
(	O
&	O
n	int
,	O
ibufp	pointer
,	O
&	O
ibufp	pointer
)	O
)	O
return	O
-	O
2	int
;	O
addr	int
+=	O
(	O
(	O
ch	char
==	O
'-'	O
)	O
?	O
-	O
n	int
:	O
n	int
)	O
;	O
}	O
else	O
if	O
(	O
ch	char
==	O
'+'	O
)	O
++	O
addr	int
;	O
else	O
if	O
(	O
ch	char
==	O
'-'	O
)	O
--	O
addr	int
;	O
break	O
;	O
case	O
'.'	O
:	O
case	O
'$'	O
:	O
if	O
(	O
!	O
first	int
)	O
{	O
invalid_address	function
(	O
)	O
;	O
return	O
-	O
2	int
;	O
}	O
;	O
++	O
ibufp	pointer
;	O
addr	int
=	O
(	O
(	O
ch	char
==	O
'.'	O
)	O
?	O
current_addr	function
(	O
)	O
:	O
last_addr	function
(	O
)	O
)	O
;	O
break	O
;	O
case	O
'/'	O
:	O
case	O
'?'	O
:	O
if	O
(	O
!	O
first	int
)	O
{	O
invalid_address	function
(	O
)	O
;	O
return	O
-	O
2	int
;	O
}	O
;	O
addr	int
=	O
get_matching_node_addr	function
(	O
&	O
ibufp	pointer
,	O
ch	char
==	O
'/'	O
)	O
;	O
if	O
(	O
addr	int
<	O
0	int
)	O
return	O
-	O
2	int
;	O
if	O
(	O
ch	char
==	O
*	O
ibufp	pointer
)	O
++	O
ibufp	pointer
;	O
break	O
;	O
case	O
'\''	O
:	O
if	O
(	O
!	O
first	int
)	O
{	O
invalid_address	function
(	O
)	O
;	O
return	O
-	O
2	int
;	O
}	O
;	O
++	O
ibufp	pointer
;	O
addr	int
=	O
get_marked_node_addr	function
(	O
*	O
ibufp	pointer
++	O
)	O
;	O
if	O
(	O
addr	int
<	O
0	int
)	O
return	O
-	O
2	int
;	O
break	O
;	O
case	O
'%'	O
:	O
case	O
','	O
:	O
case	O
';'	O
:	O
if	O
(	O
first	int
)	O
{	O
++	O
ibufp	pointer
;	O
++	O
*	O
addr_cnt	pointer
;	O
second_addr	int
=	O
(	O
(	O
ch	char
==	O
';'	O
)	O
?	O
current_addr	function
(	O
)	O
:	O
1	int
)	O
;	O
addr	int
=	O
last_addr	function
(	O
)	O
;	O
break	O
;	O
}	O
default	O
:	O
if	O
(	O
ibufp	pointer
==	O
hd	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
addr	int
<	O
0	int
||	O
addr	int
>	O
last_addr	function
(	O
)	O
)	O
{	O
invalid_address	function
(	O
)	O
;	O
return	O
-	O
2	int
;	O
}	O
++	O
*	O
addr_cnt	pointer
;	O
return	O
addr	int
;	O
}	O
first	int
=	O
0	int
;	O
}	O
}	O
static	O
int	O
extract_addr_range	function
(	O
void	O
)	O
{	O
int	O
addr	int
;	O
int	O
addr_cnt	pointer
=	O
0	int
;	O
first_addr	int
=	O
second_addr	int
=	O
current_addr	function
(	O
)	O
;	O
while	O
(	O
(	O
addr	int
=	O
next_addr	function
(	O
&	O
addr_cnt	pointer
)	O
)	O
>=	O
0	int
)	O
{	O
first_addr	int
=	O
second_addr	int
;	O
second_addr	int
=	O
addr	int
;	O
if	O
(	O
*	O
ibufp	pointer
!=	O
','	O
&&	O
*	O
ibufp	pointer
!=	O
';'	O
)	O
break	O
;	O
if	O
(	O
*	O
ibufp	pointer
++	O
==	O
';'	O
)	O
set_current_addr	function
(	O
addr	int
)	O
;	O
}	O
if	O
(	O
addr_cnt	pointer
==	O
1	int
||	O
second_addr	int
!=	O
addr	int
)	O
first_addr	int
=	O
second_addr	int
;	O
return	O
(	O
(	O
addr	int
!=	O
-	O
2	int
)	O
?	O
addr_cnt	pointer
:	O
-	O
1	int
)	O
;	O
}	O
static	O
char	O
get_third_addr	function
(	O
int	O
*	O
addr	int
)	O
{	O
int	O
ol1	int
=	O
first_addr	int
;	O
int	O
ol2	int
=	O
second_addr	int
;	O
int	O
addr_cnt	pointer
=	O
extract_addr_range	function
(	O
)	O
;	O
if	O
(	O
addr_cnt	pointer
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
traditional	function
(	O
)	O
&&	O
addr_cnt	pointer
==	O
0	int
)	O
{	O
set_error_msg	function
(	O
"Destination expected"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
second_addr	int
<	O
0	int
||	O
second_addr	int
>	O
last_addr	function
(	O
)	O
)	O
{	O
invalid_address	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
*	O
addr	int
=	O
second_addr	int
;	O
first_addr	int
=	O
ol1	int
;	O
second_addr	int
=	O
ol2	int
;	O
return	O
1	int
;	O
}	O
static	O
char	O
check_addr_range	function
(	O
const	O
int	O
n	int
,	O
const	O
int	O
m	char
,	O
const	O
int	O
addr_cnt	pointer
)	O
{	O
if	O
(	O
addr_cnt	pointer
==	O
0	int
)	O
{	O
first_addr	int
=	O
(	O
(	O
n	int
>=	O
0	int
)	O
?	O
n	int
:	O
current_addr	function
(	O
)	O
)	O
;	O
second_addr	int
=	O
(	O
(	O
m	char
>=	O
0	int
)	O
?	O
m	char
:	O
current_addr	function
(	O
)	O
)	O
;	O
}	O
if	O
(	O
first_addr	int
<	O
1	int
||	O
first_addr	int
>	O
second_addr	int
||	O
second_addr	int
>	O
last_addr	function
(	O
)	O
)	O
{	O
invalid_address	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
char	O
get_command_suffix	function
(	O
int	O
*	O
gflagsp	pointer
)	O
{	O
while	O
(	O
1	int
)	O
{	O
const	O
char	O
ch	char
=	O
*	O
ibufp	pointer
;	O
if	O
(	O
ch	char
==	O
'l'	O
)	O
*	O
gflagsp	pointer
|=	O
GLS	int
;	O
else	O
if	O
(	O
ch	char
==	O
'n'	O
)	O
*	O
gflagsp	pointer
|=	O
GNP	int
;	O
else	O
if	O
(	O
ch	char
==	O
'p'	O
)	O
*	O
gflagsp	pointer
|=	O
GPR	int
;	O
else	O
break	O
;	O
++	O
ibufp	pointer
;	O
}	O
if	O
(	O
*	O
ibufp	pointer
++	O
!=	O
'\n'	O
)	O
{	O
set_error_msg	function
(	O
"Invalid command suffix"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
char	O
unexpected_address	function
(	O
const	O
int	O
addr_cnt	pointer
)	O
{	O
if	O
(	O
addr_cnt	pointer
>	O
0	int
)	O
{	O
set_error_msg	function
(	O
"Unexpected address"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
unexpected_command_suffix	function
(	O
const	O
unsigned	O
char	O
ch	char
)	O
{	O
if	O
(	O
!	O
isspace	function
(	O
ch	char
)	O
)	O
{	O
set_error_msg	function
(	O
"Unexpected command suffix"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
command_s	function
(	O
int	O
*	O
gflagsp	pointer
,	O
const	O
int	O
addr_cnt	pointer
,	O
const	O
char	O
isglobal	char
)	O
{	O
static	O
int	O
gflags	int
=	O
0	int
;	O
static	O
int	O
snum	int
=	O
0	int
;	O
enum	O
Sflags	enum
{	O
SGG	int
=	O
0x01	int
,	O
SGP	int
=	O
0x02	int
,	O
SGR	int
=	O
0x04	int
,	O
SGF	int
=	O
0x08	int
}	O
sflags	enum
=	O
0	int
;	O
do	O
{	O
if	O
(	O
isdigit	function
(	O
(	O
unsigned	O
char	O
)	O
*	O
ibufp	pointer
)	O
)	O
{	O
if	O
(	O
!	O
parse_int	function
(	O
&	O
snum	int
,	O
ibufp	pointer
,	O
&	O
ibufp	pointer
)	O
)	O
return	O
0	int
;	O
sflags	enum
|=	O
SGF	int
;	O
gflags	int
&=	O
~	O
GSG	int
;	O
}	O
else	O
switch	O
(	O
*	O
ibufp	pointer
)	O
{	O
case	O
'\n'	O
:	O
sflags	enum
|=	O
SGF	int
;	O
break	O
;	O
case	O
'g'	O
:	O
sflags	enum
|=	O
SGG	int
;	O
++	O
ibufp	pointer
;	O
break	O
;	O
case	O
'p'	O
:	O
sflags	enum
|=	O
SGP	int
;	O
++	O
ibufp	pointer
;	O
break	O
;	O
case	O
'r'	O
:	O
sflags	enum
|=	O
SGR	int
;	O
++	O
ibufp	pointer
;	O
break	O
;	O
default	O
:	O
if	O
(	O
sflags	enum
)	O
{	O
set_error_msg	function
(	O
"Invalid command suffix"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
}	O
while	O
(	O
sflags	enum
&&	O
*	O
ibufp	pointer
!=	O
'\n'	O
)	O
;	O
if	O
(	O
sflags	enum
&&	O
!	O
prev_pattern	function
(	O
)	O
)	O
{	O
set_error_msg	function
(	O
"No previous substitution"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
sflags	enum
&	O
SGG	int
)	O
snum	int
=	O
0	int
;	O
if	O
(	O
*	O
ibufp	pointer
!=	O
'\n'	O
&&	O
ibufp	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
set_error_msg	function
(	O
"Invalid pattern delimiter"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
!	O
sflags	enum
||	O
(	O
sflags	enum
&	O
SGR	int
)	O
)	O
&&	O
!	O
new_compiled_pattern	function
(	O
&	O
ibufp	pointer
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
sflags	enum
&&	O
!	O
extract_subst_tail	function
(	O
&	O
ibufp	pointer
,	O
&	O
gflags	int
,	O
&	O
snum	int
,	O
isglobal	char
)	O
)	O
return	O
0	int
;	O
if	O
(	O
isglobal	char
)	O
gflags	int
|=	O
GLB	int
;	O
else	O
gflags	int
&=	O
~	O
GLB	int
;	O
if	O
(	O
sflags	enum
&	O
SGG	int
)	O
gflags	int
^=	O
GSG	int
;	O
if	O
(	O
sflags	enum
&	O
SGP	int
)	O
{	O
gflags	int
^=	O
GPR	int
;	O
gflags	int
&=	O
~	O
(	O
GLS	int
|	O
GNP	int
)	O
;	O
}	O
switch	O
(	O
*	O
ibufp	pointer
)	O
{	O
case	O
'l'	O
:	O
gflags	int
|=	O
GLS	int
;	O
++	O
ibufp	pointer
;	O
break	O
;	O
case	O
'n'	O
:	O
gflags	int
|=	O
GNP	int
;	O
++	O
ibufp	pointer
;	O
break	O
;	O
case	O
'p'	O
:	O
gflags	int
|=	O
GPR	int
;	O
++	O
ibufp	pointer
;	O
break	O
;	O
}	O
if	O
(	O
!	O
check_addr_range	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
addr_cnt	pointer
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
get_command_suffix	function
(	O
gflagsp	pointer
)	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
isglobal	char
)	O
clear_undo_stack	function
(	O
)	O
;	O
if	O
(	O
!	O
search_and_replace	function
(	O
first_addr	int
,	O
second_addr	int
,	O
gflags	int
,	O
snum	int
,	O
isglobal	char
)	O
)	O
return	O
0	int
;	O
if	O
(	O
(	O
gflags	int
&	O
(	O
GPR	int
|	O
GLS	int
|	O
GNP	int
)	O
)	O
&&	O
!	O
display_lines	function
(	O
current_addr	function
(	O
)	O
,	O
current_addr	function
(	O
)	O
,	O
gflags	int
)	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
char	O
exec_global	function
(	O
const	O
char	O
*	O
ibufp2	pointer
,	O
int	O
gflags	int
,	O
const	O
char	O
interact	char
)	O
;	O
static	O
int	O
exec_command	function
(	O
const	O
char	O
isglobal	char
)	O
{	O
const	O
char	O
*	O
fnp	pointer
;	O
int	O
gflags	int
=	O
0	int
;	O
int	O
addr	int
,	O
c	int
,	O
n	int
;	O
const	O
int	O
addr_cnt	pointer
=	O
extract_addr_range	function
(	O
)	O
;	O
if	O
(	O
addr_cnt	pointer
<	O
0	int
)	O
return	O
ERR	int
;	O
ibufp	pointer
=	O
skip_blanks	function
(	O
ibufp	pointer
)	O
;	O
c	int
=	O
*	O
ibufp	pointer
++	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'a'	O
:	O
if	O
(	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
isglobal	char
)	O
clear_undo_stack	function
(	O
)	O
;	O
if	O
(	O
!	O
append_lines	function
(	O
ibufp	pointer
,	O
second_addr	int
,	O
isglobal	char
)	O
)	O
return	O
ERR	int
;	O
ibufp	pointer
=	O
""	pointer
;	O
break	O
;	O
case	O
'c'	O
:	O
if	O
(	O
first_addr	int
==	O
0	int
)	O
first_addr	int
=	O
1	int
;	O
if	O
(	O
second_addr	int
==	O
0	int
)	O
second_addr	int
=	O
1	int
;	O
if	O
(	O
!	O
check_addr_range	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
addr_cnt	pointer
)	O
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
isglobal	char
)	O
clear_undo_stack	function
(	O
)	O
;	O
if	O
(	O
!	O
delete_lines	function
(	O
first_addr	int
,	O
second_addr	int
,	O
isglobal	char
)	O
||	O
!	O
append_lines	function
(	O
ibufp	pointer
,	O
current_addr	function
(	O
)	O
,	O
isglobal	char
)	O
)	O
return	O
ERR	int
;	O
ibufp	pointer
=	O
""	pointer
;	O
break	O
;	O
case	O
'd'	O
:	O
if	O
(	O
!	O
check_addr_range	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
addr_cnt	pointer
)	O
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
isglobal	char
)	O
clear_undo_stack	function
(	O
)	O
;	O
if	O
(	O
!	O
delete_lines	function
(	O
first_addr	int
,	O
second_addr	int
,	O
isglobal	char
)	O
)	O
return	O
ERR	int
;	O
inc_current_addr	function
(	O
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
if	O
(	O
modified	function
(	O
)	O
&&	O
!	O
scripted	function
(	O
)	O
)	O
return	O
EMOD	int
;	O
case	O
'E'	O
:	O
if	O
(	O
unexpected_address	function
(	O
addr_cnt	pointer
)	O
||	O
unexpected_command_suffix	function
(	O
*	O
ibufp	pointer
)	O
)	O
return	O
ERR	int
;	O
fnp	pointer
=	O
get_filename	function
(	O
)	O
;	O
if	O
(	O
!	O
fnp	pointer
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
||	O
!	O
delete_lines	function
(	O
1	int
,	O
last_addr	function
(	O
)	O
,	O
isglobal	char
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
close_sbuf	function
(	O
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
open_sbuf	function
(	O
)	O
)	O
return	O
FATAL	int
;	O
if	O
(	O
fnp	pointer
[	O
0	int
]	O
&&	O
fnp	pointer
[	O
0	int
]	O
!=	O
'!'	O
)	O
set_def_filename	function
(	O
fnp	pointer
)	O
;	O
if	O
(	O
traditional	function
(	O
)	O
&&	O
!	O
fnp	pointer
[	O
0	int
]	O
&&	O
!	O
def_filename	array
[	O
0	int
]	O
)	O
{	O
set_error_msg	function
(	O
"No current filename"	pointer
)	O
;	O
return	O
ERR	int
;	O
}	O
if	O
(	O
read_file	function
(	O
fnp	pointer
[	O
0	int
]	O
?	O
fnp	pointer
:	O
def_filename	array
,	O
0	int
)	O
<	O
0	int
)	O
return	O
ERR	int
;	O
reset_undo_state	function
(	O
)	O
;	O
set_modified	function
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
if	O
(	O
unexpected_address	function
(	O
addr_cnt	pointer
)	O
||	O
unexpected_command_suffix	function
(	O
*	O
ibufp	pointer
)	O
)	O
return	O
ERR	int
;	O
fnp	pointer
=	O
get_filename	function
(	O
)	O
;	O
if	O
(	O
!	O
fnp	pointer
)	O
return	O
ERR	int
;	O
if	O
(	O
fnp	pointer
[	O
0	int
]	O
==	O
'!'	O
)	O
{	O
set_error_msg	function
(	O
"Invalid redirection"	pointer
)	O
;	O
return	O
ERR	int
;	O
}	O
if	O
(	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
fnp	pointer
[	O
0	int
]	O
)	O
set_def_filename	function
(	O
fnp	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
strip_escapes	function
(	O
def_filename	array
)	O
)	O
;	O
break	O
;	O
case	O
'g'	O
:	O
case	O
'v'	O
:	O
case	O
'G'	O
:	O
case	O
'V'	O
:	O
if	O
(	O
isglobal	char
)	O
{	O
set_error_msg	function
(	O
"Cannot nest global commands"	pointer
)	O
;	O
return	O
ERR	int
;	O
}	O
n	int
=	O
(	O
c	int
==	O
'g'	O
||	O
c	int
==	O
'G'	O
)	O
;	O
if	O
(	O
!	O
check_addr_range	function
(	O
1	int
,	O
last_addr	function
(	O
)	O
,	O
addr_cnt	pointer
)	O
||	O
!	O
build_active_list	function
(	O
&	O
ibufp	pointer
,	O
first_addr	int
,	O
second_addr	int
,	O
n	int
)	O
)	O
return	O
ERR	int
;	O
n	int
=	O
(	O
c	int
==	O
'G'	O
||	O
c	int
==	O
'V'	O
)	O
;	O
if	O
(	O
(	O
n	int
&&	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
||	O
!	O
exec_global	function
(	O
ibufp	pointer
,	O
gflags	int
,	O
n	int
)	O
)	O
return	O
ERR	int
;	O
break	O
;	O
case	O
'h'	O
:	O
case	O
'H'	O
:	O
if	O
(	O
unexpected_address	function
(	O
addr_cnt	pointer
)	O
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
c	int
==	O
'H'	O
)	O
verbose	char
=	O
!	O
verbose	char
;	O
if	O
(	O
(	O
c	int
==	O
'h'	O
||	O
verbose	char
)	O
&&	O
errmsg	array
[	O
0	int
]	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
errmsg	array
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
if	O
(	O
second_addr	int
==	O
0	int
)	O
second_addr	int
=	O
1	int
;	O
if	O
(	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
isglobal	char
)	O
clear_undo_stack	function
(	O
)	O
;	O
if	O
(	O
!	O
append_lines	function
(	O
ibufp	pointer
,	O
second_addr	int
-	O
1	int
,	O
isglobal	char
)	O
)	O
return	O
ERR	int
;	O
ibufp	pointer
=	O
""	pointer
;	O
break	O
;	O
case	O
'j'	O
:	O
if	O
(	O
!	O
check_addr_range	function
(	O
-	O
1	int
,	O
current_addr	function
(	O
)	O
+	O
1	int
,	O
addr_cnt	pointer
)	O
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
isglobal	char
)	O
clear_undo_stack	function
(	O
)	O
;	O
if	O
(	O
first_addr	int
!=	O
second_addr	int
&&	O
!	O
join_lines	function
(	O
first_addr	int
,	O
second_addr	int
,	O
isglobal	char
)	O
)	O
return	O
ERR	int
;	O
break	O
;	O
case	O
'k'	O
:	O
n	int
=	O
*	O
ibufp	pointer
++	O
;	O
if	O
(	O
second_addr	int
==	O
0	int
)	O
{	O
invalid_address	function
(	O
)	O
;	O
return	O
ERR	int
;	O
}	O
if	O
(	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
||	O
!	O
mark_line_node	function
(	O
search_line_node	function
(	O
second_addr	int
)	O
,	O
n	int
)	O
)	O
return	O
ERR	int
;	O
break	O
;	O
case	O
'l'	O
:	O
case	O
'n'	O
:	O
case	O
'p'	O
:	O
if	O
(	O
c	int
==	O
'l'	O
)	O
n	int
=	O
GLS	int
;	O
else	O
if	O
(	O
c	int
==	O
'n'	O
)	O
n	int
=	O
GNP	int
;	O
else	O
n	int
=	O
GPR	int
;	O
if	O
(	O
!	O
check_addr_range	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
addr_cnt	pointer
)	O
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
||	O
!	O
display_lines	function
(	O
first_addr	int
,	O
second_addr	int
,	O
gflags	int
|	O
n	int
)	O
)	O
return	O
ERR	int
;	O
gflags	int
=	O
0	int
;	O
break	O
;	O
case	O
'm'	O
:	O
if	O
(	O
!	O
check_addr_range	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
addr_cnt	pointer
)	O
||	O
!	O
get_third_addr	function
(	O
&	O
addr	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
addr	int
>=	O
first_addr	int
&&	O
addr	int
<	O
second_addr	int
)	O
{	O
set_error_msg	function
(	O
"Invalid destination"	pointer
)	O
;	O
return	O
ERR	int
;	O
}	O
if	O
(	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
isglobal	char
)	O
clear_undo_stack	function
(	O
)	O
;	O
if	O
(	O
!	O
move_lines	function
(	O
first_addr	int
,	O
second_addr	int
,	O
addr	int
,	O
isglobal	char
)	O
)	O
return	O
ERR	int
;	O
break	O
;	O
case	O
'P'	O
:	O
case	O
'q'	O
:	O
case	O
'Q'	O
:	O
if	O
(	O
unexpected_address	function
(	O
addr_cnt	pointer
)	O
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
c	int
==	O
'P'	O
)	O
prompt_on	char
=	O
!	O
prompt_on	char
;	O
else	O
return	O
(	O
(	O
modified	function
(	O
)	O
&&	O
!	O
scripted	function
(	O
)	O
&&	O
c	int
==	O
'q'	O
)	O
?	O
EMOD	int
:	O
-	O
1	int
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
if	O
(	O
unexpected_command_suffix	function
(	O
*	O
ibufp	pointer
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
addr_cnt	pointer
==	O
0	int
)	O
second_addr	int
=	O
last_addr	function
(	O
)	O
;	O
fnp	pointer
=	O
get_filename	function
(	O
)	O
;	O
if	O
(	O
!	O
fnp	pointer
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
isglobal	char
)	O
clear_undo_stack	function
(	O
)	O
;	O
if	O
(	O
!	O
def_filename	array
[	O
0	int
]	O
&&	O
fnp	pointer
[	O
0	int
]	O
!=	O
'!'	O
)	O
set_def_filename	function
(	O
fnp	pointer
)	O
;	O
if	O
(	O
traditional	function
(	O
)	O
&&	O
!	O
fnp	pointer
[	O
0	int
]	O
&&	O
!	O
def_filename	array
[	O
0	int
]	O
)	O
{	O
set_error_msg	function
(	O
"No current filename"	pointer
)	O
;	O
return	O
ERR	int
;	O
}	O
addr	int
=	O
read_file	function
(	O
fnp	pointer
[	O
0	int
]	O
?	O
fnp	pointer
:	O
def_filename	array
,	O
second_addr	int
)	O
;	O
if	O
(	O
addr	int
<	O
0	int
)	O
return	O
ERR	int
;	O
if	O
(	O
addr	int
&&	O
addr	int
!=	O
last_addr	function
(	O
)	O
)	O
set_modified	function
(	O
1	int
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
if	O
(	O
!	O
command_s	function
(	O
&	O
gflags	int
,	O
addr_cnt	pointer
,	O
isglobal	char
)	O
)	O
return	O
ERR	int
;	O
break	O
;	O
case	O
't'	O
:	O
if	O
(	O
!	O
check_addr_range	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
addr_cnt	pointer
)	O
||	O
!	O
get_third_addr	function
(	O
&	O
addr	int
)	O
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
isglobal	char
)	O
clear_undo_stack	function
(	O
)	O
;	O
if	O
(	O
!	O
copy_lines	function
(	O
first_addr	int
,	O
second_addr	int
,	O
addr	int
)	O
)	O
return	O
ERR	int
;	O
break	O
;	O
case	O
'u'	O
:	O
if	O
(	O
unexpected_address	function
(	O
addr_cnt	pointer
)	O
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
||	O
!	O
undo	function
(	O
isglobal	char
)	O
)	O
return	O
ERR	int
;	O
break	O
;	O
case	O
'w'	O
:	O
case	O
'W'	O
:	O
n	int
=	O
*	O
ibufp	pointer
;	O
if	O
(	O
n	int
==	O
'q'	O
||	O
n	int
==	O
'Q'	O
)	O
++	O
ibufp	pointer
;	O
if	O
(	O
unexpected_command_suffix	function
(	O
*	O
ibufp	pointer
)	O
)	O
return	O
ERR	int
;	O
fnp	pointer
=	O
get_filename	function
(	O
)	O
;	O
if	O
(	O
!	O
fnp	pointer
)	O
return	O
ERR	int
;	O
if	O
(	O
addr_cnt	pointer
==	O
0	int
&&	O
!	O
last_addr	function
(	O
)	O
)	O
first_addr	int
=	O
second_addr	int
=	O
0	int
;	O
else	O
if	O
(	O
!	O
check_addr_range	function
(	O
1	int
,	O
last_addr	function
(	O
)	O
,	O
addr_cnt	pointer
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
def_filename	array
[	O
0	int
]	O
&&	O
fnp	pointer
[	O
0	int
]	O
!=	O
'!'	O
)	O
set_def_filename	function
(	O
fnp	pointer
)	O
;	O
if	O
(	O
traditional	function
(	O
)	O
&&	O
!	O
fnp	pointer
[	O
0	int
]	O
&&	O
!	O
def_filename	array
[	O
0	int
]	O
)	O
{	O
set_error_msg	function
(	O
"No current filename"	pointer
)	O
;	O
return	O
ERR	int
;	O
}	O
addr	int
=	O
write_file	function
(	O
fnp	pointer
[	O
0	int
]	O
?	O
fnp	pointer
:	O
def_filename	array
,	O
(	O
c	int
==	O
'W'	O
)	O
?	O
"a"	pointer
:	O
"w"	pointer
,	O
first_addr	int
,	O
second_addr	int
)	O
;	O
if	O
(	O
addr	int
<	O
0	int
)	O
return	O
ERR	int
;	O
if	O
(	O
addr	int
==	O
last_addr	function
(	O
)	O
)	O
set_modified	function
(	O
0	int
)	O
;	O
else	O
if	O
(	O
modified	function
(	O
)	O
&&	O
!	O
scripted	function
(	O
)	O
&&	O
n	int
==	O
'q'	O
)	O
return	O
EMOD	int
;	O
if	O
(	O
n	int
==	O
'q'	O
||	O
n	int
==	O
'Q'	O
)	O
return	O
-	O
1	int
;	O
break	O
;	O
case	O
'x'	O
:	O
if	O
(	O
second_addr	int
<	O
0	int
||	O
last_addr	function
(	O
)	O
<	O
second_addr	int
)	O
{	O
invalid_address	function
(	O
)	O
;	O
return	O
ERR	int
;	O
}	O
if	O
(	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
!	O
isglobal	char
)	O
clear_undo_stack	function
(	O
)	O
;	O
if	O
(	O
!	O
put_lines	function
(	O
second_addr	int
)	O
)	O
return	O
ERR	int
;	O
break	O
;	O
case	O
'y'	O
:	O
if	O
(	O
!	O
check_addr_range	function
(	O
-	O
1	int
,	O
-	O
1	int
,	O
addr_cnt	pointer
)	O
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
||	O
!	O
yank_lines	function
(	O
first_addr	int
,	O
second_addr	int
)	O
)	O
return	O
ERR	int
;	O
break	O
;	O
case	O
'z'	O
:	O
first_addr	int
=	O
1	int
;	O
if	O
(	O
!	O
check_addr_range	function
(	O
first_addr	int
,	O
current_addr	function
(	O
)	O
+	O
(	O
traditional	function
(	O
)	O
||	O
!	O
isglobal	char
)	O
,	O
addr_cnt	pointer
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
*	O
ibufp	pointer
>	O
'0'	O
&&	O
*	O
ibufp	pointer
<=	O
'9'	O
)	O
{	O
if	O
(	O
parse_int	function
(	O
&	O
n	int
,	O
ibufp	pointer
,	O
&	O
ibufp	pointer
)	O
)	O
set_window_lines	function
(	O
n	int
)	O
;	O
else	O
return	O
ERR	int
;	O
}	O
if	O
(	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
||	O
!	O
display_lines	function
(	O
second_addr	int
,	O
min	O
(	O
last_addr	function
(	O
)	O
,	O
second_addr	int
+	O
window_lines	function
(	O
)	O
)	O
,	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
gflags	int
=	O
0	int
;	O
break	O
;	O
case	O
'='	O
:	O
if	O
(	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
printf	function
(	O
"%d\n"	pointer
,	O
addr_cnt	pointer
?	O
second_addr	int
:	O
last_addr	function
(	O
)	O
)	O
;	O
break	O
;	O
case	O
'!'	O
:	O
if	O
(	O
unexpected_address	function
(	O
addr_cnt	pointer
)	O
)	O
return	O
ERR	int
;	O
n	int
=	O
get_shell_command	function
(	O
)	O
;	O
if	O
(	O
n	int
<	O
0	int
||	O
!	O
get_command_suffix	function
(	O
&	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
if	O
(	O
n	int
)	O
printf	function
(	O
"%s\n"	pointer
,	O
shcmd	pointer
+	O
1	int
)	O
;	O
system	function
(	O
shcmd	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
scripted	function
(	O
)	O
)	O
printf	function
(	O
"!\n"	pointer
)	O
;	O
break	O
;	O
case	O
'\n'	O
:	O
first_addr	int
=	O
1	int
;	O
if	O
(	O
!	O
check_addr_range	function
(	O
first_addr	int
,	O
current_addr	function
(	O
)	O
+	O
(	O
traditional	function
(	O
)	O
||	O
!	O
isglobal	char
)	O
,	O
addr_cnt	pointer
)	O
||	O
!	O
display_lines	function
(	O
second_addr	int
,	O
second_addr	int
,	O
0	int
)	O
)	O
return	O
ERR	int
;	O
break	O
;	O
case	O
'#'	O
:	O
while	O
(	O
*	O
ibufp	pointer
++	O
!=	O
'\n'	O
)	O
;	O
break	O
;	O
default	O
:	O
set_error_msg	function
(	O
"Unknown command"	pointer
)	O
;	O
return	O
ERR	int
;	O
}	O
if	O
(	O
gflags	int
&&	O
!	O
display_lines	function
(	O
current_addr	function
(	O
)	O
,	O
current_addr	function
(	O
)	O
,	O
gflags	int
)	O
)	O
return	O
ERR	int
;	O
return	O
0	int
;	O
}	O
static	O
char	O
exec_global	function
(	O
const	O
char	O
*	O
ibufp2	pointer
,	O
int	O
gflags	int
,	O
const	O
char	O
interact	char
)	O
{	O
static	O
char	O
*	O
buf	pointer
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
const	O
line_t	struct
*	O
lp	pointer
=	O
0	int
;	O
const	O
char	O
*	O
cmd	pointer
=	O
0	int
;	O
if	O
(	O
!	O
interact	char
)	O
{	O
if	O
(	O
traditional	function
(	O
)	O
&&	O
!	O
strcmp	function
(	O
ibufp2	pointer
,	O
"\n"	pointer
)	O
)	O
cmd	pointer
=	O
"p\n"	pointer
;	O
else	O
if	O
(	O
!	O
(	O
cmd	pointer
=	O
get_extended_line	function
(	O
ibufp2	pointer
,	O
0	int
,	O
0	int
)	O
)	O
)	O
return	O
0	int
;	O
}	O
clear_undo_stack	function
(	O
)	O
;	O
while	O
(	O
(	O
lp	pointer
=	O
next_active_node	function
(	O
)	O
)	O
)	O
{	O
set_current_addr	function
(	O
get_line_node_addr	function
(	O
lp	pointer
)	O
)	O
;	O
if	O
(	O
current_addr	function
(	O
)	O
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
interact	char
)	O
{	O
int	O
len	int
;	O
if	O
(	O
!	O
display_lines	function
(	O
current_addr	function
(	O
)	O
,	O
current_addr	function
(	O
)	O
,	O
gflags	int
)	O
)	O
return	O
0	int
;	O
do	O
{	O
ibufp2	pointer
=	O
get_tty_line	function
(	O
&	O
len	int
)	O
;	O
}	O
while	O
(	O
ibufp2	pointer
&&	O
len	int
>	O
0	int
&&	O
ibufp2	pointer
[	O
len	int
-	O
1	int
]	O
!=	O
'\n'	O
)	O
;	O
if	O
(	O
!	O
ibufp2	pointer
)	O
return	O
0	int
;	O
if	O
(	O
len	int
==	O
0	int
)	O
{	O
set_error_msg	function
(	O
"Unexpected end-of-file"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
len	int
==	O
1	int
&&	O
!	O
strcmp	function
(	O
ibufp2	pointer
,	O
"\n"	pointer
)	O
)	O
continue	O
;	O
if	O
(	O
len	int
==	O
2	int
&&	O
!	O
strcmp	function
(	O
ibufp2	pointer
,	O
"&\n"	pointer
)	O
)	O
{	O
if	O
(	O
!	O
cmd	pointer
)	O
{	O
set_error_msg	function
(	O
"No previous command"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
else	O
if	O
(	O
!	O
(	O
cmd	pointer
=	O
get_extended_line	function
(	O
ibufp2	pointer
,	O
&	O
len	int
,	O
0	int
)	O
)	O
)	O
return	O
0	int
;	O
else	O
{	O
if	O
(	O
!	O
resize_buffer	function
(	O
&	O
buf	pointer
,	O
&	O
bufsz	int
,	O
len	int
+	O
1	int
)	O
)	O
return	O
0	int
;	O
memcpy	function
(	O
buf	pointer
,	O
cmd	pointer
,	O
len	int
+	O
1	int
)	O
;	O
cmd	pointer
=	O
buf	pointer
;	O
}	O
}	O
ibufp	pointer
=	O
cmd	pointer
;	O
while	O
(	O
*	O
ibufp	pointer
)	O
if	O
(	O
exec_command	function
(	O
1	int
)	O
<	O
0	int
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
int	O
main_loop	function
(	O
const	O
char	O
loose	char
)	O
{	O
extern	O
jmp_buf	array
jmp_state	array
;	O
volatile	O
int	O
err_status	int
=	O
0	int
;	O
volatile	O
int	O
linenum	int
=	O
0	int
;	O
int	O
len	int
,	O
status	int
,	O
old_status	int
;	O
disable_interrupts	function
(	O
)	O
;	O
set_signals	function
(	O
)	O
;	O
status	int
=	O
setjmp	function
(	O
jmp_state	array
)	O
;	O
if	O
(	O
!	O
status	int
)	O
enable_interrupts	function
(	O
)	O
;	O
else	O
{	O
status	int
=	O
-	O
1	int
;	O
fputs	function
(	O
"\n?\n"	pointer
,	O
stderr	pointer
)	O
;	O
set_error_msg	function
(	O
"Interrupt"	pointer
)	O
;	O
}	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
status	int
<	O
0	int
&&	O
verbose	char
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
errmsg	array
)	O
;	O
if	O
(	O
prompt_on	char
)	O
{	O
printf	function
(	O
"%s"	pointer
,	O
prompt_str	array
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
}	O
ibufp	pointer
=	O
get_tty_line	function
(	O
&	O
len	int
)	O
;	O
if	O
(	O
!	O
ibufp	pointer
)	O
return	O
err_status	int
;	O
if	O
(	O
!	O
len	int
)	O
{	O
if	O
(	O
!	O
modified	function
(	O
)	O
||	O
scripted	function
(	O
)	O
)	O
return	O
err_status	int
;	O
fputs	function
(	O
"?\n"	pointer
,	O
stderr	pointer
)	O
;	O
set_error_msg	function
(	O
"Warning: file modified"	pointer
)	O
;	O
if	O
(	O
is_regular_file	function
(	O
0	int
)	O
)	O
{	O
if	O
(	O
verbose	char
)	O
fprintf	function
(	O
stderr	pointer
,	O
"script, line %d: %s\n"	pointer
,	O
linenum	int
,	O
errmsg	array
)	O
;	O
return	O
2	int
;	O
}	O
set_modified	function
(	O
0	int
)	O
;	O
status	int
=	O
EMOD	int
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
ibufp	pointer
[	O
len	int
-	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
set_error_msg	function
(	O
"Unexpected end-of-file"	pointer
)	O
;	O
status	int
=	O
ERR	int
;	O
continue	O
;	O
}	O
else	O
++	O
linenum	int
;	O
old_status	int
=	O
status	int
;	O
status	int
=	O
exec_command	function
(	O
0	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
status	int
==	O
-	O
1	int
)	O
return	O
err_status	int
;	O
if	O
(	O
status	int
==	O
EMOD	int
)	O
{	O
if	O
(	O
old_status	int
==	O
EMOD	int
)	O
return	O
err_status	int
;	O
fputs	function
(	O
"?\n"	pointer
,	O
stderr	pointer
)	O
;	O
set_error_msg	function
(	O
"Warning: file modified"	pointer
)	O
;	O
if	O
(	O
is_regular_file	function
(	O
0	int
)	O
)	O
{	O
if	O
(	O
verbose	char
)	O
fprintf	function
(	O
stderr	pointer
,	O
"script, line %d: %s\n"	pointer
,	O
linenum	int
,	O
errmsg	array
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
status	int
==	O
FATAL	int
)	O
{	O
if	O
(	O
verbose	char
)	O
{	O
if	O
(	O
is_regular_file	function
(	O
0	int
)	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"script, line %d: %s\n"	pointer
,	O
linenum	int
,	O
errmsg	array
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"%s\n"	pointer
,	O
errmsg	array
)	O
;	O
}	O
return	O
1	int
;	O
}	O
else	O
{	O
fputs	function
(	O
"?\n"	pointer
,	O
stderr	pointer
)	O
;	O
if	O
(	O
is_regular_file	function
(	O
0	int
)	O
)	O
{	O
if	O
(	O
verbose	char
)	O
fprintf	function
(	O
stderr	pointer
,	O
"script, line %d: %s\n"	pointer
,	O
linenum	int
,	O
errmsg	array
)	O
;	O
return	O
1	int
;	O
}	O
}	O
if	O
(	O
!	O
loose	char
)	O
err_status	int
=	O
1	int
;	O
}	O
}	O
void	O
set_error_msg	function
(	O
const	O
char	O
*	O
msg	pointer
)	O
{	O
if	O
(	O
!	O
msg	pointer
)	O
msg	pointer
=	O
""	pointer
;	O
strncpy	function
(	O
errmsg	array
,	O
msg	pointer
,	O
sizeof	O
(	O
errmsg	array
)	O
)	O
;	O
errmsg	array
[	O
sizeof	O
(	O
errmsg	array
)	O
-	O
1	int
]	O
=	O
0	int
;	O
}	O
