static	O
SCM	function
eval_catch_body	function
(	O
void	O
*	O
list	pointer
)	O
{	O
return	O
scm_primitive_eval	function
(	O
(	O
SCM	function
)	O
list	pointer
)	O
;	O
}	O
static	O
SCM	function
eval_catch_handler	function
(	O
void	O
*	O
data	pointer
,	O
SCM	function
tag	pointer
,	O
SCM	function
throw_args	int
)	O
{	O
scm_handle_by_message_noexit	function
(	O
"mailutils"	pointer
,	O
tag	pointer
,	O
throw_args	int
)	O
;	O
longjmp	function
(	O
*	O
(	O
jmp_buf	array
*	O
)	O
data	pointer
,	O
1	int
)	O
;	O
}	O
struct	O
scheme_exec_data	struct
{	O
SCM	function
(	O
*	O
handler	array
)	O
(	O
void	O
*	O
data	pointer
)	O
;	O
void	O
*	O
data	pointer
;	O
SCM	function
result	pointer
;	O
}	O
;	O
static	O
SCM	function
scheme_safe_exec_body	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
scheme_exec_data	struct
*	O
ed	pointer
=	O
data	pointer
;	O
ed	pointer
->	O
result	pointer
=	O
ed	pointer
->	O
handler	array
(	O
ed	pointer
->	O
data	pointer
)	O
;	O
return	O
SCM_BOOL_F	O
;	O
}	O
int	O
mu_guile_safe_exec	function
(	O
SCM	function
(	O
*	O
handler	array
)	O
(	O
void	O
*	O
data	pointer
)	O
,	O
void	O
*	O
data	pointer
,	O
SCM	function
*	O
result	pointer
)	O
{	O
jmp_buf	array
jmp_env	array
;	O
struct	O
scheme_exec_data	struct
ed	pointer
;	O
if	O
(	O
setjmp	function
(	O
jmp_env	array
)	O
)	O
return	O
1	int
;	O
ed	pointer
.	O
handler	array
=	O
handler	array
;	O
ed	pointer
.	O
data	pointer
=	O
data	pointer
;	O
scm_c_catch	function
(	O
SCM_BOOL_T	O
,	O
scheme_safe_exec_body	function
,	O
(	O
void	O
*	O
)	O
&	O
ed	pointer
,	O
eval_catch_handler	function
,	O
&	O
jmp_env	array
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
result	pointer
)	O
*	O
result	pointer
=	O
ed	pointer
.	O
result	pointer
;	O
return	O
0	int
;	O
}	O
SCM	function
lookup_handler	function
(	O
void	O
*	O
data	pointer
)	O
{	O
const	O
char	O
*	O
symbol	pointer
=	O
(	O
const	O
char	O
*	O
)	O
data	pointer
;	O
return	O
MU_SCM_SYMBOL_VALUE	O
(	O
symbol	pointer
)	O
;	O
}	O
int	O
mu_guile_sym_lookup	function
(	O
const	O
char	O
*	O
symbol	pointer
,	O
SCM	function
*	O
result	pointer
)	O
{	O
return	O
mu_guile_safe_exec	function
(	O
lookup_handler	function
,	O
(	O
void	O
*	O
)	O
symbol	pointer
,	O
result	pointer
)	O
;	O
}	O
int	O
mu_guile_safe_proc_call	function
(	O
SCM	function
proc	int
,	O
SCM	function
arglist	int
,	O
SCM	function
*	O
presult	pointer
)	O
{	O
jmp_buf	array
jmp_env	array
;	O
SCM	function
cell	O
,	O
result	pointer
;	O
if	O
(	O
setjmp	function
(	O
jmp_env	array
)	O
)	O
return	O
1	int
;	O
cell	O
=	O
scm_cons	function
(	O
proc	int
,	O
arglist	int
)	O
;	O
result	pointer
=	O
scm_c_catch	function
(	O
SCM_BOOL_T	O
,	O
eval_catch_body	function
,	O
cell	O
,	O
eval_catch_handler	function
,	O
&	O
jmp_env	array
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
presult	pointer
)	O
*	O
presult	pointer
=	O
result	pointer
;	O
return	O
0	int
;	O
}	O
void	O
mu_guile_init	function
(	O
int	O
debug	int
)	O
{	O
scm_init_guile	function
(	O
)	O
;	O
scm_load_goops	function
(	O
)	O
;	O
if	O
(	O
debug	int
)	O
{	O
}	O
mu_scm_init	function
(	O
)	O
;	O
}	O
struct	O
load_closure	struct
{	O
const	O
char	O
*	O
filename	pointer
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
}	O
;	O
static	O
SCM	function
load_path_handler	function
(	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
load_closure	struct
*	O
lp	pointer
=	O
data	pointer
;	O
scm_set_program_arguments	function
(	O
lp	pointer
->	O
argc	int
,	O
lp	pointer
->	O
argv	pointer
,	O
(	O
char	O
*	O
)	O
lp	pointer
->	O
filename	pointer
)	O
;	O
scm_primitive_load	function
(	O
scm_from_locale_string	function
(	O
lp	pointer
->	O
filename	pointer
)	O
)	O
;	O
return	O
SCM_UNDEFINED	O
;	O
}	O
int	O
mu_guile_load	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
load_closure	struct
lc	struct
;	O
lc	struct
.	O
filename	pointer
=	O
filename	pointer
;	O
lc	struct
.	O
argc	int
=	O
argc	int
;	O
lc	struct
.	O
argv	pointer
=	O
argv	pointer
;	O
return	O
mu_guile_safe_exec	function
(	O
load_path_handler	function
,	O
&	O
lc	struct
,	O
NULL	O
)	O
;	O
}	O
static	O
SCM	function
eval_handler	function
(	O
void	O
*	O
data	pointer
)	O
{	O
const	O
char	O
*	O
string	pointer
=	O
data	pointer
;	O
scm_c_eval_string	function
(	O
string	pointer
)	O
;	O
return	O
SCM_UNDEFINED	O
;	O
}	O
int	O
mu_guile_eval	function
(	O
const	O
char	O
*	O
string	pointer
)	O
{	O
return	O
mu_guile_safe_exec	function
(	O
eval_handler	function
,	O
(	O
void	O
*	O
)	O
string	pointer
,	O
NULL	O
)	O
;	O
}	O
extern	O
SCM	function
mu_scm_mailbox_create0	function
(	O
mu_mailbox_t	pointer
mbox	pointer
,	O
int	O
noclose	int
)	O
;	O
int	O
mu_guile_mailbox_apply	function
(	O
mu_mailbox_t	pointer
mbx	pointer
,	O
char	O
*	O
funcname	pointer
)	O
{	O
SCM	function
proc	int
;	O
if	O
(	O
mu_guile_sym_lookup	function
(	O
funcname	pointer
,	O
&	O
proc	int
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
scm_procedure_p	function
(	O
proc	int
)	O
!=	O
SCM_BOOL_T	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_guile_safe_proc_call	function
(	O
proc	int
,	O
scm_list_1	function
(	O
mu_scm_mailbox_create0	function
(	O
mbx	pointer
,	O
1	int
)	O
)	O
,	O
NULL	O
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_guile_message_apply	function
(	O
mu_message_t	pointer
msg	pointer
,	O
char	O
*	O
funcname	pointer
)	O
{	O
SCM	function
proc	int
;	O
if	O
(	O
mu_guile_sym_lookup	function
(	O
funcname	pointer
,	O
&	O
proc	int
)	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
scm_procedure_p	function
(	O
proc	int
)	O
!=	O
SCM_BOOL_T	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_guile_safe_proc_call	function
(	O
proc	int
,	O
scm_list_1	function
(	O
mu_scm_message_create	function
(	O
SCM_BOOL_F	O
,	O
msg	pointer
)	O
)	O
,	O
NULL	O
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
return	O
0	int
;	O
}	O
