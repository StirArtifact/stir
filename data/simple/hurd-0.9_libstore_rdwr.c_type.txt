static	O
inline	O
store_offset_t	long
store_find_first_run	function
(	O
struct	O
store	struct
*	O
store	struct
,	O
store_offset_t	long
addr	long
,	O
struct	O
store_run	struct
*	O
*	O
run	pointer
,	O
struct	O
store_run	struct
*	O
*	O
runs_end	pointer
,	O
store_offset_t	long
*	O
base	pointer
,	O
size_t	long
*	O
index	function
)	O
{	O
struct	O
store_run	struct
*	O
tail	pointer
=	O
store	struct
->	O
runs	pointer
,	O
*	O
tail_end	pointer
=	O
tail	pointer
+	O
store	struct
->	O
num_runs	long
;	O
store_offset_t	long
wrap_src	long
=	O
store	struct
->	O
wrap_src	long
;	O
if	O
(	O
addr	long
>=	O
wrap_src	long
&&	O
addr	long
<	O
store	struct
->	O
end	long
)	O
{	O
*	O
base	pointer
=	O
addr	long
/	O
store	struct
->	O
wrap_dst	long
;	O
addr	long
%=	O
wrap_src	long
;	O
}	O
else	O
*	O
base	pointer
=	O
0	int
;	O
while	O
(	O
tail	pointer
<	O
tail_end	pointer
)	O
{	O
store_offset_t	long
run_blocks	long
=	O
tail	pointer
->	O
length	long
;	O
if	O
(	O
run_blocks	long
>	O
addr	long
)	O
{	O
*	O
run	pointer
=	O
tail	pointer
;	O
*	O
runs_end	pointer
=	O
tail_end	pointer
;	O
*	O
index	function
=	O
tail	pointer
-	O
store	struct
->	O
runs	pointer
;	O
return	O
addr	long
;	O
}	O
addr	long
-=	O
run_blocks	long
;	O
tail	pointer
++	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
inline	O
int	O
store_next_run	function
(	O
struct	O
store	struct
*	O
store	struct
,	O
struct	O
store_run	struct
*	O
runs_end	pointer
,	O
struct	O
store_run	struct
*	O
*	O
run	pointer
,	O
store_offset_t	long
*	O
base	pointer
,	O
size_t	long
*	O
index	function
)	O
{	O
(	O
*	O
run	pointer
)	O
++	O
;	O
(	O
*	O
index	function
)	O
++	O
;	O
if	O
(	O
*	O
run	pointer
==	O
runs_end	pointer
)	O
{	O
*	O
run	pointer
=	O
store	struct
->	O
runs	pointer
;	O
*	O
base	pointer
+=	O
store	struct
->	O
wrap_dst	long
;	O
*	O
index	function
=	O
0	int
;	O
return	O
(	O
*	O
base	pointer
<	O
store	struct
->	O
end	long
)	O
;	O
}	O
else	O
return	O
1	int
;	O
}	O
error_t	function
store_write	function
(	O
struct	O
store	struct
*	O
store	struct
,	O
store_offset_t	long
addr	long
,	O
const	O
void	O
*	O
buf	pointer
,	O
size_t	long
len	int
,	O
size_t	long
*	O
amount	pointer
)	O
{	O
error_t	function
err	function
;	O
size_t	long
index	function
;	O
store_offset_t	long
base	pointer
;	O
struct	O
store_run	struct
*	O
run	pointer
,	O
*	O
runs_end	pointer
;	O
int	O
block_shift	int
=	O
store	struct
->	O
log2_block_size	int
;	O
store_write_meth_t	pointer
write	int
=	O
store	struct
->	O
class	pointer
->	O
write	int
;	O
if	O
(	O
store	struct
->	O
flags	int
&	O
STORE_READONLY	int
)	O
return	O
EROFS	O
;	O
if	O
(	O
(	O
addr	long
<<	O
block_shift	int
)	O
+	O
len	int
>	O
store	struct
->	O
size	long
)	O
return	O
EIO	O
;	O
if	O
(	O
store	struct
->	O
block_size	long
!=	O
0	int
&&	O
(	O
len	int
&	O
(	O
store	struct
->	O
block_size	long
-	O
1	int
)	O
)	O
!=	O
0	int
)	O
return	O
EINVAL	O
;	O
addr	long
=	O
store_find_first_run	function
(	O
store	struct
,	O
addr	long
,	O
&	O
run	pointer
,	O
&	O
runs_end	pointer
,	O
&	O
base	pointer
,	O
&	O
index	function
)	O
;	O
if	O
(	O
addr	long
<	O
0	int
)	O
err	function
=	O
EIO	O
;	O
else	O
if	O
(	O
(	O
len	int
>>	O
block_shift	int
)	O
<=	O
run	pointer
->	O
length	long
-	O
addr	long
)	O
err	function
=	O
(	O
*	O
write	int
)	O
(	O
store	struct
,	O
base	pointer
+	O
run	pointer
->	O
start	long
+	O
addr	long
,	O
index	function
,	O
buf	pointer
,	O
len	int
,	O
amount	pointer
)	O
;	O
else	O
{	O
mach_msg_type_number_t	O
try	O
,	O
written	O
;	O
try	O
=	O
(	O
run	pointer
->	O
length	long
-	O
addr	long
)	O
<<	O
block_shift	int
;	O
err	function
=	O
(	O
*	O
write	int
)	O
(	O
store	struct
,	O
base	pointer
+	O
run	pointer
->	O
start	long
+	O
addr	long
,	O
index	function
,	O
buf	pointer
,	O
try	O
,	O
&	O
written	O
)	O
;	O
if	O
(	O
!	O
err	function
&&	O
written	O
==	O
try	O
)	O
{	O
buf	pointer
+=	O
written	O
;	O
len	int
-=	O
written	O
;	O
while	O
(	O
store_next_run	function
(	O
store	struct
,	O
runs_end	pointer
,	O
&	O
run	pointer
,	O
&	O
base	pointer
,	O
&	O
index	function
)	O
&&	O
run	pointer
->	O
start	long
>=	O
0	int
)	O
{	O
mach_msg_type_number_t	O
seg_written	O
;	O
if	O
(	O
(	O
len	int
>>	O
block_shift	int
)	O
<=	O
run	pointer
->	O
length	long
)	O
try	O
=	O
len	int
;	O
else	O
try	O
=	O
run	pointer
->	O
length	long
<<	O
block_shift	int
;	O
err	function
=	O
(	O
*	O
write	int
)	O
(	O
store	struct
,	O
base	pointer
+	O
run	pointer
->	O
start	long
,	O
index	function
,	O
buf	pointer
,	O
try	O
,	O
&	O
seg_written	O
)	O
;	O
if	O
(	O
err	function
)	O
break	O
;	O
written	O
+=	O
seg_written	O
;	O
if	O
(	O
seg_written	O
<	O
try	O
)	O
break	O
;	O
len	int
-=	O
seg_written	O
;	O
if	O
(	O
len	int
==	O
0	int
)	O
break	O
;	O
buf	pointer
+=	O
seg_written	O
;	O
}	O
}	O
*	O
amount	pointer
=	O
written	O
;	O
}	O
return	O
err	function
;	O
}	O
error_t	function
store_read	function
(	O
struct	O
store	struct
*	O
store	struct
,	O
store_offset_t	long
addr	long
,	O
size_t	long
amount	pointer
,	O
void	O
*	O
*	O
buf	pointer
,	O
size_t	long
*	O
len	int
)	O
{	O
size_t	long
index	function
;	O
store_offset_t	long
base	pointer
;	O
struct	O
store_run	struct
*	O
run	pointer
,	O
*	O
runs_end	pointer
;	O
int	O
block_shift	int
=	O
store	struct
->	O
log2_block_size	int
;	O
store_read_meth_t	pointer
read	pointer
=	O
store	struct
->	O
class	pointer
->	O
read	pointer
;	O
addr	long
=	O
store_find_first_run	function
(	O
store	struct
,	O
addr	long
,	O
&	O
run	pointer
,	O
&	O
runs_end	pointer
,	O
&	O
base	pointer
,	O
&	O
index	function
)	O
;	O
if	O
(	O
addr	long
<	O
0	int
||	O
run	pointer
->	O
start	long
<	O
0	int
)	O
return	O
EIO	O
;	O
if	O
(	O
(	O
addr	long
<<	O
block_shift	int
)	O
+	O
amount	pointer
>	O
store	struct
->	O
size	long
)	O
amount	pointer
=	O
store	struct
->	O
size	long
-	O
(	O
addr	long
<<	O
block_shift	int
)	O
;	O
if	O
(	O
store	struct
->	O
block_size	long
!=	O
0	int
&&	O
(	O
amount	pointer
&	O
(	O
store	struct
->	O
block_size	long
-	O
1	int
)	O
)	O
!=	O
0	int
)	O
return	O
EINVAL	O
;	O
if	O
(	O
(	O
amount	pointer
>>	O
block_shift	int
)	O
<=	O
run	pointer
->	O
length	long
-	O
addr	long
)	O
return	O
(	O
*	O
read	pointer
)	O
(	O
store	struct
,	O
base	pointer
+	O
run	pointer
->	O
start	long
+	O
addr	long
,	O
index	function
,	O
amount	pointer
,	O
buf	pointer
,	O
len	int
)	O
;	O
else	O
{	O
error_t	function
err	function
;	O
int	O
all	int
;	O
void	O
*	O
whole_buf	pointer
=	O
*	O
buf	pointer
,	O
*	O
buf_end	pointer
;	O
size_t	long
whole_buf_len	long
=	O
*	O
len	int
;	O
inline	O
error_t	function
seg_read	function
(	O
store_offset_t	long
addr	long
,	O
size_t	long
len	int
,	O
int	O
*	O
all	int
)	O
{	O
void	O
*	O
seg_buf	O
=	O
buf_end	pointer
;	O
size_t	long
seg_buf_len	O
=	O
len	int
;	O
error_t	function
err	function
=	O
(	O
*	O
read	pointer
)	O
(	O
store	struct
,	O
addr	long
,	O
index	function
,	O
len	int
,	O
&	O
seg_buf	O
,	O
&	O
seg_buf_len	O
)	O
;	O
if	O
(	O
!	O
err	function
)	O
{	O
if	O
(	O
seg_buf	O
!=	O
buf_end	pointer
)	O
{	O
memcpy	function
(	O
buf_end	pointer
,	O
seg_buf	O
,	O
seg_buf_len	O
)	O
;	O
munmap	function
(	O
seg_buf	O
,	O
seg_buf_len	O
)	O
;	O
}	O
buf_end	pointer
+=	O
seg_buf_len	O
;	O
amount	pointer
-=	O
seg_buf_len	O
;	O
*	O
all	int
=	O
(	O
seg_buf_len	O
==	O
len	int
)	O
;	O
}	O
return	O
err	function
;	O
}	O
if	O
(	O
whole_buf_len	long
<	O
amount	pointer
)	O
{	O
whole_buf_len	long
=	O
amount	pointer
;	O
whole_buf	pointer
=	O
mmap	function
(	O
0	int
,	O
amount	pointer
,	O
PROT_READ	int
|	O
PROT_WRITE	int
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
whole_buf	pointer
==	O
(	O
void	O
*	O
)	O
-	O
1	int
)	O
return	O
errno	O
;	O
}	O
buf_end	pointer
=	O
whole_buf	pointer
;	O
err	function
=	O
seg_read	function
(	O
base	pointer
+	O
run	pointer
->	O
start	long
+	O
addr	long
,	O
(	O
run	pointer
->	O
length	long
-	O
addr	long
)	O
<<	O
block_shift	int
,	O
&	O
all	int
)	O
;	O
while	O
(	O
!	O
err	function
&&	O
all	int
&&	O
amount	pointer
>	O
0	int
&&	O
store_next_run	function
(	O
store	struct
,	O
runs_end	pointer
,	O
&	O
run	pointer
,	O
&	O
base	pointer
,	O
&	O
index	function
)	O
)	O
{	O
if	O
(	O
run	pointer
->	O
start	long
<	O
0	int
)	O
break	O
;	O
else	O
err	function
=	O
seg_read	function
(	O
base	pointer
+	O
run	pointer
->	O
start	long
,	O
(	O
amount	pointer
>>	O
block_shift	int
)	O
<=	O
run	pointer
->	O
length	long
?	O
amount	pointer
:	O
(	O
run	pointer
->	O
length	long
<<	O
block_shift	int
)	O
,	O
&	O
all	int
)	O
;	O
}	O
*	O
len	int
=	O
buf_end	pointer
-	O
whole_buf	pointer
;	O
if	O
(	O
*	O
len	int
>	O
0	int
)	O
err	function
=	O
0	int
;	O
if	O
(	O
whole_buf	pointer
!=	O
*	O
buf	pointer
)	O
{	O
if	O
(	O
err	function
)	O
munmap	function
(	O
whole_buf	pointer
,	O
whole_buf_len	long
)	O
;	O
else	O
{	O
vm_size_t	O
unused	O
=	O
whole_buf_len	long
-	O
round_page	O
(	O
*	O
len	int
)	O
;	O
if	O
(	O
unused	O
)	O
munmap	function
(	O
whole_buf	pointer
+	O
whole_buf_len	long
-	O
unused	O
,	O
unused	O
)	O
;	O
*	O
buf	pointer
=	O
whole_buf	pointer
;	O
}	O
}	O
return	O
err	function
;	O
}	O
}	O
error_t	function
store_set_size	function
(	O
struct	O
store	struct
*	O
store	struct
,	O
size_t	long
newsize	long
)	O
{	O
error_t	function
err	function
;	O
store_set_size_meth_t	pointer
set_size	pointer
=	O
store	struct
->	O
class	pointer
->	O
set_size	pointer
;	O
err	function
=	O
(	O
*	O
set_size	pointer
)	O
(	O
store	struct
,	O
newsize	long
)	O
;	O
return	O
err	function
;	O
}	O
