typedef	O
struct	O
request_table	struct
table_t	struct
;	O
struct	O
request_table	struct
{	O
table_t	struct
*	O
next	pointer
,	O
*	O
prev	pointer
;	O
CTL_MSG	struct
request	pointer
;	O
time_t	long
time	struct
;	O
}	O
;	O
static	O
table_t	struct
*	O
table	pointer
;	O
static	O
void	O
table_delete	function
(	O
table_t	struct
*	O
ptr	pointer
)	O
{	O
table_t	struct
*	O
t	pointer
;	O
if	O
(	O
(	O
t	pointer
=	O
ptr	pointer
->	O
prev	pointer
)	O
!=	O
NULL	O
)	O
t	pointer
->	O
next	pointer
=	O
ptr	pointer
->	O
next	pointer
;	O
else	O
table	pointer
=	O
ptr	pointer
->	O
next	pointer
;	O
if	O
(	O
(	O
t	pointer
=	O
ptr	pointer
->	O
next	pointer
)	O
!=	O
NULL	O
)	O
t	pointer
->	O
prev	pointer
=	O
ptr	pointer
->	O
prev	pointer
;	O
free	function
(	O
ptr	pointer
)	O
;	O
}	O
static	O
CTL_MSG	struct
*	O
lookup_request	function
(	O
CTL_MSG	struct
*	O
request	pointer
,	O
int	O
(	O
*	O
comp	pointer
)	O
(	O
table_t	struct
*	O
,	O
CTL_MSG	struct
*	O
,	O
time_t	long
*	O
)	O
)	O
{	O
table_t	struct
*	O
ptr	pointer
;	O
time_t	long
now	long
;	O
time	struct
(	O
&	O
now	long
)	O
;	O
if	O
(	O
debug	int
)	O
print_request	function
(	O
"lookup_request"	pointer
,	O
request	pointer
)	O
;	O
for	O
(	O
ptr	pointer
=	O
table	pointer
;	O
ptr	pointer
;	O
ptr	pointer
=	O
ptr	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
debug	int
)	O
print_request	function
(	O
"comparing against: "	pointer
,	O
&	O
ptr	pointer
->	O
request	pointer
)	O
;	O
if	O
(	O
(	O
ptr	pointer
->	O
time	struct
-	O
now	long
)	O
>	O
max_request_ttl	long
)	O
{	O
if	O
(	O
debug	int
)	O
print_request	function
(	O
"deleting expired entry"	pointer
,	O
&	O
ptr	pointer
->	O
request	pointer
)	O
;	O
table_delete	function
(	O
ptr	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
comp	pointer
(	O
ptr	pointer
,	O
request	pointer
,	O
&	O
now	long
)	O
==	O
0	int
)	O
{	O
if	O
(	O
debug	int
)	O
print_request	function
(	O
"found"	pointer
,	O
&	O
ptr	pointer
->	O
request	pointer
)	O
;	O
return	O
&	O
ptr	pointer
->	O
request	pointer
;	O
}	O
}	O
}	O
if	O
(	O
debug	int
)	O
syslog	function
(	O
LOG_DEBUG	int
,	O
"not found"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
fuzzy_comp	function
(	O
table_t	struct
*	O
ptr	pointer
,	O
CTL_MSG	struct
*	O
request	pointer
,	O
time_t	long
*	O
unused	pointer
_GL_UNUSED_PARAMETER	O
)	O
{	O
if	O
(	O
ptr	pointer
->	O
request	pointer
.	O
type	char
==	O
LEAVE_INVITE	int
&&	O
strcmp	function
(	O
request	pointer
->	O
l_name	array
,	O
ptr	pointer
->	O
request	pointer
.	O
r_name	array
)	O
==	O
0	int
&&	O
strcmp	function
(	O
request	pointer
->	O
r_name	array
,	O
ptr	pointer
->	O
request	pointer
.	O
l_name	array
)	O
==	O
0	int
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
CTL_MSG	struct
*	O
find_match	function
(	O
CTL_MSG	struct
*	O
request	pointer
)	O
{	O
return	O
lookup_request	function
(	O
request	pointer
,	O
fuzzy_comp	function
)	O
;	O
}	O
static	O
int	O
exact_comp	function
(	O
table_t	struct
*	O
ptr	pointer
,	O
CTL_MSG	struct
*	O
request	pointer
,	O
time_t	long
*	O
now	long
)	O
{	O
if	O
(	O
request	pointer
->	O
type	char
==	O
ptr	pointer
->	O
request	pointer
.	O
type	char
&&	O
request	pointer
->	O
pid	int
==	O
ptr	pointer
->	O
request	pointer
.	O
pid	int
&&	O
strcmp	function
(	O
request	pointer
->	O
r_name	array
,	O
ptr	pointer
->	O
request	pointer
.	O
r_name	array
)	O
==	O
0	int
&&	O
strcmp	function
(	O
request	pointer
->	O
l_name	array
,	O
ptr	pointer
->	O
request	pointer
.	O
l_name	array
)	O
==	O
0	int
)	O
{	O
ptr	pointer
->	O
time	struct
=	O
*	O
now	long
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
CTL_MSG	struct
*	O
find_request	function
(	O
CTL_MSG	struct
*	O
request	pointer
)	O
{	O
return	O
lookup_request	function
(	O
request	pointer
,	O
exact_comp	function
)	O
;	O
}	O
int	O
new_id	function
(	O
void	O
)	O
{	O
static	O
int	O
current_id	int
=	O
0	int
;	O
current_id	int
=	O
(	O
current_id	int
+	O
1	int
)	O
%	O
MAX_ID	int
;	O
if	O
(	O
current_id	int
==	O
0	int
)	O
current_id	int
=	O
1	int
;	O
return	O
current_id	int
;	O
}	O
int	O
insert_table	function
(	O
CTL_MSG	struct
*	O
request	pointer
,	O
CTL_RESPONSE	struct
*	O
response	pointer
)	O
{	O
table_t	struct
*	O
ptr	pointer
;	O
ptr	pointer
=	O
malloc	function
(	O
sizeof	O
*	O
ptr	pointer
)	O
;	O
if	O
(	O
!	O
ptr	pointer
)	O
{	O
syslog	function
(	O
LOG_CRIT	int
,	O
"out of memory"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
request	pointer
->	O
id_num	int
=	O
new_id	function
(	O
)	O
;	O
if	O
(	O
debug	int
)	O
print_request	function
(	O
"insert_table"	pointer
,	O
request	pointer
)	O
;	O
response	pointer
->	O
id_num	int
=	O
htonl	function
(	O
request	pointer
->	O
id_num	int
)	O
;	O
time	struct
(	O
&	O
ptr	pointer
->	O
time	struct
)	O
;	O
ptr	pointer
->	O
request	pointer
=	O
*	O
request	pointer
;	O
ptr	pointer
->	O
prev	pointer
=	O
NULL	O
;	O
ptr	pointer
->	O
next	pointer
=	O
table	pointer
;	O
table	pointer
=	O
ptr	pointer
;	O
return	O
0	int
;	O
}	O
int	O
delete_invite	function
(	O
unsigned	O
long	O
id_num	int
)	O
{	O
table_t	struct
*	O
ptr	pointer
;	O
for	O
(	O
ptr	pointer
=	O
table	pointer
;	O
ptr	pointer
;	O
ptr	pointer
=	O
ptr	pointer
->	O
next	pointer
)	O
if	O
(	O
ptr	pointer
->	O
request	pointer
.	O
id_num	int
==	O
id_num	int
)	O
{	O
table_delete	function
(	O
ptr	pointer
)	O
;	O
return	O
SUCCESS	int
;	O
}	O
return	O
NOT_HERE	int
;	O
}	O
