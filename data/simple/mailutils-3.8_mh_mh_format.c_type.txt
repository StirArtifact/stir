static	O
inline	O
void	O
mh_string_init	function
(	O
struct	O
mh_string	struct
*	O
s	pointer
)	O
{	O
s	pointer
->	O
size	long
=	O
0	int
;	O
s	pointer
->	O
ptr	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
mh_string_free	function
(	O
struct	O
mh_string	struct
*	O
s	pointer
)	O
{	O
free	function
(	O
s	pointer
->	O
ptr	pointer
)	O
;	O
s	pointer
->	O
size	long
=	O
0	int
;	O
s	pointer
->	O
ptr	pointer
=	O
NULL	O
;	O
}	O
static	O
void	O
mh_string_realloc	function
(	O
struct	O
mh_string	struct
*	O
s	pointer
,	O
size_t	long
length	long
)	O
{	O
if	O
(	O
length	long
>	O
s	pointer
->	O
size	long
)	O
{	O
s	pointer
->	O
ptr	pointer
=	O
mu_realloc	function
(	O
s	pointer
->	O
ptr	pointer
,	O
length	long
)	O
;	O
s	pointer
->	O
ptr	pointer
[	O
length	long
-	O
1	int
]	O
=	O
0	int
;	O
s	pointer
->	O
size	long
=	O
length	long
;	O
}	O
}	O
static	O
inline	O
int	O
mh_string_is_null	function
(	O
struct	O
mh_string	struct
*	O
s	pointer
)	O
{	O
return	O
s	pointer
->	O
ptr	pointer
==	O
NULL	O
||	O
s	pointer
->	O
ptr	pointer
[	O
0	int
]	O
==	O
0	int
;	O
}	O
static	O
inline	O
size_t	long
mh_string_length	function
(	O
struct	O
mh_string	struct
*	O
s	pointer
)	O
{	O
return	O
mh_string_is_null	function
(	O
s	pointer
)	O
?	O
0	int
:	O
strlen	function
(	O
s	pointer
->	O
ptr	pointer
)	O
;	O
}	O
static	O
inline	O
char	O
const	O
*	O
mh_string_value	function
(	O
struct	O
mh_string	struct
*	O
s	pointer
)	O
{	O
return	O
mh_string_is_null	function
(	O
s	pointer
)	O
?	O
""	pointer
:	O
s	pointer
->	O
ptr	pointer
;	O
}	O
static	O
inline	O
void	O
mh_string_clear	function
(	O
struct	O
mh_string	struct
*	O
s	pointer
)	O
{	O
if	O
(	O
s	pointer
->	O
ptr	pointer
)	O
s	pointer
->	O
ptr	pointer
[	O
0	int
]	O
=	O
0	int
;	O
}	O
static	O
void	O
mh_string_load	function
(	O
struct	O
mh_string	struct
*	O
s	pointer
,	O
char	O
const	O
*	O
str	pointer
)	O
{	O
if	O
(	O
!	O
str	pointer
)	O
mh_string_clear	function
(	O
s	pointer
)	O
;	O
else	O
{	O
mh_string_realloc	function
(	O
s	pointer
,	O
strlen	function
(	O
str	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
s	pointer
->	O
ptr	pointer
,	O
str	pointer
)	O
;	O
}	O
}	O
static	O
void	O
mh_string_copy	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
enum	O
regid	enum
dst	pointer
,	O
enum	O
regid	enum
src	pointer
)	O
{	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
dst	pointer
]	O
,	O
mach	pointer
->	O
str	pointer
[	O
src	pointer
]	O
.	O
ptr	pointer
)	O
;	O
}	O
static	O
char	O
*	O
_get_builtin_name	function
(	O
mh_builtin_fp	pointer
ptr	pointer
)	O
;	O
static	O
inline	O
size_t	long
output_width	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
if	O
(	O
mach	pointer
->	O
width	long
<	O
mach	pointer
->	O
ind	long
)	O
return	O
0	int
;	O
return	O
mach	pointer
->	O
width	long
-	O
mach	pointer
->	O
ind	long
;	O
}	O
int	O
mbsubstrlen	function
(	O
char	O
const	O
*	O
str	pointer
,	O
size_t	long
len	int
,	O
size_t	long
ncol	long
)	O
{	O
int	O
ret	pointer
=	O
0	int
;	O
mbi_iterator_t	struct
iter	pointer
;	O
if	O
(	O
ncol	long
<=	O
0	int
)	O
return	O
0	int
;	O
for	O
(	O
mbi_init	O
(	O
iter	pointer
,	O
str	pointer
,	O
len	int
)	O
;	O
ncol	long
&&	O
mbi_avail	O
(	O
iter	pointer
)	O
;	O
ncol	long
--	O
,	O
mbi_advance	O
(	O
iter	pointer
)	O
)	O
ret	pointer
+=	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
;	O
return	O
ret	pointer
;	O
}	O
size_t	long
mbsnlen	function
(	O
char	O
const	O
*	O
str	pointer
,	O
size_t	long
len	int
)	O
{	O
int	O
ret	pointer
=	O
0	int
;	O
mbi_iterator_t	struct
iter	pointer
;	O
for	O
(	O
mbi_init	O
(	O
iter	pointer
,	O
str	pointer
,	O
len	int
)	O
;	O
mbi_avail	O
(	O
iter	pointer
)	O
;	O
mbi_advance	O
(	O
iter	pointer
)	O
)	O
ret	pointer
++	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
void	O
str_compress_ws	function
(	O
char	O
*	O
str	pointer
)	O
{	O
unsigned	O
char	O
*	O
p	pointer
,	O
*	O
q	pointer
;	O
size_t	long
size	long
=	O
strlen	function
(	O
str	pointer
)	O
;	O
mbi_iterator_t	struct
iter	pointer
;	O
int	O
space	int
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
q	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
str	pointer
,	O
mbi_init	O
(	O
iter	pointer
,	O
str	pointer
,	O
size	long
)	O
;	O
mbi_avail	O
(	O
iter	pointer
)	O
;	O
mbi_advance	O
(	O
iter	pointer
)	O
)	O
{	O
if	O
(	O
mb_isspace	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
)	O
{	O
if	O
(	O
!	O
space	int
)	O
*	O
p	pointer
++	O
=	O
' '	O
;	O
space	int
++	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
space	int
)	O
space	int
=	O
0	int
;	O
if	O
(	O
mb_isprint	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
)	O
{	O
size_t	long
len	int
=	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
;	O
memcpy	function
(	O
p	pointer
,	O
mb_ptr	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
,	O
len	int
)	O
;	O
p	pointer
+=	O
len	int
;	O
}	O
}	O
*	O
p	pointer
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
compress_ws	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
mach	pointer
->	O
fmtflags	int
&	O
MH_FMT_COMPWS	int
)	O
str_compress_ws	function
(	O
str	pointer
)	O
;	O
}	O
static	O
void	O
put_string	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
char	O
const	O
*	O
str	pointer
,	O
int	O
len	int
)	O
{	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
;	O
mu_stream_write	function
(	O
mach	pointer
->	O
output	pointer
,	O
str	pointer
,	O
len	int
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
ind	long
+=	O
mbsnwidth	function
(	O
str	pointer
,	O
len	int
,	O
0	int
)	O
;	O
}	O
static	O
void	O
print_hdr_segment	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
char	O
const	O
*	O
str	pointer
,	O
size_t	long
len	int
)	O
{	O
if	O
(	O
!	O
len	int
)	O
len	int
=	O
strlen	function
(	O
str	pointer
)	O
;	O
if	O
(	O
mbsnlen	function
(	O
str	pointer
,	O
len	int
)	O
<	O
mach	pointer
->	O
width	long
)	O
put_string	function
(	O
mach	pointer
,	O
str	pointer
,	O
len	int
)	O
;	O
else	O
{	O
while	O
(	O
1	int
)	O
{	O
mbi_iterator_t	struct
iter	pointer
;	O
size_t	long
rest	long
=	O
output_width	function
(	O
mach	pointer
)	O
;	O
size_t	long
width	long
=	O
mbsnlen	function
(	O
str	pointer
,	O
len	int
)	O
;	O
size_t	long
off	long
,	O
size	long
;	O
if	O
(	O
width	long
<=	O
rest	long
)	O
{	O
put_string	function
(	O
mach	pointer
,	O
str	pointer
,	O
len	int
)	O
;	O
break	O
;	O
}	O
size	long
=	O
off	long
=	O
0	int
;	O
for	O
(	O
mbi_init	O
(	O
iter	pointer
,	O
str	pointer
,	O
len	int
)	O
;	O
mbi_avail	O
(	O
iter	pointer
)	O
;	O
mbi_advance	O
(	O
iter	pointer
)	O
)	O
{	O
if	O
(	O
mb_isspace	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
)	O
off	long
=	O
size	long
;	O
size	long
+=	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	pointer
)	O
)	O
;	O
}	O
if	O
(	O
off	long
>	O
0	int
)	O
{	O
put_string	function
(	O
mach	pointer
,	O
str	pointer
,	O
off	long
)	O
;	O
put_string	function
(	O
mach	pointer
,	O
"\n        "	pointer
,	O
9	int
)	O
;	O
mach	pointer
->	O
ind	long
=	O
8	int
;	O
str	pointer
+=	O
off	long
;	O
len	int
-=	O
off	long
;	O
}	O
else	O
{	O
size	long
=	O
mbsubstrlen	function
(	O
str	pointer
,	O
len	int
,	O
rest	long
)	O
;	O
put_string	function
(	O
mach	pointer
,	O
str	pointer
,	O
len	int
)	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
print_hdr_string	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
char	O
const	O
*	O
str	pointer
)	O
{	O
char	O
const	O
*	O
p	pointer
;	O
if	O
(	O
!	O
str	pointer
)	O
str	pointer
=	O
""	pointer
;	O
p	pointer
=	O
strchr	function
(	O
str	pointer
,	O
'\n'	O
)	O
;	O
while	O
(	O
p	pointer
)	O
{	O
print_hdr_segment	function
(	O
mach	pointer
,	O
str	pointer
,	O
p	pointer
-	O
str	pointer
+	O
1	int
)	O
;	O
mach	pointer
->	O
ind	long
=	O
0	int
;	O
str	pointer
=	O
p	pointer
+	O
1	int
;	O
p	pointer
=	O
strchr	function
(	O
str	pointer
,	O
'\n'	O
)	O
;	O
}	O
if	O
(	O
str	pointer
[	O
0	int
]	O
)	O
print_hdr_segment	function
(	O
mach	pointer
,	O
str	pointer
,	O
0	int
)	O
;	O
}	O
static	O
void	O
print_simple_segment	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
size_t	long
width	long
,	O
char	O
const	O
*	O
str	pointer
,	O
size_t	long
len	int
)	O
{	O
size_t	long
rest	long
;	O
if	O
(	O
!	O
str	pointer
)	O
str	pointer
=	O
""	pointer
;	O
if	O
(	O
!	O
len	int
)	O
len	int
=	O
strlen	function
(	O
str	pointer
)	O
;	O
if	O
(	O
!	O
width	long
)	O
width	long
=	O
mach	pointer
->	O
width	long
;	O
rest	long
=	O
output_width	function
(	O
mach	pointer
)	O
;	O
if	O
(	O
rest	long
==	O
0	int
)	O
{	O
if	O
(	O
len	int
==	O
1	int
&&	O
str	pointer
[	O
0	int
]	O
==	O
'\n'	O
)	O
put_string	function
(	O
mach	pointer
,	O
str	pointer
,	O
len	int
)	O
;	O
return	O
;	O
}	O
put_string	function
(	O
mach	pointer
,	O
str	pointer
,	O
mbsubstrlen	function
(	O
str	pointer
,	O
len	int
,	O
rest	long
)	O
)	O
;	O
}	O
static	O
void	O
print_string	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
size_t	long
width	long
,	O
char	O
const	O
*	O
str	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
str	pointer
)	O
str	pointer
=	O
""	pointer
;	O
if	O
(	O
!	O
width	long
)	O
width	long
=	O
mach	pointer
->	O
width	long
;	O
p	pointer
=	O
strchr	function
(	O
str	pointer
,	O
'\n'	O
)	O
;	O
while	O
(	O
p	pointer
)	O
{	O
print_simple_segment	function
(	O
mach	pointer
,	O
width	long
,	O
str	pointer
,	O
p	pointer
-	O
str	pointer
+	O
1	int
)	O
;	O
mach	pointer
->	O
ind	long
=	O
0	int
;	O
str	pointer
=	O
p	pointer
+	O
1	int
;	O
p	pointer
=	O
strchr	function
(	O
str	pointer
,	O
'\n'	O
)	O
;	O
}	O
if	O
(	O
str	pointer
[	O
0	int
]	O
)	O
print_simple_segment	function
(	O
mach	pointer
,	O
width	long
,	O
str	pointer
,	O
0	int
)	O
;	O
}	O
static	O
void	O
print_fmt_segment	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
size_t	long
fmtwidth	long
,	O
char	O
const	O
*	O
str	pointer
,	O
size_t	long
len	int
)	O
{	O
size_t	long
width	long
=	O
mbsnlen	function
(	O
str	pointer
,	O
len	int
)	O
;	O
if	O
(	O
fmtwidth	long
&&	O
width	long
>	O
fmtwidth	long
)	O
{	O
len	int
=	O
mbsubstrlen	function
(	O
str	pointer
,	O
len	int
,	O
fmtwidth	long
)	O
;	O
width	long
=	O
fmtwidth	long
;	O
}	O
else	O
len	int
=	O
mbsubstrlen	function
(	O
str	pointer
,	O
len	int
,	O
output_width	function
(	O
mach	pointer
)	O
)	O
;	O
put_string	function
(	O
mach	pointer
,	O
str	pointer
,	O
len	int
)	O
;	O
if	O
(	O
fmtwidth	long
>	O
width	long
)	O
{	O
fmtwidth	long
-=	O
width	long
;	O
mach	pointer
->	O
ind	long
+=	O
fmtwidth	long
;	O
while	O
(	O
fmtwidth	long
--	O
)	O
mu_stream_write	function
(	O
mach	pointer
->	O
output	pointer
,	O
" "	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
}	O
static	O
void	O
print_fmt_string	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
size_t	long
fmtwidth	long
,	O
char	O
const	O
*	O
str	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
while	O
(	O
(	O
p	pointer
=	O
strchr	function
(	O
str	pointer
,	O
'\n'	O
)	O
)	O
)	O
{	O
print_fmt_segment	function
(	O
mach	pointer
,	O
fmtwidth	long
,	O
str	pointer
,	O
p	pointer
-	O
str	pointer
)	O
;	O
mu_stream_write	function
(	O
mach	pointer
->	O
output	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
ind	long
=	O
0	int
;	O
str	pointer
=	O
p	pointer
+	O
1	int
;	O
}	O
if	O
(	O
str	pointer
[	O
0	int
]	O
)	O
print_fmt_segment	function
(	O
mach	pointer
,	O
fmtwidth	long
,	O
str	pointer
,	O
strlen	function
(	O
str	pointer
)	O
)	O
;	O
}	O
static	O
void	O
reset_fmt_defaults	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
mach	pointer
->	O
fmtflags	int
=	O
0	int
;	O
p	pointer
=	O
mh_global_profile_get	O
(	O
"Compress-WS"	pointer
,	O
"yes"	pointer
)	O
;	O
if	O
(	O
p	pointer
&&	O
(	O
mu_c_strcasecmp	function
(	O
p	pointer
,	O
"yes"	pointer
)	O
==	O
0	int
||	O
mu_c_strcasecmp	function
(	O
p	pointer
,	O
"true"	pointer
)	O
==	O
0	int
)	O
)	O
mach	pointer
->	O
fmtflags	int
|=	O
MH_FMT_COMPWS	int
;	O
}	O
static	O
void	O
format_num	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
long	O
num	long
)	O
{	O
int	O
n	long
;	O
char	O
buf	pointer
[	O
64	int
]	O
;	O
char	O
*	O
ptr	pointer
;	O
int	O
fmtwidth	long
=	O
mach	pointer
->	O
fmtflags	int
&	O
MH_WIDTH_MASK	int
;	O
char	O
padchar	char
=	O
mach	pointer
->	O
fmtflags	int
&	O
MH_FMT_ZEROPAD	int
?	O
'0'	O
:	O
' '	O
;	O
n	long
=	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"%ld"	pointer
,	O
num	long
)	O
;	O
if	O
(	O
fmtwidth	long
)	O
{	O
if	O
(	O
n	long
>	O
fmtwidth	long
)	O
{	O
ptr	pointer
=	O
buf	pointer
+	O
n	long
-	O
fmtwidth	long
;	O
*	O
ptr	pointer
=	O
'?'	O
;	O
}	O
else	O
{	O
int	O
i	int
;	O
ptr	pointer
=	O
buf	pointer
;	O
for	O
(	O
i	int
=	O
n	long
;	O
i	int
<	O
fmtwidth	long
&&	O
mach	pointer
->	O
ind	long
<	O
mach	pointer
->	O
width	long
;	O
i	int
++	O
,	O
mach	pointer
->	O
ind	long
++	O
)	O
mu_stream_write	function
(	O
mach	pointer
->	O
output	pointer
,	O
&	O
padchar	char
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
}	O
else	O
ptr	pointer
=	O
buf	pointer
;	O
print_string	function
(	O
mach	pointer
,	O
0	int
,	O
ptr	pointer
)	O
;	O
reset_fmt_defaults	function
(	O
mach	pointer
)	O
;	O
}	O
static	O
void	O
format_str	pointer
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
char	O
const	O
*	O
str	pointer
)	O
{	O
if	O
(	O
!	O
str	pointer
)	O
str	pointer
=	O
""	pointer
;	O
if	O
(	O
mach	pointer
->	O
fmtflags	int
)	O
{	O
int	O
len	int
=	O
strlen	function
(	O
str	pointer
)	O
;	O
int	O
fmtwidth	long
=	O
mach	pointer
->	O
fmtflags	int
&	O
MH_WIDTH_MASK	int
;	O
char	O
padchar	char
=	O
' '	O
;	O
if	O
(	O
mach	pointer
->	O
fmtflags	int
&	O
MH_FMT_RALIGN	int
)	O
{	O
int	O
i	int
,	O
n	long
;	O
n	long
=	O
fmtwidth	long
-	O
len	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
&&	O
mach	pointer
->	O
ind	long
<	O
mach	pointer
->	O
width	long
;	O
i	int
++	O
,	O
mach	pointer
->	O
ind	long
++	O
,	O
fmtwidth	long
--	O
)	O
mu_stream_write	function
(	O
mach	pointer
->	O
output	pointer
,	O
&	O
padchar	char
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
print_fmt_string	function
(	O
mach	pointer
,	O
fmtwidth	long
,	O
str	pointer
)	O
;	O
reset_fmt_defaults	function
(	O
mach	pointer
)	O
;	O
}	O
else	O
print_string	function
(	O
mach	pointer
,	O
0	int
,	O
str	pointer
)	O
;	O
}	O
static	O
int	O
addr_cmp	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_address_t	pointer
a	pointer
=	O
item	pointer
;	O
mu_address_t	pointer
b	pointer
=	O
data	pointer
;	O
size_t	long
i	int
,	O
count	pointer
;	O
int	O
rc	int
=	O
0	int
;	O
mu_address_get_count	function
(	O
a	pointer
,	O
&	O
count	pointer
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
rc	int
==	O
0	int
&&	O
i	int
<=	O
count	pointer
;	O
i	int
++	O
)	O
{	O
const	O
char	O
*	O
str	pointer
;	O
if	O
(	O
mu_address_sget_email	function
(	O
a	pointer
,	O
i	int
,	O
&	O
str	pointer
)	O
||	O
str	pointer
)	O
continue	O
;	O
rc	int
=	O
mu_address_contains_email	function
(	O
b	pointer
,	O
str	pointer
)	O
;	O
}	O
return	O
rc	int
?	O
MU_ERR_USER0	O
:	O
0	int
;	O
}	O
static	O
int	O
addrlist_lookup	function
(	O
mu_list_t	pointer
list	pointer
,	O
mu_address_t	pointer
addr	pointer
)	O
{	O
return	O
mu_list_foreach	function
(	O
list	pointer
,	O
addr_cmp	function
,	O
addr	pointer
)	O
;	O
}	O
static	O
int	O
addr_free	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
=	O
item	pointer
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
addrlist_destroy	function
(	O
mu_list_t	pointer
*	O
list	pointer
)	O
{	O
mu_list_foreach	function
(	O
*	O
list	pointer
,	O
addr_free	function
,	O
NULL	O
)	O
;	O
mu_list_destroy	function
(	O
list	pointer
)	O
;	O
}	O
void	O
mh_fvm_run	function
(	O
mh_fvm_t	pointer
mach	pointer
,	O
mu_message_t	pointer
msg	pointer
)	O
{	O
mach	pointer
->	O
message	pointer
=	O
msg	pointer
;	O
reset_fmt_defaults	function
(	O
mach	pointer
)	O
;	O
mu_list_clear	function
(	O
mach	pointer
->	O
addrlist	pointer
)	O
;	O
mh_string_init	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
mh_string_init	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
;	O
mh_string_init	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ACC	int
]	O
)	O
;	O
mach	pointer
->	O
pc	long
=	O
1	int
;	O
mach	pointer
->	O
stop	int
=	O
0	int
;	O
mach	pointer
->	O
ind	long
=	O
0	int
;	O
mach	pointer
->	O
tos	long
=	O
0	int
;	O
mach	pointer
->	O
maxstack	long
=	O
0	int
;	O
mach	pointer
->	O
numstack	pointer
=	O
0	int
;	O
while	O
(	O
!	O
mach	pointer
->	O
stop	int
)	O
{	O
mh_opcode_t	enum
opcode	int
;	O
switch	O
(	O
opcode	int
=	O
MHI_OPCODE	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
)	O
{	O
case	O
mhop_stop	int
:	O
mach	pointer
->	O
stop	int
=	O
1	int
;	O
break	O
;	O
case	O
mhop_branch	int
:	O
mach	pointer
->	O
pc	long
+=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
]	O
)	O
;	O
break	O
;	O
case	O
mhop_brzn	int
:	O
{	O
int	O
res	pointer
=	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
==	O
0	int
;	O
if	O
(	O
res	pointer
)	O
mach	pointer
->	O
pc	long
+=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
]	O
)	O
;	O
else	O
mach	pointer
->	O
pc	long
++	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
!	O
res	pointer
;	O
}	O
break	O
;	O
case	O
mhop_brzs	int
:	O
{	O
int	O
res	pointer
=	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
if	O
(	O
res	pointer
)	O
mach	pointer
->	O
pc	long
+=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
]	O
)	O
;	O
else	O
mach	pointer
->	O
pc	long
++	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
!	O
res	pointer
;	O
}	O
break	O
;	O
case	O
mhop_setn	int
:	O
{	O
long	O
reg	long
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
reg	long
]	O
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
}	O
break	O
;	O
case	O
mhop_sets	int
:	O
{	O
long	O
reg	long
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
size_t	long
skip	long
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
char	O
const	O
*	O
str	pointer
=	O
MHI_STR	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
]	O
)	O
;	O
mach	pointer
->	O
pc	long
+=	O
skip	long
;	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
reg	long
]	O
,	O
str	pointer
)	O
;	O
}	O
break	O
;	O
case	O
mhop_movn	int
:	O
{	O
long	O
dst	pointer
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
long	O
src	pointer
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
dst	pointer
]	O
=	O
mach	pointer
->	O
num	long
[	O
src	pointer
]	O
;	O
}	O
break	O
;	O
case	O
mhop_movs	int
:	O
{	O
long	O
dst	pointer
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
long	O
src	pointer
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
mh_string_copy	function
(	O
mach	pointer
,	O
dst	pointer
,	O
src	pointer
)	O
;	O
}	O
break	O
;	O
case	O
mhop_pushn	int
:	O
if	O
(	O
mach	pointer
->	O
tos	long
==	O
mach	pointer
->	O
maxstack	long
)	O
mach	pointer
->	O
numstack	pointer
=	O
mu_2nrealloc	function
(	O
mach	pointer
->	O
numstack	pointer
,	O
&	O
mach	pointer
->	O
maxstack	long
,	O
sizeof	O
(	O
mach	pointer
->	O
numstack	pointer
[	O
0	int
]	O
)	O
)	O
;	O
mach	pointer
->	O
numstack	pointer
[	O
mach	pointer
->	O
tos	long
++	O
]	O
=	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
;	O
break	O
;	O
case	O
mhop_popn	int
:	O
assert	O
(	O
mach	pointer
->	O
tos	long
>	O
0	int
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mach	pointer
->	O
numstack	pointer
[	O
--	O
mach	pointer
->	O
tos	long
]	O
;	O
break	O
;	O
case	O
mhop_xchgn	int
:	O
assert	O
(	O
mach	pointer
->	O
tos	long
>	O
0	int
)	O
;	O
{	O
long	O
t	long
=	O
mach	pointer
->	O
numstack	pointer
[	O
mach	pointer
->	O
tos	long
-	O
1	int
]	O
;	O
mach	pointer
->	O
numstack	pointer
[	O
mach	pointer
->	O
tos	long
-	O
1	int
]	O
=	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
t	long
;	O
}	O
break	O
;	O
case	O
mhop_ldcomp	int
:	O
{	O
long	O
reg	long
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
size_t	long
skip	long
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
char	O
const	O
*	O
comp	pointer
=	O
MHI_STR	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
]	O
)	O
;	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
char	O
*	O
value	pointer
=	O
NULL	O
;	O
mach	pointer
->	O
pc	long
+=	O
skip	long
;	O
mu_message_get_header	function
(	O
mach	pointer
->	O
message	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_header_aget_value_unfold	O
(	O
hdr	pointer
,	O
comp	pointer
,	O
&	O
value	pointer
)	O
;	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
reg	long
]	O
)	O
;	O
if	O
(	O
value	pointer
)	O
{	O
compress_ws	function
(	O
mach	pointer
,	O
value	pointer
)	O
;	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
reg	long
]	O
,	O
value	pointer
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
mhop_ldbody	int
:	O
{	O
long	O
reg	long
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
mu_body_t	pointer
body	pointer
=	O
NULL	O
;	O
mu_stream_t	pointer
stream	pointer
=	O
NULL	O
;	O
size_t	long
size	long
=	O
0	int
;	O
size_t	long
rest	long
=	O
output_width	function
(	O
mach	pointer
)	O
;	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
reg	long
]	O
)	O
;	O
mu_message_get_body	function
(	O
mach	pointer
->	O
message	pointer
,	O
&	O
body	pointer
)	O
;	O
mu_body_size	function
(	O
body	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
size	long
==	O
0	int
)	O
break	O
;	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
stream	pointer
)	O
{	O
if	O
(	O
size	long
>	O
rest	long
)	O
size	long
=	O
rest	long
;	O
mh_string_realloc	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
reg	long
]	O
,	O
size	long
+	O
1	int
)	O
;	O
mu_stream_read	function
(	O
stream	pointer
,	O
mach	pointer
->	O
str	pointer
[	O
reg	long
]	O
.	O
ptr	pointer
,	O
size	long
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
str	pointer
[	O
reg	long
]	O
.	O
ptr	pointer
[	O
size	long
]	O
=	O
0	int
;	O
compress_ws	function
(	O
mach	pointer
,	O
mach	pointer
->	O
str	pointer
[	O
reg	long
]	O
.	O
ptr	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
}	O
}	O
break	O
;	O
case	O
mhop_call	int
:	O
MHI_BUILTIN	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
(	O
mach	pointer
)	O
;	O
break	O
;	O
case	O
mhop_atoi	int
:	O
{	O
if	O
(	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
)	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
0	int
;	O
else	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
strtoul	function
(	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
.	O
ptr	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
break	O
;	O
case	O
mhop_itoa	int
:	O
{	O
mu_asnprintf	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
.	O
ptr	pointer
,	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
.	O
size	long
,	O
"%lu"	pointer
,	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
)	O
;	O
}	O
break	O
;	O
case	O
mhop_printn	int
:	O
format_num	function
(	O
mach	pointer
,	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
)	O
;	O
break	O
;	O
case	O
mhop_prints	int
:	O
format_str	pointer
(	O
mach	pointer
,	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
.	O
ptr	pointer
)	O
;	O
break	O
;	O
case	O
mhop_printlit	int
:	O
{	O
size_t	long
skip	long
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
char	O
const	O
*	O
str	pointer
=	O
MHI_STR	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
]	O
)	O
;	O
format_str	pointer
(	O
mach	pointer
,	O
str	pointer
)	O
;	O
mach	pointer
->	O
pc	long
+=	O
skip	long
;	O
}	O
break	O
;	O
case	O
mhop_fmtspec	int
:	O
mach	pointer
->	O
fmtflags	int
=	O
MHI_NUM	O
(	O
mach	pointer
->	O
prog	pointer
[	O
mach	pointer
->	O
pc	long
++	O
]	O
)	O
;	O
break	O
;	O
default	O
:	O
mu_error	function
(	O
_	O
(	O
"INTERNAL ERROR: Unknown opcode: %x"	pointer
)	O
,	O
opcode	int
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
(	O
mach	pointer
->	O
flags	int
&	O
MH_FMT_FORCENL	int
)	O
&&	O
mach	pointer
->	O
ind	long
!=	O
0	int
)	O
put_string	function
(	O
mach	pointer
,	O
"\n"	pointer
,	O
1	int
)	O
;	O
}	O
static	O
int	O
msg_uid_1	function
(	O
mu_message_t	pointer
msg	pointer
MU_ARG_UNUSED	O
,	O
size_t	long
*	O
ret	pointer
)	O
{	O
if	O
(	O
!	O
ret	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
ret	pointer
=	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mh_format_str	function
(	O
mh_format_t	pointer
fmt	pointer
,	O
char	O
*	O
str	pointer
,	O
size_t	long
width	long
,	O
char	O
*	O
*	O
pstr	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
=	O
NULL	O
;	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
int	O
rc	int
=	O
0	int
;	O
mu_stream_t	pointer
outstr	pointer
;	O
char	O
*	O
buf	pointer
;	O
mu_off_t	long
size	long
;	O
mh_fvm_t	pointer
fvm	pointer
;	O
MU_ASSERT	O
(	O
mu_message_create	function
(	O
&	O
msg	pointer
,	O
NULL	O
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
"text"	pointer
,	O
str	pointer
,	O
1	int
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_memory_stream_create	function
(	O
&	O
outstr	pointer
,	O
MU_STREAM_RDWR	O
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_set_uid	function
(	O
msg	pointer
,	O
msg_uid_1	function
,	O
NULL	O
)	O
)	O
;	O
mh_fvm_create	function
(	O
&	O
fvm	pointer
,	O
0	int
)	O
;	O
mh_fvm_set_output	function
(	O
fvm	pointer
,	O
outstr	pointer
)	O
;	O
mh_fvm_set_width	function
(	O
fvm	pointer
,	O
width	long
)	O
;	O
mh_fvm_set_format	function
(	O
fvm	pointer
,	O
fmt	pointer
)	O
;	O
mh_fvm_run	function
(	O
fvm	pointer
,	O
msg	pointer
)	O
;	O
mh_fvm_destroy	function
(	O
&	O
fvm	pointer
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_size	function
(	O
outstr	pointer
,	O
&	O
size	long
)	O
)	O
;	O
buf	pointer
=	O
mu_alloc	function
(	O
size	long
+	O
1	int
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_seek	function
(	O
outstr	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_read	function
(	O
outstr	pointer
,	O
buf	pointer
,	O
size	long
,	O
NULL	O
)	O
)	O
;	O
buf	pointer
[	O
size	long
]	O
=	O
0	int
;	O
*	O
pstr	pointer
=	O
buf	pointer
;	O
mu_message_destroy	function
(	O
&	O
msg	pointer
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
outstr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
void	O
builtin_not_implemented	function
(	O
char	O
*	O
name	pointer
)	O
{	O
mu_error	function
(	O
"%s is not yet implemented."	pointer
,	O
name	pointer
)	O
;	O
}	O
static	O
void	O
builtin_msg	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
size_t	long
msgno	long
;	O
mh_message_number	function
(	O
mach	pointer
->	O
message	pointer
,	O
&	O
msgno	long
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
msgno	long
;	O
}	O
static	O
void	O
builtin_cur	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
size_t	long
msgno	long
;	O
size_t	long
cur	long
;	O
int	O
rc	int
;	O
mu_mailbox_t	pointer
mbox	pointer
;	O
rc	int
=	O
mu_message_get_mailbox	function
(	O
mach	pointer
->	O
message	pointer
,	O
&	O
mbox	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	function
(	O
MU_DIAG_ERROR	O
,	O
"mu_message_get_mailbox"	pointer
,	O
NULL	O
,	O
rc	int
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
mh_message_number	function
(	O
mach	pointer
->	O
message	pointer
,	O
&	O
msgno	long
)	O
;	O
mh_mailbox_get_cur	function
(	O
mbox	pointer
,	O
&	O
cur	long
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
msgno	long
==	O
cur	long
;	O
}	O
static	O
void	O
builtin_size	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
size_t	long
size	long
;	O
if	O
(	O
mu_message_size	function
(	O
mach	pointer
->	O
message	pointer
,	O
&	O
size	long
)	O
==	O
0	int
)	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
size	long
;	O
else	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
0	int
;	O
}	O
static	O
void	O
builtin_strlen	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mh_string_length	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
}	O
static	O
void	O
builtin_width	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mach	pointer
->	O
width	long
;	O
}	O
static	O
void	O
builtin_charleft	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
output_width	function
(	O
mach	pointer
)	O
;	O
}	O
static	O
void	O
builtin_timenow	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
time_t	long
t	long
;	O
time	struct
(	O
&	O
t	long
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
t	long
;	O
}	O
static	O
void	O
builtin_me	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
mh_get_my_user_name	function
(	O
)	O
)	O
;	O
}	O
static	O
void	O
builtin_myhost	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
mh_my_host	function
(	O
)	O
)	O
;	O
}	O
static	O
void	O
builtin_myname	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
mh_get_my_real_name	function
(	O
)	O
)	O
;	O
}	O
static	O
void	O
builtin_localmbox	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
mh_my_email	function
(	O
)	O
)	O
;	O
}	O
static	O
void	O
builtin_eq	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
==	O
mach	pointer
->	O
num	long
[	O
R_ARG	int
]	O
;	O
}	O
static	O
void	O
builtin_ne	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
!=	O
mach	pointer
->	O
num	long
[	O
R_ARG	int
]	O
;	O
}	O
static	O
void	O
builtin_gt	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
>	O
mach	pointer
->	O
num	long
[	O
R_ARG	int
]	O
;	O
}	O
static	O
void	O
builtin_match	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
strstr	function
(	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
!=	O
NULL	O
;	O
}	O
static	O
void	O
builtin_amatch	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
char	O
const	O
*	O
arg	pointer
=	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
;	O
size_t	long
len	int
=	O
strlen	function
(	O
arg	pointer
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
strncmp	function
(	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
,	O
arg	pointer
,	O
len	int
)	O
==	O
0	int
;	O
}	O
static	O
void	O
builtin_plus	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
+=	O
mach	pointer
->	O
num	long
[	O
R_ARG	int
]	O
;	O
}	O
static	O
void	O
builtin_minus	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
-=	O
mach	pointer
->	O
num	long
[	O
R_ARG	int
]	O
;	O
}	O
static	O
void	O
builtin_divide	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
if	O
(	O
mach	pointer
->	O
num	long
[	O
R_ARG	int
]	O
==	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"format: divide by zero"	pointer
)	O
)	O
;	O
mach	pointer
->	O
stop	int
=	O
1	int
;	O
}	O
else	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
/=	O
mach	pointer
->	O
num	long
[	O
R_ARG	int
]	O
;	O
}	O
static	O
void	O
builtin_modulo	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
if	O
(	O
mach	pointer
->	O
num	long
[	O
R_ARG	int
]	O
==	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"format: divide by zero"	pointer
)	O
)	O
;	O
mach	pointer
->	O
stop	int
=	O
1	int
;	O
}	O
else	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
%=	O
mach	pointer
->	O
num	long
[	O
R_ARG	int
]	O
;	O
}	O
static	O
void	O
builtin_getenv	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
char	O
const	O
*	O
val	array
=	O
getenv	function
(	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
val	array
)	O
;	O
}	O
static	O
void	O
builtin_profile	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
char	O
const	O
*	O
val	array
=	O
mh_global_profile_get	O
(	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
,	O
""	pointer
)	O
;	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
val	array
)	O
;	O
}	O
static	O
void	O
builtin_nonzero	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mach	pointer
->	O
num	long
[	O
R_ARG	int
]	O
!=	O
0	int
;	O
}	O
static	O
void	O
builtin_zero	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mach	pointer
->	O
num	long
[	O
R_ARG	int
]	O
==	O
0	int
;	O
}	O
static	O
void	O
builtin_null	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
;	O
}	O
static	O
void	O
builtin_nonnull	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
!	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
;	O
}	O
static	O
void	O
builtin_comp	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mh_string_copy	function
(	O
mach	pointer
,	O
R_REG	int
,	O
R_ARG	int
)	O
;	O
}	O
static	O
void	O
builtin_compval	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
strtol	function
(	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
static	O
void	O
builtin_trim	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
if	O
(	O
!	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
)	O
mu_rtrim_class	function
(	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
.	O
ptr	pointer
,	O
MU_CTYPE_SPACE	int
)	O
;	O
}	O
static	O
void	O
_parse_date	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
struct	O
tm	struct
*	O
tm	struct
,	O
struct	O
mu_timezone	struct
*	O
tz	pointer
,	O
int	O
*	O
pflags	pointer
)	O
{	O
char	O
const	O
*	O
date	struct
=	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
;	O
int	O
flags	int
;	O
if	O
(	O
!	O
(	O
mu_parse_date_dtl	function
(	O
date	struct
,	O
NULL	O
,	O
NULL	O
,	O
tm	struct
,	O
tz	pointer
,	O
&	O
flags	int
)	O
==	O
0	int
&&	O
(	O
flags	int
&	O
(	O
MU_PD_MASK_DATE	O
|	O
MU_PD_MASK_TIME	O
)	O
)	O
)	O
)	O
{	O
if	O
(	O
tm	struct
)	O
{	O
time_t	long
t	long
;	O
time	struct
(	O
&	O
t	long
)	O
;	O
*	O
tm	struct
=	O
*	O
localtime	function
(	O
&	O
t	long
)	O
;	O
}	O
if	O
(	O
tz	pointer
)	O
mu_datetime_tz_local	function
(	O
tz	pointer
)	O
;	O
flags	int
=	O
0	int
;	O
}	O
if	O
(	O
pflags	pointer
)	O
*	O
pflags	pointer
=	O
flags	int
;	O
}	O
static	O
void	O
builtin_sec	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
tm	struct
.	O
tm_sec	int
;	O
}	O
static	O
void	O
builtin_min	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
tm	struct
.	O
tm_min	int
;	O
}	O
static	O
void	O
builtin_hour	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
tm	struct
.	O
tm_hour	int
;	O
}	O
static	O
void	O
builtin_wday	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
tm	struct
.	O
tm_wday	int
;	O
}	O
static	O
void	O
builtin_day	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
strftime	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"%a"	pointer
,	O
&	O
tm	struct
)	O
;	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
buf	pointer
)	O
;	O
}	O
static	O
void	O
builtin_weekday	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
strftime	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"%A"	pointer
,	O
&	O
tm	struct
)	O
;	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
buf	pointer
)	O
;	O
}	O
static	O
void	O
builtin_sday	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
int	O
flags	int
;	O
_parse_date	function
(	O
mach	pointer
,	O
NULL	O
,	O
NULL	O
,	O
&	O
flags	int
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
!	O
!	O
(	O
flags	int
&	O
MU_PD_MASK_DOW	O
)	O
;	O
}	O
static	O
void	O
builtin_mday	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
tm	struct
.	O
tm_mday	int
;	O
}	O
static	O
void	O
builtin_yday	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
tm	struct
.	O
tm_yday	int
;	O
}	O
static	O
void	O
builtin_mon	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
tm	struct
.	O
tm_mon	int
+	O
1	int
;	O
}	O
static	O
void	O
builtin_month	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
strftime	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"%b"	pointer
,	O
&	O
tm	struct
)	O
;	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
buf	pointer
)	O
;	O
}	O
static	O
void	O
builtin_lmonth	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
strftime	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"%B"	pointer
,	O
&	O
tm	struct
)	O
;	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
buf	pointer
)	O
;	O
}	O
static	O
void	O
builtin_year	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
tm	struct
.	O
tm_year	int
+	O
1900	int
;	O
}	O
static	O
void	O
builtin_zone	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
mu_timezone	struct
tz	pointer
;	O
_parse_date	function
(	O
mach	pointer
,	O
NULL	O
,	O
&	O
tz	pointer
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
tz	pointer
.	O
utc_offset	int
/	O
3600	int
;	O
}	O
static	O
void	O
builtin_tzone	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
mu_timezone	struct
tz	pointer
;	O
char	O
buf	pointer
[	O
6	int
]	O
;	O
int	O
s	pointer
;	O
unsigned	O
hrs	int
;	O
_parse_date	function
(	O
mach	pointer
,	O
NULL	O
,	O
&	O
tz	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
tz	pointer
.	O
utc_offset	int
<	O
0	int
)	O
{	O
s	pointer
=	O
'-'	O
;	O
tz	pointer
.	O
utc_offset	int
=	O
-	O
tz	pointer
.	O
utc_offset	int
;	O
}	O
else	O
s	pointer
=	O
'+'	O
;	O
hrs	int
=	O
tz	pointer
.	O
utc_offset	int
/	O
3600	int
;	O
snprintf	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"%c%02u%02u"	pointer
,	O
s	pointer
,	O
hrs	int
,	O
(	O
tz	pointer
.	O
utc_offset	int
-	O
hrs	int
*	O
3600	int
)	O
/	O
60	int
)	O
;	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
buf	pointer
)	O
;	O
}	O
static	O
void	O
builtin_szone	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
int	O
flags	int
;	O
_parse_date	function
(	O
mach	pointer
,	O
NULL	O
,	O
NULL	O
,	O
&	O
flags	int
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
!	O
!	O
(	O
flags	int
&	O
MU_PD_MASK_TZ	int
)	O
;	O
}	O
static	O
void	O
builtin_str_noop	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mh_string_copy	function
(	O
mach	pointer
,	O
R_REG	int
,	O
R_ARG	int
)	O
;	O
}	O
static	O
void	O
builtin_date2local	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
builtin_str_noop	function
(	O
mach	pointer
)	O
;	O
}	O
static	O
void	O
builtin_date2gmt	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
builtin_str_noop	function
(	O
mach	pointer
)	O
;	O
}	O
static	O
void	O
builtin_dst	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
NULL	O
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
tm	struct
.	O
tm_isdst	int
;	O
}	O
static	O
void	O
builtin_clock	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
struct	O
mu_timezone	struct
tz	pointer
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
&	O
tz	pointer
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mu_datetime_to_utc	function
(	O
&	O
tm	struct
,	O
&	O
tz	pointer
)	O
;	O
}	O
void	O
builtin_rclock	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
struct	O
mu_timezone	struct
tz	pointer
;	O
time_t	long
now	pointer
=	O
time	struct
(	O
NULL	O
)	O
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
&	O
tz	pointer
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
now	pointer
-	O
mu_datetime_to_utc	function
(	O
&	O
tm	struct
,	O
&	O
tz	pointer
)	O
;	O
}	O
struct	O
{	O
const	O
char	O
*	O
std	pointer
;	O
const	O
char	O
*	O
dst	pointer
;	O
int	O
utc_offset	int
;	O
}	O
tzs	array
[	O
]	O
=	O
{	O
{	O
"GMT"	pointer
,	O
"BST"	pointer
,	O
0	int
}	O
,	O
{	O
"EST"	pointer
,	O
"EDT"	pointer
,	O
-	O
5	int
}	O
,	O
{	O
"CST"	pointer
,	O
"CDT"	pointer
,	O
-	O
6	int
}	O
,	O
{	O
"MST"	pointer
,	O
"MDT"	pointer
,	O
-	O
7	int
}	O
,	O
{	O
"PST"	pointer
,	O
"PDT"	pointer
,	O
-	O
8	int
}	O
,	O
{	O
"EET"	pointer
,	O
"EEST"	pointer
,	O
-	O
2	int
}	O
,	O
{	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
void	O
date_cvt	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
,	O
int	O
pretty	int
)	O
{	O
struct	O
tm	struct
tm	struct
;	O
struct	O
mu_timezone	struct
tz	pointer
;	O
char	O
buf	pointer
[	O
80	int
]	O
;	O
int	O
i	int
,	O
len	int
;	O
const	O
char	O
*	O
tzname	array
=	O
NULL	O
;	O
_parse_date	function
(	O
mach	pointer
,	O
&	O
tm	struct
,	O
&	O
tz	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
pretty	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
tzs	array
[	O
i	int
]	O
.	O
std	pointer
;	O
i	int
++	O
)	O
{	O
int	O
offset	long
=	O
tzs	array
[	O
i	int
]	O
.	O
utc_offset	int
;	O
int	O
dst	pointer
=	O
0	int
;	O
if	O
(	O
tm	struct
.	O
tm_isdst	int
)	O
dst	pointer
=	O
-	O
1	int
;	O
if	O
(	O
tz	pointer
.	O
utc_offset	int
==	O
(	O
offset	long
+	O
dst	pointer
)	O
*	O
3600	int
)	O
{	O
if	O
(	O
dst	pointer
)	O
tzname	array
=	O
tzs	array
[	O
i	int
]	O
.	O
dst	pointer
;	O
else	O
tzname	array
=	O
tzs	array
[	O
i	int
]	O
.	O
std	pointer
;	O
break	O
;	O
}	O
}	O
}	O
len	int
=	O
strftime	function
(	O
buf	pointer
,	O
sizeof	O
buf	pointer
,	O
"%a, %d %b %Y %H:%M:%S "	pointer
,	O
&	O
tm	struct
)	O
;	O
if	O
(	O
tzname	array
)	O
snprintf	function
(	O
buf	pointer
+	O
len	int
,	O
sizeof	O
(	O
buf	pointer
)	O
-	O
len	int
,	O
"%s"	pointer
,	O
tzname	array
)	O
;	O
else	O
{	O
int	O
min	int
,	O
hrs	int
,	O
sign	int
;	O
int	O
offset	long
=	O
tz	pointer
.	O
utc_offset	int
;	O
if	O
(	O
offset	long
<	O
0	int
)	O
{	O
sign	int
=	O
'-'	O
;	O
offset	long
=	O
-	O
offset	long
;	O
}	O
else	O
sign	int
=	O
'+'	O
;	O
min	int
=	O
offset	long
/	O
60	int
;	O
hrs	int
=	O
min	int
/	O
60	int
;	O
min	int
%=	O
60	int
;	O
snprintf	function
(	O
buf	pointer
+	O
len	int
,	O
sizeof	O
(	O
buf	pointer
)	O
-	O
len	int
,	O
"%c%02d%02d"	pointer
,	O
sign	int
,	O
hrs	int
,	O
min	int
)	O
;	O
}	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
buf	pointer
)	O
;	O
}	O
static	O
void	O
builtin_tws	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
date_cvt	function
(	O
mach	pointer
,	O
0	int
)	O
;	O
}	O
static	O
void	O
builtin_pretty	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
date_cvt	function
(	O
mach	pointer
,	O
1	int
)	O
;	O
}	O
static	O
void	O
builtin_nodate	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
char	O
const	O
*	O
date	struct
=	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mu_parse_date_dtl	function
(	O
date	struct
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
!=	O
0	int
;	O
}	O
static	O
void	O
builtin_proper	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
const	O
*	O
str	pointer
;	O
mu_address_t	pointer
addr	pointer
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mh_string_copy	function
(	O
mach	pointer
,	O
R_REG	int
,	O
R_ARG	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
mu_address_sget_printable	function
(	O
addr	pointer
,	O
&	O
str	pointer
)	O
==	O
0	int
&&	O
str	pointer
)	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
str	pointer
)	O
;	O
else	O
mh_string_copy	function
(	O
mach	pointer
,	O
R_REG	int
,	O
R_ARG	int
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
static	O
void	O
builtin_friendly	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
;	O
if	O
(	O
mu_address_sget_personal	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
str	pointer
)	O
==	O
0	int
&&	O
str	pointer
)	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
str	pointer
)	O
;	O
else	O
mh_string_copy	function
(	O
mach	pointer
,	O
R_REG	int
,	O
R_ARG	int
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
static	O
void	O
builtin_addr	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
const	O
char	O
*	O
arg	pointer
=	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
;	O
mu_address_t	pointer
addr	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
arg	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
int	O
rc	int
=	O
mu_address_sget_email	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
mu_prstr	function
(	O
str	pointer
)	O
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
return	O
;	O
}	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
arg	pointer
)	O
;	O
}	O
static	O
void	O
builtin_pers	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
char	O
const	O
*	O
arg	pointer
=	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
;	O
mu_address_t	pointer
addr	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
arg	pointer
)	O
;	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
;	O
if	O
(	O
mu_address_sget_personal	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
str	pointer
)	O
==	O
0	int
&&	O
str	pointer
)	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
str	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
static	O
void	O
builtin_note	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
;	O
if	O
(	O
mu_address_sget_comments	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
str	pointer
)	O
==	O
0	int
&&	O
str	pointer
)	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
str	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
static	O
void	O
builtin_mbox	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
;	O
char	O
*	O
str	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
;	O
if	O
(	O
mu_address_aget_email	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
str	pointer
)	O
==	O
0	int
&&	O
str	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
str	pointer
,	O
'@'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
*	O
p	pointer
=	O
0	int
;	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
str	pointer
)	O
;	O
free	function
(	O
str	pointer
)	O
;	O
}	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
static	O
void	O
builtin_mymbox	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
if	O
(	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
)	O
return	O
;	O
if	O
(	O
mu_address_sget_email	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
str	pointer
)	O
==	O
0	int
&&	O
str	pointer
)	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
mh_is_my_name	function
(	O
str	pointer
)	O
;	O
else	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
0	int
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
static	O
void	O
builtin_host	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
;	O
char	O
*	O
str	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
;	O
if	O
(	O
mu_address_aget_email	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
str	pointer
)	O
==	O
0	int
&&	O
str	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
str	pointer
,	O
'@'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
p	pointer
+	O
1	int
)	O
;	O
free	function
(	O
str	pointer
)	O
;	O
}	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
static	O
void	O
builtin_nohost	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
struct	O
mu_address	struct
hint	pointer
;	O
mu_address_t	pointer
addr	pointer
;	O
const	O
char	O
*	O
dom	pointer
;	O
int	O
rc	int
;	O
hint	pointer
.	O
domain	pointer
=	O
NULL	O
;	O
rc	int
=	O
mu_address_create_hint	function
(	O
&	O
addr	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
,	O
&	O
hint	pointer
,	O
MU_ADDR_HINT_DOMAIN	int
)	O
;	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
1	int
;	O
else	O
{	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
!	O
(	O
mu_address_sget_domain	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
dom	pointer
)	O
==	O
0	int
&&	O
dom	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
}	O
static	O
void	O
builtin_type	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
;	O
int	O
rc	int
;	O
const	O
char	O
*	O
str	pointer
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
;	O
if	O
(	O
mu_address_sget_email	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
str	pointer
)	O
==	O
0	int
&&	O
str	pointer
)	O
{	O
if	O
(	O
strchr	function
(	O
str	pointer
,	O
'@'	O
)	O
)	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
1	int
;	O
else	O
if	O
(	O
strchr	function
(	O
str	pointer
,	O
'!'	O
)	O
)	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
-	O
1	int
;	O
else	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
0	int
;	O
}	O
else	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
2	int
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
static	O
void	O
builtin_path	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
;	O
const	O
char	O
*	O
str	pointer
;	O
int	O
rc	int
=	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
;	O
if	O
(	O
mu_address_sget_route	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
str	pointer
)	O
&&	O
str	pointer
)	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
str	pointer
)	O
;	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
}	O
static	O
void	O
builtin_ingrp	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
builtin_not_implemented	function
(	O
"ingrp"	pointer
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
0	int
;	O
}	O
static	O
void	O
builtin_gname	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
builtin_not_implemented	function
(	O
"gname"	pointer
)	O
;	O
builtin_str_noop	function
(	O
mach	pointer
)	O
;	O
}	O
static	O
void	O
builtin_formataddr	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
,	O
dest	pointer
;	O
int	O
i	int
;	O
size_t	long
num	long
;	O
const	O
char	O
*	O
buf	pointer
;	O
if	O
(	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ACC	int
]	O
)	O
)	O
dest	pointer
=	O
NULL	O
;	O
else	O
if	O
(	O
mu_address_create	function
(	O
&	O
dest	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ACC	int
]	O
)	O
)	O
)	O
return	O
;	O
if	O
(	O
!	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
&&	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
==	O
0	int
)	O
{	O
mu_address_get_count	function
(	O
addr	pointer
,	O
&	O
num	long
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
num	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mu_address_sget_email	function
(	O
addr	pointer
,	O
i	int
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
buf	pointer
)	O
{	O
if	O
(	O
(	O
rcpt_mask	int
&	O
RCPT_ME	int
)	O
||	O
!	O
mh_is_my_name	function
(	O
buf	pointer
)	O
)	O
{	O
mu_address_t	pointer
subaddr	pointer
;	O
mu_address_get_nth	function
(	O
addr	pointer
,	O
i	int
,	O
&	O
subaddr	pointer
)	O
;	O
if	O
(	O
!	O
addrlist_lookup	function
(	O
mach	pointer
->	O
addrlist	pointer
,	O
subaddr	pointer
)	O
)	O
{	O
mu_list_append	function
(	O
mach	pointer
->	O
addrlist	pointer
,	O
subaddr	pointer
)	O
;	O
mu_address_union	function
(	O
&	O
dest	pointer
,	O
subaddr	pointer
)	O
;	O
}	O
else	O
mu_address_destroy	function
(	O
&	O
subaddr	pointer
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
mu_address_sget_printable	function
(	O
dest	pointer
,	O
&	O
buf	pointer
)	O
==	O
0	int
&&	O
buf	pointer
)	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
buf	pointer
)	O
;	O
else	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
mu_address_destroy	function
(	O
&	O
dest	pointer
)	O
;	O
}	O
static	O
void	O
builtin_putaddr	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
if	O
(	O
!	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
print_hdr_string	function
(	O
mach	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
)	O
print_hdr_string	function
(	O
mach	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
)	O
;	O
}	O
static	O
void	O
builtin_unre	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
char	O
const	O
*	O
arg	pointer
=	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
;	O
char	O
const	O
*	O
p	pointer
;	O
int	O
rc	int
=	O
mu_unre_subject	function
(	O
arg	pointer
,	O
&	O
p	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
p	pointer
!=	O
arg	pointer
)	O
{	O
char	O
*	O
q	pointer
=	O
mu_strdup	function
(	O
p	pointer
)	O
;	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
q	pointer
)	O
;	O
free	function
(	O
q	pointer
)	O
;	O
}	O
else	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
arg	pointer
)	O
;	O
}	O
static	O
void	O
builtin_isreply	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
{	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
char	O
*	O
value	pointer
=	O
NULL	O
;	O
mu_message_get_header	function
(	O
mach	pointer
->	O
message	pointer
,	O
&	O
hdr	pointer
)	O
;	O
mu_header_aget_value	O
(	O
hdr	pointer
,	O
MU_HEADER_SUBJECT	pointer
,	O
&	O
value	pointer
)	O
;	O
rc	int
=	O
mu_unre_subject	function
(	O
value	pointer
,	O
NULL	O
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
}	O
else	O
rc	int
=	O
mu_unre_subject	function
(	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
,	O
NULL	O
)	O
;	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
!	O
rc	int
;	O
}	O
static	O
void	O
builtin_decode	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
char	O
*	O
tmp	pointer
;	O
if	O
(	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
return	O
;	O
if	O
(	O
mh_decode_2047	function
(	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
,	O
&	O
tmp	pointer
)	O
==	O
0	int
)	O
{	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
tmp	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
}	O
static	O
void	O
builtin_reply_regex	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mh_set_reply_regex	function
(	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
}	O
int	O
mh_decode_rcpt_flag	function
(	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"to"	pointer
)	O
==	O
0	int
)	O
return	O
RCPT_TO	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"cc"	pointer
)	O
==	O
0	int
)	O
return	O
RCPT_CC	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"me"	pointer
)	O
==	O
0	int
)	O
return	O
RCPT_ME	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
arg	pointer
,	O
"all"	pointer
)	O
==	O
0	int
)	O
return	O
RCPT_ALL	O
;	O
return	O
RCPT_NONE	int
;	O
}	O
static	O
void	O
builtin_rcpt	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
int	O
rc	int
=	O
mh_decode_rcpt_flag	function
(	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
if	O
(	O
rc	int
==	O
RCPT_NONE	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"invalid recipient mask"	pointer
)	O
)	O
;	O
}	O
mach	pointer
->	O
num	long
[	O
R_REG	int
]	O
=	O
!	O
!	O
(	O
rc	int
&	O
rcpt_mask	int
)	O
;	O
}	O
static	O
void	O
builtin_printhdr	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
char	O
*	O
tmp	pointer
=	O
NULL	O
;	O
size_t	long
s	pointer
=	O
0	int
;	O
if	O
(	O
!	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
{	O
s	pointer
=	O
mh_string_length	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
;	O
tmp	pointer
=	O
mu_strdup	function
(	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
)	O
;	O
}	O
if	O
(	O
!	O
mh_string_is_null	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
)	O
{	O
s	pointer
+=	O
mh_string_length	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
+	O
1	int
;	O
tmp	pointer
=	O
mu_realloc	function
(	O
tmp	pointer
,	O
s	pointer
)	O
;	O
strcat	function
(	O
tmp	pointer
,	O
mh_string_value	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
)	O
;	O
}	O
if	O
(	O
tmp	pointer
)	O
{	O
print_hdr_string	function
(	O
mach	pointer
,	O
tmp	pointer
)	O
;	O
free	function
(	O
tmp	pointer
)	O
;	O
}	O
}	O
static	O
void	O
builtin_in_reply_to	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
char	O
*	O
value	pointer
;	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
if	O
(	O
mu_rfc2822_in_reply_to	function
(	O
mach	pointer
->	O
message	pointer
,	O
&	O
value	pointer
)	O
==	O
0	int
)	O
{	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
value	pointer
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
}	O
}	O
static	O
void	O
builtin_references	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
char	O
*	O
value	pointer
;	O
mh_string_clear	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
if	O
(	O
mu_rfc2822_references	function
(	O
mach	pointer
->	O
message	pointer
,	O
&	O
value	pointer
)	O
==	O
0	int
)	O
{	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
value	pointer
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
}	O
}	O
static	O
void	O
builtin_package	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
PACKAGE	pointer
)	O
;	O
}	O
static	O
void	O
builtin_package_string	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
PACKAGE_STRING	pointer
)	O
;	O
}	O
static	O
void	O
builtin_version	function
(	O
struct	O
mh_fvm	struct
*	O
mach	pointer
)	O
{	O
mh_string_load	function
(	O
&	O
mach	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
,	O
VERSION	pointer
)	O
;	O
}	O
mh_builtin_t	struct
builtin_tab	array
[	O
]	O
=	O
{	O
{	O
"msg"	pointer
,	O
builtin_msg	function
,	O
mhtype_num	int
,	O
mhtype_none	int
}	O
,	O
{	O
"cur"	pointer
,	O
builtin_cur	function
,	O
mhtype_num	int
,	O
mhtype_none	int
}	O
,	O
{	O
"size"	pointer
,	O
builtin_size	function
,	O
mhtype_num	int
,	O
mhtype_none	int
}	O
,	O
{	O
"strlen"	pointer
,	O
builtin_strlen	function
,	O
mhtype_num	int
,	O
mhtype_none	int
}	O
,	O
{	O
"width"	pointer
,	O
builtin_width	function
,	O
mhtype_num	int
,	O
mhtype_none	int
}	O
,	O
{	O
"charleft"	pointer
,	O
builtin_charleft	function
,	O
mhtype_num	int
,	O
mhtype_none	int
}	O
,	O
{	O
"timenow"	pointer
,	O
builtin_timenow	function
,	O
mhtype_num	int
,	O
mhtype_none	int
}	O
,	O
{	O
"me"	pointer
,	O
builtin_me	function
,	O
mhtype_str	int
,	O
mhtype_none	int
}	O
,	O
{	O
"myhost"	pointer
,	O
builtin_myhost	function
,	O
mhtype_str	int
,	O
mhtype_none	int
}	O
,	O
{	O
"myname"	pointer
,	O
builtin_myname	function
,	O
mhtype_str	int
,	O
mhtype_none	int
}	O
,	O
{	O
"localmbox"	pointer
,	O
builtin_localmbox	function
,	O
mhtype_str	int
,	O
mhtype_none	int
}	O
,	O
{	O
"eq"	pointer
,	O
builtin_eq	function
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"ne"	pointer
,	O
builtin_ne	function
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"gt"	pointer
,	O
builtin_gt	function
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"match"	pointer
,	O
builtin_match	function
,	O
mhtype_num	int
,	O
mhtype_str	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"amatch"	pointer
,	O
builtin_amatch	function
,	O
mhtype_num	int
,	O
mhtype_str	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"plus"	pointer
,	O
builtin_plus	function
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"minus"	pointer
,	O
builtin_minus	function
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"divide"	pointer
,	O
builtin_divide	function
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"modulo"	pointer
,	O
builtin_modulo	function
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"num"	pointer
,	O
NULL	O
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_LITERAL	int
|	O
MHA_OPTARG	int
|	O
MHA_OPTARG_NIL	int
|	O
MHA_SPECIAL	int
}	O
,	O
{	O
"lit"	pointer
,	O
NULL	O
,	O
mhtype_str	int
,	O
mhtype_str	int
,	O
MHA_LITERAL	int
|	O
MHA_OPTARG	int
|	O
MHA_OPTARG_NIL	int
|	O
MHA_SPECIAL	int
}	O
,	O
{	O
"getenv"	pointer
,	O
builtin_getenv	function
,	O
mhtype_str	int
,	O
mhtype_str	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"profile"	pointer
,	O
builtin_profile	function
,	O
mhtype_str	int
,	O
mhtype_str	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"nonzero"	pointer
,	O
builtin_nonzero	function
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_OPTARG	int
}	O
,	O
{	O
"zero"	pointer
,	O
builtin_zero	function
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_OPTARG	int
}	O
,	O
{	O
"null"	pointer
,	O
builtin_null	function
,	O
mhtype_num	int
,	O
mhtype_str	int
,	O
MHA_OPTARG	int
}	O
,	O
{	O
"nonnull"	pointer
,	O
builtin_nonnull	function
,	O
mhtype_num	int
,	O
mhtype_str	int
,	O
MHA_OPTARG	int
}	O
,	O
{	O
"comp"	pointer
,	O
builtin_comp	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"compval"	pointer
,	O
builtin_compval	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"trim"	pointer
,	O
builtin_trim	function
,	O
mhtype_none	int
,	O
mhtype_str	int
,	O
MHA_OPTARG	int
}	O
,	O
{	O
"putstr"	pointer
,	O
NULL	O
,	O
mhtype_str	int
,	O
mhtype_str	int
,	O
MHA_SPECIAL	int
|	O
MHA_OPTARG	int
|	O
MHA_OPTARG	int
|	O
MHA_IGNOREFMT	int
}	O
,	O
{	O
"putstrf"	pointer
,	O
NULL	O
,	O
mhtype_str	int
,	O
mhtype_str	int
,	O
MHA_SPECIAL	int
|	O
MHA_OPTARG	int
}	O
,	O
{	O
"putnum"	pointer
,	O
NULL	O
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_SPECIAL	int
|	O
MHA_OPTARG	int
|	O
MHA_IGNOREFMT	int
}	O
,	O
{	O
"putnumf"	pointer
,	O
NULL	O
,	O
mhtype_num	int
,	O
mhtype_num	int
,	O
MHA_SPECIAL	int
|	O
MHA_OPTARG	int
}	O
,	O
{	O
"sec"	pointer
,	O
builtin_sec	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"min"	pointer
,	O
builtin_min	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"hour"	pointer
,	O
builtin_hour	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"wday"	pointer
,	O
builtin_wday	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"day"	pointer
,	O
builtin_day	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"weekday"	pointer
,	O
builtin_weekday	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"sday"	pointer
,	O
builtin_sday	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"mday"	pointer
,	O
builtin_mday	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"yday"	pointer
,	O
builtin_yday	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"mon"	pointer
,	O
builtin_mon	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"month"	pointer
,	O
builtin_month	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"lmonth"	pointer
,	O
builtin_lmonth	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"year"	pointer
,	O
builtin_year	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"zone"	pointer
,	O
builtin_zone	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"tzone"	pointer
,	O
builtin_tzone	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"szone"	pointer
,	O
builtin_szone	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"date2local"	pointer
,	O
builtin_date2local	function
,	O
mhtype_none	int
,	O
mhtype_str	int
}	O
,	O
{	O
"date2gmt"	pointer
,	O
builtin_date2gmt	function
,	O
mhtype_none	int
,	O
mhtype_str	int
}	O
,	O
{	O
"dst"	pointer
,	O
builtin_dst	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"clock"	pointer
,	O
builtin_clock	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"rclock"	pointer
,	O
builtin_rclock	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"tws"	pointer
,	O
builtin_tws	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"pretty"	pointer
,	O
builtin_pretty	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"nodate"	pointer
,	O
builtin_nodate	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"proper"	pointer
,	O
builtin_proper	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"friendly"	pointer
,	O
builtin_friendly	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"addr"	pointer
,	O
builtin_addr	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"pers"	pointer
,	O
builtin_pers	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"note"	pointer
,	O
builtin_note	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"mbox"	pointer
,	O
builtin_mbox	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"mymbox"	pointer
,	O
builtin_mymbox	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"host"	pointer
,	O
builtin_host	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"nohost"	pointer
,	O
builtin_nohost	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"type"	pointer
,	O
builtin_type	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"path"	pointer
,	O
builtin_path	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"ingrp"	pointer
,	O
builtin_ingrp	function
,	O
mhtype_num	int
,	O
mhtype_str	int
}	O
,	O
{	O
"gname"	pointer
,	O
builtin_gname	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"formataddr"	pointer
,	O
builtin_formataddr	function
,	O
mhtype_none	int
,	O
mhtype_str	int
,	O
MHA_ACC	int
}	O
,	O
{	O
"putaddr"	pointer
,	O
builtin_putaddr	function
,	O
mhtype_none	int
,	O
mhtype_str	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"unre"	pointer
,	O
builtin_unre	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"rcpt"	pointer
,	O
builtin_rcpt	function
,	O
mhtype_num	int
,	O
mhtype_str	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"printhdr"	pointer
,	O
builtin_printhdr	function
,	O
mhtype_none	int
,	O
mhtype_str	int
,	O
MHA_LITERAL	int
}	O
,	O
{	O
"in_reply_to"	pointer
,	O
builtin_in_reply_to	function
,	O
mhtype_str	int
,	O
mhtype_none	int
}	O
,	O
{	O
"references"	pointer
,	O
builtin_references	function
,	O
mhtype_str	int
,	O
mhtype_none	int
}	O
,	O
{	O
"package"	pointer
,	O
builtin_package	function
,	O
mhtype_str	int
,	O
mhtype_none	int
}	O
,	O
{	O
"package_string"	pointer
,	O
builtin_package_string	function
,	O
mhtype_str	int
,	O
mhtype_none	int
}	O
,	O
{	O
"version"	pointer
,	O
builtin_version	function
,	O
mhtype_str	int
,	O
mhtype_none	int
}	O
,	O
{	O
"reply_regex"	pointer
,	O
builtin_reply_regex	function
,	O
mhtype_none	int
,	O
mhtype_str	int
}	O
,	O
{	O
"isreply"	pointer
,	O
builtin_isreply	function
,	O
mhtype_num	int
,	O
mhtype_str	int
,	O
MHA_OPTARG	int
}	O
,	O
{	O
"decode"	pointer
,	O
builtin_decode	function
,	O
mhtype_str	int
,	O
mhtype_str	int
}	O
,	O
{	O
"void"	pointer
,	O
NULL	O
,	O
mhtype_none	int
,	O
mhtype_str	int
,	O
MHA_VOID	int
}	O
,	O
{	O
0	int
}	O
}	O
;	O
mh_builtin_t	struct
*	O
mh_lookup_builtin	function
(	O
char	O
*	O
name	pointer
,	O
size_t	long
len	int
)	O
{	O
mh_builtin_t	struct
*	O
bp	pointer
;	O
for	O
(	O
bp	pointer
=	O
builtin_tab	array
;	O
bp	pointer
->	O
name	pointer
;	O
bp	pointer
++	O
)	O
{	O
if	O
(	O
strlen	function
(	O
bp	pointer
->	O
name	pointer
)	O
==	O
len	int
&&	O
memcmp	function
(	O
name	pointer
,	O
bp	pointer
->	O
name	pointer
,	O
len	int
)	O
==	O
0	int
)	O
return	O
bp	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
char	O
*	O
_get_builtin_name	function
(	O
mh_builtin_fp	pointer
ptr	pointer
)	O
{	O
mh_builtin_t	struct
*	O
bp	pointer
;	O
for	O
(	O
bp	pointer
=	O
builtin_tab	array
;	O
bp	pointer
->	O
name	pointer
;	O
bp	pointer
++	O
)	O
if	O
(	O
bp	pointer
->	O
fun	pointer
==	O
ptr	pointer
)	O
return	O
bp	pointer
->	O
name	pointer
;	O
return	O
NULL	O
;	O
}	O
size_t	long
find_label	function
(	O
size_t	long
*	O
lab	pointer
,	O
size_t	long
pc	long
)	O
{	O
if	O
(	O
lab	pointer
)	O
{	O
size_t	long
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
lab	pointer
[	O
0	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
lab	pointer
[	O
i	int
]	O
==	O
pc	long
)	O
return	O
i	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
comp_pc	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
)	O
{	O
size_t	long
pca	long
=	O
*	O
(	O
size_t	long
*	O
)	O
a	pointer
;	O
size_t	long
pcb	long
=	O
*	O
(	O
size_t	long
*	O
)	O
b	pointer
;	O
if	O
(	O
pca	long
<	O
pcb	long
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
pca	long
>	O
pcb	long
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
size_t	long
*	O
extract_labels	function
(	O
mh_format_t	pointer
fmt	pointer
)	O
{	O
size_t	long
*	O
lab	pointer
;	O
size_t	long
pc	long
;	O
long	O
n	long
;	O
lab	pointer
=	O
mu_calloc	function
(	O
fmt	pointer
->	O
progcnt	long
,	O
sizeof	O
(	O
lab	pointer
[	O
0	int
]	O
)	O
)	O
;	O
lab	pointer
[	O
0	int
]	O
=	O
0	int
;	O
for	O
(	O
pc	long
=	O
1	int
;	O
pc	long
<	O
fmt	pointer
->	O
progcnt	long
;	O
)	O
{	O
mh_opcode_t	enum
opcode	int
=	O
MHI_OPCODE	O
(	O
fmt	pointer
->	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
if	O
(	O
opcode	int
==	O
mhop_stop	int
)	O
break	O
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
mhop_branch	int
:	O
case	O
mhop_brzn	int
:	O
case	O
mhop_brzs	int
:	O
n	long
=	O
MHI_NUM	O
(	O
fmt	pointer
->	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
if	O
(	O
!	O
find_label	function
(	O
lab	pointer
,	O
pc	long
+	O
n	long
-	O
1	int
)	O
)	O
lab	pointer
[	O
++	O
lab	pointer
[	O
0	int
]	O
]	O
=	O
pc	long
+	O
n	long
-	O
1	int
;	O
break	O
;	O
case	O
mhop_setn	int
:	O
pc	long
+=	O
2	int
;	O
break	O
;	O
case	O
mhop_sets	int
:	O
case	O
mhop_ldcomp	int
:	O
pc	long
+=	O
2	int
+	O
MHI_NUM	O
(	O
fmt	pointer
->	O
prog	pointer
[	O
pc	long
+	O
1	int
]	O
)	O
;	O
break	O
;	O
case	O
mhop_movn	int
:	O
case	O
mhop_movs	int
:	O
pc	long
+=	O
2	int
;	O
break	O
;	O
case	O
mhop_ldbody	int
:	O
case	O
mhop_call	int
:	O
case	O
mhop_fmtspec	int
:	O
pc	long
++	O
;	O
break	O
;	O
case	O
mhop_printlit	int
:	O
pc	long
+=	O
1	int
+	O
MHI_NUM	O
(	O
fmt	pointer
->	O
prog	pointer
[	O
pc	long
]	O
)	O
;	O
break	O
;	O
case	O
mhop_atoi	int
:	O
case	O
mhop_itoa	int
:	O
case	O
mhop_printn	int
:	O
case	O
mhop_prints	int
:	O
case	O
mhop_pushn	int
:	O
case	O
mhop_popn	int
:	O
case	O
mhop_xchgn	int
:	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
lab	pointer
[	O
0	int
]	O
>	O
0	int
)	O
qsort	function
(	O
lab	pointer
+	O
1	int
,	O
lab	pointer
[	O
0	int
]	O
,	O
sizeof	O
lab	pointer
[	O
0	int
]	O
,	O
comp_pc	function
)	O
;	O
return	O
lab	pointer
;	O
}	O
void	O
format_label	function
(	O
size_t	long
*	O
lab	pointer
,	O
size_t	long
pc	long
,	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
psz	pointer
)	O
{	O
size_t	long
ln	long
=	O
find_label	function
(	O
lab	pointer
,	O
pc	long
)	O
;	O
if	O
(	O
ln	long
)	O
mu_asnprintf	function
(	O
pbuf	pointer
,	O
psz	pointer
,	O
"L%ld"	pointer
,	O
(	O
long	O
)	O
ln	long
)	O
;	O
else	O
mu_asnprintf	function
(	O
pbuf	pointer
,	O
psz	pointer
,	O
"%ld"	pointer
,	O
(	O
long	O
)	O
pc	long
)	O
;	O
}	O
void	O
mh_format_dump_disass	function
(	O
mh_format_t	pointer
fmt	pointer
,	O
int	O
addr	pointer
)	O
{	O
mh_instr_t	union
*	O
prog	pointer
=	O
fmt	pointer
->	O
prog	pointer
;	O
size_t	long
pc	long
=	O
1	int
;	O
int	O
stop	int
=	O
0	int
;	O
static	O
char	O
*	O
regname	array
[	O
]	O
=	O
{	O
[	O
R_REG	int
]	O
=	O
"reg"	pointer
,	O
[	O
R_ARG	int
]	O
=	O
"arg"	pointer
,	O
[	O
R_ACC	int
]	O
=	O
"acc"	pointer
}	O
;	O
static	O
char	O
c_trans	array
[	O
]	O
=	O
"\\\\\"\"a\ab\bf\fn\nr\rt\tv\v"	pointer
;	O
size_t	long
*	O
lab	pointer
;	O
size_t	long
lc	long
;	O
char	O
*	O
lbuf	pointer
=	O
NULL	O
;	O
size_t	long
lsz	long
=	O
0	int
;	O
if	O
(	O
!	O
prog	pointer
)	O
return	O
;	O
if	O
(	O
!	O
addr	pointer
)	O
lab	pointer
=	O
extract_labels	function
(	O
fmt	pointer
)	O
;	O
else	O
lab	pointer
=	O
NULL	O
;	O
lc	long
=	O
lab	pointer
?	O
1	int
:	O
0	int
;	O
while	O
(	O
!	O
stop	int
)	O
{	O
mh_opcode_t	enum
opcode	int
;	O
if	O
(	O
addr	pointer
)	O
printf	function
(	O
"% 4.4ld: "	pointer
,	O
(	O
long	O
)	O
pc	long
)	O
;	O
else	O
{	O
int	O
w	int
=	O
0	int
;	O
if	O
(	O
lc	long
<=	O
lab	pointer
[	O
0	int
]	O
&&	O
lab	pointer
[	O
lc	long
]	O
==	O
pc	long
)	O
{	O
w	int
=	O
printf	function
(	O
"L%ld:"	pointer
,	O
(	O
long	O
)	O
lc	long
)	O
;	O
lc	long
++	O
;	O
}	O
if	O
(	O
w	int
>	O
8	int
)	O
{	O
putchar	function
(	O
'\n'	O
)	O
;	O
w	int
=	O
0	int
;	O
}	O
while	O
(	O
w	int
<	O
8	int
)	O
{	O
putchar	function
(	O
' '	O
)	O
;	O
w	int
++	O
;	O
}	O
}	O
switch	O
(	O
opcode	int
=	O
MHI_OPCODE	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
)	O
{	O
case	O
mhop_stop	int
:	O
printf	function
(	O
"stop"	pointer
)	O
;	O
stop	int
=	O
1	int
;	O
break	O
;	O
case	O
mhop_branch	int
:	O
{	O
long	O
n	long
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
format_label	function
(	O
lab	pointer
,	O
pc	long
+	O
n	long
-	O
1	int
,	O
&	O
lbuf	pointer
,	O
&	O
lsz	long
)	O
;	O
printf	function
(	O
"branch %s"	pointer
,	O
lbuf	pointer
)	O
;	O
}	O
break	O
;	O
case	O
mhop_brzn	int
:	O
{	O
long	O
n	long
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
format_label	function
(	O
lab	pointer
,	O
pc	long
+	O
n	long
-	O
1	int
,	O
&	O
lbuf	pointer
,	O
&	O
lsz	long
)	O
;	O
printf	function
(	O
"brzn %s"	pointer
,	O
lbuf	pointer
)	O
;	O
}	O
break	O
;	O
case	O
mhop_brzs	int
:	O
{	O
long	O
n	long
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
format_label	function
(	O
lab	pointer
,	O
pc	long
+	O
n	long
-	O
1	int
,	O
&	O
lbuf	pointer
,	O
&	O
lsz	long
)	O
;	O
printf	function
(	O
"brzs %s"	pointer
,	O
lbuf	pointer
)	O
;	O
}	O
break	O
;	O
case	O
mhop_setn	int
:	O
{	O
long	O
reg	long
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
long	O
n	long
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
printf	function
(	O
"setn %s, %ld"	pointer
,	O
regname	array
[	O
reg	long
]	O
,	O
n	long
)	O
;	O
}	O
break	O
;	O
case	O
mhop_sets	int
:	O
{	O
long	O
reg	long
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
size_t	long
skip	long
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
char	O
const	O
*	O
str	pointer
=	O
MHI_STR	O
(	O
prog	pointer
[	O
pc	long
]	O
)	O
;	O
char	O
*	O
prt	pointer
;	O
MU_ASSERT	O
(	O
mu_c_str_escape_trans	function
(	O
str	pointer
,	O
c_trans	array
,	O
&	O
prt	pointer
)	O
)	O
;	O
pc	long
+=	O
skip	long
;	O
printf	function
(	O
"sets %s, \"%s\""	pointer
,	O
regname	array
[	O
reg	long
]	O
,	O
prt	pointer
)	O
;	O
free	function
(	O
prt	pointer
)	O
;	O
}	O
break	O
;	O
case	O
mhop_movn	int
:	O
{	O
long	O
dst	pointer
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
long	O
src	pointer
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
printf	function
(	O
"movn %s, %s"	pointer
,	O
regname	array
[	O
dst	pointer
]	O
,	O
regname	array
[	O
src	pointer
]	O
)	O
;	O
}	O
break	O
;	O
case	O
mhop_movs	int
:	O
{	O
long	O
dst	pointer
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
long	O
src	pointer
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
printf	function
(	O
"movs %s, %s"	pointer
,	O
regname	array
[	O
dst	pointer
]	O
,	O
regname	array
[	O
src	pointer
]	O
)	O
;	O
}	O
break	O
;	O
case	O
mhop_pushn	int
:	O
printf	function
(	O
"pushn"	pointer
)	O
;	O
break	O
;	O
case	O
mhop_popn	int
:	O
printf	function
(	O
"popn"	pointer
)	O
;	O
break	O
;	O
case	O
mhop_xchgn	int
:	O
printf	function
(	O
"xchgn"	pointer
)	O
;	O
break	O
;	O
case	O
mhop_ldcomp	int
:	O
{	O
long	O
reg	long
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
size_t	long
skip	long
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
char	O
const	O
*	O
comp	pointer
=	O
MHI_STR	O
(	O
prog	pointer
[	O
pc	long
]	O
)	O
;	O
pc	long
+=	O
skip	long
;	O
printf	function
(	O
"ldcomp %s, \"%s\""	pointer
,	O
regname	array
[	O
reg	long
]	O
,	O
comp	pointer
)	O
;	O
}	O
break	O
;	O
case	O
mhop_ldbody	int
:	O
{	O
long	O
reg	long
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
printf	function
(	O
"ldbody %s"	pointer
,	O
regname	array
[	O
reg	long
]	O
)	O
;	O
}	O
break	O
;	O
case	O
mhop_call	int
:	O
{	O
char	O
*	O
name	pointer
=	O
_get_builtin_name	function
(	O
MHI_BUILTIN	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
)	O
;	O
printf	function
(	O
"call %s"	pointer
,	O
name	pointer
?	O
name	pointer
:	O
"UNKNOWN"	pointer
)	O
;	O
}	O
break	O
;	O
case	O
mhop_atoi	int
:	O
printf	function
(	O
"atoi"	pointer
)	O
;	O
break	O
;	O
case	O
mhop_itoa	int
:	O
printf	function
(	O
"itoa"	pointer
)	O
;	O
break	O
;	O
case	O
mhop_printn	int
:	O
printf	function
(	O
"printn"	pointer
)	O
;	O
break	O
;	O
case	O
mhop_prints	int
:	O
printf	function
(	O
"prints"	pointer
)	O
;	O
break	O
;	O
case	O
mhop_printlit	int
:	O
{	O
size_t	long
skip	long
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
char	O
const	O
*	O
str	pointer
=	O
MHI_STR	O
(	O
prog	pointer
[	O
pc	long
]	O
)	O
;	O
char	O
*	O
prt	pointer
;	O
pc	long
+=	O
skip	long
;	O
MU_ASSERT	O
(	O
mu_c_str_escape_trans	function
(	O
str	pointer
,	O
c_trans	array
,	O
&	O
prt	pointer
)	O
)	O
;	O
printf	function
(	O
"printlit \"%s\""	pointer
,	O
prt	pointer
)	O
;	O
free	function
(	O
prt	pointer
)	O
;	O
}	O
break	O
;	O
case	O
mhop_fmtspec	int
:	O
{	O
int	O
fmtspec	int
=	O
MHI_NUM	O
(	O
prog	pointer
[	O
pc	long
++	O
]	O
)	O
;	O
printf	function
(	O
"fmtspec "	pointer
)	O
;	O
mh_print_fmtspec	function
(	O
fmtspec	int
)	O
;	O
printf	function
(	O
", %d"	pointer
,	O
fmtspec	int
&	O
MH_WIDTH_MASK	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
printf	function
(	O
"\n"	pointer
)	O
;	O
}	O
free	function
(	O
lbuf	pointer
)	O
;	O
free	function
(	O
lab	pointer
)	O
;	O
}	O
void	O
mh_fvm_create	function
(	O
mh_fvm_t	pointer
*	O
fvmp	pointer
,	O
int	O
flags	int
)	O
{	O
mh_fvm_t	pointer
fvm	pointer
;	O
const	O
char	O
*	O
charset	pointer
;	O
fvm	pointer
=	O
mu_zalloc	function
(	O
sizeof	O
*	O
fvm	pointer
)	O
;	O
fvm	pointer
->	O
flags	int
=	O
flags	int
;	O
fvm	pointer
->	O
output	pointer
=	O
mu_strout	pointer
;	O
mu_stream_ref	function
(	O
fvm	pointer
->	O
output	pointer
)	O
;	O
MU_ASSERT	O
(	O
mu_list_create	function
(	O
&	O
fvm	pointer
->	O
addrlist	pointer
)	O
)	O
;	O
charset	pointer
=	O
mh_global_profile_get	O
(	O
"Charset"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
charset	pointer
&&	O
strcmp	function
(	O
charset	pointer
,	O
"auto"	pointer
)	O
)	O
{	O
const	O
char	O
*	O
lc_base	pointer
=	O
mh_global_profile_get	O
(	O
"LC_BASE"	pointer
,	O
"en_US"	pointer
)	O
;	O
char	O
*	O
locale	pointer
=	O
mu_alloc	function
(	O
strlen	function
(	O
lc_base	pointer
)	O
+	O
1	int
+	O
strlen	function
(	O
charset	pointer
)	O
+	O
1	int
)	O
;	O
strcpy	function
(	O
locale	pointer
,	O
lc_base	pointer
)	O
;	O
strcat	function
(	O
locale	pointer
,	O
"."	pointer
)	O
;	O
strcat	function
(	O
locale	pointer
,	O
charset	pointer
)	O
;	O
if	O
(	O
!	O
setlocale	function
(	O
LC_CTYPE	O
,	O
locale	pointer
)	O
)	O
mu_error	function
(	O
_	O
(	O
"cannot set LC_CTYPE %s"	pointer
)	O
,	O
locale	pointer
)	O
;	O
free	function
(	O
locale	pointer
)	O
;	O
}	O
*	O
fvmp	pointer
=	O
fvm	pointer
;	O
}	O
void	O
mh_fvm_destroy	function
(	O
mh_fvm_t	pointer
*	O
fvmp	pointer
)	O
{	O
if	O
(	O
fvmp	pointer
)	O
{	O
mh_fvm_t	pointer
fvm	pointer
=	O
*	O
fvmp	pointer
;	O
free	function
(	O
fvm	pointer
->	O
prog	pointer
)	O
;	O
free	function
(	O
fvm	pointer
->	O
numstack	pointer
)	O
;	O
mh_string_free	function
(	O
&	O
fvm	pointer
->	O
str	pointer
[	O
R_REG	int
]	O
)	O
;	O
mh_string_free	function
(	O
&	O
fvm	pointer
->	O
str	pointer
[	O
R_ARG	int
]	O
)	O
;	O
mh_string_free	function
(	O
&	O
fvm	pointer
->	O
str	pointer
[	O
R_ACC	int
]	O
)	O
;	O
addrlist_destroy	function
(	O
&	O
fvm	pointer
->	O
addrlist	pointer
)	O
;	O
mu_stream_unref	function
(	O
fvm	pointer
->	O
output	pointer
)	O
;	O
free	function
(	O
fvm	pointer
)	O
;	O
*	O
fvmp	pointer
=	O
fvm	pointer
;	O
}	O
}	O
void	O
mh_fvm_set_output	function
(	O
mh_fvm_t	pointer
fvm	pointer
,	O
mu_stream_t	pointer
str	pointer
)	O
{	O
mu_stream_unref	function
(	O
fvm	pointer
->	O
output	pointer
)	O
;	O
fvm	pointer
->	O
output	pointer
=	O
str	pointer
;	O
mu_stream_ref	function
(	O
fvm	pointer
->	O
output	pointer
)	O
;	O
}	O
void	O
mh_fvm_set_width	function
(	O
mh_fvm_t	pointer
fvm	pointer
,	O
size_t	long
width	long
)	O
{	O
fvm	pointer
->	O
width	long
=	O
width	long
-	O
1	int
;	O
}	O
void	O
mh_fvm_set_format	function
(	O
mh_fvm_t	pointer
fvm	pointer
,	O
mh_format_t	pointer
fmt	pointer
)	O
{	O
size_t	long
sz	pointer
=	O
fmt	pointer
->	O
progcnt	long
*	O
sizeof	O
(	O
fvm	pointer
->	O
prog	pointer
[	O
0	int
]	O
)	O
;	O
fvm	pointer
->	O
prog	pointer
=	O
mu_realloc	function
(	O
fvm	pointer
->	O
prog	pointer
,	O
sz	pointer
)	O
;	O
memcpy	function
(	O
fvm	pointer
->	O
prog	pointer
,	O
fmt	pointer
->	O
prog	pointer
,	O
sz	pointer
)	O
;	O
}	O
