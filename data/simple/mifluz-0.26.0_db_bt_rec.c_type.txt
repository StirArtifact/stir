static	O
const	O
char	O
revid	array
[	O
]	O
=	O
"$Id: bt_rec.c,v 1.5 2014/04/17 20:27:25 sebdiaz Exp $"	pointer
;	O
int	O
CDB___bam_pg_alloc_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
==	O
NULL	O
)	O
{	O
info	pointer
=	O
NULL	O
;	O
}	O
__bam_pg_alloc_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DBMETA	struct
*	O
meta	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
db_pgno_t	int
pgno	int
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___bam_pg_alloc_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___bam_pg_alloc_read	function
,	O
0	int
)	O
;	O
pgno	int
=	O
PGNO_BASE_MD	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
else	O
goto	O
done	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
pgno	int
)	O
;	O
(	O
void	O
)	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
meta	pointer
,	O
0	int
)	O
;	O
goto	O
out	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
page_lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
page_lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
P_INIT	O
(	O
pagep	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
argp	pointer
->	O
pgno	int
,	O
PGNO_INVALID	int
,	O
PGNO_INVALID	int
,	O
0	int
,	O
TYPE	O
(	O
argp	pointer
)	O
,	O
TAGS	O
(	O
argp	pointer
)	O
)	O
;	O
pagep	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
P_INIT	O
(	O
pagep	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
argp	pointer
->	O
pgno	int
,	O
PGNO_INVALID	int
,	O
meta	pointer
->	O
free	int
,	O
0	int
,	O
P_INVALID	int
,	O
0	int
)	O
;	O
pagep	pointer
->	O
lsn	struct
=	O
argp	pointer
->	O
page_lsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
meta	pointer
,	O
0	int
)	O
;	O
goto	O
out	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
meta	pointer
->	O
alloc_lsn	struct
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
meta	pointer
->	O
alloc_lsn	struct
,	O
&	O
argp	pointer
->	O
alloc_lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
meta	pointer
->	O
alloc_lsn	struct
,	O
&	O
argp	pointer
->	O
alloc_lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
meta	pointer
->	O
alloc_lsn	struct
=	O
*	O
lsnp	pointer
;	O
if	O
(	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
meta	pointer
)	O
,	O
&	O
argp	pointer
->	O
meta_lsn	struct
)	O
==	O
0	int
)	O
LSN	O
(	O
meta	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
meta	pointer
->	O
free	int
=	O
argp	pointer
->	O
next	int
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
meta	pointer
->	O
alloc_lsn	struct
=	O
argp	pointer
->	O
alloc_lsn	struct
;	O
if	O
(	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
meta	pointer
)	O
)	O
==	O
0	int
)	O
LSN	O
(	O
meta	pointer
)	O
=	O
argp	pointer
->	O
meta_lsn	struct
;	O
meta	pointer
->	O
free	int
=	O
argp	pointer
->	O
pgno	int
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
meta	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
if	O
(	O
F_ISSET	O
(	O
file_dbp	pointer
,	O
DB_AM_SUBDB	int
)	O
)	O
{	O
switch	O
(	O
argp	pointer
->	O
type	enum
)	O
{	O
case	O
P_HASHMETA	int
:	O
case	O
P_BTREEMETA	int
:	O
case	O
P_QAMMETA	int
:	O
file_dbp	pointer
->	O
sync	pointer
(	O
file_dbp	pointer
,	O
0	int
)	O
;	O
}	O
}	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___bam_pg_free_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
==	O
NULL	O
)	O
{	O
info	pointer
=	O
NULL	O
;	O
}	O
__bam_pg_free_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DBMETA	struct
*	O
meta	pointer
;	O
DB_LSN	struct
copy_lsn	struct
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
db_pgno_t	int
pgno	int
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___bam_pg_free_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___bam_pg_free_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
goto	O
done	O
;	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
modified	int
=	O
0	int
;	O
CDB___ua_memcpy	function
(	O
&	O
copy_lsn	struct
,	O
&	O
LSN	O
(	O
argp	pointer
->	O
header	struct
.	O
data	pointer
)	O
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
copy_lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
copy_lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
P_INIT	O
(	O
pagep	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
pagep	pointer
->	O
pgno	int
,	O
PGNO_INVALID	int
,	O
argp	pointer
->	O
next	int
,	O
0	int
,	O
P_INVALID	int
,	O
0	int
)	O
;	O
pagep	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
memcpy	function
(	O
pagep	pointer
,	O
argp	pointer
->	O
header	struct
.	O
data	pointer
,	O
argp	pointer
->	O
header	struct
.	O
size	int
)	O
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
pgno	int
=	O
PGNO_BASE_MD	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
meta	pointer
->	O
alloc_lsn	struct
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
meta	pointer
->	O
alloc_lsn	struct
,	O
&	O
argp	pointer
->	O
alloc_lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
meta	pointer
->	O
alloc_lsn	struct
,	O
&	O
argp	pointer
->	O
alloc_lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
meta	pointer
->	O
free	int
=	O
argp	pointer
->	O
pgno	int
;	O
meta	pointer
->	O
alloc_lsn	struct
=	O
*	O
lsnp	pointer
;	O
if	O
(	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
meta	pointer
)	O
,	O
&	O
argp	pointer
->	O
meta_lsn	struct
)	O
==	O
0	int
)	O
LSN	O
(	O
meta	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
meta	pointer
->	O
free	int
=	O
argp	pointer
->	O
next	int
;	O
meta	pointer
->	O
alloc_lsn	struct
=	O
argp	pointer
->	O
alloc_lsn	struct
;	O
if	O
(	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
meta	pointer
)	O
)	O
==	O
0	int
)	O
LSN	O
(	O
meta	pointer
)	O
=	O
argp	pointer
->	O
meta_lsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
meta	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___bam_split_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
==	O
NULL	O
)	O
{	O
info	pointer
=	O
NULL	O
;	O
}	O
__bam_split_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
_lp	pointer
,	O
*	O
lp	pointer
,	O
*	O
np	pointer
,	O
*	O
pp	pointer
,	O
*	O
_rp	pointer
,	O
*	O
rp	pointer
,	O
*	O
sp	pointer
;	O
db_pgno_t	int
pgno	int
,	O
root_pgno	int
;	O
u_int32_t	int
ptype	int
;	O
int	O
cmp	int
,	O
l_update	int
,	O
p_update	int
,	O
r_update	int
,	O
rc	int
,	O
ret	int
,	O
rootsplit	int
,	O
t_ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___bam_split_print	function
)	O
;	O
mpf	pointer
=	O
NULL	O
;	O
_lp	pointer
=	O
lp	pointer
=	O
np	pointer
=	O
pp	pointer
=	O
_rp	pointer
=	O
rp	pointer
=	O
NULL	O
;	O
sp	pointer
=	O
NULL	O
;	O
REC_INTRO	O
(	O
CDB___bam_split_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
argp	pointer
->	O
pg	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
sp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
memcpy	function
(	O
sp	pointer
,	O
argp	pointer
->	O
pg	struct
.	O
data	pointer
,	O
argp	pointer
->	O
pg	struct
.	O
size	int
)	O
;	O
pgno	int
=	O
PGNO	O
(	O
sp	pointer
)	O
;	O
root_pgno	int
=	O
argp	pointer
->	O
root_pgno	int
;	O
rootsplit	int
=	O
pgno	int
==	O
root_pgno	int
;	O
if	O
(	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
left	int
,	O
0	int
,	O
&	O
lp	pointer
)	O
!=	O
0	int
)	O
lp	pointer
=	O
NULL	O
;	O
if	O
(	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
right	int
,	O
0	int
,	O
&	O
rp	pointer
)	O
!=	O
0	int
)	O
rp	pointer
=	O
NULL	O
;	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
l_update	int
=	O
r_update	int
=	O
p_update	int
=	O
0	int
;	O
if	O
(	O
rootsplit	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
pp	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
pgno	int
)	O
;	O
pp	pointer
=	O
NULL	O
;	O
goto	O
out	O
;	O
}	O
cmp	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pp	pointer
)	O
,	O
&	O
LSN	O
(	O
argp	pointer
->	O
pg	struct
.	O
data	pointer
)	O
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp	int
,	O
&	O
LSN	O
(	O
pp	pointer
)	O
,	O
&	O
LSN	O
(	O
argp	pointer
->	O
pg	struct
.	O
data	pointer
)	O
)	O
;	O
p_update	int
=	O
cmp	int
==	O
0	int
;	O
}	O
else	O
if	O
(	O
lp	pointer
==	O
NULL	O
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
left	int
)	O
;	O
goto	O
out	O
;	O
}	O
if	O
(	O
lp	pointer
!=	O
NULL	O
)	O
{	O
cmp	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
lp	pointer
)	O
,	O
&	O
argp	pointer
->	O
llsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp	int
,	O
&	O
LSN	O
(	O
lp	pointer
)	O
,	O
&	O
argp	pointer
->	O
llsn	struct
)	O
;	O
if	O
(	O
cmp	int
==	O
0	int
)	O
l_update	int
=	O
1	int
;	O
}	O
else	O
l_update	int
=	O
1	int
;	O
if	O
(	O
rp	pointer
!=	O
NULL	O
)	O
{	O
cmp	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
rp	pointer
)	O
,	O
&	O
argp	pointer
->	O
rlsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp	int
,	O
&	O
LSN	O
(	O
rp	pointer
)	O
,	O
&	O
argp	pointer
->	O
rlsn	struct
)	O
;	O
if	O
(	O
cmp	int
==	O
0	int
)	O
r_update	int
=	O
1	int
;	O
}	O
else	O
r_update	int
=	O
1	int
;	O
if	O
(	O
!	O
p_update	int
&&	O
!	O
l_update	int
&&	O
!	O
r_update	int
)	O
goto	O
check_next	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
NULL	O
,	O
&	O
_lp	pointer
)	O
)	O
!=	O
0	int
||	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
NULL	O
,	O
&	O
_rp	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
if	O
(	O
rootsplit	int
)	O
{	O
P_INIT	O
(	O
_lp	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
argp	pointer
->	O
left	int
,	O
PGNO_INVALID	int
,	O
ISINTERNAL	O
(	O
sp	pointer
)	O
?	O
PGNO_INVALID	int
:	O
argp	pointer
->	O
right	int
,	O
LEVEL	O
(	O
sp	pointer
)	O
,	O
TYPE	O
(	O
sp	pointer
)	O
,	O
TAGS	O
(	O
sp	pointer
)	O
)	O
;	O
P_INIT	O
(	O
_rp	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
argp	pointer
->	O
right	int
,	O
ISINTERNAL	O
(	O
sp	pointer
)	O
?	O
PGNO_INVALID	int
:	O
argp	pointer
->	O
left	int
,	O
PGNO_INVALID	int
,	O
LEVEL	O
(	O
sp	pointer
)	O
,	O
TYPE	O
(	O
sp	pointer
)	O
,	O
TAGS	O
(	O
sp	pointer
)	O
)	O
;	O
}	O
else	O
{	O
P_INIT	O
(	O
_lp	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
PGNO	O
(	O
sp	pointer
)	O
,	O
ISINTERNAL	O
(	O
sp	pointer
)	O
?	O
PGNO_INVALID	int
:	O
PREV_PGNO	O
(	O
sp	pointer
)	O
,	O
ISINTERNAL	O
(	O
sp	pointer
)	O
?	O
PGNO_INVALID	int
:	O
argp	pointer
->	O
right	int
,	O
LEVEL	O
(	O
sp	pointer
)	O
,	O
TYPE	O
(	O
sp	pointer
)	O
,	O
TAGS	O
(	O
sp	pointer
)	O
)	O
;	O
P_INIT	O
(	O
_rp	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
argp	pointer
->	O
right	int
,	O
ISINTERNAL	O
(	O
sp	pointer
)	O
?	O
PGNO_INVALID	int
:	O
sp	pointer
->	O
pgno	int
,	O
ISINTERNAL	O
(	O
sp	pointer
)	O
?	O
PGNO_INVALID	int
:	O
NEXT_PGNO	O
(	O
sp	pointer
)	O
,	O
LEVEL	O
(	O
sp	pointer
)	O
,	O
TYPE	O
(	O
sp	pointer
)	O
,	O
TAGS	O
(	O
sp	pointer
)	O
)	O
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_copy	function
(	O
file_dbp	pointer
,	O
sp	pointer
,	O
_lp	pointer
,	O
0	int
,	O
argp	pointer
->	O
indx	short
)	O
)	O
!=	O
0	int
||	O
(	O
ret	int
=	O
CDB___bam_copy	function
(	O
file_dbp	pointer
,	O
sp	pointer
,	O
_rp	pointer
,	O
argp	pointer
->	O
indx	short
,	O
NUM_ENT	O
(	O
sp	pointer
)	O
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
if	O
(	O
lp	pointer
==	O
NULL	O
&&	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
left	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
lp	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
left	int
)	O
;	O
lp	pointer
=	O
NULL	O
;	O
goto	O
out	O
;	O
}	O
if	O
(	O
l_update	int
)	O
{	O
memcpy	function
(	O
lp	pointer
,	O
_lp	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
)	O
;	O
lp	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
lp	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
lp	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
rp	pointer
==	O
NULL	O
&&	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
right	int
,	O
DB_MPOOL_CREATE	int
,	O
&	O
rp	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
right	int
)	O
;	O
rp	pointer
=	O
NULL	O
;	O
goto	O
out	O
;	O
}	O
if	O
(	O
r_update	int
)	O
{	O
memcpy	function
(	O
rp	pointer
,	O
_rp	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
)	O
;	O
rp	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
rp	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
rp	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
rootsplit	int
&&	O
p_update	int
)	O
{	O
if	O
(	O
IS_BTREE_PAGE	O
(	O
sp	pointer
)	O
)	O
{	O
ptype	int
=	O
P_IBTREE	int
;	O
rc	int
=	O
argp	pointer
->	O
opflags	int
&	O
SPL_NRECS	int
?	O
1	int
:	O
0	int
;	O
}	O
else	O
{	O
ptype	int
=	O
P_IRECNO	int
;	O
rc	int
=	O
1	int
;	O
}	O
P_INIT	O
(	O
pp	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
root_pgno	int
,	O
PGNO_INVALID	int
,	O
PGNO_INVALID	int
,	O
_lp	pointer
->	O
level	char
+	O
1	int
,	O
ptype	int
,	O
0	int
)	O
;	O
RE_NREC_SET	O
(	O
pp	pointer
,	O
rc	int
?	O
CDB___bam_total	function
(	O
_lp	pointer
)	O
+	O
CDB___bam_total	function
(	O
_rp	pointer
)	O
:	O
0	int
)	O
;	O
pp	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pp	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
pp	pointer
=	O
NULL	O
;	O
}	O
check_next	O
:	O
if	O
(	O
!	O
rootsplit	int
&&	O
!	O
IS_ZERO_LSN	O
(	O
argp	pointer
->	O
nlsn	struct
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
npgno	int
,	O
0	int
,	O
&	O
np	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
npgno	int
)	O
;	O
np	pointer
=	O
NULL	O
;	O
goto	O
out	O
;	O
}	O
cmp	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
np	pointer
)	O
,	O
&	O
argp	pointer
->	O
nlsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp	int
,	O
&	O
LSN	O
(	O
np	pointer
)	O
,	O
&	O
argp	pointer
->	O
nlsn	struct
)	O
;	O
if	O
(	O
cmp	int
==	O
0	int
)	O
{	O
PREV_PGNO	O
(	O
np	pointer
)	O
=	O
argp	pointer
->	O
right	int
;	O
np	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
np	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
np	pointer
=	O
NULL	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
pp	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
pp	pointer
=	O
NULL	O
;	O
goto	O
lrundo	O
;	O
}	O
if	O
(	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pp	pointer
)	O
)	O
==	O
0	int
)	O
{	O
memcpy	function
(	O
pp	pointer
,	O
argp	pointer
->	O
pg	struct
.	O
data	pointer
,	O
argp	pointer
->	O
pg	struct
.	O
size	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pp	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
pp	pointer
=	O
NULL	O
;	O
}	O
lrundo	O
:	O
if	O
(	O
(	O
rootsplit	int
&&	O
lp	pointer
!=	O
NULL	O
)	O
||	O
rp	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
rootsplit	int
&&	O
lp	pointer
!=	O
NULL	O
&&	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
lp	pointer
)	O
)	O
==	O
0	int
)	O
{	O
lp	pointer
->	O
lsn	struct
=	O
argp	pointer
->	O
llsn	struct
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
lp	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
lp	pointer
=	O
NULL	O
;	O
}	O
if	O
(	O
rp	pointer
!=	O
NULL	O
&&	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
rp	pointer
)	O
)	O
==	O
0	int
)	O
{	O
rp	pointer
->	O
lsn	struct
=	O
argp	pointer
->	O
rlsn	struct
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
rp	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
rp	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
!	O
rootsplit	int
&&	O
!	O
IS_ZERO_LSN	O
(	O
argp	pointer
->	O
nlsn	struct
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
npgno	int
,	O
0	int
,	O
&	O
np	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
np	pointer
=	O
NULL	O
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
np	pointer
)	O
)	O
==	O
0	int
)	O
{	O
PREV_PGNO	O
(	O
np	pointer
)	O
=	O
argp	pointer
->	O
left	int
;	O
np	pointer
->	O
lsn	struct
=	O
argp	pointer
->	O
nlsn	struct
;	O
if	O
(	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
np	pointer
,	O
DB_MPOOL_DIRTY	int
)	O
)	O
goto	O
out	O
;	O
np	pointer
=	O
NULL	O
;	O
}	O
}	O
}	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
if	O
(	O
pp	pointer
!=	O
NULL	O
&&	O
(	O
t_ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pp	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
if	O
(	O
lp	pointer
!=	O
NULL	O
&&	O
(	O
t_ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
lp	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
if	O
(	O
np	pointer
!=	O
NULL	O
&&	O
(	O
t_ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
np	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
if	O
(	O
rp	pointer
!=	O
NULL	O
&&	O
(	O
t_ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
rp	pointer
,	O
0	int
)	O
)	O
!=	O
0	int
&&	O
ret	int
==	O
0	int
)	O
ret	int
=	O
t_ret	int
;	O
if	O
(	O
_lp	pointer
!=	O
NULL	O
)	O
CDB___os_free	function
(	O
_lp	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
)	O
;	O
if	O
(	O
_rp	pointer
!=	O
NULL	O
)	O
CDB___os_free	function
(	O
_rp	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
)	O
;	O
if	O
(	O
sp	pointer
!=	O
NULL	O
)	O
CDB___os_free	function
(	O
sp	pointer
,	O
argp	pointer
->	O
pg	struct
.	O
size	int
)	O
;	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___bam_rsplit_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
==	O
NULL	O
)	O
{	O
info	pointer
=	O
NULL	O
;	O
}	O
__bam_rsplit_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_LSN	struct
copy_lsn	struct
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
db_pgno_t	int
pgno	int
,	O
root_pgno	int
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___bam_rsplit_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___bam_rsplit_read	function
,	O
1	int
)	O
;	O
pgno	int
=	O
root_pgno	int
=	O
argp	pointer
->	O
root_pgno	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
DB_ASSERT	O
(	O
root_pgno	int
!=	O
(	O
(	O
BTREE	struct
*	O
)	O
file_dbp	pointer
->	O
bt_internal	pointer
)	O
->	O
bt_root	int
)	O
;	O
ret	int
=	O
0	int
;	O
goto	O
done	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
rootlsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
rootlsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
memcpy	function
(	O
pagep	pointer
,	O
argp	pointer
->	O
pgdbt	struct
.	O
data	pointer
,	O
argp	pointer
->	O
pgdbt	struct
.	O
size	int
)	O
;	O
pagep	pointer
->	O
pgno	int
=	O
root_pgno	int
;	O
pagep	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
P_INIT	O
(	O
pagep	pointer
,	O
file_dbp	pointer
->	O
pgsize	int
,	O
root_pgno	int
,	O
argp	pointer
->	O
nrec	int
,	O
PGNO_INVALID	int
,	O
pagep	pointer
->	O
level	char
+	O
1	int
,	O
IS_BTREE_PAGE	O
(	O
pagep	pointer
)	O
?	O
P_IBTREE	int
:	O
P_IRECNO	int
,	O
TAGS	O
(	O
pagep	pointer
)	O
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___db_pitem	function
(	O
dbc	pointer
,	O
pagep	pointer
,	O
0	int
,	O
argp	pointer
->	O
rootent	struct
.	O
size	int
,	O
&	O
argp	pointer
->	O
rootent	struct
,	O
NULL	O
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
pagep	pointer
->	O
lsn	struct
=	O
argp	pointer
->	O
rootlsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
goto	O
done	O
;	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
modified	int
=	O
0	int
;	O
CDB___ua_memcpy	function
(	O
&	O
copy_lsn	struct
,	O
&	O
LSN	O
(	O
argp	pointer
->	O
pgdbt	struct
.	O
data	pointer
)	O
,	O
sizeof	O
(	O
DB_LSN	struct
)	O
)	O
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
copy_lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
copy_lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
pagep	pointer
->	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
memcpy	function
(	O
pagep	pointer
,	O
argp	pointer
->	O
pgdbt	struct
.	O
data	pointer
,	O
argp	pointer
->	O
pgdbt	struct
.	O
size	int
)	O
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___bam_adj_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
==	O
NULL	O
)	O
{	O
info	pointer
=	O
NULL	O
;	O
}	O
__bam_adj_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___bam_adj_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___bam_adj_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
goto	O
done	O
;	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_adjindx	function
(	O
dbc	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
,	O
argp	pointer
->	O
indx_copy	int
,	O
argp	pointer
->	O
is_insert	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
CDB___bam_adjindx	function
(	O
dbc	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
,	O
argp	pointer
->	O
indx_copy	int
,	O
!	O
argp	pointer
->	O
is_insert	int
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
lsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
if	O
(	O
0	int
)	O
{	O
err	pointer
:	O
(	O
void	O
)	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
0	int
)	O
;	O
}	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___bam_cadjust_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
==	O
NULL	O
)	O
{	O
info	pointer
=	O
NULL	O
;	O
}	O
__bam_cadjust_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___bam_cadjust_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___bam_cadjust_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
goto	O
done	O
;	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
IS_BTREE_PAGE	O
(	O
pagep	pointer
)	O
)	O
{	O
GET_BINTERNAL	O
(	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
)	O
->	O
nrecs	int
+=	O
argp	pointer
->	O
adjust	int
;	O
if	O
(	O
argp	pointer
->	O
opflags	int
&	O
CAD_UPDATEROOT	int
)	O
RE_NREC_ADJ	O
(	O
pagep	pointer
,	O
argp	pointer
->	O
adjust	int
)	O
;	O
}	O
else	O
{	O
GET_RINTERNAL	O
(	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
)	O
->	O
nrecs	int
+=	O
argp	pointer
->	O
adjust	int
;	O
if	O
(	O
argp	pointer
->	O
opflags	int
&	O
CAD_UPDATEROOT	int
)	O
RE_NREC_ADJ	O
(	O
pagep	pointer
,	O
argp	pointer
->	O
adjust	int
)	O
;	O
}	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
if	O
(	O
IS_BTREE_PAGE	O
(	O
pagep	pointer
)	O
)	O
{	O
GET_BINTERNAL	O
(	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
)	O
->	O
nrecs	int
-=	O
argp	pointer
->	O
adjust	int
;	O
if	O
(	O
argp	pointer
->	O
opflags	int
&	O
CAD_UPDATEROOT	int
)	O
RE_NREC_ADJ	O
(	O
pagep	pointer
,	O
argp	pointer
->	O
adjust	int
)	O
;	O
}	O
else	O
{	O
GET_RINTERNAL	O
(	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
)	O
->	O
nrecs	int
-=	O
argp	pointer
->	O
adjust	int
;	O
if	O
(	O
argp	pointer
->	O
opflags	int
&	O
CAD_UPDATEROOT	int
)	O
RE_NREC_ADJ	O
(	O
pagep	pointer
,	O
-	O
(	O
argp	pointer
->	O
adjust	int
)	O
)	O
;	O
}	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
lsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___bam_cdel_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
==	O
NULL	O
)	O
{	O
info	pointer
=	O
NULL	O
;	O
}	O
__bam_cdel_args	struct
*	O
argp	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
u_int32_t	int
indx	short
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___bam_cdel_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___bam_cdel_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
goto	O
done	O
;	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
indx	short
=	O
argp	pointer
->	O
indx	short
+	O
(	O
TYPE	O
(	O
pagep	pointer
)	O
==	O
P_LBTREE	int
?	O
O_INDX	int
:	O
0	int
)	O
;	O
B_DSET	O
(	O
GET_BKEYDATA	O
(	O
pagep	pointer
,	O
indx	short
)	O
->	O
type	enum
)	O
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
indx	short
=	O
argp	pointer
->	O
indx	short
+	O
(	O
TYPE	O
(	O
pagep	pointer
)	O
==	O
P_LBTREE	int
?	O
O_INDX	int
:	O
0	int
)	O
;	O
B_DCLR	O
(	O
GET_BKEYDATA	O
(	O
pagep	pointer
,	O
indx	short
)	O
->	O
type	enum
)	O
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
lsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___bam_repl_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
==	O
NULL	O
)	O
{	O
info	pointer
=	O
NULL	O
;	O
}	O
__bam_repl_args	struct
*	O
argp	pointer
;	O
BKEYDATA	struct
*	O
bk	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DBT	struct
dbt	struct
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
PAGE	struct
*	O
pagep	pointer
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
u_int8_t	char
*	O
p	pointer
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___bam_repl_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___bam_repl_read	function
,	O
1	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
pgno	int
,	O
0	int
,	O
&	O
pagep	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
goto	O
done	O
;	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
bk	pointer
=	O
GET_BKEYDATA	O
(	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
)	O
;	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
pagep	pointer
)	O
,	O
&	O
argp	pointer
->	O
lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
memset	function
(	O
&	O
dbt	struct
,	O
0	int
,	O
sizeof	O
(	O
dbt	struct
)	O
)	O
;	O
dbt	struct
.	O
size	int
=	O
argp	pointer
->	O
prefix	int
+	O
argp	pointer
->	O
suffix	int
+	O
argp	pointer
->	O
repl	struct
.	O
size	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
dbt	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
dbt	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
p	pointer
=	O
dbt	struct
.	O
data	pointer
;	O
memcpy	function
(	O
p	pointer
,	O
bk	pointer
->	O
data	pointer
,	O
argp	pointer
->	O
prefix	int
)	O
;	O
p	pointer
+=	O
argp	pointer
->	O
prefix	int
;	O
memcpy	function
(	O
p	pointer
,	O
argp	pointer
->	O
repl	struct
.	O
data	pointer
,	O
argp	pointer
->	O
repl	struct
.	O
size	int
)	O
;	O
p	pointer
+=	O
argp	pointer
->	O
repl	struct
.	O
size	int
;	O
memcpy	function
(	O
p	pointer
,	O
bk	pointer
->	O
data	pointer
+	O
(	O
bk	pointer
->	O
len	short
-	O
argp	pointer
->	O
suffix	int
)	O
,	O
argp	pointer
->	O
suffix	int
)	O
;	O
ret	int
=	O
CDB___bam_ritem	function
(	O
dbc	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
,	O
&	O
dbt	struct
)	O
;	O
CDB___os_free	function
(	O
dbt	struct
.	O
data	pointer
,	O
dbt	struct
.	O
size	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
goto	O
err	pointer
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
*	O
lsnp	pointer
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
memset	function
(	O
&	O
dbt	struct
,	O
0	int
,	O
sizeof	O
(	O
dbt	struct
)	O
)	O
;	O
dbt	struct
.	O
size	int
=	O
argp	pointer
->	O
prefix	int
+	O
argp	pointer
->	O
suffix	int
+	O
argp	pointer
->	O
orig	struct
.	O
size	int
;	O
if	O
(	O
(	O
ret	int
=	O
CDB___os_malloc	function
(	O
dbenv	pointer
,	O
dbt	struct
.	O
size	int
,	O
NULL	O
,	O
&	O
dbt	struct
.	O
data	pointer
)	O
)	O
!=	O
0	int
)	O
goto	O
err	pointer
;	O
p	pointer
=	O
dbt	struct
.	O
data	pointer
;	O
memcpy	function
(	O
p	pointer
,	O
bk	pointer
->	O
data	pointer
,	O
argp	pointer
->	O
prefix	int
)	O
;	O
p	pointer
+=	O
argp	pointer
->	O
prefix	int
;	O
memcpy	function
(	O
p	pointer
,	O
argp	pointer
->	O
orig	struct
.	O
data	pointer
,	O
argp	pointer
->	O
orig	struct
.	O
size	int
)	O
;	O
p	pointer
+=	O
argp	pointer
->	O
orig	struct
.	O
size	int
;	O
memcpy	function
(	O
p	pointer
,	O
bk	pointer
->	O
data	pointer
+	O
(	O
bk	pointer
->	O
len	short
-	O
argp	pointer
->	O
suffix	int
)	O
,	O
argp	pointer
->	O
suffix	int
)	O
;	O
ret	int
=	O
CDB___bam_ritem	function
(	O
dbc	pointer
,	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
,	O
&	O
dbt	struct
)	O
;	O
CDB___os_free	function
(	O
dbt	struct
.	O
data	pointer
,	O
dbt	struct
.	O
size	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
goto	O
err	pointer
;	O
if	O
(	O
argp	pointer
->	O
isdeleted	int
)	O
B_DSET	O
(	O
GET_BKEYDATA	O
(	O
pagep	pointer
,	O
argp	pointer
->	O
indx	short
)	O
->	O
type	enum
)	O
;	O
LSN	O
(	O
pagep	pointer
)	O
=	O
argp	pointer
->	O
lsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
if	O
(	O
0	int
)	O
{	O
err	pointer
:	O
(	O
void	O
)	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
pagep	pointer
,	O
0	int
)	O
;	O
}	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
int	O
CDB___bam_root_recover	function
(	O
dbenv	pointer
,	O
dbtp	pointer
,	O
lsnp	pointer
,	O
op	enum
,	O
info	pointer
)	O
DB_ENV	struct
*	O
dbenv	pointer
;	O
DBT	struct
*	O
dbtp	pointer
;	O
DB_LSN	struct
*	O
lsnp	pointer
;	O
db_recops	enum
op	enum
;	O
void	O
*	O
info	pointer
;	O
{	O
if	O
(	O
info	pointer
==	O
NULL	O
)	O
{	O
info	pointer
=	O
NULL	O
;	O
}	O
__bam_root_args	struct
*	O
argp	pointer
;	O
BTMETA	struct
*	O
meta	pointer
;	O
DB	struct
*	O
file_dbp	pointer
;	O
DBC	struct
*	O
dbc	pointer
;	O
DB_MPOOLFILE	struct
*	O
mpf	pointer
;	O
int	O
cmp_n	int
,	O
cmp_p	int
,	O
modified	int
,	O
ret	int
;	O
COMPQUIET	O
(	O
info	pointer
,	O
NULL	O
)	O
;	O
REC_PRINT	O
(	O
CDB___bam_root_print	function
)	O
;	O
REC_INTRO	O
(	O
CDB___bam_root_read	function
,	O
0	int
)	O
;	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fget	function
(	O
mpf	pointer
,	O
&	O
argp	pointer
->	O
meta_pgno	int
,	O
0	int
,	O
&	O
meta	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
(	O
void	O
)	O
CDB___db_pgerr	function
(	O
file_dbp	pointer
,	O
argp	pointer
->	O
meta_pgno	int
)	O
;	O
goto	O
out	O
;	O
}	O
else	O
goto	O
done	O
;	O
}	O
modified	int
=	O
0	int
;	O
cmp_n	int
=	O
CDB_log_compare	function
(	O
lsnp	pointer
,	O
&	O
LSN	O
(	O
meta	pointer
)	O
)	O
;	O
cmp_p	int
=	O
CDB_log_compare	function
(	O
&	O
LSN	O
(	O
meta	pointer
)	O
,	O
&	O
argp	pointer
->	O
meta_lsn	struct
)	O
;	O
CHECK_LSN	O
(	O
op	enum
,	O
cmp_p	int
,	O
&	O
LSN	O
(	O
meta	pointer
)	O
,	O
&	O
argp	pointer
->	O
meta_lsn	struct
)	O
;	O
if	O
(	O
cmp_p	int
==	O
0	int
&&	O
DB_REDO	O
(	O
op	enum
)	O
)	O
{	O
meta	pointer
->	O
root	int
=	O
argp	pointer
->	O
root_pgno	int
;	O
meta	pointer
->	O
dbmeta	struct
.	O
lsn	struct
=	O
*	O
lsnp	pointer
;	O
(	O
(	O
BTREE	struct
*	O
)	O
file_dbp	pointer
->	O
bt_internal	pointer
)	O
->	O
bt_root	int
=	O
meta	pointer
->	O
root	int
;	O
modified	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_n	int
==	O
0	int
&&	O
DB_UNDO	O
(	O
op	enum
)	O
)	O
{	O
meta	pointer
->	O
dbmeta	struct
.	O
lsn	struct
=	O
argp	pointer
->	O
meta_lsn	struct
;	O
modified	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
CDB_memp_fput	function
(	O
mpf	pointer
,	O
meta	pointer
,	O
modified	int
?	O
DB_MPOOL_DIRTY	int
:	O
0	int
)	O
)	O
!=	O
0	int
)	O
goto	O
out	O
;	O
done	O
:	O
*	O
lsnp	pointer
=	O
argp	pointer
->	O
prev_lsn	struct
;	O
ret	int
=	O
0	int
;	O
out	O
:	O
REC_CLOSE	O
;	O
}	O
