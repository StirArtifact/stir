struct	O
its_value_ty	struct
{	O
char	O
*	O
name	pointer
;	O
char	O
*	O
value	enum
;	O
}	O
;	O
struct	O
its_value_list_ty	struct
{	O
struct	O
its_value_ty	struct
*	O
items	pointer
;	O
size_t	long
nitems	long
;	O
size_t	long
nitems_max	long
;	O
}	O
;	O
static	O
void	O
its_value_list_append	function
(	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
value	enum
)	O
{	O
struct	O
its_value_ty	struct
_value	struct
;	O
_value	struct
.	O
name	pointer
=	O
xstrdup	function
(	O
name	pointer
)	O
;	O
_value	struct
.	O
value	enum
=	O
xstrdup	function
(	O
value	enum
)	O
;	O
if	O
(	O
values	pointer
->	O
nitems	long
==	O
values	pointer
->	O
nitems_max	long
)	O
{	O
values	pointer
->	O
nitems_max	long
=	O
2	int
*	O
values	pointer
->	O
nitems_max	long
+	O
1	int
;	O
values	pointer
->	O
items	pointer
=	O
xrealloc	function
(	O
values	pointer
->	O
items	pointer
,	O
sizeof	O
(	O
struct	O
its_value_ty	struct
)	O
*	O
values	pointer
->	O
nitems_max	long
)	O
;	O
}	O
memcpy	function
(	O
&	O
values	pointer
->	O
items	pointer
[	O
values	pointer
->	O
nitems	long
++	O
]	O
,	O
&	O
_value	struct
,	O
sizeof	O
(	O
struct	O
its_value_ty	struct
)	O
)	O
;	O
}	O
static	O
const	O
char	O
*	O
its_value_list_get_value	function
(	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
values	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
its_value_ty	struct
*	O
value	enum
=	O
&	O
values	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
if	O
(	O
strcmp	function
(	O
value	enum
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
return	O
value	enum
->	O
value	enum
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
its_value_list_set_value	function
(	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
value	enum
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
values	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
its_value_ty	struct
*	O
_value	struct
=	O
&	O
values	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
if	O
(	O
strcmp	function
(	O
_value	struct
->	O
name	pointer
,	O
name	pointer
)	O
==	O
0	int
)	O
{	O
free	pointer
(	O
_value	struct
->	O
value	enum
)	O
;	O
_value	struct
->	O
value	enum
=	O
xstrdup	function
(	O
value	enum
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
i	long
==	O
values	pointer
->	O
nitems	long
)	O
its_value_list_append	function
(	O
values	pointer
,	O
name	pointer
,	O
value	enum
)	O
;	O
}	O
static	O
void	O
its_value_list_merge	function
(	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
,	O
struct	O
its_value_list_ty	struct
*	O
other	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
other	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
its_value_ty	struct
*	O
other_value	pointer
=	O
&	O
other	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
values	pointer
->	O
nitems	long
;	O
j	long
++	O
)	O
{	O
struct	O
its_value_ty	struct
*	O
value	enum
=	O
&	O
values	pointer
->	O
items	pointer
[	O
j	long
]	O
;	O
if	O
(	O
strcmp	function
(	O
value	enum
->	O
name	pointer
,	O
other_value	pointer
->	O
name	pointer
)	O
==	O
0	int
&&	O
strcmp	function
(	O
value	enum
->	O
value	enum
,	O
other_value	pointer
->	O
value	enum
)	O
!=	O
0	int
)	O
{	O
free	pointer
(	O
value	enum
->	O
value	enum
)	O
;	O
value	enum
->	O
value	enum
=	O
xstrdup	function
(	O
other_value	pointer
->	O
value	enum
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
j	long
==	O
values	pointer
->	O
nitems	long
)	O
its_value_list_append	function
(	O
values	pointer
,	O
other_value	pointer
->	O
name	pointer
,	O
other_value	pointer
->	O
value	enum
)	O
;	O
}	O
}	O
static	O
void	O
its_value_list_destroy	function
(	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
values	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
free	pointer
(	O
values	pointer
->	O
items	pointer
[	O
i	long
]	O
.	O
name	pointer
)	O
;	O
free	pointer
(	O
values	pointer
->	O
items	pointer
[	O
i	long
]	O
.	O
value	enum
)	O
;	O
}	O
free	pointer
(	O
values	pointer
->	O
items	pointer
)	O
;	O
}	O
struct	O
its_pool_ty	struct
{	O
struct	O
its_value_list_ty	struct
*	O
items	pointer
;	O
size_t	long
nitems	long
;	O
size_t	long
nitems_max	long
;	O
}	O
;	O
static	O
struct	O
its_value_list_ty	struct
*	O
its_pool_alloc_value_list	function
(	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
;	O
if	O
(	O
pool	pointer
->	O
nitems	long
==	O
pool	pointer
->	O
nitems_max	long
)	O
{	O
pool	pointer
->	O
nitems_max	long
=	O
2	int
*	O
pool	pointer
->	O
nitems_max	long
+	O
1	int
;	O
pool	pointer
->	O
items	pointer
=	O
xrealloc	function
(	O
pool	pointer
->	O
items	pointer
,	O
sizeof	O
(	O
struct	O
its_value_list_ty	struct
)	O
*	O
pool	pointer
->	O
nitems_max	long
)	O
;	O
}	O
values	pointer
=	O
&	O
pool	pointer
->	O
items	pointer
[	O
pool	pointer
->	O
nitems	long
++	O
]	O
;	O
memset	function
(	O
values	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
its_value_list_ty	struct
)	O
)	O
;	O
return	O
values	pointer
;	O
}	O
static	O
const	O
char	O
*	O
its_pool_get_value_for_node	function
(	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
,	O
xmlNode	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
intptr_t	long
index	function
=	O
(	O
intptr_t	long
)	O
node	pointer
->	O
_private	pointer
;	O
if	O
(	O
index	function
>	O
0	int
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
;	O
assert	O
(	O
index	function
<=	O
pool	pointer
->	O
nitems	long
)	O
;	O
values	pointer
=	O
&	O
pool	pointer
->	O
items	pointer
[	O
index	function
-	O
1	int
]	O
;	O
return	O
its_value_list_get_value	function
(	O
values	pointer
,	O
name	pointer
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
its_pool_destroy	function
(	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
pool	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
its_value_list_destroy	function
(	O
&	O
pool	pointer
->	O
items	pointer
[	O
i	long
]	O
)	O
;	O
free	pointer
(	O
pool	pointer
->	O
items	pointer
)	O
;	O
}	O
struct	O
its_rule_list_ty	struct
{	O
struct	O
its_rule_ty	struct
*	O
*	O
items	pointer
;	O
size_t	long
nitems	long
;	O
size_t	long
nitems_max	long
;	O
struct	O
its_pool_ty	struct
pool	pointer
;	O
}	O
;	O
struct	O
its_node_list_ty	struct
{	O
xmlNode	struct
*	O
*	O
items	pointer
;	O
size_t	long
nitems	long
;	O
size_t	long
nitems_max	long
;	O
}	O
;	O
static	O
void	O
its_node_list_append	function
(	O
struct	O
its_node_list_ty	struct
*	O
nodes	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
if	O
(	O
nodes	pointer
->	O
nitems	long
==	O
nodes	pointer
->	O
nitems_max	long
)	O
{	O
nodes	pointer
->	O
nitems_max	long
=	O
2	int
*	O
nodes	pointer
->	O
nitems_max	long
+	O
1	int
;	O
nodes	pointer
->	O
items	pointer
=	O
xrealloc	function
(	O
nodes	pointer
->	O
items	pointer
,	O
sizeof	O
(	O
xmlNode	struct
*	O
)	O
*	O
nodes	pointer
->	O
nitems_max	long
)	O
;	O
}	O
nodes	pointer
->	O
items	pointer
[	O
nodes	pointer
->	O
nitems	long
++	O
]	O
=	O
node	pointer
;	O
}	O
struct	O
its_rule_class_ty	struct
{	O
size_t	long
size	long
;	O
void	O
(	O
*	O
constructor	pointer
)	O
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
;	O
void	O
(	O
*	O
destructor	pointer
)	O
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
)	O
;	O
void	O
(	O
*	O
apply	pointer
)	O
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
,	O
xmlDoc	struct
*	O
doc	pointer
)	O
;	O
struct	O
its_value_list_ty	struct
*	O
(	O
*	O
eval	pointer
)	O
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
;	O
}	O
;	O
struct	O
its_rule_ty	struct
{	O
ITS_RULE_TY	O
}	O
;	O
static	O
hash_table	struct
classes	struct
;	O
static	O
void	O
its_rule_destructor	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
)	O
{	O
free	pointer
(	O
pop	pointer
->	O
selector	pointer
)	O
;	O
its_value_list_destroy	function
(	O
&	O
pop	pointer
->	O
values	pointer
)	O
;	O
if	O
(	O
pop	pointer
->	O
namespaces	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
pop	pointer
->	O
namespaces	pointer
[	O
i	long
]	O
!=	O
NULL	O
;	O
i	long
++	O
)	O
xmlFreeNs	function
(	O
pop	pointer
->	O
namespaces	pointer
[	O
i	long
]	O
)	O
;	O
free	pointer
(	O
pop	pointer
->	O
namespaces	pointer
)	O
;	O
}	O
}	O
static	O
void	O
its_rule_apply	function
(	O
struct	O
its_rule_ty	struct
*	O
rule	pointer
,	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
,	O
xmlDoc	struct
*	O
doc	pointer
)	O
{	O
xmlXPathContext	struct
*	O
context	pointer
;	O
xmlXPathObject	struct
*	O
object	pointer
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
rule	pointer
->	O
selector	pointer
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"selector is not specified"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
context	pointer
=	O
xmlXPathNewContext	function
(	O
doc	pointer
)	O
;	O
if	O
(	O
!	O
context	pointer
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"cannot create XPath context"	pointer
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
rule	pointer
->	O
namespaces	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
rule	pointer
->	O
namespaces	pointer
[	O
i	long
]	O
!=	O
NULL	O
;	O
i	long
++	O
)	O
{	O
xmlNs	struct
*	O
ns	pointer
=	O
rule	pointer
->	O
namespaces	pointer
[	O
i	long
]	O
;	O
xmlXPathRegisterNs	function
(	O
context	pointer
,	O
ns	pointer
->	O
prefix	pointer
,	O
ns	pointer
->	O
href	pointer
)	O
;	O
}	O
}	O
object	pointer
=	O
xmlXPathEval	function
(	O
BAD_CAST	O
rule	pointer
->	O
selector	pointer
,	O
context	pointer
)	O
;	O
if	O
(	O
!	O
object	pointer
)	O
{	O
xmlXPathFreeContext	function
(	O
context	pointer
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"cannot evaluate XPath expression: %s"	pointer
)	O
,	O
rule	pointer
->	O
selector	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
object	pointer
->	O
nodesetval	pointer
)	O
{	O
xmlNodeSet	struct
*	O
nodes	pointer
=	O
object	pointer
->	O
nodesetval	pointer
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nodes	pointer
->	O
nodeNr	int
;	O
i	long
++	O
)	O
{	O
xmlNode	struct
*	O
node	pointer
=	O
nodes	pointer
->	O
nodeTab	pointer
[	O
i	long
]	O
;	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
;	O
intptr_t	long
index	function
=	O
(	O
intptr_t	long
)	O
node	pointer
->	O
_private	pointer
;	O
assert	O
(	O
index	function
<=	O
pool	pointer
->	O
nitems	long
)	O
;	O
if	O
(	O
index	function
>	O
0	int
)	O
values	pointer
=	O
&	O
pool	pointer
->	O
items	pointer
[	O
index	function
-	O
1	int
]	O
;	O
else	O
{	O
values	pointer
=	O
its_pool_alloc_value_list	function
(	O
pool	pointer
)	O
;	O
node	pointer
->	O
_private	pointer
=	O
(	O
void	O
*	O
)	O
pool	pointer
->	O
nitems	long
;	O
}	O
its_value_list_merge	function
(	O
values	pointer
,	O
&	O
rule	pointer
->	O
values	pointer
)	O
;	O
}	O
}	O
xmlXPathFreeObject	function
(	O
object	pointer
)	O
;	O
xmlXPathFreeContext	function
(	O
context	pointer
)	O
;	O
}	O
static	O
char	O
*	O
_its_get_attribute	function
(	O
xmlNode	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
attr	pointer
,	O
const	O
char	O
*	O
namespace	pointer
)	O
{	O
xmlChar	char
*	O
value	enum
;	O
char	O
*	O
result	pointer
;	O
value	enum
=	O
xmlGetNsProp	function
(	O
node	pointer
,	O
BAD_CAST	O
attr	pointer
,	O
BAD_CAST	O
namespace	pointer
)	O
;	O
result	pointer
=	O
xstrdup	function
(	O
(	O
const	O
char	O
*	O
)	O
value	enum
)	O
;	O
xmlFree	pointer
(	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
char	O
*	O
normalize_whitespace	function
(	O
const	O
char	O
*	O
text	pointer
,	O
enum	O
its_whitespace_type_ty	enum
whitespace	enum
)	O
{	O
switch	O
(	O
whitespace	enum
)	O
{	O
case	O
ITS_WHITESPACE_PRESERVE	int
:	O
return	O
xstrdup	function
(	O
text	pointer
)	O
;	O
case	O
ITS_WHITESPACE_TRIM	int
:	O
return	O
trim	O
(	O
text	pointer
)	O
;	O
case	O
ITS_WHITESPACE_NORMALIZE_PARAGRAPH	int
:	O
{	O
char	O
*	O
result	pointer
=	O
xstrdup	function
(	O
text	pointer
)	O
;	O
const	O
char	O
*	O
start_of_paragraph	pointer
;	O
char	O
*	O
out	pointer
;	O
out	pointer
=	O
result	pointer
;	O
for	O
(	O
start_of_paragraph	pointer
=	O
result	pointer
;	O
*	O
start_of_paragraph	pointer
!=	O
'\0'	O
;	O
)	O
{	O
const	O
char	O
*	O
end_of_paragraph	pointer
;	O
const	O
char	O
*	O
next_paragraph	pointer
;	O
{	O
const	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
start_of_paragraph	pointer
;	O
;	O
)	O
{	O
const	O
char	O
*	O
nl	pointer
=	O
strchrnul	function
(	O
p	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
*	O
nl	pointer
==	O
'\0'	O
)	O
{	O
end_of_paragraph	pointer
=	O
nl	pointer
;	O
next_paragraph	pointer
=	O
end_of_paragraph	pointer
;	O
break	O
;	O
}	O
p	pointer
=	O
nl	pointer
+	O
1	int
;	O
{	O
const	O
char	O
*	O
past_whitespace	pointer
=	O
p	pointer
+	O
strspn	function
(	O
p	pointer
,	O
" \t\n"	pointer
)	O
;	O
if	O
(	O
memchr	function
(	O
p	pointer
,	O
'\n'	O
,	O
past_whitespace	pointer
-	O
p	pointer
)	O
!=	O
NULL	O
)	O
{	O
end_of_paragraph	pointer
=	O
nl	pointer
;	O
next_paragraph	pointer
=	O
past_whitespace	pointer
;	O
break	O
;	O
}	O
p	pointer
=	O
past_whitespace	pointer
;	O
}	O
}	O
}	O
{	O
const	O
char	O
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
start_of_paragraph	pointer
;	O
p	pointer
<	O
end_of_paragraph	pointer
;	O
p	pointer
++	O
)	O
if	O
(	O
!	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
||	O
*	O
p	pointer
==	O
'\n'	O
)	O
)	O
break	O
;	O
for	O
(	O
;	O
p	pointer
<	O
end_of_paragraph	pointer
;	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
||	O
*	O
p	pointer
==	O
'\n'	O
)	O
{	O
do	O
p	pointer
++	O
;	O
while	O
(	O
p	pointer
<	O
end_of_paragraph	pointer
&&	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
||	O
*	O
p	pointer
==	O
'\n'	O
)	O
)	O
;	O
if	O
(	O
p	pointer
<	O
end_of_paragraph	pointer
)	O
*	O
out	pointer
++	O
=	O
' '	O
;	O
}	O
else	O
*	O
out	pointer
++	O
=	O
*	O
p	pointer
++	O
;	O
}	O
}	O
if	O
(	O
*	O
next_paragraph	pointer
!=	O
'\0'	O
)	O
{	O
memcpy	function
(	O
out	pointer
,	O
"\n\n"	pointer
,	O
2	int
)	O
;	O
out	pointer
+=	O
2	int
;	O
}	O
start_of_paragraph	pointer
=	O
next_paragraph	pointer
;	O
}	O
*	O
out	pointer
=	O
'\0'	O
;	O
return	O
result	pointer
;	O
}	O
default	O
:	O
{	O
char	O
*	O
result	pointer
=	O
xstrdup	function
(	O
text	pointer
)	O
;	O
char	O
*	O
out	pointer
;	O
const	O
char	O
*	O
p	pointer
;	O
out	pointer
=	O
result	pointer
;	O
for	O
(	O
p	pointer
=	O
result	pointer
;	O
*	O
p	pointer
!=	O
'\0'	O
;	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
||	O
*	O
p	pointer
==	O
'\n'	O
)	O
{	O
do	O
p	pointer
++	O
;	O
while	O
(	O
*	O
p	pointer
==	O
' '	O
||	O
*	O
p	pointer
==	O
'\t'	O
||	O
*	O
p	pointer
==	O
'\n'	O
)	O
;	O
*	O
out	pointer
++	O
=	O
' '	O
;	O
}	O
else	O
*	O
out	pointer
++	O
=	O
*	O
p	pointer
++	O
;	O
}	O
*	O
out	pointer
=	O
'\0'	O
;	O
return	O
result	pointer
;	O
}	O
}	O
}	O
static	O
char	O
*	O
_its_encode_special_chars	function
(	O
const	O
char	O
*	O
content	pointer
,	O
bool	bool
is_attribute	bool
)	O
{	O
const	O
char	O
*	O
str	pointer
;	O
size_t	long
amount	long
=	O
0	int
;	O
char	O
*	O
result	pointer
,	O
*	O
p	pointer
;	O
for	O
(	O
str	pointer
=	O
content	pointer
;	O
*	O
str	pointer
!=	O
'\0'	O
;	O
str	pointer
++	O
)	O
{	O
switch	O
(	O
*	O
str	pointer
)	O
{	O
case	O
'&'	O
:	O
amount	long
+=	O
sizeof	O
(	O
"&amp;"	pointer
)	O
;	O
break	O
;	O
case	O
'<'	O
:	O
amount	long
+=	O
sizeof	O
(	O
"&lt;"	pointer
)	O
;	O
break	O
;	O
case	O
'>'	O
:	O
amount	long
+=	O
sizeof	O
(	O
"&gt;"	pointer
)	O
;	O
break	O
;	O
case	O
'"'	O
:	O
if	O
(	O
is_attribute	bool
)	O
amount	long
+=	O
sizeof	O
(	O
"&quot;"	pointer
)	O
;	O
else	O
amount	long
+=	O
1	int
;	O
break	O
;	O
default	O
:	O
amount	long
+=	O
1	int
;	O
break	O
;	O
}	O
}	O
result	pointer
=	O
XNMALLOC	O
(	O
amount	long
+	O
1	int
,	O
char	O
)	O
;	O
*	O
result	pointer
=	O
'\0'	O
;	O
p	pointer
=	O
result	pointer
;	O
for	O
(	O
str	pointer
=	O
content	pointer
;	O
*	O
str	pointer
!=	O
'\0'	O
;	O
str	pointer
++	O
)	O
{	O
switch	O
(	O
*	O
str	pointer
)	O
{	O
case	O
'&'	O
:	O
p	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
"&amp;"	pointer
)	O
;	O
break	O
;	O
case	O
'<'	O
:	O
p	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
"&lt;"	pointer
)	O
;	O
break	O
;	O
case	O
'>'	O
:	O
p	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
"&gt;"	pointer
)	O
;	O
break	O
;	O
case	O
'"'	O
:	O
if	O
(	O
is_attribute	bool
)	O
p	pointer
=	O
stpcpy	function
(	O
p	pointer
,	O
"&quot;"	pointer
)	O
;	O
else	O
*	O
p	pointer
++	O
=	O
'"'	O
;	O
break	O
;	O
default	O
:	O
*	O
p	pointer
++	O
=	O
*	O
str	pointer
;	O
break	O
;	O
}	O
}	O
*	O
p	pointer
=	O
'\0'	O
;	O
return	O
result	pointer
;	O
}	O
static	O
char	O
*	O
_its_collect_text_content	function
(	O
xmlNode	struct
*	O
node	pointer
,	O
enum	O
its_whitespace_type_ty	enum
whitespace	enum
,	O
bool	bool
no_escape	bool
)	O
{	O
char	O
*	O
buffer	pointer
=	O
NULL	O
;	O
size_t	long
bufmax	long
=	O
0	int
;	O
size_t	long
bufpos	long
=	O
0	int
;	O
xmlNode	struct
*	O
n	long
;	O
for	O
(	O
n	long
=	O
node	pointer
->	O
children	pointer
;	O
n	long
;	O
n	long
=	O
n	long
->	O
next	pointer
)	O
{	O
char	O
*	O
content	pointer
=	O
NULL	O
;	O
switch	O
(	O
n	long
->	O
type	enum
)	O
{	O
case	O
XML_TEXT_NODE	int
:	O
case	O
XML_CDATA_SECTION_NODE	int
:	O
{	O
xmlChar	char
*	O
xcontent	pointer
=	O
xmlNodeGetContent	function
(	O
n	long
)	O
;	O
char	O
*	O
econtent	pointer
;	O
const	O
char	O
*	O
ccontent	pointer
;	O
if	O
(	O
no_escape	bool
)	O
econtent	pointer
=	O
xstrdup	function
(	O
(	O
const	O
char	O
*	O
)	O
xcontent	pointer
)	O
;	O
else	O
econtent	pointer
=	O
_its_encode_special_chars	function
(	O
(	O
const	O
char	O
*	O
)	O
xcontent	pointer
,	O
node	pointer
->	O
type	enum
==	O
XML_ATTRIBUTE_NODE	int
)	O
;	O
xmlFree	pointer
(	O
xcontent	pointer
)	O
;	O
ccontent	pointer
=	O
econtent	pointer
;	O
if	O
(	O
whitespace	enum
==	O
ITS_WHITESPACE_NORMALIZE	int
&&	O
!	O
n	long
->	O
prev	pointer
)	O
ccontent	pointer
=	O
ccontent	pointer
+	O
strspn	function
(	O
ccontent	pointer
,	O
" \t\n"	pointer
)	O
;	O
content	pointer
=	O
normalize_whitespace	function
(	O
ccontent	pointer
,	O
whitespace	enum
)	O
;	O
free	pointer
(	O
econtent	pointer
)	O
;	O
if	O
(	O
whitespace	enum
==	O
ITS_WHITESPACE_NORMALIZE	int
&&	O
!	O
n	long
->	O
next	pointer
)	O
{	O
char	O
*	O
p	pointer
=	O
content	pointer
+	O
strlen	function
(	O
content	pointer
)	O
;	O
for	O
(	O
;	O
p	pointer
>	O
content	pointer
;	O
p	pointer
--	O
)	O
{	O
int	O
c	int
=	O
*	O
(	O
p	pointer
-	O
1	int
)	O
;	O
if	O
(	O
!	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
)	O
{	O
*	O
p	pointer
=	O
'\0'	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
break	O
;	O
case	O
XML_ELEMENT_NODE	int
:	O
{	O
xmlOutputBuffer	struct
*	O
buffer	pointer
=	O
xmlAllocOutputBuffer	function
(	O
NULL	O
)	O
;	O
xmlTextWriter	struct
*	O
writer	pointer
=	O
xmlNewTextWriter	function
(	O
buffer	pointer
)	O
;	O
char	O
*	O
p	pointer
=	O
_its_collect_text_content	function
(	O
n	long
,	O
whitespace	enum
,	O
no_escape	bool
)	O
;	O
const	O
char	O
*	O
ccontent	pointer
;	O
xmlTextWriterStartElement	function
(	O
writer	pointer
,	O
BAD_CAST	O
n	long
->	O
name	pointer
)	O
;	O
if	O
(	O
n	long
->	O
properties	pointer
)	O
{	O
xmlAttr	struct
*	O
attr	pointer
=	O
n	long
->	O
properties	pointer
;	O
for	O
(	O
;	O
attr	pointer
;	O
attr	pointer
=	O
attr	pointer
->	O
next	pointer
)	O
{	O
xmlChar	char
*	O
prop	pointer
=	O
xmlGetProp	function
(	O
n	long
,	O
attr	pointer
->	O
name	pointer
)	O
;	O
xmlTextWriterWriteAttribute	function
(	O
writer	pointer
,	O
attr	pointer
->	O
name	pointer
,	O
prop	pointer
)	O
;	O
xmlFree	pointer
(	O
prop	pointer
)	O
;	O
}	O
}	O
if	O
(	O
*	O
p	pointer
!=	O
'\0'	O
)	O
xmlTextWriterWriteRaw	function
(	O
writer	pointer
,	O
BAD_CAST	O
p	pointer
)	O
;	O
xmlTextWriterEndElement	function
(	O
writer	pointer
)	O
;	O
ccontent	pointer
=	O
(	O
const	O
char	O
*	O
)	O
xmlOutputBufferGetContent	function
(	O
buffer	pointer
)	O
;	O
content	pointer
=	O
normalize_whitespace	function
(	O
ccontent	pointer
,	O
whitespace	enum
)	O
;	O
xmlFreeTextWriter	function
(	O
writer	pointer
)	O
;	O
free	pointer
(	O
p	pointer
)	O
;	O
}	O
break	O
;	O
case	O
XML_ENTITY_REF_NODE	int
:	O
content	pointer
=	O
xasprintf	function
(	O
"&%s;"	pointer
,	O
(	O
const	O
char	O
*	O
)	O
n	long
->	O
name	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
content	pointer
!=	O
NULL	O
)	O
{	O
size_t	long
length	int
=	O
strlen	function
(	O
content	pointer
)	O
;	O
if	O
(	O
bufpos	long
+	O
length	int
+	O
1	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
length	int
+	O
1	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
strcpy	function
(	O
&	O
buffer	pointer
[	O
bufpos	long
]	O
,	O
content	pointer
)	O
;	O
bufpos	long
+=	O
length	int
;	O
}	O
free	pointer
(	O
content	pointer
)	O
;	O
}	O
if	O
(	O
buffer	pointer
==	O
NULL	O
)	O
buffer	pointer
=	O
xstrdup	function
(	O
""	pointer
)	O
;	O
return	O
buffer	pointer
;	O
}	O
static	O
void	O
_its_error_missing_attribute	function
(	O
xmlNode	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
attribute	pointer
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"\"%s\" node does not contain \"%s\""	pointer
)	O
,	O
node	pointer
->	O
name	pointer
,	O
attribute	pointer
)	O
;	O
}	O
static	O
void	O
its_translate_rule_constructor	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
char	O
*	O
prop	pointer
;	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"selector"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"translate"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"translate"	pointer
)	O
;	O
return	O
;	O
}	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
prop	pointer
)	O
pop	pointer
->	O
selector	pointer
=	O
prop	pointer
;	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"translate"	pointer
,	O
NULL	O
)	O
;	O
its_value_list_append	function
(	O
&	O
pop	pointer
->	O
values	pointer
,	O
"translate"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
}	O
struct	O
its_value_list_ty	struct
*	O
its_translate_rule_eval	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
result	pointer
;	O
result	pointer
=	O
XCALLOC	O
(	O
1	int
,	O
struct	O
its_value_list_ty	struct
)	O
;	O
switch	O
(	O
node	pointer
->	O
type	enum
)	O
{	O
case	O
XML_ATTRIBUTE_NODE	int
:	O
{	O
const	O
char	O
*	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"translate"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
{	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"translate"	pointer
,	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
its_value_list_append	function
(	O
result	pointer
,	O
"translate"	pointer
,	O
"no"	pointer
)	O
;	O
}	O
break	O
;	O
case	O
XML_ELEMENT_NODE	int
:	O
{	O
const	O
char	O
*	O
value	enum
;	O
if	O
(	O
xmlHasNsProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"translate"	pointer
,	O
BAD_CAST	O
ITS_NS	pointer
)	O
)	O
{	O
char	O
*	O
prop	pointer
;	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"translate"	pointer
,	O
ITS_NS	pointer
)	O
;	O
its_value_list_append	function
(	O
result	pointer
,	O
"translate"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"translate"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
{	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"translate"	pointer
,	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
if	O
(	O
node	pointer
->	O
parent	pointer
==	O
NULL	O
||	O
node	pointer
->	O
parent	pointer
->	O
type	enum
!=	O
XML_ELEMENT_NODE	int
)	O
its_value_list_append	function
(	O
result	pointer
,	O
"translate"	pointer
,	O
"yes"	pointer
)	O
;	O
else	O
{	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
;	O
values	pointer
=	O
its_translate_rule_eval	function
(	O
pop	pointer
,	O
pool	pointer
,	O
node	pointer
->	O
parent	pointer
)	O
;	O
its_value_list_merge	function
(	O
result	pointer
,	O
values	pointer
)	O
;	O
its_value_list_destroy	function
(	O
values	pointer
)	O
;	O
free	pointer
(	O
values	pointer
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
its_rule_class_ty	struct
its_translate_rule_class	struct
=	O
{	O
sizeof	O
(	O
struct	O
its_rule_ty	struct
)	O
,	O
its_translate_rule_constructor	function
,	O
its_rule_destructor	function
,	O
its_rule_apply	function
,	O
its_translate_rule_eval	function
,	O
}	O
;	O
static	O
void	O
its_localization_note_rule_constructor	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
char	O
*	O
prop	pointer
;	O
xmlNode	struct
*	O
n	long
;	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"selector"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"locNoteType"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"locNoteType"	pointer
)	O
;	O
return	O
;	O
}	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
prop	pointer
)	O
pop	pointer
->	O
selector	pointer
=	O
prop	pointer
;	O
for	O
(	O
n	long
=	O
node	pointer
->	O
children	pointer
;	O
n	long
;	O
n	long
=	O
n	long
->	O
next	pointer
)	O
{	O
if	O
(	O
n	long
->	O
type	enum
==	O
XML_ELEMENT_NODE	int
&&	O
xmlStrEqual	function
(	O
n	long
->	O
name	pointer
,	O
BAD_CAST	O
"locNote"	pointer
)	O
&&	O
xmlStrEqual	function
(	O
n	long
->	O
ns	pointer
->	O
href	pointer
,	O
BAD_CAST	O
ITS_NS	pointer
)	O
)	O
break	O
;	O
}	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"locNoteType"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
prop	pointer
)	O
its_value_list_append	function
(	O
&	O
pop	pointer
->	O
values	pointer
,	O
"locNoteType"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
if	O
(	O
n	long
)	O
{	O
char	O
*	O
content	pointer
=	O
_its_collect_text_content	function
(	O
n	long
,	O
ITS_WHITESPACE_NORMALIZE	int
,	O
false	int
)	O
;	O
its_value_list_append	function
(	O
&	O
pop	pointer
->	O
values	pointer
,	O
"locNote"	pointer
,	O
content	pointer
)	O
;	O
free	pointer
(	O
content	pointer
)	O
;	O
}	O
else	O
if	O
(	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"locNotePointer"	pointer
)	O
)	O
{	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"locNotePointer"	pointer
,	O
NULL	O
)	O
;	O
its_value_list_append	function
(	O
&	O
pop	pointer
->	O
values	pointer
,	O
"locNotePointer"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
}	O
}	O
struct	O
its_value_list_ty	struct
*	O
its_localization_note_rule_eval	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
result	pointer
;	O
result	pointer
=	O
XCALLOC	O
(	O
1	int
,	O
struct	O
its_value_list_ty	struct
)	O
;	O
switch	O
(	O
node	pointer
->	O
type	enum
)	O
{	O
case	O
XML_ATTRIBUTE_NODE	int
:	O
{	O
const	O
char	O
*	O
value	enum
;	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"locNoteType"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"locNoteType"	pointer
,	O
value	enum
)	O
;	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"locNote"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
{	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"locNote"	pointer
,	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"locNotePointer"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
{	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"locNotePointer"	pointer
,	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
}	O
break	O
;	O
case	O
XML_ELEMENT_NODE	int
:	O
{	O
const	O
char	O
*	O
value	enum
;	O
if	O
(	O
xmlHasNsProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"locNote"	pointer
,	O
BAD_CAST	O
ITS_NS	pointer
)	O
||	O
xmlHasNsProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"locNoteRef"	pointer
,	O
BAD_CAST	O
ITS_NS	pointer
)	O
||	O
xmlHasNsProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"locNoteType"	pointer
,	O
BAD_CAST	O
ITS_NS	pointer
)	O
)	O
{	O
char	O
*	O
prop	pointer
;	O
if	O
(	O
xmlHasNsProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"locNote"	pointer
,	O
BAD_CAST	O
ITS_NS	pointer
)	O
)	O
{	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"locNote"	pointer
,	O
ITS_NS	pointer
)	O
;	O
its_value_list_append	function
(	O
result	pointer
,	O
"locNote"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
}	O
if	O
(	O
xmlHasNsProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"locNoteType"	pointer
,	O
BAD_CAST	O
ITS_NS	pointer
)	O
)	O
{	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"locNoteType"	pointer
,	O
ITS_NS	pointer
)	O
;	O
its_value_list_append	function
(	O
result	pointer
,	O
"locNoteType"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
}	O
return	O
result	pointer
;	O
}	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"locNoteType"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"locNoteType"	pointer
,	O
value	enum
)	O
;	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"locNote"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
{	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"locNote"	pointer
,	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"locNotePointer"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
{	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"locNotePointer"	pointer
,	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
if	O
(	O
node	pointer
->	O
parent	pointer
==	O
NULL	O
||	O
node	pointer
->	O
parent	pointer
->	O
type	enum
!=	O
XML_ELEMENT_NODE	int
)	O
return	O
result	pointer
;	O
else	O
{	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
;	O
values	pointer
=	O
its_localization_note_rule_eval	function
(	O
pop	pointer
,	O
pool	pointer
,	O
node	pointer
->	O
parent	pointer
)	O
;	O
its_value_list_merge	function
(	O
result	pointer
,	O
values	pointer
)	O
;	O
its_value_list_destroy	function
(	O
values	pointer
)	O
;	O
free	pointer
(	O
values	pointer
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
its_rule_class_ty	struct
its_localization_note_rule_class	struct
=	O
{	O
sizeof	O
(	O
struct	O
its_rule_ty	struct
)	O
,	O
its_localization_note_rule_constructor	function
,	O
its_rule_destructor	function
,	O
its_rule_apply	function
,	O
its_localization_note_rule_eval	function
,	O
}	O
;	O
static	O
void	O
its_element_within_text_rule_constructor	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
char	O
*	O
prop	pointer
;	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"selector"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"withinText"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"withinText"	pointer
)	O
;	O
return	O
;	O
}	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
prop	pointer
)	O
pop	pointer
->	O
selector	pointer
=	O
prop	pointer
;	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"withinText"	pointer
,	O
NULL	O
)	O
;	O
its_value_list_append	function
(	O
&	O
pop	pointer
->	O
values	pointer
,	O
"withinText"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
}	O
struct	O
its_value_list_ty	struct
*	O
its_element_within_text_rule_eval	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
result	pointer
;	O
const	O
char	O
*	O
value	enum
;	O
result	pointer
=	O
XCALLOC	O
(	O
1	int
,	O
struct	O
its_value_list_ty	struct
)	O
;	O
if	O
(	O
node	pointer
->	O
type	enum
!=	O
XML_ELEMENT_NODE	int
)	O
return	O
result	pointer
;	O
if	O
(	O
xmlHasNsProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"withinText"	pointer
,	O
BAD_CAST	O
ITS_NS	pointer
)	O
)	O
{	O
char	O
*	O
prop	pointer
;	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"withinText"	pointer
,	O
ITS_NS	pointer
)	O
;	O
its_value_list_append	function
(	O
result	pointer
,	O
"withinText"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"withinText"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"withinText"	pointer
,	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
its_rule_class_ty	struct
its_element_within_text_rule_class	struct
=	O
{	O
sizeof	O
(	O
struct	O
its_rule_ty	struct
)	O
,	O
its_element_within_text_rule_constructor	function
,	O
its_rule_destructor	function
,	O
its_rule_apply	function
,	O
its_element_within_text_rule_eval	function
,	O
}	O
;	O
static	O
void	O
its_preserve_space_rule_constructor	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
char	O
*	O
prop	pointer
;	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"selector"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"space"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"space"	pointer
)	O
;	O
return	O
;	O
}	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
prop	pointer
)	O
pop	pointer
->	O
selector	pointer
=	O
prop	pointer
;	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"space"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
prop	pointer
&&	O
!	O
(	O
strcmp	function
(	O
prop	pointer
,	O
"preserve"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
prop	pointer
,	O
"default"	pointer
)	O
==	O
0	int
||	O
(	O
node	pointer
->	O
ns	pointer
&&	O
xmlStrEqual	function
(	O
node	pointer
->	O
ns	pointer
->	O
href	pointer
,	O
BAD_CAST	O
GT_NS	pointer
)	O
&&	O
strcmp	function
(	O
prop	pointer
,	O
"trim"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
node	pointer
->	O
ns	pointer
&&	O
xmlStrEqual	function
(	O
node	pointer
->	O
ns	pointer
->	O
href	pointer
,	O
BAD_CAST	O
GT_NS	pointer
)	O
&&	O
strcmp	function
(	O
prop	pointer
,	O
"paragraph"	pointer
)	O
==	O
0	int
)	O
)	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"invalid attribute value \"%s\" for \"%s\""	pointer
)	O
,	O
prop	pointer
,	O
"space"	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
return	O
;	O
}	O
its_value_list_append	function
(	O
&	O
pop	pointer
->	O
values	pointer
,	O
"space"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
}	O
struct	O
its_value_list_ty	struct
*	O
its_preserve_space_rule_eval	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
result	pointer
;	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
;	O
const	O
char	O
*	O
value	enum
;	O
result	pointer
=	O
XCALLOC	O
(	O
1	int
,	O
struct	O
its_value_list_ty	struct
)	O
;	O
if	O
(	O
node	pointer
->	O
type	enum
!=	O
XML_ELEMENT_NODE	int
)	O
return	O
result	pointer
;	O
if	O
(	O
xmlHasNsProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"space"	pointer
,	O
BAD_CAST	O
XML_NS	pointer
)	O
)	O
{	O
char	O
*	O
prop	pointer
;	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"space"	pointer
,	O
XML_NS	pointer
)	O
;	O
its_value_list_append	function
(	O
result	pointer
,	O
"space"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"space"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
{	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"space"	pointer
,	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
if	O
(	O
node	pointer
->	O
parent	pointer
==	O
NULL	O
||	O
node	pointer
->	O
parent	pointer
->	O
type	enum
!=	O
XML_ELEMENT_NODE	int
)	O
{	O
its_value_list_append	function
(	O
result	pointer
,	O
"space"	pointer
,	O
"default"	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
values	pointer
=	O
its_preserve_space_rule_eval	function
(	O
pop	pointer
,	O
pool	pointer
,	O
node	pointer
->	O
parent	pointer
)	O
;	O
its_value_list_merge	function
(	O
result	pointer
,	O
values	pointer
)	O
;	O
its_value_list_destroy	function
(	O
values	pointer
)	O
;	O
free	pointer
(	O
values	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
its_rule_class_ty	struct
its_preserve_space_rule_class	struct
=	O
{	O
sizeof	O
(	O
struct	O
its_rule_ty	struct
)	O
,	O
its_preserve_space_rule_constructor	function
,	O
its_rule_destructor	function
,	O
its_rule_apply	function
,	O
its_preserve_space_rule_eval	function
,	O
}	O
;	O
static	O
void	O
its_extension_context_rule_constructor	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
char	O
*	O
prop	pointer
;	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"selector"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"contextPointer"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"contextPointer"	pointer
)	O
;	O
return	O
;	O
}	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
prop	pointer
)	O
pop	pointer
->	O
selector	pointer
=	O
prop	pointer
;	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"contextPointer"	pointer
,	O
NULL	O
)	O
;	O
its_value_list_append	function
(	O
&	O
pop	pointer
->	O
values	pointer
,	O
"contextPointer"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
if	O
(	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"textPointer"	pointer
)	O
)	O
{	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"textPointer"	pointer
,	O
NULL	O
)	O
;	O
its_value_list_append	function
(	O
&	O
pop	pointer
->	O
values	pointer
,	O
"textPointer"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
}	O
}	O
struct	O
its_value_list_ty	struct
*	O
its_extension_context_rule_eval	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
result	pointer
;	O
const	O
char	O
*	O
value	enum
;	O
result	pointer
=	O
XCALLOC	O
(	O
1	int
,	O
struct	O
its_value_list_ty	struct
)	O
;	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"contextPointer"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"contextPointer"	pointer
,	O
value	enum
)	O
;	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"textPointer"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"textPointer"	pointer
,	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
its_rule_class_ty	struct
its_extension_context_rule_class	struct
=	O
{	O
sizeof	O
(	O
struct	O
its_rule_ty	struct
)	O
,	O
its_extension_context_rule_constructor	function
,	O
its_rule_destructor	function
,	O
its_rule_apply	function
,	O
its_extension_context_rule_eval	function
,	O
}	O
;	O
static	O
void	O
its_extension_escape_rule_constructor	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
char	O
*	O
prop	pointer
;	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"selector"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"escape"	pointer
)	O
)	O
{	O
_its_error_missing_attribute	function
(	O
node	pointer
,	O
"escape"	pointer
)	O
;	O
return	O
;	O
}	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"selector"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
prop	pointer
)	O
pop	pointer
->	O
selector	pointer
=	O
prop	pointer
;	O
prop	pointer
=	O
_its_get_attribute	function
(	O
node	pointer
,	O
"escape"	pointer
,	O
NULL	O
)	O
;	O
its_value_list_append	function
(	O
&	O
pop	pointer
->	O
values	pointer
,	O
"escape"	pointer
,	O
prop	pointer
)	O
;	O
free	pointer
(	O
prop	pointer
)	O
;	O
}	O
struct	O
its_value_list_ty	struct
*	O
its_extension_escape_rule_eval	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
,	O
struct	O
its_pool_ty	struct
*	O
pool	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
result	pointer
;	O
result	pointer
=	O
XCALLOC	O
(	O
1	int
,	O
struct	O
its_value_list_ty	struct
)	O
;	O
switch	O
(	O
node	pointer
->	O
type	enum
)	O
{	O
case	O
XML_ATTRIBUTE_NODE	int
:	O
{	O
const	O
char	O
*	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"escape"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
{	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"escape"	pointer
,	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
}	O
break	O
;	O
case	O
XML_ELEMENT_NODE	int
:	O
{	O
const	O
char	O
*	O
value	enum
;	O
value	enum
=	O
its_pool_get_value_for_node	function
(	O
pool	pointer
,	O
node	pointer
,	O
"escape"	pointer
)	O
;	O
if	O
(	O
value	enum
!=	O
NULL	O
)	O
{	O
its_value_list_set_value	function
(	O
result	pointer
,	O
"escape"	pointer
,	O
value	enum
)	O
;	O
return	O
result	pointer
;	O
}	O
if	O
(	O
node	pointer
->	O
parent	pointer
!=	O
NULL	O
&&	O
node	pointer
->	O
parent	pointer
->	O
type	enum
==	O
XML_ELEMENT_NODE	int
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
;	O
values	pointer
=	O
its_extension_escape_rule_eval	function
(	O
pop	pointer
,	O
pool	pointer
,	O
node	pointer
->	O
parent	pointer
)	O
;	O
its_value_list_merge	function
(	O
result	pointer
,	O
values	pointer
)	O
;	O
its_value_list_destroy	function
(	O
values	pointer
)	O
;	O
free	pointer
(	O
values	pointer
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
result	pointer
;	O
}	O
static	O
struct	O
its_rule_class_ty	struct
its_extension_escape_rule_class	struct
=	O
{	O
sizeof	O
(	O
struct	O
its_rule_ty	struct
)	O
,	O
its_extension_escape_rule_constructor	function
,	O
its_rule_destructor	function
,	O
its_rule_apply	function
,	O
its_extension_escape_rule_eval	function
,	O
}	O
;	O
static	O
struct	O
its_rule_ty	struct
*	O
its_rule_alloc	function
(	O
struct	O
its_rule_class_ty	struct
*	O
method_table	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
;	O
pop	pointer
=	O
(	O
struct	O
its_rule_ty	struct
*	O
)	O
xcalloc	function
(	O
1	int
,	O
method_table	pointer
->	O
size	long
)	O
;	O
pop	pointer
->	O
methods	pointer
=	O
method_table	pointer
;	O
if	O
(	O
method_table	pointer
->	O
constructor	pointer
)	O
method_table	pointer
->	O
constructor	pointer
(	O
pop	pointer
,	O
node	pointer
)	O
;	O
return	O
pop	pointer
;	O
}	O
static	O
struct	O
its_rule_ty	struct
*	O
its_rule_parse	function
(	O
xmlDoc	struct
*	O
doc	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
const	O
char	O
*	O
name	pointer
=	O
(	O
const	O
char	O
*	O
)	O
node	pointer
->	O
name	pointer
;	O
void	O
*	O
value	enum
;	O
if	O
(	O
hash_find_entry	function
(	O
&	O
classes	struct
,	O
name	pointer
,	O
strlen	function
(	O
name	pointer
)	O
,	O
&	O
value	enum
)	O
==	O
0	int
)	O
{	O
struct	O
its_rule_ty	struct
*	O
result	pointer
;	O
xmlNs	struct
*	O
*	O
namespaces	pointer
;	O
result	pointer
=	O
its_rule_alloc	function
(	O
(	O
struct	O
its_rule_class_ty	struct
*	O
)	O
value	enum
,	O
node	pointer
)	O
;	O
namespaces	pointer
=	O
xmlGetNsList	function
(	O
doc	pointer
,	O
node	pointer
)	O
;	O
if	O
(	O
namespaces	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
namespaces	pointer
[	O
i	long
]	O
!=	O
NULL	O
;	O
i	long
++	O
)	O
;	O
result	pointer
->	O
namespaces	pointer
=	O
XCALLOC	O
(	O
i	long
+	O
1	int
,	O
xmlNs	struct
*	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
namespaces	pointer
[	O
i	long
]	O
!=	O
NULL	O
;	O
i	long
++	O
)	O
result	pointer
->	O
namespaces	pointer
[	O
i	long
]	O
=	O
xmlCopyNamespace	function
(	O
namespaces	pointer
[	O
i	long
]	O
)	O
;	O
}	O
xmlFree	pointer
(	O
namespaces	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
its_rule_destroy	function
(	O
struct	O
its_rule_ty	struct
*	O
pop	pointer
)	O
{	O
if	O
(	O
pop	pointer
->	O
methods	pointer
->	O
destructor	pointer
)	O
pop	pointer
->	O
methods	pointer
->	O
destructor	pointer
(	O
pop	pointer
)	O
;	O
}	O
static	O
void	O
init_classes	function
(	O
void	O
)	O
{	O
ADD_RULE_CLASS	O
(	O
"translateRule"	pointer
,	O
its_translate_rule_class	struct
)	O
;	O
ADD_RULE_CLASS	O
(	O
"locNoteRule"	pointer
,	O
its_localization_note_rule_class	struct
)	O
;	O
ADD_RULE_CLASS	O
(	O
"withinTextRule"	pointer
,	O
its_element_within_text_rule_class	struct
)	O
;	O
ADD_RULE_CLASS	O
(	O
"preserveSpaceRule"	pointer
,	O
its_preserve_space_rule_class	struct
)	O
;	O
ADD_RULE_CLASS	O
(	O
"contextRule"	pointer
,	O
its_extension_context_rule_class	struct
)	O
;	O
ADD_RULE_CLASS	O
(	O
"escapeRule"	pointer
,	O
its_extension_escape_rule_class	struct
)	O
;	O
}	O
struct	O
its_rule_list_ty	struct
*	O
its_rule_list_alloc	function
(	O
void	O
)	O
{	O
struct	O
its_rule_list_ty	struct
*	O
result	pointer
;	O
if	O
(	O
classes	struct
.	O
table	pointer
==	O
NULL	O
)	O
{	O
hash_init	function
(	O
&	O
classes	struct
,	O
10	int
)	O
;	O
init_classes	function
(	O
)	O
;	O
}	O
result	pointer
=	O
XCALLOC	O
(	O
1	int
,	O
struct	O
its_rule_list_ty	struct
)	O
;	O
return	O
result	pointer
;	O
}	O
void	O
its_rule_list_free	function
(	O
struct	O
its_rule_list_ty	struct
*	O
rules	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rules	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
its_rule_destroy	function
(	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
)	O
;	O
free	pointer
(	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
)	O
;	O
}	O
free	pointer
(	O
rules	pointer
->	O
items	pointer
)	O
;	O
its_pool_destroy	function
(	O
&	O
rules	pointer
->	O
pool	pointer
)	O
;	O
}	O
static	O
bool	bool
its_rule_list_add_from_doc	function
(	O
struct	O
its_rule_list_ty	struct
*	O
rules	pointer
,	O
xmlDoc	struct
*	O
doc	pointer
)	O
{	O
xmlNode	struct
*	O
root	pointer
,	O
*	O
node	pointer
;	O
root	pointer
=	O
xmlDocGetRootElement	function
(	O
doc	pointer
)	O
;	O
if	O
(	O
!	O
(	O
xmlStrEqual	function
(	O
root	pointer
->	O
name	pointer
,	O
BAD_CAST	O
"rules"	pointer
)	O
&&	O
xmlStrEqual	function
(	O
root	pointer
->	O
ns	pointer
->	O
href	pointer
,	O
BAD_CAST	O
ITS_NS	pointer
)	O
)	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"the root element is not \"rules\""	pointer
" under namespace %s"	pointer
)	O
,	O
ITS_NS	pointer
)	O
;	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
return	O
false	int
;	O
}	O
for	O
(	O
node	pointer
=	O
root	pointer
->	O
children	pointer
;	O
node	pointer
;	O
node	pointer
=	O
node	pointer
->	O
next	pointer
)	O
{	O
struct	O
its_rule_ty	struct
*	O
rule	pointer
;	O
rule	pointer
=	O
its_rule_parse	function
(	O
doc	pointer
,	O
node	pointer
)	O
;	O
if	O
(	O
!	O
rule	pointer
)	O
continue	O
;	O
if	O
(	O
rules	pointer
->	O
nitems	long
==	O
rules	pointer
->	O
nitems_max	long
)	O
{	O
rules	pointer
->	O
nitems_max	long
=	O
2	int
*	O
rules	pointer
->	O
nitems_max	long
+	O
1	int
;	O
rules	pointer
->	O
items	pointer
=	O
xrealloc	function
(	O
rules	pointer
->	O
items	pointer
,	O
sizeof	O
(	O
struct	O
its_rule_ty	struct
*	O
)	O
*	O
rules	pointer
->	O
nitems_max	long
)	O
;	O
}	O
rules	pointer
->	O
items	pointer
[	O
rules	pointer
->	O
nitems	long
++	O
]	O
=	O
rule	pointer
;	O
}	O
return	O
true	int
;	O
}	O
bool	bool
its_rule_list_add_from_file	function
(	O
struct	O
its_rule_list_ty	struct
*	O
rules	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
xmlDoc	struct
*	O
doc	pointer
;	O
bool	bool
result	pointer
;	O
doc	pointer
=	O
xmlReadFile	function
(	O
filename	pointer
,	O
"utf-8"	pointer
,	O
XML_PARSE_NONET	int
|	O
XML_PARSE_NOWARNING	int
|	O
XML_PARSE_NOBLANKS	int
|	O
XML_PARSE_NOERROR	int
)	O
;	O
if	O
(	O
doc	pointer
==	O
NULL	O
)	O
{	O
xmlError	struct
*	O
err	pointer
=	O
xmlGetLastError	function
(	O
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"cannot read %s: %s"	pointer
)	O
,	O
filename	pointer
,	O
err	pointer
->	O
message	pointer
)	O
;	O
return	O
false	int
;	O
}	O
result	pointer
=	O
its_rule_list_add_from_doc	function
(	O
rules	pointer
,	O
doc	pointer
)	O
;	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
bool	bool
its_rule_list_add_from_string	function
(	O
struct	O
its_rule_list_ty	struct
*	O
rules	pointer
,	O
const	O
char	O
*	O
rule	pointer
)	O
{	O
xmlDoc	struct
*	O
doc	pointer
;	O
bool	bool
result	pointer
;	O
doc	pointer
=	O
xmlReadMemory	function
(	O
rule	pointer
,	O
strlen	function
(	O
rule	pointer
)	O
,	O
"(internal)"	pointer
,	O
NULL	O
,	O
XML_PARSE_NONET	int
|	O
XML_PARSE_NOWARNING	int
|	O
XML_PARSE_NOBLANKS	int
|	O
XML_PARSE_NOERROR	int
)	O
;	O
if	O
(	O
doc	pointer
==	O
NULL	O
)	O
{	O
xmlError	struct
*	O
err	pointer
=	O
xmlGetLastError	function
(	O
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"cannot read %s: %s"	pointer
)	O
,	O
"(internal)"	pointer
,	O
err	pointer
->	O
message	pointer
)	O
;	O
return	O
false	int
;	O
}	O
result	pointer
=	O
its_rule_list_add_from_doc	function
(	O
rules	pointer
,	O
doc	pointer
)	O
;	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
void	O
its_rule_list_apply	function
(	O
struct	O
its_rule_list_ty	struct
*	O
rules	pointer
,	O
xmlDoc	struct
*	O
doc	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rules	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
its_rule_ty	struct
*	O
rule	pointer
=	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
rule	pointer
->	O
methods	pointer
->	O
apply	pointer
(	O
rule	pointer
,	O
&	O
rules	pointer
->	O
pool	pointer
,	O
doc	pointer
)	O
;	O
}	O
}	O
static	O
struct	O
its_value_list_ty	struct
*	O
its_rule_list_eval	function
(	O
its_rule_list_ty	struct
*	O
rules	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
result	pointer
;	O
size_t	long
i	long
;	O
result	pointer
=	O
XCALLOC	O
(	O
1	int
,	O
struct	O
its_value_list_ty	struct
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rules	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
its_rule_ty	struct
*	O
rule	pointer
=	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
;	O
values	pointer
=	O
rule	pointer
->	O
methods	pointer
->	O
eval	pointer
(	O
rule	pointer
,	O
&	O
rules	pointer
->	O
pool	pointer
,	O
node	pointer
)	O
;	O
its_value_list_merge	function
(	O
result	pointer
,	O
values	pointer
)	O
;	O
its_value_list_destroy	function
(	O
values	pointer
)	O
;	O
free	pointer
(	O
values	pointer
)	O
;	O
}	O
return	O
result	pointer
;	O
}	O
static	O
bool	bool
its_rule_list_is_translatable	function
(	O
its_rule_list_ty	struct
*	O
rules	pointer
,	O
xmlNode	struct
*	O
node	pointer
,	O
int	O
depth	int
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
;	O
const	O
char	O
*	O
value	enum
;	O
xmlNode	struct
*	O
n	long
;	O
if	O
(	O
node	pointer
->	O
type	enum
!=	O
XML_ELEMENT_NODE	int
&&	O
node	pointer
->	O
type	enum
!=	O
XML_ATTRIBUTE_NODE	int
)	O
return	O
false	int
;	O
values	pointer
=	O
its_rule_list_eval	function
(	O
rules	pointer
,	O
node	pointer
)	O
;	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"translate"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
value	enum
&&	O
strcmp	function
(	O
value	enum
,	O
"yes"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
its_value_list_destroy	function
(	O
values	pointer
)	O
;	O
free	pointer
(	O
values	pointer
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
depth	int
>	O
0	int
)	O
{	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"withinText"	pointer
)	O
;	O
if	O
(	O
!	O
(	O
value	enum
&&	O
strcmp	function
(	O
value	enum
,	O
"yes"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
its_value_list_destroy	function
(	O
values	pointer
)	O
;	O
free	pointer
(	O
values	pointer
)	O
;	O
return	O
false	int
;	O
}	O
}	O
its_value_list_destroy	function
(	O
values	pointer
)	O
;	O
free	pointer
(	O
values	pointer
)	O
;	O
for	O
(	O
n	long
=	O
node	pointer
->	O
children	pointer
;	O
n	long
;	O
n	long
=	O
n	long
->	O
next	pointer
)	O
{	O
switch	O
(	O
n	long
->	O
type	enum
)	O
{	O
case	O
XML_ELEMENT_NODE	int
:	O
if	O
(	O
!	O
its_rule_list_is_translatable	function
(	O
rules	pointer
,	O
n	long
,	O
depth	int
+	O
1	int
)	O
)	O
return	O
false	int
;	O
break	O
;	O
case	O
XML_TEXT_NODE	int
:	O
case	O
XML_CDATA_SECTION_NODE	int
:	O
case	O
XML_ENTITY_REF_NODE	int
:	O
case	O
XML_COMMENT_NODE	int
:	O
break	O
;	O
default	O
:	O
return	O
false	int
;	O
}	O
}	O
return	O
true	int
;	O
}	O
static	O
void	O
its_rule_list_extract_nodes	function
(	O
its_rule_list_ty	struct
*	O
rules	pointer
,	O
struct	O
its_node_list_ty	struct
*	O
nodes	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
if	O
(	O
node	pointer
->	O
type	enum
==	O
XML_ELEMENT_NODE	int
)	O
{	O
xmlNode	struct
*	O
n	long
;	O
if	O
(	O
node	pointer
->	O
properties	pointer
)	O
{	O
xmlAttr	struct
*	O
attr	pointer
=	O
node	pointer
->	O
properties	pointer
;	O
for	O
(	O
;	O
attr	pointer
;	O
attr	pointer
=	O
attr	pointer
->	O
next	pointer
)	O
{	O
xmlNode	struct
*	O
n	long
=	O
(	O
xmlNode	struct
*	O
)	O
attr	pointer
;	O
if	O
(	O
its_rule_list_is_translatable	function
(	O
rules	pointer
,	O
n	long
,	O
0	int
)	O
)	O
its_node_list_append	function
(	O
nodes	pointer
,	O
n	long
)	O
;	O
}	O
}	O
if	O
(	O
its_rule_list_is_translatable	function
(	O
rules	pointer
,	O
node	pointer
,	O
0	int
)	O
)	O
its_node_list_append	function
(	O
nodes	pointer
,	O
node	pointer
)	O
;	O
else	O
{	O
for	O
(	O
n	long
=	O
node	pointer
->	O
children	pointer
;	O
n	long
;	O
n	long
=	O
n	long
->	O
next	pointer
)	O
its_rule_list_extract_nodes	function
(	O
rules	pointer
,	O
nodes	pointer
,	O
n	long
)	O
;	O
}	O
}	O
}	O
static	O
char	O
*	O
_its_get_content	function
(	O
struct	O
its_rule_list_ty	struct
*	O
rules	pointer
,	O
xmlNode	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
pointer	pointer
,	O
enum	O
its_whitespace_type_ty	enum
whitespace	enum
,	O
bool	bool
no_escape	bool
)	O
{	O
xmlXPathContext	struct
*	O
context	pointer
;	O
xmlXPathObject	struct
*	O
object	pointer
;	O
size_t	long
i	long
;	O
char	O
*	O
result	pointer
=	O
NULL	O
;	O
context	pointer
=	O
xmlXPathNewContext	function
(	O
node	pointer
->	O
doc	pointer
)	O
;	O
if	O
(	O
!	O
context	pointer
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"cannot create XPath context"	pointer
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rules	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
struct	O
its_rule_ty	struct
*	O
rule	pointer
=	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
;	O
if	O
(	O
rule	pointer
->	O
namespaces	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
rule	pointer
->	O
namespaces	pointer
[	O
i	long
]	O
!=	O
NULL	O
;	O
i	long
++	O
)	O
{	O
xmlNs	struct
*	O
ns	pointer
=	O
rule	pointer
->	O
namespaces	pointer
[	O
i	long
]	O
;	O
xmlXPathRegisterNs	function
(	O
context	pointer
,	O
ns	pointer
->	O
prefix	pointer
,	O
ns	pointer
->	O
href	pointer
)	O
;	O
}	O
}	O
}	O
xmlXPathSetContextNode	function
(	O
node	pointer
,	O
context	pointer
)	O
;	O
object	pointer
=	O
xmlXPathEvalExpression	function
(	O
BAD_CAST	O
pointer	pointer
,	O
context	pointer
)	O
;	O
if	O
(	O
!	O
object	pointer
)	O
{	O
xmlXPathFreeContext	function
(	O
context	pointer
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"cannot evaluate XPath location path: %s"	pointer
)	O
,	O
pointer	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
switch	O
(	O
object	pointer
->	O
type	enum
)	O
{	O
case	O
XPATH_NODESET	int
:	O
{	O
xmlNodeSet	struct
*	O
nodes	pointer
=	O
object	pointer
->	O
nodesetval	pointer
;	O
string_list_ty	struct
sl	struct
;	O
size_t	long
i	long
;	O
string_list_init	function
(	O
&	O
sl	struct
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nodes	pointer
->	O
nodeNr	int
;	O
i	long
++	O
)	O
{	O
char	O
*	O
content	pointer
=	O
_its_collect_text_content	function
(	O
nodes	pointer
->	O
nodeTab	pointer
[	O
i	long
]	O
,	O
whitespace	enum
,	O
no_escape	bool
)	O
;	O
string_list_append	function
(	O
&	O
sl	struct
,	O
content	pointer
)	O
;	O
free	pointer
(	O
content	pointer
)	O
;	O
}	O
result	pointer
=	O
string_list_concat	function
(	O
&	O
sl	struct
)	O
;	O
string_list_destroy	function
(	O
&	O
sl	struct
)	O
;	O
}	O
break	O
;	O
case	O
XPATH_STRING	int
:	O
result	pointer
=	O
xstrdup	function
(	O
(	O
const	O
char	O
*	O
)	O
object	pointer
->	O
stringval	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
xmlXPathFreeObject	function
(	O
object	pointer
)	O
;	O
xmlXPathFreeContext	function
(	O
context	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
void	O
_its_comment_append	function
(	O
string_list_ty	struct
*	O
comments	pointer
,	O
const	O
char	O
*	O
data	pointer
)	O
{	O
char	O
*	O
copy	pointer
=	O
xstrdup	function
(	O
data	pointer
)	O
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
q	pointer
;	O
for	O
(	O
p	pointer
=	O
copy	pointer
;	O
(	O
q	pointer
=	O
strchr	function
(	O
p	pointer
,	O
'\n'	O
)	O
)	O
!=	O
NULL	O
;	O
p	pointer
=	O
q	pointer
+	O
1	int
)	O
{	O
while	O
(	O
p	pointer
[	O
0	int
]	O
==	O
' '	O
||	O
p	pointer
[	O
0	int
]	O
==	O
'\t'	O
)	O
p	pointer
++	O
;	O
while	O
(	O
q	pointer
>	O
p	pointer
&&	O
(	O
q	pointer
[	O
-	O
1	int
]	O
==	O
' '	O
||	O
q	pointer
[	O
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
q	pointer
--	O
;	O
*	O
q	pointer
=	O
'\0'	O
;	O
string_list_append	function
(	O
comments	pointer
,	O
p	pointer
)	O
;	O
}	O
q	pointer
=	O
p	pointer
+	O
strlen	function
(	O
p	pointer
)	O
;	O
while	O
(	O
p	pointer
[	O
0	int
]	O
==	O
' '	O
||	O
p	pointer
[	O
0	int
]	O
==	O
'\t'	O
)	O
p	pointer
++	O
;	O
while	O
(	O
q	pointer
>	O
p	pointer
&&	O
(	O
q	pointer
[	O
-	O
1	int
]	O
==	O
' '	O
||	O
q	pointer
[	O
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
q	pointer
--	O
;	O
*	O
q	pointer
=	O
'\0'	O
;	O
string_list_append	function
(	O
comments	pointer
,	O
p	pointer
)	O
;	O
free	pointer
(	O
copy	pointer
)	O
;	O
}	O
static	O
void	O
its_rule_list_extract_text	function
(	O
its_rule_list_ty	struct
*	O
rules	pointer
,	O
xmlNode	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
logical_filename	pointer
,	O
flag_context_list_table_ty	struct
*	O
flag_table	pointer
,	O
message_list_ty	struct
*	O
mlp	pointer
,	O
its_extract_callback_ty	pointer
callback	pointer
)	O
{	O
if	O
(	O
node	pointer
->	O
type	enum
==	O
XML_ELEMENT_NODE	int
||	O
node	pointer
->	O
type	enum
==	O
XML_ATTRIBUTE_NODE	int
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
;	O
const	O
char	O
*	O
value	enum
;	O
char	O
*	O
msgid	pointer
=	O
NULL	O
,	O
*	O
msgctxt	pointer
=	O
NULL	O
,	O
*	O
comment	pointer
=	O
NULL	O
;	O
enum	O
its_whitespace_type_ty	enum
whitespace	enum
;	O
bool	bool
no_escape	bool
;	O
values	pointer
=	O
its_rule_list_eval	function
(	O
rules	pointer
,	O
node	pointer
)	O
;	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"locNote"	pointer
)	O
;	O
if	O
(	O
value	enum
)	O
comment	pointer
=	O
xstrdup	function
(	O
value	enum
)	O
;	O
else	O
{	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"escape"	pointer
)	O
;	O
no_escape	bool
=	O
value	enum
!=	O
NULL	O
&&	O
strcmp	function
(	O
value	enum
,	O
"no"	pointer
)	O
==	O
0	int
;	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"locNotePointer"	pointer
)	O
;	O
if	O
(	O
value	enum
)	O
comment	pointer
=	O
_its_get_content	function
(	O
rules	pointer
,	O
node	pointer
,	O
value	enum
,	O
ITS_WHITESPACE_TRIM	int
,	O
no_escape	bool
)	O
;	O
}	O
if	O
(	O
comment	pointer
!=	O
NULL	O
&&	O
*	O
comment	pointer
!=	O
'\0'	O
)	O
{	O
string_list_ty	struct
comments	pointer
;	O
char	O
*	O
tmp	pointer
;	O
string_list_init	function
(	O
&	O
comments	pointer
)	O
;	O
_its_comment_append	function
(	O
&	O
comments	pointer
,	O
comment	pointer
)	O
;	O
tmp	pointer
=	O
string_list_join	function
(	O
&	O
comments	pointer
,	O
"\n"	pointer
,	O
'\0'	O
,	O
false	int
)	O
;	O
free	pointer
(	O
comment	pointer
)	O
;	O
comment	pointer
=	O
tmp	pointer
;	O
}	O
else	O
{	O
xmlNode	struct
*	O
sibling	pointer
;	O
string_list_ty	struct
comments	pointer
;	O
string_list_init	function
(	O
&	O
comments	pointer
)	O
;	O
for	O
(	O
sibling	pointer
=	O
node	pointer
->	O
prev	pointer
;	O
sibling	pointer
;	O
sibling	pointer
=	O
sibling	pointer
->	O
prev	pointer
)	O
if	O
(	O
sibling	pointer
->	O
type	enum
!=	O
XML_COMMENT_NODE	int
||	O
sibling	pointer
->	O
prev	pointer
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
sibling	pointer
)	O
{	O
if	O
(	O
sibling	pointer
->	O
type	enum
!=	O
XML_COMMENT_NODE	int
)	O
sibling	pointer
=	O
sibling	pointer
->	O
next	pointer
;	O
for	O
(	O
;	O
sibling	pointer
&&	O
sibling	pointer
->	O
type	enum
==	O
XML_COMMENT_NODE	int
;	O
sibling	pointer
=	O
sibling	pointer
->	O
next	pointer
)	O
{	O
xmlChar	char
*	O
content	pointer
=	O
xmlNodeGetContent	function
(	O
sibling	pointer
)	O
;	O
_its_comment_append	function
(	O
&	O
comments	pointer
,	O
(	O
const	O
char	O
*	O
)	O
content	pointer
)	O
;	O
xmlFree	pointer
(	O
content	pointer
)	O
;	O
}	O
free	pointer
(	O
comment	pointer
)	O
;	O
comment	pointer
=	O
string_list_join	function
(	O
&	O
comments	pointer
,	O
"\n"	pointer
,	O
'\0'	O
,	O
false	int
)	O
;	O
string_list_destroy	function
(	O
&	O
comments	pointer
)	O
;	O
}	O
}	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"space"	pointer
)	O
;	O
if	O
(	O
value	enum
&&	O
strcmp	function
(	O
value	enum
,	O
"preserve"	pointer
)	O
==	O
0	int
)	O
whitespace	enum
=	O
ITS_WHITESPACE_PRESERVE	int
;	O
else	O
if	O
(	O
value	enum
&&	O
strcmp	function
(	O
value	enum
,	O
"trim"	pointer
)	O
==	O
0	int
)	O
whitespace	enum
=	O
ITS_WHITESPACE_TRIM	int
;	O
else	O
if	O
(	O
value	enum
&&	O
strcmp	function
(	O
value	enum
,	O
"paragraph"	pointer
)	O
==	O
0	int
)	O
whitespace	enum
=	O
ITS_WHITESPACE_NORMALIZE_PARAGRAPH	int
;	O
else	O
whitespace	enum
=	O
ITS_WHITESPACE_NORMALIZE	int
;	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"escape"	pointer
)	O
;	O
no_escape	bool
=	O
value	enum
!=	O
NULL	O
&&	O
strcmp	function
(	O
value	enum
,	O
"no"	pointer
)	O
==	O
0	int
;	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"contextPointer"	pointer
)	O
;	O
if	O
(	O
value	enum
)	O
msgctxt	pointer
=	O
_its_get_content	function
(	O
rules	pointer
,	O
node	pointer
,	O
value	enum
,	O
ITS_WHITESPACE_PRESERVE	int
,	O
no_escape	bool
)	O
;	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"textPointer"	pointer
)	O
;	O
if	O
(	O
value	enum
)	O
msgid	pointer
=	O
_its_get_content	function
(	O
rules	pointer
,	O
node	pointer
,	O
value	enum
,	O
ITS_WHITESPACE_PRESERVE	int
,	O
no_escape	bool
)	O
;	O
its_value_list_destroy	function
(	O
values	pointer
)	O
;	O
free	pointer
(	O
values	pointer
)	O
;	O
if	O
(	O
msgid	pointer
==	O
NULL	O
)	O
msgid	pointer
=	O
_its_collect_text_content	function
(	O
node	pointer
,	O
whitespace	enum
,	O
no_escape	bool
)	O
;	O
if	O
(	O
*	O
msgid	pointer
!=	O
'\0'	O
)	O
{	O
lex_pos_ty	struct
pos	struct
;	O
char	O
*	O
marker	pointer
;	O
pos	struct
.	O
file_name	pointer
=	O
xstrdup	function
(	O
logical_filename	pointer
)	O
;	O
pos	struct
.	O
line_number	long
=	O
xmlGetLineNo	function
(	O
node	pointer
)	O
;	O
if	O
(	O
node	pointer
->	O
type	enum
==	O
XML_ELEMENT_NODE	int
)	O
{	O
assert	O
(	O
node	pointer
->	O
parent	pointer
)	O
;	O
marker	pointer
=	O
xasprintf	function
(	O
"%s/%s"	pointer
,	O
node	pointer
->	O
parent	pointer
->	O
name	pointer
,	O
node	pointer
->	O
name	pointer
)	O
;	O
}	O
else	O
{	O
assert	O
(	O
node	pointer
->	O
parent	pointer
&&	O
node	pointer
->	O
parent	pointer
->	O
parent	pointer
)	O
;	O
marker	pointer
=	O
xasprintf	function
(	O
"%s/%s@%s"	pointer
,	O
node	pointer
->	O
parent	pointer
->	O
parent	pointer
->	O
name	pointer
,	O
node	pointer
->	O
parent	pointer
->	O
name	pointer
,	O
node	pointer
->	O
name	pointer
)	O
;	O
}	O
if	O
(	O
msgctxt	pointer
!=	O
NULL	O
&&	O
*	O
msgctxt	pointer
==	O
'\0'	O
)	O
{	O
free	pointer
(	O
msgctxt	pointer
)	O
;	O
msgctxt	pointer
=	O
NULL	O
;	O
}	O
callback	pointer
(	O
mlp	pointer
,	O
msgctxt	pointer
,	O
msgid	pointer
,	O
&	O
pos	struct
,	O
comment	pointer
,	O
marker	pointer
,	O
whitespace	enum
)	O
;	O
free	pointer
(	O
marker	pointer
)	O
;	O
}	O
free	pointer
(	O
msgctxt	pointer
)	O
;	O
free	pointer
(	O
msgid	pointer
)	O
;	O
free	pointer
(	O
comment	pointer
)	O
;	O
}	O
}	O
void	O
its_rule_list_extract	function
(	O
its_rule_list_ty	struct
*	O
rules	pointer
,	O
FILE	struct
*	O
fp	pointer
,	O
const	O
char	O
*	O
real_filename	pointer
,	O
const	O
char	O
*	O
logical_filename	pointer
,	O
flag_context_list_table_ty	struct
*	O
flag_table	pointer
,	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
,	O
its_extract_callback_ty	pointer
callback	pointer
)	O
{	O
xmlDoc	struct
*	O
doc	pointer
;	O
struct	O
its_node_list_ty	struct
nodes	pointer
;	O
size_t	long
i	long
;	O
doc	pointer
=	O
xmlReadFd	function
(	O
fileno	function
(	O
fp	pointer
)	O
,	O
logical_filename	pointer
,	O
NULL	O
,	O
XML_PARSE_NONET	int
|	O
XML_PARSE_NOWARNING	int
|	O
XML_PARSE_NOBLANKS	int
|	O
XML_PARSE_NOERROR	int
)	O
;	O
if	O
(	O
doc	pointer
==	O
NULL	O
)	O
{	O
xmlError	struct
*	O
err	pointer
=	O
xmlGetLastError	function
(	O
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"cannot read %s: %s"	pointer
)	O
,	O
logical_filename	pointer
,	O
err	pointer
->	O
message	pointer
)	O
;	O
return	O
;	O
}	O
its_rule_list_apply	function
(	O
rules	pointer
,	O
doc	pointer
)	O
;	O
memset	function
(	O
&	O
nodes	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
its_node_list_ty	struct
)	O
)	O
;	O
its_rule_list_extract_nodes	function
(	O
rules	pointer
,	O
&	O
nodes	pointer
,	O
xmlDocGetRootElement	function
(	O
doc	pointer
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nodes	pointer
.	O
nitems	long
;	O
i	long
++	O
)	O
its_rule_list_extract_text	function
(	O
rules	pointer
,	O
nodes	pointer
.	O
items	pointer
[	O
i	long
]	O
,	O
logical_filename	pointer
,	O
flag_table	pointer
,	O
mdlp	pointer
->	O
item	pointer
[	O
0	int
]	O
->	O
messages	pointer
,	O
callback	pointer
)	O
;	O
free	pointer
(	O
nodes	pointer
.	O
items	pointer
)	O
;	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
}	O
struct	O
its_merge_context_ty	struct
{	O
its_rule_list_ty	struct
*	O
rules	pointer
;	O
xmlDoc	struct
*	O
doc	pointer
;	O
struct	O
its_node_list_ty	struct
nodes	pointer
;	O
}	O
;	O
static	O
void	O
its_merge_context_merge_node	function
(	O
struct	O
its_merge_context_ty	struct
*	O
context	pointer
,	O
xmlNode	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
language	pointer
,	O
message_list_ty	struct
*	O
mlp	pointer
)	O
{	O
if	O
(	O
node	pointer
->	O
type	enum
==	O
XML_ELEMENT_NODE	int
)	O
{	O
struct	O
its_value_list_ty	struct
*	O
values	pointer
;	O
const	O
char	O
*	O
value	enum
;	O
char	O
*	O
msgid	pointer
=	O
NULL	O
,	O
*	O
msgctxt	pointer
=	O
NULL	O
;	O
enum	O
its_whitespace_type_ty	enum
whitespace	enum
;	O
bool	bool
no_escape	bool
;	O
values	pointer
=	O
its_rule_list_eval	function
(	O
context	pointer
->	O
rules	pointer
,	O
node	pointer
)	O
;	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"space"	pointer
)	O
;	O
if	O
(	O
value	enum
&&	O
strcmp	function
(	O
value	enum
,	O
"preserve"	pointer
)	O
==	O
0	int
)	O
whitespace	enum
=	O
ITS_WHITESPACE_PRESERVE	int
;	O
else	O
if	O
(	O
value	enum
&&	O
strcmp	function
(	O
value	enum
,	O
"trim"	pointer
)	O
==	O
0	int
)	O
whitespace	enum
=	O
ITS_WHITESPACE_TRIM	int
;	O
else	O
if	O
(	O
value	enum
&&	O
strcmp	function
(	O
value	enum
,	O
"paragraph"	pointer
)	O
==	O
0	int
)	O
whitespace	enum
=	O
ITS_WHITESPACE_NORMALIZE_PARAGRAPH	int
;	O
else	O
whitespace	enum
=	O
ITS_WHITESPACE_NORMALIZE	int
;	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"escape"	pointer
)	O
;	O
no_escape	bool
=	O
value	enum
!=	O
NULL	O
&&	O
strcmp	function
(	O
value	enum
,	O
"no"	pointer
)	O
==	O
0	int
;	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"contextPointer"	pointer
)	O
;	O
if	O
(	O
value	enum
)	O
msgctxt	pointer
=	O
_its_get_content	function
(	O
context	pointer
->	O
rules	pointer
,	O
node	pointer
,	O
value	enum
,	O
ITS_WHITESPACE_PRESERVE	int
,	O
no_escape	bool
)	O
;	O
value	enum
=	O
its_value_list_get_value	function
(	O
values	pointer
,	O
"textPointer"	pointer
)	O
;	O
if	O
(	O
value	enum
)	O
msgid	pointer
=	O
_its_get_content	function
(	O
context	pointer
->	O
rules	pointer
,	O
node	pointer
,	O
value	enum
,	O
ITS_WHITESPACE_PRESERVE	int
,	O
no_escape	bool
)	O
;	O
its_value_list_destroy	function
(	O
values	pointer
)	O
;	O
free	pointer
(	O
values	pointer
)	O
;	O
if	O
(	O
msgid	pointer
==	O
NULL	O
)	O
msgid	pointer
=	O
_its_collect_text_content	function
(	O
node	pointer
,	O
whitespace	enum
,	O
no_escape	bool
)	O
;	O
if	O
(	O
*	O
msgid	pointer
!=	O
'\0'	O
)	O
{	O
message_ty	struct
*	O
mp	pointer
;	O
mp	pointer
=	O
message_list_search	function
(	O
mlp	pointer
,	O
msgctxt	pointer
,	O
msgid	pointer
)	O
;	O
if	O
(	O
mp	pointer
&&	O
*	O
mp	pointer
->	O
msgstr	pointer
!=	O
'\0'	O
)	O
{	O
xmlNode	struct
*	O
translated	pointer
;	O
translated	pointer
=	O
xmlNewNode	function
(	O
node	pointer
->	O
ns	pointer
,	O
node	pointer
->	O
name	pointer
)	O
;	O
xmlSetProp	function
(	O
translated	pointer
,	O
BAD_CAST	O
"xml:lang"	pointer
,	O
BAD_CAST	O
language	pointer
)	O
;	O
xmlNodeAddContent	function
(	O
translated	pointer
,	O
BAD_CAST	O
mp	pointer
->	O
msgstr	pointer
)	O
;	O
xmlAddNextSibling	function
(	O
node	pointer
,	O
translated	pointer
)	O
;	O
}	O
}	O
free	pointer
(	O
msgctxt	pointer
)	O
;	O
free	pointer
(	O
msgid	pointer
)	O
;	O
}	O
}	O
void	O
its_merge_context_merge	function
(	O
its_merge_context_ty	struct
*	O
context	pointer
,	O
const	O
char	O
*	O
language	pointer
,	O
message_list_ty	struct
*	O
mlp	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
context	pointer
->	O
nodes	pointer
.	O
nitems	long
;	O
i	long
++	O
)	O
its_merge_context_merge_node	function
(	O
context	pointer
,	O
context	pointer
->	O
nodes	pointer
.	O
items	pointer
[	O
i	long
]	O
,	O
language	pointer
,	O
mlp	pointer
)	O
;	O
}	O
struct	O
its_merge_context_ty	struct
*	O
its_merge_context_alloc	function
(	O
its_rule_list_ty	struct
*	O
rules	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
xmlDoc	struct
*	O
doc	pointer
;	O
struct	O
its_merge_context_ty	struct
*	O
result	pointer
;	O
doc	pointer
=	O
xmlReadFile	function
(	O
filename	pointer
,	O
NULL	O
,	O
XML_PARSE_NONET	int
|	O
XML_PARSE_NOWARNING	int
|	O
XML_PARSE_NOBLANKS	int
|	O
XML_PARSE_NOERROR	int
)	O
;	O
if	O
(	O
doc	pointer
==	O
NULL	O
)	O
{	O
xmlError	struct
*	O
err	pointer
=	O
xmlGetLastError	function
(	O
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"cannot read %s: %s"	pointer
)	O
,	O
filename	pointer
,	O
err	pointer
->	O
message	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
its_rule_list_apply	function
(	O
rules	pointer
,	O
doc	pointer
)	O
;	O
result	pointer
=	O
XMALLOC	O
(	O
struct	O
its_merge_context_ty	struct
)	O
;	O
result	pointer
->	O
rules	pointer
=	O
rules	pointer
;	O
result	pointer
->	O
doc	pointer
=	O
doc	pointer
;	O
memset	function
(	O
&	O
result	pointer
->	O
nodes	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
its_node_list_ty	struct
)	O
)	O
;	O
its_rule_list_extract_nodes	function
(	O
result	pointer
->	O
rules	pointer
,	O
&	O
result	pointer
->	O
nodes	pointer
,	O
xmlDocGetRootElement	function
(	O
result	pointer
->	O
doc	pointer
)	O
)	O
;	O
return	O
result	pointer
;	O
}	O
void	O
its_merge_context_write	function
(	O
struct	O
its_merge_context_ty	struct
*	O
context	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
xmlDocFormatDump	function
(	O
fp	pointer
,	O
context	pointer
->	O
doc	pointer
,	O
1	int
)	O
;	O
}	O
void	O
its_merge_context_free	function
(	O
struct	O
its_merge_context_ty	struct
*	O
context	pointer
)	O
{	O
xmlFreeDoc	function
(	O
context	pointer
->	O
doc	pointer
)	O
;	O
free	pointer
(	O
context	pointer
->	O
nodes	pointer
.	O
items	pointer
)	O
;	O
free	pointer
(	O
context	pointer
)	O
;	O
}	O
