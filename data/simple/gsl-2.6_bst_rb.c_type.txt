typedef	O
struct	O
gsl_bst_rb_node	struct
rb_node	pointer
;	O
typedef	O
gsl_bst_rb_table	struct
rb_table	pointer
;	O
typedef	O
gsl_bst_rb_traverser	struct
rb_traverser	struct
;	O
enum	O
rb_color	char
{	O
RB_BLACK	int
,	O
RB_RED	int
}	O
;	O
static	O
int	O
rb_init	function
(	O
const	O
gsl_bst_allocator	struct
*	O
allocator	pointer
,	O
gsl_bst_cmp_function	function
*	O
compare	pointer
,	O
void	O
*	O
params	pointer
,	O
void	O
*	O
vtable	pointer
)	O
;	O
static	O
size_t	long
rb_nodes	function
(	O
const	O
void	O
*	O
vtable	pointer
)	O
;	O
static	O
int	O
rb_empty	function
(	O
void	O
*	O
vtable	pointer
)	O
;	O
static	O
void	O
*	O
*	O
rb_probe	function
(	O
void	O
*	O
item	pointer
,	O
rb_table	pointer
*	O
table	union
)	O
;	O
static	O
void	O
*	O
rb_insert	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
vtable	pointer
)	O
;	O
static	O
void	O
*	O
rb_find	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
vtable	pointer
)	O
;	O
static	O
void	O
*	O
rb_remove	function
(	O
const	O
void	O
*	O
item	pointer
,	O
void	O
*	O
vtable	pointer
)	O
;	O
static	O
int	O
rb_t_init	function
(	O
void	O
*	O
vtrav	pointer
,	O
const	O
void	O
*	O
vtable	pointer
)	O
;	O
static	O
void	O
*	O
rb_t_first	function
(	O
void	O
*	O
vtrav	pointer
,	O
const	O
void	O
*	O
vtable	pointer
)	O
;	O
static	O
void	O
*	O
rb_t_last	function
(	O
void	O
*	O
vtrav	pointer
,	O
const	O
void	O
*	O
vtable	pointer
)	O
;	O
static	O
void	O
*	O
rb_t_find	function
(	O
const	O
void	O
*	O
item	pointer
,	O
void	O
*	O
vtrav	pointer
,	O
const	O
void	O
*	O
vtable	pointer
)	O
;	O
static	O
void	O
*	O
rb_t_insert	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
vtrav	pointer
,	O
void	O
*	O
vtable	pointer
)	O
;	O
static	O
void	O
*	O
rb_t_copy	function
(	O
void	O
*	O
vtrav	pointer
,	O
const	O
void	O
*	O
vsrc	pointer
)	O
;	O
static	O
void	O
*	O
rb_t_next	function
(	O
void	O
*	O
vtrav	pointer
)	O
;	O
static	O
void	O
*	O
rb_t_prev	function
(	O
void	O
*	O
vtrav	pointer
)	O
;	O
static	O
void	O
*	O
rb_t_cur	function
(	O
const	O
void	O
*	O
vtrav	pointer
)	O
;	O
static	O
void	O
*	O
rb_t_replace	function
(	O
void	O
*	O
vtrav	pointer
,	O
void	O
*	O
new_item	pointer
)	O
;	O
static	O
void	O
rb_trav_refresh	function
(	O
rb_traverser	struct
*	O
trav	pointer
)	O
;	O
static	O
int	O
rb_init	function
(	O
const	O
gsl_bst_allocator	struct
*	O
allocator	pointer
,	O
gsl_bst_cmp_function	function
*	O
compare	pointer
,	O
void	O
*	O
params	pointer
,	O
void	O
*	O
vtable	pointer
)	O
{	O
rb_table	pointer
*	O
table	union
=	O
(	O
rb_table	pointer
*	O
)	O
vtable	pointer
;	O
table	union
->	O
rb_alloc	pointer
=	O
allocator	pointer
;	O
table	union
->	O
rb_compare	pointer
=	O
compare	pointer
;	O
table	union
->	O
rb_param	pointer
=	O
params	pointer
;	O
table	union
->	O
rb_root	pointer
=	O
NULL	O
;	O
table	union
->	O
rb_count	long
=	O
0	int
;	O
table	union
->	O
rb_generation	long
=	O
0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
size_t	long
rb_nodes	function
(	O
const	O
void	O
*	O
vtable	pointer
)	O
{	O
const	O
rb_table	pointer
*	O
table	union
=	O
(	O
const	O
rb_table	pointer
*	O
)	O
vtable	pointer
;	O
return	O
table	union
->	O
rb_count	long
;	O
}	O
static	O
int	O
rb_empty	function
(	O
void	O
*	O
vtable	pointer
)	O
{	O
rb_table	pointer
*	O
table	union
=	O
(	O
rb_table	pointer
*	O
)	O
vtable	pointer
;	O
rb_node	pointer
*	O
p	pointer
,	O
*	O
q	pointer
;	O
for	O
(	O
p	pointer
=	O
table	union
->	O
rb_root	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
q	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
rb_link	array
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
q	pointer
=	O
p	pointer
->	O
rb_link	array
[	O
1	int
]	O
;	O
table	union
->	O
rb_alloc	pointer
->	O
free	function
(	O
p	pointer
,	O
table	union
->	O
rb_param	pointer
)	O
;	O
}	O
else	O
{	O
q	pointer
=	O
p	pointer
->	O
rb_link	array
[	O
0	int
]	O
;	O
p	pointer
->	O
rb_link	array
[	O
0	int
]	O
=	O
q	pointer
->	O
rb_link	array
[	O
1	int
]	O
;	O
q	pointer
->	O
rb_link	array
[	O
1	int
]	O
=	O
p	pointer
;	O
}	O
}	O
table	union
->	O
rb_root	pointer
=	O
NULL	O
;	O
table	union
->	O
rb_count	long
=	O
0	int
;	O
table	union
->	O
rb_generation	long
=	O
0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
*	O
*	O
rb_probe	function
(	O
void	O
*	O
item	pointer
,	O
rb_table	pointer
*	O
table	union
)	O
{	O
rb_node	pointer
*	O
pa	array
[	O
RB_MAX_HEIGHT	O
]	O
;	O
unsigned	O
char	O
da	array
[	O
RB_MAX_HEIGHT	O
]	O
;	O
int	O
k	int
;	O
rb_node	pointer
*	O
p	pointer
;	O
rb_node	pointer
*	O
n	int
;	O
pa	array
[	O
0	int
]	O
=	O
(	O
rb_node	pointer
*	O
)	O
&	O
table	union
->	O
rb_root	pointer
;	O
da	array
[	O
0	int
]	O
=	O
0	int
;	O
k	int
=	O
1	int
;	O
for	O
(	O
p	pointer
=	O
table	union
->	O
rb_root	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
rb_link	array
[	O
da	array
[	O
k	int
-	O
1	int
]	O
]	O
)	O
{	O
int	O
cmp	int
=	O
table	union
->	O
rb_compare	pointer
(	O
item	pointer
,	O
p	pointer
->	O
rb_data	pointer
,	O
table	union
->	O
rb_param	pointer
)	O
;	O
if	O
(	O
cmp	int
==	O
0	int
)	O
return	O
&	O
p	pointer
->	O
rb_data	pointer
;	O
pa	array
[	O
k	int
]	O
=	O
p	pointer
;	O
da	array
[	O
k	int
++	O
]	O
=	O
cmp	int
>	O
0	int
;	O
}	O
n	int
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
da	array
[	O
k	int
-	O
1	int
]	O
]	O
=	O
table	union
->	O
rb_alloc	pointer
->	O
alloc	pointer
(	O
sizeof	O
*	O
n	int
,	O
table	union
->	O
rb_param	pointer
)	O
;	O
if	O
(	O
n	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
n	int
->	O
rb_data	pointer
=	O
item	pointer
;	O
n	int
->	O
rb_link	array
[	O
0	int
]	O
=	O
n	int
->	O
rb_link	array
[	O
1	int
]	O
=	O
NULL	O
;	O
n	int
->	O
rb_color	char
=	O
RB_RED	int
;	O
table	union
->	O
rb_count	long
++	O
;	O
table	union
->	O
rb_generation	long
++	O
;	O
while	O
(	O
k	int
>=	O
3	int
&&	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_color	char
==	O
RB_RED	int
)	O
{	O
if	O
(	O
da	array
[	O
k	int
-	O
2	int
]	O
==	O
0	int
)	O
{	O
rb_node	pointer
*	O
y	double
=	O
pa	array
[	O
k	int
-	O
2	int
]	O
->	O
rb_link	array
[	O
1	int
]	O
;	O
if	O
(	O
y	double
!=	O
NULL	O
&&	O
y	double
->	O
rb_color	char
==	O
RB_RED	int
)	O
{	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_color	char
=	O
y	double
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
pa	array
[	O
k	int
-	O
2	int
]	O
->	O
rb_color	char
=	O
RB_RED	int
;	O
k	int
-=	O
2	int
;	O
}	O
else	O
{	O
rb_node	pointer
*	O
x	double
;	O
if	O
(	O
da	array
[	O
k	int
-	O
1	int
]	O
==	O
0	int
)	O
y	double
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
;	O
else	O
{	O
x	double
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
;	O
y	double
=	O
x	double
->	O
rb_link	array
[	O
1	int
]	O
;	O
x	double
->	O
rb_link	array
[	O
1	int
]	O
=	O
y	double
->	O
rb_link	array
[	O
0	int
]	O
;	O
y	double
->	O
rb_link	array
[	O
0	int
]	O
=	O
x	double
;	O
pa	array
[	O
k	int
-	O
2	int
]	O
->	O
rb_link	array
[	O
0	int
]	O
=	O
y	double
;	O
}	O
x	double
=	O
pa	array
[	O
k	int
-	O
2	int
]	O
;	O
x	double
->	O
rb_color	char
=	O
RB_RED	int
;	O
y	double
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
x	double
->	O
rb_link	array
[	O
0	int
]	O
=	O
y	double
->	O
rb_link	array
[	O
1	int
]	O
;	O
y	double
->	O
rb_link	array
[	O
1	int
]	O
=	O
x	double
;	O
pa	array
[	O
k	int
-	O
3	int
]	O
->	O
rb_link	array
[	O
da	array
[	O
k	int
-	O
3	int
]	O
]	O
=	O
y	double
;	O
break	O
;	O
}	O
}	O
else	O
{	O
rb_node	pointer
*	O
y	double
=	O
pa	array
[	O
k	int
-	O
2	int
]	O
->	O
rb_link	array
[	O
0	int
]	O
;	O
if	O
(	O
y	double
!=	O
NULL	O
&&	O
y	double
->	O
rb_color	char
==	O
RB_RED	int
)	O
{	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_color	char
=	O
y	double
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
pa	array
[	O
k	int
-	O
2	int
]	O
->	O
rb_color	char
=	O
RB_RED	int
;	O
k	int
-=	O
2	int
;	O
}	O
else	O
{	O
rb_node	pointer
*	O
x	double
;	O
if	O
(	O
da	array
[	O
k	int
-	O
1	int
]	O
==	O
1	int
)	O
y	double
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
;	O
else	O
{	O
x	double
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
;	O
y	double
=	O
x	double
->	O
rb_link	array
[	O
0	int
]	O
;	O
x	double
->	O
rb_link	array
[	O
0	int
]	O
=	O
y	double
->	O
rb_link	array
[	O
1	int
]	O
;	O
y	double
->	O
rb_link	array
[	O
1	int
]	O
=	O
x	double
;	O
pa	array
[	O
k	int
-	O
2	int
]	O
->	O
rb_link	array
[	O
1	int
]	O
=	O
y	double
;	O
}	O
x	double
=	O
pa	array
[	O
k	int
-	O
2	int
]	O
;	O
x	double
->	O
rb_color	char
=	O
RB_RED	int
;	O
y	double
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
x	double
->	O
rb_link	array
[	O
1	int
]	O
=	O
y	double
->	O
rb_link	array
[	O
0	int
]	O
;	O
y	double
->	O
rb_link	array
[	O
0	int
]	O
=	O
x	double
;	O
pa	array
[	O
k	int
-	O
3	int
]	O
->	O
rb_link	array
[	O
da	array
[	O
k	int
-	O
3	int
]	O
]	O
=	O
y	double
;	O
break	O
;	O
}	O
}	O
}	O
table	union
->	O
rb_root	pointer
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
return	O
&	O
n	int
->	O
rb_data	pointer
;	O
}	O
static	O
void	O
*	O
rb_insert	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
vtable	pointer
)	O
{	O
void	O
*	O
*	O
p	pointer
=	O
rb_probe	function
(	O
item	pointer
,	O
vtable	pointer
)	O
;	O
return	O
p	pointer
==	O
NULL	O
||	O
*	O
p	pointer
==	O
item	pointer
?	O
NULL	O
:	O
*	O
p	pointer
;	O
}	O
static	O
void	O
*	O
rb_find	function
(	O
const	O
void	O
*	O
item	pointer
,	O
const	O
void	O
*	O
vtable	pointer
)	O
{	O
const	O
rb_table	pointer
*	O
table	union
=	O
(	O
const	O
rb_table	pointer
*	O
)	O
vtable	pointer
;	O
const	O
rb_node	pointer
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
table	union
->	O
rb_root	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
)	O
{	O
int	O
cmp	int
=	O
table	union
->	O
rb_compare	pointer
(	O
item	pointer
,	O
p	pointer
->	O
rb_data	pointer
,	O
table	union
->	O
rb_param	pointer
)	O
;	O
if	O
(	O
cmp	int
<	O
0	int
)	O
p	pointer
=	O
p	pointer
->	O
rb_link	array
[	O
0	int
]	O
;	O
else	O
if	O
(	O
cmp	int
>	O
0	int
)	O
p	pointer
=	O
p	pointer
->	O
rb_link	array
[	O
1	int
]	O
;	O
else	O
return	O
p	pointer
->	O
rb_data	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_remove	function
(	O
const	O
void	O
*	O
item	pointer
,	O
void	O
*	O
vtable	pointer
)	O
{	O
rb_table	pointer
*	O
table	union
=	O
(	O
rb_table	pointer
*	O
)	O
vtable	pointer
;	O
rb_node	pointer
*	O
pa	array
[	O
RB_MAX_HEIGHT	O
]	O
;	O
unsigned	O
char	O
da	array
[	O
RB_MAX_HEIGHT	O
]	O
;	O
int	O
k	int
;	O
rb_node	pointer
*	O
p	pointer
;	O
int	O
cmp	int
;	O
k	int
=	O
0	int
;	O
p	pointer
=	O
(	O
rb_node	pointer
*	O
)	O
&	O
table	union
->	O
rb_root	pointer
;	O
for	O
(	O
cmp	int
=	O
-	O
1	int
;	O
cmp	int
!=	O
0	int
;	O
cmp	int
=	O
table	union
->	O
rb_compare	pointer
(	O
item	pointer
,	O
p	pointer
->	O
rb_data	pointer
,	O
table	union
->	O
rb_param	pointer
)	O
)	O
{	O
int	O
dir	int
=	O
cmp	int
>	O
0	int
;	O
pa	array
[	O
k	int
]	O
=	O
p	pointer
;	O
da	array
[	O
k	int
++	O
]	O
=	O
dir	int
;	O
p	pointer
=	O
p	pointer
->	O
rb_link	array
[	O
dir	int
]	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
item	pointer
=	O
p	pointer
->	O
rb_data	pointer
;	O
if	O
(	O
p	pointer
->	O
rb_link	array
[	O
1	int
]	O
==	O
NULL	O
)	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
da	array
[	O
k	int
-	O
1	int
]	O
]	O
=	O
p	pointer
->	O
rb_link	array
[	O
0	int
]	O
;	O
else	O
{	O
enum	O
rb_color	char
t	enum
;	O
rb_node	pointer
*	O
r	pointer
=	O
p	pointer
->	O
rb_link	array
[	O
1	int
]	O
;	O
if	O
(	O
r	pointer
->	O
rb_link	array
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
r	pointer
->	O
rb_link	array
[	O
0	int
]	O
=	O
p	pointer
->	O
rb_link	array
[	O
0	int
]	O
;	O
t	enum
=	O
r	pointer
->	O
rb_color	char
;	O
r	pointer
->	O
rb_color	char
=	O
p	pointer
->	O
rb_color	char
;	O
p	pointer
->	O
rb_color	char
=	O
t	enum
;	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
da	array
[	O
k	int
-	O
1	int
]	O
]	O
=	O
r	pointer
;	O
da	array
[	O
k	int
]	O
=	O
1	int
;	O
pa	array
[	O
k	int
++	O
]	O
=	O
r	pointer
;	O
}	O
else	O
{	O
rb_node	pointer
*	O
s	pointer
;	O
int	O
j	int
=	O
k	int
++	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
da	array
[	O
k	int
]	O
=	O
0	int
;	O
pa	array
[	O
k	int
++	O
]	O
=	O
r	pointer
;	O
s	pointer
=	O
r	pointer
->	O
rb_link	array
[	O
0	int
]	O
;	O
if	O
(	O
s	pointer
->	O
rb_link	array
[	O
0	int
]	O
==	O
NULL	O
)	O
break	O
;	O
r	pointer
=	O
s	pointer
;	O
}	O
da	array
[	O
j	int
]	O
=	O
1	int
;	O
pa	array
[	O
j	int
]	O
=	O
s	pointer
;	O
pa	array
[	O
j	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
da	array
[	O
j	int
-	O
1	int
]	O
]	O
=	O
s	pointer
;	O
s	pointer
->	O
rb_link	array
[	O
0	int
]	O
=	O
p	pointer
->	O
rb_link	array
[	O
0	int
]	O
;	O
r	pointer
->	O
rb_link	array
[	O
0	int
]	O
=	O
s	pointer
->	O
rb_link	array
[	O
1	int
]	O
;	O
s	pointer
->	O
rb_link	array
[	O
1	int
]	O
=	O
p	pointer
->	O
rb_link	array
[	O
1	int
]	O
;	O
t	enum
=	O
s	pointer
->	O
rb_color	char
;	O
s	pointer
->	O
rb_color	char
=	O
p	pointer
->	O
rb_color	char
;	O
p	pointer
->	O
rb_color	char
=	O
t	enum
;	O
}	O
}	O
if	O
(	O
p	pointer
->	O
rb_color	char
==	O
RB_BLACK	int
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
rb_node	pointer
*	O
x	double
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
da	array
[	O
k	int
-	O
1	int
]	O
]	O
;	O
if	O
(	O
x	double
!=	O
NULL	O
&&	O
x	double
->	O
rb_color	char
==	O
RB_RED	int
)	O
{	O
x	double
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
break	O
;	O
}	O
if	O
(	O
k	int
<	O
2	int
)	O
break	O
;	O
if	O
(	O
da	array
[	O
k	int
-	O
1	int
]	O
==	O
0	int
)	O
{	O
rb_node	pointer
*	O
w	pointer
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
1	int
]	O
;	O
if	O
(	O
w	pointer
->	O
rb_color	char
==	O
RB_RED	int
)	O
{	O
w	pointer
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_color	char
=	O
RB_RED	int
;	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
1	int
]	O
=	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
;	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
;	O
pa	array
[	O
k	int
-	O
2	int
]	O
->	O
rb_link	array
[	O
da	array
[	O
k	int
-	O
2	int
]	O
]	O
=	O
w	pointer
;	O
pa	array
[	O
k	int
]	O
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
;	O
da	array
[	O
k	int
]	O
=	O
0	int
;	O
pa	array
[	O
k	int
-	O
1	int
]	O
=	O
w	pointer
;	O
k	int
++	O
;	O
w	pointer
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
1	int
]	O
;	O
}	O
if	O
(	O
(	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
==	O
NULL	O
||	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
->	O
rb_color	char
==	O
RB_BLACK	int
)	O
&&	O
(	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
==	O
NULL	O
||	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
->	O
rb_color	char
==	O
RB_BLACK	int
)	O
)	O
w	pointer
->	O
rb_color	char
=	O
RB_RED	int
;	O
else	O
{	O
if	O
(	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
==	O
NULL	O
||	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
->	O
rb_color	char
==	O
RB_BLACK	int
)	O
{	O
rb_node	pointer
*	O
y	double
=	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
;	O
y	double
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
w	pointer
->	O
rb_color	char
=	O
RB_RED	int
;	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
=	O
y	double
->	O
rb_link	array
[	O
1	int
]	O
;	O
y	double
->	O
rb_link	array
[	O
1	int
]	O
=	O
w	pointer
;	O
w	pointer
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
1	int
]	O
=	O
y	double
;	O
}	O
w	pointer
->	O
rb_color	char
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_color	char
;	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
1	int
]	O
=	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
;	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
;	O
pa	array
[	O
k	int
-	O
2	int
]	O
->	O
rb_link	array
[	O
da	array
[	O
k	int
-	O
2	int
]	O
]	O
=	O
w	pointer
;	O
break	O
;	O
}	O
}	O
else	O
{	O
rb_node	pointer
*	O
w	pointer
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
0	int
]	O
;	O
if	O
(	O
w	pointer
->	O
rb_color	char
==	O
RB_RED	int
)	O
{	O
w	pointer
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_color	char
=	O
RB_RED	int
;	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
0	int
]	O
=	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
;	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
;	O
pa	array
[	O
k	int
-	O
2	int
]	O
->	O
rb_link	array
[	O
da	array
[	O
k	int
-	O
2	int
]	O
]	O
=	O
w	pointer
;	O
pa	array
[	O
k	int
]	O
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
;	O
da	array
[	O
k	int
]	O
=	O
1	int
;	O
pa	array
[	O
k	int
-	O
1	int
]	O
=	O
w	pointer
;	O
k	int
++	O
;	O
w	pointer
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
0	int
]	O
;	O
}	O
if	O
(	O
(	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
==	O
NULL	O
||	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
->	O
rb_color	char
==	O
RB_BLACK	int
)	O
&&	O
(	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
==	O
NULL	O
||	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
->	O
rb_color	char
==	O
RB_BLACK	int
)	O
)	O
w	pointer
->	O
rb_color	char
=	O
RB_RED	int
;	O
else	O
{	O
if	O
(	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
==	O
NULL	O
||	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
->	O
rb_color	char
==	O
RB_BLACK	int
)	O
{	O
rb_node	pointer
*	O
y	double
=	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
;	O
y	double
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
w	pointer
->	O
rb_color	char
=	O
RB_RED	int
;	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
=	O
y	double
->	O
rb_link	array
[	O
0	int
]	O
;	O
y	double
->	O
rb_link	array
[	O
0	int
]	O
=	O
w	pointer
;	O
w	pointer
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
0	int
]	O
=	O
y	double
;	O
}	O
w	pointer
->	O
rb_color	char
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_color	char
;	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
w	pointer
->	O
rb_link	array
[	O
0	int
]	O
->	O
rb_color	char
=	O
RB_BLACK	int
;	O
pa	array
[	O
k	int
-	O
1	int
]	O
->	O
rb_link	array
[	O
0	int
]	O
=	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
;	O
w	pointer
->	O
rb_link	array
[	O
1	int
]	O
=	O
pa	array
[	O
k	int
-	O
1	int
]	O
;	O
pa	array
[	O
k	int
-	O
2	int
]	O
->	O
rb_link	array
[	O
da	array
[	O
k	int
-	O
2	int
]	O
]	O
=	O
w	pointer
;	O
break	O
;	O
}	O
}	O
k	int
--	O
;	O
}	O
}	O
table	union
->	O
rb_alloc	pointer
->	O
free	function
(	O
p	pointer
,	O
table	union
->	O
rb_param	pointer
)	O
;	O
table	union
->	O
rb_count	long
--	O
;	O
table	union
->	O
rb_generation	long
++	O
;	O
return	O
(	O
void	O
*	O
)	O
item	pointer
;	O
}	O
static	O
int	O
rb_t_init	function
(	O
void	O
*	O
vtrav	pointer
,	O
const	O
void	O
*	O
vtable	pointer
)	O
{	O
rb_traverser	struct
*	O
trav	pointer
=	O
(	O
rb_traverser	struct
*	O
)	O
vtrav	pointer
;	O
const	O
rb_table	pointer
*	O
table	union
=	O
(	O
const	O
rb_table	pointer
*	O
)	O
vtable	pointer
;	O
trav	pointer
->	O
rb_table	pointer
=	O
table	union
;	O
trav	pointer
->	O
rb_node	pointer
=	O
NULL	O
;	O
trav	pointer
->	O
rb_height	long
=	O
0	int
;	O
trav	pointer
->	O
rb_generation	long
=	O
table	union
->	O
rb_generation	long
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
*	O
rb_t_first	function
(	O
void	O
*	O
vtrav	pointer
,	O
const	O
void	O
*	O
vtable	pointer
)	O
{	O
const	O
rb_table	pointer
*	O
table	union
=	O
(	O
const	O
rb_table	pointer
*	O
)	O
vtable	pointer
;	O
rb_traverser	struct
*	O
trav	pointer
=	O
(	O
rb_traverser	struct
*	O
)	O
vtrav	pointer
;	O
rb_node	pointer
*	O
x	double
;	O
trav	pointer
->	O
rb_table	pointer
=	O
table	union
;	O
trav	pointer
->	O
rb_height	long
=	O
0	int
;	O
trav	pointer
->	O
rb_generation	long
=	O
table	union
->	O
rb_generation	long
;	O
x	double
=	O
table	union
->	O
rb_root	pointer
;	O
if	O
(	O
x	double
!=	O
NULL	O
)	O
{	O
while	O
(	O
x	double
->	O
rb_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
rb_height	long
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	pointer
,	O
GSL_ETABLE	int
)	O
;	O
}	O
trav	pointer
->	O
rb_stack	array
[	O
trav	pointer
->	O
rb_height	long
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	array
[	O
0	int
]	O
;	O
}	O
}	O
trav	pointer
->	O
rb_node	pointer
=	O
x	double
;	O
return	O
x	double
!=	O
NULL	O
?	O
x	double
->	O
rb_data	pointer
:	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_t_last	function
(	O
void	O
*	O
vtrav	pointer
,	O
const	O
void	O
*	O
vtable	pointer
)	O
{	O
const	O
rb_table	pointer
*	O
table	union
=	O
(	O
const	O
rb_table	pointer
*	O
)	O
vtable	pointer
;	O
rb_traverser	struct
*	O
trav	pointer
=	O
(	O
rb_traverser	struct
*	O
)	O
vtrav	pointer
;	O
rb_node	pointer
*	O
x	double
;	O
trav	pointer
->	O
rb_table	pointer
=	O
table	union
;	O
trav	pointer
->	O
rb_height	long
=	O
0	int
;	O
trav	pointer
->	O
rb_generation	long
=	O
table	union
->	O
rb_generation	long
;	O
x	double
=	O
table	union
->	O
rb_root	pointer
;	O
if	O
(	O
x	double
!=	O
NULL	O
)	O
{	O
while	O
(	O
x	double
->	O
rb_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
rb_height	long
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	pointer
,	O
GSL_ETABLE	int
)	O
;	O
}	O
trav	pointer
->	O
rb_stack	array
[	O
trav	pointer
->	O
rb_height	long
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	array
[	O
1	int
]	O
;	O
}	O
}	O
trav	pointer
->	O
rb_node	pointer
=	O
x	double
;	O
return	O
x	double
!=	O
NULL	O
?	O
x	double
->	O
rb_data	pointer
:	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_t_find	function
(	O
const	O
void	O
*	O
item	pointer
,	O
void	O
*	O
vtrav	pointer
,	O
const	O
void	O
*	O
vtable	pointer
)	O
{	O
const	O
rb_table	pointer
*	O
table	union
=	O
(	O
const	O
rb_table	pointer
*	O
)	O
vtable	pointer
;	O
rb_traverser	struct
*	O
trav	pointer
=	O
(	O
rb_traverser	struct
*	O
)	O
vtrav	pointer
;	O
rb_node	pointer
*	O
p	pointer
,	O
*	O
q	pointer
;	O
trav	pointer
->	O
rb_table	pointer
=	O
table	union
;	O
trav	pointer
->	O
rb_height	long
=	O
0	int
;	O
trav	pointer
->	O
rb_generation	long
=	O
table	union
->	O
rb_generation	long
;	O
for	O
(	O
p	pointer
=	O
table	union
->	O
rb_root	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
q	pointer
)	O
{	O
int	O
cmp	int
=	O
table	union
->	O
rb_compare	pointer
(	O
item	pointer
,	O
p	pointer
->	O
rb_data	pointer
,	O
table	union
->	O
rb_param	pointer
)	O
;	O
if	O
(	O
cmp	int
<	O
0	int
)	O
q	pointer
=	O
p	pointer
->	O
rb_link	array
[	O
0	int
]	O
;	O
else	O
if	O
(	O
cmp	int
>	O
0	int
)	O
q	pointer
=	O
p	pointer
->	O
rb_link	array
[	O
1	int
]	O
;	O
else	O
{	O
trav	pointer
->	O
rb_node	pointer
=	O
p	pointer
;	O
return	O
p	pointer
->	O
rb_data	pointer
;	O
}	O
if	O
(	O
trav	pointer
->	O
rb_height	long
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	pointer
,	O
GSL_ETABLE	int
)	O
;	O
}	O
trav	pointer
->	O
rb_stack	array
[	O
trav	pointer
->	O
rb_height	long
++	O
]	O
=	O
p	pointer
;	O
}	O
trav	pointer
->	O
rb_height	long
=	O
0	int
;	O
trav	pointer
->	O
rb_node	pointer
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_t_insert	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
vtrav	pointer
,	O
void	O
*	O
vtable	pointer
)	O
{	O
rb_table	pointer
*	O
table	union
=	O
(	O
rb_table	pointer
*	O
)	O
vtable	pointer
;	O
rb_traverser	struct
*	O
trav	pointer
=	O
(	O
rb_traverser	struct
*	O
)	O
vtrav	pointer
;	O
void	O
*	O
*	O
p	pointer
;	O
p	pointer
=	O
rb_probe	function
(	O
item	pointer
,	O
table	union
)	O
;	O
if	O
(	O
p	pointer
!=	O
NULL	O
)	O
{	O
trav	pointer
->	O
rb_table	pointer
=	O
table	union
;	O
trav	pointer
->	O
rb_node	pointer
=	O
(	O
(	O
rb_node	pointer
*	O
)	O
(	O
(	O
char	O
*	O
)	O
p	pointer
-	O
offsetof	O
(	O
rb_node	pointer
,	O
rb_data	pointer
)	O
)	O
)	O
;	O
trav	pointer
->	O
rb_generation	long
=	O
table	union
->	O
rb_generation	long
-	O
1	int
;	O
return	O
*	O
p	pointer
;	O
}	O
else	O
{	O
rb_t_init	function
(	O
vtrav	pointer
,	O
vtable	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
static	O
void	O
*	O
rb_t_copy	function
(	O
void	O
*	O
vtrav	pointer
,	O
const	O
void	O
*	O
vsrc	pointer
)	O
{	O
const	O
rb_traverser	struct
*	O
src	pointer
=	O
(	O
const	O
rb_traverser	struct
*	O
)	O
vsrc	pointer
;	O
rb_traverser	struct
*	O
trav	pointer
=	O
(	O
rb_traverser	struct
*	O
)	O
vtrav	pointer
;	O
if	O
(	O
trav	pointer
!=	O
src	pointer
)	O
{	O
trav	pointer
->	O
rb_table	pointer
=	O
src	pointer
->	O
rb_table	pointer
;	O
trav	pointer
->	O
rb_node	pointer
=	O
src	pointer
->	O
rb_node	pointer
;	O
trav	pointer
->	O
rb_generation	long
=	O
src	pointer
->	O
rb_generation	long
;	O
if	O
(	O
trav	pointer
->	O
rb_generation	long
==	O
trav	pointer
->	O
rb_table	pointer
->	O
rb_generation	long
)	O
{	O
trav	pointer
->	O
rb_height	long
=	O
src	pointer
->	O
rb_height	long
;	O
memcpy	function
(	O
trav	pointer
->	O
rb_stack	array
,	O
(	O
const	O
void	O
*	O
)	O
src	pointer
->	O
rb_stack	array
,	O
sizeof	O
*	O
trav	pointer
->	O
rb_stack	array
*	O
trav	pointer
->	O
rb_height	long
)	O
;	O
}	O
}	O
return	O
trav	pointer
->	O
rb_node	pointer
!=	O
NULL	O
?	O
trav	pointer
->	O
rb_node	pointer
->	O
rb_data	pointer
:	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_t_next	function
(	O
void	O
*	O
vtrav	pointer
)	O
{	O
rb_traverser	struct
*	O
trav	pointer
=	O
(	O
rb_traverser	struct
*	O
)	O
vtrav	pointer
;	O
rb_node	pointer
*	O
x	double
;	O
if	O
(	O
trav	pointer
->	O
rb_generation	long
!=	O
trav	pointer
->	O
rb_table	pointer
->	O
rb_generation	long
)	O
rb_trav_refresh	function
(	O
trav	pointer
)	O
;	O
x	double
=	O
trav	pointer
->	O
rb_node	pointer
;	O
if	O
(	O
x	double
==	O
NULL	O
)	O
{	O
return	O
rb_t_first	function
(	O
vtrav	pointer
,	O
trav	pointer
->	O
rb_table	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
->	O
rb_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
rb_height	long
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	pointer
,	O
GSL_ETABLE	int
)	O
;	O
}	O
trav	pointer
->	O
rb_stack	array
[	O
trav	pointer
->	O
rb_height	long
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	array
[	O
1	int
]	O
;	O
while	O
(	O
x	double
->	O
rb_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
rb_height	long
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	pointer
,	O
GSL_ETABLE	int
)	O
;	O
}	O
trav	pointer
->	O
rb_stack	array
[	O
trav	pointer
->	O
rb_height	long
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	array
[	O
0	int
]	O
;	O
}	O
}	O
else	O
{	O
rb_node	pointer
*	O
y	double
;	O
do	O
{	O
if	O
(	O
trav	pointer
->	O
rb_height	long
==	O
0	int
)	O
{	O
trav	pointer
->	O
rb_node	pointer
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
y	double
=	O
x	double
;	O
x	double
=	O
trav	pointer
->	O
rb_stack	array
[	O
--	O
trav	pointer
->	O
rb_height	long
]	O
;	O
}	O
while	O
(	O
y	double
==	O
x	double
->	O
rb_link	array
[	O
1	int
]	O
)	O
;	O
}	O
trav	pointer
->	O
rb_node	pointer
=	O
x	double
;	O
return	O
x	double
->	O
rb_data	pointer
;	O
}	O
static	O
void	O
*	O
rb_t_prev	function
(	O
void	O
*	O
vtrav	pointer
)	O
{	O
rb_traverser	struct
*	O
trav	pointer
=	O
(	O
rb_traverser	struct
*	O
)	O
vtrav	pointer
;	O
rb_node	pointer
*	O
x	double
;	O
if	O
(	O
trav	pointer
->	O
rb_generation	long
!=	O
trav	pointer
->	O
rb_table	pointer
->	O
rb_generation	long
)	O
rb_trav_refresh	function
(	O
trav	pointer
)	O
;	O
x	double
=	O
trav	pointer
->	O
rb_node	pointer
;	O
if	O
(	O
x	double
==	O
NULL	O
)	O
{	O
return	O
rb_t_last	function
(	O
vtrav	pointer
,	O
trav	pointer
->	O
rb_table	pointer
)	O
;	O
}	O
else	O
if	O
(	O
x	double
->	O
rb_link	array
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
rb_height	long
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	pointer
,	O
GSL_ETABLE	int
)	O
;	O
}	O
trav	pointer
->	O
rb_stack	array
[	O
trav	pointer
->	O
rb_height	long
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	array
[	O
0	int
]	O
;	O
while	O
(	O
x	double
->	O
rb_link	array
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
rb_height	long
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	pointer
,	O
GSL_ETABLE	int
)	O
;	O
}	O
trav	pointer
->	O
rb_stack	array
[	O
trav	pointer
->	O
rb_height	long
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	array
[	O
1	int
]	O
;	O
}	O
}	O
else	O
{	O
rb_node	pointer
*	O
y	double
;	O
do	O
{	O
if	O
(	O
trav	pointer
->	O
rb_height	long
==	O
0	int
)	O
{	O
trav	pointer
->	O
rb_node	pointer
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
y	double
=	O
x	double
;	O
x	double
=	O
trav	pointer
->	O
rb_stack	array
[	O
--	O
trav	pointer
->	O
rb_height	long
]	O
;	O
}	O
while	O
(	O
y	double
==	O
x	double
->	O
rb_link	array
[	O
0	int
]	O
)	O
;	O
}	O
trav	pointer
->	O
rb_node	pointer
=	O
x	double
;	O
return	O
x	double
->	O
rb_data	pointer
;	O
}	O
static	O
void	O
*	O
rb_t_cur	function
(	O
const	O
void	O
*	O
vtrav	pointer
)	O
{	O
const	O
rb_traverser	struct
*	O
trav	pointer
=	O
(	O
const	O
rb_traverser	struct
*	O
)	O
vtrav	pointer
;	O
return	O
trav	pointer
->	O
rb_node	pointer
!=	O
NULL	O
?	O
trav	pointer
->	O
rb_node	pointer
->	O
rb_data	pointer
:	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_t_replace	function
(	O
void	O
*	O
vtrav	pointer
,	O
void	O
*	O
new_item	pointer
)	O
{	O
rb_traverser	struct
*	O
trav	pointer
=	O
(	O
rb_traverser	struct
*	O
)	O
vtrav	pointer
;	O
void	O
*	O
old	pointer
;	O
old	pointer
=	O
trav	pointer
->	O
rb_node	pointer
->	O
rb_data	pointer
;	O
trav	pointer
->	O
rb_node	pointer
->	O
rb_data	pointer
=	O
new_item	pointer
;	O
return	O
old	pointer
;	O
}	O
static	O
void	O
rb_trav_refresh	function
(	O
rb_traverser	struct
*	O
trav	pointer
)	O
{	O
trav	pointer
->	O
rb_generation	long
=	O
trav	pointer
->	O
rb_table	pointer
->	O
rb_generation	long
;	O
if	O
(	O
trav	pointer
->	O
rb_node	pointer
!=	O
NULL	O
)	O
{	O
gsl_bst_cmp_function	function
*	O
cmp	int
=	O
trav	pointer
->	O
rb_table	pointer
->	O
rb_compare	pointer
;	O
void	O
*	O
param	pointer
=	O
trav	pointer
->	O
rb_table	pointer
->	O
rb_param	pointer
;	O
rb_node	pointer
*	O
node	pointer
=	O
trav	pointer
->	O
rb_node	pointer
;	O
rb_node	pointer
*	O
i	pointer
;	O
trav	pointer
->	O
rb_height	long
=	O
0	int
;	O
for	O
(	O
i	pointer
=	O
trav	pointer
->	O
rb_table	pointer
->	O
rb_root	pointer
;	O
i	pointer
!=	O
node	pointer
;	O
)	O
{	O
if	O
(	O
trav	pointer
->	O
rb_height	long
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_VOID	O
(	O
"traverser height exceeds maximum"	pointer
,	O
GSL_ETABLE	int
)	O
;	O
}	O
trav	pointer
->	O
rb_stack	array
[	O
trav	pointer
->	O
rb_height	long
++	O
]	O
=	O
i	pointer
;	O
i	pointer
=	O
i	pointer
->	O
rb_link	array
[	O
cmp	int
(	O
node	pointer
->	O
rb_data	pointer
,	O
i	pointer
->	O
rb_data	pointer
,	O
param	pointer
)	O
>	O
0	int
]	O
;	O
}	O
}	O
}	O
static	O
const	O
gsl_bst_type	struct
rb_tree_type	struct
=	O
{	O
"red-black"	pointer
,	O
sizeof	O
(	O
rb_node	pointer
)	O
,	O
rb_init	function
,	O
rb_nodes	function
,	O
rb_insert	function
,	O
rb_find	function
,	O
rb_remove	function
,	O
rb_empty	function
,	O
rb_t_init	function
,	O
rb_t_first	function
,	O
rb_t_last	function
,	O
rb_t_find	function
,	O
rb_t_insert	function
,	O
rb_t_copy	function
,	O
rb_t_next	function
,	O
rb_t_prev	function
,	O
rb_t_cur	function
,	O
rb_t_replace	function
}	O
;	O
const	O
gsl_bst_type	struct
*	O
gsl_bst_rb	pointer
=	O
&	O
rb_tree_type	struct
;	O
