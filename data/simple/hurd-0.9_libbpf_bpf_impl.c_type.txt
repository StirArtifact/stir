static	O
struct	O
net_hash_header	O
filter_hash_header	struct
[	O
N_NET_HASH	O
]	O
;	O
int	O
bpf_do_filter	function
(	O
net_rcv_port_t	O
infp	int
,	O
char	O
*	O
p	pointer
,	O
unsigned	O
int	O
wirelen	int
,	O
char	O
*	O
header	pointer
,	O
unsigned	O
int	O
hlen	int
,	O
net_hash_entry_t	O
*	O
*	O
hash_headpp	pointer
,	O
net_hash_entry_t	O
*	O
entpp	pointer
)	O
{	O
register	O
bpf_insn_t	O
pc	int
,	O
pc_end	O
;	O
register	O
unsigned	O
int	O
buflen	int
;	O
register	O
unsigned	O
long	O
A	long
,	O
X	long
;	O
register	O
int	O
k	int
;	O
unsigned	O
int	O
mem	int
[	O
BPF_MEMWORDS	O
]	O
;	O
char	O
*	O
data	pointer
=	O
NULL	O
;	O
pc	int
=	O
(	O
(	O
bpf_insn_t	O
)	O
infp	int
->	O
filter	pointer
)	O
+	O
1	int
;	O
pc_end	O
=	O
(	O
bpf_insn_t	O
)	O
infp	int
->	O
filter_end	O
;	O
buflen	int
=	O
NET_RCV_MAX	O
;	O
*	O
entpp	pointer
=	O
0	int
;	O
A	long
=	O
0	int
;	O
X	long
=	O
0	int
;	O
for	O
(	O
;	O
pc	int
<	O
pc_end	O
;	O
++	O
pc	int
)	O
{	O
switch	O
(	O
pc	int
->	O
code	O
)	O
{	O
default	O
:	O
abort	O
(	O
)	O
;	O
case	O
BPF_RET	O
|	O
BPF_K	O
:	O
if	O
(	O
infp	int
->	O
rcv_port	int
==	O
MACH_PORT_NULL	O
&&	O
*	O
entpp	pointer
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
return	O
(	O
(	O
u_int	int
)	O
pc	int
->	O
k	int
<=	O
wirelen	int
)	O
?	O
pc	int
->	O
k	int
:	O
wirelen	int
;	O
case	O
BPF_RET	O
|	O
BPF_A	O
:	O
if	O
(	O
infp	int
->	O
rcv_port	int
==	O
MACH_PORT_NULL	O
&&	O
*	O
entpp	pointer
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
return	O
(	O
(	O
u_int	int
)	O
A	long
<=	O
wirelen	int
)	O
?	O
A	long
:	O
wirelen	int
;	O
case	O
BPF_RET	O
|	O
BPF_MATCH_IMM	O
:	O
if	O
(	O
bpf_match	function
(	O
(	O
net_hash_header_t	O
)	O
infp	int
,	O
pc	int
->	O
jt	O
,	O
mem	int
,	O
hash_headpp	pointer
,	O
entpp	pointer
)	O
)	O
{	O
return	O
(	O
(	O
u_int	int
)	O
pc	int
->	O
k	int
<=	O
wirelen	int
)	O
?	O
pc	int
->	O
k	int
:	O
wirelen	int
;	O
}	O
return	O
0	int
;	O
case	O
BPF_LD	O
|	O
BPF_W	O
|	O
BPF_ABS	O
:	O
k	int
=	O
pc	int
->	O
k	int
;	O
load_word	O
:	O
if	O
(	O
(	O
u_int	int
)	O
k	int
+	O
sizeof	O
(	O
long	O
)	O
<=	O
hlen	int
)	O
data	pointer
=	O
header	pointer
;	O
else	O
if	O
(	O
(	O
u_int	int
)	O
k	int
+	O
sizeof	O
(	O
long	O
)	O
<=	O
buflen	int
)	O
{	O
k	int
-=	O
hlen	int
;	O
data	pointer
=	O
p	pointer
;	O
}	O
else	O
return	O
0	int
;	O
A	long
=	O
ntohl	function
(	O
*	O
(	O
long	O
*	O
)	O
(	O
data	pointer
+	O
k	int
)	O
)	O
;	O
continue	O
;	O
case	O
BPF_LD	O
|	O
BPF_H	O
|	O
BPF_ABS	O
:	O
k	int
=	O
pc	int
->	O
k	int
;	O
load_half	O
:	O
if	O
(	O
(	O
u_int	int
)	O
k	int
+	O
sizeof	O
(	O
short	O
)	O
<=	O
hlen	int
)	O
data	pointer
=	O
header	pointer
;	O
else	O
if	O
(	O
(	O
u_int	int
)	O
k	int
+	O
sizeof	O
(	O
short	O
)	O
<=	O
buflen	int
)	O
{	O
k	int
-=	O
hlen	int
;	O
data	pointer
=	O
p	pointer
;	O
}	O
else	O
return	O
0	int
;	O
A	long
=	O
EXTRACT_SHORT	function
(	O
&	O
data	pointer
[	O
k	int
]	O
)	O
;	O
continue	O
;	O
case	O
BPF_LD	O
|	O
BPF_B	O
|	O
BPF_ABS	O
:	O
k	int
=	O
pc	int
->	O
k	int
;	O
load_byte	O
:	O
if	O
(	O
(	O
u_int	int
)	O
k	int
<	O
hlen	int
)	O
data	pointer
=	O
header	pointer
;	O
else	O
if	O
(	O
(	O
u_int	int
)	O
k	int
<	O
buflen	int
)	O
{	O
data	pointer
=	O
p	pointer
;	O
k	int
-=	O
hlen	int
;	O
}	O
else	O
return	O
0	int
;	O
A	long
=	O
data	pointer
[	O
k	int
]	O
;	O
continue	O
;	O
case	O
BPF_LD	O
|	O
BPF_W	O
|	O
BPF_LEN	O
:	O
A	long
=	O
wirelen	int
;	O
continue	O
;	O
case	O
BPF_LDX	O
|	O
BPF_W	O
|	O
BPF_LEN	O
:	O
X	long
=	O
wirelen	int
;	O
continue	O
;	O
case	O
BPF_LD	O
|	O
BPF_W	O
|	O
BPF_IND	O
:	O
k	int
=	O
X	long
+	O
pc	int
->	O
k	int
;	O
goto	O
load_word	O
;	O
case	O
BPF_LD	O
|	O
BPF_H	O
|	O
BPF_IND	O
:	O
k	int
=	O
X	long
+	O
pc	int
->	O
k	int
;	O
goto	O
load_half	O
;	O
case	O
BPF_LD	O
|	O
BPF_B	O
|	O
BPF_IND	O
:	O
k	int
=	O
X	long
+	O
pc	int
->	O
k	int
;	O
goto	O
load_byte	O
;	O
case	O
BPF_LDX	O
|	O
BPF_MSH	O
|	O
BPF_B	O
:	O
k	int
=	O
pc	int
->	O
k	int
;	O
if	O
(	O
k	int
<	O
hlen	int
)	O
data	pointer
=	O
header	pointer
;	O
else	O
if	O
(	O
k	int
<	O
buflen	int
)	O
{	O
data	pointer
=	O
p	pointer
;	O
k	int
-=	O
hlen	int
;	O
}	O
else	O
return	O
0	int
;	O
X	long
=	O
(	O
data	pointer
[	O
k	int
]	O
&	O
0xf	int
)	O
<<	O
2	int
;	O
continue	O
;	O
case	O
BPF_LD	O
|	O
BPF_IMM	O
:	O
A	long
=	O
pc	int
->	O
k	int
;	O
continue	O
;	O
case	O
BPF_LDX	O
|	O
BPF_IMM	O
:	O
X	long
=	O
pc	int
->	O
k	int
;	O
continue	O
;	O
case	O
BPF_LD	O
|	O
BPF_MEM	O
:	O
A	long
=	O
mem	int
[	O
pc	int
->	O
k	int
]	O
;	O
continue	O
;	O
case	O
BPF_LDX	O
|	O
BPF_MEM	O
:	O
X	long
=	O
mem	int
[	O
pc	int
->	O
k	int
]	O
;	O
continue	O
;	O
case	O
BPF_ST	O
:	O
mem	int
[	O
pc	int
->	O
k	int
]	O
=	O
A	long
;	O
continue	O
;	O
case	O
BPF_STX	O
:	O
mem	int
[	O
pc	int
->	O
k	int
]	O
=	O
X	long
;	O
continue	O
;	O
case	O
BPF_JMP	O
|	O
BPF_JA	O
:	O
pc	int
+=	O
pc	int
->	O
k	int
;	O
continue	O
;	O
case	O
BPF_JMP	O
|	O
BPF_JGT	O
|	O
BPF_K	O
:	O
pc	int
+=	O
(	O
A	long
>	O
pc	int
->	O
k	int
)	O
?	O
pc	int
->	O
jt	O
:	O
pc	int
->	O
jf	O
;	O
continue	O
;	O
case	O
BPF_JMP	O
|	O
BPF_JGE	O
|	O
BPF_K	O
:	O
pc	int
+=	O
(	O
A	long
>=	O
pc	int
->	O
k	int
)	O
?	O
pc	int
->	O
jt	O
:	O
pc	int
->	O
jf	O
;	O
continue	O
;	O
case	O
BPF_JMP	O
|	O
BPF_JEQ	O
|	O
BPF_K	O
:	O
pc	int
+=	O
(	O
A	long
==	O
pc	int
->	O
k	int
)	O
?	O
pc	int
->	O
jt	O
:	O
pc	int
->	O
jf	O
;	O
continue	O
;	O
case	O
BPF_JMP	O
|	O
BPF_JSET	O
|	O
BPF_K	O
:	O
pc	int
+=	O
(	O
A	long
&	O
pc	int
->	O
k	int
)	O
?	O
pc	int
->	O
jt	O
:	O
pc	int
->	O
jf	O
;	O
continue	O
;	O
case	O
BPF_JMP	O
|	O
BPF_JGT	O
|	O
BPF_X	O
:	O
pc	int
+=	O
(	O
A	long
>	O
X	long
)	O
?	O
pc	int
->	O
jt	O
:	O
pc	int
->	O
jf	O
;	O
continue	O
;	O
case	O
BPF_JMP	O
|	O
BPF_JGE	O
|	O
BPF_X	O
:	O
pc	int
+=	O
(	O
A	long
>=	O
X	long
)	O
?	O
pc	int
->	O
jt	O
:	O
pc	int
->	O
jf	O
;	O
continue	O
;	O
case	O
BPF_JMP	O
|	O
BPF_JEQ	O
|	O
BPF_X	O
:	O
pc	int
+=	O
(	O
A	long
==	O
X	long
)	O
?	O
pc	int
->	O
jt	O
:	O
pc	int
->	O
jf	O
;	O
continue	O
;	O
case	O
BPF_JMP	O
|	O
BPF_JSET	O
|	O
BPF_X	O
:	O
pc	int
+=	O
(	O
A	long
&	O
X	long
)	O
?	O
pc	int
->	O
jt	O
:	O
pc	int
->	O
jf	O
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_ADD	O
|	O
BPF_X	O
:	O
A	long
+=	O
X	long
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_SUB	O
|	O
BPF_X	O
:	O
A	long
-=	O
X	long
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_MUL	O
|	O
BPF_X	O
:	O
A	long
*=	O
X	long
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_DIV	O
|	O
BPF_X	O
:	O
if	O
(	O
X	long
==	O
0	int
)	O
return	O
0	int
;	O
A	long
/=	O
X	long
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_AND	O
|	O
BPF_X	O
:	O
A	long
&=	O
X	long
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_OR	O
|	O
BPF_X	O
:	O
A	long
|=	O
X	long
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_LSH	O
|	O
BPF_X	O
:	O
A	long
<<=	O
X	long
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_RSH	O
|	O
BPF_X	O
:	O
A	long
>>=	O
X	long
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_ADD	O
|	O
BPF_K	O
:	O
A	long
+=	O
pc	int
->	O
k	int
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_SUB	O
|	O
BPF_K	O
:	O
A	long
-=	O
pc	int
->	O
k	int
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_MUL	O
|	O
BPF_K	O
:	O
A	long
*=	O
pc	int
->	O
k	int
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_DIV	O
|	O
BPF_K	O
:	O
A	long
/=	O
pc	int
->	O
k	int
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_AND	O
|	O
BPF_K	O
:	O
A	long
&=	O
pc	int
->	O
k	int
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_OR	O
|	O
BPF_K	O
:	O
A	long
|=	O
pc	int
->	O
k	int
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_LSH	O
|	O
BPF_K	O
:	O
A	long
<<=	O
pc	int
->	O
k	int
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_RSH	O
|	O
BPF_K	O
:	O
A	long
>>=	O
pc	int
->	O
k	int
;	O
continue	O
;	O
case	O
BPF_ALU	O
|	O
BPF_NEG	O
:	O
A	long
=	O
-	O
A	long
;	O
continue	O
;	O
case	O
BPF_MISC	O
|	O
BPF_TAX	O
:	O
X	long
=	O
A	long
;	O
continue	O
;	O
case	O
BPF_MISC	O
|	O
BPF_TXA	O
:	O
A	long
=	O
X	long
;	O
continue	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
bpf_validate	function
(	O
bpf_insn_t	O
f	int
,	O
int	O
bytes	int
,	O
bpf_insn_t	O
*	O
match	pointer
)	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
len	int
;	O
register	O
bpf_insn_t	O
p	pointer
;	O
len	int
=	O
BPF_BYTES2LEN	function
(	O
bytes	int
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
len	int
;	O
++	O
i	int
)	O
{	O
p	pointer
=	O
&	O
f	int
[	O
i	int
]	O
;	O
if	O
(	O
BPF_CLASS	function
(	O
p	pointer
->	O
code	O
)	O
==	O
BPF_JMP	O
)	O
{	O
register	O
int	O
from	int
=	O
i	int
+	O
1	int
;	O
if	O
(	O
BPF_OP	function
(	O
p	pointer
->	O
code	O
)	O
==	O
BPF_JA	O
)	O
{	O
if	O
(	O
from	int
+	O
p	pointer
->	O
k	int
>=	O
len	int
)	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
from	int
+	O
p	pointer
->	O
jt	O
>=	O
len	int
||	O
from	int
+	O
p	pointer
->	O
jf	O
>=	O
len	int
)	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
BPF_CLASS	function
(	O
p	pointer
->	O
code	O
)	O
==	O
BPF_ST	O
||	O
(	O
BPF_CLASS	function
(	O
p	pointer
->	O
code	O
)	O
==	O
BPF_LD	O
&&	O
(	O
p	pointer
->	O
code	O
&	O
0xe0	int
)	O
==	O
BPF_MEM	O
)	O
)	O
&&	O
(	O
p	pointer
->	O
k	int
>=	O
BPF_MEMWORDS	O
||	O
p	pointer
->	O
k	int
<	O
0	int
)	O
)	O
{	O
return	O
0	int
;	O
}	O
if	O
(	O
p	pointer
->	O
code	O
==	O
(	O
BPF_ALU	O
|	O
BPF_DIV	O
|	O
BPF_K	O
)	O
&&	O
p	pointer
->	O
k	int
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
if	O
(	O
p	pointer
->	O
code	O
==	O
(	O
BPF_RET	O
|	O
BPF_MATCH_IMM	O
)	O
)	O
{	O
if	O
(	O
*	O
match	pointer
!=	O
0	int
||	O
p	pointer
->	O
jt	O
==	O
0	int
||	O
p	pointer
->	O
jt	O
>	O
N_NET_HASH_KEYS	O
)	O
return	O
0	int
;	O
i	int
+=	O
p	pointer
->	O
jt	O
;	O
if	O
(	O
i	int
+	O
1	int
>	O
len	int
)	O
return	O
0	int
;	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<=	O
p	pointer
->	O
jt	O
;	O
j	int
++	O
)	O
{	O
if	O
(	O
p	pointer
[	O
j	int
]	O
.	O
code	O
!=	O
(	O
BPF_MISC	O
|	O
BPF_KEY	O
)	O
)	O
return	O
0	int
;	O
}	O
*	O
match	pointer
=	O
p	pointer
;	O
}	O
}	O
if	O
(	O
BPF_CLASS	function
(	O
f	int
[	O
len	int
-	O
1	int
]	O
.	O
code	O
)	O
==	O
BPF_RET	O
)	O
return	O
(	O
(	O
*	O
match	pointer
==	O
0	int
)	O
?	O
1	int
:	O
2	int
)	O
;	O
else	O
return	O
0	int
;	O
}	O
int	O
bpf_eq	function
(	O
bpf_insn_t	O
f1	int
,	O
bpf_insn_t	O
f2	int
,	O
int	O
bytes	int
)	O
{	O
register	O
int	O
count	int
;	O
count	int
=	O
BPF_BYTES2LEN	function
(	O
bytes	int
)	O
;	O
for	O
(	O
;	O
count	int
--	O
;	O
f1	int
++	O
,	O
f2	int
++	O
)	O
{	O
if	O
(	O
!	O
BPF_INSN_EQ	function
(	O
f1	int
,	O
f2	int
)	O
)	O
{	O
if	O
(	O
f1	int
->	O
code	O
==	O
(	O
BPF_MISC	O
|	O
BPF_KEY	O
)	O
&&	O
f2	int
->	O
code	O
==	O
(	O
BPF_MISC	O
|	O
BPF_KEY	O
)	O
)	O
continue	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
;	O
return	O
TRUE	O
;	O
}	O
unsigned	O
int	O
bpf_hash	function
(	O
int	O
n	int
,	O
unsigned	O
int	O
*	O
keys	pointer
)	O
{	O
register	O
unsigned	O
int	O
hval	int
=	O
0	int
;	O
while	O
(	O
n	int
--	O
)	O
{	O
hval	int
+=	O
*	O
keys	pointer
++	O
;	O
}	O
return	O
(	O
hval	int
%	O
NET_HASH_SIZE	O
)	O
;	O
}	O
int	O
bpf_match	function
(	O
net_hash_header_t	O
hash	int
,	O
int	O
n_keys	int
,	O
unsigned	O
int	O
*	O
keys	pointer
,	O
net_hash_entry_t	O
*	O
*	O
hash_headpp	pointer
,	O
net_hash_entry_t	O
*	O
entpp	pointer
)	O
{	O
register	O
net_hash_entry_t	O
head	int
,	O
entp	int
;	O
register	O
int	O
i	int
;	O
if	O
(	O
n_keys	int
!=	O
hash	int
->	O
n_keys	int
)	O
return	O
FALSE	O
;	O
*	O
hash_headpp	pointer
=	O
&	O
hash	int
->	O
table	O
[	O
bpf_hash	function
(	O
n_keys	int
,	O
keys	pointer
)	O
]	O
;	O
head	int
=	O
*	O
*	O
hash_headpp	pointer
;	O
if	O
(	O
head	int
==	O
0	int
)	O
return	O
FALSE	O
;	O
HASH_ITERATE	function
(	O
head	int
,	O
entp	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_keys	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
keys	pointer
[	O
i	int
]	O
!=	O
entp	int
->	O
keys	pointer
[	O
i	int
]	O
)	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
n_keys	int
)	O
{	O
*	O
entpp	pointer
=	O
entp	int
;	O
return	O
TRUE	O
;	O
}	O
}	O
HASH_ITERATE_END	O
(	O
head	int
,	O
entp	int
)	O
return	O
FALSE	O
;	O
}	O
int	O
hash_ent_remove	function
(	O
if_filter_list_t	O
*	O
ifp	pointer
,	O
net_hash_header_t	O
hp	int
,	O
int	O
used	int
,	O
net_hash_entry_t	O
*	O
head	int
,	O
net_hash_entry_t	O
entp	int
,	O
queue_entry_t	O
*	O
dead_p	pointer
)	O
{	O
hp	int
->	O
ref_count	O
--	O
;	O
if	O
(	O
*	O
head	int
==	O
entp	int
)	O
{	O
if	O
(	O
queue_empty	function
(	O
(	O
queue_t	O
)	O
entp	int
)	O
)	O
{	O
*	O
head	int
=	O
0	int
;	O
ENQUEUE_DEAD	function
(	O
*	O
dead_p	pointer
,	O
entp	int
,	O
chain	O
)	O
;	O
if	O
(	O
hp	int
->	O
ref_count	O
==	O
0	int
&&	O
!	O
used	int
)	O
{	O
if	O
(	O
(	O
(	O
net_rcv_port_t	O
)	O
hp	int
)	O
->	O
filter	pointer
[	O
0	int
]	O
&	O
NETF_IN	O
)	O
queue_remove	function
(	O
&	O
ifp	pointer
->	O
if_rcv_port_list	O
,	O
(	O
net_rcv_port_t	O
)	O
hp	int
,	O
net_rcv_port_t	O
,	O
input	O
)	O
;	O
if	O
(	O
(	O
(	O
net_rcv_port_t	O
)	O
hp	int
)	O
->	O
filter	pointer
[	O
0	int
]	O
&	O
NETF_OUT	O
)	O
queue_remove	function
(	O
&	O
ifp	pointer
->	O
if_snd_port_list	O
,	O
(	O
net_rcv_port_t	O
)	O
hp	int
,	O
net_rcv_port_t	O
,	O
output	O
)	O
;	O
hp	int
->	O
n_keys	int
=	O
0	int
;	O
return	O
TRUE	O
;	O
}	O
return	O
FALSE	O
;	O
}	O
else	O
{	O
*	O
head	int
=	O
(	O
net_hash_entry_t	O
)	O
queue_next	O
(	O
(	O
queue_t	O
)	O
entp	int
)	O
;	O
}	O
}	O
remqueue	function
(	O
(	O
queue_t	O
)	O
*	O
head	int
,	O
(	O
queue_entry_t	O
)	O
entp	int
)	O
;	O
ENQUEUE_DEAD	function
(	O
*	O
dead_p	pointer
,	O
entp	int
,	O
chain	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
void	O
net_free_dead_infp	function
(	O
queue_entry_t	O
dead_infp	int
)	O
{	O
register	O
net_rcv_port_t	O
infp	int
,	O
nextfp	O
;	O
for	O
(	O
infp	int
=	O
(	O
net_rcv_port_t	O
)	O
dead_infp	int
;	O
infp	int
!=	O
0	int
;	O
infp	int
=	O
nextfp	O
)	O
{	O
nextfp	O
=	O
(	O
net_rcv_port_t	O
)	O
queue_next	O
(	O
&	O
infp	int
->	O
input	O
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
infp	int
->	O
rcv_port	int
)	O
;	O
free	function
(	O
infp	int
)	O
;	O
debug	function
(	O
"a dead infp is freed\n"	pointer
)	O
;	O
}	O
}	O
void	O
net_free_dead_entp	function
(	O
queue_entry_t	O
dead_entp	int
)	O
{	O
register	O
net_hash_entry_t	O
entp	int
,	O
nextentp	O
;	O
for	O
(	O
entp	int
=	O
(	O
net_hash_entry_t	O
)	O
dead_entp	int
;	O
entp	int
!=	O
0	int
;	O
entp	int
=	O
nextentp	O
)	O
{	O
nextentp	O
=	O
(	O
net_hash_entry_t	O
)	O
queue_next	O
(	O
&	O
entp	int
->	O
chain	O
)	O
;	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
entp	int
->	O
rcv_port	int
)	O
;	O
free	function
(	O
entp	int
)	O
;	O
debug	function
(	O
"a dead entp is freed\n"	pointer
)	O
;	O
}	O
}	O
io_return_t	O
net_set_filter	function
(	O
if_filter_list_t	O
*	O
ifp	pointer
,	O
mach_port_t	O
rcv_port	int
,	O
int	O
priority	int
,	O
filter_t	O
*	O
filter	pointer
,	O
unsigned	O
int	O
filter_count	int
)	O
{	O
int	O
filter_bytes	int
;	O
bpf_insn_t	O
match	pointer
;	O
register	O
net_rcv_port_t	O
infp	int
,	O
my_infp	O
;	O
net_rcv_port_t	O
nextfp	O
;	O
net_hash_header_t	O
hhp	O
;	O
register	O
net_hash_entry_t	O
entp	int
,	O
hash_entp	O
=	O
NULL	O
;	O
net_hash_entry_t	O
*	O
head	int
,	O
nextentp	O
;	O
queue_entry_t	O
dead_infp	int
,	O
dead_entp	int
;	O
int	O
i	int
;	O
int	O
ret	int
,	O
is_new_infp	int
;	O
io_return_t	O
rval	O
;	O
boolean_t	O
in	O
,	O
out	O
;	O
debug	function
(	O
"filter_count: %d, filter[0]: %d\n"	pointer
,	O
filter_count	int
,	O
filter	pointer
[	O
0	int
]	O
)	O
;	O
filter_bytes	int
=	O
CSPF_BYTES	function
(	O
filter_count	int
)	O
;	O
match	pointer
=	O
(	O
bpf_insn_t	O
)	O
0	int
;	O
if	O
(	O
filter_count	int
==	O
0	int
)	O
{	O
return	O
(	O
D_INVALID_OPERATION	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
(	O
filter	pointer
[	O
0	int
]	O
&	O
NETF_IN	O
)	O
||	O
(	O
filter	pointer
[	O
0	int
]	O
&	O
NETF_OUT	O
)	O
)	O
)	O
{	O
return	O
(	O
D_INVALID_OPERATION	O
)	O
;	O
}	O
else	O
if	O
(	O
(	O
filter	pointer
[	O
0	int
]	O
&	O
NETF_TYPE_MASK	O
)	O
==	O
NETF_BPF	O
)	O
{	O
ret	int
=	O
bpf_validate	function
(	O
(	O
bpf_insn_t	O
)	O
filter	pointer
,	O
filter_bytes	int
,	O
&	O
match	pointer
)	O
;	O
if	O
(	O
!	O
ret	int
)	O
return	O
(	O
D_INVALID_OPERATION	O
)	O
;	O
}	O
else	O
{	O
return	O
(	O
D_INVALID_OPERATION	O
)	O
;	O
}	O
debug	function
(	O
"net_set_filter: check over\n"	pointer
)	O
;	O
rval	O
=	O
D_SUCCESS	O
;	O
dead_infp	int
=	O
dead_entp	int
=	O
0	int
;	O
if	O
(	O
match	pointer
==	O
(	O
bpf_insn_t	O
)	O
0	int
)	O
{	O
my_infp	O
=	O
(	O
net_rcv_port_t	O
)	O
calloc	O
(	O
1	int
,	O
sizeof	O
(	O
struct	O
net_rcv_port	O
)	O
)	O
;	O
my_infp	O
->	O
rcv_port	int
=	O
rcv_port	int
;	O
is_new_infp	int
=	O
TRUE	O
;	O
}	O
else	O
{	O
my_infp	O
=	O
0	int
;	O
hash_entp	O
=	O
(	O
net_hash_entry_t	O
)	O
calloc	O
(	O
1	int
,	O
sizeof	O
(	O
struct	O
net_hash_entry	O
)	O
)	O
;	O
is_new_infp	int
=	O
FALSE	O
;	O
}	O
void	O
check_filter_list	function
(	O
queue_head_t	O
*	O
if_port_list	pointer
)	O
{	O
FILTER_ITERATE	function
(	O
if_port_list	pointer
,	O
infp	int
,	O
nextfp	O
,	O
(	O
if_port_list	pointer
==	O
&	O
ifp	pointer
->	O
if_rcv_port_list	O
)	O
?	O
&	O
infp	int
->	O
input	O
:	O
&	O
infp	int
->	O
output	O
)	O
{	O
if	O
(	O
infp	int
->	O
rcv_port	int
==	O
MACH_PORT_NULL	O
)	O
{	O
if	O
(	O
match	pointer
!=	O
0	int
&&	O
infp	int
->	O
priority	int
==	O
priority	int
&&	O
my_infp	O
==	O
0	int
&&	O
(	O
infp	int
->	O
filter_end	O
-	O
infp	int
->	O
filter	pointer
)	O
==	O
filter_count	int
&&	O
bpf_eq	function
(	O
(	O
bpf_insn_t	O
)	O
infp	int
->	O
filter	pointer
,	O
(	O
bpf_insn_t	O
)	O
filter	pointer
,	O
filter_bytes	int
)	O
)	O
my_infp	O
=	O
infp	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NET_HASH_SIZE	O
;	O
i	int
++	O
)	O
{	O
head	int
=	O
&	O
(	O
(	O
net_hash_header_t	O
)	O
infp	int
)	O
->	O
table	O
[	O
i	int
]	O
;	O
if	O
(	O
*	O
head	int
==	O
0	int
)	O
continue	O
;	O
entp	int
=	O
*	O
head	int
;	O
do	O
{	O
nextentp	O
=	O
(	O
net_hash_entry_t	O
)	O
entp	int
->	O
he_next	O
;	O
if	O
(	O
entp	int
->	O
rcv_port	int
==	O
rcv_port	int
)	O
{	O
ret	int
=	O
hash_ent_remove	function
(	O
ifp	pointer
,	O
(	O
net_hash_header_t	O
)	O
infp	int
,	O
(	O
my_infp	O
==	O
infp	int
)	O
,	O
head	int
,	O
entp	int
,	O
&	O
dead_entp	int
)	O
;	O
if	O
(	O
ret	int
)	O
goto	O
hash_loop_end	O
;	O
}	O
entp	int
=	O
nextentp	O
;	O
}	O
while	O
(	O
*	O
head	int
!=	O
0	int
&&	O
entp	int
!=	O
*	O
head	int
)	O
;	O
}	O
hash_loop_end	O
:	O
;	O
}	O
else	O
if	O
(	O
infp	int
->	O
rcv_port	int
==	O
rcv_port	int
)	O
{	O
if	O
(	O
infp	int
->	O
filter	pointer
[	O
0	int
]	O
&	O
NETF_IN	O
)	O
queue_remove	function
(	O
&	O
ifp	pointer
->	O
if_rcv_port_list	O
,	O
infp	int
,	O
net_rcv_port_t	O
,	O
input	O
)	O
;	O
if	O
(	O
infp	int
->	O
filter	pointer
[	O
0	int
]	O
&	O
NETF_OUT	O
)	O
queue_remove	function
(	O
&	O
ifp	pointer
->	O
if_snd_port_list	O
,	O
infp	int
,	O
net_rcv_port_t	O
,	O
output	O
)	O
;	O
ENQUEUE_DEAD	function
(	O
dead_infp	int
,	O
infp	int
,	O
input	O
)	O
;	O
}	O
}	O
FILTER_ITERATE_END	O
}	O
in	O
=	O
(	O
filter	pointer
[	O
0	int
]	O
&	O
NETF_IN	O
)	O
!=	O
0	int
;	O
out	O
=	O
(	O
filter	pointer
[	O
0	int
]	O
&	O
NETF_OUT	O
)	O
!=	O
0	int
;	O
if	O
(	O
in	O
)	O
check_filter_list	function
(	O
&	O
ifp	pointer
->	O
if_rcv_port_list	O
)	O
;	O
if	O
(	O
out	O
)	O
check_filter_list	function
(	O
&	O
ifp	pointer
->	O
if_snd_port_list	O
)	O
;	O
if	O
(	O
my_infp	O
==	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
N_NET_HASH	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
filter_hash_header	struct
[	O
i	int
]	O
.	O
n_keys	int
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
N_NET_HASH	O
)	O
{	O
mach_port_deallocate	function
(	O
mach_task_self	function
(	O
)	O
,	O
rcv_port	int
)	O
;	O
if	O
(	O
match	pointer
!=	O
0	int
)	O
free	function
(	O
hash_entp	O
)	O
;	O
rval	O
=	O
D_NO_MEMORY	O
;	O
goto	O
clean_and_return	O
;	O
}	O
hhp	O
=	O
&	O
filter_hash_header	struct
[	O
i	int
]	O
;	O
hhp	O
->	O
n_keys	int
=	O
match	pointer
->	O
jt	O
;	O
hhp	O
->	O
ref_count	O
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NET_HASH_SIZE	O
;	O
i	int
++	O
)	O
hhp	O
->	O
table	O
[	O
i	int
]	O
=	O
0	int
;	O
my_infp	O
=	O
(	O
net_rcv_port_t	O
)	O
hhp	O
;	O
my_infp	O
->	O
rcv_port	int
=	O
MACH_PORT_NULL	O
;	O
is_new_infp	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
is_new_infp	int
)	O
{	O
my_infp	O
->	O
priority	int
=	O
priority	int
;	O
my_infp	O
->	O
rcv_count	O
=	O
0	int
;	O
memcpy	function
(	O
my_infp	O
->	O
filter	pointer
,	O
filter	pointer
,	O
filter_bytes	int
)	O
;	O
my_infp	O
->	O
filter_end	O
=	O
(	O
filter_t	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
my_infp	O
->	O
filter	pointer
+	O
filter_bytes	int
)	O
;	O
if	O
(	O
in	O
)	O
{	O
queue_iterate	function
(	O
&	O
ifp	pointer
->	O
if_rcv_port_list	O
,	O
infp	int
,	O
net_rcv_port_t	O
,	O
input	O
)	O
if	O
(	O
priority	int
>	O
infp	int
->	O
priority	int
)	O
break	O
;	O
queue_enter	function
(	O
&	O
ifp	pointer
->	O
if_rcv_port_list	O
,	O
my_infp	O
,	O
net_rcv_port_t	O
,	O
input	O
)	O
;	O
}	O
if	O
(	O
out	O
)	O
{	O
queue_iterate	function
(	O
&	O
ifp	pointer
->	O
if_snd_port_list	O
,	O
infp	int
,	O
net_rcv_port_t	O
,	O
output	O
)	O
if	O
(	O
priority	int
>	O
infp	int
->	O
priority	int
)	O
break	O
;	O
queue_enter	function
(	O
&	O
ifp	pointer
->	O
if_snd_port_list	O
,	O
my_infp	O
,	O
net_rcv_port_t	O
,	O
output	O
)	O
;	O
}	O
}	O
if	O
(	O
match	pointer
!=	O
0	int
)	O
{	O
net_hash_entry_t	O
*	O
p	pointer
;	O
hash_entp	O
->	O
rcv_port	int
=	O
rcv_port	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
match	pointer
->	O
jt	O
;	O
i	int
++	O
)	O
hash_entp	O
->	O
keys	pointer
[	O
i	int
]	O
=	O
match	pointer
[	O
i	int
+	O
1	int
]	O
.	O
k	int
;	O
p	pointer
=	O
&	O
(	O
(	O
net_hash_header_t	O
)	O
my_infp	O
)	O
->	O
table	O
[	O
bpf_hash	function
(	O
match	pointer
->	O
jt	O
,	O
hash_entp	O
->	O
keys	pointer
)	O
]	O
;	O
if	O
(	O
*	O
p	pointer
==	O
0	int
)	O
{	O
queue_init	function
(	O
(	O
queue_t	O
)	O
hash_entp	O
)	O
;	O
*	O
p	pointer
=	O
hash_entp	O
;	O
}	O
else	O
{	O
enqueue_tail	function
(	O
(	O
queue_t	O
)	O
*	O
p	pointer
,	O
(	O
queue_entry_t	O
)	O
hash_entp	O
)	O
;	O
}	O
(	O
(	O
net_hash_header_t	O
)	O
my_infp	O
)	O
->	O
ref_count	O
++	O
;	O
}	O
clean_and_return	O
:	O
if	O
(	O
dead_infp	int
!=	O
0	int
)	O
net_free_dead_infp	function
(	O
dead_infp	int
)	O
;	O
if	O
(	O
dead_entp	int
!=	O
0	int
)	O
net_free_dead_entp	function
(	O
dead_entp	int
)	O
;	O
return	O
(	O
rval	O
)	O
;	O
}	O
void	O
destroy_filters	function
(	O
if_filter_list_t	O
*	O
ifp	pointer
)	O
{	O
}	O
void	O
remove_dead_filter	function
(	O
if_filter_list_t	O
*	O
ifp	pointer
,	O
queue_head_t	O
*	O
if_port_list	pointer
,	O
mach_port_t	O
dead_port	int
)	O
{	O
net_rcv_port_t	O
infp	int
;	O
net_rcv_port_t	O
nextfp	O
;	O
net_hash_entry_t	O
*	O
head	int
,	O
nextentp	O
;	O
queue_entry_t	O
dead_infp	int
,	O
dead_entp	int
;	O
net_hash_entry_t	O
entp	int
=	O
NULL	O
;	O
int	O
i	int
,	O
ret	int
;	O
dead_infp	int
=	O
dead_entp	int
=	O
0	int
;	O
FILTER_ITERATE	function
(	O
if_port_list	pointer
,	O
infp	int
,	O
nextfp	O
,	O
(	O
if_port_list	pointer
==	O
&	O
ifp	pointer
->	O
if_rcv_port_list	O
)	O
?	O
&	O
infp	int
->	O
input	O
:	O
&	O
infp	int
->	O
output	O
)	O
{	O
if	O
(	O
infp	int
->	O
rcv_port	int
==	O
MACH_PORT_NULL	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NET_HASH_SIZE	O
;	O
i	int
++	O
)	O
{	O
head	int
=	O
&	O
(	O
(	O
net_hash_header_t	O
)	O
infp	int
)	O
->	O
table	O
[	O
i	int
]	O
;	O
if	O
(	O
*	O
head	int
==	O
0	int
)	O
continue	O
;	O
entp	int
=	O
*	O
head	int
;	O
do	O
{	O
nextentp	O
=	O
(	O
net_hash_entry_t	O
)	O
entp	int
->	O
he_next	O
;	O
if	O
(	O
entp	int
->	O
rcv_port	int
==	O
dead_port	int
)	O
{	O
ret	int
=	O
hash_ent_remove	function
(	O
ifp	pointer
,	O
(	O
net_hash_header_t	O
)	O
infp	int
,	O
0	int
,	O
head	int
,	O
entp	int
,	O
&	O
dead_entp	int
)	O
;	O
if	O
(	O
ret	int
)	O
goto	O
hash_loop_end	O
;	O
}	O
entp	int
=	O
nextentp	O
;	O
}	O
while	O
(	O
*	O
head	int
!=	O
0	int
&&	O
entp	int
!=	O
*	O
head	int
)	O
;	O
}	O
hash_loop_end	O
:	O
;	O
}	O
else	O
if	O
(	O
infp	int
->	O
rcv_port	int
==	O
dead_port	int
)	O
{	O
if	O
(	O
infp	int
->	O
filter	pointer
[	O
0	int
]	O
&	O
NETF_IN	O
)	O
queue_remove	function
(	O
&	O
ifp	pointer
->	O
if_rcv_port_list	O
,	O
infp	int
,	O
net_rcv_port_t	O
,	O
input	O
)	O
;	O
if	O
(	O
infp	int
->	O
filter	pointer
[	O
0	int
]	O
&	O
NETF_OUT	O
)	O
queue_remove	function
(	O
&	O
ifp	pointer
->	O
if_snd_port_list	O
,	O
infp	int
,	O
net_rcv_port_t	O
,	O
output	O
)	O
;	O
ENQUEUE_DEAD	function
(	O
dead_infp	int
,	O
infp	int
,	O
input	O
)	O
;	O
}	O
}	O
FILTER_ITERATE_END	O
if	O
(	O
dead_infp	int
!=	O
0	int
)	O
net_free_dead_infp	function
(	O
dead_infp	int
)	O
;	O
if	O
(	O
dead_entp	int
!=	O
0	int
)	O
net_free_dead_entp	function
(	O
dead_entp	int
)	O
;	O
}	O
