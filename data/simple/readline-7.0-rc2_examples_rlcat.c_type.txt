extern	O
int	O
optind	int
;	O
extern	O
char	O
*	O
optarg	pointer
;	O
static	O
int	O
stdcat	function
(	O
)	O
;	O
static	O
char	O
*	O
progname	pointer
;	O
static	O
int	O
vflag	int
;	O
static	O
void	O
usage	function
(	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: usage: %s [-vEVN] [filename]\n"	pointer
,	O
progname	pointer
,	O
progname	pointer
)	O
;	O
}	O
int	O
main	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
char	O
*	O
temp	pointer
;	O
int	O
opt	int
,	O
Vflag	int
,	O
Nflag	int
;	O
progname	pointer
=	O
strrchr	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
progname	pointer
==	O
0	int
)	O
progname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
else	O
progname	pointer
++	O
;	O
vflag	int
=	O
Vflag	int
=	O
Nflag	int
=	O
0	int
;	O
while	O
(	O
(	O
opt	int
=	O
getopt	function
(	O
argc	int
,	O
argv	pointer
,	O
"vEVN"	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'v'	O
:	O
vflag	int
=	O
1	int
;	O
break	O
;	O
case	O
'V'	O
:	O
Vflag	int
=	O
1	int
;	O
break	O
;	O
case	O
'E'	O
:	O
Vflag	int
=	O
0	int
;	O
break	O
;	O
case	O
'N'	O
:	O
Nflag	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
}	O
argc	int
-=	O
optind	int
;	O
argv	pointer
+=	O
optind	int
;	O
if	O
(	O
isatty	function
(	O
0	int
)	O
==	O
0	int
||	O
argc	int
||	O
Nflag	int
)	O
return	O
stdcat	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
rl_variable_bind	function
(	O
"editing-mode"	pointer
,	O
Vflag	int
?	O
"vi"	pointer
:	O
"emacs"	pointer
)	O
;	O
while	O
(	O
temp	pointer
=	O
readline	function
(	O
""	pointer
)	O
)	O
{	O
if	O
(	O
*	O
temp	pointer
)	O
add_history	function
(	O
temp	pointer
)	O
;	O
printf	function
(	O
"%s\n"	pointer
,	O
temp	pointer
)	O
;	O
}	O
return	O
(	O
ferror	function
(	O
stdout	pointer
)	O
)	O
;	O
}	O
static	O
int	O
fcopy	function
(	O
fp	pointer
)	O
FILE	struct
*	O
fp	pointer
;	O
{	O
int	O
c	int
;	O
char	O
*	O
x	pointer
;	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
if	O
(	O
vflag	int
&&	O
isascii	function
(	O
(	O
unsigned	O
char	O
)	O
c	int
)	O
&&	O
isprint	function
(	O
(	O
unsigned	O
char	O
)	O
c	int
)	O
==	O
0	int
)	O
{	O
x	pointer
=	O
rl_untranslate_keyseq	function
(	O
c	int
)	O
;	O
if	O
(	O
fputs	function
(	O
x	pointer
,	O
stdout	pointer
)	O
!=	O
0	int
)	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
putchar	function
(	O
c	int
)	O
==	O
EOF	O
)	O
return	O
1	int
;	O
}	O
return	O
(	O
ferror	function
(	O
stdout	pointer
)	O
)	O
;	O
}	O
int	O
stdcat	function
(	O
argc	int
,	O
argv	pointer
)	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
{	O
int	O
i	int
,	O
fd	int
,	O
r	int
;	O
char	O
*	O
s	pointer
;	O
FILE	struct
*	O
fp	pointer
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
return	O
(	O
fcopy	function
(	O
stdin	pointer
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
r	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
*	O
argv	pointer
[	O
i	int
]	O
==	O
'-'	O
&&	O
argv	pointer
[	O
i	int
]	O
[	O
1	int
]	O
==	O
0	int
)	O
fp	pointer
=	O
stdin	pointer
;	O
else	O
{	O
fp	pointer
=	O
fopen	function
(	O
argv	pointer
[	O
i	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fp	pointer
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: %s: cannot open: %s\n"	pointer
,	O
progname	pointer
,	O
argv	pointer
[	O
i	int
]	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
continue	O
;	O
}	O
}	O
r	int
=	O
fcopy	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
fp	pointer
!=	O
stdin	pointer
)	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
return	O
r	int
;	O
}	O
