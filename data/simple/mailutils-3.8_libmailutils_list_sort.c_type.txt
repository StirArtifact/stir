static	O
void	O
_list_append_entry	function
(	O
struct	O
_mu_list	struct
*	O
list	pointer
,	O
struct	O
list_data	struct
*	O
ent	pointer
)	O
{	O
ent	pointer
->	O
prev	pointer
=	O
list	pointer
->	O
head	struct
.	O
prev	pointer
?	O
list	pointer
->	O
head	struct
.	O
prev	pointer
:	O
&	O
list	pointer
->	O
head	struct
;	O
ent	pointer
->	O
next	pointer
=	O
&	O
list	pointer
->	O
head	struct
;	O
if	O
(	O
list	pointer
->	O
head	struct
.	O
prev	pointer
)	O
list	pointer
->	O
head	struct
.	O
prev	pointer
->	O
next	pointer
=	O
ent	pointer
;	O
else	O
list	pointer
->	O
head	struct
.	O
next	pointer
=	O
ent	pointer
;	O
list	pointer
->	O
head	struct
.	O
prev	pointer
=	O
ent	pointer
;	O
list	pointer
->	O
count	long
++	O
;	O
}	O
static	O
void	O
_list_qsort	function
(	O
mu_list_t	pointer
list	pointer
,	O
int	O
cmp	function
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
list_data	struct
*	O
cur	pointer
,	O
*	O
middle	pointer
;	O
struct	O
_mu_list	struct
high_list	struct
,	O
low_list	struct
;	O
int	O
rc	int
;	O
if	O
(	O
list	pointer
->	O
count	long
<	O
2	int
)	O
return	O
;	O
if	O
(	O
list	pointer
->	O
count	long
==	O
2	int
)	O
{	O
if	O
(	O
cmp	function
(	O
list	pointer
->	O
head	struct
.	O
prev	pointer
->	O
item	pointer
,	O
list	pointer
->	O
head	struct
.	O
next	pointer
->	O
item	pointer
,	O
data	pointer
)	O
<	O
0	int
)	O
{	O
cur	pointer
=	O
list	pointer
->	O
head	struct
.	O
prev	pointer
;	O
list	pointer
->	O
head	struct
.	O
prev	pointer
=	O
list	pointer
->	O
head	struct
.	O
next	pointer
;	O
list	pointer
->	O
head	struct
.	O
next	pointer
=	O
cur	pointer
;	O
list	pointer
->	O
head	struct
.	O
next	pointer
->	O
prev	pointer
=	O
&	O
list	pointer
->	O
head	struct
;	O
list	pointer
->	O
head	struct
.	O
next	pointer
->	O
next	pointer
=	O
list	pointer
->	O
head	struct
.	O
prev	pointer
;	O
list	pointer
->	O
head	struct
.	O
prev	pointer
->	O
next	pointer
=	O
&	O
list	pointer
->	O
head	struct
;	O
list	pointer
->	O
head	struct
.	O
prev	pointer
->	O
prev	pointer
=	O
list	pointer
->	O
head	struct
.	O
next	pointer
;	O
}	O
return	O
;	O
}	O
cur	pointer
=	O
list	pointer
->	O
head	struct
.	O
next	pointer
;	O
do	O
{	O
cur	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
if	O
(	O
cur	pointer
==	O
&	O
list	pointer
->	O
head	struct
)	O
return	O
;	O
}	O
while	O
(	O
(	O
rc	int
=	O
cmp	function
(	O
list	pointer
->	O
head	struct
.	O
next	pointer
->	O
item	pointer
,	O
cur	pointer
->	O
item	pointer
,	O
data	pointer
)	O
)	O
==	O
0	int
)	O
;	O
middle	pointer
=	O
(	O
rc	int
>	O
0	int
)	O
?	O
cur	pointer
:	O
list	pointer
->	O
head	struct
.	O
next	pointer
;	O
memset	function
(	O
&	O
high_list	struct
,	O
0	int
,	O
sizeof	O
(	O
high_list	struct
)	O
)	O
;	O
memset	function
(	O
&	O
low_list	struct
,	O
0	int
,	O
sizeof	O
(	O
low_list	struct
)	O
)	O
;	O
for	O
(	O
cur	pointer
=	O
list	pointer
->	O
head	struct
.	O
next	pointer
;	O
cur	pointer
!=	O
&	O
list	pointer
->	O
head	struct
;	O
)	O
{	O
struct	O
list_data	struct
*	O
next	pointer
=	O
cur	pointer
->	O
next	pointer
;	O
cur	pointer
->	O
next	pointer
=	O
NULL	O
;	O
if	O
(	O
cmp	function
(	O
middle	pointer
->	O
item	pointer
,	O
cur	pointer
->	O
item	pointer
,	O
data	pointer
)	O
<	O
0	int
)	O
_list_append_entry	function
(	O
&	O
high_list	struct
,	O
cur	pointer
)	O
;	O
else	O
_list_append_entry	function
(	O
&	O
low_list	struct
,	O
cur	pointer
)	O
;	O
cur	pointer
=	O
next	pointer
;	O
}	O
_list_qsort	function
(	O
&	O
low_list	struct
,	O
cmp	function
,	O
data	pointer
)	O
;	O
_list_qsort	function
(	O
&	O
high_list	struct
,	O
cmp	function
,	O
data	pointer
)	O
;	O
if	O
(	O
low_list	struct
.	O
head	struct
.	O
prev	pointer
)	O
cur	pointer
=	O
low_list	struct
.	O
head	struct
.	O
prev	pointer
;	O
else	O
cur	pointer
=	O
&	O
low_list	struct
.	O
head	struct
;	O
cur	pointer
->	O
next	pointer
=	O
high_list	struct
.	O
head	struct
.	O
next	pointer
;	O
if	O
(	O
high_list	struct
.	O
head	struct
.	O
next	pointer
)	O
high_list	struct
.	O
head	struct
.	O
next	pointer
->	O
prev	pointer
=	O
cur	pointer
;	O
low_list	struct
.	O
head	struct
.	O
prev	pointer
=	O
high_list	struct
.	O
head	struct
.	O
prev	pointer
;	O
high_list	struct
.	O
head	struct
.	O
prev	pointer
=	O
&	O
low_list	struct
.	O
head	struct
;	O
low_list	struct
.	O
count	long
+=	O
high_list	struct
.	O
count	long
;	O
list	pointer
->	O
head	struct
=	O
low_list	struct
.	O
head	struct
;	O
if	O
(	O
list	pointer
->	O
head	struct
.	O
next	pointer
)	O
list	pointer
->	O
head	struct
.	O
next	pointer
->	O
prev	pointer
=	O
&	O
list	pointer
->	O
head	struct
;	O
if	O
(	O
list	pointer
->	O
head	struct
.	O
prev	pointer
)	O
list	pointer
->	O
head	struct
.	O
prev	pointer
->	O
next	pointer
=	O
&	O
list	pointer
->	O
head	struct
;	O
}	O
void	O
mu_list_sort_r	function
(	O
mu_list_t	pointer
list	pointer
,	O
int	O
(	O
*	O
comp	pointer
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
list	pointer
)	O
_list_qsort	function
(	O
list	pointer
,	O
comp	pointer
,	O
data	pointer
)	O
;	O
}	O
static	O
int	O
callcomp	function
(	O
const	O
void	O
*	O
a	pointer
,	O
const	O
void	O
*	O
b	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
mu_list_comparator_t	pointer
comp	pointer
=	O
data	pointer
;	O
return	O
comp	pointer
(	O
a	pointer
,	O
b	pointer
)	O
;	O
}	O
void	O
mu_list_sort	function
(	O
mu_list_t	pointer
list	pointer
,	O
mu_list_comparator_t	pointer
comp	pointer
)	O
{	O
if	O
(	O
list	pointer
)	O
_list_qsort	function
(	O
list	pointer
,	O
callcomp	function
,	O
comp	pointer
?	O
comp	pointer
:	O
list	pointer
->	O
comp	pointer
)	O
;	O
}	O
