struct	O
top	struct
*	O
top	struct
;	O
static	O
exiting	O
void	O
exiterr	pointer
(	O
void	O
)	O
{	O
exit_failurefully	function
(	O
)	O
;	O
}	O
static	O
int	O
match	function
(	O
register	O
FILE	struct
*	O
fp	pointer
)	O
{	O
char	O
line	array
[	O
BUFSIZ	int
]	O
;	O
register	O
int	O
c	int
;	O
register	O
char	O
*	O
tp	pointer
;	O
tp	pointer
=	O
line	array
;	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
)	O
!=	O
VDELIM	char
)	O
{	O
if	O
(	O
c	int
==	O
EOF	O
&&	O
feof	function
(	O
fp	pointer
)	O
|	O
ferror	function
(	O
fp	pointer
)	O
)	O
return	O
c	int
;	O
switch	O
(	O
ctab	array
[	O
c	int
]	O
)	O
{	O
case	O
LETTER	int
:	O
case	O
Letter	int
:	O
*	O
tp	pointer
++	O
=	O
c	int
;	O
if	O
(	O
tp	pointer
<	O
line	array
+	O
sizeof	O
(	O
line	array
)	O
-	O
4	int
)	O
break	O
;	O
default	O
:	O
return	O
c	int
?	O
c	int
:	O
'\n'	O
;	O
}	O
}	O
if	O
(	O
tp	pointer
==	O
line	array
)	O
return	O
c	int
;	O
*	O
tp	pointer
++	O
=	O
c	int
;	O
if	O
(	O
(	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
)	O
!=	O
' '	O
)	O
return	O
c	int
?	O
c	int
:	O
'\n'	O
;	O
*	O
tp	pointer
++	O
=	O
c	int
;	O
while	O
(	O
(	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
)	O
!=	O
KDELIM	char
)	O
{	O
if	O
(	O
c	int
==	O
EOF	O
&&	O
feof	function
(	O
fp	pointer
)	O
|	O
ferror	function
(	O
fp	pointer
)	O
)	O
return	O
c	int
;	O
switch	O
(	O
ctab	array
[	O
c	int
]	O
)	O
{	O
default	O
:	O
*	O
tp	pointer
++	O
=	O
c	int
;	O
if	O
(	O
tp	pointer
<	O
line	array
+	O
sizeof	O
(	O
line	array
)	O
-	O
2	int
)	O
break	O
;	O
case	O
NEWLN	int
:	O
case	O
UNKN	int
:	O
return	O
c	int
?	O
c	int
:	O
'\n'	O
;	O
}	O
}	O
if	O
(	O
tp	pointer
[	O
-	O
1	int
]	O
!=	O
' '	O
)	O
return	O
c	int
;	O
*	O
tp	pointer
++	O
=	O
c	int
;	O
*	O
tp	pointer
=	O
'\0'	O
;	O
printf	function
(	O
"     %c%s\n"	pointer
,	O
KDELIM	char
,	O
line	array
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
scanfile	function
(	O
register	O
FILE	struct
*	O
file	pointer
,	O
char	O
const	O
*	O
name	pointer
)	O
{	O
register	O
int	O
c	int
;	O
if	O
(	O
name	pointer
)	O
{	O
printf	function
(	O
"%s:\n"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
ferror	function
(	O
stdout	pointer
)	O
)	O
return	O
-	O
1	int
;	O
}	O
else	O
name	pointer
=	O
"standard input"	pointer
;	O
c	int
=	O
0	int
;	O
while	O
(	O
c	int
!=	O
EOF	O
||	O
!	O
(	O
feof	function
(	O
file	pointer
)	O
|	O
ferror	function
(	O
file	pointer
)	O
)	O
)	O
{	O
if	O
(	O
c	int
==	O
KDELIM	char
)	O
{	O
if	O
(	O
(	O
c	int
=	O
match	function
(	O
file	pointer
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
ferror	function
(	O
stdout	pointer
)	O
)	O
return	O
-	O
1	int
;	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
}	O
c	int
=	O
getc	function
(	O
file	pointer
)	O
;	O
}	O
if	O
(	O
ferror	function
(	O
file	pointer
)	O
||	O
PROB	O
(	O
fclose	function
(	O
file	pointer
)	O
)	O
)	O
{	O
syserror_errno	O
(	O
name	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
exiterr	pointer
(	O
)	O
;	O
}	O
if	O
(	O
!	O
BE	O
(	O
quiet	bool
)	O
)	O
complain	function
(	O
"%s warning: no id keywords in %s\n"	pointer
,	O
PROGRAM	O
(	O
name	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
int	O
status	int
=	O
EXIT_SUCCESS	int
;	O
char	O
const	O
*	O
a	pointer
;	O
const	O
struct	O
program	struct
program	struct
=	O
{	O
.	O
invoke	pointer
=	O
argv	pointer
[	O
0	int
]	O
,	O
.	O
name	pointer
=	O
"ident"	pointer
,	O
.	O
help	pointer
=	O
help	pointer
,	O
.	O
exiterr	pointer
=	O
exiterr	pointer
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	function
(	O
&	O
program	struct
)	O
;	O
while	O
(	O
(	O
a	pointer
=	O
*	O
++	O
argv	pointer
)	O
&&	O
*	O
a	pointer
==	O
'-'	O
)	O
while	O
(	O
*	O
++	O
a	pointer
)	O
switch	O
(	O
*	O
a	pointer
)	O
{	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
break	O
;	O
case	O
'V'	O
:	O
display_version	function
(	O
&	O
program	struct
)	O
;	O
gnurcs_goodbye	function
(	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
default	O
:	O
bad_option	function
(	O
a	pointer
-	O
1	int
)	O
;	O
gnurcs_goodbye	function
(	O
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
a	pointer
)	O
scanfile	function
(	O
stdin	pointer
,	O
NULL	O
)	O
;	O
else	O
do	O
{	O
if	O
(	O
!	O
(	O
fp	pointer
=	O
fopen	function
(	O
a	pointer
,	O
FOPEN_RB	pointer
)	O
)	O
)	O
{	O
syserror_errno	O
(	O
a	pointer
)	O
;	O
status	int
=	O
EXIT_FAILURE	int
;	O
}	O
else	O
if	O
(	O
PROB	O
(	O
scanfile	function
(	O
fp	pointer
,	O
a	pointer
)	O
)	O
||	O
(	O
argv	pointer
[	O
1	int
]	O
&&	O
putchar	function
(	O
'\n'	O
)	O
==	O
EOF	O
)	O
)	O
break	O
;	O
}	O
while	O
(	O
(	O
a	pointer
=	O
*	O
++	O
argv	pointer
)	O
)	O
;	O
if	O
(	O
ferror	function
(	O
stdout	pointer
)	O
||	O
PROB	O
(	O
fclose	function
(	O
stdout	pointer
)	O
)	O
)	O
{	O
syserror_errno	O
(	O
"standard output"	pointer
)	O
;	O
status	int
=	O
EXIT_FAILURE	int
;	O
}	O
gnurcs_goodbye	function
(	O
)	O
;	O
return	O
status	int
;	O
}	O
