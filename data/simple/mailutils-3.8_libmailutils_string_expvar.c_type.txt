static	O
int	O
exp_getvar	function
(	O
char	O
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
vptr	pointer
,	O
size_t	long
vlen	long
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
varname	pointer
,	O
*	O
s	pointer
=	O
NULL	O
;	O
mu_assoc_t	pointer
assoc	pointer
=	O
data	pointer
;	O
if	O
(	O
mu_assoc_is_empty	function
(	O
assoc	pointer
)	O
)	O
return	O
MU_WRDSE_UNDEF	O
;	O
varname	pointer
=	O
malloc	function
(	O
vlen	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
varname	pointer
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
memcpy	function
(	O
varname	pointer
,	O
vptr	pointer
,	O
vlen	long
)	O
;	O
varname	pointer
[	O
vlen	long
]	O
=	O
0	int
;	O
rc	int
=	O
mu_assoc_lookup	function
(	O
assoc	pointer
,	O
varname	pointer
,	O
&	O
s	pointer
)	O
;	O
free	function
(	O
varname	pointer
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
rc	int
=	O
MU_WRDSE_OK	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
rc	int
=	O
MU_WRDSE_UNDEF	O
;	O
break	O
;	O
case	O
MU_ERR_BUFSPACE	O
:	O
case	O
ENOMEM	int
:	O
rc	int
=	O
MU_WRDSE_NOSPACE	O
;	O
break	O
;	O
default	O
:	O
s	pointer
=	O
(	O
char	O
*	O
)	O
mu_strerror	function
(	O
rc	int
)	O
;	O
rc	int
=	O
MU_WRDSE_USERERR	O
;	O
}	O
if	O
(	O
s	pointer
)	O
{	O
s	pointer
=	O
strdup	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
*	O
ret	pointer
=	O
s	pointer
;	O
}	O
else	O
rc	int
=	O
MU_WRDSE_UNDEF	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
exp_localpart	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
*	O
result	pointer
)	O
{	O
size_t	long
len	long
=	O
strcspn	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"@"	pointer
)	O
;	O
char	O
*	O
s	pointer
;	O
s	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
memcpy	function
(	O
s	pointer
,	O
argv	pointer
[	O
1	int
]	O
,	O
len	long
)	O
;	O
s	pointer
[	O
len	long
]	O
=	O
0	int
;	O
*	O
result	pointer
=	O
s	pointer
;	O
return	O
MU_WRDSE_OK	O
;	O
}	O
static	O
int	O
exp_domainpart	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
*	O
result	pointer
)	O
{	O
char	O
*	O
s	pointer
=	O
strchr	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
'@'	O
)	O
;	O
if	O
(	O
s	pointer
)	O
s	pointer
++	O
;	O
else	O
s	pointer
=	O
""	pointer
;	O
s	pointer
=	O
strdup	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
*	O
result	pointer
=	O
s	pointer
;	O
return	O
MU_WRDSE_OK	O
;	O
}	O
static	O
int	O
exp_shell	function
(	O
char	O
*	O
*	O
ret	pointer
,	O
char	O
const	O
*	O
str	pointer
,	O
size_t	long
len	long
,	O
void	O
*	O
closure	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
char	O
*	O
cmd	pointer
;	O
int	O
c	int
,	O
lastc	int
;	O
char	O
*	O
buffer	pointer
=	O
NULL	O
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
size_t	long
buflen	long
=	O
0	int
;	O
cmd	pointer
=	O
malloc	function
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
cmd	pointer
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
memcpy	function
(	O
cmd	pointer
,	O
str	pointer
,	O
len	long
)	O
;	O
cmd	pointer
[	O
len	long
]	O
=	O
0	int
;	O
fp	pointer
=	O
popen	function
(	O
cmd	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
ret	pointer
=	O
NULL	O
;	O
if	O
(	O
mu_asprintf	function
(	O
ret	pointer
,	O
"can't run %s: %s"	pointer
,	O
cmd	pointer
,	O
mu_strerror	function
(	O
errno	O
)	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
else	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
fgetc	function
(	O
fp	pointer
)	O
)	O
!=	O
EOF	O
)	O
{	O
lastc	int
=	O
c	int
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
c	int
=	O
' '	O
;	O
if	O
(	O
buflen	long
==	O
bufsize	long
)	O
{	O
char	O
*	O
p	pointer
;	O
if	O
(	O
bufsize	long
==	O
0	int
)	O
bufsize	long
=	O
80	int
;	O
else	O
bufsize	long
*=	O
2	int
;	O
p	pointer
=	O
realloc	function
(	O
buffer	pointer
,	O
bufsize	long
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
free	function
(	O
buffer	pointer
)	O
;	O
free	function
(	O
cmd	pointer
)	O
;	O
return	O
MU_WRDSE_NOSPACE	O
;	O
}	O
buffer	pointer
=	O
p	pointer
;	O
}	O
buffer	pointer
[	O
buflen	long
++	O
]	O
=	O
c	int
;	O
}	O
if	O
(	O
buffer	pointer
)	O
{	O
if	O
(	O
lastc	int
==	O
'\n'	O
)	O
--	O
buflen	long
;	O
buffer	pointer
[	O
buflen	long
]	O
=	O
0	int
;	O
}	O
pclose	function
(	O
fp	pointer
)	O
;	O
free	function
(	O
cmd	pointer
)	O
;	O
*	O
ret	pointer
=	O
buffer	pointer
;	O
return	O
MU_WRDSE_OK	O
;	O
}	O
struct	O
exp_command	struct
{	O
char	O
*	O
name	pointer
;	O
int	O
minarg	int
;	O
int	O
maxarg	int
;	O
int	O
(	O
*	O
exp	pointer
)	O
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
char	O
*	O
*	O
ret	pointer
)	O
;	O
}	O
;	O
static	O
struct	O
exp_command	struct
exp_command_tab	array
[	O
]	O
=	O
{	O
{	O
"localpart"	pointer
,	O
2	int
,	O
2	int
,	O
exp_localpart	function
}	O
,	O
{	O
"domainpart"	pointer
,	O
2	int
,	O
2	int
,	O
exp_domainpart	function
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
exp_command	struct
*	O
findcom	function
(	O
char	O
const	O
*	O
name	pointer
)	O
{	O
struct	O
exp_command	struct
*	O
cp	pointer
;	O
for	O
(	O
cp	pointer
=	O
exp_command_tab	array
;	O
cp	pointer
->	O
name	pointer
;	O
cp	pointer
++	O
)	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
cp	pointer
->	O
name	pointer
)	O
==	O
0	int
)	O
return	O
cp	pointer
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
checkargc	function
(	O
struct	O
exp_command	struct
*	O
cmd	pointer
,	O
int	O
argc	int
)	O
{	O
if	O
(	O
cmd	pointer
->	O
minarg	int
&&	O
argc	int
<	O
cmd	pointer
->	O
minarg	int
)	O
return	O
1	int
;	O
else	O
if	O
(	O
cmd	pointer
->	O
maxarg	int
&&	O
argc	int
>	O
cmd	pointer
->	O
maxarg	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
exp_runcmd	function
(	O
char	O
*	O
*	O
ret	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
argv	pointer
,	O
void	O
*	O
closure	pointer
)	O
{	O
int	O
argc	int
;	O
struct	O
exp_command	struct
*	O
cmd	pointer
;	O
char	O
*	O
result	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
if	O
(	O
strcmp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
SHELL_CMD	pointer
)	O
==	O
0	int
)	O
{	O
len	long
-=	O
sizeof	O
SHELL_CMD	pointer
-	O
1	int
;	O
str	pointer
+=	O
sizeof	O
SHELL_CMD	pointer
-	O
1	int
;	O
while	O
(	O
len	long
>	O
0	int
&&	O
mu_isspace	O
(	O
*	O
str	pointer
)	O
)	O
{	O
len	long
--	O
;	O
str	pointer
++	O
;	O
}	O
if	O
(	O
len	long
==	O
0	int
)	O
{	O
if	O
(	O
mu_asprintf	function
(	O
ret	pointer
,	O
_	O
(	O
"%s: bad number of arguments"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
return	O
exp_shell	function
(	O
ret	pointer
,	O
str	pointer
,	O
len	long
,	O
closure	pointer
)	O
;	O
}	O
cmd	pointer
=	O
findcom	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
cmd	pointer
)	O
{	O
if	O
(	O
mu_asprintf	function
(	O
ret	pointer
,	O
_	O
(	O
"%s: unknown function"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
for	O
(	O
argc	int
=	O
0	int
;	O
argv	pointer
[	O
argc	int
]	O
;	O
argc	int
++	O
)	O
;	O
if	O
(	O
checkargc	function
(	O
cmd	pointer
,	O
argc	int
)	O
)	O
{	O
if	O
(	O
mu_asprintf	function
(	O
ret	pointer
,	O
_	O
(	O
"%s: bad number of arguments"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
rc	int
=	O
cmd	pointer
->	O
exp	pointer
(	O
argc	int
,	O
argv	pointer
,	O
&	O
result	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
MU_WRDSE_USERERR	O
&&	O
result	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
mu_asprintf	function
(	O
ret	pointer
,	O
_	O
(	O
"%s: command expansion error"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
if	O
(	O
rc	int
==	O
MU_WRDSE_OK	O
||	O
rc	int
==	O
MU_WRDSE_USERERR	O
)	O
*	O
ret	pointer
=	O
result	pointer
;	O
return	O
rc	int
;	O
}	O
int	O
mu_str_expand	function
(	O
char	O
*	O
*	O
output	pointer
,	O
char	O
const	O
*	O
input	pointer
,	O
mu_assoc_t	pointer
assoc	pointer
)	O
{	O
struct	O
mu_wordsplit	struct
ws	pointer
;	O
int	O
rc	int
=	O
0	int
;	O
ws	pointer
.	O
ws_getvar	pointer
=	O
exp_getvar	function
;	O
ws	pointer
.	O
ws_command	pointer
=	O
exp_runcmd	function
;	O
ws	pointer
.	O
ws_closure	pointer
=	O
assoc	pointer
;	O
if	O
(	O
mu_wordsplit	struct
(	O
input	pointer
,	O
&	O
ws	pointer
,	O
MU_WRDSF_NOSPLIT	O
|	O
MU_WRDSF_GETVAR	O
|	O
MU_WRDSF_CLOSURE	O
)	O
)	O
{	O
if	O
(	O
ws	pointer
.	O
ws_errno	int
==	O
MU_WRDSE_NOSPACE	O
)	O
rc	int
=	O
ENOMEM	int
;	O
else	O
{	O
char	O
*	O
p	pointer
=	O
strdup	function
(	O
mu_wordsplit_strerror	function
(	O
&	O
ws	pointer
)	O
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
rc	int
=	O
ENOMEM	int
;	O
else	O
{	O
*	O
output	pointer
=	O
p	pointer
;	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
==	O
0	int
)	O
{	O
*	O
output	pointer
=	O
strdup	function
(	O
""	pointer
)	O
;	O
if	O
(	O
!	O
*	O
output	pointer
)	O
rc	int
=	O
ENOMEM	int
;	O
}	O
else	O
{	O
size_t	long
wordc	pointer
;	O
char	O
*	O
*	O
wordv	pointer
;	O
mu_wordsplit_get_words	function
(	O
&	O
ws	pointer
,	O
&	O
wordc	pointer
,	O
&	O
wordv	pointer
)	O
;	O
*	O
output	pointer
=	O
wordv	pointer
[	O
0	int
]	O
;	O
}	O
mu_wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_str_vexpand	function
(	O
char	O
*	O
*	O
output	pointer
,	O
char	O
const	O
*	O
input	pointer
,	O
...	O
)	O
{	O
int	O
rc	int
;	O
mu_assoc_t	pointer
assoc	pointer
;	O
char	O
*	O
p	pointer
[	O
2	int
]	O
;	O
int	O
i	int
;	O
va_list	array
ap	array
;	O
rc	int
=	O
mu_assoc_create	function
(	O
&	O
assoc	pointer
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
va_start	O
(	O
ap	array
,	O
input	pointer
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
p	pointer
[	O
i	int
]	O
=	O
va_arg	O
(	O
ap	array
,	O
char	O
*	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
i	int
==	O
1	int
)	O
{	O
rc	int
=	O
mu_assoc_install	function
(	O
assoc	pointer
,	O
p	pointer
[	O
0	int
]	O
,	O
p	pointer
[	O
1	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_assoc_destroy	function
(	O
&	O
assoc	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
i	int
=	O
(	O
i	int
+	O
1	int
)	O
%	O
2	int
;	O
}	O
va_end	O
(	O
ap	array
)	O
;	O
rc	int
=	O
mu_str_expand	function
(	O
output	pointer
,	O
input	pointer
,	O
assoc	pointer
)	O
;	O
mu_assoc_destroy	function
(	O
&	O
assoc	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
