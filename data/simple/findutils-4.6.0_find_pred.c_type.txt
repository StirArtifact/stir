static	O
bool	bool
match_lname	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
,	O
bool	bool
ignore_case	bool
)	O
;	O
static	O
double	O
ts_difference	function
(	O
struct	O
timespec	struct
ts1	struct
,	O
struct	O
timespec	struct
ts2	struct
)	O
{	O
double	O
d	double
=	O
difftime	function
(	O
ts1	struct
.	O
tv_sec	long
,	O
ts2	struct
.	O
tv_sec	long
)	O
+	O
(	O
1.0e-9	int
*	O
(	O
ts1	struct
.	O
tv_nsec	long
-	O
ts2	struct
.	O
tv_nsec	long
)	O
)	O
;	O
return	O
d	double
;	O
}	O
static	O
int	O
compare_ts	function
(	O
struct	O
timespec	struct
ts1	struct
,	O
struct	O
timespec	struct
ts2	struct
)	O
{	O
if	O
(	O
(	O
ts1	struct
.	O
tv_sec	long
==	O
ts2	struct
.	O
tv_sec	long
)	O
&&	O
(	O
ts1	struct
.	O
tv_nsec	long
==	O
ts2	struct
.	O
tv_nsec	long
)	O
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
double	O
diff	double
=	O
ts_difference	function
(	O
ts1	struct
,	O
ts2	struct
)	O
;	O
return	O
diff	double
<	O
0.0	int
?	O
-	O
1	int
:	O
+	O
1	int
;	O
}	O
}	O
static	O
bool	bool
pred_timewindow	function
(	O
struct	O
timespec	struct
ts	struct
,	O
struct	O
predicate	struct
const	O
*	O
pred_ptr	pointer
,	O
int	O
window	int
)	O
{	O
switch	O
(	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
kind	enum
)	O
{	O
case	O
COMP_GT	int
:	O
return	O
compare_ts	function
(	O
ts	struct
,	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
ts	struct
)	O
>	O
0	int
;	O
case	O
COMP_LT	int
:	O
return	O
compare_ts	function
(	O
ts	struct
,	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
ts	struct
)	O
<	O
0	int
;	O
case	O
COMP_EQ	int
:	O
{	O
double	O
delta	double
=	O
ts_difference	function
(	O
ts	struct
,	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
ts	struct
)	O
;	O
return	O
(	O
delta	double
>	O
0.0	int
&&	O
delta	double
<=	O
window	int
)	O
;	O
}	O
}	O
assert	O
(	O
0	int
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
bool	bool
pred_amin	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
&	O
pathname	pointer
;	O
return	O
pred_timewindow	function
(	O
get_stat_atime	function
(	O
stat_buf	pointer
)	O
,	O
pred_ptr	pointer
,	O
60	int
)	O
;	O
}	O
bool	bool
pred_and	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
if	O
(	O
pred_ptr	pointer
->	O
pred_left	pointer
==	O
NULL	O
||	O
apply_predicate	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
->	O
pred_left	pointer
)	O
)	O
{	O
return	O
apply_predicate	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
->	O
pred_right	pointer
)	O
;	O
}	O
else	O
return	O
false	int
;	O
}	O
bool	bool
pred_anewer	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
&	O
pathname	pointer
;	O
assert	O
(	O
COMP_GT	int
==	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
kind	enum
)	O
;	O
return	O
compare_ts	function
(	O
get_stat_atime	function
(	O
stat_buf	pointer
)	O
,	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
ts	struct
)	O
>	O
0	int
;	O
}	O
bool	bool
pred_atime	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
&	O
pathname	pointer
;	O
return	O
pred_timewindow	function
(	O
get_stat_atime	function
(	O
stat_buf	pointer
)	O
,	O
pred_ptr	pointer
,	O
DAYSECS	int
)	O
;	O
}	O
bool	bool
pred_closeparen	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
&	O
pathname	pointer
;	O
(	O
void	O
)	O
&	O
stat_buf	pointer
;	O
(	O
void	O
)	O
&	O
pred_ptr	pointer
;	O
return	O
true	int
;	O
}	O
bool	bool
pred_cmin	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
return	O
pred_timewindow	function
(	O
get_stat_ctime	function
(	O
stat_buf	pointer
)	O
,	O
pred_ptr	pointer
,	O
60	int
)	O
;	O
}	O
bool	bool
pred_cnewer	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
assert	O
(	O
COMP_GT	int
==	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
kind	enum
)	O
;	O
return	O
compare_ts	function
(	O
get_stat_ctime	function
(	O
stat_buf	pointer
)	O
,	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
ts	struct
)	O
>	O
0	int
;	O
}	O
bool	bool
pred_comma	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
if	O
(	O
pred_ptr	pointer
->	O
pred_left	pointer
!=	O
NULL	O
)	O
{	O
apply_predicate	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
->	O
pred_left	pointer
)	O
;	O
}	O
return	O
apply_predicate	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
->	O
pred_right	pointer
)	O
;	O
}	O
bool	bool
pred_ctime	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
&	O
pathname	pointer
;	O
return	O
pred_timewindow	function
(	O
get_stat_ctime	function
(	O
stat_buf	pointer
)	O
,	O
pred_ptr	pointer
,	O
DAYSECS	int
)	O
;	O
}	O
static	O
bool	bool
perform_delete	function
(	O
int	O
flags	int
)	O
{	O
return	O
0	int
==	O
unlinkat	function
(	O
state	pointer
.	O
cwd_dir_fd	int
,	O
state	pointer
.	O
rel_pathname	pointer
,	O
flags	int
)	O
;	O
}	O
bool	bool
pred_delete	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
(	O
void	O
)	O
stat_buf	pointer
;	O
if	O
(	O
strcmp	function
(	O
state	pointer
.	O
rel_pathname	pointer
,	O
"."	pointer
)	O
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
state	pointer
.	O
have_stat	bool
&&	O
S_ISDIR	O
(	O
stat_buf	pointer
->	O
st_mode	int
)	O
)	O
flags	int
|=	O
AT_REMOVEDIR	int
;	O
if	O
(	O
perform_delete	function
(	O
flags	int
)	O
)	O
{	O
return	O
true	int
;	O
}	O
else	O
{	O
if	O
(	O
EISDIR	int
==	O
errno	O
)	O
{	O
if	O
(	O
(	O
flags	int
&	O
AT_REMOVEDIR	int
)	O
==	O
0	int
)	O
{	O
flags	int
|=	O
AT_REMOVEDIR	int
;	O
if	O
(	O
perform_delete	function
(	O
flags	int
)	O
)	O
return	O
true	int
;	O
}	O
}	O
}	O
error	function
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"cannot delete %s"	pointer
)	O
,	O
safely_quote_err_filename	function
(	O
0	int
,	O
pathname	pointer
)	O
)	O
;	O
state	pointer
.	O
exit_status	int
=	O
1	int
;	O
return	O
false	int
;	O
}	O
else	O
{	O
return	O
true	int
;	O
}	O
}	O
bool	bool
pred_empty	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
if	O
(	O
S_ISDIR	O
(	O
stat_buf	pointer
->	O
st_mode	int
)	O
)	O
{	O
int	O
fd	int
;	O
DIR	struct
*	O
d	double
;	O
struct	O
dirent	struct
*	O
dp	pointer
;	O
bool	bool
empty	bool
=	O
true	int
;	O
errno	O
=	O
0	int
;	O
if	O
(	O
(	O
fd	int
=	O
openat	function
(	O
state	pointer
.	O
cwd_dir_fd	int
,	O
state	pointer
.	O
rel_pathname	pointer
,	O
O_RDONLY	int
|	O
O_LARGEFILE	O
)	O
)	O
<	O
0	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"%s"	pointer
,	O
safely_quote_err_filename	function
(	O
0	int
,	O
pathname	pointer
)	O
)	O
;	O
state	pointer
.	O
exit_status	int
=	O
1	int
;	O
return	O
false	int
;	O
}	O
d	double
=	O
fdopendir	function
(	O
fd	int
)	O
;	O
if	O
(	O
d	double
==	O
NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"%s"	pointer
,	O
safely_quote_err_filename	function
(	O
0	int
,	O
pathname	pointer
)	O
)	O
;	O
state	pointer
.	O
exit_status	int
=	O
1	int
;	O
return	O
false	int
;	O
}	O
for	O
(	O
dp	pointer
=	O
readdir	function
(	O
d	double
)	O
;	O
dp	pointer
;	O
dp	pointer
=	O
readdir	function
(	O
d	double
)	O
)	O
{	O
if	O
(	O
dp	pointer
->	O
d_name	array
[	O
0	int
]	O
!=	O
'.'	O
||	O
(	O
dp	pointer
->	O
d_name	array
[	O
1	int
]	O
!=	O
'\0'	O
&&	O
(	O
dp	pointer
->	O
d_name	array
[	O
1	int
]	O
!=	O
'.'	O
||	O
dp	pointer
->	O
d_name	array
[	O
2	int
]	O
!=	O
'\0'	O
)	O
)	O
)	O
{	O
empty	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
CLOSEDIR	O
(	O
d	double
)	O
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"%s"	pointer
,	O
safely_quote_err_filename	function
(	O
0	int
,	O
pathname	pointer
)	O
)	O
;	O
state	pointer
.	O
exit_status	int
=	O
1	int
;	O
return	O
false	int
;	O
}	O
return	O
(	O
empty	bool
)	O
;	O
}	O
else	O
if	O
(	O
S_ISREG	O
(	O
stat_buf	pointer
->	O
st_mode	int
)	O
)	O
return	O
(	O
stat_buf	pointer
->	O
st_size	long
==	O
0	int
)	O
;	O
else	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_exec	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
return	O
impl_pred_exec	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
)	O
;	O
}	O
bool	bool
pred_execdir	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
&	O
pathname	pointer
;	O
return	O
impl_pred_exec	function
(	O
state	pointer
.	O
rel_pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
)	O
;	O
}	O
bool	bool
pred_false	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
&	O
pathname	pointer
;	O
(	O
void	O
)	O
&	O
stat_buf	pointer
;	O
(	O
void	O
)	O
&	O
pred_ptr	pointer
;	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_fls	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
FILE	struct
*	O
stream	pointer
=	O
pred_ptr	pointer
->	O
args	union
.	O
printf_vec	struct
.	O
stream	pointer
;	O
list_file	function
(	O
pathname	pointer
,	O
state	pointer
.	O
cwd_dir_fd	int
,	O
state	pointer
.	O
rel_pathname	pointer
,	O
stat_buf	pointer
,	O
options	struct
.	O
start_time	struct
.	O
tv_sec	long
,	O
options	struct
.	O
output_block_size	int
,	O
pred_ptr	pointer
->	O
literal_control_chars	bool
,	O
stream	pointer
)	O
;	O
return	O
true	int
;	O
}	O
bool	bool
pred_fprint	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
&	O
pathname	pointer
;	O
(	O
void	O
)	O
&	O
stat_buf	pointer
;	O
print_quoted	function
(	O
pred_ptr	pointer
->	O
args	union
.	O
printf_vec	struct
.	O
stream	pointer
,	O
pred_ptr	pointer
->	O
args	union
.	O
printf_vec	struct
.	O
quote_opts	pointer
,	O
pred_ptr	pointer
->	O
args	union
.	O
printf_vec	struct
.	O
dest_is_tty	bool
,	O
"%s\n"	pointer
,	O
pathname	pointer
)	O
;	O
return	O
true	int
;	O
}	O
bool	bool
pred_fprint0	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
=	O
pred_ptr	pointer
->	O
args	union
.	O
printf_vec	struct
.	O
stream	pointer
;	O
(	O
void	O
)	O
&	O
stat_buf	pointer
;	O
fputs	function
(	O
pathname	pointer
,	O
fp	pointer
)	O
;	O
putc	function
(	O
0	int
,	O
fp	pointer
)	O
;	O
return	O
true	int
;	O
}	O
bool	bool
pred_fstype	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
if	O
(	O
strcmp	function
(	O
filesystem_type	function
(	O
stat_buf	pointer
,	O
pathname	pointer
)	O
,	O
pred_ptr	pointer
->	O
args	union
.	O
str	pointer
)	O
==	O
0	int
)	O
return	O
true	int
;	O
else	O
return	O
false	int
;	O
}	O
bool	bool
pred_gid	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
switch	O
(	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
kind	enum
)	O
{	O
case	O
COMP_GT	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_gid	int
>	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
case	O
COMP_LT	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_gid	int
<	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
case	O
COMP_EQ	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_gid	int
==	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
}	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_group	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
if	O
(	O
pred_ptr	pointer
->	O
args	union
.	O
gid	int
==	O
stat_buf	pointer
->	O
st_gid	int
)	O
return	O
(	O
true	int
)	O
;	O
else	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_ilname	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
return	O
match_lname	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
,	O
true	int
)	O
;	O
}	O
static	O
bool	bool
pred_name_common	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
int	O
flags	int
)	O
{	O
bool	bool
b	pointer
;	O
char	O
*	O
base	int
=	O
base_name	function
(	O
pathname	pointer
)	O
;	O
strip_trailing_slashes	function
(	O
base	int
)	O
;	O
b	pointer
=	O
fnmatch	function
(	O
str	pointer
,	O
base	int
,	O
flags	int
)	O
==	O
0	int
;	O
free	function
(	O
base	int
)	O
;	O
return	O
b	pointer
;	O
}	O
bool	bool
pred_iname	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
stat_buf	pointer
;	O
return	O
pred_name_common	function
(	O
pathname	pointer
,	O
pred_ptr	pointer
->	O
args	union
.	O
str	pointer
,	O
FNM_CASEFOLD	O
)	O
;	O
}	O
bool	bool
pred_inum	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
assert	O
(	O
stat_buf	pointer
->	O
st_ino	long
!=	O
0	int
)	O
;	O
switch	O
(	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
kind	enum
)	O
{	O
case	O
COMP_GT	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_ino	long
>	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
case	O
COMP_LT	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_ino	long
<	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
case	O
COMP_EQ	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_ino	long
==	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
}	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_ipath	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
stat_buf	pointer
;	O
if	O
(	O
fnmatch	function
(	O
pred_ptr	pointer
->	O
args	union
.	O
str	pointer
,	O
pathname	pointer
,	O
FNM_CASEFOLD	O
)	O
==	O
0	int
)	O
return	O
(	O
true	int
)	O
;	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_links	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
switch	O
(	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
kind	enum
)	O
{	O
case	O
COMP_GT	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_nlink	long
>	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
case	O
COMP_LT	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_nlink	long
<	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
case	O
COMP_EQ	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_nlink	long
==	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
}	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_lname	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
return	O
match_lname	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
,	O
false	int
)	O
;	O
}	O
static	O
bool	bool
match_lname	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
,	O
bool	bool
ignore_case	bool
)	O
{	O
bool	bool
ret	bool
=	O
false	int
;	O
if	O
(	O
S_ISLNK	O
(	O
stat_buf	pointer
->	O
st_mode	int
)	O
)	O
{	O
char	O
*	O
linkname	pointer
=	O
areadlinkat	function
(	O
state	pointer
.	O
cwd_dir_fd	int
,	O
state	pointer
.	O
rel_pathname	pointer
)	O
;	O
if	O
(	O
linkname	pointer
)	O
{	O
if	O
(	O
fnmatch	function
(	O
pred_ptr	pointer
->	O
args	union
.	O
str	pointer
,	O
linkname	pointer
,	O
ignore_case	bool
?	O
FNM_CASEFOLD	O
:	O
0	int
)	O
==	O
0	int
)	O
ret	bool
=	O
true	int
;	O
}	O
else	O
{	O
nonfatal_target_file_error	function
(	O
errno	O
,	O
pathname	pointer
)	O
;	O
state	pointer
.	O
exit_status	int
=	O
1	int
;	O
}	O
free	function
(	O
linkname	pointer
)	O
;	O
}	O
return	O
ret	bool
;	O
}	O
bool	bool
pred_ls	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
return	O
pred_fls	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
)	O
;	O
}	O
bool	bool
pred_mmin	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
&	O
pathname	pointer
;	O
return	O
pred_timewindow	function
(	O
get_stat_mtime	function
(	O
stat_buf	pointer
)	O
,	O
pred_ptr	pointer
,	O
60	int
)	O
;	O
}	O
bool	bool
pred_mtime	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
return	O
pred_timewindow	function
(	O
get_stat_mtime	function
(	O
stat_buf	pointer
)	O
,	O
pred_ptr	pointer
,	O
DAYSECS	int
)	O
;	O
}	O
bool	bool
pred_name	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
stat_buf	pointer
;	O
return	O
pred_name_common	function
(	O
pathname	pointer
,	O
pred_ptr	pointer
->	O
args	union
.	O
str	pointer
,	O
0	int
)	O
;	O
}	O
bool	bool
pred_negate	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
return	O
!	O
apply_predicate	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
->	O
pred_right	pointer
)	O
;	O
}	O
bool	bool
pred_newer	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
assert	O
(	O
COMP_GT	int
==	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
kind	enum
)	O
;	O
return	O
compare_ts	function
(	O
get_stat_mtime	function
(	O
stat_buf	pointer
)	O
,	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
ts	struct
)	O
>	O
0	int
;	O
}	O
bool	bool
pred_newerXY	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
struct	O
timespec	struct
ts	struct
;	O
bool	bool
collected	bool
=	O
false	int
;	O
assert	O
(	O
COMP_GT	int
==	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
kind	enum
)	O
;	O
switch	O
(	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
xval	enum
)	O
{	O
case	O
XVAL_TIME	int
:	O
assert	O
(	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
xval	enum
!=	O
XVAL_TIME	int
)	O
;	O
return	O
false	int
;	O
case	O
XVAL_ATIME	int
:	O
ts	struct
=	O
get_stat_atime	function
(	O
stat_buf	pointer
)	O
;	O
collected	bool
=	O
true	int
;	O
break	O
;	O
case	O
XVAL_BIRTHTIME	int
:	O
ts	struct
=	O
get_stat_birthtime	function
(	O
stat_buf	pointer
)	O
;	O
collected	bool
=	O
true	int
;	O
if	O
(	O
ts	struct
.	O
tv_nsec	long
<	O
0	int
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"WARNING: cannot determine birth time of file %s"	pointer
)	O
,	O
safely_quote_err_filename	function
(	O
0	int
,	O
pathname	pointer
)	O
)	O
;	O
return	O
false	int
;	O
}	O
break	O
;	O
case	O
XVAL_CTIME	int
:	O
ts	struct
=	O
get_stat_ctime	function
(	O
stat_buf	pointer
)	O
;	O
collected	bool
=	O
true	int
;	O
break	O
;	O
case	O
XVAL_MTIME	int
:	O
ts	struct
=	O
get_stat_mtime	function
(	O
stat_buf	pointer
)	O
;	O
collected	bool
=	O
true	int
;	O
break	O
;	O
}	O
assert	O
(	O
collected	bool
)	O
;	O
return	O
compare_ts	function
(	O
ts	struct
,	O
pred_ptr	pointer
->	O
args	union
.	O
reftime	struct
.	O
ts	struct
)	O
>	O
0	int
;	O
}	O
bool	bool
pred_nogroup	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
return	O
getgrgid	function
(	O
stat_buf	pointer
->	O
st_gid	int
)	O
==	O
NULL	O
;	O
}	O
bool	bool
pred_nouser	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
return	O
getpwuid	function
(	O
stat_buf	pointer
->	O
st_uid	int
)	O
==	O
NULL	O
;	O
}	O
static	O
bool	bool
is_ok	function
(	O
const	O
char	O
*	O
program	pointer
,	O
const	O
char	O
*	O
arg	pointer
)	O
{	O
fflush	function
(	O
stdout	pointer
)	O
;	O
if	O
(	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"< %s ... %s > ? "	pointer
)	O
,	O
program	pointer
,	O
arg	pointer
)	O
<	O
0	int
)	O
{	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"Failed to write prompt for -ok"	pointer
)	O
)	O
;	O
}	O
fflush	function
(	O
stderr	pointer
)	O
;	O
return	O
yesno	function
(	O
)	O
;	O
}	O
bool	bool
pred_ok	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
if	O
(	O
is_ok	function
(	O
pred_ptr	pointer
->	O
args	union
.	O
exec_vec	struct
.	O
replace_vec	pointer
[	O
0	int
]	O
,	O
pathname	pointer
)	O
)	O
return	O
impl_pred_exec	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
)	O
;	O
else	O
return	O
false	int
;	O
}	O
bool	bool
pred_okdir	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
if	O
(	O
is_ok	function
(	O
pred_ptr	pointer
->	O
args	union
.	O
exec_vec	struct
.	O
replace_vec	pointer
[	O
0	int
]	O
,	O
pathname	pointer
)	O
)	O
return	O
impl_pred_exec	function
(	O
state	pointer
.	O
rel_pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
)	O
;	O
else	O
return	O
false	int
;	O
}	O
bool	bool
pred_openparen	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
(	O
void	O
)	O
stat_buf	pointer
;	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
return	O
true	int
;	O
}	O
bool	bool
pred_or	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
if	O
(	O
pred_ptr	pointer
->	O
pred_left	pointer
==	O
NULL	O
||	O
!	O
apply_predicate	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
->	O
pred_left	pointer
)	O
)	O
{	O
return	O
apply_predicate	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
->	O
pred_right	pointer
)	O
;	O
}	O
else	O
return	O
true	int
;	O
}	O
bool	bool
pred_path	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
stat_buf	pointer
;	O
if	O
(	O
fnmatch	function
(	O
pred_ptr	pointer
->	O
args	union
.	O
str	pointer
,	O
pathname	pointer
,	O
0	int
)	O
==	O
0	int
)	O
return	O
(	O
true	int
)	O
;	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_perm	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
mode_t	int
mode	int
=	O
stat_buf	pointer
->	O
st_mode	int
;	O
mode_t	int
perm_val	struct
=	O
pred_ptr	pointer
->	O
args	union
.	O
perm	int
.	O
val	array
[	O
S_ISDIR	O
(	O
mode	int
)	O
!=	O
0	int
]	O
;	O
(	O
void	O
)	O
pathname	pointer
;	O
switch	O
(	O
pred_ptr	pointer
->	O
args	union
.	O
perm	int
.	O
kind	enum
)	O
{	O
case	O
PERM_AT_LEAST	int
:	O
return	O
(	O
mode	int
&	O
perm_val	struct
)	O
==	O
perm_val	struct
;	O
break	O
;	O
case	O
PERM_ANY	int
:	O
if	O
(	O
0	int
==	O
perm_val	struct
)	O
return	O
true	int
;	O
else	O
return	O
(	O
mode	int
&	O
perm_val	struct
)	O
!=	O
0	int
;	O
break	O
;	O
case	O
PERM_EXACT	int
:	O
return	O
(	O
mode	int
&	O
MODE_ALL	O
)	O
==	O
perm_val	struct
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
break	O
;	O
}	O
}	O
bool	bool
pred_executable	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
(	O
void	O
)	O
stat_buf	pointer
;	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
return	O
0	int
==	O
faccessat	function
(	O
state	pointer
.	O
cwd_dir_fd	int
,	O
state	pointer
.	O
rel_pathname	pointer
,	O
X_OK	int
,	O
0	int
)	O
;	O
}	O
bool	bool
pred_readable	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
(	O
void	O
)	O
stat_buf	pointer
;	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
return	O
0	int
==	O
faccessat	function
(	O
state	pointer
.	O
cwd_dir_fd	int
,	O
state	pointer
.	O
rel_pathname	pointer
,	O
R_OK	int
,	O
0	int
)	O
;	O
}	O
bool	bool
pred_writable	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
(	O
void	O
)	O
stat_buf	pointer
;	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
return	O
0	int
==	O
faccessat	function
(	O
state	pointer
.	O
cwd_dir_fd	int
,	O
state	pointer
.	O
rel_pathname	pointer
,	O
W_OK	int
,	O
0	int
)	O
;	O
}	O
bool	bool
pred_print	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
stat_buf	pointer
;	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
print_quoted	function
(	O
pred_ptr	pointer
->	O
args	union
.	O
printf_vec	struct
.	O
stream	pointer
,	O
pred_ptr	pointer
->	O
args	union
.	O
printf_vec	struct
.	O
quote_opts	pointer
,	O
pred_ptr	pointer
->	O
args	union
.	O
printf_vec	struct
.	O
dest_is_tty	bool
,	O
"%s\n"	pointer
,	O
pathname	pointer
)	O
;	O
return	O
true	int
;	O
}	O
bool	bool
pred_print0	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
return	O
pred_fprint0	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
)	O
;	O
}	O
bool	bool
pred_prune	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
if	O
(	O
options	struct
.	O
do_dir_first	bool
==	O
true	int
)	O
{	O
assert	O
(	O
state	pointer
.	O
have_stat	bool
)	O
;	O
if	O
(	O
stat_buf	pointer
!=	O
NULL	O
&&	O
S_ISDIR	O
(	O
stat_buf	pointer
->	O
st_mode	int
)	O
)	O
state	pointer
.	O
stop_at_current_level	bool
=	O
true	int
;	O
}	O
return	O
true	int
;	O
}	O
bool	bool
pred_quit	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
(	O
void	O
)	O
stat_buf	pointer
;	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
cleanup	function
(	O
)	O
;	O
exit	function
(	O
state	pointer
.	O
exit_status	int
)	O
;	O
}	O
bool	bool
pred_regex	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
int	O
len	long
=	O
strlen	function
(	O
pathname	pointer
)	O
;	O
(	O
void	O
)	O
stat_buf	pointer
;	O
if	O
(	O
re_match	function
(	O
pred_ptr	pointer
->	O
args	union
.	O
regex	pointer
,	O
pathname	pointer
,	O
len	long
,	O
0	int
,	O
(	O
struct	O
re_registers	struct
*	O
)	O
NULL	O
)	O
==	O
len	long
)	O
return	O
(	O
true	int
)	O
;	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_size	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
uintmax_t	long
f_val	long
;	O
(	O
void	O
)	O
pathname	pointer
;	O
f_val	long
=	O
(	O
(	O
stat_buf	pointer
->	O
st_size	long
/	O
pred_ptr	pointer
->	O
args	union
.	O
size	pointer
.	O
blocksize	int
)	O
+	O
(	O
stat_buf	pointer
->	O
st_size	long
%	O
pred_ptr	pointer
->	O
args	union
.	O
size	pointer
.	O
blocksize	int
!=	O
0	int
)	O
)	O
;	O
switch	O
(	O
pred_ptr	pointer
->	O
args	union
.	O
size	pointer
.	O
kind	enum
)	O
{	O
case	O
COMP_GT	int
:	O
if	O
(	O
f_val	long
>	O
pred_ptr	pointer
->	O
args	union
.	O
size	pointer
.	O
size	pointer
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
case	O
COMP_LT	int
:	O
if	O
(	O
f_val	long
<	O
pred_ptr	pointer
->	O
args	union
.	O
size	pointer
.	O
size	pointer
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
case	O
COMP_EQ	int
:	O
if	O
(	O
f_val	long
==	O
pred_ptr	pointer
->	O
args	union
.	O
size	pointer
.	O
size	pointer
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
}	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_samefile	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
if	O
(	O
stat_buf	pointer
->	O
st_ino	long
)	O
{	O
if	O
(	O
stat_buf	pointer
->	O
st_ino	long
!=	O
pred_ptr	pointer
->	O
args	union
.	O
samefileid	struct
.	O
ino	long
)	O
return	O
false	int
;	O
}	O
if	O
(	O
0	int
==	O
get_statinfo	function
(	O
pathname	pointer
,	O
state	pointer
.	O
rel_pathname	pointer
,	O
stat_buf	pointer
)	O
)	O
{	O
return	O
stat_buf	pointer
->	O
st_ino	long
==	O
pred_ptr	pointer
->	O
args	union
.	O
samefileid	struct
.	O
ino	long
&&	O
stat_buf	pointer
->	O
st_dev	long
==	O
pred_ptr	pointer
->	O
args	union
.	O
samefileid	struct
.	O
dev	long
;	O
}	O
else	O
{	O
return	O
false	int
;	O
}	O
}	O
bool	bool
pred_true	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
(	O
void	O
)	O
stat_buf	pointer
;	O
(	O
void	O
)	O
pred_ptr	pointer
;	O
return	O
true	int
;	O
}	O
bool	bool
pred_type	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
mode_t	int
mode	int
;	O
mode_t	int
type	enum
=	O
pred_ptr	pointer
->	O
args	union
.	O
type	enum
;	O
assert	O
(	O
state	pointer
.	O
have_type	bool
)	O
;	O
if	O
(	O
0	int
==	O
state	pointer
.	O
type	enum
)	O
{	O
return	O
false	int
;	O
}	O
(	O
void	O
)	O
pathname	pointer
;	O
if	O
(	O
state	pointer
.	O
have_stat	bool
)	O
mode	int
=	O
stat_buf	pointer
->	O
st_mode	int
;	O
else	O
mode	int
=	O
state	pointer
.	O
type	enum
;	O
if	O
(	O
(	O
mode	int
&	O
S_IFMT	O
)	O
==	O
type	enum
)	O
return	O
(	O
true	int
)	O
;	O
else	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_uid	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
switch	O
(	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
kind	enum
)	O
{	O
case	O
COMP_GT	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_uid	int
>	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
case	O
COMP_LT	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_uid	int
<	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
case	O
COMP_EQ	int
:	O
if	O
(	O
stat_buf	pointer
->	O
st_uid	int
==	O
pred_ptr	pointer
->	O
args	union
.	O
numinfo	struct
.	O
l_val	long
)	O
return	O
(	O
true	int
)	O
;	O
break	O
;	O
}	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_used	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
struct	O
timespec	struct
delta	double
,	O
at	struct
,	O
ct	struct
;	O
(	O
void	O
)	O
pathname	pointer
;	O
at	struct
=	O
get_stat_atime	function
(	O
stat_buf	pointer
)	O
;	O
ct	struct
=	O
get_stat_ctime	function
(	O
stat_buf	pointer
)	O
;	O
delta	double
.	O
tv_sec	long
=	O
at	struct
.	O
tv_sec	long
-	O
ct	struct
.	O
tv_sec	long
;	O
delta	double
.	O
tv_nsec	long
=	O
at	struct
.	O
tv_nsec	long
-	O
ct	struct
.	O
tv_nsec	long
;	O
if	O
(	O
delta	double
.	O
tv_nsec	long
<	O
0	int
)	O
{	O
delta	double
.	O
tv_nsec	long
+=	O
1000000000	int
;	O
delta	double
.	O
tv_sec	long
-=	O
1	int
;	O
}	O
return	O
pred_timewindow	function
(	O
delta	double
,	O
pred_ptr	pointer
,	O
DAYSECS	int
)	O
;	O
}	O
bool	bool
pred_user	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
(	O
void	O
)	O
pathname	pointer
;	O
if	O
(	O
pred_ptr	pointer
->	O
args	union
.	O
uid	int
==	O
stat_buf	pointer
->	O
st_uid	int
)	O
return	O
(	O
true	int
)	O
;	O
else	O
return	O
(	O
false	int
)	O
;	O
}	O
bool	bool
pred_xtype	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
struct	O
stat	struct
sbuf	struct
;	O
int	O
(	O
*	O
ystat	pointer
)	O
(	O
const	O
char	O
*	O
,	O
struct	O
stat	struct
*	O
p	pointer
)	O
;	O
if	O
(	O
following_links	function
(	O
)	O
)	O
ystat	pointer
=	O
optionp_stat	function
;	O
else	O
ystat	pointer
=	O
optionl_stat	function
;	O
set_stat_placeholders	function
(	O
&	O
sbuf	struct
)	O
;	O
if	O
(	O
(	O
*	O
ystat	pointer
)	O
(	O
state	pointer
.	O
rel_pathname	pointer
,	O
&	O
sbuf	struct
)	O
!=	O
0	int
)	O
{	O
if	O
(	O
following_links	function
(	O
)	O
&&	O
errno	O
==	O
ENOENT	int
)	O
{	O
return	O
(	O
pred_type	function
(	O
pathname	pointer
,	O
stat_buf	pointer
,	O
pred_ptr	pointer
)	O
)	O
;	O
}	O
else	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
"%s"	pointer
,	O
safely_quote_err_filename	function
(	O
0	int
,	O
pathname	pointer
)	O
)	O
;	O
state	pointer
.	O
exit_status	int
=	O
1	int
;	O
}	O
return	O
false	int
;	O
}	O
return	O
(	O
pred_type	function
(	O
pathname	pointer
,	O
&	O
sbuf	struct
,	O
pred_ptr	pointer
)	O
)	O
;	O
}	O
bool	bool
pred_context	function
(	O
const	O
char	O
*	O
pathname	pointer
,	O
struct	O
stat	struct
*	O
stat_buf	pointer
,	O
struct	O
predicate	struct
*	O
pred_ptr	pointer
)	O
{	O
security_context_t	pointer
scontext	pointer
;	O
int	O
rv	int
=	O
(	O
*	O
options	struct
.	O
x_getfilecon	pointer
)	O
(	O
state	pointer
.	O
cwd_dir_fd	int
,	O
state	pointer
.	O
rel_pathname	pointer
,	O
&	O
scontext	pointer
)	O
;	O
(	O
void	O
)	O
stat_buf	pointer
;	O
if	O
(	O
rv	int
<	O
0	int
)	O
{	O
error	function
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"getfilecon failed: %s"	pointer
)	O
,	O
safely_quote_err_filename	function
(	O
0	int
,	O
pathname	pointer
)	O
)	O
;	O
return	O
false	int
;	O
}	O
rv	int
=	O
(	O
fnmatch	function
(	O
pred_ptr	pointer
->	O
args	union
.	O
scontext	pointer
,	O
scontext	pointer
,	O
0	int
)	O
==	O
0	int
)	O
;	O
freecon	function
(	O
scontext	pointer
)	O
;	O
return	O
rv	int
;	O
}	O
static	O
char	O
*	O
blank_rtrim	function
(	O
const	O
char	O
*	O
str	pointer
,	O
char	O
*	O
buf	pointer
)	O
{	O
int	O
i	int
;	O
if	O
(	O
str	pointer
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
strcpy	function
(	O
buf	pointer
,	O
str	pointer
)	O
;	O
i	int
=	O
strlen	function
(	O
buf	pointer
)	O
-	O
1	int
;	O
while	O
(	O
(	O
i	int
>=	O
0	int
)	O
&&	O
(	O
(	O
buf	pointer
[	O
i	int
]	O
==	O
' '	O
)	O
||	O
buf	pointer
[	O
i	int
]	O
==	O
'\t'	O
)	O
)	O
i	int
--	O
;	O
buf	pointer
[	O
++	O
i	int
]	O
=	O
'\0'	O
;	O
return	O
buf	pointer
;	O
}	O
void	O
print_list	function
(	O
FILE	struct
*	O
fp	pointer
,	O
struct	O
predicate	struct
*	O
node	pointer
)	O
{	O
struct	O
predicate	struct
*	O
cur	pointer
;	O
char	O
name	pointer
[	O
256	int
]	O
;	O
cur	pointer
=	O
node	pointer
;	O
while	O
(	O
cur	pointer
!=	O
NULL	O
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"[%s] "	pointer
,	O
blank_rtrim	function
(	O
cur	pointer
->	O
p_name	pointer
,	O
name	pointer
)	O
)	O
;	O
cur	pointer
=	O
cur	pointer
->	O
pred_next	pointer
;	O
}	O
fprintf	function
(	O
fp	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
print_parenthesised	function
(	O
FILE	struct
*	O
fp	pointer
,	O
struct	O
predicate	struct
*	O
node	pointer
)	O
{	O
int	O
parens	int
=	O
0	int
;	O
if	O
(	O
node	pointer
)	O
{	O
if	O
(	O
(	O
pred_is	O
(	O
node	pointer
,	O
pred_or	function
)	O
||	O
pred_is	O
(	O
node	pointer
,	O
pred_and	function
)	O
)	O
&&	O
node	pointer
->	O
pred_left	pointer
==	O
NULL	O
)	O
{	O
print_parenthesised	function
(	O
fp	pointer
,	O
node	pointer
->	O
pred_right	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
node	pointer
->	O
pred_left	pointer
||	O
node	pointer
->	O
pred_right	pointer
)	O
parens	int
=	O
1	int
;	O
if	O
(	O
parens	int
)	O
fprintf	function
(	O
fp	pointer
,	O
"%s"	pointer
,	O
" ( "	pointer
)	O
;	O
print_optlist	function
(	O
fp	pointer
,	O
node	pointer
)	O
;	O
if	O
(	O
parens	int
)	O
fprintf	function
(	O
fp	pointer
,	O
"%s"	pointer
,	O
" ) "	pointer
)	O
;	O
}	O
}	O
}	O
void	O
print_optlist	function
(	O
FILE	struct
*	O
fp	pointer
,	O
const	O
struct	O
predicate	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
)	O
{	O
print_parenthesised	function
(	O
fp	pointer
,	O
p	pointer
->	O
pred_left	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
"%s%s%s"	pointer
,	O
p	pointer
->	O
need_stat	bool
?	O
"[call stat] "	pointer
:	O
""	pointer
,	O
p	pointer
->	O
need_type	bool
?	O
"[need type] "	pointer
:	O
""	pointer
,	O
p	pointer
->	O
need_inum	bool
?	O
"[need inum] "	pointer
:	O
""	pointer
)	O
;	O
print_predicate	function
(	O
fp	pointer
,	O
p	pointer
)	O
;	O
fprintf	function
(	O
fp	pointer
,	O
" [%g] "	pointer
,	O
p	pointer
->	O
est_success_rate	float
)	O
;	O
if	O
(	O
options	struct
.	O
debug_options	long
&	O
DebugSuccessRates	int
)	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"[%ld/%ld"	pointer
,	O
p	pointer
->	O
perf	struct
.	O
successes	long
,	O
p	pointer
->	O
perf	struct
.	O
visits	long
)	O
;	O
if	O
(	O
p	pointer
->	O
perf	struct
.	O
visits	long
)	O
{	O
double	O
real_rate	double
=	O
(	O
double	O
)	O
p	pointer
->	O
perf	struct
.	O
successes	long
/	O
(	O
double	O
)	O
p	pointer
->	O
perf	struct
.	O
visits	long
;	O
fprintf	function
(	O
fp	pointer
,	O
"=%g] "	pointer
,	O
real_rate	double
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
fp	pointer
,	O
"=_] "	pointer
)	O
;	O
}	O
}	O
print_parenthesised	function
(	O
fp	pointer
,	O
p	pointer
->	O
pred_right	pointer
)	O
;	O
}	O
}	O
void	O
show_success_rates	function
(	O
const	O
struct	O
predicate	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
options	struct
.	O
debug_options	long
&	O
DebugSuccessRates	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Predicate success rates after completion:\n"	pointer
)	O
;	O
print_optlist	function
(	O
stderr	pointer
,	O
p	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
void	O
pred_sanity_check	function
(	O
const	O
struct	O
predicate	struct
*	O
predicates	pointer
)	O
{	O
const	O
struct	O
predicate	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
predicates	pointer
;	O
p	pointer
!=	O
NULL	O
;	O
p	pointer
=	O
p	pointer
->	O
pred_next	pointer
)	O
{	O
assert	O
(	O
p	pointer
->	O
pred_func	pointer
!=	O
NULL	O
)	O
;	O
assert	O
(	O
p	pointer
->	O
parser_entry	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
p	pointer
->	O
parser_entry	pointer
->	O
pred_func	pointer
)	O
{	O
assert	O
(	O
p	pointer
->	O
parser_entry	pointer
->	O
pred_func	pointer
==	O
p	pointer
->	O
pred_func	pointer
)	O
;	O
}	O
switch	O
(	O
p	pointer
->	O
parser_entry	pointer
->	O
type	enum
)	O
{	O
case	O
ARG_OPTION	int
:	O
case	O
ARG_POSITIONAL_OPTION	int
:	O
assert	O
(	O
p	pointer
->	O
parser_entry	pointer
->	O
type	enum
!=	O
ARG_OPTION	int
)	O
;	O
assert	O
(	O
p	pointer
->	O
parser_entry	pointer
->	O
type	enum
!=	O
ARG_POSITIONAL_OPTION	int
)	O
;	O
break	O
;	O
case	O
ARG_ACTION	int
:	O
assert	O
(	O
p	pointer
->	O
side_effects	bool
)	O
;	O
if	O
(	O
!	O
pred_is	O
(	O
p	pointer
,	O
pred_prune	function
)	O
&&	O
!	O
pred_is	O
(	O
p	pointer
,	O
pred_quit	function
)	O
)	O
{	O
assert	O
(	O
p	pointer
->	O
no_default_print	bool
)	O
;	O
}	O
break	O
;	O
case	O
ARG_SPECIAL_PARSE	int
:	O
case	O
ARG_TEST	int
:	O
case	O
ARG_PUNCTUATION	int
:	O
case	O
ARG_NOOP	int
:	O
assert	O
(	O
!	O
p	pointer
->	O
no_default_print	bool
)	O
;	O
assert	O
(	O
!	O
p	pointer
->	O
side_effects	bool
)	O
;	O
break	O
;	O
}	O
}	O
}	O
