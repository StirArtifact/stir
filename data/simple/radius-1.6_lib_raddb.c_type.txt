static	O
int	O
get_argcv	function
(	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
delim	pointer
,	O
size_t	long
*	O
pargc	pointer
,	O
char	O
*	O
*	O
*	O
pargv	pointer
)	O
{	O
int	O
n	long
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
if	O
(	O
n	long
=	O
grad_argcv_get	function
(	O
str	pointer
,	O
delim	pointer
,	O
"#"	pointer
,	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
)	O
{	O
grad_argcv_free	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
return	O
n	long
;	O
}	O
*	O
pargc	pointer
=	O
argc	int
;	O
*	O
pargv	pointer
=	O
argv	pointer
;	O
return	O
0	int
;	O
}	O
static	O
int	O
continuation_line_p	function
(	O
const	O
char	O
*	O
str	pointer
,	O
const	O
char	O
*	O
delim	pointer
)	O
{	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
int	O
rc	int
=	O
get_argcv	function
(	O
str	pointer
,	O
delim	pointer
,	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
==	O
0	int
&&	O
argc	int
>	O
0	int
&&	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
[	O
strlen	function
(	O
argv	pointer
[	O
argc	int
-	O
1	int
]	O
)	O
-	O
1	int
]	O
==	O
'\\'	O
;	O
grad_argcv_free	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
grad_read_raddb_file	function
(	O
char	O
*	O
filename	pointer
,	O
int	O
vital	int
,	O
char	O
*	O
delim	pointer
,	O
int	O
(	O
*	O
fun	pointer
)	O
(	O
)	O
,	O
void	O
*	O
closure	pointer
)	O
{	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	pointer
;	O
grad_locus_t	struct
loc	struct
;	O
int	O
fd	int
;	O
struct	O
stat	struct
st	struct
;	O
char	O
*	O
buffer	pointer
,	O
*	O
lineptr	pointer
,	O
*	O
endp	pointer
,	O
*	O
p	pointer
;	O
size_t	long
rdsize	long
;	O
if	O
(	O
stat	struct
(	O
filename	pointer
,	O
&	O
st	struct
)	O
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't stat `%s'"	pointer
)	O
,	O
filename	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
fd	int
=	O
open	function
(	O
filename	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
vital	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't open file `%s'"	pointer
)	O
,	O
filename	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
grad_log	function
(	O
GRAD_LOG_NOTICE	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't open file `%s'"	pointer
)	O
,	O
filename	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
buffer	pointer
=	O
grad_malloc	function
(	O
st	struct
.	O
st_size	long
+	O
1	int
)	O
;	O
for	O
(	O
lineptr	pointer
=	O
buffer	pointer
,	O
rdsize	long
=	O
st	struct
.	O
st_size	long
;	O
rdsize	long
;	O
)	O
{	O
ssize_t	long
s	pointer
=	O
read	function
(	O
fd	int
,	O
lineptr	pointer
,	O
rdsize	long
)	O
;	O
if	O
(	O
s	pointer
<=	O
0	int
)	O
{	O
if	O
(	O
s	pointer
==	O
-	O
1	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"%s: read error"	pointer
)	O
,	O
filename	pointer
)	O
;	O
}	O
else	O
if	O
(	O
s	pointer
==	O
0	int
)	O
grad_log	function
(	O
GRAD_LOG_WARN	int
,	O
_	O
(	O
"%s: short read"	pointer
)	O
,	O
filename	pointer
)	O
;	O
grad_free	function
(	O
buffer	pointer
)	O
;	O
close	function
(	O
fd	int
)	O
;	O
return	O
1	int
;	O
}	O
rdsize	long
-=	O
s	pointer
;	O
lineptr	pointer
+=	O
s	pointer
;	O
}	O
*	O
lineptr	pointer
=	O
0	int
;	O
close	function
(	O
fd	int
)	O
;	O
if	O
(	O
!	O
delim	pointer
)	O
delim	pointer
=	O
""	pointer
;	O
loc	struct
.	O
file	pointer
=	O
filename	pointer
;	O
loc	struct
.	O
line	long
=	O
0	int
;	O
lineptr	pointer
=	O
buffer	pointer
;	O
for	O
(	O
p	pointer
=	O
endp	pointer
=	O
lineptr	pointer
;	O
*	O
endp	pointer
;	O
)	O
{	O
if	O
(	O
endp	pointer
[	O
0	int
]	O
==	O
'\\'	O
&&	O
endp	pointer
[	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
endp	pointer
[	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
continuation_line_p	function
(	O
lineptr	pointer
,	O
delim	pointer
)	O
)	O
{	O
endp	pointer
+=	O
2	int
;	O
lineptr	pointer
=	O
endp	pointer
;	O
continue	O
;	O
}	O
else	O
endp	pointer
[	O
1	int
]	O
=	O
'\n'	O
;	O
}	O
else	O
if	O
(	O
endp	pointer
[	O
0	int
]	O
==	O
'\n'	O
)	O
lineptr	pointer
=	O
endp	pointer
;	O
*	O
p	pointer
++	O
=	O
*	O
endp	pointer
++	O
;	O
}	O
*	O
p	pointer
=	O
0	int
;	O
lineptr	pointer
=	O
buffer	pointer
;	O
while	O
(	O
*	O
lineptr	pointer
)	O
{	O
char	O
*	O
str	pointer
;	O
for	O
(	O
endp	pointer
=	O
lineptr	pointer
;	O
*	O
endp	pointer
&&	O
*	O
endp	pointer
!=	O
'\n'	O
;	O
endp	pointer
++	O
)	O
;	O
if	O
(	O
*	O
endp	pointer
)	O
*	O
endp	pointer
++	O
=	O
0	int
;	O
loc	struct
.	O
line	long
++	O
;	O
str	pointer
=	O
lineptr	pointer
;	O
lineptr	pointer
=	O
endp	pointer
;	O
if	O
(	O
str	pointer
[	O
0	int
]	O
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
get_argcv	function
(	O
str	pointer
,	O
delim	pointer
,	O
&	O
argc	int
,	O
&	O
argv	pointer
)	O
==	O
0	int
&&	O
argc	int
)	O
fun	pointer
(	O
closure	pointer
,	O
argc	int
,	O
argv	pointer
,	O
&	O
loc	struct
)	O
;	O
if	O
(	O
argv	pointer
)	O
grad_argcv_free	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
}	O
grad_free	function
(	O
buffer	pointer
)	O
;	O
return	O
0	int
;	O
}	O
