static	O
struct	O
mu_hdrent	struct
*	O
mu_hdrent_nth	function
(	O
struct	O
_mu_header	struct
*	O
hdr	pointer
,	O
int	O
n	pointer
)	O
{	O
struct	O
mu_hdrent	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
hdr	pointer
->	O
head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
n	pointer
--	O
==	O
1	int
)	O
break	O
;	O
return	O
p	pointer
;	O
}	O
static	O
struct	O
mu_hdrent	struct
*	O
mu_hdrent_find	function
(	O
struct	O
_mu_header	struct
*	O
hdr	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
pos	long
)	O
{	O
struct	O
mu_hdrent	struct
*	O
p	pointer
;	O
if	O
(	O
pos	long
>	O
0	int
)	O
{	O
for	O
(	O
p	pointer
=	O
hdr	pointer
->	O
head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
if	O
(	O
(	O
!	O
name	pointer
||	O
mu_c_strcasecmp	function
(	O
MU_HDRENT_NAME	O
(	O
hdr	pointer
,	O
p	pointer
)	O
,	O
name	pointer
)	O
==	O
0	int
)	O
&&	O
pos	long
--	O
==	O
1	int
)	O
break	O
;	O
}	O
else	O
if	O
(	O
pos	long
<	O
0	int
)	O
{	O
for	O
(	O
p	pointer
=	O
hdr	pointer
->	O
tail	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
prev	pointer
)	O
if	O
(	O
(	O
!	O
name	pointer
||	O
mu_c_strcasecmp	function
(	O
MU_HDRENT_NAME	O
(	O
hdr	pointer
,	O
p	pointer
)	O
,	O
name	pointer
)	O
==	O
0	int
)	O
&&	O
++	O
pos	long
==	O
0	int
)	O
break	O
;	O
}	O
else	O
p	pointer
=	O
NULL	O
;	O
return	O
p	pointer
;	O
}	O
static	O
int	O
mu_hdrent_find_stream_pos	function
(	O
struct	O
_mu_header	struct
*	O
hdr	pointer
,	O
mu_off_t	long
pos	long
,	O
struct	O
mu_hdrent	struct
*	O
*	O
pent	pointer
,	O
size_t	long
*	O
poff	pointer
)	O
{	O
mu_off_t	long
x	long
;	O
struct	O
mu_hdrent	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
hdr	pointer
->	O
head	pointer
,	O
x	long
=	O
0	int
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
size_t	long
strsize	long
=	O
MU_STR_SIZE	O
(	O
p	pointer
->	O
nlen	long
,	O
p	pointer
->	O
vlen	long
)	O
;	O
if	O
(	O
x	long
<=	O
pos	long
&&	O
pos	long
<	O
x	long
+	O
strsize	long
)	O
{	O
*	O
poff	pointer
=	O
pos	long
-	O
x	long
;	O
*	O
pent	pointer
=	O
p	pointer
;	O
return	O
0	int
;	O
}	O
x	long
+=	O
strsize	long
;	O
}	O
if	O
(	O
x	long
==	O
pos	long
&&	O
hdr	pointer
->	O
tail	pointer
)	O
{	O
p	pointer
=	O
hdr	pointer
->	O
tail	pointer
;	O
*	O
pent	pointer
=	O
p	pointer
;	O
*	O
poff	pointer
=	O
MU_STR_SIZE	O
(	O
p	pointer
->	O
nlen	long
,	O
p	pointer
->	O
vlen	long
)	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
void	O
mu_hdrent_count	function
(	O
struct	O
_mu_header	struct
*	O
hdr	pointer
,	O
size_t	long
*	O
pcount	pointer
,	O
size_t	long
*	O
psize	pointer
,	O
size_t	long
*	O
plines	pointer
)	O
{	O
if	O
(	O
hdr	pointer
->	O
flags	int
&	O
HEADER_INVALIDATE	int
)	O
{	O
size_t	long
size	long
=	O
0	int
;	O
size_t	long
count	long
=	O
0	int
;	O
size_t	long
lines	long
=	O
0	int
;	O
struct	O
mu_hdrent	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
hdr	pointer
->	O
head	pointer
;	O
p	pointer
;	O
p	pointer
=	O
p	pointer
->	O
next	pointer
)	O
{	O
count	long
++	O
;	O
size	long
+=	O
MU_STR_SIZE	O
(	O
p	pointer
->	O
nlen	long
,	O
p	pointer
->	O
vlen	long
)	O
;	O
lines	long
+=	O
p	pointer
->	O
nlines	long
;	O
}	O
hdr	pointer
->	O
numhdr	long
=	O
count	long
;	O
hdr	pointer
->	O
numlines	long
=	O
lines	long
;	O
hdr	pointer
->	O
size	long
=	O
size	long
;	O
hdr	pointer
->	O
flags	int
&=	O
~	O
HEADER_INVALIDATE	int
;	O
}	O
*	O
pcount	pointer
=	O
hdr	pointer
->	O
numhdr	long
;	O
*	O
psize	pointer
=	O
hdr	pointer
->	O
size	long
;	O
*	O
plines	pointer
=	O
hdr	pointer
->	O
numlines	long
;	O
}	O
static	O
void	O
mu_hdrent_remove	function
(	O
struct	O
_mu_header	struct
*	O
hdr	pointer
,	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
)	O
{	O
struct	O
mu_hdrent	struct
*	O
p	pointer
=	O
ent	pointer
->	O
prev	pointer
;	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
next	pointer
=	O
ent	pointer
->	O
next	pointer
;	O
else	O
hdr	pointer
->	O
head	pointer
=	O
ent	pointer
->	O
next	pointer
;	O
p	pointer
=	O
ent	pointer
->	O
next	pointer
;	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
prev	pointer
=	O
ent	pointer
->	O
prev	pointer
;	O
else	O
hdr	pointer
->	O
tail	pointer
=	O
ent	pointer
->	O
prev	pointer
;	O
}	O
static	O
void	O
mu_hdrent_prepend	function
(	O
struct	O
_mu_header	struct
*	O
hdr	pointer
,	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
)	O
{	O
struct	O
mu_hdrent	struct
*	O
p	pointer
=	O
hdr	pointer
->	O
head	pointer
;	O
ent	pointer
->	O
prev	pointer
=	O
NULL	O
;	O
ent	pointer
->	O
next	pointer
=	O
p	pointer
;	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
prev	pointer
=	O
ent	pointer
;	O
else	O
hdr	pointer
->	O
tail	pointer
=	O
ent	pointer
;	O
hdr	pointer
->	O
head	pointer
=	O
ent	pointer
;	O
}	O
static	O
void	O
mu_hdrent_append	function
(	O
struct	O
_mu_header	struct
*	O
hdr	pointer
,	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
)	O
{	O
struct	O
mu_hdrent	struct
*	O
p	pointer
=	O
hdr	pointer
->	O
tail	pointer
;	O
ent	pointer
->	O
next	pointer
=	O
NULL	O
;	O
ent	pointer
->	O
prev	pointer
=	O
p	pointer
;	O
if	O
(	O
p	pointer
)	O
p	pointer
->	O
next	pointer
=	O
ent	pointer
;	O
else	O
hdr	pointer
->	O
head	pointer
=	O
ent	pointer
;	O
hdr	pointer
->	O
tail	pointer
=	O
ent	pointer
;	O
}	O
static	O
int	O
mu_hdrent_insert	function
(	O
struct	O
_mu_header	struct
*	O
hdr	pointer
,	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
pos	long
,	O
int	O
before	int
)	O
{	O
struct	O
mu_hdrent	struct
*	O
p	pointer
;	O
struct	O
mu_hdrent	struct
*	O
ref	pointer
=	O
mu_hdrent_find	function
(	O
hdr	pointer
,	O
name	pointer
,	O
pos	long
)	O
;	O
if	O
(	O
!	O
ref	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
before	int
)	O
{	O
ref	pointer
=	O
ref	pointer
->	O
prev	pointer
;	O
if	O
(	O
!	O
ref	pointer
)	O
{	O
mu_hdrent_prepend	function
(	O
hdr	pointer
,	O
ent	pointer
)	O
;	O
return	O
0	int
;	O
}	O
}	O
p	pointer
=	O
ref	pointer
->	O
next	pointer
;	O
if	O
(	O
!	O
p	pointer
)	O
{	O
mu_hdrent_append	function
(	O
hdr	pointer
,	O
ent	pointer
)	O
;	O
return	O
0	int
;	O
}	O
ent	pointer
->	O
next	pointer
=	O
p	pointer
;	O
p	pointer
->	O
prev	pointer
=	O
ent	pointer
;	O
ent	pointer
->	O
prev	pointer
=	O
ref	pointer
;	O
ref	pointer
->	O
next	pointer
=	O
ent	pointer
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
mu_hdrent	struct
*	O
mu_hdrent_create	function
(	O
struct	O
_mu_header	struct
*	O
ph	pointer
,	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
size_t	long
nsize	long
,	O
const	O
char	O
*	O
value	pointer
,	O
size_t	long
vsize	long
)	O
{	O
size_t	long
strsize	long
;	O
size_t	long
sizeleft	long
;	O
const	O
char	O
*	O
p	pointer
;	O
if	O
(	O
!	O
ent	pointer
)	O
{	O
ent	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
ent	pointer
)	O
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
return	O
NULL	O
;	O
}	O
strsize	long
=	O
MU_STR_SIZE	O
(	O
nsize	long
,	O
vsize	long
)	O
;	O
sizeleft	long
=	O
ph	pointer
->	O
spool_size	long
-	O
ph	pointer
->	O
spool_used	long
;	O
if	O
(	O
sizeleft	long
<	O
strsize	long
)	O
{	O
char	O
*	O
newp	pointer
;	O
size_t	long
delta	long
=	O
(	O
strsize	long
-	O
sizeleft	long
+	O
SPOOLBLKSIZ	int
-	O
1	int
)	O
/	O
SPOOLBLKSIZ	int
;	O
delta	long
*=	O
SPOOLBLKSIZ	int
;	O
newp	pointer
=	O
realloc	function
(	O
ph	pointer
->	O
spool	pointer
,	O
ph	pointer
->	O
spool_size	long
+	O
delta	long
)	O
;	O
if	O
(	O
!	O
newp	pointer
)	O
return	O
0	int
;	O
ph	pointer
->	O
spool	pointer
=	O
newp	pointer
;	O
ph	pointer
->	O
spool_size	long
+=	O
delta	long
;	O
}	O
ent	pointer
->	O
fn	pointer
=	O
ph	pointer
->	O
spool_used	long
;	O
ent	pointer
->	O
nlen	long
=	O
nsize	long
;	O
memcpy	function
(	O
ph	pointer
->	O
spool	pointer
+	O
ph	pointer
->	O
spool_used	long
,	O
name	pointer
,	O
nsize	long
)	O
;	O
ph	pointer
->	O
spool_used	long
+=	O
nsize	long
;	O
ph	pointer
->	O
spool	pointer
[	O
ph	pointer
->	O
spool_used	long
++	O
]	O
=	O
0	int
;	O
ph	pointer
->	O
spool	pointer
[	O
ph	pointer
->	O
spool_used	long
++	O
]	O
=	O
' '	O
;	O
ent	pointer
->	O
fv	pointer
=	O
ph	pointer
->	O
spool_used	long
;	O
ent	pointer
->	O
vlen	long
=	O
vsize	long
;	O
memcpy	function
(	O
ph	pointer
->	O
spool	pointer
+	O
ph	pointer
->	O
spool_used	long
,	O
value	pointer
,	O
vsize	long
)	O
;	O
ph	pointer
->	O
spool_used	long
+=	O
vsize	long
;	O
ph	pointer
->	O
spool	pointer
[	O
ph	pointer
->	O
spool_used	long
++	O
]	O
=	O
0	int
;	O
ent	pointer
->	O
nlines	long
=	O
1	int
;	O
for	O
(	O
p	pointer
=	O
value	pointer
;	O
p	pointer
<	O
value	pointer
+	O
vsize	long
;	O
p	pointer
++	O
)	O
if	O
(	O
*	O
p	pointer
==	O
'\n'	O
)	O
ent	pointer
->	O
nlines	long
++	O
;	O
return	O
ent	pointer
;	O
}	O
static	O
void	O
mu_hdrent_free_list	function
(	O
struct	O
_mu_header	struct
*	O
hdr	pointer
)	O
{	O
struct	O
mu_hdrent	struct
*	O
p	pointer
;	O
for	O
(	O
p	pointer
=	O
hdr	pointer
->	O
head	pointer
;	O
p	pointer
;	O
)	O
{	O
struct	O
mu_hdrent	struct
*	O
next	pointer
=	O
p	pointer
->	O
next	pointer
;	O
free	function
(	O
p	pointer
)	O
;	O
p	pointer
=	O
next	pointer
;	O
}	O
hdr	pointer
->	O
head	pointer
=	O
hdr	pointer
->	O
tail	pointer
=	O
NULL	O
;	O
hdr	pointer
->	O
spool_used	long
=	O
0	int
;	O
}	O
static	O
int	O
header_parse	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
blurb	pointer
,	O
int	O
len	long
)	O
{	O
const	O
char	O
*	O
header_end	pointer
;	O
const	O
char	O
*	O
header_start	pointer
;	O
const	O
char	O
*	O
header_start2	pointer
;	O
if	O
(	O
blurb	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
header	pointer
->	O
flags	int
|=	O
HEADER_INVALIDATE	int
;	O
mu_hdrent_free_list	function
(	O
header	pointer
)	O
;	O
for	O
(	O
header_start	pointer
=	O
blurb	pointer
;	O
len	long
>	O
0	int
;	O
header_start	pointer
=	O
++	O
header_end	pointer
)	O
{	O
const	O
char	O
*	O
fn	pointer
,	O
*	O
fn_end	pointer
,	O
*	O
fv	pointer
,	O
*	O
fv_end	pointer
;	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
;	O
if	O
(	O
header_start	pointer
[	O
0	int
]	O
==	O
' '	O
||	O
header_start	pointer
[	O
0	int
]	O
==	O
'\t'	O
||	O
header_start	pointer
[	O
0	int
]	O
==	O
'\n'	O
)	O
break	O
;	O
for	O
(	O
header_start2	pointer
=	O
header_start	pointer
;	O
len	long
;	O
header_start2	pointer
=	O
++	O
header_end	pointer
)	O
{	O
header_end	pointer
=	O
memchr	function
(	O
header_start2	pointer
,	O
'\n'	O
,	O
len	long
)	O
;	O
if	O
(	O
header_end	pointer
==	O
NULL	O
)	O
{	O
header_end	pointer
=	O
header_start2	pointer
+	O
len	long
;	O
len	long
=	O
0	int
;	O
break	O
;	O
}	O
else	O
{	O
len	long
-=	O
(	O
header_end	pointer
-	O
header_start2	pointer
+	O
1	int
)	O
;	O
if	O
(	O
!	O
len	long
||	O
(	O
header_end	pointer
[	O
1	int
]	O
!=	O
' '	O
&&	O
header_end	pointer
[	O
1	int
]	O
!=	O
'\t'	O
)	O
)	O
break	O
;	O
}	O
}	O
if	O
(	O
(	O
header_end	pointer
-	O
header_start	pointer
>=	O
5	int
)	O
&&	O
strncmp	function
(	O
header_start	pointer
,	O
"From "	pointer
,	O
5	int
)	O
==	O
0	int
)	O
{	O
fn	pointer
=	O
header_start	pointer
;	O
fn_end	pointer
=	O
header_start	pointer
+	O
5	int
;	O
fv	pointer
=	O
header_start	pointer
+	O
5	int
;	O
fv_end	pointer
=	O
header_end	pointer
;	O
}	O
else	O
{	O
char	O
*	O
colon	pointer
=	O
memchr	function
(	O
header_start	pointer
,	O
':'	O
,	O
header_end	pointer
-	O
header_start	pointer
)	O
;	O
if	O
(	O
colon	pointer
==	O
NULL	O
)	O
break	O
;	O
fn	pointer
=	O
header_start	pointer
;	O
fn_end	pointer
=	O
colon	pointer
;	O
while	O
(	O
ISLWSP	O
(	O
fn_end	pointer
[	O
-	O
1	int
]	O
)	O
)	O
fn_end	pointer
--	O
;	O
fv	pointer
=	O
colon	pointer
+	O
1	int
;	O
fv_end	pointer
=	O
header_end	pointer
;	O
while	O
(	O
ISLWSP	O
(	O
fv	pointer
[	O
0	int
]	O
)	O
)	O
fv	pointer
++	O
;	O
}	O
ent	pointer
=	O
mu_hdrent_create	function
(	O
header	pointer
,	O
NULL	O
,	O
fn	pointer
,	O
fn_end	pointer
-	O
fn	pointer
,	O
fv	pointer
,	O
fv_end	pointer
-	O
fv	pointer
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
return	O
ENOMEM	int
;	O
mu_hdrent_append	function
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
mu_header_fill	function
(	O
mu_header_t	pointer
header	pointer
)	O
{	O
int	O
status	int
;	O
size_t	long
blurb_len	long
=	O
0	int
;	O
char	O
*	O
blurb	pointer
=	O
NULL	O
;	O
if	O
(	O
header	pointer
->	O
mstream	pointer
&&	O
header	pointer
->	O
flags	int
&	O
HEADER_STREAMMOD	int
)	O
{	O
mu_off_t	long
end	long
;	O
mu_header_invalidate	function
(	O
header	pointer
)	O
;	O
status	int
=	O
mu_stream_size	function
(	O
header	pointer
->	O
mstream	pointer
,	O
&	O
end	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_stream_seek	function
(	O
header	pointer
->	O
mstream	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
blurb_len	long
=	O
end	long
;	O
blurb	pointer
=	O
malloc	function
(	O
blurb_len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
blurb	pointer
)	O
return	O
ENOMEM	int
;	O
status	int
=	O
mu_stream_read	function
(	O
header	pointer
->	O
mstream	pointer
,	O
blurb	pointer
,	O
blurb_len	long
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	function
(	O
blurb	pointer
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
header_parse	function
(	O
header	pointer
,	O
blurb	pointer
,	O
blurb_len	long
)	O
;	O
free	function
(	O
blurb	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
header	pointer
->	O
flags	int
&=	O
~	O
HEADER_STREAMMOD	int
;	O
return	O
status	int
;	O
}	O
if	O
(	O
header	pointer
->	O
spool_used	long
)	O
return	O
0	int
;	O
if	O
(	O
header	pointer
->	O
_fill	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
status	int
=	O
header	pointer
->	O
_fill	pointer
(	O
header	pointer
->	O
data	pointer
,	O
&	O
blurb	pointer
,	O
&	O
blurb_len	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
header_parse	function
(	O
header	pointer
,	O
blurb	pointer
,	O
blurb_len	long
)	O
;	O
free	function
(	O
blurb	pointer
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_header_create	function
(	O
mu_header_t	pointer
*	O
ph	pointer
,	O
const	O
char	O
*	O
blurb	pointer
,	O
size_t	long
len	long
)	O
{	O
mu_header_t	pointer
header	pointer
;	O
int	O
status	int
=	O
0	int
;	O
header	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
header	pointer
)	O
)	O
;	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
status	int
=	O
header_parse	function
(	O
header	pointer
,	O
blurb	pointer
,	O
len	long
)	O
;	O
*	O
ph	pointer
=	O
header	pointer
;	O
return	O
status	int
;	O
}	O
void	O
mu_header_destroy	function
(	O
mu_header_t	pointer
*	O
ph	pointer
)	O
{	O
if	O
(	O
ph	pointer
&&	O
*	O
ph	pointer
)	O
{	O
mu_header_t	pointer
header	pointer
=	O
*	O
ph	pointer
;	O
mu_stream_destroy	function
(	O
&	O
header	pointer
->	O
mstream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
header	pointer
->	O
stream	pointer
)	O
;	O
mu_hdrent_free_list	function
(	O
header	pointer
)	O
;	O
free	function
(	O
header	pointer
->	O
spool	pointer
)	O
;	O
free	function
(	O
header	pointer
)	O
;	O
*	O
ph	pointer
=	O
NULL	O
;	O
}	O
}	O
int	O
mu_header_set_value	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
const	O
char	O
*	O
fv	pointer
,	O
int	O
replace	int
)	O
{	O
int	O
status	int
;	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
=	O
NULL	O
;	O
if	O
(	O
header	pointer
==	O
NULL	O
||	O
fn	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
fv	pointer
==	O
NULL	O
&&	O
!	O
replace	int
)	O
return	O
EINVAL	int
;	O
ent	pointer
=	O
mu_hdrent_find	function
(	O
header	pointer
,	O
fn	pointer
,	O
1	int
)	O
;	O
if	O
(	O
replace	int
)	O
{	O
if	O
(	O
ent	pointer
)	O
{	O
if	O
(	O
fv	pointer
==	O
NULL	O
)	O
{	O
mu_hdrent_remove	function
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
free	function
(	O
ent	pointer
)	O
;	O
return	O
0	int
;	O
}	O
mu_hdrent_create	function
(	O
header	pointer
,	O
ent	pointer
,	O
fn	pointer
,	O
strlen	function
(	O
fn	pointer
)	O
,	O
fv	pointer
,	O
strlen	function
(	O
fv	pointer
)	O
)	O
;	O
HEADER_SET_MODIFIED	O
(	O
header	pointer
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
fv	pointer
==	O
NULL	O
)	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
ent	pointer
)	O
{	O
return	O
MU_ERR_EXISTS	O
;	O
}	O
ent	pointer
=	O
mu_hdrent_create	function
(	O
header	pointer
,	O
NULL	O
,	O
fn	pointer
,	O
strlen	function
(	O
fn	pointer
)	O
,	O
fv	pointer
,	O
strlen	function
(	O
fv	pointer
)	O
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
return	O
ENOMEM	int
;	O
mu_hdrent_append	function
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
HEADER_SET_MODIFIED	O
(	O
header	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_header_remove	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
int	O
n	pointer
)	O
{	O
int	O
status	int
;	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
;	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
ent	pointer
=	O
mu_hdrent_find	function
(	O
header	pointer
,	O
fn	pointer
,	O
n	pointer
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
mu_iterator_delitem	function
(	O
header	pointer
->	O
itr	pointer
,	O
ent	pointer
)	O
;	O
mu_hdrent_remove	function
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
HEADER_SET_MODIFIED	O
(	O
header	pointer
)	O
;	O
free	function
(	O
ent	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_header_append	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
const	O
char	O
*	O
fv	pointer
)	O
{	O
int	O
status	int
;	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
;	O
if	O
(	O
header	pointer
==	O
NULL	O
||	O
fn	pointer
==	O
NULL	O
||	O
fv	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
ent	pointer
=	O
mu_hdrent_create	function
(	O
header	pointer
,	O
NULL	O
,	O
fn	pointer
,	O
strlen	function
(	O
fn	pointer
)	O
,	O
fv	pointer
,	O
strlen	function
(	O
fv	pointer
)	O
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
return	O
ENOMEM	int
;	O
mu_hdrent_append	function
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
HEADER_SET_MODIFIED	O
(	O
header	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_header_prepend	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
const	O
char	O
*	O
fv	pointer
)	O
{	O
int	O
status	int
;	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
;	O
if	O
(	O
header	pointer
==	O
NULL	O
||	O
fn	pointer
==	O
NULL	O
||	O
fv	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
ent	pointer
=	O
mu_hdrent_create	function
(	O
header	pointer
,	O
NULL	O
,	O
fn	pointer
,	O
strlen	function
(	O
fn	pointer
)	O
,	O
fv	pointer
,	O
strlen	function
(	O
fv	pointer
)	O
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
return	O
ENOMEM	int
;	O
mu_hdrent_prepend	function
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
HEADER_SET_MODIFIED	O
(	O
header	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_header_insert	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
fn	pointer
,	O
const	O
char	O
*	O
fv	pointer
,	O
const	O
char	O
*	O
ref	pointer
,	O
int	O
n	pointer
,	O
int	O
flags	int
)	O
{	O
int	O
status	int
;	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
;	O
if	O
(	O
header	pointer
==	O
NULL	O
||	O
fn	pointer
==	O
NULL	O
||	O
fv	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
flags	int
&	O
MU_HEADER_REPLACE	int
)	O
{	O
if	O
(	O
!	O
ref	pointer
)	O
ref	pointer
=	O
fn	pointer
;	O
ent	pointer
=	O
mu_hdrent_find	function
(	O
header	pointer
,	O
ref	pointer
,	O
n	pointer
)	O
;	O
mu_hdrent_create	function
(	O
header	pointer
,	O
ent	pointer
,	O
fn	pointer
,	O
strlen	function
(	O
fn	pointer
)	O
,	O
fv	pointer
,	O
strlen	function
(	O
fv	pointer
)	O
)	O
;	O
}	O
else	O
{	O
ent	pointer
=	O
mu_hdrent_create	function
(	O
header	pointer
,	O
NULL	O
,	O
fn	pointer
,	O
strlen	function
(	O
fn	pointer
)	O
,	O
fv	pointer
,	O
strlen	function
(	O
fv	pointer
)	O
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
ref	pointer
)	O
return	O
mu_hdrent_insert	function
(	O
header	pointer
,	O
ent	pointer
,	O
ref	pointer
,	O
n	pointer
,	O
flags	int
&	O
MU_HEADER_BEFORE	int
)	O
;	O
else	O
mu_hdrent_prepend	function
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
}	O
HEADER_SET_MODIFIED	O
(	O
header	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_header_clear	function
(	O
mu_header_t	pointer
header	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_header_invalidate	function
(	O
header	pointer
)	O
;	O
HEADER_SET_MODIFIED	O
(	O
header	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_header_sget_value_n	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
n	pointer
,	O
const	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
int	O
status	int
;	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
;	O
if	O
(	O
header	pointer
==	O
NULL	O
||	O
name	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
ent	pointer
=	O
mu_hdrent_find	function
(	O
header	pointer
,	O
name	pointer
,	O
n	pointer
)	O
;	O
if	O
(	O
!	O
ent	pointer
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
pval	pointer
)	O
*	O
pval	pointer
=	O
MU_HDRENT_VALUE	O
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_header_aget_value_n	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
n	pointer
,	O
char	O
*	O
*	O
pval	pointer
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
int	O
status	int
=	O
mu_header_sget_value_n	function
(	O
header	pointer
,	O
name	pointer
,	O
n	pointer
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
*	O
pval	pointer
=	O
strdup	function
(	O
s	pointer
)	O
;	O
if	O
(	O
!	O
*	O
pval	pointer
)	O
status	int
=	O
ENOMEM	int
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_get_value_n	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
n	pointer
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
pn	pointer
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
int	O
status	int
=	O
mu_header_sget_value_n	function
(	O
header	pointer
,	O
name	pointer
,	O
n	pointer
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
size_t	long
slen	long
=	O
strlen	function
(	O
s	pointer
)	O
;	O
if	O
(	O
buffer	pointer
)	O
{	O
if	O
(	O
slen	long
>	O
buflen	long
)	O
slen	long
=	O
buflen	long
;	O
memcpy	function
(	O
buffer	pointer
,	O
s	pointer
,	O
slen	long
)	O
;	O
buffer	pointer
[	O
slen	long
]	O
=	O
0	int
;	O
}	O
if	O
(	O
pn	pointer
)	O
*	O
pn	pointer
=	O
slen	long
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_get_value_unfold_n	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
n	pointer
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
pn	pointer
)	O
{	O
int	O
rc	int
=	O
mu_header_get_value_n	function
(	O
header	pointer
,	O
name	pointer
,	O
n	pointer
,	O
buffer	pointer
,	O
buflen	long
,	O
pn	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mu_string_unfold	function
(	O
buffer	pointer
,	O
pn	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_header_aget_value_unfold_n	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
n	pointer
,	O
char	O
*	O
*	O
pvalue	pointer
)	O
{	O
int	O
rc	int
=	O
mu_header_aget_value_n	function
(	O
header	pointer
,	O
name	pointer
,	O
n	pointer
,	O
pvalue	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mu_string_unfold	function
(	O
*	O
pvalue	pointer
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_header_get_address_n	function
(	O
mu_header_t	pointer
header	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
int	O
n	pointer
,	O
mu_address_t	pointer
*	O
addr	pointer
)	O
{	O
const	O
char	O
*	O
value	pointer
=	O
NULL	O
;	O
int	O
status	int
=	O
mu_header_sget_value_n	function
(	O
header	pointer
,	O
name	pointer
,	O
n	pointer
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
mu_address_create	function
(	O
addr	pointer
,	O
value	pointer
)	O
;	O
}	O
int	O
mu_header_get_field_count	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
*	O
pcount	pointer
)	O
{	O
size_t	long
count	long
;	O
size_t	long
size	long
;	O
size_t	long
lines	long
;	O
int	O
status	int
;	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
mu_hdrent_count	function
(	O
header	pointer
,	O
&	O
count	long
,	O
&	O
size	long
,	O
&	O
lines	long
)	O
;	O
if	O
(	O
pcount	pointer
)	O
*	O
pcount	pointer
=	O
count	long
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_get_itemptr	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
num	long
,	O
const	O
void	O
*	O
*	O
sptr	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
=	O
mu_hdrent_nth	function
(	O
header	pointer
,	O
num	long
)	O
;	O
if	O
(	O
ent	pointer
)	O
*	O
sptr	pointer
=	O
ent	pointer
;	O
else	O
status	int
=	O
MU_ERR_NOENT	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_sget_field_name	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
num	long
,	O
const	O
char	O
*	O
*	O
sptr	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
=	O
mu_hdrent_nth	function
(	O
header	pointer
,	O
num	long
)	O
;	O
if	O
(	O
ent	pointer
)	O
*	O
sptr	pointer
=	O
MU_HDRENT_NAME	O
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
else	O
status	int
=	O
MU_ERR_NOENT	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_get_field_name	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
num	long
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
pn	pointer
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
int	O
status	int
=	O
mu_header_sget_field_name	function
(	O
header	pointer
,	O
num	long
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
size_t	long
slen	long
=	O
strlen	function
(	O
s	pointer
)	O
;	O
if	O
(	O
buffer	pointer
)	O
{	O
if	O
(	O
slen	long
>	O
buflen	long
)	O
slen	long
=	O
buflen	long
;	O
memcpy	function
(	O
buffer	pointer
,	O
s	pointer
,	O
slen	long
)	O
;	O
buffer	pointer
[	O
slen	long
]	O
=	O
0	int
;	O
}	O
if	O
(	O
pn	pointer
)	O
*	O
pn	pointer
=	O
slen	long
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_aget_field_name	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
num	long
,	O
char	O
*	O
*	O
pvalue	pointer
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
int	O
status	int
=	O
mu_header_sget_field_name	function
(	O
header	pointer
,	O
num	long
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
(	O
*	O
pvalue	pointer
=	O
strdup	function
(	O
s	pointer
)	O
)	O
==	O
NULL	O
)	O
status	int
=	O
ENOMEM	int
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_sget_field_value	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
num	long
,	O
const	O
char	O
*	O
*	O
sptr	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
=	O
mu_hdrent_nth	function
(	O
header	pointer
,	O
num	long
)	O
;	O
if	O
(	O
ent	pointer
)	O
*	O
sptr	pointer
=	O
MU_HDRENT_VALUE	O
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
else	O
status	int
=	O
MU_ERR_NOENT	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_get_field_value	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
num	long
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
pn	pointer
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
int	O
status	int
=	O
mu_header_sget_field_value	function
(	O
header	pointer
,	O
num	long
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
size_t	long
slen	long
=	O
strlen	function
(	O
s	pointer
)	O
;	O
if	O
(	O
buffer	pointer
)	O
{	O
if	O
(	O
slen	long
>	O
buflen	long
)	O
slen	long
=	O
buflen	long
;	O
memcpy	function
(	O
buffer	pointer
,	O
s	pointer
,	O
slen	long
)	O
;	O
buffer	pointer
[	O
slen	long
]	O
=	O
0	int
;	O
}	O
if	O
(	O
pn	pointer
)	O
*	O
pn	pointer
=	O
slen	long
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_aget_field_value	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
num	long
,	O
char	O
*	O
*	O
pvalue	pointer
)	O
{	O
const	O
char	O
*	O
s	pointer
;	O
int	O
status	int
=	O
mu_header_sget_field_value	function
(	O
header	pointer
,	O
num	long
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
(	O
*	O
pvalue	pointer
=	O
strdup	function
(	O
s	pointer
)	O
)	O
==	O
NULL	O
)	O
status	int
=	O
ENOMEM	int
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_get_field_value_unfold	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
num	long
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
nwritten	pointer
)	O
{	O
int	O
rc	int
=	O
mu_header_get_field_value	function
(	O
header	pointer
,	O
num	long
,	O
buf	pointer
,	O
buflen	long
,	O
nwritten	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mu_string_unfold	function
(	O
buf	pointer
,	O
nwritten	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_header_aget_field_value_unfold	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
num	long
,	O
char	O
*	O
*	O
pvalue	pointer
)	O
{	O
int	O
rc	int
=	O
mu_header_aget_field_value	function
(	O
header	pointer
,	O
num	long
,	O
pvalue	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mu_string_unfold	function
(	O
*	O
pvalue	pointer
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_header_lines	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
*	O
plines	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
plines	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
size_t	long
count	long
;	O
size_t	long
size	long
;	O
size_t	long
lines	long
;	O
mu_hdrent_count	function
(	O
header	pointer
,	O
&	O
count	long
,	O
&	O
size	long
,	O
&	O
lines	long
)	O
;	O
*	O
plines	pointer
=	O
lines	long
+	O
1	int
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_size	function
(	O
mu_header_t	pointer
header	pointer
,	O
size_t	long
*	O
psize	pointer
)	O
{	O
int	O
status	int
;	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
psize	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
size_t	long
count	long
;	O
size_t	long
size	long
;	O
size_t	long
lines	long
;	O
mu_hdrent_count	function
(	O
header	pointer
,	O
&	O
count	long
,	O
&	O
size	long
,	O
&	O
lines	long
)	O
;	O
*	O
psize	pointer
=	O
size	long
+	O
1	int
;	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_header_invalidate	function
(	O
mu_header_t	pointer
hdr	pointer
)	O
{	O
if	O
(	O
hdr	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mu_hdrent_free_list	function
(	O
hdr	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
mu_hdrent_fixup	function
(	O
mu_header_t	pointer
hdr	pointer
,	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
)	O
{	O
char	O
*	O
s	pointer
=	O
MU_HDRENT_NAME	O
(	O
hdr	pointer
,	O
ent	pointer
)	O
;	O
s	pointer
[	O
ent	pointer
->	O
nlen	long
]	O
=	O
':'	O
;	O
s	pointer
=	O
MU_HDRENT_VALUE	O
(	O
hdr	pointer
,	O
ent	pointer
)	O
;	O
s	pointer
[	O
ent	pointer
->	O
vlen	long
]	O
=	O
'\n'	O
;	O
}	O
static	O
void	O
mu_hdrent_unroll_fixup	function
(	O
mu_header_t	pointer
hdr	pointer
,	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
)	O
{	O
char	O
*	O
s	pointer
=	O
MU_HDRENT_NAME	O
(	O
hdr	pointer
,	O
ent	pointer
)	O
;	O
s	pointer
[	O
ent	pointer
->	O
nlen	long
]	O
=	O
0	int
;	O
s	pointer
=	O
MU_HDRENT_VALUE	O
(	O
hdr	pointer
,	O
ent	pointer
)	O
;	O
s	pointer
[	O
ent	pointer
->	O
vlen	long
]	O
=	O
0	int
;	O
}	O
int	O
header_seek	function
(	O
mu_stream_t	pointer
str	pointer
,	O
mu_off_t	long
off	long
,	O
mu_off_t	long
*	O
presult	pointer
)	O
{	O
struct	O
_mu_header_stream	struct
*	O
hstr	pointer
=	O
(	O
struct	O
_mu_header_stream	struct
*	O
)	O
str	pointer
;	O
size_t	long
size	long
;	O
int	O
status	int
;	O
status	int
=	O
mu_header_size	function
(	O
hstr	pointer
->	O
hdr	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
off	long
<	O
0	int
||	O
off	long
>	O
size	long
)	O
return	O
ESPIPE	int
;	O
hstr	pointer
->	O
off	long
=	O
off	long
;	O
*	O
presult	pointer
=	O
off	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
header_read	function
(	O
mu_stream_t	pointer
is	pointer
,	O
char	O
*	O
buffer	pointer
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
pnread	pointer
)	O
{	O
struct	O
_mu_header_stream	struct
*	O
hstr	pointer
=	O
(	O
struct	O
_mu_header_stream	struct
*	O
)	O
is	pointer
;	O
mu_header_t	pointer
header	pointer
;	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
;	O
size_t	long
ent_off	long
;	O
int	O
status	int
;	O
size_t	long
nread	long
;	O
if	O
(	O
is	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
header	pointer
=	O
hstr	pointer
->	O
hdr	pointer
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
header	pointer
->	O
spool_size	long
==	O
0	int
)	O
{	O
size_t	long
len	long
=	O
0	int
;	O
if	O
(	O
hstr	pointer
->	O
off	long
==	O
0	int
&&	O
buflen	long
>	O
0	int
)	O
{	O
*	O
buffer	pointer
=	O
'\n'	O
;	O
hstr	pointer
->	O
off	long
++	O
;	O
len	long
=	O
1	int
;	O
}	O
if	O
(	O
pnread	pointer
)	O
*	O
pnread	pointer
=	O
len	long
;	O
return	O
0	int
;	O
}	O
if	O
(	O
mu_hdrent_find_stream_pos	function
(	O
header	pointer
,	O
hstr	pointer
->	O
off	long
,	O
&	O
ent	pointer
,	O
&	O
ent_off	long
)	O
)	O
{	O
if	O
(	O
pnread	pointer
)	O
*	O
pnread	pointer
=	O
0	int
;	O
return	O
0	int
;	O
}	O
for	O
(	O
nread	long
=	O
0	int
;	O
nread	long
<	O
buflen	long
&&	O
ent	pointer
;	O
ent	pointer
=	O
ent	pointer
->	O
next	pointer
)	O
{	O
size_t	long
rest	long
=	O
buflen	long
-	O
nread	long
;	O
size_t	long
strsize	long
=	O
MU_STR_SIZE	O
(	O
ent	pointer
->	O
nlen	long
,	O
ent	pointer
->	O
vlen	long
)	O
-	O
ent_off	long
;	O
if	O
(	O
rest	long
>	O
strsize	long
)	O
rest	long
=	O
strsize	long
;	O
mu_hdrent_fixup	function
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
memcpy	function
(	O
buffer	pointer
+	O
nread	long
,	O
MU_HDRENT_NAME	O
(	O
header	pointer
,	O
ent	pointer
)	O
+	O
ent_off	long
,	O
rest	long
)	O
;	O
mu_hdrent_unroll_fixup	function
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
nread	long
+=	O
rest	long
;	O
hstr	pointer
->	O
off	long
+=	O
rest	long
;	O
ent_off	long
=	O
0	int
;	O
}	O
if	O
(	O
pnread	pointer
)	O
*	O
pnread	pointer
=	O
nread	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
header_write	function
(	O
mu_stream_t	pointer
os	pointer
,	O
const	O
char	O
*	O
buf	pointer
,	O
size_t	long
buflen	long
,	O
size_t	long
*	O
pnwrite	pointer
)	O
{	O
struct	O
_mu_header_stream	struct
*	O
hstr	pointer
=	O
(	O
struct	O
_mu_header_stream	struct
*	O
)	O
os	pointer
;	O
mu_header_t	pointer
header	pointer
;	O
int	O
rc	int
;	O
if	O
(	O
os	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
header	pointer
=	O
hstr	pointer
->	O
hdr	pointer
;	O
if	O
(	O
!	O
(	O
header	pointer
->	O
flags	int
&	O
HEADER_STREAMMOD	int
)	O
)	O
{	O
struct	O
mu_hdrent	struct
*	O
ent	pointer
;	O
rc	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
header	pointer
->	O
mstream	pointer
)	O
{	O
rc	int
=	O
mu_memory_stream_create	function
(	O
&	O
header	pointer
->	O
mstream	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
mu_stream_seek	function
(	O
header	pointer
->	O
mstream	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
header	pointer
->	O
spool_used	long
)	O
{	O
for	O
(	O
ent	pointer
=	O
header	pointer
->	O
head	pointer
;	O
ent	pointer
;	O
ent	pointer
=	O
ent	pointer
->	O
next	pointer
)	O
mu_hdrent_fixup	function
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
rc	int
=	O
mu_stream_write	function
(	O
header	pointer
->	O
mstream	pointer
,	O
header	pointer
->	O
spool	pointer
,	O
header	pointer
->	O
spool_used	long
,	O
NULL	O
)	O
;	O
for	O
(	O
ent	pointer
=	O
header	pointer
->	O
head	pointer
;	O
ent	pointer
;	O
ent	pointer
=	O
ent	pointer
->	O
next	pointer
)	O
mu_hdrent_unroll_fixup	function
(	O
header	pointer
,	O
ent	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_stream_truncate	function
(	O
header	pointer
->	O
mstream	pointer
,	O
header	pointer
->	O
spool_used	long
)	O
;	O
if	O
(	O
hstr	pointer
->	O
off	long
>	O
header	pointer
->	O
spool_used	long
)	O
hstr	pointer
->	O
off	long
=	O
header	pointer
->	O
spool_used	long
;	O
}	O
header	pointer
->	O
flags	int
|=	O
HEADER_STREAMMOD	int
;	O
}	O
rc	int
=	O
mu_stream_seek	function
(	O
header	pointer
->	O
mstream	pointer
,	O
hstr	pointer
->	O
off	long
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
mu_stream_write	function
(	O
header	pointer
->	O
mstream	pointer
,	O
buf	pointer
,	O
buflen	long
,	O
pnwrite	pointer
)	O
;	O
}	O
static	O
int	O
header_size	function
(	O
mu_stream_t	pointer
str	pointer
,	O
mu_off_t	long
*	O
psize	pointer
)	O
{	O
mu_header_t	pointer
header	pointer
;	O
int	O
status	int
;	O
size_t	long
size	long
;	O
if	O
(	O
str	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
psize	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
header	pointer
=	O
(	O
(	O
struct	O
_mu_header_stream	struct
*	O
)	O
str	pointer
)	O
->	O
hdr	pointer
;	O
status	int
=	O
mu_header_fill	function
(	O
header	pointer
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_header_size	function
(	O
header	pointer
,	O
&	O
size	long
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
*	O
psize	pointer
=	O
size	long
;	O
return	O
status	int
;	O
}	O
static	O
int	O
_header_get_stream	function
(	O
mu_header_t	pointer
header	pointer
,	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
int	O
ref	pointer
)	O
{	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pstream	pointer
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
header	pointer
->	O
stream	pointer
==	O
NULL	O
)	O
{	O
struct	O
_mu_header_stream	struct
*	O
str	pointer
=	O
(	O
struct	O
_mu_header_stream	struct
*	O
)	O
_mu_stream_create	function
(	O
sizeof	O
(	O
*	O
str	pointer
)	O
,	O
MU_STREAM_RDWR	O
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
!	O
str	pointer
)	O
return	O
ENOMEM	int
;	O
str	pointer
->	O
stream	pointer
.	O
read	pointer
=	O
header_read	function
;	O
str	pointer
->	O
stream	pointer
.	O
write	pointer
=	O
header_write	function
;	O
str	pointer
->	O
stream	pointer
.	O
seek	pointer
=	O
header_seek	function
;	O
str	pointer
->	O
stream	pointer
.	O
size	long
=	O
header_size	function
;	O
str	pointer
->	O
hdr	pointer
=	O
header	pointer
;	O
header	pointer
->	O
stream	pointer
=	O
(	O
mu_stream_t	pointer
)	O
str	pointer
;	O
}	O
if	O
(	O
!	O
ref	pointer
)	O
{	O
*	O
pstream	pointer
=	O
header	pointer
->	O
stream	pointer
;	O
return	O
0	int
;	O
}	O
return	O
mu_streamref_create	function
(	O
pstream	pointer
,	O
header	pointer
->	O
stream	pointer
)	O
;	O
}	O
int	O
mu_header_get_stream	function
(	O
mu_header_t	pointer
header	pointer
,	O
mu_stream_t	pointer
*	O
pstream	pointer
)	O
{	O
return	O
_header_get_stream	function
(	O
header	pointer
,	O
pstream	pointer
,	O
0	int
)	O
;	O
}	O
int	O
mu_header_get_streamref	function
(	O
mu_header_t	pointer
header	pointer
,	O
mu_stream_t	pointer
*	O
pstream	pointer
)	O
{	O
return	O
_header_get_stream	function
(	O
header	pointer
,	O
pstream	pointer
,	O
1	int
)	O
;	O
}	O
int	O
mu_header_set_fill	function
(	O
mu_header_t	pointer
header	pointer
,	O
int	O
(	O
*	O
_fill	pointer
)	O
(	O
void	O
*	O
data	pointer
,	O
char	O
*	O
*	O
,	O
size_t	long
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
if	O
(	O
header	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
header	pointer
->	O
_fill	pointer
=	O
_fill	pointer
;	O
header	pointer
->	O
data	pointer
=	O
data	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_header_is_modified	function
(	O
mu_header_t	pointer
header	pointer
)	O
{	O
return	O
header	pointer
?	O
(	O
header	pointer
->	O
flags	int
&	O
HEADER_MODIFIED	int
)	O
:	O
0	int
;	O
}	O
int	O
mu_header_clear_modified	function
(	O
mu_header_t	pointer
header	pointer
)	O
{	O
if	O
(	O
header	pointer
)	O
header	pointer
->	O
flags	int
&=	O
~	O
HEADER_MODIFIED	int
;	O
return	O
0	int
;	O
}	O
