struct	O
header_buffer	struct
{	O
mu_stream_t	pointer
str	pointer
;	O
size_t	long
line_len	long
;	O
size_t	long
line_max	long
;	O
}	O
;	O
static	O
int	O
mime_store_parameter	function
(	O
char	O
const	O
*	O
name	pointer
,	O
void	O
*	O
value	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
mu_mime_param	struct
*	O
p	pointer
=	O
value	pointer
;	O
struct	O
header_buffer	struct
*	O
hbuf	pointer
=	O
data	pointer
;	O
size_t	long
nlen	long
;	O
size_t	long
vlen	long
;	O
int	O
langinfo	int
;	O
int	O
quote	int
=	O
0	int
;	O
int	O
segment	int
=	O
-	O
1	int
;	O
mu_stream_t	pointer
valstr	pointer
;	O
mu_off_t	long
valsize	long
;	O
char	O
const	O
*	O
filter_name	pointer
=	O
NULL	O
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_static_memory_stream_create	function
(	O
&	O
valstr	pointer
,	O
p	pointer
->	O
value	pointer
,	O
strlen	function
(	O
p	pointer
->	O
value	pointer
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
nlen	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
lang	pointer
||	O
p	pointer
->	O
cset	pointer
)	O
{	O
vlen	long
=	O
2	int
;	O
if	O
(	O
p	pointer
->	O
lang	pointer
)	O
vlen	long
+=	O
strlen	function
(	O
p	pointer
->	O
lang	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
cset	pointer
)	O
vlen	long
+=	O
strlen	function
(	O
p	pointer
->	O
cset	pointer
)	O
;	O
langinfo	int
=	O
1	int
;	O
filter_name	pointer
=	O
"percent"	pointer
;	O
}	O
else	O
{	O
if	O
(	O
*	O
mu_str_skip_class_comp	function
(	O
p	pointer
->	O
value	pointer
,	O
MU_CTYPE_TSPEC	int
|	O
MU_CTYPE_BLANK	int
)	O
)	O
{	O
quote	int
=	O
2	int
;	O
filter_name	pointer
=	O
"dq"	pointer
;	O
}	O
else	O
quote	int
=	O
0	int
;	O
vlen	long
=	O
0	int
;	O
langinfo	int
=	O
0	int
;	O
}	O
if	O
(	O
filter_name	pointer
)	O
{	O
mu_stream_t	pointer
tmp	pointer
;	O
rc	int
=	O
mu_filter_create	function
(	O
&	O
tmp	pointer
,	O
valstr	pointer
,	O
filter_name	pointer
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
)	O
;	O
if	O
(	O
rc	int
)	O
goto	O
err	O
;	O
mu_stream_unref	function
(	O
valstr	pointer
)	O
;	O
valstr	pointer
=	O
tmp	pointer
;	O
rc	int
=	O
mu_memory_stream_create	function
(	O
&	O
tmp	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_stream_copy	function
(	O
tmp	pointer
,	O
valstr	pointer
,	O
0	int
,	O
&	O
valsize	long
)	O
;	O
mu_stream_destroy	function
(	O
&	O
tmp	pointer
)	O
;	O
}	O
}	O
else	O
rc	int
=	O
mu_stream_size	function
(	O
valstr	pointer
,	O
&	O
valsize	long
)	O
;	O
if	O
(	O
rc	int
)	O
goto	O
err	O
;	O
nlen	long
+=	O
langinfo	int
;	O
rc	int
=	O
mu_stream_seek	function
(	O
valstr	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
hbuf	pointer
->	O
line_max	long
==	O
0	int
)	O
{	O
mu_stream_printf	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"%s"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
langinfo	int
)	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"*"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"="	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
vlen	long
)	O
{	O
mu_stream_printf	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"%s'%s'"	pointer
,	O
mu_prstr	function
(	O
p	pointer
->	O
lang	pointer
)	O
,	O
mu_prstr	function
(	O
p	pointer
->	O
cset	pointer
)	O
)	O
;	O
vlen	long
=	O
0	int
;	O
}	O
else	O
if	O
(	O
quote	int
)	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"\""	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_copy	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
valstr	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
quote	int
)	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"\""	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
mu_stream_err	function
(	O
hbuf	pointer
->	O
str	pointer
)	O
)	O
rc	int
=	O
mu_stream_last_error	function
(	O
hbuf	pointer
->	O
str	pointer
)	O
;	O
}	O
else	O
{	O
char	O
*	O
iobuf	pointer
;	O
iobuf	pointer
=	O
malloc	function
(	O
hbuf	pointer
->	O
line_max	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
iobuf	pointer
)	O
{	O
rc	int
=	O
errno	O
;	O
goto	O
err	O
;	O
}	O
mu_stream_set_buffer	function
(	O
valstr	pointer
,	O
mu_buffer_none	int
,	O
0	int
)	O
;	O
while	O
(	O
rc	int
==	O
0	int
&&	O
valsize	long
)	O
{	O
mu_off_t	long
start	long
,	O
nr	long
;	O
size_t	long
sz	long
,	O
n	long
;	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
";"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_seek	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
start	long
)	O
;	O
if	O
(	O
segment	int
>=	O
0	int
)	O
{	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
hbuf	pointer
->	O
line_len	long
=	O
0	int
;	O
segment	int
++	O
;	O
}	O
else	O
if	O
(	O
hbuf	pointer
->	O
line_len	long
+	O
valsize	long
+	O
quote	int
+	O
vlen	long
+	O
nlen	long
+	O
1	int
>	O
hbuf	pointer
->	O
line_max	long
)	O
{	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
hbuf	pointer
->	O
line_len	long
=	O
0	int
;	O
if	O
(	O
hbuf	pointer
->	O
line_len	long
+	O
valsize	long
+	O
quote	int
+	O
vlen	long
+	O
nlen	long
+	O
1	int
>	O
hbuf	pointer
->	O
line_max	long
)	O
segment	int
++	O
;	O
}	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
" "	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
if	O
(	O
segment	int
>=	O
0	int
)	O
mu_stream_printf	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"%s*%d"	pointer
,	O
name	pointer
,	O
segment	int
)	O
;	O
else	O
mu_stream_printf	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"%s"	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
langinfo	int
)	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"*"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"="	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_seek	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
nr	long
)	O
;	O
nlen	long
=	O
nr	long
-	O
start	long
;	O
hbuf	pointer
->	O
line_len	long
+=	O
nlen	long
;	O
start	long
=	O
nr	long
;	O
if	O
(	O
hbuf	pointer
->	O
line_max	long
<=	O
(	O
hbuf	pointer
->	O
line_len	long
+	O
quote	int
+	O
vlen	long
)	O
)	O
{	O
rc	int
=	O
MU_ERR_BUFSPACE	O
;	O
break	O
;	O
}	O
sz	long
=	O
hbuf	pointer
->	O
line_max	long
-	O
(	O
hbuf	pointer
->	O
line_len	long
+	O
quote	int
+	O
vlen	long
)	O
;	O
mu_stream_ioctl	function
(	O
valstr	pointer
,	O
MU_IOCTL_FILTER	int
,	O
MU_IOCTL_FILTER_SET_OUTBUF_SIZE	int
,	O
&	O
sz	long
)	O
;	O
rc	int
=	O
mu_stream_read	function
(	O
valstr	pointer
,	O
iobuf	pointer
,	O
sz	long
,	O
&	O
n	long
)	O
;	O
if	O
(	O
rc	int
||	O
n	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
vlen	long
)	O
{	O
mu_stream_printf	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"%s'%s'"	pointer
,	O
mu_prstr	function
(	O
p	pointer
->	O
lang	pointer
)	O
,	O
mu_prstr	function
(	O
p	pointer
->	O
cset	pointer
)	O
)	O
;	O
vlen	long
=	O
0	int
;	O
}	O
else	O
if	O
(	O
quote	int
)	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"\""	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
iobuf	pointer
,	O
n	long
,	O
NULL	O
)	O
;	O
if	O
(	O
quote	int
)	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
"\""	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_seek	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
nr	long
)	O
;	O
nr	long
-=	O
start	long
;	O
hbuf	pointer
->	O
line_len	long
+=	O
nr	long
;	O
valsize	long
-=	O
n	long
;	O
if	O
(	O
mu_stream_err	function
(	O
hbuf	pointer
->	O
str	pointer
)	O
)	O
rc	int
=	O
mu_stream_last_error	function
(	O
hbuf	pointer
->	O
str	pointer
)	O
;	O
}	O
free	function
(	O
iobuf	pointer
)	O
;	O
}	O
err	O
:	O
mu_stream_destroy	function
(	O
&	O
valstr	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
mime_header_format	function
(	O
const	O
char	O
*	O
value	pointer
,	O
mu_assoc_t	pointer
params	pointer
,	O
struct	O
header_buffer	struct
*	O
hbuf	pointer
)	O
{	O
size_t	long
l	long
=	O
strlen	function
(	O
value	pointer
)	O
;	O
mu_stream_write	function
(	O
hbuf	pointer
->	O
str	pointer
,	O
value	pointer
,	O
l	long
,	O
NULL	O
)	O
;	O
hbuf	pointer
->	O
line_len	long
+=	O
l	long
;	O
return	O
mu_assoc_foreach	function
(	O
params	pointer
,	O
mime_store_parameter	function
,	O
hbuf	pointer
)	O
;	O
}	O
int	O
mu_mime_header_set_w	function
(	O
mu_header_t	pointer
hdr	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
value	pointer
,	O
mu_assoc_t	pointer
params	pointer
,	O
size_t	long
line_width	long
)	O
{	O
struct	O
header_buffer	struct
hbuf	pointer
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_memory_stream_create	function
(	O
&	O
hbuf	pointer
.	O
str	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
hbuf	pointer
.	O
line_len	long
=	O
strlen	function
(	O
name	pointer
)	O
+	O
2	int
;	O
hbuf	pointer
.	O
line_max	long
=	O
line_width	long
;	O
rc	int
=	O
mime_header_format	function
(	O
value	pointer
,	O
params	pointer
,	O
&	O
hbuf	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_off_t	long
pos	long
;	O
char	O
*	O
fmtval	pointer
;	O
mu_stream_seek	function
(	O
hbuf	pointer
.	O
str	pointer
,	O
0	int
,	O
MU_SEEK_CUR	int
,	O
&	O
pos	long
)	O
;	O
fmtval	pointer
=	O
malloc	function
(	O
pos	long
+	O
1	int
)	O
;	O
mu_stream_seek	function
(	O
hbuf	pointer
.	O
str	pointer
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
mu_stream_read	function
(	O
hbuf	pointer
.	O
str	pointer
,	O
fmtval	pointer
,	O
pos	long
,	O
NULL	O
)	O
;	O
fmtval	pointer
[	O
pos	long
]	O
=	O
0	int
;	O
rc	int
=	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
name	pointer
,	O
fmtval	pointer
,	O
1	int
)	O
;	O
free	function
(	O
fmtval	pointer
)	O
;	O
}	O
mu_stream_destroy	function
(	O
&	O
hbuf	pointer
.	O
str	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mime_header_set	function
(	O
mu_header_t	pointer
hdr	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
value	pointer
,	O
mu_assoc_t	pointer
params	pointer
)	O
{	O
return	O
mu_mime_header_set_w	function
(	O
hdr	pointer
,	O
name	pointer
,	O
value	pointer
,	O
params	pointer
,	O
76	int
)	O
;	O
}	O
