static	O
scm_t_bits	O
message_tag	int
;	O
struct	O
mu_message	struct
{	O
mu_message_t	pointer
msg	pointer
;	O
SCM	function
mbox	pointer
;	O
}	O
;	O
static	O
size_t	long
mu_scm_message_free	function
(	O
SCM	function
message_smob	int
)	O
{	O
struct	O
mu_message	struct
*	O
mum	pointer
=	O
(	O
struct	O
mu_message	struct
*	O
)	O
SCM_CDR	function
(	O
message_smob	int
)	O
;	O
if	O
(	O
mum	pointer
->	O
mbox	pointer
==	O
NULL	O
)	O
mu_message_destroy	function
(	O
&	O
mum	pointer
->	O
msg	pointer
,	O
mu_message_get_owner	function
(	O
mum	pointer
->	O
msg	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
_get_envelope_sender	function
(	O
mu_envelope_t	pointer
env	pointer
)	O
{	O
mu_address_t	pointer
addr	pointer
;	O
const	O
char	O
*	O
buffer	pointer
;	O
char	O
*	O
ptr	pointer
=	O
NULL	O
;	O
if	O
(	O
mu_envelope_sget_sender	function
(	O
env	pointer
,	O
&	O
buffer	pointer
)	O
||	O
mu_address_create	function
(	O
&	O
addr	pointer
,	O
buffer	pointer
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
mu_address_aget_email	function
(	O
addr	pointer
,	O
1	int
,	O
&	O
ptr	pointer
)	O
)	O
{	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
mu_address_destroy	function
(	O
&	O
addr	pointer
)	O
;	O
return	O
ptr	pointer
;	O
}	O
static	O
int	O
mu_scm_message_print	function
(	O
SCM	function
message_smob	int
,	O
SCM	function
port	int
,	O
scm_print_state	O
*	O
pstate	pointer
)	O
{	O
struct	O
mu_message	struct
*	O
mum	pointer
=	O
(	O
struct	O
mu_message	struct
*	O
)	O
SCM_CDR	function
(	O
message_smob	int
)	O
;	O
mu_envelope_t	pointer
env	pointer
=	O
NULL	O
;	O
const	O
char	O
*	O
buffer	pointer
;	O
size_t	long
m_size	long
=	O
0	int
,	O
m_lines	long
=	O
0	int
;	O
struct	O
tm	struct
tm	struct
;	O
struct	O
mu_timezone	struct
tz	pointer
;	O
char	O
datebuf	array
[	O
sizeof	O
(	O
"Mon Jan 01 00:00"	pointer
)	O
]	O
;	O
mu_message_get_envelope	function
(	O
mum	pointer
->	O
msg	pointer
,	O
&	O
env	pointer
)	O
;	O
scm_puts	function
(	O
"#<message "	pointer
,	O
port	int
)	O
;	O
if	O
(	O
message_smob	int
==	O
SCM_BOOL_F	O
)	O
{	O
scm_puts	function
(	O
"#f"	pointer
,	O
port	int
)	O
;	O
}	O
else	O
{	O
char	O
*	O
p	pointer
;	O
char	O
const	O
*	O
s	pointer
;	O
mu_attribute_t	pointer
attr	pointer
;	O
p	pointer
=	O
_get_envelope_sender	function
(	O
env	pointer
)	O
;	O
scm_puts	function
(	O
"\""	pointer
,	O
port	int
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
scm_puts	function
(	O
p	pointer
,	O
port	int
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
}	O
else	O
scm_puts	function
(	O
"UNKNOWN"	pointer
,	O
port	int
)	O
;	O
if	O
(	O
mu_envelope_sget_date	function
(	O
env	pointer
,	O
&	O
s	pointer
)	O
==	O
0	int
&&	O
mu_scan_datetime	function
(	O
s	pointer
,	O
MU_DATETIME_FROM	pointer
,	O
&	O
tm	struct
,	O
&	O
tz	pointer
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
strftime	function
(	O
datebuf	array
,	O
sizeof	O
(	O
datebuf	array
)	O
,	O
"%a %b %e %H:%M"	pointer
,	O
&	O
tm	struct
)	O
;	O
buffer	pointer
=	O
datebuf	array
;	O
}	O
else	O
buffer	pointer
=	O
"UNKNOWN"	pointer
;	O
scm_puts	function
(	O
"\" \""	pointer
,	O
port	int
)	O
;	O
scm_puts	function
(	O
buffer	pointer
,	O
port	int
)	O
;	O
scm_puts	function
(	O
"\" "	pointer
,	O
port	int
)	O
;	O
mu_message_size	function
(	O
mum	pointer
->	O
msg	pointer
,	O
&	O
m_size	long
)	O
;	O
mu_message_lines	function
(	O
mum	pointer
->	O
msg	pointer
,	O
&	O
m_lines	long
)	O
;	O
scm_intprint	function
(	O
m_lines	long
,	O
10	int
,	O
port	int
)	O
;	O
scm_putc	function
(	O
' '	O
,	O
port	int
)	O
;	O
scm_intprint	function
(	O
m_size	long
,	O
10	int
,	O
port	int
)	O
;	O
if	O
(	O
mu_message_get_attribute	function
(	O
mum	pointer
->	O
msg	pointer
,	O
&	O
attr	pointer
)	O
==	O
0	int
)	O
{	O
char	O
abuf	array
[	O
MU_STATUS_BUF_SIZE	O
]	O
;	O
if	O
(	O
mu_attribute_to_string	function
(	O
attr	pointer
,	O
abuf	array
,	O
sizeof	O
(	O
abuf	array
)	O
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
abuf	array
[	O
0	int
]	O
)	O
{	O
scm_putc	function
(	O
' '	O
,	O
port	int
)	O
;	O
scm_puts	function
(	O
abuf	array
,	O
port	int
)	O
;	O
}	O
}	O
else	O
scm_puts	function
(	O
" E"	pointer
,	O
port	int
)	O
;	O
}	O
}	O
scm_puts	function
(	O
">"	pointer
,	O
port	int
)	O
;	O
return	O
1	int
;	O
}	O
SCM	function
mu_scm_message_create	function
(	O
SCM	function
owner	pointer
,	O
mu_message_t	pointer
msg	pointer
)	O
{	O
struct	O
mu_message	struct
*	O
mum	pointer
;	O
mum	pointer
=	O
scm_gc_malloc	function
(	O
sizeof	O
(	O
struct	O
mu_message	struct
)	O
,	O
"message"	pointer
)	O
;	O
mum	pointer
->	O
msg	pointer
=	O
msg	pointer
;	O
mum	pointer
->	O
mbox	pointer
=	O
owner	pointer
;	O
SCM_RETURN_NEWSMOB	function
(	O
message_tag	int
,	O
mum	pointer
)	O
;	O
}	O
void	O
mu_scm_message_add_owner	function
(	O
SCM	function
MESG	int
,	O
SCM	function
owner	pointer
)	O
{	O
struct	O
mu_message	struct
*	O
mum	pointer
=	O
(	O
struct	O
mu_message	struct
*	O
)	O
SCM_CDR	function
(	O
MESG	int
)	O
;	O
SCM	function
cell	O
;	O
if	O
(	O
mum	pointer
->	O
mbox	pointer
==	O
NULL	O
)	O
mum	pointer
->	O
mbox	pointer
=	O
scm_cons	function
(	O
owner	pointer
,	O
SCM_EOL	O
)	O
;	O
else	O
{	O
cell	O
=	O
scm_cons	function
(	O
owner	pointer
,	O
mum	pointer
->	O
mbox	pointer
)	O
;	O
mum	pointer
->	O
mbox	pointer
=	O
cell	O
;	O
}	O
}	O
mu_message_t	pointer
mu_scm_message_get	function
(	O
SCM	function
MESG	int
)	O
{	O
struct	O
mu_message	struct
*	O
mum	pointer
=	O
(	O
struct	O
mu_message	struct
*	O
)	O
SCM_CDR	function
(	O
MESG	int
)	O
;	O
return	O
mum	pointer
->	O
msg	pointer
;	O
}	O
int	O
mu_scm_is_message	function
(	O
SCM	function
scm	int
)	O
{	O
return	O
SCM_NIMP	function
(	O
scm	int
)	O
&&	O
(	O
long	O
)	O
SCM_CAR	function
(	O
scm	int
)	O
==	O
message_tag	int
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_p	O
,	O
"mu-message?"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
scm	int
)	O
,	O
"Return @code{true} if @var{scm} is a Mailutils message.\n"	pointer
)	O
{	O
return	O
scm_from_bool	function
(	O
mu_scm_is_message	function
(	O
scm	int
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_create	O
,	O
"mu-message-create"	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
(	O
)	O
,	O
"Creates an empty message.\n"	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_message_create	function
(	O
&	O
msg	pointer
,	O
NULL	O
)	O
;	O
return	O
mu_scm_message_create	function
(	O
SCM_BOOL_F	O
,	O
msg	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_copy	O
,	O
"mu-message-copy"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
)	O
,	O
"Creates a copy of the message @var{mesg}.\n"	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
,	O
newmsg	pointer
;	O
mu_stream_t	pointer
in	pointer
=	O
NULL	O
,	O
out	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_streamref	function
(	O
msg	pointer
,	O
&	O
in	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get input stream from message ~A"	pointer
,	O
scm_list_1	function
(	O
mesg	int
)	O
)	O
;	O
status	int
=	O
mu_message_create	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot create message"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
status	int
=	O
mu_message_get_streamref	function
(	O
newmsg	pointer
,	O
&	O
out	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_message_destroy	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get output stream"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
status	int
=	O
mu_stream_copy	function
(	O
out	pointer
,	O
in	pointer
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	function
(	O
&	O
in	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
out	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_message_destroy	function
(	O
&	O
newmsg	pointer
,	O
NULL	O
)	O
;	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Error writing to stream"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
return	O
mu_scm_message_create	function
(	O
SCM_BOOL_F	O
,	O
newmsg	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_destroy	O
,	O
"mu-message-destroy"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
)	O
,	O
"Destroys the message @var{mesg}."	pointer
)	O
{	O
struct	O
mu_message	struct
*	O
mum	pointer
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mum	pointer
=	O
(	O
struct	O
mu_message	struct
*	O
)	O
SCM_CDR	function
(	O
mesg	int
)	O
;	O
mu_message_destroy	function
(	O
&	O
mum	pointer
->	O
msg	pointer
,	O
mu_message_get_owner	function
(	O
mum	pointer
->	O
msg	pointer
)	O
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_set_header	O
,	O
"mu-message-set-header"	pointer
,	O
3	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
header	pointer
,	O
SCM	function
value	pointer
,	O
SCM	function
replace	O
)	O
,	O
"Sets header @var{header} of the message @var{mesg} to new @var{value}.\n"	pointer
"If @var{header} is already present in the message, its value\n"	pointer
"is replaced with the suplied one iff the optional @var{replace} is\n"	pointer
"@code{#t}. Otherwise, a new header is created and appended."	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
int	O
repl	int
=	O
0	int
;	O
int	O
status	int
;	O
char	O
*	O
hdr_c	pointer
,	O
*	O
val_c	pointer
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
header	pointer
)	O
,	O
header	pointer
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
scm_is_bool	function
(	O
value	pointer
)	O
)	O
return	O
SCM_UNSPECIFIED	O
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
value	pointer
)	O
,	O
value	pointer
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
replace	O
)	O
)	O
{	O
repl	int
=	O
replace	O
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message headers"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
hdr_c	pointer
=	O
scm_to_locale_string	function
(	O
header	pointer
)	O
;	O
val_c	pointer
=	O
scm_to_locale_string	function
(	O
value	pointer
)	O
;	O
if	O
(	O
repl	int
)	O
status	int
=	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
hdr_c	pointer
,	O
val_c	pointer
,	O
repl	int
)	O
;	O
else	O
status	int
=	O
mu_header_append	function
(	O
hdr	pointer
,	O
hdr_c	pointer
,	O
val_c	pointer
)	O
;	O
free	function
(	O
hdr_c	pointer
)	O
;	O
free	function
(	O
val_c	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot set header \"~A: ~A\" in message ~A"	pointer
,	O
scm_list_3	function
(	O
header	pointer
,	O
value	pointer
,	O
mesg	int
)	O
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_size	O
,	O
"mu-message-get-size"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
)	O
,	O
"Returns size of the message @var{mesg}.\n"	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
size_t	long
size	pointer
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
mu_message_size	function
(	O
msg	pointer
,	O
&	O
size	pointer
)	O
;	O
return	O
scm_from_size_t	function
(	O
size	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_lines	O
,	O
"mu-message-get-lines"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
)	O
,	O
"Returns number of lines in the message @var{msg}.\n"	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
size_t	long
lines	long
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_lines	function
(	O
msg	pointer
,	O
&	O
lines	long
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get number of lines in message ~A"	pointer
,	O
scm_list_1	function
(	O
mesg	int
)	O
)	O
;	O
return	O
scm_from_size_t	function
(	O
lines	long
)	O
;	O
}	O
static	O
SCM	function
filltime	function
(	O
struct	O
tm	struct
*	O
bd_time	pointer
,	O
int	O
zoff	int
,	O
const	O
char	O
*	O
zname	pointer
)	O
{	O
SCM	function
result	pointer
=	O
scm_c_make_vector	O
(	O
11	int
,	O
SCM_UNDEFINED	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	function
(	O
result	pointer
,	O
0	int
,	O
scm_from_int	function
(	O
bd_time	pointer
->	O
tm_sec	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	function
(	O
result	pointer
,	O
1	int
,	O
scm_from_int	function
(	O
bd_time	pointer
->	O
tm_min	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	function
(	O
result	pointer
,	O
2	int
,	O
scm_from_int	function
(	O
bd_time	pointer
->	O
tm_hour	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	function
(	O
result	pointer
,	O
3	int
,	O
scm_from_int	function
(	O
bd_time	pointer
->	O
tm_mday	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	function
(	O
result	pointer
,	O
4	int
,	O
scm_from_int	function
(	O
bd_time	pointer
->	O
tm_mon	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	function
(	O
result	pointer
,	O
5	int
,	O
scm_from_int	function
(	O
bd_time	pointer
->	O
tm_year	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	function
(	O
result	pointer
,	O
6	int
,	O
scm_from_int	function
(	O
bd_time	pointer
->	O
tm_wday	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	function
(	O
result	pointer
,	O
7	int
,	O
scm_from_int	function
(	O
bd_time	pointer
->	O
tm_yday	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	function
(	O
result	pointer
,	O
8	int
,	O
scm_from_int	function
(	O
bd_time	pointer
->	O
tm_isdst	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	function
(	O
result	pointer
,	O
9	int
,	O
scm_from_int	function
(	O
zoff	int
)	O
)	O
;	O
SCM_SIMPLE_VECTOR_SET	function
(	O
result	pointer
,	O
10	int
,	O
(	O
zname	pointer
?	O
scm_from_locale_string	function
(	O
zname	pointer
)	O
:	O
SCM_BOOL_F	O
)	O
)	O
;	O
return	O
result	pointer
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_envelope	O
,	O
"mu-message-get-envelope"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
)	O
,	O
"Returns envelope of the message @var{mesg}.\n"	pointer
"The value returned is the envelope line without the \"From \" prefix.\n"	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_envelope_t	pointer
env	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
const	O
char	O
*	O
sender	pointer
;	O
const	O
char	O
*	O
date	struct
;	O
size_t	long
dlen	long
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_envelope	function
(	O
msg	pointer
,	O
&	O
env	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"cannot get envelope"	pointer
,	O
scm_list_1	function
(	O
mesg	int
)	O
)	O
;	O
status	int
=	O
mu_envelope_sget_sender	function
(	O
env	pointer
,	O
&	O
sender	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"cannot get envelope sender"	pointer
,	O
scm_list_1	function
(	O
mesg	int
)	O
)	O
;	O
status	int
=	O
mu_envelope_sget_date	function
(	O
env	pointer
,	O
&	O
date	struct
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"cannot get envelope date"	pointer
,	O
scm_list_1	function
(	O
mesg	int
)	O
)	O
;	O
dlen	long
=	O
strlen	function
(	O
date	struct
)	O
;	O
if	O
(	O
date	struct
[	O
dlen	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
dlen	long
--	O
;	O
return	O
scm_string_append	function
(	O
scm_list_3	function
(	O
scm_from_locale_string	function
(	O
sender	pointer
)	O
,	O
scm_from_locale_string	function
(	O
" "	pointer
)	O
,	O
scm_from_locale_stringn	function
(	O
date	struct
,	O
dlen	long
)	O
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_envelope_date	O
,	O
"mu-message-get-envelope-date"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
)	O
,	O
"Returns envelope date of the message @var{mesg}.\n"	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_envelope_t	pointer
env	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
const	O
char	O
*	O
sdate	pointer
;	O
struct	O
tm	struct
tm	struct
;	O
struct	O
mu_timezone	struct
tz	pointer
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_envelope	function
(	O
msg	pointer
,	O
&	O
env	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"cannot get envelope"	pointer
,	O
scm_list_1	function
(	O
mesg	int
)	O
)	O
;	O
status	int
=	O
mu_envelope_sget_date	function
(	O
env	pointer
,	O
&	O
sdate	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"cannot get envelope date"	pointer
,	O
scm_list_1	function
(	O
mesg	int
)	O
)	O
;	O
status	int
=	O
mu_scan_datetime	function
(	O
sdate	pointer
,	O
MU_DATETIME_FROM	pointer
,	O
&	O
tm	struct
,	O
&	O
tz	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"invalid envelope date"	pointer
,	O
scm_list_1	function
(	O
scm_from_locale_string	function
(	O
sdate	pointer
)	O
)	O
)	O
;	O
return	O
filltime	function
(	O
&	O
tm	struct
,	O
tz	pointer
.	O
utc_offset	int
,	O
tz	pointer
.	O
tz_name	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_sender	O
,	O
"mu-message-get-sender"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
)	O
,	O
"Returns email address of the sender of the message @var{mesg}.\n"	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_envelope_t	pointer
env	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_envelope	function
(	O
msg	pointer
,	O
&	O
env	pointer
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
char	O
*	O
p	pointer
=	O
_get_envelope_sender	function
(	O
env	pointer
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
SCM	function
ret	pointer
=	O
scm_from_locale_string	function
(	O
p	pointer
)	O
;	O
free	function
(	O
p	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
}	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get envelope of message ~A"	pointer
,	O
scm_list_1	function
(	O
mesg	int
)	O
)	O
;	O
return	O
SCM_UNDEFINED	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_header	O
,	O
"mu-message-get-header"	pointer
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
header	pointer
)	O
,	O
"Returns value of the header @var{header} from the message @var{mesg}.\n"	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
char	O
*	O
value	pointer
=	O
NULL	O
;	O
char	O
*	O
header_string	pointer
;	O
SCM	function
ret	pointer
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
header	pointer
)	O
,	O
header	pointer
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
status	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message headers"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
header_string	pointer
=	O
scm_to_locale_string	function
(	O
header	pointer
)	O
;	O
status	int
=	O
mu_header_aget_value	O
(	O
hdr	pointer
,	O
header_string	pointer
,	O
&	O
value	pointer
)	O
;	O
free	function
(	O
header_string	pointer
)	O
;	O
switch	O
(	O
status	int
)	O
{	O
case	O
0	int
:	O
ret	pointer
=	O
scm_from_locale_string	function
(	O
value	pointer
)	O
;	O
free	function
(	O
value	pointer
)	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
ret	pointer
=	O
SCM_BOOL_F	O
;	O
break	O
;	O
default	O
:	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get header ~A from message ~A"	pointer
,	O
scm_list_2	function
(	O
header	pointer
,	O
mesg	int
)	O
)	O
;	O
}	O
return	O
ret	pointer
;	O
}	O
static	O
int	O
string_is_member	function
(	O
char	O
const	O
*	O
needle	pointer
,	O
SCM	function
array	int
)	O
{	O
int	O
found	int
=	O
0	int
;	O
while	O
(	O
!	O
(	O
found	int
||	O
scm_is_null	function
(	O
array	int
)	O
)	O
)	O
{	O
SCM	function
car	O
=	O
scm_car	O
(	O
array	int
)	O
;	O
if	O
(	O
scm_is_string	function
(	O
car	O
)	O
)	O
{	O
char	O
*	O
s	pointer
=	O
scm_to_locale_string	function
(	O
car	O
)	O
;	O
found	int
=	O
mu_c_strcasecmp	function
(	O
needle	pointer
,	O
s	pointer
)	O
==	O
0	int
;	O
free	function
(	O
s	pointer
)	O
;	O
}	O
array	int
=	O
scm_cdr	function
(	O
array	int
)	O
;	O
}	O
return	O
found	int
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_header_fields	O
,	O
"mu-message-get-header-fields"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
headers	O
)	O
,	O
"Returns list of headers in the message @var{mesg}. optional argument\n"	pointer
"@var{headers} gives a list of header names to restrict return value to.\n"	pointer
)	O
{	O
size_t	long
i	long
,	O
nfields	long
=	O
0	int
;	O
mu_message_t	pointer
msg	pointer
;	O
mu_header_t	pointer
hdr	pointer
=	O
NULL	O
;	O
SCM	function
scm_first	O
=	O
SCM_EOL	O
,	O
scm_last	O
=	O
SCM_EOL	O
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
if	O
(	O
SCM_UNBNDP	function
(	O
headers	O
)	O
)	O
headers	O
=	O
SCM_EOL	O
;	O
else	O
SCM_ASSERT	function
(	O
scm_is_pair	function
(	O
headers	O
)	O
,	O
headers	O
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
status	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message headers"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
status	int
=	O
mu_header_get_field_count	function
(	O
hdr	pointer
,	O
&	O
nfields	long
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get header field count"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
nfields	long
;	O
i	long
++	O
)	O
{	O
SCM	function
scm_name	O
,	O
scm_value	O
,	O
scm_new	O
;	O
char	O
*	O
name	pointer
,	O
*	O
value	pointer
;	O
status	int
=	O
mu_header_aget_field_name	function
(	O
hdr	pointer
,	O
i	long
,	O
&	O
name	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get header field ~A, message ~A"	pointer
,	O
scm_list_2	function
(	O
scm_from_size_t	function
(	O
i	long
)	O
,	O
mesg	int
)	O
)	O
;	O
if	O
(	O
!	O
scm_is_null	function
(	O
headers	O
)	O
&&	O
!	O
string_is_member	function
(	O
name	pointer
,	O
headers	O
)	O
)	O
continue	O
;	O
status	int
=	O
mu_header_aget_field_value	function
(	O
hdr	pointer
,	O
i	long
,	O
&	O
value	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get header value ~A, message ~A"	pointer
,	O
scm_list_2	function
(	O
scm_from_size_t	function
(	O
i	long
)	O
,	O
mesg	int
)	O
)	O
;	O
scm_name	O
=	O
scm_from_locale_string	function
(	O
name	pointer
)	O
;	O
scm_value	O
=	O
scm_from_locale_string	function
(	O
value	pointer
)	O
;	O
scm_new	O
=	O
scm_cons	function
(	O
scm_cons	function
(	O
scm_name	O
,	O
scm_value	O
)	O
,	O
SCM_EOL	O
)	O
;	O
if	O
(	O
scm_is_null	function
(	O
scm_first	O
)	O
)	O
scm_first	O
=	O
scm_last	O
=	O
scm_new	O
;	O
else	O
{	O
SCM_SETCDR	function
(	O
scm_last	O
,	O
scm_new	O
)	O
;	O
scm_last	O
=	O
scm_new	O
;	O
}	O
}	O
return	O
scm_first	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_set_header_fields	O
,	O
"mu-message-set-header-fields"	pointer
,	O
2	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
list	pointer
,	O
SCM	function
replace	O
)	O
,	O
"Set headers in the message @var{mesg} to those listed in @var{list},\n"	pointer
"which is a list of conses @code{(cons @var{header} @var{value})}.\n\n"	pointer
"Optional parameter @var{replace} specifies whether new header\n"	pointer
"values should replace the headers already present in the\n"	pointer
"message."	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_header_t	pointer
hdr	pointer
;	O
int	O
repl	int
=	O
0	int
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_null	function
(	O
list	pointer
)	O
||	O
scm_is_pair	function
(	O
list	pointer
)	O
,	O
list	pointer
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
replace	O
)	O
)	O
{	O
SCM_ASSERT	function
(	O
scm_is_bool	function
(	O
replace	O
)	O
,	O
replace	O
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
repl	int
=	O
replace	O
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_message_get_header	function
(	O
msg	pointer
,	O
&	O
hdr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message headers"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
for	O
(	O
;	O
!	O
scm_is_null	function
(	O
list	pointer
)	O
;	O
list	pointer
=	O
SCM_CDR	function
(	O
list	pointer
)	O
)	O
{	O
SCM	function
cell	O
=	O
SCM_CAR	function
(	O
list	pointer
)	O
;	O
SCM	function
car	O
,	O
cdr	O
;	O
char	O
*	O
hdr_c	pointer
,	O
*	O
val_c	pointer
;	O
SCM_ASSERT	function
(	O
scm_is_pair	function
(	O
cell	O
)	O
,	O
cell	O
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
car	O
=	O
SCM_CAR	function
(	O
cell	O
)	O
;	O
cdr	O
=	O
SCM_CDR	function
(	O
cell	O
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
car	O
)	O
,	O
car	O
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
cdr	O
)	O
,	O
cdr	O
,	O
SCM_ARGn	O
,	O
FUNC_NAME	O
)	O
;	O
hdr_c	pointer
=	O
scm_to_locale_string	function
(	O
car	O
)	O
;	O
val_c	pointer
=	O
scm_to_locale_string	function
(	O
cdr	O
)	O
;	O
if	O
(	O
repl	int
)	O
status	int
=	O
mu_header_set_value	function
(	O
hdr	pointer
,	O
hdr_c	pointer
,	O
val_c	pointer
,	O
repl	int
)	O
;	O
else	O
status	int
=	O
mu_header_append	function
(	O
hdr	pointer
,	O
hdr_c	pointer
,	O
val_c	pointer
)	O
;	O
free	function
(	O
hdr_c	pointer
)	O
;	O
free	function
(	O
val_c	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot set header value: message ~A, header ~A, value ~A"	pointer
,	O
scm_list_3	function
(	O
mesg	int
,	O
car	O
,	O
cdr	O
)	O
)	O
;	O
}	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_delete	O
,	O
"mu-message-delete"	pointer
,	O
1	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
flag	int
)	O
,	O
"Mark message @var{mesg} as deleted. Optional argument @var{flag} allows to\n"	pointer
"toggle the deletion mark. The message is deleted if it is @code{#t} and\n"	pointer
"undeleted if it is @code{#f}."	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_attribute_t	pointer
attr	pointer
;	O
int	O
delete	int
=	O
1	int
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
flag	int
)	O
)	O
{	O
SCM_ASSERT	function
(	O
scm_is_bool	function
(	O
flag	int
)	O
,	O
flag	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
delete	int
=	O
flag	int
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message attribute"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
if	O
(	O
delete	int
)	O
status	int
=	O
mu_attribute_set_deleted	function
(	O
attr	pointer
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_deleted	function
(	O
attr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Error setting message attribute"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_flag	O
,	O
"mu-message-get-flag"	pointer
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
flag	int
)	O
,	O
"Return the value of the attribute @var{flag} of the message @var{mesg}."	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_attribute_t	pointer
attr	pointer
;	O
int	O
ret	pointer
=	O
0	int
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_integer	function
(	O
flag	int
)	O
,	O
flag	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
status	int
=	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message attribute"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
switch	O
(	O
scm_to_int	function
(	O
flag	int
)	O
)	O
{	O
case	O
MU_ATTRIBUTE_ANSWERED	int
:	O
ret	pointer
=	O
mu_attribute_is_answered	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_FLAGGED	int
:	O
ret	pointer
=	O
mu_attribute_is_flagged	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_DELETED	int
:	O
ret	pointer
=	O
mu_attribute_is_deleted	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_DRAFT	int
:	O
ret	pointer
=	O
mu_attribute_is_draft	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_SEEN	int
:	O
ret	pointer
=	O
mu_attribute_is_seen	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_READ	int
:	O
ret	pointer
=	O
mu_attribute_is_read	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_MODIFIED	int
:	O
ret	pointer
=	O
mu_attribute_is_modified	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_RECENT	int
:	O
ret	pointer
=	O
mu_attribute_is_recent	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
default	O
:	O
mu_attribute_get_flags	function
(	O
attr	pointer
,	O
&	O
ret	pointer
)	O
;	O
ret	pointer
&=	O
scm_to_int	function
(	O
flag	int
)	O
;	O
}	O
return	O
ret	pointer
?	O
SCM_BOOL_T	O
:	O
SCM_BOOL_F	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_set_flag	O
,	O
"mu-message-set-flag"	pointer
,	O
2	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
flag	int
,	O
SCM	function
value	pointer
)	O
,	O
"Set the attribute @var{flag} in message @var{mesg}. If optional @var{value}\n"	pointer
"is @samp{#f}, the attribute is unset.\n"	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_attribute_t	pointer
attr	pointer
;	O
int	O
val	array
=	O
1	int
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_integer	function
(	O
flag	int
)	O
,	O
flag	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
value	pointer
)	O
)	O
{	O
SCM_ASSERT	function
(	O
scm_is_bool	function
(	O
value	pointer
)	O
,	O
value	pointer
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
val	array
=	O
value	pointer
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message attribute"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
status	int
=	O
0	int
;	O
switch	O
(	O
scm_to_int	function
(	O
flag	int
)	O
)	O
{	O
case	O
MU_ATTRIBUTE_ANSWERED	int
:	O
if	O
(	O
val	array
)	O
status	int
=	O
mu_attribute_set_answered	function
(	O
attr	pointer
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_answered	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_FLAGGED	int
:	O
if	O
(	O
val	array
)	O
status	int
=	O
mu_attribute_set_flagged	function
(	O
attr	pointer
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_flagged	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_DELETED	int
:	O
if	O
(	O
val	array
)	O
status	int
=	O
mu_attribute_set_deleted	function
(	O
attr	pointer
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_deleted	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_DRAFT	int
:	O
if	O
(	O
val	array
)	O
status	int
=	O
mu_attribute_set_draft	function
(	O
attr	pointer
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_draft	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_SEEN	int
:	O
if	O
(	O
val	array
)	O
status	int
=	O
mu_attribute_set_seen	function
(	O
attr	pointer
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_seen	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_READ	int
:	O
if	O
(	O
val	array
)	O
status	int
=	O
mu_attribute_set_read	function
(	O
attr	pointer
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_read	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_MODIFIED	int
:	O
if	O
(	O
val	array
)	O
status	int
=	O
mu_attribute_set_modified	function
(	O
attr	pointer
)	O
;	O
else	O
status	int
=	O
mu_attribute_clear_modified	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
case	O
MU_ATTRIBUTE_RECENT	int
:	O
if	O
(	O
val	array
)	O
status	int
=	O
mu_attribute_set_recent	function
(	O
attr	pointer
)	O
;	O
else	O
status	int
=	O
mu_attribute_unset_recent	function
(	O
attr	pointer
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
val	array
)	O
status	int
=	O
mu_attribute_set_flags	function
(	O
attr	pointer
,	O
scm_to_int	function
(	O
flag	int
)	O
)	O
;	O
}	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Error setting message attribute"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_user_flag	O
,	O
"mu-message-get-user-flag"	pointer
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
flag	int
)	O
,	O
"Return value of the user-defined attribute @var{flag} from the message @var{mesg}."	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_attribute_t	pointer
attr	pointer
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_integer	function
(	O
flag	int
)	O
,	O
flag	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
status	int
=	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message attribute"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
mu_attribute_is_userflag	function
(	O
attr	pointer
,	O
scm_to_int	function
(	O
flag	int
)	O
)	O
?	O
SCM_BOOL_T	O
:	O
SCM_BOOL_F	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_set_user_flag	O
,	O
"mu-message-set-user-flag"	pointer
,	O
2	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
flag	int
,	O
SCM	function
value	pointer
)	O
,	O
"Set user-defined attribute @var{flag} in the message @var{mesg}.\n"	pointer
"If optional argumen @var{value} is @samp{#f}, the attribute is unset."	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_attribute_t	pointer
attr	pointer
;	O
int	O
set	int
=	O
1	int
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_integer	function
(	O
flag	int
)	O
,	O
flag	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
value	pointer
)	O
)	O
{	O
SCM_ASSERT	function
(	O
scm_is_bool	function
(	O
value	pointer
)	O
,	O
value	pointer
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
set	int
=	O
value	pointer
==	O
SCM_BOOL_T	O
;	O
}	O
status	int
=	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message attribute"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
if	O
(	O
set	int
)	O
mu_attribute_set_userflag	function
(	O
attr	pointer
,	O
scm_to_int	function
(	O
flag	int
)	O
)	O
;	O
else	O
mu_attribute_unset_userflag	function
(	O
attr	pointer
,	O
scm_to_int	function
(	O
flag	int
)	O
)	O
;	O
return	O
SCM_UNSPECIFIED	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_port	O
,	O
"mu-message-get-port"	pointer
,	O
2	int
,	O
1	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
mode	int
,	O
SCM	function
full	O
)	O
,	O
"@anchor{mu-message-get-port}\n"	pointer
"Returns a port associated with the message @var{mesg}. The @var{mode} is a\n"	pointer
"string defining operation mode of the stream. It may contain any of the\n"	pointer
"two characters: @samp{r} for reading, @samp{w} for writing.\n"	pointer
"If optional boolean argument @var{full} is @samp{#t} then the returned port\n"	pointer
"will allow access to any part of the message (including headers). Otherwise\n"	pointer
"the port accesses only the message body (the default).\n"	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_stream_t	pointer
stream	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
char	O
*	O
str	pointer
;	O
SCM	function
ret	pointer
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
mode	int
)	O
,	O
mode	int
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
full	O
)	O
)	O
{	O
SCM_ASSERT	function
(	O
scm_is_bool	function
(	O
full	O
)	O
,	O
full	O
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
full	O
==	O
SCM_BOOL_T	O
)	O
{	O
status	int
=	O
mu_message_get_streamref	function
(	O
msg	pointer
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message stream"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
}	O
if	O
(	O
!	O
stream	pointer
)	O
{	O
mu_body_t	pointer
body	pointer
=	O
NULL	O
;	O
status	int
=	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message body"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
status	int
=	O
mu_body_get_streamref	function
(	O
body	pointer
,	O
&	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message body stream"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
str	pointer
=	O
scm_to_locale_string	function
(	O
mode	int
)	O
;	O
ret	pointer
=	O
mu_port_make_from_stream	function
(	O
stream	pointer
,	O
scm_mode_bits	function
(	O
str	pointer
)	O
)	O
;	O
free	function
(	O
str	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_body	O
,	O
"mu-message-get-body"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
)	O
,	O
"Returns message body for the message @var{mesg}."	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
mu_body_t	pointer
body	pointer
=	O
NULL	O
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_body	function
(	O
msg	pointer
,	O
&	O
body	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message body"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
mu_scm_body_create	function
(	O
mesg	int
,	O
body	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_multipart_p	O
,	O
"mu-message-multipart?"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
)	O
,	O
"Returns @code{#t} if @var{mesg} is a multipart @acronym{MIME} message."	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
int	O
ismime	int
=	O
0	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
mu_message_is_multipart	function
(	O
msg	pointer
,	O
&	O
ismime	int
)	O
;	O
return	O
ismime	int
?	O
SCM_BOOL_T	O
:	O
SCM_BOOL_F	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_num_parts	O
,	O
"mu-message-get-num-parts"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
)	O
,	O
"Returns number of parts in a multipart @acronym{MIME} message @var{mesg}.\n"	pointer
"Returns @code{#f} if the argument is not a multipart message."	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
int	O
ismime	int
=	O
0	int
;	O
size_t	long
nparts	pointer
=	O
0	int
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
mu_message_is_multipart	function
(	O
msg	pointer
,	O
&	O
ismime	int
)	O
;	O
if	O
(	O
!	O
ismime	int
)	O
return	O
SCM_BOOL_F	O
;	O
status	int
=	O
mu_message_get_num_parts	function
(	O
msg	pointer
,	O
&	O
nparts	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get number of parts in the message ~A"	pointer
,	O
scm_list_1	function
(	O
mesg	int
)	O
)	O
;	O
return	O
scm_from_size_t	function
(	O
nparts	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_part	O
,	O
"mu-message-get-part"	pointer
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
part	long
)	O
,	O
"Returns part #@var{part} of a multipart @acronym{MIME} message @var{mesg}."	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
,	O
submsg	pointer
;	O
int	O
ismime	int
=	O
0	int
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_integer	function
(	O
part	long
)	O
,	O
part	long
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
mu_message_is_multipart	function
(	O
msg	pointer
,	O
&	O
ismime	int
)	O
;	O
if	O
(	O
!	O
ismime	int
)	O
return	O
SCM_BOOL_F	O
;	O
status	int
=	O
mu_message_get_part	function
(	O
msg	pointer
,	O
scm_to_size_t	function
(	O
part	long
)	O
,	O
&	O
submsg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get number of part ~A from the message ~A"	pointer
,	O
scm_list_2	function
(	O
part	long
,	O
mesg	int
)	O
)	O
;	O
return	O
mu_scm_message_create	function
(	O
mesg	int
,	O
submsg	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_send	O
,	O
"mu-message-send"	pointer
,	O
1	int
,	O
3	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
,	O
SCM	function
mailer	pointer
,	O
SCM	function
from	pointer
,	O
SCM	function
to	pointer
)	O
,	O
"Sends message @var{mesg}. Optional @var{mailer} overrides default mailer\n"	pointer
"settings. Optional @var{from} and @var{to} give sender and receiver\n"	pointer
"addresses, respectively.\n"	pointer
)	O
{	O
char	O
*	O
mailer_name	pointer
;	O
mu_address_t	pointer
from_addr	pointer
=	O
NULL	O
;	O
mu_address_t	pointer
to_addr	pointer
=	O
NULL	O
;	O
mu_mailer_t	pointer
mailer_c	pointer
=	O
NULL	O
;	O
mu_message_t	pointer
msg	pointer
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
mailer	pointer
)	O
&&	O
mailer	pointer
!=	O
SCM_BOOL_F	O
)	O
{	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
mailer	pointer
)	O
,	O
mailer	pointer
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
mailer_name	pointer
=	O
scm_to_locale_string	function
(	O
mailer	pointer
)	O
;	O
}	O
else	O
{	O
SCM	function
val	array
=	O
MU_SCM_SYMBOL_VALUE	O
(	O
"mu-mailer"	pointer
)	O
;	O
mailer_name	pointer
=	O
scm_to_locale_string	function
(	O
val	array
)	O
;	O
}	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
from	pointer
)	O
&&	O
from	pointer
!=	O
SCM_BOOL_F	O
)	O
{	O
char	O
*	O
s	pointer
;	O
int	O
rc	int
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
from	pointer
)	O
,	O
from	pointer
,	O
SCM_ARG3	O
,	O
FUNC_NAME	O
)	O
;	O
s	pointer
=	O
scm_to_locale_string	function
(	O
from	pointer
)	O
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
from_addr	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
rc	int
,	O
"cannot create address"	pointer
,	O
scm_list_1	function
(	O
from	pointer
)	O
)	O
;	O
}	O
if	O
(	O
!	O
SCM_UNBNDP	function
(	O
to	pointer
)	O
&&	O
to	pointer
!=	O
SCM_BOOL_F	O
)	O
{	O
char	O
*	O
s	pointer
;	O
int	O
rc	int
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
to	pointer
)	O
,	O
to	pointer
,	O
SCM_ARG4	O
,	O
FUNC_NAME	O
)	O
;	O
s	pointer
=	O
scm_to_locale_string	function
(	O
to	pointer
)	O
;	O
rc	int
=	O
mu_address_create	function
(	O
&	O
to_addr	pointer
,	O
s	pointer
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
rc	int
,	O
"cannot create address"	pointer
,	O
scm_list_1	function
(	O
to	pointer
)	O
)	O
;	O
}	O
status	int
=	O
mu_mailer_create	function
(	O
&	O
mailer_c	pointer
,	O
mailer_name	pointer
)	O
;	O
free	function
(	O
mailer_name	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot create mailer"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
if	O
(	O
scm_to_int	function
(	O
MU_SCM_SYMBOL_VALUE	O
(	O
"mu-debug"	pointer
)	O
)	O
)	O
{	O
mu_debug_set_category_level	function
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
)	O
;	O
}	O
status	int
=	O
mu_mailer_open	function
(	O
mailer_c	pointer
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_mailer_send_message	function
(	O
mailer_c	pointer
,	O
msg	pointer
,	O
from_addr	pointer
,	O
to_addr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot send message"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
mu_mailer_close	function
(	O
mailer_c	pointer
)	O
;	O
}	O
else	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot open mailer"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
mu_mailer_destroy	function
(	O
&	O
mailer_c	pointer
)	O
;	O
return	O
status	int
==	O
0	int
?	O
SCM_BOOL_T	O
:	O
SCM_BOOL_F	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_get_uid	O
,	O
"mu-message-get-uid"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
mesg	int
)	O
,	O
"Returns UID of the message @var{mesg}\n"	pointer
)	O
{	O
mu_message_t	pointer
msg	pointer
;	O
int	O
status	int
;	O
size_t	long
uid	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_message	function
(	O
mesg	int
)	O
,	O
mesg	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
msg	pointer
=	O
mu_scm_message_get	function
(	O
mesg	int
)	O
;	O
status	int
=	O
mu_message_get_uid	function
(	O
msg	pointer
,	O
&	O
uid	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get message uid"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
scm_from_size_t	function
(	O
uid	int
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_message_from_port	O
,	O
"mu-message-from-port"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
port	int
)	O
,	O
"Reads one message from @var{port} and returns it.\n"	pointer
)	O
{	O
mu_stream_t	pointer
str	pointer
;	O
int	O
rc	int
;	O
mu_message_t	pointer
msg	pointer
;	O
SCM_ASSERT	function
(	O
SCM_PORTP	function
(	O
port	int
)	O
,	O
port	int
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
rc	int
=	O
mu_scm_port_stream_create	function
(	O
&	O
str	pointer
,	O
port	int
)	O
;	O
if	O
(	O
rc	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
rc	int
,	O
"Cannot create mu_stream_t from ~A"	pointer
,	O
scm_list_1	function
(	O
port	int
)	O
)	O
;	O
rc	int
=	O
mu_stream_to_message	function
(	O
str	pointer
,	O
&	O
msg	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
str	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
rc	int
,	O
"Failed to get message from ~A"	pointer
,	O
scm_list_1	function
(	O
port	int
)	O
)	O
;	O
return	O
mu_scm_message_create	function
(	O
NULL	O
,	O
msg	pointer
)	O
;	O
}	O
void	O
mu_scm_message_init	function
(	O
)	O
{	O
message_tag	int
=	O
scm_make_smob_type	function
(	O
"message"	pointer
,	O
sizeof	O
(	O
struct	O
mu_message	struct
)	O
)	O
;	O
scm_set_smob_free	function
(	O
message_tag	int
,	O
mu_scm_message_free	function
)	O
;	O
scm_set_smob_print	function
(	O
message_tag	int
,	O
mu_scm_message_print	function
)	O
;	O
}	O
