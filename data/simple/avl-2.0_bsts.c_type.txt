struct	O
bsts_node	struct
{	O
struct	O
bsts_node	struct
*	O
link	array
[	O
2	int
]	O
;	O
int	O
data	int
;	O
}	O
;	O
struct	O
bsts_tree	struct
{	O
struct	O
bsts_node	struct
*	O
root	pointer
;	O
struct	O
bsts_node	struct
sentinel	struct
;	O
struct	O
libavl_allocator	struct
*	O
alloc	pointer
;	O
}	O
;	O
extern	O
struct	O
libavl_allocator	struct
bsts_allocator_default	struct
;	O
void	O
*	O
bsts_malloc	function
(	O
struct	O
libavl_allocator	struct
*	O
,	O
size_t	long
)	O
;	O
void	O
bsts_free	function
(	O
struct	O
libavl_allocator	struct
*	O
,	O
void	O
*	O
)	O
;	O
void	O
*	O
bsts_malloc	function
(	O
struct	O
libavl_allocator	struct
*	O
allocator	pointer
,	O
size_t	long
size	long
)	O
{	O
assert	O
(	O
allocator	pointer
!=	O
NULL	O
&&	O
size	long
>	O
0	int
)	O
;	O
return	O
malloc	function
(	O
size	long
)	O
;	O
}	O
void	O
bsts_free	function
(	O
struct	O
libavl_allocator	struct
*	O
allocator	pointer
,	O
void	O
*	O
block	pointer
)	O
{	O
assert	O
(	O
allocator	pointer
!=	O
NULL	O
&&	O
block	pointer
!=	O
NULL	O
)	O
;	O
free	function
(	O
block	pointer
)	O
;	O
}	O
struct	O
libavl_allocator	struct
bsts_allocator_default	struct
=	O
{	O
bsts_malloc	function
,	O
bsts_free	function
}	O
;	O
int	O
bsts_find	function
(	O
struct	O
bsts_tree	struct
*	O
tree	pointer
,	O
int	O
item	int
)	O
{	O
const	O
struct	O
bsts_node	struct
*	O
node	pointer
;	O
tree	pointer
->	O
sentinel	struct
.	O
data	int
=	O
item	int
;	O
node	pointer
=	O
tree	pointer
->	O
root	pointer
;	O
while	O
(	O
item	int
!=	O
node	pointer
->	O
data	int
)	O
if	O
(	O
item	int
<	O
node	pointer
->	O
data	int
)	O
node	pointer
=	O
node	pointer
->	O
link	array
[	O
0	int
]	O
;	O
else	O
node	pointer
=	O
node	pointer
->	O
link	array
[	O
1	int
]	O
;	O
return	O
node	pointer
!=	O
&	O
tree	pointer
->	O
sentinel	struct
;	O
}	O
void	O
bsts_insert	function
(	O
struct	O
bsts_tree	struct
*	O
tree	pointer
,	O
int	O
item	int
)	O
{	O
struct	O
bsts_node	struct
*	O
*	O
q	pointer
=	O
&	O
tree	pointer
->	O
root	pointer
;	O
struct	O
bsts_node	struct
*	O
p	pointer
=	O
tree	pointer
->	O
root	pointer
;	O
tree	pointer
->	O
sentinel	struct
.	O
data	int
=	O
item	int
;	O
while	O
(	O
item	int
!=	O
p	pointer
->	O
data	int
)	O
{	O
int	O
dir	int
=	O
item	int
>	O
p	pointer
->	O
data	int
;	O
q	pointer
=	O
&	O
p	pointer
->	O
link	array
[	O
dir	int
]	O
;	O
p	pointer
=	O
p	pointer
->	O
link	array
[	O
dir	int
]	O
;	O
}	O
if	O
(	O
p	pointer
==	O
&	O
tree	pointer
->	O
sentinel	struct
)	O
{	O
*	O
q	pointer
=	O
tree	pointer
->	O
alloc	pointer
->	O
libavl_malloc	pointer
(	O
tree	pointer
->	O
alloc	pointer
,	O
sizeof	O
*	O
*	O
q	pointer
)	O
;	O
if	O
(	O
*	O
q	pointer
==	O
NULL	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"out of memory\n"	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
(	O
*	O
q	pointer
)	O
->	O
link	array
[	O
0	int
]	O
=	O
(	O
*	O
q	pointer
)	O
->	O
link	array
[	O
1	int
]	O
=	O
&	O
tree	pointer
->	O
sentinel	struct
;	O
(	O
*	O
q	pointer
)	O
->	O
data	int
=	O
item	int
;	O
}	O
}	O
int	O
test_correctness	function
(	O
struct	O
libavl_allocator	struct
*	O
alloc	pointer
,	O
int	O
*	O
insert	array
,	O
int	O
*	O
delete	array
,	O
int	O
n	int
,	O
int	O
verbosity	int
)	O
{	O
struct	O
bsts_tree	struct
tree	pointer
;	O
int	O
okay	int
=	O
1	int
;	O
int	O
i	int
;	O
tree	pointer
.	O
root	pointer
=	O
&	O
tree	pointer
.	O
sentinel	struct
;	O
tree	pointer
.	O
alloc	pointer
=	O
alloc	pointer
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
bsts_insert	function
(	O
&	O
tree	pointer
,	O
insert	array
[	O
i	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
if	O
(	O
!	O
bsts_find	function
(	O
&	O
tree	pointer
,	O
i	int
)	O
)	O
{	O
printf	function
(	O
"%d should be in tree, but isn't\n"	pointer
,	O
i	int
)	O
;	O
okay	int
=	O
0	int
;	O
}	O
return	O
okay	int
;	O
}	O
int	O
test_overflow	function
(	O
struct	O
libavl_allocator	struct
*	O
alloc	pointer
,	O
int	O
order	array
[	O
]	O
,	O
int	O
n	int
,	O
int	O
verbosity	int
)	O
{	O
return	O
0	int
;	O
}	O
