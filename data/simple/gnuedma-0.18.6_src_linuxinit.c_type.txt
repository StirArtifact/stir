extern	O
char	O
*	O
strsignal	function
(	O
int	O
)	O
;	O
void	O
HandleEx	function
(	O
int	O
)	O
;	O
EUint32	long
TheEnd	function
(	O
void	O
)	O
;	O
EUint32	long
EDMAInit	function
(	O
)	O
{	O
mode_t	int
my_umask	int
;	O
HMEM	long
hGVar	long
=	O
0	int
;	O
struct	O
stat	struct
buf	struct
;	O
signal	function
(	O
SIGHUP	int
,	O
HandleEx	function
)	O
;	O
signal	function
(	O
SIGINT	int
,	O
HandleEx	function
)	O
;	O
signal	function
(	O
SIGQUIT	int
,	O
HandleEx	function
)	O
;	O
signal	function
(	O
SIGILL	int
,	O
HandleEx	function
)	O
;	O
signal	function
(	O
SIGABRT	int
,	O
HandleEx	function
)	O
;	O
signal	function
(	O
SIGFPE	int
,	O
HandleEx	function
)	O
;	O
signal	function
(	O
SIGSEGV	int
,	O
HandleEx	function
)	O
;	O
signal	function
(	O
SIGPIPE	int
,	O
HandleEx	function
)	O
;	O
if	O
(	O
(	O
stat	struct
(	O
TMPDIR	pointer
,	O
&	O
buf	struct
)	O
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"GNU EDMA Startup..."	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s temporally file doesn't exist. "	pointer
"Trying to create it\n"	pointer
,	O
TMPDIR	pointer
)	O
;	O
my_umask	int
=	O
umask	function
(	O
0000	int
)	O
;	O
if	O
(	O
(	O
mkdir	function
(	O
TMPDIR	pointer
,	O
0777	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Can't create %s directory\n"	pointer
,	O
TMPDIR	pointer
)	O
;	O
perror	function
(	O
"EDMAInit:"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Aborting...\n"	pointer
)	O
;	O
edma_sfree	function
(	O
hGVar	long
,	O
GVar	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
umask	function
(	O
my_umask	int
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Can't stat %s\n"	pointer
,	O
TMPDIR	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s directory must exists. "	pointer
"Try create it manually\n"	pointer
,	O
TMPDIR	pointer
)	O
;	O
perror	function
(	O
"EDMAInit:"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Aborting...\n"	pointer
)	O
;	O
edma_sfree	function
(	O
hGVar	long
,	O
GVar	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
hGVar	long
=	O
edma_salloc	function
(	O
sizeof	O
(	O
SYS_GLOBAL_VAR	struct
)	O
,	O
"MisVars1"	pointer
)	O
;	O
GVar	pointer
=	O
(	O
SYS_GLOBAL_VAR	struct
*	O
)	O
edma_sget	function
(	O
hGVar	long
)	O
;	O
edma_printf	function
(	O
"\nGNU/EDMA %d.%d.%d build [%s][%s][%s] starting up..."	pointer
,	O
VERSION_MA	int
,	O
VERSION_MI	int
,	O
VERSION_BUG	int
,	O
__DATE__	O
,	O
VERSION_STATUS	pointer
,	O
EVERSION	pointer
)	O
;	O
if	O
(	O
GVar	pointer
->	O
Running	long
)	O
edma_log	function
(	O
"Running: %d | nClasses: %d | nMaxClasses: %d | SystemPath: %s\n"	pointer
,	O
GVar	pointer
->	O
Running	long
,	O
GVar	pointer
->	O
nClases	long
,	O
GVar	pointer
->	O
nMaxClases	long
,	O
GVar	pointer
->	O
SystemPath	array
)	O
;	O
if	O
(	O
GVar	pointer
->	O
Running	long
==	O
0	int
)	O
{	O
GVar	pointer
->	O
Running	long
++	O
;	O
GVar	pointer
->	O
AppIdGen	long
=	O
0	int
;	O
}	O
else	O
GVar	pointer
->	O
Running	long
++	O
;	O
GVar	pointer
->	O
AppIdGen	long
++	O
;	O
AppId	long
=	O
GVar	pointer
->	O
AppIdGen	long
;	O
sprintf	function
(	O
AppName	array
,	O
"%ld"	pointer
,	O
AppId	long
)	O
;	O
if	O
(	O
GVar	pointer
->	O
DebugLevel	long
==	O
0	int
)	O
GVar	pointer
->	O
DebugLevel	long
=	O
69	int
;	O
GVar	pointer
->	O
hMySelf	long
=	O
hGVar	long
;	O
EDMAIni	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAEnd	function
(	O
)	O
{	O
HMEM	long
h	long
;	O
ESint32	long
i	long
;	O
signal	function
(	O
SIGHUP	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGINT	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGQUIT	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGILL	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGABRT	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGFPE	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGSEGV	int
,	O
SIG_IGN	O
)	O
;	O
signal	function
(	O
SIGPIPE	int
,	O
SIG_IGN	O
)	O
;	O
edma_printf	function
(	O
"-------------------[EDMAEnd]--------------------------------"	pointer
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nMaxObj	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
gObj	O
[	O
i	long
]	O
!=	O
NULL	O
)	O
{	O
edma_printf	function
(	O
"[WARNNING][%s] Object %d of class %s don't destroyed"	pointer
,	O
__FUNCTION__	O
,	O
i	long
,	O
gClass	O
[	O
gObj	O
[	O
i	long
]	O
->	O
IdClass	long
]	O
->	O
ClassName	array
)	O
;	O
}	O
}	O
GVar	pointer
->	O
Running	long
--	O
;	O
if	O
(	O
GVar	pointer
->	O
Running	long
<	O
0	int
)	O
{	O
edma_printf	function
(	O
"System Error: Process reference below 0"	pointer
)	O
;	O
GVar	pointer
->	O
Running	long
=	O
0	int
;	O
}	O
edma_log	function
(	O
"Process %d leaves GNU EDMA. %d process remaining"	pointer
,	O
AppId	long
,	O
GVar	pointer
->	O
Running	long
)	O
;	O
EDMAFinish	function
(	O
)	O
;	O
if	O
(	O
GVar	pointer
->	O
Running	long
==	O
0	int
)	O
{	O
GVar	pointer
->	O
AppIdGen	long
=	O
0	int
;	O
edma_printf	function
(	O
"No more process in GNU EDMA. Freeing All Resources..."	pointer
)	O
;	O
EDMAFree	function
(	O
)	O
;	O
h	long
=	O
GVar	pointer
->	O
hMySelf	long
;	O
edma_sunget	function
(	O
GVar	pointer
)	O
;	O
edma_sfree	function
(	O
h	long
,	O
GVar	pointer
)	O
;	O
edma_printf	function
(	O
"%s"	pointer
,	O
"Cleanup done!!"	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
HandleEx	function
(	O
int	O
s	int
)	O
{	O
ETHREAD	long
eth	long
;	O
eth	long
=	O
edma_thread_self	function
(	O
)	O
;	O
printf	function
(	O
"\n----------------------------------------------------------------"	pointer
)	O
;	O
printf	function
(	O
"\n[GNUEDMA Exception Handler] Signal : %s [%d]. %ld running "	pointer
"threads -> Cleaning Up!!"	pointer
,	O
strsignal	function
(	O
s	int
)	O
,	O
s	int
,	O
num_threads	long
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
EDMAEnd	function
(	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
