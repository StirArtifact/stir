struct	O
mu_wordwrap_stream	struct
{	O
struct	O
_mu_stream	struct
stream	pointer
;	O
unsigned	O
left_margin	long
;	O
unsigned	O
right_margin	long
;	O
char	O
*	O
buffer	pointer
;	O
unsigned	O
offset	long
;	O
mu_stream_t	pointer
transport	pointer
;	O
}	O
;	O
static	O
int	O
is_word	function
(	O
int	O
c	int
)	O
{	O
return	O
!	O
mu_isspace	O
(	O
c	int
)	O
;	O
}	O
static	O
int	O
full_write	function
(	O
struct	O
mu_wordwrap_stream	struct
*	O
str	pointer
,	O
size_t	long
length	long
)	O
{	O
size_t	long
n	int
,	O
rdsize	long
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
length	long
;	O
)	O
{	O
int	O
rc	int
=	O
mu_stream_write	function
(	O
str	pointer
->	O
transport	pointer
,	O
str	pointer
->	O
buffer	pointer
+	O
n	int
,	O
length	long
-	O
n	int
,	O
&	O
rdsize	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
n	int
+=	O
rdsize	long
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_wordwrap_flush_line	function
(	O
struct	O
mu_wordwrap_stream	struct
*	O
str	pointer
,	O
int	O
lookahead	int
)	O
{	O
size_t	long
length	long
,	O
word_start	long
,	O
word_len	long
=	O
0	int
;	O
int	O
nl	int
=	O
0	int
;	O
char	O
savech	char
;	O
int	O
rc	int
;	O
length	long
=	O
word_start	long
=	O
str	pointer
->	O
offset	long
;	O
if	O
(	O
str	pointer
->	O
offset	long
>	O
0	int
&&	O
lookahead	int
)	O
{	O
if	O
(	O
is_word	function
(	O
str	pointer
->	O
buffer	pointer
[	O
str	pointer
->	O
offset	long
-	O
1	int
]	O
)	O
&&	O
is_word	function
(	O
lookahead	int
)	O
)	O
{	O
for	O
(	O
length	long
=	O
str	pointer
->	O
offset	long
;	O
length	long
>	O
str	pointer
->	O
left_margin	long
;	O
length	long
--	O
)	O
{	O
if	O
(	O
!	O
is_word	function
(	O
str	pointer
->	O
buffer	pointer
[	O
length	long
-	O
1	int
]	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
length	long
==	O
str	pointer
->	O
left_margin	long
)	O
{	O
rc	int
=	O
full_write	function
(	O
str	pointer
,	O
str	pointer
->	O
offset	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
str	pointer
->	O
offset	long
=	O
0	int
;	O
return	O
rc	int
;	O
}	O
word_start	long
=	O
length	long
;	O
}	O
}	O
while	O
(	O
length	long
>	O
0	int
&&	O
mu_isspace	O
(	O
str	pointer
->	O
buffer	pointer
[	O
length	long
-	O
1	int
]	O
)	O
)	O
length	long
--	O
;	O
if	O
(	O
length	long
==	O
0	int
||	O
str	pointer
->	O
buffer	pointer
[	O
length	long
-	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
savech	char
=	O
str	pointer
->	O
buffer	pointer
[	O
length	long
]	O
;	O
str	pointer
->	O
buffer	pointer
[	O
length	long
]	O
=	O
'\n'	O
;	O
nl	int
=	O
1	int
;	O
}	O
else	O
nl	int
=	O
0	int
;	O
rc	int
=	O
full_write	function
(	O
str	pointer
,	O
length	long
+	O
nl	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
nl	int
)	O
str	pointer
->	O
buffer	pointer
[	O
length	long
]	O
=	O
savech	char
;	O
memset	function
(	O
str	pointer
->	O
buffer	pointer
,	O
' '	O
,	O
str	pointer
->	O
left_margin	long
)	O
;	O
if	O
(	O
word_start	long
>	O
str	pointer
->	O
left_margin	long
)	O
{	O
word_len	long
=	O
str	pointer
->	O
offset	long
-	O
word_start	long
;	O
if	O
(	O
word_len	long
)	O
memmove	function
(	O
str	pointer
->	O
buffer	pointer
+	O
str	pointer
->	O
left_margin	long
,	O
str	pointer
->	O
buffer	pointer
+	O
word_start	long
,	O
word_len	long
)	O
;	O
}	O
str	pointer
->	O
offset	long
=	O
str	pointer
->	O
left_margin	long
+	O
word_len	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_wordwrap_write	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
const	O
char	O
*	O
iptr	pointer
,	O
size_t	long
isize	long
,	O
size_t	long
*	O
nbytes	pointer
)	O
{	O
struct	O
mu_wordwrap_stream	struct
*	O
str	pointer
=	O
(	O
struct	O
mu_wordwrap_stream	struct
*	O
)	O
stream	pointer
;	O
size_t	long
n	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
isize	long
;	O
n	int
++	O
)	O
{	O
if	O
(	O
str	pointer
->	O
offset	long
==	O
str	pointer
->	O
right_margin	long
||	O
(	O
str	pointer
->	O
offset	long
>	O
str	pointer
->	O
left_margin	long
&&	O
str	pointer
->	O
buffer	pointer
[	O
str	pointer
->	O
offset	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
)	O
_wordwrap_flush_line	function
(	O
str	pointer
,	O
iptr	pointer
[	O
n	int
]	O
)	O
;	O
if	O
(	O
str	pointer
->	O
offset	long
==	O
str	pointer
->	O
left_margin	long
&&	O
mu_isblank	O
(	O
iptr	pointer
[	O
n	int
]	O
)	O
)	O
continue	O
;	O
str	pointer
->	O
buffer	pointer
[	O
str	pointer
->	O
offset	long
++	O
]	O
=	O
iptr	pointer
[	O
n	int
]	O
;	O
}	O
if	O
(	O
nbytes	pointer
)	O
*	O
nbytes	pointer
=	O
isize	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_wordwrap_flush	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
mu_wordwrap_stream	struct
*	O
str	pointer
=	O
(	O
struct	O
mu_wordwrap_stream	struct
*	O
)	O
stream	pointer
;	O
if	O
(	O
str	pointer
->	O
offset	long
>	O
str	pointer
->	O
left_margin	long
)	O
_wordwrap_flush_line	function
(	O
str	pointer
,	O
0	int
)	O
;	O
return	O
mu_stream_flush	function
(	O
str	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
void	O
_wordwrap_done	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
mu_wordwrap_stream	struct
*	O
str	pointer
=	O
(	O
struct	O
mu_wordwrap_stream	struct
*	O
)	O
stream	pointer
;	O
mu_stream_destroy	function
(	O
&	O
str	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
_wordwrap_close	function
(	O
mu_stream_t	pointer
stream	pointer
)	O
{	O
struct	O
mu_wordwrap_stream	struct
*	O
str	pointer
=	O
(	O
struct	O
mu_wordwrap_stream	struct
*	O
)	O
stream	pointer
;	O
return	O
mu_stream_close	function
(	O
str	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
set_margin	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
unsigned	O
lmargin	int
,	O
int	O
off	int
)	O
{	O
struct	O
mu_wordwrap_stream	struct
*	O
str	pointer
=	O
(	O
struct	O
mu_wordwrap_stream	struct
*	O
)	O
stream	pointer
;	O
if	O
(	O
off	int
<	O
0	int
&&	O
-	O
off	int
>	O
str	pointer
->	O
left_margin	long
)	O
return	O
EINVAL	int
;	O
lmargin	int
+=	O
off	int
;	O
if	O
(	O
lmargin	int
>=	O
str	pointer
->	O
right_margin	long
)	O
return	O
EINVAL	int
;	O
if	O
(	O
str	pointer
->	O
offset	long
>	O
str	pointer
->	O
left_margin	long
&&	O
(	O
lmargin	int
<	O
str	pointer
->	O
offset	long
||	O
(	O
lmargin	int
==	O
str	pointer
->	O
offset	long
&&	O
is_word	function
(	O
str	pointer
->	O
buffer	pointer
[	O
str	pointer
->	O
offset	long
-	O
1	int
]	O
)	O
)	O
||	O
str	pointer
->	O
buffer	pointer
[	O
str	pointer
->	O
offset	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
)	O
_wordwrap_flush	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
lmargin	int
>	O
str	pointer
->	O
offset	long
)	O
memset	function
(	O
str	pointer
->	O
buffer	pointer
+	O
str	pointer
->	O
offset	long
,	O
' '	O
,	O
lmargin	int
-	O
str	pointer
->	O
offset	long
)	O
;	O
str	pointer
->	O
left_margin	long
=	O
lmargin	int
;	O
str	pointer
->	O
offset	long
=	O
lmargin	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_wordwrap_ctl	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
int	O
code	int
,	O
int	O
opcode	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
mu_wordwrap_stream	struct
*	O
str	pointer
=	O
(	O
struct	O
mu_wordwrap_stream	struct
*	O
)	O
stream	pointer
;	O
int	O
status	int
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
MU_IOCTL_WORDWRAPSTREAM	int
:	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_WORDWRAP_GET_MARGIN	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
*	O
(	O
unsigned	O
*	O
)	O
arg	pointer
=	O
str	pointer
->	O
left_margin	long
;	O
break	O
;	O
case	O
MU_IOCTL_WORDWRAP_SET_MARGIN	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
return	O
set_margin	function
(	O
stream	pointer
,	O
*	O
(	O
unsigned	O
*	O
)	O
arg	pointer
,	O
0	int
)	O
;	O
case	O
MU_IOCTL_WORDWRAP_SET_NEXT_MARGIN	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
unsigned	O
marg	int
=	O
*	O
(	O
unsigned	O
*	O
)	O
arg	pointer
;	O
if	O
(	O
marg	int
>=	O
str	pointer
->	O
right_margin	long
)	O
return	O
EINVAL	int
;	O
str	pointer
->	O
left_margin	long
=	O
marg	int
;	O
}	O
break	O
;	O
case	O
MU_IOCTL_WORDWRAP_MOVE_MARGIN	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
return	O
set_margin	function
(	O
stream	pointer
,	O
str	pointer
->	O
offset	long
,	O
*	O
(	O
int	O
*	O
)	O
arg	pointer
)	O
;	O
case	O
MU_IOCTL_WORDWRAP_GET_COLUMN	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
*	O
(	O
unsigned	O
*	O
)	O
arg	pointer
=	O
str	pointer
->	O
offset	long
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
break	O
;	O
case	O
MU_IOCTL_TRANSPORT	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
mu_transport_t	pointer
*	O
ptrans	pointer
=	O
arg	pointer
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
ptrans	pointer
[	O
0	int
]	O
=	O
(	O
mu_transport_t	pointer
)	O
str	pointer
->	O
transport	pointer
;	O
ptrans	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
ptrans	pointer
=	O
arg	pointer
;	O
if	O
(	O
ptrans	pointer
[	O
0	int
]	O
)	O
str	pointer
->	O
transport	pointer
=	O
(	O
mu_stream_t	pointer
)	O
ptrans	pointer
[	O
0	int
]	O
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_SUBSTREAM	int
:	O
if	O
(	O
str	pointer
->	O
transport	pointer
&&	O
(	O
(	O
status	int
=	O
mu_stream_ioctl	function
(	O
str	pointer
->	O
transport	pointer
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
)	O
==	O
0	int
||	O
status	int
!=	O
ENOSYS	int
)	O
)	O
return	O
status	int
;	O
case	O
MU_IOCTL_TOPSTREAM	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
mu_stream_t	pointer
*	O
pstr	pointer
=	O
arg	pointer
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
pstr	pointer
[	O
0	int
]	O
=	O
str	pointer
->	O
transport	pointer
;	O
mu_stream_ref	function
(	O
pstr	pointer
[	O
0	int
]	O
)	O
;	O
pstr	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
mu_stream_unref	function
(	O
str	pointer
->	O
transport	pointer
)	O
;	O
str	pointer
->	O
transport	pointer
=	O
pstr	pointer
[	O
0	int
]	O
;	O
mu_stream_ref	function
(	O
str	pointer
->	O
transport	pointer
)	O
;	O
break	O
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_FILTER	int
:	O
return	O
mu_stream_ioctl	function
(	O
str	pointer
->	O
transport	pointer
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_wordwrap_stream_create	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
mu_stream_t	pointer
transport	pointer
,	O
size_t	long
left_margin	long
,	O
size_t	long
right_margin	long
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	pointer
stream	pointer
;	O
struct	O
mu_wordwrap_stream	struct
*	O
str	pointer
;	O
if	O
(	O
right_margin	long
==	O
0	int
||	O
left_margin	long
>=	O
right_margin	long
)	O
return	O
EINVAL	int
;	O
str	pointer
=	O
(	O
struct	O
mu_wordwrap_stream	struct
*	O
)	O
_mu_stream_create	function
(	O
sizeof	O
(	O
*	O
str	pointer
)	O
,	O
MU_STREAM_APPEND	int
)	O
;	O
if	O
(	O
!	O
str	pointer
)	O
return	O
ENOMEM	int
;	O
str	pointer
->	O
stream	pointer
.	O
close	pointer
=	O
_wordwrap_close	function
;	O
str	pointer
->	O
stream	pointer
.	O
write	pointer
=	O
_wordwrap_write	function
;	O
str	pointer
->	O
stream	pointer
.	O
done	pointer
=	O
_wordwrap_done	function
;	O
str	pointer
->	O
stream	pointer
.	O
flush	pointer
=	O
_wordwrap_flush	function
;	O
str	pointer
->	O
stream	pointer
.	O
ctl	pointer
=	O
_wordwrap_ctl	function
;	O
str	pointer
->	O
transport	pointer
=	O
transport	pointer
;	O
mu_stream_ref	function
(	O
transport	pointer
)	O
;	O
str	pointer
->	O
left_margin	long
=	O
left_margin	long
;	O
str	pointer
->	O
right_margin	long
=	O
right_margin	long
;	O
str	pointer
->	O
buffer	pointer
=	O
mu_alloc	function
(	O
str	pointer
->	O
right_margin	long
+	O
1	int
)	O
;	O
memset	function
(	O
str	pointer
->	O
buffer	pointer
,	O
' '	O
,	O
str	pointer
->	O
left_margin	long
)	O
;	O
str	pointer
->	O
offset	long
=	O
str	pointer
->	O
left_margin	long
;	O
stream	pointer
=	O
(	O
mu_stream_t	pointer
)	O
str	pointer
;	O
rc	int
=	O
mu_stream_open	function
(	O
stream	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
else	O
*	O
pstream	pointer
=	O
stream	pointer
;	O
return	O
rc	int
;	O
}	O
