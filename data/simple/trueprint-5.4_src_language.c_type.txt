boolean	enum
restart_language	enum
;	O
short	O
braces_depth	short
;	O
char	O
*	O
language_list	pointer
=	O
"arguments to --language:\n"	pointer
"  c       C\n"	pointer
"  v       Verilog\n"	pointer
"  cxx     C++\n"	pointer
"  report  trueprint report file\n"	pointer
"  sh      shell\n"	pointer
"  pascal  Pascal\n"	pointer
"  perl    Perl\n"	pointer
"  pike    Pike\n"	pointer
"  java    Java\n"	pointer
"  text    plain text\n"	pointer
"  list    compiler or assembler listing file\n"	pointer
"  pseudoc C pseudocode\n"	pointer
;	O
typedef	O
enum	O
{	O
NO_LANGUAGE	int
,	O
C	int
,	O
CXX	int
,	O
PSEUDOC	int
,	O
REPORT	int
,	O
SHELL	int
,	O
PASCAL	int
,	O
PERL	int
,	O
PIKE	int
,	O
LIST	int
,	O
TEXT	int
,	O
JAVA	int
,	O
VERILOG	int
}	O
languages	enum
;	O
get_char_fn	pointer
get_char	pointer
;	O
static	O
languages	enum
language	enum
;	O
static	O
void	O
set_language_opt	function
(	O
const	O
char	O
*	O
prefix	pointer
,	O
const	O
char	O
*	O
option	pointer
,	O
char	O
*	O
value	pointer
)	O
;	O
static	O
void	O
set_language_default	function
(	O
char	O
*	O
value	pointer
)	O
;	O
static	O
languages	enum
filename_to_language	function
(	O
char	O
*	O
)	O
;	O
void	O
setup_language	function
(	O
void	O
)	O
{	O
language	enum
=	O
NO_LANGUAGE	int
;	O
string_option	function
(	O
"t"	pointer
,	O
"language"	pointer
,	O
NULL	O
,	O
NULL	O
,	O
&	O
set_language_opt	function
,	O
&	O
set_language_default	function
,	O
OPT_MISC	int
,	O
"treat input as language.  Use --help languages for list."	pointer
)	O
;	O
}	O
void	O
set_language_default	function
(	O
char	O
*	O
value	pointer
)	O
{	O
if	O
(	O
value	pointer
==	O
NULL	O
)	O
language	enum
=	O
NO_LANGUAGE	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"c"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
C	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"v"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
VERILOG	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"cxx"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"report"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
REPORT	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"sh"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
SHELL	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"pascal"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
PASCAL	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"perl"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
PERL	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"pike"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
PIKE	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"java"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
JAVA	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"text"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
TEXT	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"list"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
LIST	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
value	pointer
,	O
"pseudoc"	pointer
)	O
==	O
0	int
)	O
language	enum
=	O
PSEUDOC	int
;	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
gettext	function
(	O
CMD_NAME	pointer
": unrecognized language type: %s\n"	pointer
)	O
,	O
value	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
}	O
void	O
set_language_opt	function
(	O
const	O
char	O
*	O
prefix	pointer
,	O
const	O
char	O
*	O
option	pointer
,	O
char	O
*	O
value	pointer
)	O
{	O
set_language_default	function
(	O
value	pointer
)	O
;	O
}	O
languages	enum
filename_to_language	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
languages	enum
retval	enum
;	O
char	O
*	O
suffix	pointer
;	O
dm	function
(	O
'l'	O
,	O
2	int
,	O
"Finding language for filename %s\n"	pointer
,	O
filename	pointer
)	O
;	O
if	O
(	O
(	O
suffix	pointer
=	O
strrchr	function
(	O
filename	pointer
,	O
'.'	O
)	O
)	O
==	O
(	O
char	O
*	O
)	O
0	int
)	O
{	O
retval	enum
=	O
TEXT	int
;	O
}	O
else	O
{	O
dm	function
(	O
'l'	O
,	O
2	int
,	O
"Finding language for suffix %s\n"	pointer
,	O
suffix	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".c"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
C	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".v"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
VERILOG	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".h"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
C	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".cxx"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".cpp"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".cc"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".C"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".hpp"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".H"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".pc"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
PSEUDOC	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".ph"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
PSEUDOC	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".rep"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
REPORT	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".sh"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
SHELL	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".pas"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
PASCAL	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".pl"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
PERL	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".pm"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
PERL	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".pmod"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
PIKE	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".pike"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
PIKE	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".java"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
JAVA	int
;	O
else	O
if	O
(	O
strcmp	function
(	O
suffix	pointer
,	O
".lst"	pointer
)	O
==	O
0	int
)	O
retval	enum
=	O
LIST	int
;	O
else	O
retval	enum
=	O
TEXT	int
;	O
}	O
dm	function
(	O
'l'	O
,	O
2	int
,	O
"Language is %d\n"	pointer
,	O
retval	enum
)	O
;	O
return	O
retval	enum
;	O
}	O
char	O
*	O
language_defaults	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
char	O
*	O
retval	enum
;	O
switch	O
(	O
(	O
language	enum
!=	O
NO_LANGUAGE	int
)	O
?	O
language	enum
:	O
filename_to_language	function
(	O
filename	pointer
)	O
)	O
{	O
case	O
C	int
:	O
retval	enum
=	O
lang_c_defaults	array
;	O
break	O
;	O
case	O
VERILOG	int
:	O
retval	enum
=	O
lang_verilog_defaults	array
;	O
break	O
;	O
case	O
CXX	int
:	O
retval	enum
=	O
lang_cxx_defaults	array
;	O
break	O
;	O
case	O
PSEUDOC	int
:	O
retval	enum
=	O
lang_pc_defaults	array
;	O
break	O
;	O
case	O
REPORT	int
:	O
retval	enum
=	O
lang_report_defaults	array
;	O
break	O
;	O
case	O
SHELL	int
:	O
retval	enum
=	O
lang_sh_defaults	array
;	O
break	O
;	O
case	O
PASCAL	int
:	O
retval	enum
=	O
lang_pascal_defaults	array
;	O
break	O
;	O
case	O
PERL	int
:	O
retval	enum
=	O
lang_perl_defaults	array
;	O
break	O
;	O
case	O
PIKE	int
:	O
retval	enum
=	O
lang_pike_defaults	array
;	O
break	O
;	O
case	O
JAVA	int
:	O
retval	enum
=	O
lang_java_defaults	array
;	O
break	O
;	O
case	O
TEXT	int
:	O
retval	enum
=	O
lang_text_defaults	array
;	O
break	O
;	O
case	O
LIST	int
:	O
retval	enum
=	O
lang_list_defaults	array
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
return	O
retval	enum
;	O
}	O
void	O
set_get_char	function
(	O
char	O
*	O
filename	pointer
)	O
{	O
restart_language	enum
=	O
TRUE	int
;	O
switch	O
(	O
(	O
language	enum
!=	O
NO_LANGUAGE	int
)	O
?	O
language	enum
:	O
filename_to_language	function
(	O
filename	pointer
)	O
)	O
{	O
case	O
C	int
:	O
get_char	pointer
=	O
get_c_char	function
;	O
break	O
;	O
case	O
VERILOG	int
:	O
get_char	pointer
=	O
get_verilog_char	function
;	O
break	O
;	O
case	O
CXX	int
:	O
get_char	pointer
=	O
get_cxx_char	function
;	O
break	O
;	O
case	O
PSEUDOC	int
:	O
get_char	pointer
=	O
get_pc_char	function
;	O
break	O
;	O
case	O
REPORT	int
:	O
get_char	pointer
=	O
get_report_char	function
;	O
break	O
;	O
case	O
SHELL	int
:	O
get_char	pointer
=	O
get_sh_char	function
;	O
break	O
;	O
case	O
PASCAL	int
:	O
get_char	pointer
=	O
get_pascal_char	function
;	O
break	O
;	O
case	O
PERL	int
:	O
get_char	pointer
=	O
get_perl_char	function
;	O
break	O
;	O
case	O
PIKE	int
:	O
get_char	pointer
=	O
get_pike_char	function
;	O
break	O
;	O
case	O
JAVA	int
:	O
get_char	pointer
=	O
get_java_char	function
;	O
break	O
;	O
case	O
TEXT	int
:	O
get_char	pointer
=	O
get_text_char	function
;	O
break	O
;	O
case	O
LIST	int
:	O
get_char	pointer
=	O
get_text_char	function
;	O
break	O
;	O
default	O
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
