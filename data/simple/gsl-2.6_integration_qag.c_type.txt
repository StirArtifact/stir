static	O
int	O
qag	function
(	O
const	O
gsl_function	struct
*	O
f	pointer
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
,	O
const	O
size_t	long
limit	long
,	O
gsl_integration_workspace	struct
*	O
workspace	pointer
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
,	O
gsl_integration_rule	function
*	O
q	pointer
)	O
;	O
int	O
gsl_integration_qag	function
(	O
const	O
gsl_function	struct
*	O
f	pointer
,	O
double	O
a	double
,	O
double	O
b	double
,	O
double	O
epsabs	double
,	O
double	O
epsrel	double
,	O
size_t	long
limit	long
,	O
int	O
key	int
,	O
gsl_integration_workspace	struct
*	O
workspace	pointer
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
)	O
{	O
int	O
status	int
;	O
gsl_integration_rule	function
*	O
integration_rule	pointer
=	O
gsl_integration_qk15	function
;	O
if	O
(	O
key	int
<	O
GSL_INTEG_GAUSS15	int
)	O
{	O
key	int
=	O
GSL_INTEG_GAUSS15	int
;	O
}	O
else	O
if	O
(	O
key	int
>	O
GSL_INTEG_GAUSS61	int
)	O
{	O
key	int
=	O
GSL_INTEG_GAUSS61	int
;	O
}	O
switch	O
(	O
key	int
)	O
{	O
case	O
GSL_INTEG_GAUSS15	int
:	O
integration_rule	pointer
=	O
gsl_integration_qk15	function
;	O
break	O
;	O
case	O
GSL_INTEG_GAUSS21	int
:	O
integration_rule	pointer
=	O
gsl_integration_qk21	function
;	O
break	O
;	O
case	O
GSL_INTEG_GAUSS31	int
:	O
integration_rule	pointer
=	O
gsl_integration_qk31	function
;	O
break	O
;	O
case	O
GSL_INTEG_GAUSS41	int
:	O
integration_rule	pointer
=	O
gsl_integration_qk41	function
;	O
break	O
;	O
case	O
GSL_INTEG_GAUSS51	int
:	O
integration_rule	pointer
=	O
gsl_integration_qk51	function
;	O
break	O
;	O
case	O
GSL_INTEG_GAUSS61	int
:	O
integration_rule	pointer
=	O
gsl_integration_qk61	function
;	O
break	O
;	O
default	O
:	O
GSL_ERROR	O
(	O
"value of key does specify a known integration rule"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
status	int
=	O
qag	function
(	O
f	pointer
,	O
a	double
,	O
b	double
,	O
epsabs	double
,	O
epsrel	double
,	O
limit	long
,	O
workspace	pointer
,	O
result	pointer
,	O
abserr	pointer
,	O
integration_rule	pointer
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
qag	function
(	O
const	O
gsl_function	struct
*	O
f	pointer
,	O
const	O
double	O
a	double
,	O
const	O
double	O
b	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
,	O
const	O
size_t	long
limit	long
,	O
gsl_integration_workspace	struct
*	O
workspace	pointer
,	O
double	O
*	O
result	pointer
,	O
double	O
*	O
abserr	pointer
,	O
gsl_integration_rule	function
*	O
q	pointer
)	O
{	O
double	O
area	double
,	O
errsum	double
;	O
double	O
result0	double
,	O
abserr0	double
,	O
resabs0	double
,	O
resasc0	double
;	O
double	O
tolerance	double
;	O
size_t	long
iteration	long
=	O
0	int
;	O
int	O
roundoff_type1	int
=	O
0	int
,	O
roundoff_type2	int
=	O
0	int
,	O
error_type	int
=	O
0	int
;	O
double	O
round_off	double
;	O
initialise	function
(	O
workspace	pointer
,	O
a	double
,	O
b	double
)	O
;	O
*	O
result	pointer
=	O
0	int
;	O
*	O
abserr	pointer
=	O
0	int
;	O
if	O
(	O
limit	long
>	O
workspace	pointer
->	O
limit	long
)	O
{	O
GSL_ERROR	O
(	O
"iteration limit exceeds available workspace"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
epsabs	double
<=	O
0	int
&&	O
(	O
epsrel	double
<	O
50	int
*	O
GSL_DBL_EPSILON	int
||	O
epsrel	double
<	O
0.5e-28	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"tolerance cannot be achieved with given epsabs and epsrel"	pointer
,	O
GSL_EBADTOL	int
)	O
;	O
}	O
q	pointer
(	O
f	pointer
,	O
a	double
,	O
b	double
,	O
&	O
result0	double
,	O
&	O
abserr0	double
,	O
&	O
resabs0	double
,	O
&	O
resasc0	double
)	O
;	O
set_initial_result	function
(	O
workspace	pointer
,	O
result0	double
,	O
abserr0	double
)	O
;	O
tolerance	double
=	O
GSL_MAX_DBL	function
(	O
epsabs	double
,	O
epsrel	double
*	O
fabs	function
(	O
result0	double
)	O
)	O
;	O
round_off	double
=	O
GSL_COERCE_DBL	O
(	O
50	int
*	O
GSL_DBL_EPSILON	int
*	O
resabs0	double
)	O
;	O
if	O
(	O
abserr0	double
<=	O
round_off	double
&&	O
abserr0	double
>	O
tolerance	double
)	O
{	O
*	O
result	pointer
=	O
result0	double
;	O
*	O
abserr	pointer
=	O
abserr0	double
;	O
GSL_ERROR	O
(	O
"cannot reach tolerance because of roundoff error "	pointer
"on first attempt"	pointer
,	O
GSL_EROUND	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
abserr0	double
<=	O
tolerance	double
&&	O
abserr0	double
!=	O
resasc0	double
)	O
||	O
abserr0	double
==	O
0.0	int
)	O
{	O
*	O
result	pointer
=	O
result0	double
;	O
*	O
abserr	pointer
=	O
abserr0	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
limit	long
==	O
1	int
)	O
{	O
*	O
result	pointer
=	O
result0	double
;	O
*	O
abserr	pointer
=	O
abserr0	double
;	O
GSL_ERROR	O
(	O
"a maximum of one iteration was insufficient"	pointer
,	O
GSL_EMAXITER	int
)	O
;	O
}	O
area	double
=	O
result0	double
;	O
errsum	double
=	O
abserr0	double
;	O
iteration	long
=	O
1	int
;	O
do	O
{	O
double	O
a1	double
,	O
b1	double
,	O
a2	double
,	O
b2	double
;	O
double	O
a_i	double
,	O
b_i	double
,	O
r_i	double
,	O
e_i	double
;	O
double	O
area1	double
=	O
0	int
,	O
area2	double
=	O
0	int
,	O
area12	double
=	O
0	int
;	O
double	O
error1	double
=	O
0	int
,	O
error2	double
=	O
0	int
,	O
error12	double
=	O
0	int
;	O
double	O
resasc1	double
,	O
resasc2	double
;	O
double	O
resabs1	double
,	O
resabs2	double
;	O
retrieve	function
(	O
workspace	pointer
,	O
&	O
a_i	double
,	O
&	O
b_i	double
,	O
&	O
r_i	double
,	O
&	O
e_i	double
)	O
;	O
a1	double
=	O
a_i	double
;	O
b1	double
=	O
0.5	int
*	O
(	O
a_i	double
+	O
b_i	double
)	O
;	O
a2	double
=	O
b1	double
;	O
b2	double
=	O
b_i	double
;	O
q	pointer
(	O
f	pointer
,	O
a1	double
,	O
b1	double
,	O
&	O
area1	double
,	O
&	O
error1	double
,	O
&	O
resabs1	double
,	O
&	O
resasc1	double
)	O
;	O
q	pointer
(	O
f	pointer
,	O
a2	double
,	O
b2	double
,	O
&	O
area2	double
,	O
&	O
error2	double
,	O
&	O
resabs2	double
,	O
&	O
resasc2	double
)	O
;	O
area12	double
=	O
area1	double
+	O
area2	double
;	O
error12	double
=	O
error1	double
+	O
error2	double
;	O
errsum	double
+=	O
(	O
error12	double
-	O
e_i	double
)	O
;	O
area	double
+=	O
area12	double
-	O
r_i	double
;	O
if	O
(	O
resasc1	double
!=	O
error1	double
&&	O
resasc2	double
!=	O
error2	double
)	O
{	O
double	O
delta	double
=	O
r_i	double
-	O
area12	double
;	O
if	O
(	O
fabs	function
(	O
delta	double
)	O
<=	O
1.0e-5	int
*	O
fabs	function
(	O
area12	double
)	O
&&	O
error12	double
>=	O
0.99	int
*	O
e_i	double
)	O
{	O
roundoff_type1	int
++	O
;	O
}	O
if	O
(	O
iteration	long
>=	O
10	int
&&	O
error12	double
>	O
e_i	double
)	O
{	O
roundoff_type2	int
++	O
;	O
}	O
}	O
tolerance	double
=	O
GSL_MAX_DBL	function
(	O
epsabs	double
,	O
epsrel	double
*	O
fabs	function
(	O
area	double
)	O
)	O
;	O
if	O
(	O
errsum	double
>	O
tolerance	double
)	O
{	O
if	O
(	O
roundoff_type1	int
>=	O
6	int
||	O
roundoff_type2	int
>=	O
20	int
)	O
{	O
error_type	int
=	O
2	int
;	O
}	O
if	O
(	O
subinterval_too_small	function
(	O
a1	double
,	O
a2	double
,	O
b2	double
)	O
)	O
{	O
error_type	int
=	O
3	int
;	O
}	O
}	O
update	function
(	O
workspace	pointer
,	O
a1	double
,	O
b1	double
,	O
area1	double
,	O
error1	double
,	O
a2	double
,	O
b2	double
,	O
area2	double
,	O
error2	double
)	O
;	O
retrieve	function
(	O
workspace	pointer
,	O
&	O
a_i	double
,	O
&	O
b_i	double
,	O
&	O
r_i	double
,	O
&	O
e_i	double
)	O
;	O
iteration	long
++	O
;	O
}	O
while	O
(	O
iteration	long
<	O
limit	long
&&	O
!	O
error_type	int
&&	O
errsum	double
>	O
tolerance	double
)	O
;	O
*	O
result	pointer
=	O
sum_results	function
(	O
workspace	pointer
)	O
;	O
*	O
abserr	pointer
=	O
errsum	double
;	O
if	O
(	O
errsum	double
<=	O
tolerance	double
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
2	int
)	O
{	O
GSL_ERROR	O
(	O
"roundoff error prevents tolerance from being achieved"	pointer
,	O
GSL_EROUND	int
)	O
;	O
}	O
else	O
if	O
(	O
error_type	int
==	O
3	int
)	O
{	O
GSL_ERROR	O
(	O
"bad integrand behavior found in the integration interval"	pointer
,	O
GSL_ESING	int
)	O
;	O
}	O
else	O
if	O
(	O
iteration	long
==	O
limit	long
)	O
{	O
GSL_ERROR	O
(	O
"maximum number of subdivisions reached"	pointer
,	O
GSL_EMAXITER	int
)	O
;	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"could not integrate function"	pointer
,	O
GSL_EFAILED	int
)	O
;	O
}	O
}	O
