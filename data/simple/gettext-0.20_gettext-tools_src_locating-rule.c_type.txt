struct	O
document_locating_rule_ty	struct
{	O
char	O
*	O
ns	pointer
;	O
char	O
*	O
local_name	pointer
;	O
char	O
*	O
target	pointer
;	O
}	O
;	O
struct	O
document_locating_rule_list_ty	struct
{	O
struct	O
document_locating_rule_ty	struct
*	O
items	pointer
;	O
size_t	long
nitems	long
;	O
size_t	long
nitems_max	long
;	O
}	O
;	O
struct	O
locating_rule_ty	struct
{	O
char	O
*	O
pattern	pointer
;	O
char	O
*	O
name	pointer
;	O
struct	O
document_locating_rule_list_ty	struct
doc_rules	struct
;	O
char	O
*	O
target	pointer
;	O
}	O
;	O
struct	O
locating_rule_list_ty	struct
{	O
struct	O
locating_rule_ty	struct
*	O
items	pointer
;	O
size_t	long
nitems	long
;	O
size_t	long
nitems_max	long
;	O
}	O
;	O
static	O
char	O
*	O
get_attribute	function
(	O
xmlNode	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
attr	pointer
)	O
{	O
xmlChar	char
*	O
value	pointer
;	O
char	O
*	O
result	pointer
;	O
value	pointer
=	O
xmlGetProp	function
(	O
node	pointer
,	O
BAD_CAST	O
attr	pointer
)	O
;	O
result	pointer
=	O
xstrdup	function
(	O
(	O
const	O
char	O
*	O
)	O
value	pointer
)	O
;	O
xmlFree	pointer
(	O
value	pointer
)	O
;	O
return	O
result	pointer
;	O
}	O
static	O
const	O
char	O
*	O
document_locating_rule_match	function
(	O
struct	O
document_locating_rule_ty	struct
*	O
rule	pointer
,	O
xmlDoc	struct
*	O
doc	pointer
)	O
{	O
xmlNode	struct
*	O
root	pointer
;	O
root	pointer
=	O
xmlDocGetRootElement	function
(	O
doc	pointer
)	O
;	O
if	O
(	O
rule	pointer
->	O
ns	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
root	pointer
->	O
ns	pointer
==	O
NULL	O
||	O
!	O
xmlStrEqual	function
(	O
root	pointer
->	O
ns	pointer
->	O
href	pointer
,	O
BAD_CAST	O
rule	pointer
->	O
ns	pointer
)	O
)	O
return	O
NULL	O
;	O
}	O
if	O
(	O
rule	pointer
->	O
local_name	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
xmlStrEqual	function
(	O
root	pointer
->	O
name	pointer
,	O
BAD_CAST	O
rule	pointer
->	O
local_name	pointer
)	O
)	O
return	O
NULL	O
;	O
}	O
return	O
rule	pointer
->	O
target	pointer
;	O
}	O
static	O
const	O
char	O
*	O
locating_rule_match	function
(	O
struct	O
locating_rule_ty	struct
*	O
rule	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
name	pointer
!=	O
NULL	O
)	O
{	O
if	O
(	O
rule	pointer
->	O
name	pointer
==	O
NULL	O
||	O
c_strcasecmp	function
(	O
name	pointer
,	O
rule	pointer
->	O
name	pointer
)	O
!=	O
0	int
)	O
return	O
NULL	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
base	pointer
;	O
char	O
*	O
reduced	pointer
;	O
int	O
err	pointer
;	O
base	pointer
=	O
strrchr	function
(	O
filename	pointer
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
base	pointer
)	O
base	pointer
=	O
filename	pointer
;	O
reduced	pointer
=	O
xstrdup	function
(	O
base	pointer
)	O
;	O
while	O
(	O
strlen	function
(	O
reduced	pointer
)	O
>=	O
3	int
&&	O
memcmp	function
(	O
reduced	pointer
+	O
strlen	function
(	O
reduced	pointer
)	O
-	O
3	int
,	O
".in"	pointer
,	O
3	int
)	O
==	O
0	int
)	O
reduced	pointer
[	O
strlen	function
(	O
reduced	pointer
)	O
-	O
3	int
]	O
=	O
'\0'	O
;	O
err	pointer
=	O
fnmatch	function
(	O
rule	pointer
->	O
pattern	pointer
,	O
basename	function
(	O
reduced	pointer
)	O
,	O
FNM_PATHNAME	O
)	O
;	O
free	pointer
(	O
reduced	pointer
)	O
;	O
if	O
(	O
err	pointer
!=	O
0	int
)	O
return	O
NULL	O
;	O
}	O
if	O
(	O
rule	pointer
->	O
doc_rules	struct
.	O
nitems	long
>	O
0	int
)	O
{	O
const	O
char	O
*	O
target	pointer
;	O
xmlDoc	struct
*	O
doc	pointer
;	O
size_t	long
i	long
;	O
doc	pointer
=	O
xmlReadFile	function
(	O
filename	pointer
,	O
NULL	O
,	O
XML_PARSE_NONET	int
|	O
XML_PARSE_NOWARNING	int
|	O
XML_PARSE_NOBLANKS	int
|	O
XML_PARSE_NOERROR	int
)	O
;	O
if	O
(	O
doc	pointer
==	O
NULL	O
)	O
{	O
xmlError	struct
*	O
err	pointer
=	O
xmlGetLastError	function
(	O
)	O
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"cannot read %s: %s"	pointer
)	O
,	O
filename	pointer
,	O
err	pointer
->	O
message	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
,	O
target	pointer
=	O
NULL	O
;	O
i	long
<	O
rule	pointer
->	O
doc_rules	struct
.	O
nitems	long
;	O
i	long
++	O
)	O
{	O
target	pointer
=	O
document_locating_rule_match	function
(	O
&	O
rule	pointer
->	O
doc_rules	struct
.	O
items	pointer
[	O
i	long
]	O
,	O
doc	pointer
)	O
;	O
if	O
(	O
target	pointer
)	O
break	O
;	O
}	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
if	O
(	O
target	pointer
!=	O
NULL	O
)	O
return	O
target	pointer
;	O
}	O
if	O
(	O
rule	pointer
->	O
target	pointer
!=	O
NULL	O
)	O
return	O
rule	pointer
->	O
target	pointer
;	O
return	O
NULL	O
;	O
}	O
const	O
char	O
*	O
locating_rule_list_locate	function
(	O
struct	O
locating_rule_list_ty	struct
*	O
rules	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
name	pointer
)	O
{	O
const	O
char	O
*	O
target	pointer
=	O
NULL	O
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rules	pointer
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
IS_ABSOLUTE_PATH	O
(	O
filename	pointer
)	O
)	O
{	O
target	pointer
=	O
locating_rule_match	function
(	O
&	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
,	O
filename	pointer
,	O
name	pointer
)	O
;	O
if	O
(	O
target	pointer
!=	O
NULL	O
)	O
return	O
target	pointer
;	O
}	O
else	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
;	O
++	O
j	int
)	O
{	O
const	O
char	O
*	O
dir	pointer
=	O
dir_list_nth	function
(	O
j	int
)	O
;	O
char	O
*	O
new_filename	pointer
;	O
if	O
(	O
dir	pointer
==	O
NULL	O
)	O
break	O
;	O
new_filename	pointer
=	O
xconcatenated_filename	function
(	O
dir	pointer
,	O
filename	pointer
,	O
NULL	O
)	O
;	O
target	pointer
=	O
locating_rule_match	function
(	O
&	O
rules	pointer
->	O
items	pointer
[	O
i	long
]	O
,	O
new_filename	pointer
,	O
name	pointer
)	O
;	O
free	pointer
(	O
new_filename	pointer
)	O
;	O
if	O
(	O
target	pointer
!=	O
NULL	O
)	O
return	O
target	pointer
;	O
}	O
}	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
missing_attribute	function
(	O
xmlNode	struct
*	O
node	pointer
,	O
const	O
char	O
*	O
attribute	pointer
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"\"%s\" node does not have \"%s\""	pointer
)	O
,	O
node	pointer
->	O
name	pointer
,	O
attribute	pointer
)	O
;	O
}	O
static	O
void	O
document_locating_rule_destroy	function
(	O
struct	O
document_locating_rule_ty	struct
*	O
rule	pointer
)	O
{	O
free	pointer
(	O
rule	pointer
->	O
ns	pointer
)	O
;	O
free	pointer
(	O
rule	pointer
->	O
local_name	pointer
)	O
;	O
free	pointer
(	O
rule	pointer
->	O
target	pointer
)	O
;	O
}	O
static	O
void	O
document_locating_rule_list_add	function
(	O
struct	O
document_locating_rule_list_ty	struct
*	O
rules	pointer
,	O
xmlNode	struct
*	O
node	pointer
)	O
{	O
struct	O
document_locating_rule_ty	struct
rule	pointer
;	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"target"	pointer
)	O
)	O
{	O
missing_attribute	function
(	O
node	pointer
,	O
"target"	pointer
)	O
;	O
return	O
;	O
}	O
memset	function
(	O
&	O
rule	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
document_locating_rule_ty	struct
)	O
)	O
;	O
if	O
(	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"ns"	pointer
)	O
)	O
rule	pointer
.	O
ns	pointer
=	O
get_attribute	function
(	O
node	pointer
,	O
"ns"	pointer
)	O
;	O
if	O
(	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"localName"	pointer
)	O
)	O
rule	pointer
.	O
local_name	pointer
=	O
get_attribute	function
(	O
node	pointer
,	O
"localName"	pointer
)	O
;	O
rule	pointer
.	O
target	pointer
=	O
get_attribute	function
(	O
node	pointer
,	O
"target"	pointer
)	O
;	O
if	O
(	O
rules	pointer
->	O
nitems	long
==	O
rules	pointer
->	O
nitems_max	long
)	O
{	O
rules	pointer
->	O
nitems_max	long
=	O
2	int
*	O
rules	pointer
->	O
nitems_max	long
+	O
1	int
;	O
rules	pointer
->	O
items	pointer
=	O
xrealloc	function
(	O
rules	pointer
->	O
items	pointer
,	O
sizeof	O
(	O
struct	O
document_locating_rule_ty	struct
)	O
*	O
rules	pointer
->	O
nitems_max	long
)	O
;	O
}	O
memcpy	function
(	O
&	O
rules	pointer
->	O
items	pointer
[	O
rules	pointer
->	O
nitems	long
++	O
]	O
,	O
&	O
rule	pointer
,	O
sizeof	O
(	O
struct	O
document_locating_rule_ty	struct
)	O
)	O
;	O
}	O
static	O
void	O
locating_rule_destroy	function
(	O
struct	O
locating_rule_ty	struct
*	O
rule	pointer
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rule	pointer
->	O
doc_rules	struct
.	O
nitems	long
;	O
i	long
++	O
)	O
document_locating_rule_destroy	function
(	O
&	O
rule	pointer
->	O
doc_rules	struct
.	O
items	pointer
[	O
i	long
]	O
)	O
;	O
free	pointer
(	O
rule	pointer
->	O
doc_rules	struct
.	O
items	pointer
)	O
;	O
free	pointer
(	O
rule	pointer
->	O
name	pointer
)	O
;	O
free	pointer
(	O
rule	pointer
->	O
pattern	pointer
)	O
;	O
free	pointer
(	O
rule	pointer
->	O
target	pointer
)	O
;	O
}	O
static	O
bool	bool
locating_rule_list_add_from_file	function
(	O
struct	O
locating_rule_list_ty	struct
*	O
rules	pointer
,	O
const	O
char	O
*	O
rule_file_name	pointer
)	O
{	O
xmlDoc	struct
*	O
doc	pointer
;	O
xmlNode	struct
*	O
root	pointer
,	O
*	O
node	pointer
;	O
doc	pointer
=	O
xmlReadFile	function
(	O
rule_file_name	pointer
,	O
"utf-8"	pointer
,	O
XML_PARSE_NONET	int
|	O
XML_PARSE_NOWARNING	int
|	O
XML_PARSE_NOBLANKS	int
|	O
XML_PARSE_NOERROR	int
)	O
;	O
if	O
(	O
doc	pointer
==	O
NULL	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"cannot read XML file %s"	pointer
)	O
,	O
rule_file_name	pointer
)	O
;	O
return	O
false	int
;	O
}	O
root	pointer
=	O
xmlDocGetRootElement	function
(	O
doc	pointer
)	O
;	O
if	O
(	O
!	O
(	O
xmlStrEqual	function
(	O
root	pointer
->	O
name	pointer
,	O
BAD_CAST	O
"locatingRules"	pointer
)	O
)	O
)	O
{	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"the root element is not \"locatingRules\""	pointer
)	O
)	O
;	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
return	O
false	int
;	O
}	O
for	O
(	O
node	pointer
=	O
root	pointer
->	O
children	pointer
;	O
node	pointer
;	O
node	pointer
=	O
node	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
xmlStrEqual	function
(	O
node	pointer
->	O
name	pointer
,	O
BAD_CAST	O
"locatingRule"	pointer
)	O
)	O
{	O
struct	O
locating_rule_ty	struct
rule	pointer
;	O
if	O
(	O
!	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"pattern"	pointer
)	O
)	O
{	O
missing_attribute	function
(	O
node	pointer
,	O
"pattern"	pointer
)	O
;	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
continue	O
;	O
}	O
memset	function
(	O
&	O
rule	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
locating_rule_ty	struct
)	O
)	O
;	O
rule	pointer
.	O
pattern	pointer
=	O
get_attribute	function
(	O
node	pointer
,	O
"pattern"	pointer
)	O
;	O
if	O
(	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"name"	pointer
)	O
)	O
rule	pointer
.	O
name	pointer
=	O
get_attribute	function
(	O
node	pointer
,	O
"name"	pointer
)	O
;	O
if	O
(	O
xmlHasProp	function
(	O
node	pointer
,	O
BAD_CAST	O
"target"	pointer
)	O
)	O
rule	pointer
.	O
target	pointer
=	O
get_attribute	function
(	O
node	pointer
,	O
"target"	pointer
)	O
;	O
else	O
{	O
xmlNode	struct
*	O
n	long
;	O
for	O
(	O
n	long
=	O
node	pointer
->	O
children	pointer
;	O
n	long
;	O
n	long
=	O
n	long
->	O
next	pointer
)	O
{	O
if	O
(	O
xmlStrEqual	function
(	O
n	long
->	O
name	pointer
,	O
BAD_CAST	O
"documentRule"	pointer
)	O
)	O
document_locating_rule_list_add	function
(	O
&	O
rule	pointer
.	O
doc_rules	struct
,	O
n	long
)	O
;	O
}	O
}	O
if	O
(	O
rules	pointer
->	O
nitems	long
==	O
rules	pointer
->	O
nitems_max	long
)	O
{	O
rules	pointer
->	O
nitems_max	long
=	O
2	int
*	O
rules	pointer
->	O
nitems_max	long
+	O
1	int
;	O
rules	pointer
->	O
items	pointer
=	O
xrealloc	function
(	O
rules	pointer
->	O
items	pointer
,	O
sizeof	O
(	O
struct	O
locating_rule_ty	struct
)	O
*	O
rules	pointer
->	O
nitems_max	long
)	O
;	O
}	O
memcpy	function
(	O
&	O
rules	pointer
->	O
items	pointer
[	O
rules	pointer
->	O
nitems	long
++	O
]	O
,	O
&	O
rule	pointer
,	O
sizeof	O
(	O
struct	O
locating_rule_ty	struct
)	O
)	O
;	O
}	O
}	O
xmlFreeDoc	function
(	O
doc	pointer
)	O
;	O
return	O
true	int
;	O
}	O
bool	bool
locating_rule_list_add_from_directory	function
(	O
struct	O
locating_rule_list_ty	struct
*	O
rules	pointer
,	O
const	O
char	O
*	O
directory	pointer
)	O
{	O
DIR	struct
*	O
dirp	pointer
;	O
dirp	pointer
=	O
opendir	function
(	O
directory	pointer
)	O
;	O
if	O
(	O
dirp	pointer
==	O
NULL	O
)	O
return	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
struct	O
dirent	struct
*	O
dp	pointer
;	O
errno	O
=	O
0	int
;	O
dp	pointer
=	O
readdir	function
(	O
dirp	pointer
)	O
;	O
if	O
(	O
dp	pointer
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
name	pointer
=	O
dp	pointer
->	O
d_name	array
;	O
size_t	long
namlen	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
if	O
(	O
namlen	long
>	O
4	int
&&	O
memcmp	function
(	O
name	pointer
+	O
namlen	long
-	O
4	int
,	O
".loc"	pointer
,	O
4	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
locator_file_name	pointer
=	O
xconcatenated_filename	function
(	O
directory	pointer
,	O
name	pointer
,	O
NULL	O
)	O
;	O
locating_rule_list_add_from_file	function
(	O
rules	pointer
,	O
locator_file_name	pointer
)	O
;	O
free	pointer
(	O
locator_file_name	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
errno	O
!=	O
0	int
)	O
return	O
false	int
;	O
else	O
break	O
;	O
}	O
if	O
(	O
closedir	function
(	O
dirp	pointer
)	O
)	O
return	O
false	int
;	O
return	O
true	int
;	O
}	O
struct	O
locating_rule_list_ty	struct
*	O
locating_rule_list_alloc	function
(	O
void	O
)	O
{	O
struct	O
locating_rule_list_ty	struct
*	O
result	pointer
;	O
xmlCheckVersion	function
(	O
LIBXML_VERSION	int
)	O
;	O
result	pointer
=	O
XCALLOC	O
(	O
1	int
,	O
struct	O
locating_rule_list_ty	struct
)	O
;	O
return	O
result	pointer
;	O
}	O
void	O
locating_rule_list_destroy	function
(	O
struct	O
locating_rule_list_ty	struct
*	O
rules	pointer
)	O
{	O
while	O
(	O
rules	pointer
->	O
nitems	long
--	O
>	O
0	int
)	O
locating_rule_destroy	function
(	O
&	O
rules	pointer
->	O
items	pointer
[	O
rules	pointer
->	O
nitems	long
]	O
)	O
;	O
free	pointer
(	O
rules	pointer
->	O
items	pointer
)	O
;	O
}	O
void	O
locating_rule_list_free	function
(	O
struct	O
locating_rule_list_ty	struct
*	O
rules	pointer
)	O
{	O
if	O
(	O
rules	pointer
!=	O
NULL	O
)	O
locating_rule_list_destroy	function
(	O
rules	pointer
)	O
;	O
free	pointer
(	O
rules	pointer
)	O
;	O
}	O
