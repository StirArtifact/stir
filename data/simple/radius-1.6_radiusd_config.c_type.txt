enum	O
cctokentype	enum
{	O
T_EOL	int
=	O
258	int
,	O
T_WORD	int
=	O
259	int
,	O
T_STRING	int
=	O
260	int
,	O
T_NUMBER	int
=	O
261	int
,	O
T_PUNCT	int
=	O
262	int
,	O
T_BOOL	int
=	O
263	int
,	O
T_IPADDR	int
=	O
264	int
}	O
;	O
struct	O
cfg_memblock	struct
{	O
void	O
(	O
*	O
destructor	pointer
)	O
(	O
)	O
;	O
int	O
line_num	int
;	O
}	O
;	O
static	O
grad_list_t	struct
*	O
cfg_memory_pool	pointer
;	O
static	O
grad_list_t	struct
*	O
_cfg_vlist_create	function
(	O
cfg_value_t	struct
*	O
val	array
)	O
;	O
static	O
void	O
_cfg_vlist_append	function
(	O
grad_list_t	struct
*	O
vlist	pointer
,	O
cfg_value_t	struct
*	O
val	array
)	O
;	O
void	O
*	O
cfg_malloc	function
(	O
size_t	long
size	int
,	O
void	O
(	O
*	O
destructor	pointer
)	O
(	O
void	O
*	O
)	O
)	O
;	O
static	O
void	O
_cfg_free_memory_pool	function
(	O
)	O
;	O
static	O
void	O
_cfg_run_begin	function
(	O
struct	O
cfg_stmt	struct
*	O
stmt	pointer
,	O
void	O
*	O
up_data	pointer
)	O
;	O
static	O
int	O
cclex	function
(	O
)	O
;	O
static	O
int	O
ccerror	function
(	O
char	O
*	O
s	pointer
)	O
;	O
static	O
char	O
*	O
typestr	array
[	O
]	O
=	O
{	O
"integer"	pointer
,	O
"boolean"	pointer
,	O
"string"	pointer
,	O
"network"	pointer
,	O
"ipaddr"	pointer
,	O
"port"	pointer
,	O
"char"	pointer
,	O
"host"	pointer
,	O
"unsigned"	pointer
,	O
"size"	pointer
}	O
;	O
struct	O
syntax_block	struct
{	O
struct	O
syntax_block	struct
*	O
prev	pointer
;	O
struct	O
cfg_stmt	struct
*	O
stmt	pointer
;	O
cfg_end_fp	pointer
end	pointer
;	O
void	O
*	O
data	pointer
;	O
}	O
;	O
static	O
struct	O
syntax_block	struct
*	O
block	pointer
;	O
static	O
void	O
_cfg_push_block	function
(	O
struct	O
cfg_stmt	struct
*	O
stmt	pointer
,	O
cfg_end_fp	pointer
end	pointer
,	O
void	O
*	O
data	pointer
)	O
;	O
static	O
struct	O
syntax_block	struct
*	O
_cfg_pop_block	function
(	O
)	O
;	O
int	O
_cfg_make_argv	function
(	O
cfg_value_t	struct
*	O
*	O
argv	pointer
,	O
char	O
*	O
keyword	pointer
,	O
grad_list_t	struct
*	O
vlist	pointer
)	O
;	O
void	O
_cfg_free_argv	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
)	O
;	O
struct	O
cfg_stmt	struct
*	O
_cfg_find_keyword	function
(	O
struct	O
cfg_stmt	struct
*	O
stmt	pointer
,	O
char	O
*	O
str	pointer
)	O
;	O
static	O
int	O
_get_value	function
(	O
cfg_value_t	struct
*	O
arg	pointer
,	O
int	O
type	enum
,	O
void	O
*	O
base	int
)	O
;	O
static	O
grad_slist_t	pointer
cfg_slist	pointer
;	O
char	O
*	O
cfg_filename	pointer
;	O
int	O
cfg_line_num	int
;	O
static	O
char	O
*	O
buffer	pointer
;	O
static	O
char	O
*	O
curp	pointer
;	O
typedef	O
union	O
YYSTYPE	union
{	O
size_t	long
number	long
;	O
int	O
bool	int
;	O
grad_uint32_t	int
ipaddr	int
;	O
char	O
*	O
string	pointer
;	O
cfg_value_t	struct
value	pointer
;	O
cfg_network_t	struct
network	struct
;	O
grad_list_t	struct
*	O
vlist	pointer
;	O
struct	O
cfg_stmt	struct
*	O
stmt	pointer
;	O
}	O
YYSTYPE	union
;	O
typedef	O
unsigned	O
char	O
cctype_uint8	char
;	O
typedef	O
signed	O
char	O
cctype_int8	char
;	O
typedef	O
unsigned	O
short	O
int	O
cctype_uint16	short
;	O
typedef	O
short	O
int	O
cctype_int16	short
;	O
union	O
ccalloc	union
{	O
cctype_int16	short
ccss	short
;	O
YYSTYPE	union
ccvs	union
;	O
}	O
;	O
static	O
const	O
cctype_uint8	char
cctranslate	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
12	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
13	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
10	int
,	O
2	int
,	O
11	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
}	O
;	O
static	O
const	O
cctype_uint8	char
ccprhs	array
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
3	int
,	O
5	int
,	O
7	int
,	O
10	int
,	O
11	int
,	O
13	int
,	O
15	int
,	O
17	int
,	O
20	int
,	O
22	int
,	O
24	int
,	O
29	int
,	O
33	int
,	O
35	int
,	O
36	int
,	O
38	int
,	O
42	int
,	O
44	int
,	O
47	int
,	O
51	int
,	O
53	int
,	O
55	int
,	O
57	int
,	O
59	int
,	O
61	int
,	O
63	int
,	O
65	int
,	O
69	int
,	O
71	int
,	O
75	int
,	O
77	int
,	O
79	int
}	O
;	O
static	O
const	O
cctype_int8	char
ccrhs	array
[	O
]	O
=	O
{	O
15	int
,	O
0	int
,	O
-	O
1	int
,	O
16	int
,	O
-	O
1	int
,	O
18	int
,	O
-	O
1	int
,	O
16	int
,	O
18	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
16	int
,	O
-	O
1	int
,	O
3	int
,	O
-	O
1	int
,	O
19	int
,	O
-	O
1	int
,	O
1	int
,	O
3	int
,	O
-	O
1	int
,	O
24	int
,	O
-	O
1	int
,	O
20	int
,	O
-	O
1	int
,	O
21	int
,	O
17	int
,	O
22	int
,	O
3	int
,	O
-	O
1	int
,	O
26	int
,	O
23	int
,	O
10	int
,	O
-	O
1	int
,	O
11	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
25	int
,	O
-	O
1	int
,	O
26	int
,	O
25	int
,	O
3	int
,	O
-	O
1	int
,	O
27	int
,	O
-	O
1	int
,	O
25	int
,	O
27	int
,	O
-	O
1	int
,	O
25	int
,	O
12	int
,	O
27	int
,	O
-	O
1	int
,	O
4	int
,	O
-	O
1	int
,	O
4	int
,	O
-	O
1	int
,	O
5	int
,	O
-	O
1	int
,	O
6	int
,	O
-	O
1	int
,	O
8	int
,	O
-	O
1	int
,	O
7	int
,	O
-	O
1	int
,	O
28	int
,	O
-	O
1	int
,	O
9	int
,	O
13	int
,	O
6	int
,	O
-	O
1	int
,	O
9	int
,	O
-	O
1	int
,	O
9	int
,	O
29	int
,	O
30	int
,	O
-	O
1	int
,	O
7	int
,	O
-	O
1	int
,	O
9	int
,	O
-	O
1	int
,	O
6	int
,	O
-	O
1	int
}	O
;	O
static	O
const	O
cctype_uint16	short
ccrline	array
[	O
]	O
=	O
{	O
0	int
,	O
125	int
,	O
125	int
,	O
128	int
,	O
129	int
,	O
132	int
,	O
133	int
,	O
136	int
,	O
137	int
,	O
138	int
,	O
144	int
,	O
145	int
,	O
148	int
,	O
151	int
,	O
180	int
,	O
188	int
,	O
191	int
,	O
194	int
,	O
218	int
,	O
222	int
,	O
227	int
,	O
234	int
,	O
240	int
,	O
245	int
,	O
250	int
,	O
255	int
,	O
260	int
,	O
265	int
,	O
270	int
,	O
278	int
,	O
283	int
,	O
290	int
,	O
297	int
,	O
298	int
}	O
;	O
static	O
const	O
char	O
*	O
const	O
cctname	array
[	O
]	O
=	O
{	O
"$end"	pointer
,	O
"error"	pointer
,	O
"$undefined"	pointer
,	O
"T_EOL"	pointer
,	O
"T_WORD"	pointer
,	O
"T_STRING"	pointer
,	O
"T_NUMBER"	pointer
,	O
"T_PUNCT"	pointer
,	O
"T_BOOL"	pointer
,	O
"T_IPADDR"	pointer
,	O
"'{'"	pointer
,	O
"'}'"	pointer
,	O
"','"	pointer
,	O
"':'"	pointer
,	O
"$accept"	pointer
,	O
"input"	pointer
,	O
"list"	pointer
,	O
"opt_list"	pointer
,	O
"line"	pointer
,	O
"stmt"	pointer
,	O
"block_stmt"	pointer
,	O
"block_open"	pointer
,	O
"block_close"	pointer
,	O
"tag"	pointer
,	O
"simple_stmt"	pointer
,	O
"value_list"	pointer
,	O
"keyword"	pointer
,	O
"value"	pointer
,	O
"network"	pointer
,	O
"slash"	pointer
,	O
"netmask"	pointer
,	O
0	int
}	O
;	O
static	O
const	O
cctype_uint8	char
ccr1	array
[	O
]	O
=	O
{	O
0	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
16	int
,	O
17	int
,	O
17	int
,	O
18	int
,	O
18	int
,	O
18	int
,	O
19	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
25	int
,	O
25	int
,	O
26	int
,	O
27	int
,	O
27	int
,	O
27	int
,	O
27	int
,	O
27	int
,	O
27	int
,	O
27	int
,	O
28	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
30	int
}	O
;	O
static	O
const	O
cctype_uint8	char
ccr2	array
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
4	int
,	O
3	int
,	O
1	int
,	O
0	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
3	int
,	O
1	int
,	O
1	int
,	O
1	int
}	O
;	O
static	O
const	O
cctype_uint8	char
ccdefact	array
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
7	int
,	O
21	int
,	O
0	int
,	O
0	int
,	O
3	int
,	O
8	int
,	O
11	int
,	O
0	int
,	O
10	int
,	O
15	int
,	O
9	int
,	O
1	int
,	O
4	int
,	O
0	int
,	O
0	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
26	int
,	O
25	int
,	O
29	int
,	O
0	int
,	O
16	int
,	O
18	int
,	O
27	int
,	O
14	int
,	O
0	int
,	O
31	int
,	O
0	int
,	O
0	int
,	O
13	int
,	O
17	int
,	O
0	int
,	O
19	int
,	O
12	int
,	O
28	int
,	O
33	int
,	O
32	int
,	O
30	int
,	O
20	int
}	O
;	O
static	O
const	O
cctype_int8	char
ccdefgoto	array
[	O
]	O
=	O
{	O
-	O
1	int
,	O
4	int
,	O
5	int
,	O
16	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
28	int
,	O
23	int
,	O
10	int
,	O
24	int
,	O
11	int
,	O
25	int
,	O
26	int
,	O
31	int
,	O
40	int
}	O
;	O
static	O
const	O
cctype_int8	char
ccpact	array
[	O
]	O
=	O
{	O
23	int
,	O
5	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
9	int
,	O
36	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
1	int
,	O
-	O
20	int
,	O
26	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
3	int
,	O
1	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
16	int
,	O
18	int
,	O
13	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
10	int
,	O
-	O
20	int
,	O
37	int
,	O
32	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
26	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
}	O
;	O
static	O
const	O
cctype_int8	char
ccpgoto	array
[	O
]	O
=	O
{	O
-	O
20	int
,	O
-	O
20	int
,	O
33	int
,	O
-	O
20	int
,	O
-	O
4	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
19	int
,	O
-	O
20	int
,	O
-	O
20	int
,	O
-	O
20	int
}	O
;	O
static	O
const	O
cctype_int8	char
cctable	array
[	O
]	O
=	O
{	O
1	int
,	O
14	int
,	O
2	int
,	O
3	int
,	O
1	int
,	O
35	int
,	O
2	int
,	O
3	int
,	O
12	int
,	O
13	int
,	O
-	O
5	int
,	O
14	int
,	O
27	int
,	O
36	int
,	O
-	O
6	int
,	O
41	int
,	O
33	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
29	int
,	O
1	int
,	O
34	int
,	O
2	int
,	O
3	int
,	O
32	int
,	O
30	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
-	O
2	int
,	O
1	int
,	O
38	int
,	O
2	int
,	O
3	int
,	O
39	int
,	O
15	int
,	O
37	int
}	O
;	O
static	O
const	O
cctype_uint8	char
cccheck	array
[	O
]	O
=	O
{	O
1	int
,	O
5	int
,	O
3	int
,	O
4	int
,	O
1	int
,	O
24	int
,	O
3	int
,	O
4	int
,	O
3	int
,	O
0	int
,	O
11	int
,	O
15	int
,	O
11	int
,	O
3	int
,	O
11	int
,	O
34	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
7	int
,	O
1	int
,	O
12	int
,	O
3	int
,	O
4	int
,	O
10	int
,	O
13	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
0	int
,	O
1	int
,	O
6	int
,	O
3	int
,	O
4	int
,	O
9	int
,	O
9	int
,	O
6	int
}	O
;	O
static	O
const	O
cctype_uint8	char
ccstos	array
[	O
]	O
=	O
{	O
0	int
,	O
1	int
,	O
3	int
,	O
4	int
,	O
15	int
,	O
16	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
24	int
,	O
26	int
,	O
3	int
,	O
0	int
,	O
18	int
,	O
16	int
,	O
17	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
23	int
,	O
25	int
,	O
27	int
,	O
28	int
,	O
11	int
,	O
22	int
,	O
7	int
,	O
13	int
,	O
29	int
,	O
10	int
,	O
3	int
,	O
12	int
,	O
27	int
,	O
3	int
,	O
6	int
,	O
6	int
,	O
9	int
,	O
30	int
,	O
27	int
}	O
;	O
static	O
void	O
cc_symbol_value_print	function
(	O
FILE	struct
*	O
ccoutput	pointer
,	O
int	O
cctype	int
,	O
YYSTYPE	union
const	O
*	O
const	O
ccvaluep	pointer
)	O
{	O
if	O
(	O
!	O
ccvaluep	pointer
)	O
return	O
;	O
YYUSE	O
(	O
ccoutput	pointer
)	O
;	O
switch	O
(	O
cctype	int
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
cc_symbol_print	function
(	O
FILE	struct
*	O
ccoutput	pointer
,	O
int	O
cctype	int
,	O
YYSTYPE	union
const	O
*	O
const	O
ccvaluep	pointer
)	O
{	O
if	O
(	O
cctype	int
<	O
YYNTOKENS	int
)	O
YYFPRINTF	O
(	O
ccoutput	pointer
,	O
"token %s ("	pointer
,	O
cctname	array
[	O
cctype	int
]	O
)	O
;	O
else	O
YYFPRINTF	O
(	O
ccoutput	pointer
,	O
"nterm %s ("	pointer
,	O
cctname	array
[	O
cctype	int
]	O
)	O
;	O
cc_symbol_value_print	function
(	O
ccoutput	pointer
,	O
cctype	int
,	O
ccvaluep	pointer
)	O
;	O
YYFPRINTF	O
(	O
ccoutput	pointer
,	O
")"	pointer
)	O
;	O
}	O
static	O
void	O
cc_stack_print	function
(	O
cctype_int16	short
*	O
bottom	pointer
,	O
cctype_int16	short
*	O
top	pointer
)	O
{	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"Stack now"	pointer
)	O
;	O
for	O
(	O
;	O
bottom	pointer
<=	O
top	pointer
;	O
++	O
bottom	pointer
)	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
" %d"	pointer
,	O
*	O
bottom	pointer
)	O
;	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
void	O
cc_reduce_print	function
(	O
YYSTYPE	union
*	O
ccvsp	pointer
,	O
int	O
ccrule	int
)	O
{	O
int	O
ccnrhs	int
=	O
ccr2	array
[	O
ccrule	int
]	O
;	O
int	O
cci	int
;	O
unsigned	O
long	O
int	O
cclno	long
=	O
ccrline	array
[	O
ccrule	int
]	O
;	O
YYFPRINTF	O
(	O
stderr	pointer
,	O
"Reducing stack by rule %d (line %lu):\n"	pointer
,	O
ccrule	int
-	O
1	int
,	O
cclno	long
)	O
;	O
for	O
(	O
cci	int
=	O
0	int
;	O
cci	int
<	O
ccnrhs	int
;	O
cci	int
++	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"   $%d = "	pointer
,	O
cci	int
+	O
1	int
)	O
;	O
cc_symbol_print	function
(	O
stderr	pointer
,	O
ccrhs	array
[	O
ccprhs	array
[	O
ccrule	int
]	O
+	O
cci	int
]	O
,	O
&	O
(	O
ccvsp	pointer
[	O
(	O
cci	int
+	O
1	int
)	O
-	O
(	O
ccnrhs	int
)	O
]	O
)	O
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
}	O
int	O
ccdebug	int
;	O
static	O
void	O
ccdestruct	function
(	O
const	O
char	O
*	O
ccmsg	pointer
,	O
int	O
cctype	int
,	O
YYSTYPE	union
*	O
ccvaluep	pointer
)	O
{	O
YYUSE	O
(	O
ccvaluep	pointer
)	O
;	O
if	O
(	O
!	O
ccmsg	pointer
)	O
ccmsg	pointer
=	O
"Deleting"	pointer
;	O
YY_SYMBOL_PRINT	O
(	O
ccmsg	pointer
,	O
cctype	int
,	O
ccvaluep	pointer
,	O
cclocationp	O
)	O
;	O
switch	O
(	O
cctype	int
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
int	O
ccparse	function
(	O
void	O
)	O
;	O
int	O
ccchar	int
;	O
YYSTYPE	union
cclval	union
;	O
int	O
ccnerrs	int
;	O
int	O
ccparse	function
(	O
void	O
)	O
{	O
int	O
ccstate	int
;	O
int	O
ccn	int
;	O
int	O
ccresult	int
;	O
int	O
ccerrstatus	int
;	O
int	O
cctoken	int
=	O
0	int
;	O
cctype_int16	short
ccssa	array
[	O
YYINITDEPTH	int
]	O
;	O
cctype_int16	short
*	O
ccss	short
=	O
ccssa	array
;	O
cctype_int16	short
*	O
ccssp	pointer
;	O
YYSTYPE	union
ccvsa	array
[	O
YYINITDEPTH	int
]	O
;	O
YYSTYPE	union
*	O
ccvs	union
=	O
ccvsa	array
;	O
YYSTYPE	union
*	O
ccvsp	pointer
;	O
YYSIZE_T	O
ccstacksize	long
=	O
YYINITDEPTH	int
;	O
YYSTYPE	union
ccval	union
;	O
int	O
cclen	int
=	O
0	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Starting parse\n"	pointer
)	O
)	O
;	O
ccstate	int
=	O
0	int
;	O
ccerrstatus	int
=	O
0	int
;	O
ccnerrs	int
=	O
0	int
;	O
ccchar	int
=	O
YYEMPTY	O
;	O
ccssp	pointer
=	O
ccss	short
;	O
ccvsp	pointer
=	O
ccvs	union
;	O
goto	O
ccsetstate	O
;	O
ccnewstate	O
:	O
ccssp	pointer
++	O
;	O
ccsetstate	O
:	O
*	O
ccssp	pointer
=	O
ccstate	int
;	O
if	O
(	O
ccss	short
+	O
ccstacksize	long
-	O
1	int
<=	O
ccssp	pointer
)	O
{	O
YYSIZE_T	O
ccsize	long
=	O
ccssp	pointer
-	O
ccss	short
+	O
1	int
;	O
if	O
(	O
YYMAXDEPTH	int
<=	O
ccstacksize	long
)	O
goto	O
ccexhaustedlab	O
;	O
ccstacksize	long
*=	O
2	int
;	O
if	O
(	O
YYMAXDEPTH	int
<	O
ccstacksize	long
)	O
ccstacksize	long
=	O
YYMAXDEPTH	int
;	O
{	O
cctype_int16	short
*	O
ccss1	pointer
=	O
ccss	short
;	O
union	O
ccalloc	union
*	O
ccptr	pointer
=	O
(	O
union	O
ccalloc	union
*	O
)	O
YYSTACK_ALLOC	O
(	O
YYSTACK_BYTES	O
(	O
ccstacksize	long
)	O
)	O
;	O
if	O
(	O
!	O
ccptr	pointer
)	O
goto	O
ccexhaustedlab	O
;	O
YYSTACK_RELOCATE	O
(	O
ccss	short
)	O
;	O
YYSTACK_RELOCATE	O
(	O
ccvs	union
)	O
;	O
if	O
(	O
ccss1	pointer
!=	O
ccssa	array
)	O
YYSTACK_FREE	O
(	O
ccss1	pointer
)	O
;	O
}	O
ccssp	pointer
=	O
ccss	short
+	O
ccsize	long
-	O
1	int
;	O
ccvsp	pointer
=	O
ccvs	union
+	O
ccsize	long
-	O
1	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Stack size increased to %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
int	O
)	O
ccstacksize	long
)	O
)	O
;	O
if	O
(	O
ccss	short
+	O
ccstacksize	long
-	O
1	int
<=	O
ccssp	pointer
)	O
YYABORT	O
;	O
}	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Entering state %d\n"	pointer
,	O
ccstate	int
)	O
)	O
;	O
goto	O
ccbackup	O
;	O
ccbackup	O
:	O
ccn	int
=	O
ccpact	array
[	O
ccstate	int
]	O
;	O
if	O
(	O
ccn	int
==	O
YYPACT_NINF	O
)	O
goto	O
ccdefault	O
;	O
if	O
(	O
ccchar	int
==	O
YYEMPTY	O
)	O
{	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Reading a token: "	pointer
)	O
)	O
;	O
ccchar	int
=	O
YYLEX	O
;	O
}	O
if	O
(	O
ccchar	int
<=	O
YYEOF	int
)	O
{	O
ccchar	int
=	O
cctoken	int
=	O
YYEOF	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	pointer
,	O
"Now at end of input.\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
cctoken	int
=	O
YYTRANSLATE	O
(	O
ccchar	int
)	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Next token is"	pointer
,	O
cctoken	int
,	O
&	O
cclval	union
,	O
&	O
cclloc	O
)	O
;	O
}	O
ccn	int
+=	O
cctoken	int
;	O
if	O
(	O
ccn	int
<	O
0	int
||	O
YYLAST	int
<	O
ccn	int
||	O
cccheck	array
[	O
ccn	int
]	O
!=	O
cctoken	int
)	O
goto	O
ccdefault	O
;	O
ccn	int
=	O
cctable	array
[	O
ccn	int
]	O
;	O
if	O
(	O
ccn	int
<=	O
0	int
)	O
{	O
if	O
(	O
ccn	int
==	O
0	int
||	O
ccn	int
==	O
YYTABLE_NINF	O
)	O
goto	O
ccerrlab	O
;	O
ccn	int
=	O
-	O
ccn	int
;	O
goto	O
ccreduce	O
;	O
}	O
if	O
(	O
ccn	int
==	O
YYFINAL	int
)	O
YYACCEPT	O
;	O
if	O
(	O
ccerrstatus	int
)	O
ccerrstatus	int
--	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
cctoken	int
,	O
&	O
cclval	union
,	O
&	O
cclloc	O
)	O
;	O
if	O
(	O
ccchar	int
!=	O
YYEOF	int
)	O
ccchar	int
=	O
YYEMPTY	O
;	O
ccstate	int
=	O
ccn	int
;	O
*	O
++	O
ccvsp	pointer
=	O
cclval	union
;	O
goto	O
ccnewstate	O
;	O
ccdefault	O
:	O
ccn	int
=	O
ccdefact	array
[	O
ccstate	int
]	O
;	O
if	O
(	O
ccn	int
==	O
0	int
)	O
goto	O
ccerrlab	O
;	O
goto	O
ccreduce	O
;	O
ccreduce	O
:	O
cclen	int
=	O
ccr2	array
[	O
ccn	int
]	O
;	O
ccval	union
=	O
ccvsp	pointer
[	O
1	int
-	O
cclen	int
]	O
;	O
YY_REDUCE_PRINT	O
(	O
ccn	int
)	O
;	O
switch	O
(	O
ccn	int
)	O
{	O
case	O
9	int
:	O
{	O
ccclearin	O
;	O
ccerrok	O
;	O
}	O
break	O
;	O
case	O
13	int
:	O
{	O
if	O
(	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
&&	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
type	enum
==	O
CS_BLOCK	int
)	O
{	O
if	O
(	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
handler	pointer
)	O
{	O
cfg_value_t	struct
*	O
argv	pointer
;	O
int	O
rc	int
;	O
int	O
argc	int
=	O
_cfg_make_argv	function
(	O
&	O
argv	pointer
,	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
keyword	pointer
,	O
(	O
ccvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
vlist	pointer
)	O
)	O
;	O
rc	int
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
handler	pointer
(	O
argc	int
,	O
argv	pointer
,	O
block	pointer
->	O
data	pointer
,	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
data	pointer
)	O
;	O
_cfg_free_argv	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
ccerror	function
(	O
"syntax error"	pointer
)	O
;	O
}	O
_cfg_push_block	function
(	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
block	pointer
,	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
end	pointer
,	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
data	pointer
)	O
;	O
}	O
else	O
{	O
if	O
(	O
block	pointer
->	O
stmt	pointer
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"%s:%d: %s"	pointer
,	O
cfg_filename	pointer
,	O
cfg_line_num	int
,	O
_	O
(	O
"unknown block statement"	pointer
)	O
)	O
;	O
}	O
_cfg_push_block	function
(	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
14	int
:	O
{	O
if	O
(	O
block	pointer
->	O
prev	pointer
)	O
_cfg_pop_block	function
(	O
)	O
;	O
}	O
break	O
;	O
case	O
15	int
:	O
{	O
(	O
ccval	union
.	O
vlist	pointer
)	O
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
17	int
:	O
{	O
if	O
(	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
)	O
{	O
if	O
(	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
handler	pointer
)	O
{	O
cfg_value_t	struct
*	O
argv	pointer
;	O
int	O
rc	int
;	O
int	O
argc	int
=	O
_cfg_make_argv	function
(	O
&	O
argv	pointer
,	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
keyword	pointer
,	O
(	O
ccvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
vlist	pointer
)	O
)	O
;	O
rc	int
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
handler	pointer
(	O
argc	int
,	O
argv	pointer
,	O
block	pointer
->	O
data	pointer
,	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
stmt	pointer
)	O
->	O
data	pointer
)	O
;	O
_cfg_free_argv	function
(	O
argc	int
,	O
argv	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
ccerror	function
(	O
"syntax error"	pointer
)	O
;	O
}	O
}	O
else	O
if	O
(	O
block	pointer
->	O
stmt	pointer
)	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"%s:%d: %s"	pointer
,	O
cfg_filename	pointer
,	O
cfg_line_num	int
,	O
_	O
(	O
"unknown keyword"	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
18	int
:	O
{	O
(	O
ccval	union
.	O
vlist	pointer
)	O
=	O
_cfg_vlist_create	function
(	O
&	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
value	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
19	int
:	O
{	O
_cfg_vlist_append	function
(	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
vlist	pointer
)	O
,	O
&	O
(	O
ccvsp	pointer
[	O
(	O
2	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
value	pointer
)	O
)	O
;	O
(	O
ccval	union
.	O
vlist	pointer
)	O
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
2	int
)	O
]	O
.	O
vlist	pointer
)	O
;	O
}	O
break	O
;	O
case	O
20	int
:	O
{	O
_cfg_vlist_append	function
(	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
vlist	pointer
)	O
,	O
&	O
(	O
ccvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
value	pointer
)	O
)	O
;	O
(	O
ccval	union
.	O
vlist	pointer
)	O
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
vlist	pointer
)	O
;	O
}	O
break	O
;	O
case	O
21	int
:	O
{	O
(	O
ccval	union
.	O
stmt	pointer
)	O
=	O
_cfg_find_keyword	function
(	O
block	pointer
->	O
stmt	pointer
,	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
string	pointer
)	O
)	O
;	O
}	O
break	O
;	O
case	O
22	int
:	O
{	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
type	enum
=	O
CFG_STRING	int
;	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
v	union
.	O
string	pointer
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
string	pointer
)	O
;	O
}	O
break	O
;	O
case	O
23	int
:	O
{	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
type	enum
=	O
CFG_STRING	int
;	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
v	union
.	O
string	pointer
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
string	pointer
)	O
;	O
}	O
break	O
;	O
case	O
24	int
:	O
{	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
type	enum
=	O
CFG_INTEGER	int
;	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
v	union
.	O
number	long
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
number	long
)	O
;	O
}	O
break	O
;	O
case	O
25	int
:	O
{	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
type	enum
=	O
CFG_BOOLEAN	int
;	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
v	union
.	O
bool	int
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
bool	int
)	O
;	O
}	O
break	O
;	O
case	O
26	int
:	O
{	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
type	enum
=	O
CFG_CHAR	int
;	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
v	union
.	O
ch	char
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
number	long
)	O
;	O
}	O
break	O
;	O
case	O
27	int
:	O
{	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
type	enum
=	O
CFG_NETWORK	int
;	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
v	union
.	O
network	struct
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
network	struct
)	O
;	O
}	O
break	O
;	O
case	O
28	int
:	O
{	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
type	enum
=	O
CFG_HOST	int
;	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
v	union
.	O
host	int
.	O
ipaddr	int
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
ipaddr	int
)	O
;	O
(	O
ccval	union
.	O
value	pointer
)	O
.	O
v	union
.	O
host	int
.	O
port	array
=	O
(	O
ccvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
number	long
)	O
;	O
}	O
break	O
;	O
case	O
29	int
:	O
{	O
(	O
ccval	union
.	O
network	struct
)	O
.	O
ipaddr	int
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
ipaddr	int
)	O
;	O
(	O
ccval	union
.	O
network	struct
)	O
.	O
netmask	int
=	O
0xffffffffL	int
;	O
}	O
break	O
;	O
case	O
30	int
:	O
{	O
(	O
ccval	union
.	O
network	struct
)	O
.	O
ipaddr	int
=	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
ipaddr	int
)	O
;	O
(	O
ccval	union
.	O
network	struct
)	O
.	O
netmask	int
=	O
(	O
ccvsp	pointer
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
ipaddr	int
)	O
;	O
}	O
break	O
;	O
case	O
31	int
:	O
{	O
if	O
(	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
number	long
)	O
!=	O
'/'	O
)	O
YYERROR	O
;	O
}	O
break	O
;	O
case	O
33	int
:	O
{	O
if	O
(	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
number	long
)	O
>	O
32	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"invalid netmask length: %d"	pointer
)	O
,	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
number	long
)	O
)	O
;	O
YYERROR	O
;	O
}	O
(	O
ccval	union
.	O
ipaddr	int
)	O
=	O
(	O
0xfffffffful	int
>>	O
(	O
32	int
-	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
number	long
)	O
)	O
)	O
<<	O
(	O
32	int
-	O
(	O
ccvsp	pointer
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
number	long
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
YY_SYMBOL_PRINT	O
(	O
"-> $$ ="	pointer
,	O
ccr1	array
[	O
ccn	int
]	O
,	O
&	O
ccval	union
,	O
&	O
ccloc	O
)	O
;	O
YYPOPSTACK	O
(	O
cclen	int
)	O
;	O
cclen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
ccss	short
,	O
ccssp	pointer
)	O
;	O
*	O
++	O
ccvsp	pointer
=	O
ccval	union
;	O
ccn	int
=	O
ccr1	array
[	O
ccn	int
]	O
;	O
ccstate	int
=	O
ccpgoto	array
[	O
ccn	int
-	O
YYNTOKENS	int
]	O
+	O
*	O
ccssp	pointer
;	O
if	O
(	O
0	int
<=	O
ccstate	int
&&	O
ccstate	int
<=	O
YYLAST	int
&&	O
cccheck	array
[	O
ccstate	int
]	O
==	O
*	O
ccssp	pointer
)	O
ccstate	int
=	O
cctable	array
[	O
ccstate	int
]	O
;	O
else	O
ccstate	int
=	O
ccdefgoto	array
[	O
ccn	int
-	O
YYNTOKENS	int
]	O
;	O
goto	O
ccnewstate	O
;	O
ccerrlab	O
:	O
if	O
(	O
!	O
ccerrstatus	int
)	O
{	O
++	O
ccnerrs	int
;	O
ccerror	function
(	O
YY_	O
(	O
"syntax error"	pointer
)	O
)	O
;	O
}	O
if	O
(	O
ccerrstatus	int
==	O
3	int
)	O
{	O
if	O
(	O
ccchar	int
<=	O
YYEOF	int
)	O
{	O
if	O
(	O
ccchar	int
==	O
YYEOF	int
)	O
YYABORT	O
;	O
}	O
else	O
{	O
ccdestruct	function
(	O
"Error: discarding"	pointer
,	O
cctoken	int
,	O
&	O
cclval	union
)	O
;	O
ccchar	int
=	O
YYEMPTY	O
;	O
}	O
}	O
goto	O
ccerrlab1	O
;	O
ccerrorlab	O
:	O
if	O
(	O
0	int
)	O
goto	O
ccerrorlab	O
;	O
YYPOPSTACK	O
(	O
cclen	int
)	O
;	O
cclen	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
ccss	short
,	O
ccssp	pointer
)	O
;	O
ccstate	int
=	O
*	O
ccssp	pointer
;	O
goto	O
ccerrlab1	O
;	O
ccerrlab1	O
:	O
ccerrstatus	int
=	O
3	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
ccn	int
=	O
ccpact	array
[	O
ccstate	int
]	O
;	O
if	O
(	O
ccn	int
!=	O
YYPACT_NINF	O
)	O
{	O
ccn	int
+=	O
YYTERROR	int
;	O
if	O
(	O
0	int
<=	O
ccn	int
&&	O
ccn	int
<=	O
YYLAST	int
&&	O
cccheck	array
[	O
ccn	int
]	O
==	O
YYTERROR	int
)	O
{	O
ccn	int
=	O
cctable	array
[	O
ccn	int
]	O
;	O
if	O
(	O
0	int
<	O
ccn	int
)	O
break	O
;	O
}	O
}	O
if	O
(	O
ccssp	pointer
==	O
ccss	short
)	O
YYABORT	O
;	O
ccdestruct	function
(	O
"Error: popping"	pointer
,	O
ccstos	array
[	O
ccstate	int
]	O
,	O
ccvsp	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
ccstate	int
=	O
*	O
ccssp	pointer
;	O
YY_STACK_PRINT	O
(	O
ccss	short
,	O
ccssp	pointer
)	O
;	O
}	O
if	O
(	O
ccn	int
==	O
YYFINAL	int
)	O
YYACCEPT	O
;	O
*	O
++	O
ccvsp	pointer
=	O
cclval	union
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	pointer
,	O
ccstos	array
[	O
ccn	int
]	O
,	O
ccvsp	pointer
,	O
cclsp	O
)	O
;	O
ccstate	int
=	O
ccn	int
;	O
goto	O
ccnewstate	O
;	O
ccacceptlab	O
:	O
ccresult	int
=	O
0	int
;	O
goto	O
ccreturn	O
;	O
ccabortlab	O
:	O
ccresult	int
=	O
1	int
;	O
goto	O
ccreturn	O
;	O
ccexhaustedlab	O
:	O
ccerror	function
(	O
YY_	O
(	O
"memory exhausted"	pointer
)	O
)	O
;	O
ccresult	int
=	O
2	int
;	O
ccreturn	O
:	O
if	O
(	O
ccchar	int
!=	O
YYEOF	int
&&	O
ccchar	int
!=	O
YYEMPTY	O
)	O
ccdestruct	function
(	O
"Cleanup: discarding lookahead"	pointer
,	O
cctoken	int
,	O
&	O
cclval	union
)	O
;	O
YYPOPSTACK	O
(	O
cclen	int
)	O
;	O
YY_STACK_PRINT	O
(	O
ccss	short
,	O
ccssp	pointer
)	O
;	O
while	O
(	O
ccssp	pointer
!=	O
ccss	short
)	O
{	O
ccdestruct	function
(	O
"Cleanup: popping"	pointer
,	O
ccstos	array
[	O
*	O
ccssp	pointer
]	O
,	O
ccvsp	pointer
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
ccss	short
!=	O
ccssa	array
)	O
YYSTACK_FREE	O
(	O
ccss	short
)	O
;	O
return	O
YYID	O
(	O
ccresult	int
)	O
;	O
}	O
static	O
void	O
skipws	function
(	O
)	O
{	O
while	O
(	O
*	O
curp	pointer
&&	O
isspace	function
(	O
*	O
curp	pointer
)	O
)	O
{	O
if	O
(	O
*	O
curp	pointer
==	O
'\n'	O
)	O
cfg_line_num	int
++	O
;	O
curp	pointer
++	O
;	O
}	O
}	O
static	O
void	O
skipline	function
(	O
)	O
{	O
while	O
(	O
*	O
curp	pointer
&&	O
*	O
curp	pointer
!=	O
'\n'	O
)	O
curp	pointer
++	O
;	O
}	O
static	O
int	O
isword	function
(	O
int	O
c	pointer
)	O
{	O
return	O
isalnum	function
(	O
c	pointer
)	O
||	O
c	pointer
==	O
'_'	O
||	O
c	pointer
==	O
'-'	O
;	O
}	O
static	O
char	O
*	O
copy_alpha	function
(	O
)	O
{	O
do	O
{	O
grad_slist_append_char	function
(	O
cfg_slist	pointer
,	O
*	O
curp	pointer
)	O
;	O
curp	pointer
++	O
;	O
}	O
while	O
(	O
*	O
curp	pointer
&&	O
isword	function
(	O
*	O
curp	pointer
)	O
)	O
;	O
grad_slist_append_char	function
(	O
cfg_slist	pointer
,	O
0	int
)	O
;	O
return	O
grad_slist_finish	function
(	O
cfg_slist	pointer
)	O
;	O
}	O
static	O
char	O
*	O
copy_string	function
(	O
)	O
{	O
int	O
quote	pointer
=	O
*	O
curp	pointer
++	O
;	O
while	O
(	O
*	O
curp	pointer
)	O
{	O
if	O
(	O
*	O
curp	pointer
==	O
'\\'	O
)	O
{	O
grad_slist_grow_backslash	function
(	O
cfg_slist	pointer
,	O
curp	pointer
,	O
&	O
curp	pointer
)	O
;	O
}	O
else	O
if	O
(	O
*	O
curp	pointer
==	O
quote	pointer
)	O
{	O
curp	pointer
++	O
;	O
break	O
;	O
}	O
else	O
{	O
grad_slist_append_char	function
(	O
cfg_slist	pointer
,	O
*	O
curp	pointer
)	O
;	O
curp	pointer
++	O
;	O
}	O
}	O
grad_slist_append_char	function
(	O
cfg_slist	pointer
,	O
0	int
)	O
;	O
return	O
grad_slist_finish	function
(	O
cfg_slist	pointer
)	O
;	O
}	O
static	O
int	O
copy_digit	function
(	O
)	O
{	O
int	O
dot	int
=	O
0	int
;	O
if	O
(	O
*	O
curp	pointer
==	O
'0'	O
)	O
{	O
if	O
(	O
curp	pointer
[	O
1	int
]	O
==	O
'x'	O
||	O
curp	pointer
[	O
1	int
]	O
==	O
'X'	O
)	O
{	O
grad_slist_append_char	function
(	O
cfg_slist	pointer
,	O
*	O
curp	pointer
)	O
;	O
curp	pointer
++	O
;	O
grad_slist_append_char	function
(	O
cfg_slist	pointer
,	O
*	O
curp	pointer
)	O
;	O
curp	pointer
++	O
;	O
}	O
}	O
do	O
{	O
grad_slist_append_char	function
(	O
cfg_slist	pointer
,	O
*	O
curp	pointer
)	O
;	O
if	O
(	O
*	O
curp	pointer
++	O
==	O
'.'	O
)	O
dot	int
++	O
;	O
}	O
while	O
(	O
*	O
curp	pointer
&&	O
(	O
isdigit	function
(	O
*	O
curp	pointer
)	O
||	O
*	O
curp	pointer
==	O
'.'	O
)	O
)	O
;	O
grad_slist_append_char	function
(	O
cfg_slist	pointer
,	O
0	int
)	O
;	O
cclval	union
.	O
string	pointer
=	O
grad_slist_finish	function
(	O
cfg_slist	pointer
)	O
;	O
return	O
dot	int
;	O
}	O
static	O
grad_keyword_t	struct
booleans	array
[	O
]	O
=	O
{	O
{	O
"on"	pointer
,	O
1	int
}	O
,	O
{	O
"off"	pointer
,	O
0	int
}	O
,	O
{	O
"yes"	pointer
,	O
1	int
}	O
,	O
{	O
"no"	pointer
,	O
0	int
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
int	O
keyword	pointer
(	O
)	O
{	O
int	O
tok	int
;	O
if	O
(	O
(	O
tok	int
=	O
grad_xlat_keyword	function
(	O
booleans	array
,	O
cclval	union
.	O
string	pointer
,	O
-	O
1	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
cclval	union
.	O
bool	int
=	O
tok	int
;	O
return	O
T_BOOL	int
;	O
}	O
return	O
T_WORD	int
;	O
}	O
static	O
int	O
cclex	function
(	O
)	O
{	O
again	O
:	O
skipws	function
(	O
)	O
;	O
if	O
(	O
*	O
curp	pointer
==	O
'#'	O
)	O
{	O
skipline	function
(	O
)	O
;	O
goto	O
again	O
;	O
}	O
if	O
(	O
*	O
curp	pointer
==	O
'/'	O
&&	O
curp	pointer
[	O
1	int
]	O
==	O
'*'	O
)	O
{	O
int	O
keep_line	int
=	O
cfg_line_num	int
;	O
curp	pointer
+=	O
2	int
;	O
do	O
{	O
while	O
(	O
*	O
curp	pointer
!=	O
'*'	O
)	O
{	O
if	O
(	O
*	O
curp	pointer
==	O
0	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"%s:%d: unexpected EOF in comment started at line %d"	pointer
)	O
,	O
cfg_filename	pointer
,	O
cfg_line_num	int
,	O
keep_line	int
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
*	O
curp	pointer
==	O
'\n'	O
)	O
cfg_line_num	int
++	O
;	O
++	O
curp	pointer
;	O
}	O
}	O
while	O
(	O
*	O
++	O
curp	pointer
!=	O
'/'	O
)	O
;	O
++	O
curp	pointer
;	O
goto	O
again	O
;	O
}	O
if	O
(	O
*	O
curp	pointer
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
isalpha	function
(	O
*	O
curp	pointer
)	O
)	O
{	O
cclval	union
.	O
string	pointer
=	O
copy_alpha	function
(	O
)	O
;	O
return	O
keyword	pointer
(	O
)	O
;	O
}	O
if	O
(	O
*	O
curp	pointer
==	O
'\"'	O
)	O
{	O
cclval	union
.	O
string	pointer
=	O
copy_string	function
(	O
)	O
;	O
return	O
T_STRING	int
;	O
}	O
if	O
(	O
*	O
curp	pointer
==	O
'-'	O
&&	O
!	O
isspace	function
(	O
curp	pointer
[	O
1	int
]	O
)	O
)	O
{	O
cclval	union
.	O
string	pointer
=	O
copy_alpha	function
(	O
)	O
;	O
return	O
T_STRING	int
;	O
}	O
if	O
(	O
isdigit	function
(	O
*	O
curp	pointer
)	O
)	O
{	O
if	O
(	O
copy_digit	function
(	O
)	O
)	O
{	O
cclval	union
.	O
ipaddr	int
=	O
grad_ip_strtoip	function
(	O
cclval	union
.	O
string	pointer
)	O
;	O
return	O
T_IPADDR	int
;	O
}	O
cclval	union
.	O
number	long
=	O
strtol	function
(	O
cclval	union
.	O
string	pointer
,	O
NULL	O
,	O
0	int
)	O
;	O
return	O
T_NUMBER	int
;	O
}	O
if	O
(	O
*	O
curp	pointer
==	O
';'	O
)	O
{	O
curp	pointer
++	O
;	O
return	O
T_EOL	int
;	O
}	O
if	O
(	O
ismath	O
(	O
*	O
curp	pointer
)	O
)	O
{	O
cclval	union
.	O
number	long
=	O
*	O
curp	pointer
++	O
;	O
return	O
T_PUNCT	int
;	O
}	O
return	O
*	O
curp	pointer
++	O
;	O
}	O
static	O
int	O
ccerror	function
(	O
char	O
*	O
s	pointer
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"%s:%d: %s"	pointer
,	O
cfg_filename	pointer
,	O
cfg_line_num	int
,	O
s	pointer
)	O
;	O
}	O
void	O
_cfg_run_begin	function
(	O
struct	O
cfg_stmt	struct
*	O
stmt	pointer
,	O
void	O
*	O
up_data	pointer
)	O
{	O
for	O
(	O
;	O
stmt	pointer
->	O
keyword	pointer
;	O
stmt	pointer
++	O
)	O
{	O
if	O
(	O
stmt	pointer
->	O
term	pointer
)	O
stmt	pointer
->	O
term	pointer
(	O
0	int
,	O
stmt	pointer
->	O
data	pointer
,	O
up_data	pointer
)	O
;	O
if	O
(	O
stmt	pointer
->	O
type	enum
==	O
CS_BLOCK	int
)	O
_cfg_run_begin	function
(	O
stmt	pointer
->	O
block	pointer
,	O
stmt	pointer
->	O
data	pointer
)	O
;	O
}	O
}	O
void	O
_cfg_run_finish	function
(	O
struct	O
cfg_stmt	struct
*	O
stmt	pointer
,	O
void	O
*	O
up_data	pointer
)	O
{	O
for	O
(	O
;	O
stmt	pointer
->	O
keyword	pointer
;	O
stmt	pointer
++	O
)	O
{	O
if	O
(	O
stmt	pointer
->	O
term	pointer
)	O
stmt	pointer
->	O
term	pointer
(	O
1	int
,	O
stmt	pointer
->	O
data	pointer
,	O
up_data	pointer
)	O
;	O
if	O
(	O
stmt	pointer
->	O
type	enum
==	O
CS_BLOCK	int
)	O
_cfg_run_finish	function
(	O
stmt	pointer
->	O
block	pointer
,	O
stmt	pointer
->	O
data	pointer
)	O
;	O
}	O
}	O
static	O
int	O
_cfg_free_item	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
cfg_memblock	struct
*	O
p	pointer
=	O
item	pointer
;	O
if	O
(	O
p	pointer
->	O
destructor	pointer
)	O
p	pointer
->	O
destructor	pointer
(	O
p	pointer
+	O
1	int
)	O
;	O
grad_free	function
(	O
p	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
_cfg_free_memory_pool	function
(	O
)	O
{	O
grad_list_destroy	function
(	O
&	O
cfg_memory_pool	pointer
,	O
_cfg_free_item	function
,	O
NULL	O
)	O
;	O
}	O
int	O
_cfg_make_argv	function
(	O
cfg_value_t	struct
*	O
*	O
argv	pointer
,	O
char	O
*	O
keyword	pointer
,	O
grad_list_t	struct
*	O
vlist	pointer
)	O
{	O
int	O
argc	int
;	O
if	O
(	O
vlist	pointer
)	O
argc	int
=	O
grad_list_count	function
(	O
vlist	pointer
)	O
+	O
1	int
;	O
else	O
argc	int
=	O
1	int
;	O
*	O
argv	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
*	O
argv	pointer
)	O
*	O
argc	int
)	O
;	O
(	O
*	O
argv	pointer
)	O
[	O
0	int
]	O
.	O
type	enum
=	O
CFG_STRING	int
;	O
(	O
*	O
argv	pointer
)	O
[	O
0	int
]	O
.	O
v	union
.	O
string	pointer
=	O
keyword	pointer
;	O
if	O
(	O
vlist	pointer
)	O
{	O
int	O
i	int
;	O
cfg_value_t	struct
*	O
val	array
;	O
grad_iterator_t	struct
*	O
itr	pointer
=	O
grad_iterator_create	function
(	O
vlist	pointer
)	O
;	O
if	O
(	O
itr	pointer
)	O
{	O
for	O
(	O
i	int
=	O
1	int
,	O
val	array
=	O
grad_iterator_first	function
(	O
itr	pointer
)	O
;	O
val	array
;	O
i	int
++	O
,	O
val	array
=	O
grad_iterator_next	function
(	O
itr	pointer
)	O
)	O
(	O
*	O
argv	pointer
)	O
[	O
i	int
]	O
=	O
*	O
val	array
;	O
grad_iterator_destroy	function
(	O
&	O
itr	pointer
)	O
;	O
}	O
}	O
return	O
argc	int
;	O
}	O
void	O
_cfg_free_argv	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
)	O
{	O
grad_free	function
(	O
argv	pointer
)	O
;	O
}	O
static	O
void	O
_cfg_vlist_destroy	function
(	O
void	O
*	O
arg	pointer
)	O
{	O
grad_list_t	struct
*	O
*	O
pl	pointer
=	O
arg	pointer
;	O
grad_list_destroy	function
(	O
pl	pointer
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
void	O
_cfg_vlist_append	function
(	O
grad_list_t	struct
*	O
vlist	pointer
,	O
cfg_value_t	struct
*	O
val	array
)	O
{	O
cfg_value_t	struct
*	O
vp	pointer
=	O
cfg_malloc	function
(	O
sizeof	O
(	O
*	O
vp	pointer
)	O
,	O
NULL	O
)	O
;	O
*	O
vp	pointer
=	O
*	O
val	array
;	O
grad_list_append	function
(	O
vlist	pointer
,	O
vp	pointer
)	O
;	O
}	O
grad_list_t	struct
*	O
_cfg_vlist_create	function
(	O
cfg_value_t	struct
*	O
val	array
)	O
{	O
grad_list_t	struct
*	O
vlist	pointer
=	O
grad_list_create	function
(	O
)	O
;	O
grad_list_t	struct
*	O
*	O
lp	pointer
=	O
cfg_malloc	function
(	O
sizeof	O
(	O
*	O
lp	pointer
)	O
,	O
_cfg_vlist_destroy	function
)	O
;	O
*	O
lp	pointer
=	O
vlist	pointer
;	O
_cfg_vlist_append	function
(	O
vlist	pointer
,	O
val	array
)	O
;	O
return	O
vlist	pointer
;	O
}	O
void	O
_cfg_push_block	function
(	O
struct	O
cfg_stmt	struct
*	O
stmt	pointer
,	O
cfg_end_fp	pointer
end	pointer
,	O
void	O
*	O
block_data	pointer
)	O
{	O
struct	O
syntax_block	struct
*	O
p	pointer
=	O
grad_emalloc	function
(	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
stmt	pointer
=	O
stmt	pointer
;	O
p	pointer
->	O
end	pointer
=	O
end	pointer
;	O
p	pointer
->	O
data	pointer
=	O
block_data	pointer
;	O
p	pointer
->	O
prev	pointer
=	O
block	pointer
;	O
block	pointer
=	O
p	pointer
;	O
}	O
struct	O
syntax_block	struct
*	O
_cfg_pop_block	function
(	O
)	O
{	O
struct	O
syntax_block	struct
*	O
p	pointer
=	O
block	pointer
;	O
if	O
(	O
p	pointer
)	O
{	O
block	pointer
=	O
p	pointer
->	O
prev	pointer
;	O
if	O
(	O
p	pointer
->	O
end	pointer
)	O
p	pointer
->	O
end	pointer
(	O
block	pointer
?	O
block	pointer
->	O
data	pointer
:	O
NULL	O
,	O
p	pointer
->	O
data	pointer
)	O
;	O
grad_free	function
(	O
p	pointer
)	O
;	O
}	O
return	O
block	pointer
;	O
}	O
struct	O
cfg_stmt	struct
*	O
_cfg_find_keyword	function
(	O
struct	O
cfg_stmt	struct
*	O
stmt	pointer
,	O
char	O
*	O
str	pointer
)	O
{	O
if	O
(	O
stmt	pointer
)	O
for	O
(	O
;	O
stmt	pointer
->	O
keyword	pointer
;	O
stmt	pointer
++	O
)	O
{	O
if	O
(	O
strcmp	function
(	O
stmt	pointer
->	O
keyword	pointer
,	O
str	pointer
)	O
==	O
0	int
)	O
return	O
stmt	pointer
;	O
}	O
return	O
NULL	O
;	O
}	O
int	O
_get_value	function
(	O
cfg_value_t	struct
*	O
arg	pointer
,	O
int	O
type	enum
,	O
void	O
*	O
base	int
)	O
{	O
struct	O
servent	struct
*	O
s	pointer
;	O
grad_uint32_t	int
ipaddr	int
;	O
cfg_value_t	struct
value	pointer
;	O
value	pointer
=	O
*	O
arg	pointer
;	O
switch	O
(	O
type	enum
)	O
{	O
case	O
CFG_PORT	int
:	O
switch	O
(	O
value	pointer
.	O
type	enum
)	O
{	O
case	O
CFG_INTEGER	int
:	O
type	enum
=	O
CFG_INTEGER	int
;	O
break	O
;	O
case	O
CFG_STRING	int
:	O
s	pointer
=	O
getservbyname	function
(	O
value	pointer
.	O
v	union
.	O
string	pointer
,	O
"udp"	pointer
)	O
;	O
if	O
(	O
s	pointer
)	O
value	pointer
.	O
v	union
.	O
number	long
=	O
ntohs	function
(	O
s	pointer
->	O
s_port	int
)	O
;	O
else	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"%s:%d: no such service: %s"	pointer
)	O
,	O
cfg_filename	pointer
,	O
cfg_line_num	int
,	O
value	pointer
.	O
v	union
.	O
string	pointer
)	O
;	O
return	O
0	int
;	O
}	O
type	enum
=	O
value	pointer
.	O
type	enum
=	O
CFG_INTEGER	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
case	O
CFG_IPADDR	int
:	O
switch	O
(	O
value	pointer
.	O
type	enum
)	O
{	O
case	O
CFG_IPADDR	int
:	O
break	O
;	O
case	O
CFG_INTEGER	int
:	O
type	enum
=	O
CFG_IPADDR	int
;	O
break	O
;	O
case	O
CFG_STRING	int
:	O
ipaddr	int
=	O
grad_ip_gethostaddr	function
(	O
value	pointer
.	O
v	union
.	O
string	pointer
)	O
;	O
if	O
(	O
ipaddr	int
==	O
0	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"%s:%d: unknown host: %s"	pointer
)	O
,	O
cfg_filename	pointer
,	O
cfg_line_num	int
,	O
value	pointer
.	O
v	union
.	O
string	pointer
)	O
;	O
}	O
value	pointer
.	O
v	union
.	O
ipaddr	int
=	O
ipaddr	int
;	O
value	pointer
.	O
type	enum
=	O
CFG_IPADDR	int
;	O
break	O
;	O
case	O
CFG_NETWORK	int
:	O
if	O
(	O
value	pointer
.	O
v	union
.	O
network	struct
.	O
netmask	int
!=	O
0xffffffffL	int
)	O
break	O
;	O
value	pointer
.	O
v	union
.	O
ipaddr	int
=	O
value	pointer
.	O
v	union
.	O
network	struct
.	O
ipaddr	int
;	O
value	pointer
.	O
type	enum
=	O
CFG_IPADDR	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
break	O
;	O
case	O
CFG_UNSIGNED	int
:	O
case	O
CFG_SIZE_T	int
:	O
case	O
CFG_INTEGER	int
:	O
switch	O
(	O
value	pointer
.	O
type	enum
)	O
{	O
case	O
CFG_UNSIGNED	int
:	O
case	O
CFG_SIZE_T	int
:	O
case	O
CFG_INTEGER	int
:	O
value	pointer
.	O
type	enum
=	O
type	enum
;	O
break	O
;	O
}	O
}	O
if	O
(	O
type	enum
!=	O
value	pointer
.	O
type	enum
)	O
{	O
cfg_type_error	function
(	O
type	enum
)	O
;	O
return	O
0	int
;	O
}	O
switch	O
(	O
type	enum
)	O
{	O
case	O
CFG_INTEGER	int
:	O
*	O
(	O
int	O
*	O
)	O
base	int
=	O
value	pointer
.	O
v	union
.	O
number	long
;	O
break	O
;	O
case	O
CFG_UNSIGNED	int
:	O
*	O
(	O
unsigned	O
*	O
)	O
base	int
=	O
value	pointer
.	O
v	union
.	O
number	long
;	O
break	O
;	O
case	O
CFG_SIZE_T	int
:	O
*	O
(	O
size_t	long
*	O
)	O
base	int
=	O
value	pointer
.	O
v	union
.	O
number	long
;	O
break	O
;	O
case	O
CFG_STRING	int
:	O
grad_string_replace	function
(	O
(	O
char	O
*	O
*	O
)	O
base	int
,	O
value	pointer
.	O
v	union
.	O
string	pointer
)	O
;	O
break	O
;	O
case	O
CFG_IPADDR	int
:	O
*	O
(	O
grad_uint32_t	int
*	O
)	O
base	int
=	O
value	pointer
.	O
v	union
.	O
ipaddr	int
;	O
break	O
;	O
case	O
CFG_BOOLEAN	int
:	O
*	O
(	O
int	O
*	O
)	O
base	int
=	O
value	pointer
.	O
v	union
.	O
bool	int
;	O
break	O
;	O
case	O
CFG_NETWORK	int
:	O
*	O
(	O
cfg_network_t	struct
*	O
)	O
base	int
=	O
value	pointer
.	O
v	union
.	O
network	struct
;	O
break	O
;	O
default	O
:	O
grad_log	function
(	O
GRAD_LOG_CRIT	int
,	O
_	O
(	O
"INTERNAL ERROR at %s:%d: unknown datatype %d"	pointer
)	O
,	O
__FILE__	O
,	O
__LINE__	O
,	O
type	enum
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
*	O
cfg_malloc	function
(	O
size_t	long
size	int
,	O
void	O
(	O
*	O
destructor	pointer
)	O
(	O
void	O
*	O
)	O
)	O
{	O
struct	O
cfg_memblock	struct
*	O
p	pointer
=	O
grad_emalloc	function
(	O
size	int
+	O
sizeof	O
(	O
*	O
p	pointer
)	O
)	O
;	O
p	pointer
->	O
destructor	pointer
=	O
destructor	pointer
;	O
p	pointer
->	O
line_num	int
=	O
cfg_line_num	int
;	O
if	O
(	O
!	O
cfg_memory_pool	pointer
)	O
cfg_memory_pool	pointer
=	O
grad_list_create	function
(	O
)	O
;	O
grad_list_append	function
(	O
cfg_memory_pool	pointer
,	O
p	pointer
)	O
;	O
return	O
p	pointer
+	O
1	int
;	O
}	O
void	O
cfg_type_error	function
(	O
int	O
type	enum
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"%s:%d: wrong datatype (should be %s)"	pointer
)	O
,	O
cfg_filename	pointer
,	O
cfg_line_num	int
,	O
typestr	array
[	O
type	enum
]	O
)	O
;	O
}	O
void	O
cfg_argc_error	function
(	O
int	O
few	int
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
,	O
"%s:%d: %s"	pointer
,	O
cfg_filename	pointer
,	O
cfg_line_num	int
,	O
few	int
?	O
_	O
(	O
"too few arguments"	pointer
)	O
:	O
_	O
(	O
"too many arguments"	pointer
)	O
)	O
;	O
}	O
int	O
cfg_ignore	function
(	O
int	O
argc	int
ARG_UNUSED	O
,	O
cfg_value_t	struct
*	O
argv	pointer
ARG_UNUSED	O
,	O
void	O
*	O
block_data	pointer
ARG_UNUSED	O
,	O
void	O
*	O
handler_data	pointer
ARG_UNUSED	O
)	O
{	O
return	O
0	int
;	O
}	O
int	O
cfg_obsolete	function
(	O
int	O
argc	int
ARG_UNUSED	O
,	O
cfg_value_t	struct
*	O
argv	pointer
ARG_UNUSED	O
,	O
void	O
*	O
block_data	pointer
ARG_UNUSED	O
,	O
void	O
*	O
handler_data	pointer
ARG_UNUSED	O
)	O
{	O
grad_log	function
(	O
GRAD_LOG_WARN	int
,	O
_	O
(	O
"%s:%d: obsolete statement"	pointer
)	O
,	O
cfg_filename	pointer
,	O
cfg_line_num	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
cfg_get_ipaddr	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
_check_argc	O
(	O
argc	int
,	O
1	int
)	O
;	O
return	O
_get_value	function
(	O
&	O
argv	pointer
[	O
1	int
]	O
,	O
CFG_IPADDR	int
,	O
handler_data	pointer
)	O
;	O
}	O
int	O
cfg_get_uint32_t	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
_check_argc	O
(	O
argc	int
,	O
1	int
)	O
;	O
return	O
_get_value	function
(	O
&	O
argv	pointer
[	O
1	int
]	O
,	O
CFG_IPADDR	int
,	O
handler_data	pointer
)	O
;	O
}	O
int	O
cfg_get_integer	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
int	O
val	array
;	O
int	O
rc	int
;	O
_check_argc	O
(	O
argc	int
,	O
1	int
)	O
;	O
rc	int
=	O
_get_value	function
(	O
&	O
argv	pointer
[	O
1	int
]	O
,	O
CFG_INTEGER	int
,	O
&	O
val	array
)	O
;	O
*	O
(	O
int	O
*	O
)	O
handler_data	pointer
=	O
val	array
;	O
return	O
rc	int
;	O
}	O
int	O
cfg_get_unsigned	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
unsigned	O
val	array
;	O
int	O
rc	int
;	O
_check_argc	O
(	O
argc	int
,	O
1	int
)	O
;	O
rc	int
=	O
_get_value	function
(	O
&	O
argv	pointer
[	O
1	int
]	O
,	O
CFG_UNSIGNED	int
,	O
&	O
val	array
)	O
;	O
*	O
(	O
unsigned	O
*	O
)	O
handler_data	pointer
=	O
val	array
;	O
return	O
rc	int
;	O
}	O
int	O
cfg_get_size_t	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
size_t	long
val	array
;	O
int	O
rc	int
;	O
_check_argc	O
(	O
argc	int
,	O
1	int
)	O
;	O
rc	int
=	O
_get_value	function
(	O
&	O
argv	pointer
[	O
1	int
]	O
,	O
CFG_INTEGER	int
,	O
&	O
val	array
)	O
;	O
*	O
(	O
size_t	long
*	O
)	O
handler_data	pointer
=	O
val	array
;	O
return	O
rc	int
;	O
}	O
int	O
cfg_get_number	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
_check_argc	O
(	O
argc	int
,	O
1	int
)	O
;	O
return	O
_get_value	function
(	O
&	O
argv	pointer
[	O
1	int
]	O
,	O
CFG_INTEGER	int
,	O
handler_data	pointer
)	O
;	O
}	O
int	O
cfg_get_string	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
_check_argc	O
(	O
argc	int
,	O
1	int
)	O
;	O
return	O
_get_value	function
(	O
&	O
argv	pointer
[	O
1	int
]	O
,	O
CFG_STRING	int
,	O
handler_data	pointer
)	O
;	O
}	O
int	O
cfg_get_boolean	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
_check_argc	O
(	O
argc	int
,	O
1	int
)	O
;	O
return	O
_get_value	function
(	O
&	O
argv	pointer
[	O
1	int
]	O
,	O
CFG_BOOLEAN	int
,	O
handler_data	pointer
)	O
;	O
}	O
int	O
cfg_get_network	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
_check_argc	O
(	O
argc	int
,	O
1	int
)	O
;	O
return	O
_get_value	function
(	O
&	O
argv	pointer
[	O
1	int
]	O
,	O
CFG_NETWORK	int
,	O
handler_data	pointer
)	O
;	O
}	O
int	O
cfg_get_port	function
(	O
int	O
argc	int
,	O
cfg_value_t	struct
*	O
argv	pointer
,	O
void	O
*	O
block_data	pointer
,	O
void	O
*	O
handler_data	pointer
)	O
{	O
_check_argc	O
(	O
argc	int
,	O
1	int
)	O
;	O
return	O
_get_value	function
(	O
&	O
argv	pointer
[	O
1	int
]	O
,	O
CFG_PORT	int
,	O
handler_data	pointer
)	O
;	O
}	O
int	O
cfg_read	function
(	O
char	O
*	O
fname	pointer
,	O
struct	O
cfg_stmt	struct
*	O
syntax	long
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
stat	struct
st	struct
;	O
int	O
fd	int
;	O
extern	O
int	O
ccdebug	int
;	O
cfg_memory_pool	pointer
=	O
NULL	O
;	O
block	pointer
=	O
NULL	O
;	O
cfg_filename	pointer
=	O
fname	pointer
;	O
_cfg_push_block	function
(	O
syntax	long
,	O
NULL	O
,	O
data	pointer
)	O
;	O
if	O
(	O
stat	struct
(	O
cfg_filename	pointer
,	O
&	O
st	struct
)	O
)	O
{	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't stat `%s'"	pointer
)	O
,	O
cfg_filename	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
fd	int
=	O
open	function
(	O
cfg_filename	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
!=	O
ENOENT	int
)	O
grad_log	function
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't open config file `%s'"	pointer
)	O
,	O
cfg_filename	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
buffer	pointer
=	O
cfg_malloc	function
(	O
st	struct
.	O
st_size	long
+	O
1	int
,	O
NULL	O
)	O
;	O
read	function
(	O
fd	int
,	O
buffer	pointer
,	O
st	struct
.	O
st_size	long
)	O
;	O
buffer	pointer
[	O
st	struct
.	O
st_size	long
]	O
=	O
0	int
;	O
close	function
(	O
fd	int
)	O
;	O
curp	pointer
=	O
buffer	pointer
;	O
grad_log	function
(	O
GRAD_LOG_INFO	int
,	O
_	O
(	O
"reading %s"	pointer
)	O
,	O
cfg_filename	pointer
)	O
;	O
cfg_line_num	int
=	O
1	int
;	O
if	O
(	O
strncmp	function
(	O
curp	pointer
,	O
"#debug"	pointer
,	O
6	int
)	O
==	O
0	int
)	O
{	O
ccdebug	int
=	O
1	int
;	O
}	O
else	O
{	O
ccdebug	int
=	O
0	int
;	O
}	O
cfg_slist	pointer
=	O
grad_slist_create	function
(	O
)	O
;	O
_cfg_run_begin	function
(	O
syntax	long
,	O
data	pointer
)	O
;	O
ccparse	function
(	O
)	O
;	O
_cfg_run_finish	function
(	O
syntax	long
,	O
data	pointer
)	O
;	O
while	O
(	O
_cfg_pop_block	function
(	O
)	O
)	O
;	O
_cfg_free_memory_pool	function
(	O
)	O
;	O
grad_slist_free	function
(	O
&	O
cfg_slist	pointer
)	O
;	O
return	O
0	int
;	O
}	O
