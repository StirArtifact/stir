static	O
int	O
g_taruib_gst_overflow_releaseM	int
;	O
static	O
int	O
g_taruib_gst_fdM	int
;	O
static	O
int	O
g_taruib_gst_lenM	int
;	O
static	O
char	O
g_taruib_gst_bufferM	array
[	O
TARU_BUFSIZ_RES	O
]	O
;	O
static	O
char	O
*	O
md5sum_adjunct_pattern	array
[	O
3	int
]	O
=	O
{	O
"catalog/*/adjunct_md5sum"	pointer
,	O
"*/catalog/*/adjunct_md5sum"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
static	O
char	O
*	O
md5sum_full_pattern	array
[	O
3	int
]	O
=	O
{	O
"catalog/*/md5sum"	pointer
,	O
"*/catalog/*/md5sum"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
static	O
char	O
*	O
sha1sum_pattern	array
[	O
3	int
]	O
=	O
{	O
"catalog/*/sha1sum"	pointer
,	O
"*/catalog/*/sha1sum"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
static	O
char	O
*	O
sha512sum_pattern	array
[	O
3	int
]	O
=	O
{	O
"catalog/*/sha512sum"	pointer
,	O
"*/catalog/*/sha512sum"	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
static	O
char	O
*	O
signature_pattern	array
[	O
3	int
]	O
=	O
{	O
"catalog/*/"	pointer
SWBN_SIGNATURE	pointer
,	O
"*/catalog/*/"	pointer
SWBN_SIGNATURE	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
static	O
char	O
*	O
signature_header_pattern	array
[	O
3	int
]	O
=	O
{	O
"catalog/*/"	pointer
SWBN_SIG_HEADER	pointer
,	O
"*/catalog/*/"	pointer
SWBN_SIG_HEADER	pointer
,	O
(	O
char	O
*	O
)	O
NULL	O
}	O
;	O
static	O
char	O
*	O
*	O
determine_pattern_array	function
(	O
int	O
*	O
detpat	pointer
,	O
char	O
*	O
name	array
)	O
{	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
if	O
(	O
strstr	function
(	O
name	array
,	O
"/md5sum"	pointer
)	O
)	O
{	O
*	O
detpat	pointer
=	O
TARUIB_N_MD5	int
;	O
return	O
md5sum_full_pattern	array
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
name	array
,	O
"/adjunct_md5sum"	pointer
)	O
)	O
{	O
*	O
detpat	pointer
=	O
TARUIB_N_ADJUNCT_MD5	int
;	O
return	O
md5sum_adjunct_pattern	array
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
name	array
,	O
"/sha1sum"	pointer
)	O
)	O
{	O
*	O
detpat	pointer
=	O
TARUIB_N_SHA1	int
;	O
return	O
sha1sum_pattern	array
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
name	array
,	O
"/sha512sum"	pointer
)	O
)	O
{	O
*	O
detpat	pointer
=	O
TARUIB_N_SHA512	int
;	O
return	O
sha512sum_pattern	array
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
name	array
,	O
"/"	pointer
SWBN_SIGNATURE	pointer
)	O
&&	O
strlen	function
(	O
strstr	function
(	O
name	array
,	O
"/"	pointer
SWBN_SIGNATURE	pointer
)	O
)	O
==	O
strlen	function
(	O
"/"	pointer
SWBN_SIGNATURE	pointer
)	O
)	O
{	O
*	O
detpat	pointer
=	O
TARUIB_N_SIG	int
;	O
return	O
signature_pattern	array
;	O
}	O
else	O
if	O
(	O
strstr	function
(	O
name	array
,	O
"/"	pointer
SWBN_SIG_HEADER	pointer
)	O
&&	O
strlen	function
(	O
strstr	function
(	O
name	array
,	O
"/"	pointer
SWBN_SIG_HEADER	pointer
)	O
)	O
==	O
strlen	function
(	O
"/"	pointer
SWBN_SIG_HEADER	pointer
)	O
)	O
{	O
*	O
detpat	pointer
=	O
TARUIB_N_SIG_HDR	int
;	O
return	O
signature_header_pattern	array
;	O
}	O
else	O
{	O
*	O
detpat	pointer
=	O
TARUIB_N_OTHER	O
;	O
return	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
}	O
}	O
static	O
int	O
check_useArray	function
(	O
int	O
*	O
useArray	pointer
,	O
int	O
digest_type	int
,	O
int	O
dfd	int
)	O
{	O
int	O
ret	int
=	O
-	O
1	int
;	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
if	O
(	O
useArray	pointer
)	O
{	O
if	O
(	O
digest_type	int
>	O
4	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
useArray	pointer
[	O
digest_type	int
]	O
&&	O
digest_type	int
!=	O
TARUIB_N_SIG	int
)	O
{	O
ret	int
=	O
-	O
1	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"swbis: catalog file error : type = %d\n"	pointer
,	O
digest_type	int
)	O
;	O
}	O
else	O
{	O
useArray	pointer
[	O
digest_type	int
]	O
++	O
;	O
ret	int
=	O
dfd	int
;	O
}	O
}	O
else	O
{	O
ret	int
=	O
dfd	int
;	O
}	O
return	O
ret	int
;	O
}	O
static	O
int	O
verbose_decode	function
(	O
int	O
*	O
useArray	pointer
,	O
int	O
*	O
detpat	pointer
,	O
char	O
*	O
prepath	pointer
,	O
char	O
*	O
name	array
,	O
int	O
nullfd	int
,	O
int	O
digest_type	int
,	O
int	O
verbose	int
,	O
int	O
md5digestfd	int
,	O
int	O
sha1digestfd	int
,	O
int	O
sigfd	int
,	O
int	O
sha512digestfd	int
)	O
{	O
int	O
i	int
=	O
0	int
;	O
int	O
ret	int
;	O
int	O
passfd	int
=	O
nullfd	int
;	O
char	O
*	O
s	pointer
;	O
char	O
*	O
*	O
pattern_array	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
if	O
(	O
verbose	int
==	O
0	int
)	O
return	O
nullfd	int
;	O
if	O
(	O
prepath	pointer
&&	O
strlen	function
(	O
prepath	pointer
)	O
)	O
{	O
s	pointer
=	O
strstr	function
(	O
name	array
,	O
prepath	pointer
)	O
;	O
if	O
(	O
s	pointer
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
s	pointer
==	O
name	array
)	O
{	O
name	array
+=	O
(	O
strlen	function
(	O
prepath	pointer
)	O
)	O
;	O
if	O
(	O
*	O
name	array
==	O
'/'	O
)	O
name	array
++	O
;	O
}	O
else	O
{	O
return	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
detpat	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
digest_type	int
==	O
TARUIB_N_ADJUNCT_MD5	int
)	O
{	O
pattern_array	pointer
=	O
md5sum_adjunct_pattern	array
;	O
}	O
else	O
if	O
(	O
digest_type	int
==	O
TARUIB_N_SIG	int
)	O
{	O
pattern_array	pointer
=	O
signature_pattern	array
;	O
}	O
else	O
if	O
(	O
digest_type	int
==	O
TARUIB_N_MD5	int
)	O
{	O
pattern_array	pointer
=	O
md5sum_full_pattern	array
;	O
}	O
else	O
if	O
(	O
digest_type	int
==	O
TARUIB_N_SHA1	int
)	O
{	O
pattern_array	pointer
=	O
sha1sum_pattern	array
;	O
}	O
else	O
if	O
(	O
digest_type	int
==	O
TARUIB_N_SHA512	int
)	O
{	O
pattern_array	pointer
=	O
sha512sum_pattern	array
;	O
}	O
else	O
if	O
(	O
digest_type	int
==	O
TARUIB_N_SIG_HDR	int
)	O
{	O
pattern_array	pointer
=	O
signature_header_pattern	array
;	O
}	O
else	O
{	O
pattern_array	pointer
=	O
NULL	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"internal error in verbose_decode\n"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
pattern_array	pointer
=	O
determine_pattern_array	function
(	O
detpat	pointer
,	O
name	array
)	O
;	O
digest_type	int
=	O
*	O
detpat	pointer
;	O
if	O
(	O
pattern_array	pointer
==	O
NULL	O
)	O
return	O
nullfd	int
;	O
}	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
while	O
(	O
pattern_array	pointer
[	O
i	int
]	O
)	O
{	O
if	O
(	O
!	O
name	array
||	O
!	O
strlen	function
(	O
name	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"internal error in taruib::verbose_decode\n"	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
nullfd	int
;	O
}	O
ret	int
=	O
fnmatch	function
(	O
pattern_array	pointer
[	O
i	int
]	O
,	O
name	array
,	O
1	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
if	O
(	O
digest_type	int
==	O
TARUIB_N_MD5	int
&&	O
md5digestfd	int
>=	O
0	int
)	O
{	O
passfd	int
=	O
check_useArray	function
(	O
useArray	pointer
,	O
digest_type	int
,	O
md5digestfd	int
)	O
;	O
}	O
else	O
if	O
(	O
digest_type	int
==	O
TARUIB_N_SIG	int
&&	O
sigfd	int
>=	O
0	int
)	O
{	O
passfd	int
=	O
check_useArray	function
(	O
useArray	pointer
,	O
digest_type	int
,	O
sigfd	int
)	O
;	O
}	O
else	O
if	O
(	O
digest_type	int
==	O
TARUIB_N_SHA1	int
&&	O
sha1digestfd	int
>=	O
0	int
)	O
{	O
passfd	int
=	O
check_useArray	function
(	O
useArray	pointer
,	O
digest_type	int
,	O
sha1digestfd	int
)	O
;	O
}	O
else	O
if	O
(	O
digest_type	int
==	O
TARUIB_N_SHA512	int
&&	O
sha512digestfd	int
>=	O
0	int
)	O
{	O
passfd	int
=	O
check_useArray	function
(	O
useArray	pointer
,	O
digest_type	int
,	O
sha512digestfd	int
)	O
;	O
}	O
else	O
if	O
(	O
digest_type	int
==	O
TARUIB_N_SIG_HDR	int
)	O
{	O
passfd	int
=	O
nullfd	int
;	O
}	O
else	O
{	O
if	O
(	O
detpat	pointer
)	O
{	O
passfd	int
=	O
nullfd	int
;	O
}	O
else	O
{	O
passfd	int
=	O
STDERR_FILENO	int
;	O
}	O
}	O
break	O
;	O
}	O
i	int
++	O
;	O
}	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
return	O
passfd	int
;	O
}	O
static	O
int	O
check_signature_name	function
(	O
char	O
*	O
sigfilename	pointer
,	O
char	O
*	O
prevname	pointer
)	O
{	O
int	O
ret	int
;	O
char	O
*	O
p	pointer
;	O
char	O
*	O
s	pointer
;	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
s	pointer
=	O
strstr	function
(	O
sigfilename	pointer
,	O
"/"	pointer
SWBN_SIGNATURE	pointer
)	O
;	O
if	O
(	O
!	O
s	pointer
||	O
*	O
(	O
s	pointer
+	O
strlen	function
(	O
"/"	pointer
SWBN_SIGNATURE	pointer
)	O
)	O
!=	O
'\0'	O
)	O
{	O
return	O
1	int
;	O
}	O
s	pointer
++	O
;	O
*	O
s	pointer
=	O
'\0'	O
;	O
if	O
(	O
(	O
p	pointer
=	O
strstr	function
(	O
prevname	pointer
,	O
sigfilename	pointer
)	O
)	O
==	O
NULL	O
||	O
p	pointer
!=	O
prevname	pointer
)	O
{	O
ret	int
=	O
1	int
;	O
}	O
else	O
{	O
ret	int
=	O
0	int
;	O
}	O
*	O
s	pointer
=	O
's'	O
;	O
return	O
ret	int
;	O
}	O
static	O
int	O
do_header_safety_checks	function
(	O
XFORMAT	struct
*	O
package	pointer
,	O
char	O
*	O
name	array
,	O
char	O
*	O
prevname	pointer
,	O
char	O
*	O
signature_header	pointer
)	O
{	O
int	O
type	pointer
;	O
mode_t	int
mode	array
;	O
char	O
*	O
linkname	array
;	O
int	O
sigsize	int
;	O
unsigned	O
long	O
trusted_sigsize	long
;	O
char	O
*	O
header_bytes	pointer
;	O
int	O
ret	int
=	O
0	int
;	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
if	O
(	O
check_signature_name	function
(	O
name	array
,	O
prevname	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Warning: *** The file name [%s]\n"	pointer
"         *** indicate strong possibility of tampering.\n"	pointer
"         *** Use of this package is a security risk.\n"	pointer
,	O
name	array
)	O
;	O
return	O
-	O
1	int
;	O
}	O
header_bytes	pointer
=	O
taru_get_recorded_header	function
(	O
package	pointer
->	O
taruM	pointer
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
;	O
type	pointer
=	O
xformat_get_tar_typeflag	function
(	O
package	pointer
)	O
;	O
mode	array
=	O
xformat_get_perms	function
(	O
package	pointer
)	O
;	O
linkname	array
=	O
xformat_get_linkname	function
(	O
package	pointer
,	O
NULL	O
)	O
;	O
sigsize	int
=	O
xformat_get_filesize	function
(	O
package	pointer
)	O
;	O
if	O
(	O
S_ISDIR	O
(	O
mode	array
)	O
==	O
0	int
&&	O
(	O
(	O
mode	array
&	O
S_ISUID	O
)	O
||	O
(	O
mode	array
&	O
S_ISGID	O
)	O
||	O
(	O
mode	array
&	O
S_ISVTX	O
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Warning: *** The file mode permissions on %s\n"	pointer
"         *** indicate strong possibility of tampering.\n"	pointer
"         *** Use of this package is a security risk.\n"	pointer
,	O
name	array
)	O
;	O
return	O
-	O
2	int
;	O
}	O
if	O
(	O
type	pointer
!=	O
REGTYPE	char
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Warning: *** The file type flag on %s\n"	pointer
"         *** indicate strong possibility of tampering.\n"	pointer
"         *** Use of this package is a security risk.\n"	pointer
,	O
name	array
)	O
;	O
return	O
-	O
2	int
;	O
}	O
if	O
(	O
linkname	array
&&	O
strlen	function
(	O
linkname	array
)	O
)	O
{	O
return	O
-	O
3	int
;	O
}	O
if	O
(	O
signature_header	pointer
)	O
{	O
taru_otoul	function
(	O
signature_header	pointer
+	O
THB_BO_size	int
,	O
&	O
trusted_sigsize	long
)	O
;	O
if	O
(	O
header_bytes	pointer
&&	O
(	O
int	O
)	O
trusted_sigsize	long
==	O
sigsize	int
)	O
{	O
ret	int
=	O
memcmp	function
(	O
signature_header	pointer
,	O
header_bytes	pointer
,	O
TARRECORDSIZE	int
)	O
;	O
if	O
(	O
ret	int
)	O
ret	int
=	O
-	O
5	int
;	O
}	O
else	O
{	O
ret	int
=	O
-	O
6	int
;	O
}	O
}	O
else	O
{	O
}	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
ret	int
;	O
if	O
(	O
ret	int
>	O
0	int
)	O
return	O
-	O
ret	int
;	O
return	O
sigsize	int
;	O
}	O
void	O
taruib_initialize_pass_thru_buffer	function
(	O
void	O
)	O
{	O
g_taruib_gst_overflow_releaseM	int
=	O
0	int
;	O
g_taruib_gst_fdM	int
=	O
-	O
1	int
;	O
g_taruib_gst_lenM	int
=	O
0	int
;	O
}	O
int	O
taruib_write_pass_files	function
(	O
void	O
*	O
vp	pointer
,	O
int	O
ofd	int
,	O
int	O
adjunct_ofd_p	int
)	O
{	O
XFORMAT	struct
*	O
package	pointer
=	O
(	O
XFORMAT	struct
*	O
)	O
vp	pointer
;	O
int	O
nullfd	int
=	O
swbis_devnull_open	O
(	O
"/dev/null"	pointer
,	O
O_RDWR	int
,	O
0	int
)	O
;	O
int	O
ifd	int
=	O
xformat_get_ifd	function
(	O
package	pointer
)	O
;	O
int	O
adjunct_ofd	int
;	O
int	O
ret	int
;	O
int	O
retval	int
=	O
0	int
;	O
int	O
total_sym_bytes	int
=	O
0	int
;	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
adjunct_ofd	int
=	O
adjunct_ofd_p	int
;	O
if	O
(	O
adjunct_ofd	int
<	O
0	int
)	O
adjunct_ofd	int
=	O
-	O
1	int
;	O
taruib_set_overflow_release	function
(	O
0	int
)	O
;	O
taruib_set_fd	function
(	O
ofd	int
)	O
;	O
while	O
(	O
(	O
ret	int
=	O
xformat_read_header	function
(	O
package	pointer
)	O
)	O
>	O
0	int
)	O
{	O
retval	int
+=	O
ret	int
;	O
if	O
(	O
xformat_is_end_of_archive	function
(	O
package	pointer
)	O
)	O
{	O
swbis_devnull_close	O
(	O
nullfd	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
adjunct_ofd	int
>=	O
0	int
)	O
{	O
if	O
(	O
xformat_get_tar_typeflag	function
(	O
package	pointer
)	O
==	O
SYMTYPE	char
)	O
{	O
total_sym_bytes	int
+=	O
g_taruib_gst_lenM	int
;	O
adjunct_ofd	int
=	O
-	O
2	int
;	O
;	O
}	O
else	O
{	O
uxfio_write	function
(	O
adjunct_ofd	int
,	O
(	O
void	O
*	O
)	O
g_taruib_gst_bufferM	array
,	O
(	O
size_t	long
)	O
g_taruib_gst_lenM	int
)	O
;	O
}	O
}	O
taruib_set_fd	function
(	O
ofd	int
)	O
;	O
taruib_clear_buffer	function
(	O
)	O
;	O
if	O
(	O
xformat_file_has_data	function
(	O
package	pointer
)	O
)	O
{	O
taruib_set_fd	function
(	O
-	O
1	int
)	O
;	O
taruib_set_overflow_release	function
(	O
1	int
)	O
;	O
if	O
(	O
xformat_copy_pass2	function
(	O
package	pointer
,	O
ofd	int
,	O
ifd	int
,	O
adjunct_ofd	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"error from xformat_copy_pass2\n"	pointer
)	O
;	O
}	O
taruib_set_overflow_release	function
(	O
0	int
)	O
;	O
taruib_set_datalen	function
(	O
0	int
)	O
;	O
taruib_set_fd	function
(	O
ofd	int
)	O
;	O
}	O
if	O
(	O
adjunct_ofd	int
==	O
-	O
2	int
)	O
{	O
adjunct_ofd	int
=	O
adjunct_ofd_p	int
;	O
}	O
}	O
if	O
(	O
adjunct_ofd_p	int
>=	O
0	int
)	O
{	O
uxfio_write	function
(	O
adjunct_ofd_p	int
,	O
(	O
void	O
*	O
)	O
g_taruib_gst_bufferM	array
,	O
(	O
size_t	long
)	O
g_taruib_gst_lenM	int
)	O
;	O
}	O
taruib_clear_buffer	function
(	O
)	O
;	O
taruib_set_fd	function
(	O
-	O
1	int
)	O
;	O
taruib_set_overflow_release	function
(	O
1	int
)	O
;	O
ret	int
=	O
taru_pump_amount2	function
(	O
ofd	int
,	O
ifd	int
,	O
-	O
1	int
,	O
adjunct_ofd_p	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"swbis: error in taruib_write_pass_files\n"	pointer
)	O
;	O
retval	int
=	O
-	O
1	int
;	O
}	O
else	O
{	O
retval	int
+=	O
ret	int
;	O
}	O
return	O
retval	int
;	O
}	O
int	O
taruib_get_nominal_reserve	function
(	O
void	O
)	O
{	O
return	O
taruib_get_reserve	function
(	O
)	O
-	O
TARRECORDSIZE	int
;	O
}	O
int	O
taruib_get_reserve	function
(	O
void	O
)	O
{	O
return	O
sizeof	O
(	O
g_taruib_gst_bufferM	array
)	O
;	O
}	O
void	O
taruib_set_overflow_release	function
(	O
int	O
i	int
)	O
{	O
g_taruib_gst_overflow_releaseM	int
=	O
i	int
;	O
}	O
int	O
taruib_get_overflow_release	function
(	O
void	O
)	O
{	O
return	O
g_taruib_gst_overflow_releaseM	int
;	O
}	O
void	O
taruib_set_fd	function
(	O
int	O
fd	int
)	O
{	O
g_taruib_gst_fdM	int
=	O
fd	int
;	O
}	O
int	O
taruib_get_fd	function
(	O
void	O
)	O
{	O
return	O
g_taruib_gst_fdM	int
;	O
}	O
char	O
*	O
taruib_get_buffer	function
(	O
void	O
)	O
{	O
return	O
g_taruib_gst_bufferM	array
;	O
}	O
int	O
taruib_get_datalen	function
(	O
void	O
)	O
{	O
return	O
g_taruib_gst_lenM	int
;	O
}	O
int	O
taruib_get_bufferlen	function
(	O
void	O
)	O
{	O
return	O
sizeof	O
(	O
g_taruib_gst_bufferM	array
)	O
;	O
}	O
void	O
taruib_set_datalen	function
(	O
int	O
n	int
)	O
{	O
g_taruib_gst_lenM	int
=	O
n	int
;	O
}	O
void	O
taruib_unread	function
(	O
int	O
n	int
)	O
{	O
if	O
(	O
n	int
>	O
g_taruib_gst_lenM	int
)	O
{	O
g_taruib_gst_lenM	int
=	O
0	int
;	O
}	O
else	O
{	O
g_taruib_gst_lenM	int
-=	O
n	int
;	O
}	O
}	O
int	O
taruib_clear_buffer	function
(	O
void	O
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
uxfio_write	function
(	O
g_taruib_gst_fdM	int
,	O
(	O
void	O
*	O
)	O
g_taruib_gst_bufferM	array
,	O
(	O
size_t	long
)	O
g_taruib_gst_lenM	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"swbis: module taruib: write error (fatal)\n"	pointer
)	O
;	O
exit	function
(	O
14	int
)	O
;	O
}	O
g_taruib_gst_lenM	int
-=	O
ret	int
;	O
if	O
(	O
g_taruib_gst_lenM	int
>	O
0	int
)	O
return	O
-	O
ret	int
;	O
if	O
(	O
g_taruib_gst_lenM	int
<	O
0	int
)	O
return	O
ret	int
;	O
return	O
ret	int
;	O
}	O
int	O
taruib_write_catalog_stream	function
(	O
void	O
*	O
vp	pointer
,	O
int	O
ofd	int
,	O
int	O
version	int
,	O
int	O
verbose	int
)	O
{	O
XFORMAT	struct
*	O
package	pointer
=	O
(	O
XFORMAT	struct
*	O
)	O
vp	pointer
;	O
int	O
nullfd	int
;	O
int	O
passfd	int
;	O
int	O
check_ret	int
;	O
int	O
ifd	int
=	O
xformat_get_ifd	function
(	O
package	pointer
)	O
;	O
int	O
copyret	int
;	O
int	O
ret	int
;	O
int	O
retval	int
=	O
0	int
;	O
int	O
is_catalog	int
;	O
int	O
path_ret	int
;	O
STROB	struct
*	O
prevname	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
STROB	struct
*	O
namebuf	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
char	O
*	O
prepath	pointer
;	O
char	O
*	O
name	array
;	O
int	O
got_sig	int
=	O
0	int
;	O
SWPATH	struct
*	O
swpath	pointer
=	O
swpath_open	function
(	O
""	pointer
)	O
;	O
TARU	struct
*	O
taru	pointer
=	O
taru_create	function
(	O
)	O
;	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
nullfd	int
=	O
swbis_devnull_open	O
(	O
"/dev/null"	pointer
,	O
O_RDWR	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
swpath	pointer
)	O
return	O
-	O
21	int
;	O
if	O
(	O
nullfd	int
<	O
0	int
)	O
return	O
-	O
22	int
;	O
if	O
(	O
ifd	int
<	O
0	int
)	O
return	O
-	O
32	int
;	O
if	O
(	O
!	O
taru	pointer
)	O
return	O
-	O
20	int
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
taruib_set_fd	function
(	O
ofd	int
)	O
;	O
while	O
(	O
(	O
ret	int
=	O
xformat_read_header	function
(	O
package	pointer
)	O
)	O
>	O
0	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
retval	int
+=	O
ret	int
;	O
if	O
(	O
xformat_is_end_of_archive	function
(	O
package	pointer
)	O
)	O
{	O
break	O
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
xformat_get_name	function
(	O
package	pointer
,	O
namebuf	pointer
)	O
;	O
name	array
=	O
strob_str	function
(	O
namebuf	pointer
)	O
;	O
path_ret	int
=	O
swpath_parse_path	function
(	O
swpath	pointer
,	O
name	array
)	O
;	O
if	O
(	O
path_ret	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"taruib_write_catalog_stream: error parsing path [%s].\n"	pointer
,	O
name	array
)	O
;	O
E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
prepath	pointer
=	O
swpath_get_prepath	function
(	O
swpath	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
is_catalog	int
=	O
swpath_get_is_catalog	function
(	O
swpath	pointer
)	O
;	O
if	O
(	O
(	O
version	int
==	O
0	int
&&	O
(	O
is_catalog	int
==	O
SWPATH_CTYPE_CAT	int
||	O
is_catalog	int
==	O
SWPATH_CTYPE_DIR	O
)	O
)	O
||	O
(	O
version	int
==	O
1	int
&&	O
is_catalog	int
==	O
SWPATH_CTYPE_CAT	int
)	O
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
swpath_get_basename	function
(	O
swpath	pointer
)	O
,	O
SWBN_SIGNATURE	pointer
)	O
==	O
0	int
&&	O
strlen	function
(	O
swpath_get_dfiles	function
(	O
swpath	pointer
)	O
)	O
&&	O
1	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
check_ret	int
=	O
do_header_safety_checks	function
(	O
package	pointer
,	O
strob_str	function
(	O
namebuf	pointer
)	O
,	O
strob_str	function
(	O
prevname	pointer
)	O
,	O
NULL	O
)	O
;	O
if	O
(	O
check_ret	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
got_sig	int
=	O
1	int
;	O
taruib_unread	function
(	O
ret	int
)	O
;	O
retval	int
-=	O
ret	int
;	O
taruib_set_overflow_release	function
(	O
0	int
)	O
;	O
taruib_set_fd	function
(	O
-	O
1	int
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
verbose	int
&&	O
version	int
==	O
1	int
)	O
{	O
passfd	int
=	O
verbose_decode	function
(	O
NULL	O
,	O
NULL	O
,	O
prepath	pointer
,	O
name	array
,	O
nullfd	int
,	O
2	int
,	O
verbose	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
}	O
else	O
{	O
passfd	int
=	O
nullfd	int
;	O
}	O
xformat_copy_pass	function
(	O
package	pointer
,	O
passfd	int
,	O
ifd	int
)	O
;	O
taruib_set_fd	function
(	O
ofd	int
)	O
;	O
}	O
else	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
taruib_set_overflow_release	function
(	O
0	int
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
E_DEBUG3	O
(	O
"nullfd=%d  ifd=%d"	pointer
,	O
nullfd	int
,	O
ifd	int
)	O
;	O
copyret	int
=	O
xformat_copy_pass	function
(	O
package	pointer
,	O
nullfd	int
,	O
ifd	int
)	O
;	O
if	O
(	O
copyret	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swpath_close	function
(	O
swpath	pointer
)	O
;	O
strob_close	function
(	O
namebuf	pointer
)	O
;	O
strob_close	function
(	O
prevname	pointer
)	O
;	O
E_DEBUG	O
(	O
"LEAVING : xformat_copy_pass error."	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"swbis : xformat_copy_pass() error\n"	pointer
)	O
;	O
return	O
copyret	int
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
copyret	int
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
taruib_clear_buffer	function
(	O
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Internal error in taruib_write_catalog_stream : %d\n"	pointer
,	O
__LINE__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
retval	int
+=	O
copyret	int
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
}	O
else	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
version	int
==	O
1	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
is_catalog	int
==	O
SWPATH_CTYPE_DIR	O
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
taruib_unread	function
(	O
ret	int
)	O
;	O
retval	int
-=	O
ret	int
;	O
taruib_set_overflow_release	function
(	O
0	int
)	O
;	O
taruib_set_fd	function
(	O
-	O
1	int
)	O
;	O
xformat_copy_pass	function
(	O
package	pointer
,	O
nullfd	int
,	O
ifd	int
)	O
;	O
taruib_set_fd	function
(	O
ofd	int
)	O
;	O
}	O
else	O
if	O
(	O
is_catalog	int
==	O
SWPATH_CTYPE_STORE	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
taruib_unread	function
(	O
ret	int
)	O
;	O
retval	int
-=	O
ret	int
;	O
break	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"internal error : taruib_write_catalog_stream\n"	pointer
)	O
;	O
E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
version	int
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
taruib_unread	function
(	O
ret	int
)	O
;	O
retval	int
-=	O
ret	int
;	O
break	O
;	O
}	O
else	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"internal error: default else \n"	pointer
)	O
;	O
E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
taruib_set_overflow_release	function
(	O
1	int
)	O
;	O
strob_strcpy	function
(	O
prevname	pointer
,	O
strob_str	function
(	O
namebuf	pointer
)	O
)	O
;	O
}	O
if	O
(	O
ret	int
>=	O
0	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
taruib_clear_buffer	function
(	O
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Internal error in taruib_write_catalog_stream : %d\n"	pointer
,	O
__LINE__	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
if	O
(	O
version	int
==	O
1	int
)	O
{	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
retval	int
+=	O
taru_write_archive_trailer	function
(	O
taru	pointer
,	O
arf_ustar	int
,	O
ofd	int
,	O
TARRECORDSIZE	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
got_sig	int
==	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"swbis: signature file not found.\n"	pointer
)	O
;	O
}	O
}	O
swbis_devnull_close	O
(	O
nullfd	int
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
strob_close	function
(	O
namebuf	pointer
)	O
;	O
E_DEBUG	O
(	O
""	pointer
)	O
;	O
swpath_close	function
(	O
swpath	pointer
)	O
;	O
E_DEBUG2	O
(	O
"LEAVING retval = %d"	pointer
,	O
retval	int
)	O
;	O
return	O
retval	int
;	O
}	O
int	O
taruib_write_storage_stream	function
(	O
void	O
*	O
vp	pointer
,	O
int	O
ofd	int
,	O
int	O
version	int
,	O
int	O
ofd2	int
,	O
int	O
verbose	int
,	O
int	O
digest_type	int
)	O
{	O
XFORMAT	struct
*	O
package	pointer
=	O
(	O
XFORMAT	struct
*	O
)	O
vp	pointer
;	O
int	O
nullfd	int
=	O
swbis_devnull_open	O
(	O
"/dev/null"	pointer
,	O
O_RDWR	int
,	O
0	int
)	O
;	O
int	O
ifd	int
=	O
xformat_get_ifd	function
(	O
package	pointer
)	O
;	O
int	O
path_ret	int
;	O
int	O
passfd	int
;	O
int	O
copyret	int
;	O
int	O
ret	int
;	O
int	O
retval	int
=	O
0	int
;	O
int	O
is_catalog	int
;	O
STROB	struct
*	O
namebuf	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
char	O
*	O
name	array
;	O
SWPATH	struct
*	O
swpath	pointer
=	O
swpath_open	function
(	O
""	pointer
)	O
;	O
int	O
debug	int
=	O
0	int
;	O
int	O
do_adjunct	int
=	O
0	int
;	O
int	O
header_bytes	pointer
;	O
char	O
*	O
prepath	pointer
;	O
TARU	struct
*	O
taru	pointer
=	O
taru_create	function
(	O
)	O
;	O
E_DEBUG	O
(	O
"ENTERING"	pointer
)	O
;	O
if	O
(	O
ofd2	int
>	O
0	int
)	O
{	O
do_adjunct	int
=	O
1	int
;	O
digest_type	int
=	O
1	int
;	O
}	O
if	O
(	O
!	O
taru	pointer
)	O
return	O
-	O
20	int
;	O
if	O
(	O
!	O
swpath	pointer
)	O
return	O
-	O
21	int
;	O
if	O
(	O
nullfd	int
<	O
0	int
)	O
return	O
-	O
22	int
;	O
if	O
(	O
ifd	int
<	O
0	int
)	O
return	O
-	O
32	int
;	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"ofd = %d version = %d\n"	pointer
,	O
ofd	int
,	O
version	int
)	O
;	O
taruib_set_fd	function
(	O
nullfd	int
)	O
;	O
taruib_set_overflow_release	function
(	O
0	int
)	O
;	O
while	O
(	O
(	O
ret	int
=	O
xformat_read_header	function
(	O
package	pointer
)	O
)	O
>	O
0	int
)	O
{	O
header_bytes	pointer
=	O
ret	int
;	O
retval	int
+=	O
ret	int
;	O
if	O
(	O
xformat_is_end_of_archive	function
(	O
package	pointer
)	O
)	O
{	O
retval	int
=	O
taru_write_archive_trailer	function
(	O
taru	pointer
,	O
arf_ustar	int
,	O
ofd	int
,	O
512	int
,	O
0	int
,	O
0	int
)	O
;	O
swbis_devnull_close	O
(	O
nullfd	int
)	O
;	O
swpath_close	function
(	O
swpath	pointer
)	O
;	O
strob_close	function
(	O
namebuf	pointer
)	O
;	O
return	O
retval	int
;	O
}	O
xformat_get_name	function
(	O
package	pointer
,	O
namebuf	pointer
)	O
;	O
name	array
=	O
strob_str	function
(	O
namebuf	pointer
)	O
;	O
path_ret	int
=	O
swpath_parse_path	function
(	O
swpath	pointer
,	O
name	array
)	O
;	O
if	O
(	O
path_ret	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"taruib_write_storage_stream:"	pointer
" error parsing path [%s].\n"	pointer
,	O
name	array
)	O
;	O
E_DEBUG	O
(	O
"LEAVING"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
prepath	pointer
=	O
swpath_get_prepath	function
(	O
swpath	pointer
)	O
;	O
is_catalog	int
=	O
swpath_get_is_catalog	function
(	O
swpath	pointer
)	O
;	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"%s : %d\n"	pointer
,	O
name	array
,	O
is_catalog	int
)	O
;	O
if	O
(	O
version	int
==	O
0	int
)	O
{	O
if	O
(	O
is_catalog	int
!=	O
SWPATH_CTYPE_STORE	int
)	O
{	O
taruib_set_overflow_release	function
(	O
0	int
)	O
;	O
taruib_set_fd	function
(	O
0	int
)	O
;	O
copyret	int
=	O
xformat_copy_pass	function
(	O
package	pointer
,	O
nullfd	int
,	O
ifd	int
)	O
;	O
if	O
(	O
copyret	int
<	O
0	int
)	O
{	O
swpath_close	function
(	O
swpath	pointer
)	O
;	O
strob_close	function
(	O
namebuf	pointer
)	O
;	O
swbis_devnull_close	O
(	O
nullfd	int
)	O
;	O
return	O
copyret	int
;	O
}	O
taruib_set_fd	function
(	O
nullfd	int
)	O
;	O
taruib_clear_buffer	function
(	O
)	O
;	O
}	O
else	O
{	O
taruib_set_fd	function
(	O
ofd	int
)	O
;	O
taruib_clear_buffer	function
(	O
)	O
;	O
retval	int
=	O
ret	int
;	O
taruib_set_fd	function
(	O
0	int
)	O
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
version	int
==	O
1	int
)	O
{	O
if	O
(	O
is_catalog	int
==	O
SWPATH_CTYPE_CAT	int
)	O
{	O
taruib_set_overflow_release	function
(	O
0	int
)	O
;	O
taruib_set_fd	function
(	O
0	int
)	O
;	O
passfd	int
=	O
verbose_decode	function
(	O
NULL	O
,	O
NULL	O
,	O
prepath	pointer
,	O
name	array
,	O
nullfd	int
,	O
digest_type	int
,	O
verbose	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
copyret	int
=	O
xformat_copy_pass_file_data	function
(	O
package	pointer
,	O
passfd	int
,	O
ifd	int
)	O
;	O
if	O
(	O
copyret	int
<	O
0	int
)	O
{	O
swpath_close	function
(	O
swpath	pointer
)	O
;	O
strob_close	function
(	O
namebuf	pointer
)	O
;	O
swbis_devnull_close	O
(	O
nullfd	int
)	O
;	O
return	O
copyret	int
;	O
}	O
xformat_decrement_bytes_written	function
(	O
package	pointer
,	O
copyret	int
+	O
header_bytes	pointer
)	O
;	O
taruib_set_fd	function
(	O
nullfd	int
)	O
;	O
taruib_clear_buffer	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
is_catalog	int
==	O
SWPATH_CTYPE_DIR	O
)	O
{	O
if	O
(	O
ofd2	int
>=	O
0	int
)	O
{	O
uxfio_write	function
(	O
ofd2	int
,	O
(	O
void	O
*	O
)	O
taruib_get_buffer	function
(	O
)	O
,	O
(	O
size_t	long
)	O
taruib_get_datalen	function
(	O
)	O
)	O
;	O
}	O
if	O
(	O
debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"in leading dirs\n"	pointer
)	O
;	O
taruib_set_fd	function
(	O
ofd	int
)	O
;	O
taruib_clear_buffer	function
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
ofd2	int
>=	O
0	int
)	O
{	O
uxfio_write	function
(	O
ofd2	int
,	O
(	O
void	O
*	O
)	O
g_taruib_gst_bufferM	array
,	O
(	O
size_t	long
)	O
g_taruib_gst_lenM	int
)	O
;	O
}	O
taruib_set_fd	function
(	O
ofd	int
)	O
;	O
taruib_clear_buffer	function
(	O
)	O
;	O
retval	int
=	O
ret	int
;	O
taruib_set_fd	function
(	O
0	int
)	O
;	O
break	O
;	O
}	O
}	O
taruib_set_overflow_release	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
version	int
==	O
0	int
)	O
{	O
ret	int
=	O
taru_pump_amount2	function
(	O
ofd	int
,	O
ifd	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
xformat_file_has_data	function
(	O
package	pointer
)	O
)	O
{	O
if	O
(	O
xformat_copy_pass2	function
(	O
package	pointer
,	O
ofd	int
,	O
ifd	int
,	O
ofd2	int
)	O
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"error from xformat_copy_pass2\n"	pointer
)	O
;	O
}	O
}	O
ret	int
=	O
taruib_write_pass_files	function
(	O
vp	pointer
,	O
ofd	int
,	O
ofd2	int
)	O
;	O
}	O
swbis_devnull_close	O
(	O
nullfd	int
)	O
;	O
strob_close	function
(	O
namebuf	pointer
)	O
;	O
swpath_close	function
(	O
swpath	pointer
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
return	O
-	O
100	int
;	O
retval	int
+=	O
ret	int
;	O
return	O
retval	int
;	O
}	O
int	O
taruib_arfcopy	function
(	O
void	O
*	O
xpackage	pointer
,	O
void	O
*	O
xswpath	pointer
,	O
int	O
xofd	int
,	O
char	O
*	O
leadingpath	pointer
,	O
int	O
do_preview	int
,	O
uintmax_t	long
*	O
statbytes	pointer
,	O
int	O
*	O
deadman	pointer
,	O
void	O
(	O
*	O
alarm_handler	pointer
)	O
(	O
int	O
)	O
)	O
{	O
XFORMAT	struct
*	O
package	pointer
=	O
(	O
XFORMAT	struct
*	O
)	O
xpackage	pointer
;	O
SWPATH	struct
*	O
swpath	pointer
=	O
(	O
SWPATH	struct
*	O
)	O
xswpath	pointer
;	O
int	O
nullfd	int
;	O
int	O
format	pointer
;	O
int	O
output_format	enum
;	O
char	O
*	O
name	array
;	O
int	O
ifd	int
;	O
int	O
ret	int
;	O
int	O
aret	int
;	O
int	O
parseret	int
;	O
int	O
pathret	int
;	O
int	O
retval	int
=	O
-	O
1	int
;	O
int	O
depth	pointer
;	O
int	O
ofd	int
;	O
STROB	struct
*	O
resolved_path	pointer
;	O
STROB	struct
*	O
namebuf	pointer
;	O
STROB	struct
*	O
newnamebuf	pointer
;	O
STROB	struct
*	O
tmp	pointer
;	O
off_t	long
bytes	long
=	O
0	int
;	O
int	O
tarheaderflags	int
;	O
int	O
do_gnu_long_link	int
;	O
int	O
namelengthret	int
;	O
struct	O
new_cpio_header	struct
*	O
file_hdr	pointer
;	O
sigset_t	struct
pendmask	struct
;	O
nullfd	int
=	O
swbis_devnull_open	O
(	O
"/dev/null"	pointer
,	O
O_RDWR	int
,	O
0	int
)	O
;	O
newnamebuf	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
namebuf	pointer
=	O
strob_open	function
(	O
100	int
)	O
;	O
tmp	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
resolved_path	pointer
=	O
strob_open	function
(	O
10	int
)	O
;	O
tarheaderflags	int
=	O
xformat_get_tarheader_flags	function
(	O
package	pointer
)	O
;	O
file_hdr	pointer
=	O
(	O
struct	O
new_cpio_header	struct
*	O
)	O
(	O
xformat_vfile_hdr	function
(	O
package	pointer
)	O
)	O
;	O
output_format	enum
=	O
xformat_get_output_format	function
(	O
package	pointer
)	O
;	O
format	pointer
=	O
xformat_get_format	function
(	O
package	pointer
)	O
;	O
ifd	int
=	O
xformat_get_ifd	function
(	O
package	pointer
)	O
;	O
if	O
(	O
ifd	int
<	O
0	int
)	O
return	O
-	O
32	int
;	O
ofd	int
=	O
nullfd	int
;	O
xformat_set_ofd	function
(	O
package	pointer
,	O
ofd	int
)	O
;	O
taruib_initialize_pass_thru_buffer	function
(	O
)	O
;	O
taruib_set_fd	function
(	O
xofd	int
)	O
;	O
if	O
(	O
alarm_handler	pointer
)	O
{	O
swgp_signal_block	function
(	O
SIGALRM	int
,	O
(	O
sigset_t	struct
*	O
)	O
NULL	O
)	O
;	O
}	O
while	O
(	O
(	O
ret	int
=	O
xformat_read_header	function
(	O
package	pointer
)	O
)	O
>	O
0	int
&&	O
(	O
!	O
deadman	pointer
||	O
(	O
deadman	pointer
&&	O
*	O
deadman	pointer
==	O
0	int
)	O
)	O
)	O
{	O
if	O
(	O
alarm_handler	pointer
)	O
{	O
if	O
(	O
statbytes	pointer
)	O
{	O
(	O
*	O
statbytes	pointer
)	O
=	O
(	O
unsigned	O
long	O
int	O
)	O
bytes	long
;	O
}	O
swgp_signal_unblock	function
(	O
SIGALRM	int
,	O
(	O
sigset_t	struct
*	O
)	O
NULL	O
)	O
;	O
sigpending	function
(	O
&	O
pendmask	struct
)	O
;	O
if	O
(	O
sigismember	function
(	O
&	O
pendmask	struct
,	O
SIGALRM	int
)	O
)	O
{	O
(	O
*	O
alarm_handler	pointer
)	O
(	O
SIGALRM	int
)	O
;	O
}	O
}	O
if	O
(	O
xformat_is_end_of_archive	function
(	O
package	pointer
)	O
)	O
{	O
break	O
;	O
}	O
bytes	long
+=	O
ret	int
;	O
xformat_get_name	function
(	O
package	pointer
,	O
namebuf	pointer
)	O
;	O
name	array
=	O
strob_str	function
(	O
namebuf	pointer
)	O
;	O
strob_strcpy	function
(	O
newnamebuf	pointer
,	O
leadingpath	pointer
)	O
;	O
swlib_unix_dircat	function
(	O
newnamebuf	pointer
,	O
name	array
)	O
;	O
parseret	int
=	O
swpath_parse_path	function
(	O
swpath	pointer
,	O
name	array
)	O
;	O
if	O
(	O
parseret	int
<	O
0	int
)	O
{	O
retval	int
=	O
-	O
3	int
;	O
goto	O
error	O
;	O
}	O
pathret	int
=	O
swlib_vrealpath	function
(	O
""	pointer
,	O
name	array
,	O
&	O
depth	pointer
,	O
resolved_path	pointer
)	O
;	O
if	O
(	O
depth	pointer
<=	O
1	int
&&	O
strstr	function
(	O
name	array
,	O
".."	pointer
)	O
)	O
{	O
retval	int
=	O
-	O
4	int
;	O
goto	O
error	O
;	O
}	O
namelengthret	int
=	O
taru_is_tar_filename_too_long	function
(	O
strob_str	function
(	O
newnamebuf	pointer
)	O
,	O
tarheaderflags	int
,	O
&	O
do_gnu_long_link	int
,	O
1	int
)	O
;	O
if	O
(	O
namelengthret	int
)	O
{	O
retval	int
=	O
-	O
5	int
;	O
goto	O
error	O
;	O
}	O
ahsStaticSetTarFilename	function
(	O
file_hdr	pointer
,	O
strob_str	function
(	O
newnamebuf	pointer
)	O
)	O
;	O
if	O
(	O
alarm_handler	pointer
)	O
{	O
swgp_signal_block	function
(	O
SIGALRM	int
,	O
(	O
sigset_t	struct
*	O
)	O
NULL	O
)	O
;	O
}	O
taruib_clear_buffer	function
(	O
)	O
;	O
aret	int
=	O
xformat_copy_pass	function
(	O
package	pointer
,	O
ofd	int
,	O
ifd	int
)	O
;	O
if	O
(	O
aret	int
<	O
0	int
)	O
goto	O
error	O
;	O
bytes	long
+=	O
aret	int
;	O
}	O
if	O
(	O
alarm_handler	pointer
)	O
{	O
swgp_signal_block	function
(	O
SIGALRM	int
,	O
(	O
sigset_t	struct
*	O
)	O
NULL	O
)	O
;	O
}	O
if	O
(	O
deadman	pointer
&&	O
*	O
deadman	pointer
)	O
return	O
-	O
1	int
;	O
taruib_clear_buffer	function
(	O
)	O
;	O
retval	int
=	O
0	int
;	O
ret	int
=	O
taru_pump_amount2	function
(	O
ofd	int
,	O
ifd	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"swbis: error in taruib_arfcopy\n"	pointer
)	O
;	O
retval	int
=	O
-	O
1	int
;	O
}	O
bytes	long
+=	O
aret	int
;	O
taruib_clear_buffer	function
(	O
)	O
;	O
error	O
:	O
strob_close	function
(	O
resolved_path	pointer
)	O
;	O
strob_close	function
(	O
tmp	pointer
)	O
;	O
strob_close	function
(	O
namebuf	pointer
)	O
;	O
if	O
(	O
alarm_handler	pointer
)	O
{	O
swgp_signal_unblock	function
(	O
SIGALRM	int
,	O
(	O
sigset_t	struct
*	O
)	O
NULL	O
)	O
;	O
}	O
return	O
retval	int
;	O
}	O
