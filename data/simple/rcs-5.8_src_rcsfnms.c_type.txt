struct	O
compair	struct
{	O
char	O
const	O
*	O
suffix	pointer
,	O
*	O
comlead	pointer
;	O
}	O
;	O
static	O
struct	O
compair	struct
const	O
comtable	array
[	O
]	O
=	O
{	O
{	O
"a"	pointer
,	O
"-- "	pointer
}	O
,	O
{	O
"ada"	pointer
,	O
"-- "	pointer
}	O
,	O
{	O
"adb"	pointer
,	O
"-- "	pointer
}	O
,	O
{	O
"ads"	pointer
,	O
"-- "	pointer
}	O
,	O
{	O
"asm"	pointer
,	O
";; "	pointer
}	O
,	O
{	O
"bat"	pointer
,	O
":: "	pointer
}	O
,	O
{	O
"body"	pointer
,	O
"-- "	pointer
}	O
,	O
{	O
"c"	pointer
,	O
" * "	pointer
}	O
,	O
{	O
"c++"	pointer
,	O
"// "	pointer
}	O
,	O
{	O
"cc"	pointer
,	O
"// "	pointer
}	O
,	O
{	O
"cpp"	pointer
,	O
"// "	pointer
}	O
,	O
{	O
"cxx"	pointer
,	O
"// "	pointer
}	O
,	O
{	O
"cl"	pointer
,	O
";;; "	pointer
}	O
,	O
{	O
"cmd"	pointer
,	O
":: "	pointer
}	O
,	O
{	O
"cmf"	pointer
,	O
"c "	pointer
}	O
,	O
{	O
"cs"	pointer
,	O
" * "	pointer
}	O
,	O
{	O
"el"	pointer
,	O
"; "	pointer
}	O
,	O
{	O
"f"	pointer
,	O
"c "	pointer
}	O
,	O
{	O
"for"	pointer
,	O
"c "	pointer
}	O
,	O
{	O
"h"	pointer
,	O
" * "	pointer
}	O
,	O
{	O
"hpp"	pointer
,	O
"// "	pointer
}	O
,	O
{	O
"hxx"	pointer
,	O
"// "	pointer
}	O
,	O
{	O
"l"	pointer
,	O
" * "	pointer
}	O
,	O
{	O
"lisp"	pointer
,	O
";;; "	pointer
}	O
,	O
{	O
"lsp"	pointer
,	O
";; "	pointer
}	O
,	O
{	O
"m"	pointer
,	O
"// "	pointer
}	O
,	O
{	O
"mac"	pointer
,	O
";; "	pointer
}	O
,	O
{	O
"me"	pointer
,	O
".\\\" "	pointer
}	O
,	O
{	O
"ml"	pointer
,	O
"; "	pointer
}	O
,	O
{	O
"mm"	pointer
,	O
".\\\" "	pointer
}	O
,	O
{	O
"ms"	pointer
,	O
".\\\" "	pointer
}	O
,	O
{	O
"p"	pointer
,	O
" * "	pointer
}	O
,	O
{	O
"pas"	pointer
,	O
" * "	pointer
}	O
,	O
{	O
"ps"	pointer
,	O
"% "	pointer
}	O
,	O
{	O
"spec"	pointer
,	O
"-- "	pointer
}	O
,	O
{	O
"sty"	pointer
,	O
"% "	pointer
}	O
,	O
{	O
"tex"	pointer
,	O
"% "	pointer
}	O
,	O
{	O
"y"	pointer
,	O
" * "	pointer
}	O
,	O
{	O
NULL	O
,	O
"# "	pointer
}	O
}	O
;	O
static	O
void	O
InitAdmin	function
(	O
void	O
)	O
{	O
register	O
char	O
const	O
*	O
ext	pointer
;	O
REPO	O
(	O
tip	pointer
)	O
=	O
NULL	O
;	O
BE	O
(	O
strictly_locking	bool
)	O
=	O
STRICT_LOCKING	O
;	O
REPO	O
(	O
r	pointer
)	O
=	O
empty_repo	function
(	O
SINGLE	O
)	O
;	O
ext	pointer
=	O
(	O
ext	pointer
=	O
strrchr	function
(	O
MANI	O
(	O
filename	pointer
)	O
,	O
'.'	O
)	O
)	O
?	O
1	int
+	O
ext	pointer
:	O
""	pointer
;	O
for	O
(	O
struct	O
compair	struct
const	O
*	O
ent	pointer
=	O
comtable	array
;	O
;	O
ent	pointer
++	O
)	O
if	O
(	O
!	O
ent	pointer
->	O
suffix	pointer
||	O
!	O
strcasecmp	function
(	O
ent	pointer
->	O
suffix	pointer
,	O
ext	pointer
)	O
)	O
{	O
REPO	O
(	O
log_lead	struct
)	O
.	O
string	pointer
=	O
ent	pointer
->	O
comlead	pointer
;	O
REPO	O
(	O
log_lead	struct
)	O
.	O
size	long
=	O
strlen	function
(	O
ent	pointer
->	O
comlead	pointer
)	O
;	O
break	O
;	O
}	O
BE	O
(	O
kws	int
)	O
=	O
kwsub_kv	int
;	O
}	O
char	O
const	O
*	O
basefilename	function
(	O
char	O
const	O
*	O
p	pointer
)	O
{	O
register	O
char	O
const	O
*	O
b	pointer
=	O
p	pointer
,	O
*	O
q	pointer
=	O
p	pointer
;	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
*	O
q	pointer
++	O
)	O
{	O
case	O
SLASHes	char
:	O
b	pointer
=	O
q	pointer
;	O
break	O
;	O
case	O
0	int
:	O
return	O
b	pointer
;	O
}	O
}	O
static	O
size_t	long
suffixlen	function
(	O
char	O
const	O
*	O
x	pointer
)	O
{	O
register	O
char	O
const	O
*	O
p	pointer
;	O
p	pointer
=	O
x	pointer
;	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
*	O
p	pointer
)	O
{	O
case	O
0	int
:	O
case	O
SLASHes	char
:	O
return	O
p	pointer
-	O
x	pointer
;	O
default	O
:	O
++	O
p	pointer
;	O
continue	O
;	O
}	O
}	O
char	O
const	O
*	O
rcssuffix	function
(	O
char	O
const	O
*	O
name	pointer
)	O
{	O
char	O
const	O
*	O
x	pointer
,	O
*	O
p	pointer
,	O
*	O
nz	pointer
;	O
size_t	long
nl	long
,	O
xl	long
;	O
nl	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
nz	pointer
=	O
name	pointer
+	O
nl	long
;	O
x	pointer
=	O
BE	O
(	O
pe	pointer
)	O
;	O
do	O
{	O
if	O
(	O
(	O
xl	long
=	O
suffixlen	function
(	O
x	pointer
)	O
)	O
)	O
{	O
if	O
(	O
xl	long
<=	O
nl	long
&&	O
MEM_SAME	O
(	O
xl	long
,	O
(	O
p	pointer
=	O
nz	pointer
-	O
xl	long
)	O
,	O
x	pointer
)	O
)	O
return	O
p	pointer
;	O
}	O
else	O
for	O
(	O
p	pointer
=	O
name	pointer
;	O
p	pointer
<	O
nz	pointer
-	O
rcsdirlen	O
;	O
p	pointer
++	O
)	O
if	O
(	O
isSLASH	function
(	O
p	pointer
[	O
rcsdirlen	O
]	O
)	O
&&	O
(	O
p	pointer
==	O
name	pointer
||	O
isSLASH	function
(	O
p	pointer
[	O
-	O
1	int
]	O
)	O
)	O
&&	O
MEM_SAME	O
(	O
rcsdirlen	O
,	O
p	pointer
,	O
rcsdir	pointer
)	O
)	O
return	O
nz	pointer
;	O
x	pointer
+=	O
xl	long
;	O
}	O
while	O
(	O
*	O
x	pointer
++	O
)	O
;	O
return	O
NULL	O
;	O
}	O
struct	O
fro	struct
*	O
rcsreadopen	function
(	O
struct	O
maybe	struct
*	O
m	pointer
)	O
{	O
return	O
fro_open	function
(	O
m	pointer
->	O
tentative	struct
.	O
string	pointer
,	O
FOPEN_RB	pointer
,	O
m	pointer
->	O
status	int
)	O
;	O
}	O
static	O
bool	bool
finopen	function
(	O
struct	O
maybe	struct
*	O
m	pointer
)	O
{	O
bool	bool
interesting	bool
,	O
preferold	bool
;	O
preferold	bool
=	O
m	pointer
->	O
bestfit	struct
.	O
string	pointer
[	O
0	int
]	O
&&	O
(	O
m	pointer
->	O
mustread	bool
||	O
0	int
<=	O
REPO	O
(	O
fd_lock	int
)	O
)	O
;	O
FLOW	O
(	O
from	pointer
)	O
=	O
(	O
m	pointer
->	O
open	pointer
)	O
(	O
m	pointer
)	O
;	O
interesting	bool
=	O
FLOW	O
(	O
from	pointer
)	O
||	O
errno	O
!=	O
ENOENT	int
;	O
if	O
(	O
interesting	bool
||	O
!	O
preferold	bool
)	O
{	O
m	pointer
->	O
eno	int
=	O
errno	O
;	O
m	pointer
->	O
bestfit	struct
=	O
m	pointer
->	O
tentative	struct
;	O
}	O
return	O
interesting	bool
;	O
}	O
static	O
bool	bool
fin2open	function
(	O
char	O
const	O
*	O
d	pointer
,	O
size_t	long
dlen	long
,	O
char	O
const	O
*	O
base	pointer
,	O
size_t	long
baselen	long
,	O
char	O
const	O
*	O
x	pointer
,	O
size_t	long
xlen	long
,	O
struct	O
maybe	struct
*	O
m	pointer
)	O
{	O
ACC	O
(	O
d	pointer
)	O
;	O
ACC	O
(	O
rcsdir	pointer
)	O
;	O
accumulate_byte	function
(	O
m	pointer
->	O
space	pointer
,	O
SLASH	char
)	O
;	O
ACC	O
(	O
base	pointer
)	O
;	O
ACC	O
(	O
x	pointer
)	O
;	O
OK	O
(	O
)	O
;	O
if	O
(	O
xlen	long
)	O
{	O
if	O
(	O
finopen	function
(	O
m	pointer
)	O
)	O
return	O
true	int
;	O
ACC	O
(	O
d	pointer
)	O
;	O
ACC	O
(	O
base	pointer
)	O
;	O
ACC	O
(	O
x	pointer
)	O
;	O
OK	O
(	O
)	O
;	O
}	O
return	O
finopen	function
(	O
m	pointer
)	O
;	O
}	O
int	O
pairnames	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
open_rcsfile_fn	function
*	O
rcsopen	pointer
,	O
bool	bool
mustread	bool
,	O
bool	bool
quiet	bool
)	O
{	O
register	O
char	O
*	O
p	pointer
,	O
*	O
arg	pointer
,	O
*	O
RCS1	pointer
;	O
char	O
const	O
*	O
base	pointer
,	O
*	O
RCSbase	pointer
,	O
*	O
x	pointer
;	O
char	O
*	O
mani_filename	pointer
;	O
bool	bool
paired	bool
;	O
size_t	long
arglen	long
,	O
dlen	long
,	O
baselen	long
,	O
xlen	long
;	O
struct	O
fro	struct
*	O
from	pointer
;	O
struct	O
maybe	struct
maybe	struct
=	O
{	O
.	O
open	pointer
=	O
rcsopen	pointer
,	O
.	O
mustread	bool
=	O
mustread	bool
,	O
.	O
status	int
=	O
&	O
REPO	O
(	O
stat	struct
)	O
}	O
;	O
REPO	O
(	O
fd_lock	int
)	O
=	O
-	O
1	int
;	O
if	O
(	O
!	O
(	O
arg	pointer
=	O
*	O
argv	pointer
)	O
)	O
return	O
0	int
;	O
if	O
(	O
*	O
arg	pointer
==	O
'-'	O
)	O
{	O
PERR	O
(	O
"%s option is ignored after filenames"	pointer
,	O
arg	pointer
)	O
;	O
return	O
0	int
;	O
}	O
base	pointer
=	O
basefilename	function
(	O
arg	pointer
)	O
;	O
paired	bool
=	O
false	int
;	O
if	O
(	O
(	O
x	pointer
=	O
rcssuffix	function
(	O
arg	pointer
)	O
)	O
)	O
{	O
RCS1	pointer
=	O
arg	pointer
;	O
RCSbase	pointer
=	O
base	pointer
;	O
baselen	long
=	O
x	pointer
-	O
base	pointer
;	O
if	O
(	O
1	int
<	O
argc	int
&&	O
!	O
rcssuffix	function
(	O
mani_filename	pointer
=	O
p	pointer
=	O
argv	pointer
[	O
1	int
]	O
)	O
&&	O
baselen	long
<=	O
(	O
arglen	long
=	O
(	O
size_t	long
)	O
strlen	function
(	O
p	pointer
)	O
)	O
&&	O
(	O
(	O
p	pointer
+=	O
arglen	long
-	O
baselen	long
)	O
==	O
mani_filename	pointer
||	O
isSLASH	function
(	O
p	pointer
[	O
-	O
1	int
]	O
)	O
)	O
&&	O
MEM_SAME	O
(	O
baselen	long
,	O
base	pointer
,	O
p	pointer
)	O
)	O
{	O
argv	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
paired	bool
=	O
true	int
;	O
}	O
else	O
{	O
mani_filename	pointer
=	O
intern	function
(	O
SINGLE	O
,	O
base	pointer
,	O
baselen	long
+	O
1	int
)	O
;	O
mani_filename	pointer
[	O
baselen	long
]	O
=	O
'\0'	O
;	O
}	O
}	O
else	O
{	O
mani_filename	pointer
=	O
arg	pointer
;	O
baselen	long
=	O
strlen	function
(	O
base	pointer
)	O
;	O
if	O
(	O
1	int
<	O
argc	int
&&	O
(	O
x	pointer
=	O
rcssuffix	function
(	O
RCS1	pointer
=	O
argv	pointer
[	O
1	int
]	O
)	O
)	O
&&	O
RCS1	pointer
+	O
baselen	long
<=	O
x	pointer
&&	O
(	O
(	O
RCSbase	pointer
=	O
x	pointer
-	O
baselen	long
)	O
==	O
RCS1	pointer
||	O
isSLASH	function
(	O
RCSbase	pointer
[	O
-	O
1	int
]	O
)	O
)	O
&&	O
MEM_SAME	O
(	O
baselen	long
,	O
base	pointer
,	O
RCSbase	pointer
)	O
)	O
{	O
argv	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
paired	bool
=	O
true	int
;	O
}	O
else	O
RCSbase	pointer
=	O
RCS1	pointer
=	O
NULL	O
;	O
}	O
MANI	O
(	O
filename	pointer
)	O
=	O
mani_filename	pointer
;	O
maybe	struct
.	O
space	pointer
=	O
make_space	function
(	O
__func__	O
)	O
;	O
if	O
(	O
RCSbase	pointer
!=	O
RCS1	pointer
)	O
{	O
maybe	struct
.	O
bestfit	struct
.	O
string	pointer
=	O
RCS1	pointer
;	O
maybe	struct
.	O
bestfit	struct
.	O
size	long
=	O
strlen	function
(	O
RCS1	pointer
)	O
;	O
maybe	struct
.	O
tentative	struct
=	O
maybe	struct
.	O
bestfit	struct
;	O
FLOW	O
(	O
from	pointer
)	O
=	O
(	O
*	O
rcsopen	pointer
)	O
(	O
&	O
maybe	struct
)	O
;	O
maybe	struct
.	O
eno	int
=	O
errno	O
;	O
}	O
else	O
{	O
maybe	struct
.	O
bestfit	struct
.	O
string	pointer
=	O
""	pointer
;	O
maybe	struct
.	O
bestfit	struct
.	O
size	long
=	O
0	int
;	O
if	O
(	O
RCS1	pointer
)	O
fin2open	function
(	O
arg	pointer
,	O
(	O
size_t	long
)	O
0	int
,	O
RCSbase	pointer
,	O
baselen	long
,	O
x	pointer
,	O
strlen	function
(	O
x	pointer
)	O
,	O
&	O
maybe	struct
)	O
;	O
else	O
{	O
dlen	long
=	O
base	pointer
-	O
arg	pointer
;	O
x	pointer
=	O
BE	O
(	O
pe	pointer
)	O
;	O
while	O
(	O
!	O
fin2open	function
(	O
arg	pointer
,	O
dlen	long
,	O
base	pointer
,	O
baselen	long
,	O
x	pointer
,	O
xlen	long
=	O
suffixlen	function
(	O
x	pointer
)	O
,	O
&	O
maybe	struct
)	O
)	O
{	O
x	pointer
+=	O
xlen	long
;	O
if	O
(	O
!	O
*	O
x	pointer
++	O
)	O
break	O
;	O
}	O
}	O
}	O
REPO	O
(	O
filename	pointer
)	O
=	O
p	pointer
=	O
intern	function
(	O
SINGLE	O
,	O
maybe	struct
.	O
bestfit	struct
.	O
string	pointer
,	O
maybe	struct
.	O
bestfit	struct
.	O
size	long
)	O
;	O
FLOW	O
(	O
erroneousp	bool
)	O
=	O
false	int
;	O
BE	O
(	O
Oerrloop	bool
)	O
=	O
false	int
;	O
if	O
(	O
(	O
from	pointer
=	O
FLOW	O
(	O
from	pointer
)	O
)	O
)	O
{	O
if	O
(	O
!	O
S_ISREG	O
(	O
maybe	struct
.	O
status	int
->	O
st_mode	int
)	O
)	O
{	O
PERR	O
(	O
"%s isn't a regular file -- ignored"	pointer
,	O
p	pointer
)	O
;	O
return	O
0	int
;	O
}	O
REPO	O
(	O
r	pointer
)	O
=	O
grok_all	function
(	O
SINGLE	O
,	O
from	pointer
)	O
;	O
FLOW	O
(	O
to	pointer
)	O
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
maybe	struct
.	O
eno	int
!=	O
ENOENT	int
||	O
mustread	bool
||	O
PROB	O
(	O
REPO	O
(	O
fd_lock	int
)	O
)	O
)	O
{	O
if	O
(	O
maybe	struct
.	O
eno	int
==	O
EEXIST	int
)	O
PERR	O
(	O
"RCS file %s is in use"	pointer
,	O
p	pointer
)	O
;	O
else	O
if	O
(	O
!	O
quiet	bool
||	O
maybe	struct
.	O
eno	int
!=	O
ENOENT	int
)	O
syserror	function
(	O
maybe	struct
.	O
eno	int
,	O
p	pointer
)	O
;	O
return	O
0	int
;	O
}	O
InitAdmin	function
(	O
)	O
;	O
}	O
;	O
if	O
(	O
paired	bool
&&	O
MANI	O
(	O
standard_output	pointer
)	O
)	O
MWARN	O
(	O
"Working file ignored due to -p option"	pointer
)	O
;	O
PREV	O
(	O
valid	bool
)	O
=	O
false	int
;	O
close_space	function
(	O
maybe	struct
.	O
space	pointer
)	O
;	O
return	O
from	pointer
?	O
1	int
:	O
-	O
1	int
;	O
}	O
static	O
size_t	long
dir_useful_len	function
(	O
char	O
const	O
*	O
d	pointer
)	O
{	O
size_t	long
dlen	long
=	O
strlen	function
(	O
d	pointer
)	O
;	O
if	O
(	O
DOUBLE_SLASH_IS_DISTINCT_ROOT	int
&&	O
dlen	long
==	O
2	int
&&	O
isSLASH	function
(	O
d	pointer
[	O
0	int
]	O
)	O
&&	O
isSLASH	function
(	O
d	pointer
[	O
1	int
]	O
)	O
)	O
--	O
dlen	long
;	O
else	O
while	O
(	O
dlen	long
&&	O
isSLASH	function
(	O
d	pointer
[	O
dlen	long
-	O
1	int
]	O
)	O
)	O
--	O
dlen	long
;	O
return	O
dlen	long
;	O
}	O
char	O
const	O
*	O
getfullRCSname	function
(	O
void	O
)	O
{	O
char	O
const	O
*	O
r	pointer
=	O
REPO	O
(	O
filename	pointer
)	O
;	O
if	O
(	O
ABSFNAME	O
(	O
r	pointer
)	O
)	O
return	O
r	pointer
;	O
else	O
{	O
char	O
*	O
cwd	pointer
;	O
char	O
*	O
rv	pointer
;	O
size_t	long
len	char
;	O
if	O
(	O
!	O
(	O
cwd	pointer
=	O
BE	O
(	O
cwd	pointer
)	O
)	O
)	O
{	O
char	O
*	O
PWD	pointer
=	O
cgetenv	function
(	O
"PWD"	pointer
)	O
;	O
struct	O
stat	struct
PWDstat	struct
,	O
dotstat	struct
;	O
if	O
(	O
!	O
(	O
(	O
cwd	pointer
=	O
PWD	pointer
)	O
&&	O
ABSFNAME	O
(	O
PWD	pointer
)	O
&&	O
!	O
PROB	O
(	O
stat	struct
(	O
PWD	pointer
,	O
&	O
PWDstat	struct
)	O
)	O
&&	O
!	O
PROB	O
(	O
stat	struct
(	O
"."	pointer
,	O
&	O
dotstat	struct
)	O
)	O
&&	O
SAME_INODE	O
(	O
PWDstat	struct
,	O
dotstat	struct
)	O
)	O
)	O
{	O
size_t	long
sz	long
=	O
64	int
;	O
while	O
(	O
!	O
(	O
cwd	pointer
=	O
alloc	function
(	O
PLEXUS	O
,	O
__func__	O
,	O
sz	long
)	O
,	O
getcwd	function
(	O
cwd	pointer
,	O
sz	long
)	O
)	O
)	O
{	O
brush_off	function
(	O
PLEXUS	O
,	O
cwd	pointer
)	O
;	O
if	O
(	O
errno	O
==	O
ERANGE	int
)	O
sz	long
<<=	O
1	int
;	O
else	O
if	O
(	O
(	O
cwd	pointer
=	O
PWD	pointer
)	O
)	O
break	O
;	O
else	O
fatal_sys	function
(	O
"getcwd"	pointer
)	O
;	O
}	O
}	O
cwd	pointer
[	O
dir_useful_len	function
(	O
cwd	pointer
)	O
]	O
=	O
'\0'	O
;	O
BE	O
(	O
cwd	pointer
)	O
=	O
cwd	pointer
;	O
}	O
for	O
(	O
;	O
r	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
isSLASH	function
(	O
r	pointer
[	O
1	int
]	O
)	O
;	O
r	pointer
+=	O
2	int
)	O
while	O
(	O
isSLASH	function
(	O
r	pointer
[	O
2	int
]	O
)	O
)	O
r	pointer
++	O
;	O
accf	function
(	O
SINGLE	O
,	O
"%s%c%s"	pointer
,	O
cwd	pointer
,	O
SLASH	char
,	O
r	pointer
)	O
;	O
rv	pointer
=	O
finish_string	function
(	O
SINGLE	O
,	O
&	O
len	char
)	O
;	O
return	O
rv	pointer
;	O
}	O
}	O
bool	bool
isSLASH	function
(	O
int	O
c	int
)	O
{	O
return	O
(	O
SLASH	char
==	O
c	int
)	O
;	O
}	O
