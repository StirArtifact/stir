struct	O
Session	struct
{	O
struct	O
Session	struct
*	O
next	pointer
;	O
char	O
sid	array
[	O
33	int
]	O
;	O
unsigned	O
int	O
rc	int
;	O
time_t	long
start	long
;	O
char	O
value_1	array
[	O
64	int
]	O
;	O
char	O
value_2	array
[	O
64	int
]	O
;	O
}	O
;	O
struct	O
Request	struct
{	O
struct	O
Session	struct
*	O
session	pointer
;	O
struct	O
MHD_PostProcessor	O
*	O
pp	pointer
;	O
const	O
char	O
*	O
post_url	pointer
;	O
}	O
;	O
static	O
struct	O
Session	struct
*	O
sessions	pointer
;	O
static	O
struct	O
Session	struct
*	O
get_session	function
(	O
struct	O
MHD_Connection	O
*	O
connection	pointer
)	O
{	O
struct	O
Session	struct
*	O
ret	pointer
;	O
const	O
char	O
*	O
cookie	pointer
;	O
cookie	pointer
=	O
MHD_lookup_connection_value	function
(	O
connection	pointer
,	O
MHD_COOKIE_KIND	int
,	O
COOKIE_NAME	pointer
)	O
;	O
if	O
(	O
cookie	pointer
!=	O
NULL	O
)	O
{	O
ret	pointer
=	O
sessions	pointer
;	O
while	O
(	O
NULL	O
!=	O
ret	pointer
)	O
{	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
cookie	pointer
,	O
ret	pointer
->	O
sid	array
)	O
)	O
break	O
;	O
ret	pointer
=	O
ret	pointer
->	O
next	pointer
;	O
}	O
if	O
(	O
NULL	O
!=	O
ret	pointer
)	O
{	O
ret	pointer
->	O
rc	int
++	O
;	O
return	O
ret	pointer
;	O
}	O
}	O
ret	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
Session	struct
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
ret	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"calloc error: %s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
snprintf	function
(	O
ret	pointer
->	O
sid	array
,	O
sizeof	O
(	O
ret	pointer
->	O
sid	array
)	O
,	O
"%X%X%X%X"	pointer
,	O
(	O
unsigned	O
int	O
)	O
rand	function
(	O
)	O
,	O
(	O
unsigned	O
int	O
)	O
rand	function
(	O
)	O
,	O
(	O
unsigned	O
int	O
)	O
rand	function
(	O
)	O
,	O
(	O
unsigned	O
int	O
)	O
rand	function
(	O
)	O
)	O
;	O
ret	pointer
->	O
rc	int
++	O
;	O
ret	pointer
->	O
start	long
=	O
time	function
(	O
NULL	O
)	O
;	O
ret	pointer
->	O
next	pointer
=	O
sessions	pointer
;	O
sessions	pointer
=	O
ret	pointer
;	O
return	O
ret	pointer
;	O
}	O
typedef	O
int	O
(	O
*	O
PageHandler	pointer
)	O
(	O
const	O
void	O
*	O
cls	pointer
,	O
const	O
char	O
*	O
mime	pointer
,	O
struct	O
Session	struct
*	O
session	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
)	O
;	O
struct	O
Page	struct
{	O
const	O
char	O
*	O
url	pointer
;	O
const	O
char	O
*	O
mime	pointer
;	O
PageHandler	pointer
handler	pointer
;	O
const	O
void	O
*	O
handler_cls	pointer
;	O
}	O
;	O
static	O
void	O
add_session_cookie	function
(	O
struct	O
Session	struct
*	O
session	pointer
,	O
struct	O
MHD_Response	O
*	O
response	pointer
)	O
{	O
char	O
cstr	array
[	O
256	int
]	O
;	O
snprintf	function
(	O
cstr	array
,	O
sizeof	O
(	O
cstr	array
)	O
,	O
"%s=%s"	pointer
,	O
COOKIE_NAME	pointer
,	O
session	pointer
->	O
sid	array
)	O
;	O
if	O
(	O
MHD_NO	int
==	O
MHD_add_response_header	function
(	O
response	pointer
,	O
MHD_HTTP_HEADER_SET_COOKIE	pointer
,	O
cstr	array
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to set session cookie header!\n"	pointer
)	O
;	O
}	O
}	O
static	O
int	O
serve_simple_form	function
(	O
const	O
void	O
*	O
cls	pointer
,	O
const	O
char	O
*	O
mime	pointer
,	O
struct	O
Session	struct
*	O
session	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
)	O
{	O
int	O
ret	pointer
;	O
const	O
char	O
*	O
form	pointer
=	O
cls	pointer
;	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
form	pointer
)	O
,	O
(	O
void	O
*	O
)	O
form	pointer
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	pointer
)	O
return	O
MHD_NO	int
;	O
add_session_cookie	function
(	O
session	pointer
,	O
response	pointer
)	O
;	O
MHD_add_response_header	function
(	O
response	pointer
,	O
MHD_HTTP_HEADER_CONTENT_ENCODING	pointer
,	O
mime	pointer
)	O
;	O
ret	pointer
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_OK	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
int	O
fill_v1_form	function
(	O
const	O
void	O
*	O
cls	pointer
,	O
const	O
char	O
*	O
mime	pointer
,	O
struct	O
Session	struct
*	O
session	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
)	O
{	O
int	O
ret	pointer
;	O
size_t	long
slen	long
;	O
char	O
*	O
reply	pointer
;	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
(	O
void	O
)	O
cls	pointer
;	O
slen	long
=	O
strlen	function
(	O
MAIN_PAGE	pointer
)	O
+	O
strlen	function
(	O
session	pointer
->	O
value_1	array
)	O
;	O
reply	pointer
=	O
malloc	function
(	O
slen	long
+	O
1	int
)	O
;	O
if	O
(	O
NULL	O
==	O
reply	pointer
)	O
return	O
MHD_NO	int
;	O
snprintf	function
(	O
reply	pointer
,	O
slen	long
+	O
1	int
,	O
MAIN_PAGE	pointer
,	O
session	pointer
->	O
value_1	array
)	O
;	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
slen	long
,	O
(	O
void	O
*	O
)	O
reply	pointer
,	O
MHD_RESPMEM_MUST_FREE	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	pointer
)	O
{	O
free	function
(	O
reply	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
add_session_cookie	function
(	O
session	pointer
,	O
response	pointer
)	O
;	O
MHD_add_response_header	function
(	O
response	pointer
,	O
MHD_HTTP_HEADER_CONTENT_ENCODING	pointer
,	O
mime	pointer
)	O
;	O
ret	pointer
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_OK	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
int	O
fill_v1_v2_form	function
(	O
const	O
void	O
*	O
cls	pointer
,	O
const	O
char	O
*	O
mime	pointer
,	O
struct	O
Session	struct
*	O
session	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
)	O
{	O
int	O
ret	pointer
;	O
char	O
*	O
reply	pointer
;	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
size_t	long
slen	long
;	O
(	O
void	O
)	O
cls	pointer
;	O
slen	long
=	O
strlen	function
(	O
SECOND_PAGE	pointer
)	O
+	O
strlen	function
(	O
session	pointer
->	O
value_1	array
)	O
+	O
strlen	function
(	O
session	pointer
->	O
value_2	array
)	O
;	O
reply	pointer
=	O
malloc	function
(	O
slen	long
+	O
1	int
)	O
;	O
if	O
(	O
NULL	O
==	O
reply	pointer
)	O
return	O
MHD_NO	int
;	O
snprintf	function
(	O
reply	pointer
,	O
slen	long
+	O
1	int
,	O
SECOND_PAGE	pointer
,	O
session	pointer
->	O
value_1	array
,	O
session	pointer
->	O
value_2	array
)	O
;	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
slen	long
,	O
(	O
void	O
*	O
)	O
reply	pointer
,	O
MHD_RESPMEM_MUST_FREE	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	pointer
)	O
{	O
free	function
(	O
reply	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
add_session_cookie	function
(	O
session	pointer
,	O
response	pointer
)	O
;	O
MHD_add_response_header	function
(	O
response	pointer
,	O
MHD_HTTP_HEADER_CONTENT_ENCODING	pointer
,	O
mime	pointer
)	O
;	O
ret	pointer
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_OK	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
int	O
not_found_page	function
(	O
const	O
void	O
*	O
cls	pointer
,	O
const	O
char	O
*	O
mime	pointer
,	O
struct	O
Session	struct
*	O
session	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
)	O
{	O
int	O
ret	pointer
;	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
session	pointer
;	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
NOT_FOUND_ERROR	pointer
)	O
,	O
(	O
void	O
*	O
)	O
NOT_FOUND_ERROR	pointer
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	pointer
)	O
return	O
MHD_NO	int
;	O
ret	pointer
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_NOT_FOUND	int
,	O
response	pointer
)	O
;	O
MHD_add_response_header	function
(	O
response	pointer
,	O
MHD_HTTP_HEADER_CONTENT_ENCODING	pointer
,	O
mime	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
struct	O
Page	struct
pages	array
[	O
]	O
=	O
{	O
{	O
"/"	pointer
,	O
"text/html"	pointer
,	O
&	O
fill_v1_form	function
,	O
NULL	O
}	O
,	O
{	O
"/2"	pointer
,	O
"text/html"	pointer
,	O
&	O
fill_v1_v2_form	function
,	O
NULL	O
}	O
,	O
{	O
"/S"	pointer
,	O
"text/html"	pointer
,	O
&	O
serve_simple_form	function
,	O
SUBMIT_PAGE	pointer
}	O
,	O
{	O
"/F"	pointer
,	O
"text/html"	pointer
,	O
&	O
serve_simple_form	function
,	O
LAST_PAGE	pointer
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
&	O
not_found_page	function
,	O
NULL	O
}	O
}	O
;	O
static	O
int	O
post_iterator	function
(	O
void	O
*	O
cls	pointer
,	O
enum	O
MHD_ValueKind	enum
kind	enum
,	O
const	O
char	O
*	O
key	pointer
,	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
content_type	pointer
,	O
const	O
char	O
*	O
transfer_encoding	pointer
,	O
const	O
char	O
*	O
data	pointer
,	O
uint64_t	long
off	long
,	O
size_t	long
size	long
)	O
{	O
struct	O
Request	struct
*	O
request	pointer
=	O
cls	pointer
;	O
struct	O
Session	struct
*	O
session	pointer
=	O
request	pointer
->	O
session	pointer
;	O
(	O
void	O
)	O
kind	enum
;	O
(	O
void	O
)	O
filename	pointer
;	O
(	O
void	O
)	O
content_type	pointer
;	O
(	O
void	O
)	O
transfer_encoding	pointer
;	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
"DONE"	pointer
,	O
key	pointer
)	O
)	O
{	O
fprintf	function
(	O
stdout	pointer
,	O
"Session `%s' submitted `%s', `%s'\n"	pointer
,	O
session	pointer
->	O
sid	array
,	O
session	pointer
->	O
value_1	array
,	O
session	pointer
->	O
value_2	array
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
"v1"	pointer
,	O
key	pointer
)	O
)	O
{	O
if	O
(	O
size	long
+	O
off	long
>=	O
sizeof	O
(	O
session	pointer
->	O
value_1	array
)	O
)	O
size	long
=	O
sizeof	O
(	O
session	pointer
->	O
value_1	array
)	O
-	O
off	long
-	O
1	int
;	O
memcpy	function
(	O
&	O
session	pointer
->	O
value_1	array
[	O
off	long
]	O
,	O
data	pointer
,	O
size	long
)	O
;	O
session	pointer
->	O
value_1	array
[	O
size	long
+	O
off	long
]	O
=	O
'\0'	O
;	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
"v2"	pointer
,	O
key	pointer
)	O
)	O
{	O
if	O
(	O
size	long
+	O
off	long
>=	O
sizeof	O
(	O
session	pointer
->	O
value_2	array
)	O
)	O
size	long
=	O
sizeof	O
(	O
session	pointer
->	O
value_2	array
)	O
-	O
off	long
-	O
1	int
;	O
memcpy	function
(	O
&	O
session	pointer
->	O
value_2	array
[	O
off	long
]	O
,	O
data	pointer
,	O
size	long
)	O
;	O
session	pointer
->	O
value_2	array
[	O
size	long
+	O
off	long
]	O
=	O
'\0'	O
;	O
return	O
MHD_YES	int
;	O
}	O
fprintf	function
(	O
stderr	pointer
,	O
"Unsupported form value `%s'\n"	pointer
,	O
key	pointer
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
static	O
int	O
create_response	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	long
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
struct	O
Request	struct
*	O
request	pointer
;	O
struct	O
Session	struct
*	O
session	pointer
;	O
int	O
ret	pointer
;	O
unsigned	O
int	O
i	int
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
version	pointer
;	O
request	pointer
=	O
*	O
ptr	pointer
;	O
if	O
(	O
NULL	O
==	O
request	pointer
)	O
{	O
request	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
struct	O
Request	struct
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
request	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"calloc error: %s\n"	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
*	O
ptr	pointer
=	O
request	pointer
;	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
method	pointer
,	O
MHD_HTTP_METHOD_POST	pointer
)	O
)	O
{	O
request	pointer
->	O
pp	pointer
=	O
MHD_create_post_processor	function
(	O
connection	pointer
,	O
1024	int
,	O
&	O
post_iterator	function
,	O
request	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
request	pointer
->	O
pp	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to setup post processor for `%s'\n"	pointer
,	O
url	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
}	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
NULL	O
==	O
request	pointer
->	O
session	pointer
)	O
{	O
request	pointer
->	O
session	pointer
=	O
get_session	function
(	O
connection	pointer
)	O
;	O
if	O
(	O
NULL	O
==	O
request	pointer
->	O
session	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to setup session for `%s'\n"	pointer
,	O
url	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
}	O
session	pointer
=	O
request	pointer
->	O
session	pointer
;	O
session	pointer
->	O
start	long
=	O
time	function
(	O
NULL	O
)	O
;	O
if	O
(	O
0	int
==	O
strcmp	function
(	O
method	pointer
,	O
MHD_HTTP_METHOD_POST	pointer
)	O
)	O
{	O
MHD_post_process	function
(	O
request	pointer
->	O
pp	pointer
,	O
upload_data	pointer
,	O
*	O
upload_data_size	pointer
)	O
;	O
if	O
(	O
0	int
!=	O
*	O
upload_data_size	pointer
)	O
{	O
*	O
upload_data_size	pointer
=	O
0	int
;	O
return	O
MHD_YES	int
;	O
}	O
MHD_destroy_post_processor	function
(	O
request	pointer
->	O
pp	pointer
)	O
;	O
request	pointer
->	O
pp	pointer
=	O
NULL	O
;	O
method	pointer
=	O
MHD_HTTP_METHOD_GET	pointer
;	O
if	O
(	O
NULL	O
!=	O
request	pointer
->	O
post_url	pointer
)	O
url	pointer
=	O
request	pointer
->	O
post_url	pointer
;	O
}	O
if	O
(	O
(	O
0	int
==	O
strcmp	function
(	O
method	pointer
,	O
MHD_HTTP_METHOD_GET	pointer
)	O
)	O
||	O
(	O
0	int
==	O
strcmp	function
(	O
method	pointer
,	O
MHD_HTTP_METHOD_HEAD	pointer
)	O
)	O
)	O
{	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
pages	array
[	O
i	int
]	O
.	O
url	pointer
!=	O
NULL	O
)	O
&&	O
(	O
0	int
!=	O
strcmp	function
(	O
pages	array
[	O
i	int
]	O
.	O
url	pointer
,	O
url	pointer
)	O
)	O
)	O
i	int
++	O
;	O
ret	pointer
=	O
pages	array
[	O
i	int
]	O
.	O
handler	pointer
(	O
pages	array
[	O
i	int
]	O
.	O
handler_cls	pointer
,	O
pages	array
[	O
i	int
]	O
.	O
mime	pointer
,	O
session	pointer
,	O
connection	pointer
)	O
;	O
if	O
(	O
ret	pointer
!=	O
MHD_YES	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to create page for `%s'\n"	pointer
,	O
url	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
METHOD_ERROR	pointer
)	O
,	O
(	O
void	O
*	O
)	O
METHOD_ERROR	pointer
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
ret	pointer
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_NOT_ACCEPTABLE	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
return	O
ret	pointer
;	O
}	O
static	O
void	O
request_completed_callback	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
void	O
*	O
*	O
con_cls	pointer
,	O
enum	O
MHD_RequestTerminationCode	enum
toe	enum
)	O
{	O
struct	O
Request	struct
*	O
request	pointer
=	O
*	O
con_cls	pointer
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
connection	pointer
;	O
(	O
void	O
)	O
toe	enum
;	O
if	O
(	O
NULL	O
==	O
request	pointer
)	O
return	O
;	O
if	O
(	O
NULL	O
!=	O
request	pointer
->	O
session	pointer
)	O
request	pointer
->	O
session	pointer
->	O
rc	int
--	O
;	O
if	O
(	O
NULL	O
!=	O
request	pointer
->	O
pp	pointer
)	O
MHD_destroy_post_processor	function
(	O
request	pointer
->	O
pp	pointer
)	O
;	O
free	function
(	O
request	pointer
)	O
;	O
}	O
static	O
void	O
expire_sessions	function
(	O
)	O
{	O
struct	O
Session	struct
*	O
pos	long
;	O
struct	O
Session	struct
*	O
prev	pointer
;	O
struct	O
Session	struct
*	O
next	pointer
;	O
time_t	long
now	long
;	O
now	long
=	O
time	function
(	O
NULL	O
)	O
;	O
prev	pointer
=	O
NULL	O
;	O
pos	long
=	O
sessions	pointer
;	O
while	O
(	O
NULL	O
!=	O
pos	long
)	O
{	O
next	pointer
=	O
pos	long
->	O
next	pointer
;	O
if	O
(	O
now	long
-	O
pos	long
->	O
start	long
>	O
60	int
*	O
60	int
)	O
{	O
if	O
(	O
NULL	O
==	O
prev	pointer
)	O
sessions	pointer
=	O
pos	long
->	O
next	pointer
;	O
else	O
prev	pointer
->	O
next	pointer
=	O
next	pointer
;	O
free	function
(	O
pos	long
)	O
;	O
}	O
else	O
prev	pointer
=	O
pos	long
;	O
pos	long
=	O
next	pointer
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	pointer
;	O
struct	O
timeval	struct
tv	struct
;	O
struct	O
timeval	struct
*	O
tvp	pointer
;	O
fd_set	struct
rs	struct
;	O
fd_set	struct
ws	struct
;	O
fd_set	struct
es	struct
;	O
MHD_socket	int
max	long
;	O
MHD_UNSIGNED_LONG_LONG	O
mhd_timeout	long long
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	function
(	O
"%s PORT\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
srand	function
(	O
(	O
unsigned	O
int	O
)	O
time	function
(	O
NULL	O
)	O
)	O
;	O
d	pointer
=	O
MHD_start_daemon	function
(	O
MHD_USE_ERROR_LOG	int
,	O
atoi	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
create_response	function
,	O
NULL	O
,	O
MHD_OPTION_CONNECTION_TIMEOUT	int
,	O
(	O
unsigned	O
int	O
)	O
15	int
,	O
MHD_OPTION_NOTIFY_COMPLETED	int
,	O
&	O
request_completed_callback	function
,	O
NULL	O
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
NULL	O
==	O
d	pointer
)	O
return	O
1	int
;	O
while	O
(	O
1	int
)	O
{	O
expire_sessions	function
(	O
)	O
;	O
max	long
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
rs	struct
)	O
;	O
FD_ZERO	O
(	O
&	O
ws	struct
)	O
;	O
FD_ZERO	O
(	O
&	O
es	struct
)	O
;	O
if	O
(	O
MHD_YES	int
!=	O
MHD_get_fdset	function
(	O
d	pointer
,	O
&	O
rs	struct
,	O
&	O
ws	struct
,	O
&	O
es	struct
,	O
&	O
max	long
)	O
)	O
break	O
;	O
if	O
(	O
MHD_get_timeout	function
(	O
d	pointer
,	O
&	O
mhd_timeout	long long
)	O
==	O
MHD_YES	int
)	O
{	O
tv	struct
.	O
tv_sec	long
=	O
mhd_timeout	long long
/	O
1000	int
;	O
tv	struct
.	O
tv_usec	long
=	O
(	O
mhd_timeout	long long
-	O
(	O
tv	struct
.	O
tv_sec	long
*	O
1000	int
)	O
)	O
*	O
1000	int
;	O
tvp	pointer
=	O
&	O
tv	struct
;	O
}	O
else	O
tvp	pointer
=	O
NULL	O
;	O
if	O
(	O
-	O
1	int
==	O
select	function
(	O
max	long
+	O
1	int
,	O
&	O
rs	struct
,	O
&	O
ws	struct
,	O
&	O
es	struct
,	O
tvp	pointer
)	O
)	O
{	O
if	O
(	O
EINTR	int
!=	O
errno	O
)	O
abort	function
(	O
)	O
;	O
}	O
MHD_run	function
(	O
d	pointer
)	O
;	O
}	O
MHD_stop_daemon	function
(	O
d	pointer
)	O
;	O
return	O
0	int
;	O
}	O
