struct	O
append_stat	struct
{	O
size_t	long
size	long
;	O
size_t	long
lines	long
;	O
}	O
;	O
static	O
int	O
append_to_mailbox	function
(	O
mu_url_t	pointer
url	pointer
,	O
msgset_t	struct
*	O
msglist	pointer
,	O
int	O
mark	int
,	O
struct	O
append_stat	struct
*	O
totals	pointer
)	O
{	O
int	O
status	int
;	O
mu_mailbox_t	pointer
mbx	pointer
;	O
msgset_t	struct
*	O
mp	pointer
;	O
size_t	long
size	long
;	O
mu_message_t	pointer
msg	pointer
;	O
mu_url_t	pointer
url_copy	pointer
;	O
mu_url_dup	function
(	O
url	pointer
,	O
&	O
url_copy	pointer
)	O
;	O
if	O
(	O
(	O
status	int
=	O
mu_mailbox_create_from_url	function
(	O
&	O
mbx	pointer
,	O
url_copy	pointer
)	O
)	O
!=	O
0	int
)	O
{	O
mu_url_destroy	function
(	O
&	O
url_copy	pointer
)	O
;	O
mu_error	function
(	O
_	O
(	O
"Cannot create mailbox %s: %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_mailbox_attach_ticket	function
(	O
mbx	pointer
)	O
;	O
if	O
(	O
(	O
status	int
=	O
mu_mailbox_open	function
(	O
mbx	pointer
,	O
MU_STREAM_CREAT	int
|	O
MU_STREAM_APPEND	int
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Cannot open mailbox %s: %s"	pointer
)	O
,	O
mu_url_to_string	function
(	O
url	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
mbx	pointer
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
mp	pointer
=	O
msglist	pointer
;	O
mp	pointer
;	O
mp	pointer
=	O
mp	pointer
->	O
next	pointer
)	O
{	O
status	int
=	O
util_get_message	function
(	O
mbox	pointer
,	O
mp	pointer
->	O
msg_part	pointer
[	O
0	int
]	O
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
mu_mailbox_append_message	function
(	O
mbx	pointer
,	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Cannot append message: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
break	O
;	O
}	O
mu_message_size	function
(	O
msg	pointer
,	O
&	O
size	long
)	O
;	O
totals	pointer
->	O
size	long
+=	O
size	long
;	O
mu_message_lines	function
(	O
msg	pointer
,	O
&	O
size	long
)	O
;	O
totals	pointer
->	O
lines	long
+=	O
size	long
;	O
if	O
(	O
mark	int
)	O
{	O
mu_attribute_t	pointer
attr	pointer
;	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
mu_attribute_set_userflag	function
(	O
attr	pointer
,	O
MAIL_ATTRIBUTE_SAVED	int
)	O
;	O
}	O
}	O
mu_mailbox_close	function
(	O
mbx	pointer
)	O
;	O
mu_mailbox_destroy	function
(	O
&	O
mbx	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
append_to_file	function
(	O
char	O
const	O
*	O
filename	pointer
,	O
msgset_t	struct
*	O
msglist	pointer
,	O
int	O
mark	int
,	O
struct	O
append_stat	struct
*	O
totals	pointer
)	O
{	O
int	O
status	int
;	O
msgset_t	struct
*	O
mp	pointer
;	O
mu_stream_t	pointer
ostr	pointer
,	O
mstr	pointer
;	O
mu_off_t	long
size	long
;	O
size_t	long
lines	long
;	O
mu_message_t	pointer
msg	pointer
;	O
mu_locker_t	pointer
locker	pointer
;	O
status	int
=	O
mu_file_stream_create	function
(	O
&	O
ostr	pointer
,	O
filename	pointer
,	O
MU_STREAM_CREAT	int
|	O
MU_STREAM_APPEND	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Cannot open output file %s: %s"	pointer
)	O
,	O
filename	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
status	int
=	O
mu_locker_create	function
(	O
&	O
locker	pointer
,	O
filename	pointer
,	O
MU_LOCKER_KERNEL	O
|	O
MU_LOCKER_RETRY	int
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Cannot create locker %s: %s"	pointer
)	O
,	O
filename	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
mu_stream_unref	function
(	O
ostr	pointer
)	O
;	O
return	O
1	int
;	O
}	O
mu_locker_lock_mode	function
(	O
locker	pointer
,	O
mu_lck_exc	int
)	O
;	O
status	int
=	O
mu_locker_lock	function
(	O
locker	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Cannot lock %s: %s"	pointer
)	O
,	O
filename	pointer
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
mu_locker_destroy	function
(	O
&	O
locker	pointer
)	O
;	O
mu_stream_unref	function
(	O
ostr	pointer
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
mp	pointer
=	O
msglist	pointer
;	O
mp	pointer
;	O
mp	pointer
=	O
mp	pointer
->	O
next	pointer
)	O
{	O
mu_envelope_t	pointer
env	pointer
;	O
const	O
char	O
*	O
s	pointer
,	O
*	O
d	pointer
;	O
int	O
n	pointer
;	O
status	int
=	O
util_get_message	function
(	O
mbox	pointer
,	O
mp	pointer
->	O
msg_part	pointer
[	O
0	int
]	O
,	O
&	O
msg	pointer
)	O
;	O
if	O
(	O
status	int
)	O
break	O
;	O
status	int
=	O
mu_message_get_envelope	function
(	O
msg	pointer
,	O
&	O
env	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Cannot get envelope: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
break	O
;	O
}	O
status	int
=	O
mu_envelope_sget_sender	function
(	O
env	pointer
,	O
&	O
s	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Cannot get envelope sender: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
break	O
;	O
}	O
status	int
=	O
mu_envelope_sget_date	function
(	O
env	pointer
,	O
&	O
d	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Cannot get envelope date: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
break	O
;	O
}	O
status	int
=	O
mu_stream_printf	function
(	O
ostr	pointer
,	O
"From %s %s\n%n"	pointer
,	O
s	pointer
,	O
d	pointer
,	O
&	O
n	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Write error: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
break	O
;	O
}	O
totals	pointer
->	O
lines	long
++	O
;	O
totals	pointer
->	O
size	long
+=	O
n	pointer
;	O
status	int
=	O
mu_message_get_streamref	function
(	O
msg	pointer
,	O
&	O
mstr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Cannot get message: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
break	O
;	O
}	O
status	int
=	O
mu_stream_copy	function
(	O
ostr	pointer
,	O
mstr	pointer
,	O
0	int
,	O
&	O
size	long
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"Cannot append message: %s"	pointer
)	O
,	O
mu_strerror	function
(	O
status	int
)	O
)	O
;	O
break	O
;	O
}	O
mu_stream_unref	function
(	O
mstr	pointer
)	O
;	O
mu_stream_write	function
(	O
ostr	pointer
,	O
"\n"	pointer
,	O
1	int
,	O
NULL	O
)	O
;	O
totals	pointer
->	O
size	long
+=	O
size	long
+	O
1	int
;	O
mu_message_lines	function
(	O
msg	pointer
,	O
&	O
lines	long
)	O
;	O
totals	pointer
->	O
lines	long
+=	O
lines	long
+	O
1	int
;	O
if	O
(	O
mark	int
)	O
{	O
mu_attribute_t	pointer
attr	pointer
;	O
mu_message_get_attribute	function
(	O
msg	pointer
,	O
&	O
attr	pointer
)	O
;	O
mu_attribute_set_userflag	function
(	O
attr	pointer
,	O
MAIL_ATTRIBUTE_SAVED	int
)	O
;	O
}	O
}	O
mu_stream_close	function
(	O
ostr	pointer
)	O
;	O
mu_stream_unref	function
(	O
ostr	pointer
)	O
;	O
mu_locker_unlock	function
(	O
locker	pointer
)	O
;	O
mu_locker_destroy	function
(	O
&	O
locker	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mail_copy0	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
,	O
int	O
mark	int
)	O
{	O
mu_url_t	pointer
url	pointer
;	O
msgset_t	struct
*	O
msglist	pointer
=	O
NULL	O
;	O
struct	O
append_stat	struct
totals	pointer
=	O
{	O
0	int
,	O
0	int
}	O
;	O
int	O
rc	int
;	O
char	O
*	O
filename	pointer
;	O
if	O
(	O
mu_isupper	O
(	O
argv	pointer
[	O
0	int
]	O
[	O
0	int
]	O
)	O
)	O
{	O
if	O
(	O
msgset_parse	function
(	O
argc	int
,	O
argv	pointer
,	O
MSG_NODELETED	int
,	O
&	O
msglist	pointer
)	O
)	O
return	O
1	int
;	O
filename	pointer
=	O
util_outfolder_name	function
(	O
util_get_sender	function
(	O
msglist	pointer
->	O
msg_part	pointer
[	O
0	int
]	O
,	O
1	int
)	O
)	O
;	O
}	O
else	O
{	O
filename	pointer
=	O
argc	int
>=	O
2	int
?	O
argv	pointer
[	O
--	O
argc	int
]	O
:	O
getenv	function
(	O
"MBOX"	pointer
)	O
;	O
if	O
(	O
msgset_parse	function
(	O
argc	int
,	O
argv	pointer
,	O
MSG_NODELETED	int
,	O
&	O
msglist	pointer
)	O
)	O
return	O
1	int
;	O
}	O
if	O
(	O
mail_expand_name	function
(	O
filename	pointer
,	O
&	O
url	pointer
)	O
)	O
return	O
1	int
;	O
filename	pointer
=	O
(	O
char	O
*	O
)	O
mu_url_to_string	function
(	O
url	pointer
)	O
;	O
if	O
(	O
mu_url_is_scheme	function
(	O
url	pointer
,	O
"file"	pointer
)	O
||	O
mu_url_is_scheme	function
(	O
url	pointer
,	O
"mbox"	pointer
)	O
)	O
rc	int
=	O
append_to_file	function
(	O
filename	pointer
,	O
msglist	pointer
,	O
mark	int
,	O
&	O
totals	pointer
)	O
;	O
else	O
rc	int
=	O
append_to_mailbox	function
(	O
url	pointer
,	O
msglist	pointer
,	O
mark	int
,	O
&	O
totals	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
mu_printf	function
(	O
"\"%s\" %3lu/%-5lu\n"	pointer
,	O
filename	pointer
,	O
(	O
unsigned	O
long	O
)	O
totals	pointer
.	O
lines	long
,	O
(	O
unsigned	O
long	O
)	O
totals	pointer
.	O
size	long
)	O
;	O
mu_url_destroy	function
(	O
&	O
url	pointer
)	O
;	O
msgset_free	function
(	O
msglist	pointer
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mail_copy	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
return	O
mail_copy0	function
(	O
argc	int
,	O
argv	pointer
,	O
0	int
)	O
;	O
}	O
