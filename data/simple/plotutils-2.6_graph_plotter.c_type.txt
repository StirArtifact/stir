typedef	O
unsigned	O
int	O
outcode	int
;	O
enum	O
{	O
TOP	int
=	O
0x1	int
,	O
BOTTOM	int
=	O
0x2	int
,	O
RIGHT	int
=	O
0x4	int
,	O
LEFT	int
=	O
0x8	int
}	O
;	O
enum	O
{	O
ACCEPTED	int
=	O
0x1	int
,	O
CLIPPED_FIRST	int
=	O
0x2	int
,	O
CLIPPED_SECOND	int
=	O
0x4	int
}	O
;	O
typedef	O
struct	O
{	O
double	O
input_min	double
,	O
input_max	double
;	O
double	O
input_range	double
;	O
bool	enum
reverse	enum
;	O
double	O
squeezed_min	double
,	O
squeezed_max	double
;	O
double	O
squeezed_range	double
;	O
double	O
output_min	double
,	O
output_max	double
;	O
double	O
output_range	double
;	O
}	O
Transform	struct
;	O
typedef	O
struct	O
{	O
const	O
char	O
*	O
font_name	pointer
;	O
double	O
font_size	double
;	O
const	O
char	O
*	O
label	pointer
;	O
int	O
type	pointer
;	O
double	O
tick_spacing	double
;	O
int	O
min_tick_count	int
,	O
max_tick_count	int
;	O
bool	enum
have_lin_subticks	enum
;	O
double	O
lin_subtick_spacing	double
;	O
int	O
min_lin_subtick_count	int
,	O
max_lin_subtick_count	int
;	O
bool	enum
have_normal_subsubticks	enum
;	O
bool	enum
user_specified_subsubticks	enum
;	O
double	O
subsubtick_spacing	double
;	O
double	O
other_axis_loc	double
;	O
double	O
alt_other_axis_loc	double
;	O
bool	enum
switch_axis_end	int
;	O
bool	enum
omit_ticks	enum
;	O
double	O
max_label_width	double
;	O
int	O
labelled_ticks	int
;	O
}	O
Axis	struct
;	O
struct	O
MultigrapherStruct	struct
{	O
plPlotter	struct
*	O
plotter	pointer
;	O
const	O
char	O
*	O
output_format	pointer
;	O
const	O
char	O
*	O
bg_color	pointer
;	O
bool	enum
save_screen	enum
;	O
Transform	struct
x_trans	struct
,	O
y_trans	struct
;	O
Axis	struct
x_axis	struct
,	O
y_axis	struct
;	O
grid_type	enum
grid_spec	enum
;	O
double	O
blankout_fraction	double
;	O
bool	enum
no_rotate_y_label	enum
;	O
double	O
tick_size	double
;	O
double	O
subtick_size	double
;	O
double	O
frame_line_width	double
;	O
double	O
half_line_width	double
;	O
const	O
char	O
*	O
frame_color	pointer
;	O
const	O
char	O
*	O
title	pointer
;	O
const	O
char	O
*	O
title_font_name	pointer
;	O
double	O
title_font_size	double
;	O
int	O
clip_mode	int
;	O
bool	enum
first_point_of_polyline	enum
;	O
double	O
oldpoint_x	double
,	O
oldpoint_y	double
;	O
int	O
symbol	int
;	O
int	O
linemode	int
;	O
}	O
;	O
static	O
int	O
clip_line	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
double	O
*	O
x0_p	pointer
,	O
double	O
*	O
y0_p	pointer
,	O
double	O
*	O
x1_p	pointer
,	O
double	O
*	O
y1_p	pointer
)	O
;	O
static	O
int	O
spacing_type	function
(	O
double	O
spacing	double
)	O
;	O
static	O
outcode	int
compute_outcode	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
double	O
x	int
,	O
double	O
y	int
,	O
bool	enum
tolerant	enum
)	O
;	O
static	O
void	O
plot_abscissa_log_subsubtick	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
double	O
xval	double
)	O
;	O
static	O
void	O
plot_errorbar	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
const	O
Point	struct
*	O
p	pointer
)	O
;	O
static	O
void	O
plot_ordinate_log_subsubtick	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
double	O
xval	double
)	O
;	O
static	O
void	O
prepare_axis	function
(	O
Axis	struct
*	O
axisp	pointer
,	O
Transform	struct
*	O
trans	pointer
,	O
double	O
min	double
,	O
double	O
max	double
,	O
double	O
spacing	double
,	O
const	O
char	O
*	O
font_name	pointer
,	O
double	O
font_size	double
,	O
const	O
char	O
*	O
label	pointer
,	O
double	O
subsubtick_spacing	double
,	O
bool	enum
user_specified_subsubticks	enum
,	O
bool	enum
round_to_next_tick	int
,	O
bool	enum
log_axis	int
,	O
bool	enum
reverse_axis	enum
,	O
bool	enum
switch_axis_end	int
,	O
bool	enum
omit_ticks	enum
)	O
;	O
static	O
void	O
print_tick_label	function
(	O
char	O
*	O
labelbuf	pointer
,	O
const	O
Axis	struct
*	O
axis	pointer
,	O
const	O
Transform	struct
*	O
transform	pointer
,	O
double	O
val	double
)	O
;	O
static	O
void	O
scale1	function
(	O
double	O
min	double
,	O
double	O
max	double
,	O
double	O
*	O
tick_spacing	double
,	O
int	O
*	O
tick_spacing_type	pointer
)	O
;	O
static	O
void	O
set_line_style	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
int	O
style	int
,	O
bool	enum
use_color	enum
)	O
;	O
static	O
void	O
transpose_portmanteau	function
(	O
int	O
*	O
val	double
)	O
;	O
static	O
void	O
print_tick_label	function
(	O
char	O
*	O
labelbuf	pointer
,	O
const	O
Axis	struct
*	O
axis	pointer
,	O
const	O
Transform	struct
*	O
transform	pointer
,	O
double	O
val	double
)	O
{	O
int	O
prec	int
;	O
char	O
*	O
eloc	pointer
,	O
*	O
ptr	pointer
;	O
char	O
labelbuf_tmp	array
[	O
64	int
]	O
,	O
incrbuf	array
[	O
64	int
]	O
;	O
double	O
spacing	double
;	O
bool	enum
big_exponents	enum
;	O
double	O
min	double
,	O
max	double
;	O
min	double
=	O
(	O
axis	pointer
->	O
type	pointer
==	O
A_LOG10	int
?	O
pow	function
(	O
10.0	int
,	O
transform	pointer
->	O
input_min	double
)	O
:	O
transform	pointer
->	O
input_min	double
)	O
;	O
max	double
=	O
(	O
axis	pointer
->	O
type	pointer
==	O
A_LOG10	int
?	O
pow	function
(	O
10.0	int
,	O
transform	pointer
->	O
input_max	double
)	O
:	O
transform	pointer
->	O
input_max	double
)	O
;	O
big_exponents	enum
=	O
(	O
(	O
(	O
min	double
!=	O
0.0	int
&&	O
fabs	function
(	O
log10	function
(	O
fabs	function
(	O
min	double
)	O
)	O
)	O
>=	O
4.0	int
)	O
||	O
(	O
max	double
!=	O
0.0	int
&&	O
fabs	function
(	O
log10	function
(	O
fabs	function
(	O
max	double
)	O
)	O
)	O
>=	O
4.0	int
)	O
)	O
?	O
true	int
:	O
false	int
)	O
;	O
if	O
(	O
big_exponents	enum
)	O
{	O
char	O
*	O
src	pointer
=	O
labelbuf_tmp	array
,	O
*	O
dst	pointer
=	O
labelbuf	pointer
;	O
int	O
exponent	int
;	O
char	O
floatbuf	array
[	O
64	int
]	O
;	O
char	O
*	O
fptr	pointer
=	O
floatbuf	array
;	O
double	O
prefactor	double
;	O
sprintf	function
(	O
labelbuf_tmp	array
,	O
"%e"	pointer
,	O
val	double
)	O
;	O
if	O
(	O
(	O
eloc	pointer
=	O
strchr	function
(	O
labelbuf_tmp	array
,	O
(	O
int	O
)	O
'e'	O
)	O
)	O
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
axis	pointer
->	O
type	pointer
==	O
A_LOG10	int
&&	O
!	O
axis	pointer
->	O
user_specified_subsubticks	enum
)	O
{	O
sscanf	function
(	O
++	O
eloc	pointer
,	O
"%d"	pointer
,	O
&	O
exponent	int
)	O
;	O
sprintf	function
(	O
dst	pointer
,	O
"10\\sp%d\\ep"	pointer
,	O
exponent	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
val	double
==	O
0.0	int
)	O
{	O
*	O
dst	pointer
++	O
=	O
'0'	O
;	O
*	O
dst	pointer
=	O
'\0'	O
;	O
return	O
;	O
}	O
while	O
(	O
src	pointer
<	O
eloc	pointer
)	O
*	O
fptr	pointer
++	O
=	O
*	O
src	pointer
++	O
;	O
*	O
fptr	pointer
=	O
'\0'	O
;	O
sscanf	function
(	O
floatbuf	array
,	O
"%lf"	pointer
,	O
&	O
prefactor	double
)	O
;	O
sscanf	function
(	O
++	O
src	pointer
,	O
"%d"	pointer
,	O
&	O
exponent	int
)	O
;	O
spacing	double
=	O
(	O
axis	pointer
->	O
type	pointer
==	O
A_LINEAR	int
?	O
axis	pointer
->	O
tick_spacing	double
:	O
axis	pointer
->	O
subsubtick_spacing	double
)	O
;	O
sprintf	function
(	O
incrbuf	array
,	O
"%f"	pointer
,	O
spacing	double
/	O
pow	function
(	O
10.0	int
,	O
(	O
double	O
)	O
exponent	int
)	O
)	O
;	O
ptr	pointer
=	O
strchr	function
(	O
incrbuf	array
,	O
(	O
int	O
)	O
'.'	O
)	O
;	O
prec	int
=	O
0	int
;	O
if	O
(	O
ptr	pointer
!=	O
NULL	O
)	O
{	O
int	O
count	int
=	O
0	int
;	O
while	O
(	O
*	O
(	O
++	O
ptr	pointer
)	O
)	O
{	O
count	int
++	O
;	O
if	O
(	O
*	O
ptr	pointer
!=	O
'0'	O
)	O
prec	int
=	O
count	int
;	O
}	O
}	O
sprintf	function
(	O
dst	pointer
,	O
"%.*f\\r6\\mu10\\sp%d\\ep"	pointer
,	O
prec	int
,	O
prefactor	double
,	O
exponent	int
)	O
;	O
return	O
;	O
}	O
else	O
{	O
if	O
(	O
axis	pointer
->	O
type	pointer
==	O
A_LOG10	int
&&	O
!	O
axis	pointer
->	O
user_specified_subsubticks	enum
)	O
{	O
sprintf	function
(	O
labelbuf	pointer
,	O
"%.9g"	pointer
,	O
val	double
)	O
;	O
return	O
;	O
}	O
spacing	double
=	O
(	O
axis	pointer
->	O
type	pointer
==	O
A_LINEAR	int
?	O
axis	pointer
->	O
tick_spacing	double
:	O
axis	pointer
->	O
subsubtick_spacing	double
)	O
;	O
sprintf	function
(	O
incrbuf	array
,	O
"%.9f"	pointer
,	O
spacing	double
)	O
;	O
ptr	pointer
=	O
strchr	function
(	O
incrbuf	array
,	O
(	O
int	O
)	O
'.'	O
)	O
;	O
prec	int
=	O
0	int
;	O
if	O
(	O
ptr	pointer
!=	O
NULL	O
)	O
{	O
int	O
count	int
=	O
0	int
;	O
while	O
(	O
*	O
(	O
++	O
ptr	pointer
)	O
)	O
{	O
count	int
++	O
;	O
if	O
(	O
*	O
ptr	pointer
!=	O
'0'	O
)	O
prec	int
=	O
count	int
;	O
}	O
}	O
sprintf	function
(	O
labelbuf	pointer
,	O
"%.*f"	pointer
,	O
prec	int
,	O
val	double
)	O
;	O
return	O
;	O
}	O
}	O
static	O
void	O
scale1	function
(	O
double	O
min	double
,	O
double	O
max	double
,	O
double	O
*	O
tick_spacing	double
,	O
int	O
*	O
tick_spacing_type	pointer
)	O
{	O
int	O
k	int
;	O
double	O
nal	double
;	O
double	O
a	double
,	O
b	double
;	O
static	O
const	O
double	O
vint	array
[	O
]	O
=	O
{	O
1.0	int
,	O
2.0	int
,	O
5.0	int
,	O
10.0	int
}	O
;	O
static	O
const	O
double	O
sqr	array
[	O
]	O
=	O
{	O
M_SQRT2	int
,	O
3.16228	int
,	O
7.07107	int
}	O
;	O
a	double
=	O
(	O
max	double
-	O
min	double
)	O
/	O
TRIAL_NUMBER_OF_TICK_INTERVALS	int
;	O
a	double
*=	O
(	O
max	double
>	O
min	double
)	O
?	O
1.0	int
:	O
-	O
1.0	int
;	O
if	O
(	O
a	double
<=	O
0.0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the trial inter-tick spacing '%g' is bad\n"	pointer
,	O
progname	pointer
,	O
a	double
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
nal	double
=	O
floor	function
(	O
log10	function
(	O
a	double
)	O
)	O
;	O
b	double
=	O
a	double
*	O
pow	function
(	O
10.0	int
,	O
-	O
nal	double
)	O
;	O
k	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
b	double
<	O
sqr	array
[	O
k	int
]	O
)	O
break	O
;	O
k	int
++	O
;	O
}	O
while	O
(	O
k	int
<	O
3	int
)	O
;	O
*	O
tick_spacing	double
=	O
(	O
max	double
>	O
min	double
?	O
1.0	int
:	O
-	O
1.0	int
)	O
*	O
vint	array
[	O
k	int
]	O
*	O
pow	function
(	O
10.0	int
,	O
nal	double
)	O
;	O
*	O
tick_spacing_type	pointer
=	O
(	O
k	int
==	O
3	int
?	O
0	int
:	O
k	int
)	O
;	O
return	O
;	O
}	O
static	O
int	O
spacing_type	function
(	O
double	O
incr	double
)	O
{	O
int	O
i	int
;	O
int	O
i_tenpower	int
=	O
(	O
int	O
)	O
(	O
floor	function
(	O
log10	function
(	O
incr	double
)	O
)	O
)	O
;	O
double	O
tenpower	double
=	O
1.0	int
;	O
bool	enum
neg_power	enum
=	O
false	int
;	O
if	O
(	O
i_tenpower	int
<	O
0	int
)	O
{	O
neg_power	enum
=	O
true	int
;	O
i_tenpower	int
=	O
-	O
i_tenpower	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
i_tenpower	int
;	O
i	int
++	O
)	O
tenpower	double
*=	O
10	int
;	O
if	O
(	O
neg_power	enum
)	O
tenpower	double
=	O
1.0	int
/	O
tenpower	double
;	O
if	O
(	O
NEAR_EQUALITY	O
(	O
incr	double
,	O
tenpower	double
,	O
tenpower	double
)	O
)	O
return	O
S_ONE	int
;	O
else	O
if	O
(	O
NEAR_EQUALITY	O
(	O
incr	double
,	O
2	int
*	O
tenpower	double
,	O
tenpower	double
)	O
)	O
return	O
S_TWO	int
;	O
else	O
if	O
(	O
NEAR_EQUALITY	O
(	O
incr	double
,	O
2.5	int
*	O
tenpower	double
,	O
tenpower	double
)	O
)	O
return	O
S_TWO_FIVE	int
;	O
else	O
if	O
(	O
NEAR_EQUALITY	O
(	O
incr	double
,	O
5	int
*	O
tenpower	double
,	O
tenpower	double
)	O
)	O
return	O
S_FIVE	int
;	O
else	O
return	O
S_UNKNOWN	O
;	O
}	O
static	O
void	O
prepare_axis	function
(	O
Axis	struct
*	O
axisp	pointer
,	O
Transform	struct
*	O
trans	pointer
,	O
double	O
min	double
,	O
double	O
max	double
,	O
double	O
spacing	double
,	O
const	O
char	O
*	O
font_name	pointer
,	O
double	O
font_size	double
,	O
const	O
char	O
*	O
label	pointer
,	O
double	O
subsubtick_spacing	double
,	O
bool	enum
user_specified_subsubticks	enum
,	O
bool	enum
round_to_next_tick	int
,	O
bool	enum
log_axis	int
,	O
bool	enum
reverse_axis	enum
,	O
bool	enum
switch_axis_end	int
,	O
bool	enum
omit_ticks	enum
)	O
{	O
double	O
range	double
;	O
int	O
tick_spacing_type	pointer
=	O
0	int
;	O
double	O
tick_spacing	double
,	O
lin_subtick_spacing	double
;	O
int	O
min_tick_count	int
,	O
max_tick_count	int
;	O
int	O
min_lin_subtick_count	int
,	O
max_lin_subtick_count	int
;	O
bool	enum
have_lin_subticks	enum
;	O
if	O
(	O
min	double
>	O
max	double
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: min > max for an axis, which is not allowed\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
min	double
==	O
max	double
)	O
{	O
max	double
=	O
floor	function
(	O
max	double
+	O
1.0	int
)	O
;	O
min	double
=	O
ceil	function
(	O
min	double
-	O
1.0	int
)	O
;	O
}	O
if	O
(	O
log_axis	int
)	O
{	O
scale1	function
(	O
min	double
,	O
max	double
,	O
&	O
tick_spacing	double
,	O
&	O
tick_spacing_type	pointer
)	O
;	O
if	O
(	O
tick_spacing	double
<=	O
1.0	int
)	O
{	O
tick_spacing	double
=	O
1.0	int
;	O
tick_spacing_type	pointer
=	O
S_ONE	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
spacing	double
==	O
0.0	int
)	O
scale1	function
(	O
min	double
,	O
max	double
,	O
&	O
tick_spacing	double
,	O
&	O
tick_spacing_type	pointer
)	O
;	O
else	O
{	O
tick_spacing	double
=	O
spacing	double
;	O
tick_spacing_type	pointer
=	O
spacing_type	function
(	O
spacing	double
)	O
;	O
}	O
}	O
range	double
=	O
max	double
-	O
min	double
;	O
if	O
(	O
round_to_next_tick	int
)	O
{	O
if	O
(	O
user_specified_subsubticks	enum
)	O
{	O
double	O
true_min	double
=	O
pow	function
(	O
10.0	int
,	O
min	double
)	O
,	O
true_max	double
=	O
pow	function
(	O
10.0	int
,	O
max	double
)	O
;	O
double	O
true_range	double
=	O
true_max	double
-	O
true_min	double
;	O
int	O
min_count	int
,	O
max_count	int
;	O
min_count	int
=	O
(	O
int	O
)	O
(	O
floor	function
(	O
(	O
true_min	double
+	O
FUZZ	int
*	O
true_range	double
)	O
/	O
subsubtick_spacing	double
)	O
)	O
;	O
max_count	int
=	O
(	O
int	O
)	O
(	O
ceil	function
(	O
(	O
true_max	double
-	O
FUZZ	int
*	O
true_range	double
)	O
/	O
subsubtick_spacing	double
)	O
)	O
;	O
if	O
(	O
min_count	int
>	O
0	int
)	O
min	double
=	O
log10	function
(	O
min_count	int
*	O
subsubtick_spacing	double
)	O
;	O
max	double
=	O
log10	function
(	O
max_count	int
*	O
subsubtick_spacing	double
)	O
;	O
range	double
=	O
max	double
-	O
min	double
;	O
min_tick_count	int
=	O
max_tick_count	int
=	O
0	int
;	O
}	O
else	O
{	O
min_tick_count	int
=	O
(	O
int	O
)	O
(	O
floor	function
(	O
(	O
min	double
+	O
FUZZ	int
*	O
range	double
)	O
/	O
tick_spacing	double
)	O
)	O
;	O
max_tick_count	int
=	O
(	O
int	O
)	O
(	O
ceil	function
(	O
(	O
max	double
-	O
FUZZ	int
*	O
range	double
)	O
/	O
tick_spacing	double
)	O
)	O
;	O
min	double
=	O
tick_spacing	double
*	O
min_tick_count	int
;	O
max	double
=	O
tick_spacing	double
*	O
max_tick_count	int
;	O
range	double
=	O
max	double
-	O
min	double
;	O
}	O
}	O
else	O
{	O
min_tick_count	int
=	O
(	O
int	O
)	O
(	O
ceil	function
(	O
(	O
min	double
-	O
FUZZ	int
*	O
range	double
)	O
/	O
tick_spacing	double
)	O
)	O
;	O
max_tick_count	int
=	O
(	O
int	O
)	O
(	O
floor	function
(	O
(	O
max	double
+	O
FUZZ	int
*	O
range	double
)	O
/	O
tick_spacing	double
)	O
)	O
;	O
}	O
switch	O
(	O
tick_spacing_type	pointer
)	O
{	O
case	O
S_FIVE	int
:	O
case	O
S_TWO_FIVE	int
:	O
lin_subtick_spacing	double
=	O
tick_spacing	double
/	O
5	int
;	O
break	O
;	O
case	O
S_TWO	int
:	O
lin_subtick_spacing	double
=	O
tick_spacing	double
/	O
2	int
;	O
break	O
;	O
case	O
S_ONE	int
:	O
lin_subtick_spacing	double
=	O
tick_spacing	double
/	O
10	int
;	O
min_lin_subtick_count	int
=	O
(	O
int	O
)	O
(	O
ceil	function
(	O
(	O
min	double
-	O
FUZZ	int
*	O
range	double
)	O
/	O
lin_subtick_spacing	double
)	O
)	O
;	O
max_lin_subtick_count	int
=	O
(	O
int	O
)	O
(	O
floor	function
(	O
(	O
max	double
+	O
FUZZ	int
*	O
range	double
)	O
/	O
lin_subtick_spacing	double
)	O
)	O
;	O
if	O
(	O
max_lin_subtick_count	int
-	O
min_lin_subtick_count	int
>	O
MAX_NUM_SUBTICKS	int
)	O
{	O
lin_subtick_spacing	double
=	O
tick_spacing	double
/	O
5	int
;	O
min_lin_subtick_count	int
=	O
(	O
int	O
)	O
(	O
ceil	function
(	O
(	O
min	double
-	O
FUZZ	int
*	O
range	double
)	O
/	O
lin_subtick_spacing	double
)	O
)	O
;	O
max_lin_subtick_count	int
=	O
(	O
int	O
)	O
(	O
floor	function
(	O
(	O
max	double
+	O
FUZZ	int
*	O
range	double
)	O
/	O
lin_subtick_spacing	double
)	O
)	O
;	O
if	O
(	O
max_lin_subtick_count	int
-	O
min_lin_subtick_count	int
>	O
MAX_NUM_SUBTICKS	int
)	O
lin_subtick_spacing	double
=	O
tick_spacing	double
/	O
2	int
;	O
}	O
break	O
;	O
default	O
:	O
lin_subtick_spacing	double
=	O
tick_spacing	double
;	O
break	O
;	O
}	O
if	O
(	O
log_axis	int
&&	O
lin_subtick_spacing	double
<=	O
1.0	int
)	O
lin_subtick_spacing	double
=	O
1.0	int
;	O
min_lin_subtick_count	int
=	O
(	O
int	O
)	O
(	O
ceil	function
(	O
(	O
min	double
-	O
FUZZ	int
*	O
range	double
)	O
/	O
lin_subtick_spacing	double
)	O
)	O
;	O
max_lin_subtick_count	int
=	O
(	O
int	O
)	O
(	O
floor	function
(	O
(	O
max	double
+	O
FUZZ	int
*	O
range	double
)	O
/	O
lin_subtick_spacing	double
)	O
)	O
;	O
have_lin_subticks	enum
=	O
(	O
(	O
tick_spacing_type	pointer
!=	O
S_UNKNOWN	O
&&	O
(	O
max_lin_subtick_count	int
-	O
min_lin_subtick_count	int
)	O
<=	O
MAX_NUM_SUBTICKS	int
)	O
?	O
true	int
:	O
false	int
)	O
;	O
trans	pointer
->	O
input_min	double
=	O
min	double
;	O
trans	pointer
->	O
input_max	double
=	O
max	double
;	O
trans	pointer
->	O
input_range	double
=	O
range	double
;	O
trans	pointer
->	O
reverse	enum
=	O
reverse_axis	enum
;	O
axisp	pointer
->	O
switch_axis_end	int
=	O
switch_axis_end	int
;	O
axisp	pointer
->	O
omit_ticks	enum
=	O
omit_ticks	enum
;	O
axisp	pointer
->	O
label	pointer
=	O
label	pointer
;	O
axisp	pointer
->	O
font_name	pointer
=	O
font_name	pointer
;	O
axisp	pointer
->	O
font_size	double
=	O
font_size	double
;	O
axisp	pointer
->	O
max_label_width	double
=	O
0.0	int
;	O
axisp	pointer
->	O
type	pointer
=	O
log_axis	int
?	O
A_LOG10	int
:	O
A_LINEAR	int
;	O
axisp	pointer
->	O
tick_spacing	double
=	O
tick_spacing	double
;	O
axisp	pointer
->	O
min_tick_count	int
=	O
min_tick_count	int
;	O
axisp	pointer
->	O
max_tick_count	int
=	O
max_tick_count	int
;	O
axisp	pointer
->	O
have_lin_subticks	enum
=	O
have_lin_subticks	enum
;	O
axisp	pointer
->	O
lin_subtick_spacing	double
=	O
lin_subtick_spacing	double
;	O
axisp	pointer
->	O
min_lin_subtick_count	int
=	O
min_lin_subtick_count	int
;	O
axisp	pointer
->	O
max_lin_subtick_count	int
=	O
max_lin_subtick_count	int
;	O
axisp	pointer
->	O
user_specified_subsubticks	enum
=	O
user_specified_subsubticks	enum
;	O
axisp	pointer
->	O
subsubtick_spacing	double
=	O
subsubtick_spacing	double
;	O
axisp	pointer
->	O
labelled_ticks	int
=	O
0	int
;	O
if	O
(	O
log_axis	int
)	O
{	O
if	O
(	O
max	double
-	O
min	double
<=	O
MAX_DECADES_WITH_LOG_SUBSUBTICKS	int
+	O
FUZZ	int
)	O
axisp	pointer
->	O
have_normal_subsubticks	enum
=	O
true	int
;	O
else	O
axisp	pointer
->	O
have_normal_subsubticks	enum
=	O
false	int
;	O
}	O
else	O
axisp	pointer
->	O
have_normal_subsubticks	enum
=	O
false	int
;	O
}	O
Multigrapher	struct
*	O
new_multigrapher	function
(	O
const	O
char	O
*	O
output_format	pointer
,	O
const	O
char	O
*	O
bg_color	pointer
,	O
const	O
char	O
*	O
bitmap_size	pointer
,	O
const	O
char	O
*	O
emulate_color	pointer
,	O
const	O
char	O
*	O
max_line_length	pointer
,	O
const	O
char	O
*	O
meta_portable	pointer
,	O
const	O
char	O
*	O
page_size	pointer
,	O
const	O
char	O
*	O
rotation_angle	pointer
,	O
bool	enum
save_screen	enum
)	O
{	O
plPlotterParams	struct
*	O
plotter_params	pointer
;	O
plPlotter	struct
*	O
plotter	pointer
;	O
Multigrapher	struct
*	O
multigrapher	pointer
;	O
multigrapher	pointer
=	O
(	O
Multigrapher	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
Multigrapher	struct
)	O
)	O
;	O
plotter_params	pointer
=	O
pl_newplparams	function
(	O
)	O
;	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"BG_COLOR"	pointer
,	O
(	O
void	O
*	O
)	O
bg_color	pointer
)	O
;	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"BITMAPSIZE"	pointer
,	O
(	O
void	O
*	O
)	O
bitmap_size	pointer
)	O
;	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"EMULATE_COLOR"	pointer
,	O
(	O
void	O
*	O
)	O
emulate_color	pointer
)	O
;	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"MAX_LINE_LENGTH"	pointer
,	O
(	O
void	O
*	O
)	O
max_line_length	pointer
)	O
;	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"META_PORTABLE"	pointer
,	O
(	O
void	O
*	O
)	O
meta_portable	pointer
)	O
;	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"PAGESIZE"	pointer
,	O
(	O
void	O
*	O
)	O
page_size	pointer
)	O
;	O
pl_setplparam	function
(	O
plotter_params	pointer
,	O
"ROTATION"	pointer
,	O
(	O
void	O
*	O
)	O
rotation_angle	pointer
)	O
;	O
plotter	pointer
=	O
pl_newpl_r	function
(	O
output_format	pointer
,	O
NULL	O
,	O
stdout	pointer
,	O
stderr	pointer
,	O
plotter_params	pointer
)	O
;	O
if	O
(	O
plotter	pointer
==	O
(	O
plPlotter	struct
*	O
)	O
NULL	O
)	O
return	O
(	O
Multigrapher	struct
*	O
)	O
NULL	O
;	O
pl_deleteplparams	function
(	O
plotter_params	pointer
)	O
;	O
multigrapher	pointer
->	O
plotter	pointer
=	O
plotter	pointer
;	O
if	O
(	O
pl_openpl_r	function
(	O
plotter	pointer
)	O
<	O
0	int
)	O
return	O
(	O
Multigrapher	struct
*	O
)	O
NULL	O
;	O
multigrapher	pointer
->	O
bg_color	pointer
=	O
bg_color	pointer
;	O
if	O
(	O
!	O
save_screen	enum
||	O
bg_color	pointer
)	O
pl_erase_r	function
(	O
plotter	pointer
)	O
;	O
pl_fspace_r	function
(	O
plotter	pointer
,	O
0.0	int
,	O
0.0	int
,	O
(	O
double	O
)	O
PLOT_SIZE	int
,	O
(	O
double	O
)	O
PLOT_SIZE	int
)	O
;	O
return	O
multigrapher	pointer
;	O
}	O
int	O
delete_multigrapher	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
)	O
{	O
int	O
retval	int
;	O
retval	int
=	O
pl_closepl_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
if	O
(	O
retval	int
>=	O
0	int
)	O
retval	int
=	O
pl_deletepl_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
free	function
(	O
multigrapher	pointer
)	O
;	O
return	O
retval	int
;	O
}	O
void	O
begin_graph	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
double	O
scale	double
,	O
double	O
trans_x	double
,	O
double	O
trans_y	double
)	O
{	O
pl_savestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
pl_fconcat_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
scale	double
,	O
0.0	int
,	O
0.0	int
,	O
scale	double
,	O
trans_x	double
*	O
PLOT_SIZE	int
,	O
trans_y	double
*	O
PLOT_SIZE	int
)	O
;	O
}	O
void	O
end_graph	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
)	O
{	O
pl_restorestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
}	O
void	O
set_graph_parameters	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
double	O
frame_line_width	double
,	O
const	O
char	O
*	O
frame_color	pointer
,	O
const	O
char	O
*	O
title	pointer
,	O
const	O
char	O
*	O
title_font_name	pointer
,	O
double	O
title_font_size	double
,	O
double	O
tick_size	double
,	O
grid_type	enum
grid_spec	enum
,	O
double	O
x_min	double
,	O
double	O
x_max	double
,	O
double	O
x_spacing	double
,	O
double	O
y_min	double
,	O
double	O
y_max	double
,	O
double	O
y_spacing	double
,	O
bool	enum
spec_x_spacing	enum
,	O
bool	enum
spec_y_spacing	enum
,	O
double	O
width	double
,	O
double	O
height	double
,	O
double	O
up	double
,	O
double	O
right	double
,	O
const	O
char	O
*	O
x_font_name	pointer
,	O
double	O
x_font_size	double
,	O
const	O
char	O
*	O
x_label	pointer
,	O
const	O
char	O
*	O
y_font_name	pointer
,	O
double	O
y_font_size	double
,	O
const	O
char	O
*	O
y_label	pointer
,	O
bool	enum
no_rotate_y_label	enum
,	O
int	O
log_axis	int
,	O
int	O
round_to_next_tick	int
,	O
int	O
switch_axis_end	int
,	O
int	O
omit_ticks	enum
,	O
int	O
clip_mode	int
,	O
double	O
blankout_fraction	double
,	O
bool	enum
transpose_axes	enum
)	O
{	O
double	O
x_subsubtick_spacing	double
=	O
0.0	int
,	O
y_subsubtick_spacing	double
=	O
0.0	int
;	O
int	O
reverse_axis	enum
=	O
0	int
;	O
int	O
user_specified_subsubticks	enum
=	O
0	int
;	O
if	O
(	O
log_axis	int
&	O
X_AXIS	int
)	O
{	O
if	O
(	O
spec_x_spacing	enum
)	O
{	O
spec_x_spacing	enum
=	O
false	int
;	O
user_specified_subsubticks	enum
|=	O
X_AXIS	int
;	O
x_subsubtick_spacing	double
=	O
x_spacing	double
;	O
}	O
}	O
if	O
(	O
log_axis	int
&	O
Y_AXIS	int
)	O
{	O
if	O
(	O
spec_y_spacing	enum
)	O
{	O
spec_y_spacing	enum
=	O
false	int
;	O
user_specified_subsubticks	enum
|=	O
Y_AXIS	int
;	O
y_subsubtick_spacing	double
=	O
y_spacing	double
;	O
}	O
}	O
if	O
(	O
x_max	double
<	O
x_min	double
)	O
{	O
reverse_axis	enum
|=	O
X_AXIS	int
;	O
{	O
double	O
temp	double
;	O
temp	double
=	O
x_min	double
;	O
x_min	double
=	O
x_max	double
;	O
x_max	double
=	O
temp	double
;	O
}	O
}	O
if	O
(	O
x_max	double
==	O
x_min	double
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: identical upper and lower x limits are separated\n"	pointer
,	O
progname	pointer
)	O
;	O
x_max	double
+=	O
1.0	int
;	O
x_min	double
-=	O
1.0	int
;	O
}	O
if	O
(	O
y_max	double
<	O
y_min	double
)	O
{	O
reverse_axis	enum
|=	O
Y_AXIS	int
;	O
{	O
double	O
temp	double
;	O
temp	double
=	O
y_min	double
;	O
y_min	double
=	O
y_max	double
;	O
y_max	double
=	O
temp	double
;	O
}	O
}	O
if	O
(	O
y_max	double
==	O
y_min	double
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: identical upper and lower y limits are separated\n"	pointer
,	O
progname	pointer
)	O
;	O
y_max	double
+=	O
1.0	int
;	O
y_min	double
-=	O
1.0	int
;	O
}	O
if	O
(	O
spec_x_spacing	enum
)	O
{	O
if	O
(	O
x_spacing	double
==	O
0.0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the spacing between ticks on an axis is zero\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
x_spacing	double
=	O
fabs	function
(	O
x_spacing	double
)	O
;	O
}	O
if	O
(	O
spec_y_spacing	enum
)	O
{	O
if	O
(	O
y_spacing	double
==	O
0.0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: error: the spacing between ticks on an axis is zero\n"	pointer
,	O
progname	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
y_spacing	double
=	O
fabs	function
(	O
y_spacing	double
)	O
;	O
}	O
if	O
(	O
transpose_axes	enum
)	O
{	O
const	O
char	O
*	O
temp_string	pointer
;	O
double	O
temp_double	double
;	O
transpose_portmanteau	function
(	O
&	O
log_axis	int
)	O
;	O
transpose_portmanteau	function
(	O
&	O
round_to_next_tick	int
)	O
;	O
transpose_portmanteau	function
(	O
&	O
switch_axis_end	int
)	O
;	O
transpose_portmanteau	function
(	O
&	O
omit_ticks	enum
)	O
;	O
transpose_portmanteau	function
(	O
&	O
reverse_axis	enum
)	O
;	O
transpose_portmanteau	function
(	O
&	O
user_specified_subsubticks	enum
)	O
;	O
temp_string	pointer
=	O
x_label	pointer
;	O
x_label	pointer
=	O
y_label	pointer
;	O
y_label	pointer
=	O
temp_string	pointer
;	O
temp_double	double
=	O
x_min	double
;	O
x_min	double
=	O
y_min	double
;	O
y_min	double
=	O
temp_double	double
;	O
temp_double	double
=	O
x_max	double
;	O
x_max	double
=	O
y_max	double
;	O
y_max	double
=	O
temp_double	double
;	O
temp_double	double
=	O
x_spacing	double
;	O
x_spacing	double
=	O
y_spacing	double
;	O
y_spacing	double
=	O
temp_double	double
;	O
temp_double	double
=	O
x_subsubtick_spacing	double
;	O
x_subsubtick_spacing	double
=	O
y_subsubtick_spacing	double
;	O
y_subsubtick_spacing	double
=	O
temp_double	double
;	O
}	O
multigrapher	pointer
->	O
frame_line_width	double
=	O
frame_line_width	double
;	O
multigrapher	pointer
->	O
frame_color	pointer
=	O
frame_color	pointer
;	O
multigrapher	pointer
->	O
no_rotate_y_label	enum
=	O
no_rotate_y_label	enum
;	O
multigrapher	pointer
->	O
blankout_fraction	double
=	O
blankout_fraction	double
;	O
if	O
(	O
title	pointer
!=	O
NULL	O
)	O
multigrapher	pointer
->	O
title	pointer
=	O
xstrdup	function
(	O
title	pointer
)	O
;	O
else	O
multigrapher	pointer
->	O
title	pointer
=	O
NULL	O
;	O
if	O
(	O
title_font_name	pointer
!=	O
NULL	O
)	O
multigrapher	pointer
->	O
title_font_name	pointer
=	O
xstrdup	function
(	O
title_font_name	pointer
)	O
;	O
else	O
multigrapher	pointer
->	O
title_font_name	pointer
=	O
NULL	O
;	O
multigrapher	pointer
->	O
title_font_size	double
=	O
title_font_size	double
;	O
multigrapher	pointer
->	O
tick_size	double
=	O
tick_size	double
;	O
multigrapher	pointer
->	O
subtick_size	double
=	O
RELATIVE_SUBTICK_SIZE	int
*	O
tick_size	double
;	O
multigrapher	pointer
->	O
grid_spec	enum
=	O
grid_spec	enum
;	O
multigrapher	pointer
->	O
clip_mode	int
=	O
clip_mode	int
;	O
prepare_axis	function
(	O
&	O
multigrapher	pointer
->	O
x_axis	struct
,	O
&	O
multigrapher	pointer
->	O
x_trans	struct
,	O
x_min	double
,	O
x_max	double
,	O
x_spacing	double
,	O
x_font_name	pointer
,	O
x_font_size	double
,	O
x_label	pointer
,	O
x_subsubtick_spacing	double
,	O
(	O
bool	enum
)	O
(	O
user_specified_subsubticks	enum
&	O
X_AXIS	int
)	O
,	O
(	O
bool	enum
)	O
(	O
round_to_next_tick	int
&	O
X_AXIS	int
)	O
,	O
(	O
bool	enum
)	O
(	O
log_axis	int
&	O
X_AXIS	int
)	O
,	O
(	O
bool	enum
)	O
(	O
reverse_axis	enum
&	O
X_AXIS	int
)	O
,	O
(	O
bool	enum
)	O
(	O
switch_axis_end	int
&	O
X_AXIS	int
)	O
,	O
(	O
bool	enum
)	O
(	O
omit_ticks	enum
&	O
X_AXIS	int
)	O
)	O
;	O
prepare_axis	function
(	O
&	O
multigrapher	pointer
->	O
y_axis	struct
,	O
&	O
multigrapher	pointer
->	O
y_trans	struct
,	O
y_min	double
,	O
y_max	double
,	O
y_spacing	double
,	O
y_font_name	pointer
,	O
y_font_size	double
,	O
y_label	pointer
,	O
y_subsubtick_spacing	double
,	O
(	O
bool	enum
)	O
(	O
user_specified_subsubticks	enum
&	O
Y_AXIS	int
)	O
,	O
(	O
bool	enum
)	O
(	O
round_to_next_tick	int
&	O
Y_AXIS	int
)	O
,	O
(	O
bool	enum
)	O
(	O
log_axis	int
&	O
Y_AXIS	int
)	O
,	O
(	O
bool	enum
)	O
(	O
reverse_axis	enum
&	O
Y_AXIS	int
)	O
,	O
(	O
bool	enum
)	O
(	O
switch_axis_end	int
&	O
Y_AXIS	int
)	O
,	O
(	O
bool	enum
)	O
(	O
omit_ticks	enum
&	O
Y_AXIS	int
)	O
)	O
;	O
multigrapher	pointer
->	O
x_trans	struct
.	O
squeezed_min	double
=	O
right	double
;	O
multigrapher	pointer
->	O
x_trans	struct
.	O
squeezed_max	double
=	O
right	double
+	O
width	double
;	O
multigrapher	pointer
->	O
x_trans	struct
.	O
squeezed_range	double
=	O
width	double
;	O
multigrapher	pointer
->	O
y_trans	struct
.	O
squeezed_min	double
=	O
up	double
;	O
multigrapher	pointer
->	O
y_trans	struct
.	O
squeezed_max	double
=	O
up	double
+	O
height	double
;	O
multigrapher	pointer
->	O
y_trans	struct
.	O
squeezed_range	double
=	O
height	double
;	O
multigrapher	pointer
->	O
x_trans	struct
.	O
output_min	double
=	O
0.0	int
;	O
multigrapher	pointer
->	O
x_trans	struct
.	O
output_max	double
=	O
(	O
double	O
)	O
PLOT_SIZE	int
;	O
multigrapher	pointer
->	O
x_trans	struct
.	O
output_range	double
=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
output_max	double
-	O
multigrapher	pointer
->	O
x_trans	struct
.	O
output_min	double
;	O
multigrapher	pointer
->	O
x_trans	struct
.	O
output_min	double
=	O
0.0	int
;	O
multigrapher	pointer
->	O
y_trans	struct
.	O
output_max	double
=	O
(	O
double	O
)	O
PLOT_SIZE	int
;	O
multigrapher	pointer
->	O
y_trans	struct
.	O
output_range	double
=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
output_max	double
-	O
multigrapher	pointer
->	O
y_trans	struct
.	O
output_min	double
;	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
AXES_AT_ORIGIN	int
)	O
{	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
;	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
;	O
}	O
else	O
{	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
=	O
(	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
*	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
<=	O
0.0	int
)	O
?	O
0.0	int
:	O
(	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
:	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
)	O
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
=	O
(	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
*	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
<=	O
0.0	int
)	O
?	O
0.0	int
:	O
(	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
:	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
)	O
;	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
=	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
=	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
;	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
=	O
(	O
(	O
(	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
<	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
-	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
)	O
)	O
?	O
true	int
:	O
false	int
)	O
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
=	O
(	O
(	O
(	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
<	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
-	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
)	O
)	O
?	O
true	int
:	O
false	int
)	O
;	O
}	O
if	O
(	O
frame_line_width	double
<	O
0.0	int
||	O
pl_havecap_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"WIDE_LINES"	pointer
)	O
==	O
0	int
)	O
multigrapher	pointer
->	O
half_line_width	double
=	O
0.0	int
;	O
else	O
multigrapher	pointer
->	O
half_line_width	double
=	O
0.5	int
*	O
frame_line_width	double
*	O
multigrapher	pointer
->	O
x_trans	struct
.	O
output_range	double
;	O
multigrapher	pointer
->	O
first_point_of_polyline	enum
=	O
true	int
;	O
multigrapher	pointer
->	O
oldpoint_x	double
=	O
0.0	int
;	O
multigrapher	pointer
->	O
oldpoint_y	double
=	O
0.0	int
;	O
}	O
void	O
draw_frame_of_graph	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
bool	enum
draw_canvas	enum
)	O
{	O
static	O
bool	enum
tick_warning_printed	enum
=	O
false	int
;	O
pl_savestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
if	O
(	O
multigrapher	pointer
->	O
frame_color	pointer
)	O
pl_pencolorname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
multigrapher	pointer
->	O
frame_color	pointer
)	O
;	O
pl_flinewidth_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
multigrapher	pointer
->	O
frame_line_width	double
*	O
(	O
double	O
)	O
PLOT_SIZE	int
)	O
;	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"solid"	pointer
)	O
;	O
pl_filltype_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
0	int
)	O
;	O
if	O
(	O
draw_canvas	enum
)	O
{	O
pl_savestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
if	O
(	O
pl_havecap_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"SETTABLE_BACKGROUND"	pointer
)	O
!=	O
0	int
&&	O
multigrapher	pointer
->	O
bg_color	pointer
)	O
pl_colorname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
multigrapher	pointer
->	O
bg_color	pointer
)	O
;	O
else	O
pl_colorname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"white"	pointer
)	O
;	O
pl_filltype_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
1	int
)	O
;	O
pl_fbox_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XP	O
(	O
XSQ	O
(	O
0.5	int
-	O
0.5	int
*	O
multigrapher	pointer
->	O
blankout_fraction	double
)	O
)	O
,	O
YP	O
(	O
YSQ	O
(	O
0.5	int
-	O
0.5	int
*	O
multigrapher	pointer
->	O
blankout_fraction	double
)	O
)	O
,	O
XP	O
(	O
XSQ	O
(	O
0.5	int
+	O
0.5	int
*	O
multigrapher	pointer
->	O
blankout_fraction	double
)	O
)	O
,	O
YP	O
(	O
YSQ	O
(	O
0.5	int
+	O
0.5	int
*	O
multigrapher	pointer
->	O
blankout_fraction	double
)	O
)	O
)	O
;	O
pl_restorestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
}	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
NO_AXES	int
&&	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
&&	O
multigrapher	pointer
->	O
title	pointer
!=	O
NULL	O
&&	O
*	O
multigrapher	pointer
->	O
title	pointer
!=	O
'\0'	O
)	O
{	O
double	O
title_font_size	double
;	O
pl_fontname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
multigrapher	pointer
->	O
title_font_name	pointer
)	O
;	O
title_font_size	double
=	O
pl_ffontsize_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
SS	O
(	O
multigrapher	pointer
->	O
title_font_size	double
)	O
)	O
;	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XP	O
(	O
XSQ	O
(	O
0.5	int
)	O
)	O
,	O
YP	O
(	O
YSQ	O
(	O
1.0	int
+	O
(	O
(	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
==	O
AXES_AND_BOX	int
||	O
multigrapher	pointer
->	O
grid_spec	enum
==	O
AXES	int
)	O
&&	O
(	O
multigrapher	pointer
->	O
tick_size	double
<=	O
0.0	int
)	O
?	O
1.0	int
:	O
0.5	int
)	O
*	O
fabs	function
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
)	O
)	O
)	O
+	O
0.65	int
*	O
title_font_size	double
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'c'	O
,	O
'b'	O
,	O
multigrapher	pointer
->	O
title	pointer
)	O
;	O
}	O
switch	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
)	O
{	O
case	O
AXES_AND_BOX_AND_GRID	int
:	O
case	O
AXES_AND_BOX	int
:	O
pl_fbox_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XP	O
(	O
XSQ	O
(	O
0.0	int
)	O
)	O
,	O
YP	O
(	O
YSQ	O
(	O
0.0	int
)	O
)	O
,	O
XP	O
(	O
XSQ	O
(	O
1.0	int
)	O
)	O
,	O
YP	O
(	O
YSQ	O
(	O
1.0	int
)	O
)	O
)	O
;	O
break	O
;	O
case	O
AXES	int
:	O
{	O
double	O
xstart	double
,	O
ystart	double
,	O
xmid	double
,	O
ymid	double
,	O
xend	double
,	O
yend	double
;	O
xstart	double
=	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
?	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
-	O
multigrapher	pointer
->	O
half_line_width	double
:	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
;	O
ystart	double
=	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
?	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
:	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
)	O
;	O
xmid	double
=	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
?	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
:	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
)	O
;	O
ymid	double
=	O
ystart	double
;	O
xend	double
=	O
xmid	double
;	O
yend	double
=	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
?	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
-	O
multigrapher	pointer
->	O
half_line_width	double
:	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
;	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
xstart	double
,	O
ystart	double
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
xmid	double
,	O
ymid	double
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
xend	double
,	O
yend	double
)	O
;	O
}	O
break	O
;	O
case	O
AXES_AT_ORIGIN	int
:	O
{	O
double	O
xpos	double
,	O
ypos	double
;	O
xpos	double
=	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
?	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
:	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
)	O
;	O
ypos	double
=	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
?	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
:	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
)	O
;	O
pl_fline_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
xpos	double
,	O
YP	O
(	O
YSQ	O
(	O
0.0	int
)	O
)	O
-	O
multigrapher	pointer
->	O
half_line_width	double
,	O
xpos	double
,	O
YP	O
(	O
YSQ	O
(	O
1.0	int
)	O
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
;	O
pl_fline_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XP	O
(	O
XSQ	O
(	O
0.0	int
)	O
)	O
-	O
multigrapher	pointer
->	O
half_line_width	double
,	O
ypos	double
,	O
XP	O
(	O
XSQ	O
(	O
1.0	int
)	O
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
,	O
ypos	double
)	O
;	O
}	O
break	O
;	O
case	O
NO_AXES	int
:	O
default	O
:	O
break	O
;	O
}	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
NO_AXES	int
&&	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
omit_ticks	enum
&&	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
user_specified_subsubticks	enum
)	O
{	O
int	O
i	int
;	O
double	O
xval	double
,	O
xrange	double
=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
;	O
char	O
labelbuf	pointer
[	O
2048	int
]	O
;	O
pl_fontname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
multigrapher	pointer
->	O
x_axis	struct
.	O
font_name	pointer
)	O
;	O
pl_ffontsize_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
SS	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
font_size	double
)	O
)	O
;	O
for	O
(	O
i	int
=	O
multigrapher	pointer
->	O
x_axis	struct
.	O
min_tick_count	int
;	O
i	int
<=	O
multigrapher	pointer
->	O
x_axis	struct
.	O
max_tick_count	int
;	O
i	int
++	O
)	O
{	O
xval	double
=	O
i	int
*	O
multigrapher	pointer
->	O
x_axis	struct
.	O
tick_spacing	double
;	O
if	O
(	O
xval	double
<	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
-	O
FUZZ	int
*	O
xrange	double
||	O
xval	double
>	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
+	O
FUZZ	int
*	O
xrange	double
)	O
continue	O
;	O
if	O
(	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
&&	O
!	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
==	O
AXES_AT_ORIGIN	int
&&	O
NEAR_EQUALITY	O
(	O
xval	double
,	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
,	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_range	double
)	O
&&	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
!=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
)	O
&&	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
!=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
)	O
)	O
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
-	O
(	O
SS	O
(	O
(	O
multigrapher	pointer
->	O
tick_size	double
>=	O
0.0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
;	O
print_tick_label	function
(	O
labelbuf	pointer
,	O
&	O
multigrapher	pointer
->	O
x_axis	struct
,	O
&	O
multigrapher	pointer
->	O
x_trans	struct
,	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
type	pointer
==	O
A_LOG10	int
)	O
?	O
pow	function
(	O
10.0	int
,	O
xval	double
)	O
:	O
xval	double
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'c'	O
,	O
't'	O
,	O
labelbuf	pointer
)	O
;	O
multigrapher	pointer
->	O
x_axis	struct
.	O
labelled_ticks	int
++	O
;	O
}	O
else	O
if	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
&&	O
!	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
==	O
AXES_AT_ORIGIN	int
&&	O
NEAR_EQUALITY	O
(	O
xval	double
,	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
,	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_range	double
)	O
&&	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
!=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
)	O
&&	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
!=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
)	O
)	O
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
+	O
(	O
SS	O
(	O
(	O
multigrapher	pointer
->	O
tick_size	double
>=	O
0.0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
;	O
print_tick_label	function
(	O
labelbuf	pointer
,	O
&	O
multigrapher	pointer
->	O
x_axis	struct
,	O
&	O
multigrapher	pointer
->	O
x_trans	struct
,	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
type	pointer
==	O
A_LOG10	int
)	O
?	O
pow	function
(	O
10.0	int
,	O
xval	double
)	O
:	O
xval	double
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'c'	O
,	O
'b'	O
,	O
labelbuf	pointer
)	O
;	O
multigrapher	pointer
->	O
x_axis	struct
.	O
labelled_ticks	int
++	O
;	O
}	O
switch	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
)	O
{	O
case	O
AXES_AND_BOX_AND_GRID	int
:	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"dotted"	pointer
)	O
;	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YP	O
(	O
YSQ	O
(	O
0.0	int
)	O
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YP	O
(	O
YSQ	O
(	O
1.0	int
)	O
)	O
)	O
;	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"solid"	pointer
)	O
;	O
case	O
AXES_AND_BOX	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
+	O
(	O
multigrapher	pointer
->	O
tick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
+	O
(	O
multigrapher	pointer
->	O
tick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
case	O
AXES	int
:	O
case	O
AXES_AT_ORIGIN	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
+	O
(	O
multigrapher	pointer
->	O
tick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
+	O
(	O
multigrapher	pointer
->	O
tick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
have_lin_subticks	enum
)	O
{	O
double	O
subtick_size	double
;	O
subtick_size	double
=	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
type	pointer
==	O
A_LOG10	int
?	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
:	O
SS	O
(	O
multigrapher	pointer
->	O
subtick_size	double
)	O
)	O
;	O
for	O
(	O
i	int
=	O
multigrapher	pointer
->	O
x_axis	struct
.	O
min_lin_subtick_count	int
;	O
i	int
<=	O
multigrapher	pointer
->	O
x_axis	struct
.	O
max_lin_subtick_count	int
;	O
i	int
++	O
)	O
{	O
xval	double
=	O
i	int
*	O
multigrapher	pointer
->	O
x_axis	struct
.	O
lin_subtick_spacing	double
;	O
if	O
(	O
xval	double
<	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
-	O
FUZZ	int
*	O
xrange	double
||	O
xval	double
>	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
+	O
FUZZ	int
*	O
xrange	double
)	O
continue	O
;	O
switch	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
)	O
{	O
case	O
AXES_AND_BOX_AND_GRID	int
:	O
case	O
AXES_AND_BOX	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
subtick_size	double
+	O
(	O
subtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
subtick_size	double
+	O
(	O
subtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
case	O
AXES	int
:	O
case	O
AXES_AT_ORIGIN	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
subtick_size	double
+	O
(	O
subtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
subtick_size	double
+	O
(	O
subtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
AXES_AT_ORIGIN	int
&&	O
multigrapher	pointer
->	O
x_axis	struct
.	O
type	pointer
==	O
A_LINEAR	int
&&	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
*	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
<	O
0.0	int
)	O
{	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"dotted"	pointer
)	O
;	O
pl_fline_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
0.0	int
)	O
,	O
YP	O
(	O
YSQ	O
(	O
0.0	int
)	O
)	O
,	O
XV	O
(	O
0.0	int
)	O
,	O
YP	O
(	O
YSQ	O
(	O
1.0	int
)	O
)	O
)	O
;	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"solid"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
NO_AXES	int
&&	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
omit_ticks	enum
&&	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
user_specified_subsubticks	enum
)	O
{	O
int	O
i	int
;	O
double	O
yval	double
,	O
yrange	double
=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
;	O
char	O
labelbuf	pointer
[	O
2048	int
]	O
;	O
pl_fontname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
multigrapher	pointer
->	O
y_axis	struct
.	O
font_name	pointer
)	O
;	O
pl_ffontsize_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
SS	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
font_size	double
)	O
)	O
;	O
for	O
(	O
i	int
=	O
multigrapher	pointer
->	O
y_axis	struct
.	O
min_tick_count	int
;	O
i	int
<=	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_tick_count	int
;	O
i	int
++	O
)	O
{	O
yval	double
=	O
i	int
*	O
multigrapher	pointer
->	O
y_axis	struct
.	O
tick_spacing	double
;	O
if	O
(	O
yval	double
<	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
-	O
FUZZ	int
*	O
yrange	double
||	O
yval	double
>	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
+	O
FUZZ	int
*	O
yrange	double
)	O
continue	O
;	O
if	O
(	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
&&	O
!	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
==	O
AXES_AT_ORIGIN	int
&&	O
NEAR_EQUALITY	O
(	O
yval	double
,	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
,	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_range	double
)	O
&&	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
!=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
)	O
&&	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
!=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
)	O
)	O
)	O
{	O
double	O
new_width	double
;	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
-	O
(	O
SS	O
(	O
(	O
multigrapher	pointer
->	O
tick_size	double
>=	O
0.0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
print_tick_label	function
(	O
labelbuf	pointer
,	O
&	O
multigrapher	pointer
->	O
y_axis	struct
,	O
&	O
multigrapher	pointer
->	O
y_trans	struct
,	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
type	pointer
==	O
A_LOG10	int
)	O
?	O
pow	function
(	O
10.0	int
,	O
yval	double
)	O
:	O
yval	double
)	O
;	O
new_width	double
=	O
pl_flabelwidth_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
labelbuf	pointer
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'r'	O
,	O
'c'	O
,	O
labelbuf	pointer
)	O
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_label_width	double
=	O
DMAX	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_label_width	double
,	O
new_width	double
)	O
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
labelled_ticks	int
++	O
;	O
}	O
else	O
if	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
&&	O
!	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
==	O
AXES_AT_ORIGIN	int
&&	O
NEAR_EQUALITY	O
(	O
yval	double
,	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
,	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_range	double
)	O
&&	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
!=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
)	O
&&	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
!=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
)	O
)	O
)	O
{	O
double	O
new_width	double
;	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
+	O
(	O
SS	O
(	O
(	O
multigrapher	pointer
->	O
tick_size	double
>=	O
0.0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
print_tick_label	function
(	O
labelbuf	pointer
,	O
&	O
multigrapher	pointer
->	O
y_axis	struct
,	O
&	O
multigrapher	pointer
->	O
y_trans	struct
,	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
type	pointer
==	O
A_LOG10	int
)	O
?	O
pow	function
(	O
10.0	int
,	O
yval	double
)	O
:	O
yval	double
)	O
;	O
new_width	double
=	O
pl_flabelwidth_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
labelbuf	pointer
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'l'	O
,	O
'c'	O
,	O
labelbuf	pointer
)	O
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_label_width	double
=	O
DMAX	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_label_width	double
,	O
new_width	double
)	O
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
labelled_ticks	int
++	O
;	O
}	O
switch	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
)	O
{	O
case	O
AXES_AND_BOX_AND_GRID	int
:	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"dotted"	pointer
)	O
;	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XP	O
(	O
XSQ	O
(	O
0.0	int
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XP	O
(	O
XSQ	O
(	O
1.0	int
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"solid"	pointer
)	O
;	O
case	O
AXES_AND_BOX	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
+	O
(	O
multigrapher	pointer
->	O
tick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
+	O
(	O
multigrapher	pointer
->	O
tick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
case	O
AXES	int
:	O
case	O
AXES_AT_ORIGIN	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
+	O
(	O
multigrapher	pointer
->	O
tick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
+	O
(	O
multigrapher	pointer
->	O
tick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
have_lin_subticks	enum
)	O
{	O
double	O
subtick_size	double
;	O
subtick_size	double
=	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
type	pointer
==	O
A_LOG10	int
?	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
:	O
SS	O
(	O
multigrapher	pointer
->	O
subtick_size	double
)	O
)	O
;	O
for	O
(	O
i	int
=	O
multigrapher	pointer
->	O
y_axis	struct
.	O
min_lin_subtick_count	int
;	O
i	int
<=	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_lin_subtick_count	int
;	O
i	int
++	O
)	O
{	O
yval	double
=	O
i	int
*	O
multigrapher	pointer
->	O
y_axis	struct
.	O
lin_subtick_spacing	double
;	O
if	O
(	O
yval	double
<	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
-	O
FUZZ	int
*	O
yrange	double
||	O
yval	double
>	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
+	O
FUZZ	int
*	O
yrange	double
)	O
continue	O
;	O
switch	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
)	O
{	O
case	O
AXES_AND_BOX_AND_GRID	int
:	O
case	O
AXES_AND_BOX	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
subtick_size	double
+	O
(	O
subtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
subtick_size	double
+	O
(	O
subtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
case	O
AXES	int
:	O
case	O
AXES_AT_ORIGIN	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
subtick_size	double
+	O
(	O
subtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
subtick_size	double
+	O
(	O
subtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
AXES_AT_ORIGIN	int
&&	O
multigrapher	pointer
->	O
y_axis	struct
.	O
type	pointer
==	O
A_LINEAR	int
&&	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
*	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
<	O
0.0	int
)	O
{	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"dotted"	pointer
)	O
;	O
pl_fline_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XP	O
(	O
XSQ	O
(	O
0.0	int
)	O
)	O
,	O
YV	O
(	O
0.0	int
)	O
,	O
XP	O
(	O
XSQ	O
(	O
1.0	int
)	O
)	O
,	O
YV	O
(	O
0.0	int
)	O
)	O
;	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"solid"	pointer
)	O
;	O
}	O
}	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
NO_AXES	int
&&	O
multigrapher	pointer
->	O
x_axis	struct
.	O
have_normal_subsubticks	enum
&&	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
user_specified_subsubticks	enum
&&	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
omit_ticks	enum
)	O
{	O
int	O
i	int
,	O
m	int
,	O
imin	int
,	O
imax	int
;	O
double	O
xval	double
,	O
xrange	double
=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
;	O
imin	int
=	O
(	O
int	O
)	O
(	O
floor	function
(	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
-	O
FUZZ	int
*	O
xrange	double
)	O
)	O
;	O
imax	int
=	O
(	O
int	O
)	O
(	O
ceil	function
(	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
+	O
FUZZ	int
*	O
xrange	double
)	O
)	O
;	O
for	O
(	O
i	int
=	O
imin	int
;	O
i	int
<	O
imax	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
m	int
=	O
1	int
;	O
m	int
<=	O
9	int
;	O
m	int
++	O
)	O
{	O
xval	double
=	O
i	int
+	O
log10	function
(	O
(	O
double	O
)	O
m	int
)	O
;	O
plot_abscissa_log_subsubtick	function
(	O
multigrapher	pointer
,	O
xval	double
)	O
;	O
}	O
}	O
}	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
NO_AXES	int
&&	O
multigrapher	pointer
->	O
x_axis	struct
.	O
user_specified_subsubticks	enum
&&	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
omit_ticks	enum
)	O
{	O
int	O
i	int
,	O
imin	int
,	O
imax	int
;	O
double	O
xval	double
,	O
xrange	double
=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
;	O
imin	int
=	O
(	O
int	O
)	O
(	O
floor	function
(	O
pow	function
(	O
10.0	int
,	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
-	O
FUZZ	int
*	O
xrange	double
)	O
/	O
multigrapher	pointer
->	O
x_axis	struct
.	O
subsubtick_spacing	double
)	O
)	O
;	O
imax	int
=	O
(	O
int	O
)	O
(	O
ceil	function
(	O
pow	function
(	O
10.0	int
,	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
+	O
FUZZ	int
*	O
xrange	double
)	O
/	O
multigrapher	pointer
->	O
x_axis	struct
.	O
subsubtick_spacing	double
)	O
)	O
;	O
for	O
(	O
i	int
=	O
imin	int
;	O
i	int
<=	O
imax	int
;	O
i	int
++	O
)	O
{	O
xval	double
=	O
log10	function
(	O
i	int
*	O
multigrapher	pointer
->	O
x_axis	struct
.	O
subsubtick_spacing	double
)	O
;	O
plot_abscissa_log_subsubtick	function
(	O
multigrapher	pointer
,	O
xval	double
)	O
;	O
}	O
}	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
NO_AXES	int
&&	O
multigrapher	pointer
->	O
y_axis	struct
.	O
have_normal_subsubticks	enum
&&	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
user_specified_subsubticks	enum
&&	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
omit_ticks	enum
)	O
{	O
int	O
i	int
,	O
m	int
,	O
imin	int
,	O
imax	int
;	O
double	O
yval	double
,	O
yrange	double
=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
;	O
imin	int
=	O
(	O
int	O
)	O
(	O
floor	function
(	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
-	O
FUZZ	int
*	O
yrange	double
)	O
)	O
;	O
imax	int
=	O
(	O
int	O
)	O
(	O
ceil	function
(	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
+	O
FUZZ	int
*	O
yrange	double
)	O
)	O
;	O
for	O
(	O
i	int
=	O
imin	int
;	O
i	int
<	O
imax	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
m	int
=	O
1	int
;	O
m	int
<=	O
9	int
;	O
m	int
++	O
)	O
{	O
yval	double
=	O
i	int
+	O
log10	function
(	O
(	O
double	O
)	O
m	int
)	O
;	O
plot_ordinate_log_subsubtick	function
(	O
multigrapher	pointer
,	O
yval	double
)	O
;	O
}	O
}	O
}	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
NO_AXES	int
&&	O
multigrapher	pointer
->	O
y_axis	struct
.	O
user_specified_subsubticks	enum
&&	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
omit_ticks	enum
)	O
{	O
int	O
i	int
,	O
imin	int
,	O
imax	int
;	O
double	O
yval	double
,	O
yrange	double
=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
;	O
imin	int
=	O
(	O
int	O
)	O
(	O
floor	function
(	O
pow	function
(	O
10.0	int
,	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
-	O
FUZZ	int
*	O
yrange	double
)	O
/	O
multigrapher	pointer
->	O
y_axis	struct
.	O
subsubtick_spacing	double
)	O
)	O
;	O
imax	int
=	O
(	O
int	O
)	O
(	O
ceil	function
(	O
pow	function
(	O
10.0	int
,	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
+	O
FUZZ	int
*	O
yrange	double
)	O
/	O
multigrapher	pointer
->	O
y_axis	struct
.	O
subsubtick_spacing	double
)	O
)	O
;	O
for	O
(	O
i	int
=	O
imin	int
;	O
i	int
<=	O
imax	int
;	O
i	int
++	O
)	O
{	O
yval	double
=	O
log10	function
(	O
i	int
*	O
multigrapher	pointer
->	O
y_axis	struct
.	O
subsubtick_spacing	double
)	O
;	O
plot_ordinate_log_subsubtick	function
(	O
multigrapher	pointer
,	O
yval	double
)	O
;	O
}	O
}	O
if	O
(	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
NO_AXES	int
)	O
&&	O
multigrapher	pointer
->	O
x_axis	struct
.	O
label	pointer
!=	O
NULL	O
&&	O
multigrapher	pointer
->	O
x_axis	struct
.	O
label	pointer
!=	O
'\0'	O
)	O
{	O
double	O
x_axis_font_size	double
;	O
double	O
xloc	double
;	O
pl_fontname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
multigrapher	pointer
->	O
x_axis	struct
.	O
font_name	pointer
)	O
;	O
x_axis_font_size	double
=	O
pl_ffontsize_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
SS	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
font_size	double
)	O
)	O
;	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
AXES_AT_ORIGIN	int
)	O
xloc	double
=	O
0.5	int
*	O
(	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
+	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
)	O
;	O
else	O
{	O
if	O
(	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
==	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
)	O
||	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
==	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
)	O
)	O
xloc	double
=	O
0.5	int
*	O
(	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
+	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
)	O
;	O
else	O
xloc	double
=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
>=	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
-	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
?	O
0.5	int
*	O
(	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
+	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
:	O
0.5	int
*	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
+	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
)	O
;	O
}	O
if	O
(	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xloc	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
-	O
(	O
SS	O
(	O
(	O
multigrapher	pointer
->	O
tick_size	double
>=	O
0.0	int
?	O
0.875	int
:	O
2.125	int
)	O
*	O
fabs	function
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
)	O
+	O
(	O
6	int
*	O
x_axis_font_size	double
)	O
/	O
5	int
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'c'	O
,	O
't'	O
,	O
multigrapher	pointer
->	O
x_axis	struct
.	O
label	pointer
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xloc	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
+	O
(	O
SS	O
(	O
(	O
multigrapher	pointer
->	O
tick_size	double
>=	O
0.0	int
?	O
0.875	int
:	O
2.125	int
)	O
*	O
fabs	function
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
)	O
+	O
(	O
6	int
*	O
x_axis_font_size	double
)	O
/	O
5	int
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'c'	O
,	O
'b'	O
,	O
multigrapher	pointer
->	O
x_axis	struct
.	O
label	pointer
)	O
;	O
}	O
}	O
if	O
(	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
NO_AXES	int
)	O
&&	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
label	pointer
!=	O
NULL	O
&&	O
*	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
label	pointer
)	O
!=	O
'\0'	O
)	O
)	O
{	O
double	O
y_axis_font_size	double
;	O
double	O
yloc	double
;	O
pl_fontname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
multigrapher	pointer
->	O
y_axis	struct
.	O
font_name	pointer
)	O
;	O
y_axis_font_size	double
=	O
pl_ffontsize_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
SS	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
font_size	double
)	O
)	O
;	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
AXES_AT_ORIGIN	int
)	O
yloc	double
=	O
0.5	int
*	O
(	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
+	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
)	O
;	O
else	O
{	O
if	O
(	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
==	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
)	O
||	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
==	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
)	O
)	O
yloc	double
=	O
0.5	int
*	O
(	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
+	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
)	O
;	O
else	O
yloc	double
=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
>=	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
-	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
?	O
0.5	int
*	O
(	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
+	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
:	O
0.5	int
*	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
+	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
)	O
;	O
}	O
if	O
(	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
-	O
(	O
libplot_has_font_metrics	int
?	O
(	O
SS	O
(	O
(	O
multigrapher	pointer
->	O
tick_size	double
>=	O
0.0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
)	O
+	O
1.15	int
*	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_label_width	double
+	O
0.5	int
*	O
y_axis_font_size	double
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
:	O
(	O
SS	O
(	O
(	O
multigrapher	pointer
->	O
tick_size	double
>=	O
0.0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
)	O
+	O
1.0	int
*	O
y_axis_font_size	double
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yloc	double
)	O
)	O
;	O
if	O
(	O
libplot_has_font_metrics	int
&&	O
!	O
multigrapher	pointer
->	O
no_rotate_y_label	enum
)	O
{	O
pl_textangle_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
90	int
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'c'	O
,	O
'x'	O
,	O
multigrapher	pointer
->	O
y_axis	struct
.	O
label	pointer
)	O
;	O
pl_textangle_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
0	int
)	O
;	O
}	O
else	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'r'	O
,	O
'c'	O
,	O
multigrapher	pointer
->	O
y_axis	struct
.	O
label	pointer
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
+	O
(	O
libplot_has_font_metrics	int
?	O
(	O
SS	O
(	O
(	O
multigrapher	pointer
->	O
tick_size	double
>=	O
0.0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
)	O
+	O
1.15	int
*	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_label_width	double
+	O
0.5	int
*	O
y_axis_font_size	double
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
:	O
(	O
SS	O
(	O
(	O
multigrapher	pointer
->	O
tick_size	double
>=	O
0.0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
)	O
+	O
1.0	int
*	O
y_axis_font_size	double
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yloc	double
)	O
)	O
;	O
if	O
(	O
libplot_has_font_metrics	int
&&	O
!	O
multigrapher	pointer
->	O
no_rotate_y_label	enum
)	O
{	O
pl_textangle_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
90	int
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'c'	O
,	O
't'	O
,	O
multigrapher	pointer
->	O
y_axis	struct
.	O
label	pointer
)	O
;	O
pl_textangle_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
0	int
)	O
;	O
}	O
else	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'l'	O
,	O
'c'	O
,	O
multigrapher	pointer
->	O
y_axis	struct
.	O
label	pointer
)	O
;	O
}	O
}	O
pl_flushpl_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
pl_restorestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
if	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
!=	O
NO_AXES	int
)	O
{	O
if	O
(	O
!	O
tick_warning_printed	enum
&&	O
(	O
(	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
omit_ticks	enum
&&	O
multigrapher	pointer
->	O
x_axis	struct
.	O
labelled_ticks	int
<=	O
2	int
)	O
||	O
(	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
omit_ticks	enum
&&	O
multigrapher	pointer
->	O
y_axis	struct
.	O
labelled_ticks	int
<=	O
2	int
)	O
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s: the tick spacing is adjusted, as there were too few labelled axis ticks\n"	pointer
,	O
progname	pointer
)	O
;	O
tick_warning_printed	enum
=	O
true	int
;	O
}	O
}	O
}	O
static	O
void	O
plot_abscissa_log_subsubtick	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
double	O
xval	double
)	O
{	O
double	O
xrange	double
=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
;	O
char	O
labelbuf	pointer
[	O
2048	int
]	O
;	O
double	O
tick_size	double
=	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
;	O
double	O
subsubtick_size	double
=	O
SS	O
(	O
multigrapher	pointer
->	O
subtick_size	double
)	O
;	O
pl_fontname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
multigrapher	pointer
->	O
x_axis	struct
.	O
font_name	pointer
)	O
;	O
pl_ffontsize_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
SS	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
font_size	double
)	O
)	O
;	O
if	O
(	O
xval	double
<	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
-	O
FUZZ	int
*	O
xrange	double
||	O
xval	double
>	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
+	O
FUZZ	int
*	O
xrange	double
)	O
return	O
;	O
if	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
user_specified_subsubticks	enum
)	O
{	O
print_tick_label	function
(	O
labelbuf	pointer
,	O
&	O
multigrapher	pointer
->	O
x_axis	struct
,	O
&	O
multigrapher	pointer
->	O
x_trans	struct
,	O
pow	function
(	O
10.0	int
,	O
xval	double
)	O
)	O
;	O
if	O
(	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
-	O
(	O
(	O
tick_size	double
>=	O
0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
(	O
double	O
)	O
tick_size	double
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'c'	O
,	O
't'	O
,	O
labelbuf	pointer
)	O
;	O
multigrapher	pointer
->	O
x_axis	struct
.	O
labelled_ticks	int
++	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
+	O
(	O
(	O
tick_size	double
>=	O
0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
(	O
double	O
)	O
tick_size	double
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'c'	O
,	O
'b'	O
,	O
labelbuf	pointer
)	O
;	O
multigrapher	pointer
->	O
x_axis	struct
.	O
labelled_ticks	int
++	O
;	O
}	O
}	O
switch	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
)	O
{	O
case	O
AXES_AND_BOX_AND_GRID	int
:	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"dotted"	pointer
)	O
;	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YP	O
(	O
YSQ	O
(	O
0.0	int
)	O
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YP	O
(	O
YSQ	O
(	O
1.0	int
)	O
)	O
)	O
;	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"solid"	pointer
)	O
;	O
case	O
AXES_AND_BOX	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
subsubtick_size	double
+	O
(	O
subsubtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
subsubtick_size	double
+	O
(	O
subsubtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
case	O
AXES	int
:	O
case	O
AXES_AT_ORIGIN	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
y_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
subsubtick_size	double
+	O
(	O
subsubtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
xval	double
)	O
,	O
YN	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
subsubtick_size	double
+	O
(	O
subsubtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
plot_ordinate_log_subsubtick	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
double	O
yval	double
)	O
{	O
double	O
yrange	double
=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
-	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
;	O
char	O
labelbuf	pointer
[	O
2048	int
]	O
;	O
double	O
tick_size	double
=	O
SS	O
(	O
multigrapher	pointer
->	O
tick_size	double
)	O
;	O
double	O
subsubtick_size	double
=	O
SS	O
(	O
multigrapher	pointer
->	O
subtick_size	double
)	O
;	O
pl_fontname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
multigrapher	pointer
->	O
y_axis	struct
.	O
font_name	pointer
)	O
;	O
pl_ffontsize_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
SS	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
font_size	double
)	O
)	O
;	O
if	O
(	O
yval	double
<	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
-	O
FUZZ	int
*	O
yrange	double
||	O
yval	double
>	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
+	O
FUZZ	int
*	O
yrange	double
)	O
return	O
;	O
if	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
user_specified_subsubticks	enum
)	O
{	O
double	O
new_width	double
;	O
print_tick_label	function
(	O
labelbuf	pointer
,	O
&	O
multigrapher	pointer
->	O
y_axis	struct
,	O
&	O
multigrapher	pointer
->	O
y_trans	struct
,	O
pow	function
(	O
10.0	int
,	O
yval	double
)	O
)	O
;	O
if	O
(	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
-	O
(	O
(	O
tick_size	double
>=	O
0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
(	O
double	O
)	O
tick_size	double
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
new_width	double
=	O
pl_flabelwidth_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
labelbuf	pointer
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'r'	O
,	O
'c'	O
,	O
labelbuf	pointer
)	O
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_label_width	double
=	O
DMAX	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_label_width	double
,	O
new_width	double
)	O
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
labelled_ticks	int
++	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
+	O
(	O
(	O
tick_size	double
>=	O
0	int
?	O
0.75	int
:	O
1.75	int
)	O
*	O
fabs	function
(	O
(	O
double	O
)	O
tick_size	double
)	O
+	O
multigrapher	pointer
->	O
half_line_width	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
new_width	double
=	O
pl_flabelwidth_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
labelbuf	pointer
)	O
;	O
pl_alabel_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
'l'	O
,	O
'c'	O
,	O
labelbuf	pointer
)	O
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_label_width	double
=	O
DMAX	O
(	O
multigrapher	pointer
->	O
y_axis	struct
.	O
max_label_width	double
,	O
new_width	double
)	O
;	O
multigrapher	pointer
->	O
y_axis	struct
.	O
labelled_ticks	int
++	O
;	O
}	O
}	O
switch	O
(	O
multigrapher	pointer
->	O
grid_spec	enum
)	O
{	O
case	O
AXES_AND_BOX_AND_GRID	int
:	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"dotted"	pointer
)	O
;	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XP	O
(	O
XSQ	O
(	O
0.0	int
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XP	O
(	O
XSQ	O
(	O
1.0	int
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"solid"	pointer
)	O
;	O
case	O
AXES_AND_BOX	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
subsubtick_size	double
+	O
(	O
subsubtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
subsubtick_size	double
+	O
(	O
subsubtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
case	O
AXES	int
:	O
case	O
AXES_AT_ORIGIN	int
:	O
if	O
(	O
!	O
multigrapher	pointer
->	O
x_axis	struct
.	O
switch_axis_end	int
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
other_axis_loc	double
)	O
+	O
(	O
subsubtick_size	double
+	O
(	O
subsubtick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
else	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XN	O
(	O
multigrapher	pointer
->	O
x_axis	struct
.	O
alt_other_axis_loc	double
)	O
-	O
(	O
subsubtick_size	double
+	O
(	O
multigrapher	pointer
->	O
tick_size	double
>	O
0.0	int
?	O
multigrapher	pointer
->	O
half_line_width	double
:	O
-	O
multigrapher	pointer
->	O
half_line_width	double
)	O
)	O
,	O
YV	O
(	O
yval	double
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
set_line_style	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
int	O
style	int
,	O
bool	enum
use_color	enum
)	O
{	O
if	O
(	O
!	O
use_color	enum
)	O
{	O
if	O
(	O
style	int
>	O
0	int
)	O
{	O
int	O
i	int
;	O
i	int
=	O
(	O
style	int
-	O
1	int
)	O
%	O
NO_OF_LINEMODES	int
;	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
linemodes	array
[	O
i	int
]	O
)	O
;	O
}	O
pl_colorname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
multigrapher	pointer
->	O
frame_color	pointer
)	O
;	O
}	O
else	O
{	O
int	O
i	int
,	O
j	int
;	O
if	O
(	O
style	int
>	O
0	int
)	O
{	O
i	int
=	O
(	O
(	O
style	int
-	O
1	int
)	O
/	O
NO_OF_LINEMODES	int
)	O
%	O
NO_OF_LINEMODES	int
;	O
j	int
=	O
(	O
style	int
-	O
1	int
)	O
%	O
NO_OF_LINEMODES	int
;	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
linemodes	array
[	O
i	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
style	int
==	O
0	int
)	O
j	int
=	O
0	int
;	O
else	O
j	int
=	O
(	O
-	O
style	int
-	O
1	int
)	O
%	O
(	O
NO_OF_LINEMODES	int
-	O
1	int
)	O
;	O
pl_colorname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
colorstyle	array
[	O
j	int
]	O
)	O
;	O
}	O
}	O
void	O
plot_point_array	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
const	O
Point	struct
*	O
p	pointer
,	O
int	O
length	long
)	O
{	O
int	O
index	function
;	O
for	O
(	O
index	function
=	O
0	int
;	O
index	function
<	O
length	long
;	O
index	function
++	O
)	O
plot_point	function
(	O
multigrapher	pointer
,	O
&	O
(	O
p	pointer
[	O
index	function
]	O
)	O
)	O
;	O
}	O
void	O
plot_point	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
const	O
Point	struct
*	O
point	pointer
)	O
{	O
double	O
local_x0	double
,	O
local_y0	double
,	O
local_x1	double
,	O
local_y1	double
;	O
int	O
clipval	int
;	O
if	O
(	O
!	O
(	O
point	pointer
->	O
pendown	enum
)	O
||	O
multigrapher	pointer
->	O
first_point_of_polyline	enum
)	O
{	O
int	O
intfill	int
;	O
set_line_style	function
(	O
multigrapher	pointer
,	O
point	pointer
->	O
linemode	int
,	O
point	pointer
->	O
use_color	enum
)	O
;	O
pl_flinewidth_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
point	pointer
->	O
line_width	double
*	O
(	O
double	O
)	O
PLOT_SIZE	int
)	O
;	O
if	O
(	O
point	pointer
->	O
fill_fraction	double
<	O
0.0	int
)	O
intfill	int
=	O
0	int
;	O
else	O
intfill	int
=	O
1	int
+	O
IROUND	O
(	O
(	O
1.0	int
-	O
point	pointer
->	O
fill_fraction	double
)	O
*	O
0xfffe	int
)	O
;	O
pl_filltype_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
intfill	int
)	O
;	O
}	O
if	O
(	O
multigrapher	pointer
->	O
first_point_of_polyline	enum
)	O
{	O
local_x0	double
=	O
point	pointer
->	O
x	int
;	O
local_y0	double
=	O
point	pointer
->	O
y	int
;	O
}	O
else	O
{	O
local_x0	double
=	O
multigrapher	pointer
->	O
oldpoint_x	double
;	O
local_y0	double
=	O
multigrapher	pointer
->	O
oldpoint_y	double
;	O
}	O
local_x1	double
=	O
point	pointer
->	O
x	int
;	O
local_y1	double
=	O
point	pointer
->	O
y	int
;	O
multigrapher	pointer
->	O
oldpoint_x	double
=	O
point	pointer
->	O
x	int
;	O
multigrapher	pointer
->	O
oldpoint_y	double
=	O
point	pointer
->	O
y	int
;	O
clipval	int
=	O
clip_line	function
(	O
multigrapher	pointer
,	O
&	O
local_x0	double
,	O
&	O
local_y0	double
,	O
&	O
local_x1	double
,	O
&	O
local_y1	double
)	O
;	O
if	O
(	O
!	O
(	O
clipval	int
&	O
ACCEPTED	int
)	O
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
)	O
;	O
multigrapher	pointer
->	O
first_point_of_polyline	enum
=	O
false	int
;	O
return	O
;	O
}	O
if	O
(	O
point	pointer
->	O
pendown	enum
&&	O
(	O
point	pointer
->	O
linemode	int
>	O
0	int
)	O
)	O
{	O
switch	O
(	O
multigrapher	pointer
->	O
clip_mode	int
)	O
{	O
case	O
0	int
:	O
if	O
(	O
(	O
clipval	int
&	O
CLIPPED_FIRST	int
)	O
||	O
(	O
clipval	int
&	O
CLIPPED_SECOND	int
)	O
)	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
)	O
;	O
else	O
{	O
if	O
(	O
!	O
multigrapher	pointer
->	O
first_point_of_polyline	enum
)	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
)	O
;	O
else	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
)	O
;	O
}	O
break	O
;	O
case	O
1	int
:	O
default	O
:	O
if	O
(	O
(	O
clipval	int
&	O
CLIPPED_FIRST	int
)	O
&&	O
(	O
clipval	int
&	O
CLIPPED_SECOND	int
)	O
)	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
)	O
;	O
else	O
{	O
if	O
(	O
clipval	int
&	O
CLIPPED_FIRST	int
)	O
{	O
if	O
(	O
!	O
multigrapher	pointer
->	O
first_point_of_polyline	enum
)	O
{	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
local_x0	double
)	O
,	O
YV	O
(	O
local_y0	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
)	O
;	O
}	O
else	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
multigrapher	pointer
->	O
first_point_of_polyline	enum
)	O
{	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
local_x1	double
)	O
,	O
YV	O
(	O
local_y1	double
)	O
)	O
;	O
}	O
else	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
2	int
:	O
if	O
(	O
(	O
clipval	int
&	O
CLIPPED_FIRST	int
)	O
||	O
multigrapher	pointer
->	O
first_point_of_polyline	enum
)	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
local_x0	double
)	O
,	O
YV	O
(	O
local_y0	double
)	O
)	O
;	O
pl_fcont_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
local_x1	double
)	O
,	O
YV	O
(	O
local_y1	double
)	O
)	O
;	O
if	O
(	O
clipval	int
&	O
CLIPPED_SECOND	int
)	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
)	O
;	O
break	O
;	O
}	O
}	O
else	O
pl_fmove_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
)	O
;	O
multigrapher	pointer
->	O
first_point_of_polyline	enum
=	O
false	int
;	O
if	O
(	O
clipval	int
&	O
CLIPPED_SECOND	int
)	O
return	O
;	O
if	O
(	O
point	pointer
->	O
symbol	int
>=	O
32	int
)	O
{	O
pl_savestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
plot_errorbar	function
(	O
multigrapher	pointer
,	O
point	pointer
)	O
;	O
pl_fontname_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
point	pointer
->	O
symbol_font_name	pointer
)	O
;	O
pl_fmarker_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
,	O
point	pointer
->	O
symbol	int
,	O
SS	O
(	O
point	pointer
->	O
symbol_size	double
)	O
)	O
;	O
pl_restorestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
}	O
else	O
if	O
(	O
point	pointer
->	O
symbol	int
>	O
0	int
)	O
{	O
if	O
(	O
point	pointer
->	O
linemode	int
>	O
0	int
)	O
{	O
pl_savestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
plot_errorbar	function
(	O
multigrapher	pointer
,	O
point	pointer
)	O
;	O
pl_fmarker_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
,	O
point	pointer
->	O
symbol	int
,	O
SS	O
(	O
point	pointer
->	O
symbol_size	double
)	O
)	O
;	O
pl_restorestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
}	O
else	O
{	O
plot_errorbar	function
(	O
multigrapher	pointer
,	O
point	pointer
)	O
;	O
pl_fmarker_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
,	O
point	pointer
->	O
symbol	int
,	O
SS	O
(	O
point	pointer
->	O
symbol_size	double
)	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
point	pointer
->	O
symbol	int
==	O
0	int
&&	O
point	pointer
->	O
linemode	int
==	O
0	int
)	O
{	O
plot_errorbar	function
(	O
multigrapher	pointer
,	O
point	pointer
)	O
;	O
pl_fmarker_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
point	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
point	pointer
->	O
y	int
)	O
,	O
M_DOT	int
,	O
SS	O
(	O
point	pointer
->	O
symbol_size	double
)	O
)	O
;	O
}	O
else	O
plot_errorbar	function
(	O
multigrapher	pointer
,	O
point	pointer
)	O
;	O
return	O
;	O
}	O
static	O
int	O
clip_line	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
double	O
*	O
x0_p	pointer
,	O
double	O
*	O
y0_p	pointer
,	O
double	O
*	O
x1_p	pointer
,	O
double	O
*	O
y1_p	pointer
)	O
{	O
double	O
x0	int
=	O
*	O
x0_p	pointer
;	O
double	O
y0	function
=	O
*	O
y0_p	pointer
;	O
double	O
x1	int
=	O
*	O
x1_p	pointer
;	O
double	O
y1	function
=	O
*	O
y1_p	pointer
;	O
outcode	int
outcode0	int
=	O
compute_outcode	function
(	O
multigrapher	pointer
,	O
x0	int
,	O
y0	function
,	O
true	int
)	O
;	O
outcode	int
outcode1	int
=	O
compute_outcode	function
(	O
multigrapher	pointer
,	O
x1	int
,	O
y1	function
,	O
true	int
)	O
;	O
bool	enum
accepted	enum
;	O
int	O
clipval	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
(	O
outcode0	int
|	O
outcode1	int
)	O
)	O
{	O
accepted	enum
=	O
true	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
outcode0	int
&	O
outcode1	int
)	O
{	O
accepted	enum
=	O
false	int
;	O
break	O
;	O
}	O
else	O
{	O
outcode	int
outcode_out	int
=	O
(	O
outcode0	int
?	O
outcode0	int
:	O
outcode1	int
)	O
;	O
double	O
x	int
,	O
y	int
;	O
if	O
(	O
outcode_out	int
&	O
RIGHT	int
)	O
{	O
x	int
=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
;	O
y	int
=	O
y0	function
+	O
(	O
y1	function
-	O
y0	function
)	O
*	O
(	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
-	O
x0	int
)	O
/	O
(	O
x1	int
-	O
x0	int
)	O
;	O
}	O
else	O
if	O
(	O
outcode_out	int
&	O
LEFT	int
)	O
{	O
x	int
=	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
;	O
y	int
=	O
y0	function
+	O
(	O
y1	function
-	O
y0	function
)	O
*	O
(	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
-	O
x0	int
)	O
/	O
(	O
x1	int
-	O
x0	int
)	O
;	O
}	O
else	O
if	O
(	O
outcode_out	int
&	O
TOP	int
)	O
{	O
x	int
=	O
x0	int
+	O
(	O
x1	int
-	O
x0	int
)	O
*	O
(	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
-	O
y0	function
)	O
/	O
(	O
y1	function
-	O
y0	function
)	O
;	O
y	int
=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
;	O
}	O
else	O
{	O
x	int
=	O
x0	int
+	O
(	O
x1	int
-	O
x0	int
)	O
*	O
(	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
-	O
y0	function
)	O
/	O
(	O
y1	function
-	O
y0	function
)	O
;	O
y	int
=	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
;	O
}	O
if	O
(	O
outcode_out	int
==	O
outcode0	int
)	O
{	O
x0	int
=	O
x	int
;	O
y0	function
=	O
y	int
;	O
outcode0	int
=	O
compute_outcode	function
(	O
multigrapher	pointer
,	O
x0	int
,	O
y0	function
,	O
true	int
)	O
;	O
}	O
else	O
{	O
x1	int
=	O
x	int
;	O
y1	function
=	O
y	int
;	O
outcode1	int
=	O
compute_outcode	function
(	O
multigrapher	pointer
,	O
x1	int
,	O
y1	function
,	O
true	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
accepted	enum
)	O
{	O
clipval	int
|=	O
ACCEPTED	int
;	O
if	O
(	O
(	O
x0	int
!=	O
*	O
x0_p	pointer
)	O
||	O
(	O
y0	function
!=	O
*	O
y0_p	pointer
)	O
)	O
clipval	int
|=	O
CLIPPED_FIRST	int
;	O
if	O
(	O
(	O
x1	int
!=	O
*	O
x1_p	pointer
)	O
||	O
(	O
y1	function
!=	O
*	O
y1_p	pointer
)	O
)	O
clipval	int
|=	O
CLIPPED_SECOND	int
;	O
*	O
x0_p	pointer
=	O
x0	int
;	O
*	O
y0_p	pointer
=	O
y0	function
;	O
*	O
x1_p	pointer
=	O
x1	int
;	O
*	O
y1_p	pointer
=	O
y1	function
;	O
}	O
return	O
clipval	int
;	O
}	O
static	O
outcode	int
compute_outcode	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
double	O
x	int
,	O
double	O
y	int
,	O
bool	enum
tolerant	enum
)	O
{	O
outcode	int
code	int
=	O
0	int
;	O
double	O
xfuzz	double
=	O
FUZZ	int
*	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_range	double
;	O
double	O
yfuzz	double
=	O
FUZZ	int
*	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_range	double
;	O
int	O
sign	int
=	O
(	O
tolerant	enum
==	O
true	int
?	O
1	int
:	O
-	O
1	int
)	O
;	O
if	O
(	O
x	int
>	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_max	double
+	O
sign	int
*	O
xfuzz	double
)	O
code	int
|=	O
RIGHT	int
;	O
else	O
if	O
(	O
x	int
<	O
multigrapher	pointer
->	O
x_trans	struct
.	O
input_min	double
-	O
sign	int
*	O
xfuzz	double
)	O
code	int
|=	O
LEFT	int
;	O
if	O
(	O
y	int
>	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_max	double
+	O
sign	int
*	O
yfuzz	double
)	O
code	int
|=	O
TOP	int
;	O
else	O
if	O
(	O
y	int
<	O
multigrapher	pointer
->	O
y_trans	struct
.	O
input_min	double
-	O
sign	int
*	O
yfuzz	double
)	O
code	int
|=	O
BOTTOM	int
;	O
return	O
code	int
;	O
}	O
static	O
void	O
transpose_portmanteau	function
(	O
int	O
*	O
val	double
)	O
{	O
bool	enum
xtrue	enum
,	O
ytrue	enum
;	O
int	O
newval	int
;	O
xtrue	enum
=	O
(	O
(	O
*	O
val	double
&	O
X_AXIS	int
)	O
?	O
true	int
:	O
false	int
)	O
;	O
ytrue	enum
=	O
(	O
(	O
*	O
val	double
&	O
Y_AXIS	int
)	O
?	O
true	int
:	O
false	int
)	O
;	O
newval	int
=	O
(	O
xtrue	enum
?	O
Y_AXIS	int
:	O
0	int
)	O
|	O
(	O
ytrue	enum
?	O
X_AXIS	int
:	O
0	int
)	O
;	O
*	O
val	double
=	O
newval	int
;	O
}	O
static	O
void	O
plot_errorbar	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
,	O
const	O
Point	struct
*	O
p	pointer
)	O
{	O
if	O
(	O
p	pointer
->	O
have_x_errorbar	enum
||	O
p	pointer
->	O
have_y_errorbar	enum
)	O
{	O
pl_savestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
pl_linemod_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
"solid"	pointer
)	O
;	O
if	O
(	O
p	pointer
->	O
have_x_errorbar	enum
)	O
{	O
pl_fline_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
p	pointer
->	O
xmin	double
)	O
,	O
YV	O
(	O
p	pointer
->	O
y	int
)	O
-	O
0.5	int
*	O
SS	O
(	O
p	pointer
->	O
symbol_size	double
)	O
,	O
XV	O
(	O
p	pointer
->	O
xmin	double
)	O
,	O
YV	O
(	O
p	pointer
->	O
y	int
)	O
+	O
0.5	int
*	O
SS	O
(	O
p	pointer
->	O
symbol_size	double
)	O
)	O
;	O
pl_fline_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
p	pointer
->	O
xmin	double
)	O
,	O
YV	O
(	O
p	pointer
->	O
y	int
)	O
,	O
XV	O
(	O
p	pointer
->	O
xmax	double
)	O
,	O
YV	O
(	O
p	pointer
->	O
y	int
)	O
)	O
;	O
pl_fline_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
p	pointer
->	O
xmax	double
)	O
,	O
YV	O
(	O
p	pointer
->	O
y	int
)	O
-	O
0.5	int
*	O
SS	O
(	O
p	pointer
->	O
symbol_size	double
)	O
,	O
XV	O
(	O
p	pointer
->	O
xmax	double
)	O
,	O
YV	O
(	O
p	pointer
->	O
y	int
)	O
+	O
0.5	int
*	O
SS	O
(	O
p	pointer
->	O
symbol_size	double
)	O
)	O
;	O
}	O
if	O
(	O
p	pointer
->	O
have_y_errorbar	enum
)	O
{	O
pl_fline_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
p	pointer
->	O
x	int
)	O
-	O
0.5	int
*	O
SS	O
(	O
p	pointer
->	O
symbol_size	double
)	O
,	O
YV	O
(	O
p	pointer
->	O
ymin	double
)	O
,	O
XV	O
(	O
p	pointer
->	O
x	int
)	O
+	O
0.5	int
*	O
SS	O
(	O
p	pointer
->	O
symbol_size	double
)	O
,	O
YV	O
(	O
p	pointer
->	O
ymin	double
)	O
)	O
;	O
pl_fline_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
p	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
p	pointer
->	O
ymin	double
)	O
,	O
XV	O
(	O
p	pointer
->	O
x	int
)	O
,	O
YV	O
(	O
p	pointer
->	O
ymax	double
)	O
)	O
;	O
pl_fline_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
,	O
XV	O
(	O
p	pointer
->	O
x	int
)	O
-	O
0.5	int
*	O
SS	O
(	O
p	pointer
->	O
symbol_size	double
)	O
,	O
YV	O
(	O
p	pointer
->	O
ymax	double
)	O
,	O
XV	O
(	O
p	pointer
->	O
x	int
)	O
+	O
0.5	int
*	O
SS	O
(	O
p	pointer
->	O
symbol_size	double
)	O
,	O
YV	O
(	O
p	pointer
->	O
ymax	double
)	O
)	O
;	O
}	O
pl_restorestate_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
}	O
}	O
void	O
end_polyline_and_flush	function
(	O
Multigrapher	struct
*	O
multigrapher	pointer
)	O
{	O
pl_endpath_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
pl_flushpl_r	function
(	O
multigrapher	pointer
->	O
plotter	pointer
)	O
;	O
multigrapher	pointer
->	O
first_point_of_polyline	enum
=	O
true	int
;	O
}	O
