char	O
*	O
__getcwd	O
(	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
)	O
{	O
enum	O
{	O
BIG_FILE_NAME_COMPONENT_LENGTH	int
=	O
255	int
,	O
BIG_FILE_NAME_LENGTH	int
=	O
MIN	O
(	O
4095	int
,	O
PATH_MAX	int
-	O
1	int
)	O
,	O
DEEP_NESTING	int
=	O
100	int
}	O
;	O
int	O
fd	int
=	O
AT_FDCWD	O
;	O
bool	bool
fd_needs_closing	bool
=	O
false	int
;	O
DIR	struct
*	O
dirstream	pointer
=	O
NULL	O
;	O
dev_t	long
rootdev	long
,	O
thisdev	long
;	O
ino_t	long
rootino	long
,	O
thisino	long
;	O
char	O
*	O
dir	pointer
;	O
register	O
char	O
*	O
dirp	pointer
;	O
struct	O
stat	struct
st	struct
;	O
size_t	long
allocated	long
=	O
size	long
;	O
size_t	long
used	long
;	O
dir	pointer
=	O
getcwd	function
(	O
buf	pointer
,	O
size	long
)	O
;	O
if	O
(	O
dir	pointer
||	O
(	O
size	long
&&	O
errno	O
==	O
ERANGE	int
)	O
)	O
return	O
dir	pointer
;	O
if	O
(	O
errno	O
==	O
EINVAL	int
&&	O
buf	pointer
==	O
NULL	O
&&	O
size	long
==	O
0	int
)	O
{	O
char	O
big_buffer	array
[	O
BIG_FILE_NAME_LENGTH	int
+	O
1	int
]	O
;	O
dir	pointer
=	O
getcwd	function
(	O
big_buffer	array
,	O
sizeof	O
big_buffer	array
)	O
;	O
if	O
(	O
dir	pointer
)	O
return	O
strdup	function
(	O
dir	pointer
)	O
;	O
}	O
if	O
(	O
size	long
==	O
0	int
)	O
{	O
if	O
(	O
buf	pointer
!=	O
NULL	O
)	O
{	O
__set_errno	O
(	O
EINVAL	int
)	O
;	O
return	O
NULL	O
;	O
}	O
allocated	long
=	O
BIG_FILE_NAME_LENGTH	int
+	O
1	int
;	O
}	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
{	O
dir	pointer
=	O
malloc	function
(	O
allocated	long
)	O
;	O
if	O
(	O
dir	pointer
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
else	O
dir	pointer
=	O
buf	pointer
;	O
dirp	pointer
=	O
dir	pointer
+	O
allocated	long
;	O
*	O
--	O
dirp	pointer
=	O
'\0'	O
;	O
if	O
(	O
__lstat	O
(	O
"."	pointer
,	O
&	O
st	struct
)	O
<	O
0	int
)	O
goto	O
lose	O
;	O
thisdev	long
=	O
st	struct
.	O
st_dev	long
;	O
thisino	long
=	O
st	struct
.	O
st_ino	long
;	O
if	O
(	O
__lstat	O
(	O
"/"	pointer
,	O
&	O
st	struct
)	O
<	O
0	int
)	O
goto	O
lose	O
;	O
rootdev	long
=	O
st	struct
.	O
st_dev	long
;	O
rootino	long
=	O
st	struct
.	O
st_ino	long
;	O
while	O
(	O
!	O
(	O
thisdev	long
==	O
rootdev	long
&&	O
thisino	long
==	O
rootino	long
)	O
)	O
{	O
struct	O
dirent	struct
*	O
d	pointer
;	O
dev_t	long
dotdev	long
;	O
ino_t	long
dotino	long
;	O
bool	bool
mount_point	bool
;	O
int	O
parent_status	int
;	O
size_t	long
dirroom	long
;	O
size_t	long
namlen	long
;	O
bool	bool
use_d_ino	bool
=	O
true	int
;	O
fd	int
=	O
openat	function
(	O
fd	int
,	O
".."	pointer
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
goto	O
lose	O
;	O
fd_needs_closing	bool
=	O
true	int
;	O
parent_status	int
=	O
fstat	function
(	O
fd	int
,	O
&	O
st	struct
)	O
;	O
if	O
(	O
parent_status	int
!=	O
0	int
)	O
goto	O
lose	O
;	O
if	O
(	O
dirstream	pointer
&&	O
__closedir	O
(	O
dirstream	pointer
)	O
!=	O
0	int
)	O
{	O
dirstream	pointer
=	O
NULL	O
;	O
goto	O
lose	O
;	O
}	O
dotdev	long
=	O
st	struct
.	O
st_dev	long
;	O
dotino	long
=	O
st	struct
.	O
st_ino	long
;	O
mount_point	bool
=	O
dotdev	long
!=	O
thisdev	long
;	O
dirstream	pointer
=	O
fdopendir	function
(	O
fd	int
)	O
;	O
if	O
(	O
dirstream	pointer
==	O
NULL	O
)	O
goto	O
lose	O
;	O
fd_needs_closing	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
__set_errno	O
(	O
0	int
)	O
;	O
d	pointer
=	O
__readdir	O
(	O
dirstream	pointer
)	O
;	O
if	O
(	O
d	pointer
==	O
NULL	O
&&	O
errno	O
==	O
0	int
&&	O
use_d_ino	bool
)	O
{	O
use_d_ino	bool
=	O
false	int
;	O
rewinddir	function
(	O
dirstream	pointer
)	O
;	O
d	pointer
=	O
__readdir	O
(	O
dirstream	pointer
)	O
;	O
}	O
if	O
(	O
d	pointer
==	O
NULL	O
)	O
{	O
if	O
(	O
errno	O
==	O
0	int
)	O
__set_errno	O
(	O
ENOENT	int
)	O
;	O
goto	O
lose	O
;	O
}	O
if	O
(	O
d	pointer
->	O
d_name	array
[	O
0	int
]	O
==	O
'.'	O
&&	O
(	O
d	pointer
->	O
d_name	array
[	O
1	int
]	O
==	O
'\0'	O
||	O
(	O
d	pointer
->	O
d_name	array
[	O
1	int
]	O
==	O
'.'	O
&&	O
d	pointer
->	O
d_name	array
[	O
2	int
]	O
==	O
'\0'	O
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
use_d_ino	bool
)	O
{	O
bool	bool
match	bool
=	O
(	O
MATCHING_INO	O
(	O
d	pointer
,	O
thisino	long
)	O
||	O
mount_point	bool
)	O
;	O
if	O
(	O
!	O
match	bool
)	O
continue	O
;	O
}	O
{	O
int	O
entry_status	int
;	O
entry_status	int
=	O
fstatat	function
(	O
fd	int
,	O
d	pointer
->	O
d_name	array
,	O
&	O
st	struct
,	O
AT_SYMLINK_NOFOLLOW	int
)	O
;	O
if	O
(	O
entry_status	int
==	O
0	int
&&	O
S_ISDIR	O
(	O
st	struct
.	O
st_mode	int
)	O
&&	O
st	struct
.	O
st_dev	long
==	O
thisdev	long
&&	O
st	struct
.	O
st_ino	long
==	O
thisino	long
)	O
break	O
;	O
}	O
}	O
dirroom	long
=	O
dirp	pointer
-	O
dir	pointer
;	O
namlen	long
=	O
_D_EXACT_NAMLEN	O
(	O
d	pointer
)	O
;	O
if	O
(	O
dirroom	long
<=	O
namlen	long
)	O
{	O
if	O
(	O
size	long
!=	O
0	int
)	O
{	O
__set_errno	O
(	O
ERANGE	int
)	O
;	O
goto	O
lose	O
;	O
}	O
else	O
{	O
char	O
*	O
tmp	pointer
;	O
size_t	long
oldsize	long
=	O
allocated	long
;	O
allocated	long
+=	O
MAX	O
(	O
allocated	long
,	O
namlen	long
)	O
;	O
if	O
(	O
allocated	long
<	O
oldsize	long
||	O
!	O
(	O
tmp	pointer
=	O
realloc	function
(	O
dir	pointer
,	O
allocated	long
)	O
)	O
)	O
goto	O
memory_exhausted	O
;	O
dirp	pointer
=	O
memcpy	function
(	O
tmp	pointer
+	O
allocated	long
-	O
(	O
oldsize	long
-	O
dirroom	long
)	O
,	O
tmp	pointer
+	O
dirroom	long
,	O
oldsize	long
-	O
dirroom	long
)	O
;	O
dir	pointer
=	O
tmp	pointer
;	O
}	O
}	O
dirp	pointer
-=	O
namlen	long
;	O
memcpy	function
(	O
dirp	pointer
,	O
d	pointer
->	O
d_name	array
,	O
namlen	long
)	O
;	O
*	O
--	O
dirp	pointer
=	O
'/'	O
;	O
thisdev	long
=	O
dotdev	long
;	O
thisino	long
=	O
dotino	long
;	O
}	O
if	O
(	O
dirstream	pointer
&&	O
__closedir	O
(	O
dirstream	pointer
)	O
!=	O
0	int
)	O
{	O
dirstream	pointer
=	O
NULL	O
;	O
goto	O
lose	O
;	O
}	O
if	O
(	O
dirp	pointer
==	O
&	O
dir	pointer
[	O
allocated	long
-	O
1	int
]	O
)	O
*	O
--	O
dirp	pointer
=	O
'/'	O
;	O
used	long
=	O
dir	pointer
+	O
allocated	long
-	O
dirp	pointer
;	O
memmove	function
(	O
dir	pointer
,	O
dirp	pointer
,	O
used	long
)	O
;	O
if	O
(	O
size	long
==	O
0	int
)	O
buf	pointer
=	O
realloc	function
(	O
dir	pointer
,	O
used	long
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
buf	pointer
=	O
dir	pointer
;	O
return	O
buf	pointer
;	O
memory_exhausted	O
:	O
__set_errno	O
(	O
ENOMEM	int
)	O
;	O
lose	O
:	O
{	O
int	O
save	int
=	O
errno	O
;	O
if	O
(	O
dirstream	pointer
)	O
__closedir	O
(	O
dirstream	pointer
)	O
;	O
if	O
(	O
fd_needs_closing	bool
)	O
close	function
(	O
fd	int
)	O
;	O
if	O
(	O
buf	pointer
==	O
NULL	O
)	O
free	function
(	O
dir	pointer
)	O
;	O
__set_errno	O
(	O
save	int
)	O
;	O
}	O
return	O
NULL	O
;	O
}	O
