const	O
char	O
*	O
progname	pointer
;	O
static	O
const	O
struct	O
dispatch	struct
{	O
const	O
char	O
*	O
cmd	pointer
;	O
void	O
(	O
*	O
fn	pointer
)	O
(	O
int	O
,	O
char	O
*	O
*	O
,	O
int	O
)	O
;	O
int	O
type	enum
;	O
}	O
dispatch	struct
[	O
]	O
=	O
{	O
{	O
"mattrib"	pointer
,	O
mattrib	function
,	O
0	int
}	O
,	O
{	O
"mbadblocks"	pointer
,	O
mbadblocks	function
,	O
0	int
}	O
,	O
{	O
"mcat"	pointer
,	O
mcat	function
,	O
0	int
}	O
,	O
{	O
"mcd"	pointer
,	O
mcd	function
,	O
0	int
}	O
,	O
{	O
"mclasserase"	pointer
,	O
mclasserase	function
,	O
0	int
}	O
,	O
{	O
"mcopy"	pointer
,	O
mcopy	function
,	O
0	int
}	O
,	O
{	O
"mdel"	pointer
,	O
mdel	function
,	O
0	int
}	O
,	O
{	O
"mdeltree"	pointer
,	O
mdel	function
,	O
2	int
}	O
,	O
{	O
"mdir"	pointer
,	O
mdir	function
,	O
0	int
}	O
,	O
{	O
"mdoctorfat"	pointer
,	O
mdoctorfat	function
,	O
0	int
}	O
,	O
{	O
"mdu"	pointer
,	O
mdu	function
,	O
0	int
}	O
,	O
{	O
"mformat"	pointer
,	O
mformat	function
,	O
0	int
}	O
,	O
{	O
"minfo"	pointer
,	O
minfo	function
,	O
0	int
}	O
,	O
{	O
"mlabel"	pointer
,	O
mlabel	function
,	O
0	int
}	O
,	O
{	O
"mmd"	pointer
,	O
mmd	function
,	O
0	int
}	O
,	O
{	O
"mmount"	pointer
,	O
mmount	function
,	O
0	int
}	O
,	O
{	O
"mpartition"	pointer
,	O
mpartition	function
,	O
0	int
}	O
,	O
{	O
"mrd"	pointer
,	O
mdel	function
,	O
1	int
}	O
,	O
{	O
"mread"	pointer
,	O
mcopy	function
,	O
0	int
}	O
,	O
{	O
"mmove"	pointer
,	O
mmove	function
,	O
0	int
}	O
,	O
{	O
"mren"	pointer
,	O
mmove	function
,	O
1	int
}	O
,	O
{	O
"mshowfat"	pointer
,	O
mshowfat	function
,	O
0	int
}	O
,	O
{	O
"mshortname"	pointer
,	O
mshortname	function
,	O
0	int
}	O
,	O
{	O
"mtoolstest"	pointer
,	O
mtoolstest	function
,	O
0	int
}	O
,	O
{	O
"mtype"	pointer
,	O
mcopy	function
,	O
1	int
}	O
,	O
{	O
"mwrite"	pointer
,	O
mcopy	function
,	O
0	int
}	O
,	O
{	O
"mzip"	pointer
,	O
mzip	function
,	O
0	int
}	O
}	O
;	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
unsigned	O
int	O
i	int
;	O
const	O
char	O
*	O
name	pointer
;	O
char	O
*	O
locale	pointer
;	O
locale	pointer
=	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
if	O
(	O
locale	pointer
==	O
NULL	O
||	O
!	O
strcmp	function
(	O
locale	pointer
,	O
"C"	pointer
)	O
)	O
setlocale	function
(	O
LC_ALL	O
,	O
"en_US"	pointer
)	O
;	O
init_privs	function
(	O
)	O
;	O
if	O
(	O
sizeof	O
(	O
struct	O
partition	int
)	O
!=	O
16	int
||	O
sizeof	O
(	O
struct	O
directory	struct
)	O
!=	O
32	int
||	O
sizeof	O
(	O
struct	O
vfat_subentry	struct
)	O
!=	O
32	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Mtools has not been correctly compiled\n"	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Recompile it using a more recent compiler\n"	pointer
)	O
;	O
return	O
137	int
;	O
}	O
name	pointer
=	O
_basename	function
(	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
progname	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
if	O
(	O
argc	int
>=	O
3	int
&&	O
!	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"-c"	pointer
)	O
&&	O
!	O
strcmp	function
(	O
name	pointer
,	O
"mtools"	pointer
)	O
)	O
{	O
argc	int
-=	O
2	int
;	O
argv	pointer
+=	O
2	int
;	O
name	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
}	O
if	O
(	O
argc	int
>=	O
2	int
&&	O
(	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"-V"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"--version"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
printf	function
(	O
"%s (GNU mtools) %s\n"	pointer
,	O
name	pointer
,	O
mversion	pointer
)	O
;	O
printf	function
(	O
"configured with the following options: "	pointer
)	O
;	O
printf	function
(	O
"enable-xdf "	pointer
)	O
;	O
printf	function
(	O
"disable-vold "	pointer
)	O
;	O
printf	function
(	O
"disable-new-vold "	pointer
)	O
;	O
printf	function
(	O
"disable-debug "	pointer
)	O
;	O
printf	function
(	O
"enable-raw-term "	pointer
)	O
;	O
printf	function
(	O
"\n"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
read_config	function
(	O
)	O
;	O
setup_signal	function
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NDISPATCH	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
name	pointer
,	O
dispatch	struct
[	O
i	int
]	O
.	O
cmd	pointer
)	O
)	O
dispatch	struct
[	O
i	int
]	O
.	O
fn	pointer
(	O
argc	int
,	O
argv	pointer
,	O
dispatch	struct
[	O
i	int
]	O
.	O
type	enum
)	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
name	pointer
,	O
"mtools"	pointer
)	O
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Unknown mtools command '%s'\n"	pointer
,	O
name	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"Supported commands:"	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NDISPATCH	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
%	O
8	int
==	O
0	int
)	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
", "	pointer
)	O
;	O
fprintf	function
(	O
stderr	pointer
,	O
"%s"	pointer
,	O
dispatch	struct
[	O
i	int
]	O
.	O
cmd	pointer
)	O
;	O
}	O
putc	function
(	O
'\n'	O
,	O
stderr	pointer
)	O
;	O
return	O
1	int
;	O
}	O
int	O
helpFlag	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
return	O
(	O
argc	int
>	O
1	int
&&	O
!	O
strcmp	function
(	O
argv	pointer
[	O
1	int
]	O
,	O
"--help"	pointer
)	O
)	O
;	O
}	O
