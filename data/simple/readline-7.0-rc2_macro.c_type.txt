char	O
*	O
rl_executing_macro	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
int	O
executing_macro_index	int
;	O
static	O
char	O
*	O
current_macro	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
static	O
int	O
current_macro_size	int
;	O
static	O
int	O
current_macro_index	int
;	O
struct	O
saved_macro	struct
{	O
struct	O
saved_macro	struct
*	O
next	pointer
;	O
char	O
*	O
string	pointer
;	O
int	O
sindex	int
;	O
}	O
;	O
static	O
struct	O
saved_macro	struct
*	O
macro_list	pointer
=	O
(	O
struct	O
saved_macro	struct
*	O
)	O
NULL	O
;	O
void	O
_rl_with_macro_input	function
(	O
string	pointer
)	O
char	O
*	O
string	pointer
;	O
{	O
_rl_push_executing_macro	function
(	O
)	O
;	O
rl_executing_macro	pointer
=	O
string	pointer
;	O
executing_macro_index	int
=	O
0	int
;	O
RL_SETSTATE	O
(	O
RL_STATE_MACROINPUT	int
)	O
;	O
}	O
int	O
_rl_next_macro_key	function
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
rl_executing_macro	pointer
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
rl_executing_macro	pointer
[	O
executing_macro_index	int
]	O
==	O
0	int
)	O
{	O
_rl_pop_executing_macro	function
(	O
)	O
;	O
return	O
(	O
_rl_next_macro_key	function
(	O
)	O
)	O
;	O
}	O
c	int
=	O
rl_executing_macro	pointer
[	O
executing_macro_index	int
++	O
]	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
&&	O
RL_ISSTATE	O
(	O
RL_STATE_READCMD	int
|	O
RL_STATE_MOREINPUT	int
)	O
&&	O
rl_executing_macro	pointer
[	O
executing_macro_index	int
]	O
==	O
0	int
)	O
_rl_pop_executing_macro	function
(	O
)	O
;	O
return	O
c	int
;	O
}	O
int	O
_rl_prev_macro_key	function
(	O
)	O
{	O
if	O
(	O
rl_executing_macro	pointer
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
executing_macro_index	int
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
executing_macro_index	int
--	O
;	O
return	O
(	O
rl_executing_macro	pointer
[	O
executing_macro_index	int
]	O
)	O
;	O
}	O
void	O
_rl_push_executing_macro	function
(	O
)	O
{	O
struct	O
saved_macro	struct
*	O
saver	pointer
;	O
saver	pointer
=	O
(	O
struct	O
saved_macro	struct
*	O
)	O
xmalloc	function
(	O
sizeof	O
(	O
struct	O
saved_macro	struct
)	O
)	O
;	O
saver	pointer
->	O
next	pointer
=	O
macro_list	pointer
;	O
saver	pointer
->	O
sindex	int
=	O
executing_macro_index	int
;	O
saver	pointer
->	O
string	pointer
=	O
rl_executing_macro	pointer
;	O
macro_list	pointer
=	O
saver	pointer
;	O
}	O
void	O
_rl_pop_executing_macro	function
(	O
)	O
{	O
struct	O
saved_macro	struct
*	O
macro	pointer
;	O
FREE	O
(	O
rl_executing_macro	pointer
)	O
;	O
rl_executing_macro	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
executing_macro_index	int
=	O
0	int
;	O
if	O
(	O
macro_list	pointer
)	O
{	O
macro	pointer
=	O
macro_list	pointer
;	O
rl_executing_macro	pointer
=	O
macro_list	pointer
->	O
string	pointer
;	O
executing_macro_index	int
=	O
macro_list	pointer
->	O
sindex	int
;	O
macro_list	pointer
=	O
macro_list	pointer
->	O
next	pointer
;	O
xfree	function
(	O
macro	pointer
)	O
;	O
}	O
if	O
(	O
rl_executing_macro	pointer
==	O
0	int
)	O
RL_UNSETSTATE	O
(	O
RL_STATE_MACROINPUT	int
)	O
;	O
}	O
void	O
_rl_add_macro_char	function
(	O
c	int
)	O
int	O
c	int
;	O
{	O
if	O
(	O
current_macro_index	int
+	O
1	int
>=	O
current_macro_size	int
)	O
{	O
if	O
(	O
current_macro	pointer
==	O
0	int
)	O
current_macro	pointer
=	O
(	O
char	O
*	O
)	O
xmalloc	function
(	O
current_macro_size	int
=	O
25	int
)	O
;	O
else	O
current_macro	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
current_macro	pointer
,	O
current_macro_size	int
+=	O
25	int
)	O
;	O
}	O
current_macro	pointer
[	O
current_macro_index	int
++	O
]	O
=	O
c	int
;	O
current_macro	pointer
[	O
current_macro_index	int
]	O
=	O
'\0'	O
;	O
}	O
void	O
_rl_kill_kbd_macro	function
(	O
)	O
{	O
if	O
(	O
current_macro	pointer
)	O
{	O
xfree	function
(	O
current_macro	pointer
)	O
;	O
current_macro	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
current_macro_size	int
=	O
current_macro_index	int
=	O
0	int
;	O
FREE	O
(	O
rl_executing_macro	pointer
)	O
;	O
rl_executing_macro	pointer
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
executing_macro_index	int
=	O
0	int
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MACRODEF	int
)	O
;	O
}	O
int	O
rl_start_kbd_macro	function
(	O
ignore1	int
,	O
ignore2	int
)	O
int	O
ignore1	int
,	O
ignore2	int
;	O
{	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MACRODEF	int
)	O
)	O
{	O
_rl_abort_internal	function
(	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
rl_explicit_arg	int
)	O
{	O
if	O
(	O
current_macro	pointer
)	O
_rl_with_macro_input	function
(	O
savestring	O
(	O
current_macro	pointer
)	O
)	O
;	O
}	O
else	O
current_macro_index	int
=	O
0	int
;	O
RL_SETSTATE	O
(	O
RL_STATE_MACRODEF	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_end_kbd_macro	function
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MACRODEF	int
)	O
==	O
0	int
)	O
{	O
_rl_abort_internal	function
(	O
)	O
;	O
return	O
1	int
;	O
}	O
current_macro_index	int
-=	O
rl_key_sequence_length	int
;	O
current_macro	pointer
[	O
current_macro_index	int
]	O
=	O
'\0'	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MACRODEF	int
)	O
;	O
return	O
(	O
rl_call_last_kbd_macro	function
(	O
--	O
count	int
,	O
0	int
)	O
)	O
;	O
}	O
int	O
rl_call_last_kbd_macro	function
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
if	O
(	O
current_macro	pointer
==	O
0	int
)	O
_rl_abort_internal	function
(	O
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MACRODEF	int
)	O
)	O
{	O
rl_ding	function
(	O
)	O
;	O
current_macro	pointer
[	O
--	O
current_macro_index	int
]	O
=	O
'\0'	O
;	O
return	O
0	int
;	O
}	O
while	O
(	O
count	int
--	O
)	O
_rl_with_macro_input	function
(	O
savestring	O
(	O
current_macro	pointer
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_print_last_kbd_macro	function
(	O
count	int
,	O
ignore	int
)	O
int	O
count	int
,	O
ignore	int
;	O
{	O
char	O
*	O
m	pointer
;	O
if	O
(	O
current_macro	pointer
==	O
0	int
)	O
{	O
rl_ding	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
m	pointer
=	O
_rl_untranslate_macro_value	function
(	O
current_macro	pointer
,	O
1	int
)	O
;	O
rl_crlf	function
(	O
)	O
;	O
printf	function
(	O
"%s"	pointer
,	O
m	pointer
)	O
;	O
fflush	function
(	O
stdout	pointer
)	O
;	O
rl_crlf	function
(	O
)	O
;	O
FREE	O
(	O
m	pointer
)	O
;	O
rl_forced_update_display	function
(	O
)	O
;	O
rl_display_fixed	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
rl_push_macro_input	function
(	O
macro	pointer
)	O
char	O
*	O
macro	pointer
;	O
{	O
_rl_with_macro_input	function
(	O
macro	pointer
)	O
;	O
}	O
