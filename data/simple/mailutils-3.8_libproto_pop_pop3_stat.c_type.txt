int	O
mu_pop3_stat	function
(	O
mu_pop3_t	pointer
pop3	pointer
,	O
size_t	long
*	O
msg_count	pointer
,	O
mu_off_t	long
*	O
size	long
)	O
{	O
int	O
status	int
;	O
unsigned	O
long	O
lv	long
,	O
count	long
;	O
if	O
(	O
pop3	pointer
==	O
NULL	O
||	O
msg_count	pointer
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
size	long
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
switch	O
(	O
pop3	pointer
->	O
state	enum
)	O
{	O
case	O
MU_POP3_NO_STATE	int
:	O
status	int
=	O
mu_pop3_writeline	function
(	O
pop3	pointer
,	O
"STAT\r\n"	pointer
)	O
;	O
MU_POP3_CHECK_ERROR	O
(	O
pop3	pointer
,	O
status	int
)	O
;	O
MU_POP3_FCLR	O
(	O
pop3	pointer
,	O
MU_POP3_ACK	int
)	O
;	O
pop3	pointer
->	O
state	enum
=	O
MU_POP3_STAT	int
;	O
case	O
MU_POP3_STAT	int
:	O
status	int
=	O
mu_pop3_response	function
(	O
pop3	pointer
,	O
NULL	O
)	O
;	O
MU_POP3_CHECK_EAGAIN	O
(	O
pop3	pointer
,	O
status	int
)	O
;	O
MU_POP3_CHECK_OK	O
(	O
pop3	pointer
)	O
;	O
pop3	pointer
->	O
state	enum
=	O
MU_POP3_NO_STATE	int
;	O
*	O
msg_count	pointer
=	O
0	int
;	O
lv	long
=	O
0	int
;	O
sscanf	function
(	O
pop3	pointer
->	O
ackbuf	pointer
,	O
"+OK %lu %lu"	pointer
,	O
&	O
count	long
,	O
&	O
lv	long
)	O
;	O
*	O
msg_count	pointer
=	O
count	long
;	O
*	O
size	long
=	O
lv	long
;	O
break	O
;	O
case	O
MU_POP3_ERROR	int
:	O
status	int
=	O
ECANCELED	int
;	O
break	O
;	O
default	O
:	O
status	int
=	O
EINPROGRESS	int
;	O
}	O
return	O
status	int
;	O
}	O
