size_t	long
mu_rdcache_stream_max_memory_size	long
=	O
4096	int
;	O
static	O
int	O
rdcache_read	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pnbytes	pointer
)	O
{	O
struct	O
_mu_rdcache_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_rdcache_stream	struct
*	O
)	O
str	pointer
;	O
int	O
status	int
=	O
0	int
;	O
size_t	long
nbytes	long
=	O
0	int
;	O
if	O
(	O
sp	pointer
->	O
offset	long
<	O
sp	pointer
->	O
size	long
)	O
{	O
status	int
=	O
mu_stream_read	function
(	O
sp	pointer
->	O
cache	pointer
,	O
buf	pointer
,	O
size	long
,	O
&	O
nbytes	long
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
sp	pointer
->	O
offset	long
+=	O
nbytes	long
;	O
sp	pointer
->	O
size	long
+=	O
nbytes	long
;	O
buf	pointer
+=	O
nbytes	long
;	O
size	long
-=	O
nbytes	long
;	O
}	O
else	O
if	O
(	O
sp	pointer
->	O
offset	long
>	O
sp	pointer
->	O
size	long
)	O
{	O
size_t	long
left	long
=	O
sp	pointer
->	O
offset	long
-	O
sp	pointer
->	O
size	long
;	O
status	int
=	O
mu_stream_seek	function
(	O
sp	pointer
->	O
cache	pointer
,	O
0	int
,	O
MU_SEEK_END	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_stream_copy	function
(	O
sp	pointer
->	O
cache	pointer
,	O
sp	pointer
->	O
transport	pointer
,	O
left	long
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
sp	pointer
->	O
size	long
=	O
sp	pointer
->	O
offset	long
;	O
}	O
if	O
(	O
size	long
)	O
{	O
size_t	long
rdbytes	long
;	O
status	int
=	O
mu_stream_read	function
(	O
sp	pointer
->	O
transport	pointer
,	O
buf	pointer
,	O
size	long
,	O
&	O
rdbytes	long
)	O
;	O
if	O
(	O
rdbytes	long
)	O
{	O
int	O
rc	int
;	O
sp	pointer
->	O
offset	long
+=	O
rdbytes	long
;	O
sp	pointer
->	O
size	long
+=	O
rdbytes	long
;	O
nbytes	long
+=	O
rdbytes	long
;	O
rc	int
=	O
mu_stream_write	function
(	O
sp	pointer
->	O
cache	pointer
,	O
buf	pointer
,	O
rdbytes	long
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
status	int
==	O
0	int
)	O
status	int
=	O
rc	int
;	O
}	O
}	O
}	O
if	O
(	O
pnbytes	pointer
)	O
*	O
pnbytes	pointer
=	O
nbytes	long
;	O
return	O
status	int
;	O
}	O
static	O
int	O
rdcache_size	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
off_t	long
*	O
psize	pointer
)	O
{	O
struct	O
_mu_rdcache_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_rdcache_stream	struct
*	O
)	O
str	pointer
;	O
*	O
psize	pointer
=	O
sp	pointer
->	O
size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
rdcache_seek	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
mu_off_t	long
off	long
,	O
mu_off_t	long
*	O
presult	pointer
)	O
{	O
struct	O
_mu_rdcache_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_rdcache_stream	struct
*	O
)	O
str	pointer
;	O
if	O
(	O
off	long
<	O
0	int
)	O
return	O
ESPIPE	int
;	O
if	O
(	O
off	long
<	O
sp	pointer
->	O
size	long
)	O
{	O
int	O
status	int
=	O
mu_stream_seek	function
(	O
sp	pointer
->	O
cache	pointer
,	O
off	long
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
}	O
sp	pointer
->	O
offset	long
=	O
off	long
;	O
*	O
presult	pointer
=	O
sp	pointer
->	O
offset	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
rdcache_wait	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
*	O
pflags	pointer
,	O
struct	O
timeval	struct
*	O
tvp	pointer
)	O
{	O
struct	O
_mu_rdcache_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_rdcache_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_wait	function
(	O
sp	pointer
->	O
transport	pointer
,	O
pflags	pointer
,	O
tvp	pointer
)	O
;	O
}	O
static	O
int	O
rdcache_ioctl	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
,	O
int	O
code	int
,	O
int	O
opcode	int
,	O
void	O
*	O
arg	pointer
)	O
{	O
struct	O
_mu_rdcache_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_rdcache_stream	struct
*	O
)	O
str	pointer
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
MU_IOCTL_TRANSPORT	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
mu_transport_t	pointer
*	O
ptrans	pointer
=	O
arg	pointer
;	O
switch	O
(	O
opcode	int
)	O
{	O
case	O
MU_IOCTL_OP_GET	int
:	O
ptrans	pointer
[	O
0	int
]	O
=	O
(	O
mu_transport_t	pointer
)	O
sp	pointer
->	O
transport	pointer
;	O
ptrans	pointer
[	O
1	int
]	O
=	O
NULL	O
;	O
break	O
;	O
case	O
MU_IOCTL_OP_SET	int
:	O
return	O
ENOSYS	int
;	O
default	O
:	O
return	O
EINVAL	int
;	O
}	O
}	O
break	O
;	O
case	O
MU_IOCTL_TRANSPORT_BUFFER	int
:	O
if	O
(	O
!	O
arg	pointer
)	O
return	O
EINVAL	int
;	O
else	O
{	O
struct	O
mu_buffer_query	struct
*	O
qp	pointer
=	O
arg	pointer
;	O
if	O
(	O
qp	pointer
->	O
type	int
!=	O
MU_TRANSPORT_INPUT	int
||	O
!	O
sp	pointer
->	O
transport	pointer
)	O
return	O
EINVAL	int
;	O
return	O
mu_stream_ioctl	function
(	O
sp	pointer
->	O
transport	pointer
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
;	O
}	O
default	O
:	O
return	O
mu_stream_ioctl	function
(	O
sp	pointer
->	O
transport	pointer
,	O
code	int
,	O
opcode	int
,	O
arg	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
rdcache_open	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_rdcache_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_rdcache_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_open	function
(	O
sp	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
int	O
rdcache_close	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_rdcache_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_rdcache_stream	struct
*	O
)	O
str	pointer
;	O
return	O
mu_stream_close	function
(	O
sp	pointer
->	O
transport	pointer
)	O
;	O
}	O
static	O
void	O
rdcache_done	function
(	O
struct	O
_mu_stream	struct
*	O
str	pointer
)	O
{	O
struct	O
_mu_rdcache_stream	struct
*	O
sp	pointer
=	O
(	O
struct	O
_mu_rdcache_stream	struct
*	O
)	O
str	pointer
;	O
mu_stream_unref	function
(	O
sp	pointer
->	O
transport	pointer
)	O
;	O
mu_stream_unref	function
(	O
sp	pointer
->	O
cache	pointer
)	O
;	O
}	O
int	O
mu_rdcache_stream_create	function
(	O
mu_stream_t	pointer
*	O
pstream	pointer
,	O
mu_stream_t	pointer
transport	pointer
,	O
int	O
flags	int
)	O
{	O
struct	O
_mu_rdcache_stream	struct
*	O
sp	pointer
;	O
int	O
rc	int
;	O
int	O
sflags	int
=	O
MU_STREAM_READ	int
|	O
MU_STREAM_SEEK	int
;	O
if	O
(	O
flags	int
&	O
~	O
sflags	int
)	O
return	O
EINVAL	int
;	O
sp	pointer
=	O
(	O
struct	O
_mu_rdcache_stream	struct
*	O
)	O
_mu_stream_create	function
(	O
sizeof	O
(	O
*	O
sp	pointer
)	O
,	O
sflags	int
|	O
_MU_STR_OPEN	int
)	O
;	O
if	O
(	O
!	O
sp	pointer
)	O
return	O
ENOMEM	int
;	O
sp	pointer
->	O
stream	pointer
.	O
read	pointer
=	O
rdcache_read	function
;	O
sp	pointer
->	O
stream	pointer
.	O
open	pointer
=	O
rdcache_open	function
;	O
sp	pointer
->	O
stream	pointer
.	O
close	pointer
=	O
rdcache_close	function
;	O
sp	pointer
->	O
stream	pointer
.	O
done	pointer
=	O
rdcache_done	function
;	O
sp	pointer
->	O
stream	pointer
.	O
seek	pointer
=	O
rdcache_seek	function
;	O
sp	pointer
->	O
stream	pointer
.	O
size	long
=	O
rdcache_size	function
;	O
sp	pointer
->	O
stream	pointer
.	O
ctl	pointer
=	O
rdcache_ioctl	function
;	O
sp	pointer
->	O
stream	pointer
.	O
wait	pointer
=	O
rdcache_wait	function
;	O
mu_stream_ref	function
(	O
transport	pointer
)	O
;	O
sp	pointer
->	O
transport	pointer
=	O
transport	pointer
;	O
if	O
(	O
(	O
rc	int
=	O
mu_memory_stream_create	function
(	O
&	O
sp	pointer
->	O
cache	pointer
,	O
MU_STREAM_RDWR	O
)	O
)	O
)	O
{	O
mu_stream_destroy	function
(	O
(	O
mu_stream_t	pointer
*	O
)	O
&	O
sp	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
*	O
pstream	pointer
=	O
(	O
mu_stream_t	pointer
)	O
sp	pointer
;	O
return	O
0	int
;	O
}	O
