static	O
void	O
find_moves_to_make_seki	function
(	O
void	O
)	O
;	O
static	O
void	O
update_status	function
(	O
int	O
dr	int
,	O
enum	O
dragon_status	function
new_status	enum
,	O
enum	O
dragon_status	function
new_safety	enum
)	O
;	O
static	O
int	O
close_enough_for_proper_semeai	function
(	O
int	O
apos	int
,	O
int	O
bpos	int
)	O
;	O
void	O
semeai	function
(	O
)	O
{	O
int	O
semeai_results_first	array
[	O
MAX_DRAGONS	int
]	O
[	O
MAX_DRAGONS	int
]	O
;	O
int	O
semeai_results_second	array
[	O
MAX_DRAGONS	int
]	O
[	O
MAX_DRAGONS	int
]	O
;	O
int	O
semeai_move	pointer
[	O
MAX_DRAGONS	int
]	O
[	O
MAX_DRAGONS	int
]	O
;	O
signed	O
char	O
semeai_certain	array
[	O
MAX_DRAGONS	int
]	O
[	O
MAX_DRAGONS	int
]	O
;	O
int	O
d1	int
,	O
d2	int
;	O
int	O
k	int
;	O
int	O
num_dragons	int
=	O
number_of_dragons	int
;	O
if	O
(	O
num_dragons	int
>	O
MAX_DRAGONS	int
)	O
{	O
TRACE	O
(	O
"Too many dragons!!! Semeai analysis disabled."	pointer
)	O
;	O
return	O
;	O
}	O
for	O
(	O
d1	int
=	O
0	int
;	O
d1	int
<	O
num_dragons	int
;	O
d1	int
++	O
)	O
for	O
(	O
d2	int
=	O
0	int
;	O
d2	int
<	O
num_dragons	int
;	O
d2	int
++	O
)	O
{	O
semeai_results_first	array
[	O
d1	int
]	O
[	O
d2	int
]	O
=	O
-	O
1	int
;	O
semeai_results_second	array
[	O
d1	int
]	O
[	O
d2	int
]	O
=	O
-	O
1	int
;	O
}	O
for	O
(	O
d1	int
=	O
0	int
;	O
d1	int
<	O
num_dragons	int
;	O
d1	int
++	O
)	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
dragon2	pointer
[	O
d1	int
]	O
.	O
neighbors	int
;	O
k	int
++	O
)	O
{	O
int	O
apos	int
=	O
DRAGON	O
(	O
d1	int
)	O
.	O
origin	int
;	O
int	O
bpos	int
=	O
DRAGON	O
(	O
dragon2	pointer
[	O
d1	int
]	O
.	O
adjacent	array
[	O
k	int
]	O
)	O
.	O
origin	int
;	O
int	O
result_certain	int
;	O
d2	int
=	O
dragon	int
[	O
bpos	int
]	O
.	O
id	int
;	O
if	O
(	O
dragon	int
[	O
apos	int
]	O
.	O
color	int
==	O
dragon	int
[	O
bpos	int
]	O
.	O
color	int
||	O
(	O
dragon	int
[	O
apos	int
]	O
.	O
status	enum
!=	O
DEAD	int
&&	O
dragon	int
[	O
apos	int
]	O
.	O
status	enum
!=	O
CRITICAL	int
)	O
||	O
(	O
dragon	int
[	O
bpos	int
]	O
.	O
status	enum
!=	O
DEAD	int
&&	O
dragon	int
[	O
bpos	int
]	O
.	O
status	enum
!=	O
CRITICAL	int
)	O
)	O
continue	O
;	O
if	O
(	O
worm	array
[	O
apos	int
]	O
.	O
inessential	int
||	O
DRAGON2	O
(	O
apos	int
)	O
.	O
safety	int
==	O
INESSENTIAL	int
||	O
worm	array
[	O
bpos	int
]	O
.	O
inessential	int
||	O
DRAGON2	O
(	O
bpos	int
)	O
.	O
safety	int
==	O
INESSENTIAL	int
)	O
continue	O
;	O
if	O
(	O
!	O
close_enough_for_proper_semeai	function
(	O
apos	int
,	O
bpos	int
)	O
)	O
continue	O
;	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"Considering semeai between %1m and %1m\n"	pointer
,	O
apos	int
,	O
bpos	int
)	O
;	O
owl_analyze_semeai	function
(	O
apos	int
,	O
bpos	int
,	O
&	O
(	O
semeai_results_first	array
[	O
d1	int
]	O
[	O
d2	int
]	O
)	O
,	O
&	O
(	O
semeai_results_second	array
[	O
d1	int
]	O
[	O
d2	int
]	O
)	O
,	O
&	O
(	O
semeai_move	pointer
[	O
d1	int
]	O
[	O
d2	int
]	O
)	O
,	O
1	int
,	O
&	O
result_certain	int
)	O
;	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"results if %s moves first: %s %s, %1m%s\n"	pointer
,	O
board	pointer
[	O
apos	int
]	O
==	O
BLACK	int
?	O
"black"	pointer
:	O
"white"	pointer
,	O
result_to_string	function
(	O
semeai_results_first	array
[	O
d1	int
]	O
[	O
d2	int
]	O
)	O
,	O
result_to_string	function
(	O
semeai_results_second	array
[	O
d1	int
]	O
[	O
d2	int
]	O
)	O
,	O
semeai_move	pointer
[	O
d1	int
]	O
[	O
d2	int
]	O
,	O
result_certain	int
?	O
""	pointer
:	O
" (uncertain)"	pointer
)	O
;	O
semeai_certain	array
[	O
d1	int
]	O
[	O
d2	int
]	O
=	O
result_certain	int
;	O
}	O
for	O
(	O
d1	int
=	O
0	int
;	O
d1	int
<	O
num_dragons	int
;	O
d1	int
++	O
)	O
{	O
int	O
involved_in_semeai	int
=	O
0	int
;	O
int	O
all_lost	int
=	O
1	int
;	O
for	O
(	O
d2	int
=	O
0	int
;	O
d2	int
<	O
num_dragons	int
;	O
d2	int
++	O
)	O
{	O
if	O
(	O
semeai_results_first	array
[	O
d1	int
]	O
[	O
d2	int
]	O
!=	O
-	O
1	int
)	O
{	O
involved_in_semeai	int
=	O
1	int
;	O
if	O
(	O
semeai_results_first	array
[	O
d1	int
]	O
[	O
d2	int
]	O
!=	O
0	int
)	O
{	O
all_lost	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
involved_in_semeai	int
&&	O
all_lost	int
)	O
{	O
for	O
(	O
d2	int
=	O
0	int
;	O
d2	int
<	O
num_dragons	int
;	O
d2	int
++	O
)	O
{	O
if	O
(	O
semeai_results_first	array
[	O
d1	int
]	O
[	O
d2	int
]	O
==	O
0	int
)	O
{	O
int	O
d3	int
;	O
for	O
(	O
d3	int
=	O
0	int
;	O
d3	int
<	O
num_dragons	int
;	O
d3	int
++	O
)	O
{	O
if	O
(	O
semeai_results_second	array
[	O
d3	int
]	O
[	O
d2	int
]	O
>	O
0	int
)	O
{	O
semeai_results_first	array
[	O
d3	int
]	O
[	O
d2	int
]	O
=	O
-	O
1	int
;	O
semeai_results_second	array
[	O
d3	int
]	O
[	O
d2	int
]	O
=	O
-	O
1	int
;	O
semeai_results_first	array
[	O
d2	int
]	O
[	O
d3	int
]	O
=	O
-	O
1	int
;	O
semeai_results_second	array
[	O
d2	int
]	O
[	O
d3	int
]	O
=	O
-	O
1	int
;	O
}	O
}	O
}	O
}	O
}	O
}	O
for	O
(	O
d1	int
=	O
0	int
;	O
d1	int
<	O
num_dragons	int
;	O
d1	int
++	O
)	O
{	O
int	O
semeais_found	int
=	O
0	int
;	O
int	O
best_defense	int
=	O
0	int
;	O
int	O
best_attack	int
=	O
0	int
;	O
int	O
defense_move	int
=	O
PASS_MOVE	int
;	O
int	O
attack_move	pointer
=	O
PASS_MOVE	int
;	O
int	O
defense_certain	int
=	O
-	O
1	int
;	O
int	O
attack_certain	int
=	O
-	O
1	int
;	O
int	O
semeai_attack_target	int
=	O
NO_MOVE	O
;	O
int	O
semeai_defense_target	int
=	O
NO_MOVE	O
;	O
for	O
(	O
d2	int
=	O
0	int
;	O
d2	int
<	O
num_dragons	int
;	O
d2	int
++	O
)	O
{	O
if	O
(	O
semeai_results_first	array
[	O
d1	int
]	O
[	O
d2	int
]	O
==	O
-	O
1	int
)	O
continue	O
;	O
gg_assert	O
(	O
semeai_results_second	array
[	O
d1	int
]	O
[	O
d2	int
]	O
!=	O
-	O
1	int
)	O
;	O
semeais_found	int
++	O
;	O
if	O
(	O
best_defense	int
<	O
semeai_results_first	array
[	O
d1	int
]	O
[	O
d2	int
]	O
||	O
(	O
best_defense	int
==	O
semeai_results_first	array
[	O
d1	int
]	O
[	O
d2	int
]	O
&&	O
defense_certain	int
<	O
semeai_certain	array
[	O
d1	int
]	O
[	O
d2	int
]	O
)	O
)	O
{	O
best_defense	int
=	O
semeai_results_first	array
[	O
d1	int
]	O
[	O
d2	int
]	O
;	O
defense_move	int
=	O
semeai_move	pointer
[	O
d1	int
]	O
[	O
d2	int
]	O
;	O
defense_certain	int
=	O
semeai_certain	array
[	O
d1	int
]	O
[	O
d2	int
]	O
;	O
gg_assert	O
(	O
board	pointer
[	O
dragon2	pointer
[	O
d2	int
]	O
.	O
origin	int
]	O
==	O
OTHER_COLOR	O
(	O
board	pointer
[	O
dragon2	pointer
[	O
d1	int
]	O
.	O
origin	int
]	O
)	O
)	O
;	O
semeai_defense_target	int
=	O
dragon2	pointer
[	O
d2	int
]	O
.	O
origin	int
;	O
}	O
if	O
(	O
best_attack	int
<	O
semeai_results_second	array
[	O
d2	int
]	O
[	O
d1	int
]	O
||	O
(	O
best_attack	int
==	O
semeai_results_second	array
[	O
d2	int
]	O
[	O
d1	int
]	O
&&	O
attack_certain	int
<	O
semeai_certain	array
[	O
d2	int
]	O
[	O
d1	int
]	O
)	O
)	O
{	O
best_attack	int
=	O
semeai_results_second	array
[	O
d2	int
]	O
[	O
d1	int
]	O
;	O
attack_move	pointer
=	O
semeai_move	pointer
[	O
d2	int
]	O
[	O
d1	int
]	O
;	O
attack_certain	int
=	O
semeai_certain	array
[	O
d2	int
]	O
[	O
d1	int
]	O
;	O
semeai_attack_target	int
=	O
dragon2	pointer
[	O
d2	int
]	O
.	O
origin	int
;	O
}	O
}	O
if	O
(	O
semeais_found	int
)	O
{	O
dragon2	pointer
[	O
d1	int
]	O
.	O
semeais	int
=	O
semeais_found	int
;	O
if	O
(	O
best_defense	int
!=	O
0	int
&&	O
best_attack	int
!=	O
0	int
)	O
update_status	function
(	O
DRAGON	O
(	O
d1	int
)	O
.	O
origin	int
,	O
CRITICAL	int
,	O
CRITICAL	int
)	O
;	O
else	O
if	O
(	O
best_attack	int
==	O
0	int
&&	O
attack_certain	int
)	O
update_status	function
(	O
DRAGON	O
(	O
d1	int
)	O
.	O
origin	int
,	O
ALIVE	int
,	O
ALIVE	int
)	O
;	O
dragon2	pointer
[	O
d1	int
]	O
.	O
semeai_defense_code	int
=	O
best_defense	int
;	O
dragon2	pointer
[	O
d1	int
]	O
.	O
semeai_defense_point	int
=	O
defense_move	int
;	O
dragon2	pointer
[	O
d1	int
]	O
.	O
semeai_defense_certain	int
=	O
defense_certain	int
;	O
ASSERT1	O
(	O
board	pointer
[	O
semeai_defense_target	int
]	O
==	O
OTHER_COLOR	O
(	O
board	pointer
[	O
dragon2	pointer
[	O
d1	int
]	O
.	O
origin	int
]	O
)	O
,	O
dragon2	pointer
[	O
d1	int
]	O
.	O
origin	int
)	O
;	O
dragon2	pointer
[	O
d1	int
]	O
.	O
semeai_defense_target	int
=	O
semeai_defense_target	int
;	O
dragon2	pointer
[	O
d1	int
]	O
.	O
semeai_attack_code	int
=	O
best_attack	int
;	O
dragon2	pointer
[	O
d1	int
]	O
.	O
semeai_attack_point	int
=	O
attack_move	pointer
;	O
dragon2	pointer
[	O
d1	int
]	O
.	O
semeai_attack_certain	int
=	O
attack_certain	int
;	O
dragon2	pointer
[	O
d1	int
]	O
.	O
semeai_attack_target	int
=	O
semeai_attack_target	int
;	O
}	O
}	O
find_moves_to_make_seki	function
(	O
)	O
;	O
}	O
static	O
void	O
find_moves_to_make_seki	function
(	O
)	O
{	O
int	O
str	int
;	O
int	O
defend_move	int
;	O
int	O
resulta	pointer
,	O
resultb	pointer
;	O
for	O
(	O
str	int
=	O
BOARDMIN	O
;	O
str	int
<	O
BOARDMAX	O
;	O
str	int
++	O
)	O
{	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
str	int
]	O
)	O
&&	O
is_worm_origin	function
(	O
str	int
,	O
str	int
)	O
&&	O
attack_and_defend	function
(	O
str	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
defend_move	int
)	O
&&	O
dragon	int
[	O
str	int
]	O
.	O
status	enum
==	O
DEAD	int
&&	O
DRAGON2	O
(	O
str	int
)	O
.	O
hostile_neighbors	int
==	O
1	int
)	O
{	O
int	O
k	int
;	O
int	O
color	int
=	O
board	pointer
[	O
str	int
]	O
;	O
int	O
opponent	int
=	O
NO_MOVE	O
;	O
int	O
certain	pointer
;	O
struct	O
eyevalue	struct
reduced_genus	struct
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
DRAGON2	O
(	O
str	int
)	O
.	O
neighbors	int
;	O
k	int
++	O
)	O
{	O
opponent	int
=	O
dragon2	pointer
[	O
DRAGON2	O
(	O
str	int
)	O
.	O
adjacent	array
[	O
k	int
]	O
]	O
.	O
origin	int
;	O
if	O
(	O
board	pointer
[	O
opponent	int
]	O
!=	O
color	int
)	O
break	O
;	O
}	O
ASSERT1	O
(	O
opponent	int
!=	O
NO_MOVE	O
,	O
opponent	int
)	O
;	O
if	O
(	O
dragon	int
[	O
opponent	int
]	O
.	O
status	enum
!=	O
ALIVE	int
)	O
continue	O
;	O
compute_dragon_genus	function
(	O
opponent	int
,	O
&	O
reduced_genus	struct
,	O
str	int
)	O
;	O
if	O
(	O
min_eyes	function
(	O
&	O
reduced_genus	struct
)	O
>	O
1	int
||	O
DRAGON2	O
(	O
opponent	int
)	O
.	O
moyo_size	int
>	O
10	int
||	O
DRAGON2	O
(	O
opponent	int
)	O
.	O
moyo_territorial_value	float
>	O
2.999	int
||	O
DRAGON2	O
(	O
opponent	int
)	O
.	O
escape_route	float
>	O
0	int
||	O
DRAGON2	O
(	O
str	int
)	O
.	O
escape_route	float
>	O
0	int
)	O
continue	O
;	O
owl_analyze_semeai_after_move	function
(	O
defend_move	int
,	O
color	int
,	O
opponent	int
,	O
str	int
,	O
&	O
resulta	pointer
,	O
&	O
resultb	pointer
,	O
NULL	O
,	O
1	int
,	O
&	O
certain	pointer
,	O
0	int
)	O
;	O
if	O
(	O
resultb	pointer
==	O
WIN	int
)	O
{	O
owl_analyze_semeai	function
(	O
str	int
,	O
opponent	int
,	O
&	O
resultb	pointer
,	O
&	O
resulta	pointer
,	O
&	O
defend_move	int
,	O
1	int
,	O
&	O
certain	pointer
)	O
;	O
resulta	pointer
=	O
REVERSE_RESULT	O
(	O
resulta	pointer
)	O
;	O
resultb	pointer
=	O
REVERSE_RESULT	O
(	O
resultb	pointer
)	O
;	O
}	O
if	O
(	O
resultb	pointer
!=	O
WIN	int
&&	O
certain	pointer
)	O
{	O
int	O
d	int
=	O
dragon	int
[	O
str	int
]	O
.	O
id	int
;	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"Move to make seki at %1m (%1m vs %1m)\n"	pointer
,	O
defend_move	int
,	O
str	int
,	O
opponent	int
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeais	int
++	O
;	O
update_status	function
(	O
str	int
,	O
CRITICAL	int
,	O
CRITICAL	int
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_code	int
=	O
REVERSE_RESULT	O
(	O
resultb	pointer
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_point	int
=	O
defend_move	int
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_certain	int
=	O
certain	pointer
;	O
gg_assert	O
(	O
board	pointer
[	O
opponent	int
]	O
==	O
OTHER_COLOR	O
(	O
board	pointer
[	O
dragon2	pointer
[	O
d	int
]	O
.	O
origin	int
]	O
)	O
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_target	int
=	O
opponent	int
;	O
owl_analyze_semeai_after_move	function
(	O
defend_move	int
,	O
OTHER_COLOR	O
(	O
color	int
)	O
,	O
str	int
,	O
opponent	int
,	O
&	O
resulta	pointer
,	O
NULL	O
,	O
NULL	O
,	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
resulta	pointer
!=	O
WIN	int
)	O
{	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_code	int
=	O
REVERSE_RESULT	O
(	O
resulta	pointer
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
=	O
defend_move	int
;	O
}	O
else	O
{	O
int	O
k	int
;	O
int	O
libs	pointer
[	O
MAXLIBS	O
]	O
;	O
int	O
liberties	pointer
=	O
findlib	function
(	O
str	int
,	O
MAXLIBS	O
,	O
libs	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
liberties	pointer
;	O
k	int
++	O
)	O
{	O
owl_analyze_semeai_after_move	function
(	O
libs	pointer
[	O
k	int
]	O
,	O
OTHER_COLOR	O
(	O
color	int
)	O
,	O
str	int
,	O
opponent	int
,	O
&	O
resulta	pointer
,	O
NULL	O
,	O
NULL	O
,	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
resulta	pointer
!=	O
WIN	int
)	O
{	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_code	int
=	O
REVERSE_RESULT	O
(	O
resulta	pointer
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
=	O
libs	pointer
[	O
k	int
]	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
k	int
==	O
liberties	pointer
)	O
{	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"No move to attack in semeai (%1m vs %1m), seki assumed.\n"	pointer
,	O
str	int
,	O
opponent	int
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_code	int
=	O
0	int
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
=	O
NO_MOVE	O
;	O
update_status	function
(	O
str	int
,	O
ALIVE	int
,	O
ALIVE_IN_SEKI	int
)	O
;	O
}	O
}	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"Move to prevent seki at %1m (%1m vs %1m)\n"	pointer
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
,	O
opponent	int
,	O
str	int
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_certain	int
=	O
certain	pointer
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_target	int
=	O
opponent	int
;	O
}	O
}	O
}	O
for	O
(	O
str	int
=	O
BOARDMIN	O
;	O
str	int
<	O
BOARDMAX	O
;	O
str	int
++	O
)	O
{	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
str	int
]	O
)	O
&&	O
is_worm_origin	function
(	O
str	int
,	O
str	int
)	O
&&	O
!	O
find_defense	function
(	O
str	int
,	O
NULL	O
)	O
&&	O
dragon	int
[	O
str	int
]	O
.	O
status	enum
==	O
DEAD	int
&&	O
DRAGON2	O
(	O
str	int
)	O
.	O
hostile_neighbors	int
==	O
1	int
)	O
{	O
int	O
k	int
;	O
int	O
color	int
=	O
board	pointer
[	O
str	int
]	O
;	O
int	O
opponent	int
=	O
NO_MOVE	O
;	O
int	O
certain	pointer
;	O
struct	O
eyevalue	struct
reduced_genus	struct
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
DRAGON2	O
(	O
str	int
)	O
.	O
neighbors	int
;	O
k	int
++	O
)	O
{	O
opponent	int
=	O
dragon2	pointer
[	O
DRAGON2	O
(	O
str	int
)	O
.	O
adjacent	array
[	O
k	int
]	O
]	O
.	O
origin	int
;	O
if	O
(	O
board	pointer
[	O
opponent	int
]	O
!=	O
color	int
)	O
break	O
;	O
}	O
ASSERT1	O
(	O
opponent	int
!=	O
NO_MOVE	O
,	O
opponent	int
)	O
;	O
if	O
(	O
dragon	int
[	O
opponent	int
]	O
.	O
status	enum
!=	O
ALIVE	int
)	O
continue	O
;	O
compute_dragon_genus	function
(	O
opponent	int
,	O
&	O
reduced_genus	struct
,	O
str	int
)	O
;	O
if	O
(	O
DRAGON2	O
(	O
opponent	int
)	O
.	O
moyo_size	int
>	O
10	int
||	O
min_eyes	function
(	O
&	O
reduced_genus	struct
)	O
>	O
1	int
)	O
continue	O
;	O
owl_analyze_semeai	function
(	O
str	int
,	O
opponent	int
,	O
&	O
resulta	pointer
,	O
&	O
resultb	pointer
,	O
&	O
defend_move	int
,	O
1	int
,	O
&	O
certain	pointer
)	O
;	O
if	O
(	O
resulta	pointer
!=	O
0	int
&&	O
certain	pointer
)	O
{	O
int	O
d	int
=	O
dragon	int
[	O
str	int
]	O
.	O
id	int
;	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"Move to make seki at %1m (%1m vs %1m)\n"	pointer
,	O
defend_move	int
,	O
str	int
,	O
opponent	int
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeais	int
++	O
;	O
update_status	function
(	O
str	int
,	O
CRITICAL	int
,	O
CRITICAL	int
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_code	int
=	O
resulta	pointer
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_point	int
=	O
defend_move	int
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_certain	int
=	O
certain	pointer
;	O
gg_assert	O
(	O
board	pointer
[	O
opponent	int
]	O
==	O
OTHER_COLOR	O
(	O
board	pointer
[	O
dragon2	pointer
[	O
d	int
]	O
.	O
origin	int
]	O
)	O
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_target	int
=	O
opponent	int
;	O
owl_analyze_semeai_after_move	function
(	O
defend_move	int
,	O
OTHER_COLOR	O
(	O
color	int
)	O
,	O
str	int
,	O
opponent	int
,	O
&	O
resulta	pointer
,	O
NULL	O
,	O
NULL	O
,	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
resulta	pointer
!=	O
WIN	int
)	O
{	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_code	int
=	O
REVERSE_RESULT	O
(	O
resulta	pointer
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
=	O
defend_move	int
;	O
}	O
else	O
{	O
int	O
k	int
;	O
int	O
libs	pointer
[	O
MAXLIBS	O
]	O
;	O
int	O
liberties	pointer
=	O
findlib	function
(	O
str	int
,	O
MAXLIBS	O
,	O
libs	pointer
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
liberties	pointer
;	O
k	int
++	O
)	O
{	O
owl_analyze_semeai_after_move	function
(	O
libs	pointer
[	O
k	int
]	O
,	O
OTHER_COLOR	O
(	O
color	int
)	O
,	O
str	int
,	O
opponent	int
,	O
&	O
resulta	pointer
,	O
NULL	O
,	O
NULL	O
,	O
1	int
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
resulta	pointer
!=	O
WIN	int
)	O
{	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_code	int
=	O
REVERSE_RESULT	O
(	O
resulta	pointer
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
=	O
libs	pointer
[	O
k	int
]	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
k	int
==	O
liberties	pointer
)	O
{	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"No move to attack in semeai (%1m vs %1m), seki assumed.\n"	pointer
,	O
str	int
,	O
opponent	int
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_code	int
=	O
0	int
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
=	O
NO_MOVE	O
;	O
update_status	function
(	O
str	int
,	O
ALIVE	int
,	O
ALIVE_IN_SEKI	int
)	O
;	O
}	O
}	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"Move to prevent seki at %1m (%1m vs %1m)\n"	pointer
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
,	O
opponent	int
,	O
str	int
)	O
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_certain	int
=	O
certain	pointer
;	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_target	int
=	O
opponent	int
;	O
}	O
}	O
}	O
}	O
static	O
int	O
neighbor_of_dragon	function
(	O
int	O
pos	int
,	O
int	O
origin	int
)	O
{	O
int	O
k	int
;	O
if	O
(	O
pos	int
==	O
NO_MOVE	O
)	O
return	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
4	int
;	O
k	int
++	O
)	O
if	O
(	O
ON_BOARD	O
(	O
pos	int
+	O
delta	array
[	O
k	int
]	O
)	O
&&	O
dragon	int
[	O
pos	int
+	O
delta	array
[	O
k	int
]	O
]	O
.	O
origin	int
==	O
origin	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
close_enough_for_proper_semeai	function
(	O
int	O
apos	int
,	O
int	O
bpos	int
)	O
{	O
int	O
pos	int
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
{	O
if	O
(	O
board	pointer
[	O
pos	int
]	O
==	O
EMPTY	int
&&	O
neighbor_of_dragon	function
(	O
pos	int
,	O
apos	int
)	O
&&	O
neighbor_of_dragon	function
(	O
pos	int
,	O
bpos	int
)	O
)	O
return	O
1	int
;	O
else	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
)	O
{	O
if	O
(	O
is_same_dragon	function
(	O
pos	int
,	O
apos	int
)	O
&&	O
neighbor_of_dragon	function
(	O
pos	int
,	O
bpos	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
is_same_dragon	function
(	O
pos	int
,	O
bpos	int
)	O
&&	O
neighbor_of_dragon	function
(	O
pos	int
,	O
apos	int
)	O
)	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
void	O
semeai_move_reasons	function
(	O
int	O
color	int
)	O
{	O
int	O
other	int
=	O
OTHER_COLOR	O
(	O
color	int
)	O
;	O
int	O
d	int
;	O
int	O
liberties	pointer
;	O
int	O
libs	pointer
[	O
MAXLIBS	O
]	O
;	O
int	O
r	int
;	O
for	O
(	O
d	int
=	O
0	int
;	O
d	int
<	O
number_of_dragons	int
;	O
d	int
++	O
)	O
if	O
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeais	int
&&	O
DRAGON	O
(	O
d	int
)	O
.	O
status	enum
==	O
CRITICAL	int
)	O
{	O
if	O
(	O
DRAGON	O
(	O
d	int
)	O
.	O
color	int
==	O
color	int
&&	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_point	int
&&	O
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
owl_defense_point	int
==	O
NO_MOVE	O
||	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_certain	int
>=	O
dragon2	pointer
[	O
d	int
]	O
.	O
owl_defense_certain	int
)	O
)	O
{	O
add_semeai_move	function
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_point	int
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
origin	int
)	O
;	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"Adding semeai defense move for %1m at %1m\n"	pointer
,	O
DRAGON	O
(	O
d	int
)	O
.	O
origin	int
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_point	int
)	O
;	O
if	O
(	O
neighbor_of_dragon	function
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_point	int
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_target	int
)	O
&&	O
!	O
neighbor_of_dragon	function
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_point	int
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
origin	int
)	O
&&	O
!	O
is_self_atari	function
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_point	int
,	O
color	int
)	O
)	O
{	O
liberties	pointer
=	O
findlib	function
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_target	int
,	O
MAXLIBS	O
,	O
libs	pointer
)	O
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
liberties	pointer
;	O
r	int
++	O
)	O
{	O
if	O
(	O
!	O
neighbor_of_dragon	function
(	O
libs	pointer
[	O
r	int
]	O
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
origin	int
)	O
&&	O
!	O
is_self_atari	function
(	O
libs	pointer
[	O
r	int
]	O
,	O
color	int
)	O
&&	O
libs	pointer
[	O
r	int
]	O
!=	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_point	int
)	O
add_potential_semeai_defense	function
(	O
libs	pointer
[	O
r	int
]	O
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
origin	int
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_defense_target	int
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
DRAGON	O
(	O
d	int
)	O
.	O
color	int
==	O
other	int
&&	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
&&	O
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
owl_attack_point	int
==	O
NO_MOVE	O
||	O
dragon2	pointer
[	O
d	int
]	O
.	O
owl_defense_point	int
==	O
NO_MOVE	O
||	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_certain	int
>=	O
dragon2	pointer
[	O
d	int
]	O
.	O
owl_attack_certain	int
)	O
)	O
{	O
add_semeai_move	function
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
origin	int
)	O
;	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"Adding semeai attack move for %1m at %1m\n"	pointer
,	O
DRAGON	O
(	O
d	int
)	O
.	O
origin	int
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
)	O
;	O
if	O
(	O
neighbor_of_dragon	function
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
origin	int
)	O
&&	O
!	O
neighbor_of_dragon	function
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_target	int
)	O
&&	O
!	O
is_self_atari	function
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
,	O
color	int
)	O
)	O
{	O
liberties	pointer
=	O
findlib	function
(	O
dragon2	pointer
[	O
d	int
]	O
.	O
origin	int
,	O
MAXLIBS	O
,	O
libs	pointer
)	O
;	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
liberties	pointer
;	O
r	int
++	O
)	O
{	O
if	O
(	O
!	O
neighbor_of_dragon	function
(	O
libs	pointer
[	O
r	int
]	O
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_target	int
)	O
&&	O
!	O
is_self_atari	function
(	O
libs	pointer
[	O
r	int
]	O
,	O
color	int
)	O
&&	O
libs	pointer
[	O
r	int
]	O
!=	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_point	int
)	O
add_potential_semeai_attack	function
(	O
libs	pointer
[	O
r	int
]	O
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
origin	int
,	O
dragon2	pointer
[	O
d	int
]	O
.	O
semeai_attack_target	int
)	O
;	O
}	O
}	O
}	O
}	O
}	O
static	O
void	O
update_status	function
(	O
int	O
dr	int
,	O
enum	O
dragon_status	function
new_status	enum
,	O
enum	O
dragon_status	function
new_safety	enum
)	O
{	O
int	O
pos	int
;	O
if	O
(	O
dragon	int
[	O
dr	int
]	O
.	O
status	enum
!=	O
new_status	enum
&&	O
(	O
dragon	int
[	O
dr	int
]	O
.	O
status	enum
!=	O
CRITICAL	int
||	O
new_status	enum
!=	O
DEAD	int
)	O
)	O
{	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"Changing status of %1m from %s to %s.\n"	pointer
,	O
dr	int
,	O
status_to_string	function
(	O
dragon	int
[	O
dr	int
]	O
.	O
status	enum
)	O
,	O
status_to_string	function
(	O
new_status	enum
)	O
)	O
;	O
for	O
(	O
pos	int
=	O
BOARDMIN	O
;	O
pos	int
<	O
BOARDMAX	O
;	O
pos	int
++	O
)	O
if	O
(	O
IS_STONE	O
(	O
board	pointer
[	O
pos	int
]	O
)	O
&&	O
is_same_dragon	function
(	O
dr	int
,	O
pos	int
)	O
)	O
{	O
dragon	int
[	O
pos	int
]	O
.	O
status	enum
=	O
new_status	enum
;	O
if	O
(	O
new_status	enum
!=	O
DEAD	int
)	O
worm	array
[	O
pos	int
]	O
.	O
inessential	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
DRAGON2	O
(	O
dr	int
)	O
.	O
safety	int
!=	O
new_safety	enum
&&	O
(	O
DRAGON2	O
(	O
dr	int
)	O
.	O
safety	int
!=	O
CRITICAL	int
||	O
new_safety	enum
!=	O
DEAD	int
)	O
)	O
{	O
DEBUG	O
(	O
DEBUG_SEMEAI	int
,	O
"Changing safety of %1m from %s to %s.\n"	pointer
,	O
dr	int
,	O
status_to_string	function
(	O
DRAGON2	O
(	O
dr	int
)	O
.	O
safety	int
)	O
,	O
status_to_string	function
(	O
new_safety	enum
)	O
)	O
;	O
DRAGON2	O
(	O
dr	int
)	O
.	O
safety	int
=	O
new_safety	enum
;	O
}	O
}	O
