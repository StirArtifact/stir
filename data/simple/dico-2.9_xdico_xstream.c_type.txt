int	O
stream_writez	function
(	O
dico_stream_t	pointer
str	pointer
,	O
const	O
char	O
*	O
buf	pointer
)	O
{	O
return	O
dico_stream_write	function
(	O
str	pointer
,	O
buf	pointer
,	O
strlen	function
(	O
buf	pointer
)	O
)	O
;	O
}	O
int	O
stream_printf	function
(	O
dico_stream_t	pointer
str	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
int	O
len	int
;	O
char	O
*	O
buf	pointer
;	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
fmt	pointer
)	O
;	O
len	int
=	O
vasprintf	function
(	O
&	O
buf	pointer
,	O
fmt	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
if	O
(	O
len	int
<	O
0	int
)	O
{	O
dico_log	function
(	O
L_CRIT	int
,	O
0	int
,	O
_	O
(	O
"not enough memory while formatting reply message"	pointer
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
len	int
=	O
dico_stream_write	function
(	O
str	pointer
,	O
buf	pointer
,	O
len	int
)	O
;	O
free	function
(	O
buf	pointer
)	O
;	O
return	O
len	int
;	O
}	O
void	O
stream_write_multiline	function
(	O
dico_stream_t	pointer
str	pointer
,	O
const	O
char	O
*	O
text	pointer
)	O
{	O
struct	O
utf8_iterator	struct
itr	pointer
;	O
size_t	long
len	int
=	O
0	int
;	O
for	O
(	O
utf8_iter_first	function
(	O
&	O
itr	pointer
,	O
(	O
char	O
*	O
)	O
text	pointer
)	O
;	O
!	O
utf8_iter_end_p	function
(	O
&	O
itr	pointer
)	O
;	O
utf8_iter_next	function
(	O
&	O
itr	pointer
)	O
)	O
{	O
if	O
(	O
utf8_iter_isascii	O
(	O
itr	pointer
)	O
&&	O
*	O
itr	pointer
.	O
curptr	pointer
==	O
'\n'	O
)	O
{	O
dico_stream_writeln	function
(	O
str	pointer
,	O
itr	pointer
.	O
curptr	pointer
-	O
len	int
,	O
len	int
)	O
;	O
len	int
=	O
0	int
;	O
}	O
else	O
len	int
+=	O
itr	pointer
.	O
curwidth	int
;	O
}	O
if	O
(	O
len	int
)	O
dico_stream_writeln	function
(	O
str	pointer
,	O
itr	pointer
.	O
curptr	pointer
-	O
len	int
,	O
len	int
)	O
;	O
}	O
