typedef	O
enum	O
{	O
LOWER_HALF	int
,	O
UPPER_HALF	int
}	O
state_type	enum
;	O
double	O
_pl_h_paint_text_string	function
(	O
R___	O
(	O
Plotter	struct
*	O
_plotter	pointer
)	O
const	O
unsigned	O
char	O
*	O
s	pointer
,	O
int	O
h_just	int
,	O
int	O
v_just	int
)	O
{	O
bool	enum
created_temp_string	enum
=	O
false	int
;	O
bool	enum
reencode_iso_as_roman8	enum
=	O
false	int
;	O
double	O
hp_offset	double
;	O
double	O
theta	double
,	O
costheta	double
,	O
sintheta	double
;	O
int	O
master_font_index	int
;	O
unsigned	O
char	O
*	O
t	pointer
;	O
unsigned	O
char	O
instruction_buf	array
[	O
4	int
]	O
;	O
if	O
(	O
*	O
s	pointer
==	O
(	O
unsigned	O
char	O
)	O
'\0'	O
)	O
return	O
0.0	int
;	O
if	O
(	O
v_just	int
!=	O
PL_JUST_BASE	int
||	O
h_just	int
!=	O
PL_JUST_LEFT	int
)	O
return	O
0.0	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
!=	O
PL_F_PCL	int
&&	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
!=	O
PL_F_STICK	int
)	O
return	O
0.0	int
;	O
if	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
==	O
0.0	int
)	O
return	O
0.0	int
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
x	double
==	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
x	double
||	O
_plotter	pointer
->	O
hpgl_p1	struct
.	O
y	double
==	O
_plotter	pointer
->	O
hpgl_p2	struct
.	O
y	double
)	O
return	O
_plotter	pointer
->	O
get_text_width	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
)	O
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
)	O
{	O
case	O
PL_F_PCL	int
:	O
default	O
:	O
master_font_index	int
=	O
(	O
_pl_g_pcl_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
break	O
;	O
case	O
PL_F_POSTSCRIPT	int
:	O
master_font_index	int
=	O
(	O
_pl_g_ps_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
break	O
;	O
case	O
PL_F_STICK	int
:	O
master_font_index	int
=	O
(	O
_pl_g_stick_typeface_info	array
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
typeface_index	int
]	O
.	O
fonts	array
)	O
[	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_index	int
]	O
;	O
break	O
;	O
}	O
theta	double
=	O
M_PI	int
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
text_rotation	double
/	O
180.0	int
;	O
sintheta	double
=	O
sin	function
(	O
theta	double
)	O
;	O
costheta	double
=	O
cos	function
(	O
theta	double
)	O
;	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
)	O
{	O
case	O
PL_F_PCL	int
:	O
default	O
:	O
if	O
(	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_symbol_set	int
==	O
PCL_ROMAN_8	int
&&	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
iso8859_1	enum
)	O
{	O
state_type	enum
dfa_state	enum
=	O
LOWER_HALF	int
;	O
unsigned	O
const	O
char	O
*	O
sptr	pointer
=	O
s	pointer
;	O
unsigned	O
char	O
*	O
tptr	pointer
;	O
t	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
3	int
*	O
strlen	function
(	O
(	O
const	O
char	O
*	O
)	O
s	pointer
)	O
+	O
1	int
)	O
;	O
tptr	pointer
=	O
t	pointer
;	O
created_temp_string	enum
=	O
true	int
;	O
while	O
(	O
*	O
sptr	pointer
)	O
{	O
unsigned	O
char	O
c	char
;	O
c	char
=	O
*	O
sptr	pointer
++	O
;	O
if	O
(	O
c	char
<	O
0x80	int
)	O
{	O
if	O
(	O
c	char
==	O
'-'	O
)	O
c	char
=	O
HP_ROMAN_8_MINUS_CHAR	int
;	O
if	O
(	O
dfa_state	enum
==	O
UPPER_HALF	int
)	O
{	O
*	O
tptr	pointer
++	O
=	O
SHIFT_IN	int
;	O
dfa_state	enum
=	O
LOWER_HALF	int
;	O
}	O
*	O
tptr	pointer
++	O
=	O
c	char
;	O
}	O
else	O
{	O
if	O
(	O
dfa_state	enum
==	O
LOWER_HALF	int
)	O
{	O
*	O
tptr	pointer
++	O
=	O
SHIFT_OUT	int
;	O
dfa_state	enum
=	O
UPPER_HALF	int
;	O
}	O
*	O
tptr	pointer
++	O
=	O
c	char
;	O
}	O
}	O
if	O
(	O
dfa_state	enum
==	O
UPPER_HALF	int
)	O
*	O
tptr	pointer
++	O
=	O
SHIFT_IN	int
;	O
*	O
tptr	pointer
=	O
'\0'	O
;	O
}	O
else	O
t	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
s	pointer
;	O
break	O
;	O
case	O
PL_F_POSTSCRIPT	int
:	O
t	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
s	pointer
;	O
break	O
;	O
case	O
PL_F_STICK	int
:	O
if	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_symbol_set	int
==	O
PCL_ROMAN_8	int
&&	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
iso8859_1	enum
)	O
reencode_iso_as_roman8	enum
=	O
true	int
;	O
if	O
(	O
_plotter	pointer
->	O
hpgl_version	int
<=	O
1	int
)	O
{	O
bool	enum
bogus_upper_half	enum
=	O
false	int
;	O
state_type	enum
dfa_state	enum
=	O
LOWER_HALF	int
;	O
unsigned	O
const	O
char	O
*	O
sptr	pointer
=	O
s	pointer
;	O
unsigned	O
char	O
*	O
tptr	pointer
;	O
if	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
hpgl_charset_upper	int
<	O
0	int
)	O
bogus_upper_half	enum
=	O
true	int
;	O
t	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
3	int
*	O
strlen	function
(	O
(	O
const	O
char	O
*	O
)	O
s	pointer
)	O
+	O
1	int
)	O
;	O
tptr	pointer
=	O
t	pointer
;	O
created_temp_string	enum
=	O
true	int
;	O
while	O
(	O
*	O
sptr	pointer
)	O
{	O
unsigned	O
char	O
c	char
;	O
c	char
=	O
*	O
sptr	pointer
++	O
;	O
if	O
(	O
c	char
>=	O
0x80	int
&&	O
reencode_iso_as_roman8	enum
)	O
c	char
=	O
iso_to_roman8	array
[	O
c	char
-	O
0x80	int
]	O
;	O
if	O
(	O
c	char
<	O
0x80	int
)	O
{	O
if	O
(	O
dfa_state	enum
==	O
UPPER_HALF	int
)	O
{	O
*	O
tptr	pointer
++	O
=	O
SHIFT_IN	int
;	O
dfa_state	enum
=	O
LOWER_HALF	int
;	O
}	O
*	O
tptr	pointer
++	O
=	O
c	char
;	O
}	O
else	O
if	O
(	O
bogus_upper_half	enum
==	O
false	int
)	O
{	O
if	O
(	O
dfa_state	enum
==	O
LOWER_HALF	int
)	O
{	O
*	O
tptr	pointer
++	O
=	O
SHIFT_OUT	int
;	O
dfa_state	enum
=	O
UPPER_HALF	int
;	O
}	O
*	O
tptr	pointer
++	O
=	O
c	char
-	O
0x80	int
;	O
}	O
}	O
if	O
(	O
dfa_state	enum
==	O
UPPER_HALF	int
)	O
*	O
tptr	pointer
++	O
=	O
SHIFT_IN	int
;	O
*	O
tptr	pointer
=	O
'\0'	O
;	O
}	O
else	O
{	O
unsigned	O
const	O
char	O
*	O
sptr	pointer
=	O
s	pointer
;	O
unsigned	O
char	O
*	O
tptr	pointer
;	O
t	pointer
=	O
(	O
unsigned	O
char	O
*	O
)	O
_pl_xmalloc	function
(	O
strlen	function
(	O
(	O
const	O
char	O
*	O
)	O
s	pointer
)	O
+	O
1	int
)	O
;	O
tptr	pointer
=	O
t	pointer
;	O
created_temp_string	enum
=	O
true	int
;	O
while	O
(	O
*	O
sptr	pointer
)	O
{	O
if	O
(	O
*	O
sptr	pointer
<	O
0x80	int
)	O
*	O
tptr	pointer
++	O
=	O
*	O
sptr	pointer
++	O
;	O
else	O
{	O
if	O
(	O
reencode_iso_as_roman8	enum
)	O
*	O
tptr	pointer
++	O
=	O
iso_to_roman8	array
[	O
(	O
*	O
sptr	pointer
++	O
)	O
-	O
0x80	int
]	O
;	O
else	O
*	O
tptr	pointer
++	O
=	O
*	O
sptr	pointer
++	O
;	O
}	O
}	O
*	O
tptr	pointer
=	O
'\0'	O
;	O
}	O
break	O
;	O
}	O
switch	O
(	O
_plotter	pointer
->	O
drawstate	pointer
->	O
font_type	int
)	O
{	O
case	O
PL_F_PCL	int
:	O
default	O
:	O
hp_offset	double
=	O
_pl_g_pcl_font_info	array
[	O
master_font_index	int
]	O
.	O
offset	array
[	O
*	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
s	pointer
)	O
]	O
/	O
1000.0	int
;	O
break	O
;	O
case	O
PL_F_POSTSCRIPT	int
:	O
hp_offset	double
=	O
_pl_g_ps_font_info	array
[	O
master_font_index	int
]	O
.	O
offset	array
[	O
*	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
s	pointer
)	O
]	O
/	O
1000.0	int
;	O
break	O
;	O
case	O
PL_F_STICK	int
:	O
hp_offset	double
=	O
(	O
(	O
(	O
double	O
)	O
(	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
offset	array
)	O
)	O
/	O
(	O
2.0	int
*	O
_pl_g_stick_font_info	array
[	O
master_font_index	int
]	O
.	O
raster_width_lower	int
)	O
)	O
;	O
break	O
;	O
}	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
+=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
hp_offset	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
+=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
hp_offset	double
;	O
_pl_h_set_font	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_h_set_position	function
(	O
S___	O
(	O
_plotter	pointer
)	O
)	O
;	O
_pl_h_set_pen_color	function
(	O
R___	O
(	O
_plotter	pointer
)	O
HPGL_OBJECT_LABEL	int
)	O
;	O
if	O
(	O
t	pointer
[	O
0	int
]	O
!=	O
'\0'	O
&&	O
_plotter	pointer
->	O
hpgl_bad_pen	enum
==	O
false	int
)	O
{	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
"LB"	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
(	O
const	O
char	O
*	O
)	O
t	pointer
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
instruction_buf	array
[	O
0	int
]	O
=	O
(	O
unsigned	O
char	O
)	O
3	int
;	O
instruction_buf	array
[	O
1	int
]	O
=	O
';'	O
;	O
instruction_buf	array
[	O
2	int
]	O
=	O
'\0'	O
;	O
strcpy	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
->	O
point	pointer
,	O
(	O
const	O
char	O
*	O
)	O
instruction_buf	array
)	O
;	O
_update_buffer	function
(	O
_plotter	pointer
->	O
data	pointer
->	O
page	pointer
)	O
;	O
_plotter	pointer
->	O
hpgl_position_is_unknown	enum
=	O
true	int
;	O
}	O
if	O
(	O
created_temp_string	enum
)	O
free	function
(	O
t	pointer
)	O
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
x	double
-=	O
costheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
hp_offset	double
;	O
_plotter	pointer
->	O
drawstate	pointer
->	O
pos	struct
.	O
y	double
-=	O
sintheta	double
*	O
_plotter	pointer
->	O
drawstate	pointer
->	O
true_font_size	double
*	O
hp_offset	double
;	O
return	O
_plotter	pointer
->	O
get_text_width	pointer
(	O
R___	O
(	O
_plotter	pointer
)	O
s	pointer
)	O
;	O
}	O
