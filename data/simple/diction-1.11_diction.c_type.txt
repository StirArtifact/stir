struct	O
badPhrase	struct
{	O
char	O
*	O
phrase	pointer
;	O
regex_t	struct
phrase_r	struct
;	O
char	O
*	O
suggest	pointer
;	O
int	O
beginner	int
;	O
}	O
;	O
static	O
int	O
doubleWords	int
=	O
1	int
;	O
static	O
char	O
phraseLanguage	array
[	O
32	int
]	O
;	O
static	O
struct	O
badPhrase	struct
*	O
badPhrases	pointer
=	O
(	O
struct	O
badPhrase	struct
*	O
)	O
0	int
;	O
static	O
int	O
badPhraseCapacity	int
=	O
0	int
;	O
static	O
int	O
badPhraseSize	int
=	O
0	int
;	O
static	O
int	O
sentences	int
,	O
hits	int
;	O
static	O
int	O
beginner	int
=	O
0	int
;	O
static	O
int	O
quiet	int
=	O
0	int
;	O
static	O
int	O
suggest	pointer
=	O
0	int
;	O
static	O
void	O
loadPhrases	function
(	O
const	O
char	O
*	O
file	pointer
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
char	O
ln	array
[	O
1024	int
]	O
;	O
char	O
*	O
tab	pointer
,	O
*	O
tab2	pointer
;	O
size_t	long
l	long
;	O
int	O
fix	int
,	O
j	int
;	O
if	O
(	O
(	O
fp	pointer
=	O
fopen	function
(	O
file	pointer
,	O
"r"	pointer
)	O
)	O
==	O
(	O
FILE	struct
*	O
)	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"diction: Opening `%s' failed (%s).\n"	pointer
)	O
,	O
file	pointer
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
while	O
(	O
fgets	function
(	O
ln	array
,	O
sizeof	O
(	O
ln	array
)	O
,	O
fp	pointer
)	O
)	O
{	O
l	long
=	O
strlen	function
(	O
ln	array
)	O
;	O
if	O
(	O
l	long
&&	O
ln	array
[	O
l	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
ln	array
[	O
--	O
l	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
ln	array
[	O
0	int
]	O
)	O
{	O
int	O
err	int
;	O
if	O
(	O
badPhraseSize	int
==	O
badPhraseCapacity	int
)	O
{	O
if	O
(	O
(	O
badPhrases	pointer
=	O
realloc	function
(	O
badPhrases	pointer
,	O
(	O
badPhraseCapacity	int
=	O
3	int
*	O
(	O
badPhraseCapacity	int
+	O
32	int
)	O
)	O
*	O
sizeof	O
(	O
struct	O
badPhrase	struct
)	O
)	O
)	O
==	O
(	O
struct	O
badPhrase	struct
*	O
)	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"diction: out of memory.\n"	pointer
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
}	O
if	O
(	O
(	O
tab	pointer
=	O
strchr	function
(	O
ln	array
,	O
'\t'	O
)	O
)	O
)	O
{	O
*	O
tab	pointer
=	O
'\0'	O
;	O
++	O
tab	pointer
;	O
}	O
if	O
(	O
tab	pointer
!=	O
(	O
char	O
*	O
)	O
0	int
&&	O
(	O
tab2	pointer
=	O
strchr	function
(	O
tab	pointer
,	O
'\t'	O
)	O
)	O
)	O
{	O
*	O
tab2	pointer
=	O
'\0'	O
;	O
++	O
tab2	pointer
;	O
}	O
else	O
tab2	pointer
=	O
(	O
char	O
*	O
)	O
0	int
;	O
if	O
(	O
(	O
badPhrases	pointer
[	O
badPhraseSize	int
]	O
.	O
phrase	pointer
=	O
malloc	function
(	O
strlen	function
(	O
ln	array
)	O
+	O
1	int
)	O
)	O
==	O
(	O
char	O
*	O
)	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"diction: out of memory.\n"	pointer
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
strcpy	function
(	O
badPhrases	pointer
[	O
badPhraseSize	int
]	O
.	O
phrase	pointer
,	O
ln	array
)	O
;	O
if	O
(	O
tab	pointer
)	O
{	O
if	O
(	O
(	O
badPhrases	pointer
[	O
badPhraseSize	int
]	O
.	O
suggest	pointer
=	O
malloc	function
(	O
strlen	function
(	O
tab	pointer
)	O
+	O
1	int
)	O
)	O
==	O
(	O
char	O
*	O
)	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"diction: out of memory.\n"	pointer
)	O
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
strcpy	function
(	O
badPhrases	pointer
[	O
badPhraseSize	int
]	O
.	O
suggest	pointer
,	O
tab	pointer
)	O
;	O
}	O
else	O
badPhrases	pointer
[	O
badPhraseSize	int
]	O
.	O
suggest	pointer
=	O
(	O
char	O
*	O
)	O
0	int
;	O
if	O
(	O
tab2	pointer
)	O
{	O
badPhrases	pointer
[	O
badPhraseSize	int
]	O
.	O
beginner	int
=	O
1	int
;	O
}	O
else	O
{	O
badPhrases	pointer
[	O
badPhraseSize	int
]	O
.	O
beginner	int
=	O
0	int
;	O
}	O
++	O
badPhraseSize	int
;	O
}	O
}	O
for	O
(	O
fix	int
=	O
0	int
;	O
fix	int
<	O
badPhraseSize	int
;	O
++	O
fix	int
)	O
{	O
if	O
(	O
badPhrases	pointer
[	O
fix	int
]	O
.	O
suggest	pointer
&&	O
*	O
badPhrases	pointer
[	O
fix	int
]	O
.	O
suggest	pointer
==	O
'='	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
badPhraseSize	int
;	O
++	O
j	int
)	O
{	O
if	O
(	O
j	int
!=	O
fix	int
&&	O
strcmp	function
(	O
badPhrases	pointer
[	O
j	int
]	O
.	O
phrase	pointer
,	O
badPhrases	pointer
[	O
fix	int
]	O
.	O
suggest	pointer
+	O
1	int
)	O
==	O
0	int
)	O
{	O
free	function
(	O
badPhrases	pointer
[	O
fix	int
]	O
.	O
suggest	pointer
)	O
;	O
badPhrases	pointer
[	O
fix	int
]	O
.	O
suggest	pointer
=	O
badPhrases	pointer
[	O
j	int
]	O
.	O
suggest	pointer
;	O
break	O
;	O
}	O
if	O
(	O
j	int
==	O
badPhraseSize	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"diction: Warning: Unable to resolve %s.\n"	pointer
,	O
badPhrases	pointer
[	O
fix	int
]	O
.	O
suggest	pointer
)	O
;	O
}	O
}	O
}	O
}	O
}	O
static	O
void	O
diction	function
(	O
const	O
char	O
*	O
sent	pointer
,	O
size_t	long
length	long
,	O
const	O
char	O
*	O
file	pointer
,	O
int	O
line	int
)	O
{	O
const	O
char	O
*	O
lastout	pointer
=	O
sent	pointer
;	O
const	O
char	O
*	O
s	pointer
=	O
sent	pointer
;	O
const	O
char	O
*	O
end	pointer
=	O
sent	pointer
+	O
length	long
;	O
const	O
char	O
*	O
lastWord	pointer
=	O
(	O
const	O
char	O
*	O
)	O
0	int
;	O
int	O
j	int
;	O
if	O
(	O
length	long
==	O
0	int
)	O
return	O
;	O
while	O
(	O
s	pointer
<	O
end	pointer
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
badPhraseSize	int
;	O
++	O
j	int
)	O
{	O
const	O
struct	O
badPhrase	struct
*	O
bp	pointer
;	O
const	O
char	O
*	O
badword	pointer
,	O
*	O
str	pointer
;	O
bp	pointer
=	O
&	O
badPhrases	pointer
[	O
j	int
]	O
;	O
badword	pointer
=	O
bp	pointer
->	O
phrase	pointer
;	O
if	O
(	O
*	O
badword	pointer
==	O
' '	O
)	O
{	O
if	O
(	O
s	pointer
>	O
sent	pointer
&&	O
isalpha	function
(	O
*	O
(	O
s	pointer
-	O
1	int
)	O
)	O
)	O
continue	O
;	O
++	O
badword	pointer
;	O
}	O
else	O
{	O
if	O
(	O
(	O
s	pointer
-	O
2	int
)	O
<	O
sent	pointer
||	O
!	O
isalpha	function
(	O
*	O
(	O
s	pointer
-	O
1	int
)	O
)	O
||	O
!	O
isalpha	function
(	O
*	O
(	O
s	pointer
-	O
2	int
)	O
)	O
)	O
continue	O
;	O
}	O
str	pointer
=	O
s	pointer
;	O
while	O
(	O
(	O
*	O
badword	pointer
==	O
tolower	function
(	O
*	O
str	pointer
)	O
||	O
*	O
badword	pointer
==	O
*	O
str	pointer
)	O
&&	O
*	O
badword	pointer
&&	O
*	O
str	pointer
)	O
{	O
++	O
badword	pointer
;	O
++	O
str	pointer
;	O
}	O
if	O
(	O
(	O
*	O
badword	pointer
==	O
'\0'	O
&&	O
!	O
isalpha	function
(	O
*	O
str	pointer
)	O
)	O
||	O
(	O
*	O
badword	pointer
==	O
'~'	O
&&	O
isalpha	function
(	O
*	O
str	pointer
)	O
)	O
)	O
{	O
if	O
(	O
bp	pointer
->	O
suggest	pointer
&&	O
*	O
bp	pointer
->	O
suggest	pointer
!=	O
'!'	O
&&	O
bp	pointer
->	O
beginner	int
<=	O
beginner	int
)	O
{	O
++	O
hits	int
;	O
if	O
(	O
lastout	pointer
==	O
sent	pointer
)	O
{	O
if	O
(	O
quiet	int
)	O
printf	function
(	O
"%d: "	pointer
,	O
line	int
)	O
;	O
else	O
printf	function
(	O
"%s:%d: "	pointer
,	O
file	pointer
,	O
line	int
)	O
;	O
}	O
while	O
(	O
lastout	pointer
<	O
s	pointer
)	O
putc	function
(	O
*	O
lastout	pointer
++	O
,	O
stdout	pointer
)	O
;	O
putc	function
(	O
'['	O
,	O
stdout	pointer
)	O
;	O
while	O
(	O
lastout	pointer
<	O
str	pointer
)	O
putc	function
(	O
*	O
lastout	pointer
++	O
,	O
stdout	pointer
)	O
;	O
if	O
(	O
suggest	pointer
&&	O
bp	pointer
->	O
suggest	pointer
)	O
{	O
putc	function
(	O
' '	O
,	O
stdout	pointer
)	O
;	O
putc	function
(	O
'-'	O
,	O
stdout	pointer
)	O
;	O
putc	function
(	O
'>'	O
,	O
stdout	pointer
)	O
;	O
putc	function
(	O
' '	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
bp	pointer
->	O
suggest	pointer
,	O
stdout	pointer
)	O
;	O
}	O
putc	function
(	O
']'	O
,	O
stdout	pointer
)	O
;	O
}	O
s	pointer
=	O
str	pointer
-	O
1	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
doubleWords	int
)	O
{	O
const	O
char	O
*	O
badword	pointer
,	O
*	O
str	pointer
;	O
if	O
(	O
s	pointer
>	O
sent	pointer
&&	O
!	O
isalpha	function
(	O
*	O
(	O
s	pointer
-	O
1	int
)	O
)	O
)	O
{	O
badword	pointer
=	O
s	pointer
-	O
1	int
;	O
while	O
(	O
badword	pointer
>	O
sent	pointer
&&	O
!	O
isalpha	function
(	O
*	O
badword	pointer
)	O
)	O
--	O
badword	pointer
;	O
if	O
(	O
badword	pointer
>	O
sent	pointer
)	O
{	O
while	O
(	O
badword	pointer
>	O
sent	pointer
&&	O
isalpha	function
(	O
*	O
badword	pointer
)	O
)	O
--	O
badword	pointer
;	O
if	O
(	O
!	O
isalpha	function
(	O
*	O
badword	pointer
)	O
)	O
++	O
badword	pointer
;	O
str	pointer
=	O
s	pointer
;	O
while	O
(	O
*	O
badword	pointer
==	O
*	O
str	pointer
&&	O
badword	pointer
<	O
s	pointer
&&	O
isalpha	function
(	O
*	O
str	pointer
)	O
)	O
{	O
++	O
badword	pointer
;	O
++	O
str	pointer
;	O
}	O
if	O
(	O
badword	pointer
<	O
s	pointer
&&	O
!	O
isalpha	function
(	O
*	O
badword	pointer
)	O
&&	O
!	O
isalpha	function
(	O
*	O
str	pointer
)	O
)	O
{	O
if	O
(	O
lastout	pointer
==	O
sent	pointer
)	O
{	O
if	O
(	O
quiet	int
)	O
printf	function
(	O
"%d: "	pointer
,	O
line	int
)	O
;	O
else	O
printf	function
(	O
"%s:%d: "	pointer
,	O
file	pointer
,	O
line	int
)	O
;	O
}	O
while	O
(	O
lastout	pointer
<	O
s	pointer
)	O
putc	function
(	O
*	O
lastout	pointer
++	O
,	O
stdout	pointer
)	O
;	O
putc	function
(	O
'['	O
,	O
stdout	pointer
)	O
;	O
while	O
(	O
lastout	pointer
<	O
str	pointer
)	O
putc	function
(	O
*	O
lastout	pointer
++	O
,	O
stdout	pointer
)	O
;	O
if	O
(	O
suggest	pointer
)	O
{	O
putc	function
(	O
' '	O
,	O
stdout	pointer
)	O
;	O
putc	function
(	O
'-'	O
,	O
stdout	pointer
)	O
;	O
putc	function
(	O
'>'	O
,	O
stdout	pointer
)	O
;	O
putc	function
(	O
' '	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Double word."	pointer
)	O
,	O
stdout	pointer
)	O
;	O
}	O
putc	function
(	O
']'	O
,	O
stdout	pointer
)	O
;	O
lastWord	pointer
=	O
s	pointer
;	O
s	pointer
=	O
str	pointer
-	O
1	int
;	O
}	O
}	O
}	O
}	O
++	O
s	pointer
;	O
}	O
++	O
sentences	int
;	O
if	O
(	O
lastout	pointer
!=	O
sent	pointer
)	O
{	O
while	O
(	O
lastout	pointer
<	O
end	pointer
)	O
putc	function
(	O
*	O
lastout	pointer
++	O
,	O
stdout	pointer
)	O
;	O
putc	function
(	O
'\n'	O
,	O
stdout	pointer
)	O
;	O
putc	function
(	O
'\n'	O
,	O
stdout	pointer
)	O
;	O
}	O
}	O
static	O
void	O
print_usage	function
(	O
FILE	struct
*	O
handle	pointer
)	O
{	O
fputs	function
(	O
_	O
(	O
"Usage: diction [-b] [-d] [-f file [-n|-L language]] [-q] [file ...]\n       diction [--beginner] [--ignore-double-words]\n               [--file file [--no-default-file|--language]] [--quiet] [file ...]\n       diction --version\n"	pointer
)	O
,	O
handle	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array
[	O
]	O
)	O
{	O
int	O
usage	int
=	O
0	int
,	O
c	int
;	O
char	O
*	O
userPhrases	pointer
=	O
(	O
char	O
*	O
)	O
0	int
,	O
*	O
e	pointer
;	O
char	O
defaultPhrases	array
[	O
_POSIX_PATH_MAX	int
]	O
;	O
static	O
struct	O
option	struct
lopts	array
[	O
]	O
=	O
{	O
{	O
"beginner"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'b'	O
,	O
}	O
,	O
{	O
"ignore-double-words"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'd'	O
}	O
,	O
{	O
"suggest"	pointer
,	O
no_argument	int
,	O
0	int
,	O
's'	O
}	O
,	O
{	O
"file"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'f'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'h'	O
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'v'	O
}	O
,	O
{	O
"language"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'L'	O
}	O
,	O
{	O
"quiet"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'q'	O
}	O
,	O
{	O
"no-default-file"	pointer
,	O
no_argument	int
,	O
0	int
,	O
'n'	O
}	O
,	O
{	O
(	O
const	O
char	O
*	O
)	O
0	int
,	O
0	int
,	O
0	int
,	O
'\0'	O
}	O
}	O
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
e	pointer
=	O
getenv	function
(	O
"LC_MESSAGES"	pointer
)	O
;	O
if	O
(	O
e	pointer
==	O
(	O
char	O
*	O
)	O
0	int
)	O
e	pointer
=	O
getenv	function
(	O
"LC_ALL"	pointer
)	O
;	O
if	O
(	O
e	pointer
==	O
(	O
char	O
*	O
)	O
0	int
)	O
e	pointer
=	O
getenv	function
(	O
"LANG"	pointer
)	O
;	O
if	O
(	O
e	pointer
)	O
{	O
strncpy	function
(	O
phraseLanguage	array
,	O
e	pointer
,	O
sizeof	O
(	O
phraseLanguage	array
)	O
-	O
1	int
)	O
;	O
phraseLanguage	array
[	O
sizeof	O
(	O
phraseLanguage	array
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
strstr	function
(	O
phraseLanguage	array
,	O
".."	pointer
)	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"diction: Invalid string `..' in default phrase language `%s'.\n"	pointer
)	O
,	O
phraseLanguage	array
)	O
;	O
exit	function
(	O
2	int
)	O
;	O
}	O
else	O
{	O
snprintf	function
(	O
defaultPhrases	array
,	O
sizeof	O
(	O
defaultPhrases	array
)	O
,	O
SHAREDIR	O
"/diction/%s"	pointer
,	O
e	pointer
)	O
;	O
if	O
(	O
access	function
(	O
defaultPhrases	array
,	O
R_OK	int
)	O
!=	O
0	int
)	O
{	O
phraseLanguage	array
[	O
5	int
]	O
=	O
'\0'	O
;	O
snprintf	function
(	O
defaultPhrases	array
,	O
sizeof	O
(	O
defaultPhrases	array
)	O
,	O
SHAREDIR	O
"/diction/%s"	pointer
,	O
phraseLanguage	array
)	O
;	O
if	O
(	O
access	function
(	O
defaultPhrases	array
,	O
R_OK	int
)	O
!=	O
0	int
)	O
{	O
phraseLanguage	array
[	O
2	int
]	O
=	O
'\0'	O
;	O
snprintf	function
(	O
defaultPhrases	array
,	O
sizeof	O
(	O
defaultPhrases	array
)	O
,	O
SHAREDIR	O
"/diction/%s"	pointer
,	O
phraseLanguage	array
)	O
;	O
if	O
(	O
access	function
(	O
defaultPhrases	array
,	O
R_OK	int
)	O
!=	O
0	int
)	O
{	O
strcpy	function
(	O
phraseLanguage	array
,	O
"C"	pointer
)	O
;	O
}	O
}	O
}	O
}	O
}	O
else	O
strcpy	function
(	O
phraseLanguage	array
,	O
"C"	pointer
)	O
;	O
strcpy	function
(	O
defaultPhrases	array
,	O
SHAREDIR	O
"/diction/"	pointer
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	array
,	O
"bdsf:nL:qh"	pointer
,	O
lopts	array
,	O
(	O
int	O
*	O
)	O
0	int
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
c	int
)	O
{	O
case	O
'b'	O
:	O
beginner	int
=	O
1	int
;	O
break	O
;	O
case	O
'd'	O
:	O
doubleWords	int
=	O
0	int
;	O
break	O
;	O
case	O
's'	O
:	O
suggest	pointer
=	O
1	int
;	O
break	O
;	O
case	O
'f'	O
:	O
userPhrases	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'n'	O
:	O
defaultPhrases	array
[	O
0	int
]	O
=	O
'\0'	O
;	O
break	O
;	O
case	O
'L'	O
:	O
strncpy	function
(	O
phraseLanguage	array
,	O
optarg	pointer
,	O
sizeof	O
(	O
phraseLanguage	array
)	O
-	O
1	int
)	O
;	O
phraseLanguage	array
[	O
sizeof	O
(	O
phraseLanguage	array
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
break	O
;	O
case	O
'q'	O
:	O
quiet	int
=	O
1	int
;	O
break	O
;	O
case	O
'v'	O
:	O
printf	function
(	O
"GNU diction "	pointer
VERSION	pointer
"\n"	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
case	O
'h'	O
:	O
usage	int
=	O
2	int
;	O
break	O
;	O
default	O
:	O
usage	int
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
defaultPhrases	array
[	O
0	int
]	O
)	O
strcat	function
(	O
defaultPhrases	array
,	O
phraseLanguage	array
)	O
;	O
if	O
(	O
usage	int
==	O
1	int
||	O
(	O
userPhrases	pointer
==	O
(	O
char	O
*	O
)	O
0	int
&&	O
defaultPhrases	array
[	O
0	int
]	O
==	O
'\0'	O
)	O
)	O
{	O
print_usage	function
(	O
stderr	pointer
)	O
;	O
fputs	function
(	O
"\n"	pointer
,	O
stderr	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Try `diction -h' or `diction --help' for more information.\n"	pointer
)	O
,	O
stderr	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
if	O
(	O
usage	int
==	O
2	int
)	O
{	O
print_usage	function
(	O
stdout	pointer
)	O
;	O
fputs	function
(	O
"\n"	pointer
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Print wordy and commonly misused phrases in sentences.\n\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"-b, --beginner             complain about typical mistakes of beginners\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"-d, --ignore-double-words  do not complain about double words\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"-s, --suggest              suggest better wording\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"-f, --file                 also read the specified database\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"-n, --no-default-file      do not read the default phrase file\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"-L, --language             set document language\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"-q, --quiet                do not print input file name\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"-h, --help                 print this message\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"    --version              print the version\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
"\n"	pointer
,	O
stdout	pointer
)	O
;	O
fputs	function
(	O
_	O
(	O
"Report bugs to <michael@moria.de>.\n"	pointer
)	O
,	O
stdout	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
if	O
(	O
defaultPhrases	array
[	O
0	int
]	O
)	O
loadPhrases	function
(	O
defaultPhrases	array
)	O
;	O
if	O
(	O
userPhrases	pointer
)	O
loadPhrases	function
(	O
userPhrases	pointer
)	O
;	O
sentences	int
=	O
0	int
;	O
hits	int
=	O
0	int
;	O
if	O
(	O
optind	int
==	O
argc	int
)	O
sentence	function
(	O
"diction"	pointer
,	O
stdin	pointer
,	O
"(stdin)"	pointer
,	O
diction	function
,	O
phraseLanguage	array
)	O
;	O
else	O
while	O
(	O
optind	int
<	O
argc	int
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
if	O
(	O
(	O
fp	pointer
=	O
fopen	function
(	O
argv	array
[	O
optind	int
]	O
,	O
"r"	pointer
)	O
)	O
==	O
(	O
FILE	struct
*	O
)	O
0	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"diction: Opening `%s' failed (%s).\n"	pointer
)	O
,	O
argv	array
[	O
optind	int
]	O
,	O
strerror	function
(	O
errno	O
)	O
)	O
;	O
}	O
else	O
{	O
sentence	function
(	O
"diction"	pointer
,	O
fp	pointer
,	O
argv	array
[	O
optind	int
]	O
,	O
diction	function
,	O
phraseLanguage	array
)	O
;	O
fclose	function
(	O
fp	pointer
)	O
;	O
}	O
++	O
optind	int
;	O
}	O
if	O
(	O
sentences	int
==	O
0	int
)	O
{	O
printf	function
(	O
_	O
(	O
"No sentences found.\n"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
hits	int
==	O
0	int
)	O
printf	function
(	O
_	O
(	O
"No phrases "	pointer
)	O
)	O
;	O
else	O
if	O
(	O
hits	int
==	O
1	int
)	O
printf	function
(	O
_	O
(	O
"1 phrase "	pointer
)	O
)	O
;	O
else	O
printf	function
(	O
_	O
(	O
"%d phrases "	pointer
)	O
,	O
hits	int
)	O
;	O
if	O
(	O
sentences	int
==	O
1	int
)	O
printf	function
(	O
_	O
(	O
"in 1 sentence found.\n"	pointer
)	O
)	O
;	O
else	O
printf	function
(	O
_	O
(	O
"in %d sentences found.\n"	pointer
)	O
,	O
sentences	int
)	O
;	O
}	O
exit	function
(	O
0	int
)	O
;	O
}	O
