int	O
grecs_log_to_stderr	int
=	O
1	int
;	O
void	O
(	O
*	O
grecs_log_setup_hook	pointer
)	O
(	O
)	O
=	O
NULL	O
;	O
struct	O
input_file_ident	struct
{	O
ino_t	long
i_node	long
;	O
dev_t	long
device	long
;	O
}	O
;	O
struct	O
buffer_ctx	struct
{	O
struct	O
buffer_ctx	struct
*	O
prev	pointer
;	O
grecs_locus_t	struct
locus	struct
;	O
size_t	long
namelen	long
;	O
size_t	long
xlines	long
;	O
struct	O
input_file_ident	struct
id	pointer
;	O
FILE	struct
*	O
infile	pointer
;	O
}	O
;	O
extern	O
int	O
grecs_grecs__flex_debug	int
;	O
static	O
struct	O
buffer_ctx	struct
*	O
context_stack	pointer
;	O
static	O
char	O
*	O
linebufbase	pointer
=	O
NULL	O
;	O
static	O
size_t	long
linebufsize	long
=	O
0	int
;	O
static	O
char	O
*	O
linebuf	pointer
;	O
static	O
size_t	long
bufsize	long
;	O
static	O
char	O
*	O
putback_buffer	pointer
;	O
static	O
size_t	long
putback_size	long
;	O
static	O
size_t	long
putback_max	long
;	O
static	O
glob_t	struct
include_glob	struct
;	O
static	O
size_t	long
include_pos	long
;	O
static	O
int	O
include_once	int
;	O
static	O
int	O
push_source	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
once	int
)	O
;	O
static	O
int	O
pop_source	function
(	O
void	O
)	O
;	O
static	O
int	O
parse_include	function
(	O
const	O
char	O
*	O
text	pointer
,	O
int	O
once	int
)	O
;	O
ssize_t	long
grecs_getline	function
(	O
char	O
*	O
*	O
pbuf	pointer
,	O
size_t	long
*	O
psize	pointer
,	O
FILE	struct
*	O
fp	pointer
)	O
{	O
char	O
*	O
buf	pointer
=	O
*	O
pbuf	pointer
;	O
size_t	long
size	pointer
=	O
*	O
psize	pointer
;	O
ssize_t	long
off	long
=	O
0	int
;	O
if	O
(	O
!	O
buf	pointer
)	O
{	O
size	pointer
=	O
1	int
;	O
buf	pointer
=	O
grecs_malloc	function
(	O
size	pointer
)	O
;	O
}	O
do	O
{	O
if	O
(	O
off	long
==	O
size	pointer
-	O
1	int
)	O
{	O
size_t	long
nsize	long
=	O
2	int
*	O
size	pointer
;	O
if	O
(	O
nsize	long
<	O
size	pointer
)	O
grecs_alloc_die	function
(	O
)	O
;	O
buf	pointer
=	O
grecs_realloc	function
(	O
buf	pointer
,	O
nsize	long
)	O
;	O
size	pointer
=	O
nsize	long
;	O
}	O
if	O
(	O
!	O
fgets	function
(	O
buf	pointer
+	O
off	long
,	O
size	pointer
-	O
off	long
,	O
fp	pointer
)	O
)	O
{	O
if	O
(	O
off	long
==	O
0	int
)	O
off	long
=	O
-	O
1	int
;	O
break	O
;	O
}	O
off	long
+=	O
strlen	function
(	O
buf	pointer
+	O
off	long
)	O
;	O
}	O
while	O
(	O
buf	pointer
[	O
off	long
-	O
1	int
]	O
!=	O
'\n'	O
)	O
;	O
*	O
pbuf	pointer
=	O
buf	pointer
;	O
*	O
psize	pointer
=	O
size	pointer
;	O
return	O
off	long
;	O
}	O
static	O
void	O
putback	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
size_t	long
len	long
;	O
if	O
(	O
!	O
*	O
str	pointer
)	O
return	O
;	O
len	long
=	O
strlen	function
(	O
str	pointer
)	O
+	O
1	int
;	O
if	O
(	O
len	long
>	O
putback_max	long
)	O
{	O
putback_max	long
=	O
len	long
;	O
putback_buffer	pointer
=	O
grecs_realloc	function
(	O
putback_buffer	pointer
,	O
putback_max	long
)	O
;	O
}	O
strcpy	function
(	O
putback_buffer	pointer
,	O
str	pointer
)	O
;	O
putback_size	long
=	O
len	long
-	O
1	int
;	O
}	O
static	O
void	O
pp_line_stmt	function
(	O
)	O
{	O
size_t	long
ls_size	long
;	O
size_t	long
pb_size	long
;	O
if	O
(	O
grecs_asprintf	function
(	O
&	O
linebufbase	pointer
,	O
&	O
linebufsize	long
,	O
"#line %lu \"%s\" %lu\n"	pointer
,	O
(	O
unsigned	O
long	O
)	O
POINT	O
.	O
line	int
,	O
POINT	O
.	O
file	pointer
,	O
(	O
unsigned	O
long	O
)	O
context_stack	pointer
->	O
xlines	long
)	O
)	O
grecs_alloc_die	function
(	O
)	O
;	O
ls_size	long
=	O
strlen	function
(	O
linebufbase	pointer
)	O
;	O
pb_size	long
=	O
putback_size	long
+	O
ls_size	long
+	O
1	int
;	O
if	O
(	O
pb_size	long
>	O
putback_max	long
)	O
{	O
putback_max	long
=	O
pb_size	long
;	O
putback_buffer	pointer
=	O
grecs_realloc	function
(	O
putback_buffer	pointer
,	O
putback_max	long
)	O
;	O
}	O
context_stack	pointer
->	O
xlines	long
++	O
;	O
strcpy	function
(	O
putback_buffer	pointer
+	O
putback_size	long
,	O
linebufbase	pointer
)	O
;	O
putback_size	long
+=	O
ls_size	long
;	O
}	O
static	O
int	O
next_line	function
(	O
)	O
{	O
ssize_t	long
rc	int
;	O
do	O
{	O
if	O
(	O
putback_size	long
)	O
{	O
if	O
(	O
putback_size	long
+	O
1	int
>	O
bufsize	long
)	O
{	O
bufsize	long
=	O
putback_size	long
+	O
1	int
;	O
linebuf	pointer
=	O
grecs_realloc	function
(	O
linebuf	pointer
,	O
bufsize	long
)	O
;	O
}	O
strcpy	function
(	O
linebuf	pointer
,	O
putback_buffer	pointer
)	O
;	O
rc	int
=	O
putback_size	long
;	O
putback_size	long
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
context_stack	pointer
)	O
return	O
0	int
;	O
else	O
rc	int
=	O
grecs_getline	function
(	O
&	O
linebuf	pointer
,	O
&	O
bufsize	long
,	O
INFILE	O
)	O
;	O
}	O
while	O
(	O
rc	int
==	O
-	O
1	int
&&	O
pop_source	function
(	O
)	O
==	O
0	int
)	O
;	O
return	O
rc	int
;	O
}	O
size_t	long
grecs_preproc_fill_buffer	function
(	O
char	O
*	O
buf	pointer
,	O
size_t	long
size	pointer
)	O
{	O
size_t	long
bufsize	long
=	O
size	pointer
;	O
while	O
(	O
next_line	function
(	O
)	O
>	O
0	int
)	O
{	O
char	O
*	O
p	pointer
;	O
size_t	long
len	long
;	O
int	O
is_line	int
=	O
0	int
;	O
for	O
(	O
p	pointer
=	O
linebuf	pointer
;	O
*	O
p	pointer
&&	O
isspace	function
(	O
*	O
p	pointer
)	O
;	O
p	pointer
++	O
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
'#'	O
)	O
{	O
size_t	long
l	long
;	O
for	O
(	O
p	pointer
++	O
;	O
*	O
p	pointer
&&	O
isspace	function
(	O
*	O
p	pointer
)	O
;	O
p	pointer
++	O
)	O
;	O
l	long
=	O
strlen	function
(	O
p	pointer
)	O
;	O
if	O
(	O
STRMATCH	O
(	O
p	pointer
,	O
l	long
,	O
"include_once"	pointer
)	O
)	O
{	O
if	O
(	O
parse_include	function
(	O
linebuf	pointer
,	O
1	int
)	O
)	O
putback	function
(	O
"/*include_once*/\n"	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
STRMATCH	O
(	O
p	pointer
,	O
l	long
,	O
"include"	pointer
)	O
)	O
{	O
if	O
(	O
parse_include	function
(	O
linebuf	pointer
,	O
0	int
)	O
)	O
putback	function
(	O
"/*include*/\n"	pointer
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
STRMATCH	O
(	O
p	pointer
,	O
l	long
,	O
"line"	pointer
)	O
)	O
is_line	int
=	O
1	int
;	O
}	O
len	long
=	O
strlen	function
(	O
linebuf	pointer
)	O
;	O
if	O
(	O
len	long
>	O
size	pointer
)	O
len	long
=	O
size	pointer
;	O
memcpy	function
(	O
buf	pointer
,	O
linebuf	pointer
,	O
len	long
)	O
;	O
buf	pointer
+=	O
len	long
;	O
size	pointer
-=	O
len	long
;	O
if	O
(	O
size	pointer
==	O
0	int
)	O
{	O
putback	function
(	O
linebuf	pointer
+	O
len	long
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
is_line	int
&&	O
len	long
>	O
0	int
&&	O
linebuf	pointer
[	O
len	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
POINT	O
.	O
line	int
++	O
;	O
}	O
return	O
bufsize	long
-	O
size	pointer
;	O
}	O
static	O
struct	O
buffer_ctx	struct
*	O
ctx_lookup	function
(	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
struct	O
buffer_ctx	struct
*	O
ctx	pointer
;	O
if	O
(	O
!	O
context_stack	pointer
)	O
return	O
NULL	O
;	O
for	O
(	O
ctx	pointer
=	O
context_stack	pointer
->	O
prev	pointer
;	O
ctx	pointer
;	O
ctx	pointer
=	O
ctx	pointer
->	O
prev	pointer
)	O
if	O
(	O
STAT_ID_EQ	O
(	O
*	O
st	pointer
,	O
ctx	pointer
->	O
id	pointer
)	O
)	O
break	O
;	O
return	O
ctx	pointer
;	O
}	O
const	O
char	O
*	O
grecs_preprocessor	pointer
=	O
NULL	O
;	O
static	O
struct	O
grecs_list	struct
*	O
grecs_usr_include_path	pointer
;	O
static	O
struct	O
grecs_list	struct
*	O
grecs_std_include_path	pointer
;	O
size_t	long
grecs_include_path_count	function
(	O
int	O
flag	int
)	O
{	O
size_t	long
count	long
=	O
0	int
;	O
if	O
(	O
flag	int
&	O
GRECS_STD_INCLUDE	int
)	O
count	long
+=	O
grecs_list_size	function
(	O
grecs_std_include_path	pointer
)	O
;	O
if	O
(	O
flag	int
&	O
GRECS_USR_INCLUDE	int
)	O
count	long
+=	O
grecs_list_size	function
(	O
grecs_usr_include_path	pointer
)	O
;	O
return	O
count	long
;	O
}	O
static	O
int	O
foreach_dir	function
(	O
struct	O
grecs_list	struct
*	O
list	pointer
,	O
int	O
flag	int
,	O
int	O
(	O
*	O
fun	pointer
)	O
(	O
int	O
,	O
const	O
char	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
for	O
(	O
ep	pointer
=	O
list	pointer
->	O
head	pointer
;	O
rc	int
==	O
0	int
&&	O
ep	pointer
;	O
ep	pointer
=	O
ep	pointer
->	O
next	pointer
)	O
rc	int
=	O
fun	pointer
(	O
flag	int
,	O
ep	pointer
->	O
data	pointer
,	O
data	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
grecs_foreach_include_dir	function
(	O
int	O
flag	int
,	O
int	O
(	O
*	O
fun	pointer
)	O
(	O
int	O
,	O
const	O
char	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	pointer
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
flag	int
&	O
GRECS_STD_INCLUDE	int
)	O
rc	int
=	O
foreach_dir	function
(	O
grecs_std_include_path	pointer
,	O
GRECS_STD_INCLUDE	int
,	O
fun	pointer
,	O
data	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
(	O
flag	int
&	O
GRECS_USR_INCLUDE	int
)	O
)	O
rc	int
=	O
foreach_dir	function
(	O
grecs_usr_include_path	pointer
,	O
GRECS_USR_INCLUDE	int
,	O
fun	pointer
,	O
data	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
struct	O
file_data	struct
{	O
const	O
char	O
*	O
name	pointer
;	O
size_t	long
namelen	long
;	O
char	O
*	O
buf	pointer
;	O
size_t	long
buflen	long
;	O
int	O
found	int
;	O
}	O
;	O
static	O
int	O
pp_list_find	function
(	O
struct	O
grecs_list	struct
*	O
list	pointer
,	O
struct	O
file_data	struct
*	O
dptr	pointer
)	O
{	O
struct	O
grecs_list_entry	struct
*	O
ep	pointer
;	O
if	O
(	O
!	O
list	pointer
)	O
return	O
0	int
;	O
for	O
(	O
ep	pointer
=	O
list	pointer
->	O
head	pointer
;	O
!	O
dptr	pointer
->	O
found	int
&&	O
ep	pointer
;	O
ep	pointer
=	O
ep	pointer
->	O
next	pointer
)	O
{	O
const	O
char	O
*	O
dir	pointer
=	O
ep	pointer
->	O
data	pointer
;	O
size_t	long
size	pointer
=	O
strlen	function
(	O
dir	pointer
)	O
+	O
1	int
+	O
dptr	pointer
->	O
namelen	long
+	O
1	int
;	O
if	O
(	O
size	pointer
>	O
dptr	pointer
->	O
buflen	long
)	O
{	O
dptr	pointer
->	O
buflen	long
=	O
size	pointer
;	O
dptr	pointer
->	O
buf	pointer
=	O
grecs_realloc	function
(	O
dptr	pointer
->	O
buf	pointer
,	O
dptr	pointer
->	O
buflen	long
)	O
;	O
}	O
strcpy	function
(	O
dptr	pointer
->	O
buf	pointer
,	O
dir	pointer
)	O
;	O
strcat	function
(	O
dptr	pointer
->	O
buf	pointer
,	O
"/"	pointer
)	O
;	O
strcat	function
(	O
dptr	pointer
->	O
buf	pointer
,	O
dptr	pointer
->	O
name	pointer
)	O
;	O
dptr	pointer
->	O
found	int
=	O
access	function
(	O
dptr	pointer
->	O
buf	pointer
,	O
F_OK	int
)	O
==	O
0	int
;	O
}	O
return	O
dptr	pointer
->	O
found	int
;	O
}	O
static	O
void	O
incl_free	function
(	O
void	O
*	O
data	pointer
)	O
{	O
grecs_free	function
(	O
data	pointer
)	O
;	O
}	O
void	O
grecs_include_path_clear	function
(	O
)	O
{	O
if	O
(	O
grecs_usr_include_path	pointer
)	O
grecs_list_clear	function
(	O
grecs_usr_include_path	pointer
)	O
;	O
if	O
(	O
grecs_std_include_path	pointer
)	O
grecs_list_clear	function
(	O
grecs_std_include_path	pointer
)	O
;	O
}	O
void	O
grecs_include_path_setup_v	function
(	O
char	O
*	O
*	O
dirs	pointer
)	O
{	O
if	O
(	O
!	O
grecs_usr_include_path	pointer
)	O
{	O
grecs_usr_include_path	pointer
=	O
grecs_list_create	function
(	O
)	O
;	O
grecs_usr_include_path	pointer
->	O
free_entry	pointer
=	O
incl_free	function
;	O
}	O
grecs_std_include_path	pointer
=	O
grecs_list_create	function
(	O
)	O
;	O
grecs_std_include_path	pointer
->	O
free_entry	pointer
=	O
incl_free	function
;	O
if	O
(	O
dirs	pointer
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
dirs	pointer
[	O
i	int
]	O
;	O
i	int
++	O
)	O
grecs_list_append	function
(	O
grecs_std_include_path	pointer
,	O
grecs_strdup	function
(	O
dirs	pointer
[	O
i	int
]	O
)	O
)	O
;	O
}	O
}	O
void	O
grecs_include_path_setup	function
(	O
const	O
char	O
*	O
dir	pointer
,	O
...	O
)	O
{	O
const	O
char	O
*	O
p	pointer
;	O
char	O
*	O
*	O
argv	pointer
=	O
NULL	O
;	O
size_t	long
argc	int
=	O
0	int
;	O
size_t	long
argi	long
=	O
0	int
;	O
va_list	array
ap	array
;	O
va_start	O
(	O
ap	array
,	O
dir	pointer
)	O
;	O
p	pointer
=	O
dir	pointer
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
argi	long
==	O
argc	int
)	O
{	O
if	O
(	O
argc	int
==	O
0	int
)	O
argc	int
=	O
16	int
;	O
else	O
argc	int
+=	O
16	int
;	O
argv	pointer
=	O
grecs_realloc	function
(	O
argv	pointer
,	O
argc	int
*	O
sizeof	O
(	O
argv	pointer
[	O
0	int
]	O
)	O
)	O
;	O
}	O
argv	pointer
[	O
argi	long
++	O
]	O
=	O
(	O
char	O
*	O
)	O
p	pointer
;	O
if	O
(	O
!	O
p	pointer
)	O
break	O
;	O
p	pointer
=	O
va_arg	O
(	O
ap	array
,	O
const	O
char	O
*	O
)	O
;	O
}	O
grecs_include_path_setup_v	function
(	O
argv	pointer
)	O
;	O
grecs_free	function
(	O
argv	pointer
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
}	O
void	O
grecs_preproc_add_include_dir	function
(	O
char	O
*	O
dir	pointer
)	O
{	O
if	O
(	O
!	O
grecs_usr_include_path	pointer
)	O
{	O
grecs_usr_include_path	pointer
=	O
grecs_list_create	function
(	O
)	O
;	O
grecs_usr_include_path	pointer
->	O
free_entry	pointer
=	O
incl_free	function
;	O
}	O
grecs_list_append	function
(	O
grecs_usr_include_path	pointer
,	O
grecs_strdup	function
(	O
dir	pointer
)	O
)	O
;	O
}	O
static	O
struct	O
grecs_symtab	O
*	O
incl_sources	pointer
;	O
static	O
unsigned	O
incl_hasher	function
(	O
void	O
*	O
data	pointer
,	O
unsigned	O
long	O
n_buckets	long
)	O
{	O
const	O
struct	O
input_file_ident	struct
*	O
id	pointer
=	O
data	pointer
;	O
return	O
(	O
id	pointer
->	O
i_node	long
+	O
id	pointer
->	O
device	long
)	O
%	O
n_buckets	long
;	O
}	O
static	O
int	O
incl_compare	function
(	O
void	O
const	O
*	O
data1	pointer
,	O
void	O
const	O
*	O
data2	pointer
)	O
{	O
const	O
struct	O
input_file_ident	struct
*	O
id1	pointer
=	O
data1	pointer
;	O
const	O
struct	O
input_file_ident	struct
*	O
id2	pointer
=	O
data2	pointer
;	O
return	O
!	O
(	O
id1	pointer
->	O
device	long
==	O
id2	pointer
->	O
device	long
&&	O
id1	pointer
->	O
i_node	long
==	O
id2	pointer
->	O
i_node	long
)	O
;	O
}	O
static	O
int	O
incl_copy	function
(	O
void	O
*	O
dst	pointer
,	O
void	O
*	O
src	pointer
)	O
{	O
memcpy	function
(	O
dst	pointer
,	O
src	pointer
,	O
sizeof	O
(	O
struct	O
input_file_ident	struct
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
source_lookup	function
(	O
struct	O
stat	struct
*	O
st	pointer
)	O
{	O
struct	O
input_file_ident	struct
key	pointer
;	O
int	O
install	pointer
=	O
1	int
;	O
if	O
(	O
!	O
incl_sources	pointer
)	O
{	O
incl_sources	pointer
=	O
grecs_symtab_create	function
(	O
sizeof	O
(	O
struct	O
input_file_ident	struct
)	O
,	O
incl_hasher	function
,	O
incl_compare	function
,	O
incl_copy	function
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
incl_sources	pointer
)	O
grecs_alloc_die	function
(	O
)	O
;	O
}	O
key	pointer
.	O
i_node	long
=	O
st	pointer
->	O
st_ino	long
;	O
key	pointer
.	O
device	long
=	O
st	pointer
->	O
st_dev	long
;	O
if	O
(	O
!	O
grecs_symtab_lookup_or_install	function
(	O
incl_sources	pointer
,	O
&	O
key	pointer
,	O
&	O
install	pointer
)	O
)	O
grecs_alloc_die	function
(	O
)	O
;	O
return	O
!	O
install	pointer
;	O
}	O
static	O
int	O
push_source	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
once	int
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
struct	O
buffer_ctx	struct
*	O
ctx	pointer
;	O
struct	O
stat	struct
st	pointer
;	O
int	O
rc	int
=	O
stat	struct
(	O
name	pointer
,	O
&	O
st	pointer
)	O
;	O
if	O
(	O
context_stack	pointer
)	O
{	O
if	O
(	O
rc	int
)	O
{	O
grecs_error	function
(	O
&	O
LOCUS	O
,	O
errno	O
,	O
_	O
(	O
"Cannot stat `%s'"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
POINT	O
.	O
file	pointer
&&	O
STAT_ID_EQ	O
(	O
st	pointer
,	O
context_stack	pointer
->	O
id	pointer
)	O
)	O
{	O
grecs_error	function
(	O
&	O
LOCUS	O
,	O
0	int
,	O
_	O
(	O
"Recursive inclusion"	pointer
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
(	O
ctx	pointer
=	O
ctx_lookup	function
(	O
&	O
st	pointer
)	O
)	O
)	O
{	O
grecs_error	function
(	O
&	O
LOCUS	O
,	O
0	int
,	O
_	O
(	O
"Recursive inclusion"	pointer
)	O
)	O
;	O
if	O
(	O
ctx	pointer
->	O
prev	pointer
)	O
grecs_error	function
(	O
&	O
ctx	pointer
->	O
prev	pointer
->	O
locus	struct
,	O
0	int
,	O
_	O
(	O
"`%s' already included here"	pointer
)	O
,	O
name	pointer
)	O
;	O
else	O
grecs_error	function
(	O
&	O
LOCUS	O
,	O
0	int
,	O
_	O
(	O
"`%s' already included at top level"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
rc	int
)	O
{	O
grecs_error	function
(	O
NULL	O
,	O
errno	O
,	O
_	O
(	O
"Cannot stat `%s'"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
once	int
&&	O
source_lookup	function
(	O
&	O
st	pointer
)	O
)	O
return	O
-	O
1	int
;	O
fp	pointer
=	O
fopen	function
(	O
name	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
!	O
fp	pointer
)	O
{	O
grecs_error	function
(	O
context_stack	pointer
?	O
&	O
LOCUS	O
:	O
NULL	O
,	O
errno	O
,	O
_	O
(	O
"Cannot open `%s'"	pointer
)	O
,	O
name	pointer
)	O
;	O
return	O
1	int
;	O
}	O
ctx	pointer
=	O
grecs_malloc	function
(	O
sizeof	O
(	O
*	O
ctx	pointer
)	O
)	O
;	O
ctx	pointer
->	O
locus	struct
.	O
beg	struct
.	O
file	pointer
=	O
grecs_install_text	function
(	O
name	pointer
)	O
;	O
ctx	pointer
->	O
locus	struct
.	O
beg	struct
.	O
line	int
=	O
1	int
;	O
ctx	pointer
->	O
locus	struct
.	O
beg	struct
.	O
col	int
=	O
0	int
;	O
ctx	pointer
->	O
locus	struct
.	O
end	struct
.	O
file	pointer
=	O
NULL	O
;	O
ctx	pointer
->	O
locus	struct
.	O
end	struct
.	O
line	int
=	O
ctx	pointer
->	O
locus	struct
.	O
end	struct
.	O
col	int
=	O
0	int
;	O
ctx	pointer
->	O
xlines	long
=	O
0	int
;	O
ctx	pointer
->	O
namelen	long
=	O
strlen	function
(	O
ctx	pointer
->	O
locus	struct
.	O
beg	struct
.	O
file	pointer
)	O
;	O
ctx	pointer
->	O
id	pointer
.	O
i_node	long
=	O
st	pointer
.	O
st_ino	long
;	O
ctx	pointer
->	O
id	pointer
.	O
device	long
=	O
st	pointer
.	O
st_dev	long
;	O
ctx	pointer
->	O
infile	pointer
=	O
fp	pointer
;	O
ctx	pointer
->	O
prev	pointer
=	O
context_stack	pointer
;	O
context_stack	pointer
=	O
ctx	pointer
;	O
if	O
(	O
grecs_grecs__flex_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Processing file `%s'\n"	pointer
,	O
name	pointer
)	O
;	O
pp_line_stmt	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pop_source	function
(	O
)	O
{	O
struct	O
buffer_ctx	struct
*	O
ctx	pointer
;	O
if	O
(	O
!	O
context_stack	pointer
)	O
return	O
1	int
;	O
fclose	function
(	O
INFILE	O
)	O
;	O
ctx	pointer
=	O
context_stack	pointer
->	O
prev	pointer
;	O
grecs_free	function
(	O
context_stack	pointer
)	O
;	O
context_stack	pointer
=	O
ctx	pointer
;	O
if	O
(	O
include_pos	long
<	O
include_glob	struct
.	O
gl_pathc	long
)	O
{	O
push_source	function
(	O
include_glob	struct
.	O
gl_pathv	pointer
[	O
include_pos	long
++	O
]	O
,	O
include_once	int
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
include_glob	struct
.	O
gl_pathc	long
)	O
{	O
globfree	function
(	O
&	O
include_glob	struct
)	O
;	O
include_pos	long
=	O
include_glob	struct
.	O
gl_pathc	long
=	O
0	int
;	O
}	O
if	O
(	O
!	O
context_stack	pointer
)	O
{	O
if	O
(	O
grecs_grecs__flex_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"End of input\n"	pointer
)	O
;	O
return	O
1	int
;	O
}	O
POINT	O
.	O
line	int
++	O
;	O
if	O
(	O
grecs_grecs__flex_debug	int
)	O
fprintf	function
(	O
stderr	pointer
,	O
"Resuming file `%s' at line %lu\n"	pointer
,	O
POINT	O
.	O
file	pointer
,	O
(	O
unsigned	O
long	O
)	O
POINT	O
.	O
line	int
)	O
;	O
pp_line_stmt	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
grecs_find_include_file	function
(	O
const	O
char	O
*	O
name	pointer
,	O
int	O
allow_cwd	int
)	O
{	O
static	O
char	O
*	O
cwd	short
=	O
"."	pointer
;	O
struct	O
file_data	struct
fd	struct
;	O
fd	struct
.	O
name	pointer
=	O
name	pointer
;	O
fd	struct
.	O
namelen	long
=	O
strlen	function
(	O
name	pointer
)	O
;	O
fd	struct
.	O
buf	pointer
=	O
NULL	O
;	O
fd	struct
.	O
buflen	long
=	O
0	int
;	O
fd	struct
.	O
found	int
=	O
0	int
;	O
if	O
(	O
!	O
grecs_usr_include_path	pointer
)	O
grecs_include_path_setup	function
(	O
NULL	O
)	O
;	O
if	O
(	O
allow_cwd	int
)	O
{	O
grecs_list_append	function
(	O
grecs_usr_include_path	pointer
,	O
cwd	short
)	O
;	O
pp_list_find	function
(	O
grecs_usr_include_path	pointer
,	O
&	O
fd	struct
)	O
;	O
grecs_list_remove_tail	function
(	O
grecs_usr_include_path	pointer
)	O
;	O
}	O
else	O
pp_list_find	function
(	O
grecs_usr_include_path	pointer
,	O
&	O
fd	struct
)	O
;	O
if	O
(	O
!	O
fd	struct
.	O
found	int
)	O
{	O
pp_list_find	function
(	O
grecs_std_include_path	pointer
,	O
&	O
fd	struct
)	O
;	O
if	O
(	O
!	O
fd	struct
.	O
found	int
)	O
return	O
NULL	O
;	O
}	O
return	O
fd	struct
.	O
buf	pointer
;	O
}	O
static	O
int	O
isglob	function
(	O
const	O
char	O
*	O
s	pointer
)	O
{	O
for	O
(	O
;	O
*	O
s	pointer
;	O
s	pointer
++	O
)	O
{	O
if	O
(	O
strchr	function
(	O
"*?["	pointer
,	O
*	O
s	pointer
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_include	function
(	O
const	O
char	O
*	O
text	pointer
,	O
int	O
once	int
)	O
{	O
struct	O
wordsplit	struct
ws	pointer
;	O
char	O
*	O
tmp	pointer
=	O
NULL	O
;	O
char	O
*	O
p	pointer
=	O
NULL	O
;	O
int	O
rc	int
=	O
1	int
;	O
if	O
(	O
wordsplit	struct
(	O
text	pointer
,	O
&	O
ws	pointer
,	O
WRDSF_DEFFLAGS	O
)	O
)	O
grecs_error	function
(	O
&	O
LOCUS	O
,	O
0	int
,	O
_	O
(	O
"Cannot parse include line"	pointer
)	O
)	O
;	O
else	O
if	O
(	O
ws	pointer
.	O
ws_wordc	long
!=	O
2	int
)	O
{	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
grecs_error	function
(	O
&	O
LOCUS	O
,	O
0	int
,	O
_	O
(	O
"invalid include statement"	pointer
)	O
)	O
;	O
}	O
else	O
{	O
size_t	long
len	long
;	O
int	O
allow_cwd	int
;	O
p	pointer
=	O
ws	pointer
.	O
ws_wordv	pointer
[	O
1	int
]	O
;	O
len	long
=	O
strlen	function
(	O
p	pointer
)	O
;	O
if	O
(	O
p	pointer
[	O
0	int
]	O
==	O
'<'	O
&&	O
p	pointer
[	O
len	long
-	O
1	int
]	O
==	O
'>'	O
)	O
{	O
allow_cwd	int
=	O
0	int
;	O
p	pointer
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
p	pointer
++	O
;	O
}	O
else	O
allow_cwd	int
=	O
1	int
;	O
if	O
(	O
isglob	function
(	O
p	pointer
)	O
)	O
{	O
switch	O
(	O
glob	function
(	O
p	pointer
,	O
0	int
,	O
NULL	O
,	O
&	O
include_glob	struct
)	O
)	O
{	O
case	O
0	int
:	O
include_pos	long
=	O
0	int
;	O
include_once	int
=	O
once	int
;	O
break	O
;	O
case	O
GLOB_NOSPACE	int
:	O
grecs_alloc_die	function
(	O
)	O
;	O
case	O
GLOB_NOMATCH	int
:	O
break	O
;	O
default	O
:	O
grecs_error	function
(	O
&	O
LOCUS	O
,	O
0	int
,	O
_	O
(	O
"read error"	pointer
)	O
)	O
;	O
}	O
p	pointer
=	O
NULL	O
;	O
}	O
else	O
if	O
(	O
p	pointer
[	O
0	int
]	O
!=	O
'/'	O
)	O
{	O
char	O
*	O
q	pointer
=	O
p	pointer
;	O
p	pointer
=	O
grecs_find_include_file	function
(	O
q	pointer
,	O
allow_cwd	int
)	O
;	O
if	O
(	O
!	O
p	pointer
)	O
grecs_error	function
(	O
&	O
LOCUS	O
,	O
0	int
,	O
_	O
(	O
"%s: No such file or directory"	pointer
)	O
,	O
q	pointer
)	O
;	O
}	O
}	O
if	O
(	O
p	pointer
)	O
rc	int
=	O
push_source	function
(	O
p	pointer
,	O
once	int
)	O
;	O
else	O
if	O
(	O
include_pos	long
<	O
include_glob	struct
.	O
gl_pathc	long
)	O
rc	int
=	O
push_source	function
(	O
include_glob	struct
.	O
gl_pathv	pointer
[	O
include_pos	long
++	O
]	O
,	O
once	int
)	O
;	O
grecs_free	function
(	O
tmp	pointer
)	O
;	O
wordsplit_free	function
(	O
&	O
ws	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
grecs_preproc_init	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
return	O
push_source	function
(	O
name	pointer
,	O
0	int
)	O
;	O
}	O
void	O
grecs_preproc_done	function
(	O
)	O
{	O
grecs_symtab_free	function
(	O
incl_sources	pointer
)	O
;	O
incl_sources	pointer
=	O
NULL	O
;	O
grecs_free	function
(	O
linebuf	pointer
)	O
;	O
linebuf	pointer
=	O
NULL	O
;	O
bufsize	long
=	O
0	int
;	O
grecs_free	function
(	O
putback_buffer	pointer
)	O
;	O
putback_buffer	pointer
=	O
NULL	O
;	O
putback_size	long
=	O
putback_max	long
=	O
0	int
;	O
free	function
(	O
linebufbase	pointer
)	O
;	O
linebufbase	pointer
=	O
NULL	O
;	O
linebufsize	long
=	O
0	int
;	O
}	O
int	O
grecs_preproc_run	function
(	O
const	O
char	O
*	O
config_file	pointer
,	O
const	O
char	O
*	O
extpp	pointer
)	O
{	O
size_t	long
i	int
;	O
char	O
buffer	pointer
[	O
512	int
]	O
;	O
if	O
(	O
grecs_preproc_init	function
(	O
config_file	pointer
)	O
)	O
return	O
1	int
;	O
if	O
(	O
extpp	pointer
)	O
{	O
FILE	struct
*	O
outfile	pointer
;	O
char	O
*	O
setup_file	pointer
;	O
char	O
*	O
cmd	enum
=	O
NULL	O
;	O
setup_file	pointer
=	O
grecs_find_include_file	function
(	O
"pp-setup"	pointer
,	O
1	int
)	O
;	O
if	O
(	O
setup_file	pointer
)	O
{	O
size_t	long
size	pointer
=	O
0	int
;	O
if	O
(	O
grecs_asprintf	function
(	O
&	O
cmd	enum
,	O
&	O
size	pointer
,	O
"%s %s -"	pointer
,	O
extpp	pointer
,	O
setup_file	pointer
)	O
)	O
grecs_alloc_die	function
(	O
)	O
;	O
grecs_free	function
(	O
setup_file	pointer
)	O
;	O
}	O
else	O
cmd	enum
=	O
grecs_strdup	function
(	O
extpp	pointer
)	O
;	O
outfile	pointer
=	O
popen	function
(	O
cmd	enum
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
outfile	pointer
)	O
{	O
grecs_error	function
(	O
NULL	O
,	O
errno	O
,	O
_	O
(	O
"Unable to start external preprocessor `%s'"	pointer
)	O
,	O
cmd	enum
)	O
;	O
grecs_free	function
(	O
cmd	enum
)	O
;	O
return	O
1	int
;	O
}	O
while	O
(	O
(	O
i	int
=	O
grecs_preproc_fill_buffer	function
(	O
buffer	pointer
,	O
sizeof	O
buffer	pointer
)	O
)	O
)	O
fwrite	function
(	O
buffer	pointer
,	O
1	int
,	O
i	int
,	O
outfile	pointer
)	O
;	O
pclose	function
(	O
outfile	pointer
)	O
;	O
grecs_free	function
(	O
cmd	enum
)	O
;	O
}	O
else	O
{	O
while	O
(	O
(	O
i	int
=	O
grecs_preproc_fill_buffer	function
(	O
buffer	pointer
,	O
sizeof	O
buffer	pointer
)	O
)	O
)	O
fwrite	function
(	O
buffer	pointer
,	O
1	int
,	O
i	int
,	O
stdout	pointer
)	O
;	O
}	O
grecs_preproc_done	function
(	O
)	O
;	O
return	O
0	int
;	O
}	O
FILE	struct
*	O
grecs_preproc_extrn_start	function
(	O
const	O
char	O
*	O
file_name	pointer
,	O
pid_t	int
*	O
ppid	pointer
)	O
{	O
int	O
pout	array
[	O
2	int
]	O
;	O
pid_t	int
pid	int
;	O
int	O
i	int
;	O
FILE	struct
*	O
fp	pointer
=	O
NULL	O
;	O
if	O
(	O
pipe	function
(	O
pout	array
)	O
)	O
{	O
grecs_error	function
(	O
NULL	O
,	O
errno	O
,	O
"pipe"	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
switch	O
(	O
pid	int
=	O
fork	function
(	O
)	O
)	O
{	O
case	O
0	int
:	O
if	O
(	O
pout	array
[	O
1	int
]	O
!=	O
1	int
)	O
{	O
if	O
(	O
dup2	function
(	O
pout	array
[	O
1	int
]	O
,	O
1	int
)	O
==	O
-	O
1	int
)	O
{	O
grecs_error	function
(	O
NULL	O
,	O
errno	O
,	O
"dup2"	pointer
)	O
;	O
exit	function
(	O
127	int
)	O
;	O
}	O
}	O
for	O
(	O
i	int
=	O
getdtablesize	function
(	O
)	O
;	O
i	int
>	O
2	int
;	O
i	int
--	O
)	O
close	function
(	O
i	int
)	O
;	O
if	O
(	O
!	O
grecs_log_to_stderr	int
)	O
{	O
int	O
p	pointer
[	O
2	int
]	O
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
size	pointer
=	O
0	int
;	O
FILE	struct
*	O
fp	pointer
;	O
signal	function
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
;	O
if	O
(	O
pipe	function
(	O
p	pointer
)	O
)	O
{	O
grecs_error	function
(	O
NULL	O
,	O
errno	O
,	O
"pipe"	pointer
)	O
;	O
exit	function
(	O
127	int
)	O
;	O
}	O
switch	O
(	O
pid	int
=	O
fork	function
(	O
)	O
)	O
{	O
case	O
0	int
:	O
if	O
(	O
p	pointer
[	O
1	int
]	O
!=	O
2	int
&&	O
dup2	function
(	O
p	pointer
[	O
1	int
]	O
,	O
2	int
)	O
==	O
-	O
1	int
)	O
{	O
grecs_error	function
(	O
NULL	O
,	O
errno	O
,	O
"dup2"	pointer
)	O
;	O
exit	function
(	O
127	int
)	O
;	O
}	O
close	function
(	O
p	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
grecs_preproc_run	function
(	O
file_name	pointer
,	O
grecs_preprocessor	pointer
)	O
)	O
exit	function
(	O
127	int
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
case	O
-	O
1	int
:	O
if	O
(	O
grecs_log_setup_hook	pointer
)	O
grecs_log_setup_hook	pointer
(	O
)	O
;	O
grecs_error	function
(	O
NULL	O
,	O
errno	O
,	O
_	O
(	O
"Cannot run `%s'"	pointer
)	O
,	O
grecs_preprocessor	pointer
)	O
;	O
exit	function
(	O
127	int
)	O
;	O
default	O
:	O
close	function
(	O
p	pointer
[	O
1	int
]	O
)	O
;	O
fp	pointer
=	O
fdopen	function
(	O
p	pointer
[	O
0	int
]	O
,	O
"r"	pointer
)	O
;	O
if	O
(	O
grecs_log_setup_hook	pointer
)	O
grecs_log_setup_hook	pointer
(	O
)	O
;	O
while	O
(	O
grecs_getline	function
(	O
&	O
buf	pointer
,	O
&	O
size	pointer
,	O
fp	pointer
)	O
>	O
0	int
)	O
grecs_error	function
(	O
NULL	O
,	O
0	int
,	O
"%s"	pointer
,	O
buf	pointer
)	O
;	O
}	O
}	O
else	O
{	O
grecs_preproc_run	function
(	O
file_name	pointer
,	O
grecs_preprocessor	pointer
)	O
;	O
}	O
exit	function
(	O
0	int
)	O
;	O
case	O
-	O
1	int
:	O
grecs_error	function
(	O
NULL	O
,	O
errno	O
,	O
_	O
(	O
"Cannot run `%s'"	pointer
)	O
,	O
grecs_preprocessor	pointer
)	O
;	O
break	O
;	O
default	O
:	O
close	function
(	O
pout	array
[	O
1	int
]	O
)	O
;	O
fp	pointer
=	O
fdopen	function
(	O
pout	array
[	O
0	int
]	O
,	O
"r"	pointer
)	O
;	O
break	O
;	O
}	O
*	O
ppid	pointer
=	O
pid	int
;	O
return	O
fp	pointer
;	O
}	O
void	O
grecs_preproc_extrn_shutdown	function
(	O
pid_t	int
pid	int
)	O
{	O
int	O
status	int
;	O
waitpid	function
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
}	O
