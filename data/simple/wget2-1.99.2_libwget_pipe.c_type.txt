FILE	struct
*	O
wget_vpopenf	function
(	O
const	O
char	O
*	O
type	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
va_list	array
args	array
)	O
{	O
FILE	struct
*	O
fp	pointer
=	O
NULL	O
;	O
char	O
sbuf	array
[	O
1024	int
]	O
;	O
wget_buffer	struct
buf	pointer
;	O
if	O
(	O
!	O
type	pointer
||	O
!	O
fmt	pointer
)	O
return	O
NULL	O
;	O
wget_buffer_init	function
(	O
&	O
buf	pointer
,	O
sbuf	array
,	O
sizeof	O
(	O
sbuf	array
)	O
)	O
;	O
wget_buffer_vprintf	function
(	O
&	O
buf	pointer
,	O
fmt	pointer
,	O
args	array
)	O
;	O
fp	pointer
=	O
popen	function
(	O
buf	pointer
.	O
data	pointer
,	O
type	pointer
)	O
;	O
wget_buffer_deinit	function
(	O
&	O
buf	pointer
)	O
;	O
return	O
fp	pointer
;	O
}	O
FILE	struct
*	O
wget_popenf	function
(	O
const	O
char	O
*	O
type	pointer
,	O
const	O
char	O
*	O
fmt	pointer
,	O
...	O
)	O
{	O
FILE	struct
*	O
fp	pointer
;	O
va_list	array
args	array
;	O
va_start	O
(	O
args	array
,	O
fmt	pointer
)	O
;	O
fp	pointer
=	O
wget_vpopenf	function
(	O
type	pointer
,	O
fmt	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
return	O
fp	pointer
;	O
}	O
pid_t	int
wget_fd_popen3	function
(	O
int	O
*	O
fdin	pointer
,	O
int	O
*	O
fdout	pointer
,	O
int	O
*	O
fderr	pointer
,	O
const	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
int	O
pipefd_in	array
[	O
2	int
]	O
;	O
int	O
pipefd_out	array
[	O
2	int
]	O
;	O
int	O
pipefd_err	array
[	O
2	int
]	O
;	O
pid_t	int
pid	int
;	O
if	O
(	O
!	O
argv	pointer
)	O
return	O
-	O
1	int
;	O
if	O
(	O
fdin	pointer
&&	O
pipe	function
(	O
pipefd_in	array
)	O
==	O
-	O
1	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to create pipe for STDIN on %s\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
fdout	pointer
&&	O
pipe	function
(	O
pipefd_out	array
)	O
==	O
-	O
1	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to create pipe for STDOUT on %s\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
fdin	pointer
)	O
{	O
close	pointer
(	O
pipefd_in	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
pipefd_in	array
[	O
1	int
]	O
)	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
fderr	pointer
&&	O
fderr	pointer
!=	O
fdout	pointer
&&	O
pipe	function
(	O
pipefd_err	array
)	O
==	O
-	O
1	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to create pipe for STDERR on %s\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
if	O
(	O
fdin	pointer
)	O
{	O
close	pointer
(	O
pipefd_in	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
pipefd_in	array
[	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
fdout	pointer
)	O
{	O
close	pointer
(	O
pipefd_out	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
pipefd_out	array
[	O
1	int
]	O
)	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
pid	int
=	O
fork	function
(	O
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
fdin	pointer
)	O
{	O
close	pointer
(	O
pipefd_in	array
[	O
1	int
]	O
)	O
;	O
if	O
(	O
dup2	function
(	O
pipefd_in	array
[	O
0	int
]	O
,	O
STDIN_FILENO	int
)	O
==	O
-	O
1	int
)	O
error_printf_exit	O
(	O
_	O
(	O
"Failed to dup2(%d,%d) (%d)\n"	pointer
)	O
,	O
pipefd_in	array
[	O
0	int
]	O
,	O
STDIN_FILENO	int
,	O
errno	O
)	O
;	O
close	pointer
(	O
pipefd_in	array
[	O
0	int
]	O
)	O
;	O
}	O
if	O
(	O
fdout	pointer
)	O
{	O
close	pointer
(	O
pipefd_out	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
dup2	function
(	O
pipefd_out	array
[	O
1	int
]	O
,	O
STDOUT_FILENO	int
)	O
==	O
-	O
1	int
)	O
error_printf_exit	O
(	O
_	O
(	O
"Failed to dup2(%d,%d) (%d)\n"	pointer
)	O
,	O
pipefd_out	array
[	O
1	int
]	O
,	O
STDOUT_FILENO	int
,	O
errno	O
)	O
;	O
close	pointer
(	O
pipefd_out	array
[	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
fderr	pointer
)	O
{	O
if	O
(	O
fderr	pointer
!=	O
fdout	pointer
)	O
{	O
close	pointer
(	O
pipefd_err	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
dup2	function
(	O
pipefd_err	array
[	O
1	int
]	O
,	O
STDERR_FILENO	int
)	O
==	O
-	O
1	int
)	O
error_printf_exit	O
(	O
_	O
(	O
"Failed to dup2(%d,%d) (%d)\n"	pointer
)	O
,	O
pipefd_err	array
[	O
1	int
]	O
,	O
STDERR_FILENO	int
,	O
errno	O
)	O
;	O
close	pointer
(	O
pipefd_err	array
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
dup2	function
(	O
STDOUT_FILENO	int
,	O
STDERR_FILENO	int
)	O
==	O
-	O
1	int
)	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
execvp	function
(	O
argv	pointer
[	O
0	int
]	O
,	O
(	O
char	O
*	O
const	O
*	O
)	O
argv	pointer
)	O
;	O
exit	function
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
else	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
if	O
(	O
fdin	pointer
)	O
{	O
close	pointer
(	O
pipefd_in	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
pipefd_in	array
[	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
fdout	pointer
)	O
{	O
close	pointer
(	O
pipefd_out	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
pipefd_out	array
[	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
fderr	pointer
&&	O
fderr	pointer
!=	O
fdout	pointer
)	O
{	O
close	pointer
(	O
pipefd_err	array
[	O
0	int
]	O
)	O
;	O
close	pointer
(	O
pipefd_err	array
[	O
1	int
]	O
)	O
;	O
}	O
error_printf	O
(	O
_	O
(	O
"Failed to fork '%s'\n"	pointer
)	O
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
pid	int
;	O
}	O
if	O
(	O
fdin	pointer
)	O
{	O
close	pointer
(	O
pipefd_in	array
[	O
0	int
]	O
)	O
;	O
*	O
fdin	pointer
=	O
pipefd_in	array
[	O
1	int
]	O
;	O
}	O
if	O
(	O
fdout	pointer
)	O
{	O
close	pointer
(	O
pipefd_out	array
[	O
1	int
]	O
)	O
;	O
*	O
fdout	pointer
=	O
pipefd_out	array
[	O
0	int
]	O
;	O
}	O
if	O
(	O
fderr	pointer
&&	O
fderr	pointer
!=	O
fdout	pointer
)	O
{	O
close	pointer
(	O
pipefd_err	array
[	O
1	int
]	O
)	O
;	O
*	O
fderr	pointer
=	O
pipefd_err	array
[	O
0	int
]	O
;	O
}	O
return	O
pid	int
;	O
}	O
pid_t	int
wget_popen3	function
(	O
FILE	struct
*	O
*	O
fpin	pointer
,	O
FILE	struct
*	O
*	O
fpout	pointer
,	O
FILE	struct
*	O
*	O
fperr	pointer
,	O
const	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
int	O
fdin	pointer
=	O
-	O
1	int
,	O
fdout	pointer
=	O
-	O
1	int
,	O
fderr	pointer
=	O
-	O
1	int
;	O
pid_t	int
pid	int
;	O
if	O
(	O
fpin	pointer
)	O
*	O
fpin	pointer
=	O
NULL	O
;	O
if	O
(	O
fpout	pointer
)	O
*	O
fpout	pointer
=	O
NULL	O
;	O
if	O
(	O
fperr	pointer
)	O
*	O
fperr	pointer
=	O
NULL	O
;	O
if	O
(	O
(	O
pid	int
=	O
wget_fd_popen3	function
(	O
fpin	pointer
?	O
&	O
fdin	pointer
:	O
NULL	O
,	O
fpout	pointer
?	O
&	O
fdout	pointer
:	O
NULL	O
,	O
fperr	pointer
?	O
(	O
fperr	pointer
!=	O
fpout	pointer
?	O
&	O
fderr	pointer
:	O
&	O
fdout	pointer
)	O
:	O
NULL	O
,	O
argv	pointer
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
fpin	pointer
)	O
*	O
fpin	pointer
=	O
fdopen	function
(	O
fdin	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
fpout	pointer
)	O
*	O
fpout	pointer
=	O
fdopen	function
(	O
fdout	pointer
,	O
"r"	pointer
)	O
;	O
if	O
(	O
fperr	pointer
&&	O
fperr	pointer
!=	O
fpout	pointer
)	O
*	O
fperr	pointer
=	O
fdopen	function
(	O
fderr	pointer
,	O
"r"	pointer
)	O
;	O
}	O
return	O
pid	int
;	O
}	O
