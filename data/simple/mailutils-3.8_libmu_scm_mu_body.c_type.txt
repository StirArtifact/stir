static	O
scm_t_bits	O
body_tag	int
;	O
struct	O
mu_body	struct
{	O
mu_body_t	pointer
body	pointer
;	O
mu_stream_t	pointer
stream	pointer
;	O
char	O
*	O
buffer	pointer
;	O
size_t	long
bufsize	long
;	O
SCM	function
msg	pointer
;	O
}	O
;	O
static	O
size_t	long
mu_scm_body_free	function
(	O
SCM	function
body_smob	int
)	O
{	O
struct	O
mu_body	struct
*	O
mbp	pointer
=	O
(	O
struct	O
mu_body	struct
*	O
)	O
SCM_CDR	function
(	O
body_smob	int
)	O
;	O
if	O
(	O
mbp	pointer
->	O
buffer	pointer
)	O
free	function
(	O
mbp	pointer
->	O
buffer	pointer
)	O
;	O
mu_stream_unref	function
(	O
mbp	pointer
->	O
stream	pointer
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mu_scm_body_print	function
(	O
SCM	function
body_smob	int
,	O
SCM	function
port	int
,	O
scm_print_state	O
*	O
pstate	pointer
)	O
{	O
struct	O
mu_body	struct
*	O
mbp	pointer
=	O
(	O
struct	O
mu_body	struct
*	O
)	O
SCM_CDR	function
(	O
body_smob	int
)	O
;	O
size_t	long
b_size	long
=	O
0	int
,	O
b_lines	long
=	O
0	int
;	O
mu_body_size	function
(	O
mbp	pointer
->	O
body	pointer
,	O
&	O
b_size	long
)	O
;	O
mu_body_lines	function
(	O
mbp	pointer
->	O
body	pointer
,	O
&	O
b_lines	long
)	O
;	O
scm_puts	function
(	O
"#<body "	pointer
,	O
port	int
)	O
;	O
scm_intprint	function
(	O
b_lines	long
,	O
10	int
,	O
port	int
)	O
;	O
scm_putc	function
(	O
' '	O
,	O
port	int
)	O
;	O
scm_intprint	function
(	O
b_size	long
,	O
10	int
,	O
port	int
)	O
;	O
scm_puts	function
(	O
">"	pointer
,	O
port	int
)	O
;	O
return	O
1	int
;	O
}	O
int	O
mu_scm_is_body	function
(	O
SCM	function
scm	int
)	O
{	O
return	O
SCM_NIMP	function
(	O
scm	int
)	O
&&	O
(	O
long	O
)	O
SCM_CAR	function
(	O
scm	int
)	O
==	O
body_tag	int
;	O
}	O
SCM	function
mu_scm_body_create	function
(	O
SCM	function
msg	pointer
,	O
mu_body_t	pointer
body	pointer
)	O
{	O
struct	O
mu_body	struct
*	O
mbp	pointer
;	O
mbp	pointer
=	O
scm_gc_malloc	function
(	O
sizeof	O
(	O
struct	O
mu_body	struct
)	O
,	O
"body"	pointer
)	O
;	O
mbp	pointer
->	O
msg	pointer
=	O
msg	pointer
;	O
mbp	pointer
->	O
body	pointer
=	O
body	pointer
;	O
mbp	pointer
->	O
stream	pointer
=	O
NULL	O
;	O
mbp	pointer
->	O
buffer	pointer
=	O
NULL	O
;	O
mbp	pointer
->	O
bufsize	long
=	O
0	int
;	O
SCM_RETURN_NEWSMOB	function
(	O
body_tag	int
,	O
mbp	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_body_p	O
,	O
"mu-body?"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
scm	int
)	O
,	O
"Return @code{true} if @var{scm} is a Mailutils message body object.\n"	pointer
)	O
{	O
return	O
scm_from_bool	function
(	O
mu_scm_is_body	function
(	O
scm	int
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_body_read_line	O
,	O
"mu-body-read-line"	pointer
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
body	pointer
)	O
,	O
"Read next line from the @var{body}."	pointer
)	O
{	O
struct	O
mu_body	struct
*	O
mbp	pointer
;	O
size_t	long
nread	long
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_body	function
(	O
body	pointer
)	O
,	O
body	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mbp	pointer
=	O
(	O
struct	O
mu_body	struct
*	O
)	O
SCM_CDR	function
(	O
body	pointer
)	O
;	O
if	O
(	O
!	O
mbp	pointer
->	O
stream	pointer
)	O
{	O
status	int
=	O
mu_body_get_streamref	function
(	O
mbp	pointer
->	O
body	pointer
,	O
&	O
mbp	pointer
->	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get body stream"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
if	O
(	O
!	O
mbp	pointer
->	O
buffer	pointer
)	O
{	O
mbp	pointer
->	O
bufsize	long
=	O
BUF_SIZE	int
;	O
mbp	pointer
->	O
buffer	pointer
=	O
malloc	function
(	O
mbp	pointer
->	O
bufsize	long
)	O
;	O
if	O
(	O
!	O
mbp	pointer
->	O
buffer	pointer
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
ENOMEM	int
,	O
"Cannot allocate memory"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
status	int
=	O
mu_stream_getline	function
(	O
mbp	pointer
->	O
stream	pointer
,	O
(	O
char	O
*	O
*	O
)	O
&	O
mbp	pointer
->	O
buffer	pointer
,	O
&	O
mbp	pointer
->	O
bufsize	long
,	O
&	O
nread	long
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Error reading from stream"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
if	O
(	O
nread	long
==	O
0	int
)	O
return	O
SCM_EOF_VAL	O
;	O
return	O
scm_from_locale_string	function
(	O
mbp	pointer
->	O
buffer	pointer
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	function
(	O
scm_mu_body_write	O
,	O
"mu-body-write"	pointer
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	function
body	pointer
,	O
SCM	function
text	struct
)	O
,	O
"Append @var{text} to message @var{body}. The use of this function is not\n"	pointer
"recommended. Please, use message ports instead (@pxref{mu-message-get-port}).\n"	pointer
)	O
{	O
char	O
*	O
ptr	pointer
;	O
size_t	long
len	long
;	O
struct	O
mu_body	struct
*	O
mbp	pointer
;	O
int	O
status	int
;	O
SCM_ASSERT	function
(	O
mu_scm_is_body	function
(	O
body	pointer
)	O
,	O
body	pointer
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mbp	pointer
=	O
(	O
struct	O
mu_body	struct
*	O
)	O
SCM_CDR	function
(	O
body	pointer
)	O
;	O
SCM_ASSERT	function
(	O
scm_is_string	function
(	O
text	struct
)	O
,	O
text	struct
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
!	O
mbp	pointer
->	O
stream	pointer
)	O
{	O
status	int
=	O
mu_body_get_streamref	function
(	O
mbp	pointer
->	O
body	pointer
,	O
&	O
mbp	pointer
->	O
stream	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"mu_body_get_streamref"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
status	int
=	O
mu_stream_seek	function
(	O
mbp	pointer
->	O
stream	pointer
,	O
0	int
,	O
SEEK_END	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"mu_stream_seek"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
ptr	pointer
=	O
scm_to_locale_string	function
(	O
text	struct
)	O
;	O
len	long
=	O
strlen	function
(	O
ptr	pointer
)	O
;	O
status	int
=	O
mu_stream_write	function
(	O
mbp	pointer
->	O
stream	pointer
,	O
ptr	pointer
,	O
len	long
,	O
NULL	O
)	O
;	O
free	function
(	O
ptr	pointer
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	function
(	O
FUNC_NAME	O
,	O
status	int
,	O
"mu_stream_write"	pointer
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
SCM_BOOL_T	O
;	O
}	O
void	O
mu_scm_body_init	function
(	O
)	O
{	O
body_tag	int
=	O
scm_make_smob_type	function
(	O
"body"	pointer
,	O
sizeof	O
(	O
struct	O
mu_body	struct
)	O
)	O
;	O
scm_set_smob_free	function
(	O
body_tag	int
,	O
mu_scm_body_free	function
)	O
;	O
scm_set_smob_print	function
(	O
body_tag	int
,	O
mu_scm_body_print	function
)	O
;	O
}	O
