static	O
ssize_t	long
file_reader	function
(	O
void	O
*	O
cls	pointer
,	O
uint64_t	long
pos	long
,	O
char	O
*	O
buf	pointer
,	O
size_t	long
max	long
)	O
{	O
FILE	struct
*	O
file	pointer
=	O
cls	pointer
;	O
(	O
void	O
)	O
fseek	function
(	O
file	pointer
,	O
pos	long
,	O
SEEK_SET	int
)	O
;	O
return	O
fread	function
(	O
buf	pointer
,	O
1	int
,	O
max	long
,	O
file	pointer
)	O
;	O
}	O
static	O
void	O
free_callback	function
(	O
void	O
*	O
cls	pointer
)	O
{	O
FILE	struct
*	O
file	pointer
=	O
cls	pointer
;	O
fclose	function
(	O
file	pointer
)	O
;	O
}	O
static	O
int	O
ahc_echo	function
(	O
void	O
*	O
cls	pointer
,	O
struct	O
MHD_Connection	O
*	O
connection	pointer
,	O
const	O
char	O
*	O
url	pointer
,	O
const	O
char	O
*	O
method	pointer
,	O
const	O
char	O
*	O
version	pointer
,	O
const	O
char	O
*	O
upload_data	pointer
,	O
size_t	long
*	O
upload_data_size	pointer
,	O
void	O
*	O
*	O
ptr	pointer
)	O
{	O
static	O
int	O
aptr	int
;	O
struct	O
MHD_Response	O
*	O
response	pointer
;	O
int	O
ret	int
;	O
FILE	struct
*	O
file	pointer
;	O
int	O
fd	int
;	O
struct	O
stat	struct
buf	pointer
;	O
(	O
void	O
)	O
cls	pointer
;	O
(	O
void	O
)	O
version	pointer
;	O
(	O
void	O
)	O
upload_data	pointer
;	O
(	O
void	O
)	O
upload_data_size	pointer
;	O
if	O
(	O
0	int
!=	O
strcmp	function
(	O
method	pointer
,	O
MHD_HTTP_METHOD_GET	pointer
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
&	O
aptr	int
!=	O
*	O
ptr	pointer
)	O
{	O
*	O
ptr	pointer
=	O
&	O
aptr	int
;	O
return	O
MHD_YES	int
;	O
}	O
*	O
ptr	pointer
=	O
NULL	O
;	O
file	pointer
=	O
fopen	function
(	O
&	O
url	pointer
[	O
1	int
]	O
,	O
"rb"	pointer
)	O
;	O
if	O
(	O
NULL	O
!=	O
file	pointer
)	O
{	O
fd	int
=	O
fileno	function
(	O
file	pointer
)	O
;	O
if	O
(	O
-	O
1	int
==	O
fd	int
)	O
{	O
(	O
void	O
)	O
fclose	function
(	O
file	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
if	O
(	O
(	O
0	int
!=	O
fstat	function
(	O
fd	int
,	O
&	O
buf	pointer
)	O
)	O
||	O
(	O
!	O
S_ISREG	O
(	O
buf	pointer
.	O
st_mode	int
)	O
)	O
)	O
{	O
fclose	function
(	O
file	pointer
)	O
;	O
file	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
NULL	O
==	O
file	pointer
)	O
{	O
response	pointer
=	O
MHD_create_response_from_buffer	function
(	O
strlen	function
(	O
PAGE	pointer
)	O
,	O
(	O
void	O
*	O
)	O
PAGE	pointer
,	O
MHD_RESPMEM_PERSISTENT	int
)	O
;	O
ret	int
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_NOT_FOUND	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
}	O
else	O
{	O
response	pointer
=	O
MHD_create_response_from_callback	function
(	O
buf	pointer
.	O
st_size	long
,	O
32	int
*	O
1024	int
,	O
&	O
file_reader	function
,	O
file	pointer
,	O
&	O
free_callback	function
)	O
;	O
if	O
(	O
NULL	O
==	O
response	pointer
)	O
{	O
fclose	function
(	O
file	pointer
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
ret	int
=	O
MHD_queue_response	function
(	O
connection	pointer
,	O
MHD_HTTP_OK	int
,	O
response	pointer
)	O
;	O
MHD_destroy_response	function
(	O
response	pointer
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	pointer
;	O
time_t	long
end	long
;	O
time_t	long
t	long
;	O
struct	O
timeval	struct
tv	struct
;	O
fd_set	struct
rs	struct
;	O
fd_set	struct
ws	struct
;	O
fd_set	struct
es	struct
;	O
MHD_socket	int
max	long
;	O
MHD_UNSIGNED_LONG_LONG	O
mhd_timeout	long long
;	O
if	O
(	O
argc	int
!=	O
3	int
)	O
{	O
printf	function
(	O
"%s PORT SECONDS-TO-RUN\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	pointer
=	O
MHD_start_daemon	function
(	O
MHD_USE_ERROR_LOG	int
,	O
atoi	function
(	O
argv	pointer
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	function
,	O
PAGE	pointer
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
d	pointer
==	O
NULL	O
)	O
return	O
1	int
;	O
end	long
=	O
time	struct
(	O
NULL	O
)	O
+	O
atoi	function
(	O
argv	pointer
[	O
2	int
]	O
)	O
;	O
while	O
(	O
(	O
t	long
=	O
time	struct
(	O
NULL	O
)	O
)	O
<	O
end	long
)	O
{	O
tv	struct
.	O
tv_sec	long
=	O
end	long
-	O
t	long
;	O
tv	struct
.	O
tv_usec	long
=	O
0	int
;	O
max	long
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
rs	struct
)	O
;	O
FD_ZERO	O
(	O
&	O
ws	struct
)	O
;	O
FD_ZERO	O
(	O
&	O
es	struct
)	O
;	O
if	O
(	O
MHD_YES	int
!=	O
MHD_get_fdset	function
(	O
d	pointer
,	O
&	O
rs	struct
,	O
&	O
ws	struct
,	O
&	O
es	struct
,	O
&	O
max	long
)	O
)	O
break	O
;	O
if	O
(	O
MHD_get_timeout	function
(	O
d	pointer
,	O
&	O
mhd_timeout	long long
)	O
==	O
MHD_YES	int
)	O
{	O
if	O
(	O
(	O
(	O
MHD_UNSIGNED_LONG_LONG	O
)	O
tv	struct
.	O
tv_sec	long
)	O
<	O
mhd_timeout	long long
/	O
1000LL	int
)	O
{	O
tv	struct
.	O
tv_sec	long
=	O
mhd_timeout	long long
/	O
1000LL	int
;	O
tv	struct
.	O
tv_usec	long
=	O
(	O
mhd_timeout	long long
-	O
(	O
tv	struct
.	O
tv_sec	long
*	O
1000LL	int
)	O
)	O
*	O
1000LL	int
;	O
}	O
}	O
if	O
(	O
-	O
1	int
==	O
select	function
(	O
max	long
+	O
1	int
,	O
&	O
rs	struct
,	O
&	O
ws	struct
,	O
&	O
es	struct
,	O
&	O
tv	struct
)	O
)	O
{	O
if	O
(	O
EINTR	int
!=	O
errno	O
)	O
abort	function
(	O
)	O
;	O
}	O
MHD_run	function
(	O
d	pointer
)	O
;	O
}	O
MHD_stop_daemon	function
(	O
d	pointer
)	O
;	O
return	O
0	int
;	O
}	O
