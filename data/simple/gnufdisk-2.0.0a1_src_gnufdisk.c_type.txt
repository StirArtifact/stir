static	O
void	O
print_help	function
(	O
void	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"USAGE:\n"	pointer
"  gnufdisk IMPLEMENTATION ARGUMENT...\n"	pointer
"\n"	pointer
"Report bugs to %s\n"	pointer
"\n"	pointer
,	O
PACKAGE_BUGREPORT	pointer
)	O
;	O
}	O
int	O
main	function
(	O
int	O
_argc	int
,	O
char	O
*	O
*	O
_argv	pointer
)	O
{	O
int	O
ret	int
;	O
GNUFDISK_TRY	O
(	O
NULL	O
,	O
NULL	O
)	O
{	O
struct	O
gnufdisk_userinterface	O
*	O
ui	pointer
;	O
struct	O
gnufdisk_string	O
*	O
implementation	pointer
;	O
if	O
(	O
(	O
ui	pointer
=	O
gnufdisk_userinterface_new	function
(	O
)	O
)	O
==	O
NULL	O
)	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
errno	O
,	O
NULL	O
,	O
"cannot create userinterface"	pointer
)	O
;	O
if	O
(	O
_argc	int
<	O
2	int
)	O
{	O
print_help	function
(	O
)	O
;	O
GNUFDISK_THROW	O
(	O
0	int
,	O
NULL	O
,	O
ECANCELED	int
,	O
NULL	O
,	O
"invalid command line"	pointer
)	O
;	O
}	O
implementation	pointer
=	O
gnufdisk_string_new	function
(	O
_argv	pointer
[	O
1	int
]	O
)	O
;	O
ret	int
=	O
gnufdisk_userinterface_run	function
(	O
ui	pointer
,	O
implementation	pointer
,	O
_argc	int
-	O
2	int
,	O
&	O
_argv	pointer
[	O
2	int
]	O
)	O
;	O
gnufdisk_string_delete	function
(	O
implementation	pointer
)	O
;	O
gnufdisk_userinterface_delete	function
(	O
ui	pointer
)	O
;	O
}	O
GNUFDISK_CATCH_DEFAULT	O
{	O
ret	int
=	O
-	O
1	int
;	O
}	O
GNUFDISK_EXCEPTION_END	O
;	O
return	O
ret	int
!=	O
0	int
?	O
EXIT_FAILURE	int
:	O
EXIT_SUCCESS	int
;	O
}	O
