static	O
char	O
*	O
stream_name	pointer
;	O
static	O
char	O
*	O
streamdata	pointer
;	O
static	O
char	O
metadata	array
[	O
255	int
*	O
16	int
]	O
;	O
static	O
int	O
metaint	int
,	O
streamdatalen	int
,	O
metadatalen	int
;	O
static	O
wget_http_header_callback	function
header_callback	pointer
;	O
static	O
int	O
header_callback	pointer
(	O
wget_http_response	struct
*	O
resp	pointer
,	O
void	O
*	O
context	pointer
WGET_GCC_UNUSED	O
)	O
{	O
if	O
(	O
resp	pointer
->	O
header	pointer
)	O
{	O
char	O
key	int
[	O
64	int
]	O
,	O
value	pointer
[	O
128	int
]	O
;	O
for	O
(	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
resp	pointer
->	O
header	pointer
->	O
data	pointer
,	O
'\n'	O
)	O
;	O
p	pointer
&&	O
sscanf	function
(	O
p	pointer
+	O
1	int
,	O
" %63[a-zA-z-] : %127[^\r\n]"	pointer
,	O
key	int
,	O
value	pointer
)	O
>=	O
1	int
;	O
p	pointer
=	O
strchr	function
(	O
p	pointer
+	O
1	int
,	O
'\n'	O
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
key	int
,	O
"icy-name"	pointer
)	O
)	O
{	O
stream_name	pointer
=	O
wget_strdup	function
(	O
value	pointer
)	O
;	O
break	O
;	O
}	O
*	O
value	pointer
=	O
0	int
;	O
}	O
}	O
if	O
(	O
(	O
metaint	int
=	O
resp	pointer
->	O
icy_metaint	int
)	O
)	O
{	O
streamdata	pointer
=	O
wget_malloc	function
(	O
metaint	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
wget_http_body_callback	function
stream_callback	function
;	O
static	O
int	O
stream_callback	function
(	O
wget_http_response	struct
*	O
resp	pointer
WGET_GCC_UNUSED	O
,	O
void	O
*	O
context	pointer
WGET_GCC_UNUSED	O
,	O
const	O
char	O
*	O
data	pointer
,	O
size_t	long
len	long
)	O
{	O
if	O
(	O
metaint	int
)	O
{	O
static	O
int	O
collect_metadata	int
;	O
static	O
size_t	long
metadatasize	long
;	O
while	O
(	O
len	long
)	O
{	O
if	O
(	O
collect_metadata	int
)	O
{	O
for	O
(	O
;	O
len	long
&&	O
metadatasize	long
;	O
metadatasize	long
--	O
,	O
len	long
--	O
)	O
metadata	array
[	O
metadatalen	int
++	O
]	O
=	O
*	O
data	pointer
++	O
;	O
if	O
(	O
metadatasize	long
==	O
0	int
)	O
{	O
collect_metadata	int
=	O
0	int
;	O
wget_info_printf	function
(	O
"%.*s\n"	pointer
,	O
metadatalen	int
,	O
metadata	array
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
;	O
len	long
&&	O
streamdatalen	int
<	O
metaint	int
;	O
len	long
--	O
)	O
streamdata	pointer
[	O
streamdatalen	int
++	O
]	O
=	O
*	O
data	pointer
++	O
;	O
if	O
(	O
len	long
)	O
{	O
if	O
(	O
(	O
metadatasize	long
=	O
(	O
(	O
unsigned	O
char	O
)	O
(	O
*	O
data	pointer
++	O
)	O
)	O
*	O
16	int
)	O
>	O
0	int
)	O
collect_metadata	int
=	O
1	int
;	O
len	long
--	O
;	O
fwrite	function
(	O
streamdata	pointer
,	O
1	int
,	O
streamdatalen	int
,	O
stdout	pointer
)	O
;	O
metadatalen	int
=	O
0	int
;	O
streamdatalen	int
=	O
0	int
;	O
}	O
}	O
}	O
}	O
else	O
{	O
fwrite	function
(	O
data	pointer
,	O
1	int
,	O
len	long
,	O
stdout	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
strcasestr_ascii	function
(	O
const	O
char	O
*	O
haystack	pointer
,	O
const	O
char	O
*	O
needle	pointer
)	O
{	O
size_t	long
needle_len	long
=	O
strlen	function
(	O
needle	pointer
)	O
;	O
while	O
(	O
*	O
haystack	pointer
)	O
{	O
if	O
(	O
!	O
wget_strncasecmp_ascii	function
(	O
haystack	pointer
,	O
needle	pointer
,	O
needle_len	long
)	O
)	O
return	O
(	O
char	O
*	O
)	O
haystack	pointer
;	O
haystack	pointer
++	O
;	O
}	O
return	O
NULL	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	O
*	O
argv	pointer
)	O
{	O
wget_http_response	struct
*	O
resp	pointer
;	O
char	O
*	O
stream_url	pointer
=	O
NULL	O
;	O
wget_global_init	function
(	O
WGET_ERROR_STREAM	int
,	O
stderr	pointer
,	O
WGET_INFO_STREAM	int
,	O
stderr	pointer
,	O
0	int
)	O
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: %s <Playlist URL>\n"	pointer
,	O
argv	pointer
[	O
0	int
]	O
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
resp	pointer
=	O
wget_http_get	function
(	O
WGET_HTTP_URL	int
,	O
argv	pointer
[	O
1	int
]	O
,	O
0	int
)	O
;	O
if	O
(	O
!	O
resp	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to get response from %s\n"	pointer
,	O
argv	pointer
[	O
1	int
]	O
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
resp	pointer
->	O
code	short
!=	O
200	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Got response code %d\n"	pointer
,	O
resp	pointer
->	O
code	short
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
content_type	pointer
,	O
"audio/x-mpegurl"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
content_type	pointer
,	O
"audio/x-pn-realaudio"	pointer
)	O
)	O
{	O
char	O
*	O
e	pointer
,	O
*	O
s	pointer
;	O
e	pointer
=	O
resp	pointer
->	O
body	pointer
->	O
data	pointer
;	O
do	O
{	O
s	pointer
=	O
e	pointer
;	O
while	O
(	O
isspace	function
(	O
*	O
s	pointer
)	O
)	O
s	pointer
++	O
;	O
if	O
(	O
!	O
*	O
s	pointer
)	O
break	O
;	O
for	O
(	O
e	pointer
=	O
s	pointer
;	O
*	O
e	pointer
&&	O
*	O
e	pointer
!=	O
'\r'	O
&&	O
*	O
e	pointer
!=	O
'\n'	O
;	O
e	pointer
++	O
)	O
;	O
if	O
(	O
*	O
s	pointer
!=	O
'#'	O
&&	O
s	pointer
<	O
e	pointer
)	O
{	O
stream_url	pointer
=	O
wget_strmemdup	function
(	O
s	pointer
,	O
e	pointer
-	O
s	pointer
)	O
;	O
break	O
;	O
}	O
}	O
while	O
(	O
*	O
e	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
content_type	pointer
,	O
"audio/x-ms-wax"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
content_type	pointer
,	O
"video/x-ms-asf"	pointer
)	O
)	O
{	O
char	O
*	O
p	pointer
,	O
url	pointer
[	O
128	int
]	O
;	O
if	O
(	O
(	O
p	pointer
=	O
strcasestr_ascii	function
(	O
resp	pointer
->	O
body	pointer
->	O
data	pointer
,	O
" HREF=\""	pointer
)	O
)	O
&&	O
sscanf	function
(	O
p	pointer
+	O
7	int
,	O
"%127[^\"]"	pointer
,	O
url	pointer
)	O
==	O
1	int
)	O
{	O
stream_url	pointer
=	O
wget_strdup	function
(	O
url	pointer
)	O
;	O
}	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to parse playlist URL\n"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
content_type	pointer
,	O
"application/pls+xml"	pointer
)	O
||	O
!	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
content_type	pointer
,	O
"audio/x-scpls"	pointer
)	O
)	O
{	O
char	O
*	O
p	pointer
,	O
url	pointer
[	O
128	int
]	O
;	O
if	O
(	O
(	O
p	pointer
=	O
strcasestr_ascii	function
(	O
resp	pointer
->	O
body	pointer
->	O
data	pointer
,	O
"File1="	pointer
)	O
)	O
&&	O
sscanf	function
(	O
p	pointer
+	O
6	int
,	O
"%127[^\r\n]"	pointer
,	O
url	pointer
)	O
==	O
1	int
)	O
{	O
stream_url	pointer
=	O
wget_strdup	function
(	O
url	pointer
)	O
;	O
}	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to parse playlist URL\n"	pointer
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	function
(	O
resp	pointer
->	O
content_type	pointer
,	O
"application/xspf+xml"	pointer
)	O
)	O
{	O
char	O
*	O
p	pointer
,	O
url	pointer
[	O
128	int
]	O
;	O
if	O
(	O
(	O
p	pointer
=	O
strcasestr_ascii	function
(	O
resp	pointer
->	O
body	pointer
->	O
data	pointer
,	O
"<location>"	pointer
)	O
)	O
&&	O
sscanf	function
(	O
p	pointer
+	O
10	int
,	O
" %127[^< \t\r\n]"	pointer
,	O
url	pointer
)	O
==	O
1	int
)	O
{	O
stream_url	pointer
=	O
wget_strdup	function
(	O
url	pointer
)	O
;	O
}	O
else	O
fprintf	function
(	O
stderr	pointer
,	O
"Failed to parse playlist URL\n"	pointer
)	O
;	O
}	O
else	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Unsupported type of stream: '%s'\n"	pointer
,	O
resp	pointer
->	O
content_type	pointer
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
wget_http_free_response	function
(	O
&	O
resp	pointer
)	O
;	O
if	O
(	O
!	O
stream_url	pointer
)	O
{	O
return	O
EXIT_FAILURE	int
;	O
}	O
resp	pointer
=	O
wget_http_get	function
(	O
WGET_HTTP_URL	int
,	O
stream_url	pointer
,	O
WGET_HTTP_HEADER_ADD	int
,	O
"Icy-Metadata"	pointer
,	O
"1"	pointer
,	O
WGET_HTTP_HEADER_FUNC	int
,	O
header_callback	pointer
,	O
NULL	O
,	O
WGET_HTTP_BODY_SAVEAS_FUNC	int
,	O
stream_callback	function
,	O
NULL	O
,	O
0	int
)	O
;	O
wget_http_free_response	function
(	O
&	O
resp	pointer
)	O
;	O
wget_global_deinit	function
(	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
