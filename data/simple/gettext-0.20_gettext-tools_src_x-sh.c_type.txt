static	O
bool	bool
extract_all	bool
=	O
false	int
;	O
static	O
hash_table	struct
keywords	struct
;	O
static	O
bool	bool
default_keywords	bool
=	O
true	int
;	O
void	O
x_sh_extract_all	function
(	O
)	O
{	O
extract_all	bool
=	O
true	int
;	O
}	O
void	O
x_sh_keyword	function
(	O
const	O
char	O
*	O
name	pointer
)	O
{	O
if	O
(	O
name	pointer
==	O
NULL	O
)	O
default_keywords	bool
=	O
false	int
;	O
else	O
{	O
const	O
char	O
*	O
end	pointer
;	O
struct	O
callshape	struct
shape	pointer
;	O
const	O
char	O
*	O
colon	pointer
;	O
if	O
(	O
keywords	struct
.	O
table	pointer
==	O
NULL	O
)	O
hash_init	function
(	O
&	O
keywords	struct
,	O
100	int
)	O
;	O
split_keywordspec	function
(	O
name	pointer
,	O
&	O
end	pointer
,	O
&	O
shape	pointer
)	O
;	O
colon	pointer
=	O
strchr	function
(	O
name	pointer
,	O
':'	O
)	O
;	O
if	O
(	O
colon	pointer
==	O
NULL	O
||	O
colon	pointer
>=	O
end	pointer
)	O
insert_keyword_callshape	function
(	O
&	O
keywords	struct
,	O
name	pointer
,	O
end	pointer
-	O
name	pointer
,	O
&	O
shape	pointer
)	O
;	O
}	O
}	O
static	O
void	O
init_keywords	function
(	O
)	O
{	O
if	O
(	O
default_keywords	bool
)	O
{	O
x_sh_keyword	function
(	O
"gettext"	pointer
)	O
;	O
x_sh_keyword	function
(	O
"ngettext:1,2"	pointer
)	O
;	O
x_sh_keyword	function
(	O
"eval_gettext"	pointer
)	O
;	O
x_sh_keyword	function
(	O
"eval_ngettext:1,2"	pointer
)	O
;	O
x_sh_keyword	function
(	O
"eval_pgettext:1c,2"	pointer
)	O
;	O
x_sh_keyword	function
(	O
"eval_npgettext:1c,2,3"	pointer
)	O
;	O
default_keywords	bool
=	O
false	int
;	O
}	O
}	O
void	O
init_flag_table_sh	function
(	O
)	O
{	O
xgettext_record_flag	function
(	O
"gettext:1:pass-sh-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"ngettext:1:pass-sh-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"ngettext:2:pass-sh-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"eval_gettext:1:sh-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"eval_ngettext:1:sh-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"eval_ngettext:2:sh-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"eval_pgettext:2:sh-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"eval_npgettext:2:sh-format"	pointer
)	O
;	O
xgettext_record_flag	function
(	O
"eval_npgettext:3:sh-format"	pointer
)	O
;	O
}	O
static	O
FILE	struct
*	O
fp	pointer
;	O
static	O
int	O
do_getc	function
(	O
)	O
{	O
int	O
c	int
=	O
getc	function
(	O
fp	pointer
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	function
(	O
fp	pointer
)	O
)	O
error	function
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	pointer
)	O
,	O
real_file_name	pointer
)	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
++	O
;	O
return	O
c	int
;	O
}	O
static	O
void	O
do_ungetc	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
--	O
;	O
ungetc	function
(	O
c	int
,	O
fp	pointer
)	O
;	O
}	O
static	O
int	O
phase1_pushback	array
[	O
1	int
]	O
;	O
static	O
int	O
phase1_pushback_length	int
;	O
static	O
int	O
phase1_getc	function
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase1_pushback_length	int
)	O
{	O
c	int
=	O
phase1_pushback	array
[	O
--	O
phase1_pushback_length	int
]	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
++	O
line_number	long
;	O
return	O
c	int
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'\\'	O
)	O
return	O
c	int
;	O
c	int
=	O
do_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'\n'	O
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
do_ungetc	function
(	O
c	int
)	O
;	O
return	O
'\\'	O
;	O
}	O
}	O
}	O
static	O
void	O
phase1_ungetc	function
(	O
int	O
c	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
break	O
;	O
case	O
'\n'	O
:	O
--	O
line_number	long
;	O
default	O
:	O
if	O
(	O
phase1_pushback_length	int
==	O
SIZEOF	O
(	O
phase1_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase1_pushback	array
[	O
phase1_pushback_length	int
++	O
]	O
=	O
c	int
;	O
break	O
;	O
}	O
}	O
struct	O
token	struct
{	O
int	O
allocated	int
;	O
int	O
charcount	int
;	O
char	O
*	O
chars	pointer
;	O
}	O
;	O
static	O
inline	O
void	O
init_token	function
(	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
tp	pointer
->	O
allocated	int
=	O
10	int
;	O
tp	pointer
->	O
chars	pointer
=	O
XNMALLOC	O
(	O
tp	pointer
->	O
allocated	int
,	O
char	O
)	O
;	O
tp	pointer
->	O
charcount	int
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
free_token	function
(	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
free	function
(	O
tp	pointer
->	O
chars	pointer
)	O
;	O
}	O
static	O
inline	O
void	O
grow_token	function
(	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
if	O
(	O
tp	pointer
->	O
charcount	int
==	O
tp	pointer
->	O
allocated	int
)	O
{	O
tp	pointer
->	O
allocated	int
*=	O
2	int
;	O
tp	pointer
->	O
chars	pointer
=	O
(	O
char	O
*	O
)	O
xrealloc	function
(	O
tp	pointer
->	O
chars	pointer
,	O
tp	pointer
->	O
allocated	int
*	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
}	O
}	O
static	O
char	O
*	O
string_of_token	function
(	O
const	O
struct	O
token	struct
*	O
tp	pointer
)	O
{	O
char	O
*	O
str	pointer
;	O
int	O
n	long
;	O
n	long
=	O
tp	pointer
->	O
charcount	int
;	O
str	pointer
=	O
XNMALLOC	O
(	O
n	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
str	pointer
,	O
tp	pointer
->	O
chars	pointer
,	O
n	long
)	O
;	O
str	pointer
[	O
n	long
]	O
=	O
'\0'	O
;	O
return	O
str	pointer
;	O
}	O
static	O
message_list_ty	struct
*	O
mlp	pointer
;	O
static	O
char	O
*	O
buffer	pointer
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
static	O
inline	O
void	O
comment_start	function
(	O
)	O
{	O
buflen	long
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
comment_add	function
(	O
int	O
c	int
)	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
buffer	pointer
[	O
buflen	long
++	O
]	O
=	O
c	int
;	O
}	O
static	O
inline	O
void	O
comment_line_end	function
(	O
)	O
{	O
while	O
(	O
buflen	long
>=	O
1	int
&&	O
(	O
buffer	pointer
[	O
buflen	long
-	O
1	int
]	O
==	O
' '	O
||	O
buffer	pointer
[	O
buflen	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
buflen	long
;	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	pointer
=	O
xrealloc	function
(	O
buffer	pointer
,	O
bufmax	long
)	O
;	O
}	O
buffer	pointer
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
savable_comment_add	function
(	O
buffer	pointer
)	O
;	O
}	O
static	O
int	O
last_comment_line	int
;	O
static	O
int	O
last_non_comment_line	int
;	O
static	O
unsigned	O
int	O
nested_backquotes	int
;	O
static	O
unsigned	O
int	O
open_doublequotes_mask	int
;	O
static	O
bool	bool
open_doublequote	bool
;	O
static	O
bool	bool
open_singlequote	bool
;	O
static	O
char	O
open_singlequote_terminator	char
;	O
static	O
inline	O
void	O
saw_opening_backquote	function
(	O
)	O
{	O
if	O
(	O
open_singlequote	bool
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
open_doublequote	bool
)	O
open_doublequotes_mask	int
|=	O
(	O
unsigned	O
int	O
)	O
1	int
<<	O
nested_backquotes	int
;	O
nested_backquotes	int
++	O
;	O
open_doublequote	bool
=	O
false	int
;	O
}	O
static	O
inline	O
void	O
saw_closing_backquote	function
(	O
)	O
{	O
nested_backquotes	int
--	O
;	O
open_doublequote	bool
=	O
(	O
open_doublequotes_mask	int
>>	O
nested_backquotes	int
)	O
&	O
1	int
;	O
open_doublequotes_mask	int
&=	O
(	O
(	O
unsigned	O
int	O
)	O
1	int
<<	O
nested_backquotes	int
)	O
-	O
1	int
;	O
open_singlequote	bool
=	O
false	int
;	O
}	O
static	O
inline	O
void	O
saw_opening_doublequote	function
(	O
)	O
{	O
if	O
(	O
open_singlequote	bool
||	O
open_doublequote	bool
)	O
abort	function
(	O
)	O
;	O
open_doublequote	bool
=	O
true	int
;	O
}	O
static	O
inline	O
void	O
saw_closing_doublequote	function
(	O
)	O
{	O
if	O
(	O
open_singlequote	bool
||	O
!	O
open_doublequote	bool
)	O
abort	function
(	O
)	O
;	O
open_doublequote	bool
=	O
false	int
;	O
}	O
static	O
inline	O
void	O
saw_opening_singlequote	function
(	O
)	O
{	O
if	O
(	O
open_doublequote	bool
||	O
open_singlequote	bool
)	O
abort	function
(	O
)	O
;	O
open_singlequote	bool
=	O
true	int
;	O
open_singlequote_terminator	char
=	O
'\''	O
;	O
}	O
static	O
inline	O
void	O
saw_closing_singlequote	function
(	O
)	O
{	O
if	O
(	O
open_doublequote	bool
||	O
!	O
open_singlequote	bool
)	O
abort	function
(	O
)	O
;	O
open_singlequote	bool
=	O
false	int
;	O
}	O
enum	O
word_type	enum
{	O
t_string	int
,	O
t_other	int
,	O
t_separator	int
,	O
t_redirect	int
,	O
t_backquote	int
,	O
t_paren	int
,	O
t_eof	int
}	O
;	O
struct	O
word	struct
{	O
enum	O
word_type	enum
type	char
;	O
struct	O
token	struct
*	O
token	struct
;	O
int	O
line_number_at_start	int
;	O
}	O
;	O
static	O
inline	O
void	O
free_word	function
(	O
struct	O
word	struct
*	O
wp	pointer
)	O
{	O
if	O
(	O
wp	pointer
->	O
type	char
==	O
t_string	int
)	O
{	O
free_token	function
(	O
wp	pointer
->	O
token	struct
)	O
;	O
free	function
(	O
wp	pointer
->	O
token	struct
)	O
;	O
}	O
}	O
static	O
char	O
*	O
string_of_word	function
(	O
const	O
struct	O
word	struct
*	O
wp	pointer
)	O
{	O
char	O
*	O
str	pointer
;	O
int	O
n	long
;	O
if	O
(	O
!	O
(	O
wp	pointer
->	O
type	char
==	O
t_string	int
)	O
)	O
abort	function
(	O
)	O
;	O
n	long
=	O
wp	pointer
->	O
token	struct
->	O
charcount	int
;	O
str	pointer
=	O
XNMALLOC	O
(	O
n	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
str	pointer
,	O
wp	pointer
->	O
token	struct
->	O
chars	pointer
,	O
n	long
)	O
;	O
str	pointer
[	O
n	long
]	O
=	O
'\0'	O
;	O
return	O
str	pointer
;	O
}	O
static	O
char	O
*	O
substring_of_word	function
(	O
const	O
struct	O
word	struct
*	O
wp	pointer
,	O
size_t	long
offset	long
)	O
{	O
char	O
*	O
str	pointer
;	O
int	O
n	long
;	O
if	O
(	O
!	O
(	O
wp	pointer
->	O
type	char
==	O
t_string	int
)	O
)	O
abort	function
(	O
)	O
;	O
n	long
=	O
wp	pointer
->	O
token	struct
->	O
charcount	int
;	O
if	O
(	O
!	O
(	O
offset	long
<=	O
n	long
)	O
)	O
abort	function
(	O
)	O
;	O
str	pointer
=	O
XNMALLOC	O
(	O
n	long
-	O
offset	long
+	O
1	int
,	O
char	O
)	O
;	O
memcpy	function
(	O
str	pointer
,	O
wp	pointer
->	O
token	struct
->	O
chars	pointer
+	O
offset	long
,	O
n	long
-	O
offset	long
)	O
;	O
str	pointer
[	O
n	long
-	O
offset	long
]	O
=	O
'\0'	O
;	O
return	O
str	pointer
;	O
}	O
static	O
inline	O
bool	bool
is_whitespace	function
(	O
int	O
c	int
)	O
{	O
return	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
;	O
}	O
static	O
inline	O
bool	bool
is_operator_start	function
(	O
int	O
c	int
)	O
{	O
return	O
(	O
c	int
==	O
'|'	O
||	O
c	int
==	O
'&'	O
||	O
c	int
==	O
';'	O
||	O
c	int
==	O
'<'	O
||	O
c	int
==	O
'>'	O
||	O
c	int
==	O
'('	O
||	O
c	int
==	O
')'	O
)	O
;	O
}	O
static	O
int	O
phase2_pushback	array
[	O
2	int
]	O
;	O
static	O
int	O
phase2_pushback_length	int
;	O
static	O
int	O
phase2_getc	function
(	O
)	O
{	O
int	O
c	int
;	O
if	O
(	O
phase2_pushback_length	int
)	O
{	O
c	int
=	O
phase2_pushback	array
[	O
--	O
phase2_pushback_length	int
]	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
++	O
line_number	long
;	O
return	O
c	int
;	O
}	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
return	O
c	int
;	O
if	O
(	O
c	int
==	O
'\''	O
)	O
return	O
(	O
(	O
open_doublequote	bool
||	O
(	O
open_singlequote	bool
&&	O
open_singlequote_terminator	char
!=	O
c	int
)	O
)	O
?	O
QUOTED	O
(	O
c	int
)	O
:	O
c	int
)	O
;	O
if	O
(	O
open_singlequote	bool
)	O
{	O
if	O
(	O
c	int
==	O
open_singlequote_terminator	char
)	O
return	O
c	int
;	O
}	O
else	O
{	O
if	O
(	O
c	int
==	O
'"'	O
||	O
c	int
==	O
'$'	O
)	O
return	O
c	int
;	O
if	O
(	O
c	int
==	O
'`'	O
)	O
return	O
(	O
nested_backquotes	int
>	O
0	int
?	O
CLOSING_BACKQUOTE	O
:	O
OPENING_BACKQUOTE	O
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
unsigned	O
int	O
debackslashify	int
=	O
nested_backquotes	int
+	O
(	O
open_singlequote	bool
?	O
0	int
:	O
1	int
)	O
;	O
unsigned	O
int	O
expected_count	int
=	O
(	O
unsigned	O
int	O
)	O
1	int
<<	O
debackslashify	int
;	O
unsigned	O
int	O
count	int
;	O
for	O
(	O
count	int
=	O
1	int
;	O
count	int
<	O
expected_count	int
;	O
count	int
++	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'\\'	O
)	O
break	O
;	O
}	O
if	O
(	O
count	int
==	O
expected_count	int
)	O
return	O
'\\'	O
;	O
if	O
(	O
c	int
==	O
'\''	O
)	O
{	O
if	O
(	O
!	O
open_singlequote	bool
&&	O
count	int
>	O
(	O
expected_count	int
>>	O
1	int
)	O
)	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
return	O
'\\'	O
;	O
}	O
else	O
return	O
(	O
(	O
open_doublequote	bool
||	O
(	O
open_singlequote	bool
&&	O
open_singlequote_terminator	char
!=	O
c	int
)	O
)	O
?	O
QUOTED	O
(	O
c	int
)	O
:	O
c	int
)	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'"'	O
)	O
{	O
if	O
(	O
open_singlequote	bool
)	O
{	O
if	O
(	O
count	int
>	O
open_doublequotes_mask	int
)	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
return	O
'\\'	O
;	O
}	O
else	O
return	O
(	O
open_singlequote_terminator	char
!=	O
c	int
?	O
QUOTED	O
(	O
c	int
)	O
:	O
c	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
count	int
>	O
open_doublequotes_mask	int
)	O
return	O
QUOTED	O
(	O
c	int
)	O
;	O
else	O
return	O
c	int
;	O
}	O
}	O
else	O
if	O
(	O
c	int
==	O
'`'	O
)	O
{	O
if	O
(	O
count	int
==	O
expected_count	int
-	O
1	int
)	O
return	O
c	int
;	O
else	O
if	O
(	O
nested_backquotes	int
>	O
0	int
&&	O
!	O
open_singlequote	bool
&&	O
count	int
>=	O
(	O
expected_count	int
>>	O
2	int
)	O
)	O
return	O
OPENING_BACKQUOTE	O
;	O
else	O
return	O
CLOSING_BACKQUOTE	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'$'	O
)	O
{	O
if	O
(	O
open_singlequote	bool
)	O
return	O
QUOTED	O
(	O
c	int
)	O
;	O
if	O
(	O
count	int
>=	O
(	O
expected_count	int
>>	O
1	int
)	O
)	O
return	O
QUOTED	O
(	O
c	int
)	O
;	O
else	O
return	O
c	int
;	O
}	O
else	O
{	O
if	O
(	O
open_doublequote	bool
||	O
open_singlequote	bool
)	O
{	O
if	O
(	O
count	int
>	O
0	int
)	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
return	O
'\\'	O
;	O
}	O
else	O
return	O
QUOTED	O
(	O
c	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
count	int
>	O
(	O
expected_count	int
>>	O
1	int
)	O
)	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
return	O
'\\'	O
;	O
}	O
else	O
if	O
(	O
count	int
>	O
0	int
)	O
return	O
QUOTED	O
(	O
c	int
)	O
;	O
else	O
return	O
c	int
;	O
}	O
}	O
}	O
return	O
(	O
open_singlequote	bool
||	O
open_doublequote	bool
?	O
QUOTED	O
(	O
c	int
)	O
:	O
c	int
)	O
;	O
}	O
static	O
void	O
phase2_ungetc	function
(	O
int	O
c	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
break	O
;	O
case	O
'\n'	O
:	O
--	O
line_number	long
;	O
default	O
:	O
if	O
(	O
phase2_pushback_length	int
==	O
SIZEOF	O
(	O
phase2_pushback	array
)	O
)	O
abort	function
(	O
)	O
;	O
phase2_pushback	array
[	O
phase2_pushback_length	int
++	O
]	O
=	O
c	int
;	O
break	O
;	O
}	O
}	O
static	O
flag_context_list_table_ty	struct
*	O
flag_context_list_table	pointer
;	O
static	O
enum	O
word_type	enum
read_command_list	function
(	O
int	O
looking_for	int
,	O
flag_context_ty	struct
outer_context	struct
)	O
;	O
static	O
void	O
read_word	function
(	O
struct	O
word	struct
*	O
wp	pointer
,	O
int	O
looking_for	int
,	O
flag_context_ty	struct
context	struct
)	O
{	O
int	O
c	int
;	O
bool	bool
all_unquoted_digits	bool
;	O
do	O
{	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'#'	O
)	O
{	O
last_comment_line	int
=	O
line_number	long
;	O
comment_start	function
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
||	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	function
(	O
c	int
)	O
;	O
}	O
comment_line_end	function
(	O
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
if	O
(	O
last_non_comment_line	int
>	O
last_comment_line	int
)	O
savable_comment_reset	function
(	O
)	O
;	O
wp	pointer
->	O
type	char
=	O
t_separator	int
;	O
return	O
;	O
}	O
}	O
while	O
(	O
is_whitespace	function
(	O
c	int
)	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
wp	pointer
->	O
type	char
=	O
t_eof	int
;	O
return	O
;	O
}	O
if	O
(	O
c	int
==	O
'<'	O
||	O
c	int
==	O
'>'	O
)	O
{	O
int	O
c2	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'('	O
)	O
{	O
if	O
(	O
(	O
c	int
==	O
'<'	O
?	O
c2	int
==	O
'<'	O
:	O
c2	int
==	O
'|'	O
)	O
||	O
c2	int
==	O
'>'	O
||	O
c2	int
==	O
'&'	O
)	O
{	O
if	O
(	O
c	int
==	O
'<'	O
&&	O
c2	int
==	O
'<'	O
)	O
{	O
int	O
c3	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c3	int
!=	O
'-'	O
)	O
phase2_ungetc	function
(	O
c3	int
)	O
;	O
}	O
}	O
else	O
phase2_ungetc	function
(	O
c2	int
)	O
;	O
wp	pointer
->	O
type	char
=	O
t_redirect	int
;	O
return	O
;	O
}	O
else	O
phase2_ungetc	function
(	O
c2	int
)	O
;	O
}	O
if	O
(	O
looking_for	int
==	O
CLOSING_BACKQUOTE	O
&&	O
c	int
==	O
CLOSING_BACKQUOTE	O
)	O
{	O
saw_closing_backquote	function
(	O
)	O
;	O
wp	pointer
->	O
type	char
=	O
t_backquote	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
if	O
(	O
looking_for	int
==	O
')'	O
&&	O
c	int
==	O
')'	O
)	O
{	O
wp	pointer
->	O
type	char
=	O
t_paren	int
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
if	O
(	O
is_operator_start	function
(	O
c	int
)	O
)	O
{	O
wp	pointer
->	O
type	char
=	O
(	O
c	int
==	O
';'	O
?	O
t_separator	int
:	O
t_other	int
)	O
;	O
return	O
;	O
}	O
wp	pointer
->	O
type	char
=	O
t_string	int
;	O
wp	pointer
->	O
token	struct
=	O
XMALLOC	O
(	O
struct	O
token	struct
)	O
;	O
init_token	function
(	O
wp	pointer
->	O
token	struct
)	O
;	O
wp	pointer
->	O
line_number_at_start	int
=	O
line_number	long
;	O
all_unquoted_digits	bool
=	O
true	int
;	O
for	O
(	O
;	O
;	O
c	int
=	O
phase2_getc	function
(	O
)	O
)	O
{	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
all_unquoted_digits	bool
&&	O
(	O
c	int
==	O
'<'	O
||	O
c	int
==	O
'>'	O
)	O
)	O
{	O
int	O
c2	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
(	O
c	int
==	O
'<'	O
?	O
c2	int
==	O
'<'	O
:	O
c2	int
==	O
'|'	O
)	O
||	O
c2	int
==	O
'>'	O
||	O
c2	int
==	O
'&'	O
)	O
{	O
if	O
(	O
c	int
==	O
'<'	O
&&	O
c2	int
==	O
'<'	O
)	O
{	O
int	O
c3	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c3	int
!=	O
'-'	O
)	O
phase2_ungetc	function
(	O
c3	int
)	O
;	O
}	O
}	O
else	O
phase2_ungetc	function
(	O
c2	int
)	O
;	O
wp	pointer
->	O
type	char
=	O
t_redirect	int
;	O
free_token	function
(	O
wp	pointer
->	O
token	struct
)	O
;	O
free	function
(	O
wp	pointer
->	O
token	struct
)	O
;	O
last_non_comment_line	int
=	O
line_number	long
;	O
return	O
;	O
}	O
all_unquoted_digits	bool
=	O
all_unquoted_digits	bool
&&	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
;	O
if	O
(	O
c	int
==	O
'$'	O
)	O
{	O
int	O
c2	int
;	O
if	O
(	O
open_singlequote	bool
)	O
abort	function
(	O
)	O
;	O
if	O
(	O
phase2_pushback_length	int
>	O
0	int
)	O
abort	function
(	O
)	O
;	O
c2	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'('	O
)	O
{	O
bool	bool
saved_open_doublequote	bool
;	O
int	O
c3	int
;	O
phase1_ungetc	function
(	O
c2	int
)	O
;	O
saved_open_doublequote	bool
=	O
open_doublequote	bool
;	O
open_doublequote	bool
=	O
false	int
;	O
c2	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c2	int
!=	O
'('	O
)	O
abort	function
(	O
)	O
;	O
c3	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c3	int
==	O
'('	O
)	O
{	O
unsigned	O
int	O
depth	int
=	O
2	int
;	O
do	O
{	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'('	O
)	O
depth	int
++	O
;	O
else	O
if	O
(	O
c	int
==	O
')'	O
)	O
if	O
(	O
--	O
depth	int
==	O
0	int
)	O
break	O
;	O
}	O
while	O
(	O
c	int
!=	O
EOF	O
)	O
;	O
}	O
else	O
{	O
phase2_ungetc	function
(	O
c3	int
)	O
;	O
read_command_list	function
(	O
')'	O
,	O
context	struct
)	O
;	O
}	O
open_doublequote	bool
=	O
saved_open_doublequote	bool
;	O
}	O
else	O
{	O
phase1_ungetc	function
(	O
c2	int
)	O
;	O
c2	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'\''	O
&&	O
!	O
open_singlequote	bool
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\''	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
c	int
=	O
'\\'	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
break	O
;	O
case	O
'\''	O
:	O
break	O
;	O
case	O
'"'	O
:	O
break	O
;	O
case	O
'a'	O
:	O
c	int
=	O
'\a'	O
;	O
break	O
;	O
case	O
'b'	O
:	O
c	int
=	O
'\b'	O
;	O
break	O
;	O
case	O
'e'	O
:	O
case	O
'E'	O
:	O
c	int
=	O
0x1b	int
;	O
break	O
;	O
case	O
'f'	O
:	O
c	int
=	O
'\f'	O
;	O
break	O
;	O
case	O
'n'	O
:	O
c	int
=	O
'\n'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
c	int
=	O
'\r'	O
;	O
break	O
;	O
case	O
't'	O
:	O
c	int
=	O
'\t'	O
;	O
break	O
;	O
case	O
'v'	O
:	O
c	int
=	O
'\v'	O
;	O
break	O
;	O
case	O
'x'	O
:	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
||	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'F'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'f'	O
)	O
)	O
{	O
int	O
n	long
;	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
n	long
=	O
c	int
-	O
'0'	O
;	O
else	O
if	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'F'	O
)	O
n	long
=	O
10	int
+	O
c	int
-	O
'A'	O
;	O
else	O
if	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'f'	O
)	O
n	long
=	O
10	int
+	O
c	int
-	O
'a'	O
;	O
else	O
abort	function
(	O
)	O
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
||	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'F'	O
)	O
||	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'f'	O
)	O
)	O
{	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
)	O
n	long
=	O
n	long
*	O
16	int
+	O
c	int
-	O
'0'	O
;	O
else	O
if	O
(	O
c	int
>=	O
'A'	O
&&	O
c	int
<=	O
'F'	O
)	O
n	long
=	O
n	long
*	O
16	int
+	O
10	int
+	O
c	int
-	O
'A'	O
;	O
else	O
if	O
(	O
c	int
>=	O
'a'	O
&&	O
c	int
<=	O
'f'	O
)	O
n	long
=	O
n	long
*	O
16	int
+	O
10	int
+	O
c	int
-	O
'a'	O
;	O
else	O
abort	function
(	O
)	O
;	O
}	O
else	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
c	int
=	O
n	long
;	O
}	O
else	O
{	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
phase1_ungetc	function
(	O
'x'	O
)	O
;	O
c	int
=	O
'\\'	O
;	O
}	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
{	O
int	O
n	long
=	O
c	int
-	O
'0'	O
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'7'	O
)	O
{	O
n	long
=	O
n	long
*	O
8	int
+	O
c	int
-	O
'0'	O
;	O
c	int
=	O
phase1_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'7'	O
)	O
n	long
=	O
n	long
*	O
8	int
+	O
c	int
-	O
'0'	O
;	O
else	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
}	O
else	O
phase1_ungetc	function
(	O
c	int
)	O
;	O
c	int
=	O
n	long
;	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
wp	pointer
->	O
type	char
==	O
t_string	int
)	O
{	O
grow_token	function
(	O
wp	pointer
->	O
token	struct
)	O
;	O
wp	pointer
->	O
token	struct
->	O
chars	pointer
[	O
wp	pointer
->	O
token	struct
->	O
charcount	int
++	O
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
}	O
}	O
continue	O
;	O
}	O
else	O
if	O
(	O
c2	int
==	O
'"'	O
&&	O
!	O
open_doublequote	bool
)	O
{	O
lex_pos_ty	struct
pos	struct
;	O
struct	O
token	struct
string	pointer
;	O
saw_opening_singlequote	function
(	O
)	O
;	O
open_singlequote_terminator	char
=	O
'"'	O
;	O
pos	struct
.	O
file_name	pointer
=	O
logical_file_name	pointer
;	O
pos	struct
.	O
line_number	long
=	O
line_number	long
;	O
init_token	function
(	O
&	O
string	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'"'	O
)	O
{	O
saw_closing_singlequote	function
(	O
)	O
;	O
break	O
;	O
}	O
grow_token	function
(	O
&	O
string	pointer
)	O
;	O
string	pointer
.	O
chars	pointer
[	O
string	pointer
.	O
charcount	int
++	O
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
}	O
remember_a_message	function
(	O
mlp	pointer
,	O
NULL	O
,	O
string_of_token	function
(	O
&	O
string	pointer
)	O
,	O
false	int
,	O
context	struct
,	O
&	O
pos	struct
,	O
NULL	O
,	O
savable_comment	pointer
,	O
false	int
)	O
;	O
free_token	function
(	O
&	O
string	pointer
)	O
;	O
error_with_progname	bool
=	O
false	int
;	O
error	function
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s:%lu: warning: the syntax $\"...\" is deprecated due to security reasons; use eval_gettext instead"	pointer
)	O
,	O
pos	struct
.	O
file_name	pointer
,	O
(	O
unsigned	O
long	O
)	O
pos	struct
.	O
line_number	long
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
else	O
phase2_ungetc	function
(	O
c2	int
)	O
;	O
}	O
wp	pointer
->	O
type	char
=	O
t_other	int
;	O
continue	O
;	O
}	O
if	O
(	O
c	int
==	O
'\''	O
)	O
{	O
if	O
(	O
!	O
open_singlequote	bool
)	O
{	O
saw_opening_singlequote	function
(	O
)	O
;	O
}	O
else	O
{	O
saw_closing_singlequote	function
(	O
)	O
;	O
}	O
continue	O
;	O
}	O
if	O
(	O
c	int
==	O
'"'	O
)	O
{	O
if	O
(	O
open_singlequote	bool
&&	O
open_singlequote_terminator	char
==	O
'"'	O
)	O
{	O
saw_closing_singlequote	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
open_doublequote	bool
)	O
{	O
saw_opening_doublequote	function
(	O
)	O
;	O
}	O
else	O
{	O
saw_closing_doublequote	function
(	O
)	O
;	O
}	O
continue	O
;	O
}	O
if	O
(	O
c	int
==	O
OPENING_BACKQUOTE	O
)	O
{	O
saw_opening_backquote	function
(	O
)	O
;	O
read_command_list	function
(	O
CLOSING_BACKQUOTE	O
,	O
context	struct
)	O
;	O
wp	pointer
->	O
type	char
=	O
t_other	int
;	O
continue	O
;	O
}	O
if	O
(	O
c	int
==	O
CLOSING_BACKQUOTE	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'<'	O
||	O
c	int
==	O
'>'	O
)	O
{	O
int	O
c2	int
;	O
if	O
(	O
open_singlequote	bool
||	O
open_doublequote	bool
)	O
abort	function
(	O
)	O
;	O
c2	int
=	O
phase2_getc	function
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'('	O
)	O
{	O
read_command_list	function
(	O
')'	O
,	O
context	struct
)	O
;	O
wp	pointer
->	O
type	char
=	O
t_other	int
;	O
continue	O
;	O
}	O
else	O
phase2_ungetc	function
(	O
c2	int
)	O
;	O
}	O
if	O
(	O
!	O
open_singlequote	bool
&&	O
!	O
open_doublequote	bool
&&	O
(	O
is_whitespace	function
(	O
c	int
)	O
||	O
is_operator_start	function
(	O
c	int
)	O
)	O
)	O
break	O
;	O
if	O
(	O
wp	pointer
->	O
type	char
==	O
t_string	int
)	O
{	O
grow_token	function
(	O
wp	pointer
->	O
token	struct
)	O
;	O
wp	pointer
->	O
token	struct
->	O
chars	pointer
[	O
wp	pointer
->	O
token	struct
->	O
charcount	int
++	O
]	O
=	O
(	O
unsigned	O
char	O
)	O
c	int
;	O
}	O
}	O
phase2_ungetc	function
(	O
c	int
)	O
;	O
if	O
(	O
wp	pointer
->	O
type	char
!=	O
t_string	int
)	O
{	O
free_token	function
(	O
wp	pointer
->	O
token	struct
)	O
;	O
free	function
(	O
wp	pointer
->	O
token	struct
)	O
;	O
}	O
last_non_comment_line	int
=	O
line_number	long
;	O
}	O
static	O
enum	O
word_type	enum
read_command	function
(	O
int	O
looking_for	int
,	O
flag_context_ty	struct
outer_context	struct
)	O
{	O
int	O
arg	int
=	O
0	int
;	O
bool	bool
arg_of_redirect	bool
=	O
false	int
;	O
flag_context_list_iterator_ty	struct
context_iter	struct
;	O
const	O
struct	O
callshapes	struct
*	O
shapes	array
=	O
NULL	O
;	O
struct	O
arglist_parser	struct
*	O
argparser	pointer
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
struct	O
word	struct
inner	struct
;	O
flag_context_ty	struct
inner_context	struct
;	O
if	O
(	O
arg	int
==	O
0	int
)	O
inner_context	struct
=	O
null_context	struct
;	O
else	O
inner_context	struct
=	O
inherited_context	function
(	O
outer_context	struct
,	O
flag_context_list_iterator_advance	function
(	O
&	O
context_iter	struct
)	O
)	O
;	O
read_word	function
(	O
&	O
inner	struct
,	O
looking_for	int
,	O
inner_context	struct
)	O
;	O
if	O
(	O
inner	struct
.	O
type	char
==	O
t_separator	int
||	O
inner	struct
.	O
type	char
==	O
t_backquote	int
||	O
inner	struct
.	O
type	char
==	O
t_paren	int
||	O
inner	struct
.	O
type	char
==	O
t_eof	int
)	O
{	O
if	O
(	O
argparser	pointer
!=	O
NULL	O
)	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
return	O
inner	struct
.	O
type	char
;	O
}	O
if	O
(	O
extract_all	bool
)	O
{	O
if	O
(	O
inner	struct
.	O
type	char
==	O
t_string	int
)	O
{	O
lex_pos_ty	struct
pos	struct
;	O
pos	struct
.	O
file_name	pointer
=	O
logical_file_name	pointer
;	O
pos	struct
.	O
line_number	long
=	O
inner	struct
.	O
line_number_at_start	int
;	O
remember_a_message	function
(	O
mlp	pointer
,	O
NULL	O
,	O
string_of_word	function
(	O
&	O
inner	struct
)	O
,	O
false	int
,	O
inner_context	struct
,	O
&	O
pos	struct
,	O
NULL	O
,	O
savable_comment	pointer
,	O
false	int
)	O
;	O
}	O
}	O
if	O
(	O
arg_of_redirect	bool
)	O
{	O
arg_of_redirect	bool
=	O
false	int
;	O
}	O
else	O
if	O
(	O
inner	struct
.	O
type	char
==	O
t_redirect	int
)	O
{	O
arg_of_redirect	bool
=	O
true	int
;	O
}	O
else	O
{	O
bool	bool
matters_for_argparser	bool
=	O
true	int
;	O
if	O
(	O
argparser	pointer
==	O
NULL	O
)	O
{	O
arg	int
=	O
0	int
;	O
if	O
(	O
inner	struct
.	O
type	char
==	O
t_string	int
)	O
{	O
char	O
*	O
function_name	pointer
=	O
string_of_word	function
(	O
&	O
inner	struct
)	O
;	O
void	O
*	O
keyword_value	pointer
;	O
if	O
(	O
hash_find_entry	function
(	O
&	O
keywords	struct
,	O
function_name	pointer
,	O
strlen	function
(	O
function_name	pointer
)	O
,	O
&	O
keyword_value	pointer
)	O
==	O
0	int
)	O
shapes	array
=	O
(	O
const	O
struct	O
callshapes	struct
*	O
)	O
keyword_value	pointer
;	O
argparser	pointer
=	O
arglist_parser_alloc	function
(	O
mlp	pointer
,	O
shapes	array
)	O
;	O
context_iter	struct
=	O
flag_context_list_iterator	function
(	O
flag_context_list_table_lookup	function
(	O
flag_context_list_table	pointer
,	O
function_name	pointer
,	O
strlen	function
(	O
function_name	pointer
)	O
)	O
)	O
;	O
free	function
(	O
function_name	pointer
)	O
;	O
}	O
else	O
context_iter	struct
=	O
null_context_list_iterator	struct
;	O
}	O
else	O
{	O
if	O
(	O
inner	struct
.	O
type	char
==	O
t_string	int
)	O
{	O
bool	bool
accepts_context	bool
=	O
(	O
(	O
argparser	pointer
->	O
keyword_len	long
==	O
7	int
&&	O
memcmp	function
(	O
argparser	pointer
->	O
keyword	pointer
,	O
"gettext"	pointer
,	O
7	int
)	O
==	O
0	int
)	O
||	O
(	O
argparser	pointer
->	O
keyword_len	long
==	O
8	int
&&	O
memcmp	function
(	O
argparser	pointer
->	O
keyword	pointer
,	O
"ngettext"	pointer
,	O
8	int
)	O
==	O
0	int
)	O
)	O
;	O
if	O
(	O
accepts_context	bool
&&	O
argparser	pointer
->	O
next_is_msgctxt	bool
)	O
{	O
char	O
*	O
s	pointer
=	O
string_of_word	function
(	O
&	O
inner	struct
)	O
;	O
mixed_string_ty	struct
*	O
ms	pointer
=	O
mixed_string_alloc_simple	function
(	O
s	pointer
,	O
lc_string	int
,	O
logical_file_name	pointer
,	O
inner	struct
.	O
line_number_at_start	int
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
argparser	pointer
->	O
next_is_msgctxt	bool
=	O
false	int
;	O
arglist_parser_remember_msgctxt	function
(	O
argparser	pointer
,	O
ms	pointer
,	O
inner_context	struct
,	O
logical_file_name	pointer
,	O
inner	struct
.	O
line_number_at_start	int
)	O
;	O
matters_for_argparser	bool
=	O
false	int
;	O
}	O
else	O
if	O
(	O
accepts_context	bool
&&	O
(	O
(	O
inner	struct
.	O
token	struct
->	O
charcount	int
==	O
2	int
&&	O
memcmp	function
(	O
inner	struct
.	O
token	struct
->	O
chars	pointer
,	O
"-c"	pointer
,	O
2	int
)	O
==	O
0	int
)	O
||	O
(	O
inner	struct
.	O
token	struct
->	O
charcount	int
==	O
9	int
&&	O
memcmp	function
(	O
inner	struct
.	O
token	struct
->	O
chars	pointer
,	O
"--context"	pointer
,	O
9	int
)	O
==	O
0	int
)	O
)	O
)	O
{	O
argparser	pointer
->	O
next_is_msgctxt	bool
=	O
true	int
;	O
matters_for_argparser	bool
=	O
false	int
;	O
}	O
else	O
if	O
(	O
accepts_context	bool
&&	O
(	O
inner	struct
.	O
token	struct
->	O
charcount	int
>=	O
10	int
&&	O
memcmp	function
(	O
inner	struct
.	O
token	struct
->	O
chars	pointer
,	O
"--context="	pointer
,	O
10	int
)	O
==	O
0	int
)	O
)	O
{	O
char	O
*	O
s	pointer
=	O
substring_of_word	function
(	O
&	O
inner	struct
,	O
10	int
)	O
;	O
mixed_string_ty	struct
*	O
ms	pointer
=	O
mixed_string_alloc_simple	function
(	O
s	pointer
,	O
lc_string	int
,	O
logical_file_name	pointer
,	O
inner	struct
.	O
line_number_at_start	int
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
argparser	pointer
->	O
next_is_msgctxt	bool
=	O
false	int
;	O
arglist_parser_remember_msgctxt	function
(	O
argparser	pointer
,	O
ms	pointer
,	O
inner_context	struct
,	O
logical_file_name	pointer
,	O
inner	struct
.	O
line_number_at_start	int
)	O
;	O
matters_for_argparser	bool
=	O
false	int
;	O
}	O
else	O
{	O
char	O
*	O
s	pointer
=	O
string_of_word	function
(	O
&	O
inner	struct
)	O
;	O
mixed_string_ty	struct
*	O
ms	pointer
=	O
mixed_string_alloc_simple	function
(	O
s	pointer
,	O
lc_string	int
,	O
logical_file_name	pointer
,	O
inner	struct
.	O
line_number_at_start	int
)	O
;	O
free	function
(	O
s	pointer
)	O
;	O
arglist_parser_remember	function
(	O
argparser	pointer
,	O
arg	int
,	O
ms	pointer
,	O
inner_context	struct
,	O
logical_file_name	pointer
,	O
inner	struct
.	O
line_number_at_start	int
,	O
savable_comment	pointer
,	O
false	int
)	O
;	O
}	O
}	O
if	O
(	O
matters_for_argparser	bool
)	O
if	O
(	O
arglist_parser_decidedp	function
(	O
argparser	pointer
,	O
arg	int
)	O
)	O
{	O
arglist_parser_done	function
(	O
argparser	pointer
,	O
arg	int
)	O
;	O
shapes	array
=	O
NULL	O
;	O
argparser	pointer
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
matters_for_argparser	bool
)	O
arg	int
++	O
;	O
}	O
free_word	function
(	O
&	O
inner	struct
)	O
;	O
}	O
}	O
static	O
enum	O
word_type	enum
read_command_list	function
(	O
int	O
looking_for	int
,	O
flag_context_ty	struct
outer_context	struct
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
enum	O
word_type	enum
terminator	char
;	O
terminator	char
=	O
read_command	function
(	O
looking_for	int
,	O
outer_context	struct
)	O
;	O
if	O
(	O
terminator	char
!=	O
t_separator	int
)	O
return	O
terminator	char
;	O
}	O
}	O
void	O
extract_sh	function
(	O
FILE	struct
*	O
f	pointer
,	O
const	O
char	O
*	O
real_filename	pointer
,	O
const	O
char	O
*	O
logical_filename	pointer
,	O
flag_context_list_table_ty	struct
*	O
flag_table	pointer
,	O
msgdomain_list_ty	struct
*	O
mdlp	pointer
)	O
{	O
mlp	pointer
=	O
mdlp	pointer
->	O
item	pointer
[	O
0	int
]	O
->	O
messages	pointer
;	O
fp	pointer
=	O
f	pointer
;	O
real_file_name	pointer
=	O
real_filename	pointer
;	O
logical_file_name	pointer
=	O
xstrdup	function
(	O
logical_filename	pointer
)	O
;	O
line_number	long
=	O
1	int
;	O
last_comment_line	int
=	O
-	O
1	int
;	O
last_non_comment_line	int
=	O
-	O
1	int
;	O
nested_backquotes	int
=	O
0	int
;	O
open_doublequotes_mask	int
=	O
0	int
;	O
open_doublequote	bool
=	O
false	int
;	O
open_singlequote	bool
=	O
false	int
;	O
flag_context_list_table	pointer
=	O
flag_table	pointer
;	O
init_keywords	function
(	O
)	O
;	O
read_command_list	function
(	O
'\0'	O
,	O
null_context	struct
)	O
;	O
fp	pointer
=	O
NULL	O
;	O
real_file_name	pointer
=	O
NULL	O
;	O
logical_file_name	pointer
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
}	O
