static	O
void	O
_block_out	function
(	O
rle_out	struct
*	O
rle	pointer
,	O
unsigned	O
char	O
c	char
)	O
;	O
static	O
void	O
_write_block	function
(	O
rle_out	struct
*	O
rle	pointer
)	O
{	O
if	O
(	O
rle	pointer
->	O
ofile	pointer
)	O
{	O
fputc	function
(	O
rle	pointer
->	O
oblen	int
,	O
rle	pointer
->	O
ofile	pointer
)	O
;	O
fwrite	function
(	O
(	O
void	O
*	O
)	O
&	O
(	O
rle	pointer
->	O
oblock	array
[	O
0	int
]	O
)	O
,	O
1	int
,	O
rle	pointer
->	O
oblen	int
,	O
rle	pointer
->	O
ofile	pointer
)	O
;	O
}	O
rle	pointer
->	O
oblen	int
=	O
0	int
;	O
}	O
static	O
void	O
_block_out	function
(	O
rle_out	struct
*	O
rle	pointer
,	O
unsigned	O
char	O
c	char
)	O
{	O
rle	pointer
->	O
oblock	array
[	O
(	O
rle	pointer
->	O
oblen	int
)	O
++	O
]	O
=	O
c	char
;	O
if	O
(	O
rle	pointer
->	O
oblen	int
>=	O
255	int
)	O
_write_block	function
(	O
rle	pointer
)	O
;	O
}	O
static	O
void	O
_block_flush	function
(	O
rle_out	struct
*	O
rle	pointer
)	O
{	O
if	O
(	O
rle	pointer
->	O
oblen	int
>	O
0	int
)	O
_write_block	function
(	O
rle	pointer
)	O
;	O
}	O
static	O
void	O
_output	function
(	O
rle_out	struct
*	O
rle	pointer
,	O
int	O
val	int
)	O
{	O
rle	pointer
->	O
obuf	int
|=	O
val	int
<<	O
rle	pointer
->	O
obits	int
;	O
rle	pointer
->	O
obits	int
+=	O
rle	pointer
->	O
out_bits	int
;	O
while	O
(	O
rle	pointer
->	O
obits	int
>=	O
8	int
)	O
{	O
_block_out	function
(	O
rle	pointer
,	O
(	O
unsigned	O
char	O
)	O
(	O
rle	pointer
->	O
obuf	int
&	O
0xff	int
)	O
)	O
;	O
rle	pointer
->	O
obuf	int
>>=	O
8	int
;	O
rle	pointer
->	O
obits	int
-=	O
8	int
;	O
}	O
}	O
static	O
void	O
_output_flush	function
(	O
rle_out	struct
*	O
rle	pointer
)	O
{	O
if	O
(	O
rle	pointer
->	O
obits	int
>	O
0	int
)	O
_block_out	function
(	O
rle	pointer
,	O
(	O
unsigned	O
char	O
)	O
(	O
rle	pointer
->	O
obuf	int
)	O
)	O
;	O
_block_flush	function
(	O
rle	pointer
)	O
;	O
}	O
static	O
void	O
_did_clear	function
(	O
rle_out	struct
*	O
rle	pointer
)	O
{	O
rle	pointer
->	O
out_bits	int
=	O
rle	pointer
->	O
out_bits_init	int
;	O
rle	pointer
->	O
out_bump	int
=	O
rle	pointer
->	O
out_bump_init	int
;	O
rle	pointer
->	O
out_clear	int
=	O
rle	pointer
->	O
out_clear_init	int
;	O
rle	pointer
->	O
out_count	int
=	O
0	int
;	O
rle	pointer
->	O
rl_table_max	int
=	O
0	int
;	O
rle	pointer
->	O
just_cleared	enum
=	O
true	int
;	O
}	O
static	O
void	O
_output_plain	function
(	O
rle_out	struct
*	O
rle	pointer
,	O
int	O
c	char
)	O
{	O
rle	pointer
->	O
just_cleared	enum
=	O
false	int
;	O
_output	function
(	O
rle	pointer
,	O
c	char
)	O
;	O
rle	pointer
->	O
out_count	int
++	O
;	O
if	O
(	O
rle	pointer
->	O
out_count	int
>=	O
rle	pointer
->	O
out_bump	int
)	O
{	O
rle	pointer
->	O
out_bits	int
++	O
;	O
rle	pointer
->	O
out_bump	int
+=	O
1	int
<<	O
(	O
rle	pointer
->	O
out_bits	int
-	O
1	int
)	O
;	O
}	O
if	O
(	O
rle	pointer
->	O
out_count	int
>=	O
rle	pointer
->	O
out_clear	int
)	O
{	O
_output	function
(	O
rle	pointer
,	O
rle	pointer
->	O
code_clear	int
)	O
;	O
_did_clear	function
(	O
rle	pointer
)	O
;	O
}	O
}	O
static	O
unsigned	O
int	O
_isqrt	function
(	O
unsigned	O
int	O
x	double
)	O
{	O
unsigned	O
int	O
r	int
;	O
unsigned	O
int	O
v	pointer
;	O
if	O
(	O
x	double
<	O
2	int
)	O
return	O
x	double
;	O
for	O
(	O
v	pointer
=	O
x	double
,	O
r	int
=	O
1	int
;	O
v	pointer
;	O
v	pointer
>>=	O
2	int
,	O
r	int
<<=	O
1	int
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
v	pointer
=	O
(	O
(	O
x	double
/	O
r	int
)	O
+	O
r	int
)	O
/	O
2	int
;	O
if	O
(	O
(	O
v	pointer
==	O
r	int
)	O
||	O
(	O
v	pointer
==	O
r	int
+	O
1	int
)	O
)	O
return	O
r	int
;	O
r	int
=	O
v	pointer
;	O
}	O
}	O
static	O
unsigned	O
int	O
_compute_triangle_count	function
(	O
unsigned	O
int	O
count	int
,	O
unsigned	O
int	O
nrepcodes	int
)	O
{	O
unsigned	O
int	O
perrep	int
,	O
cost	int
;	O
cost	int
=	O
0	int
;	O
perrep	int
=	O
(	O
nrepcodes	int
*	O
(	O
nrepcodes	int
+	O
1	int
)	O
)	O
/	O
2	int
;	O
while	O
(	O
count	int
>=	O
perrep	int
)	O
{	O
cost	int
+=	O
nrepcodes	int
;	O
count	int
-=	O
perrep	int
;	O
}	O
if	O
(	O
count	int
>	O
0	int
)	O
{	O
unsigned	O
int	O
n	array
;	O
n	array
=	O
_isqrt	function
(	O
count	int
)	O
;	O
while	O
(	O
(	O
n	array
*	O
(	O
n	array
+	O
1	int
)	O
)	O
>=	O
2	int
*	O
count	int
)	O
n	array
--	O
;	O
while	O
(	O
(	O
n	array
*	O
(	O
n	array
+	O
1	int
)	O
)	O
<	O
2	int
*	O
count	int
)	O
n	array
++	O
;	O
cost	int
+=	O
n	array
;	O
}	O
return	O
cost	int
;	O
}	O
static	O
void	O
_max_out_clear	function
(	O
rle_out	struct
*	O
rle	pointer
)	O
{	O
rle	pointer
->	O
out_clear	int
=	O
rle	pointer
->	O
max_ocodes	int
;	O
}	O
static	O
void	O
_reset_out_clear	function
(	O
rle_out	struct
*	O
rle	pointer
)	O
{	O
rle	pointer
->	O
out_clear	int
=	O
rle	pointer
->	O
out_clear_init	int
;	O
if	O
(	O
rle	pointer
->	O
out_count	int
>=	O
rle	pointer
->	O
out_clear	int
)	O
{	O
_output	function
(	O
rle	pointer
,	O
rle	pointer
->	O
code_clear	int
)	O
;	O
_did_clear	function
(	O
rle	pointer
)	O
;	O
}	O
}	O
static	O
void	O
_rl_flush_fromclear	function
(	O
rle_out	struct
*	O
rle	pointer
,	O
int	O
count	int
)	O
{	O
int	O
n	array
;	O
_max_out_clear	function
(	O
rle	pointer
)	O
;	O
rle	pointer
->	O
rl_table_pixel	int
=	O
rle	pointer
->	O
rl_pixel	int
;	O
n	array
=	O
1	int
;	O
while	O
(	O
count	int
>	O
0	int
)	O
{	O
if	O
(	O
n	array
==	O
1	int
)	O
{	O
rle	pointer
->	O
rl_table_max	int
=	O
1	int
;	O
_output_plain	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_pixel	int
)	O
;	O
count	int
--	O
;	O
}	O
else	O
if	O
(	O
count	int
>=	O
n	array
)	O
{	O
rle	pointer
->	O
rl_table_max	int
=	O
n	array
;	O
_output_plain	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_basecode	int
+	O
n	array
-	O
2	int
)	O
;	O
count	int
-=	O
n	array
;	O
}	O
else	O
if	O
(	O
count	int
==	O
1	int
)	O
{	O
(	O
rle	pointer
->	O
rl_table_max	int
)	O
++	O
;	O
_output_plain	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_pixel	int
)	O
;	O
count	int
=	O
0	int
;	O
}	O
else	O
{	O
rle	pointer
->	O
rl_table_max	int
++	O
;	O
_output_plain	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_basecode	int
+	O
count	int
-	O
2	int
)	O
;	O
count	int
=	O
0	int
;	O
}	O
if	O
(	O
rle	pointer
->	O
out_count	int
==	O
0	int
)	O
n	array
=	O
1	int
;	O
else	O
n	array
++	O
;	O
}	O
_reset_out_clear	function
(	O
rle	pointer
)	O
;	O
}	O
static	O
void	O
_rl_flush_clearorrep	function
(	O
rle_out	struct
*	O
rle	pointer
,	O
int	O
count	int
)	O
{	O
int	O
withclr	int
;	O
withclr	int
=	O
1	int
+	O
_compute_triangle_count	function
(	O
(	O
unsigned	O
int	O
)	O
count	int
,	O
(	O
unsigned	O
int	O
)	O
(	O
rle	pointer
->	O
max_ocodes	int
)	O
)	O
;	O
if	O
(	O
withclr	int
<	O
count	int
)	O
{	O
_output	function
(	O
rle	pointer
,	O
rle	pointer
->	O
code_clear	int
)	O
;	O
_did_clear	function
(	O
rle	pointer
)	O
;	O
_rl_flush_fromclear	function
(	O
rle	pointer
,	O
count	int
)	O
;	O
}	O
else	O
for	O
(	O
;	O
count	int
>	O
0	int
;	O
count	int
--	O
)	O
_output_plain	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_pixel	int
)	O
;	O
}	O
static	O
void	O
_rl_flush_withtable	function
(	O
rle_out	struct
*	O
rle	pointer
,	O
int	O
count	int
)	O
{	O
int	O
repmax	int
;	O
int	O
repleft	int
;	O
int	O
leftover	int
;	O
repmax	int
=	O
count	int
/	O
rle	pointer
->	O
rl_table_max	int
;	O
leftover	int
=	O
count	int
%	O
rle	pointer
->	O
rl_table_max	int
;	O
repleft	int
=	O
(	O
leftover	int
?	O
1	int
:	O
0	int
)	O
;	O
if	O
(	O
rle	pointer
->	O
out_count	int
+	O
repmax	int
+	O
repleft	int
>	O
rle	pointer
->	O
max_ocodes	int
)	O
{	O
repmax	int
=	O
rle	pointer
->	O
max_ocodes	int
-	O
rle	pointer
->	O
out_count	int
;	O
leftover	int
=	O
count	int
-	O
(	O
repmax	int
*	O
rle	pointer
->	O
rl_table_max	int
)	O
;	O
repleft	int
=	O
1	int
+	O
_compute_triangle_count	function
(	O
(	O
unsigned	O
int	O
)	O
leftover	int
,	O
(	O
unsigned	O
int	O
)	O
(	O
rle	pointer
->	O
max_ocodes	int
)	O
)	O
;	O
}	O
if	O
(	O
1	int
+	O
_compute_triangle_count	function
(	O
(	O
unsigned	O
int	O
)	O
count	int
,	O
(	O
unsigned	O
int	O
)	O
(	O
rle	pointer
->	O
max_ocodes	int
)	O
)	O
<	O
repmax	int
+	O
repleft	int
)	O
{	O
_output	function
(	O
rle	pointer
,	O
rle	pointer
->	O
code_clear	int
)	O
;	O
_did_clear	function
(	O
rle	pointer
)	O
;	O
_rl_flush_fromclear	function
(	O
rle	pointer
,	O
count	int
)	O
;	O
return	O
;	O
}	O
_max_out_clear	function
(	O
rle	pointer
)	O
;	O
for	O
(	O
;	O
repmax	int
>	O
0	int
;	O
repmax	int
--	O
)	O
_output_plain	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_basecode	int
+	O
rle	pointer
->	O
rl_table_max	int
-	O
2	int
)	O
;	O
if	O
(	O
leftover	int
)	O
{	O
if	O
(	O
rle	pointer
->	O
just_cleared	enum
)	O
_rl_flush_fromclear	function
(	O
rle	pointer
,	O
leftover	int
)	O
;	O
else	O
if	O
(	O
leftover	int
==	O
1	int
)	O
_output_plain	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_pixel	int
)	O
;	O
else	O
_output_plain	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_basecode	int
+	O
leftover	int
-	O
2	int
)	O
;	O
}	O
_reset_out_clear	function
(	O
rle	pointer
)	O
;	O
}	O
static	O
void	O
_rl_flush	function
(	O
rle_out	struct
*	O
rle	pointer
)	O
{	O
if	O
(	O
rle	pointer
->	O
rl_count	int
==	O
1	int
)	O
_output_plain	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_pixel	int
)	O
;	O
else	O
{	O
if	O
(	O
rle	pointer
->	O
just_cleared	enum
)	O
_rl_flush_fromclear	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_count	int
)	O
;	O
else	O
if	O
(	O
(	O
rle	pointer
->	O
rl_table_max	int
<	O
2	int
)	O
||	O
(	O
rle	pointer
->	O
rl_table_pixel	int
!=	O
rle	pointer
->	O
rl_pixel	int
)	O
)	O
_rl_flush_clearorrep	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_count	int
)	O
;	O
else	O
_rl_flush_withtable	function
(	O
rle	pointer
,	O
rle	pointer
->	O
rl_count	int
)	O
;	O
}	O
rle	pointer
->	O
rl_count	int
=	O
0	int
;	O
}	O
rle_out	struct
*	O
_rle_init	function
(	O
FILE	struct
*	O
fp	pointer
,	O
int	O
bit_depth	int
)	O
{	O
int	O
init_bits	int
;	O
rle_out	struct
*	O
rle	pointer
;	O
init_bits	int
=	O
IMAX	O
(	O
bit_depth	int
,	O
2	int
)	O
+	O
1	int
;	O
rle	pointer
=	O
(	O
rle_out	struct
*	O
)	O
_pl_xmalloc	function
(	O
sizeof	O
(	O
rle_out	struct
)	O
)	O
;	O
rle	pointer
->	O
ofile	pointer
=	O
fp	pointer
;	O
rle	pointer
->	O
obuf	int
=	O
0	int
;	O
rle	pointer
->	O
obits	int
=	O
0	int
;	O
rle	pointer
->	O
oblen	int
=	O
0	int
;	O
rle	pointer
->	O
code_clear	int
=	O
1	int
<<	O
(	O
init_bits	int
-	O
1	int
)	O
;	O
rle	pointer
->	O
code_eof	int
=	O
rle	pointer
->	O
code_clear	int
+	O
1	int
;	O
rle	pointer
->	O
rl_basecode	int
=	O
rle	pointer
->	O
code_eof	int
+	O
1	int
;	O
rle	pointer
->	O
out_bump_init	int
=	O
(	O
1	int
<<	O
(	O
init_bits	int
-	O
1	int
)	O
)	O
-	O
1	int
;	O
rle	pointer
->	O
out_clear_init	int
=	O
(	O
init_bits	int
<=	O
3	int
)	O
?	O
9	int
:	O
(	O
rle	pointer
->	O
out_bump_init	int
-	O
1	int
)	O
;	O
rle	pointer
->	O
out_bits_init	int
=	O
init_bits	int
;	O
rle	pointer
->	O
max_ocodes	int
=	O
(	O
1	int
<<	O
GIFBITS	int
)	O
-	O
(	O
(	O
1	int
<<	O
(	O
rle	pointer
->	O
out_bits_init	int
-	O
1	int
)	O
)	O
+	O
3	int
)	O
;	O
_did_clear	function
(	O
rle	pointer
)	O
;	O
_output	function
(	O
rle	pointer
,	O
rle	pointer
->	O
code_clear	int
)	O
;	O
rle	pointer
->	O
rl_count	int
=	O
0	int
;	O
return	O
rle	pointer
;	O
}	O
void	O
_rle_do_pixel	function
(	O
rle_out	struct
*	O
rle	pointer
,	O
int	O
c	char
)	O
{	O
if	O
(	O
(	O
rle	pointer
->	O
rl_count	int
>	O
0	int
)	O
&&	O
(	O
c	char
!=	O
rle	pointer
->	O
rl_pixel	int
)	O
)	O
_rl_flush	function
(	O
rle	pointer
)	O
;	O
if	O
(	O
rle	pointer
->	O
rl_pixel	int
==	O
c	char
)	O
rle	pointer
->	O
rl_count	int
++	O
;	O
else	O
{	O
rle	pointer
->	O
rl_pixel	int
=	O
c	char
;	O
rle	pointer
->	O
rl_count	int
=	O
1	int
;	O
}	O
}	O
void	O
_rle_terminate	function
(	O
rle_out	struct
*	O
rle	pointer
)	O
{	O
if	O
(	O
rle	pointer
->	O
rl_count	int
>	O
0	int
)	O
_rl_flush	function
(	O
rle	pointer
)	O
;	O
_output	function
(	O
rle	pointer
,	O
rle	pointer
->	O
code_eof	int
)	O
;	O
_output_flush	function
(	O
rle	pointer
)	O
;	O
free	function
(	O
rle	pointer
)	O
;	O
}	O
