static	O
int	O
print_capa	function
(	O
void	O
*	O
item	pointer
,	O
void	O
*	O
data	pointer
)	O
{	O
struct	O
pop3d_capa	struct
*	O
cp	pointer
=	O
item	pointer
;	O
struct	O
pop3d_session	struct
*	O
session	pointer
=	O
data	pointer
;	O
if	O
(	O
cp	pointer
->	O
type	int
==	O
capa_func	int
)	O
{	O
cp	pointer
->	O
value	union
.	O
func	pointer
(	O
cp	pointer
->	O
name	pointer
,	O
session	pointer
)	O
;	O
}	O
else	O
{	O
pop3d_outf	function
(	O
"%s"	pointer
,	O
cp	pointer
->	O
name	pointer
)	O
;	O
if	O
(	O
cp	pointer
->	O
value	union
.	O
string	pointer
)	O
pop3d_outf	function
(	O
"%s"	pointer
,	O
cp	pointer
->	O
value	union
.	O
string	pointer
)	O
;	O
pop3d_outf	function
(	O
"\n"	pointer
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
pop3d_capa	struct
(	O
char	O
*	O
arg	pointer
,	O
struct	O
pop3d_session	struct
*	O
sess	pointer
)	O
{	O
if	O
(	O
strlen	function
(	O
arg	pointer
)	O
!=	O
0	int
)	O
return	O
ERR_BAD_ARGS	int
;	O
pop3d_outf	function
(	O
"+OK Capability list follows\n"	pointer
)	O
;	O
mu_list_foreach	function
(	O
sess	pointer
->	O
capa	pointer
,	O
print_capa	function
,	O
sess	pointer
)	O
;	O
pop3d_outf	function
(	O
".\n"	pointer
)	O
;	O
return	O
OK	int
;	O
}	O
static	O
void	O
pop3d_append_capa_string	function
(	O
struct	O
pop3d_session	struct
*	O
sess	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
const	O
char	O
*	O
value	union
)	O
{	O
struct	O
pop3d_capa	struct
*	O
cp	pointer
;	O
cp	pointer
=	O
mu_alloc	function
(	O
sizeof	O
(	O
*	O
cp	pointer
)	O
)	O
;	O
cp	pointer
->	O
type	int
=	O
capa_string	int
;	O
cp	pointer
->	O
name	pointer
=	O
name	pointer
;	O
cp	pointer
->	O
value	union
.	O
string	pointer
=	O
value	union
?	O
mu_strdup	function
(	O
value	union
)	O
:	O
NULL	O
;	O
if	O
(	O
mu_list_append	function
(	O
sess	pointer
->	O
capa	pointer
,	O
cp	pointer
)	O
)	O
mu_alloc_die	function
(	O
)	O
;	O
}	O
static	O
void	O
pop3d_append_capa_func	function
(	O
struct	O
pop3d_session	struct
*	O
sess	pointer
,	O
const	O
char	O
*	O
name	pointer
,	O
void	O
(	O
*	O
func	pointer
)	O
(	O
const	O
char	O
*	O
,	O
struct	O
pop3d_session	struct
*	O
)	O
)	O
{	O
struct	O
pop3d_capa	struct
*	O
cp	pointer
;	O
if	O
(	O
!	O
func	pointer
)	O
return	O
;	O
cp	pointer
=	O
mu_alloc	function
(	O
sizeof	O
(	O
*	O
cp	pointer
)	O
)	O
;	O
cp	pointer
->	O
type	int
=	O
capa_func	int
;	O
cp	pointer
->	O
name	pointer
=	O
name	pointer
;	O
cp	pointer
->	O
value	union
.	O
func	pointer
=	O
func	pointer
;	O
if	O
(	O
mu_list_append	function
(	O
sess	pointer
->	O
capa	pointer
,	O
cp	pointer
)	O
)	O
mu_alloc_die	function
(	O
)	O
;	O
}	O
static	O
void	O
capa_free	function
(	O
void	O
*	O
p	pointer
)	O
{	O
struct	O
pop3d_capa	struct
*	O
cp	pointer
=	O
p	pointer
;	O
if	O
(	O
cp	pointer
->	O
type	int
==	O
capa_string	int
&&	O
cp	pointer
->	O
value	union
.	O
string	pointer
)	O
free	function
(	O
cp	pointer
->	O
value	union
.	O
string	pointer
)	O
;	O
free	function
(	O
cp	pointer
)	O
;	O
}	O
static	O
void	O
capa_implementation	function
(	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
pop3d_session	struct
*	O
session	pointer
)	O
{	O
if	O
(	O
state	pointer
==	O
TRANSACTION	int
)	O
pop3d_outf	function
(	O
"%s %s\n"	pointer
,	O
name	pointer
,	O
PACKAGE_STRING	pointer
)	O
;	O
}	O
static	O
void	O
capa_stls	function
(	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
pop3d_session	struct
*	O
session	pointer
)	O
{	O
switch	O
(	O
session	pointer
->	O
tls_mode	enum
)	O
{	O
case	O
tls_ondemand	int
:	O
case	O
tls_required	int
:	O
pop3d_outf	function
(	O
"%s\n"	pointer
,	O
name	pointer
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
capa_user	function
(	O
const	O
char	O
*	O
name	pointer
,	O
struct	O
pop3d_session	struct
*	O
session	pointer
)	O
{	O
if	O
(	O
state	pointer
==	O
INITIAL	O
)	O
pop3d_outf	function
(	O
"XTLSREQUIRED\n"	pointer
)	O
;	O
else	O
pop3d_outf	function
(	O
"USER\n"	pointer
)	O
;	O
}	O
void	O
pop3d_session_init	function
(	O
struct	O
pop3d_session	struct
*	O
session	pointer
)	O
{	O
if	O
(	O
mu_list_create	function
(	O
&	O
session	pointer
->	O
capa	pointer
)	O
)	O
mu_alloc_die	function
(	O
)	O
;	O
mu_list_set_destroy_item	function
(	O
session	pointer
->	O
capa	pointer
,	O
capa_free	function
)	O
;	O
pop3d_append_capa_string	function
(	O
session	pointer
,	O
"TOP"	pointer
,	O
NULL	O
)	O
;	O
pop3d_append_capa_string	function
(	O
session	pointer
,	O
"UIDL"	pointer
,	O
NULL	O
)	O
;	O
pop3d_append_capa_string	function
(	O
session	pointer
,	O
"RESP-CODES"	pointer
,	O
NULL	O
)	O
;	O
pop3d_append_capa_string	function
(	O
session	pointer
,	O
"PIPELINING"	pointer
,	O
NULL	O
)	O
;	O
pop3d_append_capa_string	function
(	O
session	pointer
,	O
"AUTH-RESP-CODE"	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
pop3d_xlines	int
)	O
pop3d_append_capa_string	function
(	O
session	pointer
,	O
"XLINES"	pointer
,	O
NULL	O
)	O
;	O
pop3d_append_capa_func	function
(	O
session	pointer
,	O
"LOGIN-DELAY"	pointer
,	O
login_delay_capa	O
)	O
;	O
pop3d_append_capa_string	function
(	O
session	pointer
,	O
"EXPIRE"	pointer
,	O
(	O
expire	int
==	O
EXPIRE_NEVER	O
)	O
?	O
"NEVER"	pointer
:	O
mu_umaxtostr	function
(	O
0	int
,	O
expire	int
)	O
)	O
;	O
pop3d_append_capa_func	function
(	O
session	pointer
,	O
NULL	O
,	O
capa_user	function
)	O
;	O
pop3d_append_capa_func	function
(	O
session	pointer
,	O
"STLS"	pointer
,	O
capa_stls	function
)	O
;	O
pop3d_append_capa_func	function
(	O
session	pointer
,	O
"IMPLEMENTATION"	pointer
,	O
capa_implementation	function
)	O
;	O
}	O
void	O
pop3d_session_free	function
(	O
struct	O
pop3d_session	struct
*	O
session	pointer
)	O
{	O
mu_list_destroy	function
(	O
&	O
session	pointer
->	O
capa	pointer
)	O
;	O
}	O
