struct	O
file_wicket	struct
{	O
char	O
*	O
filename	pointer
;	O
}	O
;	O
static	O
void	O
_file_wicket_destroy	function
(	O
mu_wicket_t	pointer
wicket	pointer
)	O
{	O
struct	O
file_wicket	struct
*	O
fw	pointer
=	O
mu_wicket_get_data	function
(	O
wicket	pointer
)	O
;	O
free	function
(	O
fw	pointer
->	O
filename	pointer
)	O
;	O
free	function
(	O
fw	pointer
)	O
;	O
}	O
struct	O
file_ticket	struct
{	O
char	O
*	O
filename	pointer
;	O
char	O
*	O
user	pointer
;	O
mu_url_t	pointer
tickurl	pointer
;	O
}	O
;	O
static	O
void	O
file_ticket_destroy	function
(	O
mu_ticket_t	pointer
ticket	pointer
)	O
{	O
struct	O
file_ticket	struct
*	O
ft	pointer
=	O
mu_ticket_get_data	function
(	O
ticket	pointer
)	O
;	O
if	O
(	O
ft	pointer
)	O
{	O
free	function
(	O
ft	pointer
->	O
filename	pointer
)	O
;	O
free	function
(	O
ft	pointer
->	O
user	pointer
)	O
;	O
mu_url_destroy	function
(	O
&	O
ft	pointer
->	O
tickurl	pointer
)	O
;	O
free	function
(	O
ft	pointer
)	O
;	O
}	O
}	O
int	O
file_ticket_get_cred	function
(	O
mu_ticket_t	pointer
ticket	pointer
,	O
mu_url_t	pointer
url	pointer
,	O
const	O
char	O
*	O
challenge	pointer
,	O
char	O
*	O
*	O
pplain	pointer
,	O
mu_secret_t	pointer
*	O
psec	pointer
)	O
{	O
struct	O
file_ticket	struct
*	O
ft	pointer
=	O
mu_ticket_get_data	function
(	O
ticket	pointer
)	O
;	O
int	O
rc	int
=	O
0	int
;	O
if	O
(	O
!	O
ft	pointer
->	O
tickurl	pointer
)	O
{	O
rc	int
=	O
mu_wicket_file_match_url	function
(	O
ft	pointer
->	O
filename	pointer
,	O
url	pointer
,	O
MU_URL_PARSE_ALL	O
,	O
&	O
ft	pointer
->	O
tickurl	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
if	O
(	O
pplain	pointer
)	O
{	O
if	O
(	O
ft	pointer
->	O
user	pointer
)	O
{	O
*	O
pplain	pointer
=	O
strdup	function
(	O
ft	pointer
->	O
user	pointer
)	O
;	O
if	O
(	O
!	O
*	O
pplain	pointer
)	O
rc	int
=	O
ENOMEM	int
;	O
}	O
else	O
rc	int
=	O
mu_url_aget_user	function
(	O
ft	pointer
->	O
tickurl	pointer
,	O
pplain	pointer
)	O
;	O
}	O
else	O
rc	int
=	O
mu_url_get_secret	function
(	O
ft	pointer
->	O
tickurl	pointer
,	O
psec	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_file_wicket_get_ticket	function
(	O
mu_wicket_t	pointer
wicket	pointer
,	O
void	O
*	O
data	pointer
,	O
const	O
char	O
*	O
user	pointer
,	O
mu_ticket_t	pointer
*	O
pticket	pointer
)	O
{	O
int	O
rc	int
;	O
mu_ticket_t	pointer
ticket	pointer
;	O
struct	O
file_wicket	struct
*	O
fw	pointer
=	O
data	pointer
;	O
struct	O
file_ticket	struct
*	O
ft	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
ft	pointer
)	O
)	O
;	O
ft	pointer
->	O
filename	pointer
=	O
strdup	function
(	O
fw	pointer
->	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
ft	pointer
->	O
filename	pointer
)	O
{	O
free	function
(	O
ft	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
if	O
(	O
user	pointer
)	O
{	O
ft	pointer
->	O
user	pointer
=	O
strdup	function
(	O
user	pointer
)	O
;	O
if	O
(	O
!	O
ft	pointer
->	O
user	pointer
)	O
{	O
free	function
(	O
ft	pointer
->	O
filename	pointer
)	O
;	O
free	function
(	O
ft	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
else	O
ft	pointer
->	O
user	pointer
=	O
NULL	O
;	O
rc	int
=	O
mu_ticket_create	function
(	O
&	O
ticket	pointer
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
ft	pointer
->	O
filename	pointer
)	O
;	O
free	function
(	O
ft	pointer
->	O
user	pointer
)	O
;	O
free	function
(	O
ft	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mu_ticket_set_destroy	function
(	O
ticket	pointer
,	O
file_ticket_destroy	function
,	O
NULL	O
)	O
;	O
mu_ticket_set_data	function
(	O
ticket	pointer
,	O
ft	pointer
,	O
NULL	O
)	O
;	O
mu_ticket_set_get_cred	function
(	O
ticket	pointer
,	O
file_ticket_get_cred	function
,	O
NULL	O
)	O
;	O
*	O
pticket	pointer
=	O
ticket	pointer
;	O
return	O
0	int
;	O
}	O
int	O
mu_wicket_stream_match_url	function
(	O
mu_stream_t	pointer
stream	pointer
,	O
struct	O
mu_locus_point	struct
*	O
loc	pointer
,	O
mu_url_t	pointer
url	pointer
,	O
int	O
parse_flags	int
,	O
mu_url_t	pointer
*	O
pticket_url	pointer
)	O
{	O
int	O
rc	int
;	O
mu_url_t	pointer
u	pointer
=	O
NULL	O
;	O
char	O
*	O
buf	pointer
=	O
NULL	O
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
size_t	long
len	long
;	O
mu_url_t	pointer
pret	pointer
=	O
NULL	O
;	O
int	O
weight	int
=	O
0	int
;	O
int	O
line	int
=	O
loc	pointer
->	O
mu_line	int
;	O
while	O
(	O
(	O
rc	int
=	O
mu_stream_getline	function
(	O
stream	pointer
,	O
&	O
buf	pointer
,	O
&	O
bufsize	long
,	O
&	O
len	long
)	O
)	O
==	O
0	int
&&	O
len	long
>	O
0	int
)	O
{	O
char	O
*	O
p	pointer
;	O
int	O
err	int
;	O
int	O
n	int
;	O
loc	pointer
->	O
mu_line	int
++	O
;	O
p	pointer
=	O
mu_str_stripws	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
*	O
p	pointer
==	O
0	int
||	O
*	O
p	pointer
==	O
'#'	O
)	O
continue	O
;	O
if	O
(	O
(	O
err	int
=	O
mu_url_create_hint	function
(	O
&	O
u	pointer
,	O
p	pointer
,	O
parse_flags	int
,	O
NULL	O
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	function
(	O
_	O
(	O
"%s:%u: cannot create URL: %s"	pointer
)	O
,	O
loc	pointer
->	O
mu_file	pointer
,	O
loc	pointer
->	O
mu_line	int
,	O
mu_strerror	function
(	O
err	int
)	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
mu_url_has_flag	function
(	O
u	pointer
,	O
MU_URL_USER	int
|	O
MU_URL_SECRET	int
)	O
)	O
{	O
mu_error	function
(	O
_	O
(	O
"%s:%u: URL is missing required parts"	pointer
)	O
,	O
loc	pointer
->	O
mu_file	pointer
,	O
loc	pointer
->	O
mu_line	int
)	O
;	O
mu_url_destroy	function
(	O
&	O
u	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
mu_url_matches_ticket	function
(	O
u	pointer
,	O
url	pointer
,	O
&	O
n	int
)	O
)	O
{	O
mu_url_destroy	function
(	O
&	O
u	pointer
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
pret	pointer
||	O
n	int
<	O
weight	int
)	O
{	O
pret	pointer
=	O
u	pointer
;	O
weight	int
=	O
n	int
;	O
line	int
=	O
loc	pointer
->	O
mu_line	int
;	O
if	O
(	O
weight	int
==	O
0	int
)	O
break	O
;	O
}	O
}	O
free	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
pret	pointer
)	O
{	O
*	O
pticket_url	pointer
=	O
pret	pointer
;	O
loc	pointer
->	O
mu_line	int
=	O
line	int
;	O
}	O
else	O
rc	int
=	O
MU_ERR_NOENT	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_wicket_file_match_url	function
(	O
const	O
char	O
*	O
name	pointer
,	O
mu_url_t	pointer
url	pointer
,	O
int	O
parse_flags	int
,	O
mu_url_t	pointer
*	O
pticket_url	pointer
)	O
{	O
mu_stream_t	pointer
stream	pointer
;	O
int	O
rc	int
;	O
struct	O
mu_locus_point	struct
loc	pointer
;	O
rc	int
=	O
mu_file_stream_create	function
(	O
&	O
stream	pointer
,	O
name	pointer
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
loc	pointer
.	O
mu_file	pointer
=	O
(	O
char	O
*	O
)	O
name	pointer
;	O
loc	pointer
.	O
mu_line	int
=	O
0	int
;	O
loc	pointer
.	O
mu_col	int
=	O
0	int
;	O
rc	int
=	O
mu_wicket_stream_match_url	function
(	O
stream	pointer
,	O
&	O
loc	pointer
,	O
url	pointer
,	O
parse_flags	int
,	O
pticket_url	pointer
)	O
;	O
mu_stream_close	function
(	O
stream	pointer
)	O
;	O
mu_stream_destroy	function
(	O
&	O
stream	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_file_wicket_create	function
(	O
mu_wicket_t	pointer
*	O
pwicket	pointer
,	O
const	O
char	O
*	O
filename	pointer
)	O
{	O
mu_wicket_t	pointer
wicket	pointer
;	O
int	O
rc	int
;	O
struct	O
file_wicket	struct
*	O
fw	pointer
=	O
calloc	function
(	O
1	int
,	O
sizeof	O
(	O
*	O
fw	pointer
)	O
)	O
;	O
if	O
(	O
!	O
fw	pointer
)	O
return	O
ENOMEM	int
;	O
fw	pointer
->	O
filename	pointer
=	O
strdup	function
(	O
filename	pointer
)	O
;	O
if	O
(	O
!	O
fw	pointer
->	O
filename	pointer
)	O
{	O
free	function
(	O
fw	pointer
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
rc	int
=	O
mu_wicket_create	function
(	O
&	O
wicket	pointer
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	function
(	O
fw	pointer
->	O
filename	pointer
)	O
;	O
free	function
(	O
fw	pointer
)	O
;	O
return	O
rc	int
;	O
}	O
mu_wicket_set_data	function
(	O
wicket	pointer
,	O
fw	pointer
)	O
;	O
mu_wicket_set_destroy	function
(	O
wicket	pointer
,	O
_file_wicket_destroy	function
)	O
;	O
mu_wicket_set_get_ticket	function
(	O
wicket	pointer
,	O
_file_wicket_get_ticket	function
)	O
;	O
*	O
pwicket	pointer
=	O
wicket	pointer
;	O
return	O
0	int
;	O
}	O
