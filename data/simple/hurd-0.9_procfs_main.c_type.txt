int	O
opt_clk_tck	int
;	O
mode_t	O
opt_stat_mode	int
;	O
pid_t	O
opt_fake_self	int
;	O
pid_t	O
opt_kernel_pid	int
;	O
uid_t	O
opt_anon_owner	int
;	O
static	O
void	O
set_compatibility_options	function
(	O
void	O
)	O
{	O
opt_clk_tck	int
=	O
100	int
;	O
opt_stat_mode	int
=	O
0444	int
;	O
opt_fake_self	int
=	O
1	int
;	O
}	O
static	O
error_t	O
argp_parser	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	O
*	O
state	pointer
)	O
{	O
struct	O
passwd	O
*	O
pw	pointer
;	O
char	O
*	O
endp	pointer
;	O
long	O
int	O
v	long
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'h'	O
:	O
v	long
=	O
strtol	O
(	O
arg	pointer
,	O
&	O
endp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
endp	pointer
||	O
!	O
*	O
arg	pointer
||	O
v	long
<=	O
0	int
)	O
argp_error	function
(	O
state	pointer
,	O
"--clk-tck: HZ should be a positive integer"	pointer
)	O
;	O
else	O
opt_clk_tck	int
=	O
v	long
;	O
break	O
;	O
case	O
's'	O
:	O
v	long
=	O
strtol	O
(	O
arg	pointer
,	O
&	O
endp	pointer
,	O
8	int
)	O
;	O
if	O
(	O
*	O
endp	pointer
||	O
!	O
*	O
arg	pointer
||	O
(	O
mode_t	O
)	O
v	long
&	O
~	O
07777	int
)	O
argp_error	function
(	O
state	pointer
,	O
"--stat-mode: MODE should be an octal mode"	pointer
)	O
;	O
else	O
opt_stat_mode	int
=	O
v	long
;	O
break	O
;	O
case	O
'S'	O
:	O
if	O
(	O
arg	pointer
)	O
{	O
v	long
=	O
strtol	O
(	O
arg	pointer
,	O
&	O
endp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
endp	pointer
||	O
!	O
*	O
arg	pointer
)	O
argp_error	function
(	O
state	pointer
,	O
"--fake-self: PID must be an integer"	pointer
)	O
;	O
else	O
opt_fake_self	int
=	O
v	long
;	O
}	O
else	O
opt_fake_self	int
=	O
1	int
;	O
break	O
;	O
case	O
'k'	O
:	O
v	long
=	O
strtol	O
(	O
arg	pointer
,	O
&	O
endp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
endp	pointer
||	O
!	O
*	O
arg	pointer
||	O
(	O
signed	O
)	O
opt_kernel_pid	int
<	O
0	int
)	O
argp_error	function
(	O
state	pointer
,	O
"--kernel-process: PID must be a positive integer"	pointer
)	O
;	O
else	O
opt_kernel_pid	int
=	O
v	long
;	O
break	O
;	O
case	O
'c'	O
:	O
set_compatibility_options	function
(	O
)	O
;	O
break	O
;	O
case	O
'a'	O
:	O
pw	pointer
=	O
getpwnam	function
(	O
arg	pointer
)	O
;	O
if	O
(	O
pw	pointer
)	O
{	O
opt_anon_owner	int
=	O
pw	pointer
->	O
pw_uid	O
;	O
break	O
;	O
}	O
v	long
=	O
strtol	O
(	O
arg	pointer
,	O
&	O
endp	pointer
,	O
0	int
)	O
;	O
if	O
(	O
*	O
endp	pointer
||	O
!	O
*	O
arg	pointer
||	O
v	long
<	O
0	int
)	O
argp_error	function
(	O
state	pointer
,	O
"--anonymous-owner: USER should be "	pointer
"a user name or a numeric UID."	pointer
)	O
;	O
else	O
opt_anon_owner	int
=	O
v	long
;	O
break	O
;	O
case	O
NODEV_KEY	O
:	O
break	O
;	O
case	O
NOEXEC_KEY	O
:	O
break	O
;	O
case	O
NOSUID_KEY	O
:	O
break	O
;	O
case	O
ARGP_KEY_ARG	O
:	O
if	O
(	O
!	O
strcmp	O
(	O
arg	pointer
,	O
"none"	pointer
)	O
||	O
!	O
strcmp	O
(	O
arg	pointer
,	O
"proc"	pointer
)	O
)	O
break	O
;	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
argp_option	O
common_options	int
[	O
]	O
=	O
{	O
{	O
"clk-tck"	pointer
,	O
'h'	O
,	O
"HZ"	pointer
,	O
0	int
,	O
"Unit used for the values expressed in system clock ticks "	pointer
"(default: "	pointer
STR	O
(	O
OPT_CLK_TCK	O
)	O
")"	pointer
}	O
,	O
{	O
"stat-mode"	pointer
,	O
's'	O
,	O
"MODE"	pointer
,	O
0	int
,	O
"The [pid]/stat file publishes information which on Hurd is only "	pointer
"available to the process owner.  "	pointer
"You can use this option to override its mode to be more permissive "	pointer
"for compatibility purposes.  "	pointer
"(default: "	pointer
STR	O
(	O
OPT_STAT_MODE	int
)	O
")"	pointer
}	O
,	O
{	O
"fake-self"	pointer
,	O
'S'	O
,	O
"PID"	pointer
,	O
OPTION_ARG_OPTIONAL	O
,	O
"Provide a fake \"self\" symlink to the given PID, for compatibility "	pointer
"purposes.  If PID is omitted, \"self\" will point to init.  "	pointer
"(default: no self link)"	pointer
}	O
,	O
{	O
"kernel-process"	pointer
,	O
'k'	O
,	O
"PID"	pointer
,	O
0	int
,	O
"Process identifier for the kernel, used to retrieve its command "	pointer
"line, as well as the global up and idle times. "	pointer
"(default: "	pointer
STR	O
(	O
OPT_KERNEL_PID	O
)	O
")"	pointer
}	O
,	O
{	O
"compatible"	pointer
,	O
'c'	O
,	O
NULL	O
,	O
0	int
,	O
"Try to be compatible with the Linux procps utilities.  "	pointer
"Currently equivalent to -h 100 -s 0444 -S 1."	pointer
}	O
,	O
{	O
"anonymous-owner"	pointer
,	O
'a'	O
,	O
"USER"	pointer
,	O
0	int
,	O
"Make USER the owner of files related to processes without one.  "	pointer
"Be aware that USER will be granted access to the environment and "	pointer
"other sensitive information about the processes in question.  "	pointer
"(default: use uid "	pointer
STR	O
(	O
OPT_ANON_OWNER	int
)	O
")"	pointer
}	O
,	O
{	O
"nodev"	pointer
,	O
NODEV_KEY	O
,	O
NULL	O
,	O
0	int
,	O
"Ignored for compatibility with Linux' procfs."	pointer
}	O
,	O
{	O
"noexec"	pointer
,	O
NOEXEC_KEY	O
,	O
NULL	O
,	O
0	int
,	O
"Ignored for compatibility with Linux' procfs."	pointer
}	O
,	O
{	O
"nosuid"	pointer
,	O
NOSUID_KEY	O
,	O
NULL	O
,	O
0	int
,	O
"Ignored for compatibility with Linux' procfs."	pointer
}	O
,	O
{	O
}	O
}	O
;	O
struct	O
argp	struct
argp	struct
=	O
{	O
.	O
options	O
=	O
common_options	int
,	O
.	O
parser	O
=	O
argp_parser	function
,	O
.	O
doc	O
=	O
"A virtual filesystem emulating the Linux procfs."	pointer
,	O
.	O
children	O
=	O
(	O
struct	O
argp_child	O
[	O
]	O
)	O
{	O
{	O
&	O
netfs_std_startup_argp	O
,	O
}	O
,	O
{	O
}	O
}	O
,	O
}	O
;	O
static	O
error_t	O
runtime_argp_parser	function
(	O
int	O
key	int
,	O
char	O
*	O
arg	pointer
,	O
struct	O
argp_state	O
*	O
state	pointer
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'u'	O
:	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
argp	struct
runtime_argp	struct
=	O
{	O
.	O
options	O
=	O
(	O
struct	O
argp_option	O
[	O
]	O
)	O
{	O
{	O
"update"	pointer
,	O
'u'	O
,	O
NULL	O
,	O
0	int
,	O
"remount; for procfs this does nothing"	pointer
}	O
,	O
{	O
}	O
,	O
}	O
,	O
.	O
parser	O
=	O
runtime_argp_parser	function
,	O
}	O
;	O
struct	O
argp	struct
netfs_runtime_argp_	struct
=	O
{	O
.	O
options	O
=	O
common_options	int
,	O
.	O
parser	O
=	O
argp_parser	function
,	O
.	O
doc	O
=	O
"A virtual filesystem emulating the Linux procfs."	pointer
,	O
.	O
children	O
=	O
(	O
struct	O
argp_child	O
[	O
]	O
)	O
{	O
{	O
&	O
runtime_argp	struct
,	O
}	O
,	O
{	O
&	O
netfs_std_runtime_argp	O
,	O
}	O
,	O
{	O
}	O
}	O
,	O
}	O
;	O
struct	O
argp	struct
*	O
netfs_runtime_argp	pointer
=	O
&	O
netfs_runtime_argp_	struct
;	O
error_t	O
netfs_append_args	function
(	O
char	O
*	O
*	O
argz	pointer
,	O
size_t	O
*	O
argz_len	pointer
)	O
{	O
char	O
buf	array
[	O
80	int
]	O
;	O
error_t	O
err	O
=	O
0	int
;	O
FOPT	O
(	O
opt_clk_tck	int
,	O
OPT_CLK_TCK	O
,	O
"--clk-tck=%d"	pointer
,	O
opt_clk_tck	int
)	O
;	O
FOPT	O
(	O
opt_stat_mode	int
,	O
OPT_STAT_MODE	int
,	O
"--stat-mode=%o"	pointer
,	O
opt_stat_mode	int
)	O
;	O
FOPT	O
(	O
opt_fake_self	int
,	O
OPT_FAKE_SELF	O
,	O
"--fake-self=%d"	pointer
,	O
opt_fake_self	int
)	O
;	O
FOPT	O
(	O
opt_anon_owner	int
,	O
OPT_ANON_OWNER	int
,	O
"--anonymous-owner=%d"	pointer
,	O
opt_anon_owner	int
)	O
;	O
FOPT	O
(	O
opt_kernel_pid	int
,	O
OPT_KERNEL_PID	O
,	O
"--kernel-process=%d"	pointer
,	O
opt_kernel_pid	int
)	O
;	O
if	O
(	O
!	O
err	O
)	O
err	O
=	O
netfs_append_std_options	function
(	O
argz	pointer
,	O
argz_len	pointer
)	O
;	O
return	O
err	O
;	O
}	O
error_t	O
netfs_get_source	function
(	O
struct	O
protid	O
*	O
cred	pointer
,	O
char	O
*	O
source	pointer
,	O
size_t	O
source_len	int
)	O
{	O
if	O
(	O
!	O
cred	pointer
)	O
return	O
EOPNOTSUPP	O
;	O
snprintf	O
(	O
source	pointer
,	O
source_len	int
,	O
"proc"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
root_make_node	function
(	O
struct	O
ps_context	O
*	O
pc	pointer
,	O
struct	O
node	O
*	O
*	O
np	pointer
)	O
{	O
struct	O
node	O
*	O
root_dirs	array
[	O
]	O
=	O
{	O
proclist_make_node	function
(	O
pc	pointer
)	O
,	O
rootdir_make_node	function
(	O
pc	pointer
)	O
,	O
}	O
;	O
*	O
np	pointer
=	O
dircat_make_node	function
(	O
root_dirs	array
,	O
sizeof	O
root_dirs	array
/	O
sizeof	O
root_dirs	array
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
*	O
np	pointer
)	O
return	O
ENOMEM	O
;	O
(	O
*	O
np	pointer
)	O
->	O
nn_stat	O
.	O
st_ino	O
=	O
*	O
(	O
uint32_t	O
*	O
)	O
"PROC"	pointer
;	O
return	O
0	int
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
struct	O
ps_context	O
*	O
pc	pointer
;	O
mach_port_t	O
bootstrap	O
;	O
error_t	O
err	O
;	O
opt_clk_tck	int
=	O
OPT_CLK_TCK	O
;	O
opt_stat_mode	int
=	O
OPT_STAT_MODE	int
;	O
opt_fake_self	int
=	O
OPT_FAKE_SELF	O
;	O
opt_kernel_pid	int
=	O
OPT_KERNEL_PID	O
;	O
opt_anon_owner	int
=	O
OPT_ANON_OWNER	int
;	O
err	O
=	O
argp_parse	function
(	O
&	O
argp	struct
,	O
argc	int
,	O
argv	pointer
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
err	O
)	O
error	function
(	O
1	int
,	O
err	O
,	O
"Could not parse command line"	pointer
)	O
;	O
err	O
=	O
ps_context_create	function
(	O
getproc	function
(	O
)	O
,	O
&	O
pc	pointer
)	O
;	O
if	O
(	O
err	O
)	O
error	function
(	O
1	int
,	O
err	O
,	O
"Could not create libps context"	pointer
)	O
;	O
task_get_bootstrap_port	function
(	O
mach_task_self	function
(	O
)	O
,	O
&	O
bootstrap	O
)	O
;	O
if	O
(	O
bootstrap	O
==	O
MACH_PORT_NULL	O
)	O
error	function
(	O
1	int
,	O
0	int
,	O
"Must be started as a translator"	pointer
)	O
;	O
netfs_init	function
(	O
)	O
;	O
err	O
=	O
root_make_node	function
(	O
pc	pointer
,	O
&	O
netfs_root_node	O
)	O
;	O
if	O
(	O
err	O
)	O
error	function
(	O
1	int
,	O
err	O
,	O
"Could not create the root node"	pointer
)	O
;	O
netfs_startup	function
(	O
bootstrap	O
,	O
0	int
)	O
;	O
netfs_server_loop	function
(	O
)	O
;	O
assert	function
(	O
0	int
)	O
;	O
}	O
