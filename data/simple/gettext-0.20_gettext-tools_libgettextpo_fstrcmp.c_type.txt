static	O
gl_tls_key_t	O
buffer_key	O
;	O
static	O
gl_tls_key_t	O
bufmax_key	int
;	O
static	O
void	O
keys_init	function
(	O
void	O
)	O
{	O
gl_tls_key_init	function
(	O
buffer_key	O
,	O
free	function
)	O
;	O
gl_tls_key_init	function
(	O
bufmax_key	int
,	O
NULL	O
)	O
;	O
}	O
gl_once_define	function
(	O
static	O
,	O
keys_init_once	int
)	O
double	O
fstrcmp_bounded	O
(	O
const	O
char	O
*	O
string1	pointer
,	O
const	O
char	O
*	O
string2	pointer
,	O
double	O
lower_bound	double
)	O
{	O
struct	O
context	O
ctxt	struct
;	O
size_t	O
xvec_length	O
=	O
strlen	O
(	O
string1	pointer
)	O
;	O
size_t	O
yvec_length	O
=	O
strlen	O
(	O
string2	pointer
)	O
;	O
size_t	O
length_sum	O
=	O
xvec_length	O
+	O
yvec_length	O
;	O
ptrdiff_t	O
i	O
;	O
ptrdiff_t	O
fdiag_len	O
;	O
ptrdiff_t	O
*	O
buffer	O
;	O
uintptr_t	O
bufmax	O
;	O
if	O
(	O
xvec_length	O
==	O
0	int
||	O
yvec_length	O
==	O
0	int
)	O
return	O
length_sum	O
==	O
0	int
;	O
if	O
(	O
!	O
(	O
xvec_length	O
<=	O
length_sum	O
&&	O
length_sum	O
<=	O
MIN	function
(	O
UINTPTR_MAX	O
,	O
PTRDIFF_MAX	O
)	O
-	O
3	int
)	O
)	O
xalloc_die	O
(	O
)	O
;	O
if	O
(	O
lower_bound	double
>	O
0	int
)	O
{	O
ptrdiff_t	O
length_min	O
=	O
MIN	function
(	O
xvec_length	O
,	O
yvec_length	O
)	O
;	O
volatile	O
double	O
upper_bound	double
=	O
2.0	int
*	O
length_min	O
/	O
length_sum	O
;	O
if	O
(	O
upper_bound	double
<	O
lower_bound	double
)	O
return	O
0.0	int
;	O
if	O
(	O
length_sum	O
>=	O
20	int
)	O
{	O
ptrdiff_t	O
occ_diff	O
[	O
UCHAR_MAX	O
+	O
1	int
]	O
;	O
ptrdiff_t	O
sum	O
;	O
double	O
dsum	double
;	O
memset	O
(	O
occ_diff	O
,	O
0	int
,	O
sizeof	O
(	O
occ_diff	O
)	O
)	O
;	O
for	O
(	O
i	O
=	O
xvec_length	O
-	O
1	int
;	O
i	O
>=	O
0	int
;	O
i	O
--	O
)	O
occ_diff	O
[	O
(	O
unsigned	O
char	O
)	O
string1	pointer
[	O
i	O
]	O
]	O
++	O
;	O
for	O
(	O
i	O
=	O
yvec_length	O
-	O
1	int
;	O
i	O
>=	O
0	int
;	O
i	O
--	O
)	O
occ_diff	O
[	O
(	O
unsigned	O
char	O
)	O
string2	pointer
[	O
i	O
]	O
]	O
--	O
;	O
sum	O
=	O
0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<=	O
UCHAR_MAX	O
;	O
i	O
++	O
)	O
{	O
ptrdiff_t	O
d	O
=	O
occ_diff	O
[	O
i	O
]	O
;	O
sum	O
+=	O
(	O
d	O
>=	O
0	int
?	O
d	O
:	O
-	O
d	O
)	O
;	O
}	O
dsum	double
=	O
sum	O
;	O
upper_bound	double
=	O
1.0	int
-	O
dsum	double
/	O
length_sum	O
;	O
if	O
(	O
upper_bound	double
<	O
lower_bound	double
)	O
return	O
0.0	int
;	O
}	O
}	O
ctxt	struct
.	O
xvec	O
=	O
string1	pointer
;	O
ctxt	struct
.	O
yvec	O
=	O
string2	pointer
;	O
ctxt	struct
.	O
too_expensive	O
=	O
1	int
;	O
for	O
(	O
i	O
=	O
xvec_length	O
+	O
yvec_length	O
;	O
i	O
!=	O
0	int
;	O
i	O
>>=	O
2	int
)	O
ctxt	struct
.	O
too_expensive	O
<<=	O
1	int
;	O
if	O
(	O
ctxt	struct
.	O
too_expensive	O
<	O
4096	int
)	O
ctxt	struct
.	O
too_expensive	O
=	O
4096	int
;	O
fdiag_len	O
=	O
length_sum	O
+	O
3	int
;	O
gl_once	function
(	O
keys_init_once	int
,	O
keys_init	function
)	O
;	O
buffer	O
=	O
gl_tls_get	function
(	O
buffer_key	O
)	O
;	O
bufmax	O
=	O
(	O
uintptr_t	O
)	O
gl_tls_get	function
(	O
bufmax_key	int
)	O
;	O
if	O
(	O
fdiag_len	O
>	O
bufmax	O
)	O
{	O
bufmax	O
=	O
2	int
*	O
bufmax	O
;	O
if	O
(	O
fdiag_len	O
>	O
bufmax	O
)	O
bufmax	O
=	O
fdiag_len	O
;	O
free	function
(	O
buffer	O
)	O
;	O
buffer	O
=	O
xnmalloc	O
(	O
bufmax	O
,	O
2	int
*	O
sizeof	O
*	O
buffer	O
)	O
;	O
gl_tls_set	function
(	O
buffer_key	O
,	O
buffer	O
)	O
;	O
gl_tls_set	function
(	O
bufmax_key	int
,	O
(	O
void	O
*	O
)	O
(	O
uintptr_t	O
)	O
bufmax	O
)	O
;	O
}	O
ctxt	struct
.	O
fdiag	O
=	O
buffer	O
+	O
yvec_length	O
+	O
1	int
;	O
ctxt	struct
.	O
bdiag	O
=	O
ctxt	struct
.	O
fdiag	O
+	O
fdiag_len	O
;	O
ctxt	struct
.	O
edit_count_limit	O
=	O
(	O
lower_bound	double
<	O
1.0	int
?	O
(	O
ptrdiff_t	O
)	O
(	O
length_sum	O
*	O
(	O
1.0	int
-	O
lower_bound	double
+	O
0.000001	int
)	O
)	O
:	O
0	int
)	O
;	O
ctxt	struct
.	O
edit_count	O
=	O
-	O
ctxt	struct
.	O
edit_count_limit	O
;	O
if	O
(	O
compareseq	function
(	O
0	int
,	O
xvec_length	O
,	O
0	int
,	O
yvec_length	O
,	O
0	int
,	O
&	O
ctxt	struct
)	O
)	O
return	O
0.0	int
;	O
ctxt	struct
.	O
edit_count	O
+=	O
ctxt	struct
.	O
edit_count_limit	O
;	O
return	O
(	O
(	O
double	O
)	O
(	O
xvec_length	O
+	O
yvec_length	O
-	O
ctxt	struct
.	O
edit_count	O
)	O
/	O
(	O
xvec_length	O
+	O
yvec_length	O
)	O
)	O
;	O
}	O
