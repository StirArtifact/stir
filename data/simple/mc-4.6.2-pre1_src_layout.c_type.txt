int	O
nice_rotating_dash	int
=	O
1	int
;	O
int	O
horizontal_split	int
=	O
0	int
;	O
int	O
winch_flag	int
=	O
0	int
;	O
int	O
equal_split	int
=	O
1	int
;	O
int	O
first_panel_size	int
=	O
0	int
;	O
int	O
output_lines	int
=	O
0	int
;	O
int	O
command_prompt	int
=	O
1	int
;	O
int	O
keybar_visible	int
=	O
1	int
;	O
int	O
message_visible	int
=	O
1	int
;	O
int	O
xterm_title	int
=	O
1	int
;	O
int	O
output_start_y	int
=	O
0	int
;	O
static	O
struct	O
{	O
int	O
type	enum
;	O
Widget	struct
*	O
widget	pointer
;	O
}	O
panels	array
[	O
MAX_VIEWS	int
]	O
;	O
static	O
int	O
old_first_panel_size	int
;	O
static	O
int	O
old_horizontal_split	int
;	O
static	O
int	O
old_output_lines	int
;	O
static	O
int	O
_horizontal_split	int
;	O
static	O
int	O
_equal_split	int
;	O
static	O
int	O
_first_panel_size	int
;	O
static	O
int	O
_menubar_visible	int
;	O
static	O
int	O
_output_lines	int
;	O
static	O
int	O
_command_prompt	int
;	O
static	O
int	O
_keybar_visible	int
;	O
static	O
int	O
_message_visible	int
;	O
static	O
int	O
_xterm_title	int
;	O
static	O
int	O
_permission_mode	int
;	O
static	O
int	O
_filetype_mode	int
;	O
static	O
int	O
height	int
;	O
static	O
Dlg_head	struct
*	O
layout_dlg	pointer
;	O
static	O
const	O
char	O
*	O
s_split_direction	array
[	O
2	int
]	O
=	O
{	O
N_	O
(	O
"&Vertical"	pointer
)	O
,	O
N_	O
(	O
"&Horizontal"	pointer
)	O
}	O
;	O
static	O
WRadio	struct
*	O
radio_widget	pointer
;	O
static	O
struct	O
{	O
const	O
char	O
*	O
text	pointer
;	O
int	O
*	O
variable	pointer
;	O
WCheck	struct
*	O
widget	pointer
;	O
}	O
check_options	array
[	O
]	O
=	O
{	O
{	O
N_	O
(	O
"&Xterm window title"	pointer
)	O
,	O
&	O
xterm_title	int
,	O
0	int
}	O
,	O
{	O
N_	O
(	O
"h&Intbar visible"	pointer
)	O
,	O
&	O
message_visible	int
,	O
0	int
}	O
,	O
{	O
N_	O
(	O
"&Keybar visible"	pointer
)	O
,	O
&	O
keybar_visible	int
,	O
0	int
}	O
,	O
{	O
N_	O
(	O
"command &Prompt"	pointer
)	O
,	O
&	O
command_prompt	int
,	O
0	int
}	O
,	O
{	O
N_	O
(	O
"show &Mini status"	pointer
)	O
,	O
&	O
show_mini_info	int
,	O
0	int
}	O
,	O
{	O
N_	O
(	O
"menu&Bar visible"	pointer
)	O
,	O
&	O
menubar_visible	int
,	O
0	int
}	O
,	O
{	O
N_	O
(	O
"&Equal split"	pointer
)	O
,	O
&	O
equal_split	int
,	O
0	int
}	O
,	O
{	O
N_	O
(	O
"pe&Rmissions"	pointer
)	O
,	O
&	O
permission_mode	int
,	O
0	int
}	O
,	O
{	O
N_	O
(	O
"&File types"	pointer
)	O
,	O
&	O
filetype_mode	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
int	O
first_width	int
,	O
second_width	int
;	O
static	O
const	O
char	O
*	O
output_lines_label	pointer
;	O
static	O
WButton	struct
*	O
bleft_widget	pointer
,	O
*	O
bright_widget	pointer
;	O
static	O
void	O
low_level_change_screen_size	function
(	O
void	O
)	O
;	O
static	O
void	O
_check_split	function
(	O
void	O
)	O
{	O
if	O
(	O
_horizontal_split	int
)	O
{	O
if	O
(	O
_equal_split	int
)	O
_first_panel_size	int
=	O
height	int
/	O
2	int
;	O
else	O
if	O
(	O
_first_panel_size	int
<	O
MINHEIGHT	int
)	O
_first_panel_size	int
=	O
MINHEIGHT	int
;	O
else	O
if	O
(	O
_first_panel_size	int
>	O
height	int
-	O
MINHEIGHT	int
)	O
_first_panel_size	int
=	O
height	int
-	O
MINHEIGHT	int
;	O
}	O
else	O
{	O
if	O
(	O
_equal_split	int
)	O
_first_panel_size	int
=	O
COLS	O
/	O
2	int
;	O
else	O
if	O
(	O
_first_panel_size	int
<	O
MINWIDTH	int
)	O
_first_panel_size	int
=	O
MINWIDTH	int
;	O
else	O
if	O
(	O
_first_panel_size	int
>	O
COLS	O
-	O
MINWIDTH	int
)	O
_first_panel_size	int
=	O
COLS	O
-	O
MINWIDTH	int
;	O
}	O
}	O
static	O
void	O
update_split	function
(	O
void	O
)	O
{	O
_check_split	function
(	O
)	O
;	O
if	O
(	O
(	O
old_first_panel_size	int
==	O
_first_panel_size	int
)	O
&&	O
(	O
old_horizontal_split	int
==	O
_horizontal_split	int
)	O
)	O
{	O
return	O
;	O
}	O
old_first_panel_size	int
=	O
_first_panel_size	int
;	O
old_horizontal_split	int
=	O
_horizontal_split	int
;	O
attrset	function
(	O
COLOR_NORMAL	O
)	O
;	O
dlg_move	O
(	O
layout_dlg	pointer
,	O
6	int
,	O
6	int
)	O
;	O
tty_printf	function
(	O
"%03d"	pointer
,	O
_first_panel_size	int
)	O
;	O
dlg_move	O
(	O
layout_dlg	pointer
,	O
6	int
,	O
18	int
)	O
;	O
if	O
(	O
_horizontal_split	int
)	O
tty_printf	function
(	O
"%03d"	pointer
,	O
height	int
-	O
_first_panel_size	int
)	O
;	O
else	O
tty_printf	function
(	O
"%03d"	pointer
,	O
COLS	O
-	O
_first_panel_size	int
)	O
;	O
}	O
static	O
int	O
b2left_cback	function
(	O
int	O
action	int
)	O
{	O
(	O
void	O
)	O
action	int
;	O
if	O
(	O
_equal_split	int
)	O
{	O
_equal_split	int
=	O
0	int
;	O
check_options	array
[	O
6	int
]	O
.	O
widget	pointer
->	O
state	pointer
=	O
check_options	array
[	O
6	int
]	O
.	O
widget	pointer
->	O
state	pointer
&	O
~	O
C_BOOL	int
;	O
dlg_select_widget	function
(	O
check_options	array
[	O
6	int
]	O
.	O
widget	pointer
)	O
;	O
dlg_select_widget	function
(	O
bleft_widget	pointer
)	O
;	O
}	O
_first_panel_size	int
++	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
b2right_cback	function
(	O
int	O
action	int
)	O
{	O
(	O
void	O
)	O
action	int
;	O
if	O
(	O
_equal_split	int
)	O
{	O
_equal_split	int
=	O
0	int
;	O
check_options	array
[	O
6	int
]	O
.	O
widget	pointer
->	O
state	pointer
=	O
check_options	array
[	O
6	int
]	O
.	O
widget	pointer
->	O
state	pointer
&	O
~	O
C_BOOL	int
;	O
dlg_select_widget	function
(	O
check_options	array
[	O
6	int
]	O
.	O
widget	pointer
)	O
;	O
dlg_select_widget	function
(	O
bright_widget	pointer
)	O
;	O
}	O
_first_panel_size	int
--	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
bplus_cback	function
(	O
int	O
action	int
)	O
{	O
(	O
void	O
)	O
action	int
;	O
if	O
(	O
_output_lines	int
<	O
99	int
)	O
_output_lines	int
++	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
bminus_cback	function
(	O
int	O
action	int
)	O
{	O
(	O
void	O
)	O
action	int
;	O
if	O
(	O
_output_lines	int
>	O
0	int
)	O
_output_lines	int
--	O
;	O
return	O
0	int
;	O
}	O
static	O
cb_ret_t	enum
layout_callback	function
(	O
struct	O
Dlg_head	struct
*	O
h	pointer
,	O
dlg_msg_t	enum
msg	pointer
,	O
int	O
parm	int
)	O
{	O
switch	O
(	O
msg	pointer
)	O
{	O
case	O
DLG_DRAW	int
:	O
common_dialog_repaint	function
(	O
h	pointer
)	O
;	O
old_first_panel_size	int
=	O
-	O
1	int
;	O
old_horizontal_split	int
=	O
-	O
1	int
;	O
old_output_lines	int
=	O
-	O
1	int
;	O
attrset	function
(	O
COLOR_HOT_NORMAL	O
)	O
;	O
update_split	function
(	O
)	O
;	O
dlg_move	O
(	O
h	pointer
,	O
6	int
,	O
13	int
)	O
;	O
addch	O
(	O
'='	O
)	O
;	O
if	O
(	O
console_flag	char
)	O
{	O
if	O
(	O
old_output_lines	int
!=	O
_output_lines	int
)	O
{	O
old_output_lines	int
=	O
_output_lines	int
;	O
attrset	function
(	O
COLOR_NORMAL	O
)	O
;	O
dlg_move	O
(	O
h	pointer
,	O
9	int
,	O
16	int
+	O
first_width	int
)	O
;	O
addstr	O
(	O
output_lines_label	pointer
)	O
;	O
dlg_move	O
(	O
h	pointer
,	O
9	int
,	O
10	int
+	O
first_width	int
)	O
;	O
tty_printf	function
(	O
"%02d"	pointer
,	O
_output_lines	int
)	O
;	O
}	O
}	O
return	O
MSG_HANDLED	int
;	O
case	O
DLG_POST_KEY	int
:	O
_filetype_mode	int
=	O
check_options	array
[	O
8	int
]	O
.	O
widget	pointer
->	O
state	pointer
&	O
C_BOOL	int
;	O
_permission_mode	int
=	O
check_options	array
[	O
7	int
]	O
.	O
widget	pointer
->	O
state	pointer
&	O
C_BOOL	int
;	O
_equal_split	int
=	O
check_options	array
[	O
6	int
]	O
.	O
widget	pointer
->	O
state	pointer
&	O
C_BOOL	int
;	O
_menubar_visible	int
=	O
check_options	array
[	O
5	int
]	O
.	O
widget	pointer
->	O
state	pointer
&	O
C_BOOL	int
;	O
_command_prompt	int
=	O
check_options	array
[	O
4	int
]	O
.	O
widget	pointer
->	O
state	pointer
&	O
C_BOOL	int
;	O
_keybar_visible	int
=	O
check_options	array
[	O
2	int
]	O
.	O
widget	pointer
->	O
state	pointer
&	O
C_BOOL	int
;	O
_message_visible	int
=	O
check_options	array
[	O
1	int
]	O
.	O
widget	pointer
->	O
state	pointer
&	O
C_BOOL	int
;	O
_xterm_title	int
=	O
check_options	array
[	O
0	int
]	O
.	O
widget	pointer
->	O
state	pointer
&	O
C_BOOL	int
;	O
if	O
(	O
console_flag	char
)	O
{	O
int	O
minimum	int
;	O
if	O
(	O
_output_lines	int
<	O
0	int
)	O
_output_lines	int
=	O
0	int
;	O
height	int
=	O
LINES	O
-	O
_keybar_visible	int
-	O
_command_prompt	int
-	O
_menubar_visible	int
-	O
_output_lines	int
-	O
_message_visible	int
;	O
minimum	int
=	O
MINHEIGHT	int
*	O
(	O
1	int
+	O
_horizontal_split	int
)	O
;	O
if	O
(	O
height	int
<	O
minimum	int
)	O
{	O
_output_lines	int
-=	O
minimum	int
-	O
height	int
;	O
height	int
=	O
minimum	int
;	O
}	O
}	O
else	O
{	O
height	int
=	O
LINES	O
-	O
_keybar_visible	int
-	O
_command_prompt	int
-	O
_menubar_visible	int
-	O
_output_lines	int
-	O
_message_visible	int
;	O
}	O
if	O
(	O
_horizontal_split	int
!=	O
radio_widget	pointer
->	O
sel	int
)	O
{	O
_horizontal_split	int
=	O
radio_widget	pointer
->	O
sel	int
;	O
if	O
(	O
_horizontal_split	int
)	O
_first_panel_size	int
=	O
height	int
/	O
2	int
;	O
else	O
_first_panel_size	int
=	O
COLS	O
/	O
2	int
;	O
}	O
update_split	function
(	O
)	O
;	O
if	O
(	O
console_flag	char
)	O
{	O
if	O
(	O
old_output_lines	int
!=	O
_output_lines	int
)	O
{	O
old_output_lines	int
=	O
_output_lines	int
;	O
attrset	function
(	O
COLOR_NORMAL	O
)	O
;	O
dlg_move	O
(	O
h	pointer
,	O
9	int
,	O
10	int
+	O
first_width	int
)	O
;	O
tty_printf	function
(	O
"%02d"	pointer
,	O
_output_lines	int
)	O
;	O
}	O
}	O
return	O
MSG_HANDLED	int
;	O
default	O
:	O
return	O
default_dlg_callback	function
(	O
h	pointer
,	O
msg	pointer
,	O
parm	int
)	O
;	O
}	O
}	O
static	O
void	O
init_layout	function
(	O
void	O
)	O
{	O
static	O
int	O
i18n_layt_flag	int
=	O
0	int
;	O
static	O
int	O
b1	int
,	O
b2	int
,	O
b3	int
;	O
int	O
i	array
=	O
sizeof	O
(	O
s_split_direction	array
)	O
/	O
sizeof	O
(	O
char	O
*	O
)	O
;	O
const	O
char	O
*	O
ok_button	pointer
=	O
_	O
(	O
"&OK"	pointer
)	O
;	O
const	O
char	O
*	O
cancel_button	pointer
=	O
_	O
(	O
"&Cancel"	pointer
)	O
;	O
const	O
char	O
*	O
save_button	pointer
=	O
_	O
(	O
"&Save"	pointer
)	O
;	O
static	O
const	O
char	O
*	O
title1	pointer
,	O
*	O
title2	pointer
,	O
*	O
title3	pointer
;	O
if	O
(	O
!	O
i18n_layt_flag	int
)	O
{	O
register	O
int	O
l1	int
;	O
first_width	int
=	O
19	int
;	O
title1	pointer
=	O
_	O
(	O
" Panel split "	pointer
)	O
;	O
title2	pointer
=	O
_	O
(	O
" Highlight... "	pointer
)	O
;	O
title3	pointer
=	O
_	O
(	O
" Other options "	pointer
)	O
;	O
output_lines_label	pointer
=	O
_	O
(	O
"output lines"	pointer
)	O
;	O
while	O
(	O
i	array
--	O
)	O
{	O
s_split_direction	array
[	O
i	array
]	O
=	O
_	O
(	O
s_split_direction	array
[	O
i	array
]	O
)	O
;	O
l1	int
=	O
strlen	function
(	O
s_split_direction	array
[	O
i	array
]	O
)	O
+	O
7	int
;	O
if	O
(	O
l1	int
>	O
first_width	int
)	O
first_width	int
=	O
l1	int
;	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<=	O
8	int
;	O
i	array
++	O
)	O
{	O
check_options	array
[	O
i	array
]	O
.	O
text	pointer
=	O
_	O
(	O
check_options	array
[	O
i	array
]	O
.	O
text	pointer
)	O
;	O
l1	int
=	O
strlen	function
(	O
check_options	array
[	O
i	array
]	O
.	O
text	pointer
)	O
+	O
7	int
;	O
if	O
(	O
l1	int
>	O
first_width	int
)	O
first_width	int
=	O
l1	int
;	O
}	O
l1	int
=	O
strlen	function
(	O
title1	pointer
)	O
+	O
1	int
;	O
if	O
(	O
l1	int
>	O
first_width	int
)	O
first_width	int
=	O
l1	int
;	O
l1	int
=	O
strlen	function
(	O
title2	pointer
)	O
+	O
1	int
;	O
if	O
(	O
l1	int
>	O
first_width	int
)	O
first_width	int
=	O
l1	int
;	O
second_width	int
=	O
strlen	function
(	O
title3	pointer
)	O
+	O
1	int
;	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
6	int
;	O
i	array
++	O
)	O
{	O
check_options	array
[	O
i	array
]	O
.	O
text	pointer
=	O
_	O
(	O
check_options	array
[	O
i	array
]	O
.	O
text	pointer
)	O
;	O
l1	int
=	O
strlen	function
(	O
check_options	array
[	O
i	array
]	O
.	O
text	pointer
)	O
+	O
7	int
;	O
if	O
(	O
l1	int
>	O
second_width	int
)	O
second_width	int
=	O
l1	int
;	O
}	O
if	O
(	O
console_flag	char
)	O
{	O
l1	int
=	O
strlen	function
(	O
output_lines_label	pointer
)	O
+	O
13	int
;	O
if	O
(	O
l1	int
>	O
second_width	int
)	O
second_width	int
=	O
l1	int
;	O
}	O
l1	int
=	O
11	int
+	O
strlen	function
(	O
ok_button	pointer
)	O
+	O
strlen	function
(	O
save_button	pointer
)	O
+	O
strlen	function
(	O
cancel_button	pointer
)	O
;	O
i	array
=	O
(	O
first_width	int
+	O
second_width	int
-	O
l1	int
)	O
/	O
4	int
;	O
b1	int
=	O
5	int
+	O
i	array
;	O
b2	int
=	O
b1	int
+	O
strlen	function
(	O
ok_button	pointer
)	O
+	O
i	array
+	O
6	int
;	O
b3	int
=	O
b2	int
+	O
strlen	function
(	O
save_button	pointer
)	O
+	O
i	array
+	O
4	int
;	O
i18n_layt_flag	int
=	O
1	int
;	O
}	O
layout_dlg	pointer
=	O
create_dlg	function
(	O
0	int
,	O
0	int
,	O
15	int
,	O
first_width	int
+	O
second_width	int
+	O
9	int
,	O
dialog_colors	array
,	O
layout_callback	function
,	O
"[Layout]"	pointer
,	O
_	O
(	O
"Layout"	pointer
)	O
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
groupbox_new	function
(	O
4	int
,	O
2	int
,	O
first_width	int
,	O
6	int
,	O
title1	pointer
)	O
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
groupbox_new	function
(	O
4	int
,	O
8	int
,	O
first_width	int
,	O
4	int
,	O
title2	pointer
)	O
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
groupbox_new	function
(	O
5	int
+	O
first_width	int
,	O
2	int
,	O
second_width	int
,	O
10	int
,	O
title3	pointer
)	O
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
button_new	function
(	O
BY	int
,	O
b3	int
,	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
cancel_button	pointer
,	O
0	int
)	O
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
button_new	function
(	O
BY	int
,	O
b2	int
,	O
B_EXIT	int
,	O
NORMAL_BUTTON	int
,	O
save_button	pointer
,	O
0	int
)	O
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
button_new	function
(	O
BY	int
,	O
b1	int
,	O
B_ENTER	int
,	O
DEFPUSH_BUTTON	int
,	O
ok_button	pointer
,	O
0	int
)	O
)	O
;	O
if	O
(	O
console_flag	char
)	O
{	O
add_widget	function
(	O
layout_dlg	pointer
,	O
button_new	function
(	O
9	int
,	O
12	int
+	O
first_width	int
,	O
B_MINUS	O
,	O
NARROW_BUTTON	int
,	O
"&-"	pointer
,	O
bminus_cback	function
)	O
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
button_new	function
(	O
9	int
,	O
7	int
+	O
first_width	int
,	O
B_PLUS	O
,	O
NARROW_BUTTON	int
,	O
"&+"	pointer
,	O
bplus_cback	function
)	O
)	O
;	O
}	O
for	O
(	O
i	array
=	O
0	int
;	O
i	array
<	O
6	int
;	O
i	array
++	O
)	O
{	O
check_options	array
[	O
i	array
]	O
.	O
widget	pointer
=	O
check_new	function
(	O
8	int
-	O
i	array
,	O
7	int
+	O
first_width	int
,	O
XTRACT	O
(	O
i	array
)	O
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
check_options	array
[	O
i	array
]	O
.	O
widget	pointer
)	O
;	O
}	O
check_options	array
[	O
8	int
]	O
.	O
widget	pointer
=	O
check_new	function
(	O
10	int
,	O
6	int
,	O
XTRACT	O
(	O
8	int
)	O
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
check_options	array
[	O
8	int
]	O
.	O
widget	pointer
)	O
;	O
check_options	array
[	O
7	int
]	O
.	O
widget	pointer
=	O
check_new	function
(	O
9	int
,	O
6	int
,	O
XTRACT	O
(	O
7	int
)	O
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
check_options	array
[	O
7	int
]	O
.	O
widget	pointer
)	O
;	O
_filetype_mode	int
=	O
filetype_mode	int
;	O
_permission_mode	int
=	O
permission_mode	int
;	O
_equal_split	int
=	O
equal_split	int
;	O
_menubar_visible	int
=	O
menubar_visible	int
;	O
_command_prompt	int
=	O
command_prompt	int
;	O
_keybar_visible	int
=	O
keybar_visible	int
;	O
_message_visible	int
=	O
message_visible	int
;	O
_xterm_title	int
=	O
xterm_title	int
;	O
bright_widget	pointer
=	O
button_new	function
(	O
6	int
,	O
15	int
,	O
B_2RIGHT	O
,	O
NARROW_BUTTON	int
,	O
"&>"	pointer
,	O
b2right_cback	function
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
bright_widget	pointer
)	O
;	O
bleft_widget	pointer
=	O
button_new	function
(	O
6	int
,	O
9	int
,	O
B_2LEFT	O
,	O
NARROW_BUTTON	int
,	O
"&<"	pointer
,	O
b2left_cback	function
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
bleft_widget	pointer
)	O
;	O
check_options	array
[	O
6	int
]	O
.	O
widget	pointer
=	O
check_new	function
(	O
5	int
,	O
6	int
,	O
XTRACT	O
(	O
6	int
)	O
)	O
;	O
old_first_panel_size	int
=	O
-	O
1	int
;	O
old_horizontal_split	int
=	O
-	O
1	int
;	O
old_output_lines	int
=	O
-	O
1	int
;	O
_first_panel_size	int
=	O
first_panel_size	int
;	O
_output_lines	int
=	O
output_lines	int
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
check_options	array
[	O
6	int
]	O
.	O
widget	pointer
)	O
;	O
radio_widget	pointer
=	O
radio_new	function
(	O
3	int
,	O
6	int
,	O
2	int
,	O
s_split_direction	array
)	O
;	O
add_widget	function
(	O
layout_dlg	pointer
,	O
radio_widget	pointer
)	O
;	O
radio_widget	pointer
->	O
sel	int
=	O
horizontal_split	int
;	O
}	O
static	O
void	O
layout_change	function
(	O
void	O
)	O
{	O
setup_panels	function
(	O
)	O
;	O
done_menu	function
(	O
)	O
;	O
init_menu	function
(	O
)	O
;	O
menubar_arrange	function
(	O
the_menubar	pointer
)	O
;	O
}	O
void	O
layout_cmd	function
(	O
void	O
)	O
{	O
int	O
result	long
;	O
int	O
i	array
;	O
int	O
layout_do_change	int
=	O
0	int
;	O
init_layout	function
(	O
)	O
;	O
run_dlg	function
(	O
layout_dlg	pointer
)	O
;	O
result	long
=	O
layout_dlg	pointer
->	O
ret_value	int
;	O
if	O
(	O
result	long
==	O
B_ENTER	int
||	O
result	long
==	O
B_EXIT	int
)	O
{	O
for	O
(	O
i	array
=	O
0	int
;	O
check_options	array
[	O
i	array
]	O
.	O
text	pointer
;	O
i	array
++	O
)	O
if	O
(	O
check_options	array
[	O
i	array
]	O
.	O
widget	pointer
)	O
*	O
check_options	array
[	O
i	array
]	O
.	O
variable	pointer
=	O
check_options	array
[	O
i	array
]	O
.	O
widget	pointer
->	O
state	pointer
&	O
C_BOOL	int
;	O
horizontal_split	int
=	O
radio_widget	pointer
->	O
sel	int
;	O
first_panel_size	int
=	O
_first_panel_size	int
;	O
output_lines	int
=	O
_output_lines	int
;	O
layout_do_change	int
=	O
1	int
;	O
}	O
if	O
(	O
result	long
==	O
B_EXIT	int
)	O
{	O
save_layout	function
(	O
)	O
;	O
sync_profiles	function
(	O
)	O
;	O
}	O
destroy_dlg	function
(	O
layout_dlg	pointer
)	O
;	O
if	O
(	O
layout_do_change	int
)	O
layout_change	function
(	O
)	O
;	O
}	O
static	O
void	O
check_split	function
(	O
void	O
)	O
{	O
if	O
(	O
horizontal_split	int
)	O
{	O
if	O
(	O
equal_split	int
)	O
first_panel_size	int
=	O
height	int
/	O
2	int
;	O
else	O
if	O
(	O
first_panel_size	int
<	O
MINHEIGHT	int
)	O
first_panel_size	int
=	O
MINHEIGHT	int
;	O
else	O
if	O
(	O
first_panel_size	int
>	O
height	int
-	O
MINHEIGHT	int
)	O
first_panel_size	int
=	O
height	int
-	O
MINHEIGHT	int
;	O
}	O
else	O
{	O
if	O
(	O
equal_split	int
)	O
first_panel_size	int
=	O
COLS	O
/	O
2	int
;	O
else	O
if	O
(	O
first_panel_size	int
<	O
MINWIDTH	int
)	O
first_panel_size	int
=	O
MINWIDTH	int
;	O
else	O
if	O
(	O
first_panel_size	int
>	O
COLS	O
-	O
MINWIDTH	int
)	O
first_panel_size	int
=	O
COLS	O
-	O
MINWIDTH	int
;	O
}	O
}	O
void	O
init_curses	function
(	O
)	O
{	O
if	O
(	O
force_ugly_line_drawing	int
)	O
SLtt_Has_Alt_Charset	int
=	O
0	int
;	O
SLsmg_init_smg	function
(	O
)	O
;	O
do_enter_ca_mode	function
(	O
)	O
;	O
init_colors	function
(	O
)	O
;	O
keypad	O
(	O
stdscr	O
,	O
TRUE	O
)	O
;	O
nodelay	int
(	O
stdscr	O
,	O
FALSE	O
)	O
;	O
}	O
void	O
clr_scr	function
(	O
void	O
)	O
{	O
standend	O
(	O
)	O
;	O
dlg_erase	function
(	O
midnight_dlg	pointer
)	O
;	O
mc_refresh	function
(	O
)	O
;	O
doupdate	O
(	O
)	O
;	O
}	O
void	O
done_screen	function
(	O
)	O
{	O
if	O
(	O
!	O
(	O
quit	int
&	O
SUBSHELL_EXIT	int
)	O
)	O
clr_scr	function
(	O
)	O
;	O
reset_shell_mode	O
(	O
)	O
;	O
mc_noraw_mode	function
(	O
)	O
;	O
keypad	O
(	O
stdscr	O
,	O
FALSE	O
)	O
;	O
done_colors	function
(	O
)	O
;	O
}	O
static	O
void	O
panel_do_cols	function
(	O
int	O
index	function
)	O
{	O
if	O
(	O
get_display_type	function
(	O
index	function
)	O
==	O
view_listing	int
)	O
set_panel_formats	function
(	O
(	O
WPanel	struct
*	O
)	O
panels	array
[	O
index	function
]	O
.	O
widget	pointer
)	O
;	O
else	O
{	O
panel_update_cols	function
(	O
panels	array
[	O
index	function
]	O
.	O
widget	pointer
,	O
frame_half	int
)	O
;	O
}	O
}	O
void	O
setup_panels	function
(	O
void	O
)	O
{	O
int	O
start_y	int
;	O
int	O
promptl	int
;	O
if	O
(	O
console_flag	char
)	O
{	O
int	O
minimum	int
;	O
if	O
(	O
output_lines	int
<	O
0	int
)	O
output_lines	int
=	O
0	int
;	O
height	int
=	O
LINES	O
-	O
keybar_visible	int
-	O
command_prompt	int
-	O
menubar_visible	int
-	O
output_lines	int
-	O
message_visible	int
;	O
minimum	int
=	O
MINHEIGHT	int
*	O
(	O
1	int
+	O
horizontal_split	int
)	O
;	O
if	O
(	O
height	int
<	O
minimum	int
)	O
{	O
output_lines	int
-=	O
minimum	int
-	O
height	int
;	O
height	int
=	O
minimum	int
;	O
}	O
}	O
else	O
{	O
height	int
=	O
LINES	O
-	O
menubar_visible	int
-	O
command_prompt	int
-	O
keybar_visible	int
-	O
message_visible	int
;	O
}	O
check_split	function
(	O
)	O
;	O
start_y	int
=	O
menubar_visible	int
;	O
if	O
(	O
horizontal_split	int
)	O
{	O
widget_set_size	function
(	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
,	O
start_y	int
,	O
0	int
,	O
first_panel_size	int
,	O
0	int
)	O
;	O
widget_set_size	function
(	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
,	O
start_y	int
+	O
first_panel_size	int
,	O
0	int
,	O
height	int
-	O
first_panel_size	int
,	O
0	int
)	O
;	O
}	O
else	O
{	O
int	O
first_x	int
=	O
first_panel_size	int
;	O
widget_set_size	function
(	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
,	O
start_y	int
,	O
0	int
,	O
height	int
,	O
0	int
)	O
;	O
widget_set_size	function
(	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
,	O
start_y	int
,	O
first_x	int
,	O
height	int
,	O
0	int
)	O
;	O
}	O
panel_do_cols	function
(	O
0	int
)	O
;	O
panel_do_cols	function
(	O
1	int
)	O
;	O
promptl	int
=	O
strlen	function
(	O
prompt	pointer
)	O
;	O
widget_set_size	function
(	O
&	O
the_menubar	pointer
->	O
widget	pointer
,	O
0	int
,	O
0	int
,	O
1	int
,	O
COLS	O
)	O
;	O
if	O
(	O
command_prompt	int
)	O
{	O
widget_set_size	function
(	O
&	O
cmdline	pointer
->	O
widget	pointer
,	O
LINES	O
-	O
1	int
-	O
keybar_visible	int
,	O
promptl	int
,	O
1	int
,	O
COLS	O
-	O
promptl	int
-	O
(	O
keybar_visible	int
?	O
0	int
:	O
1	int
)	O
)	O
;	O
winput_set_origin	function
(	O
cmdline	pointer
,	O
promptl	int
,	O
COLS	O
-	O
promptl	int
-	O
(	O
keybar_visible	int
?	O
0	int
:	O
1	int
)	O
)	O
;	O
widget_set_size	function
(	O
&	O
the_prompt	pointer
->	O
widget	pointer
,	O
LINES	O
-	O
1	int
-	O
keybar_visible	int
,	O
0	int
,	O
1	int
,	O
promptl	int
)	O
;	O
}	O
else	O
{	O
widget_set_size	function
(	O
&	O
cmdline	pointer
->	O
widget	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
winput_set_origin	function
(	O
cmdline	pointer
,	O
0	int
,	O
0	int
)	O
;	O
widget_set_size	function
(	O
&	O
the_prompt	pointer
->	O
widget	pointer
,	O
LINES	O
,	O
COLS	O
,	O
0	int
,	O
0	int
)	O
;	O
}	O
widget_set_size	function
(	O
(	O
Widget	struct
*	O
)	O
the_bar	pointer
,	O
LINES	O
-	O
1	int
,	O
0	int
,	O
keybar_visible	int
,	O
COLS	O
)	O
;	O
buttonbar_set_visible	function
(	O
the_bar	pointer
,	O
keybar_visible	int
)	O
;	O
if	O
(	O
console_flag	char
&&	O
output_lines	int
)	O
{	O
output_start_y	int
=	O
LINES	O
-	O
command_prompt	int
-	O
keybar_visible	int
-	O
output_lines	int
;	O
show_console_contents	function
(	O
output_start_y	int
,	O
LINES	O
-	O
output_lines	int
-	O
keybar_visible	int
-	O
1	int
,	O
LINES	O
-	O
keybar_visible	int
-	O
1	int
)	O
;	O
}	O
if	O
(	O
message_visible	int
)	O
{	O
widget_set_size	function
(	O
&	O
the_hint	pointer
->	O
widget	pointer
,	O
height	int
+	O
start_y	int
,	O
0	int
,	O
1	int
,	O
COLS	O
)	O
;	O
set_hintbar	function
(	O
""	pointer
)	O
;	O
}	O
else	O
widget_set_size	function
(	O
&	O
the_hint	pointer
->	O
widget	pointer
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
load_hint	function
(	O
1	int
)	O
;	O
update_xterm_title_path	function
(	O
)	O
;	O
}	O
void	O
flag_winch	function
(	O
int	O
dummy	array
)	O
{	O
(	O
void	O
)	O
dummy	array
;	O
low_level_change_screen_size	function
(	O
)	O
;	O
winch_flag	int
=	O
1	int
;	O
}	O
static	O
void	O
low_level_change_screen_size	function
(	O
void	O
)	O
{	O
struct	O
winsize	struct
winsz	struct
;	O
winsz	struct
.	O
ws_col	short
=	O
winsz	struct
.	O
ws_row	short
=	O
0	int
;	O
ioctl	function
(	O
0	int
,	O
TIOCGWINSZ	int
,	O
&	O
winsz	struct
)	O
;	O
if	O
(	O
winsz	struct
.	O
ws_col	short
&&	O
winsz	struct
.	O
ws_row	short
)	O
{	O
COLS	O
=	O
winsz	struct
.	O
ws_col	short
;	O
LINES	O
=	O
winsz	struct
.	O
ws_row	short
;	O
resize_subshell	function
(	O
)	O
;	O
}	O
}	O
void	O
change_screen_size	function
(	O
void	O
)	O
{	O
winch_flag	int
=	O
0	int
;	O
mc_noraw_mode	function
(	O
)	O
;	O
endwin	O
(	O
)	O
;	O
low_level_change_screen_size	function
(	O
)	O
;	O
check_split	function
(	O
)	O
;	O
init_curses	function
(	O
)	O
;	O
setup_panels	function
(	O
)	O
;	O
(	O
*	O
current_dlg	pointer
->	O
callback	pointer
)	O
(	O
current_dlg	pointer
,	O
DLG_RESIZE	int
,	O
0	int
)	O
;	O
do_refresh	function
(	O
)	O
;	O
touchwin	O
(	O
stdscr	O
)	O
;	O
}	O
static	O
int	O
ok_to_refresh	int
=	O
1	int
;	O
void	O
use_dash	function
(	O
int	O
flag	int
)	O
{	O
if	O
(	O
flag	int
)	O
ok_to_refresh	int
++	O
;	O
else	O
ok_to_refresh	int
--	O
;	O
}	O
void	O
set_hintbar	function
(	O
const	O
char	O
*	O
str	pointer
)	O
{	O
label_set_text	function
(	O
the_hint	pointer
,	O
str	pointer
)	O
;	O
if	O
(	O
ok_to_refresh	int
>	O
0	int
)	O
refresh	O
(	O
)	O
;	O
}	O
void	O
print_vfs_message	function
(	O
const	O
char	O
*	O
msg	pointer
,	O
...	O
)	O
{	O
va_list	array
ap	array
;	O
char	O
str	pointer
[	O
128	int
]	O
;	O
va_start	O
(	O
ap	array
,	O
msg	pointer
)	O
;	O
g_vsnprintf	function
(	O
str	pointer
,	O
sizeof	O
(	O
str	pointer
)	O
,	O
msg	pointer
,	O
ap	array
)	O
;	O
va_end	O
(	O
ap	array
)	O
;	O
if	O
(	O
midnight_shutdown	int
)	O
return	O
;	O
if	O
(	O
!	O
message_visible	int
||	O
!	O
the_hint	pointer
||	O
!	O
the_hint	pointer
->	O
widget	pointer
.	O
parent	pointer
)	O
{	O
int	O
col	int
,	O
row	int
;	O
if	O
(	O
!	O
nice_rotating_dash	int
||	O
(	O
ok_to_refresh	int
<=	O
0	int
)	O
)	O
return	O
;	O
getyx	O
(	O
stdscr	O
,	O
row	int
,	O
col	int
)	O
;	O
move	O
(	O
0	int
,	O
0	int
)	O
;	O
attrset	function
(	O
NORMAL_COLOR	O
)	O
;	O
tty_printf	function
(	O
"%-*s"	pointer
,	O
COLS	O
-	O
1	int
,	O
str	pointer
)	O
;	O
move	O
(	O
row	int
,	O
col	int
)	O
;	O
mc_refresh	function
(	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
message_visible	int
)	O
{	O
set_hintbar	function
(	O
str	pointer
)	O
;	O
}	O
}	O
void	O
rotate_dash	function
(	O
void	O
)	O
{	O
static	O
const	O
char	O
rotating_dash	array
[	O
]	O
=	O
"|/-\\"	pointer
;	O
static	O
size_t	long
pos	pointer
=	O
0	int
;	O
if	O
(	O
!	O
nice_rotating_dash	int
||	O
(	O
ok_to_refresh	int
<=	O
0	int
)	O
)	O
return	O
;	O
if	O
(	O
pos	pointer
>=	O
sizeof	O
(	O
rotating_dash	array
)	O
-	O
1	int
)	O
pos	pointer
=	O
0	int
;	O
move	O
(	O
0	int
,	O
COLS	O
-	O
1	int
)	O
;	O
attrset	function
(	O
NORMAL_COLOR	O
)	O
;	O
addch	O
(	O
rotating_dash	array
[	O
pos	pointer
]	O
)	O
;	O
mc_refresh	function
(	O
)	O
;	O
pos	pointer
++	O
;	O
}	O
const	O
char	O
*	O
get_nth_panel_name	function
(	O
int	O
num	int
)	O
{	O
static	O
char	O
buffer	pointer
[	O
BUF_SMALL	int
]	O
;	O
if	O
(	O
!	O
num	int
)	O
return	O
"New Left Panel"	pointer
;	O
else	O
if	O
(	O
num	int
==	O
1	int
)	O
return	O
"New Right Panel"	pointer
;	O
else	O
{	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"%ith Panel"	pointer
,	O
num	int
)	O
;	O
return	O
buffer	pointer
;	O
}	O
}	O
void	O
set_display_type	function
(	O
int	O
num	int
,	O
int	O
type	enum
)	O
{	O
int	O
x	array
,	O
y	short
,	O
cols	int
,	O
lines	pointer
;	O
int	O
the_other	int
;	O
const	O
char	O
*	O
file_name	pointer
=	O
NULL	O
;	O
Widget	struct
*	O
new_widget	pointer
,	O
*	O
old_widget	pointer
;	O
WPanel	struct
*	O
the_other_panel	pointer
;	O
x	array
=	O
y	short
=	O
cols	int
=	O
lines	pointer
=	O
0	int
;	O
old_widget	pointer
=	O
0	int
;	O
if	O
(	O
num	int
>=	O
MAX_VIEWS	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Cannot allocate more that %d views\n"	pointer
,	O
MAX_VIEWS	int
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
the_other	int
=	O
0	int
;	O
if	O
(	O
type	enum
!=	O
view_listing	int
)	O
{	O
the_other	int
=	O
num	int
==	O
0	int
?	O
1	int
:	O
0	int
;	O
if	O
(	O
panels	array
[	O
the_other	int
]	O
.	O
type	enum
!=	O
view_listing	int
)	O
return	O
;	O
}	O
if	O
(	O
panels	array
[	O
num	int
]	O
.	O
widget	pointer
)	O
{	O
Widget	struct
*	O
w	pointer
=	O
panels	array
[	O
num	int
]	O
.	O
widget	pointer
;	O
WPanel	struct
*	O
panel	pointer
=	O
(	O
WPanel	struct
*	O
)	O
panels	array
[	O
num	int
]	O
.	O
widget	pointer
;	O
x	array
=	O
w	pointer
->	O
x	array
;	O
y	short
=	O
w	pointer
->	O
y	short
;	O
cols	int
=	O
w	pointer
->	O
cols	int
;	O
lines	pointer
=	O
w	pointer
->	O
lines	pointer
;	O
old_widget	pointer
=	O
panels	array
[	O
num	int
]	O
.	O
widget	pointer
;	O
if	O
(	O
panels	array
[	O
num	int
]	O
.	O
type	enum
==	O
view_listing	int
)	O
{	O
if	O
(	O
panel	pointer
->	O
frame_size	int
==	O
frame_full	int
&&	O
type	enum
!=	O
view_listing	int
)	O
{	O
cols	int
=	O
COLS	O
-	O
first_panel_size	int
;	O
if	O
(	O
num	int
==	O
1	int
)	O
x	array
=	O
first_panel_size	int
;	O
}	O
}	O
}	O
new_widget	pointer
=	O
0	int
;	O
switch	O
(	O
type	enum
)	O
{	O
case	O
view_listing	int
:	O
new_widget	pointer
=	O
(	O
Widget	struct
*	O
)	O
panel_new	function
(	O
get_nth_panel_name	function
(	O
num	int
)	O
)	O
;	O
break	O
;	O
case	O
view_info	int
:	O
new_widget	pointer
=	O
(	O
Widget	struct
*	O
)	O
info_new	function
(	O
)	O
;	O
break	O
;	O
case	O
view_tree	int
:	O
new_widget	pointer
=	O
(	O
Widget	struct
*	O
)	O
tree_new	function
(	O
1	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
view_quick	int
:	O
new_widget	pointer
=	O
(	O
Widget	struct
*	O
)	O
view_new	function
(	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
)	O
;	O
the_other_panel	pointer
=	O
(	O
WPanel	struct
*	O
)	O
panels	array
[	O
the_other	int
]	O
.	O
widget	pointer
;	O
if	O
(	O
the_other_panel	pointer
)	O
file_name	pointer
=	O
the_other_panel	pointer
->	O
dir	pointer
.	O
list	pointer
[	O
the_other_panel	pointer
->	O
selected	int
]	O
.	O
fname	pointer
;	O
else	O
file_name	pointer
=	O
""	pointer
;	O
view_load	function
(	O
(	O
WView	struct
*	O
)	O
new_widget	pointer
,	O
0	int
,	O
file_name	pointer
,	O
0	int
)	O
;	O
break	O
;	O
}	O
panels	array
[	O
num	int
]	O
.	O
type	enum
=	O
type	enum
;	O
panels	array
[	O
num	int
]	O
.	O
widget	pointer
=	O
(	O
Widget	struct
*	O
)	O
new_widget	pointer
;	O
widget_set_size	function
(	O
(	O
Widget	struct
*	O
)	O
new_widget	pointer
,	O
y	short
,	O
x	array
,	O
lines	pointer
,	O
cols	int
)	O
;	O
if	O
(	O
midnight_dlg	pointer
&&	O
old_widget	pointer
)	O
{	O
dlg_replace_widget	function
(	O
old_widget	pointer
,	O
panels	array
[	O
num	int
]	O
.	O
widget	pointer
)	O
;	O
}	O
if	O
(	O
type	enum
==	O
view_listing	int
)	O
{	O
if	O
(	O
num	int
==	O
0	int
)	O
left_panel	pointer
=	O
(	O
WPanel	struct
*	O
)	O
new_widget	pointer
;	O
else	O
right_panel	pointer
=	O
(	O
WPanel	struct
*	O
)	O
new_widget	pointer
;	O
}	O
if	O
(	O
type	enum
==	O
view_tree	int
)	O
the_tree	pointer
=	O
(	O
WTree	struct
*	O
)	O
new_widget	pointer
;	O
if	O
(	O
type	enum
!=	O
view_listing	int
)	O
if	O
(	O
current_panel	pointer
==	O
(	O
WPanel	struct
*	O
)	O
old_widget	pointer
)	O
current_panel	pointer
=	O
num	int
==	O
0	int
?	O
right_panel	pointer
:	O
left_panel	pointer
;	O
}	O
void	O
swap_panels	function
(	O
)	O
{	O
Widget	struct
tmp	struct
;	O
Widget	struct
*	O
tmp_widget	pointer
;	O
WPanel	struct
panel	pointer
;	O
WPanel	struct
*	O
panel1	pointer
,	O
*	O
panel2	pointer
;	O
int	O
tmp_type	int
;	O
panel1	pointer
=	O
(	O
WPanel	struct
*	O
)	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
;	O
panel2	pointer
=	O
(	O
WPanel	struct
*	O
)	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
;	O
if	O
(	O
panels	array
[	O
0	int
]	O
.	O
type	enum
==	O
view_listing	int
&&	O
panels	array
[	O
1	int
]	O
.	O
type	enum
==	O
view_listing	int
)	O
{	O
panelswap	O
(	O
dir	pointer
)	O
;	O
panelswap	O
(	O
active	int
)	O
;	O
panelswapstr	O
(	O
cwd	short
)	O
;	O
panelswapstr	O
(	O
lwd	array
)	O
;	O
panelswap	O
(	O
count	int
)	O
;	O
panelswap	O
(	O
marked	int
)	O
;	O
panelswap	O
(	O
dirs_marked	int
)	O
;	O
panelswap	O
(	O
total	double
)	O
;	O
panelswap	O
(	O
top_file	int
)	O
;	O
panelswap	O
(	O
selected	int
)	O
;	O
panelswap	O
(	O
is_panelized	int
)	O
;	O
panelswap	O
(	O
dir_stat	struct
)	O
;	O
panel1	pointer
->	O
searching	int
=	O
0	int
;	O
panel2	pointer
->	O
searching	int
=	O
0	int
;	O
if	O
(	O
current_panel	pointer
==	O
panel1	pointer
)	O
current_panel	pointer
=	O
panel2	pointer
;	O
else	O
current_panel	pointer
=	O
panel1	pointer
;	O
if	O
(	O
dlg_widget_active	function
(	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
)	O
)	O
dlg_select_widget	function
(	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
)	O
;	O
else	O
if	O
(	O
dlg_widget_active	function
(	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
)	O
)	O
dlg_select_widget	function
(	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
)	O
;	O
}	O
else	O
{	O
WPanel	struct
*	O
tmp_panel	pointer
;	O
tmp_panel	pointer
=	O
right_panel	pointer
;	O
right_panel	pointer
=	O
left_panel	pointer
;	O
left_panel	pointer
=	O
tmp_panel	pointer
;	O
if	O
(	O
panels	array
[	O
0	int
]	O
.	O
type	enum
==	O
view_listing	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
panel1	pointer
->	O
panel_name	pointer
,	O
get_nth_panel_name	function
(	O
0	int
)	O
)	O
)	O
{	O
g_free	function
(	O
panel1	pointer
->	O
panel_name	pointer
)	O
;	O
panel1	pointer
->	O
panel_name	pointer
=	O
g_strdup	function
(	O
get_nth_panel_name	function
(	O
1	int
)	O
)	O
;	O
}	O
}	O
if	O
(	O
panels	array
[	O
1	int
]	O
.	O
type	enum
==	O
view_listing	int
)	O
{	O
if	O
(	O
!	O
strcmp	function
(	O
panel2	pointer
->	O
panel_name	pointer
,	O
get_nth_panel_name	function
(	O
1	int
)	O
)	O
)	O
{	O
g_free	function
(	O
panel2	pointer
->	O
panel_name	pointer
)	O
;	O
panel2	pointer
->	O
panel_name	pointer
=	O
g_strdup	function
(	O
get_nth_panel_name	function
(	O
0	int
)	O
)	O
;	O
}	O
}	O
tmp	struct
.	O
x	array
=	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
->	O
x	array
;	O
tmp	struct
.	O
y	short
=	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
->	O
y	short
;	O
tmp	struct
.	O
cols	int
=	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
->	O
cols	int
;	O
tmp	struct
.	O
lines	pointer
=	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
->	O
lines	pointer
;	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
->	O
x	array
=	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
->	O
x	array
;	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
->	O
y	short
=	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
->	O
y	short
;	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
->	O
cols	int
=	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
->	O
cols	int
;	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
->	O
lines	pointer
=	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
->	O
lines	pointer
;	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
->	O
x	array
=	O
tmp	struct
.	O
x	array
;	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
->	O
y	short
=	O
tmp	struct
.	O
y	short
;	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
->	O
cols	int
=	O
tmp	struct
.	O
cols	int
;	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
->	O
lines	pointer
=	O
tmp	struct
.	O
lines	pointer
;	O
tmp_widget	pointer
=	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
;	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
=	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
;	O
panels	array
[	O
1	int
]	O
.	O
widget	pointer
=	O
tmp_widget	pointer
;	O
tmp_type	int
=	O
panels	array
[	O
0	int
]	O
.	O
type	enum
;	O
panels	array
[	O
0	int
]	O
.	O
type	enum
=	O
panels	array
[	O
1	int
]	O
.	O
type	enum
;	O
panels	array
[	O
1	int
]	O
.	O
type	enum
=	O
tmp_type	int
;	O
}	O
}	O
int	O
get_display_type	function
(	O
int	O
index	function
)	O
{	O
return	O
panels	array
[	O
index	function
]	O
.	O
type	enum
;	O
}	O
struct	O
Widget	struct
*	O
get_panel_widget	function
(	O
int	O
index	function
)	O
{	O
return	O
panels	array
[	O
index	function
]	O
.	O
widget	pointer
;	O
}	O
int	O
get_current_index	function
(	O
void	O
)	O
{	O
if	O
(	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
==	O
(	O
(	O
Widget	struct
*	O
)	O
current_panel	pointer
)	O
)	O
return	O
0	int
;	O
else	O
return	O
1	int
;	O
}	O
int	O
get_other_index	function
(	O
void	O
)	O
{	O
return	O
!	O
get_current_index	function
(	O
)	O
;	O
}	O
struct	O
WPanel	struct
*	O
get_other_panel	function
(	O
void	O
)	O
{	O
return	O
(	O
struct	O
WPanel	struct
*	O
)	O
get_panel_widget	function
(	O
get_other_index	function
(	O
)	O
)	O
;	O
}	O
int	O
get_current_type	function
(	O
void	O
)	O
{	O
if	O
(	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
==	O
(	O
Widget	struct
*	O
)	O
current_panel	pointer
)	O
return	O
panels	array
[	O
0	int
]	O
.	O
type	enum
;	O
else	O
return	O
panels	array
[	O
1	int
]	O
.	O
type	enum
;	O
}	O
int	O
get_other_type	function
(	O
void	O
)	O
{	O
if	O
(	O
panels	array
[	O
0	int
]	O
.	O
widget	pointer
==	O
(	O
Widget	struct
*	O
)	O
current_panel	pointer
)	O
return	O
panels	array
[	O
1	int
]	O
.	O
type	enum
;	O
else	O
return	O
panels	array
[	O
0	int
]	O
.	O
type	enum
;	O
}	O
