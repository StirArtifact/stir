const	O
char	O
deflate_copyright	array
[	O
]	O
=	O
" deflate 1.2.11 Copyright 1995-2017 Jean-loup Gailly and Mark Adler "	pointer
;	O
typedef	O
enum	O
{	O
need_more	int
,	O
block_done	int
,	O
finish_started	int
,	O
finish_done	int
}	O
block_state	enum
;	O
typedef	O
block_state	enum
(	O
*	O
compress_func	pointer
)	O
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
int	O
flush	int
)	O
)	O
;	O
local	O
int	O
deflateStateCheck	function
OF	O
(	O
(	O
z_streamp	pointer
strm	pointer
)	O
)	O
;	O
local	O
void	O
slide_hash	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
void	O
fill_window	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
block_state	enum
deflate_stored	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
int	O
flush	int
)	O
)	O
;	O
local	O
block_state	enum
deflate_fast	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
int	O
flush	int
)	O
)	O
;	O
local	O
block_state	enum
deflate_slow	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
int	O
flush	int
)	O
)	O
;	O
local	O
block_state	enum
deflate_rle	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
int	O
flush	int
)	O
)	O
;	O
local	O
block_state	enum
deflate_huff	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
int	O
flush	int
)	O
)	O
;	O
local	O
void	O
lm_init	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
)	O
)	O
;	O
local	O
void	O
putShortMSB	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
uInt	int
b	int
)	O
)	O
;	O
local	O
void	O
flush_pending	function
OF	O
(	O
(	O
z_streamp	pointer
strm	pointer
)	O
)	O
;	O
local	O
unsigned	O
read_buf	function
OF	O
(	O
(	O
z_streamp	pointer
strm	pointer
,	O
Bytef	char
*	O
buf	pointer
,	O
unsigned	O
size	int
)	O
)	O
;	O
local	O
uInt	int
longest_match	function
OF	O
(	O
(	O
deflate_state	struct
*	O
s	pointer
,	O
IPos	int
cur_match	int
)	O
)	O
;	O
typedef	O
struct	O
config_s	struct
{	O
ush	short
good_length	int
;	O
ush	short
max_lazy	int
;	O
ush	short
nice_length	int
;	O
ush	short
max_chain	int
;	O
compress_func	pointer
func	pointer
;	O
}	O
config	struct
;	O
local	O
const	O
config	struct
configuration_table	array
[	O
10	int
]	O
=	O
{	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
deflate_stored	function
}	O
,	O
{	O
4	int
,	O
4	int
,	O
8	int
,	O
4	int
,	O
deflate_fast	function
}	O
,	O
{	O
4	int
,	O
5	int
,	O
16	int
,	O
8	int
,	O
deflate_fast	function
}	O
,	O
{	O
4	int
,	O
6	int
,	O
32	int
,	O
32	int
,	O
deflate_fast	function
}	O
,	O
{	O
4	int
,	O
4	int
,	O
16	int
,	O
16	int
,	O
deflate_slow	function
}	O
,	O
{	O
8	int
,	O
16	int
,	O
32	int
,	O
32	int
,	O
deflate_slow	function
}	O
,	O
{	O
8	int
,	O
16	int
,	O
128	int
,	O
128	int
,	O
deflate_slow	function
}	O
,	O
{	O
8	int
,	O
32	int
,	O
128	int
,	O
256	int
,	O
deflate_slow	function
}	O
,	O
{	O
32	int
,	O
128	int
,	O
258	int
,	O
1024	int
,	O
deflate_slow	function
}	O
,	O
{	O
32	int
,	O
258	int
,	O
258	int
,	O
4096	int
,	O
deflate_slow	function
}	O
}	O
;	O
local	O
void	O
slide_hash	function
(	O
s	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
{	O
unsigned	O
n	int
,	O
m	int
;	O
Posf	short
*	O
p	pointer
;	O
uInt	int
wsize	int
=	O
s	pointer
->	O
w_size	int
;	O
n	int
=	O
s	pointer
->	O
hash_size	int
;	O
p	pointer
=	O
&	O
s	pointer
->	O
head	pointer
[	O
n	int
]	O
;	O
do	O
{	O
m	int
=	O
*	O
--	O
p	pointer
;	O
*	O
p	pointer
=	O
(	O
Pos	short
)	O
(	O
m	int
>=	O
wsize	int
?	O
m	int
-	O
wsize	int
:	O
NIL	int
)	O
;	O
}	O
while	O
(	O
--	O
n	int
)	O
;	O
n	int
=	O
wsize	int
;	O
p	pointer
=	O
&	O
s	pointer
->	O
prev	pointer
[	O
n	int
]	O
;	O
do	O
{	O
m	int
=	O
*	O
--	O
p	pointer
;	O
*	O
p	pointer
=	O
(	O
Pos	short
)	O
(	O
m	int
>=	O
wsize	int
?	O
m	int
-	O
wsize	int
:	O
NIL	int
)	O
;	O
}	O
while	O
(	O
--	O
n	int
)	O
;	O
}	O
int	O
ZEXPORT	O
deflateInit_	function
(	O
strm	pointer
,	O
level	int
,	O
version	pointer
,	O
stream_size	int
)	O
z_streamp	pointer
strm	pointer
;	O
int	O
level	int
;	O
const	O
char	O
*	O
version	pointer
;	O
int	O
stream_size	int
;	O
{	O
return	O
deflateInit2_	function
(	O
strm	pointer
,	O
level	int
,	O
Z_DEFLATED	int
,	O
MAX_WBITS	int
,	O
DEF_MEM_LEVEL	int
,	O
Z_DEFAULT_STRATEGY	int
,	O
version	pointer
,	O
stream_size	int
)	O
;	O
}	O
int	O
ZEXPORT	O
deflateInit2_	function
(	O
strm	pointer
,	O
level	int
,	O
method	int
,	O
windowBits	int
,	O
memLevel	int
,	O
strategy	int
,	O
version	pointer
,	O
stream_size	int
)	O
z_streamp	pointer
strm	pointer
;	O
int	O
level	int
;	O
int	O
method	int
;	O
int	O
windowBits	int
;	O
int	O
memLevel	int
;	O
int	O
strategy	int
;	O
const	O
char	O
*	O
version	pointer
;	O
int	O
stream_size	int
;	O
{	O
deflate_state	struct
*	O
s	pointer
;	O
int	O
wrap	int
=	O
1	int
;	O
static	O
const	O
char	O
my_version	array
[	O
]	O
=	O
ZLIB_VERSION	pointer
;	O
ushf	short
*	O
overlay	pointer
;	O
if	O
(	O
version	pointer
==	O
Z_NULL	int
||	O
version	pointer
[	O
0	int
]	O
!=	O
my_version	array
[	O
0	int
]	O
||	O
stream_size	int
!=	O
sizeof	O
(	O
z_stream	struct
)	O
)	O
{	O
return	O
Z_VERSION_ERROR	O
;	O
}	O
if	O
(	O
strm	pointer
==	O
Z_NULL	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
strm	pointer
->	O
msg	pointer
=	O
Z_NULL	int
;	O
if	O
(	O
strm	pointer
->	O
zalloc	pointer
==	O
(	O
alloc_func	pointer
)	O
0	int
)	O
{	O
strm	pointer
->	O
zalloc	pointer
=	O
zcalloc	function
;	O
strm	pointer
->	O
opaque	pointer
=	O
(	O
voidpf	pointer
)	O
0	int
;	O
}	O
if	O
(	O
strm	pointer
->	O
zfree	pointer
==	O
(	O
free_func	pointer
)	O
0	int
)	O
strm	pointer
->	O
zfree	pointer
=	O
zcfree	function
;	O
if	O
(	O
level	int
==	O
Z_DEFAULT_COMPRESSION	O
)	O
level	int
=	O
6	int
;	O
if	O
(	O
windowBits	int
<	O
0	int
)	O
{	O
wrap	int
=	O
0	int
;	O
windowBits	int
=	O
-	O
windowBits	int
;	O
}	O
else	O
if	O
(	O
windowBits	int
>	O
15	int
)	O
{	O
wrap	int
=	O
2	int
;	O
windowBits	int
-=	O
16	int
;	O
}	O
if	O
(	O
memLevel	int
<	O
1	int
||	O
memLevel	int
>	O
MAX_MEM_LEVEL	int
||	O
method	int
!=	O
Z_DEFLATED	int
||	O
windowBits	int
<	O
8	int
||	O
windowBits	int
>	O
15	int
||	O
level	int
<	O
0	int
||	O
level	int
>	O
9	int
||	O
strategy	int
<	O
0	int
||	O
strategy	int
>	O
Z_FIXED	int
||	O
(	O
windowBits	int
==	O
8	int
&&	O
wrap	int
!=	O
1	int
)	O
)	O
{	O
return	O
Z_STREAM_ERROR	O
;	O
}	O
if	O
(	O
windowBits	int
==	O
8	int
)	O
windowBits	int
=	O
9	int
;	O
s	pointer
=	O
(	O
deflate_state	struct
*	O
)	O
ZALLOC	O
(	O
strm	pointer
,	O
1	int
,	O
sizeof	O
(	O
deflate_state	struct
)	O
)	O
;	O
if	O
(	O
s	pointer
==	O
Z_NULL	int
)	O
return	O
Z_MEM_ERROR	O
;	O
strm	pointer
->	O
state	pointer
=	O
(	O
struct	O
internal_state	struct
FAR	O
*	O
)	O
s	pointer
;	O
s	pointer
->	O
strm	pointer
=	O
strm	pointer
;	O
s	pointer
->	O
status	int
=	O
INIT_STATE	int
;	O
s	pointer
->	O
wrap	int
=	O
wrap	int
;	O
s	pointer
->	O
gzhead	pointer
=	O
Z_NULL	int
;	O
s	pointer
->	O
w_bits	int
=	O
(	O
uInt	int
)	O
windowBits	int
;	O
s	pointer
->	O
w_size	int
=	O
1	int
<<	O
s	pointer
->	O
w_bits	int
;	O
s	pointer
->	O
w_mask	int
=	O
s	pointer
->	O
w_size	int
-	O
1	int
;	O
s	pointer
->	O
hash_bits	int
=	O
(	O
uInt	int
)	O
memLevel	int
+	O
7	int
;	O
s	pointer
->	O
hash_size	int
=	O
1	int
<<	O
s	pointer
->	O
hash_bits	int
;	O
s	pointer
->	O
hash_mask	int
=	O
s	pointer
->	O
hash_size	int
-	O
1	int
;	O
s	pointer
->	O
hash_shift	int
=	O
(	O
(	O
s	pointer
->	O
hash_bits	int
+	O
MIN_MATCH	int
-	O
1	int
)	O
/	O
MIN_MATCH	int
)	O
;	O
s	pointer
->	O
window	pointer
=	O
(	O
Bytef	char
*	O
)	O
ZALLOC	O
(	O
strm	pointer
,	O
s	pointer
->	O
w_size	int
,	O
2	int
*	O
sizeof	O
(	O
Byte	char
)	O
)	O
;	O
s	pointer
->	O
prev	pointer
=	O
(	O
Posf	short
*	O
)	O
ZALLOC	O
(	O
strm	pointer
,	O
s	pointer
->	O
w_size	int
,	O
sizeof	O
(	O
Pos	short
)	O
)	O
;	O
s	pointer
->	O
head	pointer
=	O
(	O
Posf	short
*	O
)	O
ZALLOC	O
(	O
strm	pointer
,	O
s	pointer
->	O
hash_size	int
,	O
sizeof	O
(	O
Pos	short
)	O
)	O
;	O
s	pointer
->	O
high_water	long
=	O
0	int
;	O
s	pointer
->	O
lit_bufsize	int
=	O
1	int
<<	O
(	O
memLevel	int
+	O
6	int
)	O
;	O
overlay	pointer
=	O
(	O
ushf	short
*	O
)	O
ZALLOC	O
(	O
strm	pointer
,	O
s	pointer
->	O
lit_bufsize	int
,	O
sizeof	O
(	O
ush	short
)	O
+	O
2	int
)	O
;	O
s	pointer
->	O
pending_buf	pointer
=	O
(	O
uchf	char
*	O
)	O
overlay	pointer
;	O
s	pointer
->	O
pending_buf_size	long
=	O
(	O
ulg	long
)	O
s	pointer
->	O
lit_bufsize	int
*	O
(	O
sizeof	O
(	O
ush	short
)	O
+	O
2L	int
)	O
;	O
if	O
(	O
s	pointer
->	O
window	pointer
==	O
Z_NULL	int
||	O
s	pointer
->	O
prev	pointer
==	O
Z_NULL	int
||	O
s	pointer
->	O
head	pointer
==	O
Z_NULL	int
||	O
s	pointer
->	O
pending_buf	pointer
==	O
Z_NULL	int
)	O
{	O
s	pointer
->	O
status	int
=	O
FINISH_STATE	int
;	O
strm	pointer
->	O
msg	pointer
=	O
ERR_MSG	O
(	O
Z_MEM_ERROR	O
)	O
;	O
deflateEnd	function
(	O
strm	pointer
)	O
;	O
return	O
Z_MEM_ERROR	O
;	O
}	O
s	pointer
->	O
d_buf	pointer
=	O
overlay	pointer
+	O
s	pointer
->	O
lit_bufsize	int
/	O
sizeof	O
(	O
ush	short
)	O
;	O
s	pointer
->	O
l_buf	pointer
=	O
s	pointer
->	O
pending_buf	pointer
+	O
(	O
1	int
+	O
sizeof	O
(	O
ush	short
)	O
)	O
*	O
s	pointer
->	O
lit_bufsize	int
;	O
s	pointer
->	O
level	int
=	O
level	int
;	O
s	pointer
->	O
strategy	int
=	O
strategy	int
;	O
s	pointer
->	O
method	int
=	O
(	O
Byte	char
)	O
method	int
;	O
return	O
deflateReset	function
(	O
strm	pointer
)	O
;	O
}	O
local	O
int	O
deflateStateCheck	function
(	O
strm	pointer
)	O
z_streamp	pointer
strm	pointer
;	O
{	O
deflate_state	struct
*	O
s	pointer
;	O
if	O
(	O
strm	pointer
==	O
Z_NULL	int
||	O
strm	pointer
->	O
zalloc	pointer
==	O
(	O
alloc_func	pointer
)	O
0	int
||	O
strm	pointer
->	O
zfree	pointer
==	O
(	O
free_func	pointer
)	O
0	int
)	O
return	O
1	int
;	O
s	pointer
=	O
strm	pointer
->	O
state	pointer
;	O
if	O
(	O
s	pointer
==	O
Z_NULL	int
||	O
s	pointer
->	O
strm	pointer
!=	O
strm	pointer
||	O
(	O
s	pointer
->	O
status	int
!=	O
INIT_STATE	int
&&	O
s	pointer
->	O
status	int
!=	O
GZIP_STATE	int
&&	O
s	pointer
->	O
status	int
!=	O
EXTRA_STATE	int
&&	O
s	pointer
->	O
status	int
!=	O
NAME_STATE	int
&&	O
s	pointer
->	O
status	int
!=	O
COMMENT_STATE	int
&&	O
s	pointer
->	O
status	int
!=	O
HCRC_STATE	int
&&	O
s	pointer
->	O
status	int
!=	O
BUSY_STATE	int
&&	O
s	pointer
->	O
status	int
!=	O
FINISH_STATE	int
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
ZEXPORT	O
deflateSetDictionary	function
(	O
strm	pointer
,	O
dictionary	pointer
,	O
dictLength	int
)	O
z_streamp	pointer
strm	pointer
;	O
const	O
Bytef	char
*	O
dictionary	pointer
;	O
uInt	int
dictLength	int
;	O
{	O
deflate_state	struct
*	O
s	pointer
;	O
uInt	int
str	int
,	O
n	int
;	O
int	O
wrap	int
;	O
unsigned	O
avail	int
;	O
z_const	O
unsigned	O
char	O
*	O
next	pointer
;	O
if	O
(	O
deflateStateCheck	function
(	O
strm	pointer
)	O
||	O
dictionary	pointer
==	O
Z_NULL	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
s	pointer
=	O
strm	pointer
->	O
state	pointer
;	O
wrap	int
=	O
s	pointer
->	O
wrap	int
;	O
if	O
(	O
wrap	int
==	O
2	int
||	O
(	O
wrap	int
==	O
1	int
&&	O
s	pointer
->	O
status	int
!=	O
INIT_STATE	int
)	O
||	O
s	pointer
->	O
lookahead	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
wrap	int
==	O
1	int
)	O
strm	pointer
->	O
adler	long
=	O
adler32	function
(	O
strm	pointer
->	O
adler	long
,	O
dictionary	pointer
,	O
dictLength	int
)	O
;	O
s	pointer
->	O
wrap	int
=	O
0	int
;	O
if	O
(	O
dictLength	int
>=	O
s	pointer
->	O
w_size	int
)	O
{	O
if	O
(	O
wrap	int
==	O
0	int
)	O
{	O
CLEAR_HASH	O
(	O
s	pointer
)	O
;	O
s	pointer
->	O
strstart	int
=	O
0	int
;	O
s	pointer
->	O
block_start	long
=	O
0L	int
;	O
s	pointer
->	O
insert	int
=	O
0	int
;	O
}	O
dictionary	pointer
+=	O
dictLength	int
-	O
s	pointer
->	O
w_size	int
;	O
dictLength	int
=	O
s	pointer
->	O
w_size	int
;	O
}	O
avail	int
=	O
strm	pointer
->	O
avail_in	int
;	O
next	pointer
=	O
strm	pointer
->	O
next_in	pointer
;	O
strm	pointer
->	O
avail_in	int
=	O
dictLength	int
;	O
strm	pointer
->	O
next_in	pointer
=	O
(	O
z_const	O
Bytef	char
*	O
)	O
dictionary	pointer
;	O
fill_window	function
(	O
s	pointer
)	O
;	O
while	O
(	O
s	pointer
->	O
lookahead	int
>=	O
MIN_MATCH	int
)	O
{	O
str	int
=	O
s	pointer
->	O
strstart	int
;	O
n	int
=	O
s	pointer
->	O
lookahead	int
-	O
(	O
MIN_MATCH	int
-	O
1	int
)	O
;	O
do	O
{	O
UPDATE_HASH	O
(	O
s	pointer
,	O
s	pointer
->	O
ins_h	int
,	O
s	pointer
->	O
window	pointer
[	O
str	int
+	O
MIN_MATCH	int
-	O
1	int
]	O
)	O
;	O
s	pointer
->	O
prev	pointer
[	O
str	int
&	O
s	pointer
->	O
w_mask	int
]	O
=	O
s	pointer
->	O
head	pointer
[	O
s	pointer
->	O
ins_h	int
]	O
;	O
s	pointer
->	O
head	pointer
[	O
s	pointer
->	O
ins_h	int
]	O
=	O
(	O
Pos	short
)	O
str	int
;	O
str	int
++	O
;	O
}	O
while	O
(	O
--	O
n	int
)	O
;	O
s	pointer
->	O
strstart	int
=	O
str	int
;	O
s	pointer
->	O
lookahead	int
=	O
MIN_MATCH	int
-	O
1	int
;	O
fill_window	function
(	O
s	pointer
)	O
;	O
}	O
s	pointer
->	O
strstart	int
+=	O
s	pointer
->	O
lookahead	int
;	O
s	pointer
->	O
block_start	long
=	O
(	O
long	O
)	O
s	pointer
->	O
strstart	int
;	O
s	pointer
->	O
insert	int
=	O
s	pointer
->	O
lookahead	int
;	O
s	pointer
->	O
lookahead	int
=	O
0	int
;	O
s	pointer
->	O
match_length	int
=	O
s	pointer
->	O
prev_length	int
=	O
MIN_MATCH	int
-	O
1	int
;	O
s	pointer
->	O
match_available	int
=	O
0	int
;	O
strm	pointer
->	O
next_in	pointer
=	O
next	pointer
;	O
strm	pointer
->	O
avail_in	int
=	O
avail	int
;	O
s	pointer
->	O
wrap	int
=	O
wrap	int
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
deflateGetDictionary	function
(	O
strm	pointer
,	O
dictionary	pointer
,	O
dictLength	int
)	O
z_streamp	pointer
strm	pointer
;	O
Bytef	char
*	O
dictionary	pointer
;	O
uInt	int
*	O
dictLength	int
;	O
{	O
deflate_state	struct
*	O
s	pointer
;	O
uInt	int
len	int
;	O
if	O
(	O
deflateStateCheck	function
(	O
strm	pointer
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
s	pointer
=	O
strm	pointer
->	O
state	pointer
;	O
len	int
=	O
s	pointer
->	O
strstart	int
+	O
s	pointer
->	O
lookahead	int
;	O
if	O
(	O
len	int
>	O
s	pointer
->	O
w_size	int
)	O
len	int
=	O
s	pointer
->	O
w_size	int
;	O
if	O
(	O
dictionary	pointer
!=	O
Z_NULL	int
&&	O
len	int
)	O
zmemcpy	O
(	O
dictionary	pointer
,	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
strstart	int
+	O
s	pointer
->	O
lookahead	int
-	O
len	int
,	O
len	int
)	O
;	O
if	O
(	O
dictLength	int
!=	O
Z_NULL	int
)	O
*	O
dictLength	int
=	O
len	int
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
deflateResetKeep	function
(	O
strm	pointer
)	O
z_streamp	pointer
strm	pointer
;	O
{	O
deflate_state	struct
*	O
s	pointer
;	O
if	O
(	O
deflateStateCheck	function
(	O
strm	pointer
)	O
)	O
{	O
return	O
Z_STREAM_ERROR	O
;	O
}	O
strm	pointer
->	O
total_in	long
=	O
strm	pointer
->	O
total_out	long
=	O
0	int
;	O
strm	pointer
->	O
msg	pointer
=	O
Z_NULL	int
;	O
strm	pointer
->	O
data_type	int
=	O
Z_UNKNOWN	int
;	O
s	pointer
=	O
(	O
deflate_state	struct
*	O
)	O
strm	pointer
->	O
state	pointer
;	O
s	pointer
->	O
pending	pointer
=	O
0	int
;	O
s	pointer
->	O
pending_out	pointer
=	O
s	pointer
->	O
pending_buf	pointer
;	O
if	O
(	O
s	pointer
->	O
wrap	int
<	O
0	int
)	O
{	O
s	pointer
->	O
wrap	int
=	O
-	O
s	pointer
->	O
wrap	int
;	O
}	O
s	pointer
->	O
status	int
=	O
s	pointer
->	O
wrap	int
==	O
2	int
?	O
GZIP_STATE	int
:	O
s	pointer
->	O
wrap	int
?	O
INIT_STATE	int
:	O
BUSY_STATE	int
;	O
strm	pointer
->	O
adler	long
=	O
s	pointer
->	O
wrap	int
==	O
2	int
?	O
crc32	function
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
:	O
adler32	function
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
s	pointer
->	O
last_flush	int
=	O
Z_NO_FLUSH	int
;	O
_tr_init	function
(	O
s	pointer
)	O
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
deflateReset	function
(	O
strm	pointer
)	O
z_streamp	pointer
strm	pointer
;	O
{	O
int	O
ret	int
;	O
ret	int
=	O
deflateResetKeep	function
(	O
strm	pointer
)	O
;	O
if	O
(	O
ret	int
==	O
Z_OK	int
)	O
lm_init	function
(	O
strm	pointer
->	O
state	pointer
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
ZEXPORT	O
deflateSetHeader	function
(	O
strm	pointer
,	O
head	pointer
)	O
z_streamp	pointer
strm	pointer
;	O
gz_headerp	pointer
head	pointer
;	O
{	O
if	O
(	O
deflateStateCheck	function
(	O
strm	pointer
)	O
||	O
strm	pointer
->	O
state	pointer
->	O
wrap	int
!=	O
2	int
)	O
return	O
Z_STREAM_ERROR	O
;	O
strm	pointer
->	O
state	pointer
->	O
gzhead	pointer
=	O
head	pointer
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
deflatePending	function
(	O
strm	pointer
,	O
pending	pointer
,	O
bits	pointer
)	O
unsigned	O
*	O
pending	pointer
;	O
int	O
*	O
bits	pointer
;	O
z_streamp	pointer
strm	pointer
;	O
{	O
if	O
(	O
deflateStateCheck	function
(	O
strm	pointer
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
if	O
(	O
pending	pointer
!=	O
Z_NULL	int
)	O
*	O
pending	pointer
=	O
strm	pointer
->	O
state	pointer
->	O
pending	pointer
;	O
if	O
(	O
bits	pointer
!=	O
Z_NULL	int
)	O
*	O
bits	pointer
=	O
strm	pointer
->	O
state	pointer
->	O
bi_valid	int
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
deflatePrime	function
(	O
strm	pointer
,	O
bits	pointer
,	O
value	int
)	O
z_streamp	pointer
strm	pointer
;	O
int	O
bits	pointer
;	O
int	O
value	int
;	O
{	O
deflate_state	struct
*	O
s	pointer
;	O
int	O
put	int
;	O
if	O
(	O
deflateStateCheck	function
(	O
strm	pointer
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
s	pointer
=	O
strm	pointer
->	O
state	pointer
;	O
if	O
(	O
(	O
Bytef	char
*	O
)	O
(	O
s	pointer
->	O
d_buf	pointer
)	O
<	O
s	pointer
->	O
pending_out	pointer
+	O
(	O
(	O
Buf_size	int
+	O
7	int
)	O
>>	O
3	int
)	O
)	O
return	O
Z_BUF_ERROR	O
;	O
do	O
{	O
put	int
=	O
Buf_size	int
-	O
s	pointer
->	O
bi_valid	int
;	O
if	O
(	O
put	int
>	O
bits	pointer
)	O
put	int
=	O
bits	pointer
;	O
s	pointer
->	O
bi_buf	short
|=	O
(	O
ush	short
)	O
(	O
(	O
value	int
&	O
(	O
(	O
1	int
<<	O
put	int
)	O
-	O
1	int
)	O
)	O
<<	O
s	pointer
->	O
bi_valid	int
)	O
;	O
s	pointer
->	O
bi_valid	int
+=	O
put	int
;	O
_tr_flush_bits	function
(	O
s	pointer
)	O
;	O
value	int
>>=	O
put	int
;	O
bits	pointer
-=	O
put	int
;	O
}	O
while	O
(	O
bits	pointer
)	O
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
deflateParams	function
(	O
strm	pointer
,	O
level	int
,	O
strategy	int
)	O
z_streamp	pointer
strm	pointer
;	O
int	O
level	int
;	O
int	O
strategy	int
;	O
{	O
deflate_state	struct
*	O
s	pointer
;	O
compress_func	pointer
func	pointer
;	O
if	O
(	O
deflateStateCheck	function
(	O
strm	pointer
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
s	pointer
=	O
strm	pointer
->	O
state	pointer
;	O
if	O
(	O
level	int
==	O
Z_DEFAULT_COMPRESSION	O
)	O
level	int
=	O
6	int
;	O
if	O
(	O
level	int
<	O
0	int
||	O
level	int
>	O
9	int
||	O
strategy	int
<	O
0	int
||	O
strategy	int
>	O
Z_FIXED	int
)	O
{	O
return	O
Z_STREAM_ERROR	O
;	O
}	O
func	pointer
=	O
configuration_table	array
[	O
s	pointer
->	O
level	int
]	O
.	O
func	pointer
;	O
if	O
(	O
(	O
strategy	int
!=	O
s	pointer
->	O
strategy	int
||	O
func	pointer
!=	O
configuration_table	array
[	O
level	int
]	O
.	O
func	pointer
)	O
&&	O
s	pointer
->	O
high_water	long
)	O
{	O
int	O
err	int
=	O
deflate	function
(	O
strm	pointer
,	O
Z_BLOCK	int
)	O
;	O
if	O
(	O
err	int
==	O
Z_STREAM_ERROR	O
)	O
return	O
err	int
;	O
if	O
(	O
strm	pointer
->	O
avail_out	int
==	O
0	int
)	O
return	O
Z_BUF_ERROR	O
;	O
}	O
if	O
(	O
s	pointer
->	O
level	int
!=	O
level	int
)	O
{	O
if	O
(	O
s	pointer
->	O
level	int
==	O
0	int
&&	O
s	pointer
->	O
matches	int
!=	O
0	int
)	O
{	O
if	O
(	O
s	pointer
->	O
matches	int
==	O
1	int
)	O
slide_hash	function
(	O
s	pointer
)	O
;	O
else	O
CLEAR_HASH	O
(	O
s	pointer
)	O
;	O
s	pointer
->	O
matches	int
=	O
0	int
;	O
}	O
s	pointer
->	O
level	int
=	O
level	int
;	O
s	pointer
->	O
max_lazy_match	int
=	O
configuration_table	array
[	O
level	int
]	O
.	O
max_lazy	int
;	O
s	pointer
->	O
good_match	int
=	O
configuration_table	array
[	O
level	int
]	O
.	O
good_length	int
;	O
s	pointer
->	O
nice_match	int
=	O
configuration_table	array
[	O
level	int
]	O
.	O
nice_length	int
;	O
s	pointer
->	O
max_chain_length	int
=	O
configuration_table	array
[	O
level	int
]	O
.	O
max_chain	int
;	O
}	O
s	pointer
->	O
strategy	int
=	O
strategy	int
;	O
return	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
deflateTune	function
(	O
strm	pointer
,	O
good_length	int
,	O
max_lazy	int
,	O
nice_length	int
,	O
max_chain	int
)	O
z_streamp	pointer
strm	pointer
;	O
int	O
good_length	int
;	O
int	O
max_lazy	int
;	O
int	O
nice_length	int
;	O
int	O
max_chain	int
;	O
{	O
deflate_state	struct
*	O
s	pointer
;	O
if	O
(	O
deflateStateCheck	function
(	O
strm	pointer
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
s	pointer
=	O
strm	pointer
->	O
state	pointer
;	O
s	pointer
->	O
good_match	int
=	O
(	O
uInt	int
)	O
good_length	int
;	O
s	pointer
->	O
max_lazy_match	int
=	O
(	O
uInt	int
)	O
max_lazy	int
;	O
s	pointer
->	O
nice_match	int
=	O
nice_length	int
;	O
s	pointer
->	O
max_chain_length	int
=	O
(	O
uInt	int
)	O
max_chain	int
;	O
return	O
Z_OK	int
;	O
}	O
uLong	long
ZEXPORT	O
deflateBound	function
(	O
strm	pointer
,	O
sourceLen	long
)	O
z_streamp	pointer
strm	pointer
;	O
uLong	long
sourceLen	long
;	O
{	O
deflate_state	struct
*	O
s	pointer
;	O
uLong	long
complen	long
,	O
wraplen	long
;	O
complen	long
=	O
sourceLen	long
+	O
(	O
(	O
sourceLen	long
+	O
7	int
)	O
>>	O
3	int
)	O
+	O
(	O
(	O
sourceLen	long
+	O
63	int
)	O
>>	O
6	int
)	O
+	O
5	int
;	O
if	O
(	O
deflateStateCheck	function
(	O
strm	pointer
)	O
)	O
return	O
complen	long
+	O
6	int
;	O
s	pointer
=	O
strm	pointer
->	O
state	pointer
;	O
switch	O
(	O
s	pointer
->	O
wrap	int
)	O
{	O
case	O
0	int
:	O
wraplen	long
=	O
0	int
;	O
break	O
;	O
case	O
1	int
:	O
wraplen	long
=	O
6	int
+	O
(	O
s	pointer
->	O
strstart	int
?	O
4	int
:	O
0	int
)	O
;	O
break	O
;	O
case	O
2	int
:	O
wraplen	long
=	O
18	int
;	O
if	O
(	O
s	pointer
->	O
gzhead	pointer
!=	O
Z_NULL	int
)	O
{	O
Bytef	char
*	O
str	int
;	O
if	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
extra	pointer
!=	O
Z_NULL	int
)	O
wraplen	long
+=	O
2	int
+	O
s	pointer
->	O
gzhead	pointer
->	O
extra_len	int
;	O
str	int
=	O
s	pointer
->	O
gzhead	pointer
->	O
name	pointer
;	O
if	O
(	O
str	int
!=	O
Z_NULL	int
)	O
do	O
{	O
wraplen	long
++	O
;	O
}	O
while	O
(	O
*	O
str	int
++	O
)	O
;	O
str	int
=	O
s	pointer
->	O
gzhead	pointer
->	O
comment	pointer
;	O
if	O
(	O
str	int
!=	O
Z_NULL	int
)	O
do	O
{	O
wraplen	long
++	O
;	O
}	O
while	O
(	O
*	O
str	int
++	O
)	O
;	O
if	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
hcrc	int
)	O
wraplen	long
+=	O
2	int
;	O
}	O
break	O
;	O
default	O
:	O
wraplen	long
=	O
6	int
;	O
}	O
if	O
(	O
s	pointer
->	O
w_bits	int
!=	O
15	int
||	O
s	pointer
->	O
hash_bits	int
!=	O
8	int
+	O
7	int
)	O
return	O
complen	long
+	O
wraplen	long
;	O
return	O
sourceLen	long
+	O
(	O
sourceLen	long
>>	O
12	int
)	O
+	O
(	O
sourceLen	long
>>	O
14	int
)	O
+	O
(	O
sourceLen	long
>>	O
25	int
)	O
+	O
13	int
-	O
6	int
+	O
wraplen	long
;	O
}	O
local	O
void	O
putShortMSB	function
(	O
s	pointer
,	O
b	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
uInt	int
b	int
;	O
{	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
b	int
>>	O
8	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
b	int
&	O
0xff	int
)	O
)	O
;	O
}	O
local	O
void	O
flush_pending	function
(	O
strm	pointer
)	O
z_streamp	pointer
strm	pointer
;	O
{	O
unsigned	O
len	int
;	O
deflate_state	struct
*	O
s	pointer
=	O
strm	pointer
->	O
state	pointer
;	O
_tr_flush_bits	function
(	O
s	pointer
)	O
;	O
len	int
=	O
s	pointer
->	O
pending	pointer
;	O
if	O
(	O
len	int
>	O
strm	pointer
->	O
avail_out	int
)	O
len	int
=	O
strm	pointer
->	O
avail_out	int
;	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
;	O
zmemcpy	O
(	O
strm	pointer
->	O
next_out	pointer
,	O
s	pointer
->	O
pending_out	pointer
,	O
len	int
)	O
;	O
strm	pointer
->	O
next_out	pointer
+=	O
len	int
;	O
s	pointer
->	O
pending_out	pointer
+=	O
len	int
;	O
strm	pointer
->	O
total_out	long
+=	O
len	int
;	O
strm	pointer
->	O
avail_out	int
-=	O
len	int
;	O
s	pointer
->	O
pending	pointer
-=	O
len	int
;	O
if	O
(	O
s	pointer
->	O
pending	pointer
==	O
0	int
)	O
{	O
s	pointer
->	O
pending_out	pointer
=	O
s	pointer
->	O
pending_buf	pointer
;	O
}	O
}	O
int	O
ZEXPORT	O
deflate	function
(	O
strm	pointer
,	O
flush	int
)	O
z_streamp	pointer
strm	pointer
;	O
int	O
flush	int
;	O
{	O
int	O
old_flush	int
;	O
deflate_state	struct
*	O
s	pointer
;	O
if	O
(	O
deflateStateCheck	function
(	O
strm	pointer
)	O
||	O
flush	int
>	O
Z_BLOCK	int
||	O
flush	int
<	O
0	int
)	O
{	O
return	O
Z_STREAM_ERROR	O
;	O
}	O
s	pointer
=	O
strm	pointer
->	O
state	pointer
;	O
if	O
(	O
strm	pointer
->	O
next_out	pointer
==	O
Z_NULL	int
||	O
(	O
strm	pointer
->	O
avail_in	int
!=	O
0	int
&&	O
strm	pointer
->	O
next_in	pointer
==	O
Z_NULL	int
)	O
||	O
(	O
s	pointer
->	O
status	int
==	O
FINISH_STATE	int
&&	O
flush	int
!=	O
Z_FINISH	int
)	O
)	O
{	O
ERR_RETURN	O
(	O
strm	pointer
,	O
Z_STREAM_ERROR	O
)	O
;	O
}	O
if	O
(	O
strm	pointer
->	O
avail_out	int
==	O
0	int
)	O
ERR_RETURN	O
(	O
strm	pointer
,	O
Z_BUF_ERROR	O
)	O
;	O
old_flush	int
=	O
s	pointer
->	O
last_flush	int
;	O
s	pointer
->	O
last_flush	int
=	O
flush	int
;	O
if	O
(	O
s	pointer
->	O
pending	pointer
!=	O
0	int
)	O
{	O
flush_pending	function
(	O
strm	pointer
)	O
;	O
if	O
(	O
strm	pointer
->	O
avail_out	int
==	O
0	int
)	O
{	O
s	pointer
->	O
last_flush	int
=	O
-	O
1	int
;	O
return	O
Z_OK	int
;	O
}	O
}	O
else	O
if	O
(	O
strm	pointer
->	O
avail_in	int
==	O
0	int
&&	O
RANK	O
(	O
flush	int
)	O
<=	O
RANK	O
(	O
old_flush	int
)	O
&&	O
flush	int
!=	O
Z_FINISH	int
)	O
{	O
ERR_RETURN	O
(	O
strm	pointer
,	O
Z_BUF_ERROR	O
)	O
;	O
}	O
if	O
(	O
s	pointer
->	O
status	int
==	O
FINISH_STATE	int
&&	O
strm	pointer
->	O
avail_in	int
!=	O
0	int
)	O
{	O
ERR_RETURN	O
(	O
strm	pointer
,	O
Z_BUF_ERROR	O
)	O
;	O
}	O
if	O
(	O
s	pointer
->	O
status	int
==	O
INIT_STATE	int
)	O
{	O
uInt	int
header	int
=	O
(	O
Z_DEFLATED	int
+	O
(	O
(	O
s	pointer
->	O
w_bits	int
-	O
8	int
)	O
<<	O
4	int
)	O
)	O
<<	O
8	int
;	O
uInt	int
level_flags	int
;	O
if	O
(	O
s	pointer
->	O
strategy	int
>=	O
Z_HUFFMAN_ONLY	int
||	O
s	pointer
->	O
level	int
<	O
2	int
)	O
level_flags	int
=	O
0	int
;	O
else	O
if	O
(	O
s	pointer
->	O
level	int
<	O
6	int
)	O
level_flags	int
=	O
1	int
;	O
else	O
if	O
(	O
s	pointer
->	O
level	int
==	O
6	int
)	O
level_flags	int
=	O
2	int
;	O
else	O
level_flags	int
=	O
3	int
;	O
header	int
|=	O
(	O
level_flags	int
<<	O
6	int
)	O
;	O
if	O
(	O
s	pointer
->	O
strstart	int
!=	O
0	int
)	O
header	int
|=	O
PRESET_DICT	int
;	O
header	int
+=	O
31	int
-	O
(	O
header	int
%	O
31	int
)	O
;	O
putShortMSB	function
(	O
s	pointer
,	O
header	int
)	O
;	O
if	O
(	O
s	pointer
->	O
strstart	int
!=	O
0	int
)	O
{	O
putShortMSB	function
(	O
s	pointer
,	O
(	O
uInt	int
)	O
(	O
strm	pointer
->	O
adler	long
>>	O
16	int
)	O
)	O
;	O
putShortMSB	function
(	O
s	pointer
,	O
(	O
uInt	int
)	O
(	O
strm	pointer
->	O
adler	long
&	O
0xffff	int
)	O
)	O
;	O
}	O
strm	pointer
->	O
adler	long
=	O
adler32	function
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
s	pointer
->	O
status	int
=	O
BUSY_STATE	int
;	O
flush_pending	function
(	O
strm	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
pending	pointer
!=	O
0	int
)	O
{	O
s	pointer
->	O
last_flush	int
=	O
-	O
1	int
;	O
return	O
Z_OK	int
;	O
}	O
}	O
if	O
(	O
s	pointer
->	O
status	int
==	O
GZIP_STATE	int
)	O
{	O
strm	pointer
->	O
adler	long
=	O
crc32	function
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
31	int
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
139	int
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
8	int
)	O
;	O
if	O
(	O
s	pointer
->	O
gzhead	pointer
==	O
Z_NULL	int
)	O
{	O
put_byte	O
(	O
s	pointer
,	O
0	int
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
0	int
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
0	int
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
0	int
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
0	int
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
s	pointer
->	O
level	int
==	O
9	int
?	O
2	int
:	O
(	O
s	pointer
->	O
strategy	int
>=	O
Z_HUFFMAN_ONLY	int
||	O
s	pointer
->	O
level	int
<	O
2	int
?	O
4	int
:	O
0	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
OS_CODE	int
)	O
;	O
s	pointer
->	O
status	int
=	O
BUSY_STATE	int
;	O
flush_pending	function
(	O
strm	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
pending	pointer
!=	O
0	int
)	O
{	O
s	pointer
->	O
last_flush	int
=	O
-	O
1	int
;	O
return	O
Z_OK	int
;	O
}	O
}	O
else	O
{	O
put_byte	O
(	O
s	pointer
,	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
text	int
?	O
1	int
:	O
0	int
)	O
+	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
hcrc	int
?	O
2	int
:	O
0	int
)	O
+	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
extra	pointer
==	O
Z_NULL	int
?	O
0	int
:	O
4	int
)	O
+	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
name	pointer
==	O
Z_NULL	int
?	O
0	int
:	O
8	int
)	O
+	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
comment	pointer
==	O
Z_NULL	int
?	O
0	int
:	O
16	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
time	long
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
time	long
>>	O
8	int
)	O
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
time	long
>>	O
16	int
)	O
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
time	long
>>	O
24	int
)	O
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
s	pointer
->	O
level	int
==	O
9	int
?	O
2	int
:	O
(	O
s	pointer
->	O
strategy	int
>=	O
Z_HUFFMAN_ONLY	int
||	O
s	pointer
->	O
level	int
<	O
2	int
?	O
4	int
:	O
0	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
s	pointer
->	O
gzhead	pointer
->	O
os	int
&	O
0xff	int
)	O
;	O
if	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
extra	pointer
!=	O
Z_NULL	int
)	O
{	O
put_byte	O
(	O
s	pointer
,	O
s	pointer
->	O
gzhead	pointer
->	O
extra_len	int
&	O
0xff	int
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
extra_len	int
>>	O
8	int
)	O
&	O
0xff	int
)	O
;	O
}	O
if	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
hcrc	int
)	O
strm	pointer
->	O
adler	long
=	O
crc32	function
(	O
strm	pointer
->	O
adler	long
,	O
s	pointer
->	O
pending_buf	pointer
,	O
s	pointer
->	O
pending	pointer
)	O
;	O
s	pointer
->	O
gzindex	long
=	O
0	int
;	O
s	pointer
->	O
status	int
=	O
EXTRA_STATE	int
;	O
}	O
}	O
if	O
(	O
s	pointer
->	O
status	int
==	O
EXTRA_STATE	int
)	O
{	O
if	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
extra	pointer
!=	O
Z_NULL	int
)	O
{	O
ulg	long
beg	long
=	O
s	pointer
->	O
pending	pointer
;	O
uInt	int
left	int
=	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
extra_len	int
&	O
0xffff	int
)	O
-	O
s	pointer
->	O
gzindex	long
;	O
while	O
(	O
s	pointer
->	O
pending	pointer
+	O
left	int
>	O
s	pointer
->	O
pending_buf_size	long
)	O
{	O
uInt	int
copy	int
=	O
s	pointer
->	O
pending_buf_size	long
-	O
s	pointer
->	O
pending	pointer
;	O
zmemcpy	O
(	O
s	pointer
->	O
pending_buf	pointer
+	O
s	pointer
->	O
pending	pointer
,	O
s	pointer
->	O
gzhead	pointer
->	O
extra	pointer
+	O
s	pointer
->	O
gzindex	long
,	O
copy	int
)	O
;	O
s	pointer
->	O
pending	pointer
=	O
s	pointer
->	O
pending_buf_size	long
;	O
HCRC_UPDATE	O
(	O
beg	long
)	O
;	O
s	pointer
->	O
gzindex	long
+=	O
copy	int
;	O
flush_pending	function
(	O
strm	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
pending	pointer
!=	O
0	int
)	O
{	O
s	pointer
->	O
last_flush	int
=	O
-	O
1	int
;	O
return	O
Z_OK	int
;	O
}	O
beg	long
=	O
0	int
;	O
left	int
-=	O
copy	int
;	O
}	O
zmemcpy	O
(	O
s	pointer
->	O
pending_buf	pointer
+	O
s	pointer
->	O
pending	pointer
,	O
s	pointer
->	O
gzhead	pointer
->	O
extra	pointer
+	O
s	pointer
->	O
gzindex	long
,	O
left	int
)	O
;	O
s	pointer
->	O
pending	pointer
+=	O
left	int
;	O
HCRC_UPDATE	O
(	O
beg	long
)	O
;	O
s	pointer
->	O
gzindex	long
=	O
0	int
;	O
}	O
s	pointer
->	O
status	int
=	O
NAME_STATE	int
;	O
}	O
if	O
(	O
s	pointer
->	O
status	int
==	O
NAME_STATE	int
)	O
{	O
if	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
name	pointer
!=	O
Z_NULL	int
)	O
{	O
ulg	long
beg	long
=	O
s	pointer
->	O
pending	pointer
;	O
int	O
val	int
;	O
do	O
{	O
if	O
(	O
s	pointer
->	O
pending	pointer
==	O
s	pointer
->	O
pending_buf_size	long
)	O
{	O
HCRC_UPDATE	O
(	O
beg	long
)	O
;	O
flush_pending	function
(	O
strm	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
pending	pointer
!=	O
0	int
)	O
{	O
s	pointer
->	O
last_flush	int
=	O
-	O
1	int
;	O
return	O
Z_OK	int
;	O
}	O
beg	long
=	O
0	int
;	O
}	O
val	int
=	O
s	pointer
->	O
gzhead	pointer
->	O
name	pointer
[	O
s	pointer
->	O
gzindex	long
++	O
]	O
;	O
put_byte	O
(	O
s	pointer
,	O
val	int
)	O
;	O
}	O
while	O
(	O
val	int
!=	O
0	int
)	O
;	O
HCRC_UPDATE	O
(	O
beg	long
)	O
;	O
s	pointer
->	O
gzindex	long
=	O
0	int
;	O
}	O
s	pointer
->	O
status	int
=	O
COMMENT_STATE	int
;	O
}	O
if	O
(	O
s	pointer
->	O
status	int
==	O
COMMENT_STATE	int
)	O
{	O
if	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
comment	pointer
!=	O
Z_NULL	int
)	O
{	O
ulg	long
beg	long
=	O
s	pointer
->	O
pending	pointer
;	O
int	O
val	int
;	O
do	O
{	O
if	O
(	O
s	pointer
->	O
pending	pointer
==	O
s	pointer
->	O
pending_buf_size	long
)	O
{	O
HCRC_UPDATE	O
(	O
beg	long
)	O
;	O
flush_pending	function
(	O
strm	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
pending	pointer
!=	O
0	int
)	O
{	O
s	pointer
->	O
last_flush	int
=	O
-	O
1	int
;	O
return	O
Z_OK	int
;	O
}	O
beg	long
=	O
0	int
;	O
}	O
val	int
=	O
s	pointer
->	O
gzhead	pointer
->	O
comment	pointer
[	O
s	pointer
->	O
gzindex	long
++	O
]	O
;	O
put_byte	O
(	O
s	pointer
,	O
val	int
)	O
;	O
}	O
while	O
(	O
val	int
!=	O
0	int
)	O
;	O
HCRC_UPDATE	O
(	O
beg	long
)	O
;	O
}	O
s	pointer
->	O
status	int
=	O
HCRC_STATE	int
;	O
}	O
if	O
(	O
s	pointer
->	O
status	int
==	O
HCRC_STATE	int
)	O
{	O
if	O
(	O
s	pointer
->	O
gzhead	pointer
->	O
hcrc	int
)	O
{	O
if	O
(	O
s	pointer
->	O
pending	pointer
+	O
2	int
>	O
s	pointer
->	O
pending_buf_size	long
)	O
{	O
flush_pending	function
(	O
strm	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
pending	pointer
!=	O
0	int
)	O
{	O
s	pointer
->	O
last_flush	int
=	O
-	O
1	int
;	O
return	O
Z_OK	int
;	O
}	O
}	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
strm	pointer
->	O
adler	long
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
(	O
strm	pointer
->	O
adler	long
>>	O
8	int
)	O
&	O
0xff	int
)	O
)	O
;	O
strm	pointer
->	O
adler	long
=	O
crc32	function
(	O
0L	int
,	O
Z_NULL	int
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
status	int
=	O
BUSY_STATE	int
;	O
flush_pending	function
(	O
strm	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
pending	pointer
!=	O
0	int
)	O
{	O
s	pointer
->	O
last_flush	int
=	O
-	O
1	int
;	O
return	O
Z_OK	int
;	O
}	O
}	O
if	O
(	O
strm	pointer
->	O
avail_in	int
!=	O
0	int
||	O
s	pointer
->	O
lookahead	int
!=	O
0	int
||	O
(	O
flush	int
!=	O
Z_NO_FLUSH	int
&&	O
s	pointer
->	O
status	int
!=	O
FINISH_STATE	int
)	O
)	O
{	O
block_state	enum
bstate	enum
;	O
bstate	enum
=	O
s	pointer
->	O
level	int
==	O
0	int
?	O
deflate_stored	function
(	O
s	pointer
,	O
flush	int
)	O
:	O
s	pointer
->	O
strategy	int
==	O
Z_HUFFMAN_ONLY	int
?	O
deflate_huff	function
(	O
s	pointer
,	O
flush	int
)	O
:	O
s	pointer
->	O
strategy	int
==	O
Z_RLE	int
?	O
deflate_rle	function
(	O
s	pointer
,	O
flush	int
)	O
:	O
(	O
*	O
(	O
configuration_table	array
[	O
s	pointer
->	O
level	int
]	O
.	O
func	pointer
)	O
)	O
(	O
s	pointer
,	O
flush	int
)	O
;	O
if	O
(	O
bstate	enum
==	O
finish_started	int
||	O
bstate	enum
==	O
finish_done	int
)	O
{	O
s	pointer
->	O
status	int
=	O
FINISH_STATE	int
;	O
}	O
if	O
(	O
bstate	enum
==	O
need_more	int
||	O
bstate	enum
==	O
finish_started	int
)	O
{	O
if	O
(	O
strm	pointer
->	O
avail_out	int
==	O
0	int
)	O
{	O
s	pointer
->	O
last_flush	int
=	O
-	O
1	int
;	O
}	O
return	O
Z_OK	int
;	O
}	O
if	O
(	O
bstate	enum
==	O
block_done	int
)	O
{	O
if	O
(	O
flush	int
==	O
Z_PARTIAL_FLUSH	int
)	O
{	O
_tr_align	function
(	O
s	pointer
)	O
;	O
}	O
else	O
if	O
(	O
flush	int
!=	O
Z_BLOCK	int
)	O
{	O
_tr_stored_block	function
(	O
s	pointer
,	O
(	O
char	O
*	O
)	O
0	int
,	O
0L	int
,	O
0	int
)	O
;	O
if	O
(	O
flush	int
==	O
Z_FULL_FLUSH	int
)	O
{	O
CLEAR_HASH	O
(	O
s	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
lookahead	int
==	O
0	int
)	O
{	O
s	pointer
->	O
strstart	int
=	O
0	int
;	O
s	pointer
->	O
block_start	long
=	O
0L	int
;	O
s	pointer
->	O
insert	int
=	O
0	int
;	O
}	O
}	O
}	O
flush_pending	function
(	O
strm	pointer
)	O
;	O
if	O
(	O
strm	pointer
->	O
avail_out	int
==	O
0	int
)	O
{	O
s	pointer
->	O
last_flush	int
=	O
-	O
1	int
;	O
return	O
Z_OK	int
;	O
}	O
}	O
}	O
if	O
(	O
flush	int
!=	O
Z_FINISH	int
)	O
return	O
Z_OK	int
;	O
if	O
(	O
s	pointer
->	O
wrap	int
<=	O
0	int
)	O
return	O
Z_STREAM_END	int
;	O
if	O
(	O
s	pointer
->	O
wrap	int
==	O
2	int
)	O
{	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
strm	pointer
->	O
adler	long
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
(	O
strm	pointer
->	O
adler	long
>>	O
8	int
)	O
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
(	O
strm	pointer
->	O
adler	long
>>	O
16	int
)	O
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
(	O
strm	pointer
->	O
adler	long
>>	O
24	int
)	O
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
strm	pointer
->	O
total_in	long
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
(	O
strm	pointer
->	O
total_in	long
>>	O
8	int
)	O
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
(	O
strm	pointer
->	O
total_in	long
>>	O
16	int
)	O
&	O
0xff	int
)	O
)	O
;	O
put_byte	O
(	O
s	pointer
,	O
(	O
Byte	char
)	O
(	O
(	O
strm	pointer
->	O
total_in	long
>>	O
24	int
)	O
&	O
0xff	int
)	O
)	O
;	O
}	O
else	O
{	O
putShortMSB	function
(	O
s	pointer
,	O
(	O
uInt	int
)	O
(	O
strm	pointer
->	O
adler	long
>>	O
16	int
)	O
)	O
;	O
putShortMSB	function
(	O
s	pointer
,	O
(	O
uInt	int
)	O
(	O
strm	pointer
->	O
adler	long
&	O
0xffff	int
)	O
)	O
;	O
}	O
flush_pending	function
(	O
strm	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
wrap	int
>	O
0	int
)	O
s	pointer
->	O
wrap	int
=	O
-	O
s	pointer
->	O
wrap	int
;	O
return	O
s	pointer
->	O
pending	pointer
!=	O
0	int
?	O
Z_OK	int
:	O
Z_STREAM_END	int
;	O
}	O
int	O
ZEXPORT	O
deflateEnd	function
(	O
strm	pointer
)	O
z_streamp	pointer
strm	pointer
;	O
{	O
int	O
status	int
;	O
if	O
(	O
deflateStateCheck	function
(	O
strm	pointer
)	O
)	O
return	O
Z_STREAM_ERROR	O
;	O
status	int
=	O
strm	pointer
->	O
state	pointer
->	O
status	int
;	O
TRY_FREE	O
(	O
strm	pointer
,	O
strm	pointer
->	O
state	pointer
->	O
pending_buf	pointer
)	O
;	O
TRY_FREE	O
(	O
strm	pointer
,	O
strm	pointer
->	O
state	pointer
->	O
head	pointer
)	O
;	O
TRY_FREE	O
(	O
strm	pointer
,	O
strm	pointer
->	O
state	pointer
->	O
prev	pointer
)	O
;	O
TRY_FREE	O
(	O
strm	pointer
,	O
strm	pointer
->	O
state	pointer
->	O
window	pointer
)	O
;	O
ZFREE	O
(	O
strm	pointer
,	O
strm	pointer
->	O
state	pointer
)	O
;	O
strm	pointer
->	O
state	pointer
=	O
Z_NULL	int
;	O
return	O
status	int
==	O
BUSY_STATE	int
?	O
Z_DATA_ERROR	O
:	O
Z_OK	int
;	O
}	O
int	O
ZEXPORT	O
deflateCopy	function
(	O
dest	pointer
,	O
source	pointer
)	O
z_streamp	pointer
dest	pointer
;	O
z_streamp	pointer
source	pointer
;	O
{	O
deflate_state	struct
*	O
ds	pointer
;	O
deflate_state	struct
*	O
ss	pointer
;	O
ushf	short
*	O
overlay	pointer
;	O
if	O
(	O
deflateStateCheck	function
(	O
source	pointer
)	O
||	O
dest	pointer
==	O
Z_NULL	int
)	O
{	O
return	O
Z_STREAM_ERROR	O
;	O
}	O
ss	pointer
=	O
source	pointer
->	O
state	pointer
;	O
zmemcpy	O
(	O
(	O
voidpf	pointer
)	O
dest	pointer
,	O
(	O
voidpf	pointer
)	O
source	pointer
,	O
sizeof	O
(	O
z_stream	struct
)	O
)	O
;	O
ds	pointer
=	O
(	O
deflate_state	struct
*	O
)	O
ZALLOC	O
(	O
dest	pointer
,	O
1	int
,	O
sizeof	O
(	O
deflate_state	struct
)	O
)	O
;	O
if	O
(	O
ds	pointer
==	O
Z_NULL	int
)	O
return	O
Z_MEM_ERROR	O
;	O
dest	pointer
->	O
state	pointer
=	O
(	O
struct	O
internal_state	struct
FAR	O
*	O
)	O
ds	pointer
;	O
zmemcpy	O
(	O
(	O
voidpf	pointer
)	O
ds	pointer
,	O
(	O
voidpf	pointer
)	O
ss	pointer
,	O
sizeof	O
(	O
deflate_state	struct
)	O
)	O
;	O
ds	pointer
->	O
strm	pointer
=	O
dest	pointer
;	O
ds	pointer
->	O
window	pointer
=	O
(	O
Bytef	char
*	O
)	O
ZALLOC	O
(	O
dest	pointer
,	O
ds	pointer
->	O
w_size	int
,	O
2	int
*	O
sizeof	O
(	O
Byte	char
)	O
)	O
;	O
ds	pointer
->	O
prev	pointer
=	O
(	O
Posf	short
*	O
)	O
ZALLOC	O
(	O
dest	pointer
,	O
ds	pointer
->	O
w_size	int
,	O
sizeof	O
(	O
Pos	short
)	O
)	O
;	O
ds	pointer
->	O
head	pointer
=	O
(	O
Posf	short
*	O
)	O
ZALLOC	O
(	O
dest	pointer
,	O
ds	pointer
->	O
hash_size	int
,	O
sizeof	O
(	O
Pos	short
)	O
)	O
;	O
overlay	pointer
=	O
(	O
ushf	short
*	O
)	O
ZALLOC	O
(	O
dest	pointer
,	O
ds	pointer
->	O
lit_bufsize	int
,	O
sizeof	O
(	O
ush	short
)	O
+	O
2	int
)	O
;	O
ds	pointer
->	O
pending_buf	pointer
=	O
(	O
uchf	char
*	O
)	O
overlay	pointer
;	O
if	O
(	O
ds	pointer
->	O
window	pointer
==	O
Z_NULL	int
||	O
ds	pointer
->	O
prev	pointer
==	O
Z_NULL	int
||	O
ds	pointer
->	O
head	pointer
==	O
Z_NULL	int
||	O
ds	pointer
->	O
pending_buf	pointer
==	O
Z_NULL	int
)	O
{	O
deflateEnd	function
(	O
dest	pointer
)	O
;	O
return	O
Z_MEM_ERROR	O
;	O
}	O
zmemcpy	O
(	O
ds	pointer
->	O
window	pointer
,	O
ss	pointer
->	O
window	pointer
,	O
ds	pointer
->	O
w_size	int
*	O
2	int
*	O
sizeof	O
(	O
Byte	char
)	O
)	O
;	O
zmemcpy	O
(	O
(	O
voidpf	pointer
)	O
ds	pointer
->	O
prev	pointer
,	O
(	O
voidpf	pointer
)	O
ss	pointer
->	O
prev	pointer
,	O
ds	pointer
->	O
w_size	int
*	O
sizeof	O
(	O
Pos	short
)	O
)	O
;	O
zmemcpy	O
(	O
(	O
voidpf	pointer
)	O
ds	pointer
->	O
head	pointer
,	O
(	O
voidpf	pointer
)	O
ss	pointer
->	O
head	pointer
,	O
ds	pointer
->	O
hash_size	int
*	O
sizeof	O
(	O
Pos	short
)	O
)	O
;	O
zmemcpy	O
(	O
ds	pointer
->	O
pending_buf	pointer
,	O
ss	pointer
->	O
pending_buf	pointer
,	O
(	O
uInt	int
)	O
ds	pointer
->	O
pending_buf_size	long
)	O
;	O
ds	pointer
->	O
pending_out	pointer
=	O
ds	pointer
->	O
pending_buf	pointer
+	O
(	O
ss	pointer
->	O
pending_out	pointer
-	O
ss	pointer
->	O
pending_buf	pointer
)	O
;	O
ds	pointer
->	O
d_buf	pointer
=	O
overlay	pointer
+	O
ds	pointer
->	O
lit_bufsize	int
/	O
sizeof	O
(	O
ush	short
)	O
;	O
ds	pointer
->	O
l_buf	pointer
=	O
ds	pointer
->	O
pending_buf	pointer
+	O
(	O
1	int
+	O
sizeof	O
(	O
ush	short
)	O
)	O
*	O
ds	pointer
->	O
lit_bufsize	int
;	O
ds	pointer
->	O
l_desc	struct
.	O
dyn_tree	pointer
=	O
ds	pointer
->	O
dyn_ltree	array
;	O
ds	pointer
->	O
d_desc	struct
.	O
dyn_tree	pointer
=	O
ds	pointer
->	O
dyn_dtree	array
;	O
ds	pointer
->	O
bl_desc	struct
.	O
dyn_tree	pointer
=	O
ds	pointer
->	O
bl_tree	array
;	O
return	O
Z_OK	int
;	O
}	O
local	O
unsigned	O
read_buf	function
(	O
strm	pointer
,	O
buf	pointer
,	O
size	int
)	O
z_streamp	pointer
strm	pointer
;	O
Bytef	char
*	O
buf	pointer
;	O
unsigned	O
size	int
;	O
{	O
unsigned	O
len	int
=	O
strm	pointer
->	O
avail_in	int
;	O
if	O
(	O
len	int
>	O
size	int
)	O
len	int
=	O
size	int
;	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
0	int
;	O
strm	pointer
->	O
avail_in	int
-=	O
len	int
;	O
zmemcpy	O
(	O
buf	pointer
,	O
strm	pointer
->	O
next_in	pointer
,	O
len	int
)	O
;	O
if	O
(	O
strm	pointer
->	O
state	pointer
->	O
wrap	int
==	O
1	int
)	O
{	O
strm	pointer
->	O
adler	long
=	O
adler32	function
(	O
strm	pointer
->	O
adler	long
,	O
buf	pointer
,	O
len	int
)	O
;	O
}	O
else	O
if	O
(	O
strm	pointer
->	O
state	pointer
->	O
wrap	int
==	O
2	int
)	O
{	O
strm	pointer
->	O
adler	long
=	O
crc32	function
(	O
strm	pointer
->	O
adler	long
,	O
buf	pointer
,	O
len	int
)	O
;	O
}	O
strm	pointer
->	O
next_in	pointer
+=	O
len	int
;	O
strm	pointer
->	O
total_in	long
+=	O
len	int
;	O
return	O
len	int
;	O
}	O
local	O
void	O
lm_init	function
(	O
s	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
{	O
s	pointer
->	O
window_size	long
=	O
(	O
ulg	long
)	O
2L	int
*	O
s	pointer
->	O
w_size	int
;	O
CLEAR_HASH	O
(	O
s	pointer
)	O
;	O
s	pointer
->	O
max_lazy_match	int
=	O
configuration_table	array
[	O
s	pointer
->	O
level	int
]	O
.	O
max_lazy	int
;	O
s	pointer
->	O
good_match	int
=	O
configuration_table	array
[	O
s	pointer
->	O
level	int
]	O
.	O
good_length	int
;	O
s	pointer
->	O
nice_match	int
=	O
configuration_table	array
[	O
s	pointer
->	O
level	int
]	O
.	O
nice_length	int
;	O
s	pointer
->	O
max_chain_length	int
=	O
configuration_table	array
[	O
s	pointer
->	O
level	int
]	O
.	O
max_chain	int
;	O
s	pointer
->	O
strstart	int
=	O
0	int
;	O
s	pointer
->	O
block_start	long
=	O
0L	int
;	O
s	pointer
->	O
lookahead	int
=	O
0	int
;	O
s	pointer
->	O
insert	int
=	O
0	int
;	O
s	pointer
->	O
match_length	int
=	O
s	pointer
->	O
prev_length	int
=	O
MIN_MATCH	int
-	O
1	int
;	O
s	pointer
->	O
match_available	int
=	O
0	int
;	O
s	pointer
->	O
ins_h	int
=	O
0	int
;	O
}	O
local	O
uInt	int
longest_match	function
(	O
s	pointer
,	O
cur_match	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
IPos	int
cur_match	int
;	O
{	O
unsigned	O
chain_length	int
=	O
s	pointer
->	O
max_chain_length	int
;	O
register	O
Bytef	char
*	O
scan	pointer
=	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
strstart	int
;	O
register	O
Bytef	char
*	O
match	pointer
;	O
register	O
int	O
len	int
;	O
int	O
best_len	int
=	O
(	O
int	O
)	O
s	pointer
->	O
prev_length	int
;	O
int	O
nice_match	int
=	O
s	pointer
->	O
nice_match	int
;	O
IPos	int
limit	int
=	O
s	pointer
->	O
strstart	int
>	O
(	O
IPos	int
)	O
MAX_DIST	O
(	O
s	pointer
)	O
?	O
s	pointer
->	O
strstart	int
-	O
(	O
IPos	int
)	O
MAX_DIST	O
(	O
s	pointer
)	O
:	O
NIL	int
;	O
Posf	short
*	O
prev	pointer
=	O
s	pointer
->	O
prev	pointer
;	O
uInt	int
wmask	int
=	O
s	pointer
->	O
w_mask	int
;	O
register	O
Bytef	char
*	O
strend	pointer
=	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
strstart	int
+	O
MAX_MATCH	int
;	O
register	O
Byte	char
scan_end1	char
=	O
scan	pointer
[	O
best_len	int
-	O
1	int
]	O
;	O
register	O
Byte	char
scan_end	char
=	O
scan	pointer
[	O
best_len	int
]	O
;	O
Assert	O
(	O
s	pointer
->	O
hash_bits	int
>=	O
8	int
&&	O
MAX_MATCH	int
==	O
258	int
,	O
"Code too clever"	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
prev_length	int
>=	O
s	pointer
->	O
good_match	int
)	O
{	O
chain_length	int
>>=	O
2	int
;	O
}	O
if	O
(	O
(	O
uInt	int
)	O
nice_match	int
>	O
s	pointer
->	O
lookahead	int
)	O
nice_match	int
=	O
(	O
int	O
)	O
s	pointer
->	O
lookahead	int
;	O
Assert	O
(	O
(	O
ulg	long
)	O
s	pointer
->	O
strstart	int
<=	O
s	pointer
->	O
window_size	long
-	O
MIN_LOOKAHEAD	O
,	O
"need lookahead"	pointer
)	O
;	O
do	O
{	O
Assert	O
(	O
cur_match	int
<	O
s	pointer
->	O
strstart	int
,	O
"no future"	pointer
)	O
;	O
match	pointer
=	O
s	pointer
->	O
window	pointer
+	O
cur_match	int
;	O
if	O
(	O
match	pointer
[	O
best_len	int
]	O
!=	O
scan_end	char
||	O
match	pointer
[	O
best_len	int
-	O
1	int
]	O
!=	O
scan_end1	char
||	O
*	O
match	pointer
!=	O
*	O
scan	pointer
||	O
*	O
++	O
match	pointer
!=	O
scan	pointer
[	O
1	int
]	O
)	O
continue	O
;	O
scan	pointer
+=	O
2	int
,	O
match	pointer
++	O
;	O
Assert	O
(	O
*	O
scan	pointer
==	O
*	O
match	pointer
,	O
"match[2]?"	pointer
)	O
;	O
do	O
{	O
}	O
while	O
(	O
*	O
++	O
scan	pointer
==	O
*	O
++	O
match	pointer
&&	O
*	O
++	O
scan	pointer
==	O
*	O
++	O
match	pointer
&&	O
*	O
++	O
scan	pointer
==	O
*	O
++	O
match	pointer
&&	O
*	O
++	O
scan	pointer
==	O
*	O
++	O
match	pointer
&&	O
*	O
++	O
scan	pointer
==	O
*	O
++	O
match	pointer
&&	O
*	O
++	O
scan	pointer
==	O
*	O
++	O
match	pointer
&&	O
*	O
++	O
scan	pointer
==	O
*	O
++	O
match	pointer
&&	O
*	O
++	O
scan	pointer
==	O
*	O
++	O
match	pointer
&&	O
scan	pointer
<	O
strend	pointer
)	O
;	O
Assert	O
(	O
scan	pointer
<=	O
s	pointer
->	O
window	pointer
+	O
(	O
unsigned	O
)	O
(	O
s	pointer
->	O
window_size	long
-	O
1	int
)	O
,	O
"wild scan"	pointer
)	O
;	O
len	int
=	O
MAX_MATCH	int
-	O
(	O
int	O
)	O
(	O
strend	pointer
-	O
scan	pointer
)	O
;	O
scan	pointer
=	O
strend	pointer
-	O
MAX_MATCH	int
;	O
if	O
(	O
len	int
>	O
best_len	int
)	O
{	O
s	pointer
->	O
match_start	int
=	O
cur_match	int
;	O
best_len	int
=	O
len	int
;	O
if	O
(	O
len	int
>=	O
nice_match	int
)	O
break	O
;	O
scan_end1	char
=	O
scan	pointer
[	O
best_len	int
-	O
1	int
]	O
;	O
scan_end	char
=	O
scan	pointer
[	O
best_len	int
]	O
;	O
}	O
}	O
while	O
(	O
(	O
cur_match	int
=	O
prev	pointer
[	O
cur_match	int
&	O
wmask	int
]	O
)	O
>	O
limit	int
&&	O
--	O
chain_length	int
!=	O
0	int
)	O
;	O
if	O
(	O
(	O
uInt	int
)	O
best_len	int
<=	O
s	pointer
->	O
lookahead	int
)	O
return	O
(	O
uInt	int
)	O
best_len	int
;	O
return	O
s	pointer
->	O
lookahead	int
;	O
}	O
local	O
void	O
fill_window	function
(	O
s	pointer
)	O
deflate_state	struct
*	O
s	pointer
;	O
{	O
unsigned	O
n	int
;	O
unsigned	O
more	int
;	O
uInt	int
wsize	int
=	O
s	pointer
->	O
w_size	int
;	O
Assert	O
(	O
s	pointer
->	O
lookahead	int
<	O
MIN_LOOKAHEAD	O
,	O
"already enough lookahead"	pointer
)	O
;	O
do	O
{	O
more	int
=	O
(	O
unsigned	O
)	O
(	O
s	pointer
->	O
window_size	long
-	O
(	O
ulg	long
)	O
s	pointer
->	O
lookahead	int
-	O
(	O
ulg	long
)	O
s	pointer
->	O
strstart	int
)	O
;	O
if	O
(	O
sizeof	O
(	O
int	O
)	O
<=	O
2	int
)	O
{	O
if	O
(	O
more	int
==	O
0	int
&&	O
s	pointer
->	O
strstart	int
==	O
0	int
&&	O
s	pointer
->	O
lookahead	int
==	O
0	int
)	O
{	O
more	int
=	O
wsize	int
;	O
}	O
else	O
if	O
(	O
more	int
==	O
(	O
unsigned	O
)	O
(	O
-	O
1	int
)	O
)	O
{	O
more	int
--	O
;	O
}	O
}	O
if	O
(	O
s	pointer
->	O
strstart	int
>=	O
wsize	int
+	O
MAX_DIST	O
(	O
s	pointer
)	O
)	O
{	O
zmemcpy	O
(	O
s	pointer
->	O
window	pointer
,	O
s	pointer
->	O
window	pointer
+	O
wsize	int
,	O
(	O
unsigned	O
)	O
wsize	int
-	O
more	int
)	O
;	O
s	pointer
->	O
match_start	int
-=	O
wsize	int
;	O
s	pointer
->	O
strstart	int
-=	O
wsize	int
;	O
s	pointer
->	O
block_start	long
-=	O
(	O
long	O
)	O
wsize	int
;	O
slide_hash	function
(	O
s	pointer
)	O
;	O
more	int
+=	O
wsize	int
;	O
}	O
if	O
(	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
==	O
0	int
)	O
break	O
;	O
Assert	O
(	O
more	int
>=	O
2	int
,	O
"more < 2"	pointer
)	O
;	O
n	int
=	O
read_buf	function
(	O
s	pointer
->	O
strm	pointer
,	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
strstart	int
+	O
s	pointer
->	O
lookahead	int
,	O
more	int
)	O
;	O
s	pointer
->	O
lookahead	int
+=	O
n	int
;	O
if	O
(	O
s	pointer
->	O
lookahead	int
+	O
s	pointer
->	O
insert	int
>=	O
MIN_MATCH	int
)	O
{	O
uInt	int
str	int
=	O
s	pointer
->	O
strstart	int
-	O
s	pointer
->	O
insert	int
;	O
s	pointer
->	O
ins_h	int
=	O
s	pointer
->	O
window	pointer
[	O
str	int
]	O
;	O
UPDATE_HASH	O
(	O
s	pointer
,	O
s	pointer
->	O
ins_h	int
,	O
s	pointer
->	O
window	pointer
[	O
str	int
+	O
1	int
]	O
)	O
;	O
while	O
(	O
s	pointer
->	O
insert	int
)	O
{	O
UPDATE_HASH	O
(	O
s	pointer
,	O
s	pointer
->	O
ins_h	int
,	O
s	pointer
->	O
window	pointer
[	O
str	int
+	O
MIN_MATCH	int
-	O
1	int
]	O
)	O
;	O
s	pointer
->	O
prev	pointer
[	O
str	int
&	O
s	pointer
->	O
w_mask	int
]	O
=	O
s	pointer
->	O
head	pointer
[	O
s	pointer
->	O
ins_h	int
]	O
;	O
s	pointer
->	O
head	pointer
[	O
s	pointer
->	O
ins_h	int
]	O
=	O
(	O
Pos	short
)	O
str	int
;	O
str	int
++	O
;	O
s	pointer
->	O
insert	int
--	O
;	O
if	O
(	O
s	pointer
->	O
lookahead	int
+	O
s	pointer
->	O
insert	int
<	O
MIN_MATCH	int
)	O
break	O
;	O
}	O
}	O
}	O
while	O
(	O
s	pointer
->	O
lookahead	int
<	O
MIN_LOOKAHEAD	O
&&	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
!=	O
0	int
)	O
;	O
if	O
(	O
s	pointer
->	O
high_water	long
<	O
s	pointer
->	O
window_size	long
)	O
{	O
ulg	long
curr	long
=	O
s	pointer
->	O
strstart	int
+	O
(	O
ulg	long
)	O
(	O
s	pointer
->	O
lookahead	int
)	O
;	O
ulg	long
init	long
;	O
if	O
(	O
s	pointer
->	O
high_water	long
<	O
curr	long
)	O
{	O
init	long
=	O
s	pointer
->	O
window_size	long
-	O
curr	long
;	O
if	O
(	O
init	long
>	O
WIN_INIT	O
)	O
init	long
=	O
WIN_INIT	O
;	O
zmemzero	O
(	O
s	pointer
->	O
window	pointer
+	O
curr	long
,	O
(	O
unsigned	O
)	O
init	long
)	O
;	O
s	pointer
->	O
high_water	long
=	O
curr	long
+	O
init	long
;	O
}	O
else	O
if	O
(	O
s	pointer
->	O
high_water	long
<	O
(	O
ulg	long
)	O
curr	long
+	O
WIN_INIT	O
)	O
{	O
init	long
=	O
(	O
ulg	long
)	O
curr	long
+	O
WIN_INIT	O
-	O
s	pointer
->	O
high_water	long
;	O
if	O
(	O
init	long
>	O
s	pointer
->	O
window_size	long
-	O
s	pointer
->	O
high_water	long
)	O
init	long
=	O
s	pointer
->	O
window_size	long
-	O
s	pointer
->	O
high_water	long
;	O
zmemzero	O
(	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
high_water	long
,	O
(	O
unsigned	O
)	O
init	long
)	O
;	O
s	pointer
->	O
high_water	long
+=	O
init	long
;	O
}	O
}	O
Assert	O
(	O
(	O
ulg	long
)	O
s	pointer
->	O
strstart	int
<=	O
s	pointer
->	O
window_size	long
-	O
MIN_LOOKAHEAD	O
,	O
"not enough room for search"	pointer
)	O
;	O
}	O
local	O
block_state	enum
deflate_stored	function
(	O
s	pointer
,	O
flush	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
int	O
flush	int
;	O
{	O
unsigned	O
min_block	int
=	O
MIN	O
(	O
s	pointer
->	O
pending_buf_size	long
-	O
5	int
,	O
s	pointer
->	O
w_size	int
)	O
;	O
unsigned	O
len	int
,	O
left	int
,	O
have	int
,	O
last	int
=	O
0	int
;	O
unsigned	O
used	int
=	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
;	O
do	O
{	O
len	int
=	O
MAX_STORED	int
;	O
have	int
=	O
(	O
s	pointer
->	O
bi_valid	int
+	O
42	int
)	O
>>	O
3	int
;	O
if	O
(	O
s	pointer
->	O
strm	pointer
->	O
avail_out	int
<	O
have	int
)	O
break	O
;	O
have	int
=	O
s	pointer
->	O
strm	pointer
->	O
avail_out	int
-	O
have	int
;	O
left	int
=	O
s	pointer
->	O
strstart	int
-	O
s	pointer
->	O
block_start	long
;	O
if	O
(	O
len	int
>	O
(	O
ulg	long
)	O
left	int
+	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
)	O
len	int
=	O
left	int
+	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
;	O
if	O
(	O
len	int
>	O
have	int
)	O
len	int
=	O
have	int
;	O
if	O
(	O
len	int
<	O
min_block	int
&&	O
(	O
(	O
len	int
==	O
0	int
&&	O
flush	int
!=	O
Z_FINISH	int
)	O
||	O
flush	int
==	O
Z_NO_FLUSH	int
||	O
len	int
!=	O
left	int
+	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
)	O
)	O
break	O
;	O
last	int
=	O
flush	int
==	O
Z_FINISH	int
&&	O
len	int
==	O
left	int
+	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
?	O
1	int
:	O
0	int
;	O
_tr_stored_block	function
(	O
s	pointer
,	O
(	O
char	O
*	O
)	O
0	int
,	O
0L	int
,	O
last	int
)	O
;	O
s	pointer
->	O
pending_buf	pointer
[	O
s	pointer
->	O
pending	pointer
-	O
4	int
]	O
=	O
len	int
;	O
s	pointer
->	O
pending_buf	pointer
[	O
s	pointer
->	O
pending	pointer
-	O
3	int
]	O
=	O
len	int
>>	O
8	int
;	O
s	pointer
->	O
pending_buf	pointer
[	O
s	pointer
->	O
pending	pointer
-	O
2	int
]	O
=	O
~	O
len	int
;	O
s	pointer
->	O
pending_buf	pointer
[	O
s	pointer
->	O
pending	pointer
-	O
1	int
]	O
=	O
~	O
len	int
>>	O
8	int
;	O
flush_pending	function
(	O
s	pointer
->	O
strm	pointer
)	O
;	O
if	O
(	O
left	int
)	O
{	O
if	O
(	O
left	int
>	O
len	int
)	O
left	int
=	O
len	int
;	O
zmemcpy	O
(	O
s	pointer
->	O
strm	pointer
->	O
next_out	pointer
,	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
block_start	long
,	O
left	int
)	O
;	O
s	pointer
->	O
strm	pointer
->	O
next_out	pointer
+=	O
left	int
;	O
s	pointer
->	O
strm	pointer
->	O
avail_out	int
-=	O
left	int
;	O
s	pointer
->	O
strm	pointer
->	O
total_out	long
+=	O
left	int
;	O
s	pointer
->	O
block_start	long
+=	O
left	int
;	O
len	int
-=	O
left	int
;	O
}	O
if	O
(	O
len	int
)	O
{	O
read_buf	function
(	O
s	pointer
->	O
strm	pointer
,	O
s	pointer
->	O
strm	pointer
->	O
next_out	pointer
,	O
len	int
)	O
;	O
s	pointer
->	O
strm	pointer
->	O
next_out	pointer
+=	O
len	int
;	O
s	pointer
->	O
strm	pointer
->	O
avail_out	int
-=	O
len	int
;	O
s	pointer
->	O
strm	pointer
->	O
total_out	long
+=	O
len	int
;	O
}	O
}	O
while	O
(	O
last	int
==	O
0	int
)	O
;	O
used	int
-=	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
;	O
if	O
(	O
used	int
)	O
{	O
if	O
(	O
used	int
>=	O
s	pointer
->	O
w_size	int
)	O
{	O
s	pointer
->	O
matches	int
=	O
2	int
;	O
zmemcpy	O
(	O
s	pointer
->	O
window	pointer
,	O
s	pointer
->	O
strm	pointer
->	O
next_in	pointer
-	O
s	pointer
->	O
w_size	int
,	O
s	pointer
->	O
w_size	int
)	O
;	O
s	pointer
->	O
strstart	int
=	O
s	pointer
->	O
w_size	int
;	O
}	O
else	O
{	O
if	O
(	O
s	pointer
->	O
window_size	long
-	O
s	pointer
->	O
strstart	int
<=	O
used	int
)	O
{	O
s	pointer
->	O
strstart	int
-=	O
s	pointer
->	O
w_size	int
;	O
zmemcpy	O
(	O
s	pointer
->	O
window	pointer
,	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
w_size	int
,	O
s	pointer
->	O
strstart	int
)	O
;	O
if	O
(	O
s	pointer
->	O
matches	int
<	O
2	int
)	O
s	pointer
->	O
matches	int
++	O
;	O
}	O
zmemcpy	O
(	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
strstart	int
,	O
s	pointer
->	O
strm	pointer
->	O
next_in	pointer
-	O
used	int
,	O
used	int
)	O
;	O
s	pointer
->	O
strstart	int
+=	O
used	int
;	O
}	O
s	pointer
->	O
block_start	long
=	O
s	pointer
->	O
strstart	int
;	O
s	pointer
->	O
insert	int
+=	O
MIN	O
(	O
used	int
,	O
s	pointer
->	O
w_size	int
-	O
s	pointer
->	O
insert	int
)	O
;	O
}	O
if	O
(	O
s	pointer
->	O
high_water	long
<	O
s	pointer
->	O
strstart	int
)	O
s	pointer
->	O
high_water	long
=	O
s	pointer
->	O
strstart	int
;	O
if	O
(	O
last	int
)	O
return	O
finish_done	int
;	O
if	O
(	O
flush	int
!=	O
Z_NO_FLUSH	int
&&	O
flush	int
!=	O
Z_FINISH	int
&&	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
==	O
0	int
&&	O
(	O
long	O
)	O
s	pointer
->	O
strstart	int
==	O
s	pointer
->	O
block_start	long
)	O
return	O
block_done	int
;	O
have	int
=	O
s	pointer
->	O
window_size	long
-	O
s	pointer
->	O
strstart	int
-	O
1	int
;	O
if	O
(	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
>	O
have	int
&&	O
s	pointer
->	O
block_start	long
>=	O
(	O
long	O
)	O
s	pointer
->	O
w_size	int
)	O
{	O
s	pointer
->	O
block_start	long
-=	O
s	pointer
->	O
w_size	int
;	O
s	pointer
->	O
strstart	int
-=	O
s	pointer
->	O
w_size	int
;	O
zmemcpy	O
(	O
s	pointer
->	O
window	pointer
,	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
w_size	int
,	O
s	pointer
->	O
strstart	int
)	O
;	O
if	O
(	O
s	pointer
->	O
matches	int
<	O
2	int
)	O
s	pointer
->	O
matches	int
++	O
;	O
have	int
+=	O
s	pointer
->	O
w_size	int
;	O
}	O
if	O
(	O
have	int
>	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
)	O
have	int
=	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
;	O
if	O
(	O
have	int
)	O
{	O
read_buf	function
(	O
s	pointer
->	O
strm	pointer
,	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
strstart	int
,	O
have	int
)	O
;	O
s	pointer
->	O
strstart	int
+=	O
have	int
;	O
}	O
if	O
(	O
s	pointer
->	O
high_water	long
<	O
s	pointer
->	O
strstart	int
)	O
s	pointer
->	O
high_water	long
=	O
s	pointer
->	O
strstart	int
;	O
have	int
=	O
(	O
s	pointer
->	O
bi_valid	int
+	O
42	int
)	O
>>	O
3	int
;	O
have	int
=	O
MIN	O
(	O
s	pointer
->	O
pending_buf_size	long
-	O
have	int
,	O
MAX_STORED	int
)	O
;	O
min_block	int
=	O
MIN	O
(	O
have	int
,	O
s	pointer
->	O
w_size	int
)	O
;	O
left	int
=	O
s	pointer
->	O
strstart	int
-	O
s	pointer
->	O
block_start	long
;	O
if	O
(	O
left	int
>=	O
min_block	int
||	O
(	O
(	O
left	int
||	O
flush	int
==	O
Z_FINISH	int
)	O
&&	O
flush	int
!=	O
Z_NO_FLUSH	int
&&	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
==	O
0	int
&&	O
left	int
<=	O
have	int
)	O
)	O
{	O
len	int
=	O
MIN	O
(	O
left	int
,	O
have	int
)	O
;	O
last	int
=	O
flush	int
==	O
Z_FINISH	int
&&	O
s	pointer
->	O
strm	pointer
->	O
avail_in	int
==	O
0	int
&&	O
len	int
==	O
left	int
?	O
1	int
:	O
0	int
;	O
_tr_stored_block	function
(	O
s	pointer
,	O
(	O
charf	char
*	O
)	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
block_start	long
,	O
len	int
,	O
last	int
)	O
;	O
s	pointer
->	O
block_start	long
+=	O
len	int
;	O
flush_pending	function
(	O
s	pointer
->	O
strm	pointer
)	O
;	O
}	O
return	O
last	int
?	O
finish_started	int
:	O
need_more	int
;	O
}	O
local	O
block_state	enum
deflate_fast	function
(	O
s	pointer
,	O
flush	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
int	O
flush	int
;	O
{	O
IPos	int
hash_head	int
;	O
int	O
bflush	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
s	pointer
->	O
lookahead	int
<	O
MIN_LOOKAHEAD	O
)	O
{	O
fill_window	function
(	O
s	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
lookahead	int
<	O
MIN_LOOKAHEAD	O
&&	O
flush	int
==	O
Z_NO_FLUSH	int
)	O
{	O
return	O
need_more	int
;	O
}	O
if	O
(	O
s	pointer
->	O
lookahead	int
==	O
0	int
)	O
break	O
;	O
}	O
hash_head	int
=	O
NIL	int
;	O
if	O
(	O
s	pointer
->	O
lookahead	int
>=	O
MIN_MATCH	int
)	O
{	O
INSERT_STRING	O
(	O
s	pointer
,	O
s	pointer
->	O
strstart	int
,	O
hash_head	int
)	O
;	O
}	O
if	O
(	O
hash_head	int
!=	O
NIL	int
&&	O
s	pointer
->	O
strstart	int
-	O
hash_head	int
<=	O
MAX_DIST	O
(	O
s	pointer
)	O
)	O
{	O
s	pointer
->	O
match_length	int
=	O
longest_match	function
(	O
s	pointer
,	O
hash_head	int
)	O
;	O
}	O
if	O
(	O
s	pointer
->	O
match_length	int
>=	O
MIN_MATCH	int
)	O
{	O
check_match	O
(	O
s	pointer
,	O
s	pointer
->	O
strstart	int
,	O
s	pointer
->	O
match_start	int
,	O
s	pointer
->	O
match_length	int
)	O
;	O
_tr_tally_dist	O
(	O
s	pointer
,	O
s	pointer
->	O
strstart	int
-	O
s	pointer
->	O
match_start	int
,	O
s	pointer
->	O
match_length	int
-	O
MIN_MATCH	int
,	O
bflush	int
)	O
;	O
s	pointer
->	O
lookahead	int
-=	O
s	pointer
->	O
match_length	int
;	O
if	O
(	O
s	pointer
->	O
match_length	int
<=	O
s	pointer
->	O
max_insert_length	O
&&	O
s	pointer
->	O
lookahead	int
>=	O
MIN_MATCH	int
)	O
{	O
s	pointer
->	O
match_length	int
--	O
;	O
do	O
{	O
s	pointer
->	O
strstart	int
++	O
;	O
INSERT_STRING	O
(	O
s	pointer
,	O
s	pointer
->	O
strstart	int
,	O
hash_head	int
)	O
;	O
}	O
while	O
(	O
--	O
s	pointer
->	O
match_length	int
!=	O
0	int
)	O
;	O
s	pointer
->	O
strstart	int
++	O
;	O
}	O
else	O
{	O
s	pointer
->	O
strstart	int
+=	O
s	pointer
->	O
match_length	int
;	O
s	pointer
->	O
match_length	int
=	O
0	int
;	O
s	pointer
->	O
ins_h	int
=	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
]	O
;	O
UPDATE_HASH	O
(	O
s	pointer
,	O
s	pointer
->	O
ins_h	int
,	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
+	O
1	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"%c"	pointer
,	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
]	O
)	O
)	O
;	O
_tr_tally_lit	O
(	O
s	pointer
,	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
]	O
,	O
bflush	int
)	O
;	O
s	pointer
->	O
lookahead	int
--	O
;	O
s	pointer
->	O
strstart	int
++	O
;	O
}	O
if	O
(	O
bflush	int
)	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
insert	int
=	O
s	pointer
->	O
strstart	int
<	O
MIN_MATCH	int
-	O
1	int
?	O
s	pointer
->	O
strstart	int
:	O
MIN_MATCH	int
-	O
1	int
;	O
if	O
(	O
flush	int
==	O
Z_FINISH	int
)	O
{	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
1	int
)	O
;	O
return	O
finish_done	int
;	O
}	O
if	O
(	O
s	pointer
->	O
last_lit	int
)	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
0	int
)	O
;	O
return	O
block_done	int
;	O
}	O
local	O
block_state	enum
deflate_slow	function
(	O
s	pointer
,	O
flush	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
int	O
flush	int
;	O
{	O
IPos	int
hash_head	int
;	O
int	O
bflush	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
s	pointer
->	O
lookahead	int
<	O
MIN_LOOKAHEAD	O
)	O
{	O
fill_window	function
(	O
s	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
lookahead	int
<	O
MIN_LOOKAHEAD	O
&&	O
flush	int
==	O
Z_NO_FLUSH	int
)	O
{	O
return	O
need_more	int
;	O
}	O
if	O
(	O
s	pointer
->	O
lookahead	int
==	O
0	int
)	O
break	O
;	O
}	O
hash_head	int
=	O
NIL	int
;	O
if	O
(	O
s	pointer
->	O
lookahead	int
>=	O
MIN_MATCH	int
)	O
{	O
INSERT_STRING	O
(	O
s	pointer
,	O
s	pointer
->	O
strstart	int
,	O
hash_head	int
)	O
;	O
}	O
s	pointer
->	O
prev_length	int
=	O
s	pointer
->	O
match_length	int
,	O
s	pointer
->	O
prev_match	int
=	O
s	pointer
->	O
match_start	int
;	O
s	pointer
->	O
match_length	int
=	O
MIN_MATCH	int
-	O
1	int
;	O
if	O
(	O
hash_head	int
!=	O
NIL	int
&&	O
s	pointer
->	O
prev_length	int
<	O
s	pointer
->	O
max_lazy_match	int
&&	O
s	pointer
->	O
strstart	int
-	O
hash_head	int
<=	O
MAX_DIST	O
(	O
s	pointer
)	O
)	O
{	O
s	pointer
->	O
match_length	int
=	O
longest_match	function
(	O
s	pointer
,	O
hash_head	int
)	O
;	O
if	O
(	O
s	pointer
->	O
match_length	int
<=	O
5	int
&&	O
(	O
s	pointer
->	O
strategy	int
==	O
Z_FILTERED	int
||	O
(	O
s	pointer
->	O
match_length	int
==	O
MIN_MATCH	int
&&	O
s	pointer
->	O
strstart	int
-	O
s	pointer
->	O
match_start	int
>	O
TOO_FAR	int
)	O
)	O
)	O
{	O
s	pointer
->	O
match_length	int
=	O
MIN_MATCH	int
-	O
1	int
;	O
}	O
}	O
if	O
(	O
s	pointer
->	O
prev_length	int
>=	O
MIN_MATCH	int
&&	O
s	pointer
->	O
match_length	int
<=	O
s	pointer
->	O
prev_length	int
)	O
{	O
uInt	int
max_insert	int
=	O
s	pointer
->	O
strstart	int
+	O
s	pointer
->	O
lookahead	int
-	O
MIN_MATCH	int
;	O
check_match	O
(	O
s	pointer
,	O
s	pointer
->	O
strstart	int
-	O
1	int
,	O
s	pointer
->	O
prev_match	int
,	O
s	pointer
->	O
prev_length	int
)	O
;	O
_tr_tally_dist	O
(	O
s	pointer
,	O
s	pointer
->	O
strstart	int
-	O
1	int
-	O
s	pointer
->	O
prev_match	int
,	O
s	pointer
->	O
prev_length	int
-	O
MIN_MATCH	int
,	O
bflush	int
)	O
;	O
s	pointer
->	O
lookahead	int
-=	O
s	pointer
->	O
prev_length	int
-	O
1	int
;	O
s	pointer
->	O
prev_length	int
-=	O
2	int
;	O
do	O
{	O
if	O
(	O
++	O
s	pointer
->	O
strstart	int
<=	O
max_insert	int
)	O
{	O
INSERT_STRING	O
(	O
s	pointer
,	O
s	pointer
->	O
strstart	int
,	O
hash_head	int
)	O
;	O
}	O
}	O
while	O
(	O
--	O
s	pointer
->	O
prev_length	int
!=	O
0	int
)	O
;	O
s	pointer
->	O
match_available	int
=	O
0	int
;	O
s	pointer
->	O
match_length	int
=	O
MIN_MATCH	int
-	O
1	int
;	O
s	pointer
->	O
strstart	int
++	O
;	O
if	O
(	O
bflush	int
)	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
s	pointer
->	O
match_available	int
)	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"%c"	pointer
,	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
-	O
1	int
]	O
)	O
)	O
;	O
_tr_tally_lit	O
(	O
s	pointer
,	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
-	O
1	int
]	O
,	O
bflush	int
)	O
;	O
if	O
(	O
bflush	int
)	O
{	O
FLUSH_BLOCK_ONLY	O
(	O
s	pointer
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
strstart	int
++	O
;	O
s	pointer
->	O
lookahead	int
--	O
;	O
if	O
(	O
s	pointer
->	O
strm	pointer
->	O
avail_out	int
==	O
0	int
)	O
return	O
need_more	int
;	O
}	O
else	O
{	O
s	pointer
->	O
match_available	int
=	O
1	int
;	O
s	pointer
->	O
strstart	int
++	O
;	O
s	pointer
->	O
lookahead	int
--	O
;	O
}	O
}	O
Assert	O
(	O
flush	int
!=	O
Z_NO_FLUSH	int
,	O
"no flush?"	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
match_available	int
)	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"%c"	pointer
,	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
-	O
1	int
]	O
)	O
)	O
;	O
_tr_tally_lit	O
(	O
s	pointer
,	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
-	O
1	int
]	O
,	O
bflush	int
)	O
;	O
s	pointer
->	O
match_available	int
=	O
0	int
;	O
}	O
s	pointer
->	O
insert	int
=	O
s	pointer
->	O
strstart	int
<	O
MIN_MATCH	int
-	O
1	int
?	O
s	pointer
->	O
strstart	int
:	O
MIN_MATCH	int
-	O
1	int
;	O
if	O
(	O
flush	int
==	O
Z_FINISH	int
)	O
{	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
1	int
)	O
;	O
return	O
finish_done	int
;	O
}	O
if	O
(	O
s	pointer
->	O
last_lit	int
)	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
0	int
)	O
;	O
return	O
block_done	int
;	O
}	O
local	O
block_state	enum
deflate_rle	function
(	O
s	pointer
,	O
flush	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
int	O
flush	int
;	O
{	O
int	O
bflush	int
;	O
uInt	int
prev	pointer
;	O
Bytef	char
*	O
scan	pointer
,	O
*	O
strend	pointer
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
s	pointer
->	O
lookahead	int
<=	O
MAX_MATCH	int
)	O
{	O
fill_window	function
(	O
s	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
lookahead	int
<=	O
MAX_MATCH	int
&&	O
flush	int
==	O
Z_NO_FLUSH	int
)	O
{	O
return	O
need_more	int
;	O
}	O
if	O
(	O
s	pointer
->	O
lookahead	int
==	O
0	int
)	O
break	O
;	O
}	O
s	pointer
->	O
match_length	int
=	O
0	int
;	O
if	O
(	O
s	pointer
->	O
lookahead	int
>=	O
MIN_MATCH	int
&&	O
s	pointer
->	O
strstart	int
>	O
0	int
)	O
{	O
scan	pointer
=	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
strstart	int
-	O
1	int
;	O
prev	pointer
=	O
*	O
scan	pointer
;	O
if	O
(	O
prev	pointer
==	O
*	O
++	O
scan	pointer
&&	O
prev	pointer
==	O
*	O
++	O
scan	pointer
&&	O
prev	pointer
==	O
*	O
++	O
scan	pointer
)	O
{	O
strend	pointer
=	O
s	pointer
->	O
window	pointer
+	O
s	pointer
->	O
strstart	int
+	O
MAX_MATCH	int
;	O
do	O
{	O
}	O
while	O
(	O
prev	pointer
==	O
*	O
++	O
scan	pointer
&&	O
prev	pointer
==	O
*	O
++	O
scan	pointer
&&	O
prev	pointer
==	O
*	O
++	O
scan	pointer
&&	O
prev	pointer
==	O
*	O
++	O
scan	pointer
&&	O
prev	pointer
==	O
*	O
++	O
scan	pointer
&&	O
prev	pointer
==	O
*	O
++	O
scan	pointer
&&	O
prev	pointer
==	O
*	O
++	O
scan	pointer
&&	O
prev	pointer
==	O
*	O
++	O
scan	pointer
&&	O
scan	pointer
<	O
strend	pointer
)	O
;	O
s	pointer
->	O
match_length	int
=	O
MAX_MATCH	int
-	O
(	O
uInt	int
)	O
(	O
strend	pointer
-	O
scan	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
match_length	int
>	O
s	pointer
->	O
lookahead	int
)	O
s	pointer
->	O
match_length	int
=	O
s	pointer
->	O
lookahead	int
;	O
}	O
Assert	O
(	O
scan	pointer
<=	O
s	pointer
->	O
window	pointer
+	O
(	O
uInt	int
)	O
(	O
s	pointer
->	O
window_size	long
-	O
1	int
)	O
,	O
"wild scan"	pointer
)	O
;	O
}	O
if	O
(	O
s	pointer
->	O
match_length	int
>=	O
MIN_MATCH	int
)	O
{	O
check_match	O
(	O
s	pointer
,	O
s	pointer
->	O
strstart	int
,	O
s	pointer
->	O
strstart	int
-	O
1	int
,	O
s	pointer
->	O
match_length	int
)	O
;	O
_tr_tally_dist	O
(	O
s	pointer
,	O
1	int
,	O
s	pointer
->	O
match_length	int
-	O
MIN_MATCH	int
,	O
bflush	int
)	O
;	O
s	pointer
->	O
lookahead	int
-=	O
s	pointer
->	O
match_length	int
;	O
s	pointer
->	O
strstart	int
+=	O
s	pointer
->	O
match_length	int
;	O
s	pointer
->	O
match_length	int
=	O
0	int
;	O
}	O
else	O
{	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"%c"	pointer
,	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
]	O
)	O
)	O
;	O
_tr_tally_lit	O
(	O
s	pointer
,	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
]	O
,	O
bflush	int
)	O
;	O
s	pointer
->	O
lookahead	int
--	O
;	O
s	pointer
->	O
strstart	int
++	O
;	O
}	O
if	O
(	O
bflush	int
)	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
insert	int
=	O
0	int
;	O
if	O
(	O
flush	int
==	O
Z_FINISH	int
)	O
{	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
1	int
)	O
;	O
return	O
finish_done	int
;	O
}	O
if	O
(	O
s	pointer
->	O
last_lit	int
)	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
0	int
)	O
;	O
return	O
block_done	int
;	O
}	O
local	O
block_state	enum
deflate_huff	function
(	O
s	pointer
,	O
flush	int
)	O
deflate_state	struct
*	O
s	pointer
;	O
int	O
flush	int
;	O
{	O
int	O
bflush	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
s	pointer
->	O
lookahead	int
==	O
0	int
)	O
{	O
fill_window	function
(	O
s	pointer
)	O
;	O
if	O
(	O
s	pointer
->	O
lookahead	int
==	O
0	int
)	O
{	O
if	O
(	O
flush	int
==	O
Z_NO_FLUSH	int
)	O
return	O
need_more	int
;	O
break	O
;	O
}	O
}	O
s	pointer
->	O
match_length	int
=	O
0	int
;	O
Tracevv	O
(	O
(	O
stderr	O
,	O
"%c"	pointer
,	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
]	O
)	O
)	O
;	O
_tr_tally_lit	O
(	O
s	pointer
,	O
s	pointer
->	O
window	pointer
[	O
s	pointer
->	O
strstart	int
]	O
,	O
bflush	int
)	O
;	O
s	pointer
->	O
lookahead	int
--	O
;	O
s	pointer
->	O
strstart	int
++	O
;	O
if	O
(	O
bflush	int
)	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
0	int
)	O
;	O
}	O
s	pointer
->	O
insert	int
=	O
0	int
;	O
if	O
(	O
flush	int
==	O
Z_FINISH	int
)	O
{	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
1	int
)	O
;	O
return	O
finish_done	int
;	O
}	O
if	O
(	O
s	pointer
->	O
last_lit	int
)	O
FLUSH_BLOCK	O
(	O
s	pointer
,	O
0	int
)	O
;	O
return	O
block_done	int
;	O
}	O
