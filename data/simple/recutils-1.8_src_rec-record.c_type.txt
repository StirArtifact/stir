struct	O
rec_record_s	struct
{	O
void	O
*	O
container	pointer
;	O
int	O
field_type	int
;	O
int	O
comment_type	int
;	O
char	O
*	O
source	pointer
;	O
size_t	long
location	long
;	O
char	O
*	O
location_str	pointer
;	O
size_t	long
char_location	long
;	O
char	O
*	O
char_location_str	pointer
;	O
rec_mset_t	pointer
mset	pointer
;	O
}	O
;	O
static	O
void	O
rec_record_init	function
(	O
rec_record_t	pointer
record	pointer
)	O
;	O
static	O
void	O
rec_record_field_disp_fn	function
(	O
void	O
*	O
data	pointer
)	O
;	O
static	O
bool	bool
rec_record_field_equal_fn	function
(	O
void	O
*	O
data1	pointer
,	O
void	O
*	O
data2	pointer
)	O
;	O
static	O
void	O
*	O
rec_record_field_dup_fn	function
(	O
void	O
*	O
data	pointer
)	O
;	O
static	O
void	O
rec_record_comment_disp_fn	function
(	O
void	O
*	O
data	pointer
)	O
;	O
static	O
bool	bool
rec_record_comment_equal_fn	function
(	O
void	O
*	O
data1	pointer
,	O
void	O
*	O
data2	pointer
)	O
;	O
static	O
void	O
*	O
rec_record_comment_dup_fn	function
(	O
void	O
*	O
data	pointer
)	O
;	O
rec_record_t	pointer
rec_record_new	function
(	O
void	O
)	O
{	O
rec_record_t	pointer
record	pointer
;	O
record	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_record_s	struct
)	O
)	O
;	O
if	O
(	O
record	pointer
)	O
{	O
rec_record_init	function
(	O
record	pointer
)	O
;	O
record	pointer
->	O
container	pointer
=	O
NULL	O
;	O
record	pointer
->	O
source	pointer
=	O
NULL	O
;	O
record	pointer
->	O
location	long
=	O
0	int
;	O
record	pointer
->	O
location_str	pointer
=	O
NULL	O
;	O
record	pointer
->	O
char_location	long
=	O
0	int
;	O
record	pointer
->	O
char_location_str	pointer
=	O
NULL	O
;	O
record	pointer
->	O
mset	pointer
=	O
rec_mset_new	function
(	O
)	O
;	O
if	O
(	O
record	pointer
->	O
mset	pointer
)	O
{	O
record	pointer
->	O
field_type	int
=	O
rec_mset_register_type	function
(	O
record	pointer
->	O
mset	pointer
,	O
"field"	pointer
,	O
rec_record_field_disp_fn	function
,	O
rec_record_field_equal_fn	function
,	O
rec_record_field_dup_fn	function
,	O
NULL	O
)	O
;	O
record	pointer
->	O
comment_type	int
=	O
rec_mset_register_type	function
(	O
record	pointer
->	O
mset	pointer
,	O
"comment"	pointer
,	O
rec_record_comment_disp_fn	function
,	O
rec_record_comment_equal_fn	function
,	O
rec_record_comment_dup_fn	function
,	O
NULL	O
)	O
;	O
}	O
else	O
{	O
rec_record_destroy	function
(	O
record	pointer
)	O
;	O
record	pointer
=	O
NULL	O
;	O
}	O
}	O
return	O
record	pointer
;	O
}	O
void	O
rec_record_destroy	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
if	O
(	O
record	pointer
)	O
{	O
free	function
(	O
record	pointer
->	O
source	pointer
)	O
;	O
free	function
(	O
record	pointer
->	O
location_str	pointer
)	O
;	O
free	function
(	O
record	pointer
->	O
char_location_str	pointer
)	O
;	O
rec_mset_destroy	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
free	function
(	O
record	pointer
)	O
;	O
}	O
}	O
rec_record_t	pointer
rec_record_dup	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
rec_record_t	pointer
new	pointer
;	O
new	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
struct	O
rec_record_s	struct
)	O
)	O
;	O
if	O
(	O
new	pointer
)	O
{	O
rec_record_init	function
(	O
new	pointer
)	O
;	O
new	pointer
->	O
field_type	int
=	O
record	pointer
->	O
field_type	int
;	O
new	pointer
->	O
comment_type	int
=	O
record	pointer
->	O
comment_type	int
;	O
new	pointer
->	O
mset	pointer
=	O
rec_mset_dup	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
if	O
(	O
!	O
new	pointer
->	O
mset	pointer
)	O
{	O
rec_record_destroy	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
new	pointer
->	O
source	pointer
=	O
NULL	O
;	O
if	O
(	O
record	pointer
->	O
source	pointer
)	O
{	O
new	pointer
->	O
source	pointer
=	O
strdup	function
(	O
record	pointer
->	O
source	pointer
)	O
;	O
if	O
(	O
!	O
new	pointer
->	O
source	pointer
)	O
{	O
rec_record_destroy	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
new	pointer
->	O
location	long
=	O
record	pointer
->	O
location	long
;	O
new	pointer
->	O
char_location	long
=	O
record	pointer
->	O
char_location	long
;	O
new	pointer
->	O
location_str	pointer
=	O
NULL	O
;	O
if	O
(	O
record	pointer
->	O
location_str	pointer
)	O
{	O
new	pointer
->	O
location_str	pointer
=	O
strdup	function
(	O
record	pointer
->	O
location_str	pointer
)	O
;	O
if	O
(	O
!	O
new	pointer
->	O
location_str	pointer
)	O
{	O
rec_record_destroy	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
new	pointer
->	O
char_location_str	pointer
=	O
NULL	O
;	O
if	O
(	O
record	pointer
->	O
char_location_str	pointer
)	O
{	O
new	pointer
->	O
char_location_str	pointer
=	O
strdup	function
(	O
record	pointer
->	O
char_location_str	pointer
)	O
;	O
if	O
(	O
!	O
new	pointer
->	O
char_location_str	pointer
)	O
{	O
rec_record_destroy	function
(	O
new	pointer
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
new	pointer
->	O
container	pointer
=	O
record	pointer
->	O
container	pointer
;	O
}	O
return	O
new	pointer
;	O
}	O
bool	bool
rec_record_subset_p	function
(	O
rec_record_t	pointer
record1	pointer
,	O
rec_record_t	pointer
record2	pointer
)	O
{	O
bool	bool
result	pointer
;	O
rec_mset_iterator_t	struct
iter1	struct
;	O
rec_mset_elem_t	pointer
elem1	pointer
;	O
const	O
void	O
*	O
data	pointer
;	O
result	pointer
=	O
true	int
;	O
iter1	struct
=	O
rec_mset_iterator	function
(	O
record1	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter1	struct
,	O
MSET_ANY	int
,	O
&	O
data	pointer
,	O
&	O
elem1	pointer
)	O
)	O
{	O
bool	bool
elem_found	bool
=	O
false	int
;	O
rec_mset_elem_t	pointer
elem2	pointer
;	O
rec_mset_iterator_t	struct
iter2	struct
=	O
rec_mset_iterator	function
(	O
record2	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter2	struct
,	O
MSET_ANY	int
,	O
&	O
data	pointer
,	O
&	O
elem2	pointer
)	O
)	O
{	O
if	O
(	O
rec_mset_elem_equal_p	function
(	O
elem1	pointer
,	O
elem2	pointer
)	O
)	O
{	O
elem_found	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
elem_found	bool
)	O
{	O
result	pointer
=	O
false	int
;	O
break	O
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter2	struct
)	O
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter1	struct
)	O
;	O
return	O
result	pointer
;	O
}	O
bool	bool
rec_record_equal_p	function
(	O
rec_record_t	pointer
record1	pointer
,	O
rec_record_t	pointer
record2	pointer
)	O
{	O
return	O
(	O
(	O
rec_record_subset_p	function
(	O
record1	pointer
,	O
record2	pointer
)	O
)	O
&&	O
(	O
rec_record_subset_p	function
(	O
record2	pointer
,	O
record1	pointer
)	O
)	O
)	O
;	O
}	O
rec_mset_t	pointer
rec_record_mset	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
return	O
record	pointer
->	O
mset	pointer
;	O
}	O
size_t	long
rec_record_num_elems	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
return	O
rec_mset_count	function
(	O
record	pointer
->	O
mset	pointer
,	O
MSET_ANY	int
)	O
;	O
}	O
size_t	long
rec_record_num_fields	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
return	O
rec_mset_count	function
(	O
record	pointer
->	O
mset	pointer
,	O
record	pointer
->	O
field_type	int
)	O
;	O
}	O
size_t	long
rec_record_num_comments	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
return	O
rec_mset_count	function
(	O
record	pointer
->	O
mset	pointer
,	O
record	pointer
->	O
comment_type	int
)	O
;	O
}	O
size_t	long
rec_record_get_field_index	function
(	O
rec_record_t	pointer
record	pointer
,	O
rec_field_t	pointer
field	pointer
)	O
{	O
size_t	long
res	long
=	O
0	int
;	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_field_t	pointer
list_field	pointer
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
list_field	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
field	pointer
==	O
list_field	pointer
)	O
{	O
break	O
;	O
}	O
res	long
++	O
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
res	long
;	O
}	O
bool	bool
rec_record_field_p	function
(	O
rec_record_t	pointer
record	pointer
,	O
const	O
char	O
*	O
field_name	pointer
)	O
{	O
return	O
(	O
rec_record_get_num_fields_by_name	function
(	O
record	pointer
,	O
field_name	pointer
)	O
>	O
0	int
)	O
;	O
}	O
size_t	long
rec_record_get_num_fields_by_name	function
(	O
rec_record_t	pointer
record	pointer
,	O
const	O
char	O
*	O
field_name	pointer
)	O
{	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_field_t	pointer
field	pointer
;	O
int	O
num_fields	int
=	O
0	int
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
rec_field_name_equal_p	function
(	O
rec_field_name	function
(	O
field	pointer
)	O
,	O
field_name	pointer
)	O
)	O
{	O
num_fields	int
++	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
num_fields	int
;	O
}	O
rec_field_t	pointer
rec_record_get_field_by_name	function
(	O
rec_record_t	pointer
record	pointer
,	O
const	O
char	O
*	O
field_name	pointer
,	O
size_t	long
n	int
)	O
{	O
size_t	long
num_fields	int
=	O
0	int
;	O
rec_field_t	pointer
field	pointer
=	O
NULL	O
;	O
rec_field_t	pointer
result	pointer
=	O
NULL	O
;	O
rec_mset_iterator_t	struct
iter	struct
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
rec_field_name_equal_p	function
(	O
rec_field_name	function
(	O
field	pointer
)	O
,	O
field_name	pointer
)	O
)	O
{	O
if	O
(	O
n	int
==	O
num_fields	int
)	O
{	O
result	pointer
=	O
field	pointer
;	O
break	O
;	O
}	O
num_fields	int
++	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
result	pointer
;	O
}	O
void	O
rec_record_remove_field_by_name	function
(	O
rec_record_t	pointer
record	pointer
,	O
const	O
char	O
*	O
field_name	pointer
,	O
size_t	long
n	int
)	O
{	O
rec_field_t	pointer
field	pointer
;	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_mset_elem_t	pointer
elem	pointer
;	O
int	O
num_fields	int
=	O
0	int
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	pointer
,	O
&	O
elem	pointer
)	O
)	O
{	O
if	O
(	O
rec_field_name_equal_p	function
(	O
rec_field_name	function
(	O
field	pointer
)	O
,	O
field_name	pointer
)	O
)	O
{	O
if	O
(	O
(	O
n	int
==	O
-	O
1	int
)	O
||	O
(	O
n	int
==	O
num_fields	int
)	O
)	O
{	O
rec_mset_remove_elem	function
(	O
record	pointer
->	O
mset	pointer
,	O
elem	pointer
)	O
;	O
}	O
num_fields	int
++	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
}	O
size_t	long
rec_record_get_field_index_by_name	function
(	O
rec_record_t	pointer
record	pointer
,	O
rec_field_t	pointer
field	pointer
)	O
{	O
size_t	long
res	long
=	O
0	int
;	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_field_t	pointer
list_field	pointer
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
list_field	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
field	pointer
==	O
list_field	pointer
)	O
{	O
break	O
;	O
}	O
if	O
(	O
rec_field_equal_p	function
(	O
field	pointer
,	O
list_field	pointer
)	O
)	O
{	O
res	long
++	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
res	long
;	O
}	O
rec_comment_t	pointer
rec_record_to_comment	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
rec_buf_t	pointer
buf	pointer
;	O
rec_comment_t	pointer
res	long
;	O
char	O
*	O
comment_str	pointer
;	O
size_t	long
comment_str_size	long
;	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_mset_elem_t	pointer
elem	pointer
;	O
const	O
void	O
*	O
data	pointer
;	O
buf	pointer
=	O
rec_buf_new	function
(	O
&	O
comment_str	pointer
,	O
&	O
comment_str_size	long
)	O
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_ANY	int
,	O
&	O
data	pointer
,	O
&	O
elem	pointer
)	O
)	O
{	O
if	O
(	O
rec_mset_elem_type	function
(	O
elem	pointer
)	O
==	O
MSET_FIELD	int
)	O
{	O
rec_buf_puts	function
(	O
rec_write_field_str	function
(	O
(	O
rec_field_t	pointer
)	O
data	pointer
,	O
REC_WRITER_NORMAL	int
)	O
,	O
buf	pointer
)	O
;	O
rec_buf_putc	function
(	O
'\n'	O
,	O
buf	pointer
)	O
;	O
}	O
else	O
{	O
rec_buf_puts	function
(	O
rec_write_comment_str	function
(	O
rec_comment_text	function
(	O
(	O
rec_comment_t	pointer
)	O
data	pointer
)	O
,	O
REC_WRITER_NORMAL	int
)	O
,	O
buf	pointer
)	O
;	O
rec_buf_putc	function
(	O
'\n'	O
,	O
buf	pointer
)	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
rec_buf_close	function
(	O
buf	pointer
)	O
;	O
if	O
(	O
comment_str	pointer
[	O
comment_str_size	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
comment_str	pointer
[	O
comment_str_size	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
res	long
=	O
rec_comment_new	function
(	O
comment_str	pointer
)	O
;	O
free	function
(	O
comment_str	pointer
)	O
;	O
return	O
res	long
;	O
}	O
char	O
*	O
rec_record_source	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
char	O
*	O
res	long
;	O
if	O
(	O
record	pointer
->	O
source	pointer
)	O
{	O
res	long
=	O
record	pointer
->	O
source	pointer
;	O
}	O
else	O
{	O
res	long
=	O
""	pointer
;	O
}	O
return	O
res	long
;	O
}	O
void	O
rec_record_set_source	function
(	O
rec_record_t	pointer
record	pointer
,	O
char	O
*	O
source	pointer
)	O
{	O
if	O
(	O
record	pointer
->	O
source	pointer
)	O
{	O
free	function
(	O
record	pointer
->	O
source	pointer
)	O
;	O
record	pointer
->	O
source	pointer
=	O
NULL	O
;	O
}	O
record	pointer
->	O
source	pointer
=	O
strdup	function
(	O
source	pointer
)	O
;	O
}	O
size_t	long
rec_record_location	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
return	O
record	pointer
->	O
location	long
;	O
}	O
char	O
*	O
rec_record_location_str	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
char	O
*	O
res	long
;	O
if	O
(	O
record	pointer
->	O
location_str	pointer
)	O
{	O
res	long
=	O
record	pointer
->	O
location_str	pointer
;	O
}	O
else	O
{	O
res	long
=	O
""	pointer
;	O
}	O
return	O
res	long
;	O
}	O
void	O
rec_record_set_location	function
(	O
rec_record_t	pointer
record	pointer
,	O
size_t	long
location	long
)	O
{	O
record	pointer
->	O
location	long
=	O
location	long
;	O
if	O
(	O
record	pointer
->	O
location_str	pointer
)	O
{	O
free	function
(	O
record	pointer
->	O
location_str	pointer
)	O
;	O
record	pointer
->	O
location_str	pointer
=	O
NULL	O
;	O
}	O
asprintf	function
(	O
&	O
(	O
record	pointer
->	O
location_str	pointer
)	O
,	O
"%zu"	pointer
,	O
record	pointer
->	O
location	long
)	O
;	O
}	O
size_t	long
rec_record_char_location	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
return	O
record	pointer
->	O
char_location	long
;	O
}	O
char	O
*	O
rec_record_char_location_str	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
char	O
*	O
res	long
;	O
if	O
(	O
record	pointer
->	O
char_location_str	pointer
)	O
{	O
res	long
=	O
record	pointer
->	O
char_location_str	pointer
;	O
}	O
else	O
{	O
res	long
=	O
""	pointer
;	O
}	O
return	O
res	long
;	O
}	O
void	O
rec_record_set_char_location	function
(	O
rec_record_t	pointer
record	pointer
,	O
size_t	long
location	long
)	O
{	O
record	pointer
->	O
char_location	long
=	O
location	long
;	O
if	O
(	O
record	pointer
->	O
char_location_str	pointer
)	O
{	O
free	function
(	O
record	pointer
->	O
char_location_str	pointer
)	O
;	O
record	pointer
->	O
char_location_str	pointer
=	O
NULL	O
;	O
}	O
asprintf	function
(	O
&	O
(	O
record	pointer
->	O
char_location_str	pointer
)	O
,	O
"%zu"	pointer
,	O
record	pointer
->	O
char_location	long
)	O
;	O
}	O
bool	bool
rec_record_contains_value	function
(	O
rec_record_t	pointer
record	pointer
,	O
const	O
char	O
*	O
str	pointer
,	O
bool	bool
case_insensitive	bool
)	O
{	O
bool	bool
res	long
=	O
false	int
;	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_field_t	pointer
field	pointer
;	O
const	O
char	O
*	O
field_value	pointer
;	O
char	O
*	O
occur	pointer
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	pointer
,	O
NULL	O
)	O
)	O
{	O
field_value	pointer
=	O
rec_field_value	function
(	O
field	pointer
)	O
;	O
if	O
(	O
case_insensitive	bool
)	O
{	O
occur	pointer
=	O
strcasestr	function
(	O
field_value	pointer
,	O
str	pointer
)	O
;	O
}	O
else	O
{	O
occur	pointer
=	O
strstr	function
(	O
field_value	pointer
,	O
str	pointer
)	O
;	O
}	O
res	long
=	O
(	O
occur	pointer
!=	O
NULL	O
)	O
;	O
if	O
(	O
res	long
)	O
{	O
break	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
res	long
;	O
}	O
bool	bool
rec_record_contains_field	function
(	O
rec_record_t	pointer
record	pointer
,	O
const	O
char	O
*	O
field_name	pointer
,	O
const	O
char	O
*	O
field_value	pointer
)	O
{	O
bool	bool
res	long
=	O
false	int
;	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_field_t	pointer
field	pointer
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
rec_field_name_equal_p	function
(	O
field_name	pointer
,	O
rec_field_name	function
(	O
field	pointer
)	O
)	O
&&	O
(	O
strcmp	function
(	O
field_value	pointer
,	O
rec_field_value	function
(	O
field	pointer
)	O
)	O
==	O
0	int
)	O
)	O
{	O
res	long
=	O
true	int
;	O
break	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
res	long
;	O
}	O
void	O
*	O
rec_record_container	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
return	O
record	pointer
->	O
container	pointer
;	O
}	O
void	O
rec_record_set_container	function
(	O
rec_record_t	pointer
record	pointer
,	O
void	O
*	O
container	pointer
)	O
{	O
record	pointer
->	O
container	pointer
=	O
container	pointer
;	O
}	O
void	O
rec_record_uniq	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
rec_mset_iterator_t	struct
iter1	struct
,	O
iter2	struct
;	O
rec_mset_elem_t	pointer
elem1	pointer
;	O
rec_field_t	pointer
field1	pointer
,	O
field2	pointer
;	O
bool	bool
*	O
to_remove	pointer
;	O
size_t	long
num_fields	int
,	O
i	long
,	O
j	long
;	O
num_fields	int
=	O
rec_record_num_fields	function
(	O
record	pointer
)	O
;	O
to_remove	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
bool	bool
)	O
*	O
num_fields	int
)	O
;	O
memset	function
(	O
to_remove	pointer
,	O
false	int
,	O
num_fields	int
)	O
;	O
i	long
=	O
0	int
;	O
iter1	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter1	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field1	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
!	O
to_remove	pointer
[	O
i	long
]	O
)	O
{	O
j	long
=	O
0	int
;	O
iter2	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter2	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field2	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
(	O
j	long
!=	O
i	long
)	O
&&	O
rec_field_name_equal_p	function
(	O
rec_field_name	function
(	O
field1	pointer
)	O
,	O
rec_field_name	function
(	O
field2	pointer
)	O
)	O
&&	O
rec_field_name_equal_p	function
(	O
rec_field_value	function
(	O
field1	pointer
)	O
,	O
rec_field_value	function
(	O
field2	pointer
)	O
)	O
)	O
{	O
to_remove	pointer
[	O
j	long
]	O
=	O
true	int
;	O
}	O
j	long
++	O
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter2	struct
)	O
;	O
}	O
i	long
++	O
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter1	struct
)	O
;	O
i	long
=	O
0	int
;	O
iter1	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter1	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field1	pointer
,	O
&	O
elem1	pointer
)	O
)	O
{	O
if	O
(	O
to_remove	pointer
[	O
i	long
]	O
)	O
{	O
rec_mset_remove_elem	function
(	O
record	pointer
->	O
mset	pointer
,	O
elem1	pointer
)	O
;	O
}	O
i	long
++	O
;	O
}	O
free	function
(	O
to_remove	pointer
)	O
;	O
}	O
void	O
rec_record_append	function
(	O
rec_record_t	pointer
dest_record	pointer
,	O
rec_record_t	pointer
src_record	pointer
)	O
{	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_field_t	pointer
field	pointer
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
src_record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
!	O
rec_mset_append	function
(	O
rec_record_mset	function
(	O
dest_record	pointer
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
rec_field_dup	function
(	O
field	pointer
)	O
,	O
MSET_FIELD	int
)	O
)	O
{	O
return	O
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
}	O
void	O
rec_record_reset_marks	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_field_t	pointer
field	pointer
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	pointer
,	O
NULL	O
)	O
)	O
{	O
rec_field_set_mark	function
(	O
field	pointer
,	O
0	int
)	O
;	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
}	O
bool	bool
rec_record_mark_field	function
(	O
rec_record_t	pointer
record	pointer
,	O
rec_field_t	pointer
field	pointer
,	O
int	O
mark	int
)	O
{	O
rec_mset_iterator_t	struct
iter	struct
;	O
rec_field_t	pointer
iter_field	pointer
;	O
iter	struct
=	O
rec_mset_iterator	function
(	O
record	pointer
->	O
mset	pointer
)	O
;	O
while	O
(	O
rec_mset_iterator_next	function
(	O
&	O
iter	struct
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
iter_field	pointer
,	O
NULL	O
)	O
)	O
{	O
if	O
(	O
field	pointer
==	O
iter_field	pointer
)	O
{	O
rec_field_set_mark	function
(	O
field	pointer
,	O
mark	int
)	O
;	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
true	int
;	O
}	O
}	O
rec_mset_iterator_free	function
(	O
&	O
iter	struct
)	O
;	O
return	O
false	int
;	O
}	O
int	O
rec_record_field_mark	function
(	O
rec_record_t	pointer
record	pointer
,	O
rec_field_t	pointer
field	pointer
)	O
{	O
return	O
rec_field_mark	function
(	O
field	pointer
)	O
;	O
}	O
static	O
void	O
rec_record_init	function
(	O
rec_record_t	pointer
record	pointer
)	O
{	O
memset	function
(	O
record	pointer
,	O
0	int
,	O
sizeof	O
(	O
struct	O
rec_record_s	struct
)	O
)	O
;	O
}	O
static	O
void	O
rec_record_field_disp_fn	function
(	O
void	O
*	O
data	pointer
)	O
{	O
rec_field_destroy	function
(	O
(	O
rec_field_t	pointer
)	O
data	pointer
)	O
;	O
}	O
static	O
bool	bool
rec_record_field_equal_fn	function
(	O
void	O
*	O
data1	pointer
,	O
void	O
*	O
data2	pointer
)	O
{	O
return	O
(	O
data1	pointer
==	O
data2	pointer
)	O
;	O
}	O
static	O
void	O
*	O
rec_record_field_dup_fn	function
(	O
void	O
*	O
data	pointer
)	O
{	O
rec_field_t	pointer
copy	pointer
;	O
copy	pointer
=	O
rec_field_dup	function
(	O
(	O
rec_field_t	pointer
)	O
data	pointer
)	O
;	O
return	O
(	O
void	O
*	O
)	O
copy	pointer
;	O
}	O
static	O
void	O
rec_record_comment_disp_fn	function
(	O
void	O
*	O
data	pointer
)	O
{	O
rec_comment_destroy	function
(	O
(	O
rec_comment_t	pointer
)	O
data	pointer
)	O
;	O
}	O
static	O
bool	bool
rec_record_comment_equal_fn	function
(	O
void	O
*	O
data1	pointer
,	O
void	O
*	O
data2	pointer
)	O
{	O
return	O
(	O
data1	pointer
==	O
data2	pointer
)	O
;	O
}	O
static	O
void	O
*	O
rec_record_comment_dup_fn	function
(	O
void	O
*	O
data	pointer
)	O
{	O
rec_comment_t	pointer
copy	pointer
;	O
copy	pointer
=	O
rec_comment_dup	function
(	O
(	O
rec_comment_t	pointer
)	O
data	pointer
)	O
;	O
return	O
(	O
void	O
*	O
)	O
copy	pointer
;	O
}	O
