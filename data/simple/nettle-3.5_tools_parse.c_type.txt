void	O
sexp_compound_token_init	function
(	O
struct	O
sexp_compound_token	struct
*	O
token	pointer
)	O
{	O
token	pointer
->	O
type	enum
=	O
0	int
;	O
nettle_buffer_init	function
(	O
&	O
token	pointer
->	O
display	struct
)	O
;	O
nettle_buffer_init	function
(	O
&	O
token	pointer
->	O
string	struct
)	O
;	O
}	O
void	O
sexp_compound_token_clear	function
(	O
struct	O
sexp_compound_token	struct
*	O
token	pointer
)	O
{	O
nettle_buffer_clear	function
(	O
&	O
token	pointer
->	O
display	struct
)	O
;	O
nettle_buffer_clear	function
(	O
&	O
token	pointer
->	O
string	struct
)	O
;	O
}	O
void	O
sexp_parse_init	function
(	O
struct	O
sexp_parser	struct
*	O
parser	pointer
,	O
struct	O
sexp_input	struct
*	O
input	pointer
,	O
enum	O
sexp_mode	enum
mode	enum
)	O
{	O
parser	pointer
->	O
input	pointer
=	O
input	pointer
;	O
parser	pointer
->	O
mode	enum
=	O
mode	enum
;	O
parser	pointer
->	O
level	int
=	O
1	int
;	O
parser	pointer
->	O
transport	int
=	O
0	int
;	O
}	O
static	O
void	O
sexp_check_token	function
(	O
struct	O
sexp_parser	struct
*	O
parser	pointer
,	O
enum	O
sexp_token	enum
token	pointer
,	O
struct	O
nettle_buffer	struct
*	O
string	struct
)	O
{	O
sexp_get_token	function
(	O
parser	pointer
->	O
input	pointer
,	O
parser	pointer
->	O
transport	int
?	O
SEXP_CANONICAL	int
:	O
parser	pointer
->	O
mode	enum
,	O
string	struct
)	O
;	O
if	O
(	O
parser	pointer
->	O
input	pointer
->	O
token	pointer
!=	O
token	pointer
)	O
die	function
(	O
"Syntax error.\n"	pointer
)	O
;	O
}	O
void	O
sexp_parse	function
(	O
struct	O
sexp_parser	struct
*	O
parser	pointer
,	O
struct	O
sexp_compound_token	struct
*	O
token	pointer
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
sexp_get_token	function
(	O
parser	pointer
->	O
input	pointer
,	O
parser	pointer
->	O
transport	int
?	O
SEXP_CANONICAL	int
:	O
parser	pointer
->	O
mode	enum
,	O
&	O
token	pointer
->	O
string	struct
)	O
;	O
switch	O
(	O
parser	pointer
->	O
input	pointer
->	O
token	pointer
)	O
{	O
case	O
SEXP_LIST_END	int
:	O
if	O
(	O
parser	pointer
->	O
level	int
==	O
parser	pointer
->	O
transport	int
)	O
die	function
(	O
"Unmatched end of list in transport encoded data.\n"	pointer
)	O
;	O
parser	pointer
->	O
level	int
--	O
;	O
if	O
(	O
!	O
parser	pointer
->	O
level	int
)	O
die	function
(	O
"Unmatched end of list.\n"	pointer
)	O
;	O
token	pointer
->	O
type	enum
=	O
SEXP_LIST_END	int
;	O
check_transport_end	O
:	O
if	O
(	O
parser	pointer
->	O
level	int
==	O
parser	pointer
->	O
transport	int
)	O
{	O
sexp_check_token	function
(	O
parser	pointer
,	O
SEXP_CODING_END	int
,	O
&	O
token	pointer
->	O
string	struct
)	O
;	O
assert	O
(	O
parser	pointer
->	O
transport	int
)	O
;	O
assert	O
(	O
parser	pointer
->	O
level	int
==	O
parser	pointer
->	O
transport	int
)	O
;	O
parser	pointer
->	O
level	int
--	O
;	O
parser	pointer
->	O
transport	int
=	O
0	int
;	O
}	O
return	O
;	O
case	O
SEXP_EOF	int
:	O
if	O
(	O
parser	pointer
->	O
level	int
>	O
1	int
)	O
die	function
(	O
"Unexpected end of file.\n"	pointer
)	O
;	O
token	pointer
->	O
type	enum
=	O
SEXP_EOF	int
;	O
return	O
;	O
case	O
SEXP_LIST_START	int
:	O
parser	pointer
->	O
level	int
++	O
;	O
token	pointer
->	O
type	enum
=	O
SEXP_LIST_START	int
;	O
return	O
;	O
case	O
SEXP_DISPLAY_START	int
:	O
sexp_check_token	function
(	O
parser	pointer
,	O
SEXP_STRING	int
,	O
&	O
token	pointer
->	O
display	struct
)	O
;	O
sexp_check_token	function
(	O
parser	pointer
,	O
SEXP_DISPLAY_END	int
,	O
&	O
token	pointer
->	O
display	struct
)	O
;	O
sexp_check_token	function
(	O
parser	pointer
,	O
SEXP_STRING	int
,	O
&	O
token	pointer
->	O
string	struct
)	O
;	O
token	pointer
->	O
type	enum
=	O
SEXP_DISPLAY	int
;	O
goto	O
check_transport_end	O
;	O
case	O
SEXP_STRING	int
:	O
token	pointer
->	O
type	enum
=	O
SEXP_STRING	int
;	O
goto	O
check_transport_end	O
;	O
case	O
SEXP_COMMENT	int
:	O
token	pointer
->	O
type	enum
=	O
SEXP_COMMENT	int
;	O
return	O
;	O
case	O
SEXP_TRANSPORT_START	int
:	O
if	O
(	O
parser	pointer
->	O
mode	enum
==	O
SEXP_CANONICAL	int
)	O
die	function
(	O
"Base64 not allowed in canonical mode.\n"	pointer
)	O
;	O
parser	pointer
->	O
level	int
++	O
;	O
parser	pointer
->	O
transport	int
=	O
parser	pointer
->	O
level	int
;	O
continue	O
;	O
case	O
SEXP_CODING_END	int
:	O
die	function
(	O
"Unexpected end of transport encoding.\n"	pointer
)	O
;	O
case	O
SEXP_DISPLAY_END	int
:	O
die	function
(	O
"Unexpected end of display tag.\n"	pointer
)	O
;	O
case	O
SEXP_DISPLAY	int
:	O
abort	function
(	O
)	O
;	O
}	O
}	O
}	O
