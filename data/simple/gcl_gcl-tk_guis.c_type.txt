FILE	struct
*	O
pstreamDebug	pointer
;	O
int	O
fDebugSockets	int
;	O
int	O
hdl	int
=	O
-	O
1	int
;	O
void	O
TkX_Wish	function
(	O
)	O
;	O
pid_t	int
parent	int
;	O
int	O
debug	int
;	O
int	O
delay	int
;	O
int	O
main	function
(	O
argc	int
,	O
argv	array
,	O
envp	array
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array
[	O
]	O
;	O
char	O
*	O
envp	array
[	O
]	O
;	O
{	O
int	O
rv	int
=	O
0	int
;	O
{	O
int	O
i	int
=	O
argc	int
;	O
pstreamDebug	pointer
=	O
stderr	pointer
;	O
while	O
(	O
--	O
i	int
>	O
3	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-delay"	pointer
)	O
==	O
0	int
)	O
{	O
delay	int
=	O
atoi	function
(	O
argv	array
[	O
i	int
+	O
1	int
]	O
)	O
;	O
}	O
if	O
(	O
strcmp	function
(	O
argv	array
[	O
i	int
]	O
,	O
"-debug"	pointer
)	O
==	O
0	int
)	O
{	O
debug	int
=	O
1	int
;	O
fDebugSockets	int
=	O
-	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
argc	int
>=	O
4	int
)	O
{	O
pid_t	int
p	int
;	O
parent	int
=	O
atoi	function
(	O
argv	array
[	O
3	int
]	O
)	O
;	O
dfprintf	function
(	O
stderr	pointer
,	O
"guis, parent is : %d\n"	pointer
,	O
parent	int
)	O
;	O
p	int
=	O
fork	function
(	O
)	O
;	O
dfprintf	function
(	O
stderr	pointer
,	O
"guis, vfork returned : %d\n"	pointer
,	O
p	int
)	O
;	O
if	O
(	O
p	int
==	O
-	O
1	int
)	O
{	O
dfprintf	function
(	O
stderr	pointer
,	O
"Error !!! vfork failed %d\n"	pointer
,	O
errno	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
p	int
)	O
{	O
dfprintf	function
(	O
stderr	pointer
,	O
"guis,vforked child : %d\n"	pointer
,	O
p	int
)	O
;	O
_exit	function
(	O
p	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
SET_SESSION_ID	function
(	O
)	O
==	O
-	O
1	int
)	O
{	O
dfprintf	function
(	O
stderr	pointer
,	O
"Error !!! setsid failed : %d\n"	pointer
,	O
errno	O
)	O
;	O
}	O
dsfd	O
=	O
sock_connect_to_name	function
(	O
argv	array
[	O
1	int
]	O
,	O
atoi	function
(	O
argv	array
[	O
2	int
]	O
)	O
,	O
0	int
)	O
;	O
if	O
(	O
dsfd	O
)	O
{	O
dfprintf	function
(	O
stderr	pointer
,	O
"connected to %s %s"	pointer
,	O
argv	array
[	O
1	int
]	O
,	O
argv	array
[	O
2	int
]	O
)	O
;	O
while	O
(	O
--	O
delay	int
>=	O
0	int
)	O
sleep	function
(	O
1	int
)	O
;	O
{	O
TkX_Wish	function
(	O
argc	int
,	O
argv	array
)	O
;	O
}	O
dfprintf	function
(	O
stderr	pointer
,	O
"Wish shell done\n"	pointer
)	O
;	O
sock_close_connection	function
(	O
dsfd	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
dfprintf	function
(	O
stderr	pointer
,	O
"Error !!! Can't connect to socket host=%s, port=%s, errno=%d\n"	pointer
,	O
argv	array
[	O
1	int
]	O
,	O
argv	array
[	O
2	int
]	O
,	O
errno	O
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
}	O
else	O
{	O
int	O
i	int
;	O
fprintf	function
(	O
stderr	pointer
,	O
"gcltkaux: Error - expecting more arguments, but found:\n"	pointer
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"    argv[%d] = %s\n"	pointer
,	O
i	int
,	O
argv	array
[	O
i	int
]	O
)	O
;	O
fflush	function
(	O
stderr	pointer
)	O
;	O
}	O
fflush	function
(	O
stderr	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
(	O
rv	int
)	O
;	O
}	O
struct	O
connection_state	O
*	O
sock_connect_to_name	function
(	O
host_id	pointer
,	O
name	int
,	O
async	int
)	O
char	O
*	O
host_id	pointer
;	O
int	O
name	int
;	O
int	O
async	int
;	O
{	O
struct	O
sockaddr_in	struct
addr	struct
;	O
int	O
fd	int
,	O
n	int
,	O
rc	int
;	O
fd	int
=	O
socket	function
(	O
PF_INET	int
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
addr	struct
.	O
sin_family	short
=	O
PF_INET	int
;	O
addr	struct
.	O
sin_port	short
=	O
htons	function
(	O
(	O
unsigned	O
short	O
)	O
(	O
name	int
&	O
0xffff	int
)	O
)	O
;	O
addr	struct
.	O
sin_addr	struct
.	O
s_addr	int
=	O
inet_addr	function
(	O
host_id	pointer
)	O
;	O
memset	function
(	O
addr	struct
.	O
sin_zero	array
,	O
0	int
,	O
8	int
)	O
;	O
n	int
=	O
sizeof	O
addr	struct
;	O
rc	int
=	O
connect	function
(	O
fd	int
,	O
(	O
struct	O
sockaddr	struct
*	O
)	O
&	O
addr	struct
,	O
n	int
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
return	O
0	int
;	O
return	O
setup_connection_state	function
(	O
fd	int
)	O
;	O
}	O
void	O
sock_close_connection	function
(	O
sfd	pointer
)	O
struct	O
connection_state	O
*	O
sfd	pointer
;	O
{	O
close	function
(	O
sfd	pointer
->	O
fd	int
)	O
;	O
free	function
(	O
sfd	pointer
->	O
read_buffer	O
)	O
;	O
free	function
(	O
sfd	pointer
)	O
;	O
}	O
static	O
int	O
message_id	int
;	O
int	O
sock_write_str2	function
(	O
sfd	pointer
,	O
type	enum
,	O
hdr	pointer
,	O
hdrsize	int
,	O
text	pointer
,	O
length	int
)	O
struct	O
connection_state	O
*	O
sfd	pointer
;	O
enum	O
mtype	O
type	enum
;	O
char	O
*	O
hdr	pointer
;	O
int	O
hdrsize	int
;	O
const	O
char	O
*	O
text	pointer
;	O
int	O
length	int
;	O
{	O
char	O
buf	array
[	O
0x1000	int
]	O
;	O
char	O
*	O
p	int
=	O
buf	array
;	O
int	O
m	int
;	O
int	O
n_written	int
;	O
struct	O
message_header	O
*	O
msg	pointer
;	O
msg	pointer
=	O
(	O
struct	O
message_header	O
*	O
)	O
buf	array
;	O
if	O
(	O
length	int
==	O
0	int
)	O
length	int
=	O
strlen	function
(	O
text	pointer
)	O
;	O
m	int
=	O
length	int
+	O
hdrsize	int
;	O
msg	pointer
->	O
magic1	int
=	O
MAGIC1	O
;	O
msg	pointer
->	O
magic2	O
=	O
MAGIC2	O
;	O
msg	pointer
->	O
type	enum
=	O
type	enum
;	O
msg	pointer
->	O
flag	O
=	O
0	int
;	O
STORE_3BYTES	function
(	O
msg	pointer
->	O
size	O
,	O
m	int
)	O
;	O
STORE_3BYTES	function
(	O
msg	pointer
->	O
msg_id	O
,	O
message_id	int
)	O
;	O
message_id	int
++	O
;	O
p	int
=	O
buf	array
+	O
MESSAGE_HEADER_SIZE	O
;	O
bcopy	function
(	O
hdr	pointer
,	O
p	int
,	O
hdrsize	int
)	O
;	O
p	int
+=	O
hdrsize	int
;	O
if	O
(	O
sizeof	O
(	O
buf	array
)	O
>=	O
(	O
length	int
+	O
hdrsize	int
+	O
MESSAGE_HEADER_SIZE	O
)	O
)	O
{	O
bcopy	function
(	O
text	pointer
,	O
p	int
,	O
length	int
)	O
;	O
n_written	int
=	O
write1	function
(	O
sfd	pointer
,	O
buf	array
,	O
(	O
length	int
+	O
hdrsize	int
+	O
MESSAGE_HEADER_SIZE	O
)	O
)	O
;	O
}	O
else	O
{	O
n_written	int
=	O
write1	function
(	O
sfd	pointer
,	O
buf	array
,	O
hdrsize	int
+	O
MESSAGE_HEADER_SIZE	O
)	O
;	O
n_written	int
+=	O
write1	function
(	O
sfd	pointer
,	O
text	pointer
,	O
length	int
)	O
;	O
}	O
if	O
(	O
n_written	int
!=	O
(	O
length	int
+	O
hdrsize	int
+	O
MESSAGE_HEADER_SIZE	O
)	O
)	O
{	O
perror	function
(	O
"sock_write_str: Did not write full message"	pointer
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
n_written	int
;	O
}	O
struct	O
message_header	O
*	O
guiParseMsg1	function
(	O
sfd	pointer
,	O
buf	array
,	O
bufleng	int
)	O
char	O
*	O
buf	array
;	O
int	O
bufleng	int
;	O
struct	O
connection_state	O
*	O
sfd	pointer
;	O
{	O
int	O
m	int
;	O
int	O
body_length	int
;	O
int	O
tot	int
;	O
struct	O
message_header	O
*	O
msg	pointer
;	O
msg	pointer
=	O
(	O
struct	O
message_header	O
*	O
)	O
buf	array
;	O
m	int
=	O
read1	function
(	O
sfd	pointer
,	O
msg	pointer
,	O
MESSAGE_HEADER_SIZE	O
,	O
DEFAULT_TIMEOUT_FOR_TK_READ	O
)	O
;	O
if	O
(	O
m	int
==	O
MESSAGE_HEADER_SIZE	O
)	O
{	O
if	O
(	O
msg	pointer
->	O
magic1	int
!=	O
MAGIC1	O
||	O
msg	pointer
->	O
magic2	O
!=	O
MAGIC2	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"bad magic..flushing buffers"	pointer
)	O
;	O
while	O
(	O
read1	function
(	O
sfd	pointer
,	O
buf	array
,	O
bufleng	int
,	O
0	int
)	O
>	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
GET_3BYTES	function
(	O
msg	pointer
->	O
size	O
,	O
body_length	int
)	O
;	O
tot	int
=	O
body_length	int
+	O
MESSAGE_HEADER_SIZE	O
;	O
if	O
(	O
tot	int
>=	O
bufleng	int
)	O
{	O
msg	pointer
=	O
(	O
void	O
*	O
)	O
malloc	function
(	O
tot	int
+	O
1	int
)	O
;	O
bcopy	function
(	O
buf	array
,	O
msg	pointer
,	O
MESSAGE_HEADER_SIZE	O
)	O
;	O
}	O
m	int
=	O
read1	function
(	O
sfd	pointer
,	O
&	O
(	O
msg	pointer
->	O
body	O
)	O
,	O
body_length	int
,	O
DEFAULT_TIMEOUT_FOR_TK_READ	O
)	O
;	O
if	O
(	O
m	int
==	O
body_length	int
)	O
{	O
return	O
msg	pointer
;	O
}	O
}	O
if	O
(	O
m	int
<	O
0	int
)	O
exit	function
(	O
1	int
)	O
;	O
{	O
static	O
int	O
bad_read_allowed	int
=	O
4	int
;	O
if	O
(	O
bad_read_allowed	int
--	O
<	O
0	int
)	O
exit	function
(	O
1	int
)	O
;	O
}	O
dfprintf	function
(	O
stderr	pointer
,	O
"reading from lisp timed out or not enough read"	pointer
)	O
;	O
return	O
0	int
;	O
}	O
void	O
error	function
(	O
s	pointer
)	O
char	O
*	O
s	pointer
;	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"%s"	pointer
,	O
s	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
void	O
write_timeout_error	function
(	O
s	pointer
)	O
char	O
*	O
s	pointer
;	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"write timeout: %s"	pointer
,	O
s	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
void	O
connection_failure	function
(	O
s	pointer
)	O
char	O
*	O
s	pointer
;	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"connection_failure:%s"	pointer
,	O
s	pointer
)	O
;	O
abort	function
(	O
)	O
;	O
}	O
object	O
make_fixnum1	function
(	O
long	O
i	int
)	O
{	O
static	O
union	O
lispunion	O
lu	union
;	O
lu	union
.	O
FIX	O
.	O
FIXVAL	O
=	O
i	int
;	O
return	O
&	O
lu	union
;	O
}	O
