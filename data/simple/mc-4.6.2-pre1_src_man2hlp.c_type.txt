static	O
int	O
col	int
=	O
0	int
;	O
static	O
int	O
out_row	int
=	O
1	int
;	O
static	O
int	O
in_row	int
=	O
0	int
;	O
static	O
int	O
no_split_flag	int
=	O
0	int
;	O
static	O
int	O
skip_flag	int
=	O
0	int
;	O
static	O
int	O
link_flag	int
=	O
0	int
;	O
static	O
int	O
verbatim_flag	int
=	O
0	int
;	O
static	O
int	O
node	pointer
=	O
0	int
;	O
static	O
const	O
char	O
*	O
c_out	pointer
;	O
static	O
FILE	struct
*	O
f_out	pointer
;	O
static	O
const	O
char	O
*	O
c_in	pointer
;	O
static	O
int	O
indentation	int
;	O
static	O
int	O
tp_flag	int
;	O
static	O
char	O
*	O
topics	pointer
=	O
NULL	O
;	O
struct	O
node	pointer
{	O
char	O
*	O
node	pointer
;	O
char	O
*	O
lname	pointer
;	O
struct	O
node	pointer
*	O
next	pointer
;	O
int	O
heading_level	int
;	O
}	O
;	O
static	O
struct	O
node	pointer
nodes	struct
;	O
static	O
struct	O
node	pointer
*	O
cnode	pointer
;	O
static	O
size_t	long
persistent_fread	function
(	O
void	O
*	O
data	pointer
,	O
size_t	long
len	int
,	O
FILE	struct
*	O
stream	pointer
)	O
{	O
size_t	long
count	int
;	O
size_t	long
bytes_done	long
=	O
0	int
;	O
char	O
*	O
ptr	pointer
=	O
(	O
char	O
*	O
)	O
data	pointer
;	O
if	O
(	O
len	int
<=	O
0	int
)	O
return	O
0	int
;	O
while	O
(	O
bytes_done	long
<	O
len	int
)	O
{	O
count	int
=	O
len	int
-	O
bytes_done	long
;	O
if	O
(	O
count	int
>	O
MAX_STREAM_BLOCK	int
)	O
count	int
=	O
MAX_STREAM_BLOCK	int
;	O
count	int
=	O
fread	function
(	O
ptr	pointer
,	O
1	int
,	O
count	int
,	O
stream	pointer
)	O
;	O
if	O
(	O
count	int
<=	O
0	int
)	O
return	O
0	int
;	O
bytes_done	long
+=	O
count	int
;	O
ptr	pointer
+=	O
count	int
;	O
}	O
return	O
bytes_done	long
;	O
}	O
static	O
size_t	long
persistent_fwrite	function
(	O
const	O
void	O
*	O
data	pointer
,	O
size_t	long
len	int
,	O
FILE	struct
*	O
stream	pointer
)	O
{	O
size_t	long
count	int
;	O
size_t	long
bytes_done	long
=	O
0	int
;	O
const	O
char	O
*	O
ptr	pointer
=	O
(	O
const	O
char	O
*	O
)	O
data	pointer
;	O
if	O
(	O
len	int
<=	O
0	int
)	O
return	O
0	int
;	O
while	O
(	O
bytes_done	long
<	O
len	int
)	O
{	O
count	int
=	O
len	int
-	O
bytes_done	long
;	O
if	O
(	O
count	int
>	O
MAX_STREAM_BLOCK	int
)	O
count	int
=	O
MAX_STREAM_BLOCK	int
;	O
count	int
=	O
fwrite	function
(	O
ptr	pointer
,	O
1	int
,	O
count	int
,	O
stream	pointer
)	O
;	O
if	O
(	O
count	int
<=	O
0	int
)	O
return	O
0	int
;	O
bytes_done	long
+=	O
count	int
;	O
ptr	pointer
+=	O
count	int
;	O
}	O
return	O
bytes_done	long
;	O
}	O
static	O
void	O
print_error	function
(	O
const	O
char	O
*	O
message	pointer
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"man2hlp: %s in file \"%s\" on line %d\n"	pointer
,	O
message	pointer
,	O
c_in	pointer
,	O
in_row	int
)	O
;	O
}	O
static	O
FILE	struct
*	O
fopen_check	function
(	O
const	O
char	O
*	O
filename	pointer
,	O
const	O
char	O
*	O
flags	enum
)	O
{	O
char	O
tmp	array
[	O
BUFFER_SIZE	int
]	O
;	O
FILE	struct
*	O
f	pointer
;	O
f	pointer
=	O
fopen	function
(	O
filename	pointer
,	O
flags	enum
)	O
;	O
if	O
(	O
f	pointer
==	O
NULL	O
)	O
{	O
g_snprintf	function
(	O
tmp	array
,	O
sizeof	O
(	O
tmp	array
)	O
,	O
"man2hlp: Cannot open file \"%s\""	pointer
,	O
filename	pointer
)	O
;	O
perror	function
(	O
tmp	array
)	O
;	O
exit	function
(	O
3	int
)	O
;	O
}	O
return	O
f	pointer
;	O
}	O
static	O
void	O
fclose_check	function
(	O
FILE	struct
*	O
f	pointer
)	O
{	O
if	O
(	O
ferror	function
(	O
f	pointer
)	O
)	O
{	O
perror	function
(	O
"man2hlp: File error"	pointer
)	O
;	O
exit	function
(	O
3	int
)	O
;	O
}	O
if	O
(	O
fclose	function
(	O
f	pointer
)	O
)	O
{	O
perror	function
(	O
"man2hlp: Cannot close file"	pointer
)	O
;	O
exit	function
(	O
3	int
)	O
;	O
}	O
}	O
static	O
void	O
newline	function
(	O
void	O
)	O
{	O
out_row	int
++	O
;	O
col	int
=	O
0	int
;	O
fprintf	function
(	O
f_out	pointer
,	O
"\n"	pointer
)	O
;	O
}	O
static	O
int	O
string_len	long
(	O
const	O
char	O
*	O
buffer	pointer
)	O
{	O
static	O
int	O
anchor_flag	int
=	O
0	int
;	O
static	O
int	O
link_flag	int
=	O
0	int
;	O
int	O
backslash_flag	int
=	O
0	int
;	O
int	O
c	int
;	O
int	O
len	int
=	O
0	int
;	O
while	O
(	O
*	O
(	O
buffer	pointer
)	O
)	O
{	O
c	int
=	O
*	O
buffer	pointer
++	O
;	O
if	O
(	O
c	int
==	O
CHAR_LINK_POINTER	char
)	O
link_flag	int
=	O
1	int
;	O
else	O
if	O
(	O
c	int
==	O
CHAR_LINK_END	char
)	O
link_flag	int
=	O
0	int
;	O
else	O
if	O
(	O
c	int
==	O
CHAR_NODE_END	char
)	O
{	O
anchor_flag	int
=	O
1	int
;	O
len	int
++	O
;	O
}	O
if	O
(	O
c	int
>=	O
0	int
&&	O
c	int
<	O
32	int
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
&&	O
!	O
backslash_flag	int
)	O
{	O
backslash_flag	int
=	O
1	int
;	O
continue	O
;	O
}	O
backslash_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
anchor_flag	int
&&	O
!	O
link_flag	int
)	O
len	int
++	O
;	O
if	O
(	O
anchor_flag	int
&&	O
c	int
==	O
']'	O
)	O
{	O
anchor_flag	int
=	O
0	int
;	O
}	O
}	O
return	O
len	int
;	O
}	O
static	O
void	O
print_string	function
(	O
char	O
*	O
buffer	pointer
)	O
{	O
int	O
len	int
;	O
int	O
c	int
;	O
int	O
backslash_flag	int
=	O
0	int
;	O
if	O
(	O
skip_flag	int
)	O
return	O
;	O
if	O
(	O
verbatim_flag	int
)	O
{	O
while	O
(	O
*	O
(	O
buffer	pointer
)	O
)	O
{	O
c	int
=	O
*	O
buffer	pointer
++	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
&&	O
!	O
backslash_flag	int
)	O
{	O
backslash_flag	int
=	O
1	int
;	O
continue	O
;	O
}	O
backslash_flag	int
=	O
0	int
;	O
fputc	function
(	O
c	int
,	O
f_out	pointer
)	O
;	O
}	O
}	O
else	O
{	O
buffer	pointer
=	O
strtok	function
(	O
buffer	pointer
,	O
" \t\n"	pointer
)	O
;	O
while	O
(	O
buffer	pointer
)	O
{	O
if	O
(	O
*	O
(	O
buffer	pointer
)	O
)	O
{	O
len	int
=	O
string_len	long
(	O
buffer	pointer
)	O
;	O
if	O
(	O
col	int
+	O
len	int
>=	O
HELP_TEXT_WIDTH	int
)	O
newline	function
(	O
)	O
;	O
if	O
(	O
col	int
>	O
0	int
)	O
{	O
fputc	function
(	O
' '	O
,	O
f_out	pointer
)	O
;	O
col	int
++	O
;	O
}	O
else	O
if	O
(	O
indentation	int
)	O
{	O
while	O
(	O
col	int
++	O
<	O
indentation	int
)	O
fputc	function
(	O
' '	O
,	O
f_out	pointer
)	O
;	O
}	O
while	O
(	O
*	O
(	O
buffer	pointer
)	O
)	O
{	O
c	int
=	O
*	O
buffer	pointer
++	O
;	O
if	O
(	O
c	int
==	O
'\\'	O
&&	O
!	O
backslash_flag	int
)	O
{	O
backslash_flag	int
=	O
1	int
;	O
continue	O
;	O
}	O
backslash_flag	int
=	O
0	int
;	O
fputc	function
(	O
c	int
,	O
f_out	pointer
)	O
;	O
}	O
col	int
+=	O
len	int
;	O
}	O
buffer	pointer
=	O
strtok	function
(	O
NULL	O
,	O
" \t\n"	pointer
)	O
;	O
}	O
}	O
}	O
static	O
void	O
printf_string	function
(	O
const	O
char	O
*	O
format	pointer
,	O
...	O
)	O
{	O
va_list	array
args	array
;	O
char	O
buffer	pointer
[	O
BUFFER_SIZE	int
]	O
;	O
va_start	O
(	O
args	array
,	O
format	pointer
)	O
;	O
g_vsnprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
format	pointer
,	O
args	array
)	O
;	O
va_end	O
(	O
args	array
)	O
;	O
print_string	function
(	O
buffer	pointer
)	O
;	O
}	O
static	O
void	O
handle_node	function
(	O
char	O
*	O
buffer	pointer
,	O
int	O
is_sh	int
)	O
{	O
int	O
len	int
,	O
heading_level	int
;	O
if	O
(	O
skip_flag	int
==	O
2	int
)	O
{	O
skip_flag	int
=	O
0	int
;	O
}	O
buffer	pointer
=	O
strtok	function
(	O
NULL	O
,	O
""	pointer
)	O
;	O
if	O
(	O
buffer	pointer
==	O
NULL	O
)	O
{	O
print_error	function
(	O
"Syntax error: .SH: no title"	pointer
)	O
;	O
return	O
;	O
}	O
else	O
{	O
if	O
(	O
buffer	pointer
[	O
0	int
]	O
==	O
'"'	O
)	O
{	O
buffer	pointer
++	O
;	O
len	int
=	O
strlen	function
(	O
buffer	pointer
)	O
;	O
if	O
(	O
buffer	pointer
[	O
len	int
-	O
1	int
]	O
==	O
'"'	O
)	O
{	O
len	int
--	O
;	O
buffer	pointer
[	O
len	int
]	O
=	O
0	int
;	O
}	O
}	O
heading_level	int
=	O
0	int
;	O
while	O
(	O
buffer	pointer
[	O
heading_level	int
]	O
==	O
' '	O
)	O
heading_level	int
++	O
;	O
if	O
(	O
heading_level	int
&	O
1	int
)	O
print_error	function
(	O
"Syntax error: .SH: odd heading level"	pointer
)	O
;	O
if	O
(	O
no_split_flag	int
)	O
{	O
newline	function
(	O
)	O
;	O
print_string	function
(	O
buffer	pointer
)	O
;	O
newline	function
(	O
)	O
;	O
newline	function
(	O
)	O
;	O
no_split_flag	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
skip_flag	int
)	O
{	O
skip_flag	int
=	O
2	int
;	O
}	O
else	O
{	O
buffer	pointer
+=	O
heading_level	int
;	O
if	O
(	O
!	O
is_sh	int
||	O
!	O
node	pointer
)	O
{	O
if	O
(	O
*	O
buffer	pointer
)	O
{	O
fprintf	function
(	O
f_out	pointer
,	O
"%c[%s]"	pointer
,	O
CHAR_NODE_END	char
,	O
buffer	pointer
)	O
;	O
col	int
++	O
;	O
newline	function
(	O
)	O
;	O
}	O
if	O
(	O
!	O
cnode	pointer
)	O
{	O
cnode	pointer
=	O
&	O
nodes	struct
;	O
}	O
else	O
{	O
cnode	pointer
->	O
next	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
nodes	struct
)	O
)	O
;	O
cnode	pointer
=	O
cnode	pointer
->	O
next	pointer
;	O
}	O
cnode	pointer
->	O
node	pointer
=	O
strdup	function
(	O
buffer	pointer
)	O
;	O
cnode	pointer
->	O
lname	pointer
=	O
NULL	O
;	O
cnode	pointer
->	O
next	pointer
=	O
NULL	O
;	O
cnode	pointer
->	O
heading_level	int
=	O
heading_level	int
;	O
}	O
if	O
(	O
is_sh	int
)	O
{	O
cnode	pointer
->	O
lname	pointer
=	O
strdup	function
(	O
buffer	pointer
)	O
;	O
print_string	function
(	O
buffer	pointer
)	O
;	O
newline	function
(	O
)	O
;	O
newline	function
(	O
)	O
;	O
}	O
}	O
}	O
node	pointer
=	O
!	O
is_sh	int
;	O
}	O
static	O
inline	O
char	O
char_to_font	function
(	O
char	O
c	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'R'	O
:	O
return	O
CHAR_FONT_NORMAL	char
;	O
case	O
'B'	O
:	O
return	O
CHAR_FONT_BOLD	char
;	O
case	O
'I'	O
:	O
return	O
CHAR_FONT_ITALIC	char
;	O
default	O
:	O
return	O
0	int
;	O
}	O
}	O
static	O
int	O
handle_alt_font	function
(	O
char	O
*	O
buffer	pointer
)	O
{	O
char	O
*	O
p	pointer
;	O
char	O
*	O
w	pointer
;	O
char	O
font	array
[	O
2	int
]	O
;	O
int	O
in_quotes	int
=	O
0	int
;	O
int	O
alt_state	int
=	O
0	int
;	O
if	O
(	O
strlen	function
(	O
buffer	pointer
)	O
!=	O
3	int
)	O
return	O
0	int
;	O
if	O
(	O
buffer	pointer
[	O
0	int
]	O
!=	O
'.'	O
)	O
return	O
0	int
;	O
font	array
[	O
0	int
]	O
=	O
char_to_font	function
(	O
buffer	pointer
[	O
1	int
]	O
)	O
;	O
font	array
[	O
1	int
]	O
=	O
char_to_font	function
(	O
buffer	pointer
[	O
2	int
]	O
)	O
;	O
if	O
(	O
font	array
[	O
0	int
]	O
==	O
0	int
||	O
font	array
[	O
1	int
]	O
==	O
0	int
||	O
font	array
[	O
0	int
]	O
==	O
font	array
[	O
1	int
]	O
)	O
return	O
0	int
;	O
p	pointer
=	O
strtok	function
(	O
NULL	O
,	O
""	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
return	O
1	int
;	O
}	O
w	pointer
=	O
buffer	pointer
;	O
*	O
w	pointer
++	O
=	O
font	array
[	O
0	int
]	O
;	O
while	O
(	O
*	O
p	pointer
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'"'	O
)	O
{	O
in_quotes	int
=	O
!	O
in_quotes	int
;	O
p	pointer
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
*	O
p	pointer
==	O
' '	O
&&	O
!	O
in_quotes	int
)	O
{	O
p	pointer
++	O
;	O
if	O
(	O
*	O
p	pointer
!=	O
0	int
)	O
{	O
alt_state	int
=	O
!	O
alt_state	int
;	O
*	O
w	pointer
++	O
=	O
font	array
[	O
alt_state	int
]	O
;	O
}	O
while	O
(	O
*	O
p	pointer
==	O
' '	O
)	O
p	pointer
++	O
;	O
continue	O
;	O
}	O
*	O
w	pointer
++	O
=	O
*	O
p	pointer
++	O
;	O
}	O
if	O
(	O
font	array
[	O
alt_state	int
]	O
!=	O
CHAR_FONT_NORMAL	char
)	O
*	O
w	pointer
++	O
=	O
CHAR_FONT_NORMAL	char
;	O
*	O
w	pointer
=	O
0	int
;	O
print_string	function
(	O
buffer	pointer
)	O
;	O
return	O
1	int
;	O
}	O
static	O
void	O
handle_tp_ip	function
(	O
int	O
is_tp	int
)	O
{	O
if	O
(	O
col	int
>	O
0	int
)	O
newline	function
(	O
)	O
;	O
newline	function
(	O
)	O
;	O
if	O
(	O
is_tp	int
)	O
{	O
tp_flag	int
=	O
1	int
;	O
indentation	int
=	O
0	int
;	O
}	O
else	O
indentation	int
=	O
8	int
;	O
}	O
static	O
void	O
handle_command	function
(	O
char	O
*	O
buffer	pointer
)	O
{	O
int	O
len	int
;	O
strtok	function
(	O
buffer	pointer
,	O
" \t"	pointer
)	O
;	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".SH"	pointer
)	O
==	O
0	int
)	O
{	O
indentation	int
=	O
0	int
;	O
handle_node	function
(	O
buffer	pointer
,	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".\\\"NODE"	pointer
)	O
==	O
0	int
)	O
{	O
handle_node	function
(	O
buffer	pointer
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".\\\"DONT_SPLIT\""	pointer
)	O
==	O
0	int
)	O
{	O
no_split_flag	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".\\\"SKIP_SECTION\""	pointer
)	O
==	O
0	int
)	O
{	O
skip_flag	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".\\\"LINK2\""	pointer
)	O
==	O
0	int
)	O
{	O
link_flag	int
=	O
2	int
;	O
}	O
else	O
if	O
(	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".PP"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".P"	pointer
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".LP"	pointer
)	O
==	O
0	int
)	O
)	O
{	O
indentation	int
=	O
0	int
;	O
if	O
(	O
col	int
>	O
0	int
)	O
newline	function
(	O
)	O
;	O
newline	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".nf"	pointer
)	O
==	O
0	int
)	O
{	O
verbatim_flag	int
=	O
1	int
;	O
if	O
(	O
col	int
>	O
0	int
)	O
newline	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".I"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
buffer	pointer
,	O
".B"	pointer
)	O
==	O
0	int
||	O
strcmp	function
(	O
buffer	pointer
,	O
".SB"	pointer
)	O
==	O
0	int
)	O
{	O
char	O
*	O
p	pointer
;	O
char	O
*	O
w	pointer
;	O
int	O
backslash_flag	int
=	O
0	int
;	O
p	pointer
=	O
strtok	function
(	O
NULL	O
,	O
""	pointer
)	O
;	O
if	O
(	O
p	pointer
==	O
NULL	O
)	O
{	O
print_error	function
(	O
"Syntax error: .I | .B | .SB : no text"	pointer
)	O
;	O
return	O
;	O
}	O
*	O
buffer	pointer
=	O
(	O
buffer	pointer
[	O
1	int
]	O
==	O
'I'	O
)	O
?	O
CHAR_FONT_ITALIC	char
:	O
CHAR_FONT_BOLD	char
;	O
for	O
(	O
w	pointer
=	O
&	O
buffer	pointer
[	O
1	int
]	O
;	O
*	O
p	pointer
;	O
p	pointer
++	O
)	O
{	O
if	O
(	O
*	O
p	pointer
==	O
'\\'	O
&&	O
!	O
backslash_flag	int
)	O
{	O
backslash_flag	int
=	O
1	int
;	O
continue	O
;	O
}	O
backslash_flag	int
=	O
0	int
;	O
*	O
w	pointer
++	O
=	O
*	O
p	pointer
;	O
}	O
*	O
w	pointer
++	O
=	O
CHAR_FONT_NORMAL	char
;	O
*	O
w	pointer
=	O
0	int
;	O
print_string	function
(	O
buffer	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".TP"	pointer
)	O
==	O
0	int
)	O
{	O
handle_tp_ip	function
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".IP"	pointer
)	O
==	O
0	int
)	O
{	O
handle_tp_ip	function
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".\\\"TOPICS"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
out_row	int
>	O
1	int
)	O
{	O
print_error	function
(	O
"Syntax error: .\\\"TOPICS must be first command"	pointer
)	O
;	O
return	O
;	O
}	O
buffer	pointer
=	O
strtok	function
(	O
NULL	O
,	O
""	pointer
)	O
;	O
if	O
(	O
buffer	pointer
==	O
NULL	O
)	O
{	O
print_error	function
(	O
"Syntax error: .\\\"TOPICS: no text"	pointer
)	O
;	O
return	O
;	O
}	O
if	O
(	O
buffer	pointer
[	O
0	int
]	O
==	O
'"'	O
)	O
{	O
buffer	pointer
++	O
;	O
len	int
=	O
strlen	function
(	O
buffer	pointer
)	O
;	O
if	O
(	O
buffer	pointer
[	O
len	int
-	O
1	int
]	O
==	O
'"'	O
)	O
{	O
len	int
--	O
;	O
buffer	pointer
[	O
len	int
]	O
=	O
0	int
;	O
}	O
}	O
topics	pointer
=	O
strdup	function
(	O
buffer	pointer
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".br"	pointer
)	O
==	O
0	int
)	O
{	O
if	O
(	O
col	int
)	O
newline	function
(	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	function
(	O
buffer	pointer
,	O
".\\\""	pointer
,	O
3	int
)	O
==	O
0	int
)	O
{	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".TH"	pointer
)	O
==	O
0	int
)	O
{	O
}	O
else	O
if	O
(	O
strcmp	function
(	O
buffer	pointer
,	O
".SM"	pointer
)	O
==	O
0	int
)	O
{	O
buffer	pointer
=	O
strtok	function
(	O
NULL	O
,	O
""	pointer
)	O
;	O
if	O
(	O
buffer	pointer
)	O
print_string	function
(	O
buffer	pointer
)	O
;	O
}	O
else	O
if	O
(	O
handle_alt_font	function
(	O
buffer	pointer
)	O
==	O
1	int
)	O
{	O
return	O
;	O
}	O
else	O
{	O
char	O
warn_str	array
[	O
BUFFER_SIZE	int
]	O
;	O
g_snprintf	function
(	O
warn_str	array
,	O
sizeof	O
(	O
warn_str	array
)	O
,	O
"Warning: unsupported command %s"	pointer
,	O
buffer	pointer
)	O
;	O
print_error	function
(	O
warn_str	array
)	O
;	O
return	O
;	O
}	O
}	O
static	O
struct	O
links	struct
{	O
char	O
*	O
linkname	pointer
;	O
int	O
line	int
;	O
const	O
char	O
*	O
filename	pointer
;	O
struct	O
links	struct
*	O
next	pointer
;	O
}	O
links	struct
,	O
*	O
current_link	pointer
;	O
static	O
void	O
handle_link	function
(	O
char	O
*	O
buffer	pointer
)	O
{	O
static	O
char	O
old	array
[	O
80	int
]	O
;	O
int	O
len	int
;	O
char	O
*	O
amp	pointer
;	O
const	O
char	O
*	O
amp_arg	pointer
;	O
switch	O
(	O
link_flag	int
)	O
{	O
case	O
1	int
:	O
break	O
;	O
case	O
2	int
:	O
if	O
(	O
buffer	pointer
[	O
0	int
]	O
==	O
'.'	O
&&	O
(	O
buffer	pointer
[	O
1	int
]	O
==	O
'I'	O
||	O
buffer	pointer
[	O
1	int
]	O
==	O
'B'	O
)	O
)	O
for	O
(	O
buffer	pointer
+=	O
2	int
;	O
*	O
buffer	pointer
==	O
' '	O
||	O
*	O
buffer	pointer
==	O
'\t'	O
;	O
buffer	pointer
++	O
)	O
;	O
g_strlcpy	function
(	O
old	array
,	O
buffer	pointer
,	O
sizeof	O
(	O
old	array
)	O
)	O
;	O
link_flag	int
=	O
3	int
;	O
break	O
;	O
case	O
3	int
:	O
if	O
(	O
buffer	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
buffer	pointer
++	O
;	O
if	O
(	O
buffer	pointer
[	O
0	int
]	O
==	O
'\\'	O
)	O
buffer	pointer
++	O
;	O
if	O
(	O
buffer	pointer
[	O
0	int
]	O
==	O
'"'	O
)	O
buffer	pointer
++	O
;	O
len	int
=	O
strlen	function
(	O
buffer	pointer
)	O
;	O
if	O
(	O
len	int
&&	O
buffer	pointer
[	O
len	int
-	O
1	int
]	O
==	O
'"'	O
)	O
{	O
buffer	pointer
[	O
--	O
len	int
]	O
=	O
0	int
;	O
}	O
amp	pointer
=	O
strstr	function
(	O
old	array
,	O
"\\&"	pointer
)	O
;	O
if	O
(	O
amp	pointer
)	O
{	O
*	O
amp	pointer
=	O
0	int
;	O
amp	pointer
+=	O
2	int
;	O
amp_arg	pointer
=	O
amp	pointer
;	O
}	O
else	O
{	O
amp_arg	pointer
=	O
""	pointer
;	O
}	O
printf_string	function
(	O
"%c%s%c%s%c%s\n"	pointer
,	O
CHAR_LINK_START	char
,	O
old	array
,	O
CHAR_LINK_POINTER	char
,	O
buffer	pointer
,	O
CHAR_LINK_END	char
,	O
amp_arg	pointer
)	O
;	O
link_flag	int
=	O
0	int
;	O
if	O
(	O
current_link	pointer
)	O
{	O
current_link	pointer
->	O
next	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
links	struct
)	O
)	O
;	O
current_link	pointer
=	O
current_link	pointer
->	O
next	pointer
;	O
current_link	pointer
->	O
next	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
current_link	pointer
=	O
&	O
links	struct
;	O
}	O
current_link	pointer
->	O
linkname	pointer
=	O
strdup	function
(	O
buffer	pointer
)	O
;	O
current_link	pointer
->	O
filename	pointer
=	O
c_in	pointer
;	O
current_link	pointer
->	O
line	int
=	O
in_row	int
;	O
break	O
;	O
}	O
}	O
int	O
main	function
(	O
int	O
argc	pointer
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
int	O
len	int
;	O
const	O
char	O
*	O
c_man	pointer
;	O
const	O
char	O
*	O
c_tmpl	pointer
;	O
FILE	struct
*	O
f_man	pointer
;	O
FILE	struct
*	O
f_tmpl	pointer
;	O
char	O
buffer	pointer
[	O
BUFFER_SIZE	int
]	O
;	O
char	O
*	O
node	pointer
=	O
NULL	O
;	O
char	O
*	O
outfile_buffer	pointer
;	O
long	O
cont_start	long
;	O
long	O
file_end	long
;	O
if	O
(	O
argc	pointer
!=	O
4	int
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
"Usage: man2hlp file.man template_file helpfile\n"	pointer
)	O
;	O
return	O
3	int
;	O
}	O
c_man	pointer
=	O
argv	pointer
[	O
1	int
]	O
;	O
c_tmpl	pointer
=	O
argv	pointer
[	O
2	int
]	O
;	O
c_out	pointer
=	O
argv	pointer
[	O
3	int
]	O
;	O
f_man	pointer
=	O
fopen_check	function
(	O
c_man	pointer
,	O
"r"	pointer
)	O
;	O
f_out	pointer
=	O
fopen_check	function
(	O
c_out	pointer
,	O
"w"	pointer
)	O
;	O
c_in	pointer
=	O
c_man	pointer
;	O
while	O
(	O
fgets	function
(	O
buffer	pointer
,	O
BUFFER_SIZE	int
,	O
f_man	pointer
)	O
)	O
{	O
char	O
*	O
input_line	pointer
;	O
if	O
(	O
buffer	pointer
[	O
0	int
]	O
==	O
'\\'	O
&&	O
buffer	pointer
[	O
1	int
]	O
==	O
'&'	O
)	O
input_line	pointer
=	O
buffer	pointer
+	O
2	int
;	O
else	O
input_line	pointer
=	O
buffer	pointer
;	O
in_row	int
++	O
;	O
len	int
=	O
strlen	function
(	O
input_line	pointer
)	O
;	O
if	O
(	O
input_line	pointer
[	O
len	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
len	int
--	O
;	O
input_line	pointer
[	O
len	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
verbatim_flag	int
)	O
{	O
if	O
(	O
strcmp	function
(	O
input_line	pointer
,	O
".fi"	pointer
)	O
==	O
0	int
)	O
{	O
verbatim_flag	int
=	O
0	int
;	O
}	O
else	O
{	O
print_string	function
(	O
input_line	pointer
)	O
;	O
newline	function
(	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
link_flag	int
)	O
{	O
handle_link	function
(	O
input_line	pointer
)	O
;	O
}	O
else	O
if	O
(	O
buffer	pointer
[	O
0	int
]	O
==	O
'.'	O
)	O
{	O
handle_command	function
(	O
input_line	pointer
)	O
;	O
}	O
else	O
{	O
print_string	function
(	O
input_line	pointer
)	O
;	O
}	O
if	O
(	O
tp_flag	int
)	O
{	O
if	O
(	O
tp_flag	int
==	O
1	int
)	O
{	O
tp_flag	int
=	O
2	int
;	O
}	O
else	O
{	O
tp_flag	int
=	O
0	int
;	O
indentation	int
=	O
8	int
;	O
if	O
(	O
col	int
>=	O
indentation	int
)	O
newline	function
(	O
)	O
;	O
else	O
while	O
(	O
++	O
col	int
<	O
indentation	int
)	O
fputc	function
(	O
' '	O
,	O
f_out	pointer
)	O
;	O
}	O
}	O
}	O
newline	function
(	O
)	O
;	O
fclose_check	function
(	O
f_man	pointer
)	O
;	O
f_tmpl	pointer
=	O
fopen_check	function
(	O
c_tmpl	pointer
,	O
"r"	pointer
)	O
;	O
c_in	pointer
=	O
c_tmpl	pointer
;	O
while	O
(	O
fgets	function
(	O
buffer	pointer
,	O
BUFFER_SIZE	int
,	O
f_tmpl	pointer
)	O
)	O
{	O
if	O
(	O
node	pointer
)	O
{	O
if	O
(	O
*	O
buffer	pointer
&&	O
*	O
buffer	pointer
!=	O
'\n'	O
)	O
{	O
cnode	pointer
->	O
lname	pointer
=	O
strdup	function
(	O
buffer	pointer
)	O
;	O
node	pointer
=	O
strchr	function
(	O
cnode	pointer
->	O
lname	pointer
,	O
'\n'	O
)	O
;	O
if	O
(	O
node	pointer
)	O
*	O
node	pointer
=	O
0	int
;	O
}	O
node	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
node	pointer
=	O
strchr	function
(	O
buffer	pointer
,	O
CHAR_NODE_END	char
)	O
;	O
if	O
(	O
node	pointer
&&	O
(	O
node	pointer
[	O
1	int
]	O
==	O
'['	O
)	O
)	O
{	O
char	O
*	O
p	pointer
=	O
strchr	function
(	O
node	pointer
,	O
']'	O
)	O
;	O
if	O
(	O
p	pointer
)	O
{	O
if	O
(	O
strncmp	function
(	O
node	pointer
+	O
1	int
,	O
"[main]"	pointer
,	O
6	int
)	O
==	O
0	int
)	O
{	O
node	pointer
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
cnode	pointer
)	O
{	O
cnode	pointer
=	O
&	O
nodes	struct
;	O
}	O
else	O
{	O
cnode	pointer
->	O
next	pointer
=	O
malloc	function
(	O
sizeof	O
(	O
nodes	struct
)	O
)	O
;	O
cnode	pointer
=	O
cnode	pointer
->	O
next	pointer
;	O
}	O
cnode	pointer
->	O
node	pointer
=	O
strdup	function
(	O
node	pointer
+	O
2	int
)	O
;	O
cnode	pointer
->	O
node	pointer
[	O
p	pointer
-	O
node	pointer
-	O
2	int
]	O
=	O
0	int
;	O
cnode	pointer
->	O
lname	pointer
=	O
NULL	O
;	O
cnode	pointer
->	O
next	pointer
=	O
NULL	O
;	O
cnode	pointer
->	O
heading_level	int
=	O
0	int
;	O
}	O
}	O
else	O
node	pointer
=	O
NULL	O
;	O
}	O
else	O
node	pointer
=	O
NULL	O
;	O
}	O
fputs	function
(	O
buffer	pointer
,	O
f_out	pointer
)	O
;	O
}	O
cont_start	long
=	O
ftell	function
(	O
f_out	pointer
)	O
;	O
if	O
(	O
cont_start	long
<=	O
0	int
)	O
{	O
perror	function
(	O
c_out	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
topics	pointer
)	O
fprintf	function
(	O
f_out	pointer
,	O
"\004[Contents]\n%s\n\n"	pointer
,	O
topics	pointer
)	O
;	O
else	O
fprintf	function
(	O
f_out	pointer
,	O
"\004[Contents]\n"	pointer
)	O
;	O
for	O
(	O
current_link	pointer
=	O
&	O
links	struct
;	O
current_link	pointer
&&	O
current_link	pointer
->	O
linkname	pointer
;	O
)	O
{	O
int	O
found	int
=	O
0	int
;	O
struct	O
links	struct
*	O
next	pointer
=	O
current_link	pointer
->	O
next	pointer
;	O
if	O
(	O
strcmp	function
(	O
current_link	pointer
->	O
linkname	pointer
,	O
"Contents"	pointer
)	O
==	O
0	int
)	O
{	O
found	int
=	O
1	int
;	O
}	O
else	O
{	O
for	O
(	O
cnode	pointer
=	O
&	O
nodes	struct
;	O
cnode	pointer
&&	O
cnode	pointer
->	O
node	pointer
;	O
cnode	pointer
=	O
cnode	pointer
->	O
next	pointer
)	O
{	O
if	O
(	O
strcmp	function
(	O
cnode	pointer
->	O
node	pointer
,	O
current_link	pointer
->	O
linkname	pointer
)	O
==	O
0	int
)	O
{	O
found	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
found	int
)	O
{	O
g_snprintf	function
(	O
buffer	pointer
,	O
sizeof	O
(	O
buffer	pointer
)	O
,	O
"Stale link \"%s\""	pointer
,	O
current_link	pointer
->	O
linkname	pointer
)	O
;	O
c_in	pointer
=	O
current_link	pointer
->	O
filename	pointer
;	O
in_row	int
=	O
current_link	pointer
->	O
line	int
;	O
print_error	function
(	O
buffer	pointer
)	O
;	O
}	O
free	function
(	O
current_link	pointer
->	O
linkname	pointer
)	O
;	O
if	O
(	O
current_link	pointer
!=	O
&	O
links	struct
)	O
free	function
(	O
current_link	pointer
)	O
;	O
current_link	pointer
=	O
next	pointer
;	O
}	O
for	O
(	O
cnode	pointer
=	O
&	O
nodes	struct
;	O
cnode	pointer
&&	O
cnode	pointer
->	O
node	pointer
;	O
)	O
{	O
char	O
*	O
node	pointer
=	O
cnode	pointer
->	O
node	pointer
;	O
struct	O
node	pointer
*	O
next	pointer
=	O
cnode	pointer
->	O
next	pointer
;	O
if	O
(	O
*	O
node	pointer
)	O
fprintf	function
(	O
f_out	pointer
,	O
"  %*s\001%s\002%s\003"	pointer
,	O
cnode	pointer
->	O
heading_level	int
,	O
""	pointer
,	O
cnode	pointer
->	O
lname	pointer
?	O
cnode	pointer
->	O
lname	pointer
:	O
node	pointer
,	O
node	pointer
)	O
;	O
fprintf	function
(	O
f_out	pointer
,	O
"\n"	pointer
)	O
;	O
free	function
(	O
cnode	pointer
->	O
node	pointer
)	O
;	O
if	O
(	O
cnode	pointer
->	O
lname	pointer
)	O
free	function
(	O
cnode	pointer
->	O
lname	pointer
)	O
;	O
if	O
(	O
cnode	pointer
!=	O
&	O
nodes	struct
)	O
free	function
(	O
cnode	pointer
)	O
;	O
cnode	pointer
=	O
next	pointer
;	O
}	O
file_end	long
=	O
ftell	function
(	O
f_out	pointer
)	O
;	O
if	O
(	O
(	O
file_end	long
<=	O
0	int
)	O
||	O
(	O
file_end	long
-	O
cont_start	long
<=	O
0	int
)	O
)	O
{	O
perror	function
(	O
c_out	pointer
)	O
;	O
return	O
1	int
;	O
}	O
fclose_check	function
(	O
f_out	pointer
)	O
;	O
fclose_check	function
(	O
f_tmpl	pointer
)	O
;	O
f_out	pointer
=	O
fopen_check	function
(	O
c_out	pointer
,	O
"r"	pointer
)	O
;	O
outfile_buffer	pointer
=	O
malloc	function
(	O
file_end	long
)	O
;	O
if	O
(	O
!	O
outfile_buffer	pointer
)	O
return	O
1	int
;	O
if	O
(	O
!	O
persistent_fread	function
(	O
outfile_buffer	pointer
,	O
file_end	long
,	O
f_out	pointer
)	O
)	O
{	O
perror	function
(	O
c_out	pointer
)	O
;	O
return	O
1	int
;	O
}	O
fclose_check	function
(	O
f_out	pointer
)	O
;	O
f_out	pointer
=	O
fopen_check	function
(	O
c_out	pointer
,	O
"w"	pointer
)	O
;	O
if	O
(	O
!	O
persistent_fwrite	function
(	O
outfile_buffer	pointer
+	O
cont_start	long
,	O
file_end	long
-	O
cont_start	long
,	O
f_out	pointer
)	O
)	O
{	O
perror	function
(	O
c_out	pointer
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
persistent_fwrite	function
(	O
outfile_buffer	pointer
,	O
cont_start	long
,	O
f_out	pointer
)	O
)	O
{	O
perror	function
(	O
c_out	pointer
)	O
;	O
return	O
1	int
;	O
}	O
free	function
(	O
outfile_buffer	pointer
)	O
;	O
fclose_check	function
(	O
f_out	pointer
)	O
;	O
return	O
0	int
;	O
}	O
