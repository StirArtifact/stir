gsl_interp	struct
*	O
gsl_interp_alloc	function
(	O
const	O
gsl_interp_type	struct
*	O
T	pointer
,	O
size_t	long
size	long
)	O
{	O
gsl_interp	struct
*	O
interp	pointer
;	O
if	O
(	O
size	long
<	O
T	pointer
->	O
min_size	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"insufficient number of points for interpolation type"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
interp	pointer
=	O
(	O
gsl_interp	struct
*	O
)	O
malloc	function
(	O
sizeof	O
(	O
gsl_interp	struct
)	O
)	O
;	O
if	O
(	O
interp	pointer
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for interp struct"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
interp	pointer
->	O
type	pointer
=	O
T	pointer
;	O
interp	pointer
->	O
size	long
=	O
size	long
;	O
if	O
(	O
interp	pointer
->	O
type	pointer
->	O
alloc	pointer
==	O
NULL	O
)	O
{	O
interp	pointer
->	O
state	pointer
=	O
NULL	O
;	O
return	O
interp	pointer
;	O
}	O
interp	pointer
->	O
state	pointer
=	O
interp	pointer
->	O
type	pointer
->	O
alloc	pointer
(	O
size	long
)	O
;	O
if	O
(	O
interp	pointer
->	O
state	pointer
==	O
NULL	O
)	O
{	O
free	function
(	O
interp	pointer
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for interp state"	pointer
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
;	O
return	O
interp	pointer
;	O
}	O
int	O
gsl_interp_init	function
(	O
gsl_interp	struct
*	O
interp	pointer
,	O
const	O
double	O
x_array	array
[	O
]	O
,	O
const	O
double	O
y_array	array
[	O
]	O
,	O
size_t	long
size	long
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
size	long
!=	O
interp	pointer
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"data must match size of interpolation object"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
size	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
!	O
(	O
x_array	array
[	O
i	long
-	O
1	int
]	O
<	O
x_array	array
[	O
i	long
]	O
)	O
)	O
{	O
GSL_ERROR	O
(	O
"x values must be strictly increasing"	pointer
,	O
GSL_EINVAL	int
)	O
;	O
}	O
}	O
interp	pointer
->	O
xmin	double
=	O
x_array	array
[	O
0	int
]	O
;	O
interp	pointer
->	O
xmax	double
=	O
x_array	array
[	O
size	long
-	O
1	int
]	O
;	O
{	O
int	O
status	int
=	O
interp	pointer
->	O
type	pointer
->	O
init	pointer
(	O
interp	pointer
->	O
state	pointer
,	O
x_array	array
,	O
y_array	array
,	O
size	long
)	O
;	O
return	O
status	int
;	O
}	O
}	O
const	O
char	O
*	O
gsl_interp_name	function
(	O
const	O
gsl_interp	struct
*	O
interp	pointer
)	O
{	O
return	O
interp	pointer
->	O
type	pointer
->	O
name	pointer
;	O
}	O
unsigned	O
int	O
gsl_interp_min_size	function
(	O
const	O
gsl_interp	struct
*	O
interp	pointer
)	O
{	O
return	O
interp	pointer
->	O
type	pointer
->	O
min_size	int
;	O
}	O
unsigned	O
int	O
gsl_interp_type_min_size	function
(	O
const	O
gsl_interp_type	struct
*	O
T	pointer
)	O
{	O
return	O
T	pointer
->	O
min_size	int
;	O
}	O
void	O
gsl_interp_free	function
(	O
gsl_interp	struct
*	O
interp	pointer
)	O
{	O
RETURN_IF_NULL	O
(	O
interp	pointer
)	O
;	O
if	O
(	O
interp	pointer
->	O
type	pointer
->	O
free	function
)	O
interp	pointer
->	O
type	pointer
->	O
free	function
(	O
interp	pointer
->	O
state	pointer
)	O
;	O
free	function
(	O
interp	pointer
)	O
;	O
}	O
int	O
gsl_interp_eval_e	function
(	O
const	O
gsl_interp	struct
*	O
interp	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
a	double
,	O
double	O
*	O
y	double
)	O
{	O
if	O
(	O
x	double
<	O
interp	pointer
->	O
xmin	double
||	O
x	double
>	O
interp	pointer
->	O
xmax	double
)	O
{	O
*	O
y	double
=	O
GSL_NAN	O
;	O
return	O
GSL_EDOM	int
;	O
}	O
return	O
interp	pointer
->	O
type	pointer
->	O
eval	pointer
(	O
interp	pointer
->	O
state	pointer
,	O
xa	array
,	O
ya	array
,	O
interp	pointer
->	O
size	long
,	O
x	double
,	O
a	double
,	O
y	double
)	O
;	O
}	O
double	O
gsl_interp_eval	function
(	O
const	O
gsl_interp	struct
*	O
interp	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
a	double
)	O
{	O
double	O
y	double
;	O
int	O
status	int
;	O
if	O
(	O
x	double
<	O
interp	pointer
->	O
xmin	double
||	O
x	double
>	O
interp	pointer
->	O
xmax	double
)	O
{	O
GSL_ERROR_VAL	O
(	O
"interpolation error"	pointer
,	O
GSL_EDOM	int
,	O
GSL_NAN	O
)	O
;	O
}	O
status	int
=	O
interp	pointer
->	O
type	pointer
->	O
eval	pointer
(	O
interp	pointer
->	O
state	pointer
,	O
xa	array
,	O
ya	array
,	O
interp	pointer
->	O
size	long
,	O
x	double
,	O
a	double
,	O
&	O
y	double
)	O
;	O
DISCARD_STATUS	O
(	O
status	int
)	O
;	O
return	O
y	double
;	O
}	O
int	O
gsl_interp_eval_deriv_e	function
(	O
const	O
gsl_interp	struct
*	O
interp	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
a	double
,	O
double	O
*	O
dydx	pointer
)	O
{	O
if	O
(	O
x	double
<	O
interp	pointer
->	O
xmin	double
||	O
x	double
>	O
interp	pointer
->	O
xmax	double
)	O
{	O
*	O
dydx	pointer
=	O
GSL_NAN	O
;	O
return	O
GSL_EDOM	int
;	O
}	O
return	O
interp	pointer
->	O
type	pointer
->	O
eval_deriv	pointer
(	O
interp	pointer
->	O
state	pointer
,	O
xa	array
,	O
ya	array
,	O
interp	pointer
->	O
size	long
,	O
x	double
,	O
a	double
,	O
dydx	pointer
)	O
;	O
}	O
double	O
gsl_interp_eval_deriv	function
(	O
const	O
gsl_interp	struct
*	O
interp	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
a	double
)	O
{	O
double	O
dydx	pointer
;	O
int	O
status	int
;	O
if	O
(	O
x	double
<	O
interp	pointer
->	O
xmin	double
||	O
x	double
>	O
interp	pointer
->	O
xmax	double
)	O
{	O
GSL_ERROR_VAL	O
(	O
"interpolation error"	pointer
,	O
GSL_EDOM	int
,	O
GSL_NAN	O
)	O
;	O
}	O
status	int
=	O
interp	pointer
->	O
type	pointer
->	O
eval_deriv	pointer
(	O
interp	pointer
->	O
state	pointer
,	O
xa	array
,	O
ya	array
,	O
interp	pointer
->	O
size	long
,	O
x	double
,	O
a	double
,	O
&	O
dydx	pointer
)	O
;	O
DISCARD_STATUS	O
(	O
status	int
)	O
;	O
return	O
dydx	pointer
;	O
}	O
int	O
gsl_interp_eval_deriv2_e	function
(	O
const	O
gsl_interp	struct
*	O
interp	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
a	double
,	O
double	O
*	O
d2	pointer
)	O
{	O
if	O
(	O
x	double
<	O
interp	pointer
->	O
xmin	double
||	O
x	double
>	O
interp	pointer
->	O
xmax	double
)	O
{	O
*	O
d2	pointer
=	O
GSL_NAN	O
;	O
return	O
GSL_EDOM	int
;	O
}	O
return	O
interp	pointer
->	O
type	pointer
->	O
eval_deriv2	pointer
(	O
interp	pointer
->	O
state	pointer
,	O
xa	array
,	O
ya	array
,	O
interp	pointer
->	O
size	long
,	O
x	double
,	O
a	double
,	O
d2	pointer
)	O
;	O
}	O
double	O
gsl_interp_eval_deriv2	function
(	O
const	O
gsl_interp	struct
*	O
interp	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
double	O
x	double
,	O
gsl_interp_accel	struct
*	O
a	double
)	O
{	O
double	O
d2	pointer
;	O
int	O
status	int
;	O
if	O
(	O
x	double
<	O
interp	pointer
->	O
xmin	double
||	O
x	double
>	O
interp	pointer
->	O
xmax	double
)	O
{	O
GSL_ERROR_VAL	O
(	O
"interpolation error"	pointer
,	O
GSL_EDOM	int
,	O
GSL_NAN	O
)	O
;	O
}	O
status	int
=	O
interp	pointer
->	O
type	pointer
->	O
eval_deriv2	pointer
(	O
interp	pointer
->	O
state	pointer
,	O
xa	array
,	O
ya	array
,	O
interp	pointer
->	O
size	long
,	O
x	double
,	O
a	double
,	O
&	O
d2	pointer
)	O
;	O
DISCARD_STATUS	O
(	O
status	int
)	O
;	O
return	O
d2	pointer
;	O
}	O
int	O
gsl_interp_eval_integ_e	function
(	O
const	O
gsl_interp	struct
*	O
interp	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
double	O
a	double
,	O
double	O
b	double
,	O
gsl_interp_accel	struct
*	O
acc	pointer
,	O
double	O
*	O
result	pointer
)	O
{	O
if	O
(	O
a	double
>	O
b	double
||	O
a	double
<	O
interp	pointer
->	O
xmin	double
||	O
b	double
>	O
interp	pointer
->	O
xmax	double
)	O
{	O
*	O
result	pointer
=	O
GSL_NAN	O
;	O
return	O
GSL_EDOM	int
;	O
}	O
else	O
if	O
(	O
a	double
==	O
b	double
)	O
{	O
*	O
result	pointer
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
return	O
interp	pointer
->	O
type	pointer
->	O
eval_integ	pointer
(	O
interp	pointer
->	O
state	pointer
,	O
xa	array
,	O
ya	array
,	O
interp	pointer
->	O
size	long
,	O
acc	pointer
,	O
a	double
,	O
b	double
,	O
result	pointer
)	O
;	O
}	O
double	O
gsl_interp_eval_integ	function
(	O
const	O
gsl_interp	struct
*	O
interp	pointer
,	O
const	O
double	O
xa	array
[	O
]	O
,	O
const	O
double	O
ya	array
[	O
]	O
,	O
double	O
a	double
,	O
double	O
b	double
,	O
gsl_interp_accel	struct
*	O
acc	pointer
)	O
{	O
double	O
result	pointer
;	O
int	O
status	int
;	O
if	O
(	O
a	double
>	O
b	double
||	O
a	double
<	O
interp	pointer
->	O
xmin	double
||	O
b	double
>	O
interp	pointer
->	O
xmax	double
)	O
{	O
GSL_ERROR_VAL	O
(	O
"interpolation error"	pointer
,	O
GSL_EDOM	int
,	O
GSL_NAN	O
)	O
;	O
}	O
else	O
if	O
(	O
a	double
==	O
b	double
)	O
{	O
return	O
0.0	int
;	O
}	O
status	int
=	O
interp	pointer
->	O
type	pointer
->	O
eval_integ	pointer
(	O
interp	pointer
->	O
state	pointer
,	O
xa	array
,	O
ya	array
,	O
interp	pointer
->	O
size	long
,	O
acc	pointer
,	O
a	double
,	O
b	double
,	O
&	O
result	pointer
)	O
;	O
DISCARD_STATUS	O
(	O
status	int
)	O
;	O
return	O
result	pointer
;	O
}	O
