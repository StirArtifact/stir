void	O
scan_files	function
(	O
struct	O
idhead	struct
*	O
idhp	pointer
)	O
;	O
void	O
scan_member_file	function
(	O
struct	O
member_file	struct
const	O
*	O
member	pointer
)	O
;	O
void	O
usage	function
(	O
void	O
)	O
;	O
char	O
const	O
*	O
program_name	pointer
;	O
char	O
*	O
lang_map_file_name	pointer
=	O
0	int
;	O
int	O
show_version	int
=	O
0	int
;	O
int	O
show_help	int
=	O
0	int
;	O
struct	O
idhead	struct
idh	struct
;	O
struct	O
file_link	struct
*	O
cw_dlink	pointer
;	O
void	O
usage	function
(	O
void	O
)	O
{	O
fprintf	function
(	O
stderr	pointer
,	O
_	O
(	O
"Try `%s --help' for more information.\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
exit	function
(	O
1	int
)	O
;	O
}	O
static	O
struct	O
option	struct
const	O
long_options	array
[	O
]	O
=	O
{	O
{	O
"include"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'i'	O
}	O
,	O
{	O
"exclude"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'x'	O
}	O
,	O
{	O
"lang-option"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'l'	O
}	O
,	O
{	O
"lang-map"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'm'	O
}	O
,	O
{	O
"default-lang"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'd'	O
}	O
,	O
{	O
"prune"	pointer
,	O
required_argument	int
,	O
0	int
,	O
'p'	O
}	O
,	O
{	O
"help"	pointer
,	O
no_argument	int
,	O
&	O
show_help	int
,	O
1	int
}	O
,	O
{	O
"version"	pointer
,	O
no_argument	int
,	O
&	O
show_version	int
,	O
1	int
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
void	O
help_me	function
(	O
void	O
)	O
{	O
printf	function
(	O
_	O
(	O
"Usage: %s [OPTION]... [FILE]...\n"	pointer
)	O
,	O
program_name	pointer
)	O
;	O
printf	function
(	O
_	O
(	O
"Print all tokens found in a source file.\n  -i, --include=LANGS     include languages in LANGS (default: \"C C++ asm\")\n  -x, --exclude=LANGS     exclude languages in LANGS\n  -l, --lang-option=L:OPT pass OPT as a default for language L (see below)\n  -m, --lang-map=MAPFILE  use MAPFILE to map file names onto source language\n  -d, --default-lang=LANG make LANG the default source language\n  -p, --prune=NAMES       exclude the named files and/or directories\n      --help              display this help and exit\n      --version           output version information and exit\n\nThe following arguments apply to the language-specific scanners:\n"	pointer
)	O
)	O
;	O
language_help_me	function
(	O
)	O
;	O
printf	function
(	O
_	O
(	O
"\nReport bugs to "	pointer
PACKAGE_BUGREPORT	pointer
"\n\n"	pointer
)	O
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
int	O
main	function
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	pointer
)	O
{	O
program_name	pointer
=	O
argv	pointer
[	O
0	int
]	O
;	O
setlocale	function
(	O
LC_ALL	O
,	O
""	pointer
)	O
;	O
bindtextdomain	function
(	O
PACKAGE	pointer
,	O
LOCALEDIR	O
)	O
;	O
textdomain	function
(	O
PACKAGE	pointer
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
optc	int
=	O
getopt_long	function
(	O
argc	int
,	O
argv	pointer
,	O
"i:x:l:m:d:p:"	pointer
,	O
long_options	array
,	O
(	O
int	O
*	O
)	O
0	int
)	O
;	O
if	O
(	O
optc	int
<	O
0	int
)	O
break	O
;	O
switch	O
(	O
optc	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
'i'	O
:	O
include_languages	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'x'	O
:	O
exclude_languages	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
language_save_arg	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
lang_map_file_name	pointer
=	O
optarg	pointer
;	O
break	O
;	O
case	O
'd'	O
:	O
set_default_language	function
(	O
optarg	pointer
)	O
;	O
break	O
;	O
case	O
'p'	O
:	O
if	O
(	O
cw_dlink	pointer
==	O
0	int
)	O
cw_dlink	pointer
=	O
init_walker	function
(	O
&	O
idh	struct
)	O
;	O
prune_file_names	function
(	O
optarg	pointer
,	O
cw_dlink	pointer
)	O
;	O
break	O
;	O
default	O
:	O
usage	function
(	O
)	O
;	O
}	O
}	O
if	O
(	O
show_version	int
)	O
{	O
printf	function
(	O
"%s - %s\n"	pointer
,	O
program_name	pointer
,	O
PACKAGE_VERSION	pointer
)	O
;	O
exit	function
(	O
0	int
)	O
;	O
}	O
if	O
(	O
show_help	int
)	O
help_me	function
(	O
)	O
;	O
argc	int
-=	O
optind	int
;	O
argv	pointer
+=	O
optind	int
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
{	O
static	O
char	O
dot	array
[	O
]	O
=	O
"."	pointer
;	O
static	O
char	O
*	O
dotp	pointer
=	O
dot	array
;	O
argc	int
=	O
1	int
;	O
argv	pointer
=	O
&	O
dotp	pointer
;	O
}	O
language_getopt	function
(	O
)	O
;	O
if	O
(	O
cw_dlink	pointer
==	O
0	int
)	O
cw_dlink	pointer
=	O
init_walker	function
(	O
&	O
idh	struct
)	O
;	O
parse_language_map	function
(	O
lang_map_file_name	pointer
)	O
;	O
while	O
(	O
argc	int
--	O
)	O
{	O
struct	O
file_link	struct
*	O
flink	pointer
=	O
parse_file_name	function
(	O
*	O
argv	pointer
++	O
,	O
cw_dlink	pointer
)	O
;	O
if	O
(	O
flink	pointer
)	O
walk_flink	function
(	O
flink	pointer
,	O
0	int
)	O
;	O
}	O
mark_member_file_links	function
(	O
&	O
idh	struct
)	O
;	O
obstack_init	O
(	O
&	O
tokens_obstack	struct
)	O
;	O
scan_files	function
(	O
&	O
idh	struct
)	O
;	O
return	O
0	int
;	O
}	O
void	O
scan_files	function
(	O
struct	O
idhead	struct
*	O
idhp	pointer
)	O
{	O
struct	O
member_file	struct
*	O
*	O
members_0	pointer
=	O
(	O
struct	O
member_file	struct
*	O
*	O
)	O
hash_dump	function
(	O
&	O
idhp	pointer
->	O
idh_member_file_table	struct
,	O
0	int
,	O
member_file_qsort_compare	function
)	O
;	O
struct	O
member_file	struct
*	O
*	O
end	pointer
=	O
&	O
members_0	pointer
[	O
idhp	pointer
->	O
idh_member_file_table	struct
.	O
ht_fill	long
]	O
;	O
struct	O
member_file	struct
*	O
*	O
members	pointer
;	O
if	O
(	O
largest_member_file	long
>	O
MAX_LARGEST_MEMBER_FILE	O
)	O
largest_member_file	long
=	O
MAX_LARGEST_MEMBER_FILE	O
;	O
scanner_buffer	pointer
=	O
xmalloc	function
(	O
largest_member_file	long
+	O
1	int
)	O
;	O
for	O
(	O
members	pointer
=	O
members_0	pointer
;	O
members	pointer
<	O
end	pointer
;	O
members	pointer
++	O
)	O
scan_member_file	function
(	O
*	O
members	pointer
)	O
;	O
free	function
(	O
scanner_buffer	pointer
)	O
;	O
free	function
(	O
members_0	pointer
)	O
;	O
}	O
void	O
scan_member_file	function
(	O
struct	O
member_file	struct
const	O
*	O
member	pointer
)	O
{	O
struct	O
lang_args	struct
const	O
*	O
lang_args	struct
=	O
member	pointer
->	O
mf_lang_args	pointer
;	O
struct	O
language	struct
const	O
*	O
lang	pointer
=	O
lang_args	struct
->	O
la_language	pointer
;	O
get_token_func_t	pointer
get_token	pointer
=	O
lang	pointer
->	O
lg_get_token	pointer
;	O
struct	O
file_link	struct
*	O
flink	pointer
=	O
member	pointer
->	O
mf_link	pointer
;	O
FILE	struct
*	O
source_FILE	pointer
;	O
chdir_to_link	function
(	O
flink	pointer
->	O
fl_parent	O
)	O
;	O
source_FILE	pointer
=	O
fopen	function
(	O
flink	pointer
->	O
fl_name	array
,	O
"r"	pointer
)	O
;	O
if	O
(	O
source_FILE	pointer
)	O
{	O
void	O
const	O
*	O
args	pointer
=	O
lang_args	struct
->	O
la_args_digested	pointer
;	O
int	O
flags	pointer
;	O
struct	O
token	struct
*	O
token	struct
;	O
while	O
(	O
(	O
token	struct
=	O
(	O
*	O
get_token	pointer
)	O
(	O
source_FILE	pointer
,	O
args	pointer
,	O
&	O
flags	pointer
)	O
)	O
!=	O
NULL	O
)	O
{	O
puts	function
(	O
TOKEN_NAME	O
(	O
token	struct
)	O
)	O
;	O
obstack_free	function
(	O
&	O
tokens_obstack	struct
,	O
token	struct
)	O
;	O
}	O
fclose	function
(	O
source_FILE	pointer
)	O
;	O
}	O
else	O
error	function
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"can't open `%s'"	pointer
)	O
,	O
flink	pointer
->	O
fl_name	array
)	O
;	O
}	O
